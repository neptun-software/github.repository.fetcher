{
  "metadata": {
    "timestamp": 1736568179838,
    "page": 4,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jinwyp/one_click_script",
      "stars": 4855,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.74609375,
          "content": "# EditorConfig is awesome: https://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n# Matches multiple files with brace expansion notation\n# Set default charset\n[*.{js,py}]\ncharset = utf-8\n\n# 4 space indentation\n[*.py,*.sh]\nindent_style = space\nindent_size = 4\n\n# Tab indentation (no size specified)\n[Makefile]\nindent_style = tab\n\n# Indentation override for all JS under lib directory\n[lib/**.js]\nindent_style = space\nindent_size = 4\n\n# Matches the exact files either package.json or .travis.yml\n[{package.json,.travis.yml}]\nindent_style = space\nindent_size = 4\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.740234375,
          "content": "/bbr\n\n# Prerequisites\n*.d\n\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Linker output\n*.ilk\n*.map\n*.exp\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Debug files\n*.dSYM/\n*.su\n*.idb\n*.pdb\n\n# Kernel Module Compile Results\n*.mod*\n*.cmd\n.tmp_versions/\nmodules.order\nModule.symvers\nMkfile.old\ndkms.conf\n\n\n\n\n\n\n# static file for dist css html js\n\n\n\n\n\n# css sprite\nauto-sprite.png\n_auto_sprite.scss\n.sass-cache\n*auto-sprite*\n\n\n# upload files\n\n\n\n# Logs\nlogs\n*.log\nnpm-debug.log*\n\n\n\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules\njspm_packages\n\n# Optional npm cache directory\n.npm\n\n# Optional REPL history\n.node_repl_history\n\n\n\n\n\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and Webstorm\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n.idea/\n\n\n## File-based project format:\n*.iws\n\n## Plugin-specific files:\n\n# IntelliJ\n/out/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n\n\n\n\n# Ignore Mac OS desktop services store\n*.DS_Store\n\n\n# Ignore Windows desktop setting file\ndesktop.ini\n"
        },
        {
          "name": "DNS.md",
          "type": "blob",
          "size": 15.1904296875,
          "content": "# DNS, DOT(DNS over TLS) and DOH(DNS over HTTPS)\n\n## 目录 Table of Contents\n\n* [DNS DOT DOH 介绍](#dns)\n* [Chrome 如何开启DOH 解决DNS污染](#chrome)\n* [Firefox 如何开启DOH](#firefox)\n* [Edge 如何开启DOH](#edge)\n* [安装 AdGuard Home  搭建 DNS 服务器](#adguardhome)\n* [使用 Mosdns 分流国内与国外域名DNS解析请求](#mosdns)\n\n### DNS\n\n1. 面试程序员经常会问的一道面试题: 当在浏览器输入一个网址回车后,后面发生了什么. 例如下图 输入了网址foobar.com后, 首先从DNS服务器查询 foobar.com对应的IP地址 156.x.x.x. 浏览器得到IP后继续访问156.x.x.x 这个服务器地址返回网页. 用户就可以正常浏览网页了.\n![DNS1](https://github.com/jinwyp/one_click_script/blob/master/docs/dns1.png?raw=true)\n\n2. 早些年网页采用http方式传输, 网页没有加密. 后来基于TLS加密技术的https方式传送,网页就被加密无法看到传送的内容了. 如下图\n![DNS2](https://github.com/jinwyp/one_click_script/blob/master/docs/dns2.png?raw=true)\n\n3. 网页传输 http未加密 与 https加密 对比图. 可以看到内容已被加密\n![HTTPS1](https://github.com/jinwyp/one_click_script/blob/master/docs/https1.png?raw=true)\n\n4. 通过DNS解析后得到IP后虽然网页传输是加密的https,其他人无法知道浏览的内容是什么,但第一步查询DNS时是未加密的, GFW防火墙就可以获取到域名信息并污染DNS,返回一个错误的IP地址,这样就无法正常打开网页了. 所以DNS也要加密, DOT(DNS over TLS) 与 DOH(DNS over HTTPS)就诞生了. 开启DOT或DOH后就如下图, 查询DNS后返回的IP地址信息也是加密的. GFW就无法截取信息并污染DNS了. 如何开启DOT和DOH 请看[Chrome开启方法](#chrome) 和 [Firefox开启方法](#firefox)\n![DNS3](https://github.com/jinwyp/one_click_script/blob/master/docs/dns3.png?raw=true)\n\n5. 根据上图仔细看还会发现,第一步输入网址查询DNS的时候还是未加密的, 这样网址的名称还会被其他人获取, 为了解决这个问题又提出了ESNI(Encrypted server name indication), 这样从所有链路都加密了. 由于从第一步输入网址信息就是加密的, 那么DNS服务器如何知道输入的什么网址呢, 所以该技术需要浏览器和DNS提供商配合, 目前新版firefox和CDN服务商Cloudflare已支持开启ESNI. [如何开启Firefox的ESNI方法](#firefoxesni).\n\n6. 更多DOH DOT ESNI 资料请看[什么是加密的 SNI](https://www.cloudflare.com/zh-cn/learning/ssl/what-is-encrypted-sni/). [使用 ESNI、DoH 和 DoT](https://www.toptal.com/web/encrypted-safe-with-esni-doh-dot). [搭建全协议DNS服务器](https://blog.dnomd343.top/dns-server/)\n\n\n### Chrome\n\n1. 需要先下载新版本Chrome 100 [下载地址1](https://pan.baidu.com/s/1PPRPggOHvBhcuZoQL7ZRQQ?pwd=9xuu).  [下载地址2](https://wws.lanzout.com/ihbbt040y4oh)\n2. 打开 Chrome, 在网址栏输入 chrome://settings/security 回车后, 进入\"安全\"设置页面. 或者点击Chrome地址栏右边菜单栏的三个点 打开菜单，然后点击 \"设置\" , 然后点击左边菜单的 \"隐私设置和安全性\", 然后在右边找到的 \"安全\"点击进入\"安全\"设置页面\n\n![Chrome1](https://github.com/jinwyp/one_click_script/blob/master/docs/chrome1.png?raw=true)\n![Chrome2](https://github.com/jinwyp/one_click_script/blob/master/docs/chrome2.png?raw=true)\n\n3. 在打开的 \"安全\" 设置页面中, 选中 \"使用安全 DNS\" 后面的滑块, 再选择下拉框中的Cloudflare 1.1.1.1 或 Google Public DNS，也可以选择下拉框里选择自定义, 然后在下面文本框中输入自己找到的 DoH 服务器. [DNS服务器列表](https://dns.icoa.cn/)  [如何验证是否开启DOT和ESNI](#测试是否开启DOT和ESNI ).\n\n![Chrome3](https://github.com/jinwyp/one_click_script/blob/master/docs/chrome3.png?raw=true)\n\n4. 有时候选择Cloudflare 1.1.1.1 或  Google Public DNS 会出现打不开网站的情况, 这是因为GFW防火墙除了会污染DNS, 还会直接屏蔽掉IP, 导致Cloudflare 1.1.1.1 或 Google Public DNS 8.8.8.8 无法访问, 也就无法解析DNS域名. 解决办法就是自己找到其他海外支持DOT或DOH的DNS服务器, 或者自己在海外架设DNS服务器. 可以使用[\nAdGuardHome](https://github.com/AdguardTeam/AdGuardHome). 具体方法请看[搭建自己的DNS服务器](#搭建自己的DNS服务器).\n\n5. 使用了国外的DOT或DOH后, 也会发现访问国内网站慢, 或者访问国内网站变成海外版本的问题. 这就需要区分国内和国外网站走不同的DNS进行分流, [具体请看DNS分流](#分流国内和国外的DNS服务解析)\n\n### Firefox\n\n1. 需要下载新版本的Firefox.  [下载地址1](https://pan.baidu.com/s/19u-Ayy-rKvgYDmg_TNDIzA?pwd=827m). [下载地址2](https://wws.lanzout.com/ipGdD040ylbg)\n\n2. 点击右边的菜单栏, 然后在下拉菜单点击 \"设置\". 然后选择左边菜单点击\"常规\", 然后在右边最下面\"网络设置\" 点击\"设置\"\n![Firefox1](https://github.com/jinwyp/one_click_script/blob/master/docs/firefox1.png?raw=true)\n![Firefox2](https://github.com/jinwyp/one_click_script/blob/master/docs/firefox2.png?raw=true)\n\n3. 在打开的对话框中，在最下面, 选中 \"启用基于 HTTPS 的 DNS\", 然后在下拉框可以选择Cloudflare 默认值或自定义的DOT服务器 .  [如何验证是否开启DOT和ESNI](#测试是否开启DOT和ESNI ).\n![Firefox3](https://github.com/jinwyp/one_click_script/blob/master/docs/firefox3.png?raw=true)\n\n4. 其他网上教程 [在Firefox中启用 DNS-over-HTTPS(DoH)](https://zhuanlan.zhihu.com/p/75845767)\n\n### FirefoxESNI\n\n1. 需要下载最新版的Firefox  [下载地址1](https://pan.baidu.com/s/19u-Ayy-rKvgYDmg_TNDIzA?pwd=827m). [下载地址2](https://wws.lanzout.com/ipGdD040ylbg)\n2. 在地址栏输入 ``` about:config ``` , 然后点击 \"接受风险并继续\", 然后搜索 ``` network.security.esni.enabled ``` ,\n![Firefox1](https://github.com/jinwyp/one_click_script/blob/master/docs/firefoxesni1.png?raw=true)\n![Firefox2](https://github.com/jinwyp/one_click_script/blob/master/docs/firefoxesni2.png?raw=true)\n\n3. 然后选择 \"布尔\" 类型, 点击右边 + 号, 然后点击右边按钮 将值设为true, 完成.  [如何验证是否开启DOT和ESNI](#测试是否开启DOT和ESNI ).\n![Firefox3](https://github.com/jinwyp/one_click_script/blob/master/docs/firefoxesni3.png?raw=true)\n\n4. 开启 Encrypted Client Hello (ECH) (ESNI的进化版本). 同样在 ``` about:config ``` 搜索条目 ```network.dns.echconfig.enabled``` 和 ```network.dns.use_https_rr_as_altsvc```，将它们的值设定改为 true 即可。\n\n5. 更多问题请查看 [在 Firefox 上设置 DoH 和 ESNI/ECH](https://blog.outv.im/2020/firefox-doh-ech-esni/)\n\n\n### Edge\n\n1. Edge 浏览器 [设置DoH加密DNS的方法] (https://www.icoa.cn/a/953.html)\n\n### 测试是否开启DOT和ESNI\n\n1. 使用浏览器打开 https://www.cloudflare.com/zh-cn/ssl/encrypted-sni/ 点击 \"Check My Browser\" 按钮. 测试之前浏览器设置DNS的服务器请选择Cloudflare的DOH的服务器.\n\n![CF1](https://github.com/jinwyp/one_click_script/blob/master/docs/cfcheck1.png?raw=true)\n\n2. 查看结果. 目前Chrome 还不支持ESNI,估计很快就会支持.\n![CF2](https://github.com/jinwyp/one_click_script/blob/master/docs/cfcheck2.png?raw=true)\n\n\n3. 常见问题: Cloudflare 提醒我 ESNI 未启用！可能是你的 DNS over HTTPS 并没有生效，Firefox 还在使用普通的 DNS 请求方式。这种情况下 ECH 无法工作。\n\n你可以尝试按照 Mozilla Wiki 的指示，在 about:config 中将 network.trr.mode设置为 3，即只使用 TRR（也就是我们的 DNS over HTTPS），强制 Firefox 使用 DoH，这样就能确保使用 ESNI 了。\n\n![CF3](https://github.com/jinwyp/one_click_script/blob/master/docs/cfcheck3.png?raw=true)\n\n### AdGuardHome\n### 搭建的DNS服务器\n\n1. 通过本脚本, ``` bash <(curl -Lso- https://git.io/oneclick) ``` 运行本脚本, 选择28 安装 AdGuard Home 架设DNS服务器, 同时还可以去广告. 建议在国外的服务器上安装\n2. 安装完成后, 再次运行本脚本 选择29 申请域名证书. 这样就可以开启DOH和DOT 加密DNS解析.\n\n3. 具体设置请参考 [AdGuardHome 官方网站](https://github.com/AdguardTeam/AdGuardHome). 本脚本已经自动添加了针对中国网站的广告屏蔽规则.\n4. [AdGuard Home 的整理的DNS服务器列表](https://kb.adguard.com/en/general/dns-providers)\n\n### Mosdns\n### 分流国内和国外的DNS服务解析\n\n1. 建议有条件的请先按照上面教程搭建AdGuardHome DNS服务器. 然后再安装mosdns 进行DNS分流. 没有条件搭建DNS服务器也不用担心, 本脚本已经内置多个DNS服务器地址\n2. 通过使用mosdns 或 mosdns-cn 可以让国内的网址走国内的DNS解析, 国外的网址走国外的DNS解析. 同时也不用在浏览器里面设置DOH了 (上面教程里浏览器设置部分不需要了).  安装mosdns 分为 [Openwrt X86版本](#mosdnsopenwrt), [linux 版本](#mosdnslinux) 或 [windows 版本](#mosdnswindows). 建议有软路由的直接在软路由安装Openwrt X86版本.\n\n#### Mosdnsopenwrt\n#### Mosdns 在 Openwrt 上安装与使用\n1. 升级带有Moddns 的路由器固件. X86的Openwrt可以很方便升级最近的固件 例如Esir的固件或 Sirpdboy 的固件\n2. Esir的固件下载 https://drive.google.com/drive/folders/1uRXg_krKHPrQneI3F2GNcSVRoCgkqESr . Esir youtube 频道 https://www.youtube.com/c/eSirPlayGround\n3. Sirpdboy 的固件下载 https://github.com/sirpdboy/openwrt/blob/master/README.md#%E5%9B%BA%E4%BB%B6%E4%B8%8B%E8%BD%BD\n\n4. 如果使用x86 openwrt 软路由, 也可以直接使用 SSH登录到软路由上 使用如下脚本安装mosdns. 如果已经安装过mosdns 可以在OpenWRT中先删除mosdns. 在openwrt管理菜单 系统 -> 软件包 -> 过滤器  里面 搜索 mosdns 有两个结果 一个是mosdns 一个是 luci-app-mosdns  2个都点击移除 然后再用下面脚本重新安装就可以了\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/dsm/openwrt.sh && chmod +x ./openwrt.sh && ./openwrt.sh\n```\n\n5. 在软路由安装 luci-app-mosdns 完毕后, 请进入OpenWRT管理菜单: 服务-> MosDNS, 在第一个 基本配置 选项卡页面 勾选 \"DNS转发 将 Dnsmasq 域名解析请求转发到 MosDNS 服务器\" 然后勾选 启用 复选框后, 点击 保存&应用 按钮 就可以启动 MosDNS. 注意:如果mosdns启动失败, 请先关闭ssr 或 passwall 或 clash 等插件, 因为这些插件内置的PDNSD也运行在5335端口导致冲突. 或者更换mosdns的启动端口.\n\n![mosdns1](https://github.com/jinwyp/one_click_script/blob/master/docs/mosdns1.png?raw=true)\n\n\n6. 然后在 OpenWRT管理菜单: 网络-> DHCP/DNS -> DNS 转发 填入 127.0.0.1#5335, 因为mosdns运行在软路由的5335端口, 如果mosdns不是运行在软路由 而是用下面的脚本运行在其他linux上,则填入对应IP和端口即可. 然后在第二个tab \"HOSTS 和解析文件\" 勾选 忽略解析文件. 最后点击右下角 保存&应用 按钮完成设置.  注意: 如果没有正确填写转发就勾选了 \"忽略解析文件\" 会导致无法上网, 忽略解析文件的意思就是在dnsmasq 添加 no-reslov 指令不再使用原有的上游DNS解析.\n\n![mosdns2](https://github.com/jinwyp/one_click_script/blob/master/docs/mosdns2.png?raw=true)\n![mosdns3](https://github.com/jinwyp/one_click_script/blob/master/docs/mosdns3.png?raw=true)\n\n7. 最后在 ShadowSocksR Plus+ 或其他passwal等插件中 设置 -> DNS解析方式 -> 使用本机端口为5335的DNS服务. 注意: 默认第一个选项使用PDNSD TCP查询并缓存, 该项的PDNSD的也运行在5335端口, 所以会导致冲突, 如果mosdns启动失败, 请先关闭SSR plus 然后在Openwrt菜单 服务-> MosDNS 页面启动Mosdns. 然后回到ShadowSocksR Plus+页面 选择\"使用本机端口为5335的DNS服务\"后再启动ssr 即可.\n\n![mosdns4](https://github.com/jinwyp/one_click_script/blob/master/docs/mosdns4.png?raw=true)\n\n#### Mosdnslinux\n#### Mosdns 在 linux 上安装与使用\n1. 如果 linux系统 可以使用如下脚本在linux 系统上安装 mosdns 或 mosdns-cn. 安装完成后按照上面的步骤在路由器中设置DNS即可.\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/trojan_v2ray_install.sh && chmod +x ./trojan_v2ray_install.sh && ./trojan_v2ray_install.sh\n```\n\n#### Mosdnswindows\n#### Mosdns 在 windows 上安装与使用\n\n1. 如果是 windows 系统, 推荐直接下载打包好的 [mosdns](https://pan.baidu.com/s/1EN6nvlwQLYzwotCIaDs5UA?pwd=t34w) 提取码: t34w  解压后运行 run_mosdns.bat\n\n2. 如果是 windows 系统, 也可以直接下载打包好的 [mosdns-cn](https://wws.lanzout.com/i7pYR05e80eh) 解压后运行 run.bat 或运行命令 ``` mosdns-cn --config ./config_mosdns_cn.yaml ```\n\n3. 如果是 windows 系统, 也可以可以从 [mosdns-cn 官方网站](https://github.com/IrineSistiana/mosdns-cn/releases/download/v1.4.0/mosdns-cn-windows-amd64.zip) 下载 mosdns-cn 压缩包直接解压后放到一个目录中. 再下载 [geosite文件](https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat) [geoip文件](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/geoip.dat)  [cnip文件](https://raw.githubusercontent.com/Loyalsoldier/geoip/release/cn.dat)  放到mosdns-cn解压的同一个目录中. 最后运行 ``` mosdns-cn -s :53 --blacklist-domain \"geosite.dat:category-ads-all\" --local-upstream https://223.5.5.5/dns-query --local-domain \"geosite.dat:cn\" --local-ip \"geoip.dat:cn\" --remote-upstream https://8.8.8.8/dns-query --remote-domain \"geosite.dat:geolocation-!cn\" ``` 即可.\n\n\n4. 如果是OpenWRT路由器则不用在每个终端设备上设置, 只需要在路由器上设置即可,请看下面OpenWRT的设置. 如果是非OpenWRT路由器, 需要在你的每个终端设备上设置DNS服务器为Mosdns的IP. 例如windows 需要在网络设置设置中指定DNS服务器为Mosdns的IP.\n![mosdns6](https://github.com/jinwyp/one_click_script/blob/master/docs/mosdns6.png?raw=true)\n\n5. 在OpenWRT中可以在DHCP给客户端分配IP时, 直接给客户端赋予与路由器IP不同的DNS服务器, 这样无论通过上面方法架设好mosdns后, 把运行mosdns 的机器的IP填入下图.客户端就不用手动设置DNS了. OpenWRT管理菜单: 网络 -> 接口 -> LAN 点击\"修改\" 按钮 进入页面下部 \"DHCP 服务器\" 部分, 点击第二个tab \"高级设置\" -> DHCP 选项 填入6,192.168.1.5, 其中192.168.1.5改为mosdns的机器IP就可以了.  这样所有客户端会默认使用mosdns作为DNS服务器, 同时也不需要上面的设置 DHCP/DNS -> DNS 转发 的修改方法了. 客户端需要重新连接一下WIFI或网络重新获取IP地址才能生效.\n![mosdns5](https://github.com/jinwyp/one_click_script/blob/master/docs/mosdns5.png?raw=true)\n\n\n6. 具体参数可以参考官方网站 https://github.com/IrineSistiana/mosdns-cn 和 https://github.com/IrineSistiana/mosdns\n7. Mosdns 相关整理好的配置文件 https://github.com/pmkol/easymosdns 和 https://github.com/Journalist-HK/mosdns-config\n\n### DNS服务器列表大全\n\n1. [AdGuard 官方DNS服务器列表1](https://adguard-dns.io/kb/general/dns-providers/)\n\n2. [DNS服务器列表2](https://dns.icoa.cn/), [https://dns.icoa.cn/](https://dns.icoa.cn/)\n\n3. [全国DNS列表]（https://github.com/easonjim/dns-server-list）\n\n"
        },
        {
          "name": "HOWTOUSEGO.md",
          "type": "blob",
          "size": 7.3486328125,
          "content": "# How to use software by go language\n\n\n\n## 如何使用go语言开发的软件\n\n### 区分服务器端还是客户端使用的软件, 区分命令行客户端软件不同操作系统平台\n\n\n1. 很多软件首先要区分是用在服务器端还是客户端. 服务器端(即运行在linux操作系统下服务器端软件,而且是命令行软件,没有图形界面). 客户端(即平常使用的 windows/Mac/iOS/Android 系统)\n\n#### 例子1 例如内网穿透软件FRP\n\n1. 例子1 例如内网穿透软件FRP https://github.com/fatedier/frp\n打开github官方网页后首先找到右边 Releases 处, 可以看到当前最新版本是0.39.0\n![软件使用11](https://github.com/jinwyp/one_click_script/blob/master/docs/go1.png?raw=true)\n\n\n2. 点击 Releases 进入已编译打包好的程序下载页面 https://github.com/fatedier/frp/releases\n\n![软件使用12](https://github.com/jinwyp/one_click_script/blob/master/docs/go2.png?raw=true)\n\n3. 这里就要下载服务器端还是客户端软件. 如果要下载服务器端, 正常情况一般linux服务器都是x86架构的64位CPU, 需要下载 frp_0.39.0_linux_amd64.tar.gz. 就是要下载\"amd64\"字样的服务器端程序. 如果服务器是很老的32位CPU 需要下载 frp_0.39.0_linux_386.tar.gz. 就是要下载\"386\"字样的服务器端. 如果服务器是使用ARM的CPU,同样需要区分是64位的ARM还是32位的ARM CPU. 64位的ARM对应下载frp_0.39.0_linux_arm64.tar.gz, 32位的ARM CPU 对应下载frp_0.39.0_linux_arm.tar.gz.\n\n4. 下载完成后解压出来 frps是用于服务器端, frpc是用于客户端.\n\n5. 一般用户用的都是客户端 并且都是 windows/Mac/iOS/Android 系统. 就要下载 windows 客户端 frp_0.39.0_windows_amd64.zip. 或下载 Mac 客户端 frp_0.39.0_darwin_amd64.tar.gz. Mac就是要下载\"darwin\"字样的程序. 而新出的M1芯片的Mac由于是ARM架构, 就需要下载frp_0.39.0_darwin_arm64.tar.gz.  下载完成后解压出来 frpc是用于客户端. 通常需要先修改配置文件然后运行frpc就可以了.\n\n#### 例子2 V2ray \n\n1. 例子2 V2ray https://github.com/v2fly/v2ray-core\n打开github官方网页后首先找到右边 Releases 处, 可以看到当前最新版本是4.44.0\n![软件使用11](https://github.com/jinwyp/one_click_script/blob/master/docs/gov1.png?raw=true)\n\n\n2. 点击 Releases 进入已编译打包好的程序下载页面 https://github.com/v2fly/v2ray-core/releases 由于目前v2ray 5.0版本是开发者预览版本还不稳定, 把页面向下翻找到4.44.0版本\n\n![软件使用12](https://github.com/jinwyp/one_click_script/blob/master/docs/gov2.png?raw=true)\n\n![软件使用13](https://github.com/jinwyp/one_click_script/blob/master/docs/gov3.png?raw=true)\n\n\n3. 这里就要下载服务器端还是客户端软件. 如果要下载服务器端, 正常情况一般linux服务器都是x86架构的64位CPU, 需要下载 v2ray-linux-64.zip. 就是要下载\"64\"字样的服务器端程序. 如果服务器是很老的32位CPU 需要下载 v2ray-linux-32.zip. 就是要下载\"32\"字样的服务器端. 如果服务器是使用ARM的CPU,同样需要区分是64位的ARM还是32位的ARM CPU. 64位的ARM对应下载v2ray-linux-arm64-v8a.zip, 32位的ARM CPU 对应下载v2ray-linux-arm32-v7a.zip 或 v2ray-linux-arm32-v6.zip.\n\n4. 下载完成后解压出来 与frp不同, v2ray服务器端与客户端是同一个文件, 都是v2ray, 是通过v2ray 配置文件来区分启动的是服务器端还是客户端\n\n5. 一般用户用的都是客户端 并且都是 windows/Mac/iOS/Android 系统. 就要下载 windows 客户端 v2ray-windows-64.zip. 或下载 Mac 客户端 v2ray-macos-64.zip. 而新出的M1芯片的Mac由于是ARM架构, 就需要下载v2ray-macos-arm64-v8a.zip. Android 客户端就下载v2ray-android-arm64-v8a.zip 下载完成后解压出来, 通常需要先修改配置文件然后运行v2ray就可以了.\n\n\n\n\n### 区分是命令行程序还是带有UI的GUI界面软件\n\n1. 上面是命令行方式运行的程序核心文件. 对于普通用户来说命令行方式需要手动修改配置文件很不方便. 所以对普通用户来说肯定需要找对应的UI带界面的程序,这样使用起来才方便. UI带界面的程序与原来的命令行程序都是不同项目不同人开发的. 所以有的界面集成了核心命令程序, 有的没有集成核心命令行程序只是一个界面需要自己手动下载命令行与UI界面程序放到一起.\n\n2. 同样用v2ray举例, 不同平台的v2ray UI界面程序五花八门, 名字叫什么的都有, 所以要区分仅仅是v2ray的界面程序还是 根本就不是v2ray的UI界面程序而是可以支持v2ray的协议的程序例如Clash\n\n3. 这里先说仅仅是v2ray的UI界面程序. 例如 windows平台 v2rayN 根据上面介绍进入v2rayN项目的下载Releases 页面 https://github.com/2dust/v2rayN/releases 当前版本4.29\n\n![软件使用15](https://github.com/jinwyp/one_click_script/blob/master/docs/gov5.png?raw=true)\n\n4. 由于 v2rayN只针对 windows 平台 所以不需要区分平台版本, 下载 v2rayN-Core.zip 带v2ray命令行核心文件. 或下载 v2rayN.zip 只有界面程序需要手动下载 [v2ray命令行程序](https://github.com/v2fly/v2ray-core/releases)\n\n5. 这种界面程序与核心程序分开的好处就是 如果核心命令行有新功能升级了, 可以单独升级命令行核心程序. 在v2rayN可以点击 检查更新 升级v2ray-core或xray-core. 这里简单说明一下 v2ray-core和xray-core的区别. xray-core基本与v2ray-core相同, 但xray-core 多支持一种XTLS加密方式, XTLS速度快,但需要服务器端开启. 具体详细请看[xray官方文档](https://xtls.github.io/). 如果需要使用XTLS加密, 需要在v2rayN中参数设置-> v2rayN 设置 -> Core类型设置 使用xray-core.\n\n\n![软件使用15](https://github.com/jinwyp/one_click_script/blob/master/docs/gov6.png?raw=true)\n\n6. windows 平台下的v2ray的UI界面程序 还有WinXray  [官方地址](https://github.com/TheMRLL/WinXray/releases)\n\n7. [Qv2ray](https://github.com/Qv2ray/Qv2ray/releases)也是一个v2ray的UI界面程序, 而且支持windows和Mac, 还可以通过插件支持trojan等其他协议.\n\n8. 不同平台下都有不同的UI界面程序, 有的集成了核心命令行程序有的没有集成, 所以要学会到官方github网站上下载最新版程序. Windows 平台: v2rayN / Qv2ray / WinXray.  Android 平台: v2rayNG / Kitsunebi.  iOS 平台(只能通过apple store 购买获得): Shadowrocket / Quantumult / Quantumult X. OpenWrt 路由器平台: PassWall / Hello World / ShadowSocksR Plus+\n\n### 本身不是某个软件的UI界面程序 例如 Clash 与  Quantumult X\n\n1. [Clash](https://github.com/Dreamacro/clash) 本身并不是v2ray的UI界面程序. Clash本身自己是个独立的代理平台软件,主要用来提供SOCKS5/HTTP代理. 而随后支持V2ray的Vmess协议, 同时还支持 Shadowsocks, Snell, Trojan等其他协议.\n\n2. 同样 Clash也是go语言开发的命令行软件, 用户要方便使用还需要找对应平台的UI客户端. 例如 windows 平台下UI界面客户端 [clash_for_windows](https://github.com/Fndroid/clash_for_windows_pkg/releases) 注意 clash_for_windows 没有开源, 安全性未知.  Mac平台下Clash的UI界面客户端 [clashX](https://github.com/yichengchen/clashX).  Android平台下Clash的UI界面客户端 [ClashForAndroid](https://github.com/Kr328/ClashForAndroid).\n\n\n\n### 关于 TLS 加密与各种协议的介绍和具体使用方法 敬请期待\n\n"
        },
        {
          "name": "KERNEL.md",
          "type": "blob",
          "size": 5.5517578125,
          "content": "# Easy install latest or LTS linux kernel and enable BBR or BBR plus\n\n### [中文文档](/KERNEL_CN.md)\n### [xray v2ray trojan 一键安装脚本](/README2.md)\n\n## Sponsors\nThanks for support this project. Check on [patreon](https://www.patreon.com/linuxkernel)\n\n\n## Table of Contents\n\n* [Easy install v2ray (xray) and trojan (trojan-go) script (ultimate script for all condition)](/README2.md)\n* [Install linux latest and LTS kernel. Install BBR Plus kernel](#kernel)\n* [Enable BBR or BBR plus or BBR2 congestion control algorithm with FQ or CAKE](#kernel)\n* [Install wireguard and Cloudflare WARP. Unlock Netflix ip geo-restriction. Avoid Google reCAPTCHA human verification](#Wireguard)\n\n\n## Features \n1. Easily switch Linux kernel for all versions, including latest kernel, 5.16, 5.10 LTS, 5.4 LTS, 4.19 LTS, 4.14 LTS  \n2. Easily enable BBR or BBR plus congestion control algorithm with FQ / FQ-Codel / FQ-PIE / CAKE. \n3. Support Debian9+, Ubuntu 16+ and CentOS 7+ operation systems\n4. Install wireguard and Cloudflare WARP client to avoid Google reCAPTCHA and unlock Netflix ip geo-restriction\n \n\n\n\n## Installation\n\n#### via bash\n```bash\nbash <(curl -Lso- https://git.io/kernel.sh)\n```\n#### via curl to install script\n\n```bash\ncurl -O https://raw.githubusercontent.com/jinwyp/one_click_script/master/install_kernel.sh && chmod +x ./install_kernel.sh && ./install_kernel.sh\n```\n\n\n#### via wget to install script\n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/install_kernel.sh && chmod +x ./install_kernel.sh && ./install_kernel.sh\n```\n\n\n\n![功能列表3](https://github.com/jinwyp/one_click_script/blob/master/docs/readme3_en.png?raw=true)\n\n\n\n\n## Usage \n\n### kernel\n### Install latest or LTS linux kernel and enable BBR or BBR Plus\n\n1. On CentOS / AlmaLinux / Rocky Linux, run script then choose 31 to install latest 5.16 kernel or choose 35 to install LTS 5.10 kernel (recommended). It will reboot twice duiring the whole installation.\n2. On Debian run script then choose 41 to install LTS 5.10 kernel, on Ubuntu please choose 45 to install LTS 5.10 kernel. It will reboot twice duiring the whole installation.\n3. After finished new kernel installation, rerun the script and choose 2 to enable BBR congestion control algorithm with Cake(recommended) or FQ. \n4. To enable BBR Plus. run script then choose 61 to install BBR Plus 4.14.129 kernel , or choose 66 to install BBR Plus 5.10 LTS kernel. It will reboot twice duiring the whole installation.  After finished new kernel installation, rerun the script then choose 3 to enable BBR Plus. \n5. Duiring the the whole installation when show the big warning screen(see below pics), please choose \"NO\" to continue installation. Do not abort kernel removal. \n\n![注意 安装BBR plus](https://github.com/jinwyp/one_click_script/blob/master/docs/debian.jpg?raw=true)\n![注意 安装BBR plus](https://github.com/jinwyp/one_click_script/blob/master/docs/kernel.png?raw=true)\n![注意 安装BBR plus](https://github.com/jinwyp/one_click_script/blob/master/docs/ubuntu.png?raw=true)\n\n6. To install XanMod kernel and enable BBR2 on Debian or Ubuntu. Run script then choose 51 to install XanMod LTS 5.10 kernel, after reboot and finish kernel installation, rerun the script then choose 2 to enable BBR2 congestion control algorithm.\n\n\n### Wireguard\n### Unlock Netflix(Youtube/Hulu/HBO Now/Disney+) region restriction and avoid Google reCAPTCHA human verification\n\n1. Unlock with Cloudflare WARP sock5 proxy. Run script then choose 11 to install Cloudflare WARP linux client sock5 proxy, After finish installation, rerun script then choose 21 to test whether Netflix is unlock or not through the WARP sock5 proxy.\n2. Unlock with Cloudflare WARP IPv6. Run script then choose 12 to install Wireguard and Cloudflare WARP.  After finish installation, The VPS will enable IPv6. As default the VPS is to use IPv4 to access the network. Rerun script then choose 21 to test whether Netflix is unlock or not through the IPv6.\n3. To unlock Netflix and other stream website. Using the [script](/README.md) in the same repo to install v2ray. During the v2ray installation follow the instruction and select different v2ray routing rules (IPv6 or WARP sock5 or DNS or other unlocked v2ray server) to unlock netflix. \n4. To avoid Google reCAPTCHA human verification. Using the [script](/README.md) in the same repo to install v2ray. During the v2ray installation follow the instruction and select different v2ray routing rules (IPv6 or WARP sock5 or other unlocked v2ray server) to avoid Google reCAPTCHA. Recommended to use IPv6 to avoid Google reCAPTCHA.\n\n\n\n\n## Netflix-Check\n### Netflix non-self produced drama test script for regions. Support test with IPv6 and Cloudflare WARP Sock5 proxy\n\n#### via wget to install script\n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/netflix_check.sh && chmod +x ./netflix_check.sh && ./netflix_check.sh\n```\n\n\n####  via curl to install script\n\n```bash\ncurl -O https://raw.githubusercontent.com/jinwyp/one_click_script/master/netflix_check.sh && chmod +x ./netflix_check.sh && ./netflix_check.sh\n```\n\n\n\n## FAQ \n\n1. Netflix non-self produced drama test script can't test through v2ray routing rule. The VPS is already unlocked but the result of the test could not show the right unlocked answer. You can use the test script on the V2ray client computer which connected the unlocked netflix V2ray server to get the right unlocked result.  The Netflix non-self produced drama test shell script can be running on Mac and linux. On Windows you can use Ubuntu (windows linux sub-system) to run the test script.\n\n\n\n"
        },
        {
          "name": "KERNEL_CN.md",
          "type": "blob",
          "size": 5.447265625,
          "content": "# Easy install latest or LTS linux kernel and enable BBR or BBR plus\n\n### [xray v2ray trojan 一键安装脚本](/README2.md)\n\n## 目录 Table of Contents\n\n* [Trojan 或 Trojan-go 和 V2ray 或 xray 一键安装脚本](/README2_CN.md)\n* [安装 Linux 最新版内核或 LTS 内核, 安装支持 BBR Plus 内核](#kernel)\n* [开启BBR 或 BBR plus 网络加速](#kernel)\n* [安装 wireguard 和 Cloudflare WARP, 解锁 Netflix 区域限制 和 避免弹出Google人机验证](#Wireguard)\n* [Netflix 非自制剧检测脚本 支持IPv6和 WARP Sock5 代理检测](#netflix-check)\n\n## 功能说明 Features \n1. 安装各个版本的 Linux 内核 包括最新的5.16内核 和 所有LTS内核. 例如 5.10 LTS, 5.4 LTS, 4.19 LTS, 4.14 LTS  \n2. 开启 BBR / BBR Plus / BBR2 网络加速, 切换 FQ / FQ-Codel / FQ-PIE / CAKE 队列调度算法. \n3. 支持 Debian9+, Ubuntu 16+, CentOS 7+ (AlmaLinux / Rocky Linux)\n4. 安装 wireguard 和 Cloudflare WARP sock5 client 用于解锁 Netflix 和避免弹出Google人机验证\n\n\n## Installation 安装方法  \n\n#### Usage 脚本使用方法\n```bash\nbash <(curl -Lso- https://git.io/kernel.sh)\n```\n#### 通过 curl 命令安装  via curl to install script\n\n```bash\ncurl -O https://raw.githubusercontent.com/jinwyp/one_click_script/master/install_kernel.sh && chmod +x ./install_kernel.sh && ./install_kernel.sh\n```\n\n\n#### 通过 wget 命令安装 Linux 内核 和 Wireguard  via wget to install script\n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/install_kernel.sh && chmod +x ./install_kernel.sh && ./install_kernel.sh\n```\n\n\n\n![功能列表3](https://github.com/jinwyp/one_click_script/blob/master/docs/readme3.png?raw=true)\n\n\n\n\n## 使用说明 Usage \n\n### kernel\n### 安装 linux 新版内核 开启BBR 或 BBR Plus 加速\n\n\n1. CentOS / AlmaLinux / Rocky Linux 系统安装新版 linux 内核. 运行脚本后 请选择31 安装官方源最新版5.16内核 或选择35 安装 LTS 5.10 内核 推荐安装 LTS 5.10. 根据提示需要重启2次 完成内核安装。\n2. Debian / Ubuntu 系统安装新版 linux 内核. 运行脚本后 Debian 请选择41 安装 LTS 5.10 内核, Ubuntu 请选择45 安装 LTS 5.10 内核. 根据提示需要重启2次 完成内核安装。\n3. 开启 BBR 网络加速. 完成上面更换新内核后, 重新运行脚本后 选择2 然后根据提示选择 BBR 加速, 推荐使用BBR + Cake 组合算法.\n4. 安装BBR Plus 内核并开启 BBR Plus. 运行脚本后 选择61 安装原版4.14.129版本 BBR Plus 内核, 或选择66 安装5.10 LTS BBR Plus内核. 安装完成重启2次后, 重新运行脚本后 选择3 根据提示开始 BBR Plus. \n5. 注意安装过程中 如果弹出大框的英文提示(下面有示例图) \"安装linux内核有风险是否终止\", 要选择\" NO\" 不终止. 安装完毕会重启VPS.\n\n![注意 安装BBR plus](https://github.com/jinwyp/one_click_script/blob/master/docs/debian.jpg?raw=true)\n![注意 安装BBR plus](https://github.com/jinwyp/one_click_script/blob/master/docs/kernel.png?raw=true)\n![注意 安装BBR plus](https://github.com/jinwyp/one_click_script/blob/master/docs/ubuntu.png?raw=true)\n\n6. 安装 XanMod 内核并开启 BBR2. Debian / Ubuntu 系统 运行脚本后 请选择51 安装 XanMod 内核, 安装完成重启后, 重新运行脚本后 选择2 然后根据提示选择 BBR2 加速.\n\n\n### Wireguard\n### 解锁 Netflix 等流媒体网站的区域限制 和 避免弹出 Google reCAPTCHA 人机验证\n\n1. 使用Cloudflare WARP sock5 方式解锁. 运行脚本后 选择11 安装 Cloudflare WARP 官方 linux client sock5 代理, 安装完成后系统已经启动 WARP的sock5 代理. 重新运行脚本 选择21 测试一下 WARP sock5 是否已经解锁Netflix.\n2. 使用Cloudflare WARP IPv6 方式解锁. 运行脚本后 选择12 安装 Wireguard 和 Cloudflare WARP. 安装成功后系统会启用IPv6, 但默认还是优先使用IPv4 访问网络. 重新运行脚本 选择21 测试一下 IPv6 是否已经解锁Netflix.\n3. 解锁 Netflix 等流媒体网站. 通过本项目内的[另一脚本](/README_CN.md) 安装V2ray, 安装过成功中根据提示设置域名分流规则, 让流媒体网站使用IPv6 或 WARP sock5解锁即可. \n4. 解锁 Google reCAPTCHA 人机验证. 通过本项目内的[另一脚本](/README_CN.md) 安装V2ray, 安装过成功中根据提示设置域名分流规则, 让Google网站使用IPv6 或 WARP sock5解锁即可. 推荐使用 IPv6 来避免 Google reCAPTCHA 人机验证.\n\n\n\n\n## Netflix-Check\n### Netflix 非自制剧解锁 检测脚本 支持IPv6 和 Cloudflare WARP Sock5 代理检测\n\n#### 通过 wget 命令安装 via wget to install script\n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/netflix_check.sh && chmod +x ./netflix_check.sh && ./netflix_check.sh\n```\n\n\n####  通过 curl 命令安装 via curl to install script\n\n```bash\ncurl -O https://raw.githubusercontent.com/jinwyp/one_click_script/master/netflix_check.sh && chmod +x ./netflix_check.sh && ./netflix_check.sh\n```\n\n\n\n## 注意事项与常见问题 FAQ \n\n1. Netflix 检测解锁脚本无法测试 使用V2ray路由规则的解锁. 就是说使用本脚本安装过v2ray已经解锁了Netflix, 但用检测解锁脚本检测的结果还是会显示没有解锁, 就是无法测出已解锁Netflix. 可以把检测脚本运行在 V2ray客户端机器上, 则能检测成功解锁. Netflix 检测解锁脚本只能运行在Mac或linux 平台. Windows平台可以使用linux ubuntu 子系统来运行 Netflix 检测解锁脚本.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2020 JinWYP WangYupeng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.8271484375,
          "content": "# Easy install latest or LTS linux kernel and enable BBR or BBR plus\n\n### [中文文档](/KERNEL_CN.md)\n### [xray v2ray trojan shadowsocks install script](/README2.md)\n### [xray v2ray trojan shadowsocks 一键安装脚本 中文](/README2_CN.md)\n### [install script for docker, Nodejs, Joplin, Jitsi Meet, Focalboard, FreeGPT and more ](TOOL.md)\n### [Docker Nodejs Joplin笔记 视频会议 Alist网盘 免费GPT 一键安装脚本 中文 ](TOOL_CN.md)\n\n## Sponsors\nThanks for support this project. Check on [patreon](https://www.patreon.com/linuxkernel)\n\n\n## Table of Contents\n\n* [Easy install v2ray (xray) and trojan (trojan-go) script (ultimate script for all condition)](/README2.md)\n* [Install linux latest and LTS kernel. Install BBR Plus kernel](#kernel)\n* [Enable BBR or BBR plus or BBR2 congestion control algorithm with FQ or CAKE](#kernel)\n* [Install wireguard and Cloudflare WARP. Unlock Netflix ip geo-restriction. Avoid Google reCAPTCHA human verification](#Wireguard)\n\n\n## Features\n1. Easily switch Linux kernel for all versions, including latest kernel, 5.16, 5.10 LTS, 5.4 LTS, 4.19 LTS, 4.14 LTS\n2. Easily enable BBR or BBR plus congestion control algorithm with FQ / FQ-Codel / FQ-PIE / CAKE.\n3. Support Debian9+, Ubuntu 16+ and CentOS 7+ operation systems\n4. Install wireguard and Cloudflare WARP client to avoid Google reCAPTCHA and unlock Netflix ip geo-restriction\n\n\n\n\n## Installation\n\n#### via bash\n```bash\nbash <(curl -Lso- https://git.io/kernel.sh)\n```\n#### via curl to install script\n\n```bash\ncurl -O https://raw.githubusercontent.com/jinwyp/one_click_script/master/install_kernel.sh && chmod +x ./install_kernel.sh && ./install_kernel.sh\n```\n\n\n#### via wget to install script\n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/install_kernel.sh && chmod +x ./install_kernel.sh && ./install_kernel.sh\n```\n\n\n\n![功能列表3](https://github.com/jinwyp/one_click_script/blob/master/docs/readme3_en.png?raw=true)\n\n\n\n\n## Usage\n\n### kernel\n### Install latest or LTS linux kernel and enable BBR or BBR Plus\n\n1. On CentOS / AlmaLinux / Rocky Linux, run script then choose 31 to install latest 5.16 kernel or choose 35 to install LTS 5.10 kernel (recommended). It will reboot twice duiring the whole installation.\n2. On Debian run script then choose 41 to install LTS 5.10 kernel, on Ubuntu please choose 45 to install LTS 5.10 kernel. It will reboot twice duiring the whole installation.\n3. After finished new kernel installation, rerun the script and choose 2 to enable BBR congestion control algorithm with Cake(recommended) or FQ.\n4. To enable BBR Plus. run script then choose 61 to install BBR Plus 4.14.129 kernel , or choose 66 to install BBR Plus 5.10 LTS kernel. It will reboot twice duiring the whole installation.  After finished new kernel installation, rerun the script then choose 3 to enable BBR Plus.\n5. Duiring the the whole installation when show the big warning screen(see below pics), please choose \"NO\" to continue installation. Do not abort kernel removal.\n\n![注意 安装BBR plus](https://github.com/jinwyp/one_click_script/blob/master/docs/debian.jpg?raw=true)\n![注意 安装BBR plus](https://github.com/jinwyp/one_click_script/blob/master/docs/kernel.png?raw=true)\n![注意 安装BBR plus](https://github.com/jinwyp/one_click_script/blob/master/docs/ubuntu.png?raw=true)\n\n6. To install XanMod kernel and enable BBR2 on Debian or Ubuntu. Run script then choose 51 to install XanMod LTS 5.10 kernel, after reboot and finish kernel installation, rerun the script then choose 2 to enable BBR2 congestion control algorithm.\n\n\n### Wireguard\n### Unlock Netflix(Youtube/Hulu/HBO Now/Disney+) region restriction and avoid Google reCAPTCHA human verification\n\n1. Unlock with Cloudflare WARP sock5 proxy. Run script then choose 11 to install Cloudflare WARP linux client sock5 proxy, After finish installation, rerun script then choose 21 to test whether Netflix is unlock or not through the WARP sock5 proxy.\n2. Unlock with Cloudflare WARP IPv6. Run script then choose 12 to install Wireguard and Cloudflare WARP.  After finish installation, The VPS will enable IPv6. As default the VPS is to use IPv4 to access the network. Rerun script then choose 21 to test whether Netflix is unlock or not through the IPv6.\n3. To unlock Netflix and other stream website. Using the [script](/README.md) in the same repo to install v2ray. During the v2ray installation follow the instruction and select different v2ray routing rules (IPv6 or WARP sock5 or DNS or other unlocked v2ray server) to unlock netflix.\n4. To avoid Google reCAPTCHA human verification. Using the [script](/README.md) in the same repo to install v2ray. During the v2ray installation follow the instruction and select different v2ray routing rules (IPv6 or WARP sock5 or other unlocked v2ray server) to avoid Google reCAPTCHA. Recommended to use IPv6 to avoid Google reCAPTCHA.\n\n\n\n\n## Netflix-Check\n### Netflix non-self produced drama test script for regions. Support test with IPv6 and Cloudflare WARP Sock5 proxy\n\n#### via wget to install script\n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/netflix_check.sh && chmod +x ./netflix_check.sh && ./netflix_check.sh\n```\n\n\n####  via curl to install script\n\n```bash\ncurl -O https://raw.githubusercontent.com/jinwyp/one_click_script/master/netflix_check.sh && chmod +x ./netflix_check.sh && ./netflix_check.sh\n```\n\n\n\n## FAQ\n\n1. Netflix non-self produced drama test script can't test through v2ray routing rule. The VPS is already unlocked but the result of the test could not show the right unlocked answer. You can use the test script on the V2ray client computer which connected the unlocked netflix V2ray server to get the right unlocked result.  The Netflix non-self produced drama test shell script can be running on Mac and linux. On Windows you can use Ubuntu (windows linux sub-system) to run the test script.\n\n\n\n"
        },
        {
          "name": "README2.md",
          "type": "blob",
          "size": 13.3525390625,
          "content": "# Easy install v2ray (xray) and trojan (trojan-go) script (ultimate script for all condition)\n\n### [中文文档](/README2_CN.md) \n\n[![Hits](https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fjinwyp%2Fone_click_script&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=hits&edge_flat=false)](https://hits.seeyoufarm.com)\n\n## Sponsors\nThanks for support this project. Check on [patreon](https://www.patreon.com/linuxkernel)\n\n## Table of Contents\n\n* [Install Trojan/Trojan-go and V2ray/Xray shell script](#installation)\n* [Easy get SSL certificate for domains](#acme)\n* [Linux Kernel switcher, including all LTS kernel and latest kernel, enable BBR or BBR Plus to speed up network](/KERNEL.md)\n* [Install wireguard and Cloudflare WARP, unlock Netflix restriction and avoid Google reCAPTCHA](/KERNEL.md)\n* [Netflix available region testing shell script, support for testing through IPv6 and WARP Sock5 proxy](#netflix-check)\n* [PVE Proxmox VE and Synology DiskStation Manager NAS Toolkit](/dsm/readme.md)\n* [Install FRP shell script (expose local server behind a NAT or firewall to the Internet tool)](/dsm/readme.md)\n* [How to enable DOH for DNS](/DNS.md)\n* [Install DNS server AdGuard Home and Mosdns to divert domestic and foreign dns traffic](/DNS.md)\n\n\n\n## Features \n\n1. Install and upgrade trojan/trojan-go/v2ray/xray and fully remove.\n2. Support to running trojan-go and v2ray at the same server.\n3. Support various mode, using trojan or v2ray or nginx to serve 443 port   \n4. Support multi https domains with Nginx SNI on one VPS server.\n5. Support install trojan or v2ray only in order to work with exist website on one VPS.\n6. Customize trojan or v2ray working port, password and Websocket path. \n7. Support v2ray or xray vless protocol. Support Xray XTLS. \n8. Script create 10 password as default, can set prefix for these passwords.\n9. Install trojan and v2ray UI panel to easily manage users. \n10. Easily set v2ray route rules with wireguard IPv6 and Cloudflare WARP to unlock  Netflix restriction and Google reCAPTCHA.\n11. Using bootstarp official template for default website content serve by nginx\n12. All working port are random generated to ensure high security.\n\n\n\n## Installation\n\n#### via bash\n```bash\nbash <(curl -Lso- https://git.io/oneclick)\n```\n\n\n####  via curl to install script\n\n```bash\ncurl -O https://raw.githubusercontent.com/jinwyp/one_click_script/master/trojan_v2ray_install.sh && chmod +x ./trojan_v2ray_install.sh && ./trojan_v2ray_install.sh\n```\n\n#### via wget to install script\n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/trojan_v2ray_install.sh && chmod +x ./trojan_v2ray_install.sh && ./trojan_v2ray_install.sh\n```\n\n\n\n![功能列表](https://github.com/jinwyp/one_click_script/blob/master/docs/readme_en.png?raw=true)\n\n![功能列表2](https://github.com/jinwyp/one_click_script/blob/master/docs/readme2_en.png?raw=true)\n\n![功能列表3](https://github.com/jinwyp/one_click_script/blob/master/docs/readme3_en.png?raw=true)\n\n\n\n\n## Netflix-Check\n### Netflix non-self-produced drama and region testing shell script\n\n#### via wget to install script\n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/netflix_check.sh && chmod +x ./netflix_check.sh && ./netflix_check.sh\n```\n\n\n## acme\n### Get SSL certificate for domain\n\n1. Run script then choose 26 to request SSL certificate for any domains. It's better to disable CDN of your domain duiring the SSL certificate application process. Make sure the domain is resolved to the real VPS ip.\n2. Duiring the SSL certificate application process, if you can't disable CDN or the VPS only have IPv6, you can skip the IP check process to continue your following SSL certificate request.\n3. The script is using acme.sh to get SSL certificate. There are 4 providers: Let's Encrypt, BuyPass.com, ZeroSSL.com, Google. When you request too many times in one day and reach the limit of Let's Encrypt, you can switch other providers such as BuyPass.com.\n4. Normally SSL certificate need renew in three month，The script will autorenew the certificate with Cronjob by acme.sh .\n\n![功能列表4](https://github.com/jinwyp/one_click_script/blob/master/docs/readme4.png?raw=true)\n\n\n#####  [The Rate Limits rule of Let's Encrypt](https://letsencrypt.org/docs/rate-limits/)\n\n1. The main limit is Certificates per Registered Domain (50 per week)\n2. You can create a maximum of 300 New Orders per account per 3 hours\n3. You can create a maximum of 10 Accounts per IP Address per 3 hours. You can create a maximum of 500 Accounts per IP Range within an IPv6 /48 per 3 hours\n4. You can combine multiple hostnames into a single certificate, up to a limit of 100 Names per Certificate\n5. You can have a maximum of 300 Pending Authorizations on your account\n\n\n\n## How to use\n\n\n### Preparatory work for setting up a new VPS\n\n1. There are several work to do to secure your VPS when you set up a new VPS. It's optional but recommended. \n2. Configuring an SSH login without password. Run script then choose 26. Input your public key and save the authorized_keys file\n3. Change the SSH Default Port. Run script then choose 33. Customize your SSH login port. The default SSH port is 22, Modify the port number you want.\n5. Enable root accout login. Some VPS can't login with root as default. Run script then choose 32 to enable root accout login.\n6. Run script then choose 31 to install sofrware including Oh-my-zsh, zsh-autosuggestions, Micro editors. After finish installation, exit VPS and relogin SSH to use ZSH. \n\n### Install latest or LTS Linux kernel and enable BBR or BBR plus \n1. To install latest or LTS Linux kernel. Run script then choose 1. And enter the sub menu to install Linux kernel and enable BBR+Cake. Check out more details for [LTS Linux kernel switcher script](/KERNEL.md)\n\n\n\n### Install command line trojan or trojan-go\n\n1. Firstly, prefer run this script with root user. Because linux kernel installation need root privileges. And to get SSL with acme.sh also need root privileges. [acme.sh instruction](https://github.com/acmesh-official/acme.sh/wiki/sudo).\n\n2. How to install trojan. Run script ```./trojan_v2ray_install.sh ```. Choose 2 to install trojan or trojan-go with websocket support CDN. \n\n\n\n### Install command line xray or v2ray\n\n1. Firstly, prefer run this script with root user. Because linux kernel installation need root privileges. And to get SSL with acme.sh also need root privileges. [acme.sh instruction](https://github.com/acmesh-official/acme.sh/wiki/sudo).\n\n2. How to install V2ray or Xray. Run script ```./trojan_v2ray_install.sh ```. Choose 11 to install V2ray or Xray with Nginx. Nginx listen 443 port and serve TLS service. During the installation, you can choose websocket or gRPC to support CDN.  Choose TCP or HTTP2 or QUIC protocal will not supprot CDN. \n\n3. How to install V2ray or Xray using Vless. Run script ```./trojan_v2ray_install.sh ```. Choose 13-16 to install V2ray or Xray. Vless listen 443 port and serve TLS service. Nginx is optional during the installation for fake website service. Also you can choose XTLS instead of TLS to improve network speed.\n\n4. Run script ```./trojan_v2ray_install.sh ```. Choose 21 to install both V2ray and trojan on same VPS. Vless listen 443 port and serve TLS service.\n\n5. Run script ```./trojan_v2ray_install.sh ```. Choose 22 to install both V2ray and trojan/trojan-go on same VPS. trojan/trojan-go listen 443 port and serve TLS service.\n\n6. Run script ```./trojan_v2ray_install.sh ```. Choose 23 to install both V2ray and trojan/trojan-go on same VPS. Nginx SNI listen 443 port. You need at least 2 domain for trojan and v2ray. Nginx SNI distinguishes v2ray or trojan traffic by different domain name.\n\n### Install command line xray  vision or Reality \n\n1. How to install Xray using XTLS Vision. Run script ```./trojan_v2ray_install.sh ```. Choose 17 to install Xray XTLS Vision protocol. Use Vless protocol to provide tls service on port 443.  Fallback to nginx on port 80 to provide web camouflage. During installation, please select Xray version 1.7.5 or above, as older versions prior to 1.6 do not support XTLS Vision protocol. This protocol does not support CDN relay. To use XTLS Vision on the client side, please use latest V2rayN and choose Xray version 1.7.5 or higher.\n\n2. How to install Xray using Reality protocol. Run script ```./trojan_v2ray_install.sh ```. Choose 18 to install Xray Reality protocol. Domain name is not required for this installation, making the process more convenient. Vless Reality protocol provides forwarding service on port 443, and fallbacks to a specific foreign enterprise website that was filled by you during installation. During the installation, please choose Xray version 1.8.0 or above, as older versions of Xray prior to 1.7 do not support Reality protocol. This protocol does not support CDN relay. To use Xray Reality on the client side, it is necessary to use latest V2rayN 6.xx and choose Xray version 1.8.0 or above.\n\n\n\n\n### Advanced Tutorials - Work with existing website or web server\n\n1. If you already have a website or other web server, you can choose 12 to install V2ray or Xray only running at non 80 and 443 port with no TLS. You need modify nginx config manually to serve TLS and redirect v2ray traffic by url or path for V2ray websocket.\n\n2. If you already have a website or other web server, you can choose 13-17 to install V2ray or Xray. Duiring the installation, you can choose not to install nginx. Vless serve 443 port with TLS. You need modify nginx config manually to serve the website at 80 port. V2ray or Xray will fallback non V2ray traffic to 80 port.\n\n3. If you already have a website or other web server, you can choose 4 to install trojan or trojan-go only running at non 443 port with TLS. You need modify nginx config manually to serve the website at 80 port. trojan or trojan-go will fallback non trojan traffic to 80 port. Pay attention that if you choose to install trojan-go, nginx must already serve at 80 port which is trojan-go fallback port. Otherwise trojan-go will stop and not running if 80 port is not served by web HTTP server.   [trojan-go document](https://p4gefau1t.github.io/trojan-go/basic/config/) \n\n\n\n\n### Install Web UI admin panel for trojan and v2ray\n\n1. On a new VPS without v2ray or trojan installed. Run script ```./trojan_v2ray_install.sh ```. Choose 30 to enter sub menu. Then choose 1 to install trojan UI admin panel. \n\n2. On a new VPS without v2ray or trojan installed. Run script ```./trojan_v2ray_install.sh ```. Choose 30 to enter sub menu. Then choose 6 or 9 to install V2ray or Xray UI admin panel.  After sinish the installation. Run script and choose 26 to request SSL certificate. Then input the certificate file path on the UI admin panel config.\n\n\n\n### Unlock Region restriction for Netflix or Disney+ or other video streaming site \n### Avoid showing Google CAPTCHA Human verification\n\n1. Run script ```./trojan_v2ray_install.sh ```. Choose 1 to enter sub menu to install linux kernel. Prefer to install linux kernel 5.10 LTS. [More Details](/KERNEL.md)\n2. Run script ```./trojan_v2ray_install.sh ```. Choose 1 to enter sub menu. Then choose 2 to enable BBR and Cake. This will import VPS network speed. \n3. After reboot, rerun script ```./trojan_v2ray_install.sh ```. Choose 1 to enter sub menu. Then choose 11 or 12 to Wireguard or cloudflare WARP linux client sock5 proxy. \n4. After finish Wireguard installation, rerun script ```./trojan_v2ray_install.sh ```. Choose 11-17 to v2ray or xray。 During the installation, you can follow the instruction to unlock netflix region restriction and avoid showing Google CAPTCHA Human verification.\n\n\n\n\n## FAQ \n\n1. You can use [freenom](https://www.freenom.com/zh/index.html?lang=zh) for free domain name.\n\n2. Please disable your CDN acceleration duiring the installation. Such as cloudflare.com. After finish v2ray or trojan-go installation. you can enable CDN acceleration. trojan not support CDN acceleration. \n\n![注意 cloudflare CDN](https://github.com/jinwyp/one_click_script/blob/master/docs/cloudflare1.jpg?raw=true)\n\n3. Using v2ray or xray gRPC protocal for CDN acceleration, you need do some settings at cloudflare.com.  Click the \"Network\" on the leftside menu. Then enable gRPC on the right page. \"Network => gRPC\" \n\n![注意 cloudflare CDN gRPC](https://github.com/jinwyp/one_click_script/blob/master/docs/grpc.png?raw=true)\n\n4. The Cloudflare CDN worker script, Please replace the domain name with your own domain name. \n```\naddEventListener(\n    \"fetch\", event => {\n        let url = new URL(event.request.url);\n        url.hostname = \"yourdomain.xxx.xx\";\n        url.protocol = \"https\";\n        let request = new Request(url, event.request);\n        event.respondWith(\n            fetch(request)\n        )\n    }\n)\n```\n\n## Special Thanks\n\n1. https://github.com/sprov065/v2-ui \n2. https://github.com/Jrohy/trojan \n3. https://github.com/v2fly/v2ray-core\n4. https://github.com/XTLS/Xray-core\n5. https://github.com/trojan-gfw/trojan\n6. https://github.com/p4gefau1t/trojan-go\n7. https://github.com/ylx2016/Linux-NetSpeed\n\n\n\n\n## Stargazers over time\n[![Stargazers over time](https://starchart.cc/jinwyp/one_click_script.svg)](https://starchart.cc/jinwyp/one_click_script)\n\n\n\n[better-cloudflare-ip]: https://github.com/badafans/better-cloudflare-ip/releases\n[CFIP]: https://github.com/BlueSkyXN/CFIP/releases\n[CloudflareScanner]: https://github.com/Spedoske/CloudflareScanner/releases/tag/1.1.2\n[CloudflareSpeedTest]: https://github.com/XIU2/CloudflareSpeedTest/releases/tag/v1.4.9\n"
        },
        {
          "name": "README2_CN.md",
          "type": "blob",
          "size": 18.373046875,
          "content": "# Easy install v2ray (xray) and trojan (trojan-go) script (ultimate script for all protocol)\n\n\n## 目录 Table of Contents\n\n* [Trojan 或 Trojan-go 和 V2ray 或 xray 一键安装脚本](#installation-安装方法)\n* [单独给网站申请SSL证书](#acme)\n* [Linux LTS 内核更换脚本, BBR 和 BBR Plus 内核更换 一键安装脚本](/KERNEL_CN.md)\n* [安装 wireguard 和 Cloudflare WARP, 解锁 Netflix 区域限制 和 避免弹出Google人机验证](/KERNEL_CN.md)\n* [Netflix 非自制剧检测脚本 支持IPv6和 WARP Sock5 代理检测](#netflix-check)\n* [PVE Proxmox VE虚拟机 群晖NAS 安装工具脚本](/dsm/readme.md)\n* [FRP 内网穿透工具 一键安装脚本](/dsm/readme.md)\n* [锐角云 自动安装PVE 工具脚本](/acuteangle/readme.md)\n* [如何使用GO语言开发的软件](/HOWTOUSEGO.md)\n* [如何开启DOH 解决DNS污染](/DNS.md)\n* [安装 AdGuard Home DNS 服务器 并使用 Mosdns 分流国内与国外域名DNS解析请求](/DNS.md)\n\n\n## 功能说明 Features \n\n1. 支持 trojan，trojan-go 和 v2ray, xray 的安装 升级 卸载. 卸载后不留任何痕迹, 方便重复安装.\n2. 支持 trojan 或 trojan-go 与 v2ray 共存, nginx全面支持TLS1.3 保证安全性, \n3. 支持 trojan 或 v2ray 或 nginx 前置服务于443 端口, 包括目前所有的组合模式.\n4. 支持 Nginx SNI 分流, 多个Https网站和trojan或v2ray 共存使用.\n5. 可以仅安装 trojan 或 v2ray, 不安装nginx. 方便与宝塔面板或现有网站共存.\n6. 支持 v2ray 和 xray 自定义端口, 自定义密码和WS的Path, 支持监听额外端口 方便中转机中转. \n7. 支持 v2ray 和 xray 新的vless协议, 支持Xray的XTLS加密, 支持vless作为前端 监听443端口. \n8. 默认会创建10个以上用户账号, 还能创建指定前缀的密码, 方便用户使用.\n9. trojan 和 v2ray 可视化管理面板安装. \n10. 一键安装 wireguard 和 Cloudflare WARP, 解决避免弹出Google人机验证和 Netflix Youtube 等流媒体网站限制问题, 同时支持v2ray相应的路由分流配置.\n11. 本脚本没有偷跑服务器流量的网页或其他屏蔽bt流量的等限制. 默认网站的网页仅为bootstarp最简单的模板\n12. 本脚本所使用端口除443和80外都是随机生成, 保证安全性, 而其他脚本写死固定端口容易被检测\n\n\n\n## Installation 安装方法  \n\n#### Usage 脚本使用方法\n```bash\nbash <(curl -Lso- https://git.io/oneclick)\n```\n\n\n#### 通过 curl 命令安装  via curl to install script\n\n```bash\ncurl -O https://raw.githubusercontent.com/jinwyp/one_click_script/master/trojan_v2ray_install.sh && chmod +x ./trojan_v2ray_install.sh && ./trojan_v2ray_install.sh\n```\n\n#### 通过 wget 命令安装 via wget to install script\n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/trojan_v2ray_install.sh && chmod +x ./trojan_v2ray_install.sh && ./trojan_v2ray_install.sh\n```\n\n\n\n![功能列表](https://github.com/jinwyp/one_click_script/blob/master/docs/readme.png?raw=true)\n\n![功能列表2](https://github.com/jinwyp/one_click_script/blob/master/docs/readme2.png?raw=true)\n\n![功能列表3](https://github.com/jinwyp/one_click_script/blob/master/docs/netflix1.png?raw=true)\n\n![功能列表4](https://github.com/jinwyp/one_click_script/blob/master/docs/readme3.png?raw=true)\n\n\n\n## Netflix-Check\n### Netflix 非自制剧解锁 检测脚本 支持IPv6 和 Cloudflare WARP Sock5 代理检测\n\n#### 通过 wget 命令安装 via wget to install script\n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/netflix_check.sh && chmod +x ./netflix_check.sh && ./netflix_check.sh\n```\n\n\n## acme\n### 单独给网站申请SSL证书\n\n1. 本脚本可以用来单独给网站申请免费的SSL证书, 选择26 即可. 申请SSL证书过程中请关闭域名的CDN功能, 保证域名已经成功解析到VPS真实IP.\n2. 申请SSL证书过程中如果不方便关闭CDN, 或者纯IPv6主机 可以选择不检测IP解析是否正确, 从而跳过检测IP继续申请证书.\n3. 本脚本使用的 acme.sh 来申请的免费证书. 可以选择 Let's Encrypt, BuyPass.com, ZeroSSL.com, Google 提供商.  Let's Encrypt 申请证书有一些限制, 如果频繁申请证书出现无法申请的情况请选择其他证书提供商如 BuyPass.com\n4. 三个月之后需要续期，本脚本通过cron任务自动完成续期，无需用户操作.\n\n\n![功能列表4](https://github.com/jinwyp/one_click_script/blob/master/docs/readme4.png?raw=true)\n\n#####  Let's Encrypt 申请证书有一些限制, 具体限制如下：\n\n1. 同一个主域名一周之内只能申请50个证书\n2. 每个账号下每个域名每小时申请验证失败的次数为5次\n3. 每周只能创建5个重复的证书，即使是通过不同的账号进行创建\n4. 每个账号同一个IP地址每3小时最多可以创建10个证书\n5. 每个多域名（SAN） SSL证书（不是通配符域名证书）最多只能包含100个子域\n6. 更新证书没有次数的限制，但是更新证书会受到上述重复证书的限制\n7. 如果提示证书申请失败，可以尝试更换域名再试（添加或换不同的二级域名，也算是新域名）\n8. 同一IP地址，在短时间内过于频繁的申请证书，也会被限制，此时更换域名也无法申请成功，只能等待一段时间，或者在安装过程中选择使用 BuyPass.com 来申请.\n\n\n\n\n## 使用说明 How to use\n\n\n### 准备工作\n\n1. 一台新的VPS开通后,建议做以下事情(非必须)\n2. 运行脚本后 选择45 填入你自己的公钥, 这样就可以不需要每次输入SSH密码登录VPS, 提高安全性. 还可以继续手动修改配置文件 /etc/ssh/sshd_config 关闭SSH使用密码登录,使其只能使用密钥登录VPS\n3. 运行脚本后 选择43 修改SSH端口号, 一般默认SSH端口号是22, 强烈建议改成其他的端口号, 提高安全性. 默认22端口极易被扫描和攻击.\n4. 运行脚本后 选择44 修改时区为北京时间, 因为V2ray的Vmess的协议需要对服务器和客户端时间一致, 建议把VPS服务器改成北京时间.\n5. 有一些VPS例如Google Cloud 默认没有开启root账号登录, 运行脚本后 选择42 可以开启root账号登录. 建议使用root用户运行该脚本.\n6. 运行脚本后 选择41 安装 Oh-my-zsh 和Micro 编辑器 等软件, 这些软件会简化你的后续操作, 并带有提示. 安装完成后请退出VPS, 命令为```exit```. 重新登录VPS后继续后续操作. \n\n### 安装新版Linux 内核 和 BBR 内核\n1. 运行脚本后 选择1 安装 Linux 内核和开启BBR+Cake, 具体请参考[Linux 内核一键安装脚本](/KERNEL_CN.md)\n\n\n\n### 安装 trojan or trojan-go\n\n1. 安装 trojan-go 重新运行脚本 命令为 ```./trojan_v2ray_install.sh ```  选2 安装trojan-go 如果开启 Websocket 来支持CDN, 需要注意 很多原版trojan客户端不支持websocket, 使用原版trojan客户端只能连接 trojan-go的原版tcp协议, 无法支持websocket 使用CDN. 需要使用支持 trojan-go的客户端才可以支持websocket 支持CDN.\n\n\n### 安装 v2ray 或 xray\n\n1. 重新运行脚本 选择11 安装 v2ray或xray 和 nginx.  Nginx前置提供443端口的tls服务, 推荐使用本模式 安全性最高. 然后安装v2ray协议时可以选择websocket或gRPC 等协议 通过设置 path来区分v2ray流量, 并且支持CDN. 如果选择TCP或HTTP2或QUIC 协议则无法使用CDN中转流量. Cloudflare 虽然支持HTTP2或QUIC协议, 但却无法使用其CDN中转, [具体信息可以看](https://github.com/v2ray/v2ray-core/issues/1769). QUIC(HTTP3)协议由于使用了UDP, 在某些运营商会被禁止或被限制端口或QoS降速, 所以使用QUIC可能无法达到提速的预期目的. 选择KCP协议降低延迟,如果打游戏可以尝试该协议.\n\n\n2. 重新运行脚本 选择13-16 安装 v2ray或xray 使用Vless协议提供443端口的tls服务, 同时 fallback 到80端口的nginx提供web伪装网站服务.  安装过程中如果选XTLS代替TLS加密 将会明显提高速度. 安装完毕后会提供多种协议可以同时使用. 使用WS-TLS 或 gRPC+TLS协议可以使用CDN中转加速. 使用TCP-XTLS则为直连速度最快协议(选择15或16安装). 安装V2ray或Xray, 都可以自定义端口, 密码和websocket 的path 路径, 默认为随机密码和随机路径. 同时还可以增加一个额外的监听端口与主端口同时使用, 方便用于不支持443端口的中转机中转给目标主机.\n\n3. 同时安装 trojan-go 和 v2ray 选择21 使用Vless提供443端口的tls服务, 而trojan或trojan-go运行在非443的其他端口上.\n\n4. 同时安装 trojan-go 和 v2ray 选择22 使用trojan-go 提供443端口的tls服务, trojan把非trojan流量转发到nginx, nginx在通过path路径转发流量到v2ray.\n\n5. 同时安装 trojan-go 和 v2ray 选择23 通过nginx SNI 提供443端口服务, 最少需要提供2个域名分别给trojan, v2ray单独使用, 并且可以与现有网站共存(需要再提供第3个域名给网站使用), 通过不同域名区分不同的HTTPS加密流量. \n\n\n6. 建议: 如果VPS线路速度可以保证，不需要CDN，建议17 安装xray + XTLS 速度最快, 或选2 安装 trojan-go. 如果需要CDN 可以选11 安装V2ray和Nginx. 不建议使用本脚本或其他脚本同时安装多个协议, 协议安装的越多安全性越低, 而且也不会提高速度, 适合自己的协议装一种最好. \n\n7. 以上安装都可以选择是否申请证书, 如果已有证书可以不在安装过程中申请, 或多次安装本脚本也可以不需要再次申请。证书位置在 /root/website/cert/fullchain.cer 和 /root/website/cert/private.key, 可以手动放置.\n\n8. 安装的Nginx的伪装网站路径为 /nginxweb/html, 可自行替换网页内容. Nginx 配置路径为 /etc/nginx/conf.d. 同时安装过程中可以选择不使用静态网页 而是直接反代某个网站 例如反代 baidu.com\n\n### 安装 xray 的 vision 和 Reality 协议\n\n1. 重新运行脚本 选择17 安装 xray 的 XTLS Vision协议. 使用Vless协议提供443端口的tls服务, 同时 fallback 到80端口的nginx提供web伪装网站服务.  安装过程中请选择 xray 1.7.5版本以上, 1.6以前的老版本不支持 XTLS Vision协议. 该协议不支持CDN中转. 客户端使用时也需要匹配最新版本的xray 1.7.5或以上版本内核 才能支持XTLS Vision.\n\n2. 重新运行脚本 选择18 安装 xray 的 Reality 协议. 该项安装时可以不需要域名, 这样就方便了很多. Vless Reality 协议提供443端口的转发服务. 同时 fallback 到安装时填写的某国外大企业网站. 安装过程中请选择 xray 1.8.0版本以上, 1.7以前的老版本不支持 Reality协议.  该协议不支持CDN中转. 客户端使用时也需要匹配最新版本的xray 1.8.0或以上版本内核 才能支持Reality.\n\n### 高级用法 Advanced Usage 与现有网站或宝塔面板共存\n\n1. 如果机器上已经有nginx或已有其他Web网站服务, 或是与宝塔面板共同使用, 可以运行脚本后 选择12  只安装V2ray或Xray, 运行在非80和443端口(端口可自定义), 注意: 选择12 安装V2ray或Xray 此时没有加密, 需要在宝塔面板或nginx自行修改配置, 让nginx服务于443 https端口, 根据指定的url路径path 转发到V2ray 端口, 起到tls加密作用.\n\n2. 运行脚本 选择13-17 安装V2ray或Xray, 过程中可以选择不安装nginx, 这样让V2ray或Xray的 Vless协议服务于443 https端口(端口可自定义), 可与现有的nginx或网站共存, nginx需要修改配置只监听80端口即可。Https的TLS加密由V2ray或Xray的 Vless协议提供.\n\n3. 如果机器上已经有nginx或已有其他Web网站服务, 或是与宝塔面板共同使用, 可以运行脚本后 选择3 只安装trojan-go, 这样让trojan或trojan-go服务于443 https端口, 与现有的nginx或网站共存, nginx需要修改配置只监听80端口即可。Https的TLS加密由 trojan-go提供服务.\n\n4. 注意 运行脚本后选择3 并选择安装trojan-go. 必须保证本机80端口有监听, 否则trojan-go无法启动. 这是trojan-go的一个fallback功能, 非trojan协议的流量会转发到remote_addr和remote_port指定这个HTTP服务器的地址. Trojan-Go将会测试这个HTTP服务器是否工作正常，如果不正常，Trojan-Go会拒绝启动. [参考trojan-go官方文档](https://p4gefau1t.github.io/trojan-go/basic/config/) \n\n\n\n\n\n### 安装管理面板 Install Web UI Panel for Trojan and V2ray\n\n1. 在没有安装任何 trojan 和 v2ray 的新机器上(如使用本脚本安装过可执行卸载操作), 选择30 进入子菜单安装 trojan 或 v2ray 可视化管理面板。(如果之前通过其他脚本安装过,再安装可视化管理面板则极易产生问题, 请先卸载其他脚本程序在安装)\n\n2. 选择30后 然后再选择1 安装trojan-web可视化管理面板 和 nginx. 根据提示输入域名后, 继续根据提示再选择1.Let's Encrypt 证书, 申请证书成功后. 继续根据提示再选择1.安装docker版mysql(mariadb). ariadb启动成功后,继续根据提示输入第一个trojan用户的账号密码,回车后出现\"欢迎使用trojan管理程序\" 需要不输入数字直接按回车,这样继续安装nginx直到完成. nginx安装成功会显示可视化管理面板网址,请保存下来. 如果没有显示管理面板网址则表明安装失败. \n\n3. 选择30后 然后再选择6或9 安装v2ray-ui可视化管理面板. 安装成功后可以再次运行本脚本, 选择26申请域名SSL证书. 然后再可视化管理面板新建添加vless账号或trojan账号, 填入证书文件路径 即可同时支持trojan和v2ray.\n\n\n### Netflix Unlock 解锁Netflix 等其他流媒体网站的区域限制 和 避免弹出Google人机验证\n\n1. 运行脚本后选择1 进入Linux 内核安装菜单, 根据提示安装 linux 内核 5.10或5.16, 具体请参考[Linux 内核一键安装脚本](/KERNEL_CN.md).\n2. 更换内核重启后, 选择1 进入linux 内核安装菜单, 选择2 使用BBR加速 和 Cake算法 优化VPS参数后 重启\n3. 重启后, 选择1, 再选择11或12 安装 Wireguard 和 Cloudflare WARP. 具体请参考[Linux 内核一键安装脚本](/KERNEL_CN.md) \n4. 确认 Wireguard 和 Cloudflare WARP 启动成功后, 运行脚本后 安装v2ray或xray, 安装过程中根据提示 选择 Netflix 和 Google 人机验证 解锁即可, 也可以选择解锁更多的视频网站.\n5. 本脚本集合了所有解锁 Netflix 网站的方法, 目前有 1 使用DNS解锁, 2 使用IPv6解锁, 3 使用WARP sock5 代理解锁, 4 使用转发到可解锁的V2ray或Xray服务器解锁.\n6. 目前网上搭建解锁反代服务器是使用 sniproxy + dns的方式, 本脚本稍后推出 nginx stream + dns, nginx + xray, nginx + v2ray, nginx + sock5, 非常灵活的各种方式搭建解锁反代服务器, 以便达到一台VPS可以同时做网站+提供解锁+v2ray+trojan的目的\n7. Netflix 检测解锁脚本无法测试 使用V2ray路由规则的解锁. 就是说使用本脚本安装过v2ray已经解锁了Netflix, 但用检测解锁脚本检测的结果还是会显示没有解锁, 就是无法测出已解锁Netflix. 可以把检测脚本运行在 V2ray客户端机器上, 则能检测成功解锁. Netflix 检测解锁脚本只能运行在Mac或linux 平台. Windows平台可以使用linux ubuntu 子系统来运行 Netflix 检测解锁脚本.\n\n\n\n\n## 注意事项与常见问题 FAQ \n\n1. 建议使用root用户运行该脚本. 因为安装bbr 内核 需要root权限, 默认认为使用root执行本脚本, 非root用户请手动添加sudo执行 ```sudo ./trojan_v2ray_install.sh ``` 脚本. 注意 证书申请也需要用root用户而不建议用sudo运行 [acme.sh文档说明](https://github.com/acmesh-official/acme.sh/wiki/sudo).\n\n2. 自2022年 1月 1日起，V2ray 服务器端将默认禁用对于 MD5 认证信息 的兼容。任何使用 MD5 认证信息的客户端将无法连接到禁用 VMess MD5 认证信息的服务器端, [V2ray官方文档说明](https://www.v2fly.org/config/protocols/vmess.html#inboundconfigurationobject). 解决方法为客户端升级到最新版, 客户端配置文件AID=0(alterId 为 0). [其他解决方法1](https://www.blueskyxn.com/202201/5696.html). [其他解决方法2](https://dasmz.com/?p=1051). \n\n\n3. 免费域名可以使用 [freenom](https://www.freenom.com/zh/index.html?lang=zh). 注册freenom时需要使用美国IP,否则无法通过注册邮件验证. 请自行搜索教程.\n\n4. 使用脚本安装时请先关闭CDN, cloudflare.com 中DNS设置页面, 二级域名设置为DNS only 为关闭CDN(即关闭黄色云朵). 安装v2ray或trojan-go完毕后 可以开启CDN 设置为Proxied 即可. trojan目前不支持CDN, trojan-go 支持CDN,可以在安装过程中选择支持CDN.\n\n![注意 cloudflare CDN](https://github.com/jinwyp/one_click_script/blob/master/docs/cloudflare1.jpg?raw=true)\n\n5. 如果使用v2ray 或 xray的 gRPC 通过cloudflare 转发, 需要在cloudflare 域名 \"设置\"中 => \"网络\" 菜单里面 允许gRPC，cloudflare Network => gRPC \n\n![注意 cloudflare CDN gRPC](https://github.com/jinwyp/one_click_script/blob/master/docs/grpc.png?raw=true)\n\n6. 以下是Cloudflare CDN 的worker 加速脚本, 请把域名替换成自己的vps的域名. 然后在Cloudflare新建worker 添加即可. 可以通过下面3个工具任选其一, [CFIP][better-cloudflare-ip], [CloudflareScanner], [CloudflareSpeedTest],  在你自己的客户端机器上运行, 找出距离你最快的 cloudflare 的CDN IP, 在v2ray或trojan-go支持CDN的配置中填入该IP即可.\n```\naddEventListener(\n    \"fetch\", event => {\n        let url = new URL(event.request.url);\n        url.hostname = \"yourdomain.xxx.xx\";\n        url.protocol = \"https\";\n        let request = new Request(url, event.request);\n        event.respondWith(\n            fetch(request)\n        )\n    }\n)\n```\n\n\n## 特别感谢 Special Thanks\n\n1. 脚本感谢 https://github.com/sprov065/v2-ui \n2. 脚本感谢 https://github.com/Jrohy/trojan \n3. 脚本感谢 https://github.com/v2fly/v2ray-core\n4. 脚本感谢 https://github.com/XTLS/Xray-core\n5. 脚本感谢 https://github.com/trojan-gfw/trojan\n6. 脚本感谢 https://github.com/p4gefau1t/trojan-go\n7. 脚本感谢 https://github.com/ylx2016/Linux-NetSpeed\n\n\n\n## Stargazers over time\n[![Stargazers over time](https://starchart.cc/jinwyp/one_click_script.svg)](https://starchart.cc/jinwyp/one_click_script)\n\n\n\n[better-cloudflare-ip]: https://github.com/badafans/better-cloudflare-ip/releases\n[CFIP]: https://github.com/BlueSkyXN/CFIP/releases\n[CloudflareScanner]: https://github.com/Spedoske/CloudflareScanner/releases/tag/1.1.2\n[CloudflareSpeedTest]: https://github.com/XIU2/CloudflareSpeedTest/releases/tag/v1.4.9\n\n\n"
        },
        {
          "name": "READMEOLD.md",
          "type": "blob",
          "size": 15.46484375,
          "content": "# Easy install v2ray (xray) and trojan (trojan-go) script (ultimate script for all condition)\n\n\n## 目录 Table of Contents\n\n* [Trojan 和 V2ray xray 一键安装脚本](#installation-安装方法)\n* [安装 最新版和LTS Linux 内核, BBR 和 BBR Plus 内核](#installation-linux-kernel-wireguard)\n* [安装 wireguard 和 Cloudflare WARP, 解锁 Netflix 区域限制 和 避免弹出Google人机验证](#installation-linux-kernel-wireguard)\n* [Netflix 非自制剧检测脚本 支持IPv6和 WARP Sock5 代理检测](#netflix-check)\n* [PVE Proxmox VE虚拟机 群晖NAS 安装工具脚本](/dsm/readme.md)\n* [FRP 内网穿透工具 一键安装脚本](/dsm/readme.md)\n* [锐角云 自动安装PVE 工具脚本](/acuteangle/readme.md)\n\n\n## 功能说明 Features \n\n1. 支持 trojan，trojan-go 和 v2ray, xray 的安装 升级 卸载. 卸载后不留任何痕迹, 方便重复安装.\n2. 支持 trojan 或 trojan-go 与 v2ray 共存, nginx全面支持TLS1.3 保证安全性, 支持SNI分流\n3. 可以仅安装 trojan 或 v2ray, 可以不安装nginx. 方便与宝塔面板或现有网站共存.\n4. 支持 v2ray 和 xray 自定义端口, 密码和WS的Path, 支持监听额外端口 方便中转机中转. \n5. 支持 v2ray 和 xray 新的vless协议, 支持v2ray作为前端 监听443端口 同时转发trojan 和 websocket. \n6. 支持 trojan-go websocket 模式, 可以选择是否支持CDN (websocket)\n7. 默认会创建10个以上用户账号, 还能创建指定前缀的密码, 方便用户使用.\n8. trojan 和 v2ray 可视化管理面板安装. \n9. 一键安装wireguard, 解决避免弹出Google人机验证和 Netflix Youtube 等流媒体网站限制问题, 同时v2ray支持相应的配置\n10. 一键安装wireguard, 解决避免弹出Google人机验证和 Netflix Youtube 等流媒体网站限制问题, 同时v2ray支持相应的配置\n11. 支持 一键安装 v2board 面板的服务器端 V2Ray-Poseidon, Soga, XrayR, Air-Universe \n12. 本脚本没有偷跑服务器流量的网页或其他屏蔽bt流量的等限制. 默认网页仅为bootstarp最简单的模板\n13. 本脚本所使用端口除443和80外都是随机生成, 保证安全性, 而其他脚本写死固定端口容易被检测\n14. 本脚本不推荐安装多种v2ray的多种协议共存, 协议越多安全性越低, 而且也不会提高速度, 强烈不建议使用其他脚本同时安装多个协议\n\n## Features English \n1. Install V2Ray or Xray using VLESS or VMess, support all condition: VLESS+TCP+TLS / VLESS+Websocket+TLS(CDN) / VMess+TCP+TLS / VMess+Websocket+TLS(CDN)  \n2. Using Trojan or Nginx or v2ray-core / Xray-core as frontend listening port 443\n3. Install trojan or trojan-go and V2Ray or Xray on the same server to support all protocol.\n4. Support Debian9+, Ubuntu 16+ and CentOS 7+ operation systems\n5. install wireguard and wgcf to avoid Google reCAPTCHA and unlock Netflix ip geo-restriction\n6. Easily switch Linux kernel version, 5.11, 5.10 LTS, 5.4 LTS, 4.19 LTS, 4.14 LTS  \n\n## Installation 安装方法  \n\n#### Usage 脚本使用方法\n```bash\nbash <(curl -Lso- https://git.io/oneclick)\n```\n\n\n####  通过 curl 命令安装  via curl to install script\n\n```bash\ncurl -O https://raw.githubusercontent.com/jinwyp/one_click_script/master/trojan_v2ray_install.sh && chmod +x ./trojan_v2ray_install.sh && ./trojan_v2ray_install.sh\n```\n\n#### 通过 wget 命令安装 via wget to install script\n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/trojan_v2ray_install.sh && chmod +x ./trojan_v2ray_install.sh && ./trojan_v2ray_install.sh\n```\n\n\n\n![功能列表](https://github.com/jinwyp/one_click_script/blob/master/docs/readme.png?raw=true)\n\n![功能列表2](https://github.com/jinwyp/one_click_script/blob/master/docs/readme2.png?raw=true)\n\n![功能列表3](https://github.com/jinwyp/one_click_script/blob/master/docs/readme3.png?raw=true)\n\n\n\n## Installation Linux kernel Wireguard \n\n#### Usage 脚本使用方法\n```bash\nbash <(curl -Lso- https://git.io/kernel.sh)\n```\n\n#### 通过 wget 命令安装 Linux 内核 和 Wireguard  via wget to install script\n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/install_kernel.sh && chmod +x ./install_kernel.sh && ./install_kernel.sh\n```\n\n\n## Netflix-Check\n#### Netflix 非自制剧解锁 检测脚本 全网最准确检测脚本 支持IPv6 和 Cloudflare WARP Sock5 代理检测\n\n#### 通过 wget 命令安装 via wget to install script\n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/netflix_check.sh && chmod +x ./netflix_check.sh && ./netflix_check.sh\n```\n\n\n## 使用说明 Usage \n\n### 安装命令行方式 启动 trojan 或 v2ray\n\n1. 该步骤可省略. 如果是使用google cloud 谷歌云服务器，默认无法使用root账号登陆， 可以选择32 开启root用户登录. 建议使用root用户运行该脚本. 安装bbr plus 需要root权限, 默认认为使用root执行, 非root用户请手动添加sudo执行 ```sudo ./tcp.sh ```和 ```sudo ./trojan_v2ray_install.sh ``` 脚本. （注意 证书申请也需要用root用户而不建议用sudo  [acme.sh文档说明](https://github.com/acmesh-official/acme.sh/wiki/sudo)  ).\n2. 安装 BBR plus (或 BBR) 网络加速. 运行脚本 ```./trojan_v2ray_install.sh ``` 选择1 然后 再选择36 安装5.10内核 或 选择61或其他 安装原版 BBRplus 4.14,129 版内核 , 注意安装过程中会弹出大框的英文提示(下面有示例图)\"安装linux内核有风险是否终止\", 要选择\" NO\" 不终止. 安装完毕会重启VPS\n3. 使用 BBR 或 BBRplus版 网络加速. 重新登录VPS后, 重新运行脚本 ```./trojan_v2ray_install.sh ```  选择1 然后 选择2 使用BBR 或选择2 使用BBRplus 加速. \n4. 该步骤可省略. 选择31, 安装 oh-my-zsh. 这样以后登录有命令提示, 方便新手操作. 安装完成后请退出VPS, 命令为```exit```.  重新登录VPS后继续下面操作. \n5. 安装 trojan 或 v2ray. 根据提示 重新运行脚本 ```./trojan_v2ray_install.sh ```  选2 安装trojan, 或选5 安装trojan-go, 或选11或14 安装v2ray, 或选21 同时安装trojan和v2ray， 或选24 同时安装trojan-go和v2ray.  强烈建议：如果VPS线路速度可以保证，不需要CDN，强烈建议选11或14 只安装xray 或只安装5 trojan-go (trojan-go速度已经很快了). 需要CDN可以选11只安装V2ray.  协议安装的越多安全性越低,而且也不会提高速度,适合自己的软件装一种最好. 完全没有必要使用多合一的脚本同时安装多个协议\n\n6. 第一步安装 BBR plus 时出现的提示 \"是否终止删除内核\" 请选择 \"NO\". 就是要卸载掉目前的内核. \n![注意 安装BBR plus](https://github.com/jinwyp/one_click_script/blob/master/docs/debian.jpg?raw=true)\n![注意 安装BBR plus](https://github.com/jinwyp/one_click_script/blob/master/docs/kernel.png?raw=true)\n![注意 安装BBR plus](https://github.com/jinwyp/one_click_script/blob/master/docs/ubuntu.png?raw=true)\n\n\n### 安装管理面板 Install web admin panel\n\n1. 在没有安装任何 trojan 和 v2ray 的新机器上(即没有执行过第5步, 执行过可以选择卸载), 选择29 进入子菜单安装 trojan 或 v2ray 可视化管理面板。(如果之前通过其他脚本安装过,再安装可视化管理面板则极易产生问题)\n2. 选择29后 然后再选择1 安装trojan-web可视化管理面板(建议使用centos7系统).根据提示输入域名后, 继续根据提示再选择1.Let's Encrypt 证书, 申请证书成功后. 继续根据提示再选择1.安装docker版mysql(mariadb). ariadb启动成功后,继续根据提示输入第一个trojan用户的账号密码,回车后出现\"欢迎使用trojan管理程序\" 需要不输入数字直接按回车,这样继续安装nginx直到完成. nginx安装成功会显示可视化管理面板网址,请保存下来. 如果没有显示管理面板网址则表明安装失败. \n3. 选择29后 然后再选择6 安装v2ray-ui可视化管理面板. 安装成功后可以再次运行本脚本选择29后在选择11申请域名SSL证书. 然后再可视化管理面板新建添加vless账号或trojan账号, 填入证书文件路径 即可同时支持trojan和v2ray.\n\n### 高级用法 Advanced Usage 与现有网站共存\n\n1. 如果机器上已经有nginx或已有网站服务, 或是与宝塔面板共同使用, 可以运行脚本后选择30, 然后单独安装不带有nginx的版本。 选择30后再选15, 则V2ray运行在非80和443端口(端口可自定义), 同时没有加密, 然后在宝塔面板或nginx自行修改配置, 让nginx服务于443 https端口, 根据指定的url路径转发到V2ray 端口, 起到加密作用。\n2. 选择30后 再选择12-14 安装trojan或trojan-go, 这样让trojan或trojan-go服务于443 https端口, 与现有的nginx或网站共存, nginx需要修改配置只监听80端口即可。https ssl加密由trojan或trojan-go提供。\n3. 选择30后, 再选择13或14后仅安装trojan-go. 必须保证本机80端口有监听, 否则trojan-go无法启动. 这是trojan-go的一个fallback功能, 非trojan协议的流量会转发到remote_addr和remote_port指定这个HTTP服务器的地址. Trojan-Go将会测试这个HTTP服务器是否工作正常，如果不正常，Trojan-Go会拒绝启动. [参考trojan-go官方文档](https://p4gefau1t.github.io/trojan-go/basic/config/) \n4. 选择30后 再选择16-24 安装V2ray或Xray, 这样让V2ray或Xray 的 Vless协议服务于443 https端口(端口可自定义), 与现有的nginx或网站共存, nginx需要修改配置只监听80端口即可。https ssl加密由V2ray或Xray 的 Vless协议提供。 推荐选择20的 Xray的Xtls-direct 模式速度最快\n5. 选择30后 再选择15-24 安装V2ray或Xray,都可以自定义端口, 密码和websocket 的path 路径, 默认为随机密码和随机路径. 同时还可以增加一个额外的监听端口与主端口同时使用, 方便不支持443端口的中转机中转给目标主机.\n6. 以上安装都可以选择是否申请证书, 如果已有证书可以不在安装过程中申请, 或多次安装本脚本也可以不需要再次申请。证书位置在 /root/website/cert/fullchain.cer 和 /root/website/cert/private.key, 可以手动放置\n\n\n### Netflix Unlock 解锁Netflix 等其他流媒体网站的区域限制 和 避免弹出Google人机验证\n\n1. 运行脚本后选择1 进入linux 内核安装菜单, 根据提示安装 linux 内核 5.10或5.14 都可以.\n2. 更换内核重启后, 选择1 进入linux 内核安装菜单, 选择2 使用BBR加速 和 Cake算法 优化VPS参数后 重启\n3. 重启后, 选择1, 再选择6 安装 Wireguard 和 cloudflare WARP. \n4. 确认Wireguard启动成功后, 运行脚本后选择14 或 11 或其他选项 安装v2ray或xray, 安装过程中根据提示 选择netflix 和 google 人机验证 解锁即可, 也可以选择解锁更多的视频网站.\n5. 本脚本集合了所有解锁 Netflix 网站的方法, 目前有 1 使用DNS解锁, 2 使用IPv6解锁, 3 使用WARP sock5 代理解锁, 4 使用转发到可解锁的V2ray或Xray服务器解锁\n6. 目前网上搭建解锁反代服务器是使用 sniproxy + dns的方式, 本脚本稍后推出 nginx stream + dns, nginx + xray, nginx + v2ray, nginx + sock5, 非常灵活的各种方式搭建解锁反代服务器, 以便达到一台VPS可以同时做网站+提供解锁+v2ray+trojan的目的\n\n\n\n## 注意事项与常见问题 FAQ \n\n1. 免费域名可以使用 [freenom](https://www.freenom.com/zh/index.html?lang=zh). 注册freenom时需要使用美国IP,否则无法通过注册邮件验证. 请自行搜索教程.\n2. 使用脚本安装时请先关闭CDN, cloudflare.com 中DNS设置页面, 二级域名设置为DNS only 为关闭CDN. 安装v2ray或trojan-go完毕后 可以开启CDN 设置为Proxied 即可. trojan目前不支持CDN, trojan-go 默认安装设置为不支持CDN,可以在安装过程中选择支持CDN.\n\n![注意 cloudflare CDN](https://github.com/jinwyp/one_click_script/blob/master/docs/cloudflare1.jpg?raw=true)\n\n3. 如果使用v2ray 或 xray的 gRPC 通过cloudflare 转发, 需要在cloudflare 域名 \"设置\"中 => \"网络\" 菜单里面 允许gRPC，cloudflare Network => gRPC \n\n![注意 cloudflare CDN gRPC](https://github.com/jinwyp/one_click_script/blob/master/docs/grpc.png?raw=true)\n\n4. 以下是Cloudflare CDN 的worker 加速脚本, 请把域名替换成自己的vps的域名. 然后在Cloudflare新建worker 添加即可. 可以通过下面3个工具任选其一, [CFIP][better-cloudflare-ip], [CloudflareScanner], [CloudflareSpeedTest],  在你自己的客户端机器上运行, 找出距离你最快的 cloudflare 的CDN IP, 在v2ray或trojan-go支持CDN的配置中填入该IP即可.\n```\naddEventListener(\n    \"fetch\", event => {\n        let url = new URL(event.request.url);\n        url.hostname = \"yourdomain.xxx.xx\";\n        url.protocol = \"https\";\n        let request = new Request(url, event.request);\n        event.respondWith(\n            fetch(request)\n        )\n    }\n)\n```\n\n## 关于Let's Encrypt证书\n本脚本使用的acme.sh来申请的Let's Encrypt免费证书。三个月需要续期，本脚本通过cron自动完成续期的，无需用户操作。但Let's Encrypt 申请证书有一些限制，如下：\n\nLet's Encrypt证书申请频率的限制\n\n1. 同一个主域名一周之内只能申请50个证书\n2. 每个账号下每个域名每小时申请验证失败的次数为5次\n3. 每周只能创建5个重复的证书，即使是通过不同的账号进行创建\n4. 每个账号同一个IP地址每3小时最多可以创建10个证书\n5. 每个多域名（SAN） SSL证书（不是通配符域名证书）最多只能包含100个子域\n6. 更新证书没有次数的限制，但是更新证书会受到上述重复证书的限制\n7. 如果提示证书申请失败，可以尝试更换域名再试（添加或换不同的二级域名，也算是新域名）\n8. 同一IP地址，在短时间内过于频繁的申请证书，也会被限制，此时更换域名也无法申请成功，只能等待一段时间，或者在安装过程中选择使用 BuyPass.com 来申请.\n\n\n## 特别感谢 Special Thanks\n\n1. 脚本感谢 https://github.com/sprov065/v2-ui \n2. 脚本感谢 https://github.com/Jrohy/trojan \n3. 脚本感谢 https://github.com/v2fly/v2ray-core\n4. 脚本感谢 https://github.com/XTLS/Xray-core\n5. 脚本感谢 https://github.com/trojan-gfw/trojan\n6. 脚本感谢 https://github.com/p4gefau1t/trojan-go\n7. 脚本感谢 https://github.com/ylx2016/Linux-NetSpeed\n8. 脚本感谢 秋水逸冰、Atrandys、V2ray官方 和 波仔分享 等 \n9. 脚本感谢 JCNF的博客 https://ybfl.xyz/111.html\n\n\n\n## Installation Xrayr\n## 安装其他 Linux 软件 和 V2board 服务器端 V2Ray-Poseidon, Soga, XrayR, Air-Universe 一键脚本\n\n#### via curl 安装命令 \n\n```bash\ncurl -O https://raw.githubusercontent.com/jinwyp/one_click_script/master/linux_install_software.sh && chmod +x ./linux_install_software.sh && ./linux_install_software.sh\n\n```\n\n#### via wget 安装命令 \n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/linux_install_software.sh && chmod +x ./linux_install_software.sh && ./linux_install_software.sh\n\n```\n\n![功能列表4](https://github.com/jinwyp/one_click_script/blob/master/docs/v2board1.png?raw=true)\n\n\n\n## Stargazers over time\n[![Stargazers over time](https://starchart.cc/jinwyp/one_click_script.svg)](https://starchart.cc/jinwyp/one_click_script)\n\n\n\n[better-cloudflare-ip]: https://github.com/badafans/better-cloudflare-ip/releases\n[CFIP]: https://github.com/BlueSkyXN/CFIP/releases\n[CloudflareScanner]: https://github.com/Spedoske/CloudflareScanner/releases/tag/1.1.2\n[CloudflareSpeedTest]: https://github.com/XIU2/CloudflareSpeedTest/releases/tag/v1.4.9\n\n\n\n\n"
        },
        {
          "name": "TOOL.md",
          "type": "blob",
          "size": 0.9296875,
          "content": "# Linux toolkit Easily install docker and Nodejs shell script\n\n\n## [中文文档](/TOOL_CN.md)\n\n## Features\n\n1. Configuring an SSH login without password. Change the SSH Default Port. Secure your VPS.\n2. Install linux sofrware including Oh-my-zsh, zsh-autosuggestions, Micro editors.\n3. Install Nodejs and PM2.\n4. Install Docker and Docker Compose.\n5. Install Portainer.\n\n\n\n## Installation\n\n#### via curl to install script\n\n```bash\ncurl -O https://raw.githubusercontent.com/jinwyp/one_click_script/master/linux_install_software.sh && chmod +x ./linux_install_software.sh && ./linux_install_software.sh\n\n```\n\n#### via wget to install script\n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/linux_install_software.sh && chmod +x ./linux_install_software.sh && ./linux_install_software.sh\n\n```\n\n![功能列表4](https://github.com/jinwyp/one_click_script/blob/master/docs/v2board1_en.png?raw=true)\n\n\n\n\n"
        },
        {
          "name": "TOOL_CN.md",
          "type": "blob",
          "size": 0.982421875,
          "content": "# Linux toolkit Easily install docker and Nodejs shell script\n\n## 安装 Linux 软件 和 服务器端  一键脚本\n\n## 目录 Table of Contents\n\n* [V2board 服务器端 一键安装脚本](#installation)\n\n## 功能介绍\n\n1. 开启SSH 无密码登录.修改SSH默认端口, 增加VPS安全性.\n2. 安装 Oh-my-zsh, zsh-autosuggestions, Micro 编辑器.\n3. 安装 Nodejs 和 PM2.\n4. 安装 Docker 和 Docker Compose.\n5. 安装 Portainer.\n\n\n## Installation\n\n#### via curl 安装命令\n\n```bash\ncurl -O https://raw.githubusercontent.com/jinwyp/one_click_script/master/linux_install_software.sh && chmod +x ./linux_install_software.sh && ./linux_install_software.sh\n\n```\n\n#### via wget 安装命令\n\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/linux_install_software.sh && chmod +x ./linux_install_software.sh && ./linux_install_software.sh\n\n```\n\n![功能列表4](https://github.com/jinwyp/one_click_script/blob/master/docs/v2board1.png?raw=true)\n\n\n\n\n"
        },
        {
          "name": "acuteangle",
          "type": "tree",
          "content": null
        },
        {
          "name": "bench.sh",
          "type": "blob",
          "size": 13.353515625,
          "content": "#!/usr/bin/env bash\n#\n# Description: Auto test download & I/O speed script\n#\n# Copyright (C) 2015 - 2022 Teddysun <i@teddysun.com>\n# Thanks: LookBack <admin@dwhd.org>\n# URL: https://teddysun.com/444.html\n# https://github.com/teddysun/across/blob/master/bench.sh\n#\ntrap _exit INT QUIT TERM\n\n_red() {\n    printf '\\033[0;31;31m%b\\033[0m' \"$1\"\n}\n\n_green() {\n    printf '\\033[0;31;32m%b\\033[0m' \"$1\"\n}\n\n_yellow() {\n    printf '\\033[0;31;33m%b\\033[0m' \"$1\"\n}\n\n_blue() {\n    printf '\\033[0;31;36m%b\\033[0m' \"$1\"\n}\n\n_exists() {\n    local cmd=\"$1\"\n    if eval type type > /dev/null 2>&1; then\n        eval type \"$cmd\" > /dev/null 2>&1\n    elif command > /dev/null 2>&1; then\n        command -v \"$cmd\" > /dev/null 2>&1\n    else\n        which \"$cmd\" > /dev/null 2>&1\n    fi\n    local rt=$?\n    return ${rt}\n}\n\n_exit() {\n    _red \"\\nThe script has been terminated.\\n\"\n    # clean up\n    rm -fr speedtest.tgz speedtest-cli benchtest_*\n    exit 1\n}\n\nget_opsy() {\n    [ -f /etc/redhat-release ] && awk '{print $0}' /etc/redhat-release && return\n    [ -f /etc/os-release ] && awk -F'[= \"]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return\n    [ -f /etc/lsb-release ] && awk -F'[=\"]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return\n}\n\nnext() {\n    printf \"%-70s\\n\" \"-\" | sed 's/\\s/-/g'\n}\n\nspeed_test() {\n    local nodeName=\"$2\"\n    [ -z \"$1\" ] && ./speedtest-cli/speedtest --progress=no --accept-license --accept-gdpr > ./speedtest-cli/speedtest.log 2>&1 || \\\n    ./speedtest-cli/speedtest --progress=no --server-id=$1 --accept-license --accept-gdpr > ./speedtest-cli/speedtest.log 2>&1\n    if [ $? -eq 0 ]; then\n        local dl_speed=$(awk '/Download/{print $3\" \"$4}' ./speedtest-cli/speedtest.log)\n        local up_speed=$(awk '/Upload/{print $3\" \"$4}' ./speedtest-cli/speedtest.log)\n        local latency=$(awk '/Latency/{print $2\" \"$3}' ./speedtest-cli/speedtest.log)\n        if [[ -n \"${dl_speed}\" && -n \"${up_speed}\" && -n \"${latency}\" ]]; then\n            printf \"\\033[0;33m%-18s\\033[0;32m%-18s\\033[0;31m%-20s\\033[0;36m%-12s\\033[0m\\n\" \" ${nodeName}\" \"${up_speed}\" \"${dl_speed}\" \"${latency}\"\n        fi\n    fi\n}\n\nspeed() {\n    speed_test '' 'Speedtest.net'\n    speed_test '14939' 'SanJose, Mimosa'\n    speed_test '17846' 'SJ, Sonic'\n    speed_test '21541' 'Los Angeles, i3D'\n    speed_test '7190' 'LA, Sharktech'\n    speed_test '17614' 'Phoenix, AZ'\n    speed_test '24215' 'Paris, FR'\n    speed_test '28922' 'Amsterdam, NL'\n    speed_test '37235' 'Shenyang, CU'\n    speed_test '43752' 'BeiJing, CU'\n    speed_test '25858' 'BeiJing, CM'\n    speed_test '24447' 'Shanghai, CN'\n    speed_test '24447' 'ShangHai, CU 5G'\n    speed_test '26352' 'NanJing, CT 5G'\n    speed_test '59386' 'HangZhou, CT'\n    speed_test '5396' 'SuZhou, CT 5G'\n    speed_test '45170' 'WuXi, CU'\n    speed_test '59387' 'NingBo, CT'\n    speed_test '36646' 'ZhengZhou, CU 5G'\n    speed_test '5317' 'Yangzhou, CT 5G'\n    speed_test '56354' 'FuZhou, CU'\n    speed_test '60572' 'Guangzhou, CN'\n    speed_test '58591' 'Shenzhen, CM'\n    speed_test '32155' 'Hongkong, CN'\n    speed_test '6527'  'Seoul, KR'\n    speed_test '13623'  'Singapore, SG'\n    speed_test '21569' 'Tokyo, JP'\n\n\n}\n\nio_test() {\n    (LANG=C dd if=/dev/zero of=benchtest_$$ bs=512k count=$1 conv=fdatasync && rm -f benchtest_$$ ) 2>&1 | awk -F, '{io=$NF} END { print io}' | sed 's/^[ \\t]*//;s/[ \\t]*$//'\n}\n\ncalc_size() {\n    local raw=$1\n    local total_size=0\n    local num=1\n    local unit=\"KB\"\n    if ! [[ ${raw} =~ ^[0-9]+$ ]] ; then\n        echo \"\"\n        return\n    fi\n    if [ \"${raw}\" -ge 1073741824 ]; then\n        num=1073741824\n        unit=\"TB\"\n    elif [ \"${raw}\" -ge 1048576 ]; then\n        num=1048576\n        unit=\"GB\"\n    elif [ \"${raw}\" -ge 1024 ]; then\n        num=1024\n        unit=\"MB\"\n    elif [ \"${raw}\" -eq 0 ]; then\n        echo \"${total_size}\"\n        return\n    fi\n    total_size=$( awk 'BEGIN{printf \"%.1f\", '$raw' / '$num'}' )\n    echo \"${total_size} ${unit}\"\n}\n\ncheck_virt(){\n    _exists \"dmesg\" && virtualx=\"$(dmesg 2>/dev/null)\"\n    if _exists \"dmidecode\"; then\n        sys_manu=\"$(dmidecode -s system-manufacturer 2>/dev/null)\"\n        sys_product=\"$(dmidecode -s system-product-name 2>/dev/null)\"\n        sys_ver=\"$(dmidecode -s system-version 2>/dev/null)\"\n    else\n        sys_manu=\"\"\n        sys_product=\"\"\n        sys_ver=\"\"\n    fi\n    if   grep -qa docker /proc/1/cgroup; then\n        virt=\"Docker\"\n    elif grep -qa lxc /proc/1/cgroup; then\n        virt=\"LXC\"\n    elif grep -qa container=lxc /proc/1/environ; then\n        virt=\"LXC\"\n    elif [[ -f /proc/user_beancounters ]]; then\n        virt=\"OpenVZ\"\n    elif [[ \"${virtualx}\" == *kvm-clock* ]]; then\n        virt=\"KVM\"\n    elif [[ \"${sys_product}\" == *KVM* ]]; then\n        virt=\"KVM\"\n    elif [[ \"${cname}\" == *KVM* ]]; then\n        virt=\"KVM\"\n    elif [[ \"${cname}\" == *QEMU* ]]; then\n        virt=\"KVM\"\n    elif [[ \"${virtualx}\" == *\"VMware Virtual Platform\"* ]]; then\n        virt=\"VMware\"\n    elif [[ \"${virtualx}\" == *\"Parallels Software International\"* ]]; then\n        virt=\"Parallels\"\n    elif [[ \"${virtualx}\" == *VirtualBox* ]]; then\n        virt=\"VirtualBox\"\n    elif [[ -e /proc/xen ]]; then\n        if grep -q \"control_d\" \"/proc/xen/capabilities\" 2>/dev/null; then\n            virt=\"Xen-Dom0\"\n        else\n            virt=\"Xen-DomU\"\n        fi\n    elif [ -f \"/sys/hypervisor/type\" ] && grep -q \"xen\" \"/sys/hypervisor/type\"; then\n        virt=\"Xen\"\n    elif [[ \"${sys_manu}\" == *\"Microsoft Corporation\"* ]]; then\n        if [[ \"${sys_product}\" == *\"Virtual Machine\"* ]]; then\n            if [[ \"${sys_ver}\" == *\"7.0\"* || \"${sys_ver}\" == *\"Hyper-V\" ]]; then\n                virt=\"Hyper-V\"\n            else\n                virt=\"Microsoft Virtual Machine\"\n            fi\n        fi\n    else\n        virt=\"Dedicated\"\n    fi\n}\n\nipv4_info() {\n    local org=\"$(wget -q -T10 -O- ipinfo.io/org)\"\n    local city=\"$(wget -q -T10 -O- ipinfo.io/city)\"\n    local country=\"$(wget -q -T10 -O- ipinfo.io/country)\"\n    local region=\"$(wget -q -T10 -O- ipinfo.io/region)\"\n    if [[ -n \"$org\" ]]; then\n        echo \" Organization       : $(_blue \"$org\")\"\n    fi\n    if [[ -n \"$city\" && -n \"country\" ]]; then\n        echo \" Location           : $(_blue \"$city / $country\")\"\n    fi\n    if [[ -n \"$region\" ]]; then\n        echo \" Region             : $(_yellow \"$region\")\"\n    fi\n    if [[ -z \"$org\" ]]; then\n        echo \" Region             : $(_red \"No ISP detected\")\"\n    fi\n}\n\ninstall_speedtest() {\n    if [ ! -e \"./speedtest-cli/speedtest\" ]; then\n        sys_bit=\"\"\n        local sysarch=\"$(uname -m)\"\n        if [ \"${sysarch}\" = \"unknown\" ] || [ \"${sysarch}\" = \"\" ]; then\n            local sysarch=\"$(arch)\"\n        fi\n        if [ \"${sysarch}\" = \"x86_64\" ]; then\n            sys_bit=\"x86_64\"\n        fi\n        if [ \"${sysarch}\" = \"i386\" ] || [ \"${sysarch}\" = \"i686\" ]; then\n            sys_bit=\"i386\"\n        fi\n        if [ \"${sysarch}\" = \"armv8\" ] || [ \"${sysarch}\" = \"armv8l\" ] || [ \"${sysarch}\" = \"aarch64\" ] || [ \"${sysarch}\" = \"arm64\" ]; then\n            sys_bit=\"aarch64\"\n        fi\n        if [ \"${sysarch}\" = \"armv7\" ] || [ \"${sysarch}\" = \"armv7l\" ]; then\n            sys_bit=\"armhf\"\n        fi\n        if [ \"${sysarch}\" = \"armv6\" ]; then\n            sys_bit=\"armel\"\n        fi\n        [ -z \"${sys_bit}\" ] && _red \"Error: Unsupported system architecture (${sysarch}).\\n\" && exit 1\n        url1=\"https://install.speedtest.net/app/cli/ookla-speedtest-1.1.1-linux-${sys_bit}.tgz\"\n        url2=\"https://dl.lamp.sh/files/ookla-speedtest-1.1.1-linux-${sys_bit}.tgz\"\n        wget --no-check-certificate -q -T10 -O speedtest.tgz ${url1}\n        if [ $? -ne 0 ]; then\n            wget --no-check-certificate -q -T10 -O speedtest.tgz ${url2}\n            [ $? -ne 0 ] && _red \"Error: Failed to download speedtest-cli.\\n\" && exit 1\n        fi\n        mkdir -p speedtest-cli && tar zxf speedtest.tgz -C ./speedtest-cli && chmod +x ./speedtest-cli/speedtest\n        rm -f speedtest.tgz\n    fi\n}\n\nprint_intro() {\n    echo \"-------------------- A Bench.sh Script By Teddysun -------------------\"\n    echo \" Version            : $(_green v2022-02-22)\"\n    echo \" Usage              : $(_red \"wget -qO- bench.sh | bash\")\"\n}\n\n# Get System information\nget_system_info() {\n    cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\n    cores=$( awk -F: '/processor/ {core++} END {print core}' /proc/cpuinfo )\n    freq=$( awk -F'[ :]' '/cpu MHz/ {print $4;exit}' /proc/cpuinfo )\n    ccache=$( awk -F: '/cache size/ {cache=$2} END {print cache}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\n    cpu_aes=$( grep -i 'aes' /proc/cpuinfo )\n    cpu_virt=$( grep -Ei 'vmx|svm' /proc/cpuinfo )\n    tram=$( LANG=C; free | awk '/Mem/ {print $2}' )\n    tram=$( calc_size $tram )\n    uram=$( LANG=C; free | awk '/Mem/ {print $3}' )\n    uram=$( calc_size $uram )\n    swap=$( LANG=C; free | awk '/Swap/ {print $2}' )\n    swap=$( calc_size $swap )\n    uswap=$( LANG=C; free | awk '/Swap/ {print $3}' )\n    uswap=$( calc_size $uswap )\n    up=$( awk '{a=$1/86400;b=($1%86400)/3600;c=($1%3600)/60} {printf(\"%d days, %d hour %d min\\n\",a,b,c)}' /proc/uptime )\n    if _exists \"w\"; then\n        load=$( LANG=C; w | head -1 | awk -F'load average:' '{print $2}' | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\n    elif _exists \"uptime\"; then\n        load=$( LANG=C; uptime | head -1 | awk -F'load average:' '{print $2}' | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\n    fi\n    opsy=$( get_opsy )\n    arch=$( uname -m )\n    if _exists \"getconf\"; then\n        lbit=$( getconf LONG_BIT )\n    else\n        echo ${arch} | grep -q \"64\" && lbit=\"64\" || lbit=\"32\"\n    fi\n    kern=$( uname -r )\n    disk_total_size=$( LANG=C; df -t simfs -t ext2 -t ext3 -t ext4 -t btrfs -t xfs -t vfat -t ntfs -t swap --total 2>/dev/null | grep total | awk '{ print $2 }' )\n    disk_total_size=$( calc_size $disk_total_size )\n    disk_used_size=$( LANG=C; df -t simfs -t ext2 -t ext3 -t ext4 -t btrfs -t xfs -t vfat -t ntfs -t swap --total 2>/dev/null | grep total | awk '{ print $3 }' )\n    disk_used_size=$( calc_size $disk_used_size )\n    tcpctrl=$( sysctl net.ipv4.tcp_congestion_control | awk -F ' ' '{print $3}' )\n}\n# Print System information\nprint_system_info() {\n    if [ -n \"$cname\" ]; then\n        echo \" CPU Model          : $(_blue \"$cname\")\"\n    else\n        echo \" CPU Model          : $(_blue \"CPU model not detected\")\"\n    fi\n    if [ -n \"$freq\" ]; then\n        echo \" CPU Cores          : $(_blue \"$cores @ $freq MHz\")\"\n    else\n        echo \" CPU Cores          : $(_blue \"$cores\")\"\n    fi\n    if [ -n \"$ccache\" ]; then\n        echo \" CPU Cache          : $(_blue \"$ccache\")\"\n    fi\n    if [ -n \"$cpu_aes\" ]; then\n        echo \" AES-NI             : $(_green \"Enabled\")\"\n    else\n        echo \" AES-NI             : $(_red \"Disabled\")\"\n    fi\n    if [ -n \"$cpu_virt\" ]; then\n        echo \" VM-x/AMD-V         : $(_green \"Enabled\")\"\n    else\n        echo \" VM-x/AMD-V         : $(_red \"Disabled\")\"\n    fi\n    echo \" Total Disk         : $(_yellow \"$disk_total_size\") $(_blue \"($disk_used_size Used)\")\"\n    echo \" Total Mem          : $(_yellow \"$tram\") $(_blue \"($uram Used)\")\"\n    if [ \"$swap\" != \"0\" ]; then\n        echo \" Total Swap         : $(_blue \"$swap ($uswap Used)\")\"\n    fi\n    echo \" System uptime      : $(_blue \"$up\")\"\n    echo \" Load average       : $(_blue \"$load\")\"\n    echo \" OS                 : $(_blue \"$opsy\")\"\n    echo \" Arch               : $(_blue \"$arch ($lbit Bit)\")\"\n    echo \" Kernel             : $(_blue \"$kern\")\"\n    echo \" TCP CC             : $(_yellow \"$tcpctrl\")\"\n    echo \" Virtualization     : $(_blue \"$virt\")\"\n}\n\nprint_io_test() {\n    freespace=$( df -m . | awk 'NR==2 {print $4}' )\n    if [ -z \"${freespace}\" ]; then\n        freespace=$( df -m . | awk 'NR==3 {print $3}' )\n    fi\n    if [ ${freespace} -gt 1024 ]; then\n        writemb=2048\n        io1=$( io_test ${writemb} )\n        echo \" I/O Speed(1st run) : $(_yellow \"$io1\")\"\n        io2=$( io_test ${writemb} )\n        echo \" I/O Speed(2nd run) : $(_yellow \"$io2\")\"\n        io3=$( io_test ${writemb} )\n        echo \" I/O Speed(3rd run) : $(_yellow \"$io3\")\"\n        ioraw1=$( echo $io1 | awk 'NR==1 {print $1}' )\n        [ \"`echo $io1 | awk 'NR==1 {print $2}'`\" == \"GB/s\" ] && ioraw1=$( awk 'BEGIN{print '$ioraw1' * 1024}' )\n        ioraw2=$( echo $io2 | awk 'NR==1 {print $1}' )\n        [ \"`echo $io2 | awk 'NR==1 {print $2}'`\" == \"GB/s\" ] && ioraw2=$( awk 'BEGIN{print '$ioraw2' * 1024}' )\n        ioraw3=$( echo $io3 | awk 'NR==1 {print $1}' )\n        [ \"`echo $io3 | awk 'NR==1 {print $2}'`\" == \"GB/s\" ] && ioraw3=$( awk 'BEGIN{print '$ioraw3' * 1024}' )\n        ioall=$( awk 'BEGIN{print '$ioraw1' + '$ioraw2' + '$ioraw3'}' )\n        ioavg=$( awk 'BEGIN{printf \"%.1f\", '$ioall' / 3}' )\n        echo \" I/O Speed(average) : $(_yellow \"$ioavg MB/s\")\"\n    else\n        echo \" $(_red \"Not enough space for I/O Speed test!\")\"\n    fi\n}\n\nprint_end_time() {\n    end_time=$(date +%s)\n    time=$(( ${end_time} - ${start_time} ))\n    if [ ${time} -gt 60 ]; then\n        min=$(expr $time / 60)\n        sec=$(expr $time % 60)\n        echo \" Finished in        : ${min} min ${sec} sec\"\n    else\n        echo \" Finished in        : ${time} sec\"\n    fi\n    date_time=$(date '+%Y-%m-%d %H:%M:%S %Z')\n    echo \" Timestamp          : $date_time\"\n}\n\n! _exists \"wget\" && _red \"Error: wget command not found.\\n\" && exit 1\n! _exists \"free\" && _red \"Error: free command not found.\\n\" && exit 1\nstart_time=$(date +%s)\nget_system_info\ncheck_virt\nclear\nprint_intro\nnext\nprint_system_info\nipv4_info\nnext\nprint_io_test\nnext\ninstall_speedtest && printf \"%-18s%-18s%-20s%-12s\\n\" \" Node Name\" \"Upload Speed\" \"Download Speed\" \"Latency\"\nspeed && rm -fr speedtest-cli\nnext\nprint_end_time\nnext\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "download",
          "type": "tree",
          "content": null
        },
        {
          "name": "dsm",
          "type": "tree",
          "content": null
        },
        {
          "name": "install_kernel.sh",
          "type": "blob",
          "size": 144.7802734375,
          "content": "#!/bin/bash\n\n#\n# Install linux kernel for TCP BBR and BBR Plus\n#\n# Copyright (C) 2021-2023 JinWYP\n#\n\n\n# 4.4 LTS 4.9 LTS 4.14 LTS 4.19 LTS\n# 5.4 LTS 5.10 LTS\n\n\n# 4.x版本内核最新的longterm版本是4.19.113,安装的话只能找个4.19的rpm包来安装了\n\n# 从 Linux 4.9 版本开始，TCP BBR 就已经成为了 Linux 系统内核的一部分。因此，开启 BBR 的首要前提就是当前系统内核版本大于等于 4.9\n\n# Linux 内核 5.6 正式发布了，内置了 wireguard module\n# Linux 5.6 引入 FQ-PIE 数据包调度程序以帮助应对 Bufferbloat\n# 5.5内核支持cake队列\n# 自来光大佬： xamod内核5.8默认队列算法已经改为 fq_pie 之前是cake\n\n\n# centos8 安装完成默认内核  kernel-core-4.18.0-240.15.1.el8_3.x86_64, kernel-modules-4.18.0-240.15.1.el8_3.x86_64\n# ubuntu16 安装完成默认内核  linux-generic 4.4.0.210, linux-headers-4.4.0-210\n# ubuntu18 安装完成默认内核  linux-generic 4.15.0.140, linux-headers-4.15.0-140\n# ubuntu20 安装完成默认内核  linux-image-5.4.0-70-generic , linux-headers-5.4.0-70\n# debian10 安装完成默认内核  4.19.0-16-amd64\n# debian11 安装完成默认内核  linux-image-5.10.0-8-amd64\n\n# UJX6N 编译的bbr plus 内核  5.10.27-bbrplus    5.9.16    5.4.86\n# UJX6N 编译的bbr plus 内核  4.19.164   4.14.213    4.9.264-1.bbrplus\n# https://github.com/cx9208/bbrplus/issues/27\n\n\n# BBR 速度评测\n# https://www.shopee6.com/web/web-tutorial/bbr-vs-plus-vs-bbr2.html\n# https://hostloc.com/thread-644985-1-1.html\n\n# https://dropbox.tech/infrastructure/evaluating-bbrv2-on-the-dropbox-edge-network\n\n\n\nexport LC_ALL=C\nexport LANG=en_US.UTF-8\nexport LANGUAGE=en_US.UTF-8\n\n\nsudoCmd=\"\"\nif [[ $(/usr/bin/id -u) -ne 0 ]]; then\n  sudoCmd=\"sudo\"\nfi\n\n\n# fonts color\nred(){\n    echo -e \"\\033[31m\\033[01m$1\\033[0m\"\n}\ngreen(){\n    echo -e \"\\033[32m\\033[01m$1\\033[0m\"\n}\nyellow(){\n    echo -e \"\\033[33m\\033[01m$1\\033[0m\"\n}\nblue(){\n    echo -e \"\\033[34m\\033[01m$1\\033[0m\"\n}\nbold(){\n    echo -e \"\\033[1m\\033[01m$1\\033[0m\"\n}\n\nGreen_font_prefix=\"\\033[32m\"\nRed_font_prefix=\"\\033[31m\"\nGreen_background_prefix=\"\\033[42;37m\"\nRed_background_prefix=\"\\033[41;37m\"\nFont_color_suffix=\"\\033[0m\"\n\n\n\n\n\nosCPU=\"\"\nosArchitecture=\"arm\"\nosInfo=\"\"\nosRelease=\"\"\nosReleaseVersion=\"\"\nosReleaseVersionNo=\"\"\nosReleaseVersionNoShort=\"\"\nosReleaseVersionCodeName=\"CodeName\"\nosSystemPackage=\"\"\nosSystemMdPath=\"\"\nosSystemShell=\"bash\"\n\nfunction checkArchitecture(){\n\t# https://stackoverflow.com/questions/48678152/how-to-detect-386-amd64-arm-or-arm64-os-architecture-via-shell-bash\n\n\tcase $(uname -m) in\n\t\ti386)   osArchitecture=\"386\" ;;\n\t\ti686)   osArchitecture=\"386\" ;;\n\t\tx86_64) osArchitecture=\"amd64\" ;;\n\t\tarm)    dpkg --print-architecture | grep -q \"arm64\" && osArchitecture=\"arm64\" || osArchitecture=\"arm\" ;;\n\t\taarch64)    dpkg --print-architecture | grep -q \"arm64\" && osArchitecture=\"arm64\" || osArchitecture=\"arm\" ;;\n\t\t* )     osArchitecture=\"arm\" ;;\n\tesac\n}\n\nfunction checkCPU(){\n\tosCPUText=$(cat /proc/cpuinfo | grep vendor_id | uniq)\n\tif [[ $osCPUText =~ \"GenuineIntel\" ]]; then\n\t\tosCPU=\"intel\"\n    elif [[ $osCPUText =~ \"AMD\" ]]; then\n        osCPU=\"amd\"\n    else\n        echo\n    fi\n\n\t# green \" Status 状态显示--当前CPU是: $osCPU\"\n}\n\n# 检测系统版本号\ngetLinuxOSVersion(){\n    if [[ -s /etc/redhat-release ]]; then\n        osReleaseVersion=$(grep -oE '[0-9.]+' /etc/redhat-release)\n    else\n        osReleaseVersion=$(grep -oE '[0-9.]+' /etc/issue)\n    fi\n\n    # https://unix.stackexchange.com/questions/6345/how-can-i-get-distribution-name-and-version-number-in-a-simple-shell-script\n\n    if [ -f /etc/os-release ]; then\n        # freedesktop.org and systemd\n        source /etc/os-release\n        osInfo=$NAME\n        osReleaseVersionNo=$VERSION_ID\n\n        if [ -n \"$VERSION_CODENAME\" ]; then\n            osReleaseVersionCodeName=$VERSION_CODENAME\n        fi\n    elif type lsb_release >/dev/null 2>&1; then\n        # linuxbase.org\n        osInfo=$(lsb_release -si)\n        osReleaseVersionNo=$(lsb_release -sr)\n\n    elif [ -f /etc/lsb-release ]; then\n        # For some versions of Debian/Ubuntu without lsb_release command\n        . /etc/lsb-release\n        osInfo=$DISTRIB_ID\n        osReleaseVersionNo=$DISTRIB_RELEASE\n\n    elif [ -f /etc/debian_version ]; then\n        # Older Debian/Ubuntu/etc.\n        osInfo=Debian\n        osReleaseVersion=$(cat /etc/debian_version)\n        osReleaseVersionNo=$(sed 's/\\..*//' /etc/debian_version)\n    elif [ -f /etc/redhat-release ]; then\n        osReleaseVersion=$(grep -oE '[0-9.]+' /etc/redhat-release)\n    else\n        # Fall back to uname, e.g. \"Linux <version>\", also works for BSD, etc.\n        osInfo=$(uname -s)\n        osReleaseVersionNo=$(uname -r)\n    fi\n\n    osReleaseVersionNoShort=$(echo $osReleaseVersionNo | sed 's/\\..*//')\n}\n\n\n# 检测系统发行版代号\nfunction getLinuxOSRelease(){\n    if [[ -f /etc/redhat-release ]]; then\n        osRelease=\"centos\"\n        osSystemPackage=\"yum\"\n        osSystemMdPath=\"/usr/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"\"\n    elif cat /etc/issue | grep -Eqi \"debian|raspbian\"; then\n        osRelease=\"debian\"\n        osSystemPackage=\"apt-get\"\n        osSystemMdPath=\"/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"buster\"\n    elif cat /etc/issue | grep -Eqi \"ubuntu\"; then\n        osRelease=\"ubuntu\"\n        osSystemPackage=\"apt-get\"\n        osSystemMdPath=\"/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"bionic\"\n    elif cat /etc/issue | grep -Eqi \"centos|red hat|redhat\"; then\n        osRelease=\"centos\"\n        osSystemPackage=\"yum\"\n        osSystemMdPath=\"/usr/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"\"\n    elif cat /proc/version | grep -Eqi \"debian|raspbian\"; then\n        osRelease=\"debian\"\n        osSystemPackage=\"apt-get\"\n        osSystemMdPath=\"/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"buster\"\n    elif cat /proc/version | grep -Eqi \"ubuntu\"; then\n        osRelease=\"ubuntu\"\n        osSystemPackage=\"apt-get\"\n        osSystemMdPath=\"/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"bionic\"\n    elif cat /proc/version | grep -Eqi \"centos|red hat|redhat\"; then\n        osRelease=\"centos\"\n        osSystemPackage=\"yum\"\n        osSystemMdPath=\"/usr/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"\"\n    fi\n\n    getLinuxOSVersion\n    checkArchitecture\n\tcheckCPU\n    virt_check\n\n    [[ -z $(echo $SHELL|grep zsh) ]] && osSystemShell=\"bash\" || osSystemShell=\"zsh\"\n\n    echo \"OS info: ${osInfo}, ${osRelease}, ${osReleaseVersion}, ${osReleaseVersionNo}, ${osReleaseVersionCodeName}, ${osSystemShell}, ${osSystemPackage}, ${osSystemMdPath}\"\n}\n\n\nvirt_check(){\n\t# if hash ifconfig 2>/dev/null; then\n\t\t# eth=$(ifconfig)\n\t# fi\n\n\tvirtualx=$(dmesg) 2>/dev/null\n\n\n    if  [ \"$(command -v dmidecode)\" ]; then\n\t\tsys_manu=$(dmidecode -s system-manufacturer) 2>/dev/null\n\t\tsys_product=$(dmidecode -s system-product-name) 2>/dev/null\n\t\tsys_ver=$(dmidecode -s system-version) 2>/dev/null\n\telse\n\t\tsys_manu=\"\"\n\t\tsys_product=\"\"\n\t\tsys_ver=\"\"\n\tfi\n\n\tif grep docker /proc/1/cgroup -qa; then\n\t    virtual=\"Docker\"\n\telif grep lxc /proc/1/cgroup -qa; then\n\t\tvirtual=\"Lxc\"\n\telif grep -qa container=lxc /proc/1/environ; then\n\t\tvirtual=\"Lxc\"\n\telif [[ -f /proc/user_beancounters ]]; then\n\t\tvirtual=\"OpenVZ\"\n\telif [[ \"$virtualx\" == *kvm-clock* ]]; then\n\t\tvirtual=\"KVM\"\n\telif [[ \"$cname\" == *KVM* ]]; then\n\t\tvirtual=\"KVM\"\n\telif [[ \"$cname\" == *QEMU* ]]; then\n\t\tvirtual=\"KVM\"\n\telif [[ \"$virtualx\" == *\"VMware Virtual Platform\"* ]]; then\n\t\tvirtual=\"VMware\"\n\telif [[ \"$virtualx\" == *\"Parallels Software International\"* ]]; then\n\t\tvirtual=\"Parallels\"\n\telif [[ \"$virtualx\" == *VirtualBox* ]]; then\n\t\tvirtual=\"VirtualBox\"\n\telif [[ -e /proc/xen ]]; then\n\t\tvirtual=\"Xen\"\n\telif [[ \"$sys_manu\" == *\"Microsoft Corporation\"* ]]; then\n\t\tif [[ \"$sys_product\" == *\"Virtual Machine\"* ]]; then\n\t\t\tif [[ \"$sys_ver\" == *\"7.0\"* || \"$sys_ver\" == *\"Hyper-V\" ]]; then\n\t\t\t\tvirtual=\"Hyper-V\"\n\t\t\telse\n\t\t\t\tvirtual=\"Microsoft Virtual Machine\"\n\t\t\tfi\n\t\tfi\n\telse\n\t\tvirtual=\"Dedicated母鸡\"\n\tfi\n}\n\n\n\n\n\n\nfunction installSoftDownload(){\n\tif [[ \"${osRelease}\" == \"debian\" || \"${osRelease}\" == \"ubuntu\" ]]; then\n\n        PACKAGE_LIST=( \"wget\" \"curl\" \"git\" \"unzip\" \"apt-transport-https\" \"cpu-checker\" \"bc\" \"cron\" )\n\n        # 检查所有软件包是否已安装\n        for package in \"${PACKAGE_LIST[@]}\"; do\n            if ! dpkg -l | grep -qw \"$package\"; then\n                # green \"$package is not installed. ${osSystemPackage} Installing...\"\n                ${osSystemPackage} install -y \"$package\"\n            fi\n        done\n\n\t\tif ! dpkg -l | grep -qw curl; then\n\t\t\t${osSystemPackage} -y install wget curl git\n\n            if [[ \"${osRelease}\" == \"debian\" ]]; then\n                echo \"deb http://deb.debian.org/debian buster-backports main contrib non-free\" > /etc/apt/sources.list.d/buster-backports.list\n                echo \"deb-src http://deb.debian.org/debian buster-backports main contrib non-free\" >> /etc/apt/sources.list.d/buster-backports.list\n                ${sudoCmd} apt update -y\n            fi\n\n\t\tfi\n\n        if ! dpkg -l | grep -qw ca-certificates; then\n\t\t\t${osSystemPackage} -y install ca-certificates dmidecode\n            update-ca-certificates\n\t\tfi\n\n\telif [[ \"${osRelease}\" == \"centos\" ]]; then\n\n        PACKAGE_LIST_Centos=( \"wget\" \"curl\" \"git\" \"unzip\" \"bc\" )\n\n        # 检查所有软件包是否已安装\n        for package in \"${PACKAGE_LIST_Centos[@]}\"; do\n            if ! rpm -qa | grep -qw \"$package\"; then\n                # green \"$package is not installed. ${osSystemPackage} Installing...\"\n                ${osSystemPackage} install -y \"$package\"\n            fi\n        done\n\n        # 处理ca证书\n        if ! rpm -qa | grep -qw ca-certificates; then\n\t\t\t${osSystemPackage} -y install ca-certificates dmidecode\n            update-ca-trust force-enable\n\t\tfi\n\tfi\n\n}\n\n\n\n\n\n\n\n\n\n\n# 更新本脚本\nfunction upgradeScript(){\n    wget -Nq --no-check-certificate -O ./install_kernel.sh \"https://raw.githubusercontent.com/jinwyp/one_click_script/master/install_kernel.sh\"\n    green \" Script upgrade successful. 本脚本升级成功! \"\n    chmod +x ./install_kernel.sh\n    sleep 2s\n    exec \"./install_kernel.sh\"\n}\n\n\n\n\n\n\n\n\n\nfunction rebootSystem(){\n\n    if [ -z $1 ]; then\n\n        red \"请检查上面的信息 是否有新内核版本, 老内核版本 ${osKernelVersionBackup} 是否已经卸载!\"\n        echo\n        red \"请注意检查 是否把新内核也误删卸载了, 无新内核 ${linuxKernelToInstallVersionFull} 不要重启, 可重新安装内核后再重启! \"\n\n    fi\n\n    echo\n\tread -p \"是否立即重启? 请输入[Y/n]?\" isRebootInput\n\tisRebootInput=${isRebootInput:-Y}\n\n\tif [[ $isRebootInput == [Yy] ]]; then\n\t\t${sudoCmd} reboot\n\telse\n\t\texit\n\tfi\n}\n\nfunction promptContinueOpeartion(){\n\tread -p \"是否继续操作? 直接回车默认继续操作, 请输入[Y/n]:\" isContinueInput\n\tisContinueInput=${isContinueInput:-Y}\n\n\tif [[ $isContinueInput == [Yy] ]]; then\n\t\techo \"\"\n\telse\n\t\texit 1\n\tfi\n}\n\n# https://stackoverflow.com/questions/4023830/how-to-compare-two-strings-in-dot-separated-version-format-in-bash\nversionCompare () {\n    if [[ $1 == $2 ]]; then\n        return 0\n    fi\n    local IFS=.\n    local i ver1=($1) ver2=($2)\n    # fill empty fields in ver1 with zeros\n    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))\n    do\n        ver1[i]=0\n    done\n    for ((i=0; i<${#ver1[@]}; i++))\n    do\n        if [[ -z ${ver2[i]} ]]\n        then\n            # fill empty fields in ver2 with zeros\n            ver2[i]=0\n        fi\n        if ((10#${ver1[i]} > 10#${ver2[i]}))\n        then\n            return 1\n        fi\n        if ((10#${ver1[i]} < 10#${ver2[i]}))\n        then\n            return 2\n        fi\n    done\n    return 0\n}\n\nversionCompareWithOp () {\n    versionCompare $1 $2\n    case $? in\n        0) op='=';;\n        1) op='>';;\n        2) op='<';;\n    esac\n    if [[ $op != $3 ]]; then\n        # echo \"Version Number Compare Fail: Expected '$3', Actual '$op', Arg1 '$1', Arg2 '$2'\"\n        return 1\n    else\n        # echo \"Version Number Compare Pass: '$1 $op $2'\"\n        return 0\n    fi\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nosKernelVersionFull=$(uname -r)\nosKernelVersionBackup=$(uname -r | awk -F \"-\" '{print $1}')\nosKernelVersionShort=$(uname -r | cut -d- -f1 | awk -F \".\" '{print $1\".\"$2}')\nosKernelBBRStatus=\"\"\nsystemBBRRunningStatus=\"no\"\nsystemBBRRunningStatusText=\"\"\n\nfunction listAvailableLinuxKernel(){\n    echo\n    green \" ==================================================\"\n    green \" 状态显示--当前可以被安装的 Linux 内核: \"\n    if [[ \"${osRelease}\" == \"centos\" ]]; then\n\t\t${sudoCmd} yum --disablerepo=\"*\" --enablerepo=\"elrepo-kernel\" list available | grep kernel\n\telse\n        if [ -z $1 ]; then\n            ${sudoCmd} apt-cache search linux-image\n        else\n            ${sudoCmd} apt-cache search linux-image | grep $1\n        fi\n\tfi\n\n    green \" ==================================================\"\n    echo\n}\n\nfunction listInstalledLinuxKernel(){\n    echo\n    green \" ==================================================\"\n    green \" 状态显示--当前已安装的 Linux 内核: \"\n    echo\n\n\tif [[ \"${osRelease}\" == \"debian\" || \"${osRelease}\" == \"ubuntu\" ]]; then\n        dpkg --get-selections | grep linux-\n\t\t# dpkg -l | grep linux-\n        # dpkg-query -l | grep linux-\n        # apt list --installed | grep linux-\n        echo\n        red \" 如安装内核遇到kernel linux-image linux-headers 版本不一致问题, 请手动卸载已安装的kernel\"\n        red \" 卸载内核命令1 apt remove -y --purge linux-xxx名称\"\n        red \" 卸载内核命令2 apt autoremove -y --purge linux-xxx名称\"\n\n\telif [[ \"${osRelease}\" == \"centos\" ]]; then\n        ${sudoCmd} rpm -qa | grep kernel\n        echo\n        red \" 如安装内核遇到kernel kernel-headers kernel-devel版本不一致问题, 请手动卸载已安装的kernel\"\n        red \" 卸载内核命令 rpm --nodeps -e kernel-xxx名称\"\n\tfi\n    green \" ==================================================\"\n    echo\n}\n\nfunction showLinuxKernelInfoNoDisplay(){\n\n    isKernelSupportBBRVersion=\"4.9\"\n\n    if versionCompareWithOp \"${isKernelSupportBBRVersion}\" \"${osKernelVersionShort}\" \">\"; then\n        echo\n    else\n        osKernelBBRStatus=\"BBR\"\n    fi\n\n    if [[ ${osKernelVersionFull} == *\"bbrplus\"* ]]; then\n        osKernelBBRStatus=\"BBR Plus\"\n    elif [[ ${osKernelVersionFull} == *\"xanmod\"* ]]; then\n        osKernelBBRStatus=\"BBR 和 BBR2\"\n    fi\n\n\tnet_congestion_control=`cat /proc/sys/net/ipv4/tcp_congestion_control | awk '{print $1}'`\n\tnet_qdisc=`cat /proc/sys/net/core/default_qdisc | awk '{print $1}'`\n\tnet_ecn=`cat /proc/sys/net/ipv4/tcp_ecn | awk '{print $1}'`\n\n    if [[ ${osKernelVersionBackup} == *\"4.14.129\"* ]]; then\n        # isBBREnabled=$(grep \"net.ipv4.tcp_congestion_control\" /etc/sysctl.conf | awk -F \"=\" '{print $2}')\n        # isBBREnabled=$(sysctl net.ipv4.tcp_available_congestion_control | awk -F \"=\" '{print $2}')\n\n        isBBRTcpEnabled=$(lsmod | grep \"bbr\" | awk '{print $1}')\n        isBBRPlusTcpEnabled=$(lsmod | grep \"bbrplus\" | awk '{print $1}')\n        isBBR2TcpEnabled=$(lsmod | grep \"bbr2\" | awk '{print $1}')\n    else\n        isBBRTcpEnabled=$(sysctl net.ipv4.tcp_congestion_control | grep \"bbr\" | awk -F \"=\" '{print $2}' | awk '{$1=$1;print}')\n        isBBRPlusTcpEnabled=$(sysctl net.ipv4.tcp_congestion_control | grep \"bbrplus\" | awk -F \"=\" '{print $2}' | awk '{$1=$1;print}')\n        isBBR2TcpEnabled=$(sysctl net.ipv4.tcp_congestion_control | grep \"bbr2\" | awk -F \"=\" '{print $2}' | awk '{$1=$1;print}')\n    fi\n\n    if [[ ${net_ecn} == \"1\" ]]; then\n        systemECNStatusText=\"已开启\"\n    elif [[ ${net_ecn} == \"0\" ]]; then\n        systemECNStatusText=\"已关闭\"\n    elif [[ ${net_ecn} == \"2\" ]]; then\n        systemECNStatusText=\"只对入站请求开启(默认值)\"\n    else\n        systemECNStatusText=\"\"\n    fi\n\n    if [[ ${net_congestion_control} == \"bbr\" ]]; then\n\n        if [[ ${isBBRTcpEnabled} == *\"bbr\"* ]]; then\n            systemBBRRunningStatus=\"bbr\"\n            systemBBRRunningStatusText=\"BBR 已启动成功\"\n        else\n            systemBBRRunningStatusText=\"BBR 启动失败\"\n        fi\n\n    elif [[ ${net_congestion_control} == \"bbrplus\" ]]; then\n\n        if [[ ${isBBRPlusTcpEnabled} == *\"bbrplus\"* ]]; then\n            systemBBRRunningStatus=\"bbrplus\"\n            systemBBRRunningStatusText=\"BBR Plus 已启动成功\"\n        else\n            systemBBRRunningStatusText=\"BBR Plus 启动失败\"\n        fi\n\n    elif [[ ${net_congestion_control} == \"bbr2\" ]]; then\n\n        if [[ ${isBBR2TcpEnabled} == *\"bbr2\"* ]]; then\n            systemBBRRunningStatus=\"bbr2\"\n            systemBBRRunningStatusText=\"BBR2 已启动成功\"\n        else\n            systemBBRRunningStatusText=\"BBR2 启动失败\"\n        fi\n\n    else\n        systemBBRRunningStatusText=\"未启动加速模块\"\n    fi\n\n}\n\nfunction showLinuxKernelInfo(){\n\n    # https://stackoverflow.com/questions/8654051/how-to-compare-two-floating-point-numbers-in-bash\n    # https://stackoverflow.com/questions/229551/how-to-check-if-a-string-contains-a-substring-in-bash\n\n    isKernelSupportBBRVersion=\"4.9\"\n\n    green \" ==================================================\"\n    green \" 状态显示--当前Linux 内核版本: ${osKernelVersionShort} , $(uname -r) \"\n\n    if versionCompareWithOp \"${isKernelSupportBBRVersion}\" \"${osKernelVersionShort}\" \">\"; then\n        green \"           当前系统内核低于4.9, 不支持开启 BBR \"\n    else\n        green \"           当前系统内核高于4.9, 支持开启 BBR, ${systemBBRRunningStatusText}\"\n    fi\n\n    if [[ ${osKernelVersionFull} == *\"xanmod\"* ]]; then\n        green \"           当前系统内核已支持开启 BBR2, ${systemBBRRunningStatusText}\"\n    else\n        green \"           当前系统内核不支持开启 BBR2\"\n    fi\n\n    if [[ ${osKernelVersionFull} == *\"bbrplus\"* ]]; then\n        green \"           当前系统内核已支持开启 BBR Plus, ${systemBBRRunningStatusText}\"\n    else\n        green \"           当前系统内核不支持开启 BBR Plus\"\n    fi\n    # sysctl net.ipv4.tcp_available_congestion_control 返回值 net.ipv4.tcp_available_congestion_control = bbr cubic reno 或 reno cubic bbr\n    # sysctl net.ipv4.tcp_congestion_control 返回值 net.ipv4.tcp_congestion_control = bbr\n    # sysctl net.core.default_qdisc 返回值 net.core.default_qdisc = fq\n    # lsmod | grep bbr 返回值 tcp_bbr     20480  3  或 tcp_bbr                20480  1   注意：并不是所有的 VPS 都会有此返回值，若没有也属正常。\n\n    # isFlagBbr=$(sysctl net.ipv4.tcp_congestion_control | awk '{print $3}')\n\n    # if [[ (${isFlagBbr} == *\"bbr\"*)  &&  (${isFlagBbr} != *\"bbrplus\"*) && (${isFlagBbr} != *\"bbr2\"*) ]]; then\n    #     green \" 状态显示--是否开启BBR: 已开启 \"\n    # else\n    #     green \" 状态显示--是否开启BBR: 未开启 \"\n    # fi\n\n    # if [[ ${isFlagBbr} == *\"bbrplus\"* ]]; then\n    #     green \" 状态显示--是否开启BBR Plus: 已开启 \"\n    # else\n    #     green \" 状态显示--是否开启BBR Plus: 未开启 \"\n    # fi\n\n    # if [[ ${isFlagBbr} == *\"bbr2\"* ]]; then\n    #     green \" 状态显示--是否开启BBR2: 已开启 \"\n    # else\n    #     green \" 状态显示--是否开启BBR2: 未开启 \"\n    # fi\n\n    green \" ==================================================\"\n    echo\n}\n\n\nfunction enableBBRSysctlConfig(){\n    # https://hostloc.com/thread-644985-1-1.html\n    # 优质线路用5.5+cake和原版bbr带宽跑的更足，不过cake的话就算高峰也不会像原版bbr那样跑不动，相比plus能慢些，但是区别不大，\n    # bbr plus的话美西或者一些延迟高的，用起来更好，锐速针对丢包高的有奇效\n    # 带宽大，并且延迟低不丢包的话5.5+cake在我这比较好，延迟高用plus更好，丢包多锐速最好. 一般130ms以下用cake不错，以上的话用plus更好些\n\n    # https://github.com/xanmod/linux/issues/26\n    # 说白了 bbrplus 就是改了点东西，然后那部分修改在 5.1 内核里合并进去了, 5.1 及以上的内核里自带的 bbr 已经包含了所谓的 bbrplus 的修改。\n    # PS：bbr 是一直在修改的，比如说 5.0 内核的 bbr，4.15 内核的 bbr 和 4.9 内核的 bbr 其实都是不一样的\n\n    # https://sysctl-explorer.net/net/ipv4/tcp_ecn/\n\n\n    removeBbrSysctlConfig\n    currentBBRText=\"bbr\"\n    currentQueueText=\"fq\"\n    currentECNValue=\"2\"\n    currentECNText=\"\"\n\n    if [ $1 = \"bbrplus\" ]; then\n        currentBBRText=\"bbrplus\"\n\n    else\n        echo\n        echo \" 请选择开启 (1) BBR 还是 (2) BBR2 网络加速 \"\n        red \" 选择 1 BBR 需要内核在 4.9 以上\"\n        red \" 选择 2 BBR2 需要内核为 XanMod \"\n        read -p \"请选择? 直接回车默认选1 BBR, 请输入[1/2]:\" BBRTcpInput\n        BBRTcpInput=${BBRTcpInput:-1}\n        if [[ $BBRTcpInput == [2] ]]; then\n            if [[ ${osKernelVersionFull} == *\"xanmod\"* ]]; then\n                currentBBRText=\"bbr2\"\n\n                echo\n                echo \" 请选择是否开启 ECN, (1) 关闭 (2) 开启 (3) 仅对入站请求开启 \"\n                red \" 注意: 开启 ECN 可能会造成网络设备无法访问\"\n                read -p \"请选择? 直接回车默认选1 关闭ECN, 请输入[1/2]:\" ECNTcpInput\n                ECNTcpInput=${ECNTcpInput:-1}\n                if [[ $ECNTcpInput == [2] ]]; then\n                    currentECNValue=\"1\"\n                    currentECNText=\"+ ECN\"\n                elif [[ $ECNTcpInput == [3] ]]; then\n                    currentECNValue=\"2\"\n                else\n                    currentECNValue=\"0\"\n                fi\n\n            else\n                echo\n                red \" 当前系统内核没有安装 XanMod 内核, 无法开启BBR2, 改为开启BBR\"\n                echo\n                currentBBRText=\"bbr\"\n            fi\n\n        else\n            currentBBRText=\"bbr\"\n        fi\n    fi\n\n    echo\n    echo \" 请选择队列算法 (1) FQ,  (2) FQ-Codel,  (3) FQ-PIE,  (4) CAKE \"\n    red \" 选择 2 FQ-Codel 队列算法 需要内核在 4.13 以上\"\n    red \" 选择 3 FQ-PIE 队列算法 需要内核在 5.6 以上\"\n    red \" 选择 4 CAKE 队列算法 需要内核在 5.5 以上\"\n    read -p \"请选择队列算法? 直接回车默认选1 FQ, 请输入[1/2/3/4]:\" BBRQueueInput\n    BBRQueueInput=${BBRQueueInput:-1}\n\n    if [[ $BBRQueueInput == [2] ]]; then\n        currentQueueText=\"fq_codel\"\n\n    elif [[ $BBRQueueInput == [3] ]]; then\n        currentQueueText=\"fq_pie\"\n\n    elif [[ $BBRQueueInput == [4] ]]; then\n        currentQueueText=\"cake\"\n\n    else\n        currentQueueText=\"fq\"\n    fi\n\n    echo \"net.core.default_qdisc=${currentQueueText}\" >> /etc/sysctl.conf\n\techo \"net.ipv4.tcp_congestion_control=${currentBBRText}\" >> /etc/sysctl.conf\n    echo \"net.ipv4.tcp_ecn=${currentECNValue}\" >> /etc/sysctl.conf\n\n    isSysctlText=$(sysctl -p 2>&1 | grep \"No such file\")\n\n    echo\n    if [[ -z \"$isSysctlText\" ]]; then\n\t\tgreen \" 已成功开启 ${currentBBRText} + ${currentQueueText} ${currentECNText} \"\n\telse\n        green \" 已成功开启 ${currentBBRText} ${currentECNText}\"\n        red \" 但当前内核版本过低, 开启队列算法 ${currentQueueText} 失败! \"\n        red \"请重新运行脚本, 选择'2 开启 BBR 加速'后, 务必再选择 (1)FQ 队列算法 !\"\n    fi\n    echo\n\n\n    read -p \"是否优化系统网络配置? 直接回车默认优化, 请输入[Y/n]:\" isOptimizingSystemInput\n    isOptimizingSystemInput=${isOptimizingSystemInput:-Y}\n\n    if [[ $isOptimizingSystemInput == [Yy] ]]; then\n        addOptimizingSystemConfig \"cancel\"\n    else\n        echo\n        echo \"sysctl -p\"\n        echo\n        sysctl -p\n        echo\n    fi\n\n}\n\n# 卸载 bbr+锐速 配置\nfunction removeBbrSysctlConfig(){\n    sed -i '/net.core.default_qdisc/d' /etc/sysctl.conf\n    sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf\n\n\tsed -i '/net.ipv4.tcp_ecn/d' /etc/sysctl.conf\n\n\tif [[ -e /appex/bin/lotServer.sh ]]; then\n\t\tbash <(wget --no-check-certificate -qO- https://git.io/lotServerInstall.sh) uninstall\n\tfi\n}\n\n\nfunction removeOptimizingSystemConfig(){\n    removeBbrSysctlConfig\n\n    sed -i '/fs.file-max/d' /etc/sysctl.conf\n\tsed -i '/fs.inotify.max_user_instances/d' /etc/sysctl.conf\n\n\tsed -i '/net.ipv4.tcp_syncookies/d' /etc/sysctl.conf\n\tsed -i '/net.ipv4.tcp_fin_timeout/d' /etc/sysctl.conf\n\tsed -i '/net.ipv4.tcp_tw_reuse/d' /etc/sysctl.conf\n\tsed -i '/net.ipv4.ip_local_port_range/d' /etc/sysctl.conf\n    sed -i '/net.ipv4.tcp_max_syn_backlog/d' /etc/sysctl.conf\n\tsed -i '/net.ipv4.tcp_max_tw_buckets/d' /etc/sysctl.conf\n\tsed -i '/net.ipv4.route.gc_timeout/d' /etc/sysctl.conf\n\n\tsed -i '/net.ipv4.tcp_syn_retries/d' /etc/sysctl.conf\n    sed -i '/net.ipv4.tcp_synack_retries/d' /etc/sysctl.conf\n\tsed -i '/net.core.somaxconn/d' /etc/sysctl.conf\n\tsed -i '/net.core.netdev_max_backlog/d' /etc/sysctl.conf\n\tsed -i '/net.ipv4.tcp_timestamps/d' /etc/sysctl.conf\n\tsed -i '/net.ipv4.tcp_max_orphans/d' /etc/sysctl.conf\n\n\t# sed -i '/net.ipv4.ip_forward/d' /etc/sysctl.conf\n\n\n    sed -i '/1000000/d' /etc/security/limits.conf\n    sed -i '/1000000/d' /etc/profile\n\n    echo\n    green \" 已删除当前系统的网络优化配置 \"\n    echo\n}\n\nfunction addOptimizingSystemConfig(){\n\n    # https://ustack.io/2019-11-21-Linux%E5%87%A0%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%86%85%E6%A0%B8%E9%85%8D%E7%BD%AE.html\n    # https://www.cnblogs.com/xkus/p/7463135.html\n\n    # 优化系统配置\n\n    if grep -q \"1000000\" \"/etc/profile\"; then\n        echo\n        green \" 系统网络配置 已经优化过, 不需要再次优化 \"\n        echo\n        sysctl -p\n        echo\n        exit\n    fi\n\n    if [ -z $1 ]; then\n        removeOptimizingSystemConfig\n    fi\n\n\n\n    echo\n    green \" 开始准备 优化系统网络配置 \"\n\n    cat >> /etc/sysctl.conf <<-EOF\n\nfs.file-max = 1000000\nfs.inotify.max_user_instances = 8192\n\nnet.ipv4.tcp_syncookies = 1\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 1024 65000\nnet.ipv4.tcp_max_syn_backlog = 16384\nnet.ipv4.tcp_max_tw_buckets = 6000\nnet.ipv4.route.gc_timeout = 100\n\nnet.ipv4.tcp_syn_retries = 1\nnet.ipv4.tcp_synack_retries = 1\nnet.core.somaxconn = 32768\nnet.core.netdev_max_backlog = 32768\nnet.ipv4.tcp_timestamps = 0\nnet.ipv4.tcp_max_orphans = 32768\n\n# forward ipv4\n#net.ipv4.ip_forward = 1\n\n\nEOF\n\n\n\n    cat >> /etc/security/limits.conf <<-EOF\n*               soft    nofile          1000000\n*               hard    nofile          1000000\nEOF\n\n\n\techo \"ulimit -SHn 1000000\" >> /etc/profile\n    source /etc/profile\n\n\n    echo\n\tsysctl -p\n\n    echo\n    green \" 已完成 系统网络配置的优化 \"\n    echo\n    rebootSystem \"noinfo\"\n\n}\n\n\n\nfunction startIpv4(){\n\n    cat >> /etc/sysctl.conf <<-EOF\nnet.ipv4.tcp_retries2 = 8\nnet.ipv4.tcp_slow_start_after_idle = 0\n\n# forward ipv4\n\nnet.ipv6.conf.all.disable_ipv6 = 0\nnet.ipv6.conf.default.disable_ipv6 = 0\n\nnet.ipv4.ip_forward = 1\nnet.ipv6.conf.all.forwarding = 1\n\nEOF\n\n}\n\n\n\n\nfunction Enable_IPv6_Support() {\n    if [[ $(sysctl -a | grep 'disable_ipv6.*=.*1') || $(cat /etc/sysctl.{conf,d/*} | grep 'disable_ipv6.*=.*1') ]]; then\n        sed -i '/disable_ipv6/d' /etc/sysctl.{conf,d/*}\n        echo 'net.ipv6.conf.all.disable_ipv6 = 0' >/etc/sysctl.d/ipv6.conf\n        sysctl -w net.ipv6.conf.all.disable_ipv6=0\n    fi\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nisInstallFromRepo=\"no\"\nuserHomePath=\"${HOME}/download_linux_kernel\"\nlinuxKernelByUser=\"elrepo\"\nlinuxKernelToBBRType=\"\"\nlinuxKernelToInstallVersion=\"5.15\"\nlinuxKernelToInstallVersionFull=\"\"\n\nelrepo_kernel_name=\"kernel-ml\"\nelrepo_kernel_version=\"5.4.110\"\n\naltarch_kernel_name=\"kernel\"\naltarch_kernel_version=\"5.4.105\"\n\n\n\nfunction downloadFile(){\n\n    tempUrl=$1\n    tempFilename=$(echo \"${tempUrl##*/}\")\n\n    echo \"${userHomePath}/${linuxKernelToInstallVersionFull}/${tempFilename}\"\n    if [ -f \"${userHomePath}/${linuxKernelToInstallVersionFull}/${tempFilename}\" ]; then\n        green \"文件已存在, 不需要下载, 文件原下载地址: $1 \"\n    else\n        green \"文件下载中... Path: $1 \"\n        wget -N --no-check-certificate -P ${userHomePath}/${linuxKernelToInstallVersionFull} $1\n        if [ $? -eq 0 ]; then\n            green \"文件下载成功. ${userHomePath}/${linuxKernelToInstallVersionFull}/${tempFilename}\"\n        else\n            red \"文件下载失败, 请检查网络或者手动下载文件到目录 ${userHomePath}/${linuxKernelToInstallVersionFull} \"\n            promptContinueOpeartion\n        fi\n    fi\n    echo\n}\n\n\nfunction installKernel(){\n    preferIPV4\n\n    if [ \"${linuxKernelToBBRType}\" = \"bbrplus\" ]; then\n        getVersionBBRPlus\n    fi\n\n\tif [[ \"${osRelease}\" == \"debian\" || \"${osRelease}\" == \"ubuntu\" ]]; then\n        installDebianUbuntuKernel\n\n\telif [[ \"${osRelease}\" == \"centos\" ]]; then\n        rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\n\n        if [ \"${linuxKernelToBBRType}\" = \"xanmod\" ]; then\n            red \" xanmod 内核不支持 Centos 系统安装\"\n            exit 255\n        fi\n\n        if [ \"${isInstallFromRepo}\" = \"yes\" ]; then\n            getLatestCentosKernelVersion\n            installCentosKernelFromRepo\n        else\n            if [ \"${linuxKernelToBBRType}\" = \"bbrplus\" ]; then\n                echo\n            else\n                getLatestCentosKernelVersion \"manual\"\n            fi\n\n            installCentosKernelManual\n        fi\n\tfi\n}\n\n\nfunction getVersionBBRPlus(){\n    if [ \"${linuxKernelToInstallVersion}\" = \"6.7\" ]; then\n        bbrplusKernelVersion=$(getGithubLatestReleaseVersionBBRPlus \"UJX6N/bbrplus-6.x_stable\")\n\n    elif [ \"${linuxKernelToInstallVersion}\" = \"6.6\" ]; then\n        bbrplusKernelVersion=$(getGithubLatestReleaseVersionBBRPlus \"UJX6N/bbrplus-6.6\")\n\n    elif [ \"${linuxKernelToInstallVersion}\" = \"6.1\" ]; then\n        bbrplusKernelVersion=$(getGithubLatestReleaseVersionBBRPlus \"UJX6N/bbrplus-6.1\")\n\n    elif [ \"${linuxKernelToInstallVersion}\" = \"5.19\" ]; then\n        bbrplusKernelVersion=$(getGithubLatestReleaseVersionBBRPlus \"UJX6N/bbrplus-5.19\")\n\n    elif [ \"${linuxKernelToInstallVersion}\" = \"5.15\" ]; then\n        bbrplusKernelVersion=$(getGithubLatestReleaseVersionBBRPlus \"UJX6N/bbrplus-5.15\")\n\n    elif [ \"${linuxKernelToInstallVersion}\" = \"5.10\" ]; then\n        bbrplusKernelVersion=$(getGithubLatestReleaseVersionBBRPlus \"UJX6N/bbrplus-5.10\")\n\n    elif [ \"${linuxKernelToInstallVersion}\" = \"5.4\" ]; then\n        bbrplusKernelVersion=$(getGithubLatestReleaseVersionBBRPlus \"UJX6N/bbrplus-5.4\")\n\n    elif [ \"${linuxKernelToInstallVersion}\" = \"4.19\" ]; then\n        bbrplusKernelVersion=$(getGithubLatestReleaseVersionBBRPlus \"UJX6N/bbrplus-4.19\")\n\n    elif [ \"${linuxKernelToInstallVersion}\" = \"4.14\" ]; then\n        bbrplusKernelVersion=$(getGithubLatestReleaseVersionBBRPlus \"UJX6N/bbrplus\")\n\n    elif [ \"${linuxKernelToInstallVersion}\" = \"4.9\" ]; then\n        bbrplusKernelVersion=$(getGithubLatestReleaseVersionBBRPlus \"UJX6N/bbrplus-4.9\")\n    fi\n    echo\n    green \"UJX6N 编译的 Linux bbrplus 内核版本号为 ${bbrplusKernelVersion}\"\n    echo\n\n}\n\nfunction getGithubLatestReleaseVersionBBRPlus(){\n    wget --no-check-certificate -qO- https://api.github.com/repos/$1/tags | grep 'name' | cut -d\\\" -f4 | head -1 | cut -d- -f1\n    # wget --no-check-certificate -qO- https://api.github.com/repos/UJX6N/bbrplus-5.14/tags | grep 'name' | cut -d\\\" -f4 | head -1 | cut -d- -f1\n}\n\n\nfunction getLatestCentosKernelVersion(){\n\n    # https://stackoverflow.com/questions/4988155/is-there-a-bash-command-that-can-tell-the-size-of-a-shell-variable\n\n    elrepo_kernel_version_lt_array=($(wget -qO- https://elrepo.org/linux/kernel/el8/x86_64/RPMS | awk -F'\\\"kernel-lt-' '/>kernel-lt-[4-9]./{print $2}' | cut -d- -f1 | sort -V))\n\n    # echo ${elrepo_kernel_version_lt_array[@]}\n\n    echo\n    if [ ${#elrepo_kernel_version_lt_array[@]} -eq 0 ]; then\n        red \" 无法获取到 Centos elrepo 源的最新的Linux 内核 kernel-lt 版本号 \"\n    else\n        # echo ${elrepo_kernel_version_lt_array[${#elrepo_kernel_version_lt_array[@]} - 1]}\n        elrepo_kernel_version_lt=${elrepo_kernel_version_lt_array[${#elrepo_kernel_version_lt_array[@]} - 1]}\n        green \"Centos elrepo 源的最新的Linux 内核 kernel-lt 版本号为 ${elrepo_kernel_version_lt}\"\n    fi\n\n    if [ -z $1 ]; then\n        elrepo_kernel_version_ml_array=($(wget -qO- https://elrepo.org/linux/kernel/el8/x86_64/RPMS | awk -F'>kernel-ml-' '/>kernel-ml-[4-9]./{print $2}' | cut -d- -f1 | sort -V))\n\n        if [ ${#elrepo_kernel_version_ml_array[@]} -eq 0 ]; then\n            red \" 无法获取到 Centos elrepo 源的最新的Linux 内核 kernel-ml 版本号 \"\n        else\n            elrepo_kernel_version_ml=${elrepo_kernel_version_ml_array[-1]}\n            green \"Centos elrepo 源的最新的Linux 内核 kernel-ml 版本号为 ${elrepo_kernel_version_ml}\"\n        fi\n    else\n        elrepo_kernel_version_ml_teddysun_ftp_array=($(wget --no-check-certificate -qO- https://fr1.teddyvps.com/kernel/el8 | awk -F'>kernel-ml-' '/>kernel-ml-[4-9]./{print $2}' | cut -d- -f1 | sort -V))\n        elrepo_kernel_version_ml_teddysun_ftp_array_lts=($(wget --no-check-certificate -qO- https://fr1.teddyvps.com/kernel/el8 | awk -F'>kernel-ml-' '/>kernel-ml-[4-9]./{print $2}'  | grep -v \"elrepo\" | cut -d- -f1 | sort -V))\n\n        if [ ${#elrepo_kernel_version_ml_teddysun_ftp_array_lts[@]} -eq 0 ]; then\n            red \" 无法获取到由 Teddysun 编译的 Centos 最新的Linux 5.10 内核 kernel-ml 版本号 \"\n        else\n            elrepo_kernel_version_ml=${elrepo_kernel_version_ml_teddysun_ftp_array[-1]}\n            elrepo_kernel_version_ml_Teddysun_number_temp=$(echo ${elrepo_kernel_version_ml} | grep -oe \"\\.[0-9]*\\.\" | grep -oe \"[0-9]*\" )\n            elrepo_kernel_version_ml_Teddysun_number_temp_first=${elrepo_kernel_version_ml:0:1}\n\n            if [[ ${elrepo_kernel_version_ml_Teddysun_number_temp_first} == \"5\" ]]; then\n                elrepo_kernel_version_ml_Teddysun_latest_version_middle=\"19\"\n                elrepo_kernel_version_ml_Teddysun_latest_version=\"5.${elrepo_kernel_version_ml_Teddysun_latest_version_middle}\"\n            else\n                elrepo_kernel_version_ml_Teddysun_latest_version_middle=$((elrepo_kernel_version_ml_Teddysun_number_temp-1))\n                elrepo_kernel_version_ml_Teddysun_latest_version=\"6.${elrepo_kernel_version_ml_Teddysun_latest_version_middle}\"\n            fi\n\n\n\n\n            # https://stackoverflow.com/questions/229551/how-to-check-if-a-string-contains-a-substring-in-bash\n            for ver in \"${elrepo_kernel_version_ml_teddysun_ftp_array_lts[@]}\"; do\n\n                if [[ ${ver} == *\"5.10.222\"* ]]; then\n                    # echo \"符合所选版本的Linux 5.10 内核版本: ${ver}\"\n                    elrepo_kernel_version_ml_Teddysun510=${ver}\n                fi\n\n                if [[ ${ver} == *\"5.15.163\"* ]]; then\n                    # echo \"符合所选版本的Linux 5.15 内核版本: ${ver}\"\n                    elrepo_kernel_version_ml_Teddysun515=${ver}\n                fi\n\n                if [[ ${ver} == *\"6.1.100\"* ]]; then\n                    # echo \"符合所选版本的Linux 6.1 内核版本: ${ver}\"\n                    elrepo_kernel_version_ml_Teddysun61=${ver}\n                fi\n\n                if [[ ${ver} == *\"6.6.41\"* ]]; then\n                    # echo \"符合所选版本的Linux 6.1 内核版本: ${ver}\"\n                    elrepo_kernel_version_ml_Teddysun66=${ver}\n                fi\n\n                if [[ ${ver} == *\"${elrepo_kernel_version_ml_Teddysun_latest_version}\"* ]]; then\n                    # echo \"符合所选版本的Linux 内核版本: ${ver}, ${elrepo_kernel_version_ml_Teddysun_latest_version}\"\n                    elrepo_kernel_version_ml_Teddysun_latest=${ver}\n                fi\n\n            done\n\n            green \"Centos elrepo 源的最新的Linux 内核 kernel-ml 版本号为 ${elrepo_kernel_version_ml}\"\n            green \"由 Teddysun 编译的 Centos 最新的Linux 5.10 LTS 内核 kernel-ml 版本号为 ${elrepo_kernel_version_ml_Teddysun510}\"\n            green \"由 Teddysun 编译的 Centos 最新的Linux 5.15 LTS 内核 kernel-ml 版本号为 ${elrepo_kernel_version_ml_Teddysun515}\"\n            green \"由 Teddysun 编译的 Centos 最新的Linux 6.1 LTS 内核 kernel-ml 版本号为 ${elrepo_kernel_version_ml_Teddysun61}\"\n            green \"由 Teddysun 编译的 Centos 最新的Linux 6.6 LTS 内核 kernel-ml 版本号为 ${elrepo_kernel_version_ml_Teddysun66}\"\n            green \"由 Teddysun 编译的 Centos 最新的Linux 6.xx 内核 kernel-ml 版本号为 ${elrepo_kernel_version_ml_Teddysun_latest}\"\n\n        fi\n    fi\n    echo\n}\n\n\nfunction installCentosKernelFromRepo(){\n\n    green \" ==================================================\"\n    green \"    开始通过 elrepo 源安装 linux 内核, 不支持Centos6 \"\n    green \" ==================================================\"\n\n    if [ -n \"${osReleaseVersionNoShort}\" ]; then\n\n        if [ \"${linuxKernelToInstallVersion}\" = \"5.4\" ]; then\n            elrepo_kernel_name=\"kernel-lt\"\n            elrepo_kernel_version=${elrepo_kernel_version_lt}\n\n        else\n            elrepo_kernel_name=\"kernel-ml\"\n            elrepo_kernel_version=${elrepo_kernel_version_ml}\n        fi\n\n        if [ \"${osKernelVersionBackup}\" = \"${elrepo_kernel_version}\" ]; then\n            red \"当前系统内核版本已经是 ${osKernelVersionBackup} 无需安装! \"\n            promptContinueOpeartion\n        fi\n\n        linuxKernelToInstallVersionFull=${elrepo_kernel_version}\n\n        if [ \"${osReleaseVersionNoShort}\" -eq 7 ]; then\n            # https://computingforgeeks.com/install-linux-kernel-5-on-centos-7/\n\n            # https://elrepo.org/linux/kernel/\n            # https://elrepo.org/linux/kernel/el7/x86_64/RPMS/\n\n            ${sudoCmd} yum install -y yum-plugin-fastestmirror\n            ${sudoCmd} yum install -y https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm\n\n        elif [ \"${osReleaseVersionNoShort}\" -eq 8 ]; then\n            # https://elrepo.org/linux/kernel/el8/x86_64/RPMS/\n\n            ${sudoCmd} yum install -y yum-plugin-fastestmirror\n            ${sudoCmd} yum install -y https://www.elrepo.org/elrepo-release-8.el8.elrepo.noarch.rpm\n\n        elif [ \"${osReleaseVersionNoShort}\" -eq 9 ]; then\n            # https://elrepo.org/linux/kernel/el8/x86_64/RPMS/\n\n            ${sudoCmd} yum install -y yum-plugin-fastestmirror\n            ${sudoCmd} yum install -y https://www.elrepo.org/elrepo-release-9.el9.elrepo.noarch.rpm\n\n        else\n            green \" ==================================================\"\n            red \"    不支持 Centos 7, 8, 9 以外的其他版本 安装 linux 内核\"\n            green \" ==================================================\"\n            exit 255\n        fi\n\n        removeCentosKernelMulti\n        listAvailableLinuxKernel\n        echo\n        green \" ==================================================\"\n        green \" 开始安装 linux 内核版本: ${linuxKernelToInstallVersionFull}\"\n        echo\n        ${sudoCmd} yum -y --enablerepo=elrepo-kernel install ${elrepo_kernel_name}\n        ${sudoCmd} yum -y --enablerepo=elrepo-kernel install ${elrepo_kernel_name}-{devel,headers,tools,tools-libs}\n\n        green \" ==================================================\"\n        green \"    安装 linux 内核 ${linuxKernelToInstallVersionFull} 成功! \"\n        red \"    请根据以下信息 检查新内核是否安装成功，无新内核不要重启! \"\n        green \" ==================================================\"\n        echo\n\n        showLinuxKernelInfo\n        listInstalledLinuxKernel\n        removeCentosKernelMulti \"kernel\"\n        listInstalledLinuxKernel\n        rebootSystem\n    fi\n}\n\n\n\n\nfunction installCentosKernelManual(){\n\n    green \" ==================================================\"\n    green \"    开始手动安装 linux 内核, 不支持Centos6 \"\n    green \" ==================================================\"\n    echo\n\n    yum install -y linux-firmware\n\n    mkdir -p ${userHomePath}\n    cd ${userHomePath}\n\n    kernelVersionFirstletter=${linuxKernelToInstallVersion:0:1}\n\n    echo\n    if [ \"${linuxKernelToBBRType}\" = \"bbrplus\" ]; then\n        linuxKernelByUser=\"UJX6N\"\n        if [ \"${linuxKernelToInstallVersion}\" = \"4.14.129\" ]; then\n            linuxKernelByUser=\"cx9208\"\n        fi\n        green \" 准备从 ${linuxKernelByUser} github 网站下载 bbrplus ${linuxKernelToInstallVersion} 的linux内核并安装 \"\n    else\n        linuxKernelByUserTeddysun=\"\"\n\n        if [[ \"${kernelVersionFirstletter}\" == \"5\" || \"${kernelVersionFirstletter}\" == \"6\" ]]; then\n            linuxKernelByUser=\"elrepo\"\n\n            if [[ \"${linuxKernelToInstallVersion}\" == \"5.10\" || \"${linuxKernelToInstallVersion}\" == \"5.15\" || \"${linuxKernelToInstallVersion}\" == \"5.19\" ]]; then\n                linuxKernelByUserTeddysun=\"Teddysun\"\n            fi\n        else\n            linuxKernelByUser=\"altarch\"\n        fi\n\n        if [ \"${linuxKernelByUserTeddysun}\" = \"Teddysun\" ]; then\n            green \" 准备从 Teddysun 网站下载 linux ${linuxKernelByUser} 内核并安装 \"\n        else\n            green \" 准备从 ${linuxKernelByUser} 网站下载linux内核并安装 \"\n        fi\n\n    fi\n    echo\n\n    if [ \"${linuxKernelByUser}\" = \"elrepo\" ]; then\n        # elrepo\n\n        if [ \"${linuxKernelToInstallVersion}\" = \"5.4\" ]; then\n            elrepo_kernel_name=\"kernel-lt\"\n            elrepo_kernel_version=${elrepo_kernel_version_lt}\n            elrepo_kernel_filename=\"elrepo.\"\n            ELREPODownloadUrl=\"https://elrepo.org/linux/kernel/el${osReleaseVersionNoShort}/x86_64/RPMS\"\n\n            # https://elrepo.org/linux/kernel/el7/x86_64/RPMS/\n            # https://elrepo.org/linux/kernel/el7/x86_64/RPMS/kernel-lt-5.4.105-1.el7.elrepo.x86_64.rpm\n            # https://elrepo.org/linux/kernel/el7/x86_64/RPMS/kernel-lt-tools-5.4.109-1.el7.elrepo.x86_64.rpm\n            # https://elrepo.org/linux/kernel/el7/x86_64/RPMS/kernel-lt-tools-libs-5.4.109-1.el7.elrepo.x86_64.rpm\n\n        elif [ \"${linuxKernelToInstallVersion}\" = \"5.10\" ]; then\n            elrepo_kernel_name=\"kernel-ml\"\n            elrepo_kernel_version=${elrepo_kernel_version_ml_Teddysun510}\n            elrepo_kernel_filename=\"\"\n            ELREPODownloadUrl=\"https://dl.lamp.sh/kernel/el${osReleaseVersionNoShort}\"\n\n            # https://dl.lamp.sh/kernel/el7/kernel-ml-5.10.37-1.el7.x86_64.rpm\n            # https://dl.lamp.sh/kernel/el8/kernel-ml-5.10.27-1.el8.x86_64.rpm\n\n        elif [ \"${linuxKernelToInstallVersion}\" = \"5.15\" ]; then\n            elrepo_kernel_name=\"kernel-ml\"\n            elrepo_kernel_version=${elrepo_kernel_version_ml_Teddysun515}\n            elrepo_kernel_filename=\"\"\n            ELREPODownloadUrl=\"https://dl.lamp.sh/kernel/el${osReleaseVersionNoShort}\"\n\n        elif [ \"${linuxKernelToInstallVersion}\" = \"6.1\" ]; then\n            elrepo_kernel_name=\"kernel-ml\"\n            elrepo_kernel_version=${elrepo_kernel_version_ml_Teddysun61}\n            elrepo_kernel_filename=\"\"\n            ELREPODownloadUrl=\"https://dl.lamp.sh/kernel/el${osReleaseVersionNoShort}\"\n\n        elif [ \"${linuxKernelToInstallVersion}\" = \"6.6\" ]; then\n            elrepo_kernel_name=\"kernel-ml\"\n            elrepo_kernel_version=${elrepo_kernel_version_ml_Teddysun66}\n            elrepo_kernel_filename=\"\"\n            ELREPODownloadUrl=\"https://dl.lamp.sh/kernel/el${osReleaseVersionNoShort}\"\n\n        elif [ \"${linuxKernelToInstallVersion}\" = \"${elrepo_kernel_version_ml_Teddysun_latest_version}\" ]; then\n            elrepo_kernel_name=\"kernel-ml\"\n            elrepo_kernel_version=${elrepo_kernel_version_ml_Teddysun_latest}\n            elrepo_kernel_filename=\"\"\n            ELREPODownloadUrl=\"https://fr1.teddyvps.com/kernel/el${osReleaseVersionNoShort}\"\n\n            # https://fr1.teddyvps.com/kernel/el7/kernel-ml-5.12.14-1.el7.x86_64.rpm\n\n        else\n            elrepo_kernel_name=\"kernel-ml\"\n            elrepo_kernel_version=${elrepo_kernel_version_ml}\n            elrepo_kernel_filename=\"elrepo.\"\n            ELREPODownloadUrl=\"https://fr1.teddyvps.com/kernel/el${osReleaseVersionNoShort}\"\n\n            # https://fr1.teddyvps.com/kernel/el7/kernel-ml-5.13.0-1.el7.elrepo.x86_64.rpm\n        fi\n\n        linuxKernelToInstallVersionFull=${elrepo_kernel_version}\n\n        mkdir -p ${userHomePath}/${linuxKernelToInstallVersionFull}\n        cd ${userHomePath}/${linuxKernelToInstallVersionFull}\n\n        echo\n        echo \"+++++++++++ elrepo_kernel_version ${elrepo_kernel_version}\"\n        echo\n\n        if [ \"${osReleaseVersionNoShort}\" -eq 7 ]; then\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-${elrepo_kernel_version}-1.el7.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-devel-${elrepo_kernel_version}-1.el7.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-headers-${elrepo_kernel_version}-1.el7.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-tools-${elrepo_kernel_version}-1.el7.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-tools-libs-${elrepo_kernel_version}-1.el7.${elrepo_kernel_filename}x86_64.rpm\n\n        elif [ \"${osReleaseVersionNoShort}\" -eq 8 ]; then\n\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-${elrepo_kernel_version}-1.el8.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-devel-${elrepo_kernel_version}-1.el8.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-headers-${elrepo_kernel_version}-1.el8.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-core-${elrepo_kernel_version}-1.el8.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-modules-${elrepo_kernel_version}-1.el8.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-tools-${elrepo_kernel_version}-1.el8.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-tools-libs-${elrepo_kernel_version}-1.el8.${elrepo_kernel_filename}x86_64.rpm\n\n        elif [ \"${osReleaseVersionNoShort}\" -eq 9 ]; then\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-${elrepo_kernel_version}-1.el9.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-devel-${elrepo_kernel_version}-1.el9.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-headers-${elrepo_kernel_version}-1.el9.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-core-${elrepo_kernel_version}-1.el9.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-modules-${elrepo_kernel_version}-1.el9.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-modules-extra-${elrepo_kernel_version}-1.el9.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-tools-${elrepo_kernel_version}-1.el9.${elrepo_kernel_filename}x86_64.rpm\n            downloadFile ${ELREPODownloadUrl}/${elrepo_kernel_name}-tools-libs-${elrepo_kernel_version}-1.el9.${elrepo_kernel_filename}x86_64.rpm\n\n            # https://fr1.teddyvps.com/kernel/el9/kernel-ml-6.1.0-1.el9.elrepo.x86_64.rpm\n            # https://fr1.teddyvps.com/kernel/el9/kernel-ml-modules-extra-6.1.0-1.el9.elrepo.x86_64.rpm\n            # https://fr1.teddyvps.com/kernel/el9/kernel-ml-tools-libs-devel-6.1.0-1.el9.elrepo.x86_64.rpm\n        fi\n\n\n        removeCentosKernelMulti\n        echo\n        green \" ==================================================\"\n        green \" 开始安装 linux 内核版本: ${linuxKernelToInstallVersionFull}\"\n        echo\n\n        if [ \"${osReleaseVersionNoShort}\" -eq 8 ]; then\n            rpm -ivh --force --nodeps ${elrepo_kernel_name}-core-${elrepo_kernel_version}-*.rpm\n        fi\n\n        rpm -ivh --force --nodeps ${elrepo_kernel_name}-${elrepo_kernel_version}-*.rpm\n        rpm -ivh --force --nodeps ${elrepo_kernel_name}-*.rpm\n\n\n    elif [ \"${linuxKernelByUser}\" = \"altarch\" ]; then\n        # altarch\n\n        if [ \"${linuxKernelToInstallVersion}\" = \"4.14\" ]; then\n            altarch_kernel_version=\"4.14.119-200\"\n            altarchDownloadUrl=\"https://vault.centos.org/altarch/7.6.1810/kernel/x86_64/Packages\"\n\n            # https://vault.centos.org/altarch/7.6.1810/kernel/x86_64/Packages/kernel-4.14.119-200.el7.x86_64.rpm\n        elif [ \"${linuxKernelToInstallVersion}\" = \"4.19\" ]; then\n            altarch_kernel_version=\"4.19.113-300\"\n            altarchDownloadUrl=\"https://vault.centos.org/altarch/7.8.2003/kernel/x86_64/Packages\"\n\n            # https://vault.centos.org/altarch/7.8.2003/kernel/x86_64/Packages/kernel-4.19.113-300.el7.x86_64.rpm\n        else\n            altarch_kernel_version=\"5.4.105\"\n            altarchDownloadUrl=\"http://mirror.centos.org/altarch/7/kernel/x86_64/Packages\"\n\n            # http://mirror.centos.org/altarch/7/kernel/x86_64/Packages/kernel-5.4.96-200.el7.x86_64.rpm\n        fi\n\n        linuxKernelToInstallVersionFull=$(echo ${altarch_kernel_version} | cut -d- -f1)\n\n        mkdir -p ${userHomePath}/${linuxKernelToInstallVersionFull}\n        cd ${userHomePath}/${linuxKernelToInstallVersionFull}\n\n        if [ \"${osReleaseVersionNoShort}\" -eq 7 ]; then\n\n            if [ \"$kernelVersionFirstletter\" = \"5\" ]; then\n                # http://mirror.centos.org/altarch/7/kernel/x86_64/Packages/\n\n                downloadFile ${altarchDownloadUrl}/${altarch_kernel_name}-${altarch_kernel_version}-200.el7.x86_64.rpm\n                downloadFile ${altarchDownloadUrl}/${altarch_kernel_name}-core-${altarch_kernel_version}-200.el7.x86_64.rpm\n                downloadFile ${altarchDownloadUrl}/${altarch_kernel_name}-devel-${altarch_kernel_version}-200.el7.x86_64.rpm\n                downloadFile ${altarchDownloadUrl}/${altarch_kernel_name}-headers-${altarch_kernel_version}-200.el7.x86_64.rpm\n                downloadFile ${altarchDownloadUrl}/${altarch_kernel_name}-modules-${altarch_kernel_version}-200.el7.x86_64.rpm\n                downloadFile ${altarchDownloadUrl}/${altarch_kernel_name}-tools-${altarch_kernel_version}-200.el7.x86_64.rpm\n                downloadFile ${altarchDownloadUrl}/${altarch_kernel_name}-tools-libs-${altarch_kernel_version}-200.el7.x86_64.rpm\n\n            else\n                # https://vault.centos.org/altarch/7.6.1810/kernel/x86_64/Packages/\n                # https://vault.centos.org/altarch/7.6.1810/kernel/x86_64/Packages/kernel-4.14.119-200.el7.x86_64.rpm\n\n                # https://vault.centos.org/altarch/7.8.2003/kernel/x86_64/Packages/\n                # https://vault.centos.org/altarch/7.8.2003/kernel/i386/Packages/kernel-4.19.113-300.el7.i686.rpm\n                # https://vault.centos.org/altarch/7.8.2003/kernel/x86_64/Packages/kernel-4.19.113-300.el7.x86_64.rpm\n                # http://ftp.iij.ad.jp/pub/linux/centos-vault/altarch/7.8.2003/kernel/i386/Packages/kernel-4.19.113-300.el7.i686.rpm\n\n                downloadFile ${altarchDownloadUrl}/${altarch_kernel_name}-${altarch_kernel_version}.el7.x86_64.rpm\n                downloadFile ${altarchDownloadUrl}/${altarch_kernel_name}-core-${altarch_kernel_version}.el7.x86_64.rpm\n                downloadFile ${altarchDownloadUrl}/${altarch_kernel_name}-devel-${altarch_kernel_version}.el7.x86_64.rpm\n                downloadFile ${altarchDownloadUrl}/${altarch_kernel_name}-headers-${altarch_kernel_version}.el7.x86_64.rpm\n                downloadFile ${altarchDownloadUrl}/${altarch_kernel_name}-modules-${altarch_kernel_version}.el7.x86_64.rpm\n                downloadFile ${altarchDownloadUrl}/${altarch_kernel_name}-tools-${altarch_kernel_version}.el7.x86_64.rpm\n                downloadFile ${altarchDownloadUrl}/${altarch_kernel_name}-tools-libs-${altarch_kernel_version}.el7.x86_64.rpm\n\n            fi\n\n        else\n            red \"从 altarch 源没有找到 Centos 8 的 ${linuxKernelToInstallVersion} Kernel \"\n            exit 255\n        fi\n\n        removeCentosKernelMulti\n        echo\n        green \" ==================================================\"\n        green \" 开始安装 linux 内核版本: ${linuxKernelToInstallVersionFull}\"\n        echo\n        rpm -ivh --force --nodeps ${altarch_kernel_name}-core-${altarch_kernel_version}*\n        rpm -ivh --force --nodeps ${altarch_kernel_name}-*\n        # yum install -y kernel-*\n\n\n    elif [ \"${linuxKernelByUser}\" = \"cx9208\" ]; then\n\n        linuxKernelToInstallVersionFull=\"4.14.129-bbrplus\"\n\n        if [ \"${osReleaseVersionNoShort}\" -eq 7 ]; then\n            mkdir -p ${userHomePath}/${linuxKernelToInstallVersionFull}\n            cd ${userHomePath}/${linuxKernelToInstallVersionFull}\n\n            # https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/bbrplus/centos/7/kernel-4.14.129-bbrplus.rpm\n            # https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/bbrplus/centos/7/kernel-headers-4.14.129-bbrplus.rpm\n\n            bbrplusDownloadUrl=\"https://raw.githubusercontent.com/cx9208/Linux-NetSpeed/master/bbrplus/centos/7\"\n\n            downloadFile ${bbrplusDownloadUrl}/kernel-${linuxKernelToInstallVersionFull}.rpm\n            downloadFile ${bbrplusDownloadUrl}/kernel-headers-${linuxKernelToInstallVersionFull}.rpm\n\n            removeCentosKernelMulti\n            echo\n            green \" ==================================================\"\n            green \" 开始安装 linux 内核版本: ${linuxKernelToInstallVersionFull}\"\n            echo\n            rpm -ivh --force --nodeps kernel-${linuxKernelToInstallVersionFull}.rpm\n            rpm -ivh --force --nodeps kernel-headers-${linuxKernelToInstallVersionFull}.rpm\n        else\n            red \"从 cx9208 的 github 网站没有找到 Centos 8 的 ${linuxKernelToInstallVersion} Kernel \"\n            exit 255\n        fi\n\n    elif [ \"${linuxKernelByUser}\" = \"UJX6N\" ]; then\n\n        linuxKernelToInstallVersionFull=\"${bbrplusKernelVersion}-bbrplus\"\n\n        mkdir -p ${userHomePath}/${linuxKernelToInstallVersionFull}\n        cd ${userHomePath}/${linuxKernelToInstallVersionFull}\n\n\n        if [ \"${linuxKernelToInstallVersion}\" = \"6.7\" ]; then\n            bbrplusDownloadUrl=\"https://github.com/UJX6N/bbrplus-6.x_stable/releases/download/${linuxKernelToInstallVersionFull}\"\n\n        elif [ \"${linuxKernelToInstallVersion}\" = \"4.14\" ]; then\n            bbrplusDownloadUrl=\"https://github.com/UJX6N/bbrplus/releases/download/${linuxKernelToInstallVersionFull}\"\n\n        else\n            bbrplusDownloadUrl=\"https://github.com/UJX6N/bbrplus-${linuxKernelToInstallVersion}/releases/download/${linuxKernelToInstallVersionFull}\"\n        fi\n\n\n\n        if [ \"${osReleaseVersionNoShort}\" -eq 7 ]; then\n\n            # https://github.com/UJX6N/bbrplus-5.14/releases/download/5.14.15-bbrplus/CentOS-7_Required_kernel-bbrplus-5.14.15-1.bbrplus.el7.x86_64.rpm\n            # https://github.com/UJX6N/bbrplus-5.15/releases/download/5.15.86-bbrplus/CentOS-7_Required_kernel-5.15.86-bbrplus.el7.x86_64.rpm\n\n            # https://github.com/UJX6N/bbrplus-6.x_stable/releases/download/6.7.4-bbrplus/CentOS-7_Required_kernel-6.7.4-bbrplus.el7.x86_64.rpm\n            # https://github.com/UJX6N/bbrplus-6.1/releases/download/6.1.28-bbrplus/CentOS-7_Required_kernel-6.1.28-bbrplus.el7.x86_64.rpm\n            # https://github.com/UJX6N/bbrplus-5.10/releases/download/5.10.76-bbrplus/CentOS-7_Required_kernel-bbrplus-5.10.76-1.bbrplus.el7.x86_64.rpm\n            # https://github.com/UJX6N/bbrplus-5.10/releases/download/5.10.27-bbrplus/CentOS-7_Optional_kernel-bbrplus-devel-5.10.27-1.bbrplus.el7.x86_64.rpm\n            # https://github.com/UJX6N/bbrplus-5.10/releases/download/5.10.27-bbrplus/CentOS-7_Optional_kernel-bbrplus-headers-5.10.27-1.bbrplus.el7.x86_64.rpm\n\n            if [[ \"${linuxKernelToInstallVersion}\" == \"5.10\" || \"${linuxKernelToInstallVersion}\" == \"5.15\" || \"${linuxKernelToInstallVersion}\" == \"6.1\" || \"${linuxKernelToInstallVersion}\" == \"6.6\" || \"${linuxKernelToInstallVersion}\" == \"6.7\" ]]; then\n                # https://github.com/UJX6N/bbrplus-6.x_stable/releases/download/6.7.4-bbrplus/CentOS-7_Required_kernel-6.7.4-bbrplus.el7.x86_64.rpm\n                # https://github.com/UJX6N/bbrplus-6.x_stable/releases/download/6.7.4-bbrplus/CentOS-7_Optional_kernel-headers-6.7.4-bbrplus.el7.x86_64.rpm\n                # https://github.com/UJX6N/bbrplus-5.10/releases/download/5.10.16-bbrplus/CentOS-7_Required_kernel-5.10.162-bbrplus.el7.x86_64.rpm\n                # https://github.com/UJX6N/bbrplus-5.10/releases/download/5.10.162-bbrplus/CentOS-7_Optional_kernel-headers-5.10.162-bbrplus.el7.x86_64.rpm\n\n                downloadFile ${bbrplusDownloadUrl}/CentOS-7_Required_kernel-${bbrplusKernelVersion}-bbrplus.el7.x86_64.rpm\n                downloadFile ${bbrplusDownloadUrl}/CentOS-7_Optional_kernel-headers-${bbrplusKernelVersion}-bbrplus.el7.x86_64.rpm\n            else\n                # https://github.com/UJX6N/bbrplus-4.9/releases/download/4.9.337-bbrplus/CentOS-7_Optional_kernel-bbrplus-devel-4.9.337-1.bbrplus.el7.x86_64.rpm\n\n                downloadFile ${bbrplusDownloadUrl}/CentOS-7_Required_kernel-bbrplus-${bbrplusKernelVersion}-1.bbrplus.el7.x86_64.rpm\n                downloadFile ${bbrplusDownloadUrl}/CentOS-7_Optional_kernel-bbrplus-devel-${bbrplusKernelVersion}-1.bbrplus.el7.x86_64.rpm\n                downloadFile ${bbrplusDownloadUrl}/CentOS-7_Optional_kernel-bbrplus-headers-${bbrplusKernelVersion}-1.bbrplus.el7.x86_64.rpm\n            fi\n\n\n\n\n            removeCentosKernelMulti\n            echo\n            green \" ==================================================\"\n            green \" 开始安装 linux 内核版本: ${linuxKernelToInstallVersionFull}\"\n            echo\n            rpm -ivh --force --nodeps CentOS-7_Required_kernel-bbrplus-${bbrplusKernelVersion}-1.bbrplus.el7.x86_64.rpm\n            rpm -ivh --force --nodeps *.rpm\n        else\n\n            if [[ \"${kernelVersionFirstletter}\" == \"5\" || \"${kernelVersionFirstletter}\" == \"6\" ]]; then\n                echo\n            else\n                red \"从 UJX6N 的 github 网站没有找到 Centos 8 的 ${linuxKernelToInstallVersion} Kernel \"\n                exit 255\n            fi\n\n            # https://github.com/UJX6N/bbrplus-5.14/releases/download/5.14.18-bbrplus/CentOS-8_Required_kernel-bbrplus-core-5.14.18-1.bbrplus.el8.x86_64.rpm\n            # https://github.com/UJX6N/bbrplus-5.14/releases/download/5.14.18-bbrplus/CentOS-8_Required_kernel-bbrplus-modules-5.14.18-1.bbrplus.el8.x86_64.rpm\n\n\n            # https://github.com/UJX6N/bbrplus-5.14/releases/download/5.14.18-bbrplus/CentOS-8_Optional_kernel-bbrplus-5.14.18-1.bbrplus.el8.x86_64.rpm\n            # https://github.com/UJX6N/bbrplus-5.14/releases/download/5.14.18-bbrplus/CentOS-8_Optional_kernel-bbrplus-devel-5.14.18-1.bbrplus.el8.x86_64.rpm\n            # https://github.com/UJX6N/bbrplus-5.14/releases/download/5.14.18-bbrplus/CentOS-8_Optional_kernel-bbrplus-headers-5.14.18-1.bbrplus.el8.x86_64.rpm\n\n            # https://github.com/UJX6N/bbrplus-5.10/releases/download/5.10.27-bbrplus/CentOS-8_Optional_kernel-bbrplus-modules-5.10.27-1.bbrplus.el8.x86_64.rpm\n            # https://github.com/UJX6N/bbrplus-5.14/releases/download/5.14.18-bbrplus/CentOS-8_Optional_kernel-bbrplus-modules-extra-5.14.18-1.bbrplus.el8.x86_64.rpm\n\n\n            if [[ \"${linuxKernelToInstallVersion}\" == \"5.10\" || \"${linuxKernelToInstallVersion}\" == \"5.15\" || \"${linuxKernelToInstallVersion}\" == \"6.1\" || \"${linuxKernelToInstallVersion}\" == \"6.6\" || \"${linuxKernelToInstallVersion}\" == \"6.7\" ]]; then\n                # https://github.com/UJX6N/bbrplus-6.x_stable/releases/download/6.7.4-bbrplus/CentOS-Stream-8_Required_kernel-6.7.4-bbrplus.el8.x86_64.rpm\n                # https://github.com/UJX6N/bbrplus-6.x_stable/releases/download/6.6.1-bbrplus/CentOS-Stream-8_Required_kernel-6.6.1-bbrplus.el8.x86_64.rpm\n                # https://github.com/UJX6N/bbrplus-6.x_stable/releases/download/6.4.3-bbrplus/CentOS-Stream-8_Required_kernel-6.4.3-bbrplus.el8.x86_64.rpm\n                # https://github.com/UJX6N/bbrplus-6.1/releases/download/6.1.28-bbrplus/CentOS-Stream-8_Required_kernel-6.1.28-bbrplus.el8.x86_64.rpm\n                # https://github.com/UJX6N/bbrplus-5.15/releases/download/5.15.86-bbrplus/CentOS-Stream-8_Required_kernel-5.15.86-bbrplus.el8.x86_64.rpm\n                # https://github.com/UJX6N/bbrplus-5.10/releases/download/5.10.162-bbrplus/CentOS-Stream-8_Optional_kernel-headers-5.10.162-bbrplus.el8.x86_64.rpm\n\n                downloadFile ${bbrplusDownloadUrl}/CentOS-Stream-8_Required_kernel-${bbrplusKernelVersion}-bbrplus.el8.x86_64.rpm\n                downloadFile ${bbrplusDownloadUrl}/CentOS-Stream-8_Optional_kernel-headers-${bbrplusKernelVersion}-bbrplus.el8.x86_64.rpm\n\n            else\n                # https://github.com/UJX6N/bbrplus-5.19/releases/download/5.19.17-bbrplus/CentOS-8_Required_kernel-bbrplus-core-5.19.17-1.bbrplus.el8.x86_64.rpm\n\n\n                downloadFile ${bbrplusDownloadUrl}/CentOS-8_Required_kernel-bbrplus-core-${bbrplusKernelVersion}-1.bbrplus.el8.x86_64.rpm\n                downloadFile ${bbrplusDownloadUrl}/CentOS-8_Required_kernel-bbrplus-modules-${bbrplusKernelVersion}-1.bbrplus.el8.x86_64.rpm\n\n                downloadFile ${bbrplusDownloadUrl}/CentOS-8_Optional_kernel-bbrplus-${bbrplusKernelVersion}-1.bbrplus.el8.x86_64.rpm\n                downloadFile ${bbrplusDownloadUrl}/CentOS-8_Optional_kernel-bbrplus-devel-${bbrplusKernelVersion}-1.bbrplus.el8.x86_64.rpm\n                downloadFile ${bbrplusDownloadUrl}/CentOS-8_Optional_kernel-bbrplus-headers-${bbrplusKernelVersion}-1.bbrplus.el8.x86_64.rpm\n                # downloadFile ${bbrplusDownloadUrl}/CentOS-8_Optional_kernel-bbrplus-modules-${bbrplusKernelVersion}-1.bbrplus.el8.x86_64.rpm\n                downloadFile ${bbrplusDownloadUrl}/CentOS-8_Optional_kernel-bbrplus-modules-extra-${bbrplusKernelVersion}-1.bbrplus.el8.x86_64.rpm\n            fi\n\n\n            removeCentosKernelMulti\n            echo\n            green \" ==================================================\"\n            green \" 开始安装 linux 内核版本: ${linuxKernelToInstallVersionFull}\"\n            echo\n            rpm -ivh --force --nodeps CentOS-8_Required_kernel-bbrplus-core-${bbrplusKernelVersion}-1.bbrplus.el8.x86_64.rpm\n            rpm -ivh --force --nodeps *.rpm\n\n        fi\n\n    fi;\n\n    updateGrubConfig\n\n    green \" ==================================================\"\n    green \"    安装 linux 内核 ${linuxKernelToInstallVersionFull} 成功! \"\n    red \"    请根据以下信息 检查新内核是否安装成功，无新内核不要重启! \"\n    green \" ==================================================\"\n    echo\n\n    showLinuxKernelInfo\n    removeCentosKernelMulti \"kernel\"\n    listInstalledLinuxKernel\n    rebootSystem\n}\n\n\n\nfunction removeCentosKernelMulti(){\n    listInstalledLinuxKernel\n\n    if [ -z $1 ]; then\n        red \" 开始准备删除 kernel-header kernel-devel kernel-tools kernel-tools-libs 内核, 建议删除 \"\n    else\n        red \" 开始准备删除 kernel 内核, 建议删除 \"\n    fi\n\n    red \" 注意: 删除内核有风险, 可能会导致VPS无法启动, 请先做好备份! \"\n    read -p \"是否删除内核? 直接回车默认删除内核, 请输入[Y/n]:\" isContinueDelKernelInput\n\tisContinueDelKernelInput=${isContinueDelKernelInput:-Y}\n\n    echo\n\n\tif [[ $isContinueDelKernelInput == [Yy] ]]; then\n\n        if [ -z $1 ]; then\n            removeCentosKernel \"kernel-devel\"\n            removeCentosKernel \"kernel-header\"\n            removeCentosKernel \"kernel-tools\"\n\n            removeCentosKernel \"kernel-ml-devel\"\n            removeCentosKernel \"kernel-ml-header\"\n            removeCentosKernel \"kernel-ml-tools\"\n\n            removeCentosKernel \"kernel-lt-devel\"\n            removeCentosKernel \"kernel-lt-header\"\n            removeCentosKernel \"kernel-lt-tools\"\n\n            removeCentosKernel \"kernel-bbrplus-devel\"\n            removeCentosKernel \"kernel-bbrplus-headers\"\n            removeCentosKernel \"kernel-bbrplus-modules\"\n        else\n            removeCentosKernel \"kernel\"\n        fi\n\tfi\n    echo\n}\n\nfunction removeCentosKernel(){\n\n    # 嗯嗯，用的yum localinstall kernel-ml-* 后，再指定顺序， 用那个 rpm -ivh 包名不行，提示kernel-headers冲突，\n    # 输入rpm -e --nodeps kernel-headers 提示无法加载到此包，\n\n    # 此时需要指定已安装的完整的 rpm 包名。\n    # rpm -qa | grep kernel\n    # 可以查看。比如：kernel-ml-headers-5.10.16-1.el7.elrepo.x86_64\n    # 那么强制删除，则命令为：rpm -e --nodeps kernel-ml-headers-5.10.16-1.el7.elrepo.x86_64\n\n    # ${sudoCmd} yum remove kernel-ml kernel-ml-{devel,headers,perf}\n    # ${sudoCmd} rpm -e --nodeps kernel-headers\n    # ${sudoCmd} rpm -e --nodeps kernel-ml-headers-${elrepo_kernel_version}-1.el7.elrepo.x86_64\n\n    removeKernelNameText=\"kernel\"\n    removeKernelNameText=$1\n    grepExcludelinuxKernelVersion=$(echo ${linuxKernelToInstallVersionFull} | cut -d- -f1)\n\n\n    # echo \"rpm -qa | grep ${removeKernelNameText} | grep -v ${grepExcludelinuxKernelVersion} | grep -v noarch | wc -l\"\n    rpmOldKernelNumber=$(rpm -qa | grep \"${removeKernelNameText}\" | grep -v \"${grepExcludelinuxKernelVersion}\" | grep -v \"noarch\" | wc -l)\n    rpmOLdKernelNameList=$(rpm -qa | grep \"${removeKernelNameText}\" | grep -v \"${grepExcludelinuxKernelVersion}\" | grep -v \"noarch\")\n    # echo \"${rpmOLdKernelNameList}\"\n\n    # https://stackoverflow.com/questions/29269259/extract-value-of-column-from-a-line-variable\n\n\n    if [ \"${rpmOldKernelNumber}\" -gt \"0\" ]; then\n\n        yellow \"========== 准备开始删除旧内核 ${removeKernelNameText} ${osKernelVersionBackup}, 当前要安装新内核版本为: ${grepExcludelinuxKernelVersion}\"\n        red \" 当前系统的旧内核 ${removeKernelNameText} ${osKernelVersionBackup} 有 ${rpmOldKernelNumber} 个需要删除\"\n        echo\n        for((integer = 1; integer <= ${rpmOldKernelNumber}; integer++)); do\n            rpmOLdKernelName=$(awk \"NR==${integer}\" <<< \"${rpmOLdKernelNameList}\")\n            green \"+++++ 开始卸载第 ${integer} 个内核: ${rpmOLdKernelName}. 命令: rpm --nodeps -e ${rpmOLdKernelName}\"\n            rpm --nodeps -e ${rpmOLdKernelName}\n            green \"+++++ 已卸载第 ${integer} 个内核 ${rpmOLdKernelName} +++++\"\n            echo\n        done\n        yellow \"========== 共 ${rpmOldKernelNumber} 个旧内核 ${removeKernelNameText} ${osKernelVersionBackup} 已经卸载完成\"\n        echo\n    else\n        red \" 当前需要卸载的系统旧内核 ${removeKernelNameText} ${osKernelVersionBackup} 数量为0 !\"\n    fi\n\n    echo\n}\n\n\n\n# 更新引导文件 grub.conf\nupdateGrubConfig(){\n\tif [[ \"${osRelease}\" == \"centos\" ]]; then\n\n        # if [ ! -f \"/boot/grub/grub.conf\" ]; then\n        #     red \"File '/boot/grub/grub.conf' not found, 没找到该文件\"\n        # else\n        #     sed -i 's/^default=.*/default=0/g' /boot/grub/grub.conf\n        #     grub2-set-default 0\n\n        #     awk -F\\' '$1==\"menuentry \" {print i++ \" : \" $2}' /boot/grub2/grub.cfg\n        #     egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \\'\n\n        #     grub2-editenv list\n        # fi\n\n        # https://blog.51cto.com/foxhound/2551477\n        # 看看最新的 5.10.16 是否排在第一，也就是第 0 位。 如果是，执行：grub2-set-default 0,  然后再看看：grub2-editenv list\n\n        green \" ==================================================\"\n        echo\n\n        if [[ ${osReleaseVersionNoShort} = \"6\" ]]; then\n            red \" 不支持 Centos 6\"\n            exit 255\n        else\n\t\t\tif [ -f \"/boot/grub2/grub.cfg\" ]; then\n\t\t\t\tgrub2-mkconfig -o /boot/grub2/grub.cfg\n\t\t\t\tgrub2-set-default 0\n\t\t\telif [ -f \"/boot/efi/EFI/centos/grub.cfg\" ]; then\n\t\t\t\tgrub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg\n\t\t\t\tgrub2-set-default 0\n\t\t\telif [ -f \"/boot/efi/EFI/redhat/grub.cfg\" ]; then\n\t\t\t\tgrub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg\n\t\t\t\tgrub2-set-default 0\n\t\t\telse\n\t\t\t\tred \" /boot/grub2/grub.cfg 没找到该文件，请检查.\"\n\t\t\t\texit\n\t\t\tfi\n\n            echo\n            green \"    查看当前 grub 菜单启动项列表, 确保新安装的内核 ${linuxKernelToInstallVersionFull} 是否在第一项 \"\n            # grubby --info=ALL|awk -F= '$1==\"kernel\" {print i++ \" : \" $2}'\n            awk -F\\' '$1==\"menuentry \" {print i++ \" : \" $2}' /boot/grub2/grub.cfg\n\n            echo\n            green \"    查看当前 grub 启动顺序是否已设置为第一项 \"\n            echo \"grub2-editenv list\"\n            grub2-editenv list\n            green \" ==================================================\"\n            echo\n        fi\n\n    elif [[ \"${osRelease}\" == \"debian\" || \"${osRelease}\" == \"ubuntu\" ]]; then\n        echo\n        echo \"/usr/sbin/update-grub\"\n        /usr/sbin/update-grub\n    fi\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getLatestUbuntuKernelVersion(){\n    ubuntuKernelLatestVersionArray=($(wget -qO- https://kernel.ubuntu.com/~kernel-ppa/mainline/ | awk -F'\\\"v' '/v[4-9]\\./{print $2}' | cut -d/ -f1 | grep -v - | sort -V))\n    ubuntuKernelLatestVersion=${ubuntuKernelLatestVersionArray[${#ubuntuKernelLatestVersionArray[@]} - 1]}\n    echo\n    green \"Ubuntu mainline 最新的Linux 内核 kernel 版本号为 ${ubuntuKernelLatestVersion}\"\n\n    for ver in \"${ubuntuKernelLatestVersionArray[@]}\"; do\n\n        if [[ ${ver} == *\"${linuxKernelToInstallVersion}\"* ]]; then\n            # echo \"符合所选版本的Linux 内核版本: ${ver}, 选择的版本为 ${linuxKernelToInstallVersion}\"\n            ubuntuKernelVersion=${ver}\n        fi\n    done\n\n\n    green \"即将安装的内核版本: ${ubuntuKernelVersion}\"\n    ubuntuDownloadUrl=\"https://kernel.ubuntu.com/~kernel-ppa/mainline/v${ubuntuKernelVersion}/amd64\"\n    echo\n    echo \"wget -qO- ${ubuntuDownloadUrl} | awk -F'>' '/-[4-9]\\./{print \\$7}' | cut -d'<' -f1 | grep -v lowlatency\"\n    ubuntuKernelDownloadUrlArray=($(wget -qO- ${ubuntuDownloadUrl} | awk -F'>' '/-[4-9]\\./{print $7}' | cut -d'<' -f1 | grep -v lowlatency ))\n\n    # echo \"${ubuntuKernelDownloadUrlArray[*]}\"\n    echo\n}\n\nfunction installDebianUbuntuKernel(){\n\n    ${sudoCmd} apt-get clean\n    ${sudoCmd} apt-get update\n    ${sudoCmd} apt-get install -y dpkg\n\n    # https://kernel.ubuntu.com/~kernel-ppa/mainline/\n\n    # https://unix.stackexchange.com/questions/545601/how-to-upgrade-the-debian-10-kernel-from-backports-without-recompiling-it-from-s\n\n    # https://askubuntu.com/questions/119080/how-to-update-kernel-to-the-latest-mainline-version-without-any-distro-upgrade\n\n    # https://sypalo.com/how-to-upgrade-ubuntu\n\n    if [ \"${isInstallFromRepo}\" = \"yes\" ]; then\n\n        if [ \"${linuxKernelToBBRType}\" = \"xanmod\" ]; then\n\n            green \" ==================================================\"\n            green \"    开始准备从 XanMod 官方源安装 linux 内核 ${linuxKernelToInstallVersion}\"\n            green \" ==================================================\"\n\n            # https://xanmod.org/\n\n\n            # echo 'deb http://deb.xanmod.org releases main' > /etc/apt/sources.list.d/xanmod-kernel.list\n            # wget -qO - https://dl.xanmod.org/gpg.key | sudo apt-key --keyring /etc/apt/trusted.gpg.d/xanmod-kernel.gpg add -\n\n            wget -qO - https://dl.xanmod.org/archive.key | sudo gpg --dearmor -o /usr/share/keyrings/xanmod-archive-keyring.gpg\n            echo 'deb [signed-by=/usr/share/keyrings/xanmod-archive-keyring.gpg] http://deb.xanmod.org releases main' | sudo tee /etc/apt/sources.list.d/xanmod-release.list\n\n            ${sudoCmd} apt update -y\n\n            listAvailableLinuxKernel \"xanmod\"\n\n            linuxKernelToInstallVersionFull=${linuxKernelToInstallVersion}\n            echo\n            green \" ==================================================\"\n            green \" 开始安装 linux 内核版本: XanMod ${linuxKernelToInstallVersionFull}\"\n            echo\n\n            if [ \"${linuxKernelToInstallVersion}\" = \"6.6\" ]; then\n                ${sudoCmd} apt install -y linux-xanmod-lts-x64v3\n            elif [ \"${linuxKernelToInstallVersion}\" = \"6.11\" ]; then\n                ${sudoCmd} apt install -y linux-xanmod-x64v3\n            else\n                ${sudoCmd} apt install -y linux-xanmod\n            fi\n\n            listInstalledLinuxKernel\n            rebootSystem\n        else\n\n            if [ \"${linuxKernelToInstallVersion}\" = \"5.10\" ]; then\n                debianKernelVersion=\"5.10.0-0\"\n                if [ \"${osReleaseVersionNo}\" = \"11\" ]; then\n                    debianKernelVersion=\"5.10.0-16\"\n                fi\n                # linux-image-5.10.0-0.bpo.15-amd64\n            elif [ \"${linuxKernelToInstallVersion}\" = \"5.19\" ]; then\n                debianKernelVersion=\"5.16.0-0\"\n                if [ \"${osReleaseVersionNo}\" = \"11\" ]; then\n                    debianKernelVersion=\"5.19.0-0\"\n                fi\n\n            elif [ \"${linuxKernelToInstallVersion}\" = \"4.19\" ]; then\n                debianKernelVersion=\"4.19.0-21\"\n\n            elif [ \"${linuxKernelToInstallVersion}\" = \"6.1\" ]; then\n                debianKernelVersion=\"6.1.0-0\"\n                if [ \"${osReleaseVersionNo}\" = \"11\" ]; then\n                    debianKernelVersion=\"6.1.0-20\"\n                fi\n                if [ \"${osReleaseVersionNo}\" = \"12\" ]; then\n                    debianKernelVersion=\"6.1.0-25\"\n                fi\n            else\n                debianKernelVersion=\"6.6.0-0\"\n                if [ \"${osReleaseVersionNo}\" = \"11\" ]; then\n                    debianKernelVersion=\"6.6.0-0\"\n                fi\n                if [ \"${osReleaseVersionNo}\" = \"12\" ]; then\n                    debianKernelVersion=\"6.6.0-0\"\n                fi\n            fi\n\n\n\n            green \" ==================================================\"\n            green \"    开始通过 Debian 官方源安装 linux 内核 ${debianKernelVersion}\"\n            green \" ==================================================\"\n\n            if [ \"${osKernelVersionBackup}\" = \"${debianKernelVersion}\" ]; then\n                red \"当前系统内核版本已经是 ${osKernelVersionBackup} 无需安装! \"\n                promptContinueOpeartion\n            fi\n\n            linuxKernelToInstallVersionFull=${debianKernelVersion}\n\n            echo \"deb http://deb.debian.org/debian $osReleaseVersionCodeName-backports main contrib non-free\" > /etc/apt/sources.list.d/$osReleaseVersionCodeName-backports.list\n            echo \"deb-src http://deb.debian.org/debian $osReleaseVersionCodeName-backports main contrib non-free\" >> /etc/apt/sources.list.d/$osReleaseVersionCodeName-backports.list\n            ${sudoCmd} apt update -y\n\n            listAvailableLinuxKernel\n\n            echo\n            green \" apt --fix-broken install\"\n            ${sudoCmd} apt --fix-broken install\n\n            #green \" apt install -y -t $osReleaseVersionCodeName-backports linux-image-amd64\"\n            #${sudoCmd} apt install -y -t $osReleaseVersionCodeName-backports linux-image-amd64\n\n            #green \" apt install -y -t $osReleaseVersionCodeName-backports firmware-linux firmware-linux-nonfree\"\n            #${sudoCmd} apt install -y -t $osReleaseVersionCodeName-backports firmware-linux firmware-linux-nonfree\n\n            echo\n            echo \"dpkg --get-selections | grep linux-image-${debianKernelVersion} | awk '/linux-image-[4-9]./{print \\$1}' | awk -F'linux-image-' '{print \\$2}' \"\n            #debianKernelVersionPackageName=$(dpkg --get-selections | grep \"${debianKernelVersion}\" | awk '/linux-image-[4-9]./{print $1}' | awk -F'linux-image-' '{print $2}')\n            echo \"apt-cache search linux-image | grep ${debianKernelVersion} | awk '/linux-image-[4-9]\\.[0-9]+\\.[0-9]+/{print \\$1}' | awk '/[0-9]+-amd64$/{print \\$1}' | awk -F'linux-image-' '{print \\$2}' | sort -V | tail -1\"\n            debianKernelVersionPackageName=$(apt-cache search linux-image | grep \"${debianKernelVersion}\" | awk '/linux-image-[4-9]\\.[0-9]+\\.[0-9]+/{print $1}' | awk '/[0-9]+-amd64$/{print $1}' | awk -F'linux-image-' '{print $2}' | sort -V | tail -1)\n\n\n            echo\n            green \" Debian 官方源安装 linux 内核版本: ${debianKernelVersionPackageName}\"\n            echo\n\n            green \" 开始安装 linux-image  命令为:  apt install -y linux-image-${debianKernelVersionPackageName}\"\n            ${sudoCmd} apt install -y linux-image-${debianKernelVersionPackageName}\n            echo\n            green \" 开始安装 linux-headers  命令为:  apt install -y linux-headers-${debianKernelVersionPackageName}\"\n            ${sudoCmd} apt install -y linux-headers-${debianKernelVersionPackageName}\n            # ${sudoCmd} apt-get -y dist-upgrade\n\n        fi\n\n    else\n        echo\n        green \" ==================================================\"\n        green \"    开始手动安装 linux 内核 \"\n        green \" ==================================================\"\n        echo\n\n        mkdir -p ${userHomePath}\n        cd ${userHomePath}\n\n        linuxKernelByUser=\"\"\n\n        if [ \"${linuxKernelToBBRType}\" = \"bbrplus\" ]; then\n            linuxKernelByUser=\"UJX6N\"\n            if [ \"${linuxKernelToInstallVersion}\" = \"4.14.129\" ]; then\n                linuxKernelByUser=\"cx9208\"\n            fi\n            green \" 准备从 ${linuxKernelByUser} github 网站下载 bbr plus 的linux内核并安装 \"\n        else\n            green \" 准备从 Ubuntu kernel-ppa mainline 网站下载linux内核并安装 \"\n        fi\n        echo\n\n        if [[ \"${osRelease}\" == \"ubuntu\" && ${osReleaseVersionNo} == \"16.04\" ]]; then\n\n            if [ -f \"${userHomePath}/libssl1.1_1.1.0g-2ubuntu4_amd64.deb\" ]; then\n                green \"文件已存在, 不需要下载, 文件原下载地址: http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb \"\n            else\n                green \"文件下载中... 下载地址: http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb \"\n                wget -P ${userHomePath} http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb\n            fi\n\n            ${sudoCmd} dpkg -i libssl1.1_1.1.0g-2ubuntu4_amd64.deb\n        fi\n\n        if [[ \"${linuxKernelToInstallVersion}\" == \"5.19\" || \"${linuxKernelToInstallVersion}\" == \"5.10.118\" || \"${linuxKernelToInstallVersion}\" == \"5.15\" ]]; then\n            if [ -f \"${userHomePath}/libssl3_3.0.2-0ubuntu1_amd64.deb\" ]; then\n                green \"文件已存在, 不需要下载, 文件原下载地址: http://mirrors.kernel.org/ubuntu/pool/main/o/openssl/libssl3_3.0.2-0ubuntu1_amd64.deb \"\n            else\n                green \"文件下载中... 下载地址: http://mirrors.kernel.org/ubuntu/pool/main/o/openssl/libssl3_3.0.2-0ubuntu1_amd64.deb \"\n                wget -P ${userHomePath} http://mirrors.kernel.org/ubuntu/pool/main/o/openssl/libssl3_3.0.2-0ubuntu1_amd64.deb\n            fi\n\n            if [ -f \"${userHomePath}/libc6_2.35-0ubuntu3_amd64.deb\" ]; then\n                green \"文件已存在, 不需要下载, 文件原下载地址: http://mirrors.kernel.org/ubuntu/pool/main/g/glibc/libc6_2.35-0ubuntu3_amd64.deb \"\n            else\n                green \"文件下载中... 下载地址: http://mirrors.kernel.org/ubuntu/pool/main/g/glibc/libc6_2.35-0ubuntu3_amd64.deb \"\n                wget -P ${userHomePath} http://mirrors.kernel.org/ubuntu/pool/main/g/glibc/libc6_2.35-0ubuntu3_amd64.deb\n            fi\n\n            if [ -f \"${userHomePath}/locales_2.35-0ubuntu3_all.deb\" ]; then\n                green \"文件已存在, 不需要下载, 文件原下载地址: http://mirrors.kernel.org/ubuntu/pool/main/g/glibc/locales_2.35-0ubuntu3_all.deb \"\n            else\n                green \"文件下载中... 下载地址: http://mirrors.kernel.org/ubuntu/pool/main/g/glibc/locales_2.35-0ubuntu3_all.deb \"\n                wget -P ${userHomePath} http://mirrors.kernel.org/ubuntu/pool/main/g/glibc/locales_2.35-0ubuntu3_all.deb\n            fi\n\n            if [ -f \"${userHomePath}/libc-bin_2.35-0ubuntu3_amd64.deb\" ]; then\n                green \"文件已存在, 不需要下载, 文件原下载地址: http://mirrors.kernel.org/ubuntu/pool/main/g/glibc/libc-bin_2.35-0ubuntu3_amd64.deb \"\n            else\n                green \"文件下载中... 下载地址: http://mirrors.kernel.org/ubuntu/pool/main/g/glibc/libc-bin_2.35-0ubuntu3_amd64.deb \"\n                wget -P ${userHomePath} http://mirrors.kernel.org/ubuntu/pool/main/g/glibc/libc-bin_2.35-0ubuntu3_amd64.deb\n            fi\n\n            ${sudoCmd} dpkg -i locales_2.35-0ubuntu3_all.deb\n            ${sudoCmd} dpkg -i libc-bin_2.35-0ubuntu3_amd64.deb\n            ${sudoCmd} dpkg -i libssl3_3.0.2-0ubuntu1_amd64.deb\n            ${sudoCmd} dpkg -i libc6_2.35-0ubuntu3_amd64.deb\n\n        fi\n\n\n\n        if [ \"${linuxKernelByUser}\" = \"\" ]; then\n\n            # https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.11.12/amd64/\n            # https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.11.12/amd64/linux-image-unsigned-5.11.12-051112-generic_5.11.12-051112.202104071432_amd64.deb\n            # https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.11.12/amd64/linux-modules-5.11.12-051112-generic_5.11.12-051112.202104071432_amd64.deb\n\n            # https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.19.17/\n            # https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.19.17/amd64/linux-image-unsigned-5.19.17-051917-generic_5.19.17-051917.202210240939_amd64.deb\n            # https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.19.17/amd64/linux-headers-5.19.17-051917-generic_5.19.17-051917.202210240939_amd64.deb\n            # https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.19.17/amd64/linux-modules-5.19.17-051917-generic_5.19.17-051917.202210240939_amd64.deb\n\n            # https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.19.17/arm64/linux-image-unsigned-5.19.17-051917-generic_5.19.17-051917.202210240939_arm64.deb\n            # https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.19.17/arm64/linux-headers-5.19.17-051917-generic_5.19.17-051917.202210240939_arm64.deb\n            # https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.19.17/arm64/linux-modules-5.19.17-051917-generic_5.19.17-051917.202210240939_arm64.deb\n\n\n            getLatestUbuntuKernelVersion\n\n            linuxKernelToInstallVersionFull=${ubuntuKernelVersion}\n\n            mkdir -p ${userHomePath}/${linuxKernelToInstallVersionFull}\n            cd ${userHomePath}/${linuxKernelToInstallVersionFull}\n\n\n            for file in \"${ubuntuKernelDownloadUrlArray[@]}\"; do\n                downloadFile ${ubuntuDownloadUrl}/${file}\n            done\n\n        elif [ \"${linuxKernelByUser}\" = \"cx9208\" ]; then\n\n            linuxKernelToInstallVersionFull=\"4.14.129-bbrplus\"\n\n            mkdir -p ${userHomePath}/${linuxKernelToInstallVersionFull}\n            cd ${userHomePath}/${linuxKernelToInstallVersionFull}\n\n            # https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/bbrplus/debian-ubuntu/x64/linux-headers-4.14.129-bbrplus.deb\n            # https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/bbrplus/debian-ubuntu/x64/linux-image-4.14.129-bbrplus.deb\n\n            # https://github.com/cx9208/Linux-NetSpeed/raw/master/bbrplus/debian-ubuntu/x64/linux-headers-4.14.129-bbrplus.deb\n            # https://github.com/cx9208/Linux-NetSpeed/raw/master/bbrplus/debian-ubuntu/x64/linux-image-4.14.129-bbrplus.deb\n\n            # https://raw.githubusercontent.com/cx9208/Linux-NetSpeed/master/bbrplus/debian-ubuntu/x64/linux-headers-4.14.129-bbrplus.deb\n            # https://raw.githubusercontent.com/cx9208/Linux-NetSpeed/master/bbrplus/debian-ubuntu/x64/linux-image-4.14.129-bbrplus.deb\n\n            bbrplusDownloadUrl=\"https://raw.githubusercontent.com/cx9208/Linux-NetSpeed/master/bbrplus/debian-ubuntu/x64\"\n\n            downloadFile ${bbrplusDownloadUrl}/linux-image-${linuxKernelToInstallVersionFull}.deb\n            downloadFile ${bbrplusDownloadUrl}/linux-headers-${linuxKernelToInstallVersionFull}.deb\n\n        elif [ \"${linuxKernelByUser}\" = \"UJX6N\" ]; then\n\n            linuxKernelToInstallVersionFull=\"${bbrplusKernelVersion}-bbrplus\"\n\n            mkdir -p ${userHomePath}/${linuxKernelToInstallVersionFull}\n            cd ${userHomePath}/${linuxKernelToInstallVersionFull}\n\n            if [ \"${linuxKernelToInstallVersion}\" = \"6.7\" ]; then\n                bbrplusDownloadUrl=\"https://github.com/UJX6N/bbrplus-6.x_stable/releases/download/${linuxKernelToInstallVersionFull}\"\n\n            elif [ \"${linuxKernelToInstallVersion}\" = \"4.14\" ]; then\n                bbrplusDownloadUrl=\"https://github.com/UJX6N/bbrplus/releases/download/${linuxKernelToInstallVersionFull}\"\n\n            else\n                bbrplusDownloadUrl=\"https://github.com/UJX6N/bbrplus-${linuxKernelToInstallVersion}/releases/download/${linuxKernelToInstallVersionFull}\"\n            fi\n\n\n            # https://github.com/UJX6N/bbrplus-5.9/releases/download/5.9.16-bbrplus/Debian-Ubuntu_Required_linux-image-5.9.16-bbrplus_5.9.16-bbrplus-1_amd64.deb\n            # https://github.com/UJX6N/bbrplus-5.4/releases/download/5.4.228-bbrplus/Debian-Ubuntu_Required_linux-headers-5.4.228-bbrplus_5.4.228-bbrplus-1_amd64.deb\n            # https://github.com/UJX6N/bbrplus-5.4/releases/download/5.4.228-bbrplus/Debian-Ubuntu_Required_linux-image-5.4.228-bbrplus_5.4.228-bbrplus-1_amd64.deb\n\n            # https://github.com/UJX6N/bbrplus-4.19/releases/download/4.19.269-bbrplus/Debian-Ubuntu_Required_linux-image-4.19.269-bbrplus_4.19.269-bbrplus-1_amd64.deb\n            # https://github.com/UJX6N/bbrplus/releases/download/4.14.302-bbrplus/Debian-Ubuntu_Required_linux-headers-4.14.302-bbrplus_4.14.302-bbrplus-1_amd64.deb\n            # https://github.com/UJX6N/bbrplus-4.9/releases/download/4.9.337-bbrplus/Debian-Ubuntu_Required_linux-image-4.9.337-bbrplus_4.9.337-bbrplus-1_amd64.deb\n\n\n            if [[ \"${linuxKernelToInstallVersion}\" == \"5.10\" || \"${linuxKernelToInstallVersion}\" == \"5.15\" || \"${linuxKernelToInstallVersion}\" == \"6.1\" || \"${linuxKernelToInstallVersion}\" == \"6.6\" || \"${linuxKernelToInstallVersion}\" == \"6.7\" ]]; then\n            # https://github.com/UJX6N/bbrplus-6.x_stable/releases/download/6.4.3-bbrplus/Debian-Ubuntu_Required_linux-image-6.4.3-bbrplus_6.4.3-1_amd64.deb\n            # https://github.com/UJX6N/bbrplus-6.x_stable/releases/download/6.4.3-bbrplus/Debian-Ubuntu_Optional_linux-headers-6.4.3-bbrplus_6.4.3-1_amd64.deb\n\n            # https://github.com/UJX6N/bbrplus-6.1/releases/download/6.1.38-bbrplus/Debian-Ubuntu_Required_linux-image-6.1.38-bbrplus_6.1.38-bbrplus-1_amd64.deb\n\n            # https://github.com/UJX6N/bbrplus-5.15/releases/download/5.15.120-bbrplus/Debian-Ubuntu_Required_linux-image-5.15.120-bbrplus_5.15.120-bbrplus-1_amd64.deb\n\n            # https://github.com/UJX6N/bbrplus-5.10/releases/download/5.10.162-bbrplus/Debian-Ubuntu_Required_linux-image-5.10.162-bbrplus_5.10.162-bbrplus-1_amd64.deb\n            # https://github.com/UJX6N/bbrplus-5.15/releases/download/5.15.86-bbrplus/Debian-Ubuntu_Optional_linux-headers-5.15.86-bbrplus_5.15.86-bbrplus-1_amd64.deb\n\n                downloadFile ${bbrplusDownloadUrl}/Debian-Ubuntu_Required_linux-image-${bbrplusKernelVersion}-bbrplus_${bbrplusKernelVersion}-bbrplus-1_amd64.deb\n                downloadFile ${bbrplusDownloadUrl}/Debian-Ubuntu_Optional_linux-headers-${bbrplusKernelVersion}-bbrplus_${bbrplusKernelVersion}-bbrplus-1_amd64.deb\n            else\n                downloadFile ${bbrplusDownloadUrl}/Debian-Ubuntu_Required_linux-image-${bbrplusKernelVersion}-bbrplus_${bbrplusKernelVersion}-1_amd64.deb\n                downloadFile ${bbrplusDownloadUrl}/Debian-Ubuntu_Optional_linux-headers-${bbrplusKernelVersion}-bbrplus_${bbrplusKernelVersion}-1_amd64.deb\n            fi\n\n        fi\n\n\n        removeDebianKernelMulti\n        echo\n        green \" ==================================================\"\n        green \" 开始安装 linux 内核版本: ${linuxKernelToInstallVersionFull}\"\n        echo\n        ${sudoCmd} dpkg -i ./*.deb\n\n        updateGrubConfig\n\n    fi\n\n    echo\n    green \" ==================================================\"\n    green \"    安装 linux 内核 ${linuxKernelToInstallVersionFull} 成功! \"\n    red \"    请根据以下信息 检查新内核是否安装成功，无新内核不要重启! \"\n    green \" ==================================================\"\n    echo\n\n    showLinuxKernelInfo\n    removeDebianKernelMulti \"linux-image\"\n    listInstalledLinuxKernel\n    rebootSystem\n\n}\n\n\n\n\nfunction removeDebianKernelMulti(){\n    listInstalledLinuxKernel\n\n    echo\n    if [ -z $1 ]; then\n        red \"===== 开始准备删除 linux-headers linux-modules 内核, 建议删除 \"\n    else\n        red \"===== 开始准备删除 linux-image 内核, 建议删除 \"\n    fi\n\n    red \" 注意: 删除内核有风险, 可能会导致VPS无法启动, 请先做好备份! \"\n    read -p \"是否删除内核? 直接回车默认删除内核, 请输入[Y/n]:\" isContinueDelKernelInput\n\tisContinueDelKernelInput=${isContinueDelKernelInput:-Y}\n    echo\n\n\tif [[ $isContinueDelKernelInput == [Yy] ]]; then\n\n        if [ -z $1 ]; then\n            removeDebianKernel \"linux-modules-extra\"\n            removeDebianKernel \"linux-modules\"\n            removeDebianKernel \"linux-headers\"\n            removeDebianKernel \"linux-image\"\n            # removeDebianKernel \"linux-kbuild\"\n            # removeDebianKernel \"linux-compiler\"\n            # removeDebianKernel \"linux-libc\"\n        else\n            removeDebianKernel \"linux-image\"\n            removeDebianKernel \"linux-modules-extra\"\n            removeDebianKernel \"linux-modules\"\n            removeDebianKernel \"linux-headers\"\n            # ${sudoCmd} apt -y --purge autoremove\n        fi\n\n    fi\n    echo\n}\n\nfunction removeDebianKernel(){\n\n    removeKernelNameText=\"linux-image\"\n    removeKernelNameText=$1\n    grepExcludelinuxKernelVersion=$(echo ${linuxKernelToInstallVersionFull} | cut -d- -f1)\n\n\n    # echo \"dpkg --get-selections | grep ${removeKernelNameText} | grep -Ev '${grepExcludelinuxKernelVersion}|${removeKernelNameText}-amd64' | awk '{print \\$1}' \"\n    rpmOldKernelNumber=$(dpkg --get-selections | grep \"${removeKernelNameText}\" | grep -Ev \"${grepExcludelinuxKernelVersion}|${removeKernelNameText}-amd64\" | wc -l)\n    rpmOLdKernelNameList=$(dpkg --get-selections | grep \"${removeKernelNameText}\" | grep -Ev \"${grepExcludelinuxKernelVersion}|${removeKernelNameText}-amd64\" | awk '{print $1}' )\n    # echo \"$rpmOLdKernelNameList\"\n\n    # https://stackoverflow.com/questions/16212656/grep-exclude-multiple-strings\n    # https://stackoverflow.com/questions/29269259/extract-value-of-column-from-a-line-variable\n\n    # https://askubuntu.com/questions/187888/what-is-the-correct-way-to-completely-remove-an-application\n\n    if [ \"${rpmOldKernelNumber}\" -gt \"0\" ]; then\n        yellow \"========== 准备开始删除旧内核 ${removeKernelNameText} ${osKernelVersionBackup}, 当前要安装新内核版本为: ${grepExcludelinuxKernelVersion}\"\n        red \" 当前系统的旧内核 ${removeKernelNameText} ${osKernelVersionBackup} 有 ${rpmOldKernelNumber} 个需要删除\"\n        echo\n        for((integer = 1; integer <= ${rpmOldKernelNumber}; integer++)); do\n            rpmOLdKernelName=$(awk \"NR==${integer}\" <<< \"${rpmOLdKernelNameList}\")\n            green \"+++++ 开始卸载第 ${integer} 个内核: ${rpmOLdKernelName}. 命令: apt remove --purge ${rpmOLdKernelName}\"\n            ${sudoCmd} apt remove -y --purge ${rpmOLdKernelName}\n            ${sudoCmd} apt autoremove -y ${rpmOLdKernelName}\n            green \"+++++ 已卸载第 ${integer} 个内核 ${rpmOLdKernelName} +++++\"\n            echo\n        done\n        yellow \"========== 共 ${rpmOldKernelNumber} 个旧内核 ${removeKernelNameText} ${osKernelVersionBackup} 已经卸载完成\"\n        echo\n    else\n        red \" 当前需要卸载的系统旧内核 ${removeKernelNameText} ${osKernelVersionBackup} 数量为0 !\"\n    fi\n\n    echo\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction installWARP(){\n    # wget -qN --no-check-certificate -O ./nf.sh https://raw.githubusercontent.com/jinwyp/SimpleNetflix/dev/nf.sh && chmod +x ./nf.sh\n\t# wget -qN --no-check-certificate -O ./warp-go.sh https://raw.githubusercontent.com/fscarmen/warp/main/warp-go.sh && chmod +x ./warp-go.sh && ./warp-go.sh\n    # wget -qN --no-check-certificate -O ./warp-go.sh https://gitlab.com/fscarmen/warp/-/raw/main/warp-go.sh && chmod +x ./warp-go.sh && ./warp-go.sh\n    wget -N https://gitlab.com/fscarmen/warp/-/raw/main/menu.sh && bash menu.sh\n}\n\nfunction installWARPGO(){\n    # wget -qN --no-check-certificate -O ./nf.sh https://raw.githubusercontent.com/jinwyp/SimpleNetflix/dev/nf.sh && chmod +x ./nf.sh\n\t# wget -qN --no-check-certificate -O ./warp-go.sh https://raw.githubusercontent.com/fscarmen/warp/main/warp-go.sh && chmod +x ./warp-go.sh && ./warp-go.sh\n    wget -qN --no-check-certificate -O ./warp-go.sh https://gitlab.com/fscarmen/warp/-/raw/main/warp-go.sh && chmod +x ./warp-go.sh && ./warp-go.sh\n}\n\nfunction vps_netflix_auto(){\n    # wget -qN --no-check-certificate -O ./nf.sh https://raw.githubusercontent.com/jinwyp/SimpleNetflix/dev/nf.sh && chmod +x ./nf.sh\n\t# bash <(curl -sSL https://raw.githubusercontent.com/fscarmen/warp_unlock/main/unlock.sh)\n    bash <(curl -sSL https://gitlab.com/fscarmen/warp_unlock/-/raw/main/unlock.sh)\n}\n\nfunction vps_netflix_jin(){\n    # wget -qN --no-check-certificate -O ./nf.sh https://raw.githubusercontent.com/jinwyp/SimpleNetflix/dev/nf.sh && chmod +x ./nf.sh\n\twget -qN --no-check-certificate -O ./nf.sh https://raw.githubusercontent.com/jinwyp/one_click_script/master/netflix_check.sh && chmod +x ./nf.sh && ./nf.sh\n}\n\nfunction vps_netflix_jin_auto(){\n    # wget -qN --no-check-certificate -O ./nf.sh https://raw.githubusercontent.com/jinwyp/SimpleNetflix/dev/nf.sh && chmod +x ./nf.sh\n    cd ${HOME}\n\twget -qN --no-check-certificate -O ./nf.sh https://raw.githubusercontent.com/jinwyp/one_click_script/master/netflix_check.sh && chmod +x ./nf.sh\n\n    echo\n    green \" ==================================================\"\n    green \" 通过Cron定时任务 每天自动检测Netflix是否解锁非自制剧\"\n    green \" 如果检测到Netflix没有解锁 会自动刷新 WARP IP, 默认尝试刷新20次\"\n    green \" 刷新日志 log 在 /root/warp_refresh.log\"\n    green \" Auto refresh Cloudflare WARP IP to unlock Netflix non-self produced drama\"\n    green \" ==================================================\"\n    echo\n    (crontab -l ; echo \"10 5 * * 0,1,2,3,4,5,6 /root/nf.sh auto >> /root/warp_refresh.log \") | sort - | uniq - | crontab -\n    echo\n\n    ./nf.sh auto\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getGithubLatestReleaseVersion(){\n    # https://github.com/p4gefau1t/trojan-go/issues/63\n    wget --no-check-certificate -qO- https://api.github.com/repos/$1/tags | grep 'name' | cut -d\\\" -f4 | head -1 | cut -b 2-\n}\n\n\n\n\n\n\n\n\n\n# https://unix.stackexchange.com/questions/8656/usr-bin-vs-usr-local-bin-on-linux\n\nversionWgcf=\"2.2.11\"\ndownloadFilenameWgcf=\"wgcf_${versionWgcf}_linux_amd64\"\nconfigWgcfBinPath=\"/usr/local/bin\"\nconfigWgcfConfigFolderPath=\"${HOME}/wireguard\"\nconfigWgcfAccountFilePath=\"${configWgcfConfigFolderPath}/wgcf-account.toml\"\nconfigWgcfProfileFilePath=\"${configWgcfConfigFolderPath}/wgcf-profile.conf\"\nconfigWARPPortFilePath=\"${configWgcfConfigFolderPath}/warp-port\"\nconfigWireGuardConfigFileFolder=\"/etc/wireguard\"\nconfigWireGuardConfigFilePath=\"/etc/wireguard/wgcf.conf\"\nconfigWireGuardDNSBackupFilePath=\"/etc/resolv_warp_bak.conf\"\n\n\nconfigWarpPort=\"40000\"\n\n\n\nfunction installWARPClient(){\n\n    # https://developers.cloudflare.com/warp-client/setting-up/linux\n\n    echo\n    green \" ==================================================\"\n    green \" Prepare to install Cloudflare WARP Official client \"\n    green \" Cloudflare WARP Official client only support Debian 10/11、Ubuntu 20.04/16.04、CentOS 8\"\n    green \" ==================================================\"\n    echo\n\n    if [[ \"${osRelease}\" == \"debian\" || \"${osRelease}\" == \"ubuntu\" ]]; then\n        ${sudoCmd} apt-key del 835b8acb\n        ${sudoCmd} apt-key del 8e5f9a5d\n\n        ${sudoCmd} apt install -y gnupg\n        ${sudoCmd} apt install -y apt-transport-https\n\n        # Add cloudflare gpg key\n        sudo mkdir -p --mode=0755 /usr/share/keyrings\n        curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null\n\n        # Add this repo to your apt repositories\n        echo \"deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared $osReleaseVersionCodeName main\" | ${sudoCmd} tee /etc/apt/sources.list.d/cloudflared.list\n\n        # install cloudflared\n\n        ${sudoCmd} apt-get update\n        ${sudoCmd} apt install -y cloudflare-warp\n        ${sudoCmd} apt-get install cloudflared\n\n    elif [[ \"${osRelease}\" == \"centos\" ]]; then\n        ${sudoCmd} rpm -e gpg-pubkey-835b8acb-*\n        ${sudoCmd} rpm -e gpg-pubkey-8e5f9a5d-*\n\n        if [ \"${osReleaseVersionNoShort}\" -eq 7 ]; then\n            # red \"Cloudflare WARP Official client is not supported on Centos 7\"\n\n            # This requires yum config-manager\n            ${sudoCmd} yum install yum-utils\n\n            # Add cloudflared.repo to config-manager\n            ${sudoCmd} yum-config-manager --add-repo https://pkg.cloudflare.com/cloudflared-ascii.repo\n\n            # install cloudflared\n            ${sudoCmd} yum install cloudflared\n        else\n            # This requires dnf config-manager\n            # Add cloudflared.repo to config-manager\n            ${sudoCmd} dnf config-manager --add-repo https://pkg.cloudflare.com/cloudflared-ascii.repo\n\n            # install cloudflared\n            ${sudoCmd} dnf install cloudflared\n        fi\n\n        ${sudoCmd} yum install -y cloudflare-warp\n    fi\n\n    if [[ ! -f \"/bin/warp-cli\" ]]; then\n        green \" ==================================================\"\n        red \"  ${osInfo}${osReleaseVersionNoShort} ${osReleaseVersionCodeName} is not supported ! \"\n        green \" ==================================================\"\n        exit\n    fi\n\n    echo\n    echo\n    read -p \"是否生成随机的WARP SOCKS5 端口号? 默认随机端口, 输入N为设置固定端口号40000, 请输入[Y/n]:\" isWarpPortInput\n    isWarpPortInput=${isWarpPortInput:-y}\n\n    if [[ $isWarpPortInput == [Nn] ]]; then\n        echo\n    else\n        configWarpPort=\"$(($RANDOM + 10000))\"\n    fi\n\n    mkdir -p ${configWgcfConfigFolderPath}\n    echo \"${configWarpPort}\" > \"${configWARPPortFilePath}\"\n\n    ${sudoCmd} systemctl enable warp-svc\n\n    yes | warp-cli register\n    echo\n    echo \"warp-cli set-mode proxy\"\n    warp-cli set-mode proxy\n    echo\n    echo \"warp-cli --accept-tos set-proxy-port ${configWarpPort}\"\n    warp-cli --accept-tos set-proxy-port ${configWarpPort}\n    echo\n    echo \"warp-cli --accept-tos connect\"\n    warp-cli --accept-tos connect\n    echo\n    echo \"warp-cli --accept-tos enable-always-on\"\n    warp-cli --accept-tos enable-always-on\n\n    echo\n    checkWarpClientStatus\n\n\n    # (crontab -l ; echo \"10 6 * * 0,1,2,3,4,5,6 warp-cli disable-always-on \") | sort - | uniq - | crontab -\n    # (crontab -l ; echo \"11 6 * * 0,1,2,3,4,5,6 warp-cli disconnect \") | sort - | uniq - | crontab -\n    (crontab -l ; echo \"12 6 * * 1,4 systemctl restart warp-svc \") | sort - | uniq - | crontab -\n    # (crontab -l ; echo \"16 6 * * 0,1,2,3,4,5,6 warp-cli connect \") | sort - | uniq - | crontab -\n    # (crontab -l ; echo \"17 6 * * 0,1,2,3,4,5,6 warp-cli enable-always-on \") | sort - | uniq - | crontab -\n\n\n\n    echo\n    green \" ================================================== \"\n    green \"  Cloudflare 官方 WARP Client 安装成功 !\"\n    green \"  WARP SOCKS5 端口号 ${configWarpPort} \"\n    echo\n    green \"  WARP 停止命令: warp-cli disconnect , 停止Always-On命令: warp-cli disable-always-on \"\n    green \"  WARP 启动命令: warp-cli connect , 开启Always-On命令(保持一直连接WARP): warp-cli enable-always-on \"\n    green \"  WARP 查看日志: journalctl -n 100 -u warp-svc\"\n    green \"  WARP 查看运行状态: warp-cli status\"\n    green \"  WARP 查看连接信息: warp-cli warp-stats\"\n    green \"  WARP 查看设置信息: warp-cli settings\"\n    green \"  WARP 查看账户信息: warp-cli account\"\n    echo\n    green \"  用本脚本安装v2ray或xray 可以选择是否 解锁 Netflix 限制 和 避免弹出 Google reCAPTCHA 人机验证 !\"\n    echo\n    green \"  其他脚本安装的v2ray或xray 请自行替换 v2ray或xray 配置文件!\"\n    green \" ================================================== \"\n\n}\n\nfunction installWireguard(){\n\n\n\n    if [[ -f \"${configWireGuardConfigFilePath}\" ]]; then\n        green \" ==================================================\"\n        green \"  已安装过 Wireguard, 如需重装 可以选择卸载 Wireguard 后重新安装! \"\n        green \" ==================================================\"\n        exit\n    fi\n\n\n    green \" ==================================================\"\n    green \" 准备安装 WireGuard \"\n    echo\n    red \" 安装前建议用本脚本升级linux内核到5.6以上 例如5.10 LTS内核. 也可以不升级内核, 具体请看下面说明\"\n    red \" 如果是新的干净的没有换过内核的系统(例如没有安装过BBR Plus内核), 可以不用退出安装其他内核, 直接继续安装 WireGuard\"\n    red \" 如果安装过其他内核(例如安装过BBR Plus内核), 建议先安装高于5.6以上的内核, 低于5.6的内核也可以继续安装, 但有几率无法启动 WireGuard\"\n    red \" 如遇到 WireGuard 启动失败, 建议重做新系统后, 升级系统到5.10内核, 然后安装WireGuard. 或者重做新系统后不要更换其他内核, 直接安装WireGuard\"\n    green \" ==================================================\"\n    echo\n\n    isKernelSupportWireGuardVersion=\"5.6\"\n    isKernelBuildInWireGuardModule=\"no\"\n\n    if versionCompareWithOp \"${isKernelSupportWireGuardVersion}\" \"${osKernelVersionShort}\" \">\"; then\n        red \" 当前系统内核为 ${osKernelVersionShort}, 低于5.6的系统内核没有内置 WireGuard Module !\"\n        isKernelBuildInWireGuardModule=\"no\"\n    else\n        green \" 当前系统内核为 ${osKernelVersionShort}, 系统内核已内置 WireGuard Module\"\n        isKernelBuildInWireGuardModule=\"yes\"\n    fi\n\n\n\tread -p \"是否继续操作? 请确认linux内核已正确安装 直接回车默认继续操作, 请输入[Y/n]:\" isContinueInput\n\tisContinueInput=${isContinueInput:-Y}\n\n\tif [[ ${isContinueInput} == [Yy] ]]; then\n\t\techo\n        green \" ==================================================\"\n        green \" 开始安装 WireGuard \"\n        green \" ==================================================\"\n\telse\n        green \" 建议请先用本脚本安装 linux kernel 5.6 以上的内核 !\"\n\t\texit\n\tfi\n\n    echo\n    echo\n\n    if [[ \"${osRelease}\" == \"debian\" || \"${osRelease}\" == \"ubuntu\" ]]; then\n        ${sudoCmd} apt --fix-broken install -y\n        ${sudoCmd} apt-get update\n        ${sudoCmd} apt install -y openresolv\n        # ${sudoCmd} apt install -y resolvconf\n        ${sudoCmd} apt install -y net-tools iproute2 dnsutils\n        echo\n        if [[ ${isKernelBuildInWireGuardModule} == \"yes\" ]]; then\n            green \" 当前系统内核版本高于5.6, 直接安装 wireguard-tools \"\n            echo\n            ${sudoCmd} apt install -y wireguard-tools\n        else\n            # 安装 wireguard-dkms 后 ubuntu 20 系统 会同时安装 5.4.0-71   内核\n            green \" 当前系统内核版本低于5.6,  直接安装 wireguard wireguard\"\n            echo\n            ${sudoCmd} apt install -y wireguard\n            # ${sudoCmd} apt install -y wireguard-tools\n        fi\n\n        # if [[ ! -L \"/usr/local/bin/resolvconf\" ]]; then\n        #     ln -s /usr/bin/resolvectl /usr/local/bin/resolvconf\n        # fi\n\n        ${sudoCmd} systemctl enable systemd-resolved.service\n        ${sudoCmd} systemctl start systemd-resolved.service\n\n    elif [[ \"${osRelease}\" == \"centos\" ]]; then\n        ${sudoCmd} yum install -y epel-release elrepo-release\n        ${sudoCmd} yum install -y net-tools\n        ${sudoCmd} yum install -y iproute\n\n        echo\n        if [[ ${isKernelBuildInWireGuardModule} == \"yes\" ]]; then\n\n            green \" 当前系统内核版本高于5.6, 直接安装 wireguard-tools \"\n            echo\n            if [ \"${osReleaseVersionNoShort}\" -eq 7 ]; then\n                ${sudoCmd} yum install -y yum-plugin-elrepo\n            fi\n\n            ${sudoCmd} yum install -y wireguard-tools\n        else\n\n            if [ \"${osReleaseVersionNoShort}\" -eq 7 ]; then\n                if [[ ${osKernelVersionBackup} == *\"3.10.\"* ]]; then\n                    green \" 当前系统内核版本为原版Centos 7 ${osKernelVersionBackup} , 直接安装 kmod-wireguard \"\n                    ${sudoCmd} yum install -y yum-plugin-elrepo\n                    ${sudoCmd} yum install -y kmod-wireguard wireguard-tools\n                else\n                    green \" 当前系统内核版本低于5.6, 安装 wireguard-dkms \"\n                    ${sudoCmd} yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n                    ${sudoCmd} curl -o /etc/yum.repos.d/jdoss-wireguard-epel-7.repo https://copr.fedorainfracloud.org/coprs/jdoss/wireguard/repo/epel-7/jdoss-wireguard-epel-7.repo\n                    ${sudoCmd} yum install -y wireguard-dkms wireguard-tools\n                fi\n            else\n                if [[ ${osKernelVersionBackup} == *\"4.18.\"* ]]; then\n                    green \" 当前系统内核版本为原版Centos 8 ${osKernelVersionBackup} , 直接安装 kmod-wireguard \"\n                    ${sudoCmd} yum install -y kmod-wireguard wireguard-tools\n                else\n                    green \" 当前系统内核版本低于5.6, 安装 wireguard-dkms \"\n                    ${sudoCmd} yum config-manager --set-enabled PowerTools\n                    ${sudoCmd} yum copr enable jdoss/wireguard\n                    ${sudoCmd} yum install -y wireguard-dkms wireguard-tools\n                fi\n\n            fi\n        fi\n    fi\n\n    green \" ================================================== \"\n    green \"  Wireguard 安装成功 !\"\n    green \" ================================================== \"\n\n    installWGCF\n}\n\nfunction installWGCF(){\n\n    versionWgcf=$(getGithubLatestReleaseVersion \"ViRb3/wgcf\")\n    downloadFilenameWgcf=\"wgcf_${versionWgcf}_linux_amd64\"\n\n    echo\n    green \" ==================================================\"\n    green \" 开始安装 Cloudflare WARP 命令行工具 Wgcf ${versionWgcf}\"\n    green \" ==================================================\"\n    echo\n\n    mkdir -p ${configWgcfConfigFolderPath}\n    mkdir -p ${configWgcfBinPath}\n    mkdir -p ${configWireGuardConfigFileFolder}\n\n    cd ${configWgcfConfigFolderPath}\n\n    # https://github.com/ViRb3/wgcf/releases/download/v2.2.10/wgcf_2.2.10_linux_amd64\n    wget -O ${configWgcfConfigFolderPath}/wgcf --no-check-certificate \"https://github.com/ViRb3/wgcf/releases/download/v${versionWgcf}/${downloadFilenameWgcf}\"\n\n\n    if [[ -f ${configWgcfConfigFolderPath}/wgcf ]]; then\n        green \" Cloudflare WARP 命令行工具 Wgcf ${versionWgcf} 下载成功!\"\n        echo\n    else\n        red \"  Wgcf ${versionWgcf} 下载失败!\"\n        exit 255\n    fi\n\n    ${sudoCmd} chmod +x ${configWgcfConfigFolderPath}/wgcf\n    cp ${configWgcfConfigFolderPath}/wgcf ${configWgcfBinPath}\n\n    # ${configWgcfConfigFolderPath}/wgcf register --config \"${configWgcfAccountFilePath}\"\n\n    if [[ -f ${configWgcfAccountFilePath} ]]; then\n        echo\n    else\n        yes | ${configWgcfConfigFolderPath}/wgcf register\n    fi\n\n    echo\n    echo\n    green \" ==================================================\"\n    yellow \" 没有购买过WARP+ 订阅请直接按回车跳过此步, Press enter to continue without WARP+\"\n    echo\n    yellow \" 如已购买过 WARP+ subscription 订阅, 可以填入 license key 启用WARP+\"\n    green \" 查看方法: 手机打开 open Cloudflare 1.1.1.1 app, 点击右上菜单 click hamburger menu button on the top-right corner \"\n    green \" Navigate to: Account > Key, 选择 Account 菜单里的key 就是 license key\"\n    echo\n\n    read -p \"请填写 license key?  直接回车默认跳过此步, 请输入:\" isWARPLicenseKeyInput\n    isWARPLicenseKeyInput=${isWARPLicenseKeyInput:-n}\n\n    if [[ ${isWARPLicenseKeyInput} == [Nn] ]]; then\n        echo\n    else\n        sed -i \"s/license_key =.*/license_key = \\\"${isWARPLicenseKeyInput}\\\"/g\" ${configWgcfAccountFilePath}\n        WGCF_LICENSE_KEY=\"${isWARPLicenseKeyInput}\" wgcf update\n    fi\n\n    if [[ -f ${configWgcfProfileFilePath} ]]; then\n        echo\n    else\n        yes | ${configWgcfConfigFolderPath}/wgcf generate\n    fi\n\n\n    cp ${configWgcfProfileFilePath} ${configWireGuardConfigFilePath}\n\n    enableWireguardIPV6OrIPV4\n\n    echo\n    green \" 开始临时启动 Wireguard, 用于测试是否启动正常, 运行命令: wg-quick up wgcf\"\n    ${sudoCmd} wg-quick up wgcf\n\n    echo\n    green \" 开始验证 Wireguard 是否启动正常, 检测是否使用 Cloudflare 的 ipv6 访问 !\"\n    echo\n    echo \"curl -6 ip.p3terx.com\"\n    curl -6 ip.p3terx.com\n    echo\n    isWireguardIpv6Working=$(curl -6 ip.p3terx.com | grep CLOUDFLARENET )\n    echo\n\n    if [[ -n \"$isWireguardIpv6Working\" ]]; then\n        green \" Wireguard 启动正常, 已成功通过 Cloudflare WARP 提供的 IPv6 访问网络! \"\n    else\n        green \" ================================================== \"\n        red \" Wireguard 通过 curl -6 ip.p3terx.com, 检测使用CLOUDFLARENET的IPV6 访问失败\"\n        red \" 请检查linux 内核安装是否正确\"\n        red \" 安装会继续运行, 也有可能安装成功, 只是IPV6 没有使用\"\n        red \" 检查 WireGuard 是否启动成功, 可运行查看运行状态命令: systemctl status wg-quick@wgcf\"\n        red \" 如果 WireGuard 启动失败, 可运行查看日志命令 寻找原因: journalctl -n 50 -u wg-quick@wgcf\"\n        red \" 如遇到 WireGuard 启动失败, 建议重做新系统后, 不要更换其他内核, 直接安装WireGuard\"\n        green \" ================================================== \"\n    fi\n\n    echo\n    green \" 关闭临时启动用于测试的 Wireguard, 运行命令: wg-quick down wgcf \"\n    ${sudoCmd} wg-quick down wgcf\n    echo\n\n    ${sudoCmd} systemctl daemon-reload\n\n    # 设置开机启动\n    ${sudoCmd} systemctl enable wg-quick@wgcf\n\n    # 启用守护进程\n    ${sudoCmd} systemctl start wg-quick@wgcf\n\n    # (crontab -l ; echo \"12 6 * * 1 systemctl restart wg-quick@wgcf \") | sort - | uniq - | crontab -\n\n    checkWireguardBootStatus\n\n    echo\n    green \" ================================================== \"\n    green \"  Wireguard 和 Cloudflare WARP 命令行工具 Wgcf ${versionWgcf} 安装成功 !\"\n    green \"  Cloudflare WARP 申请的账户配置文件路径: ${configWgcfAccountFilePath} \"\n    green \"  Cloudflare WARP 生成的 Wireguard 配置文件路径: ${configWireGuardConfigFilePath} \"\n    echo\n    green \"  Wireguard 停止命令: systemctl stop wg-quick@wgcf  启动命令: systemctl start wg-quick@wgcf  重启命令: systemctl restart wg-quick@wgcf\"\n    green \"  Wireguard 查看日志: journalctl -n 50 -u wg-quick@wgcf\"\n    green \"  Wireguard 查看运行状态: systemctl status wg-quick@wgcf\"\n    echo\n    green \"  用本脚本安装v2ray或xray 可以选择是否 解锁 Netflix 限制 和 避免弹出 Google reCAPTCHA 人机验证 !\"\n    echo\n    green \"  其他脚本安装的v2ray或xray 请自行替换 v2ray或xray 配置文件!\"\n    green \"  可参考 如何使用 IPv6 访问 Netflix 的教程 https://ybfl.xyz/111.html 或 https://toutyrater.github.io/app/netflix.html\"\n    green \" ================================================== \"\n\n}\n\n\n\n\nfunction enableWireguardIPV6OrIPV4(){\n    # https://p3terx.com/archives/use-cloudflare-warp-to-add-extra-ipv4-or-ipv6-network-support-to-vps-servers-for-free.html\n\n\n    ${sudoCmd} systemctl stop wg-quick@wgcf\n\n    cp /etc/resolv.conf ${configWireGuardDNSBackupFilePath}\n\n    sed -i '/nameserver 2a00\\:1098\\:2b\\:\\:1/d' /etc/resolv.conf\n\n    sed -i '/nameserver 8\\.8/d' /etc/resolv.conf\n    sed -i '/nameserver 9\\.9/d' /etc/resolv.conf\n    sed -i '/nameserver 1\\.1\\.1\\.1/d' /etc/resolv.conf\n\n    echo\n    green \" ================================================== \"\n    yellow \" 请选择为服务器添加 IPv6 网络 还是 IPv4 网络支持: \"\n    echo\n    green \" 1 添加 IPv6 网络 (用于解锁 Netflix 限制 和避免弹出 Google reCAPTCHA 人机验证)\"\n    green \" 2 添加 IPv4 网络 (用于给只有 IPv6 的 VPS主机添加 IPv4 网络支持)\"\n    echo\n    read -p \"请选择添加 IPv6 还是 IPv4 网络支持? 直接回车默认选1 , 请输入[1/2]:\" isAddNetworkIPv6Input\n\tisAddNetworkIPv6Input=${isAddNetworkIPv6Input:-1}\n\n\tif [[ ${isAddNetworkIPv6Input} == [2] ]]; then\n\n        # 为 IPv6 Only 服务器添加 IPv4 网络支持\n\n        sed -i 's/^AllowedIPs = \\:\\:\\/0/# AllowedIPs = \\:\\:\\/0/g' ${configWireGuardConfigFilePath}\n        sed -i 's/# AllowedIPs = 0\\.0\\.0\\.0/AllowedIPs = 0\\.0\\.0\\.0/g' ${configWireGuardConfigFilePath}\n\n        sed -i 's/engage\\.cloudflareclient\\.com/\\[2606\\:4700\\:d0\\:\\:a29f\\:c001\\]/g' ${configWireGuardConfigFilePath}\n        sed -i 's/162\\.159\\.192\\.1/\\[2606\\:4700\\:d0\\:\\:a29f\\:c001\\]/g' ${configWireGuardConfigFilePath}\n\n        sed -i 's/^DNS = 1\\.1\\.1\\.1/DNS = 2620:fe\\:\\:10,2001\\:4860\\:4860\\:\\:8888,2606\\:4700\\:4700\\:\\:1111/g'  ${configWireGuardConfigFilePath}\n        sed -i 's/^DNS = 8\\.8\\.8\\.8,8\\.8\\.4\\.4,1\\.1\\.1\\.1,9\\.9\\.9\\.10/DNS = 2620:fe\\:\\:10,2001\\:4860\\:4860\\:\\:8888,2606\\:4700\\:4700\\:\\:1111/g'  ${configWireGuardConfigFilePath}\n\n        echo \"nameserver 2a00:1098:2b::1\" >> /etc/resolv.conf\n\n        echo\n        green \" Wireguard 已成功切换到 对VPS服务器的 IPv4 网络支持\"\n\n    else\n\n        # 为 IPv4 Only 服务器添加 IPv6 网络支持\n        sed -i 's/^AllowedIPs = 0\\.0\\.0\\.0/# AllowedIPs = 0\\.0\\.0\\.0/g' ${configWireGuardConfigFilePath}\n        sed -i 's/# AllowedIPs = \\:\\:\\/0/AllowedIPs = \\:\\:\\/0/g' ${configWireGuardConfigFilePath}\n\n        sed -i 's/engage\\.cloudflareclient\\.com/162\\.159\\.192\\.1/g' ${configWireGuardConfigFilePath}\n        sed -i 's/\\[2606\\:4700\\:d0\\:\\:a29f\\:c001\\]/162\\.159\\.192\\.1/g' ${configWireGuardConfigFilePath}\n\n        sed -i 's/^DNS = 1\\.1\\.1\\.1/DNS = 8\\.8\\.8\\.8,8\\.8\\.4\\.4,1\\.1\\.1\\.1,9\\.9\\.9\\.10/g' ${configWireGuardConfigFilePath}\n        sed -i 's/^DNS = 2620:fe\\:\\:10,2001\\:4860\\:4860\\:\\:8888,2606\\:4700\\:4700\\:\\:1111/DNS = 8\\.8\\.8\\.8,1\\.1\\.1\\.1,9\\.9\\.9\\.10/g' ${configWireGuardConfigFilePath}\n\n        echo \"nameserver 8.8.8.8\" >> /etc/resolv.conf\n        echo \"nameserver 8.8.4.4\" >> /etc/resolv.conf\n        echo \"nameserver 1.1.1.1\" >> /etc/resolv.conf\n        #echo \"nameserver 9.9.9.9\" >> /etc/resolv.conf\n        echo \"nameserver 9.9.9.10\" >> /etc/resolv.conf\n\n        echo\n        green \" Wireguard 已成功切换到 对VPS服务器的 IPv6 网络支持\"\n    fi\n\n    green \" ================================================== \"\n    echo\n    green \" Wireguard 配置信息如下 配置文件路径: ${configWireGuardConfigFilePath} \"\n    cat ${configWireGuardConfigFilePath}\n    green \" ================================================== \"\n    echo\n\n    # -n 不为空\n    if [[ -n $1 ]]; then\n        ${sudoCmd} systemctl start wg-quick@wgcf\n    else\n        preferIPV4\n    fi\n}\n\n\n\n\nfunction preferIPV4(){\n\n    if [[ -f \"/etc/gai.conf\" ]]; then\n        sed -i '/^precedence \\:\\:ffff\\:0\\:0/d' /etc/gai.conf\n        sed -i '/^label 2002\\:\\:\\/16/d' /etc/gai.conf\n    fi\n\n    # -z 为空\n    if [[ -z $1 ]]; then\n\n        echo \"precedence ::ffff:0:0/96  100\" >> /etc/gai.conf\n\n        echo\n        green \" VPS服务器已成功设置为 IPv4 优先访问网络\"\n\n    else\n\n        green \" ================================================== \"\n        yellow \" 请为服务器设置 IPv4 还是 IPv6 优先访问: \"\n        echo\n        green \" 1 优先 IPv4 访问网络 (用于 给只有 IPv6 的 VPS主机添加 IPv4 网络支持)\"\n        green \" 2 优先 IPv6 访问网络 (用于 解锁 Netflix 限制 和避免弹出 Google reCAPTCHA 人机验证)\"\n        green \" 3 删除 IPv4 或 IPv6 优先访问的设置, 还原为系统默认配置\"\n        echo\n        red \" 注意: 选2后 优先使用 IPv6 访问网络 可能造成无法访问某些不支持IPv6的网站! \"\n        red \" 注意: 解锁Netflix限制和避免弹出Google人机验证 一般不需要选择2设置IPv6优先访问, 可以在V2ray的配置中单独设置对Netfile和Google使用IPv6访问 \"\n        red \" 注意: 由于 trojan 或 trojan-go 不支持配置 使用IPv6优先访问Netfile和Google, 可以选择2 开启服务器优先IPv6访问, 解决 trojan-go 解锁Netfile和Google人机验证问题\"\n        echo\n        read -p \"请选择 IPv4 还是 IPv6 优先访问? 直接回车默认选1, 请输入[1/2/3]:\" isPreferIPv4Input\n        isPreferIPv4Input=${isPreferIPv4Input:-1}\n\n        if [[ ${isPreferIPv4Input} == [2] ]]; then\n\n            # 设置 IPv6 优先\n            echo \"label 2002::/16   2\" >> /etc/gai.conf\n\n            echo\n            green \" VPS服务器已成功设置为 IPv6 优先访问网络 \"\n        elif [[ ${isPreferIPv4Input} == [3] ]]; then\n\n            echo\n            green \" VPS服务器 已删除 IPv4 或 IPv6 优先访问的设置, 还原为系统默认配置 \"\n        else\n            # 设置 IPv4 优先\n            echo \"precedence ::ffff:0:0/96  100\" >> /etc/gai.conf\n\n            echo\n            green \" VPS服务器已成功设置为 IPv4 优先访问网络 \"\n        fi\n\n        green \" ================================================== \"\n        echo\n        yellow \" 验证 IPv4 或 IPv6 访问网络优先级测试, 命令: curl ip.p3terx.com \"\n        echo\n        curl ip.p3terx.com\n        echo\n        green \" 上面信息显示 如果是IPv4地址 则VPS服务器已设置为 IPv4优先访问. 如果是IPv6地址则已设置为 IPv6优先访问 \"\n        green \" ================================================== \"\n\n    fi\n    echo\n\n}\n\nfunction removeWireguard(){\n    green \" ================================================== \"\n    red \" 准备卸载 Wireguard 和 Cloudflare WARP 命令行工具 Wgcf \"\n    green \" ================================================== \"\n\n    if [[ -f \"${configWgcfBinPath}/wgcf\" || -f \"${configWgcfConfigFolderPath}/wgcf\" || -f \"/wgcf\" ]]; then\n        ${sudoCmd} systemctl stop wg-quick@wgcf.service\n        ${sudoCmd} systemctl disable wg-quick@wgcf.service\n\n        ${sudoCmd} wg-quick down wgcf\n        ${sudoCmd} wg-quick disable wgcf\n\n\n        if [[ \"${osRelease}\" == \"debian\" || \"${osRelease}\" == \"ubuntu\" ]]; then\n\n            $osSystemPackage -y remove wireguard-tools\n            $osSystemPackage -y remove wireguard\n\n        elif [[ \"${osRelease}\" == \"centos\" ]]; then\n            $osSystemPackage -y remove kmod-wireguard\n            $osSystemPackage -y remove wireguard-dkms\n            $osSystemPackage -y remove wireguard-tools\n        fi\n\n        echo\n        read -p \"是否删除Wgcf申请的账号文件, 默认不删除, 方便以后不用在重新注册, 请输入[y/N]:\" isWgcfAccountFileRemoveInput\n        isWgcfAccountFileRemoveInput=${isWgcfAccountFileRemoveInput:-n}\n\n        echo\n        if [[ $isWgcfAccountFileRemoveInput == [Yy] ]]; then\n            rm -rf \"${configWgcfConfigFolderPath}\"\n            green \" Wgcf申请的账号信息文件 ${configWgcfAccountFilePath} 已删除!\"\n\n        else\n            rm -f \"${configWgcfProfileFilePath}\"\n            green \" Wgcf申请的账号信息文件 ${configWgcfAccountFilePath} 已保留! \"\n        fi\n\n\n        rm -f ${configWgcfBinPath}/wgcf\n        rm -rf ${configWireGuardConfigFileFolder}\n        rm -f ${osSystemMdPath}wg-quick@wgcf.service\n\n        rm -f /usr/bin/wg\n        rm -f /usr/bin/wg-quick\n        rm -f /usr/share/man/man8/wg.8\n        rm -f /usr/share/man/man8/wg-quick.8\n\n        [ -d \"/etc/wireguard\" ] && (\"rm -rf /etc/wireguard\")\n\n\n        sleep 2\n        modprobe -r wireguard\n\n        cp -f ${configWireGuardDNSBackupFilePath} /etc/resolv.conf\n\n        green \" ================================================== \"\n        green \"  Wireguard 和 Cloudflare WARP 命令行工具 Wgcf 卸载完毕 !\"\n        green \" ================================================== \"\n\n    else\n        red \" 系统没有安装 Wireguard 和 Wgcf, 退出卸载\"\n        echo\n    fi\n\n\n\n}\n\nfunction removeWARP(){\n    green \" ================================================== \"\n    red \" 准备卸载 Cloudflare WARP 官方 linux client \"\n    green \" ================================================== \"\n\n    if [[ -f \"/usr/bin/warp-cli\" ]]; then\n        ${sudoCmd} warp-cli disable-always-on\n        ${sudoCmd} warp-cli disconnect\n        ${sudoCmd} systemctl stop warp-svc\n        sleep 5s\n\n        if [[ \"${osRelease}\" == \"debian\" || \"${osRelease}\" == \"ubuntu\" ]]; then\n\n            ${sudoCmd} apt purge -y cloudflare-warp\n            rm -f /etc/apt/sources.list.d/cloudflare-client.list\n\n        elif [[ \"${osRelease}\" == \"centos\" ]]; then\n            yum remove -y cloudflare-warp\n        fi\n\n        rm -f ${configWARPPortFilePath}\n\n        crontab -l | grep -v 'warp-cli'  | crontab -\n        crontab -l | grep -v 'warp-svc'  | crontab -\n\n        green \" ================================================== \"\n        green \"  Cloudflare WARP linux client 卸载完毕 !\"\n        green \" ================================================== \"\n    else\n        red \" 系统没有安装 Cloudflare WARP linux client, 退出卸载\"\n        echo\n    fi\n\n}\n\nfunction checkWireguardBootStatus(){\n    echo\n    green \" ================================================== \"\n    isWireguardBootSuccess=$(systemctl status wg-quick@wgcf | grep -E \"Active: active\")\n    if [[ -z \"${isWireguardBootSuccess}\" ]]; then\n        green \" 状态显示-- Wireguard 已启动${Red_font_prefix}失败${Green_font_prefix}! 请查看 Wireguard 运行日志, 寻找错误后重启 Wireguard \"\n    else\n        green \" 状态显示-- Wireguard 已启动成功! \"\n        echo\n        echo \"wgcf trace\"\n        echo\n        wgcf trace\n        echo\n    fi\n    green \" ================================================== \"\n    echo\n}\n\ncloudflare_Trace_URL='https://www.cloudflare.com/cdn-cgi/trace'\nfunction checkWarpClientStatus(){\n\n    if [[ -f \"${configWARPPortFilePath}\" ]]; then\n        configWarpPort=$(cat ${configWARPPortFilePath})\n    fi\n\n    echo\n    green \" ================================================== \"\n    sleep 2s\n    isWarpClientBootSuccess=$(systemctl is-active warp-svc | grep -E \"inactive\")\n    if [[ -z \"${isWarpClientBootSuccess}\" ]]; then\n        green \" 状态显示-- WARP 已启动成功! \"\n        echo\n\n        isWarpClientMode=$(curl -sx \"socks5h://127.0.0.1:${configWarpPort}\" ${cloudflare_Trace_URL} --connect-timeout 20 | grep warp | cut -d= -f2)\n        sleep 3s\n        case ${isWarpClientMode} in\n        on)\n            green \" 状态显示-- WARP SOCKS5 代理已启动成功, 端口号 ${configWarpPort} ! \"\n            ;;\n        plus)\n            green \" 状态显示-- WARP+ SOCKS5 代理已启动成功, 端口号 ${configWarpPort} ! \"\n            ;;\n        *)\n            green \" 状态显示-- WARP SOCKS5 代理启动${Red_font_prefix}失败${Green_font_prefix}! \"\n            ;;\n        esac\n\n        green \" ================================================== \"\n        echo\n        echo \"curl -x 'socks5h://127.0.0.1:${configWarpPort}' ${cloudflare_Trace_URL}\"\n        echo\n        curl -x \"socks5h://127.0.0.1:${configWarpPort}\" ${cloudflare_Trace_URL}\n    else\n        green \" 状态显示-- WARP 已启动${Red_font_prefix}失败${Green_font_prefix}! 请查看 WARP 运行日志, 寻找错误后重启 WARP \"\n    fi\n    green \" ================================================== \"\n    echo\n}\n\n\nfunction restartWireguard(){\n    echo\n    echo \"systemctl restart wg-quick@wgcf\"\n    systemctl restart wg-quick@wgcf\n    green \" Wireguard 已重启 !\"\n    echo\n}\nfunction startWARP(){\n    echo\n    echo \"systemctl start warp-svc\"\n    systemctl start warp-svc\n    echo\n    echo \"warp-cli connect\"\n    warp-cli connect\n    echo\n    echo \"warp-cli enable-always-on\"\n    warp-cli enable-always-on\n    green \" WARP SOCKS5 代理 已启动 !\"\n}\nfunction stopWARP(){\n    echo\n    echo \"warp-cli disable-always-on\"\n    warp-cli disable-always-on\n    echo\n    echo \"warp-cli disconnect\"\n    warp-cli disconnect\n    echo\n    echo \"systemctl stop warp-svc\"\n    systemctl stop warp-svc\n    green \" WARP SOCKS5 代理 已停止 !\"\n}\nfunction restartWARP(){\n    echo\n    echo \"warp-cli disable-always-on\"\n    warp-cli disable-always-on\n    echo\n    echo \"warp-cli disconnect\"\n    warp-cli disconnect\n    echo\n    echo \"systemctl restart warp-svc\"\n    systemctl restart warp-svc\n    sleep 5s\n    echo\n    read -p \"Press enter to continue\"\n    echo\n    echo \"warp-cli connect\"\n    warp-cli connect\n    echo\n    echo \"warp-cli enable-always-on\"\n    warp-cli enable-always-on\n    echo\n    green \" WARP SOCKS5 代理 已重启 !\"\n    echo\n}\n\nfunction checkWireguard(){\n    echo\n    green \" ==================================================\"\n    echo\n    green \" 1. 查看当前系统内核版本, 检查是否因为装了多个版本内核导致 Wireguard 启动失败\"\n    echo\n    green \" 2. 查看 Wireguard 和 WARP SOCKS5 代理运行状态\"\n    echo\n    green \" 3. 查看 Wireguard 运行日志, 如果 Wireguard 启动失败 请用此项查找问题\"\n    green \" 4. 启动 Wireguard \"\n    green \" 5. 停止 Wireguard \"\n    green \" 6. 重启 Wireguard \"\n    green \" 7. 查看 Wireguard 和 WARP 运行状态 wgcf status \"\n    green \" 8. 查看 Wireguard 配置文件 ${configWireGuardConfigFilePath} \"\n    green \" 9. 用VI 编辑 Wireguard 配置文件 ${configWireGuardConfigFilePath} \"\n    echo\n    green \" 11. 查看 WARP SOCKS5 运行日志, 如果 WARP 启动失败 请用此项查找问题\"\n    green \" 12. 启动 WARP SOCKS5 代理\"\n    green \" 13. 停止 WARP SOCKS5 代理\"\n    green \" 14. 重启 WARP SOCKS5 代理\"\n    echo\n    green \" 15. 查看 WARP SOCKS5 运行状态 warp-cli status\"\n    green \" 16. 查看 WARP SOCKS5 连接信息 warp-cli warp-stats\"\n    green \" 17. 查看 WARP SOCKS5 设置信息 warp-cli settings\"\n    green \" 18. 查看 WARP SOCKS5 账户信息 warp-cli account\"\n\n    green \" ==================================================\"\n    green \" 0. 退出脚本\"\n    echo\n    read -p \"请输入数字:\" menuNumberInput\n    case \"$menuNumberInput\" in\n        1 )\n            showLinuxKernelInfo\n            listInstalledLinuxKernel\n        ;;\n        2 )\n            echo\n            #echo \"systemctl status wg-quick@wgcf\"\n            #systemctl status wg-quick@wgcf\n            #red \" 请查看上面 Active: 一行信息, 如果文字是绿色 active 则为启动正常, 否则启动失败\"\n            checkWireguardBootStatus\n            checkWarpClientStatus\n        ;;\n        3 )\n            echo\n            echo \"journalctl -n 100 -u wg-quick@wgcf\"\n            journalctl -n 100 -u wg-quick@wgcf\n            red \" 请查看上面包含 Error 的信息行, 查找启动失败的原因 \"\n        ;;\n        4 )\n            echo\n            echo \"systemctl start wg-quick@wgcf\"\n            systemctl start wg-quick@wgcf\n            echo\n            green \" Wireguard 已启动 !\"\n            checkWireguardBootStatus\n        ;;\n        5 )\n            echo\n            echo \"systemctl stop wg-quick@wgcf\"\n            systemctl stop wg-quick@wgcf\n            echo\n            green \" Wireguard 已停止 !\"\n            checkWireguardBootStatus\n        ;;\n        6 )\n            restartWireguard\n            checkWireguardBootStatus\n        ;;\n        7 )\n            echo\n            green \"Running command 'wgcf status' to check device status :\"\n            echo\n            wgcf status\n            echo\n            echo\n            green \"Running command 'wgcf trace' to verify WARP/WARP+ works :\"\n            echo\n            wgcf trace\n            echo\n        ;;\n        8 )\n            echo\n            echo \"cat ${configWireGuardConfigFilePath}\"\n            cat ${configWireGuardConfigFilePath}\n        ;;\n        9 )\n            echo\n            echo \"vi ${configWireGuardConfigFilePath}\"\n            vi ${configWireGuardConfigFilePath}\n        ;;\n        11 )\n            echo\n            echo \"journalctl --no-pager -u warp-svc \"\n            journalctl --no-pager -u warp-svc\n            red \" 请查看上面包含 Error 的信息行, 查找启动失败的原因 \"\n        ;;\n        12 )\n            startWARP\n            checkWarpClientStatus\n        ;;\n        13 )\n            stopWARP\n            checkWarpClientStatus\n        ;;\n        14 )\n            restartWARP\n            checkWarpClientStatus\n        ;;\n        15 )\n            echo\n            echo \"warp-cli status\"\n            warp-cli status\n        ;;\n        16 )\n            echo\n            echo \"warp-cli warp-stats\"\n            warp-cli warp-stats\n        ;;\n        17 )\n            echo\n            echo \"warp-cli settings\"\n            warp-cli settings\n        ;;\n        18 )\n            echo\n            echo \"warp-cli account\"\n            warp-cli account\n        ;;\n        0 )\n            exit 1\n        ;;\n        * )\n            clear\n            red \"请输入正确数字 !\"\n            sleep 2s\n            checkWireguard\n        ;;\n    esac\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction start_menu(){\n    clear\n\n    if [[ $1 == \"first\" ]] ; then\n        getLinuxOSRelease\n        installSoftDownload\n    fi\n    showLinuxKernelInfoNoDisplay\n\n    if [[ ${configLanguage} == \"cn\" ]] ; then\n    green \" ==================================================\"\n    green \" Linux 内核 一键安装脚本 | 2024-09-25 | 系统支持：centos7+ / debian10+ / ubuntu16.04+\"\n    green \" Linux 内核 4.9 以上都支持开启BBR, 如要开启BBR Plus 则需要安装支持BBR Plus的内核 \"\n    red \" 在任何生产环境中请谨慎使用此脚本, 升级内核有风险, 请做好备份！在某些VPS会导致无法启动! \"\n    green \" ==================================================\"\n    if [[ -z ${osKernelBBRStatus} ]]; then\n        echo -e \" 当前系统内核: ${osKernelVersionBackup} (${virtual})   ${Red_font_prefix}未安装 BBR 或 BBR Plus ${Font_color_suffix} 加速内核, 请先安装4.9以上内核 \"\n    else\n        if [ ${systemBBRRunningStatus} = \"no\" ]; then\n            echo -e \" 当前系统内核: ${osKernelVersionBackup} (${virtual})   ${Green_font_prefix}已安装 ${osKernelBBRStatus}${Font_color_suffix} 加速内核, ${Red_font_prefix}${systemBBRRunningStatusText}${Font_color_suffix} \"\n        else\n            echo -e \" 当前系统内核: ${osKernelVersionBackup} (${virtual})   ${Green_font_prefix}已安装 ${osKernelBBRStatus}${Font_color_suffix} 加速内核, ${Green_font_prefix}${systemBBRRunningStatusText}${Font_color_suffix} \"\n        fi\n    fi\n    echo -e \" 当前拥塞控制算法: ${Green_font_prefix}${net_congestion_control}${Font_color_suffix}    ECN: ${Green_font_prefix}${systemECNStatusText}${Font_color_suffix}   当前队列算法: ${Green_font_prefix}${net_qdisc}${Font_color_suffix} \"\n\n    echo\n    green \" 1. 查看当前系统内核版本, 检查是否支持BBR / BBR2 / BBR Plus\"\n    green \" 2. 开启 BBR 或 BBR2 加速, 开启 BBR2 需要安装 XanMod 内核\"\n    green \" 3. 开启 BBR Plus 加速\"\n    green \" 4. 优化 系统网络配置\"\n    red \" 5. 删除 系统网络优化配置\"\n    echo\n    green \" 6. 查看 Wireguard 运行状态\"\n    green \" 7. 重启 Wireguard \"\n    green \" 8. 查看 WARP SOCKS5 代理运行状态\"\n    green \" 9. 重启 WARP SOCKS5\"\n    green \" 10. 查看 WireGuard 和 WARP SOCKS5 运行状态, 错误日志, 如果WireGuard启动失败 请选该项排查错误\"\n    echo\n    green \" 11. 安装官方 Cloudflare WARP Client 启动SOCKS5代理, 用于解锁 Netflix 限制\"\n    green \" 12. 安装 WireGuard 和 Cloudflare WARP 工具 Wgcf, 启动 IPv4或IPv6, 用于避免弹出Google人机验证\"\n    green \" 13. 同时安装 官方 Cloudflare WARP Client, WireGuard 和 命令行工具 Wgcf, 不推荐 \"\n    red \" 14. 卸载 WireGuard 和 Cloudflare WARP linux client\"\n    green \" 15. 切换 WireGuard 对VPS服务器的 IPv6 和 IPv4 的网络支持\"\n    green \" 16. 设置 VPS 服务器 IPv4 还是 IPv6 网络优先访问\"\n\n    green \" 21. 安装 warp 脚本 by fscarmen\"\n    green \" 22. 安装 warp-go 脚本 by fscarmen\"\n    green \" 23. 自动刷新WARP IP 直到支持 Netflix 非自制剧解锁 \"\n    # green \" 22. 测试 VPS 是否支持 Netflix 非自制剧解锁 支持 WARP SOCKS5 测试 强烈推荐使用 \"\n\n    echo\n\n    if [[ \"${osRelease}\" == \"centos\" ]]; then\n    green \" 31. 安装 最新版本内核 6.1, 通过elrepo源安装\"\n    green \" 32. 安装 LTS内核 5.4 LTS, 通过elrepo源安装\"\n    green \" 33. 安装 内核 4.14 LTS, 从 altarch网站 下载安装\"\n    green \" 34. 安装 内核 4.19 LTS, 从 altarch网站 下载安装\"\n    green \" 35. 安装 内核 5.4 LTS, 从 elrepo网站 下载安装\"\n    echo\n    green \" 36. 安装 内核 5.10 LTS, Teddysun 编译 推荐安装\"\n    green \" 37. 安装 内核 5.15 LTS, Teddysun 编译 推荐安装\"\n    green \" 38. 安装 内核 6.1 LTS, Teddysun 编译 下载安装. \"\n    green \" 39. 安装 内核 6.6 LTS, Teddysun 编译 下载安装. \"\n    green \" 40. 安装 内核 6.11 , elrepo 官方编译. \"\n\n    else\n        if [[ \"${osRelease}\" == \"debian\" ]]; then\n\n            if [[ \"${osReleaseVersion}\" == \"10\" ]]; then\n                green \" 41. 安装 LTS内核 5.10 LTS, 通过 Debian 官方源安装\"\n            fi\n            if [[ \"${osReleaseVersion}\" == \"11\" ]]; then\n                green \" 41. 安装 LTS内核 5.10 LTS, 通过 Debian 官方源安装\"\n                green \" 42. 安装 内核 5.19, 通过 Debian 官方源安装\"\n                green \" 43. 安装 最新版本内核 6.1 或更高, 通过 Debian 官方源安装\"\n            fi\n            if [[ \"${osReleaseVersion}\" == \"12\" ]]; then\n                green \" 43. 安装 LTS内核 6.1 LTS, 通过 Debian 官方源安装\"\n            fi\n            echo\n        fi\n\n        green \" 44. 安装 内核 4.19 LTS, 通过 Ubuntu kernel mainline 安装\"\n        green \" 45. 安装 内核 5.4 LTS, 通过 Ubuntu kernel mainline 安装\"\n        green \" 46. 安装 内核 5.10 LTS, 通过 Ubuntu kernel mainline 安装\"\n        green \" 47. 安装 内核 5.15, 通过 Ubuntu kernel mainline 安装\"\n        green \" 48. 安装 内核 5.19, 通过 Ubuntu kernel mainline 安装\"\n        green \" 49. 安装 最新版本内核 6.1, 通过 Ubuntu kernel mainline 安装\"\n        echo\n        green \" 51. 安装 XanMod Kernel 内核 6.6 LTS, 官方源安装 \"\n        green \" 52. 安装 XanMod Kernel 内核 6.11, 官方源安装 \"\n\n    fi\n\n    echo\n    green \" 61. 安装 BBR Plus 内核 4.14.129 LTS, cx9208 编译的 dog250 原版, 推荐使用\"\n    green \" 62. 安装 BBR Plus 内核 4.14 LTS, UJX6N 编译\"\n    green \" 63. 安装 BBR Plus 内核 4.19 LTS, UJX6N 编译\"\n    green \" 64. 安装 BBR Plus 内核 5.10 LTS, UJX6N 编译\"\n    green \" 65. 安装 BBR Plus 内核 5.15 LTS, UJX6N 编译\"\n    green \" 66. 安装 BBR Plus 内核 6.1 LTS, UJX6N 编译\"\n    green \" 67. 安装 BBR Plus 内核 6.6 LTS, UJX6N 编译\"\n    green \" 68. 安装 BBR Plus 最新版内核 6.7 或更高版本, UJX6N 编译\"\n\n    echo\n    green \" 0. 退出脚本\"\n\n\n    else\n\n    green \" ==================================================\"\n    green \" Linux kernel install script | 2024-09-25 | OS support：centos7+ / debian10+ / ubuntu16.04+\"\n    green \" Enable bbr require linux kernel higher than 4.9. Enable bbr plus require special bbr plus kernel \"\n    red \" Please use this script with caution in production. Backup your data first! Upgrade linux kernel will cause VPS unable to boot sometimes.\"\n    green \" ==================================================\"\n    if [[ -z ${osKernelBBRStatus} ]]; then\n        echo -e \" Current Kernel: ${osKernelVersionBackup} (${virtual})   ${Red_font_prefix}Not install BBR / BBR Plus ${Font_color_suffix} , Please install kernel which is higher than 4.9\"\n    else\n        if [ ${systemBBRRunningStatus} = \"no\" ]; then\n            echo -e \" Current Kernel: ${osKernelVersionBackup} (${virtual})   ${Green_font_prefix}installed ${osKernelBBRStatus}${Font_color_suffix} kernel, ${Red_font_prefix}${systemBBRRunningStatusText}${Font_color_suffix} \"\n        else\n            echo -e \" Current Kernel: ${osKernelVersionBackup} (${virtual})   ${Green_font_prefix}installed ${osKernelBBRStatus}${Font_color_suffix} kernel, ${Green_font_prefix}${systemBBRRunningStatusText}${Font_color_suffix} \"\n        fi\n    fi\n    echo -e \" Congestion Control Algorithm: ${Green_font_prefix}${net_congestion_control}${Font_color_suffix}    ECN: ${Green_font_prefix}${systemECNStatusText}${Font_color_suffix}   Network Queue Algorithm: ${Green_font_prefix}${net_qdisc}${Font_color_suffix} \"\n\n    echo\n    green \" 1. Show current linux kernel version, check supoort BBR / BBR2 / BBR Plus or not\"\n    green \" 2. enable bbr / bbr2 acceleration, (bbr2 require XanMod kernel)\"\n    green \" 3. enable bbr plus acceleration\"\n    green \" 4. Optimize system network configuration\"\n    red \" 5. Remove system network optimization configuration\"\n    echo\n    green \" 6. Show Wireguard working status\"\n    green \" 7. restart Wireguard \"\n    green \" 8. Show WARP SOCKS5 proxy working status\"\n    green \" 9. restart WARP SOCKS5 proxy\"\n    green \" 10. Show WireGuard and WARP SOCKS5 working status, error log, etc.\"\n    echo\n    green \" 11. Install official Cloudflare WARP linux client SOCKS5 proxy, in order to unlock Netflix geo restriction \"\n    green \" 12. Install WireGuard and Cloudflare WARP tool Wgcf, enable IPv4 or IPv6, avoid Google reCAPTCHA\"\n    green \" 13. Install official Cloudflare WARP linux client, WireGuard and WARP toll Wgcf, not recommended \"\n    red \" 14. Remove WireGuard 和 Cloudflare WARP linux client\"\n    green \" 15. Switch WireGuard using IPv6 or IPv4 for your VPS\"\n    green \" 16. Set VPS using IPv4 or IPv6 firstly to access network\"\n\n    green \" 21. Install warp by fscarmen. Enable IPv6, avoid Google reCAPTCHA and unlock Netflix geo restriction \"\n    green \" 22. Install warp-go by fscarmen. Enable IPv6, avoid Google reCAPTCHA and unlock Netflix geo restriction \"\n    green \" 23. Auto refresh Cloudflare WARP IP to unlock Netflix non-self produced drama\"\n    echo\n\n    if [[ \"${osRelease}\" == \"centos\" ]]; then\n    green \" 31. Install latest linux kernel, 6.1, from elrepo yum repository\"\n    green \" 32. Install LTS linux kernel, 5.4 LTS, from elrepo yum repository\"\n    green \" 33. Install linux kernel 4.14 LTS, download and install from altarch website\"\n    green \" 34. Install linux kernel 4.19 LTS, download and install from altarch website\"\n    green \" 35. Install linux kernel 5.4 LTS, download and install from elrepo website\"\n    echo\n    green \" 36. Install linux kernel 5.10 LTS, compile by Teddysun. Recommended\"\n    green \" 37. Install linux kernel 5.15 LTS, compile by Teddysun. Recommended\"\n    green \" 38. Install linux kernel 6.1 LTS compile by Teddysun. Recommended\"\n    green \" 39. Install linux kernel 6.6 LTS compile by Teddysun. Recommended\"\n    green \" 40. Install linux kernel 6.11, compile by elrepo \"\n    else\n        if [[ \"${osRelease}\" == \"debian\" ]]; then\n            if [[ \"${osReleaseVersion}\" == \"10\" ]]; then\n                green \" 41. Install LTS linux kernel, 5.10 LTS, from Debian repository source\"\n            fi\n\n            if [[ \"${osReleaseVersion}\" == \"11\" ]]; then\n                green \" 41. Install LTS linux kernel, 5.10 LTS, from Debian repository source\"\n                green \" 42. Install linux kernel, 5.19, from Debian repository source\"\n                green \" 43. Install latest linux kernel, 6.1 or higher, from Debian repository source\"\n            fi\n            if [[ \"${osReleaseVersion}\" == \"12\" ]]; then\n                green \" 43. Install LTS linux kernel, 6.1 LTS, from Debian repository source\"\n            fi\n            echo\n        fi\n\n    green \" 44. Install linux kernel 4.19 LTS, download and install from Ubuntu kernel mainline\"\n    green \" 45. Install linux kernel 5.4 LTS, download and install from Ubuntu kernel mainline\"\n    green \" 46. Install linux kernel 5.10 LTS, download and install from Ubuntu kernel mainline\"\n    green \" 47. Install linux kernel 5.15, download and install from Ubuntu kernel mainline\"\n    green \" 48. Install linux kernel 5.19, download and install from Ubuntu kernel mainline\"\n    green \" 49. Install latest linux kernel 6.1, download and install from Ubuntu kernel mainline\"\n    echo\n    green \" 51. Install XanMod kernel 6.6 LTS, from XanMod repository source \"\n    green \" 52. Install XanMod kernel 6.11, from XanMod repository source \"\n    fi\n\n    echo\n    green \" 61. Install BBR Plus kernel 4.14.129 LTS, compile by cx9208 from original dog250 source code. Recommended\"\n    green \" 62. Install BBR Plus kernel 4.14 LTS, compile by UJX6N\"\n    green \" 63. Install BBR Plus kernel 4.19 LTS, compile by UJX6N\"\n    green \" 64. Install BBR Plus kernel 5.10 LTS, compile by UJX6N\"\n    green \" 65. Install BBR Plus kernel 5.15 LTS, compile by UJX6N\"\n    green \" 66. Install BBR Plus kernel 6.1 LTS, compile by UJX6N\"\n    green \" 67. Install BBR Plus kernel 6.6 LTS, compile by UJX6N\"\n    green \" 68. Install BBR Plus latest kernel 6.7 or higher, compile by UJX6N\"\n    echo\n    green \" 0. exit\"\n\n    fi\n\n    echo\n    read -r -p \"Please input number:\" menuNumberInput\n    case \"$menuNumberInput\" in\n        1 )\n            showLinuxKernelInfo\n            listInstalledLinuxKernel\n        ;;\n        2 )\n            enableBBRSysctlConfig \"bbr\"\n        ;;\n        3 )\n            enableBBRSysctlConfig \"bbrplus\"\n        ;;\n        4 )\n            addOptimizingSystemConfig\n        ;;\n        5 )\n            removeOptimizingSystemConfig\n            sysctl -p\n        ;;\n        6 )\n            checkWireguardBootStatus\n        ;;\n        7 )\n            restartWireguard\n            checkWireguardBootStatus\n        ;;\n        8 )\n            checkWarpClientStatus\n        ;;\n        9 )\n            restartWARP\n            checkWarpClientStatus\n        ;;\n        10 )\n           checkWireguard\n        ;;\n        11 )\n           installWARPClient\n        ;;\n        12 )\n           installWireguard\n        ;;\n        13 )\n           installWireguard\n           installWARPClient\n        ;;\n        14 )\n           removeWireguard\n           removeWARP\n        ;;\n        15 )\n           enableWireguardIPV6OrIPV4 \"redo\"\n        ;;\n        16 )\n           preferIPV4 \"redo\"\n        ;;\n\n        21 )\n           installWARP\n        ;;\n        22 )\n           installWARPGO\n        ;;\n        23 )\n           vps_netflix_auto\n        ;;\n        24 )\n           vps_netflix_jin\n        ;;\n        25 )\n           vps_netflix_jin_auto\n        ;;\n        31 )\n            linuxKernelToInstallVersion=\"5.19\"\n            isInstallFromRepo=\"yes\"\n            installKernel\n        ;;\n        32 )\n            linuxKernelToInstallVersion=\"5.4\"\n            isInstallFromRepo=\"yes\"\n            installKernel\n        ;;\n        33 )\n            linuxKernelToInstallVersion=\"4.14\"\n            installKernel\n        ;;\n        34 )\n            linuxKernelToInstallVersion=\"4.19\"\n            installKernel\n        ;;\n        35 )\n            linuxKernelToInstallVersion=\"5.4\"\n            installKernel\n        ;;\n        36 )\n            linuxKernelToInstallVersion=\"5.10\"\n            installKernel\n        ;;\n        37 )\n            linuxKernelToInstallVersion=\"5.15\"\n            installKernel\n        ;;\n        38 )\n            linuxKernelToInstallVersion=\"6.1\"\n            installKernel\n        ;;\n        39 )\n            linuxKernelToInstallVersion=\"6.6\"\n            installKernel\n        ;;\n        40 )\n            linuxKernelToInstallVersion=\"6.11\"\n            installKernel\n        ;;\n        41 )\n            linuxKernelToInstallVersion=\"5.10\"\n            isInstallFromRepo=\"yes\"\n            installKernel\n        ;;\n        42 )\n            linuxKernelToInstallVersion=\"5.19\"\n            isInstallFromRepo=\"yes\"\n            installKernel\n        ;;\n        43 )\n            linuxKernelToInstallVersion=\"6.1\"\n            isInstallFromRepo=\"yes\"\n            installKernel\n        ;;\n        44 )\n            linuxKernelToInstallVersion=\"4.19\"\n            installKernel\n        ;;\n        45 )\n            linuxKernelToInstallVersion=\"5.4\"\n            installKernel\n        ;;\n        46 )\n            linuxKernelToInstallVersion=\"5.10.118\"\n            installKernel\n        ;;\n        47 )\n            linuxKernelToInstallVersion=\"5.15\"\n            installKernel\n        ;;\n        48 )\n            linuxKernelToInstallVersion=\"5.19\"\n            installKernel\n        ;;\n        49 )\n            linuxKernelToInstallVersion=\"6.1\"\n            installKernel\n        ;;\n        51 )\n            linuxKernelToInstallVersion=\"6.6\"\n            linuxKernelToBBRType=\"xanmod\"\n            isInstallFromRepo=\"yes\"\n            installKernel\n        ;;\n        52 )\n            linuxKernelToInstallVersion=\"6.11\"\n            linuxKernelToBBRType=\"xanmod\"\n            isInstallFromRepo=\"yes\"\n            installKernel\n        ;;\n        61 )\n            linuxKernelToInstallVersion=\"4.14.129\"\n            linuxKernelToBBRType=\"bbrplus\"\n            installKernel\n        ;;\n        62 )\n            linuxKernelToInstallVersion=\"4.14\"\n            linuxKernelToBBRType=\"bbrplus\"\n            installKernel\n        ;;\n        63 )\n            linuxKernelToInstallVersion=\"4.19\"\n            linuxKernelToBBRType=\"bbrplus\"\n            installKernel\n        ;;\n        64 )\n            linuxKernelToInstallVersion=\"5.10\"\n            linuxKernelToBBRType=\"bbrplus\"\n            installKernel\n        ;;\n        65 )\n            linuxKernelToInstallVersion=\"5.15\"\n            linuxKernelToBBRType=\"bbrplus\"\n            installKernel\n        ;;\n        66 )\n            linuxKernelToInstallVersion=\"6.1\"\n            linuxKernelToBBRType=\"bbrplus\"\n            installKernel\n        ;;\n        67 )\n            linuxKernelToInstallVersion=\"6.6\"\n            linuxKernelToBBRType=\"bbrplus\"\n            installKernel\n        ;;\n        68 )\n            linuxKernelToInstallVersion=\"6.7\"\n            linuxKernelToBBRType=\"bbrplus\"\n            installKernel\n        ;;\n        87 )\n            getLatestUbuntuKernelVersion\n            getLatestCentosKernelVersion\n            getLatestCentosKernelVersion \"manual\"\n        ;;\n        88 )\n            upgradeScript\n        ;;\n        89 )\n            virt_check\n        ;;\n\n        0 )\n            exit 1\n        ;;\n        * )\n            clear\n            red \"请输入正确数字 !\"\n            sleep 2s\n            start_menu\n        ;;\n    esac\n}\n\n\n\nfunction setLanguage(){\n    echo\n    green \" ==================================================\"\n    green \" Please choose your language\"\n    green \" 1. English\"\n    green \" 2. 中文\"\n    echo\n    read -r -p \"Please input your language:\" languageInput\n\n    case \"${languageInput}\" in\n        1 )\n            echo \"en\" > ${configLanguageFilePath}\n            showMenu\n        ;;\n        2 )\n            echo \"cn\" > ${configLanguageFilePath}\n            showMenu\n        ;;\n        * )\n            red \" Please input the correct number !\"\n            setLanguage\n        ;;\n    esac\n}\n\nconfigLanguageFilePath=\"${HOME}/language_setting_v2ray_trojan.md\"\nconfigLanguage=\"cn\"\n\nfunction showMenu(){\n\n    if [ -f \"${configLanguageFilePath}\" ]; then\n        configLanguage=$(cat ${configLanguageFilePath})\n\n        case \"${configLanguage}\" in\n        cn )\n            start_menu \"first\"\n        ;;\n        en )\n            start_menu \"first\"\n        ;;\n        * )\n            setLanguage\n        ;;\n        esac\n    else\n        setLanguage\n    fi\n}\n\nshowMenu\n"
        },
        {
          "name": "linux_install_software.sh",
          "type": "blob",
          "size": 246.078125,
          "content": "#!/bin/bash\n\nexport LC_ALL=C\nexport LANG=en_US.UTF-8\nexport LANGUAGE=en_US.UTF-8\n\n\nsudoCmd=\"\"\nif [[ $(/usr/bin/id -u) -ne 0 ]]; then\n  sudoCmd=\"sudo\"\nfi\n\n\n# fonts color\nred(){\n    echo -e \"\\033[31m\\033[01m$1\\033[0m\"\n}\ngreen(){\n    echo -e \"\\033[32m\\033[01m$1\\033[0m\"\n}\nyellow(){\n    echo -e \"\\033[33m\\033[01m$1\\033[0m\"\n}\nblue(){\n    echo -e \"\\033[34m\\033[01m$1\\033[0m\"\n}\nbold(){\n    echo -e \"\\033[1m\\033[01m$1\\033[0m\"\n}\n\n\n\nfunction showHeaderGreen(){\n    echo\n    green \" ==================================================\"\n\n    for parameter in \"$@\"\n    do\n        if [[ -n \"${parameter}\" ]]; then\n            green \" ${parameter}\"\n        fi\n    done\n\n    green \" ==================================================\"\n    echo\n}\nfunction showHeaderRed(){\n    echo\n    red \" ==================================================\"\n    for parameter in \"$@\"\n    do\n        if [[ -n \"${parameter}\" ]]; then\n            red \" ${parameter}\"\n        fi\n    done\n    red \" ==================================================\"\n    echo\n}\nfunction showInfoGreen(){\n    echo\n    for parameter in \"$@\"\n    do\n        if [[ -n \"${parameter}\" ]]; then\n            green \" ${parameter}\"\n        fi\n    done\n    echo\n}\n\n\nfunction promptContinueOpeartion(){\n\tread -r -p \"是否继续操作? 直接回车默认继续操作, 请输入[Y/n]:\" isContinueInput\n\tisContinueInput=${isContinueInput:-Y}\n\n\tif [[ $isContinueInput == [Yy] ]]; then\n\t\techo \"\"\n\telse\n\t\texit 1\n\tfi\n}\n\n\n\n\n\n\nosCPU=\"\"\nosArchitecture=\"arm\"\nosInfo=\"\"\nosRelease=\"\"\nosReleaseVersion=\"\"\nosReleaseVersionNo=\"\"\nosReleaseVersionNoShort=\"\"\nosReleaseVersionCodeName=\"CodeName\"\nosSystemPackage=\"\"\nosSystemMdPath=\"\"\nosSystemShell=\"bash\"\n\n\nfunction checkArchitecture(){\n\t# https://stackoverflow.com/questions/48678152/how-to-detect-386-amd64-arm-or-arm64-os-architecture-via-shell-bash\n\n\tcase $(uname -m) in\n\t\ti386)   osArchitecture=\"386\" ;;\n\t\ti686)   osArchitecture=\"386\" ;;\n\t\tx86_64) osArchitecture=\"amd64\" ;;\n\t\tarm)    dpkg --print-architecture | grep -q \"arm64\" && osArchitecture=\"arm64\" || osArchitecture=\"arm\" ;;\n\t\taarch64)    dpkg --print-architecture | grep -q \"arm64\" && osArchitecture=\"arm64\" || osArchitecture=\"arm\" ;;\n\t\t* )     osArchitecture=\"arm\" ;;\n\tesac\n}\n\nfunction checkCPU(){\n\tosCPUText=$(cat /proc/cpuinfo | grep vendor_id | uniq)\n\tif [[ $osCPUText =~ \"GenuineIntel\" ]]; then\n\t\tosCPU=\"intel\"\n    elif [[ $osCPUText =~ \"AMD\" ]]; then\n        osCPU=\"amd\"\n    else\n        echo\n    fi\n\n\t# green \" Status 状态显示--当前CPU是: $osCPU\"\n}\n\n# 检测系统版本号\ngetLinuxOSVersion(){\n    if [[ -s /etc/redhat-release ]]; then\n        osReleaseVersion=$(grep -oE '[0-9.]+' /etc/redhat-release)\n    else\n        osReleaseVersion=$(grep -oE '[0-9.]+' /etc/issue)\n    fi\n\n    # https://unix.stackexchange.com/questions/6345/how-can-i-get-distribution-name-and-version-number-in-a-simple-shell-script\n\n    if [ -f /etc/os-release ]; then\n        # freedesktop.org and systemd\n        source /etc/os-release\n        osInfo=$NAME\n        osReleaseVersionNo=$VERSION_ID\n\n        if [ -n \"$VERSION_CODENAME\" ]; then\n            osReleaseVersionCodeName=$VERSION_CODENAME\n        fi\n    elif type lsb_release >/dev/null 2>&1; then\n        # linuxbase.org\n        osInfo=$(lsb_release -si)\n        osReleaseVersionNo=$(lsb_release -sr)\n    elif [ -f /etc/lsb-release ]; then\n        # For some versions of Debian/Ubuntu without lsb_release command\n        . /etc/lsb-release\n        osInfo=$DISTRIB_ID\n\n        osReleaseVersionNo=$DISTRIB_RELEASE\n    elif [ -f /etc/debian_version ]; then\n        # Older Debian/Ubuntu/etc.\n        osInfo=Debian\n        osReleaseVersion=$(cat /etc/debian_version)\n        osReleaseVersionNo=$(sed 's/\\..*//' /etc/debian_version)\n    elif [ -f /etc/redhat-release ]; then\n        osReleaseVersion=$(grep -oE '[0-9.]+' /etc/redhat-release)\n    else\n        # Fall back to uname, e.g. \"Linux <version>\", also works for BSD, etc.\n        osInfo=$(uname -s)\n        osReleaseVersionNo=$(uname -r)\n    fi\n\n    osReleaseVersionNoShort=$(echo $osReleaseVersionNo | sed 's/\\..*//')\n}\n\n# 检测系统发行版代号\nfunction getLinuxOSRelease(){\n    if [[ -f /etc/redhat-release ]]; then\n        osRelease=\"centos\"\n        osSystemPackage=\"yum\"\n        osSystemMdPath=\"/usr/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"\"\n    elif cat /etc/issue | grep -Eqi \"debian|raspbian\"; then\n        osRelease=\"debian\"\n        osSystemPackage=\"apt-get\"\n        osSystemMdPath=\"/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"buster\"\n    elif cat /etc/issue | grep -Eqi \"ubuntu\"; then\n        osRelease=\"ubuntu\"\n        osSystemPackage=\"apt-get\"\n        osSystemMdPath=\"/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"bionic\"\n    elif cat /etc/issue | grep -Eqi \"centos|red hat|redhat\"; then\n        osRelease=\"centos\"\n        osSystemPackage=\"yum\"\n        osSystemMdPath=\"/usr/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"\"\n    elif cat /proc/version | grep -Eqi \"debian|raspbian\"; then\n        osRelease=\"debian\"\n        osSystemPackage=\"apt-get\"\n        osSystemMdPath=\"/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"buster\"\n    elif cat /proc/version | grep -Eqi \"ubuntu\"; then\n        osRelease=\"ubuntu\"\n        osSystemPackage=\"apt-get\"\n        osSystemMdPath=\"/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"bionic\"\n    elif cat /proc/version | grep -Eqi \"centos|red hat|redhat\"; then\n        osRelease=\"centos\"\n        osSystemPackage=\"yum\"\n        osSystemMdPath=\"/usr/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"\"\n    fi\n\n    getLinuxOSVersion\n    checkArchitecture\n\tcheckCPU\n\n\n    [[ -z $(echo $SHELL|grep zsh) ]] && osSystemShell=\"bash\" || osSystemShell=\"zsh\"\n\n    green \" OS info: ${osInfo}, ${osRelease}, ${osReleaseVersion}, ${osReleaseVersionNo}, ${osReleaseVersionCodeName}, ${osCPU} CPU ${osArchitecture}, ${osSystemShell}, ${osSystemPackage}, ${osSystemMdPath}\"\n}\n\n\nconfigLocalVPSIp=\"$(curl https://ipv4.icanhazip.com/)\"\nfunction getVPSIPInput (){\n    echo\n    read -r -p \"请输入VPS的IP地址:\" currentVPSIPaddressInput\n\n    if [[ -n \"${currentVPSIPaddressInput}\" ]]; then\n        configLocalVPSIp=\"${currentVPSIPaddressInput}\"\n    else\n        red \"输入的IP地址无效 请重新输入. Invalid IP address, pls input again.\"\n\n        getVPSIPInput\n    fi\n\n}\nfunction getVPSIP(){\n    configLocalVPSIp=\"$(curl https://ipv4.icanhazip.com/)\"\n\n    echo\n    green \"当前VPS的IP为: ${configLocalVPSIp}\"\n    green \"The current IP address of the VPS is: ${configLocalVPSIp}\"\n    echo\n    green \"如果本机IPv4 不是 ${configLocalVPSIp}, 请手动输入正确的IP \"\n    green \"If VPS IP is not ${configLocalVPSIp}, pls input the IP manually\"\n    echo\n    read -r -p \"是否手动输入IP 默认否, 请输入[y/N]:\" isChangeVPSIPInput\n\n    if [[ $isChangeVPSIPInput == [yY] ]]; then\n        getVPSIPInput\n    fi\n    echo\n}\n\n\n\n\nosPort80=\"\"\nosPort443=\"\"\nosSELINUXCheck=\"\"\nosSELINUXCheckIsRebootInput=\"\"\n\nfunction testLinuxPortUsage(){\n    $osSystemPackage -y install net-tools socat\n\n    osPort80=$(netstat -tlpn | awk -F '[: ]+' '$1==\"tcp\"{print $5}' | grep -w 80)\n    osPort443=$(netstat -tlpn | awk -F '[: ]+' '$1==\"tcp\"{print $5}' | grep -w 443)\n\n    if [ -n \"$osPort80\" ]; then\n        process80=$(netstat -tlpn | awk -F '[: ]+' '$5==\"80\"{print $9}')\n        red \"===========================================================\"\n        red \"检测到80端口被占用，占用进程为：${process80} \"\n        red \"===========================================================\"\n        promptContinueOpeartion\n    fi\n\n    if [ -n \"$osPort443\" ]; then\n        process443=$(netstat -tlpn | awk -F '[: ]+' '$5==\"443\"{print $9}')\n        red \"=============================================================\"\n        red \"检测到443端口被占用，占用进程为：${process443} \"\n        red \"=============================================================\"\n        promptContinueOpeartion\n    fi\n\n    osSELINUXCheck=$(grep SELINUX= /etc/selinux/config | grep -v \"#\")\n    if [ \"$osSELINUXCheck\" == \"SELINUX=enforcing\" ]; then\n        red \"=======================================================================\"\n        red \"检测到SELinux为开启强制模式状态, 为防止申请证书失败 将关闭SELinux. 请先重启VPS后，再执行本脚本\"\n        red \"=======================================================================\"\n        read -p \"是否现在重启? 请输入 [Y/n] :\" osSELINUXCheckIsRebootInput\n        [ -z \"${osSELINUXCheckIsRebootInput}\" ] && osSELINUXCheckIsRebootInput=\"y\"\n\n        if [[ $osSELINUXCheckIsRebootInput == [Yy] ]]; then\n            sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n            setenforce 0\n            echo -e \"VPS 重启中...\"\n            reboot\n        fi\n        exit\n    fi\n\n    if [ \"$osSELINUXCheck\" == \"SELINUX=permissive\" ]; then\n        red \"=======================================================================\"\n        red \"检测到SELinux为宽容模式状态, 为防止申请证书失败, 将关闭SELinux. 请先重启VPS后，再执行本脚本\"\n        red \"=======================================================================\"\n        read -p \"是否现在重启? 请输入 [Y/n] :\" osSELINUXCheckIsRebootInput\n        [ -z \"${osSELINUXCheckIsRebootInput}\" ] && osSELINUXCheckIsRebootInput=\"y\"\n\n        if [[ $osSELINUXCheckIsRebootInput == [Yy] ]]; then\n            sed -i 's/SELINUX=permissive/SELINUX=disabled/g' /etc/selinux/config\n            setenforce 0\n            echo -e \"VPS 重启中...\"\n            reboot\n        fi\n        exit\n    fi\n\n    if [ \"$osRelease\" == \"centos\" ]; then\n        if  [[ ${osReleaseVersionNoShort} == \"6\" || ${osReleaseVersionNoShort} == \"5\" ]]; then\n            green \" ==================================================\"\n            red \" 本脚本不支持 Centos 6 或 Centos 6 更早的版本\"\n            green \" ==================================================\"\n            exit\n        fi\n\n        red \" 关闭防火墙 firewalld\"\n        ${sudoCmd} systemctl stop firewalld\n        ${sudoCmd} systemctl disable firewalld\n\n    elif [ \"$osRelease\" == \"ubuntu\" ]; then\n        if  [[ ${osReleaseVersionNoShort} == \"14\" || ${osReleaseVersionNoShort} == \"12\" ]]; then\n            green \" ==================================================\"\n            red \" 本脚本不支持 Ubuntu 14 或 Ubuntu 14 更早的版本\"\n            green \" ==================================================\"\n            exit\n        fi\n\n        red \" 关闭防火墙 ufw\"\n        ${sudoCmd} systemctl stop ufw\n        ${sudoCmd} systemctl disable ufw\n\n        if ! command -v ufw &> /dev/null; then\n            echo \"ufw command could not be found\"\n        else\n            ufw disable\n        fi\n\n\n    elif [ \"$osRelease\" == \"debian\" ]; then\n        $osSystemPackage update -y\n    fi\n\n}\n\n\n\n\n\n\n\n\n\n# 编辑 SSH 公钥 文件用于 免密码登录\nfunction editLinuxLoginWithPublicKey(){\n    if [ ! -d \"${HOME}/ssh\" ]; then\n        mkdir -p ${HOME}/.ssh\n    fi\n\n    vi ${HOME}/.ssh/authorized_keys\n}\n\n\n# 修改SSH 端口号\nfunction changeLinuxSSHPort(){\n    green \" 修改的SSH登陆的端口号, 不要使用常用的端口号. 例如 20|21|23|25|53|69|80|110|443|123!\"\n    read -p \"请输入要修改的端口号(必须是纯数字并且在1024~65535之间或22):\" osSSHLoginPortInput\n    osSSHLoginPortInput=${osSSHLoginPortInput:-0}\n\n    if [ $osSSHLoginPortInput -eq 22 -o $osSSHLoginPortInput -gt 1024 -a $osSSHLoginPortInput -lt 65535 ]; then\n        sed -i \"s/#\\?Port [0-9]*/Port $osSSHLoginPortInput/g\" /etc/ssh/sshd_config\n\n        if [ \"$osRelease\" == \"centos\" ] ; then\n\n            if  [[ ${osReleaseVersionNoShort} == \"7\" ]]; then\n                yum -y install policycoreutils-python\n            elif  [[ ${osReleaseVersionNoShort} == \"8\" ]]; then\n                yum -y install policycoreutils-python-utils\n            fi\n\n            # semanage port -l\n            if command -v semanage &> /dev/null; then\n                semanage port -a -t ssh_port_t -p tcp ${osSSHLoginPortInput}\n            fi\n\n            if command -v firewall-cmd &> /dev/null; then\n                firewall-cmd --permanent --zone=public --add-port=$osSSHLoginPortInput/tcp\n                firewall-cmd --reload\n            fi\n\n\n            ${sudoCmd} systemctl restart sshd.service\n\n        fi\n\n        if [ \"$osRelease\" == \"ubuntu\" ] || [ \"$osRelease\" == \"debian\" ] ; then\n\n            if ! command -v semanage &> /dev/null; then\n                echo \"semanage command could not be found\"\n            else\n                semanage port -a -t ssh_port_t -p tcp $osSSHLoginPortInput\n            fi\n\n            if ! command -v ufw &> /dev/null; then\n                echo \"ufw command could not be found\"\n            else\n                ${sudoCmd} ufw allow $osSSHLoginPortInput/tcp\n            fi\n\n\n            ${sudoCmd} service ssh restart\n            ${sudoCmd} systemctl restart ssh\n        fi\n\n        green \"设置成功, 请记住设置的端口号 ${osSSHLoginPortInput}!\"\n        green \"登陆服务器命令: ssh -p ${osSSHLoginPortInput} root@111.111.111.your ip !\"\n    else\n        red \"输入的端口号错误! 范围: 22,1025~65534\"\n    fi\n}\n\n\n\n# 设置北京时区\nfunction setLinuxDateZone(){\n\n    tempCurrentDateZone=$(date +'%z')\n\n    echo\n    if [[ ${tempCurrentDateZone} == \"+0800\" ]]; then\n        yellow \"当前时区已经为北京时间  $tempCurrentDateZone | $(date -R) \"\n    else\n        green \" ==================================================\"\n        yellow \" 当前时区为: $tempCurrentDateZone | $(date -R) \"\n        yellow \" 是否设置时区为北京时间 +0800区, 以便cron定时重启脚本按照北京时间运行.\"\n        green \" ==================================================\"\n        # read 默认值 https://stackoverflow.com/questions/2642585/read-a-variable-in-bash-with-a-default-value\n\n        read -p \"是否设置为北京时间 +0800 时区? 请输入[Y/n]:\" osTimezoneInput\n        osTimezoneInput=${osTimezoneInput:-Y}\n\n        if [[ $osTimezoneInput == [Yy] ]]; then\n            if [[ -f /etc/localtime ]] && [[ -f /usr/share/zoneinfo/Asia/Shanghai ]];  then\n                mv /etc/localtime /etc/localtime.bak\n                cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\n                yellow \" 设置成功! 当前时区已设置为 $(date -R)\"\n                green \" ==================================================\"\n            fi\n        fi\n\n    fi\n    echo\n\n    if [ \"$osRelease\" == \"centos\" ]; then\n        if  [[ ${osReleaseVersionNoShort} == \"7\" ]]; then\n            systemctl stop chronyd\n            systemctl disable chronyd\n\n            $osSystemPackage -y install ntpdate\n            $osSystemPackage -y install ntp\n            ntpdate -q 0.rhel.pool.ntp.org\n            systemctl enable ntpd\n            systemctl restart ntpd\n            ntpdate -u  pool.ntp.org\n\n        elif  [[ ${osReleaseVersionNoShort} == \"8\" || ${osReleaseVersionNoShort} == \"9\" ]]; then\n            $osSystemPackage -y install chrony\n            systemctl enable chronyd\n            systemctl restart chronyd\n\n            if command -v firewall-cmd &> /dev/null; then\n                firewall-cmd --permanent --add-service=ntp\n                firewall-cmd --reload\n            fi\n\n            chronyc sources\n\n            echo\n        fi\n\n    else\n        if [[ \"${osReleaseVersionNoShort}\" == \"12\" ]]; then\n            systemctl restart systemd-timesyncd\n            timedatectl timesync-status\n        else\n            $osSystemPackage install -y ntp\n            systemctl enable ntp\n            systemctl restart ntp\n        fi\n    fi\n}\n\n\n\n\n\nfunction DSMEditHosts(){\n\tgreen \" ================================================== \"\n\tgreen \" 准备打开VI 编辑/etc/hosts\"\n\tgreen \" 请用root 用户登录系统的SSH 运行本命令\"\n\tgreen \" ================================================== \"\n\n    # nameserver 223.5.5.5\n    # nameserver 8.8.8.8\n\n    HostFilePath=\"/etc/hosts\"\n\n    if ! grep -q \"github\" \"${HostFilePath}\"; then\n        echo \"199.232.69.194               github.global.ssl.fastly.net\" >> ${HostFilePath}\n        echo \"185.199.108.153              assets-cdn.github.com\" >> ${HostFilePath}\n        echo \"185.199.108.133              raw.githubusercontent.com\" >> ${HostFilePath}\n        echo \"140.82.114.3                 github.com\" >> ${HostFilePath}\n        echo \"104.16.16.35                 registry.npmjs.org\" >> ${HostFilePath}\n    fi\n\n\tvi ${HostFilePath}\n}\n\n\n\n\n\n\n\n\n\n# 软件安装\nfunction installSoftDownload(){\n\tif [[ \"${osRelease}\" == \"debian\" || \"${osRelease}\" == \"ubuntu\" ]]; then\n\t\tif ! dpkg -l | grep -qw wget; then\n\t\t\t${osSystemPackage} -y install wget git unzip curl apt-transport-https\n\n\t\t\t# https://stackoverflow.com/questions/11116704/check-if-vt-x-is-activated-without-having-to-reboot-in-linux\n\t\t\t${osSystemPackage} -y install cpu-checker\n\t\tfi\n\n\t\tif ! dpkg -l | grep -qw curl; then\n\t\t\t${osSystemPackage} -y install curl git unzip wget apt-transport-https\n\n\t\t\t${osSystemPackage} -y install cpu-checker\n\t\tfi\n\n\telif [[ \"${osRelease}\" == \"centos\" ]]; then\n\n        if  [[ ${osReleaseVersion} == \"8.1.1911\" || ${osReleaseVersion} == \"8.2.2004\" || ${osReleaseVersion} == \"8.0.1905\" ]]; then\n\n            # https://techglimpse.com/failed-metadata-repo-appstream-centos-8/\n\n            cd /etc/yum.repos.d/\n            sed -i 's/^mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*\n            sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*\n            yum update -y\n\n            sed -i 's/^mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-Linux-*\n            sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-Linux-*\n\n            ${sudoCmd} dnf install centos-release-stream -y\n            ${sudoCmd} dnf swap centos-{linux,stream}-repos -y\n            ${sudoCmd} dnf distro-sync -y\n        fi\n\n        if ! rpm -qa | grep -qw wget; then\n\t\t    ${osSystemPackage} -y install wget curl git unzip\n\n        elif ! rpm -qa | grep -qw git; then\n\t\t    ${osSystemPackage} -y install wget curl git unzip\n\t\tfi\n\tfi\n}\n\n\n\nfunction installPackage(){\n    echo\n    green \" ==================================================\"\n    yellow \" 开始安装软件\"\n    green \" ==================================================\"\n    echo\n\n\n    # sed -i '1s/^/nameserver 1.1.1.1 \\n/' /etc/resolv.conf\n\n\n    if [ \"$osRelease\" == \"centos\" ]; then\n\n        # rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n        rm -f /etc/yum.repos.d/nginx.repo\n        # cat > \"/etc/yum.repos.d/nginx.repo\" <<-EOF\n# [nginx]\n# name=nginx repo\n# baseurl=https://nginx.org/packages/centos/$osReleaseVersionNoShort/\\$basearch/\n# gpgcheck=0\n# enabled=1\n# sslverify=0\n#\n# EOF\n\n        if ! rpm -qa | grep -qw iperf3; then\n\t\t\t${sudoCmd} ${osSystemPackage} install -y epel-release\n\n            ${osSystemPackage} install -y curl wget git unzip zip tar bind-utils htop net-tools\n            ${osSystemPackage} install -y xz jq redhat-lsb-core\n            ${osSystemPackage} install -y iputils\n            ${osSystemPackage} install -y iperf3\n\t\tfi\n\n        ${osSystemPackage} update -y\n\n\n        # https://www.cyberciti.biz/faq/how-to-install-and-use-nginx-on-centos-8/\n        if  [[ ${osReleaseVersionNoShort} == \"8\" || ${osReleaseVersionNoShort} == \"9\" ]]; then\n            ${sudoCmd} yum module -y reset nginx\n            ${sudoCmd} yum module -y enable nginx:1.20\n            ${sudoCmd} yum module list nginx\n        fi\n\n    elif [ \"$osRelease\" == \"ubuntu\" ]; then\n\n        # https://joshtronic.com/2018/12/17/how-to-install-the-latest-nginx-on-debian-and-ubuntu/\n        # https://www.nginx.com/resources/wiki/start/topics/tutorials/install/\n\n        $osSystemPackage install -y gnupg2 curl ca-certificates lsb-release ubuntu-keyring\n        # wget -O - https://nginx.org/keys/nginx_signing.key | ${sudoCmd} apt-key add -\n        curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null\n\n        rm -f /etc/apt/sources.list.d/nginx.list\n\n        cat > \"/etc/apt/sources.list.d/nginx.list\" <<-EOF\ndeb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg]   https://nginx.org/packages/ubuntu/ $osReleaseVersionCodeName nginx\n# deb [arch=amd64] https://nginx.org/packages/ubuntu/ $osReleaseVersionCodeName nginx\n# deb-src https://nginx.org/packages/ubuntu/ $osReleaseVersionCodeName nginx\nEOF\n\n        echo -e \"Package: *\\nPin: origin nginx.org\\nPin: release o=nginx\\nPin-Priority: 900\\n\"  | sudo tee /etc/apt/preferences.d/99-nginx\n\n        if [[ \"${osReleaseVersionNoShort}\" == \"22\" || \"${osReleaseVersionNoShort}\" == \"21\" ]]; then\n            echo\n        fi\n\n\n\n        ${osSystemPackage} update -y\n\n        if ! dpkg -l | grep -qw iperf3; then\n            ${sudoCmd} ${osSystemPackage} install -y software-properties-common\n            ${osSystemPackage} install -y curl wget git unzip zip tar htop\n            ${osSystemPackage} install -y xz-utils jq lsb-core lsb-release\n            ${osSystemPackage} install -y iputils-ping\n            ${osSystemPackage} install -y iperf3\n\t\tfi\n\n    elif [ \"$osRelease\" == \"debian\" ]; then\n        # ${sudoCmd} add-apt-repository ppa:nginx/stable -y\n        ${osSystemPackage} update -y\n\n        apt install -y gnupg2\n        apt install -y curl ca-certificates lsb-release\n        wget https://nginx.org/keys/nginx_signing.key -O- | apt-key add -\n\n        rm -f /etc/apt/sources.list.d/nginx.list\n        if [[ \"${osReleaseVersionNoShort}\" == \"12\" ]]; then\n            echo\n        else\n            cat > \"/etc/apt/sources.list.d/nginx.list\" <<-EOF\ndeb https://nginx.org/packages/mainline/debian/ $osReleaseVersionCodeName nginx\ndeb-src https://nginx.org/packages/mainline/debian $osReleaseVersionCodeName nginx\nEOF\n        fi\n\n\n        ${osSystemPackage} update -y\n\n        if ! dpkg -l | grep -qw iperf3; then\n            ${osSystemPackage} install -y curl wget git unzip zip tar htop\n            ${osSystemPackage} install -y xz-utils jq lsb-core lsb-release\n            ${osSystemPackage} install -y iputils-ping\n            ${osSystemPackage} install -y iperf3\n        fi\n    fi\n}\n\n\n\n\n\nfunction installSoftEditor(){\n    # 安装 micro 编辑器\n    if [[ ! -f \"${HOME}/bin/micro\" ]] ;  then\n        mkdir -p ${HOME}/bin\n        cd ${HOME}/bin\n        curl https://getmic.ro | bash\n\n        cp ${HOME}/bin/micro /usr/local/bin\n\n        green \" ==================================================\"\n        green \" micro 编辑器 安装成功!\"\n        green \" ==================================================\"\n    fi\n\n    if [ \"$osRelease\" == \"centos\" ]; then\n        $osSystemPackage install -y xz  vim-minimal vim-enhanced vim-common nano\n    else\n        $osSystemPackage install -y vim-gui-common vim-runtime vim nano\n    fi\n\n    # 设置vim 中文乱码\n    if [[ ! -d \"${HOME}/.vimrc\" ]] ;  then\n        cat > \"${HOME}/.vimrc\" <<-EOF\nset fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1\nset enc=utf8\nset fencs=utf8,gbk,gb2312,gb18030\n\nsyntax on\ncolorscheme elflord\n\nif has('mouse')\n  se mouse+=a\n  set number\nendif\n\nEOF\n    fi\n}\n\n\n\n\n\n\n\n\n\n\n\n# 更新本脚本\nfunction upgradeScript(){\n    wget -Nq --no-check-certificate -O ./linux_install_software.sh \"https://raw.githubusercontent.com/jinwyp/one_click_script/master/linux_install_software.sh\"\n    green \" Script upgrade successful. 本脚本升级成功! \"\n    chmod +x ./linux_install_software.sh\n    sleep 2s\n    exec \"./linux_install_software.sh\"\n}\n\nfunction installWireguard(){\n    bash <(wget -qO- https://github.com/jinwyp/one_click_script/raw/master/install_kernel.sh)\n    # wget -N --no-check-certificate https://github.com/jinwyp/one_click_script/raw/master/install_kernel.sh && chmod +x ./install_kernel.sh && ./install_kernel.sh\n}\n\n\n\n\n\n\n\n\n\n\n\n\nfunction toolboxSkybox(){\n    wget -O skybox.sh https://raw.githubusercontent.com/BlueSkyXN/SKY-BOX/main/box.sh && chmod +x skybox.sh  && ./skybox.sh\n}\n\nfunction toolboxJcnf(){\n    wget -O jcnfbox.sh https://raw.githubusercontent.com/Netflixxp/jcnf-box/main/jcnfbox.sh && chmod +x jcnfbox.sh && ./jcnfbox.sh\n}\n\n\nfunction installCasaOS(){\n    wget -O- https://get.casaos.io | bash\n}\nfunction removeCasaOS(){\n    casaos-uninstall\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconfigDownloadTempPath=\"${HOME}/temp\"\n\nfunction downloadAndUnzip(){\n    if [ -z $1 ]; then\n        green \" ================================================== \"\n        green \"     下载文件地址为空!\"\n        green \" ================================================== \"\n        exit\n    fi\n    if [ -z $2 ]; then\n        green \" ================================================== \"\n        green \"     目标路径地址为空!\"\n        green \" ================================================== \"\n        exit\n    fi\n    if [ -z $3 ]; then\n        green \" ================================================== \"\n        green \"     下载文件的文件名为空!\"\n        green \" ================================================== \"\n        exit\n    fi\n\n    mkdir -p ${configDownloadTempPath}\n\n    if [[ $3 == *\"tar.xz\"* ]]; then\n        green \"===== 下载并解压tar.xz文件: $3 \"\n        wget -O ${configDownloadTempPath}/$3 $1\n        tar xf ${configDownloadTempPath}/$3 -C ${configDownloadTempPath}\n        mv ${configDownloadTempPath}/* $2\n        rm -rf ${configDownloadTempPath}\n\n    elif [[ $3 == *\"tar.gz\"* ]]; then\n        green \"===== 下载并解压tar.gz文件: $3 \"\n        wget -O ${configDownloadTempPath}/$3 $1\n        tar zxvf ${configDownloadTempPath}/$3 -C ${configDownloadTempPath}\n        mv ${configDownloadTempPath}/* $2\n        rm -rf ${configDownloadTempPath}\n\n    else\n        green \"===== 下载并解压zip文件:  $3 \"\n        wget -O ${configDownloadTempPath}/$3 $1\n        unzip -d $2 ${configDownloadTempPath}/$3\n        rm -rf ${configDownloadTempPath}\n    fi\n\n}\n\n\n\n\nfunction getGithubLatestReleaseVersion(){\n    # https://github.com/p4gefau1t/trojan-go/issues/63\n    wget --no-check-certificate -qO- https://api.github.com/repos/$1/tags | grep 'name' | cut -d\\\" -f4 | head -1 | cut -b 2-\n}\nfunction getGithubLatestReleaseVersion2(){\n    # https://github.com/semaphoreui/semaphore/releases\n    wget --no-check-certificate -qO- https://api.github.com/repos/$1/tags | grep 'name' | cut -d\\\" -f4 | sort -r | head -1 | cut -b 1-\n}\n\n\n\n\n\n\n\n\n\n\n\nfunction installNodejs(){\n\n    showHeaderGreen \"Prepare to install Nodejs\"\n\n    if [ \"$osRelease\" == \"centos\" ] ; then\n\n        if [ \"$osReleaseVersion\" == \"7\" ]; then\n            curl -sL https://rpm.nodesource.com/setup_14.x | sudo bash -\n            ${sudoCmd} yum install -y nodejs\n        else\n            ${sudoCmd} dnf module list nodejs\n            ${sudoCmd} dnf module switch-to nodejs:16 -y\n            ${sudoCmd} dnf module enable nodejs:16 -y\n            ${sudoCmd} dnf module list nodejs\n            ${sudoCmd} dnf install -y nodejs\n        fi\n\n    else\n        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n        echo 'export NVM_DIR=\"$HOME/.nvm\"' >> ${HOME}/.zshrc\n        echo '[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"' >> ${HOME}/.zshrc\n        source ${HOME}/.zshrc\n\n        command -v nvm\n        nvm --version\n        nvm ls-remote\n        nvm install --lts\n\n    fi\n\n    echo\n    green \" Nodejs 版本:\"\n    node --version\n    echo\n    green \" NPM 版本:\"\n    npm --version\n\n    showHeaderGreen \"准备安装 PM2 进程守护程序\"\n    npm install -g pm2\n\n    showHeaderGreen \"Nodejs 与 PM2 安装成功 !\"\n}\n\n\n\n\nconfigDockerDownloadPath=\"${HOME}/download\"\nconfigDockerComposePath=\"/usr/local/lib/docker/cli-plugins\"\n\nfunction installDocker(){\n\n    showHeaderGreen \"准备安装 Docker 与 Docker Compose\"\n\n    mkdir -p ${configDockerDownloadPath}\n    cd ${configDockerDownloadPath}\n\n\n    if [[ -s \"/usr/bin/docker\" ]]; then\n        showHeaderRed \"已安装过 Docker. Docker already installed!\"\n    else\n\n        if [[ \"${osInfo}\" == \"AlmaLinux\" ]]; then\n            echo \" dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\"\n            ${sudoCmd} yum module remove container-tools\n            ${sudoCmd} dnf upgrade\n\n            # https://linuxconfig.org/install-docker-on-almalinux\n            ${sudoCmd} dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n            ${sudoCmd} dnf remove -y podman buildah\n            ${sudoCmd} dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n        elif [[ \"$osRelease\" == \"debian\" ]]; then\n            for pkg in docker.io docker-doc docker-compose podman-docker containerd runc;\n            do\n                ${sudoCmd} apt-get remove $pkg;\n            done\n\n            ${sudoCmd} apt-get update\n            ${sudoCmd} apt-get install -y ca-certificates curl gnupg\n            ${sudoCmd} install -m 0755 -d /etc/apt/keyrings\n            curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n            ${sudoCmd} chmod a+r /etc/apt/keyrings/docker.gpg\n\n            echo \\\n            \"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \\\n            ${osReleaseVersionCodeName} stable\" | \\\n            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n            ${sudoCmd} apt-get update\n            ${sudoCmd} apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n        else\n            curl -fsSL https://get.docker.com -o ${configDockerDownloadPath}/get-docker.sh\n            # curl -sSL https://get.daocloud.io/docker -o ${configDockerDownloadPath}/get-docker.sh\n            chmod +x ${configDockerDownloadPath}/get-docker.sh\n            ${configDockerDownloadPath}/get-docker.sh\n\n        fi\n        ${sudoCmd}\n        ${sudoCmd} systemctl start docker.service\n        ${sudoCmd} systemctl enable docker.service\n        ${sudoCmd} systemctl restart docker.service\n\n        showHeaderGreen \"Docker installed successfully !\"\n        docker version\n        echo\n    fi\n\n\n    if [[ -s \"/usr/local/bin/docker-compose\" ]]; then\n        showHeaderRed \"已安装过 Docker Compose. Docker Compose already installed!\"\n    else\n\n        versionDockerCompose=$(getGithubLatestReleaseVersion \"docker/compose\")\n\n        # dockerComposeUrl=\"https://github.com/docker/compose/releases/download/v${versionDockerCompose}/docker-compose-$(uname -s)-$(uname -m)\"\n        dockerComposeUrl=\"https://github.com/docker/compose/releases/download/v${versionDockerCompose}/docker-compose-linux-x86_64\"\n        #dockerComposeUrl=\"https://get.daocloud.io/docker/compose/releases/download/v${versionDockerCompose}/docker-compose-linux-x86_64\"\n\n        showInfoGreen \"Downloading  ${dockerComposeUrl}\"\n\n\n        mkdir -p ${configDockerComposePath}\n\n        ${sudoCmd} wget -O ${configDockerComposePath}/docker-compose \"${dockerComposeUrl}\"\n        ${sudoCmd} chmod a+x ${configDockerComposePath}/docker-compose\n        ${sudoCmd} ln -s ${configDockerComposePath}/docker-compose /usr/local/bin/docker-compose\n        #${sudoCmd} ln -s ${configDockerComposePath}/docker-compose /usr/bin/docker-compose\n\n        rm -f \"$(which dc)\"\n        ${sudoCmd} ln -s ${configDockerComposePath}/docker-compose /usr/bin/dc\n\n        # rm -f \"/usr/bin/docker-compose\"\n        # ${sudoCmd} ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\n        showHeaderGreen \"Docker-Compose installed successfully !\"\n        docker compose version\n        echo\n    fi\n\n    showHeaderGreen \"Docker 与 Docker Compose 安装成功 !\"\n    # systemctl status docker.service\n}\n\nfunction removeDocker(){\n\n    if [ \"$osRelease\" == \"centos\" ] ; then\n\n        sudo yum remove docker docker-common container-selinux docker-selinux docker-engine\n        sudo yum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n    else\n        sudo apt-get remove -y docker docker-engine\n        sudo apt-get remove -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n    fi\n\n    rm -rf /var/lib/docker/\n\n    rm -f \"$(which dc)\"\n    rm -f \"/usr/bin/docker\"\n    rm -f \"/usr/bin/docker-compose\"\n    rm -f \"/usr/local/bin/docker-compose\"\n    rm -f \"${DOCKER_CONFIG}/cli-plugins/docker-compose\"\n\n    showHeaderGreen \"Docker 已经卸载完毕 !\"\n}\n\n\nfunction addDockerRegistry(){\n\n        cat > \"/etc/docker/daemon.json\" <<-EOF\n\n{\n  \"registry-mirrors\": [\n    \"https://hub-mirror.c.163.com\",\n    \"https://mirror.baidubce.com\"\n  ]\n}\n\nEOF\n\n    ${sudoCmd} systemctl daemon-reload\n    ${sudoCmd} systemctl restart docker\n}\n\n\n\n\nfunction installPortainer(){\n\n    echo\n    if [ -x \"$(command -v docker)\" ]; then\n        green \" Docker already installed\"\n\n    else\n        red \" Docker not install ! \"\n        exit\n    fi\n\n    echo\n    docker volume create portainer_data\n\n    echo\n    docker pull portainer/portainer-ce\n\n    echo\n    docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce\n\n    showHeaderGreen \" Portainer 安装成功. Running at port 8000 !\"\n}\n\n\nfunction removePortainer(){\n    docker stop portainer\n    docker rm portainer\n    docker volume rm portainer_data\n\n    showHeaderGreen \" Portainer 已经卸载完毕 !\"\n}\n\n\nfunction installAnsible(){\n\n    showHeaderGreen \"Prepare to install Ansible\"\n\n    if [ \"$osRelease\" == \"centos\" ] ; then\n        ${sudoCmd} dnf install -y ansible\n    elif [ \"$osRelease\" == \"ubuntu\" ]; then\n\n        ${sudoCmd} apt update -y\n        ${sudoCmd} apt install -y software-properties-common\n        ${sudoCmd} add-apt-repository --yes --update ppa:ansible/ansible\n        ${sudoCmd} apt install -y ansible\n    elif [ \"$osRelease\" == \"debian\" ]; then\n        ${sudoCmd} apt install -y wget gpg\n        wget -O- \"https://keyserver.ubuntu.com/pks/lookup?fingerprint=on&op=get&search=0x6125E2A8C77F2818FB7BD15B93C4A3FD7BB9C367\" | sudo gpg --dearmour -o /usr/share/keyrings/ansible-archive-keyring.gpg\n        echo \"deb [signed-by=/usr/share/keyrings/ansible-archive-keyring.gpg] http://ppa.launchpad.net/ansible/ansible/ubuntu ${osReleaseVersionCodeName} main\" | sudo tee /etc/apt/sources.list.d/ansible.list\n\n        ${sudoCmd} apt update -y\n        ${sudoCmd} apt install -y ansible\n    fi\n    showHeaderGreen \"Ansible installed successfully !\"\n    ansible --version\n}\n\n\n\nconfigSemaphoreDockerPath=\"${HOME}/semaphore/docker\"\nconfigSemaphoreSystemPath=\"${HOME}/semaphore/systemd\"\nfunction installSemaphore(){\n\n    if command -v ansible >/dev/null 2>&1; then\n        echo \"Ansible is installed, version: $(ansible --version | head -n 1)\"\n    else\n        echo \"Ansible is not installed\"\n        exit 1\n    fi\n\n    showHeaderGreen \"Prepare to install Semaphore\"\n\n    green \" ================================================== \"\n    echo\n    green \"Install Semaphore using Docker or System Package?\"\n    green \"Y for Docker, N for System Package\"\n    echo\n    read -r -p \"Install Semaphore by Docker? Default is N, Input[Y/n]:\" isSemaphoreInstallInput\n    isSemaphoreInstallInput=${isSemaphoreInstallInput:-n}\n\n    mkdir -p ${configSemaphoreDockerPath}\n    mkdir -p ${configSemaphoreSystemPath}\n\n    # semaphoreVersion=$(getGithubLatestReleaseVersion \"semaphoreui/semaphore\")\n    semaphoreVersion=\"2.9.64\"\n\n\n    if [[ $isSemaphoreInstallInput == [Yy] ]]; then\n        cd ${configSemaphoreDockerPath}\n\n        cat > \"${configSemaphoreDockerPath}/docker-compose.yml\" <<-EOF\n\nversion: '3.5'\nservices:\n  # uncomment this section and comment out the mysql section to use postgres instead of mysql\n  #semaphore_postgres:\n    #restart: unless-stopped\n    #image: postgres:14\n    #hostname: postgres\n    #volumes:\n    #  - semaphore-postgres:/var/lib/postgresql/data\n    #environment:\n    #  POSTGRES_USER: semaphore\n    #  POSTGRES_PASSWORD: semaphore\n    #  POSTGRES_DB: semaphore\n  # if you wish to use postgres, comment the mysql service section below\n  semaphore_mysql:\n    restart: unless-stopped\n    image: mysql:8.0\n    hostname: mysql\n    volumes:\n      - semaphore-mysql:/var/lib/mysql\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'\n      MYSQL_DATABASE: semaphore\n      MYSQL_USER: semaphore\n      MYSQL_PASSWORD: semaphore\n  semaphore:\n    restart: unless-stopped\n    ports:\n      - 3000:3000\n    image: semaphoreui/semaphore:latest\n    environment:\n      SEMAPHORE_DB_USER: semaphore\n      SEMAPHORE_DB_PASS: semaphore\n      SEMAPHORE_DB_HOST: semaphore_mysql # for postgres, change to: postgres\n      SEMAPHORE_DB_PORT: 3306 # change to 5432 for postgres\n      SEMAPHORE_DB_DIALECT: mysql # for postgres, change to: postgres\n      SEMAPHORE_DB: semaphore\n      SEMAPHORE_PLAYBOOK_PATH: /tmp/semaphore/\n      SEMAPHORE_ADMIN_PASSWORD: changeme\n      SEMAPHORE_ADMIN_NAME: admin\n      SEMAPHORE_ADMIN_EMAIL: admin@localhost\n      SEMAPHORE_ADMIN: admin\n      SEMAPHORE_ACCESS_KEY_ENCRYPTION: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=\n      SEMAPHORE_LDAP_ACTIVATED: 'no' # if you wish to use ldap, set to: 'yes'\n      SEMAPHORE_LDAP_HOST: dc01.local.example.com\n      SEMAPHORE_LDAP_PORT: '636'\n      SEMAPHORE_LDAP_NEEDTLS: 'yes'\n      SEMAPHORE_LDAP_DN_BIND: 'uid=bind_user,cn=users,cn=accounts,dc=local,dc=shiftsystems,dc=net'\n      SEMAPHORE_LDAP_PASSWORD: 'ldap_bind_account_password'\n      SEMAPHORE_LDAP_DN_SEARCH: 'dc=local,dc=example,dc=com'\n      SEMAPHORE_LDAP_SEARCH_FILTER: \"(\\u0026(uid=%s)(memberOf=cn=ipausers,cn=groups,cn=accounts,dc=local,dc=example,dc=com))\"\n    depends_on:\n      - semaphore_mysql # for postgres, change to: semaphore_postgres\nvolumes:\n  semaphore-mysql: # to use postgres, switch to: semaphore-postgres\n\nEOF\n\n        docker-compose up -d\n\n        showHeaderGreen \"Semaphore installed successfully !\" \\\n        \"Log: docker-compose logs -f semaphore\" \\\n        \"Open URL http://your_ip:3000\" \\\n\n\n    else\n        cd ${configSemaphoreSystemPath}\n\n        if [ \"$osRelease\" == \"centos\" ] ; then\n            # https://github.com/semaphoreui/semaphore/releases/download/v2.9.68-beta/semaphore_2.9.68-beta_linux_amd64.rpm\n            semaphoreDownloadUrl=\"https://github.com/semaphoreui/semaphore/releases/download/v${semaphoreVersion}/semaphore_${semaphoreVersion}_linux_amd64.rpm\"\n            wget \"${semaphoreDownloadUrl}\"\n\n            ${sudoCmd} yum install semaphore_${semaphoreVersion}_linux_amd64.rpm\n\n        elif [ \"$osRelease\" == \"ubuntu\" ] || [ \"$osRelease\" == \"debian\" ]; then\n            semaphoreDownloadUrl=\"https://github.com/semaphoreui/semaphore/releases/download/v${semaphoreVersion}/semaphore_${semaphoreVersion}_linux_amd64.deb\"\n            wget \"${semaphoreDownloadUrl}\"\n            ${sudoCmd} dpkg -i semaphore_${semaphoreVersion}_linux_amd64.deb\n        fi\n\n\n    cat > ${osSystemMdPath}semaphore.service <<-EOF\n[Unit]\nDescription=Semaphore Ansible\nDocumentation=https://github.com/semaphoreui/semaphore\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nType=simple\nExecStart=/usr/bin/semaphore server --config=${configSemaphoreSystemPath}/config.json\nExecReload=/bin/kill -HUP \\$MAINPID\nSyslogIdentifier=semaphore\nRestart=always\nRestartSec=10s\n\n[Install]\nWantedBy=multi-user.target\n\nEOF\n\n        ${sudoCmd} systemctl daemon-reload\n        # ${sudoCmd} systemctl start semaphore\n\n        showHeaderGreen \"Semaphore installed successfully !\" \\\n        \"Please run following command to start Semaphore:\" \\\n        \"systemctl restart semaphore\"\n\n        echo\n        semaphore version\n        echo\n        # semaphore setup\n    fi\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nacmeSSLRegisterEmailInput=\"\"\nisDomainSSLGoogleEABKeyInput=\"\"\nisDomainSSLGoogleEABIdInput=\"\"\n\nfunction getHTTPSCertificateCheckEmail(){\n    if [ -z $2 ]; then\n\n        if [[ $1 == \"email\" ]]; then\n            red \" 输入邮箱地址不能为空, 请重新输入!\"\n            getHTTPSCertificateInputEmail\n        elif [[ $1 == \"googleEabKey\" ]]; then\n            red \" 输入EAB key 不能为空, 请重新输入!\"\n            getHTTPSCertificateInputGoogleEABKey\n        elif [[ $1 == \"googleEabId\" ]]; then\n            red \" 输入EAB Id 不能为空, 请重新输入!\"\n            getHTTPSCertificateInputGoogleEABId\n        fi\n    fi\n}\nfunction getHTTPSCertificateInputEmail(){\n    echo\n    read -r -p \"请输入邮箱地址, 用于申请证书:\" acmeSSLRegisterEmailInput\n    getHTTPSCertificateCheckEmail \"email\" \"${acmeSSLRegisterEmailInput}\"\n}\nfunction getHTTPSCertificateInputGoogleEABKey(){\n    echo\n    read -r -p \"请输入 Google EAB key :\" isDomainSSLGoogleEABKeyInput\n    getHTTPSCertificateCheckEmail \"googleEabKey\" \"${isDomainSSLGoogleEABKeyInput}\"\n}\nfunction getHTTPSCertificateInputGoogleEABId(){\n    echo\n    read -r -p \"请输入 Google EAB id :\" isDomainSSLGoogleEABIdInput\n    getHTTPSCertificateCheckEmail \"googleEabId\" \"${isDomainSSLGoogleEABIdInput}\"\n}\n\nconfigNetworkRealIp=\"\"\nconfigSSLDomain=\"\"\n\nacmeSSLDays=\"89\"\nacmeSSLServerName=\"letsencrypt\"\nacmeSSLDNSProvider=\"dns_cf\"\n\nconfigRanPath=\"${HOME}/ran\"\nconfigSSLAcmeScriptPath=\"${HOME}/.acme.sh\"\nconfigWebsiteFatherPath=\"/nginxweb\"\nconfigSSLCertPath=\"${configWebsiteFatherPath}/cert\"\nconfigSSLCertPathV2board=\"${configWebsiteFatherPath}/cert/v2board\"\nconfigSSLCertKeyFilename=\"server.key\"\nconfigSSLCertFullchainFilename=\"server_fullchain.cert\"\n\n\n\n\nfunction getHTTPSCertificateWithAcme(){\n\n    # 申请https证书\n\tmkdir -p ${configSSLCertPath}\n\tmkdir -p ${configWebsitePath}\n\tcurl https://get.acme.sh | sh\n\n    echo\n    green \" ================================================== \"\n    green \" 请选择证书提供商, 默认通过 Letsencrypt.org 来申请证书 \"\n    green \" 如果证书申请失败, 例如一天内通过 Letsencrypt.org 申请次数过多, 可选 BuyPass.com 或 ZeroSSL.com 来申请.\"\n    green \" 1 Letsencrypt.org \"\n    green \" 2 BuyPass.com \"\n    green \" 3 ZeroSSL.com \"\n    green \" 4 Google Public CA \"\n    echo\n    read -r -p \"请选择证书提供商? 默认直接回车为通过 Letsencrypt.org 申请, 请输入纯数字:\" isDomainSSLFromLetInput\n    isDomainSSLFromLetInput=${isDomainSSLFromLetInput:-1}\n\n    if [[ \"$isDomainSSLFromLetInput\" == \"2\" ]]; then\n        getHTTPSCertificateInputEmail\n        acmeSSLDays=\"179\"\n        acmeSSLServerName=\"buypass\"\n        echo\n        ${configSSLAcmeScriptPath}/acme.sh --register-account --accountemail ${acmeSSLRegisterEmailInput} --server buypass\n\n    elif [[ \"$isDomainSSLFromLetInput\" == \"3\" ]]; then\n        getHTTPSCertificateInputEmail\n        acmeSSLServerName=\"zerossl\"\n        echo\n        ${configSSLAcmeScriptPath}/acme.sh --register-account -m ${acmeSSLRegisterEmailInput} --server zerossl\n\n    elif [[ \"$isDomainSSLFromLetInput\" == \"4\" ]]; then\n        green \" ================================================== \"\n        yellow \" 请先按照如下链接申请 google Public CA  https://hostloc.com/thread-993780-1-1.html\"\n        yellow \" 具体可参考 https://github.com/acmesh-official/acme.sh/wiki/Google-Public-CA\"\n        getHTTPSCertificateInputEmail\n        acmeSSLServerName=\"google\"\n        getHTTPSCertificateInputGoogleEABKey\n        getHTTPSCertificateInputGoogleEABId\n        ${configSSLAcmeScriptPath}/acme.sh --register-account -m ${acmeSSLRegisterEmailInput} --server google --eab-kid ${isDomainSSLGoogleEABIdInput} --eab-hmac-key ${isDomainSSLGoogleEABKeyInput}\n    else\n        acmeSSLServerName=\"letsencrypt\"\n        #${configSSLAcmeScriptPath}/acme.sh --issue -d ${configSSLDomain} --webroot ${configWebsitePath} --keylength ec-256 --days 89 --server letsencrypt\n    fi\n\n\n    echo\n    green \" ================================================== \"\n    green \" 请选择 acme.sh 脚本申请SSL证书方式: 1 http方式, 2 dns方式 \"\n    green \" 默认直接回车为 http 申请方式, 选否则为 dns 方式\"\n    echo\n    read -r -p \"请选择SSL证书申请方式 ? 默认直接回车为http方式, 选否则为 dns 方式申请证书, 请输入[Y/n]:\" isAcmeSSLRequestMethodInput\n    isAcmeSSLRequestMethodInput=${isAcmeSSLRequestMethodInput:-Y}\n    echo\n\n    if [[ $isAcmeSSLRequestMethodInput == [Yy] ]]; then\n        acmeSSLHttpWebrootMode=\"\"\n\n        if [[ \"${isInstallNginx}\" == \"true\" ]]; then\n            acmeDefaultValue=\"3\"\n            acmeDefaultText=\"3. webroot 并使用ran作为临时的Web服务器\"\n            acmeSSLHttpWebrootMode=\"webrootran\"\n        else\n            acmeDefaultValue=\"1\"\n            acmeDefaultText=\"1. standalone 模式\"\n            acmeSSLHttpWebrootMode=\"standalone\"\n        fi\n\n        if [ -z \"$1\" ]; then\n            green \" ================================================== \"\n            green \" 请选择 http 申请证书方式: 默认直接回车为 ${acmeDefaultText} \"\n            green \" 1 standalone 模式, 适合没有安装Web服务器, 如已选择不安装Nginx 请选择此模式. 请确保80端口不被占用. 注意:三个月后续签时80端口被占用会导致续签失败!\"\n            green \" 2 webroot 模式, 适合已经安装Web服务器, 例如 Caddy Apache 或 Nginx, 请确保Web服务器已经运行在80端口\"\n            green \" 3 webroot 模式 并使用 ran 作为临时的Web服务器, 如已选择同时安装Nginx，请使用此模式, 可以正常续签\"\n            green \" 4 nginx 模式 适合已经安装 Nginx, 请确保 Nginx 已经运行\"\n            echo\n            read -r -p \"请选择http申请证书方式? 默认为 ${acmeDefaultText}, 请输入纯数字:\" isAcmeSSLWebrootModeInput\n\n            isAcmeSSLWebrootModeInput=${isAcmeSSLWebrootModeInput:-${acmeDefaultValue}}\n\n            if [[ ${isAcmeSSLWebrootModeInput} == \"1\" ]]; then\n                acmeSSLHttpWebrootMode=\"standalone\"\n            elif [[ ${isAcmeSSLWebrootModeInput} == \"2\" ]]; then\n                acmeSSLHttpWebrootMode=\"webroot\"\n            elif [[ ${isAcmeSSLWebrootModeInput} == \"4\" ]]; then\n                acmeSSLHttpWebrootMode=\"nginx\"\n            else\n                acmeSSLHttpWebrootMode=\"webrootran\"\n            fi\n        else\n            if [[ $1 == \"standalone\" ]]; then\n                acmeSSLHttpWebrootMode=\"standalone\"\n            elif [[ $1 == \"webroot\" ]]; then\n                acmeSSLHttpWebrootMode=\"webroot\"\n            elif [[ $1 == \"webrootran\" ]] ; then\n                acmeSSLHttpWebrootMode=\"webrootran\"\n            elif [[ $1 == \"nginx\" ]] ; then\n                acmeSSLHttpWebrootMode=\"nginx\"\n            fi\n        fi\n\n        echo\n        if [[ ${acmeSSLHttpWebrootMode} == \"standalone\" ]] ; then\n            green \" 开始申请证书 acme.sh 通过 http standalone mode 从 ${acmeSSLServerName} 申请, 请确保80端口不被占用 \"\n\n            echo\n            ${configSSLAcmeScriptPath}/acme.sh --issue -d ${configSSLDomain} --standalone --keylength ec-256 --days ${acmeSSLDays} --server ${acmeSSLServerName}\n\n        elif [[ ${acmeSSLHttpWebrootMode} == \"webroot\" ]] ; then\n            green \" 开始申请证书, acme.sh 通过 http webroot mode 从 ${acmeSSLServerName} 申请, 请确保web服务器 例如 nginx 已经运行在80端口 \"\n\n            echo\n            read -r -p \"请输入Web服务器的html网站根目录路径? 例如/usr/share/nginx/html:\" isDomainSSLNginxWebrootFolderInput\n            echo \" 您输入的网站根目录路径为 ${isDomainSSLNginxWebrootFolderInput}\"\n\n\n            if [ -z \"${isDomainSSLNginxWebrootFolderInput}\" ]; then\n                red \" 输入的Web服务器的 html网站根目录路径不能为空, 网站根目录将默认设置为 ${configWebsitePath}, 请修改你的web服务器配置后再申请证书!\"\n            else\n                configWebsitePath=\"${isDomainSSLNginxWebrootFolderInput}\"\n            fi\n\n            echo\n            ${configSSLAcmeScriptPath}/acme.sh --issue -d ${configSSLDomain} --webroot ${configWebsitePath} --keylength ec-256 --days ${acmeSSLDays} --server ${acmeSSLServerName}\n\n        elif [[ ${acmeSSLHttpWebrootMode} == \"nginx\" ]] ; then\n            green \" 开始申请证书, acme.sh 通过 http nginx mode 从 ${acmeSSLServerName} 申请, 请确保web服务器 nginx 已经运行 \"\n\n            echo\n            ${configSSLAcmeScriptPath}/acme.sh --issue -d ${configSSLDomain} --nginx --keylength ec-256 --days ${acmeSSLDays} --server ${acmeSSLServerName}\n\n        elif [[ ${acmeSSLHttpWebrootMode} == \"webrootran\" ]] ; then\n\n            # https://github.com/m3ng9i/ran/issues/10\n\n            ranDownloadUrl=\"https://github.com/m3ng9i/ran/releases/download/v0.1.6/ran_linux_amd64.zip\"\n            ranDownloadFileName=\"ran_linux_amd64\"\n\n            if [[ \"${osArchitecture}\" == \"arm64\" || \"${osArchitecture}\" == \"arm\" ]]; then\n                ranDownloadUrl=\"https://github.com/m3ng9i/ran/releases/download/v0.1.6/ran_linux_arm64.zip\"\n                ranDownloadFileName=\"ran_linux_arm64\"\n            fi\n\n\n            mkdir -p ${configRanPath}\n\n            if [[ -f \"${configRanPath}/${ranDownloadFileName}\" ]]; then\n                green \" 检测到 ran 已经下载过, 准备启动 ran 临时的web服务器 \"\n            else\n                green \" 开始下载 ran 作为临时的web服务器 \"\n                downloadAndUnzip \"${ranDownloadUrl}\" \"${configRanPath}\" \"${ranDownloadFileName}\"\n                chmod +x \"${configRanPath}/${ranDownloadFileName}\"\n            fi\n\n            echo \"nohup ${configRanPath}/${ranDownloadFileName} -l=false -g=false -sa=true -p=80 -r=${configWebsitePath} >/dev/null 2>&1 &\"\n            nohup ${configRanPath}/${ranDownloadFileName} -l=false -g=false -sa=true -p=80 -r=${configWebsitePath} >/dev/null 2>&1 &\n            echo\n\n            green \" 开始申请证书, acme.sh 通过 http webroot mode 从 ${acmeSSLServerName} 申请, 并使用 ran 作为临时的web服务器 \"\n            echo\n            ${configSSLAcmeScriptPath}/acme.sh --issue -d ${configSSLDomain} --webroot ${configWebsitePath} --keylength ec-256 --days ${acmeSSLDays} --server ${acmeSSLServerName}\n\n            sleep 4\n            ps -C ${ranDownloadFileName} -o pid= | xargs -I {} kill {}\n        fi\n\n    else\n        green \" 开始申请证书, acme.sh 通过 dns mode 申请 \"\n\n        echo\n        green \"请选择 DNS provider DNS 提供商: 1 CloudFlare, 2 AliYun,  3 DNSPod(Tencent), 4 GoDaddy \"\n        red \"注意 CloudFlare 针对某些免费域名例如 .tk .cf 等  不再支持使用API 申请DNS证书 \"\n        echo\n        read -r -p \"请选择 DNS 提供商 ? 默认直接回车为 1. CloudFlare, 请输入纯数字:\" isAcmeSSLDNSProviderInput\n        isAcmeSSLDNSProviderInput=${isAcmeSSLDNSProviderInput:-1}\n\n\n        if [ \"$isAcmeSSLDNSProviderInput\" == \"2\" ]; then\n            read -r -p \"Please Input Ali Key: \" Ali_Key\n            export Ali_Key=\"${Ali_Key}\"\n            read -r -p \"Please Input Ali Secret: \" Ali_Secret\n            export Ali_Secret=\"${Ali_Secret}\"\n            acmeSSLDNSProvider=\"dns_ali\"\n\n        elif [ \"$isAcmeSSLDNSProviderInput\" == \"3\" ]; then\n            read -r -p \"Please Input DNSPod API ID: \" DP_Id\n            export DP_Id=\"${DP_Id}\"\n            read -r -p \"Please Input DNSPod API Key: \" DP_Key\n            export DP_Key=\"${DP_Key}\"\n            acmeSSLDNSProvider=\"dns_dp\"\n\n        elif [ \"$isAcmeSSLDNSProviderInput\" == \"4\" ]; then\n            read -r -p \"Please Input GoDaddy API Key: \" gd_Key\n            export GD_Key=\"${gd_Key}\"\n            read -r -p \"Please Input GoDaddy API Secret: \" gd_Secret\n            export GD_Secret=\"${gd_Secret}\"\n            acmeSSLDNSProvider=\"dns_gd\"\n\n        else\n            read -r -p \"Please Input CloudFlare Email: \" cf_email\n            export CF_Email=\"${cf_email}\"\n            read -r -p \"Please Input CloudFlare Global API Key: \" cf_key\n            export CF_Key=\"${cf_key}\"\n            acmeSSLDNSProvider=\"dns_cf\"\n        fi\n\n        echo\n        ${configSSLAcmeScriptPath}/acme.sh --issue -d \"${configSSLDomain}\" --dns ${acmeSSLDNSProvider} --force --keylength ec-256 --server ${acmeSSLServerName} --debug\n\n    fi\n\n    echo\n    if [[ ${isAcmeSSLWebrootModeInput} == \"1\" ]]; then\n        ${configSSLAcmeScriptPath}/acme.sh --installcert --ecc -d ${configSSLDomain} \\\n        --key-file ${configSSLCertPath}/${configSSLCertKeyFilename} \\\n        --fullchain-file ${configSSLCertPath}/${configSSLCertFullchainFilename}\n    else\n        ${configSSLAcmeScriptPath}/acme.sh --installcert --ecc -d ${configSSLDomain} \\\n        --key-file ${configSSLCertPath}/${configSSLCertKeyFilename} \\\n        --fullchain-file ${configSSLCertPath}/${configSSLCertFullchainFilename} \\\n        --reloadcmd \"systemctl restart nginx.service\"\n    fi\n    green \" ================================================== \"\n\n}\n\n\n\nfunction compareRealIpWithLocalIp(){\n    echo\n    echo\n    green \" 是否检测域名指向的IP正确 直接回车默认检测\"\n    red \" 如果域名指向的IP不是本机IP, 或已开启CDN不方便关闭 或只有IPv6的VPS 可以选否不检测\"\n    read -r -p \"是否检测域名指向的IP正确? 请输入[Y/n]:\" isDomainValidInput\n    isDomainValidInput=${isDomainValidInput:-Y}\n\n    if [[ $isDomainValidInput == [Yy] ]]; then\n        if [ -n \"$1\" ]; then\n            configNetworkRealIp=$(ping $1 -c 1 | sed '1{s/[^(]*(//;s/).*//;q}')\n            # https://unix.stackexchange.com/questions/22615/how-can-i-get-my-external-ip-address-in-a-shell-script\n            configNetworkLocalIp1=\"$(curl http://whatismyip.akamai.com/)\"\n            configNetworkLocalIp2=\"$(curl https://checkip.amazonaws.com/)\"\n            #configNetworkLocalIp3=\"$(curl https://ipv4.icanhazip.com/)\"\n            #configNetworkLocalIp4=\"$(curl https://v4.ident.me/)\"\n            #configNetworkLocalIp5=\"$(curl https://api.ip.sb/ip)\"\n            #configNetworkLocalIp6=\"$(curl https://ipinfo.io/ip)\"\n\n            #configNetworkLocalIPv61=\"$(curl https://ipv6.icanhazip.com/)\"\n            #configNetworkLocalIPv62=\"$(curl https://v6.ident.me/)\"\n\n            green \" ================================================== \"\n            green \" 域名解析地址为 ${configNetworkRealIp}, 本VPS的IP为 ${configNetworkLocalIp1} \"\n\n            echo\n            if [[ ${configNetworkRealIp} == \"${configNetworkLocalIp1}\" || ${configNetworkRealIp} == \"${configNetworkLocalIp2}\" ]] ; then\n\n                green \" 域名解析的IP正常!\"\n                green \" ================================================== \"\n                true\n            else\n                red \" 域名解析地址与本VPS的IP地址不一致!\"\n                red \" 本次安装失败，请确保域名解析正常, 请检查域名和DNS是否生效!\"\n                green \" ================================================== \"\n                false\n            fi\n        else\n            green \" ================================================== \"\n            red \"     域名输入错误!\"\n            green \" ================================================== \"\n            false\n        fi\n\n    else\n        green \" ================================================== \"\n        green \"     不检测域名解析是否正确!\"\n        green \" ================================================== \"\n        true\n    fi\n}\n\n\n\nacmeSSLRegisterEmailInput=\"\"\nisDomainSSLGoogleEABKeyInput=\"\"\nisDomainSSLGoogleEABIdInput=\"\"\n\n\n\nfunction getHTTPSCertificateStep1(){\n\n    testLinuxPortUsage\n\n    echo\n    green \" ================================================== \"\n    yellow \" 请输入绑定到本VPS的域名 例如www.xxx.com: (此步骤请关闭CDN后和nginx后安装 避免80端口占用导致申请证书失败)\"\n    read -r -p \"请输入解析到本VPS的域名:\" configSSLDomain\n\n    if compareRealIpWithLocalIp \"${configSSLDomain}\" ; then\n        echo\n        green \" ==================================================\"\n        green \" 是否申请证书? 默认直接回车为申请证书, 如第二次安装或已有证书 可以选否\"\n        green \" 如果已经有SSL证书文件 请放到下面路径\"\n        red \" ${configSSLDomain} 域名证书内容文件路径 ${configSSLCertPath}/${configSSLCertFullchainFilename} \"\n        red \" ${configSSLDomain} 域名证书私钥文件路径 ${configSSLCertPath}/${configSSLCertKeyFilename} \"\n        echo\n\n        read -r -p \"是否申请证书? 默认直接回车为自动申请证书,请输入[Y/n]?\" isDomainSSLRequestInput\n        isDomainSSLRequestInput=${isDomainSSLRequestInput:-Y}\n\n        if [[ $isDomainSSLRequestInput == [Yy] ]]; then\n\n            getHTTPSCertificateWithAcme \"\"\n\n            if test -s \"${configSSLCertPath}/${configSSLCertFullchainFilename}\"; then\n                green \" ==================================================\"\n                green \"   域名SSL证书申请成功 !\"\n                green \" ${configSSLDomain} 域名证书内容文件路径 ${configSSLCertPath}/${configSSLCertFullchainFilename} \"\n                green \" ${configSSLDomain} 域名证书私钥文件路径 ${configSSLCertPath}/${configSSLCertKeyFilename} \"\n                green \" ==================================================\"\n\n            else\n                red \"===================================\"\n                red \" https证书没有申请成功，安装失败!\"\n                red \" 请检查域名和DNS是否生效, 同一域名请不要一天内多次申请!\"\n                red \" 请检查80和443端口是否开启, VPS服务商可能需要添加额外防火墙规则，例如阿里云、谷歌云等!\"\n                red \" 重启VPS, 重新执行脚本, 可重新选择修复证书选项再次申请证书 ! \"\n                red \"===================================\"\n                exit\n            fi\n\n        else\n            green \" ==================================================\"\n            green \"  不申请域名的证书, 请把证书放到如下目录, 或自行修改配置!\"\n            green \"  ${configSSLDomain} 域名证书内容文件路径 ${configSSLCertPath}/${configSSLCertFullchainFilename} \"\n            green \"  ${configSSLDomain} 域名证书私钥文件路径 ${configSSLCertPath}/${configSSLCertKeyFilename} \"\n            green \" ==================================================\"\n        fi\n    else\n        exit\n    fi\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconfigAlistPort=\"$(($RANDOM + 4000))\"\nconfigAlistPort=\"5244\"\nconfigAlistSystemdServicePath=\"/etc/systemd/system/alist.service\"\n\n\nfunction installAlist(){\n    echo\n    green \" ==================================================\"\n    green \" 请选择 安装/更新/删除 Alist \"\n    green \" 1. 安装 Alist \"\n    green \" 2. 安装 Alist + Nginx (需要域名 并已解析到本机IP)\"\n    green \" 3. 更新 Alist\"\n    red \" 4. 卸载 Alist\"\n    echo\n    read -r -p \"请输入纯数字, 默认为安装:\" languageInput\n\n    createUserWWW\n\n    case \"${languageInput}\" in\n        1 )\n            curl -fsSL \"https://alist.nn.ci/v3.sh\" | bash -s install\n            # sed -i \"/^\\[Service\\]/a \\User=www-data\" ${configAlistSystemdServicePath}\n            ${sudoCmd} systemctl daemon-reload\n            ${sudoCmd} systemctl restart alist\n        ;;\n        2 )\n            curl -fsSL \"https://alist.nn.ci/v3.sh\" | bash -s install\n            # sed -i \"/^\\[Service\\]/a \\User=www-data\" ${configAlistSystemdServicePath}\n            ${sudoCmd} systemctl daemon-reload\n            ${sudoCmd} systemctl restart alist\n\n            green \" ================================================== \"\n            echo\n            green \"是否安装 Nginx web服务器, 安装Nginx可以提高安全性并提供更多功能\"\n            green \"如要安装 Nginx 需要提供域名, 并设置好域名DNS已解析到本机IP\"\n            read -r -p \"是否安装 Nginx web服务器? 直接回车默认安装, 请输入[Y/n]:\" isNginxAlistInstallInput\n            isNginxAlistInstallInput=${isNginxAlistInstallInput:-Y}\n\n            if [[ \"${isNginxAlistInstallInput}\" == [Yy] ]]; then\n                isInstallNginx=\"true\"\n                configSSLCertPath=\"${configSSLCertPath}/alist\"\n                getHTTPSCertificateStep1\n                configInstallNginxMode=\"alist\"\n                installWebServerNginx\n            fi\n        ;;\n        3 )\n            curl -fsSL \"https://alist.nn.ci/v3.sh\" | bash -s update\n        ;;\n        4 )\n            curl -fsSL \"https://alist.nn.ci/v3.sh\" | bash -s uninstall\n        ;;\n        * )\n            exit\n        ;;\n    esac\n    echo\n    green \" ==================================================\"\n    green \" Alist 安装路径为 /opt/alist \"\n    green \" ==================================================\"\n\n}\nfunction installAlistCert(){\n        configSSLCertPath=\"${configSSLCertPath}/alist\"\n        getHTTPSCertificateStep1\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwwwUsername=\"www-data\"\nfunction createUserWWW(){\n\tisHaveWwwUser=$(cat /etc/passwd | cut -d \":\" -f 1 | grep ^${wwwUsername}$)\n\tif [ \"${isHaveWwwUser}\" != \"${wwwUsername}\" ]; then\n\t\t${sudoCmd} groupadd ${wwwUsername}\n\t\t${sudoCmd} useradd -s /usr/sbin/nologin -g ${wwwUsername} ${wwwUsername} --no-create-home\n\tfi\n}\nfunction createNewUserNologin(){\n    newUsername=${1:-etherpad}\n    if [[ -z $(cat /etc/passwd | grep ${newUsername}) ]]; then\n        ${sudoCmd} useradd -M -s /sbin/nologin ${newUsername}\n    fi\n}\nfunction createNewUser(){\n    newUsername=${1:-etherpad}\n    if [[ -z $(cat /etc/passwd | grep ${newUsername}) ]]; then\n        ${sudoCmd} useradd -rm ${newUsername} -U\n        if [ \"$osRelease\" == \"centos\" ]; then\n            usermod -aG wheel ${newUsername}\n        else\n            usermod -aG sudo ${newUsername}\n        fi\n    fi\n}\n\nconfigCloudrevePath=\"/usr/local/cloudreve\"\nconfigCloudreveDownloadCodeFolder=\"${configCloudrevePath}/download\"\nconfigCloudreveCommandFolder=\"${configCloudrevePath}/cmd\"\nconfigCloudreveReadme=\"${configCloudrevePath}/cmd/readme.txt\"\nconfigCloudreveIni=\"${configCloudrevePath}/cmd/conf.ini\"\nconfigCloudrevePort=\"$(($RANDOM + 4000))\"\n\n\nfunction installCloudreve(){\n\n    if [ -f \"${configCloudreveCommandFolder}/cloudreve\" ]; then\n        green \" ==================================================\"\n        green \"     Cloudreve Already installed !\"\n        green \" ==================================================\"\n        exit\n    fi\n\n    createUserWWW\n\n    versionCloudreve=$(getGithubLatestReleaseVersion2 \"cloudreve/Cloudreve\")\n\n    green \" ================================================== \"\n    green \"   Prepare to install Cloudreve ${versionCloudreve}\"\n    green \" ================================================== \"\n\n    getVPSIP\n\n    mkdir -p ${configCloudreveDownloadCodeFolder}\n    mkdir -p ${configCloudreveCommandFolder}\n    cd ${configCloudrevePath}\n\n\n    # https://github.com/cloudreve/Cloudreve/releases/download/3.8.1/cloudreve_3.8.1_linux_amd64.tar.gz\n    # https://github.com/cloudreve/Cloudreve/releases/download/3.4.2/cloudreve_3.8.1_linux_arm.tar.gz\n    # https://github.com/cloudreve/Cloudreve/releases/download/3.4.2/cloudreve_3.8.1_linux_arm64.tar.gz\n\n\n    downloadFilenameCloudreve=\"cloudreve_${versionCloudreve}_linux_amd64.tar.gz\"\n    if [[ ${osArchitecture} == \"arm\" ]] ; then\n        downloadFilenameCloudreve=\"cloudreve_${versionCloudreve}_linux_arm.tar.gz\"\n    fi\n    if [[ ${osArchitecture} == \"arm64\" ]] ; then\n        downloadFilenameCloudreve=\"cloudreve_${versionCloudreve}_linux_arm64.tar.gz\"\n    fi\n\n    downloadAndUnzip \"https://github.com/cloudreve/Cloudreve/releases/download/${versionCloudreve}/${downloadFilenameCloudreve}\" \"${configCloudreveDownloadCodeFolder}\" \"${downloadFilenameCloudreve}\"\n\n    mv ${configCloudreveDownloadCodeFolder}/cloudreve ${configCloudreveCommandFolder}/cloudreve\n    chmod +x ${configCloudreveCommandFolder}/cloudreve\n\n\n    cd ${configCloudreveCommandFolder}\n    echo \"nohup ${configCloudreveCommandFolder}/cloudreve > ${configCloudreveReadme} 2>&1 &\"\n    nohup ${configCloudreveCommandFolder}/cloudreve > ${configCloudreveReadme} 2>&1 &\n    sleep 10\n    pidCloudreve=$(ps -ef | grep cloudreve | grep -v grep | awk '{print $2}')\n    echo \"kill -9 ${pidCloudreve}\"\n    kill -9 ${pidCloudreve}\n    echo\n    sleep 3\n    echo\n\n    ${sudoCmd} chown -R ${wwwUsername}:${wwwUsername} ${configCloudrevePath}\n    ${sudoCmd} chmod -R 775 ${configCloudrevePath}\n\n\n    cat > ${osSystemMdPath}cloudreve.service <<-EOF\n\n[Unit]\nDescription=Cloudreve\nDocumentation=https://docs.cloudreve.org\nAfter=network.target\nWants=network.target\n\n[Service]\n# User=${wwwUsername}\nWorkingDirectory=${configCloudreveCommandFolder}\nExecStart=${configCloudreveCommandFolder}/cloudreve -c ${configCloudreveIni}\nRestart=on-abnormal\nRestartSec=5s\nKillMode=mixed\n\nStandardOutput=null\nStandardError=syslog\n\n[Install]\nWantedBy=multi-user.target\n\nEOF\n\n    echo\n    echo \"Install cloudreve systemmd service ...\"\n    sed -i \"s/5212/${configCloudrevePort}/g\" ${configCloudreveIni}\n    sed -i \"s/5212/${configCloudrevePort}/g\" ${configCloudreveReadme}\n\n    systemctl daemon-reload\n    systemctl start cloudreve\n    systemctl enable cloudreve\n\n    echo\n    green \" ================================================== \"\n    green \" Cloudreve Installed successfully! \"\n    green \" Visit http://${configLocalVPSIp}:${configCloudrevePort}\"\n    green \" 如无法访问, 请设置Firewall防火墙规则 放行 ${configCloudrevePort} 端口\"\n    green \" 查看运行状态命令: systemctl status cloudreve  重启: systemctl restart cloudreve \"\n    green \" Cloudreve INI 配置文件路径: ${configCloudreveIni}\"\n    green \" Cloudreve 默认SQLite 数据库文件路径: ${configCloudreveCommandFolder}/cloudreve.db\"\n    green \" Cloudreve readme 账号密码文件路径: ${configCloudreveReadme}\"\n\n\n    cat ${configCloudreveReadme}\n    green \" ================================================== \"\n\n    echo\n    green \"是否继续安装 Nginx web服务器, 安装Nginx可以提高安全性并提供更多功能\"\n    green \"如要安装 Nginx 需要提供域名, 并设置好域名DNS已解析到本机IP\"\n    echo\n    read -p \"是否安装 Nginx web服务器? 直接回车默认安装, 请输入[Y/n]:\" isNginxInstallInput\n    isNginxInstallInput=${isNginxInstallInput:-Y}\n    echo\n\n    if [[ \"${isNginxInstallInput}\" == [Yy] ]]; then\n        # ${configCloudreveCommandFolder}/cloudreve -eject\n\n        # ${sudoCmd} chown -R ${wwwUsername}:${wwwUsername} ${configCloudrevePath}\n        # ${sudoCmd} chmod -R 775 ${configCloudrevePath}\n\n        isInstallNginx=\"true\"\n        configSSLCertPath=\"${configSSLCertPath}/cloudreve\"\n        getHTTPSCertificateStep1\n        configInstallNginxMode=\"cloudreve\"\n        installWebServerNginx\n    fi\n\n}\n\n\nfunction removeCloudreve(){\n\n    echo\n    read -p \"是否确认卸载 Cloudreve? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveCloudreveInput\n    isRemoveCloudreveInput=${isRemoveCloudreveInput:-Y}\n\n    if [[ \"${isRemoveCloudreveInput}\" == [Yy] ]]; then\n        echo\n\n        if [[ -f \"${configCloudreveCommandFolder}/cloudreve\" ]]; then\n            echo\n            green \" ================================================== \"\n            red \" Prepare to uninstall Cloudreve\"\n            green \" ================================================== \"\n            echo\n\n            ${sudoCmd} systemctl stop cloudreve.service\n            ${sudoCmd} systemctl disable cloudreve.service\n\n            rm -rf \"${configSSLCertPath}/cloudreve\"\n\n            rm -rf ${configCloudrevePath}\n            rm -f ${osSystemMdPath}cloudreve.service\n            rm -f \"${nginxConfigSiteConfPath}/cloudreve_site.conf\"\n\n            systemctl restart nginx.service\n            showHeaderGreen \"  Cloudreve removed !\"\n\n        else\n            showHeaderRed \" Cloudreve not found !\"\n        fi\n\n    fi\n\n    removeNginx\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconfigWebsitePath=\"${configWebsiteFatherPath}/html\"\nnginxAccessLogFilePath=\"${configWebsiteFatherPath}/nginx-access.log\"\nnginxErrorLogFilePath=\"${configWebsiteFatherPath}/nginx-error.log\"\n\nnginxConfigPath=\"/etc/nginx/nginx.conf\"\nnginxConfigSiteConfPath=\"/etc/nginx/conf.d\"\nnginxCloudreveStoragePath=\"${configWebsitePath}/cloudreve_storage\"\nnginxAlistStoragePath=\"${configWebsitePath}/alist_storage\"\nnginxTempPath=\"/var/lib/nginx/tmp\"\nnginxProxyTempPath=\"/var/lib/nginx/proxy_temp\"\nisInstallNginx=\"false\"\n\nfunction installWebServerNginx(){\n\n    echo\n    green \" ================================================== \"\n    yellow \"     开始安装 Web服务器 nginx !\"\n    green \" ================================================== \"\n    echo\n\n    if test -s ${nginxConfigPath}; then\n        showHeaderRed \"Nginx 已存在, 是否继续安装?\" \"Nginx already exists. Continue the installation? \"\n        promptContinueOpeartion\n\n        ${sudoCmd} systemctl stop nginx.service\n    else\n\n        isInstallNginx=\"true\"\n\n        createUserWWW\n        nginxUser=\"${wwwUsername} ${wwwUsername}\"\n\n\n        if [ \"$osRelease\" == \"centos\" ]; then\n            ${osSystemPackage} install -y nginx-mod-stream\n        else\n            echo\n            groupadd -r -g 4 adm\n\n            apt autoremove -y\n            apt-get remove --purge -y nginx-common\n            apt-get remove --purge -y nginx-core\n            apt-get remove --purge -y libnginx-mod-stream\n            apt-get remove --purge -y libnginx-mod-http-xslt-filter libnginx-mod-http-geoip2 libnginx-mod-stream-geoip2 libnginx-mod-mail libnginx-mod-http-image-filter\n\n            apt autoremove -y --purge nginx nginx-common nginx-core\n            apt-get remove --purge -y nginx nginx-full nginx-common nginx-core\n\n            #${osSystemPackage} install -y libnginx-mod-stream\n        fi\n\n        ${osSystemPackage} install -y nginx\n        ${sudoCmd} systemctl enable nginx.service\n        ${sudoCmd} systemctl stop nginx.service\n\n        # 解决出现的nginx warning 错误 Failed to parse PID from file /run/nginx.pid: Invalid argument\n        # https://www.kancloud.cn/tinywan/nginx_tutorial/753832\n\n        mkdir -p /etc/systemd/system/nginx.service.d\n        printf \"[Service]\\nExecStartPost=/bin/sleep 0.1\\n\" > /etc/systemd/system/nginx.service.d/override.conf\n\n        ${sudoCmd} systemctl daemon-reload\n\n    fi\n\n\n\n\n\n    mkdir -p ${configWebsitePath}\n    mkdir -p \"${nginxConfigSiteConfPath}\"\n\n    rm -rf ${configWebsitePath}/*\n    # downloadAndUnzip \"https://github.com/jinwyp/one_click_script/raw/master/download/website2.zip\" \"${configWebsitePath}\" \"website2.zip\"\n    wget -O \"${configWebsitePath}/index.html\" https://raw.githubusercontent.com/nginx/nginx/master/docs/html/index.html\n\n    nginxConfigServerHttpInput=\"\"\n\n    if [[ \"${configInstallNginxMode}\" == \"airuniverse\" ]]; then\n        configV2rayWebSocketPath=$(cat /dev/urandom | head -1 | md5sum | head -c 8)\n\n        echo\n        read -r -p \"是否自定义xray的 Websocket 的Path? 直接回车默认创建随机路径, 请输入自定义路径(不要输入/):\" isV2rayUserWSPathInput\n        isV2rayUserWSPathInput=${isV2rayUserWSPathInput:-${configV2rayWebSocketPath}}\n\n        if [[ -z $isV2rayUserWSPathInput ]]; then\n            echo\n        else\n            configV2rayWebSocketPath=${isV2rayUserWSPathInput}\n        fi\n\n        configV2rayWebSocketPath=\"9b08c0d789\"\n\n        echo\n        read -r -p \"输入xray的端口号? 直接回车默认为8799, 请输入自定义端口号[1-65535]:\" configV2rayPort\n        configV2rayPort=${configV2rayPort:-8799}\n\n        cat > \"${nginxConfigSiteConfPath}/airuniverse.conf\" <<-EOF\n\n    server {\n        listen 443 ssl;\n        listen [::]:443 ssl;\n        # http2  on;\n        server_name  $configSSLDomain;\n\n        ssl_certificate       ${configSSLCertPath}/$configSSLCertFullchainFilename;\n        ssl_certificate_key   ${configSSLCertPath}/$configSSLCertKeyFilename;\n        ssl_protocols         TLSv1.2 TLSv1.3;\n        ssl_ciphers           TLS-AES-256-GCM-SHA384:TLS-CHACHA20-POLY1305-SHA256:TLS-AES-128-GCM-SHA256:TLS-AES-128-CCM-8-SHA256:TLS-AES-128-CCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n\n        # Config for 0-RTT in TLSv1.3\n        ssl_early_data on;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location /$configV2rayWebSocketPath {\n            proxy_pass http://127.0.0.1:$configV2rayPort;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade \\$http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_set_header Host \\$http_host;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        }\n    }\n\n    server {\n        listen  80;\n        server_name  $configSSLDomain;\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location ^~ /.well-known/acme-challenge/ {\n            default_type \"text/plain\";\n            allow all;\n            root $configWebsitePath;\n        }\n        location = /.well-known/acme-challenge/ {\n            return 404;\n        }\n    }\n\nEOF\n\n    elif [[ \"${configInstallNginxMode}\" == \"ghost\" ]]; then\n\n        cat > \"${nginxConfigSiteConfPath}/ghost_site.conf\" <<-EOF\n\n    server {\n        listen 443 ssl;\n        listen [::]:443 ssl;\n        # http2  on;\n        server_name  $configSSLDomain;\n\n        ssl_certificate       ${configSSLCertPath}/$configSSLCertFullchainFilename;\n        ssl_certificate_key   ${configSSLCertPath}/$configSSLCertKeyFilename;\n        ssl_protocols         TLSv1.2 TLSv1.3;\n        ssl_ciphers           TLS-AES-256-GCM-SHA384:TLS-CHACHA20-POLY1305-SHA256:TLS-AES-128-GCM-SHA256:TLS-AES-128-CCM-8-SHA256:TLS-AES-128-CCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n\n        # Config for 0-RTT in TLSv1.3\n        ssl_early_data on;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location / {\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto \\$scheme;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header Host \\$http_host;\n            proxy_pass http://127.0.0.1:3468;\n\n            # 如果您要使用本地存储策略，请将下一行注释符删除，并更改大小为理论最大文件尺寸\n            client_max_body_size  7000m;\n        }\n    }\n\n    server {\n        listen 80;\n        listen [::]:80;\n\n        server_name  $configSSLDomain;\n        root ${configGhostSitePath}/system/nginx-root; # Used for acme.sh SSL verification (https://acme.sh)\n        index index.php index.html index.htm;\n\n        location ^~ /.well-known/acme-challenge/ {\n            default_type \"text/plain\";\n            allow all;\n            root ${configGhostSitePath}/system/nginx-root;\n        }\n        location = /.well-known/acme-challenge/ {\n            return 404;\n        }\n\n        location / {\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto \\$scheme;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header Host \\$http_host;\n            proxy_pass http://127.0.0.1:3468;\n        }\n\n        client_max_body_size 50m;\n    }\n\n\nEOF\n\n    elif [[ \"${configInstallNginxMode}\" == \"cloudreve\" ]]; then\n        # mkdir -p ${configWebsitePath}/static\n        # cp -f -R ${configCloudreveCommandFolder}/statics/* ${configWebsitePath}/static\n        # mv -f ${configWebsitePath}/static/static/* ${configWebsitePath}/static\n\n        mkdir -p ${nginxCloudreveStoragePath}\n        ${sudoCmd} chown -R ${wwwUsername}:${wwwUsername} ${nginxCloudreveStoragePath}\n        ${sudoCmd} chmod -R 774 ${nginxCloudreveStoragePath}\n\n        cat > \"${nginxConfigSiteConfPath}/cloudreve_site.conf\" <<-EOF\n\n    server {\n        listen 443 ssl;\n        listen [::]:443 ssl;\n        # http2  on;\n        server_name  $configSSLDomain;\n\n        ssl_certificate       ${configSSLCertPath}/$configSSLCertFullchainFilename;\n        ssl_certificate_key   ${configSSLCertPath}/$configSSLCertKeyFilename;\n        ssl_protocols         TLSv1.2 TLSv1.3;\n        ssl_ciphers           TLS-AES-256-GCM-SHA384:TLS-CHACHA20-POLY1305-SHA256:TLS-AES-128-GCM-SHA256:TLS-AES-128-CCM-8-SHA256:TLS-AES-128-CCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n\n        # Config for 0-RTT in TLSv1.3\n        ssl_early_data on;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location / {\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header Host \\$http_host;\n            proxy_redirect off;\n            proxy_pass http://127.0.0.1:${configCloudrevePort};\n\n            # 如果您要使用本地存储策略，请将下一行注释符删除，并更改大小为理论最大文件尺寸\n            client_max_body_size  20000m;\n        }\n    }\n\n    server {\n        listen 80;\n        listen [::]:80;\n        server_name  $configSSLDomain;\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location ^~ /.well-known/acme-challenge/ {\n            default_type \"text/plain\";\n            allow all;\n            root $configWebsitePath;\n        }\n        location = /.well-known/acme-challenge/ {\n            return 404;\n        }\n\n        return 301 https://$configSSLDomain\\$request_uri;\n    }\n\nEOF\n\n\n    elif [[ \"${configInstallNginxMode}\" == \"alist\" ]]; then\n\n        mkdir -p ${nginxAlistStoragePath}\n        ${sudoCmd} chown -R ${wwwUsername}:${wwwUsername} ${nginxAlistStoragePath}\n        ${sudoCmd} chmod -R 774 ${nginxAlistStoragePath}\n\n        cat > \"${nginxConfigSiteConfPath}/alist_site.conf\" <<-EOF\n\n    server {\n        listen 443 ssl;\n        listen [::]:443 ssl;\n        # http2  on;\n        server_name  $configSSLDomain;\n\n        ssl_certificate       ${configSSLCertPath}/$configSSLCertFullchainFilename;\n        ssl_certificate_key   ${configSSLCertPath}/$configSSLCertKeyFilename;\n        ssl_protocols         TLSv1.2 TLSv1.3;\n        ssl_ciphers           TLS-AES-256-GCM-SHA384:TLS-CHACHA20-POLY1305-SHA256:TLS-AES-128-GCM-SHA256:TLS-AES-128-CCM-8-SHA256:TLS-AES-128-CCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n\n        # Config for 0-RTT in TLSv1.3\n        ssl_early_data on;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location / {\n\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto \\$scheme;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header Host \\$http_host;\n            proxy_set_header Range \\$http_range;\n            proxy_set_header If-Range \\$http_if_range;\n            proxy_redirect off;\n            proxy_pass http://127.0.0.1:${configAlistPort};\n\n            # 上传的最大文件尺寸\n            # the max size of file to upload\n            client_max_body_size   20000m;\n        }\n    }\n\n    server {\n        listen 80;\n        listen [::]:80;\n        server_name  $configSSLDomain;\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location ^~ /.well-known/acme-challenge/ {\n            default_type \"text/plain\";\n            allow all;\n            root $configWebsitePath;\n        }\n        location = /.well-known/acme-challenge/ {\n            return 404;\n        }\n        return 301 https://$configSSLDomain\\$request_uri;\n    }\n\nEOF\n    elif [[ \"${configInstallNginxMode}\" == \"grist\" ]]; then\n\n        cat > \"${nginxConfigSiteConfPath}/grist_site.conf\" <<-EOF\n\n    server {\n        listen 443 ssl;\n        listen [::]:443 ssl;\n        # http2  on;\n        server_name  $configSSLDomain;\n\n        ssl_certificate       ${configSSLCertPath}/$configSSLCertFullchainFilename;\n        ssl_certificate_key   ${configSSLCertPath}/$configSSLCertKeyFilename;\n        ssl_protocols         TLSv1.2 TLSv1.3;\n        ssl_ciphers           TLS-AES-256-GCM-SHA384:TLS-CHACHA20-POLY1305-SHA256:TLS-AES-128-GCM-SHA256:TLS-AES-128-CCM-8-SHA256:TLS-AES-128-CCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n\n        # Config for 0-RTT in TLSv1.3\n        ssl_early_data on;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location / {\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header Host \\$http_host;\n            proxy_set_header Range \\$http_range;\n            proxy_set_header If-Range \\$http_if_range;\n            proxy_redirect off;\n            proxy_pass http://127.0.0.1:8484;\n\n        }\n    }\n\n    server {\n        listen 80;\n        listen [::]:80;\n        server_name  $configSSLDomain;\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location ^~ /.well-known/acme-challenge/ {\n            default_type \"text/plain\";\n            allow all;\n            root $configWebsitePath;\n        }\n        location = /.well-known/acme-challenge/ {\n            return 404;\n        }\n        return 301 https://$configSSLDomain\\$request_uri;\n    }\nEOF\n\n    elif [[ \"${configInstallNginxMode}\" == \"nocodb\" ]]; then\n\n        cat > \"${nginxConfigSiteConfPath}/nocodb_site.conf\" <<-EOF\n\n    server {\n        listen 443 ssl;\n        listen [::]:443 ssl;\n        # http2  on;\n        server_name  $configSSLDomain;\n\n        ssl_certificate       ${configSSLCertPath}/$configSSLCertFullchainFilename;\n        ssl_certificate_key   ${configSSLCertPath}/$configSSLCertKeyFilename;\n        ssl_protocols         TLSv1.2 TLSv1.3;\n        ssl_ciphers           TLS-AES-256-GCM-SHA384:TLS-CHACHA20-POLY1305-SHA256:TLS-AES-128-GCM-SHA256:TLS-AES-128-CCM-8-SHA256:TLS-AES-128-CCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n\n        # Config for 0-RTT in TLSv1.3\n        ssl_early_data on;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location / {\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header Host \\$http_host;\n            proxy_set_header Range \\$http_range;\n            proxy_set_header If-Range \\$http_if_range;\n            proxy_redirect off;\n            proxy_pass http://127.0.0.1:8080;\n        }\n    }\n\n    server {\n        listen 80;\n        listen [::]:80;\n        server_name  $configSSLDomain;\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location ^~ /.well-known/acme-challenge/ {\n            default_type \"text/plain\";\n            allow all;\n            root $configWebsitePath;\n        }\n        location = /.well-known/acme-challenge/ {\n            return 404;\n        }\n        return 301 https://$configSSLDomain\\$request_uri;\n    }\nEOF\n\n    elif [[ \"${configInstallNginxMode}\" == \"etherpad\" ]]; then\n\n        cat > \"${nginxConfigSiteConfPath}/etherpad_site.conf\" <<-EOF\n\n    server {\n        listen 443 ssl;\n        listen [::]:443 ssl;\n        # http2  on;\n        server_name  $configSSLDomain;\n\n        ssl_certificate       ${configSSLCertPath}/$configSSLCertFullchainFilename;\n        ssl_certificate_key   ${configSSLCertPath}/$configSSLCertKeyFilename;\n        ssl_protocols         TLSv1.2 TLSv1.3;\n        ssl_ciphers           TLS-AES-256-GCM-SHA384:TLS-CHACHA20-POLY1305-SHA256:TLS-AES-128-GCM-SHA256:TLS-AES-128-CCM-8-SHA256:TLS-AES-128-CCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n\n        # Config for 0-RTT in TLSv1.3\n        ssl_early_data on;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location / {\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header Host \\$http_host;\n            proxy_set_header Range \\$http_range;\n            proxy_set_header If-Range \\$http_if_range;\n            proxy_redirect off;\n            proxy_pass http://127.0.0.1:9001;\n\n        }\n    }\n\n    server {\n        listen 80;\n        listen [::]:80;\n        server_name  $configSSLDomain;\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location ^~ /.well-known/acme-challenge/ {\n            default_type \"text/plain\";\n            allow all;\n            root $configWebsitePath;\n        }\n        location = /.well-known/acme-challenge/ {\n            return 404;\n        }\n        return 301 https://$configSSLDomain\\$request_uri;\n    }\nEOF\n\n    elif [[ \"${configInstallNginxMode}\" == \"joplin\" ]]; then\n\n        cat > \"${nginxConfigSiteConfPath}/joplin_site.conf\" <<-EOF\n\n    server {\n        listen 443 ssl;\n        listen [::]:443 ssl;\n        # http2  on;\n        server_name  $configSSLDomain;\n\n        ssl_certificate       ${configSSLCertPath}/$configSSLCertFullchainFilename;\n        ssl_certificate_key   ${configSSLCertPath}/$configSSLCertKeyFilename;\n        ssl_protocols         TLSv1.2 TLSv1.3;\n        ssl_ciphers           TLS-AES-256-GCM-SHA384:TLS-CHACHA20-POLY1305-SHA256:TLS-AES-128-GCM-SHA256:TLS-AES-128-CCM-8-SHA256:TLS-AES-128-CCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n\n        # Config for 0-RTT in TLSv1.3\n        ssl_early_data on;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location / {\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header Host \\$http_host;\n            proxy_set_header Range \\$http_range;\n            proxy_set_header If-Range \\$http_if_range;\n            proxy_redirect off;\n            proxy_pass http://127.0.0.1:${configJoplin_PORT};\n\n        }\n    }\n\n    server {\n        listen 80;\n        listen [::]:80;\n        server_name  $configSSLDomain;\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location ^~ /.well-known/acme-challenge/ {\n            default_type \"text/plain\";\n            allow all;\n            root $configWebsitePath;\n        }\n        location = /.well-known/acme-challenge/ {\n            return 404;\n        }\n        return 301 https://$configSSLDomain\\$request_uri;\n    }\nEOF\n\n    elif [[ \"${configInstallNginxMode}\" == \"affine\" ]]; then\n        cat > \"${nginxConfigSiteConfPath}/affine_site.conf\" <<-EOF\n\n    server {\n        listen 443 ssl;\n        listen [::]:443 ssl;\n        # http2  on;\n        server_name  $configSSLDomain;\n\n        ssl_certificate       ${configSSLCertPath}/$configSSLCertFullchainFilename;\n        ssl_certificate_key   ${configSSLCertPath}/$configSSLCertKeyFilename;\n        ssl_protocols         TLSv1.2 TLSv1.3;\n        ssl_ciphers           TLS-AES-256-GCM-SHA384:TLS-CHACHA20-POLY1305-SHA256:TLS-AES-128-GCM-SHA256:TLS-AES-128-CCM-8-SHA256:TLS-AES-128-CCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n\n        # Config for 0-RTT in TLSv1.3\n        ssl_early_data on;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location / {\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header Host \\$http_host;\n            proxy_set_header Range \\$http_range;\n            proxy_set_header If-Range \\$http_if_range;\n            proxy_redirect off;\n            proxy_pass http://127.0.0.1:${configAffine_PORT};\n\n        }\n    }\n\n    server {\n        listen 80;\n        listen [::]:80;\n        server_name  $configSSLDomain;\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location ^~ /.well-known/acme-challenge/ {\n            default_type \"text/plain\";\n            allow all;\n            root $configWebsitePath;\n        }\n        location = /.well-known/acme-challenge/ {\n            return 404;\n        }\n        return 301 https://$configSSLDomain\\$request_uri;\n    }\nEOF\n\n\n    elif [[ \"${configInstallNginxMode}\" == \"focalboard\" ]]; then\n        cat > \"${nginxConfigSiteConfPath}/focalboard_site.conf\" <<-EOF\n\n    upstream focalboard {\n        server localhost:${configFocalboard_PORT};\n        keepalive 32;\n    }\n\n    server {\n        listen 443 ssl;\n        listen [::]:443 ssl;\n        # http2  on;\n        server_name  $configSSLDomain;\n\n        ssl_certificate       ${configSSLCertPath}/$configSSLCertFullchainFilename;\n        ssl_certificate_key   ${configSSLCertPath}/$configSSLCertKeyFilename;\n        ssl_protocols         TLSv1.2 TLSv1.3;\n        ssl_ciphers           TLS-AES-256-GCM-SHA384:TLS-CHACHA20-POLY1305-SHA256:TLS-AES-128-GCM-SHA256:TLS-AES-128-CCM-8-SHA256:TLS-AES-128-CCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n\n        # Config for 0-RTT in TLSv1.3\n        ssl_early_data on;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location ~ /ws/* {\n            proxy_set_header Upgrade \\$http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            client_max_body_size 50M;\n            proxy_set_header Host \\$http_host;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto \\$scheme;\n            proxy_set_header X-Frame-Options SAMEORIGIN;\n            proxy_buffers 256 16k;\n            proxy_buffer_size 16k;\n            client_body_timeout 60;\n            send_timeout 300;\n            lingering_timeout 5;\n            proxy_connect_timeout 1d;\n            proxy_send_timeout 1d;\n            proxy_read_timeout 1d;\n            proxy_pass http://focalboard;\n        }\n\n        location / {\n            proxy_set_header Range \\$http_range;\n            proxy_set_header If-Range \\$http_if_range;\n            proxy_redirect off;\n\n            client_max_body_size 50M;\n            proxy_set_header Connection \"\";\n            proxy_set_header Host \\$http_host;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto \\$scheme;\n            proxy_set_header X-Frame-Options SAMEORIGIN;\n            proxy_buffers 256 16k;\n            proxy_buffer_size 16k;\n            proxy_read_timeout 600s;\n            proxy_cache_revalidate on;\n            proxy_cache_min_uses 2;\n            proxy_cache_use_stale timeout;\n            proxy_cache_lock on;\n            proxy_http_version 1.1;\n            proxy_pass http://focalboard;\n        }\n\n    }\n\n    server {\n        listen 80;\n        listen [::]:80;\n        server_name  $configSSLDomain;\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location ^~ /.well-known/acme-challenge/ {\n            default_type \"text/plain\";\n            allow all;\n            root $configWebsitePath;\n        }\n        location = /.well-known/acme-challenge/ {\n            return 404;\n        }\n        return 301 https://$configSSLDomain\\$request_uri;\n    }\nEOF\n\n\n    elif [[ \"${configInstallNginxMode}\" == \"freegpt35\" ]]; then\n        cat > \"${nginxConfigSiteConfPath}/freegpt35_site.conf\" <<-EOF\n\n    upstream freegptapi {\n        server 127.0.0.1:${configAurora_PORT};\n    }\n    upstream freegptnextweb {\n        server 127.0.0.1:${configChatGPTNextWeb_PORT};\n    }\n\n    server {\n        listen 443 ssl;\n        listen [::]:443 ssl;\n        # http2  on;\n        server_name  $configSSLDomain;\n\n        ssl_certificate       ${configSSLCertPath}/$configSSLCertFullchainFilename;\n        ssl_certificate_key   ${configSSLCertPath}/$configSSLCertKeyFilename;\n        ssl_protocols         TLSv1.2 TLSv1.3;\n        ssl_ciphers           TLS-AES-256-GCM-SHA384:TLS-CHACHA20-POLY1305-SHA256:TLS-AES-128-GCM-SHA256:TLS-AES-128-CCM-8-SHA256:TLS-AES-128-CCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n\n        # Config for 0-RTT in TLSv1.3\n        ssl_early_data on;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location / {\n            proxy_set_header Range \\$http_range;\n            proxy_set_header If-Range \\$http_if_range;\n            proxy_redirect off;\n\n            client_max_body_size 50M;\n            proxy_set_header Connection \"upgrade\";\n            proxy_set_header Host \\$http_host;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header REMOTE-HOST \\$remote_addr;\n            proxy_set_header Upgrade \\$http_upgrade;\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto \\$scheme;\n            proxy_set_header X-Frame-Options SAMEORIGIN;\n            proxy_buffers 256 16k;\n            proxy_buffer_size 16k;\n            proxy_read_timeout 600s;\n            proxy_cache_revalidate on;\n            proxy_cache_min_uses 2;\n            proxy_cache_use_stale timeout;\n            proxy_cache_lock on;\n            proxy_http_version 1.1;\n            proxy_pass http://freegptnextweb;\n\n            add_header Cache-Control no-cache;\n            proxy_cache off;\n            proxy_buffering off;\n            chunked_transfer_encoding on;\n            tcp_nopush on;\n            tcp_nodelay on;\n            keepalive_timeout 300;\n\n        }\n\n    }\n\n    server {\n        listen 80;\n        listen [::]:80;\n        server_name  $configSSLDomain;\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location ^~ /.well-known/acme-challenge/ {\n            default_type \"text/plain\";\n            allow all;\n            root $configWebsitePath;\n        }\n        location = /.well-known/acme-challenge/ {\n            return 404;\n        }\n        location / {\n            proxy_set_header Range \\$http_range;\n            proxy_set_header If-Range \\$http_if_range;\n            proxy_redirect off;\n\n            client_max_body_size 50M;\n            proxy_set_header Connection \"upgrade\";\n            proxy_set_header Host \\$http_host;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header REMOTE-HOST \\$remote_addr;\n            proxy_set_header Upgrade \\$http_upgrade;\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto \\$scheme;\n            proxy_set_header X-Frame-Options SAMEORIGIN;\n            proxy_buffers 256 16k;\n            proxy_buffer_size 16k;\n            proxy_read_timeout 600s;\n            proxy_cache_revalidate on;\n            proxy_cache_min_uses 2;\n            proxy_cache_use_stale timeout;\n            proxy_cache_lock on;\n            proxy_http_version 1.1;\n            proxy_pass http://freegptapi;\n\n            add_header Cache-Control no-cache;\n            proxy_cache off;\n            proxy_buffering off;\n            chunked_transfer_encoding on;\n            tcp_nopush on;\n            tcp_nodelay on;\n            keepalive_timeout 300;\n\n        }\n    }\nEOF\n\n    else\n        echo\n    fi\n\n\n    # https://raw.githubusercontent.com/nginx/nginx/master/conf/mime.types\n\n    cat > \"${nginxConfigPath}\" <<-EOF\n\ninclude /etc/nginx/modules-enabled/*.conf;\n\n# user  ${nginxUser};\nuser root;\nworker_processes  auto;\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '\\$remote_addr - \\$remote_user [\\$time_local] '\n                      '\"\\$request\" \\$status \\$body_bytes_sent  '\n                      '\"\\$http_referer\" \"\\$http_user_agent\" \"\\$http_x_forwarded_for\"';\n    access_log  $nginxAccessLogFilePath  main;\n    error_log $nginxErrorLogFilePath;\n\n    sendfile        on;\n    #tcp_nopush     on;\n    keepalive_timeout  120;\n    client_max_body_size 20m;\n    gzip  on;\n    proxy_temp_path ${nginxProxyTempPath} 1 2;\n    client_body_temp_path ${nginxTempPath}/client_body 1 2;\n\n    ${nginxConfigServerHttpInput}\n\n    include ${nginxConfigSiteConfPath}/*.conf;\n}\n\nEOF\n\n\n\n\n    ${sudoCmd} chown -R ${wwwUsername}:${wwwUsername} ${configWebsitePath}\n    ${sudoCmd} chmod -R 774 ${configWebsitePath}\n\n    # /var/lib/nginx/tmp/client_body /var/lib/nginx/tmp/proxy 权限问题\n    mkdir -p \"${nginxTempPath}/client_body\"\n    mkdir -p \"${nginxTempPath}/proxy\"\n    mkdir -p \"${nginxProxyTempPath}\"\n\n\n    ${sudoCmd} chown -R ${wwwUsername}:${wwwUsername} ${nginxTempPath}\n    ${sudoCmd} chmod -R 775 ${nginxTempPath}\n\n    ${sudoCmd} chown -R ${wwwUsername}:${wwwUsername} ${nginxProxyTempPath}\n    ${sudoCmd} chmod -R 775 ${nginxProxyTempPath}\n\n    ${sudoCmd} systemctl start nginx.service\n\n    echo\n    green \" ================================================== \"\n    green \" Web服务器 nginx 安装成功. 站点为 https://${configSSLDomain}\"\n    echo\n\tred \" nginx 配置路径 ${nginxConfigPath} \"\n\tgreen \" nginx 访问日志 ${nginxAccessLogFilePath},  错误日志 ${nginxErrorLogFilePath}  \"\n    green \" nginx 查看日志命令: journalctl -n 50 -u nginx.service\"\n\tgreen \" nginx 启动命令: systemctl start nginx.service  停止命令: systemctl stop nginx.service  重启命令: systemctl restart nginx.service\"\n\tgreen \" nginx 查看运行状态命令: systemctl status nginx.service \"\n    green \" ================================================== \"\n    echo\n\n    if [[ \"${configInstallNginxMode}\" == \"alist\" ]]; then\n        green \" Alist Installed ! Working port: ${configAlistPort}\"\n        green \" Please visit https://${configSSLDomain}\"\n        green \" 启动命令: systemctl start alist  停止命令: systemctl stop alist \"\n        green \" 查看运行状态命令: systemctl status alist  重启: systemctl restart alist \"\n        green \" Cloudreve INI 配置文件路径: /opt/alist/data/config.json \"\n        green \" Cloudreve 默认SQLite 数据库文件路径: /opt/alist/data/data.db\"\n        red \" 请在管理面板-> 账号-> 添加-> 类型选择 本地,  把 根目录路径 设置为 ${nginxAlistStoragePath}\"\n\n        green \" ================================================== \"\n    fi\n\n    if [[ \"${configInstallNginxMode}\" == \"cloudreve\" ]]; then\n        green \" Cloudreve Installed successfully ! Running at port: ${configCloudrevePort}\"\n        green \" Please visit https://${configSSLDomain}\"\n        green \" 查看运行状态命令: systemctl status cloudreve  重启: systemctl restart cloudreve \"\n        green \" Cloudreve INI 配置文件路径: ${configCloudreveIni}\"\n        green \" Cloudreve 默认SQLite 数据库文件路径: ${configCloudreveCommandFolder}/cloudreve.db\"\n        green \" Cloudreve readme 账号密码文件路径: ${configCloudreveReadme}\"\n        red \" 请在管理面板->存储策略->编辑默认存储策略->存储路径 设置为 ${nginxCloudreveStoragePath}\"\n\n        cat ${configCloudreveReadme}\n        green \" ================================================== \"\n    fi\n}\n\nfunction removeNginx(){\n\n    echo\n    read -r -p \"是否确认卸载Nginx? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveNginxServerInput\n    isRemoveNginxServerInput=${isRemoveNginxServerInput:-Y}\n\n    if [[ \"${isRemoveNginxServerInput}\" == [Yy] ]]; then\n\n        echo\n        if [[ -f \"${nginxConfigPath}\" ]]; then\n\n            showHeaderRed \"准备卸载已安装的nginx\"\n\n            ${sudoCmd} systemctl stop nginx.service\n            ${sudoCmd} systemctl disable nginx.service\n\n            if [ \"$osRelease\" == \"centos\" ]; then\n                yum remove -y nginx-mod-stream\n                yum remove -y nginx\n            else\n                apt autoremove -y\n                apt-get remove --purge -y nginx-common\n                apt-get remove --purge -y nginx-core\n                apt-get remove --purge -y libnginx-mod-stream\n                apt-get remove --purge -y libnginx-mod-http-xslt-filter libnginx-mod-http-geoip2 libnginx-mod-stream-geoip2 libnginx-mod-mail libnginx-mod-http-image-filter\n\n                apt autoremove -y --purge nginx nginx-common nginx-core\n                apt-get remove --purge -y nginx nginx-full nginx-common nginx-core\n            fi\n\n\n            rm -f ${nginxAccessLogFilePath}\n            rm -f ${nginxErrorLogFilePath}\n            rm -f ${nginxConfigPath}\n            rm -rf ${nginxConfigSiteConfPath}\n\n            rm -rf \"/etc/nginx\"\n\n            rm -rf ${configDownloadTempPath}\n\n            echo\n            read -r -p \"是否删除证书 和 卸载acme.sh申请证书工具, 由于一天内申请证书有次数限制, 默认建议不删除证书,  请输入[y/N]:\" isDomainSSLRemoveInput\n            isDomainSSLRemoveInput=${isDomainSSLRemoveInput:-n}\n\n\n            if [[ $isDomainSSLRemoveInput == [Yy] ]]; then\n                rm -rf ${configWebsiteFatherPath}\n                ${sudoCmd} bash ${configSSLAcmeScriptPath}/acme.sh --uninstall\n\n                showHeaderGreen \"Nginx 卸载完毕, SSL 证书文件已删除!\"\n\n            else\n                rm -rf ${configWebsitePath}\n                showHeaderGreen \"Nginx 卸载完毕, 已保留 SSL 证书文件 到 ${configSSLCertPath} \"\n            fi\n\n        else\n            showHeaderRed \"系统没有安装 Nginx, 退出卸载\"\n        fi\n        echo\n\n    fi\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconfigGhostProjectPath=\"/opt/ghost\"\nconfigGhostDockerPath=\"/opt/ghost/docker\"\nconfigGhostSitePath=\"/opt/ghost/site\"\nghostUser=\"ghostsite\"\n\nfunction installCMSGhost(){\n    if [[ -d \"${configGhostDownloadPath}\" ]]; then\n        showHeaderRed \"Ghost already installed !\"\n        exit\n    fi\n    showHeaderGreen \"Prepare to install Ghost !\"\n\n    if ! command -v npm &> /dev/null ; then\n        showHeaderRed \"Npm could not be found, Please install Nodejs first !\"\n        exit\n    fi\n\n    isInstallNginx=\"true\"\n    configSSLCertPath=\"${configSSLCertPath}/ghost\"\n    getHTTPSCertificateStep1\n    configInstallNginxMode=\"ghost\"\n    installWebServerNginx\n\n\n\n    createNewUser \"${ghostUser}\"\n    # passwd \"${ghostUser}\" ghost2022user\n\n    # https://stackoverflow.com/questions/714915/using-the-passwd-command-from-within-a-shell-script\n    echo \"ghost2022user\" | passwd \"${ghostUser}\" --stdin\n    red \" Password for linux user ghostsite: ghost2022user\"\n    echo\n\n    ${sudoCmd} mkdir -p \"${configGhostSitePath}\"\n\n    ${sudoCmd} chown -R ${ghostUser}:${ghostUser} \"${configGhostProjectPath}\"\n    ${sudoCmd} chmod -R 775  \"${configGhostProjectPath}\"\n\n    cd \"${configGhostSitePath}\" || exit\n    ${sudoCmd} npm install ghost-cli@latest -g\n\n    # su - \"ghost\" -c cd \"${configGhostSitePath}\"\n\n    su - ${ghostUser} << EOF\n    echo \"--------------------\"\n    echo \"Current user:\"\n    whoami\n    echo\n    cd \"${configGhostSitePath}\"\n    ghost install --port 3468 --db=sqlite3 --no-setup-nginx --no-setup-ssl --no-setup-mysql --no-stack --no-prompt --dir ${configGhostSitePath} --url https://${configSSLDomain}\n    echo \"--------------------\"\nEOF\n\n    echo\n    echo \"Current user: $(whoami)\"\n    echo\n\n    showHeaderGreen \"Ghost installed successfully! \" \\\n    \"Ghost Admin panel:  http://localhost:3468/ghost\" \\\n    \"The SQLite3 database located in ${configGhostSitePath}/content/data\"\n\n    showHeaderGreen \" Please manually run following command if installation failed: \" \\\n    \"su - ${ghostUser}\" \\\n    \"cd ${configGhostSitePath}\" \\\n    \"ghost install --port 3468 --db=sqlite3 --no-setup-nginx --no-setup-ssl --no-setup-mysql --no-stack --no-prompt --dir ${configGhostSitePath} --url https://${configSSLDomain}\"\n    red \"Input password 'ghost2022user' when ask for linux user 'ghostsite' password\"\n\n\n        read -r -d '' ghostConfigEmailInput << EOM\n    \"mail\": {\n      \"from\": \"annajscool@freair.com\",\n      \"transport\": \"SMTP\",\n      \"options\": {\n        \"host\": \"smtp.gmail.com\",\n        \"service\": \"Gmail\",\n        \"port\": \"465\",\n        \"secure\": true,\n        \"auth\": {\n          \"user\": \"jinwyp2@gmail.com\",\n          \"pass\": \"aslgotjzmwrkuvto\"\n        }\n      }\n    },\nEOM\n\n\n}\n\n\nfunction removeCMSGhost(){\n    echo\n    read -r -p \"是否确认卸载Ghost? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveGhostInput\n    isRemoveGhostInput=${isRemoveGhostInput:-Y}\n\n    if [[ \"${isRemoveGhostInput}\" == [Yy] ]]; then\n\n        echo\n        if [[ -d \"${configGhostSitePath}\" ]]; then\n\n            showHeaderGreen \"准备卸载已安装的 Ghost\"\n\n    su - ${ghostUser} << EOF\n    echo \"--------------------\"\n    echo \"Current user:\"\n    whoami\n    echo\n    cd \"${configGhostSitePath}\"\n    ghost stop\n    ghost uninstall\n    echo \"--------------------\"\nEOF\n\n            userdel -r \"${ghostUser}\"\n\n            rm -rf \"${configGhostSitePath}\"\n            rm -f \"${nginxConfigSiteConfPath}/ghost_site.conf\"\n\n            systemctl restart nginx.service\n            showHeaderGreen \"已成功卸载 Ghost !\"\n        else\n            showHeaderRed \"系统没有安装 Ghost, 退出卸载\"\n        fi\n\n    fi\n    removeNginx\n\n}\n\nfunction testCMSGhost(){\n                su - ghostsite << EOF\n    echo \"--------------------\"\n    echo \"Current user: $(whoami)\"\n    whoami\n    $(whoami)\n    # ghost install --port 3468 --db=sqlite3 --no-prompt --dir ${configGhostSitePath} --url https://${configSSLDomain}\n    echo \"--------------------\"\nEOF\nwhoami\nsudo -u ghostsite bash << EOF\necho \"In\"\nwhoami\nEOF\necho \"Out\"\nwhoami\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nconfigEtherpadProjectPath=\"${HOME}/etherpad\"\nconfigEtherpadDockerPath=\"${HOME}/etherpad/docker\"\nconfigEtherpadDockerComposeFilePath=\"${HOME}/etherpad/docker/docker-compose.yml\"\n\n# Online collaborative Document\nfunction installEtherpad(){\n    if [[ -d \"${configEtherpadDockerPath}\" ]]; then\n        showHeaderRed \" Etherpad already installed !\"\n        exit\n    fi\n    showHeaderGreen \"开始 使用Docker方式 安装 Etherpad \"\n\n    createNewUserNologin \"etherpad\"\n    ${sudoCmd} mkdir -p \"${configEtherpadDockerPath}/data\"\n    cd \"${configEtherpadDockerPath}\" || exit\n\n    ${sudoCmd} chown -R etherpad:root \"${configEtherpadDockerPath}\"\n    ${sudoCmd} chmod -R 774 \"${configEtherpadDockerPath}\"\n\n    docker pull etherpad/etherpad\n\n\n    read -r -p \"请输入Admin的密码 (默认为admin):\" configEtherpadPasswordInput\n    configEtherpadPasswordInput=${configEtherpadPasswordInput:-admin}\n    echo\n\n    green \" ================================================== \"\n    echo\n    green \"是否安装 Nginx web服务器, 安装Nginx可以提高安全性并提供更多功能\"\n    green \"如要安装 Nginx 需要提供域名, 并设置好域名DNS已解析到本机IP\"\n    echo\n    read -r -p \"是否安装 Nginx web服务器? 直接回车默认安装, 请输入[Y/n]:\" isNginxInstallInput\n    isNginxInstallInput=${isNginxInstallInput:-Y}\n\n    echo\n    echo \"docker run -d -p 9001:9001 -e ADMIN_PASSWORD=${configEtherpadPasswordInput} --name etherpad etherpad/etherpad\"\n    echo\n\n\n    cat > \"${configEtherpadDockerComposeFilePath}\" <<-EOF\n\nversion: '3'\n\nservices:\n    etherpad:\n        image: etherpad/etherpad:latest\n        container_name: etherpad\n        volumes:\n            - ${configEtherpadDockerPath}/data:/opt/etherpad-lite/var\n        ports:\n            - \"9001:9001\"\n        restart: unless-stopped\n        environment:\n            - SUPPRESS_ERRORS_IN_PAD_TEXT=true\n            - ADMIN_PASSWORD=1234562024\n            - DEFAULT_PAD_TEXT=Welcome to Etherpad Lite!\n        networks:\n            meet.jitsi:\n                aliases:\n                    - etherpad.meet.jitsi\nEOF\n\n    # docker-compose up -d\n\n\n\n    if [[ \"${isNginxInstallInput}\" == [Yy] ]]; then\n        isInstallNginx=\"true\"\n        configSSLCertPath=\"${configSSLCertPath}/etherpad\"\n        getHTTPSCertificateStep1\n        configInstallNginxMode=\"etherpad\"\n        installWebServerNginx\n\n        docker run -d -p 9001:9001 -e 'ADMIN_PASSWORD=${configEtherpadPasswordInput}' -e TRUST_PROXY=true -v ${configEtherpadDockerPath}/data:/opt/etherpad-lite/var --name etherpad etherpad/etherpad\n\n        ${sudoCmd} systemctl restart nginx.service\n        showHeaderGreen \"Etherpad install success !  https://${configSSLDomain}\" \\\n        \"Admin panel: https://${configSSLDomain}/admin   User: admin, Password: ${configEtherpadPasswordInput}\"\n    else\n        docker run -d -p 9001:9001 -e 'ADMIN_PASSWORD=${configEtherpadPasswordInput}' -v ${configEtherpadDockerPath}/data:/opt/etherpad-lite/var --name etherpad etherpad/etherpad\n\n        showHeaderGreen \"Etherpad install success !  http://your_ip:9001/\" \\\n        \"Admin panel: http://your_ip:9001/admin  User: admin, Password: ${configEtherpadPasswordInput}\"\n    fi\n}\n\nfunction removeEtherpad(){\n    echo\n    read -r -p \"是否确认卸载Etherpad? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveEtherpadInput\n    isRemoveEtherpadInput=${isRemoveEtherpadInput:-Y}\n\n    if [[ \"${isRemoveEtherpadInput}\" == [Yy] ]]; then\n        if [[ -d \"${configEtherpadDockerPath}\" ]]; then\n            echo\n            showHeaderGreen \"准备卸载已安装的 Etherpad\"\n\n            dockerIDEtherpad=$(docker ps -a -q --filter ancestor=etherpad/etherpad --format=\"{{.ID}}\")\n            if [[ -n \"${dockerIDEtherpad}\" ]]; then\n                ${sudoCmd} docker stop \"${dockerIDEtherpad}\"\n                ${sudoCmd} docker rm \"${dockerIDEtherpad}\"\n            fi\n\n            rm -rf \"${configEtherpadProjectPath}\"\n            if [[ -f \"${nginxConfigSiteConfPath}/etherpad_site.conf\" ]]; then\n                rm -f \"${nginxConfigSiteConfPath}/etherpad_site.conf\"\n                systemctl restart nginx.service\n            fi\n\n            showHeaderGreen \"已成功卸载 Etherpad Docker 版本 !\"\n\n        else\n            showHeaderRed \"系统没有安装 Etherpad, 退出卸载\"\n        fi\n\n    fi\n    removeNginx\n}\n\n\n\n\n\n\nconfigNocoDBProjectPath=\"${HOME}/nocodb\"\nconfigNocoDBDockerPath=\"${HOME}/nocodb/docker\"\n\n# Online Spreadsheet\nfunction installNocoDB(){\n\n    if [[ -d \"${configNocoDBDockerPath}\" ]]; then\n        showHeaderRed \" NocoDB already installed !\"\n        exit\n    fi\n    showHeaderGreen \"开始 使用Docker方式 安装 NocoDB \"\n\n    ${sudoCmd} mkdir -p \"${configNocoDBDockerPath}/data\"\n    cd \"${configNocoDBDockerPath}\" || exit\n\n    docker pull nocodb/nocodb:latest\n\n\n    green \" ================================================== \"\n    echo\n    green \"是否安装 Nginx web服务器, 安装Nginx可以提高安全性并提供更多功能\"\n    green \"如要安装 Nginx 需要提供域名, 并设置好域名DNS已解析到本机IP\"\n    echo\n    read -r -p \"是否安装 Nginx web服务器? 直接回车默认安装, 请输入[Y/n]:\" isNginxInstallInput\n    isNginxInstallInput=${isNginxInstallInput:-Y}\n\n    echo\n    echo \"docker run -d --name nocodb -p 8080:8080  -v ${configNocoDBDockerPath}/data:/usr/app/data/ nocodb/nocodb:latest\"\n    echo\n\n    if [[ \"${isNginxInstallInput}\" == [Yy] ]]; then\n        isInstallNginx=\"true\"\n        configSSLCertPath=\"${configSSLCertPath}/nocodb\"\n        getHTTPSCertificateStep1\n        configInstallNginxMode=\"nocodb\"\n        installWebServerNginx\n\n        docker run -d --name nocodb -p 8080:8080 -v ${configNocoDBDockerPath}/data:/usr/app/data/ nocodb/nocodb:latest\n\n        ${sudoCmd} systemctl restart nginx.service\n        showHeaderGreen \"NocoDB install success !  https://${configSSLDomain}\"\n    else\n        docker run -d --name nocodb -p 8080:8080 -v ${configNocoDBDockerPath}/data:/usr/app/data/ nocodb/nocodb:latest\n\n        showHeaderGreen \"NocoDB install success !  http://your_ip:8080/dashboard\"\n    fi\n\n}\nfunction removeNocoDB(){\n    echo\n    read -r -p \"是否确认卸载NocoDB? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveNocoDBInput\n    isRemoveNocoDBInput=${isRemoveNocoDBInput:-Y}\n\n    if [[ \"${isRemoveNocoDBInput}\" == [Yy] ]]; then\n\n        echo\n        if [[ -d \"${configNocoDBDockerPath}\" ]]; then\n\n            showHeaderGreen \"准备卸载已安装的 NocoDB\"\n\n            dockerIDNocoDB=$(docker ps -a -q --filter ancestor=nocodb/nocodb --format=\"{{.ID}}\")\n            if [[ -n \"${dockerIDNocoDB}\" ]]; then\n                ${sudoCmd} docker stop \"${dockerIDNocoDB}\"\n                ${sudoCmd} docker rm \"${dockerIDNocoDB}\"\n            fi\n\n            rm -rf \"${configNocoDBProjectPath}\"\n            rm -f \"${nginxConfigSiteConfPath}/nocodb_site.conf\"\n\n            systemctl restart nginx.service\n            showHeaderGreen \"已成功卸载 NocoDB Docker 版本 !\"\n\n        else\n            showHeaderRed \"系统没有安装 NocoDB, 退出卸载\"\n        fi\n\n    fi\n    removeNginx\n}\n\n\n\nconfigGristProjectPath=\"${HOME}/grist\"\nconfigGristDockerPath=\"${HOME}/grist/docker\"\nconfigGristSecretKey=\"$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -c 12)\"\n\n# Online Spreadsheet\nfunction installGrist(){\n\n    if [[ -d \"${configGristDockerPath}\" ]]; then\n        showHeaderRed \" Grist already installed !\"\n        exit\n    fi\n    showHeaderGreen \"开始 使用Docker方式 安装 Grist \"\n\n    ${sudoCmd} mkdir -p ${configGristDockerPath}/persist\n    cd \"${configGristDockerPath}\" || exit\n\n    docker pull gristlabs/grist\n\n    echo\n    green \" GRIST_SESSION_SECRET:  ${configGristSecretKey}\"\n    echo\n\n    read -r -p \"请输入邮箱:\" configGristEmailInput\n    configGristEmailInput=${configGristEmailInput:-you@example.com}\n    echo\n\n    read -r -p \"请输入Team名称:\" configGristTeamInput\n    configGristTeamInput=${configGristTeamInput:-singleteam}\n    echo\n\n\n    green \" ================================================== \"\n    echo\n    green \"是否安装 Nginx web服务器, 安装Nginx可以提高安全性并提供更多功能\"\n    green \"如要安装 Nginx 需要提供域名, 并设置好域名DNS已解析到本机IP\"\n    echo\n    read -r -p \"是否安装 Nginx web服务器? 直接回车默认安装, 请输入[Y/n]:\" isNginxInstallInput\n    isNginxInstallInput=${isNginxInstallInput:-Y}\n\n    echo\n    echo \"docker run -d -p 8484:8484 -v ${configGristDockerPath}/persist:/persist -e GRIST_SANDBOX_FLAVOR=gvisor -e GRIST_SINGLE_ORG=${configGristTeamInput} -e GRIST_SESSION_SECRET=${configGristSecretKey} --env GRIST_DEFAULT_EMAIL=${configGristEmailInput} gristlabs/grist\"\n    echo\n\n    if [[ \"${isNginxInstallInput}\" == [Yy] ]]; then\n        isInstallNginx=\"true\"\n        configSSLCertPath=\"${configSSLCertPath}/grist\"\n        getHTTPSCertificateStep1\n        configInstallNginxMode=\"grist\"\n        installWebServerNginx\n\n        docker run -d --name grist -p 8484:8484 -v ${configGristDockerPath}/persist:/persist -e GRIST_SANDBOX_FLAVOR=gvisor -e GRIST_SINGLE_ORG=${configGristTeamInput} \\\n        -e GRIST_SESSION_SECRET=${configGristSecretKey} --env GRIST_DEFAULT_EMAIL=${configGristEmailInput} -e APP_HOME_URL=\"https://${configSSLDomain}\"  gristlabs/grist\n\n        ${sudoCmd} systemctl restart nginx.service\n        showHeaderGreen \"Grist install success !  https://${configSSLDomain}\"\n    else\n        docker run -d --name grist -p 8484:8484 -v ${configGristDockerPath}/persist:/persist -e GRIST_SANDBOX_FLAVOR=gvisor -e GRIST_SINGLE_ORG=${configGristTeamInput} \\\n        -e GRIST_SESSION_SECRET=${configGristSecretKey} --env GRIST_DEFAULT_EMAIL=${configGristEmailInput} gristlabs/grist\n\n        showHeaderGreen \"Grist install success !  http://your_ip:8484\"\n    fi\n\n}\nfunction removeGrist(){\n    echo\n    read -r -p \"是否确认卸载Grist? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveGristInput\n    isRemoveGristInput=${isRemoveGristInput:-Y}\n\n    if [[ \"${isRemoveGristInput}\" == [Yy] ]]; then\n\n        echo\n        if [[ -d \"${configGristDockerPath}\" ]]; then\n\n            showHeaderGreen \"准备卸载已安装的 Grist\"\n\n            dockerIDGrist=$(docker ps -a -q --filter ancestor=gristlabs/grist --format=\"{{.ID}}\")\n            if [[ -n \"${dockerIDGrist}\" ]]; then\n                ${sudoCmd} docker stop \"${dockerIDGrist}\"\n                ${sudoCmd} docker rm \"${dockerIDGrist}\"\n            fi\n\n\n            rm -rf \"${configGristProjectPath}\"\n            rm -f \"${nginxConfigSiteConfPath}/grist_site.conf\"\n\n            systemctl restart nginx.service\n            showHeaderGreen \"已成功卸载 Grist Docker 版本 !\"\n        else\n            showHeaderRed \"系统没有安装 Grist, 退出卸载\"\n        fi\n    fi\n\n    removeNginx\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconfigJoplinProjectPath=\"${HOME}/joplin\"\nconfigJoplinDockerPath=\"${HOME}/joplin/docker\"\nconfigJoplinDockerComposeFilePath=\"${HOME}/joplin/docker/docker-compose.yml\"\nconfigJoplinDockerPostgresPath=\"${HOME}/joplin/docker/data\"\nconfigJoplinDockerFileStoragePath=\"${HOME}/joplin/docker/data/storage\"\n\nconfigJoplin_PostgreSQLDATABASE=\"joplindb\"\nconfigJoplin_PostgreSQLUSER=\"postgreuser1\"\nconfigJoplin_PostgreSQLPASSWORD=\"postgreuser1pw\"\nconfigJoplin_PostgreSQLPORT=\"5432\"\nconfigJoplin_PORT=\"22300\"\nconfigJoplin_APP_BASE_URL=\"https://joplin.example.com/\"\n\nfunction installJoplin(){\n    # https://www.vultr.com/docs/how-to-host-a-joplin-server-with-docker-on-ubuntu/\n\n    if [[ -d \"${configJoplinDockerPath}\" ]]; then\n        showHeaderRed \" Joplin already installed !\"\n        exit\n    fi\n    showHeaderGreen \"Start to install Joplin with docker\"\n\n    ${sudoCmd} mkdir -p \"${configJoplinDockerPostgresPath}\"\n    ${sudoCmd} mkdir -p \"${configJoplinDockerFileStoragePath}\"\n    ${sudoCmd} chmod -R 777 ${configJoplinDockerFileStoragePath}\n\n    cd \"${configJoplinDockerPath}\" || exit\n\n    read -r -p \"请输入PostgreSQL 数据库名 (直接回车默认为joplindb):\" configJoplin_PostgreSQLDATABASE\n    configJoplin_PostgreSQLDATABASE=${configJoplin_PostgreSQLDATABASE:-joplindb}\n    echo\n    read -r -p \"请输入PostgreSQL USER (直接回车默认为postgreuser1):\" configJoplin_PostgreSQLUSER\n    configJoplin_PostgreSQLUSER=${configJoplin_PostgreSQLUSER:-postgreuser1}\n    echo\n    read -r -p \"请输入PostgreSQL PASSWORD (直接回车默认为postgreuser1pw):\" configJoplin_PostgreSQLPASSWORD\n    configJoplin_PostgreSQLPASSWORD=${configJoplin_PostgreSQLPASSWORD:-postgreuser1pw}\n    echo\n    read -r -p \"请输入PostgreSQL PORT (直接回车默认为5432):\" configJoplin_PostgreSQLPORT\n    configJoplin_PostgreSQLPORT=${configJoplin_PostgreSQLPORT:-5432}\n    echo\n    read -r -p \"请输入Joplin Server PORT (直接回车默认为22300):\" configJoplin_PORT\n    configJoplin_PORT=${configJoplin_PORT:-22300}\n    echo\n\n\n\n    green \" ================================================== \"\n    echo\n    green \"是否安装 Nginx web服务器, 安装Nginx可以提高安全性并提供更多功能\"\n    green \"如要安装 Nginx 需要提供域名, 并设置好域名DNS已解析到本机IP\"\n    echo\n    read -r -p \"是否安装 Nginx web服务器? 直接回车默认安装, 请输入[Y/n]:\" isNginxInstallInput\n    isNginxInstallInput=${isNginxInstallInput:-Y}\n\n    echo\n    red \"如果选择安装 Nginx, 请输入你的域名 例如 joplin.xxx.com (不要带有 https:// 或者 http://)\"\n    red \"如果选择不安装 Nginx, 请输入你的IP 例如 192.168.1.1 (不要带有 https:// 或者 http://)\"\n    echo\n    read -r -p \"请输入域名或IP (直接回车默认为 joplin.xxx.com):\" configJoplin_APP_BASE_URL\n    configJoplin_APP_BASE_URL=${configJoplin_APP_BASE_URL:-joplin.xxx.com}\n    echo\n\n    if [[ \"${isNginxInstallInput}\" == [Yy] ]]; then\n        configJoplin_APP_BASE_URL=\"https://${configJoplin_APP_BASE_URL}\"\n    else\n        configJoplin_APP_BASE_URL=\"http://${configJoplin_APP_BASE_URL}:${configJoplin_PORT}\"\n    fi\n\n\n    docker pull joplin/server\n    docker pull postgres:15\n\n    cat > \"${configJoplinDockerComposeFilePath}\" <<-EOF\n\nversion: '3'\n\nservices:\n    joplin_db:\n        image: postgres:15\n        container_name: joplin_postgres\n        volumes:\n            - ${configJoplinDockerPostgresPath}/postgres_data:/var/lib/postgresql/data\n        ports:\n            - \"${configJoplin_PostgreSQLPORT}:5432\"\n        restart: unless-stopped\n        environment:\n            - POSTGRES_PASSWORD=${configOutline_PostgreSQLPASSWORD}\n            - POSTGRES_USER=${configOutline_PostgreSQLUSER}\n            - POSTGRES_DB=${configOutline_PostgreSQLDATABASE}\n    joplin:\n        image: joplin/server:latest\n        container_name: joplin_app1\n        volumes:\n            - ${configJoplinDockerFileStoragePath}:/mnt/files\n        depends_on:\n            - joplin_db\n        ports:\n            - \"${configJoplin_PORT}:22300\"\n        restart: unless-stopped\n        environment:\n            - APP_PORT=22300\n            - APP_BASE_URL=${configJoplin_APP_BASE_URL}\n            - DB_CLIENT=pg\n            - POSTGRES_PASSWORD=${configJoplin_PostgreSQLPASSWORD}\n            - POSTGRES_DATABASE=${configJoplin_PostgreSQLDATABASE}\n            - POSTGRES_USER=${configJoplin_PostgreSQLUSER}\n            - POSTGRES_PORT=5432\n            - POSTGRES_HOST=joplin_db\n            - STORAGE_DRIVER=Type=Filesystem; Path=/mnt/files\n            - STORAGE_DRIVER_FALLBACK=Type=Database; Mode=ReadAndWrite\n\nEOF\n\n    docker-compose up -d\n\n\n    if [[ \"${isNginxInstallInput}\" == [Yy] ]]; then\n        isInstallNginx=\"true\"\n        configSSLCertPath=\"${configSSLCertPath}/joplin\"\n        getHTTPSCertificateStep1\n        configInstallNginxMode=\"joplin\"\n        installWebServerNginx\n\n        ${sudoCmd} systemctl restart nginx.service\n\n        showHeaderGreen \"Joplin Server install success !  https://${configSSLDomain}\" \\\n        \"POSTGRES_USER: ${configJoplin_PostgreSQLUSER}, POSTGRES_PASSWORD: ${configJoplin_PostgreSQLPASSWORD}\" \\\n        \"Joplin Admin_USER: admin@localhost, Joplin_Admin_PASSWORD: admin\" \\\n        \"Joplin Data Path : ${configJoplinDockerPath}\" \\\n        \"Joplin Logs: docker-compose logs -f -t \"\n    else\n\n        showHeaderGreen \"Joplin Server install success !  ${configJoplin_APP_BASE_URL}\" \\\n        \"POSTGRES_USER: ${configJoplin_PostgreSQLUSER}, POSTGRES_PASSWORD: ${configJoplin_PostgreSQLPASSWORD}\" \\\n        \"Joplin Admin_USER: admin@localhost, Joplin_Admin_PASSWORD: admin\" \\\n        \"Joplin Data Path : ${configJoplinDockerPath}\" \\\n        \"Joplin Logs: docker-compose logs -f -t \"\n    fi\n\n}\n\n\nfunction removeJoplin(){\n    echo\n\n    read -r -p \"是否确认卸载Joplin? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveJoplinInput\n    isRemoveJoplinInput=${isRemoveJoplinInput:-Y}\n\n\n    if [[ \"${isRemoveJoplinInput}\" == [Yy] ]]; then\n\n        echo\n        if [[ -d \"${configJoplinDockerPath}\" ]]; then\n\n            showHeaderGreen \"准备卸载已安装的 Joplin Server\"\n\n            cd ${configJoplinDockerPath} || exit\n            docker-compose down\n\n            rm -rf \"${configJoplinDockerPath}\"\n            rm -f \"${nginxConfigSiteConfPath}/joplin_site.conf\"\n\n            systemctl restart nginx.service\n            showHeaderGreen \"已成功卸载 Joplin Server 版本 !\"\n\n        else\n            showHeaderRed \"系统没有安装 Joplin Server, 退出卸载\"\n        fi\n\n    fi\n    removeNginx\n}\n\n\n\nconfigLinkwardenDockerPath=\"${HOME}/linkwarden/docker\"\nconfigLinkwardenDockerPostgresPath=\"${HOME}/linkwarden/docker/postgres_data\"\nconfigLinkwardenDockerFileStoragePath=\"${HOME}/linkwarden/docker/data\"\nconfigLinkwarden_PORT=4000\n\nfunction installLinkwarden(){\n    # https://docs.linkwarden.app/self-hosting/installation\n    if [[ -d \"${configLinkwardenDockerPath}\" ]]; then\n        showHeaderRed \" Linkwarden already installed !\"\n        exit\n    fi\n    showHeaderGreen \"Start to install Linkwarden with docker\"\n    ${sudoCmd} mkdir -p \"${configLinkwardenDockerPath}\"\n    ${sudoCmd} mkdir -p \"${configLinkwardenDockerPostgresPath}\"\n    ${sudoCmd} mkdir -p \"${configLinkwardenDockerFileStoragePath}\"\n\n    cd \"${configLinkwardenDockerPath}\" || exit\n\n    read -r -p \"请输入 Linkwarden domain name (直接回车默认为localhost):\" configLinkwarden_Domain\n    configLinkwarden_Domain=${configLinkwarden_Domain:-localhost}\n    echo\n    read -r -p \"请输入 Linkwarden Server PORT (直接回车默认为4000):\" configLinkwarden_PORT\n    configLinkwarden_PORT=${configLinkwarden_PORT:-4000}\n    echo\n    read -r -p \"请输入PostgreSQL PASSWORD (直接回车默认为postgreuser2pw):\" configLinkwarden_PostgreSQLPASSWORD\n    configLinkwarden_PostgreSQLPASSWORD=${configLinkwarden_PostgreSQLPASSWORD:-postgreuser2pw}\n    echo\n\n    NEXTAUTH_SECRET=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n\n    cat > \"${configLinkwardenDockerPath}/.env\" <<-EOF\nNEXTAUTH_SECRET=$NEXTAUTH_SECRET\nNEXTAUTH_URL=http://$configLinkwarden_Domain:$configLinkwarden_PORT\nPOSTGRES_PASSWORD=$configLinkwarden_PostgreSQLPASSWORD\n\nEOF\n\n    cat > \"${configLinkwardenDockerPath}/docker-compose.yml\" <<-EOF\nversion: \"3.5\"\nservices:\n  linkwarden_postgres:\n    image: postgres:16-alpine\n    env_file: .env\n    restart: always\n    volumes:\n      - ${configLinkwardenDockerPostgresPath}:/var/lib/postgresql/data\n  linkwarden:\n    env_file: ${configLinkwardenDockerPath}/.env\n    environment:\n      - DATABASE_URL=postgresql://postgres:${configLinkwarden_PostgreSQLPASSWORD}@linkwarden_postgres:5432/postgres\n    restart: always\n    image: ghcr.io/linkwarden/linkwarden:latest\n    ports:\n      - ${configLinkwarden_PORT}:3000\n    volumes:\n      - ${configLinkwardenDockerFileStoragePath}:/data/data\n    depends_on:\n      - linkwarden_postgres\nEOF\n\n    docker compose up -d\n\n\n    showHeaderGreen \"Linkwarden Server install success !  ${configLinkwarden_Domain}\" \\\n    \"POSTGRES_USER: postgres, POSTGRES_PASSWORD: ${configLinkwarden_PostgreSQLPASSWORD}\" \\\n    \"Linkwarden Data Path : ${configJoplinDockerPath}\" \\\n    \"Linkwarden Logs: docker-compose logs -f -t \"\n}\n\nfunction removeLinkwarden(){\n    echo\n    read -r -p \"是否确认卸载 Linkwarden? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveLinkwardenInput\n    isRemoveLinkwardenInput=${isRemoveLinkwardenInput:-Y}\n\n    if [[ \"${isRemoveLinkwardenInput}\" == [Yy] ]]; then\n        echo\n        if [[ -d \"${configLinkwardenDockerPath}\" ]]; then\n\n            showHeaderGreen \"准备卸载已安装的 Linkwarden Server\"\n\n            cd ${configLinkwardenDockerPath} || exit\n            docker-compose down\n\n            rm -rf \"${configLinkwardenDockerPath}\"\n            rm -f \"${nginxConfigSiteConfPath}/linkwarden_site.conf\"\n\n            systemctl restart nginx.service\n            showHeaderGreen \"已成功卸载 Linkwarden Server 版本 !\"\n        else\n            showHeaderRed \"系统没有安装 Linkwarden Server, 退出卸载\"\n        fi\n    fi\n}\n\n\n\n\n\n\n\nconfigAffineDockerPath=\"${HOME}/affine/docker\"\nconfigAffineDockerFileStoragePath=\"${HOME}/affine/docker/data\"\n\nconfigAffine_PORT=\"3300\"\nconfigAffine_APP_BASE_URL=\"https://affine.example.com/\"\n\nfunction installAffine(){\n    # https://affine.pro/blog/a-new-docker-image-with-the-server-side-is-coming\n\n    if [[ -d \"${configAffineDockerPath}\" ]]; then\n        showHeaderRed \" AFFiNE already installed !\"\n        exit\n    fi\n    showHeaderGreen \"Start to install AFFiNE with docker\"\n\n    ${sudoCmd} mkdir -p \"${configAffineDockerFileStoragePath}\"\n\n    cd \"${configAffineDockerPath}\" || exit\n\n\n    echo\n    read -r -p \"请输入 AFFiNE Server PORT (直接回车默认为3300):\" configAffine_PORT\n    configAffine_PORT=${configAffine_PORT:-3300}\n    echo\n\n\n    green \" ================================================== \"\n    echo\n    green \"是否安装 Nginx web服务器, 安装Nginx可以提高安全性并提供更多功能\"\n    green \"如要安装 Nginx 需要提供域名, 并设置好域名DNS已解析到本机IP\"\n    echo\n    read -r -p \"是否安装 Nginx web服务器? 直接回车默认安装, 请输入[Y/n]:\" isNginxInstallInput\n    isNginxInstallInput=${isNginxInstallInput:-Y}\n\n    echo\n    red \"如果选择安装 Nginx, 请输入你的域名 例如 affine.xxx.com (不要带有 https:// 或者 http://)\"\n    red \"如果选择不安装 Nginx, 请输入你的IP 例如 192.168.1.1 (不要带有 https:// 或者 http://)\"\n    echo\n\n    if [[ \"${isNginxInstallInput}\" == [Yy] ]]; then\n        read -r -p \"请输入域名 (直接回车默认为 affine.xxx.com):\" configAffine_APP_Domain\n        configAffine_APP_Domain=${configAffine_APP_Domain:-affine.xxx.com}\n\n        configAffine_APP_BASE_URL=\"https://${configAffine_APP_Domain}\"\n    else\n        getVPSIP\n\n        configAffine_APP_BASE_URL=\"http://${configLocalVPSIp}:${configAffine_PORT}\"\n    fi\n\n\n    docker pull ghcr.io/toeverything/affine-self-hosted:latest\n\n\n    cat > \"${configAffineDockerPath}/docker-compose.yml\" <<-EOF\n\nversion: '3'\n\nservices:\n    affine:\n        image: ghcr.io/toeverything/affine-self-hosted:latest\n        container_name: affine_app1\n        ports:\n            - \"${configAffine_PORT}:3000\"\n        volumes:\n            - ${configAffineDockerFileStoragePath}:/app/data\n        restart: unless-stopped\n\nEOF\n\n    docker-compose up -d\n\n\n    if [[ \"${isNginxInstallInput}\" == [Yy] ]]; then\n        isInstallNginx=\"true\"\n        configSSLCertPath=\"${configSSLCertPath}/affine\"\n        getHTTPSCertificateStep1\n        configInstallNginxMode=\"affine\"\n        installWebServerNginx\n\n        ${sudoCmd} systemctl restart nginx.service\n\n    fi\n        showHeaderGreen \"AFFiNE Server install success !  ${configAffine_APP_BASE_URL}\" \\\n        \"AFFiNE_Admin_USER: admin@localhost, AFFiNE_Admin_PASSWORD: admin\" \\\n        \"AFFiNE_Data Path : ${configAffineDockerPath}\" \\\n        \"AFFiNE Logs: docker-compose logs -f -t \"\n}\n\n\nfunction removeAffine(){\n    echo\n    read -r -p \"是否确认卸载AFFiNE? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveAffineInput\n    isRemoveAffineInput=${isRemoveAffineInput:-Y}\n\n    if [[ \"${isRemoveAffineInput}\" == [Yy] ]]; then\n\n        echo\n        if [[ -d \"${configAffineDockerPath}\" ]]; then\n\n            showHeaderGreen \"准备卸载已安装的 AFFiNE Server\"\n\n            cd ${configAffineDockerPath} || exit\n            docker-compose down\n\n            rm -rf \"${configAffineDockerPath}\"\n            rm -f \"${nginxConfigSiteConfPath}/affine_site.conf\"\n\n            if [[ -f \"\"${nginxConfigSiteConfPath}/affine_site.conf\"\" ]]; then\n                rm -f \"${nginxConfigSiteConfPath}/affine_site.conf\"\n                systemctl restart nginx.service\n            fi\n\n            showHeaderGreen \"已成功卸载 AFFiNE Server 版本 !\"\n\n        else\n            showHeaderRed \"系统没有安装 AFFiNE Server, 退出卸载\"\n        fi\n\n    fi\n    removeNginx\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconfigOutlineDockerPath=\"${HOME}/outline/docker\"\nconfigOutlineDockerComposeFilePath=\"${HOME}/outline/docker/docker-compose.yml\"\nconfigOutlineDockerPostgresPath=\"${HOME}/outline/docker/postgres\"\nconfigOutlineDockerRedisPath=\"${HOME}/outline/docker/redis\"\nconfigOutlineDockerFileStoragePath=\"${HOME}/outline/docker/minio/storage_data\"\nconfigOutlineDockerHttpsPortalPath=\"${HOME}/outline/docker/https_portal\"\n\nconfigOutline_PORT=\"3000\"\nconfigOutline_PostgreSQLDATABASE=\"outlinedb\"\nconfigOutline_PostgreSQLUSER=\"postgreuseradmin\"\nconfigOutline_PostgreSQLPASSWORD=\"postgreuseradminpw\"\nconfigOutline_PostgreSQLPORT=\"5432\"\nconfigOutline_MinioAdminUSER=\"minioadmin\"\nconfigOutline_MinioAdminPASSWORD=\"minioadminpw\"\nconfigOutline_APP_BASE_URL=\"https://outline.example.com/\"\nconfigOutline_BUCKET_NAME=\"wiki\"\n\nfunction installOutline(){\n    # https://docs.getoutline.com/s/hosting/doc/docker-7pfeLP5a8t\n\n    if [[ -d \"${configOutlineDockerPath}\" ]]; then\n        showHeaderRed \" Outline already installed !\"\n        exit\n    fi\n    showHeaderGreen \"开始 使用Docker方式 安装 Outline \"\n\n    ${sudoCmd} mkdir -p \"${configOutlineDockerPostgresPath}\"\n    ${sudoCmd} mkdir -p \"${configOutlineDockerRedisPath}\"\n    ${sudoCmd} mkdir -p \"${configOutlineDockerFileStoragePath}\"\n    ${sudoCmd} mkdir -p \"${configOutlineDockerHttpsPortalPath}\"\n\n    cd \"${configOutlineDockerPath}\" || exit\n\n    # wget https://raw.githubusercontent.com/outline/outline/main/.env.sample -O \"${configOutlineDockerPath}/.env\"\n\n\n    read -r -p \"请输入PostgreSQL 数据库名 (直接回车默认为outlinedb):\" configOutline_PostgreSQLDATABASE\n    configOutline_PostgreSQLDATABASE=${configOutline_PostgreSQLDATABASE:-outlinedb}\n    echo\n    read -r -p \"请输入PostgreSQL USER (直接回车默认为postgreuseradmin):\" configOutline_PostgreSQLUSER\n    configOutline_PostgreSQLUSER=${configOutline_PostgreSQLUSER:-postgreuseradmin}\n    echo\n    read -r -p \"请输入PostgreSQL PASSWORD (直接回车默认为postgreuseradminpw):\" configOutline_PostgreSQLPASSWORD\n    configOutline_PostgreSQLPASSWORD=${configOutline_PostgreSQLPASSWORD:-postgreuseradminpw}\n    echo\n    read -r -p \"请输入PostgreSQL PORT (直接回车默认为5432):\" configOutline_PostgreSQLPORT\n    configOutline_PostgreSQLPORT=${configOutline_PostgreSQLPORT:-5432}\n    echo\n\n    read -r -p \"请输入Minio Admin USER (直接回车默认为minioadmin):\" configOutline_MinioAdminUSER\n    configOutline_MinioAdminUSER=${configOutline_MinioAdminUSER:-minioadmin}\n    echo\n    read -r -p \"请输入Minio Admin PASSWORD (直接回车默认为minioadminpw):\" configOutline_MinioAdminPASSWORD\n    configOutline_MinioAdminPASSWORD=${configOutline_MinioAdminPASSWORD:-minioadminpw}\n    echo\n\n    read -r -p \"请输入Outline Server PORT (直接回车默认为3000):\" configOutline_PORT\n    configOutline_PORT=${configOutline_PORT:-3000}\n    echo\n\n\n\n    green \" ================================================== \"\n    echo\n    green \"请输入域名 不要带有 https:// 或者 http://\"\n    echo\n    read -r -p \"请输入域名 (直接回车默认为 outline.xxx.com):\" configOutline_APP_BASE_URL\n    configOutline_APP_BASE_URL=${configOutline_APP_BASE_URL:-outline.xxx.com}\n    echo\n\n\n    tempStringHex32=$(openssl rand -hex 32)\n    tempString2Hex32=$(openssl rand -hex 32)\n\n    cat > \"${configOutlineDockerPath}/docker.env\" <<-EOF\n# –––––––––––––––– REQUIRED ––––––––––––––––\n\nNODE_ENV=production\n\nSECRET_KEY=${tempStringHex32}\nUTILS_SECRET=${tempString2Hex32}\n\nDATABASE_URL=postgres://${configOutline_PostgreSQLUSER}:${configOutline_PostgreSQLPASSWORD}@outline_postgres:5432/${configOutline_PostgreSQLDATABASE}\nDATABASE_URL_TEST=postgres://${configOutline_PostgreSQLUSER}:${configOutline_PostgreSQLPASSWORD}@outline_postgres:5432/outline-test\nDATABASE_CONNECTION_POOL_MIN=\nDATABASE_CONNECTION_POOL_MAX=\n# Uncomment this to disable SSL for connecting to Postgres\n# PGSSLMODE=disable\n\n\nREDIS_URL=redis://outline_redis:6379\n\nURL=http://${configOutline_APP_BASE_URL}:3000\nPORT=3000\n\n# See [documentation](docs/SERVICES.md) on running a separate collaboration\n# server, for normal operation this does not need to be set.\nCOLLABORATION_URL=\n\n# To support uploading of images for avatars and document attachments an\n# s3-compatible storage must be provided. AWS S3 is recommended for redundancy\n# however if you want to keep all file storage local an alternative such as\n# minio (https://github.com/minio/minio) can be used.\nAWS_ACCESS_KEY_ID=${configOutline_MinioAdminUSER}\nAWS_SECRET_ACCESS_KEY=${configOutline_MinioAdminPASSWORD}\nAWS_REGION=us-east-1\nAWS_S3_ACCELERATE_URL=\nAWS_S3_UPLOAD_BUCKET_URL=http://127.0.0.1:9000\nAWS_S3_UPLOAD_BUCKET_NAME=${configOutline_BUCKET_NAME}\nAWS_S3_UPLOAD_MAX_SIZE=26214400\nAWS_S3_FORCE_PATH_STYLE=true\nAWS_S3_ACL=private\n\n\n# –––––––––––––––– OPTIONAL ––––––––––––––––\n\n\n# If using a Cloudfront/Cloudflare distribution or similar it can be set below.\n# This will cause paths to javascript, stylesheets, and images to be updated to\n# the hostname defined in CDN_URL. In your CDN configuration the origin server\n# should be set to the same as URL.\nCDN_URL=\n\n# Auto-redirect to https in production. The default is true but you may set to\n# false if you can be sure that SSL is terminated at an external loadbalancer.\nFORCE_HTTPS=false\n\n# Have the installation check for updates by sending anonymized statistics to\n# the maintainers\nENABLE_UPDATES=true\n\n# How many processes should be spawned. As a reasonable rule divide your servers\n# available memory by 512 for a rough estimate\nWEB_CONCURRENCY=2\n\n# Override the maximum size of document imports, could be required if you have\n# especially large Word documents with embedded imagery\nMAXIMUM_IMPORT_SIZE=5120000\n\n# You can remove this line if your reverse proxy already logs incoming http\n# requests and this ends up being duplicative\nDEBUG=http\n\n# Configure lowest severity level for server logs. Should be one of\n# error, warn, info, http, verbose, debug and silly\nLOG_LEVEL=info\n\n\n# Optionally enable google analytics to track pageviews in the knowledge base\nGOOGLE_ANALYTICS_ID=\n\n# Optionally enable Sentry (sentry.io) to track errors and performance,\n# and optionally add a Sentry proxy tunnel for bypassing ad blockers in the UI:\n# https://docs.sentry.io/platforms/javascript/troubleshooting/#using-the-tunnel-option)\nSENTRY_DSN=\nSENTRY_TUNNEL=\n\n# To support sending outgoing transactional emails such as \"document updated\" or\n# \"you've been invited\" you'll need to provide authentication for an SMTP server\nSMTP_HOST=\nSMTP_PORT=\nSMTP_USERNAME=\nSMTP_PASSWORD=\nSMTP_FROM_EMAIL=\nSMTP_REPLY_EMAIL=\nSMTP_TLS_CIPHERS=\nSMTP_SECURE=true\nSMTP_NAME=\n\n# The default interface language. See translate.getoutline.com for a list of\n# available language codes and their rough percentage translated.\nDEFAULT_LANGUAGE=en_US\n\n# Optionally enable rate limiter at application web server\nRATE_LIMITER_ENABLED=true\n\n# Configure default throttling parameters for rate limiter\nRATE_LIMITER_REQUESTS=1000\nRATE_LIMITER_DURATION_WINDOW=60\n\n\nEOF\n\n\n\n    cat > \"${configOutlineDockerComposeFilePath}\" <<-EOF\n\nversion: \"3.2\"\nservices:\n\n  outline:\n    image: docker.getoutline.com/outlinewiki/outline:latest\n    container_name: outline_app1\n    # env_file: ${configOutlineDockerPath}/docker.env\n    ports:\n      - \"${configOutline_PORT}:3000\"\n    depends_on:\n      - outline_postgres\n      - outline_redis\n      - outline_storage\n    environment:\n      - PGSSLMODE=disable\n      - SECRET_KEY=${tempStringHex32}\n      - UTILS_SECRET=${tempString2Hex32}\n      - REDIS_URL=redis://outline_redis:6379\n      - DATABASE_URL=postgres://${configOutline_PostgreSQLUSER}:${configOutline_PostgreSQLPASSWORD}@outline_postgres:5432/${configOutline_PostgreSQLDATABASE}\n      - URL=http://${configOutline_APP_BASE_URL}:3000\n      - AWS_ACCESS_KEY_ID=${configOutline_MinioAdminUSER}\n      - AWS_SECRET_ACCESS_KEY=${configOutline_MinioAdminPASSWORD}\n      - AWS_REGION=us-east-1\n      - AWS_S3_UPLOAD_BUCKET_URL=http://127.0.0.1:9000\n      - AWS_S3_UPLOAD_BUCKET_NAME=${configOutline_BUCKET_NAME}\n      - AWS_S3_FORCE_PATH_STYLE=true\n      - AWS_S3_ACL=private\n      - FORCE_HTTPS=false\n\n  outline_redis:\n    image: redis:latest\n    container_name: outline_redis\n    ports:\n      - \"6379:6379\"\n    restart: always\n    volumes:\n      - ${configOutlineDockerRedisPath}/redis_data/:/data\n    command: [\"redis-server\" ]\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 10s\n      timeout: 30s\n      retries: 3\n\n  outline_postgres:\n    image: postgres:15\n    container_name: outline_postgresdb\n    ports:\n      - \"${configOutline_PostgreSQLPORT}:5432\"\n    volumes:\n      -  ${configOutlineDockerPostgresPath}/postgres_data:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-d\", \"${configOutline_PostgreSQLDATABASE}\", \"-U\", \"${configOutline_PostgreSQLUSER}\"]\n      interval: 30s\n      timeout: 20s\n      retries: 3\n    environment:\n      POSTGRES_USER: '${configOutline_PostgreSQLUSER}'\n      POSTGRES_PASSWORD: '${configOutline_PostgreSQLPASSWORD}'\n      POSTGRES_DB: '${configOutline_PostgreSQLDATABASE}'\n\n  outline_storage:\n    image: minio/minio\n    container_name: outline_minio\n    ports:\n      - \"9000:9000\"\n      - \"9001:9001\"\n    entrypoint: sh\n    command: -c 'minio server /data --console-address \":9001\"'\n    deploy:\n      restart_policy:\n        condition: on-failure\n    volumes:\n      - ${configOutlineDockerFileStoragePath}:/data\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]\n      interval: 30s\n      timeout: 20s\n      retries: 3\n    environment:\n      MINIO_ROOT_USER: ${configOutline_MinioAdminUSER}\n      MINIO_ROOT_PASSWORD: ${configOutline_MinioAdminPASSWORD}\n\n  outline_createbuckets:\n    image: minio/mc\n    container_name: outline_createbucket\n    depends_on:\n      - outline_storage\n    entrypoint: >\n      /bin/sh -c \"\n      /usr/bin/mc config host rm local;\n      /usr/bin/mc config host add myminio http://outline_storage:9000 ${configOutline_MinioAdminUSER} ${configOutline_MinioAdminPASSWORD};\n      /usr/bin/mc mb myminio/${configOutline_BUCKET_NAME};\n      /usr/bin/mc policy set public myminio/${configOutline_BUCKET_NAME};\n      exit 0;\n      \"\n\n  outline_https-portal:\n    image: steveltn/https-portal\n    container_name: outline_https_portal\n    ports:\n      - '80:80'\n      - '443:443'\n    links:\n      - outline\n      - outline_storage\n    restart: always\n    volumes:\n      - ${configOutlineDockerHttpsPortalPath}:/var/lib/https-portal\n    healthcheck:\n      test: [\"CMD\", \"service\", \"nginx\", \"status\"]\n      interval: 30s\n      timeout: 20s\n      retries: 3\n    environment:\n      DOMAINS: '${configOutline_APP_BASE_URL} -> http://outline:3000'\n      STAGE: 'production'\n      WEBSOCKET: 'true'\n\n\nEOF\n\n    docker-compose up -d\n\n\n    if [[ \"${isNginxInstallInput}\" == [Yy] ]]; then\n        isInstallNginx=\"true\"\n        configSSLCertPath=\"${configSSLCertPath}/outline\"\n        # getHTTPSCertificateStep1\n        configInstallNginxMode=\"outline\"\n        # installWebServerNginx\n\n        # ${sudoCmd} systemctl restart nginx.service\n\n    fi\n\n        showHeaderGreen \"Outline Server install success !  https://${configOutline_APP_BASE_URL}\" \\\n        \"POSTGRES_USER: ${configOutline_PostgreSQLUSER}, POSTGRES_PASSWORD: ${configOutline_PostgreSQLPASSWORD}\" \\\n        \"Outline Do Not support email login, Pls manually set up authentication\" \\\n        \"Outline docker-compose config path : ${configOutlineDockerComposeFilePath}\" \\\n        \"Outline docker env path : ${configOutlineDockerPath}/docker.env \" \\\n        \"Outline Logs: docker-compose logs outline\"\n}\n\n\nfunction removeOutline(){\n    echo\n    read -r -p \"是否确认卸载Outline? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveOutlineInput\n    isRemoveOutlineInput=${isRemoveOutlineInput:-Y}\n\n    if [[ \"${isRemoveOutlineInput}\" == [Yy] ]]; then\n\n        echo\n        if [[ -d \"${configOutlineDockerPath}\" ]]; then\n\n            showHeaderGreen \"准备卸载已安装的 Outline Server\"\n\n            cd ${configOutlineDockerPath} || exit\n            docker-compose down\n\n            rm -rf \"${configOutlineDockerPath}\"\n            rm -f \"${nginxConfigSiteConfPath}/outline_site.conf\"\n\n            if [[ -f \"${nginxConfigSiteConfPath}/outline_site.conf\" ]]; then\n                rm -f \"${nginxConfigSiteConfPath}/outline_site.conf\"\n                systemctl restart nginx.service\n            fi\n\n\n            showHeaderGreen \"已成功卸载 Outline Server 版本 !\"\n\n        else\n            showHeaderRed \"系统没有安装 Outline Server, 退出卸载\"\n        fi\n\n    fi\n    removeNginx\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconfigFocalboardDockerPath=\"${HOME}/focalboard/docker\"\nconfigFocalboardDockerDataPath=\"${HOME}/focalboard/docker/data\"\nconfigFocalboardDockerPostgresPath=\"${HOME}/focalboard/docker/postgres\"\n\nconfigFocalboard_PORT=\"8001\"\nconfigFocalboard_APP_BASE_URL=\"https://focalboard.example.com/\"\nconfigFocalboard_PostgreSQLDATABASE=\"focalboarddb\"\nconfigFocalboard_PostgreSQLUSER=\"postgreuseradmin\"\nconfigFocalboard_PostgreSQLPASSWORD=\"postgreuseradminpw\"\nconfigFocalboard_PostgreSQLPORT=\"5432\"\n\nfunction installFocalboard(){\n    # https://www.focalboard.com/download/personal-edition/docker/\n\n    if [[ -d \"${configFocalboardDockerPath}\" ]]; then\n        showHeaderRed \" Focalboard Personal Server already installed !\"\n        exit\n    fi\n    showHeaderGreen \"Start to install Focalboard Personal Server with docker\"\n\n    ${sudoCmd} mkdir -p \"${configFocalboardDockerDataPath}\"\n\n    ${sudoCmd} chmod -R 777 \"${configFocalboardDockerDataPath}\"\n    cd \"${configFocalboardDockerPath}\" || exit\n\n\n    echo\n    read -r -p \"请输入 Focalboard Server PORT (直接回车默认为8001):\" configFocalboard_PORT\n    configFocalboard_PORT=${configFocalboard_PORT:-8001}\n\n\n    echo\n    read -r -p \"数据库是否使用sqlite, 否为使用postgresql? 直接回车默认使用sqlite, 请输入[Y/n]:\" isUseSqliteInput\n    isUseSqliteInput=${isUseSqliteInput:-Y}\n\n    configFocalboardDatabaseType=\"sqlite3\"\n    configFocalboardDatabaseLink=\"./data/focalboard.db\"\n\n    if [[ \"${isUseSqliteInput}\" == [Yy] ]]; then\n        configFocalboardDatabaseType=\"sqlite3\"\n        configFocalboardDatabaseLink=\"./data/focalboard.db\"\n\n    cat > \"${configFocalboardDockerPath}/docker-compose.yml\" <<-EOF\n\nversion: '3'\n\nservices:\n    focalboard:\n        image: mattermost/focalboard\n        container_name: focalboard_app1\n        ports:\n            - \"${configFocalboard_PORT}:8000\"\n        volumes:\n            - ${configFocalboardDockerDataPath}:/opt/focalboard/data\n            - ${configFocalboardDockerPath}/config.json:/opt/focalboard/config.json\n        restart: unless-stopped\n        environment:\n            - VIRTUAL_HOST=focalboard.local\n            - VIRTUAL_PORT=8000\n\nEOF\n\n\n    else\n        ${sudoCmd} mkdir -p \"${configFocalboardDockerPostgresPath}\"\n\n        read -r -p \"请输入PostgreSQL 数据库名 (直接回车默认为focalboarddb):\" configFocalboard_PostgreSQLDATABASE\n        configFocalboard_PostgreSQLDATABASE=${configFocalboard_PostgreSQLDATABASE:-focalboarddb}\n        echo\n        read -r -p \"请输入PostgreSQL USER (直接回车默认为postgreuseradmin):\" configFocalboard_PostgreSQLUSER\n        configFocalboard_PostgreSQLUSER=${configFocalboard_PostgreSQLUSER:-postgreuseradmin}\n        echo\n        read -r -p \"请输入PostgreSQL PASSWORD (直接回车默认为postgreuseradminpw):\" configFocalboard_PostgreSQLPASSWORD\n        configFocalboard_PostgreSQLPASSWORD=${configFocalboard_PostgreSQLPASSWORD:-postgreuseradminpw}\n        echo\n        read -r -p \"请输入PostgreSQL PORT (直接回车默认为5432):\" configFocalboard_PostgreSQLPORT\n        configFocalboard_PostgreSQLPORT=${configFocalboard_PostgreSQLPORT:-5432}\n        echo\n\n        # https://github.com/mattermost/focalboard/blob/main/docker/config.json\n        configFocalboardDatabaseType=\"postgres\"\n        configFocalboardDatabaseLink=\"postgres://${configFocalboard_PostgreSQLUSER}:${configFocalboard_PostgreSQLPASSWORD}@focalboard_db/${configFocalboard_PostgreSQLDATABASE}?sslmode=disable&connect_timeout=10\"\n\n    cat > \"${configFocalboardDockerPath}/docker-compose.yml\" <<-EOF\n\nversion: '3'\n\nservices:\n    focalboard:\n        image: mattermost/focalboard\n        container_name: focalboard_app1\n        depends_on:\n            - focalboard_db\n        ports:\n            - \"${configFocalboard_PORT}:8000\"\n        volumes:\n            - ${configFocalboardDockerDataPath}:/opt/focalboard/data\n            - ${configFocalboardDockerPath}/config.json:/opt/focalboard/config.json\n        restart: unless-stopped\n        environment:\n            - VIRTUAL_HOST=focalboard.local\n            - VIRTUAL_PORT=8000\n\n    focalboard_db:\n        image: postgres:latest\n        container_name: focalboard_postgresdb\n        ports:\n            - \"${configFocalboard_PostgreSQLPORT}:5432\"\n        restart: always\n        volumes:\n            -  ${configFocalboardDockerPostgresPath}/postgres_data:/var/lib/postgresql/data\n        environment:\n            POSTGRES_DB: '${configFocalboard_PostgreSQLDATABASE}'\n            POSTGRES_USER: '${configFocalboard_PostgreSQLUSER}'\n            POSTGRES_PASSWORD: '${configFocalboard_PostgreSQLPASSWORD}'\n\nEOF\n\n    fi\n\n    # https://www.focalboard.com/guide/admin/\n    cat > \"${configFocalboardDockerPath}/config.json\" <<-EOF\n{\n    \"serverRoot\": \"http://localhost:8000\",\n    \"port\": 8000,\n    \"dbtype\": \"${configFocalboardDatabaseType}\",\n    \"dbconfig\": \"${configFocalboardDatabaseLink}\",\n    \"postgres_dbconfig\": \"dbname=boards sslmode=disable\",\n    \"useSSL\": false,\n    \"webpath\": \"./pack\",\n    \"filespath\": \"./data/files\",\n    \"telemetry\": true,\n    \"session_expire_time\": 2592000,\n    \"session_refresh_time\": 18000,\n    \"localOnly\": false,\n    \"enableLocalMode\": true,\n    \"localModeSocketLocation\": \"/var/tmp/focalboard_local.socket\",\n    \"enablePublicSharedBoards\": false\n}\n\nEOF\n\n    # https://github.com/mattermost/focalboard/blob/main/docker/server_config.json\n    cat > \"${configFocalboardDockerPath}/default_config_sqlite.json\" <<-EOF\n{\n  \"serverRoot\": \"http://localhost:8000\",\n  \"port\": 8000,\n  \"dbtype\": \"sqlite3\",\n  \"dbconfig\": \"./data/focalboard.db\",\n  \"postgres_dbconfig\": \"dbname=focalboard sslmode=disable\",\n  \"useSSL\": false,\n  \"webpath\": \"./pack\",\n  \"filespath\": \"./data/files\",\n  \"telemetry\": true,\n  \"session_expire_time\": 2592000,\n  \"session_refresh_time\": 18000,\n  \"localOnly\": false,\n  \"enableLocalMode\": true,\n  \"localModeSocketLocation\": \"/var/tmp/focalboard_local.socket\"\n}\n\nEOF\n\n\n    green \" ================================================== \"\n    echo\n    green \"是否安装 Nginx web服务器, 安装Nginx可以提高安全性并提供更多功能\"\n    green \"如要安装 Nginx 需要提供域名, 并设置好域名DNS已解析到本机IP\"\n    echo\n    read -r -p \"是否安装 Nginx web服务器? 直接回车默认安装, 请输入[Y/n]:\" isNginxInstallInput\n    isNginxInstallInput=${isNginxInstallInput:-Y}\n\n    echo\n    red \"如果选择安装 Nginx, 请输入你的域名 例如 focalboard.xxx.com (不要带有 https:// 或者 http://)\"\n    red \"如果选择不安装 Nginx, 请输入你的IP 例如 192.168.1.1 (不要带有 https:// 或者 http://)\"\n    echo\n\n    if [[ \"${isNginxInstallInput}\" == [Yy] ]]; then\n        isInstallNginx=\"true\"\n        configSSLCertPath=\"${configSSLCertPath}/focalboard\"\n        getHTTPSCertificateStep1\n        configInstallNginxMode=\"focalboard\"\n        installWebServerNginx\n        ${sudoCmd} systemctl restart nginx.service\n\n        configFocalboard_APP_BASE_URL=\"https://${configSSLDomain}\"\n    else\n        getVPSIP\n        configFocalboard_APP_BASE_URL=\"http://${configLocalVPSIp}:${configFocalboard_PORT}\"\n    fi\n\n    echo\n    docker pull mattermost/focalboard\n    echo\n    docker-compose up -d\n    echo\n\n    if [[ \"${isUseSqliteInput}\" == [Yy] ]]; then\n        showHeaderGreen \"Focalboard Server install success !  \" \\\n        \"Visit: ${configFocalboard_APP_BASE_URL}\" \\\n        \"Focalboard DockerCompose Config : ${configFocalboardDockerPath}/config.json\" \\\n        \"Focalboard Sqlite Data : ${configFocalboardDockerDataPath}/focalboard.db\" \\\n        \"Focalboard Logs: docker-compose logs -f -t \"\n    else\n\n        showHeaderGreen \"Focalboard Server install success !  \" \\\n        \"Visit: ${configFocalboard_APP_BASE_URL}\" \\\n        \"Focalboard DockerCompose Config : ${configFocalboardDockerPath}/config.json\" \\\n        \"PostgreSQL Admin: ${configFocalboard_PostgreSQLUSER}, PostgreSQL Admin Password: ${configFocalboard_PostgreSQLPASSWORD}\" \\\n        \"Focalboard PostgreSQL Data : ${configFocalboardDockerDataPath}\" \\\n        \"Focalboard Logs: docker-compose logs -f -t \"\n    fi\n\n\n\n}\n\n\nfunction removeFocalboard(){\n    echo\n    read -r -p \"是否确认卸载Focalboard? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveFocalboardInput\n    isRemoveFocalboardInput=${isRemoveFocalboardInput:-Y}\n\n    if [[ \"${isRemoveFocalboardInput}\" == [Yy] ]]; then\n\n        echo\n        if [[ -d \"${configFocalboardDockerPath}\" ]]; then\n\n            showHeaderGreen \"准备卸载已安装的 Focalboard Server\"\n\n            cd ${configFocalboardDockerPath} || exit\n            docker-compose down\n\n            rm -rf \"${configFocalboardDockerPath}\"\n\n            if [[ -f \"\"${nginxConfigSiteConfPath}/focalboard_site.conf\"\" ]]; then\n                rm -f \"${nginxConfigSiteConfPath}/focalboard_site.conf\"\n                systemctl restart nginx.service\n            fi\n\n            showHeaderGreen \"已成功卸载 Focalboard Server 版本 !\"\n        else\n            showHeaderRed \"系统没有安装 Focalboard Server, 退出卸载\"\n        fi\n\n    fi\n    removeNginx\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Video Conference System 视频会议系统 安装\nfunction installJitsiMeet(){\n\n    showHeaderGreen \"准备安装 视频会议系统 Jitsi Meet !\" \\\n    \"Minimum Requirements: 4 GB RAM + 2 core CPU \"\n\n    echo\n    green \" ==================================================\"\n    green \" 请选择安装方式: (默认为 1 Docker方式)\"\n    echo\n    green \" 1. Install Jitsi Meet by Docker\"\n    green \" 2. Install Jitsi Meet directly, only support Debian 10 / Ubuntu 20.04\"\n    echo\n    read -r -p \"请输入纯数字, 默认为1 Docker方式:\" jitsimeetDockerInput\n\n    case \"${jitsimeetDockerInput}\" in\n        1 )\n            installJitsiMeetByDocker\n        ;;\n        2 )\n            installJitsiMeetOnUbuntu\n        ;;\n\n        * )\n            installJitsiMeetByDocker\n        ;;\n    esac\n}\n\nconfigJitsiMeetProjectPath=\"${HOME}/jitsi_meet\"\nconfigJitsiMeetDockerPath=\"${HOME}/jitsi_meet/docker\"\nconfigJitsiMeetDownloadPath=\"${HOME}/jitsi_meet/download\"\n\nfunction installJitsiMeetByDocker(){\n\n    if [ -f \"${configJitsiMeetDockerPath}/docker-compose.yml\" ]; then\n        showHeaderRed \"Jitsi Meet already installed !\"\n        exit\n    fi\n\n    showHeaderGreen \"开始安装 Jitsi Meet by Docker\"\n\n    mkdir -p \"${configJitsiMeetDownloadPath}\"\n\n    versionJitsiMeet=$(getGithubLatestReleaseVersion2 \"jitsi/docker-jitsi-meet\")\n    #versionJitsiMeet=\"stable-7648-1\"\n\n    downloadAndUnzip \"https://github.com/jitsi/docker-jitsi-meet/archive/refs/tags/${versionJitsiMeet}.zip\" \"${configJitsiMeetProjectPath}\" \"${versionJitsiMeet}.zip\"\n\n    # https://github.com/jitsi/docker-jitsi-meet/archive/refs/tags/stable-9364-1.zip\n\n    mv -f \"${configJitsiMeetProjectPath}/docker-jitsi-meet-${versionJitsiMeet}\" \"${configJitsiMeetProjectPath}/docker\"\n\n    cd \"${configJitsiMeetDockerPath}\" || exit\n    cp -f \"${configJitsiMeetDockerPath}/env.example\"  \"${configJitsiMeetDockerPath}/.env\"\n\n    \"${configJitsiMeetDockerPath}/gen-passwords.sh\"\n\n    mkdir -p ~/.jitsi-meet-cfg/{web,transcripts,prosody/config,prosody/prosody-plugins-custom,jicofo,jvb,jigasi,jibri}\n\n    getVPSIP\n\n    green \" ==================================================\"\n    echo\n    read -r -p \"请输入已解析到本机的域名: \" configSSLDomain\n    echo\n    read -r -p \"请输入邮箱用于申请SSL域名证书: \" configEmailForSSLDomain\n    echo\n\n    sed -i \"s|HTTP_PORT=8000|HTTP_PORT=80|g\" \"${configJitsiMeetDockerPath}/.env\"\n    sed -i \"s|HTTPS_PORT=8443|HTTPS_PORT=443|g\" \"${configJitsiMeetDockerPath}/.env\"\n    sed -i \"/HTTPS_PORT=443/a \\ \\nENABLE_HTTP_REDIRECT=1 \\n \" \"${configJitsiMeetDockerPath}/.env\"\n\n    sed -i \"s|#PUBLIC_URL=https:\\/\\/meet.example.com|PUBLIC_URL=https:\\/\\/${configSSLDomain}|g\" \"${configJitsiMeetDockerPath}/.env\"\n    sed -i \"s|#DOCKER_HOST_ADDRESS=192.168.1.1|DOCKER_HOST_ADDRESS=${configLocalVPSIp}|g\" \"${configJitsiMeetDockerPath}/.env\"\n\n    sed -i \"s|#ENABLE_LETSENCRYPT=1|ENABLE_LETSENCRYPT=1|g\" \"${configJitsiMeetDockerPath}/.env\"\n    sed -i \"s|#LETSENCRYPT_DOMAIN=meet.example.com|LETSENCRYPT_DOMAIN=${configSSLDomain}|g\" \"${configJitsiMeetDockerPath}/.env\"\n    sed -i \"s|#LETSENCRYPT_EMAIL=alice@atlanta.net|LETSENCRYPT_EMAIL=${configEmailForSSLDomain}|g\" \"${configJitsiMeetDockerPath}/.env\"\n\n\n\n\n    addPasswordForJitsiMeetDocker \"first\"\n\n\n    showHeaderGreen \"Jitsi Meet installed successfully!\" \"Visit https://${configSSLDomain} \" \\\n    \"停止命令: docker-compose down | 启动命令: docker-compose up -d \" \\\n    \"Jitsi Meet 项目文件路径 ${configJitsiMeetDockerPath} \" \\\n    \"Web 配置文件路径 ${HOME}/.jitsi-meet-cfg/web/config.js \" \\\n    \"查看日志 web: docker-compose logs -t -f web\" \\\n    \"查看日志 prosody: docker-compose logs -t -f prosody\" \\\n    \"查看日志 jvb: docker-compose logs -t -f jvb\" \\\n    \"查看日志 jicofo: docker-compose logs -t -f jicofo\"\n\n\n}\n\nfunction addPasswordForJitsiMeetDocker(){\n\n    cd \"${configJitsiMeetDockerPath}\" || exit\n\n    if [[ -z \"$1\" ]]; then\n\n        docker-compose down\n    else\n        echo\n    fi\n\n    green \" ==================================================\"\n    echo\n    green \" 是否需要密码才能发起会议? 默认为否 任何人都能发起会议\"\n    echo\n    read -r -p \"是否需要密码才能发起会议? 直接回车默认为否, 请输入[y/N]:\" isJitsiMeetNeedPasswordInput\n    isJitsiMeetNeedPasswordInput=${isJitsiMeetNeedPasswordInput:-N}\n\n    if [[ ${isJitsiMeetNeedPasswordInput} == [Yy] ]]; then\n\n        sed -i \"s|#ENABLE_AUTH=1|ENABLE_AUTH=1|g\" \"${configJitsiMeetDockerPath}/.env\"\n        sed -i \"s|#AUTH_TYPE=internal|AUTH_TYPE=internal|g\" \"${configJitsiMeetDockerPath}/.env\"\n\n        sed -i \"s|#ENABLE_GUESTS=1|ENABLE_GUESTS=1|g\" \"${configJitsiMeetDockerPath}/.env\"\n\n        docker-compose up -d\n\n        echo\n        read -r -p \"请输入发起会议用户名, 直接回车默认为jitsi : \" isJitsiMeetUsernameInput\n        isJitsiMeetUsernameInput=${isJitsiMeetUsernameInput:-jitsi}\n        echo\n        read -r -p \"请输入用户的密码, 直接回车默认为jitsi :\" isJitsiMeetUserPasswordInput\n        isJitsiMeetUserPasswordInput=${isJitsiMeetUserPasswordInput:-jitsi}\n        echo\n\n\n        docker-compose exec prosody prosodyctl --config /config/prosody.cfg.lua register ${isJitsiMeetUsernameInput} meet.jitsi ${isJitsiMeetUserPasswordInput}\n\n        # User list: find /config/data/meet%2ejitsi/accounts -type f -exec basename {} .dat \\;\n\n    else\n\n        sed -i \"s|#\\?ENABLE_AUTH=1|#ENABLE_AUTH=1|g\" \"${configJitsiMeetDockerPath}/.env\"\n        sed -i \"s|#\\?AUTH_TYPE=internal|#AUTH_TYPE=internal|g\" \"${configJitsiMeetDockerPath}/.env\"\n\n        sed -i \"s|#\\?ENABLE_GUESTS=1|#ENABLE_GUESTS=1|g\" \"${configJitsiMeetDockerPath}/.env\"\n\n        docker-compose up -d\n    fi\n\n    showHeaderGreen \"Check document below for JWT and LDAP authentication\" \\\n    \"Docs: https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-docker#authentication\"\n\n}\n\n\n\nconfigJitsiMeetVideoBridgeFilePath=\"/etc/jitsi/videobridge/sip-communicator.properties\"\nconfigJitsiMeetNginxConfigFolderPath=\"/etc/nginx/sites-available\"\nconfigJitsiMeetNginxConfigFolder2Path=\"/etc/nginx/sites-enabled\"\nconfigJitsiMeetNginxConfigOriginalFolderPath=\"/etc/nginx/conf.d\"\n\nfunction installJitsiMeetOnUbuntu(){\n\n    if [ \"$osRelease\" == \"centos\" ]; then\n        showHeaderRed \"不支持 CentOS 系统!  Not support CentOS!\"\n        exit\n    else\n        sed -i '/packages.prosody.im/d' /etc/apt/sources.list\n\n        ${sudoCmd} apt update -y\n        ${sudoCmd} apt install -y apt-transport-https\n\n        if [ \"$osRelease\" == \"ubuntu\" ]; then\n            ${sudoCmd} apt-add-repository universe -y\n            ${sudoCmd} apt update -y\n        fi\n    fi\n\n    # Add the Prosody package repository\n    echo \"deb http://packages.prosody.im/debian $(lsb_release -sc) main\" | ${sudoCmd} tee -a /etc/apt/sources.list\n    wget https://prosody.im/files/prosody-debian-packages.key -O- | ${sudoCmd} apt-key add -\n\n    # Add the Jitsi package repository\n    curl https://download.jitsi.org/jitsi-key.gpg.key | ${sudoCmd} sh -c 'gpg --dearmor > /usr/share/keyrings/jitsi-keyring.gpg'\n    echo \"deb [signed-by=/usr/share/keyrings/jitsi-keyring.gpg] https://download.jitsi.org stable/\" | ${sudoCmd} tee /etc/apt/sources.list.d/jitsi-stable.list > /dev/null\n\n    green \" ==================================================\"\n    ${sudoCmd} apt-get -y update\n    green \" ==================================================\"\n\n    showInfoGreen \"Setting firewall rules\"\n    ${sudoCmd} ufw allow 80/tcp\n    ${sudoCmd} ufw allow 443/tcp\n    ${sudoCmd} ufw allow 10000/udp\n\n    ${sudoCmd} ufw allow 3478/udp\n    ${sudoCmd} ufw allow 5349/tcp\n\n    echo\n    #echo \"ufw enable\"\n    #${sudoCmd} ufw enable\n    echo\n    echo \"ufw status verbose\"\n    ${sudoCmd} ufw status verbose\n\n\n    showHeaderGreen \"开始安装 Jitsi Meet\"\n\n    mkdir -p ${configJitsiMeetNginxConfigFolderPath}\n    mkdir -p ${configJitsiMeetNginxConfigFolder2Path}\n\n    # https://jitsi.org/downloads/ubuntu-debian-installations-instructions/\n    ${sudoCmd} apt-get -y install jitsi-meet\n\n    #sudo apt-get -y install jigasi\n\n\n    showHeaderGreen \"Setting up nginx configuration\"\n\n    #configJitsiMeetNginxConfigFilePath=\"${configJitsiMeetNginxConfigFolderPath}/${configSSLDomain}.conf\"\n    #sed -i \"s|jitsi-meet.example.com|${configSSLDomain}|g\" \"${configJitsiMeetNginxConfigFilePath}\"\n\n    ln -s ${configJitsiMeetNginxConfigFolderPath}/* ${configJitsiMeetNginxConfigOriginalFolderPath}/\n    ${sudoCmd} systemctl restart nginx\n\n\n    showHeaderGreen \"Generate certificate with letsencrypt\"\n    ${sudoCmd} /usr/share/jitsi-meet/scripts/install-letsencrypt-cert.sh\n\n    # configSSLCertPath=\"${configSSLCertPath}/jitsimeet\"\n    # getHTTPSCertificateStep1\n\n    # cp -f ${configSSLCertPath}/fullchain.cer \"/etc/jitsi/meet/${configSSLDomain}.crt\"\n    # cp -f ${configSSLCertPath}/private.key \"/etc/jitsi/meet/${configSSLDomain}.key\"\n\n    # /nginxweb/cert/jitsimeet/fullchain.cer\n    # /nginxweb/cert/jitsimeet/private.key\n\n\n    showHeaderGreen \"Setting up jitsi meet local IP configuration\"\n\n    getVPSIP\n    echo\n    read -r -p \"请输入本机IP: 直接回车默认为 ${configLocalVPSIp}\" jitsimeetVPSIPInput\n    jitsimeetVPSIPInput=${jitsimeetVPSIPInput:-${configLocalVPSIp}}\n\n    sed -i 's|#\\?org.ice4j.ice.harvest.STUN_MAPPING_HARVESTER_ADDRESSES|#org.ice4j.ice.harvest.STUN_MAPPING_HARVESTER_ADDRESSES|g' ${configJitsiMeetVideoBridgeFilePath}\n\n    sed -i '/org.ice4j.ice.harvest.NAT_HARVESTER_LOCAL_ADDRESS/d' ${configJitsiMeetVideoBridgeFilePath}\n    sed -i '/org.ice4j.ice.harvest.NAT_HARVESTER_PUBLIC_ADDRESS/d' ${configJitsiMeetVideoBridgeFilePath}\n\n    echo \"org.ice4j.ice.harvest.NAT_HARVESTER_LOCAL_ADDRESS=${jitsimeetVPSIPInput}\" >> ${configJitsiMeetVideoBridgeFilePath}\n    echo \"org.ice4j.ice.harvest.NAT_HARVESTER_PUBLIC_ADDRESS=${jitsimeetVPSIPInput}\" >> ${configJitsiMeetVideoBridgeFilePath}\n\n\n    sed -i 's|#\\?DefaultLimitNOFILE=.*|DefaultLimitNOFILE=65000|g' /etc/systemd/system.conf\n    sed -i 's|#\\?DefaultLimitNPROC=.*|DefaultLimitNPROC=65000|g' /etc/systemd/system.conf\n    sed -i 's|#\\?DefaultTasksMax=.*|DefaultTasksMax=65000|g' /etc/systemd/system.conf\n\n\n    echo\n    systemctl show --property DefaultLimitNPROC\n    systemctl show --property DefaultLimitNOFILE\n    systemctl show --property DefaultTasksMax\n\n    ${sudoCmd} systemctl daemon-reload\n\n    secureAddPasswordForJitsiMeet \"first\"\n\n    showHeaderGreen \"Jitsi Meet installed successfully!\" \"Running port 80 443 4443 10000 3478 5349 !\" \\\n    \"重启 Videobridge 命令: systemctl restart jitsi-videobridge2 | Log: /var/log/jitsi/jvb.log\" \\\n    \"重启 jicofo 命令: systemctl restart jicofo | Log: /var/log/jitsi/jicofo.log\" \\\n    \"重启 XMPP 命令: systemctl restart prosody | Log: /var/log/prosody/prosody.log\"\n\n}\n\nfunction secureAddPasswordForJitsiMeet(){\n    if [ -f \"${configJitsiMeetDockerPath}/.env\" ]; then\n        addPasswordForJitsiMeetDocker\n        exit\n    fi\n\n    green \" ==================================================\"\n    echo\n    read -r -p \"请输入已解析到本机的域名: \" configSSLDomain\n    echo\n\n    configJitsiMeetConfigFilePath=\"/etc/jitsi/meet/${configSSLDomain}-config.js\"\n    configJitsiMeetProsodyFilePath=\"/etc/prosody/conf.avail/${configSSLDomain}.cfg.lua\"\n    configJitsiMeetJicofoFilePath=\"/etc/jitsi/jicofo/jicofo.conf\"\n\n    echo\n    green \" 是否需要密码才能发起会议? 默认为否 任何人都能发起会议\"\n    echo\n    read -r -p \"是否需要密码才能发起会议? 直接回车默认为否, 请输入[y/N]:\" isJitsiMeetNeedPasswordInput\n    isJitsiMeetNeedPasswordInput=${isJitsiMeetNeedPasswordInput:-N}\n\n    if [[ ${isJitsiMeetNeedPasswordInput} == [Yy] ]]; then\n\n        #sed -i 's|#\\?authentication =.*|authentication = \"jitsi-anonymous\"|g' \"${configJitsiMeetProsodyFilePath}\"\n        #sed -i 's|#\\?authentication =.*|authentication = \"internal_plain\"|g' \"${configJitsiMeetProsodyFilePath}\"\n        sed -i 's|#\\?authentication =.*|authentication = \"internal_hashed\"|g' \"${configJitsiMeetProsodyFilePath}\"\n\n        read -r -d '' configJitsiMeetProsodyVhost << EOM\nVirtualHost \"guest.${configSSLDomain}\"\n    authentication = \"anonymous\"\n    c2s_require_encryption = false\n\nEOM\n\n        TEST1=\"${configJitsiMeetProsodyVhost//\\\\/\\\\\\\\}\"\n        TEST1=\"${TEST1//\\//\\\\/}\"\n        TEST1=\"${TEST1//&/\\\\&}\"\n        TEST1=\"${TEST1//$'\\n'/\\\\n}\"\n\n        sed -i \"/muc_lobby_whitelist /a ${TEST1} \\ \\ \" \"${configJitsiMeetProsodyFilePath}\"\n\n        sed -i \"/anonymousdomain/a \\        anonymousdomain: 'guest.${configSSLDomain}',\" \"${configJitsiMeetConfigFilePath}\"\n\n\n        read -r -d '' configJitsiMeetJicofoVhost << EOM\n    authentication: {\n        enabled: true\n        type: XMPP\n        login-url: ${configSSLDomain}\n    }\n\nEOM\n\n        TEST3=\"${configJitsiMeetJicofoVhost//\\\\/\\\\\\\\}\"\n        TEST3=\"${TEST3//\\//\\\\/}\"\n        TEST3=\"${TEST3//&/\\\\&}\"\n        TEST3=\"${TEST3//$'\\n'/\\\\n}\"\n\n        sed -i \"/xmpp/i \\    ${TEST3} \\ \\ \" \"${configJitsiMeetJicofoFilePath}\"\n\n\n        echo\n        read -r -p \"请输入发起会议用户名, 直接回车默认为jitsi : \" isJitsiMeetUsernameInput\n        isJitsiMeetUsernameInput=${isJitsiMeetUsernameInput:-jitsi}\n        echo\n        read -r -p \"请输入用户的密码, 直接回车默认为jitsi :\" isJitsiMeetUserPasswordInput\n        isJitsiMeetUserPasswordInput=${isJitsiMeetUserPasswordInput:-jitsi}\n        echo\n\n        ${sudoCmd} prosodyctl register \"${isJitsiMeetUsernameInput}\" \"${configSSLDomain}\" \"${isJitsiMeetUserPasswordInput}\"\n        # User list:  /var/lib/prosody/v%2evr360%2ecf/accounts\n\n        echo\n        green \"Use the following command to add new user: \"\n        yellow \"prosodyctl register username domain_name password\"\n        green \"Docs: https://prosody.im/doc/prosodyctl#user-management\"\n        echo\n        echo\n\n        showHeaderGreen \"Please manually modify Jigasi configuration if you are using Jigasi\" \"Docs: https://jitsi.github.io/handbook/docs/devops-guide/secure-domain/\"\n\n    else\n        echo\n        # https://stackoverflow.com/questions/4396974/sed-or-awk-delete-n-lines-following-a-pattern\n\n        if [[ -z \"$1\" ]]; then\n            sed -i 's|#\\?authentication =.*|authentication = \"jitsi-anonymous\"|g' \"${configJitsiMeetProsodyFilePath}\"\n            sed -i \"/guest.${configSSLDomain}/{N;N;d}\" \"${configJitsiMeetProsodyFilePath}\"\n\n            sed -i \"/anonymousdomain: 'guest.${configSSLDomain}/d\" \"${configJitsiMeetConfigFilePath}\"\n\n            sed -i \"/authentication:/,+4d\" \"${configJitsiMeetJicofoFilePath}\"\n        fi\n    fi\n\n    ${sudoCmd} systemctl daemon-reload\n    ${sudoCmd} systemctl restart prosody\n    ${sudoCmd} systemctl restart jicofo\n    ${sudoCmd} systemctl restart jitsi-videobridge2\n    ${sudoCmd} systemctl restart nginx\n\n}\n\nfunction removeJitsiMeet(){\n\n\n    if [ -f \"${configJitsiMeetDockerPath}/.env\" ]; then\n        showHeaderGreen \"准备卸载 Jitsi Meet Docker \"\n\n        cd \"${configJitsiMeetDockerPath}\" || exit\n\n        docker-compose down\n\n        rm -rf \"${configJitsiMeetDockerPath}\"\n        rm -rf \"${HOME}/.jitsi-meet-cfg\"\n\n        showHeaderGreen \"已成功卸载 Jitsi Meet Docker 版本 !\"\n    else\n        showHeaderRed \"没有发现 Jitsi Meet Docker !\"\n\n        showHeaderGreen \"准备卸载 视频会议系统 Jitsi Meet 非Docker 安装版本 !\"\n\n        if [ \"$osRelease\" == \"centos\" ]; then\n            showHeaderRed \" 不支持 CentOS 系统\"\n        else\n\n            ${sudoCmd} apt purge -y jigasi jitsi-meet jitsi-meet-web-config jitsi-meet-prosody jitsi-meet-turnserver jitsi-meet-web jicofo jitsi-videobridge2 prosody\n            ${sudoCmd} apt autoremove -y\n            ${sudoCmd} apt purge -y jicofo jitsi-videobridge2\n            ${sudoCmd} apt autoremove -y\n\n            rm -f /etc/prosody/prosody.cfg.lua\n            rm -rf /etc/letsencrypt/live/*\n            rm -rf /etc/letsencrypt/archive/*\n            rm -f /etc/letsencrypt/renewal/*\n            rm -f /etc/letsencrypt/keys/*\n\n            showHeaderGreen \"已成功卸载 Jitsi Meet 非Docker 安装版本 !\"\n        fi\n\n        removeNginx\n    fi\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconfigSogaConfigFilePath=\"/etc/soga/soga.conf\"\n\nfunction installSoga(){\n    echo\n    green \" ==================================================\"\n    green \"  开始安装 支持V2board面板的 服务器端程序 soga !\"\n    green \" ==================================================\"\n    echo\n\n    # wget -O soga_install.sh -N --no-check-certificate \"https://raw.githubusercontent.com/sprov065/soga/master/install.sh\" && chmod +x soga_install.sh && ./soga_install.sh\n    wget -O soga_install.sh -N --no-check-certificate \"https://raw.githubusercontent.com/vaxilu/soga/master/install.sh\" && chmod +x soga_install.sh && ./soga_install.sh\n\n    replaceSogaConfig\n}\n\nfunction replaceSogaConfig(){\n\n    if test -s ${configSogaConfigFilePath}; then\n\n        echo\n        green \"请选择SSL证书申请方式: 1 Soga内置的http方式, 2 通过acme.sh申请并放置证书文件\"\n        green \"默认直接回车为 Soga内置的http自动申请模式\"\n        green \"选否 则通过acme.sh申请证书并放置证书文件, 支持http和dns模式申请证书, 推荐此模式\"\n        echo\n        green \"注意: Soga SSL证书申请方式共有3种: 1 Soga内置的http方式, 2 Soga内置的dns方式, 3 手动放置证书文件 \"\n        green \"如需要使用 Soga内置的dns方式 申请SSL证书方式, 请手动修改 soga.conf 配置文件\"\n        echo\n        read -p \"请选择SSL证书申请方式 ? 默认直接回车为http自动申请模式, 选否则通过acme.sh手动申请并放置证书, 请输入[Y/n]:\" isSSLRequestHTTPInput\n        isSSLRequestHTTPInput=${isSSLRequestHTTPInput:-Y}\n\n        if [[ $isSSLRequestHTTPInput == [Yy] ]]; then\n            echo\n            green \" ================================================== \"\n            yellow \" 请输入绑定到本VPS的域名 例如www.xxx.com: (此步骤请关闭CDN后和nginx后安装 避免80端口占用导致申请证书失败)\"\n            green \" ================================================== \"\n\n            read configSSLDomain\n\n            sed -i 's/cert_mode=/cert_mode=http/g' ${configSogaConfigFilePath}\n        else\n            configSSLCertPath=\"${configSSLCertPathV2board}\"\n            getHTTPSCertificateStep1\n            sed -i \"s?cert_file=?cert_file=${configSSLCertPath}/${configSSLCertFullchainFilename}?g\" ${configSogaConfigFilePath}\n            sed -i \"s?key_file=?key_file=${configSSLCertPath}/${configSSLCertKeyFilename}?g\" ${configSogaConfigFilePath}\n\n        fi\n\n        sed -i 's/type=sspanel-uim/type=v2board/g' ${configSogaConfigFilePath}\n\n        sed -i \"s/cert_domain=/cert_domain=${configSSLDomain}/g\" ${configSogaConfigFilePath}\n\n        read -p \"请输入面板域名 例如www.123.com 不要带有http或https前缀 结尾不要带/ :\" inputV2boardDomain\n        sed -i \"s?webapi_url=?webapi_url=https://${inputV2boardDomain}/?g\" ${configSogaConfigFilePath}\n\n        read -p \"请输入webapi key 即通信密钥:\" inputV2boardWebApiKey\n        sed -i \"s/webapi_key=/webapi_key=${inputV2boardWebApiKey}/g\" ${configSogaConfigFilePath}\n\n        read -p \"请输入节点ID (纯数字):\" inputV2boardNodeId\n        sed -i \"s/node_id=1/node_id=${inputV2boardNodeId}/g\" ${configSogaConfigFilePath}\n\n        soga restart\n\n    fi\n\n    manageSoga\n}\n\n\nfunction manageSoga(){\n    echo -e \"\"\n    echo \"soga 管理脚本使用方法: \"\n    echo \"------------------------------------------\"\n    echo \"soga                    - 显示管理菜单 (功能更多)\"\n    echo \"soga start              - 启动 soga\"\n    echo \"soga stop               - 停止 soga\"\n    echo \"soga restart            - 重启 soga\"\n    echo \"soga status             - 查看 soga 状态\"\n    echo \"soga enable             - 设置 soga 开机自启\"\n    echo \"soga disable            - 取消 soga 开机自启\"\n    echo \"soga log                - 查看 soga 日志\"\n    echo \"soga update             - 更新 soga\"\n    echo \"soga update x.x.x       - 更新 soga 指定版本\"\n    echo \"soga config             - 显示配置文件内容\"\n    echo \"soga config xx=xx yy=yy - 自动设置配置文件\"\n    echo \"soga install            - 安装 soga\"\n    echo \"soga uninstall          - 卸载 soga\"\n    echo \"soga version            - 查看 soga 版本\"\n    echo \"------------------------------------------\"\n}\n\nfunction editSogaConfig(){\n    vi ${configSogaConfigFilePath}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconfigXrayRAccessLogFilePath=\"${HOME}/xrayr-access.log\"\nconfigXrayRErrorLogFilePath=\"${HOME}/xrayr-error.log\"\n\nconfigXrayRConfigFilePath=\"/etc/XrayR/config.yml\"\nconfigXrayRPath=\"/etc/XrayR\"\n\nfunction installXrayR(){\n    echo\n    green \" ==================================================\"\n    green \"  开始安装 支持V2board面板的 服务器端程序 XrayR !\"\n    green \" ==================================================\"\n    echo\n\n    testLinuxPortUsage\n\n    # https://raw.githubusercontent.com/XrayR-project/XrayR-release/master/install.sh\n    # https://raw.githubusercontent.com/Misaka-blog/XrayR-script/master/install.sh\n    # https://raw.githubusercontent.com/long2k3pro/XrayR-release/master/install.sh\n\n    wget -O xrayr_install.sh -N --no-check-certificate \"https://raw.githubusercontent.com/XrayR-project/XrayR-release/master/install.sh\" && chmod +x xrayr_install.sh && ./xrayr_install.sh\n\n    replaceXrayRConfig\n}\n\n\nfunction replaceXrayRConfig(){\n\n    if test -s ${configXrayRConfigFilePath}; then\n\n        sed -i \"s|# /etc/XrayR/access.Log|${configXrayRAccessLogFilePath}|g\" ${configXrayRConfigFilePath}\n        sed -i \"s|# /etc/XrayR/error.log|${configXrayRErrorLogFilePath}|g\" ${configXrayRConfigFilePath}\n        sed -i \"s|# /etc/XrayR/dns.json|/etc/XrayR/dns.json|g\" ${configXrayRConfigFilePath}\n        sed -i \"s|# /etc/XrayR/route.json|/etc/XrayR/route.json|g\" ${configXrayRConfigFilePath}\n        # sed -i \"s|# /etc/XrayR/custom_inbound.json|/etc/XrayR/custom_inbound.json|g\" ${configXrayRConfigFilePath}\n        sed -i \"s|# /etc/XrayR/custom_outbound.json|/etc/XrayR/custom_outbound.json|g\" ${configXrayRConfigFilePath}\n\n        echo\n        read -r -p \"请选择支持的面板类型 ? 默认直接回车为V2board, 选否则SSpanel, 请输入[Y/n]:\" isXrayRPanelTypeInput\n        isXrayRPanelTypeInput=${isXrayRPanelTypeInput:-Y}\n        configXrayRPanelType=\"SSpanel\"\n\n        if [[ $isXrayRPanelTypeInput == [Yy] ]]; then\n            configXrayRPanelType=\"NewV2board\"\n            sed -i 's/PanelType: \"SSpanel\"/PanelType: \"NewV2board\"/g' ${configXrayRConfigFilePath}\n        else\n            sed -i 's/PanelType: \"NewV2board\"/PanelType: \"SSpanel\"/g' ${configXrayRConfigFilePath}\n        fi\n\n        echo\n        green \"请输入面板域名, 例如www.123.com 不要带有http或https前缀 结尾不要带/\"\n        green \"请保证输入的V2board或其他面板域名支持Https访问, 如要改成http请手动修改配置文件 ${configXrayRConfigFilePath}\"\n        echo\n        read -r -p \"请输入面板域名:\" inputV2boardDomain\n        sed -i \"s?http://127.0.0.1:667?https://${inputV2boardDomain}?g\" ${configXrayRConfigFilePath}\n\n        echo\n        read -r -p \"请输入ApiKey 即通信密钥:\" inputV2boardWebApiKey\n        sed -i \"s/\\\"123\\\"/\\\"${inputV2boardWebApiKey}\\\"/g\" ${configXrayRConfigFilePath}\n\n        echo\n        read -r -p \"请选择节点协议类型: 默认直接回车为V2ray, 选否则为Trojan, 请输入[Y/n]:\" isXrayRNodeTypeInput\n        isXrayRNodeTypeInput=${isXrayRNodeTypeInput:-Y}\n        configXrayRNodeType=\"V2ray\"\n\n        if [[ $isXrayRNodeTypeInput == [Nn] ]]; then\n            configXrayRNodeType=\"Trojan\"\n            sed -i 's/NodeType: V2ray/NodeType: Trojan/g' ${configXrayRConfigFilePath}\n\n        else\n            sed -i 's/NodeType: Trojan/NodeType: V2ray/g' ${configXrayRConfigFilePath}\n            echo\n            read -r -p \"是否启用XrayR的Vless协议? 默认直接回车为否, 默认启用Vmess协议, 选择是则启用Vless协议, 请输入[y/N]:\" isXrayRVlessSupportInput\n            isXrayRVlessSupportInput=${isXrayRVlessSupportInput:-N}\n\n            if [[ $isXrayRVlessSupportInput == [Yy] ]]; then\n                sed -i 's/EnableVless: false/EnableVless: true/g' ${configXrayRConfigFilePath}\n            else\n                sed -i 's/EnableVless: true/EnableVless: false/g' ${configXrayRConfigFilePath}\n            fi\n\n            echo\n            read -r -p \"是否启用XrayR的REALITY? 默认直接回车为否 不启用, 选择是则启用, 请输入[y/N]:\" isXrayRREALITYSupportInput\n            isXrayRREALITYSupportInput=${isXrayRREALITYSupportInput:-N}\n\n            if [[ $isXrayRREALITYSupportInput == [Yy] ]]; then\n                sed -i 's/EnableREALITY: false/EnableREALITY: true/g' ${configXrayRConfigFilePath}\n            else\n                sed -i 's/EnableREALITY: true/EnableREALITY: false/g' ${configXrayRConfigFilePath}\n            fi\n        fi\n\n        echo\n        read -r -p \"是否启用XrayR内置的DNS? 默认直接回车为否 不启用, 选择是则启用, 请输入[y/N]:\" isXrayREnableDNSInput\n        isXrayREnableDNSInput=${isXrayREnableDNSInput:-N}\n\n        if [[ $isXrayREnableDNSInput == [Yy] ]]; then\n            sed -i 's/EnableDNS: false/EnableDNS: true/g' ${configXrayRConfigFilePath}\n            sed -i 's/DNSType: AsIs/DNSType: UseIP/g' ${configXrayRConfigFilePath}\n        else\n            sed -i 's/EnableDNS: true/EnableDNS: false/g' ${configXrayRConfigFilePath}\n            sed -i 's/DNSType: UseIP/DNSType: AsIs/g' ${configXrayRConfigFilePath}\n        fi\n\n        echo\n        read -r -p \"请输入节点ID (纯数字):\" inputV2boardNodeId\n        sed -i \"s/NodeID: [0-9]*/NodeID: ${inputV2boardNodeId}/g\" ${configXrayRConfigFilePath}\n\n\n\n        echo\n        green \" ==================================================\"\n        yellow \" 请选择SSL证书申请方式\"\n        echo\n        green \" 1. 关闭TLS 不申请证书, 用于配合Nginx或Caddy 等Web服务器\"\n        green \" 2. 通过 http 模式申请, 需要开放 80 端口\"\n        green \" 3. 通过 dns 模式申请, 需要填写相关dns服务商配置\"\n        green \" 4. 手动提供证书，需要指定证书的路径\"\n        green \" 5. 通过外部的acme.sh 申请证书 支持http 和 dns 等更多模式申请证书\"\n        echo\n        read -r -p \"请选择证书申请方式? 直接回车默认选2 http模式申请, 请输入纯数字:\" isSSLRequestHTTPInput\n        isSSLRequestHTTPInput=${isSSLRequestHTTPInput:-2}\n        configXrayRSSLRequestMode=\"none\"\n\n        if [[ $isSSLRequestHTTPInput == \"1\" ]]; then\n            configXrayRSSLRequestMode=\"none\"\n\n        elif [[ $isSSLRequestHTTPInput == \"2\" ]]; then\n            configXrayRSSLRequestMode=\"http\"\n            green \" ================================================== \"\n            yellow \" 请输入指向本VPS的域名 用于申请证书 例如www.xxx.com: (此步骤请关闭CDN后和nginx后安装 避免80端口占用导致申请证书失败)\"\n            green \" ================================================== \"\n\n            read configSSLDomain\n\n        elif [[ $isSSLRequestHTTPInput == \"3\" ]]; then\n            configXrayRSSLRequestMode=\"dns\"\n            green \" ================================================== \"\n            yellow \" 请输入绑定到本VPS的域名 例如www.xxx.com: (此步骤请关闭CDN后和nginx后安装 避免80端口占用导致申请证书失败)\"\n            green \" ================================================== \"\n            read -r configSSLDomain\n\n            echo\n            read -r -p \"请选择DNS模式申请的服务商? 默认直接回车为alidns, 选否则cloudflare, 请输入[Y/n]:\" isXrayRSSLDNSProviderInput\n            isXrayRSSLDNSProviderInput=${isXrayRSSLDNSProviderInput:-Y}\n            configXrayRPanelType=\"alidns\"\n\n            if [[ $isXrayRSSLDNSProviderInput == [Nn] ]]; then\n                configXrayRPanelType=\"cloudflare\"\n                sed -i \"s/alidns/cloudflare/g\" ${configXrayRConfigFilePath}\n            fi\n\n            echo\n            read -r -p \"请填写DNS模式申请的Email:\" isXrayRSSLDNSEmailInput\n            sed -i \"s/Email: test@me.com/Email: ${isXrayRSSLDNSEmailInput}/g\" ${configXrayRConfigFilePath}\n\n        elif [[ $isSSLRequestHTTPInput == \"4\" ]]; then\n            configXrayRSSLRequestMode=\"file\"\n\n        else\n            configXrayRSSLRequestMode=\"file\"\n            configSSLCertPath=\"${configSSLCertPathV2board}\"\n            getHTTPSCertificateStep1\n\n            sed -i \"s?/etc/XrayR/cert/node1.test.com.cert?${configSSLCertPath}/${configSSLCertFullchainFilename}?g\" ${configXrayRConfigFilePath}\n            sed -i \"s?/etc/XrayR/cert/node1.test.com.key?${configSSLCertPath}/${configSSLCertKeyFilename}?g\" ${configXrayRConfigFilePath}\n        fi\n\n        sed -i \"s/CertMode: dns/CertMode: ${configXrayRSSLRequestMode}/g\" ${configXrayRConfigFilePath}\n        sed -i \"s/CertDomain: \\\"node1.test.com\\\"/CertDomain: \\\"${configSSLDomain}\\\"/g\" ${configXrayRConfigFilePath}\n\n\n        sed -i \"18,22d\" ${configXrayRPath}/route.json\n        # mv ${configXrayRPath}/custom_inbound.json ${configXrayRPath}/custom_inbound_bak.json\n\n        XrayR restart\n\n        (crontab -l ; echo \"35 4 * * 0,1,2,3,4,5,6 rm -f /root/xrayr-*.log\") | sort - | uniq - | crontab -\n        (crontab -l ; echo \"36 4 * * 0,1,2,3,4,5,6 systemctl restart XrayR.service \") | sort - | uniq - | crontab -\n\n        warpGoCrontab\n    fi\n\n    manageXrayR\n\n}\n\n\nfunction manageXrayR(){\n    echo -e \"\"\n    echo \"XrayR 管理脚本使用方法 (兼容使用xrayr执行，大小写不敏感): \"\n    echo \"------------------------------------------\"\n    echo \"XrayR                    - 显示管理菜单 (功能更多)\"\n    echo \"XrayR start              - 启动 XrayR\"\n    echo \"XrayR stop               - 停止 XrayR\"\n    echo \"XrayR restart            - 重启 XrayR\"\n    echo \"XrayR status             - 查看 XrayR 状态\"\n    echo \"XrayR enable             - 设置 XrayR 开机自启\"\n    echo \"XrayR disable            - 取消 XrayR 开机自启\"\n    echo \"XrayR log                - 查看 XrayR 日志\"\n    echo \"XrayR update             - 更新 XrayR\"\n    echo \"XrayR update x.x.x       - 更新 XrayR 指定版本\"\n    echo \"XrayR config             - 显示配置文件内容\"\n    echo \"XrayR install            - 安装 XrayR\"\n    echo \"XrayR uninstall          - 卸载 XrayR\"\n    echo \"XrayR version            - 查看 XrayR 版本\"\n    echo \"------------------------------------------\"\n}\n\nfunction editXrayRConfig(){\n    vi ${configXrayRConfigFilePath}\n}\n\n\n\nfunction warpGoCrontab(){\n\n    cat > /root/check_ipv6_warp-go-cron.sh <<-EOF\n#!/bin/bash\n\n# check ipv6 network connectivity\nif ping6 -c 4 2001:4860:4860::8888 > /dev/null; then\n    echo \"IPv6 network is connected\"\nelse\n    echo \"IPv6 network is unreachable\"\n    /usr/bin/warp-go o\n    sleep 2\n\n    if ping6 -c 4 2001:4860:4860::8888 > /dev/null; then\n        echo \"IPv6 network is connected\"\n    else\n        echo \"IPv6 network is unreachable\"\n        /usr/bin/warp-go o\n        sleep 2\n    fi\nfi\nEOF\n\n    chmod +x /root/check_ipv6_warp-go-cron.sh\n\n    # create a cron job\n    (crontab -l ; echo \"50 4 * * 0,1,2,3,4,5,6 /root/check_ipv6_warp-go-cron.sh \") | sort - | uniq - | crontab -\n\n    echo \"warp-go Crontab added\"\n\n}\n\nfunction warpGoCheckIpv6(){\n    ipv6_address=\"2001:4860:4860::8888\"\n    ping_command=\"ping6 -c 4 $ipv6_address\"\n\n    # check ipv6 network connectivity\n    if ping6 -c 4 $ipv6_address > /dev/null; then\n        echo \"IPv6 network is connected\"\n    else\n        echo \"IPv6 network is unreachable\"\n        /usr/bin/warp-go o\n        sleep 2\n        if ping6 -c 4 $ipv6_address > /dev/null; then\n            echo \"IPv6 network is connected\"\n        else\n            echo \"IPv6 network is unreachable\"\n            /usr/bin/warp-go o\n            sleep 2\n        fi\n    fi\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction installAiruAndNginx(){\n\n    systemctl stop xray.service\n    systemctl stop au.service\n\n    isInstallNginx=\"true\"\n    configSSLCertPath=\"${configSSLCertPathV2board}\"\n    #getHTTPSCertificateStep1\n\n    configInstallNginxMode=\"airuniverse\"\n    installWebServerNginx\n\n    sed -i 's/\\\"force_close_tls\\\": \\?false/\\\"force_close_tls\\\": true/g' ${configAirUniverseConfigFilePath}\n\n    systemctl start xray.service\n    systemctl start au.service\n\n}\n\n\n\n\nfunction downgradeXray(){\n    echo\n    green \" ==================================================\"\n    green \"  准备降级 Xray 和 Air-Universe !\"\n    green \" ==================================================\"\n    echo\n\n    yellow \" 请选择 Air-Universe 降级到的版本, 默认不降级\"\n    red \" 注意 Air-Universe 最新版不支持 Xray 1.5.0或更老版本\"\n    red \" 如需要使用Xray 1.5.0或更老版本的Xray, 请选择 Air-Universe 1.0.0或 0.9.2\"\n    echo\n    green \" 1. 不降级 使用最新版本\"\n    green \" 2. 1.1.1 (不支持 Xray 1.5.0或更老版本)\"\n    green \" 3. 1.0.0 (仅支持 Xray 1.5.0或更老版本)\"\n    green \" 4. 0.9.2 (仅支持 Xray 1.5.0或更老版本)\"\n    echo\n    read -p \"请选择Air-Universe版本? 直接回车默认选1, 请输入纯数字:\" isAirUniverseVersionInput\n    isAirUniverseVersionInput=${isAirUniverseVersionInput:-1}\n\n\n    downloadAirUniverseVersion=$(getGithubLatestReleaseVersion \"crossfw/Air-Universe\")\n    downloadAirUniverseUrl=\"https://github.com/crossfw/Air-Universe/releases/download/v${downloadAirUniverseVersion}/Air-Universe-linux-64.zip\"\n\n    if [[ \"${isAirUniverseVersionInput}\" == \"2\" ]]; then\n        downloadAirUniverseVersion=\"1.1.1\"\n    elif [[ \"${isAirUniverseVersionInput}\" == \"3\" ]]; then\n        downloadAirUniverseVersion=\"1.0.0\"\n    elif [[ \"${isAirUniverseVersionInput}\" == \"4\" ]]; then\n        downloadAirUniverseVersion=\"0.9.2\"\n    else\n        echo\n    fi\n\n    if [[ \"${isAirUniverseVersionInput}\" == \"1\" ]]; then\n        green \" ==================================================\"\n        green \"  已选择不降级 使用最新版本 Air-Universe ${downloadAirUniverseVersion}\"\n        green \" ==================================================\"\n        echo\n    else\n        # https://github.com/crossfw/Air-Universe/releases/download/v1.0.2/Air-Universe-linux-arm32-v6.zip\n        # https://github.com/crossfw/Air-Universe/releases/download/v1.0.2/Air-Universe-linux-arm64-v8a.zip\n\n        downloadAirUniverseUrl=\"https://github.com/crossfw/Air-Universe/releases/download/v${downloadAirUniverseVersion}/Air-Universe-linux-64.zip\"\n        airUniverseDownloadFilename=\"Air-Universe-linux-64_${downloadAirUniverseVersion}.zip\"\n\n        if [[ \"${osArchitecture}\" == \"arm64\" ]]; then\n            downloadAirUniverseUrl=\"https://github.com/crossfw/Air-Universe/releases/download/v${downloadAirUniverseVersion}/Air-Universe-linux-arm64-v8a.zip\"\n            airUniverseDownloadFilename=\"Air-Universe-linux-arm64-v8a_${downloadAirUniverseVersion}.zip\"\n        fi\n\n        if [[ \"${osArchitecture}\" == \"arm\" ]]; then\n            downloadAirUniverseUrl=\"https://github.com/crossfw/Air-Universe/releases/download/v${downloadAirUniverseVersion}/Air-Universe-linux-arm32-v6.zip\"\n            airUniverseDownloadFilename=\"Air-Universe-linux-arm32-v6_${downloadAirUniverseVersion}.zip\"\n        fi\n\n\n        airUniverseDownloadFolder=\"/root/airuniverse_temp\"\n        mkdir -p ${airUniverseDownloadFolder}\n\n        wget -O ${airUniverseDownloadFolder}/${airUniverseDownloadFilename} ${downloadAirUniverseUrl}\n        unzip -d ${airUniverseDownloadFolder} ${airUniverseDownloadFolder}/${airUniverseDownloadFilename}\n        mv -f ${airUniverseDownloadFolder}/Air-Universe /usr/local/bin/au\n        chmod +x /usr/local/bin/*\n\n        rm -rf ${airUniverseDownloadFolder}\n\n    fi\n\n\n\n    echo\n    yellow \" 请选择Xray降级到的版本, 默认直接回车为不降级\"\n    echo\n    green \" 1. 不降级 使用最新版本\"\n\n    if [[ \"${isAirUniverseVersionInput}\" == \"1\" || \"${isAirUniverseVersionInput}\" == \"2\" ]]; then\n        green \" 2. 1.7.5\"\n        green \" 3. 1.6.1\"\n        green \" 4. 1.6.0\"\n        green \" 5. 1.5.5\"\n        green \" 6. 1.5.4\"\n        green \" 7. 1.5.3\"\n    else\n        green \" 8. 1.5.0\"\n        green \" 9. 1.4.5\"\n        green \" 10. 1.4.0\"\n        green \" 11. 1.3.1\"\n    fi\n\n    echo\n    read -p \"请选择Xray版本? 直接回车默认选1, 请输入纯数字:\" isXrayVersionInput\n    isXrayVersionInput=${isXrayVersionInput:-1}\n\n    downloadXrayVersion=$(getGithubLatestReleaseVersion \"XTLS/Xray-core\")\n    downloadXrayUrl=\"https://github.com/XTLS/Xray-core/releases/download/v${downloadXrayVersion}/Xray-linux-64.zip\"\n\n    if [[ \"${isXrayVersionInput}\" == \"2\" ]]; then\n        downloadXrayVersion=\"1.7.5\"\n\n    elif [[ \"${isXrayVersionInput}\" == \"3\" ]]; then\n        downloadXrayVersion=\"1.6.1\"\n\n    elif [[ \"${isXrayVersionInput}\" == \"4\" ]]; then\n        downloadXrayVersion=\"1.6.0\"\n\n    elif [[ \"${isXrayVersionInput}\" == \"5\" ]]; then\n        downloadXrayVersion=\"1.5.5\"\n\n    elif [[ \"${isXrayVersionInput}\" == \"6\" ]]; then\n        downloadXrayVersion=\"1.5.4\"\n\n    elif [[ \"${isXrayVersionInput}\" == \"7\" ]]; then\n        downloadXrayVersion=\"1.5.3\"\n\n    elif [[ \"${isXrayVersionInput}\" == \"8\" ]]; then\n        downloadXrayVersion=\"1.5.0\"\n\n    elif [[ \"${isXrayVersionInput}\" == \"9\" ]]; then\n        downloadXrayVersion=\"1.4.5\"\n\n    elif [[ \"${isXrayVersionInput}\" == \"10\" ]]; then\n        downloadXrayVersion=\"1.4.0\"\n\n    elif [[ \"${isXrayVersionInput}\" == \"11\" ]]; then\n        downloadXrayVersion=\"1.3.1\"\n\n    else\n        echo\n    fi\n\n    if [[ \"${isXrayVersionInput}\" == \"1\" ]]; then\n        green \" ==================================================\"\n        green \"  已选择不降级 使用最新版本 Xray ${downloadXrayVersion}\"\n        green \" ==================================================\"\n        echo\n    else\n\n        # https://github.com/XTLS/Xray-core/releases/download/v1.5.2/Xray-linux-arm32-v6.zip\n\n        downloadXrayUrl=\"https://github.com/XTLS/Xray-core/releases/download/v${downloadXrayVersion}/Xray-linux-64.zip\"\n        xrayDownloadFilename=\"Xray-linux-64_${downloadXrayVersion}.zip\"\n\n        if [[ \"${osArchitecture}\" == \"arm64\" ]]; then\n            downloadXrayUrl=\"https://github.com/XTLS/Xray-core/releases/download/v${downloadXrayVersion}/Xray-linux-arm64-v8a.zip\"\n            xrayDownloadFilename=\"Xray-linux-arm64-v8a_${downloadXrayVersion}.zip\"\n        fi\n\n        if [[ \"${osArchitecture}\" == \"arm\" ]]; then\n            downloadXrayUrl=\"https://github.com/XTLS/Xray-core/releases/download/v${downloadXrayVersion}/Xray-linux-arm32-v6.zip\"\n            xrayDownloadFilename=\"Xray-linux-arm32-v6_${downloadXrayVersion}.zip\"\n        fi\n\n\n        xrayDownloadFolder=\"/root/xray_temp\"\n        mkdir -p ${xrayDownloadFolder}\n\n        wget -O ${xrayDownloadFolder}/${xrayDownloadFilename} ${downloadXrayUrl}\n        unzip -d ${xrayDownloadFolder} ${xrayDownloadFolder}/${xrayDownloadFilename}\n        mv -f ${xrayDownloadFolder}/xray /usr/local/bin\n        chmod +x /usr/local/bin/*\n        rm -rf ${xrayDownloadFolder}\n\n    fi\n\n    if [[ -z $1 ]]; then\n        echo\n\n        airu stop\n        systemctl stop xray.service\n\n        chmod 666 ${configSSLCertPathV2board}/*\n\n        systemctl start xray.service\n        echo\n        airu start\n        echo\n        systemctl status xray.service\n        echo\n    fi\n}\n\n\n\nconfigAirUniverseXrayAccessLogFilePath=\"${HOME}/xray_access.log\"\nconfigAirUniverseXrayErrorLogFilePath=\"${HOME}/xray_error.log\"\n\n\nconfigAirUniverseAccessLogFilePath=\"${HOME}/air-universe-access.log\"\nconfigAirUniverseErrorLogFilePath=\"${HOME}/air-universe-error.log\"\n\nconfigAirUniverseConfigFilePath=\"/usr/local/etc/au/au.json\"\nconfigAirUniverseXrayConfigFilePath=\"/usr/local/etc/xray/config.json\"\n\nconfigXrayPort=\"$(($RANDOM + 10000))\"\n\nfunction installAirUniverse(){\n    echo\n    green \" ==================================================\"\n    green \"  开始安装 支持V2board面板的 服务器端程序 Air-Universe !\"\n    green \" ==================================================\"\n    echo\n\n\n    if [ -z \"$1\" ]; then\n        testLinuxPortUsage\n\n        # bash -c \"$(curl -L https://github.com/crossfw/Xray-install/raw/main/install-release.sh)\" @ install\n        # bash <(curl -Ls https://raw.githubusercontent.com/crossfw/Air-Universe-install/master/install.sh)\n\n        # bash <(curl -Ls https://raw.githubusercontent.com/crossfw/Air-Universe-install/master/AirU.sh)\n        wget -O /root/airu_install.sh -N --no-check-certificate \"https://raw.githubusercontent.com/crossfw/Air-Universe-install/master/AirU.sh\"\n        chmod +x /root/airu_install.sh\n        cp -f /root/airu_install.sh /usr/bin/airu\n\n        /root/airu_install.sh install\n\n        (crontab -l ; echo \"30 4 * * 0,1,2,3,4,5,6 systemctl restart xray.service \") | sort - | uniq - | crontab -\n        (crontab -l ; echo \"32 4 * * 0,1,2,3,4,5,6 /usr/bin/airu restart \") | sort - | uniq - | crontab -\n\n        downgradeXray \"norestart\"\n    else\n        echo\n    fi\n\n    # sed -i '/User=nobody/d' \"/etc/systemd/system/xray.service\"\n    # ${sudoCmd} systemctl daemon-reload\n    # chown root \"/var/log/au/xr.log\"\n\n    if test -s ${configAirUniverseConfigFilePath}; then\n\n        echo\n        green \"请选择SSL证书申请方式: 1 通过acme.sh申请证书, 2 不申请证书\"\n        green \"默认直接回车为通过acme.sh申请证书, 支持 http 和 dns 等更多方式申请证书, 推荐使用\"\n        green \"注: Air-Universe 本身没有自动获取证书功能, 使用 acme.sh 申请证书\"\n        echo\n        read -r -p \"请选择SSL证书申请方式 ? 默认直接回车为申请证书, 选否则不申请证书, 请输入[Y/n]:\" isSSLRequestHTTPInput\n        isSSLRequestHTTPInput=${isSSLRequestHTTPInput:-Y}\n\n        if [[ $isSSLRequestHTTPInput == [Yy] ]]; then\n            echo\n            configSSLCertPath=\"${configSSLCertPathV2board}\"\n            getHTTPSCertificateStep1\n\n            airUniverseConfigNodeIdNumberInput=$(grep \"nodes_type\"  ${configAirUniverseConfigFilePath} | awk -F  \":\" '{print $2}')\n\n            read -r -d '' airUniverseConfigProxyInput << EOM\n\n        \"type\": \"xray\",\n        \"auto_generate\": true,\n        \"in_tags\": ${airUniverseConfigNodeIdNumberInput},\n        \"api_address\": \"127.0.0.1\",\n        \"api_port\": ${configXrayPort},\n        \"force_close_tls\": false,\n        \"log_path\": \"${configAirUniverseAccessLogFilePath}\",\n        \"cert\": {\n            \"cert_path\": \"${configSSLCertPath}/${configSSLCertFullchainFilename}\",\n            \"key_path\": \"${configSSLCertPath}/${configSSLCertKeyFilename}\"\n        },\n        \"speed_limit_level\": [0, 10, 30, 100, 150, 300, 1000]\n\nEOM\n\n            # https://stackoverflow.com/questions/6684487/sed-replace-with-variable-with-multiple-lines\n\n            TEST=\"${airUniverseConfigProxyInput//\\\\/\\\\\\\\}\"\n            TEST=\"${TEST//\\//\\\\/}\"\n            TEST=\"${TEST//&/\\\\&}\"\n            TEST=\"${TEST//$'\\n'/\\\\n}\"\n\n            sed -i \"s/\\\"type\\\":\\\"xray\\\"/${TEST}/g\" ${configAirUniverseConfigFilePath}\n            sed -i \"s/10085/${configXrayPort}/g\" ${configAirUniverseXrayConfigFilePath}\n\n\n            replaceAirUniverseConfigWARP \"norestart\"\n\n            chmod 666 ${configSSLCertPathV2board}/*\n\n\n            # chown -R nobody:nogroup /var/log/v2ray\n\n            echo\n            green \" ==================================================\"\n            systemctl restart xray.service\n            airu restart\n            echo\n            echo\n            green \" ==================================================\"\n            green \" Air-Universe 安装成功 !\"\n            green \" ==================================================\"\n\n            manageAirUniverse\n        else\n            echo\n            green \"不申请SSL证书\"\n            read -r -p \"Press enter to continue. 按回车继续运行 airu 命令\"\n            airu\n        fi\n\n\n\n        green \" ================================================== \"\n        echo\n        green \"是否安装 Nginx web服务器, 安装Nginx可以提高安全性\"\n        echo\n        read -r -p \"是否安装 Nginx web服务器? 直接回车默认不安装, 请输入[y/N]:\" isNginxAiruInstallInput\n        isNginxAiruInstallInput=${isNginxAiruInstallInput:-n}\n\n        if [[ \"${isNginxAiruInstallInput}\" == [Yy] ]]; then\n            installAiruAndNginx\n        fi\n\n    else\n        manageAirUniverse\n    fi\n\n}\n\n\n\n\nfunction inputUnlockV2rayServerInfo(){\n            echo\n            echo\n            yellow \" 请选择可解锁流媒体的V2ray或Xray服务器的协议 \"\n            green \" 1. VLess + TCP + TLS\"\n            green \" 2. VLess + TCP + XTLS\"\n            green \" 3. VLess + WS + TLS (支持CDN)\"\n            green \" 4. VMess + TCP + TLS\"\n            green \" 5. VMess + WS + TLS (支持CDN)\"\n            echo\n            read -p \"请选择协议? 直接回车默认选3, 请输入纯数字:\" isV2rayUnlockServerProtocolInput\n            isV2rayUnlockServerProtocolInput=${isV2rayUnlockServerProtocolInput:-3}\n\n            isV2rayUnlockOutboundServerProtocolText=\"vless\"\n            if [[ $isV2rayUnlockServerProtocolInput == \"4\" || $isV2rayUnlockServerProtocolInput == \"5\" ]]; then\n                isV2rayUnlockOutboundServerProtocolText=\"vmess\"\n            fi\n\n            isV2rayUnlockOutboundServerTCPText=\"tcp\"\n            unlockOutboundServerWebSocketSettingText=\"\"\n            if [[ $isV2rayUnlockServerProtocolInput == \"3\" ||  $isV2rayUnlockServerProtocolInput == \"5\" ]]; then\n                isV2rayUnlockOutboundServerTCPText=\"ws\"\n                echo\n                yellow \" 请填写可解锁流媒体的V2ray或Xray服务器Websocket Path, 默认为/\"\n                read -p \"请填写Websocket Path? 直接回车默认为/ , 请输入(不要包含/):\" isV2rayUnlockServerWSPathInput\n                isV2rayUnlockServerWSPathInput=${isV2rayUnlockServerWSPathInput:-\"\"}\n                read -r -d '' unlockOutboundServerWebSocketSettingText << EOM\n                ,\n                \"wsSettings\": {\n                    \"path\": \"/${isV2rayUnlockServerWSPathInput}\"\n                }\nEOM\n            fi\n\n\n            unlockOutboundServerXTLSFlowText=\"\"\n            isV2rayUnlockOutboundServerTLSText=\"tls\"\n            if [[ $isV2rayUnlockServerProtocolInput == \"2\" ]]; then\n                isV2rayUnlockOutboundServerTCPText=\"tcp\"\n                isV2rayUnlockOutboundServerTLSText=\"xtls\"\n\n                echo\n                yellow \" 请选择可解锁流媒体的V2ray或Xray服务器 XTLS模式下的Flow \"\n                green \" 1. VLess + TCP + XTLS (xtls-rprx-direct) 推荐\"\n                green \" 2. VLess + TCP + XTLS (xtls-rprx-splice) 此项可能会无法连接\"\n                read -p \"请选择Flow 参数? 直接回车默认选1, 请输入纯数字:\" isV2rayUnlockServerFlowInput\n                isV2rayUnlockServerFlowInput=${isV2rayUnlockServerFlowInput:-1}\n\n                unlockOutboundServerXTLSFlowValue=\"xtls-rprx-direct\"\n                if [[ $isV2rayUnlockServerFlowInput == \"1\" ]]; then\n                    unlockOutboundServerXTLSFlowValue=\"xtls-rprx-direct\"\n                else\n                    unlockOutboundServerXTLSFlowValue=\"xtls-rprx-splice\"\n                fi\n                read -r -d '' unlockOutboundServerXTLSFlowText << EOM\n                                \"flow\": \"${unlockOutboundServerXTLSFlowValue}\",\nEOM\n            fi\n\n\n            echo\n            yellow \" 请填写可解锁流媒体的V2ray或Xray服务器地址, 例如 www.example.com\"\n            read -p \"请填写可解锁流媒体服务器地址? 直接回车默认为本机, 请输入:\" isV2rayUnlockServerDomainInput\n            isV2rayUnlockServerDomainInput=${isV2rayUnlockServerDomainInput:-127.0.0.1}\n\n            echo\n            yellow \" 请填写可解锁流媒体的V2ray或Xray服务器端口号, 例如 443\"\n            read -p \"请填写可解锁流媒体服务器地址? 直接回车默认为443, 请输入:\" isV2rayUnlockServerPortInput\n            isV2rayUnlockServerPortInput=${isV2rayUnlockServerPortInput:-443}\n\n            echo\n            yellow \" 请填写可解锁流媒体的V2ray或Xray服务器的用户UUID, 例如 4aeaf80d-f89e-46a2-b3dc-bb815eae75ba\"\n            read -p \"请填写用户UUID? 直接回车默认为111, 请输入:\" isV2rayUnlockServerUserIDInput\n            isV2rayUnlockServerUserIDInput=${isV2rayUnlockServerUserIDInput:-111}\n\n\n\n            read -r -d '' v2rayConfigOutboundV2rayServerInput << EOM\n        {\n            \"tag\": \"V2Ray_out\",\n            \"protocol\": \"${isV2rayUnlockOutboundServerProtocolText}\",\n            \"settings\": {\n                \"vnext\": [\n                    {\n                        \"address\": \"${isV2rayUnlockServerDomainInput}\",\n                        \"port\": ${isV2rayUnlockServerPortInput},\n                        \"users\": [\n                            {\n                                \"id\": \"${isV2rayUnlockServerUserIDInput}\",\n                                \"encryption\": \"none\",\n                                ${unlockOutboundServerXTLSFlowText}\n                                \"level\": 0\n                            }\n                        ]\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"${isV2rayUnlockOutboundServerTCPText}\",\n                \"security\": \"${isV2rayUnlockOutboundServerTLSText}\",\n                \"${isV2rayUnlockOutboundServerTLSText}Settings\": {\n                    \"serverName\": \"${isV2rayUnlockServerDomainInput}\"\n                }\n                ${unlockOutboundServerWebSocketSettingText}\n            }\n        },\nEOM\n\n}\n\n\nfunction replaceAirUniverseConfigWARP(){\n\n\n    echo\n    green \" ==================================================\"\n    yellow \" 是否使用 DNS 解锁流媒体 Netflix HBO Disney 等流媒体网站\"\n    green \" 如需解锁请填入 解锁 Netflix 的DNS服务器的IP地址, 例如 8.8.8.8\"\n    read -p \"是否使用DNS解锁流媒体? 直接回车默认不解锁, 解锁请输入DNS服务器的IP地址:\" isV2rayUnlockDNSInput\n    isV2rayUnlockDNSInput=${isV2rayUnlockDNSInput:-n}\n\n    V2rayDNSUnlockText=\"UseIPv4\"\n    v2rayConfigDNSInput=\"\"\n\n    if [[ \"${isV2rayUnlockDNSInput}\" == [Nn] ]]; then\n        V2rayDNSUnlockText=\"UseIPv4\"\n    else\n        V2rayDNSUnlockText=\"UseIP\"\n        read -r -d '' v2rayConfigDNSOutboundSettingsInput << EOM\n            \"settings\": {\n                \"domainStrategy\": \"UseIP\"\n            }\nEOM\n\n        read -r -d '' v2rayConfigDNSInput << EOM\n\n    \"dns\": {\n        \"servers\": [\n            {\n                \"address\": \"${isV2rayUnlockDNSInput}\",\n                \"port\": 53,\n                \"domains\": [\n                    \"geosite:netflix\",\n                    \"geosite:youtube\",\n                    \"geosite:bahamut\",\n                    \"geosite:hulu\",\n                    \"geosite:hbo\",\n                    \"geosite:disney\",\n                    \"geosite:bbc\",\n                    \"geosite:4chan\",\n                    \"geosite:fox\",\n                    \"geosite:abema\",\n                    \"geosite:dmm\",\n                    \"geosite:niconico\",\n                    \"geosite:pixiv\",\n                    \"geosite:bilibili\",\n                    \"geosite:viu\",\n                    \"geosite:pornhub\"\n                ]\n            },\n        \"localhost\"\n        ]\n    },\nEOM\n\n    fi\n\n\n\n\n    echo\n    echo\n    green \" ==================================================\"\n    yellow \" 是否使用 Cloudflare WARP 解锁 流媒体 Netflix 等网站\"\n    green \" 1. 不使用解锁\"\n    green \" 2. 使用 WARP Sock5 代理解锁 推荐使用\"\n    green \" 3. 使用 WARP IPv6 解锁\"\n    green \" 4. 通过转发到可解锁的v2ray或xray服务器解锁\"\n    echo\n    green \" 默认选1 不解锁. 选择2,3解锁需要安装好 Wireguard 与 Cloudflare WARP, 可重新运行本脚本选择第一项安装\".\n    red \" 推荐先安装 Wireguard 与 Cloudflare WARP 后,再安装v2ray或xray. 实际上先安装v2ray或xray, 后安装Wireguard 与 Cloudflare WARP也没问题\"\n    red \" 但如果先安装v2ray或xray, 选了解锁google或其他流媒体, 那么会暂时无法访问google和其他视频网站, 需要继续安装Wireguard 与 Cloudflare WARP解决\"\n    echo\n    read -p \"请输入? 直接回车默认选1 不解锁, 请输入纯数字:\" isV2rayUnlockWarpModeInput\n    isV2rayUnlockWarpModeInput=${isV2rayUnlockWarpModeInput:-1}\n\n    V2rayUnlockVideoSiteRuleText=\"\"\n    V2rayUnlockGoogleRuleText=\"\"\n\n    xrayConfigRuleInput=\"\"\n    V2rayUnlockVideoSiteOutboundTagText=\"\"\n    unlockWARPServerIpInput=\"127.0.0.1\"\n    unlockWARPServerPortInput=\"40000\"\n    configWARPPortFilePath=\"${HOME}/wireguard/warp-port\"\n    configWARPPortLocalServerPort=\"40000\"\n    configWARPPortLocalServerText=\"\"\n\n    if [[ -f \"${configWARPPortFilePath}\" ]]; then\n        configWARPPortLocalServerPort=\"$(cat ${configWARPPortFilePath})\"\n        configWARPPortLocalServerText=\"检测到本机已安装 WARP Sock5, 端口号 ${configWARPPortLocalServerPort}\"\n    fi\n\n    if [[ $isV2rayUnlockWarpModeInput == \"1\" ]]; then\n        echo\n    else\n        if [[ $isV2rayUnlockWarpModeInput == \"2\" ]]; then\n            V2rayUnlockVideoSiteOutboundTagText=\"WARP_out\"\n\n            echo\n            read -p \"请输入WARP Sock5 代理服务器地址? 直接回车默认本机 127.0.0.1, 请输入:\" unlockWARPServerIpInput\n            unlockWARPServerIpInput=${unlockWARPServerIpInput:-127.0.0.1}\n\n            echo\n            yellow \" ${configWARPPortLocalServerText}\"\n            read -p \"请输入WARP Sock5 代理服务器端口号? 直接回车默认${configWARPPortLocalServerPort}, 请输入纯数字:\" unlockWARPServerPortInput\n            unlockWARPServerPortInput=${unlockWARPServerPortInput:-$configWARPPortLocalServerPort}\n\n        elif [[ $isV2rayUnlockWarpModeInput == \"3\" ]]; then\n\n            V2rayUnlockVideoSiteOutboundTagText=\"IPv6_out\"\n\n        elif [[ $isV2rayUnlockWarpModeInput == \"4\" ]]; then\n\n            echo\n            green \" 已选择4 通过转发到可解锁的v2ray或xray服务器解锁\"\n            green \" 可自行修改v2ray或xray配置, 在 outbounds 字段中增加一个tag为 V2Ray_out 的可解锁的v2ray服务器\"\n\n            V2rayUnlockVideoSiteOutboundTagText=\"V2Ray_out\"\n\n            inputUnlockV2rayServerInfo\n        fi\n\n\n        echo\n        echo\n        green \" ==================================================\"\n        yellow \" 请选择要解锁的流媒体网站:\"\n        echo\n        green \" 1. 不解锁\"\n        green \" 2. 解锁 Netflix 限制\"\n        green \" 3. 解锁 Youtube 和 Youtube Premium\"\n        green \" 4. 解锁 Pornhub, 解决视频变成玉米无法观看问题\"\n        green \" 5. 同时解锁 Netflix 和 Pornhub 限制\"\n        green \" 6. 同时解锁 Netflix, Youtube 和 Pornhub 限制\"\n        green \" 7. 同时解锁 Netflix, Hulu, HBO, Disney, Spotify 和 Pornhub 限制\"\n        green \" 8. 同时解锁 Netflix, Hulu, HBO, Disney, Spotify, Youtube 和 Pornhub 限制\"\n        green \" 9. 解锁 全部流媒体 包括 Netflix, Youtube, Hulu, HBO, Disney, BBC, Fox, niconico, dmm, Spotify, Pornhub 等\"\n        echo\n        read -p \"请输入解锁选项? 直接回车默认选1 不解锁, 请输入纯数字:\" isV2rayUnlockVideoSiteInput\n        isV2rayUnlockVideoSiteInput=${isV2rayUnlockVideoSiteInput:-1}\n\n        if [[ $isV2rayUnlockVideoSiteInput == \"2\" ]]; then\n            V2rayUnlockVideoSiteRuleText=\"\\\"geosite:netflix\\\"\"\n\n        elif [[ $isV2rayUnlockVideoSiteInput == \"3\" ]]; then\n            V2rayUnlockVideoSiteRuleText=\"\\\"geosite:youtube\\\"\"\n\n        elif [[ $isV2rayUnlockVideoSiteInput == \"4\" ]]; then\n            V2rayUnlockVideoSiteRuleText=\"\\\"geosite:pornhub\\\"\"\n\n        elif [[ $isV2rayUnlockVideoSiteInput == \"5\" ]]; then\n            V2rayUnlockVideoSiteRuleText=\"\\\"geosite:netflix\\\", \\\"geosite:pornhub\\\"\"\n\n        elif [[ $isV2rayUnlockVideoSiteInput == \"6\" ]]; then\n            V2rayUnlockVideoSiteRuleText=\"\\\"geosite:netflix\\\", \\\"geosite:youtube\\\", \\\"geosite:pornhub\\\"\"\n\n        elif [[ $isV2rayUnlockVideoSiteInput == \"7\" ]]; then\n            V2rayUnlockVideoSiteRuleText=\"\\\"geosite:netflix\\\", \\\"geosite:disney\\\", \\\"geosite:spotify\\\", \\\"geosite:hulu\\\", \\\"geosite:hbo\\\", \\\"geosite:pornhub\\\"\"\n\n        elif [[ $isV2rayUnlockVideoSiteInput == \"8\" ]]; then\n            V2rayUnlockVideoSiteRuleText=\"\\\"geosite:netflix\\\", \\\"geosite:disney\\\", \\\"geosite:spotify\\\", \\\"geosite:youtube\\\", \\\"geosite:hulu\\\", \\\"geosite:hbo\\\", \\\"geosite:pornhub\\\"\"\n\n        elif [[ $isV2rayUnlockVideoSiteInput == \"9\" ]]; then\n            V2rayUnlockVideoSiteRuleText=\"\\\"geosite:netflix\\\", \\\"geosite:disney\\\", \\\"geosite:spotify\\\", \\\"geosite:youtube\\\", \\\"geosite:bahamut\\\", \\\"geosite:hulu\\\", \\\"geosite:hbo\\\", \\\"geosite:bbc\\\", \\\"geosite:4chan\\\", \\\"geosite:fox\\\", \\\"geosite:abema\\\", \\\"geosite:dmm\\\", \\\"geosite:niconico\\\", \\\"geosite:pixiv\\\", \\\"geosite:viu\\\", \\\"geosite:pornhub\\\"\"\n\n        fi\n\n    fi\n\n\n\n\n#     echo\n#     echo\n#     yellow \" 某老姨子提供了可以解锁Netflix新加坡区的V2ray服务器, 已失效\"\n#     read -p \"是否通过老姨子解锁Netflix新加坡区? 直接回车默认不解锁, 请输入[y/N]:\" isV2rayUnlockGoNetflixInput\n#     isV2rayUnlockGoNetflixInput=${isV2rayUnlockGoNetflixInput:-n}\n\n#     v2rayConfigRouteGoNetflixInput=\"\"\n#     v2rayConfigOutboundV2rayGoNetflixServerInput=\"\"\n#     if [[ \"${isV2rayUnlockGoNetflixInput}\" == [Nn] ]]; then\n#         echo\n#     else\n#         removeString=\"\\\"geosite:netflix\\\", \"\n#         V2rayUnlockVideoSiteRuleText=${V2rayUnlockVideoSiteRuleText#\"$removeString\"}\n#         removeString2=\"\\\"geosite:disney\\\", \"\n#         V2rayUnlockVideoSiteRuleText=${V2rayUnlockVideoSiteRuleText#\"$removeString2\"}\n#         read -r -d '' v2rayConfigRouteGoNetflixInput << EOM\n#             {\n#                 \"type\": \"field\",\n#                 \"outboundTag\": \"GoNetflix\",\n#                 \"domain\": [ \"geosite:netflix\", \"geosite:disney\" ]\n#             },\n# EOM\n\n#         read -r -d '' v2rayConfigOutboundV2rayGoNetflixServerInput << EOM\n#         {\n#             \"tag\": \"GoNetflix\",\n#             \"protocol\": \"vmess\",\n#             \"streamSettings\": {\n#                 \"network\": \"ws\",\n#                 \"security\": \"tls\",\n#                 \"tlsSettings\": {\n#                     \"allowInsecure\": false\n#                 },\n#                 \"wsSettings\": {\n#                     \"path\": \"ws\"\n#                 }\n#             },\n#             \"mux\": {\n#                 \"enabled\": true,\n#                 \"concurrency\": 8\n#             },\n#             \"settings\": {\n#                 \"vnext\": [{\n#                     \"address\": \"free-sg-01.unblocknetflix.cf\",\n#                     \"port\": 443,\n#                     \"users\": [\n#                         { \"id\": \"402d7490-6d4b-42d4-80ed-e681b0e6f1f9\", \"security\": \"auto\", \"alterId\": 0 }\n#                     ]\n#                 }]\n#             }\n#         },\n# EOM\n#     fi\n\n\n\n    echo\n    echo\n    green \" ==================================================\"\n    yellow \" 请选择 避免弹出 Google reCAPTCHA 人机验证的方式\"\n    echo\n    green \" 1. 不解锁\"\n    green \" 2. 使用 WARP Sock5 代理解锁\"\n    green \" 3. 使用 WARP IPv6 解锁 推荐使用\"\n    green \" 4. 通过转发到可解锁的v2ray或xray服务器解锁\"\n    echo\n    read -p \"请输入解锁选项? 直接回车默认选1 不解锁, 请输入纯数字:\" isV2rayUnlockGoogleInput\n    isV2rayUnlockGoogleInput=${isV2rayUnlockGoogleInput:-1}\n\n    if [[ $isV2rayUnlockWarpModeInput == $isV2rayUnlockGoogleInput ]]; then\n        V2rayUnlockVideoSiteRuleText+=\", \\\"geosite:google\\\" \"\n        V2rayUnlockVideoSiteRuleTextFirstChar=\"${V2rayUnlockVideoSiteRuleText:0:1}\"\n\n        if [[ $V2rayUnlockVideoSiteRuleTextFirstChar == \",\" ]]; then\n            V2rayUnlockVideoSiteRuleText=\"${V2rayUnlockVideoSiteRuleText:1}\"\n        fi\n\n        # 修复一个都不解锁的bug 都选1的bug\n        if [[ -z \"${V2rayUnlockVideoSiteOutboundTagText}\" ]]; then\n            V2rayUnlockVideoSiteOutboundTagText=\"IPv6_out\"\n            V2rayUnlockVideoSiteRuleText=\"\\\"test.com\\\"\"\n        fi\n\n        read -r -d '' xrayConfigRuleInput << EOM\n            {\n                \"type\": \"field\",\n                \"outboundTag\": \"${V2rayUnlockVideoSiteOutboundTagText}\",\n                \"domain\": [${V2rayUnlockVideoSiteRuleText}]\n            },\nEOM\n\n    else\n        V2rayUnlockGoogleRuleText=\"\\\"geosite:google\\\"\"\n\n        if [[ $isV2rayUnlockGoogleInput == \"2\" ]]; then\n            V2rayUnlockGoogleOutboundTagText=\"WARP_out\"\n            echo\n            read -p \"请输入WARP Sock5 代理服务器地址? 直接回车默认本机 127.0.0.1, 请输入:\" unlockWARPServerIpInput\n            unlockWARPServerIpInput=${unlockWARPServerIpInput:-127.0.0.1}\n\n            echo\n            yellow \" ${configWARPPortLocalServerText}\"\n            read -p \"请输入WARP Sock5 代理服务器端口号? 直接回车默认${configWARPPortLocalServerPort}, 请输入纯数字:\" unlockWARPServerPortInput\n            unlockWARPServerPortInput=${unlockWARPServerPortInput:-$configWARPPortLocalServerPort}\n\n        elif [[ $isV2rayUnlockGoogleInput == \"3\" ]]; then\n            V2rayUnlockGoogleOutboundTagText=\"IPv6_out\"\n\n        elif [[ $isV2rayUnlockGoogleInput == \"4\" ]]; then\n            V2rayUnlockGoogleOutboundTagText=\"V2Ray_out\"\n            inputUnlockV2rayServerInfo\n        else\n            V2rayUnlockGoogleOutboundTagText=\"IPv4_out\"\n        fi\n\n        # 修复一个都不解锁的bug 都选1的bug\n        if [[ -z \"${V2rayUnlockVideoSiteOutboundTagText}\" ]]; then\n            V2rayUnlockVideoSiteOutboundTagText=\"IPv6_out\"\n            V2rayUnlockVideoSiteRuleText=\"\\\"test.com\\\"\"\n        fi\n\n        read -r -d '' xrayConfigRuleInput << EOM\n            {\n                \"type\": \"field\",\n                \"outboundTag\": \"${V2rayUnlockGoogleOutboundTagText}\",\n                \"domain\": [${V2rayUnlockGoogleRuleText}]\n            },\n            {\n                \"type\": \"field\",\n                \"outboundTag\": \"${V2rayUnlockVideoSiteOutboundTagText}\",\n                \"domain\": [${V2rayUnlockVideoSiteRuleText}]\n            },\nEOM\n    fi\n\n\n    read -r -d '' xrayConfigProxyInput << EOM\n\n    ${v2rayConfigDNSInput}\n    \"outbounds\": [\n        {\n            \"tag\": \"IPv4_out\",\n            \"protocol\": \"freedom\",\n            \"settings\": {\n                \"domainStrategy\": \"${V2rayDNSUnlockText}\"\n            }\n        },\n        {\n            \"tag\": \"blocked_out\",\n            \"protocol\": \"blackhole\",\n            \"settings\": {\n                \"response\": {\n                    \"type\": \"http\"\n                }\n            }\n        },\n        ${v2rayConfigOutboundV2rayServerInput}\n        ${v2rayConfigOutboundV2rayGoNetflixServerInput}\n        {\n            \"tag\":\"IPv6_out\",\n            \"protocol\": \"freedom\",\n            \"settings\": {\n                \"domainStrategy\": \"UseIPv6\"\n            }\n        },\n        {\n            \"tag\": \"WARP_out\",\n            \"protocol\": \"socks\",\n            \"settings\": {\n                \"servers\": [\n                    {\n                        \"address\": \"${unlockWARPServerIpInput}\",\n                        \"port\": ${unlockWARPServerPortInput}\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"tcp\"\n            }\n        }\n    ],\n    \"routing\": {\n        \"domainStrategy\": \"IPOnDemand\",\n        \"rules\": [\n            {\n                \"inboundTag\": [\n                    \"api\"\n                ],\n                \"outboundTag\": \"api\",\n                \"type\": \"field\"\n            },\n            ${xrayConfigRuleInput}\n            ${v2rayConfigRouteGoNetflixInput}\n            {\n                \"type\": \"field\",\n                \"domain\": [\n                    \"geosite:cn\"\n                ],\n                \"outboundTag\": \"IPv6_out\"\n            },\n            {\n                \"type\": \"field\",\n                \"ip\": [\n                    \"geoip:cn\"\n                ],\n                \"outboundTag\": \"IPv6_out\"\n            },\n            {\n                \"type\": \"field\",\n                \"protocol\": [\n                    \"bittorrent\"\n                ],\n                \"outboundTag\": \"blocked_out\"\n            },\n            {\n                \"type\": \"field\",\n                \"ip\": [\n                    \"127.0.0.1/32\",\n                    \"10.0.0.0/8\",\n                    \"fc00::/7\",\n                    \"fe80::/10\",\n                    \"172.16.0.0/12\"\n                ],\n                \"outboundTag\": \"blocked_out\"\n            }\n        ]\n    }\n}\nEOM\n\n\n\n    if [[ \"${isV2rayUnlockWarpModeInput}\" == \"1\" && \"${isV2rayUnlockGoogleInput}\" == \"1\"  && \"${isV2rayUnlockGoNetflixInput}\" == [Nn]  ]]; then\n        if [[ \"${isV2rayUnlockDNSInput}\" == [Nn] ]]; then\n            echo\n        else\n            TEST=\"${v2rayConfigDNSInput//\\\\/\\\\\\\\}\"\n            TEST=\"${TEST//\\//\\\\/}\"\n            TEST=\"${TEST//&/\\\\&}\"\n            TEST=\"${TEST//$'\\n'/\\\\n}\"\n\n            sed -i \"/outbounds/i \\    ${TEST}\" ${configAirUniverseXrayConfigFilePath}\n\n            TEST2=\"${v2rayConfigDNSOutboundSettingsInput//\\\\/\\\\\\\\}\"\n            TEST2=\"${TEST2//\\//\\\\/}\"\n            TEST2=\"${TEST2//&/\\\\&}\"\n            TEST2=\"${TEST2//$'\\n'/\\\\n}\"\n\n            # https://stackoverflow.com/questions/4396974/sed-or-awk-delete-n-lines-following-a-pattern\n\n            sed -i -e '/freedom/{n;d}' ${configAirUniverseXrayConfigFilePath}\n            sed -i \"/freedom/a \\      ${TEST2}\" ${configAirUniverseXrayConfigFilePath}\n\n        fi\n    else\n\n        # https://stackoverflow.com/questions/31091332/how-to-use-sed-to-delete-multiple-lines-when-the-pattern-is-matched-and-stop-unt/31091398\n        sed -i '/outbounds/,/^&/d' ${configAirUniverseXrayConfigFilePath}\n        cat >> ${configAirUniverseXrayConfigFilePath} <<-EOF\n\n  ${xrayConfigProxyInput}\n\nEOF\n    fi\n\n\n    chmod 666 ${configSSLCertPathV2board}/*\n    # chmod ugoa+rw ${configSSLCertPathV2board}/${configSSLCertKeyFilename}\n\n    # -z 为空\n    if [[ -z $1 ]]; then\n        echo\n        green \" ==================================================\"\n        green \" 重启 xray 和 air-universe 服务 \"\n        systemctl restart xray.service\n        airu restart\n        green \" ==================================================\"\n        echo\n    fi\n\n}\n\n\n\n\n\n\n\n\n\n\nfunction updateGeoIp(){\n    wget -O /usr/local/share/xray/geoip.dat https://github.com/v2fly/geoip/releases/latest/download/geoip.dat\n    wget -O /usr/local/share/xray/geosite.dat https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat\n\n    systemctl restart xray.service\n    airu restart\n\n}\n\nfunction manageAirUniverse(){\n    echo -e \"\"\n    green \" ==================================================\"\n    echo \"    Air-Universe 管理脚本使用方法: \"\n    echo\n    echo \"airu              - 显示管理菜单 (功能更多)\"\n    echo \"airu start        - 启动 Air-Universe\"\n    echo \"airu stop         - 停止 Air-Universe\"\n    echo \"airu restart      - 重启 Air-Universe\"\n    echo \"airu status       - 查看 Air-Universe 状态\"\n    echo \"airu enable       - 设置 Air-Universe 开机自启\"\n    echo \"airu disable      - 取消 Air-Universe 开机自启\"\n    echo \"airu log          - 查看 Air-Universe 日志\"\n    echo \"airu update x.x.x - 更新 Air-Universe 指定版本\"\n    echo \"airu install      - 安装 Air-Universe\"\n    echo \"airu uninstall    - 卸载 Air-Universe\"\n    echo \"airu version      - 查看 Air-Universe 版本\"\n    echo \"------------------------------------------\"\n    green \" Air-Universe 配置文件 ${configAirUniverseConfigFilePath} \"\n    green \" Xray 配置文件 ${configAirUniverseXrayConfigFilePath}\"\n    green \" ==================================================\"\n    echo\n}\n\n\n\nfunction removeAirUniverse(){\n    rm -rf /usr/local/etc/xray\n    /root/airu_install.sh uninstall\n    rm -f /usr/bin/airu\n    rm -f /usr/local/bin/au\n    rm -f /usr/local/bin/xray\n\n    rm -rf ${configSSLCertPathV2board}\n\n    crontab -r\n    green \" crontab 定时任务 已清除!\"\n    echo\n\n    removeNginx\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnetflixMitmToolDownloadFolder=\"${HOME}/netflix_mitm_tool\"\nnetflixMitmToolDownloadFilename=\"mitm-vip-unlocker-x86_64-linux-musl.zip\"\nnetflixMitmToolUrl=\"https://github.com/jinwyp/one_click_script/raw/master/download/mitm-vip-unlocker-x86_64-linux-musl.zip\"\nconfigNetflixMitmPort=\"34567\"\nconfigNetflixMitmToken=\"-t token123\"\n\nfunction installShareNetflixAccount(){\n    echo\n    green \" ================================================== \"\n    yellow \" 准备安装Netflix账号共享 服务器端程序\"\n    yellow \" 提供共享服务需要有一个Netflix账号 \"\n    yellow \" 所安装的服务器 需要已原生解锁Netflix\"\n    red \" 请务必用于私人用途 不要公开分享. Netflix也限制了同时在线人数\"\n    green \" ================================================== \"\n\n    promptContinueOpeartion\n\n    echo\n    read -p \"是否生成随机的 端口号? 直接回车默认 34567 不生成随机端口号, 请输入[y/N]:\" isNetflixMimePortInput\n    isNetflixMimePortInput=${isNetflixMimePortInput:-n}\n\n    if [[ $isNetflixMimePortInput == [Nn] ]]; then\n        echo\n    else\n        configNetflixMitmPort=\"$(($RANDOM + 10000))\"\n    fi\n\n    echo\n    read -p \"是否生成随机的管理员token密码? 直接回车默认 token123 不生成随机token, 请输入[y/N]:\" isNetflixMimeTokenInput\n    isNetflixMitmTokenInput=${isNetflixMitmTokenInput:-n}\n\n    if [[ $isNetflixMitmTokenInput == [Nn] ]]; then\n        echo\n    else\n        configNetflixMitmToken=\"\"\n    fi\n\n\n    mkdir -p ${netflixMitmToolDownloadFolder}\n    cd ${netflixMitmToolDownloadFolder}\n\n    wget -P ${netflixMitmToolDownloadFolder} ${netflixMitmToolUrl}\n    unzip -d ${netflixMitmToolDownloadFolder} ${netflixMitmToolDownloadFolder}/${netflixMitmToolDownloadFilename}\n    chmod +x ./mitm-vip-unlocker\n    ./mitm-vip-unlocker genca\n\n\n    cat > ${osSystemMdPath}netflix_mitm.service <<-EOF\n[Unit]\nDescription=mitm-vip-unlocker\nAfter=network.target\n\n[Service]\nType=simple\nWorkingDirectory=${netflixMitmToolDownloadFolder}\nPIDFile=${netflixMitmToolDownloadFolder}/mitm-vip-unlocker.pid\nExecStart=${netflixMitmToolDownloadFolder}/mitm-vip-unlocker run -b 0.0.0.0:${configNetflixMitmPort} ${configNetflixMitmToken}\nExecReload=/bin/kill -HUP \\$MAINPID\nRestart=on-failure\nRestartSec=10\nRestartPreventExitStatus=23\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n    ${sudoCmd} chmod +x ${osSystemMdPath}netflix_mitm.service\n    ${sudoCmd} systemctl daemon-reload\n    ${sudoCmd} systemctl start netflix_mitm.service\n    #${sudoCmd} systemctl enable netflix_mitm.service\n\ncat > ${netflixMitmToolDownloadFolder}/netflix_mitm_readme <<-EOF\n用于给浏览器插件使用的管理员admin 的 token 为: ${configNetflixMitmToken}\n\n服务器运行的端口号为: ${configNetflixMitmPort}\n\n\n后续操作具体步骤如下:\n\n1. 证书文件已生成, 默认在目录的 ${netflixMitmToolDownloadFolder}/ca/cert.crt 文件夹下, 请把cert.crt下载到本地\n2. 在你自己的客户端机器上,安装好证书cert.crt 然后开启 http 代理, 代理服务器地址为:你的ip:${configNetflixMitmPort}\n\nchrome 可以用 SwitchyOmega 插件作为 http代理 https://github.com/FelisCatus/SwitchyOmega\n\n新建一个情景例如名字叫奈飞代理 输入代理http服务器 你的ip 端口 ${configNetflixMitmPort}\n\n然后在自动切换 菜单里面 添加奈飞的几个域名 选择走奈飞代理这个情景 就可以了\n\nnetflix.com\nnetflix.net\nnflxext.com\nnflximg.net\nnflxso.net\nnflxvideo.net\n\n\n3. 第一次使用需要上传的已登录Netflix账号的 cookie, 具体方法如下\n使用Netflix账号登录Netflix官网. 然后安装 EditThisCookie 这个浏览器插件. 添加一个key为admin, value 值为 ${configNetflixMitmToken}\n\n一切已经完成, 其他设备就可以安装证书cert.crt, 使用http代理填入你的ip:${configNetflixMitmPort}, 就可以不需要账号看奈菲了\n\n\nEOF\n\n\tgreen \" ================================================== \"\n\tgreen \" Netflix账号共享 服务器端程序 安装成功 !\"\n    green \" 重启命令: systemctl restart netflix_mitm.service\"\n\tgreen \" 查看运行状态命令:  systemctl status netflix_mitm.service \"\n\tgreen \" 查看日志命令: journalctl -n 40 -u netflix_mitm.service \"\n    echo\n\tgreen \" 服务器运行的端口号为: ${configNetflixMitmPort}\"\n\tgreen \" 用于给浏览器插件使用的管理员admin的token为: ${configNetflixMitmToken}\"\n\tgreen \" 使用配置信息也可以查看 ${netflixMitmToolDownloadFolder}/netflix_mitm_readme \"\n    echo\n    green \" 后续操作具体步骤如下:\"\n    green \" 1. 证书文件已生成, 默认在当前目录的ca文件夹下, 请把cert.crt下载到本地\"\n    green \" 2. 在你自己的客户端机器上,安装好证书cert.crt 然后开启 http 代理, 代理服务器地址为:你的ip:${configNetflixMitmPort} \"\n    green \" chrome 可以用 SwitchyOmega 插件作为 http代理 https://github.com/FelisCatus/SwitchyOmega \"\n    echo\n    green \" 3. 第一次使用需要上传的已登录Netflix账号的 cookie, 具体方法如下\"\n    green \" 使用Netflix账号登录Netflix官网. 然后安装 EditThisCookie 这个浏览器插件. 添加一个key为admin, value 值为 ${configNetflixMitmToken} \"\n    green \" EditThisCookie 浏览器插件 https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg\"\n    echo\n    green \" 一切已经完成, 其他设备就可以安装证书cert.crt, 使用http代理填入你的ip:${configNetflixMitmPort}, 就可以不需要账号看奈菲了\"\n    green \" ================================================== \"\n\n}\n\n\n\nfunction removeShareNetflixAccount(){\n    if [[ -f \"${netflixMitmToolDownloadFolder}/mitm-vip-unlocker\" ]]; then\n        echo\n        green \" ================================================== \"\n        red \" 准备卸载已安装的 Netflix账号共享服务器端程序 mitm-vip-unlocker\"\n        green \" ================================================== \"\n        echo\n\n        ${sudoCmd} systemctl stop netflix_mitm.service\n        ${sudoCmd} systemctl disable netflix_mitm.service\n        ${sudoCmd} systemctl daemon-reload\n\n        rm -rf ${netflixMitmToolDownloadFolder}\n        rm -f ${osSystemMdPath}netflix_mitm.service\n\n        echo\n        green \" ================================================== \"\n        green \"  Netflix账号共享服务器端程序 mitm-vip-unlocker 卸载完毕 !\"\n        green \" ================================================== \"\n\n    else\n        red \" 系统没有安装 Netflix账号共享服务器端程序 mitm-vip-unlocker, 退出卸载\"\n    fi\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconfigAuroraDockerPath=\"${HOME}/aurora/docker\"\nconfigAuroraDockerDataPath=\"${HOME}/aurora/docker/data\"\n\nconfigAurora_PORT=\"5010\"\nconfigChatGPTNextWeb_PORT=\"3002\"\nconfigChatGPT_Password=\"123456gpt\"\nconfigAPIAUTHORIZATION=\"t123456\"\n\nconfigChatgptNextweb_Domain=\"chatgptnextweb.example.com\"\nconfigGPT_API_Domain=\"chatgptapi.example.com\"\n\nfunction installAURORA(){\n    echo\n    green \" ================================================== \"\n    yellow \" Prepare to install Aurora\"\n    yellow \" Aurora is a self-hosted free GPT\"\n    green \" ================================================== \"\n\n    if [[ -d \"${configAuroraDockerPath}\" ]]; then\n        showHeaderRed \" Aurora already installed !\"\n        exit\n    fi\n    showHeaderGreen \"Start to install Aurora. A self-hosted free GPT\"\n\n    ${sudoCmd} mkdir -p \"${configAuroraDockerDataPath}\"\n    ${sudoCmd} chmod -R 774 \"${configAuroraDockerPath}\"\n    cd \"${configAuroraDockerPath}\" || exit\n\n    echo\n    read -r -p \"Pls input Server PORT? 直接回车默认 5010 , 请输入纯数字:\" configAurora_PORT\n    configAurora_PORT=${configAurora_PORT:-5010}\n\n    echo\n    read -r -p \"Pls input ChatGPTNextWeb PORT? 直接回车默认 3002, 请输入纯数字:\" configChatGPTNextWeb_PORT\n    configChatGPTNextWeb_PORT=${configChatGPTNextWeb_PORT:-3002}\n\n    echo\n    read -r -p \"Pls input chat2api AUTHORIZATION ? 直接回车默认 t123456 , 请输入自定义授权码:\" configAPIAUTHORIZATION\n    configAPIAUTHORIZATION=${configAPIAUTHORIZATION:-t123456}\n\n    echo\n    read -r -p \"Pls input Domain? Default is chatgptnextweb.example.com:\" configChatgptNextweb_Domain\n    configChatgptNextweb_Domain=${configChatgptNextweb_Domain:-chatgptnextweb.example.com}\n\n    echo\n    read -r -p \"Pls input ChatGPT API Domain? Default is chatgptapi.example.com:\" configGPT_API_Domain\n    configGPT_API_Domain=${configGPT_API_Domain:-chatgptapi.example.com}\n\n\n    cat > \"${configAuroraDockerPath}/docker-compose.yml\" <<-EOF\n\nversion: '3'\n\nservices:\n    chat2api:\n        image: lanqian528/chat2api:latest\n        container_name: chat2api_app1\n        restart: unless-stopped\n        ports:\n            - \"${configAurora_PORT}:5005\"\n        volumes:\n            - \"${configAuroraDockerDataPath}:/app/data\" # 挂载一些需要保存的数据\n        environment:\n            - TZ=Asia/Shanghai # 设置时区\n            - \"AUTHORIZATION=${configAPIAUTHORIZATION}\" # 设置访问密码\n            - ARK0SE_TOKEN_URL=http://ark0se:5006/token # 已内置，不要改\n        depends_on:\n            - ark0se\n\n    ark0se:\n        image: lanqian528/funcaptcha_solver:latest\n        container_name: funcaptcha_solver\n        restart: unless-stopped\n        ports:\n            - \"5006:5006\"\n        environment:\n            - TZ=Asia/Shanghai # 设置时区\n\n\n    chatgptnextweb:\n        image: yidadaa/chatgpt-next-web\n        container_name: chatgptnextweb1\n        ports:\n            - \"${configChatGPTNextWeb_PORT}:3000\"\n        environment:\n            OPENAI_API_KEY: \"${configAPIAUTHORIZATION}\"\n            CODE: \"${configChatGPT_Password}\" # 如果你想要设置页面的访问密码，请修改这里\n            BASE_URL: \"http://chat2api:5005\"\n            CUSTOM_MODELS: \"-all,+gpt-4o-mini\"\n        depends_on:\n            - chat2api\n\nEOF\n\n    green \" ================================================== \"\n    echo\n    green \"是否安装 Nginx web服务器, 安装Nginx可以提高安全性并提供更多功能\"\n    green \"如要安装 Nginx 需要提供域名, 并设置好域名DNS已解析到本机IP\"\n    echo\n    read -r -p \"是否安装 Nginx web服务器? 直接回车默认安装, 请输入[Y/n]:\" isNginxInstallInput\n    isNginxInstallInput=${isNginxInstallInput:-Y}\n\n\n    if [[ \"${isNginxInstallInput}\" == [Yy] ]]; then\n        isInstallNginx=\"true\"\n        configSSLCertPath=\"${configSSLCertPath}/freegpt35\"\n        getHTTPSCertificateStep1\n        configInstallNginxMode=\"freegpt35\"\n        installWebServerNginx\n\n        ${sudoCmd} systemctl restart nginx.service\n    fi\n\n    echo\n    docker pull lanqian528/chat2api:latest\n    echo\n    docker pull yidadaa/chatgpt-next-web\n\n    # docker pull ghcr.io/aurora-develop/aurora:latest\n    # docker pull missuo/freegpt35:latest\n\n\n    echo\n    docker-compose up -d\n    echo\n\n    showHeaderGreen \"Aurora Server install success !  \" \\\n    \"Visit: ${configChatgptNextweb_Domain}:${configAurora_PORT}\" \\\n    \"Visit: ${configSSLDomain}\" \\\n    \"Password: ${configChatGPT_Password}\" \\\n    \"Aurora DockerCompose Config : ${configAuroraDockerPath}/docker-compose.yml\" \\\n    \"Aurora Logs: docker-compose logs -f -t \" \\\n    \"Run following command to test: \"\n\n    echo \"curl --location 'http://127.0.0.1:8082/v1/chat/completions' --header 'Content-Type: application/json' --data '{\\\"model\\\": \\\"gpt-3.5-turbo\\\", \\\"messages\\\": [{\\\"role\\\": \\\"user\\\", \\\"content\\\": \\\"Say this is a test!\\\"}], \\\"stream\\\": true}'\"\n    echo\n    echo \"curl --location 'http://127.0.0.1:3042/v1/chat/completions' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${configChatGPT_Password}' --data '{\\\"model\\\": \\\"gpt-3.5-turbo\\\", \\\"messages\\\": [{\\\"role\\\": \\\"user\\\", \\\"content\\\": \\\"Say this is a test!\\\"}], \\\"stream\\\": true}'\"\n\n}\n\nfunction removeAURORA(){\n\n    echo\n    read -r -p \"Are you sure to uninstall Aurora? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveAuroraInput\n    isRemoveAuroraInput=${isRemoveAuroraInput:-Y}\n\n    if [[ \"${isRemoveAuroraInput}\" == [Yy] ]]; then\n        if [[ -d \"${configAuroraDockerPath}\" ]]; then\n            echo\n            showHeaderGreen \"Prepare to remove Aurora\"\n\n            cd ${configAuroraDockerPath} || exit\n            docker-compose down\n\n            rm -rf \"${configAuroraDockerPath}\"\n\n            if [[ -f \"${nginxConfigSiteConfPath}/aurora_site.conf\" ]]; then\n                rm -f \"${nginxConfigSiteConfPath}/aurora_site.conf\"\n                systemctl restart nginx.service\n            fi\n\n            showHeaderGreen \"Aurora removed success !\"\n\n        else\n            showHeaderRed \"系统没有安装 Aurora Server, 退出卸载\"\n        fi\n    fi\n    removeNginx\n}\n\n\n\n\n\n\n\n\n\nopenVPNSocksFolder=\"/root/openvpn_docker\"\nfunction runOpenVPNSocks(){\n    mkdir -p ${openVPNSocksFolder}\n\n    green \"docker run -it --rm --device=/dev/net/tun --cap-add=NET_ADMIN  --name openvpn-client  --volume ${openVPNSocksFolder}/:/etc/openvpn/:ro -p 10808:1080  kizzx2/openvpn-client-socks\"\n    docker run -it --rm --device=/dev/net/tun --cap-add=NET_ADMIN  --name openvpn-client  --volume ${openVPNSocksFolder}/:/etc/openvpn/:ro -p 10808:1080  kizzx2/openvpn-client-socks\n\n    curl --proxy socks5h://localhost:10808 ipinfo.io\n    curl --proxy socks5h://localhost:10808 http://ip111.cn/\n}\n\n\n\n\n\n\n\nfunction startMenuOther(){\n    clear\n\n    if [[ ${configLanguage} == \"cn\" ]] ; then\n\n        green \" ==================================================\"\n        echo\n        green \" 11. 安装 Air-Universe 服务器端\"\n        red \" 12. 卸载 Air-Universe\"\n        green \" 13. 停止, 重启, 查看日志等, 管理 Air-Universe 服务器端\"\n        green \" 14. 配合 WARP (Wireguard) 使用IPV6 解锁 google人机验证和 Netflix等流媒体网站\"\n        green \" 15. 升级或降级 Air-Universe 到 1.0.0 or 0.9.2, 降级 Xray 到 1.5或1.4\"\n        green \" 16. 重新申请证书 并修改 Air-Universe 配置文件 ${configAirUniverseConfigFilePath}\"\n        green \" 17. 更新 geoip.dat 和 geosite.dat 文件\"\n        echo\n        green \" 21. 安装 XrayR 服务器端\"\n        green \" 22. 停止, 重启, 查看日志等, 管理 XrayR 服务器端\"\n        green \" 23. 编辑 XrayR 配置文件 ${configXrayRConfigFilePath}\"\n        green \" 24. 通过向导修改 XrayR 配置文件 ${configXrayRConfigFilePath}\"\n        echo\n        green \" 41. 安装 Soga 服务器端\"\n        green \" 42. 停止, 重启, 查看日志等, 管理 Soga 服务器端\"\n        green \" 43. 编辑 Soga 配置文件 ${configSogaConfigFilePath}\"\n        echo\n        green \" 61. 安装共享Netflix账号服务器端, 可以不用奈菲账号直接看奈菲\"\n        red \" 62. 卸载共享Netflix账号服务器端\"\n        echo\n        green \" 71. 工具脚本合集 by BlueSkyXN \"\n        green \" 72. 工具脚本合集 by jcnf \"\n        echo\n        green \" 9. 返回上级菜单\"\n        green \" 0. 退出脚本\"\n\n    else\n        green \" ==================================================\"\n        echo\n        green \" 11. Install Air-Universe server side \"\n        red \" 12. Remove Air-Universe\"\n        green \" 13. Stop, restart, show log, manage Air-Universe server side \"\n        green \" 14. Using WARP (Wireguard) and IPV6 Unlock Netflix geo restriction and avoid Google reCAPTCHA\"\n        green \" 15. Upgrade or downgrade Air-Universe to 1.0.0 or 0.9.2, downgrade Xray to 1.5 / 1.4\"\n        green \" 16. Redo to get a free SSL certificate for domain name and modify Air-Universe config file ${configAirUniverseConfigFilePath}\"\n        green \" 17. Update geoip.dat and geosite.dat \"\n        echo\n        green \" 21. Install XrayR server side \"\n        green \" 22. Stop, restart, show log, manage XrayR server side \"\n        green \" 23. Using VI open XrayR config file ${configXrayRConfigFilePath}\"\n        green \" 24. Step by Step to modify XrayR config file ${configXrayRConfigFilePath}\"\n        echo\n        green \" 41. Install Soga server side \"\n        green \" 42. Stop, restart, show log, manage Soga server side \"\n        green \" 43. Using VI open Soga config file ${configSogaConfigFilePath}\"\n        echo\n        green \" 61. Install Netflix account share service server, Play Netflix without Netflix account\"\n        red \" 62. Remove Netflix account share service server\"\n        echo\n        green \" 71. toolkit by BlueSkyXN \"\n        green \" 72. toolkit by jcnf \"\n        echo\n        green \" 9. Back to main menu\"\n        green \" 0. exit\"\n\n    fi\n\n\n    echo\n    read -r -p \"Please input number:\" menuNumberInput\n    case \"$menuNumberInput\" in\n        11 )\n            setLinuxDateZone\n            installAirUniverse\n        ;;\n        12 )\n            removeAirUniverse\n        ;;\n        13 )\n            manageAirUniverse\n        ;;\n        14 )\n            replaceAirUniverseConfigWARP\n        ;;\n        15 )\n            downgradeXray\n        ;;\n        16 )\n            installAirUniverse \"ssl\"\n        ;;\n        17 )\n            updateGeoIp\n        ;;\n        21 )\n            setLinuxDateZone\n            installXrayR\n        ;;\n        22 )\n            manageXrayR\n        ;;\n        23 )\n            editXrayRConfig\n        ;;\n        24 )\n            replaceXrayRConfig\n        ;;\n        41 )\n            setLinuxDateZone\n            installSoga\n        ;;\n        42 )\n            manageSoga\n        ;;\n        43 )\n            editSogaConfig\n        ;;\n        61 )\n            installShareNetflixAccount\n        ;;\n        62 )\n            removeShareNetflixAccount\n        ;;\n        71 )\n            toolboxSkybox\n        ;;\n        72 )\n            toolboxJcnf\n        ;;\n        9)\n            start_menu\n        ;;\n        0 )\n            exit 1\n        ;;\n        * )\n            clear\n            red \"请输入正确数字 !\"\n            sleep 2s\n            startMenuOther\n        ;;\n    esac\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction start_menu(){\n    clear\n\n    if [[ $1 == \"first\" ]] ; then\n        getLinuxOSRelease\n        installSoftDownload\n    fi\n\n    if [[ ${configLanguage} == \"cn\" ]] ; then\n    green \" ==================================================\"\n    green \" Linux 常用工具 一键安装脚本 | 2024-9-6 | 系统支持：centos7+ / debian9+ / ubuntu16.04+\"\n    green \" ==================================================\"\n    green \" 1. 安装 linux 内核 BBR Plus, 安装 WireGuard, 用于解锁 Netflix 限制 和避免弹出 Google reCAPTCHA 人机验证\"\n    echo\n    green \" 3. 用 VI 编辑 authorized_keys 文件 填入公钥, 用于SSH免密码登录 增加安全性\"\n    green \" 4. 修改 SSH 登陆端口号\"\n    green \" 5. 设置时区为北京时间\"\n    green \" 6. 用VI 编辑 /etc/hosts\"\n    echo\n    green \" 11. 安装 Vim Nano Micro 编辑器\"\n    green \" 12. 安装 Nodejs 与 PM2\"\n    green \" 13. 安装 Docker 与 Docker Compose\"\n    red \" 14. 卸载 Docker 与 Docker Compose\"\n    green \" 15. 设置 Docker Hub 镜像 \"\n    green \" 16. 安装 Portainer \"\n    green \" 17. 安装 Ansible 运维工具 \"\n    green \" 18. 安装 Ansible UI semaphore 运维工具 \"\n\n    echo\n    green \" 21. 安装 Cloudreve 云盘系统 \"\n    red \" 22. 卸载 Cloudreve 云盘系统 \"\n    green \" 23. 安装/更新/删除 Alist 云盘文件列表系统 \"\n    echo\n    green \" 28. 安装 CasaOS 系统(包括 Nextcloud 云盘 和 AdGuard DNS 等)  \"\n    red \" 29. 卸载 CasaOS 系统 \"\n    echo\n    green \" 31. 安装 Ghost Blog 博客系统 \"\n    red \" 32. 卸载 Ghost Blog 博客系统 \"\n    green \" 33. 安装 Joplin Server 笔记(类似 Evernote) \"\n    red \" 33. 卸载 Joplin Server 笔记 \"\n    green \" 35. 安装 Linkwarden 网络书签(类似 Pocket) \"\n    red \" 36. 卸载 Linkwarden 网络书签 \"\n    echo\n    green \" 41. 安装 AFFiNE Server 多人协作笔记(类似 Notion) \"\n    red \" 42. 卸载 AFFiNE Server 多人协作笔记 \"\n    green \" 43. 安装 Outline Server 多人协作笔记(类似 Notion) \"\n    red \" 44. 卸载 Outline Server 多人协作笔记 \"\n    echo\n    green \" 51. 安装 Grist 在线Excel表格(类似 Airtable) \"\n    red \" 52. 卸载 Grist 在线Excel表格 \"\n    green \" 53. 安装 NocoDB 在线Excel表格(类似 Airtable) \"\n    red \" 54. 卸载 NocoDB 在线Excel表格 \"\n    green \" 55. 安装 Etherpad 多人协作文档(类似 Word) \"\n    red \" 56. 卸载 Etherpad 多人协作文档 \"\n    echo\n    green \" 61. 安装视频会议系统 Jitsi Meet \"\n    red \" 62. 卸载 Jitsi Meet \"\n    green \" 63. Jitsi Meet 发起会议是否需要密码验证\"\n    echo\n    green \" 65. 安装 Focalboard Personal Server 项目管理看板 (类似 Trello) \"\n    red \" 66. 卸载 Focalboard Personal Server \"\n    green \" 67. 安装 Mattermost Boards Server 项目管理看板 (类似 Trello) \"\n    red \" 68. 卸载 Mattermost Boards Server \"\n    echo\n    green \" 81. 安装 AURORA 与 FreeGPT35 免费GPT\"\n    red \" 82. 卸载 AURORA 与 FreeGPT35\"\n    echo\n    green \" 89. 子菜单 安装 V2board 服务器端 XrayR, V2Ray-Poseidon, Soga\"\n    green \" 90. 单独申请域名SSL证书\"\n    echo\n    green \" 88. 升级脚本\"\n    green \" 0. 退出脚本\"\n\n    else\n    green \" ==================================================\"\n    green \" Linux tools installation script | 2024-4-6 | OS support：centos7+ / debian9+ / ubuntu16.04+\"\n    green \" ==================================================\"\n    green \" 1. Install linux kernel,  bbr plus kernel, WireGuard and Cloudflare WARP. Unlock Netflix geo restriction and avoid Google reCAPTCHA\"\n    echo\n    green \" 3. Using VI open authorized_keys file, enter your public key. Then save file. In order to login VPS without Password\"\n    green \" 4. Modify SSH login port number. Secure your VPS\"\n    green \" 5. Set timezone to Beijing time\"\n    green \" 6. Using VI open /etc/hosts file\"\n    echo\n    green \" 11. Install Vim Nano Micro editor\"\n    green \" 12. Install Nodejs and PM2\"\n    green \" 13. Install Docker and Docker Compose\"\n    red \" 14. Remove Docker and Docker Compose\"\n    green \" 15. Set Docker Hub Registry\"\n    green \" 16. Install Portainer \"\n    echo\n    green \" 21. Install Cloudreve cloud storage system\"\n    red \" 22. Remove Cloudreve cloud storage system\"\n    green \" 23. Install/Update/Remove Alist file list storage system \"\n    echo\n    green \" 28. Install CasaOS(Including Nextcloud, AdGuard DNS )  \"\n    red \" 29. Remove CasaOS \"\n    echo\n    green \" 31. Install Ghost Blog \"\n    red \" 32. Remove Ghost Blog \"\n    green \" 33. Install Joplin Server (Evernote alternative) \"\n    red \" 34. Remove Joplin Server \"\n    green \" 35. Install Linkwarden (Pocket alternative) \"\n    red \" 36. Remove Linkwarden\"\n    echo\n    green \" 41. Install AFFiNE Server (Notion alternative) \"\n    red \" 42. Remove AFFiNE Server \"\n    green \" 43. Install Outline Server (Notion alternative) \"\n    red \" 44. Remove Outline Server \"\n    echo\n    green \" 51. Install Grist Online Spreadsheet (Airtable alternative)\"\n    red \" 52. Remove Grist Online Spreadsheet \"\n    green \" 53. Install NocoDB Online Spreadsheet (Airtable alternative)\"\n    red \" 54. Remove NocoDB Online Spreadsheet \"\n    green \" 55. Install Etherpad collaborative editor (Word alternative)\"\n    red \" 56. Remove Etherpad collaborative editor \"\n    echo\n\n    green \" 61. Install Jitsi Meet video conference system\"\n    red \" 62. Remove Jitsi Meet video conference system\"\n    green \" 63. Modify Jitsi Meet config to requires password authentication\"\n    echo\n    green \" 65. Install Focalboard Personal Server (Trello alternative) \"\n    red \" 66. Remove Focalboard Personal Server \"\n    green \" 67. Install Mattermost Boards Server (Trello alternative) \"\n    red \" 68. Remove Mattermost Boards Server \"\n    echo\n    green \" 81. Install AURORA and FreeGPT35 Free GPT\"\n    red \" 82. Remove AURORA and FreeGPT35\"\n    echo\n    green \" 89. Submenu. install XrayR, V2Ray-Poseidon, Soga for V2board panel\"\n    green \" 90. Get a free SSL certificate for domain name only\"\n    echo\n    green \" 88. upgrade this script to latest version\"\n    green \" 0. exit\"\n\n    fi\n\n\n    echo\n    read -r -p \"Please input number:\" menuNumberInput\n    case \"$menuNumberInput\" in\n        1 )\n            installWireguard\n        ;;\n        3 )\n            editLinuxLoginWithPublicKey\n        ;;\n        4 )\n            changeLinuxSSHPort\n            sleep 10s\n            start_menu\n        ;;\n        5 )\n            setLinuxDateZone\n            sleep 4s\n            start_menu\n        ;;\n        6 )\n            DSMEditHosts\n        ;;\n        11 )\n            installSoftEditor\n        ;;\n        12 )\n            installPackage\n            installNodejs\n        ;;\n        13 )\n            testLinuxPortUsage\n            setLinuxDateZone\n            installPackage\n            installDocker\n        ;;\n        14 )\n            removeDocker\n        ;;\n        15 )\n            addDockerRegistry\n        ;;\n        16 )\n            installPortainer\n        ;;\n        17 )\n            installAnsible\n        ;;\n        18 )\n            installSemaphore\n        ;;\n        21 )\n            installCloudreve\n        ;;\n        22 )\n            removeCloudreve\n        ;;\n        23 )\n            installAlist\n        ;;\n        28 )\n            installCasaOS\n        ;;\n        29 )\n            removeCasaOS\n        ;;\n        31 )\n            installCMSGhost\n        ;;\n        32 )\n            removeCMSGhost\n        ;;\n        33 )\n            installJoplin\n        ;;\n        34 )\n            removeJoplin\n        ;;\n        35 )\n            installLinkwarden\n        ;;\n        36 )\n            removeLinkwarden\n        ;;\n        41 )\n            installAffine\n        ;;\n        42 )\n            removeAffine\n        ;;\n        43 )\n            installOutline\n        ;;\n        44 )\n            removeOutline\n        ;;\n        51 )\n            installGrist\n        ;;\n        52 )\n            removeGrist\n        ;;\n        53 )\n            installNocoDB\n        ;;\n        54 )\n            removeNocoDB\n        ;;\n        55 )\n            installEtherpad\n        ;;\n        56 )\n            removeEtherpad\n        ;;\n\n        61 )\n            installJitsiMeet\n        ;;\n        62 )\n            removeJitsiMeet\n        ;;\n        63 )\n            secureAddPasswordForJitsiMeet\n        ;;\n        65 )\n            installFocalboard\n        ;;\n        66 )\n            removeFocalboard\n        ;;\n        67 )\n            installMattermostBoards\n        ;;\n        68 )\n            removeMattermostBoards\n        ;;\n        81 )\n            installAURORA\n        ;;\n        82 )\n            removeAURORA\n        ;;\n        90 )\n            getHTTPSCertificateStep1\n        ;;\n        91 )\n            testCMSGhost\n        ;;\n        96 )\n            warpGoCheckIpv6\n            warpGoCrontab\n        ;;\n        98 )\n            replaceXrayRConfig\n        ;;\n        99 )\n            setLinuxDateZone\n            installXrayR\n        ;;\n\n        88 )\n            upgradeScript\n        ;;\n        0 )\n            exit 1\n        ;;\n        * )\n            clear\n            red \"请输入正确数字 !\"\n            sleep 2s\n            start_menu\n        ;;\n    esac\n}\n\n\n\n\n\n\nfunction setLanguage(){\n    echo\n    green \" ==================================================\"\n    green \" Please choose your language\"\n    green \" 1. English\"\n    green \" 2. 中文\"\n    echo\n    read -r -p \"Please input your language:\" languageInput\n\n    case \"${languageInput}\" in\n        1 )\n            echo \"en\" > ${configLanguageFilePath}\n            showMenu\n        ;;\n        2 )\n            echo \"cn\" > ${configLanguageFilePath}\n            showMenu\n        ;;\n        * )\n            red \" Please input the correct number !\"\n            setLanguage\n        ;;\n    esac\n}\n\nconfigLanguageFilePath=\"${HOME}/language_setting_v2ray_trojan.md\"\nconfigLanguage=\"cn\"\n\nfunction showMenu(){\n\n    if [ -f \"${configLanguageFilePath}\" ]; then\n        configLanguage=$(cat ${configLanguageFilePath})\n\n        case \"${configLanguage}\" in\n        cn )\n            start_menu \"first\"\n        ;;\n        en )\n            start_menu \"first\"\n        ;;\n        * )\n            setLanguage\n        ;;\n        esac\n    else\n        setLanguage\n    fi\n}\n\nshowMenu\n"
        },
        {
          "name": "netflix_check.sh",
          "type": "blob",
          "size": 19.97265625,
          "content": "#!/bin/bash\n\nFont_Black=\"\\033[30m\"\nFont_Red=\"\\033[31m\"\nFont_Green=\"\\033[32m\"\nFont_Yellow=\"\\033[33m\"\nFont_Blue=\"\\033[34m\"\nFont_Purple=\"\\033[35m\"\nFont_SkyBlue=\"\\033[36m\"\nFont_White=\"\\033[37m\"\nFont_Suffix=\"\\033[0m\"\n\n# fonts color\nred(){\n    echo -e \"\\033[31m\\033[01m$1\\033[0m\"\n}\ngreen(){\n    echo -e \"\\033[32m\\033[01m$1\\033[0m\"\n}\nyellow(){\n    echo -e \"\\033[33m\\033[01m$1\\033[0m\"\n}\nblue(){\n    echo -e \"\\033[34m\\033[01m$1\\033[0m\"\n}\nbold(){\n    echo -e \"\\033[1m\\033[01m$1\\033[0m\"\n}\n\n\n\n\n\nUA_Browser=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36\";\n\nconfigWARPPortFilePath=\"${HOME}/wireguard/warp-port\"\nconfigWARPPortLocalServerPort=\"40000\"\nwarpPortInput=\"${1:-40000}\"\n\nisAutoRefreshWarp=\"\"\n\nfunction testWARPEnabled(){\n\n    if [[ -f \"${configWARPPortFilePath}\" ]]; then\n        configWARPPortLocalServerPort=\"$(cat ${configWARPPortFilePath})\"\n        yellow \"检测到本机已安装 WARP Sock5, 端口号 ${configWARPPortLocalServerPort}\"\n        echo\n    fi\n\n    if [[  \"$isAutoRefreshWarp\" == \"true\" ]]; then\n        warpPortInput=\"${configWARPPortLocalServerPort}\"\n    else\n        read -p \"请输入WARP Sock5 端口号? 直接回车默认${configWARPPortLocalServerPort}, 请输入纯数字:\" warpPortInput\n        warpPortInput=${warpPortInput:-$configWARPPortLocalServerPort}\n    fi\n    echo\n\n}\n\nisIPV6Enabled=\"false\"\nfunction testIPV6Enabled(){\n    cmdCatIpv6=$(cat /sys/module/ipv6/parameters/disable)\n    isIPV6Enabled=\"false\"\n\n    if [[ ${cmdCatIpv6} == \"0\" ]]; then\n        isIPV6Enabled=\"true\"\n    fi\n\n    cmd1SysCtlIpv6=$(sysctl -a 2>/dev/null | grep net.ipv6.conf.all.disable_ipv6 | awk -F  \" \" '{print $3}' )\n    cmd2SysCtlIpv6=$(sysctl -a 2>/dev/null | grep net.ipv6.conf.default.disable_ipv6 | awk -F  \" \" '{print $3}' )\n\n    if [[ ${cmd1SysCtlIpv6} == \"0\" && ${cmd2SysCtlIpv6} == \"0\" ]]; then\n        isIPV6Enabled=\"true\"\n    fi\n}\n\n\nfunction testNetflixAll(){\n    curlCommand=\"curl --connect-timeout 10 -sL\"\n    curlInfo=\"IPv4\"\n\n    if [[ $1 == \"ipv4\" ]]; then\n        bold \" 开始测试本机的IPv4 解锁 Netflix 情况\"\n        curlCommand=\"${curlCommand} -4\"\n        curlInfo=\"IPv4\"\n\n    elif [[ $1 == \"ipv4warp\" ]]; then\n\n        read -r -p \"是否测试本机 IPv4 WARP Sock5 代理? 直接回车默认不测试 请输入[y/N]:\" isIpv4WARPContinueInput\n        isIpv4WARPContinueInput=${isIpv4WARPContinueInput:-n}\n\n        if [[ ${isIpv4WARPContinueInput} == [Nn] ]]; then\n            red \" 已退出本机 IPv4 WARP Sock5 代理测试\"\n            echo\n            return\n        else\n            testWARPEnabled\n\n            bold \" 开始测试本机的IPv4 通过CloudFlare WARP 解锁 Netflix 情况\"\n            curlCommand=\"${curlCommand} -x socks5h://127.0.0.1:${warpPortInput}\"\n            curlInfo=\"IPv4 CloudFlare WARP\"\n        fi\n\n\n    elif [[ $1 == \"ipv6\" ]]; then\n\n        if [[ \"${isIPV6Enabled}\" == \"false\" ]]; then\n            red \" 本机IPv6 没有开启 是否继续测试IPv6 \"\n            read -r -p \"是否继续测试IPv6? 直接回车默认不继续测试 请输入[y/N]:\" isIpv6ContinueInput\n            isIpv6ContinueInput=${isIpv6ContinueInput:-n}\n\n            if [[ ${isIpv6ContinueInput} == [Nn] ]]; then\n                red \" 已退出 本机IPv6 测试 \"\n                echo\n                return\n            else\n                echo\n                bold \" 开始测试本机的IPv6 解锁 Netflix 情况\"\n                curlCommand=\"${curlCommand} -6\"\n                curlInfo=\"IPv6\"\n            fi\n        else\n                bold \" 开始测试本机的IPv6 解锁 Netflix 情况\"\n                curlCommand=\"${curlCommand} -6\"\n                curlInfo=\"IPv6\"\n\n        fi\n\n\n    elif [[ $1 == \"ipv6warp\" ]]; then\n        bold \" 开始测试本机的IPv6 通过CloudFlare WARP 解锁 Netflix 情况\"\n        curlCommand=\"${curlCommand} -6\"\n        curlInfo=\"IPv6 CloudFlare WARP\"\n\n    else\n        red \" 没有选择要进行的测试 已退出! \"\n        return\n\n    fi\n\n    # curl 参数说明\n    # --connect-timeout <seconds> Maximum time allowed for connection\n    # -4, --ipv4          Resolve names to IPv4 addresses\n    # -s, --silent        Silent mode\n    # -S, --show-error    Show error even when -s is used\n    # -L, --location      Follow redirects\n    # -i, --include       Include protocol response headers in the output\n    # -f, --fail          Fail silently (no output at all) on HTTP errors\n\n\n    testNetflixOneMethod \"${curlCommand}\" \"${curlInfo}\"\n    echo\n\n}\n\nfunction testNetflixOneMethod(){\n    # https://stackoverflow.com/questions/3869072/test-for-non-zero-length-string-in-bash-n-var-or-var\n\n    if [[ -n \"$1\" ]]; then\n\n        netflixLinkIndex=\"https://www.netflix.com/\"\n        netflixLinkOwn=\"https://www.netflix.com/title/80018499\"\n\n\n        # green \" Test Url: $1 -S ${netflixLinkIndex}\"\n        resultIndex=$($1 -S ${netflixLinkIndex} 2>&1)\n        \n        if [[ \"${resultIndex}\" == \"curl\"* ]];then\n            red \" 网络错误 无法打开 Netflix 网站\"\n            return\n        fi\n        \n        if [[ -z \"${resultIndex}\" ]];then\n            resultIndex2=$($1 -S ${netflixLinkIndex} 2>&1)\n            if [[ -z \"${resultIndex2}\" ]];then\n                red \" 已被 Netflix 屏蔽, 403 访问错误 \"\n                return\n            fi\n        fi\n\n        if [ \"${resultIndex}\" == \"Not Available\" ];then\n            red \" Netflix 不提供此地区服务 \"\n            if [[  \"$isAutoRefreshWarp\" == \"true\" ]]; then\n                echo\n            else\n                return\n            fi\n            \n        fi\n\n\n\n\n\n        # green \" Test Url: $1 -S ${netflixLinkOwn}\"\n        resultOwn=$($1 -S ${netflixLinkIndex} 2>&1)\n\n        if [[ \"${resultOwn}\" == *\"page-404\"* ]] || [[ \"${resultOwn}\" == *\"NSEZ-403\"* ]];then\n            red \" 本机 $2 不能播放 Netflix 任何剧集\"\n            return\n        fi\n\n\n        # green \" Test Url: $1 -fi https://www.netflix.com/title/80018499 2>&1 | sed -n '8p'\"\n        resultRegion=`tr [:lower:] [:upper:] <<< $($1 -fi \"https://www.netflix.com/title/80018499\" 2>&1 | sed -n '8p' | awk '{print $2}' | cut -d '/' -f4 | cut -d '-' -f1)`\n\n        netflixRegion=\"${resultRegion}\"\n        # echo \"x-robots-tag: ${netflixRegion}\"\n\n        if [[ \"${resultRegion}\" == *\"INDEX\"* ]] || [[ \"${resultRegion}\" == *\"index\"* ]];then\n           netflixRegion=\"US\"\n        fi\n\n        result1=$($1 -S \"https://www.netflix.com/title/70143836\" 2>&1)\n        result2=$($1 -S \"https://www.netflix.com/title/80027042\" 2>&1)\n        result3=$($1 -S \"https://www.netflix.com/title/70140425\" 2>&1)\n        result4=$($1 -S \"https://www.netflix.com/title/70283261\" 2>&1)\n        result5=$($1 -S \"https://www.netflix.com/title/70143860\" 2>&1)\n        result6=$($1 -S \"https://www.netflix.com/title/70202589\" 2>&1)\n        result7=$($1 -S \"https://www.netflix.com/title/70305903\" 2>&1)\n\n        if [[ \"$result1\" == *\"page-404\"* ]] && [[ \"$result2\" == *\"page-404\"* ]] && [[ \"$result3\" == *\"page-404\"* ]] && [[ \"$result4\" == *\"page-404\"* ]] && [[ \"$result5\" == *\"page-404\"* ]] && [[ \"$result6\" == *\"page-404\"* ]]; then\n            yellow \" 本机 $2 仅解锁 Netflix 自制剧, 无法播放非自制剧. 区域: ${netflixRegion}\"\n            \n            if [[ $2 == \"IPv4 CloudFlare WARP Refresh\" ]]; then\n                echo\n                green \" 重启Warp 用于刷新能解锁IP, $2\"\n                warp_restart\n                sleep 2\n                \n                autoRefreshWarpIP\n            fi\n            return\n        fi\n\n        green \" 恭喜 本机 $2 解锁 Netflix 全部剧集 包括非自制剧. 区域: ${netflixRegion} \"\n        return\n\n    else\n        red \" 要进行的测试 Url为空! \"\n    fi\n\n\n}\n\n\n\nfunction warp_restart(){\n    if [ -f /etc/wireguard/wgcf.conf ]; then\n        systemctl restart wg-quick@wgcf\n        sleep 2\n    fi\n\n    if [ -f /usr/bin/warp-cli ]; then\n        # systemctl restart warp-svc\n        # sleep 3\n        warp-cli --accept-tos delete \n        sleep 2\n        warp-cli --accept-tos register \n        sleep 2\n        warp-cli --accept-tos connect\n        sleep 2\n\n    fi\n    green \" 已经完成 重启Warp \"\n}\n\n\ncounter=1\nfunction autoRefreshWarpIPStart(){\n\n    if [[  \"$isAutoRefreshWarp\" == \"true\" ]]; then\n        testWARPEnabled\n        autoRefreshWarpIP\n    fi\n\n}\n\nfunction autoRefreshWarpIP(){\n    # https://stackoverflow.com/questions/13638670/adding-counter-in-shell-script\n\n    if [[  \"$isAutoRefreshWarp\" == \"true\" ]]; then\n\n        echo \n        time=$(date \"+%Y-%m-%d %H:%M:%S\")\n        green \" $time 开始自动刷新 WARP IP, 默认尝试20次 此次为第${counter}次\"\n        echo\n        curlCommand=\"curl --connect-timeout 10 -sL\"\n        curlInfo=\"IPv4 CloudFlare WARP Refresh\"\n\n        \n\n        if [ -f /usr/bin/warp-cli ]; then\n            bold \" 开始测试本机的IPv4 通过CloudFlare WARP sock5 解锁 Netflix 情况\"\n            curlCommand=\"${curlCommand} -x socks5h://127.0.0.1:${warpPortInput}\"\n        else\n            bold \" 开始测试本机的IPv6 通过CloudFlare WARP 解锁 Netflix 情况\"\n            curlCommand=\"${curlCommand} -6\"\n        fi\n        \n\n        if [[ \"$counter\" -gt 20 ]]; then\n            exit 1\n        else\n            counter=$((counter+1))\n            testNetflixOneMethod \"${curlCommand}\" \"${curlInfo}\"\n        fi\n        echo\n    fi\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction testYoutubeAll(){\n#    curlCommand=\"curl --connect-timeout 10 -s --user-agent ${UA_Browser}\"\n    curlCommand=\"curl --connect-timeout 10 -s\"\n    curlInfo=\"IPv4\"\n\n    if [[ $1 == \"ipv4\" ]]; then\n        bold \" 开始测试本机的IPv4 解锁 Youtube Premium 情况\"\n        curlCommand=\"${curlCommand} -4\"\n        curlInfo=\"IPv4\"\n\n    elif [[ $1 == \"ipv4warp\" ]]; then\n\n        if [[ ${isIpv4WARPContinueInput} == [Nn] ]]; then\n            red \" 已退出本机 IPv4 WARP Sock5 代理测试\"\n            echo\n            return\n        else\n\n            bold \" 开始测试本机的IPv4 通过CloudFlare WARP 解锁 Youtube Premium 情况\"\n            curlCommand=\"${curlCommand} -x socks5h://127.0.0.1:${warpPortInput}\"\n            curlInfo=\"IPv4 CloudFlare WARP\"\n        fi\n\n    elif [[ $1 == \"ipv6\" ]]; then\n\n        if [[ \"${isIPV6Enabled}\" == \"false\" ]]; then\n\n            if [[ ${isIpv6ContinueInput} == [Nn] ]]; then\n                red \" 已退出 本机IPv6 测试 \"\n                echo\n                return\n            else\n                bold \" 开始测试本机的IPv6 解锁 Youtube Premium 情况\"\n                curlCommand=\"${curlCommand} -6\"\n                curlInfo=\"IPv6\"\n            fi\n        else\n                bold \" 开始测试本机的IPv6 解锁 Youtube Premium 情况\"\n                curlCommand=\"${curlCommand} -6\"\n                curlInfo=\"IPv6\"\n\n        fi\n\n    elif [[ $1 == \"ipv6warp\" ]]; then\n        bold \" 开始测试本机的IPv6 通过CloudFlare WARP 解锁 Youtube Premium 情况\"\n        curlCommand=\"${curlCommand} -6\"\n        curlInfo=\"IPv6 CloudFlare WARP\"\n\n    else\n        red \" 没有选择要进行的测试 已退出! \"\n        return\n\n    fi\n\n    # curl 参数说明\n    # --connect-timeout <seconds> Maximum time allowed for connection\n    # -4, --ipv4          Resolve names to IPv4 addresses\n    # -s, --silent        Silent mode\n    # -S, --show-error    Show error even when -s is used\n    # -L, --location      Follow redirects\n\n    testYoutubeOneMethod \"${curlCommand}\" \"${curlInfo}\"\n    echo\n\n}\n\nfunction testYoutubeOneMethod(){\n\n    if [[ -n \"$1\" ]]; then\n\n        youtubeLinkRed=\"https://www.youtube.com/red\"\n\n#        green \" Test Url: $1 ${youtubeLinkRed}\"\n\n        resultYoutubeIndex=$($1 -S ${youtubeLinkRed} 2>&1)\n  \n        if [[ \"${resultYoutubeIndex}\" == \"curl\"* ]];then\n            red \" 网络错误 无法打开 YouTube 网站\"\n            return\n        fi\n\n        resultYoutube=$($1 ${youtubeLinkRed} | sed 's/,/\\n/g' | grep countryCode | cut -d '\"' -f4)\n\n        if [ ! -n \"${resultYoutube}\" ]; then\n            yellow \" YouTube 角标不显示 可能不支持 YouTube Premium\"\n        else\n            green \" 本机 $2 支持 YouTube Premium, 角标: ${resultYoutube}\"\n        fi\n\n    else\n        red \" 要进行的测试 Url为空! \"\n    fi\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction testDisneyPlusAll(){\n    curlCommand=\"curl --connect-timeout 10 -s --user-agent ${UA_Browser}\"\n    # curlCommand=\"curl --connect-timeout 10 -s\"\n    curlInfo=\"IPv4\"\n\n    if [[ $1 == \"ipv4\" ]]; then\n        bold \" 开始测试本机的IPv4 解锁 Disney+ 情况\"\n        curlCommand=\"${curlCommand} -4\"\n        curlInfo=\"IPv4\"\n\n    elif [[ $1 == \"ipv4warp\" ]]; then\n\n        if [[ ${isIpv4WARPContinueInput} == [Nn] ]]; then\n            red \" 已退出本机 IPv4 WARP Sock5 代理测试\"\n            echo\n            return\n        else\n\n            bold \" 开始测试本机的IPv4 通过CloudFlare WARP 解锁 Disney+ 情况\"\n            curlCommand=\"${curlCommand} -x socks5h://127.0.0.1:${warpPortInput}\"\n            curlInfo=\"IPv4 CloudFlare WARP\"\n        fi\n\n    elif [[ $1 == \"ipv6\" ]]; then\n\n        if [[ \"${isIPV6Enabled}\" == \"false\" ]]; then\n\n            if [[ ${isIpv6ContinueInput} == [Nn] ]]; then\n                red \" 已退出 本机IPv6 测试 \"\n                echo\n                return\n            else\n                bold \" 开始测试本机的IPv6 解锁 Disney+ 情况\"\n                curlCommand=\"${curlCommand} -6\"\n                curlInfo=\"IPv6\"\n            fi\n        else\n                bold \" 开始测试本机的IPv6 解锁 Disney+ 情况\"\n                curlCommand=\"${curlCommand} -6\"\n                curlInfo=\"IPv6\"\n\n        fi\n\n    elif [[ $1 == \"ipv6warp\" ]]; then\n        bold \" 开始测试本机的IPv6 通过CloudFlare WARP 解锁 Disney+ 情况\"\n        curlCommand=\"${curlCommand} -6\"\n        curlInfo=\"IPv6 CloudFlare WARP\"\n\n    else\n        red \" 没有选择要进行的测试 已退出! \"\n        return\n\n    fi\n\n    # curl 参数说明\n    # --connect-timeout <seconds> Maximum time allowed for connection\n    # -4, --ipv4          Resolve names to IPv4 addresses\n    # -s, --silent        Silent mode\n    # -S, --show-error    Show error even when -s is used\n    # -L, --location      Follow redirects\n\n    testDisneyPlusOneMethod \"${curlCommand}\" \"${curlInfo}\"\n    echo\n\n}\n\nfunction testDisneyPlusOneMethod(){\n\n    if [[ -n \"$1\" ]]; then\n\n        disneyLinkPrepare=\"https://disney.api.edge.bamgrid.com/devices\"\n        disneyLinkRed=\"https://www.disneyplus.com/movies/thor-the-dark-world/ZHk7aM5xTbW7\"\n\n#        green \" Test Url: $1 ${disneyLinkRed}\"\n\n        resultDisneyPlusIndex=$($1 --max-time 10 -S -X POST \"${disneyLinkPrepare}\" -H \"authorization: Bearer ZGlzbmV5JmJyb3dzZXImMS4wLjA.Cu56AgSfBTDag5NiRA81oLHkDZfu5L3CKadnefEAY84\" -H \"content-type: application/json; charset=UTF-8\" -d '{\"deviceFamily\":\"browser\",\"applicationRuntime\":\"chrome\",\"deviceProfile\":\"windows\",\"attributes\":{}}' 2>&1)\n  \n        if [[ \"${resultDisneyPlusIndex}\" == \"curl\"* ]];then\n            red \" 网络错误 无法打开 Disney+ 网站\"\n            return\n        fi\n\n        local PreDisneyCookie=$(curl -s --max-time 10 \"https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/cookies\" | sed -n '1p')\n        \n        #resultYoutube=$(curl --connect-timeout 10 https://www.disneyplus.com/movies/thor-the-dark-world/ZHk7aM5xTbW7 | grep 'The Dark World' )\n        resultYoutube=$($1 ${disneyLinkRed} | grep 'The Dark World' )\n\n        if [  -z \"${resultYoutube}\" ]; then\n            yellow \" 无法打开 Disney Plus 影片\"\n        else\n            green \" 本机 $2 支持观看 Disney Plus 影片\"\n        fi\n\n    else\n        red \" 要进行的测试 Url为空! \"\n    fi\n\n}\n\n\nfunction MediaUnlockTest_DisneyPlus() {\n    echo -n -e \" Disney+:\\t\\t\\t\\t->\\c\"\n    local PreAssertion=$(curl $useNIC $xForward -${1} --user-agent \"${UA_Browser}\" -s --max-time 10 -X POST \"https://disney.api.edge.bamgrid.com/devices\" -H \"authorization: Bearer ZGlzbmV5JmJyb3dzZXImMS4wLjA.Cu56AgSfBTDag5NiRA81oLHkDZfu5L3CKadnefEAY84\" -H \"content-type: application/json; charset=UTF-8\" -d '{\"deviceFamily\":\"browser\",\"applicationRuntime\":\"chrome\",\"deviceProfile\":\"windows\",\"attributes\":{}}' 2>&1)\n    if [[ \"$PreAssertion\" == \"curl\"* ]] && [[ \"$1\" == \"6\" ]]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Red}IPv6 Not Support${Font_Suffix}\\n\"\n        return\n    elif [[ \"$PreAssertion\" == \"curl\"* ]]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local assertion=$(echo $PreAssertion | python -m json.tool 2>/dev/null | grep assertion | cut -f4 -d'\"')\n    local PreDisneyCookie=$(curl -s --max-time 10 \"https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/cookies\" | sed -n '1p')\n    local disneycookie=$(echo $PreDisneyCookie | sed \"s/DISNEYASSERTION/${assertion}/g\")\n    local TokenContent=$(curl $useNIC $xForward -${1} --user-agent \"${UA_Browser}\" -s --max-time 10 -X POST \"https://disney.api.edge.bamgrid.com/token\" -H \"authorization: Bearer ZGlzbmV5JmJyb3dzZXImMS4wLjA.Cu56AgSfBTDag5NiRA81oLHkDZfu5L3CKadnefEAY84\" -d \"$disneycookie\")\n    local isBanned=$(echo $TokenContent | python -m json.tool 2>/dev/null | grep 'forbidden-location')\n    local is403=$(echo $TokenContent | grep '403 ERROR')\n\n    if [ -n \"$isBanned\" ] || [ -n \"$is403\" ]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    local fakecontent=$(curl -s --max-time 10 \"https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/cookies\" | sed -n '8p')\n    local refreshToken=$(echo $TokenContent | python -m json.tool 2>/dev/null | grep 'refresh_token' | awk '{print $2}' | cut -f2 -d'\"')\n    local disneycontent=$(echo $fakecontent | sed \"s/ILOVEDISNEY/${refreshToken}/g\")\n    local tmpresult=$(curl $useNIC $xForward -${1} --user-agent \"${UA_Browser}\" -X POST -sSL --max-time 10 \"https://disney.api.edge.bamgrid.com/graph/v1/device/graphql\" -H \"authorization: ZGlzbmV5JmJyb3dzZXImMS4wLjA.Cu56AgSfBTDag5NiRA81oLHkDZfu5L3CKadnefEAY84\" -d \"$disneycontent\" 2>&1)\n    local previewcheck=$(curl $useNIC $xForward -${1} -s -o /dev/null -L --max-time 10 -w '%{url_effective}\\n' \"https://disneyplus.com\" | grep preview)\n    local isUnabailable=$(echo $previewcheck | grep 'unavailable')\n    local region=$(echo $tmpresult | python -m json.tool 2>/dev/null | grep 'countryCode' | cut -f4 -d'\"')\n    local inSupportedLocation=$(echo $tmpresult | python -m json.tool 2>/dev/null | grep 'inSupportedLocation' | awk '{print $2}' | cut -f1 -d',')\n\n    if [[ \"$region\" == \"JP\" ]]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Green}Yes (Region: JP)${Font_Suffix}\\n\"\n        return\n    elif [ -n \"$region\" ] && [[ \"$inSupportedLocation\" == \"false\" ]] && [ -z \"$isUnabailable\" ]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Yellow}Available For [Disney+ $region] Soon${Font_Suffix}\\n\"\n        return\n    elif [ -n \"$region\" ] && [ -n \"$isUnavailable\" ]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    elif [ -n \"$region\" ] && [[ \"$inSupportedLocation\" == \"true\" ]]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Green}Yes (Region: $region)${Font_Suffix}\\n\"\n        return\n    elif [ -z \"$region\" ]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    else\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Red}Failed${Font_Suffix}\\n\"\n        return\n    fi\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction startNetflixTest(){\n\n    echo\n    green \" ==================================================\"\n    green \" Netflix 非自制剧解锁 检测脚本 By JinWYP\"\n    red \" 本脚本无法检测出使用 V2ray 服务器端路由规则解锁Netflix\"\n    red \" 需要在 V2ray 客户端上运行本脚本才可以检测成功\"\n    green \" ==================================================\"\n    echo\n\n    if [[ -n \"$1\" ]]; then\n        isAutoRefreshWarp=\"true\"\n        autoRefreshWarpIPStart\n\n    else\n\n        testIPV6Enabled\n\n        testNetflixAll \"ipv4\"\n        testNetflixAll \"ipv6\"\n        testNetflixAll \"ipv4warp\"\n\n        green \" ===== Youtube Premium 准备开始检测 =====\"\n\n        testYoutubeAll \"ipv4\"\n        testYoutubeAll \"ipv6\"\n        testYoutubeAll \"ipv4warp\"\n\n        green \" ===== Disney+ 准备开始检测 =====\"\n\n        testDisneyPlusAll \"ipv4\"\n        testDisneyPlusAll \"ipv6\"\n        testDisneyPlusAll \"ipv4warp\"\n\n    fi    \n}\n\n\n\nstartNetflixTest \"$1\"\n\n"
        },
        {
          "name": "trojan_v2ray_install.sh",
          "type": "blob",
          "size": 348.3251953125,
          "content": "#!/bin/bash\n\nexport LC_ALL=C\nexport LANG=en_US.UTF-8\nexport LANGUAGE=en_US.UTF-8\nexport LC_COLLATE=C\nexport LC_CTYPE=en_US.UTF-8\n\nsudoCmd=\"\"\nif [[ $(/usr/bin/id -u) -ne 0 ]]; then\n  sudoCmd=\"sudo\"\nfi\n\n\nuninstall() {\n    ${sudoCmd} \"$(which rm)\" -rf $1\n    printf \"File or Folder Deleted: %s\\n\" $1\n}\n\n\n# fonts color\nred(){\n    echo -e \"\\033[31m\\033[01m$1\\033[0m\"\n}\ngreen(){\n    echo -e \"\\033[32m\\033[01m$1\\033[0m\"\n}\nyellow(){\n    echo -e \"\\033[33m\\033[01m$1\\033[0m\"\n}\nblue(){\n    echo -e \"\\033[34m\\033[01m$1\\033[0m\"\n}\nbold(){\n    echo -e \"\\033[1m\\033[01m$1\\033[0m\"\n}\n\n\n\nfunction showHeaderGreen(){\n    echo\n    green \" ==================================================\"\n\n    for parameter in \"$@\"\n    do\n        if [[ -n \"${parameter}\" ]]; then\n            green \" ${parameter}\"\n        fi\n    done\n\n    green \" ==================================================\"\n    echo\n}\nfunction showHeaderRed(){\n    echo\n    red \" ==================================================\"\n    for parameter in \"$@\"\n    do\n        if [[ -n \"${parameter}\" ]]; then\n            red \" ${parameter}\"\n        fi\n    done\n    red \" ==================================================\"\n    echo\n}\nfunction showInfoGreen(){\n    echo\n    for parameter in \"$@\"\n    do\n        if [[ -n \"${parameter}\" ]]; then\n            green \" ${parameter}\"\n        fi\n    done\n    echo\n}\n\n\n\n\nosCPU=\"\"\nosArchitecture=\"arm\"\nosInfo=\"\"\nosRelease=\"\"\nosReleaseVersion=\"\"\nosReleaseVersionNo=\"\"\nosReleaseVersionNoShort=\"\"\nosReleaseVersionCodeName=\"CodeName\"\nosSystemPackage=\"\"\nosSystemMdPath=\"\"\nosSystemShell=\"bash\"\n\n\nfunction checkArchitecture(){\n    # https://stackoverflow.com/questions/48678152/how-to-detect-386-amd64-arm-or-arm64-os-architecture-via-shell-bash\n\n    case $(uname -m) in\n        i386)   osArchitecture=\"386\" ;;\n        i686)   osArchitecture=\"386\" ;;\n        x86_64) osArchitecture=\"amd64\" ;;\n        arm)    dpkg --print-architecture | grep -q \"arm64\" && osArchitecture=\"arm64\" || osArchitecture=\"arm\" ;;\n        aarch64)    dpkg --print-architecture | grep -q \"arm64\" && osArchitecture=\"arm64\" || osArchitecture=\"arm\" ;;\n        * )     osArchitecture=\"arm\" ;;\n    esac\n}\n\n\nfunction checkCPU(){\n    osCPUText=$(cat /proc/cpuinfo | grep vendor_id | uniq)\n    if [[ $osCPUText =~ \"GenuineIntel\" ]]; then\n        osCPU=\"intel\"\n    elif [[ $osCPUText =~ \"AMD\" ]]; then\n        osCPU=\"amd\"\n    else\n        echo\n    fi\n\n    # green \" Status 状态显示--当前CPU是: $osCPU\"\n}\n\n# 检测系统版本号\ngetLinuxOSVersion(){\n    if [[ -s /etc/redhat-release ]]; then\n        osReleaseVersion=$(grep -oE '[0-9.]+' /etc/redhat-release)\n    else\n        osReleaseVersion=$(grep -oE '[0-9.]+' /etc/issue)\n    fi\n\n    # https://unix.stackexchange.com/questions/6345/how-can-i-get-distribution-name-and-version-number-in-a-simple-shell-script\n\n    if [ -f /etc/os-release ]; then\n        # freedesktop.org and systemd\n        source /etc/os-release\n        osInfo=$NAME\n        osReleaseVersionNo=$VERSION_ID\n\n        if [ -n \"$VERSION_CODENAME\" ]; then\n            osReleaseVersionCodeName=$VERSION_CODENAME\n        fi\n    elif type lsb_release >/dev/null 2>&1; then\n        # linuxbase.org\n        osInfo=$(lsb_release -si)\n        osReleaseVersionNo=$(lsb_release -sr)\n\n    elif [ -f /etc/lsb-release ]; then\n        # For some versions of Debian/Ubuntu without lsb_release command\n        . /etc/lsb-release\n        osInfo=$DISTRIB_ID\n        osReleaseVersionNo=$DISTRIB_RELEASE\n\n    elif [ -f /etc/debian_version ]; then\n        # Older Debian/Ubuntu/etc.\n        osInfo=Debian\n        osReleaseVersion=$(cat /etc/debian_version)\n        osReleaseVersionNo=$(sed 's/\\..*//' /etc/debian_version)\n    elif [ -f /etc/redhat-release ]; then\n        osReleaseVersion=$(grep -oE '[0-9.]+' /etc/redhat-release)\n    else\n        # Fall back to uname, e.g. \"Linux <version>\", also works for BSD, etc.\n        osInfo=$(uname -s)\n        osReleaseVersionNo=$(uname -r)\n    fi\n\n    osReleaseVersionNoShort=$(echo $osReleaseVersionNo | sed 's/\\..*//')\n}\n\n# 检测系统发行版代号\nfunction getLinuxOSRelease(){\n    if [[ -f /etc/redhat-release ]]; then\n        osRelease=\"centos\"\n        osSystemPackage=\"yum\"\n        osSystemMdPath=\"/usr/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"\"\n    elif cat /etc/issue | grep -Eqi \"debian|raspbian\"; then\n        osRelease=\"debian\"\n        osSystemPackage=\"apt-get\"\n        osSystemMdPath=\"/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"buster\"\n    elif cat /etc/issue | grep -Eqi \"ubuntu\"; then\n        osRelease=\"ubuntu\"\n        osSystemPackage=\"apt-get\"\n        osSystemMdPath=\"/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"bionic\"\n    elif cat /etc/issue | grep -Eqi \"centos|red hat|redhat\"; then\n        osRelease=\"centos\"\n        osSystemPackage=\"yum\"\n        osSystemMdPath=\"/usr/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"\"\n    elif cat /proc/version | grep -Eqi \"debian|raspbian\"; then\n        osRelease=\"debian\"\n        osSystemPackage=\"apt-get\"\n        osSystemMdPath=\"/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"buster\"\n    elif cat /proc/version | grep -Eqi \"ubuntu\"; then\n        osRelease=\"ubuntu\"\n        osSystemPackage=\"apt-get\"\n        osSystemMdPath=\"/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"bionic\"\n    elif cat /proc/version | grep -Eqi \"centos|red hat|redhat\"; then\n        osRelease=\"centos\"\n        osSystemPackage=\"yum\"\n        osSystemMdPath=\"/usr/lib/systemd/system/\"\n        osReleaseVersionCodeName=\"\"\n    fi\n\n    getLinuxOSVersion\n    checkArchitecture\n    checkCPU\n\n    [[ -z $(echo $SHELL|grep zsh) ]] && osSystemShell=\"bash\" || osSystemShell=\"zsh\"\n\n    green \" OS info: ${osInfo}, ${osRelease}, ${osReleaseVersion}, ${osReleaseVersionNo}, ${osReleaseVersionCodeName}, ${osCPU} CPU ${osArchitecture}, ${osSystemShell}, ${osSystemPackage}, ${osSystemMdPath}\"\n}\n\n\n\n\nfunction promptContinueOpeartion(){\n    read -p \"是否继续操作? 直接回车默认继续操作, 请输入[Y/n]:\" isContinueInput\n    isContinueInput=${isContinueInput:-Y}\n\n    if [[ $isContinueInput == [Yy] ]]; then\n        echo \"\"\n    else\n        exit 1\n    fi\n}\n\nosPort80=\"\"\nosPort443=\"\"\nosSELINUXCheck=\"\"\nosSELINUXCheckIsRebootInput=\"\"\n\nfunction testLinuxPortUsage(){\n    $osSystemPackage install -y net-tools socat\n\n    osPort80=$(netstat -tlpn | awk -F '[: ]+' '$1==\"tcp\"{print $5}' | grep -w 80)\n    osPort443=$(netstat -tlpn | awk -F '[: ]+' '$1==\"tcp\"{print $5}' | grep -w 443)\n\n    if [ -n \"$osPort80\" ]; then\n        process80=$(netstat -tlpn | awk -F '[: ]+' '$5==\"80\"{print $9}')\n        red \"===========================================================\"\n        red \"检测到80端口被占用，占用进程为：${process80} \"\n        red \"===========================================================\"\n        promptContinueOpeartion\n    fi\n\n    if [ -n \"$osPort443\" ]; then\n        process443=$(netstat -tlpn | awk -F '[: ]+' '$5==\"443\"{print $9}')\n        red \"=============================================================\"\n        red \"检测到443端口被占用，占用进程为：${process443} \"\n        red \"=============================================================\"\n        promptContinueOpeartion\n    fi\n\n    osSELINUXCheck=$(grep SELINUX= /etc/selinux/config | grep -v \"#\")\n    if [ \"$osSELINUXCheck\" == \"SELINUX=enforcing\" ]; then\n        red \"=======================================================================\"\n        red \"检测到SELinux为开启强制模式状态, 为防止申请证书失败 将关闭SELinux. 请先重启VPS后，再执行本脚本\"\n        red \"=======================================================================\"\n        read -p \"是否现在重启? 请输入 [Y/n] :\" osSELINUXCheckIsRebootInput\n        [ -z \"${osSELINUXCheckIsRebootInput}\" ] && osSELINUXCheckIsRebootInput=\"y\"\n\n        if [[ $osSELINUXCheckIsRebootInput == [Yy] ]]; then\n            sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n            setenforce 0\n            echo -e \"VPS 重启中...\"\n            reboot\n        fi\n        exit\n    fi\n\n    if [ \"$osSELINUXCheck\" == \"SELINUX=permissive\" ]; then\n        red \"=======================================================================\"\n        red \"检测到SELinux为宽容模式状态, 为防止申请证书失败, 将关闭SELinux. 请先重启VPS后，再执行本脚本\"\n        red \"=======================================================================\"\n        read -p \"是否现在重启? 请输入 [Y/n] :\" osSELINUXCheckIsRebootInput\n        [ -z \"${osSELINUXCheckIsRebootInput}\" ] && osSELINUXCheckIsRebootInput=\"y\"\n\n        if [[ $osSELINUXCheckIsRebootInput == [Yy] ]]; then\n            sed -i 's/SELINUX=permissive/SELINUX=disabled/g' /etc/selinux/config\n            setenforce 0\n            echo -e \"VPS 重启中...\"\n            reboot\n        fi\n        exit\n    fi\n\n    if [ \"$osRelease\" == \"centos\" ]; then\n        if  [[ ${osReleaseVersionNoShort} == \"6\" || ${osReleaseVersionNoShort} == \"5\" ]]; then\n            green \" ==================================================\"\n            red \" 本脚本不支持 Centos 6 或 Centos 6 更早的版本\"\n            green \" ==================================================\"\n            exit\n        fi\n\n        red \" 关闭防火墙 firewalld\"\n        ${sudoCmd} systemctl stop firewalld\n        ${sudoCmd} systemctl disable firewalld\n\n    elif [ \"$osRelease\" == \"ubuntu\" ]; then\n        if  [[ ${osReleaseVersionNoShort} == \"14\" || ${osReleaseVersionNoShort} == \"12\" ]]; then\n            green \" ==================================================\"\n            red \" 本脚本不支持 Ubuntu 14 或 Ubuntu 14 更早的版本\"\n            green \" ==================================================\"\n            exit\n        fi\n\n        red \" 关闭防火墙 ufw\"\n        ${sudoCmd} systemctl stop ufw\n        ${sudoCmd} systemctl disable ufw\n\n        if ! command -v ufw &> /dev/null; then\n            echo \"ufw command could not be found\"\n        else\n            ufw disable\n        fi\n\n    elif [ \"$osRelease\" == \"debian\" ]; then\n        $osSystemPackage update -y\n    fi\n\n}\n\n\n\n# 查看端口占用情况\nfunction checkPortUsage(){\n    # https://stackoverflow.com/questions/2013547/assigning-default-values-to-shell-variables-with-a-single-command-in-bash\n\n    portNum=\"${1:-80}\"\n    # check port 80 is running\n    # http://www.letuknowit.com/post/98.html\n    # 不过，一般像下面这样写，多一个加号表明将连续出现的记录分隔符当做一个来处理\n\n    osPort80=$(netstat -tupln | awk -F '[ ]+' '$1==\"tcp\"||$1==\"tcp6\"{print $4}' | grep -w \"${portNum}\")\n\n    if [ -n \"$osPort80\" ]; then\n        process80=$(netstat -tupln | grep -w \"${portNum}\" | awk -F '[ ]+' '{print $7}')\n\n        showHeaderRed \"检测到${portNum}端口被占用，占用进程为：${process80} \"\n\n        if [[ ${portNum} == \"80\" ]] ; then\n            green \" 如需要关闭 apache2 请运行如下命令: \"\n            green \" Run following command to stop apache2: \"\n            green \" ${sudoCmd} systemctl stop apache2 \"\n            green \" ${sudoCmd} systemctl disable apache2 \"\n        fi\n\n\n        promptContinueOpeartion\n    fi\n\n}\n\n\n\n\n\n# 编辑 SSH 公钥 文件用于 免密码登录\nfunction editLinuxLoginWithPublicKey(){\n    if [ ! -d \"${HOME}/ssh\" ]; then\n        mkdir -p ${HOME}/.ssh\n    fi\n\n    vi ${HOME}/.ssh/authorized_keys\n}\n\n\n\n# 设置SSH root 登录\n\nfunction setLinuxRootLogin(){\n\n    read -p \"是否设置允许root登陆(ssh密钥方式 或 密码方式登陆 )? 请输入[Y/n]:\" osIsRootLoginInput\n    osIsRootLoginInput=${osIsRootLoginInput:-Y}\n\n    if [[ $osIsRootLoginInput == [Yy] ]]; then\n\n        if [ \"$osRelease\" == \"centos\" ] || [ \"$osRelease\" == \"debian\" ] ; then\n            ${sudoCmd} sed -i 's/#\\?PermitRootLogin \\(yes\\|no\\|Yes\\|No\\|prohibit-password\\)/PermitRootLogin yes/g' /etc/ssh/sshd_config\n        fi\n        if [ \"$osRelease\" == \"ubuntu\" ]; then\n            ${sudoCmd} sed -i 's/#\\?PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config\n        fi\n\n        green \"设置允许root登陆成功!\"\n    fi\n\n\n    read -p \"是否设置允许root使用密码登陆(上一步请先设置允许root登陆才可以)? 请输入[Y/n]:\" osIsRootLoginWithPasswordInput\n    osIsRootLoginWithPasswordInput=${osIsRootLoginWithPasswordInput:-Y}\n\n    if [[ $osIsRootLoginWithPasswordInput == [Yy] ]]; then\n        sed -i 's/#\\?PasswordAuthentication \\(yes\\|no\\)/PasswordAuthentication yes/g' /etc/ssh/sshd_config\n        green \"设置允许root使用密码登陆成功!\"\n    fi\n\n\n    ${sudoCmd} sed -i 's/#\\?TCPKeepAlive yes/TCPKeepAlive yes/g' /etc/ssh/sshd_config\n    ${sudoCmd} sed -i 's/#\\?ClientAliveCountMax 3/ClientAliveCountMax 30/g' /etc/ssh/sshd_config\n    ${sudoCmd} sed -i 's/#\\?ClientAliveInterval [0-9]*/ClientAliveInterval 40/g' /etc/ssh/sshd_config\n\n    if [ \"$osRelease\" == \"centos\" ] ; then\n\n        ${sudoCmd} service sshd restart\n        ${sudoCmd} systemctl restart sshd\n\n        green \"设置成功, 请用shell工具软件登陆vps服务器!\"\n    fi\n\n    if [ \"$osRelease\" == \"ubuntu\" ] || [ \"$osRelease\" == \"debian\" ] ; then\n\n        ${sudoCmd} service ssh restart\n        ${sudoCmd} systemctl restart ssh\n\n        green \"设置成功, 请用shell工具软件登陆vps服务器!\"\n    fi\n\n    # /etc/init.d/ssh restart\n}\n\n\n# 修改SSH 端口号\nfunction changeLinuxSSHPort(){\n    green \" 修改的SSH登陆的端口号, 不要使用常用的端口号. 例如 20|21|23|25|53|69|80|110|443|123!\"\n    read -p \"请输入要修改的端口号(必须是纯数字并且在1024~65535之间或22):\" osSSHLoginPortInput\n    osSSHLoginPortInput=${osSSHLoginPortInput:-0}\n\n    if [ $osSSHLoginPortInput -eq 22 -o $osSSHLoginPortInput -gt 1024 -a $osSSHLoginPortInput -lt 65535 ]; then\n        sed -i \"s/#\\?Port [0-9]*/Port $osSSHLoginPortInput/g\" /etc/ssh/sshd_config\n\n        if [ \"$osRelease\" == \"centos\" ] ; then\n\n            if  [[ ${osReleaseVersionNoShort} == \"7\" ]]; then\n                yum install -y policycoreutils-python\n            elif  [[ ${osReleaseVersionNoShort} == \"8\" ]]; then\n                yum install -y policycoreutils-python-utils\n            fi\n\n            # semanage port -l\n            if command -v semanage &> /dev/null; then\n                semanage port -a -t ssh_port_t -p tcp ${osSSHLoginPortInput}\n            else\n                red \"semanage command is not installed\"\n            fi\n\n\n            if command -v firewall-cmd &> /dev/null; then\n                firewall-cmd --permanent --zone=public --add-port=$osSSHLoginPortInput/tcp\n                firewall-cmd --reload\n            else\n                red \"firewall-cmd command is not installed\"\n            fi\n\n            ${sudoCmd} systemctl restart sshd.service\n\n        fi\n\n        if [ \"$osRelease\" == \"ubuntu\" ] || [ \"$osRelease\" == \"debian\" ] ; then\n            if ! command -v semanage &> /dev/null; then\n                red \"semanage command is not installed\"\n            else\n                semanage port -a -t ssh_port_t -p tcp $osSSHLoginPortInput\n            fi\n\n            if ! command -v ufw &> /dev/null; then\n                red \"ufw command is not installed\"\n            else\n                ${sudoCmd} ufw allow $osSSHLoginPortInput/tcp\n            fi\n\n            ${sudoCmd} service ssh restart\n            ${sudoCmd} systemctl restart ssh\n        fi\n\n        green \"设置成功, 请记住设置的端口号 ${osSSHLoginPortInput}!\"\n        green \"登陆服务器命令: ssh -p ${osSSHLoginPortInput} root@111.111.111.your ip !\"\n    else\n        red \"输入的端口号错误! 范围: 22,1025~65534\"\n    fi\n}\n\n\n# 设置北京时区\nfunction setLinuxDateZone(){\n\n    tempCurrentDateZone=$(date +'%z')\n\n    echo\n    if [[ ${tempCurrentDateZone} == \"+0800\" ]]; then\n        yellow \"当前时区已经为北京时间  $tempCurrentDateZone | $(date -R) \"\n    else\n        green \" ==================================================\"\n        yellow \" 当前时区为: $tempCurrentDateZone | $(date -R) \"\n        yellow \" 是否设置时区为北京时间 +0800区, 以便cron定时重启脚本按照北京时间运行.\"\n        green \" ==================================================\"\n        # read 默认值 https://stackoverflow.com/questions/2642585/read-a-variable-in-bash-with-a-default-value\n\n        read -p \"是否设置为北京时间 +0800 时区? 请输入[Y/n]:\" osTimezoneInput\n        osTimezoneInput=${osTimezoneInput:-Y}\n\n        if [[ $osTimezoneInput == [Yy] ]]; then\n            if [[ -f /etc/localtime ]] && [[ -f /usr/share/zoneinfo/Asia/Shanghai ]];  then\n                mv /etc/localtime /etc/localtime.bak\n                cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\n                yellow \" 设置成功! 当前时区已设置为 $(date -R)\"\n                green \" ==================================================\"\n            fi\n        fi\n\n    fi\n    echo\n\n    if [ \"$osRelease\" == \"centos\" ]; then\n        if  [[ ${osReleaseVersionNoShort} == \"7\" ]]; then\n            systemctl stop chronyd\n            systemctl disable chronyd\n\n            $osSystemPackage install -y ntpdate\n            $osSystemPackage install -y ntp\n            ntpdate -q 0.rhel.pool.ntp.org\n            systemctl enable ntpd\n            systemctl restart ntpd\n            ntpdate -u  pool.ntp.org\n\n        elif  [[ ${osReleaseVersionNoShort} == \"8\" || ${osReleaseVersionNoShort} == \"9\" ]]; then\n            $osSystemPackage install -y chrony\n            systemctl enable chronyd\n            systemctl restart chronyd\n\n            if command -v firewall-cmd &> /dev/null; then\n                firewall-cmd --permanent --add-service=ntp\n                firewall-cmd --reload\n            fi\n\n            echo \"\"\n            echo \"chrony sources:\"\n\n            chronyc sources\n\n            echo \"\"\n            echo \"\"\n        fi\n\n    else\n        if [[ \"${osReleaseVersionNoShort}\" == \"12\" ]]; then\n            systemctl restart systemd-timesyncd\n            timedatectl timesync-status\n        else\n            $osSystemPackage install -y ntp\n            systemctl enable ntp\n            systemctl restart ntp\n        fi\n    fi\n}\n\n\n\n\n\n\n\n\n# 软件安装\nfunction installSoftDownload(){\n\n    if [[ \"${osRelease}\" == \"debian\" || \"${osRelease}\" == \"ubuntu\" ]]; then\n\n        PACKAGE_LIST=( \"wget\" \"curl\" \"git\" \"unzip\" \"apt-transport-https\" \"cpu-checker\" \"bc\" \"cron\" )\n\n        # 检查所有软件包是否已安装\n        for package in \"${PACKAGE_LIST[@]}\"; do\n            if ! dpkg -l | grep -qw \"$package\"; then\n                # green \"$package is not installed. ${osSystemPackage} Installing...\"\n                ${osSystemPackage} install -y \"$package\"\n            fi\n        done\n\n    elif [[ \"${osRelease}\" == \"centos\" ]]; then\n\n        if  [[ ${osReleaseVersion} == \"8.1.1911\" || ${osReleaseVersion} == \"8.2.2004\" || ${osReleaseVersion} == \"8.0.1905\" || ${osReleaseVersion} == \"8.5.2111\" ]]; then\n\n            # https://techglimpse.com/failed-metadata-repo-appstream-centos-8/\n\n            cd /etc/yum.repos.d/\n            sed -i 's/^mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*\n            sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*\n            yum update -y\n\n            sed -i 's/^mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-Linux-*\n            sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-Linux-*\n\n            ${sudoCmd} dnf install centos-release-stream -y\n            ${sudoCmd} dnf swap centos-{linux,stream}-repos -y\n            ${sudoCmd} dnf distro-sync -y\n        fi\n\n\n        if [[ ${osInfo} == \"AlmaLinux\" ]]; then\n\n            # 定义要检查的 GPG 密钥 ID\n            KEY_ID=\"ced7258b\"\n\n            # 使用 rpm -qi 命令检查是否安装了指定的 GPG 密钥\n            rpm -qi \"gpg-pubkey-$KEY_ID\" &>/dev/null\n\n            # 检查命令的退出状态码\n            if [ $? -eq 0 ]; then\n                # red \"GPG key with ID $KEY_ID is installed.\"\n                echo\n            else\n                red \"GPG key with ID $KEY_ID is NOT installed.\"\n                ${sudoCmd} rpm --import https://repo.almalinux.org/almalinux/RPM-GPG-KEY-AlmaLinux\n                ${sudoCmd} dnf clean all\n                ${sudoCmd} dnf makecache\n            fi\n        fi\n\n        PACKAGE_LIST_Centos=( \"wget\" \"curl\" \"git\" \"unzip\" \"glibc-langpack-en\" )\n\n        # 检查所有软件包是否已安装\n        for package in \"${PACKAGE_LIST_Centos[@]}\"; do\n            if ! rpm -qa | grep -qw \"$package\"; then\n                # green \"$package is not installed. ${osSystemPackage} Installing...\"\n                ${osSystemPackage} install -y \"$package\"\n            fi\n        done\n\n    fi\n}\n\n\nfunction installPackage(){\n    echo\n    green \" ==================================================\"\n    yellow \" 开始安装软件\"\n    green \" ==================================================\"\n    echo\n\n    # sed -i '1s/^/nameserver 1.1.1.1 \\n/' /etc/resolv.conf\n\n    if [ \"$osRelease\" == \"centos\" ]; then\n\n        # rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n        rm -f /etc/yum.repos.d/nginx.repo\n        # cat > \"/etc/yum.repos.d/nginx.repo\" <<-EOF\n# [nginx]\n# name=nginx repo\n# baseurl=https://nginx.org/packages/centos/$osReleaseVersionNoShort/\\$basearch/\n# gpgcheck=0\n# enabled=1\n# sslverify=0\n#\n# EOF\n\n        PACKAGE_LIST=(\"zip\" \"unzip\" \"tar\" \"iputils\" \"htop\" \"redhat-lsb-core\" \"epel-release\" \"bind-utils\" \"net-tools\" \"xz\" \"jq\" \"iperf3\" )\n\n        # 检查所有软件包是否已安装\n        for package in \"${PACKAGE_LIST[@]}\"; do\n            if ! rpm -qa | grep -qw \"$package\"; then\n                green \"$package is not installed. Installing...\"\n                ${sudoCmd} ${osSystemPackage} install -y \"$package\"\n            else\n                green \"$package has been installed.\"\n            fi\n        done\n\n        yum clean all\n\n        ${osSystemPackage} update -y\n\n\n        # https://www.cyberciti.biz/faq/how-to-install-and-use-nginx-on-centos-8/\n        if  [[ ${osReleaseVersionNoShort} == \"8\" ]]; then\n            ${sudoCmd} yum module -y reset nginx\n            ${sudoCmd} yum module -y enable nginx:1.20\n            ${sudoCmd} yum module list nginx\n        fi\n\n        if  [[  ${osReleaseVersionNoShort} == \"9\" ]]; then\n            ${sudoCmd} yum module -y reset nginx\n            ${sudoCmd} yum module -y enable nginx:1.22\n            ${sudoCmd} yum module list nginx\n        fi\n\n    elif [ \"$osRelease\" == \"ubuntu\" ]; then\n\n        # https://joshtronic.com/2018/12/17/how-to-install-the-latest-nginx-on-debian-and-ubuntu/\n        # https://www.nginx.com/resources/wiki/start/topics/tutorials/install/\n\n        $osSystemPackage install -y gnupg2 curl ca-certificates lsb-release ubuntu-keyring\n        # wget -O - https://nginx.org/keys/nginx_signing.key | ${sudoCmd} apt-key add -\n        curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null\n\n        rm -f /etc/apt/sources.list.d/nginx.list\n\n        cat > \"/etc/apt/sources.list.d/nginx.list\" <<-EOF\ndeb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg]   https://nginx.org/packages/ubuntu/ $osReleaseVersionCodeName nginx\n# deb [arch=amd64] https://nginx.org/packages/ubuntu/ $osReleaseVersionCodeName nginx\n# deb-src https://nginx.org/packages/ubuntu/ $osReleaseVersionCodeName nginx\nEOF\n\n        echo -e \"Package: *\\nPin: origin nginx.org\\nPin: release o=nginx\\nPin-Priority: 900\\n\"  | sudo tee /etc/apt/preferences.d/99-nginx\n\n        if [[ \"${osReleaseVersionNoShort}\" == \"22\" || \"${osReleaseVersionNoShort}\" == \"21\" ]]; then\n            echo\n        fi\n\n\n\n        ${osSystemPackage} update -y\n\n        if ! dpkg -l | grep -qw iperf3; then\n            ${sudoCmd} ${osSystemPackage} install -y software-properties-common\n            ${osSystemPackage} install -y curl wget git unzip zip tar htop\n            ${osSystemPackage} install -y xz-utils jq lsb-core lsb-release\n            ${osSystemPackage} install -y iputils-ping\n            ${osSystemPackage} install -y iperf3\n            ${osSystemPackage} install -y cron\n        fi\n\n    elif [ \"$osRelease\" == \"debian\" ]; then\n        # ${sudoCmd} add-apt-repository ppa:nginx/stable -y\n        ${osSystemPackage} update -y\n\n        ${osSystemPackage} install -y gnupg2\n        ${osSystemPackage} install -y curl ca-certificates lsb-release\n        wget https://nginx.org/keys/nginx_signing.key -O- | apt-key add -\n\n        rm -f /etc/apt/sources.list.d/nginx.list\n        if [[ \"${osReleaseVersionNoShort}\" == \"12\" ]]; then\n            echo\n        else\n            cat > \"/etc/apt/sources.list.d/nginx.list\" <<-EOF\ndeb https://nginx.org/packages/mainline/debian/ $osReleaseVersionCodeName nginx\ndeb-src https://nginx.org/packages/mainline/debian $osReleaseVersionCodeName nginx\nEOF\n        fi\n\n\n        ${osSystemPackage} update -y\n\n        if ! dpkg -l | grep -qw iperf3; then\n            ${osSystemPackage} install -y curl wget git unzip zip tar htop\n            ${osSystemPackage} install -y xz-utils jq lsb-core lsb-release\n            ${osSystemPackage} install -y iputils-ping\n            ${osSystemPackage} install -y iperf3\n        fi\n    fi\n}\n\n\nfunction installSoftEditor(){\n    # 安装 micro 编辑器\n    if [[ ! -f \"${HOME}/bin/micro\" ]] ;  then\n        mkdir -p ${HOME}/bin\n        cd ${HOME}/bin\n        curl https://getmic.ro | bash\n\n        cp ${HOME}/bin/micro /usr/local/bin\n\n        green \" ==================================================\"\n        green \" micro 编辑器 安装成功!\"\n        green \" ==================================================\"\n    fi\n\n    if [ \"$osRelease\" == \"centos\" ]; then\n        $osSystemPackage install -y xz  vim-minimal vim-enhanced vim-common nano\n    else\n        $osSystemPackage install -y vim-gui-common vim-runtime vim nano\n    fi\n\n    # 设置vim 中文乱码\n    if [[ ! -d \"${HOME}/.vimrc\" ]] ;  then\n        cat > \"${HOME}/.vimrc\" <<-EOF\nset fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1\nset enc=utf8\nset fencs=utf8,gbk,gb2312,gb18030\n\nsyntax on\ncolorscheme elflord\n\nif has('mouse')\n  se mouse+=a\n  set number\nendif\n\nEOF\n    fi\n}\n\nfunction installSoftOhMyZsh(){\n\n    echo\n    green \" ==================================================\"\n    yellow \" 开始安装 ZSH\"\n    green \" ==================================================\"\n    echo\n\n    if [ \"$osRelease\" == \"centos\" ]; then\n\n        ${sudoCmd} $osSystemPackage install zsh -y\n        $osSystemPackage install util-linux-user -y\n\n    elif [ \"$osRelease\" == \"ubuntu\" ]; then\n\n        ${sudoCmd} $osSystemPackage install zsh -y\n\n    elif [ \"$osRelease\" == \"debian\" ]; then\n\n        ${sudoCmd} $osSystemPackage install zsh -y\n    fi\n\n    green \" ==================================================\"\n    green \" ZSH 安装成功\"\n    green \" ==================================================\"\n\n    # 安装 oh-my-zsh\n    if [[ ! -d \"${HOME}/.oh-my-zsh\" ]] ;  then\n\n        green \" ==================================================\"\n        yellow \" 开始安装 oh-my-zsh\"\n        green \" ==================================================\"\n        curl -Lo ${HOME}/ohmyzsh_install.sh https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh\n        chmod +x ${HOME}/ohmyzsh_install.sh\n        sh ${HOME}/ohmyzsh_install.sh --unattended\n    fi\n\n    if [[ ! -d \"${HOME}/.oh-my-zsh/custom/plugins/zsh-autosuggestions\" ]] ;  then\n        git clone \"https://github.com/zsh-users/zsh-autosuggestions\" \"${HOME}/.oh-my-zsh/custom/plugins/zsh-autosuggestions\"\n\n        # 配置 zshrc 文件\n        zshConfig=${HOME}/.zshrc\n        zshTheme=\"maran\"\n        sed -i 's/ZSH_THEME=.*/ZSH_THEME=\"'\"${zshTheme}\"'\"/' $zshConfig\n        sed -i 's/plugins=(git)/plugins=(git cp history z rsync colorize zsh-autosuggestions)/' $zshConfig\n\n        zshAutosuggestionsConfig=${HOME}/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh\n        sed -i \"s/ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'/ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=1'/\" $zshAutosuggestionsConfig\n\n        sed -i \"s/# zstyle ':omz:update' mode disabled/zstyle ':omz:update' mode disabled/\" $zshConfig\n\n\n        # Actually change the default shell to zsh\n        zsh=$(which zsh)\n\n        if ! chsh -s \"$zsh\"; then\n            red \"chsh command unsuccessful. Change your default shell manually.\"\n        else\n            export SHELL=\"$zsh\"\n            green \"===== Shell successfully changed to '$zsh'.\"\n        fi\n\n\n        echo 'alias ll=\"ls -ahl\"' >> ${HOME}/.zshrc\n        echo 'alias mi=\"micro\"' >> ${HOME}/.zshrc\n\n        green \" ==================================================\"\n        yellow \" oh-my-zsh 安装成功, 请用exit命令退出服务器后重新登陆即可!\"\n        green \" ==================================================\"\n\n    fi\n\n}\n\n\n\n\n\n\n\n\n# 更新本脚本\nfunction upgradeScript(){\n    wget -Nq --no-check-certificate -O ./trojan_v2ray_install.sh \"https://raw.githubusercontent.com/jinwyp/one_click_script/master/trojan_v2ray_install.sh\"\n    green \" Script upgrade successful. 本脚本升级成功! \"\n    chmod +x ./trojan_v2ray_install.sh\n    sleep 2s\n    exec \"./trojan_v2ray_install.sh\"\n}\n\nfunction installWireguard(){\n    bash <(wget -qO- https://github.com/jinwyp/one_click_script/raw/master/install_kernel.sh)\n    # wget -N --no-check-certificate https://github.com/jinwyp/one_click_script/raw/master/install_kernel.sh && chmod +x ./install_kernel.sh && ./install_kernel.sh\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 网络测速\n\nfunction vps_netflix(){\n    # bash <(curl -sSL https://raw.githubusercontent.com/Netflixxp/NF/main/nf.sh)\n    # bash <(curl -sSL \"https://github.com/CoiaPrant/Netflix_Unlock_Information/raw/main/netflix.sh\")\n    # bash <(curl -L -s https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/check.sh)\n\n    # wget -N --no-check-certificate https://github.com/CoiaPrant/Netflix_Unlock_Information/raw/main/netflix.sh && chmod +x netflix.sh && ./netflix.sh\n\n    wget -N --no-check-certificate -O ./netflix.sh https://github.com/CoiaPrant/MediaUnlock_Test/raw/main/check.sh && chmod +x ./netflix.sh && ./netflix.sh\n}\n\nfunction vps_netflix2(){\n    wget -N --no-check-certificate -O ./netflix.sh https://github.com/lmc999/RegionRestrictionCheck/raw/main/check.sh && chmod +x ./netflix.sh && ./netflix.sh\n}\n\nfunction vps_netflix_jin(){\n    # wget -qN --no-check-certificate -O ./nf.sh https://raw.githubusercontent.com/jinwyp/SimpleNetflix/dev/nf.sh && chmod +x ./nf.sh\n    wget -qN --no-check-certificate -O ./nf.sh https://raw.githubusercontent.com/jinwyp/one_click_script/master/netflix_check.sh && chmod +x ./nf.sh && ./nf.sh\n}\n\n\nfunction vps_netflixgo(){\n    wget -N --no-check-certificate -O netflixGo https://github.com/sjlleo/netflix-verify/releases/download/v3.1.0-1/nf_linux_amd64 && chmod +x ./netflixGo && ./netflixGo\n    # wget -N --no-check-certificate -O netflixGo https://github.com/sjlleo/netflix-verify/releases/download/2.61/nf_2.61_linux_amd64 && chmod +x ./netflixGo && ./netflixGo -method full\n    echo\n    echo\n    wget -qN --no-check-certificate -O disneyplusGo https://github.com/sjlleo/VerifyDisneyPlus/releases/download/1.01/dp_1.01_linux_amd64 && chmod +x ./disneyplusGo && ./disneyplusGo\n}\n\n\nfunction vps_bench_ecs(){\n    curl -L https://github.com/spiritLHLS/ecs/raw/main/ecs.sh -o ecs.sh && chmod +x ecs.sh && bash ecs.sh\n    # bash <(wget -qO- bash.spiritlhl.net/ecs)\n    # wget -N --no-check-certificate https://raw.githubusercontent.com/spiritLHLS/ecs/refs/heads/main/ecs.sh && chmod +x ecs.sh && ./ecs.sh\n}\n\nfunction vps_superspeed(){\n    bash <(curl -Lso- https://git.io/superspeed_uxh)\n    # bash <(curl -Lso- https://git.io/Jlkmw)\n    # https://github.com/coolaj/sh/blob/main/speedtest.sh\n\n\n    # bash <(curl -Lso- https://raw.githubusercontent.com/uxh/superspeed/master/superspeed.sh)\n\n    # bash <(curl -Lso- https://raw.githubusercontent.com/zq/superspeed/master/superspeed.sh)\n    # bash <(curl -Lso- https://git.io/superspeed.sh)\n\n\n    #wget -N --no-check-certificate https://raw.githubusercontent.com/flyzy2005/superspeed/master/superspeed.sh && chmod +x superspeed.sh && ./superspeed.sh\n    #wget -N --no-check-certificate https://raw.githubusercontent.com/zq/superspeed/master/superspeed.sh && chmod +x superspeed.sh && ./superspeed.sh\n\n    # bash <(curl -Lso- https://git.io/superspeed)\n    #wget -N --no-check-certificate https://raw.githubusercontent.com/ernisn/superspeed/master/superspeed.sh && chmod +x superspeed.sh && ./superspeed.sh\n\n    #wget -N --no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superspeed.sh && chmod +x superspeed.sh && ./superspeed.sh\n}\n\nfunction vps_yabs(){\n    curl -sL yabs.sh | bash\n}\nfunction vps_bench(){\n    wget -N --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/bench.sh && chmod +x bench.sh && bash bench.sh\n    # wget -N --no-check-certificate https://raw.githubusercontent.com/teddysun/across/master/bench.sh && chmod +x bench.sh && bash bench.sh\n}\nfunction vps_bench_dedicated(){\n    # bash -c \"$(wget -qO- https://github.com/Aniverse/A/raw/i/a)\"\n    wget -N --no-check-certificate -O dedicated_server_bench.sh https://raw.githubusercontent.com/Aniverse/A/i/a && chmod +x dedicated_server_bench.sh && bash dedicated_server_bench.sh\n}\n\nfunction vps_zbench(){\n    wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench-CN.sh && chmod +x ZBench-CN.sh && bash ZBench-CN.sh\n}\nfunction vps_LemonBench(){\n    wget -N --no-check-certificate -O LemonBench.sh https://ilemonra.in/LemonBenchIntl && chmod +x LemonBench.sh && ./LemonBench.sh fast\n}\n\nfunction vps_testrace(){\n    wget -N --no-check-certificate https://raw.githubusercontent.com/nanqinlang-script/testrace/master/testrace.sh && chmod +x testrace.sh && ./testrace.sh\n}\n\nfunction vps_autoBestTrace(){\n    wget -N --no-check-certificate -O autoBestTrace.sh https://raw.githubusercontent.com/zq/shell/master/autoBestTrace.sh && chmod +x autoBestTrace.sh && ./autoBestTrace.sh\n}\nfunction vps_mtrTrace(){\n    curl https://raw.githubusercontent.com/zhucaidan/mtr_trace/main/mtr_trace.sh | bash\n}\nfunction vps_returnroute(){\n    # https://www.zhujizixun.com/6216.html\n    # https://91ai.net/thread-1015693-5-1.html\n    # https://github.com/zhucaidan/mtr_trace\n    wget --no-check-certificate -O route https://tutu.ovh/bash/returnroute/route  && chmod +x route && ./route\n}\nfunction vps_returnroute2(){\n    # curl https://raw.githubusercontent.com/zhanghanyun/backtrace/main/install.sh | sh\n    wget -N --no-check-certificate -O routeGo.sh https://raw.githubusercontent.com/zhanghanyun/backtrace/main/install.sh && chmod +x routeGo.sh && ./routeGo.sh\n}\n\n\n\n\nfunction installBBR(){\n    wget -N --no-check-certificate -O tcp_old.sh \"https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh\" && chmod +x tcp_old.sh && ./tcp_old.sh\n}\n\nfunction installBBR2(){\n    wget -N --no-check-certificate \"https://raw.githubusercontent.com/ylx2016/Linux-NetSpeed/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh\n}\n\n\nfunction installSWAP(){\n    bash <(wget --no-check-certificate -qO- 'https://www.moerats.com/usr/shell/swap.sh')\n}\n\n\n\n\n\nfunction installBTPanel(){\n    if [ \"$osRelease\" == \"centos\" ]; then\n        yum install -y wget && wget -O install.sh http://download.bt.cn/install/install_6.0.sh && sh install.sh\n    else\n        # curl -sSO http://download.bt.cn/install/install_panel.sh && bash install_panel.sh\n        wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh && sudo bash install.sh\n\n    fi\n}\n\nfunction installBTPanelCrack(){\n    echo \"美国节点(直接随意输入 11位数字 跟 1位 密码 就能登录)\"\n    if [ \"$osRelease\" == \"centos\" ]; then\n        yum install -y wget && wget -O btinstall.sh http://io.yu.al/install/install_6.0.sh && sh btinstall.sh\n        # yum install -y wget && wget -O install.sh https://download.fenhao.me/install/install_6.0.sh && sh install.sh\n    else\n        wget -O btinstall.sh http://io.yu.al/install/install_panel.sh && sudo bash btinstall.sh\n        #wget -O install.sh https://download.fenhao.me/install/install-ubuntu_6.0.sh && sudo bash install.sh\n    fi\n}\n\nfunction installBTPanelCrackHostcli(){\n    if [ \"$osRelease\" == \"centos\" ]; then\n        yum install -y wget && wget -O btinstall.sh http://v7.hostcli.com/install/install_6.0.sh && sh btinstall.sh\n    else\n        wget -O btinstall.sh http://v7.hostcli.com/install/install-ubuntu_6.0.sh && sudo bash btinstall.sh\n    fi\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconfigWebsiteFatherPath=\"/nginxweb\"\nconfigWebsitePath=\"${configWebsiteFatherPath}/html\"\nnginxAccessLogFilePath=\"${configWebsiteFatherPath}/nginx-access.log\"\nnginxErrorLogFilePath=\"${configWebsiteFatherPath}/nginx-error.log\"\n\nconfigTrojanWindowsCliPrefixPath=$(cat /dev/urandom | head -1 | md5sum | head -c 20)\nconfigWebsiteDownloadPath=\"${configWebsitePath}/download/${configTrojanWindowsCliPrefixPath}\"\nconfigDownloadTempPath=\"${HOME}/temp\"\n\n\n\nversionTrojan=\"1.16.0\"\ndownloadFilenameTrojan=\"trojan-${versionTrojan}-linux-amd64.tar.xz\"\n\nversionTrojanGo=\"0.10.6\"\ndownloadFilenameTrojanGo=\"trojan-go-linux-amd64.zip\"\n\nversionV2ray=\"5.21.0\"\ndownloadFilenameV2ray=\"v2ray-linux-64.zip\"\n\nversionXray=\"1.8.7\"\ndownloadFilenameXray=\"Xray-linux-64.zip\"\n\nversionTrojanWeb=\"2.10.5\"\ndownloadFilenameTrojanWeb=\"trojan-linux-amd64\"\n\nisTrojanMultiPassword=\"no\"\npromptInfoTrojanName=\"-go\"\n\nisTrojanGoSupportWebsocket=\"false\"\nconfigTrojanGoWebSocketPath=$(cat /dev/urandom | head -1 | md5sum | head -c 8)\nconfigTrojanPasswordPrefixInputDefault=$(cat /dev/urandom | head -1 | md5sum | head -c 3)\n\n\ntrojanInstallType=\"4\"\nconfigTrojanPath=\"${HOME}/trojan\"\nconfigTrojanGoPath=\"${HOME}/trojan-go\"\nconfigTrojanBasePath=\"${configTrojanGoPath}\"\n\nconfigTrojanWebPath=\"${HOME}/trojan-web\"\nconfigTrojanLogFile=\"${HOME}/trojan-access.log\"\n\n\nconfigTrojanBaseVersion=${versionTrojan}\n\nconfigTrojanWebNginxPath=$(cat /dev/urandom | head -1 | md5sum | head -c 5)\nconfigTrojanWebPort=\"$(($RANDOM + 10000))\"\n\nconfigInstallNginxMode=\"\"\nnginxConfigPath=\"/etc/nginx/nginx.conf\"\nnginxConfigSiteConfPath=\"/etc/nginx/conf.d\"\n\n\npromptInfoXrayInstall=\"V2ray\"\npromptInfoXrayVersion=\"\"\npromptInfoXrayName=\"v2ray\"\npromptInfoXrayNameServiceName=\"\"\nisXray=\"no\"\n\nconfigV2rayWebSocketPath=$(cat /dev/urandom | head -1 | md5sum | head -c 8)\nconfigV2rayGRPCServiceName=$(cat /dev/urandom | head -1 | md5sum | head -c 8)\nconfigV2rayPort=\"$(($RANDOM + 10000))\"\nconfigV2rayGRPCPort=\"$(($RANDOM + 10000))\"\nconfigV2rayVmesWSPort=\"$(($RANDOM + 10000))\"\nconfigV2rayVmessTCPPort=\"$(($RANDOM + 10000))\"\nconfigV2rayPortShowInfo=$configV2rayPort\nconfigV2rayPortGRPCShowInfo=$configV2rayGRPCPort\nconfigV2rayIsTlsShowInfo=\"tls\"\nconfigV2rayTrojanPort=\"$(($RANDOM + 10000))\"\n\nconfigV2rayPath=\"${HOME}/v2ray\"\nconfigV2rayAccessLogFilePath=\"${HOME}/v2ray-access.log\"\nconfigV2rayErrorLogFilePath=\"${HOME}/v2ray-error.log\"\nconfigV2rayVmessImportLinkFile1Path=\"${configV2rayPath}/vmess_link1.json\"\nconfigV2rayVmessImportLinkFile2Path=\"${configV2rayPath}/vmess_link2.json\"\nconfigV2rayVlessImportLinkFile1Path=\"${configV2rayPath}/vless_link1.json\"\nconfigV2rayVlessImportLinkFile2Path=\"${configV2rayPath}/vless_link2.json\"\n\nconfigV2rayProtocol=\"vmess\"\nconfigV2rayWorkingMode=\"\"\nconfigV2rayWorkingNotChangeMode=\"\"\nconfigV2rayStreamSetting=\"\"\n\n\nconfigReadme=${HOME}/readme_trojan_v2ray.txt\n\n\nfunction downloadAndUnzip(){\n    if [ -z $1 ]; then\n        green \" ================================================== \"\n        green \"     下载文件地址为空!\"\n        green \" ================================================== \"\n        exit\n    fi\n    if [ -z $2 ]; then\n        green \" ================================================== \"\n        green \"     目标路径地址为空!\"\n        green \" ================================================== \"\n        exit\n    fi\n    if [ -z $3 ]; then\n        green \" ================================================== \"\n        green \"     下载文件的文件名为空!\"\n        green \" ================================================== \"\n        exit\n    fi\n\n    mkdir -p ${configDownloadTempPath}\n\n    if [[ $3 == *\"tar.xz\"* ]]; then\n        green \"===== 下载并解压tar文件: $3 \"\n        wget -O ${configDownloadTempPath}/$3 $1\n        tar xf ${configDownloadTempPath}/$3 -C ${configDownloadTempPath}\n\n        mv ${configDownloadTempPath}/* $2\n\n\n    elif [[ $3 == *\"tar.gz\"* ]]; then\n        green \"===== 下载并解压tar.gz文件: $3 \"\n        wget -O ${configDownloadTempPath}/$3 $1\n        tar -xzvf ${configDownloadTempPath}/$3 -C ${configDownloadTempPath}\n        mv ${configDownloadTempPath}/easymosdns/* $2\n\n    else\n        green \"===== 下载并解压zip文件:  $3 \"\n        wget -O ${configDownloadTempPath}/$3 $1\n        unzip -d $2 ${configDownloadTempPath}/$3\n    fi\n    rm -rf ${configDownloadTempPath}/*\n\n}\n\nfunction getGithubLatestReleaseVersion(){\n    # https://github.com/p4gefau1t/trojan-go/issues/63\n    # wget --no-check-certificate -qO- https://api.github.com/repos/XTLS/Xray-core/tags | grep 'name' | cut -d\\\" -f4 | head -1 | cut -b 2-\n    # wget --no-check-certificate -qO- https://api.github.com/repos/v2fly/v2ray-core/tags | grep 'name' | cut -d\\\" -f4 | head -1 | cut -b 2-\n    # wget --no-check-certificate -qO- https://api.github.com/repos/v2fly/v2ray-core/releases/latest | grep 'name' | cut -d\\\" -f4 | head -1 | cut -b 2-\n    wget --no-check-certificate -qO- https://api.github.com/repos/$1/tags | grep 'name' | cut -d\\\" -f4 | head -1 | cut -b 2-\n}\n\n\nfunction getV2rayVersion(){\n    # https://github.com/trojan-gfw/trojan/releases/download/v1.16.0/trojan-1.16.0-linux-amd64.tar.xz\n\n    echo\n\n    if [[ $1 == \"v2ray\" ]] ; then\n        echo\n        green \" ================================================== \"\n        green \" 请选择 V2ray 的版本, 默认直接回车为 稳定版4.45.2 (推荐)\"\n        green \" 选否则安装最新版的 V2ray 5.21.0\"\n        echo\n        read -r -p \"是否安装稳定版V2ray? 默认直接回车为稳定版4.45.2, 请输入[Y/n]:\" isInstallXrayVersionInput\n        isInstallXrayVersionInput=${isInstallXrayVersionInput:-Y}\n        echo\n\n        if [[ $isInstallXrayVersionInput == [Yy] ]]; then\n            versionV2ray=\"4.45.2\"\n        else\n            versionV2ray=$(getGithubLatestReleaseVersion \"v2fly/v2ray-core\")\n        fi\n        echo \"versionV2ray: ${versionV2ray}\"\n    fi\n\n    if [[ $1 == \"xray\" ]] ; then\n        echo\n        green \" ================================================== \"\n        tempXrayVersionDisplayText=\"5\"\n\n        yellow \" Xray 1.6.0 及以上的版本, 支持 Shadowsocks-2022\"\n        yellow \" Xray 1.7.0 及以上的版本, 支持 xtls-rprx-vision\"\n        yellow \" Xray 1.8.0 及以上的版本, 支持 REALITY 协议 \"\n        yellow \" Xray 1.8.21 及以上的版本, 支持 SplitHTTP for HTTP/3(QUIC) \"\n        echo\n\n        if [[ $2 == \"update\" ]]; then\n            red \"升级 1.8.7 或以上版本可能导致 启动失败, 不兼容旧版 XTLS 配置!\"\n        fi\n        green \" ================================================== \"\n\n        if [[ $configV2rayWorkingMode == \"vlessTCPREALITY\" ||  $configV2rayWorkingMode == \"vlessTCPVision\" ]]; then\n            tempXrayVersionDisplayText=\"1\"\n            green \" 请选择 Xray 的版本, 默认直接回车为 1.8.24 或以上的最新版本\"\n            echo\n            green \" 1. 24.9.30 或以上的最新版本 支持 REALITY 和 SplitHTTP\"\n            green \" 2. 1.8.24 支持 SplitHTTP for HTTP/3 旧版本号格式的最后一个版本\"\n            green \" 3. 1.8.13 支持 REALITY (推荐)\"\n            green \" 4. 1.8.11 支持 REALITY (推荐) HTTPUpgrade path 后加上 ?ed=2560 才会启用 0-RTT\"\n            green \" 5. 1.8.4 支持 REALITY 此为最后一个支持win7的版本\"\n            green \" 6. 1.7.5 支持 XTLS Vision\"\n        else\n            green \" 请选择 Xray 的版本, 默认直接回车为 1.8.4\"\n            echo\n            green \" 1. 24.9.30 或以上的最新版本 支持 REALITY 和 SplitHTTP\"\n            green \" 2. 1.8.24 支持 SplitHTTP for HTTP/3 旧版本号格式的最后一个版本\"\n            green \" 3. 1.8.13 支持 REALITY (推荐)\"\n            green \" 4. 1.8.11 支持 REALITY (推荐) HTTPUpgrade path 后加上 ?ed=2560 才会启用 0-RTT\"\n            green \" 5. 1.8.4 支持 REALITY 此为最后一个支持win7的版本\"\n            green \" 6. 1.7.5 支持 XTLS Vision\"\n            green \" 7. 1.6.1 (推荐) 支持 Shadowsocks-2022\"\n            green \" 8. 1.5.5\"\n            green \" 9. 1.5.4\"\n            green \" 10. 1.5.2\"\n            green \" 11. 1.5.1 VMESS AEAD 从2022/1/1/强制启用 请注意更新服务端 移除alterId参数\"\n            green \" 12. 1.5.0\"\n            green \" 13. 1.4.5\"\n            green \" 14. 1.3.1\"\n        fi\n\n\n        echo\n        read -r -p \"请选择Xray版本? 直接回车默认选${tempXrayVersionDisplayText}, 请输入纯数字:\" isXrayVersionInput\n        isXrayVersionInput=${isXrayVersionInput:-${tempXrayVersionDisplayText}}\n\n        if [[ \"${isXrayVersionInput}\" == \"1\" ]]; then\n            versionXray=$(getGithubLatestReleaseVersion \"XTLS/Xray-core\")\n            # versionXray=\"24.9.30\"\n        elif [[ \"${isXrayVersionInput}\" == \"2\" ]]; then\n            versionXray=\"1.8.24\"\n        elif [[ \"${isXrayVersionInput}\" == \"3\" ]]; then\n            versionXray=\"1.8.13\"\n        elif [[ \"${isXrayVersionInput}\" == \"4\" ]]; then\n            versionXray=\"1.8.11\"\n        elif [[ \"${isXrayVersionInput}\" == \"5\" ]]; then\n            versionXray=\"1.8.4\"\n\n        elif [[ \"${isXrayVersionInput}\" == \"6\" ]]; then\n            versionXray=\"1.7.5\"\n\n        elif [[ \"${isXrayVersionInput}\" == \"7\" ]]; then\n            versionXray=\"1.6.1\"\n\n        elif [[ \"${isXrayVersionInput}\" == \"8\" ]]; then\n            versionXray=\"1.5.5\"\n\n        elif [[ \"${isXrayVersionInput}\" == \"9\" ]]; then\n            versionXray=\"1.5.4\"\n        elif [[ \"${isXrayVersionInput}\" == \"10\" ]]; then\n            versionXray=\"1.5.2\"\n\n        elif [[ \"${isXrayVersionInput}\" == \"11\" ]]; then\n            versionXray=\"1.5.1\"\n\n        elif [[ \"${isXrayVersionInput}\" == \"12\" ]]; then\n            versionXray=\"1.5.0\"\n        elif [[ \"${isXrayVersionInput}\" == \"13\" ]]; then\n            versionXray=\"1.4.5\"\n        elif [[ \"${isXrayVersionInput}\" == \"14\" ]]; then\n            versionXray=\"1.3.1\"\n\n        else\n            versionXray=\"1.8.4\"\n        fi\n\n        echo \"versionXray: ${versionXray}\"\n    fi\n\n\n    if [[ $1 == \"trojan-web\" ]] ; then\n        versionTrojanWeb=$(getGithubLatestReleaseVersion \"Jrohy/trojan\")\n        echo \"versionTrojanWeb: ${versionTrojanWeb}\"\n    fi\n\n    if [[ $1 == \"wgcf\" ]] ; then\n        versionWgcf=$(getGithubLatestReleaseVersion \"ViRb3/wgcf\")\n        downloadFilenameWgcf=\"wgcf_${versionWgcf}_linux_amd64\"\n        echo \"versionWgcf: ${versionWgcf}\"\n    fi\n\n}\n\n\n\n\n\n\n\n\nconfigNetworkRealIp=\"\"\nconfigSSLDomain=\"\"\n\n\n\nacmeSSLRegisterEmailInput=\"\"\nisDomainSSLGoogleEABKeyInput=\"\"\nisDomainSSLGoogleEABIdInput=\"\"\n\nfunction getHTTPSCertificateCheckEmail(){\n    if [ -z $2 ]; then\n\n        if [[ $1 == \"email\" ]]; then\n            red \" 输入邮箱地址不能为空, 请重新输入!\"\n            getHTTPSCertificateInputEmail\n        elif [[ $1 == \"googleEabKey\" ]]; then\n            red \" 输入EAB key 不能为空, 请重新输入!\"\n            getHTTPSCertificateInputGoogleEABKey\n        elif [[ $1 == \"googleEabId\" ]]; then\n            red \" 输入EAB Id 不能为空, 请重新输入!\"\n            getHTTPSCertificateInputGoogleEABId\n        fi\n    fi\n}\nfunction getHTTPSCertificateInputEmail(){\n    echo\n    read -r -p \"请输入邮箱地址, 用于申请SSL证书:\" acmeSSLRegisterEmailInput\n    getHTTPSCertificateCheckEmail \"email\" \"${acmeSSLRegisterEmailInput}\"\n}\nfunction getHTTPSCertificateInputGoogleEABKey(){\n    echo\n    read -r -p \"请输入 Google EAB key :\" isDomainSSLGoogleEABKeyInput\n    getHTTPSCertificateCheckEmail \"googleEabKey\" \"${isDomainSSLGoogleEABKeyInput}\"\n}\nfunction getHTTPSCertificateInputGoogleEABId(){\n    echo\n    read -r -p \"请输入 Google EAB id :\" isDomainSSLGoogleEABIdInput\n    getHTTPSCertificateCheckEmail \"googleEabId\" \"${isDomainSSLGoogleEABIdInput}\"\n}\n\n\nacmeSSLDays=\"89\"\nacmeSSLServerName=\"letsencrypt\"\nacmeSSLDNSProvider=\"dns_cf\"\n\nconfigRanPath=\"${HOME}/ran\"\nconfigSSLAcmeScriptPath=\"${HOME}/.acme.sh\"\nconfigSSLCertPath=\"${configWebsiteFatherPath}/cert\"\n\nconfigSSLCertKeyFilename=\"server.key\"\nconfigSSLCertFullchainFilename=\"server_fullchain.cert\"\n\n\nfunction renewCertificationWithAcme(){\n\n    # https://stackoverflow.com/questions/8880603/loop-through-an-array-of-strings-in-bash\n    # https://stackoverflow.com/questions/9954680/how-to-store-directory-files-listing-into-an-array\n\n    shopt -s nullglob\n    renewDomainArray=(\"${configSSLAcmeScriptPath}\"/*ecc*)\n\n    COUNTER1=1\n\n    if [ ${#renewDomainArray[@]} -ne 0 ]; then\n        echo\n        green \" ================================================== \"\n        green \" 检测到本机已经申请过域名证书 是否新增申请域名证书\"\n        yellow \" 新安装或卸载后重新安装trojan或v2ray 请选择新增而不要选择续签\"\n        echo\n        green \" 1. 新增申请域名证书\"\n        green \" 2. 续签已申请域名证书\"\n        green \" 3. 删除已申请域名证书\"\n        echo\n        read -r -p \"请选择是否新增域名证书? 默认直接回车为新增, 请输入纯数字:\" isAcmeSSLAddNewInput\n        isAcmeSSLAddNewInput=${isAcmeSSLAddNewInput:-1}\n        if [[ \"$isAcmeSSLAddNewInput\" == \"2\" || \"$isAcmeSSLAddNewInput\" == \"3\" ]]; then\n\n            echo\n            green \" ================================================== \"\n            green \" 请选择要续签或要删除的域名:\"\n            echo\n            for renewDomainName in \"${renewDomainArray[@]}\"; do\n\n                substr=${renewDomainName##*/}\n                substr=${substr%_ecc*}\n                renewDomainArrayFix[${COUNTER1}]=\"$substr\"\n                echo \" ${COUNTER1}. 域名: ${substr}\"\n\n                COUNTER1=$((COUNTER1 +1))\n            done\n\n            echo\n            read -r -p \"请选择域名? 请输入纯数字:\" isRenewDomainSelectNumberInput\n            isRenewDomainSelectNumberInput=${isRenewDomainSelectNumberInput:-99}\n\n            if [[ \"$isRenewDomainSelectNumberInput\" == \"99\" ]]; then\n                red \" 输入错误, 请重新输入!\"\n                echo\n                read -r -p \"请选择域名? 请输入纯数字:\" isRenewDomainSelectNumberInput\n                isRenewDomainSelectNumberInput=${isRenewDomainSelectNumberInput:-99}\n\n                if [[ \"$isRenewDomainSelectNumberInput\" == \"99\" ]]; then\n                    red \" 输入错误, 退出!\"\n                    exit\n                else\n                    echo\n                fi\n            else\n                echo\n            fi\n\n            configSSLRenewDomain=${renewDomainArrayFix[${isRenewDomainSelectNumberInput}]}\n\n\n            if [[ -n $(${configSSLAcmeScriptPath}/acme.sh --list | grep ${configSSLRenewDomain}) ]]; then\n\n                if [[ \"$isAcmeSSLAddNewInput\" == \"2\" ]]; then\n                    ${configSSLAcmeScriptPath}/acme.sh --renew -d ${configSSLRenewDomain} --force --ecc\n                    echo\n                    green \" 域名 ${configSSLRenewDomain} 的证书已经成功续签!\"\n\n                elif [[ \"$isAcmeSSLAddNewInput\" == \"3\" ]]; then\n                    ${configSSLAcmeScriptPath}/acme.sh --revoke -d ${configSSLRenewDomain} --ecc\n                    ${configSSLAcmeScriptPath}/acme.sh --remove -d ${configSSLRenewDomain} --ecc\n\n                    rm -rf \"${configSSLAcmeScriptPath}/${configSSLRenewDomain}_ecc\"\n                    echo\n                    green \" 域名 ${configSSLRenewDomain} 的证书已经删除成功!\"\n                    exit\n                fi\n            else\n                echo\n                red \" 您选择的域名 ${configSSLRenewDomain} 证书不存在！\"\n            fi\n\n        else\n            getHTTPSCertificateStep1\n        fi\n\n    else\n        getHTTPSCertificateStep1\n    fi\n\n}\n\nfunction getHTTPSCertificateWithAcme(){\n\n    # 申请https证书\n    mkdir -p ${configSSLCertPath}\n    mkdir -p ${configWebsitePath}\n\n    getHTTPSCertificateInputEmail\n\n    curl https://get.acme.sh | sh -s email=${acmeSSLRegisterEmailInput}\n\n\n    echo\n    green \" ================================================== \"\n    green \" 请选择证书提供商, 默认通过 Letsencrypt.org 来申请证书 \"\n    green \" 如果证书申请失败, 例如一天内通过 Letsencrypt.org 申请次数过多, 可选 BuyPass.com 或 ZeroSSL.com 来申请.\"\n    green \" 1 Letsencrypt.org \"\n    green \" 2 BuyPass.com \"\n    green \" 3 ZeroSSL.com \"\n    green \" 4 Google Public CA \"\n    echo\n    read -r -p \"请选择证书提供商? 默认直接回车为通过 Letsencrypt.org 申请, 请输入纯数字:\" isDomainSSLFromLetInput\n    isDomainSSLFromLetInput=${isDomainSSLFromLetInput:-1}\n\n    if [[ \"$isDomainSSLFromLetInput\" == \"2\" ]]; then\n\n        acmeSSLDays=\"179\"\n        acmeSSLServerName=\"buypass\"\n        echo\n        ${configSSLAcmeScriptPath}/acme.sh --register-account --accountemail ${acmeSSLRegisterEmailInput} --server buypass\n\n    elif [[ \"$isDomainSSLFromLetInput\" == \"3\" ]]; then\n\n        acmeSSLServerName=\"zerossl\"\n        echo\n        ${configSSLAcmeScriptPath}/acme.sh --register-account -m ${acmeSSLRegisterEmailInput} --server zerossl\n\n    elif [[ \"$isDomainSSLFromLetInput\" == \"4\" ]]; then\n        green \" ================================================== \"\n        yellow \" 请先按照如下链接申请 google Public CA  https://hostloc.com/thread-993780-1-1.html\"\n        yellow \" 具体可参考 https://github.com/acmesh-official/acme.sh/wiki/Google-Public-CA\"\n\n        acmeSSLServerName=\"google\"\n        getHTTPSCertificateInputGoogleEABKey\n        getHTTPSCertificateInputGoogleEABId\n        ${configSSLAcmeScriptPath}/acme.sh --register-account -m ${acmeSSLRegisterEmailInput} --server google --eab-kid ${isDomainSSLGoogleEABIdInput} --eab-hmac-key ${isDomainSSLGoogleEABKeyInput}\n    else\n        acmeSSLServerName=\"letsencrypt\"\n        #${configSSLAcmeScriptPath}/acme.sh --issue -d ${configSSLDomain} --webroot ${configWebsitePath} --keylength ec-256 --days 89 --server letsencrypt\n    fi\n\n\n    echo\n    green \" ================================================== \"\n    green \" 请选择 acme.sh 脚本申请SSL证书方式: 1 http方式, 2 dns方式 \"\n    green \" 默认直接回车为 http 申请方式, 选否则为 dns 方式\"\n    echo\n    read -r -p \"请选择SSL证书申请方式 ? 默认直接回车为http方式, 选否则为 dns 方式申请证书, 请输入[Y/n]:\" isAcmeSSLRequestMethodInput\n    isAcmeSSLRequestMethodInput=${isAcmeSSLRequestMethodInput:-Y}\n    echo\n\n    if [[ $isAcmeSSLRequestMethodInput == [Yy] ]]; then\n        acmeSSLHttpWebrootMode=\"\"\n\n        if [[ -n \"${configInstallNginxMode}\" ]]; then\n            acmeDefaultValue=\"3\"\n            acmeDefaultText=\"3. webroot 并使用ran作为临时的Web服务器\"\n            acmeSSLHttpWebrootMode=\"webrootran\"\n        else\n            acmeDefaultValue=\"1\"\n            acmeDefaultText=\"1. standalone 模式\"\n            acmeSSLHttpWebrootMode=\"standalone\"\n        fi\n\n        if [ -z \"$1\" ]; then\n\n            checkPortUsage \"80\"\n\n            green \" ================================================== \"\n            green \" 请选择 http 申请证书方式: 默认直接回车为 ${acmeDefaultText} \"\n            green \" 1 standalone 模式, 适合没有安装Web服务器, 如已选择不安装Nginx 请选择此模式. 请确保80端口不被占用. 注意:三个月后续签时80端口被占用会导致续签失败!\"\n            green \" 2 webroot 模式, 适合已经安装Web服务器, 例如 Caddy Apache 或 Nginx, 请确保Web服务器已经运行在80端口\"\n            green \" 3 webroot 模式 并使用 ran 作为临时的Web服务器, 如已选择同时安装Nginx，请使用此模式, 可以正常续签\"\n            green \" 4 nginx 模式 适合已经安装 Nginx, 请确保 Nginx 已经运行\"\n            echo\n            read -r -p \"请选择http申请证书方式? 默认为 ${acmeDefaultText}, 请输入纯数字:\" isAcmeSSLWebrootModeInput\n\n            isAcmeSSLWebrootModeInput=${isAcmeSSLWebrootModeInput:-${acmeDefaultValue}}\n\n            if [[ ${isAcmeSSLWebrootModeInput} == \"1\" ]]; then\n                acmeSSLHttpWebrootMode=\"standalone\"\n            elif [[ ${isAcmeSSLWebrootModeInput} == \"2\" ]]; then\n                acmeSSLHttpWebrootMode=\"webroot\"\n            elif [[ ${isAcmeSSLWebrootModeInput} == \"4\" ]]; then\n                acmeSSLHttpWebrootMode=\"nginx\"\n            else\n                acmeSSLHttpWebrootMode=\"webrootran\"\n            fi\n        else\n            if [[ $1 == \"standalone\" ]]; then\n                acmeSSLHttpWebrootMode=\"standalone\"\n            elif [[ $1 == \"webroot\" ]]; then\n                acmeSSLHttpWebrootMode=\"webroot\"\n            elif [[ $1 == \"webrootran\" ]] ; then\n                acmeSSLHttpWebrootMode=\"webrootran\"\n            elif [[ $1 == \"nginx\" ]] ; then\n                acmeSSLHttpWebrootMode=\"nginx\"\n            fi\n        fi\n\n        echo\n        if [[ ${acmeSSLHttpWebrootMode} == \"standalone\" ]] ; then\n            green \" 开始申请证书 acme.sh 通过 http standalone mode 从 ${acmeSSLServerName} 申请, 请确保80端口不被占用 \"\n\n            echo\n            ${configSSLAcmeScriptPath}/acme.sh --issue -d ${configSSLDomain} --standalone --keylength ec-256 --days ${acmeSSLDays} --server ${acmeSSLServerName}\n\n        elif [[ ${acmeSSLHttpWebrootMode} == \"webroot\" ]] ; then\n            green \" 开始申请证书, acme.sh 通过 http webroot mode 从 ${acmeSSLServerName} 申请, 请确保web服务器 例如 nginx 已经运行在80端口 \"\n\n            echo\n            read -r -p \"请输入Web服务器的html网站根目录路径? 例如/usr/share/nginx/html:\" isDomainSSLNginxWebrootFolderInput\n            echo \" 您输入的网站根目录路径为 ${isDomainSSLNginxWebrootFolderInput}\"\n\n            if [ -z ${isDomainSSLNginxWebrootFolderInput} ]; then\n                red \" 输入的Web服务器的 html网站根目录路径不能为空, 网站根目录将默认设置为 ${configWebsitePath}, 请修改你的web服务器配置后再申请证书!\"\n\n            else\n                configWebsitePath=\"${isDomainSSLNginxWebrootFolderInput}\"\n            fi\n\n            echo\n            ${configSSLAcmeScriptPath}/acme.sh --issue -d ${configSSLDomain} --webroot ${configWebsitePath} --keylength ec-256 --days ${acmeSSLDays} --server ${acmeSSLServerName}\n\n        elif [[ ${acmeSSLHttpWebrootMode} == \"nginx\" ]] ; then\n            green \" 开始申请证书, acme.sh 通过 http nginx mode 从 ${acmeSSLServerName} 申请, 请确保web服务器 nginx 已经运行 \"\n\n            echo\n            ${configSSLAcmeScriptPath}/acme.sh --issue -d ${configSSLDomain} --nginx --keylength ec-256 --days ${acmeSSLDays} --server ${acmeSSLServerName}\n\n        elif [[ ${acmeSSLHttpWebrootMode} == \"webrootran\" ]] ; then\n\n            # https://github.com/m3ng9i/ran/issues/10\n\n            ranDownloadUrl=\"https://github.com/m3ng9i/ran/releases/download/v0.1.6/ran_linux_amd64.zip\"\n            ranDownloadFileName=\"ran_linux_amd64\"\n\n            if [[ \"${osArchitecture}\" == \"arm64\" || \"${osArchitecture}\" == \"arm\" ]]; then\n                ranDownloadUrl=\"https://github.com/m3ng9i/ran/releases/download/v0.1.6/ran_linux_arm64.zip\"\n                ranDownloadFileName=\"ran_linux_arm64\"\n            fi\n\n\n            mkdir -p ${configRanPath}\n\n            if [[ -f \"${configRanPath}/${ranDownloadFileName}\" ]]; then\n                green \" 检测到 ran 已经下载过, 准备启动 ran 临时的web服务器 \"\n            else\n                green \" 开始下载 ran 作为临时的web服务器 \"\n                downloadAndUnzip \"${ranDownloadUrl}\" \"${configRanPath}\" \"${ranDownloadFileName}\"\n                chmod +x \"${configRanPath}/${ranDownloadFileName}\"\n            fi\n\n            echo \"nohup ${configRanPath}/${ranDownloadFileName} -l=false -g=false -sa=true -p=80 -r=${configWebsitePath} >/dev/null 2>&1 &\"\n            nohup ${configRanPath}/${ranDownloadFileName} -l=false -g=false -sa=true -p=80 -r=${configWebsitePath} >/dev/null 2>&1 &\n            echo\n\n            green \" 开始申请证书, acme.sh 通过 http webroot mode 从 ${acmeSSLServerName} 申请, 并使用 ran 作为临时的web服务器 \"\n            echo\n            ${configSSLAcmeScriptPath}/acme.sh --issue -d ${configSSLDomain} --webroot ${configWebsitePath} --keylength ec-256 --days ${acmeSSLDays} --server ${acmeSSLServerName}\n\n            sleep 4\n            ps -C ${ranDownloadFileName} -o pid= | xargs -I {} kill {}\n        fi\n\n    else\n        green \" 开始申请证书, acme.sh 通过 dns mode 申请 \"\n\n        echo\n        green \"请选择 DNS provider DNS 提供商: 1 CloudFlare, 2 AliYun,  3 DNSPod(Tencent), 4 GoDaddy \"\n        red \"注意 CloudFlare 针对某些免费域名例如 .tk .cf 等  不再支持使用API 申请DNS证书 \"\n        echo\n        read -r -p \"请选择 DNS 提供商 ? 默认直接回车为 1. CloudFlare, 请输入纯数字:\" isAcmeSSLDNSProviderInput\n        isAcmeSSLDNSProviderInput=${isAcmeSSLDNSProviderInput:-1}\n\n\n        if [ \"$isAcmeSSLDNSProviderInput\" == \"2\" ]; then\n            read -r -p \"Please Input Ali Key: \" Ali_Key\n            export Ali_Key=\"${Ali_Key}\"\n            read -r -p \"Please Input Ali Secret: \" Ali_Secret\n            export Ali_Secret=\"${Ali_Secret}\"\n            acmeSSLDNSProvider=\"dns_ali\"\n\n        elif [ \"$isAcmeSSLDNSProviderInput\" == \"3\" ]; then\n            read -r -p \"Please Input DNSPod API ID: \" DP_Id\n            export DP_Id=\"${DP_Id}\"\n            read -r -p \"Please Input DNSPod API Key: \" DP_Key\n            export DP_Key=\"${DP_Key}\"\n            acmeSSLDNSProvider=\"dns_dp\"\n\n        elif [ \"$isAcmeSSLDNSProviderInput\" == \"4\" ]; then\n            read -r -p \"Please Input GoDaddy API Key: \" gd_Key\n            export GD_Key=\"${gd_Key}\"\n            read -r -p \"Please Input GoDaddy API Secret: \" gd_Secret\n            export GD_Secret=\"${gd_Secret}\"\n            acmeSSLDNSProvider=\"dns_gd\"\n\n        else\n            read -r -p \"Please Input CloudFlare Email: \" cf_email\n            export CF_Email=\"${cf_email}\"\n            read -r -p \"Please Input CloudFlare Global API Key: \" cf_key\n            export CF_Key=\"${cf_key}\"\n            acmeSSLDNSProvider=\"dns_cf\"\n        fi\n\n        echo\n        ${configSSLAcmeScriptPath}/acme.sh --issue -d \"${configSSLDomain}\" --dns ${acmeSSLDNSProvider} --force --keylength ec-256 --server ${acmeSSLServerName} --debug\n\n    fi\n\n    echo\n    if [[ ${isAcmeSSLWebrootModeInput} == \"1\" ]]; then\n        ${configSSLAcmeScriptPath}/acme.sh --installcert --ecc -d ${configSSLDomain} \\\n        --key-file ${configSSLCertPath}/${configSSLCertKeyFilename} \\\n        --fullchain-file ${configSSLCertPath}/${configSSLCertFullchainFilename}\n    else\n        ${configSSLAcmeScriptPath}/acme.sh --installcert --ecc -d ${configSSLDomain} \\\n        --key-file ${configSSLCertPath}/${configSSLCertKeyFilename} \\\n        --fullchain-file ${configSSLCertPath}/${configSSLCertFullchainFilename} \\\n        --reloadcmd \"systemctl restart nginx.service\"\n    fi\n    green \" ================================================== \"\n}\n\n\n\n\nfunction compareRealIpWithLocalIp(){\n    echo\n    green \" 是否检测域名指向的IP正确 直接回车默认检测\"\n    red \" 如果域名指向的IP不是本机IP, 或已开启CDN不方便关闭 或只有IPv6的VPS 可以选否不检测\"\n    read -r -p \"是否检测域名指向的IP正确? 请输入[Y/n]:\" isDomainValidInput\n    isDomainValidInput=${isDomainValidInput:-Y}\n\n    if [[ $isDomainValidInput == [Yy] ]]; then\n        if [[ -n \"$1\" ]]; then\n            configNetworkRealIp=$(ping $1 -c 1 | sed '1{s/[^(]*(//;s/).*//;q}')\n            # https://unix.stackexchange.com/questions/22615/how-can-i-get-my-external-ip-address-in-a-shell-script\n            configNetworkLocalIp1=\"$(curl http://whatismyip.akamai.com/)\"\n            configNetworkLocalIp2=\"$(curl https://checkip.amazonaws.com/)\"\n            #configNetworkLocalIp3=\"$(curl https://ipv4.icanhazip.com/)\"\n            #configNetworkLocalIp4=\"$(curl https://v4.ident.me/)\"\n            #configNetworkLocalIp5=\"$(curl https://api.ip.sb/ip)\"\n            #configNetworkLocalIp6=\"$(curl https://ipinfo.io/ip)\"\n\n\n            #configNetworkLocalIPv61=\"$(curl https://ipv6.icanhazip.com/)\"\n            #configNetworkLocalIPv62=\"$(curl https://v6.ident.me/)\"\n\n\n            green \" ================================================== \"\n            green \" 域名解析地址为 ${configNetworkRealIp}, 本VPS的IP为 ${configNetworkLocalIp1} \"\n\n            echo\n            if [[ ${configNetworkRealIp} == \"${configNetworkLocalIp1}\" || ${configNetworkRealIp} == \"${configNetworkLocalIp2}\" ]] ; then\n\n                green \" 域名解析的IP正常!\"\n                green \" ================================================== \"\n                true\n            else\n                red \" 域名解析地址与本VPS的IP地址不一致!\"\n                red \" 本次安装失败，请确保域名解析正常, 请检查域名和DNS是否生效!\"\n                green \" ================================================== \"\n                false\n            fi\n        else\n            green \" ================================================== \"\n            red \"     域名输入错误!\"\n            green \" ================================================== \"\n            false\n        fi\n\n    else\n        green \" ================================================== \"\n        green \"     不检测域名解析是否正确!\"\n        green \" ================================================== \"\n        true\n    fi\n}\n\n\nfunction getHTTPSCertificateStep1(){\n\n    echo\n    green \" ================================================== \"\n    green \" 请输入证书要放置的路径:  默认为${configSSLCertPath} \"\n    yellow \" 自定义证书路径可能会导致安装失败 仅供高手使用 \"\n    yellow \" 自定义证书路径需要预先创建好, 否则会使用默认路径${configSSLCertPath} \"\n    echo\n    read -r -p \"请输入证书路径 默认直接回车为${configSSLCertPath}\" configSSLFilePath\n    configSSLFilePath=${configSSLFilePath:-${configSSLCertPath}}\n    if [ -z \"${configSSLFilePath}\" ]; then\n        configSSLFilePath=\"${configSSLCertPath}\"\n        red \" 输入的自定义证书路径为空, 将使用默认路径${configSSLCertPath} \"\n    fi\n    if [ ! -d \"${configSSLFilePath}\" ]; then\n        configSSLFilePath=\"${configSSLCertPath}\"\n        red \" 输入的自定义证书路径为不存在, 将使用默认路径${configSSLCertPath} \"\n    fi\n    configSSLCertPath=\"${configSSLFilePath}\"\n\n    echo\n    green \" ================================================== \"\n    yellow \" 请输入解析到本VPS的域名 例如 www.xxx.com: (此步骤请关闭CDN后和nginx后安装 避免80端口占用导致申请证书失败)\"\n    read -r -p \"请输入解析到本VPS的域名:\" configSSLDomain\n\n    if compareRealIpWithLocalIp \"${configSSLDomain}\" ; then\n        echo\n        green \" ==================================================\"\n        green \" 是否申请证书? 默认直接回车为申请证书, 如第二次安装或已有证书 可以选否\"\n        green \" 如果已经有SSL证书文件 请放到下面路径\"\n        red \" ${configSSLDomain} 域名证书内容文件路径 ${configSSLCertPath}/${configSSLCertFullchainFilename} \"\n        red \" ${configSSLDomain} 域名证书私钥文件路径 ${configSSLCertPath}/${configSSLCertKeyFilename} \"\n        echo\n\n        read -r -p \"是否申请证书? 默认直接回车为自动申请证书,请输入[Y/n]:\" isDomainSSLRequestInput\n        isDomainSSLRequestInput=${isDomainSSLRequestInput:-Y}\n\n        if [[ $isDomainSSLRequestInput == [Yy] ]]; then\n            getHTTPSCertificateWithAcme \"\"\n        else\n            green \" ==================================================\"\n            green \" 不申请域名的证书, 请把证书放到如下目录, 或自行修改trojan或v2ray配置!\"\n            green \" ${configSSLDomain} 域名证书内容文件路径 ${configSSLCertPath}/${configSSLCertFullchainFilename} \"\n            green \" ${configSSLDomain} 域名证书私钥文件路径 ${configSSLCertPath}/${configSSLCertKeyFilename} \"\n            green \" ==================================================\"\n        fi\n    else\n        exit\n    fi\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\nwwwUsername=\"www-data\"\nfunction createUserWWW(){\n    isHaveWwwUser=$(cat /etc/passwd | cut -d \":\" -f 1 | grep ^${wwwUsername}$)\n    if [ \"${isHaveWwwUser}\" != \"${wwwUsername}\" ]; then\n        ${sudoCmd} groupadd ${wwwUsername}\n        ${sudoCmd} useradd -s /usr/sbin/nologin -g ${wwwUsername} ${wwwUsername} --no-create-home\n    fi\n}\n\nfunction stopServiceNginx(){\n    serviceNginxStatus=$(ps -aux | grep \"nginx: worker\" | grep -v \"grep\")\n    if [[ -n \"$serviceNginxStatus\" ]]; then\n        ${sudoCmd} systemctl stop nginx.service\n    fi\n}\n\nfunction stopServiceV2ray(){\n    if [[ -f \"${osSystemMdPath}v2ray.service\" ]] || [[ -f \"/etc/systemd/system/v2ray.service\" ]] || [[ -f \"/lib/systemd/system/v2ray.service\" ]] ; then\n        ${sudoCmd} systemctl stop v2ray.service\n    fi\n    if [[ -f \"${osSystemMdPath}xray.service\" ]] || [[ -f \"/etc/systemd/system/xray.service\" ]] || [[ -f \"/lib/systemd/system/xray.service\" ]] ; then\n        ${sudoCmd} systemctl stop xray.service\n    fi\n}\n\n\n\nfunction installWebServerNginx(){\n\n    echo\n    green \" ================================================== \"\n    yellow \"     开始安装 Web服务器 nginx !\"\n    green \" ================================================== \"\n    echo\n\n    if test -s ${nginxConfigPath}; then\n        showHeaderRed \"Nginx 已存在, 是否继续安装? \" \"Nginx already exists. Continue the installation? \"\n        promptContinueOpeartion\n\n        ${sudoCmd} systemctl stop nginx.service\n    else\n        stopServiceV2ray\n\n        createUserWWW\n        nginxUser=\"${wwwUsername} ${wwwUsername}\"\n\n\n        if [ \"$osRelease\" == \"centos\" ]; then\n            ${osSystemPackage} install -y nginx-mod-stream\n        else\n            echo\n            groupadd -r -g 4 adm\n\n            apt autoremove -y\n            apt-get remove --purge -y nginx-common\n            apt-get remove --purge -y nginx-core\n            apt-get remove --purge -y libnginx-mod-stream\n            apt-get remove --purge -y libnginx-mod-http-xslt-filter libnginx-mod-http-geoip2 libnginx-mod-stream-geoip2 libnginx-mod-mail libnginx-mod-http-image-filter\n\n            apt autoremove -y --purge nginx nginx-common nginx-core\n            apt-get remove --purge -y nginx nginx-full nginx-common nginx-core\n\n            #${osSystemPackage} install -y libnginx-mod-stream\n        fi\n\n        ${osSystemPackage} install -y nginx\n        ${sudoCmd} systemctl enable nginx.service\n        ${sudoCmd} systemctl stop nginx.service\n\n        # 解决出现的nginx warning 错误 Failed to parse PID from file /run/nginx.pid: Invalid argument\n        # https://www.kancloud.cn/tinywan/nginx_tutorial/753832\n\n        mkdir -p /etc/systemd/system/nginx.service.d\n        printf \"[Service]\\nExecStartPost=/bin/sleep 0.1\\n\" > /etc/systemd/system/nginx.service.d/override.conf\n\n        ${sudoCmd} systemctl daemon-reload\n\n    fi\n\n\n\n\n    mkdir -p ${configWebsitePath}\n    mkdir -p \"${nginxConfigSiteConfPath}\"\n\n\n    nginxConfigServerHttpInput=\"\"\n    nginxConfigServerHttpGrpcInput=\"\"\n    nginxConfigStreamConfigInput=\"\"\n    nginxConfigNginxModuleInput=\"\"\n    nginxConfigDefaultWebsiteLocation=\"\"\n\n    echo\n    green \" ==================================================\"\n    green \" 是否反代指定的网站? 默认不反代网站, 使用bootstrap静态网页作为伪装网站)\"\n    green \" 如需要反代网站 请输入网址 例如 www.baidu.com (不要输入https://)\"\n    echo\n    read -r -p \"是否反代指定的网站, 默认直接回车不反代, 请输入反代网址:\" configNginxDefaultWebsiteInput\n    configNginxDefaultWebsiteInput=${configNginxDefaultWebsiteInput:-}\n\n        if [[ -n \"${configNginxDefaultWebsiteInput}\" ]]; then\n            read -r -d '' nginxConfigDefaultWebsiteLocation << EOM\n\n        location / {\n            proxy_pass https://$configNginxDefaultWebsiteInput;\n\n        }\n\nEOM\n\n        fi\n\n    if [[ \"${configInstallNginxMode}\" == \"noSSL\" ]]; then\n        if [[ ${configV2rayWorkingNotChangeMode} == \"true\" ]]; then\n            inputV2rayStreamSettings\n        fi\n\n        if [[ \"${configV2rayStreamSetting}\" == \"grpc\" || \"${configV2rayStreamSetting}\" == \"wsgrpc\" ]]; then\n            read -r -d '' nginxConfigServerHttpGrpcInput << EOM\n\n        location /$configV2rayGRPCServiceName {\n            grpc_pass grpc://127.0.0.1:$configV2rayGRPCPort;\n            grpc_connect_timeout 60s;\n            grpc_read_timeout 720m;\n            grpc_send_timeout 720m;\n            grpc_set_header X-Real-IP \\$remote_addr;\n            grpc_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        }\n\n\n\nEOM\n\n        fi\n\n        cat > \"${nginxConfigSiteConfPath}/nossl_site.conf\" <<-EOF\n    server {\n        listen       80;\n        server_name  $configSSLDomain;\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location /$configV2rayWebSocketPath {\n            proxy_pass http://127.0.0.1:$configV2rayPort;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade \\$http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_set_header Host \\$http_host;\n\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        }\n\n        ${nginxConfigServerHttpGrpcInput}\n\n        ${nginxConfigDefaultWebsiteLocation}\n    }\n\nEOF\n\n\n    elif [[ \"${configInstallNginxMode}\" == \"v2raySSL\" ]]; then\n        inputV2rayStreamSettings\n\n        cat > \"${nginxConfigSiteConfPath}/v2rayssl_site.conf\" <<-EOF\n    server {\n        listen 443 ssl http2;\n        listen [::]:443 ssl http2;\n        server_name  $configSSLDomain;\n\n        ssl_certificate       ${configSSLCertPath}/$configSSLCertFullchainFilename;\n        ssl_certificate_key   ${configSSLCertPath}/$configSSLCertKeyFilename;\n        ssl_protocols         TLSv1.2 TLSv1.3;\n        ssl_ciphers           TLS-AES-256-GCM-SHA384:TLS-CHACHA20-POLY1305-SHA256:TLS-AES-128-GCM-SHA256:TLS-AES-128-CCM-8-SHA256:TLS-AES-128-CCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n\n        # Config for 0-RTT in TLSv1.3\n        ssl_early_data on;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location /$configV2rayWebSocketPath {\n            proxy_pass http://127.0.0.1:$configV2rayPort;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade \\$http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_set_header Host \\$http_host;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        }\n\n        location /$configV2rayGRPCServiceName {\n            grpc_pass grpc://127.0.0.1:$configV2rayGRPCPort;\n            grpc_connect_timeout 60s;\n            grpc_read_timeout 720m;\n            grpc_send_timeout 720m;\n            grpc_set_header X-Real-IP \\$remote_addr;\n            grpc_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        }\n\n        ${nginxConfigDefaultWebsiteLocation}\n    }\n\n    server {\n        listen 80;\n        listen [::]:80;\n        server_name  $configSSLDomain;\n        return 301 https://$configSSLDomain\\$request_uri;\n    }\n\nEOF\n\n\n    elif [[ \"${configInstallNginxMode}\" == \"sni\" ]]; then\n\n        if [ \"$osRelease\" == \"centos\" ]; then\n        read -r -d '' nginxConfigNginxModuleInput << EOM\nload_module /usr/lib64/nginx/modules/ngx_stream_module.so;\nEOM\n        else\n        read -r -d '' nginxConfigNginxModuleInput << EOM\ninclude /etc/nginx/modules-enabled/*.conf;\n# load_module /usr/lib/nginx/modules/ngx_stream_module.so;\nEOM\n        fi\n\n\n\n        nginxConfigStreamFakeWebsiteDomainInput=\"\"\n\n        nginxConfigStreamOwnWebsiteInput=\"\"\n        nginxConfigStreamOwnWebsiteMapInput=\"\"\n\n        if [[ \"${isNginxSNIModeInput}\" == \"4\" || \"${isNginxSNIModeInput}\" == \"5\" || \"${isNginxSNIModeInput}\" == \"6\" ]]; then\n\n            read -r -d '' nginxConfigStreamOwnWebsiteInput << EOM\n    server {\n        listen 8000 ssl http2;\n        listen [::]:8000 ssl http2;\n        server_name  $configNginxSNIDomainWebsite;\n\n        ssl_certificate       ${configNginxSNIDomainWebsiteCertPath}/$configSSLCertFullchainFilename;\n        ssl_certificate_key   ${configNginxSNIDomainWebsiteCertPath}/$configSSLCertKeyFilename;\n        ssl_protocols         TLSv1.2 TLSv1.3;\n        ssl_ciphers           TLS-AES-256-GCM-SHA384:TLS-CHACHA20-POLY1305-SHA256:TLS-AES-128-GCM-SHA256:TLS-AES-128-CCM-8-SHA256:TLS-AES-128-CCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;\n\n        # Config for 0-RTT in TLSv1.3\n        ssl_early_data on;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n    }\n\n    server {\n        listen 80;\n        listen [::]:80;\n        server_name  $configNginxSNIDomainWebsite;\n        return 301 https://$configNginxSNIDomainWebsite\\$request_uri;\n    }\nEOM\n\n            read -r -d '' nginxConfigStreamOwnWebsiteMapInput << EOM\n        ${configNginxSNIDomainWebsite} web;\nEOM\n        fi\n\n\n        nginxConfigStreamTrojanMapInput=\"\"\n        nginxConfigStreamTrojanUpstreamInput=\"\"\n\n        if [[ \"${isNginxSNIModeInput}\" == \"1\" || \"${isNginxSNIModeInput}\" == \"2\" || \"${isNginxSNIModeInput}\" == \"4\" || \"${isNginxSNIModeInput}\" == \"5\" ]]; then\n\n            nginxConfigStreamFakeWebsiteDomainInput=\"${configNginxSNIDomainTrojan}\"\n\n            read -r -d '' nginxConfigStreamTrojanMapInput << EOM\n        ${configNginxSNIDomainTrojan} trojan;\nEOM\n\n            read -r -d '' nginxConfigStreamTrojanUpstreamInput << EOM\n    upstream trojan {\n        server 127.0.0.1:$configV2rayTrojanPort;\n    }\nEOM\n        fi\n\n\n        nginxConfigStreamV2rayMapInput=\"\"\n        nginxConfigStreamV2rayUpstreamInput=\"\"\n\n        if [[ \"${isNginxSNIModeInput}\" == \"1\" || \"${isNginxSNIModeInput}\" == \"3\" || \"${isNginxSNIModeInput}\" == \"4\" || \"${isNginxSNIModeInput}\" == \"6\" ]]; then\n\n            nginxConfigStreamFakeWebsiteDomainInput=\"${nginxConfigStreamFakeWebsiteDomainInput} ${configNginxSNIDomainV2ray}\"\n\n            read -r -d '' nginxConfigStreamV2rayMapInput << EOM\n        ${configNginxSNIDomainV2ray} v2ray;\nEOM\n\n            read -r -d '' nginxConfigStreamV2rayUpstreamInput << EOM\n    upstream v2ray {\n        server 127.0.0.1:$configV2rayPort;\n    }\nEOM\n        fi\n\n\n        cat > \"${nginxConfigSiteConfPath}/sni_site.conf\" <<-EOF\n    server {\n        listen       80;\n        server_name  $nginxConfigStreamFakeWebsiteDomainInput;\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n    }\n\n    ${nginxConfigStreamOwnWebsiteInput}\n\nEOF\n\n\n        read -r -d '' nginxConfigStreamConfigInput << EOM\nstream {\n    map \\$ssl_preread_server_name \\$filtered_sni_name {\n        ${nginxConfigStreamOwnWebsiteMapInput}\n        ${nginxConfigStreamTrojanMapInput}\n        ${nginxConfigStreamV2rayMapInput}\n    }\n\n    ${nginxConfigStreamTrojanUpstreamInput}\n\n    ${nginxConfigStreamV2rayUpstreamInput}\n\n    upstream web {\n        server 127.0.0.1:8000;\n    }\n\n    server {\n        listen 443;\n        listen [::]:443;\n        resolver 8.8.8.8;\n        ssl_preread on;\n        proxy_pass \\$filtered_sni_name;\n    }\n}\n\nEOM\n\n    elif [[ \"${configInstallNginxMode}\" == \"trojanWeb\" ]]; then\n\n        cat > \"${nginxConfigSiteConfPath}/trojanweb_site.conf\" <<-EOF\n    server {\n        listen       80;\n        server_name  $configSSLDomain;\n        root $configWebsitePath;\n        index index.php index.html index.htm;\n\n        location /$configTrojanWebNginxPath {\n            proxy_pass http://127.0.0.1:$configTrojanWebPort/;\n            proxy_set_header Upgrade \\$http_upgrade;\n            proxy_set_header Host \\$http_host;\n        }\n\n        location ~* ^/(static|common|auth|trojan)/ {\n            proxy_pass  http://127.0.0.1:$configTrojanWebPort;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade \\$http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_set_header Host \\$http_host;\n        }\n\n        # http redirect to https\n        if ( \\$remote_addr != 127.0.0.1 ){\n            rewrite ^/(.*)$ https://$configSSLDomain/\\$1 redirect;\n        }\n    }\n\nEOF\n\n    else\n        echo\n    fi\n\n\n\n    cat > \"${nginxConfigPath}\" <<-EOF\n\n${nginxConfigNginxModuleInput}\n\n# user  ${nginxUser};\nuser root;\nworker_processes  1;\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\n\n${nginxConfigStreamConfigInput}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '\\$remote_addr - \\$remote_user [\\$time_local] '\n                      '\"\\$request\" \\$status \\$body_bytes_sent  '\n                      '\"\\$http_referer\" \"\\$http_user_agent\" \"\\$http_x_forwarded_for\"';\n    access_log  $nginxAccessLogFilePath  main;\n    error_log $nginxErrorLogFilePath;\n\n    sendfile        on;\n    #tcp_nopush     on;\n    keepalive_timeout  120;\n    client_max_body_size 20m;\n    gzip  on;\n\n\n    include ${nginxConfigSiteConfPath}/*.conf;\n}\n\nEOF\n\n\n\n\n\n    # 下载伪装站点 并设置伪装网站\n    rm -rf ${configWebsitePath}/*\n    mkdir -p ${configWebsiteDownloadPath}\n\n    downloadAndUnzip \"https://github.com/jinwyp/one_click_script/raw/master/download/website2.zip\" \"${configWebsitePath}\" \"website2.zip\"\n\n    if [ \"${configInstallNginxMode}\" != \"trojanWeb\" ] ; then\n        wget -P \"${configWebsiteDownloadPath}\" \"https://github.com/jinwyp/one_click_script/raw/master/download/trojan-mac.zip\"\n        wget -P \"${configWebsiteDownloadPath}\" \"https://github.com/jinwyp/one_click_script/raw/master/download/v2ray-windows.zip\"\n        wget -P \"${configWebsiteDownloadPath}\" \"https://github.com/jinwyp/one_click_script/raw/master/download/v2ray-mac.zip\"\n    fi\n\n\n    # downloadAndUnzip \"https://github.com/jinwyp/one_click_script/raw/master/download/trojan_client_all.zip\" \"${configWebsiteDownloadPath}\" \"trojan_client_all.zip\"\n    # downloadAndUnzip \"https://github.com/jinwyp/one_click_script/raw/master/download/trojan-qt5.zip\" \"${configWebsiteDownloadPath}\" \"trojan-qt5.zip\"\n    # downloadAndUnzip \"https://github.com/jinwyp/one_click_script/raw/master/download/v2ray_client_all.zip\" \"${configWebsiteDownloadPath}\" \"v2ray_client_all.zip\"\n\n    #wget -P \"${configWebsiteDownloadPath}\" \"https://github.com/jinwyp/one_click_script/raw/master/download/v2ray-android.zip\"\n\n    # ${sudoCmd} chown -R ${wwwUsername}:${wwwUsername} ${configWebsitePath}\n    ${sudoCmd} chmod -R 774 ${configWebsitePath}\n\n    ${sudoCmd} systemctl start nginx.service\n\n    green \" ================================================== \"\n    green \"       Web服务器 nginx 安装成功!!\"\n    green \"    伪装站点为 http://${configSSLDomain}\"\n\n    if [[ \"${configInstallNginxMode}\" == \"trojanWeb\" ]] ; then\n        yellow \"    Trojan-web ${versionTrojanWeb} 可视化管理面板地址  http://${configSSLDomain}/${configTrojanWebNginxPath} \"\n        green \"    Trojan-web 可视化管理面板 可执行文件路径 ${configTrojanWebPath}/trojan-web\"\n        green \"    Trojan-web 停止命令: systemctl stop trojan-web.service  启动命令: systemctl start trojan-web.service  重启命令: systemctl restart trojan-web.service\"\n        green \"    Trojan 服务器端可执行文件路径 /usr/bin/trojan/trojan\"\n        green \"    Trojan 服务器端配置路径 /usr/local/etc/trojan/config.json \"\n        green \"    Trojan 停止命令: systemctl stop trojan.service  启动命令: systemctl start trojan.service  重启命令: systemctl restart trojan.service\"\n    fi\n\n    green \"    伪装站点的静态html内容放置在目录 ${configWebsitePath}, 可自行更换网站内容!\"\n    red \"    nginx 配置路径 ${nginxConfigPath} \"\n    green \"    nginx 访问日志 ${nginxAccessLogFilePath} \"\n    green \"    nginx 错误日志 ${nginxErrorLogFilePath} \"\n    green \"    nginx 查看日志命令: journalctl -n 50 -u nginx.service\"\n    green \"    nginx 启动命令: systemctl start nginx.service  停止命令: systemctl stop nginx.service  重启命令: systemctl restart nginx.service\"\n    green \"    nginx 查看运行状态命令: systemctl status nginx.service \"\n\n    green \" ================================================== \"\n\n    cat >> ${configReadme} <<-EOF\n\nWeb服务器 nginx 安装成功! 伪装站点为 ${configSSLDomain}\n伪装站点的静态html内容放置在目录 ${configWebsitePath}, 可自行更换网站内容.\nnginx 配置路径 ${nginxConfigPath}\nnginx 访问日志 ${nginxAccessLogFilePath}\nnginx 错误日志 ${nginxErrorLogFilePath}\n\nnginx 查看日志命令: journalctl -n 50 -u nginx.service\n\nnginx 启动命令: systemctl start nginx.service\nnginx 停止命令: systemctl stop nginx.service\nnginx 重启命令: systemctl restart nginx.service\nnginx 查看运行状态命令: systemctl status nginx.service\n\n\nEOF\n\n    if [[ \"${configInstallNginxMode}\" == \"trojanWeb\" ]] ; then\n        cat >> ${configReadme} <<-EOF\n\n安装的Trojan-web ${versionTrojanWeb} 可视化管理面板\n访问地址  http://${configSSLDomain}/${configTrojanWebNginxPath}\nTrojan-web 停止命令: systemctl stop trojan-web.service\nTrojan-web 启动命令: systemctl start trojan-web.service\nTrojan-web 重启命令: systemctl restart trojan-web.service\n\nTrojan 服务器端配置路径 /usr/local/etc/trojan/config.json\nTrojan 停止命令: systemctl stop trojan.service\nTrojan 启动命令: systemctl start trojan.service\nTrojan 重启命令: systemctl restart trojan.service\nTrojan 查看运行状态命令: systemctl status trojan.service\n\nEOF\n    fi\n\n}\n\nfunction removeNginx(){\n\n    green \" ================================================== \"\n    green \" Are you sure to remove Nginx ? \"\n    echo\n    read -r -p \"是否确认卸载Nginx? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveNginxServerInput\n    isRemoveNginxServerInput=${isRemoveNginxServerInput:-Y}\n\n    if [[ \"${isRemoveNginxServerInput}\" == [Yy] ]]; then\n\n        echo\n        if [[ -f \"${nginxConfigPath}\" ]]; then\n\n            showHeaderRed \"准备卸载已安装的nginx\"\n\n\n            ${sudoCmd} systemctl stop nginx.service\n            ${sudoCmd} systemctl disable nginx.service\n\n            if [ \"$osRelease\" == \"centos\" ]; then\n                yum remove -y nginx-mod-stream\n                yum remove -y nginx\n            else\n                apt autoremove -y\n                apt-get remove --purge -y nginx-common\n                apt-get remove --purge -y nginx-core\n                apt-get remove --purge -y libnginx-mod-stream\n                apt-get remove --purge -y libnginx-mod-http-xslt-filter libnginx-mod-http-geoip2 libnginx-mod-stream-geoip2 libnginx-mod-mail libnginx-mod-http-image-filter\n\n                apt autoremove -y --purge nginx nginx-common nginx-core\n                apt-get remove --purge -y nginx nginx-full nginx-common nginx-core\n            fi\n\n\n            rm -f ${nginxAccessLogFilePath}\n            rm -f ${nginxErrorLogFilePath}\n            rm -f ${nginxConfigPath}\n            rm -rf ${nginxConfigSiteConfPath}\n\n            rm -f ${configReadme}\n\n            rm -rf \"/etc/nginx\"\n\n            rm -rf ${configDownloadTempPath}\n\n            echo\n            read -r -p \"是否删除证书 和 卸载acme.sh申请证书工具, 由于一天内申请证书有次数限制, 默认建议不删除证书,  请输入[y/N]:\" isDomainSSLRemoveInput\n            isDomainSSLRemoveInput=${isDomainSSLRemoveInput:-n}\n\n\n            if [[ $isDomainSSLRemoveInput == [Yy] ]]; then\n                shopt -s nullglob\n                renewDomainArray=(\"${configSSLAcmeScriptPath}\"/*ecc*)\n                COUNTER1=1\n\n                echo\n                green \" ================================================== \"\n                green \" 请选择要续签或要删除的域名:\"\n                echo\n                for renewDomainName in \"${renewDomainArray[@]}\"; do\n\n                    substr=${renewDomainName##*/}\n                    substr=${substr%_ecc*}\n                    renewDomainArrayFix[${COUNTER1}]=\"$substr\"\n                    echo \" ${COUNTER1}. 域名: ${substr}\"\n\n                    COUNTER1=$((COUNTER1 +1))\n                done\n\n                echo\n                read -r -p \"请选择域名? 请输入纯数字:\" isRenewDomainSelectNumberInput\n                isRenewDomainSelectNumberInput=${isRenewDomainSelectNumberInput:-99}\n\n                if [[ \"$isRenewDomainSelectNumberInput\" == \"99\" ]]; then\n                    red \" 输入错误, 请重新输入!\"\n                    echo\n                    read -r -p \"请选择域名? 请输入纯数字:\" isRenewDomainSelectNumberInput\n                    isRenewDomainSelectNumberInput=${isRenewDomainSelectNumberInput:-99}\n\n                    if [[ \"$isRenewDomainSelectNumberInput\" == \"99\" ]]; then\n                        red \" 输入错误, 退出!\"\n                        exit\n                    else\n                        echo\n                    fi\n                else\n                    echo\n                fi\n\n                configSSLRenewDomain=${renewDomainArrayFix[${isRenewDomainSelectNumberInput}]}\n\n                if [[ -n $(${configSSLAcmeScriptPath}/acme.sh --list | grep ${configSSLRenewDomain}) ]]; then\n\n                    ${configSSLAcmeScriptPath}/acme.sh --revoke -d ${configSSLRenewDomain} --ecc\n                    ${configSSLAcmeScriptPath}/acme.sh --remove -d ${configSSLRenewDomain} --ecc\n\n                    rm -rf \"${configSSLAcmeScriptPath}/${configSSLRenewDomain}_ecc\"\n                    echo\n                    green \" 域名 ${configSSLRenewDomain} 的证书已经删除成功!\"\n\n                else\n                    echo\n                    red \" 您选择的域名 ${configSSLRenewDomain} 证书不存在！\"\n                fi\n\n                ${sudoCmd} bash ${configSSLAcmeScriptPath}/acme.sh --uninstall\n                rm -rf ${configWebsiteFatherPath}\n\n                showHeaderGreen \"Nginx 卸载完毕, SSL 证书文件已删除!\"\n\n            else\n                rm -rf ${configWebsitePath}\n\n                showHeaderGreen \"Nginx 卸载完毕, 已保留 SSL 证书文件 到 ${configSSLCertPath} \"\n            fi\n\n        else\n            showHeaderRed \"系统没有安装 Nginx, 退出卸载\"\n        fi\n        echo\n\n    fi\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Regular expression to match a valid domain name\nip_regex=\"^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$\"\ndomain_regex=\"^[a-zA-Z0-9]+([a-zA-Z0-9\\-]*[a-zA-Z0-9]+)?(\\.[a-zA-Z]+)+$\"\ndomain_regex2=\"^(?!:\\/\\/)(?=.{1,255}$)([[:alnum:]][[:alnum:]-]*[[:alnum:]]\\.)+[a-z]{2,}$\"\n\n\nconfigNginxSNIDomainWebsite=\"\"\nconfigNginxSNIDomainV2ray=\"\"\nconfigNginxSNIDomainTrojan=\"\"\n\n\nconfigNginxSNIDomainTrojanCertPath=\"${configWebsiteFatherPath}/cert/nginxsni/trojan\"\nconfigNginxSNIDomainV2rayCertPath=\"${configWebsiteFatherPath}/cert/nginxsni/v2ray\"\nconfigNginxSNIDomainWebsiteCertPath=\"${configWebsiteFatherPath}/cert/nginxsni/web\"\n\nfunction checkNginxSNIDomain(){\n\n    if compareRealIpWithLocalIp \"$2\" ; then\n\n        if [ \"$1\" = \"trojan\" ]; then\n            configNginxSNIDomainTrojan=$2\n            configSSLCertPath=\"${configNginxSNIDomainTrojanCertPath}\"\n\n        elif [ \"$1\" = \"v2ray\" ]; then\n            configNginxSNIDomainV2ray=$2\n            configSSLCertPath=\"${configNginxSNIDomainV2rayCertPath}\"\n\n        elif [ \"$1\" = \"website\" ]; then\n            configNginxSNIDomainWebsite=$2\n            configSSLCertPath=\"${configNginxSNIDomainWebsiteCertPath}\"\n        fi\n\n        configSSLDomain=\"$2\"\n        mkdir -p ${configSSLCertPath}\n\n        echo\n        green \" ==================================================\"\n        green \" 是否申请证书? 默认直接回车为申请证书, 如第二次安装或已有证书 可以选否\"\n        green \" 如果已经有SSL证书文件 请放到下面路径\"\n        red \" ${configSSLDomain} 域名证书内容文件路径 ${configSSLCertPath}/${configSSLCertFullchainFilename} \"\n        red \" ${configSSLDomain} 域名证书私钥文件路径 ${configSSLCertPath}/${configSSLCertKeyFilename} \"\n        echo\n\n        read -p \"是否申请证书? 默认直接回车为自动申请证书,请输入[Y/n]:\" isDomainSSLRequestInput\n        isDomainSSLRequestInput=${isDomainSSLRequestInput:-Y}\n\n        if [[ $isDomainSSLRequestInput == [Yy] ]]; then\n            getHTTPSCertificateWithAcme \"\"\n        else\n            green \" ==================================================\"\n            green \" 不申请域名的证书, 请把证书放到如下目录, 或自行修改trojan或v2ray配置!\"\n            green \" ${configSSLDomain} 域名证书内容文件路径 ${configSSLCertPath}/${configSSLCertFullchainFilename} \"\n            green \" ${configSSLDomain} 域名证书私钥文件路径 ${configSSLCertPath}/${configSSLCertKeyFilename} \"\n            green \" ==================================================\"\n        fi\n    else\n        inputNginxSNIDomain $1\n    fi\n\n}\n\nfunction inputNginxSNIDomain(){\n    echo\n    green \" ================================================== \"\n\n    if [ \"$1\" = \"trojan\" ]; then\n        yellow \" 请输入解析到本VPS的域名 用于给Trojan使用, 例如 www.xxx.com: (此步骤请关闭CDN后安装)\"\n        read -p \"请输入解析到本VPS的域名:\" configNginxSNIDomainDefault\n\n    elif [ \"$1\" = \"v2ray\" ]; then\n        yellow \" 请输入解析到本VPS的域名 用于给V2ray使用, 例如 www.xxx.com: (此步骤请关闭CDN后安装)\"\n        read -p \"请输入解析到本VPS的域名:\" configNginxSNIDomainDefault\n\n    elif [ \"$1\" = \"website\" ]; then\n        yellow \" 请输入解析到本VPS的域名 用于给现有网站使用, 例如 www.xxx.com: (此步骤请关闭CDN后安装)\"\n        read -p \"请输入解析到本VPS的域名:\" configNginxSNIDomainDefault\n\n    fi\n\n    checkNginxSNIDomain $1 ${configNginxSNIDomainDefault}\n\n}\n\nfunction inputXraySystemdServiceName(){\n\n    if [[ \"$1\" == \"v2ray_nginxOptional\" || \"$1\" == \"nginx_v2ray\" || \"$1\" == \"v2ray\" ]]; then\n        echo\n        green \" ================================================== \"\n        yellow \" 请输入自定义的 V2ray 或 Xray 的Systemd服务名称后缀, 默认为空\"\n        green \" 默认直接回车不输入字符 即为 v2ray.service 或 xray.service\"\n        green \" 输入的字符将作为后缀 例如 v2ray-xxx.service 或 xray-xxx.service\"\n        green \" 此功能用于在一台VPS上安装多个 v2ray / xray\"\n        echo\n        read -p \"请输入自定义的Xray服务名称后缀, 默认为空:\" configXraySystemdServiceNameSuffix\n        configXraySystemdServiceNameSuffix=${configXraySystemdServiceNameSuffix:-\"\"}\n\n        if [ -n \"${configXraySystemdServiceNameSuffix}\" ]; then\n            promptInfoXrayNameServiceName=\"-${configXraySystemdServiceNameSuffix}\"\n            configSSLCertPath=\"${configSSLCertPath}/xray_${configXraySystemdServiceNameSuffix}\"\n        fi\n        echo\n    fi\n\n}\n\nfunction installTrojanV2rayWithNginx(){\n\n    stopServiceNginx\n    testLinuxPortUsage\n    # installPackage\n\n    echo\n    if [ \"$1\" = \"v2ray\" ]; then\n        read -r -p \"是否不申请域名的证书 直接使用本VPS的IP安装? 默认直接回车为不申请证书,请输入[Y/n]:\" isDomainIPRequestInput\n        isDomainIPRequestInput=${isDomainIPRequestInput:-Y}\n\n        if [[ $isDomainIPRequestInput == [Yy] ]]; then\n            echo\n            read -r -p \"请输入本VPS的IP 或 解析到本VPS的域名:\" configSSLDomain\n            installV2ray\n            exit\n        fi\n\n    elif [ \"$1\" = \"nginxSNI_trojan_v2ray\" ]; then\n        green \" ================================================== \"\n        yellow \" 请选择 Nginx SNI + Trojan + V2ray 的安装模式, 默认为1\"\n        red \" 必须使用不同的2个或3个域名,并设置好DNS解析,否则无法申请SSL证书\"\n        echo\n        green \" 1. Nginx + Trojan + V2ray + 伪装网站\"\n        green \" 2. Nginx + Trojan + 伪装网站\"\n        green \" 3. Nginx + V2ray + 伪装网站\"\n        green \" 4. Nginx + Trojan + V2ray + 已有网站共存\"\n        green \" 5. Nginx + Trojan + 已有网站共存\"\n        green \" 6. Nginx + V2ray + 已有网站共存\"\n\n        echo\n        read -p \"请选择 Nginx SNI 的安装模式 直接回车默认选1, 请输入纯数字:\" isNginxSNIModeInput\n        isNginxSNIModeInput=${isNginxSNIModeInput:-1}\n\n        if [[ \"${isNginxSNIModeInput}\" == \"1\" ]]; then\n            inputNginxSNIDomain \"trojan\"\n            inputNginxSNIDomain \"v2ray\"\n\n\n            installWebServerNginx\n            installTrojanServer\n            installV2ray\n\n        elif [[ \"${isNginxSNIModeInput}\" == \"2\" ]]; then\n            inputNginxSNIDomain \"trojan\"\n\n            installWebServerNginx\n            installTrojanServer\n\n        elif [[ \"${isNginxSNIModeInput}\" == \"3\" ]]; then\n            inputNginxSNIDomain \"v2ray\"\n\n            installWebServerNginx\n            installV2ray\n\n        elif [[ \"${isNginxSNIModeInput}\" == \"4\" ]]; then\n            inputNginxSNIDomain \"trojan\"\n            inputNginxSNIDomain \"v2ray\"\n            inputNginxSNIDomain \"website\"\n\n            installWebServerNginx\n            installTrojanServer\n            installV2ray\n\n        elif [[ \"${isNginxSNIModeInput}\" == \"5\" ]]; then\n            inputNginxSNIDomain \"trojan\"\n            inputNginxSNIDomain \"website\"\n\n            installWebServerNginx\n            installTrojanServer\n\n        elif [[ \"${isNginxSNIModeInput}\" == \"6\" ]]; then\n            inputNginxSNIDomain \"v2ray\"\n            inputNginxSNIDomain \"website\"\n\n            installWebServerNginx\n            installV2ray\n\n        fi\n\n        exit\n    fi\n\n    inputXraySystemdServiceName \"$1\"\n\n    if [[ \"$1\" == \"v2ray_nginxOptional\" && \"$configV2rayWorkingMode\" == \"vlessTCPREALITY\" ]]; then\n\n        configNetworkLocalIp3=\"$(curl  ipinfo.io/ip)\"\n\n        echo\n        green \"当前 VPS IP 地址为: ${configNetworkLocalIp3}\"\n        green \"如果上面的IP不正确, 请输入正确的IP或域名. 直接回车默认为 ${configNetworkLocalIp3}\"\n        green \"如果输入的是域名 将安装 Nginx 作为伪装网站\"\n        echo\n        read -r -p \"请输入本VPS的IP 或 解析到本VPS的域名:\" configSSLDomain\n\n        if [ -z \"${configSSLDomain}\" ]; then\n            configSSLDomain=\"${configNetworkLocalIp3}\"\n        fi\n\n\n        if [[ $configSSLDomain =~ $ip_regex ]]; then\n            green \"Valid ip address. 输入的 IP 格式正确 \"\n        else\n            red \"Invalid ip address. 输入的 IP 格式不正确 \"\n            if [[ $configSSLDomain =~ $domain_regex ]]; then\n                green \"Valid domain name. 输入的域名格式正确 \"\n\n                echo\n                green \" 是否安装 Nginx 用于提供伪装网站, 如果已有网站或搭配宝塔面板请选择N不安装\"\n                read -r -p \"是否确安装Nginx伪装网站? 直接回车默认安装, 请输入[Y/n]:\" isInstallNginxServerInput\n                isInstallNginxServerInput=${isInstallNginxServerInput:-Y}\n\n                if [[ \"${isInstallNginxServerInput}\" == [Yy] ]]; then\n                    installWebServerNginx\n                fi\n\n            else\n                red \"Invalid domain name. 输入的域名格式不正确 \"\n                green \"使用 ${configNetworkLocalIp3} 作为本VPS的IP地址 \"\n                configSSLDomain=\"${configNetworkLocalIp3}\"\n            fi\n        fi\n\n        echo\n        installV2ray\n        exit\n    else\n        renewCertificationWithAcme \"\"\n    fi\n\n\n    echo\n    if test -s ${configSSLCertPath}/${configSSLCertFullchainFilename}; then\n\n        green \" ================================================== \"\n        green \" 已检测到域名 ${configSSLDomain} 的证书文件 获取成功!\"\n        green \" ${configSSLDomain} 域名证书内容文件路径 ${configSSLCertPath}/${configSSLCertFullchainFilename} \"\n        green \" ${configSSLDomain} 域名证书私钥文件路径 ${configSSLCertPath}/${configSSLCertKeyFilename} \"\n        green \" ================================================== \"\n        echo\n\n        if [ \"$1\" == \"trojan_nginx\" ]; then\n            installWebServerNginx\n            installTrojanServer\n\n        elif [ \"$1\" = \"trojan\" ]; then\n            installTrojanServer\n\n        elif [ \"$1\" = \"nginx_v2ray\" ]; then\n            installWebServerNginx\n            installV2ray\n\n        elif [ \"$1\" = \"v2ray_nginxOptional\" ]; then\n            echo\n            green \" 是否安装 Nginx 用于提供伪装网站, 如果已有网站或搭配宝塔面板请选择N不安装\"\n            read -r -p \"是否确安装Nginx伪装网站? 直接回车默认安装, 请输入[Y/n]:\" isInstallNginxServerInput\n            isInstallNginxServerInput=${isInstallNginxServerInput:-Y}\n\n            if [[ \"${isInstallNginxServerInput}\" == [Yy] ]]; then\n                installWebServerNginx\n            fi\n\n            if [[ \"${configV2rayWorkingMode}\" == \"trojan\" ]]; then\n                installTrojanServer\n            fi\n            installV2ray\n\n        elif [ \"$1\" = \"v2ray\" ]; then\n            installV2ray\n\n        elif [ \"$1\" = \"trojan_nginx_v2ray\" ]; then\n            installWebServerNginx\n            installTrojanServer\n            installV2ray\n\n        else\n            echo\n        fi\n    else\n        red \" ================================================== \"\n        red \" https证书没有申请成功，安装失败!\"\n        red \" 请检查域名和DNS是否生效, 同一域名请不要一天内多次申请!\"\n        red \" 请检查80和443端口是否开启, VPS服务商可能需要添加额外防火墙规则，例如阿里云、谷歌云等!\"\n        red \" 重启VPS, 重新执行脚本, 可重新选择该项再次申请证书 ! \"\n        red \" ================================================== \"\n        exit\n    fi\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getTrojanGoVersion(){\n\n    if [[ \"${isTrojanTypeInput}\" == \"1\" ]]; then\n        versionTrojan=$(getGithubLatestReleaseVersion \"trojan-gfw/trojan\")\n        downloadFilenameTrojan=\"trojan-${versionTrojan}-linux-amd64.tar.xz\"\n        echo \"versionTrojan: ${versionTrojan}\"\n        configTrojanBaseVersion=${versionTrojan}\n        configTrojanBasePath=\"${configTrojanPath}\"\n        promptInfoTrojanName=\"\"\n\n    elif [[ \"${isTrojanTypeInput}\" == \"2\" ]]; then\n        versionTrojanGo=$(getGithubLatestReleaseVersion \"p4gefau1t/trojan-go\")\n        echo \"versionTrojanGo: ${versionTrojanGo}\"\n        configTrojanBaseVersion=${versionTrojanGo}\n        configTrojanBasePath=\"${configTrojanGoPath}\"\n        promptInfoTrojanName=\"-go\"\n\n    elif [[ \"${isTrojanTypeInput}\" == \"3\" ]]; then\n        versionTrojanGo=$(getGithubLatestReleaseVersion \"fregie/trojan-go\")\n        echo \"versionTrojanGo: ${versionTrojanGo}\"\n        configTrojanBaseVersion=${versionTrojanGo}\n        configTrojanBasePath=\"${configTrojanGoPath}\"\n        promptInfoTrojanName=\"-go\"\n\n    else\n        # https://github.com/Potterli20/trojan-go-fork/releases/download/V2023.03.08/trojan-go-fork-linux-amd64.zip\n        versionTrojanGo=$(getGithubLatestReleaseVersion \"Potterli20/trojan-go-fork\")\n        # versionTrojanGo=\"V2023.03.08\"\n        echo \"versionTrojanGo: ${versionTrojanGo}\"\n        configTrojanBaseVersion=${versionTrojanGo}\n        configTrojanBasePath=\"${configTrojanGoPath}\"\n        promptInfoTrojanName=\"-go\"\n\n    fi\n}\n\nfunction downloadTrojanBin(){\n\n    if [[ ${osArchitecture} == \"arm\" ]] ; then\n        downloadFilenameTrojanGo=\"trojan-go-linux-arm.zip\"\n    fi\n    if [[ ${osArchitecture} == \"arm64\" ]] ; then\n        downloadFilenameTrojanGo=\"trojan-go-linux-armv8.zip\"\n    fi\n\n    if [[ \"${isTrojanTypeInput}\" == \"1\" ]]; then\n        # https://github.com/trojan-gfw/trojan/releases/download/v1.16.0/trojan-1.16.0-linux-amd64.tar.xz\n        if [[ ${osArchitecture} == \"arm\" || ${osArchitecture} == \"arm64\" ]] ; then\n            red \"Trojan not support arm on linux! \"\n            exit\n        fi\n        downloadAndUnzip \"https://github.com/trojan-gfw/trojan/releases/download/v${versionTrojan}/${downloadFilenameTrojan}\" \"${configTrojanBasePath}\" \"${downloadFilenameTrojan}\"\n        mv -f ${configTrojanBasePath}/trojan ${configTrojanBasePath}/trojan-temp\n        mv -f ${configTrojanBasePath}/trojan-temp/* ${configTrojanBasePath}/\n\n\n    elif [[ \"${isTrojanTypeInput}\" == \"2\" ]]; then\n        # https://github.com/p4gefau1t/trojan-go/releases/download/v0.10.6/trojan-go-linux-amd64.zip\n        downloadAndUnzip \"https://github.com/p4gefau1t/trojan-go/releases/download/v${versionTrojanGo}/${downloadFilenameTrojanGo}\" \"${configTrojanBasePath}\" \"${downloadFilenameTrojanGo}\"\n\n    elif [[ \"${isTrojanTypeInput}\" == \"3\" ]]; then\n        # https://github.com/fregie/trojan-go/releases/download/v1.0.5/trojan-go-linux-amd64.zip\n        downloadAndUnzip \"https://github.com/fregie/trojan-go/releases/download/v${versionTrojanGo}/${downloadFilenameTrojanGo}\" \"${configTrojanBasePath}\" \"${downloadFilenameTrojanGo}\"\n\n    else\n        downloadFilenameTrojanGo=\"trojan-go-fork-linux-amd64.zip\"\n        if [[ ${osArchitecture} == \"arm\" ]] ; then\n            downloadFilenameTrojanGo=\"trojan-go-fork-linux-arm.zip\"\n        fi\n        if [[ ${osArchitecture} == \"arm64\" ]] ; then\n            downloadFilenameTrojanGo=\"trojan-go-fork-linux-armv8.zip\"\n        fi\n\n        # https://github.com/Potterli20/trojan-go-fork/releases/download/V2023.02.15/trojan-go-fork-linux-arm.zip\n        # https://github.com/Potterli20/trojan-go-fork/releases/download/V2023.02.15/trojan-go-fork-linux-armv8.zip\n        # https://github.com/Potterli20/trojan-go-fork/releases/download/V2023.03.08/trojan-go-fork-linux-amd64.zip\n\n        downloadAndUnzip \"https://github.com/Potterli20/trojan-go-fork/releases/download/V${versionTrojanGo}/${downloadFilenameTrojanGo}\" \"${configTrojanBasePath}\" \"${downloadFilenameTrojanGo}\"\n        mv -f ${configTrojanBasePath}/trojan-go-fork ${configTrojanBasePath}/trojan-go\n    fi\n\n}\n\nfunction generateTrojanPassword(){\n    trojanPassword1=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n    trojanPassword2=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n    trojanPassword3=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n    trojanPassword4=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n    trojanPassword5=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n    trojanPassword6=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n    trojanPassword7=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n    trojanPassword8=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n    trojanPassword9=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n    trojanPassword10=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n}\n\nfunction installTrojanServer(){\n\n    if [[ -f \"${configTrojanPath}/trojan\" ]]; then\n        green \" ==================================================\"\n        red \"  已安装过 Trojan, 退出安装 !\"\n        red \"  Trojan already installed !\"\n        green \" ==================================================\"\n        exit\n    fi\n\n    if [[ -f \"${configTrojanGoPath}/trojan-go\" ]]; then\n        green \" ==================================================\"\n        red \"  已安装过 Trojan-go, 退出安装 !\"\n        red \"  Trojan-go already installed !\"\n        green \" ==================================================\"\n        exit\n    fi\n\n\n    generateTrojanPassword\n\n\n    echo\n    green \" ==================================================\"\n    green \" 请选择安装 Trojan 或 Trojan-go ? 默认选择2 原版 Trojan-go \"\n    echo\n    green \" 1 原版 Trojan 不支持 websocket (not support websocket)\"\n    green \" 2 原版 Trojan-go 支持 websocket (support websocket)\"\n    green \" 3 修改版 Trojan-go 支持 websocket by fregie (support websocket)\"\n    green \" 4 修改版 Trojan-go 支持模拟浏览器指纹 支持 websocket by Potterli20 (support websocket)\"\n    echo\n    read -r -p \"请选择哪种 Trojan ? 直接回车默认选2, 请输入纯数字:\" isTrojanTypeInput\n    isTrojanTypeInput=${isTrojanTypeInput:-2}\n\n    if [[ \"${isTrojanTypeInput}\" == \"1\" ]]; then\n        trojanInstallType=\"1\"\n    elif [[ \"${isTrojanTypeInput}\" == \"2\" ]]; then\n        trojanInstallType=\"2\"\n    elif [[ \"${isTrojanTypeInput}\" == \"3\" ]]; then\n        trojanInstallType=\"3\"\n    else\n        trojanInstallType=\"4\"\n    fi\n\n    if [[ \"${trojanInstallType}\" != \"1\" ]]; then\n        echo\n        green \" ==================================================\"\n        green \" Enable Websocket or not, default is Y\"\n        green \" 是否开启 Websocket 用于CDN中转, 注意原版trojan客户端不支持 Websocket\"\n        echo\n        read -r -p \"请选择是否开启 Websocket? 直接回车默认开启, 请输入[Y/n]:\" isTrojanGoWebsocketInput\n        isTrojanGoWebsocketInput=${isTrojanGoWebsocketInput:-Y}\n\n        if [[ \"${isTrojanGoWebsocketInput}\" == [Yy] ]]; then\n            isTrojanGoSupportWebsocket=\"true\"\n        else\n            isTrojanGoSupportWebsocket=\"false\"\n        fi\n    fi\n\n    echo\n    getTrojanGoVersion\n    echo\n\n\n    showHeaderGreen \" 开始安装 Trojan${promptInfoTrojanName} Version: ${configTrojanBaseVersion} !\"\n    echo\n    green \" ==================================================\"\n    green \" Input trojan${promptInfoTrojanName} password prefix, default is ramdom char: \"\n    green \" 请输入 trojan${promptInfoTrojanName} 密码的前缀? (会生成若干随机密码和带有该前缀的密码)\"\n    echo\n\n    read -r -p \"请输入密码的前缀, 直接回车默认随机生成前缀:\" configTrojanPasswordPrefixInput\n    configTrojanPasswordPrefixInput=${configTrojanPasswordPrefixInput:-${configTrojanPasswordPrefixInputDefault}}\n\n    echo\n    echo\n    if [[ \"$configV2rayWorkingMode\" != \"trojan\" && \"$configV2rayWorkingMode\" != \"sni\" ]] ; then\n        configV2rayTrojanPort=443\n\n        inputV2rayServerPort \"textMainTrojanPort\"\n        configV2rayTrojanPort=${isTrojanUserPortInput}\n    fi\n\n    configV2rayTrojanReadmePort=${configV2rayTrojanPort}\n\n    if [[ \"$configV2rayWorkingMode\" == \"sni\" ]] ; then\n        configSSLCertPath=\"${configNginxSNIDomainTrojanCertPath}\"\n        configSSLDomain=${configNginxSNIDomainTrojan}\n\n        configV2rayTrojanReadmePort=443\n    fi\n\n    rm -rf \"${configTrojanBasePath}\"\n    mkdir -p \"${configTrojanBasePath}\"\n    cd \"${configTrojanBasePath}\" || exit\n\n    echo\n    downloadTrojanBin\n\n    if [ \"${isTrojanMultiPassword}\" = \"no\" ] ; then\n        read -r -d '' trojanConfigUserpasswordInput << EOM\n        \"${trojanPassword1}\",\n        \"${trojanPassword2}\",\n        \"${trojanPassword3}\",\n        \"${trojanPassword4}\",\n        \"${trojanPassword5}\",\n        \"${trojanPassword6}\",\n        \"${trojanPassword7}\",\n        \"${trojanPassword8}\",\n        \"${trojanPassword9}\",\n        \"${trojanPassword10}\",\n        \"${configTrojanPasswordPrefixInput}202201\",\n        \"${configTrojanPasswordPrefixInput}202202\",\n        \"${configTrojanPasswordPrefixInput}202203\",\n        \"${configTrojanPasswordPrefixInput}202204\",\n        \"${configTrojanPasswordPrefixInput}202205\",\n        \"${configTrojanPasswordPrefixInput}202206\",\n        \"${configTrojanPasswordPrefixInput}202207\",\n        \"${configTrojanPasswordPrefixInput}202208\",\n        \"${configTrojanPasswordPrefixInput}202209\",\n        \"${configTrojanPasswordPrefixInput}202210\"\nEOM\n\n    else\n\n        read -r -d '' trojanConfigUserpasswordInput << EOM\n        \"${trojanPassword1}\",\n        \"${trojanPassword2}\",\n        \"${trojanPassword3}\",\n        \"${trojanPassword4}\",\n        \"${trojanPassword5}\",\n        \"${trojanPassword6}\",\n        \"${trojanPassword7}\",\n        \"${trojanPassword8}\",\n        \"${trojanPassword9}\",\n        \"${trojanPassword10}\",\n        \"${configTrojanPasswordPrefixInput}202200\",\n        \"${configTrojanPasswordPrefixInput}202201\",\n        \"${configTrojanPasswordPrefixInput}202202\",\n        \"${configTrojanPasswordPrefixInput}202203\",\n        \"${configTrojanPasswordPrefixInput}202204\",\n        \"${configTrojanPasswordPrefixInput}202205\",\n        \"${configTrojanPasswordPrefixInput}202206\",\n        \"${configTrojanPasswordPrefixInput}202207\",\n        \"${configTrojanPasswordPrefixInput}202208\",\n        \"${configTrojanPasswordPrefixInput}202209\",\n        \"${configTrojanPasswordPrefixInput}202210\",\n        \"${configTrojanPasswordPrefixInput}202211\",\n        \"${configTrojanPasswordPrefixInput}202212\",\n        \"${configTrojanPasswordPrefixInput}202213\",\n        \"${configTrojanPasswordPrefixInput}202214\",\n        \"${configTrojanPasswordPrefixInput}202215\",\n        \"${configTrojanPasswordPrefixInput}202216\",\n        \"${configTrojanPasswordPrefixInput}202217\",\n        \"${configTrojanPasswordPrefixInput}202218\",\n        \"${configTrojanPasswordPrefixInput}202219\",\n        \"${configTrojanPasswordPrefixInput}202220\",\n        \"${configTrojanPasswordPrefixInput}202221\",\n        \"${configTrojanPasswordPrefixInput}202222\",\n        \"${configTrojanPasswordPrefixInput}202223\",\n        \"${configTrojanPasswordPrefixInput}202224\",\n        \"${configTrojanPasswordPrefixInput}202225\",\n        \"${configTrojanPasswordPrefixInput}202226\",\n        \"${configTrojanPasswordPrefixInput}202227\",\n        \"${configTrojanPasswordPrefixInput}202228\",\n        \"${configTrojanPasswordPrefixInput}202229\",\n        \"${configTrojanPasswordPrefixInput}202230\",\n        \"${configTrojanPasswordPrefixInput}202231\",\n        \"${configTrojanPasswordPrefixInput}202232\",\n        \"${configTrojanPasswordPrefixInput}202233\",\n        \"${configTrojanPasswordPrefixInput}202234\",\n        \"${configTrojanPasswordPrefixInput}202235\",\n        \"${configTrojanPasswordPrefixInput}202236\",\n        \"${configTrojanPasswordPrefixInput}202237\",\n        \"${configTrojanPasswordPrefixInput}202238\",\n        \"${configTrojanPasswordPrefixInput}202239\",\n        \"${configTrojanPasswordPrefixInput}202240\",\n        \"${configTrojanPasswordPrefixInput}202241\",\n        \"${configTrojanPasswordPrefixInput}202242\",\n        \"${configTrojanPasswordPrefixInput}202243\",\n        \"${configTrojanPasswordPrefixInput}202244\",\n        \"${configTrojanPasswordPrefixInput}202245\",\n        \"${configTrojanPasswordPrefixInput}202246\",\n        \"${configTrojanPasswordPrefixInput}202247\",\n        \"${configTrojanPasswordPrefixInput}202248\",\n        \"${configTrojanPasswordPrefixInput}202249\",\n        \"${configTrojanPasswordPrefixInput}202250\",\n        \"${configTrojanPasswordPrefixInput}202251\",\n        \"${configTrojanPasswordPrefixInput}202252\",\n        \"${configTrojanPasswordPrefixInput}202253\",\n        \"${configTrojanPasswordPrefixInput}202254\",\n        \"${configTrojanPasswordPrefixInput}202255\",\n        \"${configTrojanPasswordPrefixInput}202256\",\n        \"${configTrojanPasswordPrefixInput}202257\",\n        \"${configTrojanPasswordPrefixInput}202258\",\n        \"${configTrojanPasswordPrefixInput}202259\",\n        \"${configTrojanPasswordPrefixInput}202260\",\n        \"${configTrojanPasswordPrefixInput}202261\",\n        \"${configTrojanPasswordPrefixInput}202262\",\n        \"${configTrojanPasswordPrefixInput}202263\",\n        \"${configTrojanPasswordPrefixInput}202264\",\n        \"${configTrojanPasswordPrefixInput}202265\",\n        \"${configTrojanPasswordPrefixInput}202266\",\n        \"${configTrojanPasswordPrefixInput}202267\",\n        \"${configTrojanPasswordPrefixInput}202268\",\n        \"${configTrojanPasswordPrefixInput}202269\",\n        \"${configTrojanPasswordPrefixInput}202270\",\n        \"${configTrojanPasswordPrefixInput}202271\",\n        \"${configTrojanPasswordPrefixInput}202272\",\n        \"${configTrojanPasswordPrefixInput}202273\",\n        \"${configTrojanPasswordPrefixInput}202274\",\n        \"${configTrojanPasswordPrefixInput}202275\",\n        \"${configTrojanPasswordPrefixInput}202276\",\n        \"${configTrojanPasswordPrefixInput}202277\",\n        \"${configTrojanPasswordPrefixInput}202278\",\n        \"${configTrojanPasswordPrefixInput}202279\",\n        \"${configTrojanPasswordPrefixInput}202280\",\n        \"${configTrojanPasswordPrefixInput}202281\",\n        \"${configTrojanPasswordPrefixInput}202282\",\n        \"${configTrojanPasswordPrefixInput}202283\",\n        \"${configTrojanPasswordPrefixInput}202284\",\n        \"${configTrojanPasswordPrefixInput}202285\",\n        \"${configTrojanPasswordPrefixInput}202286\",\n        \"${configTrojanPasswordPrefixInput}202287\",\n        \"${configTrojanPasswordPrefixInput}202288\",\n        \"${configTrojanPasswordPrefixInput}202289\",\n        \"${configTrojanPasswordPrefixInput}202290\",\n        \"${configTrojanPasswordPrefixInput}202291\",\n        \"${configTrojanPasswordPrefixInput}202292\",\n        \"${configTrojanPasswordPrefixInput}202293\",\n        \"${configTrojanPasswordPrefixInput}202294\",\n        \"${configTrojanPasswordPrefixInput}202295\",\n        \"${configTrojanPasswordPrefixInput}202296\",\n        \"${configTrojanPasswordPrefixInput}202297\",\n        \"${configTrojanPasswordPrefixInput}202298\",\n        \"${configTrojanPasswordPrefixInput}202299\"\nEOM\n\n    fi\n\n\n\n\n    if [[ \"${isTrojanTypeInput}\" == \"1\" ]]; then\n\n        # 增加trojan 服务器端配置\n        cat > ${configTrojanBasePath}/server.json <<-EOF\n{\n    \"run_type\": \"server\",\n    \"local_addr\": \"0.0.0.0\",\n    \"local_port\": ${configV2rayTrojanPort},\n    \"remote_addr\": \"127.0.0.1\",\n    \"remote_port\": 80,\n    \"password\": [\n        ${trojanConfigUserpasswordInput}\n    ],\n    \"log_level\": 1,\n    \"ssl\": {\n        \"cert\": \"${configSSLCertPath}/$configSSLCertFullchainFilename\",\n        \"key\": \"${configSSLCertPath}/$configSSLCertKeyFilename\",\n        \"key_password\": \"\",\n        \"cipher_tls13\":\"TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384\",\n        \"prefer_server_cipher\": true,\n        \"alpn\": [\n            \"http/1.1\"\n        ],\n        \"reuse_session\": true,\n        \"session_ticket\": false,\n        \"session_timeout\": 600,\n        \"plain_http_response\": \"\",\n        \"curves\": \"\",\n        \"dhparam\": \"\"\n    },\n    \"tcp\": {\n        \"no_delay\": true,\n        \"keep_alive\": true,\n        \"fast_open\": false,\n        \"fast_open_qlen\": 20\n    },\n    \"mysql\": {\n        \"enabled\": false,\n        \"server_addr\": \"127.0.0.1\",\n        \"server_port\": 3306,\n        \"database\": \"trojan\",\n        \"username\": \"trojan\",\n        \"password\": \"\"\n    }\n}\nEOF\n\n        # rm /etc/systemd/system/trojan.service\n        # 增加启动脚本\n        cat > ${osSystemMdPath}trojan.service <<-EOF\n[Unit]\nDescription=trojan\nAfter=network.target\n\n[Service]\nType=simple\nPIDFile=${configTrojanBasePath}/trojan.pid\nExecStart=${configTrojanBasePath}/trojan -l ${configTrojanLogFile} -c \"${configTrojanBasePath}/server.json\"\nExecReload=/bin/kill -HUP \\$MAINPID\nRestart=on-failure\nRestartSec=10\nRestartPreventExitStatus=23\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n\n    else\n\n    # 增加trojan-go 服务器端配置\n    cat > ${configTrojanBasePath}/server.json <<-EOF\n{\n    \"run_type\": \"server\",\n    \"local_addr\": \"0.0.0.0\",\n    \"local_port\": ${configV2rayTrojanPort},\n    \"remote_addr\": \"127.0.0.1\",\n    \"remote_port\": 80,\n    \"password\": [\n        ${trojanConfigUserpasswordInput}\n    ],\n    \"log_level\": 1,\n    \"log_file\": \"${configTrojanLogFile}\",\n    \"ssl\": {\n        \"verify\": true,\n        \"verify_hostname\": true,\n        \"cert\": \"${configSSLCertPath}/$configSSLCertFullchainFilename\",\n        \"key\": \"${configSSLCertPath}/$configSSLCertKeyFilename\",\n        \"sni\": \"${configSSLDomain}\",\n        \"fallback_addr\": \"127.0.0.1\",\n        \"fallback_port\": 80,\n        \"fingerprint\": \"chrome\"\n    },\n    \"websocket\": {\n        \"enabled\": ${isTrojanGoSupportWebsocket},\n        \"path\": \"/${configTrojanGoWebSocketPath}\",\n        \"host\": \"${configSSLDomain}\"\n    }\n}\nEOF\n\n\n    # 增加启动脚本\n    cat > ${osSystemMdPath}trojan-go.service <<-EOF\n[Unit]\nDescription=trojan-go\nAfter=network.target\n\n[Service]\nType=simple\nPIDFile=${configTrojanBasePath}/trojan-go.pid\nExecStart=${configTrojanBasePath}/trojan-go -config \"${configTrojanBasePath}/server.json\"\nExecReload=/bin/kill -HUP \\$MAINPID\nRestart=on-failure\nRestartSec=10\nRestartPreventExitStatus=23\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n    fi\n\n    ${sudoCmd} chown -R root:root ${configTrojanBasePath}\n    ${sudoCmd} chmod -R 774 ${configTrojanBasePath}\n    ${sudoCmd} chmod +x ${osSystemMdPath}trojan${promptInfoTrojanName}.service\n    ${sudoCmd} systemctl daemon-reload\n    ${sudoCmd} systemctl start trojan${promptInfoTrojanName}.service\n    ${sudoCmd} systemctl enable trojan${promptInfoTrojanName}.service\n\n\n\n    # 设置 cron 定时任务\n    # https://stackoverflow.com/questions/610839/how-can-i-programmatically-create-a-new-cron-job\n\n    # (crontab -l 2>/dev/null | grep -v '^[a-zA-Z]'; echo \"15 4 * * 0,1,2,3,4,5,6 systemctl restart trojan.service\") | sort - | uniq - | crontab -\n    (crontab -l ; echo \"10 4 * * 0,1,2,3,4,5,6 systemctl restart trojan${promptInfoTrojanName}.service\") | sort - | uniq - | crontab -\n\n\n    green \"======================================================================\"\n    green \"    Trojan${promptInfoTrojanName} Version: ${configTrojanBaseVersion} 安装成功 !\"\n\n    if [[ ${configInstallNginxMode} == \"noSSL\" ]]; then\n        green \"    伪装站点为 https://${configSSLDomain}\"\n        green \"    伪装站点的静态html内容放置在目录 ${configWebsitePath}, 可自行更换网站内容!\"\n    fi\n\n    red \"    Trojan${promptInfoTrojanName} 服务器端配置路径 ${configTrojanBasePath}/server.json \"\n    red \"    Trojan${promptInfoTrojanName} 运行日志文件路径: ${configTrojanLogFile} \"\n    green \"    Trojan${promptInfoTrojanName} 查看日志命令: journalctl -n 50 -u trojan${promptInfoTrojanName}.service \"\n\n    green \"    Trojan${promptInfoTrojanName} 停止命令: systemctl stop trojan${promptInfoTrojanName}.service  启动命令: systemctl start trojan${promptInfoTrojanName}.service  重启命令: systemctl restart trojan${promptInfoTrojanName}.service\"\n    green \"    Trojan${promptInfoTrojanName} 查看运行状态命令:  systemctl status trojan${promptInfoTrojanName}.service \"\n    green \"    Trojan${promptInfoTrojanName} 服务器 每天会自动重启, 防止内存泄漏. 运行 crontab -l 命令 查看定时重启命令 !\"\n    green \"======================================================================\"\n\n    echo\n    yellow \"Trojan${promptInfoTrojanName} 配置信息如下, 请自行复制保存, 密码任选其一 !\"\n    yellow \"服务器地址: ${configSSLDomain}  端口: ${configV2rayTrojanReadmePort}\"\n    yellow \"密码1: ${trojanPassword1}\"\n    yellow \"密码2: ${trojanPassword2}\"\n    yellow \"密码3: ${trojanPassword3}\"\n    yellow \"密码4: ${trojanPassword4}\"\n    yellow \"密码5: ${trojanPassword5}\"\n    yellow \"密码6: ${trojanPassword6}\"\n    yellow \"密码7: ${trojanPassword7}\"\n    yellow \"密码8: ${trojanPassword8}\"\n    yellow \"密码9: ${trojanPassword9}\"\n    yellow \"密码10: ${trojanPassword10}\"\n\n    tempTextInfoTrojanPassword=\"您指定前缀的密码共100个: 从 ${configTrojanPasswordPrefixInput}202200 到 ${configTrojanPasswordPrefixInput}202299 都可以使用\"\n    if [ \"${isTrojanMultiPassword}\" = \"no\" ] ; then\n        tempTextInfoTrojanPassword=\"您指定前缀的密码共10个: 从 ${configTrojanPasswordPrefixInput}202201 到 ${configTrojanPasswordPrefixInput}202220 都可以使用\"\n    fi\n    yellow \"${tempTextInfoTrojanPassword}\"\n    yellow \"例如: 密码:${configTrojanPasswordPrefixInput}202202 或 密码:${configTrojanPasswordPrefixInput}202209 都可以使用\"\n\n    if [[ ${isTrojanGoSupportWebsocket} == \"true\" ]]; then\n        yellow \"Websocket path 路径为: /${configTrojanGoWebSocketPath}\"\n        # yellow \"Websocket obfuscation_password 混淆密码为: ${trojanPasswordWS}\"\n        yellow \"Websocket 双重TLS为: true 开启\"\n    fi\n\n    echo\n    green \"======================================================================\"\n    yellow \" Trojan${promptInfoTrojanName} 小火箭 Shadowrocket 链接地址\"\n\n    if [ \"$isTrojanTypeInput\" != \"1\" ] ; then\n        if [[ ${isTrojanGoSupportWebsocket} == \"true\" ]]; then\n            green \" trojan://${trojanPassword1}@${configSSLDomain}:${configV2rayTrojanReadmePort}?peer=${configSSLDomain}&sni=${configSSLDomain}&plugin=obfs-local;obfs=websocket;obfs-host=${configSSLDomain};obfs-uri=/${configTrojanGoWebSocketPath}#${configSSLDomain}_trojan_go_ws\"\n            echo\n            yellow \" 二维码 Trojan${promptInfoTrojanName} \"\n            green \"https://api.qrserver.com/v1/create-qr-code/?size=400x400&data=trojan%3a%2f%2f${trojanPassword1}%40${configSSLDomain}%3a${configV2rayTrojanReadmePort}%3fallowInsecure%3d0%26peer%3d${configSSLDomain}%26plugin%3dobfs-local%3bobfs%3dwebsocket%3bobfs-host%3d${configSSLDomain}%3bobfs-uri%3d/${configTrojanGoWebSocketPath}%23${configSSLDomain}_trojan_go_ws\"\n\n            echo\n            yellow \" Trojan${promptInfoTrojanName} QV2ray 链接地址\"\n            green \" trojan-go://${trojanPassword1}@${configSSLDomain}:${configV2rayTrojanReadmePort}?sni=${configSSLDomain}&type=ws&host=${configSSLDomain}&path=%2F${configTrojanGoWebSocketPath}#${configSSLDomain}_trojan_go_ws\"\n\n        else\n            green \" trojan://${trojanPassword1}@${configSSLDomain}:${configV2rayTrojanReadmePort}?peer=${configSSLDomain}&sni=${configSSLDomain}#${configSSLDomain}_trojan_go\"\n            echo\n            yellow \" 二维码 Trojan${promptInfoTrojanName} \"\n            green \"https://api.qrserver.com/v1/create-qr-code/?size=400x400&data=trojan%3a%2f%2f${trojanPassword1}%40${configSSLDomain}%3a${configV2rayTrojanReadmePort}%3fpeer%3d${configSSLDomain}%26sni%3d${configSSLDomain}%23${configSSLDomain}_trojan_go\"\n\n            echo\n            yellow \" Trojan${promptInfoTrojanName} QV2ray 链接地址\"\n            green \" trojan-go://${trojanPassword1}@${configSSLDomain}:${configV2rayTrojanReadmePort}?sni=${configSSLDomain}&type=original&host=${configSSLDomain}#${configSSLDomain}_trojan_go\"\n        fi\n\n    else\n        green \" trojan://${trojanPassword1}@${configSSLDomain}:${configV2rayTrojanReadmePort}?peer=${configSSLDomain}&sni=${configSSLDomain}#${configSSLDomain}_trojan\"\n        echo\n        yellow \" 二维码 Trojan${promptInfoTrojanName} \"\n        green \"https://api.qrserver.com/v1/create-qr-code/?size=400x400&data=trojan%3a%2f%2f${trojanPassword1}%40${configSSLDomain}%3a${configV2rayTrojanReadmePort}%3fpeer%3d${configSSLDomain}%26sni%3d${configSSLDomain}%23${configSSLDomain}_trojan\"\n\n    fi\n\n    echo\n    green \"======================================================================\"\n    green \"请下载相应的trojan客户端:\"\n    yellow \"1 Windows 客户端下载：http://${configSSLDomain}/download/${configTrojanWindowsCliPrefixPath}/v2ray-windows.zip\"\n    #yellow \"  Windows 客户端另一个版本下载：http://${configSSLDomain}/download/${configTrojanWindowsCliPrefixPath}/trojan-Qt5-windows.zip\"\n    #yellow \"  Windows 客户端命令行版本下载：http://${configSSLDomain}/download/${configTrojanWindowsCliPrefixPath}/trojan-win-cli.zip\"\n    #yellow \"  Windows 客户端命令行版本需要搭配浏览器插件使用，例如switchyomega等! \"\n    yellow \"2 MacOS 客户端下载：http://${configSSLDomain}/download/${configTrojanWindowsCliPrefixPath}/v2ray-mac.zip\"\n    yellow \"  MacOS 另一个客户端下载：http://${configSSLDomain}/download/${configTrojanWindowsCliPrefixPath}/trojan-mac.zip\"\n    #yellow \"  MacOS 客户端Trojan-Qt5下载：http://${configSSLDomain}/download/${configTrojanWindowsCliPrefixPath}/trojan-Qt5-mac.zip\"\n    yellow \"3 Android 客户端下载 https://github.com/trojan-gfw/igniter/releases \"\n    yellow \"  Android 另一个客户端下载 https://github.com/2dust/v2rayNG/releases \"\n    yellow \"  Android 客户端Clash下载 https://github.com/Kr328/ClashForAndroid/releases \"\n    yellow \"4 iOS 客户端 请安装小火箭 https://shadowsockshelp.github.io/ios/ \"\n    yellow \"  iOS 请安装小火箭另一个地址 https://lueyingpro.github.io/shadowrocket/index.html \"\n    yellow \"  iOS 安装小火箭遇到问题 教程 https://github.com/shadowrocketHelp/help/ \"\n    green \"======================================================================\"\n    green \"教程与其他资源:\"\n    green \"访问 https://www.v2rayssr.com/vpn-client.html 下载 客户端 及教程\"\n    green \"访问 https://westworldss.com/portal/page/download 下载 客户端 及教程\"\n    green \"======================================================================\"\n    green \"其他 Windows 客户端:\"\n    green \"https://dl.trojan-cdn.com/trojan (exe为Win客户端, dmg为Mac客户端)\"\n    green \"https://github.com/Qv2ray/Qv2ray/releases (exe为Win客户端, dmg为Mac客户端)\"\n    green \"https://github.com/Dr-Incognito/V2Ray-Desktop/releases (exe为Win客户端, dmg为Mac客户端)\"\n    green \"https://github.com/Fndroid/clash_for_windows_pkg/releases\"\n    green \"======================================================================\"\n    green \"其他 Mac 客户端:\"\n    green \"https://dl.trojan-cdn.com/trojan (exe为Win客户端, dmg为Mac客户端)\"\n    green \"https://github.com/Qv2ray/Qv2ray/releases (exe为Win客户端, dmg为Mac客户端)\"\n    green \"https://github.com/Dr-Incognito/V2Ray-Desktop/releases (exe为Win客户端, dmg为Mac客户端)\"\n    green \"https://github.com/yichengchen/clashX/releases \"\n    green \"======================================================================\"\n\n\n\n    cat >> ${configReadme} <<-EOF\n\nTrojan${promptInfoTrojanName} Version: ${configTrojanBaseVersion} 安装成功 !\nTrojan${promptInfoTrojanName} 服务器端配置路径 ${configTrojanBasePath}/server.json\n\nTrojan${promptInfoTrojanName} 运行日志文件路径: ${configTrojanLogFile}\nTrojan${promptInfoTrojanName} 查看日志命令: journalctl -n 50 -u trojan${promptInfoTrojanName}.service\n\nTrojan${promptInfoTrojanName} 启动命令: systemctl start trojan${promptInfoTrojanName}.service\nTrojan${promptInfoTrojanName} 停止命令: systemctl stop trojan${promptInfoTrojanName}.service\nTrojan${promptInfoTrojanName} 重启命令: systemctl restart trojan${promptInfoTrojanName}.service\nTrojan${promptInfoTrojanName} 查看运行状态命令: systemctl status trojan${promptInfoTrojanName}.service\n\nTrojan${promptInfoTrojanName}服务器地址: ${configSSLDomain}  端口: ${configV2rayTrojanReadmePort}\n\n密码1: ${trojanPassword1}\n密码2: ${trojanPassword2}\n密码3: ${trojanPassword3}\n密码4: ${trojanPassword4}\n密码5: ${trojanPassword5}\n密码6: ${trojanPassword6}\n密码7: ${trojanPassword7}\n密码8: ${trojanPassword8}\n密码9: ${trojanPassword9}\n密码10: ${trojanPassword10}\n${tempTextInfoTrojanPassword}\n例如: 密码:${configTrojanPasswordPrefixInput}202202 或 密码:${configTrojanPasswordPrefixInput}202209 都可以使用\n\n如果是trojan-go开启了Websocket，那么Websocket path 路径为: /${configTrojanGoWebSocketPath}\n\n小火箭链接:\ntrojan://${trojanPassword1}@${configSSLDomain}:${configV2rayTrojanReadmePort}?peer=${configSSLDomain}&sni=${configSSLDomain}#${configSSLDomain}_trojan\"\n\n二维码 Trojan${promptInfoTrojanName}\nhttps://api.qrserver.com/v1/create-qr-code/?size=400x400&data=trojan%3a%2f%2f${trojanPassword1}%40${configSSLDomain}%3a${configV2rayTrojanReadmePort}%3fpeer%3d${configSSLDomain}%26sni%3d${configSSLDomain}%23${configSSLDomain}_trojan\n\nEOF\n}\n\nfunction removeTrojan(){\n\n    if [[ -f \"${configTrojanGoPath}/trojan-go\" ]]; then\n\n        promptInfoTrojanName=\"-go\"\n        configTrojanBasePath=\"${configTrojanGoPath}\"\n\n    elif [[ -f \"${configTrojanPath}/trojan\" ]]; then\n\n        promptInfoTrojanName=\"\"\n        configTrojanBasePath=\"${configTrojanPath}\"\n\n    else\n        red \" 系统没有安装 Trojan / Trojan-go, 退出卸载\"\n        red \" Trojan or Trojan-go not install, exit\"\n    fi\n\n    echo\n    green \" ================================================== \"\n    green \" Are you sure to uninstall Trojan${promptInfoTrojanName} ? \"\n    echo\n    read -r -p \"是否确认卸载 Trojan${promptInfoTrojanName}? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveTrojanServerInput\n    isRemoveTrojanServerInput=${isRemoveTrojanServerInput:-Y}\n\n    if [[ \"${isRemoveTrojanServerInput}\" == [Yy] ]]; then\n\n        echo\n        green \" ================================================== \"\n        red \" 准备卸载已安装的 Trojan${promptInfoTrojanName}\"\n        green \" ================================================== \"\n        echo\n\n        ${sudoCmd} systemctl stop trojan${promptInfoTrojanName}.service\n        ${sudoCmd} systemctl disable trojan${promptInfoTrojanName}.service\n\n        rm -rf ${configTrojanBasePath}\n        rm -f ${osSystemMdPath}trojan${promptInfoTrojanName}.service\n        rm -f ${configTrojanLogFile}\n\n        rm -f ${configReadme}\n\n        crontab -l | grep -v \"trojan${promptInfoTrojanName}\"  | crontab -\n\n        echo\n        green \" ================================================== \"\n        green \"  Trojan${promptInfoTrojanName} 卸载完毕 ! Trojan${promptInfoTrojanName} uninstall success !\"\n        green \"  crontab 定时任务 删除完毕 ! crontab remove success !\"\n        green \" ================================================== \"\n    fi\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nget_ip(){\n    local IP\n    IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v '^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.' | head -n 1 )\n    [ -z \"${IP}\" ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n    [ -z \"${IP}\" ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )\n    echo \"${IP}\"\n}\n\nget_ipv6(){\n    local ipv6\n    ipv6=$(wget -qO- -t1 -T2 ipv6.icanhazip.com)\n    [ -z \"${ipv6}\" ] && return 1 || return 0\n}\n\ngenShadowsocksPassword(){\n    if [ -z \"$1\" ]; then\n\n        shadowsocksPassword1=$(openssl rand -base64 32 | head -c 12)\n        shadowsocksPassword2=$(openssl rand -base64 32 | head -c 12)\n        shadowsocksPassword3=$(openssl rand -base64 32 | head -c 12)\n        shadowsocksPassword4=$(openssl rand -base64 32 | head -c 12)\n        shadowsocksPassword5=$(openssl rand -base64 32 | head -c 12)\n    else\n        PSlength=$1\n\n        shadowsocksPassword0=$(openssl rand -base64 \"${PSlength}\")\n        shadowsocksPassword1=$(openssl rand -base64 \"${PSlength}\")\n        shadowsocksPassword2=$(openssl rand -base64 \"${PSlength}\")\n        shadowsocksPassword3=$(openssl rand -base64 \"${PSlength}\")\n        shadowsocksPassword4=$(openssl rand -base64 \"${PSlength}\")\n        shadowsocksPassword5=$(openssl rand -base64 \"${PSlength}\")\n    fi\n}\n\nselectShadowsocksMethod(){\n\n    # 建议使用 AEAD (method 为 aes-256-gcm、aes-128-gcm、chacha20-poly1305 即可开启 AEAD)\n    # 也可以使用传统的 method (method 为 aes-256-cfb、aes-128-cfb、chacha20、salsa20 等)\n    echo\n    green \" ==================================================\"\n    yellow \" 请选择 Shadowsocks 加密方式 (默认7 2022-blake3-aes-256-gcm):\"\n    yellow \" Pls select Shadowsocks encryption method (default is 7 2022-blake3-aes-256-gcm):\"\n    echo\n    green \" 1. aes-256-gcm\"\n    green \" 2. aes-128-gcm\"\n    green \" 3. chacha20-poly1305\"\n    green \" 4. chacha20-ietf-poly1305\"\n    green \" 5. xchacha20-ietf-poly1305\"\n    green \" 6. 2022-blake3-aes-128-gcm\"\n    green \" 7. 2022-blake3-aes-256-gcm\"\n    green \" 8. 2022-blake3-chacha20-poly1305\"\n    echo\n    read -r -p \"请选择加密方式? 直接回车默认选7, 请输入纯数字:\" isShadowsocksMethodInput\n    isShadowsocksMethodInput=${isShadowsocksMethodInput:-7}\n\n    genShadowsocksPassword\n\n    if [[ \"${isShadowsocksMethodInput}\" == \"1\" ]]; then\n        shadowsocksMethod=\"aes-256-gcm\"\n    elif [[ \"${isShadowsocksMethodInput}\" == \"2\" ]]; then\n        shadowsocksMethod=\"aes-128-gcm\"\n    elif [[ \"${isShadowsocksMethodInput}\" == \"3\" ]]; then\n        shadowsocksMethod=\"chacha20-poly1305\"\n    elif [[ \"${isShadowsocksMethodInput}\" == \"4\" ]]; then\n        shadowsocksMethod=\"chacha20-ietf-poly1305\"\n    elif [[ \"${isShadowsocksMethodInput}\" == \"5\" ]]; then\n        shadowsocksMethod=\"xchacha20-ietf-poly1305\"\n\n    elif [[ \"${isShadowsocksMethodInput}\" == \"6\" ]]; then\n        shadowsocksMethod=\"2022-blake3-aes-128-gcm\"\n        genShadowsocksPassword \"16\"\n\n    elif [[ \"${isShadowsocksMethodInput}\" == \"7\" ]]; then\n        shadowsocksMethod=\"2022-blake3-aes-256-gcm\"\n        genShadowsocksPassword \"32\"\n\n    elif [[ \"${isShadowsocksMethodInput}\" == \"8\" ]]; then\n        shadowsocksMethod=\"2022-blake3-chacha20-poly1305\"\n        genShadowsocksPassword \"32\"\n    else\n        shadowsocksMethod=\"aes-256-gcm\"\n    fi\n\n    echo\n}\n\n\nconfigSSRustPath=\"/root/shadowsocksrust\"\n\nconfigSSXrayPath=\"/root/shadowsocksxray\"\nconfigSSXrayPort=\"$(($RANDOM + 10000))\"\nconfigSSAccessLogFilePath=\"${HOME}/ss-access.log\"\nconfigSSErrorLogFilePath=\"${HOME}/ss-error.log\"\n\n\n\nfunction installShadowsocksRust(){\n    if [ -f \"${configSSRustPath}/xray\"  ]; then\n        showHeaderGreen \" 已安装过 Shadowsocks Rust, 退出安装 !\" \\\n        \" Shadowsocks Rust already installed, exit !\"\n        exit 0\n    fi\n\n    showHeaderGreen \" 开始安装 Shadowsocks Rust \" \\\n    \" Prepare to install Shadowsocks Rust \"\n\n    configNetworkVPSIP=$(get_ip)\n\n    echo\n    green \" ================================================== \"\n    green \" Shadowsocks Rust Version, default is latest 1.15.0-alpha, choose no is 1.14.3 \"\n    green \" 请选择 Shadowsocks Rust 的版本, 默认直接回车为最新版 1.15.0-alpha 选否为 1.14.3\"\n    echo\n    read -r -p \"是否安装最新版? 默认直接回车为最新版, 请输入[Y/n]:\" isInstallSSRustVersionInput\n    isInstallSSRustVersionInput=${isInstallSSRustVersionInput:-Y}\n    echo\n\n    if [[ $isInstallSSRustVersionInput == [Yy] ]]; then\n        versionShadowsocksRust=\"1.15.0-alpha.9\"\n        #versionShadowsocksRust=$(getGithubLatestReleaseVersion \"shadowsocks/shadowsocks-rust\")\n    else\n        versionShadowsocksRust=\"1.14.3\"\n    fi\n    echo \"Version: ${versionShadowsocksRust}\"\n\n\n\n    echo\n    green \" 准备下载并安装 Shadowsocks Rust: ${versionXray} !\"\n    green \" Prepare to download and install Shadowsocks Rust Version: ${versionXray} !\"\n    echo\n    mkdir -p \"${configSSRustPath}\"\n    cd \"${configSSRustPath}\" || exit\n    rm -rf ${configSSRustPath}/*\n\n    # https://github.com/shadowsocks/shadowsocks-rust/releases/download/v1.14.3/shadowsocks-v1.14.3.x86_64-unknown-linux-musl.tar.xz\n    # https://github.com/shadowsocks/shadowsocks-rust/releases/download/v1.14.3/shadowsocks-v1.14.3.arm-unknown-linux-musleabi.tar.xz\n\n    downloadFilenameShadowsocksRust=\"shadowsocks-v${versionShadowsocksRust}.x86_64-unknown-linux-musl.tar.xz\"\n    if [[ ${osArchitecture} == \"arm\" ]] ; then\n        downloadFilenameShadowsocksRust=\"shadowsocks-v${versionShadowsocksRust}.arm-unknown-linux-musleabi.tar.xz\"\n    fi\n    if [[ ${osArchitecture} == \"arm64\" ]] ; then\n        downloadFilenameShadowsocksRust=\"shadowsocks-v${versionShadowsocksRust}.arm-unknown-linux-musleabi.tar.xz\"\n    fi\n\n    downloadAndUnzip \"https://github.com/shadowsocks/shadowsocks-rust/releases/download/v${versionShadowsocksRust}/${downloadFilenameShadowsocksRust}\" \"${configSSRustPath}\" \"${downloadFilenameShadowsocksRust}\"\n\n    selectShadowsocksMethod\n\n    cat > ${configSSRustPath}/shadowsocks.json <<-EOF\n{\n    \"server\": \"0.0.0.0\",\n    \"server_port\": ${configSSXrayPort},\n    \"password\": \"${shadowsocksPassword1}\",\n    \"timeout\": 300,\n    \"method\": \"${shadowsocksMethod}\"\n}\nEOF\n\n    cat > ${osSystemMdPath}shadowsocksrust.service <<-EOF\n\n[Unit]\nDescription=ssserver service\nAfter=network.target\n\n[Service]\nExecStart=${configSSRustPath}/ssserver -c ${configSSRustPath}/shadowsocks.json\nExecStop=/usr/bin/killall ssserver\nRestart=on-failure\nRestartSec=30\nUser=root\nGroup=root\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n    ${sudoCmd} chmod +x ${configSSRustPath}/ssserver\n    ${sudoCmd} chmod +x ${osSystemMdPath}shadowsocksrust.service\n    ${sudoCmd} systemctl daemon-reload\n\n    ${sudoCmd} systemctl enable shadowsocksrust.service\n    ${sudoCmd} systemctl restart shadowsocksrust.service\n\n    (crontab -l ; echo \"22 4 * * 0,1,2,3,4,5,6 systemctl restart shadowsocksrust.service\") | sort - | uniq - | crontab -\n\n    configShadowsocksLink=$(echo -n \"${shadowsocksMethod}:${shadowsocksPassword1}@${configNetworkVPSIP}:${configSSXrayPort}\" | base64 -w0)\n    configShadowsocksLinkFull=\"ss://${configShadowsocksLink}\"\n\n    cat > ${configSSRustPath}/clientConfig.json <<-EOF\n\n=========== 客户端 Shadowsocks 配置参数 密码任选其一 =============\n\n{\n    协议: Shadowsocks,\n    地址: IP ${configNetworkVPSIP},\n    端口: ${configSSXrayPort},\n    加密方式: ${shadowsocksMethod},\n    密码1: ${shadowsocksPassword1}\n    别名:自己起个任意名称\n}\n\nShadowsocks 导入链接:\nss://${shadowsocksMethod}:${configShadowsocksPasswordPrefix}${shadowsocksPassword1}@${configNetworkVPSIP}:${configSSXrayPort}\n\n或\n\n${configShadowsocksLinkFull}\n\nEOF\n\n\n\n    showHeaderGreen \" Shadowsocks Rust 安装成功 !\"\n\n    red \" ShadowsocksRust 服务器端配置路径 ${configSSRustPath}/shadowsocks.json !\"\n    green \" ShadowsocksRust 查看日志命令: journalctl -n 50 -u shadowsocksrust.service \"\n    green \" ShadowsocksRust 停止命令: systemctl stop shadowsocksrust.service  启动命令: systemctl start shadowsocksrust.service \"\n    green \" ShadowsocksRust 重启命令: systemctl restart shadowsocksrust.service\"\n    green \" ShadowsocksRust 查看运行状态命令:  systemctl status shadowsocksrust.service \"\n    green \" ShadowsocksRust 服务器 每天会自动重启, 防止内存泄漏. 运行 crontab -l 命令 查看定时重启命令 !\"\n\n    echo\n    cat \"${configSSRustPath}/clientConfig.json\"\n    echo\n\n\n}\n\n\nfunction installShadowsocks(){\n\n    if [ -f \"${configSSXrayPath}/xray\"  ]; then\n        showHeaderGreen \" 已安装过 Shadowsocks Xray, 退出安装 !\" \\\n        \" Shadowsocks Xray already installed, exit !\"\n        exit 0\n    fi\n\n    showHeaderGreen \" 开始安装 Xray Shadowsocks \" \\\n    \" Prepare to install Xray Shadowsocks \"\n\n    configNetworkVPSIP=$(get_ip)\n\n    getV2rayVersion \"xray\" \"shadowsocks\"\n    green \" 准备下载并安装 Xray Version: ${versionXray} !\"\n    green \" Prepare to download and install Xray Version: ${versionXray} !\"\n\n    echo\n    mkdir -p \"${configSSXrayPath}\"\n    cd \"${configSSXrayPath}\" || exit\n\n    downloadV2rayXrayBin \"shadowsocks\"\n\n    selectShadowsocksMethod\n\n    if [[ \"${isShadowsocksMethodInput}\" == \"6\" || \"${isShadowsocksMethodInput}\" == \"7\" || \"${isShadowsocksMethodInput}\" == \"8\" ]]; then\n        read -r -d '' shadowsocksXrayConfigInboundInput << EOM\n    \"inbounds\": [\n        {\n            \"port\": ${configSSXrayPort},\n            \"protocol\": \"shadowsocks\",\n            \"settings\": {\n                \"method\": \"${shadowsocksMethod}\",\n                \"password\": \"${shadowsocksPassword0}\",\n                \"network\": \"tcp,udp\",\n                \"clients\": [\n                    { \"password\": \"${shadowsocksPassword1}\", \"email\": \"password101@gmail.com\" },\n                    { \"password\": \"${shadowsocksPassword2}\", \"email\": \"password102@gmail.com\" },\n                    { \"password\": \"${shadowsocksPassword3}\", \"email\": \"password103@gmail.com\" },\n                    { \"password\": \"${shadowsocksPassword4}\", \"email\": \"password104@gmail.com\" },\n                    { \"password\": \"${shadowsocksPassword5}\", \"email\": \"password105@gmail.com\" }\n                ]\n            }\n        }\n    ],\nEOM\n\n\nelse\n\n    read -r -d '' shadowsocksXrayConfigInboundInput << EOM\n    \"inbounds\": [\n        {\n            \"port\": ${configSSXrayPort},\n            \"protocol\": \"shadowsocks\",\n            \"settings\": {\n                \"network\": \"tcp,udp\",\n                \"clients\": [\n                    { \"password\": \"${shadowsocksPassword1}\", \"method\": \"${shadowsocksMethod}\", \"email\": \"password101@gmail.com\" },\n                    { \"password\": \"${shadowsocksPassword2}\", \"method\": \"${shadowsocksMethod}\", \"email\": \"password102@gmail.com\" },\n                    { \"password\": \"${shadowsocksPassword3}\", \"method\": \"${shadowsocksMethod}\", \"email\": \"password103@gmail.com\" },\n                    { \"password\": \"${shadowsocksPassword4}\", \"method\": \"${shadowsocksMethod}\", \"email\": \"password104@gmail.com\" },\n                    { \"password\": \"${shadowsocksPassword5}\", \"method\": \"${shadowsocksMethod}\", \"email\": \"password105@gmail.com\" }\n                ]\n            }\n        }\n    ],\nEOM\n\n\nfi\n\n\n    echo\n    echo\n    green \" ==================================================\"\n    yellow \" 是否屏蔽中国回国流量, 根据 geosite:cn 和 geoip:cn 规则判断是否中国回国流量\"\n    yellow \" 屏蔽中国回国流量, 可以有效防止GFW的检测, 如果挂代理访问中国国内网站 则很容易2次过墙而被检测\"\n    echo\n    green \" 1. 屏蔽中国回国流量\"\n    green \" 2. 不屏蔽中国回国流量\"\n    green \" 3. 中国回国流量走 WARP IPv6 解锁\"\n    echo\n    green \" 默认选1 屏蔽回国流量. 选择3 需要安装好 Wireguard 和 Cloudflare WARP, 可重新运行本脚本选择第一项安装WARP\".\n    red \" 推荐先安装 Wireguard 与 Cloudflare WARP 后,再安装v2ray或xray. 实际上先安装v2ray或xray, 后安装Wireguard 与 Cloudflare WARP也没问题\"\n    echo\n    read -p \"请输入? 直接回车默认选1, 请输入纯数字:\" isV2rayBlockChinaSiteInput\n    isV2rayBlockChinaSiteInput=${isV2rayBlockChinaSiteInput:-1}\n\n    V2rayBlockChinaSiteRuleText=\"blocked_out\"\n\n\n    if [[ $isV2rayBlockChinaSiteInput == \"1\" ]]; then\n        V2rayBlockChinaSiteRuleText=\"blocked_out\"\n\n    elif [[ $isV2rayBlockChinaSiteInput == \"2\" ]]; then\n        V2rayBlockChinaSiteRuleText=\"IPv4_out\"\n\n    else\n        V2rayBlockChinaSiteRuleText=\"IPv6_out\"\n\n    fi\n\n\n\n    cat > ${configSSXrayPath}/config.json <<-EOF\n{\n    \"log\" : {\n        \"access\": \"${configSSAccessLogFilePath}\",\n        \"error\": \"${configSSErrorLogFilePath}\",\n        \"loglevel\": \"warning\"\n    },\n    ${shadowsocksXrayConfigInboundInput}\n\n    \"routing\": {\n        \"domainStrategy\": \"IPIfNonMatch\",\n        \"rules\": [\n\n            {\n                \"type\": \"field\",\n                \"domain\": [\n                    \"geosite:cn\"\n                ],\n                \"outboundTag\": \"${V2rayBlockChinaSiteRuleText}\"\n            },\n            {\n                \"type\": \"field\",\n                \"ip\": [\n                    \"geoip:cn\"\n                ],\n                \"outboundTag\": \"${V2rayBlockChinaSiteRuleText}\"\n            },\n            {\n                \"type\": \"field\",\n                \"outboundTag\": \"IPv4_out\",\n                \"network\": \"udp,tcp\"\n            }\n        ]\n    },\n    \"outbounds\": [\n        {\n            \"tag\":\"IPv4_out\",\n            \"protocol\": \"freedom\",\n            \"settings\": {\n                \"domainStrategy\": \"UseIPv4\"\n            }\n        },\n        {\n            \"tag\": \"blocked_out\",\n            \"protocol\": \"blackhole\",\n            \"settings\": {\n                \"response\": {\n                    \"type\": \"http\"\n                }\n            }\n        },\n        {\n            \"tag\":\"IPv6_out\",\n            \"protocol\": \"freedom\",\n            \"settings\": {\n                \"domainStrategy\": \"UseIPv6\"\n            }\n        }\n    ]\n}\nEOF\n\n\n\n\n\n        cat > ${osSystemMdPath}shadowsocksxray.service <<-EOF\n[Unit]\nDescription=Xray Service\nDocumentation=https://github.com/xtls\nAfter=network.target nss-lookup.target\n\n[Service]\nType=simple\n# This service runs as root. You may consider to run it as another user for security concerns.\n# By uncommenting User=nobody and commenting out User=root, the service will run as user nobody.\n# More discussion at https://github.com/v2ray/v2ray-core/issues/1011\nUser=root\n#User=nobody\n#CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE\nNoNewPrivileges=true\nExecStart=${configSSXrayPath}/xray run -config ${configSSXrayPath}/config.json\nRestart=on-failure\nRestartPreventExitStatus=23\nLimitNPROC=10000\nLimitNOFILE=1000000\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n    ${sudoCmd} chmod +x ${configSSXrayPath}/xray\n    ${sudoCmd} chmod +x ${osSystemMdPath}shadowsocksxray.service\n    ${sudoCmd} systemctl daemon-reload\n\n    ${sudoCmd} systemctl enable shadowsocksxray.service\n    ${sudoCmd} systemctl restart shadowsocksxray.service\n\n\n\n    # 设置 cron 定时任务\n    # https://stackoverflow.com/questions/610839/how-can-i-programmatically-create-a-new-cron-job\n\n    (crontab -l ; echo \"10 4 * * 0,1,2,3,4,5,6 rm -f /root/ss-*\") | sort - | uniq - | crontab -\n    (crontab -l ; echo \"20 4 * * 0,1,2,3,4,5,6 systemctl restart shadowsocksxray.service\") | sort - | uniq - | crontab -\n\n\n\nif [[ \"${isShadowsocksMethodInput}\" == \"6\" || \"${isShadowsocksMethodInput}\" == \"7\" || \"${isShadowsocksMethodInput}\" == \"8\" ]]; then\n    configShadowsocksPasswordPrefix=\"${shadowsocksPassword0}:\"\nelse\n    configShadowsocksPasswordPrefix=\"\"\nfi\n\n    configShadowsocksLink=$(echo -n \"${shadowsocksMethod}:${configShadowsocksPasswordPrefix}${shadowsocksPassword1}@${configNetworkVPSIP}:${configSSXrayPort}\" | base64 -w0)\n    configShadowsocksLinkFull=\"ss://${configShadowsocksLink}\"\n\n    cat > ${configSSXrayPath}/clientConfig.json <<-EOF\n\n=========== 客户端 Shadowsocks 配置参数 密码任选其一 =============\n\n{\n    协议: Shadowsocks,\n    地址: IP ${configNetworkVPSIP},\n    端口: ${configSSXrayPort},\n    加密方式: ${shadowsocksMethod},\n    密码1: ${configShadowsocksPasswordPrefix}${shadowsocksPassword1},\n    密码2: ${configShadowsocksPasswordPrefix}${shadowsocksPassword2},\n    密码3: ${configShadowsocksPasswordPrefix}${shadowsocksPassword3},\n    密码4: ${configShadowsocksPasswordPrefix}${shadowsocksPassword4},\n    密码5: ${configShadowsocksPasswordPrefix}${shadowsocksPassword5},\n    别名:自己起个任意名称\n}\n\nShadowsocks 导入链接:\nss://${shadowsocksMethod}:${configShadowsocksPasswordPrefix}${shadowsocksPassword1}@${configNetworkVPSIP}:${configSSXrayPort}\n\n或\n\n${configShadowsocksLinkFull}\n\n\nEOF\n\n\n    showHeaderGreen \" Shadowsocks Xray ${versionXray} 安装成功 !\"\n\n    red \" Shadowsocksxray 服务器端配置路径 ${configSSXrayPath}/config.json !\"\n    green \" Shadowsocksxray 访问日志 ${configSSAccessLogFilePath} !\"\n    green \" Shadowsocksxray 错误日志 ${configSSErrorLogFilePath} ! \"\n    green \" Shadowsocksxray 查看日志命令: journalctl -n 50 -u shadowsocksxray.service \"\n    green \" Shadowsocksxray 停止命令: systemctl stop shadowsocksxray.service  启动命令: systemctl start shadowsocksxray.service \"\n    green \" Shadowsocksxray 重启命令: systemctl restart shadowsocksxray.service\"\n    green \" Shadowsocksxray 查看运行状态命令:  systemctl status shadowsocksxray.service \"\n    green \" Shadowsocksxray 服务器 每天会自动重启, 防止内存泄漏. 运行 crontab -l 命令 查看定时重启命令 !\"\n\n    echo\n    cat \"${configSSXrayPath}/clientConfig.json\"\n    echo\n\n}\n\n\n\n\nfunction removeShadowsocks(){\n\n    if [[ -f \"${configSSXrayPath}/xray\" ]]; then\n        echo\n        green \" ================================================== \"\n        green \" Are you sure to remove Shadowsocks Xray ? \"\n        echo\n        read -r -p \"是否确认卸载 Shadowsocks Xray? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveShadowsocksServerInput\n        isRemoveShadowsocksServerInput=${isRemoveShadowsocksServerInput:-Y}\n\n        if [[ \"${isRemoveShadowsocksServerInput}\" == [Yy] ]]; then\n\n            ${sudoCmd} systemctl stop shadowsocksxray.service\n            ${sudoCmd} systemctl disable shadowsocksxray.service\n\n            rm -rf ${configSSXrayPath}\n            rm -f ${osSystemMdPath}shadowsocksxray.service\n            rm -f ${configSSAccessLogFilePath}\n            rm -f ${configSSErrorLogFilePath}\n\n            crontab -l | grep -v \"rm\" | crontab -\n            crontab -l | grep -v \"shadowsocksxray\" | crontab -\n\n            showHeaderGreen \" Shadowsocks Xray 卸载完毕 !\" \\\n            \" Shadowsocks Xray uninstalled successfully !\"\n\n        fi\n\n    else\n        showHeaderRed \" 系统没有安装 Shadowsocks Xray, 退出卸载 !\" \\\n        \" Shadowsocks Xray not found, exit !\"\n        exit 0\n    fi\n\n\n\n\n    if [[ -f \"${configSSRustPath}/ssserver\" ]]; then\n        echo\n        green \" ================================================== \"\n        green \" Are you sure to remove Shadowsocks Rust ? \"\n        echo\n        read -r -p \"是否确认卸载 Shadowsocks Rust? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveShadowsocksServerInput\n        isRemoveShadowsocksServerInput=${isRemoveShadowsocksServerInput:-Y}\n\n        if [[ \"${isRemoveShadowsocksServerInput}\" == [Yy] ]]; then\n\n            ${sudoCmd} systemctl stop shadowsocksrust.service\n            ${sudoCmd} systemctl disable shadowsocksrust.service\n\n            rm -rf ${configSSRustPath}\n            rm -f ${osSystemMdPath}shadowsocksrust.service\n\n            crontab -l | grep -v \"shadowsocksrust\" | crontab -\n\n            showHeaderGreen \" Shadowsocks Rust 卸载完毕 !\" \\\n            \" Shadowsocks Rust uninstalled successfully !\"\n        fi\n    else\n        showHeaderRed \" 系统没有安装 Shadowsocks Rust, 退出卸载 !\" \\\n        \" Shadowsocks Rust not found, exit !\"\n        exit 0\n    fi\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nxrayRealityX25519Key=\"\"\nxrayRealityPrivateKey=\"\"\nxrayRealityPublicKey=\"\"\nxrayRealityShortId=\"\"\nconfigxrayRealityKeyFilePath=\"${HOME}/xray_reality_key\"\n\nfunction generateXrayRealityShortId() {\n    # Generate random string of specified length\n    # 0 到 f，长度为 2 的倍数，长度上限为 16\n    local hex_chars=\"0123456789abcdef\"\n\n    for (( i=0; i<16; i++ )); do\n        xrayRealityShortId+=${hex_chars:$((RANDOM%16)):1}\n    done\n}\n\nfunction generateXrayRealityPrivateKey(){\n\n    if [[ -f \"${configxrayRealityKeyFilePath}\" ]]; then\n        xrayRealityX25519Key=$(cat ${configxrayRealityKeyFilePath})\n        xrayRealityPrivateKey=$(echo \"${xrayRealityX25519Key}\" | head -1 | awk '{print $3}')\n        xrayRealityPublicKey=$(echo \"${xrayRealityX25519Key}\" | tail -n 1 | awk '{print $3}')\n    fi\n\n    if [[ -z \"${xrayRealityPrivateKey}\" ]]; then\n        xrayRealityX25519Key=$(${configV2rayPath}/xray x25519)\n        echo \"${xrayRealityX25519Key}\" > \"${configxrayRealityKeyFilePath}\"\n        xrayRealityPrivateKey=$(echo \"${xrayRealityX25519Key}\" | head -1 | awk '{print $3}')\n        xrayRealityPublicKey=$(echo \"${xrayRealityX25519Key}\" | tail -n 1 | awk '{print $3}')\n    else\n        echo\n        green \" 发现之前安装的 Xray Reality PublicKey 和 PrivateKey, 是否重新生成新Key？\"\n        green \" 默认直接回车 重新生成新Key, 选否则使用之前生成的Key \"\n        echo\n        read -r -p \"是否重新生成新的 Reality Key, 请输入[Y/n]:\" isGenerateNewXrayRealityKey\n        isGenerateNewXrayRealityKey=${isGenerateNewXrayRealityKey:-Y}\n        if [[ \"${isGenerateNewXrayRealityKey}\" == [Yy] ]]; then\n            xrayRealityX25519Key=$(${configV2rayPath}/xray x25519)\n            echo \"${xrayRealityX25519Key}\" > \"${configxrayRealityKeyFilePath}\"\n            xrayRealityPrivateKey=$(echo \"${xrayRealityX25519Key}\" | head -1 | awk '{print $3}')\n            xrayRealityPublicKey=$(echo \"${xrayRealityX25519Key}\" | tail -n 1 | awk '{print $3}')\n        fi\n    fi\n\n    generateXrayRealityShortId\n}\n\n\n\n\n\n\n\nfunction downloadV2rayXrayBin(){\n    if [ -z $1 ]; then\n        tempDownloadV2rayPath=\"${configV2rayPath}\"\n    elif [ \"$1\" = \"shadowsocks\" ]; then\n        isXray=\"yes\"\n        tempDownloadV2rayPath=\"${configSSXrayPath}\"\n\n    else\n        tempDownloadV2rayPath=\"${configV2rayPath}/upgrade/${promptInfoXrayName}\"\n    fi\n\n    mkdir -p \"${tempDownloadV2rayPath}\"\n    cd \"${tempDownloadV2rayPath}\" || exit\n\n    if [ \"$isXray\" = \"no\" ] ; then\n        # https://github.com/v2fly/v2ray-core/releases/download/v4.41.1/v2ray-linux-64.zip\n        # https://github.com/v2fly/v2ray-core/releases/download/v4.41.1/v2ray-linux-arm32-v6.zip\n        # https://github.com/v2fly/v2ray-core/releases/download/v4.44.0/v2ray-linux-arm64-v8a.zip\n\n        if [[ ${osArchitecture} == \"arm\" ]] ; then\n            downloadFilenameV2ray=\"v2ray-linux-arm32-v6.zip\"\n        fi\n        if [[ ${osArchitecture} == \"arm64\" ]] ; then\n            downloadFilenameV2ray=\"v2ray-linux-arm64-v8a.zip\"\n        fi\n\n        downloadAndUnzip \"https://github.com/v2fly/v2ray-core/releases/download/v${versionV2ray}/${downloadFilenameV2ray}\" \"${tempDownloadV2rayPath}\" \"${downloadFilenameV2ray}\"\n\n    else\n        # https://github.com/XTLS/Xray-core/releases/download/v1.5.0/Xray-linux-64.zip\n        # https://github.com/XTLS/Xray-core/releases/download/v1.5.2/Xray-linux-arm32-v6.zip\n        if [[ ${osArchitecture} == \"arm\" ]] ; then\n            downloadFilenameXray=\"Xray-linux-arm32-v6.zip\"\n        fi\n        if [[ ${osArchitecture} == \"arm64\" ]] ; then\n            downloadFilenameXray=\"Xray-linux-arm64-v8a.zip\"\n        fi\n\n        downloadAndUnzip \"https://github.com/XTLS/Xray-core/releases/download/v${versionXray}/${downloadFilenameXray}\" \"${tempDownloadV2rayPath}\" \"${downloadFilenameXray}\"\n    fi\n\n    if [ \"$1\" = \"upgrade\" ]; then\n        if [ \"$isXray\" = \"no\" ]; then\n            mv -f ${configV2rayPath}/upgrade/${promptInfoXrayName}/v2ctl ${configV2rayPath}\n        fi\n\n        mv -f ${configV2rayPath}/upgrade/${promptInfoXrayName}/${promptInfoXrayName} ${configV2rayPath}\n        mv -f ${configV2rayPath}/upgrade/${promptInfoXrayName}/geoip.dat ${configV2rayPath}\n        mv -f ${configV2rayPath}/upgrade/${promptInfoXrayName}/geosite.dat ${configV2rayPath}\n    fi\n\n}\n\n\n\nfunction inputV2rayStreamSettings(){\n    echo\n    green \" ==================================================\"\n    yellow \" 请选择 V2ray或Xray的 StreamSettings 传输协议, 默认为3 Websocket\"\n    echo\n    green \" 1. TCP \"\n    green \" 2. KCP \"\n    green \" 3. WebSocket 支持CDN\"\n    green \" 4. HTTP/2 (注意Nginx不支持HTTP/2的转发)\"\n    green \" 5. QUIC \"\n    green \" 6. gRPC 支持CDN\"\n    green \" 7. WebSocket + gRPC 支持CDN\"\n    echo\n    read -p \"请选择传输协议? 直接回车默认选3 Websocket, 请输入纯数字:\" isV2rayStreamSettingInput\n    isV2rayStreamSettingInput=${isV2rayStreamSettingInput:-3}\n\n    if [[ $isV2rayStreamSettingInput == 1 ]]; then\n        configV2rayStreamSetting=\"tcp\"\n\n    elif [[ $isV2rayStreamSettingInput == 2 ]]; then\n        configV2rayStreamSetting=\"kcp\"\n        inputV2rayKCPSeedPassword\n\n    elif [[ $isV2rayStreamSettingInput == 4 ]]; then\n        configV2rayStreamSetting=\"h2\"\n        inputV2rayWSPath \"h2\"\n    elif [[ $isV2rayStreamSettingInput == 5 ]]; then\n        configV2rayStreamSetting=\"quic\"\n        inputV2rayKCPSeedPassword \"quic\"\n\n    elif [[ $isV2rayStreamSettingInput == 6 ]]; then\n        configV2rayStreamSetting=\"grpc\"\n\n    elif [[ $isV2rayStreamSettingInput == 7 ]]; then\n        configV2rayStreamSetting=\"wsgrpc\"\n\n    else\n        configV2rayStreamSetting=\"ws\"\n        inputV2rayWSPath\n    fi\n\n\n    if [[ \"${configInstallNginxMode}\" == \"v2raySSL\" || ${configV2rayWorkingNotChangeMode} == \"true\" ]]; then\n\n         if [[ \"${configV2rayStreamSetting}\" == \"grpc\" ]]; then\n            inputV2rayGRPCPath\n\n        elif [[ \"${configV2rayStreamSetting}\" == \"wsgrpc\" ]]; then\n            inputV2rayWSPath\n            inputV2rayGRPCPath\n        fi\n\n    else\n\n        if [[ \"${configV2rayStreamSetting}\" == \"grpc\" ]]; then\n            inputV2rayServerPort \"textMainGRPCPort\"\n\n            configV2rayGRPCPort=${isV2rayUserPortGRPCInput}\n            configV2rayPortGRPCShowInfo=${isV2rayUserPortGRPCInput}\n\n            inputV2rayGRPCPath\n\n        elif [[ \"${configV2rayStreamSetting}\" == \"wsgrpc\" ]]; then\n            inputV2rayWSPath\n\n            inputV2rayServerPort \"textMainGRPCPort\"\n\n            configV2rayGRPCPort=${isV2rayUserPortGRPCInput}\n            configV2rayPortGRPCShowInfo=${isV2rayUserPortGRPCInput}\n\n            inputV2rayGRPCPath\n        fi\n\n    fi\n}\n\nfunction inputV2rayKCPSeedPassword(){\n    echo\n    configV2rayKCPSeedPassword=$(cat /dev/urandom | head -1 | md5sum | head -c 4)\n\n    configV2rayKCPQuicText=\"KCP的Seed 混淆密码\"\n    if [[ $1 == \"quic\" ]]; then\n        configV2rayKCPQuicText=\"QUIC 的key密钥\"\n    fi\n\n    read -p \"是否自定义${promptInfoXrayName}的 ${configV2rayKCPQuicText}? 直接回车默认创建随机密码, 请输入自定义密码:\" isV2rayUserKCPSeedInput\n    isV2rayUserKCPSeedInput=${isV2rayUserKCPSeedInput:-${configV2rayKCPSeedPassword}}\n\n    if [[ -z $isV2rayUserKCPSeedInput ]]; then\n        echo\n    else\n        configV2rayKCPSeedPassword=${isV2rayUserKCPSeedInput}\n    fi\n}\n\n\nfunction inputV2rayWSPath(){\n    echo\n    configV2rayWebSocketPath=$(cat /dev/urandom | head -1 | md5sum | head -c 8)\n\n    configV2rayWSH2Text=\"WS\"\n    if [[ $1 == \"h2\" ]]; then\n        configV2rayWSH2Text=\"HTTP2\"\n    fi\n\n    read -r -p \"是否自定义${promptInfoXrayName}的 ${configV2rayWSH2Text}的Path? 直接回车默认创建随机路径, 请输入自定义路径(不要输入/):\" isV2rayUserWSPathInput\n    isV2rayUserWSPathInput=${isV2rayUserWSPathInput:-${configV2rayWebSocketPath}}\n\n    if [[ -z $isV2rayUserWSPathInput ]]; then\n        echo\n    else\n        configV2rayWebSocketPath=${isV2rayUserWSPathInput}\n    fi\n}\n\nfunction inputV2rayGRPCPath(){\n    echo\n    configV2rayGRPCServiceName=$(cat /dev/urandom | head -1 | md5sum | head -c 8)\n\n    read -p \"是否自定义${promptInfoXrayName}的 gRPC 的serviceName ? 直接回车默认创建随机路径, 请输入自定义路径(不要输入/):\" isV2rayUserGRPCPathInput\n    isV2rayUserGRPCPathInput=${isV2rayUserGRPCPathInput:-${configV2rayGRPCServiceName}}\n\n    if [[ -z $isV2rayUserGRPCPathInput ]]; then\n        echo\n    else\n        configV2rayGRPCServiceName=${isV2rayUserGRPCPathInput}\n    fi\n}\n\n\nfunction inputV2rayServerPort(){\n    echo\n    if [[ $1 == \"textMainPort\" ]]; then\n        green \" 是否自定义${promptInfoXrayName}的端口号? 如要支持cloudflare的CDN, 需要使用cloudflare支持的HTTPS端口号 例如 443 8443 2053 2083 2087 2096 端口\"\n        green \" 具体请看cloudflare官方文档 https://developers.cloudflare.com/fundamentals/get-started/network-ports\"\n        read -p \"是否自定义${promptInfoXrayName}的端口号? 直接回车默认为${configV2rayPortShowInfo}, 请输入自定义端口号[1-65535]:\" isV2rayUserPortInput\n        isV2rayUserPortInput=${isV2rayUserPortInput:-${configV2rayPortShowInfo}}\n        checkPortInUse \"${isV2rayUserPortInput}\" $1\n    fi\n\n    if [[ $1 == \"textMainGRPCPort\" ]]; then\n        green \" 如果使用gRPC 协议并要支持cloudflare的CDN, 需要输入 443 端口才可以\"\n        read -p \"是否自定义${promptInfoXrayName} gRPC的端口号? 直接回车默认为${configV2rayPortGRPCShowInfo}, 请输入自定义端口号[1-65535]:\" isV2rayUserPortGRPCInput\n        isV2rayUserPortGRPCInput=${isV2rayUserPortGRPCInput:-${configV2rayPortGRPCShowInfo}}\n        checkPortInUse \"${isV2rayUserPortGRPCInput}\" $1\n    fi\n\n    if [[ $1 == \"textAdditionalPort\" ]]; then\n        green \" 是否添加一个额外监听端口, 与主端口${configV2rayPort}一起同时工作\"\n        green \" 一般用于 中转机无法使用443端口 使用额外端口中转给目标主机时使用\"\n        read -p \"是否给${promptInfoXrayName}添加额外的监听端口? 直接回车默认否, 请输入额外端口号[1-65535]:\" isV2rayAdditionalPortInput\n        isV2rayAdditionalPortInput=${isV2rayAdditionalPortInput:-999999}\n        checkPortInUse \"${isV2rayAdditionalPortInput}\" $1\n    fi\n\n\n    if [[ $1 == \"textMainTrojanPort\" ]]; then\n        green \"是否自定义Trojan${promptInfoTrojanName}的端口号? 直接回车默认为${configV2rayTrojanPort}\"\n        read -p \"是否自定义Trojan${promptInfoTrojanName}的端口号? 直接回车默认为${configV2rayTrojanPort}, 请输入自定义端口号[1-65535]:\" isTrojanUserPortInput\n        isTrojanUserPortInput=${isTrojanUserPortInput:-${configV2rayTrojanPort}}\n        checkPortInUse \"${isTrojanUserPortInput}\" $1\n    fi\n}\n\nfunction checkPortInUse(){\n    if [ $1 = \"999999\" ]; then\n        echo\n    elif [[ $1 -gt 1 && $1 -le 65535 ]]; then\n        isPortUsed=$(netstat -tulpn | grep -e \":$1\") ;\n        if [ -z \"${isPortUsed}\" ]; then\n            green \"输入的端口号 $1 没有被占用, 继续安装...\"\n\n        else\n            processInUsedName=$(echo \"${isPortUsed}\" | awk '{print $7}' | awk -F\"/\" '{print $2}')\n            red \"输入的端口号 $1 已被 ${processInUsedName} 占用! 请退出安装, 检查端口是否已被占用 或 重新输入!\"\n            inputV2rayServerPort $2\n        fi\n    else\n        red \"输入的端口号错误! 必须是[1-65535]. 请重新输入\"\n        inputV2rayServerPort $2\n    fi\n}\n\n\nv2rayVmessLinkQR1=\"\"\nv2rayVmessLinkQR2=\"\"\nv2rayVlessLinkQR1=\"\"\nv2rayVlessLinkQR2=\"\"\nv2rayPassword1UrlEncoded=\"\"\n\nfunction rawUrlEncode() {\n    # https://stackoverflow.com/questions/296536/how-to-urlencode-data-for-curl-command\n\n\n    local string=\"${1}\"\n    local strlen=${#string}\n    local encoded=\"\"\n    local pos c o\n\n    for (( pos=0 ; pos<strlen ; pos++ )); do\n        c=${string:$pos:1}\n        case \"$c\" in\n            [-_.~a-zA-Z0-9] ) o=\"${c}\" ;;\n            * )               printf -v o '%%%02x' \"'$c\"\n        esac\n        encoded+=\"${o}\"\n    done\n    echo\n    green \"== URL Encoded: ${encoded}\"    # You can either set a return variable (FASTER)\n    v2rayPassword1UrlEncoded=\"${encoded}\"   #+or echo the result (EASIER)... or both... :p\n}\n\nfunction generateVmessImportLink(){\n    # https://github.com/2dust/v2rayN/wiki/%E5%88%86%E4%BA%AB%E9%93%BE%E6%8E%A5%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E(ver-2)\n\n    configV2rayVmessLinkConfigTls=\"tls\"\n    if [[ \"${configV2rayIsTlsShowInfo}\" == \"none\" ]]; then\n        configV2rayVmessLinkConfigTls=\"\"\n    fi\n\n    configV2rayVmessLinkStreamSetting1=\"${configV2rayStreamSetting}\"\n    configV2rayVmessLinkStreamSetting2=\"\"\n    if [[ \"${configV2rayStreamSetting}\" == \"wsgrpc\" ]]; then\n        configV2rayVmessLinkStreamSetting1=\"ws\"\n        configV2rayVmessLinkStreamSetting2=\"grpc\"\n    fi\n\n    configV2rayProtocolDisplayName=\"${configV2rayProtocol}\"\n    configV2rayProtocolDisplayHeaderType=\"none\"\n    configV2rayVmessLinkConfigPath=\"\"\n    configV2rayVmessLinkConfigPath2=\"\"\n\n    if [[ \"${configV2rayWorkingMode}\" == \"vlessTCPVmessWS\" ]]; then\n        configV2rayVmessLinkStreamSetting1=\"ws\"\n        configV2rayVmessLinkStreamSetting2=\"tcp\"\n\n        configV2rayVmessLinkConfigPath=\"${configV2rayWebSocketPath}\"\n        configV2rayVmessLinkConfigPath2=\"/tcp${configV2rayWebSocketPath}\"\n\n        configV2rayVmessLinkConfigTls=\"tls\"\n\n        configV2rayProtocolDisplayName=\"vmess\"\n\n        configV2rayProtocolDisplayHeaderType=\"http\"\n    fi\n\n\n\n    configV2rayVmessLinkConfigHost=\"${configSSLDomain}\"\n    if [[ \"${configV2rayStreamSetting}\" == \"quic\" ]]; then\n        configV2rayVmessLinkConfigHost=\"none\"\n    fi\n\n\n    if [[ \"${configV2rayStreamSetting}\" == \"kcp\" || \"${configV2rayStreamSetting}\" == \"quic\" ]]; then\n        configV2rayVmessLinkConfigPath=\"${configV2rayKCPSeedPassword}\"\n\n    elif [[ \"${configV2rayStreamSetting}\" == \"h2\" || \"${configV2rayStreamSetting}\" == \"ws\" ]]; then\n        configV2rayVmessLinkConfigPath=\"${configV2rayWebSocketPath}\"\n\n    elif [[ \"${configV2rayStreamSetting}\" == \"grpc\" ]]; then\n        configV2rayVmessLinkConfigPath=\"${configV2rayGRPCServiceName}\"\n\n    elif [[ \"${configV2rayStreamSetting}\" == \"wsgrpc\" ]]; then\n        configV2rayVmessLinkConfigPath=\"${configV2rayWebSocketPath}\"\n        configV2rayVmessLinkConfigPath2=\"${configV2rayGRPCServiceName}\"\n    fi\n\n    cat > ${configV2rayVmessImportLinkFile1Path} <<-EOF\n{\n    \"v\": \"2\",\n    \"ps\": \"${configSSLDomain}_${configV2rayProtocolDisplayName}_${configV2rayVmessLinkStreamSetting1}\",\n    \"add\": \"${configSSLDomain}\",\n    \"port\": \"${configV2rayPortShowInfo}\",\n    \"id\": \"${v2rayPassword1}\",\n    \"aid\": \"0\",\n    \"net\": \"${configV2rayVmessLinkStreamSetting1}\",\n    \"type\": \"none\",\n    \"host\": \"${configV2rayVmessLinkConfigHost}\",\n    \"path\": \"${configV2rayVmessLinkConfigPath}\",\n    \"tls\": \"${configV2rayVmessLinkConfigTls}\",\n    \"sni\": \"${configSSLDomain}\"\n}\n\nEOF\n\n    cat > ${configV2rayVmessImportLinkFile2Path} <<-EOF\n{\n    \"v\": \"2\",\n    \"ps\": \"${configSSLDomain}_${configV2rayProtocolDisplayName}_${configV2rayVmessLinkStreamSetting2}\",\n    \"add\": \"${configSSLDomain}\",\n    \"port\": \"${configV2rayPortShowInfo}\",\n    \"id\": \"${v2rayPassword1}\",\n    \"aid\": \"0\",\n    \"net\": \"${configV2rayVmessLinkStreamSetting2}\",\n    \"type\": \"${configV2rayProtocolDisplayHeaderType}\",\n    \"host\": \"${configV2rayVmessLinkConfigHost}\",\n    \"path\": \"${configV2rayVmessLinkConfigPath2}\",\n    \"tls\": \"${configV2rayVmessLinkConfigTls}\",\n    \"sni\": \"${configSSLDomain}\"\n}\n\nEOF\n\n    v2rayVmessLinkQR1=\"vmess://$(cat ${configV2rayVmessImportLinkFile1Path} | base64 -w 0)\"\n    v2rayVmessLinkQR2=\"vmess://$(cat ${configV2rayVmessImportLinkFile2Path} | base64 -w 0)\"\n}\n\nfunction generateVLessImportLink(){\n    # https://github.com/XTLS/Xray-core/discussions/716\n\n\n    generateVmessImportLink\n    rawUrlEncode \"${v2rayPassword1}\"\n\n    if [[ \"${configV2rayStreamSetting}\" == \"\" ]]; then\n\n        configV2rayVlessXtlsFlow=\"tls\"\n        configV2rayVlessXtlsFlowShowInfo=\"空\"\n        if [[ \"${configV2rayIsTlsShowInfo}\" == \"xtls\" ]]; then\n            configV2rayVlessXtlsFlow=\"xtls&flow=xtls-rprx-direct\"\n            configV2rayVlessXtlsFlowShowInfo=\"xtls-rprx-direct\"\n        fi\n        if [[ \"${configV2rayWorkingMode}\" == \"vlessTCPVision\" ]]; then\n            configV2rayVlessXtlsFlow=\"tls&flow=xtls-rprx-vision\"\n            configV2rayVlessXtlsFlowShowInfo=\"xtls-rprx-vision\"\n        fi\n        if [[ \"${configV2rayWorkingMode}\" == \"vlessTCPREALITY\" ]]; then\n            configV2rayVlessXtlsFlow=\"reality&flow=xtls-rprx-vision&fp=chrome&utls=chrome&pbk=${xrayRealityPublicKey}&sni=${configXrayRealitySni}&sid=${xrayRealityShortId}\"\n            configV2rayVlessXtlsFlowShowInfo=\"xtls-rprx-vision\"\n        fi\n\n\n        if [[ \"$configV2rayWorkingMode\" == \"vlessgRPC\" ]]; then\n            cat > ${configV2rayVlessImportLinkFile1Path} <<-EOF\n${configV2rayProtocol}://${v2rayPassword1UrlEncoded}@${configSSLDomain}:${configV2rayPortShowInfo}?encryption=none&security=${configV2rayVlessXtlsFlow}&type=grpc&host=${configSSLDomain}&serviceName=${configV2rayGRPCServiceName}#${configSSLDomain}+gRPC_${configV2rayIsTlsShowInfo}\nEOF\n        else\n            cat > ${configV2rayVlessImportLinkFile1Path} <<-EOF\n${configV2rayProtocol}://${v2rayPassword1UrlEncoded}@${configSSLDomain}:${configV2rayPortShowInfo}?encryption=none&security=${configV2rayVlessXtlsFlow}&type=tcp&host=${configSSLDomain}#${configSSLDomain}+TCP_${configV2rayIsTlsShowInfo}\nEOF\n\n            cat > ${configV2rayVlessImportLinkFile2Path} <<-EOF\n${configV2rayProtocol}://${v2rayPassword1UrlEncoded}@${configSSLDomain}:${configV2rayPortShowInfo}?encryption=none&security=tls&type=ws&host=${configSSLDomain}&path=%2f${configV2rayWebSocketPath}#${configSSLDomain}+WebSocket_${configV2rayIsTlsShowInfo}\nEOF\n        fi\n\n        v2rayVlessLinkQR1=\"$(cat ${configV2rayVlessImportLinkFile1Path})\"\n        v2rayVlessLinkQR2=\"$(cat ${configV2rayVlessImportLinkFile2Path})\"\n    else\n\n        if [[ \"${configV2rayProtocol}\" == \"vless\" ]]; then\n\n            cat > ${configV2rayVlessImportLinkFile1Path} <<-EOF\n${configV2rayProtocol}://${v2rayPassword1UrlEncoded}@${configSSLDomain}:${configV2rayPortShowInfo}?encryption=none&security=${configV2rayIsTlsShowInfo}&type=${configV2rayVmessLinkStreamSetting1}&path=%2f${configV2rayVmessLinkConfigPath}&headerType=none&seed=${configV2rayKCPSeedPassword}&quicSecurity=none&key=${configV2rayKCPSeedPassword}&serviceName=${configV2rayVmessLinkConfigPath}#${configSSLDomain}+${configV2rayVmessLinkStreamSetting1}_${configV2rayIsTlsShowInfo}\nEOF\n            cat > ${configV2rayVlessImportLinkFile2Path} <<-EOF\n${configV2rayProtocol}://${v2rayPassword1UrlEncoded}@${configSSLDomain}:${configV2rayPortShowInfo}?encryption=none&security=${configV2rayIsTlsShowInfo}&type=${configV2rayVmessLinkStreamSetting2}&host=${configSSLDomain}&path=%2f${configV2rayVmessLinkConfigPath2}&headerType=none&seed=${configV2rayKCPSeedPassword}&quicSecurity=none&key=${configV2rayKCPSeedPassword}&serviceName=${configV2rayVmessLinkConfigPath2}#${configSSLDomain}+${configV2rayVmessLinkStreamSetting2}_${configV2rayIsTlsShowInfo}\nEOF\n\n            v2rayVlessLinkQR1=\"$(cat ${configV2rayVlessImportLinkFile1Path})\"\n            v2rayVlessLinkQR2=\"$(cat ${configV2rayVlessImportLinkFile2Path})\"\n        fi\n\n    fi\n}\n\n\n\n\n\nv2rayConfigRouteGoNetflixInput=\"\"\nv2rayConfigOutboundV2rayGoNetflixServerInput=\"\"\nfunction unlockNetflixBySomebody(){\n\n    echo\n    yellow \" 某大佬提供了可以解锁Netflix非自制剧的V2ray服务器, 不保证有效\"\n    read -p \"是否使用某大佬提供的Netflix解锁服务器? 直接回车默认不使用, 请输入[y/N]:\" isV2rayUnlockGoNetflixInput\n    isV2rayUnlockGoNetflixInput=${isV2rayUnlockGoNetflixInput:-n}\n\n    if [[ $isV2rayUnlockGoNetflixInput == [Nn] ]]; then\n        echo\n    else\n        removeString=\"\\\"geosite:netflix\\\",\"\n        V2rayUnlockVideoSiteRuleText=${V2rayUnlockVideoSiteRuleText/\"$removeString\"/}\n\n        removeString2=\"\\\"geosite:disney\\\",\"\n        V2rayUnlockVideoSiteRuleText=${V2rayUnlockVideoSiteRuleText/\"$removeString2\"/}\n\n        removeString3=\"\\\"geosite:netflix\\\"\"\n        V2rayUnlockVideoSiteRuleText=${V2rayUnlockVideoSiteRuleText/\"$removeString3\"/}\n\n        removeString4=\"\\\"geosite:disney\\\"\"\n        V2rayUnlockVideoSiteRuleText=${V2rayUnlockVideoSiteRuleText/\"$removeString4\"/}\n\n        read -r -d '' v2rayConfigRouteGoNetflixInput << EOM\n            {\n                \"type\": \"field\",\n                \"outboundTag\": \"GoNetflix\",\n                \"domain\": [ \"geosite:netflix\", \"geosite:disney\" ]\n            },\nEOM\n\n        read -r -d '' v2rayConfigOutboundV2rayGoNetflixServerInput << EOM\n        {\n            \"tag\": \"GoNetflix\",\n            \"protocol\": \"vmess\",\n            \"streamSettings\": {\n                \"network\": \"ws\",\n                \"security\": \"tls\",\n                \"tlsSettings\": {\n                    \"allowInsecure\": false\n                },\n                \"wsSettings\": {\n                    \"path\": \"ws\"\n                }\n            },\n            \"mux\": {\n                \"enabled\": true,\n                \"concurrency\": 8\n            },\n            \"settings\": {\n                \"vnext\": [{\n                    \"address\": \"free-sg-01.unblocknetflix.cf\",\n                    \"port\": 443,\n                    \"users\": [\n                        { \"id\": \"402d7490-6d4b-42d4-80ed-e681b0e6f1f9\", \"security\": \"auto\", \"alterId\": 0 }\n                    ]\n                }]\n            }\n        },\nEOM\n\n        read -r -d '' v2rayConfigOutboundV2rayGoNetflixServerInput << EOM\n        {\n            \"tag\": \"GoNetflix\",\n            \"protocol\": \"vmess\",\n            \"streamSettings\": {\n                \"network\": \"tcp\",\n                \"security\": \"none\"\n            },\n            \"mux\": {\n                \"enabled\": true,\n                \"concurrency\": 8\n            },\n            \"settings\": {\n                \"vnext\": [{\n                    \"address\": \"34.84.10.251\",\n                    \"port\": 47890,\n                    \"users\": [\n                        { \"id\": \"e85059c9-a47b-44b5-b644-4eb96dfcd4de\", \"security\": \"auto\", \"alterId\": 0 }\n                    ]\n                }]\n            }\n        },\nEOM\n    fi\n\n}\n\n\nisInputWARPSock5Server=\"\"\nfunction inputUnlockWARPSock5Server(){\n\n    if [ -z \"${isInputWARPSock5Server}\" ]; then\n\n        echo\n        read -r -p \"请输入WARP Sock5 代理服务器地址? 直接回车默认本机 127.0.0.1, 请输入:\" unlockWARPServerIpInput\n        unlockWARPServerIpInput=${unlockWARPServerIpInput:-127.0.0.1}\n\n        echo\n        read -r -p \"请输入WARP Sock5 代理服务器端口号? 直接回车默认${configWARPPortLocalServerPort}, 请输入纯数字:\" unlockWARPServerPortInput\n        unlockWARPServerPortInput=${unlockWARPServerPortInput:-$configWARPPortLocalServerPort}\n\n        isInputWARPSock5Server=\"true\"\n    fi\n}\n\n\nisInputV2rayServer=\"\"\nfunction inputUnlockV2rayServerInfo(){\n\n    if [ -z \"${isInputV2rayServer}\" ]; then\n        isInputV2rayServer=\"true\"\n\n        echo\n        yellow \" 请选择可解锁流媒体的V2ray或Xray服务器的协议 \"\n        green \" 1. VLess + TCP + TLS\"\n        green \" 2. VLess + TCP + XTLS (Xray 1.7 以上版本不再支持)\"\n        green \" 3. VLess + TCP + XTLS Vision (Xray 1.7 以上版本才支持)\"\n        green \" 4. VLess + TCP + Reality (Xray 1.8 以上版本才支持)\"\n        green \" 5. VLess + WS + TLS (支持CDN)\"\n        green \" 6. VMess + TCP + TLS\"\n        green \" 7. VMess + WS + TLS (支持CDN)\"\n        echo\n        read -r -p \"请选择协议? 直接回车默认选3, 请输入纯数字:\" isV2rayUnlockServerProtocolInput\n        isV2rayUnlockServerProtocolInput=${isV2rayUnlockServerProtocolInput:-3}\n\n        isV2rayUnlockOutboundServerProtocolText=\"vless\"\n        if [[ $isV2rayUnlockServerProtocolInput == \"6\" || $isV2rayUnlockServerProtocolInput == \"7\" ]]; then\n            isV2rayUnlockOutboundServerProtocolText=\"vmess\"\n        fi\n\n        isV2rayUnlockOutboundServerTCPText=\"tcp\"\n        unlockOutboundServerWebSocketSettingText=\"\"\n        if [[ $isV2rayUnlockServerProtocolInput == \"5\" ||  $isV2rayUnlockServerProtocolInput == \"7\" ]]; then\n            isV2rayUnlockOutboundServerTCPText=\"ws\"\n            echo\n            yellow \" 请填写可解锁流媒体的V2ray或Xray服务器Websocket Path, 默认为/\"\n            read -r -p \"请填写Websocket Path? 直接回车默认为/ , 请输入(不要包含/):\" isV2rayUnlockServerWSPathInput\n            isV2rayUnlockServerWSPathInput=${isV2rayUnlockServerWSPathInput:-\"\"}\n            read -r -d '' unlockOutboundServerWebSocketSettingText << EOM\n                ,\n                \"wsSettings\": {\n                    \"path\": \"/${isV2rayUnlockServerWSPathInput}\"\n                }\nEOM\n        else\n            read -r -d '' unlockOutboundServerWebSocketSettingText << EOM\n                ,\n                \"${isV2rayUnlockOutboundServerTLSText}Settings\": {\n                    \"serverName\": \"${isV2rayUnlockServerDomainInput}\"\n                }\nEOM\n        fi\n\n\n        unlockOutboundServerXTLSFlowText=\"\"\n        isV2rayUnlockOutboundServerTLSText=\"tls\"\n        if [[ $isV2rayUnlockServerProtocolInput == \"2\" ]]; then\n            isV2rayUnlockOutboundServerTLSText=\"xtls\"\n\n            echo\n            yellow \" 请选择可解锁流媒体的V2ray或Xray服务器 XTLS模式下的Flow \"\n            green \" 1. VLess + TCP + XTLS (xtls-rprx-direct) 推荐\"\n            green \" 2. VLess + TCP + XTLS (xtls-rprx-splice) 此项可能会无法连接\"\n            read -r -p \"请选择Flow 参数? 直接回车默认选1, 请输入纯数字:\" isV2rayUnlockServerFlowInput\n            isV2rayUnlockServerFlowInput=${isV2rayUnlockServerFlowInput:-1}\n\n            unlockOutboundServerXTLSFlowValue=\"xtls-rprx-direct\"\n            if [[ $isV2rayUnlockServerFlowInput == \"1\" ]]; then\n                unlockOutboundServerXTLSFlowValue=\"xtls-rprx-direct\"\n            else\n                unlockOutboundServerXTLSFlowValue=\"xtls-rprx-splice\"\n            fi\n            read -r -d '' unlockOutboundServerXTLSFlowText << EOM\n                            \"flow\": \"${unlockOutboundServerXTLSFlowValue}\",\nEOM\n\n            read -r -d '' unlockOutboundServerWebSocketSettingText << EOM\n                ,\n                \"${isV2rayUnlockOutboundServerTLSText}Settings\": {\n                    \"serverName\": \"${isV2rayUnlockServerDomainInput}\"\n                }\nEOM\n\n        elif [[ $isV2rayUnlockServerProtocolInput == \"3\" ]]; then\n            read -r -d '' unlockOutboundServerXTLSFlowText << EOM\n                            \"flow\": \"xtls-rprx-vision\",\nEOM\n        elif [[ $isV2rayUnlockServerProtocolInput == \"4\" ]]; then\n            isV2rayUnlockOutboundServerTLSText=\"reality\"\n\n            echo\n            green \" 请输入回落域名 同时也用于serverName? 默认为www.ebay.com\"\n            read -r -p \"请输入回落域名, 直接回车默认为 www.ebay.com: \" configXrayRealityFallbackDomainNameInput\n\n            if [ -z \"${configXrayRealityFallbackDomainNameInput}\" ]; then\n                configXrayRealitySni=\"www.ebay.com\"\n            fi\n\n            echo\n            green \" 请输入privateKey? 默认为空\"\n            read -r -p \"请输入privateKey, 直接回车默认为空: \" xrayRealityPrivateKey\n            xrayRealityPrivateKey=${xrayRealityPrivateKey:-\"\"}\n\n            read -r -d '' unlockOutboundServerWebSocketSettingText << EOM\n                ,\n                \"realitySettings\": {\n                    \"show\": false,\n                    \"dest\": \"${configXrayRealitySni}:443\",\n                    \"xver\": 0,\n                    \"serverNames\": [\n                        \"${configXrayRealitySni}\",\n                        \"ebay.com\",\n                        \"www.ebay.com\",\n                        \"icloud.com\",\n                        \"www.icloud.com\",\n                        \"apple.com\",\n                        \"www.apple.com\",\n                        \"mozilla.org\",\n                        \"addons.mozilla.org\",\n                        \"walmart.com\",\n                        \"www.walmart.com\",\n                        \"etsy.com\",\n                        \"www.etsy.com\",\n                        \"shopify.com\",\n                        \"www.shopify.com\",\n                        \"samsung.com\",\n                        \"www.samsung.com\",\n                        \"airbnb.com\",\n                        \"www.airbnb.com\",\n                        \"asml.com\",\n                        \"www.asml.com\",\n                        \"tsmc.com\",\n                        \"www.tsmc.com\",\n                        \"pfizer.com\",\n                        \"www.pfizer.com\",\n                        \"microsoft.com\",\n                        \"www.microsoft.com\",\n                        \"support.microsoft.com\",\n                        \"office.com\",\n                        \"www.office.com\",\n                        \"signup.live.com\",\n                        \"www.live.com\",\n                        \"outlook.live.com\",\n                        \"lovelive-anime.jp\",\n                        \"s0.awsstatic.com\",\n                        \"d1.awsstatic.com\",\n                        \"amazon.com\",\n                        \"m.media-amazon.com\",\n                        \"www.lovelive-anime.jp\"\n                    ],\n                    \"privateKey\": \"${xrayRealityPrivateKey}\",\n                    \"maxTimeDiff\": 0,\n                    \"shortIds\": [\n                        \"\"\n                    ]\n                }\nEOM\n        fi\n\n\n        echo\n        yellow \" 请填写可解锁流媒体的V2ray或Xray服务器地址, 例如 www.example.com\"\n        read -r -p \"请填写可解锁流媒体服务器地址? 直接回车默认为本机, 请输入:\" isV2rayUnlockServerDomainInput\n        isV2rayUnlockServerDomainInput=${isV2rayUnlockServerDomainInput:-127.0.0.1}\n\n        echo\n        yellow \" 请填写可解锁流媒体的V2ray或Xray服务器端口号, 例如 443\"\n        read -r -p \"请填写可解锁流媒体服务器地址? 直接回车默认为443, 请输入:\" isV2rayUnlockServerPortInput\n        isV2rayUnlockServerPortInput=${isV2rayUnlockServerPortInput:-443}\n\n        echo\n        yellow \" 请填写可解锁流媒体的V2ray或Xray服务器的用户UUID, 例如 4aeaf80d-f89e-46a2-b3dc-bb815eae75ba\"\n        read -r -p \"请填写用户UUID? 直接回车默认为111, 请输入:\" isV2rayUnlockServerUserIDInput\n        isV2rayUnlockServerUserIDInput=${isV2rayUnlockServerUserIDInput:-111}\n\n\n\n        read -r -d '' v2rayConfigOutboundV2rayServerInput << EOM\n        {\n            \"tag\": \"V2Ray_out\",\n            \"protocol\": \"${isV2rayUnlockOutboundServerProtocolText}\",\n            \"settings\": {\n                \"vnext\": [\n                    {\n                        \"address\": \"${isV2rayUnlockServerDomainInput}\",\n                        \"port\": ${isV2rayUnlockServerPortInput},\n                        \"users\": [\n                            {\n                                \"id\": \"${isV2rayUnlockServerUserIDInput}\",\n                                \"encryption\": \"none\",\n                                ${unlockOutboundServerXTLSFlowText}\n                                \"level\": 0\n                            }\n                        ]\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"${isV2rayUnlockOutboundServerTCPText}\",\n                \"security\": \"${isV2rayUnlockOutboundServerTLSText}\",\n\n                ${unlockOutboundServerWebSocketSettingText}\n            }\n        },\nEOM\n\n\n        echo\n        green \" 可自行修改V2ray或Xray配置, 在outbounds字段中增加一个tag为 V2Ray_out 的V2ray或Xray服务器配置\"\n        echo\n    fi\n\n\n}\n\n\nfunction v2rayRouteRule(){\n    site_LIST=(\"google\" \"openai\" \"anthropic\" \"twitter\" \"netflix\" \"disney\" \"youtube\" \"spotify\" \"pornhub\" )\n\n    V2rayUnlockSiteRuleV6Text=\"\"\n    V2rayUnlockSiteRuleSock5Text=\"\"\n    V2rayUnlockSiteRuleV2rayServerText=\"\"\n\n    # 使用 for 循环遍历数组中的元素\n    for site in \"${site_LIST[@]}\"; do\n\n        echo\n        green \" ==================================================\"\n\n        if [[ \"${site}\" == \"google\" ]]; then\n        yellow \" 请选择 避免弹出 Google reCAPTCHA 人机验证的方式\"\n\n        elif [[ \"${site}\" == \"openai\" ]]; then\n        yellow \" 请选择 解锁 OpenAI ChatGPT 方式\"\n\n        elif [[ \"${site}\" == \"anthropic\" ]]; then\n        yellow \" 请选择 解锁 Anthropic Claude AI 方式\"\n\n        elif [[ \"${site}\" == \"twitter\" ]]; then\n        yellow \" 请选择 解锁 Twitter 方式\"\n\n        elif [[ \"${site}\" == \"netflix\" ]]; then\n        yellow \" 请选择 解锁 Netflix 非自制剧的方式\"\n\n        elif [[ \"${site}\" == \"disney\" ]]; then\n        yellow \" 请选择 解锁 Disney+ 的方式\"\n\n        elif [[ \"${site}\" == \"youtube\" ]]; then\n        yellow \" 请选择 解锁 Youtube 和 Youtube Premium 的方式\"\n\n        elif [[ \"${site}\" == \"pornhub\" ]]; then\n        yellow \" 请选择 避免出现 Pornhub 视频变成玉米的方式\"\n\n        elif [[ \"${site}\" == \"spotify\" ]]; then\n        yellow \" 请选择 解锁 Spotify 的方式\"\n\n        fi\n\n\n        echo\n        green \" 1. 不解锁 出口使用 IPv4\"\n        green \" 2. 使用 IPv6 解锁, 需要配合安装WARP 推荐使用\"\n        green \" 3. 使用 WARP Sock5 代理解锁\"\n        green \" 4. 通过转发到可解锁的v2ray或xray服务器解锁\"\n        echo\n        green \" 默认选1 不解锁. 选择2,3解锁需要安装好 Wireguard 与 Cloudflare WARP, 可重新运行本脚本选择第1项安装\".\n        red \" 推荐先安装 Wireguard 与 Cloudflare WARP 后,再安装v2ray或xray. 实际上先安装v2ray或xray, 后安装Wireguard 与 Cloudflare WARP也没问题\"\n        red \" 但如果先安装v2ray或xray,选择2和3解锁, 那么会暂时无法访问google和其他视频网站, 需要继续安装Wireguard 与 Cloudflare WARP 才能访问\"\n        echo\n\n        read -r -p \"请输入解锁选项? 直接回车默认选1 不解锁, 请输入纯数字:\" isV2rayUnlockGoogleInput\n        isV2rayUnlockGoogleInput=${isV2rayUnlockGoogleInput:-1}\n\n        V2rayUnlockSiteRuleTempText=\", \\\"geosite:${site}\\\" \"\n\n        if [[ $isV2rayUnlockGoogleInput == \"2\" ]]; then\n            V2rayUnlockSiteRuleV6Text+=\"${V2rayUnlockSiteRuleTempText}\"\n\n        elif [[ $isV2rayUnlockGoogleInput == \"3\" ]]; then\n            V2rayUnlockSiteRuleSock5Text+=\"${V2rayUnlockSiteRuleTempText}\"\n            inputUnlockWARPSock5Server\n\n        elif [[ $isV2rayUnlockGoogleInput == \"4\" ]]; then\n            V2rayUnlockSiteRuleV2rayServerText+=\"${V2rayUnlockSiteRuleTempText}\"\n            inputUnlockV2rayServerInfo\n        else\n            echo \"\"\n        fi\n\n    done\n\n\n\n    V2rayUnlockVideoSiteRuleText=\"\"\n    echo\n    green \" ==================================================\"\n    yellow \" 是否解锁的更多的流媒体和视频网站:\"\n    echo\n    green \" 1. 不解锁\"\n    green \" 2. 解锁 Hulu \"\n    green \" 3. 解锁 HBO \"\n    green \" 5. 同时解锁 Hulu, HBO\"\n    green \" 9. 同时解锁 全部流媒体 包括 Hulu, HBO, Spotify, BBC, Fox, Niconico, DMM, Viu Pixiv 等\"\n    echo\n    read -r -p \"请输入解锁选项? 直接回车默认选1 不解锁, 请输入纯数字:\" isV2rayUnlockVideoSiteInput\n    isV2rayUnlockVideoSiteInput=${isV2rayUnlockVideoSiteInput:-1}\n\n    if [[ $isV2rayUnlockVideoSiteInput == \"2\" ]]; then\n        V2rayUnlockVideoSiteRuleText=\"\\\"geosite:hulu\\\"\"\n\n    elif [[ $isV2rayUnlockVideoSiteInput == \"3\" ]]; then\n        V2rayUnlockVideoSiteRuleText=\"\\\"geosite:hbo\\\"\"\n\n    elif [[ $isV2rayUnlockVideoSiteInput == \"4\" ]]; then\n        V2rayUnlockVideoSiteRuleText=\"\\\"geosite:bbc\\\"\"\n\n    elif [[ $isV2rayUnlockVideoSiteInput == \"5\" ]]; then\n        V2rayUnlockVideoSiteRuleText=\"\\\"geosite:hulu\\\", \\\"geosite:hbo\\\" \"\n\n    elif [[ $isV2rayUnlockVideoSiteInput == \"6\" ]]; then\n        V2rayUnlockVideoSiteRuleText=\" \\\"geosite:hulu\\\", \\\"geosite:hbo\\\" \"\n\n    elif [[ $isV2rayUnlockVideoSiteInput == \"7\" ]]; then\n        V2rayUnlockVideoSiteRuleText=\" \\\"geosite:hulu\\\", \\\"geosite:hbo\\\" \"\n\n    elif [[ $isV2rayUnlockVideoSiteInput == \"8\" ]]; then\n        V2rayUnlockVideoSiteRuleText=\" \\\"geosite:hulu\\\", \\\"geosite:hbo\\\" \"\n\n    elif [[ $isV2rayUnlockVideoSiteInput == \"9\" ]]; then\n        V2rayUnlockVideoSiteRuleText=\" \\\"geosite:hulu\\\", \\\"geosite:hbo\\\", \\\"geosite:bbc\\\", \\\"geosite:4chan\\\", \\\"geosite:fox\\\", \\\"geosite:abema\\\", \\\"geosite:dmm\\\", \\\"geosite:niconico\\\", \\\"geosite:pixiv\\\", \\\"geosite:viu\\\"\"\n\n    fi\n\n\n    if [[ $isV2rayUnlockVideoSiteInput != \"1\" ]]; then\n\n        echo\n        green \" ==================================================\"\n        yellow \" 请选择 解锁更多的流媒体和视频网站的方式\"\n        echo\n        green \" 1. 不使用解锁\"\n        green \" 2. 使用 IPv6 解锁, 需要配合安装WARP 推荐使用\"\n        green \" 3. 使用 WARP Sock5 代理解锁\"\n        green \" 4. 通过转发到可解锁的v2ray或xray服务器解锁\"\n        echo\n        read -r -p \"请输入? 直接回车默认选1 不解锁, 请输入纯数字:\" isV2rayUnlockWarpModeInput\n        isV2rayUnlockWarpModeInput=${isV2rayUnlockWarpModeInput:-1}\n\n        if [[ $isV2rayUnlockWarpModeInput == \"2\" ]]; then\n            V2rayUnlockSiteRuleV6Text+=\", ${V2rayUnlockVideoSiteRuleText}\"\n\n\n        elif [[ $isV2rayUnlockWarpModeInput == \"3\" ]]; then\n            V2rayUnlockSiteRuleSock5Text+=\", ${V2rayUnlockVideoSiteRuleText}\"\n\n            inputUnlockWARPSock5Server\n\n        elif [[ $isV2rayUnlockWarpModeInput == \"4\" ]]; then\n            V2rayUnlockSiteRuleV2rayServerText+=\", ${V2rayUnlockVideoSiteRuleText}\"\n\n            inputUnlockV2rayServerInfo\n        else\n            echo \"\"\n        fi\n\n    fi\n\n\n\n\n\n    if [ -z \"$V2rayUnlockSiteRuleV6Text\" ]; then\n        V2rayUnlockSiteRuleV6Text=\"\\\"test.com\\\" \"\n    else\n        V2rayUnlockSiteRuleV6TextFirstChar=\"${V2rayUnlockSiteRuleV6Text:0:1}\"\n\n        if [[ $V2rayUnlockSiteRuleV6TextFirstChar == \",\" ]]; then\n            V2rayUnlockSiteRuleV6Text=\"${V2rayUnlockSiteRuleV6Text:1}\"\n        fi\n    fi\n    if [ -z \"$V2rayUnlockSiteRuleSock5Text\" ]; then\n        V2rayUnlockSiteRuleSock5Text=\"\\\"test.com\\\" \"\n    else\n        V2rayUnlockSiteRuleSock5TextFirstChar=\"${V2rayUnlockSiteRuleSock5Text:0:1}\"\n\n        if [[ $V2rayUnlockSiteRuleSock5TextFirstChar == \",\" ]]; then\n            V2rayUnlockSiteRuleSock5Text=\"${V2rayUnlockSiteRuleSock5Text:1}\"\n        fi\n    fi\n    if [ -z \"$V2rayUnlockSiteRuleV2rayServerText\" ]; then\n        V2rayUnlockSiteRuleV2rayServerText=\"\\\"test.com\\\" \"\n    else\n        V2rayUnlockSiteRuleV2rayServerTextFirstChar=\"${V2rayUnlockSiteRuleV2rayServerText:0:1}\"\n\n        if [[ $V2rayUnlockSiteRuleV2rayServerTextFirstChar == \",\" ]]; then\n            V2rayUnlockSiteRuleV2rayServerText=\"${V2rayUnlockSiteRuleV2rayServerText:1}\"\n        fi\n    fi\n\n    read -r -d '' v2rayConfigRouteInput << EOM\n    \"routing\": {\n        \"domainStrategy\": \"IPIfNonMatch\",\n        \"rules\": [\n            {\n                \"type\": \"field\",\n                \"outboundTag\": \"IPv6_out\",\n                \"domain\": [${V2rayUnlockSiteRuleV6Text}]\n            },\n            {\n                \"type\": \"field\",\n                \"outboundTag\": \"WARP_out\",\n                \"domain\": [${V2rayUnlockSiteRuleSock5Text}]\n            },\n            {\n                \"type\": \"field\",\n                \"outboundTag\": \"V2Ray_out\",\n                \"domain\": [${V2rayUnlockSiteRuleV2rayServerText}]\n            },\n            ${v2rayConfigRouteGoNetflixInput}\n            {\n                \"type\": \"field\",\n                \"domain\": [\n                    \"geosite:cn\"\n                ],\n                \"outboundTag\": \"${V2rayBlockChinaSiteRuleText}\"\n            },\n            {\n                \"type\": \"field\",\n                \"ip\": [\n                    \"geoip:cn\"\n                ],\n                \"outboundTag\": \"${V2rayBlockChinaSiteRuleText}\"\n            },\n            {\n                \"type\": \"field\",\n                \"outboundTag\": \"IPv4_out\",\n                \"network\": \"udp,tcp\"\n            }\n        ]\n    },\nEOM\n\n\n}\n\n\n\n\n\n\nfunction installV2ray(){\n\n    v2rayPassword1=$(cat /proc/sys/kernel/random/uuid)\n    v2rayPassword2=$(cat /proc/sys/kernel/random/uuid)\n    v2rayPassword3=$(cat /proc/sys/kernel/random/uuid)\n    v2rayPassword4=$(cat /proc/sys/kernel/random/uuid)\n    v2rayPassword5=$(cat /proc/sys/kernel/random/uuid)\n    v2rayPassword6=$(cat /proc/sys/kernel/random/uuid)\n    v2rayPassword7=$(cat /proc/sys/kernel/random/uuid)\n    v2rayPassword8=$(cat /proc/sys/kernel/random/uuid)\n    v2rayPassword9=$(cat /proc/sys/kernel/random/uuid)\n    v2rayPassword10=$(cat /proc/sys/kernel/random/uuid)\n\n    echo\n    if [ -f \"${configV2rayPath}/xray\" ] || [ -f \"${configV2rayPath}/v2ray\" ] || [ -f \"/usr/local/bin/v2ray\" ] || [ -f \"/usr/bin/v2ray\" ]; then\n        green \" ==================================================\"\n        green \"     已安装过 V2ray 或 Xray, 退出安装 !\"\n        green \" ==================================================\"\n        exit\n    fi\n\n    green \" ==================================================\"\n    green \"    开始安装 V2ray or Xray \"\n    green \" ==================================================\"\n    echo\n\n    if [[ ( $configV2rayWorkingMode == \"trojan\" ) || ( $configV2rayWorkingMode == \"vlessTCPVmessWS\" ) || ( $configV2rayWorkingMode == \"vlessTCPWS\" ) || ( $configV2rayWorkingMode == \"vlessTCPWSTrojan\" ) || ( $configV2rayWorkingMode == \"sni\" ) ]]; then\n        echo\n        green \" 是否使用XTLS代替TLS加密, XTLS是Xray特有的加密方式, 速度更快, 默认使用TLS加密\"\n        green \" 由于V2ray不支持XTLS, 如果选择XTLS加密将使用Xray内核提供服务\"\n        read -p \"是否使用XTLS? 直接回车默认为TLS加密, 请输入[y/N]:\" isXrayXTLSInput\n        isXrayXTLSInput=${isXrayXTLSInput:-n}\n\n        if [[ $isXrayXTLSInput == [Yy] ]]; then\n            promptInfoXrayName=\"xray\"\n            isXray=\"yes\"\n            configV2rayIsTlsShowInfo=\"xtls\"\n        else\n            echo\n            read -p \"是否使用Xray内核? 直接回车默认为V2ray内核, 请输入[y/N]:\" isV2rayOrXrayCoreInput\n            isV2rayOrXrayCoreInput=${isV2rayOrXrayCoreInput:-n}\n\n            if [[ $isV2rayOrXrayCoreInput == [Yy] ]]; then\n                promptInfoXrayName=\"xray\"\n                isXray=\"yes\"\n            fi\n        fi\n    elif [[ $configV2rayWorkingMode == \"vlessTCPVision\" ]]; then\n        promptInfoXrayName=\"xray\"\n        isXray=\"yes\"\n        configV2rayIsTlsShowInfo=\"tls\"\n\n    elif [[ $configV2rayWorkingMode == \"vlessTCPREALITY\" ]]; then\n        promptInfoXrayName=\"xray\"\n        isXray=\"yes\"\n        configV2rayIsTlsShowInfo=\"reality\"\n    else\n        read -r -p \"是否使用Xray内核? 直接回车默认为V2ray内核, 请输入[y/N]:\" isV2rayOrXrayCoreInput\n        isV2rayOrXrayCoreInput=${isV2rayOrXrayCoreInput:-n}\n\n        if [[ $isV2rayOrXrayCoreInput == [Yy] ]]; then\n            promptInfoXrayName=\"xray\"\n            isXray=\"yes\"\n        fi\n    fi\n\n\n    if [[ -n \"${configV2rayWorkingMode}\" ]]; then\n\n        if [[ \"${configV2rayWorkingMode}\" != \"sni\" ]]; then\n            configV2rayProtocol=\"vless\"\n\n            configV2rayPort=443\n            configV2rayPortShowInfo=$configV2rayPort\n\n            inputV2rayServerPort \"textMainPort\"\n            configV2rayPort=${isV2rayUserPortInput}\n            configV2rayPortShowInfo=${isV2rayUserPortInput}\n\n        else\n            configV2rayProtocol=\"vless\"\n\n            configV2rayPortShowInfo=443\n            configV2rayPortGRPCShowInfo=443\n        fi\n\n    else\n        echo\n        read -p \"是否使用VLESS协议? 直接回车默认为VMess协议, 请输入[y/N]:\" isV2rayUseVLessInput\n        isV2rayUseVLessInput=${isV2rayUseVLessInput:-n}\n\n        if [[ $isV2rayUseVLessInput == [Yy] ]]; then\n            configV2rayProtocol=\"vless\"\n        else\n            configV2rayProtocol=\"vmess\"\n        fi\n\n\n        if [[ ${configInstallNginxMode} == \"v2raySSL\" ]]; then\n            configV2rayPortShowInfo=443\n            configV2rayPortGRPCShowInfo=443\n\n        else\n            if [[ ${configV2rayWorkingNotChangeMode} == \"true\" ]]; then\n                configV2rayPortShowInfo=443\n                configV2rayPortGRPCShowInfo=443\n\n            else\n                configV2rayIsTlsShowInfo=\"none\"\n\n                configV2rayPort=\"$(($RANDOM + 10000))\"\n                configV2rayPortShowInfo=$configV2rayPort\n\n                inputV2rayServerPort \"textMainPort\"\n                configV2rayPort=${isV2rayUserPortInput}\n                configV2rayPortShowInfo=${isV2rayUserPortInput}\n\n                inputV2rayStreamSettings\n            fi\n\n\n        fi\n    fi\n\n    if [[ \"$configV2rayWorkingMode\" == \"sni\" ]] ; then\n        configSSLCertPath=\"${configNginxSNIDomainV2rayCertPath}\"\n        configSSLDomain=${configNginxSNIDomainV2ray}\n    fi\n\n\n    # 增加任意门\n    if [[ ${configInstallNginxMode} == \"v2raySSL\" ]]; then\n        echo\n    else\n\n        inputV2rayServerPort \"textAdditionalPort\"\n\n        if [[ $isV2rayAdditionalPortInput == \"999999\" ]]; then\n            v2rayConfigAdditionalPortInput=\"\"\n        else\n            read -r -d '' v2rayConfigAdditionalPortInput << EOM\n        ,\n        {\n            \"listen\": \"0.0.0.0\",\n            \"port\": ${isV2rayAdditionalPortInput},\n            \"protocol\": \"dokodemo-door\",\n            \"settings\": {\n                \"address\": \"127.0.0.1\",\n                \"port\": ${configV2rayPort},\n                \"network\": \"tcp, udp\",\n                \"followRedirect\": false\n            },\n            \"sniffing\": {\n                \"enabled\": true,\n                \"destOverride\": [\"http\", \"tls\"]\n            }\n        }\nEOM\n\n        fi\n    fi\n\n\n\n    echo\n    read -p \"是否自定义${promptInfoXrayName}的密码? 直接回车默认创建随机密码, 请输入自定义UUID密码:\" isV2rayUserPassordInput\n    isV2rayUserPassordInput=${isV2rayUserPassordInput:-''}\n\n    if [ -z \"${isV2rayUserPassordInput}\" ]; then\n        isV2rayUserPassordInput=\"\"\n    else\n        v2rayPassword1=${isV2rayUserPassordInput}\n    fi\n\n\n\n\n\n\n\n\n\n\n\n    echo\n    echo\n    green \" ==================================================\"\n    yellow \" 是否屏蔽中国回国流量, 根据 geosite:cn 和 geoip:cn 规则判断是否中国回国流量\"\n    yellow \" 屏蔽中国回国流量, 可以有效防止GFW的检测, 如果挂代理访问中国国内网站 则很容易2次过墙而被检测\"\n    echo\n    green \" 1. 屏蔽中国回国流量\"\n    green \" 2. 不屏蔽中国回国流量 中国回国流量走默认 IPv4\"\n    green \" 3. 不屏蔽中国回国流量 中国回国流量走 IPv6(建议使用WARP IPv6) \"\n    echo\n    green \" 默认选1 屏蔽回国流量. 选择3 需要先安装好 Wireguard 和 Cloudflare WARP, 可重新运行本脚本选择第1项安装WARP\".\n    red \" 推荐先安装 Wireguard 与 Cloudflare WARP 后,再安装v2ray或xray. 实际上先安装v2ray或xray, 后安装Wireguard 与 Cloudflare WARP也没问题\"\n    echo\n    read -p \"请输入? 直接回车默认选1, 请输入纯数字:\" isV2rayBlockChinaSiteInput\n    isV2rayBlockChinaSiteInput=${isV2rayBlockChinaSiteInput:-1}\n    V2rayBlockChinaSiteRuleText=\"blocked_out\"\n\n    if [[ $isV2rayBlockChinaSiteInput == \"2\" ]]; then\n        V2rayBlockChinaSiteRuleText=\"IPv4_out\"\n\n    elif [[ $isV2rayBlockChinaSiteInput == \"3\" ]]; then\n        V2rayBlockChinaSiteRuleText=\"IPv6_out\"\n    else\n        V2rayBlockChinaSiteRuleText=\"blocked_out\"\n    fi\n\n\n\n\n\n    echo\n    echo\n    isV2rayUnlockWarpModeInput=\"1\"\n    V2rayDNSUnlockText=\"UseIPv4\"\n\n    unlockWARPServerIpInput=\"127.0.0.1\"\n    unlockWARPServerPortInput=\"40000\"\n    configWARPPortFilePath=\"${HOME}/wireguard/warp-port\"\n    configWARPPortLocalServerPort=\"40000\"\n    configWARPPortLocalServerText=\"\"\n\n    if [[ -f \"${configWARPPortFilePath}\" ]]; then\n        configWARPPortLocalServerPort=\"$(cat ${configWARPPortFilePath})\"\n        configWARPPortLocalServerText=\"检测到本机已安装 WARP Sock5, 端口号 ${configWARPPortLocalServerPort}\"\n    fi\n\n\n    echo\n    green \" ==================================================\"\n    yellow \" 是否使用 DNS 解锁 Netflix HBO Disney+ 等流媒体网站\"\n    green \" 如需解锁请填入 解锁 Netflix 的DNS服务器的IP地址, 例如 8.8.8.8\"\n    read -r -p \"是否使用DNS解锁流媒体? 直接回车默认不解锁, 解锁请输入DNS服务器的IP地址:\" isV2rayUnlockDNSInput\n    isV2rayUnlockDNSInput=${isV2rayUnlockDNSInput:-n}\n\n    V2rayDNSUnlockText=\"UseIPv4\"\n    v2rayConfigDNSInput=\"\"\n\n    if [[ \"${isV2rayUnlockDNSInput}\" == [Nn] ]]; then\n        V2rayDNSUnlockText=\"UseIPv4\"\n    else\n        V2rayDNSUnlockText=\"UseIP\"\n        read -r -d '' v2rayConfigDNSInput << EOM\n    \"dns\": {\n        \"servers\": [\n            {\n                \"address\": \"${isV2rayUnlockDNSInput}\",\n                \"port\": 53,\n                \"domains\": [\n                    \"geosite:netflix\",\n                    \"geosite:youtube\",\n                    \"geosite:bahamut\",\n                    \"geosite:hulu\",\n                    \"geosite:hbo\",\n                    \"geosite:disney\",\n                    \"geosite:bbc\",\n                    \"geosite:4chan\",\n                    \"geosite:fox\",\n                    \"geosite:abema\",\n                    \"geosite:dmm\",\n                    \"geosite:niconico\",\n                    \"geosite:pixiv\",\n                    \"geosite:bilibili\",\n                    \"geosite:viu\",\n                    \"geosite:pornhub\"\n                ]\n            },\n        \"localhost\"\n        ]\n    },\nEOM\n\n    fi\n\n\n    v2rayRouteRule\n\n\n\n\n\n\n    read -r -d '' v2rayConfigOutboundInput << EOM\n    \"outbounds\": [\n        {\n            \"tag\":\"IPv4_out\",\n            \"protocol\": \"freedom\",\n            \"settings\": {\n                \"domainStrategy\": \"${V2rayDNSUnlockText}\"\n            }\n        },\n        {\n            \"tag\": \"blocked_out\",\n            \"protocol\": \"blackhole\",\n            \"settings\": {\n                \"response\": {\n                    \"type\": \"http\"\n                }\n            }\n        },\n        {\n            \"tag\":\"IPv6_out\",\n            \"protocol\": \"freedom\",\n            \"settings\": {\n                \"domainStrategy\": \"UseIPv6\"\n            }\n        },\n        ${v2rayConfigOutboundV2rayServerInput}\n        ${v2rayConfigOutboundV2rayGoNetflixServerInput}\n        {\n            \"tag\": \"WARP_out\",\n            \"protocol\": \"socks\",\n            \"settings\": {\n                \"servers\": [\n                    {\n                        \"address\": \"${unlockWARPServerIpInput}\",\n                        \"port\": ${unlockWARPServerPortInput}\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"tcp\"\n            }\n        }\n    ]\n\nEOM\n\n\n\n\n\n\n\n\n\n\n\n\n    echo\n    green \" ==================================================\"\n    if [ \"$isXray\" = \"no\" ] ; then\n        getV2rayVersion \"v2ray\"\n        green \"    准备下载并安装 V2ray Version: ${versionV2ray} !\"\n        promptInfoXrayInstall=\"V2ray\"\n        promptInfoXrayVersion=${versionV2ray}\n    else\n        getV2rayVersion \"xray\"\n        green \"    准备下载并安装 Xray Version: ${versionXray} !\"\n        promptInfoXrayInstall=\"Xray\"\n        promptInfoXrayVersion=${versionXray}\n    fi\n    echo\n\n\n    mkdir -p \"${configV2rayPath}\"\n    cd \"${configV2rayPath}\" || exit\n    rm -rf ${configV2rayPath}/*\n\n    downloadV2rayXrayBin\n    if [[ \"$configV2rayWorkingMode\" == \"vlessTCPREALITY\" ]]; then\n        generateXrayRealityPrivateKey\n\n        echo\n        green \" 请输入回落域名 同时也用于serverName? 默认为www.ebay.com\"\n        read -r -p \"请输入回落域名, 直接回车默认为 www.ebay.com: \" configXrayRealityFallbackDomainNameInput\n\n        if [ -z \"${configXrayRealityFallbackDomainNameInput}\" ]; then\n            configXrayRealitySni=\"www.ebay.com\"\n        fi\n\n        if [[ $configXrayRealityFallbackDomainNameInput =~ $domain_regex ]]; then\n            green \"Valid domain name. 输入的域名格式正确 \"\n            configXrayRealitySni=\"$configXrayRealityFallbackDomainNameInput\"\n        else\n            red \"Invalid domain name. 输入的域名格式不正确 \"\n            green \"使用 www.ebay.com 作为回落域名 同时也用于serverName \"\n            configXrayRealitySni=\"www.ebay.com\"\n        fi\n        echo\n        echo\n    fi\n\n\n    # 增加 v2ray 服务器端配置\n\n    if [[ \"$configV2rayWorkingMode\" == \"vlessTCPWSTrojan\" ]]; then\n        trojanPassword1=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n        trojanPassword2=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n        trojanPassword3=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n        trojanPassword4=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n        trojanPassword5=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n        trojanPassword6=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n        trojanPassword7=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n        trojanPassword8=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n        trojanPassword9=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n        trojanPassword10=$(cat /dev/urandom | head -1 | md5sum | head -c 10)\n\n        echo\n        yellow \" 请输入 trojan 密码的前缀? (会生成若干随机密码和带有该前缀的密码)\"\n        read -p \"请输入密码的前缀, 直接回车默认随机生成前缀:\" configTrojanPasswordPrefixInput\n        configTrojanPasswordPrefixInput=${configTrojanPasswordPrefixInput:-${configTrojanPasswordPrefixInputDefault}}\n    fi\n\n    if [ \"${isTrojanMultiPassword}\" = \"no\" ] ; then\n    read -r -d '' v2rayConfigUserpasswordTrojanInput << EOM\n                    { \"password\": \"${trojanPassword1}\", \"level\": 0, \"email\": \"password111@gmail.com\" },\n                    { \"password\": \"${trojanPassword2}\", \"level\": 0, \"email\": \"password112@gmail.com\" },\n                    { \"password\": \"${trojanPassword3}\", \"level\": 0, \"email\": \"password113@gmail.com\" },\n                    { \"password\": \"${trojanPassword4}\", \"level\": 0, \"email\": \"password114@gmail.com\" },\n                    { \"password\": \"${trojanPassword5}\", \"level\": 0, \"email\": \"password115@gmail.com\" },\n                    { \"password\": \"${trojanPassword6}\", \"level\": 0, \"email\": \"password116@gmail.com\" },\n                    { \"password\": \"${trojanPassword7}\", \"level\": 0, \"email\": \"password117@gmail.com\" },\n                    { \"password\": \"${trojanPassword8}\", \"level\": 0, \"email\": \"password118@gmail.com\" },\n                    { \"password\": \"${trojanPassword9}\", \"level\": 0, \"email\": \"password119@gmail.com\" },\n                    { \"password\": \"${trojanPassword10}\", \"level\": 0, \"email\": \"password120@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202201\", \"level\": 0, \"email\": \"password201@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202202\", \"level\": 0, \"email\": \"password202@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202203\", \"level\": 0, \"email\": \"password203@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202204\", \"level\": 0, \"email\": \"password204@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202205\", \"level\": 0, \"email\": \"password205@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202206\", \"level\": 0, \"email\": \"password206@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202207\", \"level\": 0, \"email\": \"password207@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202208\", \"level\": 0, \"email\": \"password208@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202209\", \"level\": 0, \"email\": \"password209@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202210\", \"level\": 0, \"email\": \"password210@gmail.com\" }\n\nEOM\n    else\n\n    read -r -d '' v2rayConfigUserpasswordTrojanInput << EOM\n                    { \"password\": \"${trojanPassword1}\", \"level\": 0, \"email\": \"password111@gmail.com\" },\n                    { \"password\": \"${trojanPassword2}\", \"level\": 0, \"email\": \"password112@gmail.com\" },\n                    { \"password\": \"${trojanPassword3}\", \"level\": 0, \"email\": \"password113@gmail.com\" },\n                    { \"password\": \"${trojanPassword4}\", \"level\": 0, \"email\": \"password114@gmail.com\" },\n                    { \"password\": \"${trojanPassword5}\", \"level\": 0, \"email\": \"password115@gmail.com\" },\n                    { \"password\": \"${trojanPassword6}\", \"level\": 0, \"email\": \"password116@gmail.com\" },\n                    { \"password\": \"${trojanPassword7}\", \"level\": 0, \"email\": \"password117@gmail.com\" },\n                    { \"password\": \"${trojanPassword8}\", \"level\": 0, \"email\": \"password118@gmail.com\" },\n                    { \"password\": \"${trojanPassword9}\", \"level\": 0, \"email\": \"password119@gmail.com\" },\n                    { \"password\": \"${trojanPassword10}\", \"level\": 0, \"email\": \"password120@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202200\", \"level\": 0, \"email\": \"password200@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202201\", \"level\": 0, \"email\": \"password201@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202202\", \"level\": 0, \"email\": \"password202@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202203\", \"level\": 0, \"email\": \"password203@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202204\", \"level\": 0, \"email\": \"password204@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202205\", \"level\": 0, \"email\": \"password205@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202206\", \"level\": 0, \"email\": \"password206@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202207\", \"level\": 0, \"email\": \"password207@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202208\", \"level\": 0, \"email\": \"password208@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202209\", \"level\": 0, \"email\": \"password209@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202210\", \"level\": 0, \"email\": \"password210@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202211\", \"level\": 0, \"email\": \"password211@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202212\", \"level\": 0, \"email\": \"password212@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202213\", \"level\": 0, \"email\": \"password213@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202214\", \"level\": 0, \"email\": \"password214@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202215\", \"level\": 0, \"email\": \"password215@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202216\", \"level\": 0, \"email\": \"password216@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202217\", \"level\": 0, \"email\": \"password217@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202218\", \"level\": 0, \"email\": \"password218@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202219\", \"level\": 0, \"email\": \"password219@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202220\", \"level\": 0, \"email\": \"password220@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202221\", \"level\": 0, \"email\": \"password221@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202222\", \"level\": 0, \"email\": \"password222@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202223\", \"level\": 0, \"email\": \"password223@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202224\", \"level\": 0, \"email\": \"password224@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202225\", \"level\": 0, \"email\": \"password225@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202226\", \"level\": 0, \"email\": \"password226@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202227\", \"level\": 0, \"email\": \"password227@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202228\", \"level\": 0, \"email\": \"password228@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202229\", \"level\": 0, \"email\": \"password229@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202230\", \"level\": 0, \"email\": \"password230@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202231\", \"level\": 0, \"email\": \"password231@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202232\", \"level\": 0, \"email\": \"password232@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202233\", \"level\": 0, \"email\": \"password233@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202234\", \"level\": 0, \"email\": \"password234@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202235\", \"level\": 0, \"email\": \"password235@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202236\", \"level\": 0, \"email\": \"password236@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202237\", \"level\": 0, \"email\": \"password237@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202238\", \"level\": 0, \"email\": \"password238@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202239\", \"level\": 0, \"email\": \"password239@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202240\", \"level\": 0, \"email\": \"password240@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202241\", \"level\": 0, \"email\": \"password241@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202242\", \"level\": 0, \"email\": \"password242@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202243\", \"level\": 0, \"email\": \"password243@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202244\", \"level\": 0, \"email\": \"password244@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202245\", \"level\": 0, \"email\": \"password245@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202246\", \"level\": 0, \"email\": \"password246@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202247\", \"level\": 0, \"email\": \"password247@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202248\", \"level\": 0, \"email\": \"password248@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202249\", \"level\": 0, \"email\": \"password249@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202250\", \"level\": 0, \"email\": \"password250@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202251\", \"level\": 0, \"email\": \"password251@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202252\", \"level\": 0, \"email\": \"password252@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202253\", \"level\": 0, \"email\": \"password253@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202254\", \"level\": 0, \"email\": \"password254@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202255\", \"level\": 0, \"email\": \"password255@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202256\", \"level\": 0, \"email\": \"password256@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202257\", \"level\": 0, \"email\": \"password257@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202258\", \"level\": 0, \"email\": \"password258@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202259\", \"level\": 0, \"email\": \"password259@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202260\", \"level\": 0, \"email\": \"password260@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202261\", \"level\": 0, \"email\": \"password261@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202262\", \"level\": 0, \"email\": \"password262@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202263\", \"level\": 0, \"email\": \"password263@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202264\", \"level\": 0, \"email\": \"password264@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202265\", \"level\": 0, \"email\": \"password265@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202266\", \"level\": 0, \"email\": \"password266@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202267\", \"level\": 0, \"email\": \"password267@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202268\", \"level\": 0, \"email\": \"password268@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202269\", \"level\": 0, \"email\": \"password269@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202270\", \"level\": 0, \"email\": \"password270@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202271\", \"level\": 0, \"email\": \"password271@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202272\", \"level\": 0, \"email\": \"password272@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202273\", \"level\": 0, \"email\": \"password273@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202274\", \"level\": 0, \"email\": \"password274@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202275\", \"level\": 0, \"email\": \"password275@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202276\", \"level\": 0, \"email\": \"password276@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202277\", \"level\": 0, \"email\": \"password277@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202278\", \"level\": 0, \"email\": \"password278@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202279\", \"level\": 0, \"email\": \"password279@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202280\", \"level\": 0, \"email\": \"password280@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202281\", \"level\": 0, \"email\": \"password281@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202282\", \"level\": 0, \"email\": \"password282@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202283\", \"level\": 0, \"email\": \"password283@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202284\", \"level\": 0, \"email\": \"password284@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202285\", \"level\": 0, \"email\": \"password285@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202286\", \"level\": 0, \"email\": \"password286@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202287\", \"level\": 0, \"email\": \"password287@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202288\", \"level\": 0, \"email\": \"password288@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202289\", \"level\": 0, \"email\": \"password289@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202290\", \"level\": 0, \"email\": \"password290@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202291\", \"level\": 0, \"email\": \"password291@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202292\", \"level\": 0, \"email\": \"password292@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202293\", \"level\": 0, \"email\": \"password293@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202294\", \"level\": 0, \"email\": \"password294@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202295\", \"level\": 0, \"email\": \"password295@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202296\", \"level\": 0, \"email\": \"password296@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202297\", \"level\": 0, \"email\": \"password297@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202298\", \"level\": 0, \"email\": \"password298@gmail.com\" },\n                    { \"password\": \"${configTrojanPasswordPrefixInput}202299\", \"level\": 0, \"email\": \"password299@gmail.com\" }\n\nEOM\n    fi\n\n    if [[ \"${configV2rayIsTlsShowInfo}\" == \"xtls\"  ]]; then\n    read -r -d '' v2rayConfigUserpasswordInput << EOM\n                    { \"id\": \"${v2rayPassword1}\", \"flow\": \"xtls-rprx-direct\", \"level\": 0, \"email\": \"password11@gmail.com\" },\n                    { \"id\": \"${v2rayPassword2}\", \"flow\": \"xtls-rprx-direct\", \"level\": 0, \"email\": \"password12@gmail.com\" },\n                    { \"id\": \"${v2rayPassword3}\", \"flow\": \"xtls-rprx-direct\", \"level\": 0, \"email\": \"password13@gmail.com\" },\n                    { \"id\": \"${v2rayPassword4}\", \"flow\": \"xtls-rprx-direct\", \"level\": 0, \"email\": \"password14@gmail.com\" },\n                    { \"id\": \"${v2rayPassword5}\", \"flow\": \"xtls-rprx-direct\", \"level\": 0, \"email\": \"password15@gmail.com\" },\n                    { \"id\": \"${v2rayPassword6}\", \"flow\": \"xtls-rprx-direct\", \"level\": 0, \"email\": \"password16@gmail.com\" },\n                    { \"id\": \"${v2rayPassword7}\", \"flow\": \"xtls-rprx-direct\", \"level\": 0, \"email\": \"password17@gmail.com\" },\n                    { \"id\": \"${v2rayPassword8}\", \"flow\": \"xtls-rprx-direct\", \"level\": 0, \"email\": \"password18@gmail.com\" },\n                    { \"id\": \"${v2rayPassword9}\", \"flow\": \"xtls-rprx-direct\", \"level\": 0, \"email\": \"password19@gmail.com\" },\n                    { \"id\": \"${v2rayPassword10}\", \"flow\": \"xtls-rprx-direct\", \"level\": 0, \"email\": \"password20@gmail.com\" }\n\nEOM\n    elif [[ \"${configV2rayWorkingMode}\" == \"vlessTCPVision\" || \"${configV2rayWorkingMode}\" == \"vlessTCPREALITY\" ]]; then\n    read -r -d '' v2rayConfigUserpasswordInput << EOM\n                    { \"id\": \"${v2rayPassword1}\", \"flow\": \"xtls-rprx-vision\", \"level\": 0, \"email\": \"password11@gmail.com\" },\n                    { \"id\": \"${v2rayPassword2}\", \"flow\": \"xtls-rprx-vision\", \"level\": 0, \"email\": \"password12@gmail.com\" },\n                    { \"id\": \"${v2rayPassword3}\", \"flow\": \"xtls-rprx-vision\", \"level\": 0, \"email\": \"password13@gmail.com\" },\n                    { \"id\": \"${v2rayPassword4}\", \"flow\": \"xtls-rprx-vision\", \"level\": 0, \"email\": \"password14@gmail.com\" },\n                    { \"id\": \"${v2rayPassword5}\", \"flow\": \"xtls-rprx-vision\", \"level\": 0, \"email\": \"password15@gmail.com\" },\n                    { \"id\": \"${v2rayPassword6}\", \"flow\": \"xtls-rprx-vision\", \"level\": 0, \"email\": \"password16@gmail.com\" },\n                    { \"id\": \"${v2rayPassword7}\", \"flow\": \"xtls-rprx-vision\", \"level\": 0, \"email\": \"password17@gmail.com\" },\n                    { \"id\": \"${v2rayPassword8}\", \"flow\": \"xtls-rprx-vision\", \"level\": 0, \"email\": \"password18@gmail.com\" },\n                    { \"id\": \"${v2rayPassword9}\", \"flow\": \"xtls-rprx-vision\", \"level\": 0, \"email\": \"password19@gmail.com\" },\n                    { \"id\": \"${v2rayPassword10}\", \"flow\": \"xtls-rprx-vision\", \"level\": 0, \"email\": \"password20@gmail.com\" }\n\nEOM\n\n    else\n    read -r -d '' v2rayConfigUserpasswordInput << EOM\n                    { \"id\": \"${v2rayPassword1}\", \"level\": 0, \"email\": \"password11@gmail.com\" },\n                    { \"id\": \"${v2rayPassword2}\", \"level\": 0, \"email\": \"password12@gmail.com\" },\n                    { \"id\": \"${v2rayPassword3}\", \"level\": 0, \"email\": \"password13@gmail.com\" },\n                    { \"id\": \"${v2rayPassword4}\", \"level\": 0, \"email\": \"password14@gmail.com\" },\n                    { \"id\": \"${v2rayPassword5}\", \"level\": 0, \"email\": \"password15@gmail.com\" },\n                    { \"id\": \"${v2rayPassword6}\", \"level\": 0, \"email\": \"password16@gmail.com\" },\n                    { \"id\": \"${v2rayPassword7}\", \"level\": 0, \"email\": \"password17@gmail.com\" },\n                    { \"id\": \"${v2rayPassword8}\", \"level\": 0, \"email\": \"password18@gmail.com\" },\n                    { \"id\": \"${v2rayPassword9}\", \"level\": 0, \"email\": \"password19@gmail.com\" },\n                    { \"id\": \"${v2rayPassword10}\", \"level\": 0, \"email\": \"password20@gmail.com\" }\n\nEOM\n\n    fi\n\n\n\n\n\n\n\n\n\n\n    v2rayConfigInboundInput=\"\"\n\n    if [[ \"${configV2rayStreamSetting}\" == \"grpc\" ]]; then\n\n        read -r -d '' v2rayConfigInboundInput << EOM\n\n    \"inbounds\": [\n        {\n            \"port\": ${configV2rayGRPCPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\"\n            },\n            \"streamSettings\": {\n                \"network\": \"grpc\",\n                \"security\": \"none\",\n                \"grpcSettings\": {\n                    \"serviceName\": \"${configV2rayGRPCServiceName}\"\n                }\n            }\n        }\n        ${v2rayConfigAdditionalPortInput}\n    ],\n\nEOM\n\n    elif [[ \"${configV2rayStreamSetting}\" == \"ws\" ]]; then\n\n        read -r -d '' v2rayConfigInboundInput << EOM\n\n    \"inbounds\": [\n        {\n            \"port\": ${configV2rayPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\"\n            },\n            \"streamSettings\": {\n                \"network\": \"ws\",\n                \"security\": \"none\",\n                \"wsSettings\": {\n                    \"path\": \"/${configV2rayWebSocketPath}\"\n                }\n            }\n        }\n        ${v2rayConfigAdditionalPortInput}\n    ],\n\nEOM\n\n\n    elif [[ \"${configV2rayStreamSetting}\" == \"wsgrpc\" ]]; then\n\n        read -r -d '' v2rayConfigInboundInput << EOM\n\n    \"inbounds\": [\n        {\n            \"port\": ${configV2rayPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\"\n            },\n            \"streamSettings\": {\n                \"network\": \"ws\",\n                \"security\": \"none\",\n                \"wsSettings\": {\n                    \"path\": \"/${configV2rayWebSocketPath}\"\n                }\n            }\n        },\n        {\n            \"port\": ${configV2rayGRPCPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\"\n            },\n            \"streamSettings\": {\n                \"network\": \"grpc\",\n                \"security\": \"none\",\n                \"grpcSettings\": {\n                    \"serviceName\": \"${configV2rayGRPCServiceName}\"\n                }\n            }\n        }\n        ${v2rayConfigAdditionalPortInput}\n    ],\n\nEOM\n\n    elif [[ \"${configV2rayStreamSetting}\" == \"tcp\" ]]; then\n\n        read -r -d '' v2rayConfigInboundInput << EOM\n\n    \"inbounds\": [\n        {\n            \"port\": ${configV2rayPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\"\n            },\n            \"streamSettings\": {\n                \"network\": \"tcp\",\n                \"security\": \"none\",\n                \"tcpSettings\": {\n                    \"acceptProxyProtocol\": false,\n                    \"header\": {\n                        \"type\": \"none\"\n                    }\n                }\n            }\n        }\n        ${v2rayConfigAdditionalPortInput}\n    ],\n\nEOM\n\n\n    elif [[ \"${configV2rayStreamSetting}\" == \"kcp\" ]]; then\n\n        read -r -d '' v2rayConfigInboundInput << EOM\n\n    \"inbounds\": [\n        {\n            \"port\": ${configV2rayPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\"\n            },\n            \"streamSettings\": {\n                \"network\": \"kcp\",\n                \"security\": \"none\",\n                \"kcpSettings\": {\n                    \"seed\": \"${configV2rayKCPSeedPassword}\"\n                }\n            }\n        }\n        ${v2rayConfigAdditionalPortInput}\n    ],\n\nEOM\n\n    elif [[ \"${configV2rayStreamSetting}\" == \"h2\" ]]; then\n\n        read -r -d '' v2rayConfigInboundInput << EOM\n\n    \"inbounds\": [\n        {\n            \"port\": ${configV2rayPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\"\n            },\n            \"streamSettings\": {\n                \"network\": \"h2\",\n                \"security\": \"none\",\n                \"httpSettings\": {\n                    \"path\": \"/${configV2rayWebSocketPath}\"\n                }\n            }\n        }\n        ${v2rayConfigAdditionalPortInput}\n    ],\n\nEOM\n\n    elif [[ \"${configV2rayStreamSetting}\" == \"quic\" ]]; then\n\n        read -r -d '' v2rayConfigInboundInput << EOM\n\n    \"inbounds\": [\n        {\n            \"port\": ${configV2rayPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\"\n            },\n            \"streamSettings\": {\n                \"network\": \"quic\",\n                \"security\": \"none\",\n                \"quicSettings\": {\n                    \"security\": \"aes-128-gcm\",\n                    \"key\": \"${configV2rayKCPSeedPassword}\",\n                    \"header\": {\n                        \"type\": \"none\"\n                    }\n                }\n            }\n        }\n        ${v2rayConfigAdditionalPortInput}\n    ],\n\nEOM\n\n    fi\n\n\n\n\n\n\n\n\n\n    if [[ \"$configV2rayWorkingMode\" == \"vlessTCPVmessWS\" ]]; then\n\n        read -r -d '' v2rayConfigInboundInput << EOM\n    \"inbounds\": [\n        {\n            \"port\": ${configV2rayPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\",\n                \"fallbacks\": [\n                    {\n                        \"dest\": 80\n                    },\n                    {\n                        \"path\": \"/${configV2rayWebSocketPath}\",\n                        \"dest\": ${configV2rayVmesWSPort},\n                        \"xver\": 1\n                    },\n                    {\n                        \"path\": \"/tcp${configV2rayWebSocketPath}\",\n                        \"dest\": ${configV2rayVmessTCPPort},\n                        \"xver\": 1\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"tcp\",\n                \"security\": \"${configV2rayIsTlsShowInfo}\",\n                \"${configV2rayIsTlsShowInfo}Settings\": {\n                    \"alpn\": [\n                        \"http/1.1\"\n                    ],\n                    \"certificates\": [\n                        {\n                            \"certificateFile\": \"${configSSLCertPath}/$configSSLCertFullchainFilename\",\n                            \"keyFile\": \"${configSSLCertPath}/$configSSLCertKeyFilename\"\n                        }\n                    ]\n                }\n            }\n        },\n        {\n            \"port\": ${configV2rayVmesWSPort},\n            \"listen\": \"127.0.0.1\",\n            \"protocol\": \"vmess\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"ws\",\n                \"security\": \"none\",\n                \"wsSettings\": {\n                    \"acceptProxyProtocol\": true,\n                    \"path\": \"/${configV2rayWebSocketPath}\"\n                }\n            }\n        },\n        {\n            \"port\": ${configV2rayVmessTCPPort},\n            \"listen\": \"127.0.0.1\",\n            \"protocol\": \"vmess\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"tcp\",\n                \"security\": \"none\",\n                \"tcpSettings\": {\n                    \"acceptProxyProtocol\": true,\n                    \"header\": {\n                        \"type\": \"http\",\n                        \"request\": {\n                            \"path\": [\n                                \"/tcp${configV2rayWebSocketPath}\"\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n        ${v2rayConfigAdditionalPortInput}\n    ],\nEOM\n\n\n    elif [[ \"$configV2rayWorkingMode\" == \"vlessgRPC\" ]]; then\n\n        read -r -d '' v2rayConfigInboundInput << EOM\n    \"inbounds\": [\n        {\n            \"port\": ${configV2rayPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\",\n                \"fallbacks\": [\n                    {\n                        \"dest\": 80\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"grpc\",\n                \"security\": \"tls\",\n                \"tlsSettings\": {\n                    \"alpn\": [\n                        \"h2\",\n                        \"http/1.1\"\n                    ],\n                    \"certificates\": [\n                        {\n                            \"certificateFile\": \"${configSSLCertPath}/$configSSLCertFullchainFilename\",\n                            \"keyFile\": \"${configSSLCertPath}/$configSSLCertKeyFilename\"\n                        }\n                    ]\n                },\n                \"grpcSettings\": {\n                    \"serviceName\": \"${configV2rayGRPCServiceName}\"\n                }\n            }\n        }\n        ${v2rayConfigAdditionalPortInput}\n    ],\nEOM\n\n\n    elif [[ $configV2rayWorkingMode == \"vlessTCPWS\" ]]; then\n\n        read -r -d '' v2rayConfigInboundInput << EOM\n    \"inbounds\": [\n        {\n            \"port\": ${configV2rayPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\",\n                \"fallbacks\": [\n                    {\n                        \"dest\": 80\n                    },\n                    {\n                        \"path\": \"/${configV2rayWebSocketPath}\",\n                        \"dest\": ${configV2rayVmesWSPort},\n                        \"xver\": 1\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"tcp\",\n                \"security\": \"${configV2rayIsTlsShowInfo}\",\n                \"${configV2rayIsTlsShowInfo}Settings\": {\n                    \"alpn\": [\n                        \"http/1.1\"\n                    ],\n                    \"certificates\": [\n                        {\n                            \"certificateFile\": \"${configSSLCertPath}/$configSSLCertFullchainFilename\",\n                            \"keyFile\": \"${configSSLCertPath}/$configSSLCertKeyFilename\"\n                        }\n                    ]\n                }\n            }\n        },\n        {\n            \"port\": ${configV2rayVmesWSPort},\n            \"listen\": \"127.0.0.1\",\n            \"protocol\": \"vless\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\"\n            },\n            \"streamSettings\": {\n                \"network\": \"ws\",\n                \"security\": \"none\",\n                \"wsSettings\": {\n                    \"acceptProxyProtocol\": true,\n                    \"path\": \"/${configV2rayWebSocketPath}\"\n                }\n            }\n        }\n        ${v2rayConfigAdditionalPortInput}\n    ],\nEOM\n\n    elif [[ \"$configV2rayWorkingMode\" == \"vlessTCPVision\" ]]; then\n\n        read -r -d '' v2rayConfigInboundInput << EOM\n    \"inbounds\": [\n        {\n            \"port\": ${configV2rayPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\",\n                \"fallbacks\": [\n                    {\n                        \"dest\": 80\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"tcp\",\n                \"security\": \"${configV2rayIsTlsShowInfo}\",\n                \"${configV2rayIsTlsShowInfo}Settings\": {\n                    \"rejectUnknownSni\": true,\n                    \"minVersion\": \"1.2\",\n                    \"alpn\": [\n                        \"http/1.1\",\n                        \"h2\"\n                    ],\n                    \"certificates\": [\n                        {\n                            \"certificateFile\": \"${configSSLCertPath}/$configSSLCertFullchainFilename\",\n                            \"keyFile\": \"${configSSLCertPath}/$configSSLCertKeyFilename\"\n                        }\n                    ]\n                }\n            },\n            \"sniffing\": {\n                \"enabled\": true,\n                \"destOverride\": [\n                    \"http\",\n                    \"tls\"\n                ]\n            }\n        }\n\n        ${v2rayConfigAdditionalPortInput}\n    ],\n    \"policy\": {\n        \"levels\": {\n            \"0\": {\n                \"handshake\": 5,\n                \"connIdle\": 310\n            }\n        }\n    },\nEOM\n\n    elif [[ \"$configV2rayWorkingMode\" == \"vlessTCPREALITY\" ]]; then\n\n        read -r -d '' v2rayConfigInboundInput << EOM\n    \"inbounds\": [\n        {\n            \"port\": ${configV2rayPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\",\n                \"fallbacks\": [\n                    {\n                        \"dest\": 80\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"tcp\",\n                \"security\": \"${configV2rayIsTlsShowInfo}\",\n                \"${configV2rayIsTlsShowInfo}Settings\": {\n                    \"show\": false,\n                    \"dest\": \"${configXrayRealitySni}:443\",\n                    \"xver\": 0,\n                    \"serverNames\": [\n                        \"${configXrayRealitySni}\",\n                        \"icloud.com\",\n                        \"www.icloud.com\",\n                        \"apple.com\",\n                        \"www.apple.com\",\n                        \"mozilla.org\",\n                        \"addons.mozilla.org\",\n                        \"ebay.com\",\n                        \"www.ebay.com\",\n                        \"walmart.com\",\n                        \"www.walmart.com\",\n                        \"etsy.com\",\n                        \"www.etsy.com\",\n                        \"shopify.com\",\n                        \"www.shopify.com\",\n                        \"samsung.com\",\n                        \"www.samsung.com\",\n                        \"airbnb.com\",\n                        \"www.airbnb.com\",\n                        \"asml.com\",\n                        \"www.asml.com\",\n                        \"tsmc.com\",\n                        \"www.tsmc.com\",\n                        \"pfizer.com\",\n                        \"www.pfizer.com\",\n                        \"microsoft.com\",\n                        \"www.microsoft.com\",\n                        \"support.microsoft.com\",\n                        \"office.com\",\n                        \"www.office.com\",\n                        \"signup.live.com\",\n                        \"www.live.com\",\n                        \"outlook.live.com\",\n                        \"lovelive-anime.jp\",\n                        \"s0.awsstatic.com\",\n                        \"d1.awsstatic.com\",\n                        \"amazon.com\",\n                        \"m.media-amazon.com\"\n                    ],\n                    \"privateKey\": \"${xrayRealityPrivateKey}\",\n                    \"maxTimeDiff\": 0,\n                    \"shortIds\": [\n                        \"\",\n                        \"${xrayRealityShortId}\"\n                    ]\n                }\n            },\n            \"sniffing\": {\n                \"enabled\": true,\n                \"destOverride\": [\n                    \"http\",\n                    \"tls\"\n                ]\n            }\n        }\n\n        ${v2rayConfigAdditionalPortInput}\n    ],\n\nEOM\n\n\n    elif [[ \"$configV2rayWorkingMode\" == \"sni\" ]]; then\n\n        read -r -d '' v2rayConfigInboundInput << EOM\n    \"inbounds\": [\n        {\n            \"port\": ${configV2rayPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\",\n                \"fallbacks\": [\n                    {\n                        \"dest\": 80\n                    },\n                    {\n                        \"path\": \"/${configV2rayWebSocketPath}\",\n                        \"dest\": ${configV2rayVmesWSPort},\n                        \"xver\": 1\n                    },\n                    {\n                        \"path\": \"/${configV2rayGRPCServiceName}\",\n                        \"dest\": ${configV2rayGRPCPort},\n                        \"xver\": 1\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"tcp\",\n                \"security\": \"${configV2rayIsTlsShowInfo}\",\n                \"${configV2rayIsTlsShowInfo}Settings\": {\n                    \"alpn\": [\n                        \"http/1.1\"\n                    ],\n                    \"certificates\": [\n                        {\n                            \"certificateFile\": \"${configSSLCertPath}/$configSSLCertFullchainFilename\",\n                            \"keyFile\": \"${configSSLCertPath}/$configSSLCertKeyFilename\"\n                        }\n                    ]\n                }\n            }\n        },\n        {\n            \"port\": ${configV2rayVmesWSPort},\n            \"listen\": \"127.0.0.1\",\n            \"protocol\": \"vless\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\"\n            },\n            \"streamSettings\": {\n                \"network\": \"ws\",\n                \"security\": \"none\",\n                \"wsSettings\": {\n                    \"acceptProxyProtocol\": true,\n                    \"path\": \"/${configV2rayWebSocketPath}\"\n                }\n            }\n        },\n        {\n            \"port\": ${configV2rayGRPCPort},\n            \"protocol\": \"vless\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\"\n            },\n            \"streamSettings\": {\n                \"network\": \"grpc\",\n                \"security\": \"none\",\n                \"grpcSettings\": {\n                    \"serviceName\": \"${configV2rayGRPCServiceName}\"\n                }\n            }\n        }\n        ${v2rayConfigAdditionalPortInput}\n    ],\nEOM\n\n\n    elif [[  $configV2rayWorkingMode == \"vlessTCPWSTrojan\" ]]; then\n\n        read -r -d '' v2rayConfigInboundInput << EOM\n    \"inbounds\": [\n        {\n            \"port\": ${configV2rayPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\",\n                \"fallbacks\": [\n                    {\n                        \"dest\": ${configV2rayTrojanPort},\n                        \"xver\": 1\n                    },\n                    {\n                        \"path\": \"/${configV2rayWebSocketPath}\",\n                        \"dest\": ${configV2rayVmesWSPort},\n                        \"xver\": 1\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"tcp\",\n                \"security\": \"${configV2rayIsTlsShowInfo}\",\n                \"${configV2rayIsTlsShowInfo}Settings\": {\n                    \"alpn\": [\n                        \"http/1.1\"\n                    ],\n                    \"certificates\": [\n                        {\n                            \"certificateFile\": \"${configSSLCertPath}/$configSSLCertFullchainFilename\",\n                            \"keyFile\": \"${configSSLCertPath}/$configSSLCertKeyFilename\"\n                        }\n                    ]\n                }\n            }\n        },\n        {\n            \"port\": ${configV2rayTrojanPort},\n            \"listen\": \"127.0.0.1\",\n            \"protocol\": \"trojan\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordTrojanInput}\n                ],\n                \"fallbacks\": [\n                    {\n                        \"dest\": 80\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"tcp\",\n                \"security\": \"none\",\n                \"tcpSettings\": {\n                    \"acceptProxyProtocol\": true\n                }\n            }\n        },\n        {\n            \"port\": ${configV2rayVmesWSPort},\n            \"listen\": \"127.0.0.1\",\n            \"protocol\": \"vless\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\"\n            },\n            \"streamSettings\": {\n                \"network\": \"ws\",\n                \"security\": \"none\",\n                \"wsSettings\": {\n                    \"acceptProxyProtocol\": true,\n                    \"path\": \"/${configV2rayWebSocketPath}\"\n                }\n            }\n        }\n        ${v2rayConfigAdditionalPortInput}\n    ],\nEOM\n\n\n\n    elif [[ $configV2rayWorkingMode == \"trojan\" ]]; then\nread -r -d '' v2rayConfigInboundInput << EOM\n    \"inbounds\": [\n        {\n            \"port\": ${configV2rayPort},\n            \"protocol\": \"${configV2rayProtocol}\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\",\n                \"fallbacks\": [\n                    {\n                        \"dest\": 80\n                    },\n                    {\n                        \"path\": \"/${configTrojanGoWebSocketPath}\",\n                        \"dest\": ${configV2rayTrojanPort},\n                        \"xver\": 1\n                    },\n                    {\n                        \"path\": \"/${configV2rayWebSocketPath}\",\n                        \"dest\": ${configV2rayVmesWSPort},\n                        \"xver\": 1\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"tcp\",\n                \"security\": \"${configV2rayIsTlsShowInfo}\",\n                \"${configV2rayIsTlsShowInfo}Settings\": {\n                    \"alpn\": [\n                        \"http/1.1\"\n                    ],\n                    \"certificates\": [\n                        {\n                            \"certificateFile\": \"${configSSLCertPath}/$configSSLCertFullchainFilename\",\n                            \"keyFile\": \"${configSSLCertPath}/$configSSLCertKeyFilename\"\n                        }\n                    ]\n                }\n            }\n        },\n        {\n            \"port\": ${configV2rayVmesWSPort},\n            \"listen\": \"127.0.0.1\",\n            \"protocol\": \"vless\",\n            \"settings\": {\n                \"clients\": [\n                    ${v2rayConfigUserpasswordInput}\n                ],\n                \"decryption\": \"none\"\n            },\n            \"streamSettings\": {\n                \"network\": \"ws\",\n                \"security\": \"none\",\n                \"wsSettings\": {\n                    \"acceptProxyProtocol\": true,\n                    \"path\": \"/${configV2rayWebSocketPath}\"\n                }\n            }\n        }\n        ${v2rayConfigAdditionalPortInput}\n    ],\nEOM\n\n    fi\n\n\n\n    cat > ${configV2rayPath}/config.json <<-EOF\n{\n    \"log\" : {\n        \"access\": \"${configV2rayAccessLogFilePath}\",\n        \"error\": \"${configV2rayErrorLogFilePath}\",\n        \"loglevel\": \"warning\"\n    },\n    ${v2rayConfigDNSInput}\n    ${v2rayConfigInboundInput}\n    ${v2rayConfigRouteInput}\n    ${v2rayConfigOutboundInput}\n}\nEOF\n\n\n\n\n\n\n\n\n\n\n    systemmdServiceFixV2ray5=\"run\"\n    if [[ $versionV2ray == \"4.45.2\" ]]; then\n        systemmdServiceFixV2ray5=\"\"\n    fi\n\n\n\n    # 增加 V2ray启动脚本\n    if [ \"$isXray\" = \"no\" ] ; then\n\n        cat > ${osSystemMdPath}${promptInfoXrayName}${promptInfoXrayNameServiceName}.service <<-EOF\n[Unit]\nDescription=V2Ray\nDocumentation=https://www.v2fly.org/\nAfter=network.target nss-lookup.target\n\n[Service]\nType=simple\n# This service runs as root. You may consider to run it as another user for security concerns.\n# By uncommenting User=nobody and commenting out User=root, the service will run as user nobody.\n# More discussion at https://github.com/v2ray/v2ray-core/issues/1011\nUser=root\n#User=nobody\n#CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE\nNoNewPrivileges=true\nExecStart=${configV2rayPath}/v2ray ${systemmdServiceFixV2ray5} -config ${configV2rayPath}/config.json\nRestart=on-failure\nRestartPreventExitStatus=23\n\n[Install]\nWantedBy=multi-user.target\nEOF\n    else\n        cat > ${osSystemMdPath}${promptInfoXrayName}${promptInfoXrayNameServiceName}.service <<-EOF\n[Unit]\nDescription=Xray\nDocumentation=https://xtls.github.io/\nAfter=network.target nss-lookup.target\n\n[Service]\nType=simple\n# This service runs as root. You may consider to run it as another user for security concerns.\n# By uncommenting User=nobody and commenting out User=root, the service will run as user nobody.\n# More discussion at https://github.com/v2ray/v2ray-core/issues/1011\nUser=root\n#User=nobody\n#CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE\nNoNewPrivileges=true\nExecStart=${configV2rayPath}/xray run -config ${configV2rayPath}/config.json\nRestart=on-failure\nRestartPreventExitStatus=23\n\n[Install]\nWantedBy=multi-user.target\nEOF\n    fi\n\n    ${sudoCmd} chmod +x ${configV2rayPath}/${promptInfoXrayName}\n    ${sudoCmd} chmod +x ${osSystemMdPath}${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n    ${sudoCmd} systemctl daemon-reload\n\n    ${sudoCmd} systemctl enable ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n    ${sudoCmd} systemctl restart ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n\n\n\n\n\n\n\n\n    generateVLessImportLink\n\n    if [[ \"${configV2rayStreamSetting}\" == \"tcp\" ]]; then\n        cat > ${configV2rayPath}/clientConfig.json <<-EOF\n=========== ${promptInfoXrayInstall}客户端配置参数 =============\n{\n    协议: ${configV2rayProtocol},\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPortShowInfo},\n    uuid: ${v2rayPassword1},\n    额外id/AlterID: 0,  // AlterID, Vmess 请填0, 如果是Vless协议则不需要该项\n    加密方式: aes-128-gcm,  // 如果是Vless协议则为none\n    传输协议: tcp,\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    别名:自己起个任意名称\n}\n\n导入链接 Vmess Base64 格式:\n${v2rayVmessLinkQR1}\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR1}\n\nEOF\n\n    elif [[ \"${configV2rayStreamSetting}\" == \"kcp\" ]]; then\n        cat > ${configV2rayPath}/clientConfig.json <<-EOF\n=========== ${promptInfoXrayInstall}客户端配置参数 =============\n{\n    协议: ${configV2rayProtocol},\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPortShowInfo},\n    uuid: ${v2rayPassword1},\n    额外id/AlterID: 0,  // AlterID, Vmess 请填0, 如果是Vless协议则不需要该项\n    加密方式: aes-128-gcm,  // 如果是Vless协议则为none\n    传输协议: kcp,\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    seed 混淆密码: \"${configV2rayKCPSeedPassword}\",\n    别名:自己起个任意名称\n}\n\n导入链接 Vmess Base64 格式:\n${v2rayVmessLinkQR1}\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR1}\n\n\nEOF\n\n    elif [[ \"${configV2rayStreamSetting}\" == \"h2\" ]]; then\n        cat > ${configV2rayPath}/clientConfig.json <<-EOF\n=========== ${promptInfoXrayInstall}客户端配置参数 =============\n{\n    协议: ${configV2rayProtocol},\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPortShowInfo},\n    uuid: ${v2rayPassword1},\n    额外id/AlterID: 0,  // AlterID, Vmess 请填0, 如果是Vless协议则不需要该项\n    加密方式: aes-128-gcm,  // 如果是Vless协议则为none\n    传输协议: h2,\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    path路径:/${configV2rayWebSocketPath},\n    别名:自己起个任意名称\n}\n\n导入链接 Vmess Base64 格式:\n${v2rayVmessLinkQR1}\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR1}\n\nEOF\n\n    elif [[ \"${configV2rayStreamSetting}\" == \"quic\" ]]; then\n        cat > ${configV2rayPath}/clientConfig.json <<-EOF\n=========== ${promptInfoXrayInstall}客户端配置参数 =============\n{\n    协议: ${configV2rayProtocol},\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPortShowInfo},\n    uuid: ${v2rayPassword1},\n    额外id/AlterID: 0,  // AlterID, Vmess 请填0, 如果是Vless协议则不需要该项\n    加密方式: aes-128-gcm,  // 如果是Vless协议则为none\n    传输协议: quic,\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    Quic security: none,\n    key 加密时所用的密钥: \"${configV2rayKCPSeedPassword}\",\n    别名:自己起个任意名称\n}\n\n导入链接 Vmess Base64 格式:\n${v2rayVmessLinkQR1}\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR1}\n\nEOF\n\n\n    elif [[ \"${configV2rayStreamSetting}\" == \"grpc\" ]]; then\n        cat > ${configV2rayPath}/clientConfig.json <<-EOF\n=========== ${promptInfoXrayInstall}客户端配置参数 =============\n{\n    协议: ${configV2rayProtocol},\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPortGRPCShowInfo},\n    uuid: ${v2rayPassword1},\n    额外id/AlterID: 0,  // AlterID, Vmess 请填0, 如果是Vless协议则不需要该项\n    加密方式: aes-128-gcm,  // 如果是Vless协议则为none\n    传输协议: gRPC,\n    gRPC serviceName: ${configV2rayGRPCServiceName},    // serviceName 不能有/\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    别名:自己起个任意名称\n}\n\n导入链接 Vmess Base64 格式:\n${v2rayVmessLinkQR1}\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR1}\n\nEOF\n\n    elif [[ \"${configV2rayStreamSetting}\" == \"wsgrpc\" ]]; then\n        cat > ${configV2rayPath}/clientConfig.json <<-EOF\n=========== ${promptInfoXrayInstall} 客户端配置参数 =============\n{\n    协议: ${configV2rayProtocol},\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPortShowInfo},\n    uuid: ${v2rayPassword1},\n    额外id/AlterID: 0,  // AlterID, Vmess 请填0, 如果是Vless协议则不需要该项\n    加密方式: aes-128-gcm,  // 如果是Vless协议则为none\n    传输协议: websocket,\n    websocket路径:/${configV2rayWebSocketPath},\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    别名:自己起个任意名称\n}\n\n导入链接 Vmess Base64 格式:\n${v2rayVmessLinkQR1}\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR1}\n\n\n=========== ${promptInfoXrayInstall} gRPC 客户端配置参数 =============\n{\n    协议: ${configV2rayProtocol},\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPortGRPCShowInfo},\n    uuid: ${v2rayPassword1},\n    额外id/AlterID: 0,  // AlterID, Vmess 请填0, 如果是Vless协议则不需要该项\n    加密方式: aes-128-gcm,  // 如果是Vless协议则为none\n    传输协议: gRPC,\n    gRPC serviceName: ${configV2rayGRPCServiceName},    // serviceName 不能有/\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    别名:自己起个任意名称\n}\n\n导入链接 Vmess Base64 格式:\n${v2rayVmessLinkQR2}\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR2}\n\nEOF\n\n    elif [[ \"${configV2rayStreamSetting}\" == \"ws\" ]]; then\n        cat > ${configV2rayPath}/clientConfig.json <<-EOF\n=========== ${promptInfoXrayInstall}客户端配置参数 =============\n{\n    协议: ${configV2rayProtocol},\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPortShowInfo},\n    uuid: ${v2rayPassword1},\n    额外id/AlterID: 0,  // AlterID, Vmess 请填0, 如果是Vless协议则不需要该项\n    加密方式: aes-128-gcm,  // 如果是Vless协议则为none\n    传输协议: websocket,\n    websocket路径:/${configV2rayWebSocketPath},\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    别名:自己起个任意名称\n}\n\n导入链接 Vmess Base64 格式:\n${v2rayVmessLinkQR1}\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR1}\n\nEOF\n\n    fi\n\n\n\n\n\n    if [[ \"$configV2rayWorkingMode\" == \"vlessTCPVmessWS\" ]]; then\n\n        cat > ${configV2rayPath}/clientConfig.json <<-EOF\n\nVLess运行在${configV2rayPortShowInfo}端口 (VLess-TCP-TLS) + (VMess-TCP-TLS) + (VMess-WS-TLS)  支持CDN\n\n=========== ${promptInfoXrayInstall}客户端 VLess-TCP-TLS 配置参数 =============\n{\n    协议: VLess,\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPort},\n    uuid: ${v2rayPassword1},\n    额外id: 0,  // AlterID 如果是Vless协议则不需要该项\n    流控flow: ${configV2rayVlessXtlsFlowShowInfo},\n    加密方式: none,  // 如果是Vless协议则为none\n    传输协议: tcp ,\n    websocket路径:无,\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    别名:自己起个任意名称\n}\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR1}\n\n\n=========== ${promptInfoXrayInstall}客户端 VMess-WS-TLS 配置参数 支持CDN =============\n{\n    协议: VMess,\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPort},\n    uuid: ${v2rayPassword1},\n    额外id: 0,  // AlterID 如果是Vless协议则不需要该项\n    加密方式: auto,  // 如果是Vless协议则为none\n    传输协议: websocket,\n    websocket路径:/${configV2rayWebSocketPath},\n    底层传输协议:tls,\n    别名:自己起个任意名称\n}\n\n导入链接 Vmess Base64 格式:\n${v2rayVmessLinkQR1}\n\n\n\n=========== ${promptInfoXrayInstall}客户端 VMess-TCP-TLS 配置参数 支持CDN =============\n{\n    协议: VMess,\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPort},\n    uuid: ${v2rayPassword1},\n    额外id: 0,  // AlterID 如果是Vless协议则不需要该项\n    加密方式: auto,  // 如果是Vless协议则为none\n    传输协议: tcp,\n    伪装类型: http,\n    路径:/tcp${configV2rayWebSocketPath},\n    底层传输协议:tls,\n    别名:自己起个任意名称\n}\n\n导入链接 Vmess Base64 格式:\n${v2rayVmessLinkQR2}\n\n\nEOF\n\n    elif [[ \"$configV2rayWorkingMode\" == \"vlessgRPC\" ]]; then\n\n    cat > ${configV2rayPath}/clientConfig.json <<-EOF\n VLess运行在${configV2rayPortShowInfo}端口 (VLess-gRPC-TLS) 支持CDN\n\n=========== ${promptInfoXrayInstall}客户端 VLess-gRPC-TLS 配置参数 支持CDN =============\n{\n    协议: VLess,\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPort},\n    uuid: ${v2rayPassword1},\n    额外id: 0,  // AlterID 如果是Vless协议则不需要该项\n    流控flow: ${configV2rayVlessXtlsFlowShowInfo},\n    加密方式: none,\n    传输协议: gRPC,\n    gRPC serviceName: ${configV2rayGRPCServiceName},\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    别名:自己起个任意名称\n}\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR1}\n\nEOF\n\n    elif [[ \"$configV2rayWorkingMode\" == \"vlessTCPWS\" ]]; then\n\n    cat > ${configV2rayPath}/clientConfig.json <<-EOF\nVLess运行在${configV2rayPortShowInfo}端口 (VLess-TCP-TLS) + (VLess-WS-TLS) 支持CDN\n\n=========== ${promptInfoXrayInstall}客户端 VLess-TCP-TLS 配置参数 =============\n{\n    协议: VLess,\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPort},\n    uuid: ${v2rayPassword1},\n    额外id: 0,  // AlterID 如果是Vless协议则不需要该项\n    流控flow: ${configV2rayVlessXtlsFlowShowInfo},\n    加密方式: none,\n    传输协议: tcp ,\n    websocket路径:无,\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    别名:自己起个任意名称\n}\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR1}\n\n\n=========== ${promptInfoXrayInstall}客户端 VLess-WS-TLS 配置参数 支持CDN =============\n{\n    协议: VLess,\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPort},\n    uuid: ${v2rayPassword1},\n    额外id: 0,  // AlterID 如果是Vless协议则不需要该项\n    流控flow: ${configV2rayVlessXtlsFlowShowInfo},\n    加密方式: none,\n    传输协议: websocket,\n    websocket路径:/${configV2rayWebSocketPath},\n    底层传输协议:tls,\n    别名:自己起个任意名称\n}\n\n导入链接 Vless 格式:\nvless://${v2rayPassword1UrlEncoded}@${configSSLDomain}:${configV2rayPortShowInfo}?encryption=none&security=tls&type=ws&host=${configSSLDomain}&path=%2f${configV2rayWebSocketPath}#${configSSLDomain}+WebSocket_tls\n\nEOF\n\n    elif [[ \"$configV2rayWorkingMode\" == \"vlessTCPVision\" ]]; then\n\n    cat > ${configV2rayPath}/clientConfig.json <<-EOF\nVLess运行在${configV2rayPortShowInfo}端口 (VLess-TCP-XTLS Vision) 不支持CDN\n\n=========== ${promptInfoXrayInstall}客户端 VLess-TCP-XTLS Vision 配置参数 =============\n{\n    协议: VLess,\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPort},\n    uuid: ${v2rayPassword1},\n    额外id: 0,  // AlterID 如果是Vless协议则不需要该项\n    流控flow: ${configV2rayVlessXtlsFlowShowInfo},\n    加密方式: none,\n    传输协议: tcp ,\n    websocket路径:无,\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    fingerprint: chrome,\n    别名:自己起个任意名称\n}\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR1}\n\n\nEOF\n\n    elif [[ \"$configV2rayWorkingMode\" == \"vlessTCPREALITY\" ]]; then\n\n    cat > ${configV2rayPath}/clientConfig.json <<-EOF\nVLess运行在${configV2rayPortShowInfo}端口 (VLess-TCP-REALITY XTLS Vision) 不支持CDN\n\n=========== ${promptInfoXrayInstall}客户端 VLess-TCP-REALITY XTLS Vision 配置参数 =============\n{\n    协议: VLess,\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPort},\n    uuid: ${v2rayPassword1},\n    额外id: 0,  // AlterID 如果是Vless协议则不需要该项\n    流控flow: ${configV2rayVlessXtlsFlowShowInfo},\n    加密方式: none,\n    传输协议: tcp,\n    websocket路径:无,\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    fingerprint: chrome,\n    serverNames: ${configXrayRealitySni},\n    publicKey: ${xrayRealityPublicKey},\n    shortId: ${xrayRealityShortId},\n    别名:自己起个任意名称\n}\n\nserverNames 还可以填入以下任意一个网站:\nicloud.com   www.icloud.com  apple.com  www.apple.com  mozilla.org  addons.mozilla.org  ebay.com  www.ebay.com\nwalmart.com  www.walmart.com  etsy.com  www.etsy.com  shopify.com  www.shopify.com  samsung.com  www.samsung.com\nairbnb.com  www.airbnb.com  asml.com  www.asml.com  tsmc.com  www.tsmc.com  pfizer.com  www.pfizer.com\nmicrosoft.com  www.microsoft.com  support.microsoft.com  office.com  www.office.com  signup.live.com  www.live.com\noutlook.live.com  lovelive-anime.jp  s0.awsstatic.com  d1.awsstatic.com  amazon.com  m.media-amazon.com\n\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR1}\n\n\n\nEOF\n\n    elif [[ \"$configV2rayWorkingMode\" == \"sni\" ]]; then\n\n    cat > ${configV2rayPath}/clientConfig.json <<-EOF\nVLess运行在${configV2rayPortShowInfo}端口 (VLess-TCP-TLS) + (VLess-WS-TLS) + (VLess-gRPC-TLS)支持CDN\n\n=========== ${promptInfoXrayInstall}客户端 VLess-TCP-TLS 配置参数 =============\n{\n    协议: VLess,\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPortShowInfo},\n    uuid: ${v2rayPassword1},\n    额外id: 0,  // AlterID 如果是Vless协议则不需要该项\n    流控flow: 空\n    加密方式: none,\n    传输协议: tcp ,\n    websocket路径:无,\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    别名:自己起个任意名称\n}\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR1}\n\n\n=========== ${promptInfoXrayInstall}客户端 VLess-WS-TLS 配置参数 支持CDN =============\n{\n    协议: VLess,\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPortShowInfo},\n    uuid: ${v2rayPassword1},\n    额外id: 0,  // AlterID 如果是Vless协议则不需要该项\n    流控flow: ${configV2rayVlessXtlsFlowShowInfo},\n    加密方式: none,\n    传输协议: websocket,\n    websocket路径:/${configV2rayWebSocketPath},\n    底层传输协议:tls,\n    别名:自己起个任意名称\n}\n\n导入链接 Vless 格式:\nvless://${v2rayPassword1UrlEncoded}@${configSSLDomain}:${configV2rayPortShowInfo}?encryption=none&security=tls&type=ws&host=${configSSLDomain}&path=%2f${configV2rayWebSocketPath}#${configSSLDomain}+WebSocket_tls\n\n\n=========== ${promptInfoXrayInstall}客户端 VLess-gRPC-TLS 配置参数 支持CDN =============\n{\n    协议: VLess,\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPortShowInfo},\n    uuid: ${v2rayPassword1},\n    额外id: 0,  // AlterID 如果是Vless协议则不需要该项\n    流控flow:  空,\n    加密方式: none,\n    传输协议: gRPC,\n    gRPC serviceName: ${configV2rayGRPCServiceName},\n    底层传输协议:tls,\n    别名:自己起个任意名称\n}\n\n导入链接 Vless 格式:\nvless://${v2rayPassword1UrlEncoded}@${configSSLDomain}:${configV2rayPortShowInfo}?encryption=none&security=tls&type=grpc&serviceName=${configV2rayGRPCServiceName}&host=${configSSLDomain}#${configSSLDomain}+gRPC_tls\n\nEOF\n\n    elif [[ \"$configV2rayWorkingMode\" == \"vlessTCPWSTrojan\" ]]; then\n    cat > ${configV2rayPath}/clientConfig.json <<-EOF\nVLess运行在${configV2rayPortShowInfo}端口 (VLess-TCP-TLS) + (VLess-WS-TLS) + (Trojan)支持CDN\n\n=========== ${promptInfoXrayInstall}客户端 VLess-TCP-TLS 配置参数 =============\n{\n    协议: VLess,\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPort},\n    uuid: ${v2rayPassword1},\n    额外id: 0,  // AlterID 如果是Vless协议则不需要该项\n    流控flow: xtls-rprx-direct\n    加密方式: none,\n    传输协议: tcp ,\n    websocket路径:无,\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    别名:自己起个任意名称\n}\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR1}\n\n\n=========== ${promptInfoXrayInstall}客户端 VLess-WS-TLS 配置参数 支持CDN =============\n{\n    协议: VLess,\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPort},\n    uuid: ${v2rayPassword1},\n    额外id: 0,  // AlterID 如果是Vless协议则不需要该项\n    流控flow: ${configV2rayVlessXtlsFlowShowInfo},\n    加密方式: none,\n    传输协议: websocket,\n    websocket路径:/${configV2rayWebSocketPath},\n    底层传输协议:tls,\n    别名:自己起个任意名称\n}\n\n导入链接:\nvless://${v2rayPassword1UrlEncoded}@${configSSLDomain}:${configV2rayPort}?encryption=none&security=tls&type=ws&host=${configSSLDomain}&path=%2f${configV2rayWebSocketPath}#${configSSLDomain}+WebSocket_tls\n\n\n=========== Trojan${promptInfoTrojanName}服务器地址: ${configSSLDomain}  端口: $configV2rayPort\n\n密码1: ${trojanPassword1}\n密码2: ${trojanPassword2}\n密码3: ${trojanPassword3}\n密码4: ${trojanPassword4}\n密码5: ${trojanPassword5}\n密码6: ${trojanPassword6}\n密码7: ${trojanPassword7}\n密码8: ${trojanPassword8}\n密码9: ${trojanPassword9}\n密码10: ${trojanPassword10}\n您指定前缀的密码共10个: 从 ${configTrojanPasswordPrefixInput}202201 到 ${configTrojanPasswordPrefixInput}202210 都可以使用\n例如: 密码:${configTrojanPasswordPrefixInput}202202 或 密码:${configTrojanPasswordPrefixInput}202209 都可以使用\n\n小火箭链接:\ntrojan://${trojanPassword1}@${configSSLDomain}:${configV2rayPort}?peer=${configSSLDomain}&sni=${configSSLDomain}#${configSSLDomain}_trojan\n\n二维码 Trojan${promptInfoTrojanName}\nhttps://api.qrserver.com/v1/create-qr-code/?size=400x400&data=trojan%3a%2f%2f${trojanPassword1}%40${configSSLDomain}%3a${configV2rayPort}%3fpeer%3d${configSSLDomain}%26sni%3d${configSSLDomain}%23${configSSLDomain}_trojan\n\nEOF\n\n    elif [[ \"$configV2rayWorkingMode\" == \"trojan\" ]]; then\n    cat > ${configV2rayPath}/clientConfig.json <<-EOF\n=========== ${promptInfoXrayInstall}客户端 VLess-TCP-TLS 配置参数 =============\n{\n    协议: VLess,\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPort},\n    uuid: ${v2rayPassword1},\n    额外id: 0,  // AlterID 如果是Vless协议则不需要该项\n    流控flow: xtls-rprx-direct\n    加密方式: none,\n    传输协议: tcp ,\n    websocket路径:无,\n    底层传输协议: ${configV2rayIsTlsShowInfo},\n    别名:自己起个任意名称\n}\n\n导入链接 Vless 格式:\n${v2rayVlessLinkQR1}\n\n\n=========== ${promptInfoXrayInstall}客户端 VLess-WS-TLS 配置参数 支持CDN =============\n{\n    协议: VLess,\n    地址: ${configSSLDomain},\n    端口: ${configV2rayPort},\n    uuid: ${v2rayPassword1},\n    额外id: 0,  // AlterID 如果是Vless协议则不需要该项\n    流控flow: ${configV2rayVlessXtlsFlowShowInfo},\n    加密方式: none,\n    传输协议: websocket,\n    websocket路径:/${configV2rayWebSocketPath},\n    底层传输协议:tls,\n    别名:自己起个任意名称\n}\n\n导入链接:\nvless://${v2rayPassword1UrlEncoded}@${configSSLDomain}:${configV2rayPort}?encryption=none&security=tls&type=ws&host=${configSSLDomain}&path=%2f${configV2rayWebSocketPath}#${configSSLDomain}+WebSocket_tls\n\n\n=========== Trojan${promptInfoTrojanName}服务器地址: ${configSSLDomain}  端口: $configV2rayTrojanPort\n\n密码1: ${trojanPassword1}\n密码2: ${trojanPassword2}\n密码3: ${trojanPassword3}\n密码4: ${trojanPassword4}\n密码5: ${trojanPassword5}\n密码6: ${trojanPassword6}\n密码7: ${trojanPassword7}\n密码8: ${trojanPassword8}\n密码9: ${trojanPassword9}\n密码10: ${trojanPassword10}\n您指定前缀的密码共10个: 从 ${configTrojanPasswordPrefixInput}202201 到 ${configTrojanPasswordPrefixInput}202210 都可以使用\n例如: 密码:${configTrojanPasswordPrefixInput}202202 或 密码:${configTrojanPasswordPrefixInput}202209 都可以使用\n\n小火箭链接:\ntrojan://${trojanPassword1}@${configSSLDomain}:${configV2rayTrojanPort}?peer=${configSSLDomain}&sni=${configSSLDomain}#${configSSLDomain}_trojan\n\n二维码 Trojan${promptInfoTrojanName}\nhttps://api.qrserver.com/v1/create-qr-code/?size=400x400&data=trojan%3a%2f%2f${trojanPassword1}%40${configSSLDomain}%3a${configV2rayTrojanPort}%3fpeer%3d${configSSLDomain}%26sni%3d${configSSLDomain}%23${configSSLDomain}_trojan\n\nEOF\n    fi\n\n\n\n    # 设置 cron 定时任务\n    # https://stackoverflow.com/questions/610839/how-can-i-programmatically-create-a-new-cron-job\n\n    (crontab -l ; echo \"10 4 * * 0,1,2,3,4,5,6 rm -f /root/v2ray-*\") | sort - | uniq - | crontab -\n    (crontab -l ; echo \"20 4 * * 0,1,2,3,4,5,6 systemctl restart ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\") | sort - | uniq - | crontab -\n\n\n    green \"======================================================================\"\n    green \"    ${promptInfoXrayInstall} Version: ${promptInfoXrayVersion} 安装成功 !\"\n\n    if [[ -n ${configInstallNginxMode} ]]; then\n        green \"    伪装站点为 https://${configSSLDomain}!\"\n        green \"    伪装站点的静态html内容放置在目录 ${configWebsitePath}, 可自行更换网站内容!\"\n    fi\n\n    red \"    ${promptInfoXrayInstall} 服务器端配置路径 ${configV2rayPath}/config.json !\"\n    green \"    ${promptInfoXrayInstall} 访问日志 ${configV2rayAccessLogFilePath} !\"\n    green \"    ${promptInfoXrayInstall} 错误日志 ${configV2rayErrorLogFilePath} ! \"\n    green \"    ${promptInfoXrayInstall} 查看日志命令: journalctl -n 50 -u ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service \"\n    green \"    ${promptInfoXrayInstall} 停止命令: systemctl stop ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service  启动命令: systemctl start ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service \"\n    green \"    ${promptInfoXrayInstall} 重启命令: systemctl restart ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\"\n    green \"    ${promptInfoXrayInstall} 查看运行状态命令:  systemctl status ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service \"\n    green \"    ${promptInfoXrayInstall} 服务器 每天会自动重启, 防止内存泄漏. 运行 crontab -l 命令 查看定时重启命令 !\"\n    green \"======================================================================\"\n    echo \"\"\n    yellow \"${promptInfoXrayInstall} 配置信息如下, 请自行复制保存, 密码任选其一 (密码即用户ID或UUID) !!\"\n    yellow \"服务器地址: ${configSSLDomain}  端口: ${configV2rayPortShowInfo}\"\n    yellow \"用户ID或密码1: ${v2rayPassword1}\"\n    yellow \"用户ID或密码2: ${v2rayPassword2}\"\n    yellow \"用户ID或密码3: ${v2rayPassword3}\"\n    yellow \"用户ID或密码4: ${v2rayPassword4}\"\n    yellow \"用户ID或密码5: ${v2rayPassword5}\"\n    yellow \"用户ID或密码6: ${v2rayPassword6}\"\n    yellow \"用户ID或密码7: ${v2rayPassword7}\"\n    yellow \"用户ID或密码8: ${v2rayPassword8}\"\n    yellow \"用户ID或密码9: ${v2rayPassword9}\"\n    yellow \"用户ID或密码10: ${v2rayPassword10}\"\n    echo \"\"\n    cat \"${configV2rayPath}/clientConfig.json\"\n    echo \"\"\n    green \"======================================================================\"\n    green \"请下载相应的 ${promptInfoXrayName} 客户端:\"\n    yellow \"1 Windows 客户端V2rayN下载：http://${configSSLDomain}/download/${configTrojanWindowsCliPrefixPath}/v2ray-windows.zip\"\n    yellow \"2 MacOS 客户端下载：http://${configSSLDomain}/download/${configTrojanWindowsCliPrefixPath}/v2ray-mac.zip\"\n    yellow \"3 Android 客户端下载 https://github.com/2dust/v2rayNG/releases\"\n    #yellow \"3 Android 客户端下载 http://${configSSLDomain}/download/${configTrojanWindowsCliPrefixPath}/v2ray-android.zip\"\n    yellow \"4 iOS 客户端 请安装小火箭 https://shadowsockshelp.github.io/ios/ \"\n    yellow \"  iOS 请安装小火箭另一个地址 https://lueyingpro.github.io/shadowrocket/index.html \"\n    yellow \"  iOS 安装小火箭遇到问题 教程 https://github.com/shadowrocketHelp/help/ \"\n    yellow \"全平台客户端程序汇总 https://tlanyan.pp.ua/v2ray-clients-download/ \"\n    yellow \"其他客户端程序请看 https://www.v2fly.org/awesome/tools.html \"\n    green \"======================================================================\"\n\n    cat >> ${configReadme} <<-EOF\n\n\n${promptInfoXrayInstall} Version: ${promptInfoXrayVersion} 安装成功 !\n${promptInfoXrayInstall} 服务器端配置路径 ${configV2rayPath}/config.json\n\n${promptInfoXrayInstall} 访问日志 ${configV2rayAccessLogFilePath}\n${promptInfoXrayInstall} 错误日志 ${configV2rayErrorLogFilePath}\n\n${promptInfoXrayInstall} 查看日志命令: journalctl -n 50 -u ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n\n${promptInfoXrayInstall} 启动命令: systemctl start ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n${promptInfoXrayInstall} 停止命令: systemctl stop ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n${promptInfoXrayInstall} 重启命令: systemctl restart ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n${promptInfoXrayInstall} 查看运行状态命令:  systemctl status ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n\n${promptInfoXrayInstall} 配置信息如下, 请自行复制保存, 密码任选其一 (密码即用户ID或UUID) !\n\n服务器地址: ${configSSLDomain}\n端口: ${configV2rayPortShowInfo}\n用户ID或密码1: ${v2rayPassword1}\n用户ID或密码2: ${v2rayPassword2}\n用户ID或密码3: ${v2rayPassword3}\n用户ID或密码4: ${v2rayPassword4}\n用户ID或密码5: ${v2rayPassword5}\n用户ID或密码6: ${v2rayPassword6}\n用户ID或密码7: ${v2rayPassword7}\n用户ID或密码8: ${v2rayPassword8}\n用户ID或密码9: ${v2rayPassword9}\n用户ID或密码10: ${v2rayPassword10}\n\nEOF\n\n    cat \"${configV2rayPath}/clientConfig.json\" >> ${configReadme}\n}\n\nfunction removeV2ray(){\n\n    green \" ================================================== \"\n    green \" Are you sure to remove V2ray or Xray ? \"\n    echo\n    read -r -p \"是否确认卸载 V2ray 或 Xray? 直接回车默认卸载, 请输入[Y/n]:\" isRemoveV2rayServerInput\n    isRemoveV2rayServerInput=${isRemoveV2rayServerInput:-Y}\n\n    if [[ \"${isRemoveV2rayServerInput}\" == [Yy] ]]; then\n\n        if [[ -f \"${configV2rayPath}/xray\" || -f \"${configV2rayPath}/v2ray\" ]]; then\n\n            tempIsXrayService=$(ls ${osSystemMdPath} | grep v2ray- )\n\n            if [ -f \"${configV2rayPath}/xray\" ]; then\n                promptInfoXrayName=\"xray\"\n                isXray=\"yes\"\n                tempIsXrayService=$(ls ${osSystemMdPath} | grep xray- )\n            fi\n\n            if [[ -z \"${tempIsXrayService}\" ]]; then\n                promptInfoXrayNameServiceName=\"\"\n\n            else\n                if [ -f \"${osSystemMdPath}${promptInfoXrayName}-jin.service\" ]; then\n                    promptInfoXrayNameServiceName=\"-jin\"\n                else\n                    tempFilelist=$(ls /usr/lib/systemd/system | grep ${promptInfoXrayName} | awk -F '-' '{ print $2 }' )\n                    promptInfoXrayNameServiceName=\"-${tempFilelist%.*}\"\n                fi\n            fi\n\n\n            showHeaderRed \"准备卸载已安装 ${promptInfoXrayName}${promptInfoXrayNameServiceName} \"\n\n\n            ${sudoCmd} systemctl stop ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n            ${sudoCmd} systemctl disable ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n\n\n            rm -rf ${configV2rayPath}\n            rm -f ${osSystemMdPath}${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n            rm -f ${configV2rayAccessLogFilePath}\n            rm -f ${configV2rayErrorLogFilePath}\n\n            crontab -l | grep -v \"rm\" | crontab -\n            crontab -l | grep -v \"${promptInfoXrayName}${promptInfoXrayNameServiceName}\" | crontab -\n\n\n            showHeaderGreen \" ${promptInfoXrayName}${promptInfoXrayNameServiceName} 卸载完毕 !\"\n\n        else\n            showHeaderRed \" 系统没有安装 ${promptInfoXrayName}${promptInfoXrayNameServiceName}, 退出卸载\"\n        fi\n        echo\n\n    fi\n\n}\n\n\nfunction upgradeV2ray(){\n\n    if [[ -f \"${configV2rayPath}/xray\" || -f \"${configV2rayPath}/v2ray\" ]]; then\n\n        tempIsXrayService=$(ls ${osSystemMdPath} | grep v2ray- )\n\n        if [ -f \"${configV2rayPath}/xray\" ]; then\n            promptInfoXrayName=\"xray\"\n            isXray=\"yes\"\n            tempIsXrayService=$(ls ${osSystemMdPath} | grep xray- )\n        fi\n\n        if [[ -z \"${tempIsXrayService}\" ]]; then\n            promptInfoXrayNameServiceName=\"\"\n\n        else\n            if [ -f \"${osSystemMdPath}${promptInfoXrayName}-jin.service\" ]; then\n                promptInfoXrayNameServiceName=\"-jin\"\n            else\n                tempFilelist=$(ls /usr/lib/systemd/system | grep ${promptInfoXrayName} | awk -F '-' '{ print $2 }' )\n                promptInfoXrayNameServiceName=\"-${tempFilelist%.*}\"\n            fi\n        fi\n\n\n        if [ \"$isXray\" = \"no\" ] ; then\n            getV2rayVersion \"v2ray\"\n            green \" ==================================================\"\n            green \"       开始升级 V2ray Version: ${versionV2ray} !\"\n            green \" ==================================================\"\n        else\n            getV2rayVersion \"xray\" \"update\"\n            green \" ==================================================\"\n            green \"       开始升级 Xray Version: ${versionXray} !\"\n            green \" ==================================================\"\n        fi\n\n\n        ${sudoCmd} systemctl stop ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n\n        mkdir -p ${configDownloadTempPath}/upgrade/${promptInfoXrayName}\n\n        downloadV2rayXrayBin \"upgrade\"\n\n\n\n        ${sudoCmd} chmod +x ${configV2rayPath}/${promptInfoXrayName}\n\n        systemmdServiceFixV2ray5=\"run\"\n        if [[ $versionV2ray == \"4.45.2\" ]]; then\n            systemmdServiceFixV2ray5=\"\"\n            sed -i 's/run -config/-config/g' ${osSystemMdPath}${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n        else\n            sed -i 's/run -config/-config/g' ${osSystemMdPath}${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n            sed -i 's/-config/run -config/g' ${osSystemMdPath}${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n        fi\n\n\n        ${sudoCmd} systemctl daemon-reload\n        ${sudoCmd} systemctl start ${promptInfoXrayName}${promptInfoXrayNameServiceName}.service\n\n\n        if [ \"$isXray\" = \"no\" ] ; then\n            green \" ================================================== \"\n            green \"     升级成功 V2ray Version: ${versionV2ray} !\"\n            green \" ================================================== \"\n        else\n            green \" ==================================================\"\n            green \"     升级成功 Xray Version: ${versionXray} !\"\n            green \" ==================================================\"\n        fi\n\n    else\n        red \" 系统没有安装 ${promptInfoXrayName}${promptInfoXrayNameServiceName}, 退出卸载\"\n    fi\n    echo\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction downloadTrojanWebBin(){\n    # https://github.com/Jrohy/trojan/releases/download/v2.12.2/trojan-linux-amd64\n    # https://github.com/Jrohy/trojan/releases/download/v2.12.2/trojan-linux-arm64\n\n    if [[ ${osArchitecture} == \"arm\" || ${osArchitecture} == \"arm64\" ]] ; then\n        downloadFilenameTrojanWeb=\"trojan-linux-arm64\"\n    fi\n\n    if [ -z $1 ]; then\n        wget -O ${configTrojanWebPath}/trojan-web --no-check-certificate \"https://github.com/Jrohy/trojan/releases/download/v${versionTrojanWeb}/${downloadFilenameTrojanWeb}\"\n    else\n        wget -O ${configDownloadTempPath}/upgrade/trojan-web/trojan-web \"https://github.com/Jrohy/trojan/releases/download/v${versionTrojanWeb}/${downloadFilenameTrojanWeb}\"\n    fi\n}\n\nfunction installTrojanWeb(){\n    # wget -O trojan-web_install.sh -N --no-check-certificate \"https://raw.githubusercontent.com/Jrohy/trojan/master/install.sh\" && chmod +x trojan-web_install.sh && ./trojan-web_install.sh\n\n    if [ -f \"${configTrojanWebPath}/trojan-web\" ] ; then\n        green \" ==================================================\"\n        green \"  已安装过 Trojan-web 可视化管理面板, 退出安装 !\"\n        green \" ==================================================\"\n        exit\n    fi\n\n    stopServiceNginx\n    testLinuxPortUsage\n    installPackage\n\n    green \" ================================================== \"\n    yellow \" 请输入绑定到本VPS的域名 例如www.xxx.com: (此步骤请关闭CDN后安装)\"\n    green \" ================================================== \"\n\n    read configSSLDomain\n    if compareRealIpWithLocalIp \"${configSSLDomain}\" ; then\n\n        getV2rayVersion \"trojan-web\"\n        green \" ==================================================\"\n        green \"    开始安装 Trojan-web 可视化管理面板: ${versionTrojanWeb} !\"\n        green \" ==================================================\"\n\n        mkdir -p ${configTrojanWebPath}\n        downloadTrojanWebBin\n        chmod +x ${configTrojanWebPath}/trojan-web\n\n\n        # 增加启动脚本\n        cat > ${osSystemMdPath}trojan-web.service <<-EOF\n[Unit]\nDescription=trojan-web\nDocumentation=https://github.com/Jrohy/trojan\nAfter=network.target network-online.target nss-lookup.target mysql.service mariadb.service mysqld.service docker.service\n\n[Service]\nType=simple\nStandardError=journal\nExecStart=${configTrojanWebPath}/trojan-web web -p ${configTrojanWebPort}\nExecReload=/bin/kill -HUP \\$MAINPID\nRestart=on-failure\nRestartSec=3s\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n        ${sudoCmd} systemctl daemon-reload\n        ${sudoCmd} systemctl enable trojan-web.service\n        ${sudoCmd} systemctl start trojan-web.service\n\n        green \" ==================================================\"\n        green \" Trojan-web 可视化管理面板: ${versionTrojanWeb} 安装成功!\"\n        green \" Trojan可视化管理面板地址 https://${configSSLDomain}/${configTrojanWebNginxPath}\"\n        green \" 开始运行命令 ${configTrojanWebPath}/trojan-web 进行初始化设置.\"\n        echo\n        red \" 后续安装步骤: \"\n        green \" 根据提示选择 1. Let's Encrypt 证书, 申请SSL证书 \"\n        green \" 证书申请成功后. 继续根据提示 再选择 1.安装docker版mysql(mariadb).\"\n        green \" mysql(mariadb)启动成功后, 继续根据提示 输入第一个trojan用户的账号密码, 回车后出现 '欢迎使用trojan管理程序' \"\n        green \" 出现 '欢迎使用trojan管理程序'后 需要不输入数字直接按回车, 这样就会继续安装 nginx 直到完成 \"\n        echo\n        green \" nginx 安装成功会显示可视化管理面板网址, 请保存下来. 如果没有显示管理面板网址则表明安装失败. \"\n        green \" ==================================================\"\n\n        read -r -p \"按回车继续安装. Press enter to continue\"\n\n        ${configTrojanWebPath}/trojan-web\n\n        installWebServerNginx\n\n        # 命令补全环境变量\n        echo \"export PATH=$PATH:${configTrojanWebPath}\" >> ${HOME}/.${osSystemShell}rc\n\n        # (crontab -l ; echo '25 0 * * * \"${configSSLAcmeScriptPath}\"/acme.sh --cron --home \"${configSSLAcmeScriptPath}\" > /dev/null') | sort - | uniq - | crontab -\n        (crontab -l ; echo \"30 4 * * 0,1,2,3,4,5,6 systemctl restart trojan-web.service\") | sort - | uniq - | crontab -\n\n    else\n        exit\n    fi\n}\n\nfunction upgradeTrojanWeb(){\n    getV2rayVersion \"trojan-web\"\n    green \" ==================================================\"\n    green \"    开始升级 Trojan-web 可视化管理面板: ${versionTrojanWeb} !\"\n    green \" ==================================================\"\n\n    ${sudoCmd} systemctl stop trojan-web.service\n\n    mkdir -p ${configDownloadTempPath}/upgrade/trojan-web\n    downloadTrojanWebBin \"upgrade\"\n\n    mv -f ${configDownloadTempPath}/upgrade/trojan-web/trojan-web ${configTrojanWebPath}\n    chmod +x ${configTrojanWebPath}/trojan-web\n\n    ${sudoCmd} systemctl start trojan-web.service\n    ${sudoCmd} systemctl restart trojan.service\n\n\n    green \" ================================================== \"\n    green \"     升级成功 Trojan-web 可视化管理面板: ${versionTrojanWeb} !\"\n    green \" ================================================== \"\n}\n\nfunction removeTrojanWeb(){\n    # wget -O trojan-web_install.sh -N --no-check-certificate \"https://raw.githubusercontent.com/Jrohy/trojan/master/install.sh\" && chmod +x trojan-web_install.sh && ./trojan-web_install.sh --remove\n\n    green \" ================================================== \"\n    red \" 准备卸载已安装 Trojan-web \"\n    green \" ================================================== \"\n\n    ${sudoCmd} systemctl stop trojan.service\n    ${sudoCmd} systemctl stop trojan-web.service\n    ${sudoCmd} systemctl disable trojan-web.service\n\n\n    # 移除trojan\n    rm -rf /usr/bin/trojan\n    rm -rf /usr/local/etc/trojan\n    rm -f ${osSystemMdPath}trojan.service\n    rm -f /etc/systemd/system/trojan.service\n    rm -f /usr/local/etc/trojan/config.json\n\n\n    # 移除trojan web 管理程序\n    # rm -f /usr/local/bin/trojan\n    rm -rf ${configTrojanWebPath}\n    rm -f ${osSystemMdPath}trojan-web.service\n    rm -rf /var/lib/trojan-manager\n\n    ${sudoCmd} systemctl daemon-reload\n\n\n    # 移除trojan的专用数据库\n    docker rm -f trojan-mysql\n    docker rm -f trojan-mariadb\n    rm -rf /home/mysql\n    rm -rf /home/mariadb\n\n\n    # 移除环境变量\n    sed -i '/trojan/d' ${HOME}/.${osSystemShell}rc\n    # source ${HOME}/.${osSystemShell}rc\n\n    crontab -l | grep -v \"trojan-web\"  | crontab -\n\n    green \" ================================================== \"\n    green \"  Trojan-web 卸载完毕 !\"\n    green \" ================================================== \"\n}\n\nfunction runTrojanWebGetSSL(){\n    ${sudoCmd} systemctl stop trojan-web.service\n    ${sudoCmd} systemctl stop nginx.service\n    ${sudoCmd} systemctl stop trojan.service\n    ${configTrojanWebPath}/trojan-web tls\n    ${sudoCmd} systemctl start trojan-web.service\n    ${sudoCmd} systemctl start nginx.service\n    ${sudoCmd} systemctl restart trojan.service\n}\n\nfunction runTrojanWebCommand(){\n    ${configTrojanWebPath}/trojan-web\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction installXUI(){\n\n    stopServiceNginx\n    testLinuxPortUsage\n    installPackage\n\n    green \" ================================================== \"\n    yellow \" 请输入绑定到本VPS的域名 例如www.xxx.com: (此步骤请关闭CDN后安装)\"\n    green \" ================================================== \"\n\n    read -r configSSLDomain\n    if compareRealIpWithLocalIp \"${configSSLDomain}\" ; then\n\n        green \" ==================================================\"\n        green \"    开始安装 X-UI 可视化管理面板 !\"\n        green \" ==================================================\"\n\n        # wget -O x_ui_install.sh -N --no-check-certificate \"https://raw.githubusercontent.com/sprov065/x-ui/master/install.sh\" && chmod +x x_ui_install.sh && ./x_ui_install.sh\n        wget -O x_ui_install.sh -N --no-check-certificate \"https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh\" && chmod +x x_ui_install.sh && ./x_ui_install.sh\n\n        green \"X-UI 可视化管理面板地址 http://${configSSLDomain}:54321\"\n        green \" 请确保 54321 端口已经放行, 例如检查linux防火墙或VPS防火墙 54321 端口是否开启\"\n        green \"X-UI 可视化管理面板 默认管理员用户 admin 密码 admin, 为保证安全,请登陆后尽快修改默认密码 \"\n        green \" ==================================================\"\n\n    else\n        exit\n    fi\n}\nfunction removeXUI(){\n    green \" ==================================================\"\n    /usr/bin/x-ui\n}\n\n\nfunction installV2rayUI(){\n\n    stopServiceNginx\n    testLinuxPortUsage\n    installPackage\n\n    green \" ================================================== \"\n    yellow \" 请输入绑定到本VPS的域名 例如www.xxx.com: (此步骤请关闭CDN后安装)\"\n    green \" ================================================== \"\n\n    read -r configSSLDomain\n    if compareRealIpWithLocalIp \"${configSSLDomain}\" ; then\n\n        green \" ==================================================\"\n        green \"    开始安装 V2ray-UI 可视化管理面板 !\"\n        green \" ==================================================\"\n\n        bash <(curl -Ls https://raw.githubusercontent.com/tszho-t/v2ui/master/v2-ui.sh)\n\n        # wget -O v2_ui_install.sh -N --no-check-certificate \"https://raw.githubusercontent.com/sprov065/v2-ui/master/install.sh\" && chmod +x v2_ui_install.sh && ./v2_ui_install.sh\n        # wget -O v2_ui_install.sh -N --no-check-certificate \"https://raw.githubusercontent.com/tszho-t/v2-ui/master/install.sh\" && chmod +x v2_ui_install.sh && ./v2_ui_install.sh\n\n        green \" V2ray-UI 可视化管理面板地址 http://${configSSLDomain}:65432\"\n        green \" 请确保 65432 端口已经放行, 例如检查linux防火墙或VPS防火墙 65432 端口是否开启\"\n        green \" V2ray-UI 可视化管理面板 默认管理员用户 admin 密码 admin, 为保证安全,请登陆后尽快修改默认密码 \"\n        green \" ==================================================\"\n\n    else\n        exit\n    fi\n}\nfunction removeV2rayUI(){\n    green \" ==================================================\"\n    /usr/bin/v2-ui\n}\nfunction upgradeV2rayUI(){\n    green \" ==================================================\"\n    /usr/bin/v2-ui\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconfigMosdnsBinPath=\"/usr/local/bin/mosdns\"\nconfigMosdnsPath=\"/etc/mosdns\"\nisInstallMosdns=\"true\"\nisinstallMosdnsName=\"mosdns\"\ndownloadFilenameMosdns=\"mosdns-linux-amd64.zip\"\ndownloadFilenameMosdnsCn=\"mosdns-cn-linux-amd64.zip\"\n\nisUseEasyMosdnsConfig=\"false\"\n\n\nfunction downloadMosdns(){\n\n    rm -rf \"${configMosdnsBinPath}\"\n    mkdir -p \"${configMosdnsBinPath}\"\n    cd ${configMosdnsBinPath} || exit\n\n\n    if [[ \"${isInstallMosdns}\" == \"true\" ]]; then\n        versionMosdns=$(getGithubLatestReleaseVersion \"IrineSistiana/mosdns\")\n\n        downloadFilenameMosdns=\"mosdns-linux-amd64.zip\"\n\n        # https://github.com/IrineSistiana/mosdns/releases/download/v3.8.0/mosdns-linux-amd64.zip\n        # https://github.com/IrineSistiana/mosdns/releases/download/v3.8.0/mosdns-linux-arm64.zip\n        # https://github.com/IrineSistiana/mosdns/releases/download/v3.8.0/mosdns-linux-arm-7.zip\n        if [[ ${osArchitecture} == \"arm\" ]] ; then\n            downloadFilenameMosdns=\"mosdns-linux-arm-7.zip\"\n        fi\n        if [[ ${osArchitecture} == \"arm64\" ]] ; then\n            downloadFilenameMosdns=\"mosdns-linux-arm64.zip\"\n        fi\n\n        downloadAndUnzip \"https://github.com/IrineSistiana/mosdns/releases/download/v${versionMosdns}/${downloadFilenameMosdns}\" \"${configMosdnsBinPath}\" \"${downloadFilenameMosdns}\"\n        ${sudoCmd} chmod +x \"${configMosdnsBinPath}/mosdns\"\n\n    else\n        versionMosdnsCn=$(getGithubLatestReleaseVersion \"IrineSistiana/mosdns-cn\")\n\n        downloadFilenameMosdnsCn=\"mosdns-cn-linux-amd64.zip\"\n\n        # https://github.com/IrineSistiana/mosdns-cn/releases/download/v1.2.3/mosdns-cn-linux-amd64.zip\n        # https://github.com/IrineSistiana/mosdns-cn/releases/download/v1.2.3/mosdns-cn-linux-arm64.zip\n        # https://github.com/IrineSistiana/mosdns-cn/releases/download/v1.2.3/mosdns-cn-linux-arm-7.zip\n        if [[ ${osArchitecture} == \"arm\" ]] ; then\n            downloadFilenameMosdnsCn=\"mosdns-cn-linux-arm-7.zip\"\n        fi\n        if [[ ${osArchitecture} == \"arm64\" ]] ; then\n            downloadFilenameMosdnsCn=\"mosdns-cn-linux-arm64.zip\"\n        fi\n\n        downloadAndUnzip \"https://github.com/IrineSistiana/mosdns-cn/releases/download/v${versionMosdnsCn}/${downloadFilenameMosdnsCn}\" \"${configMosdnsBinPath}\" \"${downloadFilenameMosdnsCn}\"\n        ${sudoCmd} chmod +x \"${configMosdnsBinPath}/mosdns-cn\"\n    fi\n\n    if [ ! -f \"${configMosdnsBinPath}/${isinstallMosdnsName}\" ]; then\n        echo\n        red \"下载失败, 请检查网络是否可以正常访问 gitHub.com\"\n        red \"请检查网络后, 重新运行本脚本!\"\n        echo\n        exit 1\n    fi\n\n\n    rm -rf \"${configMosdnsPath}\"\n    mkdir -p \"${configMosdnsPath}/rule\"\n    cd ${configMosdnsPath} || exit\n\n\n    if [[ \"${isUseEasyMosdnsConfig}\" == \"false\" ]]; then\n\n        echo\n        green \" Downloading files: cn.dat, geosite.dat, geoip.dat. \"\n        green \" 开始下载文件: cn.dat, geosite.dat, geoip.dat  等相关文件\"\n        echo\n\n        # versionV2rayRulesDat=$(getGithubLatestReleaseVersion \"Loyalsoldier/v2ray-rules-dat\")\n        # geositeUrl=\"https://github.com/Loyalsoldier/v2ray-rules-dat/releases/download/202205162212/geosite.dat\"\n        # geoipeUrl=\"https://github.com/Loyalsoldier/v2ray-rules-dat/releases/download/202205162212/geoip.dat\"\n        # cnipUrl=\"https://github.com/Loyalsoldier/geoip/releases/download/202205120123/cn.dat\"\n\n        geositeFilename=\"geosite.dat\"\n        geoipFilename=\"geoip.dat\"\n        cnipFilename=\"cn.dat\"\n\n        geositeUrl=\"https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat\"\n        geoipeUrl=\"https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat\"\n        cnipUrl=\"https://raw.githubusercontent.com/Loyalsoldier/geoip/release/cn.dat\"\n        privateUrl=\"https://raw.githubusercontent.com/Loyalsoldier/domain-list-custom/release/private.txt\"\n\n        wget -O ${configMosdnsPath}/rule/${geositeFilename} ${geositeUrl}\n        wget -O ${configMosdnsPath}/rule/${geoipFilename} ${geoipeUrl}\n        wget -O ${configMosdnsPath}/rule/${cnipFilename} ${cnipUrl}\n        wget -O ${configMosdnsPath}/rule/private.txt ${privateUrl}\n\n        hostsUrl=\"https://raw.githubusercontent.com/Journalist-HK/mosdns-config/main/rule/hosts.txt\"\n\n        china_domain_listUrl=\"https://raw.githubusercontent.com/pmkol/easymosdns/main/rules/china_domain_list.txt\"\n        china_ip_listUrl=\"https://raw.githubusercontent.com/pmkol/easymosdns/main/rules/china_ip_list.txt\"\n        white_listUrl=\"https://raw.githubusercontent.com/Journalist-HK/Rules/master/white_list.txt\"\n        block_listUrl=\"https://raw.githubusercontent.com/Journalist-HK/Rules/master/block_list.txt\"\n\n        grey_listUrl=\"https://raw.githubusercontent.com/Journalist-HK/Rules/master/grey_list.txt\"\n        ipv6_domain_listUrl=\"https://raw.githubusercontent.com/Journalist-HK/Rules/master/ipv6_domain_list.txt\"\n        original_domain_listUrl=\"https://raw.githubusercontent.com/Journalist-HK/Rules/main/original_domain_list.txt\"\n        akamai_domain_listUrl=\"https://raw.githubusercontent.com/Journalist-HK/Rules/master/akamai_domain_list.txt\"\n        cdn_domain_listUrl=\"https://raw.githubusercontent.com/pmkol/easymosdns/rules/cdn_domain_list.txt\"\n\n\n        wget -O ${configMosdnsPath}/rule/hosts.txt ${hostsUrl}\n        wget -O ${configMosdnsPath}/rule/china_domain_list.txt ${china_domain_listUrl}\n        wget -O ${configMosdnsPath}/rule/china_ip_list.txt ${china_ip_listUrl}\n        wget -O ${configMosdnsPath}/rule/white_list.txt ${white_listUrl}\n        wget -O ${configMosdnsPath}/rule/block_list.txt ${block_listUrl}\n\n        wget -O ${configMosdnsPath}/rule/grey_list.txt ${grey_listUrl}\n        wget -O ${configMosdnsPath}/rule/ipv6_domain_list.txt ${ipv6_domain_listUrl}\n        wget -O ${configMosdnsPath}/rule/original_domain_list.txt ${original_domain_listUrl}\n        wget -O ${configMosdnsPath}/rule/akamai_domain_list.txt ${akamai_domain_listUrl}\n        wget -O ${configMosdnsPath}/rule/cdn_domain_list.txt ${cdn_domain_listUrl}\n\n\n        wget -O ${configMosdnsPath}/rule/gfw.txt \"https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/gfw.txt\"\n        wget -O ${configMosdnsPath}/rule/greatfire.txt \"https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/greatfire.txt\"\n        wget -O ${configMosdnsPath}/rule/custom_list.txt \"https://raw.githubusercontent.com/Journalist-HK/Rules/master/custom_list.txt\"\n\n        wget -O ${configMosdnsPath}/rule/gfw_ip_list.txt \"https://raw.githubusercontent.com/pmkol/easymosdns/rules/gfw_ip_list.txt\"\n        wget -O ${configMosdnsPath}/rule/facebook.txt \"https://raw.githubusercontent.com/Loyalsoldier/geoip/release/text/facebook.txt\"\n        wget -O ${configMosdnsPath}/rule/twitter.txt \"https://raw.githubusercontent.com/Loyalsoldier/geoip/release/text/twitter.txt\"\n\n        wget -O ${configMosdnsPath}/rule/ip.txt \"https://raw.githubusercontent.com/XIU2/CloudflareSpeedTest/master/ip.txt\"\n        wget -O ${configMosdnsPath}/rule/ipv6.txt \"https://raw.githubusercontent.com/XIU2/CloudflareSpeedTest/master/ipv6.txt\"\n        wget -O ${configMosdnsPath}/rule/cloudfront.txt \"https://raw.githubusercontent.com/Journalist-HK/Rules/master/cloudfront.txt\"\n        wget -O ${configMosdnsPath}/rule/cloudfront_ipv6.txt \"https://raw.githubusercontent.com/Journalist-HK/Rules/master/cloudfront_ipv6.txt\"\n        wget -O ${configMosdnsPath}/rule/fastly.txt \"https://raw.githubusercontent.com/Loyalsoldier/geoip/release/text/fastly.txt\"\n\n    fi\n\n}\n\n\nfunction installMosdns(){\n\n    if [ \"${osInfo}\" = \"OpenWrt\" ]; then\n        echo \" ================================================== \"\n        echo \" For Openwrt X86, please use the script below:  \"\n        echo \" 针对 OpenWrt X86 系统, 请使用如下脚本安装: \"\n        echo \" wget --no-check-certificate https://raw.githubusercontent.com/jinwyp/one_click_script/master/dsm/openwrt.sh && chmod +x ./openwrt.sh && ./openwrt.sh \"\n        echo\n        exit\n    fi\n\n    # https://askubuntu.com/questions/27213/what-is-the-linux-equivalent-to-windows-program-files\n\n\n    if [ -f \"${configMosdnsBinPath}/mosdns\" ]; then\n        echo\n        green \" ==================================================\"\n        green \" 检测到 mosdns 已安装, 退出安装! \"\n        echo\n        exit 1\n    fi\n\n    if [ -f \"${configMosdnsBinPath}/mosdns-cn\" ]; then\n        echo\n        green \" ==================================================\"\n        green \" 检测到 mosdns-cn 已安装, 退出安装! \"\n        echo\n        exit 1\n    fi\n\n    echo\n    green \" ==================================================\"\n    green \" 请选择安装 Mosdns 还是 Mosdns-cn DNS 服务器:\"\n    echo\n    green \" 1. Mosdns 配置规则比较复杂 推荐使用\"\n    green \" 2. Mosdns-cn, 容易配置, 相当于Mosdns配置简化版 \"\n    echo\n    read -r -p \"请选择Mosdns还是Mosdns-cn, 默认直接回车安装Mosdns-cn, 请输入纯数字:\" isInstallMosdnsServerInput\n    isInstallMosdnsServerInput=${isInstallMosdnsServerInput:-1}\n    echo\n\n    if [[ \"${isInstallMosdnsServerInput}\" == \"1\" ]]; then\n        isInstallMosdns=\"true\"\n        isinstallMosdnsName=\"mosdns\"\n\n        echo\n        green \" ==================================================\"\n        green \" 是否使用 easymosdns 的配置, 该配置更复杂 效果更好\"\n        green \" https://github.com/pmkol/easymosdns\"\n        echo\n        read -r -p \"是否使用easymosdns, 默认直接回车不使用, 请输入[y/N]:\" isUseEasyConfigInput\n        isUseEasyConfigInput=${isUseEasyConfigInput:-n}\n\n        if [[ \"$isUseEasyConfigInput\" == [Nn] ]]; then\n            isUseEasyMosdnsConfig=\"false\"\n        else\n            isUseEasyMosdnsConfig=\"true\"\n        fi\n    else\n        isInstallMosdns=\"false\"\n        isinstallMosdnsName=\"mosdns-cn\"\n    fi\n\n    echo\n    green \" ================================================== \"\n    green \"    开始安装 ${isinstallMosdnsName} !\"\n    green \" ================================================== \"\n    echo\n\n    echo\n    green \" ================================================== \"\n    green \" 请填写mosdns运行的端口号 默认端口号为5335\"\n    green \" DNS服务器常用为53端口, 推荐输入53\"\n    yellow \" 软路由一般内置DNS服务器, 如果在软路由安装 为避免冲突 默认为5335\"\n    echo\n    read -r -p \"请填写mosdns运行的端口号? 默认直接回车为5335, 请输入纯数字:\" isMosDNSServerPortInput\n    isMosDNSServerPortInput=${isMosDNSServerPortInput:-5335}\n\n    mosDNSServerPort=\"5335\"\n    reNumber='^[0-9]+$'\n\n    if [[ \"${isMosDNSServerPortInput}\" =~ ${reNumber} ]] ; then\n        mosDNSServerPort=\"${isMosDNSServerPortInput}\"\n    fi\n\n\n    echo\n    green \" ================================================== \"\n    green \" 是否添加本地运营商的DNS服务器, 默认直接回车不添加, 建议添加\"\n    green \" 选y是 添加本地运营商DNS服务器, 请通过光猫或路由器查看DNS的IP\"\n    echo\n    read -r -p \"是否添加运营商的DNS服务器? 默认直接回车为不添加, 请输入[y/N]:\" isAddNewDNSServerInput\n    isAddNewDNSServerInput=${isAddNewDNSServerInput:-n}\n\n    if [[ \"$isAddNewDNSServerInput\" == [Nn] ]]; then\n        echo\n        chinaDNSServerIPInput=\"218.2.2.2\"\n    else\n        echo\n        green \" ================================================== \"\n        green \" 请输入本地运营商DNS服务器IP 格式例如 1.1.1.1\"\n        green \" 请保证端口53 提供DNS解析服务, 如果是非53端口请填写端口号, 格式例如 1.1.1.1:8053\"\n        green \" 请通过光猫或路由器查看DNS的IP 直接回车默认 218.2.2.2 江苏电信\"\n        green \" 全国DNS列表 https://github.com/easonjim/dns-server-list\"\n        echo\n        read -r -p \"请输入DNS服务器IP地址:\" chinaDNSServerIPInput\n        chinaDNSServerIPInput=${chinaDNSServerIPInput:-218.2.2.2}\n    fi\n    echo\n\n    downloadMosdns\n\n\n    if [[ \"${isInstallMosdns}\" == \"true\" ]]; then\n\n        rm -f \"${configMosdnsPath}/config.yaml\"\n\n        if [[ \"${isUseEasyMosdnsConfig}\" == \"true\" ]]; then\n            downloadAndUnzip \"https://mirror.apad.pro/dns/easymosdns.tar.gz\" \"${configMosdnsPath}\" \"easymosdns.tar.gz\"\n            ${sudoCmd} chmod +x ${configMosdnsPath}/tools/*\n\n            sed -i \"s/0\\.0\\.0\\.0:53/0\\.0\\.0\\.0:${mosDNSServerPort}/g\" ${configMosdnsPath}/config.yaml\n\n            cd ${configMosdnsBinPath} || exit\n            export PATH=\"$PATH:${configMosdnsBinPath}\"\n\n            ${configMosdnsPath}/tools/config-reset\n\n        else\n\n\n            cat > \"${configMosdnsPath}/config.yaml\" <<-EOF\nlog:\n  level: info\n  file: \"${configMosdnsPath}/mosdns.log\"\n\n# []string, 从其他配置文件载入 plugins 插件设置。\n# include 的插件会比本配置文件中的插件先初始化。\n\nplugins:\n  # - tag: ecs_cn\n  #   type: ecs_handler\n  #   args:\n  #     forward: false\n  #     preset: 58.208.0.0 # 电信，请针对不同的运营商自行修改\n  #     send: false\n  #     mask4: 12\n  #     mask6: 28\n\n  - tag: ecs_tw\n    type: ecs_handler\n    args:\n      forward: false\n      preset: 168.95.0.0\n      send: false\n      mask4: 16\n      # mask6: 40\n\n  - tag: ecs_us\n    type: ecs_handler\n    args:\n      forward: false\n      preset: 38.94.109.0\n      send: false\n      mask4: 24\n      # mask6: 40\n\n  # 不应处理本地 DNS 请求，防止死循环。正确顺序应该是 dnsmasq --> OpenClash（可选）--> mosdns。\n  # - tag: \"forward_lan\"\n  #   type: forward\n  #   args:\n  #     concurrent: 1\n  #     upstream:\n  #       - addr: \"192.168.1.1\"\n\n  - tag: \"forward_local\"\n    type: forward\n    args:\n      concurrent: 2\n      upstreams:\n        - addr: \"${chinaDNSServerIPInput}\" # 江苏电信 DNS，自行修改\n        - addr: \"218.4.4.4\" # 江苏电信 DNS，自行修改\n        - addr: \"210.22.70.3\" # 上海联通 DNS，自行修改\n\n  - tag: \"forward_alidns\"\n    type: forward\n    args:\n      concurrent: 1\n      upstreams:\n        - addr: \"quic://223.6.6.6:853\"\n        - addr: \"https://dns.alidns.com/dns-query\"\n          dial_addr: \"223.5.5.5\"\n          enable_http3: false\n\n  - tag: \"forward_easy\"\n    type: \"forward\"\n    args:\n      concurrent: 1\n      upstreams:\n        - addr: \"https://doh.apad.pro/dns-query\"\n          bootstrap: \"218.2.2.2\"\n          enable_http3: false\n\n  - tag: \"forward_remote\"\n    type: \"forward\"\n    args:\n      concurrent: 1 # 并发数。每次请求随机选取 concurrent 个 upstreams 发送请求。\n                    # 取最快返回的应答。超过 3 最多选 3 个。默认 1。\n      upstreams:\n        - addr: \"https://162.159.36.1/dns-query\"\n          enable_http3: false\n          # socks5: \"127.0.0.1:1080\" # 目前暂不支持用户名密码认证，只支持基于 TCP 的协议\n        - addr: \"https://162.159.46.1/dns-query\"\n          enable_http3: false\n        # - addr: \"https://doh.opendns.com/dns-query\"\n        #   dial_addr: \"146.112.41.2\"\n        #   enable_http3: false\n        # - addr: \"https://public.dns.iij.jp/dns-query\"\n        #   dial_addr: 103.2.57.5\n        #   enable_http3: false\n        # - addr: \"tcp://208.67.220.220:5353\" # CISCO OpenDNS\n        #   enable_pipeline: true\n\n  - tag: remote_sequence\n    type: sequence\n    args:\n      - exec: prefer_ipv4\n      - exec: \\$ecs_tw\n      - exec: \\$forward_remote\n      - exec: return\n\n  - tag: \"fallback\"\n    type: \"fallback\"\n    args:\n      primary: forward_easy    # easy\n      secondary: forward_remote  # remote\n      threshold: 360           # 无响应回滚阈值。单位毫秒。默认 500 。\n      always_standby: true     # 副可执行插件始终待命。\n\n  - tag: fallback_sequence\n    type: sequence\n    args:\n      - exec: prefer_ipv4\n      - exec: \\$ecs_tw\n      - exec: \\$fallback\n      - exec: return\n\n  - tag: fallback_sequence_ipv6\n    type: sequence\n    args:\n      - exec: prefer_ipv6\n      - exec: \\$fallback\n      - exec: return\n\n  - tag: has_resp_sequence\n    type: sequence\n    args:\n      - matches:\n          - has_resp\n        exec: accept\n\n\n\n\n  - tag: \"hosts\"\n    type: \"hosts\"\n    args:\n      # entries:\n      #   - \"google.com 108.177.122.113\"\n      files:\n        - \"/etc/mosdns/rule/hosts.txt\"\n\n  - tag: geosite_cn # 国内域名\n    type: domain_set\n    args:\n      files:\n        - \"/etc/mosdns/rule/china_domain_list.txt\" # https://raw.githubusercontent.com/pmkol/easymosdns/rules/china_domain_list.txt\n\n  - tag: geoip_cn # 国内 IP\n    type: ip_set\n    args:\n      files:\n        - \"/etc/mosdns/rule/china_ip_list.txt\" # https://raw.githubusercontent.com/pmkol/easymosdns/rules/china_ip_list.txt\n\n  - tag: privatelist # 内网域名\n    type: domain_set\n    args:\n      files:\n        - \"/etc/mosdns/rule/private.txt\" # https://raw.githubusercontent.com/Loyalsoldier/domain-list-custom/release/private.txt\n\n  - tag: whitelist\n    type: domain_set\n    args:\n      files:\n        - \"/etc/mosdns/rule/white_list.txt\" # https://raw.githubusercontent.com/Journalist-HK/Rules/master/white_list.txt\n\n  - tag: blocklist\n    type: domain_set\n    args:\n      files:\n        - \"/etc/mosdns/rule/block_list.txt\" # https://raw.githubusercontent.com/Journalist-HK/Rules/master/block_list.txt\n\n  - tag: greylist # 用来存放被污染的域名。\n    type: domain_set\n    args:\n      files:\n        - \"/etc/mosdns/rule/grey_list.txt\" # https://raw.githubusercontent.com/Journalist-HK/Rules/master/grey_list.txt\n\n  - tag: ipv6list # 用来存放优先走 ipv6 的域名。\n    type: domain_set\n    args:\n      files:\n        - \"/etc/mosdns/rule/ipv6_domain_list.txt\" # https://raw.githubusercontent.com/Journalist-HK/Rules/master/ipv6_domain_list.txt\n\n  - tag: originallist # 用来存放优不进行 IP 优选的域名。\n    type: domain_set\n    args:\n      files:\n        - \"/etc/mosdns/rule/original_domain_list.txt\" # https://raw.githubusercontent.com/Journalist-HK/Rules/master/original_domain_list.txt\n\n  - tag: akamailist\n    type: domain_set\n    args:\n      files:\n        - \"/etc/mosdns/rule/akamai_domain_list.txt\" # https://raw.githubusercontent.com/Journalist-HK/Rules/master/akamai_domain_list.txt\n\n  - tag: cdnlist\n    type: domain_set\n    args:\n      exps:\n        - \"cloudflare.com\"\n        - \"cloudfront.net\"\n        - \"ghproxy.com\"\n        - \"microsoft.com\"\n        - \"playstation.com\"\n        - \"playstation.net\"\n        - \"redhat.com\"\n        - \"samsung.com\"\n        - \"ubi.com\"\n        - \"ubisoft.com\"\n        - \"xboxlive.com\"\n      files:\n        - \"/etc/mosdns/rule/cdn_domain_list.txt\" # https://raw.githubusercontent.com/pmkol/easymosdns/rules/cdn_domain_list.txt\n\n  - tag: gfwlist\n    type: domain_set\n    args:\n      files:\n        - \"/etc/mosdns/rule/gfw.txt\" # https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/gfw.txt\n        - \"/etc/mosdns/rule/greatfire.txt\" # https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/greatfire.txt\n        - \"/etc/mosdns/rule/custom_list.txt\" # https://raw.githubusercontent.com/Journalist-HK/Rules/master/custom_list.txt\n\n  - tag: banned_ip\n    type: ip_set\n    args:\n      ips:\n        - \"0.0.0.0/32\"\n        - \"2001::/32\"\n      files:\n        - \"/etc/mosdns/rule/gfw_ip_list.txt\" # https://raw.githubusercontent.com/pmkol/easymosdns/rules/gfw_ip_list.txt\n        - \"/etc/mosdns/rule/facebook.txt\" # https://raw.githubusercontent.com/Loyalsoldier/geoip/release/text/facebook.txt\n        # - \"/etc/mosdns/rule/telegram.txt\" # https://raw.githubusercontent.com/Loyalsoldier/geoip/release/text/telegram.txt\n        - \"/etc/mosdns/rule/twitter.txt\" # https://raw.githubusercontent.com/Loyalsoldier/geoip/release/text/twitter.txt\n\n  - tag: cloudflare_ip\n    type: ip_set\n    args:\n      files:\n        - \"/etc/mosdns/rule/ip.txt\" # https://raw.githubusercontent.com/XIU2/CloudflareSpeedTest/master/ip.txt\n\n  - tag: cloudflare_ipv6\n    type: ip_set\n    args:\n      files:\n        - \"/etc/mosdns/rule/ipv6.txt\" # https://raw.githubusercontent.com/XIU2/CloudflareSpeedTest/master/ipv6.txt\n\n  - tag: cloudfront_ip\n    type: ip_set\n    args:\n      files:\n        - \"/etc/mosdns/rule/cloudfront.txt\" # https://raw.githubusercontent.com/Journalist-HK/Rules/master/cloudfront.txt\n\n  - tag: cloudfront_ipv6\n    type: ip_set\n    args:\n      files:\n        - \"/etc/mosdns/rule/cloudfront_ipv6.txt\" # https://raw.githubusercontent.com/Journalist-HK/Rules/master/cloudfront_ipv6.txt\n\n  - tag: fastly_ip\n    type: ip_set\n    args:\n      files:\n        - \"/etc/mosdns/rule/fastly.txt\" # https://raw.githubusercontent.com/Loyalsoldier/geoip/release/text/fastly.txt\n\n  - tag: \"cache_0\"\n    type: \"cache\"\n    args:\n      size: 8192  # 默认: 1024。\n      # lazy_cache_ttl > 0 会启用 lazy cache。\n      # 所有应答都会在缓存中存留 lazy_cache_ttl 秒，但自身的 TTL 仍然有效。如果命中过期的应答，\n      # 则缓存会立即返回 TTL 为 5 的应答，然后自动在后台发送请求更新数据。\n      lazy_cache_ttl: 259200  # 默认: 0（禁用 lazy cache）。\n                              # 建议值 86400（1天）~ 259200（3天）\n      dump_file: /usr/share/mosdns/cache.dump\n      # (实验性) 自动保存间隔。单位秒。默认 600。\n      # 如果距离上次 dump 有 1024 次更新，则自动保存。\n      dump_interval: 7200\n\n\n\n\n\n\n\n  # IP 优选，需要定期修改，最好填写 2 - 4 个\n  - tag: blackhole_akamai # 替换部分 AKAMAI 域名 IP，详见 https://github.com/IrineSistiana/mosdns/discussions/489\n    type: sequence\n    args:\n      - exec: black_hole 119.149.188.15 202.142.229.59 223.44.51.33 # best_akamai_ip\n      - exec: ttl 3600-0\n      - exec: accept # 运行 black_hole 之后接受请求，不再进行后续判断\n\n  - tag: blackhole_akamai_ipv6\n    type: sequence\n    args:\n      - exec: black_hole 2600:140b:1000::1730:d5ab 2600:140b:1000::1730:d5ce # best_akamai_ipv6\n      - exec: ttl 3600-0\n      - exec: accept\n\n  - tag: blackhole_cloudflare\n    type: sequence\n    args:\n      - exec: black_hole 104.17.7.198 104.17.61.114 162.159.0.195 162.159.7.75 # best_cloudflare_ip\n      - exec: ttl 3600-0\n      - exec: accept\n\n  - tag: blackhole_cloudflare_ipv6\n    type: sequence\n    args:\n      - exec: black_hole 2a06:98c1:310f::e0c0:131c:2cb3 2a06:98c1:310f::ee3c:1d43:fc2e:6f6c # best_cloudflare_ipv6\n      - exec: ttl 3600-0\n      - exec: accept\n\n  - tag: blackhole_cloudfront\n    type: sequence\n    args:\n      - exec: black_hole 18.172.26.139 18.172.28.94 52.84.151.126 52.84.228.48 # best_cloudfront_ip\n      - exec: ttl 3600-0\n      - exec: accept\n\n  - tag: blackhole_cloudfront_ipv6\n    type: sequence\n    args:\n      - exec: black_hole 2600:9000:20e9:1edf:3560:977b:c990:1f75 2600:9000:20e9:1edf:35c0:29ed:b6ac:7b3b # best_cloudfront_ipv6\n      - exec: ttl 3600-0\n      - exec: accept\n\n  - tag: remote_sequence_us # 使用 US ECS 请求上游\n    type: sequence\n    args:\n      - exec: prefer_ipv4\n      - exec: \\$ecs_us\n      - exec: \\$forward_remote\n      - exec: jump has_resp_sequence\n\n  - tag: fallback_sequence_us # 使用 US ECS 请求上游\n    type: sequence\n    args:\n      - exec: prefer_ipv4\n      - exec: \\$ecs_us\n      - exec: \\$fallback\n      - exec: jump has_resp_sequence\n\n  - tag: change_cdn_ip_akamai\n    type: sequence\n    args:\n      - matches:\n          - cname akamai.net\n          - qtype 1\n          - has_wanted_ans # 防止纯 IPV6 域名被替换\n        exec: jump blackhole_akamai\n      - matches:\n          - cname akamai.net\n          - qtype 28\n          - has_wanted_ans\n        exec: jump blackhole_akamai_ipv6 # 如果不需要对纯 IPV6 域名优选可以去掉这一段\n      - exec: return\n\n  - tag: change_cdn_ip_cf # https://github.com/XIU2/CloudflareSpeedTest/discussions/317\n    type: sequence\n    args:\n      - matches:\n          - qtype 1\n          - has_wanted_ans\n          - resp_ip \\$cloudflare_ip\n        exec: jump blackhole_cloudflare\n      - matches:\n          - qtype 1\n          - has_wanted_ans\n          - resp_ip \\$cloudfront_ip\n        exec: jump blackhole_cloudfront\n      - matches:\n          - qtype 28\n          - has_wanted_ans\n          - resp_ip \\$cloudflare_ipv6\n        exec: jump blackhole_cloudflare_ipv6\n      - matches:\n          - qtype 28\n          - has_wanted_ans\n          - resp_ip \\$cloudfront_ipv6\n        exec: jump blackhole_cloudfront_ipv6\n      - exec: return\n\n  - tag: reforward_fastly_remote # 使用 US ECS 再次查询优化 Fastly CDN 结果\n    type: sequence\n    args:\n      - matches:\n          - resp_ip \\$fastly_ip\n        exec: jump remote_sequence_us\n      - exec: return\n\n  - tag: reforward_fastly_fallback # 使用 US ECS 再次查询优化 Fastly CDN 结果\n    type: sequence\n    args:\n      - matches:\n          - resp_ip \\$fastly_ip\n        exec: jump fallback_sequence_us\n      - exec: return\n\n  - tag: gfw_sequence # 处理 GFW 域名\n    type: sequence\n    args:\n      - exec: jump remote_sequence\n      - exec: jump change_cdn_ip_akamai\n      - exec: jump change_cdn_ip_cf\n      - exec: jump reforward_fastly_remote\n      - exec: accept # 查询失败也会停止，防止后续查询回落到国内上游\n\n  - tag: default_sequence # 默认使用 fallback\n    type: sequence\n    args:\n      - exec: jump fallback_sequence\n      - exec: jump change_cdn_ip_akamai\n      - exec: jump change_cdn_ip_cf\n      - exec: jump reforward_fastly_fallback\n      - exec: accept # 查询失败也会停止，防止后续查询回落到国内上游\n\n  - tag: default_sequence_original # 使用 fallback，不替换 CDN IP\n    type: sequence\n    args:\n      - exec: jump fallback_sequence\n      - exec: jump has_resp_sequence\n\n  - tag: default_sequence_ipv6 # 使用 fallback，但不替换 CDN IP，IPV6 优先\n    type: sequence\n    args:\n      - exec: jump fallback_sequence_ipv6\n      - exec: jump has_resp_sequence\n\n  - tag: ali_sequence\n    type: sequence\n    args:\n      # - exec: prefer_ipv4\n      - exec: \\$forward_alidns\n      - exec: jump change_cdn_ip_akamai\n      - exec: jump change_cdn_ip_cf\n      - exec: jump reforward_fastly_fallback\n      - exec: accept # 查询失败也会停止，防止后续查询其他上游\n\n  - tag: ali_sequence_ipv4\n    type: sequence\n    args:\n      - exec: prefer_ipv4\n      - exec: \\$forward_alidns\n      - exec: jump change_cdn_ip_akamai\n      - exec: jump change_cdn_ip_cf\n      - exec: jump reforward_fastly_fallback\n      - exec: accept # 查询失败也会停止，防止后续查询其他上游\n\n  # - tag: reforward_banned_ip\n  #   type: sequence\n  #   args:\n  #     - exec: debug_print \"DNS poisoning detected\"\n  #     - exec: jump fallback_sequence\n  #     - exec: return\n\n  - tag: main\n    type: sequence\n    args:\n      - matches:\n          - qtype 65\n        exec: reject 3 # 屏蔽 QTYPE 65\n\n      - exec: \\$hosts\n      - exec: jump has_resp_sequence\n\n      - matches:\n          - qname \\$privatelist #内网域名\n        exec: reject 5 # 屏蔽内网域名\n        # exec: \\$forward_lan # 查询内网 DNS\n      # - exec: jump has_resp_sequence\n\n      - matches:\n          - qname \\$whitelist # DDNS 和 其他白名单\n        exec: \\$forward_local\n      - exec: ttl 5-180\n      - exec: jump has_resp_sequence\n\n      - matches:\n          - qname \\$blocklist # 黑名单，可添加去广告列表\n        exec: reject 5\n\n      - exec: \\$cache_0 # 下面的请求结果均进入缓存\n\n      - matches:\n          - qname \\$ipv6list\n        exec: jump default_sequence_ipv6 # IPV6 域名请求 EASY DNS\n\n      - matches:\n          - qname \\$originallist # 不进行 IP 替换的域名，通常是游戏等使用非常用端口的域名\n        exec: jump default_sequence_original\n\n      - matches:\n          - qname \\$greylist\n        exec: jump default_sequence # 污染域名请求 EASY DNS\n\n      - matches:\n          - qname \\$geosite_cn # 国内域名走阿里 DNS，也可以走运营商 DNS\n        exec: jump ali_sequence # 如果使用策略 1，可以考虑去掉这一段。去掉后，当阿里 DNS 查询失败后会查询可信上游。\n\n      - matches:\n          - qname \\$cdnlist apple.com icloud.com edgesuite.net msftconnecttest.com trafficmanager.net\n        exec: jump ali_sequence_ipv4 # 我这里用阿里 DNS 请求 AKAMAI 域名返回东京电信的概率较高，可以替换成其他。\n\n      - matches:\n          - qname \\$gfwlist\n        exec: jump gfw_sequence # GFW 域名直接请求海外 DNS\n\n      - matches:\n          - qname \\$akamailist\n        exec: jump ali_sequence_ipv4 # 我这里用阿里 DNS 请求 AKAMAI 域名返回东京电信的概率较高，可以替换成其他。\n\n      # 策略 1：默认查询国内上游，入返回境外 IP，再次将域名交给可信 DNS 查询。\n      - exec: \\$forward_alidns # 默认使用阿里 DNS，如果担心 DNS 泄露，可以调换顺序，把 fallback 放在前面，代价是延迟会变高。这种情况下可以使用前面的 cdnlist 域名先做判断。\n      - matches:\n          - resp_ip \\$banned_ip # 记录被污染域名，日后加入 gerylist。可以去掉。\n        exec: debug_print \"DNS poisoning detected\"\n      - matches:\n          - \"resp_ip \\$geoip_cn\"\n        exec: accept # 返回国内 IP 直接接受\n      - exec: jump change_cdn_ip_akamai\n      - matches: # 有些 AKAMAI 的域名不能直接替换 IP（没有绑定全证书），此处多加一次判断，接受所有 AKAMAI CDN 的 IP。\n          - cname \\$akamailist\n        exec: accept\n      - exec: jump change_cdn_ip_cf\n      - exec: jump reforward_fastly_fallback\n\n      # 策略 2：注释上方策略 1 的配置，默认查询可信 DNS，可以避免“DNS 泄露”，对上游稳定性要求更高\n      - exec: jump default_sequence # 其余域名使用可信 DNS\n\n\n  - tag: udp_server\n    type: udp_server\n    args:\n      entry: main\n      listen: \":${mosDNSServerPort}\"\n\n  - tag: tcp_server\n    type: tcp_server\n    args:\n      entry: main\n      listen: \":${mosDNSServerPort}\"\n      # cert: \"/etc/nginx/conf.d/_lan.crt\" # 配置 cert 和 key 后会启用 TLS (DoT)。\n      # key: \"/etc/nginx/conf.d/_lan.key\"\n      idle_timeout: 10 # 空连接超时。单位秒。默认 10。\n\nEOF\n\n        fi\n\n        ${configMosdnsBinPath}/mosdns service install -c \"${configMosdnsPath}/config.yaml\" -d \"${configMosdnsPath}\"\n        ${configMosdnsBinPath}/mosdns service start\n\n\n    else\n\n        rm -f \"${configMosdnsPath}/config_mosdns_cn.yaml\"\n\n        cat > \"${configMosdnsPath}/config_mosdns_cn.yaml\" <<-EOF\nserver_addr: \":${mosDNSServerPort}\"\ncache_size: 2048\nlazy_cache_ttl: 86400\nlazy_cache_reply_ttl: 30\nredis_cache: \"\"\nmin_ttl: 300\nmax_ttl: 3600\nhosts: []\narbitrary: []\nblacklist_domain: []\ninsecure: false\nca: []\ndebug: false\nlog_file: \"${configMosdnsPath}/mosdns-cn.log\"\nupstream: []\nlocal_upstream: [\"udp://223.5.5.5\", \"udp://119.29.29.29\"]\nlocal_ip: [\"${configMosdnsPath}/rule/${geoipFilename}:cn\"]\nlocal_domain: []\nlocal_latency: 50\nremote_upstream: [ \"udp://1.0.0.1\", \"udp://208.67.222.222\", \"tls://8.8.4.4:853\", \"udp://5.2.75.231\", \"udp://172.105.216.54\"]\nremote_domain: [\"${configMosdnsPath}/rule/${geositeFilename}:geolocation-!cn\"]\nworking_dir: \"${configMosdnsPath}\"\ncd2exe: false\n\nEOF\n\n        ${configMosdnsBinPath}/mosdns-cn --service install --config \"${configMosdnsPath}/config_mosdns_cn.yaml\" --dir \"${configMosdnsPath}\"\n\n        ${configMosdnsBinPath}/mosdns-cn --service start\n    fi\n\n    echo\n    green \" ==================================================\"\n    green \" ${isinstallMosdnsName} 安装成功! 运行端口: ${mosDNSServerPort}\"\n    echo\n    green \" 启动: systemctl start ${isinstallMosdnsName}   停止: systemctl stop ${isinstallMosdnsName}\"\n    green \" 重启: systemctl restart ${isinstallMosdnsName}\"\n    green \" 查看状态: systemctl status ${isinstallMosdnsName} \"\n    green \" 查看log: journalctl -n 50 -u ${isinstallMosdnsName} \"\n    green \" 查看访问日志: cat  ${configMosdnsPath}/${isinstallMosdnsName}.log\"\n\n    # green \" 启动命令: ${configMosdnsBinPath}/${isinstallMosdnsName} -s start -dir ${configMosdnsPath} \"\n    # green \" 停止命令: ${configMosdnsBinPath}/${isinstallMosdnsName} -s stop -dir ${configMosdnsPath} \"\n    # green \" 重启命令: ${configMosdnsBinPath}/${isinstallMosdnsName} -s restart -dir ${configMosdnsPath} \"\n    green \" ==================================================\"\n\n}\n\nfunction removeMosdns(){\n    if [[ -f \"${configMosdnsBinPath}/mosdns\" || -f \"${configMosdnsBinPath}/mosdns-cn\" ]]; then\n        if [[ -f \"${configMosdnsBinPath}/mosdns\" ]]; then\n            isInstallMosdns=\"true\"\n            isinstallMosdnsName=\"mosdns\"\n        fi\n\n        if [ -f \"${configMosdnsBinPath}/mosdns-cn\" ]; then\n            isInstallMosdns=\"false\"\n            isinstallMosdnsName=\"mosdns-cn\"\n        fi\n\n        echo\n        green \" ==================================================\"\n        green \" 准备卸载已安装的 ${isinstallMosdnsName} \"\n        green \" ==================================================\"\n        echo\n\n        if [[ \"${isInstallMosdns}\" == \"true\" ]]; then\n            ${configMosdnsBinPath}/${isinstallMosdnsName} service stop\n            ${configMosdnsBinPath}/${isinstallMosdnsName} service uninstall\n        else\n            ${configMosdnsBinPath}/mosdns-cn --service stop\n            ${configMosdnsBinPath}/mosdns-cn --service uninstall\n        fi\n\n        rm -rf \"${configMosdnsBinPath}\"\n        rm -rf \"${configMosdnsPath}\"\n\n        echo\n        green \" ================================================== \"\n        green \"  ${isinstallMosdnsName} 卸载完毕 !\"\n        green \" ================================================== \"\n\n    else\n        echo\n        red \" 系统没有安装 mosdns, 退出卸载\"\n        echo\n    fi\n\n}\n\n\n\n\n\n\n\n\n\n\n\nconfigAdGuardPath=\"/opt/AdGuardHome\"\n\n# DNS server\nfunction installAdGuardHome(){\n    wget -qN --no-check-certificate -O ./ad_guard_install.sh https://raw.githubusercontent.com/AdguardTeam/AdGuardHome/master/scripts/install.sh && chmod +x ./ad_guard_install.sh && ./ad_guard_install.sh -v\n    echo\n    if [[ ${configLanguage} == \"cn\" ]] ; then\n        green \" 如要卸载删除AdGuard Home 请运行命令 ./ad_guard_install.sh -u\"\n        green \" 请打开网址 http://yourip:3000 完成初始化配置 \"\n        green \" 完成初始化后, 请重新运行本脚本 选择29 获取SSL 证书. 开启DOH和DOT \"\n    else\n        green \" Remove AdGuardHome, pls run ./ad_guard_install.sh -u \"\n        green \" Please open http://yourip:3000 and complete the initialization \"\n        green \" After the initialization, pls rerun this script and choose 29 to get SSL certificate \"\n    fi\n    echo\n}\n\nfunction getAdGuardHomeSSLCertification(){\n    if [ -f \"${configAdGuardPath}/AdGuardHome\" ]; then\n        echo\n        green \" ==================================================\"\n        green \" 检测到 AdGuard Home 已安装\"\n        green \" Found AdGuard Home have already installed\"\n        echo\n        green \" 是否继续 申请SSL证书, Continue to get Free SSL certificate ?\"\n        read -p \"是否申请SSL证书, 请输入[Y/n]:\" isGetAdGuardSSLCertificateInput\n        isGetAdGuardSSLCertificateInput=${isGetAdGuardSSLCertificateInput:-Y}\n\n        if [[ \"${isGetAdGuardSSLCertificateInput}\" == [Yy] ]]; then\n            ${configAdGuardPath}/AdGuardHome -s stop\n            configSSLCertPath=\"${configSSLCertPath}/adguardhome\"\n            renewCertificationWithAcme \"\"\n            replaceAdGuardConfig\n        fi\n    fi\n}\n\nfunction replaceAdGuardConfig(){\n\n    if [ -f \"${configAdGuardPath}/AdGuardHome\" ]; then\n\n        if [ -f \"${configAdGuardPath}/AdGuardHome.yaml\" ]; then\n            echo\n            yellow \" 准备把已申请到的SSL证书填入 AdGuardHome 配置文件\"\n            yellow \" prepare to get SSL certificate and replace AdGuardHome config\"\n\n            # https://stackoverflow.com/questions/4396974/sed-or-awk-delete-n-lines-following-a-pattern\n            sed -i -e '/^tls:/{n;d}' ${configAdGuardPath}/AdGuardHome.yaml\n            sed -i \"/^tls:/a \\  enabled: true\" ${configAdGuardPath}/AdGuardHome.yaml\n            # sed -i 's/enabled: false/enabled: true/g' ${configAdGuardPath}/AdGuardHome.yaml\n\n            sed -i \"s/server_name: .*/server_name: ${configSSLDomain}/g\" ${configAdGuardPath}/AdGuardHome.yaml\n            sed -i \"s|certificate_path: .*|certificate_path: ${configSSLCertPath}/${configSSLCertFullchainFilename}|g\" ${configAdGuardPath}/AdGuardHome.yaml\n            sed -i \"s|private_key_path: .*|private_key_path: ${configSSLCertPath}/${configSSLCertKeyFilename}|g\" ${configAdGuardPath}/AdGuardHome.yaml\n\n            # 开启DNS并行查询 加速\n            sed -i 's/all_servers: false/all_servers: true/g' ${configAdGuardPath}/AdGuardHome.yaml\n\n\n            read -r -d '' adGuardConfigUpstreamDns << EOM\n  - 1.0.0.1\n  - https://dns.cloudflare.com/dns-query\n  - 8.8.8.8\n  - https://dns.google/dns-query\n  - tls://dns.google\n  - 9.9.9.9\n  - https://dns.quad9.net/dns-query\n  - tls://dns.quad9.net\n  - 208.67.222.222\n  - https://doh.opendns.com/dns-query\nEOM\n            TEST1=\"${adGuardConfigUpstreamDns//\\\\/\\\\\\\\}\"\n            TEST1=\"${TEST1//\\//\\\\/}\"\n            TEST1=\"${TEST1//&/\\\\&}\"\n            TEST1=\"${TEST1//$'\\n'/\\\\n}\"\n\n            sed -i \"/upstream_dns:/a \\  ${TEST1}\" ${configAdGuardPath}/AdGuardHome.yaml\n\n\n            read -r -d '' adGuardConfigBootstrapDns << EOM\n  - 1.0.0.1\n  - 8.8.8.8\n  - 8.8.4.4\nEOM\n            TEST2=\"${adGuardConfigBootstrapDns//\\\\/\\\\\\\\}\"\n            TEST2=\"${TEST2//\\//\\\\/}\"\n            TEST2=\"${TEST2//&/\\\\&}\"\n            TEST2=\"${TEST2//$'\\n'/\\\\n}\"\n\n            sed -i \"/bootstrap_dns:/a \\  ${TEST2}\" ${configAdGuardPath}/AdGuardHome.yaml\n\n\n            read -r -d '' adGuardConfigFilters << EOM\n- enabled: true\n  url: https://anti-ad.net/easylist.txt\n  name: 'CHN: anti-AD'\n  id: 1652375944\n- enabled: true\n  url: https://easylist-downloads.adblockplus.org/easylistchina.txt\n  name: EasyList China\n  id: 1652375945\nEOM\n            # https://fabianlee.org/2018/10/28/linux-using-sed-to-insert-lines-before-or-after-a-match/\n\n            TEST3=\"${adGuardConfigFilters//\\\\/\\\\\\\\}\"\n            TEST3=\"${TEST3//\\//\\\\/}\"\n            TEST3=\"${TEST3//&/\\\\&}\"\n            TEST3=\"${TEST3//$'\\n'/\\\\n}\"\n\n            sed -i \"/id: 2/a ${TEST3}\" ${configAdGuardPath}/AdGuardHome.yaml\n\n\n            echo\n            green \" AdGuard Home config updated success: ${configAdGuardPath}/AdGuardHome.yaml \"\n            green \" AdGuard Home 配置文件更新成功: ${configAdGuardPath}/AdGuardHome.yaml \"\n            echo\n            ${configAdGuardPath}/AdGuardHome -s restart\n        else\n            red \" 未检测到AdGuardHome配置文件 ${configAdGuardPath}/AdGuardHome.yaml, 请先完成AdGuardHome初始化配置\"\n            red \" ${configAdGuardPath}/AdGuardHome.yaml not found, pls complete the AdGuardHome initialization first!\"\n        fi\n\n    else\n        red \"AdGuard Home not found, Please install AdGuard Home first !\"\n    fi\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction firewallForbiden(){\n    # 禁止邮件端口\n    # firewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 0 -p tcp -m tcp --dport=25 -j ACCEPT\n    # firewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 1 -p tcp -m tcp --dport=25 -j REJECT\n    # firewall-cmd --reload\n\n    firewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 0 -p tcp -m tcp --dport=25 -j DROP\n    firewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 1 -j ACCEPT\n    firewall-cmd --reload\n\n    # iptables -A OUTPUT -p tcp --dport 25 -j DROP\n\n    # iptables -A INPUT -p tcp -s 0/0 -d 0/0 --dport 80 -j DROP\n    # iptables -A INPUT -p all -j ACCEPT\n    # iptables -A OUTPUT -p all -j ACCEPT\n}\n\n\n\n\n\nfunction startMenuOther(){\n    clear\n\n    if [[ ${configLanguage} == \"cn\" ]] ; then\n\n    green \" ==================================================\"\n    red \" 安装下面3个可视化管理面板 之前不能用本脚本或其他脚本安装过trojan或v2ray! \"\n    red \" 如果已安装过 trojan 或 v2ray 请先卸载或重做干净系统! 3个管理面板无法同时安装\"\n    echo\n    green \" 1. 安装 trojan-web (trojan 和 trojan-go 可视化管理面板) 和 nginx 伪装网站\"\n    green \" 2. 升级 trojan-web 到最新版本\"\n    green \" 3. 重新申请证书\"\n    green \" 4. 查看日志, 管理用户, 查看配置等功能\"\n    red \" 5. 卸载 trojan-web 和 nginx \"\n    echo\n    green \" 6. 安装 V2ray 可视化管理面板V2-UI, 可以同时支持trojan\"\n    green \" 7. 升级 V2-UI 到最新版本\"\n    red \" 8. 卸载 V2-UI\"\n    echo\n    green \" 9. 安装 Xray 可视化管理面板 X-UI, 可以同时支持trojan\"\n    red \" 10. 升级 或 卸载 X-UI\"\n    echo\n    green \" ==================================================\"\n    red \" 以下是 VPS 测网速工具, 脚本测速会消耗大量 VPS 流量，请悉知！\"\n    green \" 40. 融合怪测评脚本 spiritLHLS/ecs \"\n    green \" 41. superspeed 三网纯测速 （全国各地三大运营商部分节点全面测速）推荐使用 \"\n    green \" 42. yet-another-bench-script 综合测试 （包含 CPU IO 测试 国际多个数据节点网速测试）推荐使用\"\n    green \" 43. 由teddysun 编写的Bench 综合测试 （包含系统信息 IO 测试 国内多个数据节点网速测试）\"\n    green \" 44. LemonBench 快速全方位测试 (包含CPU内存性能、回程、节点测速) \"\n    green \" 45. ZBench 综合网速测试 (包含节点测速, Ping 以及 路由测试)\"\n    green \" 46. testrace 回程路由测试 by nanqinlang （四网路由 上海电信 厦门电信 浙江杭州联通 浙江杭州移动 北京教育网）\"\n    green \" 47. autoBestTrace 回程路由测试 (广州电信 上海电信 厦门电信 重庆联通 成都联通 上海移动 成都移动 成都教育网)\"\n    green \" 48. 回程路由测试 推荐使用 (北京电信/联通/移动 上海电信/联通/移动 广州电信/联通/移动 )\"\n    green \" 49. 三网回程路由测试 Go 语言开发 by zhanghanyun \"\n    green \" 50. 独立服务器测试 包括系统信息和I/O测试\"\n    echo\n    green \" ==================================================\"\n    green \" 51. 测试VPS 是否支持 Netflix 非自制剧解锁 支持 WARP sock5 测试, 推荐使用 \"\n    green \" 52. 测试VPS 是否支持 Netflix, Go语言版本 推荐使用 by sjlleo, 推荐使用\"\n    green \" 53. 测试VPS 是否支持 Netflix, Disney, Hulu 等等更多流媒体平台, 新版 by lmc999\"\n    #green \" 54. 测试VPS 是否支持 Netflix, 检测IP解锁范围及对应所在的地区, 原版 by CoiaPrant\"\n\n    echo\n    green \" 61. 安装 官方宝塔面板\"\n    green \" 62. 安装 宝塔面板纯净版 by hostcli.com\"\n    green \" 63. 安装 宝塔面板破解版 7.9 by yu.al\"\n    echo\n    green \" 99. 返回上级菜单\"\n    green \" 0. 退出脚本\"\n\n    else\n\n\n    green \" ==================================================\"\n    red \" Install 3 UI admin panel below require clean VPS system. Cannot install if VPS already installed trojan or v2ray \"\n    red \" Pls remove trojan or v2ray if installed. Prefer using clean system to install UI admin panel. \"\n    red \" Trojan and v2ray UI admin panel cannot install at the same time.\"\n    echo\n    green \" 1. install trojan-web (trojan/trojan-go UI admin panel) with nginx\"\n    green \" 2. upgrade trojan-web to latest version\"\n    green \" 3. redo to request SSL certificate if you got problem with SSL\"\n    green \" 4. Show log and config, manage users, etc.\"\n    red \" 5. remove trojan-web and nginx\"\n    echo\n    green \" 6. install  V2-UI admin panel, support trojan protocal\"\n    green \" 7. upgrade V2-UI to latest version\"\n    red \" 8. remove V2-UI\"\n    echo\n    green \" 9. install X-UI admin panel, support trojan protocal\"\n    red \" 10. upgrade or remove X-UI\"\n    echo\n    green \" ==================================================\"\n    red \" VPS speedtest tools. Pay attention that speed tests will consume lots of traffic.\"\n    green \" 40. VPS_Fusion_Monster_Server_Test_Script by spiritLHLS/ecs \"\n    green \" 41. superspeed. ( China telecom / China unicom / China mobile node speed test ) \"\n    green \" 42. yet-another-bench-script ( CPU IO Memory Network speed test)\"\n    green \" 43. Bench by teddysun\"\n    green \" 44. LemonBench ( CPU IO Memory Network Traceroute test） \"\n    green \" 45. ZBench \"\n    green \" 46. testrace by nanqinlang （四网路由 上海电信 厦门电信 浙江杭州联通 浙江杭州移动 北京教育网）\"\n    green \" 47. autoBestTrace (Traceroute test 广州电信 上海电信 厦门电信 重庆联通 成都联通 上海移动 成都移动 成都教育网)\"\n    green \" 48. returnroute test (北京电信/联通/移动 上海电信/联通/移动 广州电信/联通/移动 )\"\n    green \" 49. returnroute test by zhanghanyun powered by Go (三网回程路由测试 ) \"\n    green \" 50. A bench script for dedicated servers \"\n    echo\n    green \" ==================================================\"\n    green \" 51. Netflix region and non-self produced drama unlock test, support WARP SOCKS5 proxy and IPv6\"\n    green \" 52. Netflix region and non-self produced drama unlock test by sjlleo using go language.\"\n    green \" 53. Netflix, Disney, Hulu etc unlock test by by lmc999\"\n    #green \" 54. Netflix region and non-self produced drama unlock test by CoiaPrant\"\n    echo\n    green \" 61. install official bt panel (aa panel)\"\n    green \" 62. install modified bt panel (aa panel) by hostcli.com\"\n    green \" 63. install modified bt panel (aa panel) 7.9 by yu.al\"\n    echo\n    green \" 99. Back to main menu\"\n    green \" 0. exit\"\n\n\n    fi\n\n\n    echo\n    read -p \"Please input number:\" menuNumberInput\n    case \"$menuNumberInput\" in\n        1 )\n            setLinuxDateZone\n            configInstallNginxMode=\"trojanWeb\"\n            installTrojanWeb\n        ;;\n        2 )\n            upgradeTrojanWeb\n        ;;\n        3 )\n            runTrojanWebGetSSL\n        ;;\n        4 )\n            runTrojanWebCommand\n        ;;\n        5 )\n            removeNginx\n            removeTrojanWeb\n        ;;\n        6 )\n            setLinuxDateZone\n            installV2rayUI\n        ;;\n        7 )\n            upgradeV2rayUI\n        ;;\n        8 )\n            removeV2rayUI\n        ;;\n        9 )\n            setLinuxDateZone\n            installXUI\n        ;;\n        10 )\n            removeXUI\n        ;;\n        40 )\n            vps_bench_ecs\n        ;;\n        41 )\n            vps_superspeed\n        ;;\n        42 )\n            vps_yabs\n        ;;\n        43 )\n            vps_bench\n        ;;\n        44 )\n            vps_LemonBench\n        ;;\n        45 )\n            vps_zbench\n        ;;\n        46 )\n            vps_testrace\n        ;;\n        47 )\n            vps_autoBestTrace\n        ;;\n        48 )\n            vps_returnroute\n            vps_returnroute2\n        ;;\n        49 )\n            vps_returnroute2\n        ;;\n        50 )\n            vps_bench_dedicated\n        ;;\n        51 )\n            vps_netflix_jin\n        ;;\n        52 )\n            vps_netflixgo\n        ;;\n        53 )\n            vps_netflix2\n        ;;\n        54 )\n            vps_netflix2\n        ;;\n        61 )\n            installBTPanel\n        ;;\n        62 )\n            installBTPanelCrackHostcli\n        ;;\n        63 )\n            installBTPanelCrack\n        ;;\n        81 )\n            installBBR\n        ;;\n        82 )\n            installBBR2\n        ;;\n        99)\n            start_menu\n        ;;\n        0 )\n            exit 1\n        ;;\n        * )\n            clear\n            red \"请输入正确数字 !\"\n            sleep 2s\n            startMenuOther\n        ;;\n    esac\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction start_menu(){\n    clear\n\n    if [[ $1 == \"first\" ]] ; then\n        getLinuxOSRelease\n        installSoftDownload\n    fi\n\n    if [[ ${configLanguage} == \"cn\" ]] ; then\n\n    green \" ====================================================================================================\"\n    green \" Trojan-go V2ray Xray 一键安装脚本 | 2024-3-13 | 系统支持：centos7+ / debian9+ / ubuntu16.04+\"\n    green \" ====================================================================================================\"\n    green \" 1. 安装linux内核 bbr plus, 安装WireGuard, 用于解锁 Netflix 限制和避免弹出 Google reCAPTCHA 人机验证\"\n    echo\n    green \" 2. 安装 trojan/trojan-go 和 nginx, 支持CDN 开启websocket, trojan-go 运行在443端口\"\n    green \" 3. 只安装 trojan/trojan-go 运行在443或自定义端口, 不安装nginx, 方便与现有网站或宝塔面板集成\"\n    red \" 4. 卸载 trojan/trojan-go 和 nginx\"\n    echo\n    green \" 6. 安装 Shadowsocks Rust 支持 Shadowsocks 2022 加密方式, 运行在随机端口\"\n    green \" 7. 安装 Xray Shadowsocks 支持 Shadowsocks 2022 加密方式, 运行在随机端口\"\n    red \" 8. 卸载 Shadowsocks Rust 或 Xray \"\n    echo\n    green \" 11. 安装 v2ray或xray 和 nginx ([Vmess/Vless]-[TCP/WS/gRPC/H2/QUIC]-TLS), 支持CDN, nginx 运行在443端口\"\n    green \" 12. 只安装 v2ray或xray ([Vmess/Vless]-[TCP/WS/gRPC/H2/QUIC]), 无TLS加密, 方便与现有网站或宝塔面板集成\"\n    echo\n    green \" 13. 安装 v2ray或xray (VLess-TCP-[TLS/XTLS])+(VMess-TCP-TLS)+(VMess-WS-TLS) 支持CDN, 可选安装nginx, VLess运行在443端口\"\n    green \" 14. 安装 v2ray或xray (VLess-gRPC-TLS) 支持CDN, 可选安装nginx, VLess运行在443端口\"\n    green \" 15. 安装 v2ray或xray (VLess-TCP-[TLS/XTLS])+(VLess-WS-TLS) 支持CDN, 可选安装nginx, VLess运行在443端口\"\n    green \" 16. 安装 v2ray或xray (VLess-TCP-[TLS/XTLS])+(VLess-WS-TLS)+xray自带的trojan, 支持CDN, 可选安装nginx, VLess运行在443端口\"\n    green \" 17. 安装 v2ray或xray (VLess-TCP-XTLS Vision)) 不支持CDN, 可选安装nginx, VLess运行在443端口\"\n    green \" 18. 安装 v2ray或xray (VLess-TCP-REALITY XTLS Vision)) 不支持CDN, 可选安装nginx, VLess运行在443端口\"\n    green \" 19. 升级 v2ray或xray 到最新版本\"\n    red \" 20. 卸载 v2ray或xray 和 nginx\"\n    echo\n    green \" 21. 同时安装 v2ray或xray 和 trojan-go (VLess-TCP-[TLS/XTLS])+(VLess-WS-TLS)+Trojan, 支持CDN, 可选安装nginx, VLess运行在443端口\"\n    green \" 22. 同时安装 nginx, v2ray或xray 和 trojan-go (VLess/Vmess-WS-TLS)+Trojan, 支持CDN, trojan-go运行在443端口\"\n    green \" 23. 同时安装 nginx, v2ray或xray 和 trojan-go, 通过 nginx SNI 分流, 支持CDN, 支持与现有网站共存, nginx 运行在443端口 \"\n    red \" 24. 卸载 trojan-go, v2ray或xray 和 nginx\"\n    echo\n    green \" 25. 查看已安装的配置和用户密码等信息\"\n    green \" 26. 申请免费的SSL证书\"\n    green \" 30. 子菜单 安装 trojan 和 v2ray 可视化管理面板, VPS测速工具, Netflix测试解锁工具, 安装宝塔面板等\"\n    green \" ==================================================\"\n    green \" 31. 安装DNS服务器 AdGuardHome 支持去广告\"\n    green \" 32. 给 AdGuardHome 申请免费的SSL证书, 并开启DOH与DOT\"\n    green \" 33. 安装DNS国内国外分流服务器 mosdns 或 mosdns-cn\"\n    red \" 34. 卸载 mosdns 或 mosdns-cn DNS服务器 \"\n    echo\n    green \" 41. 安装OhMyZsh与插件zsh-autosuggestions, Micro编辑器 等软件\"\n    green \" 42. 开启root用户SSH登陆, 如谷歌云默认关闭root登录,可以通过此项开启\"\n    green \" 43. 修改SSH 登陆端口号\"\n    green \" 44. 设置时区为北京时间\"\n    green \" 45. 用 VI 编辑 authorized_keys 文件 填入公钥, 用于SSH免密码登录 增加安全性\"\n    echo\n    green \" 88. 升级脚本\"\n    green \" 0. 退出脚本\"\n\n    else\n\n\n    green \" ====================================================================================================\"\n    green \" Trojan-go V2ray Xray Installation | 2024-3-13 | OS support: centos7+ / debian9+ / ubuntu16.04+\"\n    green \" ====================================================================================================\"\n    green \" 1. Install linux kernel,  bbr plus kernel, WireGuard and Cloudflare WARP. Unlock Netflix geo restriction and avoid Google reCAPTCHA\"\n    echo\n    green \" 2. Install trojan/trojan-go with nginx, enable websocket, support CDN acceleration, trojan-go running at 443 port serve TLS\"\n    green \" 3. Install trojan/trojan-go only, trojan-go running at 443(can customize port) serve TLS. Easy integration with existing website\"\n    red \" 4. Remove trojan/trojan-go and nginx\"\n    echo\n    green \" 6. Install Shadowsocks Rust\"\n    green \" 7. Install Xray Shadowsocks\"\n    red \" 8. Remove Shadowsocks Rust or Xray\"\n    echo\n    green \" 11. Install v2ray/xray with nginx, ([Vmess/Vless]-[TCP/WS/gRPC/H2/QUIC]-TLS), support CDN acceleration, nginx running at 443 port serve TLS\"\n    green \" 12. Install v2ray/xray only. ([Vmess/Vless]-[TCP/WS/gRPC/H2/QUIC]), no TLS encryption. Easy integration with existing website\"\n    echo\n    green \" 13. Install v2ray/xray (VLess-TCP-[TLS/XTLS])+(VMess-TCP-TLS)+(VMess-WS-TLS), support CDN, nginx is optional, VLess running at 443 port serve TLS\"\n    green \" 14. Install v2ray/xray (VLess-gRPC-TLS) support CDN, nginx is optional, VLess running at 443 port serve TLS\"\n    green \" 15. Install v2ray/xray (VLess-TCP-[TLS/XTLS])+(VLess-WS-TLS) support CDN, nginx is optional, VLess running at 443 port serve TLS\"\n    green \" 16. Install v2ray/xray (VLess-TCP-[TLS/XTLS])+(VLess-WS-TLS)+(xray's trojan), support CDN, nginx is optional, VLess running at 443 port serve TLS\"\n    green \" 17. Install v2ray/xray (VLess-TCP-XTLS Vision) not support CDN, nginx is optional, VLess running at 443 port serve TLS\"\n    green \" 18. Install v2ray/xray (VLess-TCP-REALITY XTLS Vision) not support CDN, nginx is optional, VLess running at 443 port serve TLS\"\n    green \" 19. Upgrade v2ray/xray to latest version\"\n    red \" 20. Remove v2ray/xray and nginx\"\n    echo\n    green \" 21. Install both v2ray/xray and trojan-go (VLess-TCP-[TLS/XTLS])+(VLess-WS-TLS)+Trojan, support CDN, nginx is optional, VLess running at 443 port serve TLS\"\n    green \" 22. Install both v2ray/xray and trojan-go with nginx, (VLess/Vmess-WS-TLS)+Trojan, support CDN, trojan-go running at 443 port serve TLS\"\n    green \" 23. Install both v2ray/xray and trojan-go with nginx. Using nginx SNI distinguish traffic by different domain name, support CDN. Easy integration with existing website. nginx SNI running at 443 port\"\n    red \" 24. Remove trojan-go, v2ray/xray and nginx\"\n    echo\n    green \" 25. Show info and password for installed trojan-go and v2ray\"\n    green \" 26. Get a free SSL certificate for one or multiple domains\"\n    green \" 30. Submenu. install trojan and v2ray UI admin panel, VPS speedtest tools, Netflix unlock tools. Miscellaneous tools\"\n    green \" ==================================================\"\n    green \" 31. Install AdGuardHome, ads & trackers blocking DNS server \"\n    green \" 32. Get free SSL certificate for AdGuardHome and enable DOH/DOT \"\n    green \" 33. Install DNS server MosDNS/MosDNS-cn\"\n    red \" 34. Remove DNS server MosDNS/MosDNS-cn\"\n\n    echo\n    green \" 41. Install Oh My Zsh and zsh-autosuggestions plugin, Micro editor\"\n    green \" 42. Enable root user login SSH, Some VPS disable root login as default, use this option to enable\"\n    green \" 43. Modify SSH login port number. Secure your VPS\"\n    green \" 44. Set timezone to Beijing time\"\n    green \" 45. Using VI open authorized_keys file, enter your public key. Then save file. In order to login VPS without Password\"\n    echo\n    green \" 88. upgrade this script to latest version\"\n    green \" 0. exit\"\n\n    fi\n\n\n    echo\n    read -p \"Please input number:\" menuNumberInput\n    case \"$menuNumberInput\" in\n        1 )\n            installWireguard\n        ;;\n        2 )\n            configInstallNginxMode=\"noSSL\"\n            isTrojanGoSupportWebsocket=\"true\"\n            installTrojanV2rayWithNginx \"trojan_nginx\"\n        ;;\n        3 )\n            installTrojanV2rayWithNginx \"trojan\"\n        ;;\n        4 )\n            removeTrojan\n            removeNginx\n        ;;\n        6 )\n            installShadowsocksRust\n        ;;\n        7 )\n            installShadowsocks\n        ;;\n        8 )\n            removeShadowsocks\n        ;;\n        11 )\n            configInstallNginxMode=\"v2raySSL\"\n            configV2rayWorkingMode=\"\"\n            installTrojanV2rayWithNginx \"nginx_v2ray\"\n        ;;\n        12 )\n            configInstallNginxMode=\"\"\n            configV2rayWorkingMode=\"\"\n            installTrojanV2rayWithNginx \"v2ray\"\n        ;;\n        13 )\n            configInstallNginxMode=\"noSSL\"\n            configV2rayWorkingMode=\"vlessTCPVmessWS\"\n            installTrojanV2rayWithNginx \"v2ray_nginxOptional\"\n        ;;\n        14 )\n            configInstallNginxMode=\"noSSL\"\n            configV2rayWorkingMode=\"vlessgRPC\"\n            installTrojanV2rayWithNginx \"v2ray_nginxOptional\"\n        ;;\n        15 )\n            configInstallNginxMode=\"noSSL\"\n            configV2rayWorkingMode=\"vlessTCPWS\"\n            installTrojanV2rayWithNginx \"v2ray_nginxOptional\"\n        ;;\n        16 )\n            configInstallNginxMode=\"noSSL\"\n            configV2rayWorkingMode=\"vlessTCPWSTrojan\"\n            installTrojanV2rayWithNginx \"v2ray_nginxOptional\"\n        ;;\n        17 )\n            configInstallNginxMode=\"noSSL\"\n            configV2rayWorkingMode=\"vlessTCPVision\"\n            installTrojanV2rayWithNginx \"v2ray_nginxOptional\"\n        ;;\n        18 )\n            configInstallNginxMode=\"noSSL\"\n            configV2rayWorkingMode=\"vlessTCPREALITY\"\n            installTrojanV2rayWithNginx \"v2ray_nginxOptional\"\n        ;;\n        19)\n            upgradeV2ray\n        ;;\n        20 )\n            removeV2ray\n            removeNginx\n        ;;\n        21 )\n            configInstallNginxMode=\"noSSL\"\n            configV2rayWorkingMode=\"trojan\"\n            installTrojanV2rayWithNginx \"v2ray_nginxOptional\"\n        ;;\n        22 )\n            configInstallNginxMode=\"noSSL\"\n            configV2rayWorkingMode=\"\"\n            configV2rayWorkingNotChangeMode=\"true\"\n            installTrojanV2rayWithNginx \"trojan_nginx_v2ray\"\n        ;;\n        23 )\n            configInstallNginxMode=\"sni\"\n            configV2rayWorkingMode=\"sni\"\n            installTrojanV2rayWithNginx \"nginxSNI_trojan_v2ray\"\n        ;;\n        24 )\n            removeV2ray\n            removeTrojan\n            removeNginx\n        ;;\n        25 )\n            cat \"${configReadme}\"\n        ;;\n        26 )\n            installTrojanV2rayWithNginx\n        ;;\n        30 )\n            startMenuOther\n        ;;\n        31 )\n            installAdGuardHome\n        ;;\n        32 )\n            getAdGuardHomeSSLCertification \"$@\"\n        ;;\n        33 )\n            installMosdns\n        ;;\n        34 )\n            removeMosdns\n        ;;\n        41 )\n            setLinuxDateZone\n            installPackage\n            installSoftEditor\n            installSoftOhMyZsh\n        ;;\n        42 )\n            setLinuxRootLogin\n            sleep 4s\n            start_menu\n        ;;\n        43 )\n            changeLinuxSSHPort\n            sleep 10s\n            start_menu\n        ;;\n        44 )\n            setLinuxDateZone\n            sleep 4s\n            start_menu\n        ;;\n        45 )\n            editLinuxLoginWithPublicKey\n        ;;\n\n\n        66 )\n            isTrojanMultiPassword=\"yes\"\n            echo \"isTrojanMultiPassword: yes\"\n            sleep 3s\n            start_menu\n        ;;\n        76 )\n            vps_returnroute\n            vps_returnroute2\n        ;;\n        77 )\n            vps_netflixgo\n            vps_netflix2\n        ;;\n        80 )\n            installPackage\n        ;;\n        81 )\n            installBBR\n        ;;\n        82 )\n            installBBR2\n        ;;\n        83 )\n            installSWAP\n        ;;\n        84 )\n            firewallForbiden\n        ;;\n        88 )\n            upgradeScript\n        ;;\n        89 )\n            generateXrayRealityPrivateKey\n        ;;\n        99 )\n            getV2rayVersion \"wgcf\"\n        ;;\n        0 )\n            exit 1\n        ;;\n        * )\n            clear\n            red \"请输入正确数字 !\"\n            sleep 2s\n            start_menu\n        ;;\n    esac\n}\n\n\n\n\n\nfunction setLanguage(){\n    echo\n    green \" ==================================================\"\n    green \" Please choose your language\"\n    green \" 1. English\"\n    green \" 2. 中文\"\n    echo\n    read -r -p \"Please input your language:\" languageInput\n\n    case \"${languageInput}\" in\n        1 )\n            echo \"en\" > ${configLanguageFilePath}\n            showMenu\n        ;;\n        2 )\n            echo \"cn\" > ${configLanguageFilePath}\n            showMenu\n        ;;\n        * )\n            red \" Please input the correct number !\"\n            setLanguage\n        ;;\n    esac\n}\n\nconfigLanguageFilePath=\"${HOME}/language_setting_v2ray_trojan.md\"\nconfigLanguage=\"cn\"\n\nfunction showMenu(){\n\n    if [ -f \"${configLanguageFilePath}\" ]; then\n        configLanguage=$(cat ${configLanguageFilePath})\n\n        case \"${configLanguage}\" in\n        cn )\n            start_menu \"first\"\n        ;;\n        en )\n            start_menu \"first\"\n        ;;\n        * )\n            setLanguage\n        ;;\n        esac\n    else\n        installPackage\n        setLanguage\n    fi\n}\n\nshowMenu\n"
        }
      ]
    }
  ]
}