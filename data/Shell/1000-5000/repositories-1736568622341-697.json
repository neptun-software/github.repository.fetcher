{
  "metadata": {
    "timestamp": 1736568622341,
    "page": 697,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "eficode-academy/git-katas",
      "stars": 1369,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coderabbit.yaml",
          "type": "blob",
          "size": 0.4033203125,
          "content": "# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json\nlanguage: \"en-US\"\nearly_access: false\nreviews:\n  profile: \"chill\"\n  request_changes_workflow: false\n  high_level_summary: true\n  poem: true\n  review_status: true\n  collapse_walkthrough: false\n  auto_review:\n    enabled: true\n    ignore_title_keywords:\n      - \"WIP\"\n      - \"DO NOT MERGE\"\n    drafts: false\nchat:\n  auto_reply: true"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.263671875,
          "content": "# EditorConfig is awesome: https://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = false\ninsert_final_newline = false\n\n[*.md]\ntrim_trailing_whitespace = true"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0546875,
          "content": "git_attributes\n*~\n*.swp\n**/exercise\n**/remote\n.DS_Store\n"
        },
        {
          "name": "3-way-merge",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) 2017 Praqma\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Overview.md",
          "type": "blob",
          "size": 3.8583984375,
          "content": "# Overview of the Git Kata Exercises\n\n## Setup\n\n1. [configure-git](configure-git/README.md) - If git is not configured, some basic configuration steps\n\n## Basic Git Katas in Suggested Order\n\n1. [basic-commits](basic-commits/README.md) - Very basic creation of commits.\n2. [basic-staging](basic-staging/README.md) - Interacting with the stage (index).\n3. [basic-branching](basic-branching/README.md) - The first stride into branching.\n4. [ff-merge](ff-merge/README.md) - A tour around the most trivial of merges.\n5. [3-way-merge](3-way-merge/README.md) - A basic merge, involving multiple diverged branches.\n6. [merge-conflict](merge-conflict/README.md) - A basic merge between diverging branches with incompatible (but simple) changesets.\n7. [merge-mergesort](merge-mergesort/README.md) - A merge conflict with actual code.\n8. [rebase-branch](rebase-branch/README.md) - Using rebase as an alternative to merging.\n9. [basic-revert](basic-revert/README.md) - Use revert to revert a change\n10. [reset](reset/README.md) - Reset is a powerful and slightly dangerous command if you do not know what you are doing. Go through the three modes of resetting here.\n11. [basic-cleaning](basic-cleaning/README.md) - Cleaning the workspace.\n12. [amend](amend/README.md) - Amending previous commits.\n13. [reorder-the-history](reorder-the-history/README.md) - We might have created our commits in a suboptimal order, practice to fix that scenario here.\n14. [squashing](squashing/README.md) - A lot of small commits is good when you are working locally, but for sharing your code, it might be more beneficial to deliver your code changes in large sets. Go here to experiment with that. Write a good commit\n15. [advanced-rebase-interactive](advanced-rebase-interactive/README.md) - Practice using the interactive rebase commands.\n16. [basic-stashing](basic-stashing/README.md) - The first stride into stashing.\n17. [ignore](ignore/README.md) - The basics of using the `.gitignore` file. And using `git rm`.\n18. [submodules](submodules/README.md) - Submodules are loathed by many. Run through this exercise to see what the ruckus is all about.\n19. [git-tag](git-tag//README.md) - Tags are convenient for keeping track of commits that bump a version number. In this exercise, you will list, add and delete tags.\n\n## Katas that solve standard problems\n\n1. [commit-on-wrong-branch](commit-on-wrong-branch/README.md) - If we accidentally put unpushed commits on the wrong branch, how do we effectively _move_ them to another branch before our work on that branch.\n2. [commit-on-wrong-branch-2](commit-on-wrong-branch-2/README.md) - Another exercise on what to do if you have accidentally committed on the wrong branch.\n3. [reverted-merge](reverted-merge/README.md) - We revert a merge, but, after fixes are added to the merged branch, we want the changes from merge and the new fixes.\n4. [save-my-commit](save-my-commit/README.md) - Should you accidentally or on purpose delete a commit, go here to try and save it. You will use the reflog.\n5. [detached-head](detached-head/README.md) - git complains that you are in a \"You are in 'detached HEAD' state\". What do you do?\n\n## Katas On Advanced features\n\n1. [git-attributes](git-attributes/README.md) - .gitattributes file allows you to specify how git handles files, such as line endings in text files or how to diff a binary file.\n2. [Bad-commit](bad-commit/README.md) - Using `git bisect` to find a bad commit.\n3. [bisect](bisect/README.md) - Another kata using `git bisect`.\n4. [pre-push](pre-push/README.md) - A quick exercise in using Git hooks.\n5. [Investigation](investigation/README.md) - Discover what is going on in a Git repo, figure out what it looks like under the hood.\n6. [Objects](objects/README.md) - A small exercise into Git internals.\n7. [merge-driver](merge-driver/README.md) - Defining a custom merge driver.\n8. [rebase-exec](rebase-exec/README.md) - Run tests on every commit using `git rebase --exec`\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.4072265625,
          "content": "---\nmaintainer: JKrag\n---\n# Git Katas\n\n## Quick Start\n\n### In the Cloud\n\n[![Open in Cloud Shell](https://gstatic.com/cloudssh/images/open-btn.svg)](https://console.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https://github.com/praqma-training/git-katas.git)\n\n### On Your Local Machine\n\n![Quick Start](/images/quickstart.gif)\n\n- Clone this repository\n- Go into the folder you want to solve an exercise in\n- Run the `setup.sh` script\n- Consult the README.md in that folder to get a description of the exercise\n\n## Purpose of Git Katas\n\nThis repository is a collection of Git exercises.\nThe concept is stolen without shame from [Schauderhaft.de](http://blog.schauderhaft.de/gitkata/).\nUnfortunately, they have not maintained the system - and we need more good Git exercises.\n\nThe exercises are designed for use when we are teaching Git courses. You should be able to use them as self-contained exercises that will allow you to keep your Git skills sharp.\n\nExercises starting with _basic_ are entry-level - other exercises vary greatly in difficulty.\n\nTo get an overview of the exercises in here look in [Overview.md](Overview.md).\n\nFeel free to use these exercises, that's why they're public!\n\n## Suggested Learning Path\n\nIf you are coming to this repository for some basic Git knowledge, we recommend going through the exercises in the following order.\nThis is the order that Jan Krag at Praqma teaches Git and might change over time. There are more exercises than this, but these should take you through\neverything you need to be able to use Git effectively in your day to day life.\n\n- [Basic Commits](./basic-commits/README.md)\n- [Basic Staging](./basic-staging/README.md)\n- [Investigation](./investigation/README.md)\n- [Basic Branching](./basic-branching/README.md)\n- [Fast Forward Merge](./ff-merge/README.md)\n- [3 way Merge](./3-way-merge/README.md)\n- [Merge Mergesort](./merge-mergesort/README.md)\n- [Rebase Branch](./rebase-branch/README.md)\n- [Basic Revert](./basic-revert/README.md)\n- [Reset](./reset/README.md)\n- [Basic Cleaning](./basic-cleaning/README.md)\n- [Amend](./amend/README.md)\n- [Reorder the History](./reorder-the-history/README.md)\n- [Advanced Rebase Interactive](./advanced-rebase-interactive/README.md)\n- [Rebase using autosquash](./rebase-interactive-autosquash/README.md)\n- [Basic Stashing](./basic-stashing/README.md)\n\nSee [Overview.md](Overview.md) for a more complete list and suggested order.\n\n## Contributing\n\nIf you miss exercises or find errors in any of them, feel free to improve them and make a pull request.\n\nYou can also make an issue so we notice an opportunity to improve!\n\nThank you!\n\n### Celebrating success\n\nOn September 6th, 2023, we reached the milestone of having 1000 stars on GitHub. Thank you all for your support! This repository would not be where it is without the valuable contributions from the community.\n\n![1000 stars](/docs/1000stars-git-katas.png)\n\n## Cheatsheet\n\nA collection of useful commands to use throughout the exercises:\n\n```shell\n# Initializing an empty git repository.\ngit init            # Initialize an empty git repository under current directory.\n\n# Cloning a repository\ngit clone https://github.com/praqma-training/git-katas.git      # Clone this repository to your current working directory\n\n# Git (user and repo level) configurations\ngit config --local user.name \"Repo-level Username\"          # For setting a local git repo level user name.\ngit config --local user.email \"Repo-level.Email@Example.com\" # For setting a local git repo level user email.\n                                                            # --global -> User level git config stored in <user-home>/.gitconfig for e.g. ~/.gitconfig\n                                                            # --local -> repo level config stored in repo's main dir under .git/config\n\n\n# See local changes\ngit status                  # Show the working tree status\ngit diff                    # Show changes current working directory (not yet staged)\ngit diff --cached           # Show changes currently staged for commit\n\n# Add files to staging (before a commit)\ngit add myfile.txt          # Add myfile.txt to stage\ngit add .                   # Add entire working directory to stage\n\n# Make a commit\ngit commit                              # Make a new commit with the changes in your staging area. This will open an editor for a commit message.\ngit commit -m \"I love documentation\"    # Make a new commit with a commit message from the command line\ngit commit -a                           # Make a new commit and automatically \"add\" changes from all known files\ngit commit -am \"I still do!\"            # A combination of the above\ngit commit --amend                      # Re-do the commit message of the previous commit (don't do this after pushing!)\n                                        #   We _never_ change \"public history\"\ngit reset <file>                        # Unstage a staged file leaving in working directory without losing any changes.\ngit reset --soft [commit_hash]          # resets the current branch to <commit>. Does not touch the staging area or the working tree at all.\n                                        # --hard mode would discard all changes.\n\n# Configuring a different editor\n## Avoid Vim but stay in terminal:\n- `git config --global core.editor nano`\n\n## For Windows:\n- Use Notepad:\n`git config --global core.editor notepad`\n\n- or for instance Notepad++:\n`git config --global core.editor \"'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"`\n\n\n# See history\ngit log             # Show commit logs\ngit log --oneline   # Formats commits to a single line (shorthand for --pretty=oneline  --abbrev-commit )\ngit log --graph     # Show a graph commits and branches\ngit log --pretty=fuller     # To see commit log details with author and committer details, if any different.\ngit log --follow <file>     # List the history of a file beyond renames\ngit log branch2..branch1    # Show commits reachable from branch1 but not from branch2\n\n# Deferring\ngit stash                               # Stash (store temporarily) changes in working branch and enable checkingout a new branch\ngit stash list                          # List stored stashes.\ngit stash apply <stash>                 # Apply given <stash>, or if none given the latest from stash list.\n\n\n# Working with Branches\ngit branch my-branch       # Create a new branch called my-branch\ngit switch my-branch     # Switch to a different branch to work on it\ngit switch -c my-branch  # Create a new branch called my-branch AND switch to it\ngit branch -d my-branch    # Delete branch my-branch that has been merged with master\ngit branch -D my-branch    # Forcefully delete a branch my-branch that hasn't been merged to master\n\n# Merging\ngit merge master         # Merge the master branch into your currently checked out branch.\ngit rebase master        # Rebase current branch on top of master branch\n\n# Working with Remotes\ngit remote              # Show your current remotes\ngit remote -v           # Show your current remotes and their URLs\ngit push                # Publish your commits to the upstream master of your currently checked out branch\ngit push -u origin my-branch  # Push newly created branch to remote repo setting up to track remote branch from origin.\n                              # No need to specify remote branch name, for e.g., when doing a 'git pull' on that branch.\ngit pull                # Pull changes from the remote to your currently checked out branch\n\n# Re/moving files under version control\ngit rm <path/to/the/file>                 # remove file and stage the change to be committed.\ngit mv <source/file> <destination/file>   # move/rename file and stage the change to be committed.\n\n# Aliases - it's possible to make aliases of frequently used commands\n#   This is often done to make a command shorter, or to add default flags\n\n# Adding a shorthand \"sw\" for \"switch\"\ngit config --global alias.sw \"switch\"\n# Usage:\ngit sw master     # Does a \"git switch master\"\n\n## Logging\ngit log --graph --oneline --all # Show a nice graph of the previous commits\n## Adding an alias called \"lol\" (log oneline..) that shows the above\ngit config --global alias.lol \"log --graph --oneline --all\"\n## Using the alias\ngit lol     # Does a \"git log --graph --oneline --all\"\n```\n\n## Testing\n\nThere is a very small test that you can run in powershell or bash.\nIt is contained in the scripts `test.sh` and `test.ps1`.\n\n### Cleanup\n\nYou can remove testing artifacts, `exercise` directories, with the git clean command:\n\n```sh\ngit clean -ffdX\n```\n"
        },
        {
          "name": "SHELL-BASICS.md",
          "type": "blob",
          "size": 1.0302734375,
          "content": "# Shell survival guide\n\n## Paths\nAll paths start from `/`\n\nWindows C: drive is thus `/c/`\n\nYour user home folder is `/c/users/myname`\n\n`~` works as a shortcut for user home folder, so:\n\n`~/projects` equals `/c/users/myname/projects`\n\n`.` is the current directory.\n\n`..` is the parent directory.\n\n## Print working directory\n`pwd`\n\nOutput:\n`/c/users/myname`\n\n## List content of folder\n`ls` (list files)\n\n`ls -l` (list files in long form)\n\n`ls -a` (list all including hidden files)\n\n## Change directory\n`cd <foldername>`\n\n`cd ..` (go up one folder)\n\n`cd project` (go into project folder)\n\n## Working with files\n\n`cat file.txt` prints content of the file.txt to screen\n\n`less file.txt` print content of file.txt page-wise. Exit with `q`.\n\n`echo \"Hello world\" > file.txt`\nWrites the string \"Hello World\" to a file.txt, overwriting current content or creating the file if needed.\n\n`echo \"More stuff\" >> file.txt` appends \"More stuff\" to the end of the file on a new line.\n\n`touch file.txt`\nCreate an empty file. If `file.txt` exists, only update its timestamp.\n"
        },
        {
          "name": "advanced-rebase-interactive",
          "type": "tree",
          "content": null
        },
        {
          "name": "alias",
          "type": "tree",
          "content": null
        },
        {
          "name": "amend",
          "type": "tree",
          "content": null
        },
        {
          "name": "bad-commit",
          "type": "tree",
          "content": null
        },
        {
          "name": "basic-branching",
          "type": "tree",
          "content": null
        },
        {
          "name": "basic-cherry-pick",
          "type": "tree",
          "content": null
        },
        {
          "name": "basic-cleaning",
          "type": "tree",
          "content": null
        },
        {
          "name": "basic-commits",
          "type": "tree",
          "content": null
        },
        {
          "name": "basic-revert",
          "type": "tree",
          "content": null
        },
        {
          "name": "basic-staging",
          "type": "tree",
          "content": null
        },
        {
          "name": "basic-stashing",
          "type": "tree",
          "content": null
        },
        {
          "name": "bisect",
          "type": "tree",
          "content": null
        },
        {
          "name": "change-author",
          "type": "tree",
          "content": null
        },
        {
          "name": "commit-on-wrong-branch-2",
          "type": "tree",
          "content": null
        },
        {
          "name": "commit-on-wrong-branch",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure-git",
          "type": "tree",
          "content": null
        },
        {
          "name": "detached-head",
          "type": "tree",
          "content": null
        },
        {
          "name": "diff-advance",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ff-merge",
          "type": "tree",
          "content": null
        },
        {
          "name": "git-attributes",
          "type": "tree",
          "content": null
        },
        {
          "name": "git-tag",
          "type": "tree",
          "content": null
        },
        {
          "name": "ignore",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "investigation",
          "type": "tree",
          "content": null
        },
        {
          "name": "lfs",
          "type": "tree",
          "content": null
        },
        {
          "name": "master-based-workflow",
          "type": "tree",
          "content": null
        },
        {
          "name": "merge-conflict",
          "type": "tree",
          "content": null
        },
        {
          "name": "merge-driver",
          "type": "tree",
          "content": null
        },
        {
          "name": "merge-mergesort",
          "type": "tree",
          "content": null
        },
        {
          "name": "objects",
          "type": "tree",
          "content": null
        },
        {
          "name": "pre-push",
          "type": "tree",
          "content": null
        },
        {
          "name": "rebase-branch",
          "type": "tree",
          "content": null
        },
        {
          "name": "rebase-exec",
          "type": "tree",
          "content": null
        },
        {
          "name": "rebase-interactive-autosquash",
          "type": "tree",
          "content": null
        },
        {
          "name": "rebase-multiple-commits",
          "type": "tree",
          "content": null
        },
        {
          "name": "reorder-the-history",
          "type": "tree",
          "content": null
        },
        {
          "name": "reset",
          "type": "tree",
          "content": null
        },
        {
          "name": "restore",
          "type": "tree",
          "content": null
        },
        {
          "name": "reverted-merge",
          "type": "tree",
          "content": null
        },
        {
          "name": "save-my-commit",
          "type": "tree",
          "content": null
        },
        {
          "name": "signed-commits",
          "type": "tree",
          "content": null
        },
        {
          "name": "squashing",
          "type": "tree",
          "content": null
        },
        {
          "name": "submodules",
          "type": "tree",
          "content": null
        },
        {
          "name": "subtree",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-all.sh",
          "type": "blob",
          "size": 1.05859375,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC1091\n\nGREEN='\\033[0;32m'\nRED='\\033[0;31m'\nRC='\\033[0m' # Reset Color\n\nbasedir=$(git rev-parse --show-toplevel)\n\nusage() {\n  echo \"Run $0 to test all kata setup.sh scripts\"\n  echo \"Override shell to test in with e.g. $0 -s zsh\"\n  exit 0\n}\n\nRUNSHELL=bash\nwhile getopts s:h option; do\n  case \"${option}\"\n    in\n      s) RUNSHELL=${OPTARG};;\n      h) usage;;\n      *) usage;;\n  esac\ndone\n\necho \"Testing all kata setup scripts\"\n\nfunction test-setup (){\n  return_code=0\n  failed=0\n  total=0\n  scripts=$(find . -name \"setup.sh\" -type f -print | sort)\n  for script in ${scripts}; do\n    ((total++))\n    cd \"$(dirname \"${script}\")\" || exit\n    $RUNSHELL  ../utils/test/test_setup.sh setup.sh 2>&1\n    exit_code=$?\n    if [ ${exit_code} -ne 0 ]; then\n      return_code=${exit_code}\n      ((failed++))\n    fi\n    cd \"$basedir\" || exit\n  done\n\n  if [ ${return_code} -ne 0 ]; then\n    echo -e \"${RED}Failed $failed${RC} of $total tests.\"\n  else\n    echo -e \"All $total tests completed ${GREEN}successfully.${RC}\"\n  fi\n  return $return_code\n}\n\ntest-setup\n"
        },
        {
          "name": "test.ps1",
          "type": "blob",
          "size": 0.240234375,
          "content": "Get-ChildItem -Attributes Directory |\n  ForEach-Object {\n    if ($(Get-ChildItem $_.Name setup.ps1))\n    {\n      Push-Location $_.Name\n      Write-Output \"`nRunning setup script for kata $($_.Name)\"\n      .\\setup.ps1\n      Pop-Location\n    }\n  }\n"
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 0.07421875,
          "content": "#!/usr/bin/env bash\n\ncd basic-commits || exit 1\n../utils/test/test_setup.sh\n"
        },
        {
          "name": "testzsh.sh",
          "type": "blob",
          "size": 0.0556640625,
          "content": "#!/usr/bin/env zsh\ncd basic-commits\nsource setup.sh\ncd .."
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}