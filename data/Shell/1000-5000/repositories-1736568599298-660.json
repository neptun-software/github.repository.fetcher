{
  "metadata": {
    "timestamp": 1736568599298,
    "page": 660,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Bhupesh-V/ugit",
      "stars": 1415,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".all-contributorsrc",
          "type": "blob",
          "size": 3.5556640625,
          "content": "{\n  \"files\": [\n    \"README.md\"\n  ],\n  \"imageSize\": 100,\n  \"commit\": false,\n  \"contributors\": [\n    {\n      \"login\": \"sharan-aithal\",\n      \"name\": \"Sharan Aithal\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/32029982?v=4\",\n      \"profile\": \"https://github.com/sharan-aithal\",\n      \"contributions\": [\n        \"code\",\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"TabulateJarl8\",\n      \"name\": \"Tabulate\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/58576759?v=4\",\n      \"profile\": \"https://tabulate.tech\",\n      \"contributions\": [\n        \"code\",\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"unixorn\",\n      \"name\": \"Joe Block\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/23920?v=4\",\n      \"profile\": \"http://unixorn.github.io\",\n      \"contributions\": [\n        \"code\",\n        \"doc\",\n        \"plugin\"\n      ]\n    },\n    {\n      \"login\": \"thecesrom\",\n      \"name\": \"César Román\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/19418023?v=4\",\n      \"profile\": \"https://thecesrom.dev/\",\n      \"contributions\": [\n        \"code\",\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"ibayramli2001\",\n      \"name\": \"Ilkin Bayramli\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/43158991?v=4\",\n      \"profile\": \"https://github.com/ibayramli2001\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"kopalchakravarty\",\n      \"name\": \"Kopal Chakravarty\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/31576619?v=4\",\n      \"profile\": \"https://github.com/kopalchakravarty\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"zora89\",\n      \"name\": \"Zorawar Purohit\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/42845567?v=4\",\n      \"profile\": \"https://www.zorawarpurohit.com\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"nalin-singh\",\n      \"name\": \"Nalin Singh\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/38408670?v=4\",\n      \"profile\": \"https://craftic.webflow.io\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"vinayaknayar\",\n      \"name\": \"vinayaknayar\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/98237998?v=4\",\n      \"profile\": \"https://github.com/vinayaknayar\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"RohitSingh107\",\n      \"name\": \"RohitSingh107\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/64142943?v=4\",\n      \"profile\": \"https://github.com/RohitSingh107\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"Theotime812\",\n      \"name\": \"Théotime Maillarbaux\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/45947878?v=4\",\n      \"profile\": \"https://github.com/Theotime812\",\n      \"contributions\": [\n        \"code\",\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"dr41d45\",\n      \"name\": \"dr41d45\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/47773787?v=4\",\n      \"profile\": \"https://github.com/dr41d45\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"T-Joseph-Kim\",\n      \"name\": \"Taebok Joseph Kim\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/116681578?v=4\",\n      \"profile\": \"https://github.com/T-Joseph-Kim\",\n      \"contributions\": [\n        \"code\"\n      ]\n    }\n  ],\n  \"contributorsPerLine\": 7,\n  \"projectName\": \"ugit\",\n  \"projectOwner\": \"Bhupesh-V\",\n  \"repoType\": \"github\",\n  \"repoHost\": \"https://github.com\",\n  \"skipCi\": true,\n  \"commitConvention\": \"angular\",\n  \"commitType\": \"docs\"\n}\n"
        },
        {
          "name": ".deepsource.toml",
          "type": "blob",
          "size": 0.0556640625,
          "content": "version = 1\n\n[[analyzers]]\nname = \"shell\"\nenabled = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.06640625,
          "content": "# Use https://github.com/github/gitignore for more gitignores\n\n\n# General\n.vscode\n.DS_Store\n.idea/\n\n##########################\n## Python\n##########################\n\n# C extensions\n*.so\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n##########################\n## IntelliJ\n##########################\n*.iml\n.idea/\n*.ipr\n*.iws\nout/\n.idea_modules/\n\n##########################\n## Eclipse\n##########################\n.metadata\n.classpath\n.project\n.settings/\nbin/\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\nlocal.properties\n.loadpath\n\n##########################\n## NetBeans\n##########################\nnbproject/private/\nbuild/\nnbbuild/\ndist/\nnbdist/\nnbactions.xml\nnb-configuration.xml\n\n##########################\n## C++\n##########################\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2783203125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at varshneybhupesh@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.2958984375,
          "content": "# Contributing to `ugit`\n\n:+1::tada: First off, thanks for taking the time to contribute! :tada::+1:\n\nMake sure you follow below guidelines before contributing.\n\n1. Raise an issue before sending any PR.\n2. Make you changes to `feature` branch.\n3. See if there is already an open PR for the same issue.\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 2.1748046875,
          "content": "FROM alpine:3.18 as ugit-ops\n\nRUN apk add --no-cache \\\n    bash \\\n    coreutils \\\n    git \\\n    ncurses \\\n    curl\n\n# Download fzf binary from GitHub, pin to 0.46.0, ugit requires minimum 0.21.0\nRUN curl -L -o fzf.tar.gz https://github.com/junegunn/fzf/releases/download/0.46.0/fzf-0.46.0-linux_amd64.tar.gz && \\\n    tar -xzf fzf.tar.gz && \\\n    mv fzf /usr/bin/\n\n# Copy only the ugit script into the container at /app\nCOPY ugit .\n\n# Set permissions and move the script to path\nRUN chmod +x ugit && mv ugit /usr/bin/\n\n# Second stage: Copy only necessary binaries and their dependencies\nFROM scratch\n\n\nLABEL description=\"Undo your last oopsie in git with ugit\"\nLABEL maintainer=\"Bhupesh Varshney <varshneybhupesh@gmail.com>\"\n\nCOPY --from=ugit-ops /usr/bin/ugit /bin/\nCOPY --from=ugit-ops /usr/bin/git /usr/bin/\nCOPY --from=ugit-ops /usr/bin/fzf /usr/bin/\nCOPY --from=ugit-ops /usr/bin/tput /usr/bin/\nCOPY --from=ugit-ops /usr/bin/nl /usr/bin/\nCOPY --from=ugit-ops /usr/bin/awk /usr/bin/\nCOPY --from=ugit-ops /usr/bin/xargs /usr/bin/\nCOPY --from=ugit-ops /usr/bin/cut /usr/bin/\nCOPY --from=ugit-ops /usr/bin/tr /usr/bin/\nCOPY --from=ugit-ops /bin/bash /bin/\nCOPY --from=ugit-ops /bin/grep /bin/\n\n# copy lib files\n\n# COPY --from=ugit-ops /usr/lib/libncursesw* /usr/lib/\nCOPY --from=ugit-ops /usr/lib/libncursesw.so.6 /usr/lib/\n\n# COPY --from=ugit-ops /usr/lib/libpcre* /usr/lib/\nCOPY --from=ugit-ops /usr/lib/libpcre2-8.so.0 /usr/lib/\n\n# COPY --from=ugit-ops /usr/lib/libreadline* /usr/lib/\nCOPY --from=ugit-ops /usr/lib/libreadline.so.8 /usr/lib/\n\nCOPY --from=ugit-ops /lib/libacl.so.1 /lib/\nCOPY --from=ugit-ops /lib/libattr.so.1 /lib/\nCOPY --from=ugit-ops /lib/libc.musl-* /lib/\nCOPY --from=ugit-ops /lib/ld-musl-* /lib/\nCOPY --from=ugit-ops /lib/libutmps.so.0.1 /lib/\nCOPY --from=ugit-ops /lib/libskarnet.so.2.13 /lib/\nCOPY --from=ugit-ops /lib/libz.so.1 /lib/\n\n# copy terminfo database\nCOPY --from=ugit-ops /etc/terminfo/x/xterm-256color /usr/share/terminfo/x/\n\n# Gib me all the colors\nENV TERM=xterm-256color\n# Let fzf know our deault shell\nENV SHELL=/bin/bash\n# Let ugit know we are running in docker\nENV UGIT_RUNNING_IN_DOCKER=true\n\nWORKDIR /app\n# Run ugit when the container launches\nENTRYPOINT [\"/bin/bash\", \"/bin/ugit\"]"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "MIT License\n\nCopyright (c) 2020 Bhupesh Varshney\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.6708984375,
          "content": "<h1 align=\"center\">ugit</h1>\n<p align=\"center\"><img align=\"center\" alt=\"ugit logo\" height=\"100px\" src=\"https://user-images.githubusercontent.com/34342551/115037937-a608d800-9eec-11eb-88a9-252da7d6f507.png\"></p>\n<h3 align=\"center\"><code>Undo your last oopsie 🙈️ in git</code></h4>\n<p align=\"center\">\n  <a href=\"https://github.com/Bhupesh-V/ugit/actions/workflows/build.yml\">\n    <img alt=\"build ugit\" src=\"https://github.com/Bhupesh-V/ugit/actions/workflows/build.yml/badge.svg\">\n  </a>\n  <a href=\"https://hub.docker.com/r/bhupeshimself/ugit\">\n    <img alt=\"Docker pulls\" src=\"https://img.shields.io/docker/pulls/bhupeshimself/ugit?logo=docker\" target=\"_blank\" />\n  </a>\n  <img alt=\"total downloads (github + brew)\" src=\"https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/Bhupesh-V/6b7b8e8576bc1ca237bffd9a344672ab/raw/ugit-downloads.json\">\n  <a href=\"\">\n    <img alt=\"platform support linux and macos\" src=\"https://img.shields.io/badge/platform-GNU/Linux %7C MacOS-blue\">\n  </a>\n  <a href=\"https://til.bhupesh.me/git/how-to-undo-anything-in-git\">\n    <img alt=\"git undo text guide\" src=\"https://img.shields.io/badge/guide-git%20undo-orange\">\n  </a>\n  <a href=\"https://twitter.com/bhupeshimself\">\n    <img alt=\"Twitter: bhupeshimself\" src=\"https://img.shields.io/twitter/follow/bhupeshimself.svg?style=social\" target=\"_blank\" />\n  </a><br><br>\n  <img align=\"center\" title=\"ugit demo: restore file to a previous commit\" alt=\"ugit demo: restore file gif\" src=\"https://user-images.githubusercontent.com/34342551/135706491-0e987e0c-3a6d-4da6-bd16-d69bb36c42a9.gif\"><br>\n</p>\n\n<h2><details><summary>More Video Demos ✨️</summary>\n\n<h4>Undo <code>git add</code></h4>\n\nhttps://user-images.githubusercontent.com/34342551/121651365-29dbdc80-cab8-11eb-8c43-6d0c4b1509ad.mp4\n\n<h4>Undo <code>git branch -D</code></h4>\n\nhttps://user-images.githubusercontent.com/34342551/121650985-c487eb80-cab7-11eb-9b6a-9257fa704d1c.mp4\n\n<h4>Undo <code>git merge</code></h4>\n\nhttps://user-images.githubusercontent.com/34342551/121651071-d9fd1580-cab7-11eb-929d-d9359a64f0eb.mp4\n\n</details></h2>\n\n## Why use `ugit`?\n\n- You accidentally ran a `git` command you wish to 'undo'.\n- You want to save time by not searching for _how to undo ..._\n- Your focus is on the problems at hand and not on Git (avoid context switching)\n\n\n### [Motivations behind writing ugit 🙇‍♂️️](https://bhupesh-v.github.io/undo-your-last-git-mistake-with-ugit)\n\n## What's in the box?\n\n`ugit`/`git-undo` supports undoing the following operations, some are a WIP. If you know of any other operations that can be undone and are not in the list, make sure to raise an issue or make a quick PR 💛️\n\n- [x] Undo `git commit`\n- [x] Undo `git add`\n- [x] Undo `git push`\n- [x] Undo `git branch -D` (branch delete)\n- [x] Undo `git pull`\n- [x] Undo `git reset`\n- [x] Undo `git tag -d` (tag delete)\n- [x] Undo `git stash apply`\n- [x] Undo `git stash pop/drop/clear`\n- [x] Undo accidental file delete (Restore a deleted file after a commit)\n- [x] Undo (Restore) a file to a previous version\n- [x] Undo `git merge`\n- [x] Undo `git cherry-pick`\n- [x] Undo `git tag`\n- [ ] Undo `git rebase`\n- [ ] Undo `git worktree remove` (recover deleted work-tree)\n\nContribute to the project by helping me with the above-mentioned tasks.\n\nIf you have any other ideas/suggestions, do send them across. [**Hop in to ugit discussions 💬️**](https://github.com/Bhupesh-V/ugit/discussions/7)\n\n## News\n\n|      When      |                                                                                  What                                                                                 |\n|:--------------:|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|  29 Oct, 2022 |  ugit crossed 1k stars                                               |\n|  02 June, 2022 | [console.dev](https://console.dev/tools/) featured [ugit](https://twitter.com/bhupeshimself/status/1532714651842396161)                                               |\n|  18 May, 2022  | I gave a talk about the git tooling ecosystem & `git undo` in [Undo git, say whaat! - **GitHub India Constellation**, May 2022](https://youtu.be/jpR9BMFmh4Y?t=15240) |\n|  12 May, 2021  | The [guide was **tweeted by GitHub**](https://twitter.com/github/status/1392207961355862018?s=20) (I was logging my research process there while building ugit)       |\n| 30 April, 2021 | Featured on [**Changelog News**](https://changelog.com/news/ugit-helps-you-undo-your-last-git-command-with-grace-8X6L)                                                |\n\n## Community\n\n- Alexander Alemayhu made a YouTube tutorial on [Undoing Your Last Git Commit with Ugit](https://www.youtube.com/watch?v=nUnCgKb4tSc)\n\n\n## Installation\n\n[Try `ugit` via Docker](https://hub.docker.com/r/bhupeshimself/ugit):\n\n```bash\ndocker pull bhupeshimself/ugit\ndocker run --rm -it -v $(pwd):/app bhupeshimself/ugit\n```\n\n### Prerequisites\n\n**ugit** dependencies:\n\n- **Bash** >= `4.x.x`\n- **Git** >= `2.23.0`\n- [**fzf**](https://github.com/junegunn/fzf) >= `0.21.0` - [Installation guide](https://github.com/junegunn/fzf#installation)\n- GNU utils like `awk`, `grep`, `tput` etc\n\n<br>\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/ugit.svg)](https://repology.org/project/ugit/versions)\n\n\n### Linux\n\n```bash\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/Bhupesh-V/ugit/master/install)\"\n```\n\nArch Linux users can install [**ugit via AUR**](https://aur.archlinux.org/packages/ugit).\n\n### Mac\n\n```bash\nbrew install ugit\n```\n\n### Windows\n\nTo use ugit on Windows you need to install:\n\n1. Git Bash<br>\n   Git bash comes with git (if you have installed it on your machine then no need). To install git (preferably with scoop):\n    ```\n    scoop install git\n    ```\n2. FZF \n   ```\n   scoop install fzf\n   ```\n   Alternatively, with Chocolatey:\n   \n   ```\n   choco install fzf\n   ```\n3. To use bash in terminal change your directory to `**git\\2.35.3.windows.1\\bin\\bash**` accordingly.\n4. Then either clone the repo,\n   ```bash\n   git clone https://github.com/Bhupesh-V/ugit.git\n   ```\n   or get it using curl:\n   ```bash\n   sh -c \"$(curl -fsSL https://raw.githubusercontent.com/Bhupesh-V/ugit/master/install)\"\n   ```\n\n### Fig\n\n[Fig](https://fig.io) adds apps, shortcuts, and autocomplete to your existing terminal.\n\nInstall `ugit` in just one click.\n\n<a href=\"https://fig.io/plugins/other/ugit_Bhupesh-V\" target=\"_blank\"><img src=\"https://fig.io/badges/install-with-fig.svg\" /></a>\n\n\n### ZSH Frameworks\n\n#### Zgenom\n\nIf you're using [Zgenom](https://github.com/jandamm/zgenom):\n\n1. Add `zgenom load Bhupesh-V/ugit` to your `.zshrc` along with your other `zgenom load` commands.\n2. `zgenom reset && zgenom save`\n\n#### Antigen\n\nIf you're using [Antigen](https://github.com/zsh-users/antigen):\n\n1. Add `antigen bundle Bhupesh-V/ugit` to your `.zshrc` where you've listed your other plugins.\n2. Close and reopen your Terminal/iTerm window to **refresh context** and use the plugin. Alternatively, you can run `antigen bundle Bhupesh-V/ugit` in a running shell to have `antigen` load the new plugin.\n\n#### Oh-My-ZSH\n\nIf you're using [oh-my-zsh](github.com/robbyrussell/oh-my-zsh):\n\n1. Clone the repository into a new `ugit` directory in oh-my-zsh's plugin folder:\n\n    `git clone https://github.com/Bhupesh-V/ugit.git $ZSH_CUSTOM/plugins/ugit`\n\n2. Edit your `~/.zshrc` and add `ugit` – same as clone directory – to the list of plugins to enable:\n\n    `plugins=( ... ugit )`\n\n3. Then, restart your terminal application to **refresh context** and use the plugin. Alternatively, you can source your current shell configuration:\n\n    `source ~/.zshrc`\n\n\n\n## Please read ⚠️\n\nGit comes with a garbage collector ([in case you didn't know](https://git-scm.com/docs/git-gc)) therefore undoing some commands will become impossible if the entries are deleted from the reflog.\nOne way to prevent this is to increase default time limits before the reflog entries expire.\n\nAdd these configurations in your global `.gitconfig` file:\n\n```gitconfig\n[gc]\n    # default 90 days\n    reflogExpire = 200\n```\nUsed to set how long records in a branch reflog should be preserved.\n\n```gitconfig\n[gc]\n    # default 30 days\n    reflogExpireUnreachable = 90\n\n```\nUsed to set how long inaccessible reflog records should be preserved.\n\n## Not satisfied? 😒️\n\nYou can read my in-process guide on [**How to undo anything in Git**](https://bhupesh.gitbook.io/notes/git/how-to-undo-anything-in-git)\n\n## Credit & Thanks\nTo all the SO threads that I will probably never visit again ;)\n\n## ☺️ Show your support\n\nSupport me by giving a ⭐️ if this project helped you! or just [![Twitter URL](https://img.shields.io/twitter/url?style=social&url=https%3A%2F%2Fgithub.com%2FBhupesh-V%2Fugit%2F)](https://twitter.com/intent/tweet?url=https://github.com/Bhupesh-V/ugit&text=ugit%20via%20@bhupeshimself)\n\n[![Support via PayPal](https://cdn.rawgit.com/twolfson/paypal-github-button/1.0.0/dist/button.svg)](https://www.paypal.me/BhupeshVarshney/)\n\n## 📝 License\n\nCopyright © 2021 [Bhupesh Varshney](https://github.com/Bhupesh-V).<br />\nThis project is [MIT](https://github.com/Bhupesh-V/ugit/blob/master/LICENSE) licensed.\n\n## 👋 Contributing\n\nPlease read the [CONTRIBUTING](CONTRIBUTING.md) file for the process of submitting pull requests to us.\n\n## Contributors ✨\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/sharan-aithal\"><img src=\"https://avatars.githubusercontent.com/u/32029982?v=4?s=100\" width=\"100px;\" alt=\"Sharan Aithal\"/><br /><sub><b>Sharan Aithal</b></sub></a><br /><a href=\"https://github.com/Bhupesh-V/ugit/commits?author=sharan-aithal\" title=\"Code\">💻</a> <a href=\"https://github.com/Bhupesh-V/ugit/commits?author=sharan-aithal\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://tabulate.tech\"><img src=\"https://avatars.githubusercontent.com/u/58576759?v=4?s=100\" width=\"100px;\" alt=\"Tabulate\"/><br /><sub><b>Tabulate</b></sub></a><br /><a href=\"https://github.com/Bhupesh-V/ugit/commits?author=TabulateJarl8\" title=\"Code\">💻</a> <a href=\"#platform-TabulateJarl8\" title=\"Packaging/porting to new platform\">📦</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://unixorn.github.io\"><img src=\"https://avatars.githubusercontent.com/u/23920?v=4?s=100\" width=\"100px;\" alt=\"Joe Block\"/><br /><sub><b>Joe Block</b></sub></a><br /><a href=\"https://github.com/Bhupesh-V/ugit/commits?author=unixorn\" title=\"Code\">💻</a> <a href=\"https://github.com/Bhupesh-V/ugit/commits?author=unixorn\" title=\"Documentation\">📖</a> <a href=\"#plugin-unixorn\" title=\"Plugin/utility libraries\">🔌</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://thecesrom.dev/\"><img src=\"https://avatars.githubusercontent.com/u/19418023?v=4?s=100\" width=\"100px;\" alt=\"César Román\"/><br /><sub><b>César Román</b></sub></a><br /><a href=\"https://github.com/Bhupesh-V/ugit/commits?author=thecesrom\" title=\"Code\">💻</a> <a href=\"https://github.com/Bhupesh-V/ugit/issues?q=author%3Athecesrom\" title=\"Bug reports\">🐛</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ibayramli2001\"><img src=\"https://avatars.githubusercontent.com/u/43158991?v=4?s=100\" width=\"100px;\" alt=\"Ilkin Bayramli\"/><br /><sub><b>Ilkin Bayramli</b></sub></a><br /><a href=\"#platform-ibayramli2001\" title=\"Packaging/porting to new platform\">📦</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kopalchakravarty\"><img src=\"https://avatars.githubusercontent.com/u/31576619?v=4?s=100\" width=\"100px;\" alt=\"Kopal Chakravarty\"/><br /><sub><b>Kopal Chakravarty</b></sub></a><br /><a href=\"https://github.com/Bhupesh-V/ugit/commits?author=kopalchakravarty\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.zorawarpurohit.com\"><img src=\"https://avatars.githubusercontent.com/u/42845567?v=4?s=100\" width=\"100px;\" alt=\"Zorawar Purohit\"/><br /><sub><b>Zorawar Purohit</b></sub></a><br /><a href=\"https://github.com/Bhupesh-V/ugit/commits?author=zora89\" title=\"Documentation\">📖</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://craftic.webflow.io\"><img src=\"https://avatars.githubusercontent.com/u/38408670?v=4?s=100\" width=\"100px;\" alt=\"Nalin Singh\"/><br /><sub><b>Nalin Singh</b></sub></a><br /><a href=\"https://github.com/Bhupesh-V/ugit/commits?author=nalin-singh\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vinayaknayar\"><img src=\"https://avatars.githubusercontent.com/u/98237998?v=4?s=100\" width=\"100px;\" alt=\"vinayaknayar\"/><br /><sub><b>vinayaknayar</b></sub></a><br /><a href=\"https://github.com/Bhupesh-V/ugit/commits?author=vinayaknayar\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/RohitSingh107\"><img src=\"https://avatars.githubusercontent.com/u/64142943?v=4?s=100\" width=\"100px;\" alt=\"RohitSingh107\"/><br /><sub><b>RohitSingh107</b></sub></a><br /><a href=\"#platform-RohitSingh107\" title=\"Packaging/porting to new platform\">📦</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Theotime812\"><img src=\"https://avatars.githubusercontent.com/u/45947878?v=4?s=100\" width=\"100px;\" alt=\"Théotime Maillarbaux\"/><br /><sub><b>Théotime Maillarbaux</b></sub></a><br /><a href=\"https://github.com/Bhupesh-V/ugit/commits?author=Theotime812\" title=\"Code\">💻</a> <a href=\"https://github.com/Bhupesh-V/ugit/issues?q=author%3ATheotime812\" title=\"Bug reports\">🐛</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dr41d45\"><img src=\"https://avatars.githubusercontent.com/u/47773787?v=4?s=100\" width=\"100px;\" alt=\"dr41d45\"/><br /><sub><b>dr41d45</b></sub></a><br /><a href=\"https://github.com/Bhupesh-V/ugit/commits?author=dr41d45\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/T-Joseph-Kim\"><img src=\"https://avatars.githubusercontent.com/u/116681578?v=4?s=100\" width=\"100px;\" alt=\"Taebok Joseph Kim\"/><br /><sub><b>Taebok Joseph Kim</b></sub></a><br /><a href=\"https://github.com/Bhupesh-V/ugit/commits?author=T-Joseph-Kim\" title=\"Code\">💻</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n"
        },
        {
          "name": "git-undo",
          "type": "blob",
          "size": 0.00390625,
          "content": "ugit"
        },
        {
          "name": "install",
          "type": "blob",
          "size": 4.3173828125,
          "content": "#!/bin/env sh\n\n# Script for installing ugit (git undo)\n#\n# This script can be executed via \n# curl:\n#   sh -c \"$(curl -fsSL https://raw.githubusercontent.com/Bhupesh-V/ugit/master/install)\"\n# or wget:\n#   sh -c \"$(wget -qO- https://raw.githubusercontent.com/Bhupesh-V/ugit/master/install)\"\n# or httpie:\n#   sh -c \"$(http --download https://raw.githubusercontent.com/Bhupesh-V/ugit/master/install)\"\n\nstatus_check() {\n    if command -v ugit 2>&1 > /dev/null; then\n        printf \"\\n\\t%s\\n\" \"You already have ${BOLD}ugit${RESET} installed.\"\n        printf \"\\n\\t%s\\n\" \"Run ${BOLD}git undo${RESET} everytime you make a git mistake :)\"\n        exit 0\n    fi\n}\n\ninstalled() {\n    cmd=$(command -v \"${1}\")\n    return ${?}\n}\n\ndie() {\n    >&2 echo \"Fatal: $*\"\n    exit 1\n}\n\n# TODO\n# check if correct version of fzf is there\n# check if correct version of git is there\n# check if correct version of bash is there\n\ncheck_dependencies() {\n    if ! command -v git > /dev/null 2>&1; then\n        printf \"\\n%s\\n\" \"${BOLD}Can't work without git 😞. Please install git version >=2.30.0${RESET}\"\n        exit 1\n    fi\n    if ! command -v fzf > /dev/null 2>&1; then\n        printf \"\\n%s\\n\" \"${BOLD}Can't work without fzf 😞. Please install fzf version >=0.21.0${RESET}\"\n        exit 1\n    fi\n    if ! command -v bash > /dev/null 2>&1; then\n        printf \"\\n%s\\n\" \"${BOLD}Can't work without bash 😞. Please install bash version >=4${RESET}\"\n        exit 1\n    fi\n\n    DEPS=\"\"\n    DEPS=\"${DEPS} awk\" \n    DEPS=\"${DEPS} xargs\"\n    DEPS=\"${DEPS} cut\"\n    DEPS=\"${DEPS} nl\"\n    DEPS=\"${DEPS} tr\"\n\n    for DEP in ${DEPS}; do\n        installed ${DEP} || die \"Missing GNU Utility: '${DEP}'\"\n    done\n}\n\nset_permissions(){\n    if [ -f ugit ] && ! chmod +x ugit; then\n        printf \"\\n%s\\n\" \"Unknown error while installing ugit\"\n        exit 1\n    fi\n    move_to_path\n}\n\nmove_to_path(){\n    printf \"%s\\n\" \"We require some permissions to move ugit to /usr/bin\"\n\n    if sudo mv ugit /usr/bin; then\n        sudo ln -s ugit /usr/bin/git-undo\n    else\n        printf \"\\n%s\\n\" \"Unknown error while installing ugit\"\n        exit 1\n    fi\n}\n\ndownload_ugit(){\n    UGIT_HOST=\"https://github.com/Bhupesh-V/ugit/releases/latest/download/ugit\"\n\n    printf \"\\n%s\\n\" \"Downloading ugit from ${BOLD}$UGIT_HOST${RESET} ...\"\n\n    if curl -fsSL $UGIT_HOST -o ugit; then\n        set_permissions\n    else\n        printf \"\\n%s\\n\" \"Unknown error while downloading ugit\"\n        exit 1\n    fi\n}\n\nconfig_check() {\n    reflogExpire=$(git config --get gc.reflogExpire)\n    if [ \"$reflogExpire\" = \"\" ] ; then\n        printf \"%s\\n\" \"Setting ${BOLD}gc.reflogExpire${RESET} to 200 days\"\n        if ! git config --global gc.reflogExpire 200; then\n            printf \"%s\\n\" \"Unexpected error while setting up gitconfig\"\n            exit 1\n        fi\n    elif [ \"$reflogExpire\" -lt 200 ]; then\n        printf \"%s\\n\" \"ugit recommends increasing ${BOLD}gc.reflogExpire${RESET} config duration to 200 days.\"\n    fi\n\n    reflogExpireUnreachable=$(git config --get gc.reflogExpireUnreachable)\n    if [ \"$reflogExpireUnreachable\" = \"\" ]; then\n        printf \"%s\\n\" \"Setting ${BOLD}gc.reflogExpireUnreachable${RESET} to 90 days\"\n        if ! git config --global gc.reflogExpireUnreachable 90; then\n            printf \"%s\\n\" \"Unexpected error while setting up gitconfig\"\n            exit 1\n        fi\n    elif [ \"$reflogExpireUnreachable\" -lt 90 ]; then\n        printf \"%s\\n\" \"ugit recommends increasing ${BOLD}gc.reflogExpireUnreachable${RESET} config duration to 90 days.\"\n    fi\n}\n\nmain () {\n\n    status_check\n    check_dependencies\n    download_ugit\n    config_check\n\n    printf \"${BOLD}${ORANGE_FG}%s\\n\" \"\"\n    printf \"%s\\n\" \"             _ _    \"\n    printf \"%s\\n\" \" _   _  __ _(_| |_  \"\n    printf \"%s\\n\" \"| | | |/ _\\` | | __| \"\n    printf \"%s\\n\" \"| |_| | (_| | | |_  \"\n    printf \"%s\\n\" \" \\__,_|\\__, |_|\\__| \"\n    printf \"%s\\n\" \"       |___/        \"\n    printf \"${RESET}\\n%s\" \"\"\n\n    printf \"\\t\\t%s\\n\" \".... is now installed 👍\"\n    printf \"\\n%s\" \"Run ${BOLD}ugit --help${RESET} for any help & assistance\"\n    printf \"\\n%s\\n\" \"Use ${BOLD}${ORANGE_FG}git undo${RESET} or ${BOLD}${ORANGE_FG}ugit${RESET} everytime you make a git mistake :)\"\n\n}\n\n# check if tput exists\nif ! command -v tput > /dev/null 2>&1; then\n    # tput could not be found :(\n    BOLD=\"\"\n    RESET=\"\"\n    ORANGE_FG=\"\"\nelse\n    BOLD=$(tput bold)\n    RESET=$(tput sgr0)\n    ORANGE_FG=$(tput setaf 208)\nfi\n\nmain\n"
        },
        {
          "name": "ugit",
          "type": "blob",
          "size": 20.7841796875,
          "content": "#!/usr/bin/env bash\n\n# ugit: Undo git commands with ease. Powered by FZF\n\nset -uo pipefail;\n\nSCRIPT_NAME=\"$0\"\nSCRIPT_URL=\"https://github.com/Bhupesh-V/ugit/releases/latest/download/ugit\"\nTMP_FILE=\"/tmp/ugit.sh\"\nVERSION=\"5.8\"\n\npointer=\"\"\nBOLD_ORG_FG=$(tput bold)$(tput setaf 208)\nBOLD=$(tput bold)\nRESET=$(tput sgr0)\n\ndisplay_menu() {\n    printf \"%s\\n\" \"Undo ${BOLD_ORG_FG}git commit${RESET}\"\n    printf \"%s\\n\" \"Undo ${BOLD_ORG_FG}git push${RESET}\"\n    printf \"%s\\n\" \"Undo ${BOLD_ORG_FG}git add${RESET}\"\n    printf \"%s\\n\" \"Undo ${BOLD_ORG_FG}git pull${RESET}\"\n    printf \"%s\\n\" \"Undo/Change git commit message\"\n    printf \"%s\\n\" \"Undo local branch delete ${BOLD_ORG_FG}git branch -d${RESET}\"\n    printf \"%s\\n\" \"Undo ${BOLD_ORG_FG}git reset${RESET}\"\n    printf \"%s\\n\" \"Undo a Merge with Conflicts\"\n    printf \"%s\\n\" \"Undo an Unpushed Merge Commit\"\n    printf \"%s\\n\" \"Undo a Pushed Merge Commit\"\n    printf \"%s\\n\" \"Undo ${BOLD_ORG_FG}git stash pop/drop/clear${RESET}\"\n    printf \"%s\\n\" \"Undo ${BOLD_ORG_FG}git stash apply${RESET}\"\n    printf \"%s\\n\" \"Undo tag delete ${BOLD_ORG_FG}git tag -d${RESET}\"\n    printf \"%s\\n\" \"Undo ${BOLD_ORG_FG}git rebase${RESET}\"\n    printf \"%s\\n\" \"Undo/Recover commited file delete\"\n    printf \"%s\\n\" \"Undo/Recover uncommited file delete\"\n    printf \"%s\\n\" \"Undo/Restore file to a previous commit\"\n    printf \"%s\\n\" \"Undo ${BOLD_ORG_FG}git cherry-pick${RESET}\"\n    printf \"%s\\n\" \"Undo all current uncommited changes\"\n    printf \"%s\\n\" \"Undo ${BOLD_ORG_FG}git tag${RESET}\"\n    printf \"%s\\n\" \"Undo ${BOLD_ORG_FG}git rm${RESET}\"\n}\n\nperror() {\n    printf \"%s\\n\" \"$(tput bold)$(tput setaf 196)ugit error${RESET}: $1\"\n    printf \"%s\\n\" \"If you think this is a Ugit bug, please follow this link to report it:\"\n    printf \"%s\\n\" \"${BOLD_ORG_FG}https://github.com/Bhupesh-V/ugit/issues/new?template=bug-report.yml${RESET}\"\n    exit\n}\n\nundo_git_commit() {\n    # undo last commit (don't unstage everything)\n    # git reset --soft HEAD^\n    commit=$(git log --color --oneline | fzf --ansi --height 80% \\\n        --reverse --multi --header=\"Choose commit to undo\" \\\n        --preview \"echo {} | cut -d' ' -f1 | xargs -I{} git show --color --pretty=format:%b {}\" \\\n        --bind 'j:down,k:up,ctrl-j:preview-down,ctrl-k:preview-up,ctrl-space:toggle-preview' --preview-window right:60% \\\n        | awk '{print $1}')\n\n    # exit if no commit selected\n    [ -z \"$commit\" ] && exit\n\n    last_commit=$(git log --format=\"%h\" -n 1)\n    initial_commit=$(git rev-list --max-parents=0 --abbrev-commit HEAD)\n\n    if [[ \"$last_commit\" == \"$commit\" ]]; then\n        # If the last commit is the same as the initial commit, delete reference to the branch(update-ref) and unstage changes of the initial commit(git rm).\n        # This will not delete the files from your working directory\n        if [[ \"$last_commit\" == \"$initial_commit\" ]]; then\n            if git update-ref -d HEAD && git rm --cached -rf . > /dev/null 2>&1; then\n                printf \"%s\\n\" \"Initial commit: $initial_commit successfully undone. Commit state is clean.\"\n            else\n                perror \"Error: Failed to revert initial commit\"\n                exit\n            fi\n        elif git reset HEAD~; then\n            printf \"%s\\n\" \"Commit: $last_commit successfully undone\"\n        else \n            perror \"Failed to revert commit $last_commit\"\n            exit\n        fi\n    elif git revert \"$commit\"; then\n        printf \"%s\\n\" \"Commit: $commit successfully reverted. Check ${BOLD_ORG_FG}git status${RESET}\"\n    else \n        perror \"Error: unable to perfom operation\"\n    fi\n\n}\n\ndo_git_reset() {\n    # FROM: https://stackoverflow.com/questions/1223354/undo-git-pull-how-to-bring-repos-to-old-state\n    FZF_HEADER=${1:-\"Choose last good branch commit\"}\n    last_good_state=$(git reflog | fzf --ansi --height 20% --reverse --header=\"$FZF_HEADER\" | awk '{print $1}')\n    # check if working tree is clean or not\n    [[ $(git status --porcelain 2>/dev/null) != \"\" ]] && read -p \"You have uncommited changes, still proceed? [Y/n]: \" -n 1 -r USER_INPUT\n    USER_INPUT=${USER_INPUT:-Y}\n    [[ \"$USER_INPUT\" == Y ]] && git reset --hard \"$last_good_state\" || perror \"Error: unable to perform reset operation\"\n}\n\nundo_git_add() {\n    # show prompt to unstage files interactively\n    readarray -t choices < <(git ls-files 2> /dev/null | fzf --height 10% --reverse --multi \\\n        --marker='🢂 ' --color 'marker:#B8CC52' \\\n        --prompt=\"Choose files to unstage: \" \\\n        --header=\"Use TAB to select multiple files\")\n\n    if [[ ${#choices[@]} -gt 0 ]] && git restore --staged \"${choices[@]}\"; then\n        printf \"%s\\n\" \"Done 👍️\"\n    else\n        perror \"Error: unable to perform operation\"\n    fi\n}\n\nchange_commit_message() {\n    printf \"%s: %s\\n\" \"Your last commit\" \"$(git --no-pager log --color --oneline -1)\"\n    printf \"%s\" \"Enter New Commit Message (Ctrl+d to save):\"\n    msg=$(</dev/stdin)\n    echo\n    [[ \"$msg\" != \"\" ]] && git commit --amend -m \"$msg\" && printf \"%s\\n\" \"Remember to run ${BOLD_ORG_FG}git push -f <remoteName> <branchName>${RESET} if this was a pushed commit\" \\\n    || perror \"Empty Commit string!\"\n}\n\nundo_git_push() {\n    commit=$(git log --oneline | fzf --ansi --height 10% --reverse --multi --header=\"Choose Commit to revert/undo\" | awk '{print $1}')\n    if git revert \"$commit\"; then\n        printf \"%s\\n\" \"Commit: $commit successfully reverted.\"\n        printf \"%s\\n\" \"Make sure to run ${BOLD_ORG_FG}git push${RESET} now!\"\n    else\n        perror \"Error: unable to perform operation\"\n    fi\n}\n\nundo_branch_delete() {\n    # undo local branch delete\n    last_branch_commit=$(git reflog | fzf --ansi --height 20% --reverse --multi \\\n        --header=\"Choose last good branch commit\" --prompt=\"ugit can only branches deleted locally\" | awk '{print $1}')\n\n    read -p \"Enter Branch Name: \" -r BRANCH_NAME\n    if [ -n \"$BRANCH_NAME\" ] && git checkout -b \"$BRANCH_NAME\" \"$last_branch_commit\"; then\n        printf \"%s\\n\" \"Branch $BRANCH_NAME successfully recovered 👍️\"\n    else\n        perror \"Failed to recover branch $BRANCH_NAME\"\n    fi\n}\n\nundo_git_reset() {\n    LAST_GOOD_STATE=$(git reflog | fzf --ansi --height 20% --reverse --multi --header=\"Choose last known good commit\" | awk '{print $1}')\n    if [[ -n \"$LAST_GOOD_STATE\" ]] && git reset \"$LAST_GOOD_STATE\"; then\n        printf \"%s\\n\" \"Reset to $LAST_GOOD_STATE 👍️\"\n    else \n        perror \"Unable to reset state\"\n    fi\n}\n\nundo_git_merge() {\n    # Undoing a git merge is a messy business\n    printf \"%s\\n\" \"Tips: \"\n    printf \"%s\\n\" \"Do a revert of the previous revert if the faulty side branch was fixed by adding corrections on top\"\n    printf \"%s\\n\" \"Re-merge the result branch if the faulty side branch (discarded by an earlier revert of a merge) was rebuilt from scratch (i.e. rebasing and fixing)\"\n    if [[ \"$1\" == \"conflicts\" ]]; then\n        git merge --abort\n    elif [[ \"$1\" == \"unpushed\" ]]; then\n        # FROM: https://stackoverflow.com/questions/1223354/undo-git-pull-how-to-bring-repos-to-old-state\n        # last_good_state=$(git reflog | fzf --ansi --height 20% --reverse --header=\"Choose the merge commit\" | awk '{print $1}')\n        # check if working tree is clean or not\n        [[ $(git status --porcelain 2>/dev/null) != \"\" ]] && read -p \"You have uncommited changes, still proceed? [Y/n]: \" -n 1 -r USER_INPUT\n        USER_INPUT=${USER_INPUT:-Y}\n        # ref: ORIG_HEAD points to the original commit from before the merge\n        if [[ \"$USER_INPUT\" == Y ]]; then\n            if git reset --merge ORIG_HEAD; then\n                printf \"Operation completed successfully\"\n            else\n                perror \"Unable to revert merge commit\"\n            fi\n        else\n            exit\n        fi\n        # [[ \"$USER_INPUT\" == Y ]] && git reset --merge \"$last_good_state\" || exit 0\n    else\n        default_branch=$(git remote show origin | awk '/HEAD/ {print $3}')\n        printf \"%s\\n\" \"Switching to default branch $default_branch\"\n        git checkout \"$default_branch\"\n        commit=$(git log --oneline | fzf --ansi --height 10% --reverse --header=\"Choose the merge commit\" | awk '{print $1}')\n        if git revert -m 1 \"$commit\"; then\n            printf \"%s\\n\" \"Merge ($commit) successfully reverted 👍️\"\n        else perror \"Unable to revert merge commit\"\n        fi\n    fi\n}\n\nrecover_lost_stash() {\n    LOST_STASH=$(git fsck --no-progress --unreachable | \n        awk '/commit/ {print $3}' | \n        xargs git log --color --oneline --merges --no-walk \n    )\n\n    if [ -z \"$LOST_STASH\" ]; then\n        printf \"%s\\n\"  \"No unreachable commits found. Exiting...\"\n        exit\n    fi\n\n    STASH=$(echo \"$LOST_STASH\" | fzf --ansi --height 20% --reverse --header=\"Choose commit associated with stash\" | awk '{print $1}')\n\n    read -p \"Enter Stash Description: \" -r STASH_MSG\n\n    if git update-ref refs/stash \"$STASH\" --create-reflog -m \"$STASH_MSG\"; then\n        printf \"%s\\n\" \"Stash Successfully Recovered 👍️\"\n    else\n        perror \"Unable to recover stash\"\n    fi\n}\n\nundo_git_stash_apply() {\n    # check if diff coloring is set to auto in git config, \n    # if not the reverse apply command will fail\n    is_diff_color=$(git config --get color.diff | tr -d '\\n')\n    if [[ \"$is_diff_color\" == \"auto\" ]]; then\n        if git stash show -p | git apply --reverse; then\n            printf \"%s\\n\" \"Done 👍️\"\n        fi\n    else\n        perror \"Undoing git stash apply failed\"\n        printf \"%s\\n\" \"Please change diff color to auto in .gitconfig & run ugit again\"\n        printf \"%s\\n\" \"Or use the following command ${BOLD}git config --global color.diff \\\"auto\\\"${RESET}\"\n    fi\n}\n\nrecover_deleted_tag() {\n    # only works for annotated tags? :(\n    printf \"%s\\n\\n\" \"Note: Only annotated tags can be restored\"\n\n    read -p \"Enter lost Tag name (e.g v1.2): \" -r TAG_NAME\n    COMMIT=$(git fsck --no-progress --unreachable --tags | awk '/tagged/ {print $6}')\n\n    [[ -z \"$COMMIT\" ]] && printf \"%s\\n\" \"Unable to find any deleted tags :(\" && exit 1\n\n    OBJECT_TYPE=$(git cat-file -t \"$COMMIT\")\n    DELETED_TAG=$(git cat-file -p \"$COMMIT\" | awk '/tag / {print$2;exit;}')\n\n    if [[ \"$OBJECT_TYPE\" == \"tag\" && \"$DELETED_TAG\" != \"$TAG_NAME\" ]]; then\n        printf \"%s\" \"Input tag name $TAG_NAME doesn't match with previously deleted tag $DELETED_TAG\"\n    elif git update-ref refs/tags/\"$TAG_NAME\" --create-reflog \"$COMMIT\"; then\n        printf \"%s\\n\" \"Tag $TAG_NAME Successfully Recovered 👍️\"\n    else\n        perror \"Unable to recover deleted tag $TAG_NAME\"\n    fi\n}\n\nundo_file_delete() {\n    if [[ \"$1\" = \"uncommited\" ]]; then\n        # user didn't commit the file deletion\n        DELETED_FILE=$(git ls-files -d | fzf --ansi --height 20% --reverse --header=\"Choose deleted file to recover\" | awk '{print $1}')\n        if git checkout HEAD \"$DELETED_FILE\"; then\n            printf \"%s\\n\" \"${BOLD}$DELETED_FILE${RESET} Successfully Recovered 👍️\"\n            exit 0\n        else\n            perror \"Unable to recover ${BOLD}$DELETED_FILE${RESET}\"\n        fi\n    elif [[ \"$1\" = \"commited\" ]]; then\n        read -p \"Enter complete filename: \" -r FILENAME\n        COMMIT=$(git log --color --diff-filter=D --oneline | fzf --ansi --height 50% \\\n            --reverse --prompt=\"Choose commit that deleted ${BOLD_ORG_FG}$FILENAME${RESET}: \" \\\n            --header=\"Use ctrl-j/ctrl-k to navigate file preview. ctrl+space to toggle preview\" \\\n            --preview \"echo {} | cut -d' ' -f1 | xargs -I{} git show --color --pretty=format:%b {}\" \\\n            --bind 'j:down,k:up,ctrl-j:preview-down,ctrl-k:preview-up,ctrl-space:toggle-preview' --preview-window right:50% \\\n            | awk '{print $1}')\n\n        [[ -z \"$COMMIT\" ]] && exit\n\n        if git checkout \"$COMMIT\"~1 -- \"$FILENAME\"; then\n            printf \"%s\\n\" \"${BOLD}$FILENAME${RESET} Successfully Recovered 👍️\"\n        else \n            perror \"Unable to recover ${BOLD}$FILENAME${RESET}\"\n        fi\n    fi\n}\n\nrestore_file() {\n    FILE=$(git ls-files | fzf --ansi --height 20% --reverse --header=\"Choose a file to restore\" | awk '{print $1}')\n\n    if [[ -n \"$FILE\" ]]; then\n        COMMIT=$(git log --color --oneline \"$FILE\" | fzf --ansi --height 80% --reverse \\\n            --prompt=\"Choose a previous commit for ${BOLD_ORG_FG}$FILE${RESET}: \" \\\n            --header=\"Use ctrl-j/ctrl-k to navigate file preview. ctrl+space to toggle preview\" \\\n            --preview \"echo {} | cut -d' ' -f1 | xargs -I{} git show --color {}:$FILE\" \\\n            --bind 'j:down,k:up,ctrl-j:preview-down,ctrl-k:preview-up,ctrl-space:toggle-preview' --preview-window right:50%)\n\n        COMMIT=$(printf \"%s\" \"$COMMIT\" | awk '{print $1}')\n    else\n        exit\n    fi\n\n    if ! git diff -s --quiet \"$FILE\"; then\n        # check for any local changes\n        printf \"%s\\n\" \"$FILE seems to be modified. Please either commit or discard those changes.\"\n        exit 0\n    elif [[ \"$COMMIT\" != \"\" && \"$FILE\" != \"\" ]] && git restore --source=\"$COMMIT\" \"$FILE\"; then\n        printf \"%s\\n\" \"$FILE restored to version at ${BOLD}$COMMIT${RESET}\"\n    else \n        perror \"Error: unable to perform operation\"\n    fi\n}\n\nundo_all() {\n    # TODO: Ask user for permanent deletion (use git clean for this)\n    if [[ $(git status --porcelain 2>/dev/null) == \"\" ]]; then\n        printf \"%s\\n\" \"Working history already clean 👌\"\n        exit\n    fi\n\n    printf \"%s\\n\" \"Stashing current changes ...\"\n    read -p \"Enter Stash Description (optional): \" -r STASH_MSG\n    if git stash save -au \"${STASH_MSG}\"; then\n        # TODO: only display this if there are untracked changes (new files)\n        # printf \"%s\\n\" \"Note: Stashing untracked files might take some time, hold on\"\n        printf \"%s\\n\" \"Cleared all changes 👍️\"\n        printf \"%s\\n\" \"Run ${BOLD_ORG_FG}git stash apply${RESET} to redo changes or ${BOLD_ORG_FG}git stash drop${RESET} to remove them\"\n    else\n        perror \"Error: unable to perform operation\"\n    fi\n}\n\nundo_git_tag() {\n    # Fetch all tags from remote\n    if git fetch --all --tags > /dev/null 2>&1; then\n        printf \"\\nFetching tags from remote\"\n    else\n        perror \"Unable to fetch tags from remote.Please check repository access.\"\n        exit\n    fi\n    tag=$(git tag --sort=v:refname | fzf --ansi --height 80% \\\n        --reverse --multi --header=\"Choose a tag to remove\" \\\n        --preview \"echo {} | cut -d' ' -f1 | xargs -I{} git show --color --pretty=format:%b {}\" \\\n        --bind 'j:down,k:up,ctrl-j:preview-down,ctrl-k:preview-up,ctrl-space:toggle-preview' --preview-window right:60% )\n\n    # Exit if no tag is selected\n    [ -z \"$tag\" ] && exit\n\n    read -p \"${BOLD_ORG_FG}Warning:${RESET} Undoing a git tag will remove the tag from both your local repository as well as the remote origin. Do you want to continue [Y/n]?\" -n 1 -r USER_INPUT\n    USER_INPUT=${USER_INPUT:-y}\n\n    # Delete git tag\n    if [[ \"$USER_INPUT\" == Y || \"$USER_INPUT\" == y ]] && printf \"%s\\nDeleting tag: $tag\"; then\n        if  git tag -d \"$tag\" > /dev/null 2>&1; then\n            git push origin --delete \"$tag\" > /dev/null 2>&1\n            printf \"%s\\n\\nTag $tag deleted 👍️\\n\"\n        else\n            perror \"Failed to delete tag.\"\n        fi\n    else\n        exit\n    fi\n}\n\nundo_git_rm(){\n    # Find all the deleted files from git history\n    filepath=$(git log --diff-filter=D --summary | grep delete | nl -n ln | fzf --header=\"Choose the file to restore\" --height 50% --ansi --reverse \"$pointer\" --cycle | awk '{print $5}')\n    # Find the commit hash value of the selected filepath\n    commit=$(git log -- \"$filepath\"| awk 'NR==1{print $2}') \n\n    # Restore the file\n    if git checkout \"$commit\"^ \"$filepath\"; then\n        printf \"%s\\n\" \"File $filepath restored successfully.\"\n    else\n        perror \"Unable to restore Fie $filepath\"\n    fi\n}\n\nugit_menu() {\n    case $option in\n        1) undo_git_commit;;\n        2) undo_git_push;;\n        3) undo_git_add;;\n        4) undo_git_merge \"unpushed\";;\n        5) change_commit_message;;\n        6) undo_branch_delete;;\n        7) undo_git_reset;;\n        8) undo_git_merge \"conflicts\";;\n        9) do_git_reset;;\n        10) undo_git_merge \"pushed\";;\n        11) recover_lost_stash;;\n        12) undo_git_stash_apply;;\n        13) recover_deleted_tag;;\n        14) do_git_reset \"Choose commit just before rebase started\";;\n        15) undo_file_delete \"commited\";;\n        16) undo_file_delete \"uncommited\";;\n        17) restore_file;;\n        18) undo_git_commit;;\n        19) undo_all;;\n        20) undo_git_tag;;\n        21) undo_git_rm;;\n    esac\n}\n\ninstalled() {\n    cmd=$(command -v \"${1}\")\n\n    [[ -n \"${cmd}\" ]] && [[ -f \"${cmd}\" ]]\n    return ${?}\n}\n\ndie() {\n    >&2 echo \"Fatal: $*\"\n    exit 1\n}\n\ncheck_deps() {\n    # check dependencies to run ugit\n\n    [[ \"${BASH_VERSINFO[0]}\" -lt 4 ]] && die \"Bash >=4 required\"\n\n    deps=(fzf git awk xargs cut nl tput tr)\n    for dep in \"${deps[@]}\"; do\n        installed \"${dep}\" || die \"Missing dependency: '${dep}'\"\n    done\n\n    # if version of fzf < 0.21, do not use --pointer\n    fzf_version=$(fzf --version | cut -d \".\" -f 1,2 | tr -d '.()[:alpha:]')\n    if test \"$fzf_version\" -ge 021; then\n        pointer=\"--pointer=👉\"\n    fi\n}\n\nshow_version() {\n    printf \"ugit version %s\\n\" \"$VERSION\"\n}\n\nprint_help() {\n    printf \"Usage: %s [-h] [-v] [-u] [-g]\\n\" \"ugit\"\n    printf \"ugit helps you undo git commands without much effort\\n\"\n    printf \"Just run 'ugit' and search for what you want to undo\\n\\n\"\n    printf \"Available options:\\n\"\n    printf \"  -h, --help      Print this help and exit\\n\"\n    printf \"  -v, --version   Print current ugit version\\n\"\n    printf \"  -u, --update    Update ugit\\n\"\n    printf \"  -g, --guide     Open the ugit undo text guide\\n\\n\"\n    printf \"Contact 📬️: %s for assistance\\n\" \"$(tput bold)varshneybhupesh@gmail.com${RESET}\"\n    printf \"Read the guide: %s\\n\" \"https://til.bhupesh.me/git/how-to-undo-anything-in-git\"\n    printf \"Please give us a ⭐ if you liked ugit %s\\n\" \"${BOLD_ORG_FG}https://github.com/Bhupesh-V/ugit${RESET}\"\n}\n\nget_changelog() {\n    # get changelog/release notes for the most recent release\n    REMOTE_REPO=\"Bhupesh-V/ugit\"\n    CHANGELOG=$(curl -s -L https://api.github.com/repos/$REMOTE_REPO/releases | awk -F=\":\" '/html_url/ {print $1;exit}' | cut -d ':' -f 2,3 | tr -d \"\\\", \")\n    printf \"Read Full Changelog: %s\\n\" \"${BOLD}${CHANGELOG}${RESET}\"\n}\n\nugit_update() {\n    if [ -n \"${UGIT_RUNNING_IN_DOCKER-}\" ] && [ \"$UGIT_RUNNING_IN_DOCKER\" = true ]; then\n        printf \"%s\\n\\n\" \"You are running version ${VERSION} of ugit via Docker. Please pull the latest docker image to update.\"\n        printf \"\\t%s\\n\" \"${BOLD_ORG_FG}docker pull bhupeshimself/ugit${RESET}\"\n        return\n    fi\n\n    printf \"%s\\n\" \"Checking for updates ...\"\n    curl -s -L \"$SCRIPT_URL\" > \"$TMP_FILE\"\n    NEW_VER=$(grep \"^VERSION\" \"$TMP_FILE\" | awk -F'[=\"]' '{print $3}')\n\n    if [[ \"$VERSION\" < \"$NEW_VER\" ]]; then\n        printf \"Updating ugit \\e[31;1m%s\\e[0m -> \\e[32;1m%s\\e[0m\\n\" \"$VERSION\" \"$NEW_VER\"\n        chmod +x \"$TMP_FILE\"\n        # WIP\n        if cp \"$TMP_FILE\" \"$SCRIPT_NAME\"; then printf \"%s\\n\" \"Done\"; fi\n        rm -f \"$TMP_FILE\"\n        get_changelog\n    else\n        printf \"%s\\n\" \"ugit is already at the latest version ($VERSION)\"\n        rm -f \"$TMP_FILE\"\n    fi\n    exit 0\n}\n\nopen_guide() {\n    GUIDE=\"https://til.bhupesh.me/git/how-to-undo-anything-in-git\"\n    \n    if [ -n \"${UGIT_RUNNING_IN_DOCKER-}\" ] && [ \"$UGIT_RUNNING_IN_DOCKER\" = true ]; then\n        printf \"%s\\n\" \"You can find how ugit does its magic at: ${BOLD_ORG_FG}${GUIDE}${RESET}\"\n        return\n    fi\n\n    case \"$OSTYPE\" in\n        darwin*)\n            # MacOS\n            open $GUIDE;;\n        msys)\n            # Git Bash on Windows\n            start $GUIDE;;\n        linux*)\n            # Handle WSL on Windows\n            if uname -a | grep -i -q Microsoft; then\n                powershell.exe -NoProfile start $GUIDE\n            else\n                xdg-open > /dev/null 2>&1 $GUIDE\n            fi;;\n        *)\n            xdg-open > /dev/null 2>&1 $GUIDE;;\n    esac\n}\n\nheader() {\n    printf \"%s\\n\" \"$(tput bold)Undo your last oopsie in Git 🙈️${RESET}\"\n    printf \"%s\\n\" \"$(tput setaf 248)Press ctrl+c to exit anytime ${RESET}\"\n}\n\ninit_test() {\n    # test if user is in a git directory or not\n    if git rev-parse --git-dir > /dev/null 2>&1; then\n        # check if the current working directory is top level or not\n        [ \"\" != \"$(git rev-parse --show-cdup)\" ] && printf \"ugit: %s\\n\" \"Not inside top level dir $(git rev-parse --show-toplevel)\"\n    else\n        printf \"%s\\n\" \"Ummm, you are not inside a Git repo 😟\"\n        exit\n    fi\n}\n\nmain() {\n    if [[ $# -gt 0 ]]; then\n        local key=\"$1\"\n        case \"$key\" in\n            --version|-v)\n                show_version;;\n            --update|-u)\n                ugit_update;;\n            --help|-h)\n                print_help\n                exit;;\n            --guide|-g)\n                open_guide ;;\n            *)\n                printf \"%s\\n\" \"ERROR: Unrecognized argument $key\"\n                exit 1;;\n        esac\n    else\n        check_deps\n        init_test\n        header\n        option=$(display_menu | nl -n ln | fzf --header=\"Don't worry we all mess up sometimes\" --height 50% --ansi --reverse \"$pointer\" --cycle | awk '{print $1}')\n        ugit_menu\n    fi\n}\n\nmain \"$@\"\n"
        },
        {
          "name": "ugit-flatpak",
          "type": "tree",
          "content": null
        },
        {
          "name": "ugit.plugin.zsh",
          "type": "blob",
          "size": 0.2265625,
          "content": "#!/usr/bin/env zsh\n# Copyright 2021 Joseph Block <jpb@unixorn.net>\n#\n# Licensed under the MIT license.\n\n# Append the repo's main directory to $PATH to make ugit available\nPLUGIN_BIN=\"$(dirname $0)\"\nexport PATH=${PATH}:${PLUGIN_BIN}\n"
        }
      ]
    }
  ]
}