{
  "metadata": {
    "timestamp": 1736568756898,
    "page": 864,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ttionya/vaultwarden-backup",
      "stars": 1133,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.20703125,
          "content": "root = true\n\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 2\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.sh]\nindent_size = 4\n"
        },
        {
          "name": ".env",
          "type": "blob",
          "size": 0.7431640625,
          "content": "# 1. Please put the value in double quotes to avoid problems.\n# 2. To use the file, you need to map the file to `/.env` in the container.\n\n# RCLONE_REMOTE_NAME=\"BitwardenBackup\"\n# RCLONE_REMOTE_DIR=\"/BitwardenBackup/\"\n# RCLONE_GLOBAL_FLAG=\"\"\n# CRON=\"5 * * * *\"\n# ZIP_ENABLE=\"TRUE\"\n# ZIP_PASSWORD=\"WHEREISMYPASSWORD?\"\n# ZIP_TYPE=\"zip\"\n# BACKUP_FILE_SUFFIX=\"%Y%m%d\"\n# BACKUP_KEEP_DAYS=\"0\"\n# PING_URL=\"\"\n# PING_URL_CURL_OPTIONS=\"\"\n# PING_URL_WHEN_START=\"\"\n# PING_URL_WHEN_START_CURL_OPTIONS=\"\"\n# PING_URL_WHEN_SUCCESS=\"\"\n# PING_URL_WHEN_SUCCESS_CURL_OPTIONS=\"\"\n# PING_URL_WHEN_FAILURE=\"\"\n# PING_URL_WHEN_FAILURE_CURL_OPTIONS=\"\"\n# MAIL_SMTP_ENABLE=\"FALSE\"\n# MAIL_SMTP_VARIABLES=\"\"\n# MAIL_TO=\"\"\n# MAIL_WHEN_SUCCESS=\"TRUE\"\n# MAIL_WHEN_FAILURE=\"TRUE\"\n# TIMEZONE=\"UTC\"\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0322265625,
          "content": "/*.hcl linguist-detectable=false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0556640625,
          "content": "# OS\n.DS_Store\n\n# IDE\n.vscode\n.idea\n\n# Log\n*.log\n*.log.*\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.8212890625,
          "content": "# Changelog\n\n## v1.21.3 (20241117)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.68.2`\n- Use standardized docker labels\n\n<br>\n\n\n\n## v1.21.2 (20240925)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.68.1`\n\n<br>\n\n\n\n## v1.21.1 (20240914)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.68.0`\n\n<br>\n\n\n\n## v1.21.0 (20240907)\n\n### Feature\n\n- Enhance ping functionality to support customizable curl options. (close [#164](https://github.com/ttionya/vaultwarden-backup/issues/164))\n\n<br>\n\n\n\n## v1.20.0 (20240721)\n\n### Feature\n\n- Add support for fine-grained ping messages\n- Update Dockerfile base image to `rclone/rclone:1.67.0`\n- Support testing\n\n<br>\n\n\n\n## v1.19.10 (20240313)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.66.0`\n\n<br>\n\n\n\n## v1.19.9 (20240223)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.65.2`\n\n<br>\n\n\n\n## v1.19.8 (20240112)\n\n### Fixed\n\n- Fix `restore` command parameter parsing error (fixed [#141](https://github.com/ttionya/vaultwarden-backup/issues/141))\n\n<br>\n\n\n\n## v1.19.7 (20240111)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.65.1`\n\n<br>\n\n\n\n## v1.19.6 (20231214)\n\n### Feature\n\n- Support PostgreSQL 16 (close [#137](https://github.com/ttionya/vaultwarden-backup/issues/137))\n\n<br>\n\n\n\n## v1.19.4 (20231128)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.65.0`\n\n<br>\n\n\n\n## v1.19.3 (20231021)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.64.2`\n\n<br>\n\n\n\n## v1.19.2 (20230912)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.64.0`\n\n<br>\n\n\n\n## v1.19.1 (20230722)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.63.1`\n\n<br>\n\n\n\n## v1.19.0 (20230704)\n\n**Reminder**: We are utilizing [`s-nail`](https://www.sdaoden.eu/code-nail.html) to send emails. In case you encounter any errors during the email sending process, please modify the `MAIL_SMTP_VARIABLES` environment variables accordingly.\n\n### Feature\n\n- Using `s-nail` instead of `heirloom-mailx` to send emails\n- Update Dockerfile base image to `rclone/rclone:1.63.0`\n\n<br>\n\n\n\n## v1.18.0 (20230408)\n\n### Feature\n\n- Add environment variable `BACKUP_FILE_SUFFIX`\n\n<br>\n\n\n\n## v1.17.0 (20230318)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.62.2`\n- Support manually trigger a backup (close [#94](https://github.com/ttionya/vaultwarden-backup/issues/94))\n\n<br>\n\n\n\n## v1.16.0 (20230129)\n\n### Feature\n\n- Support PostgreSQL/MySQL/MariaDB backend (close [#88](https://github.com/ttionya/vaultwarden-backup/issues/88))\n\n<br>\n\n\n\n## v1.15.3 (20221225)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.61.1`\n- Replace `p7zip` with `7zip` package (close [#86](https://github.com/ttionya/vaultwarden-backup/issues/68))\n\n<br>\n\n\n\n## v1.15.2 (20221119)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.60.1`\n\n<br>\n\n\n\n## v1.15.1 (20221022)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.60.0`\n\n<br>\n\n\n\n## v1.15.0 (20221018)\n\n### Feature\n\n- Execute `supercronic` as PID 1 process\n\n<br>\n\n\n\n## v1.14.4 (20220916)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.59.2`\n\n<br>\n\n\n\n## v1.14.3 (20220908)\n\n### Fixed\n\n- Fix arm/v6 can't use the latest rclone (fixed [#81](https://github.com/ttionya/vaultwarden-backup/issues/81))\n\n<br>\n\n\n\n## v1.14.2 (20220826)\n\n### Feature\n\n- Add hidden environment variable `BACKUP_FILE_DATE`\n\n<br>\n\n\n\n## v1.14.1 (20220809)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.59.1`\n\n### Chore\n\n- Skip sync when dependabot push branch\n\n<br>\n\n\n\n## v1.14.0 (20220731)\n\n### Feature\n\n- Support backup to multiple remote storage\n\n<br>\n\n\n\n## v1.13.0 (20220728)\n\n### Feature\n\n- Support force restore without asking for confirmation\n\n<br>\n\n\n\n## v1.12.2 (20220718)\n\n### Feature\n\n- Support `arm/v6` platform by using multistage build (close [#56](https://github.com/ttionya/vaultwarden-backup/issues/56))\n\n<br>\n\n\n\n## v1.12.1 (20220711)\n\n### Feature\n\n- Support `arm/v6` platform (close [#56](https://github.com/ttionya/vaultwarden-backup/issues/56))\n- Update Dockerfile base image to `rclone/rclone:1.59.0`\n\n### Chore\n\n- Add GitHub Actions dependabot\n- Update GitHub Actions\n\n<br>\n\n\n\n## v1.12.0 (20220702)\n\n### Feature\n\n- Support start the container as non-root user (close [#45](https://github.com/ttionya/vaultwarden-backup/issues/45), close [#47](https://github.com/ttionya/vaultwarden-backup/issues/47))\n- Cron tool switched from BusyBox `crond` to [`supercronic`](https://github.com/aptible/supercronic)\n\n<br>\n\n\n\n## v1.11.1 (20220430)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.58.1`\n\n### Chore\n\n- Add dependabot\n\n<br>\n\n\n\n## v1.11.0 (20220321)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.58.0`\n- support Rclone global flags (close [#49](https://github.com/ttionya/vaultwarden-backup/issues/49))\n\n<br>\n\n\n\n## v1.10.0 (20211231)\n\n### Feature\n\n- Encrypt file/dirname for 7z format\n\n### Fixed\n\n- Fix Mail Test error\n- Fix the problem that `MAIL_SMTP_VARIABLES` does not work with `.env` files (fixed [#36](https://github.com/ttionya/vaultwarden-backup/issues/36), fixed [#38](https://github.com/ttionya/vaultwarden-backup/issues/38))\n\n<br>\n\n\n\n## v1.9.6 (20211106)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.57.0`\n- Display the time of running the backup program\n\n<br>\n\n\n\n## v1.9.5 (20211010)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.56.2`\n\n<br>\n\n\n\n## v1.9.4 (20210925)\n\n### Fixed\n\n- Fix the wrong rsa_key compressed file name for searching when restoring (fixed [#32](https://github.com/ttionya/vaultwarden-backup/issues/32))\n\n<br>\n\n\n\n## v1.9.3 (20210922)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.56.1`\n\n### Chore\n\n- On the 10th, 20th and 30th of every month, republish the Docker image to update the alpine packages\n\n<br>\n\n\n\n## v1.9.2 (20210731)\n\n### Feature\n\n- Update Dockerfile base image to `rclone/rclone:1.56.0` (close [#31](https://github.com/ttionya/vaultwarden-backup/issues/31))\n\n<br>\n\n\n\n## v1.9.1 (20210609)\n\n### Feature\n\n- Increase the number of ping retries and timeout time\n\n<br>\n\n\n\n## v1.9.0 (20210608)\n\n### Feature\n\n- Support for pinging, such as healthchecks.io (close [#30](https://github.com/ttionya/vaultwarden-backup/issues/30))\n\n### Chore\n\n- Don't support linux/386 platform anymore because vaultwarden not support it\n\n<br>\n\n\n\n## v1.8.1 (20210512)\n\n### Feature\n\n- Update the `docker-compose.yml` file to use the new docker image\n- Add Rclone configuration verification (fixed [#29](https://github.com/ttionya/vaultwarden-backup/issues/29))\n\n<br>\n\n\n\n## v1.8.0 (20210506)\n\n**Reminder**: If you are still using the `ttionya/bitwardenrs-backup` Docker images, you need to migrate to the new `ttionya/vaultwarden-backup` image.\n\n### Feature\n\n- Rename the Docker image to `vaultwarden-backup`\n\n### Chore\n\n- Build both `bitwardenrs-backup` and `vaultwarden-backup` Docker images\n\n<br>\n\n\n\n## before v1.8.0\n\noutdated.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.6513671875,
          "content": "# syntax=docker/dockerfile:1\n\nFROM rclone/rclone:1.68.2\n\nARG USER_NAME=\"backuptool\"\nARG USER_ID=\"1100\"\n\nENV LOCALTIME_FILE=\"/tmp/localtime\"\n\nCOPY scripts/*.sh /app/\n\nRUN chmod +x /app/*.sh \\\n  && mkdir -m 777 /bitwarden \\\n  && apk add --no-cache 7zip bash curl mariadb-client postgresql16-client sqlite supercronic s-nail tzdata \\\n  && apk info --no-cache -Lq mariadb-client | grep -vE '/bin/mariadb$' | grep -vE '/bin/mariadb-dump$' | xargs -I {} rm -f \"/{}\" \\\n  && ln -sf \"${LOCALTIME_FILE}\" /etc/localtime \\\n  && addgroup -g \"${USER_ID}\" \"${USER_NAME}\" \\\n  && adduser -u \"${USER_ID}\" -Ds /bin/sh -G \"${USER_NAME}\" \"${USER_NAME}\"\n\nENTRYPOINT [\"/app/entrypoint.sh\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "MIT License\n\nCopyright (c) 2020 ttionya\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.9501953125,
          "content": "# vaultwarden backup\n\n[![Docker Image Version (latest by date)](https://img.shields.io/docker/v/ttionya/vaultwarden-backup?label=Version&logo=docker)](https://hub.docker.com/r/ttionya/vaultwarden-backup/tags) [![Docker Pulls](https://img.shields.io/docker/pulls/ttionya/vaultwarden-backup?label=Docker%20Pulls&logo=docker)](https://hub.docker.com/r/ttionya/vaultwarden-backup) [![GitHub](https://img.shields.io/github/license/ttionya/vaultwarden-backup?label=License&logo=github)](https://github.com/ttionya/vaultwarden-backup/blob/master/LICENSE)\n\nREADME | [中文文档](README_zh.md)\n\nDocker containers for [vaultwarden](https://github.com/dani-garcia/vaultwarden) (formerly known as **`bitwarden_rs`**) backup to remote.\n\n- [Docker Hub](https://hub.docker.com/r/ttionya/vaultwarden-backup)\n- [GitHub Packages](https://github.com/ttionya/vaultwarden-backup/pkgs/container/vaultwarden-backup)\n- [GitHub](https://github.com/ttionya/vaultwarden-backup)\n\n<br>\n\n\n\n## Feature\n\nThis tool supports backing up the following files or directories.\n\n- `db.sqlite3` (for SQLite database)\n- `db.dump` (for PostgreSQL database)\n- `db.sql` (for MySQL / MariaDB database)\n- `config.json`\n- `rsa_key*` (multiple files)\n- `attachments` (directory)\n- `sends` (directory)\n\nAnd the following ways of notifying backup results are supported.\n\n- Ping (send on completion, start, success, or failure)\n- Mail (SMTP based, send on success and on failure)\n\n<br>\n\n\n\n## Usage\n\n> **Important:** We assume you already read the `vaultwarden` [documentation](https://github.com/dani-garcia/vaultwarden/wiki).\n\n### Configure Rclone (⚠️ MUST READ ⚠️)\n\n> **For backup, you need to configure Rclone first, otherwise the backup tool will not work.**\n>\n> **For restore, it is not necessary.**\n\nWe upload the backup files to the storage system by [Rclone](https://rclone.org/).\n\nVisit [GitHub](https://github.com/rclone/rclone) for more storage system tutorials. Different systems get tokens differently.\n\n#### Configure and Check\n\nYou can get the token by the following command.\n\n```shell\ndocker run --rm -it \\\n  --mount type=volume,source=vaultwarden-rclone-data,target=/config/ \\\n  ttionya/vaultwarden-backup:latest \\\n  rclone config\n```\n\n**We recommend setting the remote name to `BitwardenBackup`, otherwise you need to specify the environment variable `RCLONE_REMOTE_NAME` as the remote name you set.**\n\nAfter setting, check the configuration content by the following command.\n\n```shell\ndocker run --rm -it \\\n  --mount type=volume,source=vaultwarden-rclone-data,target=/config/ \\\n  ttionya/vaultwarden-backup:latest \\\n  rclone config show\n\n# Microsoft Onedrive Example\n# [BitwardenBackup]\n# type = onedrive\n# token = {\"access_token\":\"access token\",\"token_type\":\"token type\",\"refresh_token\":\"refresh token\",\"expiry\":\"expiry time\"}\n# drive_id = driveid\n# drive_type = personal\n```\n\n<br>\n\n\n\n### Backup\n\n#### Use Docker Compose (Recommend)\n\nIf you are a new user or are rebuilding vaultwarden, it is recommended to use the `docker-compose.yml` from the project.\n\nDownload `docker-compose.yml` to you machine, edit environment variables and start it.\n\nYou need to go to the directory where the `docker-compose.yml` file is saved.\n\n```shell\n# Start\ndocker-compose up -d\n\n# Stop\ndocker-compose stop\n\n# Restart\ndocker-compose restart\n\n# Remove\ndocker-compose down\n```\n\n#### Automatic Backups\n\nIf you have a running vaultwarden but don't want to use `docker-compose.yml`, we also provide a backup method for you.\n\nMake sure that your vaultwarden container is named `vaultwarden` otherwise you have to replace the container name in the `--volumes-from` section of the docker run call.\n\nBy default the data folder for vaultwarden is `/data`, you need to explicitly specify the data folder using the environment variable `DATA_DIR`.\n\nStart the backup container with default settings. (automatic backup at 5 minute every hour)\n\n```shell\ndocker run -d \\\n  --restart=always \\\n  --name vaultwarden_backup \\\n  --volumes-from=vaultwarden \\\n  --mount type=volume,source=vaultwarden-rclone-data,target=/config/ \\\n  -e DATA_DIR=\"/data\" \\\n  ttionya/vaultwarden-backup:latest\n```\n\n<br>\n\n\n\n### Restore\n\n> **Important:** Restore will overwrite the existing files.\n\nYou need to stop the Docker container before the restore.\n\nYou also need to download the backup files to your local machine.\n\nBecause the host's files are not accessible in the Docker container, you need to map the directory where the backup files that need to be restored are located to the docker container.\n\n**And go to the directory where your backup files to be restored are located.**\n\nIf you use the `docker-compose.yml` provided with this project, you can use the following command.\n\n```shell\ndocker run --rm -it \\\n  --mount type=volume,source=vaultwarden-data,target=/bitwarden/data/ \\\n  --mount type=bind,source=$(pwd),target=/bitwarden/restore/ \\\n  ttionya/vaultwarden-backup:latest restore \\\n  [OPTIONS]\n```\n\nIf you are using \"automatic backups\", please confirm the vaultwarden volume and replace the `--mount` `source` section.\n\nAlso don't forget to use the environment variable `DATA_DIR` to specify the data directory (`-e DATA_DIR=\"/data\"`).\n\n```shell\ndocker run --rm -it \\\n  \\ # If you are mapping the local folder to a docker container, like `vw-data`\n  --mount type=bind,source=\"the absolution path to your local folder\",target=/data/ \\\n  \\ # If you are using docker volume\n  --mount type=volume,source=\"docker volume name\",target=/data/ \\\n  --mount type=bind,source=$(pwd),target=/bitwarden/restore/ \\\n  -e DATA_DIR=\"/data\" \\\n  ttionya/vaultwarden-backup:latest restore \\\n  [OPTIONS]\n```\n\nSee [Options](#options) for options information.\n\n#### Options\n\n##### -f / --force-restore\n\nFor restore without asking for confirmation.\n\nUSE WITH CAUTION!!\n\n<details>\n<summary><strong>※ You have the compressed file named <code>backup</code></strong></summary>\n\n##### --zip-file \\<file>\n\nYou need to use this option to specify the `backup` compressed package.\n\nMake sure the file name in the compressed package has not been changed.\n\n##### -p / --password\n\nTHIS IS INSECURE!\n\nIf the `backup` compressed package has a password, you can use this option to set the password to extract it.\n\nIf not, the password will be asked for interactively.\n\n</details>\n\n<details>\n<summary><strong>※ You have multiple independent backup files</strong></summary>\n\n##### --db-file \\<file>\n\nYou need to use this option to specify the `db.*` file.\n\n##### --config-file \\<file>\n\nYou need to use this option to specify the `config.json` file.\n\n##### --rsakey-file \\<file>\n\nYou need to use this option to specify the `rsakey.tar` file.\n\n##### --attachments-file \\<file>\n\nYou need to use this option to specify the `attachments.tar` file.\n\n##### --sends-file \\<file>\n\nYou need to use this option to specify the `sends.tar` file.\n\n</details>\n\n<br>\n\n\n\n## Environment Variables\n\n> **Note:** All environment variables have default values, you can use the docker image without setting any environment variables.\n\n#### RCLONE_REMOTE_NAME\n\nThe name of the Rclone remote, which needs to be consistent with the remote name in the rclone config.\n\nYou can view the current remote name with the following command.\n\n```shell\ndocker run --rm -it \\\n  --mount type=volume,source=vaultwarden-rclone-data,target=/config/ \\\n  ttionya/vaultwarden-backup:latest \\\n  rclone config show\n\n# [BitwardenBackup] <- this\n# ...\n```\n\nDefault: `BitwardenBackup`\n\n#### RCLONE_REMOTE_DIR\n\nThe folder where backup files are stored in the storage system.\n\nDefault: `/BitwardenBackup/`\n\n#### RCLONE_GLOBAL_FLAG\n\nRclone global flags, see [flags](https://rclone.org/flags/).\n\n**Do not add flags that will change the output, such as `-P`, which will affect the deletion of outdated backup files.**\n\nDefault: `''`\n\n#### CRON\n\nSchedule to run the backup script, based on [`supercronic`](https://github.com/aptible/supercronic). You can test the rules [here](https://crontab.guru/#5_*_*_*_*).\n\nDefault: `5 * * * *` (run the script at 5 minute every hour)\n\n#### ZIP_ENABLE\n\nPack all backup files into a compressed file. When set to `'FALSE'`, each backup file will be uploaded independently.\n\nDefault: `TRUE`\n\n#### ZIP_PASSWORD\n\nThe password for the compressed file. Note that the password will always be used when packing the backup files.\n\nDefault: `WHEREISMYPASSWORD?`\n\n#### ZIP_TYPE\n\nBecause the `zip` format is less secure, we offer archives in `7z` format for those who seek security.\n\nIt should be noted that the password for vaultwarden is encrypted before it is sent to the server. The server does not have plaintext passwords, so the `zip` format is good enough for basic encryption needs.\n\nDefault: `zip` (only support `zip` and `7z` formats)\n\n#### BACKUP_KEEP_DAYS\n\nOnly keep last a few days backup files in the storage system. Set to `0` to keep all backup files.\n\nDefault: `0`\n\n#### BACKUP_FILE_SUFFIX\n\nEach backup file is suffixed by default with `%Y%m%d`. If you back up your vault multiple times a day, that suffix is not unique anymore. This environment variable allows you to append a unique suffix to that date to create a unique backup name.\n\nYou can use any character except for `/` since it cannot be used in Linux file names.\n\nThis environment variable combines the functionalities of [`BACKUP_FILE_DATE`](#backup_file_date) and [`BACKUP_FILE_DATE_SUFFIX`](#backup_file_date_suffix), and has a higher priority. You can directly use this environment variable to control the suffix of the backup files.\n\nPlease use the [date man page](https://man7.org/linux/man-pages/man1/date.1.html) for the format notation.\n\nDefault: `%Y%m%d`\n\n#### TIMEZONE\n\nSet your timezone name.\n\nHere is timezone list at [wikipedia](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).\n\nDefault: `UTC`\n\n#### DATA_DIR\n\nThis folder stores the data of vaultwarden.\n\nWhen using `Docker Compose`, this does not need to be changed. However, when using automatic backup, you need to change it to `/data`.\n\nDefault: `/bitwarden/data`\n\n<strong>※ Please refer to the [`Notification`](#notification) section for notification-related environment variables.</strong>\n\n<details>\n<summary><strong>※ Other environment variables</strong></summary>\n\n> **You don't need to change these environment variables unless you know what you are doing.**\n\n#### BACKUP_FILE_DATE\n\nYou should use the [`BACKUP_FILE_SUFFIX`](#backup_file_suffix) environment variable instead.\n\nEdit this environment variable only if you explicitly want to change the time prefix of the backup file (e.g. 20220101). **Incorrect configuration may result in the backup file being overwritten by mistake.**\n\nSame rule as [`BACKUP_FILE_DATE_SUFFIX`](#backup_file_date_suffix).\n\nDefault: `%Y%m%d`\n\n#### BACKUP_FILE_DATE_SUFFIX\n\nYou should use the [`BACKUP_FILE_SUFFIX`](#backup_file_suffix) environment variable instead.\n\nEach backup file is suffixed by default with `%Y%m%d`. If you back up your vault multiple times a day, that suffix is not unique anymore.\nThis environment variable allows you to append a unique suffix to that date (`%Y%m%d${BACKUP_FILE_DATE_SUFFIX}`) to create a unique backup name.\n\nNote that only numbers, upper and lower case letters, `-`, `_`, `%` are supported.\n\nPlease use the [date man page](https://man7.org/linux/man-pages/man1/date.1.html) for the format notation.\n\nDefault: `''`\n\n#### DATA_DB\n\nSet the path for the sqlite database file.\n\nDefault: `${DATA_DIR}/db.sqlite3`\n\n#### DATA_RSAKEY\n\nSet the path for the rsa_key file.\n\nDefault: `${DATA_DIR}/rsa_key`\n\n#### DATA_ATTACHMENTS\n\nSet the path for the attachment folder.\n\nDefault: `${DATA_DIR}/attachments`\n\n#### DATA_SENDS\n\nSet the path for the sends folder.\n\nDefault: `${DATA_DIR}/sends`\n\n</details>\n\n<br>\n\n\n\n## Notification\n\n### Mail\n\nStarting from v1.19.0, we will be using [`s-nail`](https://www.sdaoden.eu/code-nail.html) instead of [`heirloom-mailx`](https://www.systutorials.com/docs/linux/man/1-heirloom-mailx/) to send emails.\n\nPlease note that `heirloom-mailx` is a stub for `s-nail`, and most of its functionality is compatible. Therefore, you may not need to modify any environment variables for this change.\n\n| Environment Variable | Default Value | Description                                           |\n| --- | --- |-------------------------------------------------------|\n| MAIL_SMTP_ENABLE | `FALSE` | Enable sending mail.                                  |\n| MAIL_SMTP_VARIABLES | | Mail sending options.                                 |\n| MAIL_TO | | The recipient of the notification email.              |\n| MAIL_WHEN_SUCCESS | `TRUE` | Send an email when the backup completes successfully. |\n| MAIL_WHEN_FAILURE | `TRUE` | Send an email if the backup fails.                    |\n\nFor `MAIL_SMTP_VARIABLES`, you need to configure the mail sending options yourself. **We will set the email subject based on the usage scenario, so you should not use the `-s` flag.**\n\n```text\n# My example:\n\n# For Zoho\n-S smtp-use-starttls \\\n-S smtp=smtp://smtp.zoho.com:587 \\\n-S smtp-auth=login \\\n-S smtp-auth-user=<my-email-address> \\\n-S smtp-auth-password=<my-email-password> \\\n-S from=<my-email-address>\n```\n\nConsole showing warnings? Check [issue #177](https://github.com/ttionya/vaultwarden-backup/issues/117#issuecomment-1691443179) for more details.\n\n<br>\n\n\n\n### Mail Test\n\nYou can use the following command to test mail sending. We will add the `-v` flag to display detailed information, so you do not need to set it again in `MAIL_SMTP_VARIABLES`.\n\n```shell\ndocker run --rm -it -e MAIL_SMTP_VARIABLES='<your smtp variables>' ttionya/vaultwarden-backup:latest mail <mail send to>\n\n# Or\n\ndocker run --rm -it -e MAIL_SMTP_VARIABLES='<your smtp variables>' -e MAIL_TO='<mail send to>' ttionya/vaultwarden-backup:latest mail\n```\n\n<br>\n\n\n\n### Ping\n\nWe provide functionality to send notifications when the backup is completed, started, successful, or failed.\n\n**Using a [healthcheck.io](https://healthchecks.io/) address or other similar cron monitoring addresses is a good choice, and it is also recommended.** For more complex notification scenarios, you can use environment variables with the `_CURL_OPTIONS` suffix to set curl options. For example, you can add request headers, change the request method, etc.\n\nFor different notification scenarios, **the backup tool provides `%{subject}` and `%{content}` placeholders to replace the actual title and content**. You can use them in the following environment variables. Note that the title and content may contain spaces. For the four environment variables containing `_CURL_OPTIONS`, the placeholders will be directly replaced, retaining spaces. For other `PING_URL` environment variables, spaces will be replaced with `+` to comply with URL rules.\n\n| Environment Variable                               | Trigger Status        | Test Identifier         | Description                                                          |\n|------------------------------------|-------------|--------------|----------------------------------------------------------------------|\n| PING_URL                           | completion (success or failure) | `completion` | The URL to which the request is sent after the backup is completed.  |\n| PING_URL_CURL_OPTIONS              |             |  | Curl options used with `PING_URL`                                    |\n| PING_URL_WHEN_START                | start          | `start` | The URL to which the request is sent when the backup starts.         |\n| PING_URL_WHEN_START_CURL_OPTIONS   |             |  | Curl options used with `PING_URL_WHEN_START`                         |\n| PING_URL_WHEN_SUCCESS              | success          | `success` | The URL to which the request is sent after the backup is successful. |\n| PING_URL_WHEN_SUCCESS_CURL_OPTIONS |             |  | Curl options used with `PING_URL_WHEN_SUCCESS`                       |\n| PING_URL_WHEN_FAILURE              | failure          | `failure` | The URL to which the request is sent after the backup fails.         |\n| PING_URL_WHEN_FAILURE_CURL_OPTIONS |             |  | Curl options used with `PING_URL_WHEN_FAILURE`                       |\n\n<br>\n\n\n\n### Ping Test\n\nYou can use the following command to test the Ping sending.\n\nThe \"test identifier\" is the identifier in the table in the [previous section](#ping). You can use `completion`, `start`, `success`, or `failure`, which determines which set of environment variables to use.\n\n```shell\ndocker run --rm -it \\\n  -e PING_URL='<your ping url>' \\\n  -e PING_URL_CURL_OPTIONS='<your curl options for PING_URL>' \\\n  -e PING_URL_WHEN_START='<your ping url>' \\\n  -e PING_URL_WHEN_START_CURL_OPTIONS='<your curl options for PING_URL_WHEN_START>' \\\n  -e PING_URL_WHEN_SUCCESS='<your ping url>' \\\n  -e PING_URL_WHEN_SUCCESS_CURL_OPTIONS='<your curl options for PING_URL_WHEN_SUCCESS>' \\\n  -e PING_URL_WHEN_FAILURE='<your ping url>' \\\n  -e PING_URL_WHEN_FAILURE_CURL_OPTIONS='<your curl options for PING_URL_WHEN_FAILURE>' \\\n  ttionya/vaultwarden-backup:latest ping <test identifier>\n```\n\n<br>\n\n\n\n## Environment Variables Considerations\n\n### Using `.env` file\n\nIf you prefer using an env file instead of environment variables, you can map the env file containing the environment variables to the `/.env` file in the container.\n\n```shell\ndocker run -d \\\n  --mount type=bind,source=/path/to/env,target=/.env \\\n  ttionya/vaultwarden-backup:latest\n```\n\n**Please do not use the `--env-file` flag directly**; make sure to map the environment variables by mounting the file. The `--env-file` flag incorrectly handles quotes, which can lead to unexpected situations. For more information, please see [docker/cli#3630](https://github.com/docker/cli/issues/3630).\n\n<br>\n\n\n\n### Docker Secrets\n\nAs an alternative to passing sensitive information via environment variables, you can append `_FILE` to the previously listed environment variables. This causes the initialization script to load the values for those variables from files present in the container. In particular, this can be used to load passwords from Docker secrets stored in `/run/secrets/<secret_name>` files.\n\n```shell\ndocker run -d \\\n  -e ZIP_PASSWORD_FILE=/run/secrets/zip-password \\\n  ttionya/vaultwarden-backup:latest\n```\n\n<br>\n\n\n\n### About Priority\n\nWe look for environment variables in the following order:\n\n1. Directly read the value of the environment variable\n2. Read the content of the file pointed to by the environment variable ending in `_FILE`\n3. Read the content of the file pointed to by the environment variable ending in `_FILE` in the `.env` file\n4. Read the value of the environment variable in the `.env` file\n\nExample:\n\n```txt\n# For 1\nMY_ENV=\"example1\"\n\n# For 2\nMY_ENV_FILE=\"/path/to/example2\"\n\n# For 3 (.env file)\nMY_ENV_FILE: \"/path/to/example3\" \n\n# For 4 (.env file)\nMY_ENV: \"example4\"\n```\n\n<br>\n\n\n\n## Migration\n\n**Unofficial Bitwarden compatible server written in Rust, formerly known as `bitwarden_rs`, has been renamed to `vaultwarden`. Consequently, this backup tool has also been renamed from `bitwardenrs-backup` to `vaultwarden-backup`.**\n\nThe old image can still be used, just **DEPRECATED**. Please migrate to the new image as soon as possible.\n\n**Migration Instructions**\n\nIf you use automatic backups, you only need to replace the image with `ttionya/vaultwarden-backup`. Note the name of your volume.\n\nIf you use `docker-compose`, you need to update `bitwardenrs/server` to `vaultwarden/server` and `ttionya/bitwardenrs-backup` to `ttionya/vaultwarden-backup`.\n\nWe recommend re-downloading the [`docker-compose.yml`](./docker-compose.yml) file, updating your environment variables, and paying attention to the `volumes` section, which you may need to modify.\n\n<br>\n\n\n\n## Advance\n\n- [Run as non-root user](docs/run-as-non-root-user.md)\n- [Multiple remote destinations](docs/multiple-remote-destinations.md)\n- [Manually trigger a backup](docs/manually-trigger-a-backup.md)\n- [Using the PostgreSQL backend](docs/using-the-postgresql-backend.md)\n- [Using the MySQL(MariaDB) backend](docs/using-the-mysql-or-mariadb-backend.md)\n\n<br>\n\n\n\n## Changelog\n\nCheck out the [CHANGELOG](CHANGELOG.md) file.\n\n<br>\n\n\n\n## Thanks\n\nI am grateful for the OSS license provided by [JetBrains](https://www.jetbrains.com/).\n\n<a href=\"https://jb.gg/OpenSourceSupport\" target=\"_blank\"><img src=\"https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.png\" alt=\"JetBrains Logo (Main) logo\" width=\"200\"></a>\n\n<br>\n\n\n\n## License\n\nMIT\n"
        },
        {
          "name": "README_zh.md",
          "type": "blob",
          "size": 18.576171875,
          "content": "# vaultwarden backup\n\n[![Docker Image Version (latest by date)](https://img.shields.io/docker/v/ttionya/vaultwarden-backup?label=Version&logo=docker)](https://hub.docker.com/r/ttionya/vaultwarden-backup/tags) [![Docker Pulls](https://img.shields.io/docker/pulls/ttionya/vaultwarden-backup?label=Docker%20Pulls&logo=docker)](https://hub.docker.com/r/ttionya/vaultwarden-backup) [![GitHub](https://img.shields.io/github/license/ttionya/vaultwarden-backup?label=License&logo=github)](https://github.com/ttionya/vaultwarden-backup/blob/master/LICENSE)\n\n[README](README.md) | 中文文档\n\n备份 [vaultwarden](https://github.com/dani-garcia/vaultwarden) (之前叫 `bitwarden_rs`) 数据并通过 [Rclone](https://rclone.org/) 同步到其他存储系统。\n\n- [Docker Hub](https://hub.docker.com/r/ttionya/vaultwarden-backup)\n- [GitHub Packages](https://github.com/ttionya/vaultwarden-backup/pkgs/container/vaultwarden-backup)\n- [GitHub](https://github.com/ttionya/vaultwarden-backup)\n\n<br>\n\n\n\n## 功能\n\n本工具会备份以下文件或目录。\n\n- `db.sqlite3` (SQLite 数据库)\n- `db.dump` (PostgreSQL 数据库)\n- `db.sql` (MySQL / MariaDB 数据库)\n- `config.json`\n- `rsa_key*` (多个文件)\n- `attachments` (目录)\n- `sends` (目录)\n\n并且支持以下通知备份结果的方式。\n\n- Ping (完成，开始，成功或失败时发送)\n- Mail (基于 SMTP，成功时和失败时都会发送)\n\n<br>\n\n\n\n## 使用方法\n\n> **重要：** 我们假设你已经完整阅读了 `vaultwarden` [文档](https://github.com/dani-garcia/vaultwarden/wiki) 。\n\n### 配置 Rclone (⚠️ 必读 ⚠️)\n\n> **对于备份，你需要先配置 Rclone，否则备份工具不会工作。**\n>\n> **对于还原，它不是必要的。**\n\n我们通过 [Rclone](https://rclone.org/) 同步备份文件到远程存储系统。\n\n访问 [GitHub](https://github.com/rclone/rclone) 了解更多存储系统使用教程，不同的系统获得 Token 的方式不同。\n\n#### 配置和检查\n\n你可以通过下面的命令获得 Token。\n\n```shell\ndocker run --rm -it \\\n  --mount type=volume,source=vaultwarden-rclone-data,target=/config/ \\\n  ttionya/vaultwarden-backup:latest \\\n  rclone config\n```\n\n**我们建议将远程名称设置为 `BitwardenBackup`，否则你需要指定环境变量 `RCLONE_REMOTE_NAME` 为你设置的远程名称。**\n\n完成设置后，可以通过以下命令检查配置情况。\n\n```shell\ndocker run --rm -it \\\n  --mount type=volume,source=vaultwarden-rclone-data,target=/config/ \\\n  ttionya/vaultwarden-backup:latest \\\n  rclone config show\n\n# Microsoft Onedrive Example\n# [BitwardenBackup]\n# type = onedrive\n# token = {\"access_token\":\"access token\",\"token_type\":\"token type\",\"refresh_token\":\"refresh token\",\"expiry\":\"expiry time\"}\n# drive_id = driveid\n# drive_type = personal\n```\n\n<br>\n\n\n\n### 备份\n\n#### 使用 Docker Compose (推荐)\n\n如果你是新用户或正在重新搭建 vaultwarden，推荐使用项目中的 `docker-compose.yml`.\n\n下载 `docker-compose.yml`，根据实际情况编辑环境变量后启动它。\n\n你需要进入 `docker-compose.yml` 文件所在目录执行操作。\n\n```shell\n# Start\ndocker-compose up -d\n\n# Stop\ndocker-compose stop\n\n# Restart\ndocker-compose restart\n\n# Remove\ndocker-compose down\n```\n\n#### 自动备份\n\n如果你有一个正在运行的 vaultwarden，但是不想使用 `docker-compose.yml`，我们同样为你提供了备份方法。\n\n确保你的 vaultwarden 容器被命名为 `vaultwarden`，否则你需要自行替换 docker run 的 `--volumes-from` 部分。\n\n默认情况下 vaultwarden 的数据文件夹是 `/data`，你需要显式使用环境变量 `DATA_DIR` 指定数据文件夹。\n\n使用默认设置启动容器（每小时的 05 分自动备份）。\n\n```shell\ndocker run -d \\\n  --restart=always \\\n  --name vaultwarden_backup \\\n  --volumes-from=vaultwarden \\\n  --mount type=volume,source=vaultwarden-rclone-data,target=/config/ \\\n  -e DATA_DIR=\"/data\" \\\n  ttionya/vaultwarden-backup:latest\n```\n\n<br>\n\n\n\n### 还原备份\n\n> **重要：** 还原备份会覆盖已存在的文件。\n\n你需要在还原备份前停止 Docker 容器。\n\n你也需要下载备份文件到本地计算机。\n\n因为主机的文件无法在 Docker 容器中直接访问，所以要将需要还原的备份文件所在目录映射到 Docker 容器中。\n\n**首先进入待还原的备份文件所在目录。**\n\n如果你使用的是本项目提供的 `docker-compose.yml`，你可以执行下面的命令。\n\n```shell\ndocker run --rm -it \\\n  --mount type=volume,source=vaultwarden-data,target=/bitwarden/data/ \\\n  --mount type=bind,source=$(pwd),target=/bitwarden/restore/ \\\n  ttionya/vaultwarden-backup:latest restore \\\n  [OPTIONS]\n```\n\n如果你使用的是“自动备份”，请确认 vaultwarden 卷的命名，并替换 `--mount` `source` 部分。\n\n同时不要忘记使用环境变量 `DATA_DIR` 指定数据目录（`-e DATA_DIR=\"/data\"`）。\n\n```shell\ndocker run --rm -it \\\n  \\ # 如果你将本地目录映射到 Docker 容器中，就像 `vw-data` 一样\n  --mount type=bind,source=\"本地目录的绝对路径\",target=/data/ \\\n  \\ # 如果你使用 Docker 卷\n  --mount type=volume,source=\"Docker 卷名称\",target=/data/ \\\n  --mount type=bind,source=$(pwd),target=/bitwarden/restore/ \\\n  -e DATA_DIR=\"/data\" \\\n  ttionya/vaultwarden-backup:latest restore \\\n  [OPTIONS]\n```\n\n选项已在下面列出。\n\n#### 选项\n\n##### -f / --force-restore\n\n强制还原，没有交互式确认。请谨慎使用！！\n\n<details>\n<summary><strong>※ 你有一个名为 <code>backup</code> 的压缩文件</strong></summary>\n\n##### --zip-file \\<file>\n\n你需要使用这个选项来指定 `backup` 压缩文件。\n\n请确保压缩文件中的文件名没有被更改。\n\n##### -p / --password\n\n**这是不安全的！！**\n\n如果 `backup` 压缩文件设置了密码，你可以用这个选项指定备份文件的密码。\n\n不建议使用该选项，因为在没有使用该选项且存在密码时，程序会交互式地询问密码。\n\n</details>\n\n<details>\n<summary><strong>※ 你有多个独立的备份文件</strong></summary>\n\n##### --db-file \\<file>\n\n你需要用这个选项来指定 `db.*` 文件。\n\n##### --config-file \\<file>\n\n你需要用这个选项来指定 `config.json` 文件。\n\n##### --rsakey-file \\<file>\n\n你需要用这个选项来指定 `rsakey.tar` 文件。\n\n##### --attachments-file \\<file>\n\n你需要用这个选项来指定 `attachments.tar` 文件。\n\n##### --sends-file \\<file>\n\n你需要用这个选项来指定 `sends.tar` 文件。\n\n</details>\n\n<br>\n\n\n\n## 环境变量\n\n> **注意：** 所有的环境变量都有默认值，你可以在不设置任何环境变量的情况下使用 Docker 镜像。\n\n#### RCLONE_REMOTE_NAME\n\nRclone 远程名称，它需要和 rclone config 中的远程名称保持一致。\n\n你可以通过以下命令查看当前远程名称。\n\n```shell\ndocker run --rm -it \\\n  --mount type=volume,source=vaultwarden-rclone-data,target=/config/ \\\n  ttionya/vaultwarden-backup:latest \\\n  rclone config show\n\n# [BitwardenBackup] <- 就是它\n# ...\n```\n\n默认值：`BitwardenBackup`\n\n#### RCLONE_REMOTE_DIR\n\n远程存储系统中存放备份文件的文件夹路径。\n\n默认值：`/BitwardenBackup/`\n\n#### RCLONE_GLOBAL_FLAG\n\nRclone 全局参数，详见 [flags](https://rclone.org/flags/)。\n\n**不要添加会改变输出的全局参数，比如 `-P`，它会影响删除过期备份文件的操作。**\n\n默认值：`''`\n\n#### CRON\n\n`crond` 的规则，它基于 [`supercronic`](https://github.com/aptible/supercronic)。你可以在 [这里](https://crontab.guru/#5_*_*_*_*) 进行测试。\n\n默认值：`5 * * * *` (每小时的 05 分自动备份)\n\n#### ZIP_ENABLE\n\n将所有备份文件打包为压缩文件。当设置为 `'FALSE'` 时，会单独上传每个备份文件。\n\n默认值：`TRUE`\n\n#### ZIP_PASSWORD\n\n压缩文件的密码。请注意，打包备份文件时始终会使用密码。\n\n默认值：`WHEREISMYPASSWORD?`\n\n#### ZIP_TYPE\n\n因为 `zip` 格式安全性较低，我们为追求安全的人提供 `7z` 格式的存档。\n\n需要说明的是，vaultwarden 的密码在发送到服务器前就已经加密了。服务器没有保存明文密码，所以 `zip` 格式已经可以满足基本的加密需求。\n\n默认值：`zip` (只支持 `zip` 和 `7z` 格式)\n\n#### BACKUP_KEEP_DAYS\n\n在远程存储系统中保留最近 X 天的备份文件。设置为 `0` 会保留所有备份文件。\n\n默认值：`0`\n\n#### BACKUP_FILE_SUFFIX\n\n每个备份文件都默认添加 `%Y%m%d` 后缀。如果你在一天内多次进行备份，每次备份都会被覆盖之前同名的文件。这个环境变量允许你自定义日期信息以便每次备份生成不同的文件。\n\n你可以使用除了 `/` 外的任何字符，无法使用的原因是 Linux 不能使用 `/` 作为文件名。\n\n这个环境变量合并了 [`BACKUP_FILE_DATE`](#backup_file_date) 和 [`BACKUP_FILE_DATE_SUFFIX`](#backup_file_date_suffix) 的功能，并且优先级更高。现在你可以直接通过它控制备份文件后缀。\n\n在 [这里](https://man7.org/linux/man-pages/man1/date.1.html) 查看时间格式化说明。\n\n默认值：`%Y%m%d`\n\n#### TIMEZONE\n\n设置你的时区名称。\n\n在 [wikipedia](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) 查看所有时区名称。（PS: 北京时区TIMEZONE设置为Asia/Shanghai）\n\n默认值：`UTC`\n\n#### DATA_DIR\n\n指定存放 vaultwarden 数据的目录。\n\n当使用 `Docker Compose` 时，你一般不需要修改它，但是当你使用自动备份时，你通常需要将它修改为 `/data`。\n\n默认值：`/bitwarden/data`\n\n<strong>※ 通知相关环境变量请查看[通知](#通知)部分。</strong>\n\n<details>\n<summary><strong>※ 其他环境变量</strong></summary>\n\n> **你无需修改这些环境变量，除非你知道你在做什么。**\n\n#### BACKUP_FILE_DATE\n\n你应该使用 [`BACKUP_FILE_SUFFIX`](#backup_file_suffix) 环境变量替代。\n\n只有在你确定想修改备份文件的时间前缀（如 20220101）时编辑该环境变量。**错误的配置可能导致备份文件被错误的覆盖。**\n\n规则同 [`BACKUP_FILE_DATE_SUFFIX`](#backup_file_date_suffix)。\n\nDefault: `%Y%m%d`\n\n#### BACKUP_FILE_DATE_SUFFIX\n\n你应该使用 [`BACKUP_FILE_SUFFIX`](#backup_file_suffix) 环境变量替代。\n\n每个备份文件都默认添加 `%Y%m%d` 后缀。如果你在一天内多次进行备份，每次备份都会被覆盖之前同名的文件。这个环境变量允许你追加日期信息 (`%Y%m%d${BACKUP_FILE_DATE_SUFFIX}`) 以便每次备份生成不同的文件。\n\n注意：只支持数字、大小写字母、`-`、`_` 和 `%`。\n\n在 [这里](https://man7.org/linux/man-pages/man1/date.1.html) 查看时间格式化说明。\n\n默认值：`''`\n\n#### DATA_DB\n\n指定 sqlite 数据库文件的路径。\n\n默认值：`${DATA_DIR}/db.sqlite3`\n\n#### DATA_RSAKEY\n\n指定 rsa_key 文件的路径。\n\n默认值：`${DATA_DIR}/rsa_key`\n\n#### DATA_ATTACHMENTS\n\n指定 attachments 文件夹路径。\n\n默认值：`${DATA_DIR}/attachments`\n\n#### DATA_SENDS\n\n指定 sends 文件夹路径。\n\n默认值：`${DATA_DIR}/sends`\n\n</details>\n\n<br>\n\n\n\n## 通知\n\n### Mail\n\n从 v1.19.0 开始，本工具使用 [`s-nail`](https://www.sdaoden.eu/code-nail.html) 代替 [`heirloom-mailx`](https://www.systutorials.com/docs/linux/man/1-heirloom-mailx/) 发送邮件。\n\n请注意，`heirloom-mailx` 是 `s-nail` 的存根，它们大部分功能是兼容的。因此你可能不需要为这个改变修改任何环境变量。\n\n| 环境变量 | 默认值    | 描述        |\n| --- |--------|-----------|\n| MAIL_SMTP_ENABLE | `FALSE` | 启用邮件发送功能  |\n| MAIL_SMTP_VARIABLES |        | 邮件发送参数    |\n| MAIL_TO |        | 接收邮件的地址   |\n| MAIL_WHEN_SUCCESS | `TRUE` | 备份成功后发送邮件 |\n| MAIL_WHEN_FAILURE | `TRUE` | 备份失败后发送邮件 |\n\n对于 `MAIL_SMTP_VARIABLES`，你需要自行配置邮件发送参数。**我们会根据使用场景设置邮件主题，所以你不应该使用 `-s` 标志。**\n\n```text\n# 提供一个能正常使用的例子：\n\n# For Zoho\n-S smtp-use-starttls \\\n-S smtp=smtp://smtp.zoho.com:587 \\\n-S smtp-auth=login \\\n-S smtp-auth-user=<my-email-address> \\\n-S smtp-auth-password=<my-email-password> \\\n-S from=<my-email-address>\n```\n\n控制台有警告？查看 [issue #177](https://github.com/ttionya/vaultwarden-backup/issues/117#issuecomment-1691443179) 了解更多。\n\n<br>\n\n\n\n### 邮件发送测试\n\n你可以使用下面的命令测试邮件发送功能。我们会增加 `-v` 标志以显示详细信息，你无需在 `MAIL_SMTP_VARIABLES` 中重复设置。\n\n```shell\ndocker run --rm -it -e MAIL_SMTP_VARIABLES='<your smtp variables>' ttionya/vaultwarden-backup:latest mail <mail send to>\n\n# Or\n\ndocker run --rm -it -e MAIL_SMTP_VARIABLES='<your smtp variables>' -e MAIL_TO='<mail send to>' ttionya/vaultwarden-backup:latest mail\n```\n\n<br>\n\n\n\n### Ping\n\n我们提供了在备份完成、开始、成功、失败时发送通知的功能。\n\n**搭配 [healthcheck.io](https://healthchecks.io/) 地址或者其他类似的 cron 监控地址是一个不错的选择，这也是我们推荐的。** 对于一些更复杂的通知场景，你可以使用 `_CURL_OPTIONS` 后缀的环境变量来设置 curl 选项。比如你可以添加请求头，改变请求方法等。\n\n对于不同的通知场景，**备份工具提供了 `%{subject}` 和 `%{content}` 占位符用于替换实际的标题和内容**，你可以在以下环境变量中随意使用它们。请注意，标题和内容可能包含空格。对于包含 `_CURL_OPTIONS` 的四个环境变量，将直接替换占位符，保留空格。对于其他 `PING_URL` 环境变量，空格将被替换为 `+`，以符合 URL 规则。\n\n| 环境变量                               | 触发状态        | 测试标识         | 描述                                      |\n|------------------------------------|-------------|--------------|-----------------------------------------|\n| PING_URL                           | 完成（不论成功或失败） | `completion` | 备份完成后发送请求的地址                            |\n| PING_URL_CURL_OPTIONS              |             |  | 与 `PING_URL` 搭配使用的 curl 选项              |\n| PING_URL_WHEN_START                | 开始          | `start` | 备份开始时发送请求的地址                            |\n| PING_URL_WHEN_START_CURL_OPTIONS   |             |  | 与 `PING_URL_WHEN_START` 搭配使用的 curl 选项   |\n| PING_URL_WHEN_SUCCESS              | 成功          | `success` | 备份成功后发送请求的地址                            |\n| PING_URL_WHEN_SUCCESS_CURL_OPTIONS |             |  | 与 `PING_URL_WHEN_SUCCESS` 搭配使用的 curl 选项 |\n| PING_URL_WHEN_FAILURE              | 失败          | `failure` | 备份失败后发送请求的地址                            |\n| PING_URL_WHEN_FAILURE_CURL_OPTIONS |             |  | 与 `PING_URL_WHEN_FAILURE` 搭配使用的 curl 选项 |\n\n<br>\n\n\n\n### Ping 发送测试\n\n你可以使用下面的命令测试 Ping 发送功能。\n\n“test identifier”是[上一节](#ping)表格中的测试标识，你可以使用 `completion`、`start`、`success` 或 `failure`，它决定了使用哪一组环境变量。\n\n```shell\ndocker run --rm -it \\\n  -e PING_URL='<your ping url>' \\\n  -e PING_URL_CURL_OPTIONS='<your curl options for PING_URL>' \\\n  -e PING_URL_WHEN_START='<your ping url>' \\\n  -e PING_URL_WHEN_START_CURL_OPTIONS='<your curl options for PING_URL_WHEN_START>' \\\n  -e PING_URL_WHEN_SUCCESS='<your ping url>' \\\n  -e PING_URL_WHEN_SUCCESS_CURL_OPTIONS='<your curl options for PING_URL_WHEN_SUCCESS>' \\\n  -e PING_URL_WHEN_FAILURE='<your ping url>' \\\n  -e PING_URL_WHEN_FAILURE_CURL_OPTIONS='<your curl options for PING_URL_WHEN_FAILURE>' \\\n  ttionya/vaultwarden-backup:latest ping <test identifier>\n```\n\n<br>\n\n\n\n## 环境变量注意事项\n\n### 使用 `.env` 文件\n\n如果你喜欢使用 env 文件而不是环境变量，可以将包含环境变量的 env 文件映射到容器中的 `/.env` 文件。\n\n```shell\ndocker run -d \\\n  --mount type=bind,source=/path/to/env,target=/.env \\\n  ttionya/vaultwarden-backup:latest\n```\n\n请不要直接使用 `--env-file` 标志，务必通过挂载文件的方式映射环境变量。`--env-file` 标志会错误地处理引号，导致发生意外情况。更多信息请参见 [docker/cli#3630](https://github.com/docker/cli/issues/3630)。\n\n<br>\n\n\n\n### Docker Secrets\n\n作为通过环境变量传递敏感信息的替代方法，可以在前面列出的环境变量后面追加 `_FILE`，使初始化脚本从容器中存在的文件加载这些变量的值。特别是这可以用来从存储在 `/run/secrets/<secret_name>` 文件中的 Docker Secrets 中加载密码。\n\n```shell\ndocker run -d \\\n  -e ZIP_PASSWORD_FILE=/run/secrets/zip-password \\\n  ttionya/vaultwarden-backup:latest\n```\n\n<br>\n\n\n\n### 关于优先级\n\n我们按以下顺序查找环境变量： \n\n1. 直接读取环境变量的值\n2. 读取以 `_FILE` 结尾的环境变量指向的文件的内容\n3. 读取 `.env` 文件中以 `_FILE` 结尾的环境变量指向的文件的内容\n4. 读取 `.env` 文件中环境变量的值\n\n示例：\n\n```txt\n# 对于 1\nMY_ENV=\"example1\"\n\n# 对于 2\nMY_ENV_FILE=\"/path/to/example2\"\n\n# 对于 3 (.env 文件)\nMY_ENV_FILE: \"/path/to/example3\" \n\n# 对于 4 (.env 文件)\nMY_ENV: \"example4\"\n```\n\n<br>\n\n\n\n## 迁移\n\n**用 Rust 编写的非官方 Bitwarden 服务器，以前称为 `bitwarden_rs`，已经改名为 `vaultwarden`。所以这个备份工具也由 `bitwardenrs-backup` 重命名为 `vaultwarden-backup`。**\n\n旧的镜像仍然可以使用，只是被标记为 **DEPRECATED** 了，请尽快迁移到新的镜像。\n\n**迁移说明**\n\n如果你使用自动备份，你只需要把镜像名改为 `ttionya/vaultwarden-backup`。注意你的卷的名称。\n\n如果你使用 `docker-compose`，你需要将 `bitwardenrs/server` 更新为 `vaultwarden/server`，`ttionya/bitwardenrs-backup` 更新为 `ttionya/vaultwarden-backup`。\n\n我们建议重新下载 [`docker-compose.yml`](./docker-compose.yml) 文件，更新你的环境变量，并注意 `volumes` 部分，你可能需要修改它。\n\n<br>\n\n\n\n## 高级\n\n- [以非 root 用户运行](docs/run-as-non-root-user.md)\n- [备份到多个远程目标](docs/multiple-remote-destinations.md)\n- [手动触发备份](docs/manually-trigger-a-backup.md)\n- [使用 PostgreSQL 数据库](docs/using-the-postgresql-backend.md)\n- [使用 MySQL(MariaDB) 数据库](docs/using-the-mysql-or-mariadb-backend.md)\n\n<br>\n\n\n\n## 更新日志\n\n请查看 [CHANGELOG](CHANGELOG.md) 文件。\n\n<br>\n\n\n\n## 感谢\n\n感谢 [JetBrains](https://www.jetbrains.com/) 提供的 OSS 许可证。\n\n<a href=\"https://jb.gg/OpenSourceSupport\" target=\"_blank\"><img src=\"https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.png\" alt=\"JetBrains Logo (Main) logo\" width=\"250\"></a>\n\n<br>\n\n\n\n## 许可证\n\nMIT\n"
        },
        {
          "name": "docker-bake.hcl",
          "type": "blob",
          "size": 1.2861328125,
          "content": "variable \"VERSION\" {\n  default = \"latest\"\n}\n\nvariable \"TEST_BASE_TAG\" {\n  default = \"localhost:5000/base:dev\"\n}\n\ntarget \"docker-metadata-action\" {}\n\ntarget \"_common\" {\n  inherits = [\"docker-metadata-action\"]\n  context = \".\"\n  dockerfile = \"Dockerfile\"\n}\n\ntarget \"_common_multi_platforms\" {\n  platforms = [\n    \"linux/amd64\",\n    \"linux/arm64\",\n    \"linux/arm/v6\",\n    \"linux/arm/v7\"\n  ]\n}\n\ntarget \"_common_tags\" {\n  tags = [\n    \"ttionya/vaultwarden-backup:latest\",\n    \"ttionya/vaultwarden-backup:${VERSION}\",\n    \"ttionya/bitwardenrs-backup:latest\",\n    \"ttionya/bitwardenrs-backup:${VERSION}\",\n    \"ghcr.io/ttionya/vaultwarden-backup:latest\",\n    \"ghcr.io/ttionya/vaultwarden-backup:${VERSION}\"\n  ]\n}\n\ntarget \"image-stable\" {\n  inherits = [\"_common\", \"_common_multi_platforms\", \"_common_tags\"]\n}\n\ntarget \"image-schedule\" {\n  inherits = [\"image-stable\"]\n}\n\ntarget \"image-beta\" {\n  inherits = [\"_common\", \"_common_multi_platforms\"]\n  tags = [\n    \"ttionya/vaultwarden-backup:${VERSION}\"\n  ]\n}\n\ntarget \"image-test-base\" {\n  inherits = [\"_common\", \"_common_multi_platforms\"]\n  tags = [\n    \"${TEST_BASE_TAG}\"\n  ]\n}\n\ntarget \"image-test\" {\n  inherits = [\"_common\"]\n  dockerfile = \"./tests/Dockerfile\"\n  contexts = {\n    base = \"docker-image://${TEST_BASE_TAG}\"\n  }\n  tags = [\n    \"ttionya/vaultwarden-backup:test\"\n  ]\n}\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 1.7841796875,
          "content": "version: '3.4'\n\nservices:\n\n  vaultwarden:\n    image: vaultwarden/server:latest\n    restart: always\n    # environment:\n    #   SIGNUPS_ALLOWED: 'false'\n    #   ADMIN_TOKEN: 'your authentication token'\n    ports:\n      - '127.0.0.1:8200:80'\n    volumes:\n      - vaultwarden-data:/data/\n\n  backup:\n    image: ttionya/vaultwarden-backup:latest\n    restart: always\n    # environment:\n    #   RCLONE_REMOTE_NAME: 'BitwardenBackup'\n    #   RCLONE_REMOTE_DIR: '/BitwardenBackup/'\n    #   RCLONE_GLOBAL_FLAG: ''\n    #   CRON: '5 * * * *'\n    #   ZIP_ENABLE: 'TRUE'\n    #   ZIP_PASSWORD: 'WHEREISMYPASSWORD?'\n    #   ZIP_TYPE: 'zip'\n    #   BACKUP_FILE_SUFFIX: '%Y%m%d'\n    #   BACKUP_KEEP_DAYS: 0\n    #   PING_URL: ''\n    #   PING_URL_CURL_OPTIONS: ''\n    #   PING_URL_WHEN_START: ''\n    #   PING_URL_WHEN_START_CURL_OPTIONS: ''\n    #   PING_URL_WHEN_SUCCESS: ''\n    #   PING_URL_WHEN_SUCCESS_CURL_OPTIONS: ''\n    #   PING_URL_WHEN_FAILURE: ''\n    #   PING_URL_WHEN_FAILURE_CURL_OPTIONS: ''\n    #   MAIL_SMTP_ENABLE: 'FALSE'\n    #   MAIL_SMTP_VARIABLES: ''\n    #   MAIL_TO: ''\n    #   MAIL_WHEN_SUCCESS: 'TRUE'\n    #   MAIL_WHEN_FAILURE: 'TRUE'\n    #   TIMEZONE: 'UTC'\n    volumes:\n      - vaultwarden-data:/bitwarden/data/\n      - vaultwarden-rclone-data:/config/\n    #   - /path/to/env:/.env\n\nvolumes:\n  vaultwarden-data:\n    # Specify the name of the volume where you save the vaultwarden data,\n    # use vaultwarden-data for new users\n    # and bitwardenrs-data for migrated users\n    name: vaultwarden-data\n    # name: bitwardenrs-data\n  vaultwarden-rclone-data:\n    external: true\n    # Specify the name of the volume where you save the rclone configuration,\n    # use vaultwarden-rclone-data for new users\n    # and bitwardenrs-rclone-data for migrated users\n    name: vaultwarden-rclone-data\n    # name: bitwardenrs-rclone-data\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "version",
          "type": "blob",
          "size": 0.0078125,
          "content": "v1.21.3\n"
        }
      ]
    }
  ]
}