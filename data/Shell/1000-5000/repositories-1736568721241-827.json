{
  "metadata": {
    "timestamp": 1736568721241,
    "page": 827,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pote/gpm",
      "stars": 1186,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": "\\#*\n.\\#*\nconfig.make\n.env\nGodeps\n.godeps\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0869140625,
          "content": "env: GOPATH=\"$PWD\"/.godeps\nbefore_install:\n  - sudo apt-get install bc\nscript: make test\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.072265625,
          "content": "## The [Soveran](https://github.com/soveran) Contribution Guidelines.\n\nThis code tries to solve a particular problem with a very simple\nimplementation. We try to keep the code to a minimum while making\nit as clear as possible. The design is very likely finished, and\nif some feature is missing it is possible that it was left out on\npurpose. That said, new usage patterns may arise, and when that\nhappens we are ready to adapt if necessary.\n\nA good first step for contributing is to meet us on IRC and discuss\nideas. We spend a lot of time on #lesscode at freenode, always ready\nto talk about code and simplicity. If connecting to IRC is not an\noption, you can create an issue explaining the proposed change and\na use case. We pay a lot of attention to use cases, because our\ngoal is to keep the code base simple. Usually the result of a\nconversation is the creation of a different tool.\n\nPlease don't start the conversation with a pull request. The code\nshould come at last, and even though it may help to convey an idea,\nmore often than not it draws the attention to a particular\nimplementation.\n"
        },
        {
          "name": "Godeps.sample",
          "type": "blob",
          "size": 0.341796875,
          "content": "# Git repos\ngithub.com/nu7hatch/gotrail               v0.0.2\ngithub.com/replicon/fast-archiver         v1.02\n\n# Subpackages\ngithub.com/garyburd/redigo/redis          a6a0a737c00caf4d4c2bb589941ace0d688168bb\n\n# Bazaar Repo\nlaunchpad.net/gocheck                     r2013.03.03\n\n# Mercurial Repo\ncode.google.com/p/go.example/hello/...    ae081cd1d6cc\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "The MIT License\n\nCopyright (c) 2013 Pablo Astigarraga\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.2177734375,
          "content": "-include ./config.make\n\nall:\n\t-@echo Nothing to do...\n\ninstall:\n\tinstall -d $(DESTDIR)$(prefix)/bin\n\tinstall -m 0755 ./bin/gpm $(DESTDIR)$(prefix)/bin/$(exec)\n\ntest:\n\tcd test && ./run_all_tests.sh\n\n.PHONY: all install test\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.6083984375,
          "content": "# Go Package Manager [![Build Status](https://travis-ci.org/pote/gpm.png?branch=master)](https://travis-ci.org/pote/gpm)\n\nGo Package Manager (or gpm, for short) is a tool that helps achieve reproducible builds for Go applications by specifying the revision of each external Go package that the application depends on.\n\nBeing simple and unobstrusive are some of the most important design choices for gpm: `go get` already provides a way to fetch dependencies, and relies on versions control systems like Git to do it, gpm adds the additional step of setting each dependency repo to the desired revision, neither Go or your application even know about any of this happening, it just works.\n\nTo achieve this, gpm uses a manifest file which is assumed to be called `Godeps` (although you can name it however you want), running gpm fetches all dependencies and ensures each is set to a specified version, down to revision level.\n\n## Basic usage\n\nFor a given project, running `gpm` in the directory containing the `Godeps` file is enough to make sure dependencies in the file are fetched and set to the correct revision.\n\nHowever, if you share your `GOPATH` with other projects running gpm each time can get old, my solution for that is to isolate dependencies by manipulating the `GOPATH`, see the [workspaces](#workspaces) section for details.\n\nYou can see gpm in action under this workflow in the following gif:\n\n![sample gpm usage](./gpm.gif)\n\n## Installation options\n\n### In OSX with Homebrew\n\n```bash\n$ brew install gpm\n```\n\n### In Arch Linux - AUR\n\n```bash\n$ yaourt -S go-gpm\n```\nor\n\n```bash\n$ packer -S go-gpm\n```\n\nCaveat: you'll use `go-gpm` instead of just `gpm` in the command line, as there is a general purpose linux package under that name already.\n\n### Manually with a one-liner\n\nLatest stable release:\n\n```bash\n$ wget https://raw.githubusercontent.com/pote/gpm/v1.4.0/bin/gpm && chmod +x gpm && sudo mv gpm /usr/local/bin\n```\n\n### Manually on *nix using the makefile.\n\n```bash\n$ git clone https://github.com/pote/gpm.git && cd gpm\n$ git checkout v1.4.0 # You can ignore this part if you want to install HEAD.\n$ ./configure\n$ make install\n```\n\n### Use directly from GitHub\n\nAs gpm is a bash script you can always use it directly from GitHub via `wget` or `curl`, this is particularly useful for CI servers and other automated environments.\n\n```bash\n## With wget\n$ wget -qO- https://raw.githubusercontent.com/pote/gpm/v1.4.0/bin/gpm | bash\n\n## With cURL\n$ curl -s https://raw.githubusercontent.com/pote/gpm/v1.4.0/bin/gpm | bash\n```\n\n## The Godeps file\n\n`gpm` expects you to have a file called `Godeps` in the root of your Go application in the format `<import path> <tag/revision>`.\n\nOnce this file is in place, running the `gpm` tool will download those packages and check out the specified versions.\n\n#### Packages\n\nYou can specify packages with the `<import path> <version>` format, where `version` can be a revision number (a git/bazaar/mercurial/svn revision hash) or a tag.\n\n```bash\n$ ls .\nGodeps  foo.go  foo_test.go\n\n$ cat Godeps\ngithub.com/nu7hatch/gotrail               v0.0.2\ngithub.com/replicon/fast-archiver         v1.02\nlaunchpad.net/gocheck                     r2013.03.03   # Bazaar repositories are supported\ncode.google.com/p/go.example/hello/...    ae081cd1d6cc  # And so are Mercurial ones\n```\n\nWhen specifying your dependencies please keep in mind how gpm and the go tool operate: importing a package is setting the version of a cloned repo to a specific revision, so if you are importing several subpackages that are hosted under the same repo only one of them (the top level) should be specified in your Godeps file, in cases where there are no Go packages in the root of the dependency repository you can get Go to fetch the code anyway by appending `/...` to the import path (see last line in the example above)\n\n#### Comments\n\nThe Godeps file accepts comments using a `#` symbol. Everything to the right of a `#` will be\nignored by gpm, as well as empty lines.\n\n#### Extensibility\n\nAs a convention comments can be used to specify lines that gpm core should ignore but are instead intended to affect how a given [gpm plugin](#plugins) behaves.\n\nFor example: a hypothetical `gpm-track` plugin that makes sure a given package is always updated to its last possible version would leverage a line like this one:\n\n```bash\n#[gpm-track] github.com/nu7hatch/gotrail\n```\n\nThis convention makes the Godeps file format extensible, just as with plugins this can help identify common needs that might later on be merged into core without having to sacrifice code simplicity in order to explore new features.\n\n#### Private Repos\n\nBoth gpm and `go get` support using private GitHub repositories! Here's what you need to do in order for a specific machine to be able to access them:\n\n* Generate a GitHub access token by following [these instructions](https://help.github.com/articles/creating-an-access-token-for-command-line-use/).\n* Add the following line to the `~/.netrc` file in your home directory.\n\n```bash\nmachine github.com login <token>\n```\n\nYou can now use gpm (and `go get`) to install private repositories to which your user has access! :)\n\n#### Completeness\n\nAny dependency not specified in the `Godeps` file will be installed by the Go tool to whatever revision the master branch of its hosting repository is pointing at that given moment, as reproducibility is the main goal of gpm it is suggested to be exhaustive and list all your dependencies in the file, with a specific revision.\n\nDo it once, reproduce it anytime, it pays off.\n\n### Commands\n\ngpm has the following commands:\n\n```bash\n$ gpm             # Same as 'install'.\n$ gpm get         # Parses the Godeps file, gets dependencies and sets them\n                  # to the appropriate version but does not install them.\n$ gpm install     # Parses the Godeps file, installs dependencies and sets\n                  # them to the appropriate version.\n$ gpm version     # Outputs version information\n$ gpm help        # Prints this message\n```\n\n### Plugins\n\nAs of version [v1.1.1](https://github.com/pote/gpm/releases/tag/v1.1.1) gpm supports plugins, the intent of which is the ability to add powerful non-core features to gpm without compromising the simplicity of its codebase.\n\nThe way gpm plugin works is simple: whenever an unknown command is passed into gpm it will look for an executable in your `$PATH` called `gpm-<command>` and if it exists it will run it while passing all extra arguments to it, simple yet powerful.\n\nThis brings a lot to the table: plugins can be written in anything, they can be Go binaries, bash scripts, Ruby gems, Python packages, you name it. gpm wants to make it easy for you to extend it. :)\n\n#### Installing plugins through Homebrew\n\nI maintain a [repository with homebrew formulae for gpm plugins](https://github.com/pote/homebrew-gpm_plugins) that you can add to your system with the `brew tap` command:\n\n```bash\n$ brew tap pote/gpm_plugins\n```\n\nAfter you've done this you can install plugins as you would with any other homebrew packge.\n\n```bash\n$ brew install gpm-bootstrap\n```\n\n#### Known Plugins\n\nIf you have written a gpm plugin and want it included please send a pull request to the repo! I love how people have taken to explore possible features using plugins so if you've written one there is about a 99% chance I will include it here. :)\n\n| Name and Link                   | Author                               | Short Description                 | Type        |\n|:-------------------------------:|:------------------------------------:|:----------------------------------|:-----------:|\n| [gpm-bootstrap][plugin-boot]    | [pote][author-pote]                  | Creates an initial Godeps file    | official    |\n| [gpm-git][plugin-git]           | [technosophos][author-technosophos]  | Git management helpers            | third party |\n| [gpm-link][plugin-link]         | [elcuervo][author-elcuervo]          | Dependency vendoring              | third party |\n| [gpm-local][plugin-local]       | [technosophos][author-technosophos]  | Usage of local paths for packages | third party |\n| [gpm-prebuild][plugin-prebuild] | [technosophos][author-technosophos]  | Improves building performance     | third party |\n| [gpm-all][plugin-all]           | [pote][author-pote]                  | Installs multiple sets of deps    | official    |\n| [gpm-lock][plugin-lock]         | [zeeyang][author-zeeyang]            | Lock down dependency versions     | third party |\n\nThere is no real difference on official/third party plugins other than the willingness of the gpm core team to support each, plugins labeled as third party will be supported (or not) by their authors.\n\n[plugin-boot]: https://github.com/pote/gpm-bootstrap\n[plugin-git]: https://github.com/technosophos/gpm-git\n[plugin-link]: https://github.com/elcuervo/gpm-link\n[plugin-local]: https://github.com/technosophos/gpm-local\n[plugin-prebuild]: https://github.com/technosophos/gpm-prebuild\n[plugin-all]: https://github.com/pote/gpm-all\n[plugin-lock]: https://github.com/zeeyang/gpm-lock\n\n[author-pote]: https://github.com/pote\n[author-technosophos]: https://github.com/technosophos\n[author-elcuervo]: https://github.com/elcuervo\n[author-zeeyang]: https://github.com/zeeyang\n\n\n## Workspaces\n\nA question that comes up time and time again is how to handle different workspaces for Go projects.\n\nThis question has many answers, and gpm should be compatible with most of them. My personal way to solve it is to have an environment file per project, which I use to manipulate the GOPATH whenever I switch to a given project.\n\n```bash\n$ cd my_project\n$ cat .env\nexport GOPATH=\"$PWD\"/.dependencies:\"$PWD\"\n$ source .env\n```\nAfter sourcing the env file (in which I usually keep other project-specific configuration variables, like database urls, secret keys, etc) the active GOPATH is a local one: this means that I don't need to run gpm again to make sure my dependencies are in the correct version and there is no danger of conflicting dependency versions across different projects. Everything is isolated and can be easily wiped clean if needed.\n\n### Further Reading\n\nThe creator for the [gpm-git](https://github.com/technosophos/gpm-git) and [gpm-local](https://github.com/technosophos/gpm-local) and an alternative package manager called [Glide](https://github.com/masterminds/glide) wrote a [fantastic blog post explaining the usage and rationale](http://technosophos.com/2014/05/29/why-gpm-is-the-right-go-package-manager.html) of gpm, it sums up explanations for several of the design decisions behind both tools.\n\n### Contributing\n\nLots of people have contributed to make gpm what it is today, if you want to take your time to play around\nwith the code please do so! Opening issues on bugs, feature requests or simple food for thought are a great\nway to contribute, if you send a pull request please be a good citizen and do things in a tidy manner.\n\n* Create a feature branch with a meaningful name.\n* Make sure your commit messages and PR comments are informative.\n* Write a test for your feature if applicable.\n* Always remember to run the test suite with `make test` before comitting.\n\nEither way, thank you **very** much for any form of contribution, even if a patch ends up not being merged\nthe fact that it was sent and forced us to think about it is a contribution in itself.\n\n## License\n\nReleased under MIT License, check LICENSE file for details.\n\n## Authorship/Inspiration/Hugs\n\nThis tool is inspired by Ruby's [dep gem](http://cyx.github.io/dep/) - authored by [@cyx](http://cyx.is/) and [@soveran](http://soveran.com/), big thanks to them and to all the contributions made by the many wonderful people in our [contributors page](https://github.com/pote/gpm/graphs/contributors).\n\ngpm is maintained by [@pote](https://github.com/pote) and [@elcuervo](https:/github.com/elcuervo).\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 0.71484375,
          "content": "#!/usr/bin/env sh\n\nprefix=/usr/local\nexec=gpm\n\nusage()\n{\n    echo \"Usage: configure [-h|--help] [--prefix=prefix] [--exec=exec]\n    \"\n}\n\nwhile [ \"$1\" != \"\" ]; do\n    case \"$1\" in\n        --prefix=*)\n            prefix=${1#--prefix=}\n            ;;\n        --prefix)\n            shift\n            prefix=$1\n            ;;\n        --exec=*)\n            exec=${1#--exec=}\n            ;;\n        -h|--help)\n            usage\n            exit\n            ;;\n        *)\n            echo \"$0: unknown argument $1\" >&2\n            usage\n            exit 1\n            ;;\n    esac\n\n    shift\ndone\n\ncat <<EOF\nconfiguring godeps...\nprefix=$prefix\nexec=$exec\n>> config.make\nEOF\n\ncat > ./config.make <<EOF\nSUBDIRS=\nprefix=$prefix\nexec=$exec\nEOF\n"
        },
        {
          "name": "gpm.gif",
          "type": "blob",
          "size": 583.701171875,
          "content": null
        },
        {
          "name": "gpm_logo.png",
          "type": "blob",
          "size": 136.34765625,
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}