{
  "metadata": {
    "timestamp": 1736568482330,
    "page": 462,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mrworf/plexupdate",
      "stars": 1789,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.6025390625,
          "content": "GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc., <http://fsf.org/>\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {description}\n    Copyright (C) {year}  {fullname}\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  {signature of Ty Coon}, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.1962890625,
          "content": "![plexupdate.sh](http://i.imgur.com/ThY5Rvl.png \"plexupdate\")\n# plexupdate\n\nPlex Update is a bash script which helps you keep Plex Media Server up to date on Linux.\n\nYou can schedule updates to run daily and install Plex Pass beta releases if you have a Plex Pass membership.\n\n# Installation\n\nIn the old days, this used to be a bit of a chore. But no more!\n\n```\nbash -c \"$(wget -qO - https://raw.githubusercontent.com/mrworf/plexupdate/master/extras/installer.sh)\"\n```\n\nwill automatically install the tool as well as any dependencies. This has been tested on Ubuntu, Fedora and CentOS but should, for the most part, work on any modern Linux distribution.\n\nIf you'd ever like to change your configuration, just re-run the installer from the extras folder inside your plexupdate directory. (`/opt/plexupdate/extras/installer.sh` by default)\n\nIf you have any trouble with the installer, or would just prefer to set plexupdate up manually, [read the guide](https://github.com/mrworf/plexupdate/wiki/Manually-installing-plexupdate).\n\n# Advanced options\n\nThere are a few additional options for the more enterprising user. Setting any of these to `yes` will enable the function.\n\n- `CHECKUPDATE`\n  If you didn't install using `git clone` or by running the installer, you can use this option to notify you when there are updates to plexupdate. If you used git or the installer, see `AUTOUPDATE` instead.\n- `PLEXSERVER`\n  If set, and combined with `AUTOINSTALL`, the script will automatically check if the server is in use and defer the update. Great for crontab users. `PLEXSERVER` should be set to the IP/DNS of your Plex Media Server, which typically is 127.0.0.1\n- `PLEXPORT`\n  Sets the port to use along with `PLEXSERVER`\n- `AUTOUPDATE`\n  Makes plexupdate.sh automatically update itself using git. This only works if you installed using `git clone` or by using the installer.\n- `AUTOINSTALL`\n  Automatically installs the newly downloaded version. Currently works for Debian based systems as well as rpm based distros. Requires root permissions.\n- `AUTODELETE`\n  Delete the downloaded package after installation is complete to conserve disk space.\n- `PUBLIC`\n  The default behavior of plexupdate.sh is to download the PlexPass edition of Plex Media Server. Setting this option to `yes` will make it download the public version instead.\n- `FORCE`\n  Normally plexupdate.sh will avoid downloading a file it already has or if it's the same as the installed version. Using this option will force it to download again UNLESS the file already downloaded has the correct checksum. If you have AUTOINSTALL set, plexupdate.sh will then reinstall it.\n- `PRINT_URL`\n  Authenticate, fetch the download URL, print it, and then exit.\n- `DISTRO_INSTALL`\n  The command used to install packages, only change if you need special options. Natively supports Debian and Redhat, so you don't need to set this for these systems.\n  NOTE! If you define this, you MUST define `DISTRO` and `BUILD`\n- `DISTRO` and `BUILD`\n  Override which version to download, use -l option to see what you can select.\n- `TOKEN`\n  If you want to install Plex Pass releases, plexupdate will try to get your account token directly from your Plex Media Server. If you want to use a different token to authenticate, you can enter it here instead. Please read [Authenticating with Plex Pass](https://github.com/mrworf/plexupdate/wiki/Authenticating-with-Plex-Pass) on the wiki for more details.\n- `SYSTEMDUNIT`\n  If set, plexupdate.sh will use a custom systemd unit during `AUTOSTART`, which may be necessary when you are using a custom NAS package. The default is `plexmediaserver.service`.\n\nMost of these options can be specified on the command-line as well, this is just a more convenient way of doing it if you're scripting it. Which brings us to...\n\n## Command Line Options\n\nPlexupdate comes with many command line options. For the most up-to-date list, run plexupdate.sh with -h\n\nHere are some of the more useful ones:\n\n- `--config <path/to/config/file>`\n  Defines the location the script should look for the config file.\n- `--dldir <path/to/where/you/want/files/downloaded/to>`\n  This is the folder that the files will be downloaded to.\n- `--server <Plex server address>`\n  This is the address that Plex Media Server is on. Setting this will enable a check to see if users are on the server prior to the software being updated.\n- `--port <Plex server port>`\n  This is the port that Plex Media Server uses.\n\n# FAQ\n\n## Do I have to use the `extras/installer.sh`?\n\nOf course not, anything you find under `extras/` is optional and only provided as an easier way to get `plexupdate.sh` up and running quickly. Read the guide for [installing plexupdate manually](https://github.com/mrworf/plexupdate/wiki/Manually-installing-plexupdate).\n\n## Why am I getting a warning about email and password being deprecated?\n\nSince just storing your password in plexupdate.conf isn't secure, plexupdate will now use a \"token\" instead. To make this warning go away just re-run the installer (`extras/installer.sh`) or manually remove `EMAIL` and `PASS` from your plexupdate.conf. For more details, see [this wiki article](https://github.com/mrworf/plexupdate/wiki/Authenticating-with-Plex-Pass).\n\n# Need more information?\n\nSee https://github.com/mrworf/plexupdate/wiki for more information\n"
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "plexupdate-core",
          "type": "blob",
          "size": 7.87890625,
          "content": "#!/bin/bash\n######## INDEX ########\n# GPT -> getPlexToken\n# GPS -> getPlexServerToken\n# GPW -> getPlexWebToken\n# HELPERS -> keypair, rawurlencode, trimQuotes\n# RNNG -> running\n# SHARED -> warn, info, warn\n\n######## CONSTANTS ########\n# Current pages we need - Do not change unless Plex.tv changes again\nURL_LOGIN='https://plex.tv/users/sign_in.json'\nURL_DOWNLOAD='https://plex.tv/api/downloads/5.json?channel=plexpass'\nURL_DOWNLOAD_PUBLIC='https://plex.tv/api/downloads/5.json'\n\n# Default options for package managers, override if needed\nREDHAT_INSTALL=\"dnf -y install\"\nDEBIAN_INSTALL=\"dpkg -i\"\nDISTRO_INSTALL=\"\"\n\n#URL for new version check\nUPSTREAM_GIT_URL=\"https://raw.githubusercontent.com/${GIT_OWNER:-mrworf}/plexupdate/${BRANCHNAME:-master}\"\n\n#Files \"owned\" by plexupdate, for autoupdate\nPLEXUPDATE_FILES=\"plexupdate.sh plexupdate-core extras/installer.sh extras/cronwrapper\"\n\n\n######## FUNCTIONS ########\n#### Token Management #####\n\n# GPT\ngetPlexToken() {\n\tif [ -n \"$TOKEN\" ]; then\n\t\t[ \"$VERBOSE\" = \"yes\" ] && info \"Fetching token from config\"\n\telif getPlexServerToken; then\n\t\t[ \"$VERBOSE\" = \"yes\" ] && info \"Fetching token from Plex server\"\n\telif [ -z \"$TOKEN\" -a -n \"$EMAIL\" -a -n \"$PASS\" ]; then\n\t\twarn \"Storing your email and password has been deprecated. Please re-run extras/installer.sh or see https://github.com/mrworf/plexupdate#faq\"\n\t\tgetPlexWebToken\n\t# Check if we're connected to a terminal\n\telif [ -z \"$TOKEN\" -a -t 0 ]; then\n\t\tinfo \"To continue, you will need to provide your Plex account credentials.\"\n\t\tinfo \"Your email and password will only be used to retrieve a 'token' and will not be saved anywhere.\"\n\t\techo\n\t\twhile true; do\n\t\t\tread -e -p \"PlexPass Email Address: \" -i \"$EMAIL\" EMAIL\n\t\t\tif [ -z \"${EMAIL}\" ] || [[ \"$EMAIL\" == *\"@\"* ]] && [[ \"$EMAIL\" != *\"@\"*\".\"* ]]; then\n\t\t\t\tinfo \"Please provide a valid email address\"\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\twhile true; do\n\t\t\tread -e -p \"PlexPass Password: \" -i \"$PASS\" PASS\n\t\t\tif [ -z \"$PASS\" ]; then\n\t\t\t\tinfo \"Please provide a password\"\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\tgetPlexWebToken\n\tfi\n\n\t[ -n \"$TOKEN\" ] # simulate exit status\n}\n\n# GPS\ngetPlexServerToken() {\n\tif [ -f /etc/default/plexmediaserver ]; then\n\t\tsource /etc/default/plexmediaserver\n\tfi\n\n\t# List possible locations to find Plex Server preference file\n\tlocal VALIDPATHS=(\"${PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR}\" \"/var/lib/plexmediaserver/Library/Application Support/\" \"${HOME}/Library/Application Support/\")\n\tlocal PREFFILE=\"/Plex Media Server/Preferences.xml\"\n\n\tfor I in \"${VALIDPATHS[@]}\" ; do\n\t\tif [ ! -z \"${I}\" -a -f \"${I}${PREFFILE}\" ]; then\n\t\t\t# When running installer.sh directly from wget, $0 will return bash\n\t\t\tif [ \"$(basename $0)\" = \"installer.sh\" -o \"$(basename $0)\" = \"bash\" ]; then\n\t\t\t\tTOKEN=$(sudo sed -n 's/.*PlexOnlineToken=\"\\([[:alnum:]_-]*\\).*\".*/\\1/p' \"${I}${PREFFILE}\" 2>/dev/null)\n\t\t\telse\n\t\t\t\tTOKEN=$(sed -n 's/.*PlexOnlineToken=\"\\([[:alnum:]_-]*\\).*\".*/\\1/p' \"${I}${PREFFILE}\" 2>/dev/null)\n\t\t\tfi\n\t\tfi\n\tdone\n\n\t[ -n \"$TOKEN\" ] # simulate exit status\n}\n\n# GPW\ngetPlexWebToken() {\n\tlocal FILE_POSTDATA=$(mktemp /tmp/plexupdate.postdata.XXXX)\n\tlocal FILE_RAW=$(mktemp /tmp/plexupdate.raw.XXXX)\n\tlocal FILE_FAILCAUSE=$(mktemp /tmp/plexupdate.failcause.XXXX)\n\n\t# Fields we need to submit for login to work\n\t#\n\t# Field\t\t\tValue\n\t# utf8\t\t\t&#x2713;\n\t# authenticity_token\t<Need to be obtained from web page>\n\t# user[login]\t\t$EMAIL\n\t# user[password]\t$PASS\n\t# user[remember_me]\t0\n\t# commit\t\tSign in\n\n\t# Build post data\n\techo -ne >\"${FILE_POSTDATA}\" \"$(keypair \"user[login]\" \"${EMAIL}\" )\"\n\techo -ne >>\"${FILE_POSTDATA}\" \"&$(keypair \"user[password]\" \"${PASS}\" )\"\n\techo -ne >>\"${FILE_POSTDATA}\" \"&$(keypair \"user[remember_me]\" \"0\" )\"\n\n\t# Authenticate (using Plex Single Sign On)\n\twget --header \"X-Plex-Client-Identifier: 4a745ae7-1839-e44e-1e42-aebfa578c865\" --header \"X-Plex-Product: Plex SSO\" \"${URL_LOGIN}\" --post-file=\"${FILE_POSTDATA}\" -q -S -O \"${FILE_FAILCAUSE}\" 2>\"${FILE_RAW}\"\n\n\t# Provide some details to the end user\n\tlocal RESULTCODE=$(head -n1 \"${FILE_RAW}\" | grep -oe '[1-5][0-9][0-9]')\n\tif [ $RESULTCODE -eq 401 ]; then\n\t\terror \"Username and/or password incorrect\"\n\telif [ $RESULTCODE -ne 201 ]; then\n\t\terror \"Failed to log in, debug information:\"\n\t\tcat \"${FILE_RAW}\" >&2\n\telse\n\t\tTOKEN=$(<\"${FILE_FAILCAUSE}\"  grep -ioe '\"authToken\":\"[^\"]*' | cut -c 14-)\n\tfi\n\n\t# Clean up temp files since they may contain sensitive information\n\trm \"${FILE_FAILCAUSE}\" \"${FILE_POSTDATA}\" \"${FILE_RAW}\"\n\n\t[ -n \"$TOKEN\" ] # simulate exit status\n}\n\n# HELPERS\nkeypair() {\n\tlocal key=\"$( rawurlencode \"$1\" )\"\n\tlocal val=\"$( rawurlencode \"$2\" )\"\n\n\techo \"${key}=${val}\"\n}\n\nrawurlencode() {\n\tlocal string=\"${1}\"\n\tlocal strlen=${#string}\n\tlocal encoded=\"\"\n\n\tfor (( pos=0 ; pos<strlen ; pos++ )); do\n\t\tc=${string:$pos:1}\n\t\tcase \"$c\" in\n\t\t[-_.~a-zA-Z0-9] ) o=\"${c}\" ;;\n\t\t* )               printf -v o '%%%02x' \"'$c\"\n\t\tesac\n\t\tencoded+=\"${o}\"\n\tdone\n\techo \"${encoded}\"\n}\n\ntrimQuotes() {\n\tlocal __buffer=$1\n\n\t# Remove leading single quote\n\t__buffer=${__buffer#\\'}\n\t# Remove ending single quote\n\t__buffer=${__buffer%\\'}\n\n\techo $__buffer\n}\n\ngetRemoteSHA() {\n\t# these two lines can't be combined. `local RESULT=` will gobble up the return\n\tlocal RESULT\n\tRESULT=$(wget -q \"$1\" -O - 2>/dev/null) || return 1\n\tsha1sum <<< \"$RESULT\" | cut -f1 -d\" \"\n}\n\ngetLocalSHA() {\n\t[ -f \"$1\" ] || return 1\n\tsha1sum \"$1\" | cut -f1 -d\" \"\n}\n\n# RNNG\nrunning() {\n\t# If a server is unclaimed, it probably doesn't have TLS enabled either\n\tlocal DATA\n\t# get Plex sessions\n\tDATA=\"$(wget -q -O - http://$1:$2/status/sessions)\"\n\tlocal RET=$?\n\t# and live TV/DVR sessions\n\tDATA+=\"$(wget -q -O - http://$1:$2/livetv/sessions)\"\n\n\tif [ ${RET} -eq 6 ]; then\n\t\t# Server may be claimed, in which case we should use TLS and pass a token\n\t\tgetPlexToken\n\t\tDATA=\"$(wget --no-check-certificate -q -O - https://$1:$2/status/sessions?X-Plex-Token=$TOKEN)\"\n\t\tRET=$?\n\t\tDATA+=\"$(wget --no-check-certificate -q -O - https://$1:$2/livetv/sessions?X-Plex-Token=$TOKEN)\"\n\tfi\n\n\tif [ ${RET} -eq 0 ]; then\n\t\t# Get a total count of active media (MediaContainer size), then deduct one for every paused stream.\n\t\t# If all streams are paused, we consider the server to not be active.\n\t\tlocal mediacount=\"$(awk -F'\"' '/<MediaContainer size=\"[0-9]+\">/ {count+=$2}; /<Player[^>]* state=\"paused\"/ {count--}; END {print count}' <<< \"${DATA}\")\"\n\t\t[ \"$VERBOSE\" = \"yes\" ] && printf 'Activity check reports a count of %i, based on return data of:\\n%s\\n\\n' \"${mediacount}\" \"${DATA}\" >&2\n\t\t[ $mediacount -gt 0 ] && return 0\n\tfi\n\n\t# if we don't know for sure that Plex is busy, assume that it's not so the update can proceed\n\treturn 1\n}\n\nverifyToken() {\n\twget -qO /dev/null \"https://plex.tv/api/resources?X-Plex-Token=${TOKEN}\"\n}\n\nisNewerVersion() {\n\t# Returns true ONLY if 1 > 2.\n\t[ -z \"$1\" ] && return 1\n\t[ -z \"$2\" ] && return\n\t[ \"$1\" = \"$2\" ] && return 1\n\tif hash dpkg 2>/dev/null; then\n\t\tdpkg --compare-versions \"$1\" gt \"$2\"\n\telif sort -V --version &>/dev/null; then\n\t\t[ \"$(printf \"$1\\n$2\" | sort -Vr | head -n1)\" = \"$1\" ]\n\telse\n\t\t# sort has had -V since at least 2009, so nobody should ever see this\n\t\twarn \"Unable to compare version numbers, assuming '$1' is newer.\"\n\tfi\n}\n\nparseVersion() {\n\tif [ \"${REDHAT}\" = \"yes\" ]; then\n\t\tcut -f2- -d- <<< \"$1\" | cut -f1-4 -d.\n\telse\n\t\tcut -f2 -d_ <<< \"$1\"\n\tfi\n}\n\ngetPlexVersion() {\n\tif [ \"${REDHAT}\" != \"yes\" ]; then\n\t\tdpkg-query --showformat='${Version}' --show plexmediaserver 2>/dev/null\n\telif hash rpm 2>/dev/null; then\n\t\tlocal rpmtemp\n\t\tif rpmtemp=$(rpm -q plexmediaserver); then\n\t\t\tparseVersion \"$rpmtemp\"\n\t\telse\n\t\t\treturn 1\n\t\tfi\n\telse\n\t\terror \"Unknown OS, exiting.\"\n\t\texit 1\n\tfi\n}\n\nverboseOutput() {\n\tif [ \"$VERBOSE\" = \"yes\" ]; then\n\t\tfor i in $@; do\n\t\t\tinfo \"$i=${!i}\"\n\t\tdone\n\tfi\n}\n\n# Shared functions\n\n# SHARED\nwarn() {\n\techo \"WARNING: $@\" >&1\n}\n\ninfo() {\n\techo \"$@\" >&1\n}\n\nerror() {\n\techo \"ERROR: $@\" >&2\n}\n\n# Intentionally leaving this hard to find so that people aren't trying to use it manually.\nif [ \"$(basename \"$0\")\" = \"get-plex-token\" ]; then\n\t[ -f /etc/plexupdate.conf ] && source /etc/plexupdate.conf\n\tgetPlexToken && info \"Token = $TOKEN\"\nfi\n"
        },
        {
          "name": "plexupdate.sh",
          "type": "blob",
          "size": 16.9150390625,
          "content": "#!/bin/bash\n#\n# Plex Linux Server download tool\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n# This tool will download the latest version of Plex Media\n# Server for Linux. It supports both the public versions\n# as well as the PlexPass versions.\n#\n# See https://github.com/mrworf/plexupdate for more details.\n#\n# Returns 0 on success\n#         1 on error\n#         3 if page layout has changed.\n#         4 if download fails\n#         6 if update was deferred due to usage\n#         7 if update is available (requires --check-update)\n#        10 if new file was downloaded/installed (requires --notify-success)\n#       255 configuration is invalid\n#\n# All other return values not documented.\n#\n# Call program with -h for available options\n#\n# Enjoy!\n#\n# Check out https://github.com/mrworf/plexupdate for latest version\n# and also what's new.\n#\n##############################################################################\n# Quick-check before we allow bad things to happen\nif [ -z \"${BASH_VERSINFO}\" ]; then\n\techo \"ERROR: You must execute this script with BASH\" >&2\n\texit 255\nfi\n\n##############################################################################\n# Don't change anything below this point, use a plexupdate.conf file\n# to override this section.\n# DOWNLOADDIR is the full directory path you would like the download to go.\n#\nEMAIL=\nPASS=\nDOWNLOADDIR=\"/tmp\"\nPLEXSERVER=\nPLEXPORT=32400\n\n# Defaults\n# (aka \"Advanced\" settings, can be overriden with config file)\nFORCE=no\nPUBLIC=no\nAUTOINSTALL=no\nAUTODELETE=no\nAUTOUPDATE=no\nAUTOSTART=no\nARCH=$(uname -m)\n# manual fix for mismatch between Plex arch values and uname -m values\n[ \"$ARCH\" = \"armv7l\" ] && ARCH=\"armv7neon\"\n[ \"$ARCH\" = \"i686\" ] && ARCH=\"x86\"\nBUILD=\"linux-$ARCH\"\nSHOWPROGRESS=no\nWGETOPTIONS=\"\"\t# extra options for wget. Used for progress bar.\nCHECKUPDATE=yes\nNOTIFY=no\nCHECKONLY=no\nSYSTEMDUNIT=plexmediaserver.service\n\nFILE_SHA=$(mktemp /tmp/plexupdate.sha.XXXX)\nFILE_WGETLOG=$(mktemp /tmp/plexupdate.wget.XXXX)\nSCRIPT_PATH=\"$(dirname \"$0\")\"\n\n######################################################################\n\nusage() {\n\techo \"Usage: $(basename $0) [-acdfFhlpPqsuU] [<long options>]\"\n\techo \"\"\n\techo \"\"\n\techo \"    -a Auto install if download was successful (requires root)\"\n\techo \"    -d Auto delete after auto install\"\n\techo \"    -f Force download/update even if the newest release is already installed\"\n\techo \"    -h This help\"\n\techo \"    -l List available builds and distros\"\n\techo \"    -p Public Plex Media Server version\"\n\techo \"    -P Show progressbar when downloading big files\"\n\techo \"    -r Print download URL and exit\"\n\techo \"    -s Auto start (needed for some distros)\"\n\techo \"    -u Auto update plexupdate.sh before running it (default with installer)\"\n\techo \"    -U Do not autoupdate plexupdate.sh\"\n\techo \"    -v Show additional debug information\"\n\techo \"\"\n\techo \"    Long Argument Options:\"\n\techo \"    --check-update Check for new version of plex only\"\n\techo \"    --config <path/to/config/file> Configuration file to use\"\n\techo \"    --dldir <path/to/download/dir> Download directory to use\"\n\techo \"    --help This help\"\n\techo \"    --notify-success Set exit code 10 if update is available/installed\"\n\techo \"    --port <Plex server port> Port for Plex Server. Used with --server\"\n\techo \"    --server <Plex server address> Address of Plex Server\"\n\techo \"    --token Manually specify the token to use to download Plex Pass releases\"\n\techo \"\"\n\texit 0\n}\n\nif ! source \"${SCRIPT_PATH}/plexupdate-core\"; then\n\techo \"ERROR: plexupdate-core can't be found. Please redownload plexupdate and try again.\" >2\n\texit 1\nfi\n\n# Setup an exit handler so we cleanup\ncleanup() {\n\trm \"${FILE_SHA}\" \"${FILE_WGETLOG}\" &> /dev/null\n}\ntrap cleanup EXIT\n\n# Parse commandline\nALLARGS=( \"$@\" )\noptstring=\"-o acCdfFhlpPqrSsuUv -l config:,dldir:,email:,pass:,server:,port:,token:,notify-success,check-update,help\"\nGETOPTRES=$(getopt $optstring -- \"$@\")\nif [ $? -eq 1 ]; then\n\texit 1\nfi\n\nset -- ${GETOPTRES}\n\nfor i in `seq 1 $#`; do\n\tif [ \"${!i}\" == \"--config\" ]; then\n\t\tconfig_index=$((++i))\n\t\tCONFIGFILE=$(trimQuotes ${!config_index})\n\t\tbreak\n\tfi\ndone\n\n#DEPRECATED SUPPORT: Temporary error checking to notify people of change from .plexupdate to plexupdate.conf\n# We have to double-check that both files exist before trying to stat them. This is going away soon.\nif [ -z \"${CONFIGFILE}\" -a -f ~/.plexupdate -a ! -f /etc/plexupdate.conf ] || \\\n\t([ -f \"${CONFIGFILE}\" -a -f ~/.plexupdate ] && [ `stat -Lc %i \"${CONFIGFILE}\"` == `stat -Lc %i ~/.plexupdate` ]); then\n\twarn \".plexupdate has been deprecated. Please run ${SCRIPT_PATH}/extras/installer.sh to update your configuration.\"\n\tif [ -t 1 ]; then\n\t\tfor i in `seq 1 5`; do echo -n .\\ ; sleep 1; done\n\t\techo .\n\tfi\n\tCONFIGFILE=~/.plexupdate\nfi\n#DEPRECATED END\n\n# If a config file was specified, or if /etc/plexupdate.conf exists, we'll use it. Otherwise, just skip it.\nsource \"${CONFIGFILE:-\"/etc/plexupdate.conf\"}\" 2>/dev/null\n\nwhile true;\ndo\n\tcase \"$1\" in\n\t\t(-h) usage;;\n\t\t(-a) AUTOINSTALL=yes;;\n\t\t(-c) error \"CRON option is deprecated, please use cronwrapper (see README.md)\"; exit 255;;\n\t\t(-C) error \"CRON option is deprecated, please use cronwrapper (see README.md)\"; exit 255;;\n\t\t(-d) AUTODELETE=yes;;\n\t\t(-f) FORCE=yes;;\n\t\t(-F) error \"FORCEALL/-F option is deprecated, please use FORCE/-f instead\"; exit 255;;\n\t\t(-l) LISTOPTS=yes;;\n\t\t(-p) PUBLIC=yes;;\n\t\t(-P) SHOWPROGRESS=yes;;\n\t\t(-q) error \"QUIET option is deprecated, please redirect to /dev/null instead\"; exit 255;;\n\t\t(-r) PRINT_URL=yes;;\n\t\t(-s) AUTOSTART=yes;;\n\t\t(-u) AUTOUPDATE=yes;;\n\t\t(-U) AUTOUPDATE=no;;\n\t\t(-v) VERBOSE=yes;;\n\n\t\t(--config) shift;; #gobble up the paramater and silently continue parsing\n\t\t(--dldir) shift; DOWNLOADDIR=$(trimQuotes ${1});;\n\t\t(--email) shift; warn \"EMAIL is deprecated. Use TOKEN instead.\"; EMAIL=$(trimQuotes ${1});;\n\t\t(--pass) shift; warn \"PASS is deprecated. Use TOKEN instead.\"; PASS=$(trimQuotes ${1});;\n\t\t(--server) shift; PLEXSERVER=$(trimQuotes ${1});;\n\t\t(--port) shift; PLEXPORT=$(trimQuotes ${1});;\n\t\t(--token) shift; TOKEN=$(trimQuotes ${1});;\n\t\t(--help) usage;;\n\n\t\t(--notify-success) NOTIFY=yes;;\n\t\t(--check-update) CHECKONLY=yes;;\n\n\t\t(--) ;;\n\t\t(-*) error \"Unrecognized option $1\"; usage; exit 1;;\n\t\t(*)  break;;\n\tesac\n\tshift\ndone\n\n# Sanity, make sure wget is in our path...\nif ! hash wget 2>/dev/null; then\n\terror \"This script requires wget in the path. It could also signify that you don't have the tool installed.\"\n\texit 1\nfi\n\nif [ \"${SHOWPROGRESS}\" = \"yes\" ]; then\n\tif ! wget --show-progress -V &>/dev/null; then\n\t\twarn \"Your wget is too old to support --show-progress, ignoring\"\n\telse\n\t\tWGETOPTIONS=\"--show-progress\"\n\tfi\nfi\n\nif [ \"${CRON}\" = \"yes\" ]; then\n\terror \"CRON has been deprecated, please use cronwrapper (see README.md)\"\n\texit 255\nfi\n\nif [ \"${KEEP}\" = \"yes\" ]; then\n\terror \"KEEP is deprecated and must be removed from config file\"\n\texit 255\nfi\n\nif [ \"${FORCEALL}\" = \"yes\" ]; then\n\terror \"FORCEALL is deprecated, please use FORCE instead\"\n\texit 255\nfi\n\nif [ ! -z \"${RELEASE}\" ]; then\n\terror \"RELEASE keyword is deprecated and must be removed from config file\"\n\terror \"Use DISTRO and BUILD instead to manually select what to install (check README.md)\"\n\texit 255\nfi\n\nif [ \"${AUTOUPDATE}\" = \"yes\" ]; then\n\tif ! hash git 2>/dev/null; then\n\t\terror \"You need to have git installed for this to work\"\n\t\texit 1\n\tfi\n\n\tpushd \"${SCRIPT_PATH}\" >/dev/null\n\n\tif [ ! -d .git ]; then\n\t\twarn \"This is not a git repository. Auto-update only works if you've done a git clone\"\n\telif ! git diff --quiet; then\n\t\twarn \"You have made changes to the plexupdate files, cannot auto update\"\n\telse\n\t\tif [ -z \"${BRANCHNAME}\" ]; then\n\t\t\tBRANCHNAME=\"$(git symbolic-ref -q --short HEAD)\"\n\t\tfi\n\t\t# Force FETCH_HEAD to point to the correct branch (for older versions of git which don't default to current branch)\n\t\tif git fetch origin ${BRANCHNAME} --quiet && ! git diff --quiet FETCH_HEAD; then\n\t\t\tinfo \"Auto-updating...\"\n\n\t\t\tif [ \"${BRANCHNAME}\" != \"$(git symbolic-ref -q --short HEAD)\" ]; then\n\t\t\t\tgit checkout \"${BRANCHNAME}\"\n\t\t\tfi\n\n\t\t\t# Use an associative array to store permissions. If you're running bash < 4, the declare will fail and we'll\n\t\t\t# just run in \"dumb\" mode without trying to restore permissions\n\t\t\tdeclare -A FILE_OWNER FILE_PERMS && \\\n\t\t\tfor filename in $PLEXUPDATE_FILES; do\n\t\t\t\tFILE_OWNER[$filename]=$(stat -c \"%u:%g\" \"$filename\")\n\t\t\t\tFILE_PERMS[$filename]=$(stat -c \"%a\" \"$filename\")\n\t\t\tdone\n\n\t\t\tif ! git merge --quiet FETCH_HEAD; then\n\t\t\t\terror 'Unable to update git, try running \"git pull\" manually to see what is wrong'\n\t\t\t\texit 1\n\t\t\tfi\n\n\t\t\tif [ ${#FILE_OWNER[@]} -gt 0 ]; then\n\t\t\t\tfor filename in $PLEXUPDATE_FILES; do\n\t\t\t\t\tchown ${FILE_OWNER[$filename]} $filename &> /dev/null || error \"Failed to restore ownership for '$filename' after auto-update\"\n\t\t\t\t\tchmod ${FILE_PERMS[$filename]} $filename &> /dev/null || error \"Failed to restore permissions for '$filename' after auto-update\"\n\t\t\t\tdone\n\t\t\tfi\n\n\t\t\t# .git permissions don't seem to be affected by running as root even though files inside do, so just reset\n\t\t\t# the permissions to match the folder\n\t\t\tchown -R --reference=.git .git\n\n\t\t\tinfo \"Update complete\"\n\n\t\t\t#make sure we're back in the right relative location before testing $0\n\t\t\tpopd >/dev/null\n\n\t\t\tif [ ! -f \"$0\" ]; then\n\t\t\t\terror \"Unable to relaunch, couldn't find $0\"\n\t\t\t\texit 1\n\t\t\telse\n\t\t\t\t[ -x \"$0\" ] || chmod 755 \"$0\"\n\t\t\t\t\"$0\" ${ALLARGS[@]}\n\t\t\t\texit $?\n\t\t\tfi\n\t\tfi\n\tfi\n\n\t#we may have already returned, so ignore any errors as well\n\tpopd &>/dev/null\nfi\n\nif [ \"${AUTOINSTALL}\" = \"yes\" -o \"${AUTOSTART}\" = \"yes\" ] && [ ${EUID} -ne 0 ]; then\n\terror \"You need to be root to use AUTOINSTALL/AUTOSTART option.\"\n\texit 1\nfi\n\n\n# Remove any ~ or other oddness in the path we're given\nDOWNLOADDIR_PRE=${DOWNLOADDIR}\nDOWNLOADDIR=\"$(eval cd ${DOWNLOADDIR// /\\\\ } 2>/dev/null && pwd)\"\nif [ ! -d \"${DOWNLOADDIR}\" ]; then\n\terror \"Download directory does not exist or is not a directory (tried \\\"${DOWNLOADDIR_PRE}\\\")\"\n\texit 1\nfi\n\nif [ -z \"${DISTRO_INSTALL}\" ]; then\n\tif [ -z \"${DISTRO}\" ]; then\n\t\t# Detect if we're running on redhat instead of ubuntu\n\t\tif [ -f /etc/redhat-release ]; then\n\t\t\tREDHAT=yes\n\t\t\tDISTRO=\"redhat\"\n\t\t\tif ! hash dnf 2>/dev/null; then\n\t\t\t\tDISTRO_INSTALL=\"${REDHAT_INSTALL/dnf/yum}\"\n\t\t\telse\n\t\t\t\tDISTRO_INSTALL=\"${REDHAT_INSTALL}\"\n\t\t\tfi\n\t\telse\n\t\t\tREDHAT=no\n\t\t\tDISTRO=\"debian\"\n\t\t\tDISTRO_INSTALL=\"${DEBIAN_INSTALL}\"\n\t\tfi\n\tfi\nelse\n\tif [ -z \"${DISTRO}\" -o -z \"${BUILD}\" ]; then\n\t\terror \"Using custom DISTRO_INSTALL requires custom DISTRO and BUILD too\"\n\t\texit 255\n\tfi\nfi\n\nif [ \"${CHECKUPDATE}\" = \"yes\" -a \"${AUTOUPDATE}\" = \"no\" ]; then\n\tpushd \"${SCRIPT_PATH}\" > /dev/null\n\tfor filename in $PLEXUPDATE_FILES; do\n\t\t[ -f \"$filename\" ] || error \"Update check failed. '$filename' could not be found\"\n\n\t\tREMOTE_SHA=$(getRemoteSHA \"$UPSTREAM_GIT_URL/$filename\") || error \"Update check failed. Unable to fetch '$UPSTREAM_GIT_URL/$filename'.\"\n\t\tLOCAL_SHA=$(getLocalSHA \"$filename\")\n\t\tif [ \"$REMOTE_SHA\" != \"$LOCAL_SHA\" ]; then\n\t\t\tinfo \"Newer version of this script is available at https://github.com/${GIT_OWNER:-mrworf}/plexupdate\"\n\t\t\tbreak\n\t\tfi\n\tdone\n\tpopd > /dev/null\nfi\n\nif [ \"${PUBLIC}\" = \"no\" ] && ! getPlexToken; then\n\terror \"Unable to get Plex token, falling back to public release\"\n\tPUBLIC=\"yes\"\nfi\n\nif [ \"$PUBLIC\" != \"no\" ]; then\n\t# It's a public version, so change URL\n\tURL_DOWNLOAD=${URL_DOWNLOAD_PUBLIC}\nfi\n\nif [ \"${LISTOPTS}\" = \"yes\" ]; then\n\twgetresults=\"$(wget \"${URL_DOWNLOAD}\" -o \"${FILE_WGETLOG}\" -O -)\"\n\tif [ $? -ne 0 ]; then\n\t\terror \"Unable to retrieve available builds due to a wget error, run with -v for details\"\n\t\t[ \"$VERBOSE\" = \"yes\" ] && cat \"${FILE_WGETLOG}\"\n\t\texit 1\n\tfi\n\topts=\"$(grep -oe '\"label\"[^}]*' <<<\"${wgetresults}\" | grep -v Download | sed 's/\"label\":\"\\([^\"]*\\)\",\"build\":\"\\([^\"]*\\)\",\"distro\":\"\\([^\"]*\\)\".*/\"\\3\" \"\\2\" \"\\1\"/' | uniq | sort)\"\n\teval opts=( \"DISTRO\" \"BUILD\" \"DESCRIPTION\" \"======\" \"=====\" \"==============================================\" $opts )\n\n\tBUILD=\n\tDISTRO=\n\n\tfor X in \"${opts[@]}\" ; do\n\t\tif [ -z \"$DISTRO\" ]; then\n\t\t\tDISTRO=\"$X\"\n\t\telif [ -z \"$BUILD\" ]; then\n\t\t\tBUILD=\"$X\"\n\t\telse\n\t\t\tprintf \"%-12s %-30s %s\\n\" \"$DISTRO\" \"$BUILD\" \"$X\"\n\t\t\tBUILD=\n\t\t\tDISTRO=\n\t\tfi\n\tdone\n\texit 0\nfi\n\n# Extract the URL for our release\ninfo \"Retrieving list of available distributions\"\n\n# Set \"X-Plex-Token\" to the auth token, if no token is specified or it is invalid, the list will return public downloads by default\nwgetresults=\"$(wget --header \"X-Plex-Token:\"${TOKEN}\"\" \"${URL_DOWNLOAD}\" -o \"${FILE_WGETLOG}\" -O -)\"\nif [ $? -ne 0 ]; then\n\terror \"Unable to retrieve the URL needed for download due to a wget error, run with -v for details\"\n\t[ \"$VERBOSE\" = \"yes\" ] && cat \"${FILE_WGETLOG}\"\n\texit 1\nfi\nRELEASE=$(grep -ioe '\"label\"[^}]*' <<<\"${wgetresults}\" | grep -i \"\\\"distro\\\":\\\"${DISTRO}\\\"\" | grep -m1 -i \"\\\"build\\\":\\\"${BUILD}\\\"\")\nDOWNLOAD=$(echo ${RELEASE} | grep -m1 -ioe 'https://[^\\\"]*')\nCHECKSUM=$(echo ${RELEASE} | grep -ioe '\\\"checksum\\\"\\:\\\"[^\\\"]*' | sed 's/\\\"checksum\\\"\\:\\\"//')\n\nverboseOutput RELEASE DOWNLOAD CHECKSUM\n\nif [ -z \"${DOWNLOAD}\" ]; then\n\tif [ \"$DISTRO\" = \"ubuntu\" -a \"$BUILD\" = \"linux-ubuntu-armv7l\" ]; then\n\t\terror \"Plex Media Server on Raspbian is not officially supported and script cannot download a working package.\"\n\telse\n\t\terror \"Unable to retrieve the URL needed for download (Query DISTRO: $DISTRO, BUILD: $BUILD)\"\n\tfi\n\tif [ ! -z \"${RELEASE}\" ]; then\n\t\terror \"It seems release info is missing a link\"\n\t\terror \"Please try https://plex.tv and confirm it works there before reporting this issue\"\n\tfi\n\texit 3\nelif [ -z \"${CHECKSUM}\" ]; then\n\terror \"Unable to retrieve a checksum for the download. Please try https://plex.tv/downloads before reporting this issue.\"\n\texit 3\nfi\n\nFILENAME=\"$(basename 2>/dev/null ${DOWNLOAD})\"\nif [ $? -ne 0 ]; then\n\terror \"Failed to parse HTML, download cancelled.\"\n\texit 3\nfi\n\necho \"${CHECKSUM}  ${DOWNLOADDIR}/${FILENAME}\" >\"${FILE_SHA}\"\n\nif [ \"${PRINT_URL}\" = \"yes\" ]; then\n\tinfo \"${DOWNLOAD}\"\n\texit 0\nfi\n\n# By default, try downloading\nSKIP_DOWNLOAD=\"no\"\n\nINSTALLED_VERSION=\"$(getPlexVersion)\" || warn \"Unable to detect installed version, first time?\"\nFILE_VERSION=\"$(parseVersion \"${FILENAME}\")\"\nverboseOutput INSTALLED_VERSION FILE_VERSION\n\nif [ \"${REDHAT}\" = \"yes\" -a \"${AUTOINSTALL}\" = \"yes\" -a \"${AUTOSTART}\" = \"no\" ]; then\n\twarn \"Your distribution may require the use of the AUTOSTART [-s] option for the service to start after the upgrade completes.\"\nfi\n\nif [ \"${CHECKONLY}\" = \"yes\" ]; then\n\tif [ -n \"${INSTALLED_VERSION}\" ] && isNewerVersion \"$FILE_VERSION\" \"$INSTALLED_VERSION\"; then\n\t\tinfo \"Your OS reports Plex $INSTALLED_VERSION installed, newer version is available (${FILE_VERSION})\"\n\t\texit 7\n\telif [ -n \"${INSTALLED_VERSION}\" ]; then\n\t\tinfo \"You are running the latest version of Plex (${INSTALLED_VERSION})\"\n\tfi\n\texit 0\nfi\n\nif ! isNewerVersion \"$FILE_VERSION\" \"$INSTALLED_VERSION\" && [ \"${FORCE}\" != \"yes\" ]; then\n\tinfo \"Your OS reports the latest version of Plex ($INSTALLED_VERSION) is already installed. Use -f to force download.\"\n\texit 0\nfi\n\nif [ -f \"${DOWNLOADDIR}/${FILENAME}\" ]; then\n\tif sha1sum --status -c \"${FILE_SHA}\"; then\n\t\tinfo \"File already exists (${FILENAME}), won't download.\"\n\t\tif [ \"${AUTOINSTALL}\" != \"yes\" ]; then\n\t\t\texit 0\n\t\tfi\n\t\tSKIP_DOWNLOAD=\"yes\"\n\telse\n\t\tinfo \"File exists but fails checksum. Redownloading.\"\n\t\tSKIP_DOWNLOAD=\"no\"\n\tfi\nfi\n\nif [ \"${SKIP_DOWNLOAD}\" = \"no\" ]; then\n\tinfo \"Downloading release \\\"${FILENAME}\\\"\"\n\twget ${WGETOPTIONS} -o \"${FILE_WGETLOG}\" \"${DOWNLOAD}\" -O \"${DOWNLOADDIR}/${FILENAME}\" 2>&1\n\tCODE=$?\n\n\tif [ ${CODE} -ne 0 ]; then\n\t\terror \"Download failed with code ${CODE}:\"\n\t\tcat \"${FILE_WGETLOG}\" >&2\n\t\texit ${CODE}\n\tfi\n\tinfo \"File downloaded\"\nfi\n\nif ! sha1sum --status -c \"${FILE_SHA}\"; then\n\terror \"Downloaded file corrupt. Try again.\"\n\texit 4\nfi\n\nif [ -n \"${PLEXSERVER}\" -a \"${AUTOINSTALL}\" = \"yes\" ]; then\n\t# Check if server is in-use before continuing (thanks @AltonV, @hakong and @sufr3ak)...\n\tif running \"${PLEXSERVER}\" \"${PLEXPORT}\"; then\n\t\terror \"Server ${PLEXSERVER} is currently being used by one or more users, skipping installation. Please run again later\"\n\t\texit 6\n\tfi\nfi\n\nif [ \"${AUTOINSTALL}\" = \"yes\" ]; then\n\tif ! hash ldconfig 2>/dev/null && [ \"${REDHAT}\" = \"no\" ]; then\n\t\texport PATH=$PATH:/sbin\n\tfi\n\n\t${DISTRO_INSTALL} \"${DOWNLOADDIR}/${FILENAME}\"\n\tRET=$?\n\tif [ ${RET} -ne 0 ]; then\n\t\t# Clarify why this failed, so user won't be left in the dark\n\t\terror \"Failed to install update. Command '${DISTRO_INSTALL} \"${DOWNLOADDIR}/${FILENAME}\"' returned error code ${RET}\"\n\t\texit ${RET}\n\tfi\nfi\n\nif [ \"${AUTODELETE}\" = \"yes\" ]; then\n\tif [ \"${AUTOINSTALL}\" = \"yes\" ]; then\n\t\trm -rf \"${DOWNLOADDIR}/${FILENAME}\"\n\t\tinfo \"Deleted \\\"${FILENAME}\\\"\"\n\telse\n\t\tinfo \"Will not auto delete without [-a] auto install\"\n\tfi\nfi\n\nif [ \"${AUTOSTART}\" = \"yes\" ]; then\n\tif [ \"${REDHAT}\" = \"no\" ]; then\n\t\twarn \"The AUTOSTART [-s] option may not be needed on your distribution.\"\n\tfi\n\t# Check for systemd\n\tif hash systemctl 2>/dev/null; then\n\t\tsystemctl start \"$SYSTEMDUNIT\"\n\telif hash service 2>/dev/null; then\n\t\tservice plexmediaserver start\n\telif [ -x /etc/init.d/plexmediaserver ]; then\n\t\t/etc/init.d/plexmediaserver start\n\telse\n\t\terror \"AUTOSTART was specified but no startup scripts were found for 'plexmediaserver'.\"\n\t\texit 1\n\tfi\nfi\n\nif [ \"${NOTIFY}\" = \"yes\" ]; then\n\t# Notify success if we downloaded and possibly installed the update\n\texit 10\nfi\nexit 0\n"
        }
      ]
    }
  ]
}