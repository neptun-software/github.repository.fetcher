{
  "metadata": {
    "timestamp": 1736568196256,
    "page": 35,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lmc999/RegionRestrictionCheck",
      "stars": 4255,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.3193359375,
          "content": "FROM alpine:latest\n\nCOPY check.sh /check.sh\n\nRUN chmod +x /check.sh && \\\n    apk add --no-cache curl wget bash && \\\n    apk add  --no-cache bind-tools --repository=http://dl-cdn.alpinelinux.org/alpine/edge/main && \\\n    apk add --no-cache grep openssl ca-certificates uuidgen\n\nENTRYPOINT [\"/bin/bash\", \"-l\", \"-c\", \"/check.sh\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.7138671875,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.24609375,
          "content": "<p align=\"center\">\n<a href=\"https://hits.seeyoufarm.com\"><img src=\"https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Flmc999%2FRegionRestrictionCheck&count_bg=%230AC995&title_bg=%23004BF9&icon=&icon_color=%23E7E7E7&title=visitors&edge_flat=false\"/></a>\n<a href=\"/LICENSE\"><img src=\"https://img.shields.io/badge/license-GPL-blue.svg\" alt=\"license\" /></a>\n</p>\n\n## For English user please see\n### [Introduction](https://github.com/lmc999/RegionRestrictionCheck/blob/main/README_EN.md)\n\n## 脚本介绍\n\n本脚本基于 [CoiaPrant/MediaUnlock_Test](https://github.com/CoiaPrant/MediaUnlock_Test) 代码进行修改\n\n## 支持操作系统\n\n带有 bash 环境的任意 Unix 或类 Unix 操作系统。\n例如：Ubuntu 16+, Debian 10+, RHEL 7+, Arch Linux, Alpine Linux, FreeBSD, MacOS 10.13+, Android (Termux), iOS (iSH), Windows (MinGW/Cygwin), OpenWRT 23+ 等等。\n\n## 使用方法\n\n**使用脚本前请确认 curl 已安装**\n\n````bash\nbash <(curl -L -s check.unlock.media)\n````\n\n##### 只检测 IPv4 结果：\n\n````bash\nbash <(curl -L -s check.unlock.media) -M 4\n````\n\n##### 只检测 IPv6 结果：\n\n````bash\nbash <(curl -L -s check.unlock.media) -M 6\n````\n\n##### 指定检测的网卡名称：\n\n````bash\nbash <(curl -L -s check.unlock.media) -I eth0\n````\n\n##### 直接测试指定的区域编号：\n\n````bash\nbash <(curl -L -s check.unlock.media) -R 0\n````\n\n如果不指定区域编号或区域编号为空，则显示区域选择菜单\n\n##### 选择脚本语言为英文：\n\n````bash\nbash <(curl -L -s check.unlock.media) -E en\n````\n\n**或者直接运行以下 Docker 命令** (兼容 ARM 架构)\n\n````\ndocker run --rm -ti --net=host lmc999/regioncheck && docker rmi lmc999/regioncheck > /dev/null 2>&1\n````\n\n## 安装依赖\n\n### Ubuntu/Debian:\n\n```\nsudo apt install curl openssl ca-certificates -yq\n```\n\n可选依赖：\n\n```\nsudo apt install uuid-runtime dnsutils -yq\n```\n\n### RHEL:\n\n```\nsudo dnf install curl openssl\n```\n\n可选依赖：\n\n```\nsudo dnf install bind-utils\n```\n\n### Android Termux:\n\n```\npkg up -yq\npkg install curl openssl openssl-tool ca-certificates -yq\n```\n\n可选依赖：\n\n```\npkg install uuid-utils dnsutils -yq\n```\n\n### iOS iSH / Alpine Linux:\n\n```\napk add curl bash grep openssl ca-certificates uuidgen\n```\n\n### macOS:\n\n```\nbrew install curl openssl md5sha1sum coreutils\n```\n\n### Windows:\n\n可以使用 Cygwin 或者 Git Windows 最新版本。\n如果使用 Git Windows，请确认安装 `powershell` 用于生成 uuid。请确认使用最新版本的 `curl` (>=8.8.0) 以避免遇到段错误。\n\n### OpenWRT\n\n```\nopkg update\nopkg install grep\n```\n\n## 特性\n\n纯 bash shell 实现的流媒体检测功能，可免 ROOT 执行，支持多个平台。可用于批量测试多个地区的流媒体网站解锁情况。\n\n具体的各个地区流媒体测试支持情况，详见 [supported_platforms](https://github.com/lmc999/RegionRestrictionCheck/blob/main/reference/supported_platforms.md)\n\n## 注意事项\n\n1. Netflix CDN 分流测试依赖 DNS 解析。而如果您使用的本地设备开了 VPN 代理进行测试，将无法得到正确的 CDN 分流信息。\n\n## PR 须知\n\n### 1. 请勿滥用 curl 的参数。\n\n常用 CURL 参数如下：\n\n```\n-s (--silent): 静默模式。即不输出任何错误信息、URL 连接详情等。\n-S (--show-error): 显示错误。当使用静默模式时，输出错误消息。如果使用该参数，意外的错误消息可能会影响代码整洁性，不建议使用。\n-f (--fail): 当 URL 返回 400 错误或者 HTTP 无法传输时，不输出错误信息，并返回错误代码 22。\n-w (--write-out): 当 URL 访问完成后，可用于输出例如 HTTP 响应代码、URL 网址等内容。\n-o (--output): 将请求的内容重定向输出到文件，而不是直接屏幕打印。\n-D (--dump-header): 将访问 URL 时收到的 header 信息输出到文件。\n-L (--location): 跟随 URL 跳转。\n-i (--include): 在输出结果中显示响应 header 信息。\n-c (--cookie-jar): 当 URL 访问完成后，将 cookie 信息写入到 Netscape 格式的文件中。\n-b (--cookie): 使用指定的数据或者文件作为 cookie。\n```\n\n### 2. 请勿使用双方括号\n\n双方括号只是 bash 的扩展功能。一是在某些不同平台可能会有兼容性问题，二是较为影响整洁性。\n\n### 3. 请避免使用 if ... elif ... else 语句\n\nif ... elif 不利于代码的阅读性，在函数中，建议使用更简洁的判断模式，得到预期结果后使用 return 退出函数。\n\n### 4. 除非确实有必要，请尽量避免输出到文件\n\n逻辑部分的处理请尽量在 shell 中处理，避免输出到文件。\n\n### 5. 请勿添加额外的依赖\n\n能以 shell 方式解决的问题，请尽量以 shell 方式实现。\n\n## 赞助\n\n如果觉得脚本对你有帮助，可以考虑请作者喝一箱健力宝\n\n![image](https://i.imgur.com/HHbZgUsl.jpg)\n\n![image](https://i.imgur.com/MWXifObl.jpg)\n\n## 交流\n\n脚本使用过程中出现 bug 欢迎提交 issue\n\n你亦可直接添加 [TG群组](https://t.me/gameaccelerate) 分享你的建议\n\n## 特别鸣谢\n\n[柠檬大佬](https://t.me/ilemonrain) ，目前市面的流媒体解锁检测脚本都是从 [Lemonbench](https://github.com/LemonBench/LemonBench) 演化而来\n\n[onoc1yn](https://github.com/onoc1yn) 提供多架构 docker 解决方案及 Hulu Cookies 加密方案\n"
        },
        {
          "name": "README_EN.md",
          "type": "blob",
          "size": 1.287109375,
          "content": "## Introduction\nThis script was modified based on [CoiaPrant/MediaUnlock_Test](https://github.com/CoiaPrant/MediaUnlock_Test)\n\n+ Optimise Disneyplus accuracy\n\n+ Add MyTVSuper\n\n+ Add Dazn\n\n+ Add Hulu Japan\n\n+ Add Pretty Derby (Game)\n\n+ Add Kancolle (Game)\n\n+ Add Now E\n\n+ Add Viu TV\n\n+ Add U-NEXT VIDEO\n\n+ Add Paravi\n\n+ Optimise Abema accuracy\n\n+ Add WOWOW\n\n+ Add TVer\n\n+ Add Hami Video\n\n+ Add 4GTV\n\n+ Add Sling TV\n\n+ Add Pluto TV\n\n+ Add HBO Max\n\n+ Add Channel 4\n\n+ Add ITV Hub\n\n+ Add iQiyi\n\n+ Add Hulu US\n\n+ Add encoreTVB\n\n+ Add LineTV TW\n\n+ Add Viu.com\n\n+ Add Niconico\n\n+ Add Paramount+\n\n+ Add KKTV\n\n+ Add Peakcock TV\n\n+ Add FOD\n\n## How to use\n\n**Make sure you have curl and python installed**\n\n**General Use**\n````bash\nbash <(curl -L -s https://git.io/JRw8R) -E en\n````\n\n**Test IPv4 Result Only**\n````bash\nbash <(curl -L -s https://git.io/JRw8R) -E en -M 4\n````\n\n**Test IPv6 Result Only**\n````bash\nbash <(curl -L -s https://git.io/JRw8R) -E en -M 6\n````\n\n**Specify a Certain Interface to be Tested**\n````bash\nbash <(curl -L -s https://git.io/JRw8R) -E en -I eth0\n````\n\n**Or run in docker**\n````docker\ndocker run --rm -ti --net=host lmc999/regioncheck && docker rmi lmc999/regioncheck\n````\n\n\n## Thanks To\n[柠檬大佬](https://t.me/ilemonrain), please support [Lemonbench](https://github.com/LemonBench/LemonBench)\n\n"
        },
        {
          "name": "binary",
          "type": "tree",
          "content": null
        },
        {
          "name": "check.sh",
          "type": "blob",
          "size": 286.4794921875,
          "content": "#!/bin/bash\n\nVER='1.0.0'\n\nUA_BROWSER=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36\"\nUA_SEC_CH_UA='\"Google Chrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\"'\nUA_ANDROID=\"Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Mobile Safari/537.36\"\n\ncolor_print() {\n    Font_Black=\"\\033[30m\"\n    Font_Red=\"\\033[31m\"\n    Font_Green=\"\\033[32m\"\n    Font_Yellow=\"\\033[33m\"\n    Font_Blue=\"\\033[34m\"\n    Font_Purple=\"\\033[35m\"\n    Font_SkyBlue=\"\\033[36m\"\n    Font_White=\"\\033[37m\"\n    Font_Suffix=\"\\033[0m\"\n}\n\ncommand_exists() {\n    command -v \"$1\" > /dev/null 2>&1\n}\n\ngen_uuid() {\n    if [ -f /proc/sys/kernel/random/uuid ]; then\n        local genuuid=$(cat /proc/sys/kernel/random/uuid)\n        echo \"${genuuid}\"\n        return 0\n    fi\n\n    if command_exists uuidgen; then\n        local genuuid=$(uuidgen)\n        echo \"${genuuid}\"\n        return 0\n    fi\n\n    if command_exists powershell && [ \"$OS_WINDOWS\" == 1 ]; then\n        local genuuid=$(powershell -c \"[guid]::NewGuid().ToString()\")\n        echo \"${genuuid}\"\n        return 0\n    fi\n\n    return 1\n}\n\ngen_random_str() {\n    if [ -z \"$1\" ]; then\n        echo -e \"${Font_Red}Length missing.${Font_Suffix}\"\n        exit 1\n    fi\n    local randomstr=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c \"$1\")\n    echo \"${randomstr}\"\n}\n\nresolve_ip_address() {\n    if [ -z \"$1\" ]; then\n        echo -e \"${Font_Red}Domain missing.${Font_Suffix}\"\n        exit 1\n    fi\n    if [ -z \"$2\" ]; then\n        echo -e \"${Font_Red}DNS Record type missing.${Font_Suffix}\"\n        exit 1\n    fi\n\n    local domain=\"$1\"\n    local recordType=\"$2\"\n\n    if command_exists nslookup && [ \"$OS_WINDOWS\" != 1 ]; then\n        local nslookupExists=1\n    fi\n    if command_exists dig; then\n        local digExists=1\n    fi\n    if [ \"$OS_IOS\" == 1 ]; then\n        local nslookupExists=0\n        local digExists=0\n    fi\n\n    if [ \"$nslookupExists\" == 1 ]; then\n        if [ \"$recordType\" == 'AAAA' ]; then\n            local result=$(nslookup -q=AAAA \"${domain}\" | grep -woP \"Address: \\K[\\d:a-f]+\")\n            echo \"${result}\"\n            return\n        else\n            local result=$(nslookup -q=A \"${domain}\" | grep -woP \"Address: \\K[\\d.]+\")\n            echo \"${result}\"\n            return\n        fi\n    fi\n    if [ \"$digExists\" == 1 ]; then\n        if [ \"$recordType\" == 'AAAA' ]; then\n            local result=$(dig +short \"${domain}\" AAAA)\n            echo \"${result}\"\n            return\n        else\n            local result=$(dig +short \"${domain}\" A)\n            echo \"${result}\"\n            return\n        fi\n    fi\n\n    if [ \"$recordType\" == 'AAAA' ]; then\n        local pingArgs='-6 -c 1 -w 1 -W 1'\n        [ \"$OS_ANDROID\" == 1 ] && pingArgs='-c 1 -w 1 -W 1'\n        local result=$(ping6 ${pingArgs} \"${domain}\" 2>/dev/null | head -n 1 | grep -woP '\\s\\(\\K[\\d:a-f]+')\n        echo \"${result}\"\n        return\n    else\n        local pingArgs='-4 -c 1 -w 1 -W 1'\n        [ \"$OS_ANDROID\" == 1 ] && pingArgs='-c 1 -w 1 -W 1'\n        local result=$(ping ${pingArgs} \"${domain}\" 2>/dev/null | head -n 1 | grep -woP '\\s\\(\\K[\\d.]+')\n        echo \"${result}\"\n        return\n    fi\n}\n\nvalidate_proxy() {\n    if [ -z \"$1\" ]; then\n        echo -e \"${Font_Red}Param Proxy Address is missing.${Font_Suffix}\"\n        exit 1\n    fi\n\n    local tmpresult=$(echo \"$1\" | grep -P '^(socks|socks4|socks5|http)://([^:]+:[^@]+@)?(([0-9]{1,3}\\.){3}[0-9]{1,3}|(\\[[0-9a-fA-F:]+\\]|([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|((([0-9a-fA-F]{1,4}:){1,6})|::(([0-9a-fA-F]{1,4}:){1,6}))([0-9a-fA-F]{1,4}))):(0|[1-9][0-9]{0,4})$')\n    if [ -z \"$tmpresult\" ]; then\n        echo -e \"${Font_Red}Proxy IP invalid.${Font_Suffix}\"\n        exit 1\n    fi\n\n    local port=$(echo \"$1\" | grep -woP ':\\K[0-9]+$')\n    if [ \"$port\" -ge 65535 ]; then\n        echo -e \"${Font_Red}Proxy Port invalid.${Font_Suffix}\"\n        exit 1\n    fi\n}\n\nvalidate_ip_address() {\n    if [ -z \"$1\" ]; then\n        echo -e \"${Font_Red}Param IP Address is missing.${Font_Suffix}\"\n        exit 1\n    fi\n\n    if echo \"$1\" | awk '{$1=$1; print}' | grep -Eq '^([0-9]{1,3}\\.){3}[0-9]{1,3}$'; then\n        return 4\n    fi\n    echo \"$1\" | awk '{$1=$1; print}' | grep -Eq '^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$|^(([0-9a-fA-F]{1,4}:){1,7}|:):([0-9a-fA-F]{1,4}:){1,7}|:$|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}$|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}$|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}$|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}$|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}$|([0-9a-fA-F]{1,4}:){1}(:[0-9a-fA-F]{1,4}){1,6}$|:(:[0-9a-fA-F]{1,4}){1,7}$|((([0-9a-fA-F]{1,4}:){1,4}:|:):(([0-9a-fA-F]{1,4}:){0,1}[0-9a-fA-F]{1,4}){1,4})$'\n    if [ \"$?\" == 0 ]; then\n        return 6\n    fi\n\n    return 1\n}\n\nvalidate_intranet() {\n    if [ -z \"$1\" ]; then\n        echo -e \"${Font_Red}Param missing.${Font_Suffix}\"\n    fi\n    # See https://en.wikipedia.org/wiki/Reserved_IP_addresses\n    local tmpresult=$(echo \"$1\" | grep -E '(^|\\s)(10\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])|172\\.(1[6-9]|2[0-9]|3[01])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])|192\\.168\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])|100\\.([6-9][4-9]|1[0-2][0-7])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])|169\\.254\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])|192\\.88\\.99\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])|192\\.0\\.(0|2)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])|198\\.(1[89])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])|198\\.51\\.100\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])|203\\.0\\.113\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])|2[23][4-9]\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])|233\\.252\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])|(24[0-9]|25[0-5])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9]))(\\s|$)')\n    if [ -z \"$tmpresult\" ]; then\n        return 1\n    fi\n\n    return 0\n}\n\nvalidate_region_id() {\n    if [ -z \"$1\" ]; then\n        echo -e \"${Font_Red}Param missing.${Font_Suffix}\"\n        exit 1\n    fi\n    local regionid=\"$1\"\n    local result=$(echo \"$regionid\" | grep -E '^[0-9]$|^1[0-1]$|^99$|^88$|^66$')\n    if [ -z \"$result\" ]; then\n        return 1\n    fi\n    return 0\n}\n\nvalidate_net_type() {\n    if [ -z \"$1\" ]; then\n        echo -e \"${Font_Red}Param missing.${Font_Suffix}\"\n        exit 1\n    fi\n    local netType=\"$1\"\n    local result=$(echo \"$netType\" | grep -E '^4$|^6$|^0$')\n    if [ -z \"$result\" ]; then\n        echo -e \"${Font_Red}Invalid Network Type.${Font_Suffix}\"\n        exit 1\n    fi\n    return 0\n}\n\ncheck_proxy_connectivity() {\n    local result1=$(curl $USE_NIC $USE_PROXY -s 'https://ip.sb' --user-agent \"${UA_BROWSER}\" )\n    local result2=$(curl $USE_NIC $USE_PROXY -s 'https://1.0.0.1/cdn-cgi/trace' --user-agent \"${UA_BROWSER}\")\n    if [ -n \"$result1\" ] && [ -n \"$result2\" ]; then\n        return 0\n    fi\n\n    return 1\n}\n\ncheck_net_connctivity() {\n    if [ -z \"$1\" ]; then\n        echo -e \"${Font_Red}Param missing.${Font_Suffix}\"\n        exit 1\n    fi\n\n    if [ \"$1\" == 4 ]; then\n        local result1=$(curl -4 ${CURL_OPTS} -fs 'http://www.msftconnecttest.com/connecttest.txt' -w '%{http_code}' -o /dev/null --user-agent \"${UA_BROWSER}\")\n        if [ \"$result1\" == '200' ]; then\n            return 0\n        fi\n    fi\n\n    if [ \"$1\" == 6 ]; then\n        local result2=$(curl -6 ${CURL_OPTS} -fs 'http://ipv6.msftconnecttest.com/connecttest.txt' -w '%{http_code}' -o /dev/null --user-agent \"${UA_BROWSER}\")\n        if [ \"$result2\" == '200' ]; then\n            return 0\n        fi\n    fi\n\n    return 1\n}\n\ncheck_os_type() {\n    OS_TYPE=''\n    local ifLinux=$(uname -a | grep -i 'linux')\n    local ifFreeBSD=$(uname -a | grep -i 'freebsd')\n    local ifTermux=$(echo \"$PWD\" | grep -i 'termux')\n    local ifMacOS=$(uname -a | grep -i 'Darwin')\n    local ifMinGW=$(uname -a | grep -i 'MINGW')\n    local ifCygwin=$(uname -a | grep -i 'CYGWIN')\n    local ifAndroid=$(uname -a | grep -i 'android')\n    local ifiSh=$(uname -a | grep -i '\\-ish')\n\n    if [ -n \"$ifLinux\" ] && [ -z \"$ifAndroid\" ] && [ -z \"$ifiSh\" ]; then\n        OS_TYPE='linux'\n        OS_LINUX=1\n        return\n    fi\n    if [ -n \"$ifTermux\" ]; then\n        OS_TYPE='termux'\n        OS_TERMUX=1\n        OS_ANDROID=1\n        return\n    fi\n    if [ -n \"$ifMacOS\" ]; then\n        OS_TYPE='macos'\n        OS_MACOS=1\n        return\n    fi\n    if [ -n \"$ifMinGW\" ]; then\n        OS_TYPE='msys'\n        OS_WINDOWS=1\n        return\n    fi\n    if [ -n \"$ifCygwin\" ]; then\n        OS_TYPE='cygwin'\n        OS_WINDOWS=1\n        return\n    fi\n    if [ -n \"$ifFreeBSD\" ]; then\n        OS_TYPE='freebsd'\n        OS_FREEBSD=1\n        return\n    fi\n    if [ -n \"$ifAndroid\" ]; then\n        OS_TYPE='android'\n        OS_ANDROID=1\n        return\n    fi\n    if [ -n \"$ifiSh\" ]; then\n        OS_TYPE='ish'\n        OS_IOS=1\n        return\n    fi\n\n    echo -e \"${Font_Red}Unsupported OS Type.${Font_Suffix}\"\n    exit 1\n}\n\ncheck_dependencies() {\n    CURL_SSL_CIPHERS_OPT=''\n\n    if [ \"$OS_TYPE\" == 'linux' ]; then\n        source /etc/os-release\n        if [ -z \"$ID\" ]; then\n            echo -e \"${Font_Red}Unsupported Linux OS Type.${Font_Suffix}\"\n            exit 1\n        fi\n\n        case \"$ID\" in\n        debian|devuan|kali)\n            OS_NAME='debian'\n            PKGMGR='apt'\n            ;;\n        ubuntu)\n            OS_NAME='ubuntu'\n            PKGMGR='apt'\n            ;;\n        centos|fedora|rhel|almalinux|rocky|amzn)\n            OS_NAME='rhel'\n            PKGMGR='dnf'\n            ;;\n        arch|archarm)\n            OS_NAME='arch'\n            PKGMGR='pacman'\n            ;;\n        alpine)\n            OS_NAME='alpine'\n            PKGMGR='apk'\n            ;;\n        *)\n            OS_NAME=\"$ID\"\n            PKGMGR='apt'\n            ;;\n        esac\n    fi\n\n    if [ -z $(echo 'e' | grep -P 'e' 2>/dev/null) ]; then\n        echo -e \"${Font_Red}command 'grep' function is incomplete, please install the full version first.${Font_Suffix}\"\n        exit 1\n    fi\n\n    if ! command_exists curl; then\n        echo -e \"${Font_Red}command 'curl' is missing, please install it first.${Font_Suffix}\"\n        exit 1\n    fi\n\n    if ! gen_uuid >/dev/null; then\n        echo -e \"${Font_Red}command 'uuidgen' is missing, please install it first.${Font_Suffix}\"\n        exit 1\n    fi\n\n    if ! command_exists openssl; then\n        echo -e \"${Font_Red}command 'openssl' is missing, please install it first.${Font_Suffix}\"\n        exit 1\n    fi\n\n    if [ \"$OS_MACOS\" == 1 ]; then\n        if ! command_exists md5sum; then\n            echo -e \"${Font_Red}command 'md5sum' is missing, please install it first.${Font_Suffix}\"\n            exit 1\n        fi\n        if ! command_exists sha256sum; then\n            echo -e \"${Font_Red}command 'sha256sum' is missing, please install it first.${Font_Suffix}\"\n            exit 1\n        fi\n    fi\n\n    if [ \"$OS_NAME\" == 'debian' ] || [ \"$OS_NAME\" == 'ubuntu' ]; then\n        local os_version=$(echo \"$VERSION_ID\" | tr -d '.')\n        if [ \"$os_version\" == \"2004\" ] || [ \"$os_version\" == \"10\" ] || [ \"$os_version\" == \"11\" ]; then\n            CURL_SSL_CIPHERS_OPT='-k --ciphers DEFAULT@SECLEVEL=1'\n        fi\n    fi\n\n    if command_exists usleep; then\n        USE_USLEEP=1\n    fi\n}\n\nprocess() {\n    local iface=''\n    local xip=''\n    local proxy=''\n    USE_NIC=''\n    NETWORK_TYPE=''\n    LANGUAGE=''\n    X_FORWARD=''\n    USE_PROXY=''\n\n    while [ $# -gt 0 ]; do\n        case \"$1\" in\n        -I | --interface)\n            local iface=\"$2\"\n            USE_NIC=\"--interface $2\"\n            shift\n            ;;\n        -M | --network-type)\n            local netType=\"$2\"\n            shift\n            ;;\n        -E | --language)\n            LANGUAGE=\"$2\"\n            shift\n            ;;\n        -X | --x-forwarded-for)\n            local xip=\"$2\"\n            shift\n            ;;\n        -P | --proxy)\n            local proxy=\"$2\"\n            shift\n            ;;\n        -R | --region)\n            local regionid=\"$2\"\n            shift\n            ;;\n        *)\n            echo -e \"${Font_Red}Unknown error while processing options.${Font_Suffix}\"\n            exit 1\n            ;;\n        esac\n        shift\n    done\n\n    if [ -z \"$iface\" ]; then\n        USE_NIC=''\n    fi\n\n    if [ -z \"$xip\" ]; then\n        X_FORWARD=''\n    fi\n\n    if [ -n \"$xip\" ]; then\n        local xip=$(echo \"$xip\" | awk '{$1=$1; print}')\n        validate_ip_address \"$xip\"\n        local result=\"$?\"\n        if [ \"$result\" == 4 ] || [ \"$result\" == 6 ]; then\n            X_FORWARD=\"--header X-Forwarded-For:$xip\"\n        fi\n    fi\n\n    if [ -z \"$proxy\" ]; then\n        USE_PROXY=''\n    fi\n\n    if [ -n \"$proxy\" ]; then\n        local proxy=$(echo \"$proxy\" | awk '{$1=$1; print}')\n        if validate_proxy \"$proxy\"; then\n            USE_PROXY=\"-x $proxy\"\n        fi\n    fi\n\n    if [ -z \"$netType\" ]; then\n        NETWORK_TYPE=''\n    fi\n\n    if [ -n \"$netType\" ]; then\n        local netType=$(echo \"$netType\" | awk '{$1=$1; print}')\n        if validate_net_type \"$netType\"; then\n            NETWORK_TYPE=\"$netType\"\n        fi\n    fi\n\n    if [ -z \"$LANGUAGE\" ]; then\n        LANGUAGE='zh'\n    fi\n\n    if [ -n \"$regionid\" ]; then\n        if validate_region_id \"$regionid\"; then\n            REGION_ID=\"$regionid\"\n        fi\n    fi\n\n    CURL_OPTS=\"$USE_NIC $USE_PROXY $X_FORWARD ${CURL_SSL_CIPHERS_OPT} --max-time 10 --retry 3 --retry-max-time 20\"\n}\n\ndelay() {\n    if [ -z $1 ]; then\n        exit 1\n    fi\n    local val=$1\n    if [ \"$USE_USLEEP\" == 1 ]; then\n        usleep $(awk 'BEGIN{print '$val' * 1000000}')\n        return 0\n    fi\n    sleep $val\n    return 0\n}\n\ncount_run_times() {\n    local tmpresult=$(curl ${CURL_OPTS} -s \"https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fcheck.unclock.media&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=visit&edge_flat=false\")\n    TODAY_RUN_TIMES=$(echo \"$tmpresult\" | tail -3 | head -n 1 | awk '{print $5}')\n    TOTAL_RUN_TIMES=$(($(echo \"$tmpresult\" | tail -3 | head -n 1 | awk '{print $7}') + 2527395))\n}\n\ndownload_extra_data() {\n    MEDIA_COOKIE=$(curl ${CURL_OPTS} -s \"https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/cookies\")\n    IATACODE=$(curl ${CURL_OPTS} -s \"https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/reference/IATACode.txt\")\n    IATACODE2=$(curl ${CURL_OPTS} -s \"https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/reference/IATACode2.txt\")\n    if [ -z \"$MEDIA_COOKIE\" ] || [ -z \"$IATACODE\" ] || [ -z \"$IATACODE2\" ]; then\n        echo -e \"${Font_Red}Extra data download failed.${Font_Suffix}\"\n        delay 3\n    fi\n}\n\nget_ip_info() {\n    LOCAL_IP_ASTERISK=''\n    LOCAL_ISP=''\n    local local_ip=$(curl ${CURL_DEFAULT_OPTS} -s https://api64.ipify.org --user-agent \"${UA_BROWSER}\")\n    local get_local_isp=$(curl ${CURL_DEFAULT_OPTS} -s \"https://api.ip.sb/geoip/${local_ip}\" -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' --user-agent \"${UA_BROWSER}\")\n\n    if [ -z \"$local_ip\" ]; then\n        echo -e \"${Font_Red}Failed to Query IP Address.${Font_Suffix}\"\n    fi\n    if [ -z \"$get_local_isp\" ]; then\n        echo -e \"${Font_Red}Failed to Query IP Info.${Font_Suffix}\"\n    fi\n\n    validate_ip_address \"$local_ip\"\n    local resp=\"$?\"\n    if [ \"$resp\" == 4 ]; then\n        LOCAL_IP_ASTERISK=$(awk -F\".\" '{print $1\".\"$2\".*.*\"}' <<<\"${local_ip}\")\n    fi\n    if [ \"$resp\" == 6 ]; then\n        LOCAL_IP_ASTERISK=$(awk -F\":\" '{print $1\":\"$2\":\"$3\":*:*\"}' <<<\"${local_ip}\")\n    fi\n\n    LOCAL_ISP=$(echo \"$get_local_isp\" | grep 'organization' | cut -f4 -d '\"')\n}\n\nshow_region() {\n    echo -e \"${Font_Yellow} ---${1}---${Font_Suffix}\"\n}\n\nfunction GameTest_Steam() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Steam Currency:\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://store.steampowered.com/app/761830' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Steam Currency:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep 'priceCurrency' | cut -d '\"' -f4)\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r Steam Currency:\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Steam Currency:\\t\\t\\t${Font_Green}${result}${Font_Suffix}\\n\"\n}\n\n# 流媒体解锁测试-动画疯\nfunction MediaUnlockTest_BahamutAnime() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Bahamut Anime:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://ani.gamer.com.tw/ajax/getdeviceid.php' --cookie-jar bahamut_cookie.txt --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Bahamut Anime:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        rm -f bahamut_cookie.txt\n        return\n    fi\n\n    local tempdeviceid=$(echo \"$tmpresult\" | grep -woP '\"deviceid\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    # I Was Reincarnated as the 7th Prince\n    local sn='37783'\n    local tmpresult1=$(curl ${CURL_DEFAULT_OPTS} -sL \"https://ani.gamer.com.tw/ajax/token.php?adID=89422&sn=${sn}&device=${tempdeviceid}\" -b bahamut_cookie.txt --user-agent \"${UA_BROWSER}\")\n    local tmpresult2=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://ani.gamer.com.tw/' -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: zh-CN,zh;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-model: \"\"' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-ch-ua-platform-version: \"15.0.0\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' -b bahamut_cookie.txt --user-agent \"${UA_BROWSER}\")\n    rm -f bahamut_cookie.txt\n    if [ -z \"$tmpresult1\" ] || [ -z \"$tmpresult2\" ]; then\n        echo -n -e \"\\r Bahamut Anime:\\t\\t\\t\\t${Font_Red}Failed (Network Connection 1)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult1\" | grep 'animeSn')\n\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r Bahamut Anime:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    local region=$(echo \"$tmpresult2\" | grep -woP 'data-geo=\"\\K[^\"]+')\n    if [ -n \"$region\" ]; then\n        echo -n -e \"\\r Bahamut Anime:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Bahamut Anime:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\n# 流媒体解锁测试-哔哩哔哩大陆限定\nfunction MediaUnlockTest_BilibiliChinaMainland() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r BiliBili China Mainland Only:\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local randsession=$(gen_uuid | md5sum | head -c 32)\n    # 尝试获取成功的结果\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL \"https://api.bilibili.com/pgc/player/web/playurl?avid=82846771&qn=0&type=&otype=json&ep_id=307247&fourk=1&fnver=0&fnval=16&session=${randsession}&module=bangumi\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r BiliBili China Mainland Only:\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"code\"\\s{0,}:\\s{0,}\\K[-\\d]+' | head -n 1)\n    case \"$result\" in\n        '0') echo -n -e \"\\r BiliBili China Mainland Only:\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '-10403') echo -n -e \"\\r BiliBili China Mainland Only:\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r BiliBili China Mainland Only:\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\n# 流媒体解锁测试-哔哩哔哩港澳台限定\nfunction MediaUnlockTest_BilibiliHKMCTW() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r BiliBili Hongkong/Macau/Taiwan:\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local randsession=$(gen_uuid | md5sum | head -c 32)\n    # 尝试获取成功的结果\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL \"https://api.bilibili.com/pgc/player/web/playurl?avid=18281381&cid=29892777&qn=0&type=&otype=json&ep_id=183799&fourk=1&fnver=0&fnval=16&session=${randsession}&module=bangumi\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r BiliBili Hongkong/Macau/Taiwan:\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"code\"\\s{0,}:\\s{0,}\\K[-\\d]+' | head -n 1)\n    case \"$result\" in\n        '0') echo -n -e \"\\r BiliBili Hongkong/Macau/Taiwan:\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '-10403') echo -n -e \"\\r BiliBili Hongkong/Macau/Taiwan:\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r BiliBili Hongkong/Macau/Taiwan:\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\n# 流媒体解锁测试-哔哩哔哩台湾限定\nfunction MediaUnlockTest_BilibiliTW() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Bilibili Taiwan Only:\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local randsession=$(gen_uuid | md5sum | head -c 32)\n    # 尝试获取成功的结果\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL \"https://api.bilibili.com/pgc/player/web/playurl?avid=50762638&cid=100279344&qn=0&type=&otype=json&ep_id=268176&fourk=1&fnver=0&fnval=16&session=${randsession}&module=bangumi\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Bilibili Taiwan Only:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"code\"\\s{0,}:\\s{0,}\\K[-\\d]+' | head -n 1)\n    case \"$result\" in\n        '0') echo -n -e \"\\r Bilibili Taiwan Only:\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '-10403') echo -n -e \"\\r Bilibili Taiwan Only:\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Bilibili Taiwan Only:\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_AbemaTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Abema.TV:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://api.abema.io/v1/ip/check?device=android' --user-agent \"${UA_ANDROID}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Abema.TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local region=$(echo \"$tmpresult\" | grep -woP '\"isoCountryCode\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"$region\" ]; then\n        echo -n -e \"\\r Abema.TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$region\" == 'JP' ]; then\n        echo -n -e \"\\r Abema.TV:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n    else\n        echo -n -e \"\\r Abema.TV:\\t\\t\\t\\t${Font_Yellow}Oversea Only (Region: ${region})${Font_Suffix}\\n\"\n    fi\n}\n\nfunction GameTest_PCRJP() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Princess Connect Re:Dive Japan:\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://api-priconne-redive.cygames.jp/' -w %{http_code} -o /dev/null --user-agent \"${UA_ANDROID}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r Princess Connect Re:Dive Japan:\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '404') echo -n -e \"\\r Princess Connect Re:Dive Japan:\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r Princess Connect Re:Dive Japan:\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Princess Connect Re:Dive Japan:\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction GameTest_UMAJP() {\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://api-umamusume.cygames.jp/' -w %{http_code} -o /dev/null --user-agent \"${UA_ANDROID}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r Pretty Derby Japan:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '404') echo -n -e \"\\r Pretty Derby Japan:\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r Pretty Derby Japan:\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Pretty Derby Japan:\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction GameTest_Kancolle() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Kancolle Japan:\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'http://203.104.209.7/kcscontents/twitter/maintenance_info.html' -w %{http_code} -o /dev/null --user-agent \"${UA_ANDROID}\")\n    # curl 'http://203.104.209.7/kcscontents/twitter/maintenance_info.html' \\\n    # -H 'Accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' \\\n    # -H 'Accept-Language: en-US,en;q=0.9' \\\n    # -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36' \\\n    # --insecure\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r Kancolle Japan:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r Kancolle Japan:\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r Kancolle Japan:\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Kancolle Japan:\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_Lemino() {\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://if.lemino.docomo.ne.jp/v1/user/delivery/watch/ready' -w %{http_code} -o /dev/null -H 'accept: application/json, text/plain, */*' -H 'accept-language: en-US,en;q=0.9' -H 'content-type: application/json' -H 'origin: https://lemino.docomo.ne.jp' -H 'referer: https://lemino.docomo.ne.jp/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' -H 'x-service-token: f365771afd91452fa279863f240c233d' -H 'x-trace-id: 556db33f-d739-4a82-84df-dd509a8aa179' --data-raw '{\"inflow_flows\":[null,\"crid://plala.iptvf.jp/group/b100ce3\"],\"play_type\":1,\"key_download_only\":null,\"quality\":null,\"groupcast\":null,\"avail_status\":\"1\",\"terminal_type\":3,\"test_account\":0,\"content_list\":[{\"kind\":\"main\",\"service_id\":null,\"cid\":\"00lm78dz30\",\"lid\":\"a0lsa6kum1\",\"crid\":\"crid://plala.iptvf.jp/vod/0000000000_00lm78dymn\",\"preview\":0,\"trailer\":0,\"auto_play\":0,\"stop_position\":0}]}' --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r Lemino:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r Lemino:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r Lemino:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Lemino:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nMediaUnlockTest_AnimeFesta() {\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://api-animefesta.iowl.jp/v1/titles/1305' -w %{http_code} -o /dev/null -H 'Origin: https://animefesta.iowl.jp' -H 'Priority: u=1, i' -H 'Referer: https://animefesta.iowl.jp/' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-site' -H 'X-Requested-With: XMLHttpRequest' --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r AnimeFesta:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r AnimeFesta:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r AnimeFesta:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r AnimeFesta:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_mora() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Mora:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://mora.jp/buy?__requestToken=1713764407153&returnUrl=https%3A%2F%2Fmora.jp%2Fpackage%2F43000087%2FTFDS01006B00Z%2F%3Ffmid%3DTOPRNKS%26trackMaterialNo%3D31168909&fromMoraUx=false&deleteMaterial=' -w %{http_code} -o /dev/null -H 'host: mora.jp' --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r Mora:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r Mora:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r Mora:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '500') echo -n -e \"\\r Mora:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Mora:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_BBCiPLAYER() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r BBC iPLAYER:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://open.live.bbc.co.uk/mediaselector/6/select/version/2.0/mediaset/pc/vpid/bbc_one_london/format/json/jsfunc/JS_callbacks0' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r BBC iPLAYER:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'geolocation')\n    local isOK=$(echo \"$tmpresult\" | grep -i 'vs-hls-push-uk')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r BBC iPLAYER:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r BBC iPLAYER:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r BBC iPLAYER:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r BBC iPLAYER:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Netflix() {\n    # LEGO Ninjago\n    local result1=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://www.netflix.com/title/81280792' -w %{http_code} -o /dev/null -H 'host: www.netflix.com' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-site: none' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-user: ?1' -H 'sec-fetch-dest: document' --user-agent \"${UA_BROWSER}\")\n    # Breaking bad\n    local result2=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://www.netflix.com/title/70143836' -w %{http_code} -o /dev/null -H 'host: www.netflix.com' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-site: none' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-user: ?1' -H 'sec-fetch-dest: document' --user-agent \"${UA_BROWSER}\")\n\n    if [ \"${result1}\" == '000' ] || [ \"$result2\" == '000' ]; then\n        echo -n -e \"\\r Netflix:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$result1\" == '404' ] && [ \"$result2\" == '404' ]; then\n        echo -n -e \"\\r Netflix:\\t\\t\\t\\t${Font_Yellow}Originals Only${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$result1\" == '403' ] || [ \"$result2\" == '403' ]; then\n        echo -n -e \"\\r Netflix:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$result1\" == '200' ] || [ \"$result2\" == '200' ]; then\n        local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://www.netflix.com/' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-site: none' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-user: ?1' -H 'sec-fetch-dest: document' --user-agent \"${UA_BROWSER}\")\n        local region=$(echo \"$tmpresult\" | grep -oP '\"id\":\"\\K[^\"]+' | grep -E '^[A-Z]{2}$' | head -n 1)\n        echo -n -e \"\\r Netflix:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Netflix:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result1}_${result2})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_DisneyPlus() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tempresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://disney.api.edge.bamgrid.com/devices' -X POST -H \"authorization: Bearer ZGlzbmV5JmJyb3dzZXImMS4wLjA.Cu56AgSfBTDag5NiRA81oLHkDZfu5L3CKadnefEAY84\" -H \"content-type: application/json; charset=UTF-8\" -d '{\"deviceFamily\":\"browser\",\"applicationRuntime\":\"chrome\",\"deviceProfile\":\"windows\",\"attributes\":{}}' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tempresult\" ]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local is403=$(echo \"$tempresult\" | grep -i '403 ERROR')\n    if [ -n \"$is403\" ]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Red}No (IP Banned By Disney+)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local assertion=$(echo \"$tempresult\" | grep -woP '\"assertion\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"$assertion\" ]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local preDisneyCookie=$(echo \"$MEDIA_COOKIE\" | sed -n '1p')\n    local disneyCookie=$(echo \"$preDisneyCookie\" | sed \"s/DISNEYASSERTION/${assertion}/g\")\n    local tokenContent=$(curl ${CURL_DEFAULT_OPTS} -s 'https://disney.api.edge.bamgrid.com/token' -X POST -H \"authorization: Bearer ZGlzbmV5JmJyb3dzZXImMS4wLjA.Cu56AgSfBTDag5NiRA81oLHkDZfu5L3CKadnefEAY84\" -d \"${disneyCookie}\" --user-agent \"${UA_BROWSER}\")\n\n    local isBlocked=$(echo \"$tokenContent\" | grep -i 'forbidden-location')\n    local is403=$(echo \"$tokenContent\" | grep -i '403 ERROR')\n\n    if [ -n \"$isBlocked\" ] || [ -n \"$is403\" ]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Red}No (IP Banned By Disney+ 1)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local fakeContent=$(echo \"$MEDIA_COOKIE\" | sed -n '8p')\n    local refreshToken=$(echo \"$tokenContent\" | grep -woP '\"refresh_token\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local disneyContent=$(echo \"$fakeContent\" | sed \"s/ILOVEDISNEY/${refreshToken}/g\")\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://disney.api.edge.bamgrid.com/graph/v1/device/graphql' -X POST -H \"authorization: ZGlzbmV5JmJyb3dzZXImMS4wLjA.Cu56AgSfBTDag5NiRA81oLHkDZfu5L3CKadnefEAY84\" -d \"${disneyContent}\" --user-agent \"${UA_BROWSER}\")\n\n    local previewcheck=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://disneyplus.com' -w '%{url_effective}\\n' -o /dev/null --user-agent \"${UA_BROWSER}\")\n    local isUnavailable=$(echo \"$previewcheck\" | grep -E 'preview|unavailable')\n    local region=$(echo \"$tmpresult\" | grep -woP '\"countryCode\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local inSupportedLocation=$(echo \"$tmpresult\" | grep -woP '\"inSupportedLocation\"\\s{0,}:\\s{0,}\\K(false|true)')\n\n    if [ -z \"$region\" ]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$region\" == 'JP' ]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Green}Yes (Region: JP)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isUnavailable\" ]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$inSupportedLocation\" == 'false' ]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Yellow}Available For [Disney+ ${region}] Soon${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$inSupportedLocation\" == 'true' ]; then\n        echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Disney+:\\t\\t\\t\\t${Font_Red}Failed (Error: ${inSupportedLocation}_${region})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Dazn() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Dazn:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://startup.core.indazn.com/misl/v5/Startup' -X POST -H \"Content-Type: application/json\" -d '{\"LandingPageKey\":\"generic\",\"languages\":\"en-US,en\",\"Platform\":\"web\",\"PlatformAttributes\":{},\"Manufacturer\":\"\",\"PromoCode\":\"\",\"Version\":\"2\"}' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Dazn:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"isAllowed\"\\s{0,}:\\s{0,}\\K(false|true)')\n    local region=$(echo \"$tmpresult\" | grep -woP '\"GeolocatedCountry\"\\s{0,}:\\s{0,}\"\\K[^\"]+' | tr a-z A-Z)\n    case \"$result\" in\n        'false') echo -n -e \"\\r Dazn:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        'true') echo -n -e \"\\r Dazn:\\t\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Dazn:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_HuluJP() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Hulu Japan:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://id.hulu.jp/' -w '%{http_code}_TAG_%{url_effective}\\n' -o /dev/null -H 'Accept: */*;q=0.8' -H 'Accept-Language: en-US,en;q=0.5' -H 'Accept-Encoding: none' -H 'Sec-GPC: 1' -H 'Upgrade-Insecure-Requests: 1' -H 'Sec-Fetch-Dest: document' -H 'Sec-Fetch-Mode: navigate' -H 'Sec-Fetch-Site: none' -H 'Sec-Fetch-User: ?1' -H 'Priority: u=1' --user-agent \"${UA_BROWSER}\")\n\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r Hulu Japan:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local isBlocked=$(echo \"$urlEffective\" | grep 'restrict')\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Hulu Japan:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r Hulu Japan:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '403' ]; then\n        echo -n -e \"\\r Hulu Japan:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Hulu Japan:\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_MyTVSuper() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r MyTVSuper:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://www.mytvsuper.com/api/auth/getSession/self/' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r MyTVSuper:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"country_code\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ \"$result\" == 'HK' ]; then\n        echo -n -e \"\\r MyTVSuper:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    else\n        echo -n -e \"\\r MyTVSuper:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r MyTVSuper:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_NowE() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Now E:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://webtvapi.nowe.com/16/1/getVodURL' -X POST -H \"Content-Type: application/json\" -d '{\"contentId\":\"202403181904703\",\"contentType\":\"Vod\",\"pin\":\"\",\"deviceName\":\"Browser\",\"deviceId\":\"w-663bcc51-913c-913c-913c-913c913c\",\"deviceType\":\"WEB\",\"secureCookie\":null,\"callerReferenceNo\":\"W17151951620081575\",\"profileId\":null,\"mupId\":null}' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Now E:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"responseCode\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    case \"$result\" in\n        'GEO_CHECK_FAIL') echo -n -e \"\\r Now E:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        'SUCCESS') echo -n -e \"\\r Now E:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Now E:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_ViuTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Viu.TV:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://api.viu.now.com/p8/3/getLiveURL' -X POST -H \"Content-Type: application/json\" -d '{\"callerReferenceNo\":\"20210726112323\",\"contentId\":\"099\",\"contentType\":\"Channel\",\"channelno\":\"099\",\"mode\":\"prod\",\"deviceId\":\"29b3cb117a635d5b56\",\"deviceType\":\"ANDROID_WEB\"}' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Viu.TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"responseCode\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    case \"$result\" in\n        'GEO_CHECK_FAIL') echo -n -e \"\\r Viu.TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        'SUCCESS') echo -n -e \"\\r Viu.TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Viu.TV:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_unext() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://cc.unext.jp' -H 'content-type: application/json' --data-raw '{\"operationName\":\"cosmo_getPlaylistUrl\",\"variables\":{\"code\":\"ED00479780\",\"playMode\":\"caption\",\"bitrateLow\":192,\"bitrateHigh\":null,\"validationOnly\":false},\"query\":\"query cosmo_getPlaylistUrl($code: String, $playMode: String, $bitrateLow: Int, $bitrateHigh: Int, $validationOnly: Boolean) {\\n  webfront_playlistUrl(\\n    code: $code\\n    playMode: $playMode\\n    bitrateLow: $bitrateLow\\n    bitrateHigh: $bitrateHigh\\n    validationOnly: $validationOnly\\n  ) {\\n    subTitle\\n    playToken\\n    playTokenHash\\n    beaconSpan\\n    result {\\n      errorCode\\n      errorMessage\\n      __typename\\n    }\\n    resultStatus\\n    licenseExpireDate\\n    urlInfo {\\n      code\\n      startPoint\\n      resumePoint\\n      endPoint\\n      endrollStartPosition\\n      holderId\\n      saleTypeCode\\n      sceneSearchList {\\n        IMS_AD1\\n        IMS_L\\n        IMS_M\\n        IMS_S\\n        __typename\\n      }\\n      movieProfile {\\n        cdnId\\n        type\\n        playlistUrl\\n        movieAudioList {\\n          audioType\\n          __typename\\n        }\\n        licenseUrlList {\\n          type\\n          licenseUrl\\n          __typename\\n        }\\n        __typename\\n      }\\n      umcContentId\\n      movieSecurityLevelCode\\n      captionFlg\\n      dubFlg\\n      commodityCode\\n      movieAudioList {\\n        audioType\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\"}' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r U-NEXT:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"resultStatus\"\\s{0,}:\\s{0,}\\K\\d+')\n    case \"$result\" in\n        '475') echo -n -e \"\\r U-NEXT:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r U-NEXT:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '467') echo -n -e \"\\r U-NEXT:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r U-NEXT:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_wowow() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r WOWOW:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local timestamp=$[$(date +%s%N)/1000000]\n    # 取原创剧集列表\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s \"https://www.wowow.co.jp/drama/original/json/lineup.json?_=${timestamp}\" -H 'Accept: application/json, text/javascript, */*; q=0.01' -H 'Referer: https://www.wowow.co.jp/drama/original/' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-origin' -H 'X-Requested-With: XMLHttpRequest' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r WOWOW:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n    # 取无料剧集来播放 example: https://www.wowow.co.jp/drama/original/hakubo/\n    local playUrlList=$(echo \"$tmpresult\" | grep -woP '\"link\"\\s{0,}:\\s{0,}\"\\K[^\"]+' | grep 'drama/original' | head -n 4 | xargs)\n    if [ -z \"$playUrlList\" ]; then\n        echo -n -e \"\\r WOWOW:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    for playUrl in $playUrlList ; do\n        # 访问并获取真实链接\n        local tmpresult2=$(curl ${CURL_DEFAULT_OPTS} -s \"${playUrl}\" --user-agent \"${UA_BROWSER}\")\n        if [ -z \"$tmpresult2\" ]; then\n            echo -n -e \"\\r WOWOW:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection 1)${Font_Suffix}\\n\"\n            return\n        fi\n\n        # 取得真实链接\n        local wodUrl=$(echo \"$tmpresult2\" | grep -o '\"https://wod.wowow.co.jp/content/.*\"' | cut -f2 -d'\"' | head -n 1)\n        if [ -n \"$wodUrl\" ]; then\n            break\n        fi\n    done\n\n    if [ -z \"$wodUrl\" ]; then\n        echo -n -e \"\\r WOWOW:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR 1)${Font_Suffix}\\n\"\n        return\n    fi\n\n    # 访问并获取 meta_id\n    local tmpresult3=$(curl ${CURL_DEFAULT_OPTS} -s \"$wodUrl\" -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' --user-agent \"${UA_BROWSER}\")\n\n    if [ -z \"$tmpresult3\" ]; then\n        echo -n -e \"\\r WOWOW:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection 2)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local metaId=$(echo \"$tmpresult3\" | grep -woP '\"https://wod.wowow.co.jp/watch/\\K\\d{0,}[^\"]+')\n    # Fake Vistor UID\n    local vUid=$(echo -n \"$timestamp\" | md5sum | cut -f1 -d' ')\n    # 最终测试\n    local tmpresult4=$(curl ${CURL_DEFAULT_OPTS} -s 'https://mapi.wowow.co.jp/api/v1/playback/auth' -H 'accept: application/json, text/plain, */*' -H 'content-type: application/json;charset=UTF-8' -H 'origin: https://wod.wowow.co.jp' -H 'referer: https://wod.wowow.co.jp/' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' -H 'x-requested-with: XMLHttpRequest' --data-raw \"{\\\"meta_id\\\":${metaId},\\\"vuid\\\":\\\"${vUid}\\\",\\\"device_code\\\":1,\\\"app_id\\\":1,\\\"ua\\\":\\\"${UA_BROWSER}\\\"}\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult4\" ]; then\n        echo -n -e \"\\r WOWOW:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection 3)${Font_Suffix}\\n\"\n        return\n    fi\n    local isBlocked=$(echo \"$tmpresult4\" | grep -i 'VPN')\n    local isOK=$(echo \"$tmpresult4\" | grep -i 'playback_session_id')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r WOWOW:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR 2)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r WOWOW:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r WOWOW:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r WOWOW:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_TVer() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r TVer:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://platform-api.tver.jp/v2/api/platform_users/browser/create' -H 'content-type: application/x-www-form-urlencoded' -H 'origin: https://s.tver.jp' -H 'referer: https://s.tver.jp/' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' --data-raw 'device_type=pc' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r TVer:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n    # 先取 UID 和 TOKEN\n    local platformUid=$(echo \"$tmpresult\" | grep -woP '\"platform_uid\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local platformToken=$(echo \"$tmpresult\" | grep -woP '\"platform_token\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    # 根据 UID 和 TOKEN 取得当前正在播放的剧集\n    local tmpresult2=$(curl ${CURL_DEFAULT_OPTS} -s \"https://platform-api.tver.jp/service/api/v1/callHome?platform_uid=${platformUid}&platform_token=${platformToken}&require_data=mylist%2Cresume%2Clater\" -H 'origin: https://tver.jp' -H 'referer: https://tver.jp/' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' -H 'x-tver-platform-type: web' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult2\" ]; then\n        echo -n -e \"\\r TVer:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection 1)${Font_Suffix}\\n\"\n        return\n    fi\n    # 返回结果取新电视剧第一个值\n    # echo \"$tmpresult2\" | jq  -r '.result.components.[] | select(.componentID | contains(\"newer-drama\")) | limit(1; .contents.[].content.id)'\n    local episodeId=$(echo \"$tmpresult2\" | sed -E 's/.*\"newer-drama([.]{0,})\"//' | sed 's/\"componentID\".*//' | sed 's/\"id\"/_TAG_/;s/.*_TAG_//' | cut -f2 -d'\"' | grep -E '[a-z0-9]{10}')\n    if [ -z \"$episodeId\" ]; then\n        echo -n -e \"\\r TVer:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    # 取得该剧集信息\n    local tmpresult3=$(curl ${CURL_DEFAULT_OPTS} -s \"https://statics.tver.jp/content/episode/${episodeId}.json\" -H 'origin: https://tver.jp' -H 'referer: https://tver.jp/' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult3\" ]; then\n        echo -n -e \"\\r TVer:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection 2)${Font_Suffix}\\n\"\n        return\n    fi\n    # 取 accountID / playerID / videoID / videoRefID\n    local accountID=$(echo \"$tmpresult3\" | grep -woP '\"accountID\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local playerID=$(echo \"$tmpresult3\" | grep -woP '\"playerID\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local videoID=$(echo \"$tmpresult3\" | grep -woP '\"videoID\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local videoRefID=$(echo \"$tmpresult3\" | grep -woP '\"videoRefID\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    # 取得 brightcove 播放器信息\n    local tmpresult4=$(curl ${CURL_DEFAULT_OPTS} -s \"https://players.brightcove.net/${accountID}/${playerID}_default/index.min.js\" -H 'Referer: https://tver.jp/' -H 'Sec-Fetch-Dest: script' -H 'Sec-Fetch-Mode: no-cors' -H 'Sec-Fetch-Site: cross-site' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult4\" ]; then\n        echo -n -e \"\\r TVer:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection 3)${Font_Suffix}\\n\"\n        return\n    fi\n    # 取 policy_key\n    local policyKey=$(echo \"$tmpresult4\" | sed 's/.*policyKey:\"//' | awk -F'\"' '{print $1}')\n\n    if [ -z \"${videoRefID}\" ]; then\n        # 取 deliveryConfigId\n        local deliveryConfigId=$(echo \"$tmpresult4\" | sed 's/.*deliveryConfigId:\"//' | awk -F'\"' '{print $1}')\n        # 最终检查\n        local tmpresult5=$(curl ${CURL_DEFAULT_OPTS} -s \"https://edge.api.brightcove.com/playback/v1/accounts/${accountID}/videos/${videoID}?config_id=${deliveryConfigId}\" -H \"accept: application/json;pk=${policyKey}\" -H 'origin: https://tver.jp' -H 'referer: https://tver.jp/' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: cross-site' --user-agent \"${UA_BROWSER}\")\n    else\n        # 最终检查\n        local tmpresult5=$(curl ${CURL_DEFAULT_OPTS} -s \"https://edge.api.brightcove.com/playback/v1/accounts/${accountID}/videos/ref%3A${videoRefID}\" -H \"accept: application/json;pk=${policyKey}\" -H 'origin: https://tver.jp' -H 'referer: https://tver.jp/' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: cross-site' --user-agent \"${UA_BROWSER}\")\n    fi\n\n    if [ -z \"$tmpresult5\" ]; then\n        echo -n -e \"\\r TVer:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection 4)${Font_Suffix}\\n\"\n        return\n    fi\n    local result=$(echo \"$tmpresult5\" | grep -woP '\"error_subcode\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    case \"$result\" in\n        'CLIENT_GEO') echo -n -e \"\\r TVer:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '') echo -n -e \"\\r TVer:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r TVer:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_HamiVideo() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Hami Video:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://hamivideo.hinet.net/api/play.do?id=OTT_VOD_0000249064&freeProduct=1' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Hami Video:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"code\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    case \"$result\" in\n        '06001-106') echo -n -e \"\\r Hami Video:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '06001-107') echo -n -e \"\\r Hami Video:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Hami Video:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_4GTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r 4GTV.TV:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} --tlsv1.3 -s 'https://api2.4gtv.tv/Web/IsTaiwanArea' -H 'origin: https://www.4gtv.tv' -H 'referer: https://www.4gtv.tv/' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r 4GTV.TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    result=$(echo \"$tmpresult\" | grep -woP '\"Data\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    case \"$result\" in\n        'N') echo -n -e \"\\r 4GTV.TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        'Y') echo -n -e \"\\r 4GTV.TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r 4GTV.TV:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_SlingTV() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://www.sling.com/' -w '%{http_code}_TAG_%{url_effective}\\n' -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r Sling TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local isBlocked=$(echo \"$urlEffective\" | grep -i 'geo-block')\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Sling TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r Sling TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Sling TV:\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_PlutoTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Pluto TV:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://pluto.tv/' -w '%{http_code}_TAG_%{url_effective}\\n' -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r Pluto TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local isBlocked=$(echo \"$urlEffective\" | grep 'plutotv-is-not-available')\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Pluto TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r Pluto TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Pluto TV:\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_HBOMax() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sLi 'https://www.max.com/' -w \"_TAG_%{http_code}_TAG_\" --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | grep '_TAG_' | awk -F'_TAG_' '{print $2}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r HBO Max:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local countryList=$(echo \"$tmpresult\" | grep -woP '\"url\":\"/[a-z]{2}/[a-z]{2}\"' | cut -f4 -d'\"' | cut -f2 -d'/' | sort -n | uniq | xargs | tr a-z A-Z)\n    local countryList=\"${countryList} US\"\n    local region=$(echo \"$tmpresult\" | grep -woP 'countryCode=\\K[A-Z]{2}' | head -n 1)\n    local isUnavailable=$(echo \"$countryList\" | grep \"$region\")\n\n    if [ -z \"$region\" ]; then\n        echo -n -e \"\\r HBO Max:\\t\\t\\t\\t${Font_Red}Failed (Error: Country Code Not Found)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isUnavailable\" ]; then\n        echo -n -e \"\\r HBO Max:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r HBO Max:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Showmax() {\n    local region=$(curl ${CURL_DEFAULT_OPTS} -si 'https://www.showmax.com/' -H 'host: www.showmax.com' -H 'connection: keep-alive' -H 'sec-ch-ua: \"Chromium\";v=\"124\", \"Microsoft Edge\";v=\"124\", \"Not-A.Brand\";v=\"99\"' -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'upgrade-insecure-requests: 1' -H 'user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36 Edg/124.0.0.0' -H 'accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'sec-fetch-site: none' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-user: ?1' -H 'sec-fetch-dest: document' -H 'accept-language: zh-CN,zh;q=0.9' 2>&1 | grep 'activeTerritory'| awk -F'[=;]' '{print $2}')\n    if [[ \"$region\" == \"curl\"* ]]; then\n        echo -n -e \"\\r Showmax:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$region\" ]; then\n        echo -n -e \"\\r Showmax:\\t\\t\\t\\t${Font_Green}Yes (Region: $region)${Font_Suffix}\\n\"\n        return\n    elif [ -z \"$region\" ]; then\n        echo -n -e \"\\r Showmax:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    else\n        echo -n -e \"\\r Showmax:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n}\n\nfunction MediaUnlockTest_Channel4() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Channel 4:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://www.channel4.com/simulcast/channels/C4' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r Channel 4:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r Channel 4:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r Channel 4:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Channel 4:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_ITVHUB() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r ITV Hub:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://magni.itv.com/playlist/itvonline/ITV/10_4782_0001.001' -H 'Accept: application/vnd.itv.vod.playlist.v2+json' -H 'Accept-Language: en-US,en;q=0.9' -H 'Content-Type: application/json' -H 'Origin: https://www.itv.com' -H 'Referer: https://www.itv.com/' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-site' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' --data-raw '{\"user\":{\"entitlements\":[]},\"device\":{\"manufacturer\":\"Chrome\",\"model\":\"125.0.0.0\",\"os\":{\"name\":\"Windows\",\"version\":\"10\",\"type\":\"desktop\"}},\"client\":{\"version\":\"4.1\",\"id\":\"browser\",\"supportsAdPods\":true,\"service\":\"itv.x\",\"appversion\":\"2.237.0\"},\"variantAvailability\":{\"player\":\"dash\",\"featureset\":{\"min\":[\"mpeg-dash\",\"widevine\",\"outband-webvtt\",\"hd\",\"single-track\"],\"max\":[\"mpeg-dash\",\"widevine\",\"outband-webvtt\",\"hd\",\"single-track\"]},\"platformTag\":\"dotcom\"}}' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r ITV Hub:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'Outside Of Allowed Geographic')\n    local isOK=$(echo \"$tmpresult\" | grep -i 'Playlist')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r ITV Hub:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r ITV Hub:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r ITV Hub:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r ITV Hub:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_DSTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r DSTV:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL --tlsv1.3 'https://authentication.dstv.com/favicon.ico' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r DSTV:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '403'|'451') echo -n -e \"\\r DSTV:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '404') echo -n -e \"\\r DSTV:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r DSTV:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction RegionTest_iQYI() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r iQyi Oversea Region:\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://www.iq.com/' -w \"_TAG_%{http_code}_TAG_\" -o /dev/null --user-agent \"${UA_BROWSER}\" -D -)\n\n    local httpCode=$(echo \"$tmpresult\" | grep '_TAG_' | awk -F'_TAG_' '{print $2}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r iQyi Oversea Region:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local region=$(echo \"$tmpresult\" | grep -woP 'mod=\\K[a-z]+' | tr a-z A-Z)\n    if [ -z \"$region\" ]; then\n        echo -n -e \"\\r iQyi Oversea Region:\\t\\t\\t${Font_Red}Failed (Error: Country Code Not Found)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"$region\" == 'NTW' ]; then\n        region='TW'\n    fi\n\n    echo -n -e \"\\r iQyi Oversea Region:\\t\\t\\t${Font_Green}${region}${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_HuluUS() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://auth.hulu.com/v4/web/password/authenticate' -H 'Accept: application/json' -H 'accept-language: en-US,en;q=0.9' -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' -H 'Cookie: _hulu_at=eyJhbGciOiJSUzI1NiJ9.eyJhc3NpZ25tZW50cyI6ImV5SjJNU0k2VzExOSIsInJlZnJlc2hfaW50ZXJ2YWwiOjg2NDAwMDAwLCJ0b2tlbl9pZCI6IjQyZDk0YzA5LWYyZTEtNDdmNC1iYzU4LWUwNTA2NGNhYTdhZCIsImFub255bW91c19pZCI6IjYzNDUzMjA2LWFmYzgtNDU4Yi1iODBkLWNiMzk2MmYzZGQyZCIsImlzc3VlZF9hdCI6MTcwNjYwOTUzODc5MiwidHRsIjozMTUzNjAwMDAwMCwiZGV2aWNlX3VwcGVyIjoxfQ.e7sRCOndgn1j30XYkenLcLSQ7vwc2PXk-gFHMIF2gu_3UNEJ3pp3xNOZMN0n7DQRw5Jv68WiGxIvf65s8AetOoD4NLt4sZUDDz9HCRmFHzpmAJdtXWZ-HZ4fYucENuqDDDrsdQ-FCc0mgIe2IXkmQJ6tpIN3Zgcgmpmbeoq6jYyLlqg6f8eMsI1bNAsBGGj-9DXw2PMotlYHWB22pw2NRfJw1TjWXwywRBodAOve7rsu2Vhx-A2-OH4GplRvxLqzCpl2pcjkYg9atmUB7jnNIf_jHqlek4oRRawahWq-2vWnWmb1eMQcH-v2IHs3YdVk7I-t4iS19auPQrdgo6jPaA; _hulu_assignments=eyJ2MSI6W119; bm_mi=8896E057E2FC39F20852615A0C46A2B4~YAAQZB0gFyQrnlSNAQAAU/naWRaCMaJFIPi3L8KYSiCL3AN7XHCPw0gKvdIl0XZ/VE3QiKEr31qjm9sPulHbdQ4XXIXPXZ53DpIK43fLybrT6WxIpmGz3iThk6+xefI2dPLzwBAdoTrsbAbHC2q4LDx0SBM+n21LvTD7UnT2+DyVBK75YCDJJKHlJ5jzB3Q81JIlmqfTzibjgVmPIxXrFdTs5Ll8mtp6WzE3VDISmjGjTRTrSOVYM0YGpyhye1nsm3zBCO13vDjKMCJ/6oAsVqBfgfW07e7sWkWeUiDYLUifRDymc4GaMhavenBvCma/G1qW~1; bm_sv=FEE04D9D797D0237C312D77F57DABBFD~YAAQZB0gFyUrnlSNAQAAU/naWRaMNI8KmoGX9XNJkm9x9VeeGzGQyPfu49M9MnLObz8D4ZYk9Td+3Y8Z/Jfx+kl2qOPXmtOC5GZpA++9bxUKV0SwaoGhivl+ibIJSQTc7lw4kzdM/2w8b3rwItRaHXFa+shMtD3eiKvBePrqCiezucqrcss1U4ojLKEOvcsKJGt6ZTGGs2H+Qu6cyns9BVN0BprMHRY3njHXyxbFIcGy8Lq7aPn6nuZ0ehfZ9Q==~1; ak_bmsc=55F791116713DDB91AB0978225853B77~000000000000000000000000000000~YAAQZB0gF6ErnlSNAQAAHALbWRaA625r4bWVW8g2gHV797RN8bfCwNy6KfnGEucUPiPt4QKjJUldR6lyaM7sarag6A7WLqxEFr/zAFlPQI12Uxsqdzg3IgU0R8g2eMQRnRoGMNSUPyt4rdCWWwGjEcM+dQ8TI+y1vKw9dLXoBJAHofaWe/dZhY4fx2mYKhKFibvdpwJT6UPe4rBz8igd9oTQBn69Ebi6/9YFykqGuKsllxa5+QZWczb0+HLLDRKV4CkZdhbFj0yljEOyz4GHqqP8qg3Xa3lCKzdzsrmPn6zdFbgzCE8HsyPjsmy+/rRfFxagH5rYudLqFXg5o5dXFFJPTiLXtZ/S30ckc/OUWk4JP2ywAQVm/zbp8nlRVMFDEdjIPh/F+5QXfYBV+yL4a85ThlBEXSr54/QWXiHxBRiOwhv2ydoZDfT78r9bUHbMOra37C0xutfo37fbYEw9LWlLdZCub9U5HA/zSeIN3KxrZr0yNKfJjOau7BqdHL+AuvDj134ZPZPVig==; _customer_type=anonymous; s_fid=66C80912997F4CF8-2D3140F8EDC76274; s_cc=true; _rdt_uuid=1706609517486.d5b309e4-2b0b-440f-9817-cf619e4ce15d; _gcl_au=1.1.602757068.1706609518; _scid=cc980fef-26dc-479a-b9a8-b0e531c87cd3; _scid_r=cc980fef-26dc-479a-b9a8-b0e531c87cd3; _tt_enable_cookie=1; _ttp=1h5M9exzlSz7wAFDR78KCHCsnDC; utag_main=v_id:018d59da9a5c00215e601dada5700507d001c07500bd0$_sn:1$_ss:0$_st:1706611329541$ses_id:1706609515101%3Bexp-session$_pn:1%3Bexp-session$_prevpage:%2Fwelcome%3Bexp-1706613129564$trial_duration:undefined%3Bexp-session$program_id:undefined%3Bexp-session$vapi_domain:hulu.com$g_sync_ran:1%3Bexp-session$dc_visit:1$dc_event:1%3Bexp-session$dc_region:ap-east-1%3Bexp-session; _hulu_metrics_context_v1_=%7B%22cookie_session_guid%22%3A%227dc4f3a6826f2c35125268f5ddab1849%22%2C%22referrer_url%22%3A%22%22%2C%22curr_page_uri%22%3A%22www.hulu.com%2Fwelcome%22%2C%22primary_ref_page_uri%22%3Anull%2C%22secondary_ref_page_uri%22%3Anull%2C%22curr_page_type%22%3A%22landing%22%2C%22primary_ref_page_type%22%3Anull%2C%22secondary_ref_page_type%22%3Anull%2C%22secondary_ref_click%22%3A%22%22%2C%22primary_ref_click%22%3A%22%22%7D; metrics_tracker_session_manager=%7B%22session_id%22%3A%22B26515EB8A7952D4D35F374465362A72-529671c4-c8c2-4c7c-8bff-cc201bcd4075%22%2C%22creation_time%22%3A1706609513429%2C%22visit_count%22%3A1%2C%22session_seq%22%3A4%2C%22idle_time%22%3A1706609529579%7D; guid=B26515EB8A7952D4D35F374465362A72; JSESSIONID=ED7031784C3B1843BFC9AACBB156C6BA; s_sq=wdghuluwebprod%3D%2526c.%2526a.%2526activitymap.%2526page%253Dwelcome%2526link%253DLOG%252520IN%2526region%253Dlogin-modal%2526pageIDType%253D1%2526.activitymap%2526.a%2526.c%2526pid%253Dwelcome%2526pidt%253D1%2526oid%253Dfunctionsn%252528%252529%25257B%25257D%2526oidt%253D2%2526ot%253DBUTTON; XSRF-TOKEN=bcfa1766-1f73-442d-a71b-e1cf6c275f45; _h_csrf_id=2a52618e9d006ac2e0b3e65740aa55e2584359553466051c3b01a2f1fb91726a' -H 'Origin: https://www.hulu.com' -H 'Referer: https://www.hulu.com/welcome' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-site' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' --data-raw 'user_email=me%40jamchoi.cc&password=Jam0.5cm~&recaptcha_type=web_invisible&rrventerprise=03AFcWeA6UFet_b_82RUmGfFWJCWuqy6kIn854Rhqjwd7vrkjH6Vku1wBZy8-FBA3Efx1p2cuNnKeJRuk7yJWm-xZgFfUx0Wdj2OAhiGvIdWrcpfeuQSXEqaXH4FKdmAHVZ3EqHwe5-h_zgtcyIxq-Nn1-sjeUfx1Y7QyVkb_GWJcr0GLoKgTFLzbF4kmJ8Qsi4IFx9hyYo9TFbBqtYdgxCI2q9DnEzOHrxK-987PEY8qzsR08Hrb9oDvumqLp1gs4uEVTwDKWt37aNB3CMVBKL2lHj7n768kXpgkXFDIhcM2eiJJ-H22qxKzNUpg-Q_N1xzkYsavCJG3ckQgsCTRRP2NU3nIERTWDTVXRBEq52-_ZQWu_Ds4W4UZyP0hEhCD2gambN4YJqEzaeHdGPwOR943nFbG6GILBx4vY-UUc7zjMf2HRjkNPvPpQiHMIYo21JXq6l8-IWyTeHY26NU6M4vCCbzwZEsdSln48rXM_fdBcDHC-8AxUFuBR8j3DMsB6Q3xMS2EHeGVrmhDY1izDNJZsVC_cN0W2tRneOJmni7ZU1iAYoBAGBBM5FDTE4UbYUTnuUn-htm9Q0RzukpYTumF_WwQ3HnEL0JK1Q1xea-hteI8lB4oAkhVOBOHVPii9atdZR9ZLpxRh1pdy3Lwmr1ltsubxE05wqmrmt33P2WsvH_3nBJXC_FhTD06BxT60RuiGtFr2gscHjjl_NCa1F-Dv9Hgi5ek2nLHK37a84bRSoKwLL3Lnpi9byuBntlpf-UXj7nveawKZmZTUBOSc7j6Vmmf124DTPJXsFeofMfUXkqTauPTWJBOz0OdKnLKDHMSsk7oSJVKsDUEeq0iKMdtCMBPvQBaPYAb79LDRwv_ereqyklKcUKQxeZRZmEXLKIWp8BS4U9uTXA2w8hwZWe7goLnUBQATIwojeHKpypSLnzQBu9JCwMU4aXfKIplL8sXuAx3QFD52eGZSCEyuFXP3ACN53QOlTAjjlP2eDT9fEwWHT4o8eJfviyjvm8xDmzKtq4F3u5XB3tL86-dK40XYbGcTI0Irw1nz1UTcxplFgHQgb6i8WEAqb69CQkpGWAUlmnknBirRAv2adqPaW2d_lv6L3Eo-ZupWcZ9Cu4PibM5BruVNXifBwPNPXHKw-sWBj-UP1g9VtxHVEVwoTXrbB-lT8EvjDEDQKrvOwnri4_tzVzn6YKvQMELbxSegvmc2w7xypT2qFzKRFXqwTMLT9d0rf2p9tbwbe39REMR8oI7wPfbjyJjK2XF4DmEAyVvBMuJlBaBsKBs5VynITHFWs4xvkAOe4jO_fzkKXzB6F6DB03ldasxbrNK_cepUOF6FD39-pHvbAGcoTrDrx6FSfecYXwSvc3GxM3IHSKwISKWav2iqPMtIt6ClCgUPgTCBDng2ZptXeVG8FckGIGMEdVlgGt5DG2tdMO2p8Hs5tKXuu8anc_csaaSfLIQ1_kav0dp8vpSXhCxeg899o5coXderUoIBcUsfaBJJm80YnCAc4LaM8HmYtJBcKqCC_uwCckPDOuC0SQy3d07LEi6wyifvY0Kv_-ER6wXvhNWnDZIXJNlH2369X7y8o3y2HMisOwAhfmKN7_ZAaODEOO-5x9JHocAYnt4a8_focwU9JQ_hUQgtdzYpP1ACEqxVjJb0A0NlABpm-CG8V9n9y6XpZkGQiMYJIH3jr6VilHSEM9rQSEv6LN8NFigl3-5Y4Ri7W4joz3LUMQcjFj3qXd3AXonarXhwglVNB9BYquCdA5eq4wVUeAkm3R-e56TK5IZwpb5wNJDO3PhuXHSMwv1k-NEAIfI9_w&scenario=web_password_login&csrf=c2c20e89ce4e314771dcda79994b2cd020b9c30fc25faccdc1ebef3351a5b36b' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Hulu:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"name\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    case \"$result\" in\n        'LOGIN_FORBIDDEN') echo -n -e \"\\r Hulu:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        'GEO_BLOCKED') echo -n -e \"\\r Hulu:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '' ) echo -n -e \"\\r Hulu:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Hulu:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_encoreTVB() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r encoreTVB:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://edge.api.brightcove.com/playback/v1/accounts/5324042807001/videos/6005570109001' -H \"Accept: application/json;pk=BCpkADawqM2Gpjj8SlY2mj4FgJJMfUpxTNtHWXOItY1PvamzxGstJbsgc-zFOHkCVcKeeOhPUd9MNHEGJoVy1By1Hrlh9rOXArC5M5MTcChJGU6maC8qhQ4Y8W-QYtvi8Nq34bUb9IOvoKBLeNF4D9Avskfe9rtMoEjj6ImXu_i4oIhYS0dx7x1AgHvtAaZFFhq3LBGtR-ZcsSqxNzVg-4PRUI9zcytQkk_YJXndNSfhVdmYmnxkgx1XXisGv1FG5GOmEK4jZ_Ih0riX5icFnHrgniADr4bA2G7TYh4OeGBrYLyFN_BDOvq3nFGrXVWrTLhaYyjxOr4rZqJPKK2ybmMsq466Ke1ZtE-wNQ\" -H \"Origin: https://www.encoretvb.com\" -H 'accept-language: en-US,en;q=0.9' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r encoreTVB:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"error_subcode\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    case \"$result\" in\n        'CLIENT_GEO') echo -n -e \"\\r encoreTVB:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '') echo -n -e \"\\r encoreTVB:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r encoreTVB:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_Molotov() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://fapi.molotov.tv/v1/open-europe/is-france' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Molotov:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"is_france\"\\s{0,}:\\s{0,}\\K(false|true)')\n\n    case \"$result\" in\n        'false') echo -n -e \"\\r Molotov:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        'true') echo -n -e \"\\r Molotov:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '') echo -n -e \"\\r Molotov:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Molotov:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_LineTVTW() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r LineTV.TW:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://www.linetv.tw/' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r LineTV.TW:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n    # 找 main js 的链接\n    local mainJsUrl=$(echo \"$tmpresult\" | grep -woP 'src=\"\\K[^\"]+' | grep -E '/main-[a-z0-9]{8}')\n    # 下载 main js\n    local tmpresult2=$(curl ${CURL_DEFAULT_OPTS} -s \"${mainJsUrl}\" -H 'referer: https://www.linetv.tw/' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult2\" ]; then\n        echo -n -e \"\\r LineTV.TW:\\t\\t\\t\\t${Font_Red}Failed (Network Connection 1)${Font_Suffix}\\n\"\n        return\n    fi\n    # 从 main js 里找 appId\n    local appId=$(echo \"$tmpresult2\" | grep -woP 'appId:\"\\K[^\"]+' | head -n 1)\n    # 正式测试\n    local tmpresult3=$(curl ${CURL_DEFAULT_OPTS} -s \"https://www.linetv.tw/api/part/11829/eps/1/part?appId=${appId}&productType=FAST&version=10.38.0\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult3\" ]; then\n        echo -n -e \"\\r LineTV.TW:\\t\\t\\t\\t${Font_Red}Failed (Network Connection 2)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult3\" | grep -woP '\"countryCode\"\\s{0,}:\\s{0,}\\K\\d+')\n    case \"$result\" in\n        '228') echo -n -e \"\\r LineTV.TW:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '') echo -n -e \"\\r LineTV.TW:\\t\\t\\t\\t${Font_Red}Failed (Error: Country Code Not Found)${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r LineTV.TW:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_ViuCom() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Viu.com:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://www.viu.com/' -w '%{http_code}_TAG_%{url_effective}\\n' -o /dev/null --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r Viu.com:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local region=$(echo \"$urlEffective\" | cut -f5 -d'/' | tr a-z A-Z)\n    if [ -z \"$region\" ]; then\n        echo -n -e \"\\r Viu.com:\\t\\t\\t\\t${Font_Red}Failed (Error: Country Code Not Found)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$region\" == 'NO-SERVICE' ]; then\n        echo -n -e \"\\r Viu.com:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r Viu.com:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Viu.com:\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Niconico() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Niconico:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://www.nicovideo.jp/watch/so23017073' -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Niconico:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    # 获取直播网页\n    local tmpresult2=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://live.nicovideo.jp/?cmnhd_ref=device=pc&site=nicolive&pos=header_servicelink&ref=WatchPage-Anchor' -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult2\" ]; then\n        echo -n -e \"\\r Niconico:\\t\\t\\t\\t${Font_Red}Failed (Network Connection 1)${Font_Suffix}\\n\"\n        return\n    fi\n\n    # 从直播网页中找到第一个官方直播剧\n    # echo \"$tmpresult2\" | grep -woP 'id=\"DAT-csr-data\" data-value=\"[^\"]+' | sed 's/id=\"DAT-csr-data\" data-value=\"//;s/&quot;/\"/g' | \\\n    # jq -r '.props.view.popularBeforeOpenBroadcastStatusProgramListSectionState.programList.[] | select(.isOfficialChannelMemberFree == false) | .id' | head -n 1\n    local liveID=$(echo \"$tmpresult2\" | sed 's/&quot;isOfficialChannelMemberFree&quot;:false/&quot;isOfficialChannelMemberFree&quot;:false\\r\\n/g' | grep -v '&quot;isOfficialChannelMemberFree&quot;:true' | grep -v -E 'playerProgram|&quot;ON_AIR&quot;' | grep '話' | grep -woP '&quot;id&quot;:&quot;\\Klv[0-9]+' | head -n 1)\n    if [ -z \"$liveID\" ]; then\n        echo -n -e \"\\r Niconico:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult3=$(curl ${CURL_DEFAULT_OPTS} -sL \"https://live.nicovideo.jp/watch/${liveID}\" -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult3\" ]; then\n        echo -n -e \"\\r Niconico:\\t\\t\\t\\t${Font_Red}Failed (Network Connection 2)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep '同じ地域')\n    local isJapanOnly=$(echo \"$tmpresult3\" | grep 'notAllowedCountry')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isJapanOnly\" ]; then\n        echo -n -e \"\\r Niconico:\\t\\t\\t\\t${Font_Green}Yes (LiveID: $liveID)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Niconico:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -n \"$isJapanOnly\" ]; then\n        echo -n -e \"\\r Niconico:\\t\\t\\t\\t${Font_Yellow}No (Official Live Unavailable. LiveID: ${liveID})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Niconico:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_ParamountPlus() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://www.paramountplus.com/' -w '%{http_code}_TAG_%{url_effective}\\n' -o /dev/null --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r Paramount+:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local region=$(echo \"$urlEffective\" | cut -f4 -d'/' | tr a-z A-Z)\n\n    if [ \"$region\" == 'INTL' ]; then\n        echo -n -e \"\\r Paramount+:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '200' ]; then\n        if [ -z \"$region\" ]; then\n            local region='US'\n        fi\n        echo -n -e \"\\r Paramount+:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Paramount+:\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_KKTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r KKTV:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://api.kktv.me/v3/ipcheck' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r KKTV:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    result=$(echo \"$tmpresult\" | grep -woP '\"country\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ \"$result\" == 'TW' ]; then\n        echo -n -e \"\\r KKTV:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r KKTV:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_PeacockTV() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://www.peacocktv.com/' -w '%{http_code}_TAG_%{url_effective}\\n' -o dev/null --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r Peacock TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local result=$(echo \"$urlEffective\" | grep -i 'unavailable')\n\n    if [ -n \"$result\" ]; then\n        echo -n -e \"\\r Peacock TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r Peacock TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Peacock TV:\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_FOD() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r FOD(Fuji TV):\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://geocontrol1.stream.ne.jp/fod-geo/check.xml?time=1624504256' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r FOD(Fuji TV):\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '<FLAG\\sTYPE=\"\\K[^\"]+')\n    case \"$result\" in\n        'true') echo -n -e \"\\r FOD(Fuji TV):\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        'false') echo -n -e \"\\r FOD(Fuji TV):\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '') echo -n -e \"\\r FOD(Fuji TV):\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r FOD(Fuji TV):\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_YouTube_Premium() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://www.youtube.com/premium' -H 'accept-language: en-US,en;q=0.9' -H 'cookie: YSC=FSCWhKo2Zgw; VISITOR_PRIVACY_METADATA=CgJERRIEEgAgYQ%3D%3D; PREF=f7=4000; __Secure-YEC=CgtRWTBGTFExeV9Iayjele2yBjIKCgJERRIEEgAgYQ%3D%3D; SOCS=CAISOAgDEitib3FfaWRlbnRpdHlmcm9udGVuZHVpc2VydmVyXzIwMjQwNTI2LjAxX3AwGgV6aC1DTiACGgYIgMnpsgY; VISITOR_INFO1_LIVE=Di84mAIbgKY; __Secure-BUCKET=CGQ' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r YouTube Premium:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isCN=$(echo \"$tmpresult\" | grep 'www.google.cn')\n\n    if [ -n \"$isCN\" ]; then\n        echo -n -e \"\\r YouTube Premium:\\t\\t\\t${Font_Red}No${Font_Suffix} ${Font_Green} (Region: CN)${Font_Suffix} \\n\"\n        return\n    fi\n\n    local isNotAvailable=$(echo \"$tmpresult\" | grep -i 'Premium is not available in your country')\n    local region=$(echo \"$tmpresult\" | grep -woP '\"INNERTUBE_CONTEXT_GL\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local isAvailable=$(echo \"$tmpresult\" | grep -i 'ad-free')\n\n    if [ -n \"$isNotAvailable\" ]; then\n        echo -n -e \"\\r YouTube Premium:\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -z \"$region\" ]; then\n        local region='UNKNOWN'\n    fi\n    if [ -n \"$isAvailable\" ]; then\n        echo -n -e \"\\r YouTube Premium:\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r YouTube Premium:\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n}\n\nfunction WebTest_GooglePlayStore() {\n    local result=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://play.google.com/'   -H 'accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7'   -H 'accept-language: en-US;q=0.9'   -H 'priority: u=0, i'   -H 'sec-ch-ua: \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\", \"Google Chrome\";v=\"131\"'   -H 'sec-ch-ua-mobile: ?0'   -H 'sec-ch-ua-platform: \"Windows\"'   -H 'sec-fetch-dest: document'   -H 'sec-fetch-mode: navigate'   -H 'sec-fetch-site: none'   -H 'sec-fetch-user: ?1'   -H 'upgrade-insecure-requests: 1' -H 'user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36' | grep -oP '<div class=\"yVZQTb\">\\K[^<(]+')\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r Google Play Store:\\t\\t\\t${Font_Red}Failed${Font_Suffix}\\n\"\n        return\n    else\n        echo -n -e \"\\r Google Play Store:\\t\\t\\t${Font_Green}${result}${Font_Suffix}\\n\"\n        return\n    fi\n}\n\nfunction RegionTest_YouTubeCDN() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://redirector.googlevideo.com/report_mapping' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r YouTube CDN:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local iata=$(echo \"$tmpresult\" | grep '=>' | awk \"NR==1\" | awk '{print $3}' | cut -f2 -d'-' | cut -c 1-3 | tr a-z A-Z)\n    local isIDC=$(echo \"$tmpresult\" | grep 'router')\n    local isIataFound1=$(echo \"$IATACODE\" | grep -w \"$iata\")\n    local isIataFound2=$(echo \"$IATACODE2\" | grep -w \"$iata\")\n\n    if [ -z \"$iata\" ]; then\n        echo -n -e \"\\r YouTube CDN:\\t\\t\\t\\t${Font_Red}Failed (Error: Location Unknown)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -z \"$isIataFound1\" ] && [ -z \"$isIataFound2\" ]; then\n        echo -n -e \"\\r YouTube CDN:\\t\\t\\t\\t${Font_Red}Failed (Error: IATA: ${iata} Not Found)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isIataFound1\" ]; then\n        local location=$(echo \"$IATACODE\" | grep -w \"$iata\" | awk -F'|' '{print $1}' | awk '{$1=$1; print}')\n    fi\n    if [ -z \"$isIataFound1\" ] && [ -n \"$isIataFound2\" ]; then\n        local location=$(echo \"$IATACODE2\" | grep -w \"$iata\" | awk -F',' '{print $2}' | awk '{$1=$1; print}' | tr A-Z a-z | sed 's/\\b[a-z]/\\U&/g')\n    fi\n\n    if [ -z \"$isIDC\" ]; then\n        local cdnISP=$(echo \"$tmpresult\" | awk 'NR==1' | awk '{print $3}' | cut -f1 -d'-' | tr a-z A-Z)\n        echo -n -e \"\\r YouTube CDN:\\t\\t\\t\\t${Font_Yellow}[${cdnISP}] in [${location}]${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isIDC\" ]; then\n        echo -n -e \"\\r YouTube CDN:\\t\\t\\t\\t${Font_Green}${location}${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r YouTube CDN:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction WebTest_GoogleSearchCAPTCHA() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://www.google.com/search?q=curl&oq=curl&gs_lcrp=EgZjaHJvbWUyBggAEEUYOdIBBzg1MmowajGoAgCwAgE&sourceid=chrome&ie=UTF-8' -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-model: \"\"' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-ch-ua-platform-version: \"15.0.0\"' -H 'sec-ch-ua-wow64: ?0' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Google Search CAPTCHA Free:\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -iE 'unusual traffic from|is blocked|unaddressed abuse')\n    local isOK=$(echo \"$tmpresult\" | grep -i 'curl')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r Google Search CAPTCHA Free:\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Google Search CAPTCHA Free:\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r Google Search CAPTCHA Free:\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Google Search CAPTCHA Free:\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_BritBox() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://www.britbox.com/' -w '%{http_code}_TAG_%{url_effective}\\n' -o dev/null --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r BritBox:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local result=$(echo \"$urlEffective\" | grep -E 'locationnotsupported|locationnotvalidated|britbox.co.uk')\n\n    if [ -n \"$result\" ]; then\n        echo -n -e \"\\r BritBox:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r BritBox:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r BritBox:\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_PrimeVideo() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Amazon Prime Video:\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://www.primevideo.com' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Amazon Prime Video:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'isServiceRestricted')\n    local region=$(echo \"$tmpresult\" | grep -woP '\"currentTerritory\":\"\\K[^\"]+' | head -n 1)\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$region\" ]; then\n        echo -n -e \"\\r Amazon Prime Video:\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Amazon Prime Video:\\t\\t\\t${Font_Red}No (Service Not Available)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$region\" ]; then\n        echo -n -e \"\\r Amazon Prime Video:\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Amazon Prime Video:\\t\\t\\t${Font_Red}Failed (Error: Unknown Region)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Radiko() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Radiko:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://radiko.jp/area?_=1625406539531' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Radiko:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep 'class=\"OUT\"')\n    local isOK=$(echo \"$tmpresult\" | grep -i 'JAPAN')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r Radiko:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Radiko:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        local area=$(echo \"$tmpresult\" | awk '{print $2}' | sed 's/.*>//')\n        echo -n -e \"\\r Radiko:\\t\\t\\t\\t${Font_Green}Yes (City: $area)${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Radiko:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_DMM() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r DMM:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://bitcoin.dmm.com/' -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' --user-agent \"${UA_BROWSER}\")\n    if [ -z  \"$tmpresult\" ]; then\n        echo -n -e \"\\r DMM:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep 'This page is not available in your area')\n    local isOK=$(echo \"$tmpresult\" | grep '暗号資産')\n\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r DMM:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r DMM:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r DMM:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r DMM:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_DMMTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r DMM TV:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://api.beacon.dmm.com/v1/streaming/start' -X POST -d '{\"player_name\":\"dmmtv_browser\",\"player_version\":\"0.0.0\",\"content_type_detail\":\"VOD_SVOD\",\"content_id\":\"11uvjcm4fw2wdu7drtd1epnvz\",\"purchase_product_id\":null}' -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r DMM TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep 'FOREIGN')\n    local isOK=$(echo \"$tmpresult\" | grep 'UNAUTHORIZED')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r DMM TV:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r DMM TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r DMM TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r DMM TV:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Catchplay() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r CatchPlay+:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://sunapi.catchplay.com/geo' -H \"authorization: Basic NTQ3MzM0NDgtYTU3Yi00MjU2LWE4MTEtMzdlYzNkNjJmM2E0Ok90QzR3elJRR2hLQ01sSDc2VEoy\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r CatchPlay+:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\"  | grep -woP '\"code\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r CatchPlay+:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    case \"$result\" in\n        '0') echo -n -e \"\\r CatchPlay+:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '100016') echo -n -e \"\\r CatchPlay+:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Now E:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_HotStar() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sLi 'https://www.hotstar.com' -w '\\n_TAG_%{http_code}_TAG_%{url_effective}_TAG_\\n' --user-agent \"${UA_BROWSER}\")\n\n    local httpCode=$(echo \"$tmpresult\" | grep -o '_TAG_.*_TAG_' | awk -F'_TAG_' '{print $2}')\n\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r HotStar:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '403' ]; then\n        echo -n -e \"\\r HotStar:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '475' ]; then\n        echo -n -e \"\\r HotStar:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | grep -o '_TAG_.*_TAG_' | awk -F'_TAG_' '{print $3}')\n    local region=$(echo \"$tmpresult\" | grep -woP 'geo=\\K[A-Z]+' | head -n 1)\n    local siteRegion=$(echo \"$urlEffective\" | sed 's@.*com/@@' | tr a-z A-Z)\n\n    if [ -z \"$region\" ]; then\n        echo -n -e \"\\r HotStar:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if  [ \"$region\" == 'US' ]; then\n        echo -n -e \"\\r HotStar:\\t\\t\\t\\t${Font_Yellow}No (Discontinued in the US)${Font_Suffix}\\n\"\n        return\n    fi\n    if  [ \"$region\" == \"$siteRegion\" ]; then\n        echo -n -e \"\\r HotStar:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r HotStar:\\t\\t\\t\\t${Font_Red}Failed (Error: REGION ERROR ${region}_${siteRegion})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_LiTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r LiTV:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local fakePUid=$(gen_uuid)\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://www.litv.tv/api/get-urls-no-auth' -H 'accept: application/json, text/plain, */*' -H 'content-type: application/json' -H 'accept-language: en-US,en;q=0.9' -H 'origin: https://www.litv.tv' -H 'referer: https://www.litv.tv/drama/watch/VOD00328856' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-origin' --data-raw \"{\\\"AssetId\\\":\\\"vod70810-000001M001_1500K\\\",\\\"MediaType\\\":\\\"vod\\\",\\\"puid\\\":\\\"${fakePUid}\\\"}\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r LiTV:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isOK=$(echo \"$tmpresult\" | grep 'AssetURLs')\n    local result=$(echo \"$tmpresult\" | grep -woP '\"code\"\\s{0,}:\\s{0,}\\K[^\"][0-9]{0,}')\n\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r LiTV:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    case \"$result\" in\n        '42000087') echo -n -e \"\\r LiTV:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '42000075') echo -n -e \"\\r LiTV:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;; # 剧集不存在\n        '') echo -n -e \"\\r LiTV:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r LiTV:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_FuboTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Fubo TV:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fs \"https://api.fubo.tv/v3/location\" -H 'accept: */*' -H 'accept-language: en-US,en;q=0.9' -H 'origin: https://www.fubo.tv' -H 'referer: https://www.fubo.tv/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Fubo TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local noService=$(echo \"$tmpresult\" | grep -i 'NO_SERVICE_IN_COUNTRY')\n    local isAllowed=$(echo \"$tmpresult\" | grep -o '\"network_allowed\":true')\n    local isBlocked=$(echo \"$tmpresult\" | grep -o '\"network_allowed\":false')\n    local countryCode=$(echo \"$tmpresult\" | grep -oP '\"country_code2\":\"\\K[^\"]+')\n\n    if [ -n \"$noService\" ]; then\n        echo -n -e \"\\r Fubo TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Fubo TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isAllowed\" ]; then\n        echo -n -e \"\\r Fubo TV:\\t\\t\\t\\t${Font_Green}Yes (Region:${countryCode})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Fubo TV:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Fox() {\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://x-live-fox-stgec.uplynk.com/ausw/slices/8d1/d8e6eec26bf544f084bad49a7fa2eac5/8d1de292bcc943a6b886d029e6c0dc87/G00000000.ts?pbs=c61e60ee63ce43359679fb9f65d21564&cloud=aws&si=0' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r FOX:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r FOX:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r FOX:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r FOX:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_Joyn() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Joyn:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpauth=$(curl ${CURL_DEFAULT_OPTS} -s 'https://auth.joyn.de/auth/anonymous' -X POST -H \"Content-Type: application/json\" -d '{\"client_id\":\"b74b9f27-a994-4c45-b7eb-5b81b1c856e7\",\"client_name\":\"web\",\"anon_device_id\":\"b74b9f27-a994-4c45-b7eb-5b81b1c856e7\"}' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpauth\" ]; then\n        echo -n -e \"\\r Joyn:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local auth=$(echo \"$tmpauth\" | grep -woP '\"access_token\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://api.joyn.de/content/entitlement-token' -H \"x-api-key: 36lp1t4wto5uu2i2nk57ywy9on1ns5yg\" -H \"content-type: application/json\" -d '{\"content_id\":\"daserste-de-hd\",\"content_type\":\"LIVE\"}' -H \"authorization: Bearer ${auth}\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Joyn:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isOK=$(echo \"$tmpresult\" | grep -i 'entitlement_token')\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'ENT_AssetNotAvailableInCountry')\n\n    if [ -z \"$isOK\" ] && [ -z \"$isBlocked\" ]; then\n        echo -n -e \"\\r Joyn:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Joyn:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r Joyn:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Joyn:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_SpotvNow() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r SPOTV NOW:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://edge.api.brightcove.com/playback/v1/accounts/5764318566001/videos/6349973203112' -H 'accept: application/json;pk=BCpkADawqM0U3mi_PT566m5lvtapzMq3Uy7ICGGjGB6v4Ske7ZX_ynzj8ePedQJhH36nym_5mbvSYeyyHOOdUsZovyg2XlhV6rRspyYPw_USVNLaR0fB_AAL2HSQlfuetIPiEzbUs1tpNF9NtQxt3BAPvXdOAsvy1ltLPWMVzJHiw9slpLRgI2NUufc' -H 'accept-language: en-US,en;q=0.9' -H 'origin: https://www.spotvnow.co.kr' -H 'referer: https://www.spotvnow.co.kr/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: cross-site' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r SPOTV NOW:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"error_subcode\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n\n    case \"$result\" in\n        'CLIENT_GEO') echo -n -e \"\\r SPOTV NOW:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '') echo -n -e \"\\r SPOTV NOW:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r SPOTV NOW:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_SKY_DE() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r SKY DE:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://edge.api.brightcove.com/playback/v1/accounts/1050888051001/videos/6247131490001' -H \"Accept: application/json;pk=BCpkADawqM0OXCLe4eIkpyuir8Ssf3kIQAM62a1KMa4-1_vTOWQIxoHHD4-oL-dPmlp-rLoS-WIAcaAMKuZVMR57QY4uLAmP4Ov3V416hHbqr0GNNtzVXamJ6d4-rA3Xi98W-8wtypdEyjGEZNepUCt3D7UdMthbsG-Ean3V4cafT4nZX03st5HlyK1chp51SfA-vKcAOhHZ4_Oa9TTN61tEH6YqML9PWGyKrbuN5myICcGsFzP3R2aOF8c5rPCHT2ZAiG7MoavHx8WMjhfB0QdBr2fphX24CSpUKlcjEnQJnBiA1AdLg9iyReWrAdQylX4Eyhw5OwKiCGJznfgY6BDtbUmeq1I9r9RfmhP5bfxVGjILSEFZgXbMqGOvYdrdare0aW2fTCxeHdHt0vyKOWTC6CS1lrGJF2sFPKn1T1csjVR8s4MODqCBY1PTbHY4A9aZ-2MDJUVJDkOK52hGej6aXE5b9N9_xOT2B9wbXL1B1ZB4JLjeAdBuVtaUOJ44N0aCd8Ns0o02E1APxucQqrjnEociLFNB0Bobe1nkGt3PS74IQcs-eBvWYSpolldMH6TKLu8JqgdnM4WIp3FZtTWJRADgAmvF9tVDUG9pcJoRx_CZ4im-rn-AzN3FeOQrM4rTlU3Q8YhSmyEIoxYYqsFDwbFlhsAcvqQkgaElYtuciCL5i3U8N4W9rIhPhQJzsPafmLdWxBP_FXicyek25GHFdQzCiT8nf1o860Jv2cHQ4xUNcnP-9blIkLy9JmuB2RgUXOHzWsrLGGW6hq9wLUtqwEoxcEAAcNJgmoC0k8HE-Ga-NHXng6EFWnqiOg_mZ_MDd7gmHrrKLkQV\" -H \"Origin: https://www.sky.de\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r SKY DE:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"error_subcode\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n\n    case \"$result\" in\n        'CLIENT_GEO') echo -n -e \"\\r SKY DE:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '') echo -n -e \"\\r SKY DE:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r SKY DE:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_ZDF() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r ZDF: \\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://ssl.zdf.de/geo/de/geo.txt/' -w %{http_code} -o /dev/null --user-agent \"${UA_ANDROID}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r ZDF: \\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '404') echo -n -e \"\\r ZDF: \\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r ZDF: \\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r ZDF: \\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_HBOGO_ASIA() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r HBO GO Asia:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://api2.hbogoasia.com/v1/geog?lang=undefined&version=0&bundleId=www.hbogoasia.com' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r HBO GO Asia:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"territory\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r HBO GO Asia:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    local region=$(echo \"$tmpresult\" | grep -woP '\"country\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -n \"$region\" ]; then\n        echo -n -e \"\\r HBO GO Asia:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r HBO GO Asia:\\t\\t\\t\\t${Font_Red}Failed (Error: Country Code Not Found)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_EPIX() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r MGM+:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpToken=$(curl ${CURL_DEFAULT_OPTS} -s 'https://api.epix.com/v2/sessions' -X POST -H 'host: api.epix.com' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'traceparent: 00-000000000000000015b7efdb572b7bf2-4aefaea90903bd1f-01' -H 'sec-ch-ua-mobile: ?0' -H 'x-datadog-origin: rum' -H 'x-datadog-sampling-priority: 1' -H 'accept: application/json' -H 'x-datadog-trace-id: 1564983120873880562' -H 'x-datadog-parent-id: 5399726519264460063' -H 'sec-ch-ua-platform: \"Windows\"' -H 'origin: https://www.mgmplus.com' -H 'sec-fetch-site: cross-site' -H 'sec-fetch-mode: cors' -H 'sec-fetch-dest: empty' -H 'referer: https://www.mgmplus.com/' -H 'accept-language: en-US,en;q=0.9' -H 'content-type: application/json' -d '{\"device\":{\"guid\":\"7a0baaaf-384c-45cd-a21d-310ca5d3002a\",\"format\":\"console\",\"os\":\"web\",\"display_width\":1865,\"display_height\":942,\"app_version\":\"1.0.2\",\"model\":\"browser\",\"manufacturer\":\"google\"},\"apikey\":\"53e208a9bbaee479903f43b39d7301f7\"}' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpToken\" ]; then\n        echo -n -e \"\\r MGM+:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local is403=$(echo \"$tmpToken\" | grep -i '403 ERROR')\n    if [ -n \"$is403\" ]; then\n        echo -n -e \"\\r MGM+:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    local epixToken=$(echo \"$tmpToken\" | grep -woP '\"session_token\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"$epixToken\" ]; then\n        echo -n -e \"\\r MGM+:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://api.epix.com/graphql' -X POST -H 'host: api.epix.com' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'traceparent: 00-0000000000000000603047c112148412-32d64f8c890631ef-01' -H 'sec-ch-ua-mobile: ?0' -H 'x-datadog-origin: rum' -H 'x-datadog-sampling-priority: 1' -H 'accept: application/json' -H \"x-session-token: ${epixToken}\" -H 'x-datadog-trace-id: 6931118721080787986' -H 'x-datadog-parent-id: 3663202811925377519' -H 'sec-ch-ua-platform: \"Windows\"' -H 'origin: https://www.mgmplus.com' -H 'sec-fetch-site: cross-site' -H 'sec-fetch-mode: cors' -H 'sec-fetch-dest: empty' -H 'referer: https://www.mgmplus.com/' -H 'accept-language: en-US,en;q=0.9' -H 'content-type: application/json' -d '{\"operationName\":\"PlayFlow\",\"variables\":{\"id\":\"c2VyaWVzOzEwMTc=\",\"supportedActions\":[\"open_url\",\"show_notice\",\"start_billing\",\"play_content\",\"log_in\",\"noop\",\"confirm_provider\",\"unlinked_provider\"],\"streamTypes\":[{\"encryptionScheme\":\"CBCS\",\"packagingSystem\":\"DASH\"},{\"encryptionScheme\":\"CENC\",\"packagingSystem\":\"DASH\"},{\"encryptionScheme\":\"NONE\",\"packagingSystem\":\"HLS\"},{\"encryptionScheme\":\"SAMPLE_AES\",\"packagingSystem\":\"HLS\"}]},\"query\":\"fragment ShowNotice on ShowNotice {\\n  type\\n  actions {\\n    continuationContext\\n    text\\n    __typename\\n  }\\n  description\\n  title\\n  __typename\\n}\\n\\nfragment OpenUrl on OpenUrl {\\n  type\\n  url\\n  __typename\\n}\\n\\nfragment Content on Content {\\n  title\\n  __typename\\n}\\n\\nfragment Movie on Movie {\\n  id\\n  shortName\\n  __typename\\n}\\n\\nfragment Episode on Episode {\\n  id\\n  series {\\n    shortName\\n    __typename\\n  }\\n  seasonNumber\\n  number\\n  __typename\\n}\\n\\nfragment Preroll on Preroll {\\n  id\\n  __typename\\n}\\n\\nfragment ContentUnion on ContentUnion {\\n  ...Content\\n  ...Movie\\n  ...Episode\\n  ...Preroll\\n  __typename\\n}\\n\\nfragment PlayContent on PlayContent {\\n  type\\n  continuationContext\\n  heartbeatToken\\n  currentItem {\\n    content {\\n      ...ContentUnion\\n      __typename\\n    }\\n    __typename\\n  }\\n  nextItem {\\n    content {\\n      ...ContentUnion\\n      __typename\\n    }\\n    showNotice {\\n      ...ShowNotice\\n      __typename\\n    }\\n    showNoticeAt\\n    __typename\\n  }\\n  amazonPlaybackData {\\n    pid\\n    playbackToken\\n    materialType\\n    __typename\\n  }\\n  playheadPosition\\n  vizbeeStreamInfo {\\n    customStreamInfo\\n    __typename\\n  }\\n  closedCaptions {\\n    ttml {\\n      location\\n      __typename\\n    }\\n    vtt {\\n      location\\n      __typename\\n    }\\n    xml {\\n      location\\n      __typename\\n    }\\n    __typename\\n  }\\n  hints {\\n    duration\\n    seekAllowed\\n    trackingEnabled\\n    trackingId\\n    __typename\\n  }\\n  streams(types: $streamTypes) {\\n    playlistUrl\\n    closedCaptionsEmbedded\\n    packagingSystem\\n    encryptionScheme\\n    videoQuality {\\n      height\\n      width\\n      __typename\\n    }\\n    widevine {\\n      authenticationToken\\n      licenseServerUrl\\n      __typename\\n    }\\n    playready {\\n      authenticationToken\\n      licenseServerUrl\\n      __typename\\n    }\\n    fairplay {\\n      authenticationToken\\n      certificateUrl\\n      licenseServerUrl\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment StartBilling on StartBilling {\\n  type\\n  __typename\\n}\\n\\nfragment LogIn on LogIn {\\n  type\\n  __typename\\n}\\n\\nfragment Noop on Noop {\\n  type\\n  __typename\\n}\\n\\nfragment PreviewContent on PreviewContent {\\n  type\\n  title\\n  description\\n  stream {\\n    sources {\\n      hls {\\n        location\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ConfirmProvider on ConfirmProvider {\\n  type\\n  __typename\\n}\\n\\nfragment UnlinkedProvider on UnlinkedProvider {\\n  type\\n  __typename\\n}\\n\\nquery PlayFlow($id: String!, $supportedActions: [PlayFlowActionEnum!]!, $context: String, $behavior: BehaviorEnum = DEFAULT, $streamTypes: [StreamDefinition!]) {\\n  playFlow(\\n    id: $id\\n    supportedActions: $supportedActions\\n    context: $context\\n    behavior: $behavior\\n  ) {\\n    ...ShowNotice\\n    ...OpenUrl\\n    ...PlayContent\\n    ...StartBilling\\n    ...LogIn\\n    ...Noop\\n    ...PreviewContent\\n    ...ConfirmProvider\\n    ...UnlinkedProvider\\n    __typename\\n  }\\n}\"}' --user-agent \"${UA_BROWSER}\")\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'MGM+ is only available in the United States')\n    local isOK=$(echo \"$tmpresult\" | grep -i 'StartBilling')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r MGM+:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r MGM+:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r MGM+:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r MGM+:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_NLZIET() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r NLZIET:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://api.nlziet.nl/v7/stream/handshake/Widevine/Dash/VOD/rzIL9rb-TkSn-ek_wBmvaw?playerName=BitmovinWeb' -H 'accept: application/json, text/plain, */*' -H 'accept-language: en-US,en;q=0.9' -H 'authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IkM4M0YzQUFGOTRCOTM0ODA2NkQwRjZDRTNEODhGQkREIiwidHlwIjoiYXQrand0In0.eyJuYmYiOjE3MTIxMjY0NTMsImV4cCI6MTcxMjE1NTI0OCwiaXNzIjoiaHR0cHM6Ly9pZC5ubHppZXQubmwiLCJhdWQiOiJhcGkiLCJjbGllbnRfaWQiOiJ0cmlwbGUtd2ViIiwic3ViIjoiMDAzMTZiNGEtMDAwMC0wMDAwLWNhZmUtZjFkZTA1ZGVlZmVlIiwiYXV0aF90aW1lIjoxNzEyMTI2NDUzLCJpZHAiOiJsb2NhbCIsImVtYWlsIjoibXVsdGkuZG5zMUBvdXRsb29rLmNvbSIsInVzZXJJZCI6IjMyMzg3MzAiLCJjdXN0b21lcklkIjoiMCIsImRldmljZUlkZW50aWZpZXIiOiJJZGVudGl6aWV0LTI0NWJiNmYzLWM2ZjktNDNjZS05ODhmLTgxNDc2OTcwM2E5OCIsImV4dGVybmFsVXNlcklkIjoiZTM1ZjdkMzktMjQ0ZC00ZTkzLWFkOTItNGFjYzVjNGY0NGNlIiwicHJvZmlsZUlkIjoiMjdDMzM3RjktOTRDRS00NjBDLTlBNjktMTlDNjlCRTYwQUIzIiwicHJvZmlsZUNvbG9yIjoiRkY0MjdDIiwicHJvZmlsZVR5cGUiOiJBZHVsdCIsIm5hbWUiOiJTdHJlYW1pbmciLCJqdGkiOiI4Q0M1QzYzNkJGRjg3MEE2REJBOERBNUMwQTk0RUZDRiIsImlhdCI6MTcxMjEyNjQ1Mywic2NvcGUiOlsiYXBpIiwib3BlbmlkIl0sImFtciI6WyJwcm9maWxlIiwicHdkIl19.bk-ziFPJM00bpE7TcgPmIYFFx-2Q5N3BkUzEvQ_dDMK9O1F9f7DEe-Qzmnb5ym7ChlnXwrCV3QyOOA24hu_gCrlNlD7-vI3XGZR-54zFD-F7cRDOoL-1-iO_10tmgwb5Io-svY0bn0EDYKeRxYYBi0w_3bFVFDM2CxxA6tWeBYIfN5rCSzBHd3RPPjYtqX-sogyh_5W_7KJ83GK5kpsywT3mz8q7Cs1mtKs9QA1-o01N0RvTxZAcfzsHg3-qGgLnvaAuZ_XqRK9kLWqJWeJTWKWtUI6OlPex22sY3keKFpfZnUtFv-BvkCM6tvbIlMZAClk3lhI8rMFAWDpUcbcS3w' -H 'nlziet-appname: WebApp' -H 'nlziet-appversion: 5.43.24' -H 'origin: https://app.nlziet.nl' -H 'referer: https://app.nlziet.nl/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r NLZIET:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'CountryNotAllowed')\n    local isOK=$(echo \"$tmpresult\" | grep -i 'streamSessionId')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r NLZIET:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r NLZIET:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r NLZIET:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r NLZIET:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_videoland() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://api.videoland.com/subscribe/videoland-account/graphql' -X POST -H 'host: api.videoland.com' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'apollographql-client-name: apollo_accounts_base' -H 'traceparent: 00-cab2dbd109bf1e003903ec43eb4c067d-623ef8e56174b85a-01' -H 'sec-ch-ua-mobile: ?0' -H 'accept: */*' -H 'sec-ch-ua-platform: \"Windows\"' -H 'origin: https://www.videoland.com' -H 'sec-fetch-site: same-site' -H 'sec-fetch-mode: cors' -H 'sec-fetch-dest: empty' -H 'referer: https://www.videoland.com/' -H 'accept-language: en-US,en;q=0.9' -H 'content-type: application/json' -d '{\"operationName\":\"IsOnboardingGeoBlocked\",\"variables\":{},\"query\":\"query IsOnboardingGeoBlocked {\\n  isOnboardingGeoBlocked\\n}\\n\"}' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r videoland:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"isOnboardingGeoBlocked\"\\s{0,}:\\s{0,}\\K(false|true)')\n    case \"$result\" in\n        'false') echo -n -e \"\\r videoland:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        'true') echo -n -e \"\\r videoland:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '') echo -n -e \"\\r videoland:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r videoland:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_NPO_Start_Plus() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://www.npo.nl/start/api/domain/player-token?productId=LI_NL1_4188102' -H 'host: www.npo.nl' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'accept: application/json, text/plain, */*' -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-site: same-origin' -H 'sec-fetch-mode: cors' -H 'sec-fetch-dest: empty' -H 'referer: https://www.npo.nl/start/live?channel=NPO1' -H 'accept-language: en-US,en;q=0.9' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r NPO Start Plus:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local token=$(echo \"$tmpresult\" | grep -woP '\"token\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local result=$(curl ${CURL_DEFAULT_OPTS} -s 'https://prod.npoplayer.nl/stream-link' -w %{http_code} -o /dev/null -H 'accept: */*' -H \"authorization: ${token}\" -H 'content-type: application/json' -H 'origin: https://npo.nl' -H 'referer: https://npo.nl/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: cross-site' --data-raw '{\"profileName\":\"dash\",\"drmType\":\"playready\",\"referrerUrl\":\"https://npo.nl/start/live?channel=NPO1\"}' -H 'accept-language: en-US,en;q=0.9' --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r NPO Start Plus:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r NPO Start Plus:\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '451') echo -n -e \"\\r NPO Start Plus:\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r NPO Start Plus:\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_RakutenTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Rakuten TV:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local fakeUuid=$(gen_uuid)\n    local fakeIfaId=$(gen_uuid)\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://gizmo.rakuten.tv/v3/me/start?device_identifier=web&device_stream_audio_quality=2.0&device_stream_hdr_type=NONE&device_stream_video_quality=FHD' -H 'accept: application/json, text/plain, */*' -H 'accept-language: en-US,en;q=0.9' -H 'content-type: application/json' -H 'origin: https://www.rakuten.tv' -H 'referer: https://www.rakuten.tv/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' --data-raw '{\"device_identifier\":\"web\",\"device_metadata\":{\"app_version\":\"v5.5.30\",\"audio_quality\":\"2.0\",\"brand\":\"chrome\",\"firmware\":\"XX.XX.XX\",\"hdr\":false,\"model\":\"GENERIC\",\"os\":\"Windows 10\",\"sdk\":\"125.0.0\",\"serial_number\":\"not implemented\",\"trusted_uid\":false,\"uid\":\"824b3fe9-e080-4c33-912b-3f67d96f5f99\",\"video_quality\":\"FHD\",\"year\":1970},\"ifa_id\":\"4ac8a156-b857-4335-96c1-fa8930430092\"}' --user-agent \"${UA_BROWSER}\")\n\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Rakuten TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -iE 'VPN|forbidden|is not available')\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Rakuten TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    local region=$(echo \"$tmpresult\" | grep -woP '\"iso3166_code\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"$region\" ]; then\n        echo -n -e \"\\r Rakuten TV:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isOK=$(echo \"$tmpresult\" | grep -i 'streaming_drm_types')\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r Rakuten TV:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Rakuten TV:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_MoviStarPlus() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Movistar+:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -s 'https://contratar.movistarplus.es/' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r Movistar+:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r Movistar+:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r Movistar+:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Movistar+:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_Starz() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Starz:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local authorization=$(curl ${CURL_DEFAULT_OPTS} -s 'https://www.starz.com/sapi/header/v1/starz/us/09b397fc9eb64d5080687fc8a218775b' -H \"Referer: https://www.starz.com/us/en/\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$authorization\" ]; then\n        echo -n -e \"\\r Starz:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://auth.starz.com/api/v4/User/geolocation' -H \"AuthTokenAuthorization: $authorization\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Starz:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection 1)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isAllowedAccess=$(echo \"$tmpresult\" | grep -woP '\"isAllowedAccess\"\\s{0,}:\\s{0,}\\K(false|true)')\n    local isAllowedCountry=$(echo \"$tmpresult\" | grep -woP '\"isAllowedCountry\"\\s{0,}:\\s{0,}\\K(false|true)')\n    local isKnownProxy=$(echo \"$tmpresult\" | grep -woP '\"isKnownProxy\"\\s{0,}:\\s{0,}\\K(false|true)')\n\n    if [ -z \"$isAllowedAccess\" ] || [ -z \"$isAllowedCountry\" ] || [ -z \"$isKnownProxy\" ]; then\n        echo -n -e \"\\r Starz:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$isAllowedAccess\" == 'true' ] && [ \"$isAllowedCountry\" == 'true' ] && [ \"$isKnownProxy\" == 'false' ]; then\n        echo -n -e \"\\r Starz:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$isAllowedAccess\" == 'false' ]; then\n        echo -n -e \"\\r Starz:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$isKnownProxy\" == 'false' ]; then\n        echo -n -e \"\\r Starz:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Starz:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_CanalPlus() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Canal+:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://boutique-tunnel.canalplus.com/' -w '%{http_code}_TAG_%{url_effective}\\n' -o dev/null --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r Canal+:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local result=$(echo \"$urlEffective\" | grep -i 'other-country-blocking')\n    if [ -n \"$result\" ]; then\n        echo -n -e \"\\r Canal+:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r Canal+:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Canal+:\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Sky_CH() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://sky.ch/' -w '%{http_code}_TAG_%{url_effective}\\n' -o /dev/null --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r SKY CH:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"$httpCode\" == '403' ]; then\n        echo -n -e \"\\r SKY CH:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local result=$(echo \"$urlEffective\" | grep -i 'out-of-country')\n    if [ -n \"$result\" ]; then\n        echo -n -e \"\\r SKY CH:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r SKY CH:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r SKY CH:\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_CBCGem() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r CBC Gem:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://www.cbc.ca/g/stats/js/cbc-stats-top.js' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r CBC Gem:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"country\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"${result}\" ]; then\n        echo -n -e \"\\r CBC Gem:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"$result\" == 'CA' ]; then\n        echo -n -e \"\\r CBC Gem:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r CBC Gem:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_AcornTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Acorn TV:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://acorn.tv/' -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Acorn TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -iE 'not yet available in your|unavailable in your')\n    local isOK=$(echo \"$tmpresult\" | grep -i 'signup.acorn.tv')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r Acorn TV:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Acorn TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r Acorn TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Acorn TV:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Crave() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Crave:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://capi.9c9media.com/destinations/crave_atexace/platforms/desktop/playback/contents/2917721/contentPackages/6642701/manifest.mpd?action=reference&ssl=true&filter=fe&mca=false&uhd=false&mcv=false&hd=true&tpt=true&mta=true&stt=true&multilang=true' -H 'Content-Type: application/json' -H 'Origin: https://www.crave.ca' -H 'Referer: https://www.crave.ca/' -H 'accept-language: en-US,en;q=0.9' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: cross-site'  -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Crave:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isOK=$(echo \"$tmpresult\" | grep -i 'video.9c9media.com')\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'Geo Constraint Restrictions')\n\n    if [ -z \"$isOK\" ] && [ -z \"$isBlocked\" ]; then\n        echo -n -e \"\\r Crave:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Crave:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r Crave:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Crave:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Amediateka() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Amediateka:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://www.amediateka.ru/' -w '%{http_code}_TAG_%{url_effective}\\n' -o /dev/null --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r Amediateka:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local result=$(echo \"$urlEffective\" | grep -i 'unavailable')\n    if [ -n \"$result\" ]; then\n        echo -n -e \"\\r Amediateka:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '503' ]; then\n        echo -n -e \"\\r Amediateka:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r Amediateka:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Amediateka:\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_MegogoTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Megogo TV:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://megogo.net/en' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Megogo TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local vpnDetected=$(echo \"$tmpresult\" | grep -i 'VPN')\n    if [ -n \"$vpnDetected\" ]; then\n        echo -n -e \"\\r Abema.TV:\\t\\t\\t\\t${Font_Yellow}Yes (VPN Detected)${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Megogo TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_RaiPlay() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Rai Play:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://mediapolisvod.rai.it/relinker/relinkerServlet.htm?cont=VxXwi7UcqjApssSlashbjsAghviAeeqqEEqualeeqqEEqual&output=64' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Rai Play:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '<geoprotection>\\K[^<]+')\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'video_no_available')\n\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r Rai Play:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Rai Play:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    case \"$result\" in\n        'Y') echo -n -e \"\\r Rai Play:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        'N') echo -n -e \"\\r Rai Play:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Rai Play:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_TVBAnywhere() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r TVBAnywhere+:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://uapisfm.tvbanywhere.com.sg/geoip/check/platform/android' -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r TVBAnywhere+:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"allow_in_this_country\"\\s{0,}:\\s{0,}\\K(false|true)')\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r TVBAnywhere+:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    case \"$result\" in\n        'true') echo -n -e \"\\r TVBAnywhere+:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        'false') echo -n -e \"\\r TVBAnywhere+:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r TVBAnywhere+:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction GameTest_ProjectSekai() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Project Sekai: Colorful Stage:\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://game-version.sekai.colorfulpalette.org/1.8.1/3ed70b6a-8352-4532-b819-108837926ff5' -w %{http_code} -o /dev/null -H \"User-Agent: pjsekai/48 CFNetwork/1240.0.4 Darwin/20.6.0\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r Project Sekai: Colorful Stage:\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r Project Sekai: Colorful Stage:\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r Project Sekai: Colorful Stage:\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Project Sekai: Colorful Stage:\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction GameTest_KonosubaFD() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Konosuba Fantastic Days:\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://api.konosubafd.jp/api/masterlist' -X POST -w %{http_code} -o /dev/null -H \"User-Agent: pj0007/212 CFNetwork/1240.0.4 Darwin/20.6.0\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r Konosuba Fantastic Days:\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r Konosuba Fantastic Days:\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r Konosuba Fantastic Days:\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Konosuba Fantastic Days:\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_NBATV() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://www.nba.com/watch/' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r NBA TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -i 'Service is not available in your region')\n\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r NBA TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r NBA TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Directv() {\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://stream.directv.com/watchnow' -w %{http_code} -o /dev/null -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r Directv Stream:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r Directv Stream:\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r Directv Stream:\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Directv Stream:\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction RegionTest_NetflixCDN() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://api.fast.com/netflix/speedtest/v2?https=true&token=YXNkZmFzZGxmbnNkYWZoYXNkZmhrYWxm&urlCount=1' -w '_TAG_%{http_code}' --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | grep '_TAG_' | awk -F'_TAG_' '{print $2}')\n    local respContent=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r Netflix Preferred CDN:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '403' ]; then\n        echo -n -e \"\\r Netflix Preferred CDN:\\t\\t\\t${Font_Red}Failed (IP Banned By Netflix)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local cdnDomain=$(echo \"$respContent\" | grep -woP '\"url\":\"\\K[^\"]+' | awk -F'[/:]' '{print $4}')\n    if [ -z \"$cdnDomain\" ]; then\n        echo -n -e \"\\r Netflix Preferred CDN:\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        local cdnIP=$(resolve_ip_address \"$cdnDomain\" 'AAAA')\n    else\n        local cdnIP=$(resolve_ip_address \"$cdnDomain\" 'A')\n    fi\n\n    if [ -z \"$cdnIP\" ]; then\n        echo -n -e \"\\r Netflix Preferred CDN:\\t\\t\\t${Font_Red}Failed (CDN IP Not Found)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if ! validate_intranet \"$cdnIP\"; then\n        local tmpresult1=$(curl ${CURL_DEFAULT_OPTS} -s \"https://api.ip.sb/geoip/${cdnIP}\" -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' --user-agent \"${UA_BROWSER}\")\n        if [ -z \"$tmpresult1\" ]; then\n            echo -n -e \"\\r Netflix Preferred CDN:\\t\\t\\t${Font_Red}Failed (Network Connection 1)${Font_Suffix}\\n\"\n            return\n        fi\n\n        local cdnISP=$(echo \"$tmpresult1\" | grep -woP '\"isp\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n        if [ -z \"$cdnISP\" ]; then\n            echo -n -e \"\\r Netflix Preferred CDN:\\t\\t\\t${Font_Red}Failed (Error: No ISP Info Found)${Font_Suffix}\\n\"\n            return\n        fi\n    else\n        cdnISP='Hidden by a VPN'\n    fi\n\n    local iata=$(echo \"$cdnDomain\" | cut -f3 -d'-' | sed 's/.\\{3\\}$//' | tr a-z A-Z)\n\n    # local IATACODE2=$(curl ${CURL_DEFAULT_OPTS} -s \"https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/reference/IATACODE2.txt\" 2>&1)\n    local isIataFound1=$(echo \"$IATACODE\" | grep -w \"$iata\")\n    local isIataFound2=$(echo \"$IATACODE2\" | grep -w \"$iata\")\n\n    if [ -n \"$isIataFound1\" ]; then\n        local location=$(echo \"$IATACODE\" | grep -w \"$iata\" | awk -F'|' '{print $1}' | awk '{$1=$1; print}')\n    fi\n    if [ -z \"$isIataFound1\" ] && [ -n \"$isIataFound2\" ]; then\n        local location=$(echo \"$IATACODE2\" | grep -w \"$iata\" | awk -F',' '{print $2}' | awk '{$1=$1; print}' | tr A-Z a-z | sed 's/\\b[a-z]/\\U&/g')\n    fi\n\n    if [ -z \"$location\" ]; then\n        echo -n -e \"\\r Netflix Preferred CDN:\\t\\t\\t${Font_Red}Failed (Error: IATA CODE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"$cdnISP\" == 'Netflix Streaming Services' ]; then\n        echo -n -e \"\\r Netflix Preferred CDN:\\t\\t\\t${Font_Green}${location}${Font_Suffix}\\n\"\n        return\n    else\n        echo -n -e \"\\r Netflix Preferred CDN:\\t\\t\\t${Font_Yellow}[${cdnISP}] in [${location}]${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Netflix Preferred CDN:\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_SkyGo() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Sky Go:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://skyid.sky.com/authorise/skygo?response_type=token&client_id=sky&appearance=compact&redirect_uri=skygo://auth' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Sky Go:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isSignIn=$(echo \"$tmpresult\" | grep -E \"Sign in</h3>|skygoSignin\")\n    if [ -n \"$isSignIn\" ]; then\n        echo -n -e \"\\r Sky Go:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -E \"Access Denied.*You don't have permission to access\")\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Sky Go:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Sky Go:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_DirecTVGO() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r DirecTV Go:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://www.directvgo.com/registrarse' -w '%{http_code}_TAG_%{url_effective}\\n' -o /dev/null --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r DirecTV Go:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local isForbidden=$(echo \"$urlEffective\" | grep 'proximamente')\n    local region=$(echo \"$urlEffective\" | cut -f4 -d'/' | tr a-z A-Z)\n\n    if [ -n \"$isForbidden\" ]; then\n        echo -n -e \"\\r DirecTV Go:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '403' ]; then\n        echo -n -e \"\\r DirecTV Go:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r DirecTV Go:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r DirecTV Go:\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_DAM() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Karaoke@DAM:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'http://cds1.clubdam.com/vhls-cds1/site/xbox/sample_1.mp4.m3u8' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r Karaoke@DAM:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r Karaoke@DAM:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r Karaoke@DAM:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Karaoke@DAM:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_DiscoveryPlus() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Discovery+:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    # 取得 API 网址\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://global-prod.disco-api.com/bootstrapInfo' -H 'accept: */*' -H 'accept-language: en-US,en;q=0.9' -H 'origin: https://www.discoveryplus.com' -H 'referer: https://www.discoveryplus.com/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: cross-site' -H 'x-disco-client: WEB:UNKNOWN:dplus_us:2.46.0' -H 'x-disco-params: bid=dplus,hn=www.discoveryplus.com' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Discovery+:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local baseApiUrl=$(echo \"$tmpresult\" | grep -woP '\"baseApiUrl\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local realm=$(echo \"$tmpresult\" | grep -woP '\"realm\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n\n    if [ -z \"$baseApiUrl\" ] || [ -z \"$realm\" ]; then\n        echo -n -e \"\\r Discovery+:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"$realm\" == 'dplusapac' ]; then\n        echo -n -e \"\\r Discovery+:\\t\\t\\t\\t${Font_Red}No (Not Yet Available in Asia Pacific)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local fakeDeviceId=$(gen_uuid | md5sum | cut -f1 -d' ')\n\n    local tmpresult1=$(curl ${CURL_DEFAULT_OPTS} -s \"${baseApiUrl}/token?deviceId=${fakeDeviceId}&realm=${realm}&shortlived=true\" -H 'accept: */*' -H 'accept-language: en-US,en;q=0.9' -H 'origin: https://www.discoveryplus.com' -H 'referer: https://www.discoveryplus.com/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' -H \"x-device-info: dplus_us/2.46.0 (desktop/desktop; Windows/NT 10.0; ${fakeDeviceId})\" -H 'x-disco-client: WEB:UNKNOWN:dplus_us:2.46.0' -H \"x-disco-params: realm=${realm},bid=dplus,hn=www.discoveryplus.com,hth=,features=ar\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult1\" ]; then\n        echo -n -e \"\\r Discovery+:\\t\\t\\t\\t${Font_Red}Failed (Network Connection 1)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local token=$(echo \"$tmpresult1\" | grep -woP '\"token\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"$token\" ]; then\n        echo -n -e \"\\r Discovery+:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR 1)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult2=$(curl ${CURL_DEFAULT_OPTS} -s \"${baseApiUrl}/cms/routes/tabbed-home?include=default&decorators=viewingHistory,isFavorite,playbackAllowed,contentAction\" -H 'accept: */*' -H 'accept-language: en-US,en;q=0.9' -H 'origin: https://www.discoveryplus.com' -H 'referer: https://www.discoveryplus.com/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' -H 'x-disco-client: WEB:UNKNOWN:dplus_us:2.46.0' -H 'x-disco-params: realm=dplay,bid=dplus,hn=www.discoveryplus.com,hth=,features=ar' -b \"st=${token}\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult2\" ]; then\n        echo -n -e \"\\r Discovery+:\\t\\t\\t\\t${Font_Red}Failed (Network Connection 2)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult2\" | grep -iE 'is unavailable in your|not yet available')\n    local isOK=$(echo \"$tmpresult2\" | grep -i 'relationships')\n    local region=$(echo \"$tmpresult2\" | grep -woP '\"mainTerritoryCode\"\\s{0,}:\\s{0,}\"\\K[^\"]+' | tr a-z A-Z)\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r Discovery+:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR 2)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Discovery+:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r Discovery+:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Discovery+:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_ESPNPlus() {\n    local espnCookies=$(echo \"$MEDIA_COOKIE\" | sed -n '11p')\n    local tokenContent=$(curl ${CURL_DEFAULT_OPTS} -s 'https://espn.api.edge.bamgrid.com/token' -X POST -H \"authorization: Bearer ZXNwbiZicm93c2VyJjEuMC4w.ptUt7QxsteaRruuPmGZFaJByOoqKvDP2a5YkInHrc7c\" -d \"$espnCookies\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tokenContent\" ]; then\n        echo -n -e \"\\r ESPN+:${Font_SkyBlue}[Sponsored by Jam]${Font_Suffix}\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tokenContent\" | grep 'forbidden-location')\n    local is403=$(echo \"$tokenContent\" | grep '403 ERROR')\n\n    if [ -n \"$isBlocked\" ] || [ -n \"$is403\" ]; then\n        echo -n -e \"\\r ESPN+:${Font_SkyBlue}[Sponsored by Jam]${Font_Suffix}\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    local fakeContent=$(echo \"$MEDIA_COOKIE\" | sed -n '10p')\n    local refreshToken=$(echo \"$tokenContent\" | grep -woP '\"refresh_token\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"$refreshToken\" ]; then\n        echo -n -e \"\\r ESPN+:${Font_SkyBlue}[Sponsored by Jam]${Font_Suffix}\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local espnContent=$(echo \"$fakeContent\" | sed \"s/ILOVESTAR/${refreshToken}/g\")\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://espn.api.edge.bamgrid.com/graph/v1/device/graphql' -X POST -H \"authorization: ZXNwbiZicm93c2VyJjEuMC4w.ptUt7QxsteaRruuPmGZFaJByOoqKvDP2a5YkInHrc7c\" -d \"$espnContent\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r ESPN+:${Font_SkyBlue}[Sponsored by Jam]${Font_Suffix}\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local region=$(echo \"$tmpresult\" | grep -woP '\"countryCode\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local inSupportedLocation=$(echo \"$tmpresult\" | grep -woP '\"inSupportedLocation\"\\s{0,}:\\s{0,}\\K(false|true)')\n\n    if [ -z \"$region\" ] || [ -z \"$inSupportedLocation\" ]; then\n        echo -n -e \"\\r ESPN+:${Font_SkyBlue}[Sponsored by Jam]${Font_Suffix}\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"$region\" == 'US' ] && [ \"$inSupportedLocation\" == 'true' ]; then\n        echo -n -e \"\\r ESPN+:${Font_SkyBlue}[Sponsored by Jam]${Font_Suffix}\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r ESPN+:${Font_SkyBlue}[Sponsored by Jam]${Font_Suffix}\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Stan() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Stan:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://api.stan.com.au/login/v1/sessions/web/account' -X POST -w '_TAG_%{http_code}' --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | grep '_TAG_' | awk -F'_TAG_' '{print $2}')\n    local respContent=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r Stan:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '403' ]; then\n        echo -n -e \"\\r Stan:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '411' ]; then\n        echo -n -e \"\\r Stan:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -z \"$respContent\" ]; then\n        echo -n -e \"\\r Stan:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$respContent\" | grep -i 'VPNDetected')\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r Stan:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Stan:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Binge() {\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://auth.streamotion.com.au' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r Binge:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r Binge:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r Binge:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Binge:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_Docplay() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Docplay:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://www.docplay.com/subscribe' -w '%{http_code}_TAG_%{url_effective}\\n' -o /dev/null --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r Docplay:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local isBlocked=$(echo \"$urlEffective\" | grep -i 'geoblocked')\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Docplay:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '403' ]; then\n        echo -n -e \"\\r Docplay:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r Docplay:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Docplay:\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_OptusSports() {\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://sport.optus.com.au/api/userauth/validate/web/username/restriction.check@gmail.com' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r Optus Sports:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r Optus Sports:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r Optus Sports:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Optus Sports:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_KayoSports() {\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://billingapi.streamotion.com.au/v2/offers/kayo/' -H 'accept: */*' -H 'accept-language: en-US,en;q=0.9' -H 'origin: https://kayosports.com.au' -H 'referer: https://kayosports.com.au/' -H \"sec-ch-ua: ${SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: cross-site' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r Kayo Sports:\\t\\t\\t\\t${Font_Red}Failed${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r Kayo Sports:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r Kayo Sports:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Kayo Sports:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_NeonTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Neon TV:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local neonHeader=$(echo \"$MEDIA_COOKIE\" | sed -n '12p')\n    local neonContent=$(echo \"$MEDIA_COOKIE\" | sed -n '13p')\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://api.neontv.co.nz/api/client/gql?' -X POST -H \"content-type: application/json\" -H \"$neonHeader\" -d \"$neonContent\" -w '_TAG_%{http_code}' --user-agent \"${UA_BROWSER}\")\n\n    local httpCode=$(echo \"$tmpresult\" | grep '_TAG_' | awk -F'_TAG_' '{print $2}')\n    local respContent=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r Neon TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '403' ]; then\n        echo -n -e \"\\r Neon TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -z \"$respContent\" ]; then\n        echo -n -e \"\\r Neon TV:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$respContent\" | grep -i 'RESTRICTED_GEOLOCATION')\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r Neon TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Neon TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_SkyGONZ() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r SkyGo NZ:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://login.sky.co.nz/authorize?audience=https%3A%2F%2Fapi.sky.co.nz&client_id=dXhXjmK9G90mOX3B02R1kV7gsC4bp8yx&redirect_uri=https%3A%2F%2Fwww.skygo.co.nz&connection=Sky-Internal-Connection&scope=openid%20profile%20email%20offline_access&response_type=code&response_mode=query&state=OXg3QjBGTHpoczVvdG1fRnJFZXVoNDlPc01vNzZjWjZsT3VES2VhN1dDWA%3D%3D&nonce=OEdvci4xZHBHU3VLb1M0T1JRbTZ6WDZJVGQ3R3J0TTdpTndvWjNMZDM5ZA%3D%3D&code_challenge=My5fiXIl-cX79KOUe1yDFzA6o2EOGpJeb6w1_qeNkpI&code_challenge_method=S256&auth0Client=eyJuYW1lIjoiYXV0aDAtcmVhY3QiLCJ2ZXJzaW9uIjoiMS4zLjAifQ%3D%3D' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r SkyGo NZ:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r SkyGo NZ:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r SkyGo NZ:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r SkyGo NZ:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_ThreeNow() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r ThreeNow:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://bravo-livestream.fullscreen.nz/index.m3u8' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r ThreeNow:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r ThreeNow:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r ThreeNow:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r ThreeNow:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_MaoriTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Maori TV:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://www.maoriplus.co.nz/live-tv/whakaata-maori' -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Maori TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    # 找出 index-*.js\n    local indexJsPath=$(echo \"$tmpresult\" | grep -woP 'src=\"\\K/assets/index-[a-z0-9]{8}[^\"]+')\n    if [ -z \"$indexJsPath\" ]; then\n        echo -n -e \"\\r Maori TV:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    # 下载 index-*.js\n    local tmpresult2=$(curl ${CURL_DEFAULT_OPTS} -s \"https://www.maoriplus.co.nz${indexJsPath}\" -H 'accept: */*' -H 'accept-language: en-US,en;q=0.9' -H 'origin: https://www.maoriplus.co.nz' -H 'referer: https://www.maoriplus.co.nz/live-tv/whakaata-maori' -H \"sec-ch-ua: ${SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: script' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-origin' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult2\" ]; then\n        echo -n -e \"\\r Maori TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection 1)${Font_Suffix}\\n\"\n        return\n    fi\n    # 取得 brightcove 播放器链接\n    local playerJsUrl=$(echo \"$tmpresult2\" | grep -woP 'players.brightcove.net/[0-9]{13}/\\w{9}_default/index.min.js')\n    local accountId=$(echo \"$playerJsUrl\" | grep -woP 'players.brightcove.net/\\K[0-9]{13}')\n    if [ -z \"$playerJsUrl\" ]; then\n        echo -n -e \"\\r Maori TV:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    # 取得 brightcove 播放器信息\n    local tmpresult3=$(curl ${CURL_DEFAULT_OPTS} -s \"https://${playerJsUrl}\" -H 'accept: */*' -H 'accept-language: en-US,en;q=0.9' -H 'referer: https://www.maoriplus.co.nz/' -H \"sec-ch-ua: ${SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: script' -H 'sec-fetch-mode: no-cors' -H 'sec-fetch-site: cross-site' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult3\" ]; then\n        echo -n -e \"\\r Maori TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection 2)${Font_Suffix}\\n\"\n        return\n    fi\n\n    # 取 policy_key\n    local policyKey=$(echo \"$tmpresult3\" | grep -woP 'policyKey\\s{0,}:\\s{0,}\"\\KBCpk[^\"]+')\n\n    # 由于频道 ID 换的不是特别勤，直接固定，少几个请求\n    # 该值从该 API 获取：https://api.one.accedo.tv/content/entries?typeAlias=live-channels\n    local bcChannelId='6278939271001'\n    # 最终检查\n    local tmpresult4=$(curl ${CURL_DEFAULT_OPTS} -s \"https://edge.api.brightcove.com/playback/v1/accounts/${accountId}/videos/${bcChannelId}\" -H \"accept: application/json;pk=${policyKey}\" -H 'accept-language: en-US,en;q=0.9' -H 'origin: https://www.maoriplus.co.nz' -H 'referer: https://www.maoriplus.co.nz/' -H \"sec-ch-ua: ${SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: cross-site' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult4\" ]; then\n        echo -n -e \"\\r Maori TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection 3)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult4\" | grep -woP '\"error_subcode\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n\n    case \"$result\" in\n        'CLIENT_GEO') echo -n -e \"\\r Maori TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        'SUCCESS') echo -n -e \"\\r Maori TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '') echo -n -e \"\\r Maori TV:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Maori TV:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_SBSonDemand() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r SBS on Demand:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://www.sbs.com.au/api/v3/network?context=odwebsite' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r SBS on Demand:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"country_code\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r SBS on Demand:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"$result\" == 'AU' ]; then\n        echo -n -e \"\\r SBS on Demand:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r SBS on Demand:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_ABCiView() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r ABC iView:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://api.iview.abc.net.au/v2/show/abc-kids-live-stream/video/LS1604H001S00?embed=highlightVideo,selectedSeries' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r ABC iView:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'unavailable outside Australia')\n    local isOK=$(echo \"$tmpresult\" | grep -woP '\"playable\"\\s{0,}:\\s{0,}\\K(false|true)')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r ABC iView:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -n \"$isBlocked\" ] ; then\n        echo -n -e \"\\r ABC iView:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"$isOK\" == 'true' ]; then\n        echo -n -e \"\\r ABC iView:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r ABC iView:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Channel9() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://login.nine.com.au' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Channel 9:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'Geoblock')\n    local isOK=$(echo \"$tmpresult\" | grep -i 'Log in to')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r Channel 9:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Channel 9:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r Channel 9:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Channel 9:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Telasa() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://api-videopass-anon.kddi-video.com/v1/playback/system_status' -H \"X-Device-ID: d36f8e6b-e344-4f5e-9a55-90aeb3403799\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Telasa:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isForbidden=$(echo \"$tmpresult\" | grep -i 'IPLocationNotAllowed')\n    local isAllowed=$(echo \"$tmpresult\" | grep -woP '\"type\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n\n    if [ -z \"$isAllowed\" ] && [ -z \"$isForbidden\" ]; then\n        echo -n -e \"\\r Telasa:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isForbidden\" ]; then\n        echo -n -e \"\\r Telasa:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$isAllowed\" == 'OK' ]; then\n        echo -n -e \"\\r Telasa:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Telasa:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_SetantaSports() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Setanta Sports:\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://dce-frontoffice.imggaming.com/api/v2/consent-prompt' -H 'Realm: dce.adjara' -H 'x-api-key: 857a1e5d-e35e-4fdf-805b-a87b6f8364bf' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Setanta Sports:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"outsideAllowedTerritories\"\\s{0,}:\\s{0,}\\K(false|true)')\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r Setanta Sports:\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"$result\" == 'true' ]; then\n        echo -n -e \"\\r Setanta Sports:\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$result\" == 'false' ]; then\n        echo -n -e \"\\r Setanta Sports:\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Setanta Sports:\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_MolaTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Mola TV:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://mola.tv/api/v2/videos/geoguard/check/vd30491025' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Mola TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"isAllowed\"\\s{0,}:\\s{0,}\\K(false|true)')\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r Mola TV:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"$result\" == 'true' ]; then\n        echo -n -e \"\\r Mola TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$result\" == 'false' ]; then\n        echo -n -e \"\\r Mola TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Mola TV:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_BeinConnect() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Bein Sports Connect:\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://proxies.bein-mena-production.eu-west-2.tuc.red/proxy/availableOffers' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r Bein Sports Connect:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '500') echo -n -e \"\\r Bein Sports Connect:\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '451') echo -n -e \"\\r Bein Sports Connect:\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Bein Sports Connect:\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_EurosportRO() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Eurosport RO:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local fakeUuid=$(gen_uuid)\n    # 取得 Bearer 认证 token\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://eu3-prod-direct.eurosport.ro/token?realm=eurosport' -H 'accept: */*' -H 'accept-language: en-US,en;q=0.9' -H 'origin: https://www.eurosport.ro' -H 'referer: https://www.eurosport.ro/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' -H \"x-device-info: escom/0.295.1 (unknown/unknown; Windows/10; ${fakeUuid})\" -H 'x-disco-client: WEB:UNKNOWN:escom:0.295.1' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Eurosport RO:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local token=$(echo \"$tmpresult\" | grep -woP '\"token\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"$token\" ]; then\n        echo -n -e \"\\r Eurosport RO:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGER ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    # 随便选的视频\n    local sourceSystemId='eurosport-vid2133403'\n    local tmpresult1=$(curl ${CURL_DEFAULT_OPTS} -s \"https://eu3-prod-direct.eurosport.ro/playback/v2/videoPlaybackInfo/sourceSystemId/${sourceSystemId}?usePreAuth=true\" -H \"Authorization: Bearer ${token}\" --user-agent \"${UA_BROWSER}\")\n\n    local isBlocked=$(echo \"$tmpresult1\" | grep 'access.denied.geoblocked')\n    local isOK=$(echo \"$tmpresult1\" | grep 'eurosport-vod')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r Eurosport RO:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Eurosport RO:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r Eurosport RO:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Eurosport RO:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Channel5() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Channel 5:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local timestamp=$(date +%s)\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL \"https://cassie.channel5.com/api/v2/live_media/my5desktopng/C5.json?timestamp=${timestamp}&auth=0_rZDiY0hp_TNcDyk2uD-Kl40HqDbXs7hOawxyqPnbI\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Channel 5:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"code\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n\n    case \"$result\" in\n        '3000') echo -n -e \"\\r Channel 5:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '4003') echo -n -e \"\\r Channel 5:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '') echo -n -e \"\\r Channel 5:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Channel 5:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_MyVideo() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r MyVideo:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://www.myvideo.net.tw/login.do' -w '%{http_code}_TAG_%{url_effective}\\n' -o /dev/null --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r MyVideo:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local isBlocked=$(echo \"$urlEffective\" | grep -i 'serviceAreaBlock')\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r MyVideo:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '403' ]; then\n        echo -n -e \"\\r MyVideo:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r MyVideo:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r MyVideo:\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_7plus() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r 7plus:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result1=$(curl ${CURL_DEFAULT_OPTS} -fsL \"https://7plus-sevennetwork.akamaized.net/media/v1/dash/live/cenc/5303576322001/68dca38b-85d7-4dae-b1c5-c88acc58d51c/f4ea4711-514e-4cad-824f-e0c87db0a614/225ec0a0-ef18-4b7c-8fd6-8dcdd16cf03a/1x/segment0.m4f?akamai_token=exp=1672500385~acl=/media/v1/dash/live/cenc/5303576322001/68dca38b-85d7-4dae-b1c5-c88acc58d51c/f4ea4711-514e-4cad-824f-e0c87db0a614/*~hmac=800e1e1d1943addf12b71339277c637c7211582fe12d148e486ae40d6549dbde\" -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    if [ \"$result1\" == '000' ]; then\n        echo -n -e \"\\r 7plus:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"$result1\" == '200' ]; then\n        echo -n -e \"\\r 7plus:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    else\n        echo -n -e \"\\r 7plus:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n}\n\nfunction MediaUnlockTest_Channel10() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Channel 10:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://e410fasadvz.global.ssl.fastly.net/geo' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Channel 10:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"allow\"\\s{0,}:\\s{0,}\\K(false|true)')\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r Channel 10:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"$result\" == 'true' ]; then\n        echo -n -e \"\\r Channel 10:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$result\" == 'false' ]; then\n        echo -n -e \"\\r Channel 10:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Channel 10:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Spotify() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://spclient.wg.spotify.com/signup/public/v1/account' -d \"birth_day=11&birth_month=11&birth_year=2000&collect_personal_info=undefined&creation_flow=&creation_point=https%3A%2F%2Fwww.spotify.com%2Fhk-en%2F&displayname=Gay%20Lord&gender=male&iagree=1&key=a1e486e2729f46d6bb368d6b2bcda326&platform=www&referrer=&send-email=0&thirdpartyemail=0&identifier_token=AgE6YTvEzkReHNfJpO114514\" -X POST -H \"Accept-Language: en\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Spotify Registration:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local statusCode=$(echo \"$tmpresult\" | grep -woP '\"status\"\\s{0,}:\\s{0,}\\K\\d+')\n    local region=$(echo \"$tmpresult\" | grep -woP '\"country\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local isLaunched=$(echo \"$tmpresult\" | grep -woP '\"is_country_launched\"\\s{0,}:\\s{0,}\\K(false|true)')\n\n    if [ -z \"$statusCode\" ]; then\n        echo -n -e \"\\r Spotify Registration:\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$statusCode\" == '320' ] || [ \"$statusCode\" == '120' ]; then\n        echo -n -e \"\\r Spotify Registration:\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -z \"$isLaunched\" ] || [ -z \"$region\" ]; then\n        echo -n -e \"\\r Spotify Registration:\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$isLaunched\" == 'false' ]; then\n        echo -n -e \"\\r Spotify Registration:\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$statusCode\" == '311' ]; then\n        echo -n -e \"\\r Spotify Registration:\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Spotify Registration:\\t\\t\\t${Font_Red}Failed (Error: $statusCode)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_VideoMarket() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r VideoMarket:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://www.videomarket.jp/graphql' -H 'authority: www.videomarket.jp' -H 'accept: */*' -H 'accept-language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6' -H 'authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjQ4MTkxNTkyMDIsImlhdCI6MTY2NTU1OTIwMiwiaXNzIjoiaHR0cHM6Ly9hdXRoLnZpZGVvbWFya2V0LmpwIiwic3ViIjoiY2ZjZDIwODQ5NWQ1NjVlZjY2ZTdkZmY5Zjk4NzY0ZGEiLCJ1c2VyX3R5cGUiOjAsInNpdGVfdHlwZSI6MiwiY2xpZW50X2lkIjoiYmVkNDdkOTFiMDVhYjgzMGM4YzBhYmFiYjQwNTg5MTFhY2E5NTdkMDBkMTUzNjA2MjI3NzNhOTQ0Y2RlNzRhNSIsInZtaWQiOjB9.Tq18RCxpVz1oV1lja52uRmF0nT6Oa0QsZMTVlPfANwb-RrcSn7PwE9vh7GdNIBc0ydDxRoUMuhStz_Kbu8KxvAh25eafFh7hf0DDqWKKU4ayPMueaR12t74SjFIRC7Cla1NR4uRn3_mgJfZFqOkIf6L5OR9LOVIBhrQPkhbMyqwZyh_kxTH7ToJIQoINb036ftqcF1KfR8ndtBlkrrWWnDpfkmE7-fJQHh92oKKd9l98W5awuEQo0MFspIdSNgt3gLi9t1RRKPDISGlzJkwMLPkHIUlWWZaAmnEkwSeZCPj_WJaqUqBATYKhi3yJZNGlHsScQ_KgAopxlsI6-c88Gps8i6yHvPVYw3hQ9XYq9gVL_SpyW9dKKSPE9MY6I19JHLBXuFXi5OJccqtQzTnKm_ZQM3EcKt5s0cNlXm9RMt0fNdRTQdJ53noD9o-b6hUIxDcHScJ_-30Emiv-55g5Sq9t5KPWO6o0Ggokkj42zin69MxCiUSHXk5FgeY8rX76yGBeLPLPIaaRPXEC1Jeo1VO56xNnQpyX_WHqHWDKhmOh1qSzaxiAiC5POMsTfwGr19TwXHUldYXxuNMIfeAaPZmNTzR5J6XdenFkLnrssVzXdThdlqHpfguLFvHnXTCAm0ZhFIJmacMNw1IxGmCQfkM4HtgKB9ZnWm6P0jIISdg' -H 'content-type: application/json' -H 'cookie: _gid=GA1.2.1853799793.1706147718; VM_REGIST_BANNER_REF_LINK=%2Ftitle%2F292072; __ulfpc=202401250957239984; _im_vid=01HMZ5C5GNNC6VWSPKD3E4W7YP; __td_signed=true; _td_global=0d11678b-5151-473e-b3a8-4f4d780f26a6; __juicer_sesid_9i3nsdfP_=d36a2e17-0117-47ce-95de-fbd5ffcda2d9; __juicer_session_referrer_9i3nsdfP_=d36a2e17-0117-47ce-95de-fbd5ffcda2d9___https%253A%252F%252Fwww.videomarket.jp%252Fplayer%252F292072%252FA292072001999H01; _gat_UA-221872486-2=1; _ga=GA1.2.777206008.1706147718; _ga_8HZQ9F8HV0=GS1.1.1706147717.1.1.1706147941.0.0.0; _td=3317738c-2329-4b61-ad5a-4e0ad230841d; dc_cl_id=ab38GzrmoV7muvtI' -H 'origin: https://www.videomarket.jp' -H 'referer: https://www.videomarket.jp/player/292072/A292072001999H01' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-origin' -H 'x-videomarket-requested: spa' --data-raw $'{\"operationName\":\"repPacks\",\"variables\":{\"repFullPackIds\":[\"A292072001999H01\"],\"isOnSale\":false,\"isOnlyLatest\":true},\"query\":\"query repPacks($repFullPackIds: [String], $fullPacksIds: [String], $isOnSale: Boolean\\u0021, $isOnlyLatest: Boolean\\u0021) {\\\\n  repPacks(\\\\n    repFullPackIds: $repFullPackIds\\\\n    fullPackIds: $fullPacksIds\\\\n    onSale: $isOnSale\\\\n    onlyLatest: $isOnlyLatest\\\\n  ) {\\\\n    repFullPackId\\\\n    groupType\\\\n    packName\\\\n    fullTitleId\\\\n    titleName\\\\n    storyImageUrl16x9\\\\n    playTime\\\\n    subtitleDubType\\\\n    outlines\\\\n    courseIds\\\\n    price\\\\n    discountRate\\\\n    couponPrice\\\\n    couponDiscountRate\\\\n    rentalDays\\\\n    viewDays\\\\n    deliveryExpiredAt\\\\n    salesType\\\\n    counter {\\\\n      currentPage\\\\n      currentResult\\\\n      totalPages\\\\n      totalResults\\\\n      __typename\\\\n    }\\\\n    undiscountedPrice\\\\n    packs {\\\\n      undiscountedPrice\\\\n      canPurchase\\\\n      fullPackId\\\\n      subGroupType\\\\n      fullTitleId\\\\n      qualityConsentType\\\\n      courseIds\\\\n      price\\\\n      discountRate\\\\n      couponPrice\\\\n      couponDiscountRate\\\\n      rentalDays\\\\n      viewDays\\\\n      deliveryExpiredAt\\\\n      salesType\\\\n      extId\\\\n      stories {\\\\n        fullStoryId\\\\n        subtitleDubType\\\\n        encodeVersion\\\\n        isDownloadable\\\\n        isBonusMaterial\\\\n        fileSize\\\\n        __typename\\\\n      }\\\\n      __typename\\\\n    }\\\\n    status {\\\\n      hasBeenPlayed\\\\n      isCourseRegistered\\\\n      isEstPurchased\\\\n      isNowPlaying\\\\n      isPlayable\\\\n      isRented\\\\n      playExpiredAt\\\\n      playableQualityType\\\\n      rentalExpiredAt\\\\n      __typename\\\\n    }\\\\n    __typename\\\\n  }\\\\n}\\\\n\"}'  --user-agent \"${UA_BROWSER}\")\n\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r VideoMarket:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep 'OverseasAccess')\n    local isOK=$(echo \"$tmpresult\" | grep '292072')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r VideoMarket:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r VideoMarket:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r VideoMarket:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r VideoMarket:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_JCOM_ON_DEMAND() {\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://auth.id2.zaq.ne.jp/login' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r J:com On Demand:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r J:com On Demand:\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r J:com On Demand:\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r J:com On Demand:\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_musicjp() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r music.jp:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n     local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://overseaauth.music-book.jp/globalIpcheck.js' -w '_TAG_%{http_code}' --user-agent \"${UA_BROWSER}\")\n\n    local httpCode=$(echo \"$tmpresult\" | grep '_TAG_' | awk -F'_TAG_' '{print $2}')\n    local respContent=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    local isOK=$(echo \"$respContent\" | grep -i 'checkIp')\n\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r music.jp:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '403' ]; then\n        echo -n -e \"\\r music.jp:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -z \"$respContent\" ]; then\n        echo -n -e \"\\r music.jp:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r music.jp:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r music.jp:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_InstagramMusic() {\n    ARCH=$(uname -m)\n\n    if [ \"$ARCH\" = \"x86_64\" ]; then\n        curl -sL -o ./ins https://github.com/lmc999/RegionRestrictionCheck/raw/refs/heads/main/binary/ins_amd64\n        chmod +x ./ins\n        clear\n        ./ins\n    elif [ \"$ARCH\" = \"aarch64\" ]; then\n        curl -sL -o ./ins https://github.com/lmc999/RegionRestrictionCheck/raw/refs/heads/main/binary/ins_arm64\n        chmod +x ./ins\n        clear\n        ./ins\n    else\n        echo \"Unsupported architecture: $ARCH\"\n        exit 1\n    fi\n\n    rm ./ins\n    exit 0\n}\n\nfunction WebTest_Reddit() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Reddit:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://www.reddit.com/' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n    case \"$result\" in\n        '000') echo -n -e \"\\r Reddit:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r Reddit:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r Reddit:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Reddit:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_Popcornflix() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Popcornflix:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -s 'https://popcornflix-prod.cloud.seachange.com/cms/popcornflix/clientconfiguration/versions/2' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n    if [ \"$result\" == '000' ]; then\n        echo -n -e \"\\r Popcornflix:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    case \"$result\" in\n        '403') echo -n -e \"\\r Popcornflix:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r Popcornflix:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Popcornflix:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_TubiTV() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://tubitv.com/home' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Tubi TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'not currently available in your area')\n    local isOK=$(echo \"$tmpresult\" | grep -i 'manifest')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r Tubi TV:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Tubi TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r Tubi TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Tubi TV:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Philo() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Philo:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://content-us-east-2-fastly-b.www.philo.com/geo' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Philo:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"status\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r Philo:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    case \"$result\" in\n        'FAIL') echo -n -e \"\\r Philo:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        'SUCCESS') echo -n -e \"\\r Philo:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Philo:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_FXNOW() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r FXNOW:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://fxnow.fxnetworks.com/' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r FXNOW:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'is not accessible')\n    local isOK=$(echo \"$tmpresult\" | grep -i \"FX Movies\")\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r FXNOW:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r FXNOW:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r FXNOW:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r FXNOW:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Crunchyroll() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Crunchyroll:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://c.evidon.com/geo/country.js' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Crunchyroll:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep \"'code':'us'\")\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r Crunchyroll:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n    else\n        echo -n -e \"\\r Crunchyroll:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n    fi\n}\n\nfunction MediaUnlockTest_CWTV() {\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL \"https://www.cwtv.com/\" -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r CW TV:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '403'|'451') echo -n -e \"\\r CW TV:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r CW TV:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r CW TV:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_Shudder() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://www.shudder.com/' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Shudder:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -iE 'not available|not yet available|403 ERROR')\n    local isOK=$(echo \"$tmpresult\" | grep -i 'movies')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r Shudder:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Shudder:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r Shudder:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Shudder:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_TLCGO() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r TLC GO:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local fakeDeviceId=$(gen_uuid)\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s \"https://us1-prod-direct.tlc.com/token?deviceId=${fakeDeviceId}&realm=go&shortlived=true\" -H 'accept-language: en-US,en;q=0.9' -H 'origin: https://go.tlc.com' -H 'referer: https://go.tlc.com/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' -H 'x-device-info: tlc/3.17.0 (desktop/desktop; Windows/NT 10.0; ${fakeDeviceId})' -H 'x-disco-client: WEB:UNKNOWN:tlc:3.17.0' -H 'x-disco-params: realm=go,siteLookupKey=tlc,bid=tlc,hn=go.tlc.com,hth=us,features=ar' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r TLC GO:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local token=$(echo \"$tmpresult\" | grep -woP '\"token\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"$token\" ]; then\n        echo -n -e \"\\r TLC GO:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult1=$(curl ${CURL_DEFAULT_OPTS} -s 'https://us1-prod-direct.tlc.com/cms/routes/home?include=default&decorators=viewingHistory,isFavorite,playbackAllowed&page\\[items.number\\]=1&page\\[items.size\\]=8' -H 'accept-language: en-US,en;q=0.9' -H \"Authorization: Bearer ${token}\" -H 'origin: https://go.tlc.com' -H 'referer: https://go.tlc.com/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' -H 'x-disco-client: WEB:UNKNOWN:tlc:3.17.0' -H 'x-disco-params: realm=go,siteLookupKey=tlc,bid=tlc,hn=go.tlc.com,hth=us,features=ar' --user-agent \"${UA_BROWSER}\")\n\n    local isBlocked=$(echo \"$tmpresult1\" | grep -i 'is not yet available')\n    local isOK=$(echo \"$tmpresult1\" | grep -i 'Episodes')\n    local region=$(echo \"$tmpresult1\" | grep -woP '\"mainTerritoryCode\"\\s{0,}:\\s{0,}\"\\K[^\"]+' | tr a-z A-Z)\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r TLC GO:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r TLC GO:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r TLC GO:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r TLC GO:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction RegionTest_oneTrust() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://geolocation.onetrust.com/cookieconsentpub/v1/geo/location'  --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r OneTrust Region:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local region=$(echo \"$tmpresult\" | grep -woP '\"country\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local stateName=$(echo \"$tmpresult\" | grep -woP '\"stateName\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"$region\" ]; then\n        echo -n -e \"\\r OneTrust Region:\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -z \"$stateName\" ]; then\n        local stateName='Unknown'\n    fi\n\n    echo -n -e \"\\r OneTrust Region:\\t\\t\\t${Font_Green}${region} [${stateName}]${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Wavve() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Wavve:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://apis.wavve.com/fz/streaming?device=pc&partner=pooq&apikey=E5F3E0D30947AA5440556471321BB6D9&credential=none&service=wavve&pooqzone=none&region=kor&drm=pr&targetage=all&contentid=MV_C3001_C300000012559&contenttype=movie&hdr=sdr&videocodec=avc&audiocodec=ac3&issurround=n&format=normal&withinsubtitle=n&action=dash&protocol=dash&quality=auto&deviceModelId=Windows%2010&guid=1a8e9c88-6a3b-11ed-8584-eed06ef80652&lastplayid=none&authtype=cookie&isabr=y&ishevc=n' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n    if [ \"$result\" == '000' ]; then\n        echo -n -e \"\\r Wavve:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    case \"$result\" in\n        '403'|'550') echo -n -e \"\\r Wavve:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r Wavve:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Wavve:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_Tving() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Tving:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://api.tving.com/v2a/media/stream/info?apiKey=1e7952d0917d6aab1f0293a063697610&mediaCode=RV60891248' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Tving:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'available in South Korea')\n    local isOK=$(echo \"$tmpresult\" | grep 'vod_type')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r Tving:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Tving:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r Tving:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Tving:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_CoupangPlay() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Coupang Play:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://www.coupangplay.com/' -w '%{http_code}_TAG_%{url_effective}\\n' -o /dev/null --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r Coupang Play:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local isBlocked=$(echo \"$urlEffective\" | grep -i 'not-available')\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Coupang Play:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '403' ]; then\n        echo -n -e \"\\r Coupang Play:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r Coupang Play:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Coupang Play:\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_NaverTV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Naver TV:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local ts=$(date +%s%3N)\n    local base_url='https://apis.naver.com/'\n    local key='nbxvs5nwNG9QKEWK0ADjYA4JZoujF4gHcIwvoCxFTPAeamq5eemvt5IWAYXxrbYM'\n    local sign_text=\"https://apis.naver.com/now_web2/now_web_api/v1/clips/31030608/play-info${ts}\"\n    local signature=$(printf \"%s\" \"${sign_text}\" | openssl dgst -sha1 -hmac \"${key}\" -binary | openssl base64)\n    local signature_encoded=$(printf \"%s\" \"${signature}\" | sed 's/ /%20/g;s/!/%21/g;s/\"/%22/g;s/#/%23/g;s/\\$/%24/g;s/\\&/%26/g;s/'\\''/%27/g;s/(/%28/g;s/)/%29/g;s/\\*/%2a/g;s/+/%2b/g;s/,/%2c/g;s/\\//%2f/g;s/:/%3a/g;s/;/%3b/g;s/=/%3d/g;s/?/%3f/g;s/@/%40/g;s/\\[/%5b/g;s/\\]/%5d/g')\n    local req_url=\"${base_url}now_web2/now_web_api/v1/clips/31030608/play-info?msgpad=${ts}&md=${signature_encoded}\"\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s \"${req_url}\" --user-agent \"${UA_Browser}\" -H 'host: apis.naver.com' -H \"sec-ch-ua: ${UA_SecCHUA}\" -H 'accept: application/json, text/plain, */*' -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'origin: https://tv.naver.com' -H 'sec-fetch-site: same-site' -H 'sec-fetch-mode: cors' -H 'sec-fetch-dest: empty' -H 'referer: https://tv.naver.com/v/31030608' -H 'accept-language: en-US,en;q=0.9')\n\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Naver TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"playable\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n\n    case \"$result\" in\n        'NOT_COUNTRY_AVAILABLE') echo -n -e \"\\r Naver TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        'PLAYABLE') echo -n -e \"\\r Naver TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '') echo -n -e \"\\r Naver TV:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Naver TV:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_Afreeca() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Afreeca TV:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://vod.afreecatv.com/player/97464151' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Afreeca TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep \"document.location.href='https://vod.afreecatv.com'\" )\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r Afreeca TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n    else\n        echo -n -e \"\\r Afreeca TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n    fi\n}\n\nfunction MediaUnlockTest_KBSDomestic() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r KBS Domestic:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://vod.kbs.co.kr/index.html?source=episode&sname=vod&stype=vod&program_code=T2022-0690&program_id=PS-2022164275-01-000&broadcast_complete_yn=N&local_station_code=00&section_code=03' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r KBS Domestic:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep 'ipck' | grep -woP 'Domestic\\\\\\\"\\s{0,}:\\s{0,}\\K(false|true)')\n\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r KBS Domestic:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$result\" == 'true' ]; then\n        echo -n -e \"\\r KBS Domestic:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$result\" == 'false' ]; then\n        echo -n -e \"\\r KBS Domestic:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r KBS Domestic:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_KBSAmerican() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r KBS American:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://vod.kbs.co.kr/index.html?source=episode&sname=vod&stype=vod&program_code=T2022-0690&program_id=PS-2022164275-01-000&broadcast_complete_yn=N&local_station_code=00&section_code=03' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r KBS American:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep 'ipck' | grep -woP 'Domestic\\\\\\\"\\s{0,}:\\s{0,}\\K(false|true)')\n\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r KBS American:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$result\" == 'true' ]; then\n        echo -n -e \"\\r KBS American:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$result\" == 'false' ]; then\n        echo -n -e \"\\r KBS American:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r KBS American:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Watcha() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r WATCHA:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://watcha.com/' -w %{http_code} -o /dev/null -H 'host: watcha.com' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'upgrade-insecure-requests: 1' -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'sec-fetch-site: none' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-user: ?1' -H 'sec-fetch-dest: document' -H 'accept-language: en-US,en;q=0.9' --user-agent \"${UA_BROWSER}\")\n\n    case \"$result\" in\n        '000') echo -n -e \"\\r WATCHA:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r WATCHA:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '451') echo -n -e \"\\r WATCHA:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r WATCHA:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_KOCOWA() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r KOCOWA:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://www.kocowa.com/' -w %{http_code} -o /dev/null --user-agent \"${UA_BROWSER}\")\n\n    if [ \"$result\" == '000' ]; then\n        echo -n -e \"\\r KOCOWA:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    case \"$result\" in\n        '200') echo -n -e \"\\r KOCOWA:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '403') echo -n -e \"\\r KOCOWA:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r KOCOWA:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_NBCTV() {\n    local fakeUuid=$(gen_uuid | tr a-z A-Z)\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://geolocation.digitalsvc.apps.nbcuni.com/geolocation/live/usa' -H 'accept: application/media.geo-v2+json' -H 'accept-language: en-US,en;q=0.9' -H \"app-session-id: ${fakeUuid}\" -H 'authorization: NBC-Basic key=\"usa_live\", version=\"3.0\", type=\"cpc\"' -H 'client: oneapp' -H 'content-type: application/json' -H 'origin: https://www.nbc.com' -H 'referer: https://www.nbc.com/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: cross-site' --data-raw '{\"adobeMvpdId\":null,\"serviceZip\":null,\"device\":\"web\"}' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r NBC TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"restricted\"\\s{0,}:\\s{0,}\\K(false|true)')\n\n    case \"$result\" in\n        'false') echo -n -e \"\\r NBC TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        'true') echo -n -e \"\\r NBC TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '') echo -n -e \"\\r NBC TV:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r NBC TV:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_Crackle() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sLi 'https://prod-api.crackle.com/appconfig' -w \"_TAG_%{http_code}_TAG_\" -H 'Accept-Language: en-US,en;q=0.9' -H 'Content-Type: application/json' -H 'Origin: https://www.crackle.com' -H 'Referer: https://www.crackle.com/' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-site' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'x-crackle-apiversion: v2.0.0' -H 'x-crackle-brand: crackle' -H 'x-crackle-platform: 5FE67CCA-069A-42C6-A20F-4B47A8054D46' --user-agent \"${UA_BROWSER}\")\n\n    local httpCode=$(echo \"$tmpresult\" | grep '_TAG_' | awk -F'_TAG_' '{print $2}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r Crackle:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local region=$(echo \"$tmpresult\" | grep -woP 'x-crackle-region:\\s{0,}\\K[A-Z]+')\n\n    if [ -z \"$region\" ]; then\n        echo -n -e \"\\r Crackle:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$region\" == 'US' ]; then\n        echo -n -e \"\\r Crackle:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n    else\n        echo -n -e \"\\r Crackle:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n    fi\n}\n\nfunction MediaUnlockTest_AETV() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r A&E TV:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://link.theplatform.com/s/xc6n8B/UR27JDU0bu2s/' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r A&E TV:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'GeoLocationBlocked')\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r A&E TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult1=$(curl ${CURL_DEFAULT_OPTS} -s 'https://play.aetv.com/' -o /dev/null -D - --user-agent \"${UA_BROWSER}\")\n\n    local region=$(echo \"$tmpresult1\" | grep -woP 'AETN-Country-Code=\\K[A-Z]+' | head -n 1)\n    if [ -z \"$region\" ]; then\n        echo -n -e \"\\r A&E TV:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    case \"$region\" in\n        'CA'|'US') echo -n -e \"\\r A&E TV:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r A&E TV:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_NFLPlus() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r NFL+:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://www.nfl.com/plus/' -w '%{http_code}_TAG_%{url_effective}\\n' -o dev/null --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r NFL+:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local isBlocked=$(echo \"$urlEffective\" | grep -iE 'nfl-game-pass|gpi.nfl.com')\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r NFL+:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r NFL+:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r NFL+:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_SkyShowTime() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://www.skyshowtime.com/' -w \"_TAG_%{http_code}_TAG_\" -o /dev/null -D - -H 'accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' --user-agent \"${UA_BROWSER}\")\n\n    local httpCode=$(echo \"$tmpresult\" | grep '_TAG_' | awk -F'_TAG_' '{print $2}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r SkyShowTime:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"$httpCode\" == '403' ]; then\n        echo -n -e \"\\r SkyShowTime:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'where-can-i-stream')\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r SkyShowTime:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    local region=$(echo \"$tmpresult\" | grep -woP 'activeTerritory=\\K[A-Z]+' | head -n 1)\n    if [ -z \"$region\" ]; then\n        echo -n -e \"\\r SkyShowTime:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r SkyShowTime:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r SkyShowTime:\\t\\t\\t\\t${Font_Red}Faild (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction GameTest_MathsSpot() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r MathsSpot Roblox:\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://mathsspot.com/' -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r MathsSpot Roblox:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'FailureServiceNotInRegion')\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r MathsSpot Roblox:\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    local apiPath=$(echo \"$tmpresult\" | grep -woP 'fetch\\(\"\\K[^\"]+' | grep 'reportEvent' | sed 's/\\/reportEvent//;s/^\\///')\n    local region=$(echo \"$tmpresult\" | grep -woP '\"countryCode\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local nggFeVersion=$(echo \"$tmpresult\" | grep -woP '\"NEXT_PUBLIC_FE_VERSION\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"$apiPath\" ] || [ -z \"$nggFeVersion\" ] || [ -z \"$region\" ]; then\n        echo -n -e \"\\r MathsSpot Roblox:\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local fakeUAId=$(gen_random_str 21)\n    local fakeSessId=$(gen_random_str 21)\n    local fakeFesessId=$(gen_random_str 21)\n    local fakeVisitId=$(gen_random_str 21)\n\n    local tmpresult1=$(curl ${CURL_DEFAULT_OPTS} -sL \"https://mathsspot.com/${apiPath}/startSession?appId=5349&uaId=ua-${fakeUAId}&uaSessionId=uasess-${fakeSessId}&feSessionId=fesess-${fakeFesessId}&visitId=visitid-${fakeVisitId}&initialOrientation=landscape&utmSource=NA&utmMedium=NA&utmCampaign=NA&deepLinkUrl=&accessCode=&ngReferrer=NA&pageReferrer=NA&ngEntryPoint=https%3A%2F%2Fmathsspot.com%2F&ntmSource=NA&customData=&appLaunchExtraData=&feSessionTags=nowgg&sdpType=&eVar=&isIframe=false&feDeviceType=desktop&feOsName=window&userSource=direct&visitSource=direct&userCampaign=NA&visitCampaign=NA\" -H 'accept: */*' -H 'accept-language: en-US,en;q=0.9' -H 'referer: https://mathsspot.com/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-origin' -H 'x-ngg-skip-evar-check: true' -H \"x-ngg-fe-version: ${nggFeVersion}\")\n    if [ -z \"$tmpresult1\" ]; then\n        echo -n -e \"\\r MathsSpot Roblox:\\t\\t\\t${Font_Red}Failed (Network Connection 1)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local status=$(echo \"$tmpresult1\" |  grep -woP '\"status\"\\s{0,}:\\s{0,}\"\\K[^\"]+' | head -n 1)\n    if [ -z \"$status\" ]; then\n        echo -n -e \"\\r MathsSpot Roblox:\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR 1)${Font_Suffix}\\n\"\n        return\n    fi\n\n    case \"$status\" in\n        'FailureServiceNotInRegion') echo -n -e \"\\r MathsSpot Roblox:\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        'FailureProxyUserLimitExceeded') echo -n -e \"\\r MathsSpot Roblox:\\t\\t\\t${Font_Red}No (Proxy/VPN Detected)${Font_Suffix}\\n\" ;;\n        'Success') echo -n -e \"\\r MathsSpot Roblox:\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r MathsSpot Roblox:\\t\\t\\t${Font_Red}Failed (Error: $status)${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_BGlobalSEA() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r B-Global SouthEastAsia:\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://api.bilibili.tv/intl/gateway/web/playurl?s_locale=en_US&platform=web&ep_id=347666' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r B-Global SouthEastAsia:\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"code\"\\s{0,}:\\s{0,}\\K[-\\d]+' | head -n 1)\n\n    case \"$result\" in\n        '0') echo -n -e \"\\r B-Global SouthEastAsia:\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '10003003'|'10004001') echo -n -e \"\\r B-Global SouthEastAsia:\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r B-Global SouthEastAsia:\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_BGlobalTH() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r B-Global Thailand Only:\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://api.bilibili.tv/intl/gateway/web/playurl?s_locale=en_US&platform=web&ep_id=10077726' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r B-Global Thailand Only:\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"code\"\\s{0,}:\\s{0,}\\K[-\\d]+' | head -n 1)\n\n    case \"$result\" in\n        '0') echo -n -e \"\\r B-Global Thailand Only:\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '10003003'|'10004001') echo -n -e \"\\r B-Global Thailand Only:\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r B-Global Thailand Only:\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_BGlobalID() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r B-Global Indonesia Only:\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -fsL 'https://api.bilibili.tv/intl/gateway/web/playurl?s_locale=en_US&platform=web&ep_id=11130043' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r B-Global Indonesia Only:\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"code\"\\s{0,}:\\s{0,}\\K[-\\d]+' | head -n 1)\n\n    case \"$result\" in\n        '0') echo -n -e \"\\r B-Global Indonesia Only:\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '10003003'|'10004001') echo -n -e \"\\r B-Global Indonesia Only:\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r B-Global Indonesia Only:\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_BGlobalVN() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r B-Global Việt Nam Only:\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://api.bilibili.tv/intl/gateway/web/playurl?s_locale=en_US&platform=web&ep_id=11405745' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r B-Global Việt Nam Only:\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"code\"\\s{0,}:\\s{0,}\\K[-\\d]+' | head -n 1)\n\n    case \"$result\" in\n        '0') echo -n -e \"\\r B-Global Việt Nam Only:\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '10003003'|'10004001') echo -n -e \"\\r B-Global Việt Nam Only:\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r B-Global Việt Nam Only:\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_AISPlay() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r AIS Play:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local userId='09e8b25510'\n    local userPasswd='e49e9f9e7f'\n    local fakeApiKey=$(gen_uuid | md5sum | cut -f1 -d' ')\n    local fakeUdid=$(gen_uuid | md5sum | cut -f1 -d' ')\n    local timestamp=$(date +%s)\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL \"https://web-tls.ais-vidnt.com/device/login/?d=gstweb&gst=1&user=${userId}&pass=${userPasswd}\" -H 'accept-language: th' -H 'api-version: 2.8.2' -H \"api_key: ${fakeApiKey}\" -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundaryBj2RhUIW7BtRvfK0' -H 'device-info: com.vimmi.ais.portal, Windows + Chrome, AppVersion: 4.9.97, 10, language: tha' -H 'origin: https://aisplay.ais.co.th' -H \"privateid: ${userId}\" -H 'referer: https://aisplay.ais.co.th/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: cross-site' -H \"time: ${timestamp}\" -H \"udid: ${fakeUdid}\" --data-raw $'------WebKitFormBoundaryBj2RhUIW7BtRvfK0--\\r\\n' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r AIS Play:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local sId=$(echo \"$tmpresult\" | grep -woP '\"sid\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local datAuth=$(echo \"$tmpresult\" | grep -woP '\"dat\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    # 新时间戳\n    local timestamp=$(date +%s)\n    # 取播放模板\n    local tmpresult1=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://web-sila.ais-vidnt.com/playtemplate/?d=gstweb' -H 'accept-language: en-US,en;q=0.9' -H 'api-version: 2.8.2' -H \"api_key: ${fakeApiKey}\" -H \"dat: ${datAuth}\" -H 'device-info: com.vimmi.ais.portal, Windows + Chrome, AppVersion: 0.0.0, 10, Language: unknown' -H 'origin: https://web-player.ais-vidnt.com' -H \"privateid: ${userId}\" -H 'referer: https://web-player.ais-vidnt.com/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' -H \"sid: ${sId}\" -H \"time: ${timestamp}\" -H \"udid: ${fakeUdid}\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult1\" ]; then\n        echo -n -e \"\\r AIS Play:\\t\\t\\t\\t${Font_Red}Failed (Network Connection 1)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpLiveUrl=$(echo \"$tmpresult1\" | grep -woP '\"live\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    if [ -z \"$tmpLiveUrl\" ]; then\n        echo -n -e \"\\r AIS Play:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local mediaId='B0006'\n    local realLiveUrl=$(echo \"$tmpLiveUrl\" | sed \"s/{MID}/${mediaId}/g;s/metadata.xml/metadata.json/g\" )\n    local realLiveUrl=\"${realLiveUrl}-https&tuid=${userId}&tdid=${fakeUdid}&chunkHttps=true&origin=anevia\"\n    # example: 'https://redirector.ais-vidnt.com/live/ais/B0006/hls/metadata.json?https_streaming=true&tt=f0037b2dae1b884e32fa90f00f146b7e&tpbk=DOGPcIOg1bIpIIrW&tfa=f0-fc&tttlt=1716631179&cdn=live_free-https&tuid=09e8b25510&tdid=01552b8e90f7e9f9e94ea4779cec29e6&chunkHttps=true&origin=anevia'\n\n    # 取剧集播放网址\n    local tmpresult2=$(curl ${CURL_DEFAULT_OPTS} -sL \"$realLiveUrl\" -H 'Accept-Language: en-US,en;q=0.9' -H 'Origin: https://web-player.ais-vidnt.com' -H 'Referer: https://web-player.ais-vidnt.com/' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-site' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' --user-agent \"${UA_BROWSER}\")\n\n    # 取第一优先级播放地址\n    local playUrl=$(echo \"$tmpresult2\" | grep -woP '\"url\"\\s{0,}:\\s{0,}\"\\K[^\"]+' | grep 'rewriter' | head -n 1)\n    if [ -z \"$playUrl\" ]; then\n        echo -n -e \"\\r AIS Play:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult3=$(curl ${CURL_DEFAULT_OPTS} -sLi \"$playUrl\" -H 'Accept-Language: en-US,en;q=0.9' -H 'Origin: https://web-player.ais-vidnt.com' -H 'Referer: https://web-player.ais-vidnt.com/' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-site' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' --user-agent \"${UA_BROWSER}\")\n\n    # X-Base-Request-Check-Status: INCORRECT X-Geo-Protection-System-Status: BLOCK\n    local baseRequstCheckStatus=$(echo \"$tmpresult3\" | grep -woP 'X-Base-Request-Check-Status:\\s{0,}\\K\\w+')\n    if [ -z \"$baseRequstCheckStatus\" ]; then\n        echo -n -e \"\\r AIS Play:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$baseRequstCheckStatus\" == 'INCORRECT' ]; then\n        echo -n -e \"\\r AIS Play:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=\"$(echo \"$tmpresult3\" | grep -woP 'X-Geo-Protection-System-Status:\\s{0,}\\K\\w+')\"\n\n    case \"$result\" in\n        'BLOCK') echo -n -e \"\\r AIS Play:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        'ALLOW') echo -n -e \"\\r AIS Play:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '') echo -n -e \"\\r AIS Play:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r AIS Play:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction WebTest_OpenAI() {\n    local tmpresult1=$(curl ${CURL_DEFAULT_OPTS} -s 'https://api.openai.com/compliance/cookie_requirements' -H 'authority: api.openai.com' -H 'accept: */*' -H 'accept-language: en-US,en;q=0.9' -H 'authorization: Bearer null' -H 'content-type: application/json' -H 'origin: https://platform.openai.com' -H 'referer: https://platform.openai.com/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' --user-agent \"${UA_BROWSER}\")\n    local tmpresult2=$(curl ${CURL_DEFAULT_OPTS} -s 'https://ios.chat.openai.com/' -H 'authority: ios.chat.openai.com' -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult1\" ]; then\n        echo -n -e \"\\r ChatGPT:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -z \"$tmpresult2\" ]; then\n        echo -n -e \"\\r ChatGPT:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result1=$(echo \"$tmpresult1\" | grep -i 'unsupported_country')\n    local result2=$(echo \"$tmpresult2\" | grep -i 'VPN')\n    if [ -z \"$result2\" ] && [ -z \"$result1\" ]; then\n        echo -n -e \"\\r ChatGPT:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$result2\" ] && [ -n \"$result1\" ]; then\n        echo -n -e \"\\r ChatGPT:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -z \"$result1\" ] && [ -n \"$result2\" ]; then\n        echo -n -e \"\\r ChatGPT:\\t\\t\\t\\t${Font_Yellow}No (Only Available with Web Browser)${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$result1\" ] && [ -z \"$result2\" ]; then\n        echo -n -e \"\\r ChatGPT:\\t\\t\\t\\t${Font_Yellow}No (Only Available with Mobile APP)${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r ChatGPT:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction WebTest_Gemini() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL \"https://gemini.google.com\" --user-agent \"${UA_BROWSER}\")\n    if [[ \"$tmpresult\" = \"curl\"* ]]; then\n        echo -n -e \"\\r Google Gemini:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n    result=$(echo \"$tmpresult\" | grep -q '45631641,null,true' && echo \"Yes\" || echo \"\")\n    countrycode=$(echo \"$tmpresult\" | grep -o ',2,1,200,\"[A-Z]\\{3\\}\"' | sed 's/,2,1,200,\"//;s/\"//' || echo \"\")\n    if [ -n \"$result\" ] && [ -n \"$countrycode\" ]; then\n        echo -n -e \"\\r Google Gemini:\\t\\t\\t\\t${Font_Green}Yes (Region: $countrycode)${Font_Suffix}\\n\"\n        return\n    elif [ -n \"$result\" ]; then\n        echo -n -e \"\\r Google Gemini:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    else\n        echo -n -e \"\\r Google Gemini:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n}\n\nfunction WebTest_MetaAI() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://www.meta.ai/' -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Meta AI:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'AbraGeoBlockedErrorRoot')\n    local isOK=$(echo \"$tmpresult\" | grep -i 'AbraHomeRootConversationQuery')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r Meta AI:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r Meta AI:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -n \"$isOK\" ]; then\n        local region=$(echo \"$tmpresult\" | grep -woP '\"code\"\\s{0,}:\\s{0,}\"\\K[^\"]+' | cut -d'_' -f2)\n        echo -n -e \"\\r Meta AI:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Meta AI:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction RegionTest_Bing() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://www.bing.com/search?q=curl' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Bing Region:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isCN=$(echo \"$tmpresult\" | grep 'cn.bing.com')\n    local region=$(echo \"$tmpresult\" | grep -woP 'Region\\s{0,}:\\s{0,}\"\\K[^\"]+')\n\n    if [ -n \"$isCN\" ]; then\n        local region='CN'\n        echo -n -e \"\\r Bing Region:\\t\\t\\t\\t${Font_Yellow}${region}${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isRisky=$(echo \"$tmpresult\" | grep 'sj_cook.set(\"SRCHHPGUSR\",\"HV\"')\n\n    if [ -n \"$isRisky\" ]; then\n        echo -n -e \"\\r Bing Region:\\t\\t\\t\\t${Font_Yellow}${region} (Risky)${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Bing Region:\\t\\t\\t\\t${Font_Green}${region}${Font_Suffix}\\n\"\n}\n\nfunction WebTest_Wikipedia_Editable() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://zh.wikipedia.org/w/index.php?title=Wikipedia%3A%E6%B2%99%E7%9B%92&action=edit' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Wikipedia Editability:\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -i 'Banned')\n    if [ -z \"$result\" ]; then\n        echo -n -e \"\\r Wikipedia Editability:\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Wikipedia Editability:\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_K_PLUS() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r K+:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local token=$(curl ${CURL_DEFAULT_OPTS} -s -H \"Origin: https://xem.kplus.vn\" -H \"Referer: https://xem.kplus.vn/\" -X POST -d '{\"osVersion\":\"Windows NT 10.0\",\"appVersion\":\"114.0.0.0\",\"deviceModel\":\"Chrome\",\"deviceType\":\"PC\",\"deviceSerial\":\"w39db81c0-a2e9-11ed-952a-49b91c9e6f09\",\"deviceOem\":\"Chrome\",\"devicePrettyName\":\"Chrome\",\"ssoToken\":\"eyJrZXkiOiJ2c3R2IiwiZW5jIjoiQTEyOENCQy1IUzI1NiIsImFsZyI6ImRpciJ9..MWbBlLuci2KNLl9lvMe63g.IbBX7-dg3BWaXzzoxTQz-pJFulm_Y8axWLuG5DcJxQ9jTUPOhA2e6dzOP2hryAFVPFoIRs97ONGTHEYTFQgUtRlvqvx53jyTi3yegU6zWhJnhYZA2sdaj9khsNvVAth0zcWFoWA9GGwfNE5TZLOwczAexIxqC1Ee-tQDILC4XklFrJfvdzoCQBABRXpD_O4HHHIYFs0jBMtYSyD9Vq7dTD61sAVca_83lav7jvpP17PuAo3HHIFQtUdcugpgkB91mJbABIDTPdo0mqdzbgTA_FilwO1Z5qnpwqIZIXy0bhVXFFcwUZPIUxjLEVzP3SyHceFF5N-v7OeYhYZRLYuBKxWj1cRb3LAa3FGJvefqRsBadlsr0cZnOgx0TsL51a2SaIpNyyGtaq8KTTLULIZBb2Zsq2jmBkZtxjoPxUR8ku7J4sL0tfLDoMlWVZkrX4_1tls3E-l8Ael-wd0kbS1i2vpf-Vdh80lRClpDg3ibSSUFPsp3wYMFsuKfyY8vpHrCfYDJDDbYOSv20sfnU7q7gcmizTCFBuiszmXbFX9_aH8UOaCGeqkYDV1ZZ3mQ26TM7JEquuZTV09wdi81ABoM8RZcb2ua0cuocaO4-asMh8KQWNea9BCYlKK5NSPz--oGgGxSdvxZ63qQz1Lr4QZytA2buoQV5OlMoEP7k87fPcig5rPqsK7aeWUXJSmfiOBbSLztoiamvvHClMpds3frv0ud8NWUUoijmS_JUGfF7XYNxWWqEGJuDUoSllV5MVwtIb5wM069gR7zknrr5aRVDi3Nho16KHQ_iB3vxoIr-ExajWLNlvo44CopGhxhgOAKPkULV356uamZpB7twY_iEVrwGMQA1_hEH4usO-UbzuxL_pssLhJKD4NjVcTe86Z08Bfm0IyiNWESmFkA6FVfsxu57Yfd4bXT8mxnfXXmklb7u7vB0RVYRo4i26QGJbPknybHdfgQWEvRCMoAjEG-E2LymBAMwFneWEpPTwBMpfvlTHnGnUtfViA4Zy1xqF2q95g9AF9nF3sE4YpYuSFSkUQB4sZd8emDApIdP6Avqsq809Gg06_R2sUGrD9SQ-XbXhvtAYMcaUcSv54hJvRcSUkygqU8tdg4tJHR23UBb-I.UfpC5BKhvt8EE5gpIFMQoQ\",\"brand\":\"vstv\",\"environment\":\"p\",\"language\":\"en_US\",\"memberId\":\"0\",\"featureLevel\":4,\"provisionData\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYyI6dHJ1ZSwiaWF0IjoxNjg2NTc4NzYyLCJ1cCI6ImNwaSIsImRlIjoiYnJhbmRNYXBwaW5nIiwiYnIiOiJ2c3R2IiwiZHMiOiJ3MzlkYjgxYzAtYTJlOS0xMWVkLTk1MmEtNDliOTFjOWU2ZjA5In0.3mbI7wnJKtRf3493yc_ZEMEvzUXldwDx0sSZdwQnlNk\"}' \"https://tvapi-sgn.solocoo.tv/v1/session\" |  grep -woP '\"token\"\\s{0,}:\\s{0,}\"\\K[^\"]+' | awk '{print $2}' | cut -f2 -d'\"')\n    if [ -z \"$token\" ]; then\n        echo -n -e \"\\r K+:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s -X POST -d '{\"player\":{\"name\":\"RxPlayer\",\"version\":\"3.29.0\",\"capabilities\":{\"mediaTypes\":[\"DASH\",\"DASH\"],\"drmSystems\":[\"PlayReady\",\"Widevine\"],\"smartLib\":true}}}' -H \"Content-Type: application/json\" -H \"Authorization: Bearer $token\" \"https://tvapi-sgn.solocoo.tv/v1/assets/BJO0h8jMwJWg5Id_4VLxIJ-VscUzRry_myp4aC21/play\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r K+:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection 1)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep 'geoblock')\n\n    if [ -n \"$result\" ]; then\n        echo -n -e \"\\r K+:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r K+:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_TV360() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r TV360:\\t\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'http://api-v2.tv360.vn/public/v1/composite/get-link?childId=998335&device_type=WEB_IPHONE&id=19474&network_device_id=prIUMaumjI7dNWKSUxFkEViFygs%3D&t=1686572228&type=film' -H \"userid: 182551343\" -H \"devicetype: WEB_IPHONE\" -H \"deviceName: iPad Air 5th Gen (WiFi)\" -H \"profileid: 182733455\" -H \"s: cSkV/vwUfX6tahDwe6xh9Bl0yhNs/TdWTaOJiWDt3gHekijGnNYh9i4YaUmdfBfI4oKOwvioKJ7PuKMH7ctWA6rEHeGXH/nUYOY1g7l4Umh6zoed5bBwWCgUuh5eMqdNNoptwaeCee58USTteOkbHQ==\" -H \"deviceid: 69FFABD6-F9D8-4C2E-8C44-7195CF0A2930\" -H \"devicedrmid: prIUMaumjI7dNWKSUxFkEViFygs=\" -H \"Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIxODI1NTEzNDMiLCJ1c2VySWQiOjE4MjU1MTM0MywicHJvZmlsZUlkIjoxODI3MzM0NTUsImR2aSI6MjY5NDY3MTUzLCJjb250ZW50RmlsdGVyIjoiMTAwIiwiZ25hbWUiOiIiLCJpYXQiOjE2ODY1NzIyMDEsImV4cCI6MTY4NzE3NzAwMX0.oi0BKvATgBzPEkqR_liBrvMKXBUiWzp2BQme-biDnwiVhuta0qn_aZo6z3azLdjW5kH6PfEwEkc4K9jCfAK5rw\" -H \"osappversion: 1.9.27\" -H \"sessionid: C5017358-5327-4185-999A-CA3291CC66AC\" -H \"zoneid: 1\" -H \"Accept: application/json, text/html\" -H \"Content-Type: application/json\" -H \"osapptype: IPAD\" -H \"tv360transid: 1686572228_69FFABD6-F9D8-4C2E-8C44-7195CF0A2930\" -H \"User-Agent: TV360/31 CFNetwork/1402.0.8 Darwin/22.2.0\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r TV360:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -woP '\"errorCode\"\\s{0,}:\\s{0,}\\K\\d+')\n\n    case \"$result\" in\n        '310') echo -n -e \"\\r TV360:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        '200') echo -n -e \"\\r TV360:\\t\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r TV360:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_MeWatch() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r MeWatch:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://cdn.mewatch.sg/api/items/97098/videos?delivery=stream%2Cprogressive&ff=idp%2Cldp%2Crpt%2Ccd&lang=en&resolution=External&segments=all' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r MeWatch:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -woP '\"code\"\\s{0,}:\\s{0,}\\K\\d+')\n    local isOK=$(echo \"$tmpresult\" | grep -i 'Stream')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r MeWatch:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r MeWatch:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r MeWatch:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r MeWatch:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_trueID() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r trueID:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL \"https://tv.trueid.net/th-en/live/thairathtv-hd\" -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: same-origin' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r trueID:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n    local channelId=$(echo \"$tmpresult\" | grep -woP '\"channelId\"\\s{0,}:\\s{0,}\"\\K[^\"]+' | head -n 1)\n    local authUser=$(echo \"$tmpresult\" | grep -woP '\"buildId\"\\s{0,}:\\s{0,}\"\\K[^\"]+' | head -n 1)\n    local authKey=${authUser:10}\n    local tmpresult2=$(curl ${CURL_DEFAULT_OPTS} -s \"https://tv.trueid.net/api/stream/checkedPlay?channelId=${channelId}&lang=en&country=th\" -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: same-origin' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' -u ${authUser}:${authKey} -H 'accept: application/json, text/plain, */*' -H 'referer: https://tv.trueid.net/th-en/live/thairathtv-hd' --user-agent \"${UA_BROWSER}\")\n\n    local result=$(echo \"$tmpresult2\" | grep -woP '\"billboardType\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    case \"$result\" in\n        'GEO_BLOCK') echo -n -e \"\\r trueID:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\" ;;\n        'LOADING') echo -n -e \"\\r trueID:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r trueID:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_SonyLiv() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://www.sonyliv.com/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r SonyLiv:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n    local isBlocked=$(echo \"$tmpresult\" | grep 'geolocation_notsupported')\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r SonyLiv:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    # 取得 JWT Token\n    local jwtToken=$(echo \"$tmpresult\" | grep 'securityToken' | sed 's/.*securityToken//' | sed 's/.*resultObj//' | cut -f2 -d'\"' | head -n 1)\n    # 取得国家代码\n    local tmpresult2=$(curl ${CURL_DEFAULT_OPTS} -s 'https://apiv2.sonyliv.com/AGL/1.4/A/ENG/WEB/ALL/USER/ULD' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'accept: application/json, text/plain, */*' -H 'referer: https://www.sonyliv.com/' -H 'device_id: 25a417c3b5f246a393fadb022adc82d5-1715309762699' -H 'app_version: 3.5.59' -H \"security_token: ${jwtToken}\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult2\" ]; then\n        echo -n -e \"\\r SonyLiv:\\t\\t\\t\\t${Font_Red}Failed (Network Connection 1)${Font_Suffix}\\n\"\n        return\n    fi\n    local region=$(echo \"$tmpresult2\" |  grep -woP '\"country_code\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    # 取得播放详情\n    local tmpresult3=$(curl ${CURL_DEFAULT_OPTS} -s \"https://apiv2.sonyliv.com/AGL/3.8/A/ENG/WEB/${region}/ALL/CONTENT/VIDEOURL/VOD/1000045427/prefetch\" -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: same-origin' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' -H 'accept: application/json, text/plain, */*' -H 'origin: https://www.sonyliv.com' -H 'referer: https://www.sonyliv.com/' -H 'device_id: 25a417c3b5f246a393fadb022adc82d5-1715309762699' -H \"security_token: ${jwtToken}\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult3\" ]; then\n        echo -n -e \"\\r SonyLiv:\\t\\t\\t\\t${Font_Red}Failed (Network Connection 2)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult3\" | grep -woP '\"resultCode\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    local reason=$(echo \"$tmpresult3\" | grep -woP '\"message\"\\s{0,}:\\s{0,}\"\\K[^\"]+')\n    case \"$result\" in\n        \"KO\") echo -n -e \"\\r SonyLiv:\\t\\t\\t\\t${Font_Red}No (${reason})${Font_Suffix}\\n\" ;;\n        \"OK\") echo -n -e \"\\r SonyLiv:\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r SonyLiv:\\t\\t\\t\\t${Font_Red}Failed (Error: ${result})${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_JioCinema() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s 'https://apis-jiocinema.voot.com/location' -H 'Accept: application/json, text/plain, */*' -H 'Accept-Language: en-US,en;q=0.9' -H 'Origin: https://www.jiocinema.com' -H 'Referer: https://www.jiocinema.com/' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: cross-site' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Jio Cinema:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult2=$(curl ${CURL_DEFAULT_OPTS} -s 'https://content-jiovoot.voot.com/psapi/voot/v1/voot-web//view/show/3500210?subNavId=38fa57ba_1706064514668&excludeTray=player-tray,subnav&responseType=common&devicePlatformType=desktop&page=1&layoutCohort=default&supportedChips=comingsoon' -X 'OPTIONS' -H 'Accept: */*' -H 'Accept-Language: en-US,en;q=0.9' -H 'Access-Control-Request-Headers: app-version' -H 'Access-Control-Request-Method: GET' -H 'Origin: https://www.jiocinema.com' -H 'Referer: https://www.jiocinema.com/' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: cross-site' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult2\" ]; then\n        echo -n -e \"\\r Jio Cinema:\\t\\t\\t\\t${Font_Red}Failed (Network Connection 1)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked1=$(echo \"$tmpresult\" | grep -i 'Access Denied')\n    local isOK1=$(echo \"$tmpresult\" | grep -i 'Success')\n    local isBlocked2=$(echo \"$tmpresult2\" | grep -i 'is unavailable at your')\n    local isOK2=$(echo \"$tmpresult2\" | grep -i 'Ok')\n\n    if [ -n \"$isBlocked1\" ] || [ -n \"$isBlocked2\" ]; then\n        echo -n -e \"\\r Jio Cinema:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK1\" ] && [ -n \"$isOK2\" ]; then\n        echo -n -e \"\\r Jio Cinema:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Jio Cinema:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_MXPlayer() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r MX Player:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sLi 'https://www.mxplayer.in/' -w \"_TAG_%{http_code}_TAG_\" --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | grep '_TAG_' | awk -F'_TAG_' '{print $2}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r MX Player:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isOK=$(echo \"$tmpresult\" | grep 'set-cookie')\n    local isBlocked=$(echo \"$tmpresult\" | grep -iE '403 ERROR|not available in your')\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r MX Player:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -n \"$isOK\" ]; then\n        echo -n -e \"\\r MX Player:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r MX Player:\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_Zee5() {\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sLi 'https://www.zee5.com/' -w \"_TAG_%{http_code}_TAG_\" -H 'Upgrade-Insecure-Requests: 1' --user-agent \"${UA_BROWSER}\")\n    local httpCode=$(echo \"$tmpresult\" | grep '_TAG_' | awk -F'_TAG_' '{print $2}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r Zee5:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local region=$(echo \"$tmpresult\" | grep -woP 'country=\\K[A-Z]{2}' | head -n 1)\n    if [ -n \"$region\" ]; then\n        echo -n -e \"\\r Zee5:\\t\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r Zee5:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: Unknown)${Font_Suffix}\\n\"\n}\n\nfunction WebTest_EroGameSpace() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r EroGameSpace:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL \"https://erogamescape.org\" --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r EroGameSpace:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local result=$(echo \"$tmpresult\" | grep -i '18歳')\n    if [ -n \"$result\" ]; then\n        echo -n -e \"\\r EroGameSpace:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r EroGameSpace:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_DAnimeStore() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r D Anime Store:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult=$(OPENSSL_CONF=<(cat <<EOF\nopenssl_conf = openssl_init\n[openssl_init]\nssl_conf = ssl_sect\n[ssl_sect]\nsystem_default = system_default_sect\n[system_default_sect]\nOptions = UnsafeLegacyServerConnect\nEOF\n) curl ${CURL_DEFAULT_OPTS} -sL 'https://animestore.docomo.ne.jp/animestore/reg_pc' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r D Anime Store:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep '海外')\n    if [ -n \"$isBlocked\" ];then\n        echo -n -e \"\\r D Anime Store:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r D Anime Store:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\"\n}\n\nfunction MediaUnlockTest_RakutenTVJP() {\n    if [ \"${USE_IPV6}\" == 1 ]; then\n        echo -n -e \"\\r Rakuten TV JP:\\t\\t\\t\\t${Font_Red}IPv6 Is Not Currently Supported${Font_Suffix}\\n\"\n        return\n    fi\n\n    local contentId='387878'\n    local tmpresult=$(curl ${CURL_DEFAULT_OPTS} -s \"https://api-live.tv.rakuten.co.jp/v1/contents/${contentId}/playinfo?device_id=2\" -H 'accept: application/json, text/plain, */*' -H 'accept-language: en-US,en;q=0.9' -H 'origin: https://live.tv.rakuten.co.jp' -H 'referer: https://live.tv.rakuten.co.jp/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Rakuten TV JP:\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isBlocked=$(echo \"$tmpresult\" | grep -i 'IS_FOREIGN')\n    if [ -n \"$isBlocked\" ];then\n        echo -n -e \"\\r Rakuten TV JP:\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isOK=$(echo \"$tmpresult\" | grep -i 'in_vod')\n\n    if [ -z \"$isBlocked\" ] && [ -z \"$isOK\" ]; then\n        echo -n -e \"\\r Rakuten TV JP:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local tmpresult1=$(curl ${CURL_DEFAULT_OPTS} -s 'https://webapi.nba.rakuten.co.jp/api/v1/system/geofilter?os_type=web&os_version=2.38.13' -H 'accept: application/json, text/plain, */*' -H 'accept-language: ja' -H 'origin: https://nba.rakuten.co.jp' -H 'referer: https://nba.rakuten.co.jp/' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: empty' -H 'sec-fetch-mode: cors' -H 'sec-fetch-site: same-site' --user-agent \"${UA_BROWSER}\")\n    if [ -z \"$tmpresult\" ]; then\n        echo -n -e \"\\r Rakuten TV JP:\\t\\t\\t\\t${Font_Red}Failed (Network Connection 1)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local isDomestic=$(echo \"$tmpresult1\" | grep -woP '\"is_domestic\"\\s{0,}:\\s{0,}\\K(false|true)')\n\n    case \"$isDomestic\" in\n        'false') echo -n -e \"\\r Rakuten TV JP:\\t\\t\\t\\t${Font_Yellow}No (NBA Unavailable)${Font_Suffix}\\n\" ;;\n        'true') echo -n -e \"\\r Rakuten TV JP:\\t\\t\\t\\t${Font_Green}Yes${Font_Suffix}\\n\" ;;\n        '') echo -n -e \"\\r Rakuten TV JP:\\t\\t\\t\\t${Font_Red}Failed (Error: PAGE ERROR 1)${Font_Suffix}\\n\" ;;\n        *) echo -n -e \"\\r Rakuten TV JP:\\t\\t\\t\\t${Font_Red}Failed (Error: $result)${Font_Suffix}\\n\" ;;\n    esac\n}\n\nfunction MediaUnlockTest_AMCPlus() {\n    tmpresult=$(curl ${CURL_DEFAULT_OPTS} -sL 'https://www.amcplus.com/' -w '%{http_code}_TAG_%{url_effective}\\n' -o dev/null -H 'accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' -H 'accept-language: en-US,en;q=0.9' -H \"sec-ch-ua: ${UA_SEC_CH_UA}\" -H 'sec-ch-ua-mobile: ?0' -H 'sec-ch-ua-platform: \"Windows\"' -H 'sec-fetch-dest: document' -H 'sec-fetch-mode: navigate' -H 'sec-fetch-site: none' -H 'sec-fetch-user: ?1' -H 'upgrade-insecure-requests: 1' --user-agent \"${UA_BROWSER}\")\n\n    local httpCode=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $1}')\n    if [ \"$httpCode\" == '000' ]; then\n        echo -n -e \"\\r AMC+:\\t\\t\\t\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\\n\"\n        return\n    fi\n\n    local urlEffective=$(echo \"$tmpresult\" | awk -F'_TAG_' '{print $2}')\n    local isBlocked=$(echo \"$urlEffective\" | grep -i 'geographic-restriction')\n    local region=$(echo \"$urlEffective\" | awk -F'/' '{print $NF}' | tr A-Z a-z | sed 's/\\b[a-z]/\\U&/g')\n\n    if [ -n \"$isBlocked\" ]; then\n        echo -n -e \"\\r AMC+:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ \"$httpCode\" == '403' ]; then\n        echo -n -e \"\\r AMC+:\\t\\t\\t\\t\\t${Font_Red}No${Font_Suffix}\\n\"\n        return\n    fi\n    if [ -z \"$region\" ]; then\n        local region='USA'\n    fi\n    if [ \"$httpCode\" == '200' ]; then\n        echo -n -e \"\\r AMC+:\\t\\t\\t\\t\\t${Font_Green}Yes (Region: ${region})${Font_Suffix}\\n\"\n        return\n    fi\n\n    echo -n -e \"\\r AMC+:\\t\\t\\t\\t\\t${Font_Red}Failed (Error: ${httpCode})${Font_Suffix}\\n\"\n}\n\nfunction echo_result() {\n    for ((i=0;i<${#array[@]};i++)); do\n        echo \"$result\" | grep \"${array[i]}\"\n        delay 0.03\n    done\n}\n\nfunction Global_UnlockTest() {\n    echo \"\"\n    echo \"============[ Multination ]============\"\n    local result=$(\n        MediaUnlockTest_Dazn &\n        MediaUnlockTest_DisneyPlus &\n        MediaUnlockTest_Netflix &\n        MediaUnlockTest_YouTube_Premium &\n        MediaUnlockTest_PrimeVideo &\n        MediaUnlockTest_TVBAnywhere &\n        MediaUnlockTest_Spotify &\n        RegionTest_oneTrust &\n        RegionTest_iQYI &\n    )\n    wait\n    local array=(\"Dazn:\" \"Disney+:\" \"Netflix:\" \"YouTube Premium:\" \"Amazon Prime Video:\" \"TVBAnywhere+:\" \"Spotify Registration:\" \"OneTrust Region:\" \"iQyi Oversea Region:\")\n    echo_result ${result} ${array}\n    local result=$(\n        RegionTest_Bing &\n        RegionTest_YouTubeCDN &\n        RegionTest_NetflixCDN &\n        WebTest_OpenAI &\n        WebTest_Gemini &\n        WebTest_Wikipedia_Editable &\n        WebTest_GooglePlayStore &\n        WebTest_GoogleSearchCAPTCHA &\n        GameTest_Steam &\n    )\n    wait\n    local array=(\"Bing Region:\" \"YouTube CDN:\" \"Netflix Preferred CDN:\" \"ChatGPT:\" \"Google Gemini:\" \"Wikipedia Editability:\" \"Google Play Store:\" \"Google Search CAPTCHA Free:\" \"Steam Currency:\")\n    echo_result ${result} ${array}\n    show_region Forum\n    WebTest_Reddit\n    echo \"=======================================\"\n}\n\nfunction NA_UnlockTest() {\n    echo \"===========[ North America ]===========\"\n    local result=$(\n        MediaUnlockTest_ParamountPlus &\n        MediaUnlockTest_DiscoveryPlus &\n        MediaUnlockTest_AcornTV &\n        MediaUnlockTest_BritBox &\n        MediaUnlockTest_SonyLiv &\n        MediaUnlockTest_NBATV &\n        MediaUnlockTest_TLCGO &\n        MediaUnlockTest_Shudder &\n        MediaUnlockTest_FuboTV &\n        MediaUnlockTest_TubiTV &\n    )\n    wait\n    local array=(\"Paramount+:\" \"Discovery+:\" \"Acorn TV:\" \"BritBox:\" \"SonyLiv:\" \"NBA TV:\" \"TLC GO:\" \"Shudder:\" \"Fubo TV:\" \"Tubi TV:\")\n    echo_result ${result} ${array}\n    local result=$(\n        MediaUnlockTest_PlutoTV &\n        MediaUnlockTest_KOCOWA &\n        MediaUnlockTest_AMCPlus &\n        GameTest_MathsSpot &\n    )\n    wait\n    local array=(\"Pluto TV:\" \"KOCOWA:\" \"AMC+\" \"MathsSpot Roblox:\")\n    echo_result ${result} ${array}\n    show_region US\n    local result=$(\n        MediaUnlockTest_Fox &\n        MediaUnlockTest_HuluUS &\n        MediaUnlockTest_NFLPlus &\n        MediaUnlockTest_ESPNPlus &\n        MediaUnlockTest_EPIX &\n        MediaUnlockTest_Starz &\n        MediaUnlockTest_Philo &\n        MediaUnlockTest_FXNOW &\n        MediaUnlockTest_HBOMax &\n    )\n    wait\n    local array=(\"FOX:\" \"Hulu:\" \"NFL+\" \"ESPN+:\" \"MGM+:\" \"Starz:\" \"Philo:\" \"FXNOW:\" \"HBO Max:\")\n    echo_result ${result} ${array}\n    local result=$(\n        MediaUnlockTest_Crackle &\n        MediaUnlockTest_CWTV &\n        MediaUnlockTest_AETV &\n        MediaUnlockTest_NBCTV &\n        MediaUnlockTest_SlingTV &\n        MediaUnlockTest_encoreTVB &\n    )\n    wait\n    local array=(\"Crackle:\" \"CW TV:\" \"A&E TV:\" \"NBC TV:\" \"Sling TV:\" \"encoreTVB:\")\n    echo_result ${result} ${array}\n    local result=$(\n        MediaUnlockTest_PeacockTV &\n        MediaUnlockTest_Popcornflix &\n        MediaUnlockTest_Crunchyroll &\n        MediaUnlockTest_Directv &\n        # MediaUnlockTest_KBSAmerican &\n        WebTest_MetaAI &\n    )\n    wait\n    local array=(\"Peacock TV:\" \"Popcornflix:\" \"Crunchyroll:\" \"Directv Stream:\" \"Meta AI:\")\n    echo_result ${result} ${array}\n    show_region CA\n    local result=$(\n        MediaUnlockTest_HotStar &\n        MediaUnlockTest_CBCGem &\n        MediaUnlockTest_Crave &\n    )\n    wait\n    local array=(\"HotStar:\" \"CBC Gem:\" \"Crave:\")\n    echo_result ${result} ${array}\n    echo \"=======================================\"\n}\n\nfunction EU_UnlockTest() {\n    echo \"===============[ Europe ]==============\"\n    local result=$(\n        MediaUnlockTest_ParamountPlus &\n        MediaUnlockTest_DiscoveryPlus &\n        MediaUnlockTest_SonyLiv &\n        MediaUnlockTest_HBOMax &\n        MediaUnlockTest_SkyShowTime &\n        MediaUnlockTest_BritBox &\n        MediaUnlockTest_RakutenTV &\n        MediaUnlockTest_MegogoTV &\n        MediaUnlockTest_SetantaSports &\n        GameTest_MathsSpot &\n    )\n    wait\n    local array=(\"Paramount+:\" \"Discovery+:\" \"SonyLiv:\" \"HBO Max:\" \"SkyShowTime:\" \"BritBox:\" \"Rakuten TV:\" \"Megogo TV:\" \"Setanta Sports:\" \"MathsSpot Roblox:\")\n    echo_result ${result} ${array}\n    show_region GB\n    local result=$(\n        MediaUnlockTest_HotStar &\n        MediaUnlockTest_SkyGo &\n        MediaUnlockTest_ITVHUB &\n        MediaUnlockTest_Channel4 &\n        MediaUnlockTest_Channel5 &\n        MediaUnlockTest_BBCiPLAYER &\n        MediaUnlockTest_AcornTV &\n        MediaUnlockTest_Shudder &\n    )\n    wait\n    local array=(\"HotStar:\" \"Sky Go:\" \"ITV Hub:\" \"Channel 4:\" \"Channel 5:\" \"BBC iPLAYER:\" \"Acorn TV:\" \"Shudder:\")\n    echo_result ${result} ${array}\n    show_region FR\n    local result=$(\n        MediaUnlockTest_CanalPlus &\n        MediaUnlockTest_Molotov &\n    )\n    wait\n    local array=(\"Canal+:\" \"Molotov:\")\n    echo_result ${result} ${array}\n    show_region DE\n    local result=$(\n        MediaUnlockTest_Joyn &\n        MediaUnlockTest_SKY_DE &\n        MediaUnlockTest_ZDF &\n    )\n    wait\n    local array=(\"Joyn:\" \"SKY DE:\" \"ZDF:\")\n    echo_result ${result} ${array}\n    show_region NL\n    local result=$(\n        MediaUnlockTest_NLZIET &\n        MediaUnlockTest_videoland &\n        MediaUnlockTest_NPO_Start_Plus &\n    )\n    wait\n    local array=(\"NLZIET:\" \"videoland:\" \"NPO Start Plus:\")\n    echo_result ${result} ${array}\n    local result=$(\n        MediaUnlockTest_MoviStarPlus &\n        MediaUnlockTest_RaiPlay &\n        MediaUnlockTest_Sky_CH &\n        MediaUnlockTest_Amediateka &\n    )\n    wait\n    show_region ES\n    echo \"$result\" | grep \"Movistar+:\"\n    show_region IT\n    echo \"$result\" | grep \"Rai Play:\"\n    show_region CH\n    echo \"$result\" | grep \"SKY CH:\"\n    show_region RU\n    echo \"$result\" | grep \"Amediateka:\"\n    echo \"=======================================\"\n}\n\nfunction HK_UnlockTest() {\n    echo \"=============[ Hong Kong ]=============\"\n    local result=$(\n        MediaUnlockTest_NowE &\n        MediaUnlockTest_ViuCom &\n        MediaUnlockTest_ViuTV &\n        MediaUnlockTest_MyTVSuper &\n        MediaUnlockTest_HBOMax &\n        MediaUnlockTest_SonyLiv &\n        MediaUnlockTest_BilibiliHKMCTW &\n        MediaUnlockTest_BahamutAnime &\n    )\n    wait\n    local array=(\"Now E:\" \"Viu.com:\" \"Viu.TV:\" \"MyTVSuper:\" \"HBO Max:\" \"SonyLiv:\" \"BiliBili Hongkong/Macau/Taiwan:\" \"Bahamut Anime:\")\n    echo_result ${result} ${array}\n    echo \"=======================================\"\n}\n\nfunction AF_UnlockTest() {\n    echo \"==============[ Africa ]==============\"\n    local result=$(\n        MediaUnlockTest_DSTV &\n        MediaUnlockTest_Showmax &\n        MediaUnlockTest_ViuCom &\n        # MediaUnlockTest_ParamountPlus &\n    )\n    wait\n    local array=(\"DSTV:\" \"Showmax:\" \"Viu.com:\")\n    echo_result ${result} ${array}\n    echo \"=======================================\"\n}\n\nfunction IN_UnlockTest() {\n    echo \"===============[ India ]===============\"\n    local result=$(\n        MediaUnlockTest_HotStar &\n        MediaUnlockTest_Zee5 &\n        MediaUnlockTest_SonyLiv &\n        MediaUnlockTest_JioCinema &\n        MediaUnlockTest_MXPlayer &\n        MediaUnlockTest_NBATV &\n    )\n    wait\n    local array=(\"HotStar:\" \"Zee5:\" \"SonyLiv:\" \"Jio Cinema:\" \"MX Player:\" \"NBA TV:\")\n    echo_result ${result} ${array}\n    echo \"=======================================\"\n}\n\nfunction TW_UnlockTest() {\n    echo \"==============[ Taiwan ]===============\"\n    local result=$(\n        MediaUnlockTest_KKTV &\n        MediaUnlockTest_LiTV &\n        MediaUnlockTest_MyVideo &\n        MediaUnlockTest_4GTV &\n        MediaUnlockTest_LineTVTW &\n        MediaUnlockTest_HamiVideo &\n        MediaUnlockTest_Catchplay &\n        MediaUnlockTest_HBOMax &\n        MediaUnlockTest_BahamutAnime &\n        MediaUnlockTest_SonyLiv &\n        MediaUnlockTest_BilibiliTW &\n    )\n    wait\n    local array=(\"KKTV:\" \"LiTV:\" \"MyVideo:\" \"4GTV.TV:\" \"LineTV.TW:\" \"Hami Video:\" \"CatchPlay+:\" \"HBO Max:\" \"Bahamut Anime:\" \"SonyLiv:\" \"Bilibili Taiwan Only:\")\n    echo_result ${result} ${array}\n    echo \"=======================================\"\n}\n\nfunction JP_UnlockTest() {\n    echo \"===============[ Japan ]===============\"\n    local result=$(\n        MediaUnlockTest_DMM &\n        MediaUnlockTest_DMMTV &\n        MediaUnlockTest_AbemaTV &\n        MediaUnlockTest_Niconico &\n        MediaUnlockTest_Telasa &\n        MediaUnlockTest_unext &\n        MediaUnlockTest_HuluJP &\n        MediaUnlockTest_TVer &\n        MediaUnlockTest_Lemino &\n        MediaUnlockTest_AnimeFesta &\n        MediaUnlockTest_wowow &\n    )\n    wait\n    local array=(\"DMM:\" \"DMM TV:\" \"Abema.TV:\" \"Niconico:\" \"Telasa:\" \"U-NEXT:\" \"Hulu Japan:\" \"TVer:\" \"Lemino:\" \"AnimeFesta:\" \"WOWOW:\")\n    echo_result ${result} ${array}\n    local result=$(\n        MediaUnlockTest_VideoMarket &\n        MediaUnlockTest_DAnimeStore &\n        MediaUnlockTest_FOD &\n        MediaUnlockTest_Radiko &\n        MediaUnlockTest_DAM &\n        MediaUnlockTest_JCOM_ON_DEMAND &\n        MediaUnlockTest_Watcha &\n        MediaUnlockTest_RakutenTVJP &\n    )\n    wait\n    local array=(\"VideoMarket:\" \"D Anime Store:\" \"FOD(Fuji TV):\" \"Radiko:\" \"Karaoke@DAM:\" \"J:com On Demand:\" \"WATCHA:\" \"Rakuten TV JP:\")\n    echo_result ${result} ${array}\n    show_region Game\n    local result=$(\n        GameTest_Kancolle &\n        GameTest_UMAJP &\n        GameTest_KonosubaFD &\n        GameTest_PCRJP &\n        GameTest_ProjectSekai &\n    )\n    wait\n    local array=(\"Kancolle Japan:\" \"Pretty Derby Japan:\" \"Konosuba Fantastic Days:\" \"Princess Connect Re:Dive Japan:\" \"Project Sekai: Colorful Stage:\")\n    echo_result ${result} ${array}\n    show_region Music\n    local result=$(\n        MediaUnlockTest_mora &\n        MediaUnlockTest_musicjp &\n    )\n    wait\n    local array=(\"Mora:\" \"music.jp:\")\n    echo_result ${result} ${array}\n    show_region Forum\n    WebTest_EroGameSpace\n    echo \"=======================================\"\n\n}\n\nfunction SA_UnlockTest() {\n    echo \"===========[ South America ]===========\"\n    local result=$(\n        MediaUnlockTest_HBOMax &\n        MediaUnlockTest_DirecTVGO &\n        MediaUnlockTest_ParamountPlus &\n    )\n    wait\n    local array=(\"Star+:\" \"HBO Max:\" \"DirecTV Go:\" \"Paramount+:\")\n    echo_result ${result} ${array}\n    echo \"=======================================\"\n}\n\nfunction OA_UnlockTest() {\n    echo \"==============[ Oceania ]==============\"\n    local result=$(\n        MediaUnlockTest_NBATV &\n        MediaUnlockTest_AcornTV &\n        MediaUnlockTest_BritBox &\n        MediaUnlockTest_ParamountPlus &\n        MediaUnlockTest_AMCPlus &\n        MediaUnlockTest_SonyLiv &\n    )\n    wait\n    local array=(\"NBA TV:\" \"Acorn TV:\" \"BritBox:\" \"Paramount+:\" \"AMC+\" \"SonyLiv:\")\n    echo_result ${result} ${array}\n    show_region AU\n    local result=$(\n        # MediaUnlockTest_Stan &\n        MediaUnlockTest_Binge &\n        MediaUnlockTest_Docplay &\n        MediaUnlockTest_7plus &\n        MediaUnlockTest_ABCiView &\n    )\n    wait\n    local array=(\"Binge:\" \"Docplay:\" \"7plus:\" \"ABC iView:\")\n    echo_result ${result} ${array}\n    local result=$(\n        MediaUnlockTest_Channel9 &\n        MediaUnlockTest_Channel10 &\n        MediaUnlockTest_OptusSports &\n        MediaUnlockTest_SBSonDemand &\n        MediaUnlockTest_KayoSports &\n    )\n    wait\n    local array=(\"Channel 9:\" \"Channel 10:\" \"Optus Sports:\" \"SBS on Demand:\" \"Kayo Sports:\")\n    echo_result ${result} ${array}\n    show_region NZ\n    local result=$(\n        MediaUnlockTest_NeonTV &\n        MediaUnlockTest_SkyGONZ &\n        MediaUnlockTest_ThreeNow &\n        MediaUnlockTest_MaoriTV &\n    )\n    wait\n    local array=(\"Neon TV:\" \"SkyGo NZ:\" \"ThreeNow:\" \"Maori TV:\")\n    echo_result ${result} ${array}\n    echo \"=======================================\"\n}\n\nfunction KR_UnlockTest() {\n    echo \"==============[ Korean ]===============\"\n    local result=$(\n        MediaUnlockTest_Wavve &\n        MediaUnlockTest_Tving &\n        MediaUnlockTest_Watcha &\n        MediaUnlockTest_CoupangPlay &\n        MediaUnlockTest_SpotvNow &\n        MediaUnlockTest_NaverTV &\n        MediaUnlockTest_Afreeca &\n        MediaUnlockTest_KBSDomestic &\n    )\n    wait\n    local array=(\"Wavve:\" \"Tving:\" \"WATCHA:\" \"Coupang Play:\" \"Naver TV:\" \"SPOTV NOW\" \"Afreeca TV:\" \"KBS Domestic:\")\n    echo_result ${result} ${array}\n    echo \"=======================================\"\n}\n\nfunction SEA_UnlockTest() {\n    echo \"==========[ SouthEastAsia ]============\"\n    local result=$(\n        MediaUnlockTest_ViuCom &\n        MediaUnlockTest_HotStar &\n        MediaUnlockTest_HBOMax &\n        MediaUnlockTest_SonyLiv &\n        MediaUnlockTest_BGlobalSEA &\n    )\n    wait\n    local array=(\"Viu.com:\" \"HotStar:\" \"HBO Max:\" \"SonyLiv:\" \"B-Global SouthEastAsia:\")\n    echo_result ${result} ${array}\n\n    show_region SG\n    local result=$(\n        MediaUnlockTest_MeWatch &\n    )\n    wait\n    local array=(\"MeWatch:\")\n    echo_result ${result} ${array}\n\n    show_region TH\n    local result=$(\n        MediaUnlockTest_AISPlay &\n        MediaUnlockTest_trueID &\n        MediaUnlockTest_BGlobalTH &\n    )\n    wait\n    local array=(\"AIS Play:\" \"trueID:\" \"B-Global Thailand Only:\")\n    echo_result ${result} ${array}\n\n    show_region ID\n    local result=$(\n        MediaUnlockTest_BGlobalID &\n    )\n    wait\n    local array=(\"B-Global Indonesia Only:\")\n    echo_result ${result} ${array}\n    show_region VN\n    local result=$(\n        # MediaUnlockTest_K_PLUS &\n        # MediaUnlockTest_TV360 &\n        MediaUnlockTest_BGlobalVN &\n    )\n    wait\n    local array=(\"B-Global Việt Nam Only:\")\n    echo_result ${result} ${array}\n    echo \"=======================================\"\n}\n\nfunction Sport_UnlockTest() {\n    echo \"===============[ Sport ]===============\"\n    local result=$(\n        MediaUnlockTest_Dazn &\n        MediaUnlockTest_ESPNPlus &\n        MediaUnlockTest_NBATV &\n        MediaUnlockTest_FuboTV &\n        MediaUnlockTest_MolaTV &\n        MediaUnlockTest_SetantaSports &\n        MediaUnlockTest_OptusSports &\n        MediaUnlockTest_BeinConnect &\n        MediaUnlockTest_EurosportRO &\n    )\n    wait\n    local array=(\"Dazn:\" \"Star+:\" \"ESPN+:\" \"NBA TV:\" \"Fubo TV:\" \"Mola TV:\" \"Setanta Sports:\" \"Optus Sports:\" \"Bein Sports Connect:\" \"Eurosport RO:\")\n    echo_result ${result} ${array}\n    echo \"=======================================\"\n}\n\nfunction showSupportOS() {\n    if [ \"$LANGUAGE\" == 'en' ]; then\n        echo -e \"${Font_Purple}Supporting OS: Ubuntu 16+, Debian 10+, RHEL 7+, Arch Linux, Alpine Linux, FreeBSD, MacOS 10.13+, Android (Termux), iOS (iSH), Windows (MinGW/Cygwin), OpenWRT 23+ etc.${Font_Suffix}\"\n        echo ''\n    else\n        echo -e \"${Font_Purple}脚本适配 OS: Ubuntu 16+, Debian 10+, RHEL 7+, Arch Linux, Alpine Linux, FreeBSD, MacOS 10.13+, Android (Termux), iOS (iSH), Windows (MinGW/Cygwin), OpenWRT 23+ 等。${Font_Suffix}\"\n        echo ''\n    fi\n}\n\nfunction showScriptTitle() {\n    if [ \"$LANGUAGE\" == 'en' ]; then\n        echo -e \" [Stream Platform & Game Region Restriction Test]\"\n        echo ''\n        echo -e \"${Font_Green}Github Repository:${Font_Suffix} ${Font_Yellow} https://github.com/lmc999/RegionRestrictionCheck ${Font_Suffix}\"\n        echo -e \"${Font_Green}Telegram Discussion Group:${Font_Suffix} ${Font_Yellow} https://t.me/gameaccelerate ${Font_Suffix}\"\n        echo ''\n        echo -e \" ** Test Starts At: $(date)\"\n        echo -e \" ** Version: ${VER}\"\n        echo ''\n    else\n        echo -e \" [流媒体平台及游戏区域限制测试]\"\n        echo ''\n        echo -e \"${Font_Green}项目地址${Font_Suffix} ${Font_Yellow}https://github.com/lmc999/RegionRestrictionCheck ${Font_Suffix}\"\n        echo -e \"${Font_Green}BUG 反馈或使用交流可加 TG 群组${Font_Suffix} ${Font_Yellow}https://t.me/gameaccelerate ${Font_Suffix}\"\n        echo ''\n        echo -e \" ** 测试时间: $(date)\"\n        echo -e \" ** 版本: ${VER}\"\n        echo ''\n    fi\n}\n\nfunction inputOptions() {\n\n    while :; do\n        if [ \"$LANGUAGE\" == 'en' ]; then\n            echo -e \"${Font_Blue}Please Select Test Region or Press ENTER to Test All Regions${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}Input Number  [1]: [ Multination + Taiwan ]${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}Input Number  [2]: [ Multination + Hong Kong ]${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}Input Number  [3]: [ Multination + Japan ]${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}Input Number  [4]: [ Multination + North America ]${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}Input Number  [5]: [ Multination + South America ]${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}Input Number  [6]: [ Multination + Europe ]${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}Input Number  [7]: [ Multination + Oceania ]${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}Input Number  [8]: [ Multination + Korean ]${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}Input Number  [9]: [ Multination + SouthEast Asia ]${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}Input Number  [10]: [ Multination + India ]${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}Input Number  [11]: [ Multination + Africa ]${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}Input Number  [0]: [ Multination Only ]${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}Input Number  [88]: [ Instagram Music ]${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}Input Number [99]: [ Sport Platforms ]${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}Input Number [66]: [ All Platfroms ]${Font_Suffix}\"\n            read -p \"Please Input the Correct Number or Press ENTER:\" num\n        else\n            echo -e \"${Font_Blue}请选择检测项目，直接按回车将进行全区域检测${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}输入数字  [1]: [ 跨国平台+台湾平台 ]检测${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}输入数字  [2]: [ 跨国平台+香港平台 ]检测${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}输入数字  [3]: [ 跨国平台+日本平台 ]检测${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}输入数字  [4]: [ 跨国平台+北美平台 ]检测${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}输入数字  [5]: [ 跨国平台+南美平台 ]检测${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}输入数字  [6]: [ 跨国平台+欧洲平台 ]检测${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}输入数字  [7]: [跨国平台+大洋洲平台]检测${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}输入数字  [8]: [ 跨国平台+韩国平台 ]检测${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}输入数字  [9]: [跨国平台+东南亚平台]检测${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}输入数字 [10]: [ 跨国平台+印度平台 ]检测${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}输入数字 [11]: [ 跨国平台+非洲平台 ]检测${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}输入数字  [0]: [   只进行跨国平台  ]检测${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}输入数字 [88]: [   Instagram音乐   ]检测${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}输入数字 [99]: [   体育直播平台    ]检测${Font_Suffix}\"\n            echo -e \"${Font_SkyBlue}输入数字 [66]: [     全部平台      ]检测${Font_Suffix}\"\n            echo -e \"${Font_Purple}输入数字 [69]: [   广告推广投放    ]咨询${Font_Suffix}\"\n            read -p \"请输入正确数字或直接按回车:\" num\n        fi\n\n        if [ -z \"$num\" ]; then\n            REGION_ID=66\n            break\n        fi\n\n        if ! validate_region_id \"$num\"; then\n            echo -e \"${Font_Red}请输入正确号码！${Font_Suffix}\"\n            echo -e \"${Font_Red}Please enter the correct number!${Font_Suffix}\"\n            delay 3\n            clear\n            continue\n        fi\n\n        REGION_ID=$num\n        break\n    done\n}\n\nfunction checkPROXY() {\n    local proxyType=$(echo \"$USE_PROXY\" | awk -F'://' '{print $1}' | tr a-z A-Z)\n\n    if [ \"$LANGUAGE\" == 'en' ]; then\n        echo -e \" ${Font_SkyBlue}** Checking Results Under Proxy${Font_Suffix}\"\n        if ! check_proxy_connectivity; then\n            echo -e \" ${Font_SkyBlue}** Unable to connect to this Proxy${Font_Suffix}\"\n            exit 1\n        fi\n    else\n        echo -e \" ${Font_SkyBlue}** 正在测试代理解锁情况${Font_Suffix} \"\n\n        if ! check_proxy_connectivity; then\n            echo -e \" ${Font_SkyBlue}** 无法连接到此 ${proxyType} 代理${Font_Suffix}\"\n            exit 1\n        fi\n    fi\n}\n\nfunction showNetworkInfo() {\n    echo '--------------------------------'\n    get_ip_info\n    if [ \"$LANGUAGE\" == 'en' ]; then\n        echo -e \" ${Font_SkyBlue}** Your Network Provider: ${LOCAL_ISP} (${LOCAL_IP_ASTERISK})${Font_Suffix} \"\n    else\n        echo -e \" ${Font_SkyBlue}** 您的网络为: ${LOCAL_ISP} (${LOCAL_IP_ASTERISK})${Font_Suffix}\"\n    fi\n    echo ''\n}\n\nfunction checkIPConn() {\n    if [ -z \"$1\" ]; then\n        echo -e \"${Font_Red}Param missing.${Font_Suffix}\"\n        exit 1\n    fi\n\n    if [ -z \"$NETWORK_TYPE\" ]; then\n        local netType=\"$1\"\n    fi\n\n    if [ -n \"$NETWORK_TYPE\" ]; then\n        local netType=\"$NETWORK_TYPE\"\n    fi\n\n    if [ \"$1\" == 4 ] && [ \"$NETWORK_TYPE\" == 6 ]; then\n        return\n    fi\n\n    if [ \"$1\" == 6 ] && [ \"$NETWORK_TYPE\" == 4 ] ; then\n        return\n    fi\n\n    if [ \"$1\" == 6 ] && [ \"$NETWORK_TYPE\" == 0 ]; then\n        return\n    fi\n\n    if [ \"$LANGUAGE\" == 'en' ]; then\n        if [ \"$netType\" == 4 ]; then\n            echo ''\n            echo -e \" ${Font_SkyBlue}** Checking Results Under IPv4${Font_Suffix}\"\n            if ! check_net_connctivity 4 ; then\n                echo -e \"${Font_SkyBlue}No IPv4 Connectivity, IPv4 Test Skipped...${Font_Suffix}\"\n                USE_IPV4=0\n                return\n            fi\n\n            USE_IPV4=1\n            CURL_DEFAULT_OPTS=\"-4 ${CURL_OPTS}\"\n            showNetworkInfo\n            return\n        fi\n        if [ \"$netType\" == 6 ]; then\n            echo ''\n            echo -e \" ${Font_SkyBlue}** Checking Results Under IPv6${Font_Suffix}\"\n            if ! check_net_connctivity 6 ; then\n                echo -e \"${Font_SkyBlue}No IPv6 Connectivity, IPv6 Test Skipped...${Font_Suffix}\"\n                USE_IPV6=0\n                return\n            fi\n\n            USE_IPV6=1\n            CURL_DEFAULT_OPTS=\"-6 ${CURL_OPTS}\"\n            showNetworkInfo\n            return\n        fi\n        if [ \"$netType\" == 0 ]; then\n            echo ''\n            echo -e \" ${Font_SkyBlue}** Checking Results Under Default Network${Font_Suffix}\"\n            if check_net_connctivity 4; then\n                local ipv4Support=1\n            fi\n            if check_net_connctivity 6; then\n                local ipv6Support=1\n            fi\n            if [ \"$ipv4Support\" == 0 ] && [ \"$ipv6Support\" == 0 ]; then\n                echo -e \"${Font_Red}No network available, please check your network.${Font_Suffix}\"\n                USE_IPV4=0\n                USE_IPV6=0\n                exit 1\n            fi\n            # When IPv4 is supported, regardless IPv6 status\n            if [ \"$ipv4Support\" == 1 ]; then\n                USE_IPV4=1\n                USE_IPV6=0\n            fi\n            # When IPv4 is not available, Use IPv6\n            if [ \"$ipv4Support\" == 0 ] && [ \"$ipv6Support\" == 1 ]; then\n                USE_IPV6=1\n                USE_IPV4=0\n            fi\n\n            CURL_DEFAULT_OPTS=\"${CURL_OPTS}\"\n            showNetworkInfo\n            return\n        fi\n    else\n        if [ \"$netType\" == 4 ]; then\n            echo ''\n            echo -e \" ${Font_SkyBlue}** 正在测试 IPv4 解锁情况${Font_Suffix}\"\n            if ! check_net_connctivity 4 ; then\n                echo -e \"${Font_SkyBlue}当前主机不支持 IPv4，跳过...${Font_Suffix}\"\n                USE_IPV4=0\n                return\n            fi\n\n            USE_IPV4=1\n            CURL_DEFAULT_OPTS=\"-4 ${CURL_OPTS}\"\n            showNetworkInfo\n            return\n        fi\n        if [ \"$netType\" == 6 ]; then\n            echo ''\n            echo -e \" ${Font_SkyBlue}** 正在测试 IPv6 解锁情况${Font_Suffix}\"\n            if ! check_net_connctivity 6 ; then\n                echo -e \"${Font_SkyBlue}当前主机不支持 IPv6，跳过...${Font_Suffix}\"\n                USE_IPV6=0\n                return\n            fi\n\n            USE_IPV6=1\n            CURL_DEFAULT_OPTS=\"-6 ${CURL_OPTS}\"\n            showNetworkInfo\n            return\n        fi\n        if [ \"$netType\" == 0 ]; then\n            echo ''\n            echo -e \" ${Font_SkyBlue}** 正在测试默认网络解锁情况${Font_Suffix}\"\n            if check_net_connctivity 4; then\n                local ipv4Support=1\n            fi\n            if check_net_connctivity 6; then\n                local ipv6Support=1\n            fi\n            if [ \"$ipv4Support\" == 0 ] && [ \"$ipv6Support\" == 0 ]; then\n                echo -e \"${Font_Red}当前无网络，请检查您的网络。${Font_Suffix}\"\n                USE_IPV4=0\n                USE_IPV6=0\n                exit 1\n            fi\n            # When IPv4 is supported, regardless IPv6 status\n            if [ \"$ipv4Support\" == 1 ]; then\n                USE_IPV4=1\n                USE_IPV6=0\n            fi\n            # When IPv4 is not available, Use IPv6\n            if [ \"$ipv4Support\" == 0 ] && [ \"$ipv6Support\" == 1 ]; then\n                USE_IPV6=1\n                USE_IPV4=0\n            fi\n\n            CURL_DEFAULT_OPTS=\"${CURL_OPTS}\"\n            showNetworkInfo\n            return\n        fi\n    fi\n}\n\nfunction runScript() {\n    showScriptTitle\n\n    USE_IPV4=0\n    USE_IPV6=0\n\n    if [ \"$REGION_ID\" -eq 1 ]; then\n        checkIPConn 4\n        if [ \"$USE_IPV4\" -eq 1 ]; then\n            Global_UnlockTest\n            TW_UnlockTest\n        fi\n        checkIPConn 6\n        if [ \"$USE_IPV6\" -eq 1 ]; then\n            Global_UnlockTest\n            TW_UnlockTest\n        fi\n        return\n    fi\n    if [ \"$REGION_ID\" -eq 2 ]; then\n        checkIPConn 4\n        if [ \"$USE_IPV4\" -eq 1 ]; then\n            Global_UnlockTest\n            HK_UnlockTest\n        fi\n        checkIPConn 6\n        if [ \"$USE_IPV6\" -eq 1 ]; then\n            Global_UnlockTest\n            HK_UnlockTest\n        fi\n        return\n    fi\n    if [ \"$REGION_ID\" -eq 3 ]; then\n        checkIPConn 4\n        if [ \"$USE_IPV4\" -eq 1 ]; then\n            Global_UnlockTest\n            JP_UnlockTest\n        fi\n        checkIPConn 6\n        if [ \"$USE_IPV6\" -eq 1 ]; then\n            Global_UnlockTest\n            JP_UnlockTest\n        fi\n        return\n    fi\n    if [ \"$REGION_ID\" -eq 4 ]; then\n        checkIPConn 4\n        if [ \"$USE_IPV4\" -eq 1 ]; then\n            Global_UnlockTest\n            NA_UnlockTest\n        fi\n        checkIPConn 6\n        if [ \"$USE_IPV6\" -eq 1 ]; then\n            Global_UnlockTest\n            NA_UnlockTest\n        fi\n        return\n    fi\n    if [ \"$REGION_ID\" -eq 5 ]; then\n        checkIPConn 4\n        if [ \"$USE_IPV4\" -eq 1 ]; then\n            Global_UnlockTest\n            SA_UnlockTest\n        fi\n        checkIPConn 6\n        if [ \"$USE_IPV6\" -eq 1 ]; then\n            Global_UnlockTest\n            SA_UnlockTest\n        fi\n        return\n    fi\n    if [ \"$REGION_ID\" -eq 6 ]; then\n        checkIPConn 4\n        if [ \"$USE_IPV4\" -eq 1 ]; then\n            Global_UnlockTest\n            EU_UnlockTest\n        fi\n        checkIPConn 6\n        if [ \"$USE_IPV6\" -eq 1 ]; then\n            Global_UnlockTest\n            EU_UnlockTest\n        fi\n        return\n    fi\n    if [ \"$REGION_ID\" -eq 7 ]; then\n        checkIPConn 4\n        if [ \"$USE_IPV4\" -eq 1 ]; then\n            Global_UnlockTest\n            OA_UnlockTest\n        fi\n        checkIPConn 6\n        if [ \"$USE_IPV6\" -eq 1 ]; then\n            Global_UnlockTest\n            OA_UnlockTest\n        fi\n        return\n    fi\n    if [ \"$REGION_ID\" -eq 8 ]; then\n        checkIPConn 4\n        if [ \"$USE_IPV4\" -eq 1 ]; then\n            Global_UnlockTest\n            KR_UnlockTest\n        fi\n        checkIPConn 6\n        if [ \"$USE_IPV6\" -eq 1 ]; then\n            Global_UnlockTest\n            KR_UnlockTest\n        fi\n        return\n    fi\n    if [ \"$REGION_ID\" -eq 9 ]; then\n        checkIPConn 4\n        if [ \"$USE_IPV4\" -eq 1 ]; then\n            Global_UnlockTest\n            SEA_UnlockTest\n        fi\n        checkIPConn 6\n        if [ \"$USE_IPV6\" -eq 1 ]; then\n            Global_UnlockTest\n            SEA_UnlockTest\n        fi\n        return\n    fi\n    if [ \"$REGION_ID\" -eq 10 ]; then\n        checkIPConn 4\n        if [ \"$USE_IPV4\" -eq 1 ]; then\n            Global_UnlockTest\n            IN_UnlockTest\n        fi\n        checkIPConn 6\n        if [ \"$USE_IPV6\" -eq 1 ]; then\n            Global_UnlockTest\n            IN_UnlockTest\n        fi\n        return\n    fi\n    if [ \"$REGION_ID\" -eq 11 ]; then\n        checkIPConn 4\n        if [ \"$USE_IPV4\" -eq 1 ]; then\n            Global_UnlockTest\n            AF_UnlockTest\n        fi\n        checkIPConn 6\n        if [ \"$USE_IPV6\" -eq 1 ]; then\n            Global_UnlockTest\n            AF_UnlockTest\n        fi\n        return\n    fi\n    if [ \"$REGION_ID\" -eq 99 ]; then\n        checkIPConn 4\n        if [ \"$USE_IPV4\" -eq 1 ]; then\n            Sport_UnlockTest\n        fi\n        checkIPConn 6\n        if [ \"$USE_IPV6\" -eq 1 ]; then\n            Sport_UnlockTest\n        fi\n        return\n    fi\n    if [ \"$REGION_ID\" -eq 88 ]; then\n        MediaUnlockTest_InstagramMusic\n    fi\n    if [ \"$REGION_ID\" -eq 0 ]; then\n        checkIPConn 4\n        if [ \"$USE_IPV4\" -eq 1 ]; then\n            Global_UnlockTest\n        fi\n        checkIPConn 6\n        if [ \"$USE_IPV6\" -eq 1 ]; then\n            Global_UnlockTest\n        fi\n        return\n    fi\n    if [ \"$REGION_ID\" -eq 66 ]; then\n        checkIPConn 4\n        if [ \"$USE_IPV4\" -eq 1 ]; then\n            Global_UnlockTest\n            TW_UnlockTest\n            HK_UnlockTest\n            JP_UnlockTest\n            NA_UnlockTest\n            SA_UnlockTest\n            EU_UnlockTest\n            OA_UnlockTest\n            KR_UnlockTest\n        fi\n        checkIPConn 6\n        if [ \"$USE_IPV6\" -eq 1 ]; then\n            Global_UnlockTest\n            TW_UnlockTest\n            HK_UnlockTest\n            JP_UnlockTest\n            NA_UnlockTest\n            SA_UnlockTest\n            EU_UnlockTest\n            OA_UnlockTest\n            KR_UnlockTest\n        fi\n        return\n    fi\n    if [ \"$REGION_ID\" -eq 69 ]; then\n        echo ''\n        echo ''\n        echo -e \"${Font_Red}**************************${Font_Suffix}\"\n        echo -e \"${Font_Red}*                        *${Font_Suffix}\"\n        echo -e \"${Font_Red}*${Font_Suffix} 广告招租               ${Font_Red}*${Font_Suffix}\"\n        echo -e \"${Font_Red}*${Font_Suffix} 请联系：@reidschat_bot ${Font_Red}*${Font_Suffix}\"\n        echo -e \"${Font_Red}*                        *${Font_Suffix}\"\n        echo -e \"${Font_Red}**************************${Font_Suffix}\"\n        return\n    fi\n}\n\nfunction showGoodbye() {\n    case \"$NUM\" in\n        1) ADN='TW' ;;\n        3) ADN='JP' ;;\n        4) ADN='US' ;;\n        8) ADN=\"KR\" ;;\n        *) ADN=\"$(echo $(($RANDOM % 2 + 1)))\" ;;\n    esac\n\n    if [ \"$LANGUAGE\" == 'en' ]; then\n        echo -e \"${Font_Green}Testing Done! Thanks for Using This Script!${Font_Suffix}\"\n        echo -e ''\n        echo -e \"${Font_Yellow}Number of Script Runs for Today: ${TODAY_RUN_TIMES}; Total Number of Script Runs: ${TOTAL_RUN_TIMES}${Font_Suffix}\"\n        echo -e ''\n        bash <(curl ${CURL_DEFAULT_OPTS} -s https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/reference/AD/ADEN)\n    elif [[ \"$REGION_ID\" == \"8\" ]]; then\n        echo -e \"${Font_Green}本次测试已结束，感谢使用此脚本${Font_Suffix}\"\n        echo -e ''\n        echo -e \"${Font_Yellow}检测脚本当天运行次数: ${TODAY_RUN_TIMES}; 共计运行次数: ${TOTAL_RUN_TIMES}${Font_Suffix}\"\n        echo -e ''\n        bash <(curl ${CURL_DEFAULT_OPTS} -s https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/reference/AD/ADKR)\n        echo -e ''\n    else\n        echo -e \"${Font_Green}本次测试已结束，感谢使用此脚本${Font_Suffix}\"\n        echo -e ''\n        echo -e \"${Font_Yellow}检测脚本当天运行次数: ${TODAY_RUN_TIMES}; 共计运行次数: ${TOTAL_RUN_TIMES}${Font_Suffix}\"\n        echo -e ''\n        bash <(curl ${CURL_DEFAULT_OPTS} -s https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/reference/AD/AD1)\n        echo -e ''\n        bash <(curl ${CURL_DEFAULT_OPTS} -s https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/reference/AD/ADBW)\n    fi\n}\n\ncolor_print\n\ncheck_os_type\n\ncheck_dependencies\n\nprocess \"$@\"\n\nclear\n\ncount_run_times\n\nshowSupportOS\n\nshowScriptTitle\n\nif [ -z \"$REGION_ID\" ]; then\n    inputOptions\nfi\n\ndownload_extra_data\n\nclear\n\nrunScript\n\nshowGoodbye\n"
        },
        {
          "name": "cookies",
          "type": "blob",
          "size": 19.43359375,
          "content": "grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Atoken-exchange&latitude=0&longitude=0&platform=browser&subject_token=DISNEYASSERTION&subject_token_type=urn%3Abamtech%3Aparams%3Aoauth%3Atoken-type%3Adevice\n'authorization: Bearer ZGlzbmV5JmJyb3dzZXImMS4wLjA.Cu56AgSfBTDag5NiRA81oLHkDZfu5L3CKadnefEAY84'\n\"AMCVS_CFAF55745DD2611E0A495C82%40AdobeOrg=1; s_pvDate=2021%2F06%2F17; s_cc=true; wowow2_mem_guide=visited; wowow2_MGSID=4440260aa4011f0162393267600028772; wowow2_MGSID_AuthTicket=fd28d6b1349fd2e672af97370c4eaa4d42a4fdf2; demographics=01301; u-demographics=BAD81A3D84A07B32EC333E1BEFE72F10; wowow2_sls=1; wowow2_ext_MGSID=4440260aa4011f0162393267600028772; wod_auth=CfDJ8D-H-2bqdw1AjJk3TVDbKLaZydf2DfrFVw51ktRQdWqpml0TtbTZudBFfOd-ReyghPDX8aTlo8Ys_shmm-Nv7GBeFMrsM-pUufuTmiSYX7yEa5D9h6YDRA7OviqDLyAKDHUpZifwVToT1vKg_A9G1UMaS0exxBx_TcoOe9U_3Ex4HAb98A5106gj-6ztKoSPVxxKEneO1JdtLe3uVCZ_HMqh6oCeJCZvvlOVN_w_lECjchu58NGtZWmV3mE02DZ-SK5X6xT6GTetvr5EvFKJAxNfaNvkHoS_e-20dz-c-8huuTuvXTg3-i5OAQSyG5UQ_VRz-qqMVV-JR2xmRyxPuEifLU3Iy_B0IWvE65YZlexmL2KVEP745nB7-wCRuVzu9zEdO1IRHQ3fruQ_8RJqb0g; wod_secret=1e4c8db631cd4d2f986102a87811e8e5; s_ips=1010; s_sq=%5B%5BB%5D%5D; x_xsrf_token=1623934360j1T6bPwpGswOnPp3IrcHFZ5vPMo8LE; s_gpvPage=www%3Awowow%3Amember%3Alogin.php%3Ard%3Ahttps%3A%2B%2Bwww.wowow.co.jp%2Bsupport%2Bregist_self.php; s_tp=1010; s_ppv=www%253Awowow%253Amember%253Alogin.php%253Ard%253Ahttps%253A%2B%2Bwww.wowow.co.jp%2Bsupport%2Bregist_self.php%2C100%2C100%2C1010%2C1%2C1; s_nr365=1623934367877-Repeat; AMCV_CFAF55745DD2611E0A495C82%40AdobeOrg=-432600572%7CMCIDTS%7C18796%7CMCMID%7C30796674720677405047057880592301178864%7CMCOPTOUT-1623941567s%7CNONE%7CvVersion%7C4.5.2\"\n\"Accept: application/json;pk=BCpkADawqM3ZdH8iYjCnmIpuIRqzCn12gVrtpk_qOePK3J9B6h7MuqOw5T_qIqdzpLvuvb_hTvu7hs-7NsvXnPTYKd9Cgw7YiwI9kFfOOCDDEr20WDEYMjGiLptzWouXXdfE996WWM8myP3Z\"\n{\"device_identifier\":\"2B3BACF5B121715649E5D667D863612E:2ea6\",\"deejay_device_id\":190,\"version\":1,\"all_cdn\":true,\"content_eab_id\":\"EAB::ea0def9a-afa3-4371-b126-964e1c6bea89::60515729::2000604\",\"region\":\"US\",\"xlink_support\":false,\"device_ad_id\":\"7DC1A194-92E0-117A-A072-E22535FD3B8D\",\"limit_ad_tracking\":false,\"ignore_kids_block\":false,\"language\":\"en\",\"guid\":\"2B3BACF5B121715649E5D667D863612E\",\"rv\":838281,\"kv\":451730,\"unencrypted\":true,\"include_t2_revenue_beacon\":\"1\",\"cp_session_id\":\"D5A29AC4-45C5-28EC-2D90-310D8B603665\",\"interface_version\":\"1.11.0\",\"network_mode\":\"wifi\",\"play_intent\":\"resume\",\"lat\":23.1192247,\"long\":113.2199658,\"playback\":{\"version\":2,\"video\":{\"codecs\":{\"values\":[{\"type\":\"H264\",\"width\":1920,\"height\":1080,\"framerate\":60,\"level\":\"4.2\",\"profile\":\"HIGH\"}],\"selection_mode\":\"ONE\"}},\"audio\":{\"codecs\":{\"values\":[{\"type\":\"AAC\"}],\"selection_mode\":\"ONE\"}},\"drm\":{\"values\":[{\"type\":\"WIDEVINE\",\"version\":\"MODULAR\",\"security_level\":\"L3\"},{\"type\":\"PLAYREADY\",\"version\":\"V2\",\"security_level\":\"SL2000\"}],\"selection_mode\":\"ALL\"},\"manifest\":{\"type\":\"DASH\",\"https\":true,\"multiple_cdns\":true,\"patch_updates\":true,\"hulu_types\":true,\"live_dai\":true,\"multiple_periods\":false,\"xlink\":false,\"secondary_audio\":true,\"live_fragment_delay\":3},\"segments\":{\"values\":[{\"type\":\"FMP4\",\"encryption\":{\"mode\":\"CENC\",\"type\":\"CENC\"},\"https\":true}],\"selection_mode\":\"ONE\"}}}\n_h_csrf_id=7409960e2a4c5cacdf4ad0b40d02f1f419ec19a5cf5efde88838f56154d36dab; _hulu_uid=201194534; _hulu_e_id=f49WXX_ScBCK8xPpPfT7JA; _hulu_bluekai_hashed_uid=c0e4c9575742fe7542cbc0eb475f6585; _hulu_dt=CJDtoJLb0AF7xJTRQLO7v6aOJ7I-dqaPkHo8l6LPP1bcLnYA_A--PkyDXJwUJG3o0hWDnKkYILcL_%2FBrDxIXAlyoHDx14NHeeJfctC29Xzsx4tNJedYQZuy1w%2FZLgczSI3qt8nirWwAobE0wmi8OhdO_%2FLmh7Ln7bRqner5sqC0xIsSvDYv%2FkpKdrRyPCzLX0GNhWEcU1sjqGNJhcNySujfMh%2Fq%2FfTe6Gz9vb7rtjpGCRWKNdPWG3vSyNnOKd8J6HLZIWQpVkUuvYqF_D0HrdhVRRAEAu9cpfgW%2F_bPgaG_mWKAt3%2F9_iF0ksf1trvm4Vw01HA1ufRMi1kxTrMfcQ%2FRfmsIL0lVIoUPtdCNWJuQ_xyncNryUK27dYEBI1ZBKpVWk9QO_0F_6XtIjq2etmGLG98e%2Fx74yefigQ7aQACuedPlvDRHOm2Dx7ElxcIBzKGnOBtLt66wPzOHIxa94awZzpjhjBjEJ4JdhngP0DSsaFGzvzXlio9QivBgeAh8FgAl%2F3odQ8mLstQH1Cslz1NiPU9rruTuGmLASk%2F%2FLpYUyOYUOJl%2FfD7K02Xq7nF3MnWv4PTC79Gl5AoxZeGKy9WBFQAVCUKI6OYx_oc3I1McQXBNK1GFkegEHahWO7qUgA6547ucmytiM0llw%2Fyvv8M%2FTuIebc0fGdeV6Ym2AK5ElvBmqMCPVUTrAOP1qK8JC7CkZQ6Cm5U7qw8AEyRrpPfNqdZK00Abne0RAyrbthfzy7bfoMktRMqiP704AgaT3M_YRn9SshQ081Fx8uHI1GE5YmJvo7umw0ZtV0gGxXexxtaZQgqrAx75uyLoWyG2uvuvNCmufWvJrNJ9uEAiXIrghWdtQYYXqbVjFTa6gt4DKKpiDW_J39vf6EeSQyu0jCzlFYrVGmweLDbVXWLk_zeqUBzcbuB4-; _hulu_pid=201194639; _hulu_pname=Bill%20Gates; _hulu_is_p_kids=0; guid=051BDA2EDE200DE1E7C1E48FBE9BE703; AMCVS_0A19F13A598372E90A495D62%40AdobeOrg=1; _hulu_uname=Bill+Gates; _hulu_utype=plus%3Aios; _hulu_pgid=3; _hulu_plid=70828; _hulu_psh=0; _hulu_psvh=0; _csrf_id=75e11783d40cc993792dad9e0816af9443362c9b53e92ef7797f0355a8b95d68; s_cc=true; _hulu_assignments=eyJ2MSI6W3siZSI6OTc5LCJ0IjoyNjk3LCJuIjoiaHVsdV8xMzU3OF93ZWxjb21lX2Jfd2hpdGVfY3RhIn1dfQ%3D%3D; _hulu_hbc=1624194121035; _hulu_session=k2JE4gPqVlM3LtStdErz12jw0U8-lI3d5nWPy2Q8W4tMGGbtzg--atiahdg9XQKv5WqAhkS9t7POnyCifqFVkGE3tpGy6tEMl9UPrfBQ6_RsNDR%2FcGVnz%2FPILVruTsa58eLUq5zdtqFb9nNbvQ53lrRn3WYess8Gs1IMI6Hxj1Zkknh0FbxUcS18um%2FqAeWcyLKTSjJ_FtHwRBzw34fufh0UgyvdcygP_yif9jJ4vLy7W7vhyhRVS_9wLMi206arcdFKfgMNglamSjyxVcBJFEzs91vHiZyK0UEfnpzCpKCujWu38bUIiGbHfpR06kuQ4P80OBp7PXFZ5U3w%2FQT5PzfCdutdQoHbjqw_W8yCdwp0HTzdwmDuRCGKrqBk6KArHtLZA4zFAoovr_d9dKWsZDnWXMc4RjomDzNRP0cjyAa7vXnV_viWf3BoGRuuyBLEwEak%2Fj86fHOW1frY94bdSSQidgZck_8yKl6zHY8Uk_e_TMMrItdSRGO7NwkoWDjl_%2FtbTcahUBhHqVTSOTnVO3U1IzIWW3o8JA0568k92g5roSTKBI6EUD9SktBFcfrzPszL5CJtjt_FuWp9agQyLcQODapMEYhq9USPsnM9MWJatxpHhgY%2FlFmOdOx6z1QK8fBdYuWSK9ExYmr9xYh10DzsO7tYlJn0P6pq65Zv1_US61CVtsHNHOXr4DEsvWuAJGi17f6s2boUrKJiCIxQOuJMwZiJTpjkW2eTH3oeg4nisbUlnb15IrdMdtdwTG26vOGjG5ByHeXZ721mVZfNbm7ghx0nSrKLb_gmM0mdtUM9qyTSB_cyJM5aqQB2LctzuaEaIeLKkUIlXIPGsSiLSDmNX3HGRLdLKuQl1Yoq_7TNkv%2FRXN7t7ybUTTTo6cFsTp7JbbS4%2Ft3HT04m3jY9UhBN80l29hwft0M3eeE2tASFnn90KZs8jd43l0xHu4on9Vbsd2cjHbPi2FyF_utXqI0OUBAQltuNyC9mXW755KbryCErZnb7xkt3VrK5eqdPS70ZdLgfGtID4NGrPCCLgMsPEqNwK4pKbK1kH4exmksjDnwyj5YVIRYywj9LoipgKEnFJzD6IUqhB5ybA8bKLc8qFXPJbUZnmn_u6lEwtUh_heet1mu5; bm_mi=C7288944D1321EF6C7049F7B9FA20378~0QSp6QjTtRiEjeSjIpWX2cS6CplgPGcGlXazUQnps1dJF2Nv2BNe3oqUpw+u+oCKfOR1BMCbrHb3VOpz5cOed+rbDVzxclxodIKKJC/ZXNjTo15F5PC9vIkYqgNSAk5yU4gWV2SaLwT+JBsOydzNcPRwuY+z6+gkCw6eqGSQx0kZQfE/d+xMaJiStH+uUD6tNyCA4nIps5JpeEaNLzWjwuE4EaOuOCC8yZyLh7x8W0AsdEdkeEQEz1GLYgJmwnS0954PSECxwS5zQyqMB2vJSg==; ak_bmsc=72FC22728A28C7F3DC94376C9C3554F3~000000000000000000000000000000~YAAQTXZiaOhghx96AQAAWha6KQwV7/I2tiArb8nII7tGbF20EEmg3lH9OsRYJE/tzpyywpT3eeD2Td/IVRmVmurRrQ5Vp+YIs++zYbvI4XVQKXRtmv7mM0lDDhqOeR+dpM4CRBdT7Vv9eNYchfzID5cd7xzgYLqubfP70LR0zfaTubjfFdjMvawyOIQwAPfaErrsX0iiEpmy4G/nonxdTGB3bBQ7kAYoVpWAtAon8QoYoRx5HCjFzE/c7TKqZ/iDXcUq5tvZjptzNfnF5iChraxr5wlkiDh9eyWWCk/rTJozMeI1tX1HwH+In8iv4T7cTtZJh5MRq+IH/bXrwJtty51jvGu8B5mCaDUsHZKWRtEJpJMp7ta5o1nHrAQuiymFNRMEIPDqxDLbAA==; XSRF-TOKEN=8335e11a-8c68-483e-9a80-2d7f79856b44; AMCV_0A19F13A598372E90A495D62%40AdobeOrg=-408604571%7CMCIDTS%7C18799%7CMCMID%7C59607436576250353666502608938647993204%7CMCAID%7CNONE%7CMCOPTOUT-1624204908s%7CNONE%7CvVersion%7C4.6.0; bm_sv=A5945B0C79D7AA8B5A878BCDD21707C7~uii8SKBBdtZtDcwf0sopMCO3ldEL6L8p4F4PuMBF2DW9zw1kwgQO3b0dRgkojZaH5rNoMisLrt4Fz4c+JeL/zj4YKNr/3DOgt3wK7/tUvEZZPpLFFMlSPjel2Y7D3Gt7N8JMW42t9Gj2gAXFO4nCFA==; _hulu_metrics_context_v1_=%7B%22cookie_session_guid%22%3A%228d152d975a317957990c7d80022cd87c%22%2C%22referrer_url%22%3A%22%22%2C%22curr_page_uri%22%3A%22app%3Awatch%22%2C%22primary_ref_page_uri%22%3A%22urn%3Ahulu%3Ahub%3Ahome%22%2C%22secondary_ref_page_uri%22%3Anull%2C%22curr_page_type%22%3A%22watch%22%2C%22primary_ref_page_type%22%3A%22home%22%2C%22secondary_ref_page_type%22%3Anull%2C%22secondary_ref_click%22%3Anull%2C%22primary_ref_click%22%3A%22Demon%20Slayer%20Kimetsu%20No%20Yaiba%22%2C%22primary_ref_collection%22%3A%22282%22%2C%22secondary_ref_collection%22%3Anull%2C%22primary_ref_collection_source%22%3A%22heimdall%22%2C%22secondary_ref_collection_source%22%3Anull%2C%22ref_collection_position%22%3A0%7D; metrics_tracker_session_manager=%7B%22session_id%22%3A%22051BDA2EDE200DE1E7C1E48FBE9BE703-4040a0e1-3ec2-4b14-b7d2-85115b386d30%22%2C%22creation_time%22%3A1624197697579%2C%22visit_count%22%3A1%2C%22session_seq%22%3A11%2C%22idle_time%22%3A1624197708635%7D\n{\"query\":\"mutation refreshToken($input: RefreshTokenInput!) {\\n            refreshToken(refreshToken: $input) {\\n                activeSession {\\n                    sessionId\\n                }\\n            }\\n        }\",\"variables\":{\"input\":{\"refreshToken\":\"eyJ6aXAiOiJERUYiLCJraWQiOiJLcTYtNW1Ia3BxOXdzLUtsSUUyaGJHYkRIZFduRjU3UjZHY1h6aFlvZi04IiwiY3R5IjoiSldUIiwiZW5jIjoiQzIwUCIsImFsZyI6ImRpciJ9..qnHbUZQXPtEv5n5s.kKfiwHFTT-u6b92OIDNGE8HBbJd_1EsCx3apaucHSvIj44bbLVvwDWkvtnD67qgtqY08_ohitM51nawYdPbLOE45hA2j7d7kaksYtDcj3rVg_Vys_Mxjs_HMdIDn8MdY71SqRl-f9848oDdzTrEswgW-fYqzWjY1Ur7mwmqDTumWWDhzjWCl_-aQWJuHp4CD8UdvfcIr7kVAbJR4_NL0VN69cYCMnBslxo53zNSc8v2MWYsENLxvpU1RD38EoJRjAWCYYmToeqNkxehEemn_qDJNxLdilp40ca4xcLCOCQgjl2hQnLDL4SFj6lIo1Gz2nWI8SOtQECia3Y9Rm778rjfPt2VYsmGux_rnRjipjiCnSSjy2VEjxT_BYFTpfxMU51OqlaqUB5v7xpjAmiQCA20GZcmJBizrHwjRKyFLn7b5jM72_MUE84jruVbgt7PR8XqFAmn76w8SnkgIdZvmnyHHsDB66jGBaRRY91Jrnx5RMyavsYTQRb_JMmCXvNZY1DDpAMuRTOB98uoRdhGsdItROJgKrdY_dyNlmp3BU9mi64Q76JQsRQpqgpIHJParHprX1CSGURa57SP0lo8RUPzwW2c0XJWITicYwvSbpuMGKwFyHECvY7-LqFwrS_VgQzYwv7zxJ_DGSqGGkwLpUAtJgBQ5tZEIeDFUVy_hy8O0Pxu35sHwmOqE3YGvUZagDKU6A_WfXNgP5HX9A9myI57iGxDte2xIEdVjsrEi8OaDByJ9epWMJH97yovmRjw9sv6eJIlfRqHmNi7p9ZFP2seOSaMweVqY4U7gGdNL33kh4VN8QrDD7Iz9l9499lmrB5Zr6jOVDSYJ20PhfXyLWG8WyxY8bPg2kI9xCO295ngti58cyKRteZ_mmGaFoaJjQGNHYKBoFzDCWts4o7T8jgjsMarTx30BjAr09ruyp5zd6C743iaVPQKdhA3gx8gPWlQhpHDoqXx5c6gosiS_Ty8i_pS5eGHuVqiz9Qv4Nb-uZXqgvcWEcbHYxc76dx9sLUzulOY66AdWUWXQc6G6z-XbgkwmK-BpaQrVZcoAhU_Ci69SBHD_XR9eN6XOAUVh2Bsu7Bgb8q5fFJn7gyz2oqujBWpDKM8hraV_IPU8geGOPUQyMetepIFY1SjeOqVM_h6ng9LehWQ0aQiPOn-BDlXhEVCjQDtAmxrW6tj0Hc7InvURGUaL97y22A2MvNh9eaG_h6ztzpm-iBdCkOzdOihrzXZqZmHhaoZADxYgZTL0UDnXBH6CtPuWiBfTycQbXNyjM9nm4y0EsDl14asIUqymDzTq-S9ZYfu2QzLMZXaw4khhLZ7bYsHNaIWd22phXhUxIJQb3Sb_xOlaWlEjWebTw-wWKJ9KQEcroSuKCIKoLLhb21qw_WX8-IN0qlWrk02UJJR1Kz7hoa0Da5QF_yQgkqk4dE_JNn9IxnQOFAEKqASmwORW-3bAH2SqEUhSAUvOIZjVAgO721aUF5TDgiEjLJvfQcEWmETjcHFFwzfnoKVjMRFOj_zHwrsZ-OoPst0D14GT4cs26M4yi7d15Pt28v2CNSHWug4gh89IT5EtkV_wlzuTyBc9hgronT5kN7v6-DHyYPSDh4vfT4BckqzMsi4QxsMBUZ0hYBojdODoW40ckBTncizRf5QqObzfk3WSmv4y7zoseY4c4erV7k6O_O9_op8mcRcVyMDiWchMT4SmrFRP-tBbTmIkp18F3YUIOdPzY1m40c3DdkaP-TrQlNsbpfPSpZURKT97BoZjy3JGofFr--zNvBHUS1lxXxkOkLXCEHSudnBsqSoc5HJP7-qjwfoqCV76E_iZ9zjWNrNN6X3NnYmRfZ8dso8KZfaGBf6u_90qpg6ZBtRa9GzyWS9qBJRi95408UqK5R9m5IDZtQ2B_J7yhMBN2MWXuyBmJoq0_a1BUGXmF50z4avcHbQWQdD-Yf76z1xMD1pLvgb8b9rk6wxxda94XnyvOmX8orY8O7wJXEKSygDm2nKE4gBK1apAi0SbKdXcAdnQfh4hbfcJDmWr5NBjjdKuOzJdnTI8voEFQB4BiUsP2t40orQRFxu-gdmpnGGiApgsojcvCx25ev1TFK0845-NmK0rY2Nvd9o_NBulWnSsWJcGKzODceqi3qaxoQ9U90tOFnipqvJ3lu3BTJWqMedQSrQDzbiUegeAjQd9w2Fz7LLNDSY0V4UO764pCVDJKJBLByifkOuFrkiUJwBVe8LIb7raFYO9P9HOUw1fmcH1rsZajPuWQJQBaQMLm-gon7uJpORZUuYyovv4MBWtJDl_VmIUI4mPwRL8YrzfvuzdMKwCw6ri6zKCbxkBsocALSVBJACPIRvvi4SgeV_F--efROD0.UjQJShStniHGbdb5WwRH5Q\"}}}\n{\"query\":\"mutation refreshToken($input: RefreshTokenInput!) {\\n            refreshToken(refreshToken: $input) {\\n                activeSession {\\n                    sessionId\\n                }\\n            }\\n        }\",\"variables\":{\"input\":{\"refreshToken\":\"ILOVEDISNEY\"}}}\ngrant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Atoken-exchange&latitude=0&longitude=0&platform=browser&subject_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJlM2NkMTFmYi1hZjA4LTQ4Y2UtOGJmNi03ZTVhNDdmNDdmMzUiLCJhdWQiOiJ1cm46YmFtdGVjaDpzZXJ2aWNlOnRva2VuIiwibmJmIjoxNjMwNDIxNDc0LCJpc3MiOiJ1cm46YmFtdGVjaDpzZXJ2aWNlOmRldmljZSIsImV4cCI6MjQ5NDQyMTQ3NCwiaWF0IjoxNjMwNDIxNDc0LCJqdGkiOiI0NGFhNWE4NC01YzdmLTQzOTMtYWFjNy1kN2U5OGM3MzU2NmMifQ.3NIPcVfIPgkDsJJoBD2RS9MK86i-xuIABKcYNl1oCCJJ2bzTiK8cgdPZNrpah7EMzIesVQdVet4Epxpy99jw2w&subject_token_type=urn%3Abamtech%3Aparams%3Aoauth%3Atoken-type%3Adevice\n{\"query\":\"mutation registerDevice($input: RegisterDeviceInput!) {\\n            registerDevice(registerDevice: $input) {\\n                grant {\\n                    grantType\\n                    assertion\\n                }\\n            }\\n        }\",\"variables\":{\"input\":{\"deviceFamily\":\"browser\",\"applicationRuntime\":\"chrome\",\"deviceProfile\":\"windows\",\"deviceLanguage\":\"zh-CN\",\"attributes\":{\"osDeviceIds\":[],\"manufacturer\":\"microsoft\",\"model\":null,\"operatingSystem\":\"windows\",\"operatingSystemVersion\":\"10.0\",\"browserName\":\"chrome\",\"browserVersion\":\"96.0.4664\"}}}}\ngrant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Atoken-exchange&latitude=0&longitude=0&platform=browser&subject_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJjYWJmMDNkMi0xMmEyLTQ0YjYtODJjOS1lOWJkZGNhMzYwNjkiLCJhdWQiOiJ1cm46YmFtdGVjaDpzZXJ2aWNlOnRva2VuIiwibmJmIjoxNjMyMjMwMTY4LCJpc3MiOiJ1cm46YmFtdGVjaDpzZXJ2aWNlOmRldmljZSIsImV4cCI6MjQ5NjIzMDE2OCwiaWF0IjoxNjMyMjMwMTY4LCJqdGkiOiJhYTI0ZWI5Yi1kNWM4LTQ5ODctYWI4ZS1jMDdhMWVhMDgxNzAifQ.8RQ-44KqmctKgdXdQ7E1DmmWYq0gIZsQw3vRL8RvCtrM_hSEHa-CkTGIFpSLpJw8sMlmTUp5ZGwvhghX-4HXfg&subject_token_type=urn%3Abamtech%3Aparams%3Aoauth%3Atoken-type%3Adevice\nauthorization: Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJiOTNlZDQyZC00M2RiLTQzNDMtYThjZi1mZTk4YTY2NzVkNTgiLCJpc3MiOiJMaWdodGJveCIsImV4cCI6MTY2NDk3NTExMSwiZGV2aWNlSWQiOiI2NTgzZWU4YmM0YzQwZmJhOTgzMGQ0ZTYwNTM5ZDAzNSIsInBsYXRmb3JtIjoiV2ViIiwiYnJvd3NlciI6IkNocm9tZSIsInRhYiI6MTYzMzQxNzUwNzY4OSwib3MiOiJXaW5kb3dzIDEwLjAiLCJpYXQiOjE2MzM0MTc1MTF9.E7qgVpqsJEPsh0B3lgK9x8hPs7nQ_Bio_FCt1H8mB4XCPrsand4kHVHA5LpiB5rvBLfOaSfJKru-gKuMlgLJhg\n{\"operationName\":\"UpdateAccount\",\"variables\":{\"input\":{\"name\":\"Reid\",\"surname\":\"Hershel\",\"email\":\"restriction.check@gmail.com\",\"password\":\"restriction.check\",\"optIns\":[{\"id\":\"RECEIVE_UPDATES\",\"subscribed\":false}]}},\"query\":\"mutation UpdateAccount($input: AccountInput!, $pin: String) {\\n  account(input: $input, pin: $pin) {\\n    ...AccountFields\\n    __typename\\n  }\\n}\\n\\nfragment AccountFields on Account {\\n  name\\n  surname\\n  email\\n  selectedProfile\\n  hasPin\\n  optIns {\\n    id\\n    text\\n    subscribed\\n    __typename\\n  }\\n  phoneNumbers {\\n    home\\n    mobile\\n    __typename\\n  }\\n  session {\\n    token\\n    __typename\\n  }\\n  profiles {\\n    ...ProfileFields\\n    __typename\\n  }\\n  settings {\\n    requirePinForSwitchProfile\\n    requirePinForManageProfile\\n    tvodPurchaseRestriction\\n    playbackQuality {\\n      ...PlaybackQualityFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  purchases {\\n    totalItems\\n    items {\\n      ...PurchaseFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  cpCustomerID\\n  subscription {\\n    ...SubscriptionInformationFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment ProfileFields on Profile {\\n  id\\n  name\\n  email\\n  isKid\\n  isDefault\\n  needToConfigure\\n  ageGroup\\n  avatar {\\n    uri\\n    id\\n    __typename\\n  }\\n  closedCaption\\n  maxRating\\n  mobile\\n  __typename\\n}\\n\\nfragment PlaybackQualityFields on PlaybackQuality {\\n  wifi {\\n    id\\n    label\\n    description\\n    bitrate\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment PurchaseFields on Purchase {\\n  id\\n  profile {\\n    id\\n    name\\n    __typename\\n  }\\n  contentItem {\\n    ...ContentItemLightFields\\n    __typename\\n  }\\n  product {\\n    id\\n    name\\n    renewable\\n    __typename\\n  }\\n  total\\n  startAvailable\\n  endAvailable\\n  endViewable\\n  __typename\\n}\\n\\nfragment ContentItemLightFields on ContentItem {\\n  id\\n  isRental\\n  ... on Title {\\n    id\\n    ldId\\n    path\\n    title\\n    year\\n    rating {\\n      id\\n      rating\\n      __typename\\n    }\\n    genres\\n    duration\\n    images {\\n      uri\\n      __typename\\n    }\\n    createdAt\\n    products {\\n      id\\n      originalPrice\\n      currentPrice\\n      name\\n      currency\\n      __typename\\n    }\\n    isComingSoon\\n    videoExtras {\\n      ...VideoExtraFields\\n      __typename\\n    }\\n    tile {\\n      image\\n      header\\n      subHeader\\n      badge\\n      contentItem {\\n        id\\n        __typename\\n      }\\n      sortValues {\\n        key\\n        value\\n        __typename\\n      }\\n      playbackInfo {\\n        status\\n        numberMinutesRemaining\\n        numberMinutesWatched\\n        position\\n        __typename\\n      }\\n      rentalInfo {\\n        secondsLeftToStartWatching\\n        secondsLeftToWatch\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  ... on Series {\\n    title\\n    ldId\\n    genres\\n    path\\n    products {\\n      id\\n      originalPrice\\n      currentPrice\\n      name\\n      currency\\n      __typename\\n    }\\n    seasons {\\n      id\\n      episodes {\\n        id\\n        title\\n        seasonNumber\\n        episodeNumber\\n        __typename\\n      }\\n      __typename\\n    }\\n    images {\\n      uri\\n      __typename\\n    }\\n    createdAt\\n    isComingSoon\\n    videoExtras {\\n      ...VideoExtraFields\\n      __typename\\n    }\\n    tile {\\n      image\\n      header\\n      subHeader\\n      badge\\n      contentItem {\\n        id\\n        __typename\\n      }\\n      sortValues {\\n        key\\n        value\\n        __typename\\n      }\\n      playbackInfo {\\n        status\\n        numberMinutesRemaining\\n        numberMinutesWatched\\n        position\\n        __typename\\n      }\\n      rentalInfo {\\n        secondsLeftToStartWatching\\n        secondsLeftToWatch\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  ... on Episode {\\n    episodeNumber\\n    seasonNumber\\n    series {\\n      id\\n      title\\n      path\\n      seasons {\\n        episodes {\\n          id\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  ... on VideoExtra {\\n    contentItems {\\n      id\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment VideoExtraFields on VideoExtra {\\n  id\\n  description\\n  images {\\n    id\\n    uri\\n    height\\n    width\\n    __typename\\n  }\\n  tile {\\n    image\\n    __typename\\n  }\\n  start\\n  end\\n  title\\n  videoEncodings {\\n    ...VideoEncodingFields\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment VideoEncodingFields on VideoEncoding {\\n  id\\n  format\\n  referenceId\\n  size\\n  offlineEnabled\\n  __typename\\n}\\n\\nfragment SubscriptionInformationFields on SubscriptionInformation {\\n  currentSubscription {\\n    name\\n    sku\\n    endsAt\\n    startsAt\\n    price\\n    features\\n    order {\\n      voucherCode\\n      __typename\\n    }\\n    subscriptionGAType\\n    promotion {\\n      name\\n      price\\n      isSpark\\n      isFreeTrial\\n      expiration\\n      isBridgingOfferPromotion\\n      __typename\\n    }\\n    evSubscriptionStatus\\n    __typename\\n  }\\n  upcomingSubscription {\\n    name\\n    sku\\n    endsAt\\n    startsAt\\n    price\\n    order {\\n      voucherCode\\n      __typename\\n    }\\n    subscriptionGAType\\n    promotion {\\n      name\\n      price\\n      isSpark\\n      isFreeTrial\\n      expiration\\n      __typename\\n    }\\n    evSubscriptionStatus\\n    __typename\\n  }\\n  upcomingFinalBillSubscription {\\n    sku\\n    evSubscriptionStatus\\n    __typename\\n  }\\n  nextPayment {\\n    date\\n    method\\n    type\\n    price\\n    __typename\\n  }\\n  recentPayments {\\n    date\\n    method\\n    type\\n    price\\n    __typename\\n  }\\n  status\\n  renewalStatus\\n  recurringVouchers {\\n    orderDetails {\\n      productName\\n      voucherCode\\n      status\\n      promotion {\\n        endDate\\n        id\\n        amount\\n        isExhausted\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n  dcbSubscriptionInfo {\\n    partnerName\\n    __typename\\n  }\\n  __typename\\n}\\n\"}\nmid=Y1_jFQALAAESwuLfrykcPY44iiIn; ig_did=B755589F-4987-4BED-B6F1-B74C38CDDA46; ig_nrcb=1; fbm_124024574287414=base_domain=.instagram.com; csrftoken=jAYfEUaIhg4JesaPCEw1HaMv20FJ6SZZ; datr=TZ5UYyACdSfnzT1SNWn1oIYE; ds_user_id=56650907390; sessionid=56650907390%3AiPRndDWmoZupKb%3A9%3AAYdsMadARTC9Sys8SCMeMpjqQFWyhnMaVCgPfPyCGw; dpr=1.25\n"
        },
        {
          "name": "reference",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}