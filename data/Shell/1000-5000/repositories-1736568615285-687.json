{
  "metadata": {
    "timestamp": 1736568615285,
    "page": 687,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "micha/jsawk",
      "stars": 1384,
      "defaultBranch": "master",
      "files": [
        {
          "name": "PKGBUILD",
          "type": "blob",
          "size": 0.626953125,
          "content": "# Contributor: Andreas B. Wagner <AndreasBWagner@pointfree.net>\npkgname=jsawk-git\npkgver=1.3.2.gc031fef\npkgrel=1\npkgdesc=\"like awk, but for JSON\"\narch=('i686' 'x86_64')\nurl=\"http://github.com/micha/jsawk\"\nsource=('jsawk-git::git+https://github.com/micha/jsawk.git#branch=master')\nmd5sums=('SKIP')\nlicense=('unknown')\ndepends=('js')\nmakedepends=('git')\nprovides=('jsawk')\nconflicts=('jsawk')\n\npkgver() {\n  cd \"${srcdir}/${pkgname}\"\n  git describe | sed 's/^v//;s/-/./g'\n}\n\npackage() {\n  cd \"$SRCDEST\"\n  install -dm755 \"${pkgdir}\"/usr/bin/\n  install -Dm755 jsawk \"${pkgdir}\"/usr/bin/jsawk\n  \n  echo \"export JS=/usr/bin/js24\" >> /etc/jsawkrc\n} \n"
        },
        {
          "name": "README.markdown",
          "type": "blob",
          "size": 16.177734375,
          "content": "# Quick Start\n\n*If you use Jsawk and want to help maintain it, please let me know and I'll add you to the repo.*\n\n[Updated underscore.js to v1.8.2.](http://documentcloud.github.com/underscore/)\n\nJsawk is like awk, but for JSON. You work with an array of JSON objects\nread from stdin, filter them using JavaScript to produce a results array\nthat is printed to stdout. You can use this as a filter to manipulate data\nfrom a REST JSON web service, for example, in a shell script. Also, you can\nsuppress JSON output and use the built-in printing functions to translate\nyour JSON input to other formats and send that to stdout, to be piped to\nother processes. You can load JavaScript libraries on the command line to\nincrease your processing power, and other things.\n\n## Setup\n\n[This is a great blog post on setup and basic use of jsawk and resty, thanks\nto @johnattebury.](http://johnattebury.com/blog/2011/06/spidermonkey-jsawk-resty-on-snow-leopard/)\n\nYou need to have the `js` interpreter installed. Your best bet is to navigate to\nthe mozilla site [download and build the source](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey)\nbased on the maintained documentation there.\n\nReady? Go.\n\n## Install\n\nFirst, get the jsawk script:\n\n      curl -L http://github.com/micha/jsawk/raw/master/jsawk > jsawk\n\nThen make it executable and put it somewhere in your path:\n\n      chmod 755 jsawk && mv jsawk ~/bin/\n\n## Use\n\nNow you can do some stuff with JSON data. Here's an example using data from\na REST service that serves JSON (we use [resty](http://github.com/micha/resty)\nto do the HTTP requests):\n\n      resty http://example.com:8080/data*.json\n      GET /people/47 | jsawk 'this.favoriteColor = \"blue\"' | PUT /people/47\n\nThis would do a `GET` request on the resource `/data/people/47.json`, which\nwould result in a JSON object. Then jsawk takes the JSON via stdin and for\neach JSON object it runs the little snippet of JavaScript, setting the\n`favoriteColor` property to `\"blue\"`, in this case. The modified JSON is then\noutput via stdout to `resty` again, which does the `PUT` request to update\nthe resource.\n\n## Usage\n\n      jsawk [OPTIONS] [SCRIPT]\n\n      OPTIONS\n      -------\n\n      -b <script> | -a <script>\n          Run the specified snippet of JavaScript before (-b) or after (-a)\n          processing JSON input. The `this` object is set to the whole JSON\n          array or object. This is used to preprocess (-b) or postprocess\n          (-a) the JSON array before or after the main script is applied.\n          This option can be specified multiple times to define multiple\n          before/after scripts, which will be applied in the order they\n          appeared on the command line.\n\n      -f <file>\n          Load and run the specified JavaScript file prior to processing\n          JSON. This option can be specified multiple times to load multiple\n          JavaScript libraries.\n\n      -h\n          Print short help page and exit.\n\n      -i <file>\n          Read input JSON from `file` instead of stdin.\n\n      -j <jsbin>\n          Specify path to spidermonkey js binary.\n\n      -n\n          Suppress printing of JSON result set.\n\n      -q <query>\n          Filter JSON through the specified JSONQuery query. If multiple\n          '-q' options are specified then each query will be performed in\n          turn, in the order in which they appeared on the command line.\n\n      -s <string>\n          Use `string` for input JSON instead of stdin.\n\n      -v <name=value>\n          Set global variable `name` to `value` in the script environment.\n\n      SCRIPT\n      ------\n\n      This is a snippet of JavaScript that will be run on each element\n      of the input array, if input is a JSON array, or on the object if\n      it's an object. For each iteration, the `this` object is set to the\n      current element.\n\n### Using A Specific JS Binary\n\nThe path to the `js` binary can be specified in two different ways:\n\n* the `-j` command line option (see above)\n* the `JS` environment variable\n\nAdditionally, jsawk will `source` the following files at startup if they exist:\n\n* _/etc/jsawkrc_\n* _~/.jsawkrc_\n\nThese files can be used to export the `JS` environment variable.\n\nJsawk Scripting\n===============\n\nJsawk is intended to serve the purpose that is served by `awk` in the shell\nenvironment, but instead of working with words and lines of text, it works\nwith JavaScript objects and arrays of objects.\n\nIn awk, a text file is split into an array of \"records\", each of which being\nan array of \"fields\". The awk script that is specified on the command line is\nrun once for each record in the array, with the `$1`, `$2`, etc. variables\nset to the various fields in the record. The awk script can set variables,\nperform calculations, do various text-munging things, and print output. This\nprinting capablity makes awk into a filter, taking text input, transforming\nit record by record, printing out the resulting modified records at the end.\n\nJsawk is similar, but in jsawk records are elements of the JSON input array\n(if the input was a single object then there is a single record consisting\nof that object). The jsawk script is run once for each record object, with\nthe `this` object set to the current record. So here the properties of the\nrecord object are equivalent to the `$1`, `$2`, etc. in awk. The jsawk\nscript can then modify the record, perform calculations, do things. However,\ninstead of printing the modified record, the modified record is `return`ed.\nAt then end, if the `-n` option was not specified, the resulting array is\nprinted as JSON to stdout.\n\nJsawk JavaScript Environment\n----------------------------\n\nJsawk uses the Spidermonkey JavaScript interpreter, so you have access to all\nof the Spidermonkey functions and whatnot. Additionally, the following\nfunctions and properties are available from within a jsawk script:\n\n      PROPERTIES\n      ----------\n\n        window\n            The global object.\n\n        IS\n            The input set.\n\n        RS\n            The result set.\n\n        _   The underscore.js object.\n\n        $_\n            The current record index (corresponding to the index of the\n            element in the IS array).\n\n        $$\n            The current record object (global variable corresponding to the\n            `this` object in the script scope).\n\n      METHODS\n      -------\n\n        forEach(array, string)\n            Compiles 'string' into a function and iterates over the 'array',\n            running the function once for each element. The function has\n            access to the special variables 'index' and 'item' which are,\n            respectively, the array index and the array element. The 'this'\n            object is set to the array element each time the function runs.\n\n            params: Array array (array to iterate over)\n                    String string (the function source)\n            return: void\n\n        get()\n            Get the next record from the input set. This will prevent jsawk\n            from iterating over that record.\n\n            params: void\n            return: Object|Array|Number|String (the next input record)\n\n        put(record)\n            Push 'record' onto the input set so that jsawk will iterate over\n            it next.\n\n            params: Object|Array|Number|String record (the record to push)\n            return: void\n\n        json(thing)\n            Serialize 'thing' to JSON string.\n\n            params: Object|Array|Number|String thing (what to serialize)\n            return: String (the resulting JSON string)\n\n        uniq(array)\n            Return array of distinct elements.\n\n            params: Array array (the input array)\n            return: Array (the resulting array of distinct elements)\n\n        Q(query, thing)\n            Runs the JSONQuery 'query' on the JSON input 'thing'.\n\n            params: String query (the JSONQuery)\n                    Array|Object thing (the JSON input)\n            return: Array|Object (result of running the query)\n\n        err(thing)\n            Print arguments (JSON encoded, if necessary) to stderr.\n\n            params: Object|Array|Number|String thing (what to encode)\n            return: void\n\n        out(thing)\n            Print arguments (JSON encoded, if necessary) to stdout.\n\n            params: Object|Array|Number|String thing (what to encode)\n            return: void\n\nErrors and Output\n-----------------\n\nErrors in parsing scripts, JSON queries, or JSON input, and errors executing\nscripts will all result in the appropriate error message on stderr, and\nimmediate exit with a non-zero exit status. Normal output is written to\nstdout, unless the `-n` option is specified. In that case only output from\nthe `out()` or `err()` functions and error messages will appear.\n\nExit Status\n-----------\n\nOn successful completion jsawk returns an exit status of `0`. If an error\nocurred and execution was aborted, a non-zero exit status will be returned.\n\n### Exit Status\n\n  * **0** Successful completion.\n  * **1** Command line parsing error.\n  * **2** JSON parsing error.\n  * **3** Script error.\n  * **4** JSONQuery parsing error.\n  * **5** JSON stringify error.\n\nJSONQuery\n=========\n\nJsawk supports JSONQuery with the `-q` option. You can do almost anything\nwith JSONQuery that you can do with jsawk scripts, to include selecting\nrecords, drilling down into records, mapping input sets to output sets as\na sort of filter, modifying the JSON, sorting, whathaveyou. JSONQuery is\nto JSONPath is to JSON, as XQuery is to XPath is to XML. Here are some\nJSONQuery resources to get started with this powerful tool:\n\n  * [The persevere JSONQuery documentation](http://docs.persvr.org/documentation/jsonquery)\n  * [Kris Zyp's intro to JSONQuery in dojo](http://www.sitepen.com/blog/2008/07/16/jsonquery-data-querying-beyond-jsonpath/)\n\nExamples\n========\n\nFor the following examples, suppose there is a file `/tmp/t`, with the\nfollowing contents:\n\n      [\n        {\n          \"first\"   : \"trevor\",\n          \"last\"    : \"wellington\",\n          \"from\"    : \"england\",\n          \"age\"     : 52,\n          \"sports\"  : [ \"rugby\", \"badmitton\", \"snooker\" ]\n        },\n        {\n          \"first\"   : \"yoni\",\n          \"last\"    : \"halevi\",\n          \"from\"    : \"israel\",\n          \"age\"     : 26,\n          \"sports\"  : [ \"soccer\", \"windsurfing\" ]\n        },\n        {\n          \"first\"   : \"cory\",\n          \"last\"    : \"parker\",\n          \"from\"    : \"united states\",\n          \"age\"     : 31,\n          \"sports\"  : [ \"windsurfing\", \"baseball\", \"extreeeeme kayaking\" ]\n        }\n      ]\n\nThis is going to be the input JSON text we will use in the examples.\n\nJSON-to-JSON Transformations\n----------------------------\n\nThese examples transform the input JSON, modifying it and returning the\nmodified JSON as output on stdout to be piped elsewhere. Transformations of\nthis type are generally done with a script that follows one of these simple\npatterns:\n\n  1. Modify the `this` object in place (no `return` statement necessary).\n  1. Create a replacement object for each record, and `return` it at the end\n     of each iteration.\n\nThese patterns leave the records in JSON format, and they are automatically\nprinted to stdout without the use of the `out()` function.\n\n### The Identity Mapping\n\nThis is the identity transformation: it doesn't really do anything other\nthan pass the input straight through.\n\n      cat /tmp/t | jsawk\n\nYou should get the input back out, unmolested.\n\n### Increment Everyone's Age\n\nLooks like it's everyone's birthday today. We'll take the JSON input and\nincrement each object's `age` property, sending the resulting JSON output to\nstdout.\n\n      cat /tmp/t | jsawk 'this.age++'\n\nNotice that there is no need to write `return this` in the script. That is\nassumed---the runtime does it for you automatically if you don't explicitly\ncall `return` yourself.\n\n### Flatten The \"Sports\" Array Of Each Element\n\nHere we modify the input by replacing the `sports` property of each object\nin the input array (the `sports` property is itself an array of strings) with\na single string containing all of the person's sports, separated by commas.\n\n      cat /tmp/t | jsawk 'this.sports = this.sports.join(\",\")'\n\nNotice how altering the `this` object in place alters the result array\naccordingly.\n\n### Extract Only The \"Age\" Property Of Each Element ###\n\nNormally we would modify the input set in place, by manipulating the `this`\nobject, which would be returned by default after each iteration. However,\nsometimes we want only a single field from the input set.\n\n      cat /tmp/t | jsawk 'return this.age'\n\nPutting a return statement in the script expression causes the default\nreturn of `this` to be short-circuited, replacing this element with the\nreturn value in the output set.\n\n### JSON Grep: Select Certain Elements From Input ###\n\nSometimes you want to use awk to select certain records from the input set,\nleaving the rest unchanged. This is like the `grep` pattern of operation. In\nthis example we will extract all the records corresponding to people who are\nover 30 years old.\n\n      cat /tmp/t | jsawk 'if (this.age <= 30) return null'\n\nThis demonstrates how you can remove records from the results array by\nreturning a null value from your script.\n\nAggregate Functions\n-------------------\n\nBefore and after scripts can be used to manipulate the JSON working set as\na whole, somewhat similar to the way aggregate functions like `SUM()` or\n`COUNT()` work in SQL. These types of operations fall under a few basic\npatterns.\n\n  1. Use a before script (`-b` option) to do things to the JSON input before\n     transformations are done by the main script.\n  2. Use an after script (`-a` option) to do things to the JSON result set\n     after all transformations are completed by the main script.\n\n### Count How Many Elements Are In The Input Array\n\nHere we use an after script to modify the result set, like this:\n\n      cat /tmp/t | jsawk -a 'return this.length'\n\nNotice how the entire results array is replaced by the single number and\nprinted to stdout.\n\n### Get a Sorted, Unique List of All Sports\n\nThis is an example of a JSON-to-JSON transformation that uses an after\nscript to manipulate the result set. It should produce an array of all\nsports played by the people in the input set, sorted lexically, and with\nall duplicate elements removed.\n\n      cat /tmp/t \\\n        | jsawk 'RS=RS.concat(this.sports); return null' -a 'return uniq(RS).sort()'\n\nNote the use of `return null` to prevent jsawk from adding the `this`\nobject to the result set automatically. Instead we manipulated the result\nset explicitly, enabling each iteration to add more that one element to\nit---the entire `sports` array. Also, notice the use of an after script\nto sort the result set and remove duplicates.\n\nJSON-to-Text Transformations\n----------------------------\n\nIn the following examples we will be manipulating the JSON input to\nproduce text output instead of JSON, for cases where you will be extracting\ninformation from a JSON data source and piping it to non JSON-accepting\nprocesses elsewhere.\n\nIt is frequently useful to supress the regular JSON output when doing\nJSON-to-Text transformations like these, with the `-n` option.\n\n### Get A List Of All Sports\n\nThis one generates a list of all the sports that are played by the people\nin our little JSON list, one per line, without duplicate entries, sorted\nalphabetically.\n\n      cat /tmp/t \\\n        | jsawk -a 'return this.join(\"\\n\")' 'return this.sports.join(\"\\n\")' \\\n        | sort -u\n\nNotice the use of JSONQuery to drill down into the JSON objects, an \"after\"\nscript to collate the results, and everything piped to the Unix `sort`\ntool to remove duplicate entries and do the lexical ordering.  This is\nstarting to show the power of the awk-like behavior now.\n\n### Return a Boolean Value\n\nSometimes you want to just check for a certain condition in a shell script.\nSuppose you want to know if there are any people over the age of 50 in the\nJSON input array, like this:\n\n      jsawk -n 'if (this.age > 50) quit(1)' < /tmp/t || echo \"We have people over 50 here---naptime in effect.\"\n\nWe suppress normal result set output with `-n` and use the `quit()` function\nto return a value in the exit status. The default exit status is, of course,\nzero for success.\n\nJSON Pretty-Printing\n====================\n\n[Resty](http://github.com/micha/resty) includes the `pp` script that will\npretty-print JSON for you. You just need to install the JSON perl module\nfrom CPAN. Use it like this:\n\n      GET /blogs.json | jsawk -q '..author' | pp\n"
        },
        {
          "name": "jsawk",
          "type": "blob",
          "size": 60.880859375,
          "content": "#!/usr/bin/env bash\n\n#\n# Jsawk: It's like awk for JSON, in bash.\n#\n# Fork me on github:\n#   http://github.com/micha/jsawk\n#\n# Author:\n#   Micha Niskin <micha@thinkminimo.com>\n#   Copyright 2009, no rights reserved, other than as required by the\n#   licenses of the incorporated software below.\n#\n\nTMP1=`mktemp /tmp/tmp.XXXXXX`\nTMP2=`mktemp /tmp/tmp.XXXXXX`\n\ntrap \"rm -f $TMP1 $TMP2\" SIGINT SIGTERM SIGHUP SIGQUIT\n\ncat <<'__END__' > $TMP1\n\nwindow    = this;     // the global object\nwindow.IS = [];       // the input set\nwindow.RS = [];       // the result set\nwindow.$_ = {};       // the current element index\nwindow.$$ = {};       // the current element\n\n\n/**\nsprintf() for JavaScript 0.7-beta1\nhttp://www.diveintojavascript.com/projects/javascript-sprintf\n\nCopyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of sprintf() for JavaScript nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL Alexandru Marasteanu BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nChangelog:\n2010.09.06 - 0.7-beta1\n  - features: vsprintf, support for named placeholders\n  - enhancements: format cache, reduced global namespace pollution\n\n2010.05.22 - 0.6:\n - reverted to 0.4 and fixed the bug regarding the sign of the number 0\n Note:\n Thanks to Raphael Pigulla <raph (at] n3rd [dot) org> (http://www.n3rd.org/)\n who warned me about a bug in 0.5, I discovered that the last update was\n a regress. I appologize for that.\n\n2010.05.09 - 0.5:\n - bug fix: 0 is now preceeded with a + sign\n - bug fix: the sign was not at the right position on padded results (Kamal Abdali)\n - switched from GPL to BSD license\n\n2007.10.21 - 0.4:\n - unit test and patch (David Baird)\n\n2007.09.17 - 0.3:\n - bug fix: no longer throws exception on empty paramenters (Hans Pufal)\n\n2007.09.11 - 0.2:\n - feature: added argument swapping\n\n2007.04.03 - 0.1:\n - initial release\n**/\n\nvar sprintf = (function() {\n\tfunction get_type(variable) {\n\t\treturn Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();\n\t}\n\tfunction str_repeat(input, multiplier) {\n\t\tfor (var output = []; multiplier > 0; output[--multiplier] = input) {/* do nothing */}\n\t\treturn output.join('');\n\t}\n\n\tvar str_format = function() {\n\t\tif (!str_format.cache.hasOwnProperty(arguments[0])) {\n\t\t\tstr_format.cache[arguments[0]] = str_format.parse(arguments[0]);\n\t\t}\n\t\treturn str_format.format.call(null, str_format.cache[arguments[0]], arguments);\n\t};\n\n\tstr_format.format = function(parse_tree, argv) {\n\t\tvar cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;\n\t\tfor (i = 0; i < tree_length; i++) {\n\t\t\tnode_type = get_type(parse_tree[i]);\n\t\t\tif (node_type === 'string') {\n\t\t\t\toutput.push(parse_tree[i]);\n\t\t\t}\n\t\t\telse if (node_type === 'array') {\n\t\t\t\tmatch = parse_tree[i]; // convenience purposes only\n\t\t\t\tif (match[2]) { // keyword argument\n\t\t\t\t\targ = argv[cursor];\n\t\t\t\t\tfor (k = 0; k < match[2].length; k++) {\n\t\t\t\t\t\tif (!arg.hasOwnProperty(match[2][k])) {\n\t\t\t\t\t\t\tthrow(sprintf('[sprintf] property \"%s\" does not exist', match[2][k]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\targ = arg[match[2][k]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (match[1]) { // positional argument (explicit)\n\t\t\t\t\targ = argv[match[1]];\n\t\t\t\t}\n\t\t\t\telse { // positional argument (implicit)\n\t\t\t\t\targ = argv[cursor++];\n\t\t\t\t}\n\n\t\t\t\tif (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {\n\t\t\t\t\tthrow(sprintf('[sprintf] expecting number but found %s', get_type(arg)));\n\t\t\t\t}\n\t\t\t\tswitch (match[8]) {\n\t\t\t\t\tcase 'b': arg = arg.toString(2); break;\n\t\t\t\t\tcase 'c': arg = String.fromCharCode(arg); break;\n\t\t\t\t\tcase 'd': arg = parseInt(arg, 10); break;\n\t\t\t\t\tcase 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;\n\t\t\t\t\tcase 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;\n\t\t\t\t\tcase 'o': arg = arg.toString(8); break;\n\t\t\t\t\tcase 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;\n\t\t\t\t\tcase 'u': arg = Math.abs(arg); break;\n\t\t\t\t\tcase 'x': arg = arg.toString(16); break;\n\t\t\t\t\tcase 'X': arg = arg.toString(16).toUpperCase(); break;\n\t\t\t\t}\n\t\t\t\targ = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);\n\t\t\t\tpad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';\n\t\t\t\tpad_length = match[6] - String(arg).length;\n\t\t\t\tpad = match[6] ? str_repeat(pad_character, pad_length) : '';\n\t\t\t\toutput.push(match[5] ? arg + pad : pad + arg);\n\t\t\t}\n\t\t}\n\t\treturn output.join('');\n\t};\n\n\tstr_format.cache = {};\n\n\tstr_format.parse = function(fmt) {\n\t\tvar _fmt = fmt, match = [], parse_tree = [], arg_names = 0;\n\t\twhile (_fmt) {\n\t\t\tif ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {\n\t\t\t\tparse_tree.push(match[0]);\n\t\t\t}\n\t\t\telse if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {\n\t\t\t\tparse_tree.push('%');\n\t\t\t}\n\t\t\telse if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n\t\t\t\tif (match[2]) {\n\t\t\t\t\targ_names |= 1;\n\t\t\t\t\tvar field_list = [], replacement_field = match[2], field_match = [];\n\t\t\t\t\tif ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n\t\t\t\t\t\tfield_list.push(field_match[1]);\n\t\t\t\t\t\twhile ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n\t\t\t\t\t\t\tif ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n\t\t\t\t\t\t\t\tfield_list.push(field_match[1]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {\n\t\t\t\t\t\t\t\tfield_list.push(field_match[1]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthrow('[sprintf] huh?');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow('[sprintf] huh?');\n\t\t\t\t\t}\n\t\t\t\t\tmatch[2] = field_list;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\targ_names |= 2;\n\t\t\t\t}\n\t\t\t\tif (arg_names === 3) {\n\t\t\t\t\tthrow('[sprintf] mixing positional and named placeholders is not (yet) supported');\n\t\t\t\t}\n\t\t\t\tparse_tree.push(match);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow('[sprintf] huh?');\n\t\t\t}\n\t\t\t_fmt = _fmt.substring(match[0].length);\n\t\t}\n\t\treturn parse_tree;\n\t};\n\n\treturn str_format;\n})();\n\nvar vsprintf = function(fmt, argv) {\n\targv.unshift(fmt);\n\treturn sprintf.apply(null, argv);\n};\n\n//     Underscore.js 1.8.2\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n(function(){function n(n){function t(t,r,e,u,i,o){for(;i>=0&&o>i;i+=n){var a=u?u[i]:i;e=r(e,t[a],a,t)}return e}return function(r,e,u,i){e=d(e,i,4);var o=!w(r)&&m.keys(r),a=(o||r).length,c=n>0?0:a-1;return arguments.length<3&&(u=r[o?o[c]:c],c+=n),t(r,e,u,o,c,a)}}function t(n){return function(t,r,e){r=b(r,e);for(var u=null!=t&&t.length,i=n>0?0:u-1;i>=0&&u>i;i+=n)if(r(t[i],i,t))return i;return-1}}function r(n,t){var r=S.length,e=n.constructor,u=m.isFunction(e)&&e.prototype||o,i=\"constructor\";for(m.has(n,i)&&!m.contains(t,i)&&t.push(i);r--;)i=S[r],i in n&&n[i]!==u[i]&&!m.contains(t,i)&&t.push(i)}var e=this,u=e._,i=Array.prototype,o=Object.prototype,a=Function.prototype,c=i.push,l=i.slice,f=o.toString,s=o.hasOwnProperty,p=Array.isArray,h=Object.keys,v=a.bind,g=Object.create,y=function(){},m=function(n){return n instanceof m?n:this instanceof m?void(this._wrapped=n):new m(n)};\"undefined\"!=typeof exports?(\"undefined\"!=typeof module&&module.exports&&(exports=module.exports=m),exports._=m):e._=m,m.VERSION=\"1.8.2\";var d=function(n,t,r){if(t===void 0)return n;switch(null==r?3:r){case 1:return function(r){return n.call(t,r)};case 2:return function(r,e){return n.call(t,r,e)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,i){return n.call(t,r,e,u,i)}}return function(){return n.apply(t,arguments)}},b=function(n,t,r){return null==n?m.identity:m.isFunction(n)?d(n,t,r):m.isObject(n)?m.matcher(n):m.property(n)};m.iteratee=function(n,t){return b(n,t,1/0)};var x=function(n,t){return function(r){var e=arguments.length;if(2>e||null==r)return r;for(var u=1;e>u;u++)for(var i=arguments[u],o=n(i),a=o.length,c=0;a>c;c++){var l=o[c];t&&r[l]!==void 0||(r[l]=i[l])}return r}},_=function(n){if(!m.isObject(n))return{};if(g)return g(n);y.prototype=n;var t=new y;return y.prototype=null,t},j=Math.pow(2,53)-1,w=function(n){var t=n&&n.length;return\"number\"==typeof t&&t>=0&&j>=t};m.each=m.forEach=function(n,t,r){t=d(t,r);var e,u;if(w(n))for(e=0,u=n.length;u>e;e++)t(n[e],e,n);else{var i=m.keys(n);for(e=0,u=i.length;u>e;e++)t(n[i[e]],i[e],n)}return n},m.map=m.collect=function(n,t,r){t=b(t,r);for(var e=!w(n)&&m.keys(n),u=(e||n).length,i=Array(u),o=0;u>o;o++){var a=e?e[o]:o;i[o]=t(n[a],a,n)}return i},m.reduce=m.foldl=m.inject=n(1),m.reduceRight=m.foldr=n(-1),m.find=m.detect=function(n,t,r){var e;return e=w(n)?m.findIndex(n,t,r):m.findKey(n,t,r),e!==void 0&&e!==-1?n[e]:void 0},m.filter=m.select=function(n,t,r){var e=[];return t=b(t,r),m.each(n,function(n,r,u){t(n,r,u)&&e.push(n)}),e},m.reject=function(n,t,r){return m.filter(n,m.negate(b(t)),r)},m.every=m.all=function(n,t,r){t=b(t,r);for(var e=!w(n)&&m.keys(n),u=(e||n).length,i=0;u>i;i++){var o=e?e[i]:i;if(!t(n[o],o,n))return!1}return!0},m.some=m.any=function(n,t,r){t=b(t,r);for(var e=!w(n)&&m.keys(n),u=(e||n).length,i=0;u>i;i++){var o=e?e[i]:i;if(t(n[o],o,n))return!0}return!1},m.contains=m.includes=m.include=function(n,t,r){return w(n)||(n=m.values(n)),m.indexOf(n,t,\"number\"==typeof r&&r)>=0},m.invoke=function(n,t){var r=l.call(arguments,2),e=m.isFunction(t);return m.map(n,function(n){var u=e?t:n[t];return null==u?u:u.apply(n,r)})},m.pluck=function(n,t){return m.map(n,m.property(t))},m.where=function(n,t){return m.filter(n,m.matcher(t))},m.findWhere=function(n,t){return m.find(n,m.matcher(t))},m.max=function(n,t,r){var e,u,i=-1/0,o=-1/0;if(null==t&&null!=n){n=w(n)?n:m.values(n);for(var a=0,c=n.length;c>a;a++)e=n[a],e>i&&(i=e)}else t=b(t,r),m.each(n,function(n,r,e){u=t(n,r,e),(u>o||u===-1/0&&i===-1/0)&&(i=n,o=u)});return i},m.min=function(n,t,r){var e,u,i=1/0,o=1/0;if(null==t&&null!=n){n=w(n)?n:m.values(n);for(var a=0,c=n.length;c>a;a++)e=n[a],i>e&&(i=e)}else t=b(t,r),m.each(n,function(n,r,e){u=t(n,r,e),(o>u||1/0===u&&1/0===i)&&(i=n,o=u)});return i},m.shuffle=function(n){for(var t,r=w(n)?n:m.values(n),e=r.length,u=Array(e),i=0;e>i;i++)t=m.random(0,i),t!==i&&(u[i]=u[t]),u[t]=r[i];return u},m.sample=function(n,t,r){return null==t||r?(w(n)||(n=m.values(n)),n[m.random(n.length-1)]):m.shuffle(n).slice(0,Math.max(0,t))},m.sortBy=function(n,t,r){return t=b(t,r),m.pluck(m.map(n,function(n,r,e){return{value:n,index:r,criteria:t(n,r,e)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||r===void 0)return 1;if(e>r||e===void 0)return-1}return n.index-t.index}),\"value\")};var A=function(n){return function(t,r,e){var u={};return r=b(r,e),m.each(t,function(e,i){var o=r(e,i,t);n(u,e,o)}),u}};m.groupBy=A(function(n,t,r){m.has(n,r)?n[r].push(t):n[r]=[t]}),m.indexBy=A(function(n,t,r){n[r]=t}),m.countBy=A(function(n,t,r){m.has(n,r)?n[r]++:n[r]=1}),m.toArray=function(n){return n?m.isArray(n)?l.call(n):w(n)?m.map(n,m.identity):m.values(n):[]},m.size=function(n){return null==n?0:w(n)?n.length:m.keys(n).length},m.partition=function(n,t,r){t=b(t,r);var e=[],u=[];return m.each(n,function(n,r,i){(t(n,r,i)?e:u).push(n)}),[e,u]},m.first=m.head=m.take=function(n,t,r){return null==n?void 0:null==t||r?n[0]:m.initial(n,n.length-t)},m.initial=function(n,t,r){return l.call(n,0,Math.max(0,n.length-(null==t||r?1:t)))},m.last=function(n,t,r){return null==n?void 0:null==t||r?n[n.length-1]:m.rest(n,Math.max(0,n.length-t))},m.rest=m.tail=m.drop=function(n,t,r){return l.call(n,null==t||r?1:t)},m.compact=function(n){return m.filter(n,m.identity)};var k=function(n,t,r,e){for(var u=[],i=0,o=e||0,a=n&&n.length;a>o;o++){var c=n[o];if(w(c)&&(m.isArray(c)||m.isArguments(c))){t||(c=k(c,t,r));var l=0,f=c.length;for(u.length+=f;f>l;)u[i++]=c[l++]}else r||(u[i++]=c)}return u};m.flatten=function(n,t){return k(n,t,!1)},m.without=function(n){return m.difference(n,l.call(arguments,1))},m.uniq=m.unique=function(n,t,r,e){if(null==n)return[];m.isBoolean(t)||(e=r,r=t,t=!1),null!=r&&(r=b(r,e));for(var u=[],i=[],o=0,a=n.length;a>o;o++){var c=n[o],l=r?r(c,o,n):c;t?(o&&i===l||u.push(c),i=l):r?m.contains(i,l)||(i.push(l),u.push(c)):m.contains(u,c)||u.push(c)}return u},m.union=function(){return m.uniq(k(arguments,!0,!0))},m.intersection=function(n){if(null==n)return[];for(var t=[],r=arguments.length,e=0,u=n.length;u>e;e++){var i=n[e];if(!m.contains(t,i)){for(var o=1;r>o&&m.contains(arguments[o],i);o++);o===r&&t.push(i)}}return t},m.difference=function(n){var t=k(arguments,!0,!0,1);return m.filter(n,function(n){return!m.contains(t,n)})},m.zip=function(){return m.unzip(arguments)},m.unzip=function(n){for(var t=n&&m.max(n,\"length\").length||0,r=Array(t),e=0;t>e;e++)r[e]=m.pluck(n,e);return r},m.object=function(n,t){for(var r={},e=0,u=n&&n.length;u>e;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r},m.indexOf=function(n,t,r){var e=0,u=n&&n.length;if(\"number\"==typeof r)e=0>r?Math.max(0,u+r):r;else if(r&&u)return e=m.sortedIndex(n,t),n[e]===t?e:-1;if(t!==t)return m.findIndex(l.call(n,e),m.isNaN);for(;u>e;e++)if(n[e]===t)return e;return-1},m.lastIndexOf=function(n,t,r){var e=n?n.length:0;if(\"number\"==typeof r&&(e=0>r?e+r+1:Math.min(e,r+1)),t!==t)return m.findLastIndex(l.call(n,0,e),m.isNaN);for(;--e>=0;)if(n[e]===t)return e;return-1},m.findIndex=t(1),m.findLastIndex=t(-1),m.sortedIndex=function(n,t,r,e){r=b(r,e,1);for(var u=r(t),i=0,o=n.length;o>i;){var a=Math.floor((i+o)/2);r(n[a])<u?i=a+1:o=a}return i},m.range=function(n,t,r){arguments.length<=1&&(t=n||0,n=0),r=r||1;for(var e=Math.max(Math.ceil((t-n)/r),0),u=Array(e),i=0;e>i;i++,n+=r)u[i]=n;return u};var O=function(n,t,r,e,u){if(!(e instanceof t))return n.apply(r,u);var i=_(n.prototype),o=n.apply(i,u);return m.isObject(o)?o:i};m.bind=function(n,t){if(v&&n.bind===v)return v.apply(n,l.call(arguments,1));if(!m.isFunction(n))throw new TypeError(\"Bind must be called on a function\");var r=l.call(arguments,2),e=function(){return O(n,e,t,this,r.concat(l.call(arguments)))};return e},m.partial=function(n){var t=l.call(arguments,1),r=function(){for(var e=0,u=t.length,i=Array(u),o=0;u>o;o++)i[o]=t[o]===m?arguments[e++]:t[o];for(;e<arguments.length;)i.push(arguments[e++]);return O(n,r,this,this,i)};return r},m.bindAll=function(n){var t,r,e=arguments.length;if(1>=e)throw new Error(\"bindAll must be passed function names\");for(t=1;e>t;t++)r=arguments[t],n[r]=m.bind(n[r],n);return n},m.memoize=function(n,t){var r=function(e){var u=r.cache,i=\"\"+(t?t.apply(this,arguments):e);return m.has(u,i)||(u[i]=n.apply(this,arguments)),u[i]};return r.cache={},r},m.delay=function(n,t){var r=l.call(arguments,2);return setTimeout(function(){return n.apply(null,r)},t)},m.defer=m.partial(m.delay,m,1),m.throttle=function(n,t,r){var e,u,i,o=null,a=0;r||(r={});var c=function(){a=r.leading===!1?0:m.now(),o=null,i=n.apply(e,u),o||(e=u=null)};return function(){var l=m.now();a||r.leading!==!1||(a=l);var f=t-(l-a);return e=this,u=arguments,0>=f||f>t?(o&&(clearTimeout(o),o=null),a=l,i=n.apply(e,u),o||(e=u=null)):o||r.trailing===!1||(o=setTimeout(c,f)),i}},m.debounce=function(n,t,r){var e,u,i,o,a,c=function(){var l=m.now()-o;t>l&&l>=0?e=setTimeout(c,t-l):(e=null,r||(a=n.apply(i,u),e||(i=u=null)))};return function(){i=this,u=arguments,o=m.now();var l=r&&!e;return e||(e=setTimeout(c,t)),l&&(a=n.apply(i,u),i=u=null),a}},m.wrap=function(n,t){return m.partial(t,n)},m.negate=function(n){return function(){return!n.apply(this,arguments)}},m.compose=function(){var n=arguments,t=n.length-1;return function(){for(var r=t,e=n[t].apply(this,arguments);r--;)e=n[r].call(this,e);return e}},m.after=function(n,t){return function(){return--n<1?t.apply(this,arguments):void 0}},m.before=function(n,t){var r;return function(){return--n>0&&(r=t.apply(this,arguments)),1>=n&&(t=null),r}},m.once=m.partial(m.before,2);var F=!{toString:null}.propertyIsEnumerable(\"toString\"),S=[\"valueOf\",\"isPrototypeOf\",\"toString\",\"propertyIsEnumerable\",\"hasOwnProperty\",\"toLocaleString\"];m.keys=function(n){if(!m.isObject(n))return[];if(h)return h(n);var t=[];for(var e in n)m.has(n,e)&&t.push(e);return F&&r(n,t),t},m.allKeys=function(n){if(!m.isObject(n))return[];var t=[];for(var e in n)t.push(e);return F&&r(n,t),t},m.values=function(n){for(var t=m.keys(n),r=t.length,e=Array(r),u=0;r>u;u++)e[u]=n[t[u]];return e},m.mapObject=function(n,t,r){t=b(t,r);for(var e,u=m.keys(n),i=u.length,o={},a=0;i>a;a++)e=u[a],o[e]=t(n[e],e,n);return o},m.pairs=function(n){for(var t=m.keys(n),r=t.length,e=Array(r),u=0;r>u;u++)e[u]=[t[u],n[t[u]]];return e},m.invert=function(n){for(var t={},r=m.keys(n),e=0,u=r.length;u>e;e++)t[n[r[e]]]=r[e];return t},m.functions=m.methods=function(n){var t=[];for(var r in n)m.isFunction(n[r])&&t.push(r);return t.sort()},m.extend=x(m.allKeys),m.extendOwn=m.assign=x(m.keys),m.findKey=function(n,t,r){t=b(t,r);for(var e,u=m.keys(n),i=0,o=u.length;o>i;i++)if(e=u[i],t(n[e],e,n))return e},m.pick=function(n,t,r){var e,u,i={},o=n;if(null==o)return i;m.isFunction(t)?(u=m.allKeys(o),e=d(t,r)):(u=k(arguments,!1,!1,1),e=function(n,t,r){return t in r},o=Object(o));for(var a=0,c=u.length;c>a;a++){var l=u[a],f=o[l];e(f,l,o)&&(i[l]=f)}return i},m.omit=function(n,t,r){if(m.isFunction(t))t=m.negate(t);else{var e=m.map(k(arguments,!1,!1,1),String);t=function(n,t){return!m.contains(e,t)}}return m.pick(n,t,r)},m.defaults=x(m.allKeys,!0),m.clone=function(n){return m.isObject(n)?m.isArray(n)?n.slice():m.extend({},n):n},m.tap=function(n,t){return t(n),n},m.isMatch=function(n,t){var r=m.keys(t),e=r.length;if(null==n)return!e;for(var u=Object(n),i=0;e>i;i++){var o=r[i];if(t[o]!==u[o]||!(o in u))return!1}return!0};var E=function(n,t,r,e){if(n===t)return 0!==n||1/n===1/t;if(null==n||null==t)return n===t;n instanceof m&&(n=n._wrapped),t instanceof m&&(t=t._wrapped);var u=f.call(n);if(u!==f.call(t))return!1;switch(u){case\"[object RegExp]\":case\"[object String]\":return\"\"+n==\"\"+t;case\"[object Number]\":return+n!==+n?+t!==+t:0===+n?1/+n===1/t:+n===+t;case\"[object Date]\":case\"[object Boolean]\":return+n===+t}var i=\"[object Array]\"===u;if(!i){if(\"object\"!=typeof n||\"object\"!=typeof t)return!1;var o=n.constructor,a=t.constructor;if(o!==a&&!(m.isFunction(o)&&o instanceof o&&m.isFunction(a)&&a instanceof a)&&\"constructor\"in n&&\"constructor\"in t)return!1}r=r||[],e=e||[];for(var c=r.length;c--;)if(r[c]===n)return e[c]===t;if(r.push(n),e.push(t),i){if(c=n.length,c!==t.length)return!1;for(;c--;)if(!E(n[c],t[c],r,e))return!1}else{var l,s=m.keys(n);if(c=s.length,m.keys(t).length!==c)return!1;for(;c--;)if(l=s[c],!m.has(t,l)||!E(n[l],t[l],r,e))return!1}return r.pop(),e.pop(),!0};m.isEqual=function(n,t){return E(n,t)},m.isEmpty=function(n){return null==n?!0:w(n)&&(m.isArray(n)||m.isString(n)||m.isArguments(n))?0===n.length:0===m.keys(n).length},m.isElement=function(n){return!(!n||1!==n.nodeType)},m.isArray=p||function(n){return\"[object Array]\"===f.call(n)},m.isObject=function(n){var t=typeof n;return\"function\"===t||\"object\"===t&&!!n},m.each([\"Arguments\",\"Function\",\"String\",\"Number\",\"Date\",\"RegExp\",\"Error\"],function(n){m[\"is\"+n]=function(t){return f.call(t)===\"[object \"+n+\"]\"}}),m.isArguments(arguments)||(m.isArguments=function(n){return m.has(n,\"callee\")}),\"function\"!=typeof/./&&\"object\"!=typeof Int8Array&&(m.isFunction=function(n){return\"function\"==typeof n||!1}),m.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},m.isNaN=function(n){return m.isNumber(n)&&n!==+n},m.isBoolean=function(n){return n===!0||n===!1||\"[object Boolean]\"===f.call(n)},m.isNull=function(n){return null===n},m.isUndefined=function(n){return n===void 0},m.has=function(n,t){return null!=n&&s.call(n,t)},m.noConflict=function(){return e._=u,this},m.identity=function(n){return n},m.constant=function(n){return function(){return n}},m.noop=function(){},m.property=function(n){return function(t){return null==t?void 0:t[n]}},m.propertyOf=function(n){return null==n?function(){}:function(t){return n[t]}},m.matcher=m.matches=function(n){return n=m.extendOwn({},n),function(t){return m.isMatch(t,n)}},m.times=function(n,t,r){var e=Array(Math.max(0,n));t=d(t,r,1);for(var u=0;n>u;u++)e[u]=t(u);return e},m.random=function(n,t){return null==t&&(t=n,n=0),n+Math.floor(Math.random()*(t-n+1))},m.now=Date.now||function(){return(new Date).getTime()};var M={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#x27;\",\"`\":\"&#x60;\"},N=m.invert(M),I=function(n){var t=function(t){return n[t]},r=\"(?:\"+m.keys(n).join(\"|\")+\")\",e=RegExp(r),u=RegExp(r,\"g\");return function(n){return n=null==n?\"\":\"\"+n,e.test(n)?n.replace(u,t):n}};m.escape=I(M),m.unescape=I(N),m.result=function(n,t,r){var e=null==n?void 0:n[t];return e===void 0&&(e=r),m.isFunction(e)?e.call(n):e};var B=0;m.uniqueId=function(n){var t=++B+\"\";return n?n+t:t},m.templateSettings={evaluate:/<%([\\s\\S]+?)%>/g,interpolate:/<%=([\\s\\S]+?)%>/g,escape:/<%-([\\s\\S]+?)%>/g};var T=/(.)^/,R={\"'\":\"'\",\"\\\\\":\"\\\\\",\"\\r\":\"r\",\"\\n\":\"n\",\"\\u2028\":\"u2028\",\"\\u2029\":\"u2029\"},q=/\\\\|'|\\r|\\n|\\u2028|\\u2029/g,K=function(n){return\"\\\\\"+R[n]};m.template=function(n,t,r){!t&&r&&(t=r),t=m.defaults({},t,m.templateSettings);var e=RegExp([(t.escape||T).source,(t.interpolate||T).source,(t.evaluate||T).source].join(\"|\")+\"|$\",\"g\"),u=0,i=\"__p+='\";n.replace(e,function(t,r,e,o,a){return i+=n.slice(u,a).replace(q,K),u=a+t.length,r?i+=\"'+\\n((__t=(\"+r+\"))==null?'':_.escape(__t))+\\n'\":e?i+=\"'+\\n((__t=(\"+e+\"))==null?'':__t)+\\n'\":o&&(i+=\"';\\n\"+o+\"\\n__p+='\"),t}),i+=\"';\\n\",t.variable||(i=\"with(obj||{}){\\n\"+i+\"}\\n\"),i=\"var __t,__p='',__j=Array.prototype.join,\"+\"print=function(){__p+=__j.call(arguments,'');};\\n\"+i+\"return __p;\\n\";try{var o=new Function(t.variable||\"obj\",\"_\",i)}catch(a){throw a.source=i,a}var c=function(n){return o.call(this,n,m)},l=t.variable||\"obj\";return c.source=\"function(\"+l+\"){\\n\"+i+\"}\",c},m.chain=function(n){var t=m(n);return t._chain=!0,t};var z=function(n,t){return n._chain?m(t).chain():t};m.mixin=function(n){m.each(m.functions(n),function(t){var r=m[t]=n[t];m.prototype[t]=function(){var n=[this._wrapped];return c.apply(n,arguments),z(this,r.apply(m,n))}})},m.mixin(m),m.each([\"pop\",\"push\",\"reverse\",\"shift\",\"sort\",\"splice\",\"unshift\"],function(n){var t=i[n];m.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),\"shift\"!==n&&\"splice\"!==n||0!==r.length||delete r[0],z(this,r)}}),m.each([\"concat\",\"join\",\"slice\"],function(n){var t=i[n];m.prototype[n]=function(){return z(this,t.apply(this._wrapped,arguments))}}),m.prototype.value=function(){return this._wrapped},m.prototype.valueOf=m.prototype.toJSON=m.prototype.value,m.prototype.toString=function(){return\"\"+this._wrapped},\"function\"==typeof define&&define.amd&&define(\"underscore\",[],function(){return m})}).call(this);\n//# sourceMappingURL=underscore-min.map\n\n(function() {\n\n/*\nCopyright Jason E. Smith 2008 Licensed under the Apache License, Version 2.0 (the \"License\");\nYou may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n*/\n\n\n/*\n* CREDITS:\n* Thanks to Kris Zyp from SitePen for contributing his source for\n* a standalone port of JSONQuery (from the dojox.json.query module).\n*\n* OVERVIEW:\n* JSONQuery.js is a standalone port of the dojox.json.query module. It is intended as\n* a dropin solution with zero dependencies. JSONQuery is intended to succeed and improve upon\n* the JSONPath api (http://goessner.net/articles/JsonPath/) which offers rich powerful\n* querying capabilities similar to those of XQuery.\n*\n* EXAMPLES / USAGE:\n* see http://www.sitepen.com/blog/2008/07/16/jsonquery-data-querying-beyond-jsonpath/\n*\n*     *Ripped from original source.\n*         JSONQuery(queryString,object)\n        and\n        JSONQuery(queryString)(object)\n        always return identical results. The first one immediately evaluates, the second one returns a\n        function that then evaluates the object.\n\n      example:\n        JSONQuery(\"foo\",{foo:\"bar\"})\n        This will return \"bar\".\n\n      example:\n        evaluator = JSONQuery(\"?foo='bar'&rating>3\");\n        This creates a function that finds all the objects in an array with a property\n        foo that is equals to \"bar\" and with a rating property with a value greater\n        than 3.\n        evaluator([{foo:\"bar\",rating:4},{foo:\"baz\",rating:2}])\n        This returns:\n        {foo:\"bar\",rating:4}\n\n      example:\n        evaluator = JSONQuery(\"$[?price<15.00][\\rating][0:10]\");\n        This finds objects in array with a price less than 15.00 and sorts then\n        by rating, highest rated first, and returns the first ten items in from this\n        filtered and sorted list.\n\n\n\texample:\n\t\tvar data = {customers:[\n\t\t\t{name:\"Susan\", purchases:29},\n\t\t\t{name:\"Kim\", purchases:150},\n\t\t\t{name:\"Jake\", purchases:27}\n\t\t]};\n\n\t\tvar results = json.JSONQuery(\"$.customers[?purchases > 21 & name='Jake'][\\\\purchases]\",data);\n\t\tresults\n\n\t\treturns customers sorted by higest number of purchases to lowest.\n\n*/\n\n\n\n    function map(arr, fun /*, thisp*/){\n        var len = arr.length;\n        if (typeof fun != \"function\")\n            throw new TypeError();\n\n        var res = new Array(len);\n        var thisp = arguments[2];\n        for (var i = 0; i < len; i++) {\n            if (i in arr)\n                res[i] = fun.call(thisp, arr[i], i, arr);\n        }\n\n        return res;\n    }\n\n   function filter(arr, fun /*, thisp*/){\n        var len = arr.length;\n        if (typeof fun != \"function\")\n            throw new TypeError();\n\n        var res = new Array();\n        var thisp = arguments[2];\n        for (var i = 0; i < len; i++) {\n            if (i in arr) {\n                var val = arr[i]; // in case fun mutates this\n                if (fun.call(thisp, val, i, arr))\n                    res.push(val);\n            }\n        }\n\n        return res;\n    };\n\n\n  function slice(obj,start,end,step){\n    // handles slice operations: [3:6:2]\n    var len=obj.length,results = [];\n    end = end || len;\n    start = (start < 0) ? Math.max(0,start+len) : Math.min(len,start);\n    end = (end < 0) ? Math.max(0,end+len) : Math.min(len,end);\n     for(var i=start; i<end; i+=step){\n       results.push(obj[i]);\n     }\n    return results;\n  }\n  function expand(obj,name){\n    // handles ..name, .*, [*], [val1,val2], [val]\n    // name can be a property to search for, undefined for full recursive, or an array for picking by index\n    var results = [];\n    function walk(obj){\n      if(name){\n        if(name===true && !(obj instanceof Array)){\n          //recursive object search\n          results.push(obj);\n        }else if(obj[name]){\n          // found the name, add to our results\n          results.push(obj[name]);\n        }\n      }\n      for(var i in obj){\n        var val = obj[i];\n        if(!name){\n          // if we don't have a name we are just getting all the properties values (.* or [*])\n          results.push(val);\n        }else if(val && typeof val == 'object'){\n\n          walk(val);\n        }\n      }\n    }\n    if(name instanceof Array){\n      // this is called when multiple items are in the brackets: [3,4,5]\n      if(name.length==1){\n        // this can happen as a result of the parser becoming confused about commas\n        // in the brackets like [@.func(4,2)]. Fixing the parser would require recursive\n        // analsys, very expensive, but this fixes the problem nicely.\n        return obj[name[0]];\n      }\n      for(var i = 0; i < name.length; i++){\n        results.push(obj[name[i]]);\n      }\n    }else{\n      // otherwise we expanding\n      walk(obj);\n    }\n    return results;\n  }\n\n  function distinctFilter(array, callback){\n    // does the filter with removal of duplicates in O(n)\n    var outArr = [];\n    var primitives = {};\n    for(var i=0,l=array.length; i<l; ++i){\n      var value = array[i];\n      if(callback(value, i, array)){\n        if(!primitives[JSON.stringify(value)]){\n          // with primitives we prevent duplicates by putting it in a map\n          primitives[JSON.stringify(value)] = true;\n          outArr.push(value);\n        }\n      }\n    }\n    for(i=0,l=outArr.length; i<l; ++i){\n      // cleanup the marker properties\n      if(outArr[i]){\n        delete outArr[i].__included;\n      }\n    }\n    return outArr;\n  }\n  window.uniq = function(array) {\n    return distinctFilter(array, function() { return true; });\n  };\n  var JSONQuery = function(/*String*/query,/*Object?*/obj){\n    // summary:\n    //     Performs a JSONQuery on the provided object and returns the results.\n    //     If no object is provided (just a query), it returns a \"compiled\" function that evaluates objects\n    //     according to the provided query.\n    // query:\n    //     Query string\n    //   obj:\n    //     Target of the JSONQuery\n    //\n    //  description:\n    //    JSONQuery provides a comprehensive set of data querying tools including filtering,\n    //    recursive search, sorting, mapping, range selection, and powerful expressions with\n    //    wildcard string comparisons and various operators. JSONQuery generally supersets\n    //     JSONPath and provides syntax that matches and behaves like JavaScript where\n    //     possible.\n    //\n    //    JSONQuery evaluations begin with the provided object, which can referenced with\n    //     $. From\n    //     the starting object, various operators can be successively applied, each operating\n    //     on the result of the last operation.\n    //\n    //     Supported Operators:\n    //     --------------------\n    //    * .property - This will return the provided property of the object, behaving exactly\n    //     like JavaScript.\n    //     * [expression] - This returns the property name/index defined by the evaluation of\n    //     the provided expression, behaving exactly like JavaScript.\n    //    * [?expression] - This will perform a filter operation on an array, returning all the\n    //     items in an array that match the provided expression. This operator does not\n    //    need to be in brackets, you can simply use ?expression, but since it does not\n    //    have any containment, no operators can be used afterwards when used\n    //     without brackets.\n    //    * [^?expression] - This will perform a distinct filter operation on an array. This behaves\n    //    as [?expression] except that it will remove any duplicate values/objects from the\n    //    result set.\n    //     * [/expression], [\\expression], [/expression, /expression] - This performs a sort\n    //     operation on an array, with sort based on the provide expression. Multiple comma delimited sort\n    //     expressions can be provided for multiple sort orders (first being highest priority). /\n    //    indicates ascending order and \\ indicates descending order\n    //     * [=expression] - This performs a map operation on an array, creating a new array\n    //    with each item being the evaluation of the expression for each item in the source array.\n    //    * [start:end:step] - This performs an array slice/range operation, returning the elements\n    //    from the optional start index to the optional end index, stepping by the optional step number.\n    //     * [expr,expr] - This a union operator, returning an array of all the property/index values from\n    //     the evaluation of the comma delimited expressions.\n    //     * .* or [*] - This returns the values of all the properties of the current object.\n    //     * $ - This is the root object, If a JSONQuery expression does not being with a $,\n    //     it will be auto-inserted at the beginning.\n    //     * @ - This is the current object in filter, sort, and map expressions. This is generally\n    //     not necessary, names are auto-converted to property references of the current object\n    //     in expressions.\n    //     *  ..property - Performs a recursive search for the given property name, returning\n    //     an array of all values with such a property name in the current object and any subobjects\n    //     * expr = expr - Performs a comparison (like JS's ==). When comparing to\n    //     a string, the comparison string may contain wildcards * (matches any number of\n    //     characters) and ? (matches any single character).\n    //     * expr ~ expr - Performs a string comparison with case insensitivity.\n    //    * ..[?expression] - This will perform a deep search filter operation on all the objects and\n    //     subobjects of the current data. Rather than only searching an array, this will search\n    //     property values, arrays, and their children.\n    //    * $1,$2,$3, etc. - These are references to extra parameters passed to the query\n    //    function or the evaluator function.\n    //    * +, -, /, *, &, |, %, (, ), <, >, <=, >=, != - These operators behave just as they do\n    //     in JavaScript.\n    //\n    //\n    //\n    //   |  dojox.json.query(queryString,object)\n    //     and\n    //   |  dojox.json.query(queryString)(object)\n    //     always return identical results. The first one immediately evaluates, the second one returns a\n    //     function that then evaluates the object.\n    //\n    //   example:\n    //   |  dojox.json.query(\"foo\",{foo:\"bar\"})\n    //     This will return \"bar\".\n    //\n    //  example:\n    //  |  evaluator = dojox.json.query(\"?foo='bar'&rating>3\");\n    //    This creates a function that finds all the objects in an array with a property\n    //    foo that is equals to \"bar\" and with a rating property with a value greater\n    //    than 3.\n    //  |  evaluator([{foo:\"bar\",rating:4},{foo:\"baz\",rating:2}])\n    //     This returns:\n    //   |  {foo:\"bar\",rating:4}\n    //\n    //  example:\n    //   |  evaluator = dojox.json.query(\"$[?price<15.00][\\rating][0:10]\");\n    //      This finds objects in array with a price less than 15.00 and sorts then\n    //     by rating, highest rated first, and returns the first ten items in from this\n    //     filtered and sorted list.\n    tokens = [];\n    var depth = 0;\n    var str = [];\n    query = query.replace(/\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'|[\\[\\]]/g,function(t){\n      depth += t == '[' ? 1 : t == ']' ? -1 : 0; // keep track of bracket depth\n      return (t == ']' && depth > 0) ? '`]' : // we mark all the inner brackets as skippable\n          (t.charAt(0) == '\"' || t.charAt(0) == \"'\") ? \"`\" + (str.push(t) - 1) :// and replace all the strings\n            t;\n    });\n    var prefix = '';\n    function call(name){\n      // creates a function call and puts the expression so far in a parameter for a call\n      prefix = name + \"(\" + prefix;\n    }\n    function makeRegex(t,a,b,c,d){\n      // creates a regular expression matcher for when wildcards and ignore case is used\n      return str[d].match(/[\\*\\?]/) || c == '~' ?\n          \"/^\" + str[d].substring(1,str[d].length-1).replace(/\\\\([btnfr\\\\\"'])|([^\\w\\*\\?])/g,\"\\\\$1$2\").replace(/([\\*\\?])/g,\".$1\") + (c == '~' ? '$/i' : '$/') + \".test(\" + a + \")\" :\n          t;\n    }\n    query.replace(/(\\]|\\)|push|pop|shift|splice|sort|reverse)\\s*\\(/,function(){\n      throw new Error(\"Unsafe function call\");\n    });\n\n    query = query.replace(/([^=]=)([^=])/g,\"$1=$2\"). // change the equals to comparisons\n      replace(/@|(\\.\\s*)?[a-zA-Z\\$_]+(\\s*:)?/g,function(t){\n        return t.charAt(0) == '.' ? t : // leave .prop alone\n          t == '@' ? \"$obj\" :// the reference to the current object\n          (t.match(/:|^(\\$|Math|true|false|null)$/) ? \"\" : \"$obj.\") + t; // plain names should be properties of root... unless they are a label in object initializer\n      }).\n      replace(/\\.?\\.?\\[(`\\]|[^\\]])*\\]|\\?.*|\\.\\.([\\w\\$_]+)|\\.\\*/g,function(t,a,b){\n        var oper = t.match(/^\\.?\\.?(\\[\\s*\\^?\\?|\\^?\\?|\\[\\s*==)(.*?)\\]?$/); // [?expr] and ?expr and [=expr and =expr\n        if(oper){\n          var prefix = '';\n          if(t.match(/^\\./)){\n            // recursive object search\n            call(\"expand\");\n            prefix = \",true)\";\n          }\n          call(oper[1].match(/\\=/) ? \"map\" : oper[1].match(/\\^/) ? \"distinctFilter\" : \"filter\");\n          return prefix + \",function($obj){return \" + oper[2] + \"})\";\n        }\n        oper = t.match(/^\\[\\s*([\\/\\\\].*)\\]/); // [/sortexpr,\\sortexpr]\n        if(oper){\n          // make a copy of the array and then sort it using the sorting expression\n          return \".concat().sort(function(a,b){\" + oper[1].replace(/\\s*,?\\s*([\\/\\\\])\\s*([^,\\\\\\/]+)/g,function(t,a,b){\n              return \"var av= \" + b.replace(/\\$obj/,\"a\") + \",bv= \" + b.replace(/\\$obj/,\"b\") + // FIXME: Should check to make sure the $obj token isn't followed by characters\n                  \";if(av>bv||bv==null){return \" + (a== \"/\" ? 1 : -1) +\";}\\n\" +\n                  \"if(bv>av||av==null){return \" + (a== \"/\" ? -1 : 1) +\";}\\n\";\n          }) + \"})\";\n        }\n        oper = t.match(/^\\[(-?[0-9]*):(-?[0-9]*):?(-?[0-9]*)\\]/); // slice [0:3]\n        if(oper){\n          call(\"slice\");\n          return \",\" + (oper[1] || 0) + \",\" + (oper[2] || 0) + \",\" + (oper[3] || 1) + \")\";\n        }\n        if(t.match(/^\\.\\.|\\.\\*|\\[\\s*\\*\\s*\\]|,/)){ // ..prop and [*]\n          call(\"expand\");\n          return (t.charAt(1) == '.' ?\n              \",'\" + b + \"'\" : // ..prop\n                t.match(/,/) ?\n                  \",\" + t : // [prop1,prop2]\n                  \"\") + \")\"; // [*]\n        }\n        return t;\n      }).\n      replace(/(\\$obj\\s*(\\.\\s*[\\w_$]+\\s*)*)(==|~)\\s*`([0-9]+)/g,makeRegex). // create regex matching\n      replace(/`([0-9]+)\\s*(==|~)\\s*(\\$obj(\\s*\\.\\s*[\\w_$]+)*)/g,function(t,a,b,c,d){ // and do it for reverse =\n        return makeRegex(t,c,d,b,a);\n      });\n    query = prefix + (query.charAt(0) == '$' ? \"\" : \"$\") + query.replace(/`([0-9]+|\\])/g,function(t,a){\n      //restore the strings\n      return a == ']' ? ']' : str[a];\n    });\n    // create a function within this scope (so it can use expand and slice)\n\n    var executor = eval(\"1&&function($,$1,$2,$3,$4,$5,$6,$7,$8,$9){var $obj=$;return \" + query + \"}\");\n    for(var i = 0;i<arguments.length-1;i++){\n      arguments[i] = arguments[i+1];\n    }\n    return obj ? executor.apply(this,arguments) : executor;\n  };\n\n\n  if(typeof namespace == \"function\"){\n  \tnamespace(\"json::JSONQuery\", JSONQuery);\n  }\n  else {\n  \twindow[\"JSONQuery\"] = JSONQuery;\n  }\n})();\n\n/*\n    http://www.JSON.org/json2.js\n    2009-04-16\n\n    Public Domain.\n\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\n    See http://www.JSON.org/js.html\n\n    This file creates a global JSON object containing two methods: stringify\n    and parse.\n\n        JSON.stringify(value, replacer, space)\n            value       any JavaScript value, usually an object or array.\n\n            replacer    an optional parameter that determines how object\n                        values are stringified for objects. It can be a\n                        function or an array of strings.\n\n            space       an optional parameter that specifies the indentation\n                        of nested structures. If it is omitted, the text will\n                        be packed without extra whitespace. If it is a number,\n                        it will specify the number of spaces to indent at each\n                        level. If it is a string (such as '\\t' or '&nbsp;'),\n                        it contains the characters used to indent at each level.\n\n            This method produces a JSON text from a JavaScript value.\n\n            When an object value is found, if the object contains a toJSON\n            method, its toJSON method will be called and the result will be\n            stringified. A toJSON method does not serialize: it returns the\n            value represented by the name/value pair that should be serialized,\n            or undefined if nothing should be serialized. The toJSON method\n            will be passed the key associated with the value, and this will be\n            bound to the object holding the key.\n\n            For example, this would serialize Dates as ISO strings.\n\n                Date.prototype.toJSON = function (key) {\n                    function f(n) {\n                        // Format integers to have at least two digits.\n                        return n < 10 ? '0' + n : n;\n                    }\n\n                    return this.getUTCFullYear()   + '-' +\n                         f(this.getUTCMonth() + 1) + '-' +\n                         f(this.getUTCDate())      + 'T' +\n                         f(this.getUTCHours())     + ':' +\n                         f(this.getUTCMinutes())   + ':' +\n                         f(this.getUTCSeconds())   + 'Z';\n                };\n\n            You can provide an optional replacer method. It will be passed the\n            key and value of each member, with this bound to the containing\n            object. The value that is returned from your method will be\n            serialized. If your method returns undefined, then the member will\n            be excluded from the serialization.\n\n            If the replacer parameter is an array of strings, then it will be\n            used to select the members to be serialized. It filters the results\n            such that only members with keys listed in the replacer array are\n            stringified.\n\n            Values that do not have JSON representations, such as undefined or\n            functions, will not be serialized. Such values in objects will be\n            dropped; in arrays they will be replaced with null. You can use\n            a replacer function to replace those with JSON values.\n            JSON.stringify(undefined) returns undefined.\n\n            The optional space parameter produces a stringification of the\n            value that is filled with line breaks and indentation to make it\n            easier to read.\n\n            If the space parameter is a non-empty string, then that string will\n            be used for indentation. If the space parameter is a number, then\n            the indentation will be that many spaces.\n\n            Example:\n\n            text = JSON.stringify(['e', {pluribus: 'unum'}]);\n            // text is '[\"e\",{\"pluribus\":\"unum\"}]'\n\n\n            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\\t');\n            // text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'\n\n            text = JSON.stringify([new Date()], function (key, value) {\n                return this[key] instanceof Date ?\n                    'Date(' + this[key] + ')' : value;\n            });\n            // text is '[\"Date(---current time---)\"]'\n\n\n        JSON.parse(text, reviver)\n            This method parses a JSON text to produce an object or array.\n            It can throw a SyntaxError exception.\n\n            The optional reviver parameter is a function that can filter and\n            transform the results. It receives each of the keys and values,\n            and its return value is used instead of the original value.\n            If it returns what it received, then the structure is not modified.\n            If it returns undefined then the member is deleted.\n\n            Example:\n\n            // Parse the text. Values that look like ISO date strings will\n            // be converted to Date objects.\n\n            myData = JSON.parse(text, function (key, value) {\n                var a;\n                if (typeof value === 'string') {\n                    a =\n/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n                    if (a) {\n                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],\n                            +a[5], +a[6]));\n                    }\n                }\n                return value;\n            });\n\n            myData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {\n                var d;\n                if (typeof value === 'string' &&\n                        value.slice(0, 5) === 'Date(' &&\n                        value.slice(-1) === ')') {\n                    d = new Date(value.slice(5, -1));\n                    if (d) {\n                        return d;\n                    }\n                }\n                return value;\n            });\n\n\n    This is a reference implementation. You are free to copy, modify, or\n    redistribute.\n\n    This code should be minified before deployment.\n    See http://javascript.crockford.com/jsmin.html\n\n    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n    NOT CONTROL.\n*/\n\n/*jslint evil: true */\n\n/*global JSON */\n\n/*members \"\", \"\\b\", \"\\t\", \"\\n\", \"\\f\", \"\\r\", \"\\\"\", JSON, \"\\\\\", apply,\n    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\n    test, toJSON, toString, valueOf\n*/\n\n// Create a JSON object only if one does not already exist. We create the\n// methods in a closure to avoid creating global variables.\n\nif (!this.JSON) {\n    JSON = {};\n}\n(function () {\n\n    function f(n) {\n        // Format integers to have at least two digits.\n        return n < 10 ? '0' + n : n;\n    }\n\n    if (typeof Date.prototype.toJSON !== 'function') {\n\n        Date.prototype.toJSON = function (key) {\n\n            return this.getUTCFullYear()   + '-' +\n                 f(this.getUTCMonth() + 1) + '-' +\n                 f(this.getUTCDate())      + 'T' +\n                 f(this.getUTCHours())     + ':' +\n                 f(this.getUTCMinutes())   + ':' +\n                 f(this.getUTCSeconds())   + 'Z';\n        };\n\n        String.prototype.toJSON =\n        Number.prototype.toJSON =\n        Boolean.prototype.toJSON = function (key) {\n            return this.valueOf();\n        };\n    }\n\n    var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n        escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n        gap,\n        indent,\n        meta = {    // table of character substitutions\n            '\\b': '\\\\b',\n            '\\t': '\\\\t',\n            '\\n': '\\\\n',\n            '\\f': '\\\\f',\n            '\\r': '\\\\r',\n            '\"' : '\\\\\"',\n            '\\\\': '\\\\\\\\'\n        },\n        rep;\n\n\n    function quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n        escapable.lastIndex = 0;\n        return escapable.test(string) ?\n            '\"' + string.replace(escapable, function (a) {\n                var c = meta[a];\n                return typeof c === 'string' ? c :\n                    '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n            }) + '\"' :\n            '\"' + string + '\"';\n    }\n\n\n    function str(key, holder) {\n\n// Produce a string from holder[key].\n\n        var i,          // The loop counter.\n            k,          // The member key.\n            v,          // The member value.\n            length,\n            mind = gap,\n            partial,\n            value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n        if (value && typeof value === 'object' &&\n                typeof value.toJSON === 'function') {\n            value = value.toJSON(key);\n        }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n        if (typeof rep === 'function') {\n            value = rep.call(holder, key, value);\n        }\n\n// What happens next depends on the value's type.\n\n        switch (typeof value) {\n        case 'string':\n            return quote(value);\n\n        case 'number':\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n            return isFinite(value) ? String(value) : 'null';\n\n        case 'boolean':\n        case 'null':\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce 'null'. The case is included here in\n// the remote chance that this gets fixed someday.\n\n            return String(value);\n\n// If the type is 'object', we might be dealing with an object or an array or\n// null.\n\n        case 'object':\n\n// Due to a specification blunder in ECMAScript, typeof null is 'object',\n// so watch out for that case.\n\n            if (!value) {\n                return 'null';\n            }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n            gap += indent;\n            partial = [];\n\n// Is the value an array?\n\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || 'null';\n                }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n                v = partial.length === 0 ? '[]' :\n                    gap ? '[\\n' + gap +\n                            partial.join(',\\n' + gap) + '\\n' +\n                                mind + ']' :\n                          '[' + partial.join(',') + ']';\n                gap = mind;\n                return v;\n            }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n            if (rep && typeof rep === 'object') {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    k = rep[i];\n                    if (typeof k === 'string') {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n                for (k in value) {\n                    if (Object.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n            v = partial.length === 0 ? '{}' :\n                gap ? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' +\n                        mind + '}' : '{' + partial.join(',') + '}';\n            gap = mind;\n            return v;\n        }\n    }\n\n// If the JSON object does not yet have a stringify method, give it one.\n\n    if (typeof JSON.stringify !== 'function') {\n        JSON.stringify = function (value, replacer, space) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n            var i;\n            gap = '';\n            indent = '';\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n            if (typeof space === 'number') {\n                for (i = 0; i < space; i += 1) {\n                    indent += ' ';\n                }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n            } else if (typeof space === 'string') {\n                indent = space;\n            }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n            rep = replacer;\n            if (replacer && typeof replacer !== 'function' &&\n                    (typeof replacer !== 'object' ||\n                     typeof replacer.length !== 'number')) {\n                throw new Error('JSON.stringify');\n            }\n\n// Make a fake root object containing our value under the key of ''.\n// Return the result of stringifying the value.\n\n            return str('', {'': value});\n        };\n    }\n\n\n// If the JSON object does not yet have a parse method, give it one.\n\n    if (typeof JSON.parse !== 'function') {\n        JSON.parse = function (text, reviver) {\n\n// The parse method takes a text and an optional reviver function, and returns\n// a JavaScript value if the text is a valid JSON text.\n\n            var j;\n\n            function walk(holder, key) {\n\n// The walk method is used to recursively walk the resulting structure so\n// that modifications can be made.\n\n                var k, v, value = holder[key];\n                if (value && typeof value === 'object') {\n                    for (k in value) {\n                        if (Object.hasOwnProperty.call(value, k)) {\n                            v = walk(value, k);\n                            if (v !== undefined) {\n                                value[k] = v;\n                            } else {\n                                delete value[k];\n                            }\n                        }\n                    }\n                }\n                return reviver.call(holder, key, value);\n            }\n\n\n// Parsing happens in four stages. In the first stage, we replace certain\n// Unicode characters with escape sequences. JavaScript handles many characters\n// incorrectly, either silently deleting them, or treating them as line endings.\n\n            cx.lastIndex = 0;\n            if (cx.test(text)) {\n                text = text.replace(cx, function (a) {\n                    return '\\\\u' +\n                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n                });\n            }\n\n// In the second stage, we run the text against regular expressions that look\n// for non-JSON patterns. We are especially concerned with '()' and 'new'\n// because they can cause invocation, and '=' because it can cause mutation.\n// But just to be safe, we want to reject all unexpected forms.\n\n// We split the second stage into 4 regexp operations in order to work around\n// crippling inefficiencies in IE's and Safari's regexp engines. First we\n// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we\n// replace all simple value tokens with ']' characters. Third, we delete all\n// open brackets that follow a colon or comma or that begin the text. Finally,\n// we look to see that the remaining characters are only whitespace or ']' or\n// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\n            if (/^[\\],:{}\\s]*$/.\ntest(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').\nreplace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').\nreplace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n\n// In the third stage we use the eval function to compile the text into a\n// JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n// in JavaScript: it can begin a block or an object literal. We wrap the text\n// in parens to eliminate the ambiguity.\n\n                j = eval('(' + text + ')');\n\n// In the optional fourth stage, we recursively walk the new structure, passing\n// each name/value pair to a reviver function for possible transformation.\n\n                return typeof reviver === 'function' ?\n                    walk({'': j}, '') : j;\n            }\n\n// If the text is not JSON parseable, then a SyntaxError is thrown.\n\n            throw new SyntaxError('JSON.parse');\n        };\n    }\n}());\n\n(function(p) {\n  var doPrint = function() {\n    var args  = Array.prototype.slice.call(arguments);\n    var type  = args.shift();\n    var input = args.join(\" \");\n    var lines = input.split(\"\\n\");\n    for (var i in lines)\n      p(type, lines[i]);\n  };\n  var doJsonPrint = function() {\n    var args  = Array.prototype.slice.call(arguments);\n    var type  = args.shift();\n    if (args.length > 0) {\n      args = args.length > 1 ? args : args[0];\n      var ret  = typeof(args) == \"string\" ? args : json(args);\n      doPrint(type, ret);\n    }\n  };\n  window.Q = function() {\n    try {\n      var ret = JSONQuery.apply(window, arguments);\n      ret.length;\n      return ret;\n    } catch (e) {\n      err(\"jsawk: JSONQuery parse error: '\"+arguments[0]+\"'\");\n      quit(4);\n    }\n  };\n  window.out = function() {\n    var args  = Array.prototype.slice.call(arguments);\n    args.unshift(\"OUT:\");\n    doJsonPrint.apply(window, args);\n  };\n  window.err = function() {\n    var args  = Array.prototype.slice.call(arguments);\n    args.unshift(\"ERR:\");\n    doJsonPrint.apply(window, args);\n  };\n  window.alert = p;\n  window.doJson = function(input) {\n    if (typeof input !== \"string\") {\n      return input;\n    } else {\n      input = input.replace(/\\s*$/,\"\");\n      if (!input.length) {\n        return {};\n      } else {\n        try {\n          return eval(\"(\"+input+\")\");\n        } catch (e) {\n          err(\"jsawk: JSON parse error: '\"+input+\"'\");\n          quit(2);\n        }\n      }\n    }\n  };\n  window.doCall = function(fun, obj) {\n    try {\n      return fun.call(obj);\n    } catch (e) {\n      err(\"jsawk: js error: \"+e);\n      quit(3);\n    }\n  };\n  window.makeFilter = function(fun) {\n    try {\n      return eval(\"(function() { \"+fun+\"; return this })\");\n    } catch (e) {\n      err(\"jsawk: script parse error: '\"+fun+\"'\");\n      quit(3);\n    }\n  };\n  window.json = function() {\n    try {\n      return JSON.stringify.apply(window, arguments);\n    } catch (e) {\n      err(\"jsawk: JSON stringify error: \"+e);\n      quit(5);\n    }\n  };\n  window.get = function() {\n    return $$ = IS[++$_];\n  };\n  window.put = function(record) {\n    IS = IS.slice(0, $_+1).concat([record]).concat(IS.slice($_+1));\n  };\n  window.forEach = function(ary, fun) {\n    fun = eval(\"function(index,item) { \"+fun+\"; }\");\n    for (var i=0; i<ary.length; i++) {\n      try {\n        fun.call(ary[i], i, ary[i]);\n      } catch (e) {\n        err(\"jsawk: js error: \"+e);\n        quit(3);\n      }\n    }\n  };\n})(window.print);\n\n(function(argv) {\n  argv = Array.prototype.slice.call(argv);\n\n  var inputLines = argv.shift();\n\n  var usage = function() {\n    err(\"Usage: jsawk [-n] [-j jsbin] [-f jsfile1.js]* [-q jsonquery] \\\\\\n\" +\n        \"             [-b script] [-a script] [-v NAME=VALUE] [script]\");\n    quit(1);\n  };\n\n  var fun = \"\";\n  var noprint = false;\n  var libs    = [];\n  var befores = [];\n  var afters  = [];\n  var queries = [];\n  var i,j,k,l,m,n;\n\n  var arg;\n\n  while (arg = argv.shift()) {\n    switch(arg) {\n      case \"-j\":\n      case \"-s\":\n      case \"-i\":\n        argv.shift();\n        break;\n      case \"-h\":\n        usage();\n        break;\n      case \"-n\":\n        noprint = true;\n        break;\n      case \"-q\":\n        if (argv.length < 1) usage();\n        queries.push(argv.shift());\n        break;\n      case \"-f\":\n        if (argv.length < 1) usage();\n        libs.push(argv.shift());\n        break;\n      case \"-b\":\n        if (argv.length < 1) usage();\n        befores.push(makeFilter(argv.shift()));\n        break;\n      case \"-a\":\n        if (argv.length < 1) usage();\n        afters.push(makeFilter(argv.shift()));\n        break;\n      case \"-v\":\n        if (argv.length < 1) usage();\n        var tmp = argv.shift();\n        var key = tmp.replace(/=.*$/, \"\");\n        var val = tmp.replace(/^[^=]+=/, \"\");\n        window[key] = val;\n        break;\n      default:\n        fun = arg;\n    }\n  }\n\n  var input=\"\";\n\n  for (var i=0; i<inputLines; i++) {\n    var line=readline();\n    input += (line ? line : \"\");\n    input += \"\\n\";\n  }\n\n  var wrapped;\n\n  IS      = doJson(input);\n  wrapped = !(IS instanceof Array);\n\n  if (wrapped)\n    IS = [ IS ];\n\n  for (i in libs)\n    load(libs[i]);\n\n  var f = makeFilter(fun);\n\n  for (i in queries)\n    IS = Q(queries[i], IS);\n\n  $_ = -1;\n  $$ = IS;\n\n  for (i in befores)\n    IS = doCall(befores[i], IS);\n\n  RS = [];\n\n  for ($_=0; $_<IS.length; $_++) {\n    $$ = IS[$_]\n    var tmp = doCall(f, $$);\n    if (tmp != null) RS.push(tmp);\n  }\n\n  $_ = -1;\n  $$ = RS;\n\n  for (i in afters)\n    RS = doCall(afters[i], RS);\n\n  if (wrapped)\n    RS = RS.pop();\n\n  if (!noprint)\n    out(RS);\n})(typeof arguments === 'undefined' ? scriptArgs : arguments);\n__END__\n\nnlines=0\nget_lines=\"yes\"\ninput_file=\ninput_string=\n\nwhile getopts :hni:s:j:q:f:b:a:v: opt; do\n  case $opt in\n    h) get_lines=\"no\" ;;\n    i) input_file=\"$OPTARG\" ;;\n    j) js_arg=$OPTARG ;;\n    s) input_string=\"$OPTARG\" ;;\n  esac\ndone\n\nif [ $get_lines != \"no\" ]; then\n  if [ -n \"$input_string\" ]; then\n  \t# Pass in the input string specified directly\n  \techo \"$input_string\" > $TMP2\n  elif [ -n \"$input_file\" ]; then\n  \t# Pass in the input file contents specified, first checking the file exists\n  \tif ! [ -e \"$input_file\" ]; then\n  \t\techo \"Error: Input file cannot be found: $input_file\"\n  \t\texit 1\n  \tfi\n  \tcat \"$input_file\" > $TMP2\n  else\n  \t# Read input from STDIN\n    echo \"$(cat 2>/dev/null)\" > $TMP2\n  fi\n  nlines=$(grep -c '$' $TMP2 2>/dev/null || echo 0)\nfi\n\nif [ -e /etc/jsawkrc ]; then\n  . /etc/jsawkrc\nfi\n\nif [ -e ~/.jsawkrc ]; then\n  . ~/.jsawkrc\nfi\n\nJSBIN=${js_arg:-${JS:-js}}\n\nret=$?\nres=$(cat $TMP2 2>/dev/null | $JSBIN $TMP1 $nlines \"$@\")\nout=$(echo \"$res\" |sed '/^OUT: /s/^.....//p;d')\nerr=$(echo \"$res\" |sed '/^ERR: /s/^.....//p;d')\n\n[ -n \"$err\" ] && echo \"$err\" 1>&2\n[ -n \"$out\" ] && echo \"$out\"\n\nrm -f $TMP1 $TMP2\n\nexit $ret\n"
        }
      ]
    }
  ]
}