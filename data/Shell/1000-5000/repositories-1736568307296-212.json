{
  "metadata": {
    "timestamp": 1736568307296,
    "page": 212,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jverkoey/iOS-Framework",
      "stars": 2604,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.037109375,
          "content": "*.xcuserstate\n*.xcuserdatad\n.DS_Store\n"
        },
        {
          "name": "README.mdown",
          "type": "blob",
          "size": 34.619140625,
          "content": "Building a static iOS framework is a pain. There are a variety of existing solutions\nalready and each one has its own disadvantages. Presented here is a solution that meets all of the\nfollowing constraints while having no deal-breaking disadvantages.\n\n- Fast iterative compilation times (up to 3x faster than some solutions!).\n- Easy distribution and packaging.\n- No modifications to Xcode.\n- No trickery with fake bundle targets and the likes.\n- Simple set-up for third-parties.\n- Support for building the framework as a dependent target (i.e. modifying source in the framework\n  and building an app will automatically rebuild the framework and relink as expected).\n- Works with the latest version of Xcode\n\nShameless plug: if you appreciate high-speed iOS development, check out\n[Nimbus](http://nimbuskit.info/), the iOS framework whose growth is bounded by its\ndocumentation.\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/3.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"http://i.creativecommons.org/l/by/3.0/88x31.png\" /></a><br />This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by/3.0/\">Creative Commons Attribution 3.0 Unported License</a>.\n\n## Important notice regarding Swift code\n\nThe Swift language, as of Nov 2015, is still in flux. By including Swift code in your\ndistributed binary .framework, you are forcing the users of your framework to have the\nsame version of Swift as when you built your framework. **This is bad** because it will\neventually result in your clients encountering the following error:\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/swift-error.png)\n\nWhile Swift the language is still changing, we **highly recommend** that you **do not**\nbuild Swift code into your .frameworks. This applies to both *static* and *dynamic*\nframeworks.\n\nWith that out of the way, let's learn how to make a static iOS framework...built only\nwith Objective-C.\n\nTable of Contents\n=================\n\n- [Existing Solutions](#existing_solutions)\n- [How to Create a Static Framework for iOS](#walkthrough)\n  - [Overview](#overview)\n  - [Create the Static Library Target](#static_library_target)\n  - [Create the Framework Distribution Target](#framework_distribution_target)\n- [Resources and Bundles](#resources)\n- [Adding the Framework to a Third-Party Application](#third_parties)\n- [Developing the Framework as a Dependent Project](#first_parties)\n- [FAQ](#faq)\n- [License](#license)\n\n<a name=\"existing_solutions\" />\n\nExisting Solutions\n==================\n\nPresented below are a few of the most popular solutions for building static iOS frameworks and the\nreasons why they should be avoided.\n\n> Note: Though the tone below is largely critical, credit is owed to those who pioneered these\n> solutions. Much of the proposed solution is based off the work that these amazingly generous\n> people have donated to the ether. Thanks!\n\niOS-Universal-Framework\n-----------------------\n\nSource: [https://github.com/kstenerud/iOS-Universal-Framework](https://github.com/kstenerud/iOS-Universal-Framework)\n\n### Major problems\n\n- Slow iterative build times\n- Has to modify Xcode for \"Real\" frameworks\n- Can't properly add framework as a dependent target for \"Fake\" frameworks\n- No adequate solution for resource loading\n\n### Overview\n\nThis project provides two solutions: \"fake\" frameworks and \"real\" frameworks.\n\nA **fake** framework is a bundle target with a .framework extension and some post-build scripts to\ngenerate the fat library for the .framework.\n\nA **real** framework modifies the Xcode installation and generates a true .framework target. Real\nframeworks also use post-build scripts to generate the fat library.\n\n### Problems with Fake Frameworks\n\nThe problem with a fake framework is that you can't link to the framework as a dependent target. You\ncan \"trick\" Xcode into linking to the framework by using the `-framework` flag in your `LD_FLAGS`,\nbut changes to the framework will not be reflected in iterative builds. This requires that you clean\nbuild every time you modify the framework, or make a trivial modification to the application itself\nin order for it to forcefully relink to the new .framework. This bug is discussed\n[here](https://github.com/kstenerud/iOS-Universal-Framework/issues/32).\n\n*Example warning when you attempt to link to the .framework target:*\n\n    warning: skipping file\n    '/Users/featherless/Library/Developer/Xcode/DerivedData/SimpleApp-cshmhxdgzacibsgaiiryutjzobcb/Build/Products/Debug-iphonesimulator/fakeframework.framework'\n    (unexpected file type 'wrapper.cfbundle' in Frameworks & Libraries build phase)\n\n### Problems with Real Frameworks\n\nTo use real frameworks you need to modify your Xcode installation. This is simply not scalable when\nyou want to work with a team of people. If you use a build farm this problem becomes even worse\nbecause it may not be possible to modify the Xcode installations on the build servers.\n\n### Problems with Both Fake and Real Frameworks\n\nIn both frameworks there is a post-build step that builds the \"inverse\" platform. For example, if\nyou're building the framework for i386, the post-build step will build the framework for armv6/armv7/armv7s\nand then smush the libraries together into one fat binary within the framework. The problem with\nthis is that it **triples** the build time of the framework. Make one change to a .m file and\nsuddenly you're rebuilding it for three platforms. Change a PCH and your project will effectively\nperform three clean builds. This is simply not ok from a productivity standpoint.\n\nThere is also the problem of distributing resources with the .framework. Both the fake and real\nframeworks include an \"embeddedframework\" which is meant to be copied into the application. This\nresults in the .framework binary being distributed with the application! Alternatively we could ask\ndevelopers to only copy what's in the resources folder to their app, but this is complicated and\nrequires we namespace our resource file names to avoid naming conflicts.\n\ndb-in's solution (\"Fake\" frameworks)\n----------------\n\nSource: http://db-in.com/blog/2011/07/universal-framework-iphone-ios-2-0/\n\n### Major problems\n\n- Slow iterative build times\n- Can't properly add framework as a dependent target\n- No adequate solution for resource loading (recommends a remarkably *bad* solution)\n\n### Overview\n\ndb-in's solution is roughly identical to kstenerud's solution of using a bundle target to generate a\nfake framework. This has the same disadvantages as outlined above so I won't repeat myself.\n\nThere is, however, a specific deal-breaker with the recommendations in this blog post: resources.\nDb-in recommends copying the .framework into your application as a resource bundle; this is <b>NOT\nOK</b>. This will end up copying not just the resources from your framework, but also the fat binary\nof the framework! Doing this will inflate the size of your application by several megabytes more\nthan it should be because you're shipping off a fat binary with your application.\n\nAnd so without further ado...\n\n<a name=\"walkthrough\" />\n\nHow to Create a Static Framework for iOS\n========================================\n\nThere are a few constraints that we want to satisfy when building a .framework:\n\n- Fast iterative builds when developing the framework. We may have a simple application that has the\n  .framework as a dependency and we want to quickly iterate on development of the .framework.\n- Infrequent distribution builds of the .framework.\n- Resource distribution should be intuitive and not bloat the application.\n- Setup for third-party developers using the .framework should be *easy*.\n\nI believe that the solution I will outline below satisfies each of these constraints. I will outline\nhow to build a .framework project from scratch so that you can apply these steps to an existing\nproject if you so desire. I will also include project templates for easily creating a\n.framework.\n\n<a name=\"overview\" />\n\nOverview\n--------\n\n> View a sample project that shows the result of following these steps in the `sample/Serenity`\n> directory.\n\nWithin the project we are going to have three targets: a static library, a bundle, and an aggregate.\n\nThe static library target will build the source into a static library (.a) and specify which headers\nwill be \"public\", meaning they will be accessible from the .framework when we distribute it.\n\nThe bundle target will contain all of our resources and will be loadable from the framework.\n\nThe aggregate target will build the static library for i386/armv6/armv7/armv7s, generate the fat framework\nbinary, and also build the bundle. You will run this target when you plan to distribute the\n.framework.\n\nWhen you are working on the framework you will likely have an internal application that links to the\nframework. This application will link to the static library target as you normally would and copy\nthe .bundle in the copy resources phase. This has the benefit of only building the framework code\nfor the platform you're actively working on, significantly improving your build times. We'll do a\nlittle bit of work in the framework project to ensure that you can use your framework in your app\nthe same way a third party developer would (i.e. importing <MyFramework/MyFramework.h> should work\nas expected). <a href=\"#first_parties\">Jump to the dependent project walkthrough</a>.\n\n<a name=\"static_library_target\" />\n\nCreate the Static Library Target\n--------------------------------\n\n### Step 1: Create a New \"Cocoa Touch Static Library\" Project\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/newstaticlib.png)\n\nThe product name will be the name of your framework. For example, `Serenity` will generate\n`Serenity.framework` once we've set up the project.\n\n### Step 2: Create the Primary Framework Header\n\nDevelopers expect to be able to import your framework by importing the `<Serenity/Serenity.h>`\nheader. Ensure that your project has such a header (if you created a new static library then there\nshould already be a Serenity.h and Serenity.m file; you can delete the .m).\n\nWithin this header you are going to import all of the public headers for your framework. For\nexample, let's assume that we have some `Widget` with a .h and .m. Our Serenity.h file would look\nlike this:\n\n```\n#import <Foundation/Foundation.h>\n\n#import <Serenity/Widget.h>\n```\n\nOnce you've created your framework header file, you need to make it a \"public\" header. Public\nheaders are headers that will be copied to the .framework and can be imported by those using your\nframework. This differs from \"project\" headers which will *not* be distributed with the framework.\nThis distinction is what allows you to have a concept of public and private APIs.\n\nTo change a file's [target membership visibility in XCode 4.4+]\n(http://stackoverflow.com/questions/13571080/cant-change-target-membership-visibility-in-xcode-4-5),\nyou'll need to select the Static Library target you created (Serenity), open the Build Phases tab: \n\n**Xcode 4.X:**\nClick on Add Build Phase > Add Copy Headers. \n\n**Xcode 5:**\nAdd Build Phases from the menu. Click on Editor > Add Build Phase -> Add Copy Headers Build Phase. Note: If the menu options are grayed out, you'll need to click on the whitespace below the Build Phases to regain focus and retry.\n\n**Xcode 6:**\nAdd Build Phases from the menu. Click on Editor > Add Build Phase -> Add Headers Build Phase. Note: If the menu options are grayed out, you'll need to click on the whitespace below the Build Phases to regain focus and retry.\n\n\nYou'll see 3 sections for Public, Private, and Project headers. To modify the scope of any header, drag and drop the header files between the sections. Alternatively you can open the Project Navigator and select the header. Next expand the Utilities pane for the File Inspector.\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/utilitiesbutton.png)\n(Cmd+Option+0).\n\nLook at the \"Target Membership\" group and ensure that the checkbox next to the .h file is checked.\nChange the scope of the header from \"Project\" to \"Public\". You might have to uncheck and check the box to get the dropdown list. This will ensure that the header gets\ncopied to the correct location in the copy headers phase.\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/publicheaders.png)\n\n### Step 3: Update the Public Headers Location\n\nBy default the static library project will copy private and public headers to the same folder:\n`/usr/local/include`. To avoid mistakenly copying private headers to our framework we want to ensure\nthat our public headers are copied to a separate directory, e.g. `$(PROJECT_NAME)Headers`. To change this setting,\nselect the project in the Project Navigator and then click the \"Build Settings\" tab. Search for \"public\nheaders\" and then set the \"Public Headers Folder Path\" to \"$(PROJECT_NAME)Headers\" for all configurations.\nIf you are working with multiple Frameworks make sure that this folder is unique.\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/publicheadersconfig.png)\n\n### Ongoing Step: Adding New Sources to the Framework\n\nWhenever you add new source to the framework you must decide whether to expose the .h publicly or\nnot. To modify a header's scope you will follow the same process as Step 2. By default a header's\nscope will be \"Project\", meaning it will not be copied to the framework's public headers.\n\n#### An Important Note on Categories\n\nUsing a category should be a **necessity**, not a convenience, when distributing a framework.\n\nFrameworks, by their very nature, obscure most implementation details, very likely leading to severe run-time tomfoolery as symbols get overwritten and your client's app starts performing in wonderfully novel ways (much to their users' chagrin).\n\nIf you **absolutely** ***must*** use categories, please check out the [FAQ](#faq) in order to avoid having your clients encounter linker problems when attempting to use them.\n\n### Step 4: Disable Code Stripping\n\nWe do not want to strip any code from the library; we leave this up to the application that is\nlinking to the framework. To disable code stripping we must modify the following configuration\nsettings:\n\n    \"Dead Code Stripping\" => No (for all settings)\n    \"Strip Debug Symbols During Copy\" => No (for all settings)\n    \"Strip Style\" => Non-Global Symbols (for all settings)\n\n### Step 5: Enable all architecture support\n\nWe want our framework able to work with all device architectures. To do so, change this in your project file (not your target files !):\n    \"Build Active Architecture Only\" => No (for all settings)\n\n### Step 6: Prepare the Framework for use as a Dependent Target\n\nIn order to use the static library as though it were a framework we're going to generate the basic\nskeleton of the framework in the static library target. To do this we'll include a simple post-build\nscript. Add a post-build script by selecting your project in the Project Navigator, selecting the target, and then the\n\"Build Phases\" tab. \n\n**Xcode 4.X:** Click Add Build Phase > Add Run Script\n\n**Xcode 5:** Select Editor menu > Add Build Phase > Add Run Script Build Phase\n\nPaste the following script in the source portion of the run script build phase. You can rename the phase by clicking\nthe title of the phase (I've named it \"Prepare Framework\", for example).\n\n#### prepare_framework.sh\n\n```bash\nset -e\n\nmkdir -p \"${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.framework/Versions/A/Headers\"\n\n# Link the \"Current\" version to \"A\"\n/bin/ln -sfh A \"${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.framework/Versions/Current\"\n/bin/ln -sfh Versions/Current/Headers \"${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.framework/Headers\"\n/bin/ln -sfh \"Versions/Current/${PRODUCT_NAME}\" \"${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.framework/${PRODUCT_NAME}\"\n\n# The -a ensures that the headers maintain the source modification date so that we don't constantly\n# cause propagating rebuilds of files that import these headers.\n/bin/cp -a \"${TARGET_BUILD_DIR}/${PUBLIC_HEADERS_FOLDER_PATH}/\" \"${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.framework/Versions/A/Headers\"\n\n```\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/prepareframework.png)\n\nThis will generate the following folder structure:\n\n```\n-- Note: \"->\" denotes a symbolic link --\n\nSerenity.framework/\n  Headers/ -> Versions/Current/Headers\n  Serenity -> Versions/Current/Serenity\n  Versions/\n    A/\n      Headers/\n        Serenity.h\n        Widget.h\n    Current -> A\n```\n\nTry building your project now and look at the build products directory (usually\n`~/Library/Developer/Xcode/DerivedData/<ProjectName>-<gibberish>/Build/Products/...`). You should\nsee a `libSerenity.a` static library, a `Headers` folder, and a `Serenity.framework` folder that\ncontains the basic skeleton of your framework.\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/buildphase1.png)\n\n### Step 7: Enable bitcode (Optional)\n\n**Xcode 7.x** is required for bitcode support.\n\nTo include bitcode in your framework, just add **-fembed-bitcode** flag to the static\nlibrary C flags.\n\n<a name=\"framework_distribution_target\">\n  \nCreate the Framework Distribution Target\n----------------------------------------\n\nWhen actively developing the framework we only care to build the platform that we're testing on. For\nexample, if we're testing on the iPhone simulator then we only need to build the i386 platform.\n\nThis changes when we want to distribute the framework to third party developers. The third-party\ndevelopers don't have the option of rebuilding the framework for each platform, so we must provide\nwhat is called a \"fat binary\" version of the static library that is comprised of the possible\nplatforms. These platforms include: i386, armv6, armv7, and armv7s.\n\nTo generate this fat binary we're going to build the static library target for each platform.\n\n### Step 1: Create an Aggregate Target\n\nClick File > New Target > iOS > Other and create a new Aggregate target. Title it something like \"Framework\".\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/aggregatetarget.png)\n\n### Step 2: Add the Static Library as a Dependent Target\n\nAdd the static library target to the \"Target Dependencies\".\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/targetdependencies.png)\n\n### Step 3: Build the Other Platform\n\nTo build the other platform we're going to use a \"Run Script\" phase to execute some basic commands.\nAdd a new \"Run Script\" build phase to your aggregate target and paste the following code into it.\n\n#### build_framework.sh\n\n```bash\nset -e\nset +u\n# Avoid recursively calling this script.\nif [[ $SF_MASTER_SCRIPT_RUNNING ]]\nthen\n    exit 0\nfi\nset -u\nexport SF_MASTER_SCRIPT_RUNNING=1\n\nSF_TARGET_NAME=${PROJECT_NAME}\nSF_EXECUTABLE_PATH=\"lib${SF_TARGET_NAME}.a\"\nSF_WRAPPER_NAME=\"${SF_TARGET_NAME}.framework\"\n\n# The following conditionals come from\n# https://github.com/kstenerud/iOS-Universal-Framework\n\nif [[ \"$SDK_NAME\" =~ ([A-Za-z]+) ]]\nthen\n    SF_SDK_PLATFORM=${BASH_REMATCH[1]}\nelse\n    echo \"Could not find platform name from SDK_NAME: $SDK_NAME\"\n    exit 1\nfi\n\nif [[ \"$SDK_NAME\" =~ ([0-9]+.*$) ]]\nthen\n    SF_SDK_VERSION=${BASH_REMATCH[1]}\nelse\n    echo \"Could not find sdk version from SDK_NAME: $SDK_NAME\"\n    exit 1\nfi\n\nif [[ \"$SF_SDK_PLATFORM\" = \"iphoneos\" ]]\nthen\n    SF_OTHER_PLATFORM=iphonesimulator\nelse\n    SF_OTHER_PLATFORM=iphoneos\nfi\n\nif [[ \"$BUILT_PRODUCTS_DIR\" =~ (.*)$SF_SDK_PLATFORM$ ]]\nthen\n    SF_OTHER_BUILT_PRODUCTS_DIR=\"${BASH_REMATCH[1]}${SF_OTHER_PLATFORM}\"\nelse\n    echo \"Could not find platform name from build products directory: $BUILT_PRODUCTS_DIR\"\n    exit 1\nfi\n\n# Build the other platform.\nxcrun xcodebuild -project \"${PROJECT_FILE_PATH}\" -target \"${TARGET_NAME}\" -configuration \"${CONFIGURATION}\" -sdk ${SF_OTHER_PLATFORM}${SF_SDK_VERSION} BUILD_DIR=\"${BUILD_DIR}\" OBJROOT=\"${OBJROOT}\" BUILD_ROOT=\"${BUILD_ROOT}\" SYMROOT=\"${SYMROOT}\" $ACTION\n\n# Smash the two static libraries into one fat binary and store it in the .framework\nxcrun lipo -create \"${BUILT_PRODUCTS_DIR}/${SF_EXECUTABLE_PATH}\" \"${SF_OTHER_BUILT_PRODUCTS_DIR}/${SF_EXECUTABLE_PATH}\" -output \"${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/Versions/A/${SF_TARGET_NAME}\"\n\n# Copy the binary to the other architecture folder to have a complete framework in both.\ncp -a \"${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/Versions/A/${SF_TARGET_NAME}\" \"${SF_OTHER_BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/Versions/A/${SF_TARGET_NAME}\"\n\n```\n\n#### Important Notes\n\nThe above script assumes that your library name matches your project name in the following line:\n\n```bash\nSF_TARGET_NAME=${PROJECT_NAME}\n```\n\nIf this is not the case (e.g. your xcode project is named SerenityFramework and the target name is\nSerenity) then you need to explicitly set the target name on that line. For example:\n\n```bash\nSF_TARGET_NAME=Serenity\n```\n\nIf you are using Cocoapods, you need to build the workspace instead of the project. Assuming your \nScheme matches your aggregate target name, change the `xcrun xcodebuild` line to:\n\n```bash\nxcrun xcodebuild ONLY_ACTIVE_ARCH=NO -workspace \"${PROJECT_DIR}/${PROJECT_NAME}.xcworkspace\" -scheme \"${TARGET_NAME}\" -configuration \"${CONFIGURATION}\" -sdk ${SF_OTHER_PLATFORM}${SF_SDK_VERSION} BUILD_DIR=\"${BUILD_DIR}\" OBJROOT=\"${OBJROOT}\" BUILD_ROOT=\"${BUILD_ROOT}\" SYMROOT=\"${SYMROOT}\" $ACTION\n```\n\n### Step 4: Build and Verify\n\nYou now have everything set up to build a distributable .framework to third-party developers. Try\nbuilding the aggregate target. Once it's done, expand the Products folder in Xcode, right click the\nstatic library and click \"Show in Finder\". If this doesn't open Finder to where the static library\nexists then try opening\n`~/Library/Developer/Xcode/DerivedData/<project name>/Build/Products/Debug-iphonesimulator/`.\n\nWithin this folder you will see your .framework folder.\n\nVerify that your framework includes all of the architectures that are available by running the\n`file` command on your framework's static library:\n\n```bash\nlipo -info Serenity.framework/Serenity\n```\n\nYou should see output resembling:\n\n```bash\nArchitectures in the fat file: Serenity.framework/Serenity are: i386 x86_64 armv7 armv7s arm64\n```\n\nIf you don't see all of the architectures listed, make sure that you're looking at the right\nframework output. If you're building with the Simulator as your target, the correct framework\nwill be in the -iphonesimulator folder. Sometimes it can help to delete the Debug- and Release-\nfolders to ensure that you're getting a truly clean build.\n\nOnce you've verified that the framework includes all of the architectures, you can now move\nthe .framework elsewhere, zip it up, upload it, and distribute it to your third-party developers.\n\n<a name=\"resources\" />\n\nResources and Bundles\n=====================\n\nTo distribute resources with a framework, we are going to provide the developer with a separate\n.bundle that contains all of the strings and resources. This distribution method provides a number\nof advantages over including the resources in the .framework itself.\n\n- Encapsulation of resources. We can scope resource loading to our framework's bundle.\n- Easy to add bundles to projects.\n- The developer doesn't have to copy the entire .framework into their application.\n\nThe hard part about bundles is creating the target. Xcode's bundle target doesn't actually create a\nloadable bundle object, so we have to do some post-build massaging of the bundle. It's important\nthat we create a bundle target because we need to create the bundle using the Copy Bundle Resources\nphase that will correctly compile .xib files (a Copy Files phase does not accomplish this!).\n\n### Step 1: Create the Bundle Target\n\nIn the framework project, create a new bundle target. Click on File > New > Target > OS X > Bundle. You will need to name the bundle something\ndifferent from your framework name or Xcode will not let you create the target. I've named the target SerenityResources. We will rename the output of the target to Serenity.bundle in a following\nstep.\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/newbundletarget.png)\n\nEnsure that the Framework setting is set to \"Core Foundation\".\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/newbundletarget2.png)\n\n### Step 2: Clean up the Bundle Target Settings\n\nBy default the bundle will only show build settings for Mac OS X. It doesn't really matter what it\nbuilds for because the bundle isn't actually going to have any code in it, but I prefer to have\nthings nice and consistent. Open the bundle target settings and delete the settings for\nArchitectures, Base SDK, and Build Active Architecture Only.\n\n**Xcode 5:** Deleting a build setting will reset it to the Project's build setting. It should switch from OS X to iOS.\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/bundlesettings.png)\n\nThis is also when you should change your bundle target's product name to the name of your framework\nrather than the target name. Click on your project in the Project Navigator and then select\nthe bundle target. Click Build Settings, search for \"Product Name\", and then replace\nthe value of Product Name with the name of your framework (e.g. $(TARGET_NAME) replaced by Serenity)\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/serenityproductname.png)\n\n### Step 3: Remove HIDPI Mac OS X Build Setting\nWe created a OS X Bundle and it includes and option to merge HIDPI (retina and non-retina) art assets into a .tiff file. You don't want this behavior and need to disable it, or you will be unable to load your image assets from the bundle.\n\nIn the Bundle target go to Build Settings and search for `COMBINE_HIDPI_IMAGES` and delete the user defined setting. When you build, verify that your @2x.png and .png images are all in the bundle.\n\n![Delete the COMBINE_HIDPI_IMAGES setting](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/delete_combine_hidpi.png)\n\n### Ongoing Step: Add Resources to the Bundle Target Copy Files Phase\n\nWhenever you add new resources that you want to include with your framework you need to add it to\nthe bundle target that you created.\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/newbundleresource.png)\n\n### Step 4: Add the Bundle Target to your Aggregate Target\n\nWhenever we build the framework for distribution we likely also want to build the bundle. Add the\nbundle target to your aggregate target's dependencies.\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/bundledependency.png)\n\n### Step 5: Loading Bundle Resources\n\nIn order to load bundle resources, we must first ask the third-party developer to add the .bundle to\ntheir application. To do so they will simply drag the .bundle that you distributed with the\n.framework to their project and ensure that it is copied in the copy files phase of their app\ntarget.\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/addbundle.png)\n\nTo load resources from the bundle we will use the following code:\n\n```obj-c\n// Load the framework bundle.\n+ (NSBundle *)frameworkBundle {\n  static NSBundle* frameworkBundle = nil;\n  static dispatch_once_t predicate;\n  dispatch_once(&predicate, ^{\n    NSString* mainBundlePath = [[NSBundle mainBundle] resourcePath];\n    NSString* frameworkBundlePath = [mainBundlePath stringByAppendingPathComponent:@\"Serenity.bundle\"];\n    frameworkBundle = [[NSBundle bundleWithPath:frameworkBundlePath] retain];\n  });\n  return frameworkBundle;\n}\n\n[UIImage imageWithContentsOfFile:[[[self class] frameworkBundle] pathForResource:@\"image\" ofType:@\"png\"]];\n```\n\nYou can see an example of loading a resource from within the framework in the Widget object in the\nincluded Serenity framework.\n\n**Xcode 5:** Do not use the Asset Catalog for any resources within a bundle. On an iOS 7.0 only project, a bug causes the pathForResource method to return nil. \n\n<a name=\"third_parties\" />\n\nAdding the Framework to a Third-Party Application\n=================================================\n\n> View a sample project that shows the result of following these steps in the `sample/ThirdParty`\n> directory.\n\nThis is the easy part (and what your third-party developers will have to do). Simply drag the\n.framework to your application's project, ensuring that it's being added to the necessary targets.\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/thirdparty.png)\n\nImport your framework header and you're kickin' ass.\n\n```obj-c\n#import <Serenity/Serenity.h>\n```\n\n### Resources\n\nIf you're distributing resources with your framework then you will also send the .bundle file to the\ndevelopers. The developer will then drag the .bundle file into their application and ensure that\nit's added to the application target.\n\n<a name=\"first_parties\" />\n\nDeveloping the Framework as a Dependent Project\n===============================================\n\n> View a sample project that shows the result of following these steps in the `sample/DependentApp`\n> directory.\n\nWhen developing the framework you want to minimize build times while ensuring that your experience\nroughly matches that of your third-party developers. We achieve this balance by only building the\nstatic library but treating the static library as though it were a framework.\n\n### Step 1: Add the Framework Project to your Application Project\n\nTo add the framework as a dependent target in your application, from Finder drag the framework's .xcodeproj to\nXcode and drop it in your application's frameworks folder. This will add a reference to the\nframework's xcodeproj folder. \n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/dependentapp.png)\n\n### Step 2: Make the Framework Static Library Target a Dependency\n\nOnce you've added the framework project to your app you can add the static library product as a\ndependency. Select your project in the Project Navigator and open the \"Build Phases\" tab. Expand\nthe \"Target Dependencies\" group and click the + button. Select the static library target and click\n\"Add\".\n\n**Note:** Close your Static Library Project or the dependencies will not appear in the list. You can only have one instance of an Xcode project open.\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/addtarget.png)\n\n### Step 3: Link your Application with the Framework Static Library\n\nIn order to use the framework's static library we must link it into the application. Expand the\n\"Link Binary With Libraries\" phase and click the + button. Select the `.a` file that's exposed by\nyour framework's project and then click add.\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/linker.png)\n\n### Step 4: Import the Framework Header\n\nYou now simply need to import the framework header somewhere in your project. I generally prefer\nthe pch so that I don't have to clutter up my application's source with framework headers, but you\ncan obviously choose whatever practice suits your needs.\n\n```obj-c\n#import <Serenity/Serenity.h>\n```\n\n### Step 4-b: Adding Resources\n\nIf you are developing resources for your framework you can also add the bundle target as a\ndependency.\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/bundledependency2.png)\n\nYou must then add the bundle to the Copy Bundle Resources phase of your application by expanding\nthe products folder of your framework product and dragging the .bundle into that section.\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/bundlecopy.png)\n\n### Step 5: Check Dependent Target Build Settings\n\nSet the setting `Skip Install` to `Yes` for any static library or bundle target that you create. Check all the targets that are dependencies of your application project. If the option is `No` then you will be unable to build an archive of the project containing the target dependencies. Xcode will create a Generic Xcode Archive, which cannot be shared adhoc, validated, or submitted.\n\n![](https://github.com/jverkoey/iOS-Framework/raw/master/gfx/skip_install.png)\n\n### Step 6: Build and Test\n\nBuild your application and verify a couple things:\n\n- Your framework should be built before your application.\n- Your framework should be linked into the application.\n- You shouldn't get any compiler or linker errors.\n\n<a name=\"faq\" />\n\nFAQ\n===\n\nHow do I resolve 'unrecognized selector sent to instance' linker errors?\n------------------------------------------------------------------------\n\n- **The recommended solution** is to use [NimbusKitBasics' NI_FIX_CATEGORY_BUG](https://github.com/NimbusKit/basics#avoid-requiring-the--all_load-and--force_load-flags) whenever possible. This solution minimizes the amount of your framework that will need to be linked into the client's app binary.\n- [Breakdown of solutions](http://stackoverflow.com/a/22264650/65455) from [Mecki](http://stackoverflow.com/users/15809/mecki) on stackoverflow.\n\nHow do I include Third-Party Libraries in my Framework?\n-------------------------------------------------------\n\nDon't.\n\nOk, you can, but it's touch to do correctly - and it's really important that you do it correctly.\n\nThe scenario you want to avoid is the following:\n\n- You've linked some third-party library in your code (e.g. [NimbusKit's Markdown](https://github.com/nimbuskit/markdown)).\n- A client using your framework also wants to use NimbusKit's Markdown.\n- Their app fails to build due to duplicate symbol linker errors.\n- Client gets incredibly frustrated with your framework and uses something else.\n\nSolutions, in order of easiest-to-most-difficult:\n\n### Pure framework build (no third-party libraries included) + library source distribution\n\nBundle any libraries that your framework uses alongside your framework when you distribute it (e.g. distribute a zip file with your built .framework and a third-party folder containing the source for all libraries used). Make it clear in your setup guide that the additional libraries will also need to be compiled into the client's app.\n\nThis:\n\n- gives the client the flexibility to use their own version of the library;\n- encourages proper attribution and license redistribution of any open source code you're using;\n- and, most importantly, ensures that the client will not encounter duplicate symbol linker errors.\n\n### Symbol Prefixing\n\nThis is hard to do correctly and requires meticulous ongoing care to ensure that no symbols ever slip through the build process.\n\nThis solution allows you to completely guarantee that a given version of a third-party library will be used by your framework. It also allows you to distribute a single .framework, easing the setup and versioning process.\n\nSome approaches to symbol prefixing:\n\n- High level overview by [featherless](http://twitter.com/featherless) on StackOverflow: [http://stackoverflow.com/questions/11512291/prefix-static-library-ios/19341366#19341366](http://stackoverflow.com/questions/11512291/prefix-static-library-ios/19341366#19341366).\n- [Avoiding Dependency Collisions in an iOS Library](http://pdx.esri.com/blog/2013/12/13/namespacing-dependencies/) on esri.com.\n\n<a name=\"license\" />\n\nLicense\n=======\n\nExcept as otherwise noted, the content of this page is licensed under the Creative Commons\nAttribution 3.0 Unported License, and code samples are licensed under the Apache 2.0 License.\n\nTo view a copy of this license, visit httip://creativecommons.org/licenses/by/3.0/ or send a letter\nto Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.\n"
        },
        {
          "name": "gfx",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}