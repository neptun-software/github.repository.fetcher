{
  "metadata": {
    "timestamp": 1736568376246,
    "page": 311,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "RichiH/vcsh",
      "stars": 2200,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.302734375,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\ntrim_trailing_whitespace = true\n\n[{Makefile*,*.mk,*.mk.in}]\nindent_style = tab\nindent_size = 4\n\n[*.m4]\nindent_style = space\nindent_size = 8\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[{vcsh.in,completions/vcsh.*}]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.248046875,
          "content": "vcsh.1\ndoc/vcsh.1.ronn\n*.patch\n*.swp\n.swp\n*.bak\n.version\n.version-prev\nMakefile\nMakefile.in\naclocal.m4\nautom4te.cache/\nbuild-aux/install-sh\nbuild-aux/missing\ncompletions/_vcsh\ncompletions/vcsh\nconfig.log\nconfig.status\nconfigure\naminclude.am\n/vcsh\nvcsh-*\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.37109375,
          "content": "Richard Hartmann <richih@debian.org> <richih+github.com@richih.org>\nRichard Hartmann <richih@debian.org> <richih@richih.org>\nRichard Hartmann <richih@debian.org> <richih.mailinglist@gmail.com>\nRichard Hartmann <richih@debian.org> <RichiH@users.noreply.github.com>\nKevin Lyda <kevin@lyda.ie> <kevin@ie.suberic.net>\nAlexander Skurikhin <a.skurihin@gmail.com> <a.skurihin@gmail.com>\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 2.5341796875,
          "content": "Alphabetical list of names of everyone who ever committed to this repository.\nAuto-generated using `make -B CONTRIBUTORS`\n\nAaron Schumacher <ajschumacher@gmail.com>\nAaron VonderHaar <gruen0aermel@gmail.com>\nAlessandro Ghedini <alessandro@ghedini.me>\nAlexander Skurikhin <a.skurihin@gmail.com>\nAndrew Schwartzmeyer <andrew@schwartzmeyer.com>\narndtc <arndtc@gmail.com>\nAryel Mota Góis <aryel.gois@gmail.com>\nCaleb Maclennan <caleb@alerque.com>\nCorey Quinn <corey@sequestered.net>\nDaniel Shahaf <d.s@daniel.shahaf.name>\nDato Simó <dato@net.com.org.es>\nDebian Janitor <janitor@jelmer.uk>\nDennis Gilmore <dennis@ausil.us>\nDevin J. Pohly <djpohly@gmail.com>\nDewey Sasser <dewey@sasser.com>\nDieter Plaetinck <dieter@plaetinck.be>\nDon <don@ohspite.net>\nDon March <don@ohspite.net>\nDridi Boukelmoune <dridi.boukelmoune@gmail.com>\nEdward Betts <edward@4angle.com>\nEli Young <elyscape@gmail.com>\nEric Bouchut <ebouchut@gmail.com>\nErrietta Kostala <errietta@errietta.me>\nEvan Pitstick <nerdx00@gmail.com>\nFedora Release Engineering <rel-eng@lists.fedoraproject.org>\nFelix Eckhofer <felix@eckhofer.com>\nFlorian Engel <florian.engel@adletec.de>\nFrank Terbeck <ft@bewatermyfriend.org>\nGernot Schulz <post@gernot-schulz.com>\nG.raud <graud@gmx.com>\nGregor Jasny <gjasny@googlemail.com>\nguy hughes <guyhugh3s@gmail.com>\nHarendra Kumar <harendra.kumar@gmail.com>\nJames Davidson <james@greycastle.net>\nJeff Fein-Worton <jeff@fein-worton.com>\nJochen Keil <jochen.keil@gmail.com>\nJohn Karahalis <john.karahalis@gmail.com>\nJohn Whitley <whitley@bangpath.org>\nJonathan Sternberg <jonathansternberg@gmail.com>\nJulien Lecomte <julien@lecomte.at>\nKevin Lyda <kevin@lyda.ie>\nleycec <leycec@gmail.com>\nLyderic Landry <lyderic@lyderic.com>\nMarkus Martin <markus@archwyrm.net>\nmartin f. krafft <madduck@madduck.net>\nMartin Kühl <martin.kuehl@posteo.net>\nMathias Svensson <freaken@freaken.dk>\nmek-apelsin <mek@pels.in>\nMert Dirik <mertdirik@gmail.com>\nMikhail Gusarov <dottedmag@dottedmag.net>\nmirabilos <tg@debian.org>\nmiramir <gmiramir@gmail.com>\nNoah Birnel <nbirnel@gmail.com>\nPavlos Ratis <dastergon@gentoo.org>\nRichard Hartmann <richih@debian.org>\nRob Cornish <jrmcornish@gmail.com>\nRoland Hopferwieser <develop@int0x80.at>\nSkurikhin Alexander <a@skurih.in>\nsoulofmischief <30357883+soulofmischief@users.noreply.github.com>\nThomas Ferris Nicolaisen <tfnico@gmail.com>\nThomas Tuegel <ttuegel@mailbox.org>\nThorsten Glaser <tg@mirbsd.org>\ntikki <tikki@users.noreply.github.com>\nTony <zearin@gonk.net>\nValentin Haenel <valentin.haenel@gmx.de>\nVincent Demeester <vincent@demeester.fr>\nYuval Langer <yuval.langer@gmail.com>\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 17.5205078125,
          "content": "GNU General Public License\n==========================\n\n_Version 2, June 1991_  \n_Copyright © 1989, 1991 Free Software Foundation, Inc.,_  \n_51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA_\n\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\n\n### Preamble\n\nThe licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\nWhen we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\nFor example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\nWe protect your rights with two steps: **(1)** copyright the software, and\n**(2)** offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\nAlso, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\nFinally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\nThe precise terms and conditions for copying, distribution and\nmodification follow.\n\n### TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n**0.** This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The “Program”, below,\nrefers to any such program or work, and a “work based on the Program”\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term “modification”.)  Each licensee is addressed as “you”.\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n**1.** You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n**2.** You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n* **a)** You must cause the modified files to carry prominent notices\nstating that you changed the files and the date of any change.\n* **b)** You must cause any work that you distribute or publish, that in\nwhole or in part contains or is derived from the Program or any\npart thereof, to be licensed as a whole at no charge to all third\nparties under the terms of this License.\n* **c)** If the modified program normally reads commands interactively\nwhen run, you must cause it, when started running for such\ninteractive use in the most ordinary way, to print or display an\nannouncement including an appropriate copyright notice and a\nnotice that there is no warranty (or else, saying that you provide\na warranty) and that users may redistribute the program under\nthese conditions, and telling the user how to view a copy of this\nLicense.  (Exception: if the Program itself is interactive but\ndoes not normally print such an announcement, your work based on\nthe Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n**3.** You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n* **a)** Accompany it with the complete corresponding machine-readable\nsource code, which must be distributed under the terms of Sections\n1 and 2 above on a medium customarily used for software interchange; or,\n* **b)** Accompany it with a written offer, valid for at least three\nyears, to give any third party, for a charge no more than your\ncost of physically performing source distribution, a complete\nmachine-readable copy of the corresponding source code, to be\ndistributed under the terms of Sections 1 and 2 above on a medium\ncustomarily used for software interchange; or,\n* **c)** Accompany it with the information you received as to the offer\nto distribute corresponding source code.  (This alternative is\nallowed only for noncommercial distribution and only if you\nreceived the program in object code or executable form with such\nan offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n**4.** You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n**5.** You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n**6.** Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n**7.** If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n**8.** If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n**9.** The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and “any\nlater version”, you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n**10.** If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n### NO WARRANTY\n\n**11.** BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n**12.** IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\n### How to Apply These Terms to Your New Programs\n\nIf you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\nTo do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe “copyright” line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n    \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n    \n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n    \n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w` and `show c` should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w` and `show c`; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a “copyright disclaimer” for the program, if\nnecessary.  Here is a sample; alter the names:\n\n    Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n    `Gnomovision' (which makes passes at compilers) written by James Hacker.\n    \n    <signature of Ty Coon>, 1 April 1989\n    Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 2.7705078125,
          "content": "ACLOCAL_AMFLAGS = -I build-aux\nAM_DISTCHECK_CONFIGURE_FLAGS = --enable-developer-mode\n\n.ONESHELL:\n.SECONDARY:\n.SECONDEXPANSION:\n.DELETE_ON_ERROR:\n\ndocdir = $(datarootdir)/doc/$(TRANSFORMED_PACKAGE_NAME)\nlicensedir = $(datarootdir)/licenses/$(TRANSFORMED_PACKAGE_NAME)\n\nbin_SCRIPTS = vcsh\ndist_doc_DATA = changelog doc/INSTALL.md doc/README.md doc/error_codes.md\nsamplehooksdir = $(docdir)/sample_hooks\ndist_samplehooks_DATA = doc/sample_hooks/post-init-add-origin doc/sample_hooks/post-init-setup-mr doc/sample_hooks/post-merge-unclobber doc/sample_hooks/pre-merge-unclobber\ndist_license_DATA = LICENSE.md CONTRIBUTORS\nif ENABLE_MAN_PAGE\ndist_man_MANS = doc/vcsh.1\nendif\n\nEXTRA_DIST  = completions/vcsh.bash completions/vcsh.zsh build-aux/ax_prog_perl_modules.m4\nEXTRA_DIST += t/000-tear-env.t t/001-setup-env.t t/100-init.t t/300-add.t t/950-delete.t t/999-tear-env.t\n\nBUILT_SOURCES =\nCLEANFILES = $(dist_man_MANS) $(bin_SCRIPTS)\n\nDISTCLEANFILES = @AMINCLUDE@\n\n# A classical use of the autoconf-archive include macro would expand\n# INC_AMINCLUDE here, but the perl script that inlines include statements\n# runs before the automake that organizes logic and performs substitution.\n# Consequentially with a substitution here it becomes impossible to use\n# automake conditionals and substitutions in the included Makefile fragments.\n# By entering the expanded value directly we are ready in time for the inlining\n# functionality and hence can use conditionals in included makefile fragments.\ninclude $(top_srcdir)/aminclude.am\n\nif !SOURCE_IS_DIST\n\ndoc/vcsh.1: doc/vcsh.1.ronn\n\t$(RONN) < $< > $@\n\nendif\n\n$(COMPLETIONS_OUT_DIR)/$(TRANSFORMED_PACKAGE_NAME): completions/vcsh.bash\n\tmkdir -p $(dir $@)\n\tinstall $< $@\n\n$(COMPLETIONS_OUT_DIR)/_$(TRANSFORMED_PACKAGE_NAME): completions/vcsh.zsh\n\tmkdir -p $(dir $@)\n\tinstall $< $@\n\nif ENABLE_TESTS\n_CHECKDEPS = $(PROVE)\nendif\n\ncheck-local: $(_CHECKDEPS)\n\ncheck-version: check-dep-versions\n\n.PHONY: check-dep-versions\ncheck-dep-version: $(PACKAGE_NAME) | .version\n\t./$< version | $(GREP) -Ff <($(GIT) version)\n\n.PHONY: prove\nprove:\n\tprove\n\n.PHONY: test\ntest: prove\n\nPHONY_DEVELOPER_TARGETS = lint lint-editor-config lint-shellheck\n.PHONY: $(PHONY_DEVELOPER_TARGETS)\n\nif DEVELOPER_MODE\n\nlint: lint-editor-config lint-shellcheck\n\nlint-editor-config:\n\tec\n\nlint-shellcheck: $(PACKAGE_NAME)\n\tshellcheck $<\n\nelse !DEVELOPER_MODE\n\n$(PHONY_DEVELOPER_TARGETS):\n\t@: $(error \"Please reconfigure using --enable-developer-mode to use developer tooling\")\n\nendif !DEVELOPER_MODE\n\nif SOURCE_IS_GIT\n\nCONTRIBUTORS:\n\texec > $@\n\techo 'Alphabetical list of names of everyone who ever committed to this repository.'\n\techo 'Auto-generated using `make -B CONTRIBUTORS`'\n\techo\n\t$(GIT) shortlog -se --all | cut -f1 --complement | sort -u\n\nchangelog-HEAD: changelog\n\tsed -nEe '2d;s/^\\t//p;/^$$/q;' $< > $@\n\nendif SOURCE_IS_GIT\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.193359375,
          "content": "vcsh - Version Control System for $HOME - multiple Git repositories in $HOME\n\n[![Test Status](https://github.com/RichiH/vcsh/actions/workflows/test.yml/badge.svg)](https://github.com/RichiH/vcsh/actions/workflows/test.yml)\n\n# Index\n\n1. [30 Second How-to](#30-second-how-to)\n2. [Introduction](#introduction)\n3. [Installation](#installation)\n4. [Detailed documentation](#detailed-documentation)\n5. [Contact](#contact)\n\n\n# 30 Second How-to\n\nWhile it may appear that there's an overwhelming amount of documentation and\nwhile the explanation of the concepts behind `vcsh` needs to touch a few gory\ndetails of `git` internals, getting started with `vcsh` is extremely simple.\n\nLet's say you want to version control your `vim` configuration:\n\n    vcsh init vim\n    vcsh vim add ~/.vimrc ~/.vim\n    vcsh vim commit -m 'Initial commit of my Vim configuration'\n    # optionally push your files to a remote\n    vcsh vim remote add origin <remote>\n    vcsh vim push -u origin master\n    # from now on you can push additional commits like this\n    vcsh vim push\n\nIf all that looks a _lot_ like standard `git`, that's no coincidence; it's\na design feature.\n\n\n# Introduction\n\n[vcsh][vcsh] allows you to maintain several Git repositories in one single\ndirectory. They all maintain their working trees without clobbering each other\nor interfering otherwise. By default, all Git repositories maintained via\n`vcsh` store the actual files in `$HOME` but you can override this setting if\nyou want to.\n\nAll this means that you can have one repository per application or application\nfamily, i.e. `zsh`, `vim`, `ssh`, etc. This, in turn, allows you to clone\ncustom sets of configurations onto different machines or even for different\nusers; picking and mixing which configurations you want to use where.\nFor example, you may not need to have your `mplayer` configuration on a server\nor available to root and you may want to maintain different configuration for\n`ssh` on your personal and your work machines.\n\n## Talks\n\nSome people found it useful to look at [slides](https://github.com/RichiH/talks/blob/main/2013/10-linuxcon-eu/linuxcon_eu-2013-10-gitify_your_life.pdf) and videos explaining how `vcsh`\nworks instead of working through the docs.\nAll slides, videos, and further information can be found\n[on the author's talk page][talks].\n\n# Installation\n\nA lot of modern UNIX-based systems offer packages for `vcsh`. In case yours\ndoes not, read [INSTALL.md](doc/INSTALL.md) for instructions on installing from\nsources or even create a package for your system. If you do end up packaging\n`vcsh` please let us know so we can document package availability.\n\n# Detailed documentation\n\nFor more information, consult the [detailed documentation](doc/README.md).\n\n# Contact\n\nThere are several ways to get in touch with the author and a small but committed\ncommunity around the general idea of version controlling your (digital) life.\n\n* IRC: #vcs-home on irc.oftc.net\n\n* Mailing list: [http://lists.madduck.net/listinfo/vcs-home][vcs-home-list]\n\n* Pull requests or issues on [https://github.com/RichiH/vcsh][vcsh]\n\n\n[myrepos]: http://myrepos.branchable.com/\n[talks]: https://github.com/RichiH/talks\n[vcsh]: https://github.com/RichiH/vcsh\n[vcs-home-list]: http://lists.madduck.net/listinfo/vcs-home\n"
        },
        {
          "name": "bootstrap.sh",
          "type": "blob",
          "size": 1.2666015625,
          "content": "#!/usr/bin/env sh\nset -e\n\nincomplete_source () {\n    printf '%s\\n' \\\n        \"$1. Please either:\" \\\n        \"* $2,\" \\\n        \"* or use the source packages instead of a repo archive\" \\\n        \"* or use a full Git clone.\" >&2\n    exit 1\n}\n\n# This enables easy building from Github's snapshot archives\nif [ ! -e \".git\" ]; then\n    if [ ! -f \".tarball-version\" ]; then\n    incomplete_source \"No version information found\" \\\n        \"identify the correct version with \\`echo \\$version > .tarball-version\\`\"\n    fi\nelse\n    # Just a head start to save a ./configure cycle\n    ./build-aux/git-version-gen .tarball-version > .version\nfi\n\n# Autoreconf uses a perl script to inline includes from Makefile.am into\n# Makefile.in before ./configure is ever run even once ... which typically means\n# AX_AUTOMAKE_MACROS forfeit access to substitutions or conditional logic\n# because they enter the picture after those steps. We're intentially using the\n# expanded value of @INC_AMINCLUDE@ directly so the include will be inlined. To\n# bootstrap we must pre-seed an empty file to avoid a 'file not found' error on\n# first run. Subsequently running ./configure will generate the correct content\n# based on the configuration flags and also get re-inline into Makefile.in.\ntouch aminclude.am\n\nautoreconf --install\n"
        },
        {
          "name": "build-aux",
          "type": "tree",
          "content": null
        },
        {
          "name": "changelog",
          "type": "blob",
          "size": 9.8173828125,
          "content": "2024-04-08  Caleb Maclennan <caleb@alerque.com>\n\n\t* Release 2.0.10\n\t* Fix release workflow so it builds the man page\n\n2024-04-08  Caleb Maclennan <caleb@alerque.com>\n\n\t* Release 2.0.9\n\t* Add missing 'commit' sub-command in bash completions\n\t* Switch from xz to zst compression for official artifacts\n\t* Generate checksums for release artifacts in CI\n\t* Use more idiomatic GNU/Autotools patterns\n\n2024-02-27  Caleb Maclennan <caleb@alerque.com>\n\n\t* Release 2.0.8\n\t* Fix man page source syntax to work with current ronn\n\n2023-12-30  Caleb Maclennan <caleb@alerque.com>\n\n\t* Release 2.0.7\n\t* Fix build and deploy of standalone/portable script variant\n\n2023-12-29  Caleb Maclennan <caleb@alerque.com>\n\n\t* Release 2.0.6\n\t* Revert .gitignore.d handling to match revert in Git 2.17→2.18\n\t* Cleanup some configure and build odds and ends\n\t* Fix some CI linting and publishing glitches\n\n2022-11-08  Caleb Maclennan <caleb@alerque.com>\n\n\t* Release 2.0.5\n\t* Replace bashism with POSIX compliant syntax in configure script\n\n2021-10-27  Richard Hartmann <richih@richih.org>\n\n\t* Release 2.0.4\n\t* Fix build failure on non-GNU systems, #321\n\n2021-10-23  Caleb Maclennan <caleb@alerque.com>\n\n\t* Release 2.0.3\n\t* Fix list-untracked subcommand option parsing\n\t* Refactor ‘mkdir && install’ to ‘install -D’\n\n2021-09-04  Caleb Maclennan <caleb@alerque.com>\n\n\t* Release 2.0.2\n\t* Fix Makefile portability by swapping cp for install\n\n2021-08-28  Caleb Maclennan <caleb@alerque.com>\n\n\t* Release 2.0.1\n\t* Stop requiring `ronn` when building from source tarball\n\n2021-08-20  Caleb Maclennan <caleb@alerque.com>\n\n\t* Release 2.0.0\n\t* Replace homegrown Makefile with Autotools for configure and build\n\t* Post source builds as part of automated release process\n\t* Switch to versioning scheme to semver\n\t* Replace Travis test runner with GitHub Actions\n\t* Make VCSH_* variables available to hooks\n\t* More carefully handle shell quoting\n\t* Improve handling of non-default remote names and branches\n\t* Fix per-repo pre/post hook handling\n\t* Output path relative to $HOME in ‘vcsh status’\n\t* Add flag to prefix output of ‘vcsh foreach -p’ with repo name\n\t* Fix debugging on Windows 10 / Cygwin\n\t* Improve option flag handling to allow multiple flags, squash bugs\n\t* Don't require Ruby or Perl tooling to build and install\n\t* Avoid false-positive conflicts on checkout\n\t* Make <repo> arg optional for write-ignore subcommand\n\t* Fix ZSH completions, improve Bash completions\n\t* Allow use of specific path when running Git or any dependency\n\t* Fail if hook scripts return failure codes\n\t* Check GIT_REMOTE early on clone()\n\t* Support renaming script as configuration option\n\t* Setup standalone script build profile and attach directly to releases\n\n2021-04-05  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.20190621\n\t* Make version reflected in `vcsh version` correct...\n\n2021-03-29  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.20190620\n\t* This is a safe harbour release.\n\t* `release` branch should ensure downstream picks it up\n\n2021-03-29  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.20190619\n\t* Various bugfixes\n\t* This is a safe harbour release.\n\t* @alerque is now a co-maintainer\n\n2015-12-29  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Fix tests to always use C locale, this makes vcsh reproducible\n\t* Implement `vcsh foreach`\n\t* Implement `vcsh list-untracked -a`\n\t* Handle Git older than 2.x gracefully\n\t* Fix broken list-tracked-by\n\t* Fix regression in `vcsh which`\n\t* Skip ignored files in the output of list-untracked\n\t* Improve cloning\n\t* Clean up docs\n\t* Implement `vcsh status --terse`\n\t* Improve tests\n\n2015-05-02  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.20150502\n\t* Add tests\n\t* Integrate tests with Travis CI\n\t* Make `vcsh --list_untracked` GNU-independent\n\t* Improve vcsh's code quality\n\t* Improve Makefile, documentation, etc\n\n2014-10-26  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.20141026\n\t* FIX fatal()\n\t* Improve error handling of clone()\n\n2014-10-25  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.20141025\n\t* `vcsh which dontexist` exits 1\n\t* `vcsh status` shows commits ahead/behind remote tracking branch\n\t* Support overlay functions\n\t* Support `vcsh list-untracked`, optionally recursively\n\t* Support `vcsh list-untracked $repo`\n\t* Improve error handling of clone()\n\t* Rename `list-tracked-by` to `list-tracked <repo>`\n\t* Support repo-specific config files\n\t* Various minor improvements\n\t* More moo\n\n2014-10-09  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Display full paths in list-tracked*\n\t* Lots of help improvements\n\n2014-05-08  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Revert \"Introduce static manpage as part of normal repo\"\n\n2014-05-07  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Increase portability\n\t* Improve hooks\n\t* Improve docs\n\t* Various minor improvements\n\n2014-03-13  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.20140313 -- the \"Git won a prize\" edition\n\t* Initialize repos with --shared=0600\n\t* Fix cloning from some spefically-named remotes\n\t* Support custom gitattribute files\n\t* Support filenames with whitespace in gitignores\n\t* Pass out git exit codes\n\t* Switch to static, pre-built manpage\n\t* Improve documentation\n\t* Use more portable find(1) syntax\n\t* Various minor improvements\n\n2013-12-29  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.20131229\n\t* Fix mktemp bug (GitHub issue #99)\n\t* Make code more resilient and efficient\n\t* Improve output\n\n2013-12-14  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.20131214\n\t* Revert \"Implement basename() in shell\"\n\t* Fix mktemp on OS X\n\t* Fix variable assignment bug\n\t* Support shortnames for commands\n\t* Improve Makefile\n\t* Improve documentation\n\t* Various minor improvements\n\n2013-09-09  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.20130909\n\t* Add support for relative worktrees\n\n2013-08-29  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.20130829\n\t* Add support for `vcsh commit`\n\t* Add support for `vcsh status <repo>`\n\t* Add pre-/post-init hooks\n\t* Documentation improvements\n\t* Minor cleanups\n\n2013-07-24  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.20130724\n\t* Add support for `vcsh status`\n\t* Improve output of `vcsh pull`\n\t* Improve output of `vcsh push`\n\t* Minor documentation improvements\n\n2013-07-23  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.20130723\n\t* Support $VCSH_GITIGNORE == none\n\t* Documentation improvements,\n\t* Improved zsh completion\n\t* Add support for `vcsh pull`\n\t* Add support for `vcsh push`\n\t* Add retire() to tear down vcsh ENV\n\t* Add clone hooks, including one witout vcsh ENV to\n\t  allow subsequent cloning of other repos\n\t* Fix `vcsh rename`\n\t* Improve general code robustness\n\n2013-06-14  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.20130614\n\t* Lots of documentation improvements, major rewrite\n\n2013-05-27  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.3\n\t* Hide hook execution unless verbose is set\n\t* Ancher ignore file to root of Git repo\n\t* Implemented basename() to save one process spawn\n\t* Improve packaged Zsh completion\n\t* Renamed `vcsh setup` to `vcsh upgrade`\n\t* Various documentation and spelling improvements\n\n2013-04-21  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.2\n\t* Introduce `vcsh version`\n\n2013-03-31  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.1\n\t* Documentation fixes\n\t* Use rm -f when removing a git repo\n\t* Fix quoting bug (Debian #699093)\n\n2013-02-13  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.0.1\n\t* Improve documentation\n\t* Fix parameter bug\n\n2012-06-30  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Release 1.0\n\t* Make `vcsh list` more resilient\n\t* Lots of doc improvements\n\n2012-02-27  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Refactor Makefile\n\t* Fix license information in manpage\n\n2012-02-15  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Introduce `vcsh which`\n\t* hooks will tell you when they are being executed\n\t* Formatting & resilience improvements\n\t* We have a changelog, now! (yay)\n\n2012-02-03  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Improve documentation\n\t* More resilient error handling\n\t* Add AUTHORS\n\n2012-01-16  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Introduce hook support\n\n2011-12-27  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Improve documentation\n\n2011-12-26  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Introduce and use .config/vcsh/config\n\t* More verbose error handling\n\t* Introduce `vcsh {list-tracked,list-tracked-by}`\n\t* Introduce repo shortcuts (`vcsh zsh commit`)\n\t* Rename `vcsh seed-gitignore` to `vcsh write-gitignore`\n\t* Add license information\n\n2011-11-29  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Bugfixes\n\t* Refactor error handling\n\t* Make code more resilient\n\t* Make vcsh play nice with mr\n\t* Introduce vcsh mv and setup\n\n2011-11-23  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Bugfixes\n\t* Minor refactoring of code\n\n2011-11-22  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Bugfixes\n\n2011-11-20  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Major refactoring of code\n\t* Rewrite help files\n\t* Bugfixes\n\n2011-11-19  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Bugfixes\n\t* Improve XDG compatibility\n\n2011-11-18  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Yet more documentation improvements\n\t* Makefile\n\t* Heed already-defined ENV variables within vcsh\n\t* Handle .gitignore.d/$repo automagically\n\n2011-11-11  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Major rewrite of all help files\n\t* Addition of manpage\n\n2011-10-27  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Bugfixes\n\t* Make help more verbose\n\t* Improve INSTALL\n\n2011-10-18  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Fixed bug in vcsh clone & init\n\n2011-10-17  Richard Hartmann <richih.mailinglist@gmail.com>\n\n\t* Initial release\n"
        },
        {
          "name": "completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 3.076171875,
          "content": "AC_PREREQ([2.69])\nAC_INIT([vcsh], [m4_esyscmd(build-aux/git-version-gen .tarball-version)])\nAC_CONFIG_AUX_DIR([build-aux])\nAC_CONFIG_MACRO_DIR([build-aux])\nAM_INIT_AUTOMAKE([foreign tar-pax dist-zstd dist-zip no-dist-gzip color-tests])\nAM_SILENT_RULES([yes])\n\nAC_ARG_WITH([standalone],\n            AS_HELP_STRING([--with-standalone],\n                           [Use configuration presets for a standalone script deployment @<:@default=no@:>@]),\n            [COMM=comm GIT=git GREP=grep SED=sed WC=wc SHELL=/bin/sh\n             with_deployment=standalone\n             with_man_page=no\n             enable_tests=no\n             with_bash_completion_dir=no\n             with_zsh_completion_dir=no\n             program_suffix=-standalone.sh\n             # By this point, ./configure has already handled its built in\n             # arguments and hence thinks program_suffix has made its way into\n             # program_transform_name. We're backtracking on it, so we have to\n             # do the work again manually.\n             # Code copied from generated ./configure at approx L2104 and 2108...\n             program_transform_name=\"s&\\$&$program_suffix&;$program_transform_name\"\n             program_transform_name=`printf \"%s\\n\" \"$program_transform_name\" | sed \"$ac_script\"`\n            ],\n            [])\n\nQUE_TRANSFORM_PACKAGE_NAME\nQUE_DEVELOPER_MODE\n\n# These macros must be run after processing our standalone setup because\n# they all expect the program name transformation setup to be complete.\nQUE_GIT_VERSION\nQUE_SHELL_COMPLETION_DIRS\nQUE_DIST_CHECKSUMS\n\nAC_PROG_GREP\nAC_PROG_SED\n\nQUE_PROGVAR([comm])\nQUE_PROGVAR([git])\nQUE_PROGVAR([wc])\n\nAC_ARG_WITH([deployment],\n            AS_HELP_STRING([--with-deployment],\n                           [Add deployment string to version @<:@default=@:>@]),\n            [],\n            [with_deployment=])\nAC_SUBST([DEPLOYMENT], [${with_deployment:+-$with_deployment}])\n\nAC_ARG_WITH([man-page],\n            AS_HELP_STRING([--with-man-page],\n                           [Generate man page @<:@default=yes@:>@]),\n            [],\n            [with_man_page=yes])\nAM_CONDITIONAL([ENABLE_MAN_PAGE],\n               [test x\"$with_man_page\" != x\"no\"])\n\nAM_COND_IF([SOURCE_IS_GIT],\n           [AM_COND_IF([ENABLE_MAN_PAGE],\n                       [QUE_PROGVAR([ronn])])\n])\n\nAM_COND_IF([SOURCE_IS_GIT],\n           m4_define([TESTDEF], [yes]),\n           m4_define([TESTDEF], [no]))\nAC_ARG_ENABLE([tests],\n              AS_HELP_STRING([--disable-tests],\n                             [Configure tooling to run tests @<:@default=TESTDEF@:>@]),\n              [],\n              [enable_tests=TESTDEF])\nAM_CONDITIONAL([ENABLE_TESTS],\n               [test x\"$enable_tests\" != x\"no\"])\n\nAM_COND_IF([ENABLE_TESTS], [\n       QUE_PROGVAR([prove])\n       AX_PROG_PERL_MODULES(Shell::Command, [],\n                            AC_MSG_ERROR(Perl module required for testing not found))\n       AX_PROG_PERL_MODULES(Test::Most, [],\n                            AC_MSG_ERROR(Perl module required for testing not found))\n])\n\nAC_CONFIG_FILES([Makefile])\nAC_CONFIG_FILES([vcsh], [chmod +x vcsh])\nAC_CONFIG_FILES([doc/vcsh.1.ronn])\n\nAC_OUTPUT\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "t",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcsh.in",
          "type": "blob",
          "size": 23.705078125,
          "content": "#!@SHELL@\n# Copyright (C) 2011-2015 Richard \"RichiH\" Hartmann <richih@debian.org>, see CONTRIBUTORS for details.\n# SPDX-License-Identifier: GPL-2.0-or-later\n#\n# While the following is not legally binding, the author would like to explain\n# the choice of GPLv2+ over GPLv3+. The author prefers GPLv3+ over GPLv2+ but\n# feels it's better to maintain full compatibility's with Git. In case Git ever\n# changes its licensing terms, which is admittedly extremely unlikely to the\n# point of being impossible, this software will most likely follow suit.\n\n# This should always be the first line of code to facilitate debugging\n[ -n \"$VCSH_DEBUG\" ] && set -vx\n\n# If '.r<N>-g<SHA>' is appended to the version, you are seeing an unreleased\n# version built from the main branch HEAD. If \"-standalone\" is appended you are\n# using a version built explicitly for portability as a standalone script\n# rather than being installed to a specific system.\nVCSH_VERSION='@VERSION@@DEPLOYMENT@'; export VCSH_VERSION\nVCSH_SELF='@TRANSFORMED_PACKAGE_NAME@'; export VCSH_SELF\n\n# Ensure all files created are accessible only to the current user.\numask 0077\n\nfatal() {\n\techo \"$VCSH_SELF: fatal: $1\" >&2\n\t[ -z \"$2\" ] && exit 1\n\texit \"$2\"\n}\n\n# We need to run getops as soon as possible so we catch -d and other\n# options that will modify our behaviour.\n# Commands are handled at the end of this script.\n# shellcheck disable=SC2220\nwhile getopts c:dv flag; do\n\tcase \"$flag\" in\n\t\td)\n\t\t\tset -vx\n\t\t\tVCSH_DEBUG=1\n\t\t\texport VCSH_DEBUG\n\t\t\techo 'debug mode on'\n\t\t\techo \"$VCSH_SELF $VCSH_VERSION\"\n\t\t\t;;\n\t\tv)\n\t\t\tVCSH_VERBOSE=1\n\t\t\texport VCSH_VERBOSE\n\t\t\techo 'verbose mode on'\n\t\t\techo \"$VCSH_SELF $VCSH_VERSION\"\n\t\t\t;;\n\t\tc)\n\t\t\tVCSH_OPTION_CONFIG=\"$OPTARG\"\n\t\t\texport VCSH_OPTION_CONFIG\n\t\t\t;;\n\tesac\ndone\nshift $((OPTIND-1))\n\nsource_all() {\n\t# Source file even if it's in $PWD and does not have any slashes in it\n\t# shellcheck source=/dev/null\n\tcase \"$1\" in\n\t\t*/*) . \"$1\";;\n\t\t*)   . \"$PWD/$1\";;\n\tesac;\n}\n\n\n# Read configuration and set defaults if anything's not set\n[ -n \"$VCSH_DEBUG\" ]                  && set -vx\n: \"${XDG_CONFIG_HOME:=\"$HOME/.config\"}\"\n\n# Read configuration files if there are any\n# shellcheck source=/dev/null\n[ -r \"/etc/vcsh/config\" ]             && . \"/etc/vcsh/config\"\n# shellcheck source=/dev/null\n[ -r \"$XDG_CONFIG_HOME/vcsh/config\" ] && . \"$XDG_CONFIG_HOME/vcsh/config\"\nif [ -n \"$VCSH_OPTION_CONFIG\" ]; then\n\t# Source $VCSH_OPTION_CONFIG if it can be read and is in $PWD of $PATH\n\tif [ -r \"$VCSH_OPTION_CONFIG\" ]; then\n\t\tsource_all \"$VCSH_OPTION_CONFIG\"\n\telse\n\t\tfatal \"Can not read configuration file '$VCSH_OPTION_CONFIG'\" 1\n\tfi\nfi\n[ -n \"$VCSH_DEBUG\" ]                  && set -vx\n\n# Read defaults\n: \"${VCSH_REPO_D:=\"$XDG_CONFIG_HOME/vcsh/repo.d\"}\"; export VCSH_REPO_D\n: \"${VCSH_HOOK_D:=\"$XDG_CONFIG_HOME/vcsh/hooks-enabled\"}\"; export VCSH_HOOK_D\n: \"${VCSH_OVERLAY_D:=\"$XDG_CONFIG_HOME/vcsh/overlays-enabled\"}\"; export VCSH_OVERLAY_D\n: \"${VCSH_BASE:=\"$HOME\"}\"; export VCSH_BASE\n: \"${VCSH_GITIGNORE:=exact}\"; export VCSH_GITIGNORE\n: \"${VCSH_GITATTRIBUTES:=none}\"; export VCSH_GITATTRIBUTES\n: \"${VCSH_WORKTREE:=absolute}\"; export VCSH_WORKTREE\n\nif [ ! \"x$VCSH_GITIGNORE\" = 'xexact' ] && [ ! \"x$VCSH_GITIGNORE\" = 'xnone' ] && [ ! \"x$VCSH_GITIGNORE\" = 'xrecursive' ]; then\n\tfatal \"'\\$VCSH_GITIGNORE' must equal 'exact', 'none', or 'recursive'\" 1\nfi\n\nif [ ! \"x$VCSH_WORKTREE\" = 'xabsolute' ] && [ ! \"x$VCSH_WORKTREE\" = 'xrelative' ]; then\n\tfatal \"'\\$VCSH_WORKTREE' must equal 'absolute', or 'relative'\" 1\nfi\n\n\n# editorconfig-checker-disable\nhelp() {\n\techo \"usage: $VCSH_SELF <options> <command>\n\n   options:\n   -c <file>            Source file\n   -d                   Enable debug mode\n   -v                   Enable verbose mode\n\n   commands:\n   clone [-b <branch>] \\\\\n         <remote> \\\\\n         [<repo>]       Clone from an existing repository\n   commit               Commit in all repositories\n   delete <repo>        Delete an existing repository\n   enter <repo>         Enter repository; spawn new instance of \\$SHELL\n                        with \\$GIT_DIR set.\n   foreach \\\\\n     [<-g>] [<-p>] \\\\\n     <git command>      Execute a command for every repository\n   help                 Display this help text\n   init <repo>          Initialize a new repository\n   list                 List all repositories\n   list-tracked \\\\\n        [<repo>]        List all files tracked all or one repositories\n   list-untracked \\\\\n        [<-a>] [<-r>]\n        [<repo>]        List all files not tracked by all or one repositories\n   pull                 Pull from all vcsh remotes\n   push                 Push to vcsh remotes\n   rename <repo> \\\\\n          <newname>     Rename repository\n   run <repo> \\\\\n       <command>        Use this repository\n   status \\\\\n     [--terse] [<repo>] Show statuses of all/one vcsh repositories\n   upgrade <repo>       Upgrade repository to currently recommended settings\n   version              Print version information\n   which <substring>    Find substring in name of any tracked file\n   write-gitignore \\\\\n   [<repo>]             Write .gitignore.d/<repo> via git ls-files\n\n   <repo> <git command> Shortcut to run git commands directly\n   <repo>               Shortcut to enter repository\" >&2\n}\n# editorconfig-checker-enable\n\ndebug() {\n\tif [ -n \"$VCSH_DEBUG\" ]; then echo \"$VCSH_SELF: debug: $*\"; fi\n}\n\nverbose() {\n\tif [ -n \"$VCSH_DEBUG\" ] || [ -n \"$VCSH_VERBOSE\" ]; then\n\t\techo \"$VCSH_SELF: verbose: $*\"\n\tfi\n}\n\nerror() {\n\techo \"$VCSH_SELF: error: $1\" >&2\n}\n\ninfo() {\n\techo \"$VCSH_SELF: info: $1\"\n}\n\nclone() {\n\thook pre-clone\n\t# Check if remote is reachable. Abort early if there's a typo, TLS certificate problem, etc\n\t@GIT@ ls-remote \"$GIT_REMOTE\" 2> /dev/null || fatal \"Can not reach '$GIT_REMOTE'\"\n\tinit\n\t# Test which, if any, given or detected branches can be pulled from.\n\t# In a future version, if we need the logic, we could do the following:\n\t#   git ls-remote ORIGIN\n\t#   get HEAD commit ID\n\t#   see what refs/heads/* match that commit ID\n\t#   set VCSH_BRANCH if only one match\n\t#   offer a list of all matching refs for the user to choose\n\tfor VCSH_BRANCH_TEST in \"$VCSH_BRANCH\" master trunk development; do\n\t\tif [ $(@GIT@ ls-remote \"$GIT_REMOTE\" \"$VCSH_BRANCH_TEST\" 2> /dev/null | @WC@ -l ) -lt 1 ]; then\n\t\t\tinfo \"remote branch '$VCSH_BRANCH_TEST' empty\"\n\t\telse\n\t\t\tinfo \"remote branch '$VCSH_BRANCH_TEST' found\"\n\t\t\tVCSH_BRANCH_REMOTE=$VCSH_BRANCH_TEST\n\t\t\tbreak\n\t\tfi\n\tdone\n\tif [ -z \"$VCSH_BRANCH_REMOTE\" ]; then\n\t\tinfo \"No non-empty remote branches found, aborting. Please run `$0 delete $VCSH_REPO_NAME`, determine the correct branch, and try again.\"\n\t\texit\n\tfi\n\tVCSH_BRANCH=$VCSH_BRANCH_REMOTE\n\n\t# Set up remote\n\t@GIT@ remote add origin \"$GIT_REMOTE\"\n\t@GIT@ checkout -b \"$VCSH_BRANCH\" || return $?\n\t@GIT@ config branch.\"$VCSH_BRANCH\".remote origin\n\t@GIT@ config branch.\"$VCSH_BRANCH\".merge  refs/heads/\"$VCSH_BRANCH\"\n\tGIT_VERSION_MAJOR=$(@GIT@ --version | @SED@ -E -n 's/.* ([0-9]+)\\..*/\\1/p' )\n\tif [ 1 -lt \"$GIT_VERSION_MAJOR\" ];then\n\t\t@GIT@ fetch origin \"$VCSH_BRANCH\"\n\telse\n\t\t@GIT@ fetch origin\n\tfi\n\thook pre-merge\n\t@GIT@ read-tree -n -mu origin/\"$VCSH_BRANCH\" \\\n\t\t|| fatal \"will stop after fetching and not try to merge!\n  Once this situation has been resolved, run 'vcsh $VCSH_REPO_NAME pull' to finish cloning.\" 17 # editorconfig-checker-disable-line\n\t@GIT@ -c merge.ff=true merge origin/\"$VCSH_BRANCH\"\n\thook post-merge\n\thook post-clone\n\tretire\n\thook post-clone-retired\n}\n\ncommit() {\n\thook_global pre-commit\n\tshift  # remove the \"commit\" command.\n\tfor VCSH_REPO_NAME in $(list); do\n\t\texport VCSH_REPO_NAME\n\t\techo \"$VCSH_REPO_NAME: \"\n\t\tGIT_DIR=$VCSH_REPO_D/$VCSH_REPO_NAME.git; export GIT_DIR\n\t\tuse\n\t\thook_repo pre-commit\n\t\t@GIT@ commit --untracked-files=no --quiet \"$@\"\n\t\thook_repo post-commit\n\t\tVCSH_COMMAND_RETURN_CODE=$?\n\t\techo\n\tdone\n\thook_global post-commit\n}\n\ndelete() {\n\tcd \"$VCSH_BASE\" || fatal \"could not enter '$VCSH_BASE'\" 11\n\tuse\n\tinfo \"This operation WILL DESTROY DATA!\"\n\tfiles=$(@GIT@ ls-files)\n\techo \"These files will be deleted:\n\n$files\n\nAGAIN, THIS WILL DELETE YOUR DATA!\nTo continue, type 'Yes, do as I say'\"\n\tread -r answer\n\t[ \"x$answer\" = 'xYes, do as I say' ] || exit 16\n\tfor file in $files; do\n\t\trm -f \"$file\" || info \"could not delete '$file', continuing with deletion\"\n\tdone\n\trm -rf \"$GIT_DIR\" || error \"could not delete '$GIT_DIR'\"\n}\n\nenter() {\n\thook pre-enter\n\tuse\n\t$SHELL\n\thook post-enter\n}\n\nforeach() {\n\thook_global pre-foreach\n\n\t# We default to prefixing `git` to all commands passed to foreach, but\n\t# allow running in general context with -g\n\tcommand_prefix=@GIT@\n\t# shellcheck disable=SC2220\n\twhile getopts gp flag; do\n\t\tcase \"$flag\" in\n\t\t\tg) unset command_prefix ;;\n\t\t\tp) VCSH_PRINT_REPO_PREFIX=1 ;;\n\t\tesac\n\tdone\n\tshift $((OPTIND-1))\n\texport VCSH_PRINT_REPO_PREFIX\n\tfor VCSH_REPO_NAME in $(list); do\n\t\texport VCSH_REPO_NAME\n\t\tGIT_DIR=$VCSH_REPO_D/$VCSH_REPO_NAME.git; export GIT_DIR\n\t\tuse\n\t\thook_repo pre-foreach\n\t\tif [ -n \"${VCSH_PRINT_REPO_PREFIX+x}\" ]; then\n\t\t\t$command_prefix \"$@\" | @SED@ \"s/^/$VCSH_REPO_NAME: /\"\n\t\telse\n\t\t\techo \"$VCSH_REPO_NAME:\"\n\t\t\t$command_prefix \"$@\"\n\t\tfi\n\t\thook_repo post-foreach\n\tdone\n\thook_global post-foreach\n}\n\ngit_dir_exists() {\n\t[ -d \"$GIT_DIR\" ] || fatal \"no repository found for '$VCSH_REPO_NAME'\" 12\n}\n\nhook_global() {\n\tfor hook in \"$VCSH_HOOK_D/$1\"*; do\n\t\t[ -x \"$hook\" ] || continue\n\t\tverbose \"executing '$hook'\"\n\t\t\"$hook\"\n\tdone\n}\n\nhook_repo() {\n\tfor hook in \"$VCSH_HOOK_D/$VCSH_REPO_NAME.$1\"*; do\n\t\t[ -x \"$hook\" ] || continue\n\t\tverbose \"executing '$hook'\"\n\t\t\"$hook\" || fatal \"hook [$hook] failed\" 1\n\tdone\n}\n\nhook() {\n\thook_global \"$1\"\n\thook_repo \"$1\"\n}\n\ninit() {\n\thook pre-init\n\t[ ! -e \"$GIT_DIR\" ] || fatal \"'$GIT_DIR' exists\" 10\n\tmkdir -p \"$VCSH_BASE\" || fatal \"could not create '$VCSH_BASE'\" 50\n\tcd \"$VCSH_BASE\" || fatal \"could not enter '$VCSH_BASE'\" 11\n\t@GIT@ init --shared=false\n\tupgrade\n\thook post-init\n}\n\nlist() {\n\tfor repo in \"$VCSH_REPO_D\"/*.git; do\n\t\t[ -d \"$repo\" ] && [ -r \"$repo\" ] && basename \"$repo\" .git\n\tdone\n}\n\nlist_has_remote() {\n\tfor VCSH_REPO_NAME in $(list); do\n\t\tGIT_DIR=$VCSH_REPO_D/$VCSH_REPO_NAME.git; export GIT_DIR\n\t\t# This command returns the tracking branch of the currently-checked-out local\n\t\t# branch, if any. See https://stackoverflow.com/a/9753364\n\t\t[ -n  \"$(@GIT@ for-each-ref \"$(@GIT@ symbolic-ref -q HEAD)\")\" ] && echo \"$VCSH_REPO_NAME\"\n\tdone\n}\n\nget_files() {\n\tGIT_DIR=$VCSH_REPO_D/$VCSH_REPO_NAME.git; export GIT_DIR\n\t@GIT@ ls-files --full-name\n}\n\nlist_tracked() {\n\tVCSH_REPO_NAME=$2; export VCSH_REPO_NAME\n\tif [ -n \"$VCSH_REPO_NAME\" ]; then\n\t\tget_files | list_tracked_helper\n\telse\n\t\tfor VCSH_REPO_NAME in $(list); do\n\t\t\tget_files\n\t\tdone | list_tracked_helper\n\tfi\n}\n\nlist_tracked_helper() {\n\t@SED@ \"s,^,$(printf '%s\\n' \"$VCSH_BASE/\" | @SED@ 's/[,\\&]/\\\\&/g'),\" | sort -u\n}\n\nlist_tracked_by() {\n\tlist_tracked '' \"$2\"\n}\n\nlist_untracked() {\n\ttemp_file_others=$(mktemp \"${TMPDIR:-/tmp}/tmp.XXXXXXXXXX\") || fatal 'Could not create temp file'\n\ttemp_file_untracked=$(mktemp \"${TMPDIR:-/tmp}/tmp.XXXXXXXXXX\") || fatal 'Could not create temp file'\n\ttemp_file_untracked_copy=$(mktemp \"${TMPDIR:-/tmp}/tmp.XXXXXXXXXX\") || fatal 'Could not create temp file'\n\n\t# Hack in support for `vcsh list-untracked -r`...\n\texclude_standard_opt='--exclude-standard'\n\tdirectory_opt='--directory'\n\tshift\n\twhile getopts ar flag; do\n\t\tcase \"$flag\" in\n\t\t\ta) unset exclude_standard_opt ;;\n\t\t\tr) unset directory_opt ;;\n\t\tesac\n\tdone\n\tshift $((OPTIND-1))\n\t# ...and parse for a potential parameter afterwards. As we shifted things out of $* in during getops, we need to look at $1\n\tVCSH_REPO_NAME=$1; export VCSH_REPO_NAME\n\n\tif [ -n \"$VCSH_REPO_NAME\" ]; then\n\t\tlist_untracked_helper \"$VCSH_REPO_NAME\"\n\telse\n\t\tfor VCSH_REPO_NAME in $(list); do\n\t\t\tlist_untracked_helper \"$VCSH_REPO_NAME\"\n\t\tdone\n\tfi\n\tcat \"$temp_file_untracked\"\n\n\tunset directory_opt directory_component\n\trm -f \"$temp_file_others\" \"$temp_file_untracked\" \"$temp_file_untracked_copy\" || fatal 'Could not delete temp files'\n}\n\nlist_untracked_helper() {\n\texport GIT_DIR=\"$VCSH_REPO_D/$VCSH_REPO_NAME.git\"\n\t@GIT@ ls-files --others $exclude_standard_opt $directory_opt | (\n\t\twhile read -r line; do\n\t\t\techo \"$line\"\n\t\t\tdirectory_component=${line%%/*}\n\t\t\t[ -d \"$directory_component\" ] && printf '%s/\\n' \"$directory_component\"\n\t\tdone\n\t\t) | sort -u > \"$temp_file_others\"\n\tif [ -z \"$ran_once\" ]; then\n\t\tran_once=1\n\t\tcp \"$temp_file_others\" \"$temp_file_untracked\" || fatal 'Could not copy temp file'\n\tfi\n\tcp \"$temp_file_untracked\" \"$temp_file_untracked_copy\" || fatal 'Could not copy temp file'\n\t@COMM@ -12 \"$temp_file_others\" \"$temp_file_untracked_copy\" > \"$temp_file_untracked\"\n}\n\npull() {\n\thook_global pre-pull\n\tfor VCSH_REPO_NAME in $(list_has_remote); do\n\t\texport VCSH_REPO_NAME\n\t\tprintf '%s: ' \"$VCSH_REPO_NAME\"\n\t\tGIT_DIR=$VCSH_REPO_D/$VCSH_REPO_NAME.git; export GIT_DIR\n\t\tuse\n\t\thook_repo pre-pull\n\t\t@GIT@ pull\n\t\thook_repo post-pull\n\t\tVCSH_COMMAND_RETURN_CODE=$?\n\t\techo\n\tdone\n\thook_global post-pull\n}\n\npush() {\n\thook_global pre-push\n\tfor VCSH_REPO_NAME in $(list_has_remote); do\n\t\texport VCSH_REPO_NAME\n\t\tprintf '%s: ' \"$VCSH_REPO_NAME\"\n\t\tGIT_DIR=$VCSH_REPO_D/$VCSH_REPO_NAME.git; export GIT_DIR\n\t\tuse\n\t\thook_repo pre-push\n\t\t@GIT@ push\n\t\thook_repo post-push\n\t\tVCSH_COMMAND_RETURN_CODE=$?\n\t\techo\n\tdone\n\thook_global post-push\n}\n\nretire() {\n\tunset VCSH_DIRECTORY\n}\n\nrename() {\n\tgit_dir_exists\n\t[ -d \"$GIT_DIR_NEW\" ] && fatal \"'$GIT_DIR_NEW' exists\" 54\n\tmv -f \"$GIT_DIR\" \"$GIT_DIR_NEW\" || fatal \"Could not mv '$GIT_DIR' '$GIT_DIR_NEW'\" 52\n\n\t# Now that the repository has been renamed, we need to fix up its configuration\n\t# Overwrite old name..\n\tGIT_DIR=$GIT_DIR_NEW\n\tVCSH_REPO_NAME=$VCSH_REPO_NAME_NEW\n\t# ..and clobber all old configuration\n\tupgrade\n}\n\nrun() {\n\thook pre-run\n\tuse\n\t\"$@\"\n\tVCSH_COMMAND_RETURN_CODE=$?\n\thook post-run\n}\n\nstatus() {\n\tif [ -t 1 ]; then\n\t\tCOLORING=\"-c color.status=always\"\n\tfi\n\tif [ -n \"$VCSH_REPO_NAME\" ]; then\n\t\tstatus_helper \"$VCSH_REPO_NAME\"\n\telse\n\t\tfor VCSH_REPO_NAME in $(list); do\n\t\t\tSTATUS=\"$(status_helper \"$VCSH_REPO_NAME\" \"$COLORING\")\"\n\t\t\t[ -n \"$STATUS\" ] || [ -z \"$VCSH_STATUS_TERSE\" ] && echo \"$VCSH_REPO_NAME:\"\n\t\t\t[ -n \"$STATUS\" ]            && echo \"$STATUS\"\n\t\t\t[ -z \"$VCSH_STATUS_TERSE\" ] && echo\n\t\tdone\n\tfi\n}\n\n# Warning: disabled quoting check here due to all of them relating to\n#          wc -l  output and a deliberate lack of quoting for git args.\n# shellcheck disable=SC2086\nstatus_helper() {\n\tGIT_DIR=$VCSH_REPO_D/$1.git; export GIT_DIR\n\tVCSH_GIT_OPTIONS=\"-c status.relativePaths=false $2\"\n\tuse\n\t# Shellcheck isn't understanding a complex block.\n\t# shellcheck disable=SC1083\n\tremote_tracking_branch=$(@GIT@ rev-parse --abbrev-ref --symbolic-full-name @{u} 2> /dev/null) && {\n\t\tcommits_behind=$(@GIT@ log ..${remote_tracking_branch} --oneline | @WC@ -l)\n\t\tcommits_ahead=$(@GIT@ log ${remote_tracking_branch}.. --oneline | @WC@ -l)\n\t\t[ ${commits_behind} -ne 0 ] && echo \"Behind $remote_tracking_branch by $commits_behind commits\"\n\t\t[ ${commits_ahead} -ne 0 ] && echo \"Ahead of $remote_tracking_branch by $commits_ahead commits\"\n\t}\n\t@GIT@ ${VCSH_GIT_OPTIONS} status --short --untracked-files='no' | @SED@ -E 's@([^ ] +)@\\1~/@'\n\tVCSH_COMMAND_RETURN_CODE=$?\n}\n\nupgrade() {\n\thook pre-upgrade\n\t# fake-bare repositories are not bare, actually. Set this to false\n\t# because otherwise Git complains \"fatal: core.bare and core.worktree\n\t# do not make sense\"\n\t@GIT@ config core.bare false\n\t# core.worktree may be absolute or relative to $GIT_DIR, depending on\n\t# user preference\n\tif [ ! \"x$VCSH_WORKTREE\" = 'xabsolute' ]; then\n\t\t@GIT@ config core.worktree \"$(cd \"$GIT_DIR\" && GIT_WORK_TREE=$VCSH_BASE @GIT@ rev-parse --show-cdup)\"\n\telif [ ! \"x$VCSH_WORKTREE\" = 'xrelative' ]; then\n\t\t@GIT@ config core.worktree \"$VCSH_BASE\"\n\tfi\n\t[ ! \"x$VCSH_GITIGNORE\" = 'xnone' ] && @GIT@ config core.excludesfile \".gitignore.d/$VCSH_REPO_NAME\"\n\t[ ! \"x$VCSH_GITATTRIBUTES\" = 'xnone' ] && @GIT@ config core.attributesfile \".gitattributes.d/$VCSH_REPO_NAME\"\n\t@GIT@ config vcsh.vcsh 'true'\n\tuse\n\t[ -e \"$VCSH_BASE/.gitignore.d/$VCSH_REPO_NAME\" ] && @GIT@ add -f \"$VCSH_BASE/.gitignore.d/$VCSH_REPO_NAME\"\n\t[ -e \"$VCSH_BASE/.gitattributes.d/$VCSH_REPO_NAME\" ] && @GIT@ add -f \"$VCSH_BASE/.gitattributes.d/$VCSH_REPO_NAME\"\n\thook post-upgrade\n}\n\nuse() {\n\tgit_dir_exists\n\tVCSH_DIRECTORY=$VCSH_REPO_NAME; export VCSH_DIRECTORY\n}\n\nwhich() {\n\t# It's ok to modify VCSH_REPO_NAME in a subshell.\n\t# shellcheck disable=SC2030\n\toutput=$(for VCSH_REPO_NAME in $(list); do\n\t\tget_files | @GREP@ -- \"$VCSH_COMMAND_PARAMETER\" | @SED@ \"s/^/$VCSH_REPO_NAME: /\"\n\tdone | sort -u)\n\tif [ -z \"$output\" ]; then\n\t\tfatal \"'$VCSH_COMMAND_PARAMETER' does not exist\" 1\n\telse\n\t\techo \"$output\"\n\tfi\n}\n\n# Ignore warnings about VCSH_REPO_NAME being changed in a subshell.\n# shellcheck disable=SC2031\nwrite_gitignore() {\n\t# Don't do anything if the user does not want to write gitignore\n\tif [ \"x$VCSH_GITIGNORE\" = 'xnone' ]; then\n\t\tinfo \"Not writing gitignore as '\\$VCSH_GITIGNORE' is set to 'none'\"\n\t\texit\n\tfi\n\n\tuse\n\tcd \"$VCSH_BASE\" || fatal \"could not enter '$VCSH_BASE'\" 11\n\t# Works in all shells we care about.\n\t# shellcheck disable=SC2039,SC3043\n\tlocal GIT_VERSION GIT_VERSION_MAJOR GIT_VERSION_MINOR\n\tGIT_VERSION=\"$(@GIT@ --version)\"\n\tGIT_VERSION_MAJOR=\"$(echo \"$GIT_VERSION\" | @SED@ -E -n 's/.* ([0-9]+)\\..*/\\1/p')\"\n\tGIT_VERSION_MINOR=\"$(echo \"$GIT_VERSION\" | @SED@ -E -n 's/.* ([0-9]+)\\.([0-9]+)\\..*/\\2/p')\"\n\tOLDIFS=$IFS\n\tIFS=$(printf '\\n\\t')\n\tgitignores=$(for file in $(@GIT@ ls-files); do\n\t\twhile true; do\n\t\t\techo \"$file\"; new=${file%/*}\n\t\t\t[ x\"$file\" = x\"$new\" ] && break\n\t\t\tfile=$new\n\t\tdone;\n\tdone | sort -u)\n\n\t# Contrary to GNU mktemp, mktemp on BSD/OSX requires a template for temp files\n\t# Using a template makes GNU mktemp default to $PWD and not #TMPDIR for tempfile location\n\t# To make every OS happy, set full path explicitly\n\tlocal tempfile\n\ttempfile=$(mktemp \"${TMPDIR:-/tmp}/tmp.XXXXXXXXXX\") ||\n\t\tfatal \"could not create tempfile: '${tempfile}'\" 51\n\n\techo '*' > \"$tempfile\" || fatal \"could not write to '$tempfile'\" 57\n\tfor gitignore in $gitignores; do\n\t\techo \"$gitignore\" | @SED@ 's@^@!/@' >> \"$tempfile\" ||\n\t\t\tfatal \"could not write to '$tempfile'\" 57\n\t\tif [ \"x$VCSH_GITIGNORE\" = 'xrecursive' ] && [ -d \"$gitignore\" ]; then\n\t\t\t{ echo \"$gitignore/*\" | @SED@ 's@^@!/@' >> \"$tempfile\" ||\n\t\t\t\tfatal \"could not write to '$tempfile'\" 57; }\n\t\tfi\n\tdone\n\tIFS=$OLDIFS\n\tlocal GIT_IGNORE_PATH\n\tGIT_IGNORE_PATH=\"$VCSH_BASE/.gitignore.d/$VCSH_REPO_NAME\"\n\tif diff -N \"$tempfile\" \"$GIT_IGNORE_PATH\" > /dev/null; then\n\t\tinfo \"'$GIT_IGNORE_PATH' already up to date\"\n\t\trm -f \"$tempfile\" || fatal \"could not delete '$tempfile'\" 59\n\t\treturn\n\tfi\n\tif [ -e \"$GIT_IGNORE_PATH\" ]; then\n\t\tinfo \"'$GIT_IGNORE_PATH' differs from new data, moving it to '$GIT_IGNORE_PATH.bak'\"\n\t\tmv -f \"$GIT_IGNORE_PATH\"{,.bak} ||\n\t\t\tfatal \"could not move '$GIT_IGNORE_PATH' to '$GIT_IGNORE_PATH.bak'\" 53\n\tfi\n\tmv -f \"$tempfile\" \"$GIT_IGNORE_PATH\" ||\n\t\tfatal \"could not move '$tempfile' to '$GIT_IGNORE_PATH'\" 53\n}\n\ndebug \"$(@GIT@ version)\"\n\nif [ ! \"x$VCSH_GITIGNORE\" = 'xexact' ] && [ ! \"x$VCSH_GITIGNORE\" = 'xnone' ] && [ ! \"x$VCSH_GITIGNORE\" = 'xrecursive' ]; then\n\tfatal \"'\\$VCSH_GITIGNORE' must equal 'exact', 'none', or 'recursive'\" 1\nfi\n\nVCSH_COMMAND=$1; export VCSH_COMMAND\n\ncase $VCSH_COMMAND in\n\tclon|clo|cl) VCSH_COMMAND=clone;;\n\tcommi|comm|com|co|ci) VCSH_COMMAND=commit;;\n\tdelet|dele|del|de) VCSH_COMMAND=delete;;\n\tente|ent|en) VCSH_COMMAND=enter;;\n\thel|he) VCSH_COMMAND=help;;\n\tini|in) VCSH_COMMAND=init;;\n\tpul) VCSH_COMMAND=pull;;\n\tpus) VCSH_COMMAND=push;;\n\trenam|rena|ren|re) VCSH_COMMAND=rename;;\n\tru) VCSH_COMMAND=run;;\n\tstatu|stat|sta|st) VCSH_COMMAND=status;;\n\tupgrad|upgra|upgr|up) VCSH_COMMAND=upgrade;;\n\tversio|versi|vers|ver|ve) VCSH_COMMAND=version;;\n\twhich|whi|wh) VCSH_COMMAND=which;;\n\twrite|writ|wri|wr) VCSH_COMMAND=write-gitignore;;\nesac\n\nif [ x\"$VCSH_COMMAND\" = x'clone' ]; then\n\tVCSH_BRANCH=\n\tif [ \"$2\" = -b ]; then\n\t\tVCSH_BRANCH=$3\n\t\tshift\n\t\tshift\n\tfi\n\t[ -z \"$2\" ] && fatal \"$VCSH_COMMAND: please specify a remote\" 1\n\tGIT_REMOTE=\"$2\"\n\t[ -n \"$VCSH_BRANCH\" ] || if [ \"$3\" = -b ]; then\n\t\tVCSH_BRANCH=$4\n\t\tshift\n\t\tshift\n\tfi\n\tif [ -n \"$3\" ]; then\n\t\tVCSH_REPO_NAME=$3\n\t\t[ -z \"$VCSH_BRANCH\" ] && [ \"$4\" = -b ] && VCSH_BRANCH=$5\n\telse\n\t\tVCSH_REPO_NAME=$(basename \"${GIT_REMOTE#*:}\" .git)\n\tfi\n\t[ -z \"$VCSH_REPO_NAME\" ] && fatal \"$VCSH_COMMAND: could not determine repository name\" 1\n\texport VCSH_REPO_NAME\n\t[ -n \"$VCSH_BRANCH\" ] || VCSH_BRANCH=main\n\tGIT_DIR=$VCSH_REPO_D/$VCSH_REPO_NAME.git; export GIT_DIR\nelif [ \"$VCSH_COMMAND\" = 'help' ]; then\n\thelp && exit\nelif [ \"$VCSH_COMMAND\" = 'version' ]; then\n\techo \"$VCSH_SELF $VCSH_VERSION\"\n\t@GIT@ version\n\texit\nelif [ x\"$VCSH_COMMAND\" = x'which' ]; then\n\t[ -z \"$2\" ] && fatal \"$VCSH_COMMAND: please specify a filename\" 1\n\t[ -n \"$3\" ] && fatal \"$VCSH_COMMAND: too many parameters\" 1\n\tVCSH_COMMAND_PARAMETER=$2; export VCSH_COMMAND_PARAMETER\nelif [ x\"$VCSH_COMMAND\" = x'delete' ]           ||\n\t[ x\"$VCSH_COMMAND\" = x'enter' ]            ||\n\t[ x\"$VCSH_COMMAND\" = x'init' ]             ||\n\t[ x\"$VCSH_COMMAND\" = x'list-tracked-by' ]  ||\n\t[ x\"$VCSH_COMMAND\" = x'rename' ]           ||\n\t[ x\"$VCSH_COMMAND\" = x'run' ]              ||\n\t[ x\"$VCSH_COMMAND\" = x'upgrade' ]          ||\n\t[ x\"$VCSH_COMMAND\" = x'write-gitignore' ]; then\n\tif [ -z \"$2\" ]; then\n\t\t[ -z \"$VCSH_REPO_NAME\" ] && fatal \"$VCSH_COMMAND: please specify repository to work on\" 1\n\telse\n\t\tVCSH_REPO_NAME=$2; export VCSH_REPO_NAME\n\tfi\n\tGIT_DIR=$VCSH_REPO_D/$VCSH_REPO_NAME.git; export GIT_DIR\n\t[ x\"$VCSH_COMMAND\" = x'rename' ] && [ -z \"$3\" ] && fatal \"$VCSH_COMMAND: please specify a target name\" 1\n\t[ x\"$VCSH_COMMAND\" = x'run'    ] && [ -z \"$3\" ] && fatal \"$VCSH_COMMAND: please specify a command\" 1\n\t[ x\"$VCSH_COMMAND\" = x'rename' ] && { VCSH_REPO_NAME_NEW=$3; export VCSH_REPO_NAME_NEW;\n\tGIT_DIR_NEW=$VCSH_REPO_D/$VCSH_REPO_NAME_NEW.git; export GIT_DIR_NEW; }\n\t[ x\"$VCSH_COMMAND\" = x'run' ]    && shift 2\nelif [ x\"$VCSH_COMMAND\" = x'foreach' ]; then\n\t[ -z \"$2\" ] && fatal \"$VCSH_COMMAND: please specify a command\" 1\n\tshift 1\nelif [ x\"$VCSH_COMMAND\" = x'commit' ] ||\n\t[ x\"$VCSH_COMMAND\" = x'list'   ] ||\n\t[ x\"$VCSH_COMMAND\" = x'list-tracked' ] ||\n\t[ x\"$VCSH_COMMAND\" = x'list-untracked' ] ||\n\t[ x\"$VCSH_COMMAND\" = x'pull'   ] ||\n\t[ x\"$VCSH_COMMAND\" = x'push'   ]; then\n\t:\nelif [ x\"$VCSH_COMMAND\" = x'status' ]; then\n\tif [ x\"$2\" = x'--terse' ]; then\n\t\tVCSH_STATUS_TERSE=1; export VCSH_STATUS_TERSE\n\t\tshift\n\tfi\n\tVCSH_REPO_NAME=$2; export VCSH_REPO_NAME\nelif [ -n \"$2\" ]; then\n\tVCSH_COMMAND='run'; export VCSH_COMMAND\n\tVCSH_REPO_NAME=$1; export VCSH_REPO_NAME\n\tGIT_DIR=$VCSH_REPO_D/$VCSH_REPO_NAME.git; export GIT_DIR\n\t[ -d \"$GIT_DIR\" ] || { help; exit 1; }\n\tshift 1\n\tset -- \"@GIT@\" \"$@\"\nelif [ -n \"$VCSH_COMMAND\" ]; then\n\tVCSH_COMMAND='enter'; export VCSH_COMMAND\n\tVCSH_REPO_NAME=$1; export VCSH_REPO_NAME\n\tGIT_DIR=$VCSH_REPO_D/$VCSH_REPO_NAME.git; export GIT_DIR\n\t[ -d \"$GIT_DIR\" ] || { help; exit 1; }\nelse\n\t# $1 is empty\n\thelp && exit 1\nfi\n\n# Did we receive a directory instead of a name?\n# Mangle the input to fit normal operation.\nif echo \"$VCSH_REPO_NAME\" | @GREP@ -q '/'; then\n\tGIT_DIR=$VCSH_REPO_NAME; export GIT_DIR\n\tVCSH_REPO_NAME=$(basename \"$VCSH_REPO_NAME\" .git); export VCSH_REPO_NAME\nfi\n\ncheck_dir() {\n\tcheck_directory=\"$1\"\n\tif [ ! -d \"$check_directory\" ]; then\n\t\tif [ -e \"$check_directory\" ]; then\n\t\t\tfatal \"'$check_directory' exists but is not a directory\" 13\n\t\telse\n\t\t\tverbose \"attempting to create '$check_directory'\"\n\t\t\tmkdir -p \"$check_directory\" || fatal \"could not create '$check_directory'\" 50\n\t\tfi\n\tfi\n}\n\ncheck_dir \"$VCSH_REPO_D\"\n[ ! \"x$VCSH_GITIGNORE\" = 'xnone' ] && check_dir \"$VCSH_BASE/.gitignore.d\"\n[ ! \"x$VCSH_GITATTRIBUTES\" = 'xnone' ] && check_dir \"$VCSH_BASE/.gitattributes.d\"\n\nverbose \"$VCSH_COMMAND begin\"\nVCSH_COMMAND=$(echo \"$VCSH_COMMAND\" | @SED@ 's/-/_/g'); export VCSH_COMMAND\n\n# Source repo-specific configuration file\n# shellcheck source=/dev/null\n[ -r \"$XDG_CONFIG_HOME/vcsh/config.d/$VCSH_REPO_NAME\" ] \\\n\t&& . \"$XDG_CONFIG_HOME/vcsh/config.d/$VCSH_REPO_NAME\"\n\n# source overlay functions\nfor overlay in \"$VCSH_OVERLAY_D/$VCSH_COMMAND\"* \"$VCSH_OVERLAY_D/$VCSH_REPO_NAME.$VCSH_COMMAND\"*; do\n\t[ -r \"$overlay\" ] || continue\n\tinfo \"sourcing '$overlay'\"\n\t# shellcheck source=/dev/null\n\t. \"$overlay\"\ndone\n\nhook pre-command\n$VCSH_COMMAND \"$@\"\nhook post-command\nverbose \"$VCSH_COMMAND end, exiting\"\nexit $VCSH_COMMAND_RETURN_CODE\n\n# Local Variables:\n# mode:shell-script\n# sh-shell:sh\n# End:\n# vim: ft=sh:\n"
        }
      ]
    }
  ]
}