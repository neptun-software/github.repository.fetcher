{
  "metadata": {
    "timestamp": 1736568417049,
    "page": 365,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "screetsec/Sudomy",
      "stars": 2038,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0107421875,
          "content": "Dockerfile\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.064453125,
          "content": "*.shell linguist-detectable=true\n*.html linguist-detectable=false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.029296875,
          "content": "sudomy.api\n__pycache__\noutput\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.74609375,
          "content": "# Change Log\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/)\n\n## [1.1.0] - 2019-08-24\n```Initial commit```\n -  Fixing\n       - Webarchive : remove email contains on list domain.\n       - Docker image : add chromium webdriver for webscreenshot.\n\n       \n## [1.1.0] - 2019-08-31\n -  Update\n       - Filtering list subdomain result more specific - (subdomain.txt)\n\n## [1.1.0] - 2019-10-21\n -  Update\n       - DNSDumpster update regex for retrieving csrfMiddlewaretoken values\n    \n## [1.1.1] - 2020-02-12\n -  Update\n       - CRTSH update regex for retrieving subdomain\n   \n## [1.1.2] - 2020-02-15\n -  Update\n       - Added Identify technologies on websites from domain list\n       - Fix Some Bug and Issues\n\n## [1.1.3] - 2020-04-03\n - Update\n\t- Added Plugin IP DB_PORT\n\t- Explain :\n\t\t- Data Collecting/Scraping open port from 3rd party (Default::Shodan), For right now just using Shodan [Future::Censys,Zoomeye] \n\t\t- So we do not perfom active scan, who collect the port ? Third-party sites (Shodan,Zoomeye,Censys) doing that and perfom active scan and then, we just collected the port from their result   \n\t\t- More efficient and effective to collecting port from list ip on target [[ Subdomain > IP Resolver > Crawling > ASN & Open Port ]]\n\t\t- Here we can further narrow the targeting port for checking in port scanning\n\n\t\t- List ASN From IP List [running auto on db_port::ip_dbasn.txt]\n\n\n## [1.1.4] - 2020-04-19\n - Update\n\t- Added Plugin for Extract URL parameter from domain (--extract-params/-ep)\n\t- Explain :\n\t\t- Data Collecting & Scraping URL Parameter from Passive scan (Default::Web Archive) \n\t\t- Regex using DFA Engine (awk,sed)\n\t\t- Support and Collecting URL with multi Parameter to Fuzzing\n\t\t- Removing Duplicate Parameter & URL\n\t\t- Passive_Collecting_URLParamter.txt : This File is original Collecting URL Parameter without Parsing \n\t- Fixing Bug in statement Plugin --db-port\n\n## [1.1.5] - 2020-05-09\n - Update\n\t- Added New Engine selecting the good third-party sites \n\t\t- RapidDNS \n\t\t- AlienVault \n\t\t- CommonCrawl\n\t\t- UrlScanIo \n\t- Added Data Collecting Juicy URL & Scraping URL Parameter from Passive scan (Default::Web Archive,CommonCrawl,UrlScanIO)\n\t\t- CommonCrawl\n\t\t- WebArchive\n\t\t- UrlScanIo\n\t- Added Define path for outputfile (specify an output file when completed)\n\t- Handling Ouptut Error Entrust [403] \n\t- Change the -o Argument to outputfile\n\t- Fix & Clean Code\n\t- Remove The engine (Third-party sites) to new folder for easy fixing & patch\n\t- Update Docker Images - Sudomy 1.1.5#dev\n\n## [1.1.6] - 2020-06-06\n - Update\n\t- Added binary 3rd pkg to lib/bin for easy management/handling\n        - Added New Plugin httpx  \n\t\t- Detection urls, ports, title, content-length, status-code, response-body probbing.\n\t\t- Smart auto fallback from https to http as default.\n\n        - Added New Plugin dnsprobe                \n                - Perform multiple dns queries of your choice with a list of user supplied resolvers\n\n\t- Remove the Plugin to new folder for easy fixing, update & path\n\n## [1.1.7] - 2020-06-06\n - Update\n        - Added New Plugin webanalyze\n\t- For using plugin apps-identifider/-ai , you can choice useing wappalyzer or webanalyze (default::wappalyzer)\n\t\t- example : ./sudomy -d bugcrowd.com -aI webanalyze \n\t- Added Clouder IP Checker (Just run with argument -cf or --dnsprobe -cf )\n\t\t- IP Resolve -> Cloudfare IP Checker\n\t- Added Plugin Websocket Check\n\n\n\n## [1.1.8] - 2020-06-29\n- Update\n        - Added New Plugin Generate Wordlist\n\t- Generate & make  wordlist based on collecting url resources (wayback,urlscan,commoncrawl)\n\t\t- To make that, we Extract All the paramater and path from our domain recon\n\t- Added New plugin to screenshot using gowitness\n\t\t- Default argument -ss (default running: gowitness)\n\t\t- You can choice another screenshot tools, like (-ss webscreeenshot)  \n\t- Update & Added package on \"/lib/bin\"\n\t- Added Extract Interest URL Like Document extension (pdf,docx),Javascript,Interesting path & Files\n\t- Fixing and Added regex to parsing url and parameter\n\t- Change native subdomain take over to using subjack \n\t- Added to check cname (Subdomain > CNAME resolv > NXDOMAIN | Pattern matching )\n\n## [1.1.9] - 2020-10-13\n - Update\n        - Added Feature Sending notifications to a slack channel \n\n## [1.2.0] - 2020-12-14\n - Update\n\t- Fixed and update regular expresion shodan to crawling subdomain\n\t- Added Engine/Resources\n              - DNSDB - OK\n              - Spyse - Ok\n              - RiskIQ/PassiveTotal - Ok\n              - Facebook Cert Transparency - Ok\n\t- Remove Entrust Sources (Not accessible) anymore\n\t- Findsubdomains replace to Spyse\n\t\n## [1.2.1] - 2020-01-09\n - Update\n        - Added Feature Generate Network Graph Visualization Subdomain & Virtualhosts\t\n\t- Fixing Bug on Engine/Resources\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.724609375,
          "content": "FROM chromedp/headless-shell:latest AS builder\n\nENV PHANTOMJS_VERSION=2.1.1 PATH=\"$PATH:/usr/lib/sudomy\"\nRUN apt update \\\n    && apt install -y --no-install-recommends git \\\n    apt-transport-https \\\n    bzip2 \\\n    nmap \\\n    jq \\\n    curl \\\n    python3 \\\n    python3-pip \\\n    make \\\n    musl-dev \\\n    dnsutils \\\n    wget \\\n\tparallel \\\n\tgrep \\\n    bsdmainutils \\\n    # Install NodeJS 10.x\n    && curl -sL https://deb.nodesource.com/setup_14.x -o setup.sh \\\n    && bash setup.sh \\\n    && apt install -y nodejs \\\n    # Install PhantomJS\n    && curl -k -Ls https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-${PHANTOMJS_VERSION}-linux-x86_64.tar.bz2 | tar -jxvf - -C / && \\\n    cp phantomjs-${PHANTOMJS_VERSION}-linux-x86_64/bin/phantomjs /usr/local/bin/phantomjs \\\n    && rm -fR phantomjs-${PHANTOMJS_VERSION}-linux-x86_64 \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n    && echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | tee /etc/apt/sources.list.d/google-chrome.list \\\n    && apt-get update \\\n    && apt-get install google-chrome-stable -y \\\n    && pip3 install --upgrade setuptools wheel\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip3 install -r requirements.txt\n\nFROM builder\nENV PATH \"$PATH:/usr/lib/sudomy/lib/bin\"\nENV SHODAN_API=\"\" CENSYS_API=\"\" CENSYS_SECRET=\"\" VIRUSTOTAL=\"\" BINARYEDGE=\"\" SECURITY_TRAILS=\"\" DNSDB_API=\"\" PASSIVE_API=\"\" SPYSE_API=\"\" FACEBOOK_TOKEN=\"\" YOUR_WEBHOOK_URL=\"\"\nRUN npm config set unsafe-perm true \\\n    # Install wappalyzer & wscat\n    && npm i -g wappalyzer wscat\n\nADD . /usr/lib/sudomy\nWORKDIR /usr/lib/sudomy\nCOPY --from=builder /app/ ./\n\nVOLUME [\"/usr/lib/sudomy\"]\n\nCMD [\"--help\"]\nENTRYPOINT [\"sudomy\"]\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0595703125,
          "content": "MIT License\n\nCopyright (c) 2019 ᴱᴰᴼ ᴹᴬᴸᴬᴺᴰ\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.60546875,
          "content": "# Sudomy\n[![License](https://img.shields.io/badge/license-MIT-red.svg)](https://github.com/Screetsec/Sudomy/blob/master/LICENSE.md)  [![Build Status](https://action-badges.now.sh/screetsec/sudomy)](https://github.com/Screetsec/Sudomy/actions)  [![Version](https://img.shields.io/badge/Release-1.2.1-red.svg?maxAge=259200)]()  [![Build](https://img.shields.io/badge/Supported_OS-Linux-yellow.svg)]()  [![Build](https://img.shields.io/badge/Supported_WSL-Windows-blue.svg)]() [![Contributions Welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/screetsec/sudomy/issues) [![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.me/screetsec)\n### Subdomain Enumeration & Analysis\n<img width=\"935\" alt=\"sudomy\" src=\"https://user-images.githubusercontent.com/17976841/102172910-685b5a80-3ecc-11eb-9bac-3003d786dd33.png\">\n\n\n\n***Sudomy*** is a subdomain enumeration tool to collect subdomains and analyzing domains performing advanced automated reconnaissance (framework). This tool can also be used for OSINT (Open-source intelligence) activities.\n\n## Features !\n##### For recent time, ***Sudomy*** has these 20 features:\n-  Easy, light, fast and powerful. Bash script (controller) is available by default in almost all Linux distributions. By using bash script multiprocessing feature, all processors will be utilized optimally.\n-  Subdomain enumeration process can be achieved by using **active** method or **passive** method\n    - **Active Method**\n        - *Sudomy* utilize Gobuster tools because of its highspeed performance in carrying out DNS Subdomain Bruteforce attack (wildcard support). The wordlist that is used comes from combined SecList (Discover/DNS) lists which contains around 3 million entries\n\n    - **Passive Method**\n        - By evaluating and **selecting** the **good** third-party sites/resources, the enumeration process can be **optimized**. More results will be obtained with less time required. *Sudomy* can collect data from these  well-curated 22 third-party sites:\n\n\t\t\t\thttps://censys.io\n\t\t\t\thttps://developer.shodan.io\n\t\t\t\thttps://dns.bufferover.run\n\t\t\t\thttps://index.commoncrawl.org \n\t\t\t\thttps://riddler.io \n\t\t\t\thttps://api.certspotter.com\n\t\t\t\thttps://api.hackertarget.com \n\t\t\t\thttps://api.threatminer.org\n\t\t\t\thttps://community.riskiq.com\n\t\t\t\thttps://crt.sh\n\t\t\t\thttps://dnsdumpster.com\n\t\t\t\thttps://docs.binaryedge.io\n\t\t\t\thttps://securitytrails.com\n\t\t\t\thttps://graph.facebook.com\n\t\t\t\thttps://otx.alienvault.com\n\t\t\t\thttps://rapiddns.io\n\t\t\t\thttps://spyse.com\n\t\t\t\thttps://urlscan.io\n\t\t\t\thttps://www.dnsdb.info\n\t\t\t\thttps://www.virustotal.com\n\t\t\t\thttps://threatcrowd.org\n\t\t\t\thttps://web.archive.org\n- Test the list of collected subdomains and probe for working http or https servers. This feature uses a third-party tool, [httprobe](https://github.com/tomnomnom/httprobe \"httprobe\").\n- Subdomain availability test based on Ping Sweep and/or by getting HTTP status code.\n- The ability to detect virtualhost (several subdomains which resolve to single IP Address). Sudomy will resolve the collected subdomains to IP addresses, then classify them if several subdomains resolve to single IP address. This feature will be very useful for the next penetration testing/bug bounty process. For instance, in port scanning, single IP address won’t be scanned repeatedly\n- Performed port scanning from collected subdomains/virtualhosts IP Addresses\n- Testing Subdomain TakeOver attack (CNAME Resolver, DNSLookup, Detect NXDomain, Check Vuln)\n- Taking Screenshots of subdomains default using gowitness or you can choice another screenshot tools, like (-ss webscreeenshot)\n- Identify technologies on websites (category,application,version)\n- Detection urls, ports, title, content-length, status-code, response-body probbing.\n- Smart auto fallback from https to http as default.\n- Data Collecting/Scraping open port from 3rd party (Default::Shodan), For right now just using Shodan [Future::Censys,Zoomeye]. More efficient and effective to collecting port from list ip on target [[ Subdomain > IP Resolver > Crawling > ASN & Open Port ]]\n- Collecting Juicy URL & Extract URL Parameter ( Resource Default::WebArchive, CommonCrawl, UrlScanIO) \n- Collect interesting path (api|.git|admin|etc), document (doc|pdf), javascript (js|node) and parameter\n- Define path for outputfile (specify an output file when completed) \n- Check an IP is Owned by Cloudflare \n- Generate & make wordlist based on collecting url resources (wayback,urlscan,commoncrawl. To make that, we Extract All the paramater and path from our domain recon\n- Generate Network Graph Visualization Subdomain & Virtualhosts\n- Report output in HTML & CSV format\n- Sending notifications to a slack channel\n\n## How Sudomy Works \nHow sudomy works or recon flow, when you run the best arguments to collect subdomains and analyze by doing automatic recon.\n```\nroot@maland: ./sudomy -d bugcrowd.com -dP -eP -rS -cF -pS -tO -gW --httpx --dnsprobe  -aI webanalyze -sS\n```\n### Recon Worfklow\nThis Recon Workflow Sudomy v1.1.8#dev \n\n![Recon Workflow](https://raw.githubusercontent.com/Screetsec/Sudomy/master/doc/Sudomy%20-%20Recon%20Workflow%20v1.1.8%23dev.png)\n\n### Detail information\nDetail information File Reconnaissance & Juicy Data\n```\n------------------------------------------------------------------------------------------------------\n\n- subdomain.txt             -- Subdomain list             < $DOMAIN (Target)\n- httprobe_subdomain.txt    -- Validate Subdomain\t  < subdomain.txt\n- webanalyzes.txt           -- Identify technology scan   < httprobe_subdomain.txt\n- httpx_status_title.txt    -- title+statuscode+lenght    < httprobe_subdomain.txt\n- dnsprobe_subdomain.txt    -- Subdomain resolv\t\t  < subdomain.txt\n- Subdomain_Resolver.txt    -- Subdomain resolv (alt)     < subdomain.txt\n- cf-ipresolv.txt           -- Cloudflare scan        \t  < ip_resolver.txt \n- Live_hosts_pingsweep.txt  -- Live Host check\t\t  < ip_resolver.txt\t \n- ip_resolver.txt           -- IP resolv list          \t  < Subdomain_Resolver::dnsprobe\n- ip_dbasn.txt\t\t    -- ASN Number Check\t\t  < ip_resolver.txt\n- vHost_subdomain.txt       -- Virtual Host (Group by ip) < Subdomain_Resolver.txt\n- nmap_top_ports.txt        -- Active port scanning       < cf-ipresolv.txt\n- ip_dbport.txt\t\t    -- Passive port scanning\t  < cf-ipresolv.txt\n\n------------------------------------------------------------------------------------------------------\n- Passive_Collect_URL_Full.txt \t\t-- Full All Url Crawl (WebArchive, CommonCrawl, UrlScanIO)\n------------------------------------------------------------------------------------------------------\n\n- ./screenshots/report-0.html   \t-- Screenshoting report    \t< httprobe_subdomain.txt\n- ./screenshots/gowitness/gowitness.sqlite3   \t\t-- Database screenshot    \t< httprobe_subdomain.txt\n\n------------------------------------------------------------------------------------------------------\n\n- ./interest/interesturi-allpath.out\t-- Interest path(/api,/git,etc) < Passive_Collect_URL_Full.txt\n- ./interest/interesturi-doc.out\t-- Interest doc (doc,pdf,xls)   < Passive_Collect_URL_Full.txt\n- ./interest/interesturi-otherfile.out\t-- Other files (.json,.env,etc) < Passive_Collect_URL_Full.txt\n- ./interest/interesturi-js.out\t\t-- All Javascript files(*.js)  \t< Passive_Collect_URL_Full.txt\n- ./interest/interesturi-nodemodule.out\t-- Files from /node_modules/    < Passive_Collect_URL_Full.txt\n- ./interest/interesturi-param-full.out\t-- Full parameter list \t\t< Passive_Collect_URL_Full.txt\n- ./interest/interesturi-paramsuniq.out -- Full Uniq parameter list \t< Passive_Collect_URL_Full.txt\n\n-  Notes : You can validate juicy/interest urls/param using urlprobe or httpx to avoid false positives\n------------------------------------------------------------------------------------------------------\n\n- ./takeover/CNAME-resolv.txt\t\t-- CNAME Resolver \t\t< subdomain.txt\n- ./takeover/TakeOver-Lookup.txt\t-- DNSLookup \t\t\t< CNAME-resolv.txt\n- ./takeover/TakeOver-nxdomain.txt\t-- Other 3d service platform\t< TakeOver-Lookup.txt\n- ./takeover/TakeOver.txt\t\t-- Checking Vulnerabilty\t< CNAME-resolv.txt\n\n------------------------------------------------------------------------------------------------------\n\n- ./wordlist/wordlist-parameter.lst     -- Generate params wordlist     < Passive_Collect_URL_Full.txt\n- ./wordlist/wordlist-pathurl.lst       -- Generate List paths wordlis  < Passive_Collect_URL_Full.txt\n\n-  Notes : This Wordlist based on domain & subdomain information (path,file,query strings & parameter)\n------------------------------------------------------------------------------------------------------\n```\n\n## Publication\n- [Sudomy: Information Gathering Tools for Subdomain Enumeration and Analysis](https://iopscience.iop.org/article/10.1088/1757-899X/771/1/012019/meta) -  IOP Conference Series: Materials Science and Engineering, Volume 771, 2nd International Conference on Engineering and Applied Sciences (2nd InCEAS) 16 November 2019, Yogyakarta, Indonesia\n\n## User Guide\n- Offline User Guide : [Sudomy - Subdomain Enumeration and Analysis User Guide v1.0](https://github.com/Screetsec/Sudomy/blob/master/doc/Sudomy%20-%20Subdomain%20Enumeration%20%26%20Analaysis%20User%20Guide%20v1.0.pdf)\n- Online User Guide : [Subdomain Enumeration and Analysis User Guide](https://sudomy.screetsec.web.id/features) - Up to date\n\n## Comparison\nSudomy minimize more resources when use resources (Third-Party Sites) By evaluating and selecting the good third-party sites/resources, so the enumeration process can be optimized. The domain that is used in this comparison is ***tiket.com***.\n\nThe following are the results of passive enumeration DNS testing of *Sublist3r v1.1.0, Subfinder v2.4.5*, and *Sudomy v1.2.0*.\n\n<img width=\"935\" alt=\"Untitled\" src=\"https://user-images.githubusercontent.com/17976841/102053848-00990700-3e1b-11eb-9f48-9a82a8b3e64e.png\">\n\nIn here subfinder is still classified as very fast for collecting subdomains by utilizing quite a lot of resources. Especially if the resources used have been optimized (?).\n\nFor compilation results and videos, you can check here: \n\n- [Sudomy](https://www.youtube.com/watch?v=ksZkMpLljcY)\n- [Subfinder](https://youtu.be/Zxf3pwh7uMI)\n- [Sublist3r](https://youtu.be/DexFkrEwtt4)\n\nWhen I have free time. Maybe In the future, sudomy will use golang too. If you want to contributes it's open to pull requests.\n\n### But it's shit! And your implementation sucks!\n- Yes, you're probably correct. Feel free to \"Not use it\" and there is a pull button to \"Make it better\". \n\n## Installation\n*Sudomy* is currently extended with the following tools. Instructions on how to install & use the application are linked below.\n\n### To Download Sudomy From Github\n```bash\n# Clone this repository\ngit clone --recursive https://github.com/screetsec/Sudomy.git\n```\n\n### Dependencies\n```\n$ python3 -m pip install -r requirements.txt\n```\n*Sudomy* requires [jq](https://stedolan.github.io/jq/download/) and [GNU grep](https://www.gnu.org/software/grep/) to run and parse. Information on how to download and install jq can be accessed [here](https://stedolan.github.io/jq/download/)\n\n```bash\n# Linux\napt-get update\napt-get install jq nmap phantomjs npm chromium parallel\nnpm i -g wappalyzer wscat\n\n# Mac\nbrew cask install phantomjs \nbrew install jq nmap npm parallel grep\nnpm i -g wappalyzer wscat\n\n\n# Note\nAll you would need is an installation of the latest Google Chrome or Chromium \nSet the PATH in rc file for GNU grep changes\n```\n\n## Running in a Docker Container\n```bash\n# Pull an image from DockerHub\ndocker pull screetsec/sudomy:v1.2.1-dev\n\n# Create output directory\nmkdir output\n\n# Run an image, you can run the image on custom directory but you must copy/download config sudomy.api on current directory\ndocker run -v \"${PWD}/output:/usr/lib/sudomy/output\" -v \"${PWD}/sudomy.api:/usr/lib/sudomy/sudomy.api\" -t --rm screetsec/sudomy:v1.1.9-dev [argument]\n\n# or define API variable when executed an image.\n\ndocker run -v \"${PWD}/output:/usr/lib/sudomy/output\" -e \"SHODAN_API=xxxx\" -e \"VIRUSTOTAL=xxxx\" -t --rm screetsec/sudomy:v1.1.9-dev [argument]\n```\n\n### Post Installation\nAPI Key is needed before querying on third-party sites, such as ```Shodan, Censys, SecurityTrails, Virustotal,``` and ```BinaryEdge```.\n- The API key setting can be done in sudomy.api file.\n```bash\n# Shodan\n# URL :  http://developer.shodan.io\n# Example :\n#      - SHODAN_API=\"VGhpc1M0bXBsZWwKVGhmcGxlbAo\"\n\nSHODAN_API=\"\"\n\n# Censys\n# URL : https://search.censys.io/register\n\nCENSYS_API=\"\"\nCENSYS_SECRET=\"\"\n\n# Virustotal\n# URL : https://www.virustotal.com/gui/\nVIRUSTOTAL=\"\"\n\n\n# Binaryedge\n# URL : https://app.binaryedge.io/login\nBINARYEDGE=\"\"\n\n\n# SecurityTrails\n# URL : https://securitytrails.com/\nSECURITY_TRAILS=\"\"\n```\nYOUR_WEBHOOK_URL is needed before using the slack notifications\n- The URL setting can be done in slack.conf file.\n```bash\n# Configuration Slack Alert\n# For configuration/tutorial to get webhook url following to this site\n#     - https://api.slack.com/messaging/webhooks\n# Example: \n#     - YOUR_WEBHOOK_URL=\"https://hooks.slack.com/services/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\"\n\nYOUR_WEBHOOK_URL=\"https://hooks.slack.com/services/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\"\n```\n\n## Usage\n\n```text\n ___         _ _  _           \n/ __|_  _ __| (_)(_)_ __ _  _ \n\\__ \\ || / _  / __ \\  ' \\ || |\n|___/\\_,_\\__,_\\____/_|_|_\\_, |\n                          |__/ v{1.2.1#dev} by @screetsec \nSud⍥my - Fast Subdmain Enumeration and Analyzer      \n         http://github.com/screetsec/sudomy\n\nUsage: sud⍥my.sh [-h [--help]] [-s[--source]][-d[--domain=]] \n\nExample: sud⍥my.sh -d example.com   \n         sud⍥my.sh -s Shodan,VirusTotal -d example.com\n\nBest Argument:\n  sudomy -d domain.com -dP -eP -rS -cF -pS -tO -gW --httpx --dnsprobe  -aI webanalyze --slack -sS\n\n\nOptional Arguments:\n  -a,  --all             Running all Enumeration, no nmap & gobuster \n  -b,  --bruteforce      Bruteforce Subdomain Using Gobuster (Wordlist: ALL Top SecList DNS) \n  -d,  --domain          domain of the website to scan\n  -h,  --help            show this help message\n  -o,  --outfile         specify an output file when completed \n  -s,  --source          Use source for Enumerate Subdomain\n  -aI, --apps-identifier Identify technologies on website (ex: -aI webanalyze)\n  -dP, --db-port         Collecting port from 3rd Party default=shodan\n  -eP, --extract-params  Collecting URL Parameter from Engine\n  -tO, --takeover        Subdomain TakeOver Vulnerabilty Scanner\n  -wS, --websocket       WebSocket Connection Check\n  -cF, --cloudfare       Check an IP is Owned by Cloudflare\n  -pS, --ping-sweep      Check live host using methode Ping Sweep\n  -rS, --resolver        Convert domain lists to resolved IP lists without duplicates\n  -sC, --status-code     Get status codes, response from domain list\n  -nT, --nmap-top        Port scanning with top-ports using nmap from domain list\n  -sS, --screenshot      Screenshots a list of website (default: gowitness)\n  -nP, --no-passive      Do not perform passive subdomain enumeration \n  -gW, --gwordlist       Generate wordlist based on collecting url resources (Passive) \n       --httpx           Perform httpx multiple probers using retryablehttp \n       --dnsprobe        Perform multiple dns queries (dnsprobe) \n       --no-probe        Do not perform httprobe \n       --html            Make report output into HTML \n       --graph           Network Graph Visualization\n```\nTo use all 22 Sources and Probe for working http or https servers (Validations):\n```\n$ sudomy -d hackerone.com\n```\nTo use one or more source:\n```\n$ sudomy -s shodan,dnsdumpster,webarchive -d hackerone.com\n```\nTo use all Sources Without Validations:\n```\n$ sudomy -d hackerone.com --no-probe\n```\nTo use one or more plugins:\n```\n$ sudomy -pS -sC -sS -d hackerone.com\n```\nTo use all plugins: testing host status, http/https status code, subdomain takeover and screenshots. \n\nNmap,Gobuster,wappalyzer and wscat Not Included.\n```\n$ sudomy -d hackerone.com --all \n```\n\nTo create report in HTML Format\n```\n$ sudomy -d hackerone.com --html --all\n```\n\nHTML Report Sample:\n\n| Dashboard\t| Reports\t|\n| ------------  | ------------ |\n|![Index](https://user-images.githubusercontent.com/17976841/63597336-6ab6e880-c5e7-11e9-819e-91634e347b0c.PNG)|![f](https://user-images.githubusercontent.com/17976841/63597476-bbc6dc80-c5e7-11e9-8985-6a73348a2e02.PNG)|\n\n\nTo gnereate network graph visualization subdomain & virtualhosts\n```\n$ sudomy -d hackerone.com -rS --graph\n```\nGraph Visualization [Sample](https://screetsec.github.io/): \n| nGraph\t|\n| ------------  |\n|![nGraph](https://user-images.githubusercontent.com/17976841/104086846-b24a1d00-528d-11eb-88f5-de9bb0b641d1.PNG)|\n\nTo use best arguments to collect subdomains, analyze by doing automatic recon and sending notifications to slack\n```\n./sudomy -d ngesec.id -dP -eP -rS -cF -pS -tO -gW --httpx --dnsprobe --graph  -aI webanalyze --slack -sS\n```\nSlack Notification Sample:\n| Slack \t|\n| ------------  |\n|![Slacks](https://user-images.githubusercontent.com/17976841/95856703-a4672780-0d84-11eb-9a3e-03ab39e4dc10.png)|\n\n\n\n\n## Tools Overview\n- Youtube Videos : Click [here](http://www.youtube.com/watch?v=DpXIBUtasn0)\n\n\n## Translations\n- [Indonesia](https://github.com/Screetsec/Sudomy/blob/master/doc/README_ID.md)\n- [English](https://github.com/Screetsec/Sudomy/blob/master/doc/README_EN.md)\n- [Portuguese - Brazil](https://github.com/Screetsec/Sudomy/blob/master/doc/README_PT_BR.md)\n\n\n## Changelog\nAll notable changes to this project will be documented in this [file](https://github.com/Screetsec/sudomy/blob/master/CHANGELOG.md).\n\n\n\n## Alternative Best Tool - Subdomain Enumeration\n- [Subfinder](https://github.com/projectdiscovery/subfinder) - Projectdiscovery\n- [Sublist3r](https://github.com/aboul3la/Sublist3r) - aboul3la\n- [Findomain](https://github.com/Edu4rdSHL/findomain) - Edu4rdSHL\n- [Amass](https://github.com/OWASP/Amass) - OWASP\n\n## Credits & Thanks\n- [Tom Hudson](https://github.com/tomnomnom/) - Tomonomnom\n- [OJ Reeves](https://github.com/OJ/) - Gobuster\n- [ProjectDiscovery](https://github.com/projectdiscovery) - Security Through Intelligent Automation\n- [Thomas D Maaaaz](https://github.com/maaaaz) - Webscreenshot\n- [Dwi Siswanto](https://github.com/dwisiswant0) - cf-checker\n- [Robin Verton](https://github.com/rverton/webanalyze) - webanalyze\n- [christophetd](https://github.com/christophetd/censys-subdomain-finder) - Censys\n- [Daniel Miessler](https://github.com/danielmiessler/) - SecList\n- [EdOverflow](https://github.com/EdOverflow/) - can-i-take-over-xyz\n- [jerukitumanis](https://github.com/myugan) - Docker Maintainer\n- [NgeSEC](https://ngesec.id/) - Community\n- [Zerobyte](http://zerobyte.id/) - Community\n- [Gauli(dot)Net](https://gauli.net/) - Lab Hacking Indonesia\n- [missme3f](https://github.com/missme3f/) - Raditya Rahma\n- [Bugcrowd](https://www.bugcrowd.com/) & [Hackerone](https://www.hackerone.com/)\n- [darknetdiaries](https://darknetdiaries.com/) - Awesome Art\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0439453125,
          "content": "censys\nfuture\nargparse\npyvis\nPyYAML\nyq\npydig\n"
        },
        {
          "name": "slack.conf",
          "type": "blob",
          "size": 0.1904296875,
          "content": "# Configuration Slack Alert\n# For configuration/tutorial to get webhook url following to this site\n#     - https://api.slack.com/apps/A01C1PXD7TR/incoming-webhooks?success=1\n\nYOUR_WEBHOOK_URL=\"\"\n"
        },
        {
          "name": "sudomy",
          "type": "blob",
          "size": 50.7177734375,
          "content": "#!/usr/bin/env bash\n#-Metadata----------------------------------------------------#\n#  Filename: sudomy (v1.2.1)             (Update: 2021-04-19) #\n#-Info--------------------------------------------------------#\n#  Fast Subdomain Enumeration & Analysis.                     #\n#-Author(s)---------------------------------------------------#\n#  Edo maland ~ @screetsec                                    #\n#-Operating System--------------------------------------------#\n#  Designed for & tested on: Linux \t                      #\n#  Reported working : Ubuntu 18                               #\n#\t   \t    : Parrot \t\t\t\t      #\n#                   : Kali Linux \t\t\t      #\n#\t\t    : WSL Windows (10.0.17134 N/A Build 17134 #\n#\t\t    : MacOS (Mojave)\t\t\t      #\n#-Licence-----------------------------------------------------#\n#  MIT License ~ http://opensource.org/licenses/MIT           #\n#-------------------------------------------------------------#\n\n### Variable Name and Version\n\nAPPNAME=\"sud⍥my.sh\"\nVERSION=\"1.2.1#dev\"\n\n### Calling Source\nsource sudomy.api\nsource slack.conf\nsource sudomy.conf\n\n#### Command calling\ngoBanner() {\n  echo -e ${RED}\" ___         _${YELLOW} _  _ ${GREEN}          ${RESET}\"\n  echo -e ${RED}\"/ __|_  _ __| ${YELLOW}(_)(_)${GREEN}_ __ _  _ ${RESET}\"\n  echo -e ${RED}\"\\__ \\ || / _  ${YELLOW}/ __ \\ ${GREEN} ' \\ || |${RESET}\"\n  echo -e ${RED}\"|___/\\_,_\\__,_${YELLOW}\\____/${GREEN}_|_|_\\_, |${RESET}\"\n  echo -e ${RED}\"              ${YELLOW}      ${GREEN}      |__/${RESET} v{${RED}${VERSION}${RESET}} by ${GREEN}@screetsec ${RESET}\"\n  echo -e \"${YELLOW}Sud⍥my ${RESET}- Fast Subdmain Enumeration and Analyzer ${RESET}     \"\n  echo -e \"\\t http://github.com/screetsec/sudomy\\n\"\n}\n\n#### Colors Output\n\nRESET=\"\\033[0m\"     # Normal Colour\nRED=\"\\033[0;31m\"    # Error / Issues\nGREEN=\"\\033[0;32m\"  # Successful\nBOLD=\"\\033[01;01m\"  # Highlight\nWHITE=\"\\033[1;37m\"  # BOLD\nYELLOW=\"\\033[1;33m\" # Warning\nPADDING=\"  \"\nDPADDING=\"\\t\\t\"\n\n#### Other Colors / Status Code\n\nLGRAY=\"\\033[0;37m\"   # Light Gray\nLRED=\"\\033[1;31m\"    # Light Red\nLGREEN=\"\\033[1;32m\"  # Light GREEN\nLBLUE=\"\\033[1;34m\"   # Light Blue\nLPURPLE=\"\\033[1;35m\" # Light Purple\nLCYAN=\"\\033[1;36m\"   # Light Cyan\nSORANGE=\"\\033[0;33m\" # Standar Orange\nSBLUE=\"\\033[0;34m\"   # Standar Blue\nSPURPLE=\"\\033[0;35m\" # Standar Purple\nSCYAN=\"\\033[0;36m\"   # Standar Cyan\nDGRAY=\"\\033[1;30m\"   # Dark Gray\n\ngoHelp() {\n  goBanner\n  echo -e \"${BOLD}Usage${RESET}: ${APPNAME} [${BOLD}-h [--help]$RESET] [${BOLD}-s[--source]${RESET}][${BOLD}-d[--domain=]${RESET}] \\n\"\n  echo -e \"${BOLD}Example${RESET}: ${APPNAME} ${BOLD}-d ${RESET}example.com${PADDING} \"\n  echo -e \"${PADDING}${PADDING}${PADDING}${PADDING} ${APPNAME} ${BOLD}-s${RESET} Shodan,VirusTotal ${BOLD}-d ${RESET}example.com\"\n  echo -e \"\\n${BOLD}Best Argument:${RESET}\"\n  echo -e \"${PADDING}${RESET}sudomy -d domain.com -dP -eP -rS -cF -pS -tO -gW --httpx --dnsx  -aI webanalyze --slack -sS\\n\"\n  echo -e \"\\n${BOLD}Optional Arguments:${RESET}\"\n  echo -e \"${PADDING}${BOLD}-a, ${RESET} --all${DPADDING} Running all Enumeration, no nmap & gobuster \"\n  echo -e \"${PADDING}${BOLD}-b, ${RESET} --bruteforce\\t Bruteforce Subdomain Using Gobuster (Wordlist: ALL Top SecList DNS) \"\n  echo -e \"${PADDING}${BOLD}-d, ${RESET} --domain${DPADDING} domain of the website to scan\"\n  echo -e \"${PADDING}${BOLD}-h, ${RESET} --help${DPADDING} show this help message\"\n  echo -e \"${PADDING}${BOLD}-o, ${RESET} --outfile\\t specify an output file when completed \"\n  echo -e \"${PADDING}${BOLD}-s, ${RESET} --source${DPADDING} Use source for Enumerate Subdomain\"\n  echo -e \"${PADDING}${BOLD}-aI,${RESET} --apps-identifier Identify technologies on website (ex: -aI webanalyze)\"\n  echo -e \"${PADDING}${BOLD}-dP,${RESET} --db-port\\t Collecting port from 3rd Party default=shodan\"\n  echo -e \"${PADDING}${BOLD}-eP,${RESET} --extract-params\\t Collecting URL Parameter from Engine\"\n  echo -e \"${PADDING}${BOLD}-tO,${RESET} --takeover\\t Subdomain TakeOver Vulnerabilty Scanner\"\n  echo -e \"${PADDING}${BOLD}-wS,${RESET} --websocket\\t WebSocket Connection Check\"\n  echo -e \"${PADDING}${BOLD}-cF,${RESET} --cloudfare\\t Check an IP is Owned by Cloudflare\"\n  echo -e \"${PADDING}${BOLD}-pS,${RESET} --ping-sweep\\t Check live host using methode Ping Sweep\"\n  echo -e \"${PADDING}${BOLD}-rS,${RESET} --resolver\\t Convert domain lists to resolved IP lists without duplicates\"\n  echo -e \"${PADDING}${BOLD}-sC,${RESET} --status-code\\t Get status codes, response from domain list\"\n  echo -e \"${PADDING}${BOLD}-nT,${RESET} --nmap-top\\t Port scanning with top-ports using nmap from domain list\"\n  echo -e \"${PADDING}${BOLD}-sS,${RESET} --screenshot\\t Screenshots a list of website (default: gowitness)\"\n  echo -e \"${PADDING}${BOLD}-nP,${RESET} --no-passive\\t Do not perform passive subdomain enumeration \"\n  echo -e \"${PADDING}${BOLD}-gW,${RESET} --gwordlist\\t Generate wordlist based on collecting url resources (Passive) \"\n  echo -e \"${PADDING}${BOLD}    ${RESET} --httpx${DPADDING} Perform httpx multiple probers using retryablehttp \"\n  echo -e \"${PADDING}${BOLD}    ${RESET} --dnsx\\t Perform multiple dns queries (dnsx) \"\n  echo -e \"${PADDING}${BOLD}    ${RESET} --no-probe\\t Do not perform httprobe \"\n  echo -e \"${PADDING}${BOLD}    ${RESET} --html${DPADDING} Make report output into HTML \"\n  echo -e \"${PADDING}${BOLD}    ${RESET} --graph${DPADDING} Network Graph Visualization\"\n  echo -e \"\\n${BOLD}Sources:${RESET}\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} Shodan${DPADDING} http://developer.shodan.io\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} VirusTotal${PADDING}\\t https://www.virustotal.com\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} Censys${DPADDING} http://censys.io\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} Certspotter${DPADDING} https://api.certspotter.com\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} BinaryEdge${DPADDING} https://docs.binaryedge.io/\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} Hackertarget${PADDING}\\t https://api.hackertarget.com\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} Threatminer${DPADDING} https://api.threatminer.org\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} CrtSH${DPADDING} https://crt.sh\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} DnsDB${DPADDING} https://www.dnsdb.info\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} BufferOver${DPADDING} http://dns.bufferover.run\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} Sypse${DPADDING} https://spyse.com\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} Threatcrowd${DPADDING} http://threatcrowd.org\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} Dnsdumpster${DPADDING} https://dnsdumpster.com\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} Riddler${DPADDING} http://riddler.io\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} Webarchive${DPADDING} http://web.archive.org\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} SecurityTrails\\t http://securitytrails.com\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} RapidDNS${DPADDING} https://rapiddns.io\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} AlienVault${DPADDING} https://otx.alienvault.com\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} CommonCrawl${DPADDING} http://index.commoncrawl.org\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} FBcert${DPADDING} https://graph.facebook.com\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} URLScan${DPADDING} https://urlscan.io\"\n  echo -e \"${PADDING}${YELLOW}+${RESET} RiskIQ${DPADDING} https://community.riskiq.com\\n\"\n\n}\n\n[[ \"${#}\" == 0 ]] && {\n  goHelp && exit 1\n}\n\n## Check Folder Results\n[[ ! -e \"${OUT}\" ]] &&\n  mkdir -p \"${OUT}\" || true\n\n# COMMAND LINE SWITCHES\nwhile [[ \"${#}\" -gt 0 ]]; do\n  args=\"${1}\"\n  case \"$(echo ${args} | tr '[:upper:]' '[:lower:]')\" in\n  # Target\n  \"-d\" | \"--domain\")\n    DOMAIN=\"${2}\"\n    shift\n    shift\n    ;;\n  \"--domain=\"*)\n    DOMAIN=\"${1#*=}\"\n    shift 1\n    ;;\n    # Help\n  \"-h\" | \"--help\")\n    goHelp\n    exit 1\n    ;;\n\n    # sources\n  \"-s\" | \"--sources\")\n    SOURCE=true\n    LIST=${2}\n    shift\n    shift\n\n    ;;\n    # Verbose\n  \"-v\" | \"--verbose\")\n    verbose=true\n    shift\n    ;;\n\n  \"-ps\" | \"--ping-sweep\")\n    PLUGIN_PING_SWEEP=true\n    shift\n    ;;\n\n  \"-rs\" | \"--resolver\")\n    PLUGIN_RESOLV_SD=true\n    shift\n    ;;\n\n  \"-sc\" | \"--status-code\")\n    PLUGIN_STATUS_CODE=true\n    shift\n    ;;\n\n  \"-nt\" | \"--nmap-top\")\n    PLUGIN_NMAP_PORTS=true\n    shift\n    ;;\n\n  \"-to\" | \"--takeover\")\n    PLUGIN_TAKEOVER=true\n    shift\n    ;;\n\n  \"-ws\" | \"--websocket\")\n    PLUGIN_WEBSOCKET=true\n    shift\n    ;;\n\n  \\\n    \"-cf\" | \"--cloudfare\")\n    PLUGIN_CFCHECK=true\n    shift\n    ;;\n\n  \\\n    \\\n    \"-ai\" | \"--apps-identifier\")\n    APPS_IDENTIFIER=true\n    LIST_API=${2}\n    shift\n    shift\n    ;;\n\n  \"-dp\" | \"--db-port\")\n    PLUGIN_DB_PORT=true\n    shift\n    ;;\n\n  \"-ep\" | \"--extract-params\")\n    PLUGIN_EXTRACT_PARAMS=true\n    shift\n    ;;\n\n  \\\n    \"-ss\" | \"--screenshot\")\n    PLUGIN_DOMAIN_SCREENSHOTS=true\n    LIST_SCREENSHOT=${2}\n    # PLUGIN_AQUATONE=true\n    PLUGIN_GOWITNESS=true\n    shift\n    shift\n    ;;\n\n  \\\n    \"-b\" | \"--bruteforce\")\n    PLUGIN_GOBUSTER=true\n    shift\n    ;;\n\n  \"-np\" | \"--no-passive\")\n    SOURCE=none\n    shift\n    ;;\n\n  \\\n    \"--no-probe\")\n    PLUGIN_HTTPROBE=false\n    shift\n    ;;\n\n  \"-o\" | \"--outfile\")\n    DESTINATION=true\n    OUTFILE=$2\n    shift\n    shift\n    ;;\n\n  \\\n    \"--html\")\n    REPORTS=1\n    shift\n    ;;\n\n  \"--slack\")\n    SLACK=true\n    shift\n    ;;\n\n  \\\n    \"--httpx\")\n    PLUGIN_HTTPX=true\n    shift\n    ;;\n\n  \\\n    \"--dnsx\")\n    PLUGIN_DNSX=true\n    shift\n    ;;\n\n  \"--graph\")\n    PLUGIN_NGRAPH=true\n    shift\n    ;;\n\n  \"-gw\" | \"--gwordlist\")\n    PLUGIN_WORDLISTS=true\n    shift\n    ;;\n\n  \\\n    \"-a\" | \"--all\")\n    PLUGIN_DOMAIN_SCREENSHOTS=true\n    PLUGIN_TAKEOVER=true\n    PLUGIN_STATUS_CODE=true\n    PLUGIN_RESOLV_SD=true\n    PLUGIN_PING_SWEEP=true\n    PLUGIN_DB_PORT=true\n    PLUGIN_EXTRACT_PARAMS=true\n    PLUGIN_HTTPX=true\n    PLUGIN_DNSX=true\n    PLUGIN_CFCHECK=true\n    PLUGIN_NGRAPH=true\n    PLUGIN_WORDLISTS=true\n    shift\n    ;;\n\n  \\\n    \\\n    \"-\"*)\n    echo -e \" ${YELLOW}[i]${RESET} Invalid option: ${RED}${1}${RESET}\" && shift && exit 1\n    ;;\n  *)\n    echo -e \" ${YELLOW}[i]${RESET} Invalid: Unknown option ${RED}${1}${RESET}\" && shift && exit\n    exit\n    ;;\n  esac\ndone\n\nif [ -z \"${DOMAIN}\" ]; then\n  echo \"You need to specify a target to use. Type --help for command usage.\"\n  exit\nfi\n\n## Check mandatory dependencies\ndependencies=(nmap dig jq)\nfor dependency in \"${dependencies[@]}\"; do\n  type -p \"$dependency\" &>/dev/null || {\n    echo \"error: Error: require ${dependency} but it's is not installed. Aborting.\" >&2\n    exit 1\n  }\ndone\n\n## Check GNU grep for MacOS\nif [[ \"$(grep -V)\" == *\"BSD\"* ]]; then\n  echo \"Error: require GNU grep. Aborting.\" >&2\n  exit 1\nfi\n\n## Check 3rd dependencies\n\nif [[ ${PLUGIN_WAPPALYZER} == true ]]; then\n  command -v wappalyzer >/dev/null 2>&1 || {\n    echo \"Error: require wappalyzer for identify apps but it's is not installed. Aborting.\" >&2\n    exit 1\n  }\nfi\n\nARG_PARS_LIST() {\n  echo -e \"\\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Parsing & Sorting list Domain \"\n  echo -e \"---------------------------------------------\\n\"\n  DATE_LOG=$(date +%m-%d-%Y)\n  [[ ! -e \"${OUT}/${DATE_LOG}/${DOMAIN}\" ]] &&\n    mkdir -p \"${OUT}/${DATE_LOG}/${DOMAIN}\" || true\n  sed 's/\\*\\.//g' ${OUT}/*.log | grep -e \"${DOMAIN}\" | sort -u >${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_SUBDOMAIN}\n  rm -r ${OUT}/*.log >/dev/null 2>&1 ##REMOVE LOG\n\n  if [[ -f ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_SUBDOMAIN} ]]; then\n    COUNT=$(cat ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_SUBDOMAIN} | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Total ${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\\n\"\n    cat ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_SUBDOMAIN} |\n      while read VERBOSE; do\n        echo -e ${YELLOW}\"\\t - ${RESET}$VERBOSE\"\n      done\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Total ${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\"\n  fi\n\n}\n\n## Calling Engine (Third Party-Sites) Total 18\n## Selecting the good third-party sites, the enumeration process can be optimized\n\n# source ${Engine_Entrust} //  (not accessible) anymore\n\nsource ${Engine_Shodan}\nsource ${Engine_VirusTotal}\nsource ${Engine_Censys}\nsource ${Engine_Certspotter}\nsource ${Engine_BinaryEdge}\nsource ${Engine_Hackertarget}\nsource ${Engine_Threatminer}\nsource ${Engine_CrtSH}\nsource ${Engine_Spyse}\nsource ${Engine_BufferOver}\nsource ${Engine_Threatcrowd}\nsource ${Engine_Dnsdumpster}\nsource ${Engine_Riddler}\nsource ${Engine_Webarchive}\nsource ${Engine_SecurityTrails}\nsource ${Engine_RapidDNS}\nsource ${Engine_AlienVault}\nsource ${Engine_CommonCrawl}\nsource ${Engine_UrlScan}\nsource ${Engine_DNSDB}\nsource ${Engine_RiskIQ}\nsource ${Engine_FBCert}\n\n# Timestamp\ncurrent_date_time=$(date \"+%Y-%m-%d %H:%M:%S\")\n\ngoBanner ## Called banner sudomy\necho -e \"\\n${BOLD}[${YELLOW}!${RESET}${BOLD}]${RESET} This tool is for ${BOLD}educational${RESET} purpose only.   \"\necho -e \"${BOLD} ${LGREEN} ${RESET}${BOLD} ${RESET} Usage of sudomy for ${BOLD}attacking${RESET} targets ${BOLD}without ${RESET}prior mutual consent is ${RED}illegal${RESET}   \"\necho -e \"${BOLD} ${LGREEN} ${RESET}${BOLD} ${RESET} developers assume no liability and are not responsible for any misuse or damage cause by this program   \"\necho -e \"\\n${BOLD}[${LCYAN}⍥${RESET}${BOLD}]${RESET} Perfoming Sud⍥my scans  \"\n\n# pkg httprobe, checking in local system and if not have try setup pkg to local system /usr/local/bin\ncommand -v ${_HTTPROBE} >/dev/null 2>&1 || {\n  echo -e \"${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_HTTPROBE}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_HTTPROBE} \" >&2\n  cp -r ${PKG_HTTPROBE} /usr/local/bin/\n}\n# pkg httpx, checking in local system and if not have try  setup pkg to local system /usr/local/bin\ncommand -v ${_HTTPX} >/dev/null 2>&1 || {\n  echo -e \"${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_HTTPX}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_HTTPX} \" >&2\n  cp -r ${PKG_HTTPX} /usr/local/bin/\n}\n# pkg dnsx, checking in local system and if not have try setup pkg to local system /usr/local/bin\ncommand -v ${_DNSX} >/dev/null 2>&1 || {\n  echo -e \"${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_DNSX}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_HTTPX} \" >&2\n  cp -r ${PKG_DNSX} /usr/local/bin/\n}\n\n# pkg gobuster, checking in local system and if not have try setup pkg to local system /usr/local/bin\ncommand -v ${_GOBUSTER} >/dev/null 2>&1 || {\n  echo -e \"${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_GOBUSTER}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_GOBUSTER} \" >&2\n  cp -r ${PKG_GOBUSTER} /usr/local/bin/\n}\n\n# pkg webanalze, checking in local system and if not have try setup pkg to local system /usr/local/bin\ncommand -v ${_WEBANALYZE} >/dev/null 2>&1 || {\n  echo -e \"${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_WEBANALYZE}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_WEBANALYZE} \" >&2\n  cp -r ${PKG_WEBANALYZE} /usr/local/bin/\n}\n\n# pkg cf-check, checking in local system and if not have try setup pkg to local system /usr/local/bin\ncommand -v ${_CFCHECK} >/dev/null 2>&1 || {\n  echo -e \"${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_CFCHECK}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_CFCHECK} \" >&2\n  cp -r ${PKG_CFCHECK} /usr/local/bin/\n}\n\n# pkg gowitness, checking in local system and if not have try setup pkg to local system /usr/local/bin\ncommand -v ${_GOWITNESS} >/dev/null 2>&1 || {\n  echo -e \"${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_GOWITNESS}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_GOWITNESS} \" >&2\n  cp -r ${PKG_GOWITNESS} /usr/local/bin/\n}\n\n# pkg unfurl, checking in local system and if not have try setup pkg to local system /usr/local/bin\ncommand -v ${_UNFURL} >/dev/null 2>&1 || {\n  echo -e \"${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_UNFURL}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_UNFURL} \" >&2\n  cp -r ${PKG_UNFURL} /usr/local/bin/\n}\n\n# pkg subjack, checking in local system and if not have try setup pkg to local system /usr/local/bin\ncommand -v ${_SUBJACK} >/dev/null 2>&1 || {\n  echo -e \"${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_SUBJACK}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_SUBJACK} \" >&2\n  cp -r ${PKG_SUBJACK} /usr/local/bin/\n}\n\n# pkg aquatone, checking in local system and if not have try setup pkg to local system /usr/local/bin\ncommand -v ${_AQUATONE} >/dev/null 2>&1 || {\n  echo -e \"${BOLD}${PADDING}${PADDING}- ${YELLOW}Warning: ${RESET}require ${RED}${_AQUATONE}${RESET} but it's is not installed.${GREEN}Trying to setup${RESET} pkg_${_AQUATONE} \" >&2\n  cp -r ${PKG_AQUATONE} /usr/local/bin/\n}\n\necho -e \"\\n${BOLD}[${LBLUE}*${RESET}${BOLD}]${RESET} Load target domain: ${LGREEN}${DOMAIN}${RESET}  \"\necho -e \"${BOLD}${PADDING}${PADDING}-${RESET}${BOLD}${RESET} ${LGREEN}starting${RESET} scanning @ ${current_date_time} \"\necho -e \"\\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Running & Checking source to be used  \"\necho -e \"---------------------------------------------\\n\"\n\n# Running Source for enumarte subdomain\n## This List for check if one of source get errors\n\n#SHODAN               ##  http://developer.shodan.io/billing/\n#WEBARCHIVE           ##  http://web.archive.org/\n#DNSDUMPSTER          ##  https://dnsdumpster.com/\n#VIRUSTOTAL           ##  https://www.virustotal.com/vtapi/v2/domain/\n#CERTSPOTTER          ##  https://api.certspotter.com\n#CERTSH               ##  https://crt.sh/\n#BINARYEDGE           ##  https://docs.binaryedge.io/api-v2/\n#SECURITY_TRAILS      ##  http://securitytrails.com/\n#CENSYS               ##  http://censys.io/\n#THREATMINER          ##  https://api.threatminer.org\n#FINDSUBDOMAIN        ##  http://findsubdomains.com/\n#BUFFEROVER           ##  http://dns.bufferover.run\n#HACKERTARGET         ##  https://api.hackertarget.com/\n#ENTRUST              ##  https://ctsearch.entrust.com/\n#THREATCROWD          ##  http://threatcrowd.org/\n#RIDDLER              ##  http://riddler.io/\n\nif [[ ${SOURCE} == true ]]; then\n  for arr in $(echo ${LIST} | tr \",\" \"\\n\" | tr '[:upper:]' '[:lower:]'); do\n    eval \"${arr}=true\"\n  done\n  [[ ${shodan} == true ]] && {\n    SHODAN\n    if [[ -f ${OUT_SHODAN} ]]; then\n      COUNT=$(cat ${OUT_SHODAN} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n  [[ ${virustotal} == true ]] && {\n    VIRUSTOTAL\n    if [[ -f ${OUT_VIRUSTOTAL} ]]; then\n      COUNT=$(cat ${OUT_VIRUSTOTAL} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n  [[ ${certspotter} == true ]] && {\n    CERTSPOTTER\n    if [[ -f ${OUT_CERTSPOTTER} ]]; then\n      COUNT=$(cat ${OUT_CERTSPOTTER} | sort -u | wc -l)\n      # echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${binaryedge} == true ]] && {\n    BINARYEDGE\n    if [[ -f ${OUT_BINARYEDGE} ]]; then\n      COUNT=$(cat ${OUT_BINARYEDGE} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${hackertarget} == true ]] && {\n    HACKERTARGET\n    if [[ -f ${OUT_HACKERTARGET} ]]; then\n      COUNT=$(cat ${OUT_HACKERTARGET} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${threatminer} == true ]] && {\n    THREATMINER\n    if [[ -f ${OUT_THREATMINER} ]]; then\n      COUNT=$(cat ${OUT_THREATMINER} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${crtsh} == true ]] && {\n    CERTSH\n    if [[ -f ${OUT_CRTSH} ]]; then\n      COUNT=$(cat ${OUT_CRTSH} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${bufferover} == true ]] && {\n    BUFFEROVER\n    if [[ -f ${OUT_BUFFEROVER} ]]; then\n      COUNT=$(cat ${OUT_BUFFEROVER} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${entrust} == true ]] && {\n    #ENTRUST\n    if [[ -f ${OUT_ENTRUST} ]]; then\n      COUNT=$(cat ${OUT_ENTRUST} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${threatcrowd} == true ]] && {\n    THREATCROWD\n    if [[ -f ${OUT_THREATCROWD} ]]; then\n      COUNT=$(cat ${OUT_THREATCROWD} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${dnsdumpster} == true ]] && {\n    DNSDUMPSTER\n    if [[ -f ${OUT_DNSDUMPSTER} ]]; then\n      COUNT=$(cat ${OUT_DNSDUMPSTER} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${riddler} == true ]] && {\n    RIDDLER\n    if [[ -f ${OUT_RIDDLER} ]]; then\n      COUNT=$(cat ${OUT_RIDDLER} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${webarchive} == true ]] && {\n    WEBARCHIVE\n    if [[ -f ${OUT_WEBARCHIVE} ]]; then\n      COUNT=$(cat ${OUT_WEBARCHIVE} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${securitytrails} == true ]] && {\n    SECURITY_TRAILS\n    if [[ -f ${OUT_STRAILS} ]]; then\n      COUNT=$(cat ${OUT_STRAILS} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${censys} == true ]] && {\n    CENSYS\n    if [[ -f ${OUT_CENSYS} ]]; then\n      COUNT=$(cat ${OUT_CENSYS} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${rapiddns} == true ]] && {\n    RAPIDDNS\n    if [[ -f ${OUT_RAPIDDNS} ]]; then\n      COUNT=$(cat ${OUT_RAPIDDNS} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${alienvault} == true ]] && {\n    ALIENVAULT\n    if [[ -f ${OUT_ALIENVAULT} ]]; then\n      COUNT=$(cat ${OUT_ALIENVAULT} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${commoncrawl} == true ]] && {\n    COMMONCRAWL\n    if [[ -f ${OUT_COMMONCRAWL} ]]; then\n      COUNT=$(cat ${OUT_COMMONCRAWL} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${urlscan} == true ]] && {\n    URLSCAN\n    if [[ -f ${OUT_URLSCAN} ]]; then\n      COUNT=$(cat ${OUT_URLSCAN} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${dnsdb} == true ]] && {\n    DNSDB\n    if [[ -f ${OUT_DNSDB} ]]; then\n      COUNT=$(cat ${OUT_DNSDB} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${spyse} == true ]] && {\n    SPYSE\n    if [[ -f ${OUT_SPYSE} ]]; then\n      COUNT=$(cat ${OUT_SPYSE} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${riskiq} == true ]] && {\n    RISKIQ\n    if [[ -f ${OUT_RISKIQ} ]]; then\n      COUNT=$(cat ${OUT_RISKIQ} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\n  [[ ${fbcert} == true ]] && {\n    FBCERT\n    if [[ -f ${OUT_FBCERT} ]]; then\n      COUNT=$(cat ${OUT_FBCERT} | sort -u | wc -l)\n      #echo -e \"\\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\\n\"\n    fi\n  }\n\nelif\n\n  [[ ${SOURCE} == false ]]\nthen\n  args_source=(SHODAN WEBARCHIVE DNSDUMPSTER VIRUSTOTAL CERTSPOTTER CERTSH BINARYEDGE SECURITY_TRAILS CENSYS THREATMINER BUFFEROVER HACKERTARGET SPYSE THREATCROWD RIDDLER RAPIDDNS ALIENVAULT COMMONCRAWL URLSCAN DNSDB RISKIQ FBCERT)\n  for i in \"${!args_source[@]}\"; do\n    \"${args_source[i]}\" &\n  done\n  wait\nfi\n\necho -e \"\\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Get & Count subdomain total From source   \"\necho -e \"---------------------------------------------\\n\"\nif [[ ${verbose} == true ]]; then\n  if [[ -f ${OUT_SHODAN} ]]; then\n    COUNT=$(cat ${OUT_SHODAN} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Shodan${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_SHODAN} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n\n  if [[ -f ${OUT_HACKERTARGET} ]]; then\n    COUNT=$(cat ${OUT_HACKERTARGET} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Hackertarget${RESET}${DPADDING}\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_HACKERTARGET} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n\n  if [[ -f ${OUT_VIRUSTOTAL} ]]; then\n    COUNT=$(cat ${OUT_VIRUSTOTAL} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Virustotal${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_VIRUSTOTAL} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n  if [[ -f ${OUT_CERTSPOTTER} ]]; then\n    COUNT=$(cat ${OUT_CERTSPOTTER} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Certspotter${RESET}${DPADDING}\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_CERTSPOTTER} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n  if [[ -f ${OUT_BINARYEDGE} ]]; then\n    COUNT=$(cat ${OUT_BINARYEDGE} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}BinaryEdge${RESET}${DPADDING}\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_BINARYEDGE} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n  if [[ -f ${OUT_THREATMINER} ]]; then\n    COUNT=$(cat ${OUT_THREATMINER} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Threatminer${RESET}${DPADDING}\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_THREATMINER} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n  if [[ -f ${OUT_CRTSH} ]]; then\n    COUNT=$(cat ${OUT_CRTSH} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}CrtSH${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_CRTSH} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n  if [[ -f ${OUT_BUFFEROVER} ]]; then\n    COUNT=$(cat ${OUT_BUFFEROVER} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}BufferOver${RESET}${DPADDING}\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_BUFFEROVER} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n  if [[ -f ${OUT_ENTRUST} ]]; then\n    COUNT=$(cat ${OUT_ENTRUST} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Entrust${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_ENTRUST} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n  if [[ -f ${OUT_SPYSE} ]]; then\n    COUNT=$(cat ${OUT_SPYSE} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Spyse${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_SPYSE} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n  if [[ -f ${OUT_THREATCROWD} ]]; then\n    COUNT=$(cat ${OUT_THREATCROWD} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Threatcrowd${RESET}${DPADDING}\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_THREATCROWD} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n  if [[ -f ${OUT_DNSDUMPSTER} ]]; then\n    COUNT=$(cat ${OUT_DNSDUMPSTER} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Dnsdumpster${RESET}${DPADDING}\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_DNSDUMPSTER} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n  if [[ -f ${OUT_RIDDLER} ]]; then\n    COUNT=$(cat ${OUT_RIDDLER} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Riddler${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_RIDDLER} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n  if [[ -f ${OUT_WEBARCHIVE} ]]; then\n    COUNT=$(cat ${OUT_WEBARCHIVE} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Webarchive${RESET}${DPADDING}\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_WEBARCHIVE} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n  if [[ -f ${OUT_STRAILS} ]]; then\n    COUNT=$(cat ${OUT_STRAILS} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Securitytrails${RESET}${DPADDING}\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_STRAILS} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n  if [[ -f ${OUT_CENSYS} ]]; then\n    COUNT=$(cat ${OUT_CENSYS} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Censys${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_CENSYS} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n\n  if [[ -f ${OUT_RAPIDDNS} ]]; then\n    COUNT=$(cat ${OUT_RAPIDDNS} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}RapidDNS${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_RAPIDDNS} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n\n  if [[ -f ${OUT_ALIENVAULT} ]]; then\n    COUNT=$(cat ${OUT_ALIENVAULT} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}AlienVault${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_ALIENVAULT} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n\n  if [[ -f ${OUT_COMMONCRAWL} ]]; then\n    COUNT=$(cat ${OUT_COMMONCRAWL} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}CommonCrawl${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_COMMONCRAWL} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n\n  if [[ -f ${OUT_URLSCAN} ]]; then\n    COUNT=$(cat ${OUT_URLSCAN} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}UrlScan${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_URLSCAN} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n\n  if [[ -f ${OUT_DNSDB} ]]; then\n    COUNT=$(cat ${OUT_DNSDB} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}DNSDB${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_DNSDB} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n\n  if [[ -f ${OUT_SPYSE} ]]; then\n    COUNT=$(cat ${OUT_SPYSE} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Spyse${RESET}${DPADDING}\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_SPYSE} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n\n  if [[ -f ${OUT_RISKIQ} ]]; then\n    COUNT=$(cat ${OUT_RISKIQ} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}RiskIQ${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_RISKIQ} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n\n  if [[ -f ${OUT_FBCERT} ]]; then\n    COUNT=$(cat ${OUT_FBCERT} | sort -u | wc -l)\n    echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}FBcert${RESET}${DPADDING}\\t\\t[${GREEN}${COUNT}${RESET}]\"\n    cat ${OUT_FBCERT} |\n      while read VERBOSE; do\n        echo -e \"\\t - $VERBOSE\"\n      done\n  fi\n\n  ARG_PARS_LIST\nelse\n  if [[ -f ${OUT_SHODAN} ]]; then\n    COUNT=$(cat ${OUT_SHODAN} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Shodan: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_HACKERTARGET} ]]; then\n    COUNT=$(cat ${OUT_HACKERTARGET} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Hackertarget: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_SPYSE} ]]; then\n    COUNT=$(cat ${OUT_SPYSE} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Spyse: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_VIRUSTOTAL} ]]; then\n    COUNT=$(cat ${OUT_VIRUSTOTAL} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Virustotal: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_CERTSPOTTER} ]]; then\n    COUNT=$(cat ${OUT_CERTSPOTTER} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Certspotter: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_BINARYEDGE} ]]; then\n    COUNT=$(cat ${OUT_BINARYEDGE} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Binaryedge: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_THREATMINER} ]]; then\n    COUNT=$(cat ${OUT_THREATMINER} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Threatminer: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_CRTSH} ]]; then\n    COUNT=$(cat ${OUT_CRTSH} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Certsh: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_BUFFEROVER} ]]; then\n    COUNT=$(cat ${OUT_BUFFEROVER} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}BufferOver: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_ENTRUST} ]]; then\n    COUNT=$(cat ${OUT_ENTRUST} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Entrust: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_THREATCROWD} ]]; then\n    COUNT=$(cat ${OUT_THREATCROWD} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Threatcrowd: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_DNSDUMPSTER} ]]; then\n    COUNT=$(cat ${OUT_DNSDUMPSTER} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Dnsdumpster: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_RIDDLER} ]]; then\n    COUNT=$(cat ${OUT_RIDDLER} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Riddler: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_WEBARCHIVE} ]]; then\n    COUNT=$(cat ${OUT_WEBARCHIVE} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Webarchive: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_STRAILS} ]]; then\n    COUNT=$(cat ${OUT_STRAILS} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}SecurityTrails: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_CENSYS} ]]; then\n    COUNT=$(cat ${OUT_CENSYS} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Censys: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_RAPIDDNS} ]]; then\n    COUNT=$(cat ${OUT_RAPIDDNS} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}RapidDNS: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_ALIENVAULT} ]]; then\n    COUNT=$(cat ${OUT_ALIENVAULT} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}AlienVault: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_COMMONCRAWL} ]]; then\n    COUNT=$(cat ${OUT_COMMONCRAWL} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}CommonCrawl: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_URLSCAN} ]]; then\n    COUNT=$(cat ${OUT_URLSCAN} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}UrlScanIo: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_DNSDB} ]]; then\n    COUNT=$(cat ${OUT_DNSDB} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}DNSDB: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_RISKIQ} ]]; then\n    COUNT=$(cat ${OUT_RISKIQ} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}RiskIQ: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  if [[ -f ${OUT_FBCERT} ]]; then\n    COUNT=$(cat ${OUT_FBCERT} | sort -u | wc -l)\n    echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}FBcert: Total Subdomain (${COUNT})${RESET}\"\n  fi\n\n  ARG_PARS_LIST\nfi\n\n## Calling Plugin\n## Configuration plugin on plugins/exec_[name_plugin]\n\n# Test the list of collected subdomains and probe for working http or https servers.\n# This feature uses a third-party tool, httprobe.\n\nif [[ ${PLUGIN_HTTPROBE} == true ]]; then\n  #_HTTPROBE=httprobe\n  source ${APP_HTTPROBE}\n  exec_httprobe\nfi\n\n# Bruteforce Subdomain Using Gobuster\n# Wordlist: ALL Top SecList DNS, You can change the wordlist, just replace file/path\n\nif [[ ${PLUGIN_GOBUSTER} == true ]]; then\n  source ${APP_GOBUSTER}\n  exec_gobuster\nfi\n\n# Test based on Ping Sweep and/or by getting HTTP status code.\n\nif [[ ${PLUGIN_PING_SWEEP} == true ]]; then\n  source ${APP_PINGSWEEP}\n  exec_pingsweep\nfi\n\n# Ddetect virtualhost (several subdomains which resolve to single IP Address\n# resolve the collected subdomains to IP addresses, then classify them if several subdomains resolve to single IP addres\nif [[ ${PLUGIN_RESOLV_SD} == true ]]; then\n\n  source ${APP_RESOLVER}\n  exec_resolver\nfi\n\n# Get status codes, response from domain list\nif [[ ${PLUGIN_STATUS_CODE} == true ]]; then\n  source ${APP_HTTPSTATUS}\n  exec_httpstatus\nfi\n\nif [[ ${PLUGIN_DNSX} == true ]]; then\n  source ${APP_DNSX}\n  exec_dnsx\nfi\n\n# PLUGIN_CFCHECK=true\n# Running with argument -rS / --dnsx\n# Default running with plugin --dnsx\n\nif [[ ${PLUGIN_CFCHECK} == true ]]; then\n  if [[ ${PLUGIN_DNSX} == true ]]; then\n    source ${APP_CFCHECK}\n    exec_cfcheck\n  else\n    source ${APP_DNSX}\n    source ${APP_CFCHECK}\n    exec_dnsx\n    exec_cfcheck\n  fi\nfi\n\n# Port scanning with top-ports using nmap from domain list\n# To run this plugin, rung with argument -cF to check IP Onwed with Cloudfare\n# Before perform Active Scanning\n# For Example sudomy -d example.com -cF -nT\nif [[ ${PLUGIN_NMAP_PORTS} == true ]]; then\n  source ${APP_NMAPTOP}\n  exec_nmaptop\n\nfi\n\n# Plugin to check Title,Status Code, Lenght\nif [[ ${PLUGIN_HTTPX} == true ]]; then\n  source ${APP_HTTPX}\n  exec_httpx\nfi\n\n# Explain about IP DB_PORT\n# Data Collecting/Scraping open port from 3rd party (Default::Shodan), For right now just using Shodan [Future::Censys,Zoomeye]\n# More efficient and effective to collecting port from list ip on target [[ Subdomain > IP Resolver > Crawling > Open Port ]]\n# Here we can further narrow the targeting port for checking in port scanning\n\nif [[ ${PLUGIN_DB_PORT} == true ]]; then\n  ## Cleaning Log Files ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_NMAP_HOSTS}\n  source ${APP_DBPORT}\n  exec_dbport\nfi\n\n# Plugin for Extract parameter from URL (--extract-params/-ep)\n# Data Collecting & Scraping URL Parameter from Passive scan (Default::Web Archive, CommonCrawl, UrlScanIO)\n# Regex using DFA Engine (awk,sed)\n# Support and Collecting URL with multi Parameter to Fuzzing\n# Removing Duplicate Parameter & URL\n\nif [[ ${PLUGIN_EXTRACT_PARAMS} == true ]]; then\n  source ${APP_EXTRACT_PARAMS}\n  exec_extract_params\n  echo \"\"\nfi\n\n#Remove Temporary RAW DATA []\n#rm -r ${OUT_RAW_WEBARCHIVE} ${OUT_RAW_COMMONCRAWL} ${OUT_RAW_URLSCAN} ${OUT}/${RESULT_EXTRACT_PARAM} > /dev/null 2>&1\n\n# Subdomain TakeOver Vulnerabilty Scanner\nif [[ ${PLUGIN_TAKEOVER} == true ]]; then\n  source ${APP_TAKEOVER}\n  exec_takeover\nfi\n\n# Identify technology on websites\n# Run argument -aI / --apps-identifider ( -aI webanalyze / -aI webanalyze,wappalyzer\nif [[ ${APPS_IDENTIFIER} == true ]]; then\n  # Default running Apps Identifier (wappalyzer)\n  if [[ -z ${LIST_API} ]]; then\n    source ${APP_WAPPALYZER}\n    exec_wappalyzer\n  else\n    for arr_apps in $(echo ${LIST_API} | tr \",\" \"\\n\" | tr '[:upper:]' '[:lower:]'); do\n      eval \"${arr_apps}=true\"\n    done\n    # Execution The Plugin (Choice Manual)\n    [[ ${wappalyzer} == true ]] && {\n      source ${APP_WAPPALYZER}\n      exec_wappalyzer\n    }\n    # Running Webanalyze\n    [[ ${webanalyze} == true ]] && {\n      source ${APP_WEBANALYZE}\n      exec_webanalyze\n    }\n  fi\nfi\n\n# Screenshots a list of website\n\n# Run argument -sS / --screenshot ( -sS gowitness / -sS aquatone )\n# Default screenshots using gowitness. Uncomment aquatone to use instead.\n# ToDo: default to gowitness, make aquatone optional. \n# ToDo: Rewrite entire project in Golang...\n\nif [[ ${PLUGIN_DOMAIN_SCREENSHOTS} == true ]]; then\n  source ${APP_GOWITNESS}\n  exec_gowitness\n\n  # source ${APP_AQUATONE}\n  # exec_aquatone\n\nfi\n\n# WebSocket Connection Check\nif [[ ${PLUGIN_WEBSOCKET} == true ]]; then\n  source ${APP_WEBSOCKET}\n  exec_websocket\nfi\n\n# Generate wordlist based on collecting url resources (wayback,urlscan,commoncrawl)\n# Running with argument -eP\n# Wordlist based on path/param\n# Default running with plugin -eP\n\nif [[ ${PLUGIN_WORDLISTS} == true ]]; then\n  if [[ ${PLUGIN_EXTRACT_PARAMS} == true ]]; then\n    source ${APP_WORDLISTS}\n    exec_wordlists\n  else\n    source ${APP_EXTRACT_PARAMS}\n    exec_extract_params\n    echo \"\"\n\n    source ${APP_WORDLISTS}\n    exec_wordlists\n  fi\nfi\n\n# Subdomain, IPAddress & Virtualhost (Make Network Graph Mapping)\n# nGraph for Mapping Results\n# Run this argument wirh -rS or this argument will rung that argument to perform\nif [[ ${PLUGIN_NGRAPH} == true ]]; then\n  if [[ ${PLUGIN_RESOLV_SD} == true ]]; then\n    source ${APP_GRAPH}\n    exec_ngraph\n  else\n    source ${APP_RESOLVER}\n    exec_resolver\n\n    source ${APP_GRAPH}\n    exec_ngraph\n  fi\nfi\n\n#Remove Temporary RAW DATA []\nrm -r ${OUT_RAW_WEBARCHIVE} ${OUT_RAW_COMMONCRAWL} ${OUT_RAW_URLSCAN} ${OUT}/${RESULT_EXTRACT_PARAM} >/dev/null 2>&1\n\n## Slack Alert Notifications\n# For configuration/tutorial to get webhook url following to this site\n#     - https://api.slack.com/apps/A01C1PXD7TR/incoming-webhooks?success=1\n\nif [[ ${SLACK} == true ]]; then\n  echo -e \"\\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Slack alert - Sending Notifications${RESET}\"\n  echo -e \"---------------------------------------------\\n\"\n  if [[ ! -z \"${YOUR_WEBHOOK_URL}\" ]]; then\n    echo -ne \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Sending Notifications${RESET}${DPADDING}[${GREEN} ✔ ${RESET}]\\n\"\n    curl -s -X POST -H 'Content-type: application/json' --data '{\"text\":\"*Sudomy - Subdomain Enumeration & analysis:* \\n Information: Automated Recon Done !! \\n - Domain: '${DOMAIN}' \\n - Date: '${DATE_LOG}'\"}' ${YOUR_WEBHOOK_URL} >/dev/null\n  else\n    echo -e \"${PADDING}${RED}${PADDING}!${PADDING}${RESET}WEBHOOK URL Required, settings on slack.conf${RESET}\\n\"\n  fi\nfi\n\n# Load template for reporting\nsource lib/template/_template\n\nif [[ ${REPORTS} == 1 ]]; then\n\n  echo -e \"\\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Generate Reports: Make report into HTML\"\n  echo -e \"---------------------------------------------\\n\"\n  ## Copy template to file log foler\n  #echo -e \"\\n${BOLD}[${LBLUE}*${RESET}${BOLD}]${RESET} Make template for reports ${LGREEN}${DOMAIN}${RESET}  \"\n  #echo -e \"${BOLD}${PADDING}${PADDING}-${RESET}${BOLD}${RESET} ${LGREEN}Copy template:  output/${DATE_LOG}/${DOMAIN}/reports${RESET}\"\n  echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Make template for reports\"\n  cp -R ${TEMPLATE_REPORT} ${OUT}/${DATE_LOG}/${DOMAIN}/\n  echo -e \"${BOLD}${PADDING}${PADDING}\\t-${RESET}${BOLD}${RESET}${LGREEN} output/${DATE_LOG}/${DOMAIN}/reports ${RESET} \"\n\n  if [[ ! -e \"${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_IP_RESOLVER}\" ]]; then\n\n    COUNT_TOTAL_RESOLVER=0\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/resolver2.html\n  else\n    COUNT_TOTAL_RESOLVER=$(cat ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_IP_RESOLVER} | wc -l)\n    MAKE_TABLE=$(awk 'BEGIN{print \"\"} {print \"<tr>\";for(i=1;i<=NF;i++)print \"<td>\" $i\"</td>\";print \"</tr>\"} END{print \"\"}' ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_IP_RESOLVER})\n    echo ${MAKE_TABLE} >>${OUT}/${DATE_LOG}/${DOMAIN}/report/resolver2.html\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/resolver2.html\n  fi\n  if [[ ! -e \"${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_SUBDOMAIN_REV_ALL}\" ]]; then\n    COUNT_TOTAL_RESOLVER2=0\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/resolver.html\n  else\n    COUNT_TOTAL_RESOLVER2=$(cat ${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_SUBDOMAIN_REV_ALL} | wc -l)\n    MAKE_TABLE=$(awk 'BEGIN{print \"\"} {print \"<tr>\";for(i=1;i<=NF;i++)print \"<td>\" $i\"</td>\";print \"</tr>\"} END{print \"\"}' ${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_SUBDOMAIN_REV_ALL})\n    echo ${MAKE_TABLE} >>${OUT}/${DATE_LOG}/${DOMAIN}/report/resolver.html\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/resolver.html\n  fi\n  if [[ ! -e \"${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_SUBDOMAIN}\" ]]; then\n    COUNT_TOTAL_SUBDOMAINS=0\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/subdomains.html\n  else\n    COUNT_TOTAL_SUBDOMAINS=$(cat ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_SUBDOMAIN} | wc -l)\n    MAKE_TABLE=$(awk 'BEGIN{print \"\"} {print \"<tr>\";for(i=1;i<=NF;i++)print \"<td>\" $i\"</td>\";print \"</tr>\"} END{print \"\"}' ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_SUBDOMAIN})\n    echo ${MAKE_TABLE} >>${OUT}/${DATE_LOG}/${DOMAIN}/report/subdomains.html\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/subdomains.html\n  fi\n\n  if [[ ! -e \"${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTPROBE}\" ]]; then\n    COUNT_TOTAL_HTTPROBE=0\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/subdomains.html\n  else\n    COUNT_TOTAL_HTTPROBE=$(cat ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTPROBE} | wc -l)\n    MAKE_TABLE=$(awk 'BEGIN{print \"\"} {print \"<tr>\";for(i=1;i<=NF;i++)print \"<td>\" $i\"</td>\";print \"</tr>\"} END{print \"\"}' ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_HTTPROBE})\n    echo ${MAKE_TABLE} >>${OUT}/${DATE_LOG}/${DOMAIN}/report/valid_probe.html\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/valid_probe.html\n  fi\n\n  if [[ ! -e \"${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_HTTP_CODE}\" ]]; then\n    COUNT_TOTAL_200=0\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/status_code.html\n  else\n    COUNT_TOTAL_200=$(grep -c \"200\" ${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_HTTP_CODE})\n    MAKE_TABLE=$(awk 'BEGIN{print \"\"} {print \"<tr>\";for(i=1;i<=NF;i++)print \"<td>\" $i\"</td>\";print \"</tr>\"} END{print \"\"}' ${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_HTTP_CODE})\n    echo ${MAKE_TABLE} >>${OUT}/${DATE_LOG}/${DOMAIN}/report/status_code.html\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/status_code.html\n  fi\n\n  if [[ ! -e \"${OUT}/${DATE_LOG}/${DOMAIN}/takeover/${RESULT_TAKEOVER}\" ]]; then\n    COUNT_TOTAL_TAKEOVER=0\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/takeover.html\n  else\n    COUNT_TOTAL_TAKEOVER=$(grep -c \"Vulnerable\" ${OUT}/${DATE_LOG}/${DOMAIN}/takeover/${RESULT_TAKEOVER})\n    MAKE_TABLE=$(awk 'BEGIN{print \"\"} {print \"<tr>\";for(i=1;i<=NF;i++)print \"<td>\" $i\"</td>\";print \"</tr>\"} END{print \"\"}' ${OUT}/${DATE_LOG}/${DOMAIN}/takeover/${RESULT_TAKEOVER})\n    echo ${MAKE_TABLE} >>${OUT}/${DATE_LOG}/${DOMAIN}/report/takeover.html\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/takeover.html\n  fi\n\n  if [[ ! -e \"${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_NMAP_HOSTS}\" ]]; then\n    COUNT_TOTAL_NMAP=0\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/nmap_tops.html\n  else\n    MAKE_TABLE=$(awk 'BEGIN{print \"\"} {print \"<tr>\";for(i=1;i<=NF;i++)print \"<td>\" $i\"</td>\";print \"</tr>\"} END{print \"\"}' ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_NMAP_HOSTS})\n    echo ${MAKE_TABLE} >>${OUT}/${DATE_LOG}/${DOMAIN}/report/nmap_tops.html\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/nmap_tops.html\n  fi\n\n  if [[ ! -e \"${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_PINGSWEEP}\" ]]; then\n    COUNT_TOTAL_PINGSWEEP=0\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/pingsweep.html\n  else\n    COUNT_TOTAL_PINGSWEEP=$(grep -c \"LIVE\" ${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_PINGSWEEP})\n    MAKE_TABLE=$(awk 'BEGIN{print \"\"} {print \"<tr>\";for(i=1;i<=NF;i++)print \"<td>\" $i\"</td>\";print \"</tr>\"} END{print \"\"}' ${OUT}/${DATE_LOG}/${DOMAIN}/${FINAL_PINGSWEEP})\n    echo ${MAKE_TABLE} >>${OUT}/${DATE_LOG}/${DOMAIN}/report/pingsweep.html\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/pingsweep.html\n  fi\n\n  if [[ ! -e \"${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_WAPPALYZER}\" ]]; then\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/apps_identifier.html\n  else\n    MAKE_TABLE=$(awk -F ';' '{print \"<tr>\\n<td>\"$1\"</td>\\n<td>\"$2\"</td>\\n</tr>\"}' ${OUT}/${DATE_LOG}/${DOMAIN}/${RESULT_WAPPALYZER})\n    echo -e \"${MAKE_TABLE}\" >>${OUT}/${DATE_LOG}/${DOMAIN}/report/apps_identifier.html\n    _template >>${OUT}/${DATE_LOG}/${DOMAIN}/report/apps_identifier.html\n  fi\n\n  # INDEX HTML\n  sed -i \"s/@TOTAL_SUBDOMAIN@/${COUNT_TOTAL_SUBDOMAINS}/\" ${OUT}/${DATE_LOG}/${DOMAIN}/report/index.html\n  sed -i \"s/@TOTAL_RESOLVER@/${COUNT_TOTAL_RESOLVER}/\" ${OUT}/${DATE_LOG}/${DOMAIN}/report/index.html\n  sed -i \"s/@TOTAL_TAKEOVER@/${COUNT_TOTAL_TAKEOVER}/\" ${OUT}/${DATE_LOG}/${DOMAIN}/report/index.html\n  sed -i \"s/@TOTAL_LIVE_HTTPROBE@/${COUNT_TOTAL_HTTPROBE}/\" ${OUT}/${DATE_LOG}/${DOMAIN}/report/index.html\n  sed -i \"s/@TOTAL_LIVE_PINGSWEEP@/${COUNT_TOTAL_PINGSWEEP}/ \" ${OUT}/${DATE_LOG}/${DOMAIN}/report/index.html\n  sed -i \"s/@TOTAL_200@/${COUNT_TOTAL_200}/ \" ${OUT}/${DATE_LOG}/${DOMAIN}/report/index.html\n\n  sed -i \"s/@PINGSWEEP_VALUE@/${COUNT_TOTAL_PINGSWEEP}/\" ${OUT}/${DATE_LOG}/${DOMAIN}/${CHART2}\n  sed -i \"s/@HTTPROBE_VALUE@/${COUNT_TOTAL_HTTPROBE}/\" ${OUT}/${DATE_LOG}/${DOMAIN}/${CHART2}\n  sed -i \"s/@STATUS_VALUE@/${COUNT_TOTAL_200}/\" ${OUT}/${DATE_LOG}/${DOMAIN}/${CHART2}\n  ## END\n  echo -e \"\\n${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Successful Created .. \"\nfi\n\n# Remove any color output report files that may contain color codes w/ sed\nfor i in $(ls \"${OUT}/${DATE_LOG}/${DOMAIN}\"); do\n  if [ -f \"$i\" ]; then\n    sed -i -r \"s/\\x1B\\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g\" \"$i\"\n  fi\ndone\n\necho -e \"---------------------------------------------\\n\"\necho -e \"If your using the screenshot plugin (gowitness) Remeber to kill the server process when you're done\"\necho -e \"ps aux | grep gowitness\"\necho -e \"kill -9 <PID>\"\necho -e \"---------------------------------------------\\n\"\n\n\nif [[ $DESTINATION == true ]]; then\n  echo -e \"\\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Sud⍥my has been sucessfully ${GRENN}completed${RESET}\"\n  echo -e \"---------------------------------------------\\n\"\n  echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Location output: \"\n  [[ ! -e \"${OUTFILE}/${OUT_NAME}\" ]] &&\n    mkdir -p \"${OUTFILE}/${OUT_NAME}\" || true\n  cp -r ${OUT}/${DATE_LOG}/${DOMAIN} ${OUTFILE}/${OUT_NAME}/\n  rm -r ${OUT}/${DATE_LOG}/\n\n  echo -e \"${BOLD}${PADDING}${PADDING}\\t-${RESET}${BOLD}${RESET}${LGREEN} ${OUTFILE}/${OUT_NAME}/${DOMAIN} ${RESET} \"\n  echo -e \"${BOLD}${PADDING}${PADDING}\\t-${RESET}${BOLD}${RESET}${LGREEN} ${OUTFILE}/${OUT_NAME}/${DOMAIN}/report ${RESET} \"\n  echo -e \"${BOLD}${PADDING}${PADDING}\\t-${RESET}${BOLD}${RESET}${LGREEN} ${OUTFILE}/${OUT_NAME}/${DOMAIN}/nGraph ${RESET} \"\n  echo -e \"${BOLD}${PADDING}${PADDING}\\t-${RESET}${BOLD}${RESET}${LGREEN} ${OUTFILE}/${OUT_NAME}/${DOMAIN}/wordlists ${RESET} \"\n  echo -e \"${BOLD}${PADDING}${PADDING}\\t-${RESET}${BOLD}${RESET}${LGREEN} ${OUTFILE}/${OUT_NAME}/${DOMAIN}/screenshots ${RESET} \\n\\n\"\n\nelse\n  echo -e \"\\n${BOLD}[${LGREEN}+${RESET}${BOLD}]${RESET} Sud⍥my has been sucessfully ${GRENN}completed${RESET}\"\n  echo -e \"---------------------------------------------\\n\"\n  echo -e \"${PADDING}${YELLOW}${PADDING}⍥${PADDING}${RESET}Location output:\"\n  echo -e \"${BOLD}${PADDING}${PADDING}\\t-${RESET}${BOLD}${RESET}${LGREEN} output/${DATE_LOG}/${DOMAIN} ${RESET} \"\n  echo -e \"${BOLD}${PADDING}${PADDING}\\t-${RESET}${BOLD}${RESET}${LGREEN} output/${DATE_LOG}/${DOMAIN}/report ${RESET} \"\n  echo -e \"${BOLD}${PADDING}${PADDING}\\t-${RESET}${BOLD}${RESET}${LGREEN} output/${DATE_LOG}/${DOMAIN}/nGraph ${RESET} \"\n  echo -e \"${BOLD}${PADDING}${PADDING}\\t-${RESET}${BOLD}${RESET}${LGREEN} output/${DATE_LOG}/${DOMAIN}/wordlists ${RESET} \"\n  echo -e \"${BOLD}${PADDING}${PADDING}\\t-${RESET}${BOLD}${RESET}${LGREEN} output/${DATE_LOG}/${DOMAIN}/screenshots ${RESET} \\n\\n\"\nfi\n"
        },
        {
          "name": "sudomy.api.dist",
          "type": "blob",
          "size": 0.765625,
          "content": "# Shodan\n# URL :  http://developer.shodan.io\n# Example :\n#      - SHODAN_API=\"VGhpc1M0bXBsZWwKVGhmcGxlbAo\"\n\nSHODAN_API=\"\"\n\n# Censys\n# URL : https://search.censys.io/register\n\nCENSYS_API=\"\"\nCENSYS_SECRET=\"\"\n\n# Virustotal\n# URL : https://www.virustotal.com/gui/\nVIRUSTOTAL=\"\"\n\n# Binaryedge\n# URL : https://app.binaryedge.io/login\nBINARYEDGE=\"\"\n\n\n# SecurityTrails\n# URL : https://securitytrails.com/\nSECURITY_TRAILS=\"\"\n\n\n# DNSDB\n# URL: https://api.dnsdb.info/l\nDNSDB_API=\"\"\n\n\n# PassiveTotal\n# URL : https://community.riskiq.com/\n#    - Go to account settings\n# Example : PASSIVE_API=\"admin@sudomy.id:1c235d10cbc66b28d59e796a13\"\n\nPASSIVE_API=\"\" \n\n\n# Spyse\n# URL : https://spyse.com\n\nSPYSE_API=\"\"\n\n# Facebook Certificates\n# URL : https://graph.facebook.com/certificates\n\nFACEBOOK_TOKEN=\"\"\n"
        },
        {
          "name": "sudomy.conf",
          "type": "blob",
          "size": 6.7724609375,
          "content": "\n\n### TEMPORARY PATH OUTPUT PASSIVE \n\n#PATH=\"$( pwd )/\" \nOUT=\"$(pwd)/output\"\nTMP=\"$(pwd)/tmp\"\nTMP_BUFFER=${OUTPUT:-${TMP}/Buffer.err}\nTMP_SHODAN=${OUTPUT:-${OUT}/Shodan.tmp} \nTMP_RISKIQ=${OUTPUT:-${OUT}/RiskIQ.tmp}\n\nOUT_SHODAN=${OUTPUT:-${OUT}/Shodan.log} \nOUT_VIRUSTOTAL=${OUTPUT:-${OUT}/Virustotal.log} \nOUT_CERTSPOTTER=${OUTPUT:-${OUT}/Certspotter.log} \nOUT_BINARYEDGE=${OUTPUT:-${OUT}/Binaryedge.log} \nOUT_HACKERTARGET=${OUTPUT:-${OUT}/Hackertarget.log} \nOUT_THREATMINER=${OUTPUT:-${OUT}/Threatminer.log} \nOUT_CRTSH=${OUTPUT:-${OUT}/crtsh.log}  \nOUT_BUFFEROVER=${OUTPUT:-${OUT}/Bufferover.log} \nOUT_ENTRUST=${OUTPUT:-${OUT}/Entrust.log} \nOUT_FINDSUBDOMAIN=${OUTPUT:-${OUT}/Findsubdomain.log} \nOUT_THREATCROWD=${OUTPUT:-${OUT}/ThreatCrowd.log} \nOUT_DNSDUMPSTER=${OUTPUT:-${OUT}/Dnsdumpster.log} \nOUT_RIDDLER=${OUTPUT:-${OUT}/Riddler.log} \nOUT_FRIDDLER=${OUTPUT:-${OUT}/FRiddler.log} #FILTER\nOUT_WEBARCHIVE=${OUTPUT:-${OUT}/Webarchive.log}  \nOUT_STRAILS=${OUTPUT:-${OUT}/SecurityTrails.log} \nOUT_CENSYS=${OUTPUT:-${OUT}/Censys.log} \nOUT_RAPIDDNS=${OUTPUT:-${OUT}/Rapiddns.log}\nOUT_ALIENVAULT=${OUTPUT:-${OUT}/AlienVault.log}\nOUT_COMMONCRAWL=${OUTPUT:-${OUT}/CommonCrawl.log}\nOUT_URLSCAN=${OUTPUT:-${OUT}/UrlScan.log}\nOUT_DNSDB=${OUTPUT:-${OUT}/Dnsdb.log}\nOUT_RISKIQ=${OUTPUT:-${OUT}/RiskIQ.log}\nOUT_SPYSE=${OUTPUT:-${OUT}/Spyse.log}\nOUT_FBCERT=${OUTPUT:-${OUT}/FBCert.log}\n\n# Outfile \nOUT_NAME=\"Sudomy-Output\"\n\n# Engine (Third-party sites,) Path\n# PEN = PATH ENGINE\n\nPEN=\"$(pwd)/engine\"\nEngine_Shodan=${ENGINE:-${PEN}/Shodan.my}\nEngine_VirusTotal=${ENGINE:-${PEN}/VirusTotal.my}\nEngine_Censys=${ENGINE:-${PEN}/Censys.my}\nEngine_Certspotter=${ENGINE:-${PEN}/Certspotter.my}\nEngine_BinaryEdge=${ENGINE:-${PEN}/BinaryEdge.my}\nEngine_Hackertarget=${ENGINE:-${PEN}/Hackertarget.my}\nEngine_Threatminer=${ENGINE:-${PEN}/Threatminer.my}\nEngine_CrtSH=${ENGINE:-${PEN}/CrtSH.my}\nEngine_BufferOver=${ENGINE:-${PEN}/BufferOver.my}\nEngine_Findsubdomains=${ENGINE:-${PEN}/Findsubdomains.my}\nEngine_Threatcrowd=${ENGINE:-${PEN}/Threatcrowd.my}\nEngine_Dnsdumpster=${ENGINE:-${PEN}/Dnsdumpster.my}\nEngine_Riddler=${ENGINE:-${PEN}/Riddler.my}\nEngine_Entrust=${ENGINE:-${PEN}/Entrust.my}\nEngine_Webarchive=${ENGINE:-${PEN}/Webarchive.my}\nEngine_SecurityTrails=${ENGINE:-${PEN}/SecurityTrails.my}\nEngine_RapidDNS=${ENGINE:-${PEN}/RapidDNS.my}\nEngine_AlienVault=${ENGINE:-${PEN}/AlienVault.my}\nEngine_CommonCrawl=${ENGINE:-${PEN}/CommonCrawl.my}\nEngine_UrlScan=${ENGINE:-${PEN}/UrlScan.my}\nEngine_DNSDB=${ENGINE:-${PEN}/DNSDB.my}\nEngine_RiskIQ=${ENGINE:-${PEN}/RiskIQ.my}\nEngine_Spyse=${ENGINE:-${PEN}/Spyse.my}\nEngine_FBCert=${ENGINE:-${PEN}/FBCert.my}\n\n### TEMPORARY PATH OUTPUT ACTIVE\nOUT_GOBUSTER=${OUTPUT:-${OUT}/Bruteforce.log} \nRESULT_GOBUSTER=${OUTPUT:-${OUT}/Gobuster.log} \nOUT_RAW_WEBARCHIVE=${OUTPUT:-${OUT}/Webarchive.raw}\nOUT_RAW_COMMONCRAWL=${OUTPUT:-${OUT}/CommonCrawl.raw}\nOUT_RAW_URLSCAN=${OUTPUT:-${OUT}/UrlScan.raw}\n\nOUT_JUICY_URL_RAW=${OUTPUT:-${OUT}/JuicyURL_FULL.raw}\nOUT_PARAM_URL_PARSING=${OUTPUT:-${OUT}/Full_URL_Parsing.raw}\n\n## RESULT_NAME ${DATE}${DOMAINS}/\n\nRESULT_SUBDOMAIN=subdomain.txt\nRESULT_HTTPROBE=httprobe_subdomain.txt\nRESULT_PINGSWEEP=pingsweep.txt\nRESULT_IP_RESOLVER=ip_resolver.txt\nRESULT_SUB_TABLE=subdomain_resolver_all.txt\nRESULT_HTTP_CODE=http_code.txt\nRESULT_HTTP_CODE_CSV=http_code.csv\nRESULT_NMAP_HOSTS=nmap_top_ports.txt\nRESULT_WAPPALYZER=wappalyzer.txt\nRESULT_DB_PORT=ip_dbport.txt\nRESULT_DB_ASN=ip_dbasn.txt\nRESULT_HTTPX=httpx_status_title.txt\nRESULT_DNSX=dnsx_subdomain.txt\nRESULT_WEBANALYZE=webanalyze.txt\nRESULT_CFCHECK=cf_ipresolv.txt\n\n# RESULT IN YAML FOR GRAPH\nRESULT_SUB_RESOLVER=vHost_subdomain.yaml\n\n\n#TAKEOVER\nRESULT_CNAME_RESOLV=CNAME-resolv.txt\n\nRAW_RESULT_TAKEOVER=TakeOver.raw\nRESULT_TAKEOVER=TakeOver.txt\n\nRESULT_DNSLOOKUP=TakeOver-Lookup.txt\nRESULT_NXDOMAIN=TakeOver-nxdomain.txt\n\n#OUT FINAL COLLECTING FULL URL PASSIVE\nRESULT_EXTRACT_PARAM=Passive_Collecting_URLParamter.txt\nRESULT_JUICY_URL_FULL=Passive_Collect_URL_Full.txt\n\n#URI PARAMETER \nRESULT_EXTRACT_PARAM_UNIQ=Passive_Collecting_URLParamter_Uniq.txt\nRESULT_EXTRACT_PARAM_FULL=Passive_Collecting_URLParamter_Full.txt\n\n#INTEREST URI\n\nINTERESTURI_PARAM=interesturi-param-full.out\nINTERESTURI_PARAM_UNIQ=interesturi-paramsuniq.out\nINTERESTURI_JS=interesturi-js.out\nINTERESTURI_NODE=interesturi-nodemodule.out\nINTERESTURI_PATH=interesturi-allpath.out\nINTERESTURI_OTF=interesturi-otherfile.out\nINTERESTURI_DOC=interesturi-doc.out\n\n#OUT WORDLIST FINAL RESULTS\nWORDLIST_PATH=wordlist-pathurl.lst\nWORDLIST_PARM=wordlist-parameter.lst\n\n## FINAL_RESULT, MAKE MORE PRETTY \nFINAL_HTTP_CODE=httpstatus_code.txt\nFINAL_PINGSWEEP=Live_hosts_pingsweep.txt\nFINAL_SUBDOMAIN_REV_ALL=Subdomain_Resolver.txt\n\n\n## USE SPESIFIC SOURCE\nSOURCE=false\nverbose=false\n\n\n# PLUGINS DEFAULT VALUE FALSE\nPLU=\"$(pwd)/plugin\"\nAPP_HTTPROBE=${PLUGIN:-${PLU}/exec_httprobe}\nAPP_GOBUSTER=${PLUGIN:-${PLU}/exec_gobuster}\nAPP_PINGSWEEP=${PLUGIN:-${PLU}/exec_pingsweep}\nAPP_RESOLVER=${PLUGIN:-${PLU}/exec_resolver}\nAPP_TAKEOVER=${PLUGIN:-${PLU}/exec_takeover}\nAPP_HTTPSTATUS=${PLUGIN:-${PLU}/exec_httpstatus}\nAPP_NMAPTOP=${PLUGIN:-${PLU}/exec_nmaptop}\nAPP_DBPORT=${PLUGIN:-${PLU}/exec_dbport}\nAPP_EXTRACT_PARAMS=${PLUGIN:-${PLU}/exec_extract_params}\nAPP_WAPPALYZER=${PLUGIN:-${PLU}/exec_wappalyzer}\nAPP_HTTPX=${PLUGIN:-${PLU}/exec_httpx}\nAPP_DNSX=${PLUGIN:-${PLU}/exec_dnsx}\nAPP_WEBSOCKET=${PLUGIN:-${PLU}/exec_websocket}\nAPP_WEBANALYZE=${PLUGIN:-${PLU}/exec_webanalyze}\nAPP_CFCHECK=${PLUGIN:-${PLU}/exec_cfcheck}\nAPP_GOWITNESS=${PLUGIN:-${PLU}/exec_gowitness}\nAPP_WORDLISTS=${PLUGIN:-${PLU}/exec_wordlists}\nAPP_GRAPH=${PLUGIN:-${PLU}/exec_ngraph}\nAPP_AQUATONE=${PLUGIN:-${PLU}/exec_aquatone.sh}\n\n\n# PlUGIN STATUS\nPLUGIN_PING_SWEEP=false\nPLUGIN_RESOLV_SD=false\nPLUGIN_STATUS_CODE=false\nPLUGIN_NMAP_PORTS=false\nPLUGIN_TAKEOVER=false\nPLUGIN_GOBUSTER=false\nPLUGIN_HTTPROBE=true\nPLUGIN_DB_PORT=false\nPLUGIN_EXTRACT_PARAMS=false\nPLUGIN_HTTPX=false\nPLUGIN_DNSX=false\nPLUGIN_WEBSOCKET=false\nPLUGIN_WEBANALYZE=false\nPLUGIN_CFCHECK=false\nPLUGIN_GOWITNESS=false\nPLUGIN_AQUATONE=false\nPLUGIN_WORDLISTS=false\n\n## TEMPLATE\nREPORTS=0\nTEMPLATE_REPORT=\"templates/report/\"\nCHART2=report/assets/app/js/dashboard.js\n\n## WORDLIST_ALL_TOP\n## You can change the wordlist, just replace file/path\n\n_GOWORDLIST=\"$(pwd)/wordlist/All_SubdomainTOP_Seclist.txt\"\n\n## 3rd Package Depends Path Default Binary is 32 bit\nPKG_HTTPROBE=\"lib/bin/httprobe\"\nPKG_HTTPX=\"lib/bin/httpx\"\nPKG_DNSX=\"lib/bin/dnsx\"\nPKG_GOBUSTER=\"lib/bin/gobuster\"\nPKG_WEBANALYZE=\"lib/bin/webanalyze\"\nPKG_CFCHECK=\"lib/bin/cf-check\"\nPKG_GOWITNESS=\"lib/bin/gowitness\"\nPKG_AQUATONE=\"lib/bin/aquatone\"\nPKG_UNFURL=\"lib/bin/unfurl\"\nPKG_SUBJACK=\"lib/bin/subjack\"\n\n# Lib Apps Identifider\nLIB_APPS=\"lib/apps.json\"\nLIB_SJACK=\"lib/fingerprints.json\"\n\n## Binary Execution\n_HTTPROBE=httprobe\n_HTTPX=httpx\n_DNSX=dnsx\n_GOBUSTER=gobuster\n_WEBANALYZE=webanalyze\n_CFCHECK=cf-check\n_GOWITNESS=gowitness\n_UNFURL=unfurl\n_SUBJACK=subjack\n_AQUATONE=aquatone\n"
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "wordlist",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}