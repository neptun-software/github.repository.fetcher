{
  "metadata": {
    "timestamp": 1736568203954,
    "page": 47,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "datacharmer/test_db",
      "stars": 4119,
      "defaultBranch": "master",
      "files": [
        {
          "name": "Changelog",
          "type": "blob",
          "size": 0.94140625,
          "content": "1.0.7 2015-08-30\n\t- Moved to GitHub\n\t- Fixed bug#393423 Duplicate key in dept_manager\n\t- Fixed bug#393429 Column order in employees.dept_manager is incorrect\n\t- Adapted partitioned structure to MySQL 5.5+ syntax\n1.0.6 2009-03-29\n\t- fixed bug#320513 - employees with same start date are counted twice\n1.0.5 2008-08-02\n\t- removed comment for FK in employees.sql \n\t- added some database objects (views, stored procedures and functions)\n1.0.4 2008-07-26\n\t- fixed bug in test_employees \n\t- added partitioning to employees.sql (saved as employees_partitioned.sql)\n1.0.3 2008-07-19\n\t- adapted for testing on MD5 or SHA1 (two separated test files)\n\t- removed views and table changelog\n1.0.2 2008-03-15\n\t- Added support for PBXT - replaced LOAD DATA with SQL dumps\n1.0.1 2008-01-04\n\t- Adapted code to run on 4.1\n1.0.0 2008-01-03\n    - Based on a work by Fusheng Wang and Carlo Zaniolo \n    - modified by Giuseppe Maxia and Patrick Crews\n\t- Initial release\n\t- no known bugs\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.2236328125,
          "content": "# test_db\nA sample database with an integrated test suite, used to test your applications and database servers\n\nThis repository was migrated from [Launchpad](https://launchpad.net/test-db).\n\nSee usage in the [MySQL docs](https://dev.mysql.com/doc/employee/en/index.html)\n\n\n## Where it comes from\n\nThe original data was created by Fusheng Wang and Carlo Zaniolo at \nSiemens Corporate Research. The data is in XML format.\nhttp://timecenter.cs.aau.dk/software.htm\n\nGiuseppe Maxia made the relational schema and Patrick Crews exported\nthe data in relational format.\n\nThe database contains about 300,000 employee records with 2.8 million \nsalary entries. The export data is 167 MB, which is not huge, but\nheavy enough to be non-trivial for testing.\n\nThe data was generated, and as such there are inconsistencies and subtle\nproblems. Rather than removing them, we decided to leave the contents\nuntouched, and use these issues as data cleaning exercises.\n\n## Prerequisites\n\nYou need a MySQL database server (5.0+) and run the commands below through a \nuser that has the following privileges:\n\n    SELECT, INSERT, UPDATE, DELETE, \n    CREATE, DROP, RELOAD, REFERENCES, \n    INDEX, ALTER, SHOW DATABASES, \n    CREATE TEMPORARY TABLES, \n    LOCK TABLES, EXECUTE, CREATE VIEW\n\n## Installation:\n\n1. Download the repository\n2. Change directory to the repository\n\nThen run\n\n    mysql < employees.sql\n\n\nIf you want to install with two large partitioned tables, run\n\n    mysql < employees_partitioned.sql\n\n\n## Testing the installation\n\nAfter installing, you can run one of the following\n\n    mysql -t < test_employees_md5.sql\n    # OR\n    mysql -t < test_employees_sha.sql\n\nFor example:\n\n    mysql  -t < test_employees_md5.sql\n    +----------------------+\n    | INFO                 |\n    +----------------------+\n    | TESTING INSTALLATION |\n    +----------------------+\n    +--------------+------------------+----------------------------------+\n    | table_name   | expected_records | expected_crc                     |\n    +--------------+------------------+----------------------------------+\n    | employees    |           300024 | 4ec56ab5ba37218d187cf6ab09ce1aa1 |\n    | departments  |                9 | d1af5e170d2d1591d776d5638d71fc5f |\n    | dept_manager |               24 | 8720e2f0853ac9096b689c14664f847e |\n    | dept_emp     |           331603 | ccf6fe516f990bdaa49713fc478701b7 |\n    | titles       |           443308 | bfa016c472df68e70a03facafa1bc0a8 |\n    | salaries     |          2844047 | fd220654e95aea1b169624ffe3fca934 |\n    +--------------+------------------+----------------------------------+\n    +--------------+------------------+----------------------------------+\n    | table_name   | found_records    | found_crc                        |\n    +--------------+------------------+----------------------------------+\n    | employees    |           300024 | 4ec56ab5ba37218d187cf6ab09ce1aa1 |\n    | departments  |                9 | d1af5e170d2d1591d776d5638d71fc5f |\n    | dept_manager |               24 | 8720e2f0853ac9096b689c14664f847e |\n    | dept_emp     |           331603 | ccf6fe516f990bdaa49713fc478701b7 |\n    | titles       |           443308 | bfa016c472df68e70a03facafa1bc0a8 |\n    | salaries     |          2844047 | fd220654e95aea1b169624ffe3fca934 |\n    +--------------+------------------+----------------------------------+\n    +--------------+---------------+-----------+\n    | table_name   | records_match | crc_match |\n    +--------------+---------------+-----------+\n    | employees    | OK            | ok        |\n    | departments  | OK            | ok        |\n    | dept_manager | OK            | ok        |\n    | dept_emp     | OK            | ok        |\n    | titles       | OK            | ok        |\n    | salaries     | OK            | ok        |\n    +--------------+---------------+-----------+\n\n\n## DISCLAIMER\n\nTo the best of my knowledge, this data is fabricated and\nit does not correspond to real people. \nAny similarity to existing people is purely coincidental.\n\n\n## LICENSE\nThis work is licensed under the \nCreative Commons Attribution-Share Alike 3.0 Unported License. \nTo view a copy of this license, visit \nhttp://creativecommons.org/licenses/by-sa/3.0/ or send a letter to \nCreative Commons, 171 Second Street, Suite 300, San Francisco, \nCalifornia, 94105, USA.\n\n\n"
        },
        {
          "name": "employees.sql",
          "type": "blob",
          "size": 4.0947265625,
          "content": "--  Sample employee database \n--  See changelog table for details\n--  Copyright (C) 2007,2008, MySQL AB\n--  \n--  Original data created by Fusheng Wang and Carlo Zaniolo\n--  http://www.cs.aau.dk/TimeCenter/software.htm\n--  http://www.cs.aau.dk/TimeCenter/Data/employeeTemporalDataSet.zip\n-- \n--  Current schema by Giuseppe Maxia \n--  Data conversion from XML to relational by Patrick Crews\n-- \n-- This work is licensed under the \n-- Creative Commons Attribution-Share Alike 3.0 Unported License. \n-- To view a copy of this license, visit \n-- http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to \n-- Creative Commons, 171 Second Street, Suite 300, San Francisco, \n-- California, 94105, USA.\n-- \n--  DISCLAIMER\n--  To the best of our knowledge, this data is fabricated, and\n--  it does not correspond to real people. \n--  Any similarity to existing people is purely coincidental.\n-- \n\nDROP DATABASE IF EXISTS employees;\nCREATE DATABASE IF NOT EXISTS employees;\nUSE employees;\n\nSELECT 'CREATING DATABASE STRUCTURE' as 'INFO';\n\nDROP TABLE IF EXISTS dept_emp,\n                     dept_manager,\n                     titles,\n                     salaries, \n                     employees, \n                     departments;\n\n/*!50503 set default_storage_engine = InnoDB */;\n/*!50503 select CONCAT('storage engine: ', @@default_storage_engine) as INFO */;\n\nCREATE TABLE employees (\n    emp_no      INT             NOT NULL,\n    birth_date  DATE            NOT NULL,\n    first_name  VARCHAR(14)     NOT NULL,\n    last_name   VARCHAR(16)     NOT NULL,\n    gender      ENUM ('M','F')  NOT NULL,    \n    hire_date   DATE            NOT NULL,\n    PRIMARY KEY (emp_no)\n);\n\nCREATE TABLE departments (\n    dept_no     CHAR(4)         NOT NULL,\n    dept_name   VARCHAR(40)     NOT NULL,\n    PRIMARY KEY (dept_no),\n    UNIQUE  KEY (dept_name)\n);\n\nCREATE TABLE dept_manager (\n   emp_no       INT             NOT NULL,\n   dept_no      CHAR(4)         NOT NULL,\n   from_date    DATE            NOT NULL,\n   to_date      DATE            NOT NULL,\n   FOREIGN KEY (emp_no)  REFERENCES employees (emp_no)    ON DELETE CASCADE,\n   FOREIGN KEY (dept_no) REFERENCES departments (dept_no) ON DELETE CASCADE,\n   PRIMARY KEY (emp_no,dept_no)\n); \n\nCREATE TABLE dept_emp (\n    emp_no      INT             NOT NULL,\n    dept_no     CHAR(4)         NOT NULL,\n    from_date   DATE            NOT NULL,\n    to_date     DATE            NOT NULL,\n    FOREIGN KEY (emp_no)  REFERENCES employees   (emp_no)  ON DELETE CASCADE,\n    FOREIGN KEY (dept_no) REFERENCES departments (dept_no) ON DELETE CASCADE,\n    PRIMARY KEY (emp_no,dept_no)\n);\n\nCREATE TABLE titles (\n    emp_no      INT             NOT NULL,\n    title       VARCHAR(50)     NOT NULL,\n    from_date   DATE            NOT NULL,\n    to_date     DATE,\n    FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE,\n    PRIMARY KEY (emp_no,title, from_date)\n) \n; \n\nCREATE TABLE salaries (\n    emp_no      INT             NOT NULL,\n    salary      INT             NOT NULL,\n    from_date   DATE            NOT NULL,\n    to_date     DATE            NOT NULL,\n    FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE,\n    PRIMARY KEY (emp_no, from_date)\n) \n; \n\nCREATE OR REPLACE VIEW dept_emp_latest_date AS\n    SELECT emp_no, MAX(from_date) AS from_date, MAX(to_date) AS to_date\n    FROM dept_emp\n    GROUP BY emp_no;\n\n# shows only the current department for each employee\nCREATE OR REPLACE VIEW current_dept_emp AS\n    SELECT l.emp_no, dept_no, l.from_date, l.to_date\n    FROM dept_emp d\n        INNER JOIN dept_emp_latest_date l\n        ON d.emp_no=l.emp_no AND d.from_date=l.from_date AND l.to_date = d.to_date;\n\nflush /*!50503 binary */ logs;\n\nSELECT 'LOADING departments' as 'INFO';\nsource load_departments.dump ;\nSELECT 'LOADING employees' as 'INFO';\nsource load_employees.dump ;\nSELECT 'LOADING dept_emp' as 'INFO';\nsource load_dept_emp.dump ;\nSELECT 'LOADING dept_manager' as 'INFO';\nsource load_dept_manager.dump ;\nSELECT 'LOADING titles' as 'INFO';\nsource load_titles.dump ;\nSELECT 'LOADING salaries' as 'INFO';\nsource load_salaries1.dump ;\nsource load_salaries2.dump ;\nsource load_salaries3.dump ;\n\nsource show_elapsed.sql ;\n"
        },
        {
          "name": "employees_partitioned.sql",
          "type": "blob",
          "size": 6.12890625,
          "content": "--  Sample employee database \n--  See changelog table for details\n--  Copyright (C) 2007,2008, MySQL AB\n--  \n--  Original data created by Fusheng Wang and Carlo Zaniolo\n--  http://www.cs.aau.dk/TimeCenter/software.htm\n--  http://www.cs.aau.dk/TimeCenter/Data/employeeTemporalDataSet.zip\n-- \n--  Current schema by Giuseppe Maxia \n--  Data conversion from XML to relational by Patrick Crews\n-- \n-- This work is licensed under the \n-- Creative Commons Attribution-Share Alike 3.0 Unported License. \n-- To view a copy of this license, visit \n-- http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to \n-- Creative Commons, 171 Second Street, Suite 300, San Francisco, \n-- California, 94105, USA.\n-- \n--  DISCLAIMER\n--  To the best of our knowledge, this data is fabricated, and\n--  it does not correspond to real people. \n--  Any similarity to existing people is purely coincidental.\n-- \n\nDROP DATABASE IF EXISTS employees;\nCREATE DATABASE IF NOT EXISTS employees;\nUSE employees;\n\nSELECT 'CREATING DATABASE STRUCTURE' as 'INFO';\n\nDROP TABLE IF EXISTS dept_emp,\n                     dept_manager,\n                     titles,\n                     salaries, \n                     employees, \n                     departments;\n\n/*!50503 set default_storage_engine = InnoDB */;\n/*!50503 select CONCAT('storage engine: ', @@default_storage_engine) as INFO */;\n\nCREATE TABLE employees (\n    emp_no      INT             NOT NULL,\n    birth_date  DATE            NOT NULL,\n    first_name  VARCHAR(14)     NOT NULL,\n    last_name   VARCHAR(16)     NOT NULL,\n    gender      ENUM ('M','F')  NOT NULL,    \n    hire_date   DATE            NOT NULL,\n    PRIMARY KEY (emp_no)\n);\n\nCREATE TABLE departments (\n    dept_no     CHAR(4)         NOT NULL,\n    dept_name   VARCHAR(40)     NOT NULL,\n    PRIMARY KEY (dept_no),\n    UNIQUE  KEY (dept_name)\n);\n\nCREATE TABLE dept_manager (\n   emp_no       INT             NOT NULL,\n   dept_no      CHAR(4)         NOT NULL,\n   from_date    DATE            NOT NULL,\n   to_date      DATE            NOT NULL,\n   FOREIGN KEY (emp_no)  REFERENCES employees (emp_no)    ON DELETE CASCADE,\n   FOREIGN KEY (dept_no) REFERENCES departments (dept_no) ON DELETE CASCADE,\n   PRIMARY KEY (emp_no,dept_no)\n); \n\nCREATE TABLE dept_emp (\n    emp_no      INT             NOT NULL,\n    dept_no     CHAR(4)         NOT NULL,\n    from_date   DATE            NOT NULL,\n    to_date     DATE            NOT NULL,\n    FOREIGN KEY (emp_no)  REFERENCES employees   (emp_no)  ON DELETE CASCADE,\n    FOREIGN KEY (dept_no) REFERENCES departments (dept_no) ON DELETE CASCADE,\n    PRIMARY KEY (emp_no,dept_no)\n);\n\nCREATE TABLE titles (\n    emp_no      INT             NOT NULL,\n    title       VARCHAR(50)     NOT NULL,\n    from_date   DATE            NOT NULL,\n    to_date     DATE,\n    # FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE,\n    PRIMARY KEY (emp_no,title, from_date)\n); \n\n/*!50510\nALTER TABLE titles \npartition by range COLUMNS (from_date)\n(\n    partition p01 values less than ('1985-12-31'),\n    partition p02 values less than ('1986-12-31'),\n    partition p03 values less than ('1987-12-31'),\n    partition p04 values less than ('1988-12-31'),\n    partition p05 values less than ('1989-12-31'),\n    partition p06 values less than ('1990-12-31'),\n    partition p07 values less than ('1991-12-31'),\n    partition p08 values less than ('1992-12-31'),\n    partition p09 values less than ('1993-12-31'),\n    partition p10 values less than ('1994-12-31'),\n    partition p11 values less than ('1995-12-31'),\n    partition p12 values less than ('1996-12-31'),\n    partition p13 values less than ('1997-12-31'),\n    partition p14 values less than ('1998-12-31'),\n    partition p15 values less than ('1999-12-31'),\n    partition p16 values less than ('2000-12-31'),\n    partition p17 values less than ('2001-12-31'),\n    partition p18 values less than ('2002-12-31'),\n    partition p19 values less than (MAXVALUE)\n)\n*/;\n\nCREATE TABLE salaries (\n    emp_no      INT             NOT NULL,\n    salary      INT             NOT NULL,\n    from_date   DATE            NOT NULL,\n    to_date     DATE            NOT NULL,\n    # FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE,\n    PRIMARY KEY (emp_no, from_date)\n); \n\n/*!50510\nALTER TABLE salaries\npartition by range COLUMNS (from_date)\n(\n    partition p01 values less than ('1985-12-31'),\n    partition p02 values less than ('1986-12-31'),\n    partition p03 values less than ('1987-12-31'),\n    partition p04 values less than ('1988-12-31'),\n    partition p05 values less than ('1989-12-31'),\n    partition p06 values less than ('1990-12-31'),\n    partition p07 values less than ('1991-12-31'),\n    partition p08 values less than ('1992-12-31'),\n    partition p09 values less than ('1993-12-31'),\n    partition p10 values less than ('1994-12-31'),\n    partition p11 values less than ('1995-12-31'),\n    partition p12 values less than ('1996-12-31'),\n    partition p13 values less than ('1997-12-31'),\n    partition p14 values less than ('1998-12-31'),\n    partition p15 values less than ('1999-12-31'),\n    partition p16 values less than ('2000-12-31'),\n    partition p17 values less than ('2001-12-31'),\n    partition p18 values less than ('2002-12-31'),\n    partition p19 values less than (MAXVALUE)\n)\n*/;\n\nCREATE OR REPLACE VIEW dept_emp_latest_date AS\n    SELECT emp_no, MAX(from_date) AS from_date, MAX(to_date) AS to_date\n    FROM dept_emp\n    GROUP BY emp_no;\n\n# shows only the current department for each employee\nCREATE OR REPLACE VIEW current_dept_emp AS\n    SELECT l.emp_no, dept_no, l.from_date, l.to_date\n    FROM dept_emp d\n        INNER JOIN dept_emp_latest_date l\n        ON d.emp_no=l.emp_no AND d.from_date=l.from_date AND l.to_date = d.to_date;\n\nflush /*!50503 binary */ logs;\n\nSELECT 'LOADING departments' as 'INFO';\nsource load_departments.dump ;\nSELECT 'LOADING employees' as 'INFO';\nsource load_employees.dump ;\nSELECT 'LOADING dept_emp' as 'INFO';\nsource load_dept_emp.dump ;\nSELECT 'LOADING dept_manager' as 'INFO';\nsource load_dept_manager.dump ;\nSELECT 'LOADING titles' as 'INFO';\nsource load_titles.dump ;\nSELECT 'LOADING salaries' as 'INFO';\nsource load_salaries1.dump ;\nsource load_salaries2.dump ;\nsource load_salaries3.dump ;\n\nsource show_elapsed.sql ;\n"
        },
        {
          "name": "employees_partitioned_5.1.sql",
          "type": "blob",
          "size": 7.76171875,
          "content": "--  Sample employee database \n--  See changelog table for details\n--  Copyright (C) 2007,2008, MySQL AB\n--  \n--  Original data created by Fusheng Wang and Carlo Zaniolo\n--  http://www.cs.aau.dk/TimeCenter/software.htm\n--  http://www.cs.aau.dk/TimeCenter/Data/employeeTemporalDataSet.zip\n-- \n--  Current schema by Giuseppe Maxia \n--  Data conversion from XML to relational by Patrick Crews\n-- \n-- This work is licensed under the \n-- Creative Commons Attribution-Share Alike 3.0 Unported License. \n-- To view a copy of this license, visit \n-- http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to \n-- Creative Commons, 171 Second Street, Suite 300, San Francisco, \n-- California, 94105, USA.\n-- \n--  DISCLAIMER\n--  To the best of our knowledge, this data is fabricated, and\n--  it does not correspond to real people. \n--  Any similarity to existing people is purely coincidental.\n-- \n\nDROP DATABASE IF EXISTS employees;\nCREATE DATABASE IF NOT EXISTS employees;\nUSE employees;\n\nSELECT 'CREATING DATABASE STRUCTURE' as 'INFO';\n\nDROP TABLE IF EXISTS dept_emp,\n                     dept_manager,\n                     titles,\n                     salaries, \n                     employees, \n                     departments;\n\n/*!50503 set default_storage_engine = InnoDB */;\n/*!50503 select CONCAT('storage engine: ', @@default_storage_engine) as INFO */;\n\nCREATE TABLE employees (\n    emp_no      INT             NOT NULL,\n    birth_date  DATE            NOT NULL,\n    first_name  VARCHAR(14)     NOT NULL,\n    last_name   VARCHAR(16)     NOT NULL,\n    gender      ENUM ('M','F')  NOT NULL,    \n    hire_date   DATE            NOT NULL,\n    PRIMARY KEY (emp_no)\n);\n\nCREATE TABLE departments (\n    dept_no     CHAR(4)         NOT NULL,\n    dept_name   VARCHAR(40)     NOT NULL,\n    PRIMARY KEY (dept_no),\n    UNIQUE  KEY (dept_name)\n);\n\nCREATE TABLE dept_manager (\n   emp_no       INT             NOT NULL,\n   dept_no      CHAR(4)         NOT NULL,\n   from_date    DATE            NOT NULL,\n   to_date      DATE            NOT NULL,\n   FOREIGN KEY (emp_no)  REFERENCES employees (emp_no)    ON DELETE CASCADE,\n   FOREIGN KEY (dept_no) REFERENCES departments (dept_no) ON DELETE CASCADE,\n   PRIMARY KEY (emp_no,dept_no)\n); \n\nCREATE TABLE dept_emp (\n    emp_no      INT             NOT NULL,\n    dept_no     CHAR(4)         NOT NULL,\n    from_date   DATE            NOT NULL,\n    to_date     DATE            NOT NULL,\n    FOREIGN KEY (emp_no)  REFERENCES employees   (emp_no)  ON DELETE CASCADE,\n    FOREIGN KEY (dept_no) REFERENCES departments (dept_no) ON DELETE CASCADE,\n    PRIMARY KEY (emp_no,dept_no)\n);\n\nCREATE TABLE titles (\n    emp_no      INT             NOT NULL,\n    title       VARCHAR(50)     NOT NULL,\n    from_date   DATE            NOT NULL,\n    to_date     DATE,\n    # FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE,\n    PRIMARY KEY (emp_no,title, from_date)\n); \n\n/*!50130\nALTER TABLE titles\npartition by range (to_days(from_date))\n(\n    partition p01 values less than (to_days('1985-12-31')),\n    partition p02 values less than (to_days('1986-12-31')),\n    partition p03 values less than (to_days('1987-12-31')),\n    partition p04 values less than (to_days('1988-12-31')),\n    partition p05 values less than (to_days('1989-12-31')),\n    partition p06 values less than (to_days('1990-12-31')),\n    partition p07 values less than (to_days('1991-12-31')),\n    partition p08 values less than (to_days('1992-12-31')),\n    partition p09 values less than (to_days('1993-12-31')),\n    partition p10 values less than (to_days('1994-12-31')),\n    partition p11 values less than (to_days('1995-12-31')),\n    partition p12 values less than (to_days('1996-12-31')),\n    partition p13 values less than (to_days('1997-12-31')),\n    partition p14 values less than (to_days('1998-12-31')),\n    partition p15 values less than (to_days('1999-12-31')),\n    partition p16 values less than (to_days('2000-12-31')),\n    partition p17 values less than (to_days('2001-12-31')),\n    partition p18 values less than (to_days('2002-12-31')),\n    partition p19 values less than (to_days('3000-12-31'))\n) */;\n\n\nCREATE TABLE salaries (\n    emp_no      INT             NOT NULL,\n    salary      INT             NOT NULL,\n    from_date   DATE            NOT NULL,\n    to_date     DATE            NOT NULL,\n    # FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE,\n    PRIMARY KEY (emp_no, from_date)\n); \n\n/*!50130\nALTER TABLE salaries\npartition by range (to_days(from_date))\n(\n    partition p01 values less than (to_days('1985-01-01')),\n    partition p02 values less than (to_days('1986-01-01')),\n    partition p03 values less than (to_days('1987-01-01')),\n    partition p04 values less than (to_days('1988-01-01')),\n    partition p05 values less than (to_days('1989-01-01')),\n    partition p06 values less than (to_days('1990-01-01')),\n    partition p07 values less than (to_days('1991-01-01')),\n    partition p08 values less than (to_days('1992-01-01')),\n    partition p09 values less than (to_days('1993-01-01')),\n    partition p10 values less than (to_days('1994-01-01')),\n    partition p11 values less than (to_days('1995-01-01')),\n    partition p12 values less than (to_days('1996-01-01')),\n    partition p13 values less than (to_days('1997-01-01')),\n    partition p14 values less than (to_days('1998-01-01')),\n    partition p15 values less than (to_days('1999-01-01')),\n    partition p16 values less than (to_days('2000-01-01')),\n    partition p17 values less than (to_days('2001-01-01')),\n    partition p18 values less than (to_days('2001-02-01')),\n    partition p19 values less than (to_days('2001-03-01')),\n    partition p20 values less than (to_days('2001-04-01')),\n    partition p21 values less than (to_days('2001-05-01')),\n    partition p22 values less than (to_days('2001-06-01')),\n    partition p23 values less than (to_days('2001-07-01')),\n    partition p24 values less than (to_days('2001-08-01')),\n    partition p25 values less than (to_days('2001-09-01')),\n    partition p26 values less than (to_days('2001-10-01')),\n    partition p27 values less than (to_days('2001-11-01')),\n    partition p28 values less than (to_days('2001-12-01')),\n    partition p29 values less than (to_days('2002-01-01')),\n    partition p30 values less than (to_days('2002-02-01')),\n    partition p31 values less than (to_days('2002-03-01')),\n    partition p32 values less than (to_days('2002-04-01')),\n    partition p33 values less than (to_days('2002-05-01')),\n    partition p34 values less than (to_days('2002-06-01')),\n    partition p35 values less than (to_days('2002-07-01')),\n    partition p36 values less than (to_days('2002-08-01')),\n    partition p37 values less than (to_days('2002-09-01')),\n    partition p38 values less than (to_days('2002-10-01')),\n    partition p39 values less than (to_days('2002-11-01')),\n    partition p40 values less than (to_days('2002-12-01')),\n    partition p41 values less than (to_days('3000-01-01'))\n)\n*/;\n\nCREATE OR REPLACE VIEW dept_emp_latest_date AS\n    SELECT emp_no, MAX(from_date) AS from_date, MAX(to_date) AS to_date\n    FROM dept_emp\n    GROUP BY emp_no;\n\n# shows only the current department for each employee\nCREATE OR REPLACE VIEW current_dept_emp AS\n    SELECT l.emp_no, dept_no, l.from_date, l.to_date\n    FROM dept_emp d\n        INNER JOIN dept_emp_latest_date l\n        ON d.emp_no=l.emp_no AND d.from_date=l.from_date AND l.to_date = d.to_date;\n\nflush /*!50503 binary */ logs;\n\nSELECT 'LOADING departments' as 'INFO';\nsource load_departments.dump ;\nSELECT 'LOADING employees' as 'INFO';\nsource load_employees.dump ;\nSELECT 'LOADING dept_emp' as 'INFO';\nsource load_dept_emp.dump ;\nSELECT 'LOADING dept_manager' as 'INFO';\nsource load_dept_manager.dump ;\nSELECT 'LOADING titles' as 'INFO';\nsource load_titles.dump ;\nSELECT 'LOADING salaries' as 'INFO';\nsource load_salaries1.dump ;\nsource load_salaries2.dump ;\nsource load_salaries3.dump ;\n\nsource show_elapsed.sql ;\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "load_departments.dump",
          "type": "blob",
          "size": 0.244140625,
          "content": "INSERT INTO `departments` VALUES \n('d001','Marketing'),\n('d002','Finance'),\n('d003','Human Resources'),\n('d004','Production'),\n('d005','Development'),\n('d006','Quality Management'),\n('d007','Sales'),\n('d008','Research'),\n('d009','Customer Service');\n"
        },
        {
          "name": "load_dept_emp.dump",
          "type": "blob",
          "size": 13828.0078125,
          "content": ""
        },
        {
          "name": "load_dept_manager.dump",
          "type": "blob",
          "size": 1.064453125,
          "content": "INSERT INTO `dept_manager` VALUES \n(110022,'d001','1985-01-01','1991-10-01'),\n\n(110039,'d001','1991-10-01','9999-01-01'),\n\n(110085,'d002','1985-01-01','1989-12-17'),\n\n(110114,'d002','1989-12-17','9999-01-01'),\n\n(110183,'d003','1985-01-01','1992-03-21'),\n\n(110228,'d003','1992-03-21','9999-01-01'),\n\n(110303,'d004','1985-01-01','1988-09-09'),\n\n(110344,'d004','1988-09-09','1992-08-02'),\n\n(110386,'d004','1992-08-02','1996-08-30'),\n\n(110420,'d004','1996-08-30','9999-01-01'),\n\n(110511,'d005','1985-01-01','1992-04-25'),\n\n(110567,'d005','1992-04-25','9999-01-01'),\n\n(110725,'d006','1985-01-01','1989-05-06'),\n\n(110765,'d006','1989-05-06','1991-09-12'),\n\n(110800,'d006','1991-09-12','1994-06-28'),\n\n(110854,'d006','1994-06-28','9999-01-01'),\n\n(111035,'d007','1985-01-01','1991-03-07'),\n\n(111133,'d007','1991-03-07','9999-01-01'),\n\n(111400,'d008','1985-01-01','1991-04-08'),\n\n(111534,'d008','1991-04-08','9999-01-01'),\n\n(111692,'d009','1985-01-01','1988-10-17'),\n\n(111784,'d009','1988-10-17','1992-09-08'),\n\n(111877,'d009','1992-09-08','1996-01-03'),\n\n(111939,'d009','1996-01-03','9999-01-01');\n"
        },
        {
          "name": "load_employees.dump",
          "type": "blob",
          "size": 17307.453125,
          "content": ""
        },
        {
          "name": "load_salaries1.dump",
          "type": "blob",
          "size": 38873.080078125,
          "content": ""
        },
        {
          "name": "load_salaries2.dump",
          "type": "blob",
          "size": 38873.0283203125,
          "content": ""
        },
        {
          "name": "load_salaries3.dump",
          "type": "blob",
          "size": 38164.95703125,
          "content": ""
        },
        {
          "name": "load_titles.dump",
          "type": "blob",
          "size": 21199.9375,
          "content": ""
        },
        {
          "name": "objects.sql",
          "type": "blob",
          "size": 4.4609375,
          "content": "use employees;\n\ndelimiter //\ndrop function if exists emp_dept_id //\ndrop function if exists emp_dept_name //\ndrop function if exists emp_name //\ndrop function if exists current_manager //\ndrop procedure if exists show_departments //\n\n--\n-- returns the department id of a given employee\n--\ncreate function emp_dept_id( employee_id int )\nreturns char(4)\nreads sql data\nbegin\n    declare max_date date;\n    set max_date = (\n        select\n            max(from_date)\n        from\n            dept_emp\n        where\n            emp_no = employee_id\n    );\n    set @max_date=max_date;\n    return (\n        select\n            dept_no\n        from\n            dept_emp\n        where\n            emp_no = employee_id\n            and\n            from_date = max_date\n            limit 1\n    );\nend //\n\n--\n-- returns the department name of a given employee\n--\n\ncreate function emp_dept_name( employee_id int )\nreturns varchar(40)\nreads sql data\nbegin\n    return (\n        select\n            dept_name\n        from\n            departments\n        where\n            dept_no = emp_dept_id(employee_id)\n    );\nend//\n\n--\n-- returns the employee name of a given employee id\n--\ncreate function emp_name (employee_id int)\nreturns varchar(32)\nreads SQL data\nbegin\n    return (\n        select\n            concat(first_name, ' ', last_name) as name\n        from\n            employees\n        where\n            emp_no = employee_id\n    );\nend//\n\n--\n-- returns the manager of a department\n-- choosing the most recent one\n-- from the manager list\n--\ncreate function current_manager( dept_id char(4) )\nreturns varchar(32)\nreads sql data\nbegin\n    declare max_date date;\n    set max_date = (\n        select\n            max(from_date)\n        from\n            dept_manager\n        where\n            dept_no = dept_id\n    );\n    set @max_date=max_date;\n    return (\n        select\n            emp_name(emp_no)\n        from\n            dept_manager\n        where\n            dept_no = dept_id\n            and\n            from_date = max_date\n            limit 1\n    );\nend //\n\ndelimiter ;\n\n--\n--  selects the employee records with the\n--  latest department\n--\n\nCREATE OR REPLACE VIEW  v_full_employees\nAS\nSELECT\n    emp_no,\n    first_name , last_name ,\n    birth_date , gender,\n    hire_date,\n    emp_dept_name(emp_no) as department\nfrom\n    employees;\n\n--\n-- selects the department list with manager names\n--\n\nCREATE OR REPLACE VIEW v_full_departments\nAS\nSELECT\n    dept_no, dept_name, current_manager(dept_no) as manager\nFROM\n    departments;\n\ndelimiter //\n\n--\n-- shows the departments with the number of employees\n-- per department\n--\ncreate procedure show_departments()\nmodifies sql data\nbegin\n    DROP TABLE IF EXISTS department_max_date;\n    DROP TABLE IF EXISTS department_people;\n    CREATE TEMPORARY TABLE department_max_date\n    (\n        emp_no int not null primary key,\n        dept_from_date date not null,\n        dept_to_date  date not null, # bug#320513\n        KEY (dept_from_date, dept_to_date)\n    );\n    INSERT INTO department_max_date\n    SELECT\n        emp_no, max(from_date), max(to_date)\n    FROM\n        dept_emp\n    GROUP BY\n        emp_no;\n\n    CREATE TEMPORARY TABLE department_people\n    (\n        emp_no int not null,\n        dept_no char(4) not null,\n        primary key (emp_no, dept_no)\n    );\n\n    insert into department_people\n    select dmd.emp_no, dept_no\n    from\n        department_max_date dmd\n        inner join dept_emp de\n            on dmd.dept_from_date=de.from_date\n            and dmd.dept_to_date=de.to_date\n            and dmd.emp_no=de.emp_no;\n    SELECT\n        dept_no,dept_name,manager, count(*)\n        from v_full_departments\n            inner join department_people using (dept_no)\n        group by dept_no;\n        # with rollup;\n    DROP TABLE department_max_date;\n    DROP TABLE department_people;\nend //\n\ndrop function if exists employees_usage //\ndrop procedure if exists employees_help //\n\nCREATE FUNCTION employees_usage ()\nRETURNS TEXT\nDETERMINISTIC\nBEGIN\n    RETURN\n'\n    == USAGE ==\n    ====================\n\n    PROCEDURE show_departments()\n\n        shows the departments with the manager and\n        number of employees per department\n\n    FUNCTION current_manager (dept_id)\n\n        Shows who is the manager of a given departmennt\n\n    FUNCTION emp_name (emp_id)\n\n        Shows name and surname of a given employee\n\n    FUNCTION emp_dept_id (emp_id)\n\n        Shows the current department of given employee\n';\nEND //\n\ncreate procedure employees_help()\ndeterministic\nbegin\n    select employees_usage() as info;\nend//\n\ndelimiter ;\n\n"
        },
        {
          "name": "sakila",
          "type": "tree",
          "content": null
        },
        {
          "name": "show_elapsed.sql",
          "type": "blob",
          "size": 0.265625,
          "content": "select timediff(\n    (select update_time from information_schema.tables where table_schema='employees' and table_name='salaries'),\n    (select create_time from information_schema.tables where table_schema='employees' and table_name='employees')\n) as data_load_time_diff;\n\n"
        },
        {
          "name": "sql_test.sh",
          "type": "blob",
          "size": 1.7578125,
          "content": "#!/bin/bash\n\nMYSQL=$1\n\nif [ -z \"$MYSQL\" ]\nthen\n    echo \"Syntax: $0 mysql_connection \"\n    echo \"Where 'mysql_connection is your client invocation\"\n    echo \"Examples:\"\n    echo \"      mysql # (when using \\$HOME/.my.cnf)\"\n    echo \"      'mysql -u something -psomepass -P3307'\"\n    echo \"      'mysql --defaults-file=/some/path/my.cnf'\"\n    echo \"      \\$HOME/sandboxes/msb_5_7_9/use\"\n    echo \"\"\n    exit 1\nfi\n\nEXPECTED=(\ndepartments:9:3737256214\ndept_emp:331603:1015881734\ndept_manager:24:2275236704\nemployees:300024:610052939\nsalaries:2844047:4273816835\ntitles:443308:1842528371\n)\n\nfunction get_expected\n{\n    table=$1\n    field=$2\n    for E in ${EXPECTED[*]}\n    do\n        t=$(echo $E | tr ':' ' ' | awk '{print $1}')\n        count=$(echo $E | tr ':' ' ' | awk '{print $2}')\n        crc=$(echo $E | tr ':' ' ' | awk '{print $3}')\n        if [ \"$t\" == \"$table\" ]\n        then\n           if [ \"$field\" == \"count\" ]\n           then\n               echo $count\n           else\n               echo $crc\n           fi \n           return\n        fi\n    done\n}\n\nprintf \"%-15s %-10s     %-15s \\n\" table count crc\necho '--------------- ----------     ---------------'\nfor T in $($MYSQL -BN -e 'show tables from employees') \ndo \n    CRC_TEXT=$($MYSQL -BN -e \"checksum table $T\" employees)\n    COUNT=$($MYSQL -BN -e \"select count(*) from $T\" employees)\n    CRC=$(echo $CRC_TEXT | awk '{print $2}')\n    expected_crc=$(get_expected $T crc)\n    expected_count=$(get_expected $T count)\n    if [ \"$expected_count\" == \"$COUNT\" ]\n    then\n        COUNT_RESULT=OK\n    else\n        COUNT_RESULT=DIFFERS\n    fi\n    if [ \"$expected_crc\" == \"$CRC\" ]\n    then\n        CRC_RESULT=OK\n    else\n        CRC_RESULT=DIFFERS\n    fi\n    printf \"%-15s %'10d     %'15d (%-7s %-7s)\\n\" $T $COUNT $CRC $COUNT_RESULT $CRC_RESULT\ndone\n\n"
        },
        {
          "name": "test_employees_md5.sql",
          "type": "blob",
          "size": 4.6005859375,
          "content": "--  Sample employee database \n--  See changelog table for details\n--  Copyright (C) 2007,2008, MySQL AB\n--  \n--  Original data created by Fusheng Wang and Carlo Zaniolo\n--  http://www.cs.aau.dk/TimeCenter/software.htm\n--  http://www.cs.aau.dk/TimeCenter/Data/employeeTemporalDataSet.zip\n-- \n--  Current schema by Giuseppe Maxia \n--  Data conversion from XML to relational by Patrick Crews\n-- \n-- This work is licensed under the \n-- Creative Commons Attribution-Share Alike 3.0 Unported License. \n-- To view a copy of this license, visit \n-- http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to \n-- Creative Commons, 171 Second Street, Suite 300, San Francisco, \n-- California, 94105, USA.\n-- \n--  DISCLAIMER\n--  To the best of our knowledge, this data is fabricated, and\n--  it does not correspond to real people. \n--  Any similarity to existing people is purely coincidental.\n-- \n\nUSE employees;\n\nSELECT 'TESTING INSTALLATION' as 'INFO';\n\nDROP TABLE IF EXISTS expected_values, found_values;\nCREATE TABLE expected_values (\n    table_name varchar(30) not null primary key,\n    recs int not null,\n    crc_sha varchar(100) not null,\n    crc_md5 varchar(100) not null\n);\n\n\nCREATE TABLE found_values LIKE expected_values;\n\nINSERT INTO `expected_values` VALUES \n('employees',   300024,'4d4aa689914d8fd41db7e45c2168e7dcb9697359',\n                        '4ec56ab5ba37218d187cf6ab09ce1aa1'),\n('departments',      9,'4b315afa0e35ca6649df897b958345bcb3d2b764',\n                       'd1af5e170d2d1591d776d5638d71fc5f'),\n('dept_manager',    24,'9687a7d6f93ca8847388a42a6d8d93982a841c6c',\n                       '8720e2f0853ac9096b689c14664f847e'),\n('dept_emp',    331603, 'd95ab9fe07df0865f592574b3b33b9c741d9fd1b',\n                       'ccf6fe516f990bdaa49713fc478701b7'),\n('titles',      443308,'d12d5f746b88f07e69b9e36675b6067abb01b60e',\n                       'bfa016c472df68e70a03facafa1bc0a8'),\n('salaries',   2844047,'b5a1785c27d75e33a4173aaa22ccf41ebd7d4a9f',\n                       'fd220654e95aea1b169624ffe3fca934');\nSELECT table_name, recs AS expected_records, crc_md5 AS expected_crc FROM expected_values;\n\nDROP TABLE IF EXISTS tchecksum;\nCREATE TABLE tchecksum (chk char(100));\n\nSET @crc= '';\n\nINSERT INTO tchecksum \n    SELECT @crc := MD5(CONCAT_WS('#',@crc,\n                emp_no,birth_date,first_name,last_name,gender,hire_date)) \n    FROM employees ORDER BY emp_no;\nINSERT INTO found_values VALUES ('employees', (SELECT COUNT(*) FROM employees), @crc,@crc);\n\nSET @crc = '';\nINSERT INTO tchecksum \n    SELECT @crc := MD5(CONCAT_WS('#',@crc, dept_no,dept_name)) \n    FROM departments ORDER BY dept_no;\nINSERT INTO found_values values ('departments', (SELECT COUNT(*) FROM departments), @crc,@crc);\n\nSET @crc = '';\nINSERT INTO tchecksum \n    SELECT @crc := MD5(CONCAT_WS('#',@crc, dept_no,emp_no, from_date,to_date)) \n    FROM dept_manager ORDER BY dept_no,emp_no;\nINSERT INTO found_values values ('dept_manager', (SELECT COUNT(*) FROM dept_manager), @crc,@crc);\n\nSET @crc = '';\nINSERT INTO tchecksum \n    SELECT @crc := MD5(CONCAT_WS('#',@crc, dept_no,emp_no, from_date,to_date)) \n    FROM dept_emp ORDER BY dept_no,emp_no;\nINSERT INTO found_values values ('dept_emp', (SELECT COUNT(*) FROM dept_emp), @crc,@crc);\n\nSET @crc = '';\nINSERT INTO tchecksum \n    SELECT @crc := MD5(CONCAT_WS('#',@crc, emp_no, title, from_date,to_date)) \n    FROM titles order by emp_no,title,from_date;\nINSERT INTO found_values values ('titles', (SELECT COUNT(*) FROM titles), @crc,@crc);\n\nSET @crc = '';\nINSERT INTO tchecksum \n    SELECT @crc := MD5(CONCAT_WS('#',@crc, emp_no, salary, from_date,to_date)) \n    FROM salaries order by emp_no,from_date,to_date;\nINSERT INTO found_values values ('salaries', (SELECT COUNT(*) FROM salaries), @crc,@crc);\n\nDROP TABLE tchecksum;\n\nSELECT table_name, recs as 'found_records   ', crc_md5 as found_crc from found_values;\n\nSELECT  \n    e.table_name, \n    IF(e.recs=f.recs,'OK', 'not ok') AS records_match, \n    IF(e.crc_md5=f.crc_md5,'ok','not ok') AS crc_match \nfrom \n    expected_values e INNER JOIN found_values f USING (table_name); \n\n\nset @crc_fail=(select count(*) from expected_values e inner join found_values f on (e.table_name=f.table_name) where f.crc_md5 != e.crc_md5);\nset @count_fail=(select count(*) from expected_values e inner join found_values f on (e.table_name=f.table_name) where f.recs != e.recs);\n\nselect timediff(\n    now(),\n    (select create_time from information_schema.tables where table_schema='employees' and table_name='expected_values')\n) as computation_time;\n\nDROP TABLE expected_values,found_values;\n\nselect 'CRC' as summary,  if(@crc_fail = 0, \"OK\", \"FAIL\" ) as 'result'\nunion all\nselect 'count', if(@count_fail = 0, \"OK\", \"FAIL\" );\n\n\n"
        },
        {
          "name": "test_employees_sha.sql",
          "type": "blob",
          "size": 4.6044921875,
          "content": "--  Sample employee database \n--  See changelog for details\n--  Copyright (C) 2007,2008, MySQL AB\n--  \n--  Original data created by Fusheng Wang and Carlo Zaniolo\n--  http://www.cs.aau.dk/TimeCenter/software.htm\n--  http://www.cs.aau.dk/TimeCenter/Data/employeeTemporalDataSet.zip\n-- \n--  Current schema by Giuseppe Maxia \n--  Data conversion from XML to relational by Patrick Crews\n-- \n-- This work is licensed under the \n-- Creative Commons Attribution-Share Alike 3.0 Unported License. \n-- To view a copy of this license, visit \n-- http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to \n-- Creative Commons, 171 Second Street, Suite 300, San Francisco, \n-- California, 94105, USA.\n-- \n--  DISCLAIMER\n--  To the best of our knowledge, this data is fabricated, and\n--  it does not correspond to real people. \n--  Any similarity to existing people is purely coincidental.\n-- \n\nUSE employees;\n\nSELECT 'TESTING INSTALLATION' as 'INFO';\n\nDROP TABLE IF EXISTS expected_values, found_values;\nCREATE TABLE expected_values (\n    table_name varchar(30) not null primary key,\n    recs int not null,\n    crc_sha varchar(100) not null,\n    crc_md5 varchar(100) not null\n);\n\n\nCREATE TABLE found_values LIKE expected_values;\n\nINSERT INTO `expected_values` VALUES \n('employees',   300024,'4d4aa689914d8fd41db7e45c2168e7dcb9697359',\n                        '4ec56ab5ba37218d187cf6ab09ce1aa1'),\n('departments',      9,'4b315afa0e35ca6649df897b958345bcb3d2b764',\n                       'd1af5e170d2d1591d776d5638d71fc5f'),\n('dept_manager',    24,'9687a7d6f93ca8847388a42a6d8d93982a841c6c',\n                       '8720e2f0853ac9096b689c14664f847e'),\n('dept_emp',    331603, 'd95ab9fe07df0865f592574b3b33b9c741d9fd1b',\n                       'ccf6fe516f990bdaa49713fc478701b7'),\n('titles',      443308,'d12d5f746b88f07e69b9e36675b6067abb01b60e',\n                       'bfa016c472df68e70a03facafa1bc0a8'),\n('salaries',   2844047,'b5a1785c27d75e33a4173aaa22ccf41ebd7d4a9f',\n                       'fd220654e95aea1b169624ffe3fca934');\nSELECT table_name, recs AS expected_records, crc_sha AS expected_crc FROM expected_values;\n\nDROP TABLE IF EXISTS tchecksum;\nCREATE TABLE tchecksum (chk char(100));\n\nSET @crc= '';\n\nINSERT INTO tchecksum \n    SELECT @crc := sha(CONCAT_WS('#',@crc,\n                emp_no,birth_date,first_name,last_name,gender,hire_date)) \n    FROM employees ORDER BY emp_no;\nINSERT INTO found_values VALUES ('employees', (SELECT COUNT(*) FROM employees), @crc,@crc);\n\nSET @crc = '';\nINSERT INTO tchecksum \n    SELECT @crc := sha(CONCAT_WS('#',@crc, dept_no,dept_name)) \n    FROM departments ORDER BY dept_no;\nINSERT INTO found_values values ('departments', (SELECT COUNT(*) FROM departments), @crc,@crc);\n\nSET @crc = '';\nINSERT INTO tchecksum \n    SELECT @crc := sha(CONCAT_WS('#',@crc, dept_no,emp_no, from_date,to_date)) \n    FROM dept_manager ORDER BY dept_no,emp_no;\nINSERT INTO found_values values ('dept_manager', (SELECT COUNT(*) FROM dept_manager), @crc,@crc);\n\nSET @crc = '';\nINSERT INTO tchecksum \n    SELECT @crc := sha(CONCAT_WS('#',@crc, dept_no,emp_no, from_date,to_date)) \n    FROM dept_emp ORDER BY dept_no,emp_no;\nINSERT INTO found_values values ('dept_emp', (SELECT COUNT(*) FROM dept_emp), @crc,@crc);\n\nSET @crc = '';\nINSERT INTO tchecksum \n    SELECT @crc := sha(CONCAT_WS('#',@crc, emp_no, title, from_date,to_date)) \n    FROM titles order by emp_no,title, from_date;\nINSERT INTO found_values values ('titles', (SELECT COUNT(*) FROM titles), @crc,@crc);\n\nSET @crc = '';\nINSERT INTO tchecksum \n    SELECT @crc := sha(CONCAT_WS('#',@crc, emp_no, salary, from_date,to_date)) \n    FROM salaries order by emp_no,from_date,to_date;\nINSERT INTO found_values values ('salaries', (SELECT COUNT(*) FROM salaries), @crc,@crc);\n\nDROP TABLE tchecksum;\n\nSELECT table_name, recs as 'found_records   ', crc_sha as found_crc from found_values;\n\nSELECT  \n    e.table_name, \n    IF(e.recs=f.recs,'OK', 'not ok') AS records_match, \n    IF(e.crc_sha=f.crc_sha,'ok','not ok') AS crc_match \nfrom \n    expected_values e INNER JOIN found_values f USING (table_name); \n\nset @crc_fail=(select count(*) from expected_values e inner join found_values f on (e.table_name=f.table_name) where f.crc_sha != e.crc_sha);\nset @count_fail=(select count(*) from expected_values e inner join found_values f on (e.table_name=f.table_name) where f.recs != e.recs);\n\nselect timediff(\n    now(),\n    (select create_time from information_schema.tables where table_schema='employees' and table_name='expected_values')\n) as computation_time;\nDROP TABLE expected_values,found_values;\n\nselect 'CRC' as summary,  if(@crc_fail = 0, \"OK\", \"FAIL\" ) as 'result'\nunion all\nselect 'count', if(@count_fail = 0, \"OK\", \"FAIL\" ) as 'count';\n\n\n"
        },
        {
          "name": "test_versions.sh",
          "type": "blob",
          "size": 1.9658203125,
          "content": "#!/usr/bin/env bash\n\n# Tests that the employees database can work with all versions of MySQL\n# \n# Requires dbdeployer to be installed and configured (https://www.dbdeployer.com)\n\nfunction found_in_path {\n    name=$1\n    for dir in $(echo $PATH | tr ':' ' ')\n    do\n        if [ -x $dir/$name ]\n        then\n            echo $dir/$name\n            return\n        fi\n    done\n}\n\n\nfunction check_exit_code {\n    exit_code=$?\n    if [ \"$exit_code\" != \"0\" ]\n    then\n        echo \"Execution error\"\n        exit $exit_code\n    fi\n}\n\ndbdeployer=$(found_in_path dbdeployer)\n\nif [ -z \"$dbdeployer\" ]\nthen\n    echo \"dbdeployer not found in \\$PATH\"\n    exit 1\nfi\n\n[ -z \"$SANDBOX_HOME\" ] && SANDBOX_HOME=$HOME/sandboxes\n\nfor short_version in 5.0 5.1 5.5 5.6 5.7 8.0\ndo\n    version=$($dbdeployer info version $short_version)\n    if [ -z \"$version\" ]\n    then\n        continue\n    fi\n    echo \"### -------------------\"\n    echo \"### $version\"\n    echo \"### -------------------\"\n    ver_name=$(echo $version | tr '.' '_')\n    \n    $dbdeployer deploy single $version\n    check_exit_code\n\n    msb=$SANDBOX_HOME/msb_$ver_name\n\n    if [ ! -d $msb ]\n    then\n        echo \"'$msb' not found or not a directory - Halting test\"\n        exit 1\n    fi\n\n    $msb/use < employees.sql \n    check_exit_code\n    echo \"Testing MD5\"\n    $msb/use -t < test_employees_md5.sql >  /tmp/test_md5.txt\n    md5_ok=$(grep -iw ok /tmp/test_md5.txt | wc -l | tr -d ' \\t')\n\n    if [ \"$md5_ok\" == \"8\" ]\n    then\n        echo \"MD5 OK - $md5_ok\"\n    else\n        echo \"MD5 FAIL - expected 8 - found $md5_ok\"\n        cat /tmp/test_md5.txt\n        exit 1\n    fi\n\n    echo \"Testing SHA\"\n    $msb/use -t < test_employees_sha.sql >  /tmp/test_sha.txt\n    sha_ok=$(grep -iw ok /tmp/test_sha.txt | wc -l | tr -d ' \\t')\n    if [ \"$sha_ok\" == \"8\" ]\n    then\n        echo \"SHA OK - $sha_ok\"\n    else\n        echo \"SHA FAIL - expected 8 - found $sha_ok\"\n        cat /tmp/test_sha.txt\n        exit 1\n    fi\n\n    $dbdeployer delete msb_$ver_name\n    check_exit_code\n\ndone\n\n"
        }
      ]
    }
  ]
}