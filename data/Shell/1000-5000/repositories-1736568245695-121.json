{
  "metadata": {
    "timestamp": 1736568245695,
    "page": 121,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nginxinc/docker-nginx",
      "stars": 3296,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.005859375,
          "content": "*.bak\n"
        },
        {
          "name": ".test",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.26953125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n- Using welcoming and inclusive language\n- Being respectful of differing viewpoints and experiences\n- Gracefully accepting constructive criticism\n- Focusing on what is best for the community\n- Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n- The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n- Trolling, insulting/derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n- Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the moderation team at <nginx-oss-community@f5.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org), version 1.4,\navailable at <https://www.contributor-covenant.org/version/1/4/code-of-conduct.html>\n\nFor answers to common questions about this code of conduct, see\n<https://www.contributor-covenant.org/faq>\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.10546875,
          "content": "# Contributing Guidelines\n\nThe following is a set of guidelines for contributing to the Docker NGINX image. We really appreciate that you are considering contributing!\n\n#### Table Of Contents\n\n[Getting Started](#getting-started)\n\n[Contributing](#contributing)\n\n[Code Guidelines](#code-guidelines)\n\n[Code of Conduct](https://github.com/nginxinc/docker-nginx/blob/master/CODE_OF_CONDUCT.md)\n\n## Getting Started\n\nFollow our [how to use this image guide](https://hub.docker.com/_/nginx/) to get the Docker NGINX image up and running.\n\n## Contributing\n\n### Report a Bug\n\nTo report a bug, open an issue on GitHub with the label `bug` using the available bug report issue template. Please ensure the bug has not already been reported. **If the bug is a potential security vulnerability, please report it using our [security policy](https://github.com/nginxinc/docker-nginx/blob/master/SECURITY.md).**\n\n### Suggest a Feature or Enhancement\n\nTo suggest a feature or enhancement, please create an issue on GitHub with the label `enhancement` using the available [feature request template](https://github.com/nginxinc/docker-nginx/blob/master/.github/feature_request_template.md). Please ensure the feature or enhancement has not already been suggested.\n\n### Open a Pull Request\n\n- Fork the repo, create a branch, implement your changes, add any relevant tests, submit a PR when your changes are **tested** and ready for review.\n- Fill in [our pull request template](https://github.com/nginxinc/docker-nginx/blob/master/.github/pull_request_template.md).\n\nNote: if you'd like to implement a new feature, please consider creating a [feature request issue](https://github.com/nginxinc/docker-nginx/blob/master/.github/feature_request_template.md) first to start a discussion about the feature.\n\n## Code Guidelines\n\n### Git Guidelines\n\n- Keep a clean, concise and meaningful git commit history on your branch (within reason), rebasing locally and squashing before submitting a PR.\n- If possible and/or relevant, use the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) format when writing a commit message, so that changelogs can be automatically generated\n- Follow the guidelines of writing a good commit message as described here <https://chris.beams.io/posts/git-commit/> and summarised in the next few points:\n  - In the subject line, use the present tense (\"Add feature\" not \"Added feature\").\n  - In the subject line, use the imperative mood (\"Move cursor to...\" not \"Moves cursor to...\").\n  - Limit the subject line to 72 characters or less.\n  - Reference issues and pull requests liberally after the subject line.\n  - Add more detailed description in the body of the git message (`git commit -a` to give you more space and time in your text editor to write a good message instead of `git commit -am`).\n\n### Docker Guidelines\n\n- Update any entrypoint scripts via the the scripts contained in the `/entrypoint` directory.\n- Update any Dockerfiles via the Dockerfile templates in the root directory (e.g. `Dockerfile-alpine.template`).\n- Run the `./update.sh` script to apply all entrypoint/Dockerfile template changes to the relevant image entrypoints & Dockerfiles.\n"
        },
        {
          "name": "Dockerfile-alpine-otel.template",
          "type": "blob",
          "size": 2.8095703125,
          "content": "FROM nginx:%%NGINX_VERSION%%-alpine\n\nENV OTEL_VERSION   %%OTEL_VERSION%%\n\nRUN set -x \\\n    && apkArch=\"$(cat /etc/apk/arch)\" \\\n    && nginxPackages=\"%%PACKAGES%%\n    \" \\\n# install prerequisites for public key and pkg-oss checks\n    && apk add --no-cache --virtual .checksum-deps \\\n        openssl \\\n    && case \"$apkArch\" in \\\n        x86_64|aarch64) \\\n# arches officially built by upstream\n            apk add -X \"%%PACKAGEREPO%%v$(egrep -o '^[0-9]+\\.[0-9]+' /etc/alpine-release)/main\" --no-cache $nginxPackages \\\n            ;; \\\n        *) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from the published packaging sources\n            set -x \\\n            && tempDir=\"$(mktemp -d)\" \\\n            && chown nobody:nobody $tempDir \\\n            && apk add --no-cache --virtual .build-deps \\\n                gcc \\\n                libc-dev \\\n                make \\\n                openssl-dev \\\n                pcre2-dev \\\n                zlib-dev \\\n                linux-headers \\\n                cmake \\\n                bash \\\n                alpine-sdk \\\n                findutils \\\n                curl \\\n                xz \\\n                re2-dev \\\n                c-ares-dev \\\n            && su nobody -s /bin/sh -c \" \\\n                export HOME=${tempDir} \\\n                && cd ${tempDir} \\\n                && curl -f -L -O https://github.com/nginx/pkg-oss/archive/%%REVISION%%.tar.gz \\\n                && PKGOSSCHECKSUM=\\\"%%PKGOSSCHECKSUM%% *%%REVISION%%.tar.gz\\\" \\\n                && if [ \\\"\\$(openssl sha512 -r %%REVISION%%.tar.gz)\\\" = \\\"\\$PKGOSSCHECKSUM\\\" ]; then \\\n                    echo \\\"pkg-oss tarball checksum verification succeeded!\\\"; \\\n                else \\\n                    echo \\\"pkg-oss tarball checksum verification failed!\\\"; \\\n                    exit 1; \\\n                fi \\\n                && tar xzvf %%REVISION%%.tar.gz \\\n                && cd pkg-oss-%%REVISION%% \\\n                && cd alpine \\\n                && make %%BUILDTARGET%% \\\n                && apk index --allow-untrusted -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\\n                && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \\\n                \" \\\n            && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\\n            && apk del --no-network .build-deps \\\n            && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages \\\n            ;; \\\n    esac \\\n# remove checksum deps\n    && apk del --no-network .checksum-deps \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n    && if [ -n \"$tempDir\" ]; then rm -rf \"$tempDir\"; fi \\\n    && if [ -f \"/etc/apk/keys/abuild-key.rsa.pub\" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi\n"
        },
        {
          "name": "Dockerfile-alpine-perl.template",
          "type": "blob",
          "size": 2.7021484375,
          "content": "FROM nginx:%%NGINX_VERSION%%-alpine\n\nRUN set -x \\\n    && apkArch=\"$(cat /etc/apk/arch)\" \\\n    && nginxPackages=\"%%PACKAGES%%\n    \" \\\n# install prerequisites for public key and pkg-oss checks\n    && apk add --no-cache --virtual .checksum-deps \\\n        openssl \\\n    && case \"$apkArch\" in \\\n        x86_64|aarch64) \\\n# arches officially built by upstream\n            apk add -X \"%%PACKAGEREPO%%v$(egrep -o '^[0-9]+\\.[0-9]+' /etc/alpine-release)/main\" --no-cache $nginxPackages \\\n            ;; \\\n        *) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from the published packaging sources\n            set -x \\\n            && tempDir=\"$(mktemp -d)\" \\\n            && chown nobody:nobody $tempDir \\\n            && apk add --no-cache --virtual .build-deps \\\n                gcc \\\n                libc-dev \\\n                make \\\n                openssl-dev \\\n                pcre2-dev \\\n                zlib-dev \\\n                linux-headers \\\n                perl-dev \\\n                bash \\\n                alpine-sdk \\\n                findutils \\\n                curl \\\n            && su nobody -s /bin/sh -c \" \\\n                export HOME=${tempDir} \\\n                && cd ${tempDir} \\\n                && curl -f -L -O https://github.com/nginx/pkg-oss/archive/%%REVISION%%.tar.gz \\\n                && PKGOSSCHECKSUM=\\\"%%PKGOSSCHECKSUM%% *%%REVISION%%.tar.gz\\\" \\\n                && if [ \\\"\\$(openssl sha512 -r %%REVISION%%.tar.gz)\\\" = \\\"\\$PKGOSSCHECKSUM\\\" ]; then \\\n                    echo \\\"pkg-oss tarball checksum verification succeeded!\\\"; \\\n                else \\\n                    echo \\\"pkg-oss tarball checksum verification failed!\\\"; \\\n                    exit 1; \\\n                fi \\\n                && tar xzvf %%REVISION%%.tar.gz \\\n                && cd pkg-oss-%%REVISION%% \\\n                && cd alpine \\\n                && make %%BUILDTARGET%% \\\n                && apk index --allow-untrusted -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\\n                && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \\\n                \" \\\n            && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\\n            && apk del --no-network .build-deps \\\n            && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages \\\n            ;; \\\n    esac \\\n# remove checksum deps\n    && apk del --no-network .checksum-deps \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n    && if [ -n \"$tempDir\" ]; then rm -rf \"$tempDir\"; fi \\\n    && if [ -f \"/etc/apk/keys/abuild-key.rsa.pub\" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi\n"
        },
        {
          "name": "Dockerfile-alpine-slim.template",
          "type": "blob",
          "size": 4.9921875,
          "content": "FROM alpine:%%ALPINE_VERSION%%\n\nLABEL maintainer=\"NGINX Docker Maintainers <docker-maint@nginx.com>\"\n\nENV NGINX_VERSION  %%NGINX_VERSION%%\nENV PKG_RELEASE    %%PKG_RELEASE%%\nENV DYNPKG_RELEASE %%DYNPKG_RELEASE%%\n\nRUN set -x \\\n# create nginx user/group first, to be consistent throughout docker variants\n    && addgroup -g 101 -S nginx \\\n    && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx \\\n    && apkArch=\"$(cat /etc/apk/arch)\" \\\n    && nginxPackages=\"%%PACKAGES%%\n    \" \\\n# install prerequisites for public key and pkg-oss checks\n    && apk add --no-cache --virtual .checksum-deps \\\n        openssl \\\n    && case \"$apkArch\" in \\\n        x86_64|aarch64) \\\n# arches officially built by upstream\n            set -x \\\n            && KEY_SHA512=\"e09fa32f0a0eab2b879ccbbc4d0e4fb9751486eedda75e35fac65802cc9faa266425edf83e261137a2f4d16281ce2c1a5f4502930fe75154723da014214f0655\" \\\n            && wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \\\n            && if echo \"$KEY_SHA512 */tmp/nginx_signing.rsa.pub\" | sha512sum -c -; then \\\n                echo \"key verification succeeded!\"; \\\n                mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/; \\\n            else \\\n                echo \"key verification failed!\"; \\\n                exit 1; \\\n            fi \\\n            && apk add -X \"%%PACKAGEREPO%%v$(egrep -o '^[0-9]+\\.[0-9]+' /etc/alpine-release)/main\" --no-cache $nginxPackages \\\n            ;; \\\n        *) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from the published packaging sources\n            set -x \\\n            && tempDir=\"$(mktemp -d)\" \\\n            && chown nobody:nobody $tempDir \\\n            && apk add --no-cache --virtual .build-deps \\\n                gcc \\\n                libc-dev \\\n                make \\\n                openssl-dev \\\n                pcre2-dev \\\n                zlib-dev \\\n                linux-headers \\\n                bash \\\n                alpine-sdk \\\n                findutils \\\n                curl \\\n            && su nobody -s /bin/sh -c \" \\\n                export HOME=${tempDir} \\\n                && cd ${tempDir} \\\n                && curl -f -L -O https://github.com/nginx/pkg-oss/archive/%%REVISION%%.tar.gz \\\n                && PKGOSSCHECKSUM=\\\"%%PKGOSSCHECKSUM%% *%%REVISION%%.tar.gz\\\" \\\n                && if [ \\\"\\$(openssl sha512 -r %%REVISION%%.tar.gz)\\\" = \\\"\\$PKGOSSCHECKSUM\\\" ]; then \\\n                    echo \\\"pkg-oss tarball checksum verification succeeded!\\\"; \\\n                else \\\n                    echo \\\"pkg-oss tarball checksum verification failed!\\\"; \\\n                    exit 1; \\\n                fi \\\n                && tar xzvf %%REVISION%%.tar.gz \\\n                && cd pkg-oss-%%REVISION%% \\\n                && cd alpine \\\n                && make %%BUILDTARGET%% \\\n                && apk index --allow-untrusted -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\\n                && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \\\n                \" \\\n            && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\\n            && apk del --no-network .build-deps \\\n            && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages \\\n            ;; \\\n    esac \\\n# remove checksum deps\n    && apk del --no-network .checksum-deps \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n    && if [ -n \"$tempDir\" ]; then rm -rf \"$tempDir\"; fi \\\n    && if [ -f \"/etc/apk/keys/abuild-key.rsa.pub\" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi \\\n# Bring in gettext so we can get `envsubst`, then throw\n# the rest away. To do this, we need to install `gettext`\n# then move `envsubst` out of the way so `gettext` can\n# be deleted completely, then move `envsubst` back.\n    && apk add --no-cache --virtual .gettext gettext \\\n    && mv /usr/bin/envsubst /tmp/ \\\n    \\\n    && runDeps=\"$( \\\n        scanelf --needed --nobanner /tmp/envsubst \\\n            | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }' \\\n            | sort -u \\\n            | xargs -r apk info --installed \\\n            | sort -u \\\n    )\" \\\n    && apk add --no-cache $runDeps \\\n    && apk del --no-network .gettext \\\n    && mv /tmp/envsubst /usr/local/bin/ \\\n# Bring in tzdata so users could set the timezones through the environment\n# variables\n    && apk add --no-cache tzdata \\\n# forward request and error logs to docker log collector\n    && ln -sf /dev/stdout /var/log/nginx/access.log \\\n    && ln -sf /dev/stderr /var/log/nginx/error.log \\\n# create a docker-entrypoint.d directory\n    && mkdir /docker-entrypoint.d\n\nCOPY docker-entrypoint.sh /\nCOPY 10-listen-on-ipv6-by-default.sh /docker-entrypoint.d\nCOPY 15-local-resolvers.envsh /docker-entrypoint.d\nCOPY 20-envsubst-on-templates.sh /docker-entrypoint.d\nCOPY 30-tune-worker-processes.sh /docker-entrypoint.d\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\nEXPOSE 80\n\nSTOPSIGNAL SIGQUIT\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
        },
        {
          "name": "Dockerfile-alpine.template",
          "type": "blob",
          "size": 2.9775390625,
          "content": "FROM nginx:%%NGINX_VERSION%%-alpine-slim\n\nENV NJS_VERSION   %%NJS_VERSION%%\nENV NJS_RELEASE   %%NJS_RELEASE%%\n\nRUN set -x \\\n    && apkArch=\"$(cat /etc/apk/arch)\" \\\n    && nginxPackages=\"%%PACKAGES%%\n    \" \\\n# install prerequisites for public key and pkg-oss checks\n    && apk add --no-cache --virtual .checksum-deps \\\n        openssl \\\n    && case \"$apkArch\" in \\\n        x86_64|aarch64) \\\n# arches officially built by upstream\n            apk add -X \"%%PACKAGEREPO%%v$(egrep -o '^[0-9]+\\.[0-9]+' /etc/alpine-release)/main\" --no-cache $nginxPackages \\\n            ;; \\\n        *) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from the published packaging sources\n            set -x \\\n            && tempDir=\"$(mktemp -d)\" \\\n            && chown nobody:nobody $tempDir \\\n            && apk add --no-cache --virtual .build-deps \\\n                gcc \\\n                libc-dev \\\n                make \\\n                openssl-dev \\\n                pcre2-dev \\\n                zlib-dev \\\n                linux-headers \\\n                libxslt-dev \\\n                gd-dev \\\n                geoip-dev \\\n                libedit-dev \\\n                bash \\\n                alpine-sdk \\\n                findutils \\\n                curl \\\n            && su nobody -s /bin/sh -c \" \\\n                export HOME=${tempDir} \\\n                && cd ${tempDir} \\\n                && curl -f -L -O https://github.com/nginx/pkg-oss/archive/%%REVISION%%.tar.gz \\\n                && PKGOSSCHECKSUM=\\\"%%PKGOSSCHECKSUM%% *%%REVISION%%.tar.gz\\\" \\\n                && if [ \\\"\\$(openssl sha512 -r %%REVISION%%.tar.gz)\\\" = \\\"\\$PKGOSSCHECKSUM\\\" ]; then \\\n                    echo \\\"pkg-oss tarball checksum verification succeeded!\\\"; \\\n                else \\\n                    echo \\\"pkg-oss tarball checksum verification failed!\\\"; \\\n                    exit 1; \\\n                fi \\\n                && tar xzvf %%REVISION%%.tar.gz \\\n                && cd pkg-oss-%%REVISION%% \\\n                && cd alpine \\\n                && make %%BUILDTARGET%% \\\n                && apk index --allow-untrusted -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk \\\n                && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz \\\n                \" \\\n            && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/ \\\n            && apk del --no-network .build-deps \\\n            && apk add -X ${tempDir}/packages/alpine/ --no-cache $nginxPackages \\\n            ;; \\\n    esac \\\n# remove checksum deps\n    && apk del --no-network .checksum-deps \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n    && if [ -n \"$tempDir\" ]; then rm -rf \"$tempDir\"; fi \\\n    && if [ -f \"/etc/apk/keys/abuild-key.rsa.pub\" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi \\\n# Bring in curl and ca-certificates to make registering on DNS SD easier\n    && apk add --no-cache curl ca-certificates\n"
        },
        {
          "name": "Dockerfile-debian-otel.template",
          "type": "blob",
          "size": 4.357421875,
          "content": "FROM nginx:%%NGINX_VERSION%%\n\nENV OTEL_VERSION     %%OTEL_VERSION%%\n\nRUN set -x; \\\n    NGINX_GPGKEY_PATH=/etc/apt/keyrings/nginx-archive-keyring.gpg; \\\n    dpkgArch=\"$(dpkg --print-architecture)\" \\\n    && nginxPackages=\"%%PACKAGES%%\n    \" \\\n    && case \"$dpkgArch\" in \\\n        amd64|arm64) \\\n# arches officialy built by upstream\n            echo \"deb [signed-by=$NGINX_GPGKEY_PATH] %%PACKAGEREPO%% %%DEBIAN_VERSION%% nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n            && apt-get update \\\n            ;; \\\n        *) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from the published packaging sources\n# new directory for storing sources and .deb files\n            tempDir=\"$(mktemp -d)\" \\\n            && chmod 777 \"$tempDir\" \\\n# (777 to ensure APT's \"_apt\" user can access it too)\n            \\\n# save list of currently-installed packages so build dependencies can be cleanly removed later\n            && savedAptMark=\"$(apt-mark showmanual)\" \\\n            \\\n# build .deb files from upstream's packaging sources\n            && apt-get update \\\n            && apt-get install --no-install-recommends --no-install-suggests -y \\\n                curl \\\n                devscripts \\\n                equivs \\\n                git \\\n                libxml2-utils \\\n                lsb-release \\\n                xsltproc \\\n            && ( \\\n                cd \"$tempDir\" \\\n                && REVISION=\"%%REVISION%%\" \\\n                && REVISION=${REVISION%~*} \\\n                && curl -f -L -O https://github.com/nginx/pkg-oss/archive/${REVISION}.tar.gz \\\n                && PKGOSSCHECKSUM=\"%%PKGOSSCHECKSUM%% *${REVISION}.tar.gz\" \\\n                && if [ \"$(openssl sha512 -r ${REVISION}.tar.gz)\" = \"$PKGOSSCHECKSUM\" ]; then \\\n                    echo \"pkg-oss tarball checksum verification succeeded!\"; \\\n                else \\\n                    echo \"pkg-oss tarball checksum verification failed!\"; \\\n                    exit 1; \\\n                fi \\\n                && tar xzvf ${REVISION}.tar.gz \\\n                && cd pkg-oss-${REVISION} \\\n                && cd debian \\\n                && for target in %%BUILDTARGET%%; do \\\n                    make rules-$target; \\\n                    mk-build-deps --install --tool=\"apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes\" \\\n                        debuild-$target/nginx-$NGINX_VERSION/debian/control; \\\n                done \\\n                && make %%BUILDTARGET%% \\\n            ) \\\n# we don't remove APT lists here because they get re-downloaded and removed later\n            \\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n# (which is done after we install the built packages so we don't have to redownload any overlapping dependencies)\n            && apt-mark showmanual | xargs apt-mark auto > /dev/null \\\n            && { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; } \\\n            \\\n# create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)\n            && ls -lAFh \"$tempDir\" \\\n            && ( cd \"$tempDir\" && dpkg-scanpackages . > Packages ) \\\n            && grep '^Package: ' \"$tempDir/Packages\" \\\n            && echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list \\\n# work around the following APT issue by using \"Acquire::GzipIndexes=false\" (overriding \"/etc/apt/apt.conf.d/docker-gzip-indexes\")\n#   Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n#   ...\n#   E: Failed to fetch store:/var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages  Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n            && apt-get -o Acquire::GzipIndexes=false update \\\n            ;; \\\n    esac \\\n    \\\n    && apt-get install --no-install-recommends --no-install-suggests -y \\\n                        $nginxPackages \\\n                        gettext-base \\\n                        curl \\\n    && apt-get remove --purge --auto-remove -y && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list \\\n    \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n    && if [ -n \"$tempDir\" ]; then \\\n        apt-get purge -y --auto-remove \\\n        && rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \\\n    fi\n"
        },
        {
          "name": "Dockerfile-debian-perl.template",
          "type": "blob",
          "size": 4.3193359375,
          "content": "FROM nginx:%%NGINX_VERSION%%\n\nRUN set -x; \\\n    NGINX_GPGKEY_PATH=/etc/apt/keyrings/nginx-archive-keyring.gpg; \\\n    dpkgArch=\"$(dpkg --print-architecture)\" \\\n    && nginxPackages=\"%%PACKAGES%%\n    \" \\\n    && case \"$dpkgArch\" in \\\n        amd64|arm64) \\\n# arches officialy built by upstream\n            echo \"deb [signed-by=$NGINX_GPGKEY_PATH] %%PACKAGEREPO%% %%DEBIAN_VERSION%% nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n            && apt-get update \\\n            ;; \\\n        *) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from the published packaging sources\n# new directory for storing sources and .deb files\n            tempDir=\"$(mktemp -d)\" \\\n            && chmod 777 \"$tempDir\" \\\n# (777 to ensure APT's \"_apt\" user can access it too)\n            \\\n# save list of currently-installed packages so build dependencies can be cleanly removed later\n            && savedAptMark=\"$(apt-mark showmanual)\" \\\n            \\\n# build .deb files from upstream's packaging sources\n            && apt-get update \\\n            && apt-get install --no-install-recommends --no-install-suggests -y \\\n                curl \\\n                devscripts \\\n                equivs \\\n                git \\\n                libxml2-utils \\\n                lsb-release \\\n                xsltproc \\\n            && ( \\\n                cd \"$tempDir\" \\\n                && REVISION=\"%%REVISION%%\" \\\n                && REVISION=${REVISION%~*} \\\n                && curl -f -L -O https://github.com/nginx/pkg-oss/archive/${REVISION}.tar.gz \\\n                && PKGOSSCHECKSUM=\"%%PKGOSSCHECKSUM%% *${REVISION}.tar.gz\" \\\n                && if [ \"$(openssl sha512 -r ${REVISION}.tar.gz)\" = \"$PKGOSSCHECKSUM\" ]; then \\\n                    echo \"pkg-oss tarball checksum verification succeeded!\"; \\\n                else \\\n                    echo \"pkg-oss tarball checksum verification failed!\"; \\\n                    exit 1; \\\n                fi \\\n                && tar xzvf ${REVISION}.tar.gz \\\n                && cd pkg-oss-${REVISION} \\\n                && cd debian \\\n                && for target in %%BUILDTARGET%%; do \\\n                    make rules-$target; \\\n                    mk-build-deps --install --tool=\"apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes\" \\\n                        debuild-$target/nginx-$NGINX_VERSION/debian/control; \\\n                done \\\n                && make %%BUILDTARGET%% \\\n            ) \\\n# we don't remove APT lists here because they get re-downloaded and removed later\n            \\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n# (which is done after we install the built packages so we don't have to redownload any overlapping dependencies)\n            && apt-mark showmanual | xargs apt-mark auto > /dev/null \\\n            && { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; } \\\n            \\\n# create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)\n            && ls -lAFh \"$tempDir\" \\\n            && ( cd \"$tempDir\" && dpkg-scanpackages . > Packages ) \\\n            && grep '^Package: ' \"$tempDir/Packages\" \\\n            && echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list \\\n# work around the following APT issue by using \"Acquire::GzipIndexes=false\" (overriding \"/etc/apt/apt.conf.d/docker-gzip-indexes\")\n#   Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n#   ...\n#   E: Failed to fetch store:/var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages  Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n            && apt-get -o Acquire::GzipIndexes=false update \\\n            ;; \\\n    esac \\\n    \\\n    && apt-get install --no-install-recommends --no-install-suggests -y \\\n                        $nginxPackages \\\n                        gettext-base \\\n                        curl \\\n    && apt-get remove --purge --auto-remove -y && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list \\\n    \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n    && if [ -n \"$tempDir\" ]; then \\\n        apt-get purge -y --auto-remove \\\n        && rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \\\n    fi\n"
        },
        {
          "name": "Dockerfile-debian.template",
          "type": "blob",
          "size": 6.3203125,
          "content": "FROM debian:%%DEBIAN_VERSION%%-slim\n\nLABEL maintainer=\"NGINX Docker Maintainers <docker-maint@nginx.com>\"\n\nENV NGINX_VERSION   %%NGINX_VERSION%%\nENV NJS_VERSION     %%NJS_VERSION%%\nENV NJS_RELEASE     %%NJS_RELEASE%%\nENV PKG_RELEASE     %%PKG_RELEASE%%\nENV DYNPKG_RELEASE  %%DYNPKG_RELEASE%%\n\nRUN set -x \\\n# create nginx user/group first, to be consistent throughout docker variants\n    && groupadd --system --gid 101 nginx \\\n    && useradd --system --gid nginx --no-create-home --home /nonexistent --comment \"nginx user\" --shell /bin/false --uid 101 nginx \\\n    && apt-get update \\\n    && apt-get install --no-install-recommends --no-install-suggests -y gnupg1 ca-certificates \\\n    && \\\n    NGINX_GPGKEYS=\"573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 8540A6F18833A80E9C1653A42FD21310B49F6B46 9E9BE90EACBCDE69FE9B204CBCDCD8A38D88A2B3\"; \\\n    NGINX_GPGKEY_PATH=/etc/apt/keyrings/nginx-archive-keyring.gpg; \\\n    export GNUPGHOME=\"$(mktemp -d)\"; \\\n    found=''; \\\n    for NGINX_GPGKEY in $NGINX_GPGKEYS; do \\\n    for server in \\\n        hkp://keyserver.ubuntu.com:80 \\\n        pgp.mit.edu \\\n    ; do \\\n        echo \"Fetching GPG key $NGINX_GPGKEY from $server\"; \\\n        gpg1 --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$NGINX_GPGKEY\" && found=yes && break; \\\n    done; \\\n    test -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $NGINX_GPGKEY\" && exit 1; \\\n    done; \\\n    gpg1 --export \"$NGINX_GPGKEYS\" > \"$NGINX_GPGKEY_PATH\" ; \\\n    rm -rf \"$GNUPGHOME\"; \\\n    apt-get remove --purge --auto-remove -y gnupg1 && rm -rf /var/lib/apt/lists/* \\\n    && dpkgArch=\"$(dpkg --print-architecture)\" \\\n    && nginxPackages=\"%%PACKAGES%%\n    \" \\\n    && case \"$dpkgArch\" in \\\n        amd64|arm64) \\\n# arches officialy built by upstream\n            echo \"deb [signed-by=$NGINX_GPGKEY_PATH] %%PACKAGEREPO%% %%DEBIAN_VERSION%% nginx\" >> /etc/apt/sources.list.d/nginx.list \\\n            && apt-get update \\\n            ;; \\\n        *) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from the published packaging sources\n# new directory for storing sources and .deb files\n            tempDir=\"$(mktemp -d)\" \\\n            && chmod 777 \"$tempDir\" \\\n# (777 to ensure APT's \"_apt\" user can access it too)\n            \\\n# save list of currently-installed packages so build dependencies can be cleanly removed later\n            && savedAptMark=\"$(apt-mark showmanual)\" \\\n            \\\n# build .deb files from upstream's packaging sources\n            && apt-get update \\\n            && apt-get install --no-install-recommends --no-install-suggests -y \\\n                curl \\\n                devscripts \\\n                equivs \\\n                git \\\n                libxml2-utils \\\n                lsb-release \\\n                xsltproc \\\n            && ( \\\n                cd \"$tempDir\" \\\n                && REVISION=\"%%REVISION%%\" \\\n                && REVISION=${REVISION%~*} \\\n                && curl -f -L -O https://github.com/nginx/pkg-oss/archive/${REVISION}.tar.gz \\\n                && PKGOSSCHECKSUM=\"%%PKGOSSCHECKSUM%% *${REVISION}.tar.gz\" \\\n                && if [ \"$(openssl sha512 -r ${REVISION}.tar.gz)\" = \"$PKGOSSCHECKSUM\" ]; then \\\n                    echo \"pkg-oss tarball checksum verification succeeded!\"; \\\n                else \\\n                    echo \"pkg-oss tarball checksum verification failed!\"; \\\n                    exit 1; \\\n                fi \\\n                && tar xzvf ${REVISION}.tar.gz \\\n                && cd pkg-oss-${REVISION} \\\n                && cd debian \\\n                && for target in %%BUILDTARGET%%; do \\\n                    make rules-$target; \\\n                    mk-build-deps --install --tool=\"apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes\" \\\n                        debuild-$target/nginx-$NGINX_VERSION/debian/control; \\\n                done \\\n                && make %%BUILDTARGET%% \\\n            ) \\\n# we don't remove APT lists here because they get re-downloaded and removed later\n            \\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n# (which is done after we install the built packages so we don't have to redownload any overlapping dependencies)\n            && apt-mark showmanual | xargs apt-mark auto > /dev/null \\\n            && { [ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; } \\\n            \\\n# create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)\n            && ls -lAFh \"$tempDir\" \\\n            && ( cd \"$tempDir\" && dpkg-scanpackages . > Packages ) \\\n            && grep '^Package: ' \"$tempDir/Packages\" \\\n            && echo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list \\\n# work around the following APT issue by using \"Acquire::GzipIndexes=false\" (overriding \"/etc/apt/apt.conf.d/docker-gzip-indexes\")\n#   Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n#   ...\n#   E: Failed to fetch store:/var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages  Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n            && apt-get -o Acquire::GzipIndexes=false update \\\n            ;; \\\n    esac \\\n    \\\n    && apt-get install --no-install-recommends --no-install-suggests -y \\\n                        $nginxPackages \\\n                        gettext-base \\\n                        curl \\\n    && apt-get remove --purge --auto-remove -y && rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/nginx.list \\\n    \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n    && if [ -n \"$tempDir\" ]; then \\\n        apt-get purge -y --auto-remove \\\n        && rm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \\\n    fi \\\n# forward request and error logs to docker log collector\n    && ln -sf /dev/stdout /var/log/nginx/access.log \\\n    && ln -sf /dev/stderr /var/log/nginx/error.log \\\n# create a docker-entrypoint.d directory\n    && mkdir /docker-entrypoint.d\n\nCOPY docker-entrypoint.sh /\nCOPY 10-listen-on-ipv6-by-default.sh /docker-entrypoint.d\nCOPY 15-local-resolvers.envsh /docker-entrypoint.d\nCOPY 20-envsubst-on-templates.sh /docker-entrypoint.d\nCOPY 30-tune-worker-processes.sh /docker-entrypoint.d\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\nEXPOSE 80\n\nSTOPSIGNAL SIGQUIT\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.25,
          "content": "Copyright (C) 2011-2023 F5, Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.6181640625,
          "content": "[![Project Status: Active – The project has reached a stable, usable state and is being actively developed.](https://www.repostatus.org/badges/latest/active.svg)](https://www.repostatus.org/#active)\n[![Community Support](https://badgen.net/badge/support/community/cyan?icon=awesome)](https://github.com/nginxinc/docker-nginx/blob/master/SUPPORT.md)\n\n# About this Repo\n\n## Maintained by: [the NGINX Docker Maintainers](https://github.com/nginxinc/docker-nginx)\n\nThis is the Git repo of the [Docker \"Official Image\"](https://github.com/docker-library/official-images#what-are-official-images) for [`nginx`](https://hub.docker.com/_/nginx/). See [the Docker Hub page](https://hub.docker.com/_/nginx/) for the full readme on how to use this Docker image and for information regarding contributing and issues.\n\nThe [full image description on Docker Hub](https://hub.docker.com/_/nginx/) is generated/maintained over in [the docker-library/docs repository](https://github.com/docker-library/docs), specifically in [the `nginx` directory](https://github.com/docker-library/docs/tree/master/nginx).\n\nThe changelog for NGINX releases is available at [nginx.org changes page](https://nginx.org/en/CHANGES).\n\n## See a change merged here that doesn't show up on Docker Hub yet?\n\nFor more information about the full official images change lifecycle, see [the \"An image's source changed in Git, now what?\" FAQ entry](https://github.com/docker-library/faq#an-images-source-changed-in-git-now-what).\n\nFor outstanding `nginx` image PRs, check [PRs with the \"library/nginx\" label on the official-images repository](https://github.com/docker-library/official-images/labels/library%2Fnginx). For the current \"source of truth\" for [`nginx`](https://hub.docker.com/_/nginx/), see [the `library/nginx` file in the official-images repository](https://github.com/docker-library/official-images/blob/master/library/nginx).\n\n## Contributing\n\nPlease see the [contributing guide](https://github.com/nginxinc/docker-nginx/blob/master/CONTRIBUTING.md) for guidelines on how to best contribute to this project.\n\n## License\n\n[BSD 2-Clause](https://github.com/nginxinc/docker-nginx/blob/master/LICENSE)\n\n&copy; [F5, Inc.](https://www.f5.com/) 2023\n\n---\n\n- [![build status badge](https://img.shields.io/github/actions/workflow/status/nginxinc/docker-nginx/ci.yml?branch=master&label=GitHub%20CI)](https://github.com/nginxinc/docker-nginx/actions?query=workflow%3A%22GitHub+CI%22+branch%3Amaster)\n\n| Build | Status | Badges | (per-arch) |\n|:-:|:-:|:-:|:-:|\n| [![amd64 build status badge](https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/amd64/job/nginx.svg?label=amd64)](https://doi-janky.infosiftr.net/job/multiarch/job/amd64/job/nginx/) | [![arm32v5 build status badge](https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/arm32v5/job/nginx.svg?label=arm32v5)](https://doi-janky.infosiftr.net/job/multiarch/job/arm32v5/job/nginx/) | [![arm32v6 build status badge](https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/arm32v6/job/nginx.svg?label=arm32v6)](https://doi-janky.infosiftr.net/job/multiarch/job/arm32v6/job/nginx/) | [![arm32v7 build status badge](https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/arm32v7/job/nginx.svg?label=arm32v7)](https://doi-janky.infosiftr.net/job/multiarch/job/arm32v7/job/nginx/) |\n| [![arm64v8 build status badge](https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/arm64v8/job/nginx.svg?label=arm64v8)](https://doi-janky.infosiftr.net/job/multiarch/job/arm64v8/job/nginx/) | [![i386 build status badge](https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/i386/job/nginx.svg?label=i386)](https://doi-janky.infosiftr.net/job/multiarch/job/i386/job/nginx/) | [![mips64le build status badge](https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/mips64le/job/nginx.svg?label=mips64le)](https://doi-janky.infosiftr.net/job/multiarch/job/mips64le/job/nginx/) | [![ppc64le build status badge](https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/ppc64le/job/nginx.svg?label=ppc64le)](https://doi-janky.infosiftr.net/job/multiarch/job/ppc64le/job/nginx/) |\n| [![s390x build status badge](https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/multiarch/job/s390x/job/nginx.svg?label=s390x)](https://doi-janky.infosiftr.net/job/multiarch/job/s390x/job/nginx/) | [![put-shared build status badge](https://img.shields.io/jenkins/s/https/doi-janky.infosiftr.net/job/put-shared/job/light/job/nginx.svg?label=put-shared)](https://doi-janky.infosiftr.net/job/put-shared/job/light/job/nginx/) |\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.85546875,
          "content": "# Security Policy\n\n## Latest Versions\n\nWe advise users to run or update to the most recent release of the NGINX Docker image. Older versions of the NGINX Docker image may not have all enhancements and/or bug fixes applied to them.\n\n## Reporting a Vulnerability\n\nThe F5 Security Incident Response Team (F5 SIRT) has an email alias that makes it easy to report potential security vulnerabilities.\n\n- If you’re an F5 customer with an active support contract, please contact [F5 Technical Support](https://www.f5.com/services/support).\n- If you aren’t an F5 customer, please report any potential or current instances of security vulnerabilities with any F5 product to the F5 Security Incident Response Team at <F5SIRT@f5.com>.\n\nFor more information visit [https://www.f5.com/services/support/report-a-vulnerability](https://www.f5.com/services/support/report-a-vulnerability)\n"
        },
        {
          "name": "SUPPORT.md",
          "type": "blob",
          "size": 1.5908203125,
          "content": "# Support\n\n## Ask a Question\n\nWe use GitHub for tracking bugs and feature requests related to all the Docker NGINX images (including all variants and container registries).\n\nDon't know how something in this project works? Curious if this project can achieve your desired functionality? Please open an issue on GitHub with the label `question`.\n\n## NGINX Specific Questions and/or Issues\n\nThis isn't the right place to get support for NGINX specific questions, but the following resources are available below. Thanks for your understanding!\n\n### Community Slack\n\nWe have a community [Slack](https://nginxcommunity.slack.com/)!\n\nIf you are not a member, click [here](https://community.nginx.org/joinslack) to sign up (and let us know if the link does not seem to be working!)\n\nOnce you join, check out the `#beginner-questions` and `nginx-users` channels :)\n\n### Documentation\n\nFor a comprehensive list of all NGINX directives, check out <https://nginx.org>.\n\nFor a comprehensive list of admin and deployment guides for all NGINX products, check out <https://docs.nginx.com>.\n\n### Mailing List\n\nWant to get in touch with the NGINX development team directly? Try using the relevant mailing list found at <https://mailman.nginx.org/mailman3/lists/>!\n\n## Contributing\n\nPlease see the [contributing guide](https://github.com/nginxinc/docker-nginx/blob/master/CONTRIBUTING.md) for guidelines on how to best contribute to this project.\n\n## Commercial Support\n\nCommercial support for this project may be available. Please get in touch with [NGINX sales](https://www.nginx.com/contact-sales/) or check your contract details for more info!\n"
        },
        {
          "name": "entrypoint",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate-stackbrew-library.sh",
          "type": "blob",
          "size": 3.8779296875,
          "content": "#!/bin/bash\nset -eu\n\ndeclare -A aliases\naliases=(\n\t[mainline]='1 1.27 latest'\n\t[stable]='1.26'\n)\n\nself=\"$(basename \"$BASH_SOURCE\")\"\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\nbase=debian\n\nversions=( mainline stable )\n\n# get the most recent commit which modified any of \"$@\"\nfileCommit() {\n\tgit log -1 --format='format:%H' HEAD -- \"$@\"\n}\n\n# get the most recent commit which modified \"$1/Dockerfile\" or any file COPY'd from \"$1/Dockerfile\"\ndirCommit() {\n\tlocal dir=\"$1\"; shift\n\t(\n\t\tcd \"$dir\"\n\t\tfileCommit \\\n\t\t\tDockerfile \\\n\t\t\t$(git show HEAD:./Dockerfile | awk '\n\t\t\t\ttoupper($1) == \"COPY\" {\n\t\t\t\t\tfor (i = 2; i < NF; i++) {\n\t\t\t\t\t\tprint $i\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t')\n\t)\n}\n\ncat <<-EOH\n# this file is generated via https://github.com/nginxinc/docker-nginx/blob/$(fileCommit \"$self\")/$self\n\nMaintainers: NGINX Docker Maintainers <docker-maint@nginx.com> (@nginxinc)\nGitRepo: https://github.com/nginxinc/docker-nginx.git\nEOH\n\n# prints \"$2$1$3$1...$N\"\njoin() {\n\tlocal sep=\"$1\"; shift\n\tlocal out; printf -v out \"${sep//%/%%}%s\" \"$@\"\n\techo \"${out#$sep}\"\n}\n\nfor version in \"${versions[@]}\"; do\n    debian_otel=\"debian-otel\"\n    alpine_otel=\"alpine-otel\"\n\tcommit=\"$(dirCommit \"$version/$base\")\"\n\n\tfullVersion=\"$(git show \"$commit\":\"$version/$base/Dockerfile\" | awk '$1 == \"ENV\" && $2 == \"NGINX_VERSION\" { print $3; exit }')\"\n\n\tversionAliases=( $fullVersion )\n\tif [ \"$version\" != \"$fullVersion\" ]; then\n\t\tversionAliases+=( $version )\n\tfi\n\tversionAliases+=( ${aliases[$version]:-} )\n\n\tdebianVersion=\"$(git show \"$commit\":\"$version/$base/Dockerfile\" | awk -F\"[-:]\" '$1 == \"FROM debian\" { print $2; exit }')\"\n\tdebianAliases=( ${versionAliases[@]/%/-$debianVersion} )\n\tdebianAliases=( \"${debianAliases[@]//latest-/}\" )\n\n\techo\n\tcat <<-EOE\n\t\tTags: $(join ', ' \"${versionAliases[@]}\"), $(join ', ' \"${debianAliases[@]}\")\n\t\tArchitectures: amd64, arm32v5, arm32v7, arm64v8, i386, mips64le, ppc64le, s390x\n\t\tGitCommit: $commit\n\t\tDirectory: $version/$base\n\tEOE\n\n\tfor variant in debian-perl; do\n\t\tcommit=\"$(dirCommit \"$version/$variant\")\"\n\n\t\tvariantAliases=( \"${versionAliases[@]/%/-perl}\" )\n\t\tvariantAliases+=( \"${versionAliases[@]/%/-${variant/debian/$debianVersion}}\" )\n\t\tvariantAliases=( \"${variantAliases[@]//latest-/}\" )\n\n\t\techo\n\t\tcat <<-EOE\n\t\t\tTags: $(join ', ' \"${variantAliases[@]}\")\n\t\t\tArchitectures: amd64, arm32v5, arm32v7, arm64v8, i386, mips64le, ppc64le, s390x\n\t\t\tGitCommit: $commit\n\t\t\tDirectory: $version/$variant\n\t\tEOE\n\tdone\n\n\tfor variant in $debian_otel; do\n\t\tcommit=\"$(dirCommit \"$version/$variant\")\"\n\n\t\tvariantAliases=( \"${versionAliases[@]/%/-otel}\" )\n\t\tvariantAliases+=( \"${versionAliases[@]/%/-${variant/debian/$debianVersion}}\" )\n\t\tvariantAliases=( \"${variantAliases[@]//latest-/}\" )\n\n\t\techo\n\t\tcat <<-EOE\n\t\t\tTags: $(join ', ' \"${variantAliases[@]}\")\n\t\t\tArchitectures: amd64, arm64v8\n\t\t\tGitCommit: $commit\n\t\t\tDirectory: $version/$variant\n\t\tEOE\n\tdone\n\n\n\tcommit=\"$(dirCommit \"$version/alpine-slim\")\"\n\talpineVersion=\"$(git show \"$commit\":\"$version/alpine-slim/Dockerfile\" | awk -F: '$1 == \"FROM alpine\" { print $2; exit }')\"\n\n\tfor variant in alpine alpine-perl alpine-slim; do\n\t\tcommit=\"$(dirCommit \"$version/$variant\")\"\n\n\t\tvariantAliases=( \"${versionAliases[@]/%/-$variant}\" )\n\t\tvariantAliases+=( \"${versionAliases[@]/%/-${variant/alpine/alpine$alpineVersion}}\" )\n\t\tvariantAliases=( \"${variantAliases[@]//latest-/}\" )\n\n\t\techo\n\t\tcat <<-EOE\n\t\t\tTags: $(join ', ' \"${variantAliases[@]}\")\n\t\t\tArchitectures: arm64v8, arm32v6, arm32v7, ppc64le, s390x, i386, amd64, riscv64\n\t\t\tGitCommit: $commit\n\t\t\tDirectory: $version/$variant\n\t\tEOE\n\tdone\n\n\tfor variant in $alpine_otel; do\n\t\tcommit=\"$(dirCommit \"$version/$variant\")\"\n\n\t\tvariantAliases=( \"${versionAliases[@]/%/-$variant}\" )\n\t\tvariantAliases+=( \"${versionAliases[@]/%/-${variant/alpine/alpine$alpineVersion}}\" )\n\t\tvariantAliases=( \"${variantAliases[@]//latest-/}\" )\n\n\t\techo\n\t\tcat <<-EOE\n\t\t\tTags: $(join ', ' \"${variantAliases[@]}\")\n\t\t\tArchitectures: amd64, arm64v8\n\t\t\tGitCommit: $commit\n\t\t\tDirectory: $version/$variant\n\t\tEOE\n\tdone\n\ndone\n"
        },
        {
          "name": "mainline",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "stable",
          "type": "tree",
          "content": null
        },
        {
          "name": "sync-awsecr.sh",
          "type": "blob",
          "size": 4.2724609375,
          "content": "#!/bin/bash\nset -eu\n\nimage=\"nginx\"\nregistry=\"public.ecr.aws/z9d2n7e1\"\n\ndeclare -A aliases\naliases=(\n\t[mainline]='1 1.27 latest'\n\t[stable]='1.26'\n)\n\narchitectures=( amd64 arm64v8 )\n\nself=\"$(basename \"$BASH_SOURCE\")\"\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\nbase=debian\n\nversions=( mainline stable )\n\npulllist=()\ndeclare -A taglist\ntaglist=()\n\n# get the most recent commit which modified any of \"$@\"\nfileCommit() {\n       git log -1 --format='format:%H' HEAD -- \"$@\"\n}\n\n# get the most recent commit which modified \"$1/Dockerfile\" or any file COPY'd from \"$1/Dockerfile\"\ndirCommit() {\n\tlocal dir=\"$1\"; shift\n\t(\n\t\tcd \"$dir\"\n\t\tfileCommit \\\n\t\t\tDockerfile \\\n\t\t\t$(git show HEAD:./Dockerfile | awk '\n\t\t\t\ttoupper($1) == \"COPY\" {\n\t\t\t\t\tfor (i = 2; i < NF; i++) {\n\t\t\t\t\t\tprint $i\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t')\n\t)\n}\n\n# prints \"$2$1$3$1...$N\"\njoin() {\n\tlocal sep=\"$1\"; shift\n\tlocal out; printf -v out \"${sep//%/%%}%s\" \"$@\"\n\techo \"${out#$sep}\"\n}\n\nfor version in \"${versions[@]}\"; do\n\tcommit=\"$(dirCommit \"$version/$base\")\"\n\tfullVersion=\"$(git show \"$commit\":\"$version/$base/Dockerfile\" | awk '$1 == \"ENV\" && $2 == \"NGINX_VERSION\" { print $3; exit }')\"\n    pulllist+=( \"$image:$fullVersion\" )\n    for variant in perl alpine alpine-perl alpine-slim; do\n        pulllist+=( \"$image:$fullVersion-$variant\" )\n    done\ndone\n\nfor version in \"${versions[@]}\"; do\n\tcommit=\"$(dirCommit \"$version/$base\")\"\n\n\tfullVersion=\"$(git show \"$commit\":\"$version/$base/Dockerfile\" | awk '$1 == \"ENV\" && $2 == \"NGINX_VERSION\" { print $3; exit }')\"\n\n\tversionAliases=( $fullVersion )\n\tif [ \"$version\" != \"$fullVersion\" ]; then\n\t\tversionAliases+=( $version )\n\tfi\n\tversionAliases+=( ${aliases[$version]:-} )\n\n\tdebianVersion=\"$(git show \"$commit\":\"$version/$base/Dockerfile\" | awk -F\"[-:]\" '$1 == \"FROM debian\" { print $2; exit }')\"\n\tdebianAliases=( ${versionAliases[@]/%/-$debianVersion} )\n\tdebianAliases=( \"${debianAliases[@]//latest-/}\" )\n\n    for tag in ${versionAliases[@]:1} ${debianAliases[@]:1}; do\n        taglist[\"$image:$tag\"]=\"$image:$fullVersion\"\n    done\n\n\tfor variant in debian-perl; do\n\t\tvariantAliases=( \"${versionAliases[@]/%/-perl}\" )\n        variantAliases+=( \"${versionAliases[@]/%/-${variant/debian/$debianVersion}}\" )\n\t\tvariantAliases=( \"${variantAliases[@]//latest-/}\" )\n\n        for tag in ${variantAliases[@]}; do\n\t    if [ \"$tag\" != \"${fullVersion}-perl\" ]; then\n            taglist[\"$image:$tag\"]=\"$image:$fullVersion-perl\"\n        fi\n        done\n\tdone\n\n    commit=\"$(dirCommit \"$version/alpine-slim\")\"\n    alpineVersion=\"$(git show \"$commit\":\"$version/alpine-slim/Dockerfile\" | awk -F: '$1 == \"FROM alpine\" { print $2; exit }')\"\n\n\tfor variant in alpine alpine-perl alpine-slim; do\n\t\tcommit=\"$(dirCommit \"$version/$variant\")\"\n\n\t\tvariantAliases=( \"${versionAliases[@]/%/-$variant}\" )\n\t\tvariantAliases+=( \"${versionAliases[@]/%/-${variant/alpine/alpine$alpineVersion}}\" )\n\t\tvariantAliases=( \"${variantAliases[@]//latest-/}\" )\n\n        for tag in ${variantAliases[@]}; do\n\t        if [ \"$tag\" != \"${fullVersion}-$variant\" ]; then\n                taglist[\"$image:$tag\"]=\"$image:${fullVersion}-$variant\"\n            fi\n        done\n\tdone\n\ndone\n\necho \"#!/bin/sh\"\necho \"set -ex\"\necho\necho \"export DOCKER_CLI_EXPERIMENTAL=enabled\"\necho\necho \"# pulling stuff\"\nfor arch in ${architectures[@]}; do\n    case $arch in\n        arm64v8)\n            parch=\"aarch64\"\n            ;;\n        *)\n            parch=$arch\n            ;;\n    esac\nfor tag in ${pulllist[@]}; do\n    echo \"docker pull --platform linux/$parch $arch/$tag\";\ndone\ndone\n\necho\n\necho \"# tagging stuff\"\n\nfor arch in ${architectures[@]}; do\nfor tag in ${pulllist[@]}; do\n    echo \"docker tag $arch/$tag $registry/$tag-$arch\"\ndone\nfor tag in ${!taglist[@]}; do\n    echo \"docker tag $arch/${taglist[$tag]} $registry/$tag-$arch\"\ndone\ndone\n\necho \"# pushing stuff\"\n\nfor arch in ${architectures[@]}; do\nfor tag in ${pulllist[@]}; do\n    echo \"docker push $registry/$tag-$arch\"\ndone\nfor tag in ${!taglist[@]}; do\n    echo \"docker push $registry/$tag-$arch\"\ndone\ndone\n\necho\necho \"# manifesting stuff\"\nfor tag in ${pulllist[@]} ${!taglist[@]}; do\n    string=\"docker manifest create --amend $registry/$tag\"\n    for arch in ${architectures[@]}; do\n        string+=\" $registry/$tag-$arch\"\n    done\n    echo $string\ndone\n\necho\necho \"# pushing manifests\"\nfor tag in ${pulllist[@]} ${!taglist[@]}; do\n    echo \"docker manifest push --purge $registry/$tag\"\ndone\n"
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 6.625,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\nshopt -s nullglob\n\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\ndeclare branches=(\n    \"stable\"\n    \"mainline\"\n)\n\n# Current nginx versions\n# Remember to update pkgosschecksum when changing this.\ndeclare -A nginx=(\n    [mainline]='1.27.3'\n    [stable]='1.26.2'\n)\n\n# Current njs versions\ndeclare -A njs=(\n    [mainline]='0.8.8'\n    [stable]='0.8.8'\n)\n\n# Current njs patchlevel version\n# Remember to update pkgosschecksum when changing this.\ndeclare -A njspkg=(\n    [mainline]='1'\n    [stable]='1'\n)\n\n# Current otel versions\ndeclare -A otel=(\n    [mainline]='0.1.0'\n    [stable]='0.1.0'\n)\n\n# Current nginx package patchlevel version\n# Remember to update pkgosschecksum when changing this.\ndeclare -A pkg=(\n    [mainline]=1\n    [stable]=1\n)\n\n# Current built-in dynamic modules package patchlevel version\n# Remember to update pkgosschecksum when changing this\ndeclare -A dynpkg=(\n    [mainline]=1\n    [stable]=2\n)\n\ndeclare -A debian=(\n    [mainline]='bookworm'\n    [stable]='bookworm'\n)\n\ndeclare -A alpine=(\n    [mainline]='3.20'\n    [stable]='3.20'\n)\n\n# When we bump njs version in a stable release we don't move the tag in the\n# pkg-oss repo.  This setting allows us to specify a revision to check out\n# when building packages on architectures not supported by nginx.org\n# Remember to update pkgosschecksum when changing this.\ndeclare -A rev=(\n    [mainline]='0286c5190d972a49bffc9bf247885dd510ce8181'\n    [stable]='f43e929dc7a6111ef5d9ecb281a75749f7934261'\n)\n\n# Holds SHA512 checksum for the pkg-oss tarball produced by source code\n# revision/tag in the previous block\n# Used in builds for architectures not packaged by nginx.org\ndeclare -A pkgosschecksum=(\n    [mainline]='1e546bd15d7bc68e1772ecb6a73e29ba108ee5554a28928e57af038a9e8fc4f5cd35708ce89ad1dfaac97d870e663d32ef41045611d30b20d38b46816e3ab535'\n    [stable]='315e9e9040253396ebd9f540557e69cda7d9754a7895c3bf04fbf79d43be8d56e8efc6c22c21c87632039340080511179946456bbc4660e8faf171d130b475a6'\n)\n\nget_packages() {\n    local distro=\"$1\"\n    shift\n    local branch=\"$1\"\n    shift\n    local bn=\"\"\n    local otel=\n    local perl=\n    local r=\n    local sep=\n\n    case \"$distro:$branch\" in\n    alpine*:*)\n        r=\"r\"\n        sep=\".\"\n        ;;\n    debian*:*)\n        sep=\"+\"\n        ;;\n    esac\n\n    case \"$distro\" in\n    *-perl)\n        perl=\"nginx-module-perl\"\n        ;;\n    *-otel)\n        otel=\"nginx-module-otel\"\n        bn=\"\\n\"\n        ;;\n    esac\n\n    echo -n ' \\\\\\n'\n    case \"$distro\" in\n    *-slim)\n        for p in nginx; do\n            echo -n '        '\"$p\"'=${NGINX_VERSION}-'\"$r\"'${PKG_RELEASE} \\\\'\n        done\n        ;;\n    *)\n        for p in nginx; do\n            echo -n '        '\"$p\"'=${NGINX_VERSION}-'\"$r\"'${PKG_RELEASE} \\\\\\n'\n        done\n        for p in nginx-module-xslt nginx-module-geoip nginx-module-image-filter $perl; do\n            echo -n '        '\"$p\"'=${NGINX_VERSION}-'\"$r\"'${DYNPKG_RELEASE} \\\\\\n'\n        done\n        for p in nginx-module-njs; do\n            echo -n '        '\"$p\"'=${NGINX_VERSION}'\"$sep\"'${NJS_VERSION}-'\"$r\"'${NJS_RELEASE} \\\\'\"$bn\"\n        done\n        for p in $otel; do\n            echo -n '        '\"$p\"'=${NGINX_VERSION}'\"$sep\"'${OTEL_VERSION}-'\"$r\"'${PKG_RELEASE} \\\\'\n        done\n        ;;\n    esac\n}\n\nget_packagerepo() {\n    local distro=\"$1\"\n    shift\n    distro=\"${distro%-perl}\"\n    distro=\"${distro%-otel}\"\n    distro=\"${distro%-slim}\"\n    local branch=\"$1\"\n    shift\n\n    [ \"$branch\" = \"mainline\" ] && branch=\"$branch/\" || branch=\"\"\n\n    echo \"https://nginx.org/packages/${branch}${distro}/\"\n}\n\nget_packagever() {\n    local distro=\"$1\"\n    shift\n    distro=\"${distro%-perl}\"\n    distro=\"${distro%-otel}\"\n    distro=\"${distro%-slim}\"\n    local branch=\"$1\"\n    shift\n    local package=\"$1\"\n    shift\n    local suffix=\n\n    [ \"${distro}\" = \"debian\" ] && suffix=\"~${debianver}\"\n\n    case \"${package}\" in\n        \"njs\")\n            echo ${njspkg[$branch]}${suffix}\n            ;;\n        \"dyn\")\n            echo ${dynpkg[$branch]}${suffix}\n            ;;\n        *)\n            echo ${pkg[$branch]}${suffix}\n            ;;\n    esac\n}\n\nget_buildtarget() {\n    local distro=\"$1\"\n    shift\n    case \"$distro\" in\n        alpine-slim)\n            echo base\n            ;;\n        alpine)\n            echo module-geoip module-image-filter module-njs module-xslt\n            ;;\n        debian)\n            echo base module-geoip module-image-filter module-njs module-xslt\n            ;;\n        *-perl)\n            echo module-perl\n            ;;\n        *-otel)\n            echo module-otel\n            ;;\n    esac\n}\n\ngenerated_warning() {\n    cat <<__EOF__\n#\n# NOTE: THIS DOCKERFILE IS GENERATED VIA \"update.sh\"\n#\n# PLEASE DO NOT EDIT IT DIRECTLY.\n#\n__EOF__\n}\n\nfor branch in \"${branches[@]}\"; do\n    for variant in \\\n        alpine{,-perl,-otel,-slim} \\\n        debian{,-perl,-otel}; do\n        echo \"$branch: $variant dockerfiles\"\n        dir=\"$branch/$variant\"\n        variant=\"$(basename \"$variant\")\"\n\n        [ -d \"$dir\" ] || continue\n\n        template=\"Dockerfile-${variant}.template\"\n        {\n            generated_warning\n            cat \"$template\"\n        } >\"$dir/Dockerfile\"\n\n        debianver=\"${debian[$branch]}\"\n        alpinever=\"${alpine[$branch]}\"\n        nginxver=\"${nginx[$branch]}\"\n        njsver=\"${njs[${branch}]}\"\n        otelver=\"${otel[${branch}]}\"\n        revver=\"${rev[${branch}]}\"\n        pkgosschecksumver=\"${pkgosschecksum[${branch}]}\"\n\n        packagerepo=$(get_packagerepo \"$variant\" \"$branch\")\n        packages=$(get_packages \"$variant\" \"$branch\")\n        packagever=$(get_packagever \"$variant\" \"$branch\" \"any\")\n        njspkgver=$(get_packagever \"$variant\" \"$branch\" \"njs\")\n        dynpkgver=$(get_packagever \"$variant\" \"$branch\" \"dyn\")\n        buildtarget=$(get_buildtarget \"$variant\")\n\n        sed -i.bak \\\n            -e 's,%%ALPINE_VERSION%%,'\"$alpinever\"',' \\\n            -e 's,%%DEBIAN_VERSION%%,'\"$debianver\"',' \\\n            -e 's,%%DYNPKG_RELEASE%%,'\"$dynpkgver\"',' \\\n            -e 's,%%NGINX_VERSION%%,'\"$nginxver\"',' \\\n            -e 's,%%NJS_VERSION%%,'\"$njsver\"',' \\\n            -e 's,%%NJS_RELEASE%%,'\"$njspkgver\"',' \\\n            -e 's,%%OTEL_VERSION%%,'\"$otelver\"',' \\\n            -e 's,%%PKG_RELEASE%%,'\"$packagever\"',' \\\n            -e 's,%%PACKAGES%%,'\"$packages\"',' \\\n            -e 's,%%PACKAGEREPO%%,'\"$packagerepo\"',' \\\n            -e 's,%%REVISION%%,'\"$revver\"',' \\\n            -e 's,%%PKGOSSCHECKSUM%%,'\"$pkgosschecksumver\"',' \\\n            -e 's,%%BUILDTARGET%%,'\"$buildtarget\"',' \\\n            \"$dir/Dockerfile\"\n\n    done\n\n    for variant in \\\n        alpine-slim \\\n        debian; do \\\n        echo \"$branch: $variant entrypoint scripts\"\n        dir=\"$branch/$variant\"\n        cp -a entrypoint/*.sh \"$dir/\"\n        cp -a entrypoint/*.envsh \"$dir/\"\n    done\ndone\n"
        }
      ]
    }
  ]
}