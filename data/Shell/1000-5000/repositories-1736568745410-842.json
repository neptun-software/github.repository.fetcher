{
  "metadata": {
    "timestamp": 1736568745410,
    "page": 842,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xu-cheng/latex-action",
      "stars": 1163,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.208984375,
          "content": "# vim: set ft=dosini nospell:\n# document: http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2019 Cheng XU\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.134765625,
          "content": "# latex-action\n\n[![GitHub Actions Status](https://github.com/xu-cheng/latex-action/workflows/Test%20Github%20Action/badge.svg)](https://github.com/xu-cheng/latex-action/actions)\n\nGitHub Action to compile LaTeX documents.\n\nIt runs in [a docker container](https://github.com/xu-cheng/latex-docker) with a full [TeXLive](https://www.tug.org/texlive/) environment installed.\n\nIf you want to run arbitrary commands in a TeXLive environment, use [texlive-action](https://github.com/xu-cheng/texlive-action) instead.\n\n## Inputs\n\nEach input is provided as a key inside the `with` section of the action.\n\n* `root_file`\n\n    The root LaTeX file to be compiled. This input is required. You can also pass multiple files as a multi-line string to compile multiple documents. Each file path will be interpreted as bash glob pattern. For example:\n    ```yaml\n    - uses: xu-cheng/latex-action@v3\n      with:\n        root_file: |\n          file1.tex\n          file2.tex\n    ```\n\n* `working_directory`\n\n    The working directory for this action.\n\n* `work_in_root_file_dir`\n\n    Change directory into each root file's directory before compiling each documents. This will be helpful if you want to build multiple documents and have the compiler work in each of the corresponding directories.\n\n* `continue_on_error`\n\n    Continuing to build document even with LaTeX build errors. This will be helpful if you want to build multiple documents regardless of any build error. Noted that even with this input set, this action will always report failure upon any build error. If you want to prevent the GitHub action job also from failure, please refer to [the upstream document](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error).\n\n* `compiler`\n\n    The LaTeX engine to be invoked. By default, [`latexmk`](https://ctan.org/pkg/latexmk) is used, which automates the process of generating LaTeX documents by issuing the appropriate sequence of commands to be run.\n\n* `args`\n\n    The extra arguments to be passed to the LaTeX engine. By default, it is `-pdf -file-line-error -halt-on-error -interaction=nonstopmode`. This tells `latexmk` to use `pdflatex`. Refer to [`latexmk` document](http://texdoc.net/texmf-dist/doc/support/latexmk/latexmk.pdf) for more information.\n\n* `extra_system_packages`\n\n    The extra packages to be installed by [`apk`](https://pkgs.alpinelinux.org/packages) separated by space. For example, `extra_system_packages: \"inkscape\"` will install the package `inkscape` to allow using SVG images in your LaTeX document.\n\n* `extra_fonts`\n\n    Install extra `.ttf`/`.otf` fonts to be used by `fontspec`. You can also pass multiple files as a multi-line string. Each file path will be interpreted as bash glob pattern. For example:\n    ```yaml\n    - uses: xu-cheng/latex-action@v3\n      with:\n        root_file: main.tex\n        extra_fonts: |\n          ./path/to/custom.ttf\n          ./fonts/*.otf\n    ```\n\n* `pre_compile`\n\n    Arbitrary bash codes to be executed before compiling LaTeX documents. For example, `pre_compile: \"tlmgr update --self && tlmgr update --all\"` to update all TeXLive packages.\n\n* `post_compile`\n\n    Arbitrary bash codes to be executed after compiling LaTeX documents. For example, `post_compile: \"latexmk -c\"` to clean up temporary files.\n\n* `texlive_version`\n\n    The version of TeXLive to be used. Supported inputs include 2020, 2021, 2022, 2023, 2024, and latest. By default the latest TeXLive is used. This input cannot co-exist with `docker_image` input. An example to use this input:\n    ```yaml\n    - uses: xu-cheng/latex-action@v3\n      with:\n        root_file: main.tex\n        texlive_version: 2022\n    ```\n\n* `docker_image`\n\n    Custom which docker image to be used. Only [latex-docker images](https://github.com/xu-cheng/latex-docker/pkgs/container/texlive-full) are supported. For example if you want to pin the docker image:\n    ```yaml\n    - uses: xu-cheng/latex-action@v3\n      with:\n        root_file: main.tex\n        docker_image: ghcr.io/xu-cheng/texlive-full:20230801\n    ```\n\n**The following inputs are only valid if the input `compiler` is not changed.**\n\n* `latexmk_shell_escape`\n\n    Instruct `latexmk` to enable `--shell-escape`.\n\n* `latexmk_use_lualatex`\n\n    Instruct `latexmk` to use LuaLaTeX.\n\n* `latexmk_use_xelatex`\n\n    Instruct `latexmk` to use XeLaTeX.\n\n## Example\n\n```yaml\nname: Build LaTeX document\non: [push]\njobs:\n  build_latex:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Git repository\n        uses: actions/checkout@v4\n      - name: Compile LaTeX document\n        uses: xu-cheng/latex-action@v3\n        with:\n          root_file: main.tex\n      - name: Upload PDF file\n        uses: actions/upload-artifact@v4\n        with:\n          name: PDF\n          path: main.pdf\n```\n\n## FAQs\n\n### How to use XeLaTeX or LuaLaTeX instead of pdfLaTeX?\n\nBy default, this action uses pdfLaTeX. If you want to use XeLaTeX or LuaLaTeX, you can set the `latexmk_use_xelatex` or `latexmk_use_lualatex` input respectively. For example:\n\n```yaml\n- uses: xu-cheng/latex-action@v3\n  with:\n    root_file: main.tex\n    latexmk_use_xelatex: true\n```\n\n```yaml\n- uses: xu-cheng/latex-action@v3\n  with:\n    root_file: main.tex\n    latexmk_use_lualatex: true\n```\n\nAlternatively, you could create a `.latexmkrc` file. Refer to the [`latexmk` document](http://texdoc.net/texmf-dist/doc/support/latexmk/latexmk.pdf) for more information.\n\n### How to enable `--shell-escape`?\n\nTo enable `--shell-escape`, set the `latexmk_shell_escape` input.\n\n```yaml\n- uses: xu-cheng/latex-action@v3\n  with:\n    root_file: main.tex\n    latexmk_shell_escape: true\n```\n\n### Where is the PDF file? How to upload it?\n\nThe PDF file will be in the same folder as that of the LaTeX source in the CI environment. It is up to you on whether to upload it to some places. Here are some example.\n* You can use [`@actions/upload-artifact`](https://github.com/actions/upload-artifact) to upload a zip containing the PDF file to the workflow tab. For example you can add\n\n  ```yaml\n  - uses: actions/upload-artifact@v4\n    with:\n      name: PDF\n      path: main.pdf\n  ```\n\n  It will result in a `PDF.zip` being uploaded with `main.pdf` contained inside.\n\n* You can use [`@softprops/action-gh-release`](https://github.com/softprops/action-gh-release) to upload PDF file to the Github Release.\n* You can use normal shell tools such as `scp`/`git`/`rsync` to upload PDF file anywhere. For example, you can git push to the `gh-pages` branch in your repo, so you can view the document using Github Pages.\n\n### How to add additional paths to the LaTeX input search path?\n\nSometimes you may have custom package (`.sty`) or class (`.cls`) files in other directories. If you want to add these directories to the LaTeX input search path, you can add them in `TEXINPUTS` environment variable. For example:\n\n```yaml\n- name: Download custom template\n  run: |\n    curl -OL https://example.com/custom_template.zip\n    unzip custom_template.zip\n- uses: xu-cheng/latex-action@v3\n  with:\n    root_file: main.tex\n  env:\n    TEXINPUTS: \".:./custom_template//:\"\n```\n\nNoted that you should NOT use `{{ github.workspace }}` or `$GITHUB_WORKSPACE` in `TEXINPUTS`. This action works in a separated docker container, where the workspace directory is mounted into it. Therefore, the workspace directory inside the docker container is different from `github.workspace`.\n\nYou can find more information of `TEXINPUTS` [here](https://tex.stackexchange.com/a/93733).\n\n### It fails due to `xindy` cannot be found.\n\nThis is an upstream issue where `xindy.x86_64-linuxmusl` is currently missing in TeXLive. To work around it, try [this](https://github.com/xu-cheng/latex-action/issues/32#issuecomment-626086551).\n\n### It fails to build the document, how to solve it?\n\n* Try to solve the problem by examining the build log.\n* Try to build the document locally.\n* You can also try to narrow the problem by creating a [minimal working example][mwe] to reproduce the problem.\n* [Open an issue](https://github.com/xu-cheng/latex-action/issues/new) if you need help. Please include a [minimal working example][mwe] to demonstrate your problem.\n\n[mwe]: https://tex.meta.stackexchange.com/questions/228/ive-just-been-asked-to-write-a-minimal-working-example-mwe-what-is-that\n\n## License\n\nMIT\n"
        },
        {
          "name": "action.sh",
          "type": "blob",
          "size": 3.27734375,
          "content": "#!/usr/bin/env bash\n\nset -eo pipefail\n\nrandom_token() {\n  tr -dc A-Za-z0-9 </dev/urandom 2>/dev/null | head -c 32\n  echo \"\"\n}\n\nrun() {\n  token=\"$(random_token)\"\n  echo \"::stop-commands::${token}\"\n  echo -e \"\\033[1;34m${*@Q}\\033[0m\"\n  echo \"::${token}::\"\n  \"$@\"\n}\n\nerror() {\n  echo \"::error :: $1\"\n  exit 1\n}\n\nif [[ -n \"$INPUT_TEXLIVE_VERSION\" && -n \"$INPUT_DOCKER_IMAGE\" ]]; then\n  error \"Input 'texlive_version' and 'docker_image' cannot co-exist\".\nfi\n\nexport INPUT_TLMGR_REPO=\"\"\n\nif [[ -z \"$INPUT_DOCKER_IMAGE\" ]]; then\n  INPUT_TLMGR_REPO=\"$INPUT_TEXLIVE_VERSION\"\n  case \"$INPUT_TEXLIVE_VERSION\" in\n  \"\" | \"latest\" | \"2024\")\n    image_version=\"latest\"\n    INPUT_TLMGR_REPO=\"latest\"\n    ;;\n  \"2023\")\n    image_version=\"20240301\"\n    ;;\n  \"2022\")\n    image_version=\"20230301\"\n    ;;\n  \"2021\")\n    image_version=\"20220201\"\n    ;;\n  \"2020\")\n    image_version=\"20210301\"\n    ;;\n  *)\n    error \"TeX Live version $INPUT_TEXLIVE_VERSION is not supported. The currently supported versions are 2020-2024 or latest.\"\n    ;;\n  esac\n  INPUT_DOCKER_IMAGE=\"ghcr.io/xu-cheng/texlive-full:$image_version\"\nfi\n\n# ref: https://docs.miktex.org/manual/envvars.html\nrun docker run --rm \\\n  -e \"BIBINPUTS\" \\\n  -e \"BSTINPUTS\" \\\n  -e \"MFINPUTS\" \\\n  -e \"TEXINPUTS\" \\\n  -e \"TFMFONTS\" \\\n  -e \"HOME\" \\\n  -e \"INPUT_ROOT_FILE\" \\\n  -e \"INPUT_WORKING_DIRECTORY\" \\\n  -e \"INPUT_WORK_IN_ROOT_FILE_DIR\" \\\n  -e \"INPUT_CONTINUE_ON_ERROR\" \\\n  -e \"INPUT_COMPILER\" \\\n  -e \"INPUT_ARGS\" \\\n  -e \"INPUT_EXTRA_SYSTEM_PACKAGES\" \\\n  -e \"INPUT_EXTRA_FONTS\" \\\n  -e \"INPUT_PRE_COMPILE\" \\\n  -e \"INPUT_POST_COMPILE\" \\\n  -e \"INPUT_LATEXMK_SHELL_ESCAPE\" \\\n  -e \"INPUT_LATEXMK_USE_LUALATEX\" \\\n  -e \"INPUT_LATEXMK_USE_XELATEX\" \\\n  -e \"INPUT_TLMGR_REPO\" \\\n  -e \"GITHUB_JOB\" \\\n  -e \"GITHUB_REF\" \\\n  -e \"GITHUB_SHA\" \\\n  -e \"GITHUB_REPOSITORY\" \\\n  -e \"GITHUB_REPOSITORY_OWNER\" \\\n  -e \"GITHUB_REPOSITORY_OWNER_ID\" \\\n  -e \"GITHUB_RUN_ID\" \\\n  -e \"GITHUB_RUN_NUMBER\" \\\n  -e \"GITHUB_RETENTION_DAYS\" \\\n  -e \"GITHUB_RUN_ATTEMPT\" \\\n  -e \"GITHUB_REPOSITORY_ID\" \\\n  -e \"GITHUB_ACTOR_ID\" \\\n  -e \"GITHUB_ACTOR\" \\\n  -e \"GITHUB_TRIGGERING_ACTOR\" \\\n  -e \"GITHUB_WORKFLOW\" \\\n  -e \"GITHUB_HEAD_REF\" \\\n  -e \"GITHUB_BASE_REF\" \\\n  -e \"GITHUB_EVENT_NAME\" \\\n  -e \"GITHUB_SERVER_URL\" \\\n  -e \"GITHUB_API_URL\" \\\n  -e \"GITHUB_GRAPHQL_URL\" \\\n  -e \"GITHUB_REF_NAME\" \\\n  -e \"GITHUB_REF_PROTECTED\" \\\n  -e \"GITHUB_REF_TYPE\" \\\n  -e \"GITHUB_WORKFLOW_REF\" \\\n  -e \"GITHUB_WORKFLOW_SHA\" \\\n  -e \"GITHUB_WORKSPACE\" \\\n  -e \"GITHUB_ACTION\" \\\n  -e \"GITHUB_EVENT_PATH\" \\\n  -e \"GITHUB_ACTION_REPOSITORY\" \\\n  -e \"GITHUB_ACTION_REF\" \\\n  -e \"GITHUB_PATH\" \\\n  -e \"GITHUB_ENV\" \\\n  -e \"GITHUB_STEP_SUMMARY\" \\\n  -e \"GITHUB_STATE\" \\\n  -e \"GITHUB_OUTPUT\" \\\n  -e \"RUNNER_OS\" \\\n  -e \"RUNNER_ARCH\" \\\n  -e \"RUNNER_NAME\" \\\n  -e \"RUNNER_ENVIRONMENT\" \\\n  -e \"RUNNER_TOOL_CACHE\" \\\n  -e \"RUNNER_TEMP\" \\\n  -e \"RUNNER_WORKSPACE\" \\\n  -e \"ACTIONS_RUNTIME_URL\" \\\n  -e \"ACTIONS_RUNTIME_TOKEN\" \\\n  -e \"ACTIONS_CACHE_URL\" \\\n  -e GITHUB_ACTIONS=true \\\n  -e CI=true \\\n  -v \"/var/run/docker.sock\":\"/var/run/docker.sock\" \\\n  -v \"$HOME:$HOME\" \\\n  -v \"$GITHUB_ENV:$GITHUB_ENV\" \\\n  -v \"$GITHUB_OUTPUT:$GITHUB_OUTPUT\" \\\n  -v \"$GITHUB_STEP_SUMMARY:$GITHUB_STEP_SUMMARY\" \\\n  -v \"$GITHUB_PATH:$GITHUB_PATH\" \\\n  -v \"$GITHUB_WORKSPACE:$GITHUB_WORKSPACE\" \\\n  -v \"$GITHUB_ACTION_PATH/entrypoint.sh\":/entrypoint.sh \\\n  -w \"$GITHUB_WORKSPACE\" \\\n  --entrypoint \"/entrypoint.sh\" \\\n  \"$INPUT_DOCKER_IMAGE\"\n"
        },
        {
          "name": "action.yml",
          "type": "blob",
          "size": 2.5185546875,
          "content": "name: Github Action for LaTeX\ndescription: GitHub Action to compile LaTeX documents\nauthor: Cheng XU\ninputs:\n  texlive_version:\n    description: The version of TeX Live to be used\n  docker_image:\n    description: The docker image to be used\n  root_file:\n    description: The root LaTeX file to be compiled\n    required: true\n  working_directory:\n    description: The working directory for this action\n  work_in_root_file_dir:\n    description: Change directory into each root file's directory before compiling each documents\n    default: \"false\"\n  continue_on_error:\n    description: Continuing to build document even with LaTeX build errors\n    default: \"false\"\n  compiler:\n    description: The LaTeX engine to be invoked\n    default: latexmk\n  args:\n    description: Extra arguments to be passed to the LaTeX engine\n    default: \"-pdf -file-line-error -halt-on-error -interaction=nonstopmode\"\n  extra_system_packages:\n    description: Install extra packages by apk\n  extra_fonts:\n    description: Install extra .ttf/.otf fonts.\n  pre_compile:\n    description: Arbitrary bash codes to be executed before compiling LaTeX documents\n  post_compile:\n    description: Arbitrary bash codes to be executed after compiling LaTeX documents\n  latexmk_shell_escape:\n    description: Instruct latexmk to enable --shell-escape\n    default: \"false\"\n  latexmk_use_lualatex:\n    description: Instruct latexmk to use LuaLaTeX\n    default: \"false\"\n  latexmk_use_xelatex:\n    description: Instruct latexmk to use XeLaTeX\n    default: \"false\"\n\nruns:\n  using: composite\n  steps:\n    - shell: bash\n      run: |\n        \"${GITHUB_ACTION_PATH}/action.sh\"\n      env:\n        INPUT_TEXLIVE_VERSION: ${{ inputs.texlive_version }}\n        INPUT_DOCKER_IMAGE: ${{ inputs.docker_image }}\n        INPUT_ROOT_FILE: ${{ inputs.root_file }}\n        INPUT_WORKING_DIRECTORY: ${{ inputs.working_directory }}\n        INPUT_WORK_IN_ROOT_FILE_DIR: ${{ inputs.work_in_root_file_dir }}\n        INPUT_CONTINUE_ON_ERROR: ${{ inputs.continue_on_error }}\n        INPUT_COMPILER: ${{ inputs.compiler }}\n        INPUT_ARGS: ${{ inputs.args }}\n        INPUT_EXTRA_SYSTEM_PACKAGES: ${{ inputs.extra_system_packages }}\n        INPUT_EXTRA_FONTS: ${{ inputs.extra_fonts }}\n        INPUT_PRE_COMPILE: ${{ inputs.pre_compile }}\n        INPUT_POST_COMPILE: ${{ inputs.post_compile }}\n        INPUT_LATEXMK_SHELL_ESCAPE: ${{ inputs.latexmk_shell_escape }}\n        INPUT_LATEXMK_USE_LUALATEX: ${{ inputs.latexmk_use_lualatex }}\n        INPUT_LATEXMK_USE_XELATEX: ${{ inputs.latexmk_use_xelatex }}\n\nbranding:\n  icon: book\n  color: blue\n"
        },
        {
          "name": "entrypoint.sh",
          "type": "blob",
          "size": 4.1533203125,
          "content": "#!/usr/bin/env bash\n\nset -eo pipefail\nshopt -s extglob globstar nullglob\n\ninfo() {\n  echo -e \"\\033[1;34m$1\\033[0m\"\n}\n\nwarn() {\n  echo \"::warning :: $1\"\n}\n\nerror() {\n  echo \"::error :: $1\"\n  exit 1\n}\n\n# install git on old images\nif ! command -v git &>/dev/null; then\n  apk --no-cache add git\nfi\ngit config --system --add safe.directory \"$GITHUB_WORKSPACE\"\n\nif [[ -z \"$INPUT_ROOT_FILE\" ]]; then\n  error \"Input 'root_file' is missing.\"\nfi\n\nreadarray -t root_file <<<\"$INPUT_ROOT_FILE\"\n\nif [[ -n \"$INPUT_WORKING_DIRECTORY\" ]]; then\n  if [[ ! -d \"$INPUT_WORKING_DIRECTORY\" ]]; then\n    mkdir -p \"$INPUT_WORKING_DIRECTORY\"\n  fi\n  cd \"$INPUT_WORKING_DIRECTORY\"\nfi\n\nexpanded_root_file=()\nfor pattern in \"${root_file[@]}\"; do\n  # shellcheck disable=SC2206\n  expanded=($pattern)\n  expanded_root_file+=(\"${expanded[@]}\")\ndone\nroot_file=(\"${expanded_root_file[@]}\")\n\nif [[ -z \"$INPUT_COMPILER\" && -z \"$INPUT_ARGS\" ]]; then\n  warn \"Input 'compiler' and 'args' are both empty. Reset them to default values.\"\n  INPUT_COMPILER=\"latexmk\"\n  INPUT_ARGS=\"-pdf -file-line-error -halt-on-error -interaction=nonstopmode\"\nfi\n\nIFS=' ' read -r -a args <<<\"$INPUT_ARGS\"\n\nif [[ \"$INPUT_COMPILER\" = \"latexmk\" ]]; then\n  if [[ \"$INPUT_LATEXMK_SHELL_ESCAPE\" = \"true\" ]]; then\n    args+=(\"-shell-escape\")\n  fi\n\n  if [[ \"$INPUT_LATEXMK_USE_LUALATEX\" = \"true\" && \"$INPUT_LATEXMK_USE_XELATEX\" = \"true\" ]]; then\n    error \"Input 'latexmk_use_lualatex' and 'latexmk_use_xelatex' cannot be used at the same time.\"\n  fi\n\n  if [[ \"$INPUT_LATEXMK_USE_LUALATEX\" = \"true\" ]]; then\n    for i in \"${!args[@]}\"; do\n      if [[ \"${args[i]}\" = \"-pdf\" ]]; then\n        unset 'args[i]'\n      fi\n    done\n    args+=(\"-lualatex\")\n    # LuaLaTeX use --flag instead of -flag for arguments.\n    for VAR in -file-line-error -halt-on-error -shell-escape; do\n      for i in \"${!args[@]}\"; do\n        if [[ \"${args[i]}\" = \"$VAR\" ]]; then\n          args[i]=\"-$VAR\"\n        fi\n      done\n    done\n    args=(\"${args[@]/#-interaction=/--interaction=}\")\n  fi\n\n  if [[ \"$INPUT_LATEXMK_USE_XELATEX\" = \"true\" ]]; then\n    for i in \"${!args[@]}\"; do\n      if [[ \"${args[i]}\" = \"-pdf\" ]]; then\n        unset 'args[i]'\n      fi\n    done\n    args+=(\"-xelatex\")\n  fi\nelse\n  for VAR in \"${!INPUT_LATEXMK_@}\"; do\n    if [[ \"${!VAR}\" = \"true\" ]]; then\n      error \"Input '${VAR}' is only valid if input 'compiler' is set to 'latexmk'.\"\n    fi\n  done\nfi\n\nif [[ -n \"$INPUT_EXTRA_SYSTEM_PACKAGES\" ]]; then\n  IFS=$' \\t\\n'\n  for pkg in $INPUT_EXTRA_SYSTEM_PACKAGES; do\n    info \"Install $pkg by apk\"\n    apk --no-cache add \"$pkg\"\n  done\nfi\n\nif [[ -n \"$INPUT_EXTRA_FONTS\" ]]; then\n  readarray -t extra_fonts <<<\"$INPUT_EXTRA_FONTS\"\n  expanded_extra_fonts=()\n  for pattern in \"${extra_fonts[@]}\"; do\n    # shellcheck disable=SC2206\n    expanded=($pattern)\n    expanded_extra_fonts+=(\"${expanded[@]}\")\n  done\n  extra_fonts=(\"${expanded_extra_fonts[@]}\")\n\n  mkdir -p \"$HOME/.local/share/fonts/\"\n\n  for f in \"${extra_fonts[@]}\"; do\n    if [[ -z \"$f\" ]]; then\n      continue\n    fi\n\n    info \"Install font $f\"\n    cp -r \"$f\" \"$HOME/.local/share/fonts/\"\n  done\n\n  fc-cache -fv\nfi\n\nif [[ -n \"$INPUT_TLMGR_REPO\" && \"$INPUT_TLMGR_REPO\" != latest ]]; then\n  tlmgr_repo_url=\"https://ftp.math.utah.edu/pub/tex/historic/systems/texlive/$INPUT_TLMGR_REPO/tlnet-final\"\n  info \"Set tlmgr repo to $tlmgr_repo_url\"\n  tlmgr option repository \"$tlmgr_repo_url\"\nfi\n\nif [[ -n \"$INPUT_PRE_COMPILE\" ]]; then\n  info \"Run pre compile commands\"\n  eval \"$INPUT_PRE_COMPILE\"\nfi\n\nexit_code=0\n\nfor f in \"${root_file[@]}\"; do\n  if [[ -z \"$f\" ]]; then\n    continue\n  fi\n\n  if [[ \"$INPUT_WORK_IN_ROOT_FILE_DIR\" = \"true\" ]]; then\n    pushd \"$(dirname \"$f\")\" >/dev/null\n    f=\"$(basename \"$f\")\"\n    info \"Compile $f in $PWD\"\n  else\n    info \"Compile $f\"\n  fi\n\n  if [[ ! -f \"$f\" ]]; then\n    error \"File '$f' cannot be found from the directory '$PWD'.\"\n  fi\n\n  \"$INPUT_COMPILER\" \"${args[@]}\" \"$f\" || ret=\"$?\"\n  if [[ \"$ret\" -ne 0 ]]; then\n    if [[ \"$INPUT_CONTINUE_ON_ERROR\" = \"true\" ]]; then\n      exit_code=\"$ret\"\n    else\n      exit \"$ret\"\n    fi\n  fi\n\n  if [[ \"$INPUT_WORK_IN_ROOT_FILE_DIR\" = \"true\" ]]; then\n    popd >/dev/null\n  fi\ndone\n\nif [[ -n \"$INPUT_POST_COMPILE\" ]]; then\n  info \"Run post compile commands\"\n  eval \"$INPUT_POST_COMPILE\"\nfi\n\nexit \"$exit_code\"\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}