{
  "metadata": {
    "timestamp": 1736568634751,
    "page": 717,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcxOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Bugswriter/tuxi",
      "stars": 1335,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0361328125,
          "content": "/tests/testoutputs.txt\n*.log\n*.bak\n\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.326171875,
          "content": "                     GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.2041015625,
          "content": ".POSIX:\n\nPREFIX = ~/.local\n\nall: install\n\ntuxi:\n\ninstall:\n\tmkdir -p ${DESTDIR}${PREFIX}/bin\n\tcp tuxi ${DESTDIR}${PREFIX}/bin/tuxi\n\nuninstall:\n\trm -f ${DESTDIR}${PREFIX}/bin/tuxi\n\n.PHONY: all install uninstall\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.6328125,
          "content": "<h1 align=\"center\">TUXI</h1>\n<p align=\"center\">A CLI tool that scrapes Google search results and SERPs that provides instant and concise answers</p>\n\n##  \n\n<img src=\"https://i.ibb.co/sCwYpZ8/general.gif\" alt=\"Video Preview Gif\" align=\"right\" width=\"500px\"/>\n\n### How does this work?\n\nThe script uses `pup` to scrape Google search results and SERPs.\nIf the query returns several results, Tuxi will choose the most \nrelevant result on the basis of priority.\n\nIn addition to scraping, `tuxi` also uses `jq`, `awk` and `sed` \nto process and return results, and `recode` to unescape html.\n\n\n[Watch this video for more info](https://youtu.be/EtwWvMa8muU)\n> Also checkout BugsWriter's YouTube channel for more scripts like this.\n\n## Requirements\n\n* [pup](https://github.com/ericchiang/pup) - CLI tool for processing HTML.\n* [recode](https://github.com/rrthomas/recode) - Charset converter tool and library.\n* [jq](https://github.com/stedolan/jq) - Command-line JSON processor.\n\n## Installation\n\n### cURL\ncURL **tuxi** to your **$PATH** and give execute permissions.\n\n```sh\n$ sudo curl -sL \"https://raw.githubusercontent.com/Bugswriter/tuxi/main/tuxi\" -o /usr/local/bin/tuxi\n$ sudo chmod +x /usr/local/bin/tuxi\n```\n> To update, just do `curl` again, no need to `chmod` anymore.  \n> To uninstall, simply remove `tuxi` from your **$PATH**, for example `sudo rm -f /usr/local/bin/tuxi`.\n\n### Make\n```sh\n$ git clone https://github.com/Bugswriter/tuxi.git && cd tuxi/\n$ sudo make install\n```\n> To update, just `git pull` on your local tuxi repository and reinstall with `sudo make install`.  \n> To uninstall, simply run `sudo make uninstall`.\n\n### Arch Linux AUR\nTuxi is available as the [`tuxi-git`](https://aur.archlinux.org/packages/tuxi-git/) package in the **AUR**.\n```sh\n$ yay -S tuxi-git\n```\n\n## Usage\n\n```sh\n$ tuxi \"Is Linux better than Windows?\"\n---\nLinux has a reputation for being fast and smooth while\nWindows 10 is known to become slow and slow over\ntime. Linux runs faster than Windows 8.1 and Windows 10\nalong with a modern desktop environment and qualities of the\noperating system while windows are slow on older hardware.\n---\n```\n* Quotations are optional, but should be used if you want to search with special characters (?=!|&<>%$#/\\\\).\n* You can also write your query as a statement, e.g: `tuxi linus torvalds birthday`.\n* The -r option will make the output not have formatting, which can be convenient for use in scripts.\n* The -q option silences \"Did you mean?\" and Tuxi's greeting on calling `tuxi`.\n\nUse `-h` to display the help message.\n\n```sh\nUsage: tuxi [options] query\nOR: query source | tuxi [options]\n\nOptions:\n  -h                    Show this help message and exit.\n  -v                    Print tuxi version info and exit.\n\n  -r                    Raw search results.\n                        (no pretty output, no colors)\n\n  -q                    Only output search results.\n                        (silences \"Did you mean?\", greeting, usage)\n\n  -a                    Prints all valid answers.\n\n  -u                    Prints out the top handful of URLs for your search query\n                        (this is automatically printed out if tuxi can't find you an answer)\n\n  -b                    Tries to select the best answer based on keywords at the start and end of your query.\n                        (experimental - eg: define WORD, SONG lyrics, PERSON quotes, weather CITY, FILM cast)\n\n  -t                    Pick answers to test.\n                        (you can specify multiple answers using tuxi_NAME in your query)\n\n  -l                    use LANG_[lang] in your query to override the language used\n                        (eg: tuxi -l LANG_en_US my search query)\n\ntuxi supports the following environment variables:\n  TUXI_LANG=[lang]      sets default search language (eg: TUXI_LANG='en_US')\n\n  TUXI_DELAY=[int]      if you find more than one answer is being printed (and you're not using -a)\n                        increase this number by a little (you want it to be as low as possible)\n                        default value is 250 (eg: TUXI_DELAY=270)\n\ndeveloper flags:\n  -d                    prints debug info along with results\n  -s                    saves HTML for this query to /home/dave/.cache/tuxi/[date]-[query].html\n\n  -c                    use most recent cached result and query\n                        this can be combined with -t flag to more quickly test for different answers\n\n  -p                    disable pipe support (it can break some scripts including our own test script)\n\nReport bugs at https://github.com/Bugswriter/tuxi/issues\n```\n\n## Features\n\n**Easily change query language**  \nLine [8](./tuxi#L8) in `tuxi` contains the language variable which can be changed according the user's preference. However, tuxi will use the system default langauge if none is set.\n\n**Gives corrections**\n```sh\n$ tuxi linux torvalds birthday\n> Did you mean linus?\n---\n28 December 1969\n---\n```\n\n**When you know it's actually linux torvalds** <kbd>-q option</kbd>\n```sh\n$ tuxi -q linux torvalds birthday\n---\n28 December 1969\n---\n```\n\n**Raw formatting for output (no colors)** <kbd>-r option</kbd>\n> Useful for e.g scripting `notify-send`.\n```sh\n$ tuxi -r linux torvalds birthday\n> Did you mean linus?\n28 December 1969\n```\n\n**Math operations**\n```sh\n$ tuxi \"log(30)\"\n---\n1.4771212547196624\n---\n```\n\n**Translate**\n```sh\n$ tuxi \"I love you in japanese\"\n---\nわたしは、あなたを愛しています\n---\n$ tuxi \"わたしは、あなたを愛しています in english\"\n---\nI love you\n---\n```\n\n**And much more (lyrics, weather, conversions...)**\n\n## License\n\nThis project is licensed under [GPL-3.0](./LICENSE).\n\n## Contributing\n\nIf you want to contribute, please see [CONTRIBUTING](./.github/ISSUE_TEMPLATE/CONTRIBUTING.md).\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tuxi",
          "type": "blob",
          "size": 39.662109375,
          "content": "#!/usr/bin/env sh\n\n# tuxi is a cli assistant created by Bugswriter\n# to get answers for your questions instantly.\n# tuxi is currently developed by many collaborators\n# you can get more information on our repo :)\n\n# https://github.com/Bugswriter/tuxi © GPL-3.0 License\n\n###############################\n#####      Constants      #####\n###############################\n\n# setting this overrides getting the system language variable\n#   the -l commandline flag overrides everything\n#   this can also be set in your shell environment with\n#   TUXI_LANG=\n[ -n \"$TUXI_LANG\" ] && LANGUAGE=\"$TUXI_LANG\" || LANGUAGE=\"\"\n\n# if you find more than one answer is being printed (and you're not using -a)\n#   increase this number by a little (you want it to be as low as possible)\n#   this can also be set in your shell environment with\n#   TUXI_DELAY=\n[ -n \"$TUXI_DELAY\" ] && MICRO_DELAY=\"$TUXI_DELAY\" || MICRO_DELAY=250\n\nVERSION=\"dev 2.0\"\nMAIN_PID=\"$$\"\n[ ! \"$XDG_CACHE_HOME\" ] && XDG_CACHE_HOME=\"$HOME/.cache\"\n\n#########################################\n#####      macOS compatibility      #####\n#########################################\n\n# credit to @Zhann in #149\n#   to use it, you will need to have GNU core utils installed\ncase \"$OSTYPE\" in\ndarwin*)\n    sed() {\n        gsed \"$@\"\n    }\n    paste() {\n        gpaste \"$@\"\n    }\n    ;;\nesac\n\n######################################\n#####      Snippet priority      #####\n######################################\n\n# priority importance\n#   this variable determines the order the tests are started, they are processed in parallel\n#   even though these are started in order, by default, the first answer to resolve is the one printed\n#   the order here might only make a very small difference\n\n# priority order\n#   the first word should be the name of the a_function() followed by a space\n#   you can disable tests by commenting out the line(s)\npriority=\"\ntracklist       # Album track lists ( eg: noisia outer edges tracklist )\nrichcast        # Rich Rich Answers ( eg: social network cast )\ndefine          # Define ( eg: define Aggrandize )\nlists           # Simple lists ( eg Need for Speed Heat cars list )\nkno_val         # Chem facts ( eg: density of silver, density of hydrogen, what is the triple point of oxygen )\npronounce       # Learn to pronounce ( eg: pronounce linux )\nlyrics_int      # Lyrics ( eg: gecgecgec lyrics )\nweather         # Weather ( eg: weather new york )\nmath            # Math ( eg: log_2(3) * pi^e )\nunit            # Units Conversion ( eg: 1m into 1 cm )\ncurrency        # Currency Conversion ( eg: 1 USD in rupee )\nkno_top         # Knowledge Graph - top ( list ) ( eg: the office cast )\nbasic           # Basic Answers ( eg: christmas day )\nfeat            # Featured Snippets ( eg: who is garfield )\nquotes          # Quotes ( eg: mahatma gandhi quotes )\ntrans           # Translate ( eg: Vais para cascais? em ingles )\nsport_fixture   # Shows last or next fixture of a sports team ( eg. Chelsea next game )\nlyrics_us       # Lyrics for US users, above does not work for US\nkno_right       # Knowledge Graph - right ( eg: the office )\n\"\n\n##############################\n#####      Defaults      #####\n##############################\n\n# system language fallback\nLANG=$(echo $LANG | sed 's/\\..*//')\n\n# options\nraw=false\nquiet=false\nall=false\nbest_match=false\npick_search=false\ndebug=false\nsave_html=false\nuse_cache=false\npick_lang=false\nno_pipe=false\nplus_urls=false\n\n# color codes\nN=\"\\033[0m\"    # Reset\nB=\"\\033[1m\"    # Bold\nR=\"\\033[1;31m\" # Red\nG=\"\\033[1;32m\" # Green\nY=\"\\033[1;33m\" # Yellow\nM=\"\\033[1;35m\" # Magenta\nC=\"\\033[1;36m\" # Cyan\n\n##################################\n#####      Help message      #####\n##################################\n\nhelp_text() {\n    printf \"%bUsage:%b tuxi %b[options]%b %bquery%b\\n\" \"$G\" \"$N\" \"$Y\" \"$N\" \"$M\" \"$N\"\n    printf \"%bOR:%b %bquery source%b | tuxi %b[options]%b\\n\" \"$G\" \"$N\" \"$M\" \"$N\" \"$Y\" \"$N\"\n    printf \"\\n\"\n    printf \"%bOptions:%b\\n\" \"$G\" \"$N\"\n    printf \"  -h                    Show this help message and exit.\\n\"\n    printf \"  -v                    Print tuxi version info and exit.\\n\"\n    printf \"\\n\"\n    printf \"  -r                    Raw search results.\\n\"\n    printf \"                        (no pretty output, no colors)\\n\"\n    printf \"\\n\"\n    printf \"  -q                    Only output search results.\\n\"\n    printf \"                        (silences \\\"Did you mean?\\\", greeting, usage)\\n\"\n    printf \"\\n\"\n    printf \"  -a                    Prints all valid answers.\\n\"\n    printf \"\\n\"\n    printf \"  -u                    Prints out the top handful of URLs for your search query\\n\"\n    printf \"                        (this is automatically printed out if tuxi can't find you an answer)\\n\"\n    printf \"\\n\"\n    printf \"  -b                    Tries to select the best answer based on keywords at the start and end of your query.\\n\"\n    printf \"                        (experimental - eg: define WORD, SONG lyrics, PERSON quotes, weather CITY, FILM cast)\\n\"\n    printf \"\\n\"\n    printf \"  -t                    Pick answers to test.\\n\"\n    printf \"                        (you can specify multiple answers using tuxi_NAME in your query)\\n\"\n    printf \"\\n\"\n    printf \"  -l                    use LANG_[lang] in your query to override the language used\\n\"\n    printf \"                        (eg: tuxi -l LANG_en_US my search query)\\n\"\n    printf \"\\n\"\n    printf \"%btuxi supports the following environment variables:%b\\n\" \"$G\" \"$N\"\n    printf \"  TUXI_LANG=[lang]      sets default search language (eg: TUXI_LANG='en_US')\\n\"\n    printf \"\\n\"\n    printf \"  TUXI_DELAY=[int]      if you find more than one answer is being printed (and you're not using -a)\\n\"\n    printf \"                        increase this number by a little (you want it to be as low as possible)\\n\"\n    printf \"                        default value is 250 (eg: TUXI_DELAY=270)\\n\"\n    printf \"\\n\"\n    printf \"%bdeveloper flags:%b\\n\" \"$G\" \"$N\"\n    printf \"  -d                    prints debug info along with results\\n\"\n    printf \"  -s                    saves HTML for this query to $XDG_CACHE_HOME/tuxi/[date]-[query].html\\n\"\n    printf \"\\n\"\n    printf \"  -c                    use most recent cached result and query\\n\"\n    printf \"                        this can be combined with -t flag to more quickly test for different answers\\n\"\n    printf \"\\n\"\n    printf \"  -p                    disable pipe support (it can break some scripts including our own test script)\\n\"\n    printf \"\\n\"\n    printf \"%bReport bugs at%b %bhttps://github.com/Bugswriter/tuxi/issues%b\\n\" \"$G\" \"$N\" \"$C\" \"$N\"\n}\n\n#############################\n#####      Getopts      #####\n#############################\n\n# -r : raw output\n# -v : version info\n# -h : help\n# -q : silences greeting and did you mean\n# -a : print all answers\n# -b : best match\n# -t : specify answer type\n# -l : specify language using LANG_[code] - eg LANG_en_US\n# -d : print debug info\n# -s : save google HTML response\n# -c : use most recent cached results\n# -p : disable pipe support (needed for test script)\n# -u : also print out the top links\nwhile getopts \"rvhqabtldscpu\" OPT; do\n    case \"$OPT\" in\n    r)\n        raw=true\n        ;;\n    v)\n        printf \"tuxi %s\\n\" \"$VERSION\"\n        exit 0\n        ;;\n    h)\n        help_text\n        exit 0\n        ;;\n    q)\n        quiet=true\n        ;;\n    a)\n        all=true\n        ;;\n    b)\n        best_match=true\n        ;;\n    t)\n        pick_search=true\n        ;;\n    d)\n        debug=true\n        ;;\n    s)\n        save_html=true\n        ;;\n    c)\n        use_cache=true\n        ;;\n    l)\n        pick_lang=true\n        ;;\n    p)\n        no_pipe=true\n        ;;\n    u)\n        plus_urls=true\n        ;;\n    *)\n        help_text | head -n 1\n        exit 1\n        ;;\n    esac\ndone\n\n# shifts to query\nshift $((OPTIND - 1))\n$pick_search && $best_match && echo \"sorry but -b and -t mutually exclusive\" && exit 1\n\n# TODO this may need reworking later to use read instead and only capture the first line\n#   question | tuxi [-flags] --> answer :)\nif ! $no_pipe; then\n    [ -p /dev/stdin ] && query=$(cat)\nfi\n\n#######################################\n#####      Output formatting      #####\n#######################################\n\n# search result output format (changes if raw=true)\noutput() {\n    printf \"%b---%b\\n%s\\n%b---%b\\n\" \"$G\" \"$N\" \"$*\" \"$G\" \"$N\"\n}\n\n# If raw=true: No colors, No pretty output\nif $raw; then\n    N=\"\"\n    B=\"\"\n    R=\"\"\n    G=\"\"\n    Y=\"\"\n    M=\"\"\n    C=\"\"\n\n    output() {\n        printf \"%s\\n\" \"$*\"\n    }\nfi\n\ninfo_msg() {\n    printf \"%b>%b %s\\n\" \"$G\" \"$N\" \"$*\"\n}\n\nerror_msg() {\n    printf \"%b%s%b\\n\" \"$R\" \"$*\" \"$N\"\n}\n\n######################################\n#####      Dependency check      #####\n######################################\n\n# Checks if dependencies are installed.\ncheck_deps() {\n    while [ -n \"$1\" ]; do\n        if [ ! \"$(command -v $1)\" ]; then\n            error_msg \"\\\"$1\\\" not found!\"\n            exit 2\n        fi\n        shift\n    done\n}\n\n# Dependencies\n#   pup : https://github.com/ericchiang/pup\n#   recode : https://github.com/rrthomas/recode\n#   jq : https://github.com/stedolan/jq\ncheck_deps \"pup\" \"recode\" \"jq\"\n\n########################################\n#####      Query manipulation      #####\n########################################\n\n# Conditions to Query\n#   If query is empty and -c is passed: use query from cached result\n#   If query is empty (no -c): exit\n#   If quiet=false: Prints greeting and usage\nif [ -z \"$1\" ] && [ -z \"$query\" ]; then\n    if ! $use_cache; then\n        if ! $quiet; then\n            printf \"Hi, I'm Tuxi. Ask me anything!\\n\"\n            help_text | head -n 1\n        fi\n        exit 0\n    else\n        query=$(ls -1t $XDG_CACHE_HOME/tuxi | head -n1 | sed -e 's/tuxi-*[0-9]*-//' -e 's/.html//' -e 's/_/ /g')\n    fi\nfi\n\n# Else, all arguments are saved in $query\n[ -z \"$query\" ] && query=\"$*\"\n\n# language select: the -l flag\n#   language specified on the command line overwrites both\n#   the variable set at the top of this script and the system language\nif $pick_lang; then\n    query=\"$(printf '%b\\n' \"$query\" | sed 's/ /\\\\n/g')\"\n    LANGUAGE=\"$(printf '%b\\n' \"$query\" | grep 'LANG_' | sed 's/LANG_//g')\"\n    query=\"$(printf '%b\\n' \"$query\" | grep -v \"LANG_\" | sed 's/\\\\n/ /g')\"\nfi\n\n# Custom answers: the -t flag\n#   clears the list of snippets to check (saving the original list to print out if a mistake is made)\n#   then loops through the query looking for tuxi_ and updates the priority variable to use only those snippets\nif $pick_search; then\n    list_priority=\"$priority\"\n    snippet_check=$(printf '%b\\n' \"$list_priority\" | cut -d ' ' -f1 | sed -e '/^\\s*#.*$/d' -e '/^\\s*$/d')\n    matched=false\n    priority=\"\"\n    query=\"$(printf '%b\\n' \"$query\" | sed 's/ /\\\\n/g')\"\n    for pick_words in $(printf '%b\\n' \"$query\" | grep 'tuxi_' | sed 's/tuxi_//g'); do\n        for check_pick_words in $(printf '%b\\n' \"$snippet_check\"); do\n            if [ \"$check_pick_words\" = \"$pick_words\" ]; then\n                [ -z \"$priority\" ] && priority=\"$(printf '%s\\n' \"$pick_words\")\" \\\n                    || priority=\"$(printf '%b\\n%s\\n' \"$priority\" \"$pick_words\")\"\n                matched=true\n            fi\n        done\n        if ! $matched; then\n            printf \"Sorry but %s is not a valid search type\\nPlease retry your search using one of the following: tuxi_\\n\" \"$pick_words\"\n            printf \"%b\\n\" \"$list_priority\"\n            printf \"\\n\"\n            printf \"If %s is on that list could you please file a bug report, thanks! (and sorry)\\n\" \"$pick_words\"\n            exit 1\n        fi\n    done\n    query=\"$(printf '%b\\n' \"$query\" | grep -v \"tuxi_\" | sed 's/\\\\n/ /g')\"\nfi\n\n# our patented (honest!) \"smrt search\" algorithm: the -b flag\n# jokes aside, this is going to need some iterating on, I'll turn it into a tidy loop later\nif $best_match; then\n    j=8\n    use_quotes=false\n    use_lyrics=false\n    use_weather=false\n    use_cast=false\n    use_weather=false\n    use_define=false\n    use_list=false\n    use_pronounce=false\n    use_tracklist=false\n\n    query_check=\"$(printf '%b\\n' \"$query\" | sed 's/ /\\\\n/g' | tr '[:upper:]' '[:lower:]')\"\n    first_word=$(printf '%b\\n' \"$query_check\" | head -n1)\n    last_word=$(printf '%b\\n' \"$query_check\" | tail -n1)\n\n    for keywords in printf '%s\\n%s\\n' \"$first_word\" \"$last_word\"; do\n        case \"$keywords\" in\n        quote | quotes) use_quotes=true ;;\n        lyrics) use_lyrics=true ;;\n        weather) use_weather=true ;;\n        cast) use_cast=true ;;\n        define | definition) use_define=true ;;\n        list) use_list=true ;;\n        pronounce | pronunciation) use_pronounce=true ;;\n        tracklist | songs) use_tracklist=true ;;\n        esac\n    done\n\n    $use_quotes && priority=\"$(printf '%b\\n' \"$priority\" | cut -d ' ' -f1 | grep 'quotes')\" || j=$(($j - 1))\n    $use_lyrics && priority=\"$(printf '%b\\n' \"$priority\" | cut -d ' ' -f1 | grep 'lyrics')\" || j=$(($j - 1))\n    $use_weather && priority=\"$(printf '%b\\n' \"$priority\" | cut -d ' ' -f1 | grep 'weather')\" || j=$(($j - 1))\n    $use_cast && priority=\"$(printf '%b\\n' \"$priority\" | cut -d ' ' -f1 | grep -e 'lists' -e 'kno_')\" || j=$(($j - 1))\n    $use_define && priority=\"$(printf '%b\\n' \"$priority\" | cut -d ' ' -f1 | grep 'define')\" || j=$(($j - 1))\n    $use_pronounce && priority=\"$(printf '%b\\n' \"$priority\" | cut -d ' ' -f1 | grep 'pronounce')\" || j=$(($j - 1))\n    $use_tracklist && priority=\"$(printf '%b\\n' \"$priority\" | cut -d ' ' -f1 | grep 'tracklist')\" || j=$(($j - 1))\n    $use_list && priority=\"$(printf '%b\\n' \"$priority\" | cut -d ' ' -f1 | grep -e 'lists' -e 'kno_')\" || j=$(($j - 1))\n    [ $j -eq 0 ] && priority=\"$(printf '%b\\n' \"$priority\" | cut -d ' ' -f1 | sed -e '/^\\s*#.*$/d' -e '/^[[:space:]]*$/d' | grep -v 'quotes' | grep -v 'lyrics' | grep -v 'weather')\"\nfi\n\n######################################\n#####      Answer functions      #####\n######################################\n\n# the following divs have been removed due to seemingly being redundant\n# Im leaving them here just in case they're needed again in future\n# div.ujudUb (seems to be another lyrics scrape)\n\n# FUNCTION TEMPLATE\n\n# NewAnswerName should be the word used in $priority\n\n# a_NewAnswerName() { # Answer description (and example)\n#     echo \"$google_html\" | pup ... [ SCRAPE METHOD HERE ] ...\n# }\n\n# NOTE: the order of these functions doesn't matter, priority is determined by the variable\n\n# Define (eg: define Aggrandize) //original snippet credit @igaurab\na_define() {\n    case \"$LANGUAGE\" in\n    en_*) dfn_use_new=true ;;\n    *) dfn_use_new=false ;;\n    esac\n    if $dfn_use_new; then\n        define=\"$(echo \"$google_html\" | pup 'div.VpH2eb.dZd3De.vmod text{}' | sed '/^[[:space:]]*$/d' | recode html..ISO-8859-1)\"\n        if [ -n \"$define\" ]; then\n            printf 'pronounced: %b%s%b\\n\\n' \"$C\" \"$(printf '%s\\n' \"$define\" | grep -m1 -A1 -w '/' | tail -n1)\" \"$N\"\n            dfn_top=true\n            dfn_end_top=false\n            dfn_start=false\n            dfn_append=false\n            dfn_marker=false\n            dfn_sim_op=false\n            dfn_skip=false\n            printf '%s\\n' \"$define\" | while IFS= read -r dfn_foo; do\n                if $dfn_top; then\n                    if $dfn_end_top; then\n                        case \"$dfn_foo\" in\n                        *\"noun: \" | *\"verb: \" | *\"adjective: \" | *\"adverb: \" | *\"pronoun: \" | *\"preposition: \" | *\"conjunction: \" | *\"determiner: \" | *\"exclamation: \")\n                            printf '%s ' \"$dfn_foo\"\n                            dfn_append=true\n                            ;;\n                        *\"noun:\" | *\"verb:\" | *\"adjective:\" | *\"adverb:\" | *\"pronoun:\" | *\"preposition:\" | *\"conjunction:\" | *\"determiner:\" | *\"exclamation:\")\n                            printf '%s ' \"$dfn_foo\"\n                            dfn_append=true\n                            ;;\n                        *) printf '%b%s%b\\n\\t%b%s%b\\n' \"$Y\" \"$dfn_backup\" \"$N\" \"$B\" \"$dfn_foo\" \"$N\" ;;\n                        esac\n                        dfn_top=false\n                    else\n                        case \"$dfn_foo\" in\n                        noun | verb | adjective | adverb | pronoun | preposition | conjunction | determiner | exclamation)\n                            dfn_backup=\"$dfn_foo\"\n                            dfn_end_top=true\n                            ;;\n                        *) continue ;;\n                        esac\n                    fi\n                elif $dfn_append; then\n                    printf '%b%s%b\\n' \"$C\" \"$dfn_foo\" \"$N\"\n                    dfn_append=false\n                elif [ $dfn_foo -eq $dfn_foo ] 2>/dev/null; then\n                    printf '\\n'\n                    $dfn_sim_op && dfn_sim_op=false\n                elif [ \"$dfn_foo\" = '/' ]; then\n                    $dfn_skip && dfn_skip=false || dfn_skip=true\n                elif $dfn_skip; then\n                    continue\n                elif [ \"$dfn_foo\" = '. ' ]; then\n                    $dfn_sim_op && dfn_sim_op=false\n                elif [ \"$dfn_foo\" = '.' ]; then\n                    printf '\\n'\n                    $dfn_sim_op && dfn_sim_op=false\n                elif $dfn_marker; then\n                    [ \"$dfn_foo\" = 'Similar:' ] && dfn_hl=\"$G\" || dfn_hl=\"$R\"\n                    printf '%b%s%b\\n' \"$dfn_hl\" \"$dfn_foo\" \"$N\"\n                    dfn_marker=false\n                    dfn_sim_op=true\n                elif $dfn_start; then\n                    case \"$dfn_foo\" in\n                    informal) printf '(informal) ' ;;\n                    British) printf '(British) ' ;;\n                    rare) printf '(rare) ' ;;\n                    *)\n                        printf '%s ' \"$dfn_foo\"\n                        dfn_append=true\n                        dfn_start=false\n                        ;;\n                    esac\n                else\n                    case \"$dfn_foo\" in\n                    \"; \"*)\n                        printf '%s ' \"$dfn_foo\"\n                        dfn_append=true\n                        ;;\n                    *\"noun: \" | *\"verb: \" | *\"adjective: \" | *\"adverb: \" | *\"pronoun: \" | *\"preposition: \" | *\"conjunction: \" | *\"determiner: \" | *\"exclamation: \")\n                        printf '\\n%s ' \"$dfn_foo\"\n                        $dfn_sim_op && dfn_sim_op=false\n                        dfn_append=true\n                        ;;\n                    \" h \")\n                        dfn_marker=true\n                        ;;\n                    noun | verb | adjective | adverb | pronoun | preposition | conjunction | determiner | exclamation)\n                        printf '\\n'\n                        $dfn_sim_op && dfn_sim_op=false\n                        dfn_start=true\n                        ;;\n                    *)\n                        $dfn_sim_op && printf '\\t%s\\n' \"$dfn_foo\" \\\n                            || printf '\\t%b%s%b\\n' \"$B\" \"$dfn_foo\" \"$N\"\n                        ;;\n                    esac\n                fi\n            done\n        fi\n    else\n        echo \"$google_html\" | pup 'div.DgZBFd, div.vdBwhd, div[data-dobid=\"dfn\"] text{}' | sed -e 's/^/* /' -e '1 s/^* //' | recode html..ISO-8859-1\n    fi\n}\n\n# this div is google's top line answer, works for simple dates, values etc\n# eg: density of silver, what is the triple point of oxygen, elevation of mount everest, christmas day\n# \"what is the \" seems to be required for some things //credit @sudocanttype\na_kno_val() {\n    echo \"$google_html\" | pup 'div.Z0LcW.XcVN5d text{}' | tr '\\n' ' '\n}\n\n# Math ( eg: log_2(3) * pi^e ) //credit @BeyondMagic\na_math() {\n    echo \"$google_html\" | pup 'span.qv3Wpe text{}' | tr -d '\\n ' | recode html..ISO-8859-1\n}\n\n# Knowledge Graph - top (list) ( eg: the office cast ) //credit @Bugswriter\na_kno_top() {\n    echo \"$google_html\" | pup 'div.dAassd json{}' | jq -r '.[] | .children | .[] | .text' | sed ':a;N;$!ba;s/\\n/ /g;s/null/\\n/g' | sed '1s/.*/* &/;2,$s/.*/*&/;$d' | recode html..ISO-8859-1\n}\n\n# Quotes ( eg: mahatma gandhi quotes ) //credit @PoseidonCoder\na_quotes() {\n    echo \"$google_html\" | pup 'div.Qynugf text{}' | recode html..ISO-8859-1\n}\n\n# Basic Answers ( eg: summer solstice || easter ) // @Bugswriter\n# this displays similar info to kno_val but uses a different div in the google results\na_basic() {\n    echo \"$google_html\" | pup 'div.zCubwf text{}' | tr -d '\\n' | recode html..ISO-8859-1\n}\n\n# Rich Rich Answers ( eg: social network cast ) //credit @BeyondMagic\na_richcast() {\n    echo \"$google_html\" | pup 'a.ct5Ked json{}' | jq -r '.[] | .title' | sed 's/^/* /' | recode html..ISO-8859-1\n}\n\n# Simple lists (eg: how to exit vim || how to update windows) //original snippet credit @BeyondMagic\na_lists() {\n    lists=\"$(echo \"$google_html\" | pup 'div.co8aDb.XcVN5d, li.TrT0Xe' | sed 's/^[[:blank:]]*//g' | recode html..ISO-8859-1)\"\n    if [ -n \"$lists\" ]; then\n        lists_num=0\n        printf '%s\\n' \"$lists\" | while IFS= read -r lists_foo; do\n            case \"$lists_foo\" in\n            \"<div \"*) continue ;;\n            \"</div>\") printf '\\n' ;;\n            \"<b>\") printf '%b' \"$B\" ;;\n            \"</b>\") printf '%b' \"$N\" ;;\n            \"<li \"*)\n                lists_num=$(($lists_num + 1))\n                printf '%s%b)%b\\t' \"$lists_num\" \"$Y\" \"$N\"\n                ;;\n            \"</li>\") printf '\\n' ;;\n            *) printf '%s ' \"$lists_foo\" ;;\n            esac\n        done\n    fi\n}\n\n# Featured Snippets ( eg: who is garfield ) //credit @Bugswriter\na_feat() {\n    echo \"$google_html\" | pup 'span.hgKElc text{}' | tr -d '\\n' | recode html..ISO-8859-1 | tr ' ' '\\0' | xargs -0 -n10\n}\n\n# Lyrics ( eg: gecgecgec lyrics ) //credit @d-shaun\na_lyrics_int() {\n    echo \"$google_html\" | pup 'div.bbVIQb text{}' | recode html..ISO-8859-1\n}\n\n# Lyrics for US users, above does not work for US //credit @sudocanttype\na_lyrics_us() {\n    echo \"$google_html\" | pup 'span[jsname=\"YS01Ge\"] text{}' | recode html..ISO-8859-1\n}\n\n# Weather ( eg: weather new york) //credit @jhagas + @Genghius + @BeyondMagic\na_weather() {\n    weather=$(echo \"$google_html\" | pup 'div.UQt4rd json{}' | jq -r '.. | .text?, .alt?' | sed '/null/d' | sed '$!N; /^\\(.*\\)\\n\\1$/!P; D')\n    if [ -n \"$weather\" ]; then\n        if [ $(echo \"$weather\" | sed -n 2p) -gt $(echo \"$weather\" | sed -n 3p) ]; then\n            weather=$(printf '%b\\n' \"$weather\" | sed -e 2','3'!b' -e ''2'h;'2'!H;'3'!d;x;s/^\\([[:print:]'\"$(printf '\\001\\002\\003\\004\\005\\006\\007\\010\\011\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\\177')\"']*\\)\\(.*\\n\\)\\(.*\\)/\\3\\2\\1/')\n        fi\n        printf '%b\\n' \"$weather\" | sed '4,5d;2s/.*/&ºC/;2,${N;s/\\n/\\t/;};3s/.*/&ºF/;$s/\\t/\\t\\t/' | recode html..ISO-8859-1\n    fi\n}\n\n# Units Conversion ( eg: 1m into 1 cm ) //credit @karthink\na_unit() {\n    echo \"$google_html\" | pup '#NotFQb json{}' | jq -r '.[] | .children | .[0] | .value' | recode html..ISO-8859-1\n}\n\n# Currency Conversion ( eg: 1 USD in rupee ) //credit @karthink\na_currency() {\n    echo \"$google_html\" | pup '.SwHCTb text{}' | sed 's/\\n//g;s/\\ /\\0/g' | recode html..ISO-8859-1\n}\n\n# Translate ( eg: Vais para cascais? em ingles ) //credit @Genghius\na_trans() {\n    echo \"$google_html\" | pup 'pre.XcVN5d json{}' | jq -r '[.[] | .children | .[] | select(.class!=\"BCGytf\")][1] | .text' | sed 's/null//g' | recode html..ISO-8859-1\n}\n\n# Knowledge Graph - right ( eg: the office ) //credit @Bugswriter\na_kno_right() {\n    echo \"$google_html\" | pup 'div.kno-rdesc span' | sed -n '2p' | awk '{$1=$1;print}' | recode html..ISO-8859-1 | tr ' ' '\\0' | xargs -0 -n10\n}\n\n# Shows last or next fixture of a sports team ( eg. Chelsea next game ) //original snippet credit @ismayilkarimli\na_sport_fixture() {\n    sport_fixture=\"$(echo \"$google_html\" | pup 'span[jscontroller=\"f9W5M\"] text{}' | recode html..ISO-8859-1)\"\n    if [ -n \"$sport_fixture\" ]; then\n        case \"$sport_fixture\" in\n        \"Premier League\" | \"EFL \"* | \"FA \"* | \"MLS\" | \"Canadian Premier League\" | \"USL \"* | \"UEFA \"* | \"Ligue \"* | \"Coupe de France\" | \"Trophée des Champions\" | *\"Bundesliga\" | \"DFB-Pokal\" | \"Serie \"* | \"Coppa Italia\" | \"Supercoppa Italiana\" | \"Eredivisie\" | \"Eerste Divisie\" | \"Tweede Divisie\" | \"KNVB \"* | \"Johan Cruijff\"* | \"Scottish Premiership\" | \"Scottish Championship\" | \"Scottish Cup\" | \"Scottish League Cup\" | \"La Liga\" | \"Segunda División\" | \"Tercera División\" | \"Copa del Rey\" | \"Supercopa de España\" | \"Copa Federación\" | \"Allsvenskan\" | \"Superettan\" | \"Svenska Cupen\" | \"Swiss Super League\" | \"Swiss Challenge League\" | \"Schweizer Cup\" | \"Uhrencup\")\n            sf_use_new=true\n            ;;\n        *) sf_use_new=false ;;\n        esac\n        if $sf_use_new; then\n            sport_fixture=\"$(echo \"$google_html\" | pup 'div.imso_mh__tm-scr text{}' | recode html..ISO-8859-1)\"\n            sfi=1 # <-- this is used as both a loop counter and name for our new variables\n\n            printf '%b\\n' \"$sport_fixture\" | { # <-- the braces are needed because while/read is executed in a subshell...\n                # this means that as soon as the loop has finished it will exit the new process and \"forget\" everything\n                # if we encapsulate the whole loop and processing code in the braces, we get to use the data\n\n                while IFS= read -r sfx; do # read the contents of $sport_fixture line by line...\n                    # ...saving the text from each line in the variable $sfx and *do*ing the following:\n\n                    eval sf${sfi}=\\\"\\${sfx}\\\" # use eval to declare a new variable using two different variables...\n                    # we use sf and then the line number for that text string for the name of the variable (eg: $sf1)\n                    # and the value of the new variable is going to be the current value of $sfx\n                    # when using eval this way the value side of the declaration has to be properly escaped\n\n                    sfi=$(($sfi + 1)) # i++ - increment the loop counter and more importantly the next variable name\n\n                    [ $sfi -eq 10 ] && break # we don't need any of the information after the ninth line...\n                    # so we can just use break to exit the loop when the counter hits ten\n\n                done # <-- normally after this point everything processed above would be gone...\n                # but because we are still within the braces we get to do some checks on the data we have\n\n                # check if match is in progress\n                if [ \"$sf3\" != ' · ' ]; then\n                    # match is underway\n                    if [ \"$sf2\" = \"'\" ]; then\n                        # match is underway, score is a draw\n                        if [ $sf5 -eq $sf7 ]; then\n                            printf '%s\\n%b%s\\t%s\\n%s\\t%s%b\\n%s %b%s%s%b\\n' \\\n                                \"$sf3\" \"$B\" \"$sf5\" \"$sf4\" \"$sf7\" \"$sf8\" \"$N\" \"$sf6\" \"$G\" \"$sf1\" \"$sf2\" \"$N\"\n                        # match is underway, team one is winning\n                        elif [ $sf5 -gt $sf7 ]; then\n                            printf '%s\\n%b%s\\t%s\\n%b%b%s\\t%s%b\\n%s %b%s%s%b\\n' \\\n                                \"$sf3\" \"$C\" \"$sf5\" \"$sf4\" \"$N\" \"$B\" \"$sf7\" \"$sf8\" \"$N\" \"$sf6\" \"$G\" \"$sf1\" \"$sf2\" \"$N\"\n                        # match is underway, team two is winning\n                        else\n                            printf '%s\\n%b%s\\t%s\\n%b%s\\t%s%b\\n%s %b%s%s%b\\n' \\\n                                \"$sf3\" \"$B\" \"$sf5\" \"$sf4\" \"$C\" \"$sf7\" \"$sf8\" \"$N\" \"$sf6\" \"$G\" \"$sf1\" \"$sf2\" \"$N\"\n                        fi\n                    # half time\n                    else\n                        # match is even\n                        if [ $sf4 -eq $sf6 ]; then\n                            printf '%s\\n%b%s\\t%s\\n%s\\t%s\\n%b%s %b%s%b\\n' \\\n                                \"$sf2\" \"$B\" \"$sf4\" \"$sf3\" \"$sf6\" \"$sf7\" \"$N\" \"$sf5\" \"$R\" \"$sf1\" \"$N\"\n                        # team one winning\n                        elif [ $sf4 -gt $sf6 ]; then\n                            printf '%s\\n%b%s\\t%s\\n%b%b%s\\t%s\\n%b%s %b%s%b\\n' \\\n                                \"$sf2\" \"$C\" \"$sf4\" \"$sf3\" \"$N\" \"$B\" \"$sf6\" \"$sf7\" \"$N\" \"$sf5\" \"$R\" \"$sf1\" \"$N\"\n                        # team two winning\n                        else\n                            printf '%s\\n%b%s\\t%s\\n%b%s\\t%s\\n%b%s %b%s%b\\n' \\\n                                \"$sf2\" \"$B\" \"$sf4\" \"$sf3\" \"$C\" \"$sf6\" \"$sf7\" \"$N\" \"$sf5\" \"$R\" \"$sf1\" \"$N\"\n                        fi\n                    fi\n                # check if the match has happened or is upcomming\n                elif [ -n \"$sf9\" ]; then\n                    # match has finished\n                    if [ $sf6 -eq $sf8 ]; then\n                        # scores are even\n                        printf '%s%s%s\\n%b%s\\t%s\\n%s\\t%s%b\\n%s %s\\n' \\\n                            \"$sf4\" \"$sf3\" \"$sf2\" \"$B\" \"$sf6\" \"$sf5\" \"$sf8\" \"$sf9\" \"$N\" \"$sf7\" \"$sf1\"\n                    elif [ $sf6 -gt $sf8 ]; then\n                        # team one has won\n                        printf '%s%s%s\\n%b%s\\t%s%b%b\\n%s\\t%s%b\\n%s %s\\n' \\\n                            \"$sf4\" \"$sf3\" \"$sf2\" \"$C\" \"$sf6\" \"$sf5\" \"$N\" \"$B\" \"$sf8\" \"$sf9\" \"$N\" \"$sf7\" \"$sf1\"\n                    else\n                        # team two has won\n                        printf '%s%s%s\\n%b%s\\t%s\\n%b%s\\t%s%b\\n%s %s\\n' \\\n                            \"$sf4\" \"$sf3\" \"$sf2\" \"$B\" \"$sf6\" \"$sf5\" \"$C\" \"$sf8\" \"$sf9\" \"$N\" \"$sf7\" \"$sf1\"\n                    fi\n                else\n                    # match is upcomming\n                    printf '%b%b%b\\n%b%b%b %b %b%b%b\\n' \\\n                        \"$sf3\" \"$sf2\" \"$sf1\" \"$B\" \"$sf4\" \"$N\" \"$sf5\" \"$B\" \"$sf6\" \"$N\"\n                fi\n            } # <-- and here is where the subshell ends and the rest of the snippet code falls through to exit\n        fi\n    else\n        echo \"$google_html\" | pup 'span.imso_mh__lr-dt-ds, span[jscontroller=\"f9W5M\"], div.liveresults-sports-immersive__team-name-width span, div.imso_mh__l-tm-sc, div.imso_mh__r-tm-sc text{}' | recode html..ISO-8859-1\n    fi\n}\n\n# Learn to pronounce ( eg: pronounce linux ) //credit @sdushantha\na_pronounce() {\n    echo \"$google_html\" | pup 'div.fQ02Rb.eDzgme span.seLqNc text{}' | paste -s -d ' ' | sed 's/\\s/∙/g'\n}\n# Album track lists ( eg: noisia outer edges tracklist )\na_tracklist() {\n    tracklist=\"$(echo \"$google_html\" | pup 'div.mR2gOd json{}')\"\n    if [ -n \"$tracklist\" ]; then\n        tracklist_songs=\"$(printf '%s\\n' \"$tracklist\" | jq -r '.[0].children[0].children[].children[0].children[].children[0].children[0].children[1].children[1].children[0].children[0].text' \\\n            | sed '/^null$/d' | recode html..ISO-8859-1)\"\n        [ -z \"$tracklist_songs\" ] && tracklist_songs=\"$(printf '%s\\n' \"$tracklist\" \\\n            | jq -r '.[0].children[0].children[].children[0].children[].children[0].children[0].children[1].children[0].children[0].children[0].text' \\\n            | sed '/^null$/d' | recode html..ISO-8859-1)\"\n        [ -z \"$tracklist_songs\" ] && exit\n        tracklist_links=\"$(printf '%s\\n' \"$tracklist\" | jq -r '.[1].children[0].children[0].children[].href' | sed '/^null$/d')\"\n        printf '%s\\n' \"$tracklist_links\" | grep -q 'youtube.com' || unset tracklist_links\n        [ -n \"$tracklist_links\" ] && tracklist_use_links=true || tracklist_use_links=false\n        tracklist_title=\"$(echo \"$google_html\" | pup 'div.SPZz6b text{}' | recode html..ISO-8859-1)\"\n        [ -n \"$tracklist_title\" ] && printf '%b%s%b (%s)\\n' \"$C\" \\\n            \"$(printf '%s\\n' \"$tracklist_title\" | head -n1)\" \"$N\" \\\n            \"$(printf '%s\\n' \"$tracklist_title\" | tail -n1)\"\n        tracklist_i=1\n        printf '%s\\n' \"$tracklist_songs\" | while IFS= read -r tracklist_foo; do\n            printf '%s%b)%b\\t%b%s%b\\n' \"$tracklist_i\" \"$Y\" \"$N\" \"$B\" \"$tracklist_foo\" \"$N\"\n            tracklist_i=$(($tracklist_i + 1))\n        done\n        if $tracklist_use_links; then\n            $raw || printf '%b---%b\\n' \"$G\" \"$N\"\n            printf '%bassociated video links:%b\\n' \"$R\" \"$N\"\n            printf '%s\\n' \"$tracklist_links\"\n        fi\n    fi\n}\n\n###############################\n#####      Functions      #####\n###############################\n\n# these are used by the processing loop to determine how and when to print info and exit\n#   USR1\nfound_answer_signal() {\n    answers_found=$(($answers_found + 1))\n}\ntrap found_answer_signal USR1\n\n#   USR2\noutput_printed_signal() {\n    printed=$(($printed + 1))\n}\ntrap output_printed_signal USR2\n\n# waiting signals to continue\n#   without this the main script assumes that fork doesn't have an answer ready\n#   because it checks the printed variable too fast and sends the signal to print\n#   to another fork and that's how you get multiple answers being printed out\n#   so be careful with this\nshort_delay() {\n    [ ! $1 ] && runs=1 || runs=$1\n    foo=0\n    until [ $foo -eq $runs ]; do\n        l=0\n        until [ $l -eq $MICRO_DELAY ]; do\n            [ true ]\n            l=$(($l + 1))\n        done\n        foo=$(($foo + 1))\n    done\n}\n\n# calculates execution time and number of answers processed\ndebug_info() {\n    timer_stop=$(date +'%s %N')\n    timer_start_secs=$(echo $timer_start | cut -d ' ' -f1)\n    timer_stop_secs=$(echo $timer_stop | cut -d ' ' -f1)\n    timer_start_nano=$(echo $timer_start | cut -d ' ' -f2)\n    timer_start_nano=$(expr $timer_start_nano + 0)\n    timer_stop_nano=$(echo $timer_stop | cut -d ' ' -f2)\n    timer_stop_nano=$(expr $timer_stop_nano + 0)\n    timer_secs_math=$(($timer_stop_secs - $timer_start_secs))\n    if [ $timer_secs_math -lt 1 ]; then\n        timer_duration=$(($timer_stop_nano - $timer_start_nano))\n        timer_duration=$(($timer_duration / 1000))\n        if [ $timer_duration -gt 1999 ]; then\n            timer_duration=$(($timer_duration / 1000))\n            timer_unit='ms'\n        else\n            timer_unit='μs'\n        fi\n    elif [ $timer_secs_math -eq 1 ]; then\n        timer_duration=$((1000000000 - $timer_start_nano))\n        timer_duration=$(($timer_duration + $timer_stop_nano))\n        timer_duration=$(($timer_duration / 1000))\n        if [ $timer_duration -gt 1999 ]; then\n            timer_duration=$(($timer_duration / 1000))\n            timer_unit='ms'\n        else\n            timer_unit='μs'\n        fi\n    else\n        timer_duration=\"$timer_secs_math\"\n        timer_unit='s'\n    fi\n    info_msg \"$answers_found answer(s) found - post curl processing time ~$timer_duration $timer_unit\"\n}\n\n# enabled with the -s flag\ndump_html() {\n    [ -d \"$XDG_CACHE_HOME\"/tuxi ] || mkdir -p \"$XDG_CACHE_HOME/tuxi\"\n    file_name=\"$(date +%s%N)-$(printf %s \"$query\" | sed 's/ /_/g').html\"\n    html_location=\"$XDG_CACHE_HOME/tuxi/$file_name\"\n    printf \"%s\" \"$google_html\" >$html_location\n    info_msg \"HTML for \\\"$query\\\" -> $html_location\"\n}\n\n# this calls the various snippet functions and checks for valid answers\ntest_answers() {\n    print_answer_signal() {\n        if [ -n \"$z\" ]; then\n            kill -USR2 \"$MAIN_PID\"\n            $debug && info_msg \"Answer selected: $the_chosen_one\"\n            output \"$z\"\n            kill \"$sleep_pid\"\n        fi\n    }\n    trap print_answer_signal USR1\n    z=\"$(a_${1})\"\n    if [ -n \"$z\" ]; then\n        the_chosen_one=\"$1\"\n        if ! $all; then\n            kill -USR1 \"$MAIN_PID\"\n            sleep 1 &\n            sleep_pid=\"$!\"\n            wait\n        else\n            kill -USR1 \"$MAIN_PID\"\n            $debug && output \"$(printf '%b\\n\\n%b\\n' \"$(info_msg \"Answer selected: $the_chosen_one\")\" \"$z\")\" || output \"$z\"\n        fi\n    fi\n}\n\n# this finds and prints out the top links for your query\ntop_links() {\n    url_list=\"$(echo \"$google_html\" | pup 'div.tF2Cxc json{}' \\\n        | jq -r '.[].children[0].children[0].children[1].text, .[].children[0].children[0].children[1].children[0].text, .[].children[0].children[0].href' \\\n        | sed '/^null$/d' | recode html..ISO-8859-1)\"\n    if [ -n \"$url_list\" ]; then\n        if [ -n \"$1\" ]; then\n            info_msg \"Sorry about that! Perhaps one of these links may be of use?\"\n            $raw || printf '%b---%b\\n' \"$G\" \"$N\"\n        fi\n        links_num=$(($(printf '%s\\n' \"$url_list\" | wc -l) / 2))\n        links_i=1\n        printf '%s\\n' \"$url_list\" | {\n            while IFS= read -r links_foo; do\n                eval links_bar_${links_i}=\\\"\\${links_foo}\\\"\n                links_i=$(($links_i + 1))\n            done\n            links_i=1\n            until [ $links_i -gt $links_num ]; do\n                links_j=$(($links_i + $links_num))\n                printf '%b%s%b\\n%s\\n' \"$C\" \"$(eval echo \\\"\\$links_bar_${links_i}\\\")\" \\\n                    \"$N\" \"$(eval echo \\\"\\$links_bar_${links_j}\\\")\"\n                links_i=$(($links_i + 1))\n            done\n        }\n        $raw || printf '%b---%b\\n' \"$G\" \"$N\"\n    fi\n}\n\n######################################\n#####      Getting the HTML      #####\n######################################\n\n# fetch response from Google via cURL (-G: get, -s: silent) unless -c flag is passed\n# in which case we use the most recent cached html from $XDG_CACHE_HOME/tuxi\nuser_agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:53.0) Gecko/20100101 Firefox/53.0\"\ngoogle_url=\"https://www.google.com/search?hl=\"${LANGUAGE:=\"${LANG:=en_US}\"}\"\"\n$use_cache && google_html=\"$(cat $XDG_CACHE_HOME/tuxi/$(ls -1t $XDG_CACHE_HOME/tuxi | head -n1))\"\nif [ -z \"$google_html\" ]; then\n    $use_cache && printf 'no cached pages found!\\n' && exit 1\n    google_html=$(curl -Gs --compressed \"$google_url\" --user-agent \"$user_agent\" --data-urlencode \"q=$query\")\nfi\n[ -z \"$google_html\" ] && error_msg \"No valid response from google!\" && exit 1\n\n# if -s flag is passed save search results for debugging\n$save_html && dump_html\n\n# start timer for debug_info after receiving results from google\n$debug && timer_start=$(date +'%s %N')\n\n################################\n#####      Processing      #####\n################################\n\n# launches all the snippet functions and saves the pids for later\npids=\"\"\nanswers_found=0\nprinted=0\nif ! $pick_search || ! $best_match; then\n    priority=$(printf '%b\\n' \"$priority\" | cut -d ' ' -f1 | sed -e '/^\\s*#.*$/d' -e '/^[[:space:]]*$/d')\nfi\n# loops through $priority forking all the tests in order\nfor tests in $(printf '%b\\n' \"$priority\"); do\n    test_answers \"$tests\" 2>/dev/null &\n    [ -z \"$pids\" ] && pids=\"$!\" || pids=\"${pids}\\n${!}\"\ndone\n\n# did you mean is processed here to make controling the order things get printed easier\n# forking the tests makes things faster (hopefully) but makes passing information around harder\nif ! $quiet; then\n    # silenced if quiet=true\n    did_you_mean=\"$(echo \"$google_html\" | pup 'a.gL9Hy text{}')\"\n    if [ -n \"$did_you_mean\" ]; then\n        err_hl=\"$(echo \"$google_html\" | pup 'a.gL9Hy > b text{}')\"\n        did_you_mean=\"$(printf '%b\\n' \"$did_you_mean\" | sed ':a;N;$!ba;s/\\n//g' | recode html..ISO-8859-1)\"\n        for errors in $(printf '%b\\n' \"$err_hl\"); do\n            replacement=\"${C}${errors}${N}${B}\"\n            replacement=$(printf '%s\\n' \"$replacement\" | sed -e 's/[\\/&]/\\\\&/g')\n            did_you_mean=$(printf '%b\\n' \"$did_you_mean\" | sed \"s/${errors}/${replacement}/g\")\n        done\n        info_msg \"$(printf 'did you mean \"%b%b%b\" ?\\n' \"$B\" \"$did_you_mean\" \"$N\")\"\n    fi\nfi\n\n# loops to spin wheels until an answer has been found\n# if all the launched processes exit without an answer being found\n# script exits with a \"No Result!\" message\nwhile [ $answers_found -eq 0 ]; do\n    for waiting1 in $(printf '%b\\n' \"$pids\"); do\n        kill -0 \"$waiting1\" 1>/dev/null 2>&1\n        [ $? -eq 0 ] && break\n        for waiting2 in $(printf '%b\\n' \"$pids\"); do\n            kill -0 \"$waiting2\" 1>/dev/null 2>&1\n            [ $? -eq 0 ] && break 2\n        done\n        error_msg \"No Result!\"\n        $quiet || top_links 1\n        $debug && debug_info\n        exit 1\n    done\ndone\n\n# now we have our first answer, it's time to print it\n# this loops through the child pid list in priority order sending the USR1 kill signal\n# if one has an answer ready that is what gets printed out\nif ! $all; then\n    for lucky_winner in $(printf '%b\\n' \"$pids\"); do\n        [ $printed -gt 0 ] && break\n        kill -0 \"$lucky_winner\" 1>/dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            kill -USR1 \"$lucky_winner\" 1>/dev/null 2>&1\n            short_delay\n        fi\n    done\nfi\n\n# once an answer has been printed and the -a flag isn't active\n# kills all remaining child processes\n# if -a flag is active then it waits until every answer has been printed first\nif ! $all; then\n    for kids in $(printf '%b\\n' \"$pids\"); do\n        kill -0 \"$kids\" 1>/dev/null 2>&1\n        [ $? -eq 0 ] && kill \"$kids\" 1>/dev/null 2>&1\n    done\nfi\n$all && wait\n\n# another small delay as wait sometimes doesn't seem to wait quite long enough\n# for the last answer to be printed before exiting.\nshort_delay 2\n$plus_urls && top_links\n$debug && debug_info\nexit 0\n"
        }
      ]
    }
  ]
}