{
  "metadata": {
    "timestamp": 1736568373395,
    "page": 309,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jacobalberty/unifi-docker",
      "stars": 2209,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".env",
          "type": "blob",
          "size": 0.025390625,
          "content": "COMPOSE_PROJECT_NAME=unifi"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0625,
          "content": "*.sh text eol=lf\n/functions text eol=lf\n/import_cert text eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": ".idea/\n.vscode/\n.DS_Store\nbackup/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.7890625,
          "content": "language: bash\ndist: bionic\nenv:\n global:\n  - DOCKER_REPO=jacobalberty/unifi\nservices:\n - docker\nbefore_install:\n  - sudo rm -rf /var/lib/apt/lists/*\n  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n  - sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) edge\"\n  - sudo apt-get update\n  - sudo apt-get -y -o Dpkg::Options::=\"--force-confnew\" install docker-ce\n  - mkdir -vp ~/.docker/cli-plugins/\n  - curl --silent -L \"https://github.com/docker/buildx/releases/download/v0.4.2/buildx-v0.4.2.linux-amd64\" > ~/.docker/cli-plugins/docker-buildx\n  - chmod a+x ~/.docker/cli-plugins/docker-buildx\ninstall:\n  - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n  - docker buildx create --use\nscript: bash ci.sh\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 3.0390625,
          "content": "FROM golang:1.22-bullseye as permset\nWORKDIR /src\nRUN git clone https://github.com/jacobalberty/permset.git /src && \\\n    mkdir -p /out && \\\n    go build -ldflags \"-X main.chownDir=/unifi\" -o /out/permset\n\nFROM ubuntu:20.04\n\nLABEL maintainer=\"Jacob Alberty <jacob.alberty@foundigital.com>\"\n\nARG DEBIAN_FRONTEND=noninteractive\n\nARG PKGURL=https://dl.ui.com/unifi/9.0.108/unifi_sysvinit_all.deb\n\nENV BASEDIR=/usr/lib/unifi \\\n    DATADIR=/unifi/data \\\n    LOGDIR=/unifi/log \\\n    CERTDIR=/unifi/cert \\\n    RUNDIR=/unifi/run \\\n    ORUNDIR=/var/run/unifi \\\n    ODATADIR=/var/lib/unifi \\\n    OLOGDIR=/var/log/unifi \\\n    CERTNAME=cert.pem \\\n    CERT_PRIVATE_NAME=privkey.pem \\\n    CERT_IS_CHAIN=false \\\n    GOSU_VERSION=1.10 \\\n    BIND_PRIV=true \\\n    RUNAS_UID0=true \\\n    UNIFI_GID=999 \\\n    UNIFI_UID=999\n\n# Install gosu\n# https://github.com/tianon/gosu/blob/master/INSTALL.md\n# This should be integrated with the main run because it duplicates a lot of the steps there\n# but for now while shoehorning gosu in it is seperate\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y gosu; \\\n\trm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /usr/unifi \\\n     /usr/local/unifi/init.d \\\n     /usr/unifi/init.d \\\n     /usr/local/docker\nCOPY docker-entrypoint.sh /usr/local/bin/\nCOPY docker-healthcheck.sh /usr/local/bin/\nCOPY docker-build.sh /usr/local/bin/\nCOPY functions /usr/unifi/functions\nCOPY import_cert /usr/unifi/init.d/\nCOPY pre_build /usr/local/docker/pre_build\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh \\\n && chmod +x /usr/unifi/init.d/import_cert \\\n && chmod +x /usr/local/bin/docker-healthcheck.sh \\\n && chmod +x /usr/local/bin/docker-build.sh \\\n && chmod -R +x /usr/local/docker/pre_build\n\n# Push installing openjdk-8-jre first, so that the unifi package doesn't pull in openjdk-7-jre as a dependency? Else uncomment and just go with openjdk-7.\nRUN set -ex \\\n && mkdir -p /usr/share/man/man1/ \\\n && groupadd -r unifi -g $UNIFI_GID \\\n && useradd --no-log-init -r -u $UNIFI_UID -g $UNIFI_GID unifi \\\n && /usr/local/bin/docker-build.sh \"${PKGURL}\"\n\nCOPY --from=permset /out/permset /usr/local/bin/permset\nRUN chown 0.0 /usr/local/bin/permset && \\\n    chmod +s /usr/local/bin/permset\n\nRUN mkdir -p /unifi && chown unifi:unifi -R /unifi\n\n# Apply any hotfixes that were included\nCOPY hotfixes /usr/local/unifi/hotfixes\n\nRUN chmod +x /usr/local/unifi/hotfixes/* && run-parts /usr/local/unifi/hotfixes\n\nVOLUME [\"/unifi\", \"${RUNDIR}\"]\n\nEXPOSE 6789/tcp 8080/tcp 8443/tcp 8880/tcp 8843/tcp 3478/udp 10001/udp\n\nWORKDIR /unifi\n\nHEALTHCHECK --start-period=5m CMD /usr/local/bin/docker-healthcheck.sh || exit 1\n\n# execute controller using JSVC like original debian package does\nENTRYPOINT [\"/usr/local/bin/docker-entrypoint.sh\"]\n\nCMD [\"unifi\"]\n\n# execute the conroller directly without using the service\n#ENTRYPOINT [\"/usr/bin/java\", \"-Xmx${JVM_MAX_HEAP_SIZE}\", \"-jar\", \"/usr/lib/unifi/lib/ace.jar\"]\n  # See issue #12 on github: probably want to consider how JSVC handled creating multiple processes, issuing the -stop instraction, etc. Not sure if the above ace.jar class gracefully handles TERM signals.\n#CMD [\"start\"]\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.7724609375,
          "content": "# Unifi-in-Docker (unifi-docker)\n\nThis repo contains a Dockerized version of [Ubiqiti Network's](https://www.ubnt.com/) Unifi Controller.\n\n**Why bother?** Using Docker, you can stop worrying about version\nhassles and update notices for\nUnifi Controller, Java, _or_ your OS.\nA Docker container wraps everything into one well-tested bundle.\n\nTo install, a couple lines on the command-line starts the container.\nTo upgrade, just stop the old container, and start up the new.\nIt's really that simple.\n\nThis container has been tested on Ubuntu, Debian, macOS, Windows,\nand even Raspberry Pi hardware.\n\n**Latest Version:** The latest version is shown in the first line\nof the [Current Information](#current-information) table on this page.\n\n## Setting up, Running, Stopping, Upgrading\n\nFirst, install Docker on the \"Docker host\" -\nthe machine that will run the Docker\nand Unifi Controller software.\nUse any of the guides on the internet to install on your Docker host.\nFor Windows, see the [Microsoft guide for installing Docker.](https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-containers)\n\nThen use the following steps to set up the directories\nand start the Docker container running.\n\n### Setting up directories\n\n_One-time setup:_ create the `unifi` directory on the Docker host.\nWithin that directory, create two sub-directories: `data` and `log`.\n\n```bash\ncd # by default, use the home directory\nmkdir -p unifi/data\nmkdir -p unifi/log\n```\n\n_Note:_ By default, this README assumes you will use the home directory\non Linux, Unix, macOS.\nIf you create the directory elsewhere, read the\n[Options section](#options-on-the-command-line)\nbelow to adjust.)\n\n### Running Unifi-in-Docker\n\nEach time you want to start Unifi, use this command.\nEach of the options is [described below.](#options-on-the-command-line)\n\n```bash\ndocker run -d --init \\\n   --restart=unless-stopped \\\n   -p 8080:8080 -p 8443:8443 -p 3478:3478/udp \\\n   -e TZ='Africa/Johannesburg' \\\n   -v ~/unifi:/unifi \\\n   --user unifi \\\n   --name unifi \\\n   jacobalberty/unifi\n```\n\nIn a minute or two, (after Unifi Controller starts up) you can go to\n[https://docker-host-address:8443](https://docker-host-address:8443)\nto complete configuration from the web (initial install) or resume using Unifi Controller.\n\n**Important:** Two points to be aware of when you're setting up your Unifi Controller:\n\n* When your browser initially connects to the link above, you will\nsee a warning about an untrusted certificate.\nIf you are _certain_ that you have typed the address of the\nDocker host correctly, agree to the connection.\n* See the note below about **Override \"Inform Host\" IP** so your\nUnifi devices can \"find\" the Unifi Controller.\n \n### Stopping Unifi-in-Docker\n\nTo change options, stop the Docker container then re-run the `docker run...` command\nabove with the new options.\n_Note:_ The `docker rm unifi` command simply removes the \"name\" from the previous Docker image.\nNo time-consuming rebuild is required.\n\n```bash\ndocker stop unifi\ndocker rm unifi\n```\n### Upgrading Unifi Controller\n\nAll the configuration and other files created by Unifi Controller\nare stored on the Docker host's local disk (`~/unifi` by default.)\nNo information is retained within the container.\nAn upgrade to a new version of Unifi Controller simply retrieves a new Docker container,\nwhich then re-uses the configuration from the local disk.\nThe upgrade process is:\n\n1. **MAKE A BACKUP** on another computer, not the Docker host _(Always, every time...)_\n2. Stop the current container (see above)\n3. Enter `docker run...` with the newer container tag (see [Current Information](#current-information) section below.)\n\n## Options on the Command Line\n\nThe options for the `docker run...` command are:\n\n- `-d` - Detached mode: Unifi-in-Docker runs in the background\n- `--init` - Recommended to ensure processes get reaped when they die\n- `--restart=unless-stopped` - If the container should stop for some reason,\nrestart it unless you issue a `docker stop ...`\n- `-p ...` - Set the ports to pass through to the container.\n`-p 8080:8080 -p 8443:8443 -p 3478:3478/udp`\nis the minimal set for a working Unifi Controller. \n- `-e TZ=...` Set an environment variable named `TZ` with the desired time zone.\nFind your time zone in this \n[list of timezones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)\n- `-e ...` See the [Environment Variables](#environment-variables)\nsection for more environment variables.\n- `-v ...` - Bind the volume `~/unifi` on the Docker host\nto the directory `/unifi`inside the container.\n**These instructions assume you placed the \"unifi\" directory in your home directory.**\nIf you created the directory elsewhere, modify the `~/unifi` part of this option to match.\nSee the [Volumes](#volumes) discussion for other volumes used by Unifi Controller.\n- `--user unifi` - Run as a non-root user. See the [Run as non-root User](#run-as-non-root-user) discussion below\n- `jacobalberty/unifi` - the name of the container to use.\nThe `jacobalberty...` image is retrieved from [Dockerhub.](https://hub.docker.com/r/jacobalberty/unifi)\nThe [Current Information](#current-information) section below discusses the versions/tags that are available.\n\n## Current Information\n\nThe current tested version of unifi-docker is listed in the table below. \nYou can choose the version of Unifi Controller in the `docker run ...` command.\nIn Docker terminology, these versions are specified by \"tags\".\n\nFor example, in this project the container named `jacobalberty/unifi`\n(with no \"tag\")\nprovides the most recent stable release.\nThe table below lists recent versions.\n\nThe `rc` tag (for example, `jacobalberty/unifi:rc`)\nuses the most recent Release Candidate from the UniFi APT repository.\n\nYou may also specify a version number (e.g., `jacobalberty/unifi:stable6`)\nto get a specific version number, as shown in the table below.\n\n_Note:_ In Docker, specifying an image with no tag \n(e.g., `jacobalberty/unifi`) gets the \"latest\" tag.\nFor Unifi-in-Docker, this uses the most recent stable version.\n\n| Tag                                                                                       | Description                                     | Changelog                                                                                                                       |\n|-------------------------------------------------------------------------------------------|-------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| [`latest` `v9.0.108`](https://github.com/jacobalberty/unifi-docker/blob/master/Dockerfile) | Current Stable: Version 9.0.108 as of 2025-06-01  | [Change Log 9.0.108](https://community.ui.com/releases/UniFi-Network-Application-9-0-108/4e4c885a-311f-41b1-ad5d-9b6afcee77f7)     |\n| [`stable-6`](https://github.com/jacobalberty/unifi-docker/blob/stable-6/Dockerfile)       | Final stable version 6 (6.5.55)                 | [Change Log 6.5.55](https://community.ui.com/releases/UniFi-Network-Application-6-5-55/48c64137-4a4a-41f7-b7e4-3bee505ae16e)    |\n| [`stable-5`](https://github.com/jacobalberty/unifi-docker/blob/stable-5/Dockerfile)       | Final stable version 5 (5.4.23)                 | [Change Log 5.14.23](https://community.ui.com/releases/UniFi-Network-Controller-5-14-23/daf90732-30ad-48ee-81e7-1dcb374eba2a)   |\n\n### multiarch\n\nAll available containers now support multiarch with `amd64`, `armhf`, and `arm64` builds included.\n`armhf` for now uses mongodb 3.4, I do not see much of a path forward for `armhf` due\nto the lack of mongodb support for 32 bit arm, but I will\nsupport it as long as feasibly possible, for now that date seems to be expiration of support for ubuntu 18.04.\n\n## Adopting Access Points and Unifi Devices\n\n#### Override \"Inform Host\" IP\n\nFor your Unifi devices to \"find\" the Unifi Controller running in Docker,\nyou _MUST_ override the Inform Host IP\nwith the address of the Docker host computer.\n(By default, the Docker container usually gets the internal address 172.17.x.x\nwhile Unifi devices connect to the (external) address of the Docker host.)\nTo do this:\n\n* Find **Settings -> System -> Other Configuration -> Override Inform Host:** in the Unifi Controller web GUI.\n(It's near the bottom of that page.)\n* Check the \"Enable\" box, and enter the IP address of the Docker host machine. \n* Save settings in Unifi Controller\n* Restart UniFi-in-Docker container with `docker stop ...` and `docker run ...` commands.\n\n_Hint: Port 10001 should be forwareded to make it work._\n\nSee [Side Projects](https://github.com/jacobalberty/unifi-docker/blob/master/Side-Projects.md#other-techniques-for-adoption) for\nother techniques to get Unifi devices to adopt your\nnew Unifi Controller.\n\n## Volumes\n\nUnifi looks for the `/unifi` directory (within the container)\nfor its special purpose subdirectories:\n\n* `/unifi/data` This contains your UniFi configuration data. (formerly: `/var/lib/unifi`) \n\n* `/unifi/log` This contains UniFi log files (formerly: `/var/log/unifi`)\n\n* `/unifi/cert` Place custom SSL certs in this directory. \nFor more information regarding the naming of the certificates,\nsee [Certificate Support](#certificate-support). (formerly: `/var/cert/unifi`)\n\n* `/unifi/init.d`\nYou can place scripts you want to launch every time the container starts in here\n\n* `/var/run/unifi` \nRun information, in general you will not need to touch this volume.\nIt is there to ensure UniFi has a place to write its PID files\n\n### Legacy Volumes\n\nThese are no longer actually volumes, rather they exist for legacy compatibility.\nYou are urged to move to the new volumes ASAP.\n\n* `/var/lib/unifi` New name: `/unifi/data`\n* `/var/log/unifi` New name: `/unifi/log`\n\n## Environment Variables:\n\nYou can pass in environment variables using the `-e` option when you invoke `docker run...`\nSee the `TZ` in the example above.\nOther environment variables:\n\n* `UNIFI_HTTP_PORT`\nThis is the HTTP port used by the Web interface. Browsers will be redirected to the `UNIFI_HTTPS_PORT`.\n**Default: 8080**\n\n* `UNIFI_HTTPS_PORT`\nThis is the HTTPS port used by the Web interface.\n**Default: 8443** \n\n* `PORTAL_HTTP_PORT`\nPort used for HTTP portal redirection.\n**Default: 80** \n\n* `PORTAL_HTTPS_PORT`\nPort used for HTTPS portal redirection.\n**Default: 8843** \n\n* `UNIFI_STDOUT`\nController outputs logs to stdout in addition to server.log\n**Default: unset** \n\n* `TZ`\nTimeZone. (i.e America/Chicago)\n\n* `JVM_MAX_THREAD_STACK_SIZE`\nUsed to set max thread stack size for the JVM\nExample:\n\n   ```\n   --env JVM_MAX_THREAD_STACK_SIZE=1280k\n   ```\n\n   as a fix for [https://community.ubnt.com/t5/UniFi-Routing-Switching/IMPORTANT-Debian-Ubuntu-users-MUST-READ-Updated-06-21/m-p/1968251#M48264](https://community.ubnt.com/t5/UniFi-Routing-Switching/IMPORTANT-Debian-Ubuntu-users-MUST-READ-Updated-06-21/m-p/1968251#M48264)\n\n* `LOTSOFDEVICES`\nEnable this with `true` if you run a system with a lot of devices\nand/or with a low powered system (like a Raspberry Pi).\nThis makes a few adjustments to try and improve performance: \n\n   * enable unifi.G1GC.enabled\n   * set unifi.xms to JVM\\_INIT\\_HEAP\\_SIZE\n   * set unifi.xmx to JVM\\_MAX\\_HEAP\\_SIZE\n   * enable unifi.db.nojournal\n   * set unifi.dg.extraargs to --quiet\n\n   See [the Unifi support site](https://help.ui.com/hc/en-us/articles/115005159588-UniFi-How-to-Tune-the-Network-Application-for-High-Number-of-UniFi-Devices)\nfor an explanation of some of those options.\n**Default: unset** \n\n* `JVM_EXTRA_OPTS`\nUsed to start the JVM with additional arguments.\n**Default: unset** \n\n* `JVM_INIT_HEAP_SIZE`\nSet the starting size of the javascript engine for example: `1024M`\n**Default: unset** \n\n* `JVM_MAX_HEAP_SIZE`\nJava Virtual Machine (JVM) allocates available memory. \nFor larger installations a larger value is recommended. For memory constrained system this value can be lowered. \n**Default: 1024M** \n\n## Exposed Ports\n\nThe Unifi-in-Docker container exposes the following ports.\nA minimal Unifi Controller installation requires you\nexpose the first three with the `-p ...` option.\n\n* 8080/tcp - Device command/control \n* 8443/tcp - Web interface + API \n* 3478/udp - STUN service \n* 8843/tcp - HTTPS portal _(optional)_\n* 8880/tcp - HTTP portal _(optional)_\n* 6789/tcp - Speed Test (unifi5 only) _(optional)_\n* 10001/udp - Used for device discovery _(optional)_\n\nSee [UniFi - Ports Used](https://help.ubnt.com/hc/en-us/articles/218506997-UniFi-Ports-Used) for more information.\n\n## Run as non-root User\n\nThe default container runs Unifi Controller as root.\nThe recommended `docker run...` command above starts\nUnifi Controller so the image runs as `unifi` (non-root)\nuser with the uid/gid 999/999.\nYou can also set your data and logs directories to be\nowned by the proper gid.\n\n_Note:_ When you run as a non-root user,\nyou will not be able to bind to lower ports by default.\n(This would not necessary if you are using the default ports.)\nIf you must do this, also pass the \n`--sysctl net.ipv4.ip_unprivileged_port_start=0`\noption on the `docker run...` to bind to whatever port you wish.\n\n## Certificate Support\n\nTo use custom SSL certs, you must map a volume with the certs to `/unifi/cert`\n\nThey should be named:\n\n```shell\ncert.pem  # The Certificate\nprivkey.pem # Private key for the cert\nchain.pem # full cert chain\n```\n\nIf your certificate or private key have different names, you can set the environment variables `CERTNAME` and `CERT_PRIVATE_NAME` to the name of your certificate/private key, e.g. `CERTNAME=my-cert.pem` and `CERT_PRIVATE_NAME=my-privkey.pem`.\n\nFor letsencrypt certs, we'll autodetect that and add the needed Identrust X3 CA Cert automatically. In case your letsencrypt cert is already the chained certificate, you can set the `CERT_IS_CHAIN` environment variable to `true`, e.g. `CERT_IS_CHAIN=true`. This option also works together with a custom `CERTNAME`.\n\n### Certificates Using Elliptic Curve Algorithms\n\nIf your certs use elliptic curve algorithms, which currently seems to be the default with letsencrypt certs, you might additionally have to set the `UNIFI_ECC_CERT` environment variable to `true`, otherwise clients will fail to establish a secure connection. For example an attempt with `curl` will show:\n\n```shell\n% curl -vvv https://my.server.com:8443\ncurl: (35) error:1404B410:SSL routines:ST_CONNECT:sslv3 alert handshake failure\n```\n\nYou can check your certificate for this with the following command:\n\n```shell\n% openssl x509 -text < cert.pem | grep 'Public Key Algorithm'\n         Public Key Algorithm: id-ecPublicKey\n```\n\nIf the output contains `id-ec` as shown in the example, then your certificate might be affected.\n\n## Additional Information\n\nThis document describes everything you need to get Unifi-in-Docker running.\nThe [Side Projects and Background Info](https://github.com/jacobalberty/unifi-docker/blob/master/Side-Projects.md) page\nprovides more about what we've learned while developing Unifi-in-Docker.\n\n## TODO\n\nThis list is empty for now, please [add your suggestions](https://github.com/jacobalberty/unifi-docker/issues).\n"
        },
        {
          "name": "Side-Projects.md",
          "type": "blob",
          "size": 5.712890625,
          "content": "# Side Projects and Background Info\n\nThe [README.md](./README.md) document describes how to get\nUnifi-in-Docker running for the most common case -\na single easy-to-use container that runs everything.\n\nThis document describes background, side projects,\nor other information we discovered while producing the\nUnifi-in-Docker container. \n\n## Running with separate Mongo container\n\nThe `docker-compose.yml` file in this repository provides a\nsingle command that orchestrates all the actions required\nto bring up Mongo and Unifi Controller in separate containers,\nusing named volumes for important directories.\n\nSimply copy the `docker-compose.yml` file\nto your host computer's local disk\n(or clone this repo) and run:\n\n```bash\ncd <directory with docker-compose.yml>\ndocker-compose up -d \n```\n\n**Setting Options:**\n\n* The `docker-compose.yml` file contains the options\npassed to Unifi Controller when it starts.\nEdit the `docker-compose.yml` file setting its values according to the \n[Options on the command line.](./README.md#options-on-the-command-line)\n* _Optional:_ Add additional `-e <any-environment-variables-you-want>` to the `docker-compose up` line\n\nTo change options to Unifi Controller::\n\n```bash\ncd <directory with docker-compose.yml>\ndocker-compose down # this stops Unifi Controller and MongoDB\n# ... edit the options in the docker-compose.yml file ...\ndocker-compose up ... # to resume operation\n```\n\n### External MongoDB environment variables\n\nThese variables are used to implement support for an [external MongoDB server](https://community.ubnt.com/t5/UniFi-Wireless/External-MongoDB-Server/td-p/1305297) and must all be set in order for this feature to work. Once all are set then the configuration file value for `db.mongo.local` will automatically be set to `false`.\n\n* `DB_URI`\nMaps to `db.mongo.uri`.\n\n* `STATDB_URI`\nMaps to `statdb.mongo.uri`.\n\n* `DB_NAME`\nMaps to `unifi.db.name`.\n\n## Beta Users\n\nThe `beta` image has been updated to support package installation at run time.\nWith this change you can now install the beta releases on more systems,\nsuch as Synology.\nThis should open up access to the beta program for more users of this docker image.\n\n**NOTE:** This Beta image only works if you run as root.\nIt also may need updates to handle permissions to handle the\n`RUNAS_UID0=false` changes.\nIf you have questions, look for or create an issue about this.\n\nIf you would like to submit a new feature for the images,\nthe beta branch is probably a good one to apply it against as well.\nI will be cleaing up the Dockerfile under beta and gradually pushing out\nthe improvements to the other branches.\nSo any major changes should apply cleanly against the `beta` branch.\n\n### Running Beta Builds from the Command Line\n\nUsing the Beta build is pretty easy:\njust substitute the correct URL from the Unifi site\nfor the `PKGURL` parameter,\nand use `jacobalberty/unifi:beta` for the image\nlike this:\n\n```bash\ndocker run -d --init \\\n   --restart=unless-stopped \\\n   -p 8080:8080 -p 8443:8443 -p 3478:3478/udp \\\n   -e TZ='Africa/Johannesburg' \\\n   -v ~/unifi:/unifi \\\n   --name unifi \\\n   -e PKGURL=https://dl.ubnt.com/unifi/5.6.30/unifi_sysvinit_all.deb \\\n   jacobalberty/unifi:beta\n```\n\n### Running the Beta Using `docker-compose.yml` \n\nIn the containers service definition of the `docker-compose.yml` file, replace `image: jacobalberty/unifi` with the following:\n\n```shell\n        image: jacobalberty/unifi:beta\n         environment:\n          PKGURL: https://dl.ubnt.com/unifi/5.6.40/unifi_sysvinit_all.deb\n```\n\nReplace the PKGURL: link with a link to the package you want.\n\n## Init scripts\n\nYou may now place init scripts to be launched during the unifi startup in /usr/local/unifi/init.d to perform any actions unique to your unifi setup. An example bash script to set up certificates is in `/usr/unifi/init.d/import_cert`.\n\n## Other Techniques for Adoption\n\nThe following are not strictly required for Unifi-in-Docker,\nbut they collect information that may be helpful as you\nmove to a new controller instance.\n\n### Use Unifi export and migrate tool\n\nUnifi can export and migrate the APs to a new controller\n[see this article for example.](https://lazyadmin.nl/home-network/migrate-unifi-controller/) \n\n#### SSH Adoption\n\nSSH into the device:\n```\nset-inform http://<docker-host-ip>:8080/inform\n```\n\n#### Force Migration\n\nForce an AP to migrate using [this Unifi community article.](https://community.ui.com/questions/Migrating-UNIFI-APs-to-new-controller/9ca9d8e9-780d-404d-84df-e7762cb810fd)\n\n#### Older versions of Unifi Controller\n\nOlder Unifi Controllers use a different name for the \"Override Inform Host option\".\nLook for **Settings -> Controller:**\nEnter the IP address of the Docker host machine in \"Controller Hostname/IP\",\nand check the \"Override inform host with controller hostname/IP\". \n\n#### Other Options\n\nYou can see more options on the [UniFi website](https://help.ubnt.com/hc/en-us/articles/204909754-UniFi-Layer-3-methods-for-UAP-adoption-and-management)\n\n### Layer 2 Adoption\n\nThe layer 3 techniques above should be all you need to get new APs to adopt your controller running in Docker.\nYou can also configure the Docker instance so that its IP address matches its host address so that Layer 2 adoption works\nusing either of these settings.\n\n#### Host Networking\n\nIf you launch the container using host networking \\(With the `--net=host` parameter on `docker run`\\) Layer 2 adoption works as if the controller is installed on the host.\n\n#### Bridge Networking\n\nIt is possible to configure the `macvlan` driver to bridge your container to the host's networking adapter.\nSpecific instructions for this container are not yet available but you can read a write-up for docker at\n[collabnix.com/docker-17-06-swarm-mode-now-with-macvlan-support](http://collabnix.com/docker-17-06-swarm-mode-now-with-macvlan-support/).\n"
        },
        {
          "name": "ci.sh",
          "type": "blob",
          "size": 0.8916015625,
          "content": "#!/bin/sh\n\ngetTags() {\n  BRANCH=\"${TRAVIS_BRANCH:-latest}\"\n  if [ $BRANCH = 'master' ]; then\n    BRANCH=latest\n  fi\n  echo --tag $DOCKER_REPO:$BRANCH\n  for tag in $DOCKER_TAGS; do\n    echo --tag $DOCKER_REPO:$tag\n  done\n}\n\nif [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then\n  docker buildx build \\\n    --progress plain \\\n    --platform linux/arm/v7,linux/arm64/v8,linux/amd64 \\\n    .\n\n  docker build -t unifi:latest .\n\n  docker run -d -p 8443:8443 -p 8080:8080 -e PKGURL --name unifi unifi:latest\n  docker ps | grep -q unifi\n  docker logs unifi\n  sleep 10 && curl --connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 60 -kILs --fail http://127.0.0.1:8080 || exit 1\n  exit $?\nfi\necho $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin &> /dev/null\ndocker buildx build \\\n  --progress plain \\\n  --platform linux/arm/v7,linux/arm64/v8,linux/amd64 \\\n  $(getTags) \\\n  --push \\\n  .\n"
        },
        {
          "name": "docker-build.sh",
          "type": "blob",
          "size": 1.7744140625,
          "content": "#!/usr/bin/env bash\n\n# fail on error\nset -e\n\n# Retry 5 times with a wait of 10 seconds between each retry\ntryfail() {\n    for i in $(seq 1 5);\n        do [ $i -gt 1 ] && sleep 10; $* && s=0 && break || s=$?; done;\n    (exit $s)\n}\n\n# Try multiple keyservers in case of failure\naddKey() {\n    for server in $(shuf -e ha.pool.sks-keyservers.net \\\n        hkp://p80.pool.sks-keyservers.net:80 \\\n        keyserver.ubuntu.com \\\n        hkp://keyserver.ubuntu.com:80 \\\n        pgp.mit.edu) ; do \\\n        if apt-key adv --keyserver \"$server\" --recv \"$1\"; then\n            exit 0\n        fi\n    done\n    return 1\n}\n\nif [ \"x${1}\" == \"x\" ]; then\n    echo please pass PKGURL as an environment variable\n    exit 0\nfi\n\napt-get update\napt-get install -qy --no-install-recommends \\\n    apt-transport-https \\\n    curl \\\n    dirmngr \\\n    gpg \\\n    gpg-agent \\\n    openjdk-17-jre-headless \\\n    procps \\\n    libcap2-bin \\\n    tzdata\necho 'deb https://www.ui.com/downloads/unifi/debian stable ubiquiti' | tee /etc/apt/sources.list.d/100-ubnt-unifi.list\ntryfail apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 06E85760C0A52C50\n\nif [ -d \"/usr/local/docker/pre_build/$(dpkg --print-architecture)\" ]; then\n    find \"/usr/local/docker/pre_build/$(dpkg --print-architecture)\" -type f -exec '{}' \\;\nfi\n\ncurl -L -o ./unifi.deb \"${1}\"\napt -qy install ./unifi.deb\nrm -f ./unifi.deb\nchown -R unifi:unifi /usr/lib/unifi\nrm -rf /var/lib/apt/lists/*\n\nrm -rf ${ODATADIR} ${OLOGDIR} ${ORUNDIR} ${BASEDIR}/data ${BASEDIR}/run ${BASEDIR}/logs\nmkdir -p ${DATADIR} ${LOGDIR} ${RUNDIR}\nln -s ${DATADIR} ${BASEDIR}/data\nln -s ${RUNDIR} ${BASEDIR}/run\nln -s ${LOGDIR} ${BASEDIR}/logs\nln -s ${DATADIR} ${ODATADIR}\nln -s ${LOGDIR} ${OLOGDIR}\nln -s ${RUNDIR} ${ORUNDIR}\nmkdir -p /var/cert ${CERTDIR}\nln -s ${CERTDIR} /var/cert/unifi\n\nrm -rf \"${0}\"\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 1.4755859375,
          "content": "version: '2.3'\nservices:\n  mongo:\n    image: mongo:3.6\n    container_name: ${COMPOSE_PROJECT_NAME}_mongo\n    networks:\n      - unifi\n    restart: always\n    volumes:\n      - db:/data/db\n      - dbcfg:/data/configdb\n  controller:\n    image: \"jacobalberty/unifi:${TAG:-latest}\"\n    container_name: ${COMPOSE_PROJECT_NAME}_controller\n    depends_on:\n      - mongo\n    init: true\n    networks:\n      - unifi\n    restart: always\n    volumes:\n      - dir:/unifi\n      - data:/unifi/data\n      - log:/unifi/log\n      - cert:/unifi/cert\n      - init:/unifi/init.d\n      - run:/var/run/unifi\n      # Mount local folder for backups and autobackups\n      - ./backup:/unifi/data/backup\n    user: unifi\n    sysctls:\n      net.ipv4.ip_unprivileged_port_start: 0\n    environment:\n      DB_URI: mongodb://mongo/unifi\n      STATDB_URI: mongodb://mongo/unifi_stat\n      DB_NAME: unifi\n    ports:\n      - \"3478:3478/udp\" # STUN\n      - \"6789:6789/tcp\" # Speed test\n      - \"8080:8080/tcp\" # Device/ controller comm.\n      - \"8443:8443/tcp\" # Controller GUI/API as seen in a web browser\n      - \"8880:8880/tcp\" # HTTP portal redirection\n      - \"8843:8843/tcp\" # HTTPS portal redirection\n      - \"10001:10001/udp\" # AP discovery\n  logs:\n    image: bash\n    container_name: ${COMPOSE_PROJECT_NAME}_logs\n    depends_on:\n      - controller\n    command: bash -c 'tail -F /unifi/log/*.log'\n    restart: always\n    volumes:\n      - log:/unifi/log\n\nvolumes:\n  db:\n  dbcfg:\n  data:\n  log:\n  cert:\n  init:\n  dir:\n  run:\n\nnetworks:\n  unifi:\n"
        },
        {
          "name": "docker-entrypoint.sh",
          "type": "blob",
          "size": 6.330078125,
          "content": "#!/usr/bin/env bash\n\n. /usr/unifi/functions\n\n# Check that any included hotfixes have been properly applied and exit if not\nif ! validate; then\n  echo \"Missing an included hotfix\"\n  exit 1\nfi\n\nif [ -x /usr/local/bin/docker-build.sh ]; then\n    /usr/local/bin/docker-build.sh \"${PKGURL}\"\nfi\n\nexit_handler() {\n    log \"Exit signal received, shutting down\"\n    java -jar ${BASEDIR}/lib/ace.jar stop\n    for i in `seq 1 10` ; do\n        [ -z \"$(pgrep -f ${BASEDIR}/lib/ace.jar)\" ] && break\n        # graceful shutdown\n        [ $i -gt 1 ] && [ -d ${BASEDIR}/run ] && touch ${BASEDIR}/run/server.stop || true\n        # savage shutdown\n        [ $i -gt 7 ] && pkill -f ${BASEDIR}/lib/ace.jar || true\n        sleep 1\n    done\n    # shutdown mongod\n    if [ -f ${MONGOLOCK} ]; then\n        mongo localhost:${MONGOPORT} --eval \"db.getSiblingDB('admin').shutdownServer()\" >/dev/null 2>&1\n    fi\n    exit ${?};\n}\n\ntrap 'kill ${!}; exit_handler' SIGHUP SIGINT SIGQUIT SIGTERM\n\n[ \"x${JAVA_HOME}\" != \"x\" ] || set_java_home\n\n\n# vars similar to those found in unifi.init\nMONGOPORT=27117\n\nCODEPATH=${BASEDIR}\nDATALINK=${BASEDIR}/data\nLOGLINK=${BASEDIR}/logs\nRUNLINK=${BASEDIR}/run\n\nDIRS=\"${RUNDIR} ${LOGDIR} ${DATADIR} ${BASEDIR}\"\n\nJVM_MAX_HEAP_SIZE=${JVM_MAX_HEAP_SIZE:-1024M}\n#JVM_INIT_HEAP_SIZE=\n\n#JAVA_ENTROPY_GATHER_DEVICE=\n#UNIFI_JVM_EXTRA_OPTS=\n#ENABLE_UNIFI=yes\n\n\nMONGOLOCK=\"${DATAPATH}/db/mongod.lock\"\nJVM_EXTRA_OPTS=\"${JVM_EXTRA_OPTS} --add-opens=java.base/java.time=ALL-UNNAMED -Dunifi.datadir=${DATADIR} -Dunifi.logdir=${LOGDIR} -Dunifi.rundir=${RUNDIR}\"\nPIDFILE=/var/run/unifi/unifi.pid\n\nif [ ! -z \"${JVM_MAX_HEAP_SIZE}\" ]; then\n  JVM_EXTRA_OPTS=\"${JVM_EXTRA_OPTS} -Xmx${JVM_MAX_HEAP_SIZE}\"\nfi\n\nif [ ! -z \"${JVM_INIT_HEAP_SIZE}\" ]; then\n  JVM_EXTRA_OPTS=\"${JVM_EXTRA_OPTS} -Xms${JVM_INIT_HEAP_SIZE}\"\nfi\n\nif [ ! -z \"${JVM_MAX_THREAD_STACK_SIZE}\" ]; then\n  JVM_EXTRA_OPTS=\"${JVM_EXTRA_OPTS} -Xss${JVM_MAX_THREAD_STACK_SIZE}\"\nfi\n\n\nJVM_OPTS=\"${JVM_EXTRA_OPTS}\n  -Djava.awt.headless=true\n  -Dfile.encoding=UTF-8\"\n\n# Cleaning /var/run/unifi/* See issue #26, Docker takes care of exlusivity in the container anyway.\nrm -f /var/run/unifi/unifi.pid\n\nrun-parts /usr/local/unifi/init.d\nrun-parts /usr/unifi/init.d\n\nif [ -d \"/unifi/init.d\" ]; then\n    run-parts \"/unifi/init.d\"\nfi\n\n# Used to generate simple key/value pairs, for example system.properties\nconfSet () {\n  file=$1\n  key=$2\n  value=$3\n  if [ \"$newfile\" != true ] && grep -q \"^${key} *=\" \"$file\"; then\n    ekey=$(echo \"$key\" | sed -e 's/[]\\/$*.^|[]/\\\\&/g')\n    evalue=$(echo \"$value\" | sed -e 's/[\\/&]/\\\\&/g')\n    sed -i \"s/^\\(${ekey}\\s*=\\s*\\).*$/\\1${evalue}/\" \"$file\"\n  else\n    echo \"${key}=${value}\" >> \"$file\"\n  fi\n}\n\nconfFile=\"${DATADIR}/system.properties\"\nif [ -e \"$confFile\" ]; then\n  newfile=false\nelse\n  newfile=true\nfi\n\ndeclare -A settings\n\nh2mb() {\n  awkcmd='\n    /[0-9]$/{print $1/1024/1024;next};\n    /[mM]$/{printf \"%u\\n\", $1;next};\n    /[kK]$/{printf \"%u\\n\", $1/1024;next}\n    /[gG]$/{printf \"%u\\n\", $1*1024;next}\n  '\n  echo $1 | awk \"${awkcmd}\"\n}\n\nif ! [[ -z \"$LOTSOFDEVICES\" ]]; then\n  settings[\"unifi.G1GC.enabled\"]=\"true\"\n  settings[\"unifi.xms\"]=\"$(h2mb $JVM_INIT_HEAP_SIZE)\"\n  settings[\"unifi.xmx\"]=\"$(h2mb ${JVM_MAX_HEAP_SIZE:-1024M})\"\n  # Reduce MongoDB I/O (issue #300)\n  settings[\"unifi.db.nojournal\"]=\"true\"\n  settings[\"unifi.db.extraargs\"]=\"--quiet\"\nfi\n\n# Implements issue #30\nif ! [[ -z \"$DB_URI\" || -z \"$STATDB_URI\" || -z \"$DB_NAME\" ]]; then\n  settings[\"db.mongo.local\"]=\"false\"\n  settings[\"db.mongo.uri\"]=\"$DB_URI\"\n  settings[\"statdb.mongo.uri\"]=\"$STATDB_URI\"\n  settings[\"unifi.db.name\"]=\"$DB_NAME\"\nfi\n\nif ! [[ -z \"$PORTAL_HTTP_PORT\"  ]]; then\n  settings[\"portal.http.port\"]=\"$PORTAL_HTTP_PORT\"\nfi\n\nif ! [[ -z \"$PORTAL_HTTPS_PORT\"  ]]; then\n  settings[\"portal.https.port\"]=\"$PORTAL_HTTPS_PORT\"\nfi\n\nif ! [[ -z \"$UNIFI_HTTP_PORT\"  ]]; then\n  settings[\"unifi.http.port\"]=\"$UNIFI_HTTP_PORT\"\nfi\n\nif ! [[ -z \"$UNIFI_HTTPS_PORT\"  ]]; then\n  settings[\"unifi.https.port\"]=\"$UNIFI_HTTPS_PORT\"\nfi\n\nif [[ \"$UNIFI_ECC_CERT\" == \"true\" ]]; then\n  settings[\"unifi.https.sslEnabledProtocols\"]=\"TLSv1.2\"\n  settings[\"unifi.https.ciphers\"]=\"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\"\nfi\n\nif [[ \"$UNIFI_STDOUT\" == \"true\" ]]; then\n  settings[\"unifi.logStdout\"]=\"true\"\nfi\n\nUNIFI_CMD=\"java ${JVM_OPTS} -jar ${BASEDIR}/lib/ace.jar start\"\n\nif [ \"$EUID\" -ne 0 ] && command -v permset &> /dev/null\nthen\n  permset\nfi\n\n# controller writes to relative path logs/server.log\ncd ${BASEDIR}\n\nCUID=$(id -u)\n\nif [[ \"${@}\" == \"unifi\" ]]; then\n    # keep attached to shell so we can wait on it\n    log 'Starting unifi controller service.'\n    for dir in \"${DATADIR}\" \"${LOGDIR}\"; do\n        if [ ! -d \"${dir}\" ]; then\n            if [ \"${UNSAFE_IO}\" == \"true\" ]; then\n                rm -rf \"${dir}\"\n            fi\n            mkdir -p \"${dir}\"\n        fi\n    done\n    for key in \"${!settings[@]}\"; do\n      confSet \"$confFile\" \"$key\" \"${settings[$key]}\"\n    done\n    if [ \"${RUNAS_UID0}\" == \"true\" ] || [ \"${CUID}\" != \"0\" ]; then\n        if [ \"${CUID}\" == 0 ]; then\n            log 'WARNING: Running UniFi in insecure (root) mode'\n        fi\n        ${UNIFI_CMD} &\n    elif [ \"${RUNAS_UID0}\" == \"false\" ]; then\n        if [ \"${BIND_PRIV}\" == \"true\" ]; then\n            if setcap 'cap_net_bind_service=+ep' \"${JAVA_HOME}/bin/java\"; then\n                sleep 1\n            else\n                log \"ERROR: setcap failed, can not continue\"\n                log \"ERROR: You may either launch with -e BIND_PRIV=false and only use ports >1024\"\n                log \"ERROR: or run this container as root with -e RUNAS_UID0=true\"\n                exit 1\n            fi\n        fi\n        if [ \"$(id unifi -u)\" != \"${UNIFI_UID}\" ] || [ \"$(id unifi -g)\" != \"${UNIFI_GID}\" ]; then\n            log \"INFO: Changing 'unifi' UID to '${UNIFI_UID}' and GID to '${UNIFI_GID}'\"\n            usermod -o -u ${UNIFI_UID} unifi && groupmod -o -g ${UNIFI_GID} unifi\n        fi\n        # Using a loop here so I can check more directories easily later\n        for dir in ${DIRS}; do\n            if [ \"$(stat -c '%u' \"${dir}\")\" != \"${UNIFI_UID}\" ]; then\n                chown -R \"${UNIFI_UID}:${UNIFI_GID}\" \"${dir}\"\n            fi\n        done\n        gosu unifi:unifi ${UNIFI_CMD} &\n    fi\n    wait\n    log \"WARN: unifi service process ended without being signaled? Check for errors in ${LOGDIR}.\" >&2\nelse\n    log \"Executing: ${@}\"\n    exec ${@}\nfi\nexit 1\n"
        },
        {
          "name": "docker-healthcheck.sh",
          "type": "blob",
          "size": 0.2607421875,
          "content": "#!/usr/bin/env bash\n\nSYSPROPS_FILE=${DATADIR}/system.properties\nif [ -f \"${SYSPROPS_FILE}\" ]; then\n    SYSPROPS_PORT=`grep \"^unifi.https.port=\" ${SYSPROPS_FILE} | cut -d'=' -f2`\nfi\nPORT=${SYSPROPS_PORT:-8443}\n\ncurl --max-time 5 -kILs --fail https://localhost:${PORT}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "functions",
          "type": "blob",
          "size": 0.9443359375,
          "content": "#!/usr/bin/env bash\n\nlog() {\n    echo \"$(date +\"[%Y-%m-%d %T,%3N]\") <docker-entrypoint> $*\"\n}\n\nset_java_home() {\n    JAVA_HOME=$(readlink -f /usr/bin/java | sed \"s:/jre/bin/java::\")\n    if [ ! -d \"${JAVA_HOME}\" ]; then\n        # For some reason readlink failed so lets just make some assumptions instead\n        # We're assuming openjdk 8 since thats what we install in Dockerfile\n        arch=`dpkg --print-architecture 2>/dev/null`\n        JAVA_HOME=/usr/lib/jvm/java-17-openjdk-${arch}\n    fi\n}\n\ninstPkg() {\n    for pkg in $*; do\n        if [ $(dpkg-query -W -f='${Status}' \"${pkg}\" 2>/dev/null | grep -c \"ok installed\") -eq 0 ];\n        then\n            apt-get -qy install \"${pkg}\";\n        fi\n    done\n}\n\n# Validate that any included hotfixes have been applied\nvalidate() (\n  shopt -s nullglob\n  for i in /usr/local/unifi/hotfixes/*-validate.md5sum; do\n    md5sum -c \"$i\" > /dev/null 2>&1 || return 1\n    echo \"Hotfix validated: $(basename ${i::-16})\"\n  done\n)\n"
        },
        {
          "name": "hotfixes",
          "type": "tree",
          "content": null
        },
        {
          "name": "import_cert",
          "type": "blob",
          "size": 4.4091796875,
          "content": "#!/usr/bin/env bash\n\nPATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n\n. /usr/unifi/functions\n\nif [[ ! -d \"${CERTDIR}\" || ! -f \"${CERTDIR}/${CERTNAME}\" ]]; then\n    exit 0\nfi\n\nlog 'Cert directory found. Checking Certs'\n\nif `md5sum -c \"${CERTDIR}/${CERTNAME}.md5\" &>/dev/null`; then\n    log \"Cert has not changed, not updating controller.\"\n    exit 0\nelse\n    if [ ! -e \"${DATADIR}/keystore\" ]; then\n        log \"WARN: Missing keystore, creating a new one\"\n\n        if [ ! -d \"${DATADIR}\" ]; then\n            log \"Missing data directory, creating...\"\n            mkdir \"${DATADIR}\"\n        fi\n\n        keytool -genkey -keyalg RSA -alias unifi -keystore \"${DATADIR}/keystore\" \\\n            -storepass aircontrolenterprise -keypass aircontrolenterprise -validity 1825 \\\n            -keysize 4096 -dname \"cn=UniFi\"\n    fi\n\n    TEMPFILE=$(mktemp)\n    TMPLIST=\"${TEMPFILE}\"\n    CERTTEMPFILE=$(mktemp)\n    TMPLIST+=\" ${CERTTEMPFILE}\"\n    CERTURI=$(openssl x509 -noout -ocsp_uri -in \"${CERTDIR}/${CERTNAME}\")\n    # Identrust cross-signed CA cert needed by the java keystore for import.\n    # Can get original here: https://www.identrust.com/certificates/trustid/root-download-x3.html\n    cat > \"${CERTTEMPFILE}\" <<'_EOF'\n-----BEGIN CERTIFICATE-----\nMIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA/\nMSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT\nDkRTVCBSb290IENBIFgzMB4XDTAwMDkzMDIxMTIxOVoXDTIxMDkzMDE0MDExNVow\nPzEkMCIGA1UEChMbRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3QgQ28uMRcwFQYDVQQD\nEw5EU1QgUm9vdCBDQSBYMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\nAN+v6ZdQCINXtMxiZfaQguzH0yxrMMpb7NnDfcdAwRgUi+DoM3ZJKuM/IUmTrE4O\nrz5Iy2Xu/NMhD2XSKtkyj4zl93ewEnu1lcCJo6m67XMuegwGMoOifooUMM0RoOEq\nOLl5CjH9UL2AZd+3UWODyOKIYepLYYHsUmu5ouJLGiifSKOeDNoJjj4XLh7dIN9b\nxiqKqy69cK3FCxolkHRyxXtqqzTWMIn/5WgTe1QLyNau7Fqckh49ZLOMxt+/yUFw\n7BZy1SbsOFU5Q9D8/RhcQPGX69Wam40dutolucbY38EVAjqr2m7xPi71XAicPNaD\naeQQmxkqtilX4+U9m5/wAl0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNV\nHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFMSnsaR7LHH62+FLkHX/xBVghYkQMA0GCSqG\nSIb3DQEBBQUAA4IBAQCjGiybFwBcqR7uKGY3Or+Dxz9LwwmglSBd49lZRNI+DT69\nikugdB/OEIKcdBodfpga3csTS7MgROSR6cz8faXbauX+5v3gTt23ADq1cEmv8uXr\nAvHRAosZy5Q6XkjEGB5YGV8eAlrwDPGxrancWYaLbumR9YbK+rlmM6pZW87ipxZz\nR8srzJmwN0jP41ZL9c8PDHIyh8bwRLtTcm1D9SZImlJnt1ir/md2cXjbDaJWFBM5\nJDGFoqgCWjBH4d1QB7wCCZAA62RjYJsWvIjJEubSfZGL+T0yjWW06XyxV3bqxbYo\nOb8VZRzI9neWagqNdwvYkQsEjgfbKbYK7p2CNTUQ\n-----END CERTIFICATE-----\n_EOF\n\n    log \"Cert has changed, updating controller...\"\n    md5sum \"${CERTDIR}/${CERTNAME}\" > \"${CERTDIR}/${CERTNAME}.md5\"\n    log \"Using openssl to prepare certificate...\"\n    CHAIN=$(mktemp)\n    TMPLIST+=\" ${CHAIN}\"\n\n    if [[ \"${CERTURI}\" == *\"letsencrypt\"* && \"$CERT_IS_CHAIN\" == \"true\" ]]; then\n        awk 1 \"${CERTTEMPFILE}\" \"${CERTDIR}/${CERTNAME}\" >> \"${CHAIN}\"\n    elif [[ \"${CERTURI}\" == *\"letsencrypt\"* ]]; then\n        awk 1 \"${CERTTEMPFILE}\" \"${CERTDIR}/chain.pem\" \"${CERTDIR}/${CERTNAME}\" >> \"${CHAIN}\"\n    elif [[ \"${CERTURI}\" == *\"lencr.org\"* && \"$CERT_IS_CHAIN\" == \"true\" ]]; then\n        awk 1 \"${CERTTEMPFILE}\" \"${CERTDIR}/${CERTNAME}\" >> \"${CHAIN}\"\n    elif [[ \"${CERTURI}\" == *\"lencr.org\"* ]]; then\n        awk 1 \"${CERTTEMPFILE}\" \"${CERTDIR}/chain.pem\" \"${CERTDIR}/${CERTNAME}\" >> \"${CHAIN}\"\n    elif [[ \"$CERT_IS_CHAIN\" == \"true\" ]]; then\n        cat \"${CERTDIR}/${CERTNAME}\" >> \"${CHAIN}\"\n    elif [[ -f \"${CERTDIR}/ca.pem\" ]]; then\n        awk 1 \"${CERTDIR}/ca.pem\" \"${CERTDIR}/chain.pem\" \"${CERTDIR}/${CERTNAME}\" >> \"${CHAIN}\"\n    elif [[ -f \"${CERTDIR}/chain.pem\" ]]; then\n        awk 1 \"${CERTDIR}/chain.pem\" \"${CERTDIR}/${CERTNAME}\" >> \"${CHAIN}\"\n    else\n        cat \"${CERTDIR}/${CERTNAME}\" >> \"${CHAIN}\"\n    fi\n   openssl pkcs12 -export  -passout pass:aircontrolenterprise \\\n        -in \"${CHAIN}\" \\\n        -inkey \"${CERTDIR}/${CERT_PRIVATE_NAME}\" \\\n        -out \"${TEMPFILE}\" -name unifi\n    log \"Removing existing certificate from Unifi protected keystore...\"\n    keytool -delete -alias unifi -keystore \"${DATADIR}/keystore\" \\\n        -deststorepass aircontrolenterprise\n    log \"Inserting certificate into Unifi keystore...\"\n    keytool -trustcacerts -importkeystore \\\n        -deststorepass aircontrolenterprise \\\n        -destkeypass aircontrolenterprise \\\n        -destkeystore \"${DATADIR}/keystore\" \\\n        -srckeystore \"${TEMPFILE}\" -srcstoretype PKCS12 \\\n        -srcstorepass aircontrolenterprise \\\n        -alias unifi\n    log \"Cleaning up temp files\"\n    for file in ${TMPLIST}; do\n        rm -f \"${file}\"\n    done\n    log \"Done!\"\nfi\n"
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.03125,
          "content": "Copyright (c) 2021 Jacob Alberty\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "pre_build",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}