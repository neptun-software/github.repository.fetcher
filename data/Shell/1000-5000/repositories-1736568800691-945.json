{
  "metadata": {
    "timestamp": 1736568800691,
    "page": 945,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk0OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tmux-plugins/tmux-logging",
      "stars": 1063,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1708984375,
          "content": "# Force text files to have unix eols, so Windows/Cygwin does not break them\n*.* eol=lf\n\n# Except for images because then on checkout the files have been altered.\n*.png binary\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.8193359375,
          "content": "# Changelog\n\n### master\n\n### v2.1.0, 2015-03-18\n- `capture-pane` gets a `-J` flag. It joins wrapped lines and preserves trailing\n  spaces at each line's end.\n- when capturing whole history, do not guess its size, but get it from\n  `#{history_limit}` format flag\n\n### v2.0.0, 2015-03-14\n- update readme\n- extract default keys and key options to `variables.sh` file\n- require tmux version 1.9 or greater to use the plugin\n- change all internal variable names (BREAKING CHANGE!)\n- change internal script names\n- lot of internal refactoring\n\n### v1.0.0, 2014-11-09\n- improve `capture-pane`. It is now piped directly to the target file.\n\n### v0.0.2, 2014-08-26\n- add other plugins list to the README\n- update readme to reflect github organization change\n- add a 'clear pane history' key binding\n\n### v0.0.1, 2014-06-02\n\n- first working release\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0302734375,
          "content": "Copyright (C) 2014 Bruno Sutic\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.1103515625,
          "content": "# Tmux Logging\n\nFeatures:\n\n1. Logging of all output in the current pane<br/>\n   After you start logging, everything that's typed and all the output will be\n   saved to a file. Convenient for keeping track of your work.\n2. Current pane \"Screen Capture\"<br/>\n   All the text visible in the current pane is saved to a file. Like a\n   screenshot, but textual.\n3. Save a complete history of current pane<br/>\n   Everything that has been typed and all the output since the creation of the\n   current pane can be saved to a file.\n4. Clear pane history with `prefix + alt + c`\n\nTested and working on Linux, OSX and Cygwin.\n\n### 1. Logging\n\nToggle (start/stop) logging in the current pane.\n\n* Key binding: `prefix + shift + p`\n* File name format: `tmux-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log`\n* File path: `$HOME` (user home dir)\n  * Example file: `~/tmux-my-session-0-1-20140527T165614.log`\n\n### 2. \"Screen Capture\"\n\nSave visible text, in the current pane. Equivalent of a \"textual screenshot\".\n\n* Key binding: `prefix + alt + p`\n* File name format: `tmux-screen-capture-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log`\n* File path: `$HOME` (user home dir)\n  * Example file: `tmux-screen-capture-my-session-0-1-20140527T165614.log`\n\n### 3. Save complete history\n\nSave complete pane history to a file. Convenient if you retroactively remember\nyou need to log/save all the work.\n\n* Key binding: `prefix + alt + shift + p`\n* File name format: `tmux-history-#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log`\n* File path: `$HOME` (user home dir)\n  * Example file: `tmux-history-my-session-0-1-20140527T165614.log`\n\n**NOTE**: this functionality depends on the value of `history-limit` - the number\nof lines Tmux keeps in the scrollback buffer. Only what Tmux kept will also be saved,\nto a file.\n\nUse `set -g history-limit 50000` in .tmux.conf, with modern computers\nit is ok to set this option to a high number.\n\n### 4. Clear pane history\n\nKey binding: `prefix + alt + c`\n\nThis is just a convenience key binding.\n\n### Installation with [Tmux Plugin Manager](https://github.com/tmux-plugins/tpm) (recommended)\n\nAdd plugin to the list of TPM plugins in `.tmux.conf`:\n\n    set -g @plugin 'tmux-plugins/tmux-logging'\n\nHit `prefix + I` to fetch the plugin and source it.\n\nYou should now have all `tmux-logging` key bindings defined.\n\n### Manual Installation\n\nClone the repo:\n\n    $ git clone https://github.com/tmux-plugins/tmux-logging ~/clone/path\n\nAdd this line to the bottom of `.tmux.conf`:\n\n    run-shell ~/clone/path/logging.tmux\n\nReload TMUX environment:\n\n    # type this in terminal\n    $ tmux source-file ~/.tmux.conf\n\nYou should now have all `tmux-logging` key bindings defined.\n\n### Installing `ansifilter` (recommended for OSX users)\n\nIf you're on OSX, it is recommended to install `ansifilter`:\n`$ brew install ansifilter`\n\n[ansifilter](http://www.andre-simon.de/doku/ansifilter/en/ansifilter.php)\nis a program specialized for removing (or working with) ANSI codes.\n\nIt helps with removing ANSI codes from the log. If `ansifilter` is not present,\nANSI codes are removed with `sed`.\n\nThis feature improves the default `pipe-pane` logging mechanism by stripping\nANSI codes. This is how the plain `pipe-pane` log output looks like if you're\nusing terminal with coloring:\n\n![garbled log output](/screenshots/garbled_log_output.png)\n\nGarbled characters are called ANSI codes. They enable colors in terminal, but\nare just making 'noise' in the textual log output.\n\nA user will probably want to filter ANSI codes out of the log. Here's the same\nlog as above when this plugin is used:\n\n![proper log output](/screenshots/proper_log_output.png)\n\n### Configuration Docs\n\n- [Changing default options](docs/configuration.md).\n\n### Other plugins\n\nYou might also find these useful:\n\n- [resurrect](https://github.com/tmux-plugins/tmux-resurrect) - restore tmux\n  environment after system restart\n- [pain control](https://github.com/tmux-plugins/tmux-pain-control) - useful standard\n  bindings for controlling panes\n- [sessionist](https://github.com/tmux-plugins/tmux-sessionist) - lightweight\n  tmux utils for switching and creating sessions\n\n### License\n\n[MIT](LICENSE.md)\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "logging.tmux",
          "type": "blob",
          "size": 0.537109375,
          "content": "#!/usr/bin/env bash\n\nCURRENT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n\nsource \"$CURRENT_DIR/scripts/variables.sh\"\nsource \"$CURRENT_DIR/scripts/shared.sh\"\n\n\nmain() {\n\ttmux bind-key \"$logging_key\" run-shell \"$CURRENT_DIR/scripts/toggle_logging.sh\"\n\ttmux bind-key \"$pane_screen_capture_key\" run-shell \"$CURRENT_DIR/scripts/screen_capture.sh\"\n\ttmux bind-key \"$save_complete_history_key\" run-shell \"$CURRENT_DIR/scripts/save_complete_history.sh\"\n\ttmux bind-key \"$clear_history_key\" run-shell \"$CURRENT_DIR/scripts/clear_history.sh\"\n}\n\nmain\n"
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}