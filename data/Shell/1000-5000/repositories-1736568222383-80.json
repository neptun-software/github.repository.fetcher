{
  "metadata": {
    "timestamp": 1736568222383,
    "page": 80,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sobolevn/git-secret",
      "stars": 3775,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2890625,
          "content": "# Check http://editorconfig.org for more information\n# This is the main config file for this project:\nroot = true\n\n[*]\ncharset = utf-8\nindent_style = space\ntrim_trailing_whitespace = true\nend_of_line = lf\ninsert_final_newline = true\nindent_size = 2\n\n[Makefile]\nindent_style = tab\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.18359375,
          "content": "# Excluding from GitHub languages:\nvendor/ linguist-vendored\n\n# Excluding from GitHub diff:\n*.1 linguist-generated\n*.7 linguist-generated\n\n# Excluding from `git diff`:\n*.1 -diff\n*.7 -diff\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.2001953125,
          "content": "#### joe made this: http://goel.io/joe\n\n#####=== Windows ===#####\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n#####=== Linux ===#####\n*~\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n\n#####=== MacOS ===#####\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n#####=== JetBrains ===#####\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm\n\n*.iml\n\n## Directory-based project format:\n.idea/\n# if you remove the above rule, at least ignore the following:\n\n# User-specific stuff:\n# .idea/workspace.xml\n# .idea/tasks.xml\n# .idea/dictionaries\n\n# Sensitive or high-churn files:\n# .idea/dataSources.ids\n# .idea/dataSources.xml\n# .idea/sqlDataSources.xml\n# .idea/dynamic.xml\n# .idea/uiDesigner.xml\n\n# Gradle:\n# .idea/gradle.xml\n# .idea/libraries\n\n# Mongo Explorer plugin:\n# .idea/mongoSettings.xml\n\n## File-based project format:\n*.ipr\n*.iws\n\n## Plugin-specific files:\n\n# IntelliJ\nout/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\n\n#####=== SublimeText ===#####\n# cache files for sublime text\n*.tmlanguage.cache\n*.tmPreferences.cache\n*.stTheme.cache\n\n# workspace files are user-specific\n*.sublime-workspace\n\n# project files should be checked into the repository, unless a significant\n# proportion of contributors will probably not be using SublimeText\n# *.sublime-project\n\n# sftp configuration file\nsftp-config.json\n\n#####=== Jekyll ===#####\n_site/\n.sass-cache/\n\n#####=== Custom ===#####\n# Logic files:\n.gitsecret/\ngit-secret\n\n# Temporary packages:\ntemp/\n\n# Packaging:\nbuild/\n*.deb\n*.fpm\n\n# Docs:\ndocs/man\ndocs/_posts\ndocs/_includes/install-*.sh\ndocs/_includes/version.txt\nCHANGELOG-RELEASE.md\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 12.5927734375,
          "content": "# Changelog\n\n## {{Next Version}}\n\n### Misc\n\n- NOTE: Arch instructions now say to install from source. Arch tests removed temporarily (#916)\n- NOTE: there is an issue when repo directory (or a parent dir) contains a space (#135)\n- Improve error messaging when we cannot find git repo (#874)\n- Temporarily disable apk builds on alpine (#881)\n- Have `hide -v` show output from gnupg\n- Documentation updates and fixes\n\n\n## 0.5.0\n\n### Features\n\n- Adds `SECRETS_GPG_ARMOR` env variable to use `gpg --armor`\n  when encrypting files, so secret files are stored\n  in text format rather than binary (#631)\n- Allow gnupg permission warnings in `tell`, `hide`, `reveal`, and `removeperson` (#811)\n- `git secret init` now sets `.gitsecret/keys` permission to 0700 (#811)\n- Improve verbose and non-verbose output\n\n### Bugfixes\n\n- Fix adding newlines to `.gitignore` entries (#643)\n- Fix `cat` and `reveal` on named files while in repo subdir (#710)\n- Fix `clean`, `hide`, `reveal` so they only remove marked secret files (#833)\n- Fix for `removeperson` if same email is present multiple times (#638)\n- Correct error message about files missing from .gitignore\n\n### Misc\n\n- Rename `killperson` command to `removeperson` (#684)\n- Improve error messaging decrypting nonexistent files (#706)\n- Improve, expand, correct, and update docs (#699)\n- Update docs for use with CI/CD server (#675)\n- Upgrade bats-core to v1.6.0 (#755)\n- Test, and build RPMS, with Rocky and Alma Linux instead of CentOS (#765)\n- Automate testing code on windows using WSL (#846)\n- Automate testing code on FreeBSD (#455)\n- Improve testing of .gitignore contents (#792)\n- Automate running verbose tests with SECRETS_TEST_VERBOSE=1 (#794)\n- Improve documentation about installing on Windows (#843)\n\n\n## 0.4.0\n\n### Bugfixes\n\n- Escape filenames with special characters before adding to `.gitignore`\n- Better error handling around telling an email twice (#634)\n- Fix for `-P` (#647)\n\n### Misc\n\n- Removed `test-kitchen`\n- Moved from `travis` to GitHub Actions\n- Changed almost all infrastructure code\n- Moved away from Bintray to Artifactory\n- Changes how GitHub Pages work\n- Add security disclaimer for git-secret-killperson\n- Improve documentation about releases\n- Man page improvements\n\n\n## Version 0.3.3\n\n### Bugfixes\n\n- In 'tell', warn about disabled, revoked, expired, or invalid keys (#552, #508, #317, #290, #283, #238)\n- Error if 'tell' is used on an email address with multiple keys (#552)\n- Don't let 'reveal' clobber secret files (#579)\n- Updated test key fixture that had expired (#607)\n\n### Misc\n\n- Improve docs about using gpg with git-secret (#577)\n- Text improvements and More about security in git-secret.7 man page (#603)\n- Reflect changes in ruby bundler during build process\n- Upgrade build process to ansible 2.9\n- Use shellcheck 0.7.1 with CI, not 'latest' (#609)\n- Improve output of `git-secret add`\n\n## Version 0.3.2\n\n### Bugfixes\n\n- Fix mention of version in git-secret add man page (#544)\n\n### Misc\n\n- Update developer docs, especially regarding mac, docker, and test-kitchen (#195)\n- Update man pages to mention version documented (#420)\n\n## Version 0.3.1\n\n### Misc\n\n- Update man pages\n\n## Version 0.3.0\n\n### Features\n\n- Support SECRETS_PINENTRY env var for gnupg --pinentry-mode parameter (#221)\n- Show output from gnupg if 'hide' fails (#516, #202, #317)\n- Add support for Busybox (#478)\n\n### Bugfixes\n\n- Use OSX's mktemp on OSX, even if there's another version in PATH. (#485)\n- Make rsync a build requirement on debian (#500)\n- Use gnupg1, not gnupg2, when tests specify gnupg1 (#241)\n- Note dependencies gawk, bash, and coreutils in linux packages (#493)\n- Handle case of key having no email and a comment (#527)\n- Avoid blank lines from output of 'clean -v'\n\n### Misc\n\n- Improve messaging and logic around deleting tmp files.\n- Add note about secrets and old keys (#499)\n- Transition build process from python 2 to python 3 (#487)\n- Upgrade build process from ansible 2.5 to ansible 2.8\n- Fix build process when installing gnupg2 source deps on Ubuntu\n- Close file descriptor 3 when running gnupg subprocesses (#521)\n- Small optimization in 'hide'\n- Improve code comments\n- Update docs to note that git-secret repos modified by git-secret 0.2.3 and\n  later are not backward compatible with pre-0.2.3 versions of git-secret. (#536)\n\n## Version 0.2.6\n\n### Features\n\n- git-secret is now available in Fedora, link added to README.md. (#315)\n- Support automated testing on windows with Travis CI (#372)\n- Support SECRETS_VERBOSE env var to enable verbosity (#323)\n- Use gpg without --quiet when decrypting in verbose mode (#394)\n- Add -v options to 'tell' and 'reveal', showing gpg output (#320, #395)\n- Change 'init' to never ignore .secret files (#362)\n- 'add' appends filepaths to .gitignore by default (#225)\n- Automate the GitHub release (#411)\n\n### Bugfixes\n\n- Fix 'hide -m' when used as first hide operation (#466)\n- Fix code to respect $TMPDIR when generating tmp files (#451)\n- Be more careful when deleting test files (#360)\n- Use separate directory when testing, instead of using $BATS_TMPDIR directly (#407)\n- Fix 'whoknows -l' and related tests on FreeBSD (#454)\n- Fix git-secret init when used on busybox (#475)\n- Update git-secret.io, fix utils/gh-branch.sh to use 'git all --add' (#344)\n- Fix link to homebrew's git-secret in README.md (#310)\n- Remove diagnostic output from test results (#324)\n- Remove un-needed redirection in 'reveal' (#325)\n- Fix link to current contributors in CONTRIBUTING.md (#331)\n- Fix tests when running from git hooks (#334)\n- Fix typo, remove temp directory in utils/tests.sh (#347)\n- Spelling fixes\n- Fix re: SECRETS_DIR in 'init' and SECRETS_EXTENSION in test_reveal.bats (#364)\n- git-secret will fail if you pass params or filenames that are not understood (#390)\n- Use SECRETS_GPG_COMMAND env var in gpg version check (#389)\n- Add header to git-secret.7 man page, for debian and doc improvement (#386)\n- Respect DESTDIR when installing as per GNU/debian/etc recommendations (#424)\n- Use git check-ignore to test for files ignored by git\n\n### Misc\n\n- Improve docs about hide -m option (#467)\n- Document SECRETS_VERBOSE and improve env var docs (#396)\n- Setting SECRETS_TEST_VERBOSE env var shows debug info during tests (EXPERIMENTAL)\n- Add documentation about how to write tests.\n- Suppress 'cleaning up temp files' messages unless in a verbose mode.\n- Improve git-secret user messaging.\n- Update CHANGELOG.md to mention fix for #281 in v0.2.5 (#311)\n- Add text explaining git-secret Style Guide and Development Philosophy\n- Use Shellcheck on tests/ files, changes for Shellcheck in tests/ (#368)\n- Use Shellcheck on MacOS/osx travis tests (#403)\n- Show commands run by Makefile as per debian upstream recommendations (#386)\n- Upgrade bats-core to v1.1.0, import bats-core into vendor/bats-core (#377)\n- Use gawk to parse emails from gpg output\n- Optimize code that parses keyrings\n- Remove unused code\n\n## Version 0.2.5\n\n### Features\n\n- Add support for FreeBSD (#244)\n- Add -l option to whoknows, which shows key expiration dates (#283)\n- Add -P option (preserve permissions) to reveal and hide (#172)\n- Add -F option (force, changing some errors to warnings) to hide and reveal (#253)\n- Allow user to specify name of secret dir at runtime using SECRETS_DIR env var, and test (#247, #250)\n\n### Bugfixes\n\n- Fix issues with spaces in paths and filenames (#226, #135)\n- Fix issue when 'hide' used in subdir of repo (#230)\n- Fix issues in 'changes' with trailing newlines (#291)\n- Fix 'hide' to only count actually hidden files as hidden (#280)\n- Fixed bugs and improved error messages (#174)\n- Issue error message when unable to hide a secret (#202, #238)\n- Accept gpg key with no name, only an email (#227)\n- Require keys to be specified by email, as documented (#267)\n- Disallow 'git secret tell' or 'killperson' with emails that are not in keyring (also #267)\n\n### Misc\n\n- Added notes about packages and for package maintainers (#281)\n- Improve documentation regarding operation with different versions of GPG (#274, #182)\n- Documentation improvements, error message and text improvements, and typo fixes (#254)\n- git-secret RFC#001 added, documenting a path towards independence from gpg binary formats (#208)\n- Add tests for expired gpg keys, and gpg keys with only emails (#276)\n\n## Version 0.2.4\n\n### Features\n\n- Added `git secret cat` feature (#141)\n\n### Bugfixes\n\n- `git secret hide` and `git secret changes` check for files more carefully (#153, #154)\n\n### Misc\n\n- Documentation and error message improvements (#126, #136, #144, #150)\n- Build and CI fixes (#152, #179, #186, #188, #189)\n- Migrate to `bats-core` bash testing framework\n\n## Version 0.2.3\n\n### Features\n\n- Added `-m` option to `hide` command, files will only be hidden when modifications are detected (#92)\n- Changed how path mappings file works: colon delimited FSDB in `.gitsecret/paths/mapping.cfg', so git-secret\n  can store checksums of hidden files. Note this means git-secret repos modified by git-secret 0.2.3\n  or later are not backward compatible with pre-0.2.3 versions of git-secret. (#92)\n- `git secret init` now adds `random_seed` to `.gitignore` (#93)\n\n### Bugfixes\n\n- Dropped `git check-ignore`, using `git add --dry-run` instead to check for ignored files (#105,#38)\n- Fixed `gnupg` >= 2.1 CI tests (#6)\n\n### Misc\n\n- Now users can run local CI tests using test-kitchen (#6)\n- Migrated travis ci tests to test-kitchen for Linux platforms.\n- Added more `gpg` version to test matrix (#99)\n- Added CentOS to test matrix (#38,#91)\n- All tested Linux platforms now use latest release of `shellcheck`\n- Added Alpine to test matrix, and apk is now built. (#75)\n\n## Version 0.2.2\n\n### Features\n\n- Change how the `usage` command works (#48)\n- Now `git-secret` works from any place inside `git-tree` (#56)\n- Added `-d` option to the `hide` command: it deletes unencrypted files (#62)\n- Added new command `changes` to see the diff between the secret files (#64)\n- Now it is possible to provide multiple emails to the `killperson` command (#73)\n- Now it is possible to provide multiple emails to the `tell` command (#72)\n\n### Bugfixes\n\n- Fixed bug when `_user_required` was not working after re-importing keys (#74)\n- Refactored `hide` and `clean` commands to be shorter\n\n### Misc\n\n- Now every doc in this project refer to `git-secret.io` instead of old `gh-pages` website (#71)\n- Now installation section is removed from main `man` file (#70)\n- Now \"See also\" sections in the `man` pages are clickable (#69)\n- Added \"Manual\" section to the manuals (#61)\n- Added `CentOS` container for `ci` testing (#38)\n- Tests are refactored. Added `clean` command tests, removed a lot of hard-coded things, moved tests execution from `./temp` folder to `/tmp`, added a lot of new check in old tests, and some new test cases (#52)\n- `shellcheck` is now supported with `make lint`\n\n## Version 0.2.1\n\n### Misc\n\n- Added `CONTRIBUTING.md` and `LICENSE.md`.\n- New brand logo in the `README.md`.\n- Added autodeploy to `bintray` in `.travis.yml`.\n- Now everything is tested inside the `docker`-containers and `OSX` (MacOS) images on `travis`.\n- Added `.ci/` folder for continuous integration, refactored `utils/` folder.\n- Everything is `shellcheck`ed (except `tests/`).\n\n## Version 0.2.0\n\n### Features\n\n- Added `changes` command to see the difference between current version of the hidden files and the committed one\n- Added `-f` option to the `reveal` command to remove prompts\n\n### Bugfixes\n\n- Some bugs are fixed\n\n### Misc\n\n- New installation instructions\n- Changed the way files were decrypted, now it is a separate function\n\n## Version 0.1.2\n\n### Features\n\n- Added `-i` option to the `git-secret-add` command, which auto adds unignored files to the `.gitignore`\n\n### Misc\n\n- `.github` templates added\n- Documentation improved with `Configuration` section\n- `Makefile` improvements with `.PHONY` and `install` target\n- Added extra tests: for custom filenames and new features\n\n## Version 0.1.1\n\n### Features\n\n- Added `--dry-run` option to the `git secret` command, which prevents any actions.\n\n### Misc\n\n- Removed animation from docs, now using `asciinema.org`\n- `install_full_fixture()` returns a fingerprint\n- `uninstall_full_fixture()` receives two args\n- Fixed bug when tests were failing with `gpg2`\n- New travis strategy: testing both `gpg` and `gpg2`\n\n## Version 0.1.0\n\n### Features\n\n- Implementation of git secret add\n- Implementation of git secret clean, with -v option\n- Implementation of git secret hide, with -c 'clean' and -v option\n- Implementation of git secret init\n- Implementation of git secret killperson\n- Implementation of git secret list\n- Implementation of git secret remove, with -c option\n- Implementation of git secret reveal, with -d homedir and -p passphrase options\n- Implementation of git secret tell, with -m email and -d homedir options\n- Implementation of git secret usage\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.9404296875,
          "content": "# Contributing\n\nYour contributions are always welcome!\n\n\n## Getting started\n\n1. Create your own or pick an opened issue from the [tracker](https://github.com/sobolevn/git-secret/issues). Take a look at the [`help-wanted` tag](https://github.com/sobolevn/git-secret/labels/help%20wanted)\n\n2. Fork the git-secret repo and then clone the repository using a command like `git clone https://github.com/${YOUR_NAME}/git-secret.git`\n\n3. Make sure that everything works on the current platform by running `make test`.\n   You can also try the experimental `SECRETS_TEST_VERBOSE=1 make test`, which will\n   show you a lot of debug output while the tests are running.\n   Note that 'experimental' features may change or be removed in a future version of `git-secret`.\n\n4. If you want to test on multiple operating systems just push your PR, GitHub Actions will cover everything else\n\nBasically, our `make` file is the only thing you will need to work with this repo.\n\n\n## Process\n\n### Environment\n\nFor development of `git-secret` you should have these tools locally:\n\n- git\n- bash\n- gawk\n- gnupg (or gnupg2), see below if not packaged by your distribution/OS (i.e. MacOS)\n- sha256sum (on freebsd and MacOS `shasum` is used instead)\n- make\n\nTo test `git-secret` you will need:\n\n- [docker](https://www.docker.com/)\n\n### Code style\n\nNew features and changes should aim to be as clear, concise, simple, and consistent\n\n1. clear: make it as obvious as possible what the code is doing\n\n2. concise: your PR should be as few characters (not just lines) of changes as _reasonable_.\n   However, generally choose clarity over being concise.\n   Clarity and conciseness can be in conflict with each other. But\n   it's more important for the code to be understandable than for it to be small.\n   Therefore favor writing clear code over making shorter diffs in your PRs.\n\n3. simple: this dovetails with the previous two items.\n   git-secret is a security product, so it's best to have the code be easy to understand.\n   This also aids future development and helps minimize bugs.\n\n4. consistent: Write code that is consistent with the surrounding code and the rest of the git-secret code base.\n   Every code base has its own conventions and style that develop and accrete over time.\n\n   Consistency also means that the inputs and outputs of git-secret should be as consistent as reasonable\n   with related Unix and git tools, and follow the 'rule of least surprise',\n   also known as the 'principle of least astonishment': <https://en.wikipedia.org/wiki/Principle_of_least_astonishment>\n\nWe wrote this to clarify our thinking about how git-secret should be written.  Of course, these are philosophical goals,\nnot necessities for releasing code, so balancing these four ideals _perfectly_ is both unwarranted and impossible.\n\n### Writing PRs\n\nIf you're planning a large change to `git-secret` (for example, a lot of lines/characters of diffs, affecting multiple commands,\nchanging/adding a lot of behavior, or adding multiple command-line options), it's best to discuss the changes in an Issue first.\nAlso it's often best to implement larger or complex changes as a series of planned-out, smaller PRs,\neach making a small set of specific changes. This facilitates discussions of implementation, which often come to light\nonly after seeing the actual code used to perform a task.\n\nAs mentioned above, we seek to be consistent with surrounding git and Unix tools, so when writing changes to git-secret,\nthink about the input, output, and command-line options that similar Unix commands use.\n\nOur favor toward traditional Unix and git command-style inputs and outputs can also mean it's appropriate to\nlean heavily on git and widely-used Unix command features instead of re-implementing them in code.\n\n### Development Process\n\n1. Make changes to the git secret files that need to be changed\n\n2. When making changes to any files inside `src/`, for changes to take effect you will need to rebuild the `git-secret` script with `make clean && make build`\n\n3. Run `shellcheck` against all your changes with `make lint`.\n   You should also check your changes for spelling errors using 'aspell -c filename'.\n\n4. Add an entry to CHANGELOG.md, referring to the related issue # if appropriate\n\n5. Change the `man` source file(s) (we write them in markdown) in `man/man1` and `man/man7` to document your changes if appropriate\n\n6. Now, add all your files to the commit with `git add --all` and commit changes with `git commit`.\n   Write a good commit message which explains your work\n\n7. When running `git commit` the tests will run automatically, your commit will be canceled if they fail.\n   You can run the tests manually with `make clean build test`.\n\n8. Push to your repository, and make a pull-request against `master` branch. It's ideal to have one commit per pull-request,\nbut don't worry, it's easy to `squash` PRs into a small number of commits when they're merged.\n\n### Branches\n\nWe have two long-live branches: `master` for the git-secret code and man pages, and `gh-pages` for the static web site.\nThe `gh-pages` branch tracks the `master` branch's `docs` folder, and is kept up-to-date using a GitHub Action.\n\nDevelopment looks like this:\n\n> `your-branch` -> `master`\n\n- `master` branch is protected, so only fully tested code goes there. It is also used to create a new `git` tag and a `github` release\n\nBy convention, you can name your branches like `issue-###-short-description`, but that's not required.\nThe `gh-pages` branch is used for the pages at `git-secret.io`. See 'Release Process' below.\n\n### Writing tests\n\n`git-secret` uses [bats-core](https://github.com/bats-core/bats-core) for testing.\nSee the files in tests/ and the `bats-core` documentation for details.\n\nBecause the output of many commands can be affected by the SECRETS_VERBOSE environment\nvariable (which enables verbosity), it's best not to expect a particular number of lines of\noutput from commands.\n\n### Release process\n\nTo create a new release, (you'll first need permission to commit to the repo, of course):\n\nUpdate the content of `CHANGELOG.md` for the release (this should be a matter of changing headers),\nand update the version string in `src/version.sh`.\n\nWhen creating a commit inside the `master` branch (it is usually a documentation and changelog update with the version bump inside `src/version.sh`).\n\nThen, push your code to GitHub. It will start the CI.\n\nAfter all the checks have executed, GitHub Actions will test and build releases for specific platforms.\n\nWhile CI is doing it's building and testing, finish the release on github by pushing the new tag with:\n\n```bash\ngit push --tags\n```\n\nand then go to https://github.com/sobolevn/git-secret/releases to see that the new release is created. It might take some time.\n\n#### GitHub automated releases\n\nWe use GitHub actions to run the release process.\nWe use `artifactory` as an environment for the release.\nYou would need to get a review before release would be possible.\n\nIt can be reproduced locally with `make release`, but you will need `SECRETS_ARTIFACTORY_CREDENTIALS`.\n\nAfter packages are released to https://gitsecret.jfrog.io we trigger `release-ci` workflow to test that installation works correctly.\n\n#### Manual releases\n\nReleases to `brew` are made manually, and involve opening a PR on the [Homebrew Core](https://github.com/Homebrew/homebrew-core) repo .\nTo get started, see the\n[Homebrew docs about Formulae-related PRs](https://docs.brew.sh/How-To-Open-a-Homebrew-Pull-Request#formulae-related-pull-request)\nand `brew bump-formula-pr --help`\n\n### Downstream Packages\n\nThere are several distributions and packaging systems that may already have git-secret packaged for your distribution (although sometimes their versions are not the most current, and we recommend all users upgrade to 0.2.5 or above).\n\n### Notes to Downstream Packagers (Those who make packages for specific OSes/distributions)\n\nFirst of all, thank you for packaging git-secret for your platform! We appreciate it.\n\nWe also would like to welcome you to collaborate or discuss any issues, ideas or thoughts you have about\ngit-secret by submitting [issue report](https://github.com/sobolevn/git-secret/issues)\n(which can also be feature requests) or\n[pull requests](https://help.github.com/en/articles/creating-a-pull-request)\nvia the git repo at\n[git-secret on github](https://github.com/sobolevn/git-secret)\n\nPlease let us know if there are any changes you'd like to see to the source,\npackaging, testing, documentation, or other aspect of git-secret.\nWe look forward to hearing from you.\n\n\n## About GnuPG\n\nHere are some links to gnupg documentation that might be useful for those working with git-secret:\n\n- [GnuPG PDF Documentation](https://www.gnupg.org/documentation/manuals/gnupg.pdf)\n- [GnuPG doc/DETAILS File](https://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=blob;f=doc/DETAILS)\n\n\n## Financial contributions\n\nWe also welcome financial contributions in full transparency on our [open collective](https://opencollective.com/git-secret).\nAnyone can file an expense. If the expense makes sense for the development of the community, it will be \"merged\" in the ledger of our open collective by the core contributors and the person who filed the expense will be reimbursed.\n\n\n## Credits\n\n### Contributors\n\nThank you to all the people who have already contributed\nto `git-secret` via commits to our git repository!\n\n[![List of contributors](https://opencollective.com/git-secret/contributors.svg?width=890&button=0)](https://github.com/sobolevn/git-secret/contributors)\n\n\n### Backers\n\nThank you to all our backers! [[Become a backer](https://opencollective.com/git-secret#backer)]\n\n<object type=\"image/svg+xml\" data=\"https://opencollective.com/git-secret/tiers/backer.svg?avatarHeight=36&width=600\" style=\"max-width: 100%;\"></object>\n\n\n### Sponsors\n\nThank you to all our sponsors! (please ask your company to also support this open source project by [becoming a sponsor](https://opencollective.com/git-secret#sponsor))\n\n<object type=\"image/svg+xml\" data=\"https://opencollective.com/git-secret/tiers/sponsor.svg?avatarHeight=36&width=600\" style=\"max-width: 100%;\"></object>\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2016 Nikita Sobolev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.478515625,
          "content": "SHELL:=bash\nPREFIX?=\"/usr\"\nDESTDIR?=\n\n#\n# Building:\n#\n\n.PHONY: all\nall: build\n\n.PHONY: clean\nclean:\n\t@rm -f git-secret\n\n.PHONY: build\nbuild:\n\t@cat src/version.sh > git-secret\n\t@cat src/_utils/*.sh src/commands/*.sh >> git-secret\n\t@cat src/main.sh >> git-secret\n\t@chmod +x git-secret; sync\n\n.PHONY: install\ninstall:\n\t\"${SHELL}\" ./utils/install.sh \"${DESTDIR}${PREFIX}\"\n\n.PHONY: uninstall\nuninstall:\n\t\"${SHELL}\" ./utils/uninstall.sh \"${DESTDIR}${PREFIX}\"\n\n#\n# Testing and linting:\n#\n\n# The $(shell echo $${PWD}) construct is to access *nix paths under windows\n# Under git for windows '$PATH' is set to windows paths, e.g. C:\\Something\n# Using a sub-shell we get the raw *nix paths, e.g. /c/Something\n.PHONY: test\ntest: clean build\n\texport SECRETS_PROJECT_ROOT=\"$(shell echo $${PWD})\"; \\\n\texport PATH=\"$(shell echo $${PWD})/vendor/bats-core/bin:$(shell echo $${PWD}):$(shell echo $${PATH})\"; \\\n\t\"${SHELL}\" ./utils/tests.sh\n\n# We use this script in CI and you can do this too!\n# What happens here?\n# 1. We pass `SECRETS_DOCKER_ENV` variable into this job\n# 2. Based on it, we select a proper `docker` image to run test on\n# 3. We execute `make test` inside the `docker` container\n.PHONY: docker-ci\ndocker-ci: clean\n\t@[ -z \"${SECRETS_DOCKER_ENV}\" ] \\\n\t\t&& echo 'SECRETS_DOCKER_ENV is unset' && exit 1 || true\n\tdocker build \\\n\t\t-f \".ci/docker-ci/$${SECRETS_DOCKER_ENV}/Dockerfile\" \\\n\t\t-t \"gitsecret-$${SECRETS_DOCKER_ENV}:latest\" .\n\tdocker run --rm \\\n\t\t--volume=\"$${PWD}:/code\" \\\n\t\t-w /code \\\n\t\t\"gitsecret-$${SECRETS_DOCKER_ENV}\" \\\n\t\tmake test\n\n.PHONY: lint-shell\nlint-shell:\n\tdocker pull koalaman/shellcheck:latest\n\tdocker run \\\n\t\t--volume=\"$${PWD}:/code\" \\\n\t\t-w /code \\\n\t\t-e SHELLCHECK_OPTS='-s bash -S style -a' \\\n\t\t--rm koalaman/shellcheck \\\n\t\t$$(find src .ci utils tests docs -type f \\\n\t\t\t-name '*.sh' -o -name '*.bash' -o -name '*.bats')\n\n.PHONY: lint-docker\nlint-docker:\n\tdocker pull hadolint/hadolint:latest-alpine\n\tdocker run \\\n\t\t--volume=\"$${PWD}:/code\" \\\n\t\t-w /code \\\n\t\t--rm hadolint/hadolint \\\n\t\thadolint \\\n\t\t\t--ignore=DL3008 --ignore=DL3018 --ignore=DL3041 --ignore=DL3028 \\\n\t\t\t.ci/*/**/Dockerfile\n\n.PHONY: lint\nlint: lint-shell lint-docker\n\n#\n# Manuals and docs:\n#\n\n.PHONY: clean-man\nclean-man:\n\t@find \"man/\" -type f ! -name \"*.md\" -delete\n\n.PHONY: build-man\nbuild-man: build\n\tdocker pull msoap/ruby-ronn\n\texport GITSECRET_VERSION=\"$$(./git-secret --version)\" && docker run \\\n\t\t--volume=\"$${PWD}:/code\" \\\n\t\t-w /code \\\n\t\t--rm msoap/ruby-ronn \\\n\t\tronn --roff \\\n\t\t\t--organization=sobolevn \\\n\t\t\t--manual=\"git-secret $${GITSECRET_VERSION}\" \\\n\t\t\tman/*/*.md\n\n.PHONY: build-docs\nbuild-docs: build-man\n\t \"${SHELL}\" docs/build.sh\n\n.PHONY: docs\ndocs: build-docs\n\tdocker pull jekyll/jekyll\n\tdocker run \\\n\t\t--volume=\"$${PWD}/docs:/code\" \\\n\t\t-w /code \\\n\t\t-p 4000:4000 \\\n\t\t--rm jekyll/jekyll \\\n\t\tjekyll serve --safe --strict_front_matter\n\n.PHONY: changelog\nchangelog:\n\t@[ -z \"${GITHUB_REPOSITORY}\" ] \\\n\t\t&& echo 'GITHUB_REPOSITORY is unset' && exit 1 || true\n\t@[ -z \"${GITHUB_TOKEN}\" ] \\\n\t\t&& echo 'GITHUB_TOKEN is unset' && exit 1 || true\n\tdocker pull githubchangeloggenerator/github-changelog-generator\n\tdocker run \\\n\t\t--volume=\"$${PWD}:/code\" \\\n\t\t-w /code \\\n\t\t--entrypoint='' \\\n\t\t-e GITHUB_REPOSITORY \\\n\t\t-e GITHUB_TOKEN \\\n\t\t--rm githubchangeloggenerator/github-changelog-generator \\\n\t\tsh \".ci/github_release_script.sh\"\n\n#\n# Packaging:\n#\n\n.PHONY: build-release\nbuild-release: clean build-man\n\t@[ -z \"${SECRETS_RELEASE_TYPE}\" ] \\\n\t\t&& echo 'SECRETS_RELEASE_TYPE is unset' && exit 1 || true\n\tdocker build \\\n\t\t-f \".ci/releaser/alpine/Dockerfile\" \\\n\t\t-t \"gitsecret-releaser:latest\" .\n\tdocker run \\\n\t\t--volume=\"$${PWD}:/code\" \\\n\t\t--rm gitsecret-releaser \\\n\t\tbash \"./utils/$${SECRETS_RELEASE_TYPE}/build.sh\"\n\n.PHONY: release\nrelease: build-release\n\t@[ -z \"${SECRETS_ARTIFACTORY_CREDENTIALS}\" ] \\\n\t\t&& echo 'SECRETS_ARTIFACTORY_CREDENTIALS is unset' && exit 1 || true\n\tdocker run \\\n\t\t--volume=\"$${PWD}:/code\" \\\n\t\t-e SECRETS_ARTIFACTORY_CREDENTIALS \\\n\t\t-e SECRETS_DEPLOY_DRY_RUN \\\n\t\t--rm gitsecret-releaser \\\n\t\tbash \"./utils/$${SECRETS_RELEASE_TYPE}/deploy.sh\"\n\n.PHONY: release-ci\nrelease-ci:\n\t@[ -z \"${SECRETS_RELEASE_ENV}\" ] \\\n\t\t&& echo 'SECRETS_RELEASE_ENV is unset' && exit 1 || true\n\t@[ -z \"${SECRETS_RELEASE_TYPE}\" ] \\\n\t\t&& echo 'SECRETS_RELEASE_TYPE is unset' && exit 1 || true\n\tdocker build \\\n\t\t-f \".ci/release-ci/$${SECRETS_RELEASE_ENV}/Dockerfile\" \\\n\t\t-t \"gitsecret-release-$${SECRETS_RELEASE_ENV}:latest\" .\n\tdocker run --rm \\\n\t\t--volume=\"$${PWD}:/code\" \\\n\t\t-w /code \\\n\t\t\"gitsecret-release-$${SECRETS_RELEASE_ENV}\" \\\n\t\tbash -c \"set -e; bash \"./utils/$${SECRETS_RELEASE_TYPE}/install.sh\"\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.048828125,
          "content": "# git-secret\n\n\n[![test](https://github.com/sobolevn/git-secret/actions/workflows/test.yml/badge.svg?branch=master&event=push)](https://github.com/sobolevn/git-secret/actions/workflows/test.yml)\n[![release-ci](https://github.com/sobolevn/git-secret/actions/workflows/release-ci.yml/badge.svg)](https://github.com/sobolevn/git-secret/actions/workflows/release-ci.yml)\n[![Homebrew](https://img.shields.io/homebrew/v/git-secret.svg)](https://formulae.brew.sh/formula/git-secret)\n[![Supporters](https://img.shields.io/opencollective/all/git-secret.svg?color=gold&label=supporters)](https://opencollective.com/git-secret)\n\n[![git-secret](https://raw.githubusercontent.com/sobolevn/git-secret/gh-pages/images/git-secret-big.png)](https://git-secret.io/)\n\n\n## What is `git-secret`?\n\n`git-secret` is a bash tool which stores private data inside a git repo.\n`git-secret` encrypts files with permitted users' public keys,\nallowing users you trust to access encrypted data using pgp and their secret keys.\n\nWith `git-secret`, changes to access rights are simplified, and private-public key issues are handled for you.\n\nWhen someone's permission is revoked, secrets do not need to be changed with `git-secret` -\njust remove their key from the repo's keyring using `git secret removeperson their@email.com`,\nre-encrypt the files, and they won't be able to decrypt secrets anymore.\nIf you think the user might have copied the secrets or keys when they had access, then\nyou should also change the secrets.\n\n\n## Preview\n\n[![git-secret terminal preview](git-secret.gif)](https://asciinema.org/a/41811?autoplay=1)\n\n\n## Installation\n\n`git-secret` [supports `brew`](https://formulae.brew.sh/formula/git-secret), just type: `brew install git-secret`\n\nIt also supports `apt` and `yum`. You can also use `make` if you want to.\nSee the [installation section](https://sobolevn.me/git-secret/installation) for the details.\n\n### Requirements\n\n`git-secret` relies on several external packages:\n\n- `bash` since `3.2.57` (it is hard to tell the correct `patch` release)\n- `gawk` since `4.0.2`\n- `git` since `1.8.3.1`\n- `gpg` since `gnupg 1.4` to `gnupg 2.X`\n- `sha256sum` since `8.21` (on freebsd and MacOS `shasum` is used instead)\n\n\n## Contributing\n\nDo you want to help the project? Find an [issue](https://github.com/sobolevn/git-secret/issues)\nand send a PR. It is more than welcomed! See [CONTRIBUTING.md](CONTRIBUTING.md) on how to do that.\n\n### Security\n\nIn order to encrypt (git-secret hide -m) files only when modified, the path\nmappings file tracks sha256sum checksums of the files added (git-secret add) to\ngit-secret's path mappings filesystem database. Although, the chances of\nencountering a sha collision are low, it is recommend that you pad files with\nrandom data for greater security. Or avoid using  the `-m` option altogether.\nIf your secret file holds more data than just a single password these\nprecautions should not be necessary, but could be followed for greater\nsecurity.\n\nIf you found any security related issues, please do not disclose it in public. Send an email to `mail@sobolevn.me`\n\n\n## Changelog\n\n`git-secret` uses [semver](https://semver.org/). See [CHANGELOG.md](CHANGELOG.md).\n\n\n## Packagers\n\nThanks to all the people and groups who package `git-secret` for easier install on particular OSes and distributions!\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/git-secret.svg)](https://repology.org/project/git-secret/versions)\n\nHere are some packagings of `git-secret` that we're aware of:\n\n- https://formulae.brew.sh/formula/git-secret\n- https://packages.ubuntu.com/bionic/git-secret\n- https://src.fedoraproject.org/rpms/git-secret\n- https://aur.archlinux.org/packages/git-secret/\n- https://pkgs.alpinelinux.org/package/edge/testing/x86/git-secret\n- https://packages.debian.org/sid/git-secret\n- https://github.com/void-linux/void-packages/blob/master/srcpkgs/git-secret/template\n\nSuch packages are considered 'downstream' because the git-secret code 'flows' from the `git-secret` [repository](https://git-secret.io/installation)\nto the various rpm/deb/dpkg/etc packages that are created for specific OSes and distributions.\n\nWe have also added notes specifically for packagers in [CONTRIBUTING.md](CONTRIBUTING.md).\n\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/git-secret#sponsor)]\n\n[![Sponsors](https://opencollective.com/git-secret/tiers/sponsor.svg?width=890)](https://opencollective.com/git-secret)\n\n\n## Backers\n\nThanks to all our backers!\n\n[![Backers](https://opencollective.com/git-secret/tiers/backer.svg?width=890&avatarHeight=36)](https://opencollective.com/git-secret)\n\n\n## Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n<a href=\"https://github.com/sobolevn/git-secret/graphs/contributors\"><img src=\"https://opencollective.com/git-secret/contributors.svg?width=890\" /></a>\n\n\n## License\n\nMIT. See [LICENSE.md](LICENSE.md) for details.\n\n\n## Thanks\n\nSpecial thanks to [Elio Qoshi](https://elioqoshi.me/sq/) from [ura](http://ura.design/) for the awesome logo.\n"
        },
        {
          "name": "RFC",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "git-secret.gif",
          "type": "blob",
          "size": 554.982421875,
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}