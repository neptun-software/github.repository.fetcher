{
  "metadata": {
    "timestamp": 1736568423141,
    "page": 377,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "eooce/Sing-box",
      "stars": 2005,
      "defaultBranch": "main",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.3642578125,
          "content": "# 1：vps一键命令，已集成到ssh工具箱中\n* 一键四协议安装脚本，支持纯v6 VPS，支持订阅，默认解锁GPT和奈飞\n* 最好用的四协议组合vless-reality|vmess-ws-tls(argo)|hysteria2|tuic5\n* 支持的系统：Ubuntu/Debian/CentOS/Alpine/Fedora/Rocky/Almalinux/kail\n* 注意nat小鸡安装完一键脚本之后需手动更改订阅端口和节点端口在允许范围内的端口，否则节点不通\n* 可在脚本前添加PORT变量，随脚本一起运行，即可定义端口，需确保PORT端口后面的3个端口可用，否则节点不通\n* 可选环境变量PORT CFIP CFPORT\n\n## VPS一键四协议安装脚本\n```\nbash <(curl -Ls https://raw.githubusercontent.com/eooce/sing-box/main/sing-box.sh)\n```\n## vps带端口变量运行示列\nPORT=开放的端口 确保后面3个端口可用 CFIP为优选IP或优选域名，CFPORT为优选ip或优选域名对应的端口\n```\nPORT=你的端口 CFIP=www.visa.com.tw CFPORT=443 bash <(curl -Ls https://raw.githubusercontent.com/eooce/sing-box/main/sing-box.sh)\n```\n\n\n## ssh综合工具箱一键脚本\n```\ncurl -fsSL https://raw.githubusercontent.com/eooce/ssh_tool/main/ssh_tool.sh -o ssh_tool.sh && chmod +x ssh_tool.sh && ./ssh_tool.sh\n```\n\n# 2：Serv00|CT8一键安装脚本,集成哪吒探针\n* 一键四协议安装脚本，vmess-ws|vmess-ws-tls(argo)|hy2|tuic5默认解锁GPT和奈飞\n* 支持自定义哪吒参数，Argo参数随脚本一起运行，\n* 列如：UUID=123456 NEZHA_SERVER=nz.abcd.com NEZHA_PORT=5555 NEZHA_KEY=123ABC ARGO_DOMAIN=2go.admin.com ARGO_AUTH=abc123  \n* 注意：面板开的端口必须符合脚本中提示的要求，并且与输入的对应，面板运行应用程序的权限必须打开，个别服务器ip被墙换到新增加的服务器即可，客户端跳过证书验证需设置为true，否则hy2和tuic不通\n* 详细图文教程地址：https://linux.do/t/topic/169670\n* 保活把keep_00.sh上传至自己的vps并修改自己的参数运行,仅支持四合一和三合一，udp单协议不支持，vmess单协议自行修改运行脚本\n\n## Serv00|CT8一键四协议安装脚本vmess-ws|vmess-ws-tls(argo)|hy2|tuic5\n```\nbash <(curl -Ls https://raw.githubusercontent.com/eooce/sing-box/main/sb_serv00.sh)\n```\n\n## Serv00|CT8一键四协议无交互安装脚本vmess-ws|vmess-ws-tls(argo)|hy2|tuic5，需设置环境变量\n* 必填环境变量：VMESS_PORT HY2_PORT TUIC_PORT\n* 可选环境变量：UUID NEZHA_SERVER NEZHA_PORT NEZHA_KEY ARGO_DOMAIN ARGO_AUTH CFIP CFPORT\n* ARGO_AUTH变量使用json时，ARGO_AUTH=‘json’  需用英文输入状态下的单引号包裹，例如：ARGO_AUTH='{\"AccountTag\":\"123\",\"TunnelSecret\":\"123\",\"TunnelID\":\"123\"}' \n```\nVMESS_PORT=tcp端口 HY2_PORT=udp端口 TUIC_PORT=udp端口 bash <(curl -Ls https://raw.githubusercontent.com/eooce/sing-box/main/sb_00.sh)\n```\n\n## Serv00|CT8一键三协议安装脚本vless-reality|hy2|tuic5 \n```\nbash <(curl -Ls https://raw.githubusercontent.com/eooce/sing-box/test/sb_00.sh)\n```\n\n## Serv00|CT8一键三协议无交互安装脚本vless-reality|vmess-splithttp|vmess-splithttp-tls(argo) \n* 必填环境变量：VLESS_PORT ARGO_PORT\n* 可选环境变量：UUID CFIP CFPORT NEZHA_SERVER NEZHA_PORT NEZHA_KEY ARGO_DOMAIN ARGO_AUTH\n* ARGO_AUTH变量使用json时，ARGO_AUTH=‘json’ 需英文输入状态下的单引号包裹，例如：ARGO_AUTH='{\"AccountTag\":\"123\",\"TunnelSecret\":\"123\",\"TunnelID\":\"123\"}' \n```\nVLESS_PORT=TCP端口 ARGO_PORT=TCP端口 bash <(curl -Ls https://raw.githubusercontent.com/eooce/sing-box/test/x00.sh)\n```\n\n## Serv00|CT8 hysteria2无交互一键安装脚本\n* 必填变量：PORT=UDP端口\n* 可选变量：UUID  NEZHA_SERVER  NEZHA_PORT  NEZHA_KEY\n```\nPORT=UDP端口 bash <(curl -Ls https://00.2go.us.kg/2.sh)\n```\n或\n```\nPORT=UDP端口 bash <(curl -Ls https://github.com/eooce/Sing-box/releases/download/00/2.sh)\n```\n\n## Serv00|CT8 tuic无交互一键安装脚本\n* 必填变量：PORT=UDP端口\n* 可选变量：UUID  NEZHA_SERVER  NEZHA_PORT  NEZHA_KEY\n\n```\nPORT=UDP端口 bash <(curl -Ls https://00.2go.us.kg/tu.sh)\n```\n或\n```\nPORT=UDP端口 bash <(curl -Ls https://github.com/eooce/Sing-box/releases/download/00/tu.sh)\n```\n\n## Serv00|CT8 vmess-ws-tls(argo)一键脚本\n* 必填变量：PORT=TCP端口\n* 可选变量：UUID  NEZHA_SERVER  NEZHA_PORT  NEZHA_KEY  CFIP CFPORT ARGO_DOMAIN  ARGO_AUTH\n\n```\nPORT=TCP端口 bash <(curl -Ls https://raw.githubusercontent.com/eooce/scripts/master/containers-shell/00_vmess.sh)\n```\n\n\n\n\n# 3：游戏机hosting\n## sing-box玩具四合一，默认解锁GPT和奈飞\n* node,python,java,go环境的游戏玩具搭建singbox节点，集成哪吒探针服务\n* 玩具默认vmess-argo ，支持多端口的玩具可自行添加端口变量同时开启4协议节点\n* 对应文件夹即对应环境请下载对应文件夹里的文件上传并赋予权限，修改变量后运行\n* ARGO_DOMAIN和ARGO_AUTH两个变量其中之一为空即启用临时隧道，反之则使用固定隧道\n* 无需设置NEZHA_TLS,当哪吒端口为{443,8443,2096,2087,2083,2053}其中之一时，自动开启tls\n\n## 游戏机hosting可选变量\n  | 变量名        | 是否必须 | 默认值 | 备注 |\n  | ------------ | ------ | ------ | ------ |\n  | PORT         | 否 |  3000  |http订阅端口，对应的主运行文件中修改，列如：index.js,app.py中 |\n  | ARGO_PORT    | 否 |  8001  |argo隧道端口，固定隧道token需和cloudflare后台设置的一致      |\n  | UUID         | 否 | bc97f674-c578-4940-9234-0a1da46041b9|节点UUID                     |\n  | NEZHA_SERVER | 否 |        | 哪吒服务端域名，例如nz.aaa.com                             |\n  | NEZHA_PORT   | 否 |  5555  | 哪吒端口为{443,8443,2096,2087,2083,2053}其中之一时，开启tls|\n  | NEZHA_KEY    | 否 |        | 哪吒客户端KEY                                             |\n  | ARGO_DOMAIN  | 否 |        | argo固定隧道域名，留空即启用临时隧道                        |\n  | ARGO_AUTH    | 否 |        | argo固定隧道json或token，留空即启用临时隧道                 |\n  | CFIP         | 否 |skk.moe | 节点优选域名或ip                                           |\n  | CFPORT       | 否 |  8443  |节点端口                                                   |\n  | SERVER_PORT  | 否 |自动获取 | 玩具分配端口，自动获取，无需填写，hy2端口                    |\n  | REALITY_PORT | 否 |        | vless-reality端口，支持多端口的玩具可以填写，不填写该节点不通 |\n  | TUIC_PORT    | 否 |        | tuic-v5端口，支持多端口的玩具可以填写，不填写该节点不通       |\n\n## 游戏机hostong节点输出\n* 输出sub.txt节点文件，可直接导入V2ray，nekbox，小火箭等代理软中\n* 订阅：默认不开启，多端口玩具可开启：分配的域名:http端口/sub,前缀不是https，而是http，例如http://www.google.com:1234/sub\n\n# ⚠️ 免责声明\n* 本程序仅供学习了解, 非盈利目的，请于下载后 24 小时内删除, 不得用作任何商业用途, 文字、数据及图片均有所属版权, 如转载须注明来源。\n* 使用本程序必循遵守部署免责声明，使用本程序必循遵守部署服务器所在地、所在国家和用户所在国家的法律法规, 程序作者不对使用者任何不当行为负责。\n\n## ⭐ Star History\n\n感谢所有为本项目点亮 Star 的朋友们！🌟\n\n[![Star History Chart](https://api.star-history.com/svg?repos=eooce/Sing-box&type=Date)](https://star-history.com/#eooce/Sing-box&Date)\n"
        },
        {
          "name": "go",
          "type": "tree",
          "content": null
        },
        {
          "name": "java",
          "type": "tree",
          "content": null
        },
        {
          "name": "keep.sh",
          "type": "blob",
          "size": 5.3134765625,
          "content": "#!/bin/bash \n\n# 此版本无哪吒，只保活节点,将此文件放到vps，填写以下服务器配置后bash keep.sh运行即可\n\nSCRIPT_PATH=\"/root/keep.sh\"                    # 脚本路径\nexport CFIP=${CFIP:-'www.visa.com.tw'}         # 优选域名或优选ip\nexport CFPORT=${CFIPPORT:-'443'}               # 优选域名或优选ip对应端口\n \n # serv00或ct8服务器及端口配置\ndeclare -A servers=(  # 账号:密码:tcp端口:udp1端口:udp2端口:argo域名:Argo隧道密钥(json或token) \n    [\"s0.serv00.com\"]='abcd:abd12345678:1234:2345:3455:s0.2go.ync.mn:{\"AccountTag\":\"8b9724\",\"TunnelSecret\":\"C+OA5z9UHZ0\",\"TunnelID\":\"28125b91-3430\"}'\n    [\"s1.serv00.com\"]='abcd:dbc12345678:1234:2345:3455:s1.2go.ync.mn:{\"AccountTag\":\"8b9724\",\"TunnelSecret\":\"C+OA5z9UHZ0\",\"TunnelID\":\"28125b91-3430\"}'\n    [\"s2.serv00.com\"]='abcd:avd12345678:1234:2345:3455:s2.2go.ync.mn:{\"AccountTag\":\"8b9724\",\"TunnelSecret\":\"C+OA5z9UHZ0\",\"TunnelID\":\"28125b91-3430\"}'\n    # 添加更多服务器......\n)\n\n# 定义颜色\nred() { echo -e \"\\e[1;91m$1\\033[0m\"; }\ngreen() { echo -e \"\\e[1;32m$1\\033[0m\"; }\nyellow() { echo -e \"\\e[1;33m$1\\033[0m\"; }\npurple() { echo -e \"\\e[1;35m$1\\033[0m\"; }\n\nexport TERM=xterm\nexport DEBIAN_FRONTEND=noninteractive\ninstall_packages() {\n    if [ -f /etc/debian_version ]; then\n        package_manager=\"apt-get install -y\"\n    elif [ -f /etc/redhat-release ]; then\n        package_manager=\"yum install -y\"\n    elif [ -f /etc/fedora-release ]; then\n        package_manager=\"dnf install -y\"\n    elif [ -f /etc/alpine-release ]; then\n        package_manager=\"apk add\"\n    else\n        red \"不支持的系统架构！\"\n        exit 1\n    fi\n    $package_manager sshpass curl netcat-openbsd jq cron >/dev/null 2>&1 &\n}\ninstall_packages\nclear\n\n# 添加定时任务\nadd_cron_job() {\n    if [ -f /etc/alpine-release ]; then\n        if ! command -v crond >/dev/null 2>&1; then\n            apk add --no-cache cronie bash >/dev/null 2>&1 &\n            rc-update add crond && rc-service crond start\n        fi\n    fi\n    # 检查定时任务是否已经存在\n    if ! crontab -l 2>/dev/null | grep -q \"$SCRIPT_PATH\"; then\n        (crontab -l 2>/dev/null; echo \"*/2 * * * * /bin/bash $SCRIPT_PATH >> /root/keep_00.log 2>&1\") | crontab -\n        green \"已添加计划任务，每两分钟执行一次\"\n    else\n        purple \"计划任务已存在，跳过添加计划任务\"\n    fi\n}\nadd_cron_job\n\n# 检查 TCP 端口是否通畅\ncheck_tcp_port() {\n    local host=$1\n    local port=$2\n    nc -z -w 3 \"$host\" \"$port\" &> /dev/null\n    return $?\n}\n\n# 检查 Argo 隧道是否在线\ncheck_argo_tunnel() {\n    local domain=$1\n    if [ -z \"$domain\" ]; then\n        return 1\n    else\n        http_code=$(curl -o /dev/null -s -w \"%{http_code}\\n\" \"https://$domain\")\n        if [ \"$http_code\" -eq 404 ]; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n}\n\n# 执行远程命令\nrun_remote_command() {\n    local host=$1\n    local ssh_user=$2\n    local ssh_pass=$3\n    local tcp_port=$4\n    local udp1_port=$5\n    local udp2_port=$6\n    local argo_domain=${7}\n    local argo_auth=${8}\n\n    remote_command=\"VMESS_PORT=$tcp_port HY2_PORT=$udp1_port TUIC_PORT=$udp2_port ARGO_DOMAIN=$argo_domain ARGO_AUTH='$argo_auth' CFIP=$CFIP CFPORT=$CFPORT bash <(curl -Ls https://raw.githubusercontent.com/eooce/sing-box/main/sb_00.sh)\"\n    \n    sshpass -p \"$ssh_pass\" ssh -o StrictHostKeyChecking=no \"$ssh_user@$host\" \"$remote_command\"\n}\n\n# 循环遍历服务器列表检测\nfor host in \"${!servers[@]}\"; do\n    IFS=':' read -r ssh_user ssh_pass tcp_port udp1_port udp2_port argo_domain argo_auth <<< \"${servers[$host]}\"\n\n    tcp_attempt=0\n    argo_attempt=0\n    max_attempts=3\n    time=$(TZ=\"Asia/Hong_Kong\" date +\"%Y-%m-%d %H:%M\")\n\n    # 检查 TCP 端口\n    while [ $tcp_attempt -lt $max_attempts ]; do\n        if check_tcp_port \"$host\" \"$tcp_port\"; then\n            green \"$time  TCP端口${tcp_port}通畅 服务器: $host  账户: $ssh_user\"\n            tcp_attempt=0\n            break\n        else\n            red \"$time  TCP端口${tcp_port}不通 服务器: $host  账户: $ssh_user\"\n            sleep 10\n            tcp_attempt=$((tcp_attempt+1))\n        fi\n    done\n\n    # 检查 Argo 隧道\n    while [ $argo_attempt -lt $max_attempts ]; do\n        if check_argo_tunnel \"$argo_domain\"; then\n            green \"$time  Argo 隧道在线 Argo域名: $argo_domain   账户: $ssh_user\\n\"\n            argo_attempt=0\n            break\n        else\n            red \"$time  Argo 隧道离线 Argo域名: $argo_domain   账户: $ssh_user\"\n            sleep 10\n            argo_attempt=$((argo_attempt+1))\n        fi\n    done\n   \n    # 如果3次检测失败，则执行 SSH 连接并执行远程命令\n    if [ $tcp_attempt -ge 3 ] || [ $argo_attempt -ge 3 ]; then\n        yellow \"$time 多次检测失败，尝试通过SSH连接并远程执行命令  服务器: $host  账户: $ssh_user\"\n        if sshpass -p \"$ssh_pass\" ssh -o StrictHostKeyChecking=no \"$ssh_user@$host\" -q exit; then\n            green \"$time  SSH远程连接成功 服务器: $host  账户 : $ssh_user\"\n            output=$(run_remote_command \"$host\" \"$ssh_user\" \"$ssh_pass\" \"$tcp_port\" \"$udp1_port\" \"$udp2_port\" \"$argo_domain\" \"$argo_auth\")\n            yellow \"远程命令执行结果：\\n\"\n            echo \"$output\"\n        else\n            red \"$time  连接失败，请检查你的账户密码 服务器: $host  账户: $ssh_user\"\n        fi\n    fi\ndone\n"
        },
        {
          "name": "keep_00.sh",
          "type": "blob",
          "size": 9.1708984375,
          "content": "#!/bin/bash\n# 如果要检测哪吒是否在线，请将哪吒面板上agent名字以：S1,S2,S3,S4....形式命名 \nSCRIPT_PATH=\"/root/keep_00.sh\"                 # 脚本路径\nNEZHA_URL=\"http://nezha.abcgefg.com\"           # 哪吒面板地址 \nAPI_TOKEN=\"RtzwTHlXjG2RXHaVW5JUBMcO2DR9OI123\"   # 哪吒面板api token\n\nexport CFIP=${CFIP:-'www.visa.com.tw'}         # 优选域名或优选ip\nexport CFPORT=${CFIPPORT:-'443'}               # 优选域名或优选ip对应端口\n \n # serv00或ct8服务器及端口配置, 哪吒，argo固定隧道可不填写\ndeclare -A servers=(  # 账号:密码:tcp端口:udp1端口:udp2端口:哪吒客户端域名:哪吒agent端口:哪吒密钥:argo域名:Argo隧道json或token \n    [\"s0.serv00.com\"]='abcd:abd12345678:1234:2345:3455:nezha.abcd.com:5555:c234dfddsddd:s0.2go.ync,mn:{\"AccountTag\":\"8b9724080e55e70370fb74287922f31b\",\"TunnelSecret\":\"C+OA5/LjJz9UHZ0vOkCC5PVRkvXiPhrWNcnxJBrfTPc=\",\"TunnelID\":\"28125b91-34309-44d2-94be-b5e718944dad\"}'\n    [\"s1.serv00.com\"]='abcd:dbc12345678:1234:2345:3455:nezha.abcd.com:5555:c234dfddsddd:s1.2go.ync,mn:{\"AccountTag\":\"8b9724080e55e70370fb74287922f31b\",\"TunnelSecret\":\"C+OA5/LjJz9UHZ0vOkCC5PVRkvXiPhrWNcnxJBrfTPc=\",\"TunnelID\":\"28125b91-34309-44d2-94be-b5e718944dad\"}'\n    [\"s2.serv00.com\"]='abcd:avd12345678:1234:2345:3455:nezha.abcd.com:5555:c234dfddsddd:s2.2go.ync,mn:{\"AccountTag\":\"8b9724080e55e70370fb74287922f31b\",\"TunnelSecret\":\"C+OA5/LjJz9UHZ0vOkCC5PVRkvXiPhrWNcnxJBrfTPc=\",\"TunnelID\":\"28125b91-34309-44d2-94be-b5e718944dad\"}'\n    [\"s3.serv00.com\"]='abcd:dss12345678:1234:2345:3455:nezha.abcd.com:5555:c234dfddsddd:s3.2go.ync,mn:{\"AccountTag\":\"8b9724080e55e70370fb74287922f31b\",\"TunnelSecret\":\"C+OA5/LjJz9UHZ0vOkCC5PfRkvXiPhrWNcnxJBrfTPc=\",\"TunnelID\":\"28125b91-34309-44d2-94be-b5e718944dad\"}'\n    [\"s4.serv00.com\"]='abcd:sds12345678:1234:2345:3455:nezha.abcd.com:5555:c234dfddsddd:s4.2go.ync,mn:{\"AccountTag\":\"8b9724080e55e70370fb74287922f31b\",\"TunnelSecret\":\"C+OA5/LjJz9UHZ0vOkCC5PVRkvXiPhrWNcnxJBrfTPc=\",\"TunnelID\":\"28125b91-34309-44d2-94be-b5e718944dad\"}'\n    [\"s5.serv00.com\"]='abcd:dsd12345678:1234:2345:3455:nezha.abcd.com:5555:c234dfddsddd:s5.2go.ync,mn:{\"AccountTag\":\"8b9724080e55e70370fb74287922f31b\",\"TunnelSecret\":\"C+OA5/LjJz9UHZ0vOkCC5PVRkvXiPhrWNcnxJBrfTPc=\",\"TunnelID\":\"28125b91-34309-44d2-94be-b5e718944dad\"}'\n    [\"s6.serv00.com\"]='abcd:dsd12345678:1234:2345:3455:nezha.abcd.com:5555:c234dfddsddd:s6.2go.ync,mn:{\"AccountTag\":\"8b9724080e55e70370fb74287922f31b\",\"TunnelSecret\":\"C+OA5/LjJz9UHZ0vOkCC5PVRkvXiPhrWNcnxJBrfTPc=\",\"TunnelID\":\"28125b91-34309-44d2-94be-b5e718944dad\"}'\n    [\"s7.serv00.com\"]='abcd:dsd12345678:1234:2345:3455:nezha.abcd.com:5555:c234dfddsddd:s7.2go.ync,mn:{\"AccountTag\":\"8b9724080e55e70370fb74287922f31b\",\"TunnelSecret\":\"C+OA5/LjJz9UHZ0vOkCC5PVRkvXiPhrWNcnxJBrfTPc=\",\"TunnelID\":\"28125b91-34309-44d2-94be-b5e718944dad\"}'\n    [\"s8.serv00.com\"]='abcd:dss12345678:1234:2345:3455:nezha.abcd.com:5555:c234dfddsddd:s8.2go.ync,mn:{\"AccountTag\":\"8b9724080e55e70370fb74287922f31b\",\"TunnelSecret\":\"C+OA5/LjJz9UHZ0vOkCC5PVRkvXiPhrWNcnxJBrfTPc=\",\"TunnelID\":\"28125b91-34309-44d2-94be-b5e718944dad\"}'\n    # 添加更多服务器......\n)\n\n# 定义颜色\nred() { echo -e \"\\e[1;91m$1\\033[0m\"; }\ngreen() { echo -e \"\\e[1;32m$1\\033[0m\"; }\nyellow() { echo -e \"\\e[1;33m$1\\033[0m\"; }\npurple() { echo -e \"\\e[1;35m$1\\033[0m\"; }\n\nexport TERM=xterm\nexport DEBIAN_FRONTEND=noninteractive\ninstall_packages() {\n    if [ -f /etc/debian_version ]; then\n        package_manager=\"apt-get install -y\"\n    elif [ -f /etc/redhat-release ]; then\n        package_manager=\"yum install -y\"\n    elif [ -f /etc/fedora-release ]; then\n        package_manager=\"dnf install -y\"\n    elif [ -f /etc/alpine-release ]; then\n        package_manager=\"apk add\"\n    else\n        red \"不支持的系统架构！\"\n        exit 1\n    fi\n    $package_manager sshpass curl netcat-openbsd jq cron >/dev/null 2>&1 &\n}\ninstall_packages\nclear\n\n# 添加定时任务\nadd_cron_job() {\n    if [ -f /etc/alpine-release ]; then\n        if ! command -v crond >/dev/null 2>&1; then\n            apk add --no-cache cronie bash >/dev/null 2>&1 &\n            rc-update add crond && rc-service crond start\n        fi\n    fi\n    # 检查定时任务是否已经存在\n    if ! crontab -l 2>/dev/null | grep -q \"$SCRIPT_PATH\"; then\n        (crontab -l 2>/dev/null; echo \"*/2 * * * * /bin/bash $SCRIPT_PATH >> /root/keep_00.log 2>&1\") | crontab -\n        green \"已添加计划任务，每两分钟执行一次\"\n    else\n        purple \"计划任务已存在，跳过添加计划任务\"\n    fi\n}\nadd_cron_job\n\n# 检查 TCP 端口是否通畅\ncheck_tcp_port() {\n    local host=$1\n    local port=$2\n    nc -z -w 3 \"$host\" \"$port\" &> /dev/null\n    return $?\n}\n\n# 检查 Argo 隧道是否在线\ncheck_argo_tunnel() {\n    local domain=$1\n    if [ -z \"$domain\" ]; then\n        return 1\n    else\n        http_code=$(curl -o /dev/null -s -w \"%{http_code}\\n\" \"https://$domain\")\n        if [ \"$http_code\" -eq 404 ]; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n}\n\n# 检查哪吒 agent 是否在线\ncheck_nezha_agent() {\n    NEZHA_API=\"$NEZHA_URL/api/v1/server/list\"\n    response=$(curl -s -H \"Authorization: $API_TOKEN\" \"$NEZHA_API\")\n    \n    if [ $? -ne 0 ]; then\n        red \"请求失败，请检查您的哪吒URL或api_token\"\n        return 1\n    fi\n    \n    local current_time=$(date +%s)\n    local target_agent=\"S${1}\"\n    local agent_found=false\n    local agent_online=false\n\n    while read -r server; do\n        server_name=$(echo \"$server\" | jq -r '.name')\n        last_active=$(echo \"$server\" | jq -r '.last_active')\n\n        if [[ $server_name == $target_agent ]]; then\n            agent_found=true\n            if [ $(( current_time - last_active )) -le 30 ]; then\n                agent_online=true\n                break\n            fi\n        fi\n    done < <(echo \"$response\" | jq -c '.result[]')\n\n    if ! $agent_found; then\n        red \"未找到 agent: $target_agent\"\n        return 1\n    elif $agent_online; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n# 执行远程命令\nrun_remote_command() {\n    local host=$1\n    local ssh_user=$2\n    local ssh_pass=$3\n    local tcp_port=$4\n    local udp1_port=$5\n    local udp2_port=$6\n    local nezha_server=$7\n    local nezha_port=$8\n    local nezha_key=$9\n    local argo_domain=${10}\n    local argo_auth=${11}\n\n    remote_command=\"VMESS_PORT=$tcp_port HY2_PORT=$udp1_port TUIC_PORT=$udp2_port NEZHA_SERVER=$nezha_server NEZHA_PORT=$nezha_port NEZHA_KEY=$nezha_key ARGO_DOMAIN=$argo_domain ARGO_AUTH='$argo_auth' CFIP=$CFIP CFPORT=$CFPORT bash <(curl -Ls https://raw.githubusercontent.com/eooce/sing-box/main/sb_00.sh)\"\n    \n    sshpass -p \"$ssh_pass\" ssh -o StrictHostKeyChecking=no \"$ssh_user@$host\" \"$remote_command\"\n}\n\n# 循环遍历服务器列表检测\nfor host in \"${!servers[@]}\"; do\n    IFS=':' read -r ssh_user ssh_pass tcp_port udp1_port udp2_port nezha_server nezha_port nezha_key argo_domain argo_auth <<< \"${servers[$host]}\"\n\n    nezha_agent_name=${host%%.*}\n    nezha_index=${nezha_agent_name:1}\n\n    tcp_attempt=0\n    argo_attempt=0\n    nezha_attempt=0\n    max_attempts=3\n    time=$(TZ=\"Asia/Hong_Kong\" date +\"%Y-%m-%d %H:%M\")\n\n    # 检查 Nezha agent\n    while [ $nezha_attempt -lt $max_attempts ]; do\n        if check_nezha_agent \"$nezha_index\"; then\n            green \"$time  Nezha agent在线 服务器: $host  账户: $ssh_user\"\n            nezha_attempt=0\n            break\n        else\n            red \"$time  Nezha agent离线 服务器: $host  账户: $ssh_user\"\n            sleep 10\n            nezha_attempt=$((nezha_attempt+1))\n        fi\n    done\n\n    # 检查 TCP 端口\n    while [ $tcp_attempt -lt $max_attempts ]; do\n        if check_tcp_port \"$host\" \"$tcp_port\"; then\n            green \"$time  TCP端口${tcp_port}通畅 服务器: $host  账户: $ssh_user\"\n            tcp_attempt=0\n            break\n        else\n            red \"$time  TCP端口${tcp_port}不通 服务器: $host  账户: $ssh_user\"\n            sleep 10\n            tcp_attempt=$((tcp_attempt+1))\n        fi\n    done\n\n    # 检查 Argo 隧道\n    while [ $argo_attempt -lt $max_attempts ]; do\n        if check_argo_tunnel \"$argo_domain\"; then\n            green \"$time  Argo 隧道在线 Argo域名: $argo_domain   账户: $ssh_user\\n\"\n            argo_attempt=0\n            break\n        else\n            red \"$time  Argo 隧道离线 Argo域名: $argo_domain   账户: $ssh_user\"\n            sleep 10\n            argo_attempt=$((argo_attempt+1))\n        fi\n    done\n   \n    # 如果3次检测失败，则执行 SSH 连接并执行远程命令\n    if [ $tcp_attempt -ge 3 ] || [ $argo_attempt -ge 3 ] || [ $nezha_attempt -ge 3 ]; then\n        yellow \"$time 多次检测失败，尝试通过SSH连接并远程执行命令  服务器: $host  账户: $ssh_user\"\n        if sshpass -p \"$ssh_pass\" ssh -o StrictHostKeyChecking=no \"$ssh_user@$host\" -q exit; then\n            green \"$time  SSH远程连接成功 服务器: $host  账户 : $ssh_user\"\n            output=$(run_remote_command \"$host\" \"$ssh_user\" \"$ssh_pass\" \"$tcp_port\" \"$udp1_port\" \"$udp2_port\" \"$nezha_server\" \"$nezha_port\" \"$nezha_key\" \"$argo_domain\" \"$argo_auth\")\n            yellow \"远程命令执行结果：\\n\"\n            echo \"$output\"\n        else\n            red \"$time  连接失败，请检查你的账户密码 服务器: $host  账户: $ssh_user\"\n        fi\n    fi\ndone\n"
        },
        {
          "name": "nodejs",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "sb_00.sh",
          "type": "blob",
          "size": 11.337890625,
          "content": "#!/bin/bash\n\nre=\"\\033[0m\"\nred=\"\\033[1;91m\"\ngreen=\"\\e[1;32m\"\nyellow=\"\\e[1;33m\"\npurple=\"\\e[1;35m\"\nred() { echo -e \"\\e[1;91m$1\\033[0m\"; }\ngreen() { echo -e \"\\e[1;32m$1\\033[0m\"; }\nyellow() { echo -e \"\\e[1;33m$1\\033[0m\"; }\npurple() { echo -e \"\\e[1;35m$1\\033[0m\"; }\nreading() { read -p \"$(red \"$1\")\" \"$2\"; }\nexport LC_ALL=C\nUSERNAME=$(whoami)\nHOSTNAME=$(hostname)\nexport UUID=${UUID:-'bc97f674-c578-4940-9234-0a1da46041b0'}\nexport NEZHA_SERVER=${NEZHA_SERVER:-''} \nexport NEZHA_PORT=${NEZHA_PORT:-'5555'}     \nexport NEZHA_KEY=${NEZHA_KEY:-''} \nexport ARGO_DOMAIN=${ARGO_DOMAIN:-''}   \nexport ARGO_AUTH=${ARGO_AUTH:-''}\nexport VMESS_PORT=${VMESS_PORT:-'11226'}\nexport TUIC_PORT=${TUIC_PORT:-'11227'}\nexport HY2_PORT=${HY2_PORT:-'11228'}\nexport CFIP=${CFIP:-'www.visa.com.tw'} \nexport CFPORT=${CFPORT:-'443'} \n\n[[ \"$HOSTNAME\" == \"s1.ct8.pl\" ]] && WORKDIR=\"domains/${USERNAME}.ct8.pl/logs\" || WORKDIR=\"domains/${USERNAME}.serv00.net/logs\"\n[ -d \"$WORKDIR\" ] || (mkdir -p \"$WORKDIR\" && chmod 777 \"$WORKDIR\")\nbash -c 'ps aux | grep $(whoami) | grep -v \"sshd\\|bash\\|grep\" | awk \"{print \\$2}\" | xargs -r kill -9 >/dev/null 2>&1' >/dev/null 2>&1\n# devil binexec on > /dev/null 2>&1\n\nargo_configure() {\nclear\npurple \"正在安装中,请稍等...\"\n  if [[ -z $ARGO_AUTH || -z $ARGO_DOMAIN ]]; then\n    green \"ARGO_DOMAIN or ARGO_AUTH is empty,use quick tunnel\"\n    return\n  fi\n\n  if [[ $ARGO_AUTH =~ TunnelSecret ]]; then\n    echo $ARGO_AUTH > tunnel.json\n    cat > tunnel.yml << EOF\ntunnel: $(cut -d\\\" -f12 <<< \"$ARGO_AUTH\")\ncredentials-file: tunnel.json\nprotocol: http2\n\ningress:\n  - hostname: $ARGO_DOMAIN\n    service: http://localhost:$VMESS_PORT\n    originRequest:\n      noTLSVerify: true\n  - service: http_status:404\nEOF\n  else\n    green \"ARGO_AUTH mismatch TunnelSecret,use token connect to tunnel\"\n  fi\n}\n\ngenerate_config() {\n\n    openssl ecparam -genkey -name prime256v1 -out \"private.key\"\n    openssl req -new -x509 -days 3650 -key \"private.key\" -out \"cert.pem\" -subj \"/CN=$USERNAME.serv00.net\"\n\n  yellow \"获取可用IP中，请稍等...\"\n  available_ip=$(get_ip)\n  purple \"当前选择IP为：$available_ip 如安装完后节点不通可尝试重新安装\"\n  \n  cat > config.json << EOF\n{\n  \"log\": {\n    \"disabled\": true,\n    \"level\": \"info\",\n    \"timestamp\": true\n  },\n  \"dns\": {\n    \"servers\": [\n      {\n        \"address\": \"8.8.8.8\",\n        \"address_resolver\": \"local\"\n      },\n      {\n        \"tag\": \"local\",\n        \"address\": \"local\"\n      }\n    ]\n  },\n  \"inbounds\": [\n    {\n       \"tag\": \"hysteria-in\",\n       \"type\": \"hysteria2\",\n       \"listen\": \"$available_ip\",\n       \"listen_port\": $HY2_PORT,\n       \"users\": [\n         {\n             \"password\": \"$UUID\"\n         }\n     ],\n     \"masquerade\": \"https://bing.com\",\n     \"tls\": {\n         \"enabled\": true,\n         \"alpn\": [\n             \"h3\"\n         ],\n         \"certificate_path\": \"cert.pem\",\n         \"key_path\": \"private.key\"\n        }\n    },\n    {\n      \"tag\": \"vmess-ws-in\",\n      \"type\": \"vmess\",\n      \"listen\": \"::\",\n      \"listen_port\": $VMESS_PORT,\n      \"users\": [\n      {\n        \"uuid\": \"$UUID\"\n      }\n    ],\n    \"transport\": {\n      \"type\": \"ws\",\n      \"path\": \"/vmess-argo\",\n      \"early_data_header_name\": \"Sec-WebSocket-Protocol\"\n      }\n    },\n    {\n      \"tag\": \"tuic-in\",\n      \"type\": \"tuic\",\n      \"listen\": \"$available_ip\",\n      \"listen_port\": $TUIC_PORT,\n      \"users\": [\n        {\n          \"uuid\": \"$UUID\",\n          \"password\": \"admin123\"\n        }\n      ],\n      \"congestion_control\": \"bbr\",\n      \"tls\": {\n        \"enabled\": true,\n        \"alpn\": [\n          \"h3\"\n        ],\n        \"certificate_path\": \"cert.pem\",\n        \"key_path\": \"private.key\"\n      }\n    }\n ],\n  \"outbounds\": [\n    {\n      \"tag\": \"direct\",\n      \"type\": \"direct\"\n    },\n    {\n      \"tag\": \"block\",\n      \"type\": \"block\"\n    }\n  ]\n}\nEOF\n}\n\ndownload_singbox() {\n  ARCH=$(uname -m) && DOWNLOAD_DIR=\".\" && mkdir -p \"$DOWNLOAD_DIR\" && FILE_INFO=()\n  if [ \"$ARCH\" == \"arm\" ] || [ \"$ARCH\" == \"arm64\" ] || [ \"$ARCH\" == \"aarch64\" ]; then\n      FILE_INFO=(\"https://github.com/eooce/test/releases/download/arm64/sb web\" \"https://github.com/eooce/test/releases/download/arm64/bot13 bot\" \"https://github.com/eooce/test/releases/download/ARM/swith npm\")\n  elif [ \"$ARCH\" == \"amd64\" ] || [ \"$ARCH\" == \"x86_64\" ] || [ \"$ARCH\" == \"x86\" ]; then\n      FILE_INFO=(\"https://github.com/eooce/test/releases/download/freebsd/sb web\" \"https://github.com/eooce/test/releases/download/freebsd/server bot\" \"https://github.com/eooce/test/releases/download/freebsd/npm npm\")\n  else\n      echo \"Unsupported architecture: $ARCH\"\n      exit 1\n  fi\ndeclare -A FILE_MAP\ngenerate_random_name() {\n    local chars=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\n    local name=\"\"\n    for i in {1..6}; do\n        name=\"$name${chars:RANDOM%${#chars}:1}\"\n    done\n    echo \"$name\"\n}\n\ndownload_with_fallback() {\n    local URL=$1\n    local NEW_FILENAME=$2\n\n    curl -L -sS --max-time 3 -o \"$NEW_FILENAME\" \"$URL\" &\n    CURL_PID=$!\n    CURL_START_SIZE=$(stat -c%s \"$NEW_FILENAME\" 2>/dev/null || echo 0)\n    \n    sleep 1\n\n    CURL_CURRENT_SIZE=$(stat -c%s \"$NEW_FILENAME\" 2>/dev/null || echo 0)\n    \n    if [ \"$CURL_CURRENT_SIZE\" -le \"$CURL_START_SIZE\" ]; then\n        kill $CURL_PID 2>/dev/null\n        wait $CURL_PID 2>/dev/null\n        wget -q -O \"$NEW_FILENAME\" \"$URL\"\n        echo -e \"\\e[1;32mDownloading $NEW_FILENAME by wget\\e[0m\"\n    else\n        wait $CURL_PID\n        echo -e \"\\e[1;32mDownloading $NEW_FILENAME by curl\\e[0m\"\n    fi\n}\n\nfor entry in \"${FILE_INFO[@]}\"; do\n    URL=$(echo \"$entry\" | cut -d ' ' -f 1)\n    RANDOM_NAME=$(generate_random_name)\n    NEW_FILENAME=\"$DOWNLOAD_DIR/$RANDOM_NAME\"\n    \n    if [ -e \"$NEW_FILENAME\" ]; then\n        echo -e \"\\e[1;32m$NEW_FILENAME already exists, Skipping download\\e[0m\"\n    else\n        download_with_fallback \"$URL\" \"$NEW_FILENAME\"\n    fi\n    \n    chmod +x \"$NEW_FILENAME\"\n    FILE_MAP[$(echo \"$entry\" | cut -d ' ' -f 2)]=\"$NEW_FILENAME\"\ndone\nwait\n\nif [ -e \"$(basename ${FILE_MAP[npm]})\" ]; then\n    tlsPorts=(\"443\" \"8443\" \"2096\" \"2087\" \"2083\" \"2053\")\n    if [[ \"${tlsPorts[*]}\" =~ \"${NEZHA_PORT}\" ]]; then\n      NEZHA_TLS=\"--tls\"\n    else\n      NEZHA_TLS=\"\"\n    fi\n    if [ -n \"$NEZHA_SERVER\" ] && [ -n \"$NEZHA_PORT\" ] && [ -n \"$NEZHA_KEY\" ]; then\n        export TMPDIR=$(pwd)\n        nohup ./\"$(basename ${FILE_MAP[npm]})\" -s ${NEZHA_SERVER}:${NEZHA_PORT} -p ${NEZHA_KEY} ${NEZHA_TLS} >/dev/null 2>&1 &\n        sleep 2\n        pgrep -x \"$(basename ${FILE_MAP[npm]})\" > /dev/null && green \"$(basename ${FILE_MAP[npm]}) is running\" || { red \"$(basename ${FILE_MAP[npm]}) is not running, restarting...\"; pkill -x \"$(basename ${FILE_MAP[npm]})\" && nohup ./\"$(basename ${FILE_MAP[npm]})\" -s \"${NEZHA_SERVER}:${NEZHA_PORT}\" -p \"${NEZHA_KEY}\" ${NEZHA_TLS} >/dev/null 2>&1 & sleep 2; purple \"$(basename ${FILE_MAP[npm]}) restarted\"; }\n    else\n        purple \"NEZHA variable is empty, skipping running\"\n    fi\nfi\n\nif [ -e \"$(basename ${FILE_MAP[web]})\" ]; then\n    nohup ./\"$(basename ${FILE_MAP[web]})\" run -c config.json >/dev/null 2>&1 &\n    sleep 2\n    pgrep -x \"$(basename ${FILE_MAP[web]})\" > /dev/null && green \"$(basename ${FILE_MAP[web]}) is running\" || { red \"$(basename ${FILE_MAP[web]}) is not running, restarting...\"; pkill -x \"$(basename ${FILE_MAP[web]})\" && nohup ./\"$(basename ${FILE_MAP[web]})\" run -c config.json >/dev/null 2>&1 & sleep 2; purple \"$(basename ${FILE_MAP[web]}) restarted\"; }\nfi\n\nif [ -e \"$(basename ${FILE_MAP[bot]})\" ]; then\n    if [[ $ARGO_AUTH =~ ^[A-Z0-9a-z=]{120,250}$ ]]; then\n      args=\"tunnel --edge-ip-version auto --no-autoupdate --protocol http2 run --token ${ARGO_AUTH}\"\n    elif [[ $ARGO_AUTH =~ TunnelSecret ]]; then\n      args=\"tunnel --edge-ip-version auto --config tunnel.yml run\"\n    else\n      args=\"tunnel --edge-ip-version auto --no-autoupdate --protocol http2 --logfile boot.log --loglevel info --url http://localhost:$VMESS_PORT\"\n    fi\n    nohup ./\"$(basename ${FILE_MAP[bot]})\" $args >/dev/null 2>&1 &\n    sleep 2\n    pgrep -x \"$(basename ${FILE_MAP[bot]})\" > /dev/null && green \"$(basename ${FILE_MAP[bot]}) is running\" || { red \"$(basename ${FILE_MAP[bot]}) is not running, restarting...\"; pkill -x \"$(basename ${FILE_MAP[bot]})\" && nohup ./\"$(basename ${FILE_MAP[bot]})\" \"${args}\" >/dev/null 2>&1 & sleep 2; purple \"$(basename ${FILE_MAP[bot]}) restarted\"; }\nfi\nsleep 2\nrm -f \"$(basename ${FILE_MAP[npm]})\" \"$(basename ${FILE_MAP[web]})\" \"$(basename ${FILE_MAP[bot]})\"\n}\n \nget_argodomain() {\n  if [[ -n $ARGO_AUTH ]]; then\n    echo \"$ARGO_DOMAIN\"\n  else\n    local retry=0\n    local max_retries=6\n    local argodomain=\"\"\n    while [[ $retry -lt $max_retries ]]; do\n      ((retry++))\n      argodomain=$(grep -oE 'https://[[:alnum:]+\\.-]+\\.trycloudflare\\.com' boot.log | sed 's@https://@@') \n      if [[ -n $argodomain ]]; then\n        break\n      fi\n      sleep 1\n    done\n    echo \"$argodomain\"\n  fi\n}\n\nget_ip() {\n    IP_LIST=($(devil vhost list | awk '/^[0-9]+/ {print $1}'))\n    API_URL=\"https://status.eooce.com/api\"\n    IP=\"\"\n    THIRD_IP=${IP_LIST[2]}\n    RESPONSE=$(curl -s --max-time 2 \"${API_URL}/${THIRD_IP}\")\n    if [[ $(echo \"$RESPONSE\" | jq -r '.status') == \"Available\" ]]; then\n        IP=$THIRD_IP\n    else\n        FIRST_IP=${IP_LIST[0]}\n        RESPONSE=$(curl -s --max-time 2 \"${API_URL}/${FIRST_IP}\")\n        \n        if [[ $(echo \"$RESPONSE\" | jq -r '.status') == \"Available\" ]]; then\n            IP=$FIRST_IP\n        else\n            IP=${IP_LIST[1]}\n        fi\n    fi\n    echo \"$IP\"\n}\n\nget_links(){\nargodomain=$(get_argodomain)\necho -e \"\\e[1;32mArgoDomain:\\e[1;35m${argodomain}\\e[0m\\n\"\nISP=$(curl -s --max-time 1.5 https://speed.cloudflare.com/meta | awk -F\\\" '{print $26}' | sed -e 's/ /_/g' || echo \"0\")\nget_name() { if [ \"$HOSTNAME\" = \"s1.ct8.pl\" ]; then SERVER=\"CT8\"; else SERVER=$(echo \"$HOSTNAME\" | cut -d '.' -f 1); fi; echo \"$SERVER\"; }\nNAME=\"$ISP-$(get_name)\"\n\nyellow \"注意：v2ray或其他软件的跳过证书验证需设置为true,否则hy2或tuic节点可能不通\\n\"\ncat > list.txt <<EOF\nvmess://$(echo \"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"$NAME-vmss\\\", \\\"add\\\": \\\"$available_ip\\\", \\\"port\\\": \\\"$VMESS_PORT\\\", \\\"id\\\": \\\"$UUID\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"none\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"none\\\", \\\"host\\\": \\\"\\\", \\\"path\\\": \\\"/vmess-argo?ed=2048\\\", \\\"tls\\\": \\\"\\\", \\\"sni\\\": \\\"\\\", \\\"alpn\\\": \\\"\\\", \\\"fp\\\": \\\"\\\"}\" | base64 -w0)\n\nvmess://$(echo \"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"$NAME-vmss-argo\\\", \\\"add\\\": \\\"$CFIP\\\", \\\"port\\\": \\\"$CFPORT\\\", \\\"id\\\": \\\"$UUID\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"none\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"none\\\", \\\"host\\\": \\\"$argodomain\\\", \\\"path\\\": \\\"/vmess-argo?ed=2048\\\", \\\"tls\\\": \\\"tls\\\", \\\"sni\\\": \\\"$argodomain\\\", \\\"alpn\\\": \\\"\\\", \\\"fp\\\": \\\"\\\"}\" | base64 -w0)\n\nhysteria2://$UUID@$available_ip:$HY2_PORT/?sni=www.bing.com&alpn=h3&insecure=1#$NAME-hy2\n\ntuic://$UUID:admin123@$available_ip:$TUIC_PORT?sni=www.bing.com&congestion_control=bbr&udp_relay_mode=native&alpn=h3&allow_insecure=1#$NAME-tuic\nEOF\ncat list.txt\npurple \"\\n$WORKDIR/list.txt saved successfully\"\npurple \"Running done!\"\nyellow \"Serv00|ct8老王sing-box一键四协议安装脚本(vmess-ws|vmess-ws-tls(argo)|hysteria2|tuic)\\n\"\necho -e \"${green}issues反馈：${re}${yellow}https://github.com/eooce/Sing-box/issues${re}\\n\"\necho -e \"${green}反馈论坛：${re}${yellow}https://bbs.vps8.me${re}\\n\"\necho -e \"${green}TG反馈群组：${re}${yellow}https://t.me/vps888${re}\\n\"\npurple \"转载请著名出处，请勿滥用\\n\"\nsleep 3 \nrm -rf boot.log config.json sb.log core tunnel.yml tunnel.json fake_useragent_0.2.0.json\n\n}\n\ninstall_singbox() {\n    clear\n    cd $WORKDIR\n    argo_configure\n    generate_config\n    download_singbox\n    get_links\n}\ninstall_singbox\n"
        },
        {
          "name": "sb_serv00.sh",
          "type": "blob",
          "size": 15.736328125,
          "content": "#!/bin/bash\n\nre=\"\\033[0m\"\nred=\"\\033[1;91m\"\ngreen=\"\\e[1;32m\"\nyellow=\"\\e[1;33m\"\npurple=\"\\e[1;35m\"\nred() { echo -e \"\\e[1;91m$1\\033[0m\"; }\ngreen() { echo -e \"\\e[1;32m$1\\033[0m\"; }\nyellow() { echo -e \"\\e[1;33m$1\\033[0m\"; }\npurple() { echo -e \"\\e[1;35m$1\\033[0m\"; }\nreading() { read -p \"$(red \"$1\")\" \"$2\"; }\nexport LC_ALL=C\nUSERNAME=$(whoami)\nHOSTNAME=$(hostname)\nexport UUID=${UUID:-'bc97f674-c578-4940-9234-0a1da46041b0'}\nexport NEZHA_SERVER=${NEZHA_SERVER:-''} \nexport NEZHA_PORT=${NEZHA_PORT:-'5555'}     \nexport NEZHA_KEY=${NEZHA_KEY:-''} \nexport ARGO_DOMAIN=${ARGO_DOMAIN:-''}   \nexport ARGO_AUTH=${ARGO_AUTH:-''}\nexport CFIP=${CFIP:-'www.visa.com.tw'} \nexport CFPORT=${CFPORT:-'443'} \n\n[[ \"$HOSTNAME\" == \"s1.ct8.pl\" ]] && WORKDIR=\"domains/${USERNAME}.ct8.pl/logs\" || WORKDIR=\"domains/${USERNAME}.serv00.net/logs\"\n[ -d \"$WORKDIR\" ] || (mkdir -p \"$WORKDIR\" && chmod 777 \"$WORKDIR\")\nbash -c 'ps aux | grep $(whoami) | grep -v \"sshd\\|bash\\|grep\" | awk \"{print \\$2}\" | xargs -r kill -9 >/dev/null 2>&1' >/dev/null 2>&1\n\nread_vmess_port() {\n    while true; do\n        reading \"请输入vmess端口 (面板开放的tcp端口): \" vmess_port\n        if [[ \"$vmess_port\" =~ ^[0-9]+$ ]] && [ \"$vmess_port\" -ge 1 ] && [ \"$vmess_port\" -le 65535 ]; then\n            green \"你的vmess端口为: $vmess_port\"\n            break\n        else\n            yellow \"输入错误，请重新输入面板开放的TCP端口\"\n        fi\n    done\n}\n\nread_hy2_port() {\n    while true; do\n        reading \"请输入hysteria2端口 (面板开放的UDP端口): \" hy2_port\n        if [[ \"$hy2_port\" =~ ^[0-9]+$ ]] && [ \"$hy2_port\" -ge 1 ] && [ \"$hy2_port\" -le 65535 ]; then\n            green \"你的hysteria2端口为: $hy2_port\"\n            break\n        else\n            yellow \"输入错误，请重新输入面板开放的UDP端口\"\n        fi\n    done\n}\n\nread_tuic_port() {\n    while true; do\n        reading \"请输入Tuic端口 (面板开放的UDP端口): \" tuic_port\n        if [[ \"$tuic_port\" =~ ^[0-9]+$ ]] && [ \"$tuic_port\" -ge 1 ] && [ \"$tuic_port\" -le 65535 ]; then\n            green \"你的tuic端口为: $tuic_port\"\n            break\n        else\n            yellow \"输入错误，请重新输入面板开放的UDP端口\"\n        fi\n    done\n}\n\nread_nz_variables() {\n  if [ -n \"$NEZHA_SERVER\" ] && [ -n \"$NEZHA_PORT\" ] && [ -n \"$NEZHA_KEY\" ]; then\n      green \"使用自定义变量哪吒运行哪吒探针\"\n      return\n  else\n      reading \"是否需要安装哪吒探针？【y/n】: \" nz_choice\n      [[ -z $nz_choice ]] && return\n      [[ \"$nz_choice\" != \"y\" && \"$nz_choice\" != \"Y\" ]] && return\n      reading \"请输入哪吒探针域名或ip：\" NEZHA_SERVER\n      green \"你的哪吒域名为: $NEZHA_SERVER\"\n      reading \"请输入哪吒探针端口（回车跳过默认使用5555）：\" NEZHA_PORT\n      [[ -z $NEZHA_PORT ]] && NEZHA_PORT=\"5555\"\n      green \"你的哪吒端口为: $NEZHA_PORT\"\n      reading \"请输入哪吒探针密钥：\" NEZHA_KEY\n      green \"你的哪吒密钥为: $NEZHA_KEY\"\n  fi\n}\n\ninstall_singbox() {\necho -e \"${yellow}本脚本同时四协议共存${purple}(vmess-ws,vmess-ws-tls(argo),hysteria2,tuic)${re}\"\necho -e \"${yellow}开始运行前，请确保在面板${purple}已开放3个端口，一个tcp端口和两个udp端口${re}\"\necho -e \"${yellow}面板${purple}Additional services中的Run your own applications${yellow}已开启为${purplw}Enabled${yellow}状态${re}\"\nreading \"\\n确定继续安装吗？【y/n】: \" choice\n  case \"$choice\" in\n    [Yy])\n        cd $WORKDIR\n        read_nz_variables\n        read_vmess_port\n        read_hy2_port\n        read_tuic_port\n        argo_configure\n        generate_config\n        download_singbox\n        get_links\n      ;;\n    [Nn]) exit 0 ;;\n    *) red \"无效的选择，请输入y或n\" && menu ;;\n  esac\n}\n\nuninstall_singbox() {\n  reading \"\\n确定要卸载吗？【y/n】: \" choice\n    case \"$choice\" in\n        [Yy])\n\t      ps aux | grep $(whoami) | grep -v \"sshd\\|bash\\|grep\" | awk '{print $2}' | xargs -r kill -9 2>/dev/null\n       \t      rm -rf $WORKDIR\n\t      clear\n       \t      green “四合一已完全卸载”\n          ;;\n        [Nn]) exit 0 ;;\n    \t  *) red \"无效的选择，请输入y或n\" && menu ;;\n    esac\n}\n\nkill_all_tasks() {\nreading \"\\n清理所有进程将退出ssh连接，确定继续清理吗？【y/n】: \" choice\n  case \"$choice\" in\n    [Yy]) killall -9 -u $(whoami) ;;\n       *) menu ;;\n  esac\n}\n\n# Generating argo Config\nargo_configure() {\n  if [[ -z $ARGO_AUTH || -z $ARGO_DOMAIN ]]; then\n      reading \"是否需要使用固定argo隧道？【y/n】: \" argo_choice\n      [[ -z $argo_choice ]] && return\n      [[ \"$argo_choice\" != \"y\" && \"$argo_choice\" != \"Y\" && \"$argo_choice\" != \"n\" && \"$argo_choice\" != \"N\" ]] && { red \"无效的选择，请输入y或n\"; return; }\n      if [[ \"$argo_choice\" == \"y\" || \"$argo_choice\" == \"Y\" ]]; then\n          reading \"请输入argo固定隧道域名: \" ARGO_DOMAIN\n          green \"你的argo固定隧道域名为: $ARGO_DOMAIN\"\n          reading \"请输入argo固定隧道密钥（Json或Token）: \" ARGO_AUTH\n          green \"你的argo固定隧道密钥为: $ARGO_AUTH\"\n\t  echo -e \"${red}注意：${purple}使用token，需要在cloudflare后台设置隧道端口和面板开放的tcp端口一致${re}\"\n      else\n          green \"ARGO隧道变量未设置，将使用临时隧道\"\n          return\n      fi\n  fi\n\n  if [[ $ARGO_AUTH =~ TunnelSecret ]]; then\n    echo $ARGO_AUTH > tunnel.json\n    cat > tunnel.yml << EOF\ntunnel: $(cut -d\\\" -f12 <<< \"$ARGO_AUTH\")\ncredentials-file: tunnel.json\nprotocol: http2\n\ningress:\n  - hostname: $ARGO_DOMAIN\n    service: http://localhost:$vmess_port\n    originRequest:\n      noTLSVerify: true\n  - service: http_status:404\nEOF\n  else\n    green \"ARGO_AUTH mismatch TunnelSecret,use token connect to tunnel\"\n  fi\n}\n\n# Generating Configuration Files\ngenerate_config() {\n\n  openssl ecparam -genkey -name prime256v1 -out \"private.key\"\n  openssl req -new -x509 -days 3650 -key \"private.key\" -out \"cert.pem\" -subj \"/CN=$USERNAME.serv00.net\"\n  \n  yellow \"获取可用IP中，请稍等...\"\n  available_ip=$(get_ip)\n  purple \"当前选择IP为：$available_ip 如安装完后节点不通可尝试重新安装\"\n  \n  cat > config.json << EOF\n{\n  \"log\": {\n    \"disabled\": true,\n    \"level\": \"info\",\n    \"timestamp\": true\n  },\n  \"dns\": {\n    \"servers\": [\n      {\n        \"address\": \"8.8.8.8\",\n        \"address_resolver\": \"local\"\n      },\n      {\n        \"tag\": \"local\",\n        \"address\": \"local\"\n      }\n    ]\n  },\n    \"inbounds\": [\n    {\n       \"tag\": \"hysteria-in\",\n       \"type\": \"hysteria2\",\n       \"listen\": \"$available_ip\",\n       \"listen_port\": $hy2_port,\n       \"users\": [\n         {\n             \"password\": \"$UUID\"\n         }\n     ],\n     \"masquerade\": \"https://bing.com\",\n     \"tls\": {\n         \"enabled\": true,\n         \"alpn\": [\n             \"h3\"\n         ],\n         \"certificate_path\": \"cert.pem\",\n         \"key_path\": \"private.key\"\n        }\n    },\n    {\n      \"tag\": \"vmess-ws-in\",\n      \"type\": \"vmess\",\n      \"listen\": \"::\",\n      \"listen_port\": $vmess_port,\n      \"users\": [\n      {\n        \"uuid\": \"$UUID\"\n      }\n    ],\n    \"transport\": {\n      \"type\": \"ws\",\n      \"path\": \"/vmess-argo\",\n      \"early_data_header_name\": \"Sec-WebSocket-Protocol\"\n      }\n    },\n    {\n      \"tag\": \"tuic-in\",\n      \"type\": \"tuic\",\n      \"listen\": \"$available_ip\",\n      \"listen_port\": $tuic_port,\n      \"users\": [\n        {\n          \"uuid\": \"$UUID\",\n          \"password\": \"admin123\"\n        }\n      ],\n      \"congestion_control\": \"bbr\",\n      \"tls\": {\n        \"enabled\": true,\n        \"alpn\": [\n          \"h3\"\n        ],\n        \"certificate_path\": \"cert.pem\",\n        \"key_path\": \"private.key\"\n      }\n    }\n\n ],\n  \"outbounds\": [\n    {\n      \"tag\": \"direct\",\n      \"type\": \"direct\"\n    },\n    {\n      \"tag\": \"block\",\n      \"type\": \"block\"\n    }\n  ]\n}\nEOF\n}\n\n# Download Dependency Files\ndownload_singbox() {\n  ARCH=$(uname -m) && DOWNLOAD_DIR=\".\" && mkdir -p \"$DOWNLOAD_DIR\" && FILE_INFO=()\n  if [ \"$ARCH\" == \"arm\" ] || [ \"$ARCH\" == \"arm64\" ] || [ \"$ARCH\" == \"aarch64\" ]; then\n      FILE_INFO=(\"https://github.com/eooce/test/releases/download/arm64/sb web\" \"https://github.com/eooce/test/releases/download/arm64/bot13 bot\" \"https://github.com/eooce/test/releases/download/ARM/swith npm\")\n  elif [ \"$ARCH\" == \"amd64\" ] || [ \"$ARCH\" == \"x86_64\" ] || [ \"$ARCH\" == \"x86\" ]; then\n      FILE_INFO=(\"https://github.com/eooce/test/releases/download/freebsd/sb web\" \"https://github.com/eooce/test/releases/download/freebsd/server bot\" \"https://github.com/eooce/test/releases/download/freebsd/npm npm\")\n  else\n      echo \"Unsupported architecture: $ARCH\"\n      exit 1\n  fi\ndeclare -A FILE_MAP\ngenerate_random_name() {\n    local chars=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\n    local name=\"\"\n    for i in {1..6}; do\n        name=\"$name${chars:RANDOM%${#chars}:1}\"\n    done\n    echo \"$name\"\n}\n\ndownload_with_fallback() {\n    local URL=$1\n    local NEW_FILENAME=$2\n\n    curl -L -sS --max-time 2 -o \"$NEW_FILENAME\" \"$URL\" &\n    CURL_PID=$!\n    CURL_START_SIZE=$(stat -c%s \"$NEW_FILENAME\" 2>/dev/null || echo 0)\n    \n    sleep 1\n    CURL_CURRENT_SIZE=$(stat -c%s \"$NEW_FILENAME\" 2>/dev/null || echo 0)\n    \n    if [ \"$CURL_CURRENT_SIZE\" -le \"$CURL_START_SIZE\" ]; then\n        kill $CURL_PID 2>/dev/null\n        wait $CURL_PID 2>/dev/null\n        wget -q -O \"$NEW_FILENAME\" \"$URL\"\n        echo -e \"\\e[1;32mDownloading $NEW_FILENAME by wget\\e[0m\"\n    else\n        wait $CURL_PID\n        echo -e \"\\e[1;32mDownloading $NEW_FILENAME by curl\\e[0m\"\n    fi\n}\n\nfor entry in \"${FILE_INFO[@]}\"; do\n    URL=$(echo \"$entry\" | cut -d ' ' -f 1)\n    RANDOM_NAME=$(generate_random_name)\n    NEW_FILENAME=\"$DOWNLOAD_DIR/$RANDOM_NAME\"\n    \n    if [ -e \"$NEW_FILENAME\" ]; then\n        echo -e \"\\e[1;32m$NEW_FILENAME already exists, Skipping download\\e[0m\"\n    else\n        download_with_fallback \"$URL\" \"$NEW_FILENAME\"\n    fi\n    \n    chmod +x \"$NEW_FILENAME\"\n    FILE_MAP[$(echo \"$entry\" | cut -d ' ' -f 2)]=\"$NEW_FILENAME\"\ndone\nwait\n\nif [ -e \"$(basename ${FILE_MAP[npm]})\" ]; then\n    tlsPorts=(\"443\" \"8443\" \"2096\" \"2087\" \"2083\" \"2053\")\n    if [[ \"${tlsPorts[*]}\" =~ \"${NEZHA_PORT}\" ]]; then\n      NEZHA_TLS=\"--tls\"\n    else\n      NEZHA_TLS=\"\"\n    fi\n    if [ -n \"$NEZHA_SERVER\" ] && [ -n \"$NEZHA_PORT\" ] && [ -n \"$NEZHA_KEY\" ]; then\n        export TMPDIR=$(pwd)\n        nohup ./\"$(basename ${FILE_MAP[npm]})\" -s ${NEZHA_SERVER}:${NEZHA_PORT} -p ${NEZHA_KEY} ${NEZHA_TLS} >/dev/null 2>&1 &\n        sleep 2\n        pgrep -x \"$(basename ${FILE_MAP[npm]})\" > /dev/null && green \"$(basename ${FILE_MAP[npm]}) is running\" || { red \"$(basename ${FILE_MAP[npm]}) is not running, restarting...\"; pkill -x \"$(basename ${FILE_MAP[npm]})\" && nohup ./\"$(basename ${FILE_MAP[npm]})\" -s \"${NEZHA_SERVER}:${NEZHA_PORT}\" -p \"${NEZHA_KEY}\" ${NEZHA_TLS} >/dev/null 2>&1 & sleep 2; purple \"$(basename ${FILE_MAP[npm]}) restarted\"; }\n    else\n        purple \"NEZHA variable is empty, skipping running\"\n    fi\nfi\n\nif [ -e \"$(basename ${FILE_MAP[web]})\" ]; then\n    nohup ./\"$(basename ${FILE_MAP[web]})\" run -c config.json >/dev/null 2>&1 &\n    sleep 2\n    pgrep -x \"$(basename ${FILE_MAP[web]})\" > /dev/null && green \"$(basename ${FILE_MAP[web]}) is running\" || { red \"$(basename ${FILE_MAP[web]}) is not running, restarting...\"; pkill -x \"$(basename ${FILE_MAP[web]})\" && nohup ./\"$(basename ${FILE_MAP[web]})\" run -c config.json >/dev/null 2>&1 & sleep 2; purple \"$(basename ${FILE_MAP[web]}) restarted\"; }\nfi\n\nif [ -e \"$(basename ${FILE_MAP[bot]})\" ]; then\n    if [[ $ARGO_AUTH =~ ^[A-Z0-9a-z=]{120,250}$ ]]; then\n      args=\"tunnel --edge-ip-version auto --no-autoupdate --protocol http2 run --token ${ARGO_AUTH}\"\n    elif [[ $ARGO_AUTH =~ TunnelSecret ]]; then\n      args=\"tunnel --edge-ip-version auto --config tunnel.yml run\"\n    else\n      args=\"tunnel --edge-ip-version auto --no-autoupdate --protocol http2 --logfile boot.log --loglevel info --url http://localhost:$vmess_port\"\n    fi\n    nohup ./\"$(basename ${FILE_MAP[bot]})\" $args >/dev/null 2>&1 &\n    sleep 2\n    pgrep -x \"$(basename ${FILE_MAP[bot]})\" > /dev/null && green \"$(basename ${FILE_MAP[bot]}) is running\" || { red \"$(basename ${FILE_MAP[bot]}) is not running, restarting...\"; pkill -x \"$(basename ${FILE_MAP[bot]})\" && nohup ./\"$(basename ${FILE_MAP[bot]})\" \"${args}\" >/dev/null 2>&1 & sleep 2; purple \"$(basename ${FILE_MAP[bot]}) restarted\"; }\nfi\nsleep 2\nrm -f \"$(basename ${FILE_MAP[npm]})\" \"$(basename ${FILE_MAP[web]})\" \"$(basename ${FILE_MAP[bot]})\"\n}\n\nget_argodomain() {\n  if [[ -n $ARGO_AUTH ]]; then\n    echo \"$ARGO_DOMAIN\"\n  else\n    local retry=0\n    local max_retries=6\n    local argodomain=\"\"\n    while [[ $retry -lt $max_retries ]]; do\n      ((retry++))\n      argodomain=$(grep -oE 'https://[[:alnum:]+\\.-]+\\.trycloudflare\\.com' boot.log | sed 's@https://@@') \n      if [[ -n $argodomain ]]; then\n        break\n      fi\n      sleep 1\n    done\n    echo \"$argodomain\"\n  fi\n}\n\nget_ip() {\n    IP_LIST=($(devil vhost list | awk '/^[0-9]+/ {print $1}'))\n    API_URL=\"https://status.eooce.com/api\"\n    IP=\"\"\n    THIRD_IP=${IP_LIST[2]}\n    RESPONSE=$(curl -s --max-time 2 \"${API_URL}/${THIRD_IP}\")\n    if [[ $(echo \"$RESPONSE\" | jq -r '.status') == \"Available\" ]]; then\n        IP=$THIRD_IP\n    else\n        FIRST_IP=${IP_LIST[0]}\n        RESPONSE=$(curl -s --max-time 2 \"${API_URL}/${FIRST_IP}\")\n        \n        if [[ $(echo \"$RESPONSE\" | jq -r '.status') == \"Available\" ]]; then\n            IP=$FIRST_IP\n        else\n            IP=${IP_LIST[1]}\n        fi\n    fi\n    echo \"$IP\"\n}\n\nget_links(){\nargodomain=$(get_argodomain)\necho -e \"\\e[1;32mArgoDomain:\\e[1;35m${argodomain}\\e[0m\\n\"\nISP=$(curl -s --max-time 1.5 https://speed.cloudflare.com/meta | awk -F\\\" '{print $26}' | sed -e 's/ /_/g' || echo \"0\")\nget_name() { if [ \"$HOSTNAME\" = \"s1.ct8.pl\" ]; then SERVER=\"CT8\"; else SERVER=$(echo \"$HOSTNAME\" | cut -d '.' -f 1); fi; echo \"$SERVER\"; }\nNAME=\"$ISP-$(get_name)\"\nyellow \"注意：v2ray或其他软件的跳过证书验证需设置为true,否则hy2或tuic节点可能不通\\n\"\ncat > list.txt <<EOF\nvmess://$(echo \"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"$NAME-vmess\\\", \\\"add\\\": \\\"$available_ip\\\", \\\"port\\\": \\\"$vmess_port\\\", \\\"id\\\": \\\"$UUID\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"none\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"none\\\", \\\"host\\\": \\\"\\\", \\\"path\\\": \\\"/vmess-argo?ed=2048\\\", \\\"tls\\\": \\\"\\\", \\\"sni\\\": \\\"\\\", \\\"alpn\\\": \\\"\\\", \\\"fp\\\": \\\"\\\"}\" | base64 -w0)\n\nvmess://$(echo \"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"$NAME-vmess-argo\\\", \\\"add\\\": \\\"$CFIP\\\", \\\"port\\\": \\\"$CFPORT\\\", \\\"id\\\": \\\"$UUID\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"none\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"none\\\", \\\"host\\\": \\\"$argodomain\\\", \\\"path\\\": \\\"/vmess-argo?ed=2048\\\", \\\"tls\\\": \\\"tls\\\", \\\"sni\\\": \\\"$argodomain\\\", \\\"alpn\\\": \\\"\\\", \\\"fp\\\": \\\"\\\"}\" | base64 -w0)\n\nhysteria2://$UUID@$available_ip:$hy2_port/?sni=www.bing.com&alpn=h3&insecure=1#$NAME-hysteria2\n\ntuic://$UUID:admin123@$available_ip:$tuic_port?sni=www.bing.com&congestion_control=bbr&udp_relay_mode=native&alpn=h3&allow_insecure=1#$NAME-tuic\nEOF\ncat list.txt\npurple \"\\n$WORKDIR/list.txt saved successfully\"\npurple \"Running done!\"\nsleep 2\nrm -rf boot.log config.json sb.log core tunnel.yml tunnel.json fake_useragent_0.2.0.json\n}\n\nmenu() {\n   clear\n   echo \"\"\n   purple \"=== Serv00|ct8老王sing-box一键四合一安装脚本 ===\\n\"\n   echo -e \"${green}脚本地址：${re}${yellow}https://github.com/eooce/Sing-box${re}\\n\"\n   echo -e \"${green}反馈论坛：${re}${yellow}https://bbs.vps8.me${re}\\n\"\n   echo -e \"${green}TG反馈群组：${re}${yellow}https://t.me/vps888${re}\\n\"\n   purple \"转载请著名出处，请勿滥用\\n\"\n   green \"1. 安装sing-box\"\n   echo  \"===============\"\n   red \"2. 卸载sing-box\"\n   echo  \"===============\"\n   green \"3. 查看节点信息\"\n   echo  \"===============\"\n   yellow \"4. 清理所有进程\"\n   echo  \"===============\"\n   red \"0. 退出脚本\"\n   echo \"===========\"\n   reading \"请输入选择(0-3): \" choice\n   echo \"\"\n    case \"${choice}\" in\n        1) install_singbox ;;\n        2) uninstall_singbox ;; \n        3) cat $WORKDIR/list.txt ;; \n\t4) kill_all_tasks ;;\n        0) exit 0 ;;\n        *) red \"无效的选项，请输入 0 到 4\" ;;\n    esac\n}\nmenu\n"
        },
        {
          "name": "sing-box.sh",
          "type": "blob",
          "size": 48.171875,
          "content": "#!/bin/bash\n\n# 定义颜色\nre=\"\\033[0m\"\nred=\"\\033[1;91m\"\ngreen=\"\\e[1;32m\"\nyellow=\"\\e[1;33m\"\npurple=\"\\e[1;35m\"\nskybule=\"\\e[1;36m\"\nred() { echo -e \"\\e[1;91m$1\\033[0m\"; }\ngreen() { echo -e \"\\e[1;32m$1\\033[0m\"; }\nyellow() { echo -e \"\\e[1;33m$1\\033[0m\"; }\npurple() { echo -e \"\\e[1;35m$1\\033[0m\"; }\nskyblue() { echo -e \"\\e[1;36m$1\\033[0m\"; }\nreading() { read -p \"$(red \"$1\")\" \"$2\"; }\n\n# 定义常量\nserver_name=\"sing-box\"\nwork_dir=\"/etc/sing-box\"\nconfig_dir=\"${work_dir}/config.json\"\nclient_dir=\"${work_dir}/url.txt\"\nexport vless_port=${PORT:-$(shuf -i 1000-65000 -n 1)}\nexport CFIP=${CFIP:-'www.visa.com.tw'} \nexport CFPORT=${CFPORT:-'443'} \n\n# 检查是否为root下运行\n[[ $EUID -ne 0 ]] && red \"请在root用户下运行脚本\" && exit 1\n\n# 检查 sing-box 是否已安装\ncheck_singbox() {\nif [ -f \"${work_dir}/${server_name}\" ]; then\n    if [ -f /etc/alpine-release ]; then\n        rc-service sing-box status | grep -q \"started\" && green \"running\" && return 0 || yellow \"not running\" && return 1\n    else \n        [ \"$(systemctl is-active sing-box)\" = \"active\" ] && green \"running\" && return 0 || yellow \"not running\" && return 1\n    fi\nelse\n    red \"not installed\"\n    return 2\nfi\n}\n\n# 检查 argo 是否已安装\ncheck_argo() {\nif [ -f \"${work_dir}/argo\" ]; then\n    if [ -f /etc/alpine-release ]; then\n        rc-service argo status | grep -q \"started\" && green \"running\" && return 0 || yellow \"not running\" && return 1\n    else \n        [ \"$(systemctl is-active argo)\" = \"active\" ] && green \"running\" && return 0 || yellow \"not running\" && return 1\n    fi\nelse\n    red \"not installed\"\n    return 2\nfi\n}\n\n# 检查 nginx 是否已安装\ncheck_nginx() {\nif command -v nginx &>/dev/null; then\n    if [ -f /etc/alpine-release ]; then\n        rc-service nginx status | grep -q \"stoped\" && yellow \"not running\" && return 1 || green \"running\" && return 0\n    else \n        [ \"$(systemctl is-active nginx)\" = \"active\" ] && green \"running\" && return 0 || yellow \"not running\" && return 1\n    fi\nelse\n    red \"not installed\"\n    return 2\nfi\n}\n\n#根据系统类型安装、卸载依赖\nmanage_packages() {\n    if [ $# -lt 2 ]; then\n        red \"Unspecified package name or action\" \n        return 1\n    fi\n\n    action=$1\n    shift\n\n    for package in \"$@\"; do\n        if [ \"$action\" == \"install\" ]; then\n            if command -v \"$package\" &>/dev/null; then\n                green \"${package} already installed\"\n                continue\n            fi\n            yellow \"正在安装 ${package}...\"\n            if command -v apt &>/dev/null; then\n                apt install -y \"$package\"\n            elif command -v dnf &>/dev/null; then\n                dnf install -y \"$package\"\n            elif command -v yum &>/dev/null; then\n                yum install -y \"$package\"\n            elif command -v apk &>/dev/null; then\n                apk update\n                apk add \"$package\"\n            else\n                red \"Unknown system!\"\n                return 1\n            fi\n        elif [ \"$action\" == \"uninstall\" ]; then\n            if ! command -v \"$package\" &>/dev/null; then\n                yellow \"${package} is not installed\"\n                continue\n            fi\n            yellow \"正在卸载 ${package}...\"\n            if command -v apt &>/dev/null; then\n                apt remove -y \"$package\" && apt autoremove -y\n            elif command -v dnf &>/dev/null; then\n                dnf remove -y \"$package\" && dnf autoremove -y\n            elif command -v yum &>/dev/null; then\n                yum remove -y \"$package\" && yum autoremove -y\n            elif command -v apk &>/dev/null; then\n                apk del \"$package\"\n            else\n                red \"Unknown system!\"\n                return 1\n            fi\n        else\n            red \"Unknown action: $action\"\n            return 1\n        fi\n    done\n\n    return 0\n}\n\n# 获取ip\nget_realip() {\n  ip=$(curl -s --max-time 2 ipv4.ip.sb)\n  if [ -z \"$ip\" ]; then\n      ipv6=$(curl -s --max-time 1 ipv6.ip.sb)\n      echo \"[$ipv6]\"\n  else\n      if echo \"$(curl -s http://ipinfo.io/org)\" | grep -qE 'Cloudflare|UnReal|AEZA|Andrei'; then\n          ipv6=$(curl -s --max-time 1 ipv6.ip.sb)\n          echo \"[$ipv6]\"\n      else\n          echo \"$ip\"\n      fi\n  fi\n}\n\n# 下载并安装 sing-box,cloudflared\ninstall_singbox() {\n    clear\n    purple \"正在安装sing-box中，请稍后...\"\n    # 判断系统架构\n    ARCH_RAW=$(uname -m)\n    case \"${ARCH_RAW}\" in\n        'x86_64') ARCH='amd64' ;;\n        'x86' | 'i686' | 'i386') ARCH='386' ;;\n        'aarch64' | 'arm64') ARCH='arm64' ;;\n        'armv7l') ARCH='armv7' ;;\n        's390x') ARCH='s390x' ;;\n        *) red \"不支持的架构: ${ARCH_RAW}\"; exit 1 ;;\n    esac\n\n    # 下载sing-box,cloudflared\n    [ ! -d \"${work_dir}\" ] && mkdir -p \"${work_dir}\" && chmod 777 \"${work_dir}\"\n    latest_version=$(curl -s \"https://api.github.com/repos/SagerNet/sing-box/releases\" | jq -r '[.[] | select(.prerelease==false)][0].tag_name | sub(\"^v\"; \"\")')\n    curl -sLo \"${work_dir}/${server_name}.tar.gz\" \"https://github.com/SagerNet/sing-box/releases/download/v${latest_version}/sing-box-${latest_version}-linux-${ARCH}.tar.gz\"\n    curl -sLo \"${work_dir}/qrencode\" \"https://github.com/eooce/test/releases/download/${ARCH}/qrencode-linux-${ARCH}\"\n    curl -sLo \"${work_dir}/argo\" \"https://github.com/eooce/test/releases/download/$ARCH/bot13\"\n    tar -xzvf \"${work_dir}/${server_name}.tar.gz\" -C \"${work_dir}/\" && \\\n    mv \"${work_dir}/sing-box-${latest_version}-linux-${ARCH}/sing-box\" \"${work_dir}/\" && \\\n    rm -rf \"${work_dir}/${server_name}.tar.gz\" \"${work_dir}/sing-box-${latest_version}-linux-${ARCH}\"\n    chown root:root ${work_dir} && chmod +x ${work_dir}/${server_name} ${work_dir}/argo ${work_dir}/qrencode\n\n   # 生成随机端口和密码\n    nginx_port=$(($vless_port + 1)) \n    tuic_port=$(($vless_port + 2))\n    hy2_port=$(($vless_port + 3)) \n    uuid=$(cat /proc/sys/kernel/random/uuid)\n    password=$(< /dev/urandom tr -dc 'A-Za-z0-9' | head -c 24)\n    output=$(/etc/sing-box/sing-box generate reality-keypair)\n    private_key=$(echo \"${output}\" | awk '/PrivateKey:/ {print $2}')\n    public_key=$(echo \"${output}\" | awk '/PublicKey:/ {print $2}')\n\n    iptables -F > /dev/null 2>&1 && iptables -P INPUT ACCEPT > /dev/null 2>&1 && iptables -P FORWARD ACCEPT > /dev/null 2>&1 && iptables -P OUTPUT ACCEPT > /dev/null 2>&1\n    command -v ip6tables &> /dev/null && ip6tables -F > /dev/null 2>&1 && ip6tables -P INPUT ACCEPT > /dev/null 2>&1 && ip6tables -P FORWARD ACCEPT > /dev/null 2>&1 && ip6tables -P OUTPUT ACCEPT > /dev/null 2>&1\n    \n    manage_packages uninstall ufw firewalld > /dev/null 2>&1\n\n    # 生成自签名证书\n    openssl ecparam -genkey -name prime256v1 -out \"${work_dir}/private.key\"\n    openssl req -new -x509 -days 3650 -key \"${work_dir}/private.key\" -out \"${work_dir}/cert.pem\" -subj \"/CN=bing.com\"\n\n   # 生成配置文件\ncat > \"${config_dir}\" << EOF\n{\n  \"log\": {\n    \"disabled\": false,\n    \"level\": \"info\",\n    \"output\": \"$work_dir/sb.log\",\n    \"timestamp\": true\n  },\n  \"dns\": {\n    \"servers\": [\n      {\n        \"tag\": \"google\",\n        \"address\": \"tls://8.8.8.8\"\n      }\n    ]\n  },\n  \"inbounds\": [\n    {\n        \"tag\": \"vless-reality-vesion\",\n        \"type\": \"vless\",\n        \"listen\": \"::\",\n        \"listen_port\": $vless_port,\n        \"users\": [\n            {\n              \"uuid\": \"$uuid\",\n              \"flow\": \"xtls-rprx-vision\"\n            }\n        ],\n        \"tls\": {\n            \"enabled\": true,\n            \"server_name\": \"www.iij.ad.jp\",\n            \"reality\": {\n                \"enabled\": true,\n                \"handshake\": {\n                    \"server\": \"www.iij.ad.jp\",\n                    \"server_port\": 443\n                },\n                \"private_key\": \"$private_key\",\n                \"short_id\": [\n                  \"\"\n                ]\n            }\n        }\n    },\n    {\n        \"tag\": \"vmess-ws\",\n        \"type\": \"vmess\",\n        \"listen\": \"::\",\n        \"listen_port\": 8001,\n        \"users\": [\n        {\n            \"uuid\": \"$uuid\"\n        }\n    ],\n    \"transport\": {\n        \"type\": \"ws\",\n        \"path\": \"/vmess-argo\",\n        \"early_data_header_name\": \"Sec-WebSocket-Protocol\"\n        }\n    },\n    {\n        \"tag\": \"hysteria2\",\n        \"type\": \"hysteria2\",\n        \"listen\": \"::\",\n        \"listen_port\": $hy2_port,\n        \"sniff\": true,\n        \"sniff_override_destination\": false,\n        \"users\": [\n            {\n                \"password\": \"$uuid\"\n            }\n        ],\n        \"ignore_client_bandwidth\":false,\n        \"masquerade\": \"https://bing.com\",\n        \"tls\": {\n            \"enabled\": true,\n            \"alpn\": [\n                \"h3\"\n            ],\n            \"min_version\":\"1.3\",\n            \"max_version\":\"1.3\",\n            \"certificate_path\": \"$work_dir/cert.pem\",\n            \"key_path\": \"$work_dir/private.key\"\n        }\n\n    },\n    {\n        \"tag\": \"tuic\",\n        \"type\": \"tuic\",\n        \"listen\": \"::\",\n        \"listen_port\": $tuic_port,\n        \"users\": [\n          {\n            \"uuid\": \"$uuid\",\n            \"password\": \"$password\"\n          }\n        ],\n        \"congestion_control\": \"bbr\",\n        \"tls\": {\n            \"enabled\": true,\n            \"alpn\": [\n                \"h3\"\n            ],\n        \"certificate_path\": \"$work_dir/cert.pem\",\n        \"key_path\": \"$work_dir/private.key\"\n       }\n    }\n  ],\n  \"outbounds\": [\n    {\n      \"type\": \"direct\",\n      \"tag\": \"direct\"\n    },\n    {\n      \"type\": \"direct\",\n      \"tag\": \"direct-ipv4-prefer-out\",\n      \"domain_strategy\": \"prefer_ipv4\"\n    },\n    {\n      \"type\": \"direct\",\n      \"tag\": \"direct-ipv4-only-out\",\n      \"domain_strategy\": \"ipv4_only\"\n    },\n    {\n      \"type\": \"direct\",\n      \"tag\": \"direct-ipv6-prefer-out\",\n      \"domain_strategy\": \"prefer_ipv6\"\n    },\n    {\n      \"type\": \"direct\",\n      \"tag\": \"direct-ipv6-only-out\",\n      \"domain_strategy\": \"ipv6_only\"\n    },\n    {\n      \"type\": \"wireguard\",\n      \"tag\": \"wireguard-out\",\n      \"server\": \"engage.cloudflareclient.com\",\n      \"server_port\": 2408,\n      \"local_address\": [\n        \"172.16.0.2/32\",\n        \"2606:4700:110:812a:4929:7d2a:af62:351c/128\"\n      ],\n      \"private_key\": \"gBthRjevHDGyV0KvYwYE52NIPy29sSrVr6rcQtYNcXA=\",\n      \"peer_public_key\": \"bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=\",\n      \"reserved\": [\n        6,\n        146,\n        6\n      ]\n    },\n    {\n      \"type\": \"direct\",\n      \"tag\": \"wireguard-ipv4-prefer-out\",\n      \"detour\": \"wireguard-out\",\n      \"domain_strategy\": \"prefer_ipv4\"\n    },\n    {\n      \"type\": \"direct\",\n      \"tag\": \"wireguard-ipv4-only-out\",\n      \"detour\": \"wireguard-out\",\n      \"domain_strategy\": \"ipv4_only\"\n    },\n    {\n      \"type\": \"direct\",\n      \"tag\": \"wireguard-ipv6-prefer-out\",\n      \"detour\": \"wireguard-out\",\n      \"domain_strategy\": \"prefer_ipv6\"\n    },\n    {\n      \"type\": \"direct\",\n      \"tag\": \"wireguard-ipv6-only-out\",\n      \"detour\": \"wireguard-out\",\n      \"domain_strategy\": \"ipv6_only\"\n    }\n  ],\n  \"route\": {\n    \"rule_set\": [\n      {\n        \"tag\": \"geosite-netflix\",\n        \"type\": \"remote\",\n        \"format\": \"binary\",\n        \"url\": \"https://raw.githubusercontent.com/SagerNet/sing-geosite/rule-set/geosite-netflix.srs\",\n        \"update_interval\": \"1d\"\n      },\n      {\n        \"tag\": \"geosite-openai\",\n        \"type\": \"remote\",\n        \"format\": \"binary\",\n        \"url\": \"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/sing/geo/geosite/openai.srs\",\n        \"update_interval\": \"1d\"\n      }\n    ],\n    \"rules\": [\n      {\n        \"rule_set\": [\n          \"geosite-netflix\"\n        ],\n        \"outbound\": \"wireguard-ipv6-only-out\"\n      },\n      {\n        \"domain\": [\n          \"api.statsig.com\",\n          \"browser-intake-datadoghq.com\",\n          \"cdn.openai.com\",\n          \"chat.openai.com\",\n          \"auth.openai.com\",\n          \"chat.openai.com.cdn.cloudflare.net\",\n          \"ios.chat.openai.com\",\n          \"o33249.ingest.sentry.io\",\n          \"openai-api.arkoselabs.com\",\n          \"openaicom-api-bdcpf8c6d2e9atf6.z01.azurefd.net\",\n          \"openaicomproductionae4b.blob.core.windows.net\",\n          \"production-openaicom-storage.azureedge.net\",\n          \"static.cloudflareinsights.com\"\n        ],\n        \"domain_suffix\": [\n          \".algolia.net\",\n          \".auth0.com\",\n          \".chatgpt.com\",\n          \".challenges.cloudflare.com\",\n          \".client-api.arkoselabs.com\",\n          \".events.statsigapi.net\",\n          \".featuregates.org\",\n          \".identrust.com\",\n          \".intercom.io\",\n          \".intercomcdn.com\",\n          \".launchdarkly.com\",\n          \".oaistatic.com\",\n          \".oaiusercontent.com\",\n          \".observeit.net\",\n          \".openai.com\",\n          \".openaiapi-site.azureedge.net\",\n          \".openaicom.imgix.net\",\n          \".segment.io\",\n          \".sentry.io\",\n          \".stripe.com\"\n        ],\n        \"domain_keyword\": [\n          \"openaicom-api\"\n        ],\n        \"outbound\": \"wireguard-ipv6-prefer-out\"\n      }\n    ],\n    \"final\": \"direct\"\n   },\n   \"experimental\": {\n      \"cache_file\": {\n      \"enabled\": true,\n      \"path\": \"$work_dir/cache.db\",\n      \"cache_id\": \"mycacheid\",\n      \"store_fakeip\": true\n    }\n  }\n}\nEOF\n}\n# debian/ubuntu/centos 守护进程\nmain_systemd_services() {\n    cat > /etc/systemd/system/sing-box.service << EOF\n[Unit]\nDescription=sing-box service\nDocumentation=https://sing-box.sagernet.org\nAfter=network.target nss-lookup.target\n\n[Service]\nUser=root\nWorkingDirectory=/etc/sing-box\nCapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_NET_RAW\nAmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_NET_RAW\nExecStart=/etc/sing-box/sing-box run -c /etc/sing-box/config.json\nExecReload=/bin/kill -HUP \\$MAINPID\nRestart=on-failure\nRestartSec=10\nLimitNOFILE=infinity\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n    cat > /etc/systemd/system/argo.service << EOF\n[Unit]\nDescription=Cloudflare Tunnel\nAfter=network.target\n\n[Service]\nType=simple\nNoNewPrivileges=yes\nTimeoutStartSec=0\nExecStart=/bin/sh -c \"/etc/sing-box/argo tunnel --url http://localhost:8001 --no-autoupdate --edge-ip-version auto --protocol http2 > /etc/sing-box/argo.log 2>&1\"\nRestart=on-failure\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\nEOF\n    if [ -f /etc/centos-release ]; then\n        yum install -y chrony\n        systemctl start chronyd\n        systemctl enable chronyd\n        chronyc -a makestep\n        yum update -y ca-certificates\n        bash -c 'echo \"0 0\" > /proc/sys/net/ipv4/ping_group_range'\n    fi\n    systemctl daemon-reload\n    systemctl enable sing-box\n    systemctl start sing-box\n    systemctl enable argo\n    systemctl start argo\n}\n# 适配alpine 守护进程\nalpine_openrc_services() {\n    cat > /etc/init.d/sing-box << 'EOF'\n#!/sbin/openrc-run\n\ndescription=\"sing-box service\"\ncommand=\"/etc/sing-box/sing-box\"\ncommand_args=\"run -c /etc/sing-box/config.json\"\ncommand_background=true\npidfile=\"/var/run/sing-box.pid\"\nEOF\n\n    cat > /etc/init.d/argo << 'EOF'\n#!/sbin/openrc-run\n\ndescription=\"Cloudflare Tunnel\"\ncommand=\"/bin/sh\"\ncommand_args=\"-c '/etc/sing-box/argo tunnel --url http://localhost:8001 --no-autoupdate --edge-ip-version auto --protocol http2 > /etc/sing-box/argo.log 2>&1'\"\ncommand_background=true\npidfile=\"/var/run/argo.pid\"\nEOF\n\n    chmod +x /etc/init.d/sing-box\n    chmod +x /etc/init.d/argo\n\n    rc-update add sing-box default\n    rc-update add argo default\n\n}\n\nget_info() {  \n  clear\n  server_ip=$(get_realip)\n\n  isp=$(curl -s --max-time 2 https://speed.cloudflare.com/meta | awk -F\\\" '{print $26\"-\"$18}' | sed -e 's/ /_/g' || echo \"vps\")\n\n  if [ -f \"${work_dir}/argo.log\" ]; then\n      for i in {1..5}; do\n          purple \"第 $i 次尝试获取ArgoDoamin中...\"\n          argodomain=$(sed -n 's|.*https://\\([^/]*trycloudflare\\.com\\).*|\\1|p' \"${work_dir}/argo.log\")\n          [ -n \"$argodomain\" ] && break\n          sleep 2\n      done\n  else\n      restart_argo\n      sleep 6\n      argodomain=$(sed -n 's|.*https://\\([^/]*trycloudflare\\.com\\).*|\\1|p' \"${work_dir}/argo.log\")\n  fi\n\n  green \"\\nArgoDomain：${purple}$argodomain${re}\\n\"\n\n  VMESS=\"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"${isp}\\\", \\\"add\\\": \\\"${CFIP}\\\", \\\"port\\\": \\\"${CFPORT}\\\", \\\"id\\\": \\\"${uuid}\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"none\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"none\\\", \\\"host\\\": \\\"${argodomain}\\\", \\\"path\\\": \\\"/vmess-argo?ed=2048\\\", \\\"tls\\\": \\\"tls\\\", \\\"sni\\\": \\\"${argodomain}\\\", \\\"alpn\\\": \\\"\\\", \\\"fp\\\": \\\"randomized\\\", \\\"allowlnsecure\\\": \\\"flase\\\"}\"\n\n  cat > ${work_dir}/url.txt <<EOF\nvless://${uuid}@${server_ip}:${vless_port}?encryption=none&flow=xtls-rprx-vision&security=reality&sni=www.iij.ad.jp&fp=chrome&pbk=${public_key}&type=tcp&headerType=none#${isp}\n\nvmess://$(echo \"$VMESS\" | base64 -w0)\n\nhysteria2://${uuid}@${server_ip}:${hy2_port}/?sni=www.bing.com&insecure=1&alpn=h3&obfs=none#${isp}\n\ntuic://${uuid}:${password}@${server_ip}:${tuic_port}?sni=www.bing.com&congestion_control=bbr&udp_relay_mode=native&alpn=h3&allow_insecure=1#${isp}\nEOF\necho \"\"\nwhile IFS= read -r line; do echo -e \"${purple}$line\"; done < ${work_dir}/url.txt\nbase64 -w0 ${work_dir}/url.txt > ${work_dir}/sub.txt\nyellow \"\\n温馨提醒：需打开V2rayN或其他软件里的 “跳过证书验证”，或将节点的Insecure或TLS里设置为“true”\\n\"\ngreen \"节点订阅链接：http://${server_ip}:${nginx_port}/${password}\\n\\n订阅链接适用于V2rayN,Nekbox,Sterisand,Loon,小火箭,圈X等\\n\"\ngreen \"订阅二维码\"\n$work_dir/qrencode \"http://${server_ip}:${nginx_port}/${password}\"\necho \"\"\n}\n\n# 修复nginx因host无法安装的问题\nfix_nginx() {\n    HOSTNAME=$(hostname)\n    NGINX_CONFIG_FILE=\"/etc/nginx/nginx.conf\"\n    grep -q \"127.0.1.1 $HOSTNAME\" /etc/hosts || echo \"127.0.1.1 $HOSTNAME\" | tee -a /etc/hosts >/dev/null\n    id -u nginx >/dev/null 2>&1 || useradd -r -d /var/www -s /sbin/nologin nginx >/dev/null 2>&1\n    grep -q \"^user nginx;\" $NGINX_CONFIG_FILE || sed -i \"s/^user .*/user nginx;/\" $NGINX_CONFIG_FILE >/dev/null 2>&1\n}\n\n# nginx订阅配置\nadd_nginx_conf() {\ncp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak\n    cat > /etc/nginx/nginx.conf << EOF\n# nginx_conf\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    server {\n      listen $nginx_port;\n      listen [::]:$nginx_port;\n\n    location /$password {\n      alias /etc/sing-box/sub.txt;\n      default_type 'text/plain; charset=utf-8';\n    }\n  }\n}\nEOF\n\nnginx -t > /dev/null\n\nif [ $? -eq 0 ]; then\n    if [ -f /etc/alpine-release ]; then\n     \tpkill -f '[n]ginx'\n        touch /run/nginx.pid\n        nginx -s reload\n        rc-service nginx restart\n    else\n        rm /run/nginx.pid\n        systemctl daemon-reload\n        systemctl restart nginx\n    fi\nfi\n}\n\n# 启动 sing-box\nstart_singbox() {\nif [ ${check_singbox} -eq 1 ]; then\n    yellow \"正在启动 ${server_name} 服务\\n\"\n    if [ -f /etc/alpine-release ]; then\n        rc-service sing-box start\n    else\n        systemctl daemon-reload\n        systemctl start \"${server_name}\"\n    fi\n   if [ $? -eq 0 ]; then\n       green \"${server_name} 服务已成功启动\\n\"\n   else\n       red \"${server_name} 服务启动失败\\n\"\n   fi\nelif [ ${check_singbox} -eq 0 ]; then\n    yellow \"sing-box 正在运行\\n\"\n    sleep 1\n    menu\nelse\n    yellow \"sing-box 尚未安装!\\n\"\n    sleep 1\n    menu\nfi\n}\n\n# 停止 sing-box\nstop_singbox() {\nif [ ${check_singbox} -eq 0 ]; then\n   yellow \"正在停止 ${server_name} 服务\\n\"\n    if [ -f /etc/alpine-release ]; then\n        rc-service sing-box stop\n    else\n        systemctl stop \"${server_name}\"\n    fi\n   if [ $? -eq 0 ]; then\n       green \"${server_name} 服务已成功停止\\n\"\n   else\n       red \"${server_name} 服务停止失败\\n\"\n   fi\n\nelif [ ${check_singbox} -eq 1 ]; then\n    yellow \"sing-box 未运行\\n\"\n    sleep 1\n    menu\nelse\n    yellow \"sing-box 尚未安装！\\n\"\n    sleep 1\n    menu\nfi\n}\n\n# 重启 sing-box\nrestart_singbox() {\nif [ ${check_singbox} -eq 0 ]; then\n   yellow \"正在重启 ${server_name} 服务\\n\"\n    if [ -f /etc/alpine-release ]; then\n        rc-service ${server_name} restart\n    else\n        systemctl daemon-reload\n        systemctl restart \"${server_name}\"\n    fi\n    if [ $? -eq 0 ]; then\n        green \"${server_name} 服务已成功重启\\n\"\n    else\n        red \"${server_name} 服务重启失败\\n\"\n    fi\nelif [ ${check_singbox} -eq 1 ]; then\n    yellow \"sing-box 未运行\\n\"\n    sleep 1\n    menu\nelse\n    yellow \"sing-box 尚未安装！\\n\"\n    sleep 1\n    menu\nfi\n}\n\n# 启动 argo\nstart_argo() {\nif [ ${check_argo} -eq 1 ]; then\n    yellow \"正在启动 Argo 服务\\n\"\n    if [ -f /etc/alpine-release ]; then\n        rc-service argo start\n    else\n        systemctl daemon-reload\n        systemctl start argo\n    fi\n    if [ $? -eq 0 ]; then\n        green \"Argo 服务已成功重启\\n\"\n    else\n        red \"Argo 服务重启失败\\n\"\n    fi\nelif [ ${check_argo} -eq 0 ]; then\n    green \"Argo 服务正在运行\\n\"\n    sleep 1\n    menu\nelse\n    yellow \"Argo 尚未安装！\\n\"\n    sleep 1\n    menu\nfi\n}\n\n# 停止 argo\nstop_argo() {\nif [ ${check_argo} -eq 0 ]; then\n    yellow \"正在停止 Argo 服务\\n\"\n    if [ -f /etc/alpine-release ]; then\n        rc-service stop start\n    else\n        systemctl daemon-reload\n        systemctl stop argo\n    fi\n    if [ $? -eq 0 ]; then\n        green \"Argo 服务已成功停止\\n\"\n    else\n        red \"Argo 服务停止失败\\n\"\n    fi\nelif [ ${check_argo} -eq 1 ]; then\n    yellow \"Argo 服务未运行\\n\"\n    sleep 1\n    menu\nelse\n    yellow \"Argo 尚未安装！\\n\"\n    sleep 1\n    menu\nfi\n}\n\n# 重启 argo\nrestart_argo() {\nif [ ${check_argo} -eq 0 ]; then\n    yellow \"正在重启 Argo 服务\\n\"\n    if [ -f /etc/alpine-release ]; then\n        rc-service argo restart\n    else\n        systemctl daemon-reload\n        systemctl restart argo\n    fi\n    if [ $? -eq 0 ]; then\n        green \"Argo 服务已成功重启\\n\"\n    else\n        red \"Argo 服务重启失败\\n\"\n    fi\nelif [ ${check_argo} -eq 1 ]; then\n    yellow \"Argo 服务未运行\\n\"\n    sleep 1\n    menu\nelse\n    yellow \"Argo 尚未安装！\\n\"\n    sleep 1\n    menu\nfi\n}\n\n# 启动 nginx\nstart_nginx() {\nif command -v nginx &>/dev/null; then\n    yellow \"正在启动 nginx 服务\\n\"\n    if [ -f /etc/alpine-release ]; then\n        rc-service nginx start\n    else\n        systemctl daemon-reload\n        systemctl start nginx\n    fi\n    if [ $? -eq 0 ]; then\n        green \"Nginx 服务已成功启动\\n\"\n    else\n        red \"Nginx 启动失败\\n\"\n    fi\nelse\n    yellow \"Nginx 尚未安装！\\n\"\n    sleep 1\n    menu\nfi\n}\n\n# 重启 nginx\nrestart_nginx() {\nif command -v nginx &>/dev/null; then\n    yellow \"正在重启 nginx 服务\\n\"\n    if [ -f /etc/alpine-release ]; then\n     \tpkill -f '[n]ginx'\n        touch /run/nginx.pid\n        nginx -s reload\n        rc-service nginx restart\n    else\n        systemctl restart nginx\n    fi\n    if [ $? -eq 0 ]; then\n        green \"Nginx 服务已成功重启\\n\"\n    else\n        red \"Nginx 重启失败\\n\"\n    fi\nelse\n    yellow \"Nginx 尚未安装！\\n\"\n    sleep 1\n    menu\nfi\n}\n\n# 卸载 sing-box\nuninstall_singbox() {\n   reading \"确定要卸载 sing-box 吗? (y/n): \" choice\n   case \"${choice}\" in\n       y|Y)\n           yellow \"正在卸载 sing-box\"\n           if [ -f /etc/alpine-release ]; then\n                rc-service sing-box stop\n                rc-service argo stop\n                rm /etc/init.d/sing-box /etc/init.d/argo\n                rc-update del sing-box default\n                rc-update del argo default\n           else\n                # 停止 sing-box和 argo 服务\n                systemctl stop \"${server_name}\"\n                systemctl stop argo\n                # 禁用 sing-box 服务\n                systemctl disable \"${server_name}\"\n                systemctl disable argo\n\n                # 重新加载 systemd\n                systemctl daemon-reload || true\n            fi\n           # 删除配置文件和日志\n           rm -rf \"${work_dir}\" || true\n           rm -f \"${log_dir}\" || true\n\t   rm -rf /etc/systemd/system/sing-box.service /etc/systemd/system/argo.service > /dev/null 2>&1\n           \n           # 卸载Nginx\n           reading \"\\n是否卸载 Nginx？${green}(卸载请输入 ${yellow}y${re} ${green}回车将跳过卸载Nginx) (y/n): ${re}\" choice\n            case \"${choice}\" in\n                y|Y)\n                    manage_packages uninstall nginx\n                    ;;\n                 *) \n                    yellow \"取消卸载Nginx\\n\\n\"\n                    ;;\n            esac\n\n            green \"\\nsing-box 卸载成功\\n\\n\" && exit 0\n           ;;\n       *)\n           purple \"已取消卸载操作\\n\\n\"\n           ;;\n   esac\n}\n\n# 创建快捷指令\ncreate_shortcut() {\n  cat > \"$work_dir/sb.sh\" << EOF\n#!/usr/bin/env bash\n\nbash <(curl -Ls https://raw.githubusercontent.com/eooce/sing-box/main/sing-box.sh) \\$1\nEOF\n  chmod +x \"$work_dir/sb.sh\"\n  ln -sf \"$work_dir/sb.sh\" /usr/bin/sb\n  if [ -s /usr/bin/sb ]; then\n    green \"\\n快捷指令 sb 创建成功\\n\"\n  else\n    red \"\\n快捷指令创建失败\\n\"\n  fi\n}\n\n# 适配alpine运行argo报错用户组和dns的问题\nchange_hosts() {\n    sh -c 'echo \"0 0\" > /proc/sys/net/ipv4/ping_group_range'\n    sed -i '1s/.*/127.0.0.1   localhost/' /etc/hosts\n    sed -i '2s/.*/::1         localhost/' /etc/hosts\n}\n\n# 变更配置\nchange_config() {\nif [ ${check_singbox} -eq 0 ]; then\n    clear\n    echo \"\"\n    green \"1. 修改端口\"\n    skyblue \"------------\"\n    green \"2. 修改UUID\"\n    skyblue \"------------\"\n    green \"3. 修改Reality伪装域名\"\n    skyblue \"------------\"\n    green \"4. 添加hysteria2端口跳跃\"\n    skyblue \"------------\"\n    green \"5. 删除hysteria2端口跳跃\"\n    skyblue \"------------\"\n    purple \"${purple}6. 返回主菜单\"\n    skyblue \"------------\"\n    reading \"请输入选择: \" choice\n    case \"${choice}\" in\n        1)\n            echo \"\"\n            green \"1. 修改vless-reality端口\"\n            skyblue \"------------\"\n            green \"2. 修改hysteria2端口\"\n            skyblue \"------------\"\n            green \"3. 修改tuic端口\"\n            skyblue \"------------\"\n            purple \"4. 返回上一级菜单\"\n            skyblue \"------------\"\n            reading \"请输入选择: \" choice\n            case \"${choice}\" in\n                1)\n                    reading \"\\n请输入vless-reality端口 (回车跳过将使用随机端口): \" new_port\n                    [ -z \"$new_port\" ] && new_port=$(shuf -i 2000-65000 -n 1)\n                    sed -i '/\"type\": \"vless\"/,/listen_port/ s/\"listen_port\": [0-9]\\+/\"listen_port\": '\"$new_port\"'/' $config_dir\n                    restart_singbox\n                    sed -i 's/\\(vless:\\/\\/[^@]*@[^:]*:\\)[0-9]\\{1,\\}/\\1'\"$new_port\"'/' $client_dir\n                    base64 -w0 /etc/sing-box/url.txt > /etc/sing-box/sub.txt\n                    while IFS= read -r line; do yellow \"$line\"; done < ${work_dir}/url.txt\n                    green \"\\nvless-reality端口已修改成：${purple}$new_port${re} ${green}请更新订阅或手动更改vless-reality端口${re}\\n\"\n                    ;;\n                2)\n                    reading \"\\n请输入hysteria2端口 (回车跳过将使用随机端口): \" new_port\n                    [ -z \"$new_port\" ] && new_port=$(shuf -i 2000-65000 -n 1)\n                    sed -i '/\"type\": \"hysteria2\"/,/listen_port/ s/\"listen_port\": [0-9]\\+/\"listen_port\": '\"$new_port\"'/' $config_dir\n                    restart_singbox\n                    sed -i 's/\\(hysteria2:\\/\\/[^@]*@[^:]*:\\)[0-9]\\{1,\\}/\\1'\"$new_port\"'/' $client_dir\n                    base64 -w0 $client_dir > /etc/sing-box/sub.txt\n                    while IFS= read -r line; do yellow \"$line\"; done < ${work_dir}/url.txt\n                    green \"\\nhysteria2端口已修改为：${purple}${new_port}${re} ${green}请更新订阅或手动更改hysteria2端口${re}\\n\"\n                    ;;\n                3)\n                    reading \"\\n请输入tuic端口 (回车跳过将使用随机端口): \" new_port\n                    [ -z \"$new_port\" ] && new_port=$(shuf -i 2000-65000 -n 1)\n                    sed -i '/\"type\": \"tuic\"/,/listen_port/ s/\"listen_port\": [0-9]\\+/\"listen_port\": '\"$new_port\"'/' $config_dir\n                    restart_singbox\n                    sed -i 's/\\(tuic:\\/\\/[^@]*@[^:]*:\\)[0-9]\\{1,\\}/\\1'\"$new_port\"'/' $client_dir\n                    base64 -w0 $client_dir > /etc/sing-box/sub.txt\n                    while IFS= read -r line; do yellow \"$line\"; done < ${work_dir}/url.txt\n                    green \"\\ntuic端口已修改为：${purple}${new_port}${re} ${green}请更新订阅或手动更改tuic端口${re}\\n\"\n                    ;;\n                4)  change_config ;;\n                *)  red \"无效的选项，请输入 1 到 4\" ;;\n            esac\n            ;;\n        2)\n            reading \"\\n请输入新的UUID: \" new_uuid\n            [ -z \"$new_uuid\" ] && new_uuid=$(cat /proc/sys/kernel/random/uuid)\n            sed -i -E '\n                s/\"uuid\": \"([a-f0-9-]+)\"/\"uuid\": \"'\"$new_uuid\"'\"/g;\n                s/\"uuid\": \"([a-f0-9-]+)\"$/\\\"uuid\\\": \\\"'$new_uuid'\\\"/g;\n                s/\"password\": \"([a-f0-9-]+)\"/\"password\": \"'\"$new_uuid\"'\"/g\n            ' $config_dir\n\n            restart_singbox\n            sed -i -E 's/(vless:\\/\\/|hysteria2:\\/\\/)[^@]*(@.*)/\\1'\"$new_uuid\"'\\2/' $client_dir\n            sed -i \"s/tuic:\\/\\/[0-9a-f\\-]\\{36\\}/tuic:\\/\\/$new_uuid/\" /etc/sing-box/url.txt\n            isp=$(curl -s https://speed.cloudflare.com/meta | awk -F\\\" '{print $26\"-\"$18}' | sed -e 's/ /_/g')\n            argodomain=$(grep -oE 'https://[[:alnum:]+\\.-]+\\.trycloudflare\\.com' \"${work_dir}/argo.log\" | sed 's@https://@@')\n            VMESS=\"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"${isp}\\\", \\\"add\\\": \\\"www.visa.com.tw\\\", \\\"port\\\": \\\"443\\\", \\\"id\\\": \\\"${new_uuid}\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"none\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"none\\\", \\\"host\\\": \\\"${argodomain}\\\", \\\"path\\\": \\\"/vmess-argo?ed=2048\\\", \\\"tls\\\": \\\"tls\\\", \\\"sni\\\": \\\"${argodomain}\\\", \\\"alpn\\\": \\\"\\\", \\\"fp\\\": \\\"\\\", \\\"allowlnsecure\\\": \\\"flase\\\"}\"\n            encoded_vmess=$(echo \"$VMESS\" | base64 -w0)\n            sed -i -E '/vmess:\\/\\//{s@vmess://.*@vmess://'\"$encoded_vmess\"'@}' $client_dir\n            base64 -w0 $client_dir > /etc/sing-box/sub.txt\n            while IFS= read -r line; do yellow \"$line\"; done < ${work_dir}/url.txt\n            green \"\\nUUID已修改为：${purple}${new_uuid}${re} ${green}请更新订阅或手动更改所有节点的UUID${re}\\n\"\n            ;;\n        3)  \n            clear\n            green \"\\n1. www.joom.com\\n\\n2. www.stengg.com\\n\\n3. www.wedgehr.com\\n\\n4. www.cerebrium.ai\\n\\n5. www.nazhumi.com\\n\"\n            reading \"\\n请输入新的Reality伪装域名(可自定义输入,回车留空将使用默认1): \" new_sni\n                if [ -z \"$new_sni\" ]; then    \n                    new_sni=\"www.joom.com\"\n                elif [[ \"$new_sni\" == \"1\" ]]; then\n                    new_sni=\"www.joom.com\"\n                elif [[ \"$new_sni\" == \"2\" ]]; then\n                    new_sni=\"www.stengg.com\"\n                elif [[ \"$new_sni\" == \"3\" ]]; then\n                    new_sni=\"www.wedgehr.com\"\n                elif [[ \"$new_sni\" == \"4\" ]]; then\n                    new_sni=\"www.cerebrium.ai\"\n\t        elif [[ \"$new_sni\" == \"5\" ]]; then\n                    new_sni=\"www.nazhumi.com\"\n                else\n                    new_sni=\"$new_sni\"\n                fi\n                jq --arg new_sni \"$new_sni\" '\n                (.inbounds[] | select(.type == \"vless\") | .tls.server_name) = $new_sni |\n                (.inbounds[] | select(.type == \"vless\") | .tls.reality.handshake.server) = $new_sni\n                ' \"$config_dir\" > \"$config_file.tmp\" && mv \"$config_file.tmp\" \"$config_dir\"\n                restart_singbox\n                sed -i \"s/\\(vless:\\/\\/[^\\?]*\\?\\([^\\&]*\\&\\)*sni=\\)[^&]*/\\1$new_sni/\" $client_dir\n                base64 -w0 $client_dir > /etc/sing-box/sub.txt\n                while IFS= read -r line; do yellow \"$line\"; done < ${work_dir}/url.txt\n                echo \"\"\n                green \"\\nReality sni已修改为：${purple}${new_sni}${re} ${green}请更新订阅或手动更改reality节点的sni域名${re}\\n\"\n            ;; \n        4)  \n            purple \"端口跳跃需确保跳跃区间的端口没有被占用，nat鸡请注意可用端口范围，否则可能造成节点不通\\n\"\n            reading \"请输入跳跃起始端口 (回车跳过将使用随机端口): \" min_port\n            [ -z \"$min_port\" ] && min_port=$(shuf -i 50000-65000 -n 1)\n            yellow \"你的起始端口为：$min_port\"\n            reading \"\\n请输入跳跃结束端口 (需大于起始端口): \" max_port\n            [ -z \"$max_port\" ] && max_port=$(($min_port + 100)) \n            yellow \"你的结束端口为：$max_port\\n\"\n            purple \"正在安装依赖，并设置端口跳跃规则中，请稍等...\\n\"\n            listen_port=$(sed -n '/\"tag\": \"hysteria2\"/,/}/s/.*\"listen_port\": \\([0-9]*\\).*/\\1/p' $config_dir)\n            iptables -t nat -A PREROUTING -p udp --dport $min_port:$max_port -j DNAT --to-destination :$listen_port > /dev/null\n            command -v ip6tables &> /dev/null && ip6tables -t nat -A PREROUTING -p udp --dport $min_port:$max_port -j DNAT --to-destination :$listen_port > /dev/null\n            if [ -f /etc/alpine-release ]; then\n                iptables-save > /etc/iptables/rules.v4\n                command -v ip6tables &> /dev/null && ip6tables-save > /etc/iptables/rules.v6\n\n                cat << 'EOF' > /etc/init.d/iptables\n#!/sbin/openrc-run\n\ndepend() {\n    need net\n}\n\nstart() {\n    [ -f /etc/iptables/rules.v4 ] && iptables-restore < /etc/iptables/rules.v4\n    command -v ip6tables &> /dev/null && [ -f /etc/iptables/rules.v6 ] && ip6tables-restore < /etc/iptables/rules.v6\n}\nEOF\n\n                chmod +x /etc/init.d/iptables && rc-update add iptables default && /etc/init.d/iptables start\n            elif [ -f /etc/debian_version ]; then\n                DEBIAN_FRONTEND=noninteractive apt install -y iptables-persistent > /dev/null 2>&1 && netfilter-persistent save > /dev/null 2>&1 \n                systemctl enable netfilter-persistent > /dev/null 2>&1 && systemctl start netfilter-persistent > /dev/null 2>&1\n            elif [ -f /etc/redhat-release ]; then\n                manage_packages install iptables-services > /dev/null 2>&1 && service iptables save > /dev/null 2>&1\n                systemctl enable iptables > /dev/null 2>&1 && systemctl start iptables > /dev/null 2>&1\n                command -v ip6tables &> /dev/null && service ip6tables save > /dev/null 2>&1\n                systemctl enable ip6tables > /dev/null 2>&1 && systemctl start ip6tables > /dev/null 2>&1\n            else\n                red \"未知系统,请自行将跳跃端口转发到主端口\" && exit 1\n            fi            \n            restart_singbox\n            ip=$(get_realip)\n            uuid=$(sed -n 's/.*hysteria2:\\/\\/\\([^@]*\\)@.*/\\1/p' $client_dir)\n            line_number=$(grep -n 'hysteria2://' $client_dir | cut -d':' -f1)\n            isp=$(curl -s --max-time 2 https://speed.cloudflare.com/meta | awk -F\\\" '{print $26\"-\"$18}' | sed -e 's/ /_/g' || echo \"vps\")\n            sed -i.bak \"/hysteria2:/d\" $client_dir\n            sed -i \"${line_number}i hysteria2://$uuid@$ip:$listen_port?peer=www.bing.com&insecure=1&alpn=h3&obfs=none&mport=$listen_port,$min_port-$max_port#$isp\" $client_dir\n            base64 -w0 $client_dir > /etc/sing-box/sub.txt\n            while IFS= read -r line; do yellow \"$line\"; done < ${work_dir}/url.txt\n            green \"\\nhysteria2端口跳跃已开启,跳跃端口为：${purple}$min_port-$max_port${re} ${green}请更新订阅或手动复制以上hysteria2节点${re}\\n\"\n            ;;\n        5)  \n            iptables -t nat -F PREROUTING  > /dev/null 2>&1\n            command -v ip6tables &> /dev/null && ip6tables -t nat -F PREROUTING  > /dev/null 2>&1\n            if [ -f /etc/alpine-release ]; then\n                rc-update del iptables default && rm -rf /etc/init.d/iptables \n            elif [ -f /etc/redhat-release ]; then\n                netfilter-persistent save > /dev/null 2>&1\n            elif [ -f /etc/redhat-release ]; then\n                service iptables save > /dev/null 2>&1\n                command -v ip6tables &> /dev/null && service ip6tables save > /dev/null 2>&1\n            else\n                manage_packages uninstall iptables ip6tables iptables-persistent iptables-service > /dev/null 2>&1\n            fi\n            sed -i '/hysteria2/s/&mport=[^#&]*//g' /etc/sing-box/url.txt\n            base64 -w0 $client_dir > /etc/sing-box/sub.txt\n            green \"\\n端口跳跃已删除\\n\"\n            ;;\n        6)  menu ;;\n        *)  read \"无效的选项！\" ;; \n    esac\nelse\n    yellow \"sing-box 尚未安装！\"\n    sleep 1\n    menu\nfi\n}\n\ndisable_open_sub() {\nif [ ${check_singbox} -eq 0 ]; then\n    clear\n    echo \"\"\n    green \"1. 关闭节点订阅\"\n    skyblue \"------------\"\n    green \"2. 开启节点订阅\"\n    skyblue \"------------\"\n    green \"3. 更换订阅端口\"\n    skyblue \"------------\"\n    purple \"4. 返回主菜单\"\n    skyblue \"------------\"\n    reading \"请输入选择: \" choice\n    case \"${choice}\" in\n        1)\n            if command -v nginx &>/dev/null; then\n                if [ -f /etc/alpine-release ]; then\n                    rc-service nginx status | grep -q \"started\" && rc-service nginx stop || red \"nginx not running\"\n                else \n                    [ \"$(systemctl is-active nginx)\" = \"active\" ] && systemctl stop nginx || red \"ngixn not running\"\n                fi\n            else\n                yellow \"Nginx is not installed\"\n            fi\n\n            green \"\\n已关闭节点订阅\\n\"     \n            ;; \n        2)\n            green \"\\n已开启节点订阅\\n\"\n            server_ip=$(get_realip)\n            password=$(tr -dc A-Za-z < /dev/urandom | head -c 32) \n            sed -i -E \"s/(location \\/)[^ ]+/\\1${password//\\//\\\\/}/\" /etc/nginx/nginx.conf\n\t    sub_port=$(port=$(grep -E 'listen [0-9]+;' /etc/nginx/nginx.conf | awk '{print $2}' | sed 's/;//'); if [ \"$port\" -eq 80 ]; then echo \"\"; else echo \"$port\"; fi)\n            start_nginx\n            (port=$(grep -E 'listen [0-9]+;' /etc/nginx/nginx.conf | awk '{print $2}' | sed 's/;//'); if [ \"$port\" -eq 80 ]; then echo \"\"; else green \"订阅端口：$port\"; fi); link=$(if [ -z \"$sub_port\" ]; then echo \"http://$server_ip/$password\"; else echo \"http://$server_ip:$sub_port/$password\"; fi); green \"\\n新的节点订阅链接：$link\\n\"\n            ;; \n\n        3)\n            reading \"请输入新的订阅端口(1-65535):\" sub_port\n            [ -z \"$sub_port\" ] && sub_port=$(shuf -i 2000-65000 -n 1)\n            until [[ -z $(netstat -tuln | grep -w tcp | awk '{print $4}' | sed 's/.*://g' | grep -w \"$sub_port\") ]]; do\n                if [[ -n $(netstat -tuln | grep -w tcp | awk '{print $4}' | sed 's/.*://g' | grep -w \"$sub_port\") ]]; then\n                    echo -e \"${red}${new_port}端口已经被其他程序占用，请更换端口重试${re}\"\n                    reading \"请输入新的订阅端口(1-65535):\" sub_port\n                    [[ -z $sub_port ]] && sub_port=$(shuf -i 2000-65000 -n 1)\n                fi\n            done\n            sed -i 's/listen [0-9]\\+;/listen '$sub_port';/g' /etc/nginx/nginx.conf\n            path=$(sed -n 's/.*location \\/\\([^ ]*\\).*/\\1/p' /etc/nginx/nginx.conf)\n            server_ip=$(get_realip)\n            restart_nginx\n            green \"\\n订阅端口更换成功\\n\"\n            green \"新的订阅链接为：http://$server_ip:$sub_port/$path\\n\"\n            ;; \n        4)  menu ;; \n        *)  red \"无效的选项！\" ;;\n    esac\nelse\n    yellow \"sing-box 尚未安装！\"\n    sleep 1\n    menu\nfi\n}\n\n# singbox 管理\nmanage_singbox() {\n    green \"1. 启动sing-box服务\"\n    skyblue \"-------------------\"\n    green \"2. 停止sing-box服务\"\n    skyblue \"-------------------\"\n    green \"3. 重启sing-box服务\"\n    skyblue \"-------------------\"\n    purple \"4. 返回主菜单\"\n    skyblue \"------------\"\n    reading \"\\n请输入选择: \" choice\n    case \"${choice}\" in\n        1) start_singbox ;;  \n        2) stop_singbox ;;\n        3) restart_singbox ;;\n        4) menu ;;\n        *) red \"无效的选项！\" ;;\n    esac\n}\n\n# Argo 管理\nmanage_argo() {\nif [ ${check_argo} -eq 2 ]; then\n    yellow \"Argo 尚未安装！\"\n    sleep 1\n    menu\nelse\n    clear\n    echo \"\"\n    green \"1. 启动Argo服务\"\n    skyblue \"------------\"\n    green \"2. 停止Argo服务\"\n    skyblue \"------------\"\n    green \"3. 重启Argo服务\"\n    skyblue \"------------\"\n    green \"4. 添加Argo固定隧道\"\n    skyblue \"----------------\"\n    green \"5. 切换回Argo临时隧道\"\n    skyblue \"------------------\"\n    green \"6. 重新获取Argo临时域名\"\n    skyblue \"-------------------\"\n    purple \"7. 返回主菜单\"\n    skyblue \"-----------\"\n    reading \"\\n请输入选择: \" choice\n    case \"${choice}\" in\n        1)  start_argo ;;\n        2)  stop_argo ;; \n        3)  clear\n            if [ -f /etc/alpine-release ]; then\n                grep -Fq -- '--url http://localhost:8001' /etc/init.d/argo && get_quick_tunnel && change_argo_domain || { green \"\\n当前使用固定隧道,无需获取临时域名\"; sleep 2; menu; }\n            else\n                grep -q 'ExecStart=.*--url http://localhost:8001' /etc/systemd/system/argo.service && get_quick_tunnel && change_argo_domain || { green \"\\n当前使用固定隧道,无需获取临时域名\"; sleep 2; menu; }\n            fi\n         ;; \n        4)\n            clear\n            yellow \"\\n固定隧道可为json或token，固定隧道端口为8001，自行在cf后台设置\\n\\njson在f佬维护的站点里获取，获取地址：${purple}https://fscarmen.cloudflare.now.cc${re}\\n\"\n            reading \"\\n请输入你的argo域名: \" argo_domain\n            ArgoDomain=$argo_domain\n            reading \"\\n请输入你的argo密钥(token或json): \" argo_auth\n            if [[ $argo_auth =~ TunnelSecret ]]; then\n                echo $argo_auth > ${work_dir}/tunnel.json\n                cat > ${work_dir}/tunnel.yml << EOF\ntunnel: $(cut -d\\\" -f12 <<< \"$argo_auth\")\ncredentials-file: ${work_dir}/tunnel.json\nprotocol: http2\n                                           \ningress:\n  - hostname: $ArgoDomain\n    service: http://localhost:8001\n    originRequest:\n      noTLSVerify: true\n  - service: http_status:404\nEOF\n\n                if [ -f /etc/alpine-release ]; then\n                    sed -i '/^command_args=/c\\command_args=\"-c '\\''/etc/sing-box/argo tunnel --edge-ip-version auto --config /etc/sing-box/tunnel.yml run 2>&1'\\''\"' /etc/init.d/argo\n                else\n                    sed -i '/^ExecStart=/c ExecStart=/bin/sh -c \"/etc/sing-box/argo tunnel --edge-ip-version auto --config /etc/sing-box/tunnel.yml run 2>&1\"' /etc/systemd/system/argo.service\n                fi\n                restart_argo\n                sleep 1 \n                change_argo_domain\n\n            elif [[ $argo_auth =~ ^[A-Z0-9a-z=]{120,250}$ ]]; then\n                if [ -f /etc/alpine-release ]; then\n                    sed -i \"/^command_args=/c\\command_args=\\\"-c '/etc/sing-box/argo tunnel --edge-ip-version auto --no-autoupdate --protocol http2 run --token $argo_auth 2>&1'\\\"\" /etc/init.d/argo\n                else\n\n                    sed -i '/^ExecStart=/c ExecStart=/bin/sh -c \"/etc/sing-box/argo tunnel --edge-ip-version auto --no-autoupdate --protocol http2 run --token '$argo_auth' 2>&1\"' /etc/systemd/system/argo.service\n                fi\n                restart_argo\n                sleep 1 \n                change_argo_domain\n            else\n                yellow \"你输入的argo域名或token不匹配，请重新输入\"\n                manage_argo            \n            fi\n            ;; \n        5)\n            clear\n            if [ -f /etc/alpine-release ]; then\n                alpine_openrc_services\n            else\n                main_systemd_services\n            fi\n            get_quick_tunnel\n            change_argo_domain \n            ;; \n\n        6)  \n            if [ -f /etc/alpine-release ]; then\n                if grep -Fq -- '--url http://localhost:8001' /etc/init.d/argo; then\n                    get_quick_tunnel\n                    change_argo_domain \n                else\n                    yellow \"当前使用固定隧道，无法获取临时隧道\"\n                    sleep 2\n                    menu\n                fi\n            else\n                if grep -q 'ExecStart=.*--url http://localhost:8001' /etc/systemd/system/argo.service; then\n                    get_quick_tunnel\n                    change_argo_domain \n                else\n                    yellow \"当前使用固定隧道，无法获取临时隧道\"\n                    sleep 2\n                    menu\n                fi\n            fi \n            ;; \n        7)  menu ;; \n        *)  red \"无效的选项！\" ;;\n    esac\nfi\n}\n\n# 获取argo临时隧道\nget_quick_tunnel() {\nrestart_argo\nyellow \"获取临时argo域名中，请稍等...\\n\"\nsleep 3\nif [ -f /etc/sing-box/argo.log ]; then\n  for i in {1..5}; do\n      purple \"第 $i 次尝试获取ArgoDoamin中...\"\n      get_argodomain=$(sed -n 's|.*https://\\([^/]*trycloudflare\\.com\\).*|\\1|p' /etc/sing-box/argo.log)\n      [ -n \"$get_argodomain\" ] && break\n      sleep 2\n  done\nelse\n  restart_argo\n  sleep 6\n  get_argodomain=$(sed -n 's|.*https://\\([^/]*trycloudflare\\.com\\).*|\\1|p' /etc/sing-box/argo.log)\nfi\ngreen \"ArgoDomain：${purple}$get_argodomain${re}\\n\"\nArgoDomain=$get_argodomain\n}\n\n# 更新Argo域名到订阅\nchange_argo_domain() {\ncontent=$(cat \"$client_dir\")\nvmess_url=$(grep -o 'vmess://[^ ]*' \"$client_dir\")\nvmess_prefix=\"vmess://\"\nencoded_vmess=\"${vmess_url#\"$vmess_prefix\"}\"\ndecoded_vmess=$(echo \"$encoded_vmess\" | base64 --decode)\nupdated_vmess=$(echo \"$decoded_vmess\" | jq --arg new_domain \"$ArgoDomain\" '.host = $new_domain | .sni = $new_domain')\nencoded_updated_vmess=$(echo \"$updated_vmess\" | base64 | tr -d '\\n')\nnew_vmess_url=\"$vmess_prefix$encoded_updated_vmess\"\nnew_content=$(echo \"$content\" | sed \"s|$vmess_url|$new_vmess_url|\")\necho \"$new_content\" > \"$client_dir\"\nbase64 -w0 ${work_dir}/url.txt > ${work_dir}/sub.txt\ngreen \"vmess节点已更新,更新订阅或手动复制以下vmess-argo节点\\n\"\npurple \"$new_vmess_url\\n\" \n}\n\n# 查看节点信息和订阅链接\ncheck_nodes() {\nif [ ${check_singbox} -eq 0 ]; then\n    while IFS= read -r line; do purple \"${purple}$line\"; done < ${work_dir}/url.txt\n    server_ip=$(get_realip)\n    lujing=$(sed -n 's|.*location /||p' /etc/nginx/nginx.conf | awk '{print $1}')\n    sub_port=$(sed -n 's/^\\s*listen \\([0-9]\\+\\);/\\1/p' /etc/nginx/nginx.conf)\n    green \"\\n节点订阅链接：http://${server_ip}:${sub_port}/${lujing}\\n\"\nelse \n    yellow \"sing-box 尚未安装或未运行,请先安装或启动sing-box\"\n    sleep 1\n    menu\nfi\n}\n\n# 主菜单\nmenu() {\n   check_singbox &>/dev/null; check_singbox=$?\n   check_nginx &>/dev/null; check_nginx=$?\n   check_argo &>/dev/null; check_argo=$?\n   check_singbox_status=$(check_singbox) > /dev/null 2>&1\n   check_nginx_status=$(check_nginx) > /dev/null 2>&1\n   check_argo_status=$(check_argo) > /dev/null 2>&1\n   clear\n   echo \"\"\n   purple \"=== 老王sing-box一键安装脚本 ===\\n\"\n   purple \"---Argo 状态: ${check_argo_status}\"   \n   purple \"--Nginx 状态: ${check_nginx_status}\"\n   purple \"singbox 状态: ${check_singbox_status}\\n\"\n   green \"1. 安装sing-box\"\n   red \"2. 卸载sing-box\"\n   echo \"===============\"\n   green \"3. sing-box管理\"\n   green \"4. Argo隧道管理\"\n   echo  \"===============\"\n   green  \"5. 查看节点信息\"\n   green  \"6. 修改节点配置\"\n   green  \"7. 管理节点订阅\"\n   echo  \"===============\"\n   purple \"8. ssh综合工具箱\"\n   echo  \"===============\"\n   red \"0. 退出脚本\"\n   echo \"===========\"\n   reading \"请输入选择(0-8): \" choice\n   echo \"\"\n}\n\n# 捕获 Ctrl+C 信号\ntrap 'red \"已取消操作\"; exit' INT\n\n# 主循环\nwhile true; do\n   menu\n   case \"${choice}\" in\n        1)  \n            if [ ${check_singbox} -eq 0 ]; then\n                yellow \"sing-box 已经安装！\"\n            else\n                fix_nginx\n                manage_packages install nginx jq tar openssl iptables coreutils\n                [ -n \"$(curl -s --max-time 2 ipv6.ip.sb)\" ] && manage_packages install ip6tables\n                install_singbox\n\n                if [ -x \"$(command -v systemctl)\" ]; then\n                    main_systemd_services\n                elif [ -x \"$(command -v rc-update)\" ]; then\n                    alpine_openrc_services\n                    change_hosts\n                    rc-service sing-box restart\n                    rc-service argo restart\n                else\n                    echo \"Unsupported init system\"\n                    exit 1 \n                fi\n\n                sleep 5\n                get_info\n                add_nginx_conf\n                create_shortcut\n            fi\n           ;;\n        2) uninstall_singbox ;;\n        3) manage_singbox ;;\n        4) manage_argo ;;\n        5) check_nodes ;;\n        6) change_config ;;\n        7) disable_open_sub ;;\n        8) \n           clear\n           curl -fsSL https://raw.githubusercontent.com/eooce/ssh_tool/main/ssh_tool.sh -o ssh_tool.sh && chmod +x ssh_tool.sh && ./ssh_tool.sh\n           ;;           \n        0) exit 0 ;;\n        *) red \"无效的选项，请输入 0 到 8\" ;; \n   esac\n   read -n 1 -s -r -p $'\\033[1;91m按任意键继续...\\033[0m'\ndone\n"
        }
      ]
    }
  ]
}