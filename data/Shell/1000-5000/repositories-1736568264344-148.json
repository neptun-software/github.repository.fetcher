{
  "metadata": {
    "timestamp": 1736568264344,
    "page": 148,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "transcode-open/apt-cyg",
      "stars": 2999,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Stephen Jungels\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "apt-cyg",
          "type": "blob",
          "size": 13.4423828125,
          "content": "#!/bin/bash\n# apt-cyg: install tool for Cygwin similar to debian apt-get\n#\n# The MIT License (MIT)\n#\n# Copyright (c) 2013 Trans-code Design\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\nif [ ${BASH_VERSINFO}${BASH_VERSINFO[1]} -lt 42 ]\nthen\n  echo 'Bash version 4.2+ required'\n  exit\nfi\n\nusage=\"\\\nNAME\n  apt-cyg - package manager utility\n\nSYNOPSIS\n  apt-cyg [operation] [options] [targets]\n\nDESCRIPTION\n  apt-cyg is a package management utility that tracks installed packages on a\n  Cygwin system. Invoking apt-cyg involves specifying an operation with any\n  potential options and targets to operate on. A target is usually a package\n  name, file name, URL, or a search string. Targets can be provided as command\n  line arguments.\n\nOPERATIONS\n  install\n    Install package(s).\n\n  remove\n    Remove package(s) from the system.\n\n  update\n    Download a fresh copy of the master package list (setup.ini) from the\n    server defined in setup.rc.\n\n  download\n    Retrieve package(s) from the server, but do not install/upgrade anything.\n\n  show\n    Display information on given package(s).\n\n  depends\n    Produce a dependency tree for a package.\n\n  rdepends\n    Produce a tree of packages that depend on the named package.\n\n  list\n    Search each locally-installed package for names that match regexp. If no\n    package names are provided in the command line, all installed packages will\n    be queried.\n\n  listall\n    This will search each package in the master package list (setup.ini) for\n    names that match regexp.\n\n  category\n    Display all packages that are members of a named category.\n\n  listfiles\n    List all files owned by a given package. Multiple packages can be specified\n    on the command line.\n\n  search\n    Search for downloaded packages that own the specified file(s). The path can\n    be relative or absolute, and one or more files can be specified.\n\n  searchall\n    Search cygwin.com to retrieve file information about packages. The provided\n    target is considered to be a filename and searchall will return the\n    package(s) which contain this file.\n\n  mirror\n    Set the mirror; a full URL to a location where the database, packages, and\n    signatures for this repository can be found. If no URL is provided, display\n    current mirror.\n\n  cache\n    Set the package cache directory. If a file is not found in cache directory,\n    it will be downloaded. Unix and Windows forms are accepted, as well as\n    absolute or regular paths. If no directory is provided, display current\n    cache.\n\nOPTIONS\n  --nodeps\n    Specify this option to skip all dependency checks.\n\n  --version\n    Display version and exit.\n\"\n\nversion=\"\\\napt-cyg version 1\n\nThe MIT License (MIT)\n\nCopyright (c) 2005-9 Stephen Jungels\n\"\n\nfunction wget {\n  if command wget -h &>/dev/null\n  then\n    command wget \"$@\"\n  else\n    warn wget is not installed, using lynx as fallback\n    set \"${*: -1}\"\n    lynx -source \"$1\" > \"${1##*/}\"\n  fi\n}\n\nfunction find-workspace {\n  # default working directory and mirror\n  \n  # work wherever setup worked last, if possible\n  cache=$(awk '\n  BEGIN {\n    RS = \"\\n\\\\<\"\n    FS = \"\\n\\t\"\n  }\n  $1 == \"last-cache\" {\n    print $2\n  }\n  ' /etc/setup/setup.rc)\n\n  mirror=$(awk '\n  /last-mirror/ {\n    getline\n    print $1\n  }\n  ' /etc/setup/setup.rc)\n  mirrordir=$(sed '\n  s / %2f g\n  s : %3a g\n  ' <<< \"$mirror\")\n\n  mkdir -p \"$cache/$mirrordir/$arch\"\n  cd \"$cache/$mirrordir/$arch\"\n  if [ -e setup.ini ]\n  then\n    return 0\n  else\n    get-setup\n    return 1\n  fi\n}\n\nfunction get-setup {\n  touch setup.ini\n  mv setup.ini setup.ini-save\n  wget -N $mirror/$arch/setup.bz2\n  if [ -e setup.bz2 ]\n  then\n    bunzip2 setup.bz2\n    mv setup setup.ini\n    echo Updated setup.ini\n  else\n    echo Error updating setup.ini, reverting\n    mv setup.ini-save setup.ini\n  fi\n}\n\nfunction check-packages {\n  if [[ $pks ]]\n  then\n    return 0\n  else\n    echo No packages found.\n    return 1\n  fi\n}\n\nfunction warn {\n  printf '\\e[1;31m%s\\e[m\\n' \"$*\" >&2\n}\n\nfunction apt-update {\n  if find-workspace\n  then\n    get-setup\n  fi\n}\n\nfunction apt-category {\n  check-packages\n  find-workspace\n  for pkg in \"${pks[@]}\"\n  do\n    awk '\n    $1 == \"@\" {\n      pck = $2\n    }\n    $1 == \"category:\" && $0 ~ query {\n      print pck\n    }\n    ' query=\"$pks\" setup.ini\n  done\n}\n\nfunction apt-list {\n  local sbq\n  for pkg in \"${pks[@]}\"\n  do\n    let sbq++ && echo\n    awk 'NR>1 && $1~pkg && $0=$1' pkg=\"$pkg\" /etc/setup/installed.db\n  done\n  let sbq && return\n  awk 'NR>1 && $0=$1' /etc/setup/installed.db\n}\n\nfunction apt-listall {\n  check-packages\n  find-workspace\n  local sbq\n  for pkg in \"${pks[@]}\"\n  do\n    let sbq++ && echo\n    awk '$1~pkg && $0=$1' RS='\\n\\n@ ' FS='\\n' pkg=\"$pkg\" setup.ini\n  done\n}\n\nfunction apt-listfiles {\n  check-packages\n  find-workspace\n  local pkg sbq\n  for pkg in \"${pks[@]}\"\n  do\n    (( sbq++ )) && echo\n    if [ ! -e /etc/setup/\"$pkg\".lst.gz ]\n    then\n      download \"$pkg\"\n    fi\n    gzip -cd /etc/setup/\"$pkg\".lst.gz\n  done\n}\n\nfunction apt-show {\n  find-workspace\n  check-packages\n  for pkg in \"${pks[@]}\"\n  do\n    (( notfirst++ )) && echo\n    awk '\n    $1 == query {\n      print\n      fd++\n    }\n    END {\n      if (! fd)\n        print \"Unable to locate package \" query\n    }\n    ' RS='\\n\\n@ ' FS='\\n' query=\"$pkg\" setup.ini\n  done\n}\n\nfunction apt-depends {\n  find-workspace\n  check-packages\n  for pkg in \"${pks[@]}\"\n  do\n    awk '\n    @include \"join\"\n    $1 == \"@\" {\n      apg = $2\n    }\n    $1 == \"requires:\" {\n      for (z=2; z<=NF; z++)\n        reqs[apg][z-1] = $z\n    }\n    END {\n      prpg(ENVIRON[\"pkg\"])\n    }\n    function smartmatch(small, large,    values) {\n      for (each in large)\n        values[large[each]]\n      return small in values\n    }\n    function prpg(fpg) {\n      if (smartmatch(fpg, spath)) return\n      spath[length(spath)+1] = fpg\n      print join(spath, 1, length(spath), \" > \")\n      if (isarray(reqs[fpg]))\n        for (each in reqs[fpg])\n          prpg(reqs[fpg][each])\n      delete spath[length(spath)]\n    }\n    ' setup.ini\n  done\n}\n\nfunction apt-rdepends {\n  find-workspace\n  for pkg in \"${pks[@]}\"\n  do\n    awk '\n    @include \"join\"\n    $1 == \"@\" {\n      apg = $2\n    }\n    $1 == \"requires:\" {\n      for (z=2; z<=NF; z++)\n        reqs[$z][length(reqs[$z])+1] = apg\n    }\n    END {\n      prpg(ENVIRON[\"pkg\"])\n    }\n    function smartmatch(small, large,    values) {\n      for (each in large)\n        values[large[each]]\n      return small in values\n    }\n    function prpg(fpg) {\n      if (smartmatch(fpg, spath)) return\n      spath[length(spath)+1] = fpg\n      print join(spath, 1, length(spath), \" < \")\n      if (isarray(reqs[fpg]))\n        for (each in reqs[fpg])\n          prpg(reqs[fpg][each])\n      delete spath[length(spath)]\n    }\n    ' setup.ini\n  done\n}\n\nfunction apt-download {\n  check-packages\n  find-workspace\n  local pkg sbq\n  for pkg in \"${pks[@]}\"\n  do\n    (( sbq++ )) && echo\n    download \"$pkg\"\n  done\n}\n\nfunction download {\n  local pkg digest digactual\n  pkg=$1\n  # look for package and save desc file\n\n  awk '$1 == pc' RS='\\n\\n@ ' FS='\\n' pc=$pkg setup.ini > desc\n  if [ ! -s desc ]\n  then\n    echo Unable to locate package $pkg\n    exit 1\n  fi\n\n  # download and unpack the bz2 or xz file\n\n  # pick the latest version, which comes first\n  set -- $(awk '$1 == \"install:\"' desc)\n  if (( ! $# ))\n  then\n    echo 'Could not find \"install\" in package description: obsolete package?'\n    exit 1\n  fi\n\n  dn=$(dirname $2)\n  bn=$(basename $2)\n\n  # check the md5\n  digest=$4\n  case ${#digest} in\n   32) hash=md5sum    ;;\n  128) hash=sha512sum ;;\n  esac\n  mkdir -p \"$cache/$mirrordir/$dn\"\n  cd \"$cache/$mirrordir/$dn\"\n  if ! test -e $bn || ! $hash -c <<< \"$digest $bn\"\n  then\n    wget -O $bn $mirror/$dn/$bn\n    $hash -c <<< \"$digest $bn\" || exit\n  fi\n\n  tar tf $bn | gzip > /etc/setup/\"$pkg\".lst.gz\n  cd ~-\n  mv desc \"$cache/$mirrordir/$dn\"\n  echo $dn $bn > /tmp/dwn\n}\n\nfunction apt-search {\n  check-packages\n  echo Searching downloaded packages...\n  for pkg in \"${pks[@]}\"\n  do\n    key=$(type -P \"$pkg\" | sed s./..)\n    [[ $key ]] || key=$pkg\n    for manifest in /etc/setup/*.lst.gz\n    do\n      if gzip -cd $manifest | grep -q \"$key\"\n      then\n        package=$(sed '\n        s,/etc/setup/,,\n        s,.lst.gz,,\n        ' <<< $manifest)\n        echo $package\n      fi\n    done\n  done\n}\n\nfunction apt-searchall {\n  cd /tmp\n  for pkg in \"${pks[@]}\"\n  do\n    printf -v qs 'text=1&arch=%s&grep=%s' $arch \"$pkg\"\n    wget -O matches cygwin.com/cgi-bin2/package-grep.cgi?\"$qs\"\n    awk '\n    NR == 1 {next}\n    mc[$1]++ {next}\n    /-debuginfo-/ {next}\n    /^cygwin32-/ {next}\n    {print $1}\n    ' FS=-[[:digit:]] matches\n  done\n}\n\nfunction apt-install {\n  check-packages\n  find-workspace\n  local pkg dn bn requires wr package sbq script\n  for pkg in \"${pks[@]}\"\n  do\n\n  if grep -q \"^$pkg \" /etc/setup/installed.db\n  then\n    echo Package $pkg is already installed, skipping\n    continue\n  fi\n  (( sbq++ )) && echo\n  echo Installing $pkg\n\n  download $pkg\n  read dn bn </tmp/dwn\n  echo Unpacking...\n\n  cd \"$cache/$mirrordir/$dn\"\n  tar -x -C / -f $bn\n  # update the package database\n\n  awk '\n  ins != 1 && pkg < $1 {\n    print pkg, bz, 0\n    ins = 1\n  }\n  1\n  END {\n    if (ins != 1) print pkg, bz, 0\n  }\n  ' pkg=\"$pkg\" bz=$bn /etc/setup/installed.db > /tmp/awk.$$\n  mv /etc/setup/installed.db /etc/setup/installed.db-save\n  mv /tmp/awk.$$ /etc/setup/installed.db\n\n  [ -v nodeps ] && continue\n  # recursively install required packages\n\n  requires=$(awk '$1==\"requires\", $0=$2' FS=': ' desc)\n  cd ~-\n  wr=0\n  if [[ $requires ]]\n  then\n    echo Package $pkg requires the following packages, installing:\n    echo $requires\n    for package in $requires\n    do\n      if grep -q \"^$package \" /etc/setup/installed.db\n      then\n        echo Package $package is already installed, skipping\n        continue\n      fi\n      apt-cyg install --noscripts $package || (( wr++ ))\n    done\n  fi\n  if (( wr ))\n  then\n    echo some required packages did not install, continuing\n  fi\n\n  # run all postinstall scripts\n\n  [ -v noscripts ] && continue\n  find /etc/postinstall -name '*.sh' | while read script\n  do\n    echo Running $script\n    $script\n    mv $script $script.done\n  done\n  echo Package $pkg installed\n\n  done\n}\n\nfunction apt-remove {\n  check-packages\n  cd /etc\n  cygcheck awk bash bunzip2 grep gzip mv sed tar xz > setup/essential.lst\n  for pkg in \"${pks[@]}\"\n  do\n\n  if ! grep -q \"^$pkg \" setup/installed.db\n  then\n    echo Package $pkg is not installed, skipping\n    continue\n  fi\n\n  if [ ! -e setup/\"$pkg\".lst.gz ]\n  then\n    warn Package manifest missing, cannot remove $pkg. Exiting\n    exit 1\n  fi\n  gzip -dk setup/\"$pkg\".lst.gz\n  awk '\n  NR == FNR {\n    if ($NF) ess[$NF]\n    next\n  }\n  $NF in ess {\n    exit 1\n  }\n  ' FS='[/\\\\\\\\]' setup/{essential,$pkg}.lst\n  esn=$?\n  if [ $esn = 0 ]\n  then\n    echo Removing $pkg\n    if [ -e preremove/\"$pkg\".sh ]\n    then\n      preremove/\"$pkg\".sh\n      rm preremove/\"$pkg\".sh\n    fi\n    mapfile dt < setup/\"$pkg\".lst\n    for each in ${dt[*]}\n    do\n      [ -f /$each ] && rm /$each\n    done\n    for each in ${dt[*]}\n    do\n      [ -d /$each ] && rmdir --i /$each\n    done\n    rm -f setup/\"$pkg\".lst.gz postinstall/\"$pkg\".sh.done\n    awk -i inplace '$1 != ENVIRON[\"pkg\"]' setup/installed.db\n    echo Package $pkg removed\n  fi\n  rm setup/\"$pkg\".lst\n  if [ $esn = 1 ]\n  then\n    warn apt-cyg cannot remove package $pkg, exiting\n    exit 1\n  fi\n\n  done\n}\n\nfunction apt-mirror {\n  if [ \"$pks\" ]\n  then\n    awk -i inplace '\n    1\n    /last-mirror/ {\n      getline\n      print \"\\t\" pks\n    }\n    ' pks=\"$pks\" /etc/setup/setup.rc\n    echo Mirror set to \"$pks\".\n  else\n    awk '\n    /last-mirror/ {\n      getline\n      print $1\n    }\n    ' /etc/setup/setup.rc\n  fi\n}\n\nfunction apt-cache {\n  if [ \"$pks\" ]\n  then\n    vas=$(cygpath -aw \"$pks\")\n    awk -i inplace '\n    1\n    /last-cache/ {\n      getline\n      print \"\\t\" vas\n    }\n    ' vas=\"${vas//\\\\/\\\\\\\\}\" /etc/setup/setup.rc\n    echo Cache set to \"$vas\".\n  else\n    awk '\n    /last-cache/ {\n      getline\n      print $1\n    }\n    ' /etc/setup/setup.rc\n  fi\n}\n\nif [ -p /dev/stdin ]\nthen\n  mapfile -t pks\nfi\n\n# process options\nuntil [ $# = 0 ]\ndo\n  case \"$1\" in\n\n    --nodeps)\n      nodeps=1\n      shift\n    ;;\n\n    --noscripts)\n      noscripts=1\n      shift\n    ;;\n\n    --version)\n      printf \"$version\"\n      exit\n    ;;\n\n    update)\n      command=$1\n      shift\n    ;;\n\n    list | cache  | remove | depends | listall  | download | listfiles |\\\n    show | mirror | search | install | category | rdepends | searchall )\n      if [[ $command ]]\n      then\n        pks+=(\"$1\")\n      else\n        command=$1\n      fi\n      shift\n    ;;\n\n    *)\n      pks+=(\"$1\")\n      shift\n    ;;\n\n  esac\ndone\n\nset -a\n\nif type -t apt-$command | grep -q function\nthen\n  readonly arch=${HOSTTYPE/i6/x}\n  apt-$command\nelse\n  printf \"$usage\"\nfi\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 0.2099609375,
          "content": "2013-10-23\n----------\n\n* [b29ec29](http://github.com/transcode-open/apt-cyg/commit/b29ec29)\n  Added multiarch support\n* [9058643](http://github.com/transcode-open/apt-cyg/commit/9058643)\n  Added xz archives support\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 1.7255859375,
          "content": "apt-cyg\n=======\n\napt-cyg is a Cygwin package manager. It includes a command-line installer for\nCygwin which cooperates with Cygwin Setup and uses the same repository.\n\n[github.com/transcode-open/apt-cyg][1]\n\n[1]:https://github.com/transcode-open/apt-cyg\n\nOperations\n----------\n\n~~~\ninstall\n  Install package(s).\n\nremove\n  Remove package(s) from the system.\n\nupdate\n  Download a fresh copy of the master package list (setup.ini) from the\n  server defined in setup.rc.\n\ndownload\n  Retrieve package(s) from the server, but do not install/upgrade anything.\n\nshow\n  Display information on given package(s).\n\ndepends\n  Produce a dependency tree for a package.\n\nrdepends\n  Produce a tree of packages that depend on the named package.\n\nlist\n  Search each locally-installed package for names that match regexp. If no\n  package names are provided in the command line, all installed packages will\n  be queried.\n\nlistall\n  This will search each package in the master package list (setup.ini) for\n  names that match regexp.\n\ncategory\n  Display all packages that are members of a named category.\n\nlistfiles\n  List all files owned by a given package. Multiple packages can be specified\n  on the command line.\n\nsearch\n  Search for downloaded packages that own the specified file(s). The path can\n  be relative or absolute, and one or more files can be specified.\n\nsearchall\n  Search cygwin.com to retrieve file information about packages. The provided\n  target is considered to be a filename and searchall will return the\n  package(s) which contain this file.\n~~~\n\nQuick start\n-----------\n\napt-cyg is a simple script. To install:\n\n    lynx -source rawgit.com/transcode-open/apt-cyg/master/apt-cyg > apt-cyg\n    install apt-cyg /bin\n\nExample use of apt-cyg:\n\n    apt-cyg install nano\n"
        },
        {
          "name": "status.md",
          "type": "blob",
          "size": 1.056640625,
          "content": "# Note from the developer\n\nI am no longer working on apt-cyg. As far as I know, it works.\n\nHowever it was written quite a while ago by reverse engineering the files used by Cygwin's setup.exe program. It doesn't\nshare any code with setup.exe, and if setup.exe is modified in such a way that assumptions made by apt-cyg no longer\napply, apt-cyg will break.\n\napt-cyg is an infrastructure program and probably belongs in Cygwin rather than here, but as far as I know, RedHat is\nno longer paying more than one or two engineers to work on Cygwin and they are unlikely to do anything with apt-cyg or\nother, similar programs that are out there.\n\nBecause I got dragged into a time-consuming and unpleasant law suit involving apt-cyg, I am very unlikely to put\nmore time and effort into it anytime soon, even though I won. I write open source software because I enjoy it, not so\nI can get involved in meaningless conflicts.\n\nIf you would like to contribute to apt-cyg, the best way to do that is to fork it. You don't need my permission to\ndo that, just follow the license.\n\n--Steve Jungels\n"
        }
      ]
    }
  ]
}