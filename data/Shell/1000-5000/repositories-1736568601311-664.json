{
  "metadata": {
    "timestamp": 1736568601311,
    "page": 664,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Kong/docker-kong",
      "stars": 1408,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2314453125,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\ncharset = utf-8\n\n[*.sh]\nindent_style = space\nindent_size = 2\n\n[Dockerfile]\nindent_style = space\nindent_size = 2\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.041015625,
          "content": "Dockerfile.* linguist-language=Dockerfile\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.05859375,
          "content": ".DS_Store\n.che\nkong\n*.bak\nsubmit\n**/*.deb\n**/*.rpm\n**/*.apk\n"
        },
        {
          "name": "Dockerfile.deb",
          "type": "blob",
          "size": 1.7890625,
          "content": "# When you update this file substantially, please update build_your_own_images.md as well.\nFROM debian:bullseye-20230502-slim\n\nLABEL maintainer=\"Kong Docker Maintainers <docker@konghq.com> (@team-gateway-bot)\"\nARG KONG_VERSION=3.9.0\nENV KONG_VERSION $KONG_VERSION\n\nARG KONG_SHA256=\"dafb9737a3fe7108bd7120a652774f32f009de22cc133c61b503d8969a230976\"\n\nARG KONG_PREFIX=/usr/local/kong\nENV KONG_PREFIX $KONG_PREFIX\n\nARG ASSET=remote\nARG EE_PORTS\n\nCOPY kong.deb /tmp/kong.deb\n\nRUN set -ex; \\\n    apt-get update; \\\n    apt-get install -y curl; \\\n    if [ \"$ASSET\" = \"remote\" ] ; then \\\n      CODENAME=$(cat /etc/os-release | grep VERSION_CODENAME | cut -d = -f 2) \\\n      && KONG_REPO=$(echo ${KONG_VERSION%.*} | sed 's/\\.//') \\\n      && DOWNLOAD_URL=\"https://packages.konghq.com/public/gateway-$KONG_REPO/deb/debian/pool/$CODENAME/main/k/ko/kong_$KONG_VERSION/kong_${KONG_VERSION}_amd64.deb\" \\\n      && curl -fL $DOWNLOAD_URL -o /tmp/kong.deb \\\n      && echo \"$KONG_SHA256  /tmp/kong.deb\" | sha256sum -c -; \\\n    fi \\\n    && apt-get update \\\n    && apt-get install --yes /tmp/kong.deb \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm -rf /tmp/kong.deb \\\n    && chown kong:0 /usr/local/bin/kong \\\n    && chown -R kong:0 ${KONG_PREFIX} \\\n    && ln -sf /usr/local/openresty/bin/resty /usr/local/bin/resty \\\n    && ln -sf /usr/local/openresty/luajit/bin/luajit /usr/local/bin/luajit \\\n    && ln -sf /usr/local/openresty/luajit/bin/luajit /usr/local/bin/lua \\\n    && ln -sf /usr/local/openresty/nginx/sbin/nginx /usr/local/bin/nginx \\\n    && kong version \\\n    && apt-get purge curl -y\n\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\n\nUSER kong\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\nEXPOSE 8000 8443 8001 8444 $EE_PORTS\n\nSTOPSIGNAL SIGQUIT\n\nHEALTHCHECK --interval=60s --timeout=10s --retries=10 CMD kong-health\n\nCMD [\"kong\", \"docker-start\"]\n"
        },
        {
          "name": "Dockerfile.rpm",
          "type": "blob",
          "size": 2.4990234375,
          "content": "# When you update this file substantially, please update build_your_own_images.md as well.\nFROM registry.access.redhat.com/ubi8/ubi-minimal:8.7@sha256:6910799b75ad41f00891978575a0d955be2f800c51b955af73926e7ab59a41c3\n\nLABEL maintainer=\"Kong Docker Maintainers <docker@konghq.com> (@team-gateway-bot)\"\n\nARG KONG_VERSION=3.9.0\nENV KONG_VERSION $KONG_VERSION\n\n# RedHat required labels\nLABEL name=\"Kong\" \\\n      vendor=\"Kong\" \\\n      version=\"$KONG_VERSION\" \\\n      release=\"1\" \\\n      url=\"https://konghq.com\" \\\n      summary=\"Next-Generation API Platform for Modern Architectures\" \\\n      description=\"Next-Generation API Platform for Modern Architectures\"\n\n# RedHat required LICENSE file approved path\nCOPY LICENSE /licenses/\n\nARG KONG_SHA256=\"f36d0eb6f67f82dc2011801d10229b1929bb83db96598f2ad499ef284f928b46\"\n\nARG KONG_PREFIX=/usr/local/kong\nENV KONG_PREFIX $KONG_PREFIX\n\nARG ASSET=remote\nARG EE_PORTS\n\nCOPY kong.rpm /tmp/kong.rpm\n\n# hadolint ignore=DL3015\nRUN set -ex; \\\n    if [ \"$ASSET\" = \"remote\" ] ; then \\\n      KONG_REPO=$(echo ${KONG_VERSION%.*} | sed 's/\\.//') \\\n      && DOWNLOAD_URL=\"https://packages.konghq.com/public/gateway-$KONG_REPO/rpm/el/8/x86_64/kong-$KONG_VERSION.el8.x86_64.rpm\" \\\n      && curl -fL $DOWNLOAD_URL -o /tmp/kong.rpm \\\n      && echo \"$KONG_SHA256  /tmp/kong.rpm\" | sha256sum -c - \\\n      || exit 1; \\\n    fi \\\n    # findutils provides xargs (temporarily)\n    && microdnf install --assumeyes --nodocs \\\n      findutils \\\n      shadow-utils \\\n      unzip \\\n    && rpm -qpR /tmp/kong.rpm \\\n      | grep -v rpmlib \\\n      | xargs -n1 -t microdnf install --assumeyes --nodocs \\\n    # Please update the rhel install docs if the below line is changed so that\n    # end users can properly install Kong along with its required dependencies\n    # and that our CI does not diverge from our docs.\n    && rpm -iv /tmp/kong.rpm \\\n    && microdnf -y clean all \\\n    && rm /tmp/kong.rpm \\\n    && chown kong:0 /usr/local/bin/kong \\\n    && chown -R kong:0 ${KONG_PREFIX} \\\n    && ln -sf /usr/local/openresty/bin/resty /usr/local/bin/resty \\\n    && ln -sf /usr/local/openresty/luajit/bin/luajit /usr/local/bin/luajit \\\n    && ln -sf /usr/local/openresty/luajit/bin/luajit /usr/local/bin/lua \\\n    && ln -sf /usr/local/openresty/nginx/sbin/nginx /usr/local/bin/nginx \\\n    && kong version\n\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\n\nUSER kong\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\nEXPOSE 8000 8443 8001 8444 $EE_PORTS\n\nSTOPSIGNAL SIGQUIT\n\nHEALTHCHECK --interval=60s --timeout=10s --retries=10 CMD kong-health\n\nCMD [\"kong\", \"docker-start\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0791015625,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2016-2018 Kong Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.1943359375,
          "content": "# DO NOT update KONG_BUILD_TOOLS manually - it's set by update.sh\n# to ensure same version is used here and in the respective kong version\nKONG_BUILD_TOOLS?=4.33.19\n\nPACKAGE?=deb\nBASE?=ubuntu\n\nDOCKER_TAG_PREFIX?=kong\n\nKONG_VERSION?=\nKONG_SHA256?=\n\n# these two flags cannot be specified in this makefile <at all> if the default\n# values from the Dockerfiles are desired\n#\n# this way, the build-arg flag variables are empty (preventing a flag from\n# being passed to docker at all) if the parent VARs are unset\nifeq ($(strip $(KONG_VERSION)),)\nKONG_VERSION_FLAG:=\nelse\nKONG_VERSION_FLAG:=--build-arg KONG_VERSION=$(KONG_VERSION)\nendif\n\nifeq ($(strip $(KONG_SHA256)),)\nKONG_SHA256_FLAG:=\nelse\nKONG_SHA256_FLAG:=--build-arg KONG_SHA256=$(KONG_SHA256)\nendif\n\nRHEL_REGISTRY_KEY?=\nRHEL_REGISTRY?=scan.connect.redhat.com\nRHEL_PID?=\nRHEL_REGISTRY_REPO?=$(RHEL_REGISTRY)/$(RHEL_PID)/kong\n\n# search for \"build_v2\" in the invocation make goals and set tags accordingly\nifneq ($(findstring build_v2,$(MAKECMDGOALS)),)\n\tDOCKER_TAG?=$(DOCKER_TAG_PREFIX)-$(PACKAGE)\nelse\n\tDOCKER_TAG?=$(DOCKER_TAG_PREFIX)-$(BASE)\nendif\n\nbuild: ASSET_LOCATION?=ce\nbuild:\n\tdocker build \\\n\t\t--no-cache \\\n\t\t--build-arg ASSET=$(ASSET_LOCATION) \\\n\t\t$(KONG_VERSION_FLAG) \\\n\t\t$(KONG_SHA256_FLAG) \\\n\t\t-t $(DOCKER_TAG) \\\n\t\t$(BASE)/\n\n# (yzl, 14 June 2022) Should you change this substantially, please update build_your_own_images.md.\nbuild_v2: ASSET_LOCATION?=remote\nbuild_v2:\n\tdocker image inspect -f='{{.Id}}' $(DOCKER_TAG) || \\\n\tdocker build \\\n\t\t--no-cache \\\n\t\t--build-arg ASSET=$(ASSET_LOCATION) \\\n\t\t$(KONG_VERSION_FLAG) \\\n\t\t$(KONG_SHA256_FLAG) \\\n\t\t-t $(DOCKER_TAG) \\\n\t\t-f Dockerfile.$(PACKAGE) \\\n\t\t.\n\n.PHONY: test\n\ntest: KONG_DOCKER_TAG?=$(DOCKER_TAG)\ntest:\n\tBASE=$(BASE) ./tests/test.sh --suite \"Docker-Kong test suite\"\n\nrelease-rhel: build_v2\n\t$(MAKE) PACKAGE=rpm build_v2\n\t@if \\\n\t\ttest -z '$(KONG_VERSION)' || \\\n\t\ttest -z '$(RHEL_PID)' || \\\n\t\ttest -z '$(RHEL_REGISTRY_KEY)' \\\n\t; then \\\n\t\techo 'one of $$KONG_VERSION, $$RHEL_PID, $$RHEL_REGISTRY_KEY unset'; \\\n\t\texit 2; \\\n\tfi\n\t@echo '$(RHEL_REGISTRY_KEY)' \\\n\t\t| docker login -u unused $(RHEL_REGISTRY) --password-stdin\n\tdocker tag $(DOCKER_TAG) $(RHEL_REGISTRY_REPO):$(KONG_VERSION)\n\tdocker push $(RHEL_REGISTRY_REPO):$(KONG_VERSION)\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.3349609375,
          "content": "![Build Status](https://github.com/kong/docker-kong/actions/workflows/test.yml/badge.svg)\n\n# About this Repo\n\nThis is the Git repo of the Docker\n[official image](https://docs.docker.com/docker-hub/official_repos/) for\n[kong](https://registry.hub.docker.com/_/kong/).\nSee [the Docker Hub page](https://registry.hub.docker.com/_/kong/)\nfor the full readme on how to use this Docker image and for information\nregarding contributing and issues.\n\nThe full readme is generated over in [docker-library/docs](https://github.com/docker-library/docs),\nspecifically in [docker-library/docs/kong](https://github.com/docker-library/docs/tree/master/kong).\n\nSee a change merged here that doesn't show up on the Docker Hub yet?\nCheck [the \"library/kong\" manifest file in the docker-library/official-images\nrepo](https://github.com/docker-library/official-images/blob/master/library/kong),\nespecially [PRs with the \"library/kong\" label on that\nrepo](https://github.com/docker-library/official-images/labels/library%2Fkong). For more information about the official images process, see the [docker-library/official-images readme](https://github.com/docker-library/official-images/blob/master/README.md).\n\n# For Kong developers\n\n## Pushing a Kong patch release (x.y.Z) update\n\nIf the update does not require changes to the Dockerfiles other than\npointing to the latest Kong code, the process can be semi-automated as follows:\n\n1. Check out this repository.\n\n2. Run `./update.sh x.y.z`\n\n   This will create a release branch, modify the relevant files automatically,\n   give you a chance to review the changes and press \"y\", then\n   it will push the branch and open a browser with the PR\n   to this repository.\n\n3. Peer review, run CI and merge the submitted PR.\n\n4. Run `./submit.sh -p x.y.z`\n\n   Once the internal PR is merged, this script will do the same\n   for the [official-images](https://github.com/docker-library/official-images)\n   repository. It will clone [Kong's fork](https://github.com/kong/official-images),\n   create a branch, modify the relevant files automatically,\n   give you a chance to review the changes and press \"y\", then\n   it will push the branch and open a browser with the PR\n   to the docker-library repository.\n\n## Pushing a Kong minor release (x.Y.0) update\n\nNot semi-automated yet. Note that minor releases are more likely to require more\nextensive changes to the Dockerfiles.\n\n"
        },
        {
          "name": "build_your_own_images.md",
          "type": "blob",
          "size": 6.6943359375,
          "content": "# Building Docker images that contain the Kong Gateway\n\nKong Software uses the [docker-kong github\nrepository](https://github.com/Kong/docker-kong/) to build Docker images that\ncontain the Kong Gateway. We will use\n[docker-kong](https://github.com/Kong/docker-kong/) as a reference\nimplementation for describing how to build your own Docker images that contain the Kong\nGateway.\n\nWe do not provide a Dockerfile with the `FROM` argument parametrized to allow you to use your\nown base image because doing so impedes our ability to get public images\naccepted promptly by Dockerhub. If you wish, you can clone the [docker-kong github\nrepository](https://github.com/Kong/docker-kong/) and adjust the Dockerfile for\nyour desired package type to use your desired base image and package version,\nthen use the `build_v2` target in our `Makefile` to build your image. This\ndocument instead takes the approach of walking through the contents of the Dockerfiles\nso that you can create and maintain your own.\n\nTo build your Docker image, you will need to provide\n\n1. A base image of your choice\n1. An entrypoint script that runs the Kong Gateway\n1. A Dockerfile that installs the Kong Gateway from a location you specify\n\n## Base image\nYou can use images derived from RHEL or Ubuntu; Kong Software pushes `.deb`, and\n`.rpm` packages to our [public package repository](https://packages.konghq.com/).\n\n## Entrypoint script\n\nGet the [entrypoint\nscript](https://raw.githubusercontent.com/Kong/docker-kong/master/docker-entrypoint.sh)\nfrom the [docker-kong github repository](https://github.com/Kong/docker-kong/) and put it in\ndirectory where you are planning to run the command to build your Docker image.\n\n## Create a Dockerfile to install Kong Gateway\n\n### Decide how to get the Kong Gateway package\nKong Software provides `.deb`, and `.rpm` packages via our [public package\nrepository](https://packages.konghq.com/). Decide whether you want your\nDockerfile to\n\n1. Download the desired package from https://packages.konghq.com, or\n2. Download the desired package from another package repository you specify, or\n3. Install the desired package locally from disk.\n\nIf you choose 1 or 2, run the command `touch kong.rpm` in the directory to which\nyour Dockerfile will download the file; this guarantees that the downloaded file\nwill have the correct user, groups, and permissions.\n\nIf you choose 2 or 3, then download the package you wish to install and put it\nin the desired location.\n\n### Write a Dockerfile to install the Kong Gateway package\nUse the template below to create your Dockerfile. Angle brackets (`<>`) indicate\nvalues that you need to provide. Comments that start \"# Uncomment\" indicate that\nyou need to uncomment lines relevant to your context.\n\nThe template is based upon the Dockerfiles in the [docker-kong github\nrepository](https://github.com/Kong/docker-kong/) and created manually. Check\nthe Dockerfiles for changes.\n\n```\nFROM <your-base-image>\n\nARG KONG_VERSION=<Kong-Gateway-version>=\nENV KONG_VERSION $KONG_VERSION\n\n# Uncomment the ARG KONG_SHA256 line to build a container using a .deb or .rpm package\n# For .deb packages, the SHA is in\n# https://cloudsmith.io/~kong/repos/gateway-<gateway-major-version><gateway-minor-version>/packages/detail/deb/kong/<gateway-version>/a=amd64;xc=main;d=debian%252F<os_version>;t=binary/\n# For .rpm packages, the SHA is in\n# https://cloudsmith.io/~kong/repos/gateway-<gateway-major-version><gateway-minor-version>/packages/detail/rpm/kong/<gateway-version>/a=x86_64;d=el%252F<os_version>;t=binary/\n# ARG KONG_SHA256=\"<.deb-or.rpm-SHA>\"\n\n# Uncomment to download package from a remote repository\n# ARG ASSET=remote\n\n# Uncomment to install package from local disk\n# ARG ASSET=local\n\nARG EE_PORTS\n\n# Uncomment if you are installing a .rpm\n# COPY kong.rpm /tmp/kong.rpm\n\n# Uncomment if you are installing a .deb\n# COPY kong.deb /tmp/kong.deb\n\n# Uncomment if you are installing a .deb.tar.gz\n# COPY kong.deb.tar.gz /tmp/kong.deb.tar.gz\n\n# hadolint ignore=DL3015\n# Uncomment the following section if you are installing a .rpm\n# Edit the DOWNLOAD_URL line to install from a repository other than\n# packages.konghq.com\n# RUN set -ex; \\\n#     if [ \"$ASSET\" = \"remote\" ] ; then \\\n#       VERSION=$(grep '^VERSION_ID' /etc/os-release | cut -d = -f 2 | sed -e 's/^\"//' -e 's/\"$//' | cut -d . -f 1) \\\n#       && KONG_REPO=$(echo ${KONG_VERSION%.*} | sed 's/\\.//') \\\n#       && DOWNLOAD_URL=\"https://packages.konghq.com/public/gateway-$KONG_REPO/rpm/el/$VERSION/x86_64/kong-$KONG_VERSION.el$VERSION.x86_64.rpm\" \\\n#       && curl -fL $DOWNLOAD_URL -o /tmp/kong.rpm \\\n#       && echo \"$KONG_SHA256  /tmp/kong.rpm\" | sha256sum -c -; \\\n#     fi \\\n#     && yum install -y /tmp/kong.rpm \\\n#     && rm /tmp/kong.rpm \\\n#     && chown kong:0 /usr/local/bin/kong \\\n#     && chown -R kong:0 /usr/local/kong \\\n#     && ln -s /usr/local/openresty/bin/resty /usr/local/bin/resty \\\n#     && ln -s /usr/local/openresty/luajit/bin/luajit /usr/local/bin/luajit \\\n#     && ln -s /usr/local/openresty/luajit/bin/luajit /usr/local/bin/lua \\\n#     && ln -s /usr/local/openresty/nginx/sbin/nginx /usr/local/bin/nginx \\\n#     && kong version\n\n# Uncomment the following section if you are installing a .deb\n# Edit the DOWNLOAD_URL line to install from a repository other than\n# packages.konghq.com\n# RUN set -ex; \\\n#     apt-get update; \\\n#     apt-get install -y curl; \\\n#     if [ \"$ASSET\" = \"remote\" ] ; then \\\n#       CODENAME=$(cat /etc/os-release | grep VERSION_CODENAME | cut -d = -f 2) \\\n#       && KONG_REPO=$(echo ${KONG_VERSION%.*} | sed 's/\\.//') \\\n#       && DOWNLOAD_URL=\"https://packages.konghq.com/public/gateway-$KONG_REPO/deb/ubuntu/pool/$CODENAME/main/k/ko/kong_$KONG_VERSION/kong_${KONG_VERSION}_amd64.deb\" \\\n#       && curl -fL $DOWNLOAD_URL -o /tmp/kong.deb \\\n#       && echo \"$KONG_SHA256  /tmp/kong.deb\" | sha256sum -c -; \\\n#     fi \\\n#     && apt-get update \\\n#     && apt-get install --yes /tmp/kong.deb \\\n#     && rm -rf /var/lib/apt/lists/* \\\n#     && rm -rf /tmp/kong.deb \\\n#     && chown kong:0 /usr/local/bin/kong \\\n#     && chown -R kong:0 /usr/local/kong \\\n#     && ln -s /usr/local/openresty/bin/resty /usr/local/bin/resty \\\n#     && ln -s /usr/local/openresty/luajit/bin/luajit /usr/local/bin/luajit \\\n#     && ln -s /usr/local/openresty/luajit/bin/luajit /usr/local/bin/lua \\\n#     && ln -s /usr/local/openresty/nginx/sbin/nginx /usr/local/bin/nginx \\\n#     && kong version \\\n#     && apt-get purge curl -y\n\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\n\nUSER kong\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\nEXPOSE 8000 8443 8001 8444 $EE_PORTS\n\nSTOPSIGNAL SIGQUIT\n\nHEALTHCHECK --interval=60s --timeout=10s --retries=10 CMD kong-health\n\nCMD [\"kong\", \"docker-start\"]\n```\n\n### Run the docker command\n\nRun the command `docker build --no-cache -t kong-<your-base-image>\n<path-for-built-image>` to build the docker image.\n"
        },
        {
          "name": "compose",
          "type": "tree",
          "content": null
        },
        {
          "name": "customize",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-entrypoint.sh",
          "type": "blob",
          "size": 2.1865234375,
          "content": "#!/usr/bin/env bash\nset -Eeo pipefail\n\n# usage: file_env VAR [DEFAULT]\n#    ie: file_env 'XYZ_DB_PASSWORD' 'example'\n# (will allow for \"$XYZ_DB_PASSWORD_FILE\" to fill in the value of\n# \"$XYZ_DB_PASSWORD\" from a file, especially for Docker's secrets feature)\nfile_env() {\n  local var=\"$1\"\n  local fileVar=\"${var}_FILE\"\n  local def=\"${2:-}\"\n  # Do not continue if _FILE env is not set\n  if ! [ \"${!fileVar:-}\" ]; then\n    return\n  elif [ \"${!var:-}\" ] && [ \"${!fileVar:-}\" ]; then\n    echo >&2 \"error: both $var and $fileVar are set (but are exclusive)\"\n    exit 1\n  fi\n  local val=\"$def\"\n  if [ \"${!var:-}\" ]; then\n    val=\"${!var}\"\n  elif [ \"${!fileVar:-}\" ]; then\n    val=\"$(< \"${!fileVar}\")\"\n  fi\n  export \"$var\"=\"$val\"\n  unset \"$fileVar\"\n}\n\nexport KONG_NGINX_DAEMON=${KONG_NGINX_DAEMON:=off}\n\nif [[ \"$1\" == \"kong\" ]]; then\n\n  all_kong_options=\"/usr/local/share/lua/5.1/kong/templates/kong_defaults.lua\"\n  set +Eeo pipefail\n  while IFS='' read -r LINE || [ -n \"${LINE}\" ]; do\n      opt=$(echo \"$LINE\" | grep \"=\" | sed \"s/=.*$//\" | sed \"s/ //\" | tr '[:lower:]' '[:upper:]')\n      file_env \"KONG_$opt\"\n  done < $all_kong_options\n  set -Eeo pipefail\n\n  file_env KONG_PASSWORD\n  PREFIX=${KONG_PREFIX:=/usr/local/kong}\n\n  if [[ \"$2\" == \"docker-start\" ]]; then\n    kong prepare -p \"$PREFIX\" \"$@\"\n\n    # remove all dangling sockets in $PREFIX dir before starting Kong\n    LOGGED_SOCKET_WARNING=0\n    for localfile in \"$PREFIX\"/* \"$PREFIX\"/sockets/*; do\n      if [ -S \"$localfile\" ]; then\n        if (( LOGGED_SOCKET_WARNING == 0 )); then\n          printf >&2 'WARN: found dangling unix sockets in the prefix directory '\n          printf >&2 '(%q) ' \"$PREFIX\"\n          printf >&2 'while preparing to start Kong. This may be a sign that Kong '\n          printf >&2 'was previously shut down uncleanly or is in an unknown state '\n          printf >&2 'and could require further investigation.\\n'\n          LOGGED_SOCKET_WARNING=1\n        fi\n        rm -f \"$localfile\"\n      fi\n    done\n\n    ln -sfn /dev/stdout $PREFIX/logs/access.log\n    ln -sfn /dev/stdout $PREFIX/logs/admin_access.log\n    ln -sfn /dev/stderr $PREFIX/logs/error.log\n\n    exec /usr/local/openresty/nginx/sbin/nginx \\\n      -p \"$PREFIX\" \\\n      -c nginx.conf\n  fi\nfi\n\nexec \"$@\"\n"
        },
        {
          "name": "hadolint.yaml",
          "type": "blob",
          "size": 0.0517578125,
          "content": "ignored:\n  - DL3008\n  - DL3027\n  - SC2046\n  - DL4006\n"
        },
        {
          "name": "kong-build-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "kong.apk.tar.gz",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "kong.deb",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "kong.rpm",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "submit.sh",
          "type": "blob",
          "size": 4.9326171875,
          "content": "#!/usr/bin/env bash\nset -e\n\ngawk --version &> /dev/null || {\n  echo \"gawk is required to run this script.\"\n  exit 1\n}\n\nmode=\nversion=\nforce=\n\nfunction usage() {\n  echo \"usage: $0 <-p|-m> <version>\"\n  echo \"   -p for patch release (x.y.Z)\"\n  echo \"   -m for minor release (x.Y.0)\"\n  echo \"   -r for release candidate (x.Y.0rcZ)\"\n  echo \"example: $0 -p 1.1.2\"\n}\n\nwhile [ \"$1\" ]\ndo\n  case \"$1\" in\n  --help)\n    usage\n    exit 0\n    ;;\n  -p)\n    mode=patch\n    ;;\n  -r)\n    mode=rc\n    ;;\n  -m)\n    mode=minor\n    ;;\n  -f)\n    force=yes\n    ;;\n  [0-9]*)\n    version=$1\n    ;;\n  esac\n  shift\ndone\n\nfunction red() {\n  echo -e \"\\033[1;31m$@\\033[0m\"\n}\n\nfunction die() {\n  red \"*** $@\"\n  echo \"See also: $0 --help\"\n  echo\n  exit 1\n}\n\nhub --version &> /dev/null || die \"hub is not in PATH. Get it from https://github.com/github/hub\"\n\nif [ \"$mode\" = \"\" ]\nthen\n  die \"Error: mode flag is mandatory\"\nfi\n\nif ! [ \"$version\" ]\nthen\n  die \"Error: missing version\"\nfi\n\ngit checkout master\ngit pull\n\nif ! grep -q \"$version\" Dockerfile.deb\nthen\n  if [[ \"$force\" = \"yes\" ]]\n  then\n    echo \"Forcing to use the tag even though it is not in master.\"\n\n    git checkout \"$version\"\n\n    if ! grep -q \"$version$\" Dockerfile.deb\n    then\n      die \"Error: version in build script doesn't match required version.\"\n    fi\n  else\n    echo \"****************************************\"\n    echo \"Error: this script should be run only after the\"\n    echo \"desired release is merged in master of docker-kong.\"\n    echo \"\"\n    echo \"For making releases based on old versions,\"\n    echo \"Use -f to override and submit from the tag anyway.\"\n    echo \"****************************************\"\n    die \"Failed.\"\n  fi\nfi\n\nxy=${version%.*}\nz=${version#$xy.}\n\nrc=0\nif [ \"$mode\" = \"rc\" ]\nthen\n  rc=${version#*rc}\n  z=${z%rc*}\nfi\n\ncommit=$(git show \"$version\" | grep \"^commit\" | head -n 1 | cut -b8-48)\n\nif [ \"$mode\" = \"patch\" ]\nthen\n  prev=\"$xy.$[z-1]\"\n  prevcommit=$(git show \"$prev\" | grep \"^commit\" | head -n 1 | cut -b8-48)\nelif [ \"$mode\" = \"rc\" -a \"$rc\" -gt 1 ]\nthen\n  prev=\"$xy.${z}rc$[rc-1]\"\n  prevcommit=$(git show \"$prev\" | grep \"^commit\" | head -n 1 | cut -b8-48)\nfi\n\nrm -rf submit\nmkdir submit\ncd submit\ngit clone https://github.com/kong/official-images\ncd official-images\ngit remote add upstream http://github.com/docker-library/official-images\ngit fetch upstream\ngit checkout master\ngit merge upstream/master\n\ngit checkout -b release/$version\n\nif [ \"$mode\" = \"patch\" ]\nthen\n  sed \"s|$prev-ubuntu|$version-ubuntu|;\n       s|$prev,|$version,|;\n       s|$prevcommit|$commit|;\n       s|refs/tags/$prev|refs/tags/$version|\" library/kong > library/kong.new\n  mv library/kong.new library/kong\n\nelif [ \"$mode\" = \"rc\" -a \"$rc\" -gt 1 ]\nthen\n  sed \"s|$prev-ubuntu|$version-ubuntu|;\n       s|, ${xy}rc$[rc-1]|, ${xy}rc${rc}|;\n       s|$prev,|$version,|;\n       s|$prevcommit|$commit|;\n       s|refs/tags/$prev|refs/tags/$version|\" library/kong > library/kong.new\n  mv library/kong.new library/kong\n\nelif [ \"$mode\" = \"rc\" -a \"$rc\" -eq 1 ]\nthen\n  gawk '\n    BEGIN {\n      reset = 0\n      not_yet_first = 1\n    }\n    /^Tags/ {\n      if (not_yet_first == 1) {\n        not_yet_first = 0\n        before_first = 1\n      }\n    }\n    {\n      if (before_first == 1) {\n        v = \"'$version'\"\n        xy = \"'$xy'\"\n        commit = \"'$commit'\"\n        print \"Tags: \" v \"-ubuntu\"\n        print \"GitCommit: \" commit\n        print \"GitFetch: refs/tags/\" v\n        print \"Directory: ubuntu\"\n        print \"Architectures: amd64, arm64v8\"\n        print \"\"\n        before_first = 0\n      } else {\n        print\n      }\n    }\n  ' library/kong > library/kong.new\n  mv library/kong.new library/kong\n\nelif [ \"$mode\" = \"minor\" ]\nthen\n  gawk '\n    BEGIN {\n      reset = 0\n      not_yet_first = 1\n    }\n    /^Tags/ {\n      if (not_yet_first == 1) {\n        not_yet_first = 0\n        before_first = 1\n      }\n    }\n    /Tags: .*[0-9]rc[0-9].*/ {\n      in_rc_tag = 1\n    }\n    /^ *$/ {\n      if (in_rc_tag == 1) {\n        reset = 1\n      }\n    }\n    {\n      if (before_first == 1) {\n        v = \"'$version'\"\n        xy = \"'$xy'\"\n        commit = \"'$commit'\"\n        print \"Tags: \" v \"-ubuntu, \" xy \"-ubuntu, ubuntu\"\n        print \"GitCommit: \" commit\n        print \"GitFetch: refs/tags/\" v\n        print \"Directory: ubuntu\"\n        print \"Architectures: amd64, arm64v8\"\n        print \"\"\n        before_first = 0\n      }\n      if (!(in_rc_tag == 1)) {\n        gsub(\", latest\", \"\")\n        gsub(\", ubuntu\", \"\")\n        print\n      }\n      if (reset == 1) {\n        in_rc_tag = 0\n        reset = 0\n      }\n    }\n  ' library/kong > library/kong.new\n  mv library/kong.new library/kong\nfi\n\necho \"****************************************\"\ngit diff\necho \"****************************************\"\n\necho \"Everything looks all right? (y/n)\"\necho \"(Answering y will commit, push the branch, and submit the PR)\"\nread\nif ! [ \"$REPLY\" == \"y\" ]\nthen\n  exit 1\nfi\n\ngit commit -av -m \"kong $version\"\ngit push --set-upstream origin release/$version\n\nhub pull-request -b docker-library:master -h \"release/$version\" -m \"bump Kong to $version\"\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "ubuntu",
          "type": "tree",
          "content": null
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 2.724609375,
          "content": "#!/usr/bin/env bash\nset -e\n\nif ! [ \"$1\" ]\nthen\n   echo \"usage: $0 <version>\"\n   echo \"example: $0 1.2.3\"\n   exit 1\nfi\n\nversion=$1\n\nif [[ \"$version\" =~ \"rc\" ]]; then\n  version=\"${version//-}\"\nfi\n\nfunction red() {\n   echo -e \"\\033[1;31m$@\\033[0m\"\n}\n\nfunction die() {\n   red \"*** $@\"\n   echo \"See also: $0 --help\"\n   echo\n   exit 1\n}\n\n# get kong url from dockerfile\n# and fill it up with needed args\nfunction get_url() {\n  dockerfile=$1\n  arch=$2\n  args=$3\n\n  eval $args\n\n  raw_url=$(egrep -o 'https?://packages.konghq.com/public/gateway-[^ ]+' $dockerfile | sed 's/\\\"//g')\n\n  # set variables contained in raw url\n  KONG_VERSION=$version\n  KONG_REPO=$(echo ${KONG_VERSION%.*} | sed 's/\\.//')\n  ARCH=$arch\n\n  eval echo $raw_url\n}\n\n\nhub --version &> /dev/null || die \"hub is not in PATH. Get it from https://github.com/github/hub\"\n\n#kbt_in_kong_v=$(curl -sL https://raw.githubusercontent.com/Kong/kong/$version/.requirements | grep 'KONG_BUILD_TOOLS_VERSION\\=' | awk -F\"=\" '{print $2}' | tr -d \"'[:space:]\")\nkbt_in_kong_v=4.33.19\nif [[ -n \"$kbt_in_kong_v\" ]]; then\n  sed -i.bak 's/KONG_BUILD_TOOLS?=.*/KONG_BUILD_TOOLS?='$kbt_in_kong_v'/g' Makefile\nfi\n\n# Dockerfile.deb\nurl=$(get_url Dockerfile.rpm amd64 \"VERSION=8\")\necho $url\ncurl -fL $url -o /tmp/kong\nnew_sha=$(sha256sum /tmp/kong | cut -b1-64)\n\nsed -i.bak 's/ARG KONG_SHA256=.*/ARG KONG_SHA256=\\\"'$new_sha'\\\"/g' Dockerfile.rpm\nsed -i.bak 's/ARG KONG_VERSION=.*/ARG KONG_VERSION='$version'/g' Dockerfile.rpm\n\npushd ubuntu\n   url=$(get_url Dockerfile amd64 \"UBUNTU_CODENAME=jammy\")\n   echo $url\n   curl -fL $url -o /tmp/kong\n   new_sha=$(sha256sum /tmp/kong | cut -b1-64)\n\n   sed -i.bak 's/ARG KONG_AMD64_SHA=.*/ARG KONG_AMD64_SHA=\\\"'$new_sha'\\\"/g' Dockerfile\n\n   url=$(get_url Dockerfile arm64 \"UBUNTU_CODENAME=jammy\")\n   echo $url\n   curl -fL $url -o /tmp/kong\n   new_sha=$(sha256sum /tmp/kong | cut -b1-64)\n\n   sed -i.bak 's/ARG KONG_ARM64_SHA=.*/ARG KONG_ARM64_SHA=\\\"'$new_sha'\\\"/g' Dockerfile\n   sed -i.bak 's/ARG KONG_VERSION=.*/ARG KONG_VERSION='$version'/g' Dockerfile\npopd\n\n# Dockerfile.deb\nurl=$(get_url Dockerfile.deb amd64 \"CODENAME=bullseye\")\necho $url\ncurl -fL $url -o /tmp/kong\nnew_sha=$(sha256sum /tmp/kong | cut -b1-64)\n\nsed -i.bak 's/ARG KONG_SHA256=.*/ARG KONG_SHA256=\\\"'$new_sha'\\\"/g' Dockerfile.deb\nsed -i.bak 's/ARG KONG_VERSION=.*/ARG KONG_VERSION='$version'/g' Dockerfile.deb\n\necho \"****************************************\"\ngit diff\necho \"****************************************\"\n\necho \"Everything looks all right? (y/n)\"\necho \"(Answering y will commit, push the branch, and open a browser with the PR)\"\nread\nif ! [ \"$REPLY\" == \"y\" ]\nthen\n   exit 1\nfi\n\ngit commit -av -m \"chore(*) bump to Kong $version\"\ngit push --set-upstream origin release/$version\n\nhub pull-request -b master -h \"$branch\" -m \"Release: $version\"\n"
        }
      ]
    }
  ]
}