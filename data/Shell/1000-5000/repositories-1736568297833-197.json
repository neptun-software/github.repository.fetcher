{
  "metadata": {
    "timestamp": 1736568297833,
    "page": 197,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "azlux/log2ram",
      "stars": 2677,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0703125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016-2023, Azlux <github@azlux.fr>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.3271484375,
          "content": "# Log2Ram\nLog2Ram works just like ramlog for systemd (on Debian 8 Jessie for example).\n\nUseful for **RaspberryPi** for not writing on the SD card all the time. You need it because your SD card doesn't want to suffer anymore!\n\nExplanations: The script creates a `/var/log` mount point in RAM. So any writing of the log to the `/var/log` folder will not actually be written to disk (in this case to the SD card on a Raspberry Pi) but directly to RAM. By default, every day the CRON will synchronize the contents in RAM with the folder located on the physical disk. The script will also make this copy of RAM to disk in case of machine shutdowns (but, of course, it still won't do it in case of power failures). This way you can avoid excessive writing on the SD card and extend its life.\n\n[Log2Ram](https://github.com/azlux/log2ram)'s script works on every Linux system. If you don't have Systemd, you can still use Log2Ram with your own daemon manager.\n\nLog2Ram is based on transient /var/log for Systemd. For more information, check [here](https://www.debian-administration.org/article/661/A_transient_/var/log).\n\n_____\n## Table of Contents\n1. [Installation](#installation)\n2. [Is it working?](#is-it-working)\n3. [Upgrading](#upgrading)\n4. [Customization](#customization)\n5. [Troubleshooting](#troubleshooting)\n6. [Uninstallation](#uninstallation-)\n\n## Installation\n### Via APT (recommended)\n\n```bash\necho \"deb [signed-by=/usr/share/keyrings/azlux-archive-keyring.gpg] http://packages.azlux.fr/debian/ bookworm main\" | sudo tee /etc/apt/sources.list.d/azlux.list\nsudo wget -O /usr/share/keyrings/azlux-archive-keyring.gpg  https://azlux.fr/repo.gpg\nsudo apt update\nsudo apt install log2ram\n```\n### Manually\n\n```bash\ncurl -L https://github.com/azlux/log2ram/archive/master.tar.gz | tar zxf -\ncd log2ram-master\nchmod +x install.sh && sudo ./install.sh\ncd ..\nrm -r log2ram-master\n```\n\nFor better performances, `RSYNC` is a recommended package.\n\n**REBOOT** before installing anything else (for example `apache2`)\n\n## Is it working?\nAfter installing and rebooting, use systemctl to check if Log2Ram started successfully:\n\n```bash\nsystemctl status log2ram\n```\n\nThis will show a color-coded status (green: active/red: failed), as well as the last few log lines. To show the full log (scrolled to the end), run:\n\n```bash\njournalctl -u log2ram -e\n```\n\nThe log is also written to `/var/log/log2ram.log`.\n\nYou can also inspect the mount folder in RAM with:\n\n```bash\ndf -hT | grep log2ram | awk '{print \" Name: \" $1 \"\\nMount: \" $7 \"\\n Type: \" $2 \"\\nUsage: \" $6 \"\\n Size: \" $3 \"\\n Used: \" $4 \"\\n Free: \" $5}'\n```\nReturns:\n```bash\n Name: log2ram\nMount: /var/log\n Type: tmpfs\nUsage: 72%\n Size: 128M\n Used: 93M\n Free: 36M\n```\n\nOr also:\n\n```bash\nmount | grep log2ram | awk -F'[ ()]+' '{print \"   Name: \" $1 \"\\n  Mount: \" $3 \"\\n   Type: \" $5 \"\\nOptions: \" $6}'\n```\nReturns:\n```bash\n   Name: log2ram\n  Mount: /var/log\n   Type: tmpfs\nOptions: rw,nosuid,nodev,noexec,noatime,size=131072k,mode=755,uid=100000,gid=100000,inode64\n```\n\nIf you do not get any line as response of these commands, something is not working. Refer to [this section](#is-it-working).\n\n## Upgrading\n\nYou need to stop Log2Ram (`systemctl stop log2ram`) and execute the [installation](#installation) process. If you used APT, this will be done automatically.\n\n## Customization\n\n#### Variables\nIn the file `/etc/log2ram.conf`, there are nine variables:\n\n- `SIZE`: defines the size the log folder will reserve into the RAM (default is `128M`).\n- `USE_RSYNC`: (commented out by default = `true`) use `cp` instead of `rsync` (if set to `false`).\n- `NOTIFICATION`: disables the notification system mail if there is not enough place in RAM (if set to `false`).\n- `NOTIFICATION_COMMAND`: Specify the command for sending error notifications (By default, it uses the `mail` command).\n- `PATH_DISK`: activate log2ram for other path than default one. Paths should be separated with a `;`.\n- `JOURNALD_AWARE`: enable log rotation for journald logs before syncing. (default is `true`). Check the comment in the config file or the [Troubleshooting](#Troubleshooting) section below for journald SystemMaxUse recommendations.\n- `ZL2R`: enable zram compatibility (`false` by default). Check the comment in the config file. See https://github.com/StuartIanNaylor/zram-swap-config to configure a zram space on your raspberry before enabling this option.\n- `COMP_ALG`: choose a compression algorithm from those listed in /proc/crypto. (default is `lz4`). See [Compressor](#Compressor) section below for options.\n- `LOG_DISK_SIZE`: specifies the uncompressed zram disk size\n\n#### Refresh time\n\nBy default, Log2Ram writes to disk every day. If you think this is too much, you can run `systemctl edit log2ram-daily.timer` and for example add:\n\n```ini\n[Timer]\nOnCalendar=\nOnCalendar=Mon *-*-* 23:55:00\n```\n\nNote: \nThe ``OnCalendar=`` is important because it disables all existing times (e.g. the default one) for log2ram.\n\n... Or even disable it altogether with `systemctl disable log2ram-daily.timer`, if you instead prefer Log2Ram to be writing logs only on system stops/reboots.\n\n#### Compressor\nCompressor for ZRAM. Useful for the `COMP_ALG` of ZRAM in the config file.\n\n| Compressor name\t     | Ratio\t| Compression | Decompress. |\n|------------------------|----------|-------------|-------------|\n|zstd 1.3.4 -1\t         | 2.877\t| 470 MB/s\t  | 1380 MB/s   |\n|zlib 1.2.11 -1\t         | 2.743    | 110 MB/s    | 400 MB/s    |\n|brotli 1.0.2 -0\t     | 2.701\t| 410 MB/s\t  | 430 MB/s    |\n|quicklz 1.5.0 -1\t     | 2.238\t| 550 MB/s\t  | 710 MB/s    |\n|lzo1x 2.09 -1\t         | 2.108\t| 650 MB/s\t  | 830 MB/s    |\n|lz4 1.8.1\t             | 2.101    | 750 MB/s    | 3700 MB/s   |\n|snappy 1.1.4\t         | 2.091\t| 530 MB/s\t  | 1800 MB/s   |\n|lzf 3.6 -1\t             | 2.077\t| 400 MB/s\t  | 860 MB/s    |\n\n###### Now, muffins for everyone!\n\n## Troubleshooting\n\n### Existing content in `/var/log` too large for RAM\n\nOne thing that stops Log2Ram from functioning is if `/var/log` is too large before starting Log2Ram the first time. This can happen if logs had been collected for a long time before installing Log2Ram itself. Find the largest directories in `/var/log` (this example command only shows the 3 largest):\n\n```bash\nsudo du -hs /var/log/* | sort -h | tail -n 3\n```\n\nIf the `/var/log/journal` is very large, then there are a lot of system logs. Deletion of old \"archived\" logs can be fixed by adjusting a setting. Edit the `/etc/systemd/journald.conf` file and add the following option:\n\n```bash\nSystemMaxUse=20M\n```\n\n**Or** the more radical version of directly flushing the journal to a size that matches log2ram size imediately _(Be aware that this flish flush the systemd journal logs imediately to the given size!)_\n\n```bash\njournalctl --vacuum-size=32M\n```\n\nThis should be set to a value smaller than the size of the RAM volume; for example, half of it could be fine. Then, apply the new setting:\n\n```bash\nsudo systemctl restart systemd-journald\n```\n\nThis should shrink the size of \"archived\" logs to be below the newly imposed limit. Reboot and check that Log2Ram now works properly:\n\n```bash\nsudo reboot\n```\n\nWait until system reboots...\n\n```bash\nsystemctl status log2ram\n```\n\n## Uninstallation :(\n\n(Because sometimes we need it)\n\n### Via APT\n\n```bash\nsudo apt remove log2ram\n```\n\nYou can add the `--purge` argument to remove Log2Ram config files as well.\n\n### Manually\n\n```bash\nchmod +x /usr/local/bin/uninstall-log2ram.sh && sudo /usr/local/bin/uninstall-log2ram.sh\n```\n"
        },
        {
          "name": "ansible_playbook",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-packages.sh",
          "type": "blob",
          "size": 1.318359375,
          "content": "#!/usr/bin/env bash\n\n# Exit the script if any of the commands fail\nset -e\nset -u\nset -o pipefail\n\n# Set working directory to the location of this script\ncd \"$(dirname \"${BASH_SOURCE[0]}\")\"\n\nSTARTDIR=\"$(pwd)\"\nDESTDIR=\"$STARTDIR/pkg\"\nOUTDIR=\"$STARTDIR/deb\"\n# get version\nrepo=\"azlux/log2ram\"\napi=$(curl --silent \"https://api.github.com/repos/$repo/releases\" | jq \".[0]\")\nnew=$(echo $api | grep -Po '\"tag_name\": \"\\K.*?(?=\")')\n\n# Remove potential leftovers from a previous build\nrm -rf \"$DESTDIR\" \"$OUTDIR\"\n\n## log2ram\n# Create directory\ninstall -Dm 644 \"$STARTDIR/log2ram.service\" \"$DESTDIR/etc/systemd/system/log2ram.service\"\ninstall -Dm 644 \"$STARTDIR/log2ram-daily.service\" \"$DESTDIR/etc/systemd/system/log2ram-daily.service\"\ninstall -Dm 644 \"$STARTDIR/log2ram-daily.timer\" \"$DESTDIR/etc/systemd/system/log2ram-daily.timer\"\ninstall -Dm 755 \"$STARTDIR/log2ram\" \"$DESTDIR/usr/local/bin/log2ram\"\ninstall -Dm 644 \"$STARTDIR/log2ram.conf\" \"$DESTDIR/etc/log2ram.conf\"\ninstall -Dm 644 \"$STARTDIR/uninstall.sh\" \"$DESTDIR/usr/local/bin/uninstall-log2ram.sh\"\n\n# logrotate\ninstall -Dm 644 \"$STARTDIR/log2ram.logrotate\" \"$DESTDIR/etc/logrotate.d/log2ram\"\n\n# Build .deb\nmkdir \"$DESTDIR/DEBIAN\" \"$OUTDIR\"\ncp \"$STARTDIR/debian/\"* \"$DESTDIR/DEBIAN/\"\n\n# Set version\nsed -i \"s/VERSION-TO-REPLACE/$new/\" \"$DESTDIR/DEBIAN/control\"\n\ndpkg-deb --build \"$DESTDIR\" \"$OUTDIR\"\n"
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 1.2236328125,
          "content": "#!/usr/bin/env bash\n\nsystemctl -q is-active log2ram && {\n    echo \"ERROR: log2ram service is still running. Please run \\\"sudo systemctl stop log2ram\\\" to stop it.\"\n    exit 1\n}\n[ \"$(id -u)\" -eq 0 ] || {\n    echo \"You need to be ROOT (sudo can be used)\"\n    exit 1\n}\n\n# log2ram\nmkdir -p /usr/local/bin/\ninstall -m 644 log2ram.service /etc/systemd/system/log2ram.service\ninstall -m 644 log2ram-daily.service /etc/systemd/system/log2ram-daily.service\ninstall -m 644 log2ram-daily.timer /etc/systemd/system/log2ram-daily.timer\ninstall -m 755 log2ram /usr/local/bin/log2ram\nif [ ! -f /etc/log2ram.conf ]; then\n    install -m 644 log2ram.conf /etc/log2ram.conf\nfi\ninstall -m 644 uninstall.sh /usr/local/bin/uninstall-log2ram.sh\nsystemctl enable log2ram.service log2ram-daily.timer\n\n# logrotate\nif [ -d /etc/logrotate.d ]; then\n    install -m 644 log2ram.logrotate /etc/logrotate.d/log2ram\nelse\n    echo \"##### Directory /etc/logrotate.d does not exist. #####\"\n    echo \"#####  Skipping log2ram.logrotate installation.  #####\"\nfi\n\n# Remove a previous log2ram version\nrm -rf /var/log.hdd\n\n# Make sure we start clean\nrm -rf /var/hdd.log\n\necho \"#####         Reboot to activate log2ram         #####\"\necho \"##### edit /etc/log2ram.conf to configure options ####\"\n"
        },
        {
          "name": "log2ram",
          "type": "blob",
          "size": 5.056640625,
          "content": "#!/usr/bin/env bash\n\n. /etc/log2ram.conf\n\nif [ -z \"$PATH_DISK\" ]; then\n    PATH_DISK='/var/log'\nfi\n\nLOG_NAME='log2ram.log'\nNO_RSYNC=${USE_RSYNC#true}\nNOTIFICATION_COMMAND=${NOTIFICATION_COMMAND:=mail -s \"Log2Ram Error on $HOSTNAME\" root}\nNOTIFICATION=${NOTIFICATION:=true}\n\n## @fn is_safe()\n## @brief Check if hdd log exists\nis_safe() {\n    [ -d \"$HDD_LOG\" ] || echo \"ERROR: $HDD_LOG/ doesn't exist! Can't sync.\"\n    [ -d \"$HDD_LOG\" ] || exit 1\n}\n\n## @fn journald_logrotate()\n## @brief Logrotate the journal if the current RAM_LOG path is part of the journald directory\njournald_logrotate() {\n    if ! [ -x \"$(command -v journalctl)\" ] || ! [ \"$JOURNALD_AWARE\" = true ]; then\n        return 1\n    fi\n\n    if journalctl --header | grep \"File path\" | grep \"$RAM_LOG\" >/dev/null 2>&1; then\n        journalctl --rotate\n        return 0\n    else\n        return 1\n    fi\n}\n\n## @fn sync_to_disk()\n## @brief Sync memory back to hard disk\nsync_to_disk() {\n    is_safe\n\n    optional_params=()\n\n    if journald_logrotate; then\n        optional_params+=(\"--include=journal/*/*@*.journal\")\n        optional_params+=(\"--exclude=journal/*/*\")\n    fi\n\n    if [ -z \"${NO_RSYNC}\" ] && [ -x \"$(command -v rsync)\" ]; then\n        rsync -aAXv --sparse --inplace --no-whole-file --delete-after \"${optional_params[@]}\" \"$RAM_LOG\"/ \"$HDD_LOG\"/ 2>&1 |\n            tee -a \"$LOG2RAM_LOG\"\n    else\n        cp -rfup --sparse=always \"$RAM_LOG\"/ -T \"$HDD_LOG\"/ 2>&1 | tee -a \"$LOG2RAM_LOG\"\n    fi\n}\n\n## @fn sync_from_disk()\n## @brief Sync hard disk to memory\nsync_from_disk() {\n    is_safe\n\n    TP_SIZE=$SIZE\n    if [ \"$ZL2R\" = true ]; then\n        TP_SIZE=$LOG_DISK_SIZE\n    fi\n\n    if [ -n \"$(du -sh -t \"$TP_SIZE\" \"$HDD_LOG\"/ | cut -f1)\" ]; then\n        echo \"ERROR: RAM disk for \\\"$HDD_LOG/\\\" too small. Can't sync.\"\n        echo -e \"File(s) causing issues\\n: $(du -sh -t \"$TP_SIZE\" \"$HDD_LOG\"/*)\"\n        umount -l \"$RAM_LOG\"/\n        umount -l \"$HDD_LOG\"/\n        if [ \"$NOTIFICATION\" = true ]; then\n            echo \"LOG2RAM : No place on RAM for \\\"$HDD_LOG/\\\" anymore, fallback on the disk\" | $NOTIFICATION_COMMAND\n        fi\n        exit 1\n    fi\n\n    if [ -z \"${NO_RSYNC}\" ] && [ -x \"$(command -v rsync)\" ]; then\n        rsync -aAXv --sparse --inplace --no-whole-file --delete-after \"$HDD_LOG\"/ \"$RAM_LOG\"/ 2>&1 | tee -a \"$LOG2RAM_LOG\"\n    else\n        cp -rfup --sparse=always \"$HDD_LOG\"/ -T \"$RAM_LOG\"/ 2>&1 | tee -a \"$LOG2RAM_LOG\"\n    fi\n\n}\n\n## @fn wait_for()\n## @brief Wait for directory and create test file to make sure the directory exists\n## @param param1 path to the directory\nwait_for() {\n    WAIT_PATH=\"$1\"\n    while ! findmnt \"$WAIT_PATH\" >/dev/null; do\n        sleep 0.1\n    done\n\n    while [ ! -f \"$WAIT_PATH/log2ram.test\" ]; do\n        touch \"$WAIT_PATH/log2ram.test\"\n        sleep 0.1\n    done\n    rm \"$WAIT_PATH/log2ram.test\"\n}\n\n## @fn create_zram_log_drive()\n## @brief Create zram log device\ncreate_zram_log_drive() {\n    # Check Zram Class created\n    if [ ! -d \"/sys/class/zram-control\" ]; then\n        modprobe zram\n        RAM_DEV='0'\n    else\n        RAM_DEV=$(cat /sys/class/zram-control/hot_add)\n    fi\n    echo \"$COMP_ALG\" >\"/sys/block/zram${RAM_DEV}/comp_algorithm\"\n    echo \"$LOG_DISK_SIZE\" >\"/sys/block/zram${RAM_DEV}/disksize\"\n    echo \"$SIZE\" >\"/sys/block/zram${RAM_DEV}/mem_limit\"\n    mke2fs -t ext4 \"/dev/zram${RAM_DEV}\"\n}\n\ncase \"$1\" in\nstart)\n    IFS=';'\n    for i in $PATH_DISK; do\n        # Skip the path if the folder doesn't exist\n        [ ! -d \"$i\" ] && continue\n\n        PATH_FIRST_PART=\"${i%/*}\"\n        PATH_LAST_PART=\"${i##/*/}\"\n        RAM_LOG=\"$i\"\n        HDD_LOG=\"${PATH_FIRST_PART}/hdd.${PATH_LAST_PART}\"\n        LOG2RAM_LOG=\"${RAM_LOG}/${LOG_NAME}\"\n\n        [ -d \"$HDD_LOG\" ] || mkdir \"$HDD_LOG\"\n\n        mount --bind \"$RAM_LOG\"/ \"$HDD_LOG\"/\n        mount --make-private \"$HDD_LOG\"/\n        wait_for \"$HDD_LOG\"\n\n        if [ \"$ZL2R\" = true ]; then\n            create_zram_log_drive\n            mount -t ext4 -o nosuid,noexec,noatime,nodev,user=log2ram \"/dev/zram${RAM_DEV}\" \"$RAM_LOG\"/\n        else\n            mount -t tmpfs -o \"nosuid,noexec,noatime,nodev,mode=0755,size=${SIZE}\" log2ram \"$RAM_LOG\"/\n        fi\n        wait_for \"$RAM_LOG\"\n        sync_from_disk\n    done\n    exit 0\n    ;;\n\nstop)\n    IFS=';'\n    for i in $PATH_DISK; do\n        PATH_FIRST_PART=\"${i%/*}\"\n        PATH_LAST_PART=\"${i##/*/}\"\n        RAM_LOG=\"$i\"\n        HDD_LOG=\"${PATH_FIRST_PART}/hdd.${PATH_LAST_PART}\"\n        LOG2RAM_LOG=\"${RAM_LOG}/${LOG_NAME}\"\n\n        sync_to_disk\n        #ZRAM_LOG=$(awk '$2 == \"/var/log\" {print $1}' /proc/mounts)\n        #ZRAM_LOG=$(echo ${ZRAM_LOG} | grep -o -E '[0-9]+')\n        umount -l \"$RAM_LOG\"/\n        umount -l \"$HDD_LOG\"/\n        # Unsure as even with Root permision denied\n        #echo ${ZRAM_LOG} > /sys/class/zram-control/hot_remove\n    done\n    exit 0\n    ;;\n\nwrite)\n    IFS=';'\n    for i in $PATH_DISK; do\n        PATH_FIRST_PART=\"${i%/*}\"\n        PATH_LAST_PART=\"${i##/*/}\"\n        RAM_LOG=\"$i\"\n        HDD_LOG=\"${PATH_FIRST_PART}/hdd.${PATH_LAST_PART}\"\n        LOG2RAM_LOG=\"${RAM_LOG}/${LOG_NAME}\"\n\n        sync_to_disk\n    done\n    exit 0\n    ;;\n\n*)\n    echo 'Usage: log2ram {start|stop|write}' >&2\n    exit 1\n    ;;\nesac\n"
        },
        {
          "name": "log2ram-daily.service",
          "type": "blob",
          "size": 0.17578125,
          "content": "[Unit]\nDescription=Daily Log2Ram writing activities\nAfter=log2ram.service\nDocumentation=https://github.com/azlux/log2ram\n\n[Service]\nExecStart=/bin/systemctl reload log2ram.service\n"
        },
        {
          "name": "log2ram-daily.timer",
          "type": "blob",
          "size": 0.1337890625,
          "content": "[Unit]\nDescription=Daily Log2Ram writing activities\n\n[Timer]\nOnCalendar=*-*-* 23:55:00\nPersistent=true\n\n[Install]\nWantedBy=timers.target\n"
        },
        {
          "name": "log2ram.conf",
          "type": "blob",
          "size": 3.45703125,
          "content": "# Configuration file for Log2Ram (https://github.com/azlux/log2ram) under MIT license.\n# This configuration file is read by the log2ram service\n\n# Specify the amount of RAM reserved for storing logs. This setting determines the maximum size of the RAM folder.\n# Ensure 'SIZE=' is set larger than the current size of your /var/log directory to prevent startup failures.\n# Also, configure logrotate to manage log growth and prevent the /var/log directory from exceeding this reserved size.\n# The default setting of 128M suffices for many typical applications, but you may need to increase it for \n# servers or systems that generate extensive logging.\nSIZE=128M\n\n# Select the log syncing method between disk and RAM:\n# - 'rsync' is the default unless 'USE_RSYNC' is set to 'false'.\n# - If 'rsync' is unavailable, 'cp' is automatically used as a fallback.\n# - Set 'USE_RSYNC' to 'false' to explicitly use 'cp'.\n#USE_RSYNC=false\n\n# By default, if there is insufficient RAM space, a system notification email is sent.\n# Set this to 'false' to disable email notifications. (The error will still be logged locally).\n#NOTIFICATION=true\n\n# Specify the command for sending error notifications.\n# By default, it uses the `mail` command to send an email, with the message body provided via stdin.\n# You can replace this with any command (such as 'shoutrrr') or a custom script for handling notifications.\n#NOTIFICATION_COMMAND=mail -s \"Log2Ram Error on $HOSTNAME\"\n\n# Specify the directories to be stored in RAM. List each directory using its absolute path, e.g., `/path/folder`.\n# Corresponding directories on the HDD, named `/path/hdd.folder`, will be automatically created for each listed path.\n# Separate multiple paths with a semicolon `;` and do not include a trailing slash at the end of the paths.\n# Example: PATH_DISK=\"/var/log;/home/test/FolderInRam\"\nPATH_DISK=\"/var/log\"\n\n# Set to 'true' to enable log rotation for journald logs before syncing. \n# Note: 'rsync' must be used for this feature to work. \n# Ensure 'SystemMaxUse' is configured in '/etc/systemd/journald.conf' (to limit journald’s disk usage)\n# Note: Its value must be smaller than log2ram's RAM allocation defined by the SIZE variable above.\nJOURNALD_AWARE=true\n\n\n# **************** Zram backing conf  ****************\n\n# Set ZL2R=true to enable zram, providing compressed RAM storage for log2ram.\n# Set ZL2R=false to use tmpfs, which provides uncompressed memory-only storage.\nZL2R=false\n\n# Choose a compression algorithm from those listed in /proc/crypto. \n# 'lz4' is the fastest, offering the lightest CPU load but lower compression ratios.\n# 'deflate' (zlib) and 'Zstandard' (zstd) provide higher compression ratios but use more CPU.\n# 'lzo' is similar to 'lz4' but may perform better with certain binaries due to optimizations.\n# Set COMP_ALG to 'lz4' for speed, 'zstd' for better compression, or 'lzo' or 'zlib' if optimizations or availability are concerns.\nCOMP_ALG=lz4\n\n# LOG_DISK_SIZE specifies the uncompressed zram disk size. \n# (Sets the size of the zram disk that will be presented to the operating system).\n# To estimate amount of RAM this will consume, divide LOG_DISK_SIZE by your chosen compression algorithm's ratio:\n# - lzo/lz4 typically compresses at a ratio of 2.1:1\n# - zlib compresses at about 2.7:1\n# - zstandard (zstd) achieves around 2.9:1\n# Example calculation using lz4:\n#    Given LOG_DISK_SIZE = 256M (which represents 256 Megabytes of uncompressed log data),\n#    the estimated zram RAM usage = 256 MB / 2.1 ≈ 122 MB of RAM.\nLOG_DISK_SIZE=256M\n"
        },
        {
          "name": "log2ram.logrotate",
          "type": "blob",
          "size": 0.0947265625,
          "content": "/var/log/log2ram.log\n{\n  rotate 7\n  daily\n  missingok\n  notifempty\n  delaycompress\n  compress\n}\n\n"
        },
        {
          "name": "log2ram.service",
          "type": "blob",
          "size": 0.611328125,
          "content": "[Unit]\nDescription=Log2Ram\nDefaultDependencies=no\nBefore=basic.target rsyslog.service syslog-ng.service syslog.target systemd-journald.service sysinit.target shutdown.target zram-swap-conf.service apache2.service lighttpd.service\nAfter=local-fs.target\nConflicts=shutdown.target reboot.target halt.target\nRequiresMountsFor=/var/log /var/hdd.log\nIgnoreOnIsolate=yes\nDocumentation=https://github.com/azlux/log2ram\n\n[Service]\nType=oneshot\nExecStart=/usr/local/bin/log2ram start\nExecStop=/usr/local/bin/log2ram stop\nExecReload=/usr/local/bin/log2ram write\nTimeoutStartSec=120\nRemainAfterExit=yes\n\n[Install]\nWantedBy=sysinit.target\n"
        },
        {
          "name": "uninstall.sh",
          "type": "blob",
          "size": 0.7265625,
          "content": "#!/usr/bin/env bash\n\nif dpkg -l log2ram 2>/dev/null; then\n    echo \"Please run : apt remove log2ram\"\n    exit 1\nfi\n\nif [ \"$(id -u)\" -eq 0 ]; then\n    echo \"Not apt installed. Remove will continue with this script...\"\n    systemctl stop log2ram.service log2ram-daily.timer\n    systemctl disable log2ram.service log2ram-daily.timer\n    rm -rf /etc/systemd/system/log2ram*\n    rm /usr/local/bin/log2ram\n    rm /etc/log2ram.conf\n    rm -f /etc/logrotate.d/log2ram\n\n    if [ -d /var/hdd.log ]; then\n        rm -r /var/hdd.log\n    fi\n    echo \"Log2Ram is uninstalled, removing the uninstaller in progress\"\n    rm /usr/local/bin/uninstall-log2ram.sh\n    echo \"##### Reboot isn't needed #####\"\nelse\n    echo \"You need to be ROOT (sudo can be used)\"\nfi\n"
        }
      ]
    }
  ]
}