{
  "metadata": {
    "timestamp": 1736568562946,
    "page": 594,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "qt/qt5",
      "stars": 1519,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".commit-template",
          "type": "blob",
          "size": 1.5400390625,
          "content": "# ==[ Subject: One line only short meaningful description for logs ]===|\n\n\n# ==[ Details: Describe what changed and explain why it changed ]======|\n\n\n# Change log entry (see below for instructions).\n#[ChangeLog][][]\n\n# ==[ Footers: Uncomment and edit where applicable ]===================|\n#\n# One task per entry. Add a space after the colon.\n# Use Fixes to automatically close an issue, Reopens to automatically\n# reopen an issue, and Task-number to reference it without further\n# action.\n# You do not need to include Task-Number where Fixes or Reopens is\n# specified for the same issue.\n#Fixes: \n#Reopens: \n#Task-number: \n#Coverity-Id: \n#\n# Add a space-separated list of target branches that the change should\n# be cherry-picked to automatically.\n#Pick-to: \n#\n# ==[ Please wrap at 72 characters ]===================================|\n#\n# Remember to read http://wiki.qt.io/Commit_Policy\n#\n# Change log entry: If this commit adds a significant feature, fixes an\n# issue or contains a behavior change that is relevant to others,\n# add a change log entry. It can be multiple lines long and ends with an\n# empty newline. Try to integrate it into the flow of the commit message\n# to avoid redundancy.\n# Use the module name to indicate the area of the change e.g. [QtCore].\n# Optionally specify a class or subtopic [QtNetwork][QSslSocket].\n# Other common tags are: [General], [Important Behavior Changes],\n# [Platform Specific Changes][Windows][OS X][Linux/XCB].\n#\n# [ChangeLog][module][class/topic] description of the really important\n# change that was just made on several lines.\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.228515625,
          "content": ".tag                    export-subst\n.gitignore              export-ignore\n.gitattributes          export-ignore\n.commit-template        export-ignore eol=lf\ninit-repository         export-ignore\nREADME.git              export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1748046875,
          "content": "Makefile\n.qmake.cache\n.qmake.super\n*.pro.user*\nCMakeLists.txt.user*\nCMakeUserPresets.json\n.vscode\nbuild\nbuild-*\n.DS_Store\ninit-repository.opt\ninit-repository.opt.in\nconfig.tl.opt\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 7.2646484375,
          "content": "[submodule \"qtbase\"]\n\tpath = qtbase\n\turl = ../qtbase.git\n\tbranch = dev\n\tstatus = essential\n[submodule \"qtsvg\"]\n\tdepends = qtbase\n\tpath = qtsvg\n\turl = ../qtsvg.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtdeclarative\"]\n\tdepends = qtbase\n\trecommends = qtimageformats qtshadertools qtsvg qtlanguageserver\n\tpath = qtdeclarative\n\turl = ../qtdeclarative.git\n\tbranch = dev\n\tstatus = essential\n[submodule \"qtactiveqt\"]\n\tdepends = qtbase\n\tpath = qtactiveqt\n\turl = ../qtactiveqt.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtmultimedia\"]\n\tdepends = qtbase qtshadertools\n\trecommends = qtdeclarative qtquick3d\n\tpath = qtmultimedia\n\turl = ../qtmultimedia.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qttools\"]\n\tdepends = qtbase\n\trecommends = qtdeclarative qtactiveqt\n\tpath = qttools\n\turl = ../qttools.git\n\tbranch = dev\n\tstatus = essential\n[submodule \"qtxmlpatterns\"]\n\tdepends = qtbase\n\trecommends = qtdeclarative\n\tpath = qtxmlpatterns\n\turl = ../qtxmlpatterns.git\n\tbranch = dev\n\tstatus = ignore\n[submodule \"qttranslations\"]\n\tdepends = qttools\n\tpath = qttranslations\n\turl = ../qttranslations.git\n\tbranch = dev\n\tstatus = essential\n\tpriority = 30\n[submodule \"qtdoc\"]\n\tdepends = qtdeclarative qttools\n\trecommends = qtmultimedia qtshadertools qtwebengine\n\tpath = qtdoc\n\turl = ../qtdoc.git\n\tbranch = dev\n\tstatus = essential\n\tpriority = 40\n[submodule \"qtrepotools\"]\n\tpath = qtrepotools\n\turl = ../qtrepotools.git\n\tbranch = master\n\tstatus = essential\n\tproject = -\n[submodule \"qtqa\"]\n\tdepends = qtbase\n\tpath = qtqa\n\turl = ../qtqa.git\n\tbranch = dev\n\tstatus = essential\n\tpriority = 50\n[submodule \"qtlocation\"]\n\tdepends = qtbase qtpositioning\n\trecommends = qtdeclarative\n\tpath = qtlocation\n\turl = ../qtlocation.git\n\tbranch = dev\n\tstatus = preview\n[submodule \"qtpositioning\"]\n\tdepends = qtbase\n\trecommends = qtdeclarative qtserialport\n\tpath = qtpositioning\n\turl = ../qtpositioning.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtsensors\"]\n\tdepends = qtbase\n\trecommends = qtdeclarative\n\tpath = qtsensors\n\turl = ../qtsensors.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtsystems\"]\n\tdepends = qtbase\n\trecommends = qtdeclarative\n\tpath = qtsystems\n\turl = ../qtsystems.git\n\tbranch = dev\n\tstatus = ignore\n[submodule \"qtfeedback\"]\n\tdepends = qtdeclarative\n\trecommends = qtmultimedia\n\tpath = qtfeedback\n\turl = ../qtfeedback.git\n\tbranch = master\n\tstatus = ignore\n[submodule \"qtpim\"]\n\tdepends = qtdeclarative\n\tpath = qtpim\n\turl = ../qtpim.git\n\tbranch = dev\n\tstatus = ignore\n[submodule \"qtconnectivity\"]\n\tdepends = qtbase\n\trecommends = qtdeclarative\n\tpath = qtconnectivity\n\turl = ../qtconnectivity.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtwayland\"]\n\tdepends = qtbase\n\trecommends = qtdeclarative\n\tpath = qtwayland\n\turl = ../qtwayland.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qt3d\"]\n\tdepends = qtbase\n\trecommends = qtdeclarative qtshadertools qtmultimedia\n\tpath = qt3d\n\turl = ../qt3d.git\n\tbranch = dev\n\tstatus = deprecated\n[submodule \"qtimageformats\"]\n\tdepends = qtbase\n\tpath = qtimageformats\n\turl = ../qtimageformats.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtserialbus\"]\n\tdepends = qtbase\n\trecommends = qtserialport\n\tpath = qtserialbus\n\turl = ../qtserialbus.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtserialport\"]\n\tdepends = qtbase\n\tpath = qtserialport\n\turl = ../qtserialport.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtwebsockets\"]\n\tdepends = qtbase\n\trecommends = qtdeclarative\n\tpath = qtwebsockets\n\turl = ../qtwebsockets.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtwebchannel\"]\n\tdepends = qtbase\n\trecommends = qtdeclarative qtwebsockets\n\tpath = qtwebchannel\n\turl = ../qtwebchannel.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtwebengine\"]\n\tdepends = qtdeclarative\n\trecommends = qtwebchannel qttools qtpositioning\n\tpath = qtwebengine\n\turl = ../qtwebengine.git\n\tbranch = dev\n\tstatus = addon\n\tpriority = 10\n[submodule \"qtcanvas3d\"]\n\tdepends = qtdeclarative\n\tpath = qtcanvas3d\n\turl = ../qtcanvas3d.git\n\tbranch = dev\n\tstatus = ignore\n[submodule \"qtwebview\"]\n\tdepends = qtdeclarative\n\trecommends = qtwebengine\n\tpath = qtwebview\n\turl = ../qtwebview.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtcharts\"]\n\tdepends = qtbase\n\trecommends = qtdeclarative qtmultimedia\n\tpath = qtcharts\n\turl = ../qtcharts.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtdatavis3d\"]\n\tdepends = qtbase\n\trecommends = qtdeclarative qtmultimedia\n\tpath = qtdatavis3d\n\turl = ../qtdatavis3d.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtvirtualkeyboard\"]\n\tdepends = qtbase qtdeclarative qtsvg\n\trecommends = qtmultimedia\n\tpath = qtvirtualkeyboard\n\turl = ../qtvirtualkeyboard.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtgamepad\"]\n\tdepends = qtbase\n\trecommends = qtdeclarative\n\tpath = qtgamepad\n\turl = ../qtgamepad.git\n\tbranch = dev\n\tstatus = ignore\n[submodule \"qtscxml\"]\n\tdepends = qtbase qtdeclarative\n\tpath = qtscxml\n\turl = ../qtscxml.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtspeech\"]\n\tdepends = qtbase qtmultimedia\n\trecommends = qtdeclarative\n\tpath = qtspeech\n\turl = ../qtspeech.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtnetworkauth\"]\n\tdepends = qtbase\n\tpath = qtnetworkauth\n\turl = ../qtnetworkauth.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtremoteobjects\"]\n\tdepends = qtbase\n\trecommends = qtdeclarative\n\tpath = qtremoteobjects\n\turl = ../qtremoteobjects.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtwebglplugin\"]\n\tdepends = qtbase qtwebsockets\n\trecommends = qtdeclarative\n\tpath = qtwebglplugin\n\turl = ../qtwebglplugin.git\n\tbranch = dev\n\tstatus = ignore\n[submodule \"qtlottie\"]\n\tdepends = qtbase qtdeclarative\n\tpath = qtlottie\n\turl = ../qtlottie.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtquicktimeline\"]\n\tdepends = qtbase qtdeclarative\n\tpath = qtquicktimeline\n\turl = ../qtquicktimeline\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtquick3d\"]\n\tdepends = qtbase qtdeclarative qtshadertools\n\trecommends = qtquicktimeline\n\tpath = qtquick3d\n\turl = ../qtquick3d.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtshadertools\"]\n\tdepends = qtbase\n\tpath = qtshadertools\n\turl = ../qtshadertools.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qt5compat\"]\n\tdepends = qtbase qtdeclarative\n\tpath = qt5compat\n\turl = ../qt5compat.git\n\tbranch = dev\n\tstatus = deprecated\n[submodule \"qtcoap\"]\n\tdepends = qtbase\n\tpath = qtcoap\n\turl = ../qtcoap.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtmqtt\"]\n\tdepends = qtbase qtdeclarative\n\trecommends = qtwebsockets\n\tpath = qtmqtt\n\turl = ../qtmqtt.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtopcua\"]\n\tdepends = qtbase qtdeclarative\n\tpath = qtopcua\n\turl = ../qtopcua.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtlanguageserver\"]\n\tdepends = qtbase\n\tpath = qtlanguageserver\n\turl = ../qtlanguageserver.git\n\tbranch = dev\n\tstatus = preview\n[submodule \"qthttpserver\"]\n\tdepends = qtbase\n\trecommends = qtwebsockets\n\tpath = qthttpserver\n\turl = ../qthttpserver.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtquick3dphysics\"]\n\tdepends = qtbase qtdeclarative qtquick3d qtshadertools\n\tpath = qtquick3dphysics\n\turl = ../qtquick3dphysics.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtgrpc\"]\n\tdepends = qtbase\n\trecommends = qtdeclarative\n\tpath = qtgrpc\n\turl = ../qtgrpc.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtquickeffectmaker\"]\n\tdepends = qtbase qtdeclarative qtshadertools\n\trecommends = qtquick3d\n\tpath = qtquickeffectmaker\n\turl = ../qtquickeffectmaker.git\n\tbranch = dev\n\tstatus = addon\n[submodule \"qtgraphs\"]\n\tdepends = qtbase qtdeclarative qtquick3d\n\tpath = qtgraphs\n\turl = ../qtgraphs.git\n\tbranch = dev\n\tstatus = addon\n"
        },
        {
          "name": ".tag",
          "type": "blob",
          "size": 0.01171875,
          "content": "$Format:%H$\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.2529296875,
          "content": "# The real minimum version will be checked by the qtbase project.\n# 3.16 is the absolute minimum though.\ncmake_minimum_required(VERSION 3.16...3.21)\n\n# set QT_SUPERBUILD early, so that qtbase/.cmake.conf can check it\nset(QT_SUPERBUILD TRUE)\n\n# Include qtbase's .cmake.conf for access to QT_REPO_MODULE_VERSION\nset(__qt6_qtbase_src_path \"${CMAKE_CURRENT_SOURCE_DIR}/qtbase\")\ninclude(\"${__qt6_qtbase_src_path}/.cmake.conf\")\ninclude(\"${__qt6_qtbase_src_path}/cmake/QtBaseTopLevelHelpers.cmake\")\n\nqt_internal_top_level_setup_autodetect()\n\nproject(Qt\n    VERSION \"${QT_REPO_MODULE_VERSION}\"\n    DESCRIPTION \"Qt Libraries\"\n    HOMEPAGE_URL \"https://qt.io/\"\n    LANGUAGES CXX C ASM\n)\n\nqt_internal_top_level_setup_after_project()\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\nqt_internal_top_level_setup_cmake_module_path()\n\ninclude(QtTopLevelHelpers)\ninclude(ECMOptionalAddSubdirectory)\n\nqt_internal_top_level_before_build_submodules()\n\nqt_internal_find_modules(known_submodules)\n# Get submodule list if not already defined\nif(NOT QT_BUILD_SUBMODULES)\n    if(DEFINED ENV{QT_BUILD_SUBMODULES})\n        set(QT_BUILD_SUBMODULES \"$ENV{QT_BUILD_SUBMODULES}\")\n    else()\n        set(QT_BUILD_SUBMODULES \"${known_submodules}\")\n    endif()\nendif()\nset(QT_BUILD_SUBMODULES \"${QT_BUILD_SUBMODULES}\" CACHE STRING \"Submodules to build\")\n\n# Preliminary check if module should be skipped since -skip <module> or BUILD_<module>\n# are provided.\nset(explicitly_skipped_modules \"\")\nforeach(module IN LISTS known_submodules)\n    if(DEFINED BUILD_${module} AND NOT BUILD_${module})\n        list(APPEND explicitly_skipped_modules ${module})\n    endif()\nendforeach()\n\nforeach(module IN LISTS QT_BUILD_SUBMODULES)\n    if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${module}/CMakeLists.txt)\n        message(FATAL_ERROR\n            \"Module '${module}' cannot be found. Please double-check the \"\n            \"spelling and try again. Or run\\n\"\n            \"`./configure -init-submodules -submodules ${module}` \"\n            \"to clone the submodule and its dependencies.\")\n    endif()\nendforeach()\n\nqt_internal_sort_module_dependencies(\"${QT_BUILD_SUBMODULES}\" QT_BUILD_SUBMODULES\n    SKIP_MODULES ${explicitly_skipped_modules})\n\nforeach(module IN LISTS QT_BUILD_SUBMODULES)\n    # Check for unmet dependencies\n    if(NOT DEFINED BUILD_${module} OR BUILD_${module})\n        message(STATUS \"Checking dependencies of submodule '${module}'\")\n        get_property(required_deps GLOBAL PROPERTY QT_REQUIRED_DEPS_FOR_${module})\n        get_property(dependencies GLOBAL PROPERTY QT_DEPS_FOR_${module})\n        foreach(dep IN LISTS dependencies)\n            if (dep STREQUAL \"qtbase\")\n                # Always available skip\n                continue()\n            endif()\n\n            set(required FALSE)\n            if(dep IN_LIST required_deps)\n                set(required TRUE)\n            endif()\n\n            set(error_reason \"\")\n            if(NOT EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/${dep}/CMakeLists.txt\")\n                set(error_reason \"${dep}'s CMakeLists.txt couldn't be found\")\n            elseif(DEFINED BUILD_${dep} AND NOT BUILD_${dep})\n                set(error_reason \"building '${dep}' was explicitly disabled\")\n            endif()\n\n            if(NOT error_reason STREQUAL \"\")\n                if(required)\n                    if(QT_INTERNAL_CALLED_FROM_CONFIGURE)\n                        set(skip_argument \"-skip ${module}\")\n                    else()\n                        set(skip_argument \"-DBUILD_${module}=OFF\")\n                    endif()\n\n                    message(FATAL_ERROR \"Module '${module}' depends on '${dep}', \"\n                        \"but ${error_reason}.\\n\"\n                        \"Note: Use '${skip_argument}' to exclude it from the build.\")\n                else()\n                    message(STATUS \"Skipping optional dependency '${dep}' of '${module}', \"\n                        \"because ${error_reason}.\")\n                endif()\n            endif()\n        endforeach()\n    endif()\nendforeach()\n\nif(NOT DEFINED CMAKE_MESSAGE_CONTEXT_SHOW)\n    set(CMAKE_MESSAGE_CONTEXT_SHOW TRUE)\nendif()\n\nforeach(module IN LISTS QT_BUILD_SUBMODULES)\n    message(STATUS \"Configuring submodule '${module}'\")\n    ecm_optional_add_subdirectory(\"${module}\")\n\n    qt_internal_top_level_after_add_subdirectory()\nendforeach()\n\nqt_internal_top_level_end()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.3447265625,
          "content": "## Qt contribution guidelines\n\nWe welcome contributions to Qt!\n\nNote that we cannot accept pull requests on GitHub. All contributions to the Qt project are exclusively handled through the [Gerrit code review system](https://codereview.qt-project.org).\n\nRead the\n[Qt Contribution Guidelines](https://wiki.qt.io/Qt_Contribution_Guidelines) to learn more.\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.git",
          "type": "blob",
          "size": 1.7412109375,
          "content": "OBTAINING QT 6 FROM GIT\n=======================\n\n Synopsis\n ========\n\n For a more in-depth description on how to build Qt 6 from git,\n please see: http://wiki.qt.io/Building_Qt_6_from_Git\n\n Note that, although the git module is called qt5.git, the dev and 6.x branches\n do contain Qt 6!\n\n Get The Submodules\n ==================\n\n Cloning qt5.git does not automatically clone all submodules.\n To get the submodules, it is recommended to use the `init-repository' script.\n\n   ./init-repository\n\n See `./init-repository -help' for full documentation on the many supported\n options.\n\n\n Update The Submodules (optional)\n ================================\n\n After a plain `git clone' and `init-repository', you will have each submodule\n checked out to a particular SHA1.  This combination of SHA1s is guaranteed to\n have passed some basic acceptance testing.\n\n If (and only if!) you need newer versions of some submodules, you can manually\n fetch and/or pull and/or reset any modules you like, or use the qt5_tool to\n pull all modules:\n\n   ./qtrepotools/bin/qt5_tool -p\n\n NOTE! As soon as you change the SHA1 of any submodule, you are using a\n combination of modules which is potentially untested and broken!  If you want\n something which is more likely to compile, stick to the module SHA1s provided\n in this repository.\n\n\n Install The Git Grafts (optional)\n =================================\n\n If you want to be able to connect the Qt5 and Qt4 development history, you\n may set up git grafts with the following command:\n\n   git submodule foreach '../qtrepotools/bin/git-qt-grafts <path_to_history>'\n\n\n Developing and Contributing to Qt\n =================================\n\n For more information on how to develop and contribute to Qt, please see:\n http://wiki.qt.io/Category:Developing_Qt\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.67578125,
          "content": "HOW TO BUILD Qt 6\n=================\n\n\nSynopsis\n========\n\nSystem requirements\n-------------------\n\n* C++ compiler supporting the C++17 standard\n* CMake\n* Ninja\n* Python 3\n\nFor more details, see also https://doc.qt.io/qt-6/build-sources.html\n\nLinux, Mac:\n-----------\n\n```\ncd <path>/<source_package>\n./configure -prefix $PWD/qtbase\ncmake --build .\n```\n\nWindows:\n--------\n\n1. Open a command prompt.\n2. Ensure that the following tools can be found in the path:\n * Supported compiler (Visual Studio 2022 or later, or MinGW-builds gcc 13.1 or later)\n * Python 3 ([https://www.python.org/downloads/windows/] or from Microsoft Store)\n\n```\ncd <path>\\<source_package>\nconfigure -prefix %CD%\\qtbase\ncmake --build .\n```\n\nMore details follow.\n\n\nBuild!\n======\n\nQt is built with CMake, and a typical\n`configure && cmake --build .` build process is used.\n\nIf Ninja is installed, it is automatically chosen as CMake generator.\n\nSome relevant configure options (see configure -help):\n\n* `-release` Compile and link Qt with debugging turned off.\n* `-debug` Compile and link Qt with debugging turned on.\n\nExample for a release build:\n\n```\n./configure -prefix $PWD/qtbase\ncmake --build .\n```\n\nExample for a developer build:\n(enables more autotests, builds debug version of libraries, ...)\n\n```\n./configure -developer-build\ncmake --build .\n```\n\n See output of `./configure -help` for documentation on various options to\n configure.\n\n The above examples will build whatever Qt modules have been enabled\n by default in the build system.\n\n It is possible to build selected repositories with their dependencies by doing\n a `ninja <repo-name>/all`.  For example, to build only qtdeclarative,\n and the modules it depends on:\n\n```\n./configure\nninja qtdeclarative/all\n```\n\nThis can save a lot of time if you are only interested in a subset of Qt.\n\n\nHints\n=====\n\nThe submodule repository `qtrepotools` contains useful scripts for\ndevelopers and release engineers. Consider adding qtrepotools/bin\nto your `PATH` environment variable to access them.\n\n\nBuilding Qt from git\n====================\n\nSee http://wiki.qt.io/Building_Qt_6_from_Git and [README.git](README.git)\nfor more information.\nSee http://wiki.qt.io/Qt_6 for the reference platforms.\n\n\nDocumentation\n=============\n\nAfter configuring and compiling Qt, building the documentation is possible by running\n\n```\ncmake --build . --target docs\n```\n\nAfter having built the documentation, you need to install it with the following\ncommand:\n\n```\ncmake --build . --target install_docs\n```\n\nThe documentation is installed in the path specified with the\nconfigure argument `-docdir`.\n\nInformation about Qt's documentation is located in qtbase/doc/README\n\nNote: Building the documentation is only tested on desktop platforms.\n"
        },
        {
          "name": "README.md.template",
          "type": "blob",
          "size": 1.56640625,
          "content": "## Qt Package/Repository Name\n\n### Package Brief\n\n### Documentation\nThe documentation can be found in the following places:\n* The online Qt documentation:\n   * [<Qt module> documentation](https://doc.qt.io/qt-6/<qtmodule>-index.html)\n* Build from source:\n   * [Building Qt Documentation](https://wiki.qt.io/Building_Qt_Documentation)\n\n*Note that the documentation links in this document will always be for the\nlatest Qt 6 version. If you need to browse the documentation for a specific\nversion, you can [browse the archives](https://doc.qt.io/archives/).*\n\n### Build Process\nBuilding the package/repository does depend on the Qt packages listed in dependencies.yaml.\nFurther dependencies to system packages are listed in the configure output.\n\nSee the [documentation](https://doc.qt.io/qt-6/build-sources.html) for general\nadvice on building the Qt framework and its modules from sources. Further\ninformation on how to build from source is also available in the\n[wiki](https://wiki.qt.io/Building_Qt_6_from_Git).\n\n### Report an Issue\nIf you spot a bug, follow [these](https://doc.qt.io/qt-6/bughowto.html)\nsteps to report it.\n\n### Contribute to Qt\nWe welcome contributions to Qt! If you'd like to contribute, read the\n[Qt Contribution Guidelines](https://wiki.qt.io/Qt_Contribution_Guidelines).\n\n### Licensing\nQt is available under various licenses. For details, check out the\n[license documentation](https://doc.qt.io/qt-6/licensing.html).\n\n*Note that this README.md.template serves as a guideline for README.md files,\nand that further sections can be added to individual README.md files if\nnecessary.*\n"
        },
        {
          "name": "_clang-format",
          "type": "blob",
          "size": 3.76953125,
          "content": "# Copyright (C) 2016 Olivier Goffart <ogoffart@woboq.com>\n#\n# You may use this file under the terms of the 3-clause BSD license.\n# See the file LICENSE from this package for details.\n\n# This is the clang-format configuration style to be used by Qt,\n# based on the rules from https://wiki.qt.io/Qt_Coding_Style and\n# https://wiki.qt.io/Coding_Conventions\n\n---\n# Webkit style was loosely based on the Qt style\nBasedOnStyle: WebKit\n\nStandard: c++17\n\n# Column width is limited to 100 in accordance with Qt Coding Style.\n# https://wiki.qt.io/Qt_Coding_Style\n# Note that this may be changed at some point in the future.\nColumnLimit: 100\n# How much weight do extra characters after the line length limit have.\n# PenaltyExcessCharacter: 4\n\n# Disable reflow of some specific comments\n# qdoc comments: indentation rules are different.\n# Translation comments and SPDX license identifiers are also excluded.\nCommentPragmas: \"^!|^:|^ SPDX-License-Identifier:\"\n\n# We want a space between the type and the star for pointer types.\nPointerBindsToType: false\n\n# We generally use \"template <\" with space.\nSpaceAfterTemplateKeyword: true\n\n# We want to break before the operators, but not before a '='.\nBreakBeforeBinaryOperators: NonAssignment\n\n# Braces are usually attached, but not after functions or class declarations.\nBreakBeforeBraces: Custom\nBraceWrapping:\n    AfterClass: true\n    AfterControlStatement: false\n    AfterEnum: false\n    AfterFunction: true\n    AfterNamespace: false\n    AfterObjCDeclaration: false\n    AfterStruct: true\n    AfterUnion: false\n    BeforeCatch: false\n    BeforeElse: false\n    IndentBraces: false\n\n# When constructor initializers do not fit on one line, put them each on a new line.\nConstructorInitializerAllOnOneLineOrOnePerLine: true\n# Indent initializers by 4 spaces\nConstructorInitializerIndentWidth: 4\n\n# Indent width for line continuations.\nContinuationIndentWidth: 8\n\n# No indentation for namespaces.\nNamespaceIndentation: None\n\n# Allow indentation for preprocessing directives (if/ifdef/endif). https://reviews.llvm.org/rL312125\nIndentPPDirectives: AfterHash\n# We only indent with 2 spaces for preprocessor directives\nPPIndentWidth: 2\n\n# Horizontally align arguments after an open bracket.\n# The coding style does not specify the following, but this is what gives\n# results closest to the existing code.\nAlignAfterOpenBracket: true\nAlwaysBreakTemplateDeclarations: true\n\n# Ideally we should also allow less short function in a single line, but\n# clang-format does not handle that.\nAllowShortFunctionsOnASingleLine: Inline\n\n# The coding style specifies some include order categories, but also tells to\n# separate categories with an empty line. It does not specify the order within\n# the categories. Since the SortInclude feature of clang-format does not\n# re-order includes separated by empty lines, the feature is not used.\nSortIncludes: false\n\n# macros for which the opening brace stays attached.\nForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH, forever, Q_FOREVER, QBENCHMARK, QBENCHMARK_ONCE ]\n\n# Break constructor initializers before the colon and after the commas.\nBreakConstructorInitializers: BeforeColon\n\n# Add \"// namespace <namespace>\" comments on closing brace for a namespace\n# Ignored for namespaces that qualify as a short namespace,\n# see 'ShortNamespaceLines'\nFixNamespaceComments: true\n\n# Definition of how short a short namespace is, default 1\nShortNamespaceLines: 1\n\n# When escaping newlines in a macro attach the '\\' as far left as possible, e.g.\n##define a     \\\n#   something; \\\n#   other;     \\\n#   thelastlineislong;\nAlignEscapedNewlines: Left\n\n# Avoids the addition of a space between an identifier and the\n# initializer list in list-initialization.\nSpaceBeforeCpp11BracedList: false\n\n---\n# Use the Google-based style for .proto files.\nLanguage: Proto\nBasedOnStyle: Google\nIndentWidth: 4\nColumnLimit: 100\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "coin",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 0.771484375,
          "content": "#! /bin/sh\n# Copyright (C) 2024 The Qt Company Ltd.\n# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GPL-3.0-only WITH Qt-GPL-exception-1.0\n\nsrc_path=`dirname $0`\nsrc_path=`(cd \"$src_path\"; pwd)`\n\noptfile=config.tl.opt\nopttmpfile=config.tl.opt.in\n\n# Posix compatible way to truncate file\n: > \"$optfile\"\n: > \"$opttmpfile\"\n\n# For consistency, use QtWriteArgsFile.cmake to write the optfile like we do on Windows.\n# We do the same with the configure script in qtbase.\nfor arg in \"$@\"; do echo \\\"$arg\\\" >> \"$opttmpfile\"; done\n\ncmake -DIN_FILE=\"${opttmpfile}\" -DOUT_FILE=\"${optfile}\" -P \"${src_path}/cmake/QtWriteArgsFile.cmake\"\n\ncmake_script_path=\"$src_path/cmake/QtTopLevelConfigureScript.cmake\"\nexec cmake -DTOP_LEVEL_SRC_PATH=\"$src_path\" -DOPTFILE=\"${optfile}\" -P \"$cmake_script_path\"\n"
        },
        {
          "name": "configure.bat",
          "type": "blob",
          "size": 1.0419921875,
          "content": ":: Copyright (C) 2024 The Qt Company Ltd.\n:: SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GPL-3.0-only WITH Qt-GPL-exception-1.0\n\n@echo off\nsetlocal ENABLEDELAYEDEXPANSION ENABLEEXTENSIONS\nset script_dir_path=%~dp0\nset script_dir_path=%script_dir_path:~0,-1%\n\nset cmake_scripts_dir=%script_dir_path%\\cmake\n:: The '.' in 'echo.%*' ensures we don't print \"echo is off\" when no arguments are passed\n:: https://devblogs.microsoft.com/oldnewthing/20170802-00/?p=96735\n:: The space before the '>' makes sure that when we have a digit at the end of the args, we\n:: don't accidentally concatenate it with the '>' resulting in '0>' or '2>' which redirects into the\n:: file from a stream different than stdout, leading to broken or empty content.\necho.%* >config.tl.opt.in\n\ncall cmake -DIN_FILE=config.tl.opt.in -DOUT_FILE=config.tl.opt ^\n    -P \"%cmake_scripts_dir%\\QtWriteArgsFile.cmake\"\ncall cmake -DOPTFILE=config.tl.opt -DTOP_LEVEL_SRC_PATH=\"%script_dir_path%\" ^\n    -P \"%cmake_scripts_dir%\\QtTopLevelConfigureScript.cmake\"\n\ndel config.tl.opt.in\ndel config.tl.opt\n"
        },
        {
          "name": "configure.json",
          "type": "blob",
          "size": 0.091796875,
          "content": "{\n    \"commandline\": {\n        \"options\": {\n            \"skip\": \"addString\"\n        }\n    }\n}\n"
        },
        {
          "name": "init-repository",
          "type": "blob",
          "size": 0.943359375,
          "content": "#!/bin/sh\n# Copyright (C) 2024 The Qt Company Ltd.\n# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GPL-3.0-only WITH Qt-GPL-exception-1.0\n\nset -eu\n\nscript_dir_path=`dirname $0`\nscript_dir_path=`(cd \"$script_dir_path\"; pwd)`\n\noptfile=init-repository.opt\nopttmpfile=init-repository.opt.in\n\n# check whether cmake exists\nif ! [ -x \"$(command -v cmake)\" ]; then\n    echo \"Error: cmake was not found. You need to install it before configuring Qt.\"\n    exit 1\nfi\n\n# Posix compatible way to truncate file\n: > \"$optfile\"\n: > \"$opttmpfile\"\n\n# For consistency, use QtWriteArgsFile.cmake to write the optfile like we do on Windows.\n# We do the same with the configure script in qtbase.\nfor arg in \"$@\"; do echo \\\"$arg\\\" >> \"$opttmpfile\"; done\n\ncmake -DIN_FILE=\"${opttmpfile}\" -DOUT_FILE=\"${optfile}\" -P \"${script_dir_path}/cmake/QtWriteArgsFile.cmake\"\n\ncmake_script_path=\"$script_dir_path/cmake/QtIRScript.cmake\"\nexec cmake -DOPTFILE=\"${optfile}\" -P \"$cmake_script_path\"\n"
        },
        {
          "name": "init-repository.bat",
          "type": "blob",
          "size": 1.0224609375,
          "content": ":: Copyright (C) 2024 The Qt Company Ltd.\n:: SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GPL-3.0-only WITH Qt-GPL-exception-1.0\n\n@echo off\nsetlocal ENABLEDELAYEDEXPANSION ENABLEEXTENSIONS\nset script_dir_path=%~dp0\nset script_dir_path=%script_dir_path:~0,-1%\n\nset cmake_scripts_dir=%script_dir_path%\\cmake\n:: The '.' in 'echo.%*' ensures we don't print \"echo is off\" when no arguments are passed\n:: https://devblogs.microsoft.com/oldnewthing/20170802-00/?p=96735\n:: The space before the '>' makes sure that when we have a digit at the end of the args, we\n:: don't accidentally concatenate it with the '>' resulting in '0>' or '2>' which redirects into the\n:: file from a stream different than stdout, leading to broken or empty content.\necho.%* >init-repository.opt.in\n\ncall cmake -DIN_FILE=init-repository.opt.in -DOUT_FILE=init-repository.opt ^\n    -P \"%cmake_scripts_dir%\\QtWriteArgsFile.cmake\"\ncall cmake -DOPTFILE=init-repository.opt ^\n    -P \"%cmake_scripts_dir%\\QtIRScript.cmake\"\n\ndel init-repository.opt.in\ndel init-repository.opt\n"
        },
        {
          "name": "init-repository.pl",
          "type": "blob",
          "size": 20.90234375,
          "content": "#!/usr/bin/env perl\n# Copyright (C) 2015 The Qt Company Ltd.\n# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only\n\nuse v5.8;\nuse strict;\nuse warnings;\n\npackage Qt::InitRepository;\n\n\nsub printUsage($)\n{\n    my ($ex) = @_;\n\n    print <<EOF ;\nUsage:\n      ./init-repository [options]\n\n    This script may be run after an initial `git clone' of Qt5 in order to\n    check out all submodules. It fetches them from canonical URLs inferred\n    from the clone's origin.\n\nOptions:\n  Global options:\n\n    --force, -f\n        Force initialization (even if the submodules are already checked\n        out).\n\n    --force-hooks\n        Force initialization of hooks (even if there are already hooks in\n        checked out submodules).\n\n    --quiet, -q\n        Be quiet. Will exit cleanly if the repository is already\n        initialized.\n\n  Module options:\n\n    --module-subset=<module1>,<module2>...\n        Only initialize the specified subset of modules given as the\n        argument. Specified modules must already exist in .gitmodules. The\n        string \"all\" results in cloning all known modules. The strings\n        \"essential\", \"addon\", \"preview\", \"deprecated\", \"obsolete\",\n        \"additionalLibrary\", and \"ignore\" refer to classes of modules\n        identified by \"status=\" lines in the .gitmodules file.\n        You can use \"default\" in the subset as a short-hand for\n        \"essential,addon,preview,deprecated\", which corresponds to the set of\n        maintained modules included in standard Qt releases; this is also the\n        default module subset when this option is not given. Entries\n        may be prefixed with a dash to exclude them from a bigger\n        set, e.g. \"all,-ignore\".\n\n    --no-update\n        Skip the `git submodule update' command.\n\n    --no-fetch\n        Skip the `git fetch' commands. Implied by --no-update.\n\n    --branch\n        Instead of checking out specific SHA1s, check out the submodule\n        branches that correspond with the current supermodule commit. By\n        default, this option will cause local commits in the submodules to\n        be rebased. With --no-update, the branches will be checked out, but\n        their heads will not move.\n\n    --ignore-submodules\n        Set git config to ignore submodules by default when doing operations\n        on the qt5 repo, such as `pull', `fetch', `diff' etc.\n\n        After using this option, pass `--ignore-submodules=none' to git to\n        override it as needed.\n\n  Repository options:\n\n    --berlin\n        Switch to internal URLs and make use of the Berlin git mirrors.\n        (Implies `--mirror').\n\n    --oslo\n        Switch to internal URLs and make use of the Oslo git mirrors.\n        (Implies `--mirror').\n\n    --codereview-username <Gerrit/JIRA username>\n        Specify the user name for the (potentially) writable `gerrit' remote\n        for each module, for use with the Gerrit code review tool.\n\n        If this option is omitted, the gerrit remote is created without a\n        username and port number, and thus relies on a correct SSH\n        configuration.\n\n    --alternates <path to other Qt5 repo>\n        Adds alternates for each submodule to another full qt5 checkout.\n        This makes this qt5 checkout very small, as it will use the object\n        store of the alternates before unique objects are stored in its own\n        object store.\n\n        This option has no effect when using `--no-update'.\n\n        NOTE: This will make this repo dependent on the alternate, which is\n        potentially dangerous! The dependency can be broken by also using\n        the `--copy-objects' option, or by running \"git repack -a\" in each\n        submodule, where required. Please read the note about the `--shared'\n        option in the documentation of `git clone' for more information.\n\n    --copy-objects\n        When `--alternates' is used, automatically do a \"git repack -a\" in\n        each submodule after cloning, to ensure that the repositories are\n        independent from the source used as a reference for cloning.\n\n        Note that this negates the disk usage benefits gained from the use\n        of `--alternates'.\n\n    --mirror <url-base>\n        Uses <url-base> as the base URL for submodule git mirrors.\n\n        For example:\n\n          --mirror user\\@machine:/foo/bar/qt/\n\n        ...will use the following as a mirror for qtbase:\n\n          user\\@machine:/foo/bar/qt/qtbase.git\n\n        The mirror is permitted to contain a subset of the submodules; any\n        missing modules will fall back to the canonical URLs.\n\nEOF\n    exit($ex);\n}\n\nuse Carp         qw( confess             );\nuse Cwd          qw( getcwd abs_path     );\nuse English      qw( -no_match_vars      );\nuse File::Spec::Functions qw ( rel2abs   );\nuse Getopt::Long qw( GetOptions          );\n\nmy $script_path = abs_path($0);\n$script_path =~ s,[/\\\\][^/\\\\]+$,,;\n\nmy $GERRIT_SSH_BASE\n    = 'ssh://@USER@codereview.qt-project.org@PORT@/qt/';\n\nmy $BER_MIRROR_URL_BASE\n    = 'git://hegel/qt/';\n\nmy $OSLO_MIRROR_URL_BASE\n    = 'git://qilin/qt/';\n\nsub new\n{\n    my ($class, @arguments) = @_;\n\n    my $self = {};\n    bless $self, $class;\n    $self->parse_arguments(@arguments);\n\n    return $self;\n}\n\n# Like `system', but possibly log the command, and die on non-zero exit code\nsub exe\n{\n    my ($self, @cmd) = @_;\n\n    if (!$self->{quiet}) {\n        print \"+ @cmd\\n\";\n    }\n\n    if (system(@cmd) != 0) {\n        confess \"@cmd exited with status $CHILD_ERROR\";\n    }\n\n    return;\n}\n\nsub parse_arguments\n{\n    my ($self) = @_;\n\n    %{$self} = (%{$self},\n        'alternates'          => \"\",\n        'branch'              => 0,\n        'codereview-username' => \"\",\n        'detach-alternates'   => 0 ,\n        'force'               => 0 ,\n        'force-hooks'         => 0 ,\n        'ignore-submodules'   => 0 ,\n        'mirror-url'          => \"\",\n        'update'              => 1 ,\n        'fetch'               => 1 ,\n        'module-subset'       => \"default\",\n    );\n\n    GetOptions(\n        'alternates=s'      =>  \\$self->{qw{ alternates        }},\n        'branch'            =>  \\$self->{qw{ branch            }},\n        'codereview-username=s' => \\$self->{qw{ codereview-username }},\n        'copy-objects'      =>  \\$self->{qw{ detach-alternates }},\n        'force|f'           =>  \\$self->{qw{ force             }},\n        'force-hooks'       =>  \\$self->{qw{ force-hooks       }},\n        'ignore-submodules' =>  \\$self->{qw{ ignore-submodules }},\n        'mirror=s'          =>  \\$self->{qw{ mirror-url        }},\n        'quiet'             =>  \\$self->{qw{ quiet             }},\n        'update!'           =>  \\$self->{qw{ update            }},\n        'fetch!'            =>  \\$self->{qw{ fetch             }},\n        'module-subset=s'   =>  \\$self->{qw{ module-subset     }},\n\n        'help|?'            =>  sub { printUsage(1);            },\n\n        'berlin' => sub {\n            $self->{'mirror-url'}        = $BER_MIRROR_URL_BASE;\n        },\n        'oslo' => sub {\n            $self->{'mirror-url'}        = $OSLO_MIRROR_URL_BASE;\n        },\n    ) || printUsage(2);\n    @ARGV && printUsage(2);\n\n    # Replace any double trailing slashes from end of mirror\n    $self->{'mirror-url'} =~ s{//+$}{/};\n\n    $self->{'module-subset'} =~ s/\\bdefault\\b/preview,essential,addon,deprecated/;\n    $self->{'module-subset'} = [ split(/,/, $self->{'module-subset'}) ];\n\n    $self->{'fetch'} = 0 if (!$self->{'update'});\n\n    return;\n}\n\nsub check_if_already_initialized\n{\n    my ($self) = @_;\n\n    # We consider the repo as `initialized' if submodule.qtbase.url is set\n    if (qx(git config --get submodule.qtbase.url)) {\n        if (!$self->{force}) {\n            exit 0 if ($self->{quiet});\n            print \"Will not reinitialize already initialized repository (use -f to force)!\\n\";\n            exit 1;\n        }\n    }\n\n    return;\n}\n\nsub git_submodule_init\n{\n    my ($self, @init_args) = @_;\n\n    if ($self->{quiet}) {\n        unshift @init_args, '--quiet';\n    }\n    $self->exe('git', 'submodule', 'init', @init_args);\n\n    my $template = getcwd().\"/.commit-template\";\n    if (-e $template) {\n        $self->exe('git', 'config', 'commit.template', $template);\n    }\n\n    return;\n}\n\nuse constant {\n    STS_PREVIEW => 1,\n    STS_ESSENTIAL => 2,\n    STS_ADDON => 3,\n    STS_DEPRECATED => 4,\n    STS_OBSOLETE => 5,\n    STS_ADDITIONAL => 6\n};\n\nsub has_url_scheme\n{\n    my ($url) = @_;\n    return $url =~ \"^[a-z][a-z0-9+\\-.]*://\";\n}\n\nsub git_clone_all_submodules\n{\n    my ($self, $my_repo_base, $co_branch, $alternates, @subset) = @_;\n\n    my %subdirs = ();\n    my %subbranches = ();\n    my %subbases = ();\n    my %subinits = ();\n    my @submodconfig = qx(git config -l -f .gitmodules);\n    foreach my $line (@submodconfig) {\n        # Example line: submodule.qtqa.url=../qtqa.git\n        next if ($line !~ /^submodule\\.([^.=]+)\\.([^.=]+)=(.*)$/);\n        if ($2 eq \"path\") {\n            $subdirs{$1} = $3;\n        } elsif ($2 eq \"branch\") {\n            $subbranches{$1} = $3;\n        } elsif ($2 eq \"url\") {\n            my ($mod, $base) = ($1, $3);\n            if (!has_url_scheme($base)) {\n                $base = $my_repo_base.'/'.$base;\n            }\n            while ($base =~ s,(?!\\.\\./)[^/]+/\\.\\./,,g) {}\n            $subbases{$mod} = $base;\n        } elsif ($2 eq \"update\") {\n            push @subset, '-'.$1 if ($3 eq 'none');\n        } elsif ($2 eq \"status\") {\n            if ($3 eq \"preview\") {\n                $subinits{$1} = STS_PREVIEW;\n            } elsif ($3 eq \"essential\") {\n                $subinits{$1} = STS_ESSENTIAL;\n            } elsif ($3 eq \"addon\") {\n                $subinits{$1} = STS_ADDON;\n            } elsif ($3 eq \"deprecated\") {\n                $subinits{$1} = STS_DEPRECATED;\n            } elsif ($3 eq \"obsolete\") {\n                $subinits{$1} = STS_OBSOLETE;\n            } elsif ($3 eq \"additionalLibrary\") {\n                $subinits{$1} = STS_ADDITIONAL;\n            } elsif ($3 eq \"ignore\") {\n                delete $subinits{$1};\n            } else {\n                die(\"Invalid subrepo status '$3' for '$1'.\\n\");\n            }\n        }\n    }\n\n    my %include = ();\n    foreach my $mod (@subset) {\n        my $del = ($mod =~ s/^-//);\n        my $fail = 0;\n        my @what;\n        if ($mod eq \"all\") {\n            @what = keys %subbases;\n        } elsif ($mod eq \"essential\") {\n            @what = grep { ($subinits{$_} || 0) eq STS_ESSENTIAL } keys %subbases;\n        } elsif ($mod eq \"addon\") {\n            @what = grep { ($subinits{$_} || 0) eq STS_ADDON } keys %subbases;\n        } elsif ($mod eq \"additionalLibrary\") {\n            @what = grep { ($subinits{$_} || 0) eq STS_ADDITIONAL } keys %subbases;\n        } elsif ($mod eq \"preview\") {\n            @what = grep { ($subinits{$_} || 0) eq STS_PREVIEW } keys %subbases;\n        } elsif ($mod eq \"deprecated\") {\n            @what = grep { ($subinits{$_} || 0) eq STS_DEPRECATED } keys %subbases;\n        } elsif ($mod eq \"obsolete\") {\n            @what = grep { ($subinits{$_} || 0) eq STS_OBSOLETE } keys %subbases;\n        } elsif ($mod eq \"ignore\") {\n            @what = grep { ($subinits{$_} || 0) eq 0 } keys %subbases;\n        } elsif (defined($subdirs{$mod})) {\n            push @what, $mod;\n        } else {\n            $fail = 1;\n        }\n        if ($del) {\n            print \"Warning: excluding non-existent module '$mod'.\\n\"\n                if ($fail);\n            map { delete $include{$_} } @what;\n        } else {\n            die(\"Error: module subset names non-existent '$mod'.\\n\")\n                if ($fail);\n            map { $include{$_} = 1; } @what;\n        }\n    }\n\n    my @modules = sort keys %include;\n\n    $self->git_submodule_init(map { $subdirs{$_} } @modules);\n\n    # manually clone each repo here, so we can easily use reference repos, mirrors etc\n    my @configresult = qx(git config -l);\n    foreach my $line (@configresult) {\n        # Example line: submodule.qtqa.url=git://code.qt.io/qt/qtqa.git\n        next if ($line !~ /submodule\\.([^.=]+)\\.url=/);\n        my $module = $1;\n\n        if (!defined($include{$module})) {\n            $self->exe('git', 'config', '--remove-section', \"submodule.$module\");\n            next;\n        }\n\n        if ($self->{'ignore-submodules'}) {\n            $self->exe('git', 'config', \"submodule.$module.ignore\", 'all');\n        }\n    }\n\n    my $any_bad = 0;\n    foreach my $module (@modules) {\n        $any_bad = 1\n            if ($self->git_stat_one_submodule($subdirs{$module}));\n    }\n    die(\"Dirty submodule(s) present; cannot proceed.\\n\")\n        if ($any_bad);\n\n    foreach my $module (@modules) {\n        $self->git_clone_one_submodule($subdirs{$module}, $subbases{$module},\n                                       $co_branch && $subbranches{$module}, $alternates);\n    }\n\n    if ($co_branch) {\n        foreach my $module (@modules) {\n            my $branch = $subbranches{$module};\n            die(\"No branch defined for submodule $module.\\n\") if (!defined($branch));\n            my $orig_cwd = getcwd();\n            my $module_dir = $subdirs{$module};\n            chdir($module_dir) or confess \"chdir $module_dir: $OS_ERROR\";\n            my $br = qx(git rev-parse -q --verify $branch);\n            if (!$br) {\n                $self->exe('git', 'checkout', '-b', $branch, \"origin/$branch\");\n            } else {\n                $self->exe('git', 'checkout', $branch);\n            }\n            chdir(\"$orig_cwd\") or confess \"chdir $orig_cwd: $OS_ERROR\";\n        }\n    }\n    if ($self->{update}) {\n        my @cmd = ('git', 'submodule', 'update', '--force', '--no-fetch');\n        push @cmd, '--remote', '--rebase' if ($co_branch);\n        $self->exe(@cmd);\n\n        foreach my $module (@modules) {\n            if (-f $module.'/.gitmodules') {\n                my $orig_cwd = getcwd();\n                chdir($module) or confess \"chdir $module: $OS_ERROR\";\n                $self->git_clone_all_submodules($subbases{$module}, 0, \"$alternates/$module\", \"all\");\n                chdir(\"$orig_cwd\") or confess \"chdir $orig_cwd: $OS_ERROR\";\n            }\n        }\n    }\n\n    return;\n}\n\nsub git_add_remotes\n{\n    my ($self, $gerrit_repo_basename) = @_;\n\n    my $gerrit_repo_url = $GERRIT_SSH_BASE;\n    # If given a username, make a \"verbose\" remote.\n    # Otherwise, rely on proper SSH configuration.\n    if ($self->{'codereview-username'}) {\n        $gerrit_repo_url =~ s,\\@USER\\@,$self->{'codereview-username'}\\@,;\n        $gerrit_repo_url =~ s,\\@PORT\\@,:29418,;\n    } else {\n        $gerrit_repo_url =~ s,\\@[^\\@]+\\@,,g;\n    }\n\n    $gerrit_repo_url .= $gerrit_repo_basename;\n    $self->exe('git', 'config', 'remote.gerrit.url', $gerrit_repo_url);\n    $self->exe('git', 'config', 'remote.gerrit.fetch', '+refs/heads/*:refs/remotes/gerrit/*', '/heads/');\n}\n\nsub git_stat_one_submodule\n{\n    my ($self, $submodule) = @_;\n\n    return 0 if (! -e \"$submodule/.git\");\n\n    my $orig_cwd = getcwd();\n    chdir($submodule) or confess \"chdir $submodule: $OS_ERROR\";\n\n    my @sts = qx(git status --porcelain --untracked=no --ignore-submodules=all);\n\n    # After a git clone --no-checkout, git status reports all files as\n    # staged for deletion, but we still want to update the submodule.\n    # It's unlikely that a genuinely dirty index would have _only_ this\n    # type of modifications, and it doesn't seem like a horribly big deal\n    # to lose them anyway, so ignore them.\n    @sts = grep(!/^D  /, @sts);\n\n    chdir($orig_cwd) or confess \"cd $orig_cwd: $OS_ERROR\";\n\n    return 0 if (!@sts);\n\n    print STDERR \"$submodule is dirty.\\n\";\n\n    return -1;\n}\n\nsub git_clone_one_submodule\n{\n    my ($self, $submodule, $repo_basename, $branch, $alternates) = @_;\n\n    my $mirror_url            = $self->{ 'mirror-url'        };\n    my $protocol              = $self->{ 'protocol'          };\n\n    # `--reference FOO' args for the clone, if any.\n    my @reference_args;\n\n    if ($alternates) {\n        # alternates is a qt5 repo, so the submodule will be under that.\n        if (-e \"$alternates/$submodule/.git\") {\n            @reference_args = ('--reference', \"$alternates/$submodule\");\n        }\n        else {\n            print \" *** $alternates/$submodule not found, ignoring alternate for this submodule\\n\";\n        }\n    }\n\n    my $do_clone = (! -e \"$submodule/.git\");\n\n    my $url = $repo_basename;\n    if (!has_url_scheme($url)) {\n        $url = $self->{'base-url'}.$url;\n    }\n\n    my $mirror;\n    if (!has_url_scheme($repo_basename) && $mirror_url && ($do_clone || $self->{fetch})) {\n        $mirror = $mirror_url.$repo_basename;\n    }\n\n    if ($mirror) {\n        # Only use the mirror if it can be reached.\n        eval { $self->exe('git', 'ls-remote', $mirror, 'test/if/mirror/exists') };\n        if ($@) {\n            warn \"mirror [$mirror] is not accessible; $url will be used\\n\";\n            undef $mirror;\n        }\n    }\n\n    if ($do_clone) {\n        if ($branch) {\n            push @reference_args, '--branch', $branch;\n        } else {\n            push @reference_args, '--no-checkout';\n        }\n        $self->exe('git', 'clone', @reference_args,\n                   ($mirror ? $mirror : $url), $submodule);\n    }\n\n    my $orig_cwd = getcwd();\n    chdir($submodule) or confess \"chdir $submodule: $OS_ERROR\";\n\n    if ($mirror) {\n        # This is only for the user's convenience - we make no use of it.\n        $self->exe('git', 'config', 'remote.mirror.url', $mirror);\n        $self->exe('git', 'config', 'remote.mirror.fetch', '+refs/heads/*:refs/remotes/mirror/*');\n    }\n\n    if (!$do_clone && $self->{fetch}) {\n        # If we didn't clone, fetch from the right location. We always update\n        # the origin remote, so that submodule update --remote works.\n        $self->exe('git', 'config', 'remote.origin.url', ($mirror ? $mirror : $url));\n        $self->exe('git', 'fetch', 'origin');\n    }\n\n    if (!($do_clone || $self->{fetch}) || $mirror) {\n        # Leave the origin configured to the canonical URL. It's already correct\n        # if we cloned/fetched without a mirror; otherwise it may be anything.\n        $self->exe('git', 'config', 'remote.origin.url', $url);\n    }\n\n    my $template = $orig_cwd.\"/.commit-template\";\n    if (-e $template) {\n        $self->exe('git', 'config', 'commit.template', $template);\n    }\n\n    if (!has_url_scheme($repo_basename)) {\n        $self->git_add_remotes($repo_basename);\n    }\n\n    if ($self->{'detach-alternates'}) {\n        $self->exe('git', 'repack', '-a');\n\n        my $alternates_path = '.git/objects/info/alternates';\n        if (-e $alternates_path) {\n            unlink($alternates_path) || confess \"unlink $alternates_path: $OS_ERROR\";\n        }\n    }\n\n    chdir($orig_cwd) or confess \"cd $orig_cwd: $OS_ERROR\";\n\n    return;\n}\n\nsub ensure_link\n{\n    my ($self, $src, $tgt) = @_;\n    return if (!$self->{'force-hooks'} and -f $tgt);\n    unlink($tgt); # In case we have a dead symlink or pre-existing hook\n    print \"Aliasing $src\\n      as $tgt ...\\n\" if (!$self->{quiet});\n    if ($^O ne \"msys\" && $^O ne \"MSWin32\") {\n        return if eval { symlink($src, $tgt) };\n    }\n    # Windows doesn't do (proper) symlinks. As the post_commit script needs\n    # them to locate itself, we write a forwarding script instead.\n    open SCRIPT, \">\".$tgt or die \"Cannot create forwarding script $tgt: $!\\n\";\n    # Make the path palatable for MSYS.\n    $src =~ s,\\\\,/,g;\n    $src =~ s,^(.):/,/$1/,g;\n    print SCRIPT \"#!/bin/sh\\nexec $src \\\"\\$\\@\\\"\\n\";\n    close SCRIPT;\n}\n\nsub git_install_hooks\n{\n    my ($self) = @_;\n\n    my $hooks = $script_path.'/qtrepotools/git-hooks';\n    if (!-d $hooks) {\n        print \"Warning: cannot find Git hooks, qtrepotools module might be absent\\n\";\n        return;\n    };\n\n    my @configresult = qx(git config --list --local);\n    foreach my $line (@configresult) {\n        next if ($line !~ /submodule\\.([^.=]+)\\.url=/);\n        my $module = $1;\n        my $module_gitdir = $module.'/.git';\n        if (!-d $module_gitdir) {\n            open GITD, $module_gitdir or die \"Cannot open $module: $!\\n\";\n            my $gd = <GITD>;\n            close GITD;\n            chomp($gd);\n            $gd =~ s/^gitdir: // or die \"Malformed .git file $module_gitdir\\n\";\n            $module_gitdir = rel2abs($gd, $module);\n            if (open COMD, $module_gitdir.'/commondir') {\n                my $cd = <COMD>;\n                chomp($cd);\n                $module_gitdir .= '/'.$cd;\n                $module_gitdir = abs_path($module_gitdir);\n                close COMD;\n            }\n        }\n        $self->ensure_link($hooks.'/gerrit_commit_msg_hook', $module_gitdir.'/hooks/commit-msg');\n        $self->ensure_link($hooks.'/git_post_commit_hook', $module_gitdir.'/hooks/post-commit');\n        $self->ensure_link($hooks.'/clang-format-pre-commit', $module_gitdir.'/hooks/pre-commit');\n    }\n}\n\nsub run\n{\n    my ($self) = @_;\n\n    $self->check_if_already_initialized;\n\n    chomp(my $url = `git config remote.origin.url`);\n    die(\"Have no origin remote.\\n\") if (!$url);\n    $url =~ s,\\.git/?$,,;\n    $url =~ s/((?:tqtc-)?qt5)$//;\n    my $qtrepo = $1 || 'qt5';\n    $self->{'base-url'} = $url;\n\n    $self->git_clone_all_submodules($qtrepo, $self->{branch}, $self->{alternates}, @{$self->{'module-subset'}});\n\n    $self->git_add_remotes($qtrepo);\n\n    $self->git_install_hooks;\n\n    return;\n}\n\n#==============================================================================\n\nQt::InitRepository->new()->run if (!caller);\n1;\n"
        },
        {
          "name": "qt3d",
          "type": "commit",
          "content": null
        },
        {
          "name": "qt5compat",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtactiveqt",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtbase",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtcanvas3d",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtcharts",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtcoap",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtconnectivity",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtdatavis3d",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtdeclarative",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtdoc",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtfeedback",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtgamepad",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtgraphs",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtgrpc",
          "type": "commit",
          "content": null
        },
        {
          "name": "qthttpserver",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtimageformats",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtlanguageserver",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtlocation",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtlottie",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtmqtt",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtmultimedia",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtnetworkauth",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtopcua",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtpim",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtpositioning",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtqa",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtquick3d",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtquick3dphysics",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtquickeffectmaker",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtquicktimeline",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtremoteobjects",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtrepotools",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtscxml",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtsensors",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtserialbus",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtserialport",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtshadertools",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtspeech",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtsvg",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtsystems",
          "type": "commit",
          "content": null
        },
        {
          "name": "qttools",
          "type": "commit",
          "content": null
        },
        {
          "name": "qttranslations",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtvirtualkeyboard",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtwayland",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtwebchannel",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtwebengine",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtwebglplugin",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtwebsockets",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtwebview",
          "type": "commit",
          "content": null
        },
        {
          "name": "qtxmlpatterns",
          "type": "commit",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}