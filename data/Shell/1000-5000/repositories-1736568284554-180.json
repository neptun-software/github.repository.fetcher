{
  "metadata": {
    "timestamp": 1736568284554,
    "page": 180,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "phusion/passenger-docker",
      "stars": 2777,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0263671875,
          "content": "Dockerfile\nDockerfile.base\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2490234375,
          "content": "# http://EditorConfig.org\n\nroot = true\n\n[Gemfile]\nindent_style = space\nindent_size = 2\ntrim_trailing_whitespace = true\n\n[*.rb]\nindent_style = space\nindent_size = 2\ntrim_trailing_whitespace = true\n\n[*.sh]\nindent_style = tab\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0263671875,
          "content": ".DS_Store\n.vagrant\n*_image\n"
        },
        {
          "name": ".rspec",
          "type": "blob",
          "size": 0.0185546875,
          "content": "--format d\n--color\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 17.47265625,
          "content": "## 3.1.1 (not released)\n * Added a Ruby 3.4 image (Ruby 3.4.1)\n * Default Ruby version is now 3.4.1\n * Upgraded to JRuby 9.4.9.0 (from 9.4.8.0).\n\n## 3.1.0 (release date: 2024-12-09)\n * Upgraded image base to phusion/baseimage:noble-1.0.0\n   * Upgraded to Ubuntu 24.04 LTS (Noble)\n       - note updated compiler chain and all tools; please test your apps thoroughly\n   * Default Python version is now 3.12 (from 3.10)\n   * Python 2.7 and 3.7 are no longer available from the Deadsnakes PPA; we weren't providing images for either previously\n   * Nginx version is now 1.24 (from 1.18)\n       - changelog can be found at https://nginx.org/en/CHANGES-1.24\n       - if you provide your own nginx.conf, please define error_log at the root scope, not the http scope; see https://github.com/phusion/passenger/issues/2541\n       - a number of modules are no longer installed and enabled by default (mod-http-geoip2, mod-http-image-filter, mod-http-xslt-filter, mod-mail, mod-stream, mod-stream-geoip2)\n    * Redis version is now 7.0.15 (from 6.0.16)\n * Added a Python 3.13 image\n * Dropped Python 3.8 image\n * Upgraded to Ruby 3.2.6\n * Upgraded to Ruby 3.3.6\n * Upgraded to Phusion Passenger 6.0.24 (from 6.0.23).\n\n## 3.0.7 (release date: 2024-07-30)\n * Upgraded to Ruby 3.3.4\n * Upgraded to Phusion Passenger 6.0.23 (from 6.0.22).\n * Upgraded to Ruby 3.2.5\n * Upgraded to JRuby 9.4.8.0 (from 9.4.7.0).\n * Upgraded to JRuby 9.3.15.0 (from 9.3.14.0).\n\n## 3.0.6 (release date: 2024-06-13)\n * Upgraded to Ruby 3.1.6\n * Upgraded to Ruby 3.3.3\n\n## 3.0.5 (release date: 2024-05-18)\n * Removed Ruby 3.0 (EOL: 2024-04-23)\n * Upgraded to Phusion Passenger 6.0.22 (from 6.0.21).\n\n## 3.0.4 (release date: 2024-05-17)\n * Upgraded to Phusion Passenger 6.0.21 (from 6.0.20).\n * Upgraded to JRuby 9.4.7.0 (from 9.4.6.0).\n\n## 3.0.3 (release date: 2024-04-26)\n * Upgraded to JRuby 9.3.14.0 (from 9.3.13.0)\n * Upgraded to JRuby 9.4.6.0 (from 9.4.5.0)\n * Upgraded Node 18 LTS -> 20 LTS.\n * Fix https://github.com/rvm/rvm/issues/5449\n * Upgraded to Ruby 3.0.7\n * Upgraded to Ruby 3.1.5\n * Upgraded to Ruby 3.2.4\n * Upgraded to Ruby 3.3.1\n * Updated image base to phusion/baseimage:jammy-1.0.4\n\n## 3.0.2 (release date: 2024-02-23)\n * Fixes an issue with passenger-full not having ruby 3.3 as default\n * Bumps fallback ruby to 3.3.\n\n## 3.0.1 (release date: 2024-01-22)\n * Upgraded to Phusion Passenger 6.0.20 (from 6.0.19).\n\n## 3.0.0 (release date: 2024-01-18)\n * Added a Ruby 3.3.0 image\n * Upgraded to JRuby 9.3.13.0 (from 9.3.11.0)\n * Upgraded to JRuby 9.4.5.0 (from 9.4.3.0)\n * Added versioned Python images for Python versions 3.8 to 3.12\n * Upgraded to Ruby 3.2.3\n\n## 2.6.0 (release date: 2023-11-20)\n * Upgraded to Phusion Passenger 6.0.19 (from 6.0.18).\n * Switched image base to phusion/baseimage:jammy-1.0.1\n   * Upgraded to Ubuntu 22.04 LTS (Jammy)\n   * Default Python version is now 3.10, and Python 2.7 is no longer installed by default\n * Updated Python install script to be able to install any supported version from base or the Deadsnakes PPA\n * Updated Node.js install script to be able to install any supported version from Nodesource; default version is still 18\n * Created yarn and related executables whenever installing Node.js\n * Removed Ruby 2.7 (EOL 2023-03-31)\n * Compile all CRuby versions from source to ensure uniformity and YJIT capability in versions 3.1+\n * Use Ruby 3.2.x by default\n * Upgraded to JRuby 9.3.11.0 (from 9.3.9.0)\n * Upgraded to JRuby 9.4.3.0 (from 9.4.0.0)\n\n## 2.5.1 (release date: 2023-06-14)\n * Upgraded to Phusion Passenger 6.0.18 (from 6.0.17).\n * Upgraded to Ruby 2.7.8\n * Upgraded to Ruby 3.0.6\n * Upgraded to Ruby 3.1.4\n * Upgraded to Ruby 3.2.2\n * Upgraded Node 16 LTS -> 18 LTS.\n\n## 2.5.0 (release date: 2023-01-26)\n * Upgraded to Phusion Passenger 6.0.17 (from 6.0.16).\n * Added a Ruby 3.2.0 image\n * Added a JRuby 9.4.0.0 image\n * Change to installing Node via Node Source (in Ruby images) instead of using outdated distro version, Node images already did this.\n\n## 2.4.1 (release date: 2022-12-20)\n * Fixed tmpdir issue with Passenger 6.0.16\n\n## 2.4.0 (release date: 2022-12-19)\n * Removed Ruby 2.6 (end of life was March 31, 2022)\n * Upgraded to Ruby 2.7.7\n * Upgraded to Ruby 3.0.5\n * Upgraded to Ruby 3.1.3\n * Upgraded to JRuby 9.3.9.0 (from 9.3.4.0)\n\n## 2.3.1 (release date: 2022-09-19)\n * Upgraded to Phusion Passenger 6.0.15 (from 6.0.14).\n\n## 2.3.0 (release date: 2022-05-10)\n * Upgraded to Phusion Passenger 6.0.14 (from 6.0.13).\n * Upgraded to Ruby 2.6.10\n * Upgraded to Ruby 2.7.6\n * Upgraded to Ruby 3.0.4\n * Upgraded to Ruby 3.1.2\n\n## 2.2.0 (release date: 2022-03-29)\n * Upgraded to JRuby 9.3.4.0 (from 9.3.0.0).\n * Upgraded to Phusion Passenger 6.0.13 (from 6.0.12).\n * Added Ruby 3.1.1 image.\n\n## 2.1.0 (release date: 2021-12-07)\n * Upgraded to Ruby 2.6.9\n * Upgraded to Ruby 2.7.5\n * Upgraded to Ruby 3.0.3\n * Switched the ruby shims to use rvm wrappers, to hopefully address some ruby-environment instability.\n\n## 2.0.1 (release date: 2021-11-05)\n * Added tzdata for Ruby convienience.\n * Upgraded to Phusion Passenger 6.0.12 (from 6.0.11).\n * Upgraded Node 14 LTS -> 16 LTS.\n\n## 2.0.0 (release date: 2021-10-01)\n * Upgraded to Phusion Passenger 6.0.11 (from 6.0.10).\n * Upgraded to latest baseimage.\n * Inlcude fix for expired Let's Encrypt root certificate.\n * Upgraded to JRuby 9.3.0.0 with openjdk-17.\n * Dropped ruby 2.4 and 2.5 images, they're EOL.\n\n## 1.0.19 (release date: 2021-07-19)\n * Fixed wrong Ruby 3 being deleted (3.0.2 instead of 3.0.1 was deleted, 3.0.2 now restored and 3.0.1 removed).\n\n## 1.0.18 (release date: 2021-07-19)\n * Fixed additional unwanted Rubies being present.\n\n## 1.0.17 (release date: 2021-07-19)\n * Upgraded to Ruby 2.6.8\n * Upgraded to Ruby 2.7.4\n * Upgraded to Ruby 3.0.2\n\n## 1.0.16 (release date: 2021-07-14)\n * Upgraded to Phusion Passenger 6.0.10 (from 6.0.9).\n\n## 1.0.15 (release date: 2021-06-02)\n * Upgraded to Phusion Passenger 6.0.9 (from 6.0.8).\n * This version includes a workaround for issue #313, which will be fixed properly with Passsenger 6.0.10.\n\n## 1.0.14 (release date: 2021-05-06)\n * Upgraded to Ruby 2.5.9\n * Upgraded to Ruby 2.6.7\n * Upgraded to Ruby 2.7.3\n * Upgraded to Ruby 3.0.1\n\n## 1.0.13 (release date: 2021-04-01)\n * Upgraded to Phusion Passenger 6.0.8 (from 6.0.7).\n * Added support for Ruby 3.0.0.\n\n## 1.0.12 (release date: 2020-11-18)\n * Upgraded to Phusion Passenger 6.0.7 (from 6.0.6).\n * Upgraded to Ruby 2.7.2 (from 2.7.1).\n * Default Ruby set to 2.7.2.\n * Upgraded to JRuby 9.2.13.0 with openjdk-14.\n * Upgraded to Node.js 14 LTS (from 10).\n * Switched image base to the baseimage-docker master tag.\n * Upgraded to Ubuntu 20.04.\n * Dropped support for Ruby 2.3.\n * Upgraded to Nginx 1.18.0.\n\n## 1.0.11 (release date: 2020-07-14)\n * Upgraded to Phusion Passenger 6.0.6 (from 6.0.5).\n\n## 1.0.10 (release date: 2020-05-29)\n * Upgraded to Ruby 2.4.10.\n * Upgraded to Ruby 2.5.8.\n * Upgraded to Ruby 2.6.6.\n * Upgraded to JRuby 9.2.11.1.\n * Added support for Ruby 2.7.1.\n * Default ruby set to 2.7.1.\n * Upgraded to Phusion Passenger 6.0.5 (from 6.0.4).\n\n## 1.0.9 (release date: 2019-11-25)\n * Upgraded to Ruby 2.4.9.\n * Upgraded to Ruby 2.5.7.\n * Upgraded to Ruby 2.6.5.\n * Default ruby set to 2.6.5.\n\n## 1.0.8 (release date: 2019-09-17)\n\n * Upgraded to Phusion Passenger 6.0.4 (from 6.0.3).\n\n## 1.0.7 (release date: 2019-09-12)\n\n * Upgraded to Phusion Passenger 6.0.3 (from 6.0.2).\n\n## 1.0.6 (release date: 2019-07-02)\n * Upgraded to Ruby 2.4.6.\n * Upgraded to Ruby 2.6.3.\n * reopen passenger logs in logrotate script. Closes GH-255.\n * Defers installing bundler to rvm. Closes GH-260.\n\n## 1.0.5 (release date: 2019-03-15)\n * Upgraded to Ruby 2.5.5.\n\n## 1.0.4 (release date: 2019-03-14)\n * Upgraded to Ruby 2.5.4.\n * Upgraded to Ruby 2.6.2.\n * Upgraded to JRuby 9.2.5.0.\n\n## 1.0.3 (release date: 2019-02-25)\n\n * Upgraded to Phusion Passenger 6.0.2 (from 6.0.1).\n\n## 1.0.2 (release date: 2019-02-06)\n\n * Update signing keys from rvm.io. Closes GH-234.\n * Upgraded to Phusion Passenger 6.0.1 (from 6.0.0).\n\n## 1.0.1 (release date: 2018-11-30)\n\n * Upgraded to Phusion Passenger 6.0.0 (from 5.3.6).\n\n## 1.0.0 (release date: 2018-11-06)\n\n * Upgraded to baseimage-docker 0.11.\n * Upgraded to Ubuntu 18.04.\n * Upgraded to Phusion Passenger 5.3.6.\n * Upgraded to Nginx 1.14.0.\n * Upgraded to Ruby 2.5.3.\n * Upgraded to Ruby 2.4.5.\n * Upgraded to Ruby 2.3.8.\n * Upgraded to JRuby 9.2.0.0.\n * Upgraded to Redis 4.0.\n * Dropped Ruby 2.0, 2.1 and 2.2.\n\n## 0.9.35 (release date: 2018-08-01)\n\n * Upgraded to Phusion Passenger 5.3.4 (from 5.3.3).\n\n## 0.9.34 (release date: 2018-06-26)\n\n * Upgraded to Phusion Passenger 5.3.3 (from 5.3.2).\n\n## 0.9.33 (release date: 2018-06-12)\n\n * Upgraded to Phusion Passenger 5.3.2 (from 5.3.1).\n * Upgraded to baseimage-docker 0.10.1 (from 0.9.22).\n\n## 0.9.32 (release date: 2018-05-14)\n\n * Upgraded to Phusion Passenger 5.3.1 (from 5.3.0).\n\n## 0.9.31 (release date: 2018-05-09)\n\n * Upgraded to Phusion Passenger 5.3.0 (from 5.2.3).\n\n## 0.9.30 (release date: 2018-04-06)\n\n * Upgraded to Phusion Passenger 5.2.3 (from 5.2.1).\n * Upgraded to Node.js 8.11.1 LTS Carbon (from 8.9.4).\n * Thanks to contribution by ledermann (PR 214):\n   - Upgraded to Ruby 2.5.1 (from 2.5.0).\n   - Upgraded to Ruby 2.4.4 (from 2.4.2).\n   - Upgraded to Ruby 2.3.7 (from 2.3.6).\n   - Upgraded to Ruby 2.2.10 (from 2.2.9).\n\n\n## 0.9.29 (release date: 2018-02-27)\n\n * Upgraded to Phusion Passenger 5.2.1 (from 5.2.0).\n * Hints about app permission in container. Thanks to contribution by skunkworker (PR 206)\n * Thanks to contribution by ledermann (PR 204):\n   - Added build for Ruby 2.5 (2.5.0). \n   - Upgraded to Ruby 2.4.3 (from 2.4.2).\n   - Upgraded to Ruby 2.3.6 (from 2.3.5).\n   - Upgraded to Ruby 2.2.9 (from 2.2.8).\n * Upgraded to Node.js 8.9.4 LTS (from 7.10.0, sticking to LTS releases from now).\n * Updated Makefile to also push latest tag. Closes GH-197.\n\n## 0.9.28 (release date: 2018-01-29)\n\n * Upgraded to Phusion Passenger 5.2.0 (from 5.1.12).\n\n## 0.9.27 (release date: 2017-11-23)\n\n * Upgraded to Phusion Passenger 5.1.12 (from 5.1.11).\n\n## 0.9.26 (release date: 2017-10-16)\n\n * Upgraded to Phusion Passenger 5.1.11 (from 5.1.8).\n * Upgraded to Ruby 2.4.2 (from 2.4.1).\n * Upgraded to Ruby 2.3.5 (from 2.3.3).\n * Upgraded to Ruby 2.2.8 (from 2.2.5).\n\n## 0.9.25 (release date: 2017-08-23)\n\n * Upgraded to Phusion Passenger 5.1.8 (from 5.1.7).\n\n## 0.9.24 (release date: 2017-08-01)\n\n * Upgraded to Phusion Passenger 5.1.7 (from 5.1.6).\n\n## 0.9.23 (release date: 2017-07-24)\n\n * Upgraded to Phusion Passenger 5.1.6 (from 5.1.5).\n\n## 0.9.22 (release date: 2017-06-19)\n\n * Upgraded to Phusion Passenger 5.1.5 (from 5.1.4).\n * Upgraded to Ruby 2.4.1 (from 2.4.0).\n * Upgraded to baseimage-docker 0.9.22 (from 0.9.21).\n\n## 0.9.21 (release date: 2017-05-18)\n\n * Upgraded to Phusion Passenger 5.1.4.\n * Upgraded to baseimage-docker 0.9.21.\n * Upgraded to Node.js 7.10.0.\n * Fixed RVM warning about the PATH unnecessarily. Closes GH-150 and GH-178.\n * Fixed a race condition in nginx-log-forwarder. Closes GH-183 and GH-182.\n\n## 0.9.20 (release date: 2017-01-10)\n\n * Upgraded to Phusion Passenger 5.1.1.\n * Upgraded to Ruby 2.3.3.\n * Added support for Ruby 2.4.0.\n\n## 0.9.19 (release date: 2016-07-11)\n\n * Upgraded to baseimage-docker 0.9.19.\n * Upgraded to Ubuntu 16.04 with security updates as of July 11, 2016.\n * Upgraded to Phusion Passenger 5.0.29.\n * Upgraded Redis to 3.0.\n * We now use RVM to manage Ruby interpreters, instead of the Brightbox APT repository. Please see the README for rationale.\n * Removed support for Ruby 1.9.\n * Added support for Ruby 2.3.1.\n * Upgraded to Ruby 2.1.9 and 2.2.5.\n * Upgraded to JRuby 9.1.2.0. We are still on OpenJDK 8 because there is a problem with JRuby and OpenJDK 9.\n * Upgraded to Node.js 4.2.6.\n * ImageMagick is no longer included (needed by rmagick and minimagick). This shaves around 120 MB. If you need it you should install it yourself.\n * Man pages, documentation and non-English locales are now removed. This shaves around 64 MB.\n * Gzip support in Nginx is now correctly enabled by default. Closes GH-115.\n * Nginx log rotation has now been fixed. Closes GH-113.\n\n## 0.9.18 (release date: 2015-12-08)\n\n * Upgraded to Phusion Passenger 5.0.22.\n * Upgraded to baseimage-docker 0.9.17.\n * Upgraded to Ruby 2.1.7 and 2.2.3.\n * Upgraded to JRuby 9.0.4.0.\n * Upgraded to Node.js 0.12.9.\n\n## 0.9.17 (release date: 2015-08-04)\n\n * Upgraded to Phusion Passenger 5.0.15.\n * Upgraded to JRuby 9.0.0.0. Closes GH-99.\n * Fixed passenger-full containing Node.js 0.12 instead of 0.10. Closes GH-96.\n\n## 0.9.16 (release date: 2015-07-15)\n\n * The latest OpenSSL updates have been pulled in. This fixes [CVE-2015-1793](http://openssl.org/news/secadv_20150709.txt). Upgrading is strongly recommended.\n * Upgraded to baseimage-docker 0.9.17.\n * Upgraded to Phusion Passenger 5.0.14.\n * Upgraded to Ruby 2.1.6 and 2.2.2.\n * Upgraded to JRuby 1.7.21.\n * Upgraded to Node.js 0.12.7.\n * Fixed Ruby tool shebang lines in the passenger-full image variant. Closes GH-78.\n\n## 0.9.15 (release date: 2015-01-23)\n\n * Upgraded to baseimage-docker 0.9.16.\n * Upgraded to Phusion Passenger 4.0.58.\n * Support for Ruby 2.2. Closes GH-64.\n * Support for JRuby 1.7.18. Thanks to Per Lundberg. Closes GH-65.\n * It is now possible to allow users to override the value of `RAILS_ENV`, `NODE_ENV` etc at runtime. Please refer to the documentation for details (\"Application environment name (`RAILS_ENV`, `NODE_ENV`, etc)\").\n * In order to work around [an AUFS bug](https://github.com/docker/docker/issues/783), the `/build` directory has been renamed to `/pd_build`.\n * Pups has been removed.\n * Non-Ruby 1.9 images no longer contain Ruby 1.9. This is because a bug in the Phusion Passenger Debian packages has been fixed.\n * Qt has been removed from the Ruby images because it's not used by a lot of Ruby apps. This reduces the image size by ~150 MB. Closes GH-52.\n * Documentation updates, some of which are contributed by Olle Jonsson. Closes GH-33. Closes GH-62.\n\n## 0.9.14 (release date: 2014-10-03)\n\n * Upgraded to baseimage-docker 0.9.15, which fixes the setuid bit on /usr/bin/sudo. This problem was caused by Docker bug #6828.\n\n## 0.9.13 (release date: 2014-10-01)\n\n * Upgraded to baseimage-docker 0.9.14. This applies all the latest Ubuntu security updates, and patches Shellshock among other things.\n * Upgraded to Phusion Passenger 4.0.53 and Nginx 1.6.2.\n * Some documentation updates by Martijn Heemels.\n\n## 0.9.12 (release date: 2014-08-22)\n\n * Upgraded to baseimage-docker 0.9.13.\n * Upgraded to Phusion Passenger 4.0.49 and Nginx 1.6.1.\n * Fixed some bugs in ruby-switch. Thanks to John C Banks. Closes GH-47.\n * Code cleanups thanks to Aris Pikeas. Closes GH-43.\n * Fixed passenger-customizable build scripts from failing due to absence of `ruby_switch`. Closes GH-34.\n * The build scripts in passenger-customizable now automatically run `apt-get update` when necessary.\n * Development headers are now included by default in all Ruby images. Closes GH-44.\n\n## 0.9.11 (release date: 2014-06-25)\n\n * Upgraded to baseimage-docker 0.9.11.\n * Upgraded to Phusion Passenger 4.0.45.\n * The baseimage-docker insecure key was erroneously still installed by default for the 'app' user. It has now been removed.\n * The 'full' image didn't properly include Python 2.7. This has been fixed.\n * Nginx error logs are now forwarded to the Docker logs.\n\n## 0.9.10 (release date: 2014-05-13)\n\n * Upgraded to baseimage-docker 0.9.10 and Ubuntu 14.04.\n * Upgraded to Nginx 1.6.0.\n * Upgraded to Phusion Passenger 4.0.42.\n * Ruby 1.8 support has been removed because it is no longer available on Ubuntu 14.04.\n * It is now possible to put additional Nginx configuration in the directory /etc/nginx/main.d. This works like /etc/nginx/conf.d, but config files are included in the main context, not in the http context. It is ideal for adding things like `env` directives. Thanks to javereec for documentation contribution.\n * The Phusion Passenger native extension is now precompiled for for all Ruby interpreters.\n\n## 0.9.9 (release date: 2014-03-25)\n\n * Upgraded to baseimage-docker 0.9.9.\n * Upgraded to Phusion Passenger 4.0.40.\n * Upgraded to Nginx 1.4.7. This also fixes several Nginx vulnerabilities.\n * Ports 80 and 443 are now by default made available for Docker linking.\n * Redis and Memcached have been reintroduced, but only in the `passenger-customizable` and `passenger-full` images.\n * Various minor improvements. (Amir Gur)\n\n## 0.9.8 (release date: 2014-02-26)\n\n * Upgraded to baseimage-docker 0.9.8.\n\n## 0.9.7 (release date: 2014-02-25)\n\n * Upgraded to baseimage-docker 0.9.7.\n\n## 0.9.6 (release date 2013-02-06)\n\n * Upgraded to baseimage-docker 0.9.5.\n\n## 0.9.5 (release date 2013-02-03)\n\n * Upgraded to baseimage-docker 0.9.4, which fixes a syslog-ng startup problem.\n\n## 0.9.4 (release date 2013-02-01)\n\n * Upgraded to Phusion Passenger 4.0.37, which improves Node.js and Meteor support and fixes many bugs.\n * Upgraded to baseimage-docker 0.9.3.\n * Added support for Ruby 2.1. This is available in the phusion/passenger-ruby21 image.\n * Reintroduced the phusion/passenger-full image.\n\n## 0.9.3 (release date 2013-12-12)\n\n * Upgraded to Phusion Passenger 4.0.28.\n * Upgraded to baseimage-docker 0.9.2.\n * passenger-docker has been split into multiple versions, each one targeted at only a single programming language. The following images are now available on the Docker index: phusion/passenger-ruby18, phusion/passenger-ruby19, phusion/passenger-ruby20, phusion/passenger-python, phusion/passenger-nodejs. There is also a phusion/passenger-customizable image which allows you to easily have multiple languages in a single container.\n\n## 0.9.2 (release date 2013-11-13)\n\n * Fixed the pups wrapper script.\n\n## 0.9.1 (release date 2013-11-12)\n\n * Upgraded to baseimage-docker 0.9.1.\n\n## 0.9.0 (release date 2013-11-12)\n\n * Initial release.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.3017578125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at Phusion:\n\n[FloorD](https://github.com/floord) (she/her), floor@phusion.nl, English / Dutch / German\n\n[Scarhand](https://github.com/scarhand) (he/his), niels@phusion.nl, English / Dutch\n\nThe project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.6484375,
          "content": "# Contributing to passenger-docker\n\nFirst off, thank you for considering contributing to passenger-docker. It's people like you that make Open Source a great place to be. Now let's make sure your contribution gets merged!\n\n### Contributions we happily welcome\nWe look for contributions improving documentation, bug triaging, or writing tutorials, as well as bug reports and patches.\n\n### Contributions we are not looking for\nPlease, don't use the issue tracker for support questions. Instead [consider Stack Overflow](https://stackoverflow.com/search?tab=newest&q=passenger%20docker).\n\n## Ground Rules\n\n### Your first contribution\nNot sure what you can help us out with? Check our [list of issues and feature requests](https://github.com/phusion/passenger-docker/issues) first.\n\n#### Is this your first contribution to Open Source?\n\nWorking on your first Pull Request? You can learn how from this *free* series, [How to Contribute to an Open Source Project on GitHub](https://app.egghead.io/playlists/how-to-contribute-to-an-open-source-project-on-github).\n\nAt this point, you're ready to make your changes! Feel free to ask for help; everyone is a beginner at first :smile_cat:\n\nIf a maintainer asks you to \"rebase\" your PR, they're saying that a lot of code has changed, and that you need to update your branch so it's easier to merge.\n\n### How to submit a contribution\nPlease follow the steps below to make your contribution to passenger-docker.\n\n1. Fork the repository\n2. Clone or download the repository\n3. Write your code\n4. Push your code and create a Pull Request\n5. Wait patiently while we review your changes\n6. Party :tada:\n\n### Found a security flaw?\nIf you find a security vulnerability, do NOT open an issue. Please send an email to info@phusion.nl instead.\n\nIn order to determine whether you are dealing with a security issue, ask yourself these two questions:\n  * Can I access something that's not mine, or something I shouldn't have access to?\n  * Can I disable something for other people?\n\nIf the answer to either of those two questions are \"yes\", then you're probably dealing with a security issue.\n\n### How to file a bug report\nWhen filing an issue, make sure to answer these five questions:\n\n1. What does your software stack look like?\n2. What operating system and processor architecture are you using?\n3. What did you do? :scream:\n4. What did you expect to see?\n5. What did you see instead?\n\n## Code review process\npassenger-docker is semi-regularly released, often in conjunction with a [Passenger](https://github.com/phusion/passenger/) release.\n\n## Community\npassenger-docker is a Phusion Passenger project. [Theaxiom](https://github.com/Theaxiom) took over the role of core maintainer.\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.08203125,
          "content": "source 'https://rubygems.org'\n\ngem 'rake'\ngem 'rspec-core'\ngem 'rspec-expectations'\n"
        },
        {
          "name": "Gemfile.lock",
          "type": "blob",
          "size": 0.3525390625,
          "content": "GEM\n  remote: https://rubygems.org/\n  specs:\n    diff-lcs (1.4.4)\n    rake (13.0.6)\n    rspec-core (3.10.1)\n      rspec-support (~> 3.10.0)\n    rspec-expectations (3.10.1)\n      diff-lcs (>= 1.2.0, < 2.0)\n      rspec-support (~> 3.10.0)\n    rspec-support (3.10.2)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  rake\n  rspec-core\n  rspec-expectations\n\nBUNDLED WITH\n   1.17.3\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2013-2015 Phusion Holding B.V.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 6.2001953125,
          "content": "SHELL := /bin/bash\n\nifeq ($(GITHUB_ACTIONS),true)\nREGISTRY = ghcr.io\nelse\nREGISTRY = docker.io\nendif\n\nNAME ?= $(REGISTRY)/phusion/passenger\nVERSION ?= 3.1.1\n\n# NAME and/or VERSION can be overriden during build if you are building locally to push to your own repository\n# example:\n#   login to your ECR repo, then\n#   NAME=\"YOURID.dkr.ecr.us-west-2.amazonaws.com/passenger\" VERSION=2.5.1.4 BUILD_ARM64=0 make -j1 build_ruby32 push_ruby32\n#     This will build and push YOURID.dkr.ecr.us-west-2.amazonaws.com/passenger-ruby32:2.5.1.4-amd64\n#     and YOURID.dkr.ecr.us-west-2.amazonaws.com/passenger-ruby32:2.5.1.4:latest-amd64\n\n# Extra flags for docker build, usable via environment variable.\n# Example: `export EXTRA_BUILD_FLAGS=--no-cache; make build_all`\nEXTRA_BUILD_FLAGS?=\n\n# Allow conditionally building multiple architectures\n# example: BUILD_ARM64=0 make build_customizable ; only builds amd64 image\n# defaults to building all specified images for both amd64 and arm64\nifeq ($(BUILD_AMD64),0)\n_build_amd64 := 0\nelse\n_build_amd64 := 1\nendif\n\nifeq ($(BUILD_ARM64),0)\n_build_arm64 := 0\nelse\n_build_arm64 := 1\nendif\n\n# test if we're running in an interactive shell (vs gh actions)\nINTERACTIVE:=$(shell [ -t 0 ] && echo 1)\n\n.PHONY: all build_base build_all tag_latest cross_tag push release labels clean clean_images\n\nFORCE:\n\n# when adding a cRuby image, also update image/nginx-passenger.sh and image/ruby-support/finalize.sh\nSPECIAL_IMAGES := customizable full\nCRUBY_IMAGES := ruby31 ruby32 ruby33 ruby34\nPYTHON_IMAGES := python39 python310 python311 python312 python313\nMISC_IMAGES := jruby93 jruby94 nodejs\n\nALL_IMAGES := $(SPECIAL_IMAGES) $(MISC_IMAGES) $(CRUBY_IMAGES) $(PYTHON_IMAGES)\n\nall: build_all\n\n# waits are to ensure that we only compile each version of ruby once per arch even if running in parallel\nbuild_all: \\\n\tbuild_customizable \\\n\t.WAIT \\\n\t$(foreach image, $(CRUBY_IMAGES), build_${image}) \\\n\t.WAIT \\\n\t$(foreach image, $(MISC_IMAGES), build_${image}) \\\n\t.WAIT \\\n\t$(foreach image, $(PYTHON_IMAGES), build_${image}) \\\n\tbuild_full\n\nbuild_base:\n\trm -rf base_image\n\tcp -pR image base_image\nifeq ($(_build_amd64),1)\n\tdocker rmi $(NAME)-base:latest-amd64 || true\n\tdocker buildx build --progress=plain --platform linux/amd64 $(EXTRA_BUILD_FLAGS) --build-arg ARCH=amd64 -t $(NAME)-base:latest-amd64 -f image/Dockerfile.base base_image --no-cache --load\nendif\nifeq ($(_build_arm64),1)\n\tdocker rmi $(NAME)-base:latest-arm64 || true\n\tdocker buildx build --progress=plain --platform linux/arm64 $(EXTRA_BUILD_FLAGS) --build-arg ARCH=arm64 -t $(NAME)-base:latest-arm64 -f image/Dockerfile.base base_image --no-cache --load\nendif\n\trm -rf base_image\n\nexport_base:\nifeq ($(_build_amd64),1)\n\tdocker save $(NAME)-base:latest-amd64 | gzip > passenger-base-amd64.tar.gz\nendif\nifeq ($(_build_arm64),1)\n\tdocker save $(NAME)-base:latest-arm64 | gzip > passenger-base-arm64.tar.gz\nendif\n\nbuild_%:\nifeq ($(INTERACTIVE),1)\nbuild_%: build_base\nendif\n\trm -rf $*_image\n\tcp -pR image $*_image\n\t@if [ \"${*}\" != \"full\" ] && [ \"${*}\" != \"customizable\" ]; then \\\n\t    echo \"${*}=1\" >> ${*}_image/buildconfig; \\\n\tfi\n\t@if [ \"${*}\" == \"full\" ]; then \\\n\t    for i in ${CRUBY_IMAGES}; do echo \"$${i}=1\" >> ${*}_image/buildconfig; done; \\\n\t    for i in ${MISC_IMAGES}; do echo \"$${i}=1\" >> ${*}_image/buildconfig; done; \\\n\t    echo python312=1 >> ${*}_image/buildconfig; \\\n\t    echo redis=1 >> ${*}_image/buildconfig; \\\n\t    echo memcached=1 >> ${*}_image/buildconfig; \\\n\tfi\n\t@if [ \"${*}\" != \"customizable\" ]; then \\\n\t    echo final=1 >> ${*}_image/buildconfig; \\\n\tfi\nifeq ($(_build_amd64),1)\n\tdocker buildx build --progress=plain --platform linux/amd64 $(EXTRA_BUILD_FLAGS) --build-arg NAME=$(NAME) --build-arg ARCH=amd64 -t $(NAME)-$*:$(VERSION)-amd64 --rm $*_image --load\nendif\nifeq ($(_build_arm64),1)\n\tdocker buildx build --progress=plain --platform linux/arm64 $(EXTRA_BUILD_FLAGS) --build-arg NAME=$(NAME) --build-arg ARCH=arm64 -t $(NAME)-$*:$(VERSION)-arm64 --rm $*_image --load\nendif\n\nlabels: $(foreach image, $(ALL_IMAGES), label_${image})\n\nlabel_%: FORCE\nifeq ($(_build_amd64),1)\n\t@echo $(NAME)-$*:$(VERSION)-amd64 $(NAME)-$*:latest-amd64\nendif\nifeq ($(_build_arm64),1)\n\t@echo $(NAME)-$*:$(VERSION)-arm64 $(NAME)-$*:latest-arm64\nendif\n\npull: $(foreach image, $(ALL_IMAGES), pull_${image})\n\npull_%: FORCE\nifeq ($(_build_amd64),1)\n\tdocker pull $(NAME)-$*:$(VERSION)-amd64\nendif\nifeq ($(_build_arm64),1)\n\tdocker pull $(NAME)-$*:$(VERSION)-arm64\nendif\n\ncross_tag: $(foreach image, $(ALL_IMAGES), cross_tag_${image})\n\ncross_tag_%: FORCE\nifeq ($(_build_amd64),1)\n\tdocker tag ghcr.io/phusion/passenger-$*:$(VERSION)-amd64 $(NAME)-$*:$(VERSION)-amd64\nendif\nifeq ($(_build_arm64),1)\n\tdocker tag ghcr.io/phusion/passenger-$*:$(VERSION)-arm64 $(NAME)-$*:$(VERSION)-arm64\nendif\n\ntag_latest: $(foreach image, $(ALL_IMAGES), tag_latest_${image})\n\ntag_latest_%: FORCE\nifeq ($(_build_amd64),1)\n\tdocker tag $(NAME)-$*:$(VERSION)-amd64 $(NAME)-$*:latest-amd64\nendif\nifeq ($(_build_arm64),1)\n\tdocker tag $(NAME)-$*:$(VERSION)-arm64 $(NAME)-$*:latest-arm64\nendif\n\npush: $(foreach image, $(ALL_IMAGES), push_${image})\n\npush_%: FORCE\nifeq ($(_build_amd64),1)\n\tdocker push $(NAME)-$*:latest-amd64\n\tif [ base != $* ]; then docker push $(NAME)-$*:$(VERSION)-amd64; fi\nendif\nifeq ($(_build_arm64),1)\n\tdocker push $(NAME)-$*:latest-arm64\n\tif [ base != $* ]; then docker push $(NAME)-$*:$(VERSION)-arm64; fi\nendif\n\nrelease: $(foreach image, $(ALL_IMAGES), release_${image})\n\ttest -z \"$$(git status --porcelain)\" || git commit -am \"$(VERSION)\" && git tag \"rel-$(VERSION)\" && git push origin \"rel-$(VERSION)\"\n\nrelease_%: push_%\n\tdocker manifest rm $(NAME)-$*:latest || true\n\tdocker manifest create $(NAME)-$*:$(VERSION) $(NAME)-$*:$(VERSION)-amd64 $(NAME)-$*:$(VERSION)-arm64\n\tdocker manifest create $(NAME)-$*:latest     $(NAME)-$*:latest-amd64     $(NAME)-$*:latest-arm64\n\tdocker manifest push $(NAME)-$*:$(VERSION)\n\tdocker manifest push $(NAME)-$*:latest\n\nclean:\n\trm -rf *_image\n\nclean_images: $(foreach image, $(ALL_IMAGES), clean_image_${image}) FORCE\n\tdocker rmi $(NAME)-base:latest-amd64 phusion/passenger-base:latest-amd64 || true\n\tdocker rmi $(NAME)-base:latest-arm64 phusion/passenger-base:latest-arm64 || true\n\nclean_image_%: FORCE\n\tdocker rmi $(NAME)-$*:latest-amd64 $(NAME)-$*:$(VERSION)-amd64 || true\n\tdocker rmi $(NAME)-$*:latest-arm64 $(NAME)-$*:$(VERSION)-arm64 || true\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 42.4921875,
          "content": "# Docker base images for Ruby, Python, Node.js and Meteor web apps\n\n<img src=\"http://blog.phusion.nl/content/images/2018/03/passenger-docker.jpg\" width=\"500\" alt=\"Docker\">\n\nPassenger-docker is a set of [Docker](https://www.docker.com) images meant to serve as good bases for **Ruby, Python, Node.js and Meteor** web app images. In line with [Phusion Passenger](https://www.phusionpassenger.com/)'s goal, passenger-docker's goal is to make Docker image building for web apps much easier and faster.\n\nWhy is this image called \"passenger\"? It's to represent the ease: you just have to sit back and watch most of the heavy lifting being done for you. Passenger-docker is part of a larger and more ambitious project: to make web app deployment ridiculously simple, to heights never achieved before.\n\n**Relevant links:**\n [Github](https://github.com/phusion/passenger-docker) |\n [Docker registry](https://registry.hub.docker.com/r/phusion/passenger-full/) |\n [Discussion forum](https://groups.google.com/d/forum/passenger-docker) |\n [Twitter/X](https://twitter.com/phusion_nl) |\n [Blog](http://blog.phusion.nl/)\n\n---------------------------------------\n\n**Table of contents**\n\n * [Why use passenger-docker?](#why_use)\n * [About passenger-docker](#about)\n   * [What's included?](#whats_included)\n   * [Memory efficiency](#memory_efficiency)\n   * [Image variants](#image_variants)\n * [Inspecting the image](#inspecting_the_image)\n * [Using the image as base](#using)\n   * [Getting started](#getting_started)\n   * [The `app` user](#app_user)\n   * [Using Nginx and Passenger](#nginx_passenger)\n     * [Adding your web app to the image](#adding_web_app)\n     * [Configuring Nginx](#configuring_nginx)\n     * [Setting environment variables in Nginx](#nginx_env_vars)\n     * [Application environment name (`RAILS_ENV`, `NODE_ENV`, etc)](#app_env_name)\n   * [Using Redis](#redis)\n   * [Using memcached](#memcached)\n   * [Additional daemons](#additional_daemons)\n   * [Using Ruby](#using_ruby)\n     * [Selecting a default Ruby version](#selecting_default_ruby)\n     * [Running a command with a specific Ruby version](#running_command_with_specific_ruby_version)\n     * [Default wrapper scripts](default_ruby_wrapper_scripts)\n   * [Running scripts during container startup](#running_startup_scripts)\n   * [Upgrading the operating system inside the container](#upgrading_os)\n   * [Upgrading Passenger to the latest version](#upgrading_passenger)\n * [Container administration](#container_administration)\n   * [Running a one-shot command in a new container](#oneshot)\n   * [Running a command in an existing, running container](#run_inside_existing_container)\n   * [Login to the container via `docker exec`](#login_docker_exec)\n     * [Usage](#docker_exec)\n   * [Login to the container via SSH](#login_ssh)\n     * [Enabling SSH](#enabling_ssh)\n     * [About SSH keys](#ssh_keys)\n     * [Using the insecure key for one container only](#using_the_insecure_key_for_one_container_only)\n     * [Enabling the insecure key permanently](#enabling_the_insecure_key_permanently)\n     * [Using your own key](#using_your_own_key)\n     * [The `docker-ssh` tool](#docker_ssh)\n   * [Inspecting the status of your web app](#inspecting_web_app_status)\n   * [Logs](#logs)\n * [Switching to Phusion Passenger Enterprise](#enterprise)\n * [Building the image yourself](#building)\n * [FAQ](#faq)\n   * [Why are you using RVM? Why not rbenv or chruby?](#why_rvm)\n * [Contributing](#contributing)\n * [Conclusion](#conclusion)\n\n---------------------------------------\n\n<a name=\"why_use\"></a>\n## Why use passenger-docker?\n\nWhy use passenger-docker instead of doing everything yourself in Dockerfile?\n\n * Your Dockerfile can be smaller.\n * It reduces the time needed to write a correct Dockerfile. You won't have to worry about the base system and the stack, you can focus on just your app.\n * It sets up the base system **correctly**. It's very easy to get the base system wrong, but this image does everything correctly. [Learn more.](https://github.com/phusion/baseimage-docker#contents)\n * It drastically reduces the time needed to run `docker build`, allowing you to iterate your Dockerfile more quickly.\n * It reduces download time during redeploys. Docker only needs to download the base image once: during the first deploy. On every subsequent deploys, only the changes you make on top of the base image are downloaded.\n\n<a name=\"about\"></a>\n## About the image\n\n<a name=\"whats_included\"></a>\n### What's included?\n\n*Passenger-docker is built on top of a solid base: [baseimage-docker](http://phusion.github.io/baseimage-docker/).*\n\nBasics (learn more at [baseimage-docker](http://phusion.github.io/baseimage-docker/)):\n\n * Ubuntu 24.04 LTS as base system.\n * A **correct** init process ([learn more](http://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/)).\n * Fixes APT incompatibilities with Docker.\n * syslog-ng.\n * The cron daemon.\n * [Runit](http://smarden.org/runit/) for service supervision and management.\n\nLanguage support:\n\n * Ruby 3.1.6, 3.2.6, 3.3.6, 3.4.1 and JRuby 9.3.15.0 and 9.4.9.0.\n   * RVM is used to manage Ruby versions. [Why RVM?](#why_rvm)\n   * 3.4.1 is configured as the default.\n   * JRuby is installed from source, but we register an APT entry for it.\n   * JRuby uses OpenJDK 17.\n * Python 3.12, or any version provided by the Deadsnakes PPA (currently 3.8, 3.9, 3.10, and 3.11; see https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa).\n * Node.js 20 by default, or any version provided by Nodesource (currently 18, 20, 21, 22; see https://github.com/nodesource/distributions).\n * A build system, git, and development headers for many popular libraries, so that the most popular Ruby, Python and Node.js native extensions can be compiled without problems.\n\nWeb server and application server:\n\n * Nginx 1.24. Disabled by default.\n * [Phusion Passenger 6](https://www.phusionpassenger.com/). Disabled by default (because it starts along with Nginx).\n   * This is a fast and lightweight tool for simplifying web application integration into Nginx.\n   * It adds many production-grade features, such as process monitoring, administration and status inspection.\n   * It replaces (G)Unicorn, Thin, Puma, uWSGI.\n   * Node.js users: [watch this 4 minute intro video](http://vimeo.com/phusionnl/review/84945384/73fe7432ee) to learn why it's cool and useful.\n\nAuxiliary services and tools:\n\n * Redis 7.0. Not installed by default.\n * Memcached. Not installed by default.\n\n<a name=\"memory_efficiency\"></a>\n### Memory efficiency\n\nPassenger-docker is very lightweight on memory. In its default configuration, it only uses 10 MB of memory (the memory consumed by bash, runit, syslog-ng, etc).\n\n<a name=\"image_variants\"></a>\n### Image variants\n\nPassenger-docker consists of several images, each one tailor made for a specific user group.\n\n**Ruby images**\n\n * `phusion/passenger-ruby31` - Ruby 3.1.\n * `phusion/passenger-ruby32` - Ruby 3.2.\n * `phusion/passenger-ruby33` - Ruby 3.3.\n * `phusion/passenger-ruby34` - Ruby 3.4.\n * `phusion/passenger-jruby93` - JRuby 9.3.\n * `phusion/passenger-jruby94` - JRuby 9.4.\n\nPython images\n\n * `phusion/passenger-python39` - Python 3.9\n * `phusion/passenger-python310` - Python 3.10\n * `phusion/passenger-python311` - Python 3.11\n * `phusion/passenger-python312` - Python 3.12\n * `phusion/passenger-python313` - Python 3.13\n\n**Node.js and Meteor images**\n\n * `phusion/passenger-nodejs` - Node.js 20.\n\n**Other images**\n\n * `phusion/passenger-full` - Contains everything in the above images. Ruby, Python, Node.js, all in a single image for your convenience.\n * `phusion/passenger-customizable` - Contains only the base system, as described in [\"What's included?\"](#whats_included). Specific Ruby, Python, and Node.js versions are not preinstalled beyond what is needed for the image to run, or which are inherited from the baseimage. This image is meant to be further customized through your Dockerfile. For example, using this image you can create a custom image that contains Ruby 3.2 and Node.js.\n\nIn the rest of this document we're going to assume that the reader will be using `phusion/passenger-full`, unless otherwise stated. Simply substitute the name if you wish to use another image.\n\n<a name=\"inspecting_the_image\"></a>\n## Inspecting the image\n\nTo look around in the image, run:\n\n    docker run --rm -t -i phusion/passenger-full bash -l\n\nYou don't have to download anything manually. The above command will automatically pull the passenger-docker image from the Docker registry.\n\n<a name=\"using\"></a>\n## Using the image as base\n\n<a name=\"getting_started\"></a>\n### Getting started\n\nThere are several images, e.g. `phusion/passenger-ruby32` and `phusion/passenger-nodejs`. Choose the one you want. See [Image variants](#image_variants).\n\nSo put the following in your Dockerfile:\n\n```dockerfile\n# Use phusion/passenger-full as base image. To make your builds reproducible, make\n# sure you lock down to a specific version, not to `latest`!\n# See https://github.com/phusion/passenger-docker/blob/master/CHANGELOG.md for\n# a list of version numbers.\nFROM phusion/passenger-full:<VERSION>\n# Or, instead of the 'full' variant, use one of these:\n#FROM phusion/passenger-ruby31:<VERSION>\n#FROM phusion/passenger-ruby32:<VERSION>\n#FROM phusion/passenger-ruby33:<VERSION>\n#FROM phusion/passenger-ruby34:<VERSION>\n#FROM phusion/passenger-python39:<VERSION>\n#FROM phusion/passenger-python310:<VERSION>\n#FROM phusion/passenger-python311:<VERSION>\n#FROM phusion/passenger-python312:<VERSION>\n#FROM phusion/passenger-python313:<VERSION>\n#FROM phusion/passenger-jruby93:<VERSION>\n#FROM phusion/passenger-jruby94:<VERSION>\n#FROM phusion/passenger-nodejs:<VERSION>\n#FROM phusion/passenger-customizable:<VERSION>\n\n# Set correct environment variables.\nENV HOME /root\n\n# Use baseimage-docker's init process.\nCMD [\"/sbin/my_init\"]\n\n# If you're using the 'customizable' variant, you need to explicitly opt-in\n# for features.\n#\n# N.B. these images are based on https://github.com/phusion/baseimage-docker,\n# so anything it provides is also automatically on board in the images below\n# (e.g. older versions of Ruby, Node, Python).\n#\n# Uncomment the features you want:\n#\n#   Node.js and Meteor standalone support (not needed if you will also be installing Ruby, unless you need a version other than the default)\n#RUN /pd_build/nodejs.sh 20\n#\n#   Ruby support\n#RUN /pd_build/ruby-3.1.*.sh\n#RUN /pd_build/ruby-3.2.*.sh\n#RUN /pd_build/ruby-3.3.*.sh\n#RUN /pd_build/ruby-3.4.*.sh\n#RUN /pd_build/jruby-9.3.*.sh\n#RUN /pd_build/jruby-9.4.*.sh\n#\n#   Python support\n#RUN /pd_build/python.sh 3.12\n\n# ...put your own build instructions here...\n\n# Clean up APT when done.\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n```\n\n<a name=\"app_user\"></a>\n### The `app` user\n\nThe image has an `app` user with UID 9999 and home directory `/home/app`. Your application is supposed to run as this user. Even though Docker itself provides some isolation from the host OS, running applications without root privileges is good security practice.\n\nYour application should be placed inside /home/app.\n\nNote: when copying your application, make sure to set the ownership of the application directory to `app` by calling `COPY --chown=app:app /local/path/of/your/app /home/app/webapp`\n\n<a name=\"nginx_passenger\"></a>\n### Using Nginx and Passenger\n\nBefore using Passenger, you should familiarise yourself with it by [reading its documentation](https://www.phusionpassenger.com).\n\nNginx and Passenger are disabled by default. Enable them like so:\n\n```dockerfile\nRUN rm -f /etc/service/nginx/down\n```\n\n<a name=\"adding_web_app\"></a>\n#### Adding your web app to the image\n\nPassenger works like a `mod_ruby`, `mod_nodejs`, etc. It changes Nginx into an application server and runs your app from Nginx. So to get your web app up and running, you just have to add a virtual host entry to Nginx which describes where your app is, and Passenger will take care of the rest.\n\nYou can add a virtual host entry (`server` block) by placing a .conf file in the directory `/etc/nginx/sites-enabled`. For example:\n\n# /etc/nginx/sites-enabled/webapp.conf:\n```nginx\nserver {\n    listen 80;\n    server_name www.webapp.com;\n    root /home/app/webapp/public;\n\n    # The following deploys your Ruby/Python/Node.js/Meteor app on Passenger.\n\n    # Not familiar with Passenger, and used (G)Unicorn/Thin/Puma/pure Node before?\n    # Yes, this is all you need to deploy on Passenger! All the reverse proxying,\n    # socket setup, process management, etc are all taken care automatically for\n    # you! Learn more at https://www.phusionpassenger.com/.\n    passenger_enabled on;\n    passenger_user app;\n\n    # If this is a Ruby app, specify a Ruby version:\n    # For Ruby 3.4\n    passenger_ruby /usr/bin/ruby3.4;\n    # For Ruby 3.3\n    passenger_ruby /usr/bin/ruby3.3;\n    # For Ruby 3.2\n    passenger_ruby /usr/bin/ruby3.2;\n    # For Ruby 3.1\n    passenger_ruby /usr/bin/ruby3.1;\n\n    # For Python ie. Django\n    passenger_app_type wsgi;\n    passenger_startup_file passenger_wsgi.py; # (contents example: https://gist.github.com/ajhodgson/96c51dba349697e5c7e46027cc530434)\n\n    # For Node.js\n    passenger_app_type node;\n    passenger_startup_file app.js;\n\n    # Nginx has a default limit of 1 MB for request bodies, which also applies\n    # to file uploads. The following line enables uploads of up to 50 MB:\n    client_max_body_size 50M;\n}\n```\n\n# Dockerfile:\n```dockerfile\nRUN rm /etc/nginx/sites-enabled/default\nADD webapp.conf /etc/nginx/sites-enabled/webapp.conf\nRUN mkdir /home/app/webapp\nRUN ...commands to place your web app in /home/app/webapp...\n# This copies your web app with the correct ownership.\n# COPY --chown=app:app /local/path/of/your/app /home/app/webapp\n```\n\n<a name=\"configuring_nginx\"></a>\n#### Configuring Nginx\n\nThe best way to configure Nginx is by adding .conf files to `/etc/nginx/main.d` and `/etc/nginx/conf.d`. Files in `main.d` are included into the Nginx configuration's main context, while files in `conf.d` are included in the Nginx configuration's http context.\n\nFor example:\n\n    # /etc/nginx/main.d/secret_key.conf:\n    env SECRET_KEY=123456;\n\n    # /etc/nginx/conf.d/gzip_max.conf:\n    gzip_comp_level 9;\n\n    # Dockerfile:\n    ADD secret_key.conf /etc/nginx/main.d/secret_key.conf\n    ADD gzip_max.conf /etc/nginx/conf.d/gzip_max.conf\n\n<a name=\"nginx_env_vars\"></a>\n#### Setting environment variables in Nginx\n\nBy default Nginx [clears all environment variables](http://nginx.org/en/docs/ngx_core_module.html#env) (except `TZ`) for its child processes (Passenger being one of them). That's why any environment variables you set with `docker run -e`, Docker linking and `/etc/container_environment`, won't reach Nginx.\n\nTo preserve these variables, place an Nginx config file ending with `*.conf` in the directory `/etc/nginx/main.d`, in which you tell Nginx to preserve these variables. For example when linking a PostgreSQL container or MongoDB container:\n\n    # /etc/nginx/main.d/postgres-env.conf:\n    env POSTGRES_PORT_5432_TCP_ADDR;\n    env POSTGRES_PORT_5432_TCP_PORT;\n\n    # Dockerfile:\n    ADD postgres-env.conf /etc/nginx/main.d/postgres-env.conf\n\nBy default, passenger-docker already contains a config file `/etc/nginx/main.d/default.conf` which preserves the `PATH` environment variable.\n\n<a name=\"app_env_name\"></a>\n#### Application environment name (`RAILS_ENV`, `NODE_ENV`, etc)\n\nSome web frameworks adjust their behavior according to the value some environment variables. For example, Rails respects `RAILS_ENV` while Connect.js respects `NODE_ENV`. By default, Phusion Passenger sets all of the following environment variables to the value **production**:\n\n * `RAILS_ENV`\n * `RACK_ENV`\n * `WSGI_ENV`\n * `NODE_ENV`\n * `PASSENGER_APP_ENV`\n\nSetting these environment variables yourself (e.g. using `docker run -e RAILS_ENV=...`) will not have any effect, because Phusion Passenger overrides all of these environment variables. The only exception is `PASSENGER_APP_ENV` (see below).\n\nWith passenger-docker, there are two ways to set the aforementioned environment variables. The first is through the [`passenger_app_env`](https://www.phusionpassenger.com/library/config/nginx/reference/#passenger_app_env) config option in Nginx. For example:\n\n```nginx\n# /etc/nginx/sites-enabled/webapp.conf:\nserver {\n    ...\n    # Ensures that RAILS_ENV, NODE_ENV, etc are set to \"staging\"\n    # when your application is started.\n    passenger_app_env staging;\n}\n```\n\nThe second way is by setting the `PASSENGER_APP_ENV` environment variable from `docker run`\n\n    docker run -e PASSENGER_APP_ENV=staging YOUR_IMAGE\n\nThis works because passenger-docker autogenerates an Nginx configuration file (`/etc/nginx/conf.d/00_app_env.conf`) during container boot. This file sets the `passenger_app_env` option in the `http` context. This means that if you already set `passenger_app_env` in the `server` context, running `docker run -e PASSENGER_APP_ENV=...` won't have any effect!\n\nIf you want to set a default value while still allowing that to be overridden by `docker run -e PASSENGER_APP_ENV=`, then instead of specifying `passenger_app_env` in your Nginx config file, you should create a `/etc/nginx/conf.d/00_app_env.conf`. This file will be overwritten if the user runs `docker run -e PASSENGER_APP_ENV=...`.\n\n```nginx\n# /etc/nginx/conf.d/00_app_env.conf\n# File will be overwritten if user runs the container with `-e PASSENGER_APP_ENV=...`!\npassenger_app_env staging;\n```\n\n<a name=\"redis\"></a>\n### Using Redis\n\n**Redis is only available in the passenger-customizable and passenger-full images!**\n\nInstall and enable Redis:\n\n```dockerfile\n# Opt-in for Redis if you're using the 'customizable' image.\n#RUN /pd_build/redis.sh\n\n# Enable the Redis service.\nRUN rm -f /etc/service/redis/down\n```\n\nThe configuration file is in /etc/redis/redis.conf. Modify it as you see fit, but make sure `daemonize no` is set.\n\n<a name=\"memcached\"></a>\n### Using memcached\n\n**Memcached is only available in the passenger-customizable and passenger-full images!**\n\nInstall and enable memcached:\n\n```dockerfile\n# Opt-in for Memcached if you're using the 'customizable' image.\n#RUN /pd_build/memcached.sh\n\n# Enable the memcached service.\nRUN rm -f /etc/service/memcached/down\n```\n\nThe configuration file is in /etc/memcached.conf. Note that it does not follow the Debian/Ubuntu format, but our own, in order to make it work well with runit. The default contents are:\n\n\n    # These arguments are passed to the memcached daemon.\n    MEMCACHED_OPTS=\"-l 127.0.0.1\"\n\n\n<a name=\"additional_daemons\"></a>\n### Additional daemons\n\nYou can add additional daemons to the image by creating runit entries. You only have to write a small shell script which runs your daemon, and runit will keep it up and running for you, restarting it when it crashes, etc.\n\nThe shell script must be called `run`, must be executable, and is to be placed in the directory `/etc/service/<NAME>`.\n\nHere's an example showing you how to a memached server runit entry can be made.\n\n    ### In memcached.sh (make sure this file is chmod +x):\n    #!/bin/sh\n    # `setuser` is part of baseimage-docker. `setuser mecached xxx...` runs the given command\n    # (`xxx...`) as the user `memcache`. If you omit this, the command will be run as root.\n    exec /sbin/setuser memcache /usr/bin/memcached >>/var/log/memcached.log 2>&1\n\n    ### In Dockerfile:\n    RUN mkdir /etc/service/memcached\n    ADD memcached.sh /etc/service/memcached/run\n\nNote that the shell script must run the daemon **without letting it daemonize/fork it**. Usually, daemons provide a command line flag or a config file option for that.\n\n**Tip**: If you're thinking about running your web app, consider deploying it on Passenger instead of on runit. Passenger relieves you from even having to write a shell script, and adds all sorts of useful production features like process scaling, introspection, etc. These are not available when you're only using runit.\n\n<a name=\"using_ruby\"></a>\n### Using Ruby\n\nWe use [RVM](https://rvm.io/) to install and to manage Ruby interpreters. Because of this there are some special considerations you need to know, particularly when you are using the `passenger-full` image which contains multiple Ruby versions installed in parallel. You can learn more about RVM at the RVM website, but this section will teach you its basic usage.\n\n<a name=\"selecting_default_ruby\"></a>\n#### Selecting a default Ruby version\n\nThe default Ruby (what the `/usr/bin/ruby` command executes) is the latest Ruby version that you've chosen to install. You can use RVM select a different version as default.\n\n```dockerfile\n# Ruby 3.1.6\nRUN bash -lc 'rvm --default use ruby-3.1.6'\n# Ruby 3.2.6\nRUN bash -lc 'rvm --default use ruby-3.2.6'\n# Ruby 3.3.6\nRUN bash -lc 'rvm --default use ruby-3.3.6'\n# Ruby 3.4.1\nRUN bash -lc 'rvm --default use ruby-3.4.1'\n# JRuby 9.3.15.0\nRUN bash -lc 'rvm --default use jruby-9.3.15.0'\n# JRuby 9.4.9.0\nRUN bash -lc 'rvm --default use jruby-9.4.9.0'\n```\n\nLearn more: [RVM: Setting the default Ruby](https://rvm.io/rubies/default).\n\n<a name=\"running_command_with_specific_ruby_version\"></a>\n#### Running a command with a specific Ruby version\n\nYou can run any command with a specific Ruby version by prefixing it with `rvm-exec <IDENTIFIER>`. For example:\n\n```bash\n$ rvm-exec 3.3.6 ruby -v\nUsing /usr/local/rvm/gems/ruby-3.3.6\nruby 3.3.6 (2024-11-05 revision 75015d4c1f) [x86_64-linux]\n\n$ rvm-exec 3.4.1 ruby -v\nUsing /usr/local/rvm/gems/ruby-3.4.1\nruby 3.4.1 (2024-12-25 revision 48d4efcb85) +PRISM [x86_64-linux]\n```\n\nMore examples, but with Bundler instead:\n\n```bash\n# This runs 'bundle install' using Ruby 3.4.1\nrvm-exec 3.4.1 bundle install\n```\n\n<a name=\"default_ruby_wrapper_scripts\"></a>\n#### Default wrapper scripts\n\nRubies are installed by RVM to /usr/local/rvm. Interactive and login Bash shells load the RVM environment, which ensures that the appropriate directories under /usr/local/rvm are in PATH.\n\nBut this means that if you invoke a command without going through an interactive and login Bash shell (e.g. directly using `docker exec`) then the RVM environment won't be loaded. In order to make Ruby work even in this case, Passenger-docker includes a bunch of wrapper scripts:\n\n * /usr/bin/ruby\n * /usr/bin/rake\n * /usr/bin/gem\n * /usr/bin/bundle\n\nThese wrapper scripts execute the respective command through `rvm-exec` using the default Ruby interpreter.\n\n<a name=\"running_startup_scripts\"></a>\n### Running scripts during container startup\n\npassenger-docker uses the [baseimage-docker](http://phusion.github.io/baseimage-docker/) init system, `/sbin/my_init`. This init system runs the following scripts during startup, in the following order:\n\n * All executable scripts in `/etc/my_init.d`, if this directory exists. The scripts are run during in lexicographic order.\n * The script `/etc/rc.local`, if this file exists.\n\nAll scripts must exit correctly, e.g. with exit code 0. If any script exits with a non-zero exit code, the booting will fail.\n\nThe following example shows how you can add a startup script. This script simply logs the time of boot to the file /tmp/boottime.txt.\n\n    ### In logtime.sh (make sure this file is chmod +x):\n    #!/bin/sh\n    date > /tmp/boottime.txt\n\n    ### In Dockerfile:\n    RUN mkdir -p /etc/my_init.d\n    ADD logtime.sh /etc/my_init.d/logtime.sh\n\n<a name=\"upgrading_os\"></a>\n### Upgrading the operating system inside the container\n\npassenger-docker images contain an Ubuntu 24.04 operating system. You may want to update this OS from time to time, for example to pull in the latest security updates. OpenSSL is a notorious example. Vulnerabilities are discovered in OpenSSL on a regular basis, so you should keep OpenSSL up-to-date as much as you can.\n\nWhile we release passenger-docker images with the latest OS updates from time to time, you do not have to rely on us. You can update the OS inside passenger-docker images yourself, and it is recommend that you do this instead of waiting for us. This is also especially important to upgrade any installed Python or Node packages to the latest minor version.\n\nTo upgrade the OS in the image, run this in your Dockerfile:\n\n    RUN apt-get update && apt-get -y -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\" upgrade\n\n<a name=\"upgrading_passenger\"></a>\n### Upgrading Passenger to the latest version\n\n#### Upgrading to the latest image\n\nPassenger-docker images contain a specific Passenger version by default. We regularly update passenger-docker with the latest version of Passenger, Ruby, Node.js, etc.\n\nTo upgrade your image to the latest passenger-docker version, please edit your Dockerfile and change the passenger-docker version in the `FROM` command to the latest version. You can find a list of available versions in the [Changelog](https://github.com/phusion/passenger-docker/blob/master/CHANGELOG.md).\n\nFor example, if you were using passenger-docker 0.9.16 and want to upgrade to 0.9.17, then change...\n\n```dockerfile\nFROM phusion/passenger-docker-XXXX:0.9.16\n```\n\n...to:\n\n```dockerfile\nFROM phusion/passenger-docker-XXXX:0.9.17\n```\n\nThen rebuild your image.\n\n#### Upgrading Passenger without waiting for image updates\n\nWe do not update the passenger-docker image on *every* Passenger release. Having said that, you can upgrade Passenger at any time, without waiting for us to release a new image.\n\nPassenger is installed through [the Passenger APT repository](https://www.phusionpassenger.com/library/install/nginx/apt_repo/), so you can use APT to upgrade Passenger.\n\nTo upgrade to the latest Passenger version, run this to your Dockerfile:\n\n```dockerfile\nRUN apt-get update && apt-get -y -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\" upgrade\n```\n\n<a name=\"container_administration\"></a>\n## Container administration\n\nOne of the ideas behind Docker is that containers should be stateless, easily restartable, and behave like a black box. However, you may occasionally encounter situations where you want to login to a container, or to run a command inside a container, for development, inspection and debugging purposes. This section describes how you can administer the container for those purposes.\n\n_**Tip**: passenger-docker is based on [baseimage-docker](https://github.com/phusion/baseimage-docker). Please consult [the baseimage-docker documentation](https://github.com/phusion/baseimage-docker) for more container administration documentation and tips._\n\n<a name=\"oneshot\"></a>\n### Running a one-shot command in a new container\n\n_**Note:** This section describes how to run a command insider a -new- container. To run a command inside an existing running container, see [Running a command in an existing, running container](#run_inside_existing_container)._\n\nNormally, when you want to create a new container in order to run a single command inside it, and immediately exit after the command exits, you invoke Docker like this:\n\n    docker run YOUR_IMAGE COMMAND ARGUMENTS...\n\nHowever the downside of this approach is that the init system is not started. That is, while invoking `COMMAND`, important daemons such as cron and syslog are not running. Also, orphaned child processes are not properly reaped, because `COMMAND` is PID 1.\n\nPassenger-docker provides a facility to run a single one-shot command, while solving all of the aforementioned problems. Run a single command in the following manner:\n\n    docker run YOUR_IMAGE /sbin/my_init -- COMMAND ARGUMENTS ...\n\nThis will perform the following:\n\n * Runs all system startup files, such as /etc/my_init.d/* and /etc/rc.local.\n * Starts all runit services.\n * Runs the specified command.\n * When the specified command exits, stops all runit services.\n\nFor example:\n\n    $ docker run phusion/passenger-full:<VERSION> /sbin/my_init -- ls\n    *** Running /etc/rc.local...\n    *** Booting runit daemon...\n    *** Runit started as PID 80\n    *** Running ls...\n    bin  boot  dev  etc  home  image  lib  lib64  media  mnt  opt  proc  root  run  sbin  selinux  srv  sys  tmp  usr  var\n    *** ls exited with exit code 0.\n    *** Shutting down runit daemon (PID 80)...\n    *** Killing all processes...\n\nYou may find that the default invocation is too noisy. Or perhaps you don't want to run the startup files. You can customize all this by passing arguments to `my_init`. Invoke `docker run YOUR_IMAGE /sbin/my_init --help` for more information.\n\nThe following example runs `ls` without running the startup files and with less messages, while running all runit services:\n\n    $ docker run phusion/passenger-full:<VERSION> /sbin/my_init --skip-startup-files --quiet -- ls\n    bin  boot  dev  etc  home  image  lib  lib64  media  mnt  opt  proc  root  run  sbin  selinux  srv  sys  tmp  usr  var\n\n<a name=\"run_inside_existing_container\"></a>\n### Running a command in an existing, running container\n\nThere are two ways to run a command inside an existing, running container.\n\n * Through the `docker exec` tool. This is builtin Docker tool, available since Docker 1.4. Internally, it uses Linux kernel system calls in order to execute a command within the context of a container. Learn more in [Login to the container, or running a command inside it, via `docker exec`](#login_docker_exec).\n * Through SSH. This approach requires running an SSH daemon inside the container, and requires you to setup SSH keys. Learn more in [Login to the container, or running a command inside it, via SSH](#login_ssh).\n\nBoth way have their own pros and cons, which you can learn in their respective subsections.\n\n<a name=\"login_docker_exec\"></a>\n### Login to the container, or running a command inside it, via `docker exec`\n\nYou can use the `docker exec` tool on the Docker host OS to login to any container that is based on passenger-docker. You can also use it to run a command inside a running container. `docker exec` works by using Linux kernel system calls.\n\nHere's how it compares to [using SSH to login to the container or to run a command inside it](#login_ssh):\n\n * Pros\n   * Does not require running an SSH daemon inside the container.\n   * Does not require setting up SSH keys.\n   * Works on any container, even containers not based on passenger-docker.\n * Cons\n   * If the `docker exec` process on the host is terminated by a signal (e.g. with the `kill` command or even with Ctrl-C), then the command that is executed by `docker exec` is *not* killed and cleaned up. You will either have to do that manually, or you have to run `docker exec` with `-t -i`.\n   * Requires privileges on the Docker host to be able to access the Docker daemon. Note that anybody who can access the Docker daemon effectively has root access.\n   * Not possible to allow users to login to the container without also letting them login to the Docker host.\n\n<a name=\"docker_exec_usage\"></a>\n#### Usage\n\nStart a container:\n\n    docker run YOUR_IMAGE\n\nFind out the ID of the container that you just ran:\n\n    docker ps\n\nNow that you have the ID, you can use `docker exec` to run arbitrary commands in the container. For example, to run `echo hello world`:\n\n    docker exec YOUR-CONTAINER-ID echo hello world\n\nTo open a bash session inside the container, you must pass `-t -i` so that a terminal is available:\n\n    docker exec -t -i YOUR-CONTAINER-ID bash -l\n\n<a name=\"login_ssh\"></a>\n### Login to the container, or running a command inside it, via SSH\n\nYou can use SSH to login to any container that is based on passenger-docker. You can also use it to run a command inside a running container.\n\nHere's how it compares to [using `docker exec` to login to the container or to run a command inside it](#login_docker_exec):\n\n * Pros\n   * Does not require root privileges on the Docker host.\n   * Allows you to let users login to the container, without letting them login to the Docker host. However, this is not enabled by default because passenger-docker does not expose the SSH server to the public Internet by default.\n * Cons\n   * Requires setting up SSH keys. However, passenger-docker makes this easy for many cases through a pregenerated, insecure key. Read on to learn more.\n\n<a name=\"enabling_ssh\"></a>\n#### Enabling SSH\n\nPassenger-docker disables the SSH server by default. Add the following to your Dockerfile to enable it:\n\n```dockerfile\nRUN rm -f /etc/service/sshd/down\n\n# Regenerate SSH host keys. Passenger-docker does not contain any, so you\n# have to do that yourself. You may also comment out this instruction; the\n# init system will auto-generate one during boot.\nRUN /etc/my_init.d/00_regen_ssh_host_keys.sh\n```\n\n<a name=\"ssh_keys\"></a>\n#### About SSH keys\n\nFirst, you must ensure that you have the right SSH keys installed inside the container. By default, no keys are installed, so nobody can login. For convenience reasons, we provide [a pregenerated, insecure key](https://raw.githubusercontent.com/phusion/baseimage-docker/master/image/services/sshd/keys/insecure_key) [(PuTTY format)](https://raw.githubusercontent.com/phusion/baseimage-docker/master/image/services/sshd/keys/insecure_key.ppk) that you can easily enable. However, please be aware that using this key is for convenience only. It does not provide any security because this key (both the public and the private side) is publicly available. **In production environments, you should use your own keys**.\n\n<a name=\"using_the_insecure_key_for_one_container_only\"></a>\n#### Using the insecure key for one container only\n\nYou can temporarily enable the insecure key for one container only. This means that the insecure key is installed at container boot. If you `docker stop` and `docker start` the container, the insecure key will still be there, but if you use `docker run` to start a new container then that container will not contain the insecure key.\n\nStart a container with `--enable-insecure-key`:\n\n    docker run YOUR_IMAGE /sbin/my_init --enable-insecure-key\n\nFind out the ID of the container that you just ran:\n\n    docker ps\n\nOnce you have the ID, look for its IP address with:\n\n    docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" <ID>\n\nNow that you have the IP address, you can use SSH to login to the container, or to execute a command inside it:\n\n```bash\n# Download the insecure private key\ncurl -o insecure_key -fSL https://raw.githubusercontent.com/phusion/baseimage-docker/master/image/services/sshd/keys/insecure_key\nchmod 600 insecure_key\n\n# Login to the container\nssh -i insecure_key root@<IP address>\n\n# Running a command inside the container\nssh -i insecure_key root@<IP address> echo hello world\n```\n\n<a name=\"enabling_the_insecure_key_permanently\"></a>\n#### Enabling the insecure key permanently\n\nIt is also possible to enable the insecure key in the image permanently. This is not generally recommended, but is suitable for e.g. temporary development or demo environments where security does not matter.\n\nEdit your Dockerfile to install the insecure key permanently:\n\n```dockerfile\nRUN /usr/sbin/enable_insecure_key\n```\n\nInstructions for logging in the container is the same as in section [Using the insecure key for one container only](#using_the_insecure_key_for_one_container_only).\n\n<a name=\"using_your_own_key\"></a>\n#### Using your own key\n\nEdit your Dockerfile to install an SSH public key:\n\n```dockerfile\n## Install an SSH of your choice.\nADD your_key.pub /tmp/your_key.pub\nRUN cat /tmp/your_key.pub >> /root/.ssh/authorized_keys && rm -f /tmp/your_key.pub\n```\n\nThen rebuild your image. Once you have that, start a container based on that image:\n\n    docker run your-image-name\n\nFind out the ID of the container that you just ran:\n\n    docker ps\n\nOnce you have the ID, look for its IP address with:\n\n    docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" <ID>\n\nNow that you have the IP address, you can use SSH to login to the container, or to execute a command inside it:\n\n```bash\n# Login to the container\nssh -i /path-to/your_key root@<IP address>\n\n# Running a command inside the container\nssh -i /path-to/your_key root@<IP address> echo hello world\n```\n\n<a name=\"docker_ssh\"></a>\n#### The `docker-ssh` tool\n\nLooking up the IP of a container and running an SSH command quickly becomes tedious. Luckily, we provide the `docker-ssh` tool which automates this process. This tool is to be run on the *Docker host*, not inside a Docker container.\n\nFirst, install the tool on the Docker host:\n\n```bash\ncurl --fail -L -O https://github.com/phusion/baseimage-docker/archive/master.tar.gz && \\\ntar xzf master.tar.gz && \\\nsudo ./baseimage-docker-master/install-tools.sh\n```\n\nThen run the tool as follows to login to a container using SSH:\n\n    docker-ssh YOUR-CONTAINER-ID\n\nYou can lookup `YOUR-CONTAINER-ID` by running `docker ps`.\n\nBy default, `docker-ssh` will open a Bash session. You can also tell it to run a command, and then exit:\n\n    docker-ssh YOUR-CONTAINER-ID echo hello world\n\n<a name=\"inspecting_web_app_status\"></a>\n### Inspecting the status of your web app\n\nIf you use Passenger to deploy your web app, run:\n\n    passenger-status\n    passenger-memory-stats\n\n<a name=\"logs\"></a>\n### Logs\n\nIf anything goes wrong, consult the log files in /var/log. The following log files are especially important:\n\n * /var/log/nginx/error.log\n * /var/log/syslog\n * Your app's log file in /home/app.\n\n<a name=\"enterprise\"></a>\n### Switching to Phusion Passenger Enterprise\n\nIf you are a [Phusion Passenger Enterprise](https://www.phusionpassenger.com/enterprise) customer, then you can switch to the Enterprise variant as follows.\n\n 1. Login to the [Customer Area](https://www.phusionpassenger.com/orders).\n 2. Download the license key and store it in the same directory as your Dockerfile.\n 3. Insert into your Dockerfile:\n\n```dockerfile\nADD passenger-enterprise-license /etc/passenger-enterprise-license\nRUN echo deb https://download:$DOWNLOAD_TOKEN@www.phusionpassenger.com/enterprise_apt $(lsb_release -cs) main > /etc/apt/sources.list.d/passenger.list\nRUN apt-get update && apt-get install -y -o Dpkg::Options::=\"--force-confold\" libnginx-mod-http-passenger-enterprise\n```\n\n    Replace `$DOWNLOAD_TOKEN` with your actual download token, as found in the Customer Area.\n\n<a name=\"building\"></a>\n## Building the image yourself\n\nIf for whatever reason you want to build the image yourself instead of downloading it from the Docker registry, follow these instructions.\n\nClone this repository:\n\n    git clone https://github.com/phusion/passenger-docker.git\n    cd passenger-docker\n\nStart a virtual machine with Docker in it. You can use the Vagrantfile that we've already provided.\n\n    vagrant up\n    vagrant ssh\n    cd /vagrant\n\nBuild one of the images:\n\n    make build_ruby31\n    make build_ruby32\n    make build_ruby33\n    make build_ruby34\n    make build_python39\n    make build_python310\n    make build_python311\n    make build_python312\n    make build_python313\n    make build_jruby93\n    make build_jruby94\n    make build_nodejs\n    make build_customizable\n    make build_full\n\nIf you want to call the resulting image something else, pass the NAME variable, like this:\n\n    NAME=joe/passenger make build_ruby32\n\nMake will build images for both AMD64 and ARM64 by default. If you only want to build for one CPU architecture (ie. AMD64), disable the other architecture like this:\n\n    BUILD_ARM64=0 make build_ruby32\n\n<a name=\"faq\"></a>\n## FAQ\n\n<a name=\"why_rvm\"></a>\n#### Why are you using RVM? Why not rbenv or chruby?\n\nIn summary:\n\n * We have found RVM to be much more user friendly than rbenv and chruby.\n * RVM supplies precompiled binaries, while rbenv and chruby only support compiling Ruby from source.\n * Installing Ruby from Brightbox's APT repository caused too many problems. We used Brightbox's APT repository in the past, but we concluded that it is not the way to go forward.\n\nRbenv and chruby's main value proposition is that they are \"simple\". Indeed, they are simpler in implementation (fewer lines of code) than RVM, but they are not simpler to use. Rbenv and chruby are built on the Unix \"do one thing only\" philosophy. While this is sound, it is not necessarily the behavior that users want: I have seen many users struggling with basic rbenv/chruby usage because of lack of understanding of environment variables, or not having installed the right dependencies. Many users do not understand how the system is supposed to function and what all the different parts are, so doing one thing only may not be what they need. In such a case the simplicity ends up being more of a liability than an asset. It's like selling a car engine, frame and interior separately, while most consumers want an entire car.\n\nRVM is built around a more \"holistic\" philosophy, if you will. It tries harder to be friendly to users who may not necessarily understand how everything works, for example, by automatically installing a bash profile entry and necessary dependencies.\n\nAnother critique of RVM is that it is complicated and causes problems. This has not been our experience: perhaps this was the case in the past, but we have found RVM to be quite stable.\n\n#### Why don't you just install Ruby manually from source?\n\nBy installing Ruby manually from source, we are just reinventing some of the functionality provided by a real Ruby version manager such as RVM, so we may as well use one to save ourselves time. There is no reason not to use RVM: it only occupies 5 MB of space.\n\n#### Why are you not using the Brightbox's APT repository?\n\nThe Brightbox APT repository contains packages for multiple Ruby versions, which can be installed side-by-side. At first, this seems like the perfect solution. And indeed, passenger-docker used to use the Brightbox APT repository.\n\nUnfortunately, we have found that it is much harder to make the different Rubies play nice with each other than it should be. Despite being installable side-to-side, they still conflict with each other. The most notable problem is that all Rubies' RubyGems install binwrappers to /usr/local/bin, but binwrappers generated by different Ruby versions may not be compatible with each other.\n\nRVM provides much better isolation between different Ruby versions.\n\n#### Why don't you just install Ruby from Ubuntu's APT repository?\n\nBecause we need to support Ruby versions not available from Ubuntu's APT repository. Besides, Ubuntu (and Debian) are notorious for being slow with updating Ruby packages. By the time the next Ruby version is released, we will have to wait until the next Ubuntu LTS version before we can use it.\n\n<a name=\"contributing\"></a>\n## Contributing\n\nThanks for your interest in contributing! There are many ways to contribute to this project. Get started [here](https://github.com/phusion/passenger-docker/blob/master/CONTRIBUTING.md).\n\n<a name=\"conclusion\"></a>\n## Conclusion\n\n * Using passenger-docker? [Tweet about us](https://twitter.com/share) or [follow us on Twitter](https://twitter.com/phusion_nl).\n * Having problems? Please post a message at [the discussion forum](https://groups.google.com/d/forum/passenger-docker).\n * Looking for a minimal image containing only a correct base system? Take a look at [baseimage-docker](https://github.com/phusion/baseimage-docker).\n * Need a helping hand? Phusion also offers [consulting](https://www.phusion.nl/consultancy) on a wide range of topics, including Web Development, UI/UX Research & Design, Technology Migration and Auditing.\n\n\n[<img src=\"https://www.phusion.nl/images/mark_logotype.svg\">](http://www.phusion.nl/)\n\nPlease enjoy passenger-docker, a product by [Phusion](http://www.phusion.nl/). :-)\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 2.271484375,
          "content": "# -*- mode: ruby -*-\n# vi: set ft=ruby :\nROOT = File.dirname(File.expand_path(__FILE__))\n\n# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!\nVAGRANTFILE_API_VERSION = '2'\n\n# Default env properties which can be overridden\n# Example overrides:\n#   echo \"ENV['BASEIMAGE_PATH'] ||= '../../phusion/baseimage-docker'   \" >> ~/.vagrant.d/Vagrantfile\n#   echo \"ENV['BASE_BOX_URL']   ||= 'd\\:/dev/vm/vagrant/boxes/phusion/'\" >> ~/.vagrant.d/Vagrantfile\nBASE_BOX_URL          = ENV['BASE_BOX_URL']          || 'https://oss-binaries.phusionpassenger.com/vagrant/boxes/latest/'\nVAGRANT_BOX_URL       = ENV['VAGRANT_BOX_URL']       || BASE_BOX_URL + 'ubuntu-14.04-amd64-vbox.box'\nVMWARE_BOX_URL        = ENV['VMWARE_BOX_URL']        || BASE_BOX_URL + 'ubuntu-14.04-amd64-vmwarefusion.box'\nPASSENGER_DOCKER_PATH = ENV['PASSENGER_DOCKER_PATH'] || '.'\nBASEIMAGE_PATH        = ENV['BASEIMAGE_PATH']        || '../baseimage-docker'\nDOCKERIZER_PATH       = ENV['DOCKERIZER_PATH']       || '../dockerizer'\n\n$script = <<SCRIPT\nset -ex\nwget -q -O - https://get.docker.io/gpg | apt-key add -\necho deb http://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list\napt-get update -qq\napt-get install -q -y --force-yes lxc-docker\nusermod -a -G docker vagrant\ndocker version\nsu - vagrant -c 'echo alias d=docker >> ~/.bash_aliases'\nSCRIPT\n\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  config.vm.box = 'phusion-open-ubuntu-14.04-amd64'\n  config.vm.box_url = VAGRANT_BOX_URL\n  config.ssh.forward_agent = true\n  passenger_docker_path = File.absolute_path(PASSENGER_DOCKER_PATH, ROOT)\n  if File.directory?(passenger_docker_path)\n    config.vm.synced_folder passenger_docker_path, '/vagrant/passenger-docker'\n  end\n  baseimage_path = File.absolute_path(BASEIMAGE_PATH, ROOT)\n  if File.directory?(baseimage_path)\n    config.vm.synced_folder File.expand_path(baseimage_path), '/vagrant/baseimage-docker'\n  end\n  dockerizer_path = File.absolute_path(DOCKERIZER_PATH, ROOT)\n  if File.directory?(dockerizer_path)\n    config.vm.synced_folder File.expand_path(dockerizer_path), '/vagrant/dockerizer'\n  end\n\n  config.vm.provider :vmware_fusion do |f, override|\n    override.vm.box_url = VMWARE_BOX_URL\n    f.vmx['displayName'] = 'passenger-docker'\n  end\n\n  config.vm.provision :shell, :inline => $script\nend\n"
        },
        {
          "name": "image",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}