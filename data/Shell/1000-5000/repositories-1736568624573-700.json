{
  "metadata": {
    "timestamp": 1736568624573,
    "page": 700,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wimpysworld/deb-get",
      "stars": 1365,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0615234375,
          "content": "debian/files\ndebian/*debhelper*\ndebian/deb-get*\n\nrejections.md\n"
        },
        {
          "name": "01-main",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.240234375,
          "content": "# Updating README.md\n**This needs to be done every time the `usage` function is changed**.\n\nTo update `README.md`, first install [cog](https://pypi.org/project/cogapp):\n```bash\nsudo pip3 install cogapp\n```\n\nThen run:\n```bash\ncog -r README.md\n```\n"
        },
        {
          "name": "EXTREPO.md",
          "type": "blob",
          "size": 8.9091796875,
          "content": "# The base URL\n\nIt is the URL that is used as base to build the URLs to download all the files from the external repository. It must be in a format so that the following gives the URLs of the manifest file and the package definition files:\n\n```bash\n${REPO_URL}/manifest\n${REPO_URL}/packages/${APP}\n```\n\nThe URL can point to any HTTP(S) server, as long as the URLs above correctly provide the desired files. Ideally, to prevent unnecessary traffic and slow repository updates, the server should support the `Last-Modified`/`If-Modified-Since` HTTP headers.\n\nAs an example, the base URL of an external repository hosted in a GitHub repository would be:\n\n```\nhttps://raw.githubusercontent.com/<user-organization>/<repository>/<branch>\n```\n\n# The manifest file\n\nThis is the most important file in an external repository, since without it nothing else would work. Its first line must always contain the base URL of the repository. The following lines must contain the names of the package definition files present in the `packages` path, one per line, ideally sorted and without repetition. They can also be commented (starting with `#`), in which case the package definition file is considered deprecated. **No file declared in the manifest should be missing, or else the caching mechanism will break**.\n\n# The package definition files\n\nA package definition file is a bash script whose purpose is to define the required information about a package. Since it is not meant to be executed by itself, but rather sourced by `deb-get`, it does not need to have the bash shebang or be set as executable. It also does not have the `.sh` extension.\n\nCreate a package definition file named `<the-package-name>` in the `packages` path in the repository, where `<the-package-name>` **must** be **exactly** the `Package:` name shown using `apt show`. Then add `<the-package-name>` to the `manifest` file.\n\nThe variables defined in the package definition file are the following:\n\n* `DEFVER`: An integer greater than or equal to `1` that represents the version of the package definition. It must be incremented every time `ASC_KEY_URL`, `GPG_KEY_URL`, `APT_REPO_URL`, `APT_REPO_OPTIONS` or `PPA` are added, changed or removed, or the package installation method changes.\n* `ARCHS_SUPPORTED`: A space-separated list of supported architectures, following the format used by `dpkg --print-architecture`.\n* `CODENAMES_SUPPORTED`: A space-separated list of supported upstream codenames, supporting the values from `UPSTREAM_CODENAME`.\n* `ASC_KEY_URL`: A URL to the ASCII-armored keyring file.\n* `GPG_KEY_URL`: A URL to the binary keyring file.\n* `GPG_KEY_ID`: The Key ID to be fetched from a keyserver.\n* `APT_LIST_NAME`: The name of the `*.list` file, without the extension.\n* `APT_REPO_URL`: The repository URL, the distribution codename and any following components for the line that will be printed to the `*.list` file.\n* `APT_REPO_OPTIONS`: The space-separated extra options, such as `arch=` or `by-hash=` for the line that will be printed to the `*.list` file.\n* `PPA`: The PPA address, following the format used by `apt-add-repository`, including the `ppa:` prefix.\n* `URL`: The URL to the `*.deb` file that will be downloaded. The name of the file must be the last thing at the end of it.\n* `VERSION_PUBLISHED`: The version of the package.\n* `EULA`: An End User License Agreement message for packages that have them.\n* `PRETTY_NAME`: The brand name of the software.\n* `WEBSITE`: A URL to the official website for the software.\n* `SUMMARY`: A brief description of what the software is and does.\n\n`ARCHS_SUPPORTED`, `CODENAMES_SUPPORTED`, `APT_LIST_NAME`, `APT_REPO_OPTIONS` and `EULA` are optional and can be ommited when not needed. `ARCHS_SUPPORTED` defaults to `amd64`, and `APT_LIST_NAME` defaults to `${APP}`. The URLs must use the HTTPS protocol whenever possible (i.e. except when using HTTPS would not work). To ensure the optimal performance of the commands `prettylist` and `csvlist`, if more complex operations (such as `curl`, `unroll_url` or `grep` over the GitHub releases JSON file) are needed to define the variables (most likely `URL` and `VERSION_PUBLISHED`), they (and the variables that depend on them) must be wrapped by the following condition:\n\n```bash\nif [ \"${ACTION}\" != prettylist ]; then\n    # Code goes here\nfi\n```\n\n`APT_REPO_URL`, `PPA`, `PRETTY_NAME`, `WEBSITE`, `SUMMARY` and the calls to `get_github_releases` or `get_website` must never be wrapped by the condition above.\n\nThe environment variables available to the package definition file are the following:\n\n* `CACHE_DIR`: The path to `deb-get` cache, `/var/cache/deb-get`.\n* `HOST_CPU`: The CPU architecture of the host system, as output by `uname -m`. Supported values are `aarch64`, `armv7l` and `x86_64`.\n* `HOST_ARCH`: The CPU architecture of the host system, as output by `dpkg --print-architecture`.\n* `OS_ID`: The id of the OS, as output by `lsb_release --id --short`. Supported values are `Debian`, `Linuxmint`, `Neon`, `Pop`, `Ubuntu` and `Zorin`.\n* `OS_ID_PRETTY`: The brand name of the OS.\n* `OS_CODENAME`: The codename of the OS, as output by `lsb_release --codename --short`.\n* `UPSTREAM_ID`: The id of the upstream distribution. Supported values are `ubuntu` and `debian`.\n* `UPSTREAM_CODENAME`: The codename of the upstream distribution. Supported values are `buster` (10), `bullseye` (11), `bookworm` (12), `trixie` (13), `sid` (unstable), `focal` (20.04), `jammy` (22.04), `lunar` (23.04), `mantic` (23.10) and `noble` (24.04)\n* `UPSTREAM_RELEASE`: The release version of the upstream distribution.\n* `ACTION`: The command being executed by `deb-get`. Supported values are `update`, `upgrade`, `show`, `install`, `reinstall`, `remove`, `purge`, `prettylist` and `fix-installed`. `ACTION` for `csvlist` is `prettylist`.\n* `APP`: The name of the package.\n* `CACHE_FILE`: The path to the cached file for `website` and `github` packages.\n\nThe helper functions available to the package definition file are the following:\n\n* `unroll_url`: Handles redirection and returns the final URL.\n* `get_github_releases`: Sets `METHOD` to `github` and saves the GitHub releases JSON file from GitHub API to `CACHE_FILE`.\n* `get_website`: Sets `METHOD` to `website` and saves the HTML file to `CACHE_FILE`.\n\nUse the following package definition templates as reference for adding a new package to the repository, according to the installation method of the package. The package definition files already implemented in the main repository can serve as further reference.\n\n## APT repository\n\nIf the keyring file is in the ASCII-armored format (extension `*.asc`), use this template:\n\n```bash\nDEFVER=1\nARCHS_SUPPORTED=\"amd64 arm64 armhf\"\nCODENAMES_SUPPORTED=\"buster bullseye bookworm trixie sid focal jammy lunar mantic noble\"\nASC_KEY_URL=\"\"\nAPT_LIST_NAME=\"\"\nAPT_REPO_URL=\"\"\nAPT_REPO_OPTIONS=\"arch=${HOST_ARCH}\"\nEULA=\"\"\nPRETTY_NAME=\"\"\nWEBSITE=\"\"\nSUMMARY=\"\"\n```\n\nIf the keyring file is in the binary format instead (extension `*.gpg`), use this template:\n\n```bash\nDEFVER=1\nARCHS_SUPPORTED=\"amd64 arm64 armhf\"\nCODENAMES_SUPPORTED=\"buster bullseye bookworm trixie sid focal jammy lunar mantic noble\"\nGPG_KEY_URL=\"\"\nAPT_LIST_NAME=\"\"\nAPT_REPO_URL=\"\"\nAPT_REPO_OPTIONS=\"arch=${HOST_ARCH}\"\nEULA=\"\"\nPRETTY_NAME=\"\"\nWEBSITE=\"\"\nSUMMARY=\"\"\n```\n\nIf the keyring file must be fetched from a keyserver by ID use this template:\n\n```bash\nDEFVER=1\nARCHS_SUPPORTED=\"amd64 arm64 armhf\"\nCODENAMES_SUPPORTED=\"buster bullseye bookworm trixie sid focal jammy lunar mantic noble\"\nGPG_KEY_ID=\"\"\nAPT_LIST_NAME=\"\"\nAPT_REPO_URL=\"\"\nAPT_REPO_OPTIONS=\"arch=${HOST_ARCH}\"\nEULA=\"\"\nPRETTY_NAME=\"\"\nWEBSITE=\"\"\nSUMMARY=\"\"\n```\n\n## Launchpad PPA\n\n```bash\nDEFVER=1\nPPA=\"ppa:<person>/<archive>\"\nEULA=\"\"\nPRETTY_NAME=\"\"\nWEBSITE=\"\"\nSUMMARY=\"\"\n```\n\n## GitHub releases\n\nReplace `<user-organization>` and `<repository>` with the correct values:\n\n```bash\nDEFVER=1\nARCHS_SUPPORTED=\"amd64 arm64 armhf\"\nCODENAMES_SUPPORTED=\"buster bullseye bookworm trixie sid focal jammy lunar mantic noble\"\nget_github_releases \"<user-organization>/<repository>\" \"latest\"\nif [ \"${ACTION}\" != prettylist ]; then\n    URL=\"$(grep -m 1 \"browser_download_url.*\\.deb\\\"\" \"${CACHE_FILE}\" | cut -d <delimiter> -f <field>)\"\n    VERSION_PUBLISHED=\"$(cut -d <delimiter> -f <field> <<< \"${URL}\")\"\nfi\nEULA=\"\"\nPRETTY_NAME=\"\"\nWEBSITE=\"\"\nSUMMARY=\"\"\n```\n\n## Website download\n\n```bash\nDEFVER=1\nARCHS_SUPPORTED=\"amd64 arm64 armhf\"\nCODENAMES_SUPPORTED=\"buster bullseye bookworm trixie sid focal jammy lunar mantic noble\"\nget_website \"<website>\"\nif [ \"${ACTION}\" != prettylist ]; then\n    URL=\"$(grep -m 1 \"<pattern>\" \"${CACHE_FILE}\" | cut -d <delimiter> -f <field>)\"\n    VERSION_PUBLISHED=\"$(cut -d <delimiter> -f <field> <<< \"${URL}\")\"\nfi\nEULA=\"\"\nPRETTY_NAME=\"\"\nWEBSITE=\"\"\nSUMMARY=\"\"\n```\n\n## Direct download\n\n```bash\nDEFVER=1\nARCHS_SUPPORTED=\"amd64 arm64 armhf\"\nCODENAMES_SUPPORTED=\"buster bullseye bookworm trixie sid focal jammy lunar mantic noble\"\nif [ \"${ACTION}\" != prettylist ]; then\n    URL=\"$(unroll_url \"<website>\")\"\n    VERSION_PUBLISHED=\"$(cut -d <delimiter> -f <field> <<< \"${URL}\")\"\nfi\nEULA=\"\"\nPRETTY_NAME=\"\"\nWEBSITE=\"\"\nSUMMARY=\"\"\n```\n"
        },
        {
          "name": "HACKTOBERFEST-2022.md",
          "type": "blob",
          "size": 6.181640625,
          "content": "# Hacktoberfest 2022 mini-event\n\nWe're running a Hacktoberfest 🎃 mini-event. The idea is simple. Land\ndocumentation 📝 in projects that `deb-get` already supports that explain how\nusers of Debian and Ubuntu based distros can install and update the packages\npublished by those projects.\n\nWe'll use this document to provide and template for submitting pull requests and\ntracking which pull requests were successfully merged ✅\n\n## Process\n\nThis is the process for submitting a documentation change to a GitHub project.\nThat said, landing documentation for `deb-get` in any project will also be\nappreciated and acknowledged by this mini-event.\n\n - Fork the project you want to contribute to\n - Submit a change to the appropriate documentation, usually `README.md`\n   - Changes to wikis will also be accepted here!\n - Submit a pull-request to the project and reference our [mini-event activity tracker](https://github.com/wimpysworld/deb-get/issues/579)\n - When the project merges your documentation change, fork this deb-get repository\n - Submit a pull-request to this document, adding a link to the merged pull request\n\n### Template documentation change\n\nHere's a template for the documentation change to submit to your chosen\nproject(s), make sure you change `<project>` and `<packagename>` accordingly in\nyour pull requests.\n\n```markdown\n## Debian and Ubuntu based distros\n\nUsers of Debian and Ubuntu based distros can also install and\nupdate the `.deb` packages we publish in our GitHub releases page using [deb-get](https://github.com/wimpysworld/deb-get).\n\nFirst install `deb-get` using these commands in a terminal:\n\n    sudo apt install curl\n    curl -sL https://raw.githubusercontent.com/wimpysworld/deb-get/main/deb-get | sudo -E bash -s install deb-get\n\nThen install <project> using the following command in terminal:\n\n    deb-get install <package-name>\n\nOnce <package-name> is installed it can be kept up to date using:\n\n    deb-get update\n    deb-get upgrade\n```\n\n### Applicable Projects\n\nThese projects are hosted on GitHub and are already supported by `deb-get`.\nThey're good candidates for this mini-event, but do check the projects pull\nrequests and our [mini-event activity tracker](https://github.com/wimpysworld/deb-get/issues/579) to make sure someone else hasn't already beaten you to it 😄\n\n  - [X] <--  these already have PRs awaiting approval\n\n- [ ]  https://github.com/OrangeDrangon/android-messages-desktop/\n- [ ]   https://antimicrox.github.io/\n- [ ]   https://github.com/TheAssassin/AppImageLauncher\n- [X]   https://docs.microsoft.com/en-us/sql/azure-data-studio/\n- [ ]   https://www.balena.io/etcher/\n- [ ]   https://github.com/sharkdp/bat\n- [ ]   https://github.com/hsbasu/battery-monitor/\n- [ ]   https://bitwarden.com/\n- [ ]   https://www.blockbench.net/\n- [ ]   https://github.com/ClementTsang/bottom\n- [ ]   https://brisqi.com/\n- [ ]   https://sindresorhus.com/caprine\n- [ ]   https://vscodium.com/\n- [ ]   https://tkashkin.github.io/projects/gamehub\n- [ ]   https://github.com/sigstore/cosign\n- [ ]   https://github.com/wimpysworld/deb-get\n- [ ]   https://github.com/ymauray/deborah/\n- [ ]   https://www.diagrams.net\n- [X]   https://github.com/bootandy/dust\n- [ ]   https://github.com/muesli/duf\n- [ ]   https://juzzlin.github.io/DustRacing2D/index.html\n- [ ]   https://github.com/sharkdp/fd\n- [ ]   https://github.com/Figma-Linux/figma-linux\n- [ ]   https://flameshot.org/\n- [ ]   https://meetfranz.com/\n- [ ]   https://github.com/hmlendea/gfn-electron\n- [ ]   https://cli.github.com/\n- [ ]   https://github.com/dandavison/delta\n- [X]   https://desktop.github.com/\n- [ ]   https://github.com/ankurk91/google-chat-electron\n- [ ]   https://github.com/anchore/grype\n- [ ]   https://heroicgameslauncher.com/\n- [X]   https://gohugo.io/\n- [ ]   https://hyper.is/\n- [ ]   https://github.com/igdmapps/igdm\n- [ ]   https://insomnia.rest/\n- [ ]   https://www.irccloud.com/\n- [ ]   https://www.jabref.org/\n- [ ]   https://github.com/ksnip/ksnip\n- [ ]   https://github.com/GEROGIANNIS/Limoji\n- [ ]   https://github.com/Peltoche/lsd\n- [ ]   https://ludo.libretro.com/\n- [ ]   https://getmailspring.com/\n- [ ]   https://mattermost.com/\n- [ ]   https://github.com/trapexit/mergerfs\n- [ ]   https://micro-editor.github.io/\n- [ ]   https://minbrowser.org\n- [ ]   https://sharkwouter.github.io/minigalaxy/\n- [ ]   https://minikube.sigs.k8s.io/\n- [ ]   https://motrix.app/\n- [ ]   https://github.com/SoongNoonien/mpdevil\n- [ ]   https://agam778.github.io/MS-Office-Electron/\n- [ ]   https://mullvad.net/\n- [ ]   https://neovim.io/\n- [ ]   https://notable.app/\n- [ ]   https://github.com/muesli/obs-cli\n- [ ]   https://obsidian.md/\n- [ ]   https://www.onlyoffice.com/en/desktop.aspx\n- [ ]   https://github.com/openaudible/openaudible\n- [ ]   https://www.corifeus.com/onenote\n- [ ]   https://pandoc.org/\n- [ ]   https://peazip.github.io\n- [ ]   https://github.com/HACKERALERT/Picocrypt/\n- [ ]   https://github.com/six-ddc/plow\n- [ ]   https://docs.microsoft.com/powershell/\n- [ ]   https://proton.me/mail/bridge\n- [ ]   https://maplemedia.io/apps/\n- [ ]   https://quarto.org/\n- [ ]   https://rambox.app/\n- [ ]   https://rclone.org/\n- [ ]   https://rocket.chat/\n- [ ]   https://github.com/raspberrypi/rpi-imager\n- [ ]   https://rustdesk.com/\n- [ ]   https://simplenote.com/\n- [ ]   https://github.com/ransome1/sleek\n- [ ]   https://soundux.rocks\n- [ ]   https://standardnotes.com\n- [ ]   https://github.com/anchore/syft\n- [ ]   https://github.com/hakandundar34coding/system-monitoring-center\n- [ ]   https://tabby.sh/\n- [ ]   https://github.com/IsmaelMartinez/teams-for-linux\n- [ ]   https://github.com/Mastermindzh/tidal-hifi\n- [ ]   https://www.tribler.org/\n- [ ]   https://aquasecurity.github.io/trivy/\n- [ ]   https://github.com/H-M-H/Weylus\n- [ ]   https://whalebird.social/\n- [ ]   https://github.com/eneshecan/whatsapp-for-linux\n- [ ]   https://github.com/serebit/wraith-master\n- [ ]   https://th-ch.github.io/youtube-music/\n- [X]   https://github.com/bvaisvil/zenith\n- [X]   https://www.zettlr.com/\n\n## Merged pull requests\n\nAs your pull requests get merged in the upstream projects, add a link to the\npull request below so we can track the changes in our Hacktoberfest mini-event\nand awards your magic Internet points 🪄 to Hacktoberfest 🎃\n\n* [du-dust](https://github.com/bootandy/dust/pull/271)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2022 Wimpy's World\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.1279296875,
          "content": "<h1 align=\"center\">\n  <img src=\".github/deb-get-logo.png\" alt=\"deb-get\">\n  <br />\n  <tt>deb-get</tt>\n</h1>\n\n<p align=\"center\">\n  <b>\n    <tt>apt-get</tt> functionality for .debs published in 3rd party repositories or via direct download. It works on Debian, Ubuntu and their derivative distributions.\n    <br />\n    Made with 💝 for <img src=\".github/ubuntu.png\" align=\"top\" width=\"20\" /> & <img src=\".github/debian.png\" align=\"top\" width=\"20\" />\n  </b>\n</p>\n\n## Introduction\n\n`deb-get` makes it easy to install and update `.debs` published in 3rd party\napt repositories or made available via direct download on websites or GitHub\nrelease pages.\n\n## Install\n\nUse `deb-get` to install `deb-get`.\n\n```bash\nsudo apt install curl lsb-release wget\ncurl -sL https://raw.githubusercontent.com/wimpysworld/deb-get/main/deb-get | sudo -E bash -s install deb-get\n```\n\nAlternatively, you can [download the `.deb` of `deb-get` from the releases page](../../releases/latest)\nand install it manually with\n\n``` bash\nsudo apt-get install ./path/to/deb-get_<version>.deb\n```\n### GitHub Personal Access Token (PAT)\n\nYou must provide `deb-get` with a GitHub [Personal Access Token (PAT)](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token). Once created, insert it into the `DEBGET_TOKEN` environment variable for `deb-get` to use for authorization with the GitHub API.\n\nFor example:\n\n```shell\nexport DEBGET_TOKEN=github-personal-access-token\ndeb-get update\ndeb-get upgrade\n```\n\nSkipping this step will lead to failures during the `update`, `upgrade`, and `install` commands.\n\nFor more information, see the [API rate limit section below](#github-api-rate-limits).\n\n## Usage\n\nHere's an example of how to install Google Chrome.\n\n```bash\ndeb-get install google-chrome-stable\n```\n\nYou can see what applications are supported by using `deb-get list` or you\ncan search the available applications with `deb-get search <app>`.\n\nYou can upgrade packages installed using `deb-get` by running\n`deb-get upgrade`.\n\n<!-- [[[cog\nimport subprocess\nimport cog\n\nresult = subprocess.check_output([\"./deb-get\", \"help\"], encoding=\"utf-8\")\n# strip the \"Usage\" header\nhelp = result.replace(\"Usage\\n\\n\", \"\").rstrip()\ncog.out(f\"```\\n{help}\\n```\")\n]]] -->\n```\n\ndeb-get {update [--repos-only] [--quiet] | upgrade [--dg-only] | show <pkg list> | install <pkg list>\n        | reinstall <pkg list> | remove [--remove-repo] <pkg list>\n        | purge [--remove-repo] <pkg list>\n        | search [--include-unsupported] <regex> | cache | clean\n        | list [--include-unsupported] [--raw|--installed|--not-installed]\n        | prettylist [<repo>] | csvlist [<repo>] | fix-installed [--old-apps]\n        | help | version}\n\ndeb-get provides a high-level commandline interface for the package management\nsystem to easily install and update packages published in 3rd party apt\nrepositories or via direct download.\n\nupdate\n    update is used to resynchronize the package index files from their sources.\n    When --repos-only is provided, only initialize and update deb-get's\n    external repositories, without updating apt or looking for updates of\n    installed packages.\n    When --quiet is provided the fetching of deb-get repository updates is done without progress feedback.\n\nupgrade\n    upgrade is used to install the newest versions of all packages currently\n    installed on the system.\n    When --dg-only is provided, only the packages which have been installed by deb-get will be upgraded.\n\ninstall\n    install is followed by one package (or a space-separated list of packages)\n    desired for installation or upgrading.\n\nreinstall\n    reinstall is followed by one package (or a space-separated list of\n    packages) desired for reinstallation.\n\nremove\n    remove is identical to install except that packages are removed instead of\n    installed. When --remove-repo is provided, also remove the apt repository\n    of apt/ppa packages.\n\npurge\n    purge is identical to remove except that packages are removed and purged\n    (any configuration files are deleted too). When --remove-repo is provided,\n    also remove the apt repository of apt/ppa packages.\n\nclean\n    clean clears out the local repository (/var/cache/deb-get) of retrieved\n    package files.\n\nsearch\n    search for the given regex(7) term(s) from the list of available packages\n    supported by deb-get and display matches. When --include-unsupported is\n    provided, include packages with unsupported architecture or upstream\n    codename and include PPAs for Debian-derived distributions.\n\nshow\n    show information about the given package (or a space-separated list of\n    packages) including their install source and update mechanism.\n\nlist\n    list the packages available via deb-get. When no option is provided, list\n    all supported packages and tell which ones are installed (slower). When\n    --include-unsupported is provided, include packages with unsupported\n    architecture or upstream codename and include PPAs for Debian-derived\n    distributions (faster). When --raw is provided, list all packages and do\n    not tell which ones are installed (faster). When --installed is provided,\n    only list the packages installed (faster). When --not-installed is provided,\n    only list the packages not installed (faster).\n\nprettylist\n    markdown formatted list the packages available in repo. repo defaults to\n    01-main. If repo is 00-builtin or 01-main the packages from 00-builtin are\n    included. Use this to update README.md.\n\ncsvlist\n    csv formatted list the packages available in repo. repo defaults to\n    01-main. If repo is 00-builtin or 01-main the packages from 00-builtin are\n    included. Use this with 3rd party wrappers.\n\ncache\n    list the contents of the deb-get cache (/var/cache/deb-get).\n\nfix-installed\n    fix installed packages whose definitions were changed. When --old-apps is\n    provided, transition packages to new format. This command is only intended\n    for internal use.\n\nhelp\n    show this help.\n\nversion\n    show deb-get version.\n```\n<!-- [[[end]]] -->\n\n### Why?\n\n3rd party apt repositories exist. They are not going away.\n\nSome application vendors and projects express their support for Debian/Ubuntu\nby publishing `.debs` of their software as direct downloads or via\ntheir own apt repositories. `deb-get` makes it easy to find, install and update\n`.debs` published in this way.\n\n  - Perhaps you want to use software that is not (yet) officially packaged for Debian/Ubuntu.\n  - Perhaps you want to use software that is fast moving and newer versions are available from the vendor/project.\n  - Perhaps you want to use some non-free software that Debian/Ubuntu cannot distribute due to licensing restrictions.\n\n`deb-get` tries to remedy this by providing a curated index of software\navailable for Ubuntu that is published by the project or vendor. `deb-get` is\ninspired by Software Boutique, a graphical application I co-authored that does\nmuch the same thing and has been included in [Ubuntu MATE](https://ubuntu-mate.org)\nsince 2015.\n\n## Supported Software\n\nThe list of the software that can be installed, updated and removed using `deb-get`'s main repository is available at [01-main/README](01-main/README.md).\n\n### How do package updates work?\n\n#### 3rd party apt repositories and PPAs\n\nIf packages are available via a 3rd party `apt` repository\n<img src=\".github/debian.png\" align=\"top\" width=\"20\" /> or a Launchpad PPA\n<img src=\".github/launchpad.png\" align=\"top\" width=\"20\" />, then those packages\nwill be updated/upgraded when using `sudo apt-get update` and `sudo apt-get upgrade`.\n\n#### GitHub Releases and direct downloads\n\nFor `.deb` packages that are only available via GitHub Releases\n<img src=\".github/github.png\" align=\"top\" width=\"20\" /> or direct download\n<img src=\".github/direct.png\" align=\"top\" width=\"20\" />, then those packages\ncan only be updated/upgraded by using `deb-get update` and `deb-get upgrade`.\n\n#### GitHub API Rate Limits\n\n`deb-get` uses the [GitHub REST API](https://docs.github.com/en/rest) when updating the package index files for GitHub Releases\n<img src=\".github/github.png\" align=\"top\" width=\"20\" /> and for downloading the associated `.debs`. This API is [rate-limited](https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting) to 60 calls per hour per source IP address. This limit is vital for keeping the API responsive and available to all GitHub users. However, a lot of GitHub releases are now handled by `deb-get` so you will experience temporary failure to perform the following functions.\n\n* `update` the `deb-get` package index files\n* `upgrade` currently installed packages via GitHub Releases <img src=\".github/github.png\" align=\"top\" width=\"20\" />\n* `install` new applications via GitHub Releases <img src=\".github/github.png\" align=\"top\" width=\"20\" />\n\nIf you have a GitHub account you can provide an authorization token during your GitHub API usage to increase your rate limit to 5000 requests per hour per authenticated user.  To do this you will need to use a [Personal Access Token (PAT)](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) with GitHub. Once you have created a token within GitHub (or identified an appropriate existing token), insert it into the `DEBGET_TOKEN` environment variable for `deb-get` to use with the GitHub API.\n\nYou probably want to put this into your `.profile` so it is always available. Remember to never commit secrets in dotfiles to public git repositories!\n\n```shell\n# In .profile\nexport DEBGET_TOKEN=github-personal-access-token\n```\n\n\n\n## Adding Software\n\nFor information on what is acceptable as suggestion for new packages and instructions on how to open a PR to add a new package to the main repository, head to [01-main/CONTRIBUTING](01-main/CONTRIBUTING.md).\n\n### Adding external repositories\n\nIt is possible to also add a `deb-get`-compatible external repository, and supplement the list of supported packages, typically because you need to:\n\n1. Add something which does not meet any of the general guidelines of the main repository; or\n2. Change the definition of a package from the main repository.\n\nFor information on how to create and maintain a `deb-get`-compatible external repository, head to [EXTREPO](EXTREPO.md).\n\nHow to use:\n\n* Manually create the file `/etc/deb-get/<priority>-<repo>.repo`, containing in its first line the base URL of the repository.\n    * The `<priority>` value is a two-digit number between 00 and 99 that defines the order in which the repositories will be loaded (00 first, 99 last), so if any conflicting definitions are found, the one from the repository with the highest priority will be used (the builtin definitions from the `deb-get` script itself have priority 00, the main repository has priority 01 and the custom user includes have priority 99).\n    * The `<repo>` value can be anything, but it should preferably be unique and easy to remember.\n* Run `deb-get update`, so the manifest file and the package definition files are downloaded.\n\n### Custom User Includes\n\nAs a more advanced feature, it is possible to also add your own local customizations or overrides, and supplement the list of packages supported by the main repository. This feature is especially useful so that your local copy of the main repository can remain unmodified and always be kept fully up to date by moving your customizations out in a separate folder away from the main repository.\n\nTypically because:\n\n1. You are waiting on a pending request for a new software package, which has been submitted for consideration but has not been reviewed / accepted / merged / released yet; or\n2. You need to add something which does not meet any of the general guidelines of the main repository, for whatever various reason(s).\n\nHow to use:\n\n* Manually create the folder `/etc/deb-get/99-local.d/` if it does not exist already. By default, `deb-get` does not create this folder unless your specific distribution has packaged it that way.\n* Any files directly within this folder will be bash sourced e.g. `. /etc/deb-get/99-local.d/appname1`.\n* The name of the added file **must** match **exactly** the name of the package being defined.\n* For information on how to create a package definition file, head to [EXTREPO](EXTREPO.md#the-package-definition-files).\n* Your user custom package definition files are then loaded after the package definitions from any added repository.\n* A recommendation message is printed for any new user added definitions, with a URL link to open a request.\n* Warning messages are then also printed for any conflicts detected for overridden definitions (of same name), which then take priority over existing ones.\n\nFor the last situation, this is most often meant as a helpful reminder to remove your custom definition once it has been successfully merged upstream into the main repository, so after the main repository updates itself you are properly notified. It also avoids keeping lots of duplicate definitions around.\n\nWe really hope that you will enjoy the convenience and flexibility of the user overrides feature, so please consider in return to open new issues and pull requests, for any new package definitions you create, so that we can share those back with the wider community. Many thanks for your consideration!\n\n## Related projects\n\n  * [App Outlet](https://appoutlet.github.io/): *A Universal linux app store*\n  * [bin-get](https://github.com/OhMyMndy/bin-get): *Script to easily and safely fetch binaries from GitHub Releases/tags*\n  * [makedeb](https://www.makedeb.org/): *A simplicity-focused packaging tool for Debian archives*\n  * [MakeResolveDeb](https://www.danieltufvesson.com/makeresolvedeb): *Install DaVinci Resolve or DaVinci Resolve Studio on Debian*\n  * [pacstall](https://pacstall.dev/): *The AUR alternative for Ubuntu*\n  * [Ubuntu Make](https://github.com/ubuntu/ubuntu-make): *Easy setup of common tools for developers on Ubuntu.*\n  * [unsnap](https://github.com/popey/unsnap): *Quickly migrate from using snap packages to flatpaks*\n## In the media\n\n  * [The deb-get tool helps Ubuntu (and derivative distro) fans grab extra apps](https://www.gamingonlinux.com/2022/05/the-deb-get-tool-helps-ubuntu-and-derivative-distro-fans-grab-extra-apps/) - **GamingOnLinux**\n  * [Deb-Get is ‘Apt-Get’ for 3rd-Party Ubuntu Software](https://www.omgubuntu.co.uk/2022/05/use-deb-get-to-install-popular-linux-apps-on-ubuntu) - **omg! ubuntu!**\n  * [How To Install Third-Party Linux Applications with Deb-Get](https://www.tomshardware.com/uk/how-to/install-linux-apps-with-deb-get) - **toms HARDWARE**\n  * [How to use deb-get to install third-party software on Ubuntu](https://www.techrepublic.com/article/use-deb-get-install-third-party-software-ubuntu/) - **TechRepublic**\n  * [Ubuntu MATE’s Lead Creates a Nifty Tool to Help Install 3rd Party Deb Packages](https://news.itsfoss.com/deb-get-ubuntu/) - **It's FOSS**\n  * [Easily Get 3rd-Party Software on Ubuntu With Deb-Get](https://fosspost.org/deb-get-install-3rd-party-software-ubuntu/) - **FOSS Post**\n  * [deb-get, an \"apt-get\" to install third-party software on Ubuntu](https://ubunlog.com/en/deb-get-un-apt-get-para-instalar-software-de-terceros-en-ubuntu/) - **ubunlog**\n  * [deb-get, a utility for installing third-party software](https://www.linuxadictos.com/en/deb-get-una-utilidad-para-instalar-software-de-terceros.html) - **Linux Addicted**\n"
        },
        {
          "name": "deb-get",
          "type": "blob",
          "size": 60.5927734375,
          "content": "#!/usr/bin/env bash\nLC_ALL=C\nPACKAGE_INSTALLATION_TRIES=0\nPACKAGE_INSTALLATION_COUNT=0\n\nreadonly VERSION=\"0.4.5\"\n\n# set a github auth token (e.g a PAT ) in DEBGET_TOKEN to get a bigger rate limit\nif [ -n \"${DEBGET_TOKEN}\" ]; then\n    export HEADERAUTH=\"Authorization: token ${DEBGET_TOKEN}\"\n    export HEADERPARAM=\"--header\"\nelse\n    unset HEADERAUTH\n    unset HEADERPARAM\nfi\n\nfunction usage() {\ncat <<HELP\n\nUsage\n\ndeb-get {update [--repos-only] [--quiet] | upgrade [--dg-only] | show <pkg list> | install <pkg list>\n        | reinstall <pkg list> | remove [--remove-repo] <pkg list>\n        | purge [--remove-repo] <pkg list>\n        | search [--include-unsupported] <regex> | cache | clean\n        | list [--include-unsupported] [--raw|--installed|--not-installed]\n        | prettylist [<repo>] | csvlist [<repo>] | fix-installed [--old-apps]\n        | help | version}\n\ndeb-get provides a high-level commandline interface for the package management\nsystem to easily install and update packages published in 3rd party apt\nrepositories or via direct download.\n\nupdate\n    update is used to resynchronize the package index files from their sources.\n    When --repos-only is provided, only initialize and update deb-get's\n    external repositories, without updating apt or looking for updates of\n    installed packages.\n    When --quiet is provided the fetching of deb-get repository updates is done without progress feedback.\n\nupgrade\n    upgrade is used to install the newest versions of all packages currently\n    installed on the system.\n    When --dg-only is provided, only the packages which have been installed by deb-get will be upgraded.\n\ninstall\n    install is followed by one package (or a space-separated list of packages)\n    desired for installation or upgrading.\n\nreinstall\n    reinstall is followed by one package (or a space-separated list of\n    packages) desired for reinstallation.\n\nremove\n    remove is identical to install except that packages are removed instead of\n    installed. When --remove-repo is provided, also remove the apt repository\n    of apt/ppa packages.\n\npurge\n    purge is identical to remove except that packages are removed and purged\n    (any configuration files are deleted too). When --remove-repo is provided,\n    also remove the apt repository of apt/ppa packages.\n\nclean\n    clean clears out the local repository (/var/cache/deb-get) of retrieved\n    package files.\n\nsearch\n    search for the given regex(7) term(s) from the list of available packages\n    supported by deb-get and display matches. When --include-unsupported is\n    provided, include packages with unsupported architecture or upstream\n    codename and include PPAs for Debian-derived distributions.\n\nshow\n    show information about the given package (or a space-separated list of\n    packages) including their install source and update mechanism.\n\nlist\n    list the packages available via deb-get. When no option is provided, list\n    all supported packages and tell which ones are installed (slower). When\n    --include-unsupported is provided, include packages with unsupported\n    architecture or upstream codename and include PPAs for Debian-derived\n    distributions (faster). When --raw is provided, list all packages and do\n    not tell which ones are installed (faster). When --installed is provided,\n    only list the packages installed (faster). When --not-installed is provided,\n    only list the packages not installed (faster).\n\nprettylist\n    markdown formatted list the packages available in repo. repo defaults to\n    01-main. If repo is 00-builtin or 01-main the packages from 00-builtin are\n    included. Use this to update README.md.\n\ncsvlist\n    csv formatted list the packages available in repo. repo defaults to\n    01-main. If repo is 00-builtin or 01-main the packages from 00-builtin are\n    included. Use this with 3rd party wrappers.\n\ncache\n    list the contents of the deb-get cache (/var/cache/deb-get).\n\nfix-installed\n    fix installed packages whose definitions were changed. When --old-apps is\n    provided, transition packages to new format. This command is only intended\n    for internal use.\n\nhelp\n    show this help.\n\nversion\n    show deb-get version.\n\nHELP\n}\n\nfunction package_is_installed() {\n    [[ \" ${INSTALLED_APPS[*]} \" =~ \" ${1} \" ]]\n}\n\nfunction elevate_privs() {\n    if [ \"$(id -ru)\" -eq 0 ]; then\n        # Alreday in the root context\n        ELEVATE=\"\"\n    elif command -v doas 1>/dev/null && doas true 2>/dev/null; then\n        ELEVATE=\"doas\"\n    elif command -v sudo 1>/dev/null && sudo true 2>/dev/null; then\n        ELEVATE=\"sudo\"\n    else\n        fancy_message fatal \"$(basename \"${0}\") requires sudo or doas to elevate permissions, neither were found.\"\n    fi\n}\n\nfunction create_cache_dir() {\n    if [ -d /var/cache/get-deb ]; then\n        ${ELEVATE} mv /var/cache/get-deb \"${CACHE_DIR}\"\n    fi\n    ${ELEVATE} mkdir -p \"${CACHE_DIR}\" 2>/dev/null\n    ${ELEVATE} chmod 755 \"${CACHE_DIR}\" 2>/dev/null\n}\n\nfunction create_etc_dir() {\n    ${ELEVATE} mkdir -p \"${ETC_DIR}\" 2>/dev/null\n    ${ELEVATE} chmod 755 \"${ETC_DIR}\" 2>/dev/null\n}\n\n\nfunction unroll_url() {\n    # Sourceforge started adding parameters\n    local TRIM_URL=\"$(curl -w \"%{url_effective}\" -I -L -s -S \"${1}\" -o /dev/null)\"\n    printf '%s' \"${TRIM_URL/\\.deb*/.deb}\"\n}\n\nfunction follow_url() {\n    local TRIM_URL=\"$(curl -w \"%{url_effective}\" -I -L -s -S \"${1}\" -o /dev/null)\"\n    printf '%s' \"${TRIM_URL}\"\n}\n\n\nfunction get_github_releases() {\n    METHOD=\"github\"\n    CACHE_FILE=\"${CACHE_DIR}/${APP}.json_extract\"\n    # Cache github releases json for 1 hour to try and prevent API rate limits\n    #   https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting\n    #   {\"message\":\"API rate limit exceeded for 62.31.16.154. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\",\"documentation_url\":\"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"}\n    #   curl -I https://api.github.com/users/flexiondotorg\n\n    # Do not process github releases while generating a pretty list or upgrading\n    if [[ ' install update fix-installed ' =~ \" ${ACTION} \" ]]; then\n        if [ ! -e \"${CACHE_FILE}\" ] || [ -n \"$(find \"${CACHE_FILE}\" -mmin +\"${DEBGET_CACHE_RTN:-60}\")\" ]; then\n            fancy_message info \"Updating ${CACHE_FILE}\"\n            local URL=\"https://api.github.com/repos/${1}/releases${2:+/$2}\"\n            wgetcmdarray=(wget  \"${HEADERPARAM}\" \"${HEADERAUTH}\" -q --no-use-server-timestamps \"${URL}\" -O- )\n            \"${wgetcmdarray[@]}\" | sed '/browser_download/!d;/\\.deb/!d' | ${ELEVATE} tee \"${CACHE_FILE}\" > /dev/null || ( fancy_message warn \"Updating ${CACHE_FILE} failed.\" )\n            if [ -f \"${CACHE_FILE}\" ] && grep \"API rate limit exceeded\" \"${CACHE_FILE}\"; then\n                fancy_message warn \"Updating ${CACHE_FILE} exceeded GitHub API limits. Deleting it.\"\n                ${ELEVATE} rm \"${CACHE_FILE}\" 2>/dev/null\n            fi\n            # we only want the .deb files download urls from the json\n            ${ELEVATE} sed -i '/browser_download/!d;/\\.deb/!d' ${CACHE_FILE}\n        fi\n    fi\n}\n\nfunction get_gitlab_releases() {\n    METHOD=\"gitlab\"\n    CACHE_FILE=\"${CACHE_DIR}/${APP}.json\"\n    # Cache gitlab releases json for 1 hour to try and prevent API rate limits\n    #\n    # Do not process gitlab releases while generating a pretty list or upgrading\n    # if $1 is org/app or user/repo it must be urlencoded\n    # the gitlab api can take a release or use permalink/latest to get the latest release\n    # So for gitlab sourced apps that use this release model users can use 99-local to pin a version\n    #\n\n    if [[ ' install update fix-installed ' =~ \" ${ACTION} \" ]]; then\n        if [ ! -e \"${CACHE_FILE}\" ] || [ -n \"$(find \"${CACHE_FILE}\" -mmin +\"${DEBGET_CACHE_RTN:-60}\")\" ]; then\n            fancy_message info \"Updating ${CACHE_FILE}\"\n            RELEASE=${2/%latest/permalink/latest}\n\n            local URL=\"https://gitlab.com/api/v4/projects/${1}/releases/${RELEASE}/assets/links\"\n            wgetcmdarray=(wget -q --no-use-server-timestamps \"${URL}\" -O \"${CACHE_FILE}\")\n\n            ${ELEVATE} \"${wgetcmdarray[@]}\" || ( fancy_message warn \"Updating ${CACHE_FILE} failed.\" )\n        fi\n    fi\n}\nfunction get_website() {\n    METHOD=\"website\"\n    CACHE_FILE=\"${CACHE_DIR}/${APP}.html\"\n    if [[ ' install update fix-installed ' =~ \" ${ACTION} \" ]]; then\n        if [ ! -e \"${CACHE_FILE}\" ] || [ -n \"$(find \"${CACHE_FILE}\" -mmin +\"${DEBGET_CACHE_RTN:-60}\")\" ]; then\n            fancy_message info \"Updating ${CACHE_FILE}\"\n            # shellcheck disable=SC2086\n            if ! ${ELEVATE} wget ${WGET_VERBOSITY} --no-use-server-timestamps ${WGET_TIMEOUT} \"$@\" -O \"${CACHE_FILE}\"; then\n                fancy_message warn \"Updating ${CACHE_FILE} failed. Deleting it.\"\n                ${ELEVATE} rm -f \"${CACHE_FILE}\"\n            fi\n        fi\n    fi\n}\n\nfunction fancy_message() {\n    if [ -z \"${1}\" ] || [ -z \"${2}\" ]; then\n      return\n    fi\n\n    local RED=\"\\e[31m\" GREEN=\"\\e[32m\" YELLOW=\"\\e[33m\" MAGENTA=\"\\e[35m\" RESET=\"\\e[0m\"\n    MESSAGE_TYPE=\"${1}\"\n    MESSAGE=\"${2}\"\n\n    case \"${MESSAGE_TYPE}\" in\n      (info) printf \"  [${GREEN}+${RESET}] %s\\n\" \"${MESSAGE}\";;\n      (progress) printf \"  [${GREEN}+${RESET}] %s\" \"${MESSAGE}\";;\n      (recommend) printf \"  [${MAGENTA}!${RESET}] %s\\n\" \"${MESSAGE}\";;\n      (warn) printf \"  [${YELLOW}*${RESET}] WARNING! %s\\n\" \"${MESSAGE}\";;\n      (error) printf \"  [${RED}!${RESET}] ERROR! %s\\n\" \"${MESSAGE}\" >&2;;\n      (fatal)\n          printf \"  [${RED}!${RESET}] ERROR! %s\\n\" \"${MESSAGE}\" >&2\n          exit 1;;\n      (*) printf \"  [?] UNKNOWN: %s\\n\" \"${MESSAGE}\";;\n    esac\n}\n\nfunction download_deb() {\n    local URL=\"${1}\"\n    local FILE=\"${2}\"\n\n    # shellcheck disable=SC2086\n    if ! ${ELEVATE} wget ${WGET_VERBOSITY} --continue ${WGET_TIMEOUT} --show-progress --progress=bar:force:noscroll \"${URL}\" -O \"${CACHE_DIR}/${FILE}\"; then\n        fancy_message error \"Failed to download ${URL}. Deleting ${CACHE_DIR}/${FILE}...\"\n        ${ELEVATE} rm \"${CACHE_DIR}/${FILE}\" 2>/dev/null\n        return 1\n    fi\n}\n\nfunction eula() {\n    if [ -n \"${EULA}\" ] && [ \"${DEBIAN_FRONTEND}\" != noninteractive ]; then\n        echo -e \"${EULA}\\n\\n\"\n        printf '%s\\n' \"Do you agree to the ${APP} EULA?\"\n        select yn in \"Yes\" \"No\"; do\n            case \"$yn\" in\n                Yes) return 0;;\n                No) return 1;;\n            esac\n        done\n    fi\n}\n\nfunction update_apt() {\n    ${ELEVATE} apt-get -q -o Dpkg::Progress-Fancy=\"1\" -y update\n}\n\nfunction upgrade_apt() {\n    ${ELEVATE} apt-get -q -o Dpkg::Progress-Fancy=\"1\" -y upgrade\n}\n\nfunction upgrade_only_dg() {\n    mapfile -t INSTALLED_APT_PPA < <(grep -E \"apt\\s*$|ppa\\s*$\" \"${ETC_DIR}/installed\"); INSTALLED_APT_PPA=(${INSTALLED_APT_PPA[@]%% *})\n    printf '%s\\0' \"${INSTALLED_APT_PPA[@]}\" | xargs -0 ${ELEVATE} apt-get -q -o Dpkg::Progress-Fancy=\"1\" -y install --only-upgrade\n}\n\n# Update only the added repo (during install action)\nfunction update_only_repo() {\n    fancy_message info \"Updating: /etc/apt/sources.list.d/${APT_LIST_NAME}.list\"\n    ${ELEVATE} apt-get update -o Dir::Etc::sourcelist=\"sources.list.d/${APT_LIST_NAME}.list\" \\\n        -o Dir::Etc::sourceparts=\"-\" -o APT::Get::List-Cleanup=\"0\"\n}\n\nfunction install_apt() {\n    ((PACKAGE_INSTALLATION_TRIES++))\n    add_apt_repo\n    if ! update_only_repo; then\n        remove_repo --remove-repo --quiet\n        return\n    fi\n\n    if ! package_is_installed \"${APP}\"; then\n        if ! eula; then\n            remove_repo --remove-repo --quiet\n            return\n        fi\n        if ! ${ELEVATE} apt-get -q=2 -o Dpkg::Progress-Fancy=\"1\" -y install \"${APP}\"; then\n            remove_repo --remove-repo --quiet\n            return\n        fi\n        add_installed\n        maint_supported_cache\n    else\n        if [ \"${ACTION}\" == \"reinstall\" ]; then\n            if ! ${ELEVATE} apt-get -q=2 -o Dpkg::Progress-Fancy=\"1\" -y --reinstall --allow-downgrades install \"${APP}\"; then\n                return\n            fi\n        else\n            fancy_message info \"${APP} is up to date.\"\n        fi\n    fi\n    ((PACKAGE_INSTALLATION_COUNT++))\n}\n\nfunction install_ppa() {\n    ppa_to_apt\n    install_apt\n}\n\nfunction install_deb() {\n    local URL=\"${1}\"\n    local FILE=\"${FILE:-${URL##*/}}\"\n\n    local STATUS=\"\"\n    ((PACKAGE_INSTALLATION_TRIES++))\n\n    if ! package_is_installed \"${APP}\"; then\n        if ! eula; then\n            return\n        fi\n        if ! download_deb \"${URL}\" \"${FILE}\"; then\n            return\n        fi\n        if ! ${ELEVATE} apt-get -q=2 -o Dpkg::Progress-Fancy=\"1\" -y install \"${CACHE_DIR}/${FILE}\"; then\n            return\n        fi\n        add_installed\n        maint_supported_cache\n    else\n        if [ \"${ACTION}\" == \"reinstall\" ]; then\n            if ! download_deb \"${URL}\" \"${FILE}\"; then\n                return\n            fi\n            if ! ${ELEVATE} apt-get -q=2 -o Dpkg::Progress-Fancy=\"1\" -y --reinstall --allow-downgrades install \"${CACHE_DIR}/${FILE}\"; then\n                return\n            fi\n        elif dpkg --compare-versions \"${VERSION_PUBLISHED}\" gt \"${VERSION_INSTALLED}\"; then\n            if ! download_deb \"${URL}\" \"${FILE}\"; then\n                return\n            fi\n            if ! ${ELEVATE} apt-get -q=2 -o Dpkg::Progress-Fancy=\"1\" -y install \"${CACHE_DIR}/${FILE}\"; then\n                return\n            fi\n        elif [ -z \"${FILE}\" ]; then\n            fancy_message warn \"${APP} update check failed, moving on to next package.\"\n        else\n            fancy_message info \"${FILE} is up to date.\"\n        fi\n    fi\n    ((PACKAGE_INSTALLATION_COUNT++))\n    if [ -f \"${CACHE_DIR}/${FILE}\" ]; then\n        ${ELEVATE} rm \"${CACHE_DIR}/${FILE}\" 2>/dev/null\n    fi\n}\n\nfunction remove_deb() {\n    local APP=\"${1}\"\n    local REMOVE=\"${2:-remove}\"\n    local FILE=\"${FILE:-${URL##*/}}\"\n    local STATUS=\"\"\n\n    if package_is_installed \"${APP}\" || [[ \" ${DEPRECATED_INSTALLED[*]} \" =~ \" ${APP} \" ]]; then\n        STATUS=$(dpkg-query -Wf '${Status}' \"${APP}\")\n        if [ \"${STATUS}\" == \"deinstall ok config-files\" ]; then\n            REMOVE=\"purge\"\n        fi\n        ${ELEVATE} apt-get -q -y --autoremove \"${REMOVE}\" \"${APP}\"\n        remove_installed \"${APP}\"\n        maint_supported_cache\n    else\n        fancy_message info \"${APP} is not installed.\"\n    fi\n\n    # Remove repos/PPA/key even if the app is not installed.\n    case \"${METHOD}\" in\n        direct|github|gitlab|website)\n            if [ -f \"${CACHE_DIR}/${FILE}\" ]; then\n                fancy_message info \"Removing ${CACHE_DIR}/${FILE}\"\n                ${ELEVATE} rm \"${CACHE_DIR}/${FILE}\" 2>/dev/null\n            fi\n            ;;\n        apt|ppa)\n            remove_repo \"${3}\";;\n    esac\n\n}\n\nfunction version_deb() {\n    if package_is_installed \"${APP}\"; then\n        dpkg-query -Wf '${Version}' \"${APP}\" 2> /dev/null\n        # else empty output\n    fi\n}\n\nfunction info_deb() {\n    local INSTALLED=\"${VERSION_INSTALLED:-No}\"\n    case \"${METHOD}\" in\n        (direct|github|gitlab|website)\n            printf '%s\\n' \"${PRETTY_NAME}\"\n            printf '  %s:\\t%s\\n' Package \"${APP}\" Repository \"${APP_SRC}\" Updater deb-get Installed \"${INSTALLED}\" Published \"${VERSION_PUBLISHED}\" Architecture \"${ARCHS_SUPPORTED}\" Download \"${URL}\" Website \"${WEBSITE}\" Summary \"${SUMMARY}\";;\n        (apt)\n            printf '%s\\n' \"${PRETTY_NAME}\"\n            printf '  %s:\\t%s\\n' Package \"${APP}\" Repository \"${APP_SRC}\" Updater apt Installed \"${INSTALLED}\" Architecture \"${ARCHS_SUPPORTED}\" Repository \"${APT_REPO_URL}\" Website \"${WEBSITE}\" Summary \"${SUMMARY}\";;\n        (ppa)\n            printf '%s\\n' \"${PRETTY_NAME}\"\n            printf '  %s:\\t%s\\n' Package \"${APP}\" Repository \"${APP_SRC}\" Updater apt Installed \"${INSTALLED}\" Architecture \"${ARCHS_SUPPORTED}\" Launchpad \"${PPA}\" Website \"${WEBSITE}\" Summary \"${SUMMARY}\";;\n    esac\n}\n\nfunction validate_deb() {\n    local FULL_APP=\"${1}\"\n    export APP_SRC=${FULL_APP%/*} APP=${FULL_APP##*/}\n    export DEFVER=\"\"\n    export ASC_KEY_URL=\"\" GPG_KEY_URL=\"\" GPG_KEY_ID=\"\"\n    export APT_LIST_NAME=\"${APP}\" APT_REPO_URL=\"\" APT_REPO_OPTIONS=\"\" PPA=\"\"\n    export ARCHS_SUPPORTED=\"amd64\" CODENAMES_SUPPORTED=\"\"\n    export METHOD=\"direct\"\n    export EULA=\"\"\n    export VERSION_INSTALLED=\"\" VERSION_PUBLISHED=\"\"\n    export PRETTY_NAME=\"\" SUMMARY=\"\" WEBSITE=\"\"\n    export URL=\"\"\n    export CACHE_FILE=\"\" FILE=\"\"\n\n    # Source the variables\n    if [ \"${APP_SRC}\" == \"00-builtin\" ]; then\n        deb_\"${APP}\" 2>/dev/null\n    else\n        . \"${ETC_DIR}/${APP_SRC}.d/${APP}\" 2>/dev/null\n    fi\n    if [[ \" ${ARCHS_SUPPORTED} \" =~ \" ${HOST_ARCH} \" ]] && { [ -z \"${CODENAMES_SUPPORTED}\" ] || [[ \" ${CODENAMES_SUPPORTED} \" =~ \" ${UPSTREAM_CODENAME} \" ]]; } && { [ \"${METHOD}\" != ppa ] || [ \"${UPSTREAM_ID}\" == ubuntu ]; }; then\n\n        if [ -z \"${DEFVER}\" ] || [ -z \"${PRETTY_NAME}\" ] || [ -z \"${SUMMARY}\" ] || [ -z \"${WEBSITE}\" ]; then\n            fancy_message error \"Missing required information of package ${APP}:\"\n            printf >&2 '%s\\n' \"DEFVER=${DEFVER}\" \"PRETTY_NAME=${PRETTY_NAME}\" \"SUMMARY=${SUMMARY}\" \"WEBSITE=${WEBSITE}\"\n            return 1\n        fi\n        VERSION_INSTALLED=$(version_deb)\n        if [ -n \"${APT_REPO_URL}\" ]; then\n            METHOD=\"apt\"\n            if [ \"${ACTION}\" != \"prettylist\" ]; then\n                if [ -z \"${ASC_KEY_URL}\" ] && [ -z \"${GPG_KEY_URL}\" ] && [ -z \"${GPG_KEY_ID}\" ]; then\n                    fancy_message error \"Missing required information of apt package ${APP}:\"\n                    printf >&2 '%s\\n' \"ASC_KEY_URL=${ASC_KEY_URL}\" \"GPG_KEY_URL=${GPG_KEY_URL}\" \"GPG_KEY_ID=${GPG_KEY_ID}\"\n                    return 1\n                fi\n                if [ -n \"${ASC_KEY_URL}\" ] && [ -n \"${GPG_KEY_URL}\" ]; then\n                    fancy_message error \"Conflicting repository key types for apt package ${APP}:\"\n                    printf >&2 '%s\\n' \"ASC_KEY_URL=${ASC_KEY_URL}\" \"GPG_KEY_URL=${GPG_KEY_URL}\" \"GPG_KEY_ID=${GPG_KEY_ID}\"\n                    return 1\n                fi\n                if [ -n \"${GPG_KEY_URL}\" ] && [ -n \"${GPG_KEY_ID}\" ]; then\n                    fancy_message error \"Conflicting repository key types for apt package ${APP}:\"\n                    printf >&2 '%s\\n' \"ASC_KEY_URL=${ASC_KEY_URL}\" \"GPG_KEY_URL=${GPG_KEY_URL}\" \"GPG_KEY_ID=${GPG_KEY_ID}\"\n                    return 1\n                fi\n                if [ -n \"${ASC_KEY_URL}\" ] && [ -n \"${GPG_KEY_ID}\" ]; then\n                    fancy_message error \"Conflicting repository key types for apt package ${APP}:\"\n                    printf >&2 '%s\\n' \"ASC_KEY_URL=${ASC_KEY_URL}\" \"GPG_KEY_URL=${GPG_KEY_URL}\" \"GPG_KEY_ID=${GPG_KEY_ID}\"\n                    return 1\n                fi\n            fi\n        elif [ -n \"${PPA}\" ]; then\n            METHOD=\"ppa\"\n        else\n            # If the method is github and the cache file is empty, ignore the package\n            # The GitHub API is rate limit has likely been reached\n            if [ \"${METHOD}\" == github ] && [ ! -s \"${CACHE_FILE}\" ]; then\n                if ! [[ ' prettylist remove purge ' =~ \" ${ACTION} \" ]]; then\n                    fancy_message warn \"Cached file ${CACHE_FILE} is empty or missing.\"\n                    ${ELEVATE} rm \"${CACHE_FILE}\" 2>/dev/null\n                fi\n            fi\n\n            if { { [[ ' github website ' =~ \" ${METHOD} \" ]] && [ -s \"${CACHE_FILE}\" ]; } || [ \"${METHOD}\" == direct ]; } &&\n            ! [[ ' prettylist remove purge ' =~ \" ${ACTION} \" ]] &&\n            { [ -z \"${URL}\" ] || [ -z \"${VERSION_PUBLISHED}\" ]; }; then\n                fancy_message error \"Missing required information of ${METHOD} package ${APP}:\"\n                printf >&2 '%s\\n' \"URL=${URL}\" \"VERSION_PUBLISHED=${VERSION_PUBLISHED}\"\n                return 1\n            fi\n        fi\n    elif [ -n \"${PPA}\" ]; then\n        METHOD=\"ppa\"\n    else\n        # If the method is github and the cache file is empty, ignore the package\n        # The GitHub API is rate limit has likely been reached\n        if [ \"${METHOD}\" == github ] && [ ! -s \"${CACHE_FILE}\" ]; then\n            if ! [[ ' prettylist remove purge ' =~ \" ${ACTION} \" ]]; then\n                fancy_message warn \"Cached file ${CACHE_FILE} is empty or missing.\"\n                ${ELEVATE} rm \"${CACHE_FILE}\" 2>/dev/null\n            fi\n        fi\n\n        if { { [[ ' github website gitlab ' =~ \" ${METHOD} \" ]] && [ -s \"${CACHE_FILE}\" ]; } || [ \"${METHOD}\" == direct ]; } &&\n           ! [[ ' prettylist remove purge ' =~ \" ${ACTION} \" ]] &&\n           { [ -z \"${URL}\" ] || [ -z \"${VERSION_PUBLISHED}\" ]; } &&\n           { [ -z \"${ARCHS_SUPPORTED}\" ] || [[ \" ${ARCHS_SUPPORTED} \" =~ \" ${HOST_ARCH} \" ]]; } &&\n           { [ -z \"${CODENAMES_SUPPORTED}\" ] || [[ \" ${CODENAMES_SUPPORTED} \" =~ \" ${UPSTREAM_CODENAME} \" ]]; }; then\n            fancy_message error \"Missing required information of ${METHOD} package ${APP}:\"\n            printf >&2 '%s\\n' \"URL=${URL}\" \"VERSION_PUBLISHED=${VERSION_PUBLISHED}\"\n            return 1\n        fi\n    fi\n    return 0\n}\n\nfunction list_debs() {\n    if [ \"${1}\" == --include-unsupported ]; then\n        case \"${2}\" in\n        (--raw)\n            printf '%s\\n' \"${APPS[@]##*/}\"\n            ;;\n        (--installed)\n            printf '%s\\n' \"${INSTALLED_APPS[@]}\"\n            ;;\n        (--not-installed)\n            printf '%s\\n' \"${APPS[@]##*/}\" | comm -23  - <(printf '%s\\n' \"${INSTALLED_APPS[@]}\")\n            ;;\n        (*)\n            local PAD='                              '\n            for FULL_APP in \"${APPS[@]}\"; do\n                local APP=${FULL_APP##*/}\n                if package_is_installed \"${APP}\"; then\n                    printf '%s %s [ installed ]\\n' \"${APP}\" \"${PAD:${#APP}}\"\n                else\n                    printf '%s\\n' \"${APP}\"\n                fi\n            done\n        esac\n    else\n        if [ -f \"${CACHE_DIR}\"/supported.list ] ; then\n            case \"${2}\" in\n            (--raw)\n                list_debs --include-unsupported --raw | comm --nocheck-order -12 ${CACHE_DIR}/supported_apps.list -\n                ;;\n            (--installed)\n                # these don't have the [installed] tag so need a similar file to join\n                list_debs --include-unsupported --installed | comm  --nocheck-order -12 ${CACHE_DIR}/supported_apps.list -\n                ;;\n            (--not-installed)\n                list_debs --include-unsupported --not-installed | comm --nocheck-order -12 ${CACHE_DIR}/supported_apps.list -\n                ;;\n            (--only-unsupported)\n                list_debs --include-unsupported --raw | comm --nocheck-order -13 ${CACHE_DIR}/supported_apps.list -\n                ;;\n            (*)\n                # this has [ installed ] tags\n                list_debs --include-unsupported  | comm --nocheck-order -12 ${CACHE_DIR}/supported.list -\n                ;;\n            esac\n        else\n            #elevate_privs\n            # because we need to update the cache files this one slow time\n            for FULL_APP in \"${APPS[@]}\"; do\n                if validate_deb \"${FULL_APP}\"; then\n                    if [[ \" ${ARCHS_SUPPORTED} \" =~ \" ${HOST_ARCH} \" ]] && { [ -z \"${CODENAMES_SUPPORTED}\" ] || [[ \" ${CODENAMES_SUPPORTED} \" =~ \" ${UPSTREAM_CODENAME} \" ]]; } && { [ \"${METHOD}\" != ppa ] || [ \"${UPSTREAM_ID}\" == ubuntu ]; }; then\n                        case \"${2}\" in\n                        (--raw)\n                            printf '%s\\n' \"${APP}\"\n                            ;;\n                        (--installed)\n                            if package_is_installed \"${APP}\"; then\n                                printf '%s\\n' \"${APP}\"\n                            fi\n                            ;;\n                        (--not-installed)\n                            if ! package_is_installed \"${APP}\"; then\n                                printf '%s\\n' \"${APP}\"\n                            fi\n                            ;;\n                        (*)\n                            if package_is_installed \"${APP}\"; then\n                                local PAD='                              '\n                                printf \"%s %s [ installed ]\\n\" \"${APP}\" \"${PAD:${#APP}}\"\n                            else\n                                printf '%s\\n' \"${APP}\"\n                            fi\n                            ;;\n                        esac\n                    fi\n                fi\n\n            done\n        fi\n    fi\n}\n\nfunction prettylist_debs() {\n    local REPO=\"${1:-01-main}\"\n    local ICON=\"\"\ncat <<\"EOMSG\"\n| Source   | Package Name   | Description   |\n| :------: | :------------- | :------------ |\nEOMSG\n    for FULL_APP in \"${APPS[@]}\"; do\n        validate_deb \"${FULL_APP}\"\n        if [ \"${APP_SRC}\" == \"${REPO}\" ] || { [ \"${REPO}\" == \"01-main\" ] && [ \"${APP_SRC}\" == \"00-builtin\" ]; }; then\n            case \"${METHOD}\" in\n                apt)    ICON=\"debian.png\";;\n                github) ICON=\"github.png\";;\n                gitlab) ICON=\"gitlab.png\";;\n                ppa)    ICON=\"launchpad.png\";;\n                *)      ICON=\"direct.png\";;\n            esac\n            echo \"| [<img src=\\\"../.github/${ICON}\\\" align=\\\"top\\\" width=\\\"20\\\" />](${WEBSITE}) | \"'`'\"${APP}\"'`'\" | <i>${SUMMARY}</i> |\"\n        fi\n    done\n}\n\nfunction csvlist_debs() {\n    local REPO=\"${1:-01-main}\"\n    for FULL_APP in \"${APPS[@]}\"; do\n        if validate_deb \"${FULL_APP}\"; then\n            if [ \"${APP_SRC}\" == \"${REPO}\" ] || { [ \"${REPO}\" == \"01-main\" ] && [ \"${APP_SRC}\" == \"00-builtin\" ]; }; then\n                echo \"\\\"${APP}\\\",\\\"${PRETTY_NAME}\\\",\\\"${VERSION_INSTALLED}\\\",\\\"${ARCHS_SUPPORTED}\\\",\\\"${METHOD}\\\",\\\"${SUMMARY}\\\"\"\n            fi\n        fi\n    done\n}\n\nfunction update_debs() {\n    local STATUS=\"\"\n    update_apt\n    for APP in \"${INSTALLED_APPS[@]}\"; do\n        validate_deb \"${APPNAME2FULL[$APP]}\"\n        if [ \"${METHOD}\" == \"direct\" ] || [ \"${METHOD}\" == \"github\" ] || [ \"${METHOD}\" == \"gitlab\" ] || [ \"${METHOD}\" == \"website\" ]; then\n            STATUS=$(dpkg-query -Wf '${Status}' \"${APP}\")\n            if [ \"${STATUS}\" == \"install ok installed\" ] && dpkg --compare-versions \"${VERSION_PUBLISHED}\" gt \"${VERSION_INSTALLED}\"; then\n                fancy_message info \"${APP} (${VERSION_INSTALLED}) has an update pending. ${VERSION_PUBLISHED} is available.\"\n            fi\n        fi\n    done\n}\n\nfunction upgrade_debs() {\n    local STATUS=\"\"\n    if [[ \" $* \" != *' --dg-only '* ]] ; then\n        upgrade_apt\n    else\n        upgrade_only_dg\n    fi\n    for APP in \"${INSTALLED_APPS[@]}\"; do\n        validate_deb \"${APPNAME2FULL[$APP]}\"\n        if [ \"${METHOD}\" == \"direct\" ] || [ \"${METHOD}\" == \"github\" ]|| [ \"${METHOD}\" == \"gitlab\" ] || [ \"${METHOD}\" == \"website\" ]; then\n            STATUS=$(dpkg-query -Wf '${Status}' \"${APP}\")\n            if [ \"${STATUS}\" == \"install ok installed\" ]; then\n                install_deb \"${URL}\"\n            fi\n        fi\n    done\n}\n\nfunction init_repos() {\n    if [ ! -e \"${ETC_DIR}/01-main.repo\" ]; then\n        ${ELEVATE} tee \"${ETC_DIR}/01-main.repo\" <<<\"${MAIN_REPO_URL}\" >/dev/null\n    fi\n\n    for REPO in $(find \"${ETC_DIR}\" -maxdepth 1 -name \"*.repo\" ! -name 00-builtin.repo ! -name 99-local.repo -type f -printf \"%f\\n\" | sed \"s/.repo$//\"); do\n        if [ ! -e \"${ETC_DIR}/${REPO}.d\" ]; then\n            ${ELEVATE} mkdir \"${ETC_DIR}/${REPO}.d\" 2>/dev/null\n            ${ELEVATE} chmod 755 \"${ETC_DIR}/${REPO}.d\" 2>/dev/null\n        fi\n    done\n}\n\nfunction refresh_supported_cache_lists() {\n    # WARN: this function must run in a subshell\n    local lockfile=${CACHE_DIR}/updating_supported.lock\n    if [ -f \"$lockfile\" ]; then\n        pgrep -f \"$DEBGET_BIN update\"\n        if [ $? ]; then\n            # pgrep returned 1 (command not found), delete lockfile and continue\n            fancy_message warn \"Lock file found, but job is not running. Deleting $lockfile, cache update continues.\"\n            ${ELEVATE} rm $lockfile\n        else\n            # pgrep returned 0 (command found), do nothing and return\n            fancy_message warn \"Cannot update cache of supported apps: $lockfile found (job still running?)\"\n            return 0\n        fi\n    fi\n\n    trap \"trap - EXIT; ${ELEVATE} rm -f \\\"$lockfile\\\"\" EXIT\n    ${ELEVATE} touch \"$lockfile\"\n    ${ELEVATE} rm -f \"${CACHE_DIR}/supported.list\" \"${CACHE_DIR}/supported_apps.list\"\n    fancy_message info \"Updating cache of supported apps in the background\"\n    list_debs | grep -v -e '^[[:space:]][[:space:]]*\\[' | ${ELEVATE} tee \"${CACHE_DIR}/supported.list.tmp\" >/dev/null\n    ${ELEVATE} mv \"${CACHE_DIR}/supported.list.tmp\" \"${CACHE_DIR}/supported.list\"\n    # # belt and braces no longer needed\n    #${ELEVATE} sed -i '/[+]/d' ${CACHE_DIR}/supported.list.tmp\n    cut -d\" \" -f 1 \"${CACHE_DIR}/supported.list\" | sort -u | ${ELEVATE} tee \"${CACHE_DIR}/supported_apps.list\" >/dev/null\n}\n\nfunction update_repos() {\n    local REPO_URL=\"\"\n    # preserve current behaviour for now but allow modification via env\n    local CURL_OPTS=\"--disable --progress-bar\"\n    local WGET_VERBOSITY=\"--quiet\"\n\n    if [[ \" $* \" == *' --quiet'* ]]  ; then\n         CURL_OPTS=\"--disable --show-error --silent\"\n    fi\n\n    for REPO in $(find \"${ETC_DIR}\" -maxdepth 1 -name \"*.repo\" ! -name 00-builtin.repo ! -name 99-local.repo -type f -printf \"%f\\n\" | sed \"s/.repo$//\"); do\n        # export REPO ETC_DIR ELEVATE  # no longer needed, `| bash -` replaced with `eval`\n        fancy_message info \"Updating ${ETC_DIR}/${REPO}\"\n        REPO_URL=\"$(head -n 1 \"${ETC_DIR}/${REPO}.repo\")\"\n        # shellcheck disable=SC2086\n        ${ELEVATE} wget ${WGET_VERBOSITY} ${WGET_TIMEOUT} \"${REPO_URL}/manifest\" -O \"${ETC_DIR}/${REPO}.repo.tmp\" && ${ELEVATE} mv \"${ETC_DIR}/${REPO}.repo.tmp\" \"${ETC_DIR}/${REPO}.repo\"\n\n        # ${ELEVATE} rm \"${ETC_DIR}/${REPO}.d/* # we currently leave old litter : either <- this or maybe rm older ones\n        # although so long as manifest is good we are OK\n        # Faster by some margin if we are hitting github\n        # Otherwise revert to old-style for a bespoke hosted repo\n\n        pushd \"${ETC_DIR}/${REPO}.d\" >/dev/null\n        (eval \"$(\n        awk -F/ '/github/  {print \"# fetching github repo\";\n                            print \"GITREPO=\"$4\"/\"$5;\\\n                            print \"BRANCH=\"$6;\\\n                            print \"curl ${CURL_OPTS} -L https://api.github.com/repos/${GITREPO}/tarball/${BRANCH} | ${ELEVATE} tar zx --wildcards \\\"*/${REPO}*/packages/*\\\"   --strip-components=3\"}\n                ! /github/ {print \"# fetching non-github repo\";\n                            print \"tail -n +2 \\\"${ETC_DIR}/${REPO}.repo\\\" | sed \\\"s/^#//\\\" | ${ELEVATE} sort -u -o \\\"${ETC_DIR}/${REPO}.repo.tmp\\\"\";\\\n                            print \"${ELEVATE} wget ${WGET_VERBOSITY} ${WGET_TIMEOUT} -N -B \\\"${REPO_URL}/packages/\\\" -i \\\"${ETC_DIR}/${REPO}.repo.tmp\\\" -P \\\"${ETC_DIR}/${REPO}.d\\\"\";\n                            print \"${ELEVATE} rm \\\"${ETC_DIR}/${REPO}.repo.tmp\\\"\"\n                } '\\\n                <<<\"${REPO_URL}\"\n        )\")\n\n        popd >/dev/null\n    done\n    refresh_supported_cache_lists &\n}\n\nfunction list_repo_apps() {\n    if [ -d \"${ETC_DIR}\" ]; then\n        find \"${ETC_DIR}\" -maxdepth 1 -name '*.repo' ! -name 00-builtin.repo ! -name 99-local.repo -type f -printf '%f\\n' |\n        sort -r |\n        while IFS= read -r REPO; do\n            # WARN: repos can't contain '/' or '\\', which the rest of the code assumes anyway\n            sed -n -e \"1d; /^#/d; s/^/${REPO%.repo}\\//p\" <\"${ETC_DIR}/${REPO}\" | sort -u\n        done\n    fi\n}\n\nfunction populate_deprecated_apps() {\n    declare -ga DEPRECATED_APPS=() DEPRECATED_INSTALLED=()\n    if [ -d \"${ETC_DIR}\" ]; then\n        mapfile -t DEPRECATED_APPS < <(\n        find \"${ETC_DIR}\" -maxdepth 1 -name \"*.repo\" ! -name 00-builtin.repo ! -name 99-local.repo -type f -printf \"%f\\n\" |\n        sort -r |\n        while IFS= read -r REPO; do\n            # sort -t ... -u may fail\n            sed -n -e \"1d; s/^#/${REPO%.repo}\\//p\" <\"${ETC_DIR}/${REPO}\" | sort -t / -k 2 | uniq\n        done\n        )\n        if [ \"${#DEPRECATED_APPS[@]}\" -gt 0 ]; then\n            mapfile -t DEPRECATED_INSTALLED < <(dpkg-query 2>/dev/null -Wf '${db:Status-abbrev}${Package}\\n' \"${DEPRECATED_APPS[@]##*/}\" | sed -n -e 's/^ii //p')\n        fi\n    fi\n    readonly DEPRECATED_INSTALLED\n}\n\nfunction list_local_apps() {\n    if [ -d \"${ETC_DIR}/99-local.d\" ]; then\n        find \"${ETC_DIR}/99-local.d\" -maxdepth 1 -type f -printf '99-local/%f\\n'\n    fi\n}\n\nfunction print_etc_overrides() {\n    if [ \"${#LOCAL_APPS[@]}\" -gt 0 ] || [ \"${#APP_CONFLICTS[@]}\" -gt 0 ]; then\n        local DEB_GET_SCRIPT_FILE=\"${0}\"\n        local NUM_OLDER_CONFLICTS=0\n        for APP in \"${APP_CONFLICTS[@]}\"; do\n            local FULL_APP=${APPNAME2FULL[$APP]}\n            fancy_message warn \"Conflict detected, duplicate declaration of package ${APP}, using declaration from ${FULL_APP%/*}\"\n\n            if [[ \" ${LOCAL_APPS[*]} \" =~ \" ${FULL_APP} \" ]] && [ \"${DEB_GET_SCRIPT_FILE}\" -nt \"${ETC_DIR}/99-local.d/${APP}\" ]; then\n                ((NUM_OLDER_CONFLICTS++))\n            fi\n        done\n\n        if [ \"${NUM_OLDER_CONFLICTS}\" -gt 0 ]; then\n            fancy_message recommend \"Duplicate entr(ies) already merged upstream (if no longer needed), must be manually removed from your ${ETC_DIR}/99-local.d folder.\"\n        fi\n\n        for FULL_APP in \"${LOCAL_APPS[@]}\"; do\n            fancy_message info \"Including local package ${FULL_APP##*/}\"\n        done\n\n        if [ \"${#LOCAL_APPS[@]}\" -gt 0 ]; then\n            fancy_message recommend \"Please consider contributing back new entries, an issue (or raise a PR) directly at https://github.com/wimpysworld/deb-get/pulls\"\n        fi\n    fi\n}\n\nfunction print_deprecated() {\n    for APP in \"${DEPRECATED_INSTALLED[@]}\"; do\n        fancy_message warn \"Deprecated package ${APP} detected. It will no longer receive updates, and keeping it installed is considered unsafe.\"\n        fancy_message recommend \"Please remove it with: deb-get purge ${APP}\"\n    done\n}\n\nfunction fix_old_apps() {\n    local OLD_METHOD=\"\"\n    local OLD_APT_LIST_NAME=\"\"\n    local OLD_PPA=\"\"\n    case \"${APP}\" in\n        1password)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"1password\"\n        ;;\n        anydesk)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"anydesk-stable\"\n        ;;\n        appimagelauncher)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:appimagelauncher-team/stable\"\n        ;;\n        atom)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"atom\"\n        ;;\n        audio-recorder)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:audio-recorder/ppa\"\n        ;;\n        azure-cli)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"azure-cli\"\n        ;;\n        blanket)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:apandada1/blanket\"\n        ;;\n        brave-browser)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"brave-browser-release\"\n        ;;\n        cawbird)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"home:IBBoard:cawbird\"\n        ;;\n        chronograf)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"influxdata\"\n        ;;\n        code)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"vscode\"\n        ;;\n        copyq)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:hluk/copyq\"\n        ;;\n        cryptomator)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:sebastian-stenzel/cryptomator\"\n        ;;\n        docker-ce)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"docker\"\n        ;;\n        enpass)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"enpass\"\n        ;;\n        firefox-esr)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:mozillateam/ppa\"\n        ;;\n        foliate)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:apandada1/foliate\"\n        ;;\n        fsearch)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:christian-boxdoerfer/fsearch-stable\"\n        ;;\n        google-chrome-stable)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"google-chrome\"\n        ;;\n        google-earth-pro-stable)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"google-earth-pro\"\n        ;;\n        gpu-viewer)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:arunsivaraman/gpuviewer\"\n        ;;\n        influxdb)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"influxdata\"\n        ;;\n        influxdb2)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"influxdata\"\n        ;;\n        influxdb2-cli)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"influxdata\"\n        ;;\n        insync)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"insync\"\n        ;;\n        jellyfin)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"jellyfin\"\n        ;;\n        kapacitor)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"influxdata\"\n        ;;\n        kdiskmark)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:jonmagon/kdiskmark\"\n        ;;\n        keepassxc)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:phoerious/keepassxc\"\n        ;;\n        keybase)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"keybase\"\n        ;;\n        kopia-ui)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"kopia\"\n        ;;\n        lutris)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:lutris-team/lutris\"\n        ;;\n        microsoft-edge-stable)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"microsoft-edge\"\n        ;;\n        neo4j)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"neo4j\"\n        ;;\n        nextcloud-desktop)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:nextcloud-devs/client\"\n        ;;\n        nomad)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"nomad\"\n        ;;\n        obs-studio)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:flexiondotorg/obs-fully-loaded\"\n        ;;\n        openrazer-meta)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:openrazer/stable\"\n        ;;\n        opera-stable)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"opera-stable\"\n        ;;\n        papirus-icon-theme)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:papirus/papirus\"\n        ;;\n        plexmediaserver)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"plexmediaserver\"\n        ;;\n        polychromatic)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:polychromatic/stable\"\n        ;;\n        protonvpn)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"protonvpn-stable\"\n        ;;\n        qownnotes)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:pbek/qownnotes\"\n        ;;\n        quickemu)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:flexiondotorg/quickemu\"\n        ;;\n        quickgui)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:yannick-mauray/quickgui\"\n        ;;\n        resilio-sync)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"resilio-sync\"\n        ;;\n        retroarch)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:libretro/stable\"\n        ;;\n        signal-desktop)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"signal-xenial.list\"\n        ;;\n        skypeforlinux)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"skype-stable\"\n        ;;\n        slack-desktop)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"slack\"\n        ;;\n        softmaker-office-2021)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"softmaker\"\n        ;;\n        strawberry)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:jonaski/strawberry\"\n        ;;\n        sublime-merge)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"sublime-text\"\n        ;;\n        sublime-text)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"sublime-text\"\n        ;;\n        syncthing)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"syncthing\"\n        ;;\n        teams)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"teams\"\n        ;;\n        telegraf)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"influxdata\"\n        ;;\n        terraform)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"terraform\"\n        ;;\n        texworks)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:texworks/stable\"\n        ;;\n        typora)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"typora\"\n        ;;\n        ubuntu-make)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:lyzardking/ubuntu-make\"\n        ;;\n        ulauncher)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:agornostal/ulauncher\"\n        ;;\n        virtualbox-6.1)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"virtualbox-6.1\"\n        ;;\n        vivaldi-stable)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"vivaldi\"\n        ;;\n        wavebox)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"wavebox-stable\"\n        ;;\n        weechat)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"weechat\"\n        ;;\n        wire-desktop)\n            OLD_METHOD=\"apt\"\n            OLD_APT_LIST_NAME=\"wire-desktop\"\n        ;;\n        xemu)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:mborgerson/xemu\"\n        ;;\n        yq)\n            OLD_METHOD=\"ppa\"\n            OLD_PPA=\"ppa:rmescandon/yq\"\n        ;;\n    esac\n    if [ -n \"${OLD_METHOD}\" ]; then\n        if [ \"${OLD_METHOD}\" = apt ]; then\n            remove_old_apt_repo \"${OLD_APT_LIST_NAME}\"\n        else # ppa\n            remove_old_ppa_repo \"${OLD_PPA}\"\n        fi\n    fi\n    if [ \"${METHOD}\" = apt ]; then\n        add_apt_repo\n    elif [ \"${METHOD}\" = ppa ]; then\n        ppa_to_apt\n        add_apt_repo\n    fi\n    add_installed\n\n    if [ \"${DEFVER}\" != 1 ]; then\n        fancy_message warn \"${APP} must be manually reinstalled with \\\"deb-get reinstall ${APP}\\\", otherwise it will not be updated properly\"\n    fi\n}\n\nfunction fix_installed() {\n    local line=\"$(grep -m 1 \"^${APP} \" \"${ETC_DIR}/installed\")\"\n    local OLD_DEFVER=\"$(cut -d \" \" -f 2 <<<\"$line\")\"\n    local OLD_METHOD=\"$(cut -d \" \" -f 3 <<<\"$line\")\"\n    if [ \"${DEFVER}\" != \"${OLD_DEFVER}\" ]; then\n        remove_installed \"${APP}\"\n        if [[ \" apt ppa \" =~ \" ${OLD_METHOD} \" ]]; then\n            remove_repo --remove-repo\n        fi\n        if [ \"${METHOD}\" = apt ]; then\n            add_apt_repo\n        elif [ \"${METHOD}\" = ppa ]; then\n            ppa_to_apt\n            add_apt_repo\n        fi\n        add_installed\n        fancy_message warn \"${APP} must be manually reinstalled with \\\"deb-get reinstall ${APP}\\\", otherwise it will not be updated properly\"\n    fi\n}\n\nfunction remove_old_apt_repo() {\n    fancy_message info \"Removing /etc/apt/trusted.gpg.d/${1}.asc\"\n    ${ELEVATE} rm -f \"/etc/apt/trusted.gpg.d/${1}.asc\"\n    fancy_message info \"Removing /etc/apt/sources.list.d/${1}.list\"\n    ${ELEVATE} rm -f \"/etc/apt/sources.list.d/${1}.list\"\n}\n\nfunction remove_old_ppa_repo() {\n    local -r PPA_ADDRESS=${1#*:}\n    local -r PPA_PERSON=${PPA_ADDRESS%%/*}\n    local -r PPA_ARCHIVE=${PPA_ADDRESS#*/}\n    local -r APT_LIST_NAME=\"${PPA_PERSON}-ubuntu-${PPA_ARCHIVE}\"\n    fancy_message info \"Removing /etc/apt/trusted.gpg.d/${APT_LIST_NAME}.gpg\"\n    ${ELEVATE} rm -f \"/etc/apt/trusted.gpg.d/${APT_LIST_NAME}.gpg\"\n    ${ELEVATE} rm -f \"/etc/apt/trusted.gpg.d/${APT_LIST_NAME}.gpg~\"\n    fancy_message info \"Removing /etc/apt/sources.list.d/${APT_LIST_NAME}-${UPSTREAM_CODENAME}.list\"\n    ${ELEVATE} rm -f \"/etc/apt/sources.list.d/${APT_LIST_NAME}-${UPSTREAM_CODENAME}.list\"\n}\n\nfunction remove_repo() {\n    local count=\"\"\n    if [ -e \"${ETC_DIR}/aptrepos\" ]; then\n        count=\"$(grep -m 1 \"^${APT_LIST_NAME} \" \"${ETC_DIR}/aptrepos\" | cut -d \" \" -f 2)\"\n    fi\n    if [ -z \"${count}\" ]; then\n        count=0\n    fi\n    if [ \"${count}\" -gt 0 ]; then\n        ((count--))\n        ${ELEVATE} sed -i -E \"/^${APT_LIST_NAME} [0-9]+/d\" \"${ETC_DIR}/aptrepos\"\n        ${ELEVATE} tee -a \"${ETC_DIR}/aptrepos\" <<<\"${APT_LIST_NAME} ${count}\" >/dev/null\n    fi\n    if [ \"${1}\" == --remove-repo ]; then\n        if [ \"${count}\" -eq 0 ]; then\n            if [ \"${2}\" != --quiet ]; then\n                fancy_message info \"Removing /usr/share/keyrings/${APT_LIST_NAME}-archive-keyring.gpg\"\n            fi\n            ${ELEVATE} rm -f \"/usr/share/keyrings/${APT_LIST_NAME}-archive-keyring.gpg\"\n            if [ \"${2}\" != --quiet ]; then\n                fancy_message info \"Removing /etc/apt/sources.list.d/${APT_LIST_NAME}.list\"\n            fi\n            ${ELEVATE} rm -f \"/etc/apt/sources.list.d/${APT_LIST_NAME}.list\"\n            if [ -e \"${ETC_DIR}/aptrepos\" ]; then\n                ${ELEVATE} sed -i -E \"/^${APT_LIST_NAME} [0-9]+/d\" \"${ETC_DIR}/aptrepos\"\n            fi\n        elif [ \"${2}\" != --quiet ]; then\n            fancy_message warn \"/etc/apt/sources.list.d/${APT_LIST_NAME}.list was not removed because other packages depend on it.\"\n        fi\n    fi\n}\n\nfunction add_apt_repo() {\n    local count=\"\"\n    if [ -e \"${ETC_DIR}/aptrepos\" ]; then\n        count=\"$(grep -m 1 \"^${APT_LIST_NAME} \" \"${ETC_DIR}/aptrepos\" | cut -d \" \" -f 2)\"\n    fi\n    if [ -z \"${count}\" ]; then\n        count=0\n    fi\n    if [ \"${count}\" -eq 0 ] && [ -e \"/etc/apt/sources.list.d/${APT_LIST_NAME}.list\" ]; then\n        ((count++))\n    fi\n    ((count++))\n    if [ -e \"${ETC_DIR}/aptrepos\" ]; then\n        ${ELEVATE} sed -i -E \"/^${APT_LIST_NAME} [0-9]+/d\" \"${ETC_DIR}/aptrepos\"\n    fi\n    ${ELEVATE} tee -a \"${ETC_DIR}/aptrepos\" <<<\"${APT_LIST_NAME} ${count}\" >/dev/null\n    if [ ! -d /usr/share/keyrings ]; then\n        ${ELEVATE} mkdir -p /usr/share/keyrings 2>/dev/null\n    fi\n    if [ ! -e \"/usr/share/keyrings/${APT_LIST_NAME}-archive-keyring.gpg\" ]; then\n        if [ -n \"${ASC_KEY_URL}\" ]; then\n            # shellcheck disable=SC2086\n            ${ELEVATE} wget ${WGET_VERBOSITY} ${WGET_TIMEOUT} \"${ASC_KEY_URL}\" -O \"/usr/share/keyrings/${APT_LIST_NAME}-archive-keyring\"\n            ${ELEVATE} gpg --yes --dearmor \"/usr/share/keyrings/${APT_LIST_NAME}-archive-keyring\"\n            ${ELEVATE} rm \"/usr/share/keyrings/${APT_LIST_NAME}-archive-keyring\"\n        elif [ -n \"${GPG_KEY_ID}\" ]; then\n            #Fetching from the keyserver will fail if root doesn't already have a .gnupg directory.\n            #This will create it if it doesn't already exist.\n            if ${ELEVATE} printenv GNUPGHOME > /dev/null && ${ELEVATE} [ ! -e \"${GNUPGHOME}\" ] || ${ELEVATE} [ ! -e \"$(${ELEVATE} printenv HOME)/.gnupg\" ] ; then\n               ${ELEVATE} gpg --list-keys\n            fi\n            ${ELEVATE} gpg --no-default-keyring --keyring /usr/share/keyrings/\"${APT_LIST_NAME}\"-archive-keyring.gpg --keyserver keyserver.ubuntu.com --recv \"${GPG_KEY_ID}\"\n        else #GPG_KEY_URL\n            # shellcheck disable=SC2086\n            ${ELEVATE} wget ${WGET_VERBOSITY} ${WGET_TIMEOUT} \"${GPG_KEY_URL}\" -O \"/usr/share/keyrings/${APT_LIST_NAME}-archive-keyring.gpg\"\n        fi\n    fi\n\n    local APT_LIST_LINE=\"deb [signed-by=/usr/share/keyrings/${APT_LIST_NAME}-archive-keyring.gpg\"\n\n    if [ -n \"${APT_REPO_OPTIONS}\" ]; then\n        APT_LIST_LINE=\"${APT_LIST_LINE} ${APT_REPO_OPTIONS}\"\n    fi\n\n    APT_LIST_LINE=\"${APT_LIST_LINE}] ${APT_REPO_URL}\"\n    ${ELEVATE} tee \"/etc/apt/sources.list.d/${APT_LIST_NAME}.list\" <<<\"${APT_LIST_LINE}\" >/dev/null\n}\n\nfunction ppa_to_apt() {\n    local -r PPA_ADDRESS=${PPA#*:}\n    local -r PPA_PERSON=${PPA_ADDRESS%%/*}\n    local -r PPA_ARCHIVE=${PPA_ADDRESS#*/}\n    export APT_REPO_URL=\"https://ppa.launchpadcontent.net/${PPA_ADDRESS}/ubuntu/ ${UPSTREAM_CODENAME} main\"\n    export ASC_KEY_URL=\"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x$(curl -s \"https://api.launchpad.net/devel/~${PPA_PERSON}/+archive/ubuntu/${PPA_ARCHIVE}\" | grep -o -E \"\\\"signing_key_fingerprint\\\": \\\"[0-9A-F]+\\\"\" | cut -d \\\" -f 4)\"\n    export APT_LIST_NAME=\"${PPA_PERSON}-ubuntu-${PPA_ARCHIVE}-${UPSTREAM_CODENAME}\"\n}\n\nfunction maint_supported_cache() {\n    # called by install and re-install when we've installed\n    # so we should be supported\n\n    if [ -f \"${CACHE_DIR}/supported.list\" ]; then\n        case \"${ACTION}\" in\n            remove|purge)\n                ${ELEVATE} sed -i \"/^${APP} /d\" \"${CACHE_DIR}/supported.list\"\n                cat \"${CACHE_DIR}/supported.list\" - <<<\"${APP}\" | ${ELEVATE} sort -t \" \" -k 1 -u -o \"${CACHE_DIR}/supported.list\"\n                ;;\n            reinstall|install)\n                local PAD='                              '\n                local cache_line=$(printf \"%s %s [ installed ]\\n\" \"${APP}\" \"${PAD:${#APP}}\")\n                # # First remove the bare entry\n                ${ELEVATE} sed -i -e '/^${APP}$/d' \"${CACHE_DIR}/supported.list\"\n                # Replace it with a flagged one\n                cat \"${CACHE_DIR}/supported.list\" - <<<\"${cache_line}\" | ${ELEVATE} sort -t \" \" -k 1 -u -o \"${CACHE_DIR}/supported.list\"\n                # should be there but safest to be sure\n                grep -q -w \"${APP}$\" \"${CACHE_DIR}\"/supported_apps.list || \\\n                cat ${CACHE_DIR}/supported_apps.list - <<<\"${APP}\" | ${ELEVATE} sort -t \" \" -k 1 -u -o ${CACHE_DIR}/supported_apps.list\n                ;;\n        esac\n    fi\n}\n\nfunction add_installed() {\n    local line=\"${APP} ${DEFVER} ${METHOD}\"\n    cat \"${ETC_DIR}/installed\" - <<< \"${line}\" | ${ELEVATE} sort -t \" \" -k 1 -u -o \"${ETC_DIR}/installed\"\n}\n\nfunction remove_installed() {\n    ${ELEVATE} sed -i \"/^${1} /d\" \"${ETC_DIR}/installed\"\n}\n\nfunction list_apps() {\n    list_local_apps; list_repo_apps\n    declare -F | sed -n -e 's|declare -f deb_|00-builtin/|gp'\n}\n\nfunction populate_apps() {\n    declare -ga APPS\n    declare -gA APPNAME2FULL\n    local APP\n\n    mapfile -t APPS < <(list_apps | sort -t / -k 2 -u)\n    # set, unless key already exists (only first match counts)\n    for APP in \"${APPS[@]}\"; do : \"${APPNAME2FULL[\"${APP##*/}\"]:=${APP}}\"; done\n}\n\nfunction deb_deb-get() {\n    DEFVER=1\n    ARCHS_SUPPORTED=\"amd64 arm64 armhf i386\"\n    get_github_releases \"wimpysworld/deb-get\"\n    if [ \"${ACTION}\" != \"prettylist\" ]; then\n        URL=\"$(grep \"browser_download_url.*\\.deb\\\"\" \"${CACHE_FILE}\" | head -n1 | cut -d'\"' -f4)\"\n        VERSION_PUBLISHED=\"$(echo \"${URL}\" | cut -d'_' -f2)\"\n    fi\n    PRETTY_NAME=\"deb-get\"\n    WEBSITE=\"https://github.com/wimpysworld/deb-get\"\n    SUMMARY=\"'apt-get' functionality for .debs published in 3rd party repositories or via direct download package.\"\n}\n\nfunction parse_machine() {\nexport HOST_CPU=\"$(uname -m)\"\ncase \"${HOST_CPU}\" in\n  aarch64|armv7l|x86_64) export HOST_ARCH=\"$(dpkg --print-architecture)\";;\n  *) fancy_message fatal \"${HOST_CPU} is not supported. Quitting.\";;\nesac\n\nOS_ID=$(lsb_release --id --short)\ncase \"${OS_ID}\" in\n  Debian) OS_ID_PRETTY=\"Debian\";;\n  elementary|Elementary) OS_ID_PRETTY=\"elementary OS\";;\n  Linuxmint) OS_ID_PRETTY=\"Linux Mint\";;\n  Neon) OS_ID_PRETTY=\"KDE Neon\";;\n  Pop) OS_ID_PRETTY=\"Pop!_OS\";;\n  Ubuntu) OS_ID_PRETTY=\"Ubuntu\";;\n  Zorin) OS_ID_PRETTY=\"Zorin OS\";;\n  *)\n    OS_ID_PRETTY=\"${OS_ID}\"\n    fancy_message warn \"${OS_ID} is not supported.\"\n  ;;\nesac\n\nOS_CODENAME=$(lsb_release --codename --short)\n\nif [ -e /etc/os-release ]; then\n    OS_RELEASE=/etc/os-release\nelif [ -e /usr/lib/os-release ]; then\n    OS_RELEASE=/usr/lib/os-release\nelse\n    fancy_message fatal \"os-release not found. Quitting\"\nfi\n\nUPSTREAM_ID=\"$(sed -n -e 's/^ID=//p' \"${OS_RELEASE}\")\"\n\n# Fallback to ID_LIKE if ID was not 'ubuntu' or 'debian'\nif ! [[ ' ubuntu debian ' =~ \" ${UPSTREAM_ID} \" ]]; then\n    UPSTREAM_ID_LIKE=\"$(sed -n -e 's/^ID_LIKE=//p' \"${OS_RELEASE}\" | cut -d \\\" -f 2)\"\n\n    if [[ \" ${UPSTREAM_ID_LIKE} \" =~ \" ubuntu \" ]]; then\n        UPSTREAM_ID=ubuntu\n    elif [[ \" ${UPSTREAM_ID_LIKE} \" =~ \" debian \" ]]; then\n        UPSTREAM_ID=debian\n    else\n        fancy_message fatal \"${OS_ID_PRETTY} ${OS_CODENAME^} is not supported because it is not derived from a supported Debian or Ubuntu release.\"\n    fi\nfi\n\nlocal codename\nfor codename in UBUNTU_CODENAME DEBIAN_CODENAME VERSION_CODENAME; do\n    UPSTREAM_CODENAME=$(sed -n -e \"s/^$codename=//p\" \"${OS_RELEASE}\")\n    [ -z \"${UPSTREAM_CODENAME}\" ] || break\ndone\n\n# Debian 12+\nif [ -z \"${UPSTREAM_CODENAME}\" ] && [ -e /etc/debian_version ]; then\n    UPSTREAM_CODENAME=$(cut -d / -f 1 /etc/debian_version)\nfi\n\ncase \"${UPSTREAM_CODENAME}\" in\n    buster)   UPSTREAM_RELEASE=\"10\";;\n    bullseye) UPSTREAM_RELEASE=\"11\";;\n    bookworm) UPSTREAM_RELEASE=\"12\";;\n    trixie)   UPSTREAM_CODENAME=\"13\";;\n    sid)      UPSTREAM_RELEASE=\"unstable\";;\n    focal)    UPSTREAM_RELEASE=\"20.04\";;\n    jammy)    UPSTREAM_RELEASE=\"22.04\";;\n    kinetic)  UPSTREAM_RELEASE=\"22.10\";;\n    lunar)    UPSTREAM_RELEASE=\"23.04\";;\n    mantic)   UPSTREAM_RELEASE=\"23.10\";;\n    noble)    UPSTREAM_RELEASE=\"24.04\";;\n    oracular) UPSTREAM_RELEASE=\"24.10\";;\n\n    *) fancy_message fatal \"${OS_ID_PRETTY} ${OS_CODENAME^} is not supported because it is not derived from a supported Debian or Ubuntu release.\";;\nesac\n}\n\nfunction dg_action_cache() {\n        ls -lh \"${CACHE_DIR}/\"\n}\nfunction dg_action_clean() {\n        elevate_privs\n        ${ELEVATE} rm -fv \"${CACHE_DIR}\"/*.deb\n        ${ELEVATE} rm -fv \"${CACHE_DIR}\"/*.json*\n        ${ELEVATE} rm -fv \"${CACHE_DIR}\"/*.html\n        ${ELEVATE} rm -fv \"${CACHE_DIR}\"/*.txt\n\n}\nfunction dg_action_show() {\n        for APP in \"${@,,}\"; do\n            FULL_APP=${APPNAME2FULL[$APP]}\n            if [ -z \"${FULL_APP}\" ]; then\n                fancy_message error \"${APP} is not a supported application.\"\n                ACTION=\"list\"\n                list_debs \"\" --raw >&2\n                exit 1\n            fi\n            if validate_deb \"${FULL_APP}\"; then\n                info_deb\n            fi\n        done\n}\nfunction dg_action_reinstall() { dg_action_install \"$@\"; }\nfunction dg_action_install() {\n        elevate_privs\n        create_cache_dir\n        create_etc_dir\n        for APP in \"${@,,}\"; do\n            FULL_APP=${APPNAME2FULL[$APP]}\n            if [ -z \"${FULL_APP}\" ]; then\n                fancy_message error \"${APP} is not a supported application.\"\n                ACTION=\"list\"\n                list_debs \"\" --raw >&2\n                exit 1\n            fi\n            if validate_deb \"${FULL_APP}\"; then\n                if [[ \" ${ARCHS_SUPPORTED} \" != *\" ${HOST_ARCH} \"* ]]; then\n                    fancy_message fatal \"${APP} is not supported on ${HOST_ARCH}.\"\n                fi\n\n                if [ -n \"${CODENAMES_SUPPORTED}\" ] && ! [[ \" ${CODENAMES_SUPPORTED[*]} \" =~ \" ${UPSTREAM_CODENAME} \" ]]; then\n                    fancy_message fatal \"${APP} is not supported on ${OS_ID_PRETTY} ${UPSTREAM_CODENAME^}.\"\n                fi\n\n                if [ \"${METHOD}\" == \"ppa\" ] && [ \"${UPSTREAM_ID}\" != \"ubuntu\" ]; then\n                    fancy_message fatal \"${APP} cannot be installed as PPAs are not supported on distros that are not derived from Ubuntu.\"\n                fi\n\n                case \"${METHOD}\" in\n                    direct|github|gitlab|website) install_deb \"${URL}\";;\n                    apt) install_apt;;\n                    ppa) install_ppa;;\n                esac\n            fi\n        done\n}\nfunction dg_action_list() {\n        list_opt_1=\"\"\n        list_opt_2=\"\"\n        while [ -n \"${1}\" ]; do\n            if [ \"${1}\" == --include-unsupported ]; then\n                list_opt_1=--include-unsupported\n            elif [[ \" --raw --installed --not-installed --only-unsupported \" =~ \" ${1} \" ]]; then\n                list_opt_2=\"${1}\"\n            else\n                fancy_message fatal \"Unknown option supplied: ${1}\"\n            fi\n            shift\n        done\n        list_debs \"${list_opt_1}\" \"${list_opt_2}\"\n}\nfunction dg_action_prettylist() {\n        ACTION=\"prettylist\"\n        prettylist_debs \"${1}\"\n}\nfunction dg_action_csvlist() {\n        ACTION=\"prettylist\"\n        csvlist_debs \"${1}\"\n}\nfunction dg_action_purge() {\n        elevate_privs\n        opt_remove_repo=\"\"\n        if [ \"${1}\" == --remove-repo ]; then\n            opt_remove_repo=--remove-repo\n            shift\n        fi\n        for APP in \"${@,,}\"; do\n            FULL_APP=${APPNAME2FULL[$APP]}\n            if [ -z \"${FULL_APP}\" ]; then\n                FULL_APP=\"$(printf '%s\\n' \"${DEPRECATED_APPS[@]}\" | grep -m 1 \"/${APP}$\")\"\n            fi\n            if [ -z \"${FULL_APP}\" ]; then\n                fancy_message error \"${APP} is not a supported application.\"\n                ACTION=\"list\"\n                list_debs \"\" --raw >&2\n                exit 1\n            fi\n            if validate_deb \"${FULL_APP}\"; then\n                remove_deb \"${APP}\" purge \"${opt_remove_repo}\"\n            fi\n        done\n}\nfunction dg_action_remove() {\n        elevate_privs\n        opt_remove_repo=\"\"\n        if [ \"${1}\" == --remove-repo ]; then\n            opt_remove_repo=--remove-repo\n            shift\n        fi\n        for APP in \"${@,,}\"; do\n            FULL_APP=${APPNAME2FULL[$APP]}\n            if [ -z \"${FULL_APP}\" ]; then\n                FULL_APP=\"$(printf '%s\\n' \"${DEPRECATED_APPS[@]}\" | grep -m 1 \"/${APP}$\")\"\n            fi\n            if [ -z \"${FULL_APP}\" ]; then\n                fancy_message error \"${APP} is not a supported application.\"\n                ACTION=\"list\"\n                list_debs \"\" --raw >&2\n                exit 1\n            fi\n            if validate_deb \"${FULL_APP}\"; then\n                remove_deb \"${APP}\" \"\" \"${opt_remove_repo}\"\n            fi\n        done\n}\nfunction dg_action_search() {\n        local list_opt_1=''\n        if [ \"${1}\" == --include-unsupported ]; then\n            list_opt_1=$1\n            shift\n        fi\n        if [ -z \"${1}\" ]; then\n            fancy_message error \"You must specify a pattern.\"\n            usage >&2\n            exit 1\n        fi\n        list_debs \"$list_opt_1\" --raw | grep -e \"${1}\"\n}\nfunction dg_action_update() {\n        if   [ -n \"${1}\" ] && ! [[ ' --repos-only --quiet ' =~ \"${1}\" ]]; then\n            fancy_message fatal \"Unknown option supplied: ${1}\"\n        elif [ -n \"${2}\" ] && ! [[ ' --repos-only --quiet ' =~ \"${2}\" ]]; then\n                fancy_message fatal \"Unknown option supplied: ${2}\"\n        fi\n        if [ -n \"${3}\" ] ; then\n                    fancy_message error \"Ignoring extra options from : ${3}\"\n        fi\n        elevate_privs\n        create_cache_dir\n        create_etc_dir\n        init_repos\n        update_repos \"$@\"\n        if [[ \" $* \" != *' --repos-only '* ]] ; then\n            populate_apps\n            for APP in \"${INSTALLED_APPS[@]}\"; do\n                FULL_APP=${APPNAME2FULL[$APP]}\n                if [ -n \"${FULL_APP}\" ]; then\n                    if validate_deb \"${FULL_APP}\"; then\n                        fix_installed\n                    fi\n                else\n                    remove_installed \"${APP}\"\n                fi\n            done\n            mapfile -t INSTALLED_APPS <\"${ETC_DIR}/installed\"; INSTALLED_APPS=(${INSTALLED_APPS[@]%% *})\n            update_debs\n        fi\n}\nfunction dg_action_upgrade() {\n        elevate_privs\n        create_cache_dir\n        upgrade_debs \"$@\"\n}\nfunction dg_action_fix-installed() {\n        if [ -n \"${1}\" ] && [ \"${1}\" != --old-apps ]; then\n            fancy_message fatal \"Unknown option supplied: ${1}\"\n        fi\n        elevate_privs\n        if [ \"${1}\" = --old-apps ]; then\n            for APP in $(dpkg-query 2>/dev/null -Wf '${db:Status-abbrev}${Package}\\n' \"${APPS[*]##*/}\" | sed -n -e 's/^ii //p'); do\n                if validate_deb \"$(printf '%s\\n' \"${APPS[@]}\" | grep -m 1 \"/${APP}$\")\"; then\n                    fix_old_apps\n                fi\n            done\n        else\n            for APP in \"${INSTALLED_APPS[@]}\"; do\n                FULL_APP=\"$(printf '%s\\n' \"${APPS[@]}\" | grep -m 1 \"/${APP}$\")\"\n                if [ -n \"${FULL_APP}\" ]; then\n                    if validate_deb \"${FULL_APP}\"; then\n                        fix_installed\n                    fi\n                else\n                    remove_installed \"${APP}\"\n                fi\n            done\n        fi\n}\nfunction dg_action_version() { echo \"${VERSION}\"; }\nfunction dg_action_help() { usage; }\n\n\nif ((BASH_VERSINFO[0] < 4)); then\n    fancy_message fatal \"Sorry, you need bash 4.0 or newer to run $(basename \"${0}\").\"\nfi\n\nif ! command -v lsb_release 1>/dev/null; then\n  fancy_message fatal \"lsb_release not detected. Quitting.\"\nfi\n\nexport CACHE_DIR=\"/var/cache/deb-get\"\nreadonly ETC_DIR=\"/etc/deb-get\"\nreadonly MAIN_REPO_URL=\"https://raw.githubusercontent.com/wimpysworld/deb-get/main/01-main\"\n\nreadonly USER_AGENT=\"Mozilla/5.0 (X11; Linux ${HOST_CPU}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36\"\nreadonly USER_HOME=\"${HOME}\"\n\nreadonly DEBGET_BIN=$(basename $0)\n\nparse_machine\n\nif [ -n \"${1}\" ]; then\n    ACTION=\"${1,,}\"\n    shift\nelse\n    fancy_message error \"You must specify an action.\"\n    usage >&2\n    exit 1\nfi\ncase \"${ACTION}\" in\n    (pretty_list|csv_list) ACTION=${ACTION/_/} ;;\n    (csv) ACTION=csvlist ;;\nesac\n\ncase \"${ACTION}\" in (update|upgrade|show|reinstall|install|remove|purge|search|list|prettylist|csvlist|fix-installed)\n    populate_apps\n    mapfile -t APP_CONFLICTS < <(printf '%s\\n' \"${APPS[@]##*/}\" | uniq --repeated)\n    mapfile -t LOCAL_APPS < <(printf '%s\\n' \"${APPS[@]}\" | grep \"^99-local/\")\n    if [ -e \"${ETC_DIR}/installed\" ]; then\n        mapfile -t INSTALLED_APPS <\"${ETC_DIR}/installed\"; INSTALLED_APPS=(\"${INSTALLED_APPS[@]%% *}\")\n    else\n        INSTALLED_APPS=()\n    fi\n    readonly APP_CONFLICTS LOCAL_APPS\n    ;;\nesac\n\ncase \"${ACTION}\" in (install|reinstall|remove|purge|show)\n        if [ -z \"${1}\" ]; then\n            fancy_message error \"You must specify an app:\\n\"\n            ACTION=\"list\"\n            list_debs \"\" --raw >&2\n            exit 1\n        fi\n        print_etc_overrides\n        populate_deprecated_apps\n        print_deprecated;;\nesac\n\nexport ELEVATE=\"\"\n\nif declare -F \"dg_action_$ACTION\" >/dev/null; then\n    \"dg_action_$ACTION\" \"$@\"\nelse\n    fancy_message fatal \"Unknown action supplied: ${ACTION}\"\nfi\n\nif [[ ${PACKAGE_INSTALLATION_COUNT} -lt ${PACKAGE_INSTALLATION_TRIES} ]]; then\n    exit 1\nfi\n"
        },
        {
          "name": "deb-get_completion",
          "type": "blob",
          "size": 2.576171875,
          "content": "#!/usr/bin/env bash\n\nfunction _deb-get() {\n    if [ \"${COMP_CWORD}\" = 1 ]; then\n        COMPREPLY=($(compgen -W \"update upgrade show install reinstall remove purge search cache clean list pretty_list prettylist csv_list csvlist csv fix-installed help version\" \"${COMP_WORDS[1]}\"))\n    elif [ \"${COMP_CWORD}\" -ge 2 ]; then\n        local command=\"${COMP_WORDS[1]}\"\n\n        if  [ \"${command}\" = update ] &&  [ \"${COMP_CWORD}\" -le 3 ]; then\n            COMPREPLY=($(compgen -W \"--repos-only --quiet\" \"\\\\${COMP_WORDS[${COMP_CWORD}]}\"))\n        elif [ \"${command}\" = show ]; then\n            COMPREPLY=($(compgen -W \"$(deb-get list --include-unsupported --raw | tr \"\\n\" \" \")\" \"${COMP_WORDS[${COMP_CWORD}]}\"))\n        elif [ \"${COMP_CWORD}\" = 2 ] && [ \"${command}\" = search ]; then\n            COMPREPLY=($(compgen -W \"--include-unsupported $(deb-get list --raw | tr \"\\n\" \" \")\" \"\\\\${COMP_WORDS[${COMP_CWORD}]}\"))\n        elif [ \"${COMP_CWORD}\" = 3 ] && [ \"${command}\" = search ] && [ \"${COMP_WORDS[2]}\" = --include-unsupported ]; then\n            COMPREPLY=($(compgen -W \"$(deb-get list --include-unsupported --raw | tr \"\\n\" \" \")\" \"${COMP_WORDS[${COMP_CWORD}]}\"))\n        elif [ \"${command}\" = install ]; then\n            COMPREPLY=($(compgen -W \"$(deb-get list --not-installed | tr \"\\n\" \" \")\" \"${COMP_WORDS[${COMP_CWORD}]}\"))\n        elif [ \"${command}\" = reinstall ]; then\n            COMPREPLY=($(compgen -W \"$(deb-get list --installed | tr \"\\n\" \" \")\" \"${COMP_WORDS[${COMP_CWORD}]}\"))\n        elif [[ \" remove purge \" =~ \" ${command} \" ]]; then\n            if [ \"${COMP_CWORD}\" = 2 ]; then\n                COMPREPLY=($(compgen -W \"--remove-repo $(deb-get list --installed | tr \"\\n\" \" \")\" \"\\\\${COMP_WORDS[2]}\"))\n            else\n                COMPREPLY=($(compgen -W \"$(deb-get list --installed | tr \"\\n\" \" \")\" \"${COMP_WORDS[${COMP_CWORD}]}\"))\n            fi\n        elif [ \"${command}\" = list ]; then\n            COMPREPLY=($(compgen -W \"--include-unsupported --raw --installed --not-installed\" \"\\\\${COMP_WORDS[${COMP_CWORD}]}\"))\n        elif [ \"${COMP_CWORD}\" = 2 ] && [[ \" pretty_list prettylist csv_list csvlist csv \" =~ \" ${command} \" ]]; then\n            COMPREPLY=($(compgen -W \"$(find \"/etc/deb-get\" -maxdepth 1 \\( -name *.repo ! -name 00-builtin.repo ! -name 99-local.repo -type f \\) -o \\( -name 99-local.d -type d \\) -printf \"%f\\n\" 2> /dev/null | sed \"s/.repo$//; s/.d$//\" | tr \"\\n\" \" \") 00-builtin 01-main\" \"${COMP_WORDS[2]}\"))\n        elif [ \"${COMP_CWORD}\" = 2 ] && [ \"${command}\" = fix-installed ]; then\n            COMPREPLY=($(compgen -W \"--old-apps\" \"\\\\${COMP_WORDS[2]}\"))\n        fi\n    fi\n}\n\ncomplete -F _deb-get deb-get\n"
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}