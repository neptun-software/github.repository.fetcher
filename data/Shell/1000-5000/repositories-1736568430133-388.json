{
  "metadata": {
    "timestamp": 1736568430133,
    "page": 388,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "edeliver/edeliver",
      "stars": 1973,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".deliver",
          "type": "tree",
          "content": null
        },
        {
          "name": ".formatter.exs",
          "type": "blob",
          "size": 0.0947265625,
          "content": "# Used by \"mix format\"\n[\n  inputs: [\"{mix,.formatter}.exs\", \"{config,lib,test}/**/*.{ex,exs}\"]\n]\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.669921875,
          "content": "# The directory Mix will write compiled artifacts to.\n/_build/\n\n# If you run \"mix test --cover\", coverage assets end up here.\n/cover/\n\n# The directory Mix downloads your dependencies sources to.\n/deps/\n\n# Where third-party dependencies like ExDoc output generated docs.\n/doc/\n\n# Ignore .fetch files in case you like to edit your project deps locally.\n/.fetch\n\n# If the VM crashes, it generates a dump, let's ignore it too.\nerl_crash.dump\n\n# Also ignore archive artifacts (built via \"mix archive.build\").\n*.ez\n\n# Ignore package tarball (built via \"mix hex.build\").\nedeliver-*.tar\n\n# Temporary files, for example, from tests.\n/tmp/\n\n# Misc.\ngh-pages/*\n.DS_Store\n.idea\nedeliver.iml\n.test/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.853515625,
          "content": "eDeliver Versions\n=================\n\n__1.9.3__\n\n  - Enhancements\n    - handle `DOCKER_RELEASE_BASE_IMAGE` with `WORKDIR` set or set it automatically\n\n__1.9.2__\n\n  - Fixes \n    - include missing default file to start release containers into hex package\n    - list available releases on google container registry correctly\n\n__1.9.1__\n\n  - Enhancements\n    - add `DOCKER_HUB_ACCESS_TOKEN` to list releases on Docker Hub\n    - improve listing of releases from Docker registry\n\n  - Fixes \n    - creating release TAR when building in docker and with mix directly\n    - listing releases on Docker Hub \n\n__1.9.0__\n\n  - Enhancements\n    - support building in docker instead on a build host\n    - support building deployable docker containers containing the built release\n    - support `mix release` task\n    - run epmd-less in docker\n    - rebar3 support\n\n  - Fixes \n    - consider env when fetching deps\n    - consider DEPLOY_ENVIRONMENT when globally set\n\n__1.8.0__\n\n  - Backwards incompatible changes\n    - Elixir 1.10 compatibility by @progsmile. This is minimum required version now.\n    \n__1.7.0__\n\n  - Backwards incompatible changes\n    - Elixir 1.9 compatibility by @pablo-meier. This is minimum required version now.\n    - Distillery 2.1.0 compatibility by @nifoc. This is minimum required version now.\n\n__1.6.0__\n\n  - Enhancements\n    - Support Distillery 2.x\n  - Backwards incompatible changes\n    - Distillery 1.x is not supported anymore\n\n__1.5.3__\n\n  - Fixes\n    - Truly fixes broken distillery compatibility by @TokiTori\n\n__1.5.2__\n\n  - Fixes\n    - Fix broken distillery compatibility by @TokiTori\n\n__1.5.1__\n\n  - Enhancements\n    - Warnings cleanup by @kanmo\n    - New autoversion option \"-time\" by @tejanium\n\n__1.4.6__\n\n_Good news everyone! Distillery compatibility is restored!_\n\n- Enhancements\n  - Require at least distillery 1.0.0\n  - Remove compile warnings\n  - Tests run now on all OSs\n- Bug fixes\n  - Fix issue with ControlPersist (#105)\n  - Fix profile output dir (#254)\n  - Fix posix compatibility (#147)\n- Backwards incompatible changes\n  - Exrm support removed . As discussed here: https://elixirforum.com/t/edeliver-plans-to-remove-exrm-support-any-objections/12416\n\n__1.4.5__\n\n- Merge pull request #248 from dmarkow/distillery-fixes\n- Update docs for distillery integration\n- Use correct output_dir from distillery\n- Ensure docs are built for both exrm/distillery plugins\n- Merge pull request #199 from otaq/master\n- Sleep 1 before check node running\n\n__1.4.4__\n\n- Removed support for spaces in project path. It broke using multiple hosts.\n- Update Readme\n\n__1.4.3__\n\n- Propagate exit code for the synchronous migration\n- Added `post_extract_release_archive` hook\n- Added support for spaces in project path.\n- Pass branch variable when building release\n\n__1.4.2__\n\n- Support Elixir 1.3.4 in addition to 1.4\n\n__1.4.1__\n\n- Compatibility with elixir 1.4\n- Compatibility with elixir versions 1.3.[0-3]\n- Improved support for distillery as build tool\n\n__1.4.0__\n\n- Marked `:exrm` as `:optional` dependency. This __requires to add `:exrm`\n  as dependency to the mix file of the project__ if exrm is used as build tool\n- Allow to build releases using [distillery](https://github.com/bitwalker/distillery)\n- Improve detection whether exrm or distillery is used as build tool\n\n__1.3.0__\n\n- Support distillery as release tool\n- Add pre/post hook which is executed when deployed release is (re)started.\n- Improve default automatic relup modifications and their api docs\n- Fix compile warnings when compiling with elixir version >= `1.3.0`\n- Fix problem with node command output\n\n__1.2.10__\n\n- Install also rebar3 on the build host\n- Compatibility with elixir / mix version `1.3.0`\n- Keep only valid SemVer characters in branch name from auto-versioning\n- Fix ssh forwarding in non-verbose mode\n\n__1.2.9__\n\n- Fix detecting version of single release file\n- Improve branch detection for auto-versioning\n- Warn if `--auto-version` is used with `--skip-mix-clean`\n- Avoid user interaction for `mix local.rebar` command\n\n__1.2.8__\n\n- Add `update` command to build and deploy in a single step\n- Allow to append mix env as metadata to version\n- Exrm `1.0.5` compatibility for node commands\n- Allow to link sys.config and vm.args for each mix env\n\n__1.2.7__\n\n- Allow to use umbrella projects also for the `upgrade` or `build upgrade` task\n- Use ssh agent forwarding on build host to allow to use private git repositories as dependencies\n\n__1.2.6__\n\n- Restart whole vm with most recent release for the `restart` command or `--start-deploy` option\n- (Re-)start node(s) synchronously and print start progress for `--verbose` option\n- Fix `upgrade` command for production deploy environments\n- Improved error output\n\n__1.2.5__\n\n- Fix error on automatic phoenix upgrades by not suspending the ranch acceptors supervisor\n- Fix passing `ECTO_REPOSITORY` env to ecto migration tasks\n- Ecto 2.0 support: read ecto_repos from application env\n- Fix skipping automatic relup modifications for upgrades\n- Fix changing the version of an old release which is build for an upgrade\n- Fix `--mix-env` option\n\n__1.2.4__\n\n- Support migrations for ecto version >= 2.0\n\n__1.2.3__\n\n- Improve displaying of revisions contained in the running release.\n\n__1.2.2__\n\n- Fix detecting branch name on build host for `--autoversion=branch[-unless-master]` option.\n\n__1.2.1__\n\n- Fix syntax on migrate task with down operation\n\n__1.2.0__\n\n- Add `upgrade` task to automatically upgrade all nodes\n- Add auto-versioning to append metadata to release versions\n- Add command help `mix edeliver help <command>`\n- Add automatic relup modifications\n- Experimental support for auto-upgrades of phoenix apps\n\n__1.1.6__\n\n- Fix issue caused by CDPATH being set\n\n__1.1.5__\n\n- Fix displaying all output for node commands\n\n__1.1.4__\n\n- Fix selecting release when deploying and no version is given\n\n__1.1.3__\n\n- Fix hex.pm release by adding missing mix.exs\n\n__1.1.2__\n\n- Fix ssh warning if edeliver is used as mix task\n- Allow user interaction when building in verbose mode\n- Suppress printing app script version if app script was generated with recent exrm version\n- Fix skipping git clean when SKIP_GIT_CLEAN env is set\n- Show very verbose output of exrm release task if it fails\n- Fix name of post hook which is executed after updating the deps\n\n__1.1.1__\n\n- added command line option `--mix-env=<env>`\n- automatic authorization of/on release store host\n- allow to build different apps in one project when `APP` env is used\n- use always explicit compilation for exrm compatibility\n\n__1.1.0__\n\n- allow incremental builds to decrease build time\n- support for executing ecto migrations\n- support exrm versions from `0.16.0` to > `1.0.0`\n- allow to link sys.config and vm.args in release\n- display command output when build command failed\n- keeps build repository size constant\n- return correct status code if mix command failed\n- deploy release non-interactively if also upgrade exists\n- install hex non-interactive\n\n\n__1.0.0__\n\n - initial version with elixir support\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 1.1591796875,
          "content": "### Precheck\n\n* Please do not use the issues tracker for help or support (try [the wiki](https://github.com/boldpoker/edeliver/wiki), [elixir forum](https://elixirforum.com/c/elixir-questions/deployment), [#deployment on slack](https://elixir-lang.slack.com/), Stack Overflow, IRC, mailing list, etc.)\n* For proposing a new feature, please start a discussion at the [deployment category on the elixir forum](https://elixirforum.com/c/elixir-questions/deployment)\n* For bugs, do a quick search and make sure the bug has not yet been reported\n* Finally, be nice and have fun!\n\n### Environment\n\n* Edeliver version (`mix edeliver --version`):\n* Elixir version (`elixir -v`):\n* Build tool and version (distillery):\n* Operating system (on build / deploy hosts):\n* Are you using an umbrella project (yes|no):\n\n### Verbose output\n\n* Are there more information when running with `--verbose`?\n* Can you narrow down the code line causing the issue when running with `--debug`?\n* Please remove any private data from the output before pasting it here (login credentials, ip addresses user names etc.)\n\n### Current behavior\n\nInclude executed edeliver command, error output etc.\n\n### Expected behavior\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 28.1298828125,
          "content": "![Logo](./assets/logo.png)\n\n# edeliver\n\n_Deployment for Elixir and Erlang_\n\n[![Build Status](https://travis-ci.org/edeliver/edeliver.svg?branch=master)](https://travis-ci.org/edeliver/edeliver)\n[![Hex Version](http://img.shields.io/hexpm/v/edeliver.svg)](https://hex.pm/packages/edeliver)\n[![Hex Docs](https://img.shields.io/badge/hex-docs-lightgreen.svg)](https://hexdocs.pm/edeliver/)\n[![Total Download](http://img.shields.io/hexpm/dt/edeliver.svg)](https://hex.pm/packages/edeliver)\n[![License](https://img.shields.io/hexpm/l/edeliver.svg)](https://mit-license.org/)\n[![Last Updated](https://img.shields.io/github/last-commit/edeliver/edeliver.svg)](https://github.com/edeliver/edeliver/commits/master)\n\n\n**edeliver** is based on [deliver](https://github.com/gerhard/deliver) and enables you to build and deploy Elixir and Erlang applications and perform hot-code upgrades.\n\nThe [erlang releases](http://www.erlang.org/doc/design_principles/release_handling.html) are built on a *remote* host that is similar to the production machines - or in a [*docker*](https://www.docker.com/) container. After being built, the release can then be deployed to one or more production machines.\n\nOnce built, the [release](http://www.erlang.org/doc/design_principles/release_handling.html) contains the full [erts (erlang runtime system)](http://erlang.org/doc/apps/erts/users_guide.html), all [dependencies (erlang or elixir applications)](http://www.erlang.org/doc/design_principles/applications.html), the Elixir runtime, native port drivers, and your erlang/elixir application(s) in a standalone embedded node.\n\n## Version compatibility\n\n| Edeliver  | Elixir |\n|---------- |--------|\n| 1.9.*     | 1.13.* |\n| 1.8.*     | 1.10.* |\n| 1.7.*     | 1.9.*  |\n| 1.6.*     | 1.8.*  |\n\n## Community\n\n- [Issues](https://github.com/boldpoker/edeliver/issues)\n- [#deployment on Slack](https://elixir-lang.slack.com/)\n- [Community Wiki](https://github.com/boldpoker/edeliver/wiki) — _feel free to contribute!_\n\n\n## Contents\n\n- [Quick Start](#quick-start)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Build Commands](#build-commands)\n- [Deploy Commands](#deploy-commands)\n- [Admin Commands](#admin-commands)\n- [Help](#help)\n- [Examples](#examples)\n- [License](#license)\n\n\n## Quick Start\n\nAssuming an Elixir project, you already have a build server and a staging server, and you've created a database on your staging server already (there is no ecto.create, we skip straight to migrations).\n\nAdd edeliver and your build tool ([distillery](https://github.com/bitwalker/distillery)) to your project dependencies in mix.exs:\n\n```exs\ndef application, do: [\n  applications: [\n  \t ...\n    # Add edeliver to the END of the list\n    :edeliver\n  ]\n]\n\ndefp deps do\n  [\n    ...\n    {:edeliver, \">= 1.9.2\"},\n    {:distillery, \"~> 2.1\", warn_missing: false},\n  ]\nend\n```\n\nIf this is a Phoenix project, upload your prod.secret.exs to your build server somewhere.  Let's say it's at /home/builder/prod.secret.exs.\n\nIn your project, create the file .deliver/config\n\n```bash\n# .deliver/config\n\nAPP=\"myapp\"\n\nBUILD_HOST=\"my-build-server.myapp.com\"\nBUILD_USER=\"builder\"\nBUILD_AT=\"/tmp/edeliver/myapp/builds\"\n\nSTAGING_HOSTS=\"stage.myapp.com\"\nSTAGING_USER=\"web\"\nDELIVER_TO=\"/home/web\"\n\n# For *Phoenix* projects, symlink prod.secret.exs to our tmp source\npre_erlang_get_and_update_deps() {\n  local _prod_secret_path=\"/home/builder/prod.secret.exs\"\n  if [ \"$TARGET_MIX_ENV\" = \"prod\" ]; then\n    __sync_remote \"\n      ln -sfn '$_prod_secret_path' '$BUILD_AT/config/prod.secret.exs'\n    \"\n  fi\n}\n```\n\nAdd the release directory to your gitignore\n\n```console\necho \".deliver/releases/\" >> .gitignore\n```\n\nCommit everything, compile the new dependencies:\n\n```console\ngit add -A && git commit -m \"Setting up edeliver\"\nmix do deps.get, compile\n```\n\nNow you can release with edeliver!\n\n```console\nmix edeliver update\nmix edeliver start\nmix edeliver migrate\n```\n\n\n## Installation\n\nBecause it is based on [deliver](https://github.com/gerhard/deliver), it uses only shell scripts and has no further dependencies except the Erlang/Elixir build system.\n\nIt can be used with any one of these build systems:\n\n  * [mix](http://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html) in conjunction with [distillery](https://github.com/bitwalker/distillery) for elixir/erlang releases (recommended)\n  * [mix](http://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html) in conjunction with [relx](https://github.com/erlware/relx) for elixir/erlang releases\n  * [rebar3](https://github.com/erlang/rebar3) for pure erlang releases or in conjunction with [rebar_mix plugin](https://github.com/Supersonido/rebar_mix) to build also Elixir sources and dependencies\n  * [rebar](https://github.com/basho/rebar) for legacy pure erlang releases\n\nEdeliver tries to autodetect which system to use:\n\n  * If a `./mix.exs` and a `rel/config.exs` file exists, [mix](http://elixir-lang.org/getting_started/mix/1.html) is used fetch the dependencies, compile the sources and [distillery](https://github.com/bitwalker/distillery) is used to generate the releases / upgrades.\n  * If a `./relx.config` file exists in addition to a `./mix.exs` file, [mix](http://elixir-lang.org/getting_started/mix/1.html) is used fetch the dependencies, compile the sources and [relx](https://github.com/erlware/relx) is used to generate the releases / upgrades.\n  * If a `./rebar.config` file exists but no `./relx.config`, [rebar3](https://github.com/erlang/rebar3) is used to fetch the dependencies, compile the sources and to build the release\n  * Otherwise [rebar](https://github.com/basho/rebar) is used to fetch the dependencies, compile the sources and generate the releases / upgrades. It is recommended to [migrate to rebar3](https://rebar3.readme.io/docs/from-rebar-2x-to-rebar3) in that case.\n\nThis can be overridden by the config variables `BUILD_CMD=rebar3|rebar|mix`, `RELEASE_CMD=rebar3|rebar|mix|relx` and `USING_DISTILLERY=true|false` in `.deliver/config`.\n\nEdeliver uses ssh and scp to build and deploy the releases.  It is recommended that you use ssh and scp with key+passphrase only.  You can use `ssh-add` if you don't want to enter your passphrase every time.\n\nIt may be required to install and configure git on your build host. You may also have to clone the repository initially at the `BUILD_AT` path, although edeliver will try to take care of this for you. [Erlang](http://www.erlang.org/) and [Elixir](http://elixir-lang.org/) must be installed and available on the `BUILD_HOST`. The default shell for the build user should be `bash` or `zsh` on your build host (usually already the default on most systems).\n\nThe build host must be similar to the production/staging hosts.  For example, if you want to deploy to a production system based on Linux, the release must also be built on a Linux system.\n\nThe Erlang runtime (OTP) and the Elixir runtime are packaged with the release—you do not have to install Erlang or Elixir separately on your production/staging servers.\n\n\n### Mix considerations\n\nIf using [mix](http://elixir-lang.org/getting_started/mix/1.html), add edeliver and your build tool ([distillery](https://hex.pm/packages/distillery) as [hex package](https://hex.pm/packages/edeliver) to your `mix.exs` config:\n\n```exs\ndefp deps do\n  [\n    {:edeliver, \">= 1.9.2\"},\n    {:distillery, \"~> 2.1\", warn_missing: false},\n  ]\nend\n```\n\nRun `mix do deps.get, deps.compile`.  Edeliver is then available as a mix task: `mix edeliver`.\n\nSome edeliver commands used for server administration require that edeliver be running on the server itself so that it can respond.  These commands include `version`, `migrate`, `show migrations`, etc.  To enable this, add edeliver as application to be started in `mix.exs`.  It should be added last at the _end_ of the list:\n\n```exs\ndef application, do: [\n  applications: [\n    # ...\n    :edeliver,\n  ],\n]\n```\n\n### Rebar3 considerations\n\nWhen using [rebar3](https://github.com/erlang/rebar3), edeliver can be added as [rebar3 dependency](https://rebar3.readme.io/docs/dependencies). Just add it to your `rebar.config` (and ensure that a `./rebar3` binary/link is in your project directory):\n\n    {deps, [\n      % ...\n      {edeliver, {git, \"git://github.com/edeliver/edeliver.git\", {tag, \"1.9.2\"}}}\n    ]}.\n\nAnd link the `edeliver` binary to the root of your project directory:\n\n    wget https://s3.amazonaws.com/rebar3/rebar3 && chmod +x rebar3\n    ./rebar3 get-deps\n    ln -s ./_build/default/lib/edeliver/bin/edeliver ./edeliver \n\n\nThen use the linked binary `./edeliver` to build and deploy releases. The `default` [rebar3 profile](https://rebar3.readme.io/docs/profiles) can be overridden by setting the `REBAR_PROFILE` environment variable in the edeliver config e.g. to `prod`.\n\n\n### Rebar considerations\n\nWhen using rebar, edeliver can be added as [rebar](https://github.com/basho/rebar) dependency. Just add it to your `rebar.config` (and ensure that a `./rebar` binary/link is in your project directory):\n\n    {deps, [\n      % ...\n      {edeliver, \"1.9.2\",\n        {git, \"git://github.com/boldpoker/edeliver.git\", {branch, master}}}\n    ]}.\n\nAnd link the `edeliver` binary to the root of your project directory:\n\n    ./rebar get-deps # when using rebar, or ...\n    ln -s ./deps/edeliver/bin/edeliver .\n\nThen use the linked binary `./edeliver` instead of the `mix edeliver` tasks from the examples.\n\n\n## Configuration\n\nCreate a `.deliver` directory in your project folder and add the `config` file:\n\n```sh\n#!/usr/bin/env bash\n\nAPP=\"your-erlang-app\" # name of your release\n\nBUILD_HOST=\"build-system.acme.org\" # host where to build the release, or \"docker\"\nBUILD_USER=\"build\" # local user at build host\nBUILD_AT=\"/tmp/erlang/my-app/builds\" # build directory on build host\n\nSTAGING_HOSTS=\"test1.acme.org test2.acme.org\" # staging / test hosts separated by space\nSTAGING_USER=\"test\" # local user at staging hosts\nTEST_AT=\"/test/my-erlang-app\" # deploy directory on staging hosts. default is DELIVER_TO\n\nPRODUCTION_HOSTS=\"deploy1.acme.org deploy2.acme.org\" # deploy / production hosts separated by space\nPRODUCTION_USER=\"production\" # local user at deploy hosts\nDELIVER_TO=\"/opt/my-erlang-app\" # deploy directory on production hosts\n```\n\nTo use different configurations on different hosts, you can [configure edeliver to link](https://github.com/boldpoker/edeliver/wiki/Use-per-host-configuration) the `vm.args` and/or the `sys.config` files in the release package by setting the `LINK_VM_ARGS=/path/to/vm.args` and/or `LINK_SYS_CONFIG=/path/to/sys.config` variables in the edeliver config if you use [mix](http://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html) and [distillery](https://github.com/bitwalker/distillery) to build the releases.\n\nAnother strategy is to use runtime environment variable evaluation (available for [distillery](https://github.com/bitwalker/distillery) and [relx](https://github.com/erlware/relx)). For more information on this technique, see [Plataformatec - Deploying Elixir with edeliver](http://blog.plataformatec.com.br/2016/06/deploying-elixir-applications-with-edeliver/)\n\nThis strategy relies on exporting an environment variable in your deployment environment to signal that environment variable replacement should be performed, as well as exporting\nall of the environment variables your configuration relies on.\n\nFor `relx`, export `RELX_REPLACE_OS_VARS=true`. For `distillery`, export `REPLACE_OS_VARS=true`.\n\nFor example in `~/.profile`\n\n```sh\nexport REPLACE_OS_VARS=true\nexport MY_CUSTOM_DATABASE_PORT=5433\n```\n\n## Build Commands\n\nFor build commands the following **configuration** variables must be set:\n\n- `APP`: the name of your release which should be built\n- `BUILD_HOST`: the host where to build the release, or \"docker\" to build in a docker container\n- `BUILD_USER`: the local user at build host\n- `BUILD_AT`: the directory on build host where to build the release. must exist.\n\nThe built release is then **copied to your local directory** `.deliver/releases` and can then be **delivered to your production servers** by using one of the **deploy commands**.\n\nIf compiling and generating the release build was successful, the release is **copied from the remote build host** to the **release store**. The default release store is the __local__ `.deliver` __directory__ but you can configure any destination with the `RELEASE_STORE=` environment variables, also __remote ssh destinations__ (in your server network) like `RELEASE_STORE=user@releases.acme.org:/releases/`, **amazon s3** locations like `s3://AWS_ACCESS_KEY_ID@AWS_SECRET_ACCESS_KEY:bucket` or as a __docker image__ like `docker://edeliver/echo-server`. The release is copied from the remote build host using the `RELEASE_DIR=` environment variable. If this is not set, the default directory is found by finding the subdirectory that contains the generated `RELEASES` file and has the `$APP` name in the path. e.g. if `$APP=myApp` and the `RELEASES` file is found at `rel/myApp/myApp/releases/RELEASE` the `rel/myApp/myApp` is copied to the release store.\n\nTo __build releases__ and upgrades __faster__, you might adjust the `GIT_CLEAN_PATHS` variable in your config file e.g. to something like `=\"_build rel priv/generated\"` which defaults to `.`. That value means, that everything from the last build is reset (beam files, release files, deps, generated assets etc.) before the next build is started to ensure that no conflicts with old (e.g. removed or renamed) files might arise. You can also use the command line option `--skip-git-clean` to skip this step completely and in addition with the `--skip-mix-clean` option for full __incremental builds__.\n\n\n### Build Initial Release\n\n    mix edeliver build release [--revision=<git-revision>|--tag=<git-tag>] [--branch=<git-branch>]\n\nBuilds an initial release that can be deployed to the production hosts. If you want to build a different tag or revision, use the `--revision=` or the `--tag` argument. If you want to build a different branch or the tag / revision is in a different branch, use the `--branch=` argument.\n\n### Build in a docker container\n\nIf `BUILD_HOST` is set to `\"docker\"`, edeliver builds the release in a docker container instead of building on a build host. It uses the docker image set as `DOCKER_BUILD_IMAGE` which defaults to [elixir:1.13.3](https://hub.docker.com/_/elixir) with erlang 24, but can be overridden in your `.deliver/config`. When building in a docker container, the git repository to build is pushed to the local dir `.docker-build` which is then mounted into the container and edelivers build commands are executed as `docker exec` commands in the container.\n\n### Build as a docker container\n\nIf `RELEASE_STORE` is a (private) docker image in a docker registry like `docker://edeliver/echo-server` the built release will be embedded into a docker image based on `DOCKER_RELEASE_BASE_IMAGE` (which defaults to [`edeliver/release-base:1.0`](https://hub.docker.com/r/edeliver/release-base)) and pushed with that image name from the `RELEASE_STORE` to your registry (if `--push` is used). It creates (and optionally pushes) three image tags: *release version* + `latest`, *release version* + *git sha* and *release version* + *branch*. The release can then be started on a host authenticated at the same docker registry like this:\n\n```sh\ndocker start -ti edeliver/echo-server:1.0-latest -p 8080:8080 echo-server/bin/echo-server console\n```\n\n### Build an upgrade package\n\n    mix edeliver build upgrade --from=<git-tag-or-revision>|--with=<release-version-from-store>\n                              [--to=<git-tag-or-revision>] [--branch=<git-branch>]\n\nBuilds an _upgrade_ package that can be deployed to production hosts with running nodes _without restarting_ them. To build an upgrade package you need the release or upgrade package (when using [distillery](https://github.com/bitwalker/distillery)) of the running release. If it is available (in the release store), you can build the upgrade to the new version by passing the old  version to the `--with=<old-version>` option. If not, you can build the old release and the live upgrade from it in a single step by using the `--from=<git-tag-or-revision>` option. If you don't want to build an upgrade to the current head of the given branch (`master` is the default), you can use the `--to=<git-tag-or-revision>` option. If the upgrade package is built, you might want to _modify_ the generated upgrade instructions ([relup](http://www.erlang.org/doc/man/relup.html)) as described in the next section or (more advanced) automatically patch the relup file by implementing your own [`Edeliver.Relup.Modification`](https://github.com/boldpoker/edeliver/blob/master/lib/edeliver/relup/modification.ex)behaviour to automate this step.\n\n\n### Edit upgrade instructions (relup)\n\n    mix edeliver edit relup [--version=<upgrade-version>]\n\nFrom the auto-generated appup instructions of all included and updated applications, a [relup](http://www.erlang.org/doc/man/relup.html) file is generated during the `build upgrade` command and included in the upgrade package.  It contains the upgrade instructions for the new release version.  If there are dependencies between modules or applications, it might be necessary to modify this file, e.g. changing the order of the applications or modules that are reloaded.  If there are repeating steps to adjust the relup for your application, you can automate this step by implementing your own [`Edeliver.Relup.Modification`](https://github.com/boldpoker/edeliver/blob/master/lib/edeliver/relup/modification.ex) behavior.\n\n\n### Auto-Versioning\n\nedeliver provides a way to automatically increment the current version for the current build and/or to append [metadata](http://semver.org/#spec-item-10) to the version (such as the current git sha).  Having unique versions for each release is important especially if you build hot code upgrades.  It also helps to determine exactly which version is running when using `mix edeliver version`.  For more information check the `--auto-version=` option described e.g in `mix edeliver help upgrade` or in the [wiki](https://github.com/boldpoker/edeliver/wiki/Auto-Versioning).\n\n\n### Build Restrictions (rebar)\n\nTo build upgrades, there must be only one release in the release directory (`rel`) of your project as configured in your `rebar.config`. E.g. if you want to build two different releases `project-dir/rel/release_a` and `project-dir/rel/release_b` you need two `rebar.config` files that refer only to either one of that release directories in the `sub_dirs` section.\nYou can then pass the config file to use by setting the environment `REBAR_CONFIG=` at the command line.\nThe reason for that is, that when the upgrade is build with rebar, rebar tries to find the old version in both release directories.\n\n\n## Deploy Commands\n\n    mix edeliver deploy release|upgrade [[to] staging|production] [--version=<release-version>] [Options]\n\nDeploy commands deliver the builds that were created with a build command to your staging or production hosts.  They can also perform a live code upgrade.  Built releases or upgrades are available in your local directory `.deliver/releases`.  To deploy releases the following configuration variables must be set:\n\n- `APP`: the name of your release which should be built\n- `PRODUCTION_HOSTS`: the production hosts to deploy to, separated by space\n- `PRODUCTION_USER`: the local users at the production hosts\n- `DELIVER_TO`: the directory at the production hosts to deploy the release at\n\n- `STAGING_HOSTS`: the staging hosts to test the releases at, separated by space\n- `STAGING_USER`: the local users at the staging hosts\n- `TEST_AT`: the directory at the staging hosts. if not set, the DELIVER_TO is used as directory\n\nDeploying to staging can be used to test your releases and upgrades before deploying them to the production hosts.  Staging is the default target if you don't pass the `[to] production` argument.\n\nIf the `RELEASE_STORE` is a docker image, the deploy command pulls and starts the image with the given tag as version. See section __Deploy Docker Releases__ below for details.\n\n### Deploy an initial/clean release\n\n```console\nmix edeliver deploy\n```\n\nDeploys an initial release at the production hosts.  This requires that the `build release` command was executed before.\n\nIf there are several releases in the release store, you will be asked which release to deploy or you can pass the version by the `--version=` argument variable.  If the nodes on the remote deploy hosts are up, the running old release is not affected—the new release will be available only after starting or restarting the nodes on the deploy hosts.\n\n\n### Deploy an upgrade\n\n```console\nmix edeliver upgrade\n```\n\nDeploys an upgrade at the production hosts and upgrades the running nodes to the new version.  This requires that the `build upgrade` command was executed before, and that there is already an initial release deployed to the production hosts, and that the node is running.\n\nRelease archives in your release store that were created by the `build release` command **cannot be used to deploy an upgrade**.\n\nThis command requires that your release start script was **generate** by a **recent rebar version** that supports the `upgrade` command in addition to the `start|stop|ping|attach` commands. Releases generated with [mix](http://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html) and [distillery](https://github.com/bitwalker/distillery) always contain the `upgrade` command.\n\nIf using rebar, make sure that the [install_upgrade.escript](https://github.com/basho/rebar/blob/master/priv/templates/simplenode.install_upgrade.escript) file which was generated by rebar is included in your release. So ensure, that the following line is in your `reltool.config`:\n\n    {overlay, [ ...\n           {copy, \"files/install_upgrade.escript\", \"bin/install_upgrade.escript\"}\n    ]}.\n\n### Deploy Docker Releases\n\nWhen embedding releases into docker containers, the deploy command pulls the docker image from the registry defined as `RELEASE_STORE` and __extracts the boot script__ from `/$APP/bin/start_container` (can be configured in `CONTAINER_START_SCRIPT`) to `$DELIVER_TO/bin` while replacing the string `{{edeliver-version}}` with the version which is deployed. The script should use that value to always start that tag of the image.\n\nThe start script should handle the same commands as the [extended start script from relx/rebar](https://rebar3.readme.io/docs/releases#extensions), at least the `start`, `stop` and `version` commands.\n\nIt could start the container with e.g. like this \n\n```sh\nVERSION=\"{{edeliver-version}}\"\ndocker run --rm --detatch \\\n           --workdir \"/${APP}\" \\\n           --publish 127.0.0.1:8080:8080 \\\n           --env ERL_DIST_PORT=\"${ERL_DIST_PORT:-9999}\" \\\n           --env INET_DIST_USE_INTERFACE='{0,0,0,0}' \\\n           --mount type=bind,source=$HOME/.erlang.cookie,target=/root/.erlang.cookie\n       my-registry/my-image:$VERSION /$APP/bin/$APP console\n```\n\n## Admin Commands\n\nedeliver has a set of commands to check up on your running nodes:\n\n```console\nmix edeliver ping production # shows which nodes are up and running\nmix edeliver version production # shows the release version running on the nodes\nmix edeliver show migrations on production # shows pending database migrations\nmix edeliver migrate production # run database migrations\nmix edeliver restart production # or start or stop\n```\n\n\n## Help\n\nIf something goes wrong, retry with the `--verbose` option.  If you want to see everything, try the `--debug` option.\n\nFor detailed information about the edeliver commands and their options, try `mix edeliver help <command>`.\n\nFor advanced usage have a look also at the [wiki](https://github.com/boldpoker/edeliver/wiki).\n\nDefinitely join the #deployment channel in the [Elixir Slack community](https://elixir-lang.slack.com/) as well.\n\n\n### Recommended Project Structure\n\n\n    your-app/                              <- project root dir\n      + rebar                              <- rebar binary\n      + mix                                <- optional mix binary when compiling with mix\n      + relx                               <- optional relx binary if rebar is not used\n      + edeliver                           <- edeliver binary linking to deps/deliver/bin/deliver\n      + rebar.config                       <- should have \"rel/your-app\" in the sub_dirs section\n      + mix.exs                            <- if present, mix is used for dependencies and compile\n      + relx.config                        <- if present, relx is used for releases\n      + .deliver                           <- default release store\n      |  + releases/*.tar.gz               <- the built releases / upgrade packages\n      |  + appup/OldVsn-NewVsn/*.apppup    <- generated appup files\n      |  + config                          <- deliver configuration\n      + src/                               <- erlang source files\n      |  + *.erl\n      |  + your-app.app.src\n      + lib/                               <- elixir source files\n      |  + *.ex\n      + priv/\n      + deps/\n      |  + edeliver/\n      + rel/\n         + your-app/\n             + files/\n             |   + your-app                <- binary to start|stop|upgrade your app\n             |   + nodetool                <- helper for your-app binary\n             |   + install-upgrade.escript <- helper for the upgrade task of your-app binary\n             |   + sys.config              <- app configuration for the release build\n             |   + vm.args                 <- erlang vm args for the node\n             + reltool.config              <- should have the install_upgrade.escript in overlay section\n\n\n## Examples\n\nBuild a release and deploy it to your production hosts:\n\n```sh\nmix edeliver build release --branch=feature\nmix edeliver deploy release to production\nmix edeliver start production\n```\n\nOr execute the above steps with a single command:\n\n```sh\nmix edeliver update production --branch=feature --start-deploy\n```\n\nBuild a *live* upgrade from v1.0 to v2.0 for a release and deploy it to production:\n\n```sh\n# build upgrade from tag v1.0 to v2.0\n\nmix edeliver build upgrade --from=v1.0 --to=v2.0\nmix edeliver deploy upgrade to production\n\n# or if you have the old release in your release store,\n# you can build the upgrade with that old release instead of the old git revision/tag\n\nmix edeliver build upgrade --with=v1.0 --to=v2.0\nmix edeliver deploy upgrade to production\n\n# run ecto migrations manually:\nmix edeliver migrate production\n# or automatically during upgrade when upgrade is built with --run-migrations\n```\n\nThe deployed upgrade will be **available immediately, without restarting** your application. If the generated [upgrade instructions (relup)](http://www.erlang.org/doc/man/relup.html) for the hot code upgrade are not sufficient, you can modify these files before installing the upgrade by using the `edeliver edit relup` command.\n\nTo execute that steps by a single command and upgrade e.g. all production nodes **automatically**  from their running version to the current version using **hot code upgrade** without restarting, you can use the `upgrade` command:\n\n```\nmix edeliver upgrade production\n```\n\nThis performs the following steps automatically:\n\n* Detect current version on all running nodes\n* Validate that all nodes run the same version\n* Build new upgrade from that version to the current version\n* Auto-patch the relup file\n* Deploy (hot code) upgrade while nodes are running\n* Validate that all nodes run the upgraded version\n* Deploy the release to not running nodes\n\n\n---\n\n\n## LICENSE\n\n(The MIT license)\n\nCopyright (c) Gerhard Lazu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "guides",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "libexec",
          "type": "tree",
          "content": null
        },
        {
          "name": "mix.exs",
          "type": "blob",
          "size": 1.869140625,
          "content": "defmodule Edeliver.Mixfile do\n  use Mix.Project\n\n  @source_url \"https://github.com/boldpoker/edeliver\"\n  @version \"1.9.2\"\n\n  def project do\n    [\n      app: :edeliver,\n      version: @version,\n      elixir: \">= 1.10.0\",\n      elixirc_paths: elixirc_paths(),\n      deps: deps(),\n      docs: docs(),\n      package: package()\n    ]\n  end\n\n  def application do\n    [\n      applications: [],\n      mod: {Edeliver, []},\n      registered: [Edeliver.Supervisor, Edeliver],\n      env: []\n    ]\n  end\n\n  defp deps do\n    [\n      {:distillery, \"~> 2.1.0\", optional: true, warn_missing: false},\n      {:meck, \"~> 0.8.13\", only: :test},\n      {:ex_doc, \">= 0.28.4\", only: :dev, runtime: false}\n    ]\n  end\n\n  defp docs do\n    [\n      extras: [\n        \"CHANGELOG.md\": [title: \"Changelog\"],\n        \"README.md\": [title: \"Usage\"],\n        \"guides/docker.md\": [title: \"Docker Support\"],\n        \"guides/auto-versioning.md\": [title: \"Auto-Versioning\"],\n        \"guides/relup-patching.md\": [title: \"Relup-Patching\"]\n      ],\n      main: \"readme\",\n      assets: \"assets\",\n      logo: \"assets/logo.png\",\n      source_url: @source_url,\n      source_ref: \"v#{@version}\",\n      formatters: [\"html\"]\n    ]\n  end\n\n  defp package do\n    [\n      description:\n        \"Build and Deploy Elixir Applications and perform \" <>\n          \"Hot-Code Upgrades and Schema Migrations\",\n      licenses: [\"MIT\"],\n      files: [\n        \"bin\",\n        \"CHANGELOG.md\",\n        \"docker\",\n        \"lib\",\n        \"libexec\",\n        \"mix.exs\",\n        \"src\",\n        \"strategies\",\n        \"README.md\"\n      ],\n      maintainers: [],\n      links: %{\n        \"Changelog\" => \"https://hexdocs.pm/edeliver/changelog.html\",\n        \"GitHub\" => @source_url\n      }\n    ]\n  end\n\n  defp elixirc_paths do\n    [\n      Path.join(\"lib\", \"distillery\"),\n      Path.join(\"lib\", \"edeliver\"),\n      Path.join(\"lib\", \"mix\"),\n      Path.join(\"lib\", \"edeliver.ex\")\n    ]\n  end\nend\n"
        },
        {
          "name": "mix.lock",
          "type": "blob",
          "size": 2.611328125,
          "content": "%{\n  \"artificery\": {:hex, :artificery, \"0.4.2\", \"3ded6e29e13113af52811c72f414d1e88f711410cac1b619ab3a2666bbd7efd4\", [:mix], [], \"hexpm\", \"514586f4312ef3709a3ccbd8e55f69455add235c1729656687bb781d10d0afdb\"},\n  \"distillery\": {:hex, :distillery, \"2.1.1\", \"f9332afc2eec8a1a2b86f22429e068ef35f84a93ea1718265e740d90dd367814\", [:mix], [{:artificery, \"~> 0.2\", [hex: :artificery, repo: \"hexpm\", optional: false]}], \"hexpm\", \"bbc7008b0161a6f130d8d903b5b3232351fccc9c31a991f8fcbf2a12ace22995\"},\n  \"earmark\": {:hex, :earmark, \"1.4.3\", \"364ca2e9710f6bff494117dbbd53880d84bebb692dafc3a78eb50aa3183f2bfd\", [:mix], [], \"hexpm\", \"8cf8a291ebf1c7b9539e3cddb19e9cef066c2441b1640f13c34c1d3cfc825fec\"},\n  \"earmark_parser\": {:hex, :earmark_parser, \"1.4.25\", \"2024618731c55ebfcc5439d756852ec4e85978a39d0d58593763924d9a15916f\", [:mix], [], \"hexpm\", \"56749c5e1c59447f7b7a23ddb235e4b3defe276afc220a6227237f3efe83f51e\"},\n  \"ex_doc\": {:hex, :ex_doc, \"0.28.4\", \"001a0ea6beac2f810f1abc3dbf4b123e9593eaa5f00dd13ded024eae7c523298\", [:mix], [{:earmark_parser, \"~> 1.4.19\", [hex: :earmark_parser, repo: \"hexpm\", optional: false]}, {:makeup_elixir, \"~> 0.14\", [hex: :makeup_elixir, repo: \"hexpm\", optional: false]}, {:makeup_erlang, \"~> 0.1\", [hex: :makeup_erlang, repo: \"hexpm\", optional: false]}], \"hexpm\", \"bf85d003dd34911d89c8ddb8bda1a958af3471a274a4c2150a9c01c78ac3f8ed\"},\n  \"makeup\": {:hex, :makeup, \"1.1.0\", \"6b67c8bc2882a6b6a445859952a602afc1a41c2e08379ca057c0f525366fc3ca\", [:mix], [{:nimble_parsec, \"~> 1.2.2 or ~> 1.3\", [hex: :nimble_parsec, repo: \"hexpm\", optional: false]}], \"hexpm\", \"0a45ed501f4a8897f580eabf99a2e5234ea3e75a4373c8a52824f6e873be57a6\"},\n  \"makeup_elixir\": {:hex, :makeup_elixir, \"0.16.0\", \"f8c570a0d33f8039513fbccaf7108c5d750f47d8defd44088371191b76492b0b\", [:mix], [{:makeup, \"~> 1.0\", [hex: :makeup, repo: \"hexpm\", optional: false]}, {:nimble_parsec, \"~> 1.2.3\", [hex: :nimble_parsec, repo: \"hexpm\", optional: false]}], \"hexpm\", \"28b2cbdc13960a46ae9a8858c4bebdec3c9a6d7b4b9e7f4ed1502f8159f338e7\"},\n  \"makeup_erlang\": {:hex, :makeup_erlang, \"0.1.1\", \"3fcb7f09eb9d98dc4d208f49cc955a34218fc41ff6b84df7c75b3e6e533cc65f\", [:mix], [{:makeup, \"~> 1.0\", [hex: :makeup, repo: \"hexpm\", optional: false]}], \"hexpm\", \"174d0809e98a4ef0b3309256cbf97101c6ec01c4ab0b23e926a9e17df2077cbb\"},\n  \"meck\": {:hex, :meck, \"0.8.13\", \"ffedb39f99b0b99703b8601c6f17c7f76313ee12de6b646e671e3188401f7866\", [:rebar3], [], \"hexpm\", \"d34f013c156db51ad57cc556891b9720e6a1c1df5fe2e15af999c84d6cebeb1a\"},\n  \"nimble_parsec\": {:hex, :nimble_parsec, \"1.2.3\", \"244836e6e3f1200c7f30cb56733fd808744eca61fd182f731eac4af635cc6d0b\", [:mix], [], \"hexpm\", \"c8d789e39b9131acf7b99291e93dae60ab48ef14a7ee9d58c6964f59efb570b0\"},\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "strategies",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}