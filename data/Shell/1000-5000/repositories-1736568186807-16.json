{
  "metadata": {
    "timestamp": 1736568186807,
    "page": 16,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tfutils/tfenv",
      "stars": 4582,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0791015625,
          "content": "versions/\nversion\n.terraform-version\nbin/terraform-*\n/use-gnupg\n/use-gpgv\n.*.swp\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.447265625,
          "content": "language: generic\nenv:\n  - CLICOLOR=1\nmatrix:\n  include:\n    - os: windows\n      language: shell\n    - os: linux\n      dist: bionic\n    - os: linux\n      dist: xenial\n    - os: linux\n      dist: trusty\n    - os: osx\n      osx_image: xcode11.4\n    - os: osx\n      osx_image: xcode11.2 # OS X 10.14\n    - os: osx\n      osx_image: xcode10.3\n    - os: osx\n      osx_image: xcode10.1 # OS X 10.13\n    - os: osx\n      osx_image: xcode9.4\nscript:\n  - ./test/run.sh\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.2236328125,
          "content": "## 3.0.0 (July 15, 2022)\n\n * BREAKING CHANGE: Don't install ggrep on macs automatically; it's just not good practice. ggrep now a pre-requisite for Mac.\n * BREAKING CHANGE: When TFENV_AUTO_INSTALL=true, tfenv use will now attempt to install a matching version when no matching version is installed already, including defaulting to latest if no version is specified at the command line or in overrides (Mike Peachey <mike.peachey@bjss.com>)\n * MAJOR THANKS: Extreme performance improvements for bashlog (Zoltán Reegn <zoltan.reegn@gmail.com> & Andrew Bradley <abradley@brightcove.com>)\n * NEW FEATURE: Add support for netrc for private mirrors (Jack Parsons <jack.parsons@test-and-trace.nhs.uk>)\n * NEW FEATURE: Support reversed list of versions from remote (Mike Peachey <mike.peachey@bjss.com>)\n * FIX: Try to fix RC sorting order in use. Do not invoke version on use as it's meaningless and confusing when defaults are overridden (Mike Peachey <mike.peachey@bjss.com>)\n * FIX: Improve mktemp error message (Mike Peachey <mike.peachey@bjss.com>)\n * FIX: #282 - Update warning message when no PGP in use (Mike Peachey <mike.peachey@bjss.com>)\n * FIX: #299 - When AUTO_INSTALL, tfenv use will attempt to install, including default latest (Mike Peachey <mike.peachey@bjss.com>)\n * FIX: #315 - ugly 'no such file or directory' message when setting terraform version for the first time (Mike Peachey <mike.peachey@bjss.com>)\n * FIX: #318 - Updated documentation regarding files instructing PGP usage (Mike Peachey <mike.peachey@bjss.com>)\n * FIX: Add test of auto-installing min-required version (Oliver Ford <dev@ojford.com>)\n * FIX: #300: `min-required` not evaluated for auto-install (Oliver Ford <dev@ojford.com>)\n * FIX: #340 - Unbound variable (Mike Peachey <mike.peachey@bjss.com>)\n * FIX: Install ggrep during mac tests (Mike Peachey <mike.peachey@bjss.com>)\n * FIX: Update README.md for WSL users (Panu Valtanen <p4nu@users.noreply.github.com>)\n * FIX: Look up correct versions location in tfenv-pin and set tfenv-pin as executable (Aaron Madlon-Kay <aaron@madlon-kay.com>)\n * FIX: Handle new alpha versioning syntax (Dylan Turner <dylan.turner@bjss.com>)\n * FIX: Add missing exports (Andrew Bradley <abradley@brightcove.com>)\n * FIX: Extract some libexec commands into helper functions (Andrew Bradley <abradley@brightcove.com>)\n * FIX: ARM/ARM64 support (Volodymyr Samusia <samusia.vs@gmail.com>)\n * FIX: Docs clarification for arm achitecture (Kuba <jakub.glapa@adverity.com>)\n * FIX: Use macos-11 tests (Stephen <stephengroat@users.noreply.github.com>)\n * FIX: README.md - Suggest shallow git clone for regular usage (Aurélien Joga <aurelienjoga@gmail.com>)\n * FIX: Support redirects on downloads (Troy Ready <troy@troyready.com>)\n * FIX: README.md - Support Apple Silicon (Greg Dubicki <grzegorz.dubicki@gmail.com>)\n\n## 2.2.3 (Feb 9, 2022)\n\n * Fix: mktemp not working correctly on Alpine Linux (#285)\n * Add support of ARM64 (#280)\n * Add support for tf.json files on min-required (#277)\n * Fix issue #210 - allow non-numeric values for DEBUG (#274)\n * Download latest version if user uses regex and TFENV_AUTO_INSTALL is true (#272)\n * Add tfenv pin command (#270)\n\n## 2.2.2 (May 6, 2021)\n\n * remove trust from revoked signing key as of hcsec-2021-12\n * fix installation of versions signed by revoked key by forcing to use the new key\n\n## 2.2.1 (April 29, 2021)\n\n * hcsec-2021-12 (#257)\n\n## 2.2.0 (February 06, 2021)\n\n * Convert GitHub CI from Travis CI to Github Actions\n * Fix min-required after it was broken by 2.1.0 (#235)\n * Min-required recursive lookup was dangerously broken. Removed the recursion that should never have been (#237)\n * Fix the failure of tfenv list when no default was set (#236)\n * Add init command (#240)\n * Use ggrep on Mac with Homebrew (#218)\n\n## 2.1.0 (January 30, 2021)\n\n * Update tfenv-min-required to search root before recursing (#203)  \n * Terraform 0.13.0 support (#191)\n * Add Arch Linux install instructions via Arch User Repository (AUR) (#201)\n * min-required correctly finds tagged release versions (#206)\n * install: make keybase a fall-through verification variant (#213)\n * Feature/add TFENV_TERRAFORM_VERSION env var (#222)\n * Document version-name command (#224)\n * Fix signature verification bypass due to insufficient hashsum checking (#212)\n * Fix keybase login exit code handling (#188)\n * Fix bug on MacOS when using CLICOLOR=1 (#152)\n * Improved error handling in tfenv-list-remote-curl (#186)\n * Test in Windows (#140)\n * force tfenv to write over existing zip if it exists (#169)\n * Remove the versions directory when the last version is uninstalled (#128)\n * Add support for sha256sum command (#170)\n * Adding freebsd support (#133)\n * Improve shell script synatx (#174)\n * Begrudging Bash 3.x Compatability because of macOS (#181)\n\n## 2.0.0 (April 20, 2020)\n\n * New logging and debugging library\n * Massive testing, logging and loading refactoring\n * Fix to 'use' logic: don't overwrite .terraform-version files\n * Fix #167 - Never invoke use automatically on install - multiple code and testing changes for new logic\n * Fix to not use 0.12.22 during testing which reports its version incorrectly\n * Introduce tfenv-resolve-version to deduplicate translation of requested version into actual version\n * README.md updates\n * Fix #176 - New parameter TFENV_AUTO_INSTALL to handle the version specified by `use` or a `.terraform-version` file not being installed\n\n## 1.0.2 (October 29, 2019)\n\n * Fix failing 0.11.15-oci version, Add additional tests for 0.11.15-oci and alphas, betas and rcs #145\n * Fix to README section link for .terraform-version file #146\n\n## 1.0.1 (June 22, 2019)\n\n * Fix '--version' flag to return version from CHANGELOG.md when not running from a git checkout.\n\n## 1.0.0 (June 9, 2019)\n\n * A number of bugfixes and basic script improvements\n * latest keyword doesn't include unstable releases unless specified by regex\n * Support GnuPG tools for signature verification #109\n * Add support for Cygwin #81\n\n## 0.6.0 (November 1, 2017)\n\n * Support msys2 bash.exe #75\n * Version from sources #73\n * run tfenv as a neighbour with full path (to keep vscode and whoever doesn't respect %path, happy) #72\n * Add current version in list command #69\n * Version file #67\n * [DOC] Add link to puppet module for automatic tfenv installation #64\n\n## 0.5.2 (July 23, 2017)\n\n * Switch TLS option for curl depending on the version of macOS\n\n## 0.5.1 (July 21, 2017)\n\n * Fix version detection\n * Add support for ARM architecture\n\n## 0.5.0 (=0.4.4) (July 14, 2017)\n\n * Immediately switch version after installation\n * Add uninstall command\n\n## 0.4.3 (April 12, 2017)\n\n * Move temporary directory from /tmp to mktemp\n * Upgrade tfenv-install logging\n * Prevent interactive prompting from keybase\n\n## 0.4.2 (April 9, 2017)\n\n * Add support for verifying downloads of Terraform\n\n## 0.4.1 (March 8, 2017)\n\n * Update error_and_die functions to better report their source location\n * libexec/tfenv-version-name: Respect `latest` & `latest:<regex>` syntax in .terraform-version\n * Extension and development of test suite standards\n\n## 0.4.0 (March 6, 2017)\n\n * Add capability to specify `latest` or `latest:<regex>` in the `use` and `install` actions.\n * Add error_and_die functions to standardise error output\n * Specify --tlsv1.2 to curl requests to remote repo. TLSv1.2 required; supported by but not auto-selected by older NSS.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.8916015625,
          "content": "ARG BASH_VERSION=5\nFROM \"docker.io/bash:${BASH_VERSION}\"\n\n# Runtime dependencies\nRUN apk add --no-cache --purge \\\n    curl \\\n    ;\n\nARG TFENV_VERSION=3.0.0\nRUN wget -O /tmp/tfenv.tar.gz \"https://github.com/tfutils/tfenv/archive/refs/tags/v${TFENV_VERSION}.tar.gz\" \\\n    && tar -C /tmp -xf /tmp/tfenv.tar.gz \\\n    && mv \"/tmp/tfenv-${TFENV_VERSION}/bin\"/* /usr/local/bin/ \\\n    && mkdir -p /usr/local/lib/tfenv \\\n    && mv \"/tmp/tfenv-${TFENV_VERSION}/lib\" /usr/local/lib/tfenv/ \\\n    && mv \"/tmp/tfenv-${TFENV_VERSION}/libexec\" /usr/local/lib/tfenv/ \\\n    && mkdir -p /usr/local/share/licenses \\\n    && mv \"/tmp/tfenv-${TFENV_VERSION}/LICENSE\" /usr/local/share/licenses/tfenv \\\n    && rm -rf /tmp/tfenv* \\\n    ;\nENV TFENV_ROOT /usr/local/lib/tfenv\n\nENV TFENV_CONFIG_DIR /var/tfenv\nVOLUME /var/tfenv\n\n# Default to latest; user-specifiable\nENV TFENV_TERRAFORM_VERSION latest\nENTRYPOINT [\"/usr/local/bin/terraform\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0595703125,
          "content": "\nThe MIT License (MIT)\n\nCopyright (c) 2016 Shinichi Ishimura\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.0126953125,
          "content": "[![CI Test](https://github.com/tfutils/tfenv/actions/workflows/test.yml/badge.svg)](https://github.com/tfutils/tfenv/actions/workflows/test.yml)\n\n# tfenv\n\n[Terraform](https://www.terraform.io/) version manager inspired by [rbenv](https://github.com/rbenv/rbenv)\n\n## Support\n\nCurrently tfenv supports the following OSes\n\n- macOS\n  - 64bit\n  - Arm (Apple Silicon)\n- Linux\n  - 64bit\n  - Arm\n- Windows (64bit) - only tested in git-bash - currently presumed failing due to symlink issues in git-bash\n\n## Installation\n\n### Automatic\n\nInstall via Homebrew\n\n```console\nbrew install tfenv\n```\n\nInstall via Arch User Repository (AUR)\n   \n```console\nyay --sync tfenv\n```\n\nInstall via puppet\n\nUsing puppet module [sergk-tfenv](https://github.com/SergK/puppet-tfenv)\n\n```puppet\ninclude ::tfenv\n```\n\n### Manual\n\n1. Check out tfenv into any path (here is `${HOME}/.tfenv`)\n\n```console\ngit clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv\n```\n\n2. Add `~/.tfenv/bin` to your `$PATH` any way you like\n\nbash:\n```console\necho 'export PATH=\"$HOME/.tfenv/bin:$PATH\"' >> ~/.bash_profile\n```\nzsh:\n```console\n$ echo 'export PATH=\"$HOME/.tfenv/bin:$PATH\"' >> ~/.zprofile\n```\n\nFor WSL users:\n```bash\necho 'export PATH=$PATH:$HOME/.tfenv/bin' >> ~/.bashrc\n```\n\n  OR you can make symlinks for `tfenv/bin/*` scripts into a path that is already added to your `$PATH` (e.g. `/usr/local/bin`) `OSX/Linux Only!`\n\n```console\nln -s ~/.tfenv/bin/* /usr/local/bin\n```\n\n  On Ubuntu/Debian touching `/usr/local/bin` might require sudo access, but you can create `${HOME}/bin` or `${HOME}/.local/bin` and on next login it will get added to the session `$PATH`\n  or by running `. ${HOME}/.profile` it will get added to the current shell session's `$PATH`.\n\n```console\nmkdir -p ~/.local/bin/\n. ~/.profile\nln -s ~/.tfenv/bin/* ~/.local/bin\nwhich tfenv\n```\n\n## Usage\n\n### tfenv install [version]\n\nInstall a specific version of Terraform.\n\nIf no parameter is passed, the version to use is resolved automatically via [TFENV\\_TERRAFORM\\_VERSION environment variable](#tfenv_terraform_version) or [.terraform-version files](#terraform-version-file), in that order of precedence, i.e. TFENV\\_TERRAFORM\\_VERSION, then .terraform-version. The default is 'latest' if none are found.\n\nIf a parameter is passed, available options:\n\n- `x.y.z` [Semver 2.0.0](https://semver.org/) string specifying the exact version to install\n- `latest` is a syntax to install latest version\n- `latest:<regex>` is a syntax to install latest version matching regex (used by grep -e)\n- `latest-allowed` is a syntax to scan your Terraform files to detect which version is maximally allowed.\n- `min-required` is a syntax to scan your Terraform files to detect which version is minimally required.\n\nSee [required_version](https://developer.hashicorp.com/terraform/language/settings) docs. Also [see min-required & latest-allowed](#min-required) section below.\n\n```console\n$ tfenv install\n$ tfenv install 0.7.0\n$ tfenv install latest\n$ tfenv install latest:^0.8\n$ tfenv install latest-allowed\n$ tfenv install min-required\n```\n\nIf `shasum` is present in the path, tfenv will verify the download against Hashicorp's published sha256 hash.\nIf [keybase](https://keybase.io/) is available in the path it will also verify the signature for those published hashes using Hashicorp's published public key.\n\nYou can opt-in to using GnuPG tools for PGP signature verification if keybase is not available:\n\nWhere `TFENV_INSTALL_DIR` is for example, `~/.tfenv` or `/usr/local/Cellar/tfenv/<version>`\n\n```console\necho 'trust-tfenv: yes' > ${TFENV_INSTALL_DIR}/use-gpgv\ntfenv install\n```\n\nThe `trust-tfenv` directive means that verification uses a copy of the\nHashicorp OpenPGP key found in the tfenv repository.  Skipping that directive\nmeans that the Hashicorp key must be in the existing default trusted keys.\nUse the file `${TFENV_INSTALL_DIR}/use-gnupg` to instead invoke the full `gpg` tool and\nsee web-of-trust status; beware that a lack of trust path will not cause a\nvalidation failure.\n\n#### .terraform-version\n\nIf you use a [.terraform-version](#terraform-version-file) file, `tfenv install` (no argument) will install the version written in it.\n\n<a name=\"min-required\"></a>\n#### min-required & latest-allowed\n\nPlease note that we don't do semantic version range parsing but use first ever found version as the candidate for minimally required one. It is up to the user to keep the definition reasonable. I.e.\n\n```terraform\n// this will detect 0.12.3\nterraform {\n  required_version  = \"<0.12.3, >= 0.10.0\"\n}\n```\n\n```terraform\n// this will detect 0.10.8 (the latest 0.10.x release)\nterraform {\n  required_version  = \"~> 0.10.0, <0.12.3\"\n}\n```\n\n### Environment Variables\n\n#### TFENV\n\n##### `TFENV_ARCH`\n\nString (Default: `amd64`)\n\nSpecify architecture. Architecture other than the default amd64 can be specified with the `TFENV_ARCH` environment variable\n\nNote: Default changes to `arm64` for versions that have arm64 builds available when `$(uname -m)` matches `aarch64* | arm64*`\n\n```console\nTFENV_ARCH=arm64 tfenv install 0.7.9\n```\n\n##### `TFENV_AUTO_INSTALL`\n\nString (Default: true)\n\nShould tfenv automatically install terraform if the version specified by defaults or a .terraform-version file is not currently installed.\n\n```console\nTFENV_AUTO_INSTALL=false terraform plan\n```\n\n```console\nterraform use <version that is not yet installed>\n```\n\n##### `TFENV_CURL_OUTPUT`\n\nInteger (Default: 2)\n\nSet the mechanism used for displaying download progress when downloading terraform versions from the remote server.\n\n* 2: v1 Behaviour: Pass `-#` to curl\n* 1: Use curl default\n* 0: Pass `-s` to curl\n\n##### `TFENV_DEBUG`\n\nInteger (Default: 0)\n\nSet the debug level for TFENV.\n\n* 0: No debug output\n* 1: Simple debug output\n* 2: Extended debug output, with source file names and interactive debug shells on error\n* 3: Debug level 2 + Bash execution tracing\n\n##### `TFENV_REMOTE`\n\nString (Default: https://releases.hashicorp.com)\n\nTo install from a remote other than the default\n\n```console\nTFENV_REMOTE=https://example.jfrog.io/artifactory/hashicorp\n```\n\n##### `TFENV_REVERSE_REMOTE`\n\nInteger (Default: 0)\n\nWhen using a custom remote, such as Artifactory, instead of the Hashicorp servers,\nthe list of terraform versions returned by the curl of the remote directory may be inverted.\nIn this case the `latest` functionality will not work as expected because it expects the\nversions to be listed in order of release date from newest to oldest. If your remote\nis instead providing a list that is oldes-first, set `TFENV_REVERSE_REMOTE=1` and\nfunctionality will be restored.\n\n```console\nTFENV_REVERSE_REMOTE=1 tfenv list-remote\n```\n\n##### `TFENV_CONFIG_DIR`\n\nPath (Default: `$TFENV_ROOT`)\n\nThe path to a directory where the local terraform versions and configuration files exist.\n\n```console\nTFENV_CONFIG_DIR=\"$XDG_CONFIG_HOME/tfenv\"\n```\n\n##### `TFENV_TERRAFORM_VERSION`\n\nString (Default: \"\")\n\nIf not empty string, this variable overrides Terraform version, specified in [.terraform-version files](#terraform-version-file).\n`latest` and `latest:<regex>` syntax are also supported.\n[`tfenv install`](#tfenv-install-version) and [`tfenv use`](#tfenv-use-version) command also respects this variable.\n\ne.g.\n\n```console\nTFENV_TERRAFORM_VERSION=latest:^0.11. terraform --version\n```\n\n##### `TFENV_NETRC_PATH`\n\nString (Default: \"\")\n\nIf not empty string, this variable specifies the credentials file used to access the remote location (useful if used in conjunction with TFENV_REMOTE).\n\ne.g.\n\n```console\nTFENV_NETRC_PATH=\"$PWD/.netrc.tfenv\"\n```\n\n#### Bashlog Logging Library\n\n##### `BASHLOG_COLOURS`\n\nInteger (Default: 1)\n\nTo disable colouring of console output, set to 0.\n\n\n##### `BASHLOG_DATE_FORMAT`\n\nString (Default: +%F %T)\n\nThe display format for the date as passed to the `date` binary to generate a datestamp used as a prefix to:\n\n* `FILE` type log file lines.\n* Each console output line when `BASHLOG_EXTRA=1`\n\n##### `BASHLOG_EXTRA`\n\nInteger (Default: 0)\n\nBy default, console output from tfenv does not print a date stamp or log severity.\n\nTo enable this functionality, making normal output equivalent to FILE log output, set to 1.\n\n##### `BASHLOG_FILE`\n\nInteger (Default: 0)\n\nSet to 1 to enable plain text logging to file (FILE type logging).\n\nThe default path for log files is defined by /tmp/$(basename $0).log\nEach executable logs to its own file.\n\ne.g.\n\n```console\nBASHLOG_FILE=1 tfenv use latest\n```\n\nwill log to `/tmp/tfenv-use.log`\n\n##### `BASHLOG_FILE_PATH`\n\nString (Default: /tmp/$(basename ${0}).log)\n\nTo specify a single file as the target for all FILE type logging regardless of the executing script.\n\n##### `BASHLOG_I_PROMISE_TO_BE_CAREFUL_CUSTOM_EVAL_PREFIX`\n\nString (Default: \"\")\n\n*BE CAREFUL - MISUSE WILL DESTROY EVERYTHING YOU EVER LOVED*\n\nThis variable allows you to pass a string containing a command that will be executed using `eval` in order to produce a prefix to each console output line, and each FILE type log entry.\n\ne.g.\n\n```console\nBASHLOG_I_PROMISE_TO_BE_CAREFUL_CUSTOM_EVAL_PREFIX='echo \"${$$} \"'\n```\nwill prefix every log line with the calling process' PID.\n\n##### `BASHLOG_JSON`\n\nInteger (Default: 0)\n\nSet to 1 to enable JSON logging to file (JSON type logging).\n\nThe default path for log files is defined by /tmp/$(basename $0).log.json\nEach executable logs to its own file.\n\ne.g.\n\n```console\nBASHLOG_JSON=1 tfenv use latest\n```\n\nwill log in JSON format to `/tmp/tfenv-use.log.json`\n\nJSON log content:\n\n`{\"timestamp\":\"<date +%s>\",\"level\":\"<log-level>\",\"message\":\"<log-content>\"}`\n\n##### `BASHLOG_JSON_PATH`\n\nString (Default: /tmp/$(basename ${0}).log.json)\n\nTo specify a single file as the target for all JSON type logging regardless of the executing script.\n\n##### `BASHLOG_SYSLOG`\n\nInteger (Default: 0)\n\nTo log to syslog using the `logger` binary, set this to 1.\n\nThe basic functionality is thus:\n\n```console\nlocal tag=\"${BASHLOG_SYSLOG_TAG:-$(basename \"${0}\")}\";\nlocal facility=\"${BASHLOG_SYSLOG_FACILITY:-local0}\";\nlocal pid=\"${$}\";\nlogger --id=\"${pid}\" -t \"${tag}\" -p \"${facility}.${severity}\" \"${syslog_line}\"\n```\n\n##### `BASHLOG_SYSLOG_FACILITY`\n\nString (Default: local0)\n\nThe syslog facility to specify when using SYSLOG type logging.\n\n##### `BASHLOG_SYSLOG_TAG`\n\nString (Default: $(basename $0))\n\nThe syslog tag to specify when using SYSLOG type logging.\n\nDefaults to the PID of the calling process.\n\n\n\n### tfenv use [version]\n\nSwitch a version to use\n\nIf no parameter is passed, the version to use is resolved automatically via [.terraform-version files](#terraform-version-file) or [TFENV\\_TERRAFORM\\_VERSION environment variable](#tfenv_terraform_version) (TFENV\\_TERRAFORM\\_VERSION takes precedence), defaulting to 'latest' if none are found.\n\n`latest` is a syntax to use the latest installed version\n\n`latest:<regex>` is a syntax to use latest installed version matching regex (used by grep -e)\n\n`min-required` will switch to the version minimally required by your terraform sources (see above `tfenv install`)\n\n```console\n$ tfenv use\n$ tfenv use min-required\n$ tfenv use 0.7.0\n$ tfenv use latest\n$ tfenv use latest:^0.8\n```\n\nNote: `tfenv use latest` or `tfenv use latest:<regex>` will find the latest matching version that is already installed. If no matching versions are installed, and TFENV_AUTO_INSTALL is set to `true` (which is the default) the the latest matching version in the remote repository will be installed and used.\n\n### tfenv uninstall &lt;version>\n\nUninstall a specific version of Terraform\n`latest` is a syntax to uninstall latest version\n`latest:<regex>` is a syntax to uninstall latest version matching regex (used by grep -e)\n\n```console\n$ tfenv uninstall 0.7.0\n$ tfenv uninstall latest\n$ tfenv uninstall latest:^0.8\n```\n\n### tfenv list\n\nList installed versions\n\n```console\n$ tfenv list\n* 0.10.7 (set by /opt/tfenv/version)\n  0.9.0-beta2\n  0.8.8\n  0.8.4\n  0.7.0\n  0.7.0-rc4\n  0.6.16\n  0.6.2\n  0.6.1\n```\n\n### tfenv list-remote\n\nList installable versions\n\n```console\n$ tfenv list-remote\n0.9.0-beta2\n0.9.0-beta1\n0.8.8\n0.8.7\n0.8.6\n0.8.5\n0.8.4\n0.8.3\n0.8.2\n0.8.1\n0.8.0\n0.8.0-rc3\n0.8.0-rc2\n0.8.0-rc1\n0.8.0-beta2\n0.8.0-beta1\n0.7.13\n0.7.12\n...\n```\n\n## .terraform-version file\n\nIf you put a `.terraform-version` file on your project root, or in your home directory, tfenv detects it and uses the version written in it. If the version is `latest` or `latest:<regex>`, the latest matching version currently installed will be selected.\n\nNote, that [TFENV\\_TERRAFORM\\_VERSION environment variable](#tfenv_terraform_version) can be used to override version, specified by `.terraform-version` file.\n\n```console\n$ cat .terraform-version\n0.6.16\n\n$ terraform version\nTerraform v0.6.16\n\nYour version of Terraform is out of date! The latest version\nis 0.7.3. You can update by downloading from www.terraform.io\n\n$ echo 0.7.3 > .terraform-version\n\n$ terraform version\nTerraform v0.7.3\n\n$ echo latest:^0.8 > .terraform-version\n\n$ terraform version\nTerraform v0.8.8\n\n$ TFENV_TERRAFORM_VERSION=0.7.3 terraform --version\nTerraform v0.7.3\n```\n\n## Upgrading\n\n```console\ngit --git-dir=~/.tfenv/.git pull\n```\n\n## Uninstalling\n\n```console\nrm -rf /some/path/to/tfenv\n```\n\n## LICENSE\n\n- [tfenv itself](https://github.com/tfutils/tfenv/blob/master/LICENSE)\n- [rbenv](https://github.com/rbenv/rbenv/blob/master/LICENSE)\n  - tfenv partially uses rbenv's source code\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "libexec",
          "type": "tree",
          "content": null
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}