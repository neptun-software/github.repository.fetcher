{
  "metadata": {
    "timestamp": 1736568812770,
    "page": 969,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "syscl/Enable-HiDPI-OSX",
      "stars": 1037,
      "defaultBranch": "master",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.08203125,
          "content": "Enable HiDPI on macOS\n============\n\nHola, this is an ongoing project targets at enable the support of HiDPI for display with a high resolution under macOS. AFAIK, there is various way to patch/force the HiDPI mode, however, I want to create a more precise and clean way to patch the system. That's why I start to build this project.\n\nI know there's still long way to go, but this time, I want to share this patch ASAP. All the suggestions are welcome. I just added a new function which can add as much as HiDPI resolutions you want at the same time. Wish you will enjoy it!\n\nHow to use?\n----------------\nDownload the latest enable-HiDPI.sh by entering the following command in a terminal window:\n\n``` sh\ncurl -o ~/enable-HiDPI.sh https://raw.githubusercontent.com/syscl/Enable-HiDPI-OSX/master/enable-HiDPI.sh\n```\nDownload the latest restore program just in case the ```enable-HiDPI``` stall the system\n```sh\ncurl -o ~/restore https://raw.githubusercontent.com/syscl/Enable-HiDPI-OSX/master/restore\n```\n\n\nThis will download enable-HiDPI.sh and restore.sh to your home directory (~) and the next step is to change the permissions of the file (add +x) so that it can be run.\n \n``` sh\nchmod +x ~/enable-HiDPI.sh\nchmod +x ~/restore\n```\n\n\nRun the script in a terminal window by:\n\n``` sh\n~/enable-HiDPI.sh\n```\n\nOnce you finish injecting the HiDPI values, reboot your OS X and use Retina Display Menu  (RDM) to choose the resolution you want.\n\nHow to restore?\n----------------\nGo to ```single``` mode in macOS, enter the following\n```sh\n/sbin/fsck -fy /\n/sbin/mount -uw /\n```\nThis will make your root filesystem avaiable to read and write, we then go to the home directory of your unix user name, suppose my user name is ```syscl```, then I should type in \n```sh\ncd /User/syscl\n./restore\n```\nChoose the restore point you want it to restore, then type in reboot to restore back to original \n```sh\nreboot\n```\n\nChange Log\n----------------\n2019-01-19\n\n- Implemented restore script in case incorrect settings stall the system\n\n2018-03-18\n\n- Fixed the issue #16 and issue #32 by removing the redundant prefix\n\n2018-03-16\n\n- More lightweight program by removing ```plistbuddy```\n- Cleanup redudant code\n\n2018-02-17\n\n- Fixed ```HiDPI``` inject issue on ```10.12+```\n\n2016-10-4\n\n- Fixed Artoria2e5's typo credit @jqqqqqqqqqq\n\n2016-10-1\n\n- Fixed variable errors/typo, fully support for 4K display credit @Artoria2e5.\n\n2016-7-30\n\n- Optimised message display, more precise and easier to read credit @transtone.\n\n2016-5-24\n\n- Fixed major bug.\n- Optimised code.\n\n2016-5-23\n\n- Fixed logical issue that causes backup failure.\n- Optimised code.\n\n2016-5-22\n\n- Added multi monitors/displays support credit @liusunpan see issue #4.\n- Optimised code.\n\n2016-3-4\n\n- Fixed a logical problem that casue the enable failure. Tested sucessfully on my HP 2009f @1600x900(now it can be switched to 1366x768, 1440x810.)\n\n2016-3-3\n\n- You can use the enable-HiDPI.sh directly to fully enable HiDPI on your OS X.\n\n- Note: This is the first version of enable-HiDPI, I just tested it on 10.11.3, more function will be added late. If you find bugs please let me know through the \"Issuses\" tab.\n\n////\n"
        },
        {
          "name": "enable-HiDPI.sh",
          "type": "blob",
          "size": 10.7294921875,
          "content": "#!/bin/sh\n\n#  enable-HiDPI.sh\n#  \n#\n#  Created by syscl/lighting/Yating Zhou on 16/3/2.\n#\n\n#================================= GLOBAL VARS ==================================\n\n#\n# The script expects '0.5' but non-US localizations use '0,5' so we export\n# LC_NUMERIC here (for the duration of the enable-HiDPI.sh) to prevent errors.\n#\nexport LC_NUMERIC=\"en_US.UTF-8\"\n\n#\n# Prevent non-printable/control characters.\n#\nunset GREP_OPTIONS\nunset GREP_COLORS\nunset GREP_COLOR\n\n#\n# Output styling.\n#\nBOLD=\"\\033[1m\"\nRED=\"\\033[1;31m\"\nGREEN=\"\\033[1;32m\"\nBLUE=\"\\033[1;34m\"\nOFF=\"\\033[m\"\nSTYLE_UNDERLINED=\"\\e[4m\"\n\n#\n# Define two status: 0 - Success, Turn on,\n#                    1 - Failure, Turn off\n#\nkBASHReturnSuccess=0\nkBASHReturnFailure=1\n\n#\n# Repository location\n#\nREPO=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\n\n#\n# Define variables.\n# Gvariables stands for getting datas from OS X.\n#\ngDisplayVendorID_RAW=\"\"\ngDisplayVendorID=\"\"\ngDisplayProductID_RAW=\"\"\ngDisplayProductID_reverse=\"\"\ngDisplayProductID=\"\"\ngConfig=\"\"\ngRes_RAW=\"F\"\ngRes_VAL=\"\"\ngRes_ENCODE=\"\"\ngHeight_HiDPI=\"\"\ngWide_HiDPI=\"\"\ngHeight_HiDPI_VAL=\"\"\ngWide_HiDPI_VAL=\"\"\ngRes_HiDPI_VAL=\"\"\ngRes_HiDPI_ENCODE=\"\"\ngDstPath=\"\"\n# gBak_Time=$(date +%Y-%m-%d-h%H_%M_%S)\ngBak_Time=$(date +%Y-%m-%d@%H_%M_%S)\ngBak_Dir=\"${REPO}/Display-Backups/${gBak_Time}\"\n\n#\n# Define gConfig\n#\ngConfig=\"\"\n\n#\n#--------------------------------------------------------------------------------\n#\n\nfunction _PRINT_MSG()\n{\n    local message=$1\n\n    case \"$message\" in\n      OK*    ) local message=$(echo $message | sed -e 's/.*OK://')\n               echo \"[  ${GREEN}OK${OFF}  ] ${message}.\"\n               ;;\n\n      FAILED*) local message=$(echo $message | sed -e 's/.*://')\n               echo \"[${RED}FAILED${OFF}] ${message}.\"\n               ;;\n\n      ---*   ) local message=$(echo $message | sed -e 's/.*--->://')\n               echo \"[ ${GREEN}--->${OFF} ] ${message}\"\n               ;;\n\n      NOTE*  ) local message=$(echo $message | sed -e 's/.*NOTE://')\n               echo \"[ ${RED}Note${OFF} ] ${message}.\"\n               ;;\n    esac\n}\n\n#\n#--------------------------------------------------------------------------------\n#\n\nfunction _tidy_exec()\n{\n    if [ $gDebug -eq 0 ];\n      then\n        #\n        # Using debug mode to output all the details.\n        #\n        _PRINT_MSG \"DEBUG: $2\"\n        $1\n      else\n        #\n        # Make the output clear.\n        #\n        $1 >/tmp/report 2>&1 && RETURN_VAL=${kBASHReturnSuccess} || RETURN_VAL=${kBASHReturnFailure}\n\n        if [ \"${RETURN_VAL}\" == ${kBASHReturnSuccess} ];\n          then\n            _PRINT_MSG \"OK: $2\"\n          else\n            _PRINT_MSG \"FAILED: $2\"\n            cat /tmp/report\n        fi\n\n        rm /tmp/report &> /dev/null\n    fi\n}\n\n#\n#--------------------------------------------------------------------------------\n#\n\nfunction _getEDID()\n{\n    local index=0\n    local selection=0\n\n    gDisplayInf=($(ioreg -lw0 | grep -i \"IODisplayEDID\" | sed -e \"/[^<]*</s///\" -e \"s/\\>//\"))\n\n    if [[ \"${#gDisplayInf[@]}\" -ge 2 ]];\n      then\n        #\n        # Multi monitors detected. Choose target monitor.\n        #\n        echo '         Table of monitors          '\n        echo '------------------------------------'\n        echo '  Index  |  VendorID  |  ProductID  '\n        echo '------------------------------------'\n        for display in \"${gDisplayInf[@]}\"\n        do\n          let index++\n          #\n          # Show monitors.\n          #\n          printf \"    %d    |    ${display:16:4}    |    ${display:20:4}\\n\" $index\n        done\n        #\n        # Close the table\n        #\n        echo '------------------------------------'\n        #\n        # Let user make a selection.\n        #\n        printf 'Choose the display to enable HiDPI'\n        if [[ \"${#gDisplayInf[@]}\" == 2 ]]; then\n            printf \"[${STYLE_UNDERLINED}E${OFF}xit/1/2]\"\n        else\n            printf \"[${STYLE_UNDERLINED}E${OFF}xit/1-${index}]\"\n        fi\n        read -p \": \" selection\n        case \"$(_toLowerCase $selection)\" in\n        e|exit       ) echo \"Abort.\"\n                       exit -0\n                       ;;\n\n        [[:digit:]]* ) #\n                       # Lower selection (arrays start at zero).\n                       #\n                       let selection-=1\n                       gMonitor=${gDisplayInf[$selection]}\n                       ;;\n\n        *            )  if [[ \"${#gDisplayInf[@]}\" == 2  ]]; then\n                            echo 'Invalid menu action, enter 1 or 2'\n                        else\n                            echo \"Invalid menu action, enter valid number among 1, ..., ${index}\"\n                        fi\n                       ;;\n        esac\n      else\n        gMonitor=${gDisplayInf}\n    fi\n    #\n    # Fix for issue #16 and #32\n    #\n    if [[ ${gMonitor:16:1} == 0 ]]; then\n        # get rid of the prefix 0\n        gDisplayVendorID_RAW=${gMonitor:17:3}\n    else\n        gDisplayVendorID_RAW=${gMonitor:16:4}\n    fi\n    # convert from hex to dec\n    gDisplayVendorID=$((0x$gDisplayVendorID_RAW))\n    gDisplayProductID_RAW=${gMonitor:20:4}\n    #\n    # Exchange two bytes\n    #\n    # Fix an issue that will cause wrong name of DisplayProductID\n    #\n    if [[ ${gDisplayProductID_RAW:2:1} == 0 ]]; then\n        # get rid of the prefix 0\n        gDisplayProduct_pr=${gDisplayProductID_RAW:3:1}\n    else\n        gDisplayProduct_pr=${gDisplayProductID_RAW:2:2}\n    fi\n    gDisplayProduct_st=${gDisplayProductID_RAW:0:2}\n    gDisplayProductID_reverse=\"${gDisplayProduct_pr}${gDisplayProduct_st}\"\n    gDisplayProductID=$((0x$gDisplayProduct_pr$gDisplayProduct_st))\n\n#   echo $gDisplayVendorID_RAW\n#   echo $gDisplayVendorID\n#   echo $gDisplayProductID_RAW\n#   echo $gDisplayProductID\n\n    gConfig=${REPO}/DisplayVendorID-$gDisplayVendorID_RAW/DisplayProductID-$gDisplayProductID_reverse\n}\n\n#\n#--------------------------------------------------------------------------------\n#\n\nfunction _printHeader()\n{\n    echo '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'\n    echo '<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">'\n    echo '<plist version=\"1.0\">'\n    echo '<dict>'\n    printf '\\t<key>DisplayProductID</key>\\n'\n    printf \"\\t<integer>${gDisplayProductID}</integer>\\n\"\n    printf '\\t<key>DisplayVendorID</key>\\n'\n    printf \"\\t<integer>${gDisplayVendorID}</integer>\\n\"\n    printf '\\t<key>scale-resolutions</key>\\n'\n    printf '\\t<array>\\n'\n}\n\n#\n#--------------------------------------------------------------------------------\n#\n\nfunction _closeField()\n{\n    printf '\\t</array>\\n'\n    echo '</dict>'\n    echo '</plist>'\n}\n\n#\n#--------------------------------------------------------------------------------\n#\n\nfunction _create_dir()\n{\n    if [ ! -d \"$1\" ];\n      then\n        mkdir -p \"$1\"\n    fi\n}\n\n#\n#--------------------------------------------------------------------------------\n#\n\nfunction _del()\n{\n    local target_file=$1\n\n    if [ -d ${target_file} ];\n      then\n        _tidy_exec \"rm -R ${target_file}\" \"Remove old ${target_file}\"\n      else\n        if [ -f ${target_file} ];\n          then\n            _tidy_exec \"rm ${target_file}\" \"Remove old ${target_file}\"\n        fi\n    fi\n}\n\n#\n#--------------------------------------------------------------------------------\n#\n\nfunction _cleanup()\n{\n    _create_dir ${gBak_Dir}\n    _del ${REPO}/DisplayVendorID-*\n    _create_dir ${REPO}/DisplayVendorID-$gDisplayVendorID_RAW\n}\n\n#\n#--------------------------------------------------------------------------------\n#\n\nfunction _toLowerCase()\n{\n    echo \"`echo $1 | tr '[:upper:]' '[:lower:]'`\"\n}\n\n#\n#--------------------------------------------------------------------------------\n#\n\nfunction _calcsRes()\n{\n    #\n    # Increment i stands for adding arrays.\n    #\n    i=0\n\n    while [ \"$gRes_RAW\" != 0 ];\n    do\n      printf \"Enter the HiDPI resolution (e.g. 1600x900, 1440x910, ...), ${BOLD}0${OFF} to quit\"\n      read -p \": \" gRes_RAW\n\n      if [[ $gRes_RAW != 0 ]];\n        then\n          #\n          # Raw Datas\n          #\n          gHeightVAL=$(echo $gRes_RAW | cut -f 1 -d \"x\")\n          gWideVAL=$(echo $gRes_RAW | cut -f 2 -d \"x\")\n\n\n          #\n          # Generate Resolution Values (Hex)\n          #\n          gRes_VAL=$(printf '%08x %08x 00000001 02000000' $gHeightVAL $gWideVAL)\n          # HiDPI is twice the size.\n          gRes_HiDPI_VAL=$(printf '%08x %08x 00000001 02000000' $((gHeightVAL*2)) $((gWideVAL*2)))\n\n          #\n          # Encode Resolution Values(Hex) into base64\n          #\n          gRes_ENCODE=$(printf $gRes_VAL | xxd -r -p | base64)\n          gRes_HiDPI_ENCODE=$(printf $gRes_HiDPI_VAL | xxd -r -p | base64)\n\n          #\n          # Inject HiDPI values.\n          #\n          printf \"\\t\\t<data>${gRes_HiDPI_ENCODE}</data>\\n\" >> \"$gConfig\"\n\n          gRes_RAW=\"\"\n          i=$(($i+1))\n      fi\n    done\n}\n\n#\n#--------------------------------------------------------------------------------\n#\n\nfunction _OSCheck()\n{\n    #\n    # Extract minor version (eg. 10.9 vs. 10.10 vs. 10.11)\n    #\n    MINOR_VER=$([[ \"$(sw_vers -productVersion)\" =~ [0-9]+\\.([0-9]+) ]] && echo ${BASH_REMATCH[1]})\n    if [[ $MINOR_VER -ge 11 ]]; \n      then\n        gDstPath=\"/System/Library/Displays/Contents/Resources/Overrides\"\n      else\n        gDstPath=\"/System/Library/Displays/Overrides\"\n    fi\n}\n\n#\n#--------------------------------------------------------------------------------\n#\n\nfunction _patch()\n{\n    #\n    # Count number indicates patch system or not.\n    #\n    if [ $i != 0 ];\n      then\n        _tidy_exec \"cp -R \"$gDstPath\" ${gBak_Dir}\" \"Backup $gDstPath\"\n        sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool YES\n\n        if [ -f \"/Library/Preferences/com.apple.windowserver\" ];\n          then\n            sudo defaults delete /Library/Preferences/com.apple.windowserver DisplayResolutionDisabled 2>&1 >/dev/null\n        fi\n\n        sudo cp -R \"${REPO}/DisplayVendorID-$gDisplayVendorID_RAW\" \"$gDstPath\"\n        _PRINT_MSG \"OK: Done. Reboot then use Retina Display Menu (RDM) to select the HiDPI resolution just injected!\"\n      else\n        _PRINT_MSG \"NOTE: All system files remain unchanged.\"\n    fi\n}\n\n#\n#--------------------------------------------------------------------------------\n#\n\nfunction main()\n{\n    #\n    # Get argument.\n    #\n    gArgv=$(echo \"$@\" | tr '[:lower:]' '[:upper:]')\n    if [[ $# -eq 1 && \"$gArgv\" == \"-D\" || \"$gArgv\" == \"-DEBUG\" ]];\n      then\n        #\n        # Yes, we do need debug mode.\n        #\n        _PRINT_MSG \"NOTE: Use ${BLUE}DEBUG${OFF} mode\"\n        gDebug=0\n      else\n        #\n        # No, we need a clean output style.\n        #\n        gDebug=1\n    fi\n\n    _getEDID\n    _cleanup\n    _printHeader > \"$gConfig\"\n    _calcsRes\n    _closeField  >>\"$gConfig\"\n    _OSCheck\n    _patch\n}\n\n#==================================== START =====================================\n\nmain \"$@\"\n\n#================================================================================\n\nexit 0\n"
        },
        {
          "name": "restore",
          "type": "blob",
          "size": 2.3134765625,
          "content": "#!/bin/sh\n\n# 2019-present (c) syscl\n# restore under single mode\n# Execute script location\nREPO=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\nBackupRoot=\"${REPO}/Display-Backups\"\nif [ ! -d ${BackupRoot} ]; then\n    # no backup found\n    echo \"${BackupRoot} does not exist, abort.\"\n    exit -1\nfi\nListOfBackup=($(ls ${BackupRoot} |sort -r))\nif [[ ${#ListOfBackup[@]} == 0 ]]; then\n    # no backup found\n    echo \"No backups found in ${BackupRoot}, abort.\"\n    exit -2\nfi\n\n#\n#--------------------------------------------------------------------------------\n#\n\nfunction toLowerCase()\n{\n    echo \"`echo $1 | tr '[:upper:]' '[:lower:]'`\"\n}\n\n#\n#--------------------------------------------------------------------------------\n#\n\nif [[ \"${#ListOfBackup[@]}\" -ge 2 ]]; then\n    echo '------------------------------------'\n    echo '     Display Overrides Backups      '\n    echo '------------------------------------'\n    index=0\n    for dbak in \"${ListOfBackup[@]}\"\n    do\n        let index++\n        printf \"[%d] ${dbak}\\n\" $index\n    done\n    echo '------------------------------------'\n    # Let user make a selection.\n    printf 'Choose the backup to restore (type in e to exit)'\n    if [[ \"${#ListOfBackup[@]}\" == 2 ]]; then\n        printf \"[Exit/1/2]\"\n    else\n        printf \"[Exit/1-${index}]\"\n    fi\n    read -p \": \" selection\n\n    case \"$(toLowerCase $selection)\" in\n        e|exit       ) echo \"Abort.\"\n                       exit -0\n                       ;;\n\n        [[:digit:]]* ) # Lower selection (arrays start at zero).\n                       let selection-=1\n                       backup=\"${BackupRoot}/${ListOfBackup[$selection]}\"\n                       ;;\n\n        *            ) if [[ \"${#ListOfBackup[@]}\" == 2  ]]; then\n                        echo 'Invalid menu action, enter 1 or 2'\n                       else\n                        echo \"Invalid menu action, enter valid number among 1, ..., ${index}\"\n                      fi\n                      ;;\n    esac\nelse\n    backup=\"${BackupRoot}/${ListOfBackup}\"\nfi\n\n# check the system release\nsys_minor=$(uname -r |cut -f 1 -d \".\")\nlet sys_minor-=4\nif [[ $sys_minor -ge 11 ]]; then\n    target=\"/System/Library/Displays/Contents/Resources/Overrides\"\nelse \n    target=\"/System/Library/Displays/Overrides\"\nfi\n\n# restore back the backup\ncp -R \"${backup}\" \"${target}\"\n\necho \"Restore completed.\"\nexit 0\n"
        }
      ]
    }
  ]
}