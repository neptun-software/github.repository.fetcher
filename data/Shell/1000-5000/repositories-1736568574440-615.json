{
  "metadata": {
    "timestamp": 1736568574440,
    "page": 615,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "oooldking/script",
      "stars": 1493,
      "defaultBranch": "master",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.1650390625,
          "content": "# Some Linux scripts\n## SuperTrace.sh\n- Description: Auto Traceroute to China Network\n- Intro:  https://www.oldking.net/1359.html\n- Copyright (C) 2017-2022 Oldking <oooldking@gmail.com>\n \n```bash\nUsage:\n\n| No.      | Bash Command                    \n|----------|---------------------------------\n| 1        | wget -qO- oldking.net/supertrace.sh | bash\n```\n\n## SuperSpeed.sh\n- Description: Test your server's network with Speedtest to China\n- Intro:  https://www.oldking.net/305.html\n- Copyright (C) 2017-2022 Oldking <oooldking@gmail.com>\n \n```bash\nUsage:\n\n| No.      | Bash Command                    \n|----------|---------------------------------\n| 1        | wget -qO- oldking.net/superspeed.sh | bash\n```\n## SuperBench.sh\n- Description: Auto test download & I/O speed & network to China script\n- Intro:  https://www.oldking.net/350.html\n- Copyright (C) 20017-2022 Oldking <oooldking@gmail.com>\n\n```bash\nUsage:\n\n| No.      | Bash Command                    |\n|----------|---------------------------------|\n| 1        | wget -qO- git.io/superbench.sh | bash       |\n| 2        | curl -Lso- git.io/superbench.sh | bash      |\n| 3        | wget -qO- oldking.net/superbench.sh | bash  |\n```\n \n\n"
        },
        {
          "name": "ip_info.py",
          "type": "blob",
          "size": 0.251953125,
          "content": "#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\nimport urllib2\nimport json\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\nip_api = urllib2.urlopen(r'http://ip-api.com/json')\n\nijson = json.loads(ip_api.read())\n\nprint ijson[sys.argv[1].encode('utf-8')]"
        },
        {
          "name": "ipip.py",
          "type": "blob",
          "size": 0.2412109375,
          "content": "#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\nimport urllib2\nimport json\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\nf = open(\"ip_json.json\",'r')\nijson = json.load(f)\njjson = ijson['location']\n\nprint jjson[sys.argv[1].encode('utf-8')]"
        },
        {
          "name": "speedtest_cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "superbench.sh",
          "type": "blob",
          "size": 18.818359375,
          "content": "#!/usr/bin/env bash\n#\n# Description: Auto system info & I/O test & network to China script\n#\n# Copyright (C) 2017 - 2020 Oldking <oooldking@gmail.com>\n#\n# Thanks: Bench.sh <i@teddysun.com>\n#\n# URL: https://www.oldking.net/350.html\n#\n\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[0;33m'\nSKYBLUE='\\033[0;36m'\nPLAIN='\\033[0m'\n\nabout() {\n\techo \"\"\n\techo \" ========================================================= \"\n\techo \" \\                 Superbench.sh  Script                 / \"\n\techo \" \\       Basic system info, I/O test and speedtest       / \"\n\techo \" \\                   v1.1.7 (7 Apr 2020)                 / \"\n\techo \" \\                   Created by Oldking                  / \"\n\techo \" ========================================================= \"\n\techo \"\"\n\techo \" Intro: https://www.oldking.net/350.html\"\n\techo \" Copyright (C) 2020 Oldking oooldking@gmail.com\"\n\techo \"\"\n}\n\ncancel() {\n\techo \"\"\n\tnext;\n\techo \" Abort ...\"\n\techo \" Cleanup ...\"\n\tcleanup;\n\techo \" Done\"\n\texit\n}\n\ntrap cancel SIGINT\n\nbenchinit() {\n\tif [ -f /etc/redhat-release ]; then\n\t    release=\"centos\"\n\telif cat /etc/issue | grep -Eqi \"debian\"; then\n\t    release=\"debian\"\n\telif cat /etc/issue | grep -Eqi \"ubuntu\"; then\n\t    release=\"ubuntu\"\n\telif cat /etc/issue | grep -Eqi \"centos|red hat|redhat\"; then\n\t    release=\"centos\"\n\telif cat /proc/version | grep -Eqi \"debian\"; then\n\t    release=\"debian\"\n\telif cat /proc/version | grep -Eqi \"ubuntu\"; then\n\t    release=\"ubuntu\"\n\telif cat /proc/version | grep -Eqi \"centos|red hat|redhat\"; then\n\t    release=\"centos\"\n\tfi\n\n\t[[ $EUID -ne 0 ]] && echo -e \"${RED}Error:${PLAIN} This script must be run as root!\" && exit 1\n\n\tif  [ ! -e '/usr/bin/python' ]; then\n\t        echo \" Installing Python ...\"\n\t            if [ \"${release}\" == \"centos\" ]; then\n\t            \t\tyum update > /dev/null 2>&1\n\t                    yum -y install python > /dev/null 2>&1\n\t                else\n\t                \tapt-get update > /dev/null 2>&1\n\t                    apt-get -y install python > /dev/null 2>&1\n\t                fi\n\t        \n\tfi\n\n\tif  [ ! -e '/usr/bin/curl' ]; then\n\t        echo \" Installing Curl ...\"\n\t            if [ \"${release}\" == \"centos\" ]; then\n\t                yum update > /dev/null 2>&1\n\t                yum -y install curl > /dev/null 2>&1\n\t            else\n\t                apt-get update > /dev/null 2>&1\n\t                apt-get -y install curl > /dev/null 2>&1\n\t            fi\n\tfi\n\n\tif  [ ! -e '/usr/bin/wget' ]; then\n\t        echo \" Installing Wget ...\"\n\t            if [ \"${release}\" == \"centos\" ]; then\n\t                yum update > /dev/null 2>&1\n\t                yum -y install wget > /dev/null 2>&1\n\t            else\n\t                apt-get update > /dev/null 2>&1\n\t                apt-get -y install wget > /dev/null 2>&1\n\t            fi\n\tfi\n\n\tif  [ ! -e './speedtest-cli/speedtest' ]; then\n\t\techo \" Installing Speedtest-cli ...\"\n\t\twget --no-check-certificate -qO speedtest.tgz https://cdn.jsdelivr.net/gh/oooldking/script@1.1.7/speedtest_cli/ookla-speedtest-1.0.0-$(uname -m)-linux.tgz > /dev/null 2>&1\n\tfi\n\tmkdir -p speedtest-cli && tar zxvf speedtest.tgz -C ./speedtest-cli/ > /dev/null 2>&1 && chmod a+rx ./speedtest-cli/speedtest\n\n\tif  [ ! -e 'tools.py' ]; then\n\t\techo \" Installing tools.py ...\"\n\t\twget --no-check-certificate https://cdn.jsdelivr.net/gh/oooldking/script@1.1.7/tools.py > /dev/null 2>&1\n\tfi\n\tchmod a+rx tools.py\n\n\tif  [ ! -e 'fast_com.py' ]; then\n\t\techo \" Installing Fast.com-cli ...\"\n\t\twget --no-check-certificate https://cdn.jsdelivr.net/gh/sanderjo/fast.com@master/fast_com.py > /dev/null 2>&1\n\t\twget --no-check-certificate https://cdn.jsdelivr.net/gh/sanderjo/fast.com@master/fast_com_example_usage.py > /dev/null 2>&1\n\tfi\n\tchmod a+rx fast_com.py\n\tchmod a+rx fast_com_example_usage.py\n\n\tsleep 5\n\n\tstart=$(date +%s) \n}\n\nget_opsy() {\n    [ -f /etc/redhat-release ] && awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release && return\n    [ -f /etc/os-release ] && awk -F'[= \"]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return\n    [ -f /etc/lsb-release ] && awk -F'[=\"]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return\n}\n\nnext() {\n    printf \"%-70s\\n\" \"-\" | sed 's/\\s/-/g' | tee -a $log\n}\n\nspeed_test(){\n\tif [[ $1 == '' ]]; then\n\t\tspeedtest-cli/speedtest -p no --accept-license > $speedLog 2>&1\n\t\tis_upload=$(cat $speedLog | grep 'Upload')\n\t\tresult_speed=$(cat $speedLog | awk -F ' ' '/Result/{print $3}')\n\t\tif [[ ${is_upload} ]]; then\n\t        local REDownload=$(cat $speedLog | awk -F ' ' '/Download/{print $3}')\n\t        local reupload=$(cat $speedLog | awk -F ' ' '/Upload/{print $3}')\n\t        local relatency=$(cat $speedLog | awk -F ' ' '/Latency/{print $2}')\n\n\t        temp=$(echo \"$relatency\" | awk -F '.' '{print $1}')\n        \tif [[ ${temp} -gt 50 ]]; then\n            \trelatency=\"(*)\"${relatency}\n        \tfi\n\t        local nodeName=$2\n\n\t        temp=$(echo \"${REDownload}\" | awk -F ' ' '{print $1}')\n\t        if [[ $(awk -v num1=${temp} -v num2=0 'BEGIN{print(num1>num2)?\"1\":\"0\"}') -eq 1 ]]; then\n\t        \tprintf \"${YELLOW}%-18s${GREEN}%-18s${RED}%-20s${SKYBLUE}%-12s${PLAIN}\\n\" \" ${nodeName}\" \"${reupload} Mbit/s\" \"${REDownload} Mbit/s\" \"${relatency} ms\" | tee -a $log\n\t        fi\n\t\telse\n\t        local cerror=\"ERROR\"\n\t\tfi\n\telse\n\t\tspeedtest-cli/speedtest -p no -s $1 --accept-license > $speedLog 2>&1\n\t\tis_upload=$(cat $speedLog | grep 'Upload')\n\t\tif [[ ${is_upload} ]]; then\n\t        local REDownload=$(cat $speedLog | awk -F ' ' '/Download/{print $3}')\n\t        local reupload=$(cat $speedLog | awk -F ' ' '/Upload/{print $3}')\n\t        local relatency=$(cat $speedLog | awk -F ' ' '/Latency/{print $2}')\n\t        local nodeName=$2\n\n\t        temp=$(echo \"${REDownload}\" | awk -F ' ' '{print $1}')\n\t        if [[ $(awk -v num1=${temp} -v num2=0 'BEGIN{print(num1>num2)?\"1\":\"0\"}') -eq 1 ]]; then\n\t        \tprintf \"${YELLOW}%-18s${GREEN}%-18s${RED}%-20s${SKYBLUE}%-12s${PLAIN}\\n\" \" ${nodeName}\" \"${reupload} Mbit/s\" \"${REDownload} Mbit/s\" \"${relatency} ms\" | tee -a $log\n\t\t\tfi\n\t\telse\n\t        local cerror=\"ERROR\"\n\t\tfi\n\tfi\n}\n\nprint_speedtest() {\n\tprintf \"%-18s%-18s%-20s%-12s\\n\" \" Node Name\" \"Upload Speed\" \"Download Speed\" \"Latency\" | tee -a $log\n    speed_test '' 'Speedtest.net'\n    speed_fast_com\n    speed_test '27377' 'Beijing 5G   CT'\n    speed_test '26352' 'Nanjing 5G   CT'\n    speed_test '17145' 'Hefei 5G     CT'\n\tspeed_test '27594' 'Guangzhou 5G CT'\n\tspeed_test '27154' 'TianJin 5G   CU'\n\tspeed_test '24447' 'Shanghai 5G  CU'\n\tspeed_test '26678' 'Guangzhou 5G CU'\n\tspeed_test '17184' 'Tianjin 5G   CM'\n\tspeed_test '26850' 'Wuxi 5G      CM'\n\tspeed_test '27249' 'Nanjing 5G   CM'\n\tspeed_test '26404' 'Hefei 5G     CM'\n\tspeed_test '28491' 'Changsha 5G  CM'\n\n\trm -rf speedtest*\n}\n\nprint_speedtest_fast() {\n\tprintf \"%-18s%-18s%-20s%-12s\\n\" \" Node Name\" \"Upload Speed\" \"Download Speed\" \"Latency\" | tee -a $log\n    speed_test '' 'Speedtest.net'\n    speed_fast_com\n    speed_test '27377' 'Beijing 5G   CT'\n\tspeed_test '24447' 'ShangHai 5G  CU'\n\tspeed_test '27249' 'Nanjing 5G   CM'\n\t \n\trm -rf speedtest*\n}\n\nspeed_fast_com() {\n\ttemp=$(python fast_com_example_usage.py 2>&1)\n\tis_down=$(echo \"$temp\" | grep 'Result') \n\t\tif [[ ${is_down} ]]; then\n\t        temp1=$(echo \"$temp\" | awk -F ':' '/Result/{print $2}')\n\t        temp2=$(echo \"$temp1\" | awk -F ' ' '/Mbps/{print $1}')\n\t        local REDownload=\"$temp2 Mbit/s\"\n\t        local reupload=\"0.00 Mbit/s\"\n\t        local relatency=\"-\"\n\t        local nodeName=\"Fast.com\"\n\n\t        printf \"${YELLOW}%-18s${GREEN}%-18s${RED}%-20s${SKYBLUE}%-12s${PLAIN}\\n\" \" ${nodeName}\" \"${reupload}\" \"${REDownload}\" \"${relatency}\" | tee -a $log\n\t\telse\n\t        local cerror=\"ERROR\"\n\t\tfi\n\trm -rf fast_com_example_usage.py\n\trm -rf fast_com.py\n\n}\n\nio_test() {\n    (LANG=C dd if=/dev/zero of=test_file_$$ bs=512K count=$1 conv=fdatasync && rm -f test_file_$$ ) 2>&1 | awk -F, '{io=$NF} END { print io}' | sed 's/^[ \\t]*//;s/[ \\t]*$//'\n}\n\ncalc_disk() {\n    local total_size=0\n    local array=$@\n    for size in ${array[@]}\n    do\n        [ \"${size}\" == \"0\" ] && size_t=0 || size_t=`echo ${size:0:${#size}-1}`\n        [ \"`echo ${size:(-1)}`\" == \"K\" ] && size=0\n        [ \"`echo ${size:(-1)}`\" == \"M\" ] && size=$( awk 'BEGIN{printf \"%.1f\", '$size_t' / 1024}' )\n        [ \"`echo ${size:(-1)}`\" == \"T\" ] && size=$( awk 'BEGIN{printf \"%.1f\", '$size_t' * 1024}' )\n        [ \"`echo ${size:(-1)}`\" == \"G\" ] && size=${size_t}\n        total_size=$( awk 'BEGIN{printf \"%.1f\", '$total_size' + '$size'}' )\n    done\n    echo ${total_size}\n}\n\npower_time() {\n\n\tresult=$(smartctl -a $(result=$(cat /proc/mounts) && echo $(echo \"$result\" | awk '/data=ordered/{print $1}') | awk '{print $1}') 2>&1) && power_time=$(echo \"$result\" | awk '/Power_On/{print $10}') && echo \"$power_time\"\n}\n\ninstall_smart() {\n\tif  [ ! -e '/usr/sbin/smartctl' ]; then\n\t\techo \"Installing Smartctl ...\"\n\t    if [ \"${release}\" == \"centos\" ]; then\n\t    \tyum update > /dev/null 2>&1\n\t        yum -y install smartmontools > /dev/null 2>&1\n\t    else\n\t    \tapt-get update > /dev/null 2>&1\n\t        apt-get -y install smartmontools > /dev/null 2>&1\n\t    fi      \n\tfi\n}\n\nip_info4(){\n\tip_date=$(curl -4 -s http://api.ip.la/en?json)\n\techo $ip_date > ip_json.json\n\tisp=$(python tools.py geoip isp)\n\tas_tmp=$(python tools.py geoip as)\n\tasn=$(echo $as_tmp | awk -F ' ' '{print $1}')\n\torg=$(python tools.py geoip org)\n\tif [ -z \"ip_date\" ]; then\n\t\techo $ip_date\n\t\techo \"hala\"\n\t\tcountry=$(python tools.py ipip country_name)\n\t\tcity=$(python tools.py ipip city)\n\t\tcountryCode=$(python tools.py ipip country_code)\n\t\tregion=$(python tools.py ipip province)\n\telse\n\t\tcountry=$(python tools.py geoip country)\n\t\tcity=$(python tools.py geoip city)\n\t\tcountryCode=$(python tools.py geoip countryCode)\n\t\tregion=$(python tools.py geoip regionName)\t\n\tfi\n\tif [ -z \"$city\" ]; then\n\t\tcity=${region}\n\tfi\n\n\techo -e \" ASN & ISP            : ${SKYBLUE}$asn, $isp${PLAIN}\" | tee -a $log\n\techo -e \" Organization         : ${YELLOW}$org${PLAIN}\" | tee -a $log\n\techo -e \" Location             : ${SKYBLUE}$city, ${YELLOW}$country / $countryCode${PLAIN}\" | tee -a $log\n\techo -e \" Region               : ${SKYBLUE}$region${PLAIN}\" | tee -a $log\n\n\trm -rf tools.py\n\trm -rf ip_json.json\n}\n\nvirt_check(){\n\tif hash ifconfig 2>/dev/null; then\n\t\teth=$(ifconfig)\n\tfi\n\n\tvirtualx=$(dmesg) 2>/dev/null\n\n    if  [ $(which dmidecode) ]; then\n\t\tsys_manu=$(dmidecode -s system-manufacturer) 2>/dev/null\n\t\tsys_product=$(dmidecode -s system-product-name) 2>/dev/null\n\t\tsys_ver=$(dmidecode -s system-version) 2>/dev/null\n\telse\n\t\tsys_manu=\"\"\n\t\tsys_product=\"\"\n\t\tsys_ver=\"\"\n\tfi\n\t\n\tif grep docker /proc/1/cgroup -qa; then\n\t    virtual=\"Docker\"\n\telif grep lxc /proc/1/cgroup -qa; then\n\t\tvirtual=\"Lxc\"\n\telif grep -qa container=lxc /proc/1/environ; then\n\t\tvirtual=\"Lxc\"\n\telif [[ -f /proc/user_beancounters ]]; then\n\t\tvirtual=\"OpenVZ\"\n\telif [[ \"$virtualx\" == *kvm-clock* ]]; then\n\t\tvirtual=\"KVM\"\n\telif [[ \"$cname\" == *KVM* ]]; then\n\t\tvirtual=\"KVM\"\n\telif [[ \"$cname\" == *QEMU* ]]; then\n\t\tvirtual=\"KVM\"\n\telif [[ \"$virtualx\" == *\"VMware Virtual Platform\"* ]]; then\n\t\tvirtual=\"VMware\"\n\telif [[ \"$virtualx\" == *\"Parallels Software International\"* ]]; then\n\t\tvirtual=\"Parallels\"\n\telif [[ \"$virtualx\" == *VirtualBox* ]]; then\n\t\tvirtual=\"VirtualBox\"\n\telif [[ -e /proc/xen ]]; then\n\t\tvirtual=\"Xen\"\n\telif [[ \"$sys_manu\" == *\"Microsoft Corporation\"* ]]; then\n\t\tif [[ \"$sys_product\" == *\"Virtual Machine\"* ]]; then\n\t\t\tif [[ \"$sys_ver\" == *\"7.0\"* || \"$sys_ver\" == *\"Hyper-V\" ]]; then\n\t\t\t\tvirtual=\"Hyper-V\"\n\t\t\telse\n\t\t\t\tvirtual=\"Microsoft Virtual Machine\"\n\t\t\tfi\n\t\tfi\n\telse\n\t\tvirtual=\"Dedicated\"\n\tfi\n}\n\npower_time_check(){\n\techo -ne \" Power time of disk   : \"\n\tinstall_smart\n\tptime=$(power_time)\n\techo -e \"${SKYBLUE}$ptime Hours${PLAIN}\"\n}\n\nfreedisk() {\n\tfreespace=$( df -m . | awk 'NR==2 {print $4}' )\n\tif [[ $freespace == \"\" ]]; then\n\t\t$freespace=$( df -m . | awk 'NR==3 {print $3}' )\n\tfi\n\tif [[ $freespace -gt 1024 ]]; then\n\t\tprintf \"%s\" $((1024*2))\n\telif [[ $freespace -gt 512 ]]; then\n\t\tprintf \"%s\" $((512*2))\n\telif [[ $freespace -gt 256 ]]; then\n\t\tprintf \"%s\" $((256*2))\n\telif [[ $freespace -gt 128 ]]; then\n\t\tprintf \"%s\" $((128*2))\n\telse\n\t\tprintf \"1\"\n\tfi\n}\n\nprint_io() {\n\tif [[ $1 == \"fast\" ]]; then\n\t\twritemb=$((128*2))\n\telse\n\t\twritemb=$(freedisk)\n\tfi\n\t\n\twritemb_size=\"$(( writemb / 2 ))MB\"\n\tif [[ $writemb_size == \"1024MB\" ]]; then\n\t\twritemb_size=\"1.0GB\"\n\tfi\n\n\tif [[ $writemb != \"1\" ]]; then\n\t\techo -n \" I/O Speed( $writemb_size )   : \" | tee -a $log\n\t\tio1=$( io_test $writemb )\n\t\techo -e \"${YELLOW}$io1${PLAIN}\" | tee -a $log\n\t\techo -n \" I/O Speed( $writemb_size )   : \" | tee -a $log\n\t\tio2=$( io_test $writemb )\n\t\techo -e \"${YELLOW}$io2${PLAIN}\" | tee -a $log\n\t\techo -n \" I/O Speed( $writemb_size )   : \" | tee -a $log\n\t\tio3=$( io_test $writemb )\n\t\techo -e \"${YELLOW}$io3${PLAIN}\" | tee -a $log\n\t\tioraw1=$( echo $io1 | awk 'NR==1 {print $1}' )\n\t\t[ \"`echo $io1 | awk 'NR==1 {print $2}'`\" == \"GB/s\" ] && ioraw1=$( awk 'BEGIN{print '$ioraw1' * 1024}' )\n\t\tioraw2=$( echo $io2 | awk 'NR==1 {print $1}' )\n\t\t[ \"`echo $io2 | awk 'NR==1 {print $2}'`\" == \"GB/s\" ] && ioraw2=$( awk 'BEGIN{print '$ioraw2' * 1024}' )\n\t\tioraw3=$( echo $io3 | awk 'NR==1 {print $1}' )\n\t\t[ \"`echo $io3 | awk 'NR==1 {print $2}'`\" == \"GB/s\" ] && ioraw3=$( awk 'BEGIN{print '$ioraw3' * 1024}' )\n\t\tioall=$( awk 'BEGIN{print '$ioraw1' + '$ioraw2' + '$ioraw3'}' )\n\t\tioavg=$( awk 'BEGIN{printf \"%.1f\", '$ioall' / 3}' )\n\t\techo -e \" Average I/O Speed    : ${YELLOW}$ioavg MB/s${PLAIN}\" | tee -a $log\n\telse\n\t\techo -e \" ${RED}Not enough space!${PLAIN}\"\n\tfi\n}\n\nprint_system_info() {\n\techo -e \" CPU Model            : ${SKYBLUE}$cname${PLAIN}\" | tee -a $log\n\techo -e \" CPU Cores            : ${YELLOW}$cores Cores ${SKYBLUE}$freq MHz $arch${PLAIN}\" | tee -a $log\n\techo -e \" CPU Cache            : ${SKYBLUE}$corescache ${PLAIN}\" | tee -a $log\n\techo -e \" OS                   : ${SKYBLUE}$opsy ($lbit Bit) ${YELLOW}$virtual${PLAIN}\" | tee -a $log\n\techo -e \" Kernel               : ${SKYBLUE}$kern${PLAIN}\" | tee -a $log\n\techo -e \" Total Space          : ${SKYBLUE}$disk_used_size GB / ${YELLOW}$disk_total_size GB ${PLAIN}\" | tee -a $log\n\techo -e \" Total RAM            : ${SKYBLUE}$uram MB / ${YELLOW}$tram MB ${SKYBLUE}($bram MB Buff)${PLAIN}\" | tee -a $log\n\techo -e \" Total SWAP           : ${SKYBLUE}$uswap MB / $swap MB${PLAIN}\" | tee -a $log\n\techo -e \" Uptime               : ${SKYBLUE}$up${PLAIN}\" | tee -a $log\n\techo -e \" Load Average         : ${SKYBLUE}$load${PLAIN}\" | tee -a $log\n\techo -e \" TCP CC               : ${YELLOW}$tcpctrl${PLAIN}\" | tee -a $log\n}\n\nprint_end_time() {\n\tend=$(date +%s) \n\ttime=$(( $end - $start ))\n\tif [[ $time -gt 60 ]]; then\n\t\tmin=$(expr $time / 60)\n\t\tsec=$(expr $time % 60)\n\t\techo -ne \" Finished in  : ${min} min ${sec} sec\" | tee -a $log\n\telse\n\t\techo -ne \" Finished in  : ${time} sec\" | tee -a $log\n\tfi\n\n\tprintf '\\n' | tee -a $log\n\n\tbj_time=$(curl -s http://cgi.im.qq.com/cgi-bin/cgi_svrtime)\n\n\tif [[ $(echo $bj_time | grep \"html\") ]]; then\n\t\tbj_time=$(date -u +%Y-%m-%d\" \"%H:%M:%S -d '+8 hours')\n\tfi\n\techo \" Timestamp    : $bj_time GMT+8\" | tee -a $log\n\techo \" Results      : $log\"\n}\n\nget_system_info() {\n\tcname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\n\tcores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )\n\tfreq=$( awk -F: '/cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\n\tcorescache=$( awk -F: '/cache size/ {cache=$2} END {print cache}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\n\ttram=$( free -m | awk '/Mem/ {print $2}' )\n\turam=$( free -m | awk '/Mem/ {print $3}' )\n\tbram=$( free -m | awk '/Mem/ {print $6}' )\n\tswap=$( free -m | awk '/Swap/ {print $2}' )\n\tuswap=$( free -m | awk '/Swap/ {print $3}' )\n\tup=$( awk '{a=$1/86400;b=($1%86400)/3600;c=($1%3600)/60} {printf(\"%d days %d hour %d min\\n\",a,b,c)}' /proc/uptime )\n\tload=$( w | head -1 | awk -F'load average:' '{print $2}' | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\n\topsy=$( get_opsy )\n\tarch=$( uname -m )\n\tlbit=$( getconf LONG_BIT )\n\tkern=$( uname -r )\n\n\tdisk_size1=$( LANG=C df -hPl | grep -wvE '\\-|none|tmpfs|overlay|shm|udev|devtmpfs|by-uuid|chroot|Filesystem' | awk '{print $2}' )\n\tdisk_size2=$( LANG=C df -hPl | grep -wvE '\\-|none|tmpfs|overlay|shm|udev|devtmpfs|by-uuid|chroot|Filesystem' | awk '{print $3}' )\n\tdisk_total_size=$( calc_disk ${disk_size1[@]} )\n\tdisk_used_size=$( calc_disk ${disk_size2[@]} )\n\n\ttcpctrl=$( sysctl net.ipv4.tcp_congestion_control | awk -F ' ' '{print $3}' )\n\n\tvirt_check\n}\n\nprint_intro() {\n\tprintf ' Superbench.sh -- https://www.oldking.net/350.html\\n' | tee -a $log\n\tprintf \" Mode  : \\e${GREEN}%s\\e${PLAIN}    Version : \\e${GREEN}%s${PLAIN}\\n\" $mode_name 1.1.7 | tee -a $log\n\tprintf ' Usage : wget -qO- sb.oldking.net | bash\\n' | tee -a $log\n}\n\nsharetest() {\n\techo \" Share result:\" | tee -a $log\n\techo \" · $result_speed\" | tee -a $log\n\tlog_preupload\n\tcase $1 in\n\t'ubuntu')\n\t\tshare_link=\"https://paste.ubuntu.com\"$( curl -v --data-urlencode \"content@$log_up\" -d \"poster=superbench.sh\" -d \"syntax=text\" \"https://paste.ubuntu.com\" 2>&1 | \\\n\t\t\tgrep \"Location\" | awk '{print $3}' );;\n\t'haste' )\n\t\tshare_link=$( curl -X POST -s -d \"$(cat $log)\" https://hastebin.com/documents | awk -F '\"' '{print \"https://hastebin.com/\"$4}' );;\n\t'clbin' )\n\t\tshare_link=$( curl -sF 'clbin=<-' https://clbin.com < $log );;\n\t'ptpb' )\n\t\tshare_link=$( curl -sF c=@- https://ptpb.pw/?u=1 < $log );;\n\tesac\n\n\techo \" · $share_link\" | tee -a $log\n\tnext\n\techo \"\"\n\trm -f $log_up\n\n}\n\nlog_preupload() {\n\tlog_up=\"$HOME/superbench_upload.log\"\n\ttrue > $log_up\n\t$(cat superbench.log 2>&1 | sed -r \"s/\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g\" > $log_up)\n}\n\ncleanup() {\n\trm -f test_file_*\n\trm -rf speedtest*\n\trm -f fast_com*\n\trm -f tools.py\n\trm -f ip_json.json\n}\n\nbench_all(){\n\tmode_name=\"Standard\"\n\tabout;\n\tbenchinit;\n\tclear\n\tnext;\n\tprint_intro;\n\tnext;\n\tget_system_info;\n\tprint_system_info;\n\tip_info4;\n\tnext;\n\tprint_io;\n\tnext;\n\tprint_speedtest;\n\tnext;\n\tprint_end_time;\n\tnext;\n\tcleanup;\n\tsharetest ubuntu;\n}\n\nfast_bench(){\n\tmode_name=\"Fast\"\n\tabout;\n\tbenchinit;\n\tclear\n\tnext;\n\tprint_intro;\n\tnext;\n\tget_system_info;\n\tprint_system_info;\n\tip_info4;\n\tnext;\n\tprint_io fast;\n\tnext;\n\tprint_speedtest_fast;\n\tnext;\n\tprint_end_time;\n\tnext;\n\tcleanup;\n}\n\nlog=\"./superbench.log\"\ntrue > $log\nspeedLog=\"./speedtest.log\"\ntrue > $speedLog\n\ncase $1 in\n\t'info'|'-i'|'--i'|'-info'|'--info' )\n\t\tabout;sleep 3;next;get_system_info;print_system_info;next;;\n    'version'|'-v'|'--v'|'-version'|'--version')\n\t\tnext;about;next;;\n   \t'io'|'-io'|'--io'|'-drivespeed'|'--drivespeed' )\n\t\tnext;print_io;next;;\n\t'speed'|'-speed'|'--speed'|'-speedtest'|'--speedtest'|'-speedcheck'|'--speedcheck' )\n\t\tabout;benchinit;next;print_speedtest;next;cleanup;;\n\t'ip'|'-ip'|'--ip'|'geoip'|'-geoip'|'--geoip' )\n\t\tabout;benchinit;next;ip_info4;next;cleanup;;\n\t'bench'|'-a'|'--a'|'-all'|'--all'|'-bench'|'--bench' )\n\t\tbench_all;;\n\t'about'|'-about'|'--about' )\n\t\tabout;;\n\t'fast'|'-f'|'--f'|'-fast'|'--fast' )\n\t\tfast_bench;;\n\t'share'|'-s'|'--s'|'-share'|'--share' )\n\t\tbench_all;\n\t\tis_share=\"share\"\n\t\tif [[ $2 == \"\" ]]; then\n\t\t\tsharetest ubuntu;\n\t\telse\n\t\t\tsharetest $2;\n\t\tfi\n\t\t;;\n\t'debug'|'-d'|'--d'|'-debug'|'--debug' )\n\t\tget_ip_whois_org_name;;\n*)\n    bench_all;;\nesac\n\nif [[  ! $is_share == \"share\" ]]; then\n\tcase $2 in\n\t\t'share'|'-s'|'--s'|'-share'|'--share' )\n\t\t\tif [[ $3 == '' ]]; then\n\t\t\t\tsharetest ubuntu;\n\t\t\telse\n\t\t\t\tsharetest $3;\n\t\t\tfi\n\t\t\t;;\n\tesac\nfi"
        },
        {
          "name": "superbench_git.sh",
          "type": "blob",
          "size": 18.818359375,
          "content": "#!/usr/bin/env bash\n#\n# Description: Auto system info & I/O test & network to China script\n#\n# Copyright (C) 2017 - 2020 Oldking <oooldking@gmail.com>\n#\n# Thanks: Bench.sh <i@teddysun.com>\n#\n# URL: https://www.oldking.net/350.html\n#\n\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[0;33m'\nSKYBLUE='\\033[0;36m'\nPLAIN='\\033[0m'\n\nabout() {\n\techo \"\"\n\techo \" ========================================================= \"\n\techo \" \\                 Superbench.sh  Script                 / \"\n\techo \" \\       Basic system info, I/O test and speedtest       / \"\n\techo \" \\                   v1.1.7 (7 Apr 2020)                 / \"\n\techo \" \\                   Created by Oldking                  / \"\n\techo \" ========================================================= \"\n\techo \"\"\n\techo \" Intro: https://www.oldking.net/350.html\"\n\techo \" Copyright (C) 2020 Oldking oooldking@gmail.com\"\n\techo \"\"\n}\n\ncancel() {\n\techo \"\"\n\tnext;\n\techo \" Abort ...\"\n\techo \" Cleanup ...\"\n\tcleanup;\n\techo \" Done\"\n\texit\n}\n\ntrap cancel SIGINT\n\nbenchinit() {\n\tif [ -f /etc/redhat-release ]; then\n\t    release=\"centos\"\n\telif cat /etc/issue | grep -Eqi \"debian\"; then\n\t    release=\"debian\"\n\telif cat /etc/issue | grep -Eqi \"ubuntu\"; then\n\t    release=\"ubuntu\"\n\telif cat /etc/issue | grep -Eqi \"centos|red hat|redhat\"; then\n\t    release=\"centos\"\n\telif cat /proc/version | grep -Eqi \"debian\"; then\n\t    release=\"debian\"\n\telif cat /proc/version | grep -Eqi \"ubuntu\"; then\n\t    release=\"ubuntu\"\n\telif cat /proc/version | grep -Eqi \"centos|red hat|redhat\"; then\n\t    release=\"centos\"\n\tfi\n\n\t[[ $EUID -ne 0 ]] && echo -e \"${RED}Error:${PLAIN} This script must be run as root!\" && exit 1\n\n\tif  [ ! -e '/usr/bin/python' ]; then\n\t        echo \" Installing Python ...\"\n\t            if [ \"${release}\" == \"centos\" ]; then\n\t            \t\tyum update > /dev/null 2>&1\n\t                    yum -y install python > /dev/null 2>&1\n\t                else\n\t                \tapt-get update > /dev/null 2>&1\n\t                    apt-get -y install python > /dev/null 2>&1\n\t                fi\n\t        \n\tfi\n\n\tif  [ ! -e '/usr/bin/curl' ]; then\n\t        echo \" Installing Curl ...\"\n\t            if [ \"${release}\" == \"centos\" ]; then\n\t                yum update > /dev/null 2>&1\n\t                yum -y install curl > /dev/null 2>&1\n\t            else\n\t                apt-get update > /dev/null 2>&1\n\t                apt-get -y install curl > /dev/null 2>&1\n\t            fi\n\tfi\n\n\tif  [ ! -e '/usr/bin/wget' ]; then\n\t        echo \" Installing Wget ...\"\n\t            if [ \"${release}\" == \"centos\" ]; then\n\t                yum update > /dev/null 2>&1\n\t                yum -y install wget > /dev/null 2>&1\n\t            else\n\t                apt-get update > /dev/null 2>&1\n\t                apt-get -y install wget > /dev/null 2>&1\n\t            fi\n\tfi\n\n\tif  [ ! -e './speedtest-cli/speedtest' ]; then\n\t\techo \" Installing Speedtest-cli ...\"\n\t\twget --no-check-certificate -qO speedtest.tgz https://cdn.jsdelivr.net/gh/oooldking/script@1.1.7/speedtest_cli/ookla-speedtest-1.0.0-$(uname -m)-linux.tgz > /dev/null 2>&1\n\tfi\n\tmkdir -p speedtest-cli && tar zxvf speedtest.tgz -C ./speedtest-cli/ > /dev/null 2>&1 && chmod a+rx ./speedtest-cli/speedtest\n\n\tif  [ ! -e 'tools.py' ]; then\n\t\techo \" Installing tools.py ...\"\n\t\twget --no-check-certificate https://cdn.jsdelivr.net/gh/oooldking/script@1.1.7/tools.py > /dev/null 2>&1\n\tfi\n\tchmod a+rx tools.py\n\n\tif  [ ! -e 'fast_com.py' ]; then\n\t\techo \" Installing Fast.com-cli ...\"\n\t\twget --no-check-certificate https://cdn.jsdelivr.net/gh/sanderjo/fast.com@master/fast_com.py > /dev/null 2>&1\n\t\twget --no-check-certificate https://cdn.jsdelivr.net/gh/sanderjo/fast.com@master/fast_com_example_usage.py > /dev/null 2>&1\n\tfi\n\tchmod a+rx fast_com.py\n\tchmod a+rx fast_com_example_usage.py\n\n\tsleep 5\n\n\tstart=$(date +%s) \n}\n\nget_opsy() {\n    [ -f /etc/redhat-release ] && awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release && return\n    [ -f /etc/os-release ] && awk -F'[= \"]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return\n    [ -f /etc/lsb-release ] && awk -F'[=\"]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return\n}\n\nnext() {\n    printf \"%-70s\\n\" \"-\" | sed 's/\\s/-/g' | tee -a $log\n}\n\nspeed_test(){\n\tif [[ $1 == '' ]]; then\n\t\tspeedtest-cli/speedtest -p no --accept-license > $speedLog 2>&1\n\t\tis_upload=$(cat $speedLog | grep 'Upload')\n\t\tresult_speed=$(cat $speedLog | awk -F ' ' '/Result/{print $3}')\n\t\tif [[ ${is_upload} ]]; then\n\t        local REDownload=$(cat $speedLog | awk -F ' ' '/Download/{print $3}')\n\t        local reupload=$(cat $speedLog | awk -F ' ' '/Upload/{print $3}')\n\t        local relatency=$(cat $speedLog | awk -F ' ' '/Latency/{print $2}')\n\n\t        temp=$(echo \"$relatency\" | awk -F '.' '{print $1}')\n        \tif [[ ${temp} -gt 50 ]]; then\n            \trelatency=\"(*)\"${relatency}\n        \tfi\n\t        local nodeName=$2\n\n\t        temp=$(echo \"${REDownload}\" | awk -F ' ' '{print $1}')\n\t        if [[ $(awk -v num1=${temp} -v num2=0 'BEGIN{print(num1>num2)?\"1\":\"0\"}') -eq 1 ]]; then\n\t        \tprintf \"${YELLOW}%-18s${GREEN}%-18s${RED}%-20s${SKYBLUE}%-12s${PLAIN}\\n\" \" ${nodeName}\" \"${reupload} Mbit/s\" \"${REDownload} Mbit/s\" \"${relatency} ms\" | tee -a $log\n\t        fi\n\t\telse\n\t        local cerror=\"ERROR\"\n\t\tfi\n\telse\n\t\tspeedtest-cli/speedtest -p no -s $1 --accept-license > $speedLog 2>&1\n\t\tis_upload=$(cat $speedLog | grep 'Upload')\n\t\tif [[ ${is_upload} ]]; then\n\t        local REDownload=$(cat $speedLog | awk -F ' ' '/Download/{print $3}')\n\t        local reupload=$(cat $speedLog | awk -F ' ' '/Upload/{print $3}')\n\t        local relatency=$(cat $speedLog | awk -F ' ' '/Latency/{print $2}')\n\t        local nodeName=$2\n\n\t        temp=$(echo \"${REDownload}\" | awk -F ' ' '{print $1}')\n\t        if [[ $(awk -v num1=${temp} -v num2=0 'BEGIN{print(num1>num2)?\"1\":\"0\"}') -eq 1 ]]; then\n\t        \tprintf \"${YELLOW}%-18s${GREEN}%-18s${RED}%-20s${SKYBLUE}%-12s${PLAIN}\\n\" \" ${nodeName}\" \"${reupload} Mbit/s\" \"${REDownload} Mbit/s\" \"${relatency} ms\" | tee -a $log\n\t\t\tfi\n\t\telse\n\t        local cerror=\"ERROR\"\n\t\tfi\n\tfi\n}\n\nprint_speedtest() {\n\tprintf \"%-18s%-18s%-20s%-12s\\n\" \" Node Name\" \"Upload Speed\" \"Download Speed\" \"Latency\" | tee -a $log\n    speed_test '' 'Speedtest.net'\n    speed_fast_com\n    speed_test '27377' 'Beijing 5G   CT'\n    speed_test '26352' 'Nanjing 5G   CT'\n    speed_test '17145' 'Hefei 5G     CT'\n\tspeed_test '27594' 'Guangzhou 5G CT'\n\tspeed_test '27154' 'TianJin 5G   CU'\n\tspeed_test '24447' 'Shanghai 5G  CU'\n\tspeed_test '26678' 'Guangzhou 5G CU'\n\tspeed_test '17184' 'Tianjin 5G   CM'\n\tspeed_test '26850' 'Wuxi 5G      CM'\n\tspeed_test '27249' 'Nanjing 5G   CM'\n\tspeed_test '26404' 'Hefei 5G     CM'\n\tspeed_test '28491' 'Changsha 5G  CM'\n\n\trm -rf speedtest*\n}\n\nprint_speedtest_fast() {\n\tprintf \"%-18s%-18s%-20s%-12s\\n\" \" Node Name\" \"Upload Speed\" \"Download Speed\" \"Latency\" | tee -a $log\n    speed_test '' 'Speedtest.net'\n    speed_fast_com\n    speed_test '27377' 'Beijing 5G   CT'\n\tspeed_test '24447' 'ShangHai 5G  CU'\n\tspeed_test '27249' 'Nanjing 5G   CM'\n\t \n\trm -rf speedtest*\n}\n\nspeed_fast_com() {\n\ttemp=$(python fast_com_example_usage.py 2>&1)\n\tis_down=$(echo \"$temp\" | grep 'Result') \n\t\tif [[ ${is_down} ]]; then\n\t        temp1=$(echo \"$temp\" | awk -F ':' '/Result/{print $2}')\n\t        temp2=$(echo \"$temp1\" | awk -F ' ' '/Mbps/{print $1}')\n\t        local REDownload=\"$temp2 Mbit/s\"\n\t        local reupload=\"0.00 Mbit/s\"\n\t        local relatency=\"-\"\n\t        local nodeName=\"Fast.com\"\n\n\t        printf \"${YELLOW}%-18s${GREEN}%-18s${RED}%-20s${SKYBLUE}%-12s${PLAIN}\\n\" \" ${nodeName}\" \"${reupload}\" \"${REDownload}\" \"${relatency}\" | tee -a $log\n\t\telse\n\t        local cerror=\"ERROR\"\n\t\tfi\n\trm -rf fast_com_example_usage.py\n\trm -rf fast_com.py\n\n}\n\nio_test() {\n    (LANG=C dd if=/dev/zero of=test_file_$$ bs=512K count=$1 conv=fdatasync && rm -f test_file_$$ ) 2>&1 | awk -F, '{io=$NF} END { print io}' | sed 's/^[ \\t]*//;s/[ \\t]*$//'\n}\n\ncalc_disk() {\n    local total_size=0\n    local array=$@\n    for size in ${array[@]}\n    do\n        [ \"${size}\" == \"0\" ] && size_t=0 || size_t=`echo ${size:0:${#size}-1}`\n        [ \"`echo ${size:(-1)}`\" == \"K\" ] && size=0\n        [ \"`echo ${size:(-1)}`\" == \"M\" ] && size=$( awk 'BEGIN{printf \"%.1f\", '$size_t' / 1024}' )\n        [ \"`echo ${size:(-1)}`\" == \"T\" ] && size=$( awk 'BEGIN{printf \"%.1f\", '$size_t' * 1024}' )\n        [ \"`echo ${size:(-1)}`\" == \"G\" ] && size=${size_t}\n        total_size=$( awk 'BEGIN{printf \"%.1f\", '$total_size' + '$size'}' )\n    done\n    echo ${total_size}\n}\n\npower_time() {\n\n\tresult=$(smartctl -a $(result=$(cat /proc/mounts) && echo $(echo \"$result\" | awk '/data=ordered/{print $1}') | awk '{print $1}') 2>&1) && power_time=$(echo \"$result\" | awk '/Power_On/{print $10}') && echo \"$power_time\"\n}\n\ninstall_smart() {\n\tif  [ ! -e '/usr/sbin/smartctl' ]; then\n\t\techo \"Installing Smartctl ...\"\n\t    if [ \"${release}\" == \"centos\" ]; then\n\t    \tyum update > /dev/null 2>&1\n\t        yum -y install smartmontools > /dev/null 2>&1\n\t    else\n\t    \tapt-get update > /dev/null 2>&1\n\t        apt-get -y install smartmontools > /dev/null 2>&1\n\t    fi      \n\tfi\n}\n\nip_info4(){\n\tip_date=$(curl -4 -s http://api.ip.la/en?json)\n\techo $ip_date > ip_json.json\n\tisp=$(python tools.py geoip isp)\n\tas_tmp=$(python tools.py geoip as)\n\tasn=$(echo $as_tmp | awk -F ' ' '{print $1}')\n\torg=$(python tools.py geoip org)\n\tif [ -z \"ip_date\" ]; then\n\t\techo $ip_date\n\t\techo \"hala\"\n\t\tcountry=$(python tools.py ipip country_name)\n\t\tcity=$(python tools.py ipip city)\n\t\tcountryCode=$(python tools.py ipip country_code)\n\t\tregion=$(python tools.py ipip province)\n\telse\n\t\tcountry=$(python tools.py geoip country)\n\t\tcity=$(python tools.py geoip city)\n\t\tcountryCode=$(python tools.py geoip countryCode)\n\t\tregion=$(python tools.py geoip regionName)\t\n\tfi\n\tif [ -z \"$city\" ]; then\n\t\tcity=${region}\n\tfi\n\n\techo -e \" ASN & ISP            : ${SKYBLUE}$asn, $isp${PLAIN}\" | tee -a $log\n\techo -e \" Organization         : ${YELLOW}$org${PLAIN}\" | tee -a $log\n\techo -e \" Location             : ${SKYBLUE}$city, ${YELLOW}$country / $countryCode${PLAIN}\" | tee -a $log\n\techo -e \" Region               : ${SKYBLUE}$region${PLAIN}\" | tee -a $log\n\n\trm -rf tools.py\n\trm -rf ip_json.json\n}\n\nvirt_check(){\n\tif hash ifconfig 2>/dev/null; then\n\t\teth=$(ifconfig)\n\tfi\n\n\tvirtualx=$(dmesg) 2>/dev/null\n\n    if  [ $(which dmidecode) ]; then\n\t\tsys_manu=$(dmidecode -s system-manufacturer) 2>/dev/null\n\t\tsys_product=$(dmidecode -s system-product-name) 2>/dev/null\n\t\tsys_ver=$(dmidecode -s system-version) 2>/dev/null\n\telse\n\t\tsys_manu=\"\"\n\t\tsys_product=\"\"\n\t\tsys_ver=\"\"\n\tfi\n\t\n\tif grep docker /proc/1/cgroup -qa; then\n\t    virtual=\"Docker\"\n\telif grep lxc /proc/1/cgroup -qa; then\n\t\tvirtual=\"Lxc\"\n\telif grep -qa container=lxc /proc/1/environ; then\n\t\tvirtual=\"Lxc\"\n\telif [[ -f /proc/user_beancounters ]]; then\n\t\tvirtual=\"OpenVZ\"\n\telif [[ \"$virtualx\" == *kvm-clock* ]]; then\n\t\tvirtual=\"KVM\"\n\telif [[ \"$cname\" == *KVM* ]]; then\n\t\tvirtual=\"KVM\"\n\telif [[ \"$cname\" == *QEMU* ]]; then\n\t\tvirtual=\"KVM\"\n\telif [[ \"$virtualx\" == *\"VMware Virtual Platform\"* ]]; then\n\t\tvirtual=\"VMware\"\n\telif [[ \"$virtualx\" == *\"Parallels Software International\"* ]]; then\n\t\tvirtual=\"Parallels\"\n\telif [[ \"$virtualx\" == *VirtualBox* ]]; then\n\t\tvirtual=\"VirtualBox\"\n\telif [[ -e /proc/xen ]]; then\n\t\tvirtual=\"Xen\"\n\telif [[ \"$sys_manu\" == *\"Microsoft Corporation\"* ]]; then\n\t\tif [[ \"$sys_product\" == *\"Virtual Machine\"* ]]; then\n\t\t\tif [[ \"$sys_ver\" == *\"7.0\"* || \"$sys_ver\" == *\"Hyper-V\" ]]; then\n\t\t\t\tvirtual=\"Hyper-V\"\n\t\t\telse\n\t\t\t\tvirtual=\"Microsoft Virtual Machine\"\n\t\t\tfi\n\t\tfi\n\telse\n\t\tvirtual=\"Dedicated\"\n\tfi\n}\n\npower_time_check(){\n\techo -ne \" Power time of disk   : \"\n\tinstall_smart\n\tptime=$(power_time)\n\techo -e \"${SKYBLUE}$ptime Hours${PLAIN}\"\n}\n\nfreedisk() {\n\tfreespace=$( df -m . | awk 'NR==2 {print $4}' )\n\tif [[ $freespace == \"\" ]]; then\n\t\t$freespace=$( df -m . | awk 'NR==3 {print $3}' )\n\tfi\n\tif [[ $freespace -gt 1024 ]]; then\n\t\tprintf \"%s\" $((1024*2))\n\telif [[ $freespace -gt 512 ]]; then\n\t\tprintf \"%s\" $((512*2))\n\telif [[ $freespace -gt 256 ]]; then\n\t\tprintf \"%s\" $((256*2))\n\telif [[ $freespace -gt 128 ]]; then\n\t\tprintf \"%s\" $((128*2))\n\telse\n\t\tprintf \"1\"\n\tfi\n}\n\nprint_io() {\n\tif [[ $1 == \"fast\" ]]; then\n\t\twritemb=$((128*2))\n\telse\n\t\twritemb=$(freedisk)\n\tfi\n\t\n\twritemb_size=\"$(( writemb / 2 ))MB\"\n\tif [[ $writemb_size == \"1024MB\" ]]; then\n\t\twritemb_size=\"1.0GB\"\n\tfi\n\n\tif [[ $writemb != \"1\" ]]; then\n\t\techo -n \" I/O Speed( $writemb_size )   : \" | tee -a $log\n\t\tio1=$( io_test $writemb )\n\t\techo -e \"${YELLOW}$io1${PLAIN}\" | tee -a $log\n\t\techo -n \" I/O Speed( $writemb_size )   : \" | tee -a $log\n\t\tio2=$( io_test $writemb )\n\t\techo -e \"${YELLOW}$io2${PLAIN}\" | tee -a $log\n\t\techo -n \" I/O Speed( $writemb_size )   : \" | tee -a $log\n\t\tio3=$( io_test $writemb )\n\t\techo -e \"${YELLOW}$io3${PLAIN}\" | tee -a $log\n\t\tioraw1=$( echo $io1 | awk 'NR==1 {print $1}' )\n\t\t[ \"`echo $io1 | awk 'NR==1 {print $2}'`\" == \"GB/s\" ] && ioraw1=$( awk 'BEGIN{print '$ioraw1' * 1024}' )\n\t\tioraw2=$( echo $io2 | awk 'NR==1 {print $1}' )\n\t\t[ \"`echo $io2 | awk 'NR==1 {print $2}'`\" == \"GB/s\" ] && ioraw2=$( awk 'BEGIN{print '$ioraw2' * 1024}' )\n\t\tioraw3=$( echo $io3 | awk 'NR==1 {print $1}' )\n\t\t[ \"`echo $io3 | awk 'NR==1 {print $2}'`\" == \"GB/s\" ] && ioraw3=$( awk 'BEGIN{print '$ioraw3' * 1024}' )\n\t\tioall=$( awk 'BEGIN{print '$ioraw1' + '$ioraw2' + '$ioraw3'}' )\n\t\tioavg=$( awk 'BEGIN{printf \"%.1f\", '$ioall' / 3}' )\n\t\techo -e \" Average I/O Speed    : ${YELLOW}$ioavg MB/s${PLAIN}\" | tee -a $log\n\telse\n\t\techo -e \" ${RED}Not enough space!${PLAIN}\"\n\tfi\n}\n\nprint_system_info() {\n\techo -e \" CPU Model            : ${SKYBLUE}$cname${PLAIN}\" | tee -a $log\n\techo -e \" CPU Cores            : ${YELLOW}$cores Cores ${SKYBLUE}$freq MHz $arch${PLAIN}\" | tee -a $log\n\techo -e \" CPU Cache            : ${SKYBLUE}$corescache ${PLAIN}\" | tee -a $log\n\techo -e \" OS                   : ${SKYBLUE}$opsy ($lbit Bit) ${YELLOW}$virtual${PLAIN}\" | tee -a $log\n\techo -e \" Kernel               : ${SKYBLUE}$kern${PLAIN}\" | tee -a $log\n\techo -e \" Total Space          : ${SKYBLUE}$disk_used_size GB / ${YELLOW}$disk_total_size GB ${PLAIN}\" | tee -a $log\n\techo -e \" Total RAM            : ${SKYBLUE}$uram MB / ${YELLOW}$tram MB ${SKYBLUE}($bram MB Buff)${PLAIN}\" | tee -a $log\n\techo -e \" Total SWAP           : ${SKYBLUE}$uswap MB / $swap MB${PLAIN}\" | tee -a $log\n\techo -e \" Uptime               : ${SKYBLUE}$up${PLAIN}\" | tee -a $log\n\techo -e \" Load Average         : ${SKYBLUE}$load${PLAIN}\" | tee -a $log\n\techo -e \" TCP CC               : ${YELLOW}$tcpctrl${PLAIN}\" | tee -a $log\n}\n\nprint_end_time() {\n\tend=$(date +%s) \n\ttime=$(( $end - $start ))\n\tif [[ $time -gt 60 ]]; then\n\t\tmin=$(expr $time / 60)\n\t\tsec=$(expr $time % 60)\n\t\techo -ne \" Finished in  : ${min} min ${sec} sec\" | tee -a $log\n\telse\n\t\techo -ne \" Finished in  : ${time} sec\" | tee -a $log\n\tfi\n\n\tprintf '\\n' | tee -a $log\n\n\tbj_time=$(curl -s http://cgi.im.qq.com/cgi-bin/cgi_svrtime)\n\n\tif [[ $(echo $bj_time | grep \"html\") ]]; then\n\t\tbj_time=$(date -u +%Y-%m-%d\" \"%H:%M:%S -d '+8 hours')\n\tfi\n\techo \" Timestamp    : $bj_time GMT+8\" | tee -a $log\n\techo \" Results      : $log\"\n}\n\nget_system_info() {\n\tcname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\n\tcores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )\n\tfreq=$( awk -F: '/cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\n\tcorescache=$( awk -F: '/cache size/ {cache=$2} END {print cache}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\n\ttram=$( free -m | awk '/Mem/ {print $2}' )\n\turam=$( free -m | awk '/Mem/ {print $3}' )\n\tbram=$( free -m | awk '/Mem/ {print $6}' )\n\tswap=$( free -m | awk '/Swap/ {print $2}' )\n\tuswap=$( free -m | awk '/Swap/ {print $3}' )\n\tup=$( awk '{a=$1/86400;b=($1%86400)/3600;c=($1%3600)/60} {printf(\"%d days %d hour %d min\\n\",a,b,c)}' /proc/uptime )\n\tload=$( w | head -1 | awk -F'load average:' '{print $2}' | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\n\topsy=$( get_opsy )\n\tarch=$( uname -m )\n\tlbit=$( getconf LONG_BIT )\n\tkern=$( uname -r )\n\n\tdisk_size1=$( LANG=C df -hPl | grep -wvE '\\-|none|tmpfs|overlay|shm|udev|devtmpfs|by-uuid|chroot|Filesystem' | awk '{print $2}' )\n\tdisk_size2=$( LANG=C df -hPl | grep -wvE '\\-|none|tmpfs|overlay|shm|udev|devtmpfs|by-uuid|chroot|Filesystem' | awk '{print $3}' )\n\tdisk_total_size=$( calc_disk ${disk_size1[@]} )\n\tdisk_used_size=$( calc_disk ${disk_size2[@]} )\n\n\ttcpctrl=$( sysctl net.ipv4.tcp_congestion_control | awk -F ' ' '{print $3}' )\n\n\tvirt_check\n}\n\nprint_intro() {\n\tprintf ' Superbench.sh -- https://www.oldking.net/350.html\\n' | tee -a $log\n\tprintf \" Mode  : \\e${GREEN}%s\\e${PLAIN}    Version : \\e${GREEN}%s${PLAIN}\\n\" $mode_name 1.1.7 | tee -a $log\n\tprintf ' Usage : wget -qO- sb.oldking.net | bash\\n' | tee -a $log\n}\n\nsharetest() {\n\techo \" Share result:\" | tee -a $log\n\techo \" · $result_speed\" | tee -a $log\n\tlog_preupload\n\tcase $1 in\n\t'ubuntu')\n\t\tshare_link=\"https://paste.ubuntu.com\"$( curl -v --data-urlencode \"content@$log_up\" -d \"poster=superbench.sh\" -d \"syntax=text\" \"https://paste.ubuntu.com\" 2>&1 | \\\n\t\t\tgrep \"Location\" | awk '{print $3}' );;\n\t'haste' )\n\t\tshare_link=$( curl -X POST -s -d \"$(cat $log)\" https://hastebin.com/documents | awk -F '\"' '{print \"https://hastebin.com/\"$4}' );;\n\t'clbin' )\n\t\tshare_link=$( curl -sF 'clbin=<-' https://clbin.com < $log );;\n\t'ptpb' )\n\t\tshare_link=$( curl -sF c=@- https://ptpb.pw/?u=1 < $log );;\n\tesac\n\n\techo \" · $share_link\" | tee -a $log\n\tnext\n\techo \"\"\n\trm -f $log_up\n\n}\n\nlog_preupload() {\n\tlog_up=\"$HOME/superbench_upload.log\"\n\ttrue > $log_up\n\t$(cat superbench.log 2>&1 | sed -r \"s/\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g\" > $log_up)\n}\n\ncleanup() {\n\trm -f test_file_*\n\trm -rf speedtest*\n\trm -f fast_com*\n\trm -f tools.py\n\trm -f ip_json.json\n}\n\nbench_all(){\n\tmode_name=\"Standard\"\n\tabout;\n\tbenchinit;\n\tclear\n\tnext;\n\tprint_intro;\n\tnext;\n\tget_system_info;\n\tprint_system_info;\n\tip_info4;\n\tnext;\n\tprint_io;\n\tnext;\n\tprint_speedtest;\n\tnext;\n\tprint_end_time;\n\tnext;\n\tcleanup;\n\tsharetest ubuntu;\n}\n\nfast_bench(){\n\tmode_name=\"Fast\"\n\tabout;\n\tbenchinit;\n\tclear\n\tnext;\n\tprint_intro;\n\tnext;\n\tget_system_info;\n\tprint_system_info;\n\tip_info4;\n\tnext;\n\tprint_io fast;\n\tnext;\n\tprint_speedtest_fast;\n\tnext;\n\tprint_end_time;\n\tnext;\n\tcleanup;\n}\n\nlog=\"./superbench.log\"\ntrue > $log\nspeedLog=\"./speedtest.log\"\ntrue > $speedLog\n\ncase $1 in\n\t'info'|'-i'|'--i'|'-info'|'--info' )\n\t\tabout;sleep 3;next;get_system_info;print_system_info;next;;\n    'version'|'-v'|'--v'|'-version'|'--version')\n\t\tnext;about;next;;\n   \t'io'|'-io'|'--io'|'-drivespeed'|'--drivespeed' )\n\t\tnext;print_io;next;;\n\t'speed'|'-speed'|'--speed'|'-speedtest'|'--speedtest'|'-speedcheck'|'--speedcheck' )\n\t\tabout;benchinit;next;print_speedtest;next;cleanup;;\n\t'ip'|'-ip'|'--ip'|'geoip'|'-geoip'|'--geoip' )\n\t\tabout;benchinit;next;ip_info4;next;cleanup;;\n\t'bench'|'-a'|'--a'|'-all'|'--all'|'-bench'|'--bench' )\n\t\tbench_all;;\n\t'about'|'-about'|'--about' )\n\t\tabout;;\n\t'fast'|'-f'|'--f'|'-fast'|'--fast' )\n\t\tfast_bench;;\n\t'share'|'-s'|'--s'|'-share'|'--share' )\n\t\tbench_all;\n\t\tis_share=\"share\"\n\t\tif [[ $2 == \"\" ]]; then\n\t\t\tsharetest ubuntu;\n\t\telse\n\t\t\tsharetest $2;\n\t\tfi\n\t\t;;\n\t'debug'|'-d'|'--d'|'-debug'|'--debug' )\n\t\tget_ip_whois_org_name;;\n*)\n    bench_all;;\nesac\n\nif [[  ! $is_share == \"share\" ]]; then\n\tcase $2 in\n\t\t'share'|'-s'|'--s'|'-share'|'--share' )\n\t\t\tif [[ $3 == '' ]]; then\n\t\t\t\tsharetest ubuntu;\n\t\t\telse\n\t\t\t\tsharetest $3;\n\t\t\tfi\n\t\t\t;;\n\tesac\nfi"
        },
        {
          "name": "superbench_old.sh",
          "type": "blob",
          "size": 9.5185546875,
          "content": "#!/usr/bin/env bash\n#\n# Description: Auto test download & I/O speed & network to China script\n#\n# Copyright (C) 2017 - 2017 Oldking <oooldking@gmail.com>\n#\n# Thanks: Bench.sh <i@teddysun.com>\n#\n# URL: https://www.oldking.net/350.html\n#\n\n# Colors\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[0;33m'\nSKYBLUE='\\033[0;36m'\nPLAIN='\\033[0m'\n\n# check release\nif [ -f /etc/redhat-release ]; then\n    release=\"centos\"\nelif cat /etc/issue | grep -Eqi \"debian\"; then\n    release=\"debian\"\nelif cat /etc/issue | grep -Eqi \"ubuntu\"; then\n    release=\"ubuntu\"\nelif cat /etc/issue | grep -Eqi \"centos|red hat|redhat\"; then\n    release=\"centos\"\nelif cat /proc/version | grep -Eqi \"debian\"; then\n    release=\"debian\"\nelif cat /proc/version | grep -Eqi \"ubuntu\"; then\n    release=\"ubuntu\"\nelif cat /proc/version | grep -Eqi \"centos|red hat|redhat\"; then\n    release=\"centos\"\nfi\n\n# check root\n[[ $EUID -ne 0 ]] && echo -e \"${RED}Error:${PLAIN} This script must be run as root!\" && exit 1\n\n# check python\nif  [ ! -e '/usr/bin/python' ]; then\n        #echo -e\n        #read -p \"${RED}Error:${PLAIN} python is not install. You must be install python command at first.\\nDo you want to install? [y/n]\" is_install\n        #if [[ ${is_install} == \"y\" || ${is_install} == \"Y\" ]]; then\n            if [ \"${release}\" == \"centos\" ]; then\n            \t\t\tyum update > /dev/null 2>&1\n                        yum -y install python\n                else\n                \t\tapt-get update > /dev/null 2>&1\n                        apt-get -y install python\n                fi\n        #else\n        #    exit\n        #fi\n        \nfi\n\n# check wget\nif  [ ! -e '/usr/bin/wget' ]; then\n        #echo -e\n        #read -p \"${RED}Error:${PLAIN} wget is not install. You must be install wget command at first.\\nDo you want to install? [y/n]\" is_install\n        #if [[ ${is_install} == \"y\" || ${is_install} == \"Y\" ]]; then\n                if [ \"${release}\" == \"centos\" ]; then\n                \t\tyum update > /dev/null 2>&1\n                        yum -y install wget\n                else\n                \t\tapt-get update > /dev/null 2>&1\n                        apt-get -y install wget\n                fi\n        #else\n        #        exit\n        #fi\nfi\n\nget_opsy() {\n    [ -f /etc/redhat-release ] && awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release && return\n    [ -f /etc/os-release ] && awk -F'[= \"]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return\n    [ -f /etc/lsb-release ] && awk -F'[=\"]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return\n}\n\nnext() {\n    printf \"%-70s\\n\" \"-\" | sed 's/\\s/-/g'\n}\n\nspeed_test(){\n\tif [[ $1 == '' ]]; then\n\t\ttemp=$(python /tmp/speedtest.py --share 2>&1)\n\t\tis_down=$(echo \"$temp\" | grep 'Download') \n\t\tif [[ ${is_down} ]]; then\n\t        local REDownload=$(echo \"$temp\" | awk -F ':' '/Download/{print $2}')\n\t        local reupload=$(echo \"$temp\" | awk -F ':' '/Upload/{print $2}')\n\t        local relatency=$(echo \"$temp\" | awk -F ':' '/Hosted/{print $2}')\n\t        local nodeName=$2\n\n\t        printf \"${YELLOW}%-17s${GREEN}%-18s${RED}%-20s${SKYBLUE}%-12s${PLAIN}\\n\" \"${nodeName}\" \"${reupload}\" \"${REDownload}\" \"${relatency}\"\n\t\telse\n\t        local cerror=\"ERROR\"\n\t\tfi\n\telse\n\t\ttemp=$(python /tmp/speedtest.py --server $1 --share 2>&1)\n\t\tis_down=$(echo \"$temp\" | grep 'Download') \n\t\tif [[ ${is_down} ]]; then\n\t        local REDownload=$(echo \"$temp\" | awk -F ':' '/Download/{print $2}')\n\t        local reupload=$(echo \"$temp\" | awk -F ':' '/Upload/{print $2}')\n\t        local relatency=$(echo \"$temp\" | awk -F ':' '/Hosted/{print $2}')\n\t        temp=$(echo \"$relatency\" | awk -F '.' '{print $1}')\n        \tif [[ ${temp} -gt 1000 ]]; then\n            \trelatency=\" 000.000 ms\"\n        \tfi\n\t        local nodeName=$2\n\n\t        printf \"${YELLOW}%-17s${GREEN}%-18s${RED}%-20s${SKYBLUE}%-12s${PLAIN}\\n\" \"${nodeName}\" \"${reupload}\" \"${REDownload}\" \"${relatency}\"\n\t\telse\n\t        local cerror=\"ERROR\"\n\t\tfi\n\tfi\n}\n\nspeed() {\n\t# install speedtest\n\tif  [ ! -e '/tmp/speedtest.py' ]; then\n\t    wget --no-check-certificate -P /tmp https://raw.github.com/sivel/speedtest-cli/master/speedtest.py > /dev/null 2>&1\n\tfi\n\tchmod a+rx /tmp/speedtest.py\n\n    speed_test '' 'Normal Node'\n    speed_test '6435' 'Xiangyang CT'\n    speed_test '7509' 'Kunming   CT'\n\tspeed_test '3633' 'Shanghai  CT'\n\tspeed_test '4624' 'Chengdu   CT'\n\tspeed_test '5017' 'Shenyang  CU'\n\tspeed_test '4863' \"Xi'an     CU\"\n\tspeed_test '5083' 'Shanghai  CU'\n\tspeed_test '5726' 'Chongqing CU'\n\tspeed_test '5292' \"Xi'an     CM\"\n\tspeed_test '16314' 'Shandong  CM'\n\tspeed_test '6715' 'Ningbo    CM'\n\tspeed_test '4575' 'Chengdu   CM'\n\t \n\trm -rf /tmp/speedtest.py\n}\n\n\nio_test() {\n    (LANG=C dd if=/dev/zero of=test_$$ bs=$1 count=$2 conv=fdatasync && rm -f test_$$ ) 2>&1 | awk -F, '{io=$NF} END { print io}' | sed 's/^[ \\t]*//;s/[ \\t]*$//'\n}\n\ncalc_disk() {\n    local total_size=0\n    local array=$@\n    for size in ${array[@]}\n    do\n        [ \"${size}\" == \"0\" ] && size_t=0 || size_t=`echo ${size:0:${#size}-1}`\n        [ \"`echo ${size:(-1)}`\" == \"K\" ] && size=0\n        [ \"`echo ${size:(-1)}`\" == \"M\" ] && size=$( awk 'BEGIN{printf \"%.1f\", '$size_t' / 1024}' )\n        [ \"`echo ${size:(-1)}`\" == \"T\" ] && size=$( awk 'BEGIN{printf \"%.1f\", '$size_t' * 1024}' )\n        [ \"`echo ${size:(-1)}`\" == \"G\" ] && size=${size_t}\n        total_size=$( awk 'BEGIN{printf \"%.1f\", '$total_size' + '$size'}' )\n    done\n    echo ${total_size}\n}\n\npower_time() {\n\n\tresult=$(smartctl -a $(result=$(cat /proc/mounts) && echo $(echo \"$result\" | awk '/data=ordered/{print $1}') | awk '{print $1}') 2>&1) && power_time=$(echo \"$result\" | awk '/Power_On/{print $10}') && echo \"$power_time\"\n}\n\ninstall_smart() {\n\t# install smartctl\n\tif  [ ! -e '/usr/sbin/smartctl' ]; then\n\t    if [ \"${release}\" == \"centos\" ]; then\n\t    \tyum update > /dev/null 2>&1\n\t        yum -y install smartmontools > /dev/null 2>&1\n\t    else\n\t    \tapt-get update > /dev/null 2>&1\n\t        apt-get -y install smartmontools > /dev/null 2>&1\n\t    fi      \n\tfi\n}\n\nstart=$(date +%s) \n\ncname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\ncores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )\nfreq=$( awk -F: '/cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\ntram=$( free -m | awk '/Mem/ {print $2}' )\nuram=$( free -m | awk '/Mem/ {print $3}' )\nswap=$( free -m | awk '/Swap/ {print $2}' )\nuswap=$( free -m | awk '/Swap/ {print $3}' )\nup=$( awk '{a=$1/86400;b=($1%86400)/3600;c=($1%3600)/60} {printf(\"%d days %d hour %d min\\n\",a,b,c)}' /proc/uptime )\nload=$( w | head -1 | awk -F'load average:' '{print $2}' | sed 's/^[ \\t]*//;s/[ \\t]*$//' )\nopsy=$( get_opsy )\narch=$( uname -m )\nlbit=$( getconf LONG_BIT )\nkern=$( uname -r )\nipv6=$( wget -qO- -t1 -T2 ipv6.icanhazip.com )\ndisk_size1=($( LANG=C df -hPl | grep -wvE '\\-|none|tmpfs|devtmpfs|by-uuid|chroot|Filesystem' | awk '{print $2}' ))\ndisk_size2=($( LANG=C df -hPl | grep -wvE '\\-|none|tmpfs|devtmpfs|by-uuid|chroot|Filesystem' | awk '{print $3}' ))\ndisk_total_size=$( calc_disk ${disk_size1[@]} )\ndisk_used_size=$( calc_disk ${disk_size2[@]} )\nptime=$(power_time)\n\n\nclear\nnext\necho -e \"CPU model            : ${SKYBLUE}$cname${PLAIN}\"\necho -e \"Number of cores      : ${SKYBLUE}$cores${PLAIN}\"\necho -e \"CPU frequency        : ${SKYBLUE}$freq MHz${PLAIN}\"\necho -e \"Total size of Disk   : ${SKYBLUE}$disk_total_size GB ($disk_used_size GB Used)${PLAIN}\"\necho -e \"Total amount of Mem  : ${SKYBLUE}$tram MB ($uram MB Used)${PLAIN}\"\necho -e \"Total amount of Swap : ${SKYBLUE}$swap MB ($uswap MB Used)${PLAIN}\"\necho -e \"System uptime        : ${SKYBLUE}$up${PLAIN}\"\necho -e \"Load average         : ${SKYBLUE}$load${PLAIN}\"\necho -e \"OS                   : ${SKYBLUE}$opsy${PLAIN}\"\necho -e \"Arch                 : ${SKYBLUE}$arch ($lbit Bit)${PLAIN}\"\necho -e \"Kernel               : ${SKYBLUE}$kern${PLAIN}\"\necho -ne \"Virt                 : \"\n\n# install virt-what\nif  [ ! -e '/usr/sbin/virt-what' ]; then\n    if [ \"${release}\" == \"centos\" ]; then\n    \tyum update > /dev/null 2>&1\n        yum -y install virt-what > /dev/null 2>&1\n    else\n    \tapt-get update > /dev/null 2>&1\n        apt-get -y install virt-what > /dev/null 2>&1\n    fi      \nfi\nvirtua=$(virt-what) 2>/dev/null\n\nif [[ ${virtua} ]]; then\n\techo -e \"${SKYBLUE}$virtua${PLAIN}\"\nelse\n\techo -e \"${SKYBLUE}No Virt${PLAIN}\"\n\techo -ne \"Power time of disk   : \"\n\tinstall_smart\n\techo -e \"${SKYBLUE}$ptime Hours${PLAIN}\"\nfi\nnext\necho -n \"I/O speed( 32M )     : \"\nio1=$( io_test 32k 1k )\necho -e \"${YELLOW}$io1${PLAIN}\"\necho -n \"I/O speed( 256M )    : \"\nio2=$( io_test 64k 4k )\necho -e \"${YELLOW}$io2${PLAIN}\"\necho -n \"I/O speed( 2G )      : \"\nio3=$( io_test 64k 32k )\necho -e \"${YELLOW}$io3${PLAIN}\"\nioraw1=$( echo $io1 | awk 'NR==1 {print $1}' )\n[ \"`echo $io1 | awk 'NR==1 {print $2}'`\" == \"GB/s\" ] && ioraw1=$( awk 'BEGIN{print '$ioraw1' * 1024}' )\nioraw2=$( echo $io2 | awk 'NR==1 {print $1}' )\n[ \"`echo $io2 | awk 'NR==1 {print $2}'`\" == \"GB/s\" ] && ioraw2=$( awk 'BEGIN{print '$ioraw2' * 1024}' )\nioraw3=$( echo $io3 | awk 'NR==1 {print $1}' )\n[ \"`echo $io3 | awk 'NR==1 {print $2}'`\" == \"GB/s\" ] && ioraw3=$( awk 'BEGIN{print '$ioraw3' * 1024}' )\nioall=$( awk 'BEGIN{print '$ioraw1' + '$ioraw2' + '$ioraw3'}' )\nioavg=$( awk 'BEGIN{printf \"%.1f\", '$ioall' / 3}' )\necho -e \"Average I/O speed    : ${YELLOW}$ioavg MB/s${PLAIN}\"\nnext\nprintf \"%-18s%-18s%-20s%-12s\\n\" \"Node Name\" \"Upload Speed\" \"Download Speed\" \"Latency\"\nspeed && next\nend=$(date +%s) \ntime=$(( $end - $start ))\nif [[ $time -gt 60 ]]; then\n\tmin=$(expr $time / 60)\n\tsec=$(expr $time % 60)\n\techo -ne \"Total time   : ${min} min ${sec} sec\"\nelse\n\techo -ne \"Total time   : ${time} sec\"\nfi\necho -ne \"\\nCurrent time : \"\necho $(date +%Y-%m-%d\" \"%H:%M:%S)\necho \"Finished！\"\nnext"
        },
        {
          "name": "superspeed.sh",
          "type": "blob",
          "size": 12.80078125,
          "content": "#!/usr/bin/env bash\n#\n# Description: Test your server's network with Speedtest to China\n#\n# Copyright (C) 2017 - 2017 Oldking <oooldking@gmail.com>\n#\n# URL: https://www.oldking.net/305.html\n#\n\n# Colors\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[0;33m'\nSKYBLUE='\\033[0;36m'\nPLAIN='\\033[0m'\n\n# check root\n[[ $EUID -ne 0 ]] && echo -e \"${RED}Error:${PLAIN} This script must be run as root!\" && exit 1\n\n# check python\nif  [ ! -e '/usr/bin/python' ]; then\n        echo -e\n        read -p \"${RED}Error:${PLAIN} python is not install. You must be install python command at first.\\nDo you want to install? [y/n]\" is_install\n        if [[ ${is_install} == \"y\" || ${is_install} == \"Y\" ]]; then\n            if [ \"${release}\" == \"centos\" ]; then\n                        yum -y install python\n                else\n                        apt-get -y install python\n                fi\n        else\n            exit\n        fi\n        \nfi\n\n# check wget\nif  [ ! -e '/usr/bin/wget' ]; then\n        echo -e\n        read -p \"${RED}Error:${PLAIN} wget is not install. You must be install wget command at first.\\nDo you want to install? [y/n]\" is_install\n        if [[ ${is_install} == \"y\" || ${is_install} == \"Y\" ]]; then\n                if [ \"${release}\" == \"centos\" ]; then\n                        yum -y install wget\n                else\n                        apt-get -y install wget\n                fi\n        else\n                exit\n        fi\nfi\n\n\nclear\necho \"#############################################################\"\necho \"# Description: Test your server's network with Speedtest    #\"\necho \"# Intro:  https://www.oldking.net/305.html                  #\"\necho \"# Author: Oldking <oooldking@gmail.com>                     #\"\necho \"# Github: https://github.com/oooldking                      #\"\necho \"#############################################################\"\necho\necho \"测试服务器到\"\necho -ne \"1.中国电信 2.中国联通 3.中国移动 4.本地默认 5.全面测速\"\n\nwhile :; do echo\n        read -p \"请输入数字选择： \" telecom\n        if [[ ! $telecom =~ ^[1-5]$ ]]; then\n                echo \"输入错误! 请输入正确的数字!\"\n        else\n                break   \n        fi\ndone\n\nif [[ ${telecom} == 1 ]]; then\n        telecomName=\"电信\"\n        echo -e \"\\n选择最靠近你的方位\"\n    echo -ne \"1.北方 2.南方\"\n    while :; do echo\n            read -p \"请输入数字选择： \" pos\n            if [[ ! $pos =~ ^[1-2]$ ]]; then\n                    echo \"输入错误! 请输入正确的数字!\"\n            else\n                    break\n            fi\n    done\n    echo -e \"\\n选择最靠近你的城市\"\n    if [[ ${pos} == 1 ]]; then\n        echo -ne \"1.郑州 2.襄阳\"\n        while :; do echo\n                read -p \"请输入数字选择： \" city\n                if [[ ! $city =~ ^[1-2]$ ]]; then\n                        echo \"输入错误! 请输入正确的数字!\"\n                else\n                        break\n            fi\n        done\n        if [[ ${city} == 1 ]]; then\n                num=4595\n                cityName=\"郑州\"\n        fi\n        if [[ ${city} == 2 ]]; then\n                num=12637\n                cityName=\"襄阳\"\n        fi\n    fi\n    if [[ ${pos} == 2 ]]; then\n        echo -ne \"1.上海 2.杭州 3.南宁 4.南昌 5.长沙 6.深圳 7.重庆 8.成都\"\n        while :; do echo\n                read -p \"请输入数字选择： \" city\n                if [[ ! $city =~ ^[1-8]$ ]]; then\n                        echo \"输入错误! 请输入正确的数字!\"\n                else\n                        break\n            fi\n        done\n        if [[ ${city} == 1 ]]; then\n                num=3633\n                cityName=\"上海\"\n        fi\n        if [[ ${city} == 2 ]]; then\n                num=7509\n                cityName=\"杭州\"\n        fi\n        if [[ ${city} == 3 ]]; then\n                num=10305\n                cityName=\"南宁\"\n        fi\n        if [[ ${city} == 4 ]]; then\n                num=7230\n                cityName=\"南昌\"\n        fi\n        if [[ ${city} == 5 ]]; then\n                num=6132\n                cityName=\"长沙\"\n        fi\n        if [[ ${city} == 6 ]]; then\n                num=5081\n                cityName=\"深圳\"\n        fi\n        if [[ ${city} == 7 ]]; then\n                num=6592\n                cityName=\"重庆\"\n        fi\n        if [[ ${city} == 8 ]]; then\n                num=4624\n                cityName=\"成都\"\n        fi\n    fi\nfi\n\nif [[ ${telecom} == 2 ]]; then\n        telecomName=\"联通\"\n    echo -ne \"\\n1.北方 2.南方\"\n    while :; do echo\n            read -p \"请输入数字选择： \" pos\n            if [[ ! $pos =~ ^[1-2]$ ]]; then\n                    echo \"输入错误! 请输入正确的数字!\"\n            else\n                    break\n            fi\n    done\n    echo -e \"\\n选择最靠近你的城市\"\n    if [[ ${pos} == 1 ]]; then\n        echo -ne \"1.沈阳 2.长春 3.哈尔滨 4.天津 5.济南 6.北京 7.郑州 8.西安 9.太原 10.宁夏 11.兰州 12.西宁\"\n        while :; do echo\n                read -p \"请输入数字选择： \" city\n                if [[ ! $city =~ ^(([1-9])|(1([0-2]{1})))$ ]]; then\n                        echo \"输入错误! 请输入正确的数字!\"\n                else\n                        break\n            fi\n        done\n        if [[ ${city} == 1 ]]; then\n                num=5017\n                cityName=\"沈阳\"\n        fi\n        if [[ ${city} == 2 ]]; then\n                num=9484\n                cityName=\"长春\"\n        fi\n        if [[ ${city} == 3 ]]; then\n                num=5460\n                cityName=\"哈尔滨\"\n        fi\n        if [[ ${city} == 4 ]]; then\n                num=5475\n                cityName=\"天津\"\n        fi\n        if [[ ${city} == 5 ]]; then\n                num=5039\n                cityName=\"济南\"\n        fi\n        if [[ ${city} == 6 ]]; then\n                num=5145\n                cityName=\"北京\"\n        fi\n        if [[ ${city} == 7 ]]; then\n                num=5131\n                cityName=\"郑州\"\n        fi\n        if [[ ${city} == 8 ]]; then\n                num= 4863\n                cityName=\"西安\"\n        fi\n        if [[ ${city} == 9 ]]; then\n                num=12868\n                cityName=\"太原\"\n        fi\n        if [[ ${city} == 10 ]]; then\n                num=5509\n                cityName=\"宁夏\"\n        fi\n        if [[ ${city} == 11 ]]; then\n                num=4690\n                cityName=\"兰州\"\n        fi\n        if [[ ${city} == 12 ]]; then\n                num=5992\n                cityName=\"西宁\"\n        fi\n    fi\n    if [[ ${pos} == 2 ]]; then\n        echo -ne \"1.上海 2.杭州 3.南宁 4.合肥 5.南昌 6.长沙 7.深圳 8.广州 9.重庆 10.昆明 11.成都\"\n        while :; do echo\n                read -p \"请输入数字选择： \" city\n                if [[ ! $city =~ ^(([1-9])|(1([0-1]{1})))$ ]]; then\n                        echo \"输入错误! 请输入正确的数字!\"\n                else\n                        break\n            fi\n        done\n        if [[ ${city} == 1 ]]; then\n                num=5083\n                cityName=\"上海\"\n        fi\n        if [[ ${city} == 2 ]]; then\n                num=5300\n                cityName=\"杭州\"\n        fi\n        if [[ ${city} == 3 ]]; then\n                num=5674\n                cityName=\"南宁\"\n        fi\n        if [[ ${city} == 4 ]]; then\n                num=5724\n                cityName=\"合肥\"\n        fi\n        if [[ ${city} == 5 ]]; then\n                num=5079\n                cityName=\"南昌\"\n        fi\n        if [[ ${city} == 6 ]]; then\n                num=4870\n                cityName=\"长沙\"\n        fi\n        if [[ ${city} == 7 ]]; then\n                num=10201\n                cityName=\"深圳\"\n        fi\n        if [[ ${city} == 8 ]]; then\n                num=3891\n                cityName=\"广州\"\n        fi\n        if [[ ${city} == 9 ]]; then\n                num=5726\n                cityName=\"重庆\"\n        fi\n        if [[ ${city} == 10 ]]; then\n                num=5103\n                cityName=\"昆明\"\n        fi\n        if [[ ${city} == 11 ]]; then\n                num=2461\n                cityName=\"成都\"\n        fi\n    fi\nfi\n\nif [[ ${telecom} == 3 ]]; then\n        telecomName=\"移动\"\n    echo -ne \"\\n1.北方 2.南方\"\n    while :; do echo\n            read -p \"请输入数字选择： \" pos\n            if [[ ! $pos =~ ^[1-2]$ ]]; then\n                    echo \"输入错误! 请输入正确的数字!\"\n            else\n                    break\n            fi\n    done\n    echo -e \"\\n选择最靠近你的城市\"\n    if [[ ${pos} == 1 ]]; then\n        echo -ne \"1.西安\"\n        while :; do echo\n                read -p \"请输入数字选择： \" city\n                if [[ ! $city =~ ^[1]$ ]]; then\n                        echo \"输入错误! 请输入正确的数字!\"\n                else\n                        break\n            fi\n        done\n        if [[ ${city} == 1 ]]; then\n                num=5292\n        fi\n    fi\n    if [[ ${pos} == 2 ]]; then\n        echo -ne \"1.上海 2.宁波 3.无锡 4.杭州 5.合肥 6.成都\"\n        while :; do echo\n                read -p \"请输入数字选择： \" city\n                if [[ ! $city =~ ^[1-6]$ ]]; then\n                        echo \"输入错误! 请输入正确的数字!\"\n                else\n                        break\n            fi\n        done\n        if [[ ${city} == 1 ]]; then\n                num=4665\n                cityName=\"上海\"\n        fi\n        if [[ ${city} == 2 ]]; then\n                num=6715\n                cityName=\"宁波\"\n        fi\n        if [[ ${city} == 3 ]]; then\n                num=5122\n                cityName=\"无锡\"\n        fi\n        if [[ ${city} == 4 ]]; then\n                num=4647\n                cityName=\"杭州\"\n        fi\n        if [[ ${city} == 5 ]]; then\n                num=4377 \n                cityName=\"合肥\"\n        fi\n        if [[ ${city} == 6 ]]; then\n                num=4575\n                cityName=\"成都\"\n        fi\n    fi\nfi\n\n# install speedtest\nif  [ ! -e '/tmp/speedtest.py' ]; then\n    wget --no-check-certificate -P /tmp https://raw.github.com/sivel/speedtest-cli/master/speedtest.py > /dev/null 2>&1\nfi\nchmod a+rx /tmp/speedtest.py\n\nresult() {\n    download=`cat /tmp/speed.log | awk -F ':' '/Download/{print $2}'`\n    upload=`cat /tmp/speed.log | awk -F ':' '/Upload/{print $2}'`\n    hostby=`cat /tmp/speed.log | awk -F ':' '/Hosted/{print $1}'`\n    latency=`cat /tmp/speed.log | awk -F ':' '/Hosted/{print $2}'`\n    clear\n    echo \"$hostby\"\n    echo \"延迟  : $latency\"\n    echo \"上传  : $upload\"\n    echo \"下载  : $download\"\n    echo -ne \"\\n当前时间: \"\n    echo $(date +%Y-%m-%d\" \"%H:%M:%S)\n}\n\nspeed_test(){\n\ttemp=$(python /tmp/speedtest.py --server $1 --share 2>&1)\n\tis_down=$(echo \"$temp\" | grep 'Download') \n\tif [[ ${is_down} ]]; then\n        local REDownload=$(echo \"$temp\" | awk -F ':' '/Download/{print $2}')\n        local reupload=$(echo \"$temp\" | awk -F ':' '/Upload/{print $2}')\n        local relatency=$(echo \"$temp\" | awk -F ':' '/Hosted/{print $2}')\n        temp=$(echo \"$relatency\" | awk -F '.' '{print $1}')\n        if [[ ${temp} -gt 1000 ]]; then\n            relatency=\" 000.000 ms\"\n        fi\n        local nodeName=$2\n\n        printf \"${YELLOW}%-17s${GREEN}%-18s${RED}%-20s${SKYBLUE}%-12s${PLAIN}\\n\" \"${nodeName}\" \"${reupload}\" \"${REDownload}\" \"${relatency}\"\n\telse\n        local cerror=\"ERROR\"\n\tfi\n}\n\nif [[ ${telecom} =~ ^[1-3]$ ]]; then\n    python /tmp/speedtest.py --server ${num} --share 2>/dev/null | tee /tmp/speed.log 2>/dev/null\n    is_down=$(cat /tmp/speed.log | grep 'Download')\n\n    if [[ ${is_down} ]]; then\n        result\n        echo \"测试到 ${cityName}${telecomName} 完成！\"\n        rm -rf /tmp/speedtest.py\n        rm -rf /tmp/speed.log\n    else\n\t    echo -e \"\\n${RED}ERROR:${PLAIN} 当前节点不可用，请更换其他节点，或换个时间段再测试。\"\n\tfi\nfi\n\nif [[ ${telecom} == 4 ]]; then\n    python /tmp/speedtest.py | tee /tmp/speed.log\n    result\n    echo \"本地测试完成！\"\n    rm -rf /tmp/speedtest.py\n    rm -rf /tmp/speed.log\nfi\n\nif [[ ${telecom} == 5 ]]; then\n\techo \"\"\n\tprintf \"%-14s%-18s%-20s%-12s\\n\" \"Node Name\" \"Upload Speed\" \"Download Speed\" \"Latency\"\n\tstart=$(date +%s) \n    speed_test '6435' '襄阳电信'\n    speed_test '7509' '昆明电信'\n\tspeed_test '3633' '上海电信'\n\tspeed_test '4624' '成都电信'\n\tspeed_test '5017' '沈阳联通'\n\tspeed_test '4863' '西安联通'\n\tspeed_test '5083' '上海联通'\n\tspeed_test '5726' '重庆联通'\n\tspeed_test '5292' '西安移动'\n\tspeed_test '16314' '山东移动'\n    speed_test '6715' '宁波移动'\n\tspeed_test '4575' '成都移动'\n\tend=$(date +%s)  \n\trm -rf /tmp/speedtest.py\n\techo \"\"\n\ttime=$(( $end - $start ))\n\tif [[ $time -gt 60 ]]; then\n\t\tmin=$(expr $time / 60)\n\t\tsec=$(expr $time % 60)\n\t\techo -ne \"花费时间：${min} 分 ${sec} 秒\"\n\telse\n\t\techo -ne \"花费时间：${time} 秒\"\n\tfi\n\techo -ne \"\\n当前时间: \"\n    echo $(date +%Y-%m-%d\" \"%H:%M:%S)\n\techo \"全面测试完成！\"\nfi\n"
        },
        {
          "name": "supertrace.sh",
          "type": "blob",
          "size": 2.9677734375,
          "content": "#!/usr/bin/env bash\n#\n# Description: Auto Traceroute to China Network\n#\n# Copyright (C) 2022 Oldking <oooldking@gmail.com>\n#\n# Thanks: Besttrace\n#\n# URL: https://www.oldking.net/1359.html\n#\n\n# Color\nSKYBLUE='\\033[0;36m'\nGREEN='\\033[0;32m'\nPLAIN='\\033[0m'\n\n# Version\nVERSION=1.0.0\n\n# Define ip address & location name\nipAddr=(106.37.68.26 202.96.18.1 211.136.66.129 210.31.160.77 101.95.89.90 219.158.111.253 221.183.89.46 202.112.27.18 219.135.131.210 210.21.11.1 211.136.192.6 202.112.19.9)\nlocName=(北京电信 北京联通 北京移动 北京教育 上海电信 上海联通 上海移动 上海教育 广州电信 广州联通 广州移动 广州教育)\n\nabout() {\n    echo \"\"\n    echo \" ========================================================= \"\n    echo \" \\                 SuperTrace.sh  Script                 / \"\n    echo \" \\           Auto Traceroute to China Network            / \"\n    echo \" \\                   Created by Oldking                  / \"\n    echo \" ========================================================= \"\n    echo \"\"\n    echo \" Intro: https://www.oldking.net/1359.html\"\n    echo \" Copyright (C) 2022 Oldking oooldking@gmail.com\"\n    echo -e \" Version: ${GREEN}v$VERSION${PLAIN} (1 Dec 2022)\"\n    echo -e \" ${SKYBLUE}Usage : wget -qO- oldking.net/supertrace.sh | bash${PLAIN}\"\n    echo \"\"\n}\n\ncancel() {\n    echo \"\"\n    next;\n    echo \" Abort ...\"\n    echo \" Cleanup ...\"\n    cleanup;\n    echo \" Done\"\n    exit\n}\n\ntrap cancel SIGINT\n\n# define \"---\"\nnext() {\n    printf \"%-20s\\n\" \"-\" | sed 's/\\s/-/g'\n}\n\n# prepate environment\ninit() {\n    # Check OS\n    arch=$( uname -m )\n\n    # install besttrace\n    echo \" Loading supertrace...\"\n    echo \"\"\n    echo -e \"${SKYBLUE}START${PLAIN}\"\n    case ${arch} in\n    x86_64 )\n        wget -qO supertrace https://github.com/oooldking/script/raw/master/supertrace/besttrace/besttrace;;\n    aarch64) \n        wget -qO supertrace https://github.com/oooldking/script/raw/master/supertrace/besttrace/besttracearm;;\n    esac\n    chmod +x supertrace\n\n    start=$(date +%s)  \n}\n\nclear\n\n## trace route\ntrace() {\n    for i in {0..11}\n    do\n        next\n        echo -e \"${SKYBLUE}Round $((i+1)) - SuperTrace 路由到 - ${locName[$i]}${PLAIN}\"\n        next\n        ./supertrace -q 1 ${ipAddr[$i]}\n        echo \"\"\n        echo \"\"\n    done\n}\n\n# calculate and print time\nprint_end_time() {\n    end=$(date +%s) \n    time=$(( $end - $start ))\n    if [[ $time -gt 60 ]]; then\n        min=$(expr $time / 60)\n        sec=$(expr $time % 60)\n        echo -ne \"Finished in  : ${min} min ${sec} sec\" | tee -a $log\n    else\n        echo -ne \"Finished in  : ${time} sec\" | tee -a $log\n    fi\n\n    printf '\\n' | tee -a $log\n\n    bj_time=$(curl -s http://cgi.im.qq.com/cgi-bin/cgi_svrtime)\n\n    if [[ $(echo $bj_time | grep \"html\") ]]; then\n        bj_time=$(date -u +%Y-%m-%d\" \"%H:%M:%S -d '+8 hours')\n    fi\n    echo -e \"Timestamp    : $bj_time GMT+8\" | tee -a $log\n    echo -e \"${SKYBLUE}End${PLAIN}\"\n}\n\n# clean trash\ncleanup() {\n    rm -f supertrace*\n}\n\n# start\nabout\ninit\ntrace\nprint_end_time\n"
        },
        {
          "name": "supertrace",
          "type": "tree",
          "content": null
        },
        {
          "name": "superupdate.sh",
          "type": "blob",
          "size": 7.384765625,
          "content": "#!/usr/bin/env bash\n#\n# Description: Choose a faster mirror for Linux script\n#\n# Copyright (C) 2017 - 2018 Oldking <oooldking@gmail.com>\n#\n# URL: https://www.oldking.net/697.html\n#\n\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[0;33m'\nSKYBLUE='\\033[0;36m'\nPLAIN='\\033[0m'\n\ngetAbout() {\n\techo \"\"\n\techo \" ========================================================= \"\n\techo \" \\                 SuperUpdate.sh  Script                / \"\n\techo \" \\            Choose a faster mirror for Linux           / \"\n\techo \" \\                   Created by Oldking                  / \"\n\techo \" ========================================================= \"\n\techo \"\"\n\techo \" Intro: https://www.oldking.net/697.html\"\n\techo \" Copyright (C) 2018 Oldking oooldking@gmail.com\"\n\techo -e \" Version: ${GREEN}1.0.3${PLAIN} (2 Nov 2018)\"\n\techo \" Usage: wget -qO- git.io/superupdate.sh | bash\"\n\techo \"\"\n}\n\ngetHelp(){\n\techo \" $( bash superupdate.sh )\"\n\tehco \" - set sources from cdn-fastly \"\n\techo \" $( bash superupdate.sh cn ) \"\n\techo \" - set sources from USTC \"\n\techo \" $( bash superupdate.sh 163 ) \"\n\techo \" - set sources from 163.com \"\n\techo \" $( bash superupdate.sh aliyun ) \"\n\techo \" - set sources from aliyun.com \"\n\techo \" $( bash superupdate.sh aws ) \"\n\techo \" - set sources from cdn-aws \"\n\techo \" $( bash superupdate.sh restore ) \"\n\techo \" - restore sources from backup file \"\n}\n\nupdateInit(){\n\t[[ $EUID -ne 0 ]] && echo -e \" ${RED}Error:${PLAIN} This script must be run as root!\" && exit 1\n\n\tif [ -f /etc/redhat-release ]; then\n\t    release=\"centos\"\n\telif cat /etc/issue | grep -Eqi \"debian\"; then\n\t    release=\"debian\"\n\telif cat /etc/issue | grep -Eqi \"ubuntu\"; then\n\t    release=\"ubuntu\"\n\telif cat /etc/issue | grep -Eqi \"centos|red hat|redhat\"; then\n\t    release=\"centos\"\n\telif cat /proc/version | grep -Eqi \"debian\"; then\n\t    release=\"debian\"\n\telif cat /proc/version | grep -Eqi \"ubuntu\"; then\n\t    release=\"ubuntu\"\n\telif cat /proc/version | grep -Eqi \"centos|red hat|redhat\"; then\n\t    release=\"centos\"\n\tfi\n\n\tif [ $release == \"debian\" ]; then\n\t\tdebianVersion=$(awk -F'[= \"]' '/VERSION_ID/{print $3}' /etc/os-release)\n\telif [ $release == \"ubuntu\" ]; then\n\t\tubuntuVersion=$(awk -F'[= \"]' '/VERSION_ID/{print $3}' /etc/os-release)\n\telif [ $release == \"centos\" ]; then\n\t\tos_release=$(grep \"CentOS\" /etc/redhat-release 2>/dev/null)\n\t\tif echo \"$os_release\"|grep \"release 5\" >/dev/null 2>&1\n\t\tthen\n\t\t\tcentosVersion=5\n\t\telif echo \"$os_release\"|grep \"release 6\" >/dev/null 2>&1\n\t\tthen\n\t\t\tcentosVersion=6\n\t\telif echo \"$os_release\"|grep \"release 7\" >/dev/null 2>&1\n\t\tthen\n\t\t\tcentosVersion=7\n\t\telse\n\t\t\tcentosVersion=\"\"\n\t\tfi\n\telse\n\t\techo -e \" ${RED}Error:${PLAIN} This script can not be run in your system now!\" && exit 1\n\tfi\n}\n\nsetDebian(){\n\tif [[ -f /etc/apt/sources.list.bak ]]; then\n\t\techo -e \" ${GREEN}sources.list.bak exists${PLAIN}\"\n\telse\n\t\tmv /etc/apt/sources.list{,.bak}\n\tfi\n\n\t[ -f /etc/apt/sources.list ] && rm /etc/apt/sources.list\n\t\n\techo \"deb http://cdn-fastly.deb.debian.org/debian/ jessie main non-free contrib\" >>/etc/apt/sources.list\n\techo \"deb http://cdn-fastly.deb.debian.org/debian/ jessie-updates main non-free contrib\" >>/etc/apt/sources.list\n\techo \"deb http://cdn-fastly.deb.debian.org/debian/ jessie-backports main non-free contrib\" >>/etc/apt/sources.list\n\techo \"deb-src http://cdn-fastly.deb.debian.org/debian/ jessie main non-free contrib\" >>/etc/apt/sources.list\n\techo \"deb-src http://cdn-fastly.deb.debian.org/debian/ jessie-updates main non-free contrib\" >>/etc/apt/sources.list\n\techo \"deb-src http://cdn-fastly.deb.debian.org/debian/ jessie-backports main non-free contrib\" >>/etc/apt/sources.list\n\techo \"deb http://cdn-fastly.deb.debian.org/debian-security/ jessie/updates main non-free contrib\" >>/etc/apt/sources.list\n\techo \"deb-src http://cdn-fastly.deb.debian.org/debian-security/ jessie/updates main non-free contrib\" >>/etc/apt/sources.list\n\n\t[ \"$debianVersion\" == '7' ] && sed -i 's/jessie/wheezy/'g /etc/apt/sources.list\n\t[ \"$debianVersion\" == '8' ] && echo -n \"\"\n\t[ \"$debianVersion\" == '9' ] && sed -i 's/jessie/stretch/'g /etc/apt/sources.list\n}\n\nsetUbuntu(){\n\tif [[ -f /etc/apt/sources.list.bak ]]; then\n\t\techo -e \" ${GREEN}sources.list.bak exists${PLAIN}\"\n\telse\n\t\tmv /etc/apt/sources.list{,.bak}\n\tfi\n\n\t[ -f /etc/apt/sources.list ] && rm /etc/apt/sources.list\n\n\techo \"deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse\" >>/etc/apt/sources.list\n\techo \"deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse\" >>/etc/apt/sources.list\n\techo \"deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse\" >>/etc/apt/sources.list\n\techo \"deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse\" >>/etc/apt/sources.list\n\techo \"deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse\" >>/etc/apt/sources.list\n\techo \"deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse\" >>/etc/apt/sources.list\n\techo \"deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse\" >>/etc/apt/sources.list\n\techo \"deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse\" >>/etc/apt/sources.list\n\n\t[ \"$ubuntuVersion\" == '14.04' ] && sed -i 's/xenial/trusty/'g /etc/apt/sources.list\n\t[ \"$ubuntuVersion\" == '16.06' ] && echo -n \"\"\n\t[ \"$ubuntuVersion\" == '18.04' ] && sed -i 's/xenial/bionic/'g /etc/apt/sources.list\n}\n\nsetCentos(){\n\tif [ -f /etc/yum.repos.d/CentOS-Base.repo.bak ]; then\n\t\techo -e \" ${GREEN}CentOS-Base.repo.bak exists${PLAIN}\"\n\telse\n\t\tmv /etc/yum.repos.d/CentOS-Base.repo{,.bak}\n\tfi\n\n\t[ -f /etc/yum.repos.d/CentOS-Base.repo ] && rm /etc/yum.repos.d/CentOS-Base.repo\n\n\t[ \"$centosVersion\" == '5' ] && wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo\n\t[ \"$centosVersion\" == '6' ] && wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\n\t[ \"$centosVersion\" == '7' ] && wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n}\n\nsetAWS(){\n\tsed -i 's/cdn-fastly.deb.debian.org/cdn-aws.deb.debian.org/'g /etc/apt/sources.list\n}\n\nsetCn(){\n\tsed -i 's/cdn-fastly.deb.debian.org/mirrors.ustc.edu.cn/'g /etc/apt/sources.list\n}\n\nset163(){\n\tsed -i 's/cdn-fastly.deb.debian.org/mirrors.163.com/'g /etc/apt/sources.list\n}\n\nsetAliyun(){\n\tsed -i 's/cdn-fastly.deb.debian.org/mirrors.aliyun.com/'g /etc/apt/sources.list\n}\n\nrestore(){\n\tif [ -f /etc/apt/sources.list.bak ]; then\n\t\trm /etc/apt/sources.list\n\t\tmv /etc/apt/sources.list.bak /etc/apt/sources.list\n\telif [ -f /etc/yum.repos.d/CentOS-Base.repo.bak ]; then\n\t\trm /etc/yum.repos.d/CentOS-Base.repo\n\t\tmv /etc/yum.repos.d/CentOS-Base.repo.bak /etc/yum.repos.d/CentOS-Base.repo\n\tfi\n}\n\nsetSources(){\n\tgetAbout\n\tupdateInit\n\tcase \"$release\" in\n\t\tdebian)\n\t\t\tcase $para in\n\t\t\t\t'fastly'|'-fastly'|'--fastly' )\n\t\t\t\t\tsetDebian;;\n\t\t\t    'cn'|'-cn'|'--cn' )\n\t\t\t\t\tsetDebian;setCn;;\n\t\t\t   \t'163'|'-163'|'--163' )\n\t\t\t\t\tsetDebian;set163;;\n\t\t\t\t'aliyun'|'-aliyun'|'--aliyun' )\n\t\t\t\t\tsetDebian;setAliyun;;\n\t\t\t\t'aws'|'-aws'|'--aws' )\n\t\t\t\t\tsetDebian;setAWS;;\n\t\t\t\t'restore'|'-restore'|'--restore' )\n\t\t\t\t\trestore;;\n\t\t\t*)\n\t\t\tsetDebian;;\n\t\t\tesac\n\t\t\tapt-get update;;\n\t\tubuntu)\n\t\t\tcase $para in\n\t\t\t\t'restore'|'-restore'|'--restore' )\n\t\t\t\t\trestore;;\n\t\t\t*)\n\t\t\tsetUbuntu;\n\t\t\tesac\n\t\t\tapt-get update;;\n\t\tcentos)\n\t\t\tcase $para in\n\t\t\t\t'restore'|'-restore'|'--restore' )\n\t\t\t\t\trestore;;\n\t\t\t*)\n\t\t\tsetCentos;\n\t\t\tesac\n\t\t\tyum makecache;;\n\tesac\n}\n\npara=$1\nsetSources\necho -e \"${GREEN}Done${PLAIN}\"\n"
        },
        {
          "name": "tools.py",
          "type": "blob",
          "size": 1.9619140625,
          "content": "#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\nimport time,urllib2,json,sys\nimport shlex\nimport datetime\nimport subprocess\n\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\ndef GetIpipInfo(para):\n    f = open(\"ip_json.json\",'r')\n    ijson = json.load(f)\n    jjson = ijson['location']\n    print jjson[para.encode('utf-8')]\n\ndef GetGeoioInfo(para):\n    ip_api = urllib2.urlopen(r'http://ip-api.com/json')\n    ijson = json.loads(ip_api.read())\n    print ijson[para.encode('utf-8')]\n    \ndef GetDiskInfo(para):\n    temp = ExecShell(\"df -h -P|grep '/'|grep -v tmpfs\")[0];\n    temp1 = temp.split('\\n');\n    diskInfo = [];\n    n = 0\n    cuts = ['/mnt/cdrom','/boot','/boot/efi','/dev','/dev/shm','/run/lock','/run','/run/shm','/run/user'];\n    for tmp in temp1:\n        n += 1\n        disk = tmp.split();\n        if len(disk) < 5: continue;\n        if disk[1].find('M') != -1: continue;\n        if disk[1].find('K') != -1: continue;\n        if len(disk[5].split('/')) > 4: continue;\n        if disk[5] in cuts: continue;\n        arr = {}\n        diskInfo = [disk[1],disk[2],disk[3],disk[4],disk[5]];\n\n    print(diskInfo[int(para)]);\n\ndef ExecShell(cmdstring, cwd=None, timeout=None, shell=True):\n\n\tif shell:\n\t   cmdstring_list = cmdstring\n\telse:\n\t    cmdstring_list = shlex.split(cmdstring)\n\tif timeout:\n\t    end_time = datetime.datetime.now() + datetime.timedelta(seconds=timeout)\n\t    \n\tsub = subprocess.Popen(cmdstring_list, cwd=cwd, stdin=subprocess.PIPE,shell=shell,bufsize=4096,stdout=subprocess.PIPE,stderr=subprocess.PIPE)\n\t    \n\twhile sub.poll() is None:\n\t    time.sleep(0.1)\n\t    if timeout:\n\t        if end_time <= datetime.datetime.now():\n\t           raise Exception(\"Timeout：%s\"%cmdstring)\n\t            \n\treturn sub.communicate()\n\nif __name__ == \"__main__\":\n    type = sys.argv[1];\n    if type == 'disk':\n        GetDiskInfo(sys.argv[2])\n    elif type == 'geoip':\n        GetGeoioInfo(sys.argv[2])\n    elif type == 'ipip':\n        GetIpipInfo(sys.argv[2])\n    else:\n        print 'ERROR: Parameter error'\n"
        }
      ]
    }
  ]
}