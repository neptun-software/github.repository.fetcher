{
  "metadata": {
    "timestamp": 1736568321576,
    "page": 242,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "GitAlias/gitalias",
      "stars": 2482,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.95703125,
          "content": "# Contributing\n\nWe welcome people contributing in many ways:\n\n  * Create a pull request, or issue report, or fork.\n\n  * Email your questions, comments, ideas: help@gitalias.com\n\n  * Donate money by using PayPal: donate@gitalias.com\n\n  * Spread the word about us: <http://gitalias.com>\n\n\n## Advice\n\nTypically a short alias for a command and its options\nshould be in the same order as the command and option words:\n\n  * Right: `fab = foo --alpha --bravo`\n\n  * Wrong: `baf = foo --alpha --bravo`\n\nTypically a short alias for a command and its options\nshould be using the first letter of each option word:\n\n  * Right: `fab = foo --alpha-bravo`\n\n  * Wrong: `fa = foo --alpha-bravo`\n\nOne-letter aliases never use options, because we want\nthe aliases to be as easy as possible to compose:\n\n  * Right: `s = status`\n\n  * Wrong: `s = status --alpha --bravo`\n\n\n## Conventions\n\nConventions for coding:\n\n  * We use the Git documentation guidelines for our coding format.\n\n  * We like meaningful comments and practical examples to help novices.\n\nConventions for changes:\n\n  * We aim for semantic versioning, with the version number in the file `gitalias.txt`.\n\n  * We aim to have new kinds of pull requests open for a week to encourage comments.\n\n\n## Teams\n\nWe want this project to be good for teams:\n\n  * We want widespread usability via consensus and practicality.\n\n  * We want ease of use, ease of composability, and ease of understanding.\n\nBecause we want widespread usability, we do not include everything possible:\n\n  * For example, we do not have a one-letter short alias for `git push`\n    because we have not found a widespread consensus among developers.\n    We prefer using higher-level capabilities, such as a git hook that\n    watches for a commit, then does an automatic push to a CI/CD server.\n\n  * For example, we do not provide aliases for many kinds of git workflows\n    because our research finds that each team has it's own kind of workflow.\n    We provide a generic topic branch workflow that works well for many teams,\n    and that you can customize as you like on your system for your workflows.\n\n\n## Git commit message\n\nIf you create a pull request, then it will help us if you use a git commit message.\n\nWe aim for this kind of git commit message:\n\n  * Subject:\n    * Start with an imperative verb, such as \"Add\", \"Drop\", \"Fix\", \"Upgrade\", etc.\n    * Capitalize the line, for example \"Add\" not \"add\".\n    * Limit the line to 50 characters.\n    * End the line without a period.\n    * Use a blank line after the subject to separate the subject from the body.\n  * Body:\n    * Wrap the body at 72 characters.\n    * Use the body to explain what and why vs. how.\n    * For commits with more than one author, add \"By: Alice <alice@example.com>\".\n    * For commits that refer to a URL, add \"See: <https://example.com>\".\n    * For commits that refer to a tracker, use the complete URL, not just a number or code.\n  * For more information:\n    * [Git commit message](https://github.com/joelparkerhenderson/git-commit-message/)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 35.0205078125,
          "content": "# Git Alias\n\n## What is Git Alias?\n\nGit Alias is a collection of git version control alias settings that can help you work faster and better. Git Alias provides short aliases such as [`s`](doc/git-s/) for status, command aliases such as [`chart`](doc/git-chart/) and [`churn`](doc/git-churn/), lookup aliases such as [`whois`](doc/git-who/) and [`whatis`](doc/git-whatis/), workflow aliases such as [`topic-begin`](doc/git-topic-begin/) for feature branch development, and more.\n\n* [Contribute](doc/contribute/)\n* [Changes](doc/changes/)\n* [Todo](doc/todo/)\n* [Help](doc/help/)\n* [More](doc/more/)\n* [Thanks](doc/thanks/)\n\n\n## Setup\n\nYou can use Git Alias various ways:\n\n  * Download the Git Alias file here: [gitalias.txt](https://raw.githubusercontent.com/GitAlias/gitalias/main/gitalias.txt).\n  \n  * Install Git Alias via a variety of ways: [install guide](doc/install/).\n\n  * Customize Git Alias aliases as you wish: [customize guide](doc/customize/).\n\n\n## Follow us\n\nYou can follow us on GitHub:\n\n  * Git Alias account: [https://github.com/gitalias](https://github.com/gitalias)\n\n  * Git Alias repository: [https://github.com/gitalias/gitalias](https://github.com/gitalias/gitalias)\n\n\n## Short aliases\n\nShort aliases are for frequent commands and options:\n\ngit add:\n\n  * [git a](doc/git-a/) = add\n  * [git aa](doc/git-aa/) = add --all\n  * [git ap](doc/git-ap/) = add --patch\n  * [git au](doc/git-au/) = add --update\n\ngit branch:\n\n  * [git b](doc/git-b/) = branch\n  * [git bm](doc/git-bm/) = branch --merged\n  * [git bnm](doc/git-bnm/) = branch --no-merged\n  * [git bed](doc/git-bed/) = branch --edit-description\n  * [git bsd](doc/git-bsd/) = branch --show-description (polyfill)\n\ngit commit:\n\n  * [git c](doc/git-c/) = commit\n  * [git ca](doc/git-ca/) = commit --amend\n  * [git cam](doc/git-cam/) = commit --amend --message\n  * [git cane](doc/git-cane/) = commit --amend --no-edit\n  * [git ci](doc/git-ci/) = commit --interactive\n  * [git cm](doc/git-cm/) = commit --message\n\ngit checkout:\n\n  * [git co](doc/git-co/) = checkout\n  * [git cog](doc/git-cog/) = checkout --guess\n  * [git cong](doc/git-cong/) = checkout --no-guess\n  * [git cob](doc/git-cob/) = checkout -b\n\ngit cherry-pick:\n\n  * [git cp](doc/git-cp/) = cherry-pick\n  * [git cpa](doc/git-cpa/) = cherry-pick --abort\n  * [git cpc](doc/git-cpc/) = cherry-pick --continue\n  * [git cpn](doc/git-cpn/) = cherry-pick -n (--no-commit)\n  * [git cpnx](doc/git-cpnx/) = cherry-pick -n -x (--no-commit and with a message)\n\ngit diff:\n\n  * [git d](doc/git-d/) = diff\n  * [git dd](doc/git-dd/) = diff with our preferred settings\n  * [git dc](doc/git-dc/) = diff --cached\n  * [git ds](doc/git-ds/) = diff --staged\n  * [git dwd](doc/git-dwd/) = diff --word-diff\n\ngit fetch:\n\n  * [git f](doc/git-f/) = fetch\n\ngit grep:\n\n  * [git g](doc/git-g/) = grep\n  * [git gg](doc/git-gg/) = grep with our preferred settings\n  * [git gn](doc/git-gn/) = grep -n (--line-number)\n\ngit log:\n\n  * [git l](doc/git-l/) = log\n  * [git ll](doc/git-ll/) = log list with our preferred short settings\n  * [git lll](doc/git-lll/) = log list with our preferred long settings\n  * [git lg](doc/git-lg/) = log --graph\n  * [git lo](doc/git-lo/) = log --oneline\n  * [git lor](doc/git-lor/) = log --oneline --reverse\n  * [git lp](doc/git-lp/) = log --patch\n  * [git lfp](doc/git-lfp/) = log --first-parent\n  * [git lto](doc/git-lto/) = log --topo-order\n\ngit ls-files:\n\n  * [git ls](doc/git-ls/) = ls-files\n  * [git lsd](doc/git-lsd/) = ls-files --debug\n  * [git lsfn](doc/git-lsfn/) = ls-files --full-name\n  * [git lsio](doc/git-lsio/) = ls-files --ignored --others --exclude-standard\n\ngit merge:\n\n  * [git m](doc/git-m/) = merge\n  * [git ma](doc/git-ma/) = merge --abort\n  * [git mc](doc/git-mc/) = merge --continue\n  * [git mncnf](doc/git-mncnf/) = merge --no-commit --no-ff\n\ngit pull:\n\n  * [git pf](doc/git-pf/) = pull --ff-only\n  * [git pr](doc/git-pr/) = pull --rebase\n  * [git prp](doc/git-prp/) = pull --rebase=preserve\n\ngit rebase:\n\n  * [git rb](doc/git-rb/) = rebase\n  * [git rba](doc/git-rb/) = rebase --abort\n  * [git rbc](doc/git-rbc/) = rebase --continue\n  * [git rbs](doc/git-rbs/) = rebase --skip\n  * [git rbi](doc/git-rbi/) = rebase --interactive\n  * [git rbiu](doc/git-rbiu/) = rebase --interactive @{upstream}\n\ngit reflog:\n\n  * [git rl](doc/git-rl/) = reflog\n\ngit remote:\n\n  * [git rr](doc/git-rr/) = remote\n  * [git rrs](doc/git-rrs/) = remote show\n  * [git rru](doc/git-rru/) = remote update\n  * [git rrp](doc/git-rrp/) = remote prune\n\ngit revert:\n\n  * [git rv](doc/git-rv/) = revert\n  * [git rvnc](doc/git-rvnc/) = revert --no-commit\n\ngit show-branch:\n\n  * [git sb](doc/git-sb/) = show-branch\n  * [git sbdo](doc/git-sbdo/) = show-branch --date-order\n  * [git sbto](doc/git-sbto/) = show-branch --topo-order\n\ngit submodule:\n\n  * [git sm](doc/git-sm/) = submodule\n  * [git smi](doc/git-smi/) = submodule init\n  * [git sma](doc/git-sma/) = submodule add\n  * [git sms](doc/git-sms/) = submodule sync\n  * [git smu](doc/git-smu/) = submodule update\n  * [git smui](doc/git-smui/) = submodule update --init\n  * [git smuir](doc/git-smuir/) = submodule update --init --recursive\n\ngit status:\n\n  * [git s](doc/git-s/) = status\n  * [git ss](doc/git-ss/) = status --short\n  * [git ssb](doc/git-ssb/) = status --short --branch\n\ngit whatchanged:\n\n  * [git w](doc/git-w/) = whatchanged\n\n\n## Friendly aliases\n\nRecommended helpers:\n\n  * [git initer](doc/git-initer/) - Initialize a repo using our recommended way i.e. with an empty rebaseable commit\n  * [git cloner](doc/git-cloner/) - Clone a repo using our recommended way i.e. recursive include of submodules\n  * [git pruner](doc/git-pruner/) - Prune a repo using our recommended way i.e. prune everything unreachable now\n  * [git repacker](doc/git-repacker/) - Repack a repo our recommended way i.e. as Linus Torvalds describes\n  * [git optimizer](doc/git-optimizer/) - Optimize a repo using our recommended way i.e. by pruning and repacking\n\nQuick highlights:\n\n  * [git chart](doc/git-chart/) - Show highlights chart of activity per author\n  * [git churn](doc/git-churn/) - Show log of files that have many changes\n  * [git summary](doc/git-summary/) - Show a summary of overview metrics\n\nBranch names:\n\n  * [git default-branch](doc/git-default-branch/) - Show the default branch name\n  * [git current-branch](doc/git-current-branch/) - Show the current branch name\n  * [git upstream-branch](doc/git-upstream-branch/) - Show the upstream branch name\n  * [git topic-base-branch](doc/git-topic-base-branch/) - Show the topic base branch name\n\nBranch commits:\n\n  * [git branch-commit-first](doc/git-branch-commit-first/) - Show a branch's first commit hash (or hashes)\n  * [git branch-commit-last](doc/git-branch-commit-last/) - Show a branch's last commit hash (or hashes)\n  * [git branch-commit-prev](doc/git-branch-commit-prev/) - Show a branch's previous commit hash (or hashes)\n  * [git branch-commit-next](doc/git-branch-commit-next/) - Show a branch's next commit hash (or hashes)\n\nFriendly plurals:\n\n  * [git aliases](doc/git-aliases/) - List aliases\n  * [git branches](doc/git-branches/) - List branches\n  * [git tags](doc/git-tags/) - List tags\n  * [git stashes](doc/git-stashes/) - List stashes\n\nUndo:\n\n  * [git uncommit](doc/git-uncommit/) =  reset --soft HEAD~1\n  * [git unadd](doc/git-unadd/) = reset HEAD\n\nLogging & reporting:\n\n  * [git log-*](doc/git-log/) (many aliases)\n  * [git who](doc/git-who/)\n\nLookups:\n\n  * [git whois](doc/git-whois/) - Try to figure out an author's information\n  * [git whatis](doc/git-whatis/) - Try to figure out an object's information\n\nCommit details:\n\n  * [git commit-parents](doc/git-commit-parents/) - Show the commit's parents\n  * [git commit-is-merge](doc/git-commit-is-merge/) - Is the commit a merge commit?\n  * [git commit-message-key-lines](doc/git-commit-message-key-lines/)\n\nAdd all & edit all:\n\n  * [git add-*](doc/git-edit/) - Add all files of a given type\n  * [git edit-*](doc/git-edit/) - Edit all files of a given type\n\nAlias helpers:\n\n  * [git alias](doc/git-alias) - Show help for git alias commands\n  * [git add-alias](doc/git-add-alias/) - Create a new git alias\n  * [git move-alias](doc/git-move-alias/) - Rename an existing git alias\n\nScript helpers:\n\n  * [git top](doc/git-top/) - Get the top level directory name\n  * [git exec](doc/git-exec/) - Execute a shell script\n\nRemotes:\n\n  * [git remotes-prune](doc/git-remotes-prune/) - For each remote branch, prune it\n  * [git remotes-push](doc/git-remotes-push/) - For each remote branch, push it\n\nNew repos:\n\n  * [git init-empty](doc/git-init-empty/) - Initialize a repo with an empty rebaseable commit\n  * [git clone-lean](doc/git-clone-lean/) - Clone a repo as lean as possible\n\nHew branches:\n\n  * [git hew](doc/git-hew/) - Delete all branches that are merged into a commit\n  * [git hew-dry-run](doc/git-hew/) - Delete all branches that are merged into a commit (dry run)\n  * [git hew-local](doc/git-hew-local/) - Delete local branches that are merged into a commit\n  * [git hew-local-dry-run](doc/git-hew-local/) - Delete local branches that are merged (dry run)\n  * [git hew-remote](doc/git-hew-remote/) - Delete remote branches that are merged into a commit\n  * [git hew-remote-dry-run](doc/git-hew-remote-dry-run/) - Delete remote branches that are merged into a commit (dry run)\n\nSaving work:\n\n  * [git archive](doc/git-archive/) - Create an archive file of everything in the repo\n  * [git snapshot](doc/git-snapshot/) - Stash a snapshot of your current working tree\n  * [git panic](doc/git-panic/) - When you're worried the world is coming to an end\n\nMisc:\n\n  * [git init-empty](doc/git-init-empty/) - Initialize a repo with an empty rebaseable commit\n  * [git diff-*](doc/git-diff/)\n  * [git grep-*](doc/git-grep/)\n  * [git merge-span-*](doc/git-merge-span/) - Merge span aliases\n  * [git orphans](doc/git-orphans/) - Find all objects that aren't referenced by any other object\n  * [git fixup](doc/git-fixup/) - Fix a commit by amending it\n  * [git rev-list-all-objects-by-size](doc/git-rev-list-all-objects-by-size/)\n  * [git rev-list-all-objects-by-size-and-name](doc/git-rev-list-all-objects-by-size-and-name/)\n  * [git cherry-pick-merge](doc/git-cherry-pick-merge/)\n  * [git refs-by-date](doc/git-refs-by-date/) - Sort by date for branches\n\nAdvanced aliases:\n\n  * [git search-commits](doc/git-search-commits/)\n  * [git debug](doc/git-debug/)\n  * [git intercommit](doc/git-intercommit/)\n\n\n## Workflow aliases\n\nTopic branching for feature workflows:\n\n  * [git topic-*](doc/git-topic/) - Read this first about topic aliases.\n  * [git topic-base-branch](doc/git-topic-base-branch/) - Show the topic base branch name\n  * [git topic-begin](doc/git-topic-begin/) - Start a new topic branch\n  * [git topic-end](doc/git-topic-end/) - Finish the current topic branch\n  * [git topic-sync](doc/git-topic-sync/) - Synchronize the current topic branch\n  * [git topic-move](doc/git-topic-move/) - Rename the current topic branch\n\nFlow aliases:\n\n  * [git get & git put](doc/git-get-git-put/)\n  * [git ours & git theirs](doc/git-ours-git-theirs/)\n  * [git wip & git unwip](doc/git-wip-git-unwip/)\n  * [git assume & git unassume](doc/git-assume-and-git-unassume/)\n  * [git publish & git unpublish](doc/git-publish-git-unpublish/)\n\nreset & undo:\n\n  * [git reset-*](doc/git-reset/) - Move backwards on the commit chain; synonym for undo-*\n  * [git undo-*](doc/git-undo/) - Move backwards on the commit chain; synonym for reset-*\n\ntrack & untrack:\n\n  * [git track](doc/git-track/) - Start tracking from a local branch to upstream branch\n  * [git untrack](doc/git-untrack/) - Stop tracking from a local branch to upstream branch\n\ninbound & outbound:\n\n  * [git inbound](doc/git-inbound/) - Show incoming changes compared to upstream\n  * [git outbound](doc/git-outbound/) - Show outgoing changes compared to upstream\n\npull1 & push1:\n\n  * [git pull1](doc/git-pull1/) - Pull just the current branch\n  * [git push1](doc/git-push1/) - Push just the current branch\n\nMisc:\n\n  * [git issues](doc/git-issues/) - Show issues that are described in commit messages\n  * [git expunge](doc/git-expunge/) - Use filter-branch to delete a file everywhere\n  * [git reincarnate](doc/git-reincarnate/) - Kill a branch then create it anew\n  * [git diff-chunk](doc/git-diff-chunk/) - Do a diff of two chunks in revisions\n  * [git last-tag](doc/git-last-tag/) - Show the last tag in the current branch\n  * [git serve](doc/git-serve/) - Serve the local directory via git server daemon\n  * [git track-all-remote-branches](doc/git-track-all-remote-branches/) - Track all remote branches\n  * [git cleaner](doc/git-cleaner/) - Clean a working tree using more power options\n  * [git cleanest](doc/git-cleanest/) - Clean a working tree using the most power options\n  * [git cleanout](doc/git-cleanout/) - Clean a working tree using typical options then checkout\n\n\n## Tooling aliases\n\nUse gitk:\n\n  * [git gitk-conflict](doc/git-gitk-conflict/) - Use gitk to show conflicting merge\n  * [git gitk-history-all](doc/git-gitk-history-all/) - Use gitk to show full history\n\nUse other version control systems:\n\n  * [git cvs-*](doc/git-cvs/) - Use CVS version control\n  * [git svn-*](doc/git-svn/) - Use Subversion version control\n\nUse graphviz:\n\n  * [git graphviz](doc/git-graphviz/) - Use graphviz for display\n\n\n## Index of all aliases\n\n  * [git a](doc/git-a/) - Short for \"git add\"\n  * [git aa](doc/git-aa/) - Short for \"git add --all\" - Add all paths\n  * [git add-alias](doc/git-add-alias/) - Create a new git alias\n  * [git add-cached](doc/git-add-cached/) - Add cached files\n  * [git add-deleted](doc/git-add-deleted/) - Add deleted files\n  * [git add-ignored](doc/git-add-ignored/) - Add ignored files\n  * [git add-killed](doc/git-add-killed/) - Add killed files\n  * [git add-modified](doc/git-add-modified/) - Add modified files\n  * [git add-others](doc/git-add-others/) - Add other files\n  * [git add-stage](doc/git-add-stage/) - Add stage files\n  * [git add-unmerged](doc/git-add-unmerged/) - Add unmerged files\n  * [git aliases](doc/git-aliases/) - List git aliases\n  * [git ap](doc/git-ap/) - Short for \"git add --patch\" - Add by patch\n  * [git archive](doc/git-archive/) - Create an archive file of everything in the repo\n  * [git assume-all](doc/git-assume-all/) - Assume all files are unchanged\n  * [git assume](doc/git-assume/) - Assume files are unchanged\n  * [git assumed](doc/git-assumed/) - Show which files are assumed\n  * [git au](doc/git-au/) - Short for \"git add --update\"\n  * [git b](doc/git-b/) - Short for \"git branch\"\n  * [git bed](doc/git-bed/) - Edit the description of a branch\n  * [git bm](doc/git-bm/) - List branches whose tips are reachable from the specified commit (HEAD if not specified)\n  * [git bnm](doc/git-bnm/) - List branches whose tips are not reachable from the specified commit (HEAD if not specified)\n  * [git branch-commit-first](doc/git-branch-commit-first/) - Show a branch's first commit hash (or hashes)\n  * [git branch-commit-last](doc/git-branch-commit-last/) - Show a branch's last commit hash (or hashes)\n  * [git branch-commit-next](doc/git-branch-commit-next/) - Show a branch's next commit hash (or hashes)\n  * [git branch-commit-prev](doc/git-branch-commit-prev/) - Show a branch's previous commit hash (or hashes)\n  * [git branch](doc/git-branch/) - Aliases related to git branch\n  * [git branches](doc/git-branches/) - List branches\n  * [git bsd](doc/git-bsd/) - Show the description of a branch\n  * [git bv](doc/git-bv/) - List branch information with hash and subject\n  * [git bvv](doc/git-bvv/) - List branch information with hash and subject and upstream\n  * [git c](doc/git-c/) - Short for \"git commit\"\n  * [git ca](doc/git-ca/) -  Amend the tip of the current branch; do not create a new commit\n  * [git cam](doc/git-cam/) - Amend the tip of the current branch; edit the message\n  * [git cane](doc/git-cane/) - Amend the tip of the current branch; do not edit the message\n  * [git caa](doc/git-caa/) - Amend the tip of the current branch, automatically staging files that have been modified and deleted\n  * [git caam](doc/git-caam/) - Amend the tip of the current branch, staging files, and edit the message\n  * [git caane](doc/git-caane/) - Amend the tip of the current branch, staging files, and do not edit the message\n  * [git chart](doc/git-chart/) - Show highlights chart of activity per author\n  * [git cherry-pick-merge](doc/git-cherry-pick-merge/) - Cherry pick a merge commit\n  * [git churn](doc/git-churn/) - Show log of files that have many changes\n  * [git ci](doc/git-ci/) - Commit interactive\n  * [git cleaner](doc/git-cleaner/) - Clean a working tree using more power options\n  * [git cleanest](doc/git-cleanest/) - Clean a working tree using the most power options\n  * [git cleanout](doc/git-cleanout/) - Clean a working tree using typical options then checkout\n  * [git clone-lean](doc/git-clone-lean/) - Clone as lean as possible\n  * [git cloner](doc/git-cloner/) - Clone a repository and recurse on any of its submodules\n  * [git cm](doc/git-cm/) - Commit with a message\n  * [git co](doc/git-co/) - Checkout a.k.a. update the working tree to match a branch or paths\n  * [git cog](doc/git-cog/) - Checkout with guessing\n  * [git cong](doc/git-cong/) - Checkout with no guessing\n  * [git cob](doc/git-cob/) - Create a new branch from the current working tree, and switch to it\n  * [git commit-is-merge](doc/git-commit-is-merge/) - Is the commit a merge commit? If yes exit 0, else exit 1\n  * [git commit-message-key-lines](doc/git-commit-message-key-lines/) - Show the commit's keyword-marker lines\n  * [git commit-parents](doc/git-commit-parents/) - Show the commit's parents\n  * [git cong](doc/git-cong/) - Checkout with no guessing\n  * [git count](doc/git-count/) -\n  * [git cp](doc/git-cp/) - Cherry-pick - apply the changes introduced by some existing commits;\n  * [git cpa](doc/git-cpa/) - Abort the cherry-pick process\n  * [git cpc](doc/git-cpc/) - Continue the cherry-pick process\n  * [git cpn](doc/git-cpn/) - Cherry-pick with no commit\n  * [git cpnx](doc/git-cpnx/) - Cherry-pick with no commit and with explanation\n  * [git current-branch](doc/git-current-branch/) - Get the current branch name\n  * [git hew](doc/git-hew/) - Delete branches that have been merged into a commit\n  * [git hew-dry-run](doc/git-hew-dry-run/) - Delete branches that have been merged into a commit (dry run)\n  * [git hew-local](doc/git-hew-local/) - Delete local branches that have been merged into a commit\n  * [git hew-local-dry-run](doc/git-hew-local-dry-run/) - Delete local branches that have been merged into a commit (dry run)\n  * [git hew-remote](doc/git-hew-remote/) - Delete remote branches that have been merged into an upstream commit\n  * [git hew-remote-dry-run](doc/git-hew-remote-dry-run/) - Delete remote branches that have been merged into an upstream commit (dry run)\n  * [git cvs-e](doc/git-cvs-e/) - CVS export\n  * [git cvs-i](doc/git-cvs-i/) - CVS import\n  * [git d](doc/git-d/) - Short for \"git diff\"\n  * [git dc](doc/git-dc/) - Diff in order to show changes not yet staged\n  * [git dd](doc/git-dd/) - Diff deep - show changes with our preferred options\n  * [git debug](doc/git-debug/) - Help debugging builtins\n  * [git default-branch](doc/git-default-branch/) - Get the default branch name\n  * [git diff-all](doc/git-diff-all/) - For each diff, call difftool\n  * [git diff-changes](doc/git-diff-changes/) - Show diff of changes\n  * [git diff-chunk](doc/git-diff-chunk/) - Show the diff of one chunk\n  * [git diff-deep](doc/git-diff-deep/) - Diff with deep information using our preferred options, a.k.a. `dd`\n  * [git diff-staged](doc/git-diff-staged/) - Show diffs that are cached i.e. staged\n  * [git diff-stat](doc/git-diff-stat/) - Diff with stat\n  * [git discard](doc/git-discard/) - Discard changes in a file (or a list of files) in working tree\n  * [git ds](doc/git-ds/) - Show changes about to be committed\n  * [git dw](doc/git-dw/) - Show changes by word, not line\n  * [git edit-cached](doc/git-edit-cached/) - Edit cached files\n  * [git edit-deleted](doc/git-edit-deleted/) - Edit deleted files\n  * [git edit-ignored](doc/git-edit-ignored/) - Edit ignored files\n  * [git edit-killed](doc/git-edit-killed/) - Edit killed files\n  * [git edit-modified](doc/git-edit-modified/) - Edit modified files\n  * [git edit-others](doc/git-edit-others/) - Edit other files\n  * [git edit-stage](doc/git-edit-stage/) - Edit stage files\n  * [git edit-unmerged](doc/git-edit-unmerged/) - Edit unmerged files\n  * [git exec](doc/git-exec/) - Execute a shell script\n  * [git expunge](doc/git-expunge/) - Delete a file everywhere\n  * [git f](doc/git-f/) - Short for \"git fetch\"\n  * [git fa](doc/git-fa/) - Fetch all remotes\n  * [git fav](doc/git-fav/) - Fetch all remotes, with verbose output\n  * [git fixup](doc/git-fixup/) - Fix a commit by amending it\n  * [git g](doc/git-g/) - Short for \"git grep\"\n  * [git get](doc/git-get/) - Get all changes for the current branch\n  * [git gg](doc/git-gg/) - Grep group i.e. search with our preferred options\n  * [git gitk-conflict](doc/git-gitk-conflict/) - Use gitk tool to show conflicting merge\n  * [git gitk-history-all](doc/git-gitk-history-all/) - Use gitk tool to show full history\n  * [git gn](doc/git-gn/) - Grep and show line number\n  * [git graphviz](doc/git-graphviz/) - Use graphviz tool for display\n  * [git grep-ack](doc/git-grep-ack/) -\n  * [git grep-all](doc/git-grep-all/) - Find text in any commit ever\n  * [git grep-group](doc/git-grep-group/) - Find text and group the output lines, a.k.a. `gg`\n  * [git heads](doc/git-heads/) - Show log of heads\n  * [git ignore](doc/git-ignore/) - Ignore all untracked files by appending them to \".gitignore\"\n  * [git inbound](doc/git-inbound/) - Show incoming changes compared to upstream\n  * [git init-empty](doc/git-init-empty/) - Initialize a repo with an empty rebaseable commit\n  * [git initer](doc/git-initer/) - Initialize a repo using our recommended way i.e. with an empty rebaseable commit\n  * [git intercommit](doc/git-intercommit/) - Use interdiff to see patch modifications\n  * [git issues](doc/git-issues/) - List all issues mentioned in commit messages between range of commits\n  * [git l](doc/git-l/) - Short for \"git log\"\n  * [git last-tag](doc/git-last-tag/) - Show the last tag in the current branch\n  * [git last-tagged](doc/git-last-tagged/) - Show the last annotated tag in all branches\n  * [git lfp](doc/git-lfp/) - Show log with first parent\n  * [git lg](doc/git-lg/) - Show log with a text-based graphical representation of the commit history\n  * [git ll](doc/git-ll/) - Log list - Show log list with our preferred options and short information\n  * [git lll](doc/git-lll/) - Log list long - Show log list with our preferred options and long information\n  * [git lo](doc/git-lo/) - Show log with one line per item\n  * [git log-1-day](doc/git-log-1-day/) - Show log with the recent day\n  * [git log-1-hour](doc/git-log-1-hour/) - Show log with the recent hour\n  * [git log-1-month](doc/git-log-1-month/) - Show log with the recent month\n  * [git log-1-week](doc/git-log-1-week/) - Show log with the recent week\n  * [git log-1-year](doc/git-log-1-year/) - Show log with the recent year\n  * [git log-date-first](doc/git-log-date-first/) - Show the date of the earliest commit, in strict ISO 8601 format\n  * [git log-date-last](doc/git-log-date-last/) - Show the date of the latest commit, in strict ISO 8601 format\n  * [git log-fetched](doc/git-log-fetched/) - Show log of fetched commits vs. origin/main\n  * [git log-fresh](doc/git-log-fresh/) - Show log of new commits after you fetched, with stats, excluding merges\n  * [git log-graph](doc/git-log-graph/) -\n  * [git log-list](doc/git-log-list/) - Show log list with our preferred options and short information\n  * [git log-list-long](doc/git-log-list-long/) - Show log list with our preferred options and long information\n  * [git log-my](doc/git-log-my/) - Show log with my own commits by my own user email\n  * [git log-my-day](doc/git-log-my-day/) - Show log with my own recent day\n  * [git log-my-hour](doc/git-log-my-hour/) - Show log with my own recent hour\n  * [git log-my-month](doc/git-log-my-month/) - Show log with my own recent month\n  * [git log-my-week](doc/git-log-my-week/) - Show log with my own recent week\n  * [git log-my-year](doc/git-log-my-year/) - Show log with my own recent year\n  * [git log-of-count-and-day](doc/git-log-of-count-and-day/) - Show log with count and day\n  * [git log-of-count-and-day-of-week](doc/git-log-of-count-and-day-of-week/) - Show log with count and day of week\n  * [git log-of-count-and-email](doc/git-log-of-count-and-email/) - Show log with count and email\n  * [git log-of-count-and-format](doc/git-log-of-count-and-format/) - Show log with count and custom format string\n  * [git log-of-count-and-format-with-date](doc/git-log-of-count-and-format-with-date/) - Show log with count and custom format string and date\n  * [git log-of-count-and-hour](doc/git-log-of-count-and-hour/) - Show log with count and hour\n  * [git log-of-count-and-hour-of-day](doc/git-log-of-count-and-hour-of-day/) - Show log with count and hour of day\n  * [git log-of-count-and-month](doc/git-log-of-count-and-month/) - Show log with count and month\n  * [git log-of-count-and-week](doc/git-log-of-count-and-week/) - Show log with count and week\n  * [git log-of-count-and-week-of-year](doc/git-log-of-count-and-week-of-year/) - Show log with count and week of year\n  * [git log-of-count-and-year](doc/git-log-of-count-and-year/) - Show log with count and year\n  * [git log-of-day-and-count](doc/git-log-of-day-and-count/) - Show log with day and count\n  * [git log-of-day-of-week-and-count](doc/git-log-of-day-of-week-and-count/) - Show log with week and count\n  * [git log-of-email-and-count](doc/git-log-of-email-and-count/) - Show log with email and count\n  * [git log-of-format-and-count](doc/git-log-of-format-and-count/) - Show a specific format string and count of log entries\n  * [git log-of-format-and-count-with-date](doc/git-log-of-format-and-count-with-date/) - Show log with custom format string and count with date\n  * [git log-of-hour-and-count](doc/git-log-of-hour-and-count/) - Show log with hour and count\n  * [git log-of-hour-of-day-and-count](doc/git-log-of-hour-of-day-and-count/) - Show log with hour of day and count\n  * [git log-of-month-and-count](doc/git-log-of-month-and-count/) - Show log with month and count\n  * [git log-of-week-and-count](doc/git-log-of-week-and-count/) - Show log with week and count\n  * [git log-of-week-of-year-and-count](doc/git-log-of-week-of-year-and-count/) - Show log with week of year and count\n  * [git log-of-year-and-count](doc/git-log-of-year-and-count/) - Show log with year and count\n  * [git log-refs](doc/git-log-refs/) - Show log with commits that are referred by some branch or tag\n  * [git log-timeline](doc/git-log-timeline/) -\n  * [git lp](doc/git-lp/) - Show log with patch generation\n  * [git ls](doc/git-ls/) - List files in the index and the working tree; like Unix \"ls\" command\n  * [git lsd](doc/git-lsd/) - List files and show debug information\n  * [git lsfn](doc/git-lsfn/) - List files and show full name\n  * [git lsio](doc/git-lsio/) - List files that git is ignoring\n  * [git lto](doc/git-lto/) - Show log with items appearing in topological order\n  * [git m](doc/git-m/) - Short for \"git merge\"\n  * [git ma](doc/git-ma/) - Merge abort i.e. abort the merge process\n  * [git mainly](doc/git-mainly/) - Make local like main\n  * [git mc](doc/git-mc/) - Merge continue i.e. continue the merge process\n  * [git mncnf](doc/git-mncnf/) - Merge with no autocommit, and with no fast-forward\n  * [git merge-span](doc/git-merge-span/) - Merge span aliases\n  * [git merge-span-diff](doc/git-merge-span-diff/) - Show the changes that were introduced by a merge\n  * [git merge-span-difftool](doc/git-merge-span-difftool/) - Show the changes that were introduced by a merge, in your difftool\n  * [git merge-span-log](doc/git-merge-span-log/) - Find the commits that were introduced by a merge\n  * [git move-alias](doc/git-move-alias/) - Rename an existing git alias\n  * [git o](doc/git-o/) - Short for \"git checkout\"\n  * [git optimizer](doc/git-optimizer/) - Optimize the repository by pruning and repacking\n  * [git orphans](doc/git-orphans/) - Find all objects that aren't referenced by any other object\n  * [git ours](doc/git-ours/) - Checkout our version of a file and add it\n  * [git outbound](doc/git-outbound/) - Show outgoing changes compared to upstream\n  * [git p](doc/git-p/) - Short for \"git pull\"\n  * [git panic](doc/git-panic/) - When you're a little worried that the world is coming to an end\n  * [git pf](doc/git-pf/) - Pull if a merge can be resolved as a fast-forward, otherwise fail\n  * [git pr](doc/git-pr/) - Pull with rebase i.e. provide a cleaner, linear, bisectable history\n  * [git prp](doc/git-prp/) - Pull with rebase preserve of merge commits\n  * [git pruner](doc/git-pruner/) - Prune everything that is unreachable now\n  * [git publish](doc/git-publish/) - Publish the current branch\n  * [git pull1](doc/git-pull1/) - Pull just the one current branch\n  * [git push1](doc/git-push1/) - Push just the one current branch\n  * [git pushy](doc/git-pushy/) - Push with force and lease\n  * [git put](doc/git-put/) - Put all changes for the current branch\n  * [git rb](doc/git-rb/) - Short for \"git rebase\"\n  * [git rba](doc/git-rba/) - Rebase abort i.e. abort the rebase process\n  * [git rbc](doc/git-rbc/) - Rebase continue i.e. continue the rebase process\n  * [git rbi](doc/git-rbi/) - Rebase interactive i.e. do a rebase with prompts\n  * [git rbiu](doc/git-rbiu/) - Rebase interactive on unpushed commits\n  * [git rbs](doc/git-rbs/) - Rebase skip i.e. restart the rebase process by skipping the current patch\n  * [git rebase-branch](doc/git-rebase-branch/) - Interactively rebase all the commits on the current branch\n  * [git rebase-recent](doc/git-rebase-recent/) - Rebase recent commits with interactive\n  * [git refs-by-date](doc/git-refs-by-date/) - Show refs sorted by date for branches\n  * [git reincarnate](doc/git-reincarnate/) - Delete a branch then create it anew\n  * [git remote-ref](doc/git-remote-ref/) - TODO\n  * [git remotes-prune](doc/git-remotes-prune/) - For each remote branch, prune it\n  * [git remotes-push](doc/git-remotes-push/) - For each remote branch, push it\n  * [git repacker](doc/git-repacker/) - Repack a repo as recommended by Linus\n  * [git reset-commit](doc/git-reset-commit/) - Reset a commit with a soft reset\n  * [git reset-commit-hard](doc/git-reset-commit-hard/) - Reset a commit with a hard reset\n  * [git reset-commit-hard-clean](doc/git-reset-commit-hard-clean/) - Reset a commit with a hard reset and a clean\n  * [git reset-to-pristine](doc/git-reset-to-pristine/) - Reset commits and clean all differences\n  * [git reset-to-upstream](doc/git-reset-to-upstream/) - Reset commits back to the upstream branch\n  * [git rev-list-all-objects-by-size-and-name](doc/git-rev-list-all-objects-by-size-and-name/) - List all objects by size in bytes and file name\n  * [git rev-list-all-objects-by-size](doc/git-rev-list-all-objects-by-size/) - List all blobs by size in bytes\n  * [git rl](doc/git-rl/) - Short for \"git reflog\"\n  * [git rr](doc/git-rr/) - Short for \"git remote\"\n  * [git rrp](doc/git-rrp/) - Remote prune i.e. delete all stale remote-tracking branches under <name>\n  * [git rrs](doc/git-rrs/) - Remote show i.e. give information about the remote <name>\n  * [git rru](doc/git-rru/) - remote update i.e. fetch updates for a named set of remotes in the repository as defined by remotes\n  * [git rv](doc/git-rv/) - Short for \"git revert\"\n  * [git rvnc](doc/git-rvnc/) - Revert with no commit i.e. without autocommit\n  * [git s](doc/git-s/) - Short for \"git status\"\n  * [git sb](doc/git-sb/) - Short for \"git show-branch\" i.e. print a list of branches and their commits\n  * [git search-commits](doc/git-search-commits/) - Search for a given string in all patches and print commit messages\n  * [git serve](doc/git-serve/) - Serve the local directory by starting a git server daemon\n  * [git show-unreachable](doc/git-show-unreachable/) - Show logs of unreachable commits\n  * [git sm](doc/git-sm/) - Short for \"git submodule\"\n  * [git sma](doc/git-sma/) - Submodule add i.e. add a submodule to this repo\n  * [git smi](doc/git-smi/) - Submodule init i.e. initialize a submodule in this repo\n  * [git sms](doc/git-sms/) - Submodule sync i.e. synchronize a submodule in this repo\n  * [git smu](doc/git-smu/) - Submodule update i.e. update a submodule in this repo\n  * [git smui](doc/git-smui/) - Submodule update with initialize\n  * [git smuir](doc/git-smuir/) - Submodule update with initialize and recursive; this is useful to bring a submodule fully up to date\n  * [git snapshot](doc/git-snapshot/) - Take a snapshot of your current working tree\n  * [git ss](doc/git-ss/) - Status with short format\n  * [git ssb](doc/git-ssb/) - Status with short format and branch info\n  * [git stashes](doc/git-stashes/) - List stashes\n  * [git summary](doc/git-summary/) - Show a summary of overview metrics\n  * [git svn-b](doc/git-svn-b/) - Subversion branch\n  * [git svn-c](doc/git-svn-c/) - Subversion commit\n  * [git svn-cp](doc/git-svn-cp/) - Subversion cherry pick\n  * [git svn-m](doc/git-svn-m/) - Subversion merge\n  * [git tags](doc/git-tags/) - List tags\n  * [git theirs](doc/git-theirs/) - Checkout their version of a file and add it\n  * [git top](doc/git-top/) - Get the top level directory name\n  * [git topic-*](doc/git-topic/) - Read this first about topic aliases\n  * [git topic-base-branch](doc/git-topic-base-branch/) - Show the project base topic branch name\n  * [git topic-move](doc/git-topic-move/) - Rename the current topic branch\n  * [git topic-begin](doc/git-topic-begin/) - Start a new topic branch\n  * [git topic-end](doc/git-topic-end/) - Finish the current topic branch\n  * [git topic-sync](doc/git-topic-sync/) - Synchronize the current topic branch by doing updates\n  * [git track-all-remote-branches](doc/git-track-all-remote-branches/) - Track all remote branches that aren't already being tracked\n  * [git track](doc/git-track/) - Start tracking a branch, with default parameters, and showing the command\n  * [git unadd](doc/git-unadd/) - Reset something that's been added\n  * [git unassume-all](doc/git-unassume-all/) - Unassume all files\n  * [git unassume](doc/git-unassume/) - Unassume files\n  * [git uncommit](doc/git-uncommit/) - Reset one commit\n  * [git undo-commit](doc/git-undo-commit/) - Undo a commit with a soft reset\n  * [git undo-commit-hard](doc/git-undo-commit-hard/) - Undo a commit with a hard reset\n  * [git undo-commit-hard-clean](doc/git-undo-commit-hard-clean/) - Undo a commit with a hard reset and a clean\n  * [git undo-to-pristine](doc/git-undo-to-pristine/) - Undo commits and clean all differences\n  * [git undo-to-upstream](doc/git-undo-to-upstream/) - Undo commits back to the upstream branch\n  * [git unpublish](doc/git-unpublish/) - Unpublish the current branch\n  * [git untrack](doc/git-untrack/) - Stop tracking a branch, with default parameters, and showing the command\n  * [git unwip](doc/git-unwip/) - Load \"work in progress\"\n  * [git upstream-branch](doc/git-upstream-branch/) - Get the upstream branch name\n  * [git w](doc/git-w/) - Short for \"git whatchanged\"\n  * [git whatis](doc/git-whatis/) - Given a git object, try to show it briefly\n  * [git who](doc/git-who/) - Show a short log of who has contributed commits, in descending order\n  * [git whois](doc/git-whois/) - Given a string for an author, try to figure out full name and email\n  * [git wip](doc/git-wip/) - Save \"work in progress\"\n\n\n### Tracking\n\n  * Package: gitalias\n  * Version: 28.0.1\n  * Created: 2016-06-17T22:05:43Z\n  * Updated: 2023-05-31T11:39:14Z\n  * License: GPL-2.0-or-later or contact us for custom license\n  * Contact: Joel Parker Henderson (joel@joelparkerhenderson.com)\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "gitalias.txt",
          "type": "blob",
          "size": 65.3310546875,
          "content": "# -*- mode: gitconfig; -*-\n# vim: set filetype=gitconfig:\n\n##\n# GitAlias.com collection of many git alias items, including shortcuts,\n# helpers, workflows, utilties, visualizers, reports, etc.\n#\n#\n# ## Usage\n#\n# Usage for a typical user is easy.\n#\n# Save this file anywhere you want, such as in your home directory,\n# such as a file name similar to your git config file name, such as:\n#\n#      ~/.gitalias\n#\n# Edit your git config dot file, such as:\n#\n#      vi ~/.gitconfig\n#\n# Include the path to the git alias dot file, such as:\n#\n#     [include]\n#     path = ~/.gitalias\n#\n#\n# ## Usage for older git versions\n#\n# If you use an older version of git that does not have git config \"include\" capability,\n# or if you prefer more control, then you can simply copy/paste anything you like from\n# this file to your own git config file.\n#\n#\n# ## Customization\n#\n# If you want to use this file, and also want to change some of the items,\n# then one way is to use your git config file to include this gitalias file,\n# and also define your own alias items; a later alias takes precedence.\n#\n# Example git config file:\n#\n#     [include]\n#     path = ~/.gitalias\n#\n#     [alias]\n#     l = log --graph --oneline\n#\n#\n# ## Links\n#\n#   * [GitAlias.com website](https://gitalias.com)\n#   * [Git Alias GitHub](https://github.com/gitalias)\n#   * [Git Basics - Git Aliases](https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases)\n#   * [Git Basics - Tips and Tricks](https://git-scm.com/book/en/v1/Git-Basics-Tips-and-Tricks)\n#\n# ## Tracking\n#\n#   * Package: gitalias\n#   * Version: 28.0.1\n#   * Created: 2016-06-17T22:05:43Z\n#   * Updated: 2023-05-31T11:39:14Z\n#   * License: GPL-2.0-or-later or contact us for custom license\n#   * Contact: Joel Parker Henderson (joel@joelparkerhenderson.com)\n##\n\n[alias]\n\n  ##\n  # Short aliases for frequent commands.\n  #\n  # Guidelines: these aliases do not use options, because we want\n  # these aliases to be easy to compose and use in many ways.\n  ##\n\n  a = add\n  b = branch\n  c = commit\n  d = diff\n  f = fetch\n  g = grep\n  l = log\n  m = merge\n  o = checkout\n  p = pull\n  s = status\n  w = whatchanged\n\n  ##\n  # Short aliases for frequent commands and options.\n  ##\n\n  ### add aliases ###\n\n  ## add all\n  aa = add --all\n\n  # add by patch - looks at each change, and asks if we want to put it in the repo.\n  ap = add --patch\n\n  # add just the files that are updated.\n  au = add --update\n\n  ### branch aliases ###\n\n  # branch and only list branches whose tips are reachable from the specified commit (HEAD if not specified).\n  bm = branch --merged\n\n  # branch and only list branches whose tips are not reachable from the specified commit (HEAD if not specified).\n  bnm = branch --no-merged\n\n  # branch with edit description\n  bed = branch --edit-description\n\n  # branch with show description; ideally git will add this feature in the future as `git --show-description`\n  bsd = \"!f(){ \\\n    branch=\\\"${1:-$(git current-branch)}\\\";  \\\n    git config \\\"branch.$branch.description\\\"; \\\n  };f\"\n\n  # branch verbose: When in list mode, show the hash, the commit subject line, etc.\n  # This is identical to doing `git b -v`.\n  bv = branch --verbose\n\n  # branch verbose verbose: When in list mode, show the hash the commit subject line, the upstream branch, etc.\n  # This is identical to doing `git b -vv`.\n  bvv = branch --verbose --verbose\n\n  ### commit aliases ###\n\n  # commit - amend the tip of the current branch rather than creating a new commit.\n  ca = commit --amend\n\n  # commit - amend the tip of the current branch, and edit the message.\n  cam = commit --amend --message\n\n  # commit - amend the tip of the current branch, and do not edit the message.\n  cane = commit --amend --no-edit\n\n  # commit - amend the tip of the current branch, automatically staging files that have been modified and deleted.\n  caa = commit --amend --all\n\n  # commit - amend the tip of the current branch, staging files, and edit the message.\n  caam = commit --amend --all --message\n\n  # commit - amend the tip of the current branch, staging files, and do not edit the message.\n  caane = commit --amend --all --no-edit\n\n  # commit interactive\n  ci = commit --interactive\n\n  # commit with a message\n  cm = commit --message\n\n  ### checkout aliases ###\n\n  # checkout - update the working tree to match a branch or paths. [same as \"o\" for \"out\"]\n  co = checkout\n  cong = checkout --no-guess\n\n  # create a new branch from the current working tree, and switch to it\n  cob = checkout -b\n\n  ### cherry-pick aliases ###\n\n  # cherry-pick - apply the changes introduced by some existing commits; useful for moving small chunks of code between branches.\n  cp = cherry-pick\n\n  # cherry-pick - abort the picking process\n  cpa = cherry-pick --abort\n\n  # cherry-pick - continue the picking process\n  cpc = cherry-pick --continue\n\n  # cherry-pick -n a.k.a. without making a commit\n  cpn = cherry-pick --no-commit\n\n  # cherry-pick -n a.k.a. without making a commit, and when when recording the commit, append a line that says \"(cherry picked from commit ...)\"\n  cpnx = cherry-pick --no-commit -x\n\n  ### diff aliases ###\n\n  # Show changes not yet staged\n  dc = diff --cached\n\n  # Show changes about to be commited\n  ds = diff --staged\n\n  # Show changes but by word, not line\n  dw = diff --word-diff\n\n  # Show changes with our preferred options; a.k.a. `diff-deep`\n  dd = diff-deep\n\n  ### fetch aliases ###\n\n  # Fetch all remotes\n  fa = fetch --all\n\n  # Fetch all remotes and use verbose output\n  fav = fetch --all --verbose\n\n  ### grep aliases ###\n\n  # grep -n means show line number\n  gn = grep --line-number\n\n  # Search with our preferred options; a.k.a. `grep-group`\n  gg = grep-group\n\n  ### log aliases ###\n\n  # log with a text-based graphical representation of the commit history.\n  lg = log --graph\n\n  # log with one line per item.\n  lo = log --oneline\n\n  # log with one line per item, in reverse order i.e. recent items first.\n  lor = log --oneline --reverse\n\n  # log with patch generation.\n  lp = log --patch\n\n  # log with first parent, useful for team branch that only accepts pull requests\n  lfp = log --first-parent\n\n  # log with items appearing in topological order, i.e. descendant commits are shown before their parents.\n  lto = log --topo-order\n\n  # log list - Show log list with our preferred options, a.k.a. `log-list`\n  ll = log-list\n\n  # log list long - Show log list with our preferred options with long information, a.k.a. `log-list-long`\n  lll = log-list-long\n\n  ### ls-files aliases ###\n\n  # ls-files - show information about files in the index and the working tree; like Unix \"ls\" command.\n  ls = ls-files\n\n  # lsd - List files with debug information\n  lsd = ls-files --debug\n\n  # lsfn - List files with full name.\n  lsfn = ls-files --full-name\n\n  # lsio -  list files that git has ignored.\n  #\n  # git ls-files:\n  #\n  #     -i, --ignored\n  #         Show only ignored files in the output …\n  #\n  #     -o, --others\n  #         Show other (i.e. untracked) files in the output …\n  #\n  #     --exclude-standard\n  #         Add the standard Git exclusions …\n  #\n  lsio = ls-files --ignored --others --exclude-standard\n\n  ### merge aliases ###\n\n  # merge abort - cancel the merging process\n  ma = merge --abort\n\n  # merge - continue the merging process\n  mc = merge --continue\n\n  # merge but without autocommit, and with a commit even if the merge resolved as a fast-forward.\n  mncnf = merge --no-commit --no-ff\n\n  ### pull aliases ###\n\n  # pf - Pull if a merge can be resolved as a fast-forward, otherwise fail.\n  pf = pull --ff-only\n\n  # pp - Pull with rebase in order to provide a cleaner, linear, bisectable history\n  #\n  # To automatically do \"pull --rebase\" everywhere:\n  #\n  #     git config --global pull.rebase true\n  #\n  # To automatically do \"pull --rebase\" for any branch based on\n  # the branch \"main\":\n  #\n  #    git config branch.main.rebase true\n  #\n  # To automatically do \"pull --rebase\" for any newly-created branches:\n  #\n  #     git config --global branch.autosetuprebase always\n  #\n  # To integrate changes between branches, you can merge or rebase.\n  #\n  # When we use \"git pull\", git does a fetch then a merge.\n  #\n  # If we've made changes locally and someone else has pushed changes\n  # to our git host then git will automatically merge these together\n  # and create a merge commit that looks like this in the history:\n  #\n  #    12345678 - Merge branch 'foo' of bar into main\n  #\n  # When we use \"git pull --rebase\", git does a fetch then a rebase.\n  # A rebase resets the HEAD of your local branch to be the same as\n  # the remote HEAD, then replays your local commits back into repo.\n  # This means you don't get any noisy merge messages in your history.\n  # This gives us a linear history, and also helps with git bisect.\n  #\n  pr = pull --rebase\n\n  # prp - Pull with rebase preserve of merge commits\n  #\n  # See <https://stackoverflow.com/questions/21364636/git-pull-rebase-preserve-merges>\n  #\n  # You should only rebase if you know (in a sort of general sense)\n  # what you are doing, and if you do know what you are doing, then you\n  # would probably prefer a merge-preserving rebase as a general rule.\n  #\n  # Although by the time you've decided that rebasing is a good idea,\n  # you will probably find that a history that has its own embedded\n  # branch-and-merge-points is not necessarily the correct \"final\n  # rewritten history\".\n  #\n  # That is, if it's appropriate to do a rebase at all, it's at least fairly\n  # likely that the history to be rebased is itself linear, so that the\n  # preserve-vs-flatten question is moot anyway.\n  #\n  # See <https://stackoverflow.com/questions/38269092/is-it-possible-to-put-preserve-merges-in-the-gitconfig>\n  #\n  # While preserving merges is probably generally superior, in at least a\n  # few ways, to discarding them when rebasing, the fact is that rebase\n  # cannot preserve them. The only thing it can do, once some commits\n  # have been copied to new commits, is re-perform them. This can have new\n  # and/or different merge conflicts, vs the last time the merge was done.\n  # You should also pay close attention to the restrictions on merge\n  # preservation in the git rebase documentation.\n  #\n  # Without getting into a lot of detail, it always seems to me that most\n  # commit graph subsets that \"should be\" rebased, rarely have any\n  # internal merges. If such a graph subset has a single final merge, you\n  # can simply strip away that merge (with git reset) before rebasing,\n  # and re-do that single merge manually at the end. (In fact, git rebase\n  # normally drops merge commits entirely, so you don't have to run the git\n  # reset itself in some cases. The one where you do have to run it is when\n  # the merge is into the branch onto which you intend to rebase. This is\n  # where git pull actually does the right thing when it uses\n  # `git rebase -p`, except that it fails to check for, and warn about,\n  # internal merges, which are sort of warning signs that rebasing might\n  # not be a good idea.\n  #\n  prp = pull --rebase=preserve\n\n  ### rebase aliases ###\n\n  # rebase - forward-port local commits to the updated upstream head.\n  rb = rebase\n\n  # rebase abort - cancel the rebasing process\n  rba = rebase --abort\n\n  # rebase - continue the rebasing process after resolving a conflict manually and updating the index with the resolution.\n  rbc = rebase --continue\n\n  # rebase - restart the rebasing process by skipping the current patch.\n  rbs = rebase --skip\n\n  # rebase interactive - do the rebase with prompts.\n  rbi = rebase --interactive\n\n  # rbiu - rebase interactive on our unpushed commits.\n  #\n  # Before we push our local changes, we may want to do some cleanup,\n  # to improve our commit messages or squash related commits together.\n  #\n  # Let's say I've pushed two commits that are related to a new feature and\n  # I have another where I made a spelling mistake in the commit message.\n  #\n  # When I run \"git rbiu\" I get dropped into my editor with this:\n  #\n  #     pick 7f06d36 foo\n  #     pick ad544d0 goo\n  #     pick de3083a hoo\n  #\n  # Let's say I want to squash the \"foo\" and \"goo\" commits together,\n  # and also change \"hoo\" to say \"whatever\". To do these, I change \"pick\"\n  # to say \"s\" for squash; this tells git to squash the two together;\n  # I also edit \"hoo\" to rename it to \"whatever\". I make the file look like:\n  #\n  #     pick 7f06d36 foo\n  #     s ad544d0 goo\n  #     r de3083a whatever\n  #\n  # This gives me two new commit messages to edit, which I update.\n  # Now when I push the remote repo host receives two commits\n  #\n  #     3400455 - foo\n  #     5dae0a0 - whatever\n  #\n  rbiu = rebase --interactive @{upstream}\n\n  # See <https://blog.filippo.io/git-fixup-amending-an-older-commit/>\n  # This is a slightly modified version\n  fixup = \"!f() { TARGET=\\\"$(git rev-parse \\\"$1\\\")\\\"; git commit --fixup=\\\"$TARGET\\\" && GIT_EDITOR=true git rebase --interactive --autosquash \\\"$TARGET\\\"~; }; f\"\n\n  ### reflog aliases ###\n\n  # reflog - reference log that manages when tips of branches are updated.\n  rl = reflog\n\n  ### remote aliases ###\n\n  # remote - manage set of tracked repositories [same as \"r\"].\n  rr = remote\n\n  # remote show - gives some information about the remote <name>.\n  rrs = remote show\n\n  # remote update - fetch updates for a named set of remotes in the repository as defined by remotes.\n  rru = remote update\n\n  # remote prune - deletes all stale remote-tracking branches under <name>.\n  rrp = remote prune\n\n  ### revert aliases ###\n\n  # revert - undo the changes from some existing commits\n  rv = revert\n\n  # revert without autocommit; useful when you're reverting more than one commits' effect to your index in a row.\n  rvnc = revert --no-commit\n\n  ### show-branch aliases ###\n\n  # show-branch - print a list of branches and their commits.\n  sb = show-branch\n\n  ### submodule aliases ###\n\n  # submodule - enables foreign repositories to be embedded within a dedicated subdirectory of the source tree.\n  sm = submodule\n\n  # submodule init\n  smi = submodule init\n\n  # submodule add\n  sma = submodule add\n\n  # submodule sync\n  sms = submodule sync\n\n  # submodule update\n  smu = submodule update\n\n  # submodule update with initialize\n  smui = submodule update --init\n\n  # submodule update with initialize and recursive; this is useful to bring a submodule fully up to date.\n  smuir = submodule update --init --recursive\n\n  ### status aliases ###\n\n  # status with short format instead of full details\n  ss = status --short\n\n  # status with short format and showing branch and tracking info.\n  ssb = status --short --branch\n\n  ### alias management aliases ###\n\n  # git alias: show help for git alias commands.\n  alias = \"!f(){ \\\n      echo \\\"Git Alias is project that has a collection of git alias commands.\\\"; \\\n      echo \\\"The purpose is to help make git easier, faster, and more capable.\\\"; \\\n      echo \\\"Free open source repository <https://github.com/gitalias/gitalias>.\\\"; \\\n      echo \\\"\\\"; \\\n      echo \\\"To see your existing git aliases:\\\"; \\\n      echo \\\"    git aliases\\\"; \\\n      echo \\\"\\\"; \\\n      echo \\\"To see your existing git aliases by using git directly:\\\"; \\\n      echo \\\"    git config --get-regexp ^alias\\\\.\\\"; \\\n  };f\"\n\n  # git add-alias: create a new git alias.\n  add-alias = \"!f() { \\\n      if [ $# != 3 ]; then \\\n        echo \\\"Usage: git add-alias ( --local | --global ) <alias> <command>\\\"; \\\n        echo \\\"Error: this command needs 3 arguments.\\\"; \\\n        return 2; \\\n      fi; \\\n      if [ -n \\\"$(git config \\\"$1\\\" --get alias.\\\"$2\\\")\\\" ]; then \\\n          echo \\\"Alias '$2' already exists, thus no change happened.\\\"; \\\n          return 3; \\\n      fi; \\\n      git config \\\"$1\\\" alias.\\\"$2\\\" \\\"$3\\\" && \\\n      return 0; \\\n      echo \\\"Usage: git add-alias ( --local | --global ) <alias> <command>\\\"; \\\n      echo \\\"Error: unknown failure.\\\"; \\\n      return 1; \\\n  }; f\"\n\n  # git move-alias: rename an existing git alias.\n  move-alias = \"!f() { \\\n      if [ $# != 3 ]; then \\\n          echo \\\"Usage: git move-alias ( --local | --global ) <alias existing name> <new alias name>\\\"; \\\n          echo \\\"Error: this command needs 3 arguments.\\\"; \\\n          return 2; \\\n      fi; \\\n      if [ \\\"$2\\\" = \\\"$3\\\" ]; then \\\n          echo \\\"The alias names are identical, thus no change happened.\\\"; \\\n          return 3; \\\n      fi; \\\n      if [ -z \\\"$(git config \\\"$1\\\" --get alias.\\\"$2\\\")\\\" ]; then \\\n          echo \\\"Alias '$2' does not exist, thus no change happened.\\\"; \\\n          return 4; \\\n      fi; \\\n      if [ -n \\\"$(git config \\\"$1\\\" --get alias.\\\"$3\\\")\\\" ]; then \\\n          echo \\\"Alias '$3' already exists, thus no change happened.\\\"; \\\n          return 5; \\\n      fi; \\\n      git config \\\"$1\\\" alias.\\\"$3\\\" \\\"$(git config \\\"$1\\\" --get alias.\\\"$2\\\")\\\" && \\\n      git config \\\"$1\\\" --unset alias.\\\"$2\\\" && \\\n      return 0; \\\n      echo \\\"Usage: git move-alias ( --local | --global ) <alias existing name> <alias new name>\\\"; \\\n      echo \\\"Error: unknown failure.\\\"; \\\n      return 1; \\\n  };f\"\n\n  # Last tag in the current branch\n  last-tag = describe --tags --abbrev=0\n\n  # Last annotated tag in all branches\n  last-tagged = \"!git describe --tags \\\"$(git rev-list --tags --max-count=1)\\\"\"\n\n  # From <https://gist.github.com/492227>\n  heads = \"!git log origin/main.. --format='%Cred%h%Creset;%C(yellow)%an%Creset;%H;%Cblue%f%Creset' | git name-rev --stdin --always --name-only | column -t -s';'\"\n\n  ### diff-* aliases ###\n\n  diff-all = \"!for name in $(git diff --name-only \\\"$1\\\"); do git difftool \\\"$1\\\" \\\"$name\\\" & done\"\n  diff-changes = diff --name-status -r\n  diff-stat = diff --stat --ignore-space-change -r\n  diff-staged = diff --cached\n\n  # Diff using our preferred options. A.k.a. `dd`.\n  diff-deep = diff --check --dirstat --find-copies --find-renames --histogram --color\n\n  ### grep-* aliases ###\n\n  # Find text in any commit ever.\n  grep-all = \"!f() { git rev-list --all | xargs git grep \\\"$@\\\"; }; f\"\n\n  # Find text and group the output lines. A.k.a. `gg`.\n  grep-group = grep --break --heading --line-number --color\n\n  # Find text with ack-like formatting.\n  grep-ack = \"\\\n    -c color.grep.linenumber=\\\"bold yellow\\\" \\\n    -c color.grep.filename=\\\"bold green\\\" \\\n    -c color.grep.match=\\\"reverse yellow\\\" \\\n    grep --break --heading --line-number\"\n\n  ### init-* aliases ###\n\n  # Initalize a repo and immediately add an empty rebaseable commit.\n  # This initialization makes it easier to do later git rebase commands,\n  # because it enables a rebase to go all the way back to the first commit.\n  init-empty = \"!f() { git init && git commit --allow-empty --allow-empty-message --message ''; }; f\"\n\n  ### merge-span-* aliases ###\n\n  # Given a merge commit, find the span of commits that exist(ed).\n  # Not so useful in itself, but used by other aliases.\n  # Thanks to Rob Miller for the merge-span-* aliases.\n  merge-span = \"!f() { echo \\\"$(git log -1 \\\"$2\\\" --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 \\\"$2\\\" --merges --pretty=format:%P | cut -d' ' -f2)\\\"; }; f\"\n\n  # Find the commits that were introduced by a merge\n  merge-span-log = \"!git log \\\"$(git merge-span .. \\\"$1\\\")\\\"\"\n\n  # Show the changes that were introduced by a merge\n  merge-span-diff = \"!git diff \\\"$(git merge-span ... \\\"$1\\\")\\\"\"\n\n  # Show the changes that were introduced by a merge, in your difftool\n  merge-span-difftool = \"!git difftool \\\"$(git merge-span ... \\\"$1\\\")\\\"\"\n\n  # Interactively rebase all the commits on the current branch\n  rebase-branch = \"!f() { git rebase --interactive \\\"$(git merge-base \\\"$(git default-branch)\\\") HEAD)\\\"; }; f\"\n\n  # Find all objects that aren't referenced by any other object (orphans).\n  # To help an orphan, we create a new branch with the orphan's commit hash,\n  # then merge it into our current branch:\n  #\n  #    git branch foo <commit>\n  #    git merge foo\n  #\n  orphans = fsck --full\n\n  # List all blobs by size in bytes.\n  # By [CodeGnome](http://www.codegnome.com/)\n  rev-list-all-objects-by-size = \"!git rev-list --all --objects  | awk '{print $1}'| git cat-file --batch-check | grep -F blob | sort -k3nr\"\n\n  # List all objects by size in bytes and file name.\n  # By [raphinesse](https://stackoverflow.com/users/380229/raphinesse)\n  rev-list-all-objects-by-size-and-name = \"!git rev-list --all --objects | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | awk '/^blob/ {print substr($0,6)}' | sort --numeric-sort --key=2\"\n\n  ### log-* aliases ###\n\n  # Show log of new commits after you fetched, with stats, excluding merges\n  log-fresh = log ORIG_HEAD.. --stat --no-merges\n\n  # Show log list with our preferred information, a.k.a. `ll`\n  #\n  #   * Short date format using YYYY-MM-DD (no time, no zone)\n  #   * Short hash commit format using abbreviated hexadecimal (not full hexadecimal)\n  #   * Short author field using name (no email address) and signature mark\n  #   * Short layout without columns\n  #\n  log-list = log --graph --topo-order --date=short --abbrev-commit --decorate --all --boundary --pretty=format:'%Cblue%ad %C(auto)%h%Creset -%C(auto)%d%Creset %s %Cblue[%aN]%Creset %Cblue%G?%Creset'\n\n  # Show log  list with our preferred information with long formats, a.k.a. `lll`\n  #\n  #   * Long date format using iso8601 strict YYYY-MM-DDTHH:MM:SS+HH:MM\n  #   * Long hash commit format using full hexadecimal displayed as name-rev\n  #   * Long author field using name and email address and signature mark\n  #   * Long layout with columns\n  #\n  log-list-long = log --graph --topo-order --date=iso8601-strict --no-abbrev-commit --decorate --all --boundary --pretty=format:'%Cblue%ad %C(auto)%h%Creset -%C(auto)%d%Creset %s %Cblue[%aN <%aE>]%Creset %Cblue%G?%Creset'\n\n  # Show log for my own commits by my own user email\n  log-my = \"!git log --author \\\"$(git config user.email)\\\"\"\n\n  # Show log as a graph\n  log-graph = log --graph --all --oneline --decorate\n\n  # Show the date of the first (a.k.a. earliest) commit, in strict ISO 8601 format\n  log-date-first = \"!git log --date-order --format=%cI | tail -1\"\n\n  # Show the date of the last (a.k.a. latest) commit, in strict ISO 8601 format\n  log-date-last = log -1 --date-order --format=%cI\n\n  # Show log with the recent hour, day, week, month, year\n  log-1-hour  = log --since=1-hour-ago\n  log-1-day   = log --since=1-day-ago\n  log-1-week  = log --since=1-week-ago\n  log-1-month = log --since=1-month-ago\n  log-1-year  = log --since=1-year-ago\n\n  # Show log with my own recent hour, day, week, month, year\n  log-my-hour  = \"!git log --author \\\"$(git config user.email)\\\" --since=1-hour-ago\"\n  log-my-day   = \"!git log --author \\\"$(git config user.email)\\\" --since=1-day-ago\"\n  log-my-week  = \"!git log --author \\\"$(git config user.email)\\\" --since=1-week-ago\"\n  log-my-month = \"!git log --author \\\"$(git config user.email)\\\" --since=1-month-ago\"\n  log-my-year  = \"!git log --author \\\"$(git config user.email)\\\" --since=1-year-ago\"\n\n  # Show a specific format string and its number of log entries\n  log-of-format-and-count = \"!f() { format=\\\"$1\\\"; shift; git log \\\"$@\\\" --format=oneline --format=\\\"$format\\\" | awk '{a[$0]++}END{for(i in a){print i, a[i], int((a[i]/NR)*100) \\\"%\\\"}}' | sort; }; f\"\n  log-of-count-and-format = \"!f() { format=\\\"$1\\\"; shift; git log \\\"$@\\\" --format=oneline --format=\\\"$format\\\" | awk '{a[$0]++}END{for(i in a){print a[i], int((a[i]/NR)*100) \\\"%\\\", i}}' | sort -nr; }; f\"\n\n  # Show the number of log entries by a specific format string and date format string\n  log-of-format-and-count-with-date = \"!f() { format=\\\"$1\\\"; shift; date_format=\\\"$1\\\"; shift; git log \\\"$@\\\" --format=oneline --format=\\\"$format\\\" --date=format:\\\"$date_format\\\" | awk '{a[$0]++}END{for(i in a){print i, a[i], int((a[i]/NR)*100) \\\"%\\\"}}' | sort -r; }; f\"\n  log-of-count-and-format-with-date = \"!f() { format=\\\"$1\\\"; shift; date_format=\\\"$1\\\"; shift; git log \\\"$@\\\" --format=oneline --format=\\\"$format\\\" --date=format:\\\"$date_format\\\" | awk '{a[$0]++}END{for(i in a){print a[i], int((a[i]/NR)*100) \\\"%\\\", i}}' | sort -nr; }; f\"\n\n  # Show the number of log items by email\n  log-of-email-and-count         = \"!f() { git log-of-format-and-count \\\"%aE\\\" \\\"$@\\\"; }; f\"\n  log-of-count-and-email         = \"!f() { git log-of-count-and-format \\\"%aE\\\" \\\"$@\\\"; }; f\"\n\n  # Show the number of log items by hour\n  log-of-hour-and-count          = \"!f() { git log-of-format-and-count-with-date \\\"%ad\\\" \\\"%Y-%m-%dT%H\\\" \\\"$@\\\" ; }; f\"\n  log-of-count-and-hour          = \"!f() { git log-of-count-and-format-with-date \\\"%ad\\\" \\\"%Y-%m-%dT%H\\\" \\\"$@\\\" ; }; f\"\n\n  # Show the number of log items by day\n  log-of-day-and-count           = \"!f() { git log-of-format-and-count-with-date \\\"%ad\\\" \\\"%Y-%m-%d\\\" \\\"$@\\\" ; }; f\"\n  log-of-count-and-day           = \"!f() { git log-of-count-and-format-with-date \\\"%ad\\\" \\\"%Y-%m-%d\\\" \\\"$@\\\" ; }; f\"\n\n  # Show the number of log items by week\n  log-of-week-and-count          = \"!f() { git log-of-format-and-count-with-date \\\"%ad\\\" \\\"%Y#%V\\\" \\\"$@\\\"; }; f\"\n  log-of-count-and-week          = \"!f() { git log-of-count-and-format-with-date \\\"%ad\\\" \\\"%Y#%V\\\" \\\"$@\\\"; }; f\"\n\n  # Show the number of log items by month\n  log-of-month-and-count         = \"!f() { git log-of-format-and-count-with-date \\\"%ad\\\" \\\"%Y-%m\\\" \\\"$@\\\" ; }; f\"\n  log-of-count-and-month         = \"!f() { git log-of-count-and-format-with-date \\\"%ad\\\" \\\"%Y-%m\\\" \\\"$@\\\" ; }; f\"\n\n  # Show the number of log items by year\n  log-of-year-and-count          = \"!f() { git log-of-format-and-count-with-date \\\"%ad\\\" \\\"%Y\\\" \\\"$@\\\" ; }; f\"\n  log-of-count-and-year          = \"!f() { git log-of-count-and-format-with-date \\\"%ad\\\" \\\"%Y\\\" \\\"$@\\\" ; }; f\"\n\n  # Show the number of log items by hour of day\n  log-of-hour-of-day-and-count   = \"!f() { git log-of-format-and-count-with-date \\\"%ad\\\" \\\"%H\\\" \\\"$@\\\"; }; f\"\n  log-of-count-and-hour-of-day   = \"!f() { git log-of-count-and-format-with-date \\\"%ad\\\" \\\"%H\\\" \\\"$@\\\"; }; f\"\n\n  # Show the number of log items by day of week\n  log-of-day-of-week-and-count   = \"!f() { git log-of-format-and-count-with-date \\\"%ad\\\" \\\"%u\\\" \\\"$@\\\"; }; f\"\n  log-of-count-and-day-of-week   = \"!f() { git log-of-count-and-format-with-date \\\"%ad\\\" \\\"%u\\\" \\\"$@\\\"; }; f\"\n\n  # Show the number of log items by week of year\n  log-of-week-of-year-and-count  = \"!f() { git log-of-format-and-count-with-date \\\"%ad\\\" \\\"%V\\\" \\\"$@\\\"; }; f\"\n  log-of-count-and-week-of-year  = \"!f() { git log-of-count-and-format-with-date \\\"%ad\\\" \\\"%V\\\" \\\"$@\\\"; }; f\"\n\n  # TODO\n  log-refs = log --all --graph --decorate --oneline --simplify-by-decoration --no-merges\n  log-timeline = log --format='%h %an %ar - %s'\n  log-local = log --oneline origin..HEAD\n  log-fetched = log --oneline HEAD..origin/main\n\n  # chart: show a summary chart of activity per author.\n  #\n  # Example:\n  #\n  #     $ git chart\n  #     ..X..........X...2..12 alice@example.com\n  #     ....2..2..13.......... bob@example.com\n  #     2.....1....11......... carol@example.com\n  #     ..1............1..1... david@example.com\n  #     ....1.......1.3.3.22.2 eve@example.com\n  #\n  # The chart rows are the authors.\n  # TODO: sort the rows meaningfully,\n  # such as alphabetically, or by count.\n  #\n  # The chart columns are the days.\n  # The chart column prints one character per day.\n  #\n  #   * For 1-9 commits, show the number.\n  #   * For 10 or more commits, show \"X\" as a visual indicator.\n  #   * For no commits, show \".\" as a visual placeholder.\n  #\n  # The chart timeline adjusts the date range automatically:\n  #\n  #   * The timeline starts with the date of the earliest commit.\n  #   * The timeline stops with the date of the latest commit.\n  #   * The intent is to show the most relevant information.\n  #\n  # The chart default is to look at the past 6 weeks;\n  # this gives a good balance of recency and speed\n  # for a team that's currently working on a repo,\n  # and also gives a good balance of fitting within\n  # one terminal window 80 character width.\n  #\n  # You can adjust how far back the chart looks,\n  # by providing your own `--since` parameter.\n  # For example if you want to chart an older repo,\n  # that does not have any recent commits, then you\n  # you must provide a longer `--since` parameter.\n  #\n  chart = \"!f() { \\\n    git log \\\n    --format=oneline \\\n    --format=\\\"%aE %at\\\" \\\n    --since=6-weeks-ago \\\n    \\\"$*\\\" | \\\n    awk ' \\\n    function time_to_slot(t) { return strftime(\\\"%Y-%m-%d\\\", t, true) } \\\n    function count_to_char(i) { return (i > 0) ? ((i < 10) ? i : \\\"X\\\") : \\\".\\\" } \\\n    BEGIN { \\\n      time_min = systime(); time_max = 0; \\\n      SECONDS_PER_DAY=86400; \\\n    } \\\n    { \\\n      item = $1; \\\n      time = 0 + $2; \\\n      if (time > time_max){ time_max = time } else if (time < time_min){ time_min = time }; \\\n      slot = time_to_slot(time); \\\n      items[item]++; \\\n      slots[slot]++; \\\n      views[item, slot]++; \\\n    } \\\n    END{ \\\n      printf(\\\"Chart time range %s to %s.\\\\n\\\", time_to_slot(time_min), time_to_slot(time_max)); \\\n      time_max_add = time_max += SECONDS_PER_DAY; \\\n      for(item in items){ \\\n        row = \\\"\\\"; \\\n        for(time = time_min; time < time_max_add; time += SECONDS_PER_DAY) { \\\n          slot = time_to_slot(time); \\\n          count = views[item, slot]; \\\n          row = row count_to_char(count); \\\n        } \\\n        print row, item; \\\n      } \\\n    }'; \\\n  }; f\"\n\n  # churn: show log of files that have many changes\n  #\n  #   * Written by [Corey Haines](http://coreyhaines.com/)\n  #   * Scriptified by Gary Bernhardt\n  #   * Obtained from <https://github.com/garybernhardt/dotfiles/blob/main/bin/git-churn>\n  #   * Edited for GitAlias.com repo by Joel Parker Henderson\n  #   * Comments by Mislav <http://mislav.uniqpath.com/2014/02/hidden-documentation/>\n  #\n  # Show churn for whole repo:\n  #\n  #   $ git churn\n  #\n  # Show churn for specific directories:\n  #\n  #   $ git churn app lib\n  #\n  # Show churn for a time range:\n  #\n  #   $ git churn --since=1-month-ago\n  #\n  # These are all standard arguments to `git log`.\n  #\n  # It's possible to get valuable insight from history of a project not only\n  # by viewing individual commits, but by analyzing sets of changes as a whole.\n  # For instance, `git churn` compiles stats about which files change the most.\n  #\n  # For example, to see where work on an app was focused on in the past month:\n  #\n  #     $ git churn --since=1-month-ago app/ | tail\n  #\n  # This can also highlight potential problems with technical debt in a project.\n  # A specific file changing too often is generally a red flag, since it probably\n  # means the file either needed to be frequently fixed for bugs, or the file\n  # holds too much responsibility and should be split into smaller units.\n  #\n  # Similar methods of history analysis can be employed to see which people were\n  # responsible recently for development of a certain part of the codebase.\n  #\n  # For instance, to see who contributed most to the API part of an application:\n  #\n  #    $ git log --format='%an' --since=1-month-ago app/controllers/api/ | \\\n  #      sort | uniq -c | sort -rn | head\n  #\n  #    109 Alice Anderson\n  #    13 Bob Brown\n  #    7 Carol Clark\n  #\n  churn = \"!f() { git log --all --find-copies --find-renames --name-only --format='format:' \\\"$@\\\" | awk 'NF{a[$0]++}END{for(i in a){print a[i], i}}' | sort -rn;};f\"\n\n  # summary: print a helpful summary of some typical metrics\n  summary = \"!f() { \\\n    printf \\\"Summary of this branch...\\n\\\"; \\\n    printf \\\"%s\\n\\\" \\\"$(git current-branch)\\\"; \\\n    printf \\\"%s first commit timestamp\\n\\\" \\\"$(git log --date-order --format=%cI | tail -1)\\\"; \\\n    printf \\\"%s last commit timestamp\\n\\\" \\\"$(git log -1 --date-order --format=%cI)\\\"; \\\n    printf \\\"\\nSummary of counts...\\n\\\"; \\\n    printf \\\"%d commit count\\n\\\" \\\"$(git rev-list --count HEAD)\\\"; \\\n    printf \\\"%d date count\\n\\\" \\\"$(git log --format=oneline --format=\\\"%ad\\\" --date=format:\\\"%Y-%m-%d\\\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}')\\\"; \\\n    printf \\\"%d tag count\\n\\\" \\\"$(git tag | wc -l)\\\"; \\\n    printf \\\"%d author count\\n\\\" \\\"$(git log --format=oneline --format=\\\"%aE\\\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}')\\\"; \\\n    printf \\\"%d committer count\\n\\\" \\\"$(git log --format=oneline --format=\\\"%cE\\\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}')\\\"; \\\n    printf \\\"%d local branch count\\n\\\" \\\"$(git branch | grep -vc \\\" -> \\\")\\\"; \\\n    printf \\\"%d remote branch count\\n\\\" \\\"$(git branch --remotes | grep -vc \\\" -> \\\")\\\"; \\\n    printf \\\"\\nSummary of this directory...\\n\\\"; \\\n    printf \\\"%s\\n\\\" \\\"$(pwd)\\\"; \\\n    printf \\\"%d file count via git ls-files\\n\\\" \\\"$(git ls-files | wc -l)\\\"; \\\n    printf \\\"%d file count via find command\\n\\\" \\\"$(find . | wc -l)\\\"; \\\n    printf \\\"%d disk usage\\n\\\" \\\"$(du -s | awk '{print $1}')\\\"; \\\n    printf \\\"\\nMost-active authors, with commit count and %%...\\n\\\"; git log-of-count-and-email | head -7; \\\n    printf \\\"\\nMost-active dates, with commit count and %%...\\n\\\"; git log-of-count-and-day | head -7; \\\n    printf \\\"\\nMost-active files, with churn count\\n\\\"; git churn | head -7; \\\n  }; f\"\n\n  ### branch-commit-* aliases to show hashes via sort order ###\n\n  # Show a branch's commit hash (or multiple hashes)\n  # by using ordering keywords (\"first\" or \"last\"):\n  #\n  #   * `branch-commit-first`: show a branch's first commit hash (or hashes)\n  #\n  #   * `branch-commit-last`: show a branch's last commit hash (or hashes)\n  #\n  #   * `branch-commit-prev`: show a branch's previous commit hash (or hashes)\n  #\n  #   * `branch-commit-next`: show a branch's next commit hash (or hashes)\n  #\n  # Inspirations:\n  #\n  #   * Email from Demian proposing these aliases\n  #\n  #   * https://github.com/hutusi/git-paging\n  #\n\n  # branch-commit-first\n  #\n  # Show a branch's first commit hash (or hashes).\n  #\n  # Syntax:\n  #\n  #    git branch-commit-first [branch name [commit count]]\n  #\n  # Options:\n  #\n  #   * branch name: default is the current branch name.\n  #\n  #   * commit count: default is 1\n  #\n  # Example: show the current branch's first commit hash:\n  #\n  #     git branch-commit-first\n  #\n  # Example: show the \"foo\" branch's first commit hash:\n  #\n  #     git branch-commit-first foo\n  #\n  # Example: show the \"foo\" branch's first 3 commit hashes:\n  #\n  #     git branch-commit-first foo 3\n  #\n  branch-commit-first = \"!f() { \\\n      branch=\\\"${1:-$(git current-branch)}\\\"; \\\n      count=\\\"${2:-1}\\\"; \\\n    git log --reverse --pretty=%H \\\"$branch\\\" | \\\n    head -\\\"$count\\\"; \\\n  }; f\"\n\n  # branch-commit-last\n  #\n  # Show a branch's last commit hash (or hashes).\n  #\n  # Syntax:\n  #\n  #    git branch-commit-last [branch name [commit count]]\n  #\n  # Options:\n  #\n  #   * branch name: default is the current branch name.\n  #\n  #   * commit count: default is 1\n  #\n  # Example: show the current branch's last commit hash:\n  #\n  #     git branch-commit-last\n  #\n  # Example: show the \"foo\" branch's last commit hash:\n  #\n  #     git branch-commit-last foo\n  #\n  # Example: show the \"foo\" branch's last 3 commit hashes:\n  #\n  #     git branch-commit-last foo 3\n  #\n  branch-commit-last = \"!f() { \\\n      branch=\\\"${1:-$(git current-branch)}\\\"; \\\n      count=\\\"${2:-1}\\\"; \\\n    git log --pretty=%H \\\"$branch\\\" | \\\n    head -\\\"$count\\\"; \\\n  }; f\"\n\n  # branch-commit-prev\n  #\n  # Show a branch's previous commit hash (or hashes).\n  #\n  # Syntax:\n  #\n  #    git branch-commit-prev [branch name [commit count]]\n  #\n  # Options:\n  #\n  #   * branch name: default is the current branch name.\n  #\n  #   * commit count: default is 1\n  #\n  # Example: show the current branch's previous commit hash:\n  #\n  #     git branch-commit-prev\n  #\n  # Example: show the \"foo\" branch's previous commit hash:\n  #\n  #     git branch-commit-prev previous\n  #\n  # Example: show the \"foo\" branch's previous 3 commit hashes:\n  #\n  #     git branch-commit-prev foo 3\n  #\n  branch-commit-prev = \"!f() { \\\n      branch=\\\"${1:-$(git current-branch)}\\\"; \\\n      count=\\\"${2:-1}\\\"; \\\n    git log --pretty=%H \\\"$branch\\\" | \\\n    grep -A \\\"$count\\\" \\\"$(git rev-parse HEAD)\\\" | \\\n    tail +2; \\\n  }; f\"\n\n  # branch-commit-next\n  #\n  # Show a branch's next commit hash (or hashes).\n  #\n  # Syntax:\n  #\n  #    git branch-commit-next [branch name [commit count]]\n  #\n  # Options:\n  #\n  #   * branch name: default is the current branch name.\n  #\n  #   * commit count: default is 1\n  #\n  # Example: show the current branch's next commit hash:\n  #\n  #     git branch-commit-next\n  #\n  # Example: show the \"foo\" branch's next commit hash:\n  #\n  #     git branch-commit-next next\n  #\n  # Example: show the \"foo\" branch's next 3 commit hashes:\n  #\n  #     git branch-commit-next foo 3\n  #\n  branch-commit-next = \"!f() { \\\n      branch=\\\"${1:-$(git current-branch)}\\\"; \\\n      count=\\\"${2:-1}\\\"; \\\n    git log --reverse --pretty=%H \\\"$branch\\\" | \\\n    grep -A \\\"$count\\\" \\\"$(git rev-parse HEAD)\\\" | \\\n    tail +2; \\\n  }; f\"\n\n  ### Ref aliases ###\n\n  # Sort by date for branches; can be useful for spring cleaning\n  refs-by-date = for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short) (objectname:short) %(contents:subject)'\n\n  ### Lookup aliases ###\n\n  # whois: given a string for an author, try to figure out full name and email:\n  whois = \"!sh -c 'git log --regexp-ignore-case -1 --pretty=\\\"format:%an <%ae>\\n\\\" --author=\\\"$1\\\"' -\"\n\n  # Given any git object, try to show it briefly\n  whatis = show --no-patch --pretty='tformat:%h (%s, %ad)' --date=short\n\n  # Show who contributed, in descending order by number of commits\n  who = shortlog --summary --numbered --no-merges\n\n  # List all issues mentioned in commit messages between range of commits\n  #\n  # Replace `\\\\\\\"ISSUE-[0-9]\\\\+\\\\\\\"` regular expression with one matching your issue tracking system.\n  # For Jira it should be as simple as putting your project name in place of `ISSUE`.\n  #\n  # Best used with tags:\n  #  $ git issues v1.0..v1.1\n  #\n  # But will work with any valid commit range:\n  #  $ git issues main..HEAD\n\n  issues = \"!sh -c \\\"git log $1 --oneline | grep -o \\\\\\\"ISSUE-[0-9]\\\\+\\\\\\\" | sort -u\\\"\"\n\n  # Show the commit's parents\n  commit-parents = \"!f(){ git cat-file -p \\\"${*:-HEAD}\\\" | sed -n '/0/,/^ *$/{/^parent /p}'; };f\"\n\n  # Is the commit a merge commit? If yes exit 0, else exit 1\n  commit-is-merge = \"!f(){ [ -n \\\"$(git commit-parents \\\"$*\\\" | sed '0,/^parent /d')\\\" ];};f\"\n\n  # Show the commit's keyword-marked lines.\n  #\n  # Show each line in the commit message that starts with zero or more blanks,\n  # then a keyword (alphanum and dash characters), then a colon.\n  #\n  # Example commit:\n  #\n  #     commit ce505d161fccdbc8d4bf12047846de7433ad6d04\n  #     Author: Joel Parker Henderson <joel@joelparkerhenderson.com>\n  #     Date:   Tue May 28 11:53:47 2019 -0700\n  #\n  #         Add feature foo\n  #\n  #         This commit is to add feature foo.\n  #\n  #         Time: 5 hours\n  #         Cost: 600 USD\n  #\n  # Command:\n  #\n  #     $ git commit-message-key-lines ce505d161fccdbc8d4bf12047846de7433ad6d04\n  #     Commit: ce505d161fccdbc8d4bf12047846de7433ad6d04\n  #     Author: Joel Parker Henderson <joel@joelparkerhenderson.com>\n  #     Date: Tue May 28 11:53:47 2019 -0700\n  #     Time: 5 hours\n  #     Cost: 600 USD\n  #\n  # Normalize the output:\n  #\n  #   * Start the output with \"Commit: <commit>\"\n  #\n  #   * Omit leading blanks\n  #\n  #   * After the colon, use one space (not tab, not multiple spaces, etc.)\n  #\n  # Known issues:\n  #\n  #   * TODO: improve the keyword matcher so it requires the keyword to end\n  #     in an alphanum (not a dash), and also so the dash is a separator i.e.\n  #     the matcher does not accept a dash followed by another dash.\n  #\n  commit-message-key-lines = \"!f(){ echo \\\"Commit: $1\\\"; git log \\\"$1\\\" --format=fuller | grep \\\"^[[:blank:]]*[[:alnum:]][-[:alnum:]]*:\\\" | sed \\\"s/^[[:blank:]]*//; s/:[[:blank:]]*/: /\\\"; }; f\"\n\n\n  ### Workflow aliases ###\n\n  # Init a repo using our recommended way i.e. with an empty rebaseable commit\n  initer = init-empty\n\n  # Clone a repo using ur recommended way i.e. recursive include of submodules\n  cloner = clone --recursive\n\n  # Clone as lean as possible, for example to checkout just one subdiretory.\n  #\n  # This skips fetching unneeded objects from the server.\n  #\n  # Command breakdown:\n  #\n  #   * --depth 1 does a shallow clone and implies --single-branches\n  #\n  #   * --filter=blob:none skips all blobs, but fetches all tree objects\n  #\n  #   * --filter=tree:0 skips unneeded trees\n  #\n  #   * --filter=combine:FILTER1+FILTER2 is the syntax to use multiple\n  #       filters at once; trying to pass --filter multiple times fails\n  #       with: \"multiple filter-specs cannot be combined\".\n  #\n  # This uses --filter=tree:0 added in Git 2.20 and --filter=combine\n  # composite filter added in Git 2.24.\n  #\n  # The server should be configured with:\n  #\n  #     git config --local uploadpack.allowfilter 1\n  #     git config --local uploadpack.allowanysha1inwant 1\n  #\n  # An extension was made to the Git remote protocol to support this\n  # feature in v2.19.0 and actually skip fetching unneeded objects.\n  # There was server support then, but it can be locally tested.\n  #\n  # Credit: https://stackoverflow.com/questions/600079/how-do-i-clone-a-subdirectory-only-of-a-git-repository/52269934#52269934\n  #\n  clone-lean = clone --depth 1 --filter=combine:blob:none+tree:0 --no-checkout\n\n  # Stash snapshot - from http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/\n  # Take a snapshot of your current working tree without removing changes.\n  # This is handy for refactoring where you can't quite fit what you've done\n  # into a commit but daren't stray too far from now without a backup.\n  #\n  # Running this:\n  #\n  #    $ git snapshot\n  #\n  # Creates this stash:\n  #\n  #    stash@{0}: On feature/handy-git-tricks: snapshot: Mon Apr 8 12:39:06 BST 2013\n  #\n  # And seemingly no changes to your working tree.\n  #\n  snapshot = \"!git stash push --include-untracked --message \\\"snapshot: $(date)\\\" && git stash apply \\\"stash@{0}\\\" --index\"\n\n  # When you're a little worried that the world is coming to an end\n  panic = \"!tar cvf ../panic.tar -- *\"\n\n  # Create an archive file of everything in the repo\n  archive = \"!f() { top=\\\"$(git rev-parse --show-toplevel)\\\"; cd \\\"$top\\\" || exit 1 ; tar cvf \\\"$top.tar\\\" \\\"$top\\\" ; }; f\"\n\n  # Push with a force and lease, which means that you're pushing in order\n  # to forcefully overwrite the remote, and you want a safety check first:\n  # git checks you're current with remote, and only then allows the push.\n  # We name this `pushy` because its dsagreeably aggressive (in general)\n  # or overly assertive (in general), yet still better than just --force.\n  pushy = !git push --force-with-lease\n\n  # Do everything we can to synchronize all changes for the current branch.\n  #\n  #  * git get: fetch and prune, pull and rebase, then update submodules\n  #  * git put: commit all items, then push\n  #\n  # If you want to preserve merges, then we recommend you set this:\n  #\n  #     git config pull.rebase preserve\n  #\n  # TODO: handle tags, and delete superfluous branches, and add error handing.\n  #\n  get = !git fetch --prune && git pull --rebase && git submodule update --init --recursive\n  put = !git commit --all && git push\n\n  # Do everything we can to make the local repo like the main branch.\n  #\n  # TODO: handle tags, and delete superfluous branches, and add error handling.\n  #\n  mainly = \"!git checkout \\\"$(git default-branch)\\\" && git fetch origin --prune && git reset --hard \\\"origin/$(git default-branch)\\\"\"\n\n  # Ignore all untracked files by appending them to .gitignore:\n  ignore = \"!git status | grep -P \\\"^\\\\t\\\" | grep -vF .gitignore | sed \\\"s/^\\\\t//\\\" >> .gitignore\"\n\n  # Do a push/pull for just one branch\n  push1 = \"!git push origin \\\"$(git current-branch)\\\"\"\n  pull1 = \"!git pull origin \\\"$(git current-branch)\\\"\"\n\n  # Track and untrack, with default parameters, and with printing the command\n  track = \"!f(){ branch=\\\"$(git current-branch)\\\"; cmd=\\\"git branch $branch --set-upstream-to=${1:-origin}/${2:-$branch}\\\"; echo \\\"$cmd\\\"; $cmd; }; f\"\n  untrack = \"!f(){ branch=\\\"$(git current-branch)\\\"; cmd=\\\"git branch --unset-upstream ${1:-$branch}\\\"; echo \\\"$cmd\\\"; $cmd; }; f\"\n\n  # Track all remote branches that aren't already being tracked;\n  # this is a bit hacky because of the parsing, and we welcome\n  # better code that works using more-specific git commands.\n  track-all-remote-branches = \"!f() { git branch --remotes | grep -v ' -> ' | sed 's/^ \\\\+origin\\\\///' ; }; f\"\n\n  ### reset-* & undo-* ###\n\n  # Reset and undo aliases are ways to move backwards on the commit chain.\n  # In our experience, novice users tend to prefer the wording with \"undo\",\n  # and expert users tend to prefer the wording with \"reset\".\n\n  # Reset commits.\n  reset-commit       = reset --soft HEAD~1\n  reset-commit-hard  = reset --hard HEAD~1\n  reset-commit-hard-clean = !git reset --hard HEAD~1 && git clean -fd\n  reset-to-pristine  = !git reset --hard && git clean -ffdx\n  reset-to-upstream  = \"!git reset --hard \\\"$(git upstream-branch)\\\"\"\n\n  # Undo commits.\n  undo-commit        = reset --soft HEAD~1\n  undo-commit-hard   = reset --hard HEAD~1\n  undo-commit-hard-clean  = !git reset --hard HEAD~1 && git clean -fd\n  undo-to-pristine   = !git reset --hard && git clean -ffdx\n  undo-to-upstream   = \"!git reset --hard \\\"$(git upstream-branch)\\\"\"\n\n  # Nicknames\n  uncommit = reset --soft HEAD~1\n  unadd = reset HEAD\n\n  # Discard changes in a (list of) file(s) in working tree.\n  discard = checkout --\n\n  # Clean a working tree using more powerful options.\n  cleaner = clean -dff\n\n  # Clean a working tree using the most powerful options.\n  cleanest = clean -dffx\n\n  # Clean a working tree using typical options then checkout.\n  cleanout = !git clean -df && git checkout -- .\n\n  # Expunge a file everywhere; this command is typically for a serious problem,\n  # such as accidentally committing a file of sensitive data, such as passwords.\n  # After you use command, you will likely need to force push everything.\n  # See <https://help.github.com/articles/removing-sensitive-data-from-a-repository/>\n  expunge = \"!f() { git filter-branch --force --index-filter \\\"git rm --cached --ignore-unmatch $1\\\" --prune-empty --tag-name-filter \\\"cat\\\" -- --all ; }; f\"\n\n  # Show logs of unreachable commits.\n  # This can be useful, for example, when recovering contents of dropped stashes or reset commits.\n  show-unreachable = \"!git fsck --unreachable | grep commit | cut -d\\\" \\\" -f3 | xargs git log\"\n\n  ### add-* & edit-* - Handle files by kind ###\n\n  # Add all files of the given type\n  add-cached   = \"!git add \\\"$(git ls-files --cached             | sort -u)\\\"\"\n  add-deleted  = \"!git add \\\"$(git ls-files --deleted            | sort -u)\\\"\"\n  add-others   = \"!git add \\\"$(git ls-files --others             | sort -u)\\\"\"\n  add-ignored  = \"!git add \\\"$(git ls-files --ignored            | sort -u)\\\"\"\n  add-killed   = \"!git add \\\"$(git ls-files --killed             | sort -u)\\\"\"\n  add-modified = \"!git add \\\"$(git ls-files --modified           | sort -u)\\\"\"\n  add-stage    = \"!git add \\\"$(git ls-files --stage    | cut -f2 | sort -u)\\\"\"\n  add-unmerged = \"!git add \\\"$(git ls-files --unmerged | cut -f2 | sort -u)\\\"\"\n\n  # Edit all files of the given type\n  edit-cached   = \"!$(git var GIT_EDITOR) \\\"$(git ls-files --cached             | sort -u)\\\"\"\n  edit-deleted  = \"!$(git var GIT_EDITOR) \\\"$(git ls-files --deleted            | sort -u)\\\"\"\n  edit-others   = \"!$(git var GIT_EDITOR) \\\"$(git ls-files --others             | sort -u)\\\"\"\n  edit-ignored  = \"!$(git var GIT_EDITOR) \\\"$(git ls-files --ignored            | sort -u)\\\"\"\n  edit-killed   = \"!$(git var GIT_EDITOR) \\\"$(git ls-files --killed             | sort -u)\\\"\"\n  edit-modified = \"!$(git var GIT_EDITOR) \\\"$(git ls-files --modified           | sort -u)\\\"\"\n  edit-stage    = \"!$(git var GIT_EDITOR) \\\"$(git ls-files --stage    | cut -f2 | sort -u)\\\"\"\n  edit-unmerged = \"!$(git var GIT_EDITOR) \\\"$(git ls-files --unmerged | cut -f2 | sort -u)\\\"\"\n\n  # Ours & Theirs - Easy merging when you know which files you want\n  #\n  # Sometimes during a merge you want to take a file from one side wholesale.\n  #\n  # The following aliases expose the ours and theirs commands which let you\n  # pick a file(s) from the current branch or the merged branch respectively.\n  #\n  #   * git ours - Checkout our version of a file and add it\n  #\n  #   * git theirs - Checkout their version of a file and add it\n  #\n  # N.b. the function is there as hack to get $@ doing\n  # what you would expect it to as a shell user.\n  #\n\n  # Checkout our version of a file and add it.\n  ours   = \"!f() { git checkout --ours   \\\"$@\\\" && git add \\\"$@\\\"; }; f\"\n\n  # Checkout their version of a file and add it.\n  theirs = \"!f() { git checkout --theirs \\\"$@\\\" && git add \\\"$@\\\"; }; f\"\n\n  # Work In Progress - Easy tracking of what you're doing\n  #\n  # From <https://gist.github.com/492227> and VonC on stackoverflow.\n  #\n  # This enables a quick way to add all new and modified files to the index,\n  # while cleaning the index from the files removed from the working tree;\n  # this cleaning will facilitate a rebase, because there won't be any conflict\n  # due to an \"unclean\" working directory (not in sync with the index).\n\n  # Add files using the message \"wip\"\n  wip = \"!git add --all; git ls-files --deleted -z | xargs -r -0 git rm; git commit --message=wip\"\n\n  # Restore the deleted files to the working tree.\n  unwip = \"!git log --max-count=1 | grep -q -c wip && git reset HEAD~1\"\n\n  # Assume & Unassume\n  #\n  # Sometimes we want to change a file in a repo, but never check in your edits.\n  # We can't use .gitignore because the file is tracked. We use update-index.\n  #\n  # If you interact with big corporate projects, such as projects in Subversion,\n  # then you might run into the need to ignore certain files which are under the\n  # Subversion control, yet you need to modify them but not commit.\n  #\n  # The assume-unchanged flag comes to the rescue.\n  #\n  # Suppose we want to edit passwords.txt and for gosh sake never check it in:\n  #\n  #     $ git status\n  #     modified passwords.txt\n  #     modified foo.txt\n  #\n  #     $ git assume passwords.txt\n  #     $ git status\n  #     modified foo.txt\n  #\n  #     $ git assumed\n  #     passwords.txt\n  #\n  #     $ git unassume passwords.txt\n  #     $ git status\n  #     modified passwords.txt\n  #     modified foo.txt\n  #\n  # Thanks <http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/>\n  # Thanks <http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/>\n  #\n  assume   = update-index --assume-unchanged\n  unassume = update-index --no-assume-unchanged\n  assume-all = \"!git status --short | awk '{ print $2 }' | xargs -r git assume\"\n  unassume-all = \"!git assumed | xargs -r git update-index --no-assume-unchanged\"\n  assumed  = \"!git ls-files -v | grep ^h | cut -c 3-\"\n\n  ### hew-* ###\n\n  # Delete all branches that have been merged into a commit\n  hew = \"!git hew-local \\\"$@\\\" && git hew-remote \\\"$@\\\" #\"\n\n  # Delete all branches that have been merged into a commit (dry run)\n  hew-dry-run = \"!git hew-local-dry-run \\\"$@\\\" && git hew-remote-dry-run \\\"$@\\\" #\"\n\n  # Delete all local branches that have been merged into a commit\n  hew-local = \"!f() { \\\n      git hew-local-dry-run \\\"$@\\\" | \\\n      xargs git branch --delete ; \\\n  }; f \\\"$@\\\"\"\n\n  # Delete all local branches that have been merged into a commit  (dry run)\n  hew-local-dry-run = \"!f() { \\\n      commit=${1:-$(git current-branch)}; \\\n      git branch --merged \\\"$commit\\\" | \\\n      grep -v \\\"^[[:space:]]*\\\\*[[:space:]]*$commit$\\\" ; \\\n  }; f \\\"$@\\\"\"\n\n  # Delete all remote branches that have been merged into a commit\n  hew-remote = \"!f() { \\\n      git hew-remote-dry-run \\\"$@\\\" | \\\n      xargs -I% git push origin :% 2>&1 ; \\\n  }; f \\\"$@\\\"\"\n\n  # Delete all remote branches that have been merged into a commit (dry run)\n  hew-remote-dry-run = \"!f() { \\\n      commit=${1:-$(git upstream-branch)}; \\\n      git branch --remotes --merged \\\"$commit\\\" | \\\n      grep -v \\\"^[[:space:]]*origin/$commit$\\\" | \\\n      sed 's#[[:space:]]*origin/##' ; \\\n  }; f \\\"$@\\\"\"\n\n  ### publish & unpublish ###\n\n  # Publish the current branch by pushing it to the remote \"origin\",\n  # and setting the current branch to track the upstream branch.\n  publish = \"!f() { git push --set-upstream \\\"${1:-origin}\\\" \\\"$(git current-branch)\\\"; }; f\"\n\n  # Unpublish the current branch by deleting the\n  # remote version of the current branch.\n  unpublish = \"!f() { git push \\\"${1:-origin}\\\" :\\\"$(git current-branch)\\\"; }; f\"\n\n  ### inbound & outbound ###\n\n  # Show incoming changes with upstream.\n  inbound = !git remote update --prune; git log ..@{upstream}\n\n  # Show outgoing changes with upstream.\n  outbound = log @{upstream}..\n\n  # Delete a branch name, then create the same branch name based on main -\n  # useful if you have, for example, a development branch and main branch\n  # and they go out of sync, and you want to nuke the development branch.\n  #\n  # Calls the `publish` and `unpublish` aliases.\n  #\n  reincarnate = \"!f() { [ $# -gt 0 ] && git checkout \\\"$1\\\" && git unpublish && git checkout main && git branch --delete --force \\\"$1\\\" && git checkout -b \\\"$1\\\" && git publish; }; f\"\n\n  # Friendly wording is easier to remember.\n  # Thanks to http://gggritso.com/human-git-aliases\n  aliases = \"!git config --get-regexp '^alias\\\\.' | cut -c 7- | sed 's/ / = /'\"\n  branches = branch -a\n  tags = tag -n1 --list\n  stashes = stash list\n\n\n  ### Shell scripting aliases ###\n\n  # Show the top level directory name\n  top = rev-parse --show-toplevel\n\n  # Show the default branch name\n  default-branch = config init.defaultBranch\n\n  # Show the current branch name\n  # Newer versions of git can do: git branch --show-current\n  current-branch = rev-parse --abbrev-ref HEAD\n\n  # Show the upstream branch name\n  upstream-branch = \"!git for-each-ref --format='%(upstream:short)' \\\"$(git symbolic-ref -q HEAD)\\\"\"\n  # Another, shorter and simpler, way\n  upb = rev-parse --abbrev-ref \"@{upstream}\"\n\n  # Execute shell scripts. Git always runs scripts in the top directory.\n  # For example \"git exec pwd\" will always show you the top directory.\n  exec = ! exec\n\n\n  ### MAINTENANCE ALIASES ###\n\n  # pruner: prune everything that is unreachable now.\n  #\n  # This command takes a long time to run, perhaps even overnight.\n  #\n  # This is useful for removing unreachable objects from all places.\n  #\n  # By [CodeGnome](http://www.codegnome.com/)\n  #\n  pruner = \"!git prune --expire=now; git reflog expire --expire-unreachable=now --rewrite --all\"\n\n  # repacker: repack a repo the way Linus recommends.\n  #\n  # This command takes a long time to run, perhaps even overnight.\n  #\n  # It does the equivalent of \"git gc --aggressive\"\n  # but done *properly*,  which is to do something like:\n  #\n  #     git repack -a -d --depth=250 --window=250\n  #\n  # The depth setting is about how deep the delta chains can be;\n  # make them longer for old history - it's worth the space overhead.\n  #\n  # The window setting is about how big an object window we want\n  # each delta candidate to scan.\n  #\n  # And here, you might well want to add the \"-f\" flag (which is\n  # the \"drop all old deltas\", since you now are actually trying\n  # to make sure that this one actually finds good candidates.\n  #\n  # And then it's going to take forever and a day (ie a \"do it overnight\"\n  # thing). But the end result is that everybody downstream from that\n  # repository will get much better packs, without having to spend any effort\n  # on it themselves.\n  #\n  # http://metalinguist.wordpress.com/2007/12/06/the-woes-of-git-gc-aggressive-and-how-git-deltas-work/\n  #\n  # We also add the --window-memory limit of 1 gig, which helps protect\n  # us from a window that has very large objects such as binary blobs.\n  #\n  repacker = repack -a -d -f --depth=300 --window=300 --window-memory=1g\n\n  # Do everything we can to optimize the repository.\n  #\n  # This command takes a long time to run, perhaps even overnight.\n  #\n  # Currently, this command simply calls `git pruner` and `git repacker`,\n  # then one step (that may be unnecessary) calling `git prune-packed`.\n  #\n  optimizer = !git pruner; git repacker; git prune-packed\n\n\n  ### ADVANCED ALIASES ###\n\n  # Search for a given string in all patches and print commit messages.\n  #\n  # Example: search for any commit that adds or removes string \"foobar\"\n  #\n  #     git search-commits foobar\n  #\n  # Example: search commits for string \"foobar\" in directory src/lib\n  #\n  #     git search-commits foobar src/lib\n  #\n  # Example: search commits for \"foobar\", print full diff of commit with 1 line context\n  #\n  #     git search-commits foobar --pickaxe-all -U1 src/lib\n  #\n  # Posted by Mikko Rantalainen on StackOverflow.\n  #\n  search-commits = \"!f() { query=\\\"$1\\\"; shift; git log -S\\\"$query\\\" \\\"$@\\\"; }; f \\\"$@\\\"\"\n\n  # A 'debug' alias to help debugging builtins: when debugging builtins,\n  # we use gdb to analyze the runtime state. However, we have to disable\n  # the pager, and often we have to call the program with arguments.\n  # If the program to debug is a builtin, we use this alias.\n  debug = \"!GIT_PAGER='' gdb --args git\"\n\n  # git diff-chunk - Get the diff of one chunk.\n  #\n  # Suppose we want to see just the differences of one chunk,\n  # such as one function, in one file, in two different commits.\n  #\n  # This alias creates two temp files which contain only the chunk,\n  # then does a typical git diff.\n  #\n  # Syntax:\n  #\n  #     git diff-chunk <old-rev> <new-rev> <path> <chunk pattern>\n  #\n  diff-chunk = \"!f() { \\\n    git show \\\"$1:$3\\\" | sed -n \\\"/^[^ \\t].*$4(/,/^}/p\\\" > .tmp1 ; \\\n    git show \\\"$2:$3\\\" | sed -n \\\"/^[^ \\t].*$4(/,/^}/p\\\" > .tmp2 ; \\\n    git diff --no-index .tmp1 .tmp2 ; \\\n  }; f\"\n\n  # Calling \"interdiff\" between commits: if upstream applied a\n  # slightly modified patch, and we want to see the modifications,\n  # we use the program interdiff of the patchutils package.\n  intercommit = !sh -c 'git show \"$1\" > .git/commit1 && git show \"$2\" > .git/commit2 && interdiff .git/commit[12] | less -FRS' -\n\n  # git remotes-push - For each remote branch, push it.\n  remotes-push = !git remote | xargs -I% -n1 git push %\n\n  # git remotes-prune - For each remote branch, prune it.\n  # There's no way to tell `git remote update` to prune stale branches,\n  # and `git remote prune` does not currently understand `--all`.\n  # So this shell command iterates on each remote, and prunes it.\n  remotes-prune = !git remote | xargs -n 1 git remote prune\n\n  # Thanks to cody cutrer\n  cherry-pick-merge = \"!sh -c 'git cherry-pick --no-commit --mainline 1 $0 && \\\n    git log -1 --pretty=%P $0 | cut -b 42- > .git/MERGE_HEAD && \\\n    git commit --verbose'\"\n\n  # Thanks to jtolds on stackoverflow\n  remote-ref = \"!\\\n    local_ref=\\\"$(git symbolic-ref HEAD)\\\"; \\\n    local_name=\\\"${local_ref##refs/heads/}\\\"; \\\n    remote=\\\"$(git config branch.\\\"#local_name\\\".remote || echo origin)\\\"; \\\n    remote_ref=\\\"$(git config branch.\\\"$local_name\\\".merge)\\\"; \\\n    remote_name=\\\"${remote_ref##refs/heads/}\\\"; \\\n    echo \\\"remotes/$remote/$remote_name\\\" #\"\n\n  # Thanks to jtolds on stackoverflow\n  rebase-recent = \"!git rebase --interactive \\\"$(git remote-ref)\\\"\"\n\n  # Use graphviz for display.\n  # This produces output that can be displayed using dotty, for example:\n  #   $ git graphviz HEAD~100..HEAD~60 | dotty /dev/stdin\n  #   $ git graphviz --first-parent main | dotty /dev/stdin\n  graphviz = \"!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \\\"$@\\\" | sed 's/[0-9a-f][0-9a-f]*/\\\"&\\\"/g' ; echo '}'; }; f\"\n\n  # Serve the local directory by starting a git server daemon, so others can pull/push from my machine\n  serve = \"-c daemon.receivepack=true daemon --base-path=. --export-all --reuseaddr --verbose\"\n\n  ##########################################################################\n  ### Topic branch aliases\n  ##########################################################################\n\n  # Topic branch aliases which are starting points for your own workflow.\n  #\n  # Lots of people have lots of ideas about how to do various git flows.\n  #\n  # Some people like to use a topic branch for a new feature, or a\n  # hotfix patch, or refactoring work, or some spike research, etc.\n  #\n  # Start work on a new topic branch, which creates your branch:\n  #\n  #     $ git topic-begin add-feature-foo\n  #\n  # Do work, and optionally sync our changes, which pushes and pulls:\n  #\n  #     $ git topic-sync\n  #\n  # Stop work on a topic branch, which deletes your branch:\n  #\n  #     $ git topic-end\n  #\n  # If you want to move your branch a.k.a. rename it:\n  #\n  #     $ git topic-rename\n  #\n  # Ideas for your own alias customizations:\n  #\n  #   * Notify your team, such as by sending an email, posting to chat, etc.\n  #\n  #   * Trigger testing of the new topic branch to ensure all tests succeed.\n  #\n  #   * Update your project management software with the new topic name.\n  #\n  # Customize these aliases as you like for your own workflow.\n\n  # Provide the name of the topic base branch, such as \"main\".\n  #\n  # When we create a new topic branch, we base it on the topic base branch.\n  #\n  # Many projects use the topic base branch name \"main\". Some projects use\n  # use \"trunk\", \"develop\", \"deploy\", \"integrate\", \"release\", \"green\", etc.\n  #\n  # The topic base branch name is \"main\" by default. You can customize\n  # the name for your local repo, or your own user's global configuration,\n  # or your system configuration, by using `git config` such as:\n  #\n  #    $ git config --local init.topicBaseBranchName \"foo\"\n  #\n  #    $ git config --global init.topicBaseBranchName \"foo\"\n  #\n  #    $ git config --system init.topicBaseBranchName \"foo\"\n  #\n  # Thanks to https://github.com/gwjo\n\n  topic-base-branch = \"!git config --get init.topicBaseBranchName || git default-branch\"\n\n  # Start a topic branch.\n  #\n  # Example:\n  #\n  #     git topic-begin add-feature-foo\n  #\n  # We use this alias to begin work on a new feature,\n  # new task, new fix, new refactor, new optimization, etc.\n  #\n  # Customize this alias as you like for your own workflow.\n  #\n  # Our workflow does these steps:\n  #\n  #   1. Update the base branch.\n  #   2. Create a new branch with your topic name, based on the base branch.\n  #   3. Push the topic branch, so our team members can see the new branch.\n  #\n  # If you use a sharing site such a GitHub, and use typical settings,\n  # then this implementation makes your branch visible to collaborators.\n  #\n  # Many teams share branches before they are fully ready, to help\n  # the team provide feedback on the work-in-progress, and also to\n  # run any automatic tests to verify the branch runs successfully.\n\n  topic-begin = \"!f(){ \\\n    new_branch=\\\"$1\\\"; \\\n    old_branch=\\\"$(git topic-base-branch)\\\"; \\\n    git checkout \\\"$old_branch\\\"; \\\n    git pull --ff-only; \\\n    git checkout -b \\\"$new_branch\\\" \\\"$old_branch\\\"; \\\n    git push --set-upstream origin \\\"$new_branch\\\"; \\\n  };f\"\n\n  # Stop a topic branch; this must be the current branch.\n  #\n  # Example:\n  #\n  #     git topic-end\n  #\n  # We use this alias to complete work on a new feature,\n  # new task, new fix, new refactor, new optimization, etc.\n  #\n  # Customize this alias as you like for your own workflow.\n  #\n  # Our workflow does these steps:\n  #\n  #   1. Push the topic branch.\n  #   2. Delete the topic branch locally.\n  #   3. Delete the topic branch remotely.\n  #\n  # If you use a sharing site such a GitHub, and use typical settings,\n  # then this implementation deletes your branch for the site.\n  #\n  # Many teams choose to delete topic branches when they are finished,\n  # to keep the repositories clean and with a smaller number of branches.\n  #\n  # If git says \"unable to push to unqualified destination\" then it means\n  # that the remote branch doesn't exist, so git is unable to delete it.\n  # That's fine; it means someone else has already deleted the branch.\n  # To synchronize your branch list, use \"git fetch --prune\".\n\n  topic-end = \"!f(){ \\\n    new_branch=\\\"$(git current-branch)\\\"; \\\n    old_branch=\\\"$(git topic-base-branch)\\\"; \\\n    if [ \\\"$new_branch\\\" = \\\"$old_branch\\\" ]; then \\\n      printf \\\"You are asking to do git topic-end,\\n\\\"; \\\n      printf \\\"but you are not on a new topic branch;\\n\\\"; \\\n      printf \\\"you are on the base topic branch: %s.\\n\\\" \\\"$old_branch\\\"; \\\n      printf \\\"Please checkout the topic branch that you want,\\n\\\"; \\\n      printf \\\"then retry the git topic-end command.\\n\\\"; \\\n    else \\\n      git push; \\\n      git checkout \\\"$old_branch\\\"; \\\n      git branch --delete \\\"$new_branch\\\"; \\\n      git push origin \\\":$new_branch\\\"; \\\n    fi; \\\n  };f\"\n\n  # Update the current topic branch by synchronizing changes.\n  #\n  # Example:\n  #\n  #     git topic-sync\n  #\n  # This implementation does these:\n  #\n  #   1. Pull any changes.\n  #   2. Push any changes.\n  #\n  # If you use any kind of testing framework, or test driven development,\n  # then it can be wise to test your topic immediately after running this,\n  # to ensure that any available updates are successfully integrated.\n  #\n  # Customize this alias as you like for your own workflow.\n\n  topic-sync = \"!f(){ \\\n    new_branch=\\\"$(git current-branch)\\\"; \\\n    old_branch=\\\"$(git topic-base-branch)\\\"; \\\n    if [ \\\"$new_branch\\\" = \\\"$old_branch\\\" ]; then \\\n      printf \\\"You are asking to do git topic-sync,\\n\\\"; \\\n      printf \\\"but you are not on a new topic branch;\\n\\\"; \\\n      printf \\\"you are on the base topic branch: %s.\\n\\\" \\\"$old_branch\\\"; \\\n      printf \\\"Please checkout the topic branch that you want,\\n\\\"; \\\n      printf \\\"then retry the git topic-sync command.\\n\\\"; \\\n    else \\\n      git pull; \\\n      git push; \\\n    fi; \\\n  };f\"\n\n  # Move the current topic branch, a.k.a. rename it.\n  #\n  # Example:\n  #\n  #     git topic-move hello\n  #\n  # This implementation does these:\n  #\n  #   1. Move the local branch.\n  #   2. Move the remote branch by pushing to origin.\n  #\n  # Customize this alias as you like for your own workflow.\n\n  topic-move = \"!f(){ \\\n    new_branch=\\\"$1\\\"; \\\n    old_branch=\\\"$(git current-branch)\\\"; \\\n    git branch --move \\\"$old_branch\\\" \\\"$new_branch\\\"; \\\n    git push --set-upstream origin \\\":$old_branch\\\" \\\"$new_branch\\\"; \\\n  };f\"\n\n\n  ########################################################################\n  ### Integration aliases\n  ########################################################################\n\n  ##\n  # Git aliases suitable for particular software integrations and tooling,\n  # such as other version control system e.g. CVS, Subversion, etc.\n  ##\n\n  ### CVS ALIAS ###\n\n  cvs-i = cvsimport -k -a\n  cvs-e = cvsexportcommit -u -p\n\n  ### GitK ###\n\n  # show conflicting merge in gitk:\n  gitk-conflict = !gitk --left-right HEAD...MERGE_HEAD\n\n  # show full history in gitk (including \"deleted\" branches and stashes)\n  gitk-history-all = \"!gitk --all \\\"$(git fsck | awk '/dangling commit/ {print $3}')\\\"\"\n\n  ### Subversion ###\n\n  svn-b = svn branch\n  svn-m = merge --squash\n  svn-c = svn dcommit\n  svn-cp = !GIT_EDITOR='sed -i /^git-svn-id:/d' git cherry-pick --edit\n"
        },
        {
          "name": "shellcheck.sh",
          "type": "blob",
          "size": 0.4189453125,
          "content": "#! /usr/bin/env bash\nset -eu\n\nshellcheck --version\n\necho \"Checking aliases...\"\n\ngit config --file=gitalias.txt --null --get-regexp '^alias\\.' '^!' |\nwhile read -r -d $'\\n' key\ndo\n\tread -r -d $'\\0' value\n\tprintf \"Checking '%s'...\\n\"  \"${key:6}\"\n\tshellcheck --exclude SC2094,SC2119,SC2120 --shell=sh --color=always - <<< \"${value:1}\"\n\tprintf \"Successfully checked '%s'.\\n\" \"${key:6}\"\ndone\n\necho \"Successfully checked all aliases.\"\n"
        }
      ]
    }
  ]
}