{
  "metadata": {
    "timestamp": 1736568718705,
    "page": 822,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rasa/vmware-tools-patches",
      "stars": 1195,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.8583984375,
          "content": "# EditorConfig (is awesome): https://editorconfig.github.io\n\n# * top-most EditorConfig file\nroot = true\n\n# default style settings\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n# Batch files require CRLF newlines\n[*.{bat,cmd,BAT,CMD}]\nend_of_line = crlf\n\n# MSVC project files require CRLF newlines\n[*.{dsp,dsw,DSP,DSW}]\nend_of_line = crlf\n\n# Google JavaScript Style Guide (https://google.github.io/styleguide/javascriptguide.xml)\n[*.js]\nmax_line_length = 80\n\n[*.json]\nindent_size = 4\n\n# Makefiles require tab indentation\n[*.{mak,mk}]\nindent_style = tab\n[Makefile,Makefile.*,makefile,makefile.*,GNUmakefile]\nindent_style = tab\n\n[*.md]\ntrim_trailing_whitespace = false\n\n# Google Python Style Guide (https://google.github.io/styleguide/pyguide.html)\n[*.py]\nindent_size = 4\nmax_line_length = 80\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.14453125,
          "content": "# Detect text files automatically\n* text=auto eol=lf\n\n# Force CRLF line endings on these files\n*.bat text eol=crlf\n*.cmd text eol=crlf\n*.aspx -text\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1162109375,
          "content": "*.bak\n*.orig\n*.rej\n*.swp\n*.~*\n*~\n.DS_Store*\nnohup.out\nVMwareTools-*.tar.gz\nvmware-tools-distrib/\nvmware-tools-patches/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.0302734375,
          "content": "vmware-tools-patches changelog\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.6708984375,
          "content": "# Contributing\n\nThanks! There are plenty of ways you can help!\n\nPlease take a moment to review this document in order to make the contribution\nprocess easy and effective for everyone involved.\n\nFollowing these guidelines helps to communicate that you respect the time of\nthe developers managing and developing this open source project. In return,\nthey should reciprocate that respect in addressing your issue or assessing\npatches and features.\n\n## Using the issue tracker\n\nThe [issue tracker](/issues) is\nthe preferred channel for [bug reports](#bug-reports), [features requests](#feature-requests)\nand [submitting pull requests](#pull-requests).\n\n## Bug reports\n\nA bug is a _demonstrable problem_ that is caused by the code in the repository.\nGood bug reports are extremely helpful - thank you!\n\nGuidelines for bug reports:\n\n1. **Use the GitHub issue search** &mdash; check if the issue has already been\n   reported.\n\n2. **Check if the issue has been fixed** &mdash; try to reproduce it using the\n   latest `master` or development branch in the repository.\n\n3. **Isolate the problem** &mdash; ideally create a reduced test\n   case] and a live example.\n\nA good bug report shouldn't leave others needing to chase you up for more\ninformation. Please try to be as detailed as possible in your report. What is\nyour environment? What steps will reproduce the issue? What browser(s) and OS\nexperience the problem? What would you expect to be the outcome? All these\ndetails will help people to fix any potential bugs.\n\nExample:\n\n> Short and descriptive example bug report title\n>\n> A summary of the issue and the browser/OS environment in which it occurs. If\n> suitable, include the steps required to reproduce the bug.\n>\n> 1. This is the first step\n> 2. This is the second step\n> 3. Further steps, etc.\n>\n> `<url>` - a link to the reduced test case\n>\n> Any other information you want to share that is relevant to the issue being\n> reported. This might include the lines of code that you have identified as\n> causing the bug, and potential solutions (and your opinions on their\n> merits).\n\n## Feature requests\n\nFeature requests are welcome. But take a moment to find out whether your idea\nfits with the scope and aims of the project. It's up to *you* to make a strong\ncase to convince the project's developers of the merits of this feature. Please\nprovide as much detail and context as possible.\n\n## Pull requests\n\nGood pull requests - patches, improvements, new features - are a fantastic\nhelp. They should remain focused in scope and avoid containing unrelated\ncommits.\n\n**Please ask first** before embarking on any significant pull request (e.g.\nimplementing features, refactoring code, porting to a different language),\notherwise you risk spending a lot of time working on something that the\nproject's developers might not want to merge into the project.\n\nPlease adhere to the coding conventions used throughout a project (indentation,\naccurate comments, etc.) and any other requirements (such as test coverage).\n\nAdhering to the following process is the best way to get your work\nincluded in the project:\n\n1. [Fork](https://help.github.com/articles/fork-a-repo) the project, clone your\n   fork, and configure the remotes:\n\n   ```bash\n   # Clone your fork of the repo into the current directory\n   git clone https://github.com/<your-username>/vmware-tools-patches.git\n   # Navigate to the newly cloned directory\n   cd vmware-tools-patches\n   # Assign the original repo to a remote called \"upstream\"\n   git remote add upstream https://github.com/rasa/vmware-tools-patches.git\n   ```\n\n2. If you cloned a while ago, get the latest changes from upstream:\n\n   ```bash\n   git checkout master\n   git pull upstream master\n   ```\n\n3. Create a new topic branch (off the main project development branch) to\n   contain your feature, change, or fix:\n\n   ```bash\n   git checkout -b <topic-branch-name>\n   ```\n\n4. Commit your changes in logical chunks. Please adhere to these [git commit\n   message guidelines](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n   or your code is unlikely be merged into the main project. Use Git's\n   [interactive rebase](https://help.github.com/articles/about-git-rebase)\n   feature to tidy up your commits before making them public.\n\n5. Locally merge (or rebase) the upstream development branch into your topic branch:\n\n   ```bash\n   git pull [--rebase] upstream master\n   ```\n\n6. Push your topic branch up to your fork:\n\n   ```bash\n   git push origin <topic-branch-name>\n   ```\n\n7. [Open a Pull Request](https://help.github.com/articles/using-pull-requests/)\n    with a clear title and description.\n\n**IMPORTANT**: By submitting a patch, you agree to allow the project owners to\nlicense your work under the terms of the [MIT License](LICENSE).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0595703125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013-2015 Ross Smith II\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.0322265625,
          "content": "all:\n\nclean:\n\trm downloads/*.tar\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.3564453125,
          "content": "# VMware Tools Patches [![Flattr this][flatter_png]][flatter]\n\nPatch VMware Tools source code for a variety of VMware Tools and kernel versions.\n\n## Quickest Start (The easiest way)\n\n```bash\n$ git clone https://github.com/rasa/vmware-tools-patches.git\n$ cd vmware-tools-patches\n$ ./patched-open-vm-tools.sh\n```\nThe above script has been provided which generally should always work, automatically invoking commands described in the following section \"Quick Start\"\n\nTo update and re-patch later, remove the `vmware-tools-patches` subdirectory with the previous download and re-run the script.\n\n## Quick Start\n\nTo build VMware Tools, do the following:\n\n1. Checkout the repository:\n\t```bash\n\t$ git clone https://github.com/rasa/vmware-tools-patches.git\n\t```\n\n2. *(Optional)* Copy your patch(es) into the appropriate directory in the `patches` directory. Patches must end in `.patch`, or `.diff` and be [properly formatted](#required-patch-format). For example:\n\t```bash\n\t$ cp great-new.patch vmware-tools-patches/patches/vmhgfs\n\t```\n\n3. Copy or download the version of VMware Tools you wish to use into the `vmware-tools-patches` folder. One way to do this is using [download-tools.sh](../../blob/master/download-tools.sh) and pass it the associated VMWare Fusion version number:\n\t```bash\n\t$ cd vmware-tools-patches\n\t$ ./download-tools.sh latest\n\t```\n\n   It is strongly suggested to use the [latest version](#tested-vmware-tools-versions) of VMware Tools.\n\n   VMware Tools is also included inside the `linux.iso` file that is shipped with VMware Fusion, Player, and Workstation. \n\n4. Untar the tarball, and apply the patches:\n\t```bash\n\t$ cd vmware-tools-patches\n\t$ ./untar-and-patch.sh\n\t```\n\n5. Run the `vmware-install.pl` installer to install VMware Tools:\n\t```bash\n\t$ ./compile.sh\n\t```\n\n## Tested Kernels\n\nWith the patches applied, at least one version of VMware Tools listed [below](#tested-vmware-tools-versions), compiles successfully with the following Linux kernels:\n\n* [4.0.x](http://kernelnewbies.org/Linux_4.0)\n* [3.19.x](http://kernelnewbies.org/Linux_3.19)\n* [3.18.x](http://kernelnewbies.org/Linux_3.18)\n* [3.17.x](http://kernelnewbies.org/Linux_3.17)\n* [3.16.x](http://kernelnewbies.org/Linux_3.16)\n* [3.13.x](http://kernelnewbies.org/Linux_3.13)\n* [3.12.x](http://kernelnewbies.org/Linux_3.12)\n* [3.11.x](http://kernelnewbies.org/Linux_3.11)\n* [3.8.x](http://kernelnewbies.org/Linux_3.8)\n* [3.5.x](http://kernelnewbies.org/Linux_3.5)\n* [2.6.32](http://kernelnewbies.org/Linux_2.6.32)\n\nWe have not received any reports of the patches failing on the following kernels, so presumably they apply successfully:\n\n* [3.15.x](http://kernelnewbies.org/Linux_3.15)\n* [3.14.x](http://kernelnewbies.org/Linux_3.14)\n* [3.10.x](http://kernelnewbies.org/Linux_3.10)\n* [3.9.x](http://kernelnewbies.org/Linux_3.9)\n* [3.7.x](http://kernelnewbies.org/Linux_3.7) and earlier\n\n## Tested VMware Tools Versions\n\nThe included patches have been tested with the following versions of VMware Tools:\n\n* [VMwareTools-10.0.10-4301679.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.0/4352717/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 8.5.0/1/2 & Workstation 12.5.0/1/2)\n* [VMwareTools-10.0.6-3595377.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.1.1/3771013/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 8.1.1 & Workstation 12.1.1)\n* [VMwareTools-10.0.5-3228253.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.1.0/3272237/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 8.1.0 & Workstation 12.1.0)\n* [VMwareTools-10.0.1-3160059.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.0.2/3164312/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 8.0.2 & Workstation 12.0.1)\n* [VMwareTools-10.0.0-2977863.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.0.1/3094680/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 8.0.1)\n* [VMwareTools-10.0.0-2977863.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.0.0/2985594/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 8.0.0 & Workstation 12.0.0)\n* [VMwareTools-9.9.4-3193940.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/7.1.3/3204469/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 7.1.3 & Workstation 11.1.3)\n* [VMwareTools-9.9.3-2759765.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/7.1.2/2779224/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 7.1.2 & Workstation 11.1.2)\n* [VMwareTools-9.9.2-2496486.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/7.1.1/2498930/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 7.1.1 & Workstation 11.1.0)\n* [VMwareTools-9.9.0-2304977.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/7.1.0/2314774/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 7.1.0 & Workstation 11.0.0)\n* [VMwareTools-9.8.4-2202052.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/7.0.1/2235595/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 7.0.1)\n* [VMwareTools-9.8.3-2075148.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/7.0.0/2075534/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 7.0.0)\n* [VMwareTools-9.6.6-2649738.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/6.0.6/2684343/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 6.0.6 & Workstation 10.0.5/6/7)\n* [VMwareTools-9.6.2-1688356.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/6.0.3/1747349/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 6.0.3/4/5 & Workstation 10.0.2/3/4)\n* [VMwareTools-9.6.1-1378637.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/6.0.2/1398658/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 6.0.2 & Workstation 10.0.1)\n* [VMwareTools-9.6.0-1294478.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/6.0.1/1331545/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 6.0.0/1 & Workstation 10.0.0)\n* [VMwareTools-9.2.4-1398046.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/5.0.5/1945692/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 5.0.5 & Workstation 9.0.3)\n* [VMwareTools-9.2.3-1031360.tar.gz](https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/5.0.4/1435862/packages/com.vmware.fusion.tools.linux.zip.tar) (VMware Fusion 5.0.4 & Workstation 9.0.2)\n\n## Encountering Failures\n\nIf one or more patches do not apply successfully, you may get an error during compilation, such as\n\n````\nvmhgfs-only/link.c:186:10: error: implicit declaration of function ‘vfs_readlink’ [-Werror=implicit-function-declaration]\n````\n\nThis indicates the `vmhgfs` kernel module failed to build and was not installed. That may be acceptable, as VMware Tools still installed successfully, but without the \"shared folder\" functionality provided by the `vmhgfs` module.\n\n## Required Patch Format\n\nPlease note your patches must contain only one directory name in them. For example, the following patches will work:\n\n````\n+--- vmhgfs-only/link.c.orig\t2014-04-23 10:11:34.891106441 +0100\n++++ vmhgfs-only/link.c\t2014-04-23 00:49:03.000000000 +0100\n````\nor\n````\n+--- vmhgfs-only.orig/link.c\t2014-04-23 10:11:34.891106441 +0100\n++++ vmhgfs-only/link.c\t2014-04-23 00:49:03.000000000 +0100\n````\nThe following patches will not work:\n\n````\n+--- link.c.orig\t2014-04-23 10:11:34.891106441 +0100\n++++ link.c\t2014-04-23 00:49:03.000000000 +0100\n````\nor\n````\n+--- path/to/vmhgfs-only/link.c.orig\t2014-04-23 10:11:34.891106441 +0100\n++++ path/to/vmhgfs-only/link.c\t2014-04-23 00:49:03.000000000 +0100\n````\n\n## Dependencies\n\nIf you use [download-tools.sh](../../blob/master/download-tools.sh), to download a VMware Tools file, the script will need the following installed:\n\n* sevenzip or sudo rights\n* unzip\n* wget\n* zip\n\nIf `apt-get` is installed on your system, the following packages will be installed when you first run [compile.sh](../../blob/master/compile.sh) or [untar-and-patch-and-compile.sh.sh](../../blob/master/untar-and-patch-and-compile.sh.sh):\n\n* linux-headers-$(uname -r)\n* build-essential\n* dkms\n* patch\n* perl\n* psmisc\n\nIf `yum` is installed on your system, the following packages will be installed when you first run [compile.sh](../../blob/master/compile.sh) or [untar-and-patch-and-compile.sh.sh](../../blob/master/untar-and-patch-and-compile.sh.sh):\n\n* gcc\n* glibc-headers \n* kernel-devel\n* kernel-headers \n* make \n* perl\n\nIf neither `apt-get` or `yum` is installed, you will need to install these (or equivalent) packages manually, before starting.\n\n## Contributing\n\nTo contribute to this project, please see [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## Bugs\n\nTo view existing bugs, or report a new bug, please see [issues](../../issues).\n\n## Changelog\n\nTo view the version history for this project, please see [CHANGELOG.md](CHANGELOG.md).\n\n## License\n\nThis project is [MIT licensed](LICENSE).\n\n## Contact\n\nThis project was created and is maintained by [Ross Smith II][] [![endorse][endorse_png]][endorse]\n\nFeedback, suggestions, and enhancements are welcome.\n\n[Ross Smith II]: mailto:ross@smithii.com \"ross@smithii.com\"\n[flatter]: https://flattr.com/submit/auto?user_id=rasa&url=https%3A%2F%2Fgithub.com%2Frasa%2Fvmware-tools-patches\n[flatter_png]: http://button.flattr.com/flattr-badge-large.png \"Flattr this\"\n[endorse]: https://coderwall.com/rasa\n[endorse_png]: https://api.coderwall.com/rasa/endorsecount.png \"endorse\"\n"
        },
        {
          "name": "compile-pre-10.2.1.sh",
          "type": "blob",
          "size": 1.0830078125,
          "content": "#!/usr/bin/env bash\n\n# compile and install VMware Tools\n\nreadonly SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\nif [[ ! -d vmware-tools-distrib ]]; then\n  echo $0: Error: Directory not found: vmware-tools-distrib >&2\n  exit 3\nfi\n\nif hash vmware-uninstall-tools.pl >/dev/null 2>&1; then\n  sudo vmware-uninstall-tools.pl\nfi\n\n\nVMWARE_INSTALL_OPTIONS=\"--clobber-kernel-modules=pvscsi,vmblock,vmci,vmhgfs,vmmemctl,vmsync,vmxnet,vmxnet3,vsock\"\n\nif [[ -n \"$1\" ]]; then\n\tVMWARE_INSTALL_OPTIONS=\"$1\"\nfi\n\npushd vmware-tools-distrib >/dev/null\n\nif hash systemctl >/dev/null 2>&1; then\n  echo \"Creating empty init dirs for backwards compatibility\"\n  for x in {0..6}; do mkdir -p /etc/init.d/rc${x}.d; done\n  sudo cp $SCRIPT_DIR/patches/vmware-tools.service /etc/systemd/system/\n  sudo systemctl enable vmware-tools.service\n  echo \"Added and enabled VMware Tools systemd service\"\nfi\n\nif sudo ./vmware-install.pl --help 2>&1 | grep -q 'force-install'; then\n    VMWARE_INSTALL_OPTIONS=\"--force-install ${VMWARE_INSTALL_OPTIONS}\"\nfi\n\nsudo ./vmware-install.pl --default ${VMWARE_INSTALL_OPTIONS}\n\npopd >/dev/null"
        },
        {
          "name": "compile.sh",
          "type": "blob",
          "size": 0.98828125,
          "content": "#!/usr/bin/env bash\n\n# compile and install VMware Tools\n\nreadonly SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\nif [[ ! -d vmware-tools-distrib ]]; then\n  echo $0: Error: Directory not found: vmware-tools-distrib >&2\n  exit 3\nfi\n\nif hash vmware-uninstall-tools.pl >/dev/null 2>&1; then\n  sudo vmware-uninstall-tools.pl\nfi\n\nif [[ -n \"$1\" ]]; then\n\tVMWARE_INSTALL_OPTIONS=\"$1\"\nfi\n\npushd vmware-tools-distrib >/dev/null\n\nif hash systemctl >/dev/null 2>&1; then\n  echo \"Creating empty init dirs for backwards compatibility\"\n  for x in {0..6}; do mkdir -p /etc/init.d/rc${x}.d; done\n  sudo cp $SCRIPT_DIR/patches/vmware-tools.service /etc/systemd/system/\n  sudo systemctl enable vmware-tools.service\n  echo \"Added and enabled VMware Tools systemd service\"\nfi\n\nif sudo ./vmware-install.pl --help 2>&1 | grep -q 'force-install'; then\n    VMWARE_INSTALL_OPTIONS=\"--force-install\"\nfi\n\nsudo ./vmware-install.pl --default $VMWARE_INSTALL_OPTIONS\nsudo ./bin/vmware-config-tools.pl --default\n\npopd >/dev/null\n\n\n"
        },
        {
          "name": "download-patches.sh",
          "type": "blob",
          "size": 1.1103515625,
          "content": "#!/usr/bin/env bash\n\n# download selected vmware tools patch files\n\nset -x\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\nWGET=\"wget --no-check-certificate\"\n\nURLS=\"\nvmblock,https://sites.google.com/site/mysticalzerotmp/vmblock.3.10.patch\nvmblock,https://sites.google.com/site/mysticalzerotmp/vmblock.3.11.patch\nvmblock,http://dominator008.com/crate/vmblock-3.12-patch\nvmhgfs,https://raw.github.com/misheska/basebox-packer/master/template/misheska-ubuntu1204/floppy/vmtools.inode.c.patch\nvmhgfs,https://raw.github.com/misheska/basebox-packer/master/template/misheska-ubuntu1204/floppy/vmware9.compat_mm.patch\nvmci,https://raw.github.com/misheska/basebox-packer/master/template/misheska-ubuntu1204/floppy/vmware9.k3.8rc4.patch\n\"\n\npushd patches\n\n  for modurl in ${URLS}; do\n    mod=\"${modurl%%,*}\"\n    url=\"${modurl#*,}\"\n\n    pushd \"${mod}\"\n\n      file=\"$(basename ${url})\"\n\n      if [[ -f \"$file\" ]]; then\n        continue\n      fi\n\n      ${WGET} \"${url}\"\n\n      if [[ \"${file}\" = \"vmware9.compat_mm.patch\" ]]; then\n        sed -i.bak -e 's/\\(vmware9.compat_mm.patch\\)/shared\\/\\1/;' \"${file}\"\n      fi\n\n    popd\n\n  done\n\npopd\n"
        },
        {
          "name": "download-tools.sh",
          "type": "blob",
          "size": 6.1630859375,
          "content": "#!/bin/bash -x\n\n# download selected vmware tools files\n\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\nWGET=\"wget --no-check-certificate\"\n\nURLS=\"\\\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.1.0/13668589/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.0.3/12992109/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.0.2/10952296/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.0.1/10738065/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.0.0/10120384/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/10.1.3/9472307/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/10.1.2/8502123/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/10.1.1/7520154/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/10.1.0/7370838/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/10.0.1/6754183/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/10.0.0/6665085/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.8/5824040/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.7/5528452/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.6/5234762/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.5/5192483/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.4/5115894/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.3/4696910/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.2/4635224/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.1/4543325/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.0/4352717/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.1.1/3771013/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.1.0/3272237/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.0.2/3164312/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.0.1/3094680/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.0.0/2985594/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/7.1.3/3204469/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/7.1.2/2779224/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/7.1.1/2498930/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/7.1.0/2314774/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/7.0.1/2235595/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/7.0.0/2075534/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/6.0.6/2684343/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/6.0.5/2209127/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/6.0.4/1887983/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/6.0.3/1747349/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/6.0.2/1398658/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/6.0.1/1331545/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/5.0.5/1945692/packages/com.vmware.fusion.tools.linux.zip.tar\nhttps://softwareupdate.vmware.com/cds/vmw-desktop/fusion/5.0.4/1435862/packages/com.vmware.fusion.tools.linux.zip.tar\n\"\n\n# version parameter can be passed to script to indicate which tools to download\nif [[ -n \"$1\" ]]; then\n\tif [[ \"$1\" = \"latest\" ]]; then\n\t\tURLS=$(echo \"$URLS\" | head -n 1)\n\telse\n\t\tURLS=$(echo \"$URLS\" | grep \"/$1/\")\n\tfi\nfi\n\nSEVENZIP=$(which 7z 2>/dev/null)\n\nif [[ -z \"${SEVENZIP}\" ]]; then\n\t# jessie doesn't load the loop device automatically?\n\tsudo modprobe loop\nfi\n\nmkdir -p downloads\npushd downloads >/dev/null\n\n  for url in ${URLS}; do\n    ver=\"$(echo ${url} | sed -e 's/.*\\/\\([0-9]*\\.[0-9]*\\.[0-9]*\\)\\/.*/\\1/')\"\n    zip=\"$(basename \"${url}\" .tar)\"\n    base=\"$(basename \"${zip}\" .zip)\"\n    tar=\"${zip}-${ver}.tar\"\n\n    rm -f \"${zip}\"\n    rm -fr payload\n\n    if [[ ! -f \"${tar}\" ]]; then\n      ${WGET} -O \"${tar}\" \"${url}\"\n    fi\n\n    tar xvf \"${tar}\"\n\n    if [[ ! -f \"${zip}\" ]]; then\n      echo $0: File not found: ${zip} in ${tar} >&2\n      exit 1\n    fi\n\n    unzip -o \"${zip}\"\n\n    rm -f \"${zip}\"\n\n    if [[ ! -d \"payload\" ]]; then\n      echo $0: Directory not found: payload in ${zip} >&2\n      exit 2\n    fi\n\n\t\tif [[ -n \"${SEVENZIP}\" ]]; then\n\t\t\tISO_DIR=payload\n\t\t\t\"${SEVENZIP}\" x -o${ISO_DIR} payload/*.iso\n\t\telse\n\t\t\tISO_DIR=/mnt/cdrom\n\t\t\tsudo mkdir -p ${ISO_DIR}\n\t\t\tsudo mount -o loop payload/*.iso ${ISO_DIR}\n\t\tfi\n\n\t\ttools=\"$(find ${ISO_DIR} -name 'VMwareTools-*.tar.gz')\"\n\n    dest=\"../$(basename \"${tools}\")\"\n\n    cp -v \"${tools}\" \"${dest}\"\n    chmod ug+w \"${dest}\"\n\n\t\tif [[ -z \"${SEVENZIP}\" ]]; then\n\t    sudo umount /mnt/cdrom\n\t\tfi\n\n    rm -fr payload\n    rm -f descriptor.xml manifest.plist\n\n  done\n\npopd >/dev/null\n"
        },
        {
          "name": "downloads",
          "type": "tree",
          "content": null
        },
        {
          "name": "patch-module.sh",
          "type": "blob",
          "size": 2.1650390625,
          "content": "#!/usr/bin/env bash\n\n# apply patches for a single module\n\nreadonly SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\nif ! hash patch >/dev/null 2>&1; then\n  if hash apt-get >/dev/null 2>&1; then\n    sudo apt-get install -y patch\n  else\n    echo $0: Command not found: patch >&2\n    exit 1\n  fi\nfi\n\nif [[ -z \"$1\" ]]; then\n  echo Usage: $0 patchdir >&2\n  exit 2\nfi\n\npatchdir=\"$1\"\n\nif [[ ! -d \"${patchdir}\" ]]; then\n  echo $0: Error: Directory not found: ${patchdir} >&2\n  exit 3\nfi\n\npatches=\"$(find ${patchdir} -type f -size +1c -regextype posix-extended -iregex '.*\\.(patch|diff)' | sort)\"\n\nscripts=\"$(find ${patchdir} -type f -name '*.sh' | sort)\"\n\nmodule=\"$(basename ${patchdir})\"\n\nif [[ ! -d lib/modules/source ]]; then\n  echo $0: Error: Directory not found: lib/modules/source >&2\n  exit 5\nfi\n\nif [[ ! -f \"lib/modules/source/${module}.tar\" ]]; then\n  echo $0: Error: File not found: lib/modules/source/${module}.tar >&2\n  exit 6\nfi\n\npushd lib/modules/source >/dev/null\n\n  if [[ ! -f \"${module}.tar.orig\" ]]; then\n    cp -p \"${module}.tar\" \"${module}.tar.orig\"\n  fi\n\n  rm -rf \"${module}-only\"\n\n  tar --no-same-owner --no-same-permissions -xf \"${module}.tar\"\n\n  if [[ ! -d \"${module}-only\" ]]; then\n    echo $0: Error: Directory not found: ${module}-only in lib/modules/source/${module}.tar >&2\n    exit 7\n  fi\n\n  chmod -R a+w \"${module}-only\"\n\n  pushd \"${module}-only\" >/dev/null\n\n\t\tif [[ -n \"${patches}\" ]]; then\n\t\t\tfor patch in ${patches}; do\n\t\t\t\tbase=\"$(basename ${patch})\"\n\t\t\t\tdir=\"$(basename $(dirname ${patch}))\"\n\t\t\t\tpatch --batch --ignore-whitespace --strip=1 --dry-run < \"${patch}\" >$base.patch.err 2>&1\n\t\t\t\tif [ $? -eq 0 ]; then\n\t\t\t\t\trm $base.patch.err\n\t\t\t\t\techo \"*** Applying ${dir}/${base} ...\"\n\t\t\t\t\tpatch --batch --ignore-whitespace --strip=1 --backup < \"${patch}\"\n\t\t\t\telse\n\t\t\t\t\techo \"*** Skipping ${dir}/${base}: patch not appropriate for this kernel\"\n\t\t\t\tfi\n\t\t\tdone\n\t\tfi\n\n\t\tif [[ -n \"${scripts}\" ]]; then\n\t\t\tfor script in ${scripts}; do\n\t      base=\"$(basename ${script})\"\n\t      dir=\"$(basename $(dirname ${script}))\"\n\t\t\t\tchmod +x \"${script}\"\n\t\t\t\techo \"*** Running ${dir}/${base}\"\n\t\t\t\t\"${script}\"\n\t\t\tdone\n\t\tfi\n\n  popd >/dev/null\n\n  tar -cf \"${module}.tar\" \"${module}-only\"\n\npopd >/dev/null\n"
        },
        {
          "name": "patch.sh",
          "type": "blob",
          "size": 1.6181640625,
          "content": "#!/usr/bin/env bash\n\n# apply patches for all modules\n\nreadonly SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\nif [[ ! -d vmware-tools-distrib ]]; then\n  echo $0: Error: Directory not found: vmware-tools-distrib >&2\n  exit 3\nfi\n\nif ! hash patch >/dev/null 2>&1; then\n  if hash apt-get >/dev/null 2>&1; then\n    sudo apt-get install -y patch\n  else\n    echo $0: Command not found: patch >&2\n    exit 1\n  fi\nfi\n\nmodules=\"$(find ${SCRIPT_DIR}/patches -mindepth 1 -maxdepth 1 -type d)\"\n\npushd vmware-tools-distrib >/dev/null\n\n\tif [[ -n \"${modules}\" ]]; then\n\t\tfor module in ${modules}; do\n\t\t\t\"${SCRIPT_DIR}/patch-module.sh\" \"${module}\"\n\t\tdone\n\tfi\n# Currently this should only match one patch which adds support for ip instead of ifconfig\nif hash ip >/dev/null 2>&1; then\n  patches=\"$(find ${SCRIPT_DIR}/patches -maxdepth 1 -type f -size +1c -regextype posix-extended -iregex '.*\\.(patch|diff)' | sort)\"\n  if [[ -n \"${patches}\" ]]; then\n    for patch in ${patches}; do\n      pushd bin >/dev/null\n      base=\"$(basename ${patch})\"\n      echo \"\\$base is\" + $base\n      dir=\"$(basename $(dirname ${patch}))\"\n      echo \"\\$dir is\" + $dir\n      patch --batch --ignore-whitespace --strip=1 --dry-run < \"${patch}\" >$base.patch.err 2>&1\n      if [ $? -eq 0 ]; then\n        rm $base.patch.err\n        echo \"*** Applying ${dir}/${base} ...\"\n        patch --batch --ignore-whitespace --strip=1 --backup < \"${patch}\"\n      else\n        echo \"*** Skipping ${dir}/${base}: patch not appropriate for this kernel\"\n      fi\n    done\n  fi\nfi\n\npopd >/dev/null\n\nif [[ \"${VMWARE_TOOLS_PATCHES_DEBUG-}\" =~ (pause|PAUSE) ]]; then\n  read -p \"Press [Enter] to continue: \"\nfi\n"
        },
        {
          "name": "patched-open-vm-tools.sh",
          "type": "blob",
          "size": 0.90625,
          "content": "#!/bin/bash\n# This file can be grabbed via wget/curl to bootstrap the repo\n# A really handy place to use this bootstrap would be Packer\n\nset -e\n\nif [[ -n \"$(type -P apt-get)\" ]]; then\n # Debian and derivatives\n apt-get install -y git\nelif [[ -n \"$(type -P yum)\" ]]; then\n # Fedora, CentOS or RHEL and derivatives\n yum -y install git\nelif [[ -n \"$(type -P zypper)\" ]]; then\n # openSUSE\n zypper --non-interactive install git\nelif [[ -n \"$(type -P pacman )\" ]]; then\n pacman -S --needed --noconfirm git\nfi\n\n# This is fragile, it needs updated depending on the branch/fork you want to run\ngit clone https://github.com/rasa/vmware-tools-patches.git\ncd vmware-tools-patches\n\n# Sourcing the setup script gets the dependencies we really need,\n# so that we don't have to lay them all out here and we could uninstall them\n# when we are done with them post compile\n. ./setup.sh\n./download-tools.sh latest\n./untar-and-patch.sh\n./compile.sh\n"
        },
        {
          "name": "patches",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.sh",
          "type": "blob",
          "size": 1.5888671875,
          "content": "#!/bin/bash\n# This file should be sourced to install the dependencies before they are needed\n# . setup.sh\n\nif [[ -e /etc/redhat-release ]]; then\n\tif hash yum >/dev/null 2>&1; then\n    sudo yum -y install \\\n                    unzip \\\n                    patch \\\n                    gcc \\\n                    glibc-headers \\\n                    kernel-devel \\\n                    kernel-headers \\\n                    make \\\n                    perl \\\n                    wget\n\tfi\nfi\n\nif [[ -e /etc/debian_version ]]; then\n\tif hash apt-get >/dev/null 2>&1; then\n\t\tsudo apt-get install -y \\\n                    build-essential \\\n                    dkms \\\n                    gcc \\\n                    linux-headers-$(uname -r) \\\n                    patch \\\n                    perl \\\n                    psmisc \\\n                    make \\\n                    unzip \\\n                    wget \\\n                    zip\n  fi\nfi\n\nif [[ -e /etc/arch-release ]]; then\n\tif hash pacman >/dev/null 2>&1; then\n\t\tsudo pacman -Syu --needed --noconfirm \\\n                    wget \\\n                    unzip \\\n                    patch \\\n                    perl \\\n                    gcc \\\n                    glibc \\\n                    linux-headers \\\n                    make \\\n                    base \\\n                    base-devel\n\tfi\nfi\n\nif [[ -e /etc/SuSE-release ]]; then\n\tif hash zypper >/dev/null 2>&1; then\n\t\tsudo zypper --non-interactive install \\\n                    make \\\n                    gcc \\\n                    kernel-devel \\\n                    patch \\\n                    wget \\\n                    unzip\n\tfi\nfi\n"
        },
        {
          "name": "untar-all-and-patch.sh",
          "type": "blob",
          "size": 0.458984375,
          "content": "#!/usr/bin/env bash\n\n# untar all VMwareTools-*.tar.gz files found, and apply patches for all modules for each one\n\nreadonly SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\ndir=\"${1:-$(pwd)}\"\n\ntools=\"$(find \"${dir}\" -type f -name 'VMwareTools-*.tar.gz' | sort -r)\"\n\nif [[ -z \"${tools}\" ]]; then\n  echo \"$0: No files matching VMwareTools-*.tar.gz found in '${dir}'\" >&2\n  exit 1\nfi\n\nfor tool in ${tools}; do\n  \"${SCRIPT_DIR}/untar-and-patch.sh\" \"${tool}\"\ndone\n"
        },
        {
          "name": "untar-and-patch-and-compile.sh",
          "type": "blob",
          "size": 0.2734375,
          "content": "#!/usr/bin/env bash\n\n# untar a single VMwareTools .tar.gz file, apply patches for all modules, and compile and install VMware Tools\n\nreadonly SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\n\"${SCRIPT_DIR}/untar-and-patch.sh\" \"$1\"\n\nshift\n\n\"${SCRIPT_DIR}/compile.sh\" $*\n"
        },
        {
          "name": "untar-and-patch.sh",
          "type": "blob",
          "size": 0.2197265625,
          "content": "#!/usr/bin/env bash\n\n# untar a single VMwareTools-*.tar.gz file, and apply patches for all modules\n\nreadonly SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\n\"${SCRIPT_DIR}/untar.sh\" \"$1\"\n\n\"${SCRIPT_DIR}/patch.sh\"\n"
        },
        {
          "name": "untar.sh",
          "type": "blob",
          "size": 0.6513671875,
          "content": "#!/usr/bin/env bash\n\n# untar a single VMwareTools-*.tar.gz file\n\nreadonly SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\ntool=\"$1\"\n\nif [[ -z \"${tool}\" ]]; then\n  tool=\"$(find -type f -name 'VMwareTools-*.tar.gz' | sort -nr -t - -k 2 | head -n 1)\"\nfi\n\nif [[ -z \"${tool}\" ]]; then\n  echo Usage: $0 tarname >&2\n  exit 1\nfi\n\nif [[ ! -f \"${tool}\" ]]; then\n  echo $0: Error: File not found: ${tool} >&2\n  exit 2\nfi\n\necho $(basename \"$0\"): Patching ${tool}\n\nrm -fr vmware-tools-distrib\n\necho -e \"=== Patching ${tool} ...\\n\"\n\ntar xzf \"${tool}\"\n\nif [[ ! -d vmware-tools-distrib ]]; then\n  echo $0: Error: Directory not found: vmware-tools-distrib >&2\n  exit 3\nfi\n"
        }
      ]
    }
  ]
}