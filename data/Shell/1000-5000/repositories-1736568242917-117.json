{
  "metadata": {
    "timestamp": 1736568242917,
    "page": 117,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ingydotnet/git-subrepo",
      "stars": 3304,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".fish.rc",
          "type": "blob",
          "size": 0.6044921875,
          "content": "#!fish\n\n#------------------------------------------------------------------------------\n#\n# This is the `git-subrepo` initialization script.\n#\n# This script turns on the `git-subrepo` Git subcommand and its manpages, for\n# the *Fish* shell.\n#\n# Just add a line like this to your `~/.config/fish/config.fish`:\n#\n#   source /path/to/git-subrepo/.fish.rc\n#\n#------------------------------------------------------------------------------\n\nset GIT_SUBREPO_ROOT (dirname (realpath (status --current-filename)))\nset PATH $GIT_SUBREPO_ROOT/lib $PATH\n\nset -q MANPATH || set MANPATH ''\nset MANPATH $MANPATH $GIT_SUBREPO_ROOT/man\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.013671875,
          "content": "* text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0107421875,
          "content": "/test/tmp/\n"
        },
        {
          "name": ".rc",
          "type": "blob",
          "size": 0.8779296875,
          "content": "# shellcheck shell=bash disable=2128\n\n#------------------------------------------------------------------------------\n#\n# This is the `git-subrepo` initialization script.\n#\n# This script turns on the `git-subrepo` Git subcommand, its manpages and TAB\n# completion for the *Bash* and *zsh* shells.\n#\n# Just add a line like this to your shell startup configuration:\n#\n#   source /path/to/git-subrepo/.rc\n#\n#------------------------------------------------------------------------------\n\n[[ -n ${ZSH_VERSION-} ]] &&\n  GIT_SUBREPO_ROOT=$0 ||\n  GIT_SUBREPO_ROOT=$BASH_SOURCE\n\n[[ $GIT_SUBREPO_ROOT =~ ^/ ]] ||\n  GIT_SUBREPO_ROOT=$PWD/$GIT_SUBREPO_ROOT\n\nGIT_SUBREPO_ROOT=$(\n  cd \"$(dirname \"$GIT_SUBREPO_ROOT\")\" || return\n  pwd\n) || return\nexport GIT_SUBREPO_ROOT\n\nexport PATH=$GIT_SUBREPO_ROOT/lib:$PATH\nexport MANPATH=$GIT_SUBREPO_ROOT/man:$MANPATH\n\nsource \"$GIT_SUBREPO_ROOT/share/enable-completion.sh\"\n"
        },
        {
          "name": "Changes",
          "type": "blob",
          "size": 6.26171875,
          "content": "version: 0.4.9\ndate:    Mon 25 Jul 2024 11:23:34 AM CST\n- Revert Fix bash-completion due to not being compatible with Windows\n---\nversion: 0.4.8\ndate:    Mon 22 Jul 2024 07:40:00 AM CST\n- Remove all subrepo refs with clean --force\n- Allow the error() function to accept multiple arguments\n- Bug fixed where clone --force could change the tracked branch\n- Give a detailed error message if the parent SHA could not be found\n- Use the git configuration to determine the default branch name for the init command\n- Add --force to fetch command\n- Fix executable settings on installed files\n- Remove shebangs from library only files\n- Fix bash-completion for instances that used make install\n---\nversion: 0.4.7\ndate:    Sun 7 Jul 2024 11:04:00 AM EST\n- Convert testing to use docker with updated git versions\n- Fix numerous places where quoting was incorrect causing path name collisions\n- Fix pull-force test to deal with git not defaulting to merges on pulls after 2.33\n- Fix issue where docker tests didn't work with git 2.30 or higher because of\n  increased permission scrutiny.\n- Update readme to say this tools is in production environments\n- Update readme to use internet archive for old articles about subrepo no longer\n  available on their original source\n---\nversion: 0.4.6\ndate:    Fri 21 Apr 2023 10:18:34 AM EST\n- Remove stale worktrees in the push command\n---\nversion: 0.4.5\ndate:    Thu 22 Sep 2022 23:03:24 PM EST\n- Add --file option\n- Fix git subrepo status command for subrepos that share a common prefix. Closes #534.\n- Don't allow -b and --all\n- Fix documentation links\n- fix tests to support use of a default branch git config that is not \"master\"\n- pass --force to git add so a user's global .gitignore does not affect tests\n- Fix .rc and enable-completion.sh for zsh before 5.1\n- Better format for options\n- The `fpath` variable is an array; expand correctly\n---\nversion: 0.4.3\ndate:    Sat 21 Nov 2020 03:28:43 PM EST\n- Apply PR#511 to fix a 0.4.2 regression in zsh\n---\nversion: 0.4.2\ndate:    Tue Nov 17 14:10:10 CST 2020\n- Covert to GitHub Actions for testing\n- Add docker support to test multiple git/bash versions together\n- Require Bash 4.0+\n- Use shellcheck as linter and address issues discovered\n- Discovered bug in git where @ is not a valid workspace name\n- Add --force command to subrepo pull\n- Now works with paths that contain spaces\n- Numerous documentation fixes\n- When two branches pointed to the same commit, we would\n  sometimes pick the wrong branch.\n- ZSH completion fixes\n- Allow tests to run outside a git repo\n- Would not work if a different date format was set in git config\n- Address delay in filter-branch on newer versions of git\n- Display the git merge message on merge failure\n- Allow FISH integration on MacOS.\n- Add manpage support for FISH shell\n---\nversion: 0.4.1\ndate:    Thu Jan  9 17:11:21 CST 2020\n- Fix Bash version error messages and add to .rc\n- Nicer YAML formatting in .travis.yml\n- Wrap a long line\n- Update the docs\n- Force `make update` to always update docs\n- Don't use XXX in perl stuff\n- Add testing on MacOS\n- Remove conflicting -C from install -d commands.\n- Update version requirement documentation\n- Correct error message in branch\n- Use topo-order in subrepo branch\n- Make “git subrepo clean -f ...” delete refs correctly\n- Fix #410 Push empty repositories with recent git versions\n- Make subrepo work when run in a worktree\n- Simplify finding subrepos\n- Ask git to find the .gitrepo files\n- Doc: fix sentence repetition\n- Fix typos\n- Fixed typo\n- Travis CI not checking out a branch.\n---\nversion: 0.4.0\ndate:    Thu Nov  8 12:26:38 CET 2018\nchanges:\n- Fix #325 Do not squash main repo commits\n- Improve error message for worktree handling\n- Make version checking portable. #307\n- #307, improve version check\n- #307, update version requirement\n- Fix part #308, Add stderr output if commands fail\n- Fix #306: Add check to prevent following commits with no .gitrepo\n- Remove dry-run flag as it's not implemented. Make sure branch --force delete worktree\n- Fix #296, Replace --first-parent with --ancestry-path\n- Fix #291, specify Trusty host to get new 2.x git\n- Fix #258, add --no-tags to git fetch\n- Test that no remotes are created during clone\n- #257 Remove remote creation to avoid problems with fetch --all\n- (origin/issue/150_to_0.4.0) Fix remove-worktree, remove unused parameters\n- Regenerate completion files\n- filter-branch operation should not be done on HEAD\n- Cleanup push and add hint to push directly after pull\n- Simplify cleanup and add worktree to status\n- Add --method option to init/clone, add a 'config' command\n- Updated unit tests to support the new logic\n- Use 'git worktree' for merge/rebase\n- Update docs to reflect how things should work\n- Make it possible to specify commit messages\n- Redesign, trash the tree hash approach and use merges instead\n- Add release branches to travis-ci\n- Add --method option to init/clone, add a 'config' command\n- Detect multiple pulls, use -u flag to decide\n- Don't reuse previous commit message when using --all\n- Update the docs for pull and push\n- Update error messages when failing merge/rebase\n- Fix env var bug in test/push.t\n- Do not overwrite author information\n---\nversion: 0.3.1\ndate:    Tue Jan  3 23:08:56 PST 2017\nchanges:\n- Updated release for homebrew\n- Fix #192\n---\nversion: 0.3.0\ndate:    Wed Dec  2 19:19:43 PST 2015\nchanges:\n- Fix issue #98 and host of others (89, 91, 95, 96)\n- Adds support for the merge-base command\n- Adds stability to many commands\n- Command completion updates\n- Rename `init` to `.rc`\n- @grimmySwe++ @dzzh++ @jrosdahl++ @perlpunk++\n---\nversion: 0.2.3\ndate:    Sun Aug  9 13:44:22 PDT 2015\nchanges:\n- Fix issues #75 and #76\n---\nversion: 0.2.2\ndate:    Wed Jul 22 09:45:13 PDT 2015\nchanges:\n- Added the `init` subcommand\n- Applied doc fixes\n---\nversion: 0.2.1\ndate:    Sat Mar 28 07:52:22 PDT 2015\nchanges:\n- Allows subrepo clone to clone to an empty branch; fixes #26.\n- Refs in status\n- Empty parent set to 'none' in .gitrepo file.\n- Bug fixes\n---\nversion: 0.2.0\ndate:    Sat Jan 24 06:22:05 PST 2015\nchanges:\n- Massive overhaul\n- .gitrepo files remain the same so backwards compatible\n- Introduce the branch and commit subcommands\n- The checkout subcommand goes away\n- Operations work much smoother like normal Git flow\n- Much more testing\n- Better doc\n---\nversion: 0.1.0\ndate:    Fri Feb 21 12:25:53 2014 -0800\nchanges:\n- First version\n"
        },
        {
          "name": "Intro.pod",
          "type": "blob",
          "size": 16.8798828125,
          "content": "=pod\n\n=for comment\nDO NOT EDIT. This Pod was generated by Swim v0.1.48.\nSee http://github.com/ingydotnet/swim-pm#readme\n\n=encoding utf8\n\n=head1 Introducing Git Subrepos\n\nThere is a new git command called C<subrepo> that is meant to be a solid\nalternative to the C<submodule> and C<subtree> commands. All 3 of these\ncommands allow you to include external repositories (pinned to specific\ncommits) in your main repository. This is an often needed feature for project\ndevelopment under a source control system like Git. Unfortunately, the\nC<submodule> command is severely lacking, and the C<subtree> command (an\nattempt to make things better) is also very flawed. Fortunately, the\nC<subrepo> command is here to save the day.\n\nThis article will discuss how the previous commands work, and where they go\nwrong, while explaining how the new C<subrepo> command fixes the issues.\n\nIt should be noted that there are 3 distinct roles (ways people use repos)\ninvolved in discussing this topic:\n\n=over\n\n=item * B<owner> — The primary author and repo owner\n\n=item * B<collaborators> — Other developers who contribute to the repo\n\n=item * B<users> — People who simply use the repo software\n\n=back\n\n=head2 Introducing C<subrepo>\n\nWhile the main point is to show how subrepo addresses the shortcomings\nof submodule and subtree, I'll start by giving a quick intro to the\nsubrepo command.\n\nLet's say that you have a project repo called 'freebird' and you want to have\nit include 2 other external repos, 'lynyrd' and 'skynyrd'. You would do the\nfollowing:\n\n    git clone git@github.com/you/freebird\n    cd freebird\n    git subrepo clone git@github.com/you/lynyrd ext/lynyrd\n    git subrepo clone git@github.com/you/skynyrd ext/skynyrd --branch=1975\n\nWhat these commands do (at a high level) should be obvious. They \"clone\" (add)\nthe repos content into the subdirectories you told them to. The details of\nwhat is happening to your repo will be discussed later, but adding new\nsubrepos is easy. If you need to update the subrepos later:\n\n    git subrepo pull ext/lynyrd\n    git subrepo pull ext/skynyrd --branch=1976\n\nThe lynyrd repo is tracking the upstream master branch, and you've changed the\nskynyrd subrepo to the 1976 branch. Since these subrepos are owned by 'you',\nyou might want to change them in the context of your freebird repo. When\nthings are working, you can push the subrepo changes back:\n\n    git subrepo push ext/lynyrd\n    git subrepo push ext/skynyrd\n\nLooks simple right? It's supposed to be. The intent of C<subrepo> is to do the\nright things, and to not cause problems.\n\nOf course there's more to it under the hood, and that's what the rest of this\narticle is about.\n\n=head2 Git Submodules\n\nSubmodules tend to receive a lot of bad press. Here's some of it:\n\n=over\n\n=item * L<http://ayende.com/blog/4746/the-problem-with-git-submodules>\n\n=item * L<https://web.archive.org/web/20171101202911/http://somethingsinistral.net/blog/git-submodules-are-probably-not-the-answer/>\n\n=item * L<http://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/>\n\n=back\n\nA quick recap of some of the good and bad things about submodules:\n\nGood:\n\n=over\n\n=item * Use an external repo in a dedicated subdir of your project.\n\n=item * Pin the external repo to a specific commit.\n\n=item * The C<git-submodule> command is a core part of the Git project.\n\n=back\n\nBad:\n\n=over\n\n=item * Users have to know a repo has submodules.\n\n=item * Users have to get the subrepos manually.\n\n=item * Pulling a repo with submodules won't pull in the new submodule changes.\n\n=item * A submodule will break if the referenced repo goes away.\n\n=item * A submodule will break if a forced push removes the referenced commit.\n\n=item * Can't use different submodules/commits per main project branch.\n\n=item * Can't \"try out\" a submodule on alternate branch.\n\n=item * Main repo can be pushed upstream pointing to unpushed submod commits.\n\n=item * Command capability differs across Git versions.\n\n=item * Often need to change remote url, to push submodule changes upstream.\n\n=item * Removing or renaming a submodule requires many steps.\n\n=back\n\nInternally, submodules are a real mess. They give the strong impression of\nbeing bolted on, well after Git was designed. Some commands are aware of the\nexistence of submodules (although usually half-heartedly), and many commands\nare oblivious. For instance the git-clone command has a C<--recursive> option\nto clone all subrepos, but it's not a default, so you still need to be aware\nof the need. The git-checkout command does nothing with the submodules, even\nif they are intended to differ across branches.\n\nLet's talk a bit about how submodules are implemented in Git. Information\nabout them is stored in 3 different places (in the top level repo directory):\n\n=over\n\n=item * C<.gitmodules>\n\n=item * C<.git/config>\n\n=item * C<.git/modules> — The submodule repo's meta data (refs/objects)\n\n=back\n\nSo some of the information lives in the repo history (.gitmodules), but other\ninfo (.git/) is only known to the local repo.\n\nIn addition, the submodule introduces a new low level concept, to the\ncommitI<tree>blob graph. Normally a git tree object points to blob (file)\nobjects and more tree (directory) objects. Submodules have tree objects point\nto B<commit> objects. While this seems clever and somewhat reasonable, it also\nmeans that every other git command (which was built on the super clean Git\ndata model) has to be aware of this new possibility (and deal with it\nappropriately).\n\nThe point is that, while submodules are a real need, and a lot of work has\ngone into making them work decently, they are essentially a kludge to the Git\nmodel, and it is quite understandable why they haven't worked out as well as\npeople would expect.\n\nNOTE: Submodules I<are> getting better with each release of Git, but it's\n      still an endless catch up game.\n\n=head2 Git Subtrees\n\nOne day, someone decided to think different. Instead of pointing to external\nrepos, why not just include them into the main repo (but also allow them to be\npulled and pushed separately as needed)?\n\nAt first this may feel like a wasteful approach. Why keep other repos\nphysically inside your main one? But if you think about it abstractly, what's\nthe difference? You want your users and collaborators to have all this code\nbecause your project needs it. So why worry about how it happens? In the end,\nthe choice is yours, but I've grown very comfortable with this concept and\nI'll try to justify it well. I should note that the first paragraph of the\nC<submodule> doc suggests considering this alternative.\n\nThe big win here is that you can do this using the existing git model. Nothing\nnew is added. You are just adding commits to a history. You can do it\ndifferent on every branch. You can merge branches sensibly.\n\nThe git-subtree command seems to have been inspired by Git's subtree merge\nstrategy, which it uses internally, and possibly got its name from. A subtree\nmerge allows you to take a completely separate Git history and make it be a\nsubdirectory of your repo.\n\nAdding a subtree was the easy part. All that needed to be done after that was\nto figure out a way to pull upstream changes and push local ones back\nupstream. And that's what the C<git-subtree> command does.\n\nSo what's the problem with git-subtree then?\n\nWell unfortunately, it drops a few balls. The main problems come down to an\noverly complicated commandline UX, poor collaborator awareness, and a fragile\nand messy implementation.\n\nGood:\n\n=over\n\n=item * Use an external repo in a dedicated subdir of your project.\n\n=item * Pin the external repo to a specific commit.\n\n=item * Users get everything with a normal clone command.\n\n=item * Users don't need to know that subtrees are involved.\n\n=item * Can use different submodules/commits per main project branch.\n\n=item * Users don't need the subtree command. Only owners and collaborators.\n\n=back\n\nBad:\n\n=over\n\n=item * The remote url and branch info is not saved (except in the history).\n\n=item * Owners and collaborators have to enter the remote for every command.\n\n=item * Collaborators aren't made aware that subtrees are involved.\n\n=item * Pulled history is not squashed by default.\n\n=item * Creates a messy historical view. (See below)\n\n=item * Bash code is complicated.\n\n=item * Only one test file. Currently is failing.\n\n=back\n\nAs you can see, subtree makes quite a few things better, but after trying it\nfor a while, the experience was more annoying than submodules. For example,\nconsider this usage:\n\n    $ git subtree add --squash --prefix=foo git@github.com:my/thing mybranch\n    # weeks go by…\n    $ git subtree pull --squash --prefix=foo git@github.com:my/thing mybranch\n    # time to push local subtree changes back upstream\n    $ git subtree push --prefix=foo git@github.com:my/thing mybranch\n\nThe first thing you notice is the overly verbose syntax. It's justified in the\nfirst command, but in the other 2 commands I really don't want to have to\nremember what the remote and branch are that I'm using.\n\nMoreover, my collaborators have no idea that subtrees are involved, let alone\nwhere they came from.\n\nConsider the equivalent subrepo commands:\n\n    $ git subrepo clone git@github.com:my/thing foo -b mybranch\n    $ git subrepo pull foo\n    $ git subrepo push foo\n\nCollaborators see a file called 'foo/.gitrepo', and know that the subdir is a\nsubrepo. The file contains all the information needed by future commands\napplied to that subrepo.\n\n=head2 Git Subrepos\n\nNow is a good time to dive into the techinical aspects of the C<subrepo>\ncommand, but first let me explain how it came about.\n\nAs you may have surmised by now, I am the author of git-subrepo. I'd used\nsubmodules on and off for years, and when I became aware of subtree I gave it\na try, but I quickly realized its problems. I decided maybe it could be\nimproved. I decided to write down my expected commandline usage and my ideals\nof what it would and would not do. Then I set off to implement it. It's been a\nlong road, but what I ended up with was even better than what I wanted from\nthe start.\n\nLet's review the Goods and Bads:\n\nGood:\n\n=over\n\n=item * Use an external repo in a dedicated subdir of your project.\n\n=item * Pin the external repo to a specific commit.\n\n=item * Users get everything with a normal clone command.\n\n=item * Users don't need to know that subrepos are involved.\n\n=item * Can use different submodules/commits per main project branch.\n\n=item * Meta info is kept in an obvious place.\n\n=item * Everyone knows when a subdir is a subrepo.\n\n=item * Commandline UX is minimal and intuitive.\n\n=item * Pulled history is always squashed out locally.\n\n=item * Pushed history is kept intact.\n\n=item * Creates a clean historical view. (See below)\n\n=item * Bash code is very simple and easy to follow.\n\n=item * Comprehensive test suite.\n\n=back\n\nBad:\n\n=over\n\n=item * --Subrepo is very new.-- (no longer true)\n\n=item * --Not well tested in the wild.-- (no longer true)\n\n=back\n\nThis review may seem somewhat slanted, but I honestly am not aware of any\n\"bad\" points that I'm not disclosing. That said, I am sure time will reveal\nbugs and shortcomings. Those can usually be fixed. Hopefully the B<model> is\ncorrect, because that's harder to fix down the road.\n\nOK. So how does it all work?\n\nThere are 3 main commands: cloneI<pull>push. Let's start with the clone\ncommand. This is the easiest part. You give it a remote url, possibly a new\nsubdir to put it, and possibly a remote branch to use. I say possibly, because\nthe command can guess the subdir name (just like the git-clone command does),\nand the branch can be the upstream default branch.\n\nGiven this we do the following steps internally:\n\n=over\n\n=item * Fetch the remote content (for a specific refspec)\n\n=item * Read the remote head tree into the index\n\n=item * Checkout the index into the new subdir\n\n=item * Create a new subrepo commit object for the subdir content\n\n=item * Add a state file called .gitrepo to the new subrepo/subdir\n\n=item * Amend the merge commit with this new file\n\n=back\n\nThis process adds something like this to the top of your history:\n\n    * 9b6ddc9 git subrepo clone git@github.com:you/foo.git foo/\n    * 37c61a5 Previous head commit of your repo\n\nThe entire history has been squashed down into one commit, and placed on\ntop of your history. This is important as it keeps your history as clean\nas possible. You don't need to have the subrepo history in your main\nproject, since it is immutably available elsewhere, and you have a pointer\nto that place.\n\nThe new foo/.gitrepo file looks like this:\n\n    [subrepo]\n            remote = git@github.com:you/foo.git\n            branch = master\n            commit = 14c96c6931b41257b2d42b2edc67ddc659325823\n            parent = 37c61a5a234f5dd6f5c2aec037509f50d3a79b8f\n            cmdver = 0.1.0\n\nIt contains all the info needed now and later. Note that the repo url is the\ngenerally pushable form, rather than the publically readable (L<https://…)>\nform. This is the best practice. Users of your repo don't need access to this\nurl, because the content is already in your repo. Only you and your\ncollaborators need this url to pull/push in the future.\n\nThe next command is the pull command. Normally you just give it the subrepo's\nsubdir path (although you can change the branch with -b), and it will get the\nother info from the subdir/.gitrepo file.\n\nThe pull command does these steps:\n\n=over\n\n=item * Fetch the upstream content\n\n=item * Check if anything needs pulling\n\n=item * Create a branch of local subrepo commits since last pull\n\n=item * Rebase this branch onto the upstream commits\n\n=item * Commit the HEAD of the rebased content\n\n=item * Update/amend the .gitrepo file\n\n=back\n\n=head3 Clean History\n\nI've talked a bit about clean history but let me show you a comparison between\nsubrepo and subtree. Let's run this command sequence using both methods. Note\nthe differences between I<both> the command syntax required, and the branch\nhistory produced.\n\nSubrepo first:\n\n    $ git subrepo clone git@github.com:user/abc\n    $ git subrepo clone git@github.com:user/def xyz\n    $ git subrepo pull abc\n    $ git subrepo pull xyz\n\nThe resulting history is:\n\n    * b1f60cc subrepo pull xyz\n    * 4fb0276 subrepo pull abc\n    * bcef2a0 subrepo clone git@github.com:user/def xyz\n    * bebf0db subrepo clone git@github.com:user/abc\n    * 64eeaa6 (origin/master, origin/HEAD) O HAI FREND\n\nCompare that to B<subtree>. This:\n\n    $ git subtree add abc git@github.com:user/abc master\n    $ git subtree add xyz git@github.com:user/def master\n    $ git subtree pull abc git@github.com:user/abc master\n    $ git subtree pull xyz git@github.com:user/def master\n\nProduces this:\n\n    * 739e45a (HEAD, master) Merge commit '5f563469d886d53e19cb908b3a64e4229f88a2d1'\n    |\\\n    | * 5f56346 Squashed 'xyz/' changes from 08c7421..365409f\n    * | 641f5e5 Merge commit '8d88e90ce5f653ed2e7608a71b8693a2174ea62a'\n    |\\ \\\n    | * | 8d88e90 Squashed 'abc/' changes from 08c7421..365409f\n    * | | 1703ed2 Merge commit '0e091b672c4bbbbf6bc4f6694c475d127ffa21eb' as 'xyz'\n    |\\ \\ \\\n    | | |/\n    | |/|\n    | * | 0e091b6 Squashed 'xyz/' content from commit 08c7421\n    | /\n    * | 07b77e7 Merge commit 'cd2b30a0229d931979ed4436b995875ec563faea' as 'abc'\n    |\\ \\\n    | |/\n    | * cd2b30a Squashed 'abc/' content from commit 08c7421\n    * 64eeaa6 (origin/master, origin/HEAD) O HAI FREND\n\nThis was from a minimal case. Subtree history (when viewed this way at least)\ngets unreasonably ugly fast. Subrepo history, by contrast, always looks as\nclean as shown.\n\nThe final command, push, bascially just does the pull/rebase dance above\ndescribed, and pushes the resulting history back. It does not squash the\ncommits made locally, because it assumed that when you changed the local\nsubrepo, you made messages that were intended to eventually be published\nback upstream.\n\n=head2 Conflict Resolution\n\nThe commands described above can also be done \"by hand\". If something fails\nduring a pull or push (generally in the rebasing) then the command will tell\nyou what to do to finish up.\n\nYou might choose to do everything by hand, and do your own merging strategies.\nThis is perfectly reasonable. The C<subrepo> command offers a few other helper\ncommands to help you get the job done:\n\n=over\n\n=item * C<fetch> - Fetch the upstream and create a C<< subrepo/remote/<subdir> >> ref.\n\n=item * C<branch> - Create a branch of local subdir commits since the last pull, called C<< subrepo/<subdir> >>.\n\n=item * C<commit> - Commit a merged branch's HEAD back into your repo.\n\n=item * C<status> - Show lots of useful info about the current state of the subrepos.\n\n=item * C<clean> - Remove branches, ref and remotes created by subrepo commands.\n\n=item * C<help> - Read the complete documentation!\n\n=back\n\n=head2 Conclusion\n\nHopefully by now, you see that submodules are a painful choice with a dubious\nfuture, and that subtree, while a solid idea has many usage issues.\n\nGive C<subrepo> a try. It's painless, easily revertable and just might be what\nthe doctor ordered.\n\n=head2 Reference Links\n\n=over\n\n=item * L<http://longair.net/blog/2010/06/02/git-submodules-explained/>\n\n=item * L<http://blogs.atlassian.com/2013/05/alternatives-to-git-submodule-git-subtree/>\n\n=back\n\n=cut\n"
        },
        {
          "name": "License",
          "type": "blob",
          "size": 1.0595703125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013-2020 Ingy döt Net\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.712890625,
          "content": "SHELL := bash\n\n# Make sure we have git:\nifeq ($(shell which git),)\n  $(error 'git' is not installed on this system)\nendif\n\n# Set variables:\nNAME := git-subrepo\nLIB  := lib/$(NAME)\nDOC  := doc/$(NAME).swim\nMAN1 := man/man1\nEXT  := $(LIB).d\nEXTS := $(shell find $(EXT) -type f) \\\n\t$(shell find $(EXT) -type l)\nSHARE = share\n\n# Install variables:\nPREFIX ?= /usr/local\nINSTALL_LIB  ?= $(DESTDIR)$(shell git --exec-path)\nINSTALL_EXT  ?= $(INSTALL_LIB)/$(NAME).d\nINSTALL_MAN1 ?= $(DESTDIR)$(PREFIX)/share/man/man1\n\n# Docker variables:\nDOCKER_TAG ?= 0.0.6\nDOCKER_IMAGE := ingy/bash-testing:$(DOCKER_TAG)\nBASH_VERSIONS ?= 5.1 5.0 4.4 4.3 4.2 4.1 4.0\nDOCKER_TESTS := $(BASH_VERSIONS:%=docker-test-%)\nGIT_VERSIONS := 2.45 2.40 2.30 2.29 2.25 2.17 2.7\n\nprove ?=\ntest ?= test/\nbash ?= 5.1\ngit ?= 2.45\n\n# Basic targets:\ndefault: help\n\nhelp:\n\t@echo 'Makefile rules:'\n\t@echo ''\n\t@echo 'test       Run all tests'\n\t@echo 'install    Install $(NAME)'\n\t@echo 'uninstall  Uninstall $(NAME)'\n\t@echo 'env        Show environment variables to set'\n\n.PHONY: test\ntest:\n\tprove $(prove) $(test)\n\ntest-all: test docker-tests\n\ndocker-test:\n\t$(call docker-make-test,$(bash),$(git))\n\ndocker-tests: $(DOCKER_TESTS)\n\n$(DOCKER_TESTS):\n\t$(call docker-make-test,$(@:docker-test-%=%),$(git))\n\n# Install support:\ninstall:\n\tinstall -d -m 0755 $(INSTALL_LIB)/\n\tinstall -C -m 0755 $(LIB) $(INSTALL_LIB)/\n\tinstall -d -m 0755 $(INSTALL_EXT)/\n\tinstall -C -m 0644 $(EXTS) $(INSTALL_EXT)/\n\tinstall -d -m 0755 $(INSTALL_MAN1)/\n\tinstall -C -m 0644 $(MAN1)/$(NAME).1 $(INSTALL_MAN1)/\n\n# Uninstall support:\nuninstall:\n\trm -f $(INSTALL_LIB)/$(NAME)\n\trm -fr $(INSTALL_EXT)\n\trm -f $(INSTALL_MAN1)/$(NAME).1\n\nenv:\n\t@echo \"export PATH=\\\"$$PWD/lib:\\$$PATH\\\"\"\n\t@echo \"export MANPATH=\\\"$$PWD/man:\\$$MANPATH\\\"\"\n\n# Doc rules:\n.PHONY: doc\nupdate: doc compgen\n\nforce:\n\ndoc: ReadMe.pod Intro.pod $(MAN1)/$(NAME).1\n\tperl pkg/bin/generate-help-functions.pl $(DOC) > \\\n\t    $(EXT)/help-functions.bash\n\nReadMe.pod: $(DOC) force\n\tswim --to=pod --wrap --complete $< > $@\n\nIntro.pod: doc/intro-to-subrepo.swim force\n\tswim --to=pod --wrap --complete $< > $@\n\n$(MAN1)/%.1: doc/%.swim Makefile force\n\tswim --to=man --wrap $< > $@\n\ncompgen: force\n\tperl pkg/bin/generate-completion.pl bash $(DOC) $(LIB) > \\\n\t    $(SHARE)/completion.bash\n\tperl pkg/bin/generate-completion.pl zsh $(DOC) $(LIB) > \\\n\t    $(SHARE)/zsh-completion/_git-subrepo\n\nclean:\n\trm -fr tmp test/tmp\n\ndefine docker-make-test\n\tdocker run --rm \\\n\t    -v $(PWD):/git-subrepo \\\n\t    -w /git-subrepo \\\n\t    $(DOCKER_IMAGE) \\\n\t\t/bin/bash -c ' \\\n\t\t    set -x && \\\n\t\t    [[ -d /bash-$(1) ]] && \\\n\t\t    [[ -d /git-$(2) ]] && \\\n\t\t    export PATH=/bash-$(1)/bin:/git-$(2)/bin:$$PATH && \\\n\t\t    bash --version && \\\n\t\t    git --version && \\\n\t\t    make test prove=$(prove) test=$(test) \\\n\t\t'\nendef\n"
        },
        {
          "name": "Meta",
          "type": "blob",
          "size": 0.5380859375,
          "content": "=meta: 0.0.2\n\nname: git-subrepo\nversion: 0.4.9\nabstract: Git Submodule Alternative\nhomepage: https://github.com/ingydotnet/git-subrepo#readme\nlicense: MIT\ncopyright: 2013-2024\n\nauthor:\n  name: Ingy döt Net\n  email: ingy@ingy.net\n  github: ingydotnet\n  twitter: ingydotnet\n  freenode: ingy\n  homepage: http://ingy.net\n\nrequires:\n  bash: 4.0.0\n  git: 2.7.0\ntest:\n  cmd: make test\ninstall: make install\n\ndevel:\n  git: git@github.org:ingydotnet/git-subrepo.git\n  irc: irc.freenode.net/gitcommands\n  bug: https://github.com/ingydotnet/git-subrepo/issues/\n"
        },
        {
          "name": "ReadMe.pod",
          "type": "blob",
          "size": 22.154296875,
          "content": "=pod\n\n=for comment\nDO NOT EDIT. This Pod was generated by Swim v0.1.48.\nSee http://github.com/ingydotnet/swim-pm#readme\n\n=encoding utf8\n\n=head1 Name\n\ngit-subrepo - Git Submodule Alternative\n\n=head1 Synopsis\n\n    git subrepo -h    # Help Overview\n\n    git subrepo clone <remote-url> [<subdir>]\n    git subrepo init <subdir>\n    git subrepo pull <subdir>\n    git subrepo push <subdir>\n\n    git subrepo fetch <subdir>\n    git subrepo branch <subdir>\n    git subrepo commit <subdir>\n    git subrepo config <subdir>\n\n    git subrepo status [<subdir>]\n    git subrepo clean <subdir>\n\n    git subrepo help [<command> | --all]\n    git subrepo version\n    git subrepo upgrade\n\n=head1 Description\n\nThis git command \"clones\" an external git repo into a subdirectory of your\nrepo. Later on, upstream changes can be pulled in, and local changes can be\npushed back. Simple.\n\n=head1 Benefits\n\nThis command is an improvement from C<git-submodule> and C<git-subtree>; two\nother git commands with similar goals, but various problems.\n\nIt assumes there are 3 main roles of people interacting with a repo, and\nattempts to serve them all well:\n\n=over\n\n=item * B<owner> - The person who authors/owns/maintains a repo.\n\n=item * B<users> - People who are just using/installing the repo.\n\n=item * B<collaborators> - People who commit code to the repo and subrepos.\n\n=back\n\nThe C<git-subrepo> command benefits these roles in the following ways:\n\n=over\n\n=item * Simple and intuitive commandline usage (with tab completion).\n\n=item * Users get your repo and all your subrepos just by cloning your repo.\n\n=item * Users do not need to install C<git-subrepo>, ever.\n\n=item * Collaborators do not need to install unless they want to push/pull.\n\n=item * Collaborators know when a subdir is a subrepo (it has a C<.gitrepo> file).\n\n=item * The C<.gitrepo> file never gets pushed back to the subrepo upstream.\n\n=item * Well named branches and remotes are generated for manual operations.\n\n=item * Owners do not deal with the complications of keeping submodules in sync.\n\n=item * Subrepo repositories can contain subrepos themselves.\n\n=item * Branching with subrepos JustWorks™.\n\n=item * Different branches can have different subrepos in different states, etc.\n\n=item * Moving/renaming/deleting a subrepo subdir JustWorks™.\n\n=item * You can C<init> an existing subdirectory into a subrepo.\n\n=item * Your git history is kept squeaky clean.\n\n=item * Upstream history (clone/pull) is condensed into a single commit.\n\n=item * Pulls can use a C<merge>, C<rebase> or C<force> strategies.\n\n=item * You can see the subrepo history with C<< git log subrepo/<subdir>/fetch >>.\n\n=item * Commits pushed back upstream are B<not> condensed (by default).\n\n=item * Trivial to try any subrepo operations and then reset back.\n\n=item * No configuration required.\n\n=item * Does not introduce history that messes up other git commands.\n\n=item * Fixes known rebase failures with C<git-subtree>.\n\n=back\n\n=head1 Installation\n\nThe best short answer is:\n\n    git clone https://github.com/ingydotnet/git-subrepo /path/to/git-subrepo\n    echo 'source /path/to/git-subrepo/.rc' >> ~/.bashrc\n\nThe complete \"Installation Instructions\" can be found below.\n\nNote: git-subrepo needs a git version (> 2.7) that supports worktree:s.\n\n=head1 Commands\n\nAll the B<subrepo> commands use names of actual Git commands and try to do\noperations that are similar to their Git counterparts. They also attempt to\ngive similar output in an attempt to make the subrepo usage intuitive to\nexperienced Git users.\n\nPlease note that the commands are I<not> exact equivalents, and do not take\nall the same arguments. Keep reading…\n\n=over\n\n=item C<< git subrepo clone <repository> [<subdir>] [-b <branch>] [-f] [-m <msg>] [--file=<msg file>] [-e] [--method <merge|rebase>] >>\n\nAdd a repository as a subrepo in a subdir of your repository.\n\nThis is similar in feel to C<git clone>. You just specify the remote repo url,\nand optionally a sub-directory and/or branch name. The repo will be fetched\nand merged into the subdir.\n\nThe subrepo history is I<squashed> into a single commit that contains the\nreference information. This information is also stored in a special file\ncalled C<< <subdir>/.gitrepo >>. The presence of this file indicates that the\ndirectory is a subrepo.\n\nAll subsequent commands refer to the subrepo by the name of the\nI<subdir>. From the subdir, all the current information about the subrepo\ncan be obtained.\n\nThe C<--force> option will \"reclone\" (completely replace) an existing subdir.\n\nThe C<--method> option will decide how the join process between branches are\nperformed. The default option is merge.\n\nThe C<clone> command accepts the C<--branch=> C<--edit>, C<--file>, C<--force>\nand C<--message=> options.\n\n=item C<< git subrepo init <subdir> [-r <remote>] [-b <branch>] [--method <merge|rebase>] >>\n\nTurn an existing subdirectory into a subrepo.\n\nIf you want to expose a subdirectory of your project as a published subrepo,\nthis command will do that. It will split out the content of a normal\nsubdirectory into a branch and start tracking it as a subrepo. Afterwards your\noriginal repo will look exactly the same except that there will be a C<<<subdir>/.gitrepo >> file.\n\nIf you specify the C<--remote> (and optionally the C<--branch>) option, the\nvalues will be added to the C<< <subdir>/.gitrepo >> file. The C<--remote>\noption is the upstream URL, and the C<--branch> option is the upstream branch\nto push to. These values will be needed to do a C<git subrepo push> command,\nbut they can be provided later on the C<push> command (and saved to C<<<subdir>/.gitrepo >> if you also specify the C<--update> option).\n\nNote: You will need to create the empty upstream repo and push to it on your\n      own, using C<< git subrepo push <subdir> >>.\n\nThe C<--method> option will decide how the join process between branches are\nperformed. The default option is merge.\n\nThe C<init> command accepts the C<--branch=> and C<--remote=> options.\n\n=item C<< git subrepo pull <subdir>|--all [-M|-R|-f] [-m <msg>] [--file=<msg file>] [-e] [-b <branch>] [-r <remote>] [-u] >>\n\nUpdate the subrepo subdir with the latest upstream changes.\n\nThe C<pull> command fetches the latest content from the remote branch pointed\nto by the subrepo's C<.gitrepo> file, and then tries to merge the changes into\nthe corresponding subdir. It does this by making a branch of the local commits\nto the subdir and then merging or rebasing (see below) it with the fetched\nupstream content. After the merge, the content of the new branch replaces your\nsubdir, the C<.gitrepo> file is updated and a single 'pull' commit is added to\nyour mainline history.\n\nThe C<pull> command will attempt to do the following commands in one go:\n\n    git subrepo fetch <subdir>\n    git subrepo branch <subdir>\n    git merge/rebase subrepo/<subdir>/fetch subrepo/<subdir>\n    git subrepo commit <subdir>\n    # Only needed for a consequential push:\n    git update-ref refs/subrepo/<subdir>/pull subrepo/<subdir>\n\nIn other words, you could do all the above commands yourself, for the same\neffect. If any of the commands fail, subrepo will stop and tell you to finish\nthis by hand. Generally a failure would be in the merge or rebase part, where\nconflicts can happen. Since Git has lots of ways to resolve conflicts to your\npersonal tastes, the subrepo command defers to letting you do this by hand.\n\nWhen pulling new data, the method selected in clone/init is used. This has no\neffect on the final result of the pull, since it becomes a single commit. But\nit does affect the resulting C<< subrepo/<subdir> >> branch, which is often\nused for a subrepo C<push> command. See 'push' below for more information. If\nyou want to change the method you can use the C<config> command for this.\n\nWhen you pull you can assume a fast-forward strategy (default) or you can\nspecify a C<--rebase>, C<--merge> or C<--force> strategy. The latter is the\nsame as a C<clone --force> operation, using the current remote and branch.\n\nLike the C<clone> command, C<pull> will squash all the changes (since the last\npull or clone) into one commit. This keeps your mainline history nice and\nclean. You can easily see the subrepo's history with the C<git log> command:\n\n    git log refs/subrepo/<subdir>/fetch\n\nThe set of commands used above are described in detail below.\n\nThe C<pull> command accepts the C<--all>, C<--branch=>, C<--edit>, C<--file>,\nC<--force>, C<--message=>, C<--remote=> and C<--update> options.\n\n=item C<< git subrepo push <subdir>|--all [<branch>] [-m msg] [--file=<msg file>] [-r <remote>] [-b <branch>] [-M|-R] [-u] [-f] [-s] [-N] >>\n\nPush a properly merged subrepo branch back upstream.\n\nThis command takes the subrepo branch from a successful pull command and\npushes the history back to its designated remote and branch. You can also use\nthe C<branch> command and merge things yourself before pushing if you want to\n(although that is probably a rare use case).\n\nThe C<push> command requires a branch that has been properly merged/rebased\nwith the upstream HEAD (unless the upstream HEAD is empty, which is common\nwhen doing a first C<push> after an C<init>). That means the upstream HEAD is\none of the commits in the branch.\n\nBy default the branch ref C<< refs/subrepo/<subdir>/pull >> will be pushed,\nbut you can specify a (properly merged) branch to push.\n\nAfter that, the C<push> command just checks that the branch contains the\nupstream HEAD and then pushes it upstream.\n\nThe C<--force> option will do a force push. Force pushes are typically\ndiscouraged. Only use this option if you fully understand it. (The C<--force>\noption will NOT check for a proper merge. ANY branch will be force pushed!)\n\nThe C<push> command accepts the C<--all>, C<--branch=>, C<--dry-run>, C<--file>, C<--force>, C<--merge>, C<--message>, C<--rebase>, C<--remote=>, C<--squash> and C<--update> options.\n\n=item C<< git subrepo fetch <subdir>|--force --all [-r <remote>] [-b <branch>] >>\n\nFetch the remote/upstream content for a subrepo.\n\nIt will create a Git reference called C<< subrepo/<subdir>/fetch >> that\npoints at the same commit as C<FETCH_HEAD>. It will also create a remote\ncalled C<< subrepo/<subdir> >>. These are temporary and you can easily remove\nthem with the subrepo C<clean> command.\n\nThe C<fetch> command accepts the C<--force>, C<--all>, C<--branch=> and C<--remote=> options.\n\n=item C<< git subrepo branch <subdir>|--all [-f] [-F] >>\n\nCreate a branch with local subrepo commits.\n\nScan the history of the mainline for all the commits that affect the C<subdir>\nand create a new branch from them called C<< subrepo/<subdir> >>.\n\nThis is useful for doing C<pull> and C<push> commands by hand.\n\nUse the C<--force> option to write over an existing C<< subrepo/<subdir>\n>> branch.\n\nThe C<branch> command accepts the C<--all>, C<--fetch> and C<--force> options.\n\n=item C<< git subrepo commit <subdir> [<subrepo-ref>] [-m <msg>] [--file=<msg file>] [-e] [-f] [-F] >>\n\nAdd subrepo branch to current history as a single commit.\n\nThis command is generally used after a hand-merge. You have done a C<subrepobranch> and merged (rebased) it with the upstream. This command takes the HEAD\nof that branch, puts its content into the subrepo subdir and adds a new commit\nfor it to the top of your mainline history.\n\nThis command requires that the upstream HEAD be in the C<< subrepo/<subdir> >>\nbranch history. That way the same branch can push upstream. Use the C<--force>\noption to commit anyway.\n\nThe C<commit> command accepts the C<--edit>, C<--fetch>, C<--file>, C<--force>\nand C<--message=> options.\n\n=item C<< git subrepo status [<subdir>|--all|--ALL] [-F] [-q|-v] >>\n\nGet the status of a subrepo. Uses the C<--all> option by default. If the C<--quiet> flag is used, just print the subrepo names, one per line.\n\nThe C<--verbose> option will show all the recent local and upstream commits.\n\nUse C<--ALL> to show the subrepos of the subrepos (ie the\n\"subsubrepos\"), if any.\n\nThe C<status> command accepts the C<--all>, C<--ALL>, C<--fetch>, C<--quiet>\nand C<--verbose> options.\n\n=item C<< git subrepo clean <subdir>|--all|--ALL [-f] >>\n\nRemove artifacts created by C<fetch> and C<branch> commands.\n\nThe C<fetch> and C<branch> operations (and other commands that call them)\ncreate temporary things like refs, branches and remotes. This command removes\nall those things.\n\nUse C<--force> to remove refs. Refs are not removed by default because they\nare sometimes needed between commands.\n\nUse C<--all> to clean up after all the current subrepos. Sometimes you might\nchange to a branch where a subrepo doesn't exist, and then C<--all> won't find\nit. Use C<--ALL> to remove any artifacts that were ever created by subrepo.\n\nTo remove ALL subrepo artifacts:\n\n    git subrepo clean --ALL --force\n\nThe C<clean> command accepts the C<--all>, C<--ALL>, and C<--force> options.\n\n=item C<< git subrepo config <subdir> <option> [<value>] [-f] >>\n\nRead or update configuration values in the subdir/.gitrepo file.\n\nBecause most of the values stored in the .gitrepo file are generated you\nwill need to use C<--force> if you want to change anything else then the\nC<method> option.\n\nExample to update the C<method> option for a subrepo:\n\n    git subrepo config foo method rebase\n\n=item C<< git subrepo help [<command>|--all] >>\n\nSame as C<git help subrepo>. Will launch the manpage. For the shorter usage,\nuse C<git subrepo -h>.\n\nUse C<< git subrepo help <command> >> to get help for a specific command. Use\nC<--all> to get a summary of all commands.\n\nThe C<help> command accepts the C<--all> option.\n\n=item C<git subrepo version [-q|-v]>\n\nThis command will display version information about git-subrepo and its\nenvironment. For just the version number, use C<git subrepo --version>. Use\nC<--verbose> for more version info, and C<--quiet> for less.\n\nThe C<version> command accepts the C<--quiet> and C<--verbose> options.\n\n=item C<git subrepo upgrade>\n\nUpgrade the C<git-subrepo> software itself. This simply does a C<git pull>\non the git repository that the code is running from. It only works if you\nare on the C<master> branch. It won't work if you installed C<git-subrepo>\nusing C<make install>; in that case you'll need to C<make install> from the\nlatest code.\n\n=back\n\n=head1 Command Options\n\n=over\n\n=item C<-h>\n\nShow a brief view of the commands and options.\n\n=item C<--help>\n\nGives an overview of the help options available for the subrepo command.\n\n=item C<--version>\n\nPrint the git-subrepo version. Just the version number. Try the C<version>\ncommand for more version info.\n\n=item C<--all> (C<-a>)\n\nIf you have multiple subrepos, issue the command to all of them (if\napplicable).\n\n=item C<--ALL> (C<-A>)\n\nIf you have subrepos that also have subrepos themselves, issue the command to\nALL of them. Note that the C<--ALL> option only works for a subset of the\ncommands that C<--all> works for.\n\n=item C<< --branch=<branch-name> >> (C<< -b <branch-name> >>)\n\nUse a different upstream branch-name than the remote HEAD or the one saved in\nC<.gitrepo> locally.\n\n=item C<--dry-run> (C<-N>)\n\nFor the push command, do everything up until the push and then print out the\nactual C<git push> command needed to finish the operation.\n\n=item C<--edit> (C<-e>)\n\nEdit the commit message before committing.\n\n=item C<--fetch> (C<-F>)\n\nUse this option to fetch the upstream commits, before running the command.\n\n=item C<< --file=<commit msg file> >>\n\nSupply your own commit message from a file\n\n=item C<--force> (C<-f>)\n\nUse this option to force certain commands that fail in the general case.\n\nNOTE: The C<--force> option means different things for different commands.\n      Read the command specific doc for the exact meaning.\n\n=item C<--merge> (C<-M>)\n\nUse a C<merge> strategy to include upstream subrepo commits on a pull (or\nsetup for push).\n\n=item C<< --message=<message> >> (C<< -m <message> >>)\n\nSpecify your own commit message on the command line.\n\n=item C<--rebase> (C<-R>)\n\nUse a C<rebase> strategy to include upstream subrepo commits on a pull (or\nsetup for push).\n\n=item C<< --remote=<remote-url> >> (C<< -r <remote-url> >>)\n\nUse a different remote-url than the one saved in C<.gitrepo> locally.\n\n=item C<--squash> (C<-s>)\n\nSquash all commits on a push into one new commit.\n\n=item C<--update> (C<-u>)\n\nIf C<--branch> or C<--remote> are used, and the command updates the\nC<.gitrepo> file, include these values to the update.\n\n=back\n\n=head1 Output Options\n\n=over\n\n=item C<--quiet> (C<-q>)\n\nPrint as little info as possible. Applicable to most commands.\n\n=item C<--verbose> (C<-v>)\n\nPrint more information about the command execution and results. Applicable to\nmost commands.\n\n=item C<--debug> (C<-d>)\n\nShow the actual git (and other) commands being executed under the hood.\nApplicable to most commands.\n\n=item C<--DEBUG> (C<-x>)\n\nUse the Bash C<set -x> option which prints every command before it is\nrun. VERY noisy, but extremely useful in deep debugging. Applicable to\nall commands.\n\n=back\n\n=head1 Environment Variables\n\nThe C<git-subrepo> command exports and honors some environment variables:\n\n=over\n\n=item C<GIT_SUBREPO_ROOT>\n\nThis is set by the C<.rc> file, if you use that method to install / enable C<git-subrepo>. It contains the path of the C<git-subrepo> repository.\n\n=item C<GIT_SUBREPO_RUNNING>\n\nThis variable is exported when C<git-subrepo> is running. It is set to the pid\nof the C<git-subrepo> process that is running. Other processes, like git hooks\nfor instance, can use this information to adjust accordingly.\n\n=item C<GIT_SUBREPO_COMMAND>\n\nThis variable is exported when C<git-subrepo> is running. It is set to the\nname of the C<git-subrepo> subcommand that is running.\n\n=item C<GIT_SUBREPO_PAGER>\n\nUse this to specify the pager to use for long output commands. Defaults to\nC<$PAGER> or C<less>.\n\n=item C<GIT_SUBREPO_QUIET>\n\nSet this for quiet (C<-q>) output.\n\n=item C<GIT_SUBREPO_VERBOSE>\n\nSet this for verbose (C<-v>) output.\n\n=item C<GIT_SUBREPO_DEBUG>\n\nSet this for debugging (C<-d>) output.\n\n=back\n\n=head1 Installation Instructions\n\nThere are currently 3 ways to install C<git-subrepo>. For all of them you need\nto get the source code from GitHub:\n\n    git clone https://github.com/ingydotnet/git-subrepo /path/to/git-subrepo\n\nThe first installation method is preferred: C<source> the C<.rc> file. Just\nadd a line like this one to your shell startup script:\n\n    source /path/to/git-subrepo/.rc\n\nThat will modify your C<PATH> and C<MANPATH>, and also enable command\ncompletion.\n\nThe second method is to do these things by hand. This might afford you more\ncontrol of your shell environment. Simply add the C<lib> and C<man>\ndirectories to your C<PATH> and C<MANPATH>:\n\n    export GIT_SUBREPO_ROOT=\"/path/to/git-subrepo\"\n    export PATH=\"/path/to/git-subrepo/lib:$PATH\"\n    export MANPATH=\"/path/to/git-subrepo/man:$MANPATH\"\n\nSee below for info on how to turn on Command Completion.\n\nThe third method is a standard system install, which puts C<git-subrepo> next\nto your other git commands:\n\n    make install        # Possibly with 'sudo'\n\nThis method does not account for upgrading and command completion yet.\n\n=head2 Windows\n\nThis command is known to work in these Windows environments:\n\n=over\n\n=item * Git for Windows -- L<https://git-for-windows.github.io/>\n\n=item * Babun -- L<http://babun.github.io/>\n\n=item * Cygwin -- L<https://www.cygwin.com/>\n\n=back\n\nLet us know if there are others that it works (or doesn't work) in.\n\n=head1 Testing\n\nThe C<git-subrepo> repository comes with a extensive test suite. You can\nrun it with:\n\n    make test\n\nor if you don't have C<make> on your system:\n\n    prove -v test\n\n=head1 Upgrading\n\nIf you used the C<.rc> or C<PATH> method of installation, just run this to\nupgrade C<git-subrepo>:\n\n    git subrepo upgrade\n\nOr (same thing):\n\n    cd /path/to/git-subrepo\n    git pull\n\nIf you used C<make install> method, then run this again (after C<git pull>):\n\n    make install        # Possibly with 'sudo'\n\n=head1 Command Completion\n\nThe C<git subrepo> command supports C<< <TAB> >>-based command completion. If\nyou don't use the C<.rc> script (see Installation, above), you'll need to\nenable this manually to use it.\n\n=head2 In Bash\n\nIf your Bash setup does not already provide command completion for Git, you'll\nneed to enable that first:\n\n    source <Git completion script>\n\nOn your system, the Git completion script might be found at any of the\nfollowing locations (or somewhere else that we don't know about):\n\n=over\n\n=item * C</etc/bash_completion.d/git>\n\n=item * C</usr/share/bash-completion/git>\n\n=item * C</usr/share/bash-completion/completions/git>\n\n=item * C</opt/local/share/bash-completion/completions/git>\n\n=item * C</usr/local/etc/bash_completion.d/git>\n\n=item * C<~/.homebrew/etc/bash_completion.d/git>\n\n=back\n\nIn case you can't find any of these, this repository contains a copy of the\nGit completion script:\n\n    source /path/to/git-subrepo/share/git-completion.bash\n\nOnce Git completion is enabled (whether you needed to do that manually or\nnot), you can turn on C<git-subrepo> completion with a command like this:\n\n    source /path/to/git-subrepo/share/completion.bash\n\n=head2 In zsh\n\nIn the Z shell (zsh), you can manually enable C<git-subrepo> completion by\nadding the following line to your C<~/.zshrc>, B<before> the C<compinit>\nfunction is called:\n\n    fpath=('/path/to/git-subrepo/share/zsh-completion' $fpath)\n\n=head1 Status\n\nThe git-subrepo command has been used in production and seems to get the job\ndone. Development is still ongoing but mostly just for fixing bugs.\n\nTrying subrepo out is simple and painless (this is not C<git submodule>).\nNothing is permanent (if you do not push to shared remotes). ie You can always\nplay around and reset back to the beginning without pain.\n\nThis command has a test suite (run C<make test>), but surely has many bugs. If\nyou have expertise with Git and subcommands, please review the code, and file\nissues on anything that seems wrong.\n\nIf you want to chat about the C<git-subrepo> command, join C<#gitcommands> on\nC<irc.freenode.net>.\n\n=head1 Notes\n\n=over\n\n=item * Works on POSIX systems: Linux, BSD, OSX, etc.\n\n=item * Works on various Windows environments. See \"Windows\" section above.\n\n=item * The C<git-subrepo> repo itself has 2 subrepos under the C<ext/> subdirectory.\n\n=item * Written in (very modern) Bash, with full test suite. Take a look.\n\n=item * A C<.gitrepo> file never is in the top level dir (next to a C<.git/> dir).\n\n=back\n\n=head1 Authors\n\n=over\n\n=item * Ingy döt Net <ingy@ingy.net>\n\n=item * Magnus Carlsson <grimmymail@gmail.com>\n\n=item * Austin Morgan <admorgan@morgancomputers.net>\n\n=back\n\n=head1 License and Copyright\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2024 Ingy döt Net\n\n=cut\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "note",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}