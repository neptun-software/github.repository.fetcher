{
  "metadata": {
    "timestamp": 1736568278890,
    "page": 173,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "e-m-b-a/emba",
      "stars": 2828,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1240234375,
          "content": "Dockerfile\ndocker-compose.yml\n.dockerignore\n.git\n.github\ndocumentation\nCONTRIBUTING.md\nLICENSE\nREADME.md\nlog*\ncheck_project.sh\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.21484375,
          "content": ".idea/\nlog*/\ndir-combined.yara\nexternal/\nmodules_local/\ntools/\n!external/.keep\nconfig/vt_api_key.txt\nconfig/emba_updater\nconfig/emba_updater_data\nconfig/module_blacklist.txt\nconfig/jtr_wordlist.txt\nconfig/gpt_config.env\n"
        },
        {
          "name": ".lycheeignore",
          "type": "blob",
          "size": 0.1748046875,
          "content": "https://twitter.com/*\nhttps://www.cyberciti.biz/*\nhttps://www.gnu.org/*\n.*style/style.css\n.*style/emba.svg\n.*style/favicon.png\n.*TIMELINK.*\n.*embarkBackUrl.*\n.*helpers/index.html\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.345703125,
          "content": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n\\[TODO].\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.837890625,
          "content": "# Contributing to *EMBA*\n\nContributions to *EMBA* are always welcome. This document explains the general requirements for contributions and the recommended preparation steps.\nIt also sketches the typical integration process of patches.\n\n## 1) Contribution Checklist\n\n\n- use git to manage your changes \\[*recommended*]\n\n- add the required copyright header to each new file introduced, see\n  [licensing information](./LICENSE) \\[**required**]\n\n- structure patches logically, in small steps \\[**required**]\n  - one separable functionality/fix/refactoring = one patch\n  - do not mix those three into a single patch (e.g., first refactor, then add a new functionality that builds onto the refactoring)\n  - after each patch, *EMBA* has to work. Do not add\n    even temporary breakages inside a patch series (helps when tracking down bugs)\n  - use `git rebase -i` to restructure a patch series\n\n- base patches on top of latest master or - if there are dependencies - on next\n  (note: next is an integration branch that may change non-linearly)\n\n- add signed-off to all patches \\[**required**]\n  - to certify the \"Developer's Certificate of Origin\", see below\n  - check with your employer when not working on your own!\n\n- test your code with shellcheck \\[**required**] \n  - see the included [codechecker script](./check_project.sh)\n  - shellcheck should not be disabled on areas with issues -> solve these problems before the PR\n\n- test your code in strict mode (EMBA parameter -S) \\[**required**]\n  - all code should be strict mode compatible\n\n- send reminder if nothing happens after about a week\n\n- feel free to mention [EMBA team members](https://github.com/orgs/e-m-b-a/people) in the issue/PR.\n\n- the code needs to work on the latest Kali Linux and Ubuntu 22.04LTS (other distributions are welcome but currently not tested)\n\n## 2) Code Guidelines\n\n- General: Identation should be 2 spaces (no tab character)\n\n- Comments: use # sign followed by a space. When needed, create a comment block. Blank lines: allowed\n\n- If you are using an additional binary make sure it's available on the system before calling it\n  - Include it into the dependency check and in the installer\n\n- All functions use snake_case (e.g. `test_xyz()`). One blank lines between functions.\n\n- Variables: Variables should be capitalized, with underscore as word separator (e.g. `PROCESS_EXISTS=1`)\n\n- If you use external code, add `# Test source: \\[LINK TO CODE]` above\n\n- Scope of variables: Use local variables if possible\n\n- Variables always need to be initialized\n  - e.g., local lVARIABLE=\"\"\n\n- Local variables should always start with \"l\"\n  - e.g., local lVARIABLE=\"\"\n  - Note: This will be enforced in the future!\n\n- Use parameters to functions\n  - work with local variables inside the functions\n  - do not rely on globals if not needed\n\n- Use `export` for variables which aren't only used in one function\n  - From bash perspective it isn't necessary, but helps for readability\n\n- We do not accept the usage of variables anymore that are not declared as local or external -> no indirect globals\n\n- Don't use backticks anymore, use $(..) instead\n\n- Don't use `grep -R` for recursive grep search. Instead use `find -type f -exec grep something {} \\;` or use `grep -r`\n\n- Use double square \\[[]] brackets (conditional expressions) instead of single square [] brackets\n\n- We require variable braces. Instead of using `$VARIABLE` please use `${VARIABLE}`\n\n- Whenever possible try to avoid `tr` `sed` `awk` and use bash internal functions instead, see e.g. [bash shell parameter substitution](https://www.cyberciti.biz/tips/bash-shell-parameter-substitution-2.html). Using bash internals is faster as it does not fork, fopen and pipes the results back.\n\n- At least [\"weak quoting\"](https://wiki.bash-hackers.org/syntax/quoting#weak_quoting) is required - unquoted variable processing is not permitted\n\n- Code tests: Use shellcheck and semgrep to test your code\n\n- Code tests: The included `./check_project.sh` script performs multiple coding checks automatically. It is highly recommend to run this script before initiating a PR.\n\n- Code tests: Run EMBA in STRICT mode (parameter -S) to ensure everything is correct (new code has to be STRICT mode compatible and needs to pass shellcheck and semgrep tests).\n\n## 3) Developer's Certificate of Origin 1.1\n\nWhen signing-off a patch for this project like this\n\n    Signed-off-by: Random J Developer <random@developer.example.org>\n\nusing your real name (no pseudonyms or anonymous contributions), you declare the\nfollowing:\n\n    By making a contribution to this project, I certify that:\n\n        (a) The contribution was created in whole or in part by me and I\n            have the right to submit it under the open source license\n            indicated in the file; or\n\n        (b) The contribution is based upon previous work that, to the best\n            of my knowledge, is covered under an appropriate open source\n            license and I have the right under that license to submit that\n            work with modifications, whether created in whole or in part\n            by me, under the same open source license (unless I am\n            permitted to submit under a different license), as indicated\n            in the file; or\n\n        (c) The contribution was provided directly to me by some other\n            person who certified (a), (b) or (c) and I have not modified\n            it.\n\n        (d) I understand and agree that this project and the contribution\n            are public and that a record of the contribution (including all\n            personal information I submit with it, including my sign-off) is\n            maintained indefinitely and may be redistributed consistent with\n            this project or the open source license(s) involved.\n\nSee also [here](https://www.kernel.org/doc/Documentation/process/submitting-patches.rst)\n(Section 11, \"Sign your work\") for further background on this process which was\nadopted from the Linux kernel.\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 2.1572265625,
          "content": "# EMBA - CONTRIBUTORS\n\n==========================================================================================\n\nThe EMBA project is very thankful to the individuals who contributed to the project.\n\nWant to contribute as well? Here are some suggestions:\n\n- Create new module for a test currently not supported by EMBA\n- Report or fix (unexpected) errors\n- Share missing results and findings\n- Share firmware where EMBA is not performing as expected\n- Improve code quality\n- Improve performance\n- Improve textblocks for [report templates](https://github.com/e-m-b-a/emba/tree/master/config/report_templates)\n- Improve license and version detection [configuration](https://github.com/e-m-b-a/emba/blob/master/config/bin_version_strings.cfg)\n- Review the [wiki](https://github.com/e-m-b-a/emba/wiki) for outdated information and open dedicated issues\n- Check the current [issues](https://github.com/e-m-b-a/emba/issues) if some issue needs help.\n- For interested first-time contributors we created the label [good first issue](https://github.com/e-m-b-a/emba/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\n\nSee [CONTRIBUTING.md](https://github.com/e-m-b-a/emba/blob/master/CONTRIBUTING.md) for more details.\n\n==========================================================================================\n\n## Contributors\n\nThese people have contributed to EMBA:\n\n* [Michael Messner (original author, maintainer)](https://github.com/m-1-k-3)\n* [Pascal Eckmann (original author)](https://github.com/p4cx)\n* [Benedikt Kuehne (EMBArk maintainer)](https://github.com/BenediktMKuehne)\n* [HoxhaEndri](https://github.com/HoxhaEndri)\n* [Arnold Unterauer](https://github.com/Anemosx)\n* [seanog8](https://github.com/seanog8)\n* [Stefan Haboeck](https://github.com/StefanHaboeck)\n* [jblu42](https://github.com/jblu42)\n* [413x8](https://github.com/413x8)\n* [floyd-fuh](https://github.com/floyd-fuh)\n* [firmianay](https://github.com/firmianay)\n* [mj138](https://github.com/mj138)\n* [Grezzo](https://github.com/Grezzo)\n* [nightlark](https://github.com/nightlark)\n\n\n==========================================================================================\n  [EMBA - Embedded Analyzer](https://www.securefirmware.de)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.4560546875,
          "content": "FROM kalilinux/kali-rolling\n# FROM kalilinux/kali-last-release\n\nCOPY ./installer.sh /\nCOPY [\"./installer\", \"./helpers/helpers_emba_load_strict_settings.sh\", \"/installer/\"]\n\n\nWORKDIR /\n\n# updates system\nRUN apt-get update && \\\n    apt-get -y upgrade && \\\n    apt-get -y install wget kmod procps sudo dialog apt curl git && \\\n    yes | sudo /installer.sh -s -D && \\\n    ulimit -c 0 && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /emba\n\n# nosemgrep\nENTRYPOINT [ \"/bin/bash\" ]\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3203125,
          "content": "\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\nCopyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.98828125,
          "content": "<!-- \nEMBA - EMBEDDED LINUX ANALYZER\n\nCopyright 2020-2023 Siemens AG\nCopyright 2020-2024 Siemens Energy AG\n\nEMBA comes with ABSOLUTELY NO WARRANTY. This is free software, and you are\nwelcome to redistribute it under the terms of the GNU General Public License.\nSee LICENSE file for usage of this software.\n\nEMBA is licensed under GPLv3\n\nAuthor(s): Michael Messner, Pascal Eckmann, Benedikt Kühne\n-->\n\n<p align=\"center\">\n  <img src=\"./helpers/emba.svg\" width=\"200\"/>\n</p>\n<p align=\"center\">\n  <a href=\"https://github.com/koalaman/shellcheck\"><img src=\"https://github.com/e-m-b-a/emba/workflows/ShellCheck/badge.svg?branch=master\" /></a>\n  <a href=\"https://www.gnu.org/software/bash/\"><img src=\"https://img.shields.io/badge/Made%20with-Bash-1f425f.svg\" /></a>\n  <a href=\"https://github.com/e-m-b-a/emba/blob/master/LICENSE\"><img src=\"https://img.shields.io/github/license/e-m-b-a/emba?label=License\"></a>\n  <a href=\"https://github.com/e-m-b-a/emba/graphs/contributors\"><img src=\"https://img.shields.io/github/contributors/e-m-b-a/emba?color=9ea\"></a>\n  <a href=\"https://github.com/e-m-b-a/emba/stargazers\"><img src=\"https://img.shields.io/github/stars/e-m-b-a/emba?label=Stars\"></a>\n  <a href=\"https://github.com/e-m-b-a/emba/network/members\"><img src=\"https://img.shields.io/github/forks/e-m-b-a/emba?label=Forks\"></a>\n  <a href=\"https://hub.docker.com/r/embeddedanalyzer/emba\"><img src=\"https://img.shields.io/docker/pulls/embeddedanalyzer/emba\"></a>\n  <a href=\"https://twitter.com/intent/tweet?text=Check%20out%20EMBA%20-%20The%20Firmware%20security%20scanner!%20https://github.com/e-m-b-a/emba\"><img src=\"https://img.shields.io/twitter/url.svg?style=social&url=https%3A%2F%2Fgithub.com%2Fe-m-b-a%2Femba\"></a>\n</p>\n\n# EMBA\n## The security analyzer for firmware of embedded devices\n\n*EMBA* is designed as the central firmware analysis and SBOM tool for penetration testers, product security teams, developers and responsible product managers. It supports the complete security analysis process starting with *firmware extraction*, doing *static analysis* and *dynamic analysis* via emulation, building the SBOM and finally generating a web based vulnerability report. *EMBA* automatically discovers possible weak spots and vulnerabilities in firmware. Examples are insecure binaries, old and outdated software components, potentially vulnerable scripts, or hard-coded passwords. *EMBA* is a command line tool with the possibility to generate an easy-to-use web report for further analysis.\n\n*EMBA* assists the penetration testers, product security teams and developers in the identification of weak spots and vulnerabilities in the firmware image. *EMBA* provides as much information as possible about the firmware, that the tester can decide on focus areas and is responsible for verifying and interpreting the results.\n\n[![Watch EMBA](https://raw.githubusercontent.com/wiki/e-m-b-a/emba/images/youtube-emba.png)](https://youtu.be/_dvdy3klFFY \"Watch EMBA\")\n\n----------------------\n\n#### Links to the wiki for more detailed information\n\n- [Home](https://github.com/e-m-b-a/emba/wiki)\n- [Feature overview](https://github.com/e-m-b-a/emba/wiki/Feature-overview)\n- [Installation](https://github.com/e-m-b-a/emba/wiki/Installation)\n- [Usage](https://github.com/e-m-b-a/emba/wiki/Usage)\n- [FAQ](https://github.com/e-m-b-a/emba/wiki/FAQ)\n\n## Installation\n\nBefore running *EMBA* make sure, that you have [installed](https://github.com/e-m-b-a/emba/wiki/Installation) all dependencies with the installation script and met the [prerequisites](https://github.com/e-m-b-a/emba/wiki/Installation#prerequisites)\n\n```console\ngit clone https://github.com/e-m-b-a/emba.git\ncd emba\nsudo ./installer.sh -d\n```\n\n## Quick start with default scan profile:\n```console\nsudo ./emba -l ~/log -f ~/firmware -p ./scan-profiles/default-scan.emba\n\n```\n## Quick start with default SBOM profile:\nFor further details on EMBA's SBOM capabilities check the [wiki](https://github.com/e-m-b-a/emba/wiki/SBOM-environment)\n```console\nsudo ./emba -l ~/log -f ~/firmware -p ./scan-profiles/default-sbom.emba\n\n```\n## Quick start with system-emulation scan profile:\nFor further details on EMBA's system-emulation engine check the [wiki](https://github.com/e-m-b-a/emba/wiki/System-emulation).\n```console\nsudo ./emba -l ~/log -f ~/firmware -p ./scan-profiles/default-scan-emulation.emba\n\n```\n\n---\n*EMBA* supports multiple testing and reporting [options](https://github.com/e-m-b-a/emba/wiki/Usage#arguments). For more details check the [wiki](https://github.com/e-m-b-a/emba/wiki/Usage).\n\n## Get involved\nThe IoT is growing, the development is ongoing, and there are many new features that we want to add.\nWe welcome [pull requests](https://github.com/e-m-b-a/emba/pulls) and [issues](https://github.com/e-m-b-a/emba/issues) on GitHub. Also check the [CONTRIBUTING](./CONTRIBUTING.md) and [CONTRIBUTORS](./CONTRIBUTORS.md) documentation for further details on how to get part of the _EMBA_ commmunity.\n\n## Team\n\n[The core EMBA Team](https://github.com/orgs/e-m-b-a/people)\n\n[Contributors](https://github.com/e-m-b-a/emba/blob/master/CONTRIBUTORS.md)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.4423828125,
          "content": "# Security Policy\n\n_EMBA_ is a platform for optimizing our research and testing tasks in the field of IoT, OT, ICS and general embedded analysis. Because of this, we include code quite early and sometimes in a very raw state. We do not recommend setting up _EMBA_ as a productive environment or in an unprotected environment! If you are using _EMBA_ you should know what you are doing.\n\n# WARNING\n\n_EMBA_ is using multiple protections layers like chroot, docker, read-only filesystem, non executable mounts and disabled networking functionality.\nNevertheless, _EMBA_ should only be used on test systems! It should not be installed/deployed on production systems.\n\nThere are multiple reasons for that:\n* The _EMBA_ docker container is running in privileged mode which will result in full system compromise if you are testing malicious firmware.\n* _EMBA_ automatically executes untrusted code from the firmware which could lead to breakouts that are able to compromise the host system.\n* _EMBA_ automatically builds and boots a firmware image based on the untrusted firmware under test.\n\n## Reporting a Vulnerability\n\nIf there is a security problem within _EMBA_ please open an issue or contact us via one of the following ways:\n* [Open an Issue](https://github.com/e-m-b-a/emba/issues)\n* [Start a Discussions](https://github.com/e-m-b-a/emba/discussions)\n* [PM us via Twitter](https://twitter.com/securefirmware)\n* [PM us via Mastodon](https://infosec.exchange/@securefirmware)\n"
        },
        {
          "name": "check_project.sh",
          "type": "blob",
          "size": 17.2783203125,
          "content": "#!/bin/bash -p\n\n# EMBA - EMBEDDED LINUX ANALYZER\n#\n# Copyright 2020-2023 Siemens AG\n# Copyright 2020-2024 Siemens Energy AG\n#\n# EMBA comes with ABSOLUTELY NO WARRANTY. This is free software, and you are\n# welcome to redistribute it under the terms of the GNU General Public License.\n# See LICENSE file for usage of this software.\n#\n# EMBA is licensed under GPLv3\n# SPDX-License-Identifier: GPL-3.0-only\n#\n# Author(s): Michael Messner, Pascal Eckmann\n# Contributor(s): Benedikt Kuehne\n\n# Description:  Check all shell scripts inside ./helpers, ./modules, emba and itself with shellchecker\n\nSTRICT_MODE=1\n\nINSTALLER_DIR=\"./installer\"\nHELP_DIR=\"./helpers\"\nMOD_DIR=\"./modules\"\nMOD_DIR_LOCAL=\"./modules_local\"\nCONF_DIR=\"./config\"\nEXT_DIR=\"./external\"\nREP_DIR=\"${CONF_DIR}/report_templates\"\n\nif [[ \"${STRICT_MODE}\" -eq 1 ]]; then\n  # shellcheck source=./installer/wickStrictModeFail.sh\n  source \"${INSTALLER_DIR}\"/wickStrictModeFail.sh\n  export DEBUG_SCRIPT=0\n  # shellcheck source=./helpers/helpers_emba_load_strict_settings.sh\n  source \"${HELP_DIR}\"/helpers_emba_load_strict_settings.sh\n  load_strict_mode_settings\n  trap 'wickStrictModeFail $?' ERR  # The ERR trap is triggered when a script catches an error\nfi\n\nexport GREEN='\\033[0;32m'\nexport ORANGE='\\033[0;33m'\nexport RED='\\033[0;31m'\nexport BLUE='\\033[0;34m'\nexport BOLD='\\033[1m'\nexport NC='\\033[0m' # no color\n\nSOURCES=()\nMODULES_TO_CHECK_ARR=()\nMODULES_TO_CHECK_ARR_TAB=()\nMODULES_TO_CHECK_ARR_SEMGREP=()\nMODULES_TO_CHECK_ARR_DOCKER=()\nMODULES_TO_CHECK_ARR_PERM=()\nMODULES_TO_CHECK_ARR_COMMENT=()\nMODULES_TO_CHECK_ARR_GREP=()\nMODULES_TO_CHECK_ARR_COPYRIGHT=()\nMODULES_TO_CHECK_ARR_FCT_SPACE=()\nCNT_VAR_CHECKER_ISSUES=0\n\nimport_config_scripts() {\n  mapfile -t HELPERS < <(find \"${CONF_DIR}\" -iname \"*.sh\" 2>/dev/null)\n  for LINE in \"${HELPERS[@]}\"; do\n    if (file \"${LINE}\" | grep -q \"shell script\"); then\n      echo \"${LINE}\"\n      SOURCES+=(\"${LINE}\")\n    fi\n  done\n}\n\nimport_helper() {\n  mapfile -t HELPERS < <(find \"${HELP_DIR}\" -iname \"*.sh\" 2>/dev/null)\n  for LINE in \"${HELPERS[@]}\"; do\n    if (file \"${LINE}\" | grep -q \"shell script\"); then\n      echo \"${LINE}\"\n      SOURCES+=(\"${LINE}\")\n    fi\n  done\n}\n\nimport_reporting_templates() {\n  mapfile -t REP_TEMP < <(find \"${REP_DIR}\" -iname \"*.sh\" 2>/dev/null)\n  for LINE in \"${REP_TEMP[@]}\"; do\n    if (file \"${LINE}\" | grep -q \"shell script\"); then\n      echo \"${LINE}\"\n      SOURCES+=(\"${LINE}\")\n    fi\n  done\n}\n\nimport_module() {\n  MODULES=()\n  mapfile -t MODULES < <(find \"${MOD_DIR}\" -iname \"*.sh\" 2>/dev/null)\n  if [[ -d \"${MOD_DIR_LOCAL}\" ]]; then\n    mapfile -t MODULES_LOCAL < <(find \"${MOD_DIR_LOCAL}\" -iname \"*.sh\" 2>/dev/null)\n    MODULES=( \"${MODULES_[@]}\" \"${MODULES_LOCAL[@]}\")\n  fi\n  for LINE in \"${MODULES[@]}\"; do\n    if (file \"${LINE}\" | grep -q \"shell script\"); then\n      echo \"${LINE}\"\n      SOURCES+=(\"${LINE}\")\n    fi\n  done\n}\n\nimport_installer() {\n  MODULES=()\n  mapfile -t MODULES < <(find \"${INSTALLER_DIR}\" -iname \"*.sh\" 2>/dev/null)\n  for LINE in \"${MODULES[@]}\"; do\n    if (file \"${LINE}\" | grep -q \"shell script\"); then\n      echo \"${LINE}\"\n      SOURCES+=(\"${LINE}\")\n    fi\n  done\n}\n\nimport_emba_main() {\n  MODULES=()\n  mapfile -t MODULES < <(find ./ -iname \"emba\" -o -iname \"installer.sh\" -o -iname \"check_project.sh\" 2>/dev/null)\n  for LINE in \"${MODULES[@]}\"; do\n    if (file \"${LINE}\" | grep -q \"shell script\"); then\n      echo \"${LINE}\"\n      SOURCES+=(\"${LINE}\")\n    fi\n  done\n}\n\n\ndockerchecker() {\n  echo -e \"\\\\n\"\"${ORANGE}\"\"${BOLD}\"\"EMBA docker-files check\"\"${NC}\"\n  echo -e \"${BOLD}\"\"=================================================================\"\"${NC}\"\n  mapfile -t DOCKER_COMPS < <(find . -maxdepth 1 -iname \"docker-compose*.yml\")\n  for DOCKER_COMP in \"${DOCKER_COMPS[@]}\"; do\n    echo -e \"\\\\n\"\"${GREEN}\"\"Run docker check on ${DOCKER_COMP}:\"\"${NC}\"\"\\\\n\"\n    if docker-compose -f \"${DOCKER_COMP}\" config 1>/dev/null || [[ $? -ne 1 ]]; then\n      echo -e \"${GREEN}\"\"${BOLD}\"\"==> SUCCESS\"\"${NC}\"\"\\\\n\"\n    else\n      echo -e \"\\\\n\"\"${ORANGE}${BOLD}==> FIX ERRORS\"\"${NC}\"\"\\\\n\"\n      ((MODULES_TO_CHECK=MODULES_TO_CHECK+1))\n      MODULES_TO_CHECK_ARR_DOCKER+=( \"${DOCKER_COMP}\" )\n    fi\n  done\n}\n\ncheck() {\n  echo -e \"\\\\n\"\"${ORANGE}\"\"${BOLD}\"\"Embedded Linux Analyzer Shellcheck\"\"${NC}\"\n  echo -e \"${BOLD}\"\"=================================================================\"\"${NC}\"\n\n  echo -e \"\\\\n\"\"${GREEN}\"\"Load all files for check:\"\"${NC}\"\"\\\\n\"\n\n  import_emba_main\n  import_installer\n  import_helper\n  import_config_scripts\n  import_reporting_templates\n  import_module\n\n  echo -e \"\\\\n\"\"${GREEN}\"\"Check all source for correct tab usage:\"\"${NC}\"\"\\\\n\"\n  for SOURCE in \"${SOURCES[@]}\"; do\n    echo -e \"\\\\n\"\"${GREEN}\"\"Run ${ORANGE}tab check${GREEN} on ${ORANGE}${SOURCE}\"\"${NC}\"\"\\\\n\"\n    if [[ $(grep -cP '\\t' \"${SOURCE}\") -eq 0 ]]; then\n      echo -e \"${GREEN}\"\"${BOLD}\"\"==> SUCCESS\"\"${NC}\"\"\\\\n\"\n    else\n      echo -e \"\\\\n\"\"${ORANGE}\"\"${BOLD}\"\"==> FIX ERRORS\"\"${NC}\"\"\\\\n\"\n      MODULES_TO_CHECK_ARR_TAB+=(\"${SOURCE}\")\n    fi\n  done\n\n  echo -e \"\\\\n\"\"${GREEN}\"\"Check all source for correct comment usage:\"\"${NC}\"\"\\\\n\"\n  for SOURCE in \"${SOURCES[@]}\"; do\n    echo -e \"\\\\n\"\"${GREEN}\"\"Run ${ORANGE}comment check${GREEN} on ${ORANGE}${SOURCE}\"\"${NC}\"\"\\\\n\"\n    if [[ $(grep -E -r \"^( )+?#\" \"${SOURCE}\" | grep -v \"#\\ \\|bash\\|/bin/sh\\|shellcheck\" | grep -v -E -c \"#$\") -eq 0 ]]; then\n      echo -e \"${GREEN}\"\"${BOLD}\"\"==> SUCCESS\"\"${NC}\"\"\\\\n\"\n    else\n      grep -E -r -n \"^( )+?#\" \"${SOURCE}\" | grep -v \"#\\ \\|bash\\|shellcheck\" | grep -v -E \"#$\"\n      echo -e \"\\\\n\"\"${ORANGE}\"\"${BOLD}\"\"==> FIX ERRORS\"\"${NC}\"\"\\\\n\"\n      MODULES_TO_CHECK_ARR_COMMENT+=(\"${SOURCE}\")\n    fi\n  done\n\n  echo -e \"\\\\n\"\"${GREEN}\"\"Check all source for correct space usage:\"\"${NC}\"\"\\\\n\"\n  for SOURCE in \"${SOURCES[@]}\"; do\n    echo -e \"\\\\n\"\"${GREEN}\"\"Run ${ORANGE}space check${GREEN} on ${ORANGE}${SOURCE}\"\"${NC}\"\"\\\\n\"\n    if ! grep -q -E ' +$' \"${SOURCE}\"; then\n      echo -e \"${GREEN}\"\"${BOLD}\"\"==> SUCCESS\"\"${NC}\"\"\\\\n\"\n    else\n      grep -E -H -n ' +$' \"${SOURCE}\"\n      echo -e \"\\\\n\"\"${ORANGE}\"\"${BOLD}\"\"==> FIX ERRORS\"\"${NC}\"\"\\\\n\"\n      MODULES_TO_CHECK_ARR_COMMENT+=(\"${SOURCE}\")\n    fi\n  done\n\n  echo -e \"\\\\n\"\"${GREEN}\"\"Check all scripts for not using grep -R:\"\"${NC}\"\"\\\\n\"\n  for SOURCE in \"${SOURCES[@]}\"; do\n    [[ \"${SOURCE}\" == *\"check_project.sh\" ]] && continue\n    echo -e \"\\\\n\"\"${GREEN}\"\"Run ${ORANGE}recursive grep check${GREEN} on ${ORANGE}${SOURCE}\"\"${NC}\"\"\\\\n\"\n\n    if [[ $(grep -cP \"grep.* -R \" \"${SOURCE}\") -eq 0 ]]; then\n      echo -e \"${GREEN}\"\"${BOLD}\"\"==> SUCCESS\"\"${NC}\"\"\\\\n\"\n    else\n      echo -e \"\\\\n\"\"${ORANGE}\"\"${BOLD}\"\"==> FIX ERRORS\"\"${NC}\"\"\\\\n\"\n      MODULES_TO_CHECK_ARR_GREP+=(\"${SOURCE}\")\n    fi\n  done\n\n  echo -e \"\\\\n\"\"${GREEN}\"\"Run shellcheck and semgrep:\"\"${NC}\"\"\\\\n\"\n  for SOURCE in \"${SOURCES[@]}\"; do\n    echo -e \"\\\\n\"\"${GREEN}\"\"Run ${ORANGE}shellcheck${GREEN} on ${ORANGE}${SOURCE}\"\"${NC}\"\"\\\\n\"\n    if shellcheck -x -o require-variable-braces -P \"${INSTALLER_DIR}\":\"${HELP_DIR}\":\"${MOD_DIR}\":\"${MOD_DIR_LOCAL}\" \"${SOURCE}\" || [[ $? -ne 1 && $? -ne 2 ]]; then\n      echo -e \"${GREEN}\"\"${BOLD}\"\"==> SUCCESS\"\"${NC}\"\"\\\\n\"\n    else\n      echo -e \"\\\\n\"\"${ORANGE}\"\"${BOLD}\"\"==> FIX ERRORS\"\"${NC}\"\"\\\\n\"\n      MODULES_TO_CHECK_ARR+=(\"${SOURCE}\")\n    fi\n\n    echo -e \"\\\\n\"\"${GREEN}\"\"Run ${ORANGE}semgrep${GREEN} on ${ORANGE}${SOURCE}\"\"${NC}\"\"\\\\n\"\n    semgrep --disable-version-check --metrics=off --config \"${EXT_DIR}\"/semgrep-rules/bash \"${SOURCE}\" | tee /tmp/emba_semgrep.log\n    if grep -q \"Findings:\" /tmp/emba_semgrep.log; then\n      echo -e \"\\\\n\"\"${ORANGE}\"\"${BOLD}\"\"==> FIX ERRORS\"\"${NC}\"\"\\\\n\"\n      MODULES_TO_CHECK_ARR_SEMGREP+=(\"${SOURCE}\")\n    else\n      echo -e \"${GREEN}\"\"${BOLD}\"\"==> SUCCESS\"\"${NC}\"\"\\\\n\"\n    fi\n  done\n\n  echo -e \"\\\\n\"\"${GREEN}\"\"Check all scripts for correct permissions:\"\"${NC}\"\"\\\\n\"\n  for SOURCE in \"${SOURCES[@]}\"; do\n    echo -e \"\\\\n\"\"${GREEN}\"\"Check ${ORANGE}permission${GREEN} on ${ORANGE}${SOURCE}\"\"${NC}\"\"\\\\n\"\n    if stat -L -c \"%a\" \"${SOURCE}\" | grep -q \"755\"; then\n      echo -e \"${GREEN}\"\"${BOLD}\"\"==> SUCCESS\"\"${NC}\"\"\\\\n\"\n    else\n      echo -e \"\\\\n\"\"${ORANGE}\"\"${BOLD}\"\"==> FIX ERRORS\"\"${NC}\"\"\\\\n\"\n      MODULES_TO_CHECK_ARR_PERM+=(\"${SOURCE}\")\n    fi\n  done\n}\n\nsummary() {\n  if [[ -f /tmp/emba_semgrep.log ]]; then\n    rm /tmp/emba_semgrep.log\n  fi\n\n  if [[ \"${#MODULES_TO_CHECK_ARR_TAB[@]}\" -gt 0 ]]; then\n    echo -e \"\\\\n\\\\n\"\"${GREEN}${BOLD}\"\"SUMMARY:${NC}\\\\n\"\n    echo -e \"Modules to check (tab vs spaces): ${#MODULES_TO_CHECK_ARR_TAB[@]}\\\\n\"\n    for MODULE in \"${MODULES_TO_CHECK_ARR_TAB[@]}\"; do\n      echo -e \"${ORANGE}${BOLD}==> FIX MODULE: \"\"${MODULE}\"\"${NC}\"\n    done\n    echo -e \"${ORANGE}\"\"WARNING: Fix the errors before pushing to the EMBA repository!\"\n  fi\n\n  if [[ \"${#MODULES_TO_CHECK_ARR_COMMENT[@]}\" -gt 0 ]]; then\n    echo -e \"\\\\n\\\\n\"\"${GREEN}${BOLD}\"\"SUMMARY:${NC}\\\\n\"\n    echo -e \"Modules to check (space after # sign): ${#MODULES_TO_CHECK_ARR_COMMENT[@]}\\\\n\"\n    for MODULE in \"${MODULES_TO_CHECK_ARR_COMMENT[@]}\"; do\n      echo -e \"${ORANGE}${BOLD}==> FIX MODULE: \"\"${MODULE}\"\"${NC}\"\n    done\n    echo -e \"${ORANGE}\"\"WARNING: Fix the errors before pushing to the EMBA repository!\"\n  fi\n\n  if [[ \"${#MODULES_TO_CHECK_ARR[@]}\" -gt 0 ]]; then\n    echo -e \"\\\\n\\\\n\"\"${GREEN}${BOLD}\"\"SUMMARY:${NC}\\\\n\"\n    echo -e \"Modules to check (shellcheck): ${#MODULES_TO_CHECK_ARR[@]}\\\\n\"\n    for MODULE in \"${MODULES_TO_CHECK_ARR[@]}\"; do\n      echo -e \"${ORANGE}${BOLD}==> FIX MODULE: \"\"${MODULE}\"\"${NC}\"\n    done\n    echo -e \"${ORANGE}\"\"WARNING: Fix the errors before pushing to the EMBA repository!\"\n  fi\n\n  if [[ \"${#MODULES_TO_CHECK_ARR_SEMGREP[@]}\" -gt 0 ]]; then\n    echo -e \"\\\\n\\\\n\"\"${GREEN}${BOLD}\"\"SUMMARY:${NC}\\\\n\"\n    echo -e \"Modules to check (semgrep): ${#MODULES_TO_CHECK_ARR_SEMGREP[@]}\\\\n\"\n    for MODULE in \"${MODULES_TO_CHECK_ARR_SEMGREP[@]}\"; do\n      echo -e \"${ORANGE}${BOLD}==> FIX MODULE: \"\"${MODULE}\"\"${NC}\"\n    done\n    echo -e \"${ORANGE}\"\"WARNING: Fix the errors before pushing to the EMBA repository!\"\n  fi\n  if [[ \"${#MODULES_TO_CHECK_ARR_DOCKER[@]}\" -gt 0 ]]; then\n    echo -e \"\\\\n\\\\n\"\"${GREEN}${BOLD}\"\"SUMMARY:${NC}\\\\n\"\n    echo -e \"Modules to check (docker-compose): ${#MODULES_TO_CHECK_ARR_DOCKER[@]}\\\\n\"\n    for MODULE in \"${MODULES_TO_CHECK_ARR_DOCKER[@]}\"; do\n      echo -e \"${ORANGE}${BOLD}==> FIX MODULE: \"\"${MODULE}\"\"${NC}\"\n    done\n    echo -e \"${ORANGE}\"\"WARNING: Fix the errors before pushing to the EMBA repository!\"\n  fi\n  if [[ \"${#MODULES_TO_CHECK_ARR_PERM[@]}\" -gt 0 ]]; then\n    echo -e \"\\\\n\\\\n\"\"${GREEN}${BOLD}\"\"SUMMARY:${NC}\\\\n\"\n    echo -e \"Modules to check (permissions): ${#MODULES_TO_CHECK_ARR_PERM[@]}\\\\n\"\n    for MODULE in \"${MODULES_TO_CHECK_ARR_PERM[@]}\"; do\n      echo -e \"${ORANGE}${BOLD}==> FIX MODULE: \"\"${MODULE}\"\"${NC}\"\n    done\n    echo -e \"${ORANGE}\"\"WARNING: Fix the errors before pushing to the EMBA repository!\"\n  fi\n  if [[ \"${#MODULES_TO_CHECK_ARR_GREP[@]}\" -gt 0 ]]; then\n    echo -e \"\\\\n\\\\n\"\"${GREEN}${BOLD}\"\"SUMMARY:${NC}\\\\n\"\n    echo -e \"Modules to check (recursive grep usage -R): ${#MODULES_TO_CHECK_ARR_GREP[@]}\\\\n\"\n    for MODULE in \"${MODULES_TO_CHECK_ARR_GREP[@]}\"; do\n      echo -e \"${ORANGE}${BOLD}==> FIX MODULE: \"\"${MODULE}\"\"${NC}\"\n    done\n    echo -e \"${ORANGE}\"\"WARNING: Fix the errors before pushing to the EMBA repository!\"\n  fi\n  if [[ \"${#MODULES_TO_CHECK_ARR_FCT_SPACE[@]}\" -gt 0 ]]; then\n    echo -e \"\\\\n\\\\n\"\"${GREEN}${BOLD}\"\"SUMMARY:${NC}\\\\n\"\n    echo -e \"Modules to check (space usage in function definition): ${#MODULES_TO_CHECK_ARR_FCT_SPACE[@]}\\\\n\"\n    for MODULE in \"${MODULES_TO_CHECK_ARR_FCT_SPACE[@]}\"; do\n      echo -e \"${ORANGE}${BOLD}==> FIX MODULE: \"\"${MODULE}\"\"${NC}\"\n    done\n    echo -e \"${ORANGE}\"\"WARNING: Fix the errors before pushing to the EMBA repository!\"\n  fi\n  if [[ \"${CNT_VAR_CHECKER_ISSUES}\" -gt 0 ]]; then\n    echo -e \"\\\\n\\\\n\"\"${GREEN}${BOLD}\"\"SUMMARY:${NC}\\\\n\"\n    echo -e \"Found ${ORANGE}${CNT_VAR_CHECKER_ISSUES}${NC} variable scope issues in EMBA scripts${NC}\\\\n\"\n    echo -e \"\\\\n\"\"${ORANGE}${BOLD}==> FIX ERRORS\"\"${NC}\"\"\\\\n\"\n  else\n    echo -e \"\\\\n\"\"${GREEN}\"\"==> Found no problems with variable scope definition\"\"${NC}\"\"\\\\n\"\n  fi\n}\n\n# check that all tools are installed\ncheck_tools() {\n  TOOLS=(\"semgrep\" \"shellcheck\")\n  for TOOL in \"${TOOLS[@]}\";do\n    if ! command -v \"${TOOL}\" > /dev/null ; then\n      echo -e \"\\\\n\"\"${RED}\"\"${TOOL} is not installed correctly\"\"${NC}\"\"\\\\n\"\n      exit 1\n    fi\n  done\n  if ! [[ -d ./external/semgrep-rules/bash ]]; then\n    echo -e \"\\\\n\"\"${RED}\"\"${BOLD}\"\"Please install semgrep-rules to directory ./external to perform all checks\"\"${NC}\"\"\\\\n\"\n    echo -e \"${ORANGE}git clone https://github.com/returntocorp/semgrep-rules.git external/semgrep-rules${NC}\"\n    exit 1\n  fi\n\n  if [[ ! -f \"${HELP_DIR}\"/var_check.sh ]]; then\n    echo -e \"\\\\n\"\"${RED}\"\"${BOLD}\"\"EMBA var_checker helper script missing\"\"${NC}\"\"\\\\n\"\n    echo -e \"\\\\n\"\"${RED}\"\"${BOLD}\"\"Please fix the EMBA installation to perform all checks\"\"${NC}\"\"\\\\n\"\n    exit 1\n  fi\n}\n\nlist_linter_exceptions(){\n  # lists all linter exceptions for a given toolname inside a directory\n  # $1 tool name\n  # $2 directory\n  # $3 excluded dir for find\n  local TOOL_NAME_=\"${1:-}\"\n  local DIR_=\"${2:-}\"\n  local EXCLUDE_=\"${3:-}\"\n  local SEARCH_PAR_=\"\"\n  local SEARCH_TYPE_=\"\"\n  echo -e \"\\\\n\"\"${GREEN}\"\"Checking for ${TOOL_NAME_} exceptions inside ${DIR_}:\"\"${NC}\"\"\\\\n\"\n  case \"${TOOL_NAME_}\" in\n    shellcheck)\n      SEARCH_PAR_=\"shellcheck disable\"\n      SEARCH_TYPE_=\"sh\"\n      ;;\n    semgrep)\n      SEARCH_PAR_=\"nosemgrep\"\n      SEARCH_TYPE_=\"sh\"\n      ;;\n  esac\n  mapfile -t EXCEPTION_SCRIPTS < <(find \"${DIR_}\" -type d -path \"${EXCLUDE_}\" -prune -false -o -iname \"*.${SEARCH_TYPE_}\" -exec grep -H \"${SEARCH_PAR_}\" {} \\;)\n  if [[ \"${#EXCEPTION_SCRIPTS[@]}\" -gt 0 ]]; then\n    for EXCEPTION_ in \"${EXCEPTION_SCRIPTS[@]}\"; do\n      echo -e \"${GREEN}Found exception in ${ORANGE}${EXCEPTION_%%:*}:${EXCEPTION_##*:}${NC}\"\n      EXCEPTIONS_TO_CHECK_ARR+=( \"${EXCEPTION_%%:*}\" )\n    done\n  else\n    echo -e \"\\\\n\"\"${GREEN}\"\"=> Found no exceptions for ${TOOL_NAME_}\"\"${NC}\"\"\\\\n\"\n  fi\n}\n\ncopy_right_check(){\n  # checks all Copyright occurences for supplied end-year\n  # $1 copyright holder\n  # $2 end-year\n  # $3 dir to look in\n  # $4 excluded dir for find\n  local OWNER_=\"${1:-}\"\n  local YEAR_=\"${2:-}\"\n  local DIR_=\"${3:-}\"\n  local EXCLUDE_=\"${4:-}\"\n  echo -e \"\\\\n\"\"${ORANGE}\"\"${BOLD}\"\"EMBA Copyright check\"\"${NC}\"\"\\\\n\"\"${BOLD}\"\"=================================================================\"\"${NC}\"\n  mapfile -t COPYRIGHT_LINE_ < <(find \"${DIR_}\" -type d -path \"${EXCLUDE_}\" -prune -false -o -type f -not -wholename \"${0}\" -iname \"*.sh\" -exec grep -H \"Copyright\" {} \\;)\n  if [[ \"${#COPYRIGHT_LINE_[@]}\" -gt 0 ]]; then\n    for LINE_ in \"${COPYRIGHT_LINE_[@]}\"; do\n      if [[ \"${LINE_##*:}\" == *\"${OWNER_}\" && \"${LINE_##*:}\" != *\"${YEAR_}\"* ]]; then\n        MODULES_TO_CHECK_ARR_COPYRIGHT+=( \"${LINE_%%:*}\" )\n        echo -e \"Found problem with Copyright for ${GREEN}${OWNER_}${NC} in ${LINE_%%:*}: ${ORANGE}${LINE_##*:}\"\"${NC}\"\"\\\\n\"\n        echo -e \"\\\\n\"\"${ORANGE}${BOLD}==> FIX ERRORS\"\"${NC}\"\"\\\\n\"\n      fi\n    done\n  fi\n  if [[ \"${#MODULES_TO_CHECK_ARR_COPYRIGHT[@]}\" -eq 0 ]]; then\n    echo -e \"\\\\n\"\"${GREEN}\"\"==> Found no problems with copyrights\"\"${NC}\"\"\\\\n\"\n  fi\n}\n\nfunction_entry_space_check() {\n  # ensure we have the space in the function definition:\n  # function_name() {\n  # invalid:\n  # function_name(){\n  echo -e \"\\\\n\"\"${ORANGE}\"\"${BOLD}\"\"EMBA function space definition check\"\"${NC}\"\"\\\\n\"\"${BOLD}\"\"=================================================================\"\"${NC}\"\n\n  mapfile -t FCT_SPACE_MODULES_ARR < <(grep -r '(){' modules/* || true)\n  mapfile -t FCT_SPACE_HLP_ARR < <(grep -r '(){' helpers/* || true)\n\n  if [[ \"${#FCT_SPACE_MODULES_ARR[@]}\" -gt 0 ]] || [[ \"${#FCT_SPACE_HLP_ARR[@]}\" -gt 0 ]]; then\n    echo -e \"Found problem with spaces in function definition${NC}\\\\n\"\n    echo -e \"\\\\n\"\"${ORANGE}${BOLD}==> FIX ERRORS\"\"${NC}\"\"\\\\n\"\n    MODULES_TO_CHECK_ARR_FCT_SPACE=(\"${FCT_SPACE_MODULES_ARR[@]}\" \"${FCT_SPACE_HLP_ARR[@]}\")\n  else\n    echo -e \"\\\\n\"\"${GREEN}\"\"==> Found no problems with spaces in function definition. Helpers are currently ignored.\"\"${NC}\"\"\\\\n\"\n  fi\n}\n\nvar_checker() {\n  local MODE=\"${1:-}\"\n  local RET_ISSUES=0\n\n  echo -e \"\\\\n\"\"${ORANGE}\"\"${BOLD}\"\"EMBA variable declation scope check for ${MODE}\"\"${NC}\"\"\\\\n\"\"${BOLD}\"\"=================================================================\"\"${NC}\"\n\n  disable_strict_mode 1\n  \"${HELP_DIR}\"/var_check.sh \"${MODE}\"\n  RET_ISSUES=\"$?\"\n\n  CNT_VAR_CHECKER_ISSUES=$((CNT_VAR_CHECKER_ISSUES+RET_ISSUES))\n\n  if [[ \"${CNT_VAR_CHECKER_ISSUES}\" -gt 0 ]]; then\n    echo -e \"Found ${ORANGE}${CNT_VAR_CHECKER_ISSUES}${NC} variable scope issues in EMBA ${MODE} scripts${NC}\\\\n\"\n    echo -e \"\\\\n\"\"${ORANGE}${BOLD}==> FIX ERRORS\"\"${NC}\"\"\\\\n\"\n  else\n    echo -e \"\\\\n\"\"${GREEN}\"\"==> Found no problems with variable scope definition\"\"${NC}\"\"\\\\n\"\n  fi\n  enable_strict_mode 1\n}\n\n# main:\ncheck_tools\ncheck\nvar_checker modules\nvar_checker helpers\nfunction_entry_space_check\ndockerchecker\ncopy_right_check \"Siemens Energy AG\" 2024 ./ ./external\nlist_linter_exceptions shellcheck ./ ./external\nlist_linter_exceptions semgrep ./ ./external\nsummary\n\nif [[ \"${#MODULES_TO_CHECK_ARR_TAB[@]}\" -gt 0 ]] || [[ \"${#MODULES_TO_CHECK_ARR[@]}\" -gt 0 ]] || \\\n  [[ \"${#MODULES_TO_CHECK_ARR[@]}\" -gt 0 ]] || [[ \"${#MODULES_TO_CHECK_ARR_SEMGREP[@]}\" -gt 0 ]] || \\\n  [[ \"${#MODULES_TO_CHECK_ARR_DOCKER[@]}\" -gt 0 ]] || [[ \"${#MODULES_TO_CHECK_ARR_PERM[@]}\" -gt 0 ]] || \\\n  [[ \"${#MODULES_TO_CHECK_ARR_COMMENT[@]}\" -gt 0 ]] || [[ \"${#MODULES_TO_CHECK_ARR_GREP[@]}\" -gt 0 ]] || \\\n  [[ \"${#MODULES_TO_CHECK_ARR_COPYRIGHT[@]}\" -gt 0 ]] || [[ \"${#MODULES_TO_CHECK_ARR_FCT_SPACE[@]}\" -gt 0 ]] || \\\n  [[ \"${CNT_VAR_CHECKER_ISSUES}\" -gt 0 ]]; then\n  exit 1\nfi\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 2.0869140625,
          "content": "services:\n  # nosemgrep\n  emba:\n    image: embeddedanalyzer/emba:1.5.1b\n    container_name: emba\n    read_only: true\n    # all pre-checker mount modules need privileged mode\n    # nosemgrep\n    privileged: true\n    # /root/.config is needed for binwalk - further recovery for other tools needed\n    # /root/.config is needed for cwe_checker\n    # /root/.local is needed for cwe_checker\n    tmpfs:\n      # exec on /tmp is needed for capa -> Todo: find better solution\n      - /tmp:exec\n      - /root/.config/\n      - /root/.local/share/composer/\n      - /root/.local/share/cwe_checker/\n        # - /root/.local/share\n      - /root/.cache/\n      - /root/.semgrep/\n      - /root/.ghidra/\n      - /root/.msf4\n      - /root/.john\n      - /root/.gnupg\n      - /run/lock\n      - /var/run\n      - /var/tmp\n      - /var/lock\n    build: .\n    # /dev is needed for the system emulator (L10)\n    volumes:\n        - ${FIRMWARE}/:/firmware:ro\n        - ${LOG}/:/logs\n        - ${EMBA}/:/emba:ro\n        - ${EMBA}/external/linux_kernel_sources/:/external/linux_kernel_sources:ro\n        - ${EMBA}/external/nvd-json-data-feeds/:/external/nvd-json-data-feeds:ro\n        - /etc/localtime:/etc/localtime:ro\n        - /dev:/dev\n    environment:\n        - USER\n        - CONTAINER_NUMBER=1\n    # network_mode: host\n    devices:\n      - /dev/fuse:/dev/fuse:rwm\n    cap_add:\n      - SYS_ADMIN\n    ulimits:\n      core:\n        hard: 0\n        soft: 0\n\n  emba_quest:\n    image: embeddedanalyzer/emba:1.5.1b\n    container_name: emba_quest\n    read_only: true\n    tmpfs:\n      - /tmp\n      - /root\n      - /run/lock\n      - /var/run\n      - /var/tmp\n      - /var/lock\n    volumes:\n        - ${FIRMWARE}/:/firmware:ro\n        - ${LOG}/:/logs\n        - ${EMBA}/:/emba:ro\n        - ${EMBA}/external/linux_kernel_sources/:/external/linux_kernel_sources\n        - ${EMBA}/external/nvd-json-data-feeds/:/external/nvd-json-data-feeds:ro\n        - /etc/localtime:/etc/localtime:ro\n    environment:\n        - USER\n        - CONTAINER_NUMBER=2\n    network_mode: host\n    ulimits:\n      core:\n        hard: 0\n        soft: 0\n    security_opt:\n      - no-new-privileges:true\n\n"
        },
        {
          "name": "emba",
          "type": "blob",
          "size": 43.97265625,
          "content": "#!/bin/bash -p\n# see: https://developer.apple.com/library/archive/documentation/OpenSource/Conceptual/ShellScripting/ShellScriptSecurity/ShellScriptSecurity.html#//apple_ref/doc/uid/TP40004268-CH8-SW29\n\n# EMBA - EMBEDDED LINUX ANALYZER\n#\n# Copyright 2020-2023 Siemens AG\n# Copyright 2020-2024 Siemens Energy AG\n#\n# EMBA comes with ABSOLUTELY NO WARRANTY. This is free software, and you are\n# welcome to redistribute it under the terms of the GNU General Public License.\n# See LICENSE file for usage of this software.\n#\n# EMBA is licensed under GPLv3\n# SPDX-License-Identifier: GPL-3.0-only\n#\n# Author(s): Michael Messner, Pascal Eckmann\n# Contributor(s): Stefan Haboeck\n\n# Description:  Main script for load all necessary files and call main function of modules\n\nINVOCATION_PATH=\".\"\n\nimport_helper() {\n  local lHELPERS_ARR=()\n  local lHELPER_CNT=0\n  local lHELPER_FILE=\"\"\n  mapfile -d '' lHELPERS_ARR < <(find \"${HELP_DIR}\" -iname \"helpers_emba_*.sh\" -print0 2> /dev/null)\n  for lHELPER_FILE in \"${lHELPERS_ARR[@]}\" ; do\n    if ( file -b \"${lHELPER_FILE}\" | grep -q \"shell script\" ) && ! [[ \"${lHELPER_FILE}\" =~ \\ |\\' ]] ; then\n      # https://github.com/koalaman/shellcheck/wiki/SC1090\n      # shellcheck source=/dev/null\n      source \"${lHELPER_FILE}\"\n      (( lHELPER_CNT+=1 ))\n    fi\n  done\n  print_output \"==> \"\"${GREEN}\"\"Imported \"\"${lHELPER_CNT}\"\" helper files\"\"${NC}\" \"no_log\"\n}\n\nimport_module() {\n  local lMODULES_ARR=()\n  local lMODULES_LOCAL_ARR=()\n  local lMODULES_EMBA_ARR=()\n  local lMODULE_COUNT=0\n  local lMODULE_FILE=\"\"\n  # to ensure we are only auto load modules from the modules main directory we set maxdepth\n  # with this in place we can create sub directories per module. For using/loading stuff from\n  # these sub directories the modules are responsible!\n  mapfile -t lMODULES_EMBA_ARR < <(find \"${MOD_DIR}\" -maxdepth 1 -name \"*.sh\" | sort -V 2> /dev/null)\n  if [[ -d \"${MOD_DIR_LOCAL}\" ]]; then\n    mapfile -t lMODULES_LOCAL_ARR < <(find \"${MOD_DIR_LOCAL}\" -maxdepth 1 -name \"*.sh\" 2>/dev/null | sort -V 2> /dev/null)\n  fi\n  lMODULES_ARR=( \"${lMODULES_EMBA_ARR[@]}\" \"${lMODULES_LOCAL_ARR[@]}\" )\n  for lMODULE_FILE in \"${lMODULES_ARR[@]}\" ; do\n    if ( file -b \"${lMODULE_FILE}\" | grep -q \"shell script\" ) && ! [[ \"${lMODULE_FILE}\" =~ \\ |\\' ]] ; then\n      # https://github.com/koalaman/shellcheck/wiki/SC1090\n      # shellcheck source=/dev/null\n      source \"${lMODULE_FILE}\"\n      (( lMODULE_COUNT+=1 ))\n    fi\n  done\n  print_output \"==> \"\"${GREEN}\"\"Imported \"\"${lMODULE_COUNT}\"\" module/s\"\"${NC}\" \"no_log\"\n}\n\nsort_modules() {\n  local lSORTED_MODULES_ARR=()\n  local lMODULE_FILE=\"\"\n  for lMODULE_FILE in \"${MODULES_ARR[@]}\" ; do\n    if ( file -b \"${lMODULE_FILE}\" | grep -q \"shell script\" ) && ! [[ \"${lMODULE_FILE}\" =~ \\ |\\' ]] ; then\n      THREAD_PRIO=0\n      # https://github.com/koalaman/shellcheck/wiki/SC1090\n      # shellcheck source=/dev/null\n      source \"${lMODULE_FILE}\"\n      if [[ ${THREAD_PRIO} -eq 1 ]] ; then\n        lSORTED_MODULES_ARR=( \"${lMODULE_FILE}\" \"${lSORTED_MODULES_ARR[@]}\" )\n      else\n        lSORTED_MODULES_ARR=( \"${lSORTED_MODULES_ARR[@]}\" \"${lMODULE_FILE}\" )\n      fi\n    fi\n  done\n  MODULES_ARR=( \"${lSORTED_MODULES_ARR[@]}\" )\n}\n\n# $1: module group letter [P, S, L, F, Q]\n# $2: 0=single thread 1=multithread\n# $3: HTML=1 - generate html file\nrun_modules() {\n  MODULE_GROUP=\"${1:-}\"\n  printf -v THREADING_SET '%d\\n' \"${2}\" 2>/dev/null\n  THREADING_MOD_GROUP=\"${THREADING_SET}\"\n\n  local lSELECT_PRE_MODULES_COUNT=0\n\n  for SELECT_NUM in \"${SELECT_MODULES[@]}\" ; do\n    if [[ \"${SELECT_NUM}\" =~ ^[\"${MODULE_GROUP,,}\",\"${MODULE_GROUP^^}\"]{1} ]]; then\n      (( lSELECT_PRE_MODULES_COUNT+=1 ))\n    fi\n  done\n\n  if [[ \"${#SELECT_MODULES[@]}\" -eq 0 ]] || [[ \"${lSELECT_PRE_MODULES_COUNT}\" -eq 0 ]]; then\n    export MODULES_ARR=()\n    local lMODULES_LOCAL_ARR=()\n    local lMODULES_EMBA_ARR=()\n    local lMODULE_NAME=\"\"\n\n    mapfile -t lMODULES_EMBA_ARR < <(find \"${MOD_DIR}\" -maxdepth 1 -name \"${MODULE_GROUP^^}\"\"*_*.sh\" | sort -V 2> /dev/null)\n    if [[ -d \"${MOD_DIR_LOCAL}\" ]]; then\n      mapfile -t lMODULES_LOCAL_ARR < <(find \"${MOD_DIR_LOCAL}\" -maxdepth 1 -name \"${MODULE_GROUP^^}\"\"*.sh\" 2>/dev/null | sort -V 2> /dev/null)\n    fi\n    MODULES_ARR=( \"${lMODULES_EMBA_ARR[@]}\" \"${lMODULES_LOCAL_ARR[@]}\" )\n    export MODULES_EXPORTED+=(\"${MODULES_ARR[@]}\")\n    if [[ ${THREADING_SET} -eq 1 && \"${MODULE_GROUP^^}\" != \"P\" ]] ; then\n      sort_modules\n    fi\n    for lMODULE_FILE in \"${MODULES_ARR[@]}\" ; do\n      # check if \"${lMODULE_NAME}\" is in blacklist from config directory and skip it\n      lMODULE_NAME=$(basename -s .sh \"${lMODULE_FILE}\")\n      if [[ \" ${MODULE_BLACKLIST[*]} \" =~  ${lMODULE_NAME}  ]]; then\n        print_output \"[*] $(print_date) - ${lMODULE_NAME} not executed - blacklist triggered \" \"main\"\n        continue\n      fi\n      if [[ \"${SKIP_PRE_CHECKERS}\" == 1 ]] && [[ \"${MODULE_GROUP}\" == \"P\" ]]; then\n        print_output \"[*] $(print_date) - ${lMODULE_NAME} not executed - skip pre-checkers is set \" \"main\"\n        continue\n      fi\n      local lMOD_FIN=0\n      if ( file -b \"${lMODULE_FILE}\" | grep -q \"shell script\" ) && ! [[ \"${lMODULE_FILE}\" =~ \\ |\\' ]] ; then\n        if [[ \"${MODULE_GROUP^^}\" == \"P\" ]] || [[ \"${MODULE_GROUP^^}\" == \"D\" ]]; then\n          # we are able to enable/disable threading on module basis in the the pre-checker modules with the header:\n          # export PRE_THREAD_ENA=1/0\n          # shellcheck source=/dev/null\n          source \"${lMODULE_FILE}\"\n          if [[ \"${PRE_THREAD_ENA}\" -eq 0 ]] ; then\n            THREADING_SET=0\n          fi\n        fi\n\n        local lMODULE_BN=\"\"\n        lMODULE_BN=$(basename \"${lMODULE_FILE}\")\n        local lMODULE_MAIN=${lMODULE_BN%.*}\n        # module_start_log \"${lMODULE_MAIN}\"\n        if [[ \"${RESTART}\" -eq 1 ]]; then\n          if [[ $(grep -i -c \"${lMODULE_MAIN} finished\" \"${LOG_DIR}\"/\"${MAIN_LOG_FILE}\") -gt 0 ]]; then\n            if [[ \"${lMODULE_MAIN}\" == \"P99_\"* ]] || [[ \"${lMODULE_MAIN}\" == \"L1\"* ]]; then\n              print_output \"[*] $(print_date) - Module ${ORANGE}${lMODULE_MAIN}${NC} already finished but essential - rerun it\" \"main\"\n              lMOD_FIN=0\n            else\n              print_output \"[*] $(print_date) - Module ${ORANGE}${lMODULE_MAIN}${NC} already finished ... skipping\" \"main\"\n              lMOD_FIN=1\n              if [[ ${HTML} -eq 1 ]] ; then\n                # we need to build the web reporter links for skipping modules\n                local lLOG_FILES_ARR=()\n                local lLOG_FILE_TMP=\"\"\n                mapfile -t lLOG_FILES_ARR < <(find \"${LOG_DIR}\" -maxdepth 1 -type f -iname \"${lMODULE_MAIN}*.txt\" | sort)\n                for lLOG_FILE_TMP in \"${lLOG_FILES_ARR[@]}\"; do\n                  if grep -q \"nothing reported\" \"${lLOG_FILE_TMP}\"; then\n                    continue\n                  fi\n                  local lMODULE_NAME_TMP=\"\"\n                  lMODULE_NAME_TMP=$(basename -s .txt \"${lLOG_FILE_TMP}\")\n                  local lMODUL_NAME=\"\"\n                  lMODUL_NAME=\"$(strip_color_tags \"$(grep -a -E -B 1 '[=]{65}' \"${lLOG_FILE_TMP}\" | head -n 1 )\" | cut -d\" \" -f2-)\"\n                  local lHTML_FILE=\"${lMODULE_NAME_TMP}.html\"\n                  add_link_to_index \"${lHTML_FILE}\" \"${lMODUL_NAME}\"\n                done\n              fi\n            fi\n          fi\n        fi\n        if [[ \"${lMOD_FIN}\" -eq 0 ]]; then\n          if [[ ${THREADING_SET} -eq 1 ]]; then\n            \"${lMODULE_MAIN}\" &\n            local lMOD_PID=\"$!\"\n            store_kill_pids \"${lMOD_PID}\"\n            WAIT_PIDS+=( \"${lMOD_PID}\" )\n            max_pids_protection \"${MAX_MODS}\" \"${WAIT_PIDS[@]}\"\n          else\n            \"${lMODULE_MAIN}\"\n          fi\n        fi\n        reset_module_count\n      fi\n      if [[ \"${MODULE_GROUP^^}\" == \"P\" ]]; then\n        THREADING_SET=\"${THREADING_MOD_GROUP}\"\n      fi\n    done\n  else\n    # in full emulation mode we need to ensure that module s24 is always running\n    if [[ \"${MODULE_GROUP}\" == \"S\" ]] && [[ \"${FULL_EMULATION}\" -eq 1 ]] && [[ ! \"${SELECT_MODULES[*]}\" =~ [sS]24 ]]; then\n      print_output \"[*] Automatically enable module S24 for system emulation mode\"\n      SELECT_MODULES+=(\"S24\")\n    fi\n\n    # manual selection of pre-checking modules not supported. EMBA is doing this for you!\n    if [[ \"${SELECT_MODULES[*]}\" =~ [pP][0-9] ]]; then\n      print_ln \"no_log\"\n      print_output \"[!] ERROR: Manual pre-checking module selection not supported\" \"no_log\"\n      print_output \"[!] Hint: Remove -m p[0-9]+ parameter\" \"no_log\"\n      print_ln \"no_log\"\n      exit 1\n    fi\n\n    for SELECT_NUM in \"${SELECT_MODULES[@]}\" ; do\n      local lMOD_FIN=0\n      if [[ \"${SELECT_NUM}\" =~ ^[\"${MODULE_GROUP,,}\",\"${MODULE_GROUP^^}\"]{1}[0-9]+ ]]; then\n        local MODULE=\"\"\n        MODULE=$(find \"${MOD_DIR}\" -maxdepth 1 -name \"${MODULE_GROUP^^}\"\"${SELECT_NUM:1}\"\"_*.sh\" | sort -V 2> /dev/null)\n        # we need the whole module name including path in our array for later checks on it\n        export MODULES_EXPORTED+=(\"${MODULE}\")\n        if ( file -b \"${MODULE}\" | grep -q \"shell script\" ) && ! [[ \"${MODULE}\" =~ \\ |\\' ]] ; then\n          local lMODULE_BN=\"\"\n          lMODULE_BN=$(basename \"${MODULE}\")\n          local lMODULE_MAIN=${lMODULE_BN%.*}\n          # module_start_log \"${lMODULE_MAIN}\"\n          if [[ \"${RESTART}\" -eq 1 ]]; then\n            if [[ $(grep -i -c \"${lMODULE_MAIN} finished\" \"${LOG_DIR}\"/\"${MAIN_LOG_FILE}\") -gt 0 ]]; then\n              if [[ \"${lMODULE_MAIN}\" == \"P99_\"* ]] || [[ \"${lMODULE_MAIN}\" == \"L1\"* ]]; then\n                print_output \"[*] $(print_date) - Module ${ORANGE}${lMODULE_MAIN}${NC} already finished but essential - rerun it\" \"main\"\n                lMOD_FIN=0\n              else\n                print_output \"[*] $(print_date) - Module ${ORANGE}${lMODULE_MAIN}${NC} already finished ... skipping\" \"main\"\n                lMOD_FIN=1\n                if [[ ${HTML} -eq 1 ]] ; then\n                  # we need to build the web reporter links for skipping modules\n                  local lLOG_FILES_ARR=()\n                  local lLOG_FILE_TMP=\"\"\n                  mapfile -t lLOG_FILES_ARR < <(find \"${LOG_DIR}\" -maxdepth 1 -type f -iname \"${lMODULE_MAIN}*.txt\" | sort)\n                  for lLOG_FILE_TMP in \"${lLOG_FILES_ARR[@]}\"; do\n                    if grep -q \"nothing reported\" \"${lLOG_FILE_TMP}\"; then\n                      continue\n                    fi\n                    local lMODULE_NAME_TMP=\"\"\n                    lMODULE_NAME_TMP=$(basename -s .txt \"${lLOG_FILE_TMP}\")\n                    local lMODUL_NAME=\"\"\n                    lMODUL_NAME=\"$(strip_color_tags \"$(grep -a -E -B 1 '[=]{65}' \"${lLOG_FILE_TMP}\" | head -n 1 )\" | cut -d\" \" -f2-)\"\n                    local lHTML_FILE=\"${lMODULE_NAME_TMP}.html\"\n                    add_link_to_index \"${lHTML_FILE}\" \"${lMODUL_NAME}\"\n                  done\n                fi\n              fi\n            fi\n          fi\n          if [[ \"${lMOD_FIN}\" -eq 0 ]]; then\n            if [[ ${THREADING_SET} -eq 1 ]]; then\n              \"${lMODULE_MAIN}\" &\n              local lMOD_PID=\"$!\"\n              store_kill_pids \"${lMOD_PID}\"\n              WAIT_PIDS+=( \"${lMOD_PID}\" )\n              max_pids_protection \"${MAX_MODS}\" \"${WAIT_PIDS[@]}\"\n            else\n              \"${lMODULE_MAIN}\"\n            fi\n          fi\n          reset_module_count\n        fi\n      elif [[ \"${SELECT_NUM}\" =~ ^[\"${MODULE_GROUP,,}\",\"${MODULE_GROUP^^}\"]{1} ]]; then\n        export MODULES_ARR=()\n        local lMODULES_LOCAL_ARR=()\n        local lMODULES_EMBA_ARR=()\n        mapfile -t lMODULES_EMBA_ARR < <(find \"${MOD_DIR}\" -maxdepth 1 -name \"${MODULE_GROUP^^}\"\"*_*.sh\" | sort -V 2> /dev/null)\n        if [[ -d \"${MOD_DIR_LOCAL}\" ]]; then\n          mapfile -t lMODULES_LOCAL_ARR < <(find \"${MOD_DIR_LOCAL}\" -maxdepth 1 -name \"${MODULE_GROUP^^}\"\"*.sh\" 2>/dev/null | sort -V 2> /dev/null)\n        fi\n        MODULES_ARR=( \"${lMODULES_EMBA_ARR[@]}\" \"${lMODULES_LOCAL_ARR[@]}\" )\n\n        [[ ${THREADING_SET} -eq 1 ]] && sort_modules\n\n        for lMODULE_FILE in \"${MODULES_ARR[@]}\" ; do\n          # check if \"${lMODULE_NAME}\" is in blacklist from config directory and skip it\n          lMODULE_NAME=$(basename -s .sh \"${lMODULE_FILE}\")\n          if [[ \" ${MODULE_BLACKLIST[*]} \" =~  ${lMODULE_NAME}  ]]; then\n            print_output \"[*] $(print_date) - ${lMODULE_NAME} not executed - blacklist triggered \" \"main\"\n            continue\n          fi\n          local lMOD_FIN=0\n          if ( file -b \"${lMODULE_FILE}\" | grep -q \"shell script\" ) && ! [[ \"${lMODULE_FILE}\" =~ \\ |\\' ]] ; then\n            if [[ \"${MODULE_GROUP^^}\" == \"P\" ]] || [[ \"${MODULE_GROUP^^}\" == \"D\" ]]; then\n              # we are able to enable/disable threading on module basis in the the pre-checker modules with the header:\n              # export PRE_THREAD_ENA=1/0\n              # shellcheck source=/dev/null\n              source \"${lMODULE_FILE}\"\n              if [[ \"${PRE_THREAD_ENA}\" -eq 0 ]] ; then\n                THREADING_SET=0\n              fi\n            fi\n\n            local lMODULE_BN=\"\"\n            lMODULE_BN=$(basename \"${lMODULE_FILE}\")\n            local lMODULE_MAIN=${lMODULE_BN%.*}\n            # module_start_log \"${lMODULE_MAIN}\"\n            if [[ \"${RESTART}\" -eq 1 ]]; then\n              if [[ $(grep -i -c \"${lMODULE_MAIN} finished\" \"${LOG_DIR}\"/\"${MAIN_LOG_FILE}\") -gt 0 ]]; then\n                if [[ \"${lMODULE_MAIN}\" == \"P99_\"* ]] || [[ \"${lMODULE_MAIN}\" == \"L1\"* ]]; then\n                  print_output \"[*] $(print_date) - Module ${ORANGE}${lMODULE_MAIN}${NC} already finished but essential - rerun it\" \"main\"\n                  lMOD_FIN=0\n                else\n                  print_output \"[*] $(print_date) - Module ${ORANGE}${lMODULE_MAIN}${NC} already finished ... skipping\" \"main\"\n                  lMOD_FIN=1\n                  if [[ ${HTML} -eq 1 ]] ; then\n                    # we need to build the web reporter links for skipping modules\n                    local lLOG_FILES_ARR=()\n                    local lLOG_FILE_TMP=\"\"\n                    mapfile -t lLOG_FILES_ARR < <(find \"${LOG_DIR}\" -maxdepth 1 -type f -iname \"${lMODULE_MAIN}*.txt\" | sort)\n                    for lLOG_FILE_TMP in \"${lLOG_FILES_ARR[@]}\"; do\n                      if grep -q \"nothing reported\" \"${lLOG_FILE_TMP}\"; then\n                        continue\n                      fi\n                      local lMODULE_NAME_TMP=\"\"\n                      lMODULE_NAME_TMP=$(basename -s .txt \"${lLOG_FILE_TMP}\")\n                      local lMODUL_NAME=\"\"\n                      lMODUL_NAME=\"$(strip_color_tags \"$(grep -a -E -B 1 '[=]{65}' \"${lLOG_FILE_TMP}\" | head -n 1 )\" | cut -d\" \" -f2-)\"\n                      local lHTML_FILE=\"${lMODULE_NAME_TMP}.html\"\n                      add_link_to_index \"${lHTML_FILE}\" \"${lMODUL_NAME}\"\n                    done\n                  fi\n                fi\n              fi\n            fi\n            if [[ \"${lMOD_FIN}\" -eq 0 ]]; then\n              if [[ ${THREADING_SET} -eq 1 ]]; then\n                \"${lMODULE_MAIN}\" &\n                local lMOD_PID=\"$!\"\n                store_kill_pids \"${lMOD_PID}\"\n                WAIT_PIDS+=( \"${lMOD_PID}\" )\n                max_pids_protection \"${MAX_MODS}\" \"${WAIT_PIDS[@]}\"\n              else\n                \"${lMODULE_MAIN}\"\n              fi\n            fi\n            reset_module_count\n          fi\n          if [[ \"${MODULE_GROUP^^}\" == \"P\" ]]; then\n            THREADING_SET=\"${THREADING_MOD_GROUP}\"\n          fi\n        done\n      fi\n    done\n  fi\n}\n\nmain() {\n  set -a\n  trap cleaner INT\n\n  INVOCATION_PATH=\"$(dirname \"${0}\")\"\n\n  export EMBA_PID=\"$$\"\n\n  # loads default values for EMBA\n  export HELP_DIR=\"${INVOCATION_PATH}\"\"/helpers\"\n  import_helper\n  set_defaults\n\n  print_ln \"no_log\"\n  import_module\n\n  welcome  # Print EMBA welcome message\n\n  if [[ $# -eq 0 ]]; then\n    print_output \"\\\\n\"\"${ORANGE}\"\"In order to be able to use EMBA, you have to specify at least a firmware (-f).\" \"no_log\"\n    print_output \"If you don't set a log directory (-l), then ./logs will be used.\"\"${NC}\" \"no_log\"\n    print_help\n    exit 1\n  fi\n\n  export EMBA_COMMAND\n  EMBA_COMMAND=\"$(dirname \"${0}\")\"\"/emba \"\"$*\"\n\n  emba_parameter_parsing \"$@\"\n  set_log_paths\n\n  print_ln \"no_log\"\n\n  write_notification \"EMBA starting\"\n\n  # WSL support - currently experimental!\n  if [[ ${IN_DOCKER} -eq 0 ]]; then\n    if grep -q -i wsl /proc/version; then\n      print_bar \"no_log\"\n      print_output \"[*] $(print_date) - INFO: System running in WSL environment!\" \"no_log\"\n      print_output \"[*] $(print_date) - INFO: WSL is currently experimental.\" \"no_log\"\n      print_output \"[*] $(print_date) - INFO: Please report issues to https://github.com/e-m-b-a/emba/issues.\" \"no_log\"\n      print_bar \"no_log\"\n      export WSL=1\n    fi\n  fi\n\n  # print it only once per EMBA run - not again from started container\n  [[ ${IN_DOCKER} -eq 0 ]] && banner_printer\n\n  if [[ ${IN_DOCKER} -eq 1 ]] ; then\n    # set external path new for docker\n    export EXT_DIR=\"/external\"\n  fi\n\n  # activate the virtual environment - we should have it in external which fits also the docker environment\n  # shellcheck source=/dev/null\n  if [[ -f \"${EXT_DIR}/emba_venv/bin/activate\" ]]; then\n    print_output \"[*] $(print_date) - Enable python virtual environment ${ORANGE}${EXT_DIR}/emba_venv${NC}\" \"no_log\"\n    source \"${EXT_DIR}/emba_venv/bin/activate\"\n  fi\n\n  # EMBA should be started with \"sudo -E\" to access the proxy settings from the user\n  export PROXY_SETTINGS=\"\"\n  PROXY_SETTINGS=\"$(env | grep \"http_proxy=http\" | cut -d = -f2 | sort -u | head -1)\"\n  if [[ -n \"${PROXY_SETTINGS}\" ]]; then\n    # 2nd try with the original user:\n    PROXY_SETTINGS=\"$(sudo -E -u \"${SUDO_USER:-${USER}}\" env | grep -E \"http_proxy=http\" | cut -d = -f2 | sort -u | head -1)\"\n  else\n    if [[ -f \"${LOG_DIR}\"/orig_user.log ]]; then\n      if grep -q \"PROXY: http\" \"${LOG_DIR}\"/orig_user.log; then\n        PROXY_SETTINGS=\"$(grep \"PROXY: http\" \"${LOG_DIR}\"/orig_user.log | awk '{print $2}')\"\n      fi\n    fi\n  fi\n\n  # Check all dependencies of EMBA\n  dependency_check\n\n  if [[ \"${ONLY_DEP}\" -eq 0 ]]; then\n    if [[ \"${UPDATE}\" -eq 1 ]]; then\n      write_notification \"EMBA starts with update\"\n      emba_updater\n      exit 0\n    fi\n\n    if [[ ${USE_DOCKER} -eq 0 && ${IN_DOCKER} -eq 0 ]]; then\n      print_bar \"no_log\"\n      print_output \"[!] $(print_date) - WARNING: EMBA running in developer mode!\" \"no_log\"\n      write_notification \"WARNING: EMBA running in developer mode\"\n      print_bar \"no_log\"\n    fi\n\n    enable_strict_mode \"${STRICT_MODE}\" 1\n\n    # profile handling\n    if [[ -n \"${PROFILE:-}\" ]]; then\n      if [[ -f \"${PROFILE}\" ]]; then\n        print_bar \"no_log\"\n        if [[ ${IN_DOCKER} -ne 1 ]] ; then\n          print_output \"[*] $(print_date) - Loading EMBA scan profile with the following settings:\" \"no_log\"\n        else\n          print_output \"[*] $(print_date) - Loading EMBA scan profile.\" \"no_log\"\n        fi\n        # all profile output and settings are done by the profile file located in ./scan-profiles/\n        # shellcheck source=/dev/null\n        source \"${PROFILE}\"\n        print_output \"[*] $(print_date) - Profile ${PROFILE} loaded.\" \"no_log\"\n        print_bar \"no_log\"\n      else\n        print_output \"[!] $(print_date) - Profile ${PROFILE} not found.\" \"no_log\"\n        exit 1\n      fi\n    fi\n\n    if [[ \"${ONLY_DEP}\" -eq 0 ]]; then\n      # check provided paths for validity\n      check_path_valid \"${FIRMWARE_PATH}\"\n      check_path_valid \"${KERNEL_CONFIG}\"\n      check_path_valid \"${LOG_DIR}\"\n    fi\n\n    # restart file gets generated during startup if old log dir is found:\n    if [[ ${IN_DOCKER} -eq 1 && \"${CONTAINER_NUMBER}\" -eq 1 ]] || [[ \"${USE_DOCKER}\" -eq 0 && ${IN_DOCKER} -eq 0 ]]; then\n      if [[ -f \"${TMP_DIR}\"/restart_emba ]]; then\n        print_output \"[!] $(print_date) - Found restart file and backup_vars file ... trying to restart EMBA scan\" \"no_log\"\n        export RESTART=1\n        rm \"${TMP_DIR}\"/restart_emba\n        # shellcheck source=/dev/null\n        source \"${LOG_DIR}\"\"/backup_vars.log\"\n      fi\n    fi\n\n    # check if LOG_DIR exists and prompt to terminal to delete its content (Y/n)\n    [[ ${IN_DOCKER} -eq 0 ]] && log_folder\n\n    # create log directory, if not exists and needed subdirectories\n    # do not create a log dir for dep check\n    export MAIN_LOG=\"${LOG_DIR}\"\"/\"\"${MAIN_LOG_FILE}\"\n    export ERROR_LOG=\"${LOG_DIR}\"/emba_error.log\n    [[ \"${ONLY_DEP}\" -eq 0 ]] && create_log_dir\n\n    # kernel downloader runs on the host and waits for an identified kernel version. Afterwards\n    # it tries to download the kernel sources for further analysis\n    if [[ ${IN_DOCKER} -eq 0 ]]; then\n      kernel_downloader &\n      K_DOWN_PID=\"$!\"\n      store_kill_pids \"${K_DOWN_PID}\"\n      print_output \"[*] $(print_date) - Started kernel downloader thread with PID ${ORANGE}${K_DOWN_PID}${NC}\" \"no_log\"\n    fi\n\n    if [[ ${IN_DOCKER} -eq 0 ]]; then\n      echo \"${LOG_DIR}\" > \"${TMP_DIR}\"/orig_logdir\n    fi\n\n    if [[ \"${IN_DOCKER}\" -eq 0 ]]; then\n      print_notification &\n      NOTIFICATION_PID=\"$!\"\n      store_kill_pids \"${NOTIFICATION_PID}\"\n      disown \"${NOTIFICATION_PID}\" 2> /dev/null || true\n      print_output \"[*] $(print_date) - Original user: ${ORANGE}${SUDO_USER:-${USER}}${NC}\" \"no_log\"\n      print_output \"[*] $(print_date) - Notification process started with PID ${ORANGE}${NOTIFICATION_PID}${NC}\" \"no_log\"\n      PROXY=\"$(sudo -E -u \"${SUDO_USER:-${USER}}\" env | grep -E \"http(s)_proxy\" | cut -d = -f2 || true)\"\n      echo \"${SUDO_USER:-${USER}}\" > \"${LOG_DIR}\"/orig_user.log\n      {\n        echo \"UID: $(id -u \"${SUDO_USER:-${USER}}\")\"\n        echo \"GID: $(id -g \"${SUDO_USER:-${USER}}\")\"\n        echo \"PROXY: ${PROXY}\"\n      } >> \"${LOG_DIR}\"/orig_user.log\n    fi\n\n    if [[ \"${IN_DOCKER}\" -eq 0 ]]; then\n      print_running_modules &\n      RUN_MOD_PID=\"$!\"\n      store_kill_pids \"${RUN_MOD_PID}\"\n      echo \"${RUN_MOD_PID}\" > \"${LOG_DIR}\"/print_running_modules.pid\n      disown \"${RUN_MOD_PID}\" 2> /dev/null || true\n    fi\n\n    # Print additional information about the firmware (-Y, -X, -Z, -N)\n    print_firmware_info \"${FW_VENDOR}\" \"${FW_VERSION}\" \"${FW_DEVICE}\" \"${FW_NOTES}\"\n    if [[ \"${KERNEL}\" -ne 1 ]] && [[ \"${CONTAINER_EXTRACT}\" -ne 1 ]] && [[ \"${ONLY_DEP}\" -eq 0 ]]; then\n      check_init_size\n    fi\n\n    # Now we have the firmware and log path, lets set some additional paths\n    FIRMWARE_PATH=\"$(abs_path \"${FIRMWARE_PATH}\")\"\n\n    # Check firmware type (file/directory)\n    # copy the firmware outside of the docker and not a second time within the docker\n    if [[ -d \"${FIRMWARE_PATH}\" ]] ; then\n      PRE_CHECK=1\n      print_output \"[*] $(print_date) - Firmware directory detected.\" \"no_log\"\n      print_output \"[*] $(print_date) - EMBA starts with testing the environment.\" \"no_log\"\n      if [[ ${IN_DOCKER} -eq 0 ]] ; then\n        # in docker environment the firmware is already available\n        print_output \"    The provided firmware will be copied to ${ORANGE}\"\"${FIRMWARE_PATH_CP}\"\"/\"\"$(basename \"${FIRMWARE_PATH}\")\"\"${NC}\" \"no_log\"\n        cp -pRPf \"${FIRMWARE_PATH}\" \"${FIRMWARE_PATH_CP}\"\"/\"\"$(basename \"${FIRMWARE_PATH}\")\"\n        FIRMWARE_PATH=\"${FIRMWARE_PATH_CP}\"\"/\"\"$(basename \"${FIRMWARE_PATH}\")\"\n        export OUTPUT_DIR=\"${FIRMWARE_PATH_CP}\"\n      else\n        # need to set it as fallback:\n        export OUTPUT_DIR=\"${FIRMWARE_PATH}\"\n      fi\n    elif [[ \"${CONTAINER_EXTRACT}\" -eq 1 ]]; then\n      PRE_CHECK=1\n      print_output \"[*] $(print_date) - Firmware analysis of docker image starting.\" \"no_log\"\n      print_output \"    EMBA starts with extracting the docker image ${ORANGE}${CONTAINER_ID}${NC}.\" \"no_log\"\n      export FIRMWARE_PATH=\"${LOG_DIR}\"/firmware/firmware_docker_extracted.tar\n      export OUTPUT_DIR=\"${FIRMWARE_PATH}\"\n      export FIRMWARE=1\n    elif [[ -f \"${FIRMWARE_PATH}\" ]] && [[ -z \"${FIRMWARE_PATH1}\" ]]; then\n      PRE_CHECK=1\n      if [[ -n \"${KERNEL_CONFIG}\" && \"${KERNEL}\" -eq 1 ]]; then\n        print_output \"[*] $(print_date) - Kernel configuration file detected.\" \"no_log\"\n      else\n        print_output \"[*] $(print_date) - Firmware binary detected.\" \"no_log\"\n      fi\n      print_output \"    EMBA starts with the pre-testing phase.\" \"no_log\"\n      export OUTPUT_DIR=\"${FIRMWARE_PATH}\"\n    elif [[ -f \"${FIRMWARE_PATH}\" ]] && [[ -f \"${FIRMWARE_PATH1}\" ]]; then\n      DIFF_MODE=1\n      print_output \"[*] $(print_date) - Multiple firmware binarie detected.\" \"no_log\"\n      print_output \"    EMBA starts in firmware diff mode.\" \"no_log\"\n    else\n      print_output \"[!] $(print_date) - Invalid firmware file\" \"no_log\"\n      print_help\n      exit 1\n    fi\n\n    # calculate the maximum modules are running in parallel\n    if [[ ${THREADED} -eq 1 ]] && [[ \"${MAX_MODS}\" -eq 0 ]]; then\n      # the maximum modules in parallel\n      # rule of thumb - per core half a module, minimum 2 modules\n      MAX_MODS=\"$(( \"$(grep -c ^processor /proc/cpuinfo)\" /2 +1))\"\n\n      # if we have only one core we run two modules in parallel\n      if [[ \"${MAX_MODS}\" -lt 2 ]]; then\n        MAX_MODS=2\n      fi\n      export MAX_MODS\n    fi\n\n    # calculate the maximum threads per module\n    if [[ ${THREADED} -eq 1 ]] && [[ \"${MAX_MOD_THREADS}\" -eq 0 ]]; then\n      # the maximum threads per modules - if this value does not match adjust it via\n      # local MAX_MOD_THREADS=123 in module area\n      export MAX_MOD_THREADS=\"$(( 2* \"$(grep -c ^processor /proc/cpuinfo)\" ))\"\n    fi\n\n    # setup non threaded mode:\n    if [[ ${THREADED} -eq 0 ]]; then\n      export MAX_MODS=1\n      export MAX_MOD_THREADS=1\n    fi\n    if [[ \"${MAX_MODS}\" -eq 1 ]] || [[ \"${MAX_MOD_THREADS}\" -eq 1 ]]; then\n      print_ln \"no_log\"\n      print_output \"[!] WARNING: EMBA is running with ${ORANGE}${MAX_MODS}${MAGENTA} modules in parallel and ${ORANGE}${MAX_MOD_THREADS}${MAGENTA} threads per module.\" \"no_log\"\n      print_output \"[!] This scan could take a very long time ...\" \"no_log\"\n    else\n      print_output \"$(indent \"EMBA is running with ${ORANGE}${MAX_MODS}${NC} modules in parallel and ${ORANGE}${MAX_MOD_THREADS}${NC} threads per module.\")\" \"no_log\"\n    fi\n\n    # Change log output to color for web report and prepare report\n    if [[ ${HTML} -eq 1 ]] ; then\n      if [[ ${FORMAT_LOG} -eq 0 ]] ; then\n        FORMAT_LOG=1\n        print_output \"[*] $(print_date) - Activate colored log for webreport\" \"no_log\"\n      fi\n      print_output \"[*] $(print_date) - Prepare webreport\" \"no_log\"\n      prepare_report\n    fi\n\n    if [[ ${LOG_GREP} -eq 1 ]] ; then\n      # Create grep-able log file\n      create_grep_log\n      write_grep_log \"sudo \"\"${EMBA_COMMAND}\" \"COMMAND\"\n    fi\n\n    if [[ \"${KERNEL}\" -ne 1 ]] && [[ ${FIRMWARE} -eq 1 ]]; then\n      # Exclude paths from testing and set EXCL_FIND for find command (prune paths dynamicially)\n      set_exclude\n    fi\n\n    #######################################################################################\n    # Kernel configuration check\n    #######################################################################################\n    if [[ \"${KERNEL}\" -eq 1 ]]; then\n      if [[ ${IN_DOCKER} -eq 1 ]] && [[ -f \"${LOG_DIR}\"/kernel_config ]]; then\n        export KERNEL_CONFIG=\"${LOG_DIR}\"/kernel_config\n      fi\n\n      if ! [[ -f \"${KERNEL_CONFIG}\" ]] ; then\n        print_output \"[-] $(print_date) - Invalid kernel configuration file: ${ORANGE}${KERNEL_CONFIG}${NC}\" \"no_log\"\n        exit 1\n      else\n        if [[ ${IN_DOCKER} -eq 0 ]] ; then\n          # we copy the kernel config file from outside the container into our log directory\n          # further modules are using LOG_DIR/kernel_config for accessing the kernel config\n          if [[ -d \"${LOG_DIR}\" ]] ; then\n            cp \"${KERNEL_CONFIG}\" \"${LOG_DIR}\"/kernel_config\n          else\n            print_output \"[!] $(print_date) - Missing log directory\" \"no_log\"\n            exit 1\n          fi\n        fi\n      fi\n    fi\n\n    # disk space monitor not fully working -> removed for now\n    # Todo: check it and fix it\n    # disk_space_monitor \"${EMBA_PID}\" &\n    # local TMP_PID=\"$!\"\n    # store_kill_pids \"${TMP_PID}\"\n    # disown \"${TMP_PID}\" 2> /dev/null || true\n\n    # if $CONTAINER_EXTRACT is set we extract the docker container with id $CONTAINER_ID outside of the\n    # EMBA container into log directory\n    # we do this outside of the EMBA container - otherwise we will not reach the docker environment\n    if [[ \"${CONTAINER_EXTRACT}\" -eq 1 && \"${IN_DOCKER}\" -eq 0 ]] ; then\n      docker_container_extractor \"${CONTAINER_ID}\"\n    fi\n  fi\n\n  #######################################################################################\n  # Docker\n  #######################################################################################\n  if [[ ${USE_DOCKER} -eq 1 ]] ; then\n    if ! [[ ${EUID} -eq 0 ]] ; then\n      if ! groups | grep -qw docker; then\n        print_output \"[!] $(print_date) - Using EMBA with docker-compose requires root permissions\" \"no_log\"\n        print_output \"$(indent \"Run EMBA with root permissions or add your user to docker group\")\" \"no_log\"\n        print_output \"$(indent \"e.g., sudo usermod -aG docker [non-root user]\")\" \"no_log\"\n        exit 1\n      fi\n    fi\n\n    OPTIND=1\n    ARGUMENTS=()\n    while getopts a:A:BcC:d:De:Ef:Fghijk:l:m:N:o:p:P:qQrsStT:UX:yY:WzZ: OPT ; do\n      case ${OPT} in\n        D|f|i|l|o)\n          ;;\n        *)\n          if [[ -v OPTARG[@] ]] ; then\n            ARGUMENTS=( \"${ARGUMENTS[@]}\" \"-${OPT}\" \"${OPTARG[@]}\" )\n          else\n            ARGUMENTS=( \"${ARGUMENTS[@]}\" \"-${OPT}\" )\n          fi\n          ;;\n      esac\n    done\n\n    if [[ \"${IN_DOCKER}\" -eq 0 ]] && [[ \"${SILENT}\" -eq 1 ]]; then\n      initial_status_bar &\n      # Trap the window resize signal (handle window resize events).\n      trap 'initial_status_bar' WINCH\n    fi\n\n    print_output \"[*] $(print_date) - EMBA sets up the docker environment.\\\\n\" \"no_log\"\n\n    # try it 10 times before exit\n    local lCNT_DOCK=0\n    for lCNT_DOCK in {1..10}; do\n      if ! docker images | grep -qE \"embeddedanalyzer/emba[[:space:]]\"; then\n        sleep 1\n      else\n        break\n      fi\n      if [[ \"${lCNT_DOCK}\" -ge 10 ]]; then\n        print_output \"[-] $(print_date) - EMBA docker environment not ready!\" \"no_log\"\n        exit 1\n      fi\n    done\n\n    print_output \"[*] $(print_date) - EMBA initializes docker container.\\\\n\" \"no_log\"\n\n    if [[ \"${ONLY_DEP}\" -eq 0 ]]; then\n      # store some details that we do not have in the docker container:\n      echo \"${FIRMWARE_PATH}\" >> \"${TMP_DIR}\"/fw_name.log\n      if [[ \"${DIFF_MODE}\" -gt 0 ]]; then\n        echo \"${FIRMWARE_PATH1}\" >> \"${TMP_DIR}\"/fw_name.log\n      fi\n      echo \"${LOG_DIR}\" >> \"${TMP_DIR}\"/emba_log_dir.log\n      echo \"${EMBA_COMMAND}\" >> \"${TMP_DIR}\"/emba_command.log\n    fi\n\n    write_notification \"EMBA starting docker container\"\n\n    [[ \"${STRICT_MODE}\" -eq 1 ]] && set +e\n\n    disable_strict_mode \"${STRICT_MODE}\" 0\n    if [[ \"${ONLY_DEP}\" -gt 0 ]]; then\n      # check dependencies mode:\n      EMBA=\"${INVOCATION_PATH}\" FIRMWARE=\"${FIRMWARE_PATH}\" LOG=\"/tmp\" \"${DOCKER_COMPOSE[@]}\" run --rm emba -c './emba -l /logs -f /firmware -i \"$@\"' _ \"${ARGUMENTS[@]}\"\n      D_RETURN=$?\n      EMBA=\"${INVOCATION_PATH}\" FIRMWARE=\"${FIRMWARE_PATH}\" LOG=\"/tmp\" \"${DOCKER_COMPOSE[@]}\" run --rm emba_quest -c './emba -l /logs -f /firmware -i \"$@\"' _ \"${ARGUMENTS[@]}\"\n      if [[ $? -ne ${D_RETURN} ]]; then\n        D_RETURN=1\n      fi\n    elif [[ \"${DIFF_MODE}\" -gt 0 ]]; then\n      FIRMWARE_PATH1=\"$(abs_path \"${FIRMWARE_PATH1}\")\"\n      # firmware diff mode - needs two firmware files:\n      EMBA=\"${INVOCATION_PATH}\" FIRMWARE=\"${FIRMWARE_PATH}\" LOG=\"${LOG_DIR}\" \"${DOCKER_COMPOSE[@]}\" run -v \"${FIRMWARE_PATH1}\":/firmware2 --rm emba -c './emba -l /logs -f /firmware -o /firmware2 -i \"$@\"' _ \"${ARGUMENTS[@]}\"\n      D_RETURN=$?\n    else\n      print_ln \"no_log\"\n      welcome\n      # default EMBA analysis mode:\n      local lQUEST_CONTAINER_=\"\"\n      lQUEST_CONTAINER_=\"$(EMBA=\"${INVOCATION_PATH}\" FIRMWARE=\"${FIRMWARE_PATH}\" LOG=\"${LOG_DIR}\" \"${DOCKER_COMPOSE[@]}\" run --detach --rm emba_quest -c './emba -l /logs -f /firmware -i \"$@\"' _ \"${ARGUMENTS[@]}\")\"\n      export QUEST_CONTAINER=\"${lQUEST_CONTAINER_}\"\n      print_output \"[+] $(print_date) - Quest container ${lQUEST_CONTAINER_} started and detached.\\\\n\" \"no_log\"\n\n      # EMBA startup:\n      if [[ \"${SILENT}\" -eq 0 ]]; then\n        # EMBA container starts in the foreground and we can see all the logs\n        EMBA=\"${INVOCATION_PATH}\" FIRMWARE=\"${FIRMWARE_PATH}\" LOG=\"${LOG_DIR}\" \"${DOCKER_COMPOSE[@]}\" run --rm emba -c './emba -l /logs -f /firmware -i \"$@\"' _ \"${ARGUMENTS[@]}\"\n        D_RETURN=$?\n      else\n        # EMBA container starts in the background\n        print_output \"[*] $(print_date) - EMBA main container starting and detaching.\\\\n\" \"no_log\"\n        local lMAIN_CONTAINER_=\"\"\n        lMAIN_CONTAINER_=\"$(EMBA=\"${INVOCATION_PATH}\" FIRMWARE=\"${FIRMWARE_PATH}\" LOG=\"${LOG_DIR}\" \"${DOCKER_COMPOSE[@]}\" run --detach --rm emba -c './emba -l /logs -f /firmware -i \"$@\"' _ \"${ARGUMENTS[@]}\")\"\n        export MAIN_CONTAINER=\"${lMAIN_CONTAINER_}\"\n\n        print_output \"[+] $(print_date) - EMBA main container ${lMAIN_CONTAINER_} started and detached.\" \"no_log\"\n        print_ln \"no_log\"\n        # the following write_log is used as the status bar shows the main emba.log and with a print_output we get double output\n        write_log \"[*] $(print_date) - EMBA main container ${lMAIN_CONTAINER_} monitoring through ${ORANGE}docker logs ${lMAIN_CONTAINER_} -f${NC}.\" \"${LOG_DIR}/emba.log\"\n        if [[ \"$( docker container inspect -f '{{.State.Status}}' \"${lQUEST_CONTAINER_}\" )\" == \"running\" ]]; then\n          write_log \"[*] $(print_date) - EMBA quest container ${lQUEST_CONTAINER_} monitoring through ${ORANGE}docker logs ${lQUEST_CONTAINER_} -f${NC}.\" \"${LOG_DIR}/emba.log\"\n        fi\n\n        while [[ \"$( docker container inspect -f '{{.State.Status}}' \"${lMAIN_CONTAINER_}\" )\" == \"running\" ]]; do\n          sleep 1\n        done\n        remove_status_bar\n        # reset\n        printf \"\\x1Bc\"\n\n        if [[ -f \"${LOG_DIR}\"/f50_base_aggregator.txt ]]; then\n          cat \"${LOG_DIR}\"/f50_base_aggregator.txt\n        fi\n        D_RETURN=$(docker inspect \"${lMAIN_CONTAINER_}\" --format='{{.State.ExitCode}}')\n      fi\n    fi\n    enable_strict_mode \"${STRICT_MODE}\" 0\n\n    if [[ \"${D_RETURN}\" -eq 0 ]] ; then\n      if [[ \"${ONLY_DEP}\" -eq 0 ]] ; then\n        print_output \"[*] $(print_date) - EMBA finished analysis in default mode (docker container).\\\\n\" \"no_log\"\n        write_notification \"EMBA finished analysis in default mode\"\n        print_output \"[*] $(print_date) - Firmware tested: ${ORANGE}${FIRMWARE_PATH}${NC}\" \"no_log\"\n        print_output \"[*] $(print_date) - Log directory: ${ORANGE}${LOG_DIR}${NC}\" \"no_log\"\n        if [[ -v HTML_PATH ]] && [[ -f \"${HTML_PATH}\"/index.html ]]; then\n          print_output \"[*] $(print_date) - Access the web-report with ${ORANGE}firefox $(abs_path \"${HTML_PATH}/index.html\")${NC}\" \"main\"\n        fi\n        cleaner 0\n        print_output \"[!] $(print_date) - Test ended on \"\"$(print_date)\"\" and took about \"\"$(show_runtime)\"\" \\\\n\" \"main\"\n      else\n        # we do not need the log dir from dependency checker\n        [[ -d \"${LOG_DIR}\" ]] && rm -rf \"${LOG_DIR}\"\n        print_output \"[!] $(print_date) - Test ended on \"\"$(print_date)\"\" and took about \"\"$(show_runtime)\"\" \\\\n\" \"no_log\"\n      fi\n      exit 0\n    else\n      print_output \"[-] $(print_date) - Test ended on \"\"$(print_date)\"\" and EMBA failed in docker mode!\" \"main\"\n      cleaner 0\n      write_notification \"EMBA failed analysis in default mode\"\n      exit 1\n    fi\n  fi\n\n  #######################################################################################\n  # Quests (Q-modules)\n  #######################################################################################\n\n  if [[ -v CONTAINER_NUMBER ]] && [[ \"${DIFF_MODE}\" -ne 1 ]]; then\n    if [[ \"${CONTAINER_NUMBER}\" -eq 2 ]] ;  then\n      while ! grep -q \"Pre-checking phase started\" \"${LOG_DIR}\"/\"${MAIN_LOG_FILE}\"; do\n        sleep 1\n      done\n      run_modules \"Q\" \"${THREADED}\" \"0\"\n      [[ \"${THREADED}\" -eq 1 ]] && wait_for_pid \"${WAIT_PIDS[@]}\"\n      print_output \"[*] $(print_date) - Quest container finished\" \"main\"\n      exit 0\n    elif [[ \"${USE_DOCKER}\" -eq 0 && \"${IN_DOCKER}\" -eq 0 ]] ;  then\n      # currently we do not support the Quest containers in dev mode\n      while ! grep -q \"Pre-checking phase started\" \"${LOG_DIR}\"/\"${MAIN_LOG_FILE}\"; do\n        sleep 1\n      done\n      # dev-mode\n      run_modules \"Q\" \"${THREADED}\" \"0\" &\n      export Q_MOD_PID=\"$!\"\n    elif [[ \"${CONTAINER_NUMBER}\" -ne 1 ]]; then\n      docker logs \"${QUEST_CONTAINER}\" --follow | grep \"ok\" && print_output \"[*] Quest container ${lQUEST_CONTAINER_} failed the dependancy check\" \"main\"\n    fi\n  fi\n\n  #######################################################################################\n  # Pre-Check (P-modules)\n  #######################################################################################\n  if [[ \"${PRE_CHECK}\" -eq 1 ]] && [[ \"${DIFF_MODE}\" -ne 1 ]]; then\n\n    print_ln \"no_log\"\n    if [[ -d \"${LOG_DIR}\" ]]; then\n      print_output \"[!] $(print_date) - Pre-checking phase started on \"\"$(print_date)\"\"\\\\n\"\"$(indent \"${NC}\"\"Firmware binary path: \"\"${FIRMWARE_PATH}\")\" \"main\"\n    else\n      print_output \"[!] $(print_date) - Pre-checking phase started on \"\"$(print_date)\"\"\\\\n\"\"$(indent \"${NC}\"\"Firmware binary path: \"\"${FIRMWARE_PATH}\")\" \"no_log\"\n    fi\n    write_notification \"Pre-checking phase started\"\n\n    # 'main' functions of imported modules\n    # in the pre-check phase we execute all modules with P[Number]_Name.sh\n\n    run_modules \"P\" \"${THREADED}\" \"0\"\n\n    # if we running threaded we ware going to wait for the slow guys here\n    [[ ${THREADED} -eq 1 ]] && wait_for_pid \"${WAIT_PIDS[@]}\"\n\n    print_ln \"no_log\"\n\n    if [[ -d \"${LOG_DIR}\" ]]; then\n      print_output \"[!] $(print_date) - Pre-checking phase ended on \"\"$(print_date)\"\" and took about \"\"$(show_runtime)\"\" \\\\n\" \"main\"\n    else\n      print_output \"[!] $(print_date) - Pre-checking phase ended on \"\"$(print_date)\"\" and took about \"\"$(show_runtime)\"\" \\\\n\" \"no_log\"\n    fi\n    write_notification \"Pre-checking phase finished\"\n\n    # useful prints for debugging:\n    # print_output \"[!] Firmware value: ${FIRMWARE}\"\n    # print_output \"[!] Firmware path: ${FIRMWARE}_PATH\"\n    # print_output \"[!] Output dir: $OUTPUT_DIR\"\n    # print_output \"[!] LINUX_PATH_COUNTER: $LINUX_PATH_COUNTER\"\n    # print_output \"[!] LINUX_PATH_ARRAY: ${#ROOT_PATH[@]}\"\n  fi\n\n  #######################################################################################\n  # Diff mode (D-modules)\n  #######################################################################################\n  if [[ \"${DIFF_MODE}\" -eq 1 ]] ; then\n\n    print_ln \"no_log\"\n    if [[ -d \"${LOG_DIR}\" ]]; then\n      print_output \"[!] $(print_date) - Diff mode started on \"\"$(print_date)\" \"main\"\n      print_output \"$(indent \"${NC}\"\"1st Firmware binary path: \"\"${FIRMWARE_PATH}\")\" \"main\"\n      print_output \"$(indent \"${NC}\"\"2nd Firmware binary path: \"\"${FIRMWARE_PATH1}\")\" \"main\"\n    else\n      print_output \"[!] $(print_date) - Diff mode started on \"\"$(print_date)\"\n      print_output \"$(indent \"${NC}\"\"1st Firmware binary path: \"\"${FIRMWARE_PATH}\")\" \"no_log\"\n      print_output \"$(indent \"${NC}\"\"2nd Firmware binary path: \"\"${FIRMWARE_PATH1}\")\" \"no_log\"\n    fi\n    write_notification \"Diff mode started\"\n\n    run_modules \"D\" \"${THREADED}\" \"0\"\n\n    if [[ -d \"${LOG_DIR}\" ]]; then\n      print_output \"[!] $(print_date) - Diff mode ended on \"\"$(print_date)\"\" and took about \"\"$(show_runtime)\"\" \\\\n\" \"main\"\n    else\n      print_output \"[!] $(print_date) - Diff mode ended on \"\"$(print_date)\"\" and took about \"\"$(show_runtime)\"\" \\\\n\" \"no_log\"\n    fi\n    write_notification \"Diff mode finished\"\n\n    TESTING_DONE=1\n\n  fi\n\n  #######################################################################################\n  # Firmware-Check (S modules)\n  #######################################################################################\n  WAIT_PIDS=()\n  if [[ ${FIRMWARE} -eq 1 ]] && [[ \"${DIFF_MODE}\" -ne 1 ]]; then\n    print_output \"\\n=================================================================\\n\" \"no_log\"\n\n    if [[ -d \"${LOG_DIR}\" ]]; then\n      print_output \"[!] $(print_date) - Testing phase started on \"\"$(print_date)\"\"\\\\n\"\"$(indent \"${NC}\"\"Firmware path: \"\"${FIRMWARE_PATH}\")\" \"main\"\n    else\n      print_output \"[!] $(print_date) - Testing phase started on \"\"$(print_date)\"\"\\\\n\"\"$(indent \"${NC}\"\"Firmware path: \"\"${FIRMWARE_PATH}\")\" \"no_log\"\n    fi\n    write_notification \"Testing phase finished\"\n    write_grep_log \"$(print_date)\" \"TIMESTAMP\"\n\n    run_modules \"S\" \"${THREADED}\" \"${HTML}\"\n\n    [[ ${THREADED} -eq 1 ]] && wait_for_pid \"${WAIT_PIDS[@]}\"\n\n    print_ln \"no_log\"\n\n    if [[ -d \"${LOG_DIR}\" ]]; then\n      print_output \"[!] $(print_date) - Testing phase ended on \"\"$(print_date)\"\" and took about \"\"$(show_runtime)\"\" \\\\n\" \"main\"\n    else\n      print_output \"[!] $(print_date) - Testing phase ended on \"\"$(print_date)\"\" and took about \"\"$(show_runtime)\"\" \\\\n\" \"no_log\"\n    fi\n    write_notification \"Testing phase ended\"\n\n    TESTING_DONE=1\n  fi\n\n  #######################################################################################\n  # Live Emulation - Check (L-modules)\n  #######################################################################################\n  if [[ \"${FULL_EMULATION}\" -eq 1 ]] && [[ \"${DIFF_MODE}\" -ne 1 ]]; then\n    print_output \"\\n=================================================================\\n\" \"no_log\"\n    if [[ -d \"${LOG_DIR}\" ]]; then\n      print_output \"[!] $(print_date) - System emulation phase started on \"\"$(print_date)\"\"\\\\n\"\"$(indent \"${NC}\"\"Firmware path: \"\"${FIRMWARE_PATH}\")\" \"main\"\n    else\n      print_output \"[!] $(print_date) - System emulation phase started on \"\"$(print_date)\"\"\\\\n\"\"$(indent \"${NC}\"\"Firmware path: \"\"${FIRMWARE_PATH}\")\" \"no_log\"\n    fi\n    write_notification \"System emulation phase started\"\n\n    write_grep_log \"$(print_date)\" \"TIMESTAMP\"\n    # these modules are not threaded!\n    run_modules \"L\" \"0\" \"${HTML}\"\n\n    print_ln \"no_log\"\n    if [[ -d \"${LOG_DIR}\" ]]; then\n      print_output \"[!] $(print_date) - System emulation phase ended on \"\"$(print_date)\"\" and took about \"\"$(show_runtime)\"\" \\\\n\" \"main\"\n    else\n      print_output \"[!] $(print_date) - System emulation ended on \"\"$(print_date)\"\" and took about \"\"$(show_runtime)\"\" \\\\n\" \"no_log\"\n    fi\n    write_notification \"System emulation phase ended\"\n  fi\n\n  #######################################################################################\n  # Reporting (F-modules)\n  #######################################################################################\n  if [[ -d \"${LOG_DIR}\" ]]; then\n    print_output \"[!] $(print_date) - Reporting phase started on \"\"$(print_date)\"\"\\\\n\" \"main\"\n  else\n    print_output \"[!] $(print_date) - Reporting phase started on \"\"$(print_date)\"\"\\\\n\" \"no_log\"\n  fi\n  write_notification \"Reporting phase started\"\n\n  run_modules \"F\" \"0\" \"${HTML}\"\n\n  [[ ${DISABLE_STATUS_BAR} -eq 0 ]] && remove_status_bar\n\n  write_notification \"Reporting phase ended\"\n\n  if [[ \"${USE_DOCKER}\" -eq 0 && \"${THREADED}\" -eq 1 && \"${IN_DOCKER}\" -eq 0 ]] && [[ -n \"${Q_MOD_PID}\" ]];  then\n    wait_for_pid \"${Q_MOD_PID}\"\n  fi\n\n  if [[ \"${TESTING_DONE}\" -eq 1 ]]; then\n    if [[ \"${FINAL_FW_RM}\" -eq 1 && -d \"${LOG_DIR}\"/firmware ]]; then\n      print_output \"[*] $(print_date) - Removing temp firmware directory\\\\n\" \"no_log\"\n      rm -r \"${LOG_DIR}\"/firmware 2>/dev/null\n    fi\n    if [[ \"${FINAL_FW_RM}\" -eq 1 && -d \"${LOG_DIR}\"/p61_unblob_eval/unblob_extracted ]]; then\n      print_output \"[*] $(print_date) - Removing unblob firmware directory\\\\n\" \"no_log\"\n      rm -r \"${LOG_DIR}\"/p61_unblob_eval/unblob_extracted 2>/dev/null\n    fi\n    print_ln \"no_log\"\n    if [[ -d \"${LOG_DIR}\" ]]; then\n      print_output \"[!] $(print_date) - Test ended on \"\"$(print_date)\"\" and took about \"\"$(show_runtime)\"\" \\\\n\" \"main\"\n      write_notification \"EMBA finished analysis\"\n      rm -r \"${TMP_DIR}\" 2>/dev/null || true\n    else\n      print_output \"[!] $(print_date) - Test ended on \"\"$(print_date)\"\" and took about \"\"$(show_runtime)\"\" \\\\n\" \"no_log\"\n    fi\n    write_grep_log \"$(print_date)\" \"TIMESTAMP\"\n    write_grep_log \"$(date -d@\"${SECONDS}\" -u +%d:%H:%M:%S)\" \"DURATION\"\n  else\n    print_output \"[!] $(print_date) - No extracted firmware found\" \"no_log\"\n    print_output \"$(indent \"Try using binwalk or something else to extract the firmware\")\"\n    exit 1\n  fi\n\n  [[ \"${HTML}\" -eq 1 ]] && update_index\n\n  if [[ -f \"${HTML_PATH}\"/index.html ]] && [[ \"${IN_DOCKER}\" -eq 0 ]]; then\n    print_output \"[*] $(print_date) - Web report created HTML report in ${ORANGE}${LOG_DIR}/html-report${NC}\\\\n\" \"main\"\n    print_output \"[*] $(print_date) - Open the web-report with${ORANGE} firefox $(abs_path \"${HTML_PATH}/index.html\")${NC}\\\\n\" \"main\"\n  fi\n\n  # deactivate the python virtual env\n  [[ -v VIRTUAL_ENV ]] && deactivate\n\n  # we need to change the permissions of the LOG_DIR to the orig. user from the host\n  [[ \"${IN_DOCKER}\" -eq 1 ]] && restore_permissions\n  cleaner 0\n  exit 0\n}\n\nmain \"$@\"\n"
        },
        {
          "name": "helpers",
          "type": "tree",
          "content": null
        },
        {
          "name": "installer.sh",
          "type": "blob",
          "size": 14.888671875,
          "content": "#!/bin/bash -p\n\n# EMBA - EMBEDDED LINUX ANALYZER\n#\n# Copyright 2020-2023 Siemens AG\n# Copyright 2020-2024 Siemens Energy AG\n#\n# EMBA comes with ABSOLUTELY NO WARRANTY. This is free software, and you are\n# welcome to redistribute it under the terms of the GNU General Public License.\n# See LICENSE file for usage of this software.\n#\n# EMBA is licensed under GPLv3\n# SPDX-License-Identifier: GPL-3.0-only\n#\n# Author(s): Michael Messner, Pascal Eckmann\n# Contributor(s): Stefan Haboeck, Nikolas Papaioannou\n\n# Description:  Installs needed stuff for EMBA\n\n# it the installer fails you can try to change it to 0\nSTRICT_MODE=1\n\nORIG_USER=\"${SUDO_USER:-${USER}}\"\nORIG_GROUP=$(groups \"${ORIG_USER}\" | cut -d: -f2 | awk '{print $1}')\n\nexport DEBIAN_FRONTEND=noninteractive\nexport INSTALL_APP_LIST=()\nexport DOWNLOAD_FILE_LIST=()\nexport INSTALLER_DIR=\"./installer\"\n\nif [[ \"${STRICT_MODE}\" -eq 1 ]]; then\n  export DEBUG_SCRIPT=0\n  if [[ -f \"./helpers/helpers_emba_load_strict_settings.sh\" ]]; then\n    # shellcheck source=/dev/null\n    source ./helpers/helpers_emba_load_strict_settings.sh\n  elif [[ -f \"/installer/helpers_emba_load_strict_settings.sh\" ]]; then\n    # in docker this is in /emba/...\n    # shellcheck source=/dev/null\n    source /installer/helpers_emba_load_strict_settings.sh\n  else\n    echo \"Warning - strict mode module not found\"\n  fi\n  load_strict_mode_settings\n  trap 'wickStrictModeFail $? | tee -a /tmp/emba_installer.log' ERR  # The ERR trap is triggered when a script catches an error\nfi\n\n# install docker EMBA\nexport IN_DOCKER=0\n# list dependencies\nexport LIST_DEP=0\nexport FULL=0\nexport REMOVE=0\n# other os stuff\nexport OTHER_OS=0\nexport UBUNTU_OS=0\nexport WSL=0\nexport GH_ACTION=0\nexport SSL_REPOS=0\n\n## Color definition\nexport RED=\"\\033[0;31m\"\nexport GREEN=\"\\033[0;32m\"\nexport ORANGE=\"\\033[0;33m\"\nexport MAGENTA=\"\\033[0;35m\"\nexport CYAN=\"\\033[0;36m\"\nexport BLUE=\"\\033[0;34m\"\nexport NC=\"\\033[0m\"  # no color\n\n## Attribute definition\nexport BOLD=\"\\033[1m\"\n\necho -e \"\\\\n\"\"${ORANGE}\"\"${BOLD}\"\"EMBA - Embedded Linux Analyzer Installer\"\"${NC}\"\necho -e \"${BOLD}\"\"=================================================================\"\"${NC}\"\n\n# import all the installation modules\nmapfile -t INSTALLERS < <(find \"${INSTALLER_DIR}\" -iname \"*.sh\" 2> /dev/null)\nINSTALLER_COUNT=0\nfor INSTALLER_FILE in \"${INSTALLERS[@]}\" ; do\n  # https://github.com/koalaman/shellcheck/wiki/SC1090\n  # shellcheck source=/dev/null\n  source \"${INSTALLER_FILE}\"\n  (( INSTALLER_COUNT+=1 ))\ndone\n\necho \"\"\necho -e \"==> \"\"${GREEN}\"\"Imported \"\"${INSTALLER_COUNT}\"\" installer module files\"\"${NC}\"\necho \"\"\n\nif [[ \"$#\" -lt 1 ]] || [[ \"$#\" -gt 2 ]]; then\n  echo -e \"${RED}\"\"${BOLD}\"\"Invalid number of arguments\"\"${NC}\"\n  echo -e \"\\n\\n------------------------------------------------------------------\"\n  echo -e \"If you are going to install EMBA in default mode you can use:\"\n  echo -e \"${CYAN}\"\"     sudo ./installer.sh -d\"\"${NC}\"\n  echo -e \"------------------------------------------------------------------\\n\\n\"\n  print_help\n  exit 1\nfi\n\nwhile getopts CdDFghlrsc: OPT ; do\n  case ${OPT} in\n    d)\n      export DOCKER_SETUP=1\n      export CVE_SEARCH=0\n      echo -e \"${GREEN}\"\"${BOLD}\"\"Install all dependecies for EMBA in default/docker mode\"\"${NC}\"\n      ;;\n    D)\n      export IN_DOCKER=1\n      export DOCKER_SETUP=0\n      export CVE_SEARCH=0\n      echo -e \"${GREEN}\"\"${BOLD}\"\"Install EMBA in docker image - used for building a docker image\"\"${NC}\"\n      ;;\n    F)\n      export FULL=1\n      export DOCKER_SETUP=0\n      export CVE_SEARCH=1\n      echo -e \"${GREEN}\"\"${BOLD}\"\"Install all dependecies for developer mode\"\"${NC}\"\n      ;;\n    g)\n      export DOCKER_SETUP=1\n      export GH_ACTION=1\n      export CVE_SEARCH=0\n      echo -e \"${GREEN}\"\"${BOLD}\"\"Install all dependecies for EMBA test via Github actions\"\"${NC}\"\n      echo -e \"${GREEN}\"\"${BOLD}\"\"This mode is a default installation without populating the CVE-search database\"\"${NC}\"\n      ;;\n    h)\n      print_help\n      exit 0\n      ;;\n    l)\n      export LIST_DEP=1\n      export CVE_SEARCH=0\n      export DOCKER_SETUP=0\n      echo -e \"${GREEN}\"\"${BOLD}\"\"List all dependecies (Warning: deprecated feature)\"\"${NC}\"\n      ;;\n    r)\n      export REMOVE=1\n      echo -e \"${GREEN}\"\"${BOLD}\"\"Remove EMBA from the system\"\"${NC}\"\n      ;;\n    s)\n      export SSL_REPOS=1\n      echo -e \"${GREEN}\"\"${BOLD}\"\"HTTPS repos are used for installation\"\"${NC}\"\n      ;;\n    c)\n      export CONTAINER=\"${OPTARG}\"\n      ;;\n    *)\n      echo -e \"${RED}\"\"${BOLD}\"\"Invalid option\"\"${NC}\"\n      print_help\n      exit 1\n      ;;\n  esac\ndone\n\nif ! [[ -v CONTAINER ]]; then\n  if [[ -f docker-compose.yml ]]; then\n    CONTAINER=\"$(grep image docker-compose.yml | awk '{print $2}' | sort -u)\"\n  else\n    CONTAINER=\"embeddedanalyzer/emba\"\n  fi\nfi\n\nif [[ \"${LIST_DEP}\" -eq 1 ]]; then\n  echo -e \"\\n${ORANGE}WARNING: This feature is deprecated and not maintained anymore.${NC}\"\n  read -p \"If you know what you are doing you can press any key to continue ...\" -n1 -s -r\nfi\n\n# WSL support - currently experimental!\nif grep -q -i wsl /proc/version; then\n  echo -e \"\\n${ORANGE}INFO: System running in WSL environment!${NC}\"\n  echo -e \"\\n${ORANGE}INFO: WSL is currently experimental!${NC}\"\n  echo -e \"\\n${ORANGE}Please check the documentation https://github.com/e-m-b-a/emba/wiki/Installation#prerequisites${NC}\"\n  echo -e \"\\n${ORANGE}WARNING: If you are using WSL2, disable docker integration from the docker-desktop daemon!${NC}\"\n  read -p \"If you know what you are doing you can press any key to continue ...\" -n1 -s -r\n  WSL=1\nfi\n\n# distribution check\nif ! grep -Eq \"ID(_LIKE)?=(\\\")?(ubuntu)?( )?(debian)?\" /etc/os-release 2>/dev/null ; then\n  echo -e \"\\\\n\"\"${RED}\"\"EMBA only supports debian based distributions!\"\"${NC}\\\\n\"\n  print_help\n  exit 1\nelif ! grep -q \"kali\" /etc/debian_version 2>/dev/null ; then\n  if grep -q \"VERSION_ID=\\\"22.04\\\"\\|VERSION_ID=\\\"24.04\\\"\" /etc/os-release 2>/dev/null ; then\n    # How to handle sub-versioning ? if grep -q -E \"PRETTY_NAME=\\\"Ubuntu\\ 22\\.04(\\.[0-9]+)?\\ LTS\\\"\" /etc/os-release 2>/dev/null ; then\n    OTHER_OS=1\n    UBUNTU_OS=1\n  elif grep -q \"PRETTY_NAME=\\\"Ubuntu 20.04 LTS\\\"\" /etc/os-release 2>/dev/null ; then\n    echo -e \"\\\\n\"\"${RED}\"\"EMBA is not fully supported on Ubuntu 20.04 LTS.\"\"${NC}\"\n    echo -e \"${RED}\"\"For EMBA installation you need to update docker-compose manually. See also https://github.com/e-m-b-a/emba/issues/247\"\"${NC}\"\n    echo -e \"\\\\n\"\"${ORANGE}\"\"Please check the documentation https://github.com/e-m-b-a/emba/wiki/Installation#prerequisites\"\"${NC}\"\n    read -p \"If you have updated docker-compose you can press any key to continue ...\" -n1 -s -r\n    OTHER_OS=0  # installation procedure identical to kali install\n    UBUNTU_OS=0 # installation procedure identical to kali install\n  else\n    echo -e \"\\n${ORANGE}WARNING: compatibility of distribution/version unknown!${NC}\"\n    OTHER_OS=1\n    read -p \"If you know what you are doing you can press any key to continue ...\" -n1 -s -r\n  fi\nelse\n  OTHER_OS=0\n  UBUNTU_OS=0\nfi\n\nif ! uname -m | grep -q \"x86_64\" 2>/dev/null; then\n  echo -e \"\\n${ORANGE}WARNING: Architecture probably unsupported!${NC}\"\n  read -p \"If you know what you are doing you can press any key to continue ...\" -n1 -s -r\nfi\n\nif ! grep -q \"ssse3\" /proc/cpuinfo 2>/dev/null; then\n  echo -e \"\\n${ORANGE}WARNING: CPU type and feature set probably unsupported - Missing SSSE3 support detected!${NC}\"\n  read -p \"If you know what you are doing you can press any key to continue ...\" -n1 -s -r\nfi\n\nif ! [[ ${EUID} -eq 0 ]] && [[ ${LIST_DEP} -eq 0 ]] ; then\n  echo -e \"\\\\n\"\"${RED}\"\"Run EMBA installation script with root permissions!\"\"${NC}\\\\n\"\n  print_help\n  exit 1\nfi\n\n# standard stuff before installation run\n\nHOME_PATH=$(pwd)\n\nif [[ \"${REMOVE}\" -eq 1 ]]; then\n  R00_emba_remove\n  exit 0\nfi\n\n# quick check if we have enough disk space for the docker image\n\nif [[ \"${IN_DOCKER}\" -eq 0 ]]; then\n  if [[ -d \"/var/lib/docker/\" ]]; then\n    # docker is already installed\n    DDISK=\"/var/lib/docker\"\n  else\n    # default\n    DDISK=\"/var/lib/\"\n  fi\n\n  FREE_SPACE=$(df --output=avail \"${DDISK}\" | awk 'NR==2')\n  if [[ \"${FREE_SPACE}\" -lt 19000000 ]]; then\n    echo -e \"\\\\n\"\"${ORANGE}\"\"EMBA installation in default mode needs a minimum of 18Gig for the docker image\"\"${NC}\"\n    echo -e \"\\\\n\"\"${ORANGE}\"\"Please free enough space on /var/lib/docker\"\"${NC}\"\n    echo -e \"\\\\n\"\"${ORANGE}\"\"Please check the documentation https://github.com/e-m-b-a/emba/wiki/Installation#prerequisites\"\"${NC}\"\n    echo \"\"\n    df -h || true\n    echo \"\"\n    read -p \"If you know what you are doing you can press any key to continue ...\" -n1 -s -r\n  fi\n\n  TOTAL_MEMORY=\"$(grep MemTotal /proc/meminfo | awk '{print $2}' || true)\"\n  if [[ \"${TOTAL_MEMORY}\" -lt 4000000 ]]; then\n    echo -e \"\\\\n\"\"${ORANGE}\"\"EMBA installation in default mode needs a minimum of 4Gig of RAM\"\"${NC}\"\n    echo -e \"\\\\n\"\"${ORANGE}\"\"Please check the documentation https://github.com/e-m-b-a/emba/wiki/Installation#prerequisites\"\"${NC}\"\n    echo \"\"\n    read -p \"If you know what you are doing you can press any key to continue ...\" -n1 -s -r\n  fi\nfi\n\nif [[ ${LIST_DEP} -eq 0 ]] ; then\n  if ! [[ -d \"external\" ]] ; then\n    echo -e \"\\\\n\"\"${ORANGE}\"\"Created external directory: ./external\"\"${NC}\"\n    mkdir external\n    # currently this is needed for full install on Ubuntu\n    # the freetz installation is running as freetzuser and needs write access:\n    chown \"${ORIG_USER}\":\"${ORIG_GROUP}\" ./external\n    chmod 777 ./external\n  else\n    echo -e \"\\\\n\"\"${ORANGE}\"\"WARNING: external directory available: ./external\"\"${NC}\"\n    echo -e \"${ORANGE}\"\"Please remove it before proceeding ...\"\"${NC}\"\n    echo \"\"\n    read -p \"If you know what you are doing you can press any key to continue ...\" -n1 -s -r\n  fi\n\n  echo -e \"\\\\n\"\"${ORANGE}\"\"Update package lists.\"\"${NC}\"\n  if [[ \"${SSL_REPOS}\" -eq 1 ]]; then\n    sed -i 's/deb http:\\/\\//deb https:\\/\\//g' /etc/apt/sources.list\n    sed -i 's/deb-src http:\\/\\//deb-src https:\\/\\//g' /etc/apt/sources.list\n  fi\n  apt-get -y update\nfi\n\n# setup the python virtual environment in external directory\n# external is also setup in the docker image\napt-get -y install python3-venv\ncreate_pipenv \"./external/emba_venv\"\nactivate_pipenv \"./external/emba_venv\"\n\nif ! command -v docker > /dev/null || ! command -v docker compose > /dev/null ; then\n  # OS debian is for Kali Linux\n  OS=\"debian\"\n  [[ \"${UBUNTU_OS}\" -eq 1 ]] && OS=\"ubuntu\"\n  # Add Docker's official GPG key:\n  apt-get install -y ca-certificates curl gnupg\n  install -m 0755 -d /etc/apt/keyrings\n  curl -fsSL https://download.docker.com/linux/\"${OS}\"/gpg -o /etc/apt/keyrings/docker.asc\n  chmod a+r /etc/apt/keyrings/docker.asc\n  # Add the repository to Apt sources:\n  if [[ \"${UBUNTU_OS}\" -eq 1 ]]; then\n    # shellcheck source=/dev/null\n    echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/${OS} \\\n    $(. /etc/os-release && echo \"${VERSION_CODENAME}\") stable\" | tee /etc/apt/sources.list.d/docker.list > /dev/null\n  else\n    # probably a kali linux\n    echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/${OS} \\\n    bookworm stable\" | tee /etc/apt/sources.list.d/docker.list > /dev/null\n  fi\n  apt-get update -y\n  apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n  export DOCKER_COMPOSE=(\"docker\" \"compose\")\nelif command -v docker-compose > /dev/null ; then\n  echo -e \"\\n${ORANGE}\"\"${BOLD}\"\"WARNING: Old docker-compose installation found\"\"${NC}\"\n  echo -e \"${ORANGE}\"\"${BOLD}\"\"It is recommend to remove the current installation and restart the EMBA installation afterwards!\"\"${NC}\"\n  read -p \"If you know what you are doing you can press any key to continue ...\" -n1 -s -r\n  export DOCKER_COMPOSE=(\"docker-compose\")\n  # if we do not have the docker command it probably is a more modern system and we need to install the docker-cli package\n  if ! command -v docker > /dev/null; then\n    echo -e \"\\n${ORANGE}WARNING: No docker command available -> we check for docker-cli package${NC}\"\n    if [[ \"$(apt-cache search docker-cli | wc -l)\" -gt 0 ]]; then\n      echo -e \"\\n${ORANGE}Info: No docker command available -> we install the docker-cli package now${NC}\"\n      apt-get install docker-cli -y\n    fi\n  fi\nfi\n\n# docker moved around v7 to a new API (API v2)\n# we need to check if our installed docker version has support for the compose sub-command:\nif command -v docker > /dev/null; then\n  if docker --help | grep -q compose; then\n    # new docker API version v2 -> docker v7\n    export DOCKER_COMPOSE=(\"docker\" \"compose\")\n  elif command -v docker-compose > /dev/null; then\n    # we only need to check the docker-compose version if we are running on the old API with docker-compose\n    DOCKER_COMP_VER=$(\"${DOCKER_COMPOSE[@]}\" -v | grep version | tr '-' ' ' | awk '{print $4}' | tr -d ',' | sed 's/^v//')\n    if [[ $(version \"${DOCKER_COMP_VER}\") -lt $(version \"1.28.5\") ]]; then\n      echo -e \"\\n${ORANGE}WARNING: compatibility of the used docker-compose version is unknown!${NC}\"\n      echo -e \"\\n${ORANGE}Please consider updating your docker-compose installation to version 1.28.5 or later.${NC}\"\n      echo -e \"\\n${ORANGE}Please check the EMBA wiki for further details: https://github.com/e-m-b-a/emba/wiki/Installation#prerequisites${NC}\"\n      read -p \"If you know what you are doing you can press any key to continue ...\" -n1 -s -r\n    fi\n  fi\nfi\n\n# initial installation of the host environment:\nI01_default_apps_host\n\nif [[ \"${OTHER_OS}\" -eq 1 ]]; then\n  # UBUNTU\n  if [[ \"${UBUNTU_OS}\" -eq 1 ]]; then\n    ID1_ubuntu_os\n  fi\nfi\n\nINSTALL_APP_LIST=()\n\nif [[ \"${WSL}\" -eq 1 ]]; then\n  echo \"[*] Starting dockerd manually in wsl environments:\"\n  dockerd --iptables=false &\n  sleep 3\n  reset\nfi\n\nif [[ \"${CVE_SEARCH}\" -ne 1 ]] || [[ \"${DOCKER_SETUP}\" -ne 1 ]] || [[ \"${IN_DOCKER}\" -eq 1 ]]; then\n\n  I01_default_apps\n\n  I13_disasm\n\n  I05_emba_docker_image_dl\n\n  IP00_extractors\n\n  IP35_uefi_extraction\n\n  IP61_unblob\n\n  IP99_binwalk_default\n\n  I02_UEFI_fwhunt\n\n  I17_apk_check\n\n  I20_sourcecode_check\n\n  I24_25_kernel_tools\n\n  I108_stacs_password_search\n\n  I110_yara_check\n\n  I199_default_tools_github\n\n  I120_cwe_checker\n\n  IL10_system_emulator\n\n  IL15_emulated_checks_init\n\n  IF50_aggregator_common\nfi\n\nif [[ \"${IN_DOCKER}\" -ne 1 ]]; then\n  # NVD CVE data feed is always installed on the host:\n  IF20_nvd_feed\nfi\n\ndeactivate\n\ncd \"${HOME_PATH}\" || exit 1\n\n# we reset the permissions of external from 777 back to 755:\nchmod 755 ./external\n\nif [[ \"${LIST_DEP}\" -eq 0 ]] || [[ ${IN_DOCKER} -eq 0 ]] || [[ ${DOCKER_SETUP} -eq 1 ]] || [[ ${FULL} -eq 1 ]]; then\n  echo -e \"\\\\n\"\"${MAGENTA}\"\"${BOLD}\"\"Installation notes:\"\"${NC}\"\n  echo -e \"\\\\n\"\"${MAGENTA}\"\"WARNING: If you plan using the emulator (-E switch) your host and your internal network needs to be protected.\"\"${NC}\"\n  echo -e \"\\\\n\"\"${MAGENTA}\"\"INFO: Do not forget to checkout current development of EMBA at https://github.com/e-m-b-a.\"\"${NC}\"\nfi\nif [[ \"${WSL}\" -eq 1 ]]; then\n  echo -e \"\\\\n\"\"${MAGENTA}\"\"INFO: In the current WSL installation the docker and mongod services started manually!\"\"${NC}\"\nfi\n\nif [[ \"${LIST_DEP}\" -eq 0 ]]; then\n  echo -e \"${GREEN}\"\"EMBA installation finished \"\"${NC}\"\nfi\n"
        },
        {
          "name": "installer",
          "type": "tree",
          "content": null
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "scan-profiles",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}