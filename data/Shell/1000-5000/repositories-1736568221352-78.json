{
  "metadata": {
    "timestamp": 1736568221352,
    "page": 78,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "luchina-gabriel/OSX-PROXMOX",
      "stars": 3818,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0703125,
          "content": ".DS_Store\n.DS_Store?\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\nlogs"
        },
        {
          "name": "Artefacts",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.46484375,
          "content": "OpenCore Changelog\n==================\n\n#### Latest versions\n- Check history of commits\n\n#### v3.2.0\n\n- Open SOURCE CODE of BINARY \\o/\n- Alter function '201 - Update Opencore ISO file' to download .ISO directly from repository;\n- Add script in tools - CHECK-IOMMU.sh - Check if your IOMMU are ENABLED;\n- Update macrecovery tool for Opencore 0.7.7;\n- Update README;\n- Adjustments to copyright terms.\n\n#### v3.1.0\n\n- Add support to run macOS in Cloud using this solution with VultR Provider;\n- Add option to 'Remove Proxmox Subscription Notice';\n\n#### v3.0.0\n\n- Upgrade Opencore to 0.7.7;\n- Upgrade Lilu and WhateverGreen Kexts;\n- Add function '201 - Update Opencore ISO file';\n- Add function '202 - Clear all Recovery Images';\n- Add option to choose Storage in create VM;\n- Fix minor bugs.\n\n#### v2.0.1\n\n- Fixed Opencore ISO disk size which was making booting impossible to install new virtual machines;\n\n#### v2.0.0\n\n- Upgrade to Opencore 0.7.6 (December/2021);\n- Update Lilu (kext);\n- Update VirtualSMC (kext);\n- Fully compatible with Intel 12th and activate of all cores (P+E) and HT (Hyper-Threading);\n\n#### v1.5.1\n\n- Fix Menu Option - # 200;\n- Cleaning some codes unnecessary in setup;\n\n#### v1.5.0\n\n- Fix QEMU 6.1 Passthrough in PVE 7.1+;\n- Add option to \"only ENTER\" for exit osx-setup;\n\n#### v1.4.0\n\n- Add option to skip download and create recovery image of macOS;\n\n#### v1.3.0\n\n- Add script ```IOMMU-Groups.sh``` in tools;\n- Add option 'Fix issues to start macOS (stuck at Apple logo) for Proxmox VE v7.1.XX';\n- Add option 'Add Proxmox VE NO Subscription repository - for beta/non production upgrades';\n- Remove option 'Activate support for Windows 11 natively'.\n\n#### v1.2.0\n\n- Remove PVE/Kernel version from ```osx-setup``` menu;\n- Add option to define disk size in creation virtual machine section of ```osx-setup```;\n- Add script in tools, for create macOS Install ```ISO``` from genuine macOS Installer .app.\n\n#### v1.1.1\n\n- Fix logic of messages in 'Activate support for Windows 11 natively' option;\n- Fix typo's;\n\n#### v1.1.0\n\n- Including support for Proxmox VE v7 family;\n- Fix for remove tmp directory;\n- Including git for apt install option in install;\n- Optimize procedure in 'Download & Create Recovery Image';\n- Add return code for apt update/install in prereqs section and condition to exit/abort;\n- Add support to install Windows 11 with TPM and Secure Boot;\n- Update EFI ISO for including support to install Nvidia Web Drivers for High Sierra;\n\n#### v1.0.0\n\n- Initial version of OSX-Proxmox Solution\n"
        },
        {
          "name": "EFI",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.1962890625,
          "content": "# OSX-PROXMOX - Run macOS on ANY Computer - AMD & Intel\n\nInstall `** FRESH/CLEAN **` Proxmox VE v7.0.XX ~ 8.2.XX - Next, Next & Finish (NNF).\n\nOpen Proxmox Web Console -> Datacenter > NAME OF YOUR HOST > Shell.\n\nCopy, paste and execute (code below).\n\nVoilà, install macOS! This is really and magic **easiest way**!\n![overview](./Artefacts/proxmox-screen.png)\n## COPY & PASTE - in shell of Proxmox (for Install or Update this solution)\n\n```\n/bin/bash -c \"$(curl -fsSL https://install.osx-proxmox.com)\"\n```\n\n## For install EFI Package in macOS, first disable Gatekeeper\n\n```\nsudo spctl --master-disable\n```\n\n## Versions of macOS Supported\n* macOS High Sierra - 10.13\n* macOS Mojave - 10.14\n* macOS Catalina - 10.15\n* macOS Big Sur - 11\n* macOS Monterey - 12\n* macOS Ventura - 13\n* macOS Sonoma - 14\n* macOS Sequoia - 15\n\n## Versions of Proxmox VE Supported\n* v7.0.XX ~ 8.2.XX\n\n## Opencore version\n* Oct/2024 - 1.0.2 Added support to macOS Sequoia\n\n## Cloud Support (Yes, install your Hackintosh in Cloud Environment)\n- [VultR](https://www.vultr.com/?ref=9035565-8H)\n- [Vídeo/Tutorial](https://youtu.be/8QsMyL-PNrM), please activate captions!\n\n## Disclaimer\n\n- FOR DEV/STUDENT/TEST ONLY PURPOSES.\n- I'm not responsible for any problem and/or equipment damage or loss of files. \n- Always back up everything before any changes to your computer.\n\n## Requirements\n\nSince Monterey, your host must have a working TSC (timestamp counter), because otherwise if you give the VM more than one core, macOS will observe the skew between cores and **kernel/memory panic** when it sees time ticking backwards. To check this, on Proxmox run:\n\n```\ndmesg | grep -i -e tsc -e clocksource\n...\n# for working host must be:\n...\nclocksource: Switched to clocksource tsc\n...\n\n# for broken host could be:\ntsc: Marking TSC unstable due to check_tsc_sync_source failed\nclocksource: Switched to clocksource hpet\n```\nBelow is a possible workaround from here: https://www.nicksherlock.com/2022/10/installing-macos-13-ventura-on-proxmox/comment-page-1/#comment-55532\n\n1. Try to turn off “ErP mode” or any C state power saving modes your BIOS supports and poweroff/poweron device (including physical cable). It could help host OS to init TSC correctly, but no guarantee.\n2. Or try to activate TSC force in GRUB by adding boot flags `clocksource=tsc tsc=reliable` in the `GRUB_CMDLINE_LINUX_DEFAULT` and call `update-grub`. In this case host OS probably could work unstable in some cases.\n3. Check the current TSC by call `cat /sys/devices/system/clocksource/clocksource0/current_clocksource` must be `tsc`.\n\n## Troubleshooting\n\n### High Siearra and below installation issues\n\nTo solve error *The Recovery Server Could Not Be Contacted* you need to change the protocol from `https://` to `http://`. To do this, follow:\n- start installation and get error *The Recovery Server Could Not Be Contacted*, hold the window with error opened\n- open Window -> Installer Log\n- search for the line \"Failed to load catalog\" -> select line in log windows -> Edit -Copy\n- close the error message and return to `macOS Utilities` window\n- open Utilities -> Terminal, right click -> paste\n- edit the pasted data, remove everything except URL, like `https://blablabla.sucatalog`\n- change https -> http\n- adjust the command to be like: nvram IASUCatalogURL=\"<your HTTP URL here>\"\n- press enter, quit Terminal and try to start installation again\n\nAfter this, no additional ISO needed, HighSierra must be installed well from recovey.\n\nHere a sample how need to change the error message to the final URL:\n\n`nIUvram IASUCatalogURL=\"http://swscan.apple.com/content/catalogs/others/index-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog\"`\n\nThe solution took from here: https://mrmacintosh.com/how-to-fix-the-recovery-server-could-not-be-contacted-error-high-sierra-recovery-is-still-online-but-broken/\n\n\n## Demonstration (in Portuguese/Brazil)\n\nhttps://youtu.be/dil6iRWiun0\n\n\\* Please use CC with Auto Translate to English for your convenience.\n\n## Credits\n\n- Opencore/Acidanthera Team\n- Corpnewt for Applications (ProperTree, genSMBIOS, etc)\n- Apple for macOS\n- Proxmox - Excelent and better documentation for Virtualization\n\n## Discord - Universo Hackintosh\n- [Discord](https://discord.universohackintosh.com.br)\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 1.6220703125,
          "content": "#!/bin/bash\n\n#########################################################################################################################\n#\n# Script: install\n#\n# https://luchina.com.br\n#\n#########################################################################################################################\n\nclear\n\nif [ -e /root/OSX-PROXMOX ]; then rm -rf /root/OSX-PROXMOX; fi;\nif [ -e /etc/apt/sources.list.d/pve-enterprise.list ]; then rm -rf /etc/apt/sources.list.d/pve-enterprise.list; fi;\nif [ -e /etc/apt/sources.list.d/ceph.list ]; then rm -rf /etc/apt/sources.list.d/ceph.list; fi;\n# Is this better?\necho \"Waiting to install OSX-PROXMOX...\"\necho \" \"\n\napt update > /tmp/install-osx-proxmox.log 2>> /tmp/install-osx-proxmox.log\n\nif [ $? -ne 0 ]\nthen \n\techo \" \"\n\techo \"Error with 'apt-get update' ...\"\n\techo \"Trying to change /etc/apt/sources.list\"\n\techo \" \"\n\t# Always using a Brazilian server will not be fast...\n \t# I suggest using the users home country, As it will always be faster.\n \tCountry=$(curl -s https://ipinfo.io/country | tr '[:upper:]' '[:lower:]')\n\tsed -i \"s/ftp.$Country.debian.org/ftp.debian.org/g\" /etc/apt/sources.list\n\t\t\n\techo \"Retrying 'apt-get update' ...\"\n\techo \" \"\n\n\tapt-get update >> /tmp/install-osx-proxmox.log 2>> /tmp/install-osx-proxmox.log\n\t\n\tif [ $? -ne 0 ]; then echo \"Error with 'apt-get update' ...\"; exit; fi\t\t\nfi\n\napt install git -y >> /tmp/install-osx-proxmox.log 2>> /tmp/install-osx-proxmox.log\n\ngit clone https://github.com/luchina-gabriel/OSX-PROXMOX.git >> /tmp/install-osx-proxmox.log 2>> /tmp/install-osx-proxmox.log\n\nif [ ! -e /root/OSX-PROXMOX ]; then mkdir -p /root/OSX-PROXMOX; fi;\n\n/root/OSX-PROXMOX/setup\n"
        },
        {
          "name": "setup",
          "type": "blob",
          "size": 74.201171875,
          "content": "#!/bin/bash\n#\n# Script: setup\n#\n# Author: Gabriel Luchina\n# https://luchina.com.br\n#\n# COPYRIGHT - 2021, 2022\n# \n# All rights reserved - You may not copy, reproduce, distribute, publish, display, perform, modify, \n# create derivative works, transmit, or in any way exploit any such content, nor may you distribute \n# any part of this content over any network, including a local area network, sell or offer it for \n# sale, or use such content to construct any kind of database. \n# \n# You may not alter or remove any copyright or other notice from copies of the content on any scripts \n# in the solution of 'OSX-PROXMOX Solution - GABRIEL LUCHINA'. \n#\n# Copying or storing any content except as provided above is expressly prohibited without prior \n# written permission of copyright holder identified in the individual content’s copyright notice. \n# \n# For permission to use the content 'OSX-PROXMOX Solution - GABRIEL LUCHINA', \n# please contact legal@luchina.com.br\n# \n# FOR DEV/STUDENT ONLY PURPOSES - NOT COMERCIAL\n#\n# Credits:\n# https://github.com/acidanthera/OpenCorePkg\n# https://github.com/corpnewt/MountEFI\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\nclear\n\nif [ `pveversion | grep \"pve-manager/[7,8]\" | wc -l` -ne 1 ]\nthen\n\techo \"This version of Proxmox Virtual Environment is not supported\"\n\techo \"Please use version: 7.XX or 8.2\"\n\texit\nfi\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\nSCRIPT_DIR=/root/OSX-PROXMOX\nLOGDIR=${SCRIPT_DIR}/logs\nTMPDIR=${SCRIPT_DIR}/tmp\nISODIR=/var/lib/vz/template/iso/\nHACKPXVERSION=\"20241025T1034\"\nOCVERSION=\"1.0.2\"\nDEFAULT_VM_PREFIX=\"HACK-\"\nDEFAULT_RAM_SIZE=4096\n\nif [ `lscpu | grep \"Vendor ID\" | grep -i amd | wc -l` -eq 1 ]; then OSX_PLATFORM=\"AMD\"; else OSX_PLATFORM=\"INTEL\"; fi\n\nif [ ! -e ${TMPDIR} ]; then mkdir ${TMPDIR}; fi;\nif [ ! -e ${LOGDIR} ]; then mkdir ${LOGDIR}; fi;\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\nif [ ! -e /etc/pve/qemu-server/.osx-proxmox ]\nthen\n\t\n\tmkdir -p ${LOGDIR}\n\n\tLOGFILE=${LOGDIR}/prerequisites-setup.log\n\t\n\techo \" \"\n\techo \"OSX-PROXMOX (Version ${HACKPXVERSION}) - GABRIEL LUCHINA - https://osx-proxmox.com\"\n\techo \" \"\n\techo \"Prerequisites have not yet been installed and configured on this HOST.\"\n\techo \" \"\n\techo \"Running the prerequisites and at the end your HOST will be rebooted ...\"\n\techo \" \"\n\techo \" \"\n\n\tcp ${SCRIPT_DIR}/EFI/*.iso /var/lib/vz/template/iso\n\n\techo \"alias osx-setup='${SCRIPT_DIR}/setup'\" >> /root/.bashrc\n\n\techo -e \"LANG=en_US.UTF-8\\nLC_ALL=en_US.UTF-8\" > /etc/environment\n\techo \"set mouse-=a\" > ~/.vimrc\n\n\tif [ -e /etc/apt/sources.list.d/pve-enterprise.list ]; then rm -rf /etc/apt/sources.list.d/pve-enterprise.list; fi;\n\n\tapt-get update > ${LOGFILE} 2>> ${LOGFILE}\n\n\tif [ $? -ne 0 ]\n\tthen \n\t\techo \"Error with 'apt-get update' ...\"\n\t\techo \"Trying to change /etc/apt/sources.list\"\n \t\tCountry=$(curl -s https://ipinfo.io/country | tr '[:upper:]' '[:lower:]')\n\t\tsed -i \"s/ftp.$Country.debian.org/ftp.debian.org/g\" /etc/apt/sources.list\n\t\techo \"Retrying 'apt-get update'\"\n\t\tapt-get update >> ${LOGFILE} 2>> ${LOGFILE}\n\t\tif [ $? -ne 0 ]; then echo \"Error with `apt-get update ...`\"; exit; fi\n\tfi\n\n\tapt install vim unzip zip sysstat parted wget iptraf git htop -y >> ${LOGFILE} 2>> ${LOGFILE}\n\tif [ $? -ne 0 ]; then echo \"Error with `apt-get install ...`\"; exit; fi\n\n\tsed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=0/g' /etc/default/grub\n\n\tif [ ${OSX_PLATFORM} == \"AMD\" ]\n\tthen\n\t\tif [ `pveversion | grep -i '7.2\\|7.3\\|7.4\\|8.0\\|8.1\\|8.2' | wc -l` -eq 1 ]\n\t\tthen\n\t\t\tsed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"/GRUB_CMDLINE_LINUX_DEFAULT=\"quiet amd_iommu=on iommu=pt video=vesafb:off video=efifb:off initcall_blacklist=sysfb_init\"/g' /etc/default/grub\n\t\telse\n\t\t\tsed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"/GRUB_CMDLINE_LINUX_DEFAULT=\"quiet amd_iommu=on iommu=pt video=vesafb:off video=efifb:off\"/g' /etc/default/grub\n\t\tfi\n\t\techo \"options kvm-amd nested=1\" > /etc/modprobe.d/kvm-amd.conf\n\tfi\n\n\tif [ ${OSX_PLATFORM} == \"INTEL\" ]\n\tthen\n\t\tif [ `pveversion | grep -i '7.2\\|7.3\\|7.4\\|8.0\\|8.1\\|8.2' | wc -l` -eq 1 ]\n\t\tthen\n\t\t\tsed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"/GRUB_CMDLINE_LINUX_DEFAULT=\"quiet intel_iommu=on iommu=pt video=vesafb:off video=efifb:off initcall_blacklist=sysfb_init\"/g' /etc/default/grub\n\t\telse\n\t\t\tsed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\"/GRUB_CMDLINE_LINUX_DEFAULT=\"quiet intel_iommu=on iommu=pt video=vesafb:off video=efifb:off\"/g' /etc/default/grub\n\t\tfi\n\t\techo \"options kvm-intel nested=Y\" > /etc/modprobe.d/kvm-intel.conf\n\tfi\n\n\techo -e \"vfio\\nvfio_iommu_type1\\nvfio_pci\\nvfio_virqfd\\n\" >> /etc/modules\n\techo -e \"blacklist nouveau\\nblacklist nvidia\\nblacklist snd_hda_codec_hdmi\\nblacklist snd_hda_intel\\nblacklist snd_hda_codec\\nblacklist snd_hda_core\\nblacklist radeon\\nblacklist amdgpu\\n\" >> /etc/modprobe.d/pve-blacklist.conf\n\n\techo \"options kvm ignore_msrs=Y report_ignored_msrs=0\" > /etc/modprobe.d/kvm.conf\n\techo \"options vfio_iommu_type1 allow_unsafe_interrupts=1\" > /etc/modprobe.d/iommu_unsafe_interrupts.conf\n\n\tsed -i.backup -z \"s/res === null || res === undefined || \\!res || res\\n\\t\\t\\t.data.status.toLowerCase() \\!== 'active'/false/g\" /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js\n\n\ttouch /etc/pve/qemu-server/.osx-proxmox\n\n\tupdate-grub >> ${LOGFILE} 2>> ${LOGFILE}\n\n\techo \" \"\n\techo \" \"\n\techo \"... Successfully completed prerequisite process, your HOST will restart within 15s.\"\n\techo \" \"\n\techo \"After rebooting, RUN: osx-setup\"\n\techo \" \"\n\techo \" \"\n\n\tsleep 15s && reboot\n\nfi\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\nwhile [ true ]\ndo\n\n\tNEXTID=`pvesh get /cluster/nextid`\n\n\tclear\n\techo \"#######################################################\"\n\techo \"################ O S X - P R O X M O X ################\"\n\techo \"############### https://osx-proxmox.com ###############\"\n\techo \"################ version: ${HACKPXVERSION} ################\"\n\techo \"#######################################################\"\n\techo \" \"\n\techo \" Enter the macOS version to be installed:\"\n\techo \" \"\n\techo \" 1 - macOS High Sierra - 10.13 (please use ISO for install)\"\n\techo \" 2 - macOS Mojave - 10.14\"\n\techo \" 3 - macOS Catalina - 10.15\"\n\techo \" 4 - macOS Big Sur - 11\"\n\techo \" 5 - macOS Monterey - 12\"\n\techo \" 6 - macOS Ventura - 13\"\n\techo \" 7 - macOS Sonoma - 14\"\n\techo \" 8 - macOS Sequoia - 15\"\n\techo \" \"\n\techo \" Next VM ID: ${NEXTID}\"\n\techo \" Opencore version: ${OCVERSION}\"\n\techo \" \"\n\techo \" 200 - Add Promox VE NO Subscription repository\"\n\techo \" 201 - Update Opencore ISO\"\n\techo \" 202 - Clear ALL macOS Recovery Images\"\n\techo \" 203 - Remove Proxmox Subscription Notice\"\n\techo \" 204 - Enable macOS in Cloud (VultR Provider)\"\n\techo \" 205 - Customize Opencore config.plist\"\n\techo \" \"\n\techo \" 0 - Quit (or press ENTER only)\"\n\techo \" \"\n\techo -n \" Option: \"\n\tread OPT\n\n\tif [ -z $OPT ]\n\tthen\n\t\texit\n\tfi\n\n\t## Regular Expression for check integer number in size disk\n\tre='^[0-9]+$'\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n\t## macOS High Sierra - 10.13\n\n\tif [ ${OPT} -eq 1 ]\n\tthen\n\t\tclear\n\t\techo \" \"\n\t\techo \"macOS High Sierra\"\n\t\techo \" \"\n\t\techo -n \"Enter the VM ID [or ENTER to automatically generate (${NEXTID})]: \"\n\t\tread VM_ID\n\n\t\tif [ -z $VM_ID ]; then VM_ID=$NEXTID; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter VM Name [or ENTER for Default: HACK-HIGHSIERRA]: \"\n\t\tread VM_NAME\n\n\t\tif [ -z $VM_NAME ]; then VM_NAME=\"${DEFAULT_VM_PREFIX}HIGHSIERRA\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter a disk size [INTEGER] [or ENTER for Default: 64 Gb]: \"\n\t\tread SIZEDISK\n\n\t\tif [ -z $SIZEDISK ]; then SIZEDISK=64; fi;\n\t\tif ! [[ $SIZEDISK =~ $re ]] ; then echo \"ERROR! SIZEDISK MUST HAVE INTEGER NUMBER!\"; exit; fi;\n\n\t\techo \" \"\n\t\techo \"Storages available:\"\n\t\techo \" \"\n\t\tfor stg in `pvesh get storage --noborder --noheader`\n\t\tdo\n\t\t\techo \"     - ${stg}\"\n\t\tdone\n\t\techo \" \"\n\n\t\techo -n \"Enter which storage to create the VM [or ENTER for Default: local-lvm]: \"\n\t\tread STORAGECRTVM\n\n\t\tif [ -z $STORAGECRTVM ]; then STORAGECRTVM=\"local-lvm\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate CPU cores [Need Power of 2] [or ENTER for Default: 4]: \"\n\t\tread PROC_COUNT\n\n\t\tif [ -z $PROC_COUNT ]; then PROC_COUNT=4; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate RAM [MiB] [Default: 4096]: \"\n\t\tread RAM_SIZE\n\n\t\tif [ -z $RAM_SIZE ]; then RAM_SIZE=$DEFAULT_RAM_SIZE; fi;\n\n\t\techo \" \"\n\t\techo -n \"Do you want to download and create the recovery image? [Y/N] [or ENTER for Default: Y]: \"\n\t\tread CRTRECODISK\n\n\t\tif [ -z $CRTRECODISK ]; then CRTRECODISK=\"Y\"; fi;\n\t\t\n\t\tif [ \"${CRTRECODISK}\" == \"Y\" ] || [ \"${CRTRECODISK}\" == \"y\" ]\n\t\tthen\n\t\t\techo  \" \"\n\t\t\techo \"Downloading and creating the recovery image for installation ...\"\n\t\t\t\n\t\t\tLOGFILE=${LOGDIR}/crt-recovery-highsierra.log\n\n\t\t\tif [ ! -e ${ISODIR}/recovery-highsierra.iso ]\n\t\t\tthen\n\t\t\t\tfallocate -x -l 800M ${TMPDIR}/recovery-highsierra.iso > ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmkfs.msdos -F 32 ${TMPDIR}/recovery-highsierra.iso -n HIGHSIERRA >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tLOOPDEV=`losetup -f --show ${TMPDIR}/recovery-highsierra.iso 2>> ${LOGFILE}`\n\t\t\t\tmkdir -p /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmount ${LOOPDEV} /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd /mnt/APPLE/ >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tpython3 ${SCRIPT_DIR}/tools/macrecovery/macrecovery.py -b Mac-BE088AF8C5EB4FA2 -m 00000000000J80300 download >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd ${SCRIPT_DIR}\n\n\t\t\t\tumount /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\trmdir /mnt/APPLE\n\t\t\t\tlosetup -d ${LOOPDEV} >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tmv ${TMPDIR}/recovery-highsierra.iso ${ISODIR}\n\n\t\t\t\trm -rf ${TMPDIR}\n\t\t\t\techo \"Download and recovery created successfully.\"\n\t\t\telse\n\t\t\t\techo \"Recovery image of macOS High Sierra already exists.\"\n\t\t\tfi\n\t\telse\n\t\t\techo \" \"\n\t\t\techo \"Skipping download and creating recovery image ...\"\n\t\tfi\n\n\t\techo \" \"\n\t\techo \"Creating virtual machine with macOS - High Sierra ...\"\n\t\t\n\t\tif [ ${OSX_PLATFORM} == 'AMD' ]\n\t\tthen\n\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-amd-highsierra.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device usb-kbd,bus=ehci.0,port=2 -device usb-mouse,bus=ehci.0,port=3 -cpu Penryn,kvm=on,vendor=GenuineIntel,+kvm_pv_unhalt,+kvm_pv_eoi,+hypervisor,+invtsc,+ssse3,+sse4.2,+popcnt,+avx,+avx2,+aes,+fma,+bmi1,+bmi2,+xsave,+xsaveopt,check' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;sata0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - High Sierra' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--sata0 ${STORAGECRTVM}:${SIZEDISK},cache=none,ssd=1,discard=on \\\n\t\t\t--ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-highsierra.iso,cache=unsafe,size=800M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+bmi2,+xsave,+xsaveopt,check/+bmi2,+xsave,+xsaveopt,check -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\tif [ ${OSX_PLATFORM} == 'INTEL' ]\n\t\tthen\n\t\t\t\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-intel-highsierra.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device usb-kbd,bus=ehci.0,port=2 -device usb-mouse,bus=ehci.0,port=3 -cpu host,kvm=on,vendor=GenuineIntel,+kvm_pv_unhalt,+kvm_pv_eoi,+hypervisor,+invtsc' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;sata0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - High Sierra' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--sata0 ${STORAGECRTVM}:${SIZEDISK},cache=none,ssd=1,discard=on \\\n\t\t\t--ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-highsierra.iso,cache=unsafe,size=800M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+kvm_pv_eoi,+hypervisor,+invtsc/+kvm_pv_eoi,+hypervisor,+invtsc -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\techo \"Virtual machine (${VM_NAME}) created successfully.\"\n\t\techo \" \"\n\t\techo \"Access the Proxmox Web Panel to continue with the installation ...\"\n\t\techo \"https://`ip address show vmbr0 | grep -w \"inet\" | awk -F \" \" '{ print $2 }' | awk -F \"/\" '{ print $1 }'`:8006\"\n\t\techo \" \"\n\t\texit\n\tfi\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n\t## macOS Mojave - 10.14\n\t\n\tif [ ${OPT} -eq 2 ]\n\tthen\n\t\tclear\n\t\techo \" \"\n\t\techo \"macOS Mojave\"\n\t\techo \" \"\n\t\techo -n \"Enter the VM ID [or ENTER to automatically generate (${NEXTID})]: \"\n\t\tread VM_ID\n\n\t\tif [ -z $VM_ID ]; then VM_ID=$NEXTID; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter VM Name [or ENTER for Default: HACK-MOJAVE]: \"\n\t\tread VM_NAME\n\n\t\tif [ -z $VM_NAME ]; then VM_NAME=\"${DEFAULT_VM_PREFIX}MOJAVE\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter a disk size [INTEGER] [or ENTER for Default: 64 Gb]: \"\n\t\tread SIZEDISK\n\n\t\tif [ -z $SIZEDISK ]; then SIZEDISK=64; fi;\n\t\tif ! [[ $SIZEDISK =~ $re ]] ; then echo \"ERROR! SIZEDISK MUST HAVE INTEGER NUMBER!\"; exit; fi;\n\n\t\techo \" \"\n\t\techo \"Storages available:\"\n\t\techo \" \"\n\t\tfor stg in `pvesh get storage --noborder --noheader`\n\t\tdo\n\t\t\techo \"     - ${stg}\"\n\t\tdone\n\t\techo \" \"\n\n\t\techo -n \"Enter which storage to create the VM [or ENTER for Default: local-lvm]: \"\n\t\tread STORAGECRTVM\n\n\t\tif [ -z $STORAGECRTVM ]; then STORAGECRTVM=\"local-lvm\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate CPU cores [Need Power of 2] [or ENTER for Default: 4]: \"\n\t\tread PROC_COUNT\n\n\t\tif [ -z $PROC_COUNT ]; then PROC_COUNT=4; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate RAM [MiB] [or ENTER for Default: 4096]: \"\n\t\tread RAM_SIZE\n\n\t\tif [ -z $RAM_SIZE ]; then RAM_SIZE=$DEFAULT_RAM_SIZE; fi;\n\n\t\techo \" \"\n\t\techo -n \"Do you want to download and create the recovery image? [Y/N] [or ENTER for Default: Y]: \"\n\t\tread CRTRECODISK\n\n\t\tif [ -z $CRTRECODISK ]; then CRTRECODISK=\"Y\"; fi;\n\t\t\n\t\tif [ \"${CRTRECODISK}\" == \"Y\" ] || [ \"${CRTRECODISK}\" == \"y\" ]\n\t\tthen\n\t\t\techo  \" \"\n\t\t\techo \"Downloading and creating the recovery image for installation ...\"\n\n\t\t\tLOGFILE=${LOGDIR}/crt-recovery-mojave.log\n\n\t\t\tif [ ! -e ${ISODIR}/recovery-mojave.iso ]\n\t\t\tthen\n\t\t\t\tfallocate -x -l 800M ${TMPDIR}/recovery-mojave.iso > ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmkfs.msdos -F 32 ${TMPDIR}/recovery-mojave.iso -n MOJAVE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tLOOPDEV=`losetup -f --show ${TMPDIR}/recovery-mojave.iso 2>> ${LOGFILE}`\n\t\t\t\tmkdir -p /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmount ${LOOPDEV} /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd /mnt/APPLE/ >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tpython3 ${SCRIPT_DIR}/tools/macrecovery/macrecovery.py -b Mac-7BA5B2DFE22DDD8C -m 00000000000KXPG00 download >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd ${SCRIPT_DIR}\n\n\t\t\t\tumount /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\trmdir /mnt/APPLE\n\t\t\t\tlosetup -d ${LOOPDEV} >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tmv ${TMPDIR}/recovery-mojave.iso ${ISODIR}\n\n\t\t\t\trm -rf ${TMPDIR}\n\t\t\t\techo \"Download and recovery created successfully.\"\n\t\t\telse\n\t\t\t\techo \"Recovery image of macOS Mojave already exists.\"\n\t\t\tfi\n\t\telse\n\t\t\techo \" \"\n\t\t\techo \"Skipping download and creating recovery image ...\"\n\t\tfi\n\n\t\techo \" \"\n\t\techo \"Creating virtual machine with macOS - Mojave ...\"\n\n\t\tif [ ${OSX_PLATFORM} == 'AMD' ]\n\t\tthen\n\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-amd-mojave.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device usb-kbd,bus=ehci.0,port=2 -device usb-mouse,bus=ehci.0,port=3 -cpu Penryn,kvm=on,vendor=GenuineIntel,+kvm_pv_unhalt,+kvm_pv_eoi,+hypervisor,+invtsc,+ssse3,+sse4.2,+popcnt,+avx,+avx2,+aes,+fma,+bmi1,+bmi2,+xsave,+xsaveopt,check' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;sata0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - Mojave' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--sata0 ${STORAGECRTVM}:${SIZEDISK},cache=none,ssd=1,discard=on \\\n\t\t\t--ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-mojave.iso,cache=unsafe,size=800M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+bmi2,+xsave,+xsaveopt,check/+bmi2,+xsave,+xsaveopt,check -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\tif [ ${OSX_PLATFORM} == 'INTEL' ]\n\t\tthen\n\t\t\t\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-intel-mojave.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device usb-kbd,bus=ehci.0,port=2 -device usb-mouse,bus=ehci.0,port=3 -cpu host,kvm=on,vendor=GenuineIntel,+kvm_pv_unhalt,+kvm_pv_eoi,+hypervisor,+invtsc' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;sata0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - Mojave' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--sata0 ${STORAGECRTVM}:${SIZEDISK},cache=none,ssd=1,discard=on \\\n\t\t\t--ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-mojave.iso,cache=unsafe,size=800M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+kvm_pv_eoi,+hypervisor,+invtsc/+kvm_pv_eoi,+hypervisor,+invtsc -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\techo \"Virtual machine (${VM_NAME}) created successfully.\"\n\t\techo \" \"\n\t\techo \"Access the Proxmox Web Panel to continue with the installation ...\"\n\t\techo \"https://`ip address show vmbr0 | grep -w \"inet\" | awk -F \" \" '{ print $2 }' | awk -F \"/\" '{ print $1 }'`:8006\"\n\t\techo \" \"\n\t\texit\n\tfi\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n\t## macOS Catalina - 10.15\n\n\tif [ ${OPT} -eq 3 ]\n\tthen\n\t\tclear\n\t\techo \" \"\n\t\techo \"macOS Catalina\"\n\t\techo \" \"\n\t\techo -n \"Enter the VM ID [or ENTER to automatically generate (${NEXTID})]: \"\n\t\tread VM_ID\n\n\t\tif [ -z $VM_ID ]; then VM_ID=$NEXTID; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter VM Name [or ENTER for Default: HACK-CATALINA]: \"\n\t\tread VM_NAME\n\n\t\tif [ -z $VM_NAME ]; then VM_NAME=\"${DEFAULT_VM_PREFIX}CATALINA\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter a disk size [INTEGER] [or ENTER for Default: 64 Gb]: \"\n\t\tread SIZEDISK\n\n\t\tif [ -z $SIZEDISK ]; then SIZEDISK=64; fi;\n\t\tif ! [[ $SIZEDISK =~ $re ]] ; then echo \"ERROR! SIZEDISK MUST HAVE INTEGER NUMBER!\"; exit; fi;\n\n\t\techo \" \"\n\t\techo \"Storages available:\"\n\t\techo \" \"\n\t\tfor stg in `pvesh get storage --noborder --noheader`\n\t\tdo\n\t\t\techo \"     - ${stg}\"\n\t\tdone\n\t\techo \" \"\n\n\t\techo -n \"Enter which storage to create the VM [or ENTER for Default: local-lvm]: \"\n\t\tread STORAGECRTVM\n\n\t\tif [ -z $STORAGECRTVM ]; then STORAGECRTVM=\"local-lvm\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate CPU cores [Need Power of 2] [or ENTER for Default: 4]: \"\n\t\tread PROC_COUNT\n\n\t\tif [ -z $PROC_COUNT ]; then PROC_COUNT=4; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate RAM [MiB] [or ENTER for Default: 4096]: \"\n\t\tread RAM_SIZE\n\n\t\tif [ -z $RAM_SIZE ]; then RAM_SIZE=$DEFAULT_RAM_SIZE; fi;\n\n\t\techo \" \"\n\t\techo -n \"Do you want to download and create the recovery image? [Y/N] [or ENTER for Default: Y]: \"\n\t\tread CRTRECODISK\n\n\t\tif [ -z $CRTRECODISK ]; then CRTRECODISK=\"Y\"; fi;\n\t\t\n\t\tif [ \"${CRTRECODISK}\" == \"Y\" ] || [ \"${CRTRECODISK}\" == \"y\" ]\n\t\tthen\n\t\t\techo  \" \"\t\t\n\t\t\techo \"Downloading and creating the recovery image for installation ...\"\n\n\t\t\tLOGFILE=${LOGDIR}/crt-recovery-catalina.log\n\n\t\t\tif [ ! -e ${ISODIR}/recovery-catalina.iso ]\n\t\t\tthen\n\t\t\t\tfallocate -x -l 800M ${TMPDIR}/recovery-catalina.iso > ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmkfs.msdos -F 32 ${TMPDIR}/recovery-catalina.iso -n CATALINA >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tLOOPDEV=`losetup -f --show ${TMPDIR}/recovery-catalina.iso 2>> ${LOGFILE}`\n\t\t\t\tmkdir -p /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmount ${LOOPDEV} /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd /mnt/APPLE/ >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tpython3 ${SCRIPT_DIR}/tools/macrecovery/macrecovery.py -b Mac-00BE6ED71E35EB86 -m 00000000000000000 download >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd ${SCRIPT_DIR}\n\n\t\t\t\tumount /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\trmdir /mnt/APPLE\n\t\t\t\tlosetup -d ${LOOPDEV} >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tmv ${TMPDIR}/recovery-catalina.iso ${ISODIR}\n\n\t\t\t\trm -rf ${TMPDIR}\n\t\t\t\techo \"Download and recovery created successfully.\"\n\t\t\telse\n\t\t\t\techo \"Recovery image of macOS Catalina already exists.\"\n\t\t\tfi\n\t\telse\n\t\t\techo \" \"\n\t\t\techo \"Skipping download and creating recovery image ...\"\n\t\tfi\n\n\t\techo \" \"\n\t\techo \"Creating virtual machine with macOS - Catalina ...\"\n\n\t\tif [ ${OSX_PLATFORM} == 'AMD' ]\n\t\tthen\n\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-amd-catalina.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device usb-kbd,bus=ehci.0,port=2 -device usb-mouse,bus=ehci.0,port=3 -cpu Penryn,kvm=on,vendor=GenuineIntel,+kvm_pv_unhalt,+kvm_pv_eoi,+hypervisor,+invtsc,+ssse3,+sse4.2,+popcnt,+avx,+avx2,+aes,+fma,+bmi1,+bmi2,+xsave,+xsaveopt,check' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;virtio0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - Catalina' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--virtio0 ${STORAGECRTVM}:${SIZEDISK},cache=none,discard=on \\\n\t\t\t --ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-catalina.iso,cache=unsafe,size=800M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+bmi2,+xsave,+xsaveopt,check/+bmi2,+xsave,+xsaveopt,check -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\tif [ ${OSX_PLATFORM} == 'INTEL' ]\n\t\tthen\n\t\t\t\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-intel-catalina.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device usb-kbd,bus=ehci.0,port=2 -device usb-mouse,bus=ehci.0,port=3 -cpu host,kvm=on,vendor=GenuineIntel,+kvm_pv_unhalt,+kvm_pv_eoi,+hypervisor,+invtsc' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;virtio0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - Catalina' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--virtio0 ${STORAGECRTVM}:${SIZEDISK},cache=none,discard=on \\\n\t\t\t--ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-catalina.iso,cache=unsafe,size=800M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+kvm_pv_eoi,+hypervisor,+invtsc/+kvm_pv_eoi,+hypervisor,+invtsc -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\techo \"Virtual machine (${VM_NAME}) created successfully.\"\n\t\techo \" \"\n\t\techo \"Access the Proxmox Web Panel to continue with the installation ...\"\n\t\techo \"https://`ip address show vmbr0 | grep -w \"inet\" | awk -F \" \" '{ print $2 }' | awk -F \"/\" '{ print $1 }'`:8006\"\n\t\techo \" \"\n\t\texit\n\tfi\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n\t## macOS Big Sur - 11\n\n\tif [ ${OPT} -eq 4 ]\n\tthen\n\t\tclear\n\t\techo \" \"\n\t\techo \"macOS Big Sur\"\n\t\techo \" \"\n\t\techo -n \"Enter the VM ID [or ENTER to automatically generate (${NEXTID})]: \"\n\t\tread VM_ID\n\n\t\tif [ -z $VM_ID ]; then VM_ID=$NEXTID; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter VM Name [or ENTER for Default: HACK-BIGSUR]: \"\n\t\tread VM_NAME\n\n\t\tif [ -z $VM_NAME ]; then VM_NAME=\"${DEFAULT_VM_PREFIX}BIG-SUR\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter a disk size [INTEGER] [or ENTER for Default: 64 Gb]: \"\n\t\tread SIZEDISK\n\n\t\tif [ -z $SIZEDISK ]; then SIZEDISK=64; fi;\n\t\tif ! [[ $SIZEDISK =~ $re ]] ; then echo \"ERROR! SIZEDISK MUST HAVE INTEGER NUMBER!\"; exit; fi;\n\n\t\techo \" \"\n\t\techo \"Storages available:\"\n\t\techo \" \"\n\t\tfor stg in `pvesh get storage --noborder --noheader`\n\t\tdo\n\t\t\techo \"     - ${stg}\"\n\t\tdone\n\t\techo \" \"\n\n\t\techo -n \"Enter which storage to create the VM [or ENTER for Default: local-lvm]: \"\n\t\tread STORAGECRTVM\n\n\t\tif [ -z $STORAGECRTVM ]; then STORAGECRTVM=\"local-lvm\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate CPU cores [Need Power of 2] [or ENTER for Default: 4]: \"\n\t\tread PROC_COUNT\n\n\t\tif [ -z $PROC_COUNT ]; then PROC_COUNT=4; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate RAM [MiB] [Default: 4096]: \"\n\t\tread RAM_SIZE\n\n\t\tif [ -z $RAM_SIZE ]; then RAM_SIZE=$DEFAULT_RAM_SIZE; fi;\n\n\t\techo \" \"\n\t\techo -n \"Do you want to download and create the recovery image? [Y/N] [or ENTER for Default: Y]: \"\n\t\tread CRTRECODISK\n\n\t\tif [ -z $CRTRECODISK ]; then CRTRECODISK=\"Y\"; fi;\n\t\t\n\t\tif [ \"${CRTRECODISK}\" == \"Y\" ] || [ \"${CRTRECODISK}\" == \"y\" ]\n\t\tthen\n\t\t\techo  \" \"\t\t\n\t\t\techo \"Downloading and creating the recovery image for installation ...\"\n\t\t\t\n\t\t\tLOGFILE=${LOGDIR}/crt-recovery-bigsur.log\n\n\t\t\tif [ ! -e ${ISODIR}/recovery-bigsur.iso ]\n\t\t\tthen\n\t\t\t\tfallocate -x -l 1024M ${TMPDIR}/recovery-bigsur.iso > ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmkfs.msdos -F 32 ${TMPDIR}/recovery-bigsur.iso -n BIGSUR >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tLOOPDEV=`losetup -f --show ${TMPDIR}/recovery-bigsur.iso 2>> ${LOGFILE}`\n\t\t\t\tmkdir -p /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmount ${LOOPDEV} /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd /mnt/APPLE/ >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tpython3 ${SCRIPT_DIR}/tools/macrecovery/macrecovery.py -b Mac-42FD25EABCABB274 -m 00000000000000000 download >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd ${SCRIPT_DIR}\n\n\t\t\t\tumount /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\trmdir /mnt/APPLE\n\t\t\t\tlosetup -d ${LOOPDEV} >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tmv ${TMPDIR}/recovery-bigsur.iso ${ISODIR}\n\n\t\t\t\trm -rf ${TMPDIR}\n\t\t\t\techo \"Download and recovery created successfully.\"\n\t\t\telse\n\t\t\t\techo \"Recovery image of macOS Big Sur already exists.\"\n\t\t\tfi\n\t\telse\n\t\t\techo \" \"\n\t\t\techo \"Skipping download and creating recovery image ...\"\n\t\tfi\n\n\t\techo \" \"\n\t\techo \"Creating virtual machine with macOS - Big Sur ...\"\n\n\t\tif [ ${OSX_PLATFORM} == 'AMD' ]\n\t\tthen\n\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-amd-bigsur.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device usb-kbd,bus=ehci.0,port=2 -device usb-mouse,bus=ehci.0,port=3 -cpu Penryn,kvm=on,vendor=GenuineIntel,+kvm_pv_unhalt,+kvm_pv_eoi,+hypervisor,+invtsc,+ssse3,+sse4.2,+popcnt,+avx,+avx2,+aes,+fma,+bmi1,+bmi2,+xsave,+xsaveopt,check' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;virtio0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - Big Sur' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--virtio0 ${STORAGECRTVM}:${SIZEDISK},cache=none,discard=on \\\n\t\t\t--ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-bigsur.iso,cache=unsafe,size=1024M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+bmi2,+xsave,+xsaveopt,check/+bmi2,+xsave,+xsaveopt,check -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\tif [ ${OSX_PLATFORM} == 'INTEL' ]\n\t\tthen\n\t\t\t\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-intel-bigsur.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device usb-kbd,bus=ehci.0,port=2 -device usb-mouse,bus=ehci.0,port=3 -cpu host,kvm=on,vendor=GenuineIntel,+kvm_pv_unhalt,+kvm_pv_eoi,+hypervisor,+invtsc' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;virtio0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - Big Sur' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--virtio0 ${STORAGECRTVM}:${SIZEDISK},cache=none,discard=on \\\n\t\t\t--ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-bigsur.iso,cache=unsafe,size=1024M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+kvm_pv_eoi,+hypervisor,+invtsc/+kvm_pv_eoi,+hypervisor,+invtsc -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\techo \"Virtual machine (${VM_NAME}) created successfully.\"\n\t\techo \" \"\n\t\techo \"Access the Proxmox Web Panel to continue with the installation ...\"\n\t\techo \"https://`ip address show vmbr0 | grep -w \"inet\" | awk -F \" \" '{ print $2 }' | awk -F \"/\" '{ print $1 }'`:8006\"\n\t\techo \" \"\n\t\texit\n\tfi\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n\t## macOS Monterey - 12\n\n\tif [ ${OPT} -eq 5 ]\n\tthen\n\t\tclear\n\t\techo \" \"\n\t\techo \"macOS Monterey\"\n\t\techo \" \"\n\t\techo -n \"Enter the VM ID [or ENTER to automatically generate (${NEXTID})]: \"\n\t\tread VM_ID\n\n\t\tif [ -z $VM_ID ]; then VM_ID=$NEXTID; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter VM Name [or ENTER for Default: HACK-MONTEREY]: \"\n\t\tread VM_NAME\n\n\t\tif [ -z $VM_NAME ]; then VM_NAME=\"${DEFAULT_VM_PREFIX}MONTEREY\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter a disk size [INTEGER] [or ENTER for Default: 64 Gb]: \"\n\t\tread SIZEDISK\n\n\t\tif [ -z $SIZEDISK ]; then SIZEDISK=64; fi;\n\t\tif ! [[ $SIZEDISK =~ $re ]] ; then echo \"ERROR! SIZEDISK MUST HAVE INTEGER NUMBER!\"; exit; fi;\n\n\t\techo \" \"\n\t\techo \"Storages available:\"\n\t\techo \" \"\n\t\tfor stg in `pvesh get storage --noborder --noheader`\n\t\tdo\n\t\t\techo \"     - ${stg}\"\n\t\tdone\n\t\techo \" \"\n\n\t\techo -n \"Enter which storage to create the VM [or ENTER for Default: local-lvm]: \"\n\t\tread STORAGECRTVM\n\n\t\tif [ -z $STORAGECRTVM ]; then STORAGECRTVM=\"local-lvm\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate CPU cores [Need Power of 2] [or ENTER for Default: 4]: \"\n\t\tread PROC_COUNT\n\n\t\tif [ -z $PROC_COUNT ]; then PROC_COUNT=4; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate RAM [MiB] [or ENTER for Default: 4096]: \"\n\t\tread RAM_SIZE\n\n\t\tif [ -z $RAM_SIZE ]; then RAM_SIZE=$DEFAULT_RAM_SIZE; fi;\n\n\t\techo \" \"\n\t\techo -n \"Do you want to download and create the recovery image? [Y/N] [or ENTER for Default: Y]: \"\n\t\tread CRTRECODISK\n\n\t\tif [ -z $CRTRECODISK ]; then CRTRECODISK=\"Y\"; fi;\n\t\t\n\t\tif [ \"${CRTRECODISK}\" == \"Y\" ] || [ \"${CRTRECODISK}\" == \"y\" ]\n\t\tthen\n\t\t\techo  \" \"\t\t\n\t\t\techo \"Downloading and creating the recovery image for installation ...\"\n\t\t\t\n\t\t\tLOGFILE=${LOGDIR}/crt-recovery-monterey.log\n\n\t\t\tif [ ! -e ${ISODIR}/recovery-monterey.iso ]\n\t\t\tthen\n\t\t\t\tfallocate -x -l 1024M ${TMPDIR}/recovery-monterey.iso > ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmkfs.msdos -F 32 ${TMPDIR}/recovery-monterey.iso -n MONTEREY >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tLOOPDEV=`losetup -f --show ${TMPDIR}/recovery-monterey.iso 2>> ${LOGFILE}`\n\t\t\t\tmkdir -p /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmount ${LOOPDEV} /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd /mnt/APPLE/ >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tpython3 ${SCRIPT_DIR}/tools/macrecovery/macrecovery.py -b Mac-E43C1C25D4880AD6 -m 00000000000000000 download >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd ${SCRIPT_DIR}\n\n\t\t\t\tumount /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\trmdir /mnt/APPLE\n\t\t\t\tlosetup -d ${LOOPDEV} >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tmv ${TMPDIR}/recovery-monterey.iso ${ISODIR}\n\n\t\t\t\trm -rf ${TMPDIR}\n\t\t\t\techo \"Download and recovery created successfully.\"\n\t\t\telse\n\t\t\t\techo \"Recovery image of macOS Monterey already exists.\"\n\t\t\tfi\n\t\telse\n\t\t\techo \" \"\n\t\t\techo \"Skipping download and creating recovery image ...\"\n\t\tfi\n\n\t\techo \" \"\n\t\techo \"Creating virtual machine with macOS - Monterey ...\"\n\n\t\tif [ ${OSX_PLATFORM} == 'AMD' ]\n\t\tthen\n\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-amd-monterey.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device usb-kbd,bus=ehci.0,port=2 -device usb-mouse,bus=ehci.0,port=3 -cpu Penryn,kvm=on,vendor=GenuineIntel,+kvm_pv_unhalt,+kvm_pv_eoi,+hypervisor,+invtsc,+ssse3,+sse4.2,+popcnt,+avx,+avx2,+aes,+fma,+bmi1,+bmi2,+xsave,+xsaveopt,check' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;virtio0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - Monterey' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--virtio0 ${STORAGECRTVM}:${SIZEDISK},cache=none,discard=on \\\n\t\t\t--ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-monterey.iso,cache=unsafe,size=1024M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+bmi2,+xsave,+xsaveopt,check/+bmi2,+xsave,+xsaveopt,check -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\tif [ ${OSX_PLATFORM} == 'INTEL' ]\n\t\tthen\n\t\t\t\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-intel-monterey.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device usb-kbd,bus=ehci.0,port=2 -device usb-mouse,bus=ehci.0,port=3 -cpu host,kvm=on,vendor=GenuineIntel,+kvm_pv_unhalt,+kvm_pv_eoi,+hypervisor,+invtsc' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;virtio0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - Monterey' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--virtio0 ${STORAGECRTVM}:${SIZEDISK},cache=none,discard=on \\\n\t\t\t--ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-monterey.iso,cache=unsafe,size=1024M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+kvm_pv_eoi,+hypervisor,+invtsc/+kvm_pv_eoi,+hypervisor,+invtsc -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\techo \"Virtual machine (${VM_NAME}) created successfully.\"\n\t\techo \" \"\n\t\techo \"Access the Proxmox Web Panel to continue with the installation ...\"\n\t\techo \"https://`ip address show vmbr0 | grep -w \"inet\" | awk -F \" \" '{ print $2 }' | awk -F \"/\" '{ print $1 }'`:8006\"\n\t\techo \" \"\n\t\texit\n\tfi\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n\t## macOS Ventura - 13\n\n\tif [ ${OPT} -eq 6 ]\n\tthen\n\t\tclear\n\t\techo \" \"\n\t\techo \"macOS Ventura\"\n\t\techo \" \"\n\t\techo -n \"Enter the VM ID [or ENTER to automatically generate (${NEXTID})]: \"\n\t\tread VM_ID\n\n\t\tif [ -z $VM_ID ]; then VM_ID=$NEXTID; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter VM Name [or ENTER for Default: HACK-VENTURA]: \"\n\t\tread VM_NAME\n\n\t\tif [ -z $VM_NAME ]; then VM_NAME=\"${DEFAULT_VM_PREFIX}VENTURA\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter a disk size [INTEGER] [or ENTER for Default: 64 Gb]: \"\n\t\tread SIZEDISK\n\n\t\tif [ -z $SIZEDISK ]; then SIZEDISK=64; fi;\n\t\tif ! [[ $SIZEDISK =~ $re ]] ; then echo \"ERROR! SIZEDISK MUST HAVE INTEGER NUMBER!\"; exit; fi;\n\n\t\techo \" \"\n\t\techo \"Storages available:\"\n\t\techo \" \"\n\t\tfor stg in `pvesh get storage --noborder --noheader`\n\t\tdo\n\t\t\techo \"     - ${stg}\"\n\t\tdone\n\t\techo \" \"\n\n\t\techo -n \"Enter which storage to create the VM [or ENTER for Default: local-lvm]: \"\n\t\tread STORAGECRTVM\n\n\t\tif [ -z $STORAGECRTVM ]; then STORAGECRTVM=\"local-lvm\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate CPU cores [Need Power of 2] [or ENTER for Default: 4]: \"\n\t\tread PROC_COUNT\n\n\t\tif [ -z $PROC_COUNT ]; then PROC_COUNT=4; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate RAM [MiB] [or ENTER for Default: 4096]: \"\n\t\tread RAM_SIZE\n\n\t\tif [ -z $RAM_SIZE ]; then RAM_SIZE=$DEFAULT_RAM_SIZE; fi;\n\n\t\techo \" \"\n\t\techo -n \"Do you want to download and create the recovery image? [Y/N] [or ENTER for Default: Y]: \"\n\t\tread CRTRECODISK\n\n\t\tif [ -z $CRTRECODISK ]; then CRTRECODISK=\"Y\"; fi;\n\t\t\n\t\tif [ \"${CRTRECODISK}\" == \"Y\" ] || [ \"${CRTRECODISK}\" == \"y\" ]\n\t\tthen\n\t\t\techo  \" \"\t\t\n\t\t\techo \"Downloading and creating the recovery image for installation ...\"\n\t\t\t\n\t\t\tLOGFILE=${LOGDIR}/crt-recovery-ventura.log\n\n\t\t\tif [ ! -e ${ISODIR}/recovery-ventura.iso ]\n\t\t\tthen\n\t\t\t\tfallocate -x -l 1024M ${TMPDIR}/recovery-ventura.iso > ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmkfs.msdos -F 32 ${TMPDIR}/recovery-ventura.iso -n VENTURA >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tLOOPDEV=`losetup -f --show ${TMPDIR}/recovery-ventura.iso 2>> ${LOGFILE}`\n\t\t\t\tmkdir -p /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmount ${LOOPDEV} /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd /mnt/APPLE/ >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tpython3 ${SCRIPT_DIR}/tools/macrecovery/macrecovery.py -b Mac-B4831CEBD52A0C4C -m 00000000000000000 download >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd ${SCRIPT_DIR}\n\n\t\t\t\tumount /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\trmdir /mnt/APPLE\n\t\t\t\tlosetup -d ${LOOPDEV} >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tmv ${TMPDIR}/recovery-ventura.iso ${ISODIR}\n\n\t\t\t\trm -rf ${TMPDIR}\n\t\t\t\techo \"Download and recovery created successfully.\"\n\t\t\telse\n\t\t\t\techo \"Recovery image of macOS Ventura already exists.\"\n\t\t\tfi\n\t\telse\n\t\t\techo \" \"\n\t\t\techo \"Skipping download and creating recovery image ...\"\n\t\tfi\n\n\t\techo \" \"\n\t\techo \"Creating virtual machine with macOS - Ventura ...\"\n\n\t\tif [ ${OSX_PLATFORM} == 'AMD' ]\n\t\tthen\n\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-amd-ventura.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device usb-kbd,bus=ehci.0,port=2 -device usb-mouse,bus=ehci.0,port=3 -cpu Cascadelake-Server,vendor=GenuineIntel,+invtsc,-pcid,-hle,-rtm,-avx512f,-avx512dq,-avx512cd,-avx512bw,-avx512vl,-avx512vnni,kvm=on,vmware-cpuid-freq=on' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;virtio0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - Ventura' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--virtio0 ${STORAGECRTVM}:${SIZEDISK},cache=none,discard=on \\\n\t\t\t--ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-ventura.iso,cache=unsafe,size=1024M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+invtsc,-pcid,-hle,-rtm,-avx512f,-avx512dq,-avx512cd,-avx512bw,-avx512vl,-avx512vnni,kvm=on,vmware-cpuid-freq=on/+invtsc,-pcid,-hle,-rtm,-avx512f,-avx512dq,-avx512cd,-avx512bw,-avx512vl,-avx512vnni,kvm=on,vmware-cpuid-freq=on -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\tif [ ${OSX_PLATFORM} == 'INTEL' ]\n\t\tthen\n\t\t\t\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-intel-ventura.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device usb-kbd,bus=ehci.0,port=2 -device usb-mouse,bus=ehci.0,port=3 -cpu host,kvm=on,vendor=GenuineIntel,+kvm_pv_unhalt,+kvm_pv_eoi,+hypervisor,+invtsc' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;virtio0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - Ventura' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--virtio0 ${STORAGECRTVM}:${SIZEDISK},cache=none,discard=on \\\n\t\t\t--ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-ventura.iso,cache=unsafe,size=1024M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+kvm_pv_eoi,+hypervisor,+invtsc/+kvm_pv_eoi,+hypervisor,+invtsc -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\techo \"Virtual machine (${VM_NAME}) created successfully.\"\n\t\techo \" \"\n\t\techo \"Access the Proxmox Web Panel to continue with the installation ...\"\n\t\techo \"https://`ip address show vmbr0 | grep -w \"inet\" | awk -F \" \" '{ print $2 }' | awk -F \"/\" '{ print $1 }'`:8006\"\n\t\techo \" \"\n\t\texit\n\tfi\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n\t## macOS Sonoma - 14\n\n\tif [ ${OPT} -eq 7 ]\n\tthen\n\t\tclear\n\t\techo \" \"\n\t\techo \"macOS Sonoma\"\n\t\techo \" \"\n\t\techo -n \"Enter the VM ID [or ENTER to automatically generate (${NEXTID})]: \"\n\t\tread VM_ID\n\n\t\tif [ -z $VM_ID ]; then VM_ID=$NEXTID; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter VM Name [or ENTER for Default: HACK-SONOMA]: \"\n\t\tread VM_NAME\n\n\t\tif [ -z $VM_NAME ]; then VM_NAME=\"${DEFAULT_VM_PREFIX}SONOMA\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter a disk size [INTEGER] [or ENTER for Default: 64 Gb]: \"\n\t\tread SIZEDISK\n\n\t\tif [ -z $SIZEDISK ]; then SIZEDISK=64; fi;\n\t\tif ! [[ $SIZEDISK =~ $re ]] ; then echo \"ERROR! SIZEDISK MUST HAVE INTEGER NUMBER!\"; exit; fi;\n\n\t\techo \" \"\n\t\techo \"Storages available:\"\n\t\techo \" \"\n\t\tfor stg in `pvesh get storage --noborder --noheader`\n\t\tdo\n\t\t\techo \"     - ${stg}\"\n\t\tdone\n\t\techo \" \"\n\n\t\techo -n \"Enter which storage to create the VM [or ENTER for Default: local-lvm]: \"\n\t\tread STORAGECRTVM\n\n\t\tif [ -z $STORAGECRTVM ]; then STORAGECRTVM=\"local-lvm\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate CPU cores [Need Power of 2] [or ENTER for Default: 4]: \"\n\t\tread PROC_COUNT\n\n\t\tif [ -z $PROC_COUNT ]; then PROC_COUNT=4; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate RAM [MiB] [or ENTER for Default: 4096]: \"\n\t\tread RAM_SIZE\n\n\t\tif [ -z $RAM_SIZE ]; then RAM_SIZE=$DEFAULT_RAM_SIZE; fi;\n\n\t\techo \" \"\n\t\techo -n \"Do you want to download and create the recovery image? [Y/N] [or ENTER for Default: Y]: \"\n\t\tread CRTRECODISK\n\n\t\tif [ -z $CRTRECODISK ]; then CRTRECODISK=\"Y\"; fi;\n\t\t\n\t\tif [ \"${CRTRECODISK}\" == \"Y\" ] || [ \"${CRTRECODISK}\" == \"y\" ]\n\t\tthen\n\t\t\techo  \" \"\t\t\n\t\t\techo \"Downloading and creating the recovery image for installation ...\"\n\t\t\t\n\t\t\tLOGFILE=${LOGDIR}/crt-recovery-sonoma.log\n\n\t\t\tif [ ! -e ${ISODIR}/recovery-sonoma.iso ]\n\t\t\tthen\n\t\t\t\tfallocate -x -l 1450M ${TMPDIR}/recovery-sonoma.iso > ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmkfs.msdos -F 32 ${TMPDIR}/recovery-sonoma.iso -n SONOMA >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tLOOPDEV=`losetup -f --show ${TMPDIR}/recovery-sonoma.iso 2>> ${LOGFILE}`\n\t\t\t\tmkdir -p /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmount ${LOOPDEV} /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd /mnt/APPLE/ >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tpython3 ${SCRIPT_DIR}/tools/macrecovery/macrecovery.py -b Mac-827FAC58A8FDFA22 -m 00000000000000000 download >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd ${SCRIPT_DIR}\n\n\t\t\t\tumount /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\trmdir /mnt/APPLE\n\t\t\t\tlosetup -d ${LOOPDEV} >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tmv ${TMPDIR}/recovery-sonoma.iso ${ISODIR}\n\n\t\t\t\trm -rf ${TMPDIR}\n\t\t\t\techo \"Download and recovery created successfully.\"\n\t\t\telse\n\t\t\t\techo \"Recovery image of macOS Sonoma already exists.\"\n\t\t\tfi\n\t\telse\n\t\t\techo \" \"\n\t\t\techo \"Skipping download and creating recovery image ...\"\n\t\tfi\n\n\t\techo \" \"\n\t\techo \"Creating virtual machine with macOS - Sonoma ...\"\n\n\t\tif [ ${OSX_PLATFORM} == 'AMD' ]\n\t\tthen\n\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-amd-sonoma.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device qemu-xhci -device usb-kbd -device usb-tablet -global nec-usb-xhci.msi=off -cpu Cascadelake-Server,vendor=GenuineIntel,+invtsc,-pcid,-hle,-rtm,-avx512f,-avx512dq,-avx512cd,-avx512bw,-avx512vl,-avx512vnni,kvm=on,vmware-cpuid-freq=on' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;virtio0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - Sonoma' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--virtio0 ${STORAGECRTVM}:${SIZEDISK},cache=none,discard=on \\\n\t\t\t--ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-sonoma.iso,cache=unsafe,size=1450M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+invtsc,-pcid,-hle,-rtm,-avx512f,-avx512dq,-avx512cd,-avx512bw,-avx512vl,-avx512vnni,kvm=on,vmware-cpuid-freq=on/+invtsc,-pcid,-hle,-rtm,-avx512f,-avx512dq,-avx512cd,-avx512bw,-avx512vl,-avx512vnni,kvm=on,vmware-cpuid-freq=on -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\tif [ ${OSX_PLATFORM} == 'INTEL' ]\n\t\tthen\n\t\t\t\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-intel-sonoma.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device qemu-xhci -device usb-kbd -device usb-tablet -global nec-usb-xhci.msi=off -cpu host,kvm=on,vendor=GenuineIntel,+kvm_pv_unhalt,+kvm_pv_eoi,+hypervisor,+invtsc' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;virtio0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - Sonoma' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--virtio0 ${STORAGECRTVM}:${SIZEDISK},cache=none,discard=on \\\n\t\t\t--ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-sonoma.iso,cache=unsafe,size=1450M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+kvm_pv_eoi,+hypervisor,+invtsc/+kvm_pv_eoi,+hypervisor,+invtsc -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\techo \"Virtual machine (${VM_NAME}) created successfully.\"\n\t\techo \" \"\n\t\techo \"Access the Proxmox Web Panel to continue with the installation ...\"\n\t\techo \"https://`ip address show vmbr0 | grep -w \"inet\" | awk -F \" \" '{ print $2 }' | awk -F \"/\" '{ print $1 }'`:8006\"\n\t\techo \" \"\n\t\texit\n\tfi\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n\t## macOS Sequoia - 15\n\n\tif [ ${OPT} -eq 8 ]\n\tthen\n\t\tclear\n\t\techo \" \"\n\t\techo \"macOS Sequoia\"\n\t\techo \" \"\n\t\techo -n \"Enter the VM ID [or ENTER to automatically generate (${NEXTID})]: \"\n\t\tread VM_ID\n\n\t\tif [ -z $VM_ID ]; then VM_ID=$NEXTID; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter VM Name [or ENTER for Default: HACK-SEQUOIA]: \"\n\t\tread VM_NAME\n\n\t\tif [ -z $VM_NAME ]; then VM_NAME=\"${DEFAULT_VM_PREFIX}SEQUOIA\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Enter a disk size [INTEGER] [or ENTER for Default: 64 Gb]: \"\n\t\tread SIZEDISK\n\n\t\tif [ -z $SIZEDISK ]; then SIZEDISK=64; fi;\n\t\tif ! [[ $SIZEDISK =~ $re ]] ; then echo \"ERROR! SIZEDISK MUST HAVE INTEGER NUMBER!\"; exit; fi;\n\n\t\techo \" \"\n\t\techo \"Storages available:\"\n\t\techo \" \"\n\t\tfor stg in `pvesh get storage --noborder --noheader`\n\t\tdo\n\t\t\techo \"     - ${stg}\"\n\t\tdone\n\t\techo \" \"\n\n\t\techo -n \"Enter which storage to create the VM [or ENTER for Default: local-lvm]: \"\n\t\tread STORAGECRTVM\n\n\t\tif [ -z $STORAGECRTVM ]; then STORAGECRTVM=\"local-lvm\"; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate CPU cores [Need Power of 2] [or ENTER for Default: 4]: \"\n\t\tread PROC_COUNT\n\n\t\tif [ -z $PROC_COUNT ]; then PROC_COUNT=4; fi;\n\n\t\techo \" \"\n\t\techo -n \"Allocate RAM [MiB] [or ENTER for Default: 4096]: \"\n\t\tread RAM_SIZE\n\n\t\tif [ -z $RAM_SIZE ]; then RAM_SIZE=$DEFAULT_RAM_SIZE; fi;\n\n\t\techo \" \"\n\t\techo -n \"Do you want to download and create the recovery image? [Y/N] [or ENTER for Default: Y]: \"\n\t\tread CRTRECODISK\n\n\t\tif [ -z $CRTRECODISK ]; then CRTRECODISK=\"Y\"; fi;\n\t\t\n\t\tif [ \"${CRTRECODISK}\" == \"Y\" ] || [ \"${CRTRECODISK}\" == \"y\" ]\n\t\tthen\n\t\t\techo  \" \"\t\t\n\t\t\techo \"Downloading and creating the recovery image for installation ...\"\n\t\t\t\n\t\t\tLOGFILE=${LOGDIR}/crt-recovery-sequoia.log\n\n\t\t\tif [ ! -e ${ISODIR}/recovery-sequoia.iso ]\n\t\t\tthen\n\t\t\t\tfallocate -x -l 1450M ${TMPDIR}/recovery-sequoia.iso > ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmkfs.msdos -F 32 ${TMPDIR}/recovery-sequoia.iso -n SEQUOIA >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tLOOPDEV=`losetup -f --show ${TMPDIR}/recovery-sequoia.iso 2>> ${LOGFILE}`\n\t\t\t\tmkdir -p /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\tmount ${LOOPDEV} /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd /mnt/APPLE/ >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tpython3 ${SCRIPT_DIR}/tools/macrecovery/macrecovery.py -b Mac-7BA5B2D9E42DDD94 -m 00000000000000000 -os latest download >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tcd ${SCRIPT_DIR}\n\n\t\t\t\tumount /mnt/APPLE >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\t\trmdir /mnt/APPLE\n\t\t\t\tlosetup -d ${LOOPDEV} >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t\tmv ${TMPDIR}/recovery-sequoia.iso ${ISODIR}\n\n\t\t\t\trm -rf ${TMPDIR}\n\t\t\t\techo \"Download and recovery created successfully.\"\n\t\t\telse\n\t\t\t\techo \"Recovery image of macOS Sequoia already exists.\"\n\t\t\tfi\n\t\telse\n\t\t\techo \" \"\n\t\t\techo \"Skipping download and creating recovery image ...\"\n\t\tfi\n\n\t\techo \" \"\n\t\techo \"Creating virtual machine with macOS - Sequoia ...\"\n\n\t\tif [ ${OSX_PLATFORM} == 'AMD' ]\n\t\tthen\n\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-amd-sequoia.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device qemu-xhci -device usb-kbd -device usb-tablet -global nec-usb-xhci.msi=off -cpu Cascadelake-Server,vendor=GenuineIntel,+invtsc,-pcid,-hle,-rtm,-avx512f,-avx512dq,-avx512cd,-avx512bw,-avx512vl,-avx512vnni,kvm=on,vmware-cpuid-freq=on' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;virtio0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - Sequoia' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--virtio0 ${STORAGECRTVM}:${SIZEDISK},cache=none,discard=on \\\n\t\t\t--ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-sequoia.iso,cache=unsafe,size=1450M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+invtsc,-pcid,-hle,-rtm,-avx512f,-avx512dq,-avx512cd,-avx512bw,-avx512vl,-avx512vnni,kvm=on,vmware-cpuid-freq=on/+invtsc,-pcid,-hle,-rtm,-avx512f,-avx512dq,-avx512cd,-avx512bw,-avx512vl,-avx512vnni,kvm=on,vmware-cpuid-freq=on -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\tif [ ${OSX_PLATFORM} == 'INTEL' ]\n\t\tthen\n\t\t\t\n\t\t\tLOGFILE=${LOGDIR}/crt-vm-intel-sequoia.log\n\n\t\t\tqm create ${VM_ID} \\\n\t\t\t--agent 1 \\\n\t\t\t--args '-device isa-applesmc,osk=\"ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc\" -smbios type=2 -device qemu-xhci -device usb-kbd -device usb-tablet -global nec-usb-xhci.msi=off -cpu host,kvm=on,vendor=GenuineIntel,+kvm_pv_unhalt,+kvm_pv_eoi,+hypervisor,+invtsc' \\\n\t\t\t--autostart 0 \\\n\t\t\t--balloon 0 \\\n\t\t\t--bios ovmf \\\n\t\t\t--boot 'order=ide0;virtio0' \\\n\t\t\t--cores ${PROC_COUNT} \\\n\t\t\t--description ' Hackintosh VM - Sequoia' \\\n\t\t\t--efidisk0 ${STORAGECRTVM}:4 \\\n\t\t\t--machine q35 \\\n\t\t\t--memory ${RAM_SIZE} \\\n\t\t\t--name ${VM_NAME} \\\n\t\t\t--net0 vmxnet3,bridge=vmbr0 \\\n\t\t\t--numa 0 \\\n\t\t\t--onboot 0 \\\n\t\t\t--ostype other \\\n\t\t\t--sockets 1 \\\n\t\t\t--start 0 \\\n\t\t\t--tablet 1 \\\n\t\t\t--vga vmware \\\n\t\t\t--vmgenid 1 \\\n\t\t\t--scsihw virtio-scsi-pci \\\n\t\t\t--virtio0 ${STORAGECRTVM}:${SIZEDISK},cache=none,discard=on \\\n\t\t\t--ide0 local:iso/opencore-osx-proxmox-vm.iso,cache=unsafe,size=80M \\\n\t\t\t--ide2 local:iso/recovery-sequoia.iso,cache=unsafe,size=1450M > ${LOGFILE} 2>> ${LOGFILE}\n\n\t\t\t## Fix for QEMU 6.1 for PCI Passthrough\n\t\t\tif [ `qemu-system-x86_64 --version | grep -e \"6.1\" -e \"6.2\" -e \"7.1\" -e \"7.2\" -e \"8.0\" -e \"8.1\" -e \"9.0.2\" | wc -l` -eq 1 ]\n\t\t\tthen\n\t\t\t\tsed -i 's/+kvm_pv_eoi,+hypervisor,+invtsc/+kvm_pv_eoi,+hypervisor,+invtsc -global ICH9-LPC.acpi-pci-hotplug-with-bridge-support=off/g' /etc/pve/qemu-server/${VM_ID}.conf\n\t\t\tfi\n\n\t\tfi\n\n\t\techo \"Virtual machine (${VM_NAME}) created successfully.\"\n\t\techo \" \"\n\t\techo \"Access the Proxmox Web Panel to continue with the installation ...\"\n\t\techo \"https://`ip address show vmbr0 | grep -w \"inet\" | awk -F \" \" '{ print $2 }' | awk -F \"/\" '{ print $1 }'`:8006\"\n\t\techo \" \"\n\t\texit\n\tfi\n\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n\t## Add Promox VE NO Subscription repository\n\tif [ ${OPT} -eq 200 ]\n\tthen\n\n\t\tclear\n\n\t\tLOGFILE=${LOGDIR}/add-repo-pve-no-subscription.log\n\n\t\techo \" \"\n\t\techo \"Adding 'Promox VE NO Subscription repository' ...\"\n\t\techo \" \"\n\t\techo \"Please wait ...\"\n\t\techo \" \"\n\n\t\tif [ `pveversion | grep \"pve-manager/[7]\" | wc -l` -ne 1 ]\n\t\tthen\n\t\t\techo \"deb http://download.proxmox.com/debian/pve bullseye pve-no-subscription\" > /etc/apt/sources.list.d/pxve-no-sub.list\n\t\t\tapt update -y >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\tif [ $? -ne 0 ]; then echo \"apt update error - check log file ${LOGFILE}\"; exit; fi;\n\t\t\techo \"Promox VE NO Subscription repository has been successfully added.\"\t\n\t\t\texit\n\t\tfi\n\n\t\tif [ `pveversion | grep \"pve-manager/[8]\" | wc -l` -ne 1 ]\n\t\tthen\n\t\t\techo \"deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription\" > /etc/apt/sources.list.d/pxve-no-sub.list\n\t\t\tapt update -y >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\tif [ $? -ne 0 ]; then echo \"apt update error - check log file ${LOGFILE}\"; exit; fi;\n\t\t\techo \"Promox VE NO Subscription repository has been successfully added.\"\t\n\t\t\texit\n\t\tfi\n\n\tfi\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n\t## Update Opencore ISO\n\n\tif [ ${OPT} -eq 201 ]\n\tthen\n\n\t\tclear\n\n\t\tLOGFILE=${LOGDIR}/update-opencore-iso.log\n\n\t\techo \" \"\n\t\techo \"Copying 'opencore-osx-proxmox-vm.iso' to '/var/lib/vz/template/iso'\"\n\t\techo \" \"\n\n\t\tcd /var/lib/vz/template/iso/ > ${LOGFILE} 2>> ${LOGFILE}\n\t\trm -f opencore-osx-proxmox-vm.iso >> ${LOGFILE} 2>> ${LOGFILE}\n\t\twget https://github.com/luchina-gabriel/OSX-PROXMOX/raw/main/EFI/opencore-osx-proxmox-vm.iso >> ${LOGFILE} 2>> ${LOGFILE}\n\t\tcd ~\n\n\t\techo \"Please wait ...\"\n\t\techo \"Copy of 'opencore-osx-proxmox-vm.iso' completed!\"\n\t\techo \" \"\n\n\t\texit\n\n\tfi\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n\t## Clear ALL macOS Recovery Images\n\n\tif [ ${OPT} -eq 202 ]\n\tthen\n\n\t\tclear\n\n\t\techo \" \"\n\t\techo \"Clearing all macOS Recovery Images in '/var/lib/vz/template/iso'\"\n\t\techo \" \"\n\n\t\trm -f /var/lib/vz/template/iso/recovery-*.iso\n\t\trm -f ${LOGDIR}/crt-recovery-*.log\n\n\t\techo \"Please wait ...\"\n\t\techo \"Clear of ALL macOS Recovery Images completed!\"\n\t\techo \" \"\n\n\t\texit\n\n\tfi\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n\t## Remove Proxmox Subscription Notice\n\n\tif [ ${OPT} -eq 203 ]\n\tthen\n\n\t\tclear\n\n\t\techo \" \"\n\t\techo \"Removing Proxmox Subscription Notice...\"\n\t\techo \" \"\n\n\t\tsed -i.backup -z \"s/res === null || res === undefined || \\!res || res\\n\\t\\t\\t.data.status.toLowerCase() \\!== 'active'/false/g\" /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js && systemctl restart pveproxy.service\n\n\t\techo \"Please wait ...\"\n\t\techo \"Remove of Proxmox Subscription Notice completed!\"\n\t\techo \" \"\n\n\t\texit\n\n\tfi\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n\t## Enable macOS in Cloud (VultR Provider)\n\n\tif [ ${OPT} -eq 204 ]\n\tthen\n\n\t\tclear\n\n\t\tLOGFILE=${LOGDIR}/activate-macOS-in-cloud-vultr.log\n\n\t\techo \" \"\n\t\techo \"Enabling macOS in Cloud (VultR Provider)\"\n\t\techo \" \"\n\t\techo \"Please wait ...\"\n\t\techo \" \"\n\n\t\techo -e \"\\n## Interface for VMs \\nauto vmbr1\n\t\tiface vmbr1 inet static\n\t\t        address  192.168.1.1\n\t\t        netmask  255.255.255.0\n\t\t        bridge_ports none\n\t\t        bridge_stp off\n\t\t        bridge_fd 0\n\t\t\\n        \n\t\tpost-up echo 1 > /proc/sys/net/ipv4/ip_forward\n\t\tpost-up   iptables -t nat -A POSTROUTING -s '192.168.1.0/24' -o vmbr0 -j MASQUERADE\n\t\tpost-down iptables -t nat -D POSTROUTING -s '192.168.1.0/24' -o vmbr0 -j MASQUERADE\" >> /etc/network/interfaces\n\n\t\tifup vmbr1 >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\tapt -y update >> ${LOGFILE} 2>> ${LOGFILE}\n\t\tapt -y install sysstat net-tools isc-dhcp-server >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\tsed -i 's/INTERFACESv4=\"\"/INTERFACESv4=\"vmbr1\"/g' /etc/default/isc-dhcp-server\n\n\t\tcp /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.conf.backup\n\n\t\techo 'subnet 192.168.1.0 netmask 255.255.255.0 {\n\t\t  range 192.168.1.10 192.168.1.100;\n\t\t  option routers 192.168.1.1;\n\t\t  option subnet-mask 255.255.255.0;\n\t\t  default-lease-time 600;\n\t\t  max-lease-time 7200;\n\t\t  ddns-update-style none;\n\t\t  authoritative;\n\t\t  option domain-name-servers 8.8.8.8,8.8.4.4;\n\t\t  option domain-name \"local\";\n\t\t}' > /etc/dhcp/dhcpd.conf\n\n\t\techo \" \"\n\t\techo \"Enable of macOS in Cloud (VultR Provider) completed!\"\n\t\techo \" \"\n\t\techo \"Your server are reboot in 5s\"\n\n\t\tsleep 5s && reboot\n\n\tfi\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n\t## Customize Opencore config.plist\n\n\tif [ ${OPT} -eq 205 ]\n\tthen\n\n\t\tclear\n\n\t\tLOGFILE=${LOGDIR}/custom-oc-config.plist.log\n\n\t\techo \" \"\n\t\techo \"Customize Opencore config.plist\"\n\t\techo \" \"\n\n\t\tLOOPDEV=`losetup -f --show -P ${ISODIR}/opencore-osx-proxmox-vm.iso 2>> ${LOGFILE}`\n\n\t\tmkdir -p /mnt/opencore > ${LOGFILE} 2>> ${LOGFILE}\n\t\tmount ${LOOPDEV}p1 /mnt/opencore >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\tif [ ! -e /mnt/opencore/EFI/OC/config.plist.backup ]\n\t\tthen\n\t\t\tcp -v /mnt/opencore/EFI/OC/config.plist /mnt/opencore/EFI/OC/config.plist.backup >> ${LOGFILE} 2>> ${LOGFILE}\n\t\tfi\n\n\t\tPREV_LANG=`grep -E '..-..:0' /mnt/opencore/EFI/OC/config.plist | sed -e 's/.*\\(..-..\\).*/\\1/'`\n\t\tBOOT_ARGS=`grep '<key>boot-args' /mnt/opencore/EFI/OC/config.plist -A1 | tail -n1 | sed -e 's/.*>\\(.*\\)<.*/\\1/'`\n\t\tTIMEOUT=`grep -A1 '>Timeout<' /mnt/opencore/EFI/OC/config.plist | tail -n1 | sed -e 's/.*>\\(.*\\)<.*/\\1/'`\n\n\t\techo \" \"\n\t\techo -n \"Enter language-country code [or ENTER to keep the current one (${PREV_LANG})]: \"\n\t\tread NEW_PREV_LANG\n\t\tif [ -z ${NEW_PREV_LANG} ]; then NEW_PREV_LANG=${PREV_LANG}; fi;\n\t\tsed -i -e \"s/..-..:0/${NEW_PREV_LANG}:0/\" /mnt/opencore/EFI/OC/config.plist >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\techo \" \"\n\t\techo -n \"Enter boot-args [or ENTER to keep the current one (${BOOT_ARGS})]: \"\n\t\tread NEW_BOOT_ARGS\n\t\tif [ -z \"${NEW_BOOT_ARGS}\" ]; then NEW_BOOT_ARGS=${BOOT_ARGS}; fi;\n\t\tsed -i -e \"s/${BOOT_ARGS}/${NEW_BOOT_ARGS}/\" /mnt/opencore/EFI/OC/config.plist >> ${LOGFILE} 2>> ${LOGFILE}\n\n\t\techo \" \"\n\t\techo -n \"Remove csr-active-config (unlock SIP configuration) [Y/N] [or ENTER for Default: N]: \"\n\t\tread RM_CSR_LOCK\n\t\tif [ -z ${RM_CSR_LOCK} ]; then RM_CSR_LOCK=\"N\"; fi;\n\n\t\tif [ \"${RM_CSR_LOCK}\" == \"Y\" ] || [ \"${RM_CSR_LOCK}\" == \"y\" ]\n\t\tthen\n\t\t\techo \"--- a/mnt/opencore/EFI/OC/config.plist\t2023-01-25 22:43:16.000000000 +0100\n+++ b/mnt/opencore/EFI/OC/config.plist\t2023-01-25 22:45:24.000000000 +0100\n@@ -450,2 +450,0 @@\n-\t\t\t\t<key>csr-active-config</key>\n-\t\t\t\t<data>AAAAAA==</data>\n\" > ${TMPDIR}/rm-csr-lock.patch\n\t\t\tcd /\n\t\t\tpatch -p1 < /root/OSX-PROXMOX/tmp/rm-csr-lock.patch >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\tcd ${SCRIPT_DIR}\n\t\t\trm -f ${TMPDIR}/rm-csr-lock.patch\n\t\t\techo \"Now you can use \\`csrutil disable\\` and \\`csrutil authenticated-root disable\\` in Recovery OS to disable SIP!\"\n\t\tfi\n\n\t\techo \" \"\n\t\techo -n \"Enter timeout [or ENTER to keep the current one (${TIMEOUT} seconds)]: \"\n\t\tread NEW_TIMEOUT\n\t\tif [ -z ${NEW_TIMEOUT} ]; then NEW_TIMEOUT=${TIMEOUT}; fi;\n\n\t\tif [ ${NEW_TIMEOUT} -ne ${TIMEOUT} ]\n\t\tthen\n\t\t\techo \"--- a/mnt/opencore/EFI/OC/config.plist\t2023-01-25 22:43:16.000000000 +0100\n+++ b/mnt/opencore/EFI/OC/config.plist\t2023-01-25 22:45:24.000000000 +0100\n@@ -363,7 +363,7 @@\n \t\t\t<key>TakeoffDelay</key>\n \t\t\t<integer>0</integer>\n \t\t\t<key>Timeout</key>\n-\t\t\t<integer>${TIMEOUT}</integer>\n+\t\t\t<integer>${NEW_TIMEOUT}</integer>\n \t\t</dict>\n \t\t<key>Debug</key>\n \t\t<dict>\n\" > ${TMPDIR}/timeout.patch\n\t\t\tcd /\n\t\t\tpatch -p1 < /root/OSX-PROXMOX/tmp/timeout.patch >> ${LOGFILE} 2>> ${LOGFILE}\n\t\t\tcd ${SCRIPT_DIR}\n\t\t\trm -f ${TMPDIR}/timeout.patch\n\t\tfi\n\n\t\tdiff -u --color /mnt/opencore/EFI/OC/config.plist.backup /mnt/opencore/EFI/OC/config.plist\n\n\t\tumount /mnt/opencore >> ${LOGFILE} 2>> ${LOGFILE}\n\t\trmdir /mnt/opencore\n\t\tlosetup -d ${LOOPDEV} >> ${LOGFILE} 2>> ${LOGFILE}\n\tfi\n\n\texit\n\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n################################################################################################################################################################################################\n\n\t## Option for QUIT PROGRAM\n\tif [ ${OPT} -eq 0 ]\n\tthen\n\t\texit\n\tfi\n\ndone\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}