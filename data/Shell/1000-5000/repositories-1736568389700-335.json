{
  "metadata": {
    "timestamp": 1736568389700,
    "page": 335,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "srvrco/getssl",
      "stars": 2124,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1533203125,
          "content": "# http://EditorConfig.org\n\nroot = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2568359375,
          "content": "# Files not to include in .zip/.tar.gz archives\n#\n.git*           export-ignore\n\n# Handle line endings automatically for files detected as text\n# and leave all files detected as binary untouched.\n* text=auto\n\n# Make all text files lf formatted\n*     text eol=lf\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0888671875,
          "content": "*~\n*#\n*.swp\n*.tmp\n*.bak\n*.tdy\n*.tar.gz\n*.orig\nJSON.sh\n.vscode/settings.json\npush.json\nbin/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.939453125,
          "content": "# How to contribute\n\nIf you are happy writing in bash, please create a PR for any changes\nyou'd like to see included (or bug fixes).\n\nIf you aren't happy writing in bash, please open an issue with as much\ndetail as possible about the issue or what you'd like to see added /\nimproved.\n\n## Submitting changes\n\nPlease update the 'revision history' and version number at the top of\nthe code (without this I can't easily do a merge)\n\nPlease update just one issue per PR. If there are multiple issues,\nplease provide separate PR's one per issue.\n\n## Coding conventions\n\nPlease see the guidelines at <https://github.com/srvrco/getssl/wiki/Bash-Style-guide>\n\n## Testing\n\nPlease test with [shellcheck](https://github.com/koalaman/shellcheck),\nalthough this will also be tested on github (via travis) on all PRs.\n\nPlease remember that the system is used across a wide range of\nplatforms, so if you have access to multiple operating systems, please\ntest on all.\n\nThanks :)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.9814453125,
          "content": "# Copyright (c) 2016 Karol Babioch <karol@babioch.de>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\ninstall:\n\nifneq ($(strip $(DESTDIR)),)\n\tmkdir -p $(DESTDIR)\nendif\n\n\tinstall -Dvm755 getssl $(DESTDIR)/usr/bin/getssl\n\tinstall -dvm755 $(DESTDIR)/usr/share/getssl\n\tfor dir in *_scripts; do install -dv $(DESTDIR)/usr/share/getssl/$$dir; install -pv $$dir/* $(DESTDIR)/usr/share/getssl/$$dir/; done\n\n.PHONY: install\n\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 48.01953125,
          "content": "\n# GETSSL\n\n[Run all tests] [shellcheck]\n\nObtain SSL certificates from the letsencrypt.org ACME server. Suitable\nfor automating the process on remote servers.\n\nTable of Contents\n\n- Upgrade broken in v2.43\n- Features\n- Overview\n- Quick Start Guide\n- Manual Installation\n- Getting started\n- Detailed guide to getting started with more examples\n- Wildcard certificates\n- ISPConfig\n- Automating updates\n- Structure\n- Server-Types\n- Revoke a certificate\n- Elliptic curve keys\n- Preferred Chain\n- Include Root certificate in full chain\n- Windows Server and IIS Support\n- Building getssl as an RPM Package (Redhat/CentOS/SuSe/Oracle/AWS)\n- Building getssl as a Debian Package (Debian/Ubuntu)\n- Issues / problems / help\n\nUpgrade broken in v2.43\n\nThe automatic upgrade in v2.43 is broken as the url is incorrect. If you\nhave this version installed you’ll need to manually upgrade using:\ncurl --silent --user-agent getssl/manual <https://raw.githubusercontent.com/srvrco/getssl/latest/getssl> --output getssl\n\nFeatures\n\n- BASH - It runs on virtually all unix machines, including BSD, most\n    Linux distributions, macOS.\n- GET CERTIFICATES FOR REMOTE SERVERS - The tokens used to provide\n    validation of domain ownership, and the certificates themselves can\n    be automatically copied to remote servers (via ssh, sftp or ftp for\n    tokens). The script doesn’t need to run on the server itself. This\n    can be useful if you don’t have access to run such scripts on the\n    server itself, e.g. if it’s a shared server.\n- RUNS AS A DAILY CRON - so certificates will be automatically renewed\n    when required.\n- AUTOMATIC CERTIFICATE RENEWALS\n- CHECKS CERTIFICATES ARE CORRECTLY LOADED - After installation of a\n    new certificate it will test the port specified ( see Server-Types\n    for options ) that the certificate is actually being used correctly.\n- AUTOMATICALLY UPDATES - The script can automatically update itself\n    with bug fixes etc if required.\n- EXTENSIVELY CONFIGURABLE - With a simple configuration file for each\n    certificate it is possible to configure it exactly for your needs,\n    whether a simple single domain or multiple domains across multiple\n    servers on the same certificate.\n- SUPPORTS HTTP AND DNS CHALLENGES - Full ACME implementation\n- SIMPLE AND EASY TO USE\n- DETAILED DEBUG INFO - Whilst it shouldn’t be needed, detailed debug\n    information is available.\n- RELOAD SERVICES - After a new certificate is obtained then the\n    relevant services (e.g. apache/nginx/postfix) can be reloaded.\n- ACME V1 AND V2 - Supports both ACME versions 1 and 2 (note ACMEv1 is\n    deprecated and clients will automatically use v2)\n\nOverview\n\nGetSSL was written in standard bash ( so it can be run on a server, a\ndesktop computer, or even a virtualbox) and add the checks, and\ncertificates to a remote server ( providing you have a ssh with key,\nsftp or ftp access to the remote server).\n\n```getssl -h getssl ver. 2.36 Obtain SSL certificates from the\nletsencrypt.org ACME server\n\nUsage: getssl [-h|–help] [-d|–debug] [-c|–create] [-f|–force] [-a|–all]\n[-q|–quiet] [-Q|–mute] [-u|–upgrade] [-X|–experimental tag]\n[-U|–nocheck] [-r|–revoke cert key] [-w working_dir] [–preferred-chain\nchain] domain\n\nOptions: -a, –all Check all certificates -d, –debug Output debug\ninformation -c, –create Create default config files -f, –force Force\nrenewal of cert (overrides expiry checks) -h, –help Display this help\nmessage and exit -i, –install Install certificates and reload service\n-q, –quiet Quiet mode (only outputs on error, success of new cert, or\ngetssl was upgraded) -Q, –mute Like -q, but also mute notification about\nsuccessful upgrade -r, –revoke “cert” “key” [CA_server] Revoke a\ncertificate (the cert and key are required) -u, –upgrade Upgrade getssl\nif a more recent version is available - can be used with or without\ndomain(s) -X –experimental tag Allow upgrade to a specified version of\ngetssl -U, –nocheck Do not check if a more recent version is available\n-v –version Display current version of getssl -w working_dir “Working\ndirectory” –preferred-chain “chain” Use an alternate chain for the\ncertificate ```\n\n\nQuick Start Guide\n\nYou can download precompiled RPM packages and Debian (DEB) packages from\nthe release page for this project, or you can manually build and install\nthe program from the git sources.\n\nIf you want to manually install the program from scratch with the git\nsources rather than use the pre-compiled RPMS and DEB packages, or if\nyour target platform does not support Linux RPM or DEB packages, then\nplease skip to the section Manual Installation for instructions on\ninstalling the getssl program manually.\n\nPackages are provided in binary and source versions, and can be\ndownloaded and installed directly or rebuilt. Package types are Red Hat\nPackage Manager (RPM) packages and Debian (DEB) packages for binary\ninstallation and Source RPM packages (SRPMS) and Debbuild SDEB packages\nfor source code installation.\n\nRPM and DEB packages for each release include a binary architecture\nspecific package and a source package which can be downloaded and\nbuilt/rebuilt and which contains the source code.\n\nFor example, the release v2.47 contains the following packages in the\nrelease section:\n\nRPM BASED PACKAGES (REDHAT, CENTOS, SUSE, ORACLE LINUX, AWS LINUX)\n\n-   getssl-2.47-1.src.rpm (source)\n-   getssl-2.47-1.noarch.rpm (binary)\n\nDEBIAN BASED PACKAGES (DEBIAN, UBUNTU)\n\n-   getssl-2.47-1.sdeb (source)\n-   getssl_2.47-1_all.deb (binary)\n\nINSTALLING BINARY PACKAGES\n\nTo install the binary package with the rpm package manager for RedHat,\nCentOS, SuSe, Oracle Linux, or AWS Linux distributions:\n\n    rpm -i getssl-2.47-1.noarch.rpm\n\nTo deinstall the RPM binary package:\n\n    rpm -e getssl\n\nTo install the binary package with the Debian dpkg package manager for\nDebian and Ubuntu Linux distributions:\n\n    dpkg -i getssl_2.47-1_all.deb\n\nTo deinstall the Debian dpkg binary package:\n\n    dpkg -r getssl\n\nINSTALLING SOURCE PACKAGES\n\nTo install the source package with the rpm package manager for RedHat,\nCentOS, SuSe, Oracle Linux, or AWS Linux distributions:\n\n    rpm -i getssl-2.47-1.src.rpm\n\n_(Note: rpm installs the source code files in /root/rpmbuild/ as top\ndirectory for RedHat, CentOS, Oracle Linux, and AWS Linux platforms.\nSuSe platforms install the source code files in /usr/src/packages/)_\n\nTo install the source package with the Debbuild package tool for Debian\nor Ubuntu Linux distributions:\n\n    debbuild -i getssl-2.47-1.sdeb\n\n_(Note: Debbuild installs the source code files in /root/debbuild/ as\ntop directory)_\n\nOne item of note is that SDEB packages are actually just tar.gz archives\nrenamed with an .sdeb file extension with the files organized into a\nSPECS and SOURCES directory tree structure. Subsequently, an SDEB can\nalso be extracted and installed with the TAR -XVF COMMAND or the files\nlisted with the TAR -TVF COMMAND:\n\n    [root@localhost getssl]$ tar -tvf /root/debbuild/SDEBS/getssl-2.47-1.sdeb\n    -rw-r--r-- root/root   1772110 2022-10-12 20:42 SOURCES/getssl-2.47.tar.gz\n    -rw-r--r-- root/root       192 2022-08-02 15:02 SOURCES/getssl.crontab\n    -rw-r--r-- root/root       126 2022-08-02 15:02 SOURCES/getssl.logrotate\n    -rw-r--r-- root/root      1537 2022-08-02 15:02 SPECS/getssl.spec\n    [root@localhost getssl]$\n\nFor building or rebuilding RPMS or DEB Packages after you have installed\nthe associated source packages on your platform, refer to the following:\n\n-   Building getssl as an RPM Package (Redhat/CentOS/SuSe/Oracle/AWS)\n-   Building getssl as a Debian Package (Debian/Ubuntu)\n\n\nManual Installation\n\nSince the script is only one file, you can use the following command for\na quick installation of GetSSL only:\n\n    curl --silent https://raw.githubusercontent.com/srvrco/getssl/latest/getssl > getssl ; chmod 700 getssl\n\nThis will copy the getssl Bash script to the current location and change\nthe permissions to make it executable for you.\n\nFor a more comprehensive installation (e.g. install also helper scripts)\nuse the provided Makefile with each release tarball. Use the install\ntarget.\n\nYou’ll find the latest version in the git repository:\n\n    git clone https://github.com/srvrco/getssl.git\n\nFor Arch Linux there are packages in the AUR, see here and there.\n\nIf you use puppet, there is a GetSSL Puppet module by dthielking\n\n\nGetting started\n\nOnce you have obtained the script (see Installation above), the next\nstep is to use\n\n    ./getssl -c yourdomain.com\n\nwhere yourdomain.com is the primary domain name that you want to create\na certificate for. This will create the following folders and files.\n\n    ~/.getssl\n    ~/.getssl/getssl.cfg\n    ~/.getssl/yourdomain.com\n    ~/.getssl/yourdomain.com/getssl.cfg\n\nYou can then edit ~/.getssl/getssl.cfg to set the values you want as the\ndefault for the majority of your certificates.\n\nThen edit ~/.getssl/yourdomain.com/getssl.cfg to have the values you\nwant for this specific domain (make sure to uncomment and specify\ncorrect ACL option, since it is required).\n\nYou can then just run:\n\n    getssl yourdomain.com\n\nand it should run, providing output like:\n\n    Registering account\n    Verify each domain\n    Verifying yourdomain.com\n    Verified yourdomain.com\n    Verifying www.yourdomain.com\n    Verified www.yourdomain.com\n    Verification completed, obtaining certificate.\n    Certificate saved in /home/user/.getssl/yourdomain.com/yourdomain.com.crt\n    The intermediate CA cert is in /home/user/.getssl/yourdomain.com/chain.crt\n    copying domain certificate to ssh:server5:/home/yourdomain/ssl/domain.crt\n    copying private key to ssh:server5:/home/yourdomain/ssl/domain.key\n    copying CA certificate to ssh:server5:/home/yourdomain/ssl/chain.crt\n    reloading SSL services\n\nTHIS WILL (BY DEFAULT) USE THE STAGING SERVER, SO SHOULD GIVE YOU A\nCERTIFICATE THAT ISN’T TRUSTED ( FAKE LET’S ENCRYPT). Change the server\nin your config file to get a fully valid certificate.\n\nNOTE: Verification is done via port 80 (http), port 443 (https) or dns.\nThe certificate can be used (and checked with getssl) on alternate\nports.\n\n\nDetailed guide to getting started with more examples\n\nGuide to getting a certificate for example.com and www.example.com\n\n\nWildcard certificates\n\ngetssl supports creating wildcard certificates, i.e. __.example.com_\nwhich allows a single certificate to be used for any domain under\n_example.com_, e.g. _www.example.com_, _mail.example.com*. These must be\nvalidated using the dns-01 method.\n\nA _partial_ example getssl.cfg file is:\n\n    VALIDATE_VIA_DNS=true\n    export CPANEL_USERNAME=''\n    export CPANEL_URL='https://www.cpanel.host:2083'\n    export CPANEL_APITOKEN='1ABC2DEF3GHI4JKL5MNO6PQR7STU8VWX9YZA'\n    DNS_ADD_COMMAND=/home/root/getssl/dns_scripts/dns_add_cpanel\n    DNS_DEL_COMMAND=/home/root/getssl/dns_scripts/dns_del_cpanel\n\n\nISPConfig\n\nThere is a need to create a remote user in ISPConfig to enable the\nremote API access.\n\nYou need to go to System -> Remote Users and then enable the features\nfor the remote user such as DNS zone functions.\n\nPHP is required to exeucte soap functions in file ispconfig_soap.php.\n\n    DNS_ADD_COMMAND=\"/home/root/getssl/dns_scripts/dns_add_ispconfig\"\n    DNS_DEL_COMMAND=\"/home/root/getssl/dns_scripts/dns_del_ispconfig\"\n\n    export ISPCONFIG_REMOTE_USER_NAME=\"ussename\"\n    export ISPCONFIG_REMOTE_USER_PASSWORD=\"password\"\n    export ISPCONFIG_SOAP_LOCATION=\"https://localhost:8080/remote/index.php\"\n    export ISPCONFIG_SOAP_URL=\"https://localhost:8080/remote/\"\n\nCreate the wildcard certificate (need to use quotes to prevent\nglobbing):\n\n    getssl \"*.example.domain\"\n\nYou can renew the certificate using getssl -a to renew all configured\ncertificates.\n\nYou can also specify additional domains in the SANS line, e.g.\nSANS=\"www.test.example.com\". This cannot contain any of the domains\nwhich would be covered by the wildcard certificate.\n\n\nAutomating updates\n\nI use the following CRON job\n\n    23  5 * * * /root/scripts/getssl -u -a -q\n\nThe cron will automatically update getssl and renew any certificates,\nonly giving output if there are issues / errors.\n\n-   The -u flag updates getssl if there is a more recent version\n    available.\n-   The -a flag automatically renews any certificates that are due for\n    renewal.\n-   The -q flag is “quiet” so that it only outputs and emails me if\n    there was an error / issue.\n\n\nStructure\n\nThe design aim was to provide flexibility in running the code. The\ndefault working directory is ~/.getssl (which can be modified via the\ncommand line).\n\nWithin the WORKING DIRECTORY is a config file getssl.cfg which is a\nsimple bash file containing variables, an example of which is:\n\n    # Uncomment and modify any variables you need\n    # The staging server is best for testing (hence set as default)\n    CA=\"https://acme-staging-v02.api.letsencrypt.org\"\n    # This server issues full certificates, however has rate limits\n    #CA=\"https://acme-v02.api.letsencrypt.org\"\n\n    AGREEMENT=\"https://letsencrypt.org/documents/LE-SA-v1.0.1-July-27-2015.pdf\"\n\n    # Set an email address associated with your account - generally set at account level rather than domain.\n    ACCOUNT_EMAIL=\"me@example.com\"\n    ACCOUNT_KEY_LENGTH=4096\n    ACCOUNT_KEY=\"/home/user/.getssl/account.key\"\n    PRIVATE_KEY_ALG=\"rsa\"\n\n    # The time period within which you want to allow renewal of a certificate - this prevents hitting some of the rate limits.\n    RENEW_ALLOW=\"30\"\n\n    # openssl config file.  The default should work in most cases.\n    SSLCONF=\"/usr/lib/ssl/openssl.cnf\"\n\nthen, within the WORKING DIRECTORY there will be a folder for each\ncertificate (based on its domain name). Within that folder will be a\nconfig file (again called getssl.cfg). An example of which is:\n\n    # Uncomment and modify any variables you need\n    # see https://github.com/srvrco/getssl/wiki/Config-variables for details\n    # see https://github.com/srvrco/getssl/wiki/Example-config-files for example configs\n    #\n    # The staging server is best for testing\n    #CA=\"https://acme-staging-v02.api.letsencrypt.org\"\n    # This server issues full certificates, however has rate limits\n    #CA=\"https://acme-v02.api.letsencrypt.org\"\n\n    #AGREEMENT=\"https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf\"\n\n    PRIVATE_KEY_ALG=\"rsa\"\n\n    # Additional domains - this could be multiple domains / subdomains in a comma separated list\n    SANS=\"www.example.org\"\n\n    # Acme Challenge Location. The first line for the domain, the following ones for each additional domain.\n    # If these start with ssh: then the next variable is assumed to be the hostname and the rest the location.\n    # An ssh key will be needed to provide you with access to the remote server.\n    # Optionally, you can specify a different userid for ssh/scp to use on the remote server before the @ sign.\n    # If left blank, the username on the local server will be used to authenticate against the remote server.\n    # If these start with ftp: then the next variables are ftpuserid:ftppassword:servername:ACL_location\n    # These should be of the form \"/path/to/your/website/folder/.well-known/acme-challenge\"\n    # where \"/path/to/your/website/folder/\" is the path, on your web server, to the web root for your domain.\n    #ACL=('/var/www/${DOMAIN}/web/.well-known/acme-challenge'\n    #     'ssh:server5:/var/www/${DOMAIN}/web/.well-known/acme-challenge'\n    #     'ssh:sshuserid@server5:/var/www/${DOMAIN}/web/.well-known/acme-challenge'\n    #     'ftp:ftpuserid:ftppassword:${DOMAIN}:/web/.well-known/acme-challenge')\n\n\n    # Location for all your certs, these can either be on the server (so full path name) or using ssh as for the ACL\n    DOMAIN_CERT_LOCATION=\"ssh:server5:/etc/ssl/domain.crt\"\n    DOMAIN_KEY_LOCATION=\"ssh:server5:/etc/ssl/domain.key\"\n    #CA_CERT_LOCATION=\"/etc/ssl/chain.crt\"\n    #DOMAIN_CHAIN_LOCATION=\"\" this is the domain cert and CA cert\n    #DOMAIN_PEM_LOCATION=\"\" this is the domain_key. domain cert and CA cert\n\n\n    # The command needed to reload apache / nginx or whatever you use.\n    # Several (ssh) commands may be given using a bash array:\n    # RELOAD_CMD=('ssh:sshuserid@server5:systemctl reload httpd' 'logger getssl for server5 efficient.')\n    RELOAD_CMD=\"service apache2 reload\"\n\n    # Define the server type. This can be https, ftp, ftpi, imap, imaps, pop3, pop3s, smtp,\n    # smtps_deprecated, smtps, smtp_submission, xmpp, xmpps, ldaps or a port number which\n    # will be checked for certificate expiry and also will be checked after\n    # an update to confirm correct certificate is running (if CHECK_REMOTE) is set to true\n    #SERVER_TYPE=\"https\"\n    #CHECK_REMOTE=\"true\"\n\nIf a location for a file starts with ssh: it is assumed the next part of\nthe file is the hostname, followed by a colon, and then the path. Files\nwill be securely copied using scp, and it assumes that you have a key on\nthe server (for passwordless access). You can set the user, port etc for\nthe server in your .ssh/config file.\n\nIf an ACL starts with ftp: or sftp: it as assumed that the line is in\nthe format “ftp:UserID:Password:servername:/path/to/acme-challenge”.\nsftp requires sshpass. Note: FTP can be used for copying tokens only and\ncan NOT be used for uploading private key or certificates as it’s not a\nsecure method of transfer.\n\nssh can also be used for the reload command if using on remote servers.\n\nMultiple locations can be defined for a file by separating the locations\nwith a semi-colon.\n\nA typical config file for example.com and www.example.com on the same\nserver would be:\n\n    # uncomment and modify any variables you need\n    # The staging server is best for testing\n    CA=\"https://acme-staging-v02.api.letsencrypt.org\"\n    # This server issues full certificates, however has rate limits\n    #CA=\"https://acme-v02.api.letsencrypt.org\"\n\n    # additional domains - this could be multiple domains / subdomains in a comma separated list\n    SANS=\"www.example.com\"\n\n    #Acme Challenge Location.   The first line for the domain, the following ones for each additional domain\n    ACL=('/var/www/example.com/web/.well-known/acme-challenge')\n\n    USE_SINGLE_ACL=\"true\"\n\n    DOMAIN_CERT_LOCATION=\"/etc/ssl/example.com.crt\"\n    DOMAIN_KEY_LOCATION=\"/etc/ssl/example.com.key\"\n    CA_CERT_LOCATION=\"/etc/ssl/example.com.bundle\"\n\n    RELOAD_CMD=\"service apache2 reload\"\n\n\nServer-Types\n\nOpenSSL has built-in support for getting the certificate from a number\nof SSL services these are available in getssl to check if the\ncertificate is installed correctly\n\n  Server-Type        Port   Extra\n  ------------------ ------ --------------\n  https              443\n  ftp                21     FTP Explicit\n  ftpi               990    FTP Implicit\n  imap               143    StartTLS\n  imaps              993\n  pop3               110    StartTLS\n  pop3s              995\n  smtp               25     StartTLS\n  smtps_deprecated   465\n  smtps              587    StartTLS\n  smtp_submission    587    StartTLS\n  xmpp               5222   StartTLS\n  xmpps              5269\n  ldaps              636\n  port number\n\n\nRevoke a certificate\n\nIn general revoking a certificate is not required.\n\nUsage: getssl -r path/to/cert path/to/key [CA_server]\n\nYou need to specify both the certificate you want to revoke, and the\naccount or private domain key which was used to sign / obtain the\noriginal certificate. The CA_server is an optional parameter and\ndefaults to Let’s Encrypt (“https://acme-v02.api.letsencrypt.org”) as\nthat is currently the only Certificate Authority using the ACME\nprotocol.\n\n\nElliptic curve keys\n\nYou can use Elliptic curve keys for both the account key and the domain\nkey (different of course, don’t use the same key for both). prime256v1\n(NIST P-256) and secp384r1 (NIST P-384) are both fully supported.\nsecp521r1 (NIST P-521) is included in the code, but not currently\nsupported by Let’s Encrypt).\n\n\nPreferred Chain\n\nIf a CA offers multiple chains then it is possible to select which chain\nis used by using the PREFERRED_CHAIN variable in getssl.cfg or\nspecifying --preferred-chain in the call to getssl\n\nThis uses wildcard matching so requesting “X1” returns the first\ncertificate returned by the CA which contains the text “X1”, Note you\nmay need to escape any characters which special characters, e.g.\nPREFERRED_CHAIN=\"\\(STAGING\\) Doctored Durian Root CA X3\"\n\n-   Staging options are: “(STAGING) Doctored Durian Root CA X3” and\n    “(STAGING) Pretend Pear X1”\n-   Production options are: “ISRG Root X1” and “ISRG Root X2”\n\n\nInclude Root certificate in full chain\n\nSome servers, including those that use Java keystores, will not accept a\nserver certificate if it cannot valid the full chain of signers.\n\nSpecifically, Nutanix Prism (Element and Central) will not accept the\nfullchain.crt until the root CA’s certificate has been appended to it\nmanually.\n\nIf your application requires the full chain, i.e. including the root\ncertificate of the CA, then this can be included in the fullchain.crt\nfile by adding the following line to getssl.cfg\n\n    FULL_CHAIN_INCLUDE_ROOT=\"true\"\n\n\nWindows Server and IIS Support\n\nSYSTEM AND SOFTWARE REQUIREMENTS:\n\n-   Windows Server with DNS and IIS services\n\n-   One of\n\n    -   WSL Windows Sub for Linux\n\n        -   Ubuntu or any other distro\n\n        -   gettssl can be installed inside WSL or using /mnt/ path to\n            windows\n\n    -   Bash - gettssl should be installed in Windows\n\n        -   Git Bash - https://git-scm.com/downloads\n\n        -   Rtools4.0 - https://cran.r-project.org/bin/windows/Rtools/\n\nWSL\n\n-   Installing and configuring WSL 2\n\n    -   Add remove Windows features and choose “Windows for sub Linux”\n\n    -   Install a distro like Ubuntu or any other Linux platform\n\n        -   If newly added to the system a reboot is required to\n            continue\n\n        -   wsl –install -d ubuntu\n\n        -   Any user will work\n\n        -   Copying files to WSL\n\n            -   From Windows open Windows Explorer and browse to\n                \\\\wsl$\\Ubuntu\\home\\user\\ and then place the getssl files\n                and folders .getssl and getssl into users home directory\n                \\\\wsl$\\Ubuntu\\home\\user\\.getssl . or in Windows\n\n        -   Open cmd in Widnows and type\n            wsl -d Ubuntu /bin/bash /home/UserName/getssl/getssl domain.eu && exit\n\n        -   Using a specific distro if not set as default in WSL then\n            use the wsl -d distro command\n\n    NOTES:\n\n    -   While configuring WSL please do check the /etc/hosts file if the\n        IP of the domain is correct since it overrides the DNS server.\n\n    -   Make sure running version 2.\n\nGIT BASH - MINGW64_NT\n\n-   Install git GIT Bash\n\n-   \"C:\\Program Files\\Git\\bin\\bash.exe\" --login -i -- path_to/getssl/getssl domain.eu\n\nRTOOLS BASH - MSYS_NT\n\n-   Make sure that the path of \\rtools42\\usr\\bin in Windows system\n    environment variables is right before c:\\windows\\system32\\ so that\n    getssl will use the Rtools applications instead of Windows\n    applications such as sort.exe that crashes or speify full path to\n    sort.\n\n-   \\rtools42\\usr\\bin\\bash.exe \\Users\\Administrator\\getssl\\getssl domain.eu 2>&1 1>out.txt\n\nUPDATING DNS TXT RECORDS\n\n-   Using PowerShell to add and delete _acme-challenge records\n\n    -   dns_add_windows_dnsserver\n\n    -   dns_del_windows_dnsserver\n\n    NOTES: The script supports optional second level TLDs.\n    sub.domain.co.uk You can update the reqexp .(co|com).uk to fit your\n    needs.\n\nIIS INTERNET INFORMATION SERVICE\n\n-   Under folder other_scripts you can find a PowerSheell script\n    iis_install_certeficate.ps1 which generates PFX certificate to be\n    installed in IIS and binds the domains to the PFX certificate.\n\n-   WSL\n\n    -   RELOAD_CMD=(\"powershell.exe -ExecutionPolicy Bypass -File \"\\\\\\\\wsl$\\\\Ubuntu\\\\home\\\\user\\\\getssl\\\\other_scripts\\\\iis_install_certeficate.ps1\" \"domain.eu\" \"IIS SiteName\" \"\\\\\\\\wsl$\\\\Ubuntu\\\\home\\\\user\\\\ssl\\\\\" \"path_to_ssl_dir\" )\n\n-   GIT and Rtools4 Bash\n\n    -   RELOAD_CMD=(\"powershell.exe /c/Users/Administrator/getssl/other_scripts/iis_install_certeficate.ps1 domain.eu domain path_to_ssl_dir\")\n\n\nBuilding as an RPM Package\n\nIn order to build getssl as an RPM, the program must be compressed into\na tar.gz file and the tar.gz file named to match the versioning\ninformation contained in the associated .spec file.\n\nSpec files are special files which contain instructions on how to build\na particular package from a source code archive. On Red Hat, CentOS,\nOracle Linux, and AWS Linux systems, RPMS are built in the\n/root/rpmbuild/ top directory. SuSe systems build RPMS in the\n/usr/src/packages/ as top directory. These “top directories” will\ncontain BUILD, BUILDROOT, SPECS, RPMS, SRPMS, and SOURCES\nsubdirectories.\n\nThe SPECS directory contains the *.spec files used to build RPMS and\nSRPMS packages. The SOURCES subdirectory will contain the soure code\narchive file referred to in the *.spec file used to build the RPM\npackage.\n\nSee the Quick Start Guide on instructions for installing the source rpm\nwhich installs both the .spec file and source archive file (tar.gz) into\nthe rpm build top directory (i.e. /root/rpmbuild/). You should have\npreviously installed the src.rpm file before attempting to build the\nrpm. You can also manually install the .spec file into the <top\ndirectory>/SPECS/ directory and the source code tarball in the <top\ndirectory/SOURCES/ directory, then attempt to build the rpm package.\n\nTo build getssl using the rpm tool, change directories (cd) into the\n/root/rpmbuild/SPECS/ directory (/usr/src/packages/SPECS/ for SuSe) and\nenter the following command:\n\n    rpmbuild -ba getssl.spec <enter>\n\nThe program should output the following if the build is successful and\nverify that the program wrote both the RPMS and SRPMS packages:\n\n    Executing(%prep): /bin/sh -e /var/tmp/rpm-tmp.BYQw0V\n    + umask 022\n    + cd /root/rpmbuild/BUILD\n    + cd /root/rpmbuild/BUILD\n    + rm -rf getssl-2.47\n    + /usr/bin/gzip -dc /root/rpmbuild/SOURCES/getssl-2.47.tar.gz\n    + /usr/bin/tar -xof -\n    + STATUS=0\n    + '[' 0 -ne 0 ']'\n    + cd getssl-2.47\n    + /usr/bin/chmod -Rf a+rX,u+w,g-w,o-w .\n    + exit 0\n    Executing(%build): /bin/sh -e /var/tmp/rpm-tmp.xpA456\n    + umask 022\n    + cd /root/rpmbuild/BUILD\n    + cd getssl-2.47\n    + exit 0\n    Executing(%install): /bin/sh -e /var/tmp/rpm-tmp.zQs24R\n    + umask 022\n    + cd /root/rpmbuild/BUILD\n    + '[' /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64 '!=' / ']'\n    + rm -rf /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64\n    ++ dirname /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64\n    + mkdir -p /root/rpmbuild/BUILDROOT\n    + mkdir /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64\n    + cd getssl-2.47\n    + '[' -n /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64 -a /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64 '!=' / ']'\n    + /usr/bin/rm -rf /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64\n    + /usr/bin/mkdir -p /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/bin\n    + /usr/bin/mkdir -p /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts\n    + /usr/bin/mkdir -p /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/other_scripts\n    + /usr/bin/make DESTDIR=/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64 install\n    mkdir -p /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64\n    install -Dvm755 getssl /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/bin/getssl\n    'getssl' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/bin/getssl'\n    install -dvm755 /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl\n    for dir in *_scripts; do install -dv /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/$dir; install -pv $dir/* /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/$dir/; done\n    'dns_scripts/Azure-README.txt' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/Azure-README.txt'\n    'dns_scripts/Cloudflare-README.md' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/Cloudflare-README.md'\n    'dns_scripts/DNS_IONOS.md' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/DNS_IONOS.md'\n    'dns_scripts/DNS_ROUTE53.md' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/DNS_ROUTE53.md'\n    'dns_scripts/GoDaddy-README.txt' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/GoDaddy-README.txt'\n    'dns_scripts/dns_add_acmedns' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_acmedns'\n    'dns_scripts/dns_add_azure' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_azure'\n    'dns_scripts/dns_add_challtestsrv' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_challtestsrv'\n    'dns_scripts/dns_add_clouddns' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_clouddns'\n    'dns_scripts/dns_add_cloudflare' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_cloudflare'\n    'dns_scripts/dns_add_cpanel' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_cpanel'\n    'dns_scripts/dns_add_del_aliyun.sh' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_del_aliyun.sh'\n    'dns_scripts/dns_add_dnspod' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_dnspod'\n    'dns_scripts/dns_add_duckdns' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_duckdns'\n    'dns_scripts/dns_add_dynu' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_dynu'\n    'dns_scripts/dns_add_godaddy' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_godaddy'\n    'dns_scripts/dns_add_hostway' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_hostway'\n    'dns_scripts/dns_add_ionos' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_ionos'\n    'dns_scripts/dns_add_ispconfig' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_ispconfig'\n    'dns_scripts/dns_add_joker' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_joker'\n    'dns_scripts/dns_add_lexicon' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_lexicon'\n    'dns_scripts/dns_add_linode' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_linode'\n    'dns_scripts/dns_add_manual' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_manual'\n    'dns_scripts/dns_add_nsupdate' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_nsupdate'\n    'dns_scripts/dns_add_ovh' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_ovh'\n    'dns_scripts/dns_add_pdns-mysql' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_pdns-mysql'\n    'dns_scripts/dns_add_vultr' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_vultr'\n    'dns_scripts/dns_add_windows_dns_server' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_add_windows_dns_server'\n    'dns_scripts/dns_del_acmedns' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_acmedns'\n    'dns_scripts/dns_del_azure' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_azure'\n    'dns_scripts/dns_del_challtestsrv' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_challtestsrv'\n    'dns_scripts/dns_del_clouddns' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_clouddns'\n    'dns_scripts/dns_del_cloudflare' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_cloudflare'\n    'dns_scripts/dns_del_cpanel' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_cpanel'\n    'dns_scripts/dns_del_dnspod' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_dnspod'\n    'dns_scripts/dns_del_duckdns' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_duckdns'\n    'dns_scripts/dns_del_dynu' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_dynu'\n    'dns_scripts/dns_del_godaddy' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_godaddy'\n    'dns_scripts/dns_del_hostway' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_hostway'\n    'dns_scripts/dns_del_ionos' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_ionos'\n    'dns_scripts/dns_del_ispconfig' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_ispconfig'\n    'dns_scripts/dns_del_joker' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_joker'\n    'dns_scripts/dns_del_lexicon' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_lexicon'\n    'dns_scripts/dns_del_linode' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_linode'\n    'dns_scripts/dns_del_manual' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_manual'\n    'dns_scripts/dns_del_nsupdate' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_nsupdate'\n    'dns_scripts/dns_del_ovh' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_ovh'\n    'dns_scripts/dns_del_pdns-mysql' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_pdns-mysql'\n    'dns_scripts/dns_del_vultr' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_vultr'\n    'dns_scripts/dns_del_windows_dns_server' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_del_windows_dns_server'\n    'dns_scripts/dns_freedns.sh' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_freedns.sh'\n    'dns_scripts/dns_godaddy' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_godaddy'\n    'dns_scripts/dns_route53.py' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/dns_route53.py'\n    'dns_scripts/ispconfig_soap.php' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/dns_scripts/ispconfig_soap.php'\n    'other_scripts/cpanel_cert_upload' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/other_scripts/cpanel_cert_upload'\n    'other_scripts/iis_install_certeficate.ps1' -> '/root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/usr/share/getssl/other_scripts/iis_install_certeficate.ps1'\n    + install -Dpm 644 /root/rpmbuild/SOURCES/getssl.crontab /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/etc/cron.d/getssl\n    + install -Dpm 644 /root/rpmbuild/SOURCES/getssl.logrotate /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64/etc/logrotate.d/getssl\n    + /usr/lib/rpm/check-buildroot\n    + /usr/lib/rpm/redhat/brp-ldconfig\n    /sbin/ldconfig: Warning: ignoring configuration file that cannot be opened: /etc/ld.so.conf: No such file or directory\n    + /usr/lib/rpm/brp-compress\n    + /usr/lib/rpm/brp-strip /usr/bin/strip\n    + /usr/lib/rpm/brp-strip-comment-note /usr/bin/strip /usr/bin/objdump\n    + /usr/lib/rpm/brp-strip-static-archive /usr/bin/strip\n    + /usr/lib/rpm/brp-python-bytecompile '' 1\n    + /usr/lib/rpm/brp-python-hardlink\n    + /usr/bin/true\n    Processing files: getssl-2.47-1.noarch\n    Provides: getssl = 2.47-1\n    Requires(interp): /bin/sh /bin/sh /bin/sh /bin/sh\n    Requires(rpmlib): rpmlib(CompressedFileNames) <= 3.0.4-1 rpmlib(FileDigests) <= 4.6.0-1 rpmlib(PayloadFilesHavePrefix) <= 4.0-1\n    Requires(pre): /bin/sh\n    Requires(post): /bin/sh\n    Requires(preun): /bin/sh\n    Requires(postun): /bin/sh\n    Requires: /bin/bash /usr/bin/env\n    Checking for unpackaged file(s): /usr/lib/rpm/check-files /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64\n    Wrote: /root/rpmbuild/SRPMS/getssl-2.47-1.src.rpm\n    Wrote: /root/rpmbuild/RPMS/noarch/getssl-2.47-1.noarch.rpm\n    Executing(%clean): /bin/sh -e /var/tmp/rpm-tmp.hgma8Q\n    + umask 022\n    + cd /root/rpmbuild/BUILD\n    + cd getssl-2.47\n    + /usr/bin/rm -rf /root/rpmbuild/BUILDROOT/getssl-2.47-1.x86_64\n    + exit 0\n\n\nBuilding as a Debian Package\n\nIn order to build getssl as a Debian package, the program must be\ncompressed into a tar.gz file and the tar.gz file named to match the\nversioning information contained in the associated .spec file. Spec\nfiles are special files which contain instructions on how to build a\nparticular package from a source code archive.\n\nDebian Packages can be built using a utility called “debbuild” and use a\ntop directory structure which is similar to that used by the RPM tool\nbut using /root/debbuild/ as the “top directory”. These “top\ndirectories” will contain BUILD, BUILDROOT, SPECS, DEBS, SDEBS, and\nSOURCES subdirectories and follows a similar layout that is used for RPM\nfiles.\n\nThe SPECS directory contains the *.spec files used to build DEB and SDEB\npackages. The SOURCES subdirectory will contain the soure code archive\nfile referred to in the *.spec file used to build the DEB and SDEB\npackages.\n\nSee the Quick Start Guide on instructions for installing the source SDEB\nwhich installs both the .spec file and source archive file (tar.gz) into\nthe debbuild top directory (i.e. /root/debbuild/). You should have\npreviously installed the SDEB file before attempting to build the DEB\npackage. You can also manually install the .spec file into the <top\ndirectory>/SPECS/ directory and the source code tarball in the <top\ndirectory/SOURCES/ directory, then attempt to build the DEB package.\n\nTo build getssl using debbuild, change directories (cd) into the\n/root/debbuild/SPECS/ directory and enter the following command:\n\n    debbuild -vv -ba getssl.spec <enter>\n\nThe program should output the following if the build is successful and\nverify that the program wrote both the DEB and SDEB packages:\n\n    This is debbuild, version 22.02.1\\ndebconfigdir:/usr/lib/debbuild\\nsysconfdir:/etc\\n\n    Lua: No Lua module loaded\n    Executing (%prep): /bin/sh -e /var/tmp/deb-tmp.prep.92007\n    + umask 022\n    + cd /root/debbuild/BUILD\n    + /bin/rm -rf getssl-2.47\n    + /bin/gzip -dc /root/debbuild/SOURCES/getssl-2.47.tar.gz\n    + /bin/tar -xf -\n    + STATUS=0\n    + '[' 0 -ne 0 ']'\n    + cd getssl-2.47\n    + /bin/chmod -Rf a+rX,u+w,go-w .\n    + exit 0\n    Executing (%build): /bin/sh -e /var/tmp/deb-tmp.build.40956\n    + umask 022\n    + cd /root/debbuild/BUILD\n    + cd getssl-2.47\n    + exit 0\n    Executing (%install): /bin/sh -e /var/tmp/deb-tmp.install.36647\n    + umask 022\n    + cd /root/debbuild/BUILD\n    + cd getssl-2.47\n    + '[' -n /root/debbuild/BUILDROOT/getssl-2.47-1.amd64 -a /root/debbuild/BUILDROOT/getssl-2.47-1.amd64 '!=' / ']'\n    + /bin/rm -rf /root/debbuild/BUILDROOT/getssl-2.47-1.amd64\n    + /bin/mkdir -p /root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/bin\n    + /bin/mkdir -p /root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts\n    + /bin/mkdir -p /root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/other_scripts\n    + /usr/bin/make DESTDIR=/root/debbuild/BUILDROOT/getssl-2.47-1.amd64 install\n    mkdir -p /root/debbuild/BUILDROOT/getssl-2.47-1.amd64\n    install -Dvm755 getssl /root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/bin/getssl\n    'getssl' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/bin/getssl'\n    install -dvm755 /root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl\n    for dir in *_scripts; do install -dv /root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/$dir; install -pv $dir/* /root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/$dir/; done\n    'dns_scripts/Azure-README.txt' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/Azure-README.txt'\n    'dns_scripts/Cloudflare-README.md' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/Cloudflare-README.md'\n    'dns_scripts/DNS_IONOS.md' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/DNS_IONOS.md'\n    'dns_scripts/DNS_ROUTE53.md' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/DNS_ROUTE53.md'\n    'dns_scripts/GoDaddy-README.txt' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/GoDaddy-README.txt'\n    'dns_scripts/dns_add_acmedns' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_acmedns'\n    'dns_scripts/dns_add_azure' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_azure'\n    'dns_scripts/dns_add_challtestsrv' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_challtestsrv'\n    'dns_scripts/dns_add_clouddns' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_clouddns'\n    'dns_scripts/dns_add_cloudflare' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_cloudflare'\n    'dns_scripts/dns_add_cpanel' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_cpanel'\n    'dns_scripts/dns_add_del_aliyun.sh' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_del_aliyun.sh'\n    'dns_scripts/dns_add_dnspod' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_dnspod'\n    'dns_scripts/dns_add_duckdns' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_duckdns'\n    'dns_scripts/dns_add_dynu' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_dynu'\n    'dns_scripts/dns_add_godaddy' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_godaddy'\n    'dns_scripts/dns_add_hostway' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_hostway'\n    'dns_scripts/dns_add_ionos' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_ionos'\n    'dns_scripts/dns_add_ispconfig' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_ispconfig'\n    'dns_scripts/dns_add_joker' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_joker'\n    'dns_scripts/dns_add_lexicon' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_lexicon'\n    'dns_scripts/dns_add_linode' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_linode'\n    'dns_scripts/dns_add_manual' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_manual'\n    'dns_scripts/dns_add_nsupdate' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_nsupdate'\n    'dns_scripts/dns_add_ovh' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_ovh'\n    'dns_scripts/dns_add_pdns-mysql' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_pdns-mysql'\n    'dns_scripts/dns_add_vultr' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_vultr'\n    'dns_scripts/dns_add_windows_dns_server' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_add_windows_dns_server'\n    'dns_scripts/dns_del_acmedns' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_acmedns'\n    'dns_scripts/dns_del_azure' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_azure'\n    'dns_scripts/dns_del_challtestsrv' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_challtestsrv'\n    'dns_scripts/dns_del_clouddns' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_clouddns'\n    'dns_scripts/dns_del_cloudflare' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_cloudflare'\n    'dns_scripts/dns_del_cpanel' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_cpanel'\n    'dns_scripts/dns_del_dnspod' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_dnspod'\n    'dns_scripts/dns_del_duckdns' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_duckdns'\n    'dns_scripts/dns_del_dynu' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_dynu'\n    'dns_scripts/dns_del_godaddy' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_godaddy'\n    'dns_scripts/dns_del_hostway' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_hostway'\n    'dns_scripts/dns_del_ionos' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_ionos'\n    'dns_scripts/dns_del_ispconfig' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_ispconfig'\n    'dns_scripts/dns_del_joker' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_joker'\n    'dns_scripts/dns_del_lexicon' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_lexicon'\n    'dns_scripts/dns_del_linode' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_linode'\n    'dns_scripts/dns_del_manual' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_manual'\n    'dns_scripts/dns_del_nsupdate' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_nsupdate'\n    'dns_scripts/dns_del_ovh' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_ovh'\n    'dns_scripts/dns_del_pdns-mysql' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_pdns-mysql'\n    'dns_scripts/dns_del_vultr' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_vultr'\n    'dns_scripts/dns_del_windows_dns_server' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_del_windows_dns_server'\n    'dns_scripts/dns_freedns.sh' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_freedns.sh'\n    'dns_scripts/dns_godaddy' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_godaddy'\n    'dns_scripts/dns_route53.py' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/dns_route53.py'\n    'dns_scripts/ispconfig_soap.php' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/dns_scripts/ispconfig_soap.php'\n    'other_scripts/cpanel_cert_upload' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/other_scripts/cpanel_cert_upload'\n    'other_scripts/iis_install_certeficate.ps1' -> '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/usr/share/getssl/other_scripts/iis_install_certeficate.ps1'\n    + install -Dpm 644 /root/debbuild/SOURCES/getssl.crontab /root/debbuild/BUILDROOT/getssl-2.47-1.amd64/etc/cron.d/getssl\n    + install -Dpm 644 /root/debbuild/SOURCES/getssl.logrotate /root/debbuild/BUILDROOT/getssl-2.47-1.amd64/etc/logrotate.d/getssl\n    + exit 0\n    Checking library requirements...\n    Executing (package-creation): /bin/sh -e /var/tmp/deb-tmp.pkg.6107 for getssl\n    + umask 022\n    + cd /root/debbuild/BUILD\n    + /usr/bin/fakeroot -- /usr/bin/dpkg-deb -b /root/debbuild/BUILDROOT/getssl-2.47-1.amd64/main /root/debbuild/DEBS/all/getssl_2.47-1_all.deb\n    dpkg-deb: warning: parsing file '/root/debbuild/BUILDROOT/getssl-2.47-1.amd64/main/DEBIAN/control' near line 10 package 'getssl':\n     missing 'Maintainer' field\n    dpkg-deb: warning: ignoring 1 warning about the control file(s)\n    dpkg-deb: building package 'getssl' in '/root/debbuild/DEBS/all/getssl_2.47-1_all.deb'.\n    + exit 0\n    Executing (%clean): /bin/sh -e /var/tmp/deb-tmp.clean.52780\n    + umask 022\n    + cd /root/debbuild/BUILD\n    + '[' /root/debbuild/BUILDROOT/getssl-2.47-1.amd64 '!=' / ']'\n    + /bin/rm -rf /root/debbuild/BUILDROOT/getssl-2.47-1.amd64\n    + exit 0\n    Wrote source package getssl-2.47-1.sdeb in /root/debbuild/SDEBS.\n    Wrote binary package getssl_2.47-1_all.deb in /root/debbuild/DEBS/all\n\n\nIssues / problems / help\n\nIf you have any issues, please log them at\nhttps://github.com/srvrco/getssl/issues\n\nThere are additional help pages on the wiki\n\nIf you have any suggestions for improvements then pull requests are\nwelcomed, or raise an issue.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 50,
          "content": "# getssl <!-- omit in toc -->\n\n![Run all tests on Pebble](https://github.com/srvrco/getssl/actions/workflows/run-tests-pebble.yml/badge.svg) ![shellcheck](https://github.com/srvrco/getssl/workflows/shellcheck/badge.svg)\n\nObtain SSL certificates from the letsencrypt.org ACME server. Suitable\nfor automating the process on remote servers.\n\n## Table of Contents <!-- omit in toc -->\n- [Upgrade broken in v2.43](#upgrade-broken-in-v243)\n- [Features](#features)\n- [Overview](#overview)\n- [Quick Start Guide](#quick-start-guide)\n- [Manual Installation](#manual-installation)\n- [Getting started](#getting-started)\n- [Detailed guide to getting started with more examples](#detailed-guide-to-getting-started-with-more-examples)\n- [Wildcard certificates](#wildcard-certificates)\n- [ISPConfig](#ispconfig)\n- [Automating updates](#automating-updates)\n- [Structure](#structure)\n- [Custom template for configuration](#custom-template-for-configuration)\n- [Server-Types](#server-types)\n- [Revoke a certificate](#revoke-a-certificate)\n- [Elliptic curve keys](#elliptic-curve-keys)\n- [Preferred Chain](#preferred-chain)\n- [Include Root certificate in full chain](#include-root-certificate-in-full-chain)\n- [Windows Server and IIS Support](#windows-server-and-iis-support)\n- [Building getssl as an RPM Package (Redhat/CentOS/SuSe/Oracle/AWS)](#building-as-an-rpm-package)\n- [Building getssl as a Debian Package (Debian/Ubuntu)](#building-as-a-debian-package)\n- [Issues / problems / help](#issues--problems--help)\n\n## Upgrade broken in v2.43\n\nThe automatic upgrade in v2.43 is broken as the url is incorrect.  If you have this version installed you'll need to manually upgrade using:\n```curl --silent --user-agent getssl/manual https://raw.githubusercontent.com/srvrco/getssl/latest/getssl --output getssl```\n\n## Features\n\n* **Bash** - It runs on virtually all unix machines, including BSD, most\n  Linux distributions, macOS.\n* **Get certificates for remote servers** - The tokens used to provide\n  validation of domain ownership, and the certificates themselves can be\n  automatically copied to remote servers (via ssh, sftp or ftp for\n  tokens). The script doesn't need to run on the server itself. This can\n  be useful if you don't have access to run such scripts on the server\n  itself, e.g. if it's a shared server.\n* **Runs as a daily cron** - so certificates will be automatically\n  renewed when required.\n* **Automatic certificate renewals**\n* **Checks certificates are correctly loaded** - After installation of a\n  new certificate it will test the port specified ( see\n  [Server-Types](#server-types) for options ) that the certificate is\n  actually being used correctly.\n* **Automatically updates** - The script can automatically update itself\n  with bug fixes etc if required.\n* **Extensively configurable** - With a simple configuration file for\n  each certificate it is possible to configure it exactly for your\n  needs, whether a simple single domain or multiple domains across\n  multiple servers on the same certificate.\n* **Supports http and dns challenges** - Full ACME implementation\n* **Simple and easy to use**\n* **Detailed debug info** - Whilst it shouldn't be needed, detailed\n  debug information is available.\n* **Reload services** - After a new certificate is obtained then the\n  relevant services (e.g. apache/nginx/postfix) can be reloaded.\n* **ACME v1 and V2** - Supports both ACME versions 1 and 2 (note ACMEv1 is deprecated and clients will automatically use v2)\n\n## Overview\n\nGetSSL was written in standard bash ( so it can be run on a server, a\ndesktop computer, or even a virtualbox) and add the checks, and\ncertificates to a remote server ( providing you have a ssh with key,\nsftp or ftp access to the remote server).\n\n```getssl -h\ngetssl ver. 2.36\nObtain SSL certificates from the letsencrypt.org ACME server\n\nUsage: getssl [-h|--help] [-d|--debug] [-c|--create] [-f|--force] [-a|--all] [-q|--quiet] [-Q|--mute] [-u|--upgrade] [-X|--experimental tag] [-U|--nocheck] [-r|--revoke cert key] [-w working_dir] [--preferred-chain chain] domain   \n\nOptions:\n  -a, --all          Check all certificates\n  -d, --debug        Output debug information\n  -c, --create       Create default config files\n  -f, --force        Force renewal of cert (overrides expiry checks)\n  -h, --help         Display this help message and exit\n  -i, --install      Install certificates and reload service\n  -q, --quiet        Quiet mode (only outputs on error, success of new cert, or getssl was upgraded)\n  -Q, --mute         Like -q, but also mute notification about successful upgrade\n  -r, --revoke   \"cert\" \"key\" [CA_server] Revoke a certificate (the cert and key are required)\n  -u, --upgrade      Upgrade getssl if a more recent version is available - can be used with or without domain(s)\n  -X  --experimental tag Allow upgrade to a specified version of getssl\n  -U, --nocheck      Do not check if a more recent version is available\n  -v  --version      Display current version of getssl\n  -w working_dir \"Working directory\"\n    --preferred-chain \"chain\" Use an alternate chain for the certificate\n```\n\n## Quick Start Guide \n\nYou can download precompiled RPM packages and Debian (DEB) packages from\nthe [release page](https://github.com/jeffmerkey/getssl/releases) for \nthis project, or you can manually build and install the program from the git sources.   \n\nIf you want to manually install the program from scratch with the git sources rather than use the pre-compiled RPMS and DEB packages, or if your target platform does not support Linux RPM or DEB packages, then please skip to the section [Manual Installation](#manual-installation) for instructions on installing the getssl program manually. \n \nPackages are provided in binary and source versions, and can be downloaded and \ninstalled directly or rebuilt. Package types are\nRed Hat Package Manager (RPM) packages and Debian (DEB) packages for binary installation and \nSource RPM packages (SRPMS) and Debbuild SDEB packages for source code installation.  \n\nRPM and DEB packages for each release include a binary architecture specific package\nand a source package which can be downloaded and built/rebuilt and which contains the source code.\n\nFor example, the release v2.49 contains the following packages in the release section:\n\n### **RPM Based Packages (RedHat, CentOS, SuSe, Oracle Linux, AWS Linux)**\n\n- [getssl-2.49-1.src.rpm](https://github.com/srvrco/getssl/releases/download/2.49/getssl-2.49-1.src.rpm) (source)\n- [getssl-2.49-1.noarch.rpm](https://github.com/srvrco/getssl/releases/download/2.49/getssl-2.49-1.noarch.rpm) (binary)\n\n### **Debian Based Packages (Debian, Ubuntu)**\n\n- [getssl_2.49-1_all.deb](https://github.com/srvrco/getssl/releases/download/v2.49/getssl_2.49-1_all.deb) (binary)\n\n### **Installing Binary Packages**\n\nTo install the binary package with the rpm package manager for RedHat, CentOS, SuSe, Oracle Linux, or AWS Linux distributions:\n```sh\nrpm -i getssl-2.49-1.noarch.rpm\n```\n\nTo deinstall the RPM binary package:\n```sh\nrpm -e getssl\n```\n\nTo install the binary package with the Debian dpkg package manager for Debian and Ubuntu Linux distributions:\n```sh\ndpkg -i getssl_2.49-1_all.deb\n```\n\nTo deinstall the Debian dpkg binary package:\n```sh\ndpkg -r getssl\n```\n\n### **Installing Source Packages**\n\nTo install the source package with the rpm package manager for RedHat, CentOS, SuSe, Oracle Linux, or AWS Linux distributions:\n```sh\nrpm -i getssl-2.48-1.src.rpm \n```\n*(Note: rpm installs the source code files in /root/rpmbuild/ as top directory for RedHat, CentOS, Oracle Linux, and AWS Linux platforms.  SuSe platforms install the source code files in /usr/src/packages/)*\n\nTo install the source package with the Debbuild package tool for Debian or Ubuntu Linux distributions:\n```sh\ndebbuild -i getssl-2.49-1.sdeb\n```\n*(Note: Debbuild installs the source code files in /root/debbuild/ as top directory)*\n\nOne item of note is that SDEB packages are actually just tar.gz archives renamed with an .sdeb file extension with the files organized into a SPECS and SOURCES directory tree structure.  Subsequently, an SDEB can also be extracted and installed with the **tar -xvf command** or the files listed with the **tar -tvf command**:\n\n```sh\n[root@localhost getssl]$ tar -tvf /root/debbuild/SDEBS/getssl-2.49-1.sdeb \n-rw-r--r-- root/root   1772110 2022-10-12 20:42 SOURCES/getssl-2.49.tar.gz\n-rw-r--r-- root/root       192 2022-08-02 15:02 SOURCES/getssl.crontab\n-rw-r--r-- root/root       126 2022-08-02 15:02 SOURCES/getssl.logrotate\n-rw-r--r-- root/root      1537 2022-08-02 15:02 SPECS/getssl.spec\n[root@localhost getssl]$ \n```\n\nFor building or rebuilding RPMS or DEB Packages after you have installed the associated source packages on your platform, refer to the following:\n\n- [Building getssl as an RPM Package (Redhat/CentOS/SuSe/Oracle/AWS)](#building-as-an-rpm-package)\n- [Building getssl as a Debian Package (Debian/Ubuntu)](#building-as-a-debian-package)\n\n## Manual Installation\n\nSince the script is only one file, you can use the following command for\na quick installation of GetSSL only:\n\n```sh\ncurl --silent https://raw.githubusercontent.com/srvrco/getssl/latest/getssl > getssl ; chmod 700 getssl\n```\n\nThis will copy the getssl Bash script to the current location and change\nthe permissions to make it executable for you.\n\nFor a more comprehensive installation (e.g. install also helper scripts)\nuse the provided Makefile with each release tarball. Use the `install`\ntarget.\n\nYou'll find the latest version in the git repository:\n\n```sh\ngit clone https://github.com/srvrco/getssl.git\n```\n\nFor Arch Linux there are packages in the AUR, see\n[here](https://aur.archlinux.org/packages/getssl/) and\n[there](https://aur.archlinux.org/packages/getssl-git/).\n\nIf you use puppet, there is a [GetSSL Puppet\nmodule](https://github.com/dthielking/puppet_getssl) by dthielking\n\n## Getting started\n\nOnce you have obtained the script (see Installation above), the next step is to use\n\n```sh\n./getssl -c yourdomain.com\n```\n\nwhere yourdomain.com is the primary domain name that you want to create\na certificate for. This will create the following folders and files.\n\n```sh\n~/.getssl\n~/.getssl/getssl.cfg\n~/.getssl/yourdomain.com\n~/.getssl/yourdomain.com/getssl.cfg\n```\n\nYou can then edit `~/.getssl/getssl.cfg` to set the values you want as the\ndefault for the majority of your certificates.\n\nThen edit `~/.getssl/yourdomain.com/getssl.cfg` to have the values you\nwant for this specific domain (make sure to uncomment and specify\ncorrect `ACL` option, since it is required).\n\nYou can then just run:\n\n```sh\ngetssl yourdomain.com\n```\n\nand it should run, providing output like:\n\n```sh\nRegistering account\nVerify each domain\nVerifying yourdomain.com\nVerified yourdomain.com\nVerifying www.yourdomain.com\nVerified www.yourdomain.com\nVerification completed, obtaining certificate.\nCertificate saved in /home/user/.getssl/yourdomain.com/yourdomain.com.crt\nThe intermediate CA cert is in /home/user/.getssl/yourdomain.com/chain.crt\ncopying domain certificate to ssh:server5:/home/yourdomain/ssl/domain.crt\ncopying private key to ssh:server5:/home/yourdomain/ssl/domain.key\ncopying CA certificate to ssh:server5:/home/yourdomain/ssl/chain.crt\nreloading SSL services\n```\n\n**This will (by default) use the staging server, so should give you a\ncertificate that isn't trusted ( Fake Let's Encrypt).**\nChange the server in your config file to get a fully valid certificate.\n\n**Note:** Verification is done via port 80 (http), port 443 (https) or\ndns. The certificate can be used (and checked with getssl) on alternate\nports.\n\n## Detailed guide to getting started with more examples\n\n[Guide to getting a certificate for example.com and www.example.com](https://github.com/srvrco/getssl/wiki/Guide-to-getting-a-certificate-for-example.com-and-www.example.com)\n\n## Wildcard certificates\n\n`getssl` supports creating wildcard certificates, i.e. _*.example.com_ which allows a single certificate to be used for any domain under *example.com*, e.g. *www.example.com*, *mail.example.com*.  These must be validated using the dns-01 method.\n\nA *partial* example `getssl.cfg` file is:\n\n```sh\nVALIDATE_VIA_DNS=true\nexport CPANEL_USERNAME=''\nexport CPANEL_URL='https://www.cpanel.host:2083'\nexport CPANEL_APITOKEN='1ABC2DEF3GHI4JKL5MNO6PQR7STU8VWX9YZA'\nDNS_ADD_COMMAND=/home/root/getssl/dns_scripts/dns_add_cpanel\nDNS_DEL_COMMAND=/home/root/getssl/dns_scripts/dns_del_cpanel\n```\n\n\n## ISPConfig\n\nThere is a need to create a remote user in `ISPConfig` to enable the remote API access.\n\nYou need to go to `System -> Remote Users` and then enable the features for the remote user such as `DNS zone functions`.\n\nPHP is required to exeucte soap functions in file ispconfig_soap.php.\n```sh\nDNS_ADD_COMMAND=\"/home/root/getssl/dns_scripts/dns_add_ispconfig\"\nDNS_DEL_COMMAND=\"/home/root/getssl/dns_scripts/dns_del_ispconfig\"\n\nexport ISPCONFIG_REMOTE_USER_NAME=\"ussename\"\nexport ISPCONFIG_REMOTE_USER_PASSWORD=\"password\"\nexport ISPCONFIG_SOAP_LOCATION=\"https://localhost:8080/remote/index.php\"\nexport ISPCONFIG_SOAP_URL=\"https://localhost:8080/remote/\"\n```\n\n\nCreate the wildcard certificate (need to use quotes to prevent globbing):\n\n```sh\ngetssl \"*.example.domain\"\n```\n\nYou can renew the certificate using `getssl -a` to renew all configured certificates.\n\nYou can also specify additional domains in the `SANS` line, e.g. `SANS=\"www.test.example.com\"`.\nThis cannot contain any of the domains which would be covered by the wildcard certificate.\n\n## Automating updates\n\nI use the following **cron** job\n\n```cron\n23  5 * * * /root/scripts/getssl -u -a -q\n```\n\nThe cron will automatically update getssl and renew any certificates,\nonly giving output if there are issues / errors.\n\n* The -u flag updates getssl if there is a more recent version available.\n* The -a flag automatically renews any certificates that are due for renewal.\n* The -q flag is \"quiet\" so that it only outputs and emails me if there\n  was an error / issue.\n\n## Structure\n\nThe design aim was to provide flexibility in running the code. The\ndefault working directory is `~/.getssl` (which can be modified via the\ncommand line).\n\nWithin the **working directory** is a config file `getssl.cfg` which is a\nsimple bash file containing variables, an example of which is:\n\n```sh\n# Uncomment and modify any variables you need\n# The staging server is best for testing (hence set as default)\nCA=\"https://acme-staging-v02.api.letsencrypt.org\"\n# This server issues full certificates, however has rate limits\n#CA=\"https://acme-v02.api.letsencrypt.org\"\n\nAGREEMENT=\"https://letsencrypt.org/documents/LE-SA-v1.0.1-July-27-2015.pdf\"\n\n# Set an email address associated with your account - generally set at account level rather than domain.\nACCOUNT_EMAIL=\"me@example.com\"\nACCOUNT_KEY_LENGTH=4096\nACCOUNT_KEY=\"/home/user/.getssl/account.key\"\nPRIVATE_KEY_ALG=\"rsa\"\n\n# The time period within which you want to allow renewal of a certificate - this prevents hitting some of the rate limits.\nRENEW_ALLOW=\"30\"\n\n# openssl config file.  The default should work in most cases.\nSSLCONF=\"/usr/lib/ssl/openssl.cnf\"\n```\n\nthen, within the **working directory** there will be a folder for each\ncertificate (based on its domain name). Within that folder will be a\nconfig file (again called `getssl.cfg`). An example of which is:\n\n```sh\n# Uncomment and modify any variables you need\n# see https://github.com/srvrco/getssl/wiki/Config-variables for details\n# see https://github.com/srvrco/getssl/wiki/Example-config-files for example configs\n#\n# The staging server is best for testing\n#CA=\"https://acme-staging-v02.api.letsencrypt.org\"\n# This server issues full certificates, however has rate limits\n#CA=\"https://acme-v02.api.letsencrypt.org\"\n\n#AGREEMENT=\"https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf\"\n\nPRIVATE_KEY_ALG=\"rsa\"\n\n# Additional domains - this could be multiple domains / subdomains in a comma separated list\nSANS=\"www.example.org\"\n\n# Acme Challenge Location. The first line for the domain, the following ones for each additional domain.\n# If these start with ssh: then the next variable is assumed to be the hostname and the rest the location.\n# An ssh key will be needed to provide you with access to the remote server.\n# Optionally, you can specify a different userid for ssh/scp to use on the remote server before the @ sign.\n# If left blank, the username on the local server will be used to authenticate against the remote server.\n# If these start with ftp: then the next variables are ftpuserid:ftppassword:servername:ACL_location\n# These should be of the form \"/path/to/your/website/folder/.well-known/acme-challenge\"\n# where \"/path/to/your/website/folder/\" is the path, on your web server, to the web root for your domain.\n#ACL=('/var/www/${DOMAIN}/web/.well-known/acme-challenge'\n#     'ssh:server5:/var/www/${DOMAIN}/web/.well-known/acme-challenge'\n#     'ssh:sshuserid@server5:/var/www/${DOMAIN}/web/.well-known/acme-challenge'\n#     'ftp:ftpuserid:ftppassword:${DOMAIN}:/web/.well-known/acme-challenge')\n\n\n# Location for all your certs, these can either be on the server (so full path name) or using ssh as for the ACL\nDOMAIN_CERT_LOCATION=\"ssh:server5:/etc/ssl/domain.crt\"\nDOMAIN_KEY_LOCATION=\"ssh:server5:/etc/ssl/domain.key\"\n#CA_CERT_LOCATION=\"/etc/ssl/chain.crt\"\n#DOMAIN_CHAIN_LOCATION=\"\" this is the domain cert and CA cert\n#DOMAIN_PEM_LOCATION=\"\" this is the domain_key. domain cert and CA cert\n\n\n# The command needed to reload apache / nginx or whatever you use.\n# Several (ssh) commands may be given using a bash array:\n# RELOAD_CMD=('ssh:sshuserid@server5:systemctl reload httpd' 'logger getssl for server5 efficient.')\nRELOAD_CMD=\"service apache2 reload\"\n\n# Define the server type. This can be https, ftp, ftpi, imap, imaps, pop3, pop3s, smtp,\n# smtps_deprecated, smtps, smtp_submission, xmpp, xmpps, ldaps or a port number which\n# will be checked for certificate expiry and also will be checked after\n# an update to confirm correct certificate is running (if CHECK_REMOTE) is set to true\n#SERVER_TYPE=\"https\"\n#CHECK_REMOTE=\"true\"\n```\n\nIf a location for a file starts with `ssh:` it is assumed the next part\nof the file is the hostname, followed by a colon, and then the path.\nFiles will be securely copied using scp, and it assumes that you have a\nkey on the server (for passwordless access). You can set the user,\nport etc for the server in your `.ssh/config` file.\n\nIf an ACL starts with `ftp:` or `sftp:` it as assumed that the line is\nin the format \"ftp:UserID:Password:servername:/path/to/acme-challenge\".\nsftp requires sshpass.\nNote: FTP can be used for copying tokens only\nand can **not** be used for uploading private key or certificates as\nit's not a secure method of transfer.\n\nssh can also be used for the reload command if using on remote servers.\n\nMultiple locations can be defined for a file by separating the locations with a semi-colon.\n\nA typical config file for `example.com` and `www.example.com` on the\nsame server would be:\n\n```sh\n# uncomment and modify any variables you need\n# The staging server is best for testing\nCA=\"https://acme-staging-v02.api.letsencrypt.org\"\n# This server issues full certificates, however has rate limits\n#CA=\"https://acme-v02.api.letsencrypt.org\"\n\n# additional domains - this could be multiple domains / subdomains in a comma separated list\nSANS=\"www.example.com\"\n\n#Acme Challenge Location.   The first line for the domain, the following ones for each additional domain\nACL=('/var/www/example.com/web/.well-known/acme-challenge')\n\nUSE_SINGLE_ACL=\"true\"\n\nDOMAIN_CERT_LOCATION=\"/etc/ssl/example.com.crt\"\nDOMAIN_KEY_LOCATION=\"/etc/ssl/example.com.key\"\nCA_CERT_LOCATION=\"/etc/ssl/example.com.bundle\"\n\nRELOAD_CMD=\"service apache2 reload\"\n\n```\n\n## Custom template for configuration\n\nYou can create and customize a template that can be use to generate the `~/.getssl/yourdomain.com/getssl.cfg` config file, instead of the default one.\n\nCreate one of fhe following allowed locations, according to your getssl installation:\n\n```sh\n/etc/getssl/getssl_default.cfg\n/path/of/your/getssl/installation/getssl_default.cfg\n~/.getssl/getssl_default.cfg\n\n```\n\nAnd define the default values, optionally using the dynamic variables, as in the example below:\n\n```sh\n# Additional domains - this could be multiple domains / subdomains in a comma separated list\n# Note: this is Additional domains - so should not include the primary domain.\nSANS=\"${EX_SANS}\"\n\nACL=('/home/myuser/${DOMAIN}/public_html/.well-known/acme-challenge')\n\nUSE_SINGLE_ACL=\"true\"\n\nRELOAD_CMD=\"sudo /bin/systemctl restart nginx.service\"\n\n# Define the server type. This can be https, ftp, ftpi, imap, imaps, pop3, pop3s, smtp,\n# smtps_deprecated, smtps, smtp_submission, xmpp, xmpps, ldaps or a port number which\n# will be checked for certificate expiry and also will be checked after\n# an update to confirm correct certificate is running (if CHECK_REMOTE) is set to true\nSERVER_TYPE=\"https\"\n#CHECK_REMOTE=\"true\"\nCHECK_REMOTE_WAIT=\"1\" # wait 1 second before checking the remote server\n\n```\n\n## Server-Types\n\nOpenSSL has built-in support for getting the certificate from a number of SSL services\nthese are available in getssl to check if the certificate is installed correctly\n\n| Server-Type      | Port | Extra        |\n|------------------|------|--------------|\n| https            | 443  |              |\n| ftp              | 21   | FTP Explicit |\n| ftpi             | 990  | FTP Implicit |\n| imap             | 143  | StartTLS     |\n| imaps            | 993  |              |\n| pop3             | 110  | StartTLS     |\n| pop3s            | 995  |              |\n| smtp             | 25   | StartTLS     |\n| smtps_deprecated | 465  |              |\n| smtps            | 587  | StartTLS     |\n| smtp_submission  | 587  | StartTLS     |\n| xmpp             | 5222 | StartTLS     |\n| xmpps            | 5269 |              |\n| ldaps            | 636  |              |\n| postgres         | 5432 |              |\n| port number      |      |              |\n\n## Revoke a certificate\n\nIn general revoking a certificate is not required.\n\nUsage: `getssl -r path/to/cert path/to/key [CA_server]`\n\nYou need to specify both the certificate you want to revoke, and the\naccount or private domain key which was used to sign / obtain the\noriginal certificate. The `CA_server` is an optional parameter and\ndefaults to Let's Encrypt (\"<https://acme-v02.api.letsencrypt.org>\") as\nthat is currently the only Certificate Authority using the ACME\nprotocol.\n\n## Elliptic curve keys\n\nYou can use Elliptic curve keys for both the account key and the domain\nkey (different of course, don't use the same key for both). prime256v1\n(NIST P-256) and secp384r1 (NIST P-384) are both fully supported.\nsecp521r1 (NIST P-521) is included in the code, but not currently\nsupported by Let's Encrypt).\n\n## Preferred Chain\n\nIf a CA offers multiple chains then it is possible to select which chain\nis used by using the `PREFERRED_CHAIN` variable in `getssl.cfg` or specifying\n `--preferred-chain` in the call to `getssl`\n\nThis uses wildcard matching so requesting \"X1\" returns the first certificate\nreturned by the CA which contains the text \"X1\",  Note you may need to escape\nany characters which special characters, e.g.\n` PREFERRED_CHAIN=\"\\(STAGING\\) Doctored Durian Root CA X3\"`\n\n* Staging options are: \"(STAGING) Doctored Durian Root CA X3\" and \"(STAGING) Pretend Pear X1\"\n* Production options are: \"ISRG Root X1\" and \"ISRG Root X2\"\n\n## Include Root certificate in full chain\n\nSome servers, including those that use Java keystores, will not accept a server certificate if it cannot valid the full chain of signers.\n\nSpecifically, Nutanix Prism (Element and Central) will not accept the `fullchain.crt` until the root CA's certificate has been appended to it manually.\n\nIf your application requires the full chain, i.e. including the\nroot certificate of the CA, then this can be included in the `fullchain.crt` file by\nadding the following line to `getssl.cfg`\n\n```sh\nFULL_CHAIN_INCLUDE_ROOT=\"true\"\n```\n\n## Windows Server and IIS Support\n\n**System and software requirements**:\n\n-   Windows Server with DNS and IIS services\n\n-   One of\n\n    -   WSL Windows Sub for Linux\n\n        -   Ubuntu or any other distro\n\n        -   gettssl can be installed inside WSL or using `/mnt/` path to windows\n\n    -   Bash - gettssl should be installed in Windows\n\n        -   Git Bash - <https://git-scm.com/downloads>\n\n        -   Rtools4.0 - <https://cran.r-project.org/bin/windows/Rtools/>\n\n**WSL**\n\n-   Installing and configuring WSL 2\n\n    -   Add remove Windows features and choose \"Windows for sub Linux\"\n\n    -   Install a distro like Ubuntu or any other Linux platform\n\n        -   If newly added to the system a reboot is required to continue\n\n        -   wsl --install -d ubuntu\n\n        -   Any user will work\n\n        -   Copying files to WSL\n\n            -   From Windows open `Windows Explorer` and browse to `\\\\wsl$\\Ubuntu\\home\\user\\` and then place the getssl files and folders `.getssl` and `getssl` into users home directory `\\\\wsl$\\Ubuntu\\home\\user\\.getssl .` or in Windows\n\n        -   Open `cmd` in Widnows and type\\\n            `wsl -d Ubuntu /bin/bash /home/UserName/getssl/getssl domain.eu && exit`\n\n        -   Using a specific distro if not set as default in WSL then use the `wsl -d distro` command\n\n    **Notes:**\n\n    -   While configuring WSL please do check the `/etc/hosts` file if the IP of the domain is correct since it overrides the DNS server.\n\n    -   Make sure running version 2.\n\n**GIT Bash** - MINGW64_NT\n\n-   Install git GIT Bash\n\n-   `\"C:\\Program Files\\Git\\bin\\bash.exe\" --login -i -- path_to/getssl/getssl domain.eu`\n\n**Rtools Bash** - MSYS_NT\n\n-   Make sure that the path of `\\rtools42\\usr\\bin` in Windows system environment variables is right before `c:\\windows\\system32\\` so that getssl will use the `Rtools` applications instead of Windows applications such as `sort.exe` that crashes or speify full path to sort.\n\n-   `\\rtools42\\usr\\bin\\bash.exe \\Users\\Administrator\\getssl\\getssl domain.eu 2>&1 1>out.txt`\n\n**Updating DNS TXT records**\n\n-   Using `PowerShell` to add and delete `_acme-challenge` records\n\n    -   dns_add_windows_dnsserver\n\n    -   dns_del_windows_dnsserver\n\n    **Notes:** The script supports optional second level `TLDs`. `sub.domain.co.uk` You can update the reqexp `.(co|com).uk` to fit your needs.\n\n**IIS internet information service**\n\n-   Under folder `other_scripts` you can find a `PowerSheell` script `iis_install_certeficate.ps1` which generates `PFX` certificate to be installed in `IIS` and binds the domains to the `PFX` certificate.\n\n-   WSL\n\n    -   `RELOAD_CMD=(\"powershell.exe -ExecutionPolicy Bypass -File \"\\\\\\\\wsl$\\\\Ubuntu\\\\home\\\\user\\\\getssl\\\\other_scripts\\\\iis_install_certeficate.ps1\" \"domain.eu\" \"IIS SiteName\" \"\\\\\\\\wsl$\\\\Ubuntu\\\\home\\\\user\\\\ssl\\\\\" \"path_to_ssl_dir\" )`\n\n-   GIT and Rtools4 Bash\n\n    -   `RELOAD_CMD=(\"powershell.exe /c/Users/Administrator/getssl/other_scripts/iis_install_certeficate.ps1 domain.eu domain path_to_ssl_dir\")`\n\n## Building as an RPM Package\n\nIn order to build getssl as an RPM, the program must be compressed into a tar.gz\nfile and the tar.gz file named to match the versioning information contained in the \nassociated .spec file.  \n\nSpec files are special files which contain instructions on how to build a particular package\nfrom a source code archive.  On Red Hat, CentOS, Oracle Linux, and AWS Linux systems, RPMS are built in the /root/rpmbuild/ top directory.  SuSe systems build RPMS in the /usr/src/packages/ as top directory.  These \"top directories\" will contain BUILD, BUILDROOT, SPECS, RPMS, SRPMS, and SOURCES subdirectories.  \n\nThe SPECS directory contains the \\*.spec files used to build RPMS and SRPMS packages.  The SOURCES subdirectory will contain the soure code archive file referred to in the \\*.spec file used to build the \nRPM package.\n\nSee the [Quick Start Guide](#quick-start-guide) on instructions for installing the \nsource rpm which installs both the .spec file and source archive file (tar.gz) into \nthe rpm build top directory (i.e. /root/rpmbuild/).  You should have previously \ninstalled the src.rpm file before attempting to build the rpm.  You can also \nmanually install the .spec file into the \\<top directory\\>/SPECS/ directory and \nthe source code tarball in the \\<top directory\\/SOURCES/ directory, then attempt \nto build the rpm package.\n\nTo build getssl using the rpm tool, change directories (cd) into the /root/rpmbuild/SPECS/ directory (/usr/src/packages/SPECS/ for SuSe) and enter the following command:\n```sh\nrpmbuild -ba getssl.spec <enter>\n```\nThe program should output the following if the build is successful and verify that the program\nwrote both the RPMS and SRPMS packages:\n\n```sh\nExecuting(%prep): /bin/sh -e /var/tmp/rpm-tmp.BYQw0V\n+ umask 022\n+ cd /root/rpmbuild/BUILD\n+ cd /root/rpmbuild/BUILD\n+ rm -rf getssl-2.49\n+ /usr/bin/gzip -dc /root/rpmbuild/SOURCES/getssl-2.49.tar.gz\n+ /usr/bin/tar -xof -\n+ STATUS=0\n+ '[' 0 -ne 0 ']'\n+ cd getssl-2.49\n+ /usr/bin/chmod -Rf a+rX,u+w,g-w,o-w .\n+ exit 0\nExecuting(%build): /bin/sh -e /var/tmp/rpm-tmp.xpA456\n+ umask 022\n+ cd /root/rpmbuild/BUILD\n+ cd getssl-2.49\n+ exit 0\nExecuting(%install): /bin/sh -e /var/tmp/rpm-tmp.zQs24R\n+ umask 022\n+ cd /root/rpmbuild/BUILD\n+ '[' /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64 '!=' / ']'\n+ rm -rf /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64\n++ dirname /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64\n+ mkdir -p /root/rpmbuild/BUILDROOT\n+ mkdir /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64\n+ cd getssl-2.49\n+ '[' -n /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64 -a /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64 '!=' / ']'\n+ /usr/bin/rm -rf /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64\n+ /usr/bin/mkdir -p /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/bin\n+ /usr/bin/mkdir -p /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts\n+ /usr/bin/mkdir -p /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/other_scripts\n+ /usr/bin/make DESTDIR=/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64 install\nmkdir -p /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64\ninstall -Dvm755 getssl /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/bin/getssl\n'getssl' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/bin/getssl'\ninstall -dvm755 /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl\nfor dir in *_scripts; do install -dv /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/$dir; install -pv $dir/* /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/$dir/; done\n'dns_scripts/Azure-README.txt' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/Azure-README.txt'\n'dns_scripts/Cloudflare-README.md' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/Cloudflare-README.md'\n'dns_scripts/DNS_IONOS.md' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/DNS_IONOS.md'\n'dns_scripts/DNS_ROUTE53.md' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/DNS_ROUTE53.md'\n'dns_scripts/GoDaddy-README.txt' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/GoDaddy-README.txt'\n'dns_scripts/dns_add_acmedns' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_acmedns'\n'dns_scripts/dns_add_azure' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_azure'\n'dns_scripts/dns_add_challtestsrv' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_challtestsrv'\n'dns_scripts/dns_add_clouddns' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_clouddns'\n'dns_scripts/dns_add_cloudflare' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_cloudflare'\n'dns_scripts/dns_add_cpanel' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_cpanel'\n'dns_scripts/dns_add_del_aliyun.sh' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_del_aliyun.sh'\n'dns_scripts/dns_add_dnspod' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_dnspod'\n'dns_scripts/dns_add_duckdns' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_duckdns'\n'dns_scripts/dns_add_dynu' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_dynu'\n'dns_scripts/dns_add_godaddy' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_godaddy'\n'dns_scripts/dns_add_hostway' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_hostway'\n'dns_scripts/dns_add_ionos' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_ionos'\n'dns_scripts/dns_add_ispconfig' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_ispconfig'\n'dns_scripts/dns_add_joker' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_joker'\n'dns_scripts/dns_add_lexicon' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_lexicon'\n'dns_scripts/dns_add_linode' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_linode'\n'dns_scripts/dns_add_manual' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_manual'\n'dns_scripts/dns_add_nsupdate' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_nsupdate'\n'dns_scripts/dns_add_ovh' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_ovh'\n'dns_scripts/dns_add_pdns-mysql' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_pdns-mysql'\n'dns_scripts/dns_add_vultr' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_vultr'\n'dns_scripts/dns_add_windows_dns_server' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_add_windows_dns_server'\n'dns_scripts/dns_del_acmedns' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_acmedns'\n'dns_scripts/dns_del_azure' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_azure'\n'dns_scripts/dns_del_challtestsrv' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_challtestsrv'\n'dns_scripts/dns_del_clouddns' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_clouddns'\n'dns_scripts/dns_del_cloudflare' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_cloudflare'\n'dns_scripts/dns_del_cpanel' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_cpanel'\n'dns_scripts/dns_del_dnspod' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_dnspod'\n'dns_scripts/dns_del_duckdns' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_duckdns'\n'dns_scripts/dns_del_dynu' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_dynu'\n'dns_scripts/dns_del_godaddy' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_godaddy'\n'dns_scripts/dns_del_hostway' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_hostway'\n'dns_scripts/dns_del_ionos' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_ionos'\n'dns_scripts/dns_del_ispconfig' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_ispconfig'\n'dns_scripts/dns_del_joker' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_joker'\n'dns_scripts/dns_del_lexicon' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_lexicon'\n'dns_scripts/dns_del_linode' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_linode'\n'dns_scripts/dns_del_manual' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_manual'\n'dns_scripts/dns_del_nsupdate' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_nsupdate'\n'dns_scripts/dns_del_ovh' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_ovh'\n'dns_scripts/dns_del_pdns-mysql' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_pdns-mysql'\n'dns_scripts/dns_del_vultr' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_vultr'\n'dns_scripts/dns_del_windows_dns_server' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_del_windows_dns_server'\n'dns_scripts/dns_freedns.sh' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_freedns.sh'\n'dns_scripts/dns_godaddy' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_godaddy'\n'dns_scripts/dns_route53.py' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/dns_route53.py'\n'dns_scripts/ispconfig_soap.php' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/dns_scripts/ispconfig_soap.php'\n'other_scripts/cpanel_cert_upload' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/other_scripts/cpanel_cert_upload'\n'other_scripts/iis_install_certeficate.ps1' -> '/root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/usr/share/getssl/other_scripts/iis_install_certeficate.ps1'\n+ install -Dpm 644 /root/rpmbuild/SOURCES/getssl.crontab /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/etc/cron.d/getssl\n+ install -Dpm 644 /root/rpmbuild/SOURCES/getssl.logrotate /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64/etc/logrotate.d/getssl\n+ /usr/lib/rpm/check-buildroot\n+ /usr/lib/rpm/redhat/brp-ldconfig\n/sbin/ldconfig: Warning: ignoring configuration file that cannot be opened: /etc/ld.so.conf: No such file or directory\n+ /usr/lib/rpm/brp-compress\n+ /usr/lib/rpm/brp-strip /usr/bin/strip\n+ /usr/lib/rpm/brp-strip-comment-note /usr/bin/strip /usr/bin/objdump\n+ /usr/lib/rpm/brp-strip-static-archive /usr/bin/strip\n+ /usr/lib/rpm/brp-python-bytecompile '' 1\n+ /usr/lib/rpm/brp-python-hardlink\n+ /usr/bin/true\nProcessing files: getssl-2.49-1.noarch\nProvides: getssl = 2.49-1\nRequires(interp): /bin/sh /bin/sh /bin/sh /bin/sh\nRequires(rpmlib): rpmlib(CompressedFileNames) <= 3.0.4-1 rpmlib(FileDigests) <= 4.6.0-1 rpmlib(PayloadFilesHavePrefix) <= 4.0-1\nRequires(pre): /bin/sh\nRequires(post): /bin/sh\nRequires(preun): /bin/sh\nRequires(postun): /bin/sh\nRequires: /bin/bash /usr/bin/env\nChecking for unpackaged file(s): /usr/lib/rpm/check-files /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64\nWrote: /root/rpmbuild/SRPMS/getssl-2.49-1.src.rpm\nWrote: /root/rpmbuild/RPMS/noarch/getssl-2.49-1.noarch.rpm\nExecuting(%clean): /bin/sh -e /var/tmp/rpm-tmp.hgma8Q\n+ umask 022\n+ cd /root/rpmbuild/BUILD\n+ cd getssl-2.49\n+ /usr/bin/rm -rf /root/rpmbuild/BUILDROOT/getssl-2.49-1.x86_64\n+ exit 0\n```\n\n## Building as a Debian Package\n\nIn order to build getssl as a Debian package, the program must be compressed into a tar.gz\nfile and the tar.gz file named to match the versioning information contained in the associated .spec file. Spec files are special files which contain instructions on how to build a particular package from a source code archive.  \n\nDebian Packages can be built using a utility called \"debbuild\" and use a top directory structure which is similar to that used by the RPM tool but using /root/debbuild/ as the \"top directory\".  These \"top directories\" will contain BUILD, BUILDROOT, SPECS, DEBS, SDEBS, and SOURCES subdirectories and follows a similar layout that is used for RPM files.  \n\nThe SPECS directory contains the \\*.spec files used to build DEB and SDEB packages.  The SOURCES subdirectory will contain the soure code archive file referred to in the \\*.spec file used to build the \nDEB and SDEB packages.\n\nSee the [Quick Start Guide](#quick-start-guide) on instructions for installing the \nsource SDEB which installs both the .spec file and source archive file (tar.gz) into \nthe debbuild top directory (i.e. /root/debbuild/).  You should have previously installed \nthe SDEB file before attempting to build the DEB package.  You can also manually \ninstall the .spec file into the \\<top directory\\>/SPECS/ directory and the source \ncode tarball in the \\<top directory\\/SOURCES/ directory, then attempt to build the \nDEB package.\n\nTo build getssl using debbuild, change directories (cd) into the /root/debbuild/SPECS/ directory and enter the following command:\n```sh\ndebbuild -vv -ba getssl.spec <enter>\n```\nThe program should output the following if the build is successful and verify that the program\nwrote both the DEB and SDEB packages:\n\n```sh\nThis is debbuild, version 22.02.1\\ndebconfigdir:/usr/lib/debbuild\\nsysconfdir:/etc\\n\nLua: No Lua module loaded\nExecuting (%prep): /bin/sh -e /var/tmp/deb-tmp.prep.92007\n+ umask 022\n+ cd /root/debbuild/BUILD\n+ /bin/rm -rf getssl-2.49\n+ /bin/gzip -dc /root/debbuild/SOURCES/getssl-2.49.tar.gz\n+ /bin/tar -xf -\n+ STATUS=0\n+ '[' 0 -ne 0 ']'\n+ cd getssl-2.49\n+ /bin/chmod -Rf a+rX,u+w,go-w .\n+ exit 0\nExecuting (%build): /bin/sh -e /var/tmp/deb-tmp.build.40956\n+ umask 022\n+ cd /root/debbuild/BUILD\n+ cd getssl-2.49\n+ exit 0\nExecuting (%install): /bin/sh -e /var/tmp/deb-tmp.install.36647\n+ umask 022\n+ cd /root/debbuild/BUILD\n+ cd getssl-2.49\n+ '[' -n /root/debbuild/BUILDROOT/getssl-2.49-1.amd64 -a /root/debbuild/BUILDROOT/getssl-2.49-1.amd64 '!=' / ']'\n+ /bin/rm -rf /root/debbuild/BUILDROOT/getssl-2.49-1.amd64\n+ /bin/mkdir -p /root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/bin\n+ /bin/mkdir -p /root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts\n+ /bin/mkdir -p /root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/other_scripts\n+ /usr/bin/make DESTDIR=/root/debbuild/BUILDROOT/getssl-2.49-1.amd64 install\nmkdir -p /root/debbuild/BUILDROOT/getssl-2.49-1.amd64\ninstall -Dvm755 getssl /root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/bin/getssl\n'getssl' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/bin/getssl'\ninstall -dvm755 /root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl\nfor dir in *_scripts; do install -dv /root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/$dir; install -pv $dir/* /root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/$dir/; done\n'dns_scripts/Azure-README.txt' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/Azure-README.txt'\n'dns_scripts/Cloudflare-README.md' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/Cloudflare-README.md'\n'dns_scripts/DNS_IONOS.md' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/DNS_IONOS.md'\n'dns_scripts/DNS_ROUTE53.md' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/DNS_ROUTE53.md'\n'dns_scripts/GoDaddy-README.txt' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/GoDaddy-README.txt'\n'dns_scripts/dns_add_acmedns' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_acmedns'\n'dns_scripts/dns_add_azure' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_azure'\n'dns_scripts/dns_add_challtestsrv' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_challtestsrv'\n'dns_scripts/dns_add_clouddns' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_clouddns'\n'dns_scripts/dns_add_cloudflare' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_cloudflare'\n'dns_scripts/dns_add_cpanel' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_cpanel'\n'dns_scripts/dns_add_del_aliyun.sh' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_del_aliyun.sh'\n'dns_scripts/dns_add_dnspod' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_dnspod'\n'dns_scripts/dns_add_duckdns' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_duckdns'\n'dns_scripts/dns_add_dynu' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_dynu'\n'dns_scripts/dns_add_godaddy' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_godaddy'\n'dns_scripts/dns_add_hostway' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_hostway'\n'dns_scripts/dns_add_ionos' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_ionos'\n'dns_scripts/dns_add_ispconfig' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_ispconfig'\n'dns_scripts/dns_add_joker' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_joker'\n'dns_scripts/dns_add_lexicon' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_lexicon'\n'dns_scripts/dns_add_linode' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_linode'\n'dns_scripts/dns_add_manual' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_manual'\n'dns_scripts/dns_add_nsupdate' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_nsupdate'\n'dns_scripts/dns_add_ovh' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_ovh'\n'dns_scripts/dns_add_pdns-mysql' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_pdns-mysql'\n'dns_scripts/dns_add_vultr' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_vultr'\n'dns_scripts/dns_add_windows_dns_server' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_add_windows_dns_server'\n'dns_scripts/dns_del_acmedns' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_acmedns'\n'dns_scripts/dns_del_azure' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_azure'\n'dns_scripts/dns_del_challtestsrv' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_challtestsrv'\n'dns_scripts/dns_del_clouddns' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_clouddns'\n'dns_scripts/dns_del_cloudflare' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_cloudflare'\n'dns_scripts/dns_del_cpanel' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_cpanel'\n'dns_scripts/dns_del_dnspod' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_dnspod'\n'dns_scripts/dns_del_duckdns' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_duckdns'\n'dns_scripts/dns_del_dynu' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_dynu'\n'dns_scripts/dns_del_godaddy' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_godaddy'\n'dns_scripts/dns_del_hostway' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_hostway'\n'dns_scripts/dns_del_ionos' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_ionos'\n'dns_scripts/dns_del_ispconfig' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_ispconfig'\n'dns_scripts/dns_del_joker' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_joker'\n'dns_scripts/dns_del_lexicon' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_lexicon'\n'dns_scripts/dns_del_linode' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_linode'\n'dns_scripts/dns_del_manual' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_manual'\n'dns_scripts/dns_del_nsupdate' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_nsupdate'\n'dns_scripts/dns_del_ovh' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_ovh'\n'dns_scripts/dns_del_pdns-mysql' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_pdns-mysql'\n'dns_scripts/dns_del_vultr' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_vultr'\n'dns_scripts/dns_del_windows_dns_server' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_del_windows_dns_server'\n'dns_scripts/dns_freedns.sh' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_freedns.sh'\n'dns_scripts/dns_godaddy' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_godaddy'\n'dns_scripts/dns_route53.py' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/dns_route53.py'\n'dns_scripts/ispconfig_soap.php' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/dns_scripts/ispconfig_soap.php'\n'other_scripts/cpanel_cert_upload' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/other_scripts/cpanel_cert_upload'\n'other_scripts/iis_install_certeficate.ps1' -> '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/usr/share/getssl/other_scripts/iis_install_certeficate.ps1'\n+ install -Dpm 644 /root/debbuild/SOURCES/getssl.crontab /root/debbuild/BUILDROOT/getssl-2.49-1.amd64/etc/cron.d/getssl\n+ install -Dpm 644 /root/debbuild/SOURCES/getssl.logrotate /root/debbuild/BUILDROOT/getssl-2.49-1.amd64/etc/logrotate.d/getssl\n+ exit 0\nChecking library requirements...\nExecuting (package-creation): /bin/sh -e /var/tmp/deb-tmp.pkg.6107 for getssl\n+ umask 022\n+ cd /root/debbuild/BUILD\n+ /usr/bin/fakeroot -- /usr/bin/dpkg-deb -b /root/debbuild/BUILDROOT/getssl-2.49-1.amd64/main /root/debbuild/DEBS/all/getssl_2.49-1_all.deb\ndpkg-deb: warning: parsing file '/root/debbuild/BUILDROOT/getssl-2.49-1.amd64/main/DEBIAN/control' near line 10 package 'getssl':\n missing 'Maintainer' field\ndpkg-deb: warning: ignoring 1 warning about the control file(s)\ndpkg-deb: building package 'getssl' in '/root/debbuild/DEBS/all/getssl_2.49-1_all.deb'.\n+ exit 0\nExecuting (%clean): /bin/sh -e /var/tmp/deb-tmp.clean.52780\n+ umask 022\n+ cd /root/debbuild/BUILD\n+ '[' /root/debbuild/BUILDROOT/getssl-2.49-1.amd64 '!=' / ']'\n+ /bin/rm -rf /root/debbuild/BUILDROOT/getssl-2.49-1.amd64\n+ exit 0\nWrote source package getssl-2.49-1.sdeb in /root/debbuild/SDEBS.\nWrote binary package getssl_2.49-1_all.deb in /root/debbuild/DEBS/all\n```\n\n## Issues / problems / help\n\nIf you have any issues, please log them at <https://github.com/srvrco/getssl/issues>\n\nThere are additional help pages on the [wiki](https://github.com/srvrco/getssl/wiki)\n\nIf you have any suggestions for improvements then pull requests are\nwelcomed, or raise an issue.\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 1.3271484375,
          "content": "# How to do a release of getssl\n\n## Update the version and tag the release\n\n1. git pull\n2. git branch -c release_2_nn\n3. git switch release_2_nn\n4. update VERSION in `getssl` and `getssl.spec`\n5. git commit -m\"Update version to v2.nn\"\n6. git tag -a v2.nn\n7. git push origin release_2_nn\n8. git push --tags\n\n## Manually start the github release-and-package action\n\n1. Build the .deb and .rpm packages\n2. create a draft release containing the packages and the release note\n3. **IMPORTANT** make sure that the release references tag **v**N.NN otherwise getssl -u fails!\n\n## Can test the .deb file using the following steps\n\n1. Change the status from draft to pre-release\n2. Test that the package can be installed using a cloud instance\n   1. Start an Ubuntu ec2 instance from AWS Console (or Azure or Google Cloud)\n   2. Or use the instant-ec2.sh script from my Github gist to start an Ubuntu ec2 instance\n      1. `git clone git@gist.github.com:12c297e0645920c413273c9d15edbc68.git instant-ec2`\n      2. `./instant-ec2/instant-ec2.sh`\n3. download the deb package\n   `wget https://github.com/srvrco/getssl/releases/download/v2.nn/getssl_2.nn-1_all.deb`\n4. install the deb package\n   `dpkg -i getssl_2.nn-1_all.deb`\n5. Check it's installed correctly\n   `getssl --version`\n\n## Update the latest tag post-release\n\n1. git tag -f -a latest\n2. git push --force --tags\n"
        },
        {
          "name": "common.shrc",
          "type": "blob",
          "size": 1.2431640625,
          "content": "# Simple cURL wrapper to manage nicely error handling:\n#\n# * In case of success, just read body from stdout\n# * In case of HTTP error (status >= 400), first stderr contains \"HTTP status: XXX\", then body\n# * In case of other error, just print cURL error on stderr\n#\n# This function requires a temporary file. It's created under ${TEMP_DIR} if defined and not empty.\n# Otherwise, it relies on `mktemp` defaults.\n#\ncurl.do() {\n  local rc=0\n\n  local mktemp_opts=( '--suffix=.curl' )\n  [[ -z \"${TEMP_DIR}\" ]] || mktemp_opts+=( \"--tempdir=${TEMP_DIR}\" )\n  local curl_body_file=''\n  curl_body_file=\"$(mktemp \"${mktemp_opts[@]}\")\" || {\n    rc=$?\n    echo \"Unable to create temporary file for cURL output\"\n    return $rc\n  } >&2\n\n  local curl_opts=(\n    --output \"${curl_body_file}\"\n    --write-out '%{http_code}'\n    --silent\n    --show-error\n    \"$@\"\n  )\n  local http_code=''\n  http_code=\"$(curl \"${curl_opts[@]}\")\" || rc=$?\n\n  (( http_code < 400 )) || {\n    (( rc == 0 )) || rc=1\n    echo \"HTTP status: ${http_code}\"\n  } >&2\n\n  if [[ $rc == 0 ]]; then\n    cat \"${curl_body_file}\" || rc=$?\n  else\n    cat \"${curl_body_file}\" >&2\n  fi\n\n  rm -rf \"${curl_body_file}\" || {\n    (( rc == 0 )) || rc=1\n    echo \"Unable to clear temporary file '${curl_body_file}'\"\n  } >&2\n  return $rc\n}\n"
        },
        {
          "name": "debbuild.patch",
          "type": "blob",
          "size": 0.517578125,
          "content": "--- /usr/bin/debbuild\t2022-11-11 15:34:22.529876000 +0000\n+++ /usr/bin/debbuild.fix\t2022-11-11 15:34:53.137410000 +0000\n@@ -1956,7 +1956,7 @@\n   my $srcpkg = shift;\n   die _('Can\\'t install ').$srcpkg.\"\\n\" unless $srcpkg =~ /\\.sdeb$/;\n   $srcpkg = abs_path($srcpkg);\n-  system(expandmacros(\"cd %{_topdir}; %{__pax} -r -f $srcpkg)\")) == 0 and\n+  system(expandmacros(\"cd %{_topdir}; %{__pax} -r -f $srcpkg\")) == 0 and\n   $finalmessages .= _('Extracted source package ').$srcpkg.\n     _(\" to %{_topdir}.\\n\");\n } # end install_sdeb()\n"
        },
        {
          "name": "dns_scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.765625,
          "content": "services:\n  pebble:\n    image: ghcr.io/letsencrypt/pebble:latest\n    # TODO enable -strict\n    command: -dnsserver 10.30.50.3:53\n    environment:\n      # with Go 1.13.x which defaults TLS 1.3 to on\n      GODEBUG: \"tls13=1\"\n      PEBBLE_ALTERNATE_ROOTS: 2\n    ports:\n      - 14000:14000  # HTTPS ACME API\n      - 15000:15000  # HTTPS Management API\n    networks:\n      acmenet:\n        ipv4_address: 10.30.50.2\n  challtestsrv:\n    image: ghcr.io/letsencrypt/pebble-challtestsrv:latest\n    command: -defaultIPv6 \"\" -defaultIPv4 10.30.50.3 -dns01 \":53\"\n    ports:\n      - 8055:8055  # HTTP Management API\n    networks:\n      acmenet:\n        ipv4_address: 10.30.50.3\n\n\nnetworks:\n  acmenet:\n    driver: bridge\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.30.50.0/24\n"
        },
        {
          "name": "getssl",
          "type": "blob",
          "size": 142.763671875,
          "content": "#!/usr/bin/env bash\n# ---------------------------------------------------------------------------\n# getssl - Obtain SSL certificates from the letsencrypt.org ACME server\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License at <http://www.gnu.org/licenses/> for\n# more details.\n\n# For usage, run \"getssl -h\" or see https://github.com/srvrco/getssl\n\n# ACMEv2 process is documented at https://tools.ietf.org/html/rfc8555#section-7.4\n\n# Revision history:\n# 2016-01-08 Created (v0.1)\n# 2016-01-11 type correction and upload to github (v0.2)\n# 2016-01-11 added import of any existing cert on -c  option (v0.3)\n# 2016-01-12 corrected formatting of imported certificate (v0.4)\n# 2016-01-12 corrected error on removal of token in some instances (v0.5)\n# 2016-01-18 corrected issue with removing tmp if run as root with the -c option (v0.6)\n# 2016-01-18 added option to upload a single PEN file ( used by cpanel) (v0.7)\n# 2016-01-23 added dns challenge option (v0.8)\n# 2016-01-24 create the ACL directory if it does not exist. (v0.9) - dstosberg\n# 2016-01-26 correcting a couple of small bugs and allow curl to follow redirects (v0.10)\n# 2016-01-27 add a very basic openssl.cnf file if it doesn't exist and tidy code slightly (v0.11)\n# 2016-01-28 Typo corrections, quoted file variables and fix bug on DNS_DEL_COMMAND (v0.12)\n# 2016-01-28 changed DNS checks to use nslookup and allow hyphen in domain names (v0.13)\n# 2016-01-29 Fix ssh-reload-command, extra waiting for DNS-challenge,\n# 2016-01-29 add error_exit and cleanup help message (v0.14)\n# 2016-01-29 added -a|--all option to renew all configured certificates (v0.15)\n# 2016-01-29 added option for elliptic curve keys (v0.16)\n# 2016-01-29 added server-type option to use and check cert validity from website (v0.17)\n# 2016-01-30 added --quiet option for running in cron (v0.18)\n# 2016-01-31 removed usage of xxd to make script more compatible across versions (v0.19)\n# 2016-01-31 removed usage of base64 to make script more compatible across platforms (v0.20)\n# 2016-01-31 added option to safe a full chain certificate (v0.21)\n# 2016-02-01 commented code and added option for copying concatenated certs to file (v0.22)\n# 2016-02-01 re-arrange flow for DNS-challenge, to reduce time taken (v0.23)\n# 2016-02-04 added options for other server types (ldaps, or any port) and check_remote (v0.24)\n# 2016-02-04 added short sleep following service restart before checking certs (v0.25)\n# 2016-02-12 fix challenge token location when directory doesn't exist (v0.26)\n# 2016-02-17 fix sed -E issue, and reduce length of renew check to 365 days for older systems (v0.27)\n# 2016-04-05 Ensure DNS cleanup on error exit. (0.28) - pecigonzalo\n# 2016-04-15 Remove NS Lookup of A record when using dns validation (0.29) - pecigonzalo\n# 2016-04-17 Improving the wording in a couple of comments and info statements. (0.30)\n# 2016-05-04 Improve check for if DNS_DEL_COMMAND is blank. (0.31)\n# 2016-05-06 Setting umask to 077 for security of private keys etc. (0.32)\n# 2016-05-20 update to reflect changes in staging ACME server json (0.33)\n# 2016-05-20 tidying up checking of json following ACME changes. (0.34)\n# 2016-05-21 added AUTH_DNS_SERVER to getssl.cfg as optional definition of authoritative DNS server (0.35)\n# 2016-05-21 added DNS_WAIT to getssl.cfg as (default = 10 seconds as before) (0.36)\n# 2016-05-21 added PUBLIC_DNS_SERVER option, for forcing use of an external DNS server (0.37)\n# 2016-05-28 added FTP method of uploading tokens to remote server (blocked for certs as not secure) (0.38)\n# 2016-05-28 added FTP method into the default config notes. (0.39)\n# 2016-05-30 Add sftp with password to copy files (0.40)\n# 2016-05-30 Add version check to see if there is a more recent version of getssl (0.41)\n# 2016-05-30 Add [-u|--upgrade] option to automatically upgrade getssl (0.42)\n# 2016-05-30 Added backup when auto-upgrading (0.43)\n# 2016-05-30 Improvements to auto-upgrade (0.44)\n# 2016-05-31 Improved comments - no structural changes\n# 2016-05-31 After running for nearly 6 months, final testing prior to a 1.00 stable version. (0.90)\n# 2016-06-01 Reorder functions alphabetically as part of code tidy. (0.91)\n# 2016-06-03 Version 1.0 of code for release (1.00)\n# 2016-06-09 bugfix of issue 44, and add success statement (ignoring quiet flag) (1.01)\n# 2016-06-13 test return status of DNS_ADD_COMMAND and error_exit if a problem (hadleyrich) (1.02)\n# 2016-06-13 bugfix of issue 45, problem with SERVER_TYPE when it's just a port number (1.03)\n# 2016-06-13 bugfix issue 47 - DNS_DEL_COMMAND cleanup was run when not required. (1.04)\n# 2016-06-15 add error checking on RELOAD_CMD (1.05)\n# 2016-06-20 updated sed and date functions to run on MAC OS X (1.06)\n# 2016-06-20 added CHALLENGE_CHECK_TYPE variable to allow checks direct on https rather than http (1.07)\n# 2016-06-21 updated grep functions to run on MAC OS X (1.08)\n# 2016-06-11 updated to enable running on windows with cygwin (1.09)\n# 2016-07-02 Corrections to work with older slackware issue #56 (1.10)\n# 2016-07-02 Updating help info re ACL in config file (1.11)\n# 2016-07-04 adding DOMAIN_STORAGE as a variable to solve for issue #59 (1.12)\n# 2016-07-05 updated order to better handle non-standard DOMAIN_STORAGE location (1.13)\n# 2016-07-06 added additional comments about SANS in example template (1.14)\n# 2016-07-07 check for duplicate domains in domain / SANS (1.15)\n# 2016-07-08 modified to be used on older bash for issue #64 (1.16)\n# 2016-07-11 added -w to -a option and comments in domain template (1.17)\n# 2016-07-18 remove / regenerate csr when generating new private domain key (1.18)\n# 2016-07-21 add output of combined private key and domain cert (1.19)\n# 2016-07-21 updated typo (1.20)\n# 2016-07-22 corrected issue in nslookup debug option - issue #74 (1.21)\n# 2016-07-26 add more server-types based on openssl s_client (1.22)\n# 2016-08-01 updated agreement for letsencrypt (1.23)\n# 2016-08-02 updated agreement for letsencrypt to update automatically (1.24)\n# 2016-08-03 improve messages on test of certificate installation (1.25)\n# 2016-08-04 remove carriage return from agreement - issue #80 (1.26)\n# 2016-08-04 set permissions for token folders - issue #81 (1.27)\n# 2016-08-07 allow default chained file creation - issue #85 (1.28)\n# 2016-08-07 use copy rather than move when archiving certs - issue #86 (1.29)\n# 2016-08-07 enable use of a single ACL for all checks (if USE_SINGLE_ACL=\"true\" (1.30)\n# 2016-08-23 check for already validated domains (issue #93) - (1.31)\n# 2016-08-23 updated already validated domains (1.32)\n# 2016-08-23 included better force_renew and template for USE_SINGLE_ACL (1.33)\n# 2016-08-23 enable insecure certificate on https token check #94 (1.34)\n# 2016-08-23 export OPENSSL_CONF so it's used by all openssl commands (1.35)\n# 2016-08-25 updated defaults for ACME agreement (1.36)\n# 2016-09-04 correct issue #101 when some domains already validated (1.37)\n# 2016-09-12 Checks if which is installed (1.38)\n# 2016-09-13 Don't check for updates, if -U parameter has been given (1.39)\n# 2016-09-17 Improved error messages from invalid certs (1.40)\n# 2016-09-19 remove update check on recursive calls when using -a (1.41)\n# 2016-09-21 changed shebang for portability (1.42)\n# 2016-09-21 Included option to Deactivate an Authorization (1.43)\n# 2016-09-22 retry on 500 error from ACME server (1.44)\n# 2016-09-22 added additional checks and retry on 500 error from ACME server (1.45)\n# 2016-09-24 merged in IPv6 support (1.46)\n# 2016-09-27 added additional debug info issue #119 (1.47)\n# 2016-09-27 removed IPv6 switch in favour of checking both IPv4 and IPv6 (1.48)\n# 2016-09-28 Add -Q, or --mute, switch to mute notifications about successfully upgrading getssl (1.49)\n# 2016-09-30 improved portability to work natively on FreeBSD, Slackware and Mac OS X (1.50)\n# 2016-09-30 comment out PRIVATE_KEY_ALG from the domain template Issue #125 (1.51)\n# 2016-10-03 check remote certificate for right domain before saving to local (1.52)\n# 2016-10-04 allow existing CSR with domain name in subject (1.53)\n# 2016-10-05 improved the check for CSR with domain in subject (1.54)\n# 2016-10-06 prints update info on what was included in latest updates (1.55)\n# 2016-10-06 when using -a flag, ignore folders in working directory which aren't domains (1.56)\n# 2016-10-12 allow multiple tokens in DNS challenge (1.57)\n# 2016-10-14 added CHECK_ALL_AUTH_DNS option to check all DNS servers, not just one primary server (1.58)\n# 2016-10-14 added archive of chain and private key for each cert, and purge old archives (1.59)\n# 2016-10-17 updated info comment on failed cert due to rate limits. (1.60)\n# 2016-10-17 fix error messages when using 1.0.1e-fips  (1.61)\n# 2016-10-20 set secure permissions when generating account key (1.62)\n# 2016-10-20 set permissions to 700 for getssl script during upgrade (1.63)\n# 2016-10-20 add option to revoke a certificate (1.64)\n# 2016-10-21 set revocation server default to acme-v01.api.letsencrypt.org (1.65)\n# 2016-10-21 bug fix for revocation on different servers. (1.66)\n# 2016-10-22 Tidy up archive code for certificates and reduce permissions for security\n# 2016-10-22 Add EC signing for secp384r1 and secp521r1 (the latter not yet supported by Let's  Encrypt\n# 2016-10-22 Add option to create a new private key for every cert (REUSE_PRIVATE_KEY=\"true\" by default)\n# 2016-10-22 Combine EC signing, Private key reuse and archive permissions (1.67)\n# 2016-10-25 added CHECK_REMOTE_WAIT option ( to pause before final remote check)\n# 2016-10-25 Added EC account key support ( prime256v1, secp384r1 ) (1.68)\n# 2016-10-25 Ignore DNS_EXTRA_WAIT if all domains already validated (issue #146) (1.69)\n# 2016-10-25 Add option for dual ESA / EDSA certs (1.70)\n# 2016-10-25 bug fix Issue #141 challenge error 400 (1.71)\n# 2016-10-26 check content of key files, not just recreate if missing.\n# 2016-10-26 Improvements on portability (1.72)\n# 2016-10-26 Date formatting for busybox (1.73)\n# 2016-10-27 bug fix - issue #157 not recognising EC keys on some versions of openssl (1.74)\n# 2016-10-31 generate EC account keys and tidy code.\n# 2016-10-31 fix warning message if cert doesn't exist (1.75)\n# 2016-10-31 remove only specified DNS token #161 (1.76)\n# 2016-11-03 Reduce long lines, and remove echo from update (1.77)\n# 2016-11-05 added TOKEN_USER_ID (to set ownership of token files )\n# 2016-11-05 updated style to work with latest shellcheck (1.78)\n# 2016-11-07 style updates\n# 2016-11-07 bug fix DOMAIN_PEM_LOCATION starting with ./ #167\n# 2016-11-08 Fix for openssl 1.1.0  #166 (1.79)\n# 2016-11-08 Add and comment optional sshuserid for ssh ACL (1.80)\n# 2016-11-09 Add SKIP_HTTP_TOKEN_CHECK option (Issue #170) (1.81)\n# 2016-11-13 bug fix DOMAIN_KEY_CERT generation (1.82)\n# 2016-11-17 add PREVENT_NON_INTERACTIVE_RENEWAL option (1.83)\n# 2016-12-03 add HTTP_TOKEN_CHECK_WAIT option (1.84)\n# 2016-12-03 bugfix CSR renewal when no SANS and when using MINGW (1.85)\n# 2016-12-16 create CSR_SUBJECT variable - Issue #193\n# 2016-12-16 added fullchain to archive (1.86)\n# 2016-12-16 updated DOMAIN_PEM_LOCATION when using DUAL_RSA_ECDSA (1.87)\n# 2016-12-19 allow user to ignore permission preservation with nfsv3 shares (1.88)\n# 2016-12-19 bug fix for CA (1.89)\n# 2016-12-19 included IGNORE_DIRECTORY_DOMAIN option (1.90)\n# 2016-12-22 allow copying files to multiple locations (1.91)\n# 2016-12-22 bug fix for copying tokens to multiple locations (1.92)\n# 2016-12-23 tidy code - place default variables in alphabetical order.\n# 2016-12-27 update checks to work with openssl in FIPS mode (1.93)\n# 2016-12-28 fix leftover tmpfiles in upgrade routine (1.94)\n# 2016-12-28 tidied up upgrade tmpfile handling (1.95)\n# 2017-01-01 update comments\n# 2017-01-01 create stable release 2.0 (2.00)\n# 2017-01-02 Added option to limit number of old versions to keep (2.01)\n# 2017-01-03 Created check_config function to list all obvious config issues (2.02)\n# 2017-01-10 force renew if FORCE_RENEWAL file exists (2.03)\n# 2017-01-12 added drill, dig or host as alternatives to nslookup (2.04)\n# 2017-01-18 bugfix issue #227 - error deleting csr if doesn't exist\n# 2017-01-18 issue #228 check private key and account key are different (2.05)\n# 2017-01-21 issue #231 mingw bugfix and typos in debug messages (2.06)\n# 2017-01-29 issue #232 use neutral locale for date formatting (2.07)\n# 2017-01-30 issue #243 compatibility with bash 3.0 (2.08)\n# 2017-01-30 issue #243 additional compatibility with bash 3.0 (2.09)\n# 2017-02-18 add OCSP Must-Staple to the domain csr generation (2.10)\n# 2018-01-04 updating to use the updated letsencrypt APIv2\n# 2019-09-30 issue #423 Use HTTP 1.1 as workaround atm (2.11)\n# 2019-10-02 issue #425 Case insensitive processing of agreement url because of HTTP/2 (2.12)\n# 2019-10-07 update DNS checks to allow use of CNAMEs (2.13)\n# 2019-11-18 Rebased master onto APIv2 and added Content-Type: application/jose+json (2.14)\n# 2019-11-20 #453 and #454 Add User-Agent to all curl requests\n# 2019-11-22 #456 Fix shellcheck issues\n# 2019-11-23 #459 Fix missing chain.crt\n# 2019-12-18 #462 Use POST-as-GET for ACMEv2 endpoints\n# 2020-01-07 #464 and #486 \"json was blank\" (change all curl request to use POST-as-GET)\n# 2020-01-08 Error and exit if rate limited, exit if curl returns nothing\n# 2020-01-10 Change domain and getssl templates to v2 (2.15)\n# 2020-01-17 #473 and #477 Don't use POST-as-GET when sending ready for challenge for ACMEv1 (2.16)\n# 2020-01-22 #475 and #483 Fix grep regex for >9 subdomains in json_get\n# 2020-01-24 Add support for CloudDNS\n# 2020-01-24 allow file transfer using WebDAV over HTTPS\n# 2020-01-26 Use urlbase64_decode() instead of base64 -d\n# 2020-01-26 Fix \"already verified\" error for ACMEv2\n# 2020-01-29 Check awk new enough to support json_awk\n# 2020-02-05 Fix epoch_date for busybox\n# 2020-02-06 Bugfixes for json_awk and nslookup to support old awk versions (2.17)\n# 2020-02-11 Add SCP_OPTS and SFTP_OPTS\n# 2020-02-12 Fix for DUAL_RSA_ECDSA not working with ACMEv2 (#334, #474, #502)\n# 2020-02-12 Fix #424 - Sporadic \"error in EC signing couldn't get R from ...\" (2.18)\n# 2020-02-12 Fix \"Registration key already in use\" (2.19)\n# 2020-02-13 Fix bug with copying to all locations when creating RSA and ECDSA certs (2.20)\n# 2020-02-22 Change sign_string to use openssl asn1parse (better fix for #424)\n# 2020-02-23 Add dig to config check for systems without drill (ubuntu)\n# 2020-03-11 Use dig +trace to find primary name server and improve dig parsing of CNAME\n# 2020-03-12 Fix bug with DNS validation and multiple domains (#524)\n# 2020-03-24 Find primary ns using all dns utils (dig, host, nslookup)\n# 2020-03-23 Fix staging server URL in domain template (2.21)\n# 2020-03-30 Fix error message find_dns_utils from over version of \"command\"\n# 2020-03-30 Fix problems if domain name isn't in lowercase (2.22)\n# 2020-04-16 Add alternative working dirs '/etc/getssl/' '${PROGDIR}/conf' '${PROGDIR}/.getssl'\n# 2020-04-16 Add -i|--install command line option (2.23)\n# 2020-04-19 Remove dependency on seq, ensure clean_up doesn't try to delete /tmp (2.24)\n# 2020-04-20 Check for domain using all DNS utilities (2.25)\n# 2020-04-22 Fix HAS_HOST and HAS_NSLOOKUP checks - wolfaba\n# 2020-04-22 Fix domain case conversion for different locales - glynge (2.26)\n# 2020-04-26 Fixed ipv4 confirmation with nslookup - Cyber1000\n# 2020-04-29 Fix ftp/sftp problems if challenge starts with a dash\n# 2020-05-06 Fix missing fullchain.ec.crt when creating dual certificates (2.27)\n# 2020-05-14 Add --notify-valid option (exit 2 if certificate is valid)\n# 2020-05-23 Fix --revoke (didn't work with ACMEv02) (2.28)\n# 2020-06-06 Fix missing URL_revoke definition when no CA directory suffix (#566)\n# 2020-06-18 Fix CHECK_REMOTE for DUAL_RSA_ECDSA (#570)\n# 2020-07-14 Support space separated SANS (#574) (2.29)\n# 2020-08-06 Use -sigalgs instead of -cipher when checking remote for tls1.3 (#570)\n# 2020-08-31 Fix slow fork bomb when directory containing getssl isn't writeable (#440)\n# 2020-09-01 Use RSA-PSS when checking remote for DUAL_RSA_ECDSA (#570)\n# 2020-09-02 Fix issue when SANS is space and comma separated (#579) (2.30)\n# 2020-10-02 Various fixes to get_auth_dns and changes to support unit tests (#308)\n# 2020-10-04 Add CHECK_PUBLIC_DNS_SERVER to check the DNS challenge has been updated there\n# 2020-10-13 Bugfix: strip comments in drill/dig output (mhameed)\n# 2020-11-18 Wildcard support (#347)(#400)(2.31)\n# 2020-12-08 Fix mktemp template on alpine (#612)\n# 2020-12-17 Fix delimiter issues with ${alldomains[]} in create_csr (#614)(vietw)\n# 2020-12-18 Wrong SANS when domain contains a minus character (atisne)\n# 2020-12-22 Fixes to get_auth_dns\n# 2020-12-22 Check that dig doesn't return an error (#611)(2.32)\n# 2020-12-29 Fix dig SOA lookup (#617)(2.33)\n# 2021-01-05 Show error if running in POSIX mode (#611)\n# 2021-01-16 Fix double slash when using root directory with DAVS (ionos)\n# 2021-01-22 Add FTP_OPTIONS\n# 2021-01-27 Add the ability to set several reload commands (atisne)\n# 2021-01-29 Use dig -r (if supported) to ignore.digrc (#630)\n# 2021-02-07 Allow -u --upgrade without any domain, so that one can only update the script (Benno-K)(2.34)\n# 2021-02-09 Prevent listing the complete file if version tag missing (#637)(softins)\n# 2021-02-12 Add PREFERRED_CHAIN\n# 2021-02-15 ADD ftp explicit SSL with curl for upload the challenge (CoolMischa)\n# 2021-02-18 Add FULL_CHAIN_INCLUDE_ROOT\n# 2021-03-25 Fix DNS challenge completion check if CNAMEs on different NS are used (sideeffect42)(2.35)\n# 2021-05-08 Merge from tlhackque/getssl: GoDaddy, split-view, tempfile permissions fixes, --version(2.36)\n# 2021-07-07 Request new certificate if SANs have changed (#669)(#673)\n# 2021-07-12 Do not redirect outputs on remote commands when the debug option is used (atisne)\n# 2021-07-20 Use +noidnout to enable certificates for IDN domains (#679)(2.37)\n# 2021-07-22 Only pass +noidnout param to dig/drill(#682)(2.38)\n# 2021-07-25 Fix copy_file_to_location failures with ssh when suffix applied to file lacking an extension (tlhackque)(#686)\n# 2021-07-27 Support ftps://, FTPS_OPTIONS, remove default --insecure parameter to ftpes. Report caller(s) of error_exit in debug and test modes (tlhackque)(#687)(2.39)\n# 2021-07-30 Prefer API V2 when both offered (tlhackque) (#690) (2.40)\n# 2021-07-30 Run tests with -d to catch intermittent failures, Use fork's repo for upgrade tests. (tlhackque) (#692) (2.41)\n# 2021-08-26 Improve upgrade check & make upgrade do a full install when possible (tlhackque) (#694) (2.42)\n# 2021-09-02 Fix version compare - cURL v8 may have single digit minor numbers. (tlhackque) (2.43)\n# 2021-09-26 Delete key file when key algorithm has changed (makuhama)\n# 2021-09-30 better error if curl returns 60 (#709)\n# 2021-10-01 Fix -preferred-chain argument (#712)\n# 2021-10-01 Show help if no domain specified (#705)(2.44)\n# 2021-10-08 Extract release tag from release api using awk (fix BSD issues)\n# 2021-10-11 Fix broken upgrade url (#718)(2.45)\n# 2021-10-22 Copy fullchain to DOMAIN_CHAIN_LOCATION (amartin-git)\n# 2021-11-10 Detect Solaris and use gnu tools (#701)(miesi)\n# 2021-11-12 Support acme-dns and fix CNAME issues (#722)(#308)\n# 2021-12-14 Enhancements for GoDaddy (support more levels of domain names, no longer require GODADDY_BASE, and actual deletion of resource records)\n# 2021-12-22 Don't show usage if run with --upgrade (#728)\n# 2021-12-23 Don't use +idnout if dig shows a warning (#688)\n# 2022-01-06 Support --account-id (#716)(2.46)\n# 2022-03-09 Support for ISPConfig API\n# 2022-05-03 Windows Server and IIS support (2.47)\n# 2022-05-18 Add FTP_ARGS\n# 2022-11-01 Add FTP_PORT\n# 2023-02-04 Create newline to ensure [SAN] section can be parsed (#792)(MRigal)\n# 2023-02-22 Remove cronie from deb package dependencies (2.48)\n# 2024-03-18 Refresh the TXT record if a CNAME is found (JoergBruce #828) (2.49)\n# 2024-03-26 Test for \"true\" in wildcard property of authorization responses\n# 2024-10-16 Add newlines to /directory response (#765)(#859)\n# ----------------------------------------------------------------------------------------\n\ncase :$SHELLOPTS: in\n  *:posix:*)   echo -e \"${0##*/}: Running with POSIX mode enabled is not supported\" >&2; exit 1;;\nesac\n\nPROGNAME=${0##*/}\nPROGDIR=\"$(cd \"$(dirname \"$0\")\" || exit; pwd -P;)\"\nVERSION=\"2.49\"\n\n# defaults\nACCOUNT_KEY_LENGTH=4096\nACCOUNT_KEY_TYPE=\"rsa\"\nCA_CERT_LOCATION=\"\"\nCA=\"https://acme-staging-v02.api.letsencrypt.org/directory\"\nCHALLENGE_CHECK_TYPE=\"http\"\nCHECK_REMOTE_WAIT=0\nCHECK_REMOTE=\"true\"\nif [[ -n \"${GITHUB_REPOSITORY}\" ]] ; then\n  CODE_LOCATION=\"https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/master/getssl\"\n  RELEASE_API=\"https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest\"\nelse\n  CODE_LOCATION=\"https://raw.githubusercontent.com/srvrco/getssl/master/getssl\"\n  RELEASE_API=\"https://api.github.com/repos/srvrco/getssl/releases/latest\"\nfi\nCSR_SUBJECT=\"/\"\nCURL_USERAGENT=\"${PROGNAME}/${VERSION}\"\nDEACTIVATE_AUTH=\"false\"\nDEFAULT_REVOKE_CA=\"https://acme-v02.api.letsencrypt.org\"\nDOMAIN_KEY_LENGTH=4096\nDUAL_RSA_ECDSA=\"false\"\nFTP_OPTIONS=\"\"\nFTPS_OPTIONS=\"\"\nFTP_ARGS=\"\"\nFTP_PORT=\"\"\nFULL_CHAIN_INCLUDE_ROOT=\"false\"\nGETSSL_IGNORE_CP_PRESERVE=\"false\"\nHTTP_TOKEN_CHECK_WAIT=0\nIGNORE_DIRECTORY_DOMAIN=\"false\"\nOCSP_MUST_STAPLE=\"false\"\nORIG_UMASK=$(umask)\nPREFERRED_CHAIN=\"\"              # Set this to use an alternative root certificate\nPREVIOUSLY_VALIDATED=\"true\"\nPRIVATE_KEY_ALG=\"rsa\"\nRELOAD_CMD=\"\"\nRENEW_ALLOW=\"30\"\nREUSE_PRIVATE_KEY=\"true\"\nSERVER_TYPE=\"https\"\nSKIP_HTTP_TOKEN_CHECK=\"false\"\nSSLCONF=\"$(openssl version -d 2>/dev/null| cut -d\\\" -f2)/openssl.cnf\"\nTOKEN_USER_ID=\"\"\nUSE_SINGLE_ACL=\"false\"\nWORKING_DIR_CANDIDATES=(\"/etc/getssl\" \"${PROGDIR}/conf\" \"${PROGDIR}/.getssl\" \"${HOME}/.getssl\")\n\n# Variables used when validating using a DNS entry\nVALIDATE_VIA_DNS=\"\"             # Set this to \"true\" to enable DNS validation\nexport AUTH_DNS_SERVER=\"\"       # Use this DNS server to check the challenge token has been set\nexport DNS_CHECK_OPTIONS=\"\"     # Options (such as TSIG file) required by DNS_CHECK_FUNC\nexport PUBLIC_DNS_SERVER=\"\"     # Use this DNS server to find the authoritative DNS servers for the domain\nCHECK_ALL_AUTH_DNS=\"false\"      # Check the challenge token has been set on all authoritative DNS servers\nCHECK_PUBLIC_DNS_SERVER=\"true\"  # Check the public DNS server as well as the authoritative DNS servers\nDNS_ADD_COMMAND=\"\"              # Use this command/script to add the challenge token to the DNS entries for the domain\nDNS_DEL_COMMAND=\"\"              # Use this command/script to remove the challenge token from the DNS entries for the domain\nDNS_WAIT_COUNT=100              # How many times to wait for the DNS record to update\nDNS_WAIT=10                     # How long to wait before checking the DNS record again\nDNS_EXTRA_WAIT=60               # How long to wait after the DNS entries are visible to us before telling the ACME server to check.\nDNS_WAIT_RETRY_ADD=\"false\"      # Try the dns_add_command again if the DNS record hasn't updated\n\n# Private variables\n_CHECK_ALL=0\n_CREATE_CONFIG=0\n_CURL_VERSION=\"\"\n_FORCE_RENEW=0\n_MUTE=0\n_NOTIFY_VALID=0\n_NOMETER=\"\"\n_QUIET=0\n_RECREATE_CSR=0\n_REDIRECT_OUTPUT=\"1>/dev/null 2>&1\"\n_REVOKE=0\n_SHOW_ACCOUNT_ID=0\n_TEST_SKIP_CNAME_CALL=0\n_TEST_SKIP_SOA_CALL=0\n_UPGRADE=0\n_UPGRADE_CHECK=1\n_UPGRADE_TO_TAG=\"\"\n_USE_DEBUG=0\n_ONLY_CHECK_CONFIG=0\nconfig_errors=\"false\"\nexport LANG=C\nAPI=1\n\n# store copy of original command in case of upgrading script and re-running\nORIGCMD=\"$0 $*\"\n\n# Define all functions (in alphabetical order)\n\nauto_upgrade_v2() {  # Automatically update clients to v2\n  if [[ \"${CA}\" == *\"acme-v01.\"* ]] || [[ \"${CA}\" == *\"acme-staging.\"* ]]; then\n    OLDCA=${CA}\n    # shellcheck disable=SC2001\n    CA=$(echo \"${OLDCA}\" | sed \"s/v01/v02/g\")\n    # shellcheck disable=SC2001\n    CA=$(echo \"${CA}\" | sed \"s/staging/staging-v02/g\")\n    info \"Upgraded to v2 (changed ${OLDCA} to ${CA})\"\n  fi\n  debug \"Using certificate issuer: ${CA}\"\n}\n\ncert_archive() {  # Archive certificate file by copying files to dated archive dir.\n  debug \"creating an archive copy of current new certs\"\n  date_time=$(date +%Y_%m_%d_%H_%M)\n  mkdir -p \"${DOMAIN_DIR}/archive/${date_time}\"\n  umask 077\n  cp \"$CERT_FILE\" \"${DOMAIN_DIR}/archive/${date_time}/${DOMAIN}.crt\"\n  cp \"$DOMAIN_DIR/${DOMAIN}.csr\" \"${DOMAIN_DIR}/archive/${date_time}/${DOMAIN}.csr\"\n  cp \"$DOMAIN_DIR/${DOMAIN}.key\" \"${DOMAIN_DIR}/archive/${date_time}/${DOMAIN}.key\"\n  cp \"$CA_CERT\" \"${DOMAIN_DIR}/archive/${date_time}/chain.crt\"\n  cat \"$CERT_FILE\" \"$CA_CERT\" > \"${DOMAIN_DIR}/archive/${date_time}/fullchain.crt\"\n  if [[ \"$DUAL_RSA_ECDSA\" == \"true\" ]]; then\n    cp \"${CERT_FILE%.*}.ec.crt\" \"${DOMAIN_DIR}/archive/${date_time}/${DOMAIN}.ec.crt\"\n    cp \"$DOMAIN_DIR/${DOMAIN}.ec.csr\" \"${DOMAIN_DIR}/archive/${date_time}/${DOMAIN}.ec.csr\"\n    cp \"$DOMAIN_DIR/${DOMAIN}.ec.key\" \"${DOMAIN_DIR}/archive/${date_time}/${DOMAIN}.ec.key\"\n    cp \"${CA_CERT%.*}.ec.crt\" \"${DOMAIN_DIR}/archive/${date_time}/chain.ec.crt\"\n    cat \"${CERT_FILE%.*}.ec.crt\" \"${CA_CERT%.*}.ec.crt\" > \"${DOMAIN_DIR}/archive/${date_time}/fullchain.ec.crt\"\n  fi\n  umask \"$ORIG_UMASK\"\n  debug \"purging old GetSSL archives\"\n  purge_archive \"$DOMAIN_DIR\"\n}\n\nbase64url_decode() {\n    awk '{ if (length($0) % 4 == 3) print $0\"=\"; else if (length($0) % 4 == 2) print $0\"==\"; else print $0; }' | tr -- '-_' '+/' | base64 -d\n}\n\ncert_install() {  # copy certs to the correct location (creating concatenated files as required)\n  umask 077\n\n  copy_file_to_location \"domain certificate\" \"$CERT_FILE\" \"$DOMAIN_CERT_LOCATION\"\n  copy_file_to_location \"private key\" \"$DOMAIN_DIR/${DOMAIN}.key\" \"$DOMAIN_KEY_LOCATION\"\n  copy_file_to_location \"CA certificate\" \"$CA_CERT\" \"$CA_CERT_LOCATION\"\n  if [[ \"$DUAL_RSA_ECDSA\" == \"true\" ]]; then\n    if [[ -n \"$DOMAIN_CERT_LOCATION\" ]]; then\n      copy_file_to_location \"ec domain certificate\" \\\n                            \"${CERT_FILE%.*}.ec.crt\" \\\n                            \"${DOMAIN_CERT_LOCATION}\" \\\n                            \"ec\"\n    fi\n    if [[ -n \"$DOMAIN_KEY_LOCATION\" ]]; then\n      copy_file_to_location \"ec private key\" \\\n                            \"$DOMAIN_DIR/${DOMAIN}.ec.key\" \\\n                            \"${DOMAIN_KEY_LOCATION}\" \\\n                            \"ec\"\n    fi\n    if [[ -n \"$CA_CERT_LOCATION\" ]]; then\n      copy_file_to_location \"ec CA certificate\" \\\n                            \"${CA_CERT%.*}.ec.crt\" \\\n                            \"${CA_CERT_LOCATION%.*}.crt\" \\\n                            \"ec\"\n    fi\n  fi\n\n  # if DOMAIN_CHAIN_LOCATION is not blank, then create and copy file.\n  if [[ -n \"$DOMAIN_CHAIN_LOCATION\" ]]; then\n    if [[ \"$(dirname \"$DOMAIN_CHAIN_LOCATION\")\" == \".\" ]]; then\n      to_location=\"${DOMAIN_DIR}/${DOMAIN_CHAIN_LOCATION}\"\n    else\n      to_location=\"${DOMAIN_CHAIN_LOCATION}\"\n    fi\n    cat \"$FULL_CHAIN\" > \"$TEMP_DIR/${DOMAIN}_chain.pem\"\n    copy_file_to_location \"full chain\" \"$TEMP_DIR/${DOMAIN}_chain.pem\"  \"$to_location\"\n    if [[ \"$DUAL_RSA_ECDSA\" == \"true\" ]]; then\n      cat \"${CERT_FILE%.*}.ec.crt\" \"${CA_CERT%.*}.ec.crt\" > \"$TEMP_DIR/${DOMAIN}_chain.pem.ec\"\n      copy_file_to_location \"full chain\" \"$TEMP_DIR/${DOMAIN}_chain.pem.ec\"  \"${to_location}\" \"ec\"\n    fi\n  fi\n  # if DOMAIN_KEY_CERT_LOCATION is not blank, then create and copy file.\n  if [[ -n \"$DOMAIN_KEY_CERT_LOCATION\" ]]; then\n    if [[ \"$(dirname \"$DOMAIN_KEY_CERT_LOCATION\")\" == \".\" ]]; then\n      to_location=\"${DOMAIN_DIR}/${DOMAIN_KEY_CERT_LOCATION}\"\n    else\n      to_location=\"${DOMAIN_KEY_CERT_LOCATION}\"\n    fi\n    cat \"$DOMAIN_DIR/${DOMAIN}.key\" \"$CERT_FILE\" > \"$TEMP_DIR/${DOMAIN}_K_C.pem\"\n    copy_file_to_location \"private key and domain cert pem\" \"$TEMP_DIR/${DOMAIN}_K_C.pem\"  \"$to_location\"\n    if [[ \"$DUAL_RSA_ECDSA\" == \"true\" ]]; then\n      cat \"$DOMAIN_DIR/${DOMAIN}.ec.key\" \"${CERT_FILE%.*}.ec.crt\" > \"$TEMP_DIR/${DOMAIN}_K_C.pem.ec\"\n      copy_file_to_location \"private ec key and domain cert pem\" \"$TEMP_DIR/${DOMAIN}_K_C.pem.ec\" \"${to_location}\" \"ec\"\n    fi\n  fi\n  # if DOMAIN_PEM_LOCATION is not blank, then create and copy file.\n  if [[ -n \"$DOMAIN_PEM_LOCATION\" ]]; then\n    if [[ \"$(dirname \"$DOMAIN_PEM_LOCATION\")\" == \".\" ]]; then\n      to_location=\"${DOMAIN_DIR}/${DOMAIN_PEM_LOCATION}\"\n    else\n      to_location=\"${DOMAIN_PEM_LOCATION}\"\n    fi\n    cat \"$DOMAIN_DIR/${DOMAIN}.key\" \"$CERT_FILE\" \"$CA_CERT\" > \"$TEMP_DIR/${DOMAIN}.pem\"\n    copy_file_to_location \"full key, cert and chain pem\" \"$TEMP_DIR/${DOMAIN}.pem\"  \"$to_location\"\n    if [[ \"$DUAL_RSA_ECDSA\" == \"true\" ]]; then\n      cat \"$DOMAIN_DIR/${DOMAIN}.ec.key\" \"${CERT_FILE%.*}.ec.crt\" \"${CA_CERT%.*}.ec.crt\" > \"$TEMP_DIR/${DOMAIN}.pem.ec\"\n      copy_file_to_location \"full ec key, cert and chain pem\" \"$TEMP_DIR/${DOMAIN}.pem.ec\"  \"${to_location}\" \"ec\"\n    fi\n  fi\n  # end of copying certs.\n  umask \"$ORIG_UMASK\"\n}\n\ncheck_challenge_completion() { # checks with the ACME server if our challenge is OK\n  uri=$1\n  domain=$2\n  keyauthorization=$3\n\n  info \"sending request to ACME server saying we're ready for challenge\"\n\n  # check response from our request to perform challenge\n  if [[ $API -eq 1 ]]; then\n    send_signed_request \"$uri\" \"{\\\"resource\\\": \\\"challenge\\\", \\\"keyAuthorization\\\": \\\"$keyauthorization\\\"}\"\n\n    if [[ -n \"$code\" ]] && [[ ! \"$code\" == '202' ]] ; then\n      error_exit \"$domain:Challenge error: $code\"\n    fi\n  else # APIv2\n    send_signed_request \"$uri\" \"{}\"\n    if [[ -n \"$code\" ]] && [[ ! \"$code\" == '200' ]] ; then\n      detail=$(echo \"$response\" | grep \"detail\" | awk -F\\\" '{print $4}')\n      error_exit \"$domain:Challenge error: $code:Detail: $detail\"\n    fi\n  fi\n\n  # loop \"forever\" to keep checking for a response from the ACME server.\n  while true ; do\n    info \"checking if challenge is complete\"\n    if [[ $API -eq 1 ]]; then\n      if ! get_cr \"$uri\" ; then\n        error_exit \"$domain:Verify error:$code\"\n      fi\n    else # APIv2\n      send_signed_request \"$uri\" \"\"\n    fi\n\n    status=$(json_get \"$response\" status)\n\n    # If ACME response is valid, then break out of loop\n    if [[ \"$status\" == \"valid\" ]] ; then\n      info \"Verified $domain\"\n      break;\n    fi\n\n    # if ACME response is \"invalid\" then abandon the order request - returns error so it can be retried\n    if [[ \"$status\" == \"invalid\" ]] ; then\n      err_detail=$(echo \"$response\" | grep \"detail\")\n      info \"$domain:Verify error:$err_detail\"\n      return 1\n    fi\n\n    # if ACME response is pending (they haven't completed checks yet)\n    # or valid (completed checks but not created certificate) then wait and try again.\n    if [[ \"$status\" == \"pending\" ]] || [[ \"$status\" == \"valid\" ]] || [[ \"$status\" == \"processing\" ]]; then\n      info \"Pending\"\n    else\n      err_detail=$(echo \"$response\" | grep \"detail\")\n      error_exit \"$domain:Verify error:$status:$err_detail\"\n    fi\n    debug \"sleep 5 secs before testing verify again\"\n    sleep 5\n  done\n  return 0\n}\n\ncheck_challenge_completion_dns() { # perform validation via DNS challenge\n  d=${1}\n  rr=${2}\n  primary_ns=${3}\n  auth_key=${4}\n\n  # check for token at public dns server, waiting for a valid response.\n  for ns in $primary_ns; do\n    info \"checking DNS at $ns\"\n\n    # add +noidnout if idn-domain so search for domain in results works\n    if [[ \"${d}\" == xn--* || \"${d}\" == *\".xn--\"* ]]; then\n      if [[ \"$DNS_CHECK_FUNC\" == \"nslookup\" || \"$DNS_CHECK_FUNC\" == \"host\" || (\"$DNS_CHECK_FUNC\" == \"$HAS_DIG_OR_DRILL\" && \"$DIG_SUPPORTS_NOIDNOUT\" == \"false\") ]]; then\n        info \"Info: idn domain but $DNS_CHECK_FUNC doesn't support +noidnout\"\n      else\n        debug \"adding +noidnout to DNS_CHECK_OPTIONS\"\n        DNS_CHECK_OPTIONS=\"$DNS_CHECK_OPTIONS +noidnout\"\n      fi\n    fi\n\n    ntries=0\n    check_dns=\"fail\"\n    while [[ \"$check_dns\" == \"fail\" ]]; do\n      if [[ \"$os\" == \"cygwin\" || \"$os\" == \"mingw64_nt\"  || \"$os\" == \"msys_nt\" ]]; then\n        check_result=$(nslookup -type=txt \"${rr}.\" \"${ns}\" \\\n                      | grep ^_acme -A2\\\n                      | grep '\"'|awk -F'\"' '{ print $2}')\n      elif [[ \"$DNS_CHECK_FUNC\" == \"drill\" ]] || [[ \"$DNS_CHECK_FUNC\" == \"dig\" ]]; then\n        # shellcheck disable=SC2086\n        debug \"$DNS_CHECK_FUNC\" $DNS_CHECK_OPTIONS TXT \"${rr}\" \"@${ns}\"\n        # shellcheck disable=SC2086\n        check_output=$($DNS_CHECK_FUNC $DNS_CHECK_OPTIONS TXT \"${rr}\" \"@${ns}\")\n        check_result=$(grep -i \"^${rr}\"<<<\"${check_output}\"|grep 'IN\\WTXT'|awk -F'\"' '{ print $2}')\n        debug \"check_result=\\\"$check_result\\\"\"\n\n        # Check if rr is a CNAME\n        if [[ -z \"$check_result\" ]]; then\n          rr_cname=$(grep -i \"^${rr}\"<<<\"${check_output}\"|grep 'IN\\WCNAME'|awk '{ print $5}')\n          debug \"cname check=\\\"$rr_cname\\\"\"\n          if [[ -n \"$rr_cname\" ]]; then\n            # shellcheck disable=SC2086\n            check_output=$($DNS_CHECK_FUNC $DNS_CHECK_OPTIONS TXT \"${rr_cname}\" \"@${ns}\")\n            check_result=$(grep -i \"^${rr_cname}\"<<<\"${check_output}\"|grep 'IN\\WTXT'|awk -F'\"' '{ print $2}' | uniq)\n          fi\n        fi\n\n        if [[ -z \"$check_result\" ]]; then\n          # shellcheck disable=SC2086\n          debug \"$DNS_CHECK_FUNC\" $DNS_CHECK_OPTIONS ANY \"${rr}\" \"@${ns}\"\n          # shellcheck disable=SC2086\n          check_result=$($DNS_CHECK_FUNC $DNS_CHECK_OPTIONS ANY \"${rr}\" \"@${ns}\" \\\n                      | grep -i \"^${rr}\" \\\n                      | grep 'IN\\WTXT'|awk -F'\"' '{ print $2}')\n          debug \"check_result=\\\"$check_result\\\"\"\n        fi\n      elif [[ \"$DNS_CHECK_FUNC\" == \"host\" ]]; then\n        debug \"$DNS_CHECK_FUNC\" -t TXT \"${rr}\" \"${ns}\"\n        check_result=$($DNS_CHECK_FUNC -t TXT \"${rr}\" \"${ns}\" \\\n                      | grep 'descriptive text'|awk -F'\"' '{ print $2}')\n        debug \"check_result=\\\"$check_result\\\"\"\n      else\n        debug \"$DNS_CHECK_FUNC\" -type=txt \"${rr}\" \"${ns}\"\n        check_result=$(nslookup -type=txt \"${rr}\" \"${ns}\" \\\n                      | grep 'text ='|awk -F'\"' '{ print $2}')\n        debug \"check_result=\\\"$check_result\\\"\"\n        if [[ -z \"$check_result\" ]]; then\n          debug \"$DNS_CHECK_FUNC\" -type=any \"${rr}\" \"${ns}\"\n          check_result=$(nslookup -type=any \"${rr}\" \"${ns}\" \\\n                      | grep 'text ='|awk -F'\"' '{ print $2}')\n          debug \"check_result=\\\"$check_result\\\"\"\n        fi\n      fi\n      debug \"expecting  \\\"$auth_key\\\"\"\n      debug \"${ns} gave ... \\\"$check_result\\\"\"\n\n      if [[ \"$check_result\" == *\"$auth_key\"* ]]; then\n        check_dns=\"success\"\n      else\n        if [[ $ntries -lt $DNS_WAIT_COUNT ]]; then\n          ntries=$(( ntries + 1 ))\n\n          if [[ $DNS_WAIT_RETRY_ADD == \"true\" && $(( ntries % 10 )) == 0 ]]; then\n            debug \"Deleting DNS via command: ${DNS_DEL_COMMAND}\"\n            del_dns_rr \"${d}\" \"${auth_key}\"\n            debug \"Retrying adding DNS via command: ${DNS_ADD_COMMAND}\"\n            add_dns_rr \"${d}\" \"${auth_key}\" \\\n              || error_exit \"DNS_ADD_COMMAND failed for domain ${d}\"\n          fi\n          info \"checking DNS at ${ns} for ${rr}. Attempt $ntries/${DNS_WAIT_COUNT} gave wrong result, \"\\\n            \"waiting $DNS_WAIT secs before checking again\"\n          sleep $DNS_WAIT\n        else\n          debug \"dns check failed - removing existing value\"\n          del_dns_rr \"${d}\" \"${auth_key}\"\n\n          error_exit \"checking \\\"${rr}\\\" gave \\\"$check_result\\\" not \\\"$auth_key\\\"\"\n        fi\n      fi\n    done\n  done\n\n  if [[ \"$DNS_EXTRA_WAIT\" -gt 0 && \"$PREVIOUSLY_VALIDATED\" != \"true\" ]]; then\n    info \"sleeping $DNS_EXTRA_WAIT seconds before asking the ACME server to check the dns\"\n    sleep \"$DNS_EXTRA_WAIT\"\n  fi\n}\n# end of ... perform validation if via DNS challenge\n\ncheck_config() { # check the config files for all obvious errors\n  debug \"checking config\"\n\n  # check keys\n  case \"$ACCOUNT_KEY_TYPE\" in\n    rsa|prime256v1|secp384r1|secp521r1)\n      debug \"checked ACCOUNT_KEY_TYPE \" ;;\n    *)\n      info \"${DOMAIN}: invalid ACCOUNT_KEY_TYPE - $ACCOUNT_KEY_TYPE\"\n      config_errors=true ;;\n  esac\n  if [[ \"$ACCOUNT_KEY\" == \"$DOMAIN_DIR/${DOMAIN}.key\" ]]; then\n    info \"${DOMAIN}: ACCOUNT_KEY and domain key ( $DOMAIN_DIR/${DOMAIN}.key ) must be different\"\n    config_errors=true\n  fi\n  case \"$PRIVATE_KEY_ALG\" in\n    rsa|prime256v1|secp384r1|secp521r1)\n      debug \"checked PRIVATE_KEY_ALG \" ;;\n    *)\n      info \"${DOMAIN}: invalid PRIVATE_KEY_ALG - '$PRIVATE_KEY_ALG'\"\n      config_errors=true ;;\n  esac\n  if [[ \"$DUAL_RSA_ECDSA\" == \"true\" ]] && [[ \"$PRIVATE_KEY_ALG\" == \"rsa\" ]]; then\n    info \"${DOMAIN}: PRIVATE_KEY_ALG not set to an EC type and DUAL_RSA_ECDSA=\\\"true\\\"\"\n    config_errors=true\n  fi\n\n  # get all domains into an array\n  if [[ \"$IGNORE_DIRECTORY_DOMAIN\" == \"true\" ]]; then\n    read -r -a alldomains <<< \"${SANS//[, ]/ }\"\n  else\n    read -r -a alldomains <<< \"$(echo \"$DOMAIN,$SANS\" | sed \"s/,/ /g\")\"\n  fi\n  if [[ -z \"${alldomains[*]}\" ]]; then\n    info \"${DOMAIN}: no domains specified\"\n    config_errors=true\n  fi\n\n  if [[ $VALIDATE_VIA_DNS == \"true\" ]]; then # using dns-01 challenge\n    if [[ -z \"$DNS_ADD_COMMAND\" ]]; then\n      info \"${DOMAIN}: DNS_ADD_COMMAND not defined (whilst VALIDATE_VIA_DNS=\\\"true\\\")\"\n      config_errors=true\n    fi\n    if [[ -z \"$DNS_DEL_COMMAND\" ]]; then\n      info \"${DOMAIN}: DNS_DEL_COMMAND not defined (whilst VALIDATE_VIA_DNS=\\\"true\\\")\"\n      config_errors=true\n    fi\n  fi\n\n  dn=0\n  tmplist=$(mktemp 2>/dev/null || mktemp -t getssl.XXXXXX) || error_exit \"mktemp failed\"\n  for d in \"${alldomains[@]}\"; do # loop over domains (dn is domain number)\n    debug \"checking domain $d\"\n\n    if [[ \"$(grep \"^${d}$\" \"$tmplist\")\" = \"$d\" ]]; then\n      info \"${DOMAIN}: $d appears to be duplicated in domain, SAN list\"\n      config_errors=true\n    elif [[ \"$d\" != \"${d##\\*.}\" ]] && [[ \"$VALIDATE_VIA_DNS\" != \"true\" ]]; then\n      info \"${DOMAIN}: cannot use http-01 validation for wildcard domains\"\n      config_errors=true\n    else\n      echo \"$d\" >> \"$tmplist\"\n    fi\n\n    if [[ \"$USE_SINGLE_ACL\" == \"true\" ]]; then\n      DOMAIN_ACL=\"${ACL[0]}\"\n    else\n      DOMAIN_ACL=\"${ACL[$dn]}\"\n    fi\n\n    if [[ $VALIDATE_VIA_DNS != \"true\" ]]; then # using http-01 challenge\n      if [[ -z \"${DOMAIN_ACL}\" ]]; then\n        info \"${DOMAIN}: ACL location not specified for domain $d in $DOMAIN_DIR/getssl.cfg\"\n        config_errors=true\n      fi\n\n      # check domain exists using all DNS utilities. DNS_CHECK_OPTIONS may bind IP address or provide TSIG\n\n      found_ip=false\n      if [[ -n \"$HAS_DIG_OR_DRILL\" ]]; then\n        # add +noidnout if idn-domain so search for domain in results works\n        DIG_CHECK_OPTIONS=\"$DNS_CHECK_OPTIONS\"\n        if [[ (\"${d}\" == xn--* || \"${d}\" == *\".xn--\"* ) && \"$DIG_SUPPORTS_NOIDNOUT\" == \"true\" ]]; then\n          DIG_CHECK_OPTIONS=\"$DNS_CHECK_OPTIONS +noidnout\"\n        fi\n\n        debug \"DNS lookup using $HAS_DIG_OR_DRILL $DIG_CHECK_OPTIONS ${d}\"\n        # shellcheck disable=SC2086\n        if [[ \"$($HAS_DIG_OR_DRILL $DIG_CHECK_OPTIONS -t SOA \"${d}\" |grep -c -i \"^${d}\")\" -ge 1 ]]; then\n          found_ip=true\n        elif [[ \"$($HAS_DIG_OR_DRILL $DIG_CHECK_OPTIONS -t A \"${d}\"|grep -c -i \"^${d}\")\" -ge 1 ]]; then\n          found_ip=true\n        elif [[ \"$($HAS_DIG_OR_DRILL $DIG_CHECK_OPTIONS -t AAAA \"${d}\"|grep -c -i \"^${d}\")\" -ge 1 ]]; then\n          found_ip=true\n        fi\n      fi\n\n      if [[ \"$HAS_HOST\" == \"true\" ]]; then\n        debug \"DNS lookup using host $DNS_CHECK_OPTIONS ${d}\"\n        # shellcheck disable=SC2086\n        if [[ \"$(host $DNS_CHECK_OPTIONS \"${d}\" |grep -c -i \"^${d}\")\" -ge 1 ]]; then\n          found_ip=true\n        fi\n      fi\n\n      if [[ \"$HAS_NSLOOKUP\" == \"true\" ]]; then\n        debug \"DNS lookup using nslookup $DNS_CHECK_OPTIONS -query AAAA ${d}\"\n        # shellcheck disable=SC2086\n        if [[ \"$(nslookup $DNS_CHECK_OPTIONS -query=AAAA \"${d}\"|grep -c -i \"^${d}.*has AAAA address\")\" -ge 1 ]]; then\n          debug \"found IPv6 record for ${d}\"\n          found_ip=true\n        elif [[ \"$(nslookup $DNS_CHECK_OPTIONS \"${d}\"| grep -c ^Name)\" -ge 1 ]]; then\n          debug \"found IPv4 record for ${d}\"\n          found_ip=true\n        fi\n      fi\n\n      if [[ \"$found_ip\" == \"false\" ]]; then\n        info \"${DOMAIN}: DNS lookup failed for $d\"\n        config_errors=true\n      fi\n    fi # end using dns-01 challenge\n    ((dn++))\n  done\n\n  # tidy up\n  rm -f \"$tmplist\"\n\n  if [[ \"$config_errors\" == \"true\" ]]; then\n    error_exit \"${DOMAIN}: exiting due to config errors\"\n  fi\n  debug \"${DOMAIN}: check_config completed  - all OK\"\n}\n\ncheck_getssl_upgrade() { # check if a more recent release is available\n  # Check GitHub for latest stable release, or a specified tag\n  if [[ -n \"$_UPGRADE_TO_TAG\" ]]; then\n      RELEASE_API=\"$RELEASE_API/tags/$_UPGRADE_TO_TAG\"\n  fi\n  local release_data release_tag release_ver local_ver release_desc NEWCMD\n  debug \"Checking for releases at $RELEASE_API\"\n  # shellcheck disable=SC2086\n  release_data=\"$(curl ${_NOMETER:---silent} --user-agent \"$CURL_USERAGENT\" -H 'Accept: application/vnd.github.v3+json' \"$RELEASE_API\")\"\n  errcode=$?\n  if [[ $errcode -eq 60 ]]; then\n    error_exit \"curl needs updating, your version does not support SNI (multiple SSL domains on a single IP)\"\n  elif [[ $errcode -gt 0 ]]; then\n    error_exit \"curl error checking releases: $errcode\"\n  fi\n  # Replace error in release description with _error (which is ignored by check_output_for_errors() in the tests)\n  sanitised_release_data=${release_data//error/_error}\n  sanitised_release_data=${sanitised_release_data//warning/_warning}\n  debug \"${sanitised_release_data//error/_error}\"\n  # awk from https://stackoverflow.com/questions/1761341/awk-print-next-record-following-matched-record\n  release_tag=$(awk -F'\"' '/tag_name/ {f=NR} f&&NR-1==f' RS=\":|,\" <<<\"${release_data}\" | sed -e's/\"//g')\n  if [[ \"${release_tag:0:1}\" != 'v' ]] ; then\n    if [[ ${_MUTE} -eq 0 ]]; then\n      info \"The current repository has no releases or is improperly tagged; can't check for upgrades: '$release_tag'\"\n    fi\n    return 0\n  fi\n  release_ver=\"$( tr -d '.v' <<<\"${release_tag}\")\"\n  local_ver=\"$( tr -d '.' <<<\"${VERSION}\")\"\n  debug \"current code is version ${VERSION}\"\n  debug \"Most recent version is  ${release_tag:1}\"\n  if [[ -z \"$_UPGRADE_TO_TAG\" ]] ; then\n    if [[ \"$local_ver\" -ge \"$release_ver\" ]] ; then return 0; fi\n  else\n    if [[ \"$local_ver\" -eq \"$release_ver\" ]] ; then return 0; fi\n  fi\n  if [[ ${_UPGRADE} -ne 1 ]]; then\n    if [[ ${_MUTE} -eq 0 ]]; then\n      release_desc=\"$(sed -e'/^\"body\": *\"/!d;s/^\"body\": *\"\\([^\"\"]*\\).*$/\\1/;s/\\\\r/\\r/g;s/\\\\n/\\n/g' <<<\"$release_data\")\"\n      info \"\"\n      info \"A more recent version (${release_tag}) than $VERSION of getssl is available, please update\"\n      info \"The easiest way is to use the -u or --upgrade flag\"\n      info \"\"\n      info \"Release ${release_tag} summary\"\n      # Replace error in release description with _error (which is ignored by check_output_for_errors() in the tests)\n      info \"${release_desc//error/_error}\"\n      info \"\"\n    fi\n    return 0;\n  fi\n\n  # Download the latest tag\n  TEMP_UPGRADE_FILE=\"$(mktemp 2>/dev/null || mktemp -t getssl.XXXXXX)\"\n  if [ \"$TEMP_UPGRADE_FILE\" == \"\" ]; then\n    error_exit \"mktemp failed\"\n  fi\n  CODE_LOCATION=$(sed -e\"s/master/${release_tag}/\" <<<\"$CODE_LOCATION\")\n  # shellcheck disable=SC2086\n  debug curl ${_NOMETER:---silent} --user-agent \"$CURL_USERAGENT\" \"$CODE_LOCATION\" --output \"$TEMP_UPGRADE_FILE\"\n  # shellcheck disable=SC2086\n  status=$(curl ${_NOMETER:---silent} -w \"%{http_code}\" --user-agent \"$CURL_USERAGENT\" \"$CODE_LOCATION\" --output \"$TEMP_UPGRADE_FILE\")\n  errcode=$?\n  debug curl errcode=$errcode\n\n  if [[ $errcode -eq 60 ]]; then\n    error_exit \"curl needs updating, your version does not support SNI (multiple SSL domains on a single IP)\"\n  elif [[ $errcode -gt 0 ]]; then\n    error_exit \"curl error downloading release: $errcode\"\n  fi\n\n  if [[ $status -ne 200 ]]; then\n    error_exit \"curl didn't find the updated version of getssl at $CODE_LOCATION\"\n  fi\n\n  if ! install \"$0\" \"${0}.v${VERSION}\"; then\n    error_exit \"problem renaming old version while updating, check permissions\"\n  fi\n  if ! install -m 700 \"$TEMP_UPGRADE_FILE\" \"$0\"; then\n    error_exit \"problem installing new version while updating, check permissions\"\n  fi\n\n  check=$(bash \"$0\" -U -v)\n  release_tag_upper=$(echo \"$release_tag\" | tr \"[:lower:]\" \"[:upper:]\")\n  if [[ \"$check\" != \"getssl ${release_tag_upper}\" ]]; then\n    info \"problem running new version, rolling back to old version\"\n    if ! install \"${0}.v${VERSION}\" \"$0\"; then\n      error_exit \"problem rolling back, you'll need to manually check $0 and $0.${VERSION}\"\n    fi\n    error_exit \"problem calling new version; output of $TEMP_UPGRADE_FILE -v was \\\"$check\\\", expected \\\"getssl ${release_tag_upper}\\\"\"\n  fi\n\n\n  if [[ ${_MUTE} -eq 0 ]]; then\n    echo \"Updated getssl from v${VERSION} to ${release_tag}\"\n    echo \"The old version remains as ${0}.v${VERSION} and should be removed\"\n    echo \"These update notifications can be turned off using the -Q option\"\n    echo \"\"\n    echo \"Updates are:\"\n    awk \"/\\(${VERSION}\\)$/ {s=1} s; /\\(${release_tag}\\)$/ || /^# ----/ {s=0}\" \"$TEMP_UPGRADE_FILE\" | awk '{if(NR>1)print}'\n    echo \"\"\n  fi\n\n  # Delete old versions, but not the version just upgraded (which can't be removed since disappearing can confuse bash)\n  declare -a getssl_versions\n  shopt -s nullglob\n  for getssl_version in \"$0\".v*; do\n    if [[ \"$getssl_version\" != \"${0}.v${VERSION}\" ]] ; then\n      getssl_versions[${#getssl_versions[@]}]=\"$getssl_version\"\n    fi\n  done\n  shopt -u nullglob\n  if [[ -n \"${getssl_versions[*]}\" ]] ; then\n    rm \"${getssl_versions[@]}\"\n  fi\n\n  # Inhibit check for upgrades when running the new version\n  NEWCMD=\"$(sed -e's/ -\\(u\\|-upgrade\\|U\\|-nocheck\\)//g;s/^\\([^ ]* \\)/\\1--nocheck /' <<<\"$ORIGCMD\")\"\n  clean_up\n  if [[ ${_MUTE} -eq 0 ]]; then\n    info \"Installed $release_tag, restarting with $NEWCMD\"\n  fi\n  if ! eval \"$NEWCMD\"; then\n    error_exit \"Running upgraded getssl failed\"\n  fi\n\n  graceful_exit\n}\n\ncheck_version() { # true if version string $1 >= $2\n  local v1 v2 i n1 n2 n\n  # $1 and $2 can be different lengths, but all parts must be numeric\n  if [[ \"$1\" == \"$2\" ]] ; then return 0; fi\n  local IFS='.'\n  # shellcheck disable=SC2206\n  v1=($1)\n  # shellcheck disable=SC2206\n  v2=($2)\n  n1=\"${#v1[@]}\"\n  n2=\"${#v2[@]}\"\n  if [[ \"$n1\" -ge \"$n2\" ]] ; then n=\"$n1\" ; else n=\"$n2\" ; fi\n  for ((i=0; i<n; i++)) do\n    n1=\"${v1[$i]:-0}\"\n    n2=\"${v2[$i]:-0}\"\n    if [[ $((10#$n1)) -gt $((10#$n2)) ]] ; then return 0 ; fi\n    if [[ $((10#$n1)) -lt $((10#$n2)) ]] ; then return 1 ; fi\n  done\n  return 0\n}\n\nclean_up() { # Perform pre-exit housekeeping\n  umask \"$ORIG_UMASK\"\n  if [[ $VALIDATE_VIA_DNS == \"true\" ]]; then\n    # Tidy up DNS entries if things failed part way though.\n    shopt -s nullglob\n    for dnsfile in \"$TEMP_DIR\"/dns_verify/*; do\n      # shellcheck source=/dev/null\n      . \"$dnsfile\"\n      debug \"attempting to clean up DNS entry for $d\"\n      del_dns_rr \"${d}\" \"${auth_key}\"\n    done\n    shopt -u nullglob\n  fi\n  if [[ -n \"$DOMAIN_DIR\" ]]; then\n    if [ \"${TEMP_DIR}\" -ef \"/tmp\" ]; then\n        info \"Not going to delete TEMP_DIR ${TEMP_DIR} as it appears to be /tmp\"\n    else\n        rm -rf \"${TEMP_DIR:?}\"\n    fi\n  fi\n}\n\ncopy_file_to_location() { # copies a file, using scp, sftp or ftp if required.\n  cert=$1   # descriptive name, just used for display\n  from=$2   # current file location\n  to=$3     # location to move file to.\n  suffix=$4 # (optional) optional suffix for DUAL_RSA_ECDSA, i.e. save to private.key becomes save to private.ec.key\n  IFS=\\; read -r -a copy_locations <<<\"$3\"\n  for to in \"${copy_locations[@]}\"; do\n    if [[ -n \"$suffix\" ]]; then\n      bname=\"$(basename \"$to\")\"\n      if [[ \"${bname##*.}\" == \"$bname\" ]]; then\n        to=\"${to}.${suffix}\"\n      else\n        to=\"${to%.*}.${suffix}.${to##*.}\"\n      fi\n    fi\n    info \"copying $cert to $to\"\n    if [[ \"${to:0:4}\" == \"ssh:\" ]] ; then\n      debug \"using scp -q $SCP_OPTS $from ${to:4}\"\n      # shellcheck disable=SC2086\n      if ! scp -q $SCP_OPTS \"$from\" \"${to:4}\" >/dev/null 2>&1 ; then\n        error_exit \"problem copying file to the server using scp.\n        scp $from ${to:4}\"\n      fi\n      debug \"userid $TOKEN_USER_ID\"\n      if [[ \"$cert\" == \"challenge token\" ]] && [[ -n \"$TOKEN_USER_ID\" ]]; then\n        servername=$(echo \"$to\" | awk -F\":\" '{print $2}')\n        tofile=$(echo \"$to\" | awk -F\":\" '{print $3}')\n        debug \"servername $servername\"\n        debug \"file $tofile\"\n        # shellcheck disable=SC2029\n        # shellcheck disable=SC2086\n        ssh $SSH_OPTS \"$servername\" \"chown $TOKEN_USER_ID $tofile\"\n      fi\n    elif [[ \"${to:0:4}\" == \"ftp:\" ]] ; then\n      if [[ \"$cert\" != \"challenge token\" ]] ; then\n        error_exit \"ftp is not a secure method for copying certificates or keys\"\n      fi\n      if [[ -z \"$FTP_COMMAND\" ]]; then\n        error_exit \"No ftp command found\"\n      fi\n      debug \"using ftp to copy the file from $from\"\n      ftpuser=$(echo \"$to\"| awk -F: '{print $2}')\n      ftppass=$(echo \"$to\"| awk -F: '{print $3}')\n      ftphost=$(echo \"$to\"| awk -F: '{print $4}')\n      ftplocn=$(echo \"$to\"| awk -F: '{print $5}')\n      ftpdirn=$(dirname \"$ftplocn\")\n      ftpfile=$(basename \"$ftplocn\")\n      fromdir=$(dirname \"$from\")\n      fromfile=$(basename \"$from\")\n      debug \"ftp user=$ftpuser - pass=$ftppass - host=$ftphost port=$FTP_PORT dir=$ftpdirn file=$ftpfile\"\n      debug \"from dir=$fromdir  file=$fromfile\"\n      if [ -n \"$FTP_OPTIONS\" ]; then\n        # Use eval to expand any variables in FTP_OPTIONS\n        FTP_OPTIONS=$(eval echo \"$FTP_OPTIONS\")\n        debug \"FTP_OPTIONS=$FTP_OPTIONS\"\n      fi\n      $FTP_COMMAND <<- _EOF\n\t\t\topen $ftphost $FTP_PORT\n\t\t\tuser $ftpuser $ftppass\n\t\t\t$FTP_OPTIONS\n\t\t\tcd $ftpdirn\n\t\t\tlcd $fromdir\n\t\t\tput ./$fromfile\n\t\t\t_EOF\n    elif [[ \"${to:0:5}\" == \"sftp:\" ]] ; then\n      debug \"using sftp to copy the file from $from\"\n      ftpuser=$(echo \"$to\"| awk -F: '{print $2}')\n      ftppass=$(echo \"$to\"| awk -F: '{print $3}')\n      ftphost=$(echo \"$to\"| awk -F: '{print $4}')\n      ftplocn=$(echo \"$to\"| awk -F: '{print $5}')\n      ftpdirn=$(dirname \"$ftplocn\")\n      ftpfile=$(basename \"$ftplocn\")\n      fromdir=$(dirname \"$from\")\n      fromfile=$(basename \"$from\")\n      if [ -n \"$FTP_PORT\" ]; then SFTP_PORT=\"-P $FTP_PORT\"; else SFTP_PORT=\"\"; fi\n      debug \"sftp $SFTP_OPTS user=$ftpuser - pass=$ftppass - host=$ftphost port=$FTP_PORT dir=$ftpdirn file=$ftpfile\"\n      debug \"from dir=$fromdir  file=$fromfile\"\n      # shellcheck disable=SC2086\n      sshpass -p \"$ftppass\" sftp $SFTP_OPTS $SFTP_PORT \"$ftpuser@$ftphost\" <<- _EOF\n\t\t\tcd $ftpdirn\n\t\t\tlcd $fromdir\n\t\t\tput ./$fromfile\n\t\t\t_EOF\n    elif [[ \"${to:0:5}\" == \"davs:\" ]] ; then\n      debug \"using davs to copy the file from $from\"\n      davsuser=$(echo \"$to\"| awk -F: '{print $2}')\n      davspass=$(echo \"$to\"| awk -F: '{print $3}')\n      davshost=$(echo \"$to\"| awk -F: '{print $4}')\n      davsport=$(echo \"$to\"| awk -F: '{print $5}')\n      davslocn=$(echo \"$to\"| awk -F: '{print $6}')\n      davsdirn=$(dirname \"$davslocn\")\n      davsdirn=$(echo \"${davsdirn}/\" | sed 's,//,/,g')\n      davsfile=$(basename \"$davslocn\")\n      fromdir=$(dirname \"$from\")\n      fromfile=$(basename \"$from\")\n      debug \"davs user=$davsuser - pass=$davspass - host=$davshost port=$davsport dir=$davsdirn file=$davsfile\"\n      debug \"from dir=$fromdir  file=$fromfile\"\n      # shellcheck disable=SC2086\n      curl ${_NOMETER} -u \"${davsuser}:${davspass}\" -T \"${fromdir}/${fromfile}\" \"https://${davshost}:${davsport}${davsdirn}${davsfile}\"\n    elif [[ \"${to:0:6}\" == \"ftpes:\" ]] || [[ \"${to:0:5}\" == \"ftps:\" ]] ; then\n      # FTPES (FTP over explicit TLS/SSL, port 21) and FTPS (FTP over implicit TLS/SSL, port 990).\n      debug \"using ${to:0:5} to copy the file from $from\"\n      ftpuser=$(echo \"$to\"| awk -F: '{print $2}')\n      ftppass=$(echo \"$to\"| awk -F: '{print $3}')\n      ftphost=$(echo \"$to\"| awk -F: '{print $4}')\n      ftplocn=$(echo \"$to\"| awk -F: '{print $5}')\n      ftpdirn=$(dirname \"$ftplocn\")\n      ftpfile=$(basename \"$ftplocn\")\n      fromdir=$(dirname \"$from\")\n      fromfile=$(basename \"$from\")\n\n      SFTP_PORT=\"\";\n      if [ -n \"$FTP_PORT\" ]; then SFTP_PORT=\":${FTP_PORT}\"; fi\n      debug \"${to:0:5} user=$ftpuser - pass=$ftppass - host=$ftphost port=$FTP_PORT dir=$ftpdirn file=$ftpfile\"\n      debug \"from dir=$fromdir  file=$fromfile\"\n      if [[ \"${to:0:5}\" == \"ftps:\" ]] ; then\n        # if no FTP_PORT is specified, then use default\n        if [ -z \"$FTP_PORT\" ]; then\n          SFTP_PORT=\":990\"\n        fi\n        # shellcheck disable=SC2086\n        debug curl ${_NOMETER} $FTPS_OPTIONS --ftp-ssl --ftp-ssl-reqd -u \"${ftpuser}:${ftppass}\" -T \"${fromdir}/${fromfile}\" \"ftps://${ftphost}${SFTP_PORT}/${ftpdirn}/\"\n        # shellcheck disable=SC2086\n        curl ${_NOMETER} $FTPS_OPTIONS --ftp-ssl-reqd -u \"${ftpuser}:${ftppass}\" -T \"${fromdir}/${fromfile}\" \"ftps://${ftphost}${SFTP_PORT}/${ftpdirn}/\"\n      else\n        # shellcheck disable=SC2086\n        debug curl ${_NOMETER} $FTPS_OPTIONS --ftp-ssl --ftp-ssl-reqd -u \"${ftpuser}:${ftppass}\" -T \"${fromdir}/${fromfile}\" \"ftp://${ftphost}${SFTP_PORT}/${ftpdirn}/\"\n        # shellcheck disable=SC2086\n        curl ${_NOMETER} $FTPS_OPTIONS --ftp-ssl-reqd -u \"${ftpuser}:${ftppass}\" -T \"${fromdir}/${fromfile}\" \"ftp://${ftphost}${SFTP_PORT}/${ftpdirn}/\"\n      fi\n    else\n      if ! mkdir -p \"$(dirname \"$to\")\" ; then\n        error_exit \"cannot create ACL directory $(basename \"$to\")\"\n      fi\n      if [[ \"$GETSSL_IGNORE_CP_PRESERVE\" == \"true\" ]]; then\n        if ! cp \"$from\" \"$to\" ; then\n          error_exit \"cannot copy $from to $to\"\n        fi\n      else\n        if ! cp -p \"$from\" \"$to\" ; then\n          error_exit \"cannot copy $from to $to\"\n        fi\n      fi\n      if [[ \"$cert\" == \"challenge token\" ]] && [[ -n \"$TOKEN_USER_ID\" ]]; then\n        chown \"$TOKEN_USER_ID\" \"$to\"\n      fi\n    fi\n    debug \"copied $from to $to\"\n  done\n}\n\ncreate_csr() { # create a csr using a given key (if it doesn't already exist)\n  csr_file=$1\n  csr_key=$2\n  # check if domain csr exists - if not then create it\n  if [[ -s \"$csr_file\" ]]; then\n    debug \"domain csr exists at - $csr_file\"\n    # check all domains in config are in csr\n    if [[ \"$IGNORE_DIRECTORY_DOMAIN\" == \"true\" ]]; then\n      read -d '\\n' -r -a alldomains <<< \"$(echo \"$SANS\" | sed -e 's/ //g; s/,$//; y/,/\\n/' | sort -u)\"\n    else\n      read -d '\\n' -r -a alldomains <<< \"$(echo \"$DOMAIN,$SANS\" | sed -e 's/,/ /g; s/ $//; y/ /\\n/' | sort -u)\"\n    fi\n    domains_in_csr=$(openssl req -text -noout -in \"$csr_file\" \\\n        | sed -n -e 's/^ *Subject: .* CN=\\([A-Za-z0-9.-]*\\).*$/\\1/p; /^ *DNS:.../ { s/ *DNS://g; y/,/\\n/; p; }' \\\n        | sort -u)\n    for d in \"${alldomains[@]}\"; do\n      if [[ \"$(echo \"${domains_in_csr}\"| grep \"^${d}$\")\" != \"${d}\" ]]; then\n        info \"existing csr at $csr_file does not contain ${d} - re-create-csr\"\\\n          \".... $(echo \"${domains_in_csr}\"| grep \"^${d}$\")\"\n        _RECREATE_CSR=1\n      fi\n    done\n    # check all domains in csr are in config\n    if [[ \"$(IFS=$'\\n'; echo -n \"${alldomains[*]}\")\" != \"$domains_in_csr\" ]]; then\n      info \"existing csr at $csr_file does not have the same domains as the config - re-create-csr\"\n      _RECREATE_CSR=1\n    else\n      debug \"Existing csr at $csr_file contains same domains as the config\"\n    fi\n  fi\n  # end of ... check if domain csr exists - if not then create it\n\n  # if CSR does not exist, or flag set to recreate, then create csr\n  if [[ ! -s \"$csr_file\" ]] || [[ \"$_RECREATE_CSR\" == \"1\" ]]; then\n    info \"creating domain csr - $csr_file\"\n    # create a temporary config file, for portability.\n    tmp_conf=$(mktemp 2>/dev/null || mktemp -t getssl) || error_exit \"mktemp failed\"\n    cat \"$SSLCONF\" > \"$tmp_conf\"\n    printf \"\\n[SAN]\\n%s\" \"$SANLIST\" >> \"$tmp_conf\"\n    # add OCSP Must-Staple to the domain csr\n    # if openssl version >= 1.1.0 one can also use \"tlsfeature = status_request\"\n    if [[ \"$OCSP_MUST_STAPLE\" == \"true\" ]]; then\n      printf \"\\n1.3.6.1.5.5.7.1.24 = DER:30:03:02:01:05\" >> \"$tmp_conf\"\n    fi\n    openssl req -new -sha256 -key \"$csr_key\" -subj \"$CSR_SUBJECT\" -reqexts SAN -config \"$tmp_conf\" > \"$csr_file\"\n    rm -f \"$tmp_conf\"\n  fi\n}\n\ncreate_key() { # create a domain key (if it doesn't already exist)\n  key_type=$1 # domain key type\n  key_loc=$2  # domain key location\n  key_len=$3  # domain key length - for rsa keys.\n  # check if key exists, if not then create it.\n  if [[ -s \"$key_loc\" ]]; then\n    debug \"domain key exists at $key_loc - skipping generation\"\n    # ideally need to check validity of domain key\n  else\n    umask 077\n    info \"creating key - $key_loc\"\n    case \"$key_type\" in\n      rsa)\n        openssl genrsa \"$key_len\" > \"$key_loc\";;\n      prime256v1|secp384r1|secp521r1)\n        openssl ecparam -genkey -name \"$key_type\" > \"$key_loc\";;\n      *)\n        error_exit \"unknown private key algorithm type $key_loc\";;\n    esac\n    umask \"$ORIG_UMASK\"\n    # remove csr on generation of new domain key\n    if [[ -e \"${key_loc%.*}.csr\" ]]; then\n      rm -f \"${key_loc%.*}.csr\"\n    fi\n  fi\n}\n\ncreate_order() {\n  dstring=\"[\"\n  for d in \"${alldomains[@]}\"; do\n    dstring=\"${dstring}{\\\"type\\\":\\\"dns\\\",\\\"value\\\":\\\"$d\\\"},\"\n  done\n  dstring=\"${dstring::${#dstring}-1}]\"\n  # request NewOrder currently seems to ignore the dates ....\n  #  dstring=\"${dstring},\\\"notBefore\\\": \\\"$(date -d \"-1 hour\" --utc +%FT%TZ)\\\"\"\n  #  dstring=\"${dstring},\\\"notAfter\\\": \\\"$(date -d \"2 days\" --utc +%FT%TZ)\\\"\"\n  request=\"{\\\"identifiers\\\": $dstring}\"\n  send_signed_request \"$URL_newOrder\" \"$request\"\n  OrderLink=$(echo \"$responseHeaders\" | grep -i location | awk '{print $2}'| tr -d '\\r\\n ')\n  debug \"Order link $OrderLink\"\n  FinalizeLink=$(json_get \"$response\" \"finalize\")\n  debug \"Finalize link $FinalizeLink\"\n\n  if [[ $API -eq 1 ]]; then\n    dn=0\n    for d in \"${alldomains[@]}\"; do\n      # get authorizations link\n      AuthLink[dn]=$(json_get \"$response\" \"identifiers\" \"value\" \"${d##\\*.}\" \"authorizations\" \"x\")\n      debug \"authorizations link for $d - ${AuthLink[$dn]}\"\n      ((dn++))\n    done\n  else\n    # Authorization links are unsorted, so fetch the authorization link, find the domain, save response in the correct array position\n    AuthLinks=$(json_get \"$response\" \"authorizations\")\n    AuthLinkResponse=()\n    AuthLinkResponseHeader=()\n    for l in $AuthLinks; do\n      debug \"Requesting authorizations link for $l\"\n      send_signed_request \"$l\" \"\"\n      # Get domain from response\n      authdomain=$(json_get \"$response\" \"identifier\" \"value\")\n      wildcard=$(json_get \"$response\" \"wildcard\")\n      debug wildcard=\"$wildcard\"\n      # find array position (This is O(n2) but doubt that we'll see performance issues)\n      dn=0\n      for d in \"${alldomains[@]}\"; do\n        # Convert domain to lowercase as response from server will be in lowercase\n        lower_d=$(echo \"$d\" | tr \"[:upper:]\" \"[:lower:]\")\n        if [[ ( \"$lower_d\" == \"$authdomain\" && \"$wildcard\" != \"true\" ) || ( \"$lower_d\" == \"*.${authdomain}\" && \"$wildcard\" == \"true\" ) ]]; then\n          debug \"Saving authorization response for $authdomain for domain alldomains[$dn]\"\n          debug \"Response = ${response//[$'\\t\\r\\n']}\"\n          AuthLinkResponse[dn]=$response\n          AuthLinkResponseHeader[dn]=$responseHeaders\n        fi\n        ((dn++))\n      done\n      if [[ \"$DEACTIVATE_AUTH\" == \"true\" ]]; then\n        deactivate_url_list+=\" $l \"\n        debug \"url added to deactivate list ${l}\"\n        debug \"deactivate list is now $deactivate_url_list\"\n      fi\n    done\n  fi\n}\n\ndate_epoc() { # convert the date into epoch time\n  if [[ \"$os\" == \"bsd\" ]]; then\n    date -j -f \"%b %d %T %Y %Z\" \"$1\" +%s\n  elif [[ \"$os\" == \"mac\" ]]; then\n    date -j -f \"%b %d %T %Y %Z\" \"$1\" +%s\n  elif [[ \"$os\" == \"busybox\" ]]; then\n    de_ld=$(echo \"$1\" | awk '{print $1 \" \" $2 \" \" $3 \" \" $4}')\n    date -D \"%b %d %T %Y\" -d \"$de_ld\" +%s\n  else\n    date -d \"$1\" +%s\n  fi\n\n}\n\ndate_fmt() { # format date from epoc time to YYYY-MM-DD\n  if [[ \"$os\" == \"bsd\" ]]; then #uses older style date function.\n    date -j -f \"%s\" \"$1\" +%F\n  elif [[ \"$os\" == \"mac\" ]]; then # macOS uses older BSD style date.\n    date -j -f \"%s\" \"$1\" +%F\n  else\n    date -d \"@$1\" +%F\n  fi\n}\n\ndate_renew() { # calculates the renewal time in epoch\n  date_now_s=$( date +%s )\n  echo \"$((date_now_s + RENEW_ALLOW*24*60*60))\"\n}\n\ndebug() { # write out debug info if the debug flag has been set\n  if [[ ${_USE_DEBUG} -eq 1 ]]; then\n    # If running tests then verbose output (for debugging tests)\n    if [[ -n ${BATS_RUN_TMPDIR} ]]; then\n      echo \"$(date \"+%b %d %T\") ${FUNCNAME[1]}:${BASH_LINENO[1]}\" \"$@\"\n    else\n      echo \" \"\n      echo \"$@\"\n    fi\n  fi\n}\n\nerror_exit() { # give error message on error exit\n  echo -e \"${PROGNAME}: ${1:-\"Unknown Error\"}\" >&2\n  if [[ ${_USE_DEBUG} -eq 1 ]]; then\n    traceback\n  fi\n  clean_up\n  exit 1\n}\n\nfind_dns_utils() {\n  HAS_NSLOOKUP=false\n  HAS_DIG_OR_DRILL=\"\"\n  DIG_SUPPORTS_NOIDNOUT=false\n  HAS_HOST=false\n  if [[ -n \"$(command -v nslookup 2>/dev/null)\" ]]; then\n    debug \"HAS NSLOOKUP=true\"\n    HAS_NSLOOKUP=true\n  fi\n\n  if [[ -n \"$(command -v drill 2>/dev/null)\" ]]; then\n    HAS_DIG_OR_DRILL=\"drill\"\n  elif [[ -n \"$(command -v dig 2>/dev/null)\" ]] && dig >/dev/null 2>&1; then\n    if dig -r >/dev/null 2>&1; then\n      # use dig -r so ~/.digrc is not used\n      HAS_DIG_OR_DRILL=\"dig -r\"\n    else\n      HAS_DIG_OR_DRILL=\"dig\"\n    fi\n  fi\n\n  if [[ -n \"$HAS_DIG_OR_DRILL\" ]]; then\n    if dig_output=$($HAS_DIG_OR_DRILL +noidnout localhost 2>&1 >/dev/null); then\n      # dig +noidnout on Ubuntu 18 succeeds, but outputs warning message to stderr - issue #688)\n      if [[ \"$dig_output\" != \";; IDN support not enabled\" ]]; then\n        DIG_SUPPORTS_NOIDNOUT=true\n      fi\n    fi\n\n    debug \"HAS DIG_OR_DRILL=$HAS_DIG_OR_DRILL\"\n    debug \"DIG_SUPPORTS_NOIDNOUT=$DIG_SUPPORTS_NOIDNOUT\"\n  fi\n\n  if [[ -n \"$(command -v host 2>/dev/null)\" ]]; then\n    debug \"HAS HOST=true\"\n    HAS_HOST=true\n  fi\n}\n\nfind_ftp_command() {\n  FTP_COMMAND=\"\"\n  if [[ -n \"$(command -v ftp 2>/dev/null)\" ]]; then\n    debug \"Has ftp\"\n    FTP_COMMAND=\"ftp $FTP_ARGS -n\"\n  elif [[ -n \"$(command -v lftp 2>/dev/null)\" ]]; then\n    debug \"Has lftp\"\n    FTP_COMMAND=\"lftp $FTP_ARGS\"\n  fi\n}\n\n\nadd_dns_rr() {\n  d=${1}\n  auth_key=${2}\n\n  # shellcheck disable=SC2018,SC2019\n  lower_d=$(printf '%s' \"${d#\\*.}\" | tr 'A-Z' 'a-z')\n  debug \"adding DNS RR via command: ${DNS_ADD_COMMAND} ${lower_d} ${auth_key}\"\n  eval \"${DNS_ADD_COMMAND}\" \"${lower_d}\" \"${auth_key}\"\n}\n\ndel_dns_rr() {\n  d=${1}\n  auth_key=${2}\n\n  # shellcheck disable=SC2018,SC2019\n  lower_d=$(printf '%s' \"${d#\\*.}\" | tr 'A-Z' 'a-z')\n  debug \"removing DNS RR via command: ${DNS_DEL_COMMAND} ${lower_d} ${auth_key}\"\n  eval \"${DNS_DEL_COMMAND}\" \"${lower_d}\" \"${auth_key}\"\n}\n\nfulfill_challenges() {\ndn=0\nfor d in \"${alldomains[@]}\"; do\n  # $d is domain in current loop, which is number $dn for ACL\n  info \"Verifying $d\"\n  if [[ \"$USE_SINGLE_ACL\" == \"true\" ]]; then\n    DOMAIN_ACL=\"${ACL[0]}\"\n  else\n    DOMAIN_ACL=\"${ACL[$dn]}\"\n  fi\n\n  # request a challenge token from ACME server\n  if [[ $API -eq 1 ]]; then\n    request=\"{\\\"resource\\\":\\\"new-authz\\\",\\\"identifier\\\":{\\\"type\\\":\\\"dns\\\",\\\"value\\\":\\\"${d##\\*.}\\\"}}\"\n    send_signed_request \"$URL_new_authz\" \"$request\"\n    debug \"completed send_signed_request\"\n\n    # check if we got a valid response and token, if not then error exit\n    if [[ -n \"$code\" ]] && [[ ! \"$code\" == '201' ]] ; then\n      error_exit \"new-authz error: $response\"\n    fi\n  else\n    response=${AuthLinkResponse[$dn]}\n    responseHeaders=${AuthLinkResponseHeader[$dn]}\n    response_status=$(json_get \"$response\" status)\n  fi\n\n  if [[ $response_status == \"valid\" ]]; then\n    info \"$d is already validated\"\n    # increment domain-counter\n    ((dn++))\n  else\n    PREVIOUSLY_VALIDATED=\"false\"\n    if [[ $VALIDATE_VIA_DNS == \"true\" ]]; then # set up the correct DNS token for verification\n      if [[ $API -eq 1 ]]; then\n        # get the dns component of the ACME response\n        # get the token and uri from the dns component\n        token=$(json_get \"$response\" \"token\" \"dns-01\")\n        uri=$(json_get \"$response\" \"uri\" \"dns-01\")\n        debug uri \"$uri\"\n      else # APIv2\n        debug \"authlink response = ${response//[$'\\t\\r\\n']}\"\n        # get the token and uri from the dns-01 component\n        token=$(json_get \"$response\" \"challenges\" \"type\" \"dns-01\" '\"token\"')\n        uri=$(json_get \"$response\" \"challenges\" \"type\" \"dns-01\" '\"url\"')\n        debug uri \"$uri\"\n      fi\n\n      keyauthorization=\"$token.$thumbprint\"\n      debug keyauthorization \"$keyauthorization\"\n\n      #create signed authorization key from token.\n      auth_key=$(printf '%s' \"$keyauthorization\" \\\n        | openssl dgst -sha256 -binary \\\n        | openssl base64 -e \\\n        | tr -d '\\n\\r' \\\n        | sed -e 's:=*$::g' -e 'y:+/:-_:')\n      debug auth_key \"$auth_key\"\n\n      add_dns_rr \"${d}\" \"${auth_key}\" \\\n        || error_exit \"DNS_ADD_COMMAND failed for domain $d\"\n\n      # shellcheck disable=SC2018,SC2019\n      rr=\"_acme-challenge.$(printf '%s' \"${d#\\*.}\" | tr 'A-Z' 'a-z')\"\n\n      # find a primary / authoritative DNS server for the domain\n      if [[ -z \"$AUTH_DNS_SERVER\" ]]; then\n        # Find authorative dns server for _acme-challenge.{domain} (for CNAMES/acme-dns)\n        get_auth_dns \"${rr}\"\n        if test -n \"${cname}\"; then\n          rr=${cname}\n        fi\n\n        # If no authorative dns server found, try again for {domain}\n        if [[ -z \"$primary_ns\" ]]; then\n          get_auth_dns \"$d\"\n        fi\n      elif [[ \"$CHECK_PUBLIC_DNS_SERVER\" == \"true\" ]]; then\n        primary_ns=\"$AUTH_DNS_SERVER $PUBLIC_DNS_SERVER\"\n      else\n        primary_ns=\"$AUTH_DNS_SERVER\"\n      fi\n      debug set primary_ns = \"$primary_ns\"\n\n      # internal check\n      check_challenge_completion_dns \"${d}\" \"${rr}\" \"${primary_ns}\" \"${auth_key}\"\n\n      # let Let's Encrypt check\n      check_challenge_completion \"${uri}\" \"${d}\" \"${keyauthorization}\"\n      result=$?\n      del_dns_rr \"${d}\" \"${auth_key}\"\n      if [[ $result -eq 1 ]]; then\n        # check_challenge_completion failed with \"invalid\" - order creation cancelled, return error so we can retryS\n        return 1\n      fi\n    else      # set up the correct http token for verification\n      if [[ $API -eq 1 ]]; then\n        # get the token from the http component\n        token=$(json_get \"$response\" \"token\" \"http-01\")\n        # get the uri from the http component\n        uri=$(json_get \"$response\" \"uri\" \"http-01\")\n        debug uri \"$uri\"\n      else # APIv2\n        debug \"authlink response = ${response//[$'\\t\\r\\n']}\"\n        # get the token from the http-01 component\n        token=$(json_get \"$response\" \"challenges\" \"type\" \"http-01\" '\"token\"')\n        # get the uri from the http component\n        uri=$(json_get \"$response\" \"challenges\" \"type\" \"http-01\" '\"url\"' | head -n1)\n        debug uri \"$uri\"\n      fi\n\n      #create signed authorization key from token.\n      keyauthorization=\"$token.$thumbprint\"\n\n      # save variable into temporary file\n      echo -n \"$keyauthorization\" > \"$TEMP_DIR/$token\"\n      chmod 644 \"$TEMP_DIR/$token\"\n\n      # copy to token to acme challenge location\n      umask 0022\n      IFS=\\; read -r -a token_locations <<<\"$DOMAIN_ACL\"\n      for t_loc in \"${token_locations[@]}\"; do\n        debug \"copying file from $TEMP_DIR/$token to ${t_loc}\"\n        copy_file_to_location \"challenge token\" \\\n                              \"$TEMP_DIR/$token\" \\\n                              \"${t_loc}/$token\"\n      done\n      umask \"$ORIG_UMASK\"\n\n      wellknown_url=\"${CHALLENGE_CHECK_TYPE}://${d}/.well-known/acme-challenge/$token\"\n      debug wellknown_url \"$wellknown_url\"\n\n      if [[ \"$SKIP_HTTP_TOKEN_CHECK\" == \"true\" ]]; then\n        info \"SKIP_HTTP_TOKEN_CHECK=true so not checking that token is working correctly\"\n      else\n        sleep \"$HTTP_TOKEN_CHECK_WAIT\"\n        # check that we can reach the challenge ourselves, if not, then error\n        # ACME only allows port 80 (http), but redirects may use https.  --insecure is used in case\n        # those certificates are being renewed.  Let's Encrypt does the same.  In this case, we verify\n        # that the correct data is returned, so this is safe.\n        # shellcheck disable=SC2086\n        if [[ ! \"$(curl ${_NOMETER} --user-agent \"$CURL_USERAGENT\" --insecure --silent --location \"$wellknown_url\")\" == \"$keyauthorization\" ]]; then\n          error_exit \"for some reason could not reach $wellknown_url - please check it manually\"\n        fi\n      fi\n\n      check_challenge_completion \"$uri\" \"$d\" \"$keyauthorization\"\n      result=$?\n\n      debug \"remove token from ${DOMAIN_ACL}\"\n      IFS=\\; read -r -a token_locations <<<\"$DOMAIN_ACL\"\n      for t_loc in \"${token_locations[@]}\"; do\n        if [[ \"${t_loc:0:4}\" == \"ssh:\" ]] ; then\n          sshhost=$(echo \"${t_loc}\"| awk -F: '{print $2}')\n          command=\"rm -f ${t_loc:(( ${#sshhost} + 5))}/${token:?}\"\n          debug \"running following command to remove token:\"\n          debug \"ssh $SSH_OPTS $sshhost ${command} $_REDIRECT_OUTPUT\"\n          # shellcheck disable=SC2029 disable=SC2086\n          ssh $SSH_OPTS \"$sshhost\" \"${command}\" $_REDIRECT_OUTPUT\n          rm -f \"${TEMP_DIR:?}/${token:?}\"\n        elif [[ \"${t_loc:0:4}\" == \"ftp:\" ]] ; then\n          debug \"using ftp to remove token file\"\n          ftpuser=$(echo \"${t_loc}\"| awk -F: '{print $2}')\n          ftppass=$(echo \"${t_loc}\"| awk -F: '{print $3}')\n          ftphost=$(echo \"${t_loc}\"| awk -F: '{print $4}')\n          ftplocn=$(echo \"${t_loc}\"| awk -F: '{print $5}')\n          debug \"$FTP_COMMAND user=$ftpuser - pass=$ftppass - host=$ftphost location=$ftplocn\"\n          $FTP_COMMAND <<- EOF\n\t\t\t\t\topen $ftphost\n\t\t\t\t\tuser $ftpuser $ftppass\n\t\t\t\t\tcd $ftplocn\n\t\t\t\t\tdelete ${token:?}\n\t\t\t\t\tEOF\n        else\n          rm -f \"${t_loc:?}/${token:?}\"\n        fi\n      done\n      if [[ $result -eq 1 ]]; then\n        # check_challenge_completion failed with \"invalid\" - order creation cancelled, return error so we can retryS\n        return 1\n      fi\n    fi\n    # increment domain-counter\n    ((dn++))\n  fi\ndone # end of ... loop through domains for cert ( from SANS list)\n#end of verify each domain.\nreturn 0\n}\n\nget_auth_dns() { # get the authoritative dns server for a domain (sets primary_ns )\n  orig_gad_d=\"$1\" # domain name\n  orig_gad_s=\"$PUBLIC_DNS_SERVER\" # start with PUBLIC_DNS_SERVER\n  gad_d=\"$orig_gad_d\"\n  gad_s=\"$orig_gad_s\"\n\n  if [[ \"$os\" == \"cygwin\" ]]; then\n    # shellcheck disable=SC2086\n    all_auth_dns_servers=$(nslookup -type=soa \"${d}\" ${PUBLIC_DNS_SERVER} 2>/dev/null \\\n                          | grep \"primary name server\" \\\n                          | awk '{print $NF}')\n    if [[ -z \"$all_auth_dns_servers\" ]]; then\n      error_exit \"couldn't find primary DNS server - please set AUTH_DNS_SERVER in config\"\n    fi\n    primary_ns=\"$all_auth_dns_servers\"\n    if [[ \"$CHECK_PUBLIC_DNS_SERVER\" == \"true\" ]]; then\n      primary_ns=\"$primary_ns $PUBLIC_DNS_SERVER\"\n    fi\n\n    return\n  fi\n\n  if [[ -n \"$HAS_DIG_OR_DRILL\" ]]; then\n    if [[ -n \"${gad_s}\" ]]; then\n      gad_s=\"@${gad_s}\"\n    fi\n\n    # Two options here; either dig CNAME will return the CNAME and the NS or just the CNAME\n    debug \"Using $HAS_DIG_OR_DRILL $DNS_CHECK_OPTIONS ${gad_s} CNAME ${gad_d}\"\n    # shellcheck disable=SC2086\n    res=$($HAS_DIG_OR_DRILL $DNS_CHECK_OPTIONS ${gad_s} CNAME \"${gad_d}\"| grep \"^${gad_d}\")\n    cname=$(echo \"$res\"| awk '$4 ~ \"CNAME\" {print $5}' |sed 's/\\.$//g')\n\n    if [[ $_TEST_SKIP_CNAME_CALL == 0 ]]; then\n      debug Checking if CNAME result contains NS records\n      # shellcheck disable=SC2086\n      res=$($HAS_DIG_OR_DRILL $DNS_CHECK_OPTIONS ${gad_s} CNAME \"${gad_d}\"| grep -E \"IN\\W(NS|SOA)\\W\")\n    else\n      res=\n    fi\n\n    if [[ -n \"${cname}\" ]]; then\n      # domain is a CNAME: resolve it and continue with that\n      debug Domain is a CNAME, actual domain is \"$cname\"\n      gad_d=${cname}\n      res=\n    fi\n\n    # Use SOA +trace to find the name server\n    if [[ -z \"$res\" ]] && [[ $_TEST_SKIP_SOA_CALL == 0 ]]; then\n      # shellcheck disable=SC2086\n      if [[ \"$HAS_DIG_OR_DRILL\" == \"drill\" ]]; then\n        debug Using \"$HAS_DIG_OR_DRILL $DNS_CHECK_OPTIONS -T ${gad_s} SOA ${gad_d}\" to find primary nameserver\n        res=$($HAS_DIG_OR_DRILL $DNS_CHECK_OPTIONS -T ${gad_s} SOA \"${gad_d}\" 2>/dev/null | grep \"IN\\WNS\\W\")\n      else\n        debug Using \"$HAS_DIG_OR_DRILL $DNS_CHECK_OPTIONS ${gad_s} SOA +trace +nocomments ${gad_d}\" to find primary nameserver\n        res=$($HAS_DIG_OR_DRILL $DNS_CHECK_OPTIONS ${gad_s} SOA +trace +nocomments \"${gad_d}\" 2>/dev/null | grep \"IN\\WNS\\W\")\n      fi\n    fi\n\n    # Query for NS records\n    if [[ -z \"$res\" ]]; then\n      out=\"SERVFAIL\"\n      i=0\n      while [[ \"$out\" == *\"SERVFAIL\"* ]] && [[ $i -lt 5 ]]; do\n        debug Using \"$HAS_DIG_OR_DRILL $DNS_CHECK_OPTIONS ${gad_s} NS ${gad_d}\" to find primary nameserver\n        # shellcheck disable=SC2086\n        out=$($HAS_DIG_OR_DRILL $DNS_CHECK_OPTIONS ${gad_s} NS \"${gad_d}\")\n        res=$(echo \"$out\"| grep -E \"IN\\W(NS|SOA)\\W\")\n        if [[ \"$out\" == *SERVFAIL* ]]; then\n          debug Output from \"$HAS_DIG_OR_DRILL $DNS_CHECK_OPTIONS ${gad_s} NS ${gad_d}\" contains SERVFAIL\n          debug \"$out\"\n          sleep 5\n        fi\n        ((i++))\n      done\n    fi\n\n    if [[ -n \"$res\" ]]; then\n      # Convert dig output into an array of nameservers\n      IFS=$'\\n' read -r -d '' -a ns_servers < <(echo \"$res\" | awk '$4 ~ \"(NS|SOA)\" {print $5}' | sed 's/\\.$//g')\n\n      # Nameservers from SOA +trace includes root and all intermediate servers, so just use all the ones with the same domain as the last name server\n      # i.e. if we have root, google, duckdns1, duckdns2 then return all the duckdns servers\n      ns_domain=${ns_servers[${#ns_servers[@]} -1 ]#*.}\n      all_auth_dns_servers=\"\"\n      for i in \"${ns_servers[@]}\"; do\n        if [[ $i =~ $ns_domain ]]; then\n          all_auth_dns_servers=\"$all_auth_dns_servers $i\"\n        fi\n      done\n\n      if [[ $CHECK_ALL_AUTH_DNS == \"true\" ]]; then\n        primary_ns=\"$all_auth_dns_servers\"\n      else\n        primary_ns=$(echo \"$all_auth_dns_servers\" | awk '{print \" \" $1}')\n      fi\n\n      if [[ \"$CHECK_PUBLIC_DNS_SERVER\" == \"true\" ]]; then\n        primary_ns=\"$primary_ns $PUBLIC_DNS_SERVER\"\n      fi\n\n      debug set primary_ns =\"$primary_ns\"\n\n      return\n    fi\n  fi\n\n  # Remove leading '@' if we tried using dig/drill\n  gad_s=\"$orig_gad_s\"\n\n  if [[ \"$HAS_HOST\" == \"true\" ]]; then\n    gad_d=\"$orig_gad_d\"\n    debug Using \"host -t NS\" to find primary name server for \"${gad_d}\"\n    # shellcheck disable=SC2086\n    if [[ -z \"${gad_s}\" ]]; then\n      res=$(host $DNS_CHECK_OPTIONS -t NS \"${gad_d}\"| grep \"name server\")\n    else\n      res=$(host $DNS_CHECK_OPTIONS -t NS \"${gad_d}\" ${gad_s}| grep \"name server\")\n    fi\n    if [[ -n \"$res\" ]]; then\n      all_auth_dns_servers=$(echo \"$res\" | awk '{print $4}' | sed 's/\\.$//g'|tr '\\n' ' ')\n      if [[ $CHECK_ALL_AUTH_DNS == \"true\" ]]; then\n        primary_ns=\"$all_auth_dns_servers\"\n      else\n        primary_ns=$(echo \"$all_auth_dns_servers\" | awk '{print $1}')\n      fi\n\n      if [[ \"$CHECK_PUBLIC_DNS_SERVER\" == \"true\" ]]; then\n        primary_ns=\"$primary_ns $PUBLIC_DNS_SERVER\"\n      fi\n\n      debug set primary_ns=\"$primary_ns\"\n      return\n    fi\n  fi\n\n  if [[ \"$HAS_NSLOOKUP\" == \"true\" ]]; then\n    gad_d=\"$orig_gad_d\"\n    debug Using \"nslookup $DNS_CHECK_OPTIONS -debug -type=soa -type=ns ${gad_d} ${gad_s}\" to find primary name server\n    # shellcheck disable=SC2086\n    res=$(nslookup $DNS_CHECK_OPTIONS -debug -type=soa -type=ns \"${gad_d}\" ${gad_s})\n\n    # check for CNAME (assumes gad_d is _acme-challenge.{host})\n    if [[ \"$(grep -c \"NXDOMAIN\"<<<\"$res\")\" -gt 0 ]]; then\n      debug \"Cannot find nameserver record for ${gad_d}, using parent domain ${gad_d#*.}\"\n      gad_d=\"${gad_d#*.}\"\n      debug \"nslookup $DNS_CHECK_OPTIONS -debug -type=soa -type=ns ${gad_d} ${gad_s}\"\n      # shellcheck disable=SC2086\n      res=$(nslookup $DNS_CHECK_OPTIONS -debug -type=soa -type=ns \"${gad_d}\" ${gad_s})\n    fi\n\n    if [[ \"$(echo \"$res\" | grep -c \"Non-authoritative\")\" -gt 0 ]]; then\n      # this is a Non-authoritative server, need to check for an authoritative one.\n      debug \"Response from non-authoritative server looking for authoritative server\"\n\n      gad_s=$(echo \"$res\" | awk '$2 ~ \"nameserver\" {print $4; exit }' |sed 's/\\.$//g')\n      # If the previous line fails to find the nameserver, use the original\n      if [[ -z \"${gad_s}\" ]]; then\n        gad_s=\"$orig_gad_s\"\n      fi\n\n      if [[ \"$(echo \"$res\" | grep -c \"canonical name\")\" -gt 0 ]]; then\n        debug \"${gad_d}\" appears to be a CNAME\n        gad_d=$(echo \"$res\" | awk ' $2 ~ \"canonical\" {print $5; exit }' |sed 's/\\.$//g')\n        debug \"Using ${gad_d} instead\"\n      elif [[ \"$(echo \"$res\" | grep -c \"an't find\")\" -gt 0 ]]; then\n        # if domain name doesn't exist, then find auth servers for next level up\n        debug \"Couldn't find NS or SOA for domain name, using nslookup $DNS_CHECK_OPTIONS -debug ${gad_d#*.} ${orig_gad_s}\"\n        # shellcheck disable=SC2086\n        res=$(nslookup $DNS_CHECK_OPTIONS -debug \"${gad_d#*.}\" ${orig_gad_s})\n        gad_s=$(echo \"$res\" | awk '$1 ~ \"origin\" {print $3; exit }')\n        gad_d=$(echo \"$res\" | awk '$1 ~ \"->\" {print $2; exit}')\n        # handle scenario where awk returns nothing\n        if [[ -z \"${gad_d}\" ]]; then\n          gad_d=\"${orig_gad_d}\"\n        fi\n      fi\n\n      debug \"Using nslookup $DNS_CHECK_OPTIONS -debug -type=soa -type=ns ${gad_d} ${gad_s}\"\n      # shellcheck disable=SC2086\n      res=$(nslookup $DNS_CHECK_OPTIONS -debug -type=soa -type=ns \"${gad_d}\" ${gad_s})\n    fi\n\n    if [[ \"$(echo \"$res\" | grep -c \"an't find\")\" -gt 0 ]]; then\n      gad_s=$(echo \"$res\" | awk ' $1 ~ \"origin\" {print $3; exit }')\n      gad_d=$(echo \"$res\"| awk '$1 ~ \"->\" {print $2; exit}')\n      # handle scenario where awk returns nothing\n      if [[ -z \"${gad_d}\" ]]; then\n        gad_d=\"$orig_gad_d\"\n      fi\n    fi\n\n    # shellcheck disable=SC2086\n    # not quoting gad_s fixes the nslookup: couldn't get address for '': not found warning (#332)\n    all_auth_dns_servers=$(nslookup $DNS_CHECK_OPTIONS -debug -type=soa -type=ns \"${gad_d}\" ${gad_s} \\\n                          | awk '$1 ~ \"nameserver\" {print $3}' \\\n                          | sed 's/\\.$//g'| tr '\\n' ' ')\n\n    if [[ -n \"$all_auth_dns_servers\" ]]; then\n      if [[ $CHECK_ALL_AUTH_DNS == \"true\" ]]; then\n        primary_ns=\"$all_auth_dns_servers\"\n      else\n        primary_ns=$(echo \"$all_auth_dns_servers\" | awk '{print $1}')\n      fi\n\n      if [[ \"$CHECK_PUBLIC_DNS_SERVER\" == \"true\" ]]; then\n        primary_ns=\"$primary_ns $PUBLIC_DNS_SERVER\"\n      fi\n\n      debug set primary_ns=\"$primary_ns\"\n      return\n    fi\n  fi\n\n  # nslookup on alpine/ubuntu containers doesn't support -debug, print a warning in this case\n  # This means getssl cannot check that the DNS record has been updated on the primary name server\n  info \"Warning: Couldn't find primary DNS server - please set PUBLIC_DNS_SERVER or AUTH_DNS_SERVER in config\"\n  info \"This means getssl cannot check the DNS entry has been updated\"\n}\n\nget_certificate() { # get certificate for csr, if all domains validated.\n  gc_csr=$1         # the csr file\n  gc_certfile=$2    # The filename for the certificate\n  gc_cafile=$3      # The filename for the CA certificate\n  gc_fullchain=$4   # The filename for the fullchain\n\n  der=$(openssl req -in \"$gc_csr\" -outform DER | urlbase64)\n\n  if [[ $API -eq 1 ]]; then\n    send_signed_request \"$URL_new_cert\" \"{\\\"resource\\\": \\\"new-cert\\\", \\\"csr\\\": \\\"$der\\\"}\" \"needbase64\"\n    # convert certificate information into correct format and save to file.\n    CertData=$(awk ' $1 ~ \"^Location\" {print $2}' \"$CURL_HEADER\" |tr -d '\\r')\n    if [[ \"$CertData\" ]] ; then\n      echo -----BEGIN CERTIFICATE----- > \"$gc_certfile\"\n      # shellcheck disable=SC2086\n      curl ${_NOMETER} --user-agent \"$CURL_USERAGENT\" --silent \"$CertData\" | openssl base64 -e  >> \"$gc_certfile\"\n      echo -----END CERTIFICATE-----  >> \"$gc_certfile\"\n      info \"Certificate saved in $CERT_FILE\"\n    fi\n\n    # If certificate wasn't a valid certificate, error exit.\n    if [[ -z \"$CertData\" ]] ; then\n      response2=$(echo \"$response\" | fold -w64 |openssl base64 -d)\n      debug \"response was $response\"\n      error_exit \"Sign failed: $(echo \"$response2\" | grep \"detail\")\"\n    fi\n\n    # get a copy of the CA certificate.\n    IssuerData=$(grep -i '^Link' \"$CURL_HEADER\" \\\n                | cut -d \" \" -f 2\\\n                | cut -d ';' -f 1 \\\n                | sed 's/<//g' \\\n                | sed 's/>//g')\n    if [[ \"$IssuerData\" ]] ; then\n      echo -----BEGIN CERTIFICATE----- > \"$gc_cafile\"\n      # shellcheck disable=SC2086\n      curl ${_NOMETER} --user-agent \"$CURL_USERAGENT\" --silent \"$IssuerData\" | openssl base64 -e  >> \"$gc_cafile\"\n      echo -----END CERTIFICATE-----  >> \"$gc_cafile\"\n      info \"The intermediate CA cert is in $gc_cafile\"\n    fi\n  else # APIv2\n    info \"Requesting Finalize Link\"\n    send_signed_request \"$FinalizeLink\" \"{\\\"csr\\\": \\\"$der\\\"}\" \"needbase64\"\n\n    info Checking Finalize status\n    debug \"POST-as-GET order link ($OrderLink) to check status\"\n    send_signed_request \"$OrderLink\" \"\"\n\n    # if ACME response is pending (they haven't completed checks yet) or ready (awaiting finalization)\n    # or processing (still creating certificates) then wait and check again.\n    count=0\n    while [[ \"$response_status\" != \"valid\" ]]; do\n      info \"ACME server still Processing certificates\"\n      sleep 5\n      send_signed_request \"$OrderLink\" \"\"\n      ((count++))\n      if [[ $count -gt 10 ]]; then\n        error_exit \"Finalize failed - checked server 10 times but certificate still not ready\"\n      fi\n    done\n\n    info \"Requesting certificate\"\n    CertData=$(json_get \"$response\" \"certificate\")\n    send_signed_request \"$CertData\" \"\" \"\" \"$gc_fullchain\"\n    IFS=$'\\n' read -r -d '' -a alternate_links < <(echo \"$responseHeaders\" | grep \"^Link\" | grep \"alternate\" | awk -F\"[<>]\" '{print $2}')\n    debug \"Alternate Links are ${alternate_links[*]}\"\n    if [[ -n \"$PREFERRED_CHAIN\" ]]; then\n      cert_to_check=$(mktemp 2>/dev/null || mktemp -t getssl.XXXXXX) || error_exit \"mktemp failed\"\n      # Check the default certificate to see if that has the required chain\n      cp \"$gc_fullchain\" \"$cert_to_check\"\n      i=0\n      while [[ $i -le ${#alternate_links[@]} ]]; do\n        cert_issuer=$(openssl crl2pkcs7 -nocrl -certfile \"$cert_to_check\" | openssl pkcs7 -print_certs -text -noout | grep 'Issuer:' | tail -1 | awk -F\"CN=\" '{ print $2 }')\n        debug Certificate issued by \"$cert_issuer\"\n        if [[ $cert_issuer = *${PREFERRED_CHAIN}* ]]; then\n          debug \"Found required certificate\"\n          cp \"$cert_to_check\" \"$gc_fullchain\"\n          break\n        fi\n\n        if [[ $i -lt ${#alternate_links[@]} ]]; then\n          debug \"Fetching next alternate certificate $i ${alternate_links[$i]}\"\n          send_signed_request \"${alternate_links[$i]}\" \"\" \"\" \"$cert_to_check\"\n        fi\n        i=$(( i + 1 ))\n      done\n\n      # tidy up\n      rm -f \"$cert_to_check\"\n    fi\n\n    awk -v CERT_FILE=\"$gc_certfile\" -v CA_CERT=\"$gc_cafile\" 'BEGIN {outfile=CERT_FILE} split_after==1 {outfile=CA_CERT;split_after=0} /-----END CERTIFICATE-----/ {split_after=1} {print > outfile}' \"$gc_fullchain\"\n    if [[ \"$FULL_CHAIN_INCLUDE_ROOT\" == \"true\" ]]; then\n      # Some of the code below was copied from zakjan/cert-chain-resolver\n\n      # Download the certificate for the issuer using the \"CA Issuers\" attribute from the AIA x509 extension\n      issuer_url=$(openssl x509 -inform pem -noout -text -in \"$gc_certfile\" | awk 'BEGIN {FS=\"CA Issuers - URI:\"} NF==2 {print $2; exit}')\n      debug Issuer for \"$gc_certfile\" is \"$issuer_url\"\n\n      # Keep downloading issuer certficates until we find the root certificate (which doesn't have a \"CA Issuers\" attribure)\n      cp \"$gc_certfile\" \"$gc_fullchain\"\n      while [[ -n \"$issuer_url\" ]]; do\n        debug Fetching certificate issuer from \"$issuer_url\"\n        # shellcheck disable=SC2086\n        issuer_cert=$(curl ${_NOMETER} --user-agent \"$CURL_USERAGENT\" --silent \"$issuer_url\" | openssl x509 -inform der -outform pem)\n        debug Fetched issuer certificate \"$(echo \"$issuer_cert\" | openssl x509 -inform pem -noout -text | awk 'BEGIN {FS=\"Subject: \"} NF==2 {print $2; exit}')\"\n        echo \"$issuer_cert\" >> \"$gc_fullchain\"\n\n        # get issuer for the certificate that's just been downloaded\n        issuer_url=$(echo \"$issuer_cert\" | openssl x509 -inform pem -noout -text | awk 'BEGIN {FS=\"CA Issuers - URI:\"} NF==2 {print $2; exit}')\n      done\n    fi\n    info \"Certificate saved in $gc_certfile\"\n  fi\n}\n\nget_cr() { # get curl response\n  url=\"$1\"\n  debug url \"$url\"\n  # shellcheck disable=SC2086\n  response=$(curl ${_NOMETER} --user-agent \"$CURL_USERAGENT\" --silent \"$url\")\n  ret=$?\n  debug response \"${response//[$'\\t\\r\\n']}\"\n  code=$(json_get \"$response\" status)\n  debug code \"$code\"\n  debug \"get_cr return code $ret\"\n  return $ret\n}\n\nget_eab_json() { # calculate json block for external account bindings, v2 only\n  if [ ${#EAB_PARAMS[@]} -eq 1 ]; then\n    # single param, assume file path and read into array\n    debug \"Using EAB FILE ${EAB_PARAMS[0]}\"\n    [[ -s \"${EAB_PARAMS[0]}\" ]] || error_exit \"missing path ${EAB_PARAMS[0]} for eab file\"\n    # shellcheck disable=SC2207\n    EAB_PARAMS=( $(cat \"${EAB_PARAMS[0]}\") )\n  fi\n  if [ ${#EAB_PARAMS[@]} -eq 2 ]; then\n    # two params - kid and mac key from CA\n    debug \"Using EAB KID ${EAB_PARAMS[0]}\"\n    debug \"Using EAB HMAC ${EAB_PARAMS[1]}\"\n    eab_protected=\"{\\\"alg\\\": \\\"HS256\\\", \\\"kid\\\": \\\"${EAB_PARAMS[0]}\\\", \\\"url\\\": \\\"${URL_newAccount}\\\"}\"\n    eab_protected64=$(printf '%s' \"${eab_protected}\" | urlbase64)\n    eab_payload=\"${jwk}\"\n    eab_payload64=$(printf '%s' \"${eab_payload}\" | urlbase64)\n    signing_input=$(printf '%s' \"${eab_protected64}.${eab_payload64}\")\n    keyhex=$(printf '%s' \"${EAB_PARAMS[1]}\" | base64url_decode | xxd -p | tr -d '\\n')\n    debug \"SIGN INPUT $signing_input\"\n    debug \"HMAC-SHA256 HEXKEY $keyhex\"\n    eab_signature=$(printf '%s' \"$signing_input\" | openssl dgst -sha256 -mac hmac -macopt \"hexkey:${keyhex}\" -binary | urlbase64)\n    EAB_JSON=\"{\"\n    EAB_JSON=\"${EAB_JSON}\\\"protected\\\": \\\"${eab_protected64}\\\",\"\n    EAB_JSON=\"${EAB_JSON}\\\"payload\\\": \\\"${eab_payload64}\\\",\"\n    EAB_JSON=\"${EAB_JSON}\\\"signature\\\": \\\"${eab_signature}\\\"}\"\n    debug \"EAB_JSON ${EAB_JSON}\"\n  else\n    EAB_JSON=\"\"\n  fi\n}\n\nget_os() { # function to get the current Operating System\n  uname_res=$(uname -s)\n  if [[ $(date -h 2>&1 | grep -ic busybox) -gt 0 ]]; then\n    os=\"busybox\"\n  elif [[ ${uname_res} == \"Linux\" ]]; then\n    os=\"linux\"\n  elif [[ ${uname_res} == \"FreeBSD\" ]]; then\n    os=\"bsd\"\n  elif [[ ${uname_res} == \"Darwin\" ]]; then\n    os=\"mac\"\n  elif [[ ${uname_res:0:6} == \"CYGWIN\" ]]; then\n    os=\"cygwin\"\n  elif [[ ${uname_res:0:10} == \"MSYS_NT\" ]]; then\n    os=\"msys_nt\"\n  elif [[ ${uname_res:0:10} == \"MINGW64_NT\" ]]; then\n    os=\"mingw64_nt\"\n  elif [[ ${uname_res:0:5} == \"MINGW\" ]]; then\n    os=\"mingw\"\n  elif [[ ${uname_res} == \"SunOS\" ]]; then\n    os=\"solaris\"\n    if [ -d /usr/gnu/bin ]; then\n      export PATH=/usr/gnu/bin:$PATH\n    else\n      echo \"Path with required GNU commands not found, please install /usr/gnu/bin\"\n      exit 1\n    fi\n  else\n    os=\"unknown\"\n  fi\n  debug \"detected os type = $os\"\n  if [[ -f /etc/issue ]]; then\n    debug \"Running $(cat /etc/issue)\"\n  fi\n}\n\nget_signing_params() { # get signing parameters from key\n  skey=$1\n  if openssl rsa -in \"${skey}\" -noout 2>/dev/null ; then # RSA key\n    pub_exp64=$(openssl rsa -in \"${skey}\" -noout -text \\\n                | grep publicExponent \\\n                | grep -oE \"0x[a-f0-9]+\" \\\n                | cut -d'x' -f2 \\\n                | hex2bin \\\n                | urlbase64)\n    pub_mod64=$(openssl rsa -in \"${skey}\" -noout -modulus \\\n                | cut -d'=' -f2 \\\n                | hex2bin \\\n                | urlbase64)\n\n    jwk='{\"e\":\"'\"${pub_exp64}\"'\",\"kty\":\"RSA\",\"n\":\"'\"${pub_mod64}\"'\"}'\n    jwkalg=\"RS256\"\n    signalg=\"sha256\"\n  elif openssl ec -in \"${skey}\" -noout 2>/dev/null ; then # Elliptic curve key.\n    crv=\"$(openssl ec -in  \"$skey\" -noout -text 2>/dev/null | awk '$2 ~ \"CURVE:\" {print $3}')\"\n    if [[ -z \"$crv\" ]]; then\n      gsp_keytype=\"$(openssl ec -in  \"$skey\" -noout -text 2>/dev/null \\\n                    | grep \"^ASN1 OID:\" \\\n                    | awk '{print $3}')\"\n      case \"$gsp_keytype\" in\n        prime256v1) crv=\"P-256\" ;;\n        secp384r1) crv=\"P-384\" ;;\n        secp521r1) crv=\"P-521\" ;;\n        *) error_exit \"invalid curve algorithm type $gsp_keytype\";;\n      esac\n    fi\n    case \"$crv\" in\n      P-256) jwkalg=\"ES256\" ; signalg=\"sha256\" ;;\n      P-384) jwkalg=\"ES384\" ; signalg=\"sha384\" ;;\n      P-521) jwkalg=\"ES512\" ; signalg=\"sha512\" ;;\n      *) error_exit \"invalid curve algorithm type $crv\";;\n    esac\n    pubtext=\"$(openssl ec  -in \"$skey\"  -noout -text 2>/dev/null \\\n              | awk '/^pub:/{p=1;next}/^ASN1 OID:/{p=0}p' \\\n              | tr -d \": \\n\\r\")\"\n    mid=$(( (${#pubtext} -2) / 2 + 2 ))\n    x64=$(echo \"$pubtext\" | cut -b 3-$mid | hex2bin | urlbase64)\n    y64=$(echo \"$pubtext\" | cut -b $((mid+1))-${#pubtext} | hex2bin | urlbase64)\n    jwk='{\"crv\":\"'\"$crv\"'\",\"kty\":\"EC\",\"x\":\"'\"$x64\"'\",\"y\":\"'\"$y64\"'\"}'\n  else\n    error_exit \"Invalid key file\"\n  fi\n  thumbprint=\"$(printf \"%s\" \"$jwk\" | openssl dgst -sha256 -binary | urlbase64)\"\n  debug \"jwk alg = $jwkalg\"\n}\n\ngraceful_exit() { # normal exit function.\n  exit_code=\"${1-0}\"\n  clean_up\n  # shellcheck disable=SC2086\n  exit $exit_code\n}\n\nhelp_message() { # print out the help message\n  cat <<- _EOF_\n\t$PROGNAME ver. $VERSION\n\tObtain SSL certificates from the letsencrypt.org ACME server\n\n\t$(usage)\n\n\tOptions:\n\t  -a, --all          Check all certificates\n\t  -d, --debug        Output debug information\n\t  -c, --create       Create default config files\n\t  -f, --force        Force renewal of cert (overrides expiry checks)\n\t  -h, --help         Display this help message and exit\n\t  -i, --install      Install certificates and reload service\n\t  -q, --quiet        Quiet mode (only outputs on error, success of new cert, or getssl was upgraded)\n\t  -Q, --mute         Like -q, but also mute notification about successful upgrade\n\t  -r, --revoke \"cert\" \"key\" [CA_server]    Revoke a certificate (the cert and key are required)\n\t  -u, --upgrade      Upgrade getssl if a more recent version is available - can be used with or without domain(s)\n\t  -X, --experimental tag  Upgrade to experimental releases, specified by tag (e.g. v9.43)\n\t  -U, --nocheck      Do not check if a more recent version is available\n\t  -v  --version      Display current version of $PROGNAME\n\t  -w working_dir \"Working directory\"\n\t  --preferred-chain \"chain\" Use an alternate chain for the certificate\n\t  --account-id       Display account id and exit\n\n\t_EOF_\n}\n\nhex2bin() { # Remove spaces, add leading zero, escape as hex string ensuring no trailing new line char\n#  printf -- \"$(cat | os_esed -e 's/[[:space:]]//g' -e 's/^(.(.{2})*)$/0\\1/' -e 's/(.{2})/\\\\x\\1/g')\"\n  echo -e -n \"$(cat | os_esed -e 's/[[:space:]]//g' -e 's/^(.(.{2})*)$/0\\1/' -e 's/(.{2})/\\\\x\\1/g')\"\n}\n\ninfo() { # write out info as long as the quiet flag has not been set.\n  if [[ ${_QUIET} -eq 0 ]]; then\n    # If running tests then verbose output (for debugging tests)\n    if [[ -n ${BATS_RUN_TMPDIR} ]]; then\n      echo \"$(date \"+%b %d %T\") ${FUNCNAME[1]}:${BASH_LINENO[1]}\" \"$@\"\n    else\n      echo \"$@\"\n    fi\n  fi\n}\n\njson_awk() { # AWK json converter used for API2 - needs tidying up ;)\n# shellcheck disable=SC2086\necho \"$1\" | tr -d '\\n' | awk '\n{\n  tokenize($0) # while(get_token()) {print TOKEN}\n  if (0 == parse()) {\n    apply(JPATHS, NJPATHS)\n  }\n}\n\nfunction apply (ary,size,i) {\n  for (i=1; i<size; i++)\n    print ary[i]\n}\n\nfunction get_token() {\n  TOKEN = TOKENS[++ITOKENS] # for internal tokenize()\n  return ITOKENS < NTOKENS\n}\n\nfunction parse_array(a1,idx,ary,ret) {\n  idx=0\n  ary=\"\"\n  get_token()\n  if (TOKEN != \"]\") {\n    while (1) {\n      if (ret = parse_value(a1, idx)) {\n        return ret\n      }\n      idx=idx+1\n      ary=ary VALUE\n      get_token()\n      if (TOKEN == \"]\") {\n        break\n      } else if (TOKEN == \",\") {\n        ary = ary \",\"\n      } else {\n        report(\", or ]\", TOKEN ? TOKEN : \"EOF\")\n        return 2\n      }\n      get_token()\n    }\n  }\n  VALUE=\"\"\n  return 0\n}\n\nfunction parse_object(a1,key,obj) {\n  obj=\"\"\n  get_token()\n  if (TOKEN != \"}\") {\n    while (1) {\n      if (TOKEN ~ /^\".*\"$/) {\n        key=TOKEN\n      } else {\n        report(\"string\", TOKEN ? TOKEN : \"EOF\")\n        return 3\n      }\n      get_token()\n      if (TOKEN != \":\") {\n        report(\":\", TOKEN ? TOKEN : \"EOF\")\n        return 4\n      }\n      get_token()\n      if (parse_value(a1, key)) {\n        return 5\n      }\n      obj=obj key \":\" VALUE\n      get_token()\n      if (TOKEN == \"}\") {\n        break\n      } else if (TOKEN == \",\") {\n        obj=obj \",\"\n      } else {\n        report(\", or }\", TOKEN ? TOKEN : \"EOF\")\n        return 6\n      }\n      get_token()\n    }\n  }\n  VALUE=\"\"\n  return 0\n}\n\n\nfunction parse_value(a1, a2,   jpath,ret,x) {\n  jpath=(a1!=\"\" ? a1 \",\" : \"\") a2 # \"${1:+$1,}$2\"\n  if (TOKEN == \"{\") {\n    if (parse_object(jpath)) {\n      return 7\n    }\n  } else if (TOKEN == \"[\") {\n    if (ret = parse_array(jpath)) {\n      return ret\n    }\n  } else if (TOKEN == \"\") { #test case 20150410 #4\n    report(\"value\", \"EOF\")\n    return 9\n  } else if (TOKEN ~ /^([^0-9])$/) {\n    # At this point, the only valid single-character tokens are digits.\n    report(\"value\", TOKEN)\n    return 9\n  } else {\n    VALUE=TOKEN\n  }\n  if (! (\"\" == jpath || \"\" == VALUE)) {\n    x=sprintf(\"[%s]\\t%s\", jpath, VALUE)\n    print x\n  }\n  return 0\n}\n\nfunction parse(   ret) {\n  get_token()\n  if (ret = parse_value()) {\n    return ret\n  }\n  if (get_token()) {\n    report(\"EOF\", TOKEN)\n    return 11\n  }\n  return 0\n}\n\nfunction report(expected, got,   i,from,to,context) {\n  from = ITOKENS - 10; if (from < 1) from = 1\n  to = ITOKENS + 10; if (to > NTOKENS) to = NTOKENS\n  for (i = from; i < ITOKENS; i++)\n    context = context sprintf(\"%s \", TOKENS[i])\n  context = context \"<<\" got \">> \"\n  for (i = ITOKENS + 1; i <= to; i++)\n    context = context sprintf(\"%s \", TOKENS[i])\n  scream(\"json_awk expected <\" expected \"> but got <\" got \"> at input token \" ITOKENS \"\\n\" context)\n}\n\nfunction reset() {\n  TOKEN=\"\"; delete TOKENS; NTOKENS=ITOKENS=0\n  delete JPATHS; NJPATHS=0\n  VALUE=\"\"\n}\n\nfunction scream(msg) {\n  FAILS[FILENAME] = FAILS[FILENAME] (FAILS[FILENAME]!=\"\" ? \"\\n\" : \"\") msg\n  msg = FILENAME \": \" msg\n  print msg >\"/dev/stderr\"\n}\n\nfunction tokenize(a1,pq,pb,ESCAPE,CHAR,STRING,NUMBER,KEYWORD,SPACE) {\n  SPACE=\"[ \\t\\n]+\"\n  gsub(/\"[^\\001-\\037\"\\\\]*((\\\\[^u\\001-\\037]|\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])[^\\001-\\037\"\\\\]*)*\"|-?(0|[1-9][0-9]*)([.][0-9]*)?([eE][+-]?[0-9]*)?|null|false|true|[ \\t\\n]+|./, \"\\n&\", a1)\n  gsub(\"\\n\" SPACE, \"\\n\", a1)\n  sub(/^\\n/, \"\", a1)\n  ITOKENS=0 # get_token() helper\n  return NTOKENS = split(a1, TOKENS, /\\n/)\n}'\n}\n\njson_get() { # get values from json\n  if [[ -z \"$1\" ]] || [[ \"$1\" == \"null\" ]]; then\n    echo \"json was blank\"\n    return\n  fi\n  if [[ $API = 1 ]]; then\n    # remove newlines, so it's a single chunk of JSON\n    json_data=$( echo \"$1\" | tr '\\n' ' ')\n    # if $3 is defined, this is the section which the item is in.\n    if [[ -n \"$3\" ]]; then\n      jg_section=$(echo \"$json_data\" | awk -F\"[}]\" '{for(i=1;i<=NF;i++){if($i~/\\\"'\"${3}\"'\\\"/){print $i}}}')\n      if [[ \"$2\" == \"uri\" ]]; then\n        jg_subsect=$(echo \"$jg_section\" | awk -F\"[,]\" '{for(i=1;i<=NF;i++){if($i~/\\\"'\"${2}\"'\\\"/){print $(i)}}}')\n        jg_result=$(echo \"$jg_subsect\" | awk -F'\"' '{print $4}')\n      else\n        jg_result=$(echo \"$jg_section\" | awk -F\"[,:}]\" '{for(i=1;i<=NF;i++){if($i~/\\\"'\"${2}\"'\\\"/){print $(i+1)}}}')\n      fi\n    else\n      jg_result=$(echo \"$json_data\" |awk -F\"[,:}]\" '{for(i=1;i<=NF;i++){if($i~/\\\"'\"${2}\"'\\\"/){print $(i+1)}}}')\n    fi\n    # check number of quotes\n    jg_q=${jg_result//[^\\\"]/}\n    # if 2 quotes, assume it's a quoted variable and just return the data within the quotes.\n    if [[ ${#jg_q} -eq 2 ]]; then\n      echo \"$jg_result\" | awk -F'\"' '{print $2}'\n    else\n      echo \"$jg_result\"\n    fi\n  else\n    if [[ -n \"$6\" ]]; then\n      full=$(json_awk \"$1\")\n      section=$(echo \"$full\" | grep \"\\\"$2\\\"\" | grep \"\\\"$3\\\"\" | grep \"\\\"$4\\\"\" | awk -F\",\" '{print $2}')\n      echo \"$full\" | grep \"^..${5}\\\",$section\\]\" | awk '{print $2}' | tr -d '\"'\n    elif [[ -n \"$5\" ]]; then\n      full=$(json_awk \"$1\")\n      section=$(echo \"$full\" | grep \"\\\"$2\\\"\" | grep \"\\\"$3\\\"\" | grep \"\\\"$4\\\"\" | awk -F\",\" '{print $2}')\n      echo \"$full\" | grep \"^..${2}\\\",$section\" | grep \"$5\" | awk '{print $2}' | tr -d '\"'\n    elif [[ -n \"$3\" ]]; then\n      json_awk \"$1\" | grep \"^..${2}...${3}\" | awk '{print $2}' | tr -d '\"'\n    elif [[ -n \"$2\" ]]; then\n      json_awk \"$1\" | grep \"^..${2}\" | awk '{print $2}' | tr -d '\"'\n    else\n      json_awk \"$1\"\n    fi\n  fi\n}\n\nobtain_ca_resource_locations()\n{\n  CURL_RESPONSE_FILE=\"$(mktemp 2>/dev/null || mktemp -t getssl.XXXXXX)\"\n\n  for suffix in \"\" \"/directory\" \"/dir\";\n  do\n    # Obtain CA resource locations\n    # shellcheck disable=SC2086\n    ca_all_loc=$(curl ${_NOMETER} --user-agent \"$CURL_USERAGENT\" \"${CA}${suffix}\" 2> $CURL_RESPONSE_FILE)\n    errcode=$?\n    if [[ $errcode -ne 0 ]]; then\n      response=$(cat \"$CURL_RESPONSE_FILE\")\n      rm \"$CURL_RESPONSE_FILE\"\n      error_exit \"ERROR curl \\\"$CA$suffix\\\" failed with $errcode and returned:\\n$response\"\n    else\n      rm \"$CURL_RESPONSE_FILE\"\n    fi\n\n    debug \"ca_all_loc from ${CA}${suffix} gives $ca_all_loc\"\n    ca_all_loc=${ca_all_loc//,/,$'\\n'}\n\n    # APIv1\n    URL_new_reg=$(echo \"$ca_all_loc\" | grep \"new-reg\" | awk -F'\"' '{print $4}')\n    URL_new_authz=$(echo \"$ca_all_loc\" | grep \"new-authz\" | awk -F'\"' '{print $4}')\n    URL_new_cert=$(echo \"$ca_all_loc\" | grep \"new-cert\" | awk -F'\"' '{print $4}')\n    #API v2\n    URL_newAccount=$(echo \"$ca_all_loc\" | grep \"newAccount\" | awk -F'\"' '{print $4}')\n    URL_newNonce=$(echo \"$ca_all_loc\" | grep \"newNonce\" | awk -F'\"' '{print $4}')\n    URL_newOrder=$(echo \"$ca_all_loc\" | grep \"newOrder\" | awk -F'\"' '{print $4}')\n    URL_revoke=$(echo \"$ca_all_loc\" | grep \"revokeCert\" | awk -F'\"' '{print $4}')\n\n    if [[ -n \"$URL_new_reg\" ]] || [[ -n \"$URL_newAccount\" ]]; then\n      break\n    fi\n  done\n\n  # If a directory offers both versions, select V2.\n  if [[ -n \"$URL_newAccount\" ]]; then\n    API=2\n  elif [[ -n \"$URL_new_reg\" ]]; then\n    API=1\n  else\n    error_exit \"unknown API version\"\n  fi\n  debug \"Using API v$API\"\n}\n\nos_esed() { # Use different sed version for different os types (extended regex)\n  if [[ \"$os\" == \"bsd\" ]]; then # BSD requires -E flag for extended regex\n    sed -E \"${@}\"\n  elif [[ \"$os\" == \"mac\" ]]; then # MAC uses older BSD style sed.\n    sed -E \"${@}\"\n  else\n    sed -r \"${@}\"\n  fi\n}\n\npurge_archive() { # purge archive of old, invalid, certificates\n  arcdir=\"$1/archive\"\n  debug \"purging archives in ${arcdir}/\"\n  for padir in \"$arcdir\"/????_??_??_??_??; do\n    # check each directory\n    if [[ -d \"$padir\" ]]; then\n      tstamp=$(basename \"$padir\"| awk -F\"_\" '{print $1\"-\"$2\"-\"$3\" \"$4\":\"$5}')\n      if [[ \"$os\" == \"bsd\" ]]; then\n        direpoc=$(date -j -f \"%F %H:%M\" \"$tstamp\" +%s)\n      elif [[ \"$os\" == \"mac\" ]]; then\n        direpoc=$(date -j -f \"%F %H:%M\" \"$tstamp\" +%s)\n      else\n        direpoc=$(date -d \"$tstamp\" +%s)\n      fi\n      current_epoc=$(date \"+%s\")\n      # as certs currently valid for 90 days, purge anything older than 100\n      purgedate=$((current_epoc - 60*60*24*100))\n      if [[ \"$direpoc\" -lt \"$purgedate\" ]]; then\n        echo \"purge $padir\"\n        rm -rf \"${padir:?}\"\n      fi\n    fi\n  done\n}\n\nreload_service() {  # Runs a command to reload services ( via ssh if needed)\n  if [[ -n \"$RELOAD_CMD\" ]]; then\n    info \"reloading SSL services\"\n    for ARELOAD_CMD in \"${RELOAD_CMD[@]}\"\n    do\n      if [[ \"${ARELOAD_CMD:0:4}\" == \"ssh:\" ]] ; then\n        sshhost=$(echo \"$ARELOAD_CMD\"| awk -F: '{print $2}')\n        command=${ARELOAD_CMD:(( ${#sshhost} + 5))}\n        debug \"running following command to reload cert:\"\n        debug \"ssh $SSH_OPTS $sshhost ${command} $_REDIRECT_OUTPUT\"\n        # shellcheck disable=SC2029\n        # shellcheck disable=SC2086\n        ssh $SSH_OPTS \"$sshhost\" \"${command}\" $_REDIRECT_OUTPUT\n        # allow 2 seconds for services to restart\n        sleep 2\n      else\n        debug \"running reload command: $ARELOAD_CMD\"\n        if ! eval \"$ARELOAD_CMD\" ; then\n          error_exit \"error running: $ARELOAD_CMD\"\n        fi\n      fi\n    done\n  fi\n}\n\nrevoke_certificate() { # revoke a certificate\n  debug \"revoking cert $REVOKE_CERT\"\n  debug \"using key $REVOKE_KEY\"\n  ACCOUNT_KEY=\"$REVOKE_KEY\"\n  # need to set the revoke key as \"account_key\" since it's used in send_signed_request.\n  get_signing_params \"$REVOKE_KEY\"\n  TEMP_DIR=$(mktemp -d 2>/dev/null || mktemp -d -t getssl) || error_exit \"mktemp failed\"\n  debug \"revoking from $URL_revoke\"\n  rcertdata=$(sed '1d;$d' \"$REVOKE_CERT\" | tr -d \"\\r\\n\" | tr '/+' '_-' | tr -d '= ')\n  send_signed_request \"$URL_revoke\" \"{\\\"certificate\\\": \\\"$rcertdata\\\",\\\"reason\\\": $REVOKE_REASON}\"\n  if [[ $code -eq \"200\" ]]; then\n    info \"certificate revoked\"\n  else\n    error_exit \"Revocation failed: $(echo \"$response\" | grep \"detail\")\"\n  fi\n}\n\nrequires() { # check if required function is available\n  args=(\"${@}\")\n  lastarg=${args[${#args[@]}-1]}\n  if [[ \"$#\" -gt 1 ]]; then # if more than 1 value, check list\n    for i in \"$@\"; do\n      if [[ \"$i\" == \"$lastarg\" ]]; then # if on last variable then exit as not found\n        error_exit \"this script requires one of: ${*:1:$(($#-1))}\"\n      fi\n      res=$(command -v \"$i\" 2>/dev/null)\n      debug \"checking for $i ... $res\"\n      if [[ -n \"$res\" ]]; then # if function found, then set variable to function and return\n        debug \"function $i found at $res  - setting ${lastarg} to $i\"\n        eval \"${lastarg}=\\$i\"\n        return\n      fi\n    done\n  else # only one value, so check it.\n    result=$(command -v \"$1\" 2>/dev/null)\n    debug \"checking for required $1 ... $result\"\n    if [[ -z \"$result\" ]]; then\n      error_exit \"This script requires $1 installed\"\n    fi\n  fi\n}\n\nset_server_type() { # uses SERVER_TYPE to set REMOTE_PORT and REMOTE_EXTRA\n  if [[ ${SERVER_TYPE} == \"https\" ]] || [[ ${SERVER_TYPE} == \"webserver\" ]]; then\n    REMOTE_PORT=443\n  elif [[ ${SERVER_TYPE} == \"ftp\" ]]; then\n    REMOTE_PORT=21\n    REMOTE_EXTRA=\"-starttls ftp\"\n  elif [[ ${SERVER_TYPE} == \"ftpi\" ]]; then\n    REMOTE_PORT=990\n  elif [[ ${SERVER_TYPE} == \"imap\" ]]; then\n    REMOTE_PORT=143\n    REMOTE_EXTRA=\"-starttls imap\"\n  elif [[ ${SERVER_TYPE} == \"imaps\" ]]; then\n    REMOTE_PORT=993\n  elif [[ ${SERVER_TYPE} == \"pop3\" ]]; then\n    REMOTE_PORT=110\n    REMOTE_EXTRA=\"-starttls pop3\"\n  elif [[ ${SERVER_TYPE} == \"pop3s\" ]]; then\n    REMOTE_PORT=995\n  elif [[ ${SERVER_TYPE} == \"smtp\" ]]; then\n    REMOTE_PORT=25\n    REMOTE_EXTRA=\"-starttls smtp\"\n  elif [[ ${SERVER_TYPE} == \"smtps_deprecated\" ]]; then\n    REMOTE_PORT=465\n  elif [[ ${SERVER_TYPE} == \"smtps\" ]] || [[ ${SERVER_TYPE} == \"smtp_submission\" ]]; then\n    REMOTE_PORT=587\n    REMOTE_EXTRA=\"-starttls smtp\"\n  elif [[ ${SERVER_TYPE} == \"xmpp\" ]]; then\n    REMOTE_PORT=5222\n    REMOTE_EXTRA=\"-starttls xmpp\"\n  elif [[ ${SERVER_TYPE} == \"xmpps\" ]]; then\n    REMOTE_PORT=5269\n  elif [[ ${SERVER_TYPE} == \"ldaps\" ]]; then\n    REMOTE_PORT=636\n  elif [[ ${SERVER_TYPE} == \"postgres\" ]]; then\n    REMOTE_PORT=5432\n    REMOTE_EXTRA=\"-starttls postgres\"\n  elif [[ ${SERVER_TYPE} =~ ^[0-9]+$ ]]; then\n    REMOTE_PORT=${SERVER_TYPE}\n  else\n    info \"${DOMAIN}: unknown server type \\\"$SERVER_TYPE\\\" in SERVER_TYPE\"\n    config_errors=true\n  fi\n}\n\nsend_signed_request() { # Sends a request to the ACME server, signed with your private key.\n  url=$1\n  payload=$2\n  needbase64=$3\n  outfile=$4 # save response into this file (certificate data)\n\n  debug url \"$url\"\n\n  CURL_HEADER=\"$TEMP_DIR/curl.header\"\n  dp=\"$TEMP_DIR/curl.dump\"\n\n  CURL=\"curl ${_NOMETER} \"\n  if check_version \"${_CURL_VERSION}\" \"7.33\" ; then\n    CURL=\"$CURL --http1.1 \"\n  fi\n\n  CURL=\"$CURL --user-agent $CURL_USERAGENT --silent --dump-header $CURL_HEADER \"\n\n  if [[ ${_USE_DEBUG} -eq 1 ]]; then\n    CURL=\"$CURL --trace-ascii $dp \"\n  fi\n\n  # convert payload to url base 64\n  payload64=\"$(printf '%s' \"${payload}\" | urlbase64)\"\n\n  # get nonce from ACME server\n  if [[ $API -eq 1 ]]; then\n    nonceurl=\"$CA/directory\"\n    nonce=$($CURL -I \"$nonceurl\" | grep \"^Replay-Nonce:\" | awk '{print $2}' | tr -d '\\r\\n ')\n  else # APIv2\n    nonce=$($CURL -I \"$URL_newNonce\" | grep \"^Replay-Nonce:\" | awk '{print $2}' | tr -d '\\r\\n ')\n  fi\n\n  nonceproblem=\"true\"\n  while [[ \"$nonceproblem\" == \"true\" ]]; do\n\n    # Build header with just our public key and algorithm information\n    header='{\"alg\": \"'\"$jwkalg\"'\", \"jwk\": '\"$jwk\"'}'\n\n    # Build another header which also contains the previously received nonce and encode it as urlbase64\n    if [[ $API -eq 1 ]]; then\n      protected='{\"alg\": \"'\"$jwkalg\"'\", \"jwk\": '\"$jwk\"', \"nonce\": \"'\"${nonce}\"'\", \"url\": \"'\"${url}\"'\"}'\n      protected64=\"$(printf '%s' \"${protected}\" | urlbase64)\"\n    else # APIv2\n      if [[ -z \"$KID\" ]]; then\n        debug \"KID is blank, so using jwk\"\n        protected='{\"alg\": \"'\"$jwkalg\"'\", \"jwk\": '\"$jwk\"', \"nonce\": \"'\"${nonce}\"'\", \"url\": \"'\"${url}\"'\"}'\n        protected64=\"$(printf '%s' \"${protected}\" | urlbase64)\"\n      else\n        debug \"using KID=${KID}\"\n        protected=\"{\\\"alg\\\": \\\"$jwkalg\\\", \\\"kid\\\": \\\"$KID\\\",\\\"nonce\\\": \\\"${nonce}\\\", \\\"url\\\": \\\"${url}\\\"}\"\n        protected64=\"$(printf '%s' \"${protected}\" | urlbase64)\"\n      fi\n    fi\n\n    # Sign header with nonce and our payload with our private key and encode signature as urlbase64\n    sign_string \"$(printf '%s' \"${protected64}.${payload64}\")\"  \"${ACCOUNT_KEY}\" \"$signalg\"\n\n    # Send header + extended header + payload + signature to the acme-server\n    debug \"payload = $payload\"\n    if [[ $API -eq 1 ]]; then\n      body=\"{\\\"header\\\": ${header},\"\n      body=\"${body}\\\"protected\\\": \\\"${protected64}\\\",\"\n      body=\"${body}\\\"payload\\\": \\\"${payload64}\\\",\"\n      body=\"${body}\\\"signature\\\": \\\"${signed64}\\\"}\"\n    else\n      body=\"{\"\n      body=\"${body}\\\"protected\\\": \\\"${protected64}\\\",\"\n      body=\"${body}\\\"payload\\\": \\\"${payload64}\\\",\"\n      body=\"${body}\\\"signature\\\": \\\"${signed64}\\\"}\"\n    fi\n\n    code=\"500\"\n    loop_limit=5\n    while [[ \"$code\" == 5* ]]; do\n      if [[ \"$outfile\" ]] ; then\n        $CURL -X POST -H \"Content-Type: application/jose+json\" --data \"$body\" \"$url\" > \"$outfile\"\n        errcode=$?\n        response=$(cat \"$outfile\")\n      elif [[ \"$needbase64\" ]] ; then\n        response=$($CURL -X POST -H \"Content-Type: application/jose+json\" --data \"$body\" \"$url\" | urlbase64)\n        errcode=$?\n      else\n        response=$($CURL -X POST -H \"Content-Type: application/jose+json\" --data \"$body\" \"$url\")\n        errcode=$?\n      fi\n\n      if [[ $errcode -gt 0 || ( \"$response\" == \"\" && $url != *\"revoke\"* ) ]]; then\n        error_exit \"ERROR curl \\\"$url\\\" failed with $errcode and returned \\\"$response\\\"\"\n      fi\n\n      responseHeaders=$(cat \"$CURL_HEADER\")\n      if [[ \"$needbase64\" && ${response##*()} != \"{\"* ]]; then\n        # response is in base64 too, decode\n        response=$(urlbase64_decode \"$response\")\n      fi\n\n      debug responseHeaders \"$responseHeaders\"\n      debug response \"${response//[$'\\t\\r\\n']}\"\n      code=$(awk ' $1 ~ \"^HTTP\" {print $2}' \"$CURL_HEADER\" | tail -1)\n      debug code \"$code\"\n      if [[ \"$code\" == 4* && $response != *\"error:badNonce\"* && \"$code\" != 409 ]]; then\n        detail=$(echo \"$response\" | grep \"detail\")\n        error_exit \"ACME server returned error: ${code}: ${detail}\"\n      fi\n\n      if [[ $API -eq 1 ]]; then\n        response_status=$(json_get \"$response\" status \\\n                        | head -1| awk -F'\"' '{print $2}')\n      else # APIv2\n        if [[ \"$outfile\" && \"$response\" ]]; then\n          debug \"response written to $outfile\"\n        elif [[ ${response##*()} == \"{\"* ]]; then\n          response_status=$(json_get \"$response\" status)\n        else\n          debug \"response not in json format\"\n          debug \"$response\"\n        fi\n      fi\n      debug \"response status = $response_status\"\n      if [[ \"$code\" == 5* ]]; then\n        info \"_error on acme server - waiting 30s then trying again ....\"\n        debug \"loop_limit = $loop_limit\"\n        sleep 30\n        loop_limit=$((loop_limit - 1))\n        if [[ $loop_limit -lt 1 ]]; then\n          error_exit \"$code error from ACME server: $response\"\n        fi\n      fi\n    done\n    if [[ $response == *\"error:badNonce\"* ]]; then\n      debug \"bad nonce\"\n      nonce=$(echo \"$responseHeaders\" | grep -i \"^replay-nonce:\" | awk '{print $2}' | tr -d '\\r\\n ')\n      debug \"trying new nonce $nonce\"\n    else\n      nonceproblem=\"false\"\n    fi\n  done\n}\n\nsign_string() { # sign a string with a given key and algorithm and return urlbase64\n                # sets the result in variable signed64\n  str=$1\n  key=$2\n  signalg=$3\n\n  if openssl rsa -in \"${skey}\" -noout 2>/dev/null ; then # RSA key\n    signed64=\"$(printf '%s' \"${str}\" | openssl dgst -\"$signalg\" -sign \"$key\" | urlbase64)\"\n  elif openssl ec -in \"${skey}\" -noout 2>/dev/null ; then # Elliptic curve key.\n    # ECDSA signature width\n    # e.g. 521 bits requires 66 bytes to express, a signature consists of 2 integers so 132 bytes\n    # https://crypto.stackexchange.com/questions/12299/ecc-key-size-and-signature-size/\n    if [ \"$signalg\" = \"sha256\" ]; then\n      w=64\n    elif [ \"$signalg\" = \"sha384\" ]; then\n      w=96\n    elif [ \"$signalg\" = \"sha512\" ]; then\n      w=132\n    else\n      error_exit \"Unknown signing algorithm $signalg\"\n    fi\n    asn1parse=$(printf '%s' \"${str}\" | openssl dgst -\"$signalg\" -sign \"$key\" | openssl asn1parse -inform DER)\n    #shellcheck disable=SC2086\n    R=$(echo $asn1parse | awk '{ print $13 }' | cut -c2-)\n    debug \"R $R\"\n    #shellcheck disable=SC2086\n    S=$(echo $asn1parse | awk '{ print $20 }' | cut -c2-)\n    debug \"S $S\"\n\n    # pad R and S to the correct length for the signing algorithm\n    signed64=$(printf \"%${w}s%${w}s\" \"${R}\" \"${S}\" | tr ' ' '0' | hex2bin | urlbase64 )\n    debug \"encoded RS $signed64\"\n  fi\n}\n\nsignal_exit() { # Handle trapped signals\n  case $1 in\n    INT)\n      error_exit \"Program interrupted by user\" ;;\n    TERM)\n      echo -e \"\\n$PROGNAME: Program terminated\" >&2\n      graceful_exit ;;\n    *)\n      error_exit \"$PROGNAME: Terminating on unknown signal\" ;;\n  esac\n}\n\ntraceback() { # Print function traceback\n  local i d=1 lbl=\" called\"\n  debug \"Traceback\"\n  for ((i=$((${#FUNCNAME[@]}-1)); i>0; i--)); do\n    if [[ ${i} -eq 1 ]] ; then lbl=\" called traceback\" ; fi\n    debug \"$(printf \"%*s%s() line %d%s\\n\" \"$d\" '' \"${FUNCNAME[$i]}\" \"${BASH_LINENO[$((i-1))]}\" \"$lbl\")\"\n    ((d++))\n  done\n  return 0\n}\n\nurlbase64() { # urlbase64: base64 encoded string with '+' replaced with '-' and '/' replaced with '_'\n  openssl base64 -e | tr -d '\\n\\r' | os_esed -e 's:=*$::g' -e 'y:+/:-_:'\n}\n\n# base64url decode\n# From: https://gist.github.com/alvis/89007e96f7958f2686036d4276d28e47\nurlbase64_decode() {\n  INPUT=$1 # $(if [ -z \"$1\" ]; then echo -n $(cat -); else echo -n \"$1\"; fi)\n  MOD=$(($(echo -n \"$INPUT\" | wc -c) % 4))\n  PADDING=$(if [ $MOD -eq 2 ]; then echo -n '=='; elif [ $MOD -eq 3 ]; then echo -n '=' ; fi)\n  echo -n \"$INPUT$PADDING\" |\n    sed s/-/+/g |\n    sed s/_/\\\\//g |\n    openssl base64 -d -A\n}\n\nusage() { # echos out the program usage\n  echo \"Usage: $PROGNAME [-h|--help] [-d|--debug] [-c|--create] [-f|--force] [-a|--all] [-q|--quiet]\"\\\n       \"[-Q|--mute] [-u|--upgrade] [-X|--experimental tag] [-U|--nocheck] [-r|--revoke cert key] [-w working_dir]\"\\\n       \"[--preferred-chain chain] [--account-id] domain\"\n}\n\nwrite_domain_template() { # write out a template file for a domain.\n  if [[ -s \"$WORKING_DIR/getssl_default.cfg\" ]]; then\n    export DOMAIN=\"$DOMAIN\"\n    export EX_SANS=\"$EX_SANS\"\n    envsubst < \"$WORKING_DIR/getssl_default.cfg\"  > \"$1\"\n  else\n    cat > \"$1\" <<- _EOF_domain_\n\t\t# vim: filetype=sh\n\t\t#\n\t\t# This file is read second (and per domain if running with the -a option)\n\t\t# and overwrites any settings from the first file\n\t\t#\n\t\t# Uncomment and modify any variables you need\n\t\t# see https://github.com/srvrco/getssl/wiki/Config-variables for details\n\t\t# see https://github.com/srvrco/getssl/wiki/Example-config-files for example configs\n\t\t#\n\t\t# The staging server is best for testing\n\t\t#CA=\"https://acme-staging-v02.api.letsencrypt.org\"\n\t\t# This server issues full certificates, however has rate limits\n\t\t#CA=\"https://acme-v02.api.letsencrypt.org\"\n\n\t\t# Private key types - can be rsa, prime256v1, secp384r1 or secp521r1\n\t\t#PRIVATE_KEY_ALG=\"rsa\"\n\n\t\t# Additional domains - this could be multiple domains / subdomains in a comma separated list\n\t\t# Note: this is Additional domains - so should not include the primary domain.\n\t\tSANS=\"${EX_SANS}\"\n\n\t\t# Acme Challenge Location. The first line for the domain, the following ones for each additional domain.\n\t\t# If these start with ssh: then the next variable is assumed to be the hostname and the rest the location.\n\t\t# An ssh key will be needed to provide you with access to the remote server.\n\t\t# Optionally, you can specify a different userid for ssh/scp to use on the remote server before the @ sign.\n\t\t# If left blank, the username on the local server will be used to authenticate against the remote server.\n\t\t# If these start with ftp:/ftpes:/ftps: then the next variables are ftpuserid:ftppassword:servername:ACL_location\n\t\t# These should be of the form \"/path/to/your/website/folder/.well-known/acme-challenge\"\n\t\t# where \"/path/to/your/website/folder/\" is the path, on your web server, to the web root for your domain.\n\t\t# ftp: uses regular ftp; ftpes: ftp over explicit TLS (port 21); ftps: ftp over implicit TLS (port 990).\n\t\t# ftps/ftpes support FTPS_OPTIONS, e.g. to add \"--insecure\" to the curl command for hosts with self-signed certificates.\n\t\t# You can also user WebDAV over HTTPS as transport mechanism. To do so, start with davs: followed by username,\n\t\t# password, host, port (explicitly needed even if using default port 443) and path on the server.\n\t\t# Multiple locations can be defined for a file by separating the locations with a semi-colon.\n\t\t#ACL=('/var/www/${DOMAIN}/web/.well-known/acme-challenge'\n\t\t#     'ssh:server5:/var/www/${DOMAIN}/web/.well-known/acme-challenge'\n\t\t#     'ssh:sshuserid@server5:/var/www/${DOMAIN}/web/.well-known/acme-challenge'\n\t\t#     'ftp:ftpuserid:ftppassword:${DOMAIN}:/web/.well-known/acme-challenge'\n\t\t#     'davs:davsuserid:davspassword:{DOMAIN}:443:/web/.well-known/acme-challenge'\n\t\t#     'ftps:ftpuserid:ftppassword:${DOMAIN}:/web/.well-known/acme-challenge'\n\t\t#     'ftpes:ftpuserid:ftppassword:${DOMAIN}:/web/.well-known/acme-challenge')\n\n\t\t# Specify SSH options, e.g. non standard port in SSH_OPTS\n\t\t# (Can also use SCP_OPTS and SFTP_OPTS)\n\t\t# SSH_OPTS=-p 12345\n\n\t\t# Set USE_SINGLE_ACL=\"true\" to use a single ACL for all checks\n\t\t#USE_SINGLE_ACL=\"false\"\n\n\t\t# Preferred Chain - use an different certificate root from the default\n\t\t# This uses wildcard matching so requesting \"X1\" returns the correct certificate - may need to escape characters\n\t\t# Staging options are: \"(STAGING) Doctored Durian Root CA X3\" and \"(STAGING) Pretend Pear X1\"\n\t\t# Production options are: \"ISRG Root X1\" and \"ISRG Root X2\"\n\t\t#PREFERRED_CHAIN=\"\\(STAGING\\) Pretend Pear X1\"\n\n\t\t# Uncomment this if you need the full chain file to include the root certificate (Java keystores, Nutanix Prism)\n\t\t#FULL_CHAIN_INCLUDE_ROOT=\"true\"\n\n\t\t# Location for all your certs, these can either be on the server (full path name)\n\t\t# or using ssh /sftp as for the ACL\n\t\t#DOMAIN_CERT_LOCATION=\"/etc/ssl/${DOMAIN}.crt\" # this is domain cert\n\t\t#DOMAIN_KEY_LOCATION=\"/etc/ssl/${DOMAIN}.key\" # this is domain key\n\t\t#CA_CERT_LOCATION=\"/etc/ssl/chain.crt\" # this is CA cert\n\t\t#DOMAIN_CHAIN_LOCATION=\"\" # this is the domain cert and CA cert\n\t\t#DOMAIN_PEM_LOCATION=\"\" # this is the domain key, domain cert and CA cert\n\n\t\t# The command needed to reload apache / nginx or whatever you use.\n\t\t# Several (ssh) commands may be given using a bash array:\n\t\t# RELOAD_CMD=('ssh:sshuserid@server5:systemctl reload httpd' 'logger getssl for server5 efficient.')\n\t\t#RELOAD_CMD=\"\"\n\n\t\t# Uncomment the following line to prevent non-interactive renewals of certificates\n\t\t#PREVENT_NON_INTERACTIVE_RENEWAL=\"true\"\n\n\t\t# Define the server type. This can be https, ftp, ftpi, imap, imaps, pop3, pop3s, smtp,\n\t\t# smtps_deprecated, smtps, smtp_submission, xmpp, xmpps, ldaps or a port number which\n\t\t# will be checked for certificate expiry and also will be checked after\n\t\t# an update to confirm correct certificate is running (if CHECK_REMOTE) is set to true\n\t\t#SERVER_TYPE=\"https\"\n\t\t#CHECK_REMOTE=\"true\"\n\t\t#CHECK_REMOTE_WAIT=\"2\" # wait 2 seconds before checking the remote server\n\t\t_EOF_domain_\n  fi\n}\n\nwrite_getssl_template() { # write out the main template file\n  cat > \"$1\" <<- _EOF_getssl_\n\t# vim: filetype=sh\n\t#\n\t# This file is read first and is common to all domains\n\t#\n\t# Uncomment and modify any variables you need\n\t# see https://github.com/srvrco/getssl/wiki/Config-variables for details\n\t#\n\t# The staging server is best for testing (hence set as default)\n\tCA=\"https://acme-staging-v02.api.letsencrypt.org\"\n\t# This server issues full certificates, however has rate limits\n\t#CA=\"https://acme-v02.api.letsencrypt.org\"\n\n\t# The agreement that must be signed with the CA, if not defined the default agreement will be used\n\t#AGREEMENT=\"$AGREEMENT\"\n\n\t# Set an email address associated with your account - generally set at account level rather than domain.\n\t#ACCOUNT_EMAIL=\"me@example.com\"\n\tACCOUNT_KEY_LENGTH=4096\n\tACCOUNT_KEY=\"$WORKING_DIR/account.key\"\n\n\t# Account key and private key types - can be rsa, prime256v1, secp384r1 or secp521r1\n\t#ACCOUNT_KEY_TYPE=\"rsa\"\n\tPRIVATE_KEY_ALG=\"rsa\"\n\t#REUSE_PRIVATE_KEY=\"true\"\n\n\t# Preferred Chain - use an different certificate root from the default\n\t# This uses wildcard matching so requesting \"X1\" returns the correct certificate - may need to escape characters\n\t# Staging options are: \"(STAGING) Doctored Durian Root CA X3\" and \"(STAGING) Pretend Pear X1\"\n\t# Production options are: \"ISRG Root X1\" and \"ISRG Root X2\"\n\t#PREFERRED_CHAIN=\"\\(STAGING\\) Pretend Pear X1\"\n\n\t# Uncomment this if you need the full chain file to include the root certificate (Java keystores, Nutanix Prism)\n\t#FULL_CHAIN_INCLUDE_ROOT=\"true\"\n\n\t# The command needed to reload apache / nginx or whatever you use.\n\t# Several (ssh) commands may be given using a bash array:\n\t# RELOAD_CMD=('ssh:sshuserid@server5:systemctl reload httpd' 'logger getssl for server5 efficient.')\n\t#RELOAD_CMD=\"\"\n\n\t# The time period within which you want to allow renewal of a certificate\n\t#  this prevents hitting some of the rate limits.\n\t# Creating a file called FORCE_RENEWAL in the domain directory allows one-off overrides\n\t# of this setting\n\tRENEW_ALLOW=\"30\"\n\n\t# Define the server type. This can be https, ftp, ftpi, imap, imaps, pop3, pop3s, smtp,\n\t# smtps_deprecated, smtps, smtp_submission, xmpp, xmpps, ldaps or a port number which\n\t# will be checked for certificate expiry and also will be checked after\n\t# an update to confirm correct certificate is running (if CHECK_REMOTE) is set to true\n\tSERVER_TYPE=\"https\"\n\tCHECK_REMOTE=\"true\"\n\n\t# Use the following 3 variables if you want to validate via DNS\n\t#VALIDATE_VIA_DNS=\"true\"\n\t#DNS_ADD_COMMAND=\n\t#DNS_DEL_COMMAND=\n\n\t# Unusual configurations (especially split views) may require these.\n\t# If you have a mixture, these can go in the per-domain getssl.cfg.\n\t#\n\t# If you must use an external DNS Server (e.g. due to split views)\n\t# Specify it here.  Otherwise, the default is to find the zone master.\n\t# The default will usually work.\n\t# PUBLIC_DNS_SERVER=\"8.8.8.8\"\n\n\t# If getssl is unable to determine the authoritative nameserver for a domain\n\t# it will as you to enter AUTH_DNS_SERVER.  This is a server that\n\t# can answer queries for the zone - a master or a slave, not a recursive server.\n\t# AUTH_DNS_SERVER=\"10.0.0.14\"\n\t_EOF_getssl_\n}\n\nwrite_openssl_conf() { # write out a minimal openssl conf\n  cat > \"$1\" <<- _EOF_openssl_conf_\n\t# minimal openssl.cnf file\n\tdistinguished_name  = req_distinguished_name\n\t[ req_distinguished_name ]\n\t[v3_req]\n\t[v3_ca]\n\t_EOF_openssl_conf_\n}\n\n# Trap signals\ntrap \"signal_exit TERM\" TERM HUP\ntrap \"signal_exit INT\"  INT\n\n# Parse command-line\nwhile [[ -n ${1+defined} ]]; do\n  case $1 in\n    -h | --help)\n      help_message; graceful_exit ;;\n    -v | --version)\n      echo \"$PROGNAME V$VERSION\"; graceful_exit ;;\n    -d | --debug)\n      _USE_DEBUG=1 ;;\n    -c | --create)\n      _CREATE_CONFIG=1 ;;\n    -f | --force)\n      _FORCE_RENEW=1 ;;\n    --notify-valid)\n      # Exit 2 if certificate is valid and doesn't need renewing\n      _NOTIFY_VALID=2 ;;\n    -a | --all)\n      _CHECK_ALL=1 ;;\n    -k | --keep)\n      shift;\n      echo \"--keep has no effect\" ;;\n    -q | --quiet)\n      _QUIET=1 ;;\n    -Q | --mute)\n      _QUIET=1\n      _MUTE=1 ;;\n    -r | --revoke)\n      _REVOKE=1\n      shift\n      REVOKE_CERT=\"$1\"\n      shift\n      REVOKE_KEY=\"$1\"\n      shift\n      CA=\"$1\"\n      REVOKE_CA=\"$1\"\n      REVOKE_REASON=0 ;;\n    -u | --upgrade)\n      _UPGRADE=1 ;;\n    -X | --experimental)\n      _UPGRADE_TO_TAG=\"$1\"\n      shift ;;\n    -U | --nocheck)\n      _UPGRADE_CHECK=0 ;;\n    -i | --install)\n      _CERT_INSTALL=1 ;;\n    --check-config)\n      _ONLY_CHECK_CONFIG=1 ;;\n    -w)\n      shift; WORKING_DIR=\"$1\" ;;\n    -preferred-chain | --preferred-chain)\n      shift; PREFERRED_CHAIN=\"$1\" ;;\n    --account-id)\n      _SHOW_ACCOUNT_ID=1 ;;\n    --source)\n      return ;;\n    -*)\n      usage\n      error_exit \"Unknown option $1\" ;;\n    *)\n      if [[ -n $DOMAIN ]]; then\n        error_exit \"invalid command line $DOMAIN - it appears to contain more than one domain\"\n      fi\n      DOMAIN=\"$1\"\n      if [[ -z $DOMAIN ]]; then\n        error_exit \"invalid command line - it appears to contain a null variable\"\n      fi ;;\n  esac\n  shift\ndone\n\nif [[ ${_USE_DEBUG} -eq 1 ]]; then\n  # Do not hide outputs when debug mode is on\n  _REDIRECT_OUTPUT=\"\"\nfi\n\n# Main logic\n############\n\n# Get the current OS, so the correct functions can be used for that OS. (sets the variable os)\nget_os\n\n# check if \"recent\" version of bash.\n#if [[ \"${BASH_VERSINFO[0]}${BASH_VERSINFO[1]}\" -lt 42 ]]; then\n#  info \"this script is designed for bash v4.2 or later - earlier version may give errors\"\n#fi\n\n#check if required applications are included\n\nrequires which\nrequires openssl\nrequires curl\nrequires dig nslookup drill host DNS_CHECK_FUNC\nrequires dirname\nrequires awk\nrequires tr\nrequires date\nrequires grep\nrequires sed\nrequires sort\nrequires mktemp\n\n# Make sure cURL doesn't display a progress meter (if it's new enough)\n# --silent also does this, but suppresses warnings and informational messages too.\n# TODO: see where --silent can be removed (if _NOMETER defaults to --silent for old versions?)\n#       This would help with debugging transfer errors.\n\n_CURL_VERSION=\"$(curl -V | head -1 | cut -d' ' -f2 )\"\nif check_version \"${_CURL_VERSION}\" \"7.67\" ; then\n    _NOMETER=\"--no-progress-meter\"\nfi\n\n# Make sure mktemp works before going too far\nMKDIR_TEST_FILE=\"$(mktemp 2>/dev/null || mktemp -t getssl.XXXXXX)\"\nif [ \"$MKDIR_TEST_FILE\" == \"\" ]; then\n  error_exit \"mktemp failed\"\nelse\n  rm \"$MKDIR_TEST_FILE\"\nfi\nunset MKDIR_TEST_FILE\n\n# Check if upgrades are available (unless they have specified -U to ignore Upgrade checks)\nif [[ $_UPGRADE_CHECK -eq 1 ]]; then\n  check_getssl_upgrade\n  # if nothing in command line and no revocation and not only config check,\n  # then exit after upgrade\n  if [[ -z \"$DOMAIN\" ]] \\\n     && [[ ${_CHECK_ALL} -ne 1 ]] \\\n     && [[ ${_REVOKE} -ne 1 ]] \\\n     && [ \"${_ONLY_CHECK_CONFIG}\" -ne 1 ] \\\n     && [[ ${_SHOW_ACCOUNT_ID} -ne 1 ]]; then\n    # if nothing in command line, print help before exit.\n    if [[ -z \"$DOMAIN\" ]] && [[ ${_CHECK_ALL} -ne 1 ]] && [[ ${_UPGRADE} -ne 1 ]]; then\n      help_message\n    fi\n    graceful_exit\n  fi\nfi\n\n# Revoke a certificate if requested\nif [[ $_REVOKE -eq 1 ]]; then\n  if [[ -z $REVOKE_CA ]]; then\n    CA=$DEFAULT_REVOKE_CA\n  elif [[ \"$REVOKE_CA\" == \"-d\" ]]; then\n    _USE_DEBUG=1\n    CA=$DEFAULT_REVOKE_CA\n  else\n    CA=$REVOKE_CA\n  fi\n\n  obtain_ca_resource_locations\n  revoke_certificate\n  graceful_exit\nfi\n\n# get latest agreement from CA (as default)\nAGREEMENT=$(curl --user-agent \"$CURL_USERAGENT\" -I \"${CA}/terms\" 2>/dev/null | awk 'tolower($1) ~ \"location:\" {print $2}'|tr -d '\\r')\n\n# if nothing in command line, print help and exit.\nif [[ -z \"$DOMAIN\" ]] && [[ ${_CHECK_ALL} -ne 1 ]]; then\n  help_message\n  graceful_exit\nfi\n\n# Test working directory candidates if unset. Last candidate defaults (~/getssl/)\nif [[ -z \"${WORKING_DIR}\" ]]\nthen\n  for WORKING_DIR in \"${WORKING_DIR_CANDIDATES[@]}\"\n  do\n    debug \"Testing working dir location '${WORKING_DIR}'\"\n    if [[ -s \"$WORKING_DIR/getssl.cfg\" ]]\n    then\n      break\n    fi\n  done\nfi\n\n# if the \"working directory\" doesn't exist, then create it.\nif [[ ! -d \"$WORKING_DIR\" ]]; then\n  debug \"Making working directory - $WORKING_DIR\"\n  mkdir -p \"$WORKING_DIR\"\nfi\n\n# read any variables from config in working directory\nif [[ -s \"$WORKING_DIR/getssl.cfg\" ]]; then\n  debug \"reading config from $WORKING_DIR/getssl.cfg\"\n  # shellcheck source=/dev/null\n  . \"$WORKING_DIR/getssl.cfg\"\nfi\n\nif [[ -n \"$DNS_CHECK_FUNC\" ]]; then\n  requires \"${DNS_CHECK_FUNC}\"\nelse\n  requires nslookup drill dig host DNS_CHECK_FUNC\nfi\n\n# Define defaults for variables not set in the main config.\nACCOUNT_KEY=\"${ACCOUNT_KEY:=$WORKING_DIR/account.key}\"\nDOMAIN_STORAGE=\"${DOMAIN_STORAGE:=$WORKING_DIR}\"\nexport DOMAIN_DIR=\"$DOMAIN_STORAGE/$DOMAIN\"\nCERT_FILE=\"$DOMAIN_DIR/${DOMAIN}.crt\"\nFULL_CHAIN=\"$DOMAIN_DIR/fullchain.crt\"\nCA_CERT=\"$DOMAIN_DIR/chain.crt\"\nTEMP_DIR=\"$DOMAIN_DIR/tmp\"\nif [[ \"$os\" == \"mingw\" || \"$os\" == \"mingw64_nt\" ]]; then\n  CSR_SUBJECT=\"//\"\nfi\n\n# Set the OPENSSL_CONF environment variable so openssl knows which config to use\nexport OPENSSL_CONF=$SSLCONF\n\n# if \"-a\" option then check other parameters and create run for each domain.\nif [[ ${_CHECK_ALL} -eq 1 ]]; then\n  info \"Check all certificates\"\n\n  if [[ ${_CREATE_CONFIG} -eq 1 ]]; then\n    error_exit \"cannot combine -c|--create with -a|--all\"\n  fi\n\n  if [[ ${_FORCE_RENEW} -eq 1 ]]; then\n    error_exit \"cannot combine -f|--force with -a|--all because of rate limits\"\n  fi\n\n  if [[ ! -d \"$DOMAIN_STORAGE\" ]]; then\n    error_exit \"DOMAIN_STORAGE not found  - $DOMAIN_STORAGE\"\n  fi\n\n  for dir in \"${DOMAIN_STORAGE}\"/*; do\n    if [[ -d \"$dir\" ]]; then\n      debug \"Checking $dir\"\n      cmd=\"$0 -U\" # No update checks when calling recursively\n      if [[ ${_USE_DEBUG} -eq 1 ]]; then\n        cmd=\"$cmd -d\"\n      fi\n      if [[ ${_QUIET} -eq 1 ]]; then\n        cmd=\"$cmd -q\"\n      fi\n      # check if $dir is a directory with a getssl.cfg in it\n      if [[ -f \"$dir/getssl.cfg\" ]]; then\n        cmd=\"$cmd -w $WORKING_DIR \\\"$(basename \"$dir\")\\\"\"\n        debug \"CMD: $cmd\"\n        eval \"$cmd\"\n      fi\n    fi\n  done\n\n  graceful_exit\nfi\n# end of \"-a\" option (looping through all domains)\n\n# if \"-c|--create\" option used, then create config files.\nif [[ ${_CREATE_CONFIG} -eq 1 ]]; then\n  # If main config file does not exists then create it.\n  if [[ ! -s \"$WORKING_DIR/getssl.cfg\" ]]; then\n    info \"creating main config file $WORKING_DIR/getssl.cfg\"\n    if [[ ! -s \"$SSLCONF\" ]]; then\n      SSLCONF=\"$WORKING_DIR/openssl.cnf\"\n      write_openssl_conf \"$SSLCONF\"\n    fi\n    write_getssl_template \"$WORKING_DIR/getssl.cfg\"\n  fi\n  # If domain and domain config don't exist then create them.\n  if [[ ! -d \"$DOMAIN_DIR\" ]]; then\n    info \"Making domain directory - $DOMAIN_DIR\"\n    mkdir -p \"$DOMAIN_DIR\"\n  fi\n  if [[ -s \"$DOMAIN_DIR/getssl.cfg\" ]]; then\n    info \"domain config already exists $DOMAIN_DIR/getssl.cfg\"\n  else\n    info \"creating domain config file in $DOMAIN_DIR/getssl.cfg\"\n    # if domain has an existing cert, copy from domain and use to create defaults.\n    EX_CERT=$(echo \\\n      | openssl s_client -servername \"${DOMAIN##\\*.}\" -connect \"${DOMAIN##\\*.}:443\" 2>/dev/null \\\n      | openssl x509 2>/dev/null)\n    EX_SANS=\"www.${DOMAIN##\\*.}\"\n    if [[ -n \"${EX_CERT}\" ]]; then\n      escaped_d=${DOMAIN/\\*/\\\\\\*}\n      EX_SANS=$(echo \"$EX_CERT\" \\\n        | openssl x509 -noout -text 2>/dev/null| grep \"Subject Alternative Name\" -A2 \\\n        | grep -Eo \"DNS:[a-zA-Z 0-9.\\*-]*\" | sed \"s@DNS:${escaped_d}@@g\" | grep -v '^$' | cut -c 5-)\n      EX_SANS=${EX_SANS//$'\\n'/','}\n    fi\n    if [[ -n \"${EX_SANS}\" ]]; then\n      info \"Adding SANS=$EX_SANS from certificate installed on ${DOMAIN##\\*.} to new configuration file\"\n    fi\n    write_domain_template \"$DOMAIN_DIR/getssl.cfg\"\n    info \"created domain config file in $DOMAIN_DIR/getssl.cfg\"\n  fi\n  TEMP_DIR=\"$DOMAIN_DIR/tmp\"\n  # end of \"-c|--create\" option, so exit\n  graceful_exit\nfi\n# end of \"-c|--create\" option to create config file.\n\n# if domain directory doesn't exist, then create it.\nif [[ ! -d \"$DOMAIN_DIR\" ]]; then\n  debug \"Making working directory - $DOMAIN_DIR\"\n  mkdir -p \"$DOMAIN_DIR\"\nfi\n\n# define a temporary directory, and if it doesn't exist, create it.\nTEMP_DIR=\"$DOMAIN_DIR/tmp\"\nif [[ ! -d \"${TEMP_DIR}\" ]]; then\n  debug \"Making temp directory - ${TEMP_DIR}\"\n  mkdir -p \"${TEMP_DIR}\"\nfi\n\n# read any variables from config in domain directory\nif [[ -s \"$DOMAIN_DIR/getssl.cfg\" ]]; then\n  debug \"reading config from $DOMAIN_DIR/getssl.cfg\"\n  # shellcheck source=/dev/null\n  . \"$DOMAIN_DIR/getssl.cfg\"\nfi\n\n# Ensure SANS is comma separated by replacing any number of commas or spaces with a single comma\n# shellcheck disable=SC2001\nSANS=$(echo \"$SANS\" | sed 's/[, ]\\+/,/g')\n\n# from SERVER_TYPE set REMOTE_PORT and REMOTE_EXTRA\nset_server_type\n\n# check what dns utils are installed\nfind_dns_utils\n\n# Find what ftp client is installed\nfind_ftp_command\n\n# auto upgrade clients to v2\nauto_upgrade_v2\n\n# check config for typical errors.\ncheck_config\n\n# exit if just checking config (used for testing)\nif [ \"${_ONLY_CHECK_CONFIG}\" -eq 1 ]; then\n  info \"Configuration check successful\"\n  graceful_exit\nfi\n\n# if -i|--install install certs, reload and exit\nif [ \"0${_CERT_INSTALL}\" -eq 1 ]; then\n  cert_install\n  reload_service\n  graceful_exit\nfi\n\nif [[ -e \"$DOMAIN_DIR/FORCE_RENEWAL\" ]]; then\n  rm -f \"$DOMAIN_DIR/FORCE_RENEWAL\" || error_exit \"problem deleting file $DOMAIN_DIR/FORCE_RENEWAL\"\n  _FORCE_RENEW=1\n  info \"${DOMAIN}: forcing renewal (due to FORCE_RENEWAL file)\"\nfi\n\nobtain_ca_resource_locations\n\n# Check if awk supports json_awk (required for ACMEv2)\nif [[ $API -eq 2 ]]; then\n    json_awk_test=$(json_awk '{ \"test\": \"1\" }' 2>/dev/null)\n    if [[ \"${json_awk_test}\" == \"\" ]]; then\n        error_exit \"Your version of awk does not work with json_awk (see http://github.com/step-/JSON.awk/issues/6), please install a newer version of mawk or gawk\"\n    fi\nfi\n\n# if check_remote is true then connect and obtain the current certificate (if not forcing renewal)\nif [[ \"${CHECK_REMOTE}\" == \"true\" ]] && [[ $_FORCE_RENEW -eq 0 ]] && [[ $_SHOW_ACCOUNT_ID -eq 0 ]]; then\n  real_d=${DOMAIN##\\*.}\n  debug \"getting certificate for $DOMAIN from remote server ($real_d)\"\n  if [[ \"$DUAL_RSA_ECDSA\" == \"true\" ]]; then\n    # shellcheck disable=SC2086\n    # check if openssl supports RSA-PSS\n    if [[ $(echo | openssl s_client -servername \"${real_d}\" -connect \"${real_d}:${REMOTE_PORT}\" ${REMOTE_EXTRA} -sigalgs RSA-PSS+SHA256 2>/dev/null) ]]; then\n        CIPHER=\"-sigalgs RSA+SHA256:RSA+SHA384:RSA+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA512\"\n    else\n        CIPHER=\"-sigalgs RSA+SHA256:RSA+SHA384:RSA+SHA512\"\n    fi\n  else\n    CIPHER=\"\"\n  fi\n  # shellcheck disable=SC2086\n  EX_CERT=$(echo \\\n    | openssl s_client -servername \"${real_d}\" -connect \"${real_d}:${REMOTE_PORT}\" ${REMOTE_EXTRA} ${CIPHER} 2>/dev/null \\\n    | openssl x509 2>/dev/null)\n  if [[ -n \"$EX_CERT\" ]]; then # if obtained a cert\n    if [[ -s \"$CERT_FILE\" ]]; then # if local exists\n      CERT_LOCAL=$(openssl x509 -noout -fingerprint < \"$CERT_FILE\" 2>/dev/null)\n    else # since local doesn't exist leave empty so that the domain validation will happen\n      CERT_LOCAL=\"\"\n    fi\n    CERT_REMOTE=$(echo \"$EX_CERT\" | openssl x509 -noout -fingerprint 2>/dev/null)\n    if [[ \"$CERT_LOCAL\" == \"$CERT_REMOTE\" ]]; then\n      debug \"certificate on server is same as the local cert\"\n    else\n      # check if the certificate is for the right domain\n      EX_CERT_DOMAIN=$(echo \"$EX_CERT\" | openssl x509 -text \\\n        | sed -n -e 's/^ *Subject: .*CN=\\([A-Za-z0-9.-]*\\).*$/\\1/p; /^ *DNS:.../ { s/ *DNS://g; y/,/\\n/; p; }' \\\n        | sort -u | grep \"^$DOMAIN\\$\")\n      if [[ \"$EX_CERT_DOMAIN\" == \"$DOMAIN\" ]]; then\n        # check renew-date on ex_cert and compare to local ( if local exists)\n        enddate_ex=$(echo \"$EX_CERT\" | openssl x509 -noout -enddate 2>/dev/null| cut -d= -f 2-)\n        enddate_ex_s=$(date_epoc \"$enddate_ex\")\n        debug \"external cert has enddate $enddate_ex ( $enddate_ex_s ) \"\n        if [[ -s \"$CERT_FILE\" ]]; then # if local exists\n          enddate_lc=$(openssl x509 -noout -enddate < \"$CERT_FILE\" 2>/dev/null| cut -d= -f 2-)\n          enddate_lc_s=$(date_epoc \"$enddate_lc\")\n          debug \"local cert has enddate $enddate_lc ( $enddate_lc_s ) \"\n        else\n          enddate_lc_s=0\n          debug \"local cert doesn't exist\"\n        fi\n        if [[ \"$enddate_ex_s\" -eq \"$enddate_lc_s\" ]]; then\n          debug \"certificates expire at the same time\"\n        elif [[ \"$enddate_ex_s\" -gt \"$enddate_lc_s\" ]]; then\n          # remote has longer to expiry date than local copy.\n          debug \"remote cert has longer to run than local cert - ignoring\"\n        else\n          info \"${DOMAIN}: remote cert expires sooner than local, attempting to upload from local\"\n          copy_file_to_location \"domain certificate\" \\\n                                \"$CERT_FILE\" \\\n                                \"$DOMAIN_CERT_LOCATION\"\n          copy_file_to_location \"private key\" \\\n                                \"$DOMAIN_DIR/${DOMAIN}.key\" \\\n                                \"$DOMAIN_KEY_LOCATION\"\n          copy_file_to_location \"CA certificate\" \"$CA_CERT\" \"$CA_CERT_LOCATION\"\n          cat \"$CERT_FILE\" \"$CA_CERT\" > \"$TEMP_DIR/${DOMAIN}_chain.pem\"\n          copy_file_to_location \"full pem\" \\\n                                \"$TEMP_DIR/${DOMAIN}_chain.pem\" \\\n                                \"$DOMAIN_CHAIN_LOCATION\"\n          umask 077\n          cat \"$DOMAIN_DIR/${DOMAIN}.key\" \"$CERT_FILE\" > \"$TEMP_DIR/${DOMAIN}_K_C.pem\"\n          umask \"$ORIG_UMASK\"\n          copy_file_to_location \"private key and domain cert pem\" \\\n                                \"$TEMP_DIR/${DOMAIN}_K_C.pem\"  \\\n                                \"$DOMAIN_KEY_CERT_LOCATION\"\n          umask 077\n          cat \"$DOMAIN_DIR/${DOMAIN}.key\" \"$CERT_FILE\" \"$CA_CERT\" > \"$TEMP_DIR/${DOMAIN}.pem\"\n          umask \"$ORIG_UMASK\"\n          copy_file_to_location \"full pem\" \\\n                                \"$TEMP_DIR/${DOMAIN}.pem\"  \\\n                                \"$DOMAIN_PEM_LOCATION\"\n          reload_service\n        fi\n      else\n        # Get the domain from the existing certificate for the error message\n        EX_CERT_DOMAIN=$(echo \"$EX_CERT\" | openssl x509 -text \\\n          | sed -n -e 's/^ *Subject: .*CN=\\([A-Za-z0-9.-]*\\).*$/\\1/p; /^ *DNS:.../ { s/ *DNS://g; y/,/\\n/; p; }' \\\n          | sort -u | head -1)\n        info \"${DOMAIN}: Certificate on remote domain does not match, ignoring remote certificate ($EX_CERT_DOMAIN != $real_d)\"\n      fi\n    fi\n  else\n    info \"${DOMAIN}: no certificate obtained from host\"\n  fi\n  # end of .... if obtained a cert\nfi\n# end of .... check_remote is true then connect and obtain the current certificate\n\n#create SAN\nif [[ -z \"$SANS\" ]]; then\n  SANLIST=\"subjectAltName=DNS:${DOMAIN}\"\nelif [[ \"$IGNORE_DIRECTORY_DOMAIN\" == \"true\" ]]; then\n  SANLIST=\"subjectAltName=DNS:${SANS//[, ]/,DNS:}\"\nelse\n  SANLIST=\"subjectAltName=DNS:${DOMAIN},DNS:${SANS//[, ]/,DNS:}\"\nfi\ndebug \"created SAN list = $SANLIST\"\n\n# check if private key alg has changed from RSA to EC (or vice versa)\nif [[ \"$DUAL_RSA_ECDSA\" == \"false\" ]] && [[ -s \"$DOMAIN_DIR/${DOMAIN}.key\" ]]; then\n  case \"${PRIVATE_KEY_ALG}\" in\n    rsa)\n      if grep -q -- \"-----BEGIN EC PRIVATE KEY-----\" \"$DOMAIN_DIR/${DOMAIN}.key\"; then\n        rm -f \"$DOMAIN_DIR/${DOMAIN}.key\"\n        _FORCE_RENEW=1\n      fi ;;\n    prime256v1|secp384r1|secp521r1)\n      if grep -q -- \"-----BEGIN RSA PRIVATE KEY-----\" \"$DOMAIN_DIR/${DOMAIN}.key\" \\\n      || grep -q -- \"-----BEGIN PRIVATE KEY-----\" \"$DOMAIN_DIR/${DOMAIN}.key\"; then\n        rm -f \"$DOMAIN_DIR/${DOMAIN}.key\"\n        _FORCE_RENEW=1\n      fi ;;\n  esac\nfi\n\n# if there is an existing certificate file, check details.\nif [[ -s \"$CERT_FILE\" ]] && [[ $_SHOW_ACCOUNT_ID -eq 0 ]]; then\n  debug \"certificate $CERT_FILE exists\"\n  enddate=$(openssl x509 -in \"$CERT_FILE\" -noout -enddate 2>/dev/null| cut -d= -f 2-)\n  debug \"local cert is valid until $enddate\"\n  existing_sanlist=$(openssl x509 -in \"$CERT_FILE\" -noout -text | grep \"DNS:\" | sed '{ s/ *DNS://g; y/,/\\n/; }' | sort -u | xargs | sed 's/ /,/g')\n  sorted_sanlist=$(echo \"$SANLIST\" | sed '{ s/subjectAltName=//; s/ *DNS://g; y/,/\\n/; }' | sort -u | xargs | sed 's/ /,/g')\n  debug \"local cert is for domains: ${existing_sanlist}\"\n  if [[ \"$enddate\" != \"-\" ]]; then\n    enddate_s=$(date_epoc \"$enddate\")\n    if [[ $(date_renew) -lt \"$enddate_s\" ]] && [[ $_FORCE_RENEW -ne 1 ]] && [[ \"$existing_sanlist\" == \"$sorted_sanlist\" ]]; then\n      issuer=$(openssl x509 -in \"$CERT_FILE\" -noout -issuer 2>/dev/null)\n      if [[ \"$issuer\" == *\"Fake LE Intermediate\"* ]] && [[ \"$CA\" == \"https://acme-v02.api.letsencrypt.org\" ]]; then\n        debug \"upgrading from fake cert to real\"\n      else\n        info \"${DOMAIN}: certificate is valid for more than $RENEW_ALLOW days (until $enddate)\"\n        # everything is OK, so exit, if requested with the --notify-valid, exit with code 2\n        graceful_exit $_NOTIFY_VALID\n      fi\n    else\n      if [[ \"$existing_sanlist\" != \"$sorted_sanlist\" ]]; then\n        info \"Domain list in existing certificate ($existing_sanlist) does not match domains requested ($sorted_sanlist), so recreating certificate\"\n      fi\n      debug \"${DOMAIN}: certificate needs renewal\"\n    fi\n  fi\nfi\n# end of .... if there is an existing certificate file, check details.\n\nif [[ ! -t 0 ]] && [[ \"$PREVENT_NON_INTERACTIVE_RENEWAL\" = \"true\" ]] && [[ $_SHOW_ACCOUNT_ID -eq 0 ]]; then\n  errmsg=\"$DOMAIN due for renewal,\"\n  errmsg=\"${errmsg} but not completed due to PREVENT_NON_INTERACTIVE_RENEWAL=true in config\"\n  error_exit \"$errmsg\"\nfi\n\n# create account key if it doesn't exist.\nif [[ -s \"$ACCOUNT_KEY\" ]]; then\n  debug \"Account key exists at $ACCOUNT_KEY skipping generation\"\nelse\n  info \"creating account key $ACCOUNT_KEY\"\n  create_key \"$ACCOUNT_KEY_TYPE\" \"$ACCOUNT_KEY\" \"$ACCOUNT_KEY_LENGTH\"\nfi\n\n# if not reusing private key, then remove the old keys\nif [[ \"$REUSE_PRIVATE_KEY\" != \"true\" ]]; then\n  if [[ -s \"$DOMAIN_DIR/${DOMAIN}.key\" ]]; then\n    rm -f \"$DOMAIN_DIR/${DOMAIN}.key\"\n  fi\n  if [[ -s \"$DOMAIN_DIR/${DOMAIN}.ec.key\" ]]; then\n    rm -f \"$DOMAIN_DIR/${DOMAIN}.ec.key\"\n  fi\nfi\n\n# create new domain keys if they don't already exist\nif [[ \"$DUAL_RSA_ECDSA\" == \"false\" ]]; then\n  create_key \"${PRIVATE_KEY_ALG}\" \"$DOMAIN_DIR/${DOMAIN}.key\" \"$DOMAIN_KEY_LENGTH\"\nelse\n  create_key \"rsa\" \"$DOMAIN_DIR/${DOMAIN}.key\" \"$DOMAIN_KEY_LENGTH\"\n  create_key \"${PRIVATE_KEY_ALG}\" \"$DOMAIN_DIR/${DOMAIN}.ec.key\" \"$DOMAIN_KEY_LENGTH\"\nfi\n# End of creating domain keys.\n\n#create CSR's\nif [[ \"$DUAL_RSA_ECDSA\" == \"false\" ]]; then\n  create_csr \"$DOMAIN_DIR/${DOMAIN}.csr\" \"$DOMAIN_DIR/${DOMAIN}.key\"\nelse\n  create_csr \"$DOMAIN_DIR/${DOMAIN}.csr\" \"$DOMAIN_DIR/${DOMAIN}.key\"\n  create_csr \"$DOMAIN_DIR/${DOMAIN}.ec.csr\" \"$DOMAIN_DIR/${DOMAIN}.ec.key\"\nfi\n\n# use account key to register with CA\n# currently the code registers every time, and gets an \"already registered\" back if it has been.\nget_signing_params \"$ACCOUNT_KEY\"\n\ninfo \"Registering account\"\n# send the request to the ACME server.\nif [[ $API -eq 1 ]]; then\n  if [[ \"$ACCOUNT_EMAIL\" ]] ; then\n  \tregjson='{\"resource\": \"new-reg\", \"contact\": [\"mailto: '$ACCOUNT_EMAIL'\"], \"agreement\": \"'$AGREEMENT'\"}'\n  else\n  \tregjson='{\"resource\": \"new-reg\", \"agreement\": \"'$AGREEMENT'\"}'\n  fi\n  send_signed_request \"$URL_new_reg\"  \"$regjson\"\nelif [[ $API -eq 2 ]]; then\n  if [[ \"$ACCOUNT_EMAIL\" ]] ; then\n  \tregjson='{\"termsOfServiceAgreed\": true, \"contact\": [\"mailto: '$ACCOUNT_EMAIL'\"]}'\n  else\n  \tregjson='{\"termsOfServiceAgreed\": true}'\n  fi\n  send_signed_request \"$URL_newAccount\"  \"$regjson\"\nelse\n\tdebug \"cant determine account API\"\n\tgraceful_exit\nfi\n\nif [[ \"$code\" == \"\" ]] || [[ \"$code\" == '201' ]] ; then\n  info \"Registered\"\n  KID=$(echo \"$responseHeaders\" | grep -i \"^location\" | awk '{print $2}'| tr -d '\\r\\n ')\n  debug \"AccountId=$KID}\"\n  echo \"$response\" > \"$TEMP_DIR/account.json\"\nelif [[ \"$code\" == '409' ]] ; then\n  KID=$(echo \"$responseHeaders\" | grep -i \"^location\" | awk '{print $2}'| tr -d '\\r\\n ')\n  debug responseHeaders \"$responseHeaders\"\n  debug \"Already registered, AccountId=$KID\"\nelif [[ \"$code\" == '200' ]] ; then\n  KID=$(echo \"$responseHeaders\" | grep -i \"^location\" | awk '{print $2}'| tr -d '\\r\\n ')\n  debug responseHeaders \"$responseHeaders\"\n  debug \"Already registered account, AccountId=${KID}\"\nelse\n  error_exit \"Error registering account ...$responseHeaders ... $(json_get \"$response\" detail)\"\nfi\n\nif [[ ${_SHOW_ACCOUNT_ID} -eq 1 ]]; then\n  echo \"Account Id is: $KID\"\n  graceful_exit\nfi\n# end of registering account with CA\n\n# verify each domain\ninfo \"Verify each domain\"\n\n# loop through domains for cert ( from SANS list)\nif [[ \"$IGNORE_DIRECTORY_DOMAIN\" == \"true\" ]]; then\n  read -r -a alldomains <<< \"${SANS//[, ]/ }\"\nelse\n  read -r -a alldomains <<< \"$(echo \"$DOMAIN,$SANS\" | sed \"s/,/ /g\")\"\nfi\n\n# Try again if order creation fails (means check_challenge_completion returned \"invalid\" - generally DNS failure)\nretry=0\nwhile [[ $retry -lt 3 ]]\ndo\n  if [[ $API -eq 2 ]]; then\n    create_order\n  fi\n\n  fulfill_challenges\n  result=$?\n  if [[ $result -eq 0 ]]; then\n    break\n  fi\n  ((retry++))\ndone\n\nif [[ $retry -ge 3 ]]; then\n  error_exit \"$domain: fulfill_challenges failed 3 times\"\nfi\n\n# Verification has been completed for all SANS, so request certificate.\ninfo \"Verification completed, obtaining certificate.\"\n\n#obtain the certificate.\nget_certificate \"$DOMAIN_DIR/${DOMAIN}.csr\" \\\n                \"$CERT_FILE\" \\\n                \"$CA_CERT\" \\\n                \"$FULL_CHAIN\"\nif [[ \"$DUAL_RSA_ECDSA\" == \"true\" ]]; then\n  info \"Creating order for EC certificate\"\n  if [[ $API -eq 2 ]]; then\n    create_order\n    fulfill_challenges\n  fi\n  info \"obtaining EC certificate.\"\n  get_certificate \"$DOMAIN_DIR/${DOMAIN}.ec.csr\" \\\n                  \"${CERT_FILE%.*}.ec.crt\" \\\n                  \"${CA_CERT%.*}.ec.crt\" \\\n                  \"${FULL_CHAIN%.*}.ec.crt\"\nfi\n\n# create Archive of new certs and keys.\ncert_archive\n\ndebug \"Certificates obtained and archived locally, will now copy to specified locations\"\n\n# copy certs to the correct location (creating concatenated files as required)\ncert_install\n\n# Run reload command to restart apache / nginx or whatever system\nreload_service\n\n# deactivate authorizations\nif [[ \"$DEACTIVATE_AUTH\" == \"true\" ]]; then\n  debug \"in deactivate list is $deactivate_url_list\"\n  for deactivate_url in $deactivate_url_list; do\n    send_signed_request \"$deactivate_url\" \"\"\n    d=$(json_get \"$response\" \"hostname\")\n    info \"deactivating domain $d\"\n    debug \"deactivating  $deactivate_url\"\n    send_signed_request \"$deactivate_url\" \"{\\\"resource\\\": \\\"authz\\\", \\\"status\\\": \\\"deactivated\\\"}\"\n    # check response\n    if [[ \"$code\" == \"200\" ]]; then\n      debug \"Authorization deactivated\"\n    else\n      error_exit \"$domain: Deactivation error: $code\"\n    fi\n  done\nfi\n# end of deactivating authorizations\n\n# Check if the certificate is installed correctly\nif [[ ${CHECK_REMOTE} == \"true\" ]]; then\n  real_d=${DOMAIN##\\*.}\n  sleep \"$CHECK_REMOTE_WAIT\"\n  if [[ \"$DUAL_RSA_ECDSA\" == \"true\" ]]; then\n    # shellcheck disable=SC2086\n    # check if openssl supports RSA-PSS\n    if [[ $(echo | openssl s_client -servername \"${real_d}\" -connect \"${real_d}:${REMOTE_PORT}\" ${REMOTE_EXTRA} -sigalgs RSA-PSS+SHA256 2>/dev/null) ]]; then\n        PARAMS=(\"-sigalgs RSA-PSS+SHA256:RSA-PSS+SHA512:RSA+SHA256:RSA+SHA384:RSA+SHA512\" \"-sigalgs ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512\")\n    else\n        PARAMS=(\"-sigalgs RSA+SHA256:RSA+SHA384:RSA+SHA512\" \"-sigalgs ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512\")\n    fi\n\n    CERTS=(\"$CERT_FILE\" \"${CERT_FILE%.*}.ec.crt\")\n    TYPES=(\"rsa\" \"$PRIVATE_KEY_ALG\")\n  else\n    PARAMS=(\"\")\n    CERTS=(\"$CERT_FILE\")\n    TYPES=(\"$PRIVATE_KEY_ALG\")\n  fi\n\n  for ((i=0; i<${#PARAMS[@]};++i)); do\n    debug \"Checking ${CERTS[i]}\"\n    # shellcheck disable=SC2086\n    debug openssl s_client -servername \"${real_d}\" -connect \"${real_d}:${REMOTE_PORT}\" ${REMOTE_EXTRA} ${PARAMS[i]}\n    # shellcheck disable=SC2086\n    CERT_REMOTE=$(echo \\\n        | openssl s_client -servername \"${real_d}\" -connect \"${real_d}:${REMOTE_PORT}\" ${REMOTE_EXTRA} ${PARAMS[i]} 2>/dev/null \\\n        | openssl x509 -noout -fingerprint 2>/dev/null)\n    CERT_LOCAL=$(openssl x509 -noout -fingerprint < \"${CERTS[i]}\" 2>/dev/null)\n    debug CERT_LOCAL=\"${CERT_LOCAL}\"\n    debug CERT_REMOTE=\"${CERT_REMOTE}\"\n    if [[ \"$CERT_LOCAL\" == \"$CERT_REMOTE\" ]]; then\n        info \"${real_d} - ${TYPES[i]} certificate installed OK on server\"\n    elif [[ \"$CERT_REMOTE\" == \"\" ]]; then\n        info \"${CERTS[i]} not returned by server\"\n        error_exit \"${real_d} - ${TYPES[i]} certificate obtained but not installed on server\"\n    else\n        info \"${CERTS[i]} didn't match server\"\n        error_exit \"${real_d} - ${TYPES[i]} certificate obtained but certificate on server is different from the new certificate\"\n    fi\n  done\nfi\n# end of Check if the certificate is installed correctly\n\n# To have reached here, a certificate should have been successfully obtained.\n# Use echo rather than info so that 'quiet' is ignored.\necho \"certificate obtained for ${DOMAIN}\"\n\n# gracefully exit ( tidying up temporary files etc).\ngraceful_exit\n"
        },
        {
          "name": "getssl.crontab",
          "type": "blob",
          "size": 0.1875,
          "content": "# 0 18 1 */1 * means run at 18:00 on day-of-month 1 in every month\n# uncomment the line below to activate cron getssl service\n# 0 18 1 */1 * root /usr/bin/getssl -u -a &>> /var/log/getssl.log\n"
        },
        {
          "name": "getssl.logrotate",
          "type": "blob",
          "size": 0.1240234375,
          "content": "/var/log/getssl.log {\n    monthly\n    rotate 10\n    copytruncate\n    delaycompress\n    compress\n    notifempty\n    missingok\n}\n"
        },
        {
          "name": "getssl.spec",
          "type": "blob",
          "size": 1.560546875,
          "content": "%define _build_id_links none\n%define debug_package %{nil}\n\n# set this to true or the rpmbuild will fail with errors due to shebang defines\n# in some of the dns scripts for python\n%global __brp_mangle_shebangs /usr/bin/true\n\nSummary:          getssl ACME Scripts for managing Let's Encrypt certificates\nLicense:          GPL\nPackager:         getssl developers <https://github.com/srvrco/getssl>\nName:             getssl\nVersion:          2.49\nRelease:          1\n\nURL:              http://github.com/srvrco/getssl/\nSource0:          %{name}-%{version}.tar.gz\nSource1:          getssl.crontab\nSource2:          getssl.logrotate\nBuildArch:        noarch\n\nRequires:         bash\nBuildRequires:    bash\n\n%description\nThe %{name} package contains the getssl scripts, crontab files, and logrotate files for implementing automated creation and installation of SSL certificates from the Let's Encrypt ACME website.\n\n%prep\n%setup -q -n %{name}-%{version}\n\n%build\n\n%install\n[ -n \"%{buildroot}\" -a \"%{buildroot}\" != \"/\" ] && %{__rm} -rf %{buildroot}\n%{__mkdir_p} %{buildroot}%{_bindir}\n%{__mkdir_p} %{buildroot}%{_datadir}/getssl/dns_scripts\n%{__mkdir_p} %{buildroot}%{_datadir}/getssl/other_scripts\n%{__make} \\\n\tDESTDIR=%{buildroot} \\\n\tinstall\ninstall -Dpm 644 %{SOURCE1} %{buildroot}%{_sysconfdir}/cron.d/getssl\ninstall -Dpm 644 %{SOURCE2} %{buildroot}%{_sysconfdir}/logrotate.d/getssl\n\n%pre\n\n%post\n\n%preun\n\n%postun\n\n%files\n%defattr(-,root,root)\n%{_bindir}/getssl\n%{_datadir}/getssl/dns_scripts/*\n%{_datadir}/getssl/other_scripts/*\n%{_sysconfdir}/cron.d/getssl\n%{_sysconfdir}/logrotate.d/getssl\n\n%changelog\n"
        },
        {
          "name": "other_scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}