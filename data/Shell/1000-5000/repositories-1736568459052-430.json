{
  "metadata": {
    "timestamp": 1736568459052,
    "page": 430,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "al0ne/LinuxCheck",
      "stars": 1855,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.037109375,
          "content": "MIT License\n\nCopyright (c) 2019 al0ne\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LinuxCheck.sh",
          "type": "blob",
          "size": 28.36328125,
          "content": "#!/usr/bin/env bash\n\necho \"\"\necho \" ========================================================= \"\necho \" \\        Linux应急处置/信息搜集/漏洞检测脚本 V3.0      / \"\necho \" ========================================================= \"\necho \" # 支持Centos、Debian系统检测                    \"\necho \" # author：al0ne                    \"\necho \" # https://github.com/al0ne                    \"\necho \" # 更新日期：2024年4月20日                    \"\necho \" # 参考来源：                \"\necho \" #   1.Gscan https://github.com/grayddq/GScan  \"\necho \" #   2.Lynis https://github.com/CISOfy/lynis  \"\necho \" #   3.container-escape-check https://github.com/teamssix/container-escape-check\"\necho -e \"\\n\"\n\n# WEB Path 设置web目录，检测Webshell。\nwebpath='/'\n\n# 报告上报的地址\nwebhook_url='http://localhost:5000/upload'\n\n# 设置保存文件\nipaddress=$(ip address | grep -oP '(?<=inet )\\d+\\.\\d+\\.\\d+\\.\\d+(?=\\/2)' | head -n 1)\nfilename=$ipaddress'_'$(hostname)'_'$(whoami)'_'$(date +%s)_log'.md'\n\nprint_msg() {\n  echo -e \"$1\\n\" | tee -a $filename\n}\n\nprint_code() {\n  echo -e \"\\`\\`\\`shell\\n$1\\n\\`\\`\\`\\n\" | tee -a $filename\n}\n\nreverse_shell_check() {\n  echo -e \"\\n\"\n  print_code \"$(grep -P '(tftp\\s\\-i|scp\\s|sftp\\s|bash\\s\\-i|nc\\s\\-e|sh\\s\\-i|wget\\s|curl\\s|\\bexec|/dev/tcp/|/dev/udp/)' $1 $2 $3)\"\n  print_code \"$(grep -P '(useradd|groupadd|chattr|fsockopen|socat|base64|socket|perl|openssl)' $1 $2 $3)\"\n}\n\n### 1.环境检查 ###\nprint_msg \"## 环境检测\"\n# 验证是否为root权限\nif [ $UID -ne 0 ]; then\n  print_msg \"请使用root权限运行！\"\n  exit 1\nelse\n  print_msg \"当前为root权限！\"\nfi\n\n# 验证操作系统是debian系还是centos\nOS='None'\n\nif [ -e \"/etc/os-release\" ]; then\n  source /etc/os-release\n  case ${ID} in\n  \"debian\" | \"ubuntu\" | \"devuan\")\n    OS='Debian'\n    ;;\n  \"centos\" | \"rhel fedora\" | \"rhel\")\n    OS='Centos'\n    ;;\n  *) ;;\n  esac\nfi\n\nif [ $OS = 'None' ]; then\n  if command -v apt-get >/dev/null 2>&1; then\n    OS='Debian'\n  elif command -v yum >/dev/null 2>&1; then\n    OS='Centos'\n  else\n    echo -e \"\\n不支持这个系统\\n\"\n    echo -e \"已退出\"\n    exit 1\n  fi\nfi\n\n# 安装应急必备工具\ncmdline=(\n  \"net-tools\"\n  \"telnet\"\n  \"nc\"\n  \"lrzsz\"\n  \"wget\"\n  \"strace\"\n  \"traceroute\"\n  \"htop\"\n  \"tar\"\n  \"lsof\"\n  \"tcpdump\"\n)\nfor prog in \"${cmdline[@]}\"; do\n\n  if [ $OS = 'Centos' ]; then\n    soft=$(rpm -q \"$prog\")\n    if echo \"$soft\" | grep -E '没有安装|未安装|not installed' >/dev/null 2>&1; then\n      echo -e \"$prog 安装中......\"\n      yum install -y \"$prog\" >/dev/null 2>&1\n      yum install -y the_silver_searcher >/dev/null 2>&1\n    fi\n  else\n    if dpkg -L $prog | grep 'does not contain any files' >/dev/null 2>&1; then\n      echo -e \"$prog 安装中......\"\n      apt install -y \"$prog\" >/dev/null 2>&1\n    fi\n\n  fi\ndone\n\necho -e \"\\n\"\n\nbase_check() {\n  print_msg \"## 基础配置检查\"\n  print_msg \"### 系统信息\"\n  #当前用户\n  print_msg \"**USER:**\\t\\t$(whoami)\" 2>/dev/null\n  #版本信息\n  print_msg \"**OS Version:**\\t$(uname -r)\"\n  #主机名\n  print_msg \"**Hostname:** \\t$(hostname -s)\"\n  #服务器SN\n  print_msg \"**服务器SN:** \\t$(dmidecode -t1 | grep -oP '(?<=Serial Number: ).*')\"\n  #uptime\n  print_msg \"**Uptime:** \\t$(uptime | awk -F ',' '{print $1}')\"\n  #系统负载\n  print_msg \"**系统负载:** \\t$(uptime | awk '{print $9\" \"$10\" \"$11\" \"$12\" \"$13}')\"\n  #cpu信息\n  print_msg \"**CPU info:**\\t$(grep -oP '(?<=model name\\t: ).*' </proc/cpuinfo | head -n 1)\"\n  #cpu核心\n  print_msg \"**CPU 核心:**\\t$(cat /proc/cpuinfo | grep 'processor' | sort | uniq | wc -l)\"\n  #ipaddress\n  ipaddress=$(ifconfig | grep -oP '(?<=inet |inet addr:)\\d+\\.\\d+\\.\\d+\\.\\d+' | grep -v '127.0.0.1') >/dev/null 2>&1\n  print_msg \"**IPADDR:**\\t\\t${ipaddress}\" | sed \":a;N;s/\\n/ /g;ta\"\n  print_msg \"**CPU使用率:**  \"\n  awk '$0 ~/cpu[0-9]/' /proc/stat 2>/dev/null | while read line; do\n    print_msg \"$(echo $line | awk '{total=$2+$3+$4+$5+$6+$7+$8;free=$5;\\\n        print$1\" Free \"free/total*100\"%\",\\\n        \"Used \" (total-free)/total*100\"%\"}')\"\n  done\n\n  #内存占用\n  print_msg \"### 内存占用\"\n  print_code \"$(free -mh)\"\n\n  #剩余空间\n  print_msg \"### 剩余空间\"\n  print_code \"$(df -mh)\"\n\n  print_msg \"### 硬盘挂载\"\n  print_code \"$(grep -v '#' </etc/fstab | awk '{print $1,$2,$3}')\"\n\n  #安装软件\n  # print_msg \"### 常用软件\"\n  cmdline=(\n    \"which perl\"\n    \"which gcc\"\n    \"which g++\"\n    \"which python\"\n    \"which php\"\n    \"which cc\"\n    \"which go\"\n    \"which node\"\n    \"which nodejs\"\n    \"which bind\"\n    \"which tomcat\"\n    \"which clang\"\n    \"which ruby\"\n    \"which curl\"\n    \"which wget\"\n    \"which mysql\"\n    \"which redis\"\n    \"which ssserver\"\n    \"which vsftpd\"\n    \"which java\"\n    \"which apache\"\n    \"which apache2\"\n    \"which nginx\"\n    \"which git\"\n    \"which mongodb\"\n    \"which docker\"\n    \"which tftp\"\n    \"which psql\"\n    \"which kafka\"\n\n  )\n\n  #HOSTS\n  print_msg \"### /etc/hosts\"\n  print_code \"$(cat /etc/hosts | egrep -v \"#\")\"\n}\n\nprocess_check() {\n  print_msg \"## 进程信息检查\"\n\n  print_msg \"### CPU占用TOP 15\"\n  cpu=$(ps aux | grep -v ^'USER' | sort -rn -k3 | head -15) 2>/dev/null\n  print_code \"${cpu}\"\n\n  print_msg \"### 内存占用TOP 15\"\n  mem=$(ps aux | grep -v ^'USER' | sort -rn -k4 | head -15) 2>/dev/null\n  print_code \"${mem}\"\n\n  print_msg \"### 父进程为1的进程信息\"\n  print_code \"$(ps -e -o user,pid,ppid,cmd | awk '$3 == 1' | egrep -v \"containerd-shim|/lib/systemd/systemd|/usr/sbin/cron|dbus|rsyslogd|containerd|/usr/sbin/sshd|/usr/bin/dockerd|/usr/sbin/arpd|/bin/login|/usr/sbin/vnstatd\")\"\n\n  print_msg \"### bash反弹shell进程\"\n  tcp_reverse=$(ps -ef | grep -P 'sh -i' | egrep -v 'grep' | awk '{print $2}' | xargs -i{} lsof -p {} | grep 'ESTAB')\n  if [ -n $tcp_reverse ]; then\n    print_code \"$tcp_reverse\"\n  else\n    print_code \"未发现 bash -i 反弹shell！\"\n  fi\n  print_msg \"### SSH 软连接后门进程\"\n  if ps -ef | grep -P '\\s+\\-oport=\\d+' >/dev/null 2>&1; then\n    print_msg \"$(ps -ef | grep -P '\\s+\\-oport=\\d+')\"\n  else\n    print_msg \"未检测到SSH软连接后门\"\n\n  fi\n}\n\nnetwork_check() {\n  print_msg \"## 网络/流量检查\"\n  #ifconfig\n  print_msg '### ifconfig'\n  print_code \"$(/sbin/ifconfig -a)\"\n\n  #网络流量\n  print_msg \"### 网络流量\"\n  print_msg \"**Interface**    **ByteRec**   **PackRec**   **ByteTran**   **PackTran**\"\n  awk ' NR>2' /proc/net/dev | while read line; do\n    print_msg \"$line\" | awk -F ':' '{print \"  \"$1\"  \" $2}' | awk '{print $1\"   \"$2 \"    \"$3\"   \"$10\"  \"$11}'\n  done\n\n  #端口监听\n  print_msg \"### 端口监听\"\n  print_code \"$(netstat -tulpen | grep -P 'tcp|udp.*')\"\n\n  #对外开放端口\n  print_msg \"### 对外开放端口\"\n  print_code \"$(netstat -tulpen | awk '{print $1,$4}' | grep -P -o '.*0.0.0.0:(\\d+)|:::\\d+')\"\n\n  #网络连接\n  print_msg \"### 网络连接\"\n  print_msg \"**TCP连接**\"\n  print_code \"$(netstat -antop | grep -P ESTAB)\"\n  print_msg \"**UDP连接**\"\n  print_code \"$(netstat -anp | grep -P udp)\"\n\n  #连接状态\n  print_msg \"### TCP连接状态\"\n  print_code \"$(netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}')\"\n\n  #路由表\n  print_msg \"### 路由表\"\n  print_code \"$(/sbin/route -nee)\"\n\n  #路由转发\n  print_msg \"### 路由转发\"\n  ip_forward=$(more /proc/sys/net/ipv4/ip_forward | awk -F: '{if ($1==1) print \"1\"}')\n  if [ -n \"$ip_forward\" ]; then\n    print_code \"/proc/sys/net/ipv4/ip_forward 已开启路由转发！\"\n  else\n    print_code \"该服务器未开启路由转发！\"\n  fi\n\n  #DNS\n  print_msg \"### DNS Server\"\n  print_code \"$(grep -oP '\\d+\\.\\d+\\.\\d+\\.\\d+' </etc/resolv.conf)\"\n\n  #ARP\n  print_msg \"### ARP\"\n  print_code \"$(arp -n -a)\"\n\n  #混杂模式\n  print_msg \"### 网卡混杂模式\"\n  if ip link | grep -P PROMISC >/dev/null 2>&1; then\n    print_code \"网卡存在混杂模式！\"\n  else\n    print_code \"网卡不存在混杂模式！\"\n\n  fi\n\n  #防火墙\n  print_msg \"### IPTABLES防火墙\"\n  print_code \"$(iptables -L)\"\n\n}\n\ncrontab_check() {\n  print_msg \"## 任务计划检查\"\n\n  #crontab\n  print_msg \"### Crontab 文件\"\n  print_msg \"crontab -l\"\n  print_code \"$(crontab -u root -l | egrep -v '#')\"\n  print_msg \"ls -alht /etc/cron.*/*\"\n  print_code \"$(ls -alht /etc/cron.*/*)\"\n\n  # crontab 内容\n  print_msg \"### Crontab 文件内容\"\n  print_code \"$(find /var/spool/cron/ -type f -print0 | xargs -0 sudo cat | egrep -v '#')\"\n\n  #crontab可疑命令\n  print_msg \"### Crontab Backdoor\"\n  reverse_shell_check /etc/cron*\n  reverse_shell_check /var/spool/cron/*\n}\n\nenv_check() {\n  print_msg \"## 环境变量检查\"\n  #env\n  print_msg \"### env\"\n  print_code \"$(env)\"\n\n  #PATH\n  print_msg \"### PATH\"\n  print_code \"$PATH\"\n\n  print_msg \"### Linux 动态链接库变量\"\n\n  #LD_PRELOAD\n  if [[ -n $LD_PRELOAD ]]; then\n    print_msg \"**LD_PRELOAD**\"\n    print_code $LD_PRELOAD\n  fi\n  #LD_ELF_PRELOAD\n  if [[ -n $LD_ELF_PRELOAD ]]; then\n    print_msg \"**LD_ELF_PRELOAD**\"\n    print_code $LD_ELF_PRELOAD\n  fi\n  #LD_AOUT_PRELOAD\n  if [[ -n $LD_AOUT_PRELOAD ]]; then\n    print_msg \"**LD_AOUT_PRELOAD**\"\n    print_code $LD_AOUT_PRELOAD\n  fi\n  #PROMPT_COMMAND\n  if [[ -n $PROMPT_COMMAND ]]; then\n    print_msg \"**PROMPT_COMMAND**\"\n    print_code $PROMPT_COMMAND\n  fi\n  #LD_LIBRARY_PATH\n  if [[ -n $LD_LIBRARY_PATH ]]; then\n    print_msg \"**LD_LIBRARY_PATH**\"\n    print_code $LD_LIBRARY_PATH\n  fi\n  #ld.so.preload\n  preload='/etc/ld.so.preload'\n  if [ -e \"${preload}\" ]; then\n    print_msg \"**ld.so.preload**\"\n    print_code ${preload}\n  fi\n  # 正在运行的环境变量\n  print_msg \"### 正在运行的进程环境变量问题\"\n  print_code \"$(grep -P 'LD_PRELOAD|LD_ELF_PRELOAD|LD_AOUT_PRELOAD|PROMPT_COMMAND|LD_LIBRARY_PATH' /proc/*/environ)\"\n}\n\nuser_check() {\n  print_msg \"## 用户信息检查\"\n\n  print_msg \"### 可登陆用户\"\n  print_code \"$(cat /etc/passwd | egrep -v 'nologin$|false$')\"\n\n  print_msg \"### Root权限（非root）账号\"\n  print_code \"$(cat /etc/passwd | awk -F ':' '$3==0' | egrep -v root:)\"\n\n  print_msg \"### /etc/passwd文件修改日期: \"\n\n  print_code \"$(stat /etc/passwd | grep -P -o '(?<=Modify: ).*')\"\n\n  print_msg \"### sudoers(请注意NOPASSWD)\"\n  print_code \"$(cat /etc/sudoers | egrep -v '#' | sed -e '/^$/d' | grep -P ALL)\"\n\n  print_msg \"### 登录信息 w\"\n  print_code \"$(w)\"\n  print_msg \"### 登录信息 last\"\n  print_code \"$(last)\"\n  print_msg \"### 登录信息 lastlog\"\n  print_code \"$(lastlog)\"\n\n  print_msg \"### 登陆ip\"\n  print_code \"$(grep -i -a Accepted /var/log/secure /var/log/auth.* 2>/dev/null | grep -Po '\\d+\\.\\d+\\.\\d+\\.\\d+' | sort | uniq)\"\n\n}\n\ninit_check() {\n  print_msg \"## Linux启动项排查\"\n\n  print_msg \"### /etc/init.d 记录\"\n  print_code \"$(ls -alhtR /etc/init.d | head -n 30)\"\n  print_msg \"### /etc/init.d 黑特征\"\n  reverse_shell_check /etc/init.d/*\n}\n\nservice_check() {\n\n  print_msg \"## 服务状态检查\"\n\n  print_msg \"### 正在运行的Service \"\n  print_code \"$(systemctl -l | grep running | awk '{print $1}')\"\n\n  print_msg \"### 最近添加的Service \"\n  print_code \"$(ls -alhtR /etc/systemd/system/multi-user.target.wants)\"\n  print_code \"$(ls -alht /etc/systemd/system/*.service | egrep -v 'dbus-org')\"\n\n}\n\nbash_check() {\n\n  print_msg -e \"## Bash配置检查\"\n  #查看history文件\n  print_msg \"### History文件\"\n  print_code \"$(ls -alht /root/.*_history)\"\n\n  print_msg \"### History敏感操作\"\n  print_code \"$(cat ~/.*history | grep -P '(?<![0-9])(?:(?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2}))(?![0-9])|http://|https://|\\bssh\\b|\\bscp\\b|\\.tar|\\bwget\\b|\\bcurl\\b|\\bnc\\b|\\btelnet\\b|\\bbash\\b|\\bsh\\b|\\bchmod\\b|\\bchown\\b|/etc/passwd|/etc/shadow|/etc/hosts|\\bnmap\\b|\\bfrp\\b|\\bnfs\\b|\\bsshd\\b|\\bmodprobe\\b|\\blsmod\\b|\\bsudo\\b|mysql\\b|mysqldump' | egrep -v 'man\\b|ag\\b|cat\\b|sed\\b|git\\b|docker\\b|rm\\b|touch\\b|mv\\b|\\bapt\\b|\\bapt-get\\b')\"\n\n  #/etc/profile\n  print_msg \"### /etc/profile \"\n  print_code \"$(cat /etc/profile | egrep -v '#')\"\n\n  # $HOME/.profile\n  print_msg \"### .profile \"\n  print_code \"$(cat $HOME/.profile | egrep -v '#')\"\n\n  #/etc/rc.local\n  print_msg \"### /etc/rc.local \"\n  print_code \"$(cat /etc/rc.local | egrep -v '#')\"\n\n  #~/.bash_profile\n  print_msg \"### ~/.bash_profile \"\n  if [ -e \"$HOME/.bash_profile\" ]; then\n    print_code \"$(cat ~/.bash_profile | egrep -v '#')\"\n  fi\n\n  #~/.bashrc\n  print_msg \"### ~/.bashrc \"\n  print_code \"$(cat ~/.bashrc | egrep -v '#' | sort | uniq)\"\n\n  #~/.bashrc\n  print_msg \"### ~/.zshrc \"\n  print_code \"$(cat ~/.zshrc | egrep -v '#' | sort | uniq)\"\n\n}\n\nfile_check() {\n  print_msg \"## 文件检查\"\n  print_msg \"系统文件修改时间 \"\n  cmdline=(\n    \"/sbin/ifconfig\"\n    \"/bin/ls\"\n    \"/bin/login\"\n    \"/bin/netstat\"\n    \"/bin/top\"\n    \"/bin/ps\"\n    \"/bin/find\"\n    \"/bin/grep\"\n    \"/etc/passwd\"\n    \"/etc/shadow\"\n    \"/usr/bin/curl\"\n    \"/usr/bin/wget\"\n    \"/root/.ssh/authorized_keys\"\n  )\n  for soft in \"${cmdline[@]}\"; do\n    print_msg \"文件：$soft\\t\\t\\t修改日期：$(stat $soft | grep -P -o '(?<=Modify: )[\\d-\\s:]+')\"\n  done\n\n  print_msg \"### ...隐藏文件\"\n  print_msg \"$(find / ! -path \"/proc/*\" ! -path \"/sys/*\" ! -path \"/run/*\" ! -path \"/boot/*\" -name \".*.\")\"\n\n  #tmp目录\n  print_msg \"### /tmp\"\n  print_code \"$(ls /tmp /var/tmp /dev/shm -alht)\"\n\n  #alias 别名\n  print_msg \"### alias\"\n  print_code \"$(alias | egrep -v 'git')\"\n\n  #SUID\n  print_msg \"### SUID\"\n  print_code \"$(find / ! -path \"/proc/*\" -perm -004000 -type f | egrep -v 'snap|docker|pam_timestamp_check|unix_chkpwd|ping|mount|su|pt_chown|ssh-keysign|at|passwd|chsh|crontab|chfn|usernetctl|staprun|newgrp|chage|dhcp|helper|pkexec|top|Xorg|nvidia-modprobe|quota|login|security_authtrampoline|authopen|traceroute6|traceroute|ps')\"\n\n  #lsof -L1 进程存在但文件已经没有了\n  print_msg \"### lsof +L1\"\n  print_code \"$(lsof +L1)\"\n\n  #近7天改动\n  print_msg \"### 近七天文件改动 mtime \"\n  print_code \"$(find /etc /bin /lib /sbin /dev /root/ /home /tmp /var /usr ! -path \"/var/log*\" ! -path \"/var/spool/exim4*\" ! -path \"/var/backups*\" -mtime -7 -type f | egrep -v '\\.log|cache|vim|/share/|/lib/|.zsh|.gem|\\.git|LICENSE|README|/_\\w+\\.\\w+|\\blogs\\b|elasticsearch|nohup|i18n' | xargs -i{} ls -alh {})\"\n\n  #近7天改动\n  print_msg \"### 近七天文件改动 ctime \"\n  print_code \"$(find /etc /bin /lib /sbin /dev /root/ /home /tmp /var /usr ! -path \"/var/log*\" ! -path \"/var/spool/exim4*\" ! -path \"/var/backups*\" -ctime -7 -type f | egrep -v '\\.log|cache|vim|/share/|/lib/|.zsh|.gem|\\.git|LICENSE|README|/_\\w+\\.\\w+|\\blogs\\b|elasticsearch|nohup|i18n' | xargs -i{} ls -alh {})\"\n\n  #大文件200mb\n  #有些黑客会将数据库、网站打包成一个文件然后下载\n  print_msg \"### 大文件>200mb \"\n  print_code \"$(find / ! -path \"/proc/*\" ! -path \"/sys/*\" ! -path \"/run/*\" ! -path \"/boot/*\" -size +200M -exec ls -alht {} + 2>/dev/null | grep -P '\\.gif|\\.jpeg|\\.jpg|\\.png|\\.zip|\\.tar.gz|\\.tgz|\\.7z|\\.log|\\.xz|\\.rar|\\.bak|\\.old|\\.sql|\\.1|\\.txt|\\.tar|\\.db|/\\w+$' | egrep -v 'ib_logfile|ibd|mysql-bin|mysql-slow|ibdata1|overlay2')\"\n\n  #敏感文件\n  print_msg \"### 敏感文件 \"\n  print_code \"$(find / ! -path \"/lib/modules*\" ! -path \"/usr/src*\" ! -path \"/snap*\" ! -path \"/usr/include/*\" -regextype posix-extended -regex '.*sqlmap|.*msfconsole|.*\\bncat|.*\\bnmap|.*nikto|.*ettercap|.*tunnel\\.(php|jsp|asp|py)|.*/nc\\b|.*socks.(php|jsp|asp|py)|.*proxy.(php|jsp|asp|py)|.*brook.*|.*frps|.*frpc|.*aircrack|.*hydra|.*miner|.*/ew$' -type f | egrep -v '/lib/python' | xargs -i{} ls -alh {})\"\n\n  print_msg \"### 可疑黑客文件 \"\n  print_code \"$(find /root /home /opt /tmp /var/ /dev -regextype posix-extended -regex '.*wget|.*curl|.*openssl|.*mysql' -type f 2>/dev/null | xargs -i{} ls -alh {} | egrep -v '/pkgs/|/envs/|overlay2')\"\n\n}\n\nrootkit_check() {\n  print_msg \"## Rootkit检查\"\n  #lsmod 可疑模块\n  print_msg \"### lsmod 可疑模块\"\n  print_code \"$(lsmod | egrep -v 'ablk_helper|ac97_bus|acpi_power_meter|aesni_intel|ahci|ata_generic|ata_piix|auth_rpcgss|binfmt_misc|bluetooth|bnep|bnx2|bridge|cdrom|cirrus|coretemp|crc_t10dif|crc32_pclmul|crc32c_intel|crct10dif_common|crct10dif_generic|crct10dif_pclmul|cryptd|dca|dcdbas|dm_log|dm_mirror|dm_mod|dm_region_hash|drm|drm_kms_helper|drm_panel_orientation_quirks|e1000|ebtable_broute|ebtable_filter|ebtable_nat|ebtables|edac_core|ext4|fb_sys_fops|floppy|fuse|gf128mul|ghash_clmulni_intel|glue_helper|grace|i2c_algo_bit|i2c_core|i2c_piix4|i7core_edac|intel_powerclamp|ioatdma|ip_set|ip_tables|ip6_tables|ip6t_REJECT|ip6t_rpfilter|ip6table_filter|ip6table_mangle|ip6table_nat|ip6ta ble_raw|ip6table_security|ipmi_devintf|ipmi_msghandler|ipmi_si|ipmi_ssif|ipt_MASQUERADE|ipt_REJECT|iptable_filter|iptable_mangle|iptable_nat|iptable_raw|iptable_security|iTCO_vendor_support|iTCO_wdt|jbd2|joydev|kvm|kvm_intel|libahci|libata|libcrc32c|llc|lockd|lpc_ich|lrw|mbcache|megaraid_sas|mfd_core|mgag200|Module|mptbase|mptscsih|mptspi|nf_conntrack|nf_conntrack_ipv4|nf_conntrack_ipv6|nf_defrag_ipv4|nf_defrag_ipv6|nf_nat|nf_nat_ipv4|nf_nat_ipv6|nf_nat_masquerade_ipv4|nfnetlink|nfnetlink_log|nfnetlink_queue|nfs_acl|nfsd|parport|parport_pc|pata_acpi|pcspkr|ppdev|rfkill|sch_fq_codel|scsi_transport_spi|sd_mod|serio_raw|sg|shpchp|snd|snd_ac97_codec|snd_ens1371|snd_page_alloc|snd_pcm|snd_rawmidi|snd_seq|snd_seq_device|snd_seq_midi|snd_seq_midi_event|snd_timer|soundcore|sr_mod|stp|sunrpc|syscopyarea|sysfillrect|sysimgblt|tcp_lp|ttm|tun|uvcvideo|videobuf2_core|videobuf2_memops|videobuf2_vmalloc|videodev|virtio|virtio_balloon|virtio_console|virtio_net|virtio_pci|virtio_ring|virtio_scsi|vmhgfs|vmw_balloon|vmw_vmci|vmw_vsock_vmci_transport|vmware_balloon|vmwgfx|vsock|xfs|xt_CHECKSUM|xt_conntrack|xt_state|raid*|tcpbbr|btrfs|.*diag|psmouse|ufs|linear|msdos|cpuid|veth|xt_tcpudp|xfrm_user|xfrm_algo|xt_addrtype|br_netfilter|input_leds|sch_fq|ib_iser|rdma_cm|iw_cm|ib_cm|ib_core|.*scsi.*|tcp_bbr|pcbc|autofs4|multipath|hfs.*|minix|ntfs|vfat|jfs|usbcore|usb_common|ehci_hcd|uhci_hcd|ecb|crc32c_generic|button|hid|usbhid|evdev|hid_generic|overlay|xt_nat|qnx4|sb_edac|acpi_cpufreq|ixgbe|pf_ring|tcp_htcp|cfg80211|x86_pkg_temp_thermal|mei_me|mei|processor|thermal_sys|lp|enclosure|ses|ehci_pci|igb|i2c_i801|pps_core|isofs|nls_utf8|xt_REDIRECT|xt_multiport|iosf_mbi|qxl|cdc_ether|usbnet|ip6table_raw|skx_edac|intel_rapl|wmi|acpi_pad|ast|i40e|ptp|nfit|libnvdimm|bpfilter|failover|toa|tls|nft_|qemu_fw_cfg')\"\n\n  print_msg \"### Rootkit 内核模块\"\n  kernel=$(grep -E 'hide_tcp4_port|hidden_files|hide_tcp6_port|diamorphine|module_hide|module_hidden|is_invisible|hacked_getdents|hacked_kill|heroin|kernel_unlink|hide_module|find_sys_call_tbl|h4x_delete_module|h4x_getdents64|h4x_kill|h4x_tcp4_seq_show|new_getdents|old_getdents|should_hide_file_name|should_hide_task_name' </proc/kallsyms)\n  if [ -n \"$kernel\" ]; then\n    print_msg \"存在内核敏感函数！疑似Rootkit内核模块\"\n    print_msg \"$kernel\"\n  else\n    print_msg \"未找到内核敏感函数\"\n  fi\n\n  print_msg \"### 可疑的.ko模块\"\n  print_code \"$(find / ! -path '/var/lib/docker/overlay2/*' ! -path '/proc/*' ! -path '/usr/lib/modules/*' ! -path '/lib/modules/*' ! -path '/boot/*' -regextype posix-extended -regex '.*\\.ko' | egrep -v 'tutor.ko')\"\n\n}\n\nssh_check() {\n  print_msg \"## SSH检查\"\n  #SSH爆破IP\n  print_msg \"### SSH爆破\"\n  if [ $OS = 'Centos' ]; then\n    print_code \"$(grep -P -i -a 'authentication failure' /var/log/secure* | awk '{print $14}' | awk -F '=' '{print $2}' | grep -P '\\d+\\.\\d+\\.\\d+\\.\\d+' | sort | uniq -c | sort -nr | head -n 25)\"\n  else\n    print_code \"$(grep -P -i -a 'authentication failure' /var/log/auth.* | awk '{print $14}' | awk -F '=' '{print $2}' | grep -P '\\d+\\.\\d+\\.\\d+\\.\\d+' | sort | uniq -c | sort -nr | head -n 25)\"\n  fi\n\n  #SSHD\n  print_msg \"### SSHD\"\n  print_msg \"/usr/sbin/sshd\"\n  print_code \"$(stat /usr/sbin/sshd | grep -P 'Access|Modify|Change')\"\n\n  #ssh后门配置检查\n  print_msg \"### SSH 后门配置\"\n  if [ -e \"$HOME/.ssh/config\" ]; then\n    print_msg \"$(grep LocalCommand <~/.ssh/config)\"\n    print_msg \"$(grep ProxyCommand <~/.ssh/config)\"\n  else\n    print_msg \"未发现ssh配置文件\"\n  fi\n\n  #PAM后门检查\n  print_msg \"### PAM 后门检测 \"\n  ls -la /usr/lib/security 2>/dev/null\n  ls -la /usr/lib64/security 2>/dev/null\n\n  print_msg \"### SSH inetd后门检查 \"\n  if [ -e \"/etc/inetd.conf\" ]; then\n    grep -E '(bash -i)' </etc/inetd.conf\n  fi\n\n  print_msg \"### SSH key\"\n  user_dirs=$(ls /home)\n  for user_dir in $user_dirs; do\n    sshkey=\"/home/${user_dir}/.ssh/authorized_keys\"\n\n    if [ -s \"${sshkey}\" ]; then\n      print_msg \"User: ${user_dir}\\n\"\n      print_code \"$(cat ${sshkey})\"\n    fi\n  done\n\n  # 检查/root目录的authorized_keys文件\n  print_msg \"### authorized_keys\"\n  root_sshkey=\"/root/.ssh/authorized_keys\"\n\n  if [ -s \"${root_sshkey}\" ]; then\n    print_code \"$(cat ${root_sshkey})\"\n  else\n    print_code \"User: root - SSH key文件不存在\"\n  fi\n}\n\nwebshell_check() {\n\n  print_msg \"## Webshell检查\"\n\n  print_msg \"### PHP webshell查杀\"\n  print_code \"$(grep -P -i -r -l 'array_map\\(|pcntl_exec\\(|proc_open\\(|popen\\(|assert\\(|phpspy|c99sh|milw0rm|eval?\\(|\\(gunerpress|\\(base64_decoolcode|spider_bc|shell_exec\\(|passthru\\(|base64_decode\\s?\\(|gzuncompress\\s?\\(|gzinflate|\\(\\$\\$\\w+|call_user_func\\(|call_user_func_array\\(|preg_replace_callback\\(|preg_replace\\(|register_shutdown_function\\(|register_tick_function\\(|mb_ereg_replace_callback\\(|filter_var\\(|ob_start\\(|usort\\(|uksort\\(|uasort\\(|GzinFlate\\s?\\(|\\$\\w+\\(\\d+\\)\\.\\$\\w+\\(\\d+\\)\\.|\\$\\w+=str_replace\\(|eval\\/\\*.*\\*\\/\\(' $webpath --include='*.php*' --include='*.phtml')\"\n  print_code \"$(grep -P -i -r -l '^(\\xff\\xd8|\\x89\\x50|GIF89a|GIF87a|BM|\\x00\\x00\\x01\\x00\\x01)[\\s\\S]*<\\?\\s*php' $webpath --include='*.php*' --include='*.phtml')\"\n  print_code \"$(grep -P -i -r -l '\\b(assert|eval|system|exec|shell_exec|passthru|popen|proc_open|pcntl_exec)\\b[\\/*\\s]*\\(+[\\/*\\s]*((\\$_(GET|POST|REQUEST|COOKIE)\\[.{0,25})|(base64_decode|gzinflate|gzuncompress|gzdecode|str_rot13)[\\s\\(]*(\\$_(GET|POST|REQUEST|COOKIE)\\[.{0,25}))' $webpath --include='*.php*' --include='*.phtml')\"\n  print_code \"$(grep -P -i -r -l '\\$\\s*(\\w+)\\s*=[\\s\\(\\{]*(\\$_(GET|POST|REQUEST|COOKIE)\\[.{0,25});[\\s\\S]{0,200}\\b(assert|eval|system|exec|shell_exec|passthru|popen|proc_open|pcntl_exec)\\b[\\/*\\s]*\\(+[\\s\"\\/*]*(\\$\\s*\\1|((base64_decode|gzinflate|gzuncompress|gzdecode|str_rot13)[\\s\\(\"]*\\$\\s*\\1))' $webpath --include='*.php*' --include='*.phtml')\"\n  print_code \"$(grep -P -i -r -l '\\b(filter_var|filter_var_array)\\b\\s*\\(.*FILTER_CALLBACK[^;]*((\\$_(GET|POST|REQUEST|COOKIE|SERVER)\\[.{0,25})|(eval|assert|ass\\\\x65rt|system|exec|shell_exec|passthru|popen|proc_open|pcntl_exec))' $webpath --include='*.php*' --include='*.phtml')\"\n  print_code \"$(grep -P -i -r -l \"\\b(assert|eval|system|exec|shell_exec|passthru|popen|proc_open|pcntl_exec|include)\\b\\s*\\(\\s*(file_get_contents\\s*\\(\\s*)?[\\'\\\"]php:\\/\\/input\" $webpath --include='*.php*' --include='*.phtml')\"\n  print_code \"$(grep -P -i -r -l 'getruntime|processimpl|processbuilder|defineclass|classloader|naming.lookup|internaldofilter|elprocessor|scriptenginemanager|urlclassloader|versionhelper|registermapping|registerhandler|detecthandlermethods|\\\\u0063\\\\u006c\\\\u0061\\\\u0073\\\\u0073' $webpath --include='*.php*' --include='*.phtml')\"\n  print_code \"$(grep -P -i -r -l 'phpinfo|move_uploaded_file|system|shell_exec|passthru|popen|proc_open|pcntl_exec|call_user_func|ob_start' $webpath --include='*.php*' --include='*.phtml')\"\n  print_code \"$(grep -P -i -r -l 'array_map|uasort|uksort|array_diff_uassoc|array_diff_ukey|array_intersect_uassoc|array_intersect_ukey|array_reduce|array_filter|array_udiff|array_udiff_assoc|array_udiff_uassoc|array_uintersect|array_uintersect_assoc|array_uintersect_uassoc|array_walk|array_walk_recursive|register_shutdown_function|register_tick_function|filter_var_array|yaml_parse|sqlite_create_function|fgetc|fgets|fgetss|fpassthru|fread|file_get_contents|readfile|stream_get_contents|stream_get_line|highlight_file|show_source|file_put_contents|pfsockopen|fsockopen' $webpath --include='*.php*' --include='*.phtml')\"\n\n  #JSP webshell查杀\n  print_msg \"### JSP webshell查杀\"\n  print_code \"$(grep -P -i -r -l '<%@\\spage\\simport=[\\s\\S]*\\\\u00\\d+\\\\u00\\d+|<%@\\spage\\simport=[\\s\\S]*Runtime.getRuntime\\(\\).exec\\(request.getParameter\\(|Runtime.getRuntime\\(\\)' $webpath --include='*.jsp*' --include='*.jhtml')\"\n\n}\n\npoison_check() {\n\n  print_msg \"## 供应链投毒检测\"\n\n  print_msg \"### Python2 pip 检测\"\n  print_code \"$(pip freeze | grep -P 'istrib|djanga|easyinstall|junkeldat|libpeshka|mumpy|mybiubiubiu|nmap-python|openvc|python-ftp|pythonkafka|python-mongo|python-mysql|python-mysqldb|python-openssl|python-sqlite|virtualnv|mateplotlib|request=|aioconsol')\"\n\n  print_msg \"### Python3 pip 检测\"\n  print_code \"$(pip3 freeze | grep -P 'istrib|djanga|easyinstall|junkeldat|libpeshka|mumpy|mybiubiubiu|nmap-python|openvc|python-ftp|pythonkafka|python-mongo|python-mysql|python-mysqldb|python-openssl|python-sqlite|virtualnv|mateplotlib|request=|aioconsol')\"\n\n}\n\nminer_check() {\n\n  print_msg \"## 挖矿木马检查\"\n\n  print_msg \"### 常规挖矿进程检测\"\n  print_code \"$(ps aux | grep -P \"systemctI|kworkerds|init10.cfg|wl.conf|crond64|watchbog|sustse|donate|proxkekman|test.conf|/var/tmp/apple|/var/tmp/big|/var/tmp/small|/var/tmp/cat|/var/tmp/dog|/var/tmp/mysql|/var/tmp/sishen|ubyx|cpu.c|tes.conf|psping|/var/tmp/java-c|pscf|cryptonight|sustes|xmrig|xmr-stak|suppoie|ririg|/var/tmp/ntpd|/var/tmp/ntp|/var/tmp/qq|/tmp/qq|/var/tmp/aa|gg1.conf|hh1.conf|apaqi|dajiba|/var/tmp/look|/var/tmp/nginx|dd1.conf|kkk1.conf|ttt1.conf|ooo1.conf|ppp1.conf|lll1.conf|yyy1.conf|1111.conf|2221.conf|dk1.conf|kd1.conf|mao1.conf|YB1.conf|2Ri1.conf|3Gu1.conf|crant|nicehash|linuxs|linuxl|Linux|crawler.weibo|stratum|gpg-daemon|jobs.flu.cc|cranberry|start.sh|watch.sh|krun.sh|killTop.sh|cpuminer|/60009|ssh_deny.sh|clean.sh|\\./over|mrx1|redisscan|ebscan|barad_agent|\\.sr0|clay|udevs|\\.sshd|/tmp/init|xmr|xig|ddgs|minerd|hashvault|geqn|\\.kthreadd|httpdz|pastebin.com|sobot.com|kerbero|2t3ik|ddgs|qW3xt|ztctb|i2pd\" | egrep -v 'grep')\"\n  print_code \"$(find / ! -path \"/proc/*\" ! -path \"/sys/*\" ! -path \"/run/*\" ! -path \"/boot/*\" -regextype posix-extended -regex '.*systemctI|.*kworkerds|.*init10.cfg|.*wl.conf|.*crond64|.*watchbog|.*sustse|.*donate|.*proxkekman|.*cryptonight|.*sustes|.*xmrig|.*xmr-stak|.*suppoie|.*ririg|gg1.conf|.*cpuminer|.*xmr|.*xig|.*ddgs|.*minerd|.*hashvault|\\.kthreadd|.*httpdz|.*kerbero|.*2t3ik|.*qW3xt|.*ztctb|.*miner.sh' -type f)\"\n\n  print_msg \"### Ntpclient 挖矿木马检测\"\n  print_code \"$(find / ! -path \"/proc/*\" ! -path \"/sys/*\" ! -path \"/boot/*\" -regextype posix-extended -regex 'ntpclient|Mozz')\"\n  print_code \"$(ls -alh /tmp/.a /var/tmp/.a /run/shm/a /dev/.a /dev/shm/.a 2>/dev/null)\"\n\n  print_msg \"### WorkMiner 挖矿木马检测\"\n  print_code \"$(ps aux | grep -P \"work32|work64|/tmp/secure.sh|/tmp/auth.sh\" | egrep -v 'grep')\"\n  print_code \"$(ls -alh /tmp/xmr /tmp/config.json /tmp/secure.sh /tmp/auth.sh /usr/.work/work64 2>/dev/null)\"\n\n}\n\nrisk_check() {\n\n  print_msg \"## 服务器风险/漏洞检查\"\n\n  print_msg \"### Redis弱密码检测\"\n  print_code \"$(cat /etc/redis/redis.conf 2>/dev/null | grep -P '(?<=requirepass )(test|123456|admin|root|12345678|111111|p@ssw0rd|test|qwerty|zxcvbnm|123123|12344321|123qwe|password|1qaz|000000|666666|888888)')\"\n\n  print_msg \"### JDWP调试检测\"\n  if ps aux | grep -P '(?:runjdwp|agentlib:jdwp)' | egrep -v 'grep' >/dev/null 2>&1; then\n    print_code \"存在JDWP调试高风险进程\\n $(ps aux | grep -P '(?:runjdwp|agentlib:jdwp)' | egrep -v 'grep') \"\n  fi\n\n  print_msg \"### Python http.server 列目录检测\"\n  print_code \"$(ps aux | grep -P http.server | egrep -v 'grep')\"\n}\n\ndocker_check() {\n\n  print_msg \"## Docker信息检测\"\n\n  print_msg \"### Docker运行的镜像\"\n  print_code \"$(docker ps)\"\n\n  print_msg \"### 检测CAP_SYS_ADMIN权限\"\n  if command -v capsh >/dev/null 2>&1; then\n    cap_sys_adminNum=$(capsh --print | grep cap_sys_admin | wc -l)\n    if [ $cap_sys_adminNum -gt 0 ]; then\n      print_code \"存在CAP_SYS_ADMIN权限！\"\n    fi\n  else\n    print_code \"未发现capsh命令！\"\n  fi\n\n  print_msg \"### 检测CAP_DAC_READ_SEARCH权限\"\n  if command -v capsh >/dev/null 2>&1; then\n    cap_dac_read_searchNum=$(capsh --print | grep cap_dac_read_search | wc -l)\n    if [ $cap_dac_read_searchNum -gt 0 ]; then\n      print_code \"存在CAP_DAC_READ_SEARCH！\"\n    fi\n  else\n    print_code \"未发现capsh命令！\"\n  fi\n}\n\nupload_report() {\n\n  # 上传到指定接口\n  if [[ -n $webhook_url ]]; then\n    curl -X POST -F \"file=@$filename\" \"$webhook_url\"\n  fi\n\n}\n\n# 服务器基础信息排查\nbase_check\n# 进程信息排查（CPU/内存占用，后门进程排查）\nprocess_check\n# 网络排查\nnetwork_check\n# 任务计划排查\ncrontab_check\n# 环境变量排查\nenv_check\n# 用户文件排查\nuser_check\n# 启动项排查\ninit_check\n# 服务排查\nservice_check\n# bash 排查\nbash_check\n# 黑客/后门文件排查\nfile_check\n# rootkit 排查\nrootkit_check\n# ssh 排查\nssh_check\n# webshell 排查\nwebshell_check\n# 供应链排查\npoison_check\n# 挖矿排查\nminer_check\n# 服务器风险检测\nrisk_check\n# Docker 检测\ndocker_check\n# upload_report\nupload_report\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.033203125,
          "content": "# LinuxCheck\n\nLinux应急处置/信息搜集/漏洞检测工具，支持基础配置/网络流量/任务计划/环境变量/用户信息/Services/bash/恶意文件/内核Rootkit/SSH/Webshell/挖矿文件/挖矿进程/供应链/服务器风险等13类70+项检查\n\n## 更新\n\n更新日志：2024年4月20日\n\n- 调整输出为Markdown报告\n- 弃用ag，还是使用Linux原生的grep命令，避免额外安装\n- 优化代码格式，不在每条都要tee -a\n- 更新Webshell检测逻辑\n- 更新authorized_keys检测逻辑\n- 服务器风险检查添加JDWP和Python HTTP Server检查\n- 添加Docker 容器检测\n- 添加PAM后门检测\n- 添加本地报告上传能力，应对批量机器应急的情况。\n\n更新日志：2022年08月05日\n\n- 修复内核模块检查日志过多问题\n\n更新日志：2022年03月07日\n\n- 添加SSH软连接后门检测\n\n更新日期：2021年10月17日\n\n- 添加Ntpclient/WorkMiner/TeamTNT挖矿木马检测\n- 添加Rootkit模块检测逻辑\n- 添加Python pip投毒检测\n- 添加$HOME/.profile查看\n- 添加服务器风险检查(Redis)\n\n## 功能\n\n* 基础配置检查\n    * 系统配置改动检查\n    * 系统信息（IP地址/用户/开机时间/系统版本/Hostname/服务器SN）\n    * CPU使用率\n    * 登录用户信息\n    * CPU TOP 15\n    * 内存 TOP 15\n    * 磁盘剩余空间检查\n    * 硬盘挂载\n    * 常用软件检查\n    * /etc/hots\n* 网络/流量检查\n    * ifconfig\n    * 网络流量\n    * 端口监听\n    * 对外开放端口\n    * 网络连接\n    * TCP连接状态\n    * 路由表\n    * 路由转发\n    * DNS Server\n    * ARP\n    * 网卡混杂模式检查\n    * iptables 防火墙\n* 任务计划检查\n    * 当前用户任务计划\n    * /etc/系统任务计划\n    * 任务计划文件创建时间\n    * crontab 后门排查\n* 环境变量检查\n    * env\n    * path\n    * LD_PRELOAD\n    * LD_ELF_PRELOAD\n    * LD_AOUT_PRELOAD\n    * PROMPT_COMMAND\n    * LD_LIBRARY_PATH\n    * ld.so.preload\n* 用户信息检查\n    * 可登陆用户\n    * passwd文件修改日期\n    * sudoers\n    * 登录信息（w/last/lastlog）\n    * 历史登陆ip\n* Services 检查\n    * SystemD运行服务\n    * SystemD服务创建时间\n* bash检查\n    * History\n    * History命令审计\n    * /etc/profile\n    * $HOME/.profile\n    * /etc/rc.local\n    * ~/.bash_profile\n    * ~/.bashrc\n    * bash反弹shell\n* 文件检查\n    * ...隐藏文件\n    * 系统文件修改时间检测\n    * 临时文件检查（/tmp /var/tmp /dev/shm）\n    * alias\n    * suid特殊权限检查\n    * 进程存在文件未找到\n    * 近七天文件改动 mtime\n    * 近七天文件改动 ctime\n    * 大文件>200mb\n    * 敏感文件审计（nmap/sqlmap/ew/frp/nps等黑客常用工具）\n    * 可疑黑客文件（黑客上传的wget/curl等程序，或者将恶意程序改成正常软件例如nps文件改为mysql）\n* 内核Rootkit 检查\n    * lsmod 可疑模块\n    * 内核符号表检查\n    * rootkit hunter 检查\n    * rootkit .ko模块检查\n* SSH检查\n    * SSH 爆破\n    * SSHD 检测\n    * SSH 后门配置\n    * SSH inetd后门检查\n    * SSH key\n* Webshell 检查\n    * php webshell检查\n    * jsp webshell检查\n* 挖矿文件/进程检查\n    * 挖矿文件检查\n    * 挖矿进程检查\n    * WorkMiner检测\n    * Ntpclient检测\n* 供应链投毒检查\n    * Python PIP 投毒检查\n* 服务器风险检查\n    * Redis弱密码检测\n    * JDWP 服务检测\n    * Python http.server 检测\n* Docker 权限检查\n\n## Usage\n\n第一种方式：通过git clone 安装\n\n```bash\ngit clone https://github.com/al0ne/LinuxCheck.git\nchmod u+x LinuxCheck.sh\n./LinuxCheck.sh  \n```\n第二种方式：直接在线调用【在线调用就没办法使用报告上传的能力】\n\n```\nbash -c \"$(curl -sSL https://raw.githubusercontent.com/al0ne/LinuxCheck/master/LinuxCheck.sh)\"  \n```\n\n文件会保存成ipaddr_hostname_username_timestamp.log 这种格式\n\n### 报告自动上传\n\n如果是批量机器下发，脚本执行后会自动提交到某一个url下，将脚本里面的webhook_url 改成你自己的地址\n\n```shell\n# 报告上报的地址\nwebhook_url='http://localhost:5000/upload'\n\nupload_report() {\n\n  # 上传到指定接口\n  if [[ -n $webhook_url ]]; then\n    curl -X POST -F \"file=@$filename\" \"$webhook_url\"\n  fi\n\n}\n```\n\n在你的服务器上用Flask起一个服务，接收服务器上报的Markdown报告。\n\n```python\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    if 'file' not in request.files:\n        return \"No file part\", 400\n    file = request.files['file']\n    if file.filename == '':\n        return \"No selected file\", 400\n    if file:\n        filename = file.filename\n        file.save(filename)\n        return \"File successfully uploaded\", 200\n\nif __name__ == '__main__':\n    app.run(debug=True, host=\"0.0.0.0\", port=9999)\n```\n\n\n\n## 参考\n\n此工具的编写主要参考了以下几款工具/文章并结合个人经验完成\n\nLinenum\nhttps://github.com/lis912/Evaluation_tools  \nhttps://ixyzero.com/blog/archives/4.html  \nhttps://github.com/T0xst/linux   \nhttps://github.com/grayddq/GScan  \n"
        },
        {
          "name": "rkhunter.tar.gz",
          "type": "blob",
          "size": 295.0556640625,
          "content": null
        },
        {
          "name": "silversearcher-ag_2.2.0-1+b1_amd64.deb",
          "type": "blob",
          "size": 39.3984375,
          "content": null
        },
        {
          "name": "silversearcher-ag_2.2.0-1_i386.deb",
          "type": "blob",
          "size": 40.3828125,
          "content": null
        },
        {
          "name": "the_silver_searcher-2.1.0-1.el6.x86_64.rpm",
          "type": "blob",
          "size": 47.3046875,
          "content": null
        },
        {
          "name": "the_silver_searcher-2.1.0-1.el7.x86_64.rpm",
          "type": "blob",
          "size": 49.67578125,
          "content": null
        }
      ]
    }
  ]
}