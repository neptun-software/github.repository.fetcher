{
  "metadata": {
    "timestamp": 1736568368117,
    "page": 300,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "driesvints/dotfiles",
      "stars": 2239,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore_global",
          "type": "blob",
          "size": 0.4580078125,
          "content": "# Compiled source #\n###################\n*.com\n*.class\n*.dll\n*.exe\n*.o\n*.so\n\n# Packages #\n############\n# it's better to unpack these files and commit the raw source\n# git has its own built in compression methods\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n*.zip\n\n# Logs and databases #\n######################\n*.log\n*.sql\n*.sqlite\n\n# OS generated files #\n######################\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n.idea/\n.vscode\n.vagrant/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1005859375,
          "content": "[submodule \"plugins/artisan\"]\n\tpath = plugins/artisan\n\turl = git@github.com:jessarcher/zsh-artisan.git\n"
        },
        {
          "name": ".mackup.cfg",
          "type": "blob",
          "size": 0.0537109375,
          "content": "[storage]\nengine = icloud\n\n[applications_to_ignore]\nzsh"
        },
        {
          "name": ".macos",
          "type": "blob",
          "size": 42.369140625,
          "content": "#!/usr/bin/env bash\n\n# Thanks to Mathias Bynens!\n# ~/.macos — https://mths.be/macos\n\n# Close any open System Preferences panes, to prevent them from overriding\n# settings we’re about to change\nosascript -e 'tell application \"System Preferences\" to quit'\n\n# Ask for the administrator password upfront\nsudo -v\n\n# Keep-alive: update existing `sudo` time stamp until `.macos` has finished\nwhile true; do sudo -n true; sleep 60; kill -0 \"$$\" || exit; done 2>/dev/null &\n\n###############################################################################\n# General UI/UX                                                               #\n###############################################################################\n\n# Set computer name (as done via System Preferences → Sharing)\nsudo scutil --set ComputerName \"MacBook Dries\"\nsudo scutil --set HostName \"MacBook Dries\"\nsudo scutil --set LocalHostName \"MacBook Dries\"\nsudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string \"MacBook Dries\"\n\n# Disable the sound effects on boot\nsudo nvram SystemAudioVolume=\" \"\n\n# Disable transparency in the menu bar and elsewhere on Yosemite\n# defaults write com.apple.universalaccess reduceTransparency -bool true\n\n# Set highlight color to green\n# defaults write NSGlobalDomain AppleHighlightColor -string \"0.764700 0.976500 0.568600\"\n\n# Set sidebar icon size to medium\ndefaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 2\n\n# Always show scrollbars\n# defaults write NSGlobalDomain AppleShowScrollBars -string \"Always\"\n# Possible values: `WhenScrolling`, `Automatic` and `Always`\n\n# Disable the over-the-top focus ring animation\n# defaults write NSGlobalDomain NSUseAnimatedFocusRing -bool false\n\n# Disable smooth scrolling\n# (Uncomment if you’re on an older Mac that messes up the animation)\n#defaults write NSGlobalDomain NSScrollAnimationEnabled -bool false\n\n# Increase window resize speed for Cocoa applications\ndefaults write NSGlobalDomain NSWindowResizeTime -float 0.001\n\n# Expand save panel by default\ndefaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true\ndefaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true\n\n# Expand print panel by default\ndefaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true\ndefaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true\n\n# Save to disk (not to iCloud) by default\n# defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false\n\n# Automatically quit printer app once the print jobs complete\ndefaults write com.apple.print.PrintingPrefs \"Quit When Finished\" -bool true\n\n# Disable the “Are you sure you want to open this application?” dialog\ndefaults write com.apple.LaunchServices LSQuarantine -bool false\n\n# Remove duplicates in the “Open With” menu (also see `lscleanup` alias)\n# /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user\n\n# Display ASCII control characters using caret notation in standard text views\n# Try e.g. `cd /tmp; unidecode \"\\x{0000}\" > cc.txt; open -e cc.txt`\ndefaults write NSGlobalDomain NSTextShowsControlCharacters -bool true\n\n# Disable Resume system-wide\n# defaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool false\n\n# Disable automatic termination of inactive apps\n# defaults write NSGlobalDomain NSDisableAutomaticTermination -bool true\n\n# Disable the crash reporter\n#defaults write com.apple.CrashReporter DialogType -string \"none\"\n\n# Set Help Viewer windows to non-floating mode\ndefaults write com.apple.helpviewer DevMode -bool true\n\n# Fix for the ancient UTF-8 bug in QuickLook (https://mths.be/bbo)\n# Commented out, as this is known to cause problems in various Adobe apps :(\n# See https://github.com/mathiasbynens/dotfiles/issues/237\n#echo \"0x08000100:0\" > ~/.CFUserTextEncoding\n\n# Reveal IP address, hostname, OS version, etc. when clicking the clock\n# in the login window\nsudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName\n\n# Disable Notification Center and remove the menu bar icon\n# launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist 2> /dev/null\n\n# Disable automatic capitalization as it’s annoying when typing code\n# defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false\n\n# Disable smart dashes as they’re annoying when typing code\ndefaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false\n\n# Disable automatic period substitution as it’s annoying when typing code\n# defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false\n\n# Disable smart quotes as they’re annoying when typing code\ndefaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false\n\n# Disable auto-correct\ndefaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false\n\n# Set a custom wallpaper image. `DefaultDesktop.jpg` is already a symlink, and\n# all wallpapers are in `/Library/Desktop Pictures/`. The default is `Wave.jpg`.\n#rm -rf ~/Library/Application Support/Dock/desktoppicture.db\n#sudo rm -rf /System/Library/CoreServices/DefaultDesktop.jpg\n#sudo ln -s /path/to/your/image /System/Library/CoreServices/DefaultDesktop.jpg\n\n###############################################################################\n# Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #\n###############################################################################\n\n# Trackpad: enable tap to click for this user and for the login screen\n# defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true\n# defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1\n# defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1\n\n# Trackpad: map bottom right corner to right-click\n# defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2\n# defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true\n# defaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1\n# defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true\n\n# Disable “natural” (Lion-style) scrolling\n# defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false\n\n# Increase sound quality for Bluetooth headphones/headsets\ndefaults write com.apple.BluetoothAudioAgent \"Apple Bitpool Min (editable)\" -int 40\n\n# Enable full keyboard access for all controls\n# (e.g. enable Tab in modal dialogs)\ndefaults write NSGlobalDomain AppleKeyboardUIMode -int 3\n\n# Use scroll gesture with the Ctrl (^) modifier key to zoom\n# defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true\n# defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144\n# Follow the keyboard focus while zoomed in\n# defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true\n\n# Disable press-and-hold for keys in favor of key repeat\n# defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false\n\n# Set a blazingly fast keyboard repeat rate\n# defaults write NSGlobalDomain KeyRepeat -int 1\n# defaults write NSGlobalDomain InitialKeyRepeat -int 10\n\n# Set language and text formats\n# Note: if you’re in the US, replace `EUR` with `USD`, `Centimeters` with\n# `Inches`, `en_GB` with `en_US`, and `true` with `false`.\ndefaults write NSGlobalDomain AppleLanguages -array \"en\" \"nl\"\ndefaults write NSGlobalDomain AppleLocale -string \"en_US@currency=EUR\"\ndefaults write NSGlobalDomain AppleMeasurementUnits -string \"Centimeters\"\ndefaults write NSGlobalDomain AppleMetricUnits -bool true\n\n# Show language menu in the top right corner of the boot screen\n# sudo defaults write /Library/Preferences/com.apple.loginwindow showInputMenu -bool true\n\n# Set the timezone; see `sudo systemsetup -listtimezones` for other values\nsudo systemsetup -settimezone \"Europe/Brussels\" > /dev/null\n\n# Stop iTunes from responding to the keyboard media keys\n#launchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist 2> /dev/null\n\n###############################################################################\n# Energy saving                                                               #\n###############################################################################\n\n# Enable lid wakeup\nsudo pmset -a lidwake 1\n\n# Restart automatically on power loss\nsudo pmset -a autorestart 1\n\n# Restart automatically if the computer freezes\nsudo systemsetup -setrestartfreeze on\n\n# Sleep the display after 15 minutes\nsudo pmset -a displaysleep 15\n\n# Disable machine sleep while charging\nsudo pmset -c sleep 0\n\n# Set machine sleep to 5 minutes on battery\nsudo pmset -b sleep 5\n\n# Set standby delay to 24 hours (default is 1 hour)\nsudo pmset -a standbydelay 86400\n\n# Never go into computer sleep mode\nsudo systemsetup -setcomputersleep Off > /dev/null\n\n# Hibernation mode\n# 0: Disable hibernation (speeds up entering sleep mode)\n# 3: Copy RAM to disk so the system state can still be restored in case of a\n#    power failure.\nsudo pmset -a hibernatemode 0\n\n# Remove the sleep image file to save disk space\n# sudo rm /private/var/vm/sleepimage\n# Create a zero-byte file instead…\n# sudo touch /private/var/vm/sleepimage\n# …and make sure it can’t be rewritten\n# sudo chflags uchg /private/var/vm/sleepimage\n\n###############################################################################\n# Screen                                                                      #\n###############################################################################\n\n# Re-enable subpixel antialiasing\ndefaults write -g CGFontRenderingFontSmoothingDisabled -bool FALSE\n\n# Require password immediately after sleep or screen saver begins\ndefaults write com.apple.screensaver askForPassword -int 1\ndefaults write com.apple.screensaver askForPasswordDelay -int 0\n\n# Save screenshots to the desktop\n# defaults write com.apple.screencapture location -string \"${HOME}/Desktop\"\n\n# Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)\n# defaults write com.apple.screencapture type -string \"png\"\n\n# Disable shadow in screenshots\n# defaults write com.apple.screencapture disable-shadow -bool true\n\n# Enable subpixel font rendering on non-Apple LCDs\n# Reference: https://github.com/kevinSuttle/macOS-Defaults/issues/17#issuecomment-266633501\ndefaults write NSGlobalDomain AppleFontSmoothing -int 1\n\n# Enable HiDPI display modes (requires restart)\n# sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true\n\n###############################################################################\n# Finder                                                                      #\n###############################################################################\n\n# Finder: allow quitting via ⌘ + Q; doing so will also hide desktop icons\n# defaults write com.apple.finder QuitMenuItem -bool true\n\n# Finder: disable window animations and Get Info animations\ndefaults write com.apple.finder DisableAllAnimations -bool true\n\n# Set Desktop as the default location for new Finder windows\n# For other paths, use `PfLo` and `file:///full/path/here/`\n# defaults write com.apple.finder NewWindowTarget -string \"PfDe\"\n# defaults write com.apple.finder NewWindowTargetPath -string \"file://${HOME}/Desktop/\"\n\n# Show icons for hard drives, servers, and removable media on the desktop\n# defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true\n# defaults write com.apple.finder ShowHardDrivesOnDesktop -bool true\n# defaults write com.apple.finder ShowMountedServersOnDesktop -bool true\n# defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true\n\n# Finder: show hidden files by default\n#defaults write com.apple.finder AppleShowAllFiles -bool true\n\n# Finder: show all filename extensions\n# defaults write NSGlobalDomain AppleShowAllExtensions -bool true\n\n# Finder: show status bar\n# defaults write com.apple.finder ShowStatusBar -bool true\n\n# Finder: show path bar\ndefaults write com.apple.finder ShowPathbar -bool true\n\n# Display full POSIX path as Finder window title\n# defaults write com.apple.finder _FXShowPosixPathInTitle -bool true\n\n# Keep folders on top when sorting by name\ndefaults write com.apple.finder _FXSortFoldersFirst -bool true\n\n# When performing a search, search the current folder by default\ndefaults write com.apple.finder FXDefaultSearchScope -string \"SCcf\"\n\n# Disable the warning when changing a file extension\ndefaults write com.apple.finder FXEnableExtensionChangeWarning -bool false\n\n# Enable spring loading for directories\n# defaults write NSGlobalDomain com.apple.springing.enabled -bool true\n\n# Remove the spring loading delay for directories\n# defaults write NSGlobalDomain com.apple.springing.delay -float 0\n\n# Avoid creating .DS_Store files on network or USB volumes\ndefaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true\ndefaults write com.apple.desktopservices DSDontWriteUSBStores -bool true\n\n# Disable disk image verification\n# defaults write com.apple.frameworks.diskimages skip-verify -bool true\n# defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true\n# defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true\n\n# Automatically open a new Finder window when a volume is mounted\n# defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true\n# defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true\n# defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true\n\n# Show item info near icons on the desktop and in other icon views\n# /usr/libexec/PlistBuddy -c \"Set :DesktopViewSettings:IconViewSettings:showItemInfo true\" ~/Library/Preferences/com.apple.finder.plist\n# /usr/libexec/PlistBuddy -c \"Set :FK_StandardViewSettings:IconViewSettings:showItemInfo true\" ~/Library/Preferences/com.apple.finder.plist\n# /usr/libexec/PlistBuddy -c \"Set :StandardViewSettings:IconViewSettings:showItemInfo true\" ~/Library/Preferences/com.apple.finder.plist\n\n# Show item info to the right of the icons on the desktop\n# /usr/libexec/PlistBuddy -c \"Set DesktopViewSettings:IconViewSettings:labelOnBottom false\" ~/Library/Preferences/com.apple.finder.plist\n\n# Enable snap-to-grid for icons on the desktop and in other icon views\n/usr/libexec/PlistBuddy -c \"Set :DesktopViewSettings:IconViewSettings:arrangeBy grid\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :FK_StandardViewSettings:IconViewSettings:arrangeBy grid\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :StandardViewSettings:IconViewSettings:arrangeBy grid\" ~/Library/Preferences/com.apple.finder.plist\n\n# Increase grid spacing for icons on the desktop and in other icon views\n/usr/libexec/PlistBuddy -c \"Set :DesktopViewSettings:IconViewSettings:gridSpacing 100\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :FK_StandardViewSettings:IconViewSettings:gridSpacing 100\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :StandardViewSettings:IconViewSettings:gridSpacing 100\" ~/Library/Preferences/com.apple.finder.plist\n\n# Increase the size of icons on the desktop and in other icon views\n/usr/libexec/PlistBuddy -c \"Set :DesktopViewSettings:IconViewSettings:iconSize 80\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :FK_StandardViewSettings:IconViewSettings:iconSize 80\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :StandardViewSettings:IconViewSettings:iconSize 80\" ~/Library/Preferences/com.apple.finder.plist\n\n# Use list view in all Finder windows by default\n# Four-letter codes for the other view modes: `icnv`, `clmv`, `glyv`\ndefaults write com.apple.finder FXPreferredViewStyle -string \"Nlsv\"\n\n# Disable the warning before emptying the Trash\ndefaults write com.apple.finder WarnOnEmptyTrash -bool false\n\n# Enable AirDrop over Ethernet and on unsupported Macs running Lion\ndefaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true\n\n# Show the ~/Library folder\nchflags nohidden ~/Library && xattr -d com.apple.FinderInfo ~/Library\n\n# Show the /Volumes folder\n# sudo chflags nohidden /Volumes\n\n# Remove Dropbox’s green checkmark icons in Finder\n# file=/Applications/Dropbox.app/Contents/Resources/emblem-dropbox-uptodate.icns\n# [ -e \"${file}\" ] && mv -f \"${file}\" \"${file}.bak\"\n\n# Expand the following File Info panes:\n# “General”, “Open with”, and “Sharing & Permissions”\ndefaults write com.apple.finder FXInfoPanesExpanded -dict \\\n    General -bool true \\\n    OpenWith -bool true \\\n    Privileges -bool true\n\n###############################################################################\n# Dock, Dashboard, and hot corners                                            #\n###############################################################################\n\n# Enable highlight hover effect for the grid view of a stack (Dock)\ndefaults write com.apple.dock mouse-over-hilite-stack -bool true\n\n# Set the icon size of Dock items to 36 pixels\n# defaults write com.apple.dock tilesize -int 36\n\n# Change minimize/maximize window effect\ndefaults write com.apple.dock mineffect -string \"scale\"\n\n# Minimize windows into their application’s icon\ndefaults write com.apple.dock minimize-to-application -bool true\n\n# Enable spring loading for all Dock items\n# defaults write com.apple.dock enable-spring-load-actions-on-all-items -bool true\n\n# Show indicator lights for open applications in the Dock\n# defaults write com.apple.dock show-process-indicators -bool true\n\n# Wipe all (default) app icons from the Dock\n# This is only really useful when setting up a new Mac, or if you don’t use\n# the Dock to launch apps.\ndefaults write com.apple.dock persistent-apps -array\n\n# Show only open applications in the Dock\ndefaults write com.apple.dock static-only -bool true\n\n# Don’t animate opening applications from the Dock\ndefaults write com.apple.dock launchanim -bool false\n\n# Speed up Mission Control animations\n# defaults write com.apple.dock expose-animation-duration -float 0.1\n\n# Don’t group windows by application in Mission Control\n# (i.e. use the old Exposé behavior instead)\n# defaults write com.apple.dock expose-group-by-app -bool false\n\n# Disable Dashboard\ndefaults write com.apple.dashboard mcx-disabled -bool true\n\n# Don’t show Dashboard as a Space\ndefaults write com.apple.dock dashboard-in-overlay -bool true\n\n# Don’t automatically rearrange Spaces based on most recent use\ndefaults write com.apple.dock mru-spaces -bool false\n\n# Remove the auto-hiding Dock delay\ndefaults write com.apple.dock autohide-delay -float 0\n# Remove the animation when hiding/showing the Dock\ndefaults write com.apple.dock autohide-time-modifier -float 0\n\n# Automatically hide and show the Dock\ndefaults write com.apple.dock autohide -bool true\n\n# Make Dock icons of hidden applications translucent\ndefaults write com.apple.dock showhidden -bool true\n\n# Don’t show recent applications in Dock\ndefaults write com.apple.dock show-recents -bool false\n\n# Disable the Launchpad gesture (pinch with thumb and three fingers)\n#defaults write com.apple.dock showLaunchpadGestureEnabled -int 0\n\n# Reset Launchpad, but keep the desktop wallpaper intact\nfind \"${HOME}/Library/Application Support/Dock\" -name \"*-*.db\" -maxdepth 1 -delete\n\n# Add iOS & Watch Simulator to Launchpad\nsudo ln -sf \"/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app\" \"/Applications/Simulator.app\"\nsudo ln -sf \"/Applications/Xcode.app/Contents/Developer/Applications/Simulator (Watch).app\" \"/Applications/Simulator (Watch).app\"\n\n# Add a spacer to the left side of the Dock (where the applications are)\n#defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type=\"spacer-tile\";}'\n# Add a spacer to the right side of the Dock (where the Trash is)\n#defaults write com.apple.dock persistent-others -array-add '{tile-data={}; tile-type=\"spacer-tile\";}'\n\n# Hot corners\n# Possible values:\n#  0: no-op\n#  2: Mission Control\n#  3: Show application windows\n#  4: Desktop\n#  5: Start screen saver\n#  6: Disable screen saver\n#  7: Dashboard\n# 10: Put display to sleep\n# 11: Launchpad\n# 12: Notification Center\n# 13: Lock Screen\n# Top left screen corner → Mission Control\n# defaults write com.apple.dock wvous-tl-corner -int 2\n# defaults write com.apple.dock wvous-tl-modifier -int 0\n# Top right screen corner → Desktop\ndefaults write com.apple.dock wvous-tr-corner -int 10\ndefaults write com.apple.dock wvous-tr-modifier -int 0\n# Bottom left screen corner → Start screen saver\n# defaults write com.apple.dock wvous-bl-corner -int 5\n# defaults write com.apple.dock wvous-bl-modifier -int 0\n\n###############################################################################\n# Safari & WebKit                                                             #\n###############################################################################\n\n# Privacy: don’t send search queries to Apple\ndefaults write com.apple.Safari UniversalSearchEnabled -bool false\ndefaults write com.apple.Safari SuppressSearchSuggestions -bool true\n\n# Press Tab to highlight each item on a web page\n# defaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true\n# defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true\n\n# Show the full URL in the address bar (note: this still hides the scheme)\ndefaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true\n\n# Set Safari’s home page to `about:blank` for faster loading\n# defaults write com.apple.Safari HomePage -string \"about:blank\"\n\n# Prevent Safari from opening ‘safe’ files automatically after downloading\n# defaults write com.apple.Safari AutoOpenSafeDownloads -bool false\n\n# Allow hitting the Backspace key to go to the previous page in history\n# defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled -bool true\n\n# Hide Safari’s bookmarks bar by default\n# defaults write com.apple.Safari ShowFavoritesBar -bool false\n\n# Hide Safari’s sidebar in Top Sites\n# defaults write com.apple.Safari ShowSidebarInTopSites -bool false\n\n# Disable Safari’s thumbnail cache for History and Top Sites\n# defaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2\n\n# Enable Safari’s debug menu\n# defaults write com.apple.Safari IncludeInternalDebugMenu -bool true\n\n# Make Safari’s search banners default to Contains instead of Starts With\n# defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false\n\n# Remove useless icons from Safari’s bookmarks bar\n# defaults write com.apple.Safari ProxiesInBookmarksBar \"()\"\n\n# Enable the Develop menu and the Web Inspector in Safari\ndefaults write com.apple.Safari IncludeDevelopMenu -bool true\ndefaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true\ndefaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true\n\n# Add a context menu item for showing the Web Inspector in web views\n# defaults write NSGlobalDomain WebKitDeveloperExtras -bool true\n\n# Enable continuous spellchecking\n# defaults write com.apple.Safari WebContinuousSpellCheckingEnabled -bool true\n# Disable auto-correct\n# defaults write com.apple.Safari WebAutomaticSpellingCorrectionEnabled -bool false\n\n# Disable AutoFill\n# defaults write com.apple.Safari AutoFillFromAddressBook -bool false\n# defaults write com.apple.Safari AutoFillPasswords -bool false\n# defaults write com.apple.Safari AutoFillCreditCardData -bool false\n# defaults write com.apple.Safari AutoFillMiscellaneousForms -bool false\n\n# Warn about fraudulent websites\ndefaults write com.apple.Safari WarnAboutFraudulentWebsites -bool true\n\n# Disable plug-ins\n# defaults write com.apple.Safari WebKitPluginsEnabled -bool false\n# defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled -bool false\n\n# Disable Java\n# defaults write com.apple.Safari WebKitJavaEnabled -bool false\n# defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool false\n# defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabledForLocalFiles -bool false\n\n# Block pop-up windows\n# defaults write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool false\n# defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool false\n\n# Disable auto-playing video\n#defaults write com.apple.Safari WebKitMediaPlaybackAllowsInline -bool false\n#defaults write com.apple.SafariTechnologyPreview WebKitMediaPlaybackAllowsInline -bool false\n#defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback -bool false\n#defaults write com.apple.SafariTechnologyPreview com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback -bool false\n\n# Enable “Do Not Track”\n# defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool true\n\n# Update extensions automatically\ndefaults write com.apple.Safari InstallExtensionUpdatesAutomatically -bool true\n\n###############################################################################\n# Mail                                                                        #\n###############################################################################\n\n# Disable send and reply animations in Mail.app\ndefaults write com.apple.mail DisableReplyAnimations -bool true\ndefaults write com.apple.mail DisableSendAnimations -bool true\n\n# Copy email addresses as `foo@example.com` instead of `Foo Bar <foo@example.com>` in Mail.app\ndefaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false\n\n# Add the keyboard shortcut ⌘ + Enter to send an email in Mail.app\n# defaults write com.apple.mail NSUserKeyEquivalents -dict-add \"Send\" \"@\\U21a9\"\n\n# Display emails in threaded mode, sorted by date (oldest at the top)\n# defaults write com.apple.mail DraftsViewerAttributes -dict-add \"DisplayInThreadedMode\" -string \"yes\"\n# defaults write com.apple.mail DraftsViewerAttributes -dict-add \"SortedDescending\" -string \"yes\"\n# defaults write com.apple.mail DraftsViewerAttributes -dict-add \"SortOrder\" -string \"received-date\"\n\n# Disable inline attachments (just show the icons)\ndefaults write com.apple.mail DisableInlineAttachmentViewing -bool true\n\n# Disable automatic spell checking\ndefaults write com.apple.mail SpellCheckingBehavior -string \"NoSpellCheckingEnabled\"\n\n###############################################################################\n# Spotlight                                                                   #\n###############################################################################\n\n# Hide Spotlight tray-icon (and subsequent helper)\n#sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search\n# Disable Spotlight indexing for any volume that gets mounted and has not yet\n# been indexed before.\n# Use `sudo mdutil -i off \"/Volumes/foo\"` to stop indexing any volume.\n# sudo defaults write /.Spotlight-V100/VolumeConfiguration Exclusions -array \"/Volumes\"\n# Change indexing order and disable some search results\n# Yosemite-specific search results (remove them if you are using macOS 10.9 or older):\n#   MENU_DEFINITION\n#   MENU_CONVERSION\n#   MENU_EXPRESSION\n#   MENU_SPOTLIGHT_SUGGESTIONS (send search queries to Apple)\n#   MENU_WEBSEARCH             (send search queries to Apple)\n#   MENU_OTHER\n# defaults write com.apple.spotlight orderedItems -array \\\n#     '{\"enabled\" = 1;\"name\" = \"APPLICATIONS\";}' \\\n#     '{\"enabled\" = 1;\"name\" = \"SYSTEM_PREFS\";}' \\\n#     '{\"enabled\" = 1;\"name\" = \"DIRECTORIES\";}' \\\n#     '{\"enabled\" = 1;\"name\" = \"PDF\";}' \\\n#     '{\"enabled\" = 1;\"name\" = \"FONTS\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"DOCUMENTS\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"MESSAGES\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"CONTACT\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"EVENT_TODO\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"IMAGES\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"BOOKMARKS\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"MUSIC\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"MOVIES\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"PRESENTATIONS\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"SPREADSHEETS\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"SOURCE\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"MENU_DEFINITION\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"MENU_OTHER\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"MENU_CONVERSION\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"MENU_EXPRESSION\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"MENU_WEBSEARCH\";}' \\\n#     '{\"enabled\" = 0;\"name\" = \"MENU_SPOTLIGHT_SUGGESTIONS\";}'\n# Load new settings before rebuilding the index\n# killall mds > /dev/null 2>&1\n# Make sure indexing is enabled for the main volume\n# sudo mdutil -i on / > /dev/null\n# Rebuild the index from scratch\n# sudo mdutil -E / > /dev/null\n\n###############################################################################\n# Terminal & iTerm 2                                                          #\n###############################################################################\n\n# Only use UTF-8 in Terminal.app\ndefaults write com.apple.terminal StringEncodings -array 4\n\n# Use a modified version of the Solarized Dark theme by default in Terminal.app\n# osascript <<EOD\n\n# tell application \"Terminal\"\n\n#     local allOpenedWindows\n#     local initialOpenedWindows\n#     local windowID\n#     set themeName to \"Solarized Dark xterm-256color\"\n\n#     (* Store the IDs of all the open terminal windows. *)\n#     set initialOpenedWindows to id of every window\n\n#     (* Open the custom theme so that it gets added to the list\n#        of available terminal themes (note: this will open two\n#        additional terminal windows). *)\n#     do shell script \"open '$HOME/init/\" & themeName & \".terminal'\"\n\n#     (* Wait a little bit to ensure that the custom theme is added. *)\n#     delay 1\n\n#     (* Set the custom theme as the default terminal theme. *)\n#     set default settings to settings set themeName\n\n#     (* Get the IDs of all the currently opened terminal windows. *)\n#     set allOpenedWindows to id of every window\n\n#     repeat with windowID in allOpenedWindows\n\n#         (* Close the additional windows that were opened in order\n#            to add the custom theme to the list of terminal themes. *)\n#         if initialOpenedWindows does not contain windowID then\n#             close (every window whose id is windowID)\n\n#         (* Change the theme for the initial opened terminal windows\n#            to remove the need to close them in order for the custom\n#            theme to be applied. *)\n#         else\n#             set current settings of tabs of (every window whose id is windowID) to settings set themeName\n#         end if\n\n#     end repeat\n\n# end tell\n\n# EOD\n\n# Enable “focus follows mouse” for Terminal.app and all X11 apps\n# i.e. hover over a window and start typing in it without clicking first\n#defaults write com.apple.terminal FocusFollowsMouse -bool true\n#defaults write org.x.X11 wm_ffm -bool true\n\n# Enable Secure Keyboard Entry in Terminal.app\n# See: https://security.stackexchange.com/a/47786/8918\n# defaults write com.apple.terminal SecureKeyboardEntry -bool true\n\n# Disable the annoying line marks\n# defaults write com.apple.Terminal ShowLineMarks -int 0\n\n# Install the Solarized Dark theme for iTerm\n# open \"${HOME}/init/Solarized Dark.itermcolors\"\n\n# Don’t display the annoying prompt when quitting iTerm\ndefaults write com.googlecode.iterm2 PromptOnQuit -bool false\n\n###############################################################################\n# Time Machine                                                                #\n###############################################################################\n\n# Prevent Time Machine from prompting to use new hard drives as backup volume\ndefaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true\n\n# Disable local Time Machine backups\n# hash tmutil &> /dev/null && sudo tmutil disablelocal\n\n###############################################################################\n# Activity Monitor                                                            #\n###############################################################################\n\n# Show the main window when launching Activity Monitor\ndefaults write com.apple.ActivityMonitor OpenMainWindow -bool true\n\n# Visualize CPU usage in the Activity Monitor Dock icon\ndefaults write com.apple.ActivityMonitor IconType -int 5\n\n# Show all processes in Activity Monitor\ndefaults write com.apple.ActivityMonitor ShowCategory -int 0\n\n# Sort Activity Monitor results by CPU usage\ndefaults write com.apple.ActivityMonitor SortColumn -string \"CPUUsage\"\ndefaults write com.apple.ActivityMonitor SortDirection -int 0\n\n###############################################################################\n# Address Book, Dashboard, iCal, TextEdit, and Disk Utility                   #\n###############################################################################\n\n# Enable the debug menu in Address Book\n# defaults write com.apple.addressbook ABShowDebugMenu -bool true\n\n# Enable Dashboard dev mode (allows keeping widgets on the desktop)\n# defaults write com.apple.dashboard devmode -bool true\n\n# Enable the debug menu in iCal (pre-10.8)\n# defaults write com.apple.iCal IncludeDebugMenu -bool true\n\n# Use plain text mode for new TextEdit documents\n# defaults write com.apple.TextEdit RichText -int 0\n# Open and save files as UTF-8 in TextEdit\n# defaults write com.apple.TextEdit PlainTextEncoding -int 4\n# defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4\n\n# Enable the debug menu in Disk Utility\n# defaults write com.apple.DiskUtility DUDebugMenuEnabled -bool true\n# defaults write com.apple.DiskUtility advanced-image-options -bool true\n\n# Auto-play videos when opened with QuickTime Player\n# defaults write com.apple.QuickTimePlayerX MGPlayMovieOnOpen -bool true\n\n###############################################################################\n# Mac App Store                                                               #\n###############################################################################\n\n# Enable the WebKit Developer Tools in the Mac App Store\ndefaults write com.apple.appstore WebKitDeveloperExtras -bool true\n\n# Enable Debug Menu in the Mac App Store\n# defaults write com.apple.appstore ShowDebugMenu -bool true\n\n# Enable the automatic update check\ndefaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true\n\n# Check for software updates daily, not just once per week\ndefaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1\n\n# Download newly available updates in background\ndefaults write com.apple.SoftwareUpdate AutomaticDownload -int 1\n\n# Install System data files & security updates\ndefaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1\n\n# Automatically download apps purchased on other Macs\n# defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 1\n\n# Turn on app auto-update\ndefaults write com.apple.commerce AutoUpdate -bool true\n\n# Allow the App Store to reboot machine on macOS updates\n# defaults write com.apple.commerce AutoUpdateRestartRequired -bool true\n\n###############################################################################\n# Photos                                                                      #\n###############################################################################\n\n# Prevent Photos from opening automatically when devices are plugged in\ndefaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true\n\n###############################################################################\n# Messages                                                                    #\n###############################################################################\n\n# Disable automatic emoji substitution (i.e. use plain text smileys)\n# defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add \"automaticEmojiSubstitutionEnablediMessage\" -bool false\n\n# Disable smart quotes as it’s annoying for messages that contain code\n# defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add \"automaticQuoteSubstitutionEnabled\" -bool false\n\n# Disable continuous spell checking\n# defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add \"continuousSpellCheckingEnabled\" -bool false\n\n###############################################################################\n# Google Chrome & Google Chrome Canary                                        #\n###############################################################################\n\n# Disable the all too sensitive backswipe on trackpads\n# defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false\n# defaults write com.google.Chrome.canary AppleEnableSwipeNavigateWithScrolls -bool false\n\n# Disable the all too sensitive backswipe on Magic Mouse\n# defaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool false\n# defaults write com.google.Chrome.canary AppleEnableMouseSwipeNavigateWithScrolls -bool false\n\n# Use the system-native print preview dialog\n# defaults write com.google.Chrome DisablePrintPreview -bool true\n# defaults write com.google.Chrome.canary DisablePrintPreview -bool true\n\n# Expand the print dialog by default\ndefaults write com.google.Chrome PMPrintingExpandedStateForPrint2 -bool true\ndefaults write com.google.Chrome.canary PMPrintingExpandedStateForPrint2 -bool true\n\n###############################################################################\n# Opera & Opera Developer                                                     #\n###############################################################################\n\n# Expand the print dialog by default\n# defaults write com.operasoftware.Opera PMPrintingExpandedStateForPrint2 -boolean true\n# defaults write com.operasoftware.OperaDeveloper PMPrintingExpandedStateForPrint2 -boolean true\n\n###############################################################################\n# SizeUp.app                                                                  #\n###############################################################################\n\n# Start SizeUp at login\n# defaults write com.irradiatedsoftware.SizeUp StartAtLogin -bool true\n\n# Don’t show the preferences window on next start\n# defaults write com.irradiatedsoftware.SizeUp ShowPrefsOnNextStart -bool false\n\n###############################################################################\n# Sublime Text                                                                #\n###############################################################################\n\n# Install Sublime Text settings\n# cp -r init/Preferences.sublime-settings ~/Library/Application\\ Support/Sublime\\ Text*/Packages/User/Preferences.sublime-settings 2> /dev/null\n\n###############################################################################\n# Spectacle.app                                                               #\n###############################################################################\n\n# Set up my preferred keyboard shortcuts\n# cp -r init/spectacle.json ~/Library/Application\\ Support/Spectacle/Shortcuts.json 2> /dev/null\n\n###############################################################################\n# Transmission.app                                                            #\n###############################################################################\n\n# Use `~/Documents/Torrents` to store incomplete downloads\ndefaults write org.m0k.transmission UseIncompleteDownloadFolder -bool true\ndefaults write org.m0k.transmission IncompleteDownloadFolder -string \"${HOME}/Documents/Torrents\"\n\n# Use `~/Downloads` to store completed downloads\ndefaults write org.m0k.transmission DownloadLocationConstant -bool true\n\n# Don’t prompt for confirmation before downloading\ndefaults write org.m0k.transmission DownloadAsk -bool false\ndefaults write org.m0k.transmission MagnetOpenAsk -bool false\n\n# Don’t prompt for confirmation before removing non-downloading active transfers\ndefaults write org.m0k.transmission CheckRemoveDownloading -bool true\n\n# Trash original torrent files\ndefaults write org.m0k.transmission DeleteOriginalTorrent -bool true\n\n# Hide the donate message\ndefaults write org.m0k.transmission WarningDonate -bool false\n# Hide the legal disclaimer\ndefaults write org.m0k.transmission WarningLegal -bool false\n\n# IP block list.\n# Source: https://giuliomac.wordpress.com/2014/02/19/best-blocklist-for-transmission/\ndefaults write org.m0k.transmission BlocklistNew -bool true\ndefaults write org.m0k.transmission BlocklistURL -string \"http://john.bitsurge.net/public/biglist.p2p.gz\"\ndefaults write org.m0k.transmission BlocklistAutoUpdate -bool true\n\n# Randomize port on launch\ndefaults write org.m0k.transmission RandomPort -bool true\n\n###############################################################################\n# Twitter.app                                                                 #\n###############################################################################\n\n# Disable smart quotes as it’s annoying for code tweets\n# defaults write com.twitter.twitter-mac AutomaticQuoteSubstitutionEnabled -bool false\n\n# Show the app window when clicking the menu bar icon\ndefaults write com.twitter.twitter-mac MenuItemBehavior -int 1\n\n# Enable the hidden ‘Develop’ menu\ndefaults write com.twitter.twitter-mac ShowDevelopMenu -bool true\n\n# Open links in the background\ndefaults write com.twitter.twitter-mac openLinksInBackground -bool true\n\n# Allow closing the ‘new tweet’ window by pressing `Esc`\ndefaults write com.twitter.twitter-mac ESCClosesComposeWindow -bool true\n\n# Show full names rather than Twitter handles\ndefaults write com.twitter.twitter-mac ShowFullNames -bool true\n\n# Hide the app in the background if it’s not the front-most window\ndefaults write com.twitter.twitter-mac HideInBackground -bool true\n\n###############################################################################\n# Tweetbot.app                                                                #\n###############################################################################\n\n# Bypass the annoyingly slow t.co URL shortener\ndefaults write com.tapbots.TweetbotMac OpenURLsDirectly -bool true\n\n###############################################################################\n# Kill affected applications                                                  #\n###############################################################################\n\nfor app in \"Activity Monitor\" \\\n    \"Address Book\" \\\n    \"Calendar\" \\\n    \"cfprefsd\" \\\n    \"Contacts\" \\\n    \"Dock\" \\\n    \"Finder\" \\\n    \"Google Chrome Canary\" \\\n    \"Google Chrome\" \\\n    \"Mail\" \\\n    \"Messages\" \\\n    \"Opera\" \\\n    \"Photos\" \\\n    \"Safari\" \\\n    \"SizeUp\" \\\n    \"Spectacle\" \\\n    \"SystemUIServer\" \\\n    \"Terminal\" \\\n    \"Transmission\" \\\n    \"Tweetbot\" \\\n    \"Twitter\" \\\n    \"iCal\"; do\n    killall \"${app}\" &> /dev/null\ndone\necho \"Done. Note that some of these changes require a logout/restart to take effect.\"\n"
        },
        {
          "name": ".zshrc",
          "type": "blob",
          "size": 5.2001953125,
          "content": "# Path to your dotfiles.\nexport DOTFILES=$HOME/.dotfiles\n\n# If you come from bash you might have to change your $PATH.\n# export PATH=$HOME/bin:/usr/local/bin:$PATH\n\n# Path to your oh-my-zsh installation.\nexport ZSH=\"$HOME/.oh-my-zsh\"\n\n# Minimal - Theme Settings\nexport MNML_INSERT_CHAR=\"$\"\nexport MNML_PROMPT=(mnml_git mnml_keymap)\nexport MNML_RPROMPT=('mnml_cwd 20')\n\n# Set name of the theme to load --- if set to \"random\", it will\n# load a random theme each time oh-my-zsh is loaded, in which case,\n# to know which specific one was loaded, run: echo $RANDOM_THEME\n# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\nZSH_THEME=\"minimal\"\n\n# Set list of themes to pick from when loading at random\n# Setting this variable when ZSH_THEME=random will cause zsh to load\n# a theme from this variable instead of looking in $ZSH/themes/\n# If set to an empty array, this variable will have no effect.\n# ZSH_THEME_RANDOM_CANDIDATES=( \"robbyrussell\" \"agnoster\" )\n\n# Uncomment the following line to use case-sensitive completion.\n# CASE_SENSITIVE=\"true\"\n\n# Uncomment the following line to use hyphen-insensitive completion.\n# Case-sensitive completion must be off. _ and - will be interchangeable.\n# HYPHEN_INSENSITIVE=\"true\"\n\n# Uncomment one of the following lines to change the auto-update behavior\n# zstyle ':omz:update' mode disabled  # disable automatic updates\n# zstyle ':omz:update' mode auto      # update automatically without asking\n# zstyle ':omz:update' mode reminder  # just remind me to update when it's time\n\n# Uncomment the following line to change how often to auto-update (in days).\n# zstyle ':omz:update' frequency 13\n\n# Uncomment the following line if pasting URLs and other text is messed up.\n# DISABLE_MAGIC_FUNCTIONS=\"true\"\n\n# Uncomment the following line to disable colors in ls.\n# DISABLE_LS_COLORS=\"true\"\n\n# Uncomment the following line to disable auto-setting terminal title.\n# DISABLE_AUTO_TITLE=\"true\"\n\n# Uncomment the following line to enable command auto-correction.\n# ENABLE_CORRECTION=\"true\"\n\n# Uncomment the following line to display red dots whilst waiting for completion.\n# You can also set it to another string to have that shown instead of the default red dots.\n# e.g. COMPLETION_WAITING_DOTS=\"%F{yellow}waiting...%f\"\n# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)\n# COMPLETION_WAITING_DOTS=\"true\"\n\n# Uncomment the following line if you want to disable marking untracked files\n# under VCS as dirty. This makes repository status check for large repositories\n# much, much faster.\n# DISABLE_UNTRACKED_FILES_DIRTY=\"true\"\n\n# Uncomment the following line if you want to change the command execution time\n# stamp shown in the history command output.\n# You can set one of the optional three formats:\n# \"mm/dd/yyyy\"|\"dd.mm.yyyy\"|\"yyyy-mm-dd\"\n# or set a custom format using the strftime function format specifications,\n# see 'man strftime' for details.\nHIST_STAMPS=\"dd/mm/yyyy\"\n\n# Would you like to use another custom folder than $ZSH/custom?\nZSH_CUSTOM=$DOTFILES\n\n# Which plugins would you like to load?\n# Standard plugins can be found in $ZSH/plugins/\n# Custom plugins may be added to $ZSH_CUSTOM/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(artisan git)\n\nsource $ZSH/oh-my-zsh.sh\n\n# User configuration\n\n# export MANPATH=\"/usr/local/man:$MANPATH\"\n\n# You may need to manually set your language environment\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\n# Preferred editor for local and remote sessions\n# if [[ -n $SSH_CONNECTION ]]; then\n#   export EDITOR='vim'\n# else\n#   export EDITOR='mvim'\n# fi\n\n# Compilation flags\n# export ARCHFLAGS=\"-arch x86_64\"\n\n# Set personal aliases, overriding those provided by oh-my-zsh libs,\n# plugins, and themes. Aliases can be placed here, though oh-my-zsh\n# users are encouraged to define aliases within the ZSH_CUSTOM folder.\n# For a full list of active aliases, run `alias`.\n#\n# Example aliases\n# alias zshconfig=\"mate ~/.zshrc\"\n# alias ohmyzsh=\"mate ~/.oh-my-zsh\"\n\n# Herd injected PHP binary.\nexport PHP_INI_SCAN_DIR=\"$HOME/Library/Application Support/Herd/config/php/\":$PHP_INI_SCAN_DIR\n\n# Herd injected NVM configuration\nexport NVM_DIR=\"$HOME/Library/Application Support/Herd/config/nvm\"\n\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n\n[[ -f \"/Applications/Herd.app/Contents/Resources/config/shell/zshrc.zsh\" ]] && builtin source \"/Applications/Herd.app/Contents/Resources/config/shell/zshrc.zsh\"\n\n# Herd injected PHP 7.4 configuration.\nexport HERD_PHP_74_INI_SCAN_DIR=\"/Users/driesvints/Library/Application Support/Herd/config/php/74/\"\n\n# Herd injected PHP 8.3 configuration.\nexport HERD_PHP_83_INI_SCAN_DIR=\"/Users/driesvints/Library/Application Support/Herd/config/php/83/\"\n\n# Herd injected PHP 8.2 configuration.\nexport HERD_PHP_82_INI_SCAN_DIR=\"/Users/driesvints/Library/Application Support/Herd/config/php/82/\"\n\n# Herd injected PHP 8.1 configuration.\nexport HERD_PHP_81_INI_SCAN_DIR=\"/Users/driesvints/Library/Application Support/Herd/config/php/81/\"\n\n# Herd injected PHP 8.0 configuration.\nexport HERD_PHP_80_INI_SCAN_DIR=\"/Users/driesvints/Library/Application Support/Herd/config/php/80/\"\n\n# Herd injected PHP binary.\nexport PATH=\"/Users/driesvints/Library/Application Support/Herd/bin/\":$PATH\n"
        },
        {
          "name": "Brewfile",
          "type": "blob",
          "size": 1.626953125,
          "content": "# Taps\ntap 'homebrew/cask-fonts'\ntap 'homebrew/cask-versions'\ntap 'homebrew/bundle'\ntap 'stripe/stripe-cli'\n\n# Binaries\nbrew 'awscli'\nbrew 'bash' # Latest Bash version\nbrew 'bat' # Used for spatie/visit\nbrew 'coreutils' # Those that come with macOS are outdated\nbrew 'ffmpeg'\nbrew 'gh'\nbrew 'git'\nbrew 'grep'\nbrew 'httpie'\nbrew 'jq' # Used for spatie/visit\nbrew 'mackup'\nbrew 'mas' # Mac App Store manager\nbrew 'pkg-config' # https://github.com/driesvints/dotfiles/issues/20\nbrew 'stripe/stripe-cli/stripe'\nbrew 'stripe/stripe-mock/stripe-mock'\nbrew 'svn' # Needed to install fonts\n\n# Spatie Medialibrary\nbrew 'jpegoptim'\nbrew 'optipng'\nbrew 'pngquant'\nbrew 'svgo'\nbrew 'gifsicle'\n\n# Development\nbrew 'imagemagick'\nbrew 'yarn'\n\n# Apps\ncask '1password'\nbrew '1password-cli'\ncask 'caffeine'\ncask 'discord'\ncask 'docker'\ncask 'figma'\ncask 'firefox'\ncask 'github'\ncask 'google-chrome'\ncask 'helo'\ncask 'herd'\ncask 'httpie'\ncask 'imageoptim'\ncask 'loom'\ncask 'pastebot'\ncask 'screenflow'\ncask 'slack'\ncask 'tableplus'\ncask 'telegram-desktop'\ncask 'the-unarchiver'\ncask 'tinkerwell'\ncask 'transmit'\ncask 'tunnelbear'\ncask 'tuple'\ncask 'visual-studio-code'\ncask 'zoom'\n\n# Quicklook\ncask 'qlmarkdown'\ncask 'quicklook-json'\n\n# Fonts\ncask 'font-lato'\ncask 'font-open-sans'\ncask 'font-roboto'\ncask 'font-source-code-pro-for-powerline'\ncask 'font-source-code-pro'\ncask 'font-source-sans-pro'\ncask 'font-source-serif-pro'\n\n# Mac App Store\nmas 'Byword', id: 420212497\nmas 'Giphy Capture', id: 668208984\nmas 'Keynote', id: 409183694\nmas 'MyWoosh', id: 1498889644\nmas 'Numbers', id: 409203825\nmas 'Speedtest', id: 1153157709\nmas 'Spring', id: 1508706541\nmas 'Things', id: 904280696\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0478515625,
          "content": "The MIT License (MIT)\n\nCopyright (c) Dries Vints\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.4033203125,
          "content": "<p align=\"center\"><img src=\"art/banner-2x.png\"></p>\n\n## Introduction\n\nThis repository serves as my way to help me setup and maintain my Mac. It takes the effort out of installing everything manually. Everything needed to install my preferred setup of macOS is detailed in this readme. Feel free to explore, learn and copy parts for your own dotfiles. Enjoy!\n\n📖 - [Read the blog post](https://driesvints.com/blog/getting-started-with-dotfiles)  \n📺 - [Watch the screencast on Laracasts](https://laracasts.com/series/guest-spotlight/episodes/1)  \n💡 - [Learn how to build your own dotfiles](https://github.com/driesvints/dotfiles#your-own-dotfiles)\n\nIf you find this repo useful, [consider sponsoring me](https://github.com/sponsors/driesvints) (a little bit)! ❤️ \n\n## A Fresh macOS Setup\n\nThese instructions are for setting up new Mac devices. Instead, if you want to get started building your own dotfiles, you can [find those instructions below](#your-own-dotfiles).\n\n### Backup your data\n\nIf you're migrating from an existing Mac, you should first make sure to backup all of your existing data. Go through the checklist below to make sure you didn't forget anything before you migrate.\n\n- Did you commit and push any changes/branches to your git repositories?\n- Did you remember to save all important documents from non-iCloud directories?\n- Did you save all of your work from apps which aren't synced through iCloud?\n- Did you remember to export important data from your local database?\n- Did you update [mackup](https://github.com/lra/mackup) to the latest version and ran `mackup backup`?\n\n### Setting up your Mac\n\nAfter backing up your old Mac you may now follow these install instructions to setup a new one.\n\n1. Update macOS to the latest version through system preferences\n2. Setup an SSH key by using one of the two following methods  \n   2.1. If you use 1Password, install it with the 1Password [SSH agent](https://developer.1password.com/docs/ssh/get-started/#step-3-turn-on-the-1password-ssh-agent) and sync your SSH keys locally.  \n   2.2. Otherwise [generate a new public and private SSH key](https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) by running:\n\n   ```zsh\n   curl https://raw.githubusercontent.com/driesvints/dotfiles/HEAD/ssh.sh | sh -s \"<your-email-address>\"\n   ```\n\n3. Clone this repo to `~/.dotfiles` with:\n\n    ```zsh\n    git clone --recursive git@github.com:driesvints/dotfiles.git ~/.dotfiles\n    ```\n\n4. Run the installation with:\n\n    ```zsh\n    cd ~/.dotfiles && ./fresh.sh\n    ```\n\n5. Start `Herd.app` and run its install process\n6. After mackup is synced with your cloud storage, restore preferences by running `mackup restore`\n7. Restart your computer to finalize the process\n\nYour Mac is now ready to use!\n\n> 💡 You can use a different location than `~/.dotfiles` if you want. Make sure you also update the references in the [`.zshrc`](./.zshrc#L2) and [`fresh.sh`](./fresh.sh#L20) files.\n\n### Cleaning your old Mac (optionally)\n\nAfter you've set up your new Mac you may want to wipe and clean install your old Mac. Follow [this article](https://support.apple.com/guide/mac-help/erase-and-reinstall-macos-mh27903/mac) to do that. Remember to [backup your data](#backup-your-data) first!\n\n## Your Own Dotfiles\n\n**Please note that the instructions below assume you already have set up Oh My Zsh so make sure to first [install Oh My Zsh](https://github.com/robbyrussell/oh-my-zsh#getting-started) before you continue.**\n\nIf you want to start with your own dotfiles from this setup, it's pretty easy to do so. First of all you'll need to fork this repo. After that you can tweak it the way you want.\n\nGo through the [`.macos`](./.macos) file and adjust the settings to your liking. You can find much more settings at [the original script by Mathias Bynens](https://github.com/mathiasbynens/dotfiles/blob/master/.macos) and [Kevin Suttle's macOS Defaults project](https://github.com/kevinSuttle/MacOS-Defaults).\n\nCheck out the [`Brewfile`](./Brewfile) file and adjust the apps you want to install for your machine. Use [their search page](https://formulae.brew.sh/cask/) to check if the app you want to install is available.\n\nCheck out the [`aliases.zsh`](./aliases.zsh) file and add your own aliases. If you need to tweak your `$PATH` check out the [`path.zsh`](./path.zsh) file. These files get loaded in because the `$ZSH_CUSTOM` setting points to the `.dotfiles` directory. You can adjust the [`.zshrc`](./.zshrc) file to your liking to tweak your Oh My Zsh setup. More info about how to customize Oh My Zsh can be found [here](https://github.com/robbyrussell/oh-my-zsh/wiki/Customization).\n\nWhen installing these dotfiles for the first time you'll need to backup all of your settings with Mackup. Install Mackup and backup your settings with the commands below. Your settings will be synced to iCloud so you can use them to sync between computers and reinstall them when reinstalling your Mac. If you want to save your settings to a different directory or different storage than iCloud, [checkout the documentation](https://github.com/lra/mackup/blob/master/doc/README.md#storage). Also make sure your `.zshrc` file is symlinked from your dotfiles repo to your home directory. \n\n```zsh\nbrew install mackup\nmackup backup\n```\n\nYou can tweak the shell theme, the Oh My Zsh settings and much more. Go through the files in this repo and tweak everything to your liking.\n\nEnjoy your own Dotfiles!\n\n## Thanks To...\n\nI first got the idea for starting this project by visiting the [GitHub does dotfiles](https://dotfiles.github.io/) project. Both [Zach Holman](https://github.com/holman/dotfiles) and [Mathias Bynens](https://github.com/mathiasbynens/dotfiles) were great sources of inspiration. [Sourabh Bajaj](https://twitter.com/sb2nov/)'s [Mac OS X Setup Guide](http://sourabhbajaj.com/mac-setup/) proved to be invaluable. Thanks to [@subnixr](https://github.com/subnixr) for [his awesome Zsh theme](https://github.com/subnixr/minimal)! Thanks to [Caneco](https://twitter.com/caneco) for the header in this readme. And lastly, I'd like to thank [Emma Fabre](https://twitter.com/anahkiasen) for [her excellent presentation on Homebrew](https://speakerdeck.com/anahkiasen/a-storm-homebrewin) which made me migrate a lot to a [`Brewfile`](./Brewfile) and [Mackup](https://github.com/lra/mackup).\n\nIn general, I'd like to thank every single one who open-sources their dotfiles for their effort to contribute something to the open-source community.\n"
        },
        {
          "name": "aliases.zsh",
          "type": "blob",
          "size": 1.7216796875,
          "content": "# Shortcuts\nalias copyssh=\"pbcopy < $HOME/.ssh/id_ed25519.pub\"\nalias reloadshell=\"omz reload\"\nalias reloaddns=\"dscacheutil -flushcache && sudo killall -HUP mDNSResponder\"\nalias ll=\"/opt/homebrew/opt/coreutils/libexec/gnubin/ls -AhlFo --color --group-directories-first\"\nalias phpstorm='open -a /Applications/PhpStorm.app \"`pwd`\"'\nalias shrug=\"echo '¯\\_(ツ)_/¯' | pbcopy\"\nalias compile=\"commit 'compile'\"\nalias version=\"commit 'version'\"\n\n# Directories\nalias dotfiles=\"cd $DOTFILES\"\nalias library=\"cd $HOME/Library\"\nalias projects=\"cd $HOME/Code\"\nalias sites=\"cd $HOME/Herd\"\n\n# Laravel\nalias a=\"herd php artisan\"\nalias fresh=\"herd php artisan migrate:fresh --seed\"\nalias tinker=\"herd php artisan tinker\"\nalias seed=\"herd php artisan db:seed\"\nalias serve=\"herd php artisan serve\"\n\n# PHP\nalias cfresh=\"rm -rf vendor/ composer.lock && composer i\"\nalias composer=\"herd composer\"\nalias php=\"herd php\"\n\n# JS\nalias nfresh=\"rm -rf node_modules/ package-lock.json && npm install\"\nalias watch=\"npm run dev\"\n\n# Docker\nalias docker-composer=\"docker-compose\"\n\n# SQL Server\nalias mssql=\"docker run -e ACCEPT_EULA=Y -e SA_PASSWORD=LaravelWow1986! -p 1433:1433 mcr.microsoft.com/mssql/server:2017-latest\"\n\n# Git\nalias gs=\"git status\"\nalias gb=\"git branch\"\nalias gc=\"git checkout\"\nalias gl=\"git log --oneline --decorate --color\"\nalias amend=\"git add . && git commit --amend --no-edit\"\nalias commit=\"git add . && git commit -m\"\nalias diff=\"git diff\"\nalias force=\"git push --force-with-lease\"\nalias nuke=\"git clean -df && git reset --hard\"\nalias pop=\"git stash pop\"\nalias prune=\"git fetch --prune\"\nalias pull=\"git pull\"\nalias push=\"git push\"\nalias resolve=\"git add . && git commit --no-edit\"\nalias stash=\"git stash -u\"\nalias unstage=\"git restore --staged .\"\nalias wip=\"commit wip\"\n"
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "clone.sh",
          "type": "blob",
          "size": 5.1474609375,
          "content": "#!/bin/sh\n\necho \"Cloning repositories...\"\n\nCODE=$HOME/Code\nSITES=$HOME/Herd\nBLADE=$CODE/blade-ui-kit\nLARAVEL=$CODE/laravel\n\n# Sites\ngit clone git@github.com:blade-ui-kit/blade-ui-kit.com.git $SITES/blade-ui-kit.com\ngit clone git@github.com:laravel/blog.laravel.com.git $SITES/blog.laravel.com\ngit clone git@github.com:blade-ui-kit/demo.git $SITES/demo.blade-ui-kit.com\ngit clone git@github.com:driesvints/driesvints.com.git $SITES/driesvints.com\ngit clone git@github.com:laravel/envoyer.git $SITES/envoyer\ngit clone git@github.com:eventyio/eventy.io.git $SITES/eventy.io\ngit clone git@github.com:laravel/forge.git $SITES/forge\ngit clone git@github.com:fullstackeurope/fullstackeurope.com.git $SITES/fullstackeurope.com\ngit clone git@github.com:laravel/laravel.com.git $SITES/laravel.com\ngit clone git@github.com:laravelio/laravel.io.git $SITES/laravel.io\ngit clone git@github.com:laravelio/paste.laravel.io.git $SITES/paste.laravel.io\ngit clone git@github.com:laravel/nova.laravel.com.git $SITES/nova\ngit clone git@github.com:laravel/spark.laravel.com.git $SITES/spark.laravel.com\ngit clone git@github.com:laravel/vapor.git $SITES/vapor\n\n# Personal\ngit clone git@github.com:lmsqueezy/laravel.git $CODE/lmsqueezy-laravel\ngit clone git@github.com:driesvints/vat-calculator.git $CODE/vat-calculator\n\n# Blade UI Kit\ngit clone git@github.com:blade-ui-kit/blade-docs.git $BLADE/blade-docs\ngit clone git@github.com:blade-ui-kit/blade-heroicons.git $BLADE/blade-heroicons\ngit clone git@github.com:blade-ui-kit/blade-icons.git $BLADE/blade-icons\ngit clone git@github.com:blade-ui-kit/blade-ui-kit.git $BLADE/blade-ui-kit\ngit clone git@github.com:blade-ui-kit/docs.git $BLADE/docs\n\n# Laravel\ngit clone git@github.com:laravel/beep.git $LARAVEL/beep\ngit clone git@github.com:laravel/breeze.git $LARAVEL/breeze\ngit clone git@github.com:laravel/breeze-next.git $LARAVEL/breeze-next\ngit clone git@github.com:laravel/browser-kit-testing.git $LARAVEL/browser-kit-testing\ngit clone git@github.com:laravel/cashier-stripe.git $LARAVEL/cashier-stripe\ngit clone git@github.com:laravel/cashier-paddle.git $LARAVEL/cashier-paddle\ngit clone git@github.com:laravel/docs.git $LARAVEL/docs\ngit clone git@github.com:laravel/dusk.git $LARAVEL/dusk\ngit clone git@github.com:laravel/echo.git $LARAVEL/echo\ngit clone git@github.com:laravel/envoy.git $LARAVEL/envoy\ngit clone git@github.com:laravel/folio.git $LARAVEL/folio\ngit clone git@github.com:laravel/forge-cli.git $LARAVEL/forge-cli\ngit clone git@github.com:laravel/forge-sdk.git $LARAVEL/forge-sdk\ngit clone git@github.com:laravel/fortify.git $LARAVEL/fortify\ngit clone git@github.com:laravel/framework.git $LARAVEL/framework\ngit clone git@github.com:laravel/helpers.git $LARAVEL/helpers\ngit clone git@github.com:laravel/horizon.git $LARAVEL/horizon\ngit clone git@github.com:laravel/installer.git $LARAVEL/installer\ngit clone git@github.com:laravel/jetstream.git $LARAVEL/jetstream\ngit clone git@github.com:laravel/jetstream-docs.git $LARAVEL/jetstream-docs\ngit clone git@github.com:laravel/laravel.git $LARAVEL/laravel\ngit clone git@github.com:laravel/legacy-factories.git $LARAVEL/legacy-factories\ngit clone git@github.com:laravel/lumen.git $LARAVEL/lumen\ngit clone git@github.com:laravel/lumen-framework.git $LARAVEL/lumen-framework\ngit clone git@github.com:laravel/nova.git $LARAVEL/nova\ngit clone git@github.com:laravel/octane.git $LARAVEL/octane\ngit clone git@github.com:laravel/package-template.git $LARAVEL/package-template\ngit clone git@github.com:laravel/pail.git $LARAVEL/pail\ngit clone git@github.com:laravel/passport.git $LARAVEL/passport\ngit clone git@github.com:laravel/pennant.git $LARAVEL/pennant\ngit clone git@github.com:laravel/pint.git $LARAVEL/pint\ngit clone git@github.com:laravel/precognition.git $LARAVEL/precognition\ngit clone git@github.com:laravel/prompts.git $LARAVEL/prompts\ngit clone git@github.com:laravel/pulse.git $LARAVEL/pulse\ngit clone git@github.com:laravel/sail.git $LARAVEL/sail\ngit clone git@github.com:laravel/sail-server.git $LARAVEL/sail-server\ngit clone git@github.com:laravel/sanctum.git $LARAVEL/sanctum\ngit clone git@github.com:laravel/scout.git $LARAVEL/scout\ngit clone git@github.com:laravel/serializable-closure.git $LARAVEL/serializable-closure\ngit clone git@github.com:laravel/slack-notification-channel.git $LARAVEL/slack-notification-channel\ngit clone git@github.com:laravel/socialite.git $LARAVEL/socialite\ngit clone git@github.com:laravel/spark-next-docs.git $LARAVEL/spark-next-docs\ngit clone git@github.com:laravel/spark-paddle.git $LARAVEL/spark-paddle\ngit clone git@github.com:laravel/spark-stripe.git $LARAVEL/spark-stripe\ngit clone git@github.com:laravel/telescope.git $LARAVEL/telescope\ngit clone git@github.com:laravel/tinker.git $LARAVEL/tinker\ngit clone git@github.com:laravel/ui.git $LARAVEL/ui\ngit clone git@github.com:laravel/valet.git $LARAVEL/valet\ngit clone git@github.com:laravel/vapor-cli.git $LARAVEL/vapor-cli\ngit clone git@github.com:laravel/vapor-core.git $LARAVEL/vapor-core\ngit clone git@github.com:laravel/vapor-ui.git $LARAVEL/vapor-ui\ngit clone git@github.com:laravel/vite-plugin.git $LARAVEL/vite-plugin\ngit clone git@github.com:livewire/volt.git $LARAVEL/volt\ngit clone git@github.com:laravel/vonage-notification-channel.git $LARAVEL/vonage-notification-channel\n"
        },
        {
          "name": "fresh.sh",
          "type": "blob",
          "size": 1.35546875,
          "content": "#!/bin/sh\n\necho \"Setting up your Mac...\"\n\n# Check for Oh My Zsh and install if we don't have it\nif test ! $(which omz); then\n  /bin/sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/HEAD/tools/install.sh)\"\nfi\n\n# Check for Homebrew and install if we don't have it\nif test ! $(which brew); then\n  /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n  echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> $HOME/.zprofile\n  eval \"$(/opt/homebrew/bin/brew shellenv)\"\nfi\n\n# Removes .zshrc from $HOME (if it exists) and symlinks the .zshrc file from the .dotfiles\nrm -rf $HOME/.zshrc\nln -sw $HOME/.dotfiles/.zshrc $HOME/.zshrc\n\n# Update Homebrew recipes\nbrew update\n\n# Install all our dependencies with bundle (See Brewfile)\nbrew tap homebrew/bundle\nbrew bundle --file ./Brewfile\n\n# Set default MySQL root password and auth type\nmysql -u root -e \"ALTER USER root@localhost IDENTIFIED WITH mysql_native_password BY 'password'; FLUSH PRIVILEGES;\"\n\n# Create a projects directories\nmkdir $HOME/Code\nmkdir $HOME/Herd\n\n# Create Code subdirectories\nmkdir $HOME/Code/blade-ui-kit\nmkdir $HOME/Code/laravel\n\n# Clone Github repositories\n./clone.sh\n\n# Symlink the Mackup config file to the home directory\nln -s ./.mackup.cfg $HOME/.mackup.cfg\n\n# Set macOS preferences - we will run this last because this will reload the shell\nsource ./.macos\n"
        },
        {
          "name": "minimal.zsh-theme",
          "type": "blob",
          "size": 7.2861328125,
          "content": "# Global settings\nMNML_OK_COLOR=\"${MNML_OK_COLOR:-2}\"\nMNML_ERR_COLOR=\"${MNML_ERR_COLOR:-1}\"\n\nMNML_USER_CHAR=\"${MNML_USER_CHAR:-λ}\"\nMNML_INSERT_CHAR=\"${MNML_INSERT_CHAR:-›}\"\nMNML_NORMAL_CHAR=\"${MNML_NORMAL_CHAR:-·}\"\nMNML_ELLIPSIS_CHAR=\"${MNML_ELLIPSIS_CHAR:-..}\"\nMNML_BGJOB_MODE=${MNML_BGJOB_MODE:-4}\n\n[ \"${+MNML_PROMPT}\" -eq 0 ] && MNML_PROMPT=(mnml_ssh mnml_pyenv mnml_status mnml_keymap)\n[ \"${+MNML_RPROMPT}\" -eq 0 ] && MNML_RPROMPT=('mnml_cwd 2 0' mnml_git)\n[ \"${+MNML_INFOLN}\" -eq 0 ] && MNML_INFOLN=(mnml_err mnml_jobs mnml_uhp mnml_files)\n\n[ \"${+MNML_MAGICENTER}\" -eq 0 ] && MNML_MAGICENTER=(mnml_me_dirs mnml_me_ls mnml_me_git)\n\n# Components\nfunction mnml_status {\n    local okc=\"$MNML_OK_COLOR\"\n    local errc=\"$MNML_ERR_COLOR\"\n    local uchar=\"$MNML_USER_CHAR\"\n\n    local job_ansi=\"0\"\n    if [ -n \"$(jobs | sed -n '$=')\" ]; then\n        job_ansi=\"$MNML_BGJOB_MODE\"\n    fi\n\n    local err_ansi=\"$MNML_OK_COLOR\"\n    if [ \"$MNML_LAST_ERR\" != \"0\" ]; then\n        err_ansi=\"$MNML_ERR_COLOR\"\n    fi\n\n    printf '%b' \"%{\\e[$job_ansi;3${err_ansi}m%}%(!.#.$uchar)%{\\e[0m%}\"\n}\n\nfunction mnml_keymap {\n    local kmstat=\"$MNML_INSERT_CHAR\"\n    [ \"$KEYMAP\" = 'vicmd' ] && kmstat=\"$MNML_NORMAL_CHAR\"\n    printf '%b' \"$kmstat\"\n}\n\nfunction mnml_cwd {\n    local echar=\"$MNML_ELLIPSIS_CHAR\"\n    local segments=\"${1:-2}\"\n    local seg_len=\"${2:-0}\"\n\n    local _w=\"%{\\e[0m%}\"\n    local _g=\"%{\\e[38;5;244m%}\"\n\n    if [ \"$segments\" -le 0 ]; then\n        segments=0\n    fi\n    if [ \"$seg_len\" -gt 0 ] && [ \"$seg_len\" -lt 4 ]; then\n        seg_len=4\n    fi\n    local seg_hlen=$((seg_len / 2 - 1))\n\n    local cwd=\"%${segments}~\"\n    cwd=\"${(%)cwd}\"\n    cwd=(\"${(@s:/:)cwd}\")\n\n    local pi=\"\"\n    for i in {1..${#cwd}}; do\n        pi=\"$cwd[$i]\"\n        if [ \"$seg_len\" -gt 0 ] && [ \"${#pi}\" -gt \"$seg_len\" ]; then\n            cwd[$i]=\"${pi:0:$seg_hlen}$_w$echar$_g${pi: -$seg_hlen}\"\n        fi\n    done\n\n    printf '%b' \"$_g${(j:/:)cwd//\\//$_w/$_g}$_w\"\n}\n\nfunction mnml_git {\n    local statc=\"%{\\e[0;3${MNML_OK_COLOR}m%}\" # assume clean\n    local bname=\"$(git rev-parse --abbrev-ref HEAD 2> /dev/null)\"\n\n    if [ -n \"$bname\" ]; then\n        if [ -n \"$(git status --porcelain 2> /dev/null)\" ]; then\n            statc=\"%{\\e[0;3${MNML_ERR_COLOR}m%}\"\n        fi\n        printf '%b' \"$statc$bname%{\\e[0m%}\"\n    fi\n}\n\nfunction mnml_hg {\n    local statc=\"%{\\e[0;3${MNML_OK_COLOR}m%}\" # assume clean\n    local bname=\"$(hg branch 2> /dev/null)\"\n    if [ -n \"$bname\" ]; then\n        if [ -n \"$(hg status 2> /dev/null)\" ]; then\n            statc=\"%{\\e[0;3${MNML_ERR_COLOR}m%}\"\n        fi\n        printf '%b' \"$statc$bname%{\\e[0m%}\"\n    fi\n}\n\nfunction mnml_hg_no_color {\n    # Assume branch name is clean\n    local statc=\"%{\\e[0;3${MNML_OK_COLOR}m%}\"\n    local bname=\"\"\n    # Defines path as current directory\n    local current_dir=$PWD\n    # While current path is not root path\n    while [[ $current_dir != '/' ]]\n    do\n        if [[ -d \"${current_dir}/.hg\" ]]\n        then\n            if [[ -f \"$current_dir/.hg/branch\" ]]\n            then\n                bname=$(<\"$current_dir/.hg/branch\")\n            else\n                bname=\"default\"\n            fi\n            printf '%b' \"$statc$bname%{\\e[0m%}\"\n            return;\n        fi\n        # Defines path as parent directory and keeps looking for :)\n        current_dir=\"${current_dir:h}\"\n   done\n}\n\nfunction mnml_uhp {\n    local _w=\"%{\\e[0m%}\"\n    local _g=\"%{\\e[38;5;244m%}\"\n    local cwd=\"%~\"\n    cwd=\"${(%)cwd}\"\n\n    printf '%b' \"$_g%n$_w@$_g%m$_w:$_g${cwd//\\//$_w/$_g}$_w\"\n}\n\nfunction mnml_ssh {\n    if [ -n \"$SSH_CLIENT\" ] || [ -n \"$SSH_TTY\" ]; then\n        printf '%b' \"$(hostname -s)\"\n    fi\n}\n\nfunction mnml_pyenv {\n    if [ -n \"$VIRTUAL_ENV\" ]; then\n        _venv=\"$(basename $VIRTUAL_ENV)\"\n        printf '%b' \"${_venv%%.*}\"\n    fi\n}\n\nfunction mnml_err {\n    local _w=\"%{\\e[0m%}\"\n    local _err=\"%{\\e[3${MNML_ERR_COLOR}m%}\"\n\n    if [ \"${MNML_LAST_ERR:-0}\" != \"0\" ]; then\n        printf '%b' \"$_err$MNML_LAST_ERR$_w\"\n    fi\n}\n\nfunction mnml_jobs {\n    local _w=\"%{\\e[0m%}\"\n    local _g=\"%{\\e[38;5;244m%}\"\n\n    local job_n=\"$(jobs | sed -n '$=')\"\n    if [ \"$job_n\" -gt 0 ]; then\n        printf '%b' \"$_g$job_n$_w&\"\n    fi\n}\n\nfunction mnml_files {\n    local _ls=\"$(env which ls)\"\n    local _w=\"%{\\e[0m%}\"\n    local _g=\"%{\\e[38;5;244m%}\"\n\n    local a_files=\"$($_ls -1A | sed -n '$=')\"\n    local v_files=\"$($_ls -1 | sed -n '$=')\"\n    local h_files=\"$((a_files - v_files))\"\n\n    local output=\"${_w}[$_g${v_files:-0}\"\n    if [ \"${h_files:-0}\" -gt 0 ]; then\n        output=\"$output $_w($_g$h_files$_w)\"\n    fi\n    output=\"$output${_w}]\"\n\n    printf '%b' \"$output\"\n}\n\n# Magic enter functions\nfunction mnml_me_dirs {\n    local _w=\"\\e[0m\"\n    local _g=\"\\e[38;5;244m\"\n\n    if [ \"$(dirs -p | sed -n '$=')\" -gt 1 ]; then\n        local stack=\"$(dirs)\"\n        echo \"$_g${stack//\\//$_w/$_g}$_w\"\n    fi\n}\n\nfunction mnml_me_ls {\n    if [ \"$(uname)\" = \"Darwin\" ] && ! ls --version &> /dev/null; then\n        COLUMNS=$COLUMNS CLICOLOR_FORCE=1 ls -C -G -F\n    else\n        env ls -C -F --color=\"always\" -w $COLUMNS\n    fi\n}\n\nfunction mnml_me_git {\n    git -c color.status=always status -sb 2> /dev/null\n}\n\n# Wrappers & utils\n# join outpus of components\nfunction _mnml_wrap {\n    local -a arr\n    arr=()\n    local cmd_out=\"\"\n    local cmd\n    for cmd in ${(P)1}; do\n        cmd_out=\"$(eval \"$cmd\")\"\n        if [ -n \"$cmd_out\" ]; then\n            arr+=\"$cmd_out\"\n        fi\n    done\n\n    printf '%b' \"${(j: :)arr}\"\n}\n\n# expand string as prompt would do\nfunction _mnml_iline {\n    echo \"${(%)1}\"\n}\n\n# display magic enter\nfunction _mnml_me {\n    local -a output\n    output=()\n    local cmd_out=\"\"\n    local cmd\n    for cmd in $MNML_MAGICENTER; do\n        cmd_out=\"$(eval \"$cmd\")\"\n        if [ -n \"$cmd_out\" ]; then\n            output+=\"$cmd_out\"\n        fi\n    done\n    printf '%b' \"${(j:\\n:)output}\" | less -XFR\n}\n\n# capture exit status and reset prompt\nfunction _mnml_zle-line-init {\n    MNML_LAST_ERR=\"$?\" # I need to capture this ASAP\n    zle reset-prompt\n}\n\n# redraw prompt on keymap select\nfunction _mnml_zle-keymap-select {\n    zle reset-prompt\n}\n\n# draw infoline if no command is given\nfunction _mnml_buffer-empty {\n    if [ -z \"$BUFFER\" ]; then\n        _mnml_iline \"$(_mnml_wrap MNML_INFOLN)\"\n        _mnml_me\n        zle redisplay\n    else\n        zle accept-line\n    fi\n}\n\n# properly bind widgets\n# see: https://github.com/zsh-users/zsh-syntax-highlighting/blob/1f1e629290773bd6f9673f364303219d6da11129/zsh-syntax-highlighting.zsh#L292-L356\nfunction _mnml_bind_widgets() {\n    zmodload zsh/zleparameter\n\n    local -a to_bind\n    to_bind=(zle-line-init zle-keymap-select buffer-empty)\n\n    typeset -F SECONDS\n    local zle_wprefix=s$SECONDS-r$RANDOM\n\n    local cur_widget\n    for cur_widget in $to_bind; do\n        case \"${widgets[$cur_widget]:-\"\"}\" in\n            user:_mnml_*);;\n            user:*)\n                zle -N $zle_wprefix-$cur_widget ${widgets[$cur_widget]#*:}\n                eval \"_mnml_ww_${(q)zle_wprefix}-${(q)cur_widget}() { _mnml_${(q)cur_widget}; zle ${(q)zle_wprefix}-${(q)cur_widget} }\"\n                zle -N $cur_widget _mnml_ww_$zle_wprefix-$cur_widget\n                ;;\n            *)\n                zle -N $cur_widget _mnml_$cur_widget\n                ;;\n        esac\n    done\n}\n\n# Setup\nautoload -U colors && colors\nsetopt prompt_subst\n\nPROMPT='$(_mnml_wrap MNML_PROMPT) '\nRPROMPT='$(_mnml_wrap MNML_RPROMPT)'\n\n_mnml_bind_widgets\n\nbindkey -M main  \"^M\" buffer-empty\nbindkey -M vicmd \"^M\" buffer-empty\n"
        },
        {
          "name": "path.zsh",
          "type": "blob",
          "size": 0.4990234375,
          "content": "# Add directories to the PATH and prevent to add the same directory multiple times upon shell reload.\nadd_to_path() {\n  if [[ -d \"$1\" ]] && [[ \":$PATH:\" != *\":$1:\"* ]]; then\n    export PATH=\"$1:$PATH\"\n  fi\n}\n\n# Load dotfiles binaries\nadd_to_path \"$DOTFILES/bin\"\n\n# Load global Composer tools\nadd_to_path \"$HOME/.composer/vendor/bin\"\n\n# Load global Node installed binaries\nadd_to_path \"$HOME/.node/bin\"\n\n# Use project specific binaries before global ones\nadd_to_path \"vendor/bin\"\nadd_to_path \"node_modules/.bin\"\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "ssh.sh",
          "type": "blob",
          "size": 0.8515625,
          "content": "#!/bin/sh\n\necho \"Generating a new SSH key for GitHub...\"\n\n# Generating a new SSH key\n# https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key\nssh-keygen -t ed25519 -C $1 -f ~/.ssh/id_ed25519\n\n# Adding your SSH key to the ssh-agent\n# https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#adding-your-ssh-key-to-the-ssh-agent\neval \"$(ssh-agent -s)\"\n\ntouch ~/.ssh/config\necho \"Host *\\n AddKeysToAgent yes\\n UseKeychain yes\\n IdentityFile ~/.ssh/id_ed25519\" | tee ~/.ssh/config\n\nssh-add -K ~/.ssh/id_ed25519\n\n# Adding your SSH key to your GitHub account\n# https://docs.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account\necho \"run 'pbcopy < ~/.ssh/id_ed25519.pub' and paste that into GitHub\"\n"
        }
      ]
    }
  ]
}