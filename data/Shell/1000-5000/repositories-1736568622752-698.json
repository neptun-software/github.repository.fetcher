{
  "metadata": {
    "timestamp": 1736568622752,
    "page": 698,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jawj/IKEv2-setup",
      "stars": 1367,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.236328125,
          "content": "# IKEv2-setup\n\n## Table of contents\n\n  * [What?](#what)\n    + [VPN server](#vpn-server)\n    + [VPN clients](#vpn-clients)\n    + [Caveats](#caveats)\n  * [How?](#how)\n    + [Troubleshooting](#troubleshooting)\n    + [Users](#users)\n    + [Upgrades](#upgrades)\n    + [Bonus paranoia](#bonus-paranoia)\n  * [Why?](#why)\n    + [Why IKEv2?](#why-ikev2)\n    + [Why not Algo?](#why-not-algo)\n\n## What?\n\nA Bash script that takes Ubuntu Server LTS versions 18.04 - 24.04 from clean install to fully-configured IKEv2 VPN using strongSwan. Comments and pull requests welcome.\n\n### VPN server\n\n* The VPN server identifies itself with a _Let's Encrypt_ certificate, so there's no need for clients to install private certificates — they can simply authenticate with a username and strong password (EAP-MSCHAPv2).\n\n* The preferred cipher set is the US [Commercial National Security Algorithm Suite (CNSA)](https://docs.strongswan.org/docs/5.9/config/IKEv2CipherSuites.html#_commercial_national_security_algorithm_suite): `aes256gcm16-prfsha384-ecp384`. However, due to an apparent bug in recent versions of macOS, `aes256gcm16-prfsha256-ecp256` is also accepted.\n\n* The box is firewalled with `iptables` and configured for unattended security upgrades, and the _Let's Encrypt_ certificate is set up to auto-renew, so it _could_ be safe to forget about it all until your chosen Ubuntu version reaches end-of-life. (Note that `iptables` setup includes [basic rate-limiting](https://debian-administration.org/article/187/Using_iptables_to_rate-limit_incoming_connections), dropping new connections if there have been 60+ connection attempts in the last 5 minutes).\n\n### VPN clients\n\nThe VPN is tested working with:\n\n*  **macOS 10.12 – 14, iOS 10 – 17**  — Built-in clients. A `.mobileconfig` profile is generated for iOS, to set up secure ciphers and enable *Connect on demand* support. An AppleScript script is generated for Mac, to prompt for VPN credentials and then do the same.\n* **Windows 10 Pro, 11 Pro** — Built-in client. PowerShell commands are generated to configure the VPN and secure ciphers.\n* **Ubuntu (17.04 and presumably others)** — Using strongSwan. A Bash script is generated to set this up.\n* **Android** — Using the official strongSwan app. A `.sswan` file is generated for configuration.\n\nConfiguration files, scripts and instructions are sent by email. They are also dropped in the newly-created non-root user's home directory on the server (this point may be important, because VPS providers sometimes block traffic on port 25 by default and, even if successfully sent, conscientious email hosts will sometimes mark the email as spam).\n\n### Caveats\n\n* There's no IPv6 support — and, in fact, IPv6 networking is disabled — because supporting IPv6 prevents the use of `forceencaps`, and honestly also because I haven't got to grips with the security implications (`ip6tables` rules and so on).\n* The script **won't** work as-is on 16.04 LTS or earlier (where the `certbot` package is outdated, found under the name `letsencrypt`, and doesn't renew certificates automatically).\n* **Don't use this unmodified on a server you use for anything else**: it does as it sees fit with various wider settings that may conflict with what you're doing.\n\n\n## How?\n\n1. Pick a domain name for the VPN server and **ensure that it already resolves to the correct IP** by creating the appropriate `A` record in the DNS and making sure it has propagated. _Let's Encrypt_ needs this in order to create your server certificate.\n\n  _Don't want to use your own domain name here? You could try using the reverse DNS name provided by your server host, or an automatic IP/DNS alias service such as [sslip.io](https://sslip.io/), [xip.io](http://xip.io), [nip.io](https://nip.io), [s.test.cab](https://s.test.cab), or [xip.lhjmmc.cn](https://xip.lhjmmc.cn/) (earlier versions of this script used an [sslip.io](https://sslip.io/) address by default). However, these options may fall foul of Let's Encrypt's per-domain rate limit of [50 certificates per week](https://letsencrypt.org/docs/rate-limits/). Note that ephemeral AWS domain names like `ec2-34-267-212-76.compute-1.amazonaws.com` [are not accepted by Let's Encrypt](https://community.letsencrypt.org/t/policy-forbids-issuing-for-name-on-amazon-ec2-domain/12692)._\n\n2. Start with a clean Ubuntu Server installation. The cheapest VPSs offered by Linode, OVH, vps.ag, Google, AWS Lightsail, Hetzner, Vultr, Scaleway's ARM64-2GB, and Oracle's VM.Standard.E2.1.Micro (AMD) have all been tested working. \n\n    * On Scaleway, unblock SMTP ports in the admin panel and *hard* reboot the server first, or your configuration email will not be delivered.\n    * On Vultr, port 25 may also be blocked, but you won't know, and the only way to fix it is to open a support ticket.\n    * On Oracle you'll need to enable network ingress for TCP on port 80 (for Let's Encrypt) and on any custom SSH port you choose, and for UDP on ports 500 and 4500 (for the VPN) in the interface for the relevant VNIC. Egress on port 25 is always blocked unlesss you file a ticket to open it.\n\n3. Optionally, set up [key-based SSH authentication](https://help.ubuntu.com/community/SSH/OpenSSH/Keys) (alternatively, this may have been handled automatically by your server provider, or you may choose to stick with password-based authentication). This may require you to run some or all of the following commands, with appropriate substitutions, on the machine you're going to be logging in from:\n\n       ssh-keygen -t ed25519 -C \"me@my-domain.tld\"      # if you need a new key, ed25519 is the latest and possibly most secure option\n       ssh-keygen -t rsa -b 4096 -C \"me@my-domain.tld\"  # alternatively, use RSA and go (4,096 bits) large\n\n       ssh root@myvpn.example.net  # if your host forces a password change before anything else (e.g. Hetzner), do it now, then exit\n       ssh-copy-id -i ~/.ssh/id_ed25519.pub root@myvpn.example.net  # copy your public key over to the VPN server\n       ssh root@myvpn.example.net  # log back in to the server for the next step ...\n\n4. On your new server installation, become `root`, download the script, give it execute permissions, and run it:\n\n       wget https://raw.githubusercontent.com/jawj/IKEv2-setup/master/setup.sh\n       chmod u+x setup.sh\n       ./setup.sh\n    \n5. You'll be prompted to enter all the necessary details after the software updates and installations complete. If you are not using key-based SSH authentication, **you *must* pick a really strong password** for the login user when prompted, or your server *will* be compromised. \n\n    The part of your session where the script asks you questions should look something like this:\n    \n        --- Configuration: VPN settings ---\n\n        Network interface: eth0\n        External IP: 100.100.100.100\n\n        ** Note: hostname must resolve to this machine already, to enable Let's Encrypt certificate setup **\n        Hostname for VPN: \n        VPN username: george\n        VPN password (no quotes, please): \n        Confirm VPN password: \n\n        Public DNS servers include:\n\n        176.103.130.130,176.103.130.131  AdGuard               https://adguard.com/en/adguard-dns/overview.html\n        176.103.130.132,176.103.130.134  AdGuard Family        https://adguard.com/en/adguard-dns/overview.html\n        1.1.1.1,1.0.0.1                  Cloudflare/APNIC      https://1.1.1.1\n        84.200.69.80,84.200.70.40        DNS.WATCH             https://dns.watch\n        8.8.8.8,8.8.4.4                  Google                https://developers.google.com/speed/public-dns/\n        208.67.222.222,208.67.220.220    OpenDNS               https://www.opendns.com\n        208.67.222.123,208.67.220.123    OpenDNS FamilyShield  https://www.opendns.com\n        9.9.9.9,149.112.112.112          Quad9                 https://quad9.net\n        77.88.8.8,77.88.8.1              Yandex                https://dns.yandex.com\n        77.88.8.88,77.88.8.2             Yandex Safe           https://dns.yandex.com\n        77.88.8.7,77.88.8.3              Yandex Family         https://dns.yandex.com\n        \n        DNS servers for VPN users (default: 1.1.1.1,1.0.0.1): 176.103.130.130,176.103.130.131\n\n        --- Configuration: general server settings ---\n\n        Timezone (default: Europe/London): \n        Email address for sysadmin (e.g. j.bloggs@example.com): me@my-domain.tld\n        Desired SSH log-in port (default: 22): 2222\n        New SSH log-in user name: george\n        Copy /root/.ssh/authorized_keys to new user and disable SSH password log-in [Y/n]? y\n        New SSH user's password (e.g. for sudo): \n        Confirm new SSH user's password: \n\n6. Once you're up and running, use these commands for some insight into what's going on:\n\n        sudo ipsec statusall           # status, who's connected, etc.\n        sudo iptables -L -v            # how much traffic has been forwarded, dropped, etc.?\n        sudo tail -f /var/log/syslog   # real-time logs of (dis)connections etc.\n\n### Troubleshooting\n\nIf you ran this script before 13 September 2021, and used the generated PowerShell commands to set up Windows 10 clients, those clients may be unable to connect owing to a bug in Windows 10. If this is the case, see [issue #126](https://github.com/jawj/IKEv2-setup/issues/126).\n\nOtherwise, if things don't work out right away ...\n\n* On the client: make sure you created the connection using the newly emailed `.mobileconfig` file, AppleScript or PowerShell commands. Setting it up manually via the OS GUI will _not_ work, since it will default to insecure ciphers which the server has not been configured to support. Also note that `.mobileconfig` files generated with earlier iterations of this script may no longer be compatible, since the configured ciphers have changed from time to time.\n\n* On the server: check that network ingress for UDP on ports 500 and 4500 is enabled (on some cloud platforms you'll have to add appropriate firewall rules to your virtual network). Also check that packet forwarding is enabled (on some cloud platforms this is controlled by a configuration setting that's off by default).\n\n* Check the server logs on strongSwan startup and when you try to connect, and the client logs when you try to connect. \n\n  * __On the server:__  Log in via SSH, then `sudo tail -f /var/log/syslog`. To see startup logs, log in to another session and `sudo ipsec restart` there, then switch back. To see what's logged during a connection attempt, try to connect from a client. \n  \n  * __On the client:__  On a Mac, open Console.app in /Applications/Utilities. If connecting from an iPhone, plug the iPhone into the Mac. Pick the relevant device (in the bar down the left), filter the output (in the box at top right) to `nesession`, and try to connect. (On Windows or Linux I don't know where you find the logs — if _you_ know, feel free to write the explanation and send a pull request).\n  \n* The setup script is now more or less idempotent — you should be able to run it repeatedly with no ill effects — so, when you've fixed any issues, simply run it again.\n\n* If you have a tricky question about strongSwan, it's probably better to [raise it with the strongSwan team](https://strongswan.org/support.html) than file an issue here.\n  \n### Users\n\nTo add or change VPN users, it's:\n\n      sudo nano /etc/ipsec.secrets\n    \nEdit usernames and passwords as you see fit (but don't touch the first line, which specifies the server certificate). The line format for each user is:\n\n      someusername : EAP \"somepassword\"\n\nTo exit nano it's `Ctrl + O` then `Ctrl + X`, and to have strongSwan pick up the changes it's:\n\n      sudo ipsec secrets\n\n### Upgrades\n\nIf you're on an older version of Ubuntu, it's probably easiest to make a record of any changes to `ipsec.secrets`, blow the whole thing away and reinstall, then reinstate `ipsec.secrets`.\n\nNote that you may also need to delete and recreate all your client connection settings using the updated PowerShell commands or .mobileconfig file, since there have been a few cipher changes over time. \n\n### Bonus paranoia\n\nYour traffic is not logged on the server, but if you're feeling especially paranoid there are various things you could do to reduce logging further. A simple and somewhat drastic option (once you've got everything working) is:\n\n      sudo rm /var/log/syslog && sudo ln -s /dev/null /var/log/syslog\n      sudo rm /var/log/auth.log && sudo ln -s /dev/null /var/log/auth.log\n\n## Why?\n\nWe use a similar setup as a corporate VPN at [PSYT](http://psyt.co.uk). And I use this to bounce my personal web browsing via Europe, in the hope of giving Theresa May's [Investigatory Powers Bill](https://www.openrightsgroup.org/blog/2015/investigatory-powers-bill-published-and-now-the-fight-is-on) the finger.\n\n### Why IKEv2?\n\n* Fair security\n* Built-in clients for latest iOS, Mac and Windows (+ trustworthy free install on Android)\n* *Connect on demand* support on iOS and Mac\n* Robust to connection switching and interruptions via MOBIKE\n\nMore on IKEv2 at https://www.cl.cam.ac.uk/~mas90/resources/strongswan/ and https://www.bestvpn.com/blog/4147/pptp-vs-l2tp-vs-openvpn-vs-sstp-vs-ikev2/\n\n### Why not Algo?\n\nFeel free to use [Algo](https://github.com/trailofbits/algo) instead. It has similar aims, and now configures [WireGuard](https://www.wireguard.com/) too. However, it has many more moving parts, and requires several local installation steps before you even start setting up your VPN. This script is intended to be much simpler.\n"
        },
        {
          "name": "setup.sh",
          "type": "blob",
          "size": 24.919921875,
          "content": "#!/bin/bash -e\n\n# github.com/jawj/IKEv2-setup\n# Copyright (c) 2015 – 2024 George MacKerron\n# Released under the MIT licence: http://opensource.org/licenses/mit-license\n\necho\necho \"=== https://github.com/jawj/IKEv2-setup ===\"\necho\n\n\nfunction exit_badly {\n  echo \"$1\"\n  exit 1\n}\n\nUBUNTUVERSION=$(lsb_release -rs)\n[[ \"${UBUNTUVERSION}\" == \"18.04\" ]] \\\n  || [[ \"${UBUNTUVERSION}\" == \"20.04\" ]] \\\n  || [[ \"${UBUNTUVERSION}\" == \"22.04\" ]] \\\n  || [[ \"${UBUNTUVERSION}\" == \"24.04\" ]] \\\n  || exit_badly \"This script is for Ubuntu 18.04/20.04/22.04/24.04 only: aborting (if you know what you're doing, try deleting this check)\"\n\n[[ $(id -u) -eq 0 ]] || exit_badly \"Please run this script as root (e.g. sudo ./path/to/this/script)\"\n\n\necho \"--- Adding repositories and installing utilities ---\"\necho\n\nexport DEBIAN_FRONTEND=noninteractive\n\n# see https://github.com/jawj/IKEv2-setup/issues/66 and https://bugs.launchpad.net/subiquity/+bug/1783129\n# note: software-properties-common is required for add-apt-repository\napt-get -o Acquire::ForceIPv4=true update\napt-get -o Acquire::ForceIPv4=true install -y software-properties-common\nadd-apt-repository -y universe\nadd-apt-repository -y restricted\nadd-apt-repository -y multiverse\n\napt-get -o Acquire::ForceIPv4=true install -y moreutils dnsutils\n\n\necho\necho \"--- Configuration: VPN settings ---\"\necho\n\nETH0ORSIMILAR=$(ip route get 1.1.1.1 | grep -oP ' dev \\K\\S+')\nIP=$(dig -4 +short myip.opendns.com @resolver1.opendns.com)\n\necho \"Network interface: ${ETH0ORSIMILAR}\"\necho \"External IP: ${IP}\"\necho\necho \"** Note: this hostname must already resolve to this machine, to enable Let's Encrypt certificate setup **\"\nread -r -p \"Hostname for VPN: \" VPNHOST\n\nVPNHOSTIP=$(dig -4 +short \"${VPNHOST}\")\n[[ -n \"$VPNHOSTIP\" ]] || exit_badly \"Cannot resolve VPN hostname: aborting\"\n\nif [[ \"${IP}\" != \"${VPNHOSTIP}\" ]]; then\n  echo \"Warning: ${VPNHOST} resolves to ${VPNHOSTIP}, not ${IP}\"\n  echo \"Either you're behind NAT, or something is wrong (e.g. hostname points to wrong IP, CloudFlare proxying shenanigans, ...)\"\n  read -r -p \"Press [Return] to continue anyway, or Ctrl-C to abort\"\nfi\n\nread -r -p \"VPN username: \" VPNUSERNAME\nwhile true; do\n  read -r -s -p \"VPN password (no quotes, please): \" VPNPASSWORD\n  echo\n  read -r -s -p \"Confirm VPN password: \" VPNPASSWORD2\n  echo\n  [[ \"${VPNPASSWORD}\" = \"${VPNPASSWORD2}\" ]] && break\n  echo \"Passwords didn't match -- please try again\"\ndone\n\necho '\nPublic DNS servers include:\n\n176.103.130.130,176.103.130.131  AdGuard               https://adguard.com/en/adguard-dns/overview.html\n176.103.130.132,176.103.130.134  AdGuard Family        https://adguard.com/en/adguard-dns/overview.html\n1.1.1.1,1.0.0.1                  Cloudflare/APNIC      https://1.1.1.1\n84.200.69.80,84.200.70.40        DNS.WATCH             https://dns.watch\n8.8.8.8,8.8.4.4                  Google                https://developers.google.com/speed/public-dns/\n208.67.222.222,208.67.220.220    OpenDNS               https://www.opendns.com\n208.67.222.123,208.67.220.123    OpenDNS FamilyShield  https://www.opendns.com\n9.9.9.9,149.112.112.112          Quad9                 https://quad9.net\n77.88.8.8,77.88.8.1              Yandex                https://dns.yandex.com\n77.88.8.88,77.88.8.2             Yandex Safe           https://dns.yandex.com\n77.88.8.7,77.88.8.3              Yandex Family         https://dns.yandex.com\n'\n\nread -r -p \"DNS servers for VPN users (default: 1.1.1.1,1.0.0.1): \" VPNDNS\nVPNDNS=${VPNDNS:-'1.1.1.1,1.0.0.1'}\n\n\necho\necho \"--- Configuration: general server settings ---\"\necho\n\nread -r -p \"Timezone (default: Europe/London): \" TZONE\nTZONE=${TZONE:-'Europe/London'}\n\nread -r -p \"Email address for sysadmin (e.g. j.bloggs@example.com): \" EMAILADDR\n\nread -r -p \"Desired SSH log-in port (default: 22): \" SSHPORT\nSSHPORT=${SSHPORT:-22}\n\nread -r -p \"New SSH log-in user name: \" LOGINUSERNAME\n\nCERTLOGIN=\"n\"\nif [[ -s /root/.ssh/authorized_keys ]]; then\n  while true; do\n    read -r -p \"Copy /root/.ssh/authorized_keys to new user and disable SSH password log-in [Y/n]? \" CERTLOGIN\n    [[ ${CERTLOGIN,,} =~ ^(y(es)?)?$ ]] && CERTLOGIN=y\n    [[ ${CERTLOGIN,,} =~ ^no?$ ]] && CERTLOGIN=n\n    [[ $CERTLOGIN =~ ^(y|n)$ ]] && break\n  done\nfi\n\nwhile true; do\n  [[ ${CERTLOGIN} = \"y\" ]] && read -r -s -p \"New SSH user's password (e.g. for sudo): \" LOGINPASSWORD\n  [[ ${CERTLOGIN} != \"y\" ]] && read -r -s -p \"New SSH user's log-in password (must be REALLY STRONG): \" LOGINPASSWORD\n  echo\n  read -r -s -p \"Confirm new SSH user's password: \" LOGINPASSWORD2\n  echo\n  [[ \"${LOGINPASSWORD}\" = \"${LOGINPASSWORD2}\" ]] && break\n  echo \"Passwords didn't match -- please try again\"\ndone\n\nVPNIPPOOL=\"10.101.0.0/16\"\n\n\necho\necho \"--- Upgrading and installing packages ---\"\necho\n\napt-get -o Acquire::ForceIPv4=true --with-new-pkgs upgrade -y\napt autoremove -y\n\ndebconf-set-selections <<< \"postfix postfix/mailname string ${VPNHOST}\"\ndebconf-set-selections <<< \"postfix postfix/main_mailer_type string 'Internet Site'\"\n\napt-get -o Acquire::ForceIPv4=true install -y \\\n  language-pack-en iptables-persistent postfix mutt unattended-upgrades certbot uuid-runtime \\\n  strongswan libstrongswan-standard-plugins strongswan-libcharon libcharon-extra-plugins\n\n# in 22.04 libcharon-standard-plugins is replaced with libcharon-extauth-plugins\napt-get -o Acquire::ForceIPv4=true install -y libcharon-standard-plugins \\\n  || apt-get -o Acquire::ForceIPv4=true install -y libcharon-extauth-plugins\n\necho\necho \"--- Configuring firewall ---\"\necho\n\n# firewall\n# https://www.strongswan.org/docs/LinuxKongress2009-strongswan.pdf\n# https://wiki.strongswan.org/projects/strongswan/wiki/ForwardingAndSplitTunneling\n# https://www.zeitgeist.se/2013/11/26/mtu-woes-in-ipsec-tunnels-how-to-fix/\n\niptables -P INPUT   ACCEPT\niptables -P FORWARD ACCEPT\niptables -P OUTPUT  ACCEPT\n\niptables -F\niptables -t nat -F\niptables -t mangle -F\n\n# INPUT\n\n# accept anything already accepted\niptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n\n# accept anything on the loopback interface\niptables -A INPUT -i lo -j ACCEPT\n\n# drop invalid packets\niptables -A INPUT -m state --state INVALID -j DROP\n\n# rate-limit repeated new requests from same IP to any ports\niptables -I INPUT -i \"${ETH0ORSIMILAR}\" -m state --state NEW -m recent --set\niptables -I INPUT -i \"${ETH0ORSIMILAR}\" -m state --state NEW -m recent --update --seconds 300 --hitcount 60 -j DROP\n\n# accept (non-standard) SSH\niptables -A INPUT -p tcp --dport \"${SSHPORT}\" -j ACCEPT\n\n\n# VPN\n\n# accept IPSec/NAT-T for VPN (ESP not needed with forceencaps, as ESP goes inside UDP)\niptables -A INPUT -p udp --dport  500 -j ACCEPT\niptables -A INPUT -p udp --dport 4500 -j ACCEPT\n\n# forward VPN traffic anywhere\niptables -A FORWARD --match policy --pol ipsec --dir in  --proto esp -s \"${VPNIPPOOL}\" -j ACCEPT\niptables -A FORWARD --match policy --pol ipsec --dir out --proto esp -d \"${VPNIPPOOL}\" -j ACCEPT\n\n# reduce MTU/MSS values for dumb VPN clients\niptables -t mangle -A FORWARD --match policy --pol ipsec --dir in -s \"${VPNIPPOOL}\" -o \"${ETH0ORSIMILAR}\" -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1361:1536 -j TCPMSS --set-mss 1360\n\n# masquerade VPN traffic over eth0 etc.\niptables -t nat -A POSTROUTING -s \"${VPNIPPOOL}\" -o \"${ETH0ORSIMILAR}\" -m policy --pol ipsec --dir out -j ACCEPT  # exempt IPsec traffic from masquerading\niptables -t nat -A POSTROUTING -s \"${VPNIPPOOL}\" -o \"${ETH0ORSIMILAR}\" -j MASQUERADE\n\n\n# fall through to drop any other input and forward traffic\n\niptables -A INPUT   -j DROP\niptables -A FORWARD -j DROP\n\niptables -L\n\nnetfilter-persistent save\n\n\necho\necho \"--- Configuring RSA certificates ---\"\necho\n\nmkdir -p /etc/letsencrypt\n\n# note: currently we stick to RSA because iOS/macOS may have trouble with ECDSA\n# (see https://github.com/jawj/IKEv2-setup/issues/159) \n\necho \"\nstandalone = true\nagree-tos = true\nnon-interactive = true\npreferred-challenges = http\nrsa-key-size = 4096\nemail = ${EMAILADDR}\npre-hook = /sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT\npost-hook = /sbin/iptables -D INPUT -p tcp --dport 80 -j ACCEPT\nrenew-hook = /usr/sbin/ipsec reload && /usr/sbin/ipsec secrets\n\" > /etc/letsencrypt/cli.ini\n\n# certbot on older Ubuntu doesn't recognise the --key-type switch, so try without if it errors with\ncertbot certonly --key-type rsa -d \"${VPNHOST}\" || certbot certonly -d \"${VPNHOST}\"\n\n\nln -f -s \"/etc/letsencrypt/live/${VPNHOST}/cert.pem\"    /etc/ipsec.d/certs/cert.pem\nln -f -s \"/etc/letsencrypt/live/${VPNHOST}/privkey.pem\" /etc/ipsec.d/private/privkey.pem\nln -f -s \"/etc/letsencrypt/live/${VPNHOST}/chain.pem\"   /etc/ipsec.d/cacerts/chain.pem\n\ngrep -Fq 'jawj/IKEv2-setup' /etc/apparmor.d/local/usr.lib.ipsec.charon || echo \"\n# https://github.com/jawj/IKEv2-setup\n/etc/letsencrypt/archive/${VPNHOST}/* r,\n\" >> /etc/apparmor.d/local/usr.lib.ipsec.charon\n\naa-status --enabled && invoke-rc.d apparmor reload\n\n\necho\necho \"--- Configuring VPN ---\"\necho\n\n# ip_forward is for VPN\n# ip_no_pmtu_disc is for UDP fragmentation\n# others are for security\n\ngrep -Fq 'jawj/IKEv2-setup' /etc/sysctl.conf || echo \"\n# https://github.com/jawj/IKEv2-setup\nnet.ipv4.ip_forward = 1\nnet.ipv4.ip_no_pmtu_disc = 1\nnet.ipv4.conf.all.rp_filter = 1\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv6.conf.all.disable_ipv6 = 1\nnet.ipv6.conf.default.disable_ipv6 = 1\nnet.ipv6.conf.lo.disable_ipv6 = 1\nnet.ipv6.conf.${ETH0ORSIMILAR}.disable_ipv6 = 1\n\" >> /etc/sysctl.conf\n\nsysctl -p\n\n\necho \"config setup\n  strictcrlpolicy=yes\n  uniqueids=never\n\nconn roadwarrior\n  auto=add\n  compress=no\n  type=tunnel\n  keyexchange=ikev2\n  fragmentation=yes\n  forceencaps=yes\n\n  # https://docs.strongswan.org/docs/5.9/config/IKEv2CipherSuites.html#_commercial_national_security_algorithm_suite\n  # ... but we also allow aes256gcm16-prfsha256-ecp256, because that's sometimes just what macOS proposes\n  ike=aes256gcm16-prfsha384-ecp384,aes256gcm16-prfsha256-ecp256!\n  esp=aes256gcm16-ecp384!\n\n  dpdaction=clear\n  dpddelay=900s\n  rekey=no\n  left=%any\n  leftid=@${VPNHOST}\n  leftcert=cert.pem\n  leftsendcert=always\n  leftsubnet=0.0.0.0/0\n  right=%any\n  rightid=%any\n  rightauth=eap-mschapv2\n  eap_identity=%any\n  rightdns=${VPNDNS}\n  rightsourceip=${VPNIPPOOL}\n  rightsendcert=never\n\" > /etc/ipsec.conf\n\necho \"${VPNHOST} : RSA \\\"privkey.pem\\\"\n${VPNUSERNAME} : EAP \\\"${VPNPASSWORD}\\\"\n\" > /etc/ipsec.secrets\n\nipsec restart\n\n\necho\necho \"--- User ---\"\necho\n\n# user + SSH\n\nid -u \"${LOGINUSERNAME}\" &>/dev/null || adduser --disabled-password --gecos \"\" \"${LOGINUSERNAME}\"\necho \"${LOGINUSERNAME}:${LOGINPASSWORD}\" | chpasswd\nadduser \"${LOGINUSERNAME}\" sudo\n\nsed -r \\\n-e \"s/^#?Port 22$/Port ${SSHPORT}/\" \\\n-e 's/^#?LoginGraceTime (120|2m)$/LoginGraceTime 30/' \\\n-e 's/^#?PermitRootLogin yes$/PermitRootLogin no/' \\\n-e 's/^#?X11Forwarding yes$/X11Forwarding no/' \\\n-e 's/^#?UsePAM yes$/UsePAM no/' \\\n-i.original /etc/ssh/sshd_config\n\nif [[ $CERTLOGIN = \"y\" ]]; then\n  mkdir -p \"/home/${LOGINUSERNAME}/.ssh\"\n  chown \"${LOGINUSERNAME}\" \"/home/${LOGINUSERNAME}/.ssh\"\n  chmod 700 \"/home/${LOGINUSERNAME}/.ssh\"\n\n  cp \"/root/.ssh/authorized_keys\" \"/home/${LOGINUSERNAME}/.ssh/authorized_keys\"\n  chown \"${LOGINUSERNAME}\" \"/home/${LOGINUSERNAME}/.ssh/authorized_keys\"\n  chmod 600 \"/home/${LOGINUSERNAME}/.ssh/authorized_keys\"\n\n  sed -r \\\n  -e \"s/^#?PasswordAuthentication yes$/PasswordAuthentication no/\" \\\n  -i.allows_pwd /etc/ssh/sshd_config\nfi\n\nservice ssh restart\n\n\necho\necho \"--- Timezone, mail, unattended upgrades ---\"\necho\n\ntimedatectl set-timezone \"${TZONE}\"\n/usr/sbin/update-locale LANG=en_GB.UTF-8\n\n\nsed -r \\\n-e \"s/^myhostname =.*$/myhostname = ${VPNHOST}/\" \\\n-e 's/^inet_interfaces =.*$/inet_interfaces = loopback-only/' \\\n-i.original /etc/postfix/main.cf\n\ngrep -Fq 'jawj/IKEv2-setup' /etc/aliases || echo \"\n# https://github.com/jawj/IKEv2-setup\nroot: ${EMAILADDR}\n${LOGINUSERNAME}: ${EMAILADDR}\n\" >> /etc/aliases\n\nnewaliases\nservice postfix restart\n\n\nsed -r \\\n-e 's|^//Unattended-Upgrade::MinimalSteps \"true\";$|Unattended-Upgrade::MinimalSteps \"true\";|' \\\n-e 's|^//Unattended-Upgrade::Mail \"root\";$|Unattended-Upgrade::Mail \"root\";|' \\\n-e 's|^//Unattended-Upgrade::Automatic-Reboot \"false\";$|Unattended-Upgrade::Automatic-Reboot \"true\";|' \\\n-e 's|^//Unattended-Upgrade::Remove-Unused-Dependencies \"false\";|Unattended-Upgrade::Remove-Unused-Dependencies \"true\";|' \\\n-e 's|^//Unattended-Upgrade::Automatic-Reboot-Time \"02:00\";$|Unattended-Upgrade::Automatic-Reboot-Time \"03:00\";|' \\\n-i /etc/apt/apt.conf.d/50unattended-upgrades\n\necho 'APT::Periodic::Update-Package-Lists \"1\";\nAPT::Periodic::Download-Upgradeable-Packages \"1\";\nAPT::Periodic::AutocleanInterval \"7\";\nAPT::Periodic::Unattended-Upgrade \"1\";\n' > /etc/apt/apt.conf.d/10periodic\n\nservice unattended-upgrades restart\n\necho\necho \"--- Creating configuration files ---\"\necho\n\ncd \"/home/${LOGINUSERNAME}\"\n\ncat << EOF > vpn-ios.mobileconfig\n<?xml version='1.0' encoding='UTF-8'?>\n<!DOCTYPE plist PUBLIC '-//Apple//DTD PLIST 1.0//EN' 'http://www.apple.com/DTDs/PropertyList-1.0.dtd'>\n<plist version='1.0'>\n<dict>\n  <key>PayloadContent</key>\n  <array>\n    <dict>\n      <key>IKEv2</key>\n      <dict>\n        <key>AuthenticationMethod</key>\n        <string>None</string>\n        <key>ChildSecurityAssociationParameters</key>\n        <dict>\n          <key>EncryptionAlgorithm</key>\n          <string>AES-256-GCM</string>\n          <key>IntegrityAlgorithm</key>\n          <string>SHA2-384</string>\n          <key>DiffieHellmanGroup</key>\n          <integer>20</integer>\n          <key>LifeTimeInMinutes</key>\n          <integer>1440</integer>\n        </dict>\n        <key>DeadPeerDetectionRate</key>\n        <string>Medium</string>\n        <key>DisableMOBIKE</key>\n        <integer>0</integer>\n        <key>DisableRedirect</key>\n        <integer>0</integer>\n        <key>EnableCertificateRevocationCheck</key>\n        <integer>0</integer>\n        <key>EnablePFS</key>\n        <true/>\n        <key>ExtendedAuthEnabled</key>\n        <true/>\n        <key>IKESecurityAssociationParameters</key>\n        <dict>\n          <key>EncryptionAlgorithm</key>\n          <string>AES-256-GCM</string>\n          <key>IntegrityAlgorithm</key>\n          <string>SHA2-384</string>\n          <key>DiffieHellmanGroup</key>\n          <integer>20</integer>\n          <key>LifeTimeInMinutes</key>\n          <integer>1440</integer>\n        </dict>\n        <key>OnDemandEnabled</key>\n        <integer>1</integer>\n        <key>OnDemandRules</key>\n        <array>\n          <dict>\n            <key>Action</key>\n            <string>Connect</string>\n          </dict>\n        </array>\n        <key>RemoteAddress</key>\n        <string>${VPNHOST}</string>\n        <key>RemoteIdentifier</key>\n        <string>${VPNHOST}</string>\n        <key>UseConfigurationAttributeInternalIPSubnet</key>\n        <integer>0</integer>\n      </dict>\n      <key>IPv4</key>\n      <dict>\n        <key>OverridePrimary</key>\n        <integer>1</integer>\n      </dict>\n      <key>PayloadDescription</key>\n      <string>Configures VPN settings</string>\n      <key>PayloadDisplayName</key>\n      <string>VPN</string>\n      <key>PayloadIdentifier</key>\n      <string>com.apple.vpn.managed.$(uuidgen)</string>\n      <key>PayloadType</key>\n      <string>com.apple.vpn.managed</string>\n      <key>PayloadUUID</key>\n      <string>$(uuidgen)</string>\n      <key>PayloadVersion</key>\n      <integer>1</integer>\n      <key>Proxies</key>\n      <dict>\n        <key>HTTPEnable</key>\n        <integer>0</integer>\n        <key>HTTPSEnable</key>\n        <integer>0</integer>\n      </dict>\n      <key>UserDefinedName</key>\n      <string>${VPNHOST}</string>\n      <key>VPNType</key>\n      <string>IKEv2</string>\n    </dict>\n  </array>\n  <key>PayloadDisplayName</key>\n  <string>IKEv2 VPN configuration (${VPNHOST})</string>\n  <key>PayloadIdentifier</key>\n  <string>com.mackerron.vpn.$(uuidgen)</string>\n  <key>PayloadRemovalDisallowed</key>\n  <false/>\n  <key>PayloadType</key>\n  <string>Configuration</string>\n  <key>PayloadUUID</key>\n  <string>$(uuidgen)</string>\n  <key>PayloadVersion</key>\n  <integer>1</integer>\n</dict>\n</plist>\nEOF\n\ncat << EOF > vpn-mac.applescript\nset vpnuser to text returned of (display dialog \"Please enter your VPN username\" default answer \"\")\nset vpnpass to text returned of (display dialog \"Please enter your VPN password\" default answer \"\" with hidden answer)\nset plist to \"<?xml version='1.0' encoding='UTF-8'?>\n<!DOCTYPE plist PUBLIC '-//Apple//DTD PLIST 1.0//EN' 'http://www.apple.com/DTDs/PropertyList-1.0.dtd'>\n<plist version='1.0'>\n<dict>\n  <key>PayloadContent</key>\n  <array>\n    <dict>\n      <key>IKEv2</key>\n      <dict>\n        <key>AuthenticationMethod</key>\n        <string>None</string>\n        <key>ChildSecurityAssociationParameters</key>\n        <dict>\n          <key>EncryptionAlgorithm</key>\n          <string>AES-256-GCM</string>\n          <key>IntegrityAlgorithm</key>\n          <string>SHA2-384</string>\n          <key>DiffieHellmanGroup</key>\n          <integer>20</integer>\n          <key>LifeTimeInMinutes</key>\n          <integer>1440</integer>\n        </dict>\n        <key>DeadPeerDetectionRate</key>\n        <string>Medium</string>\n        <key>DisableMOBIKE</key>\n        <integer>0</integer>\n        <key>DisableRedirect</key>\n        <integer>0</integer>\n        <key>EnableCertificateRevocationCheck</key>\n        <integer>0</integer>\n        <key>EnablePFS</key>\n        <true/>\n        <key>ExtendedAuthEnabled</key>\n        <true/>\n        <key>AuthName</key>\n        <string>\" & vpnuser & \"</string>\n        <key>AuthPassword</key>\n        <string>\" & vpnpass & \"</string>\n        <key>IKESecurityAssociationParameters</key>\n        <dict>\n          <key>EncryptionAlgorithm</key>\n          <string>AES-256-GCM</string>\n          <key>IntegrityAlgorithm</key>\n          <string>SHA2-384</string>\n          <key>DiffieHellmanGroup</key>\n          <integer>20</integer>\n          <key>LifeTimeInMinutes</key>\n          <integer>1440</integer>\n        </dict>\n        <key>OnDemandEnabled</key>\n        <integer>1</integer>\n        <key>OnDemandRules</key>\n        <array>\n          <dict>\n            <key>Action</key>\n            <string>Connect</string>\n          </dict>\n        </array>\n        <key>RemoteAddress</key>\n        <string>${VPNHOST}</string>\n        <key>RemoteIdentifier</key>\n        <string>${VPNHOST}</string>\n        <key>UseConfigurationAttributeInternalIPSubnet</key>\n        <integer>0</integer>\n      </dict>\n      <key>IPv4</key>\n      <dict>\n        <key>OverridePrimary</key>\n        <integer>1</integer>\n      </dict>\n      <key>PayloadDescription</key>\n      <string>Configures VPN settings</string>\n      <key>PayloadDisplayName</key>\n      <string>VPN</string>\n      <key>PayloadIdentifier</key>\n      <string>com.apple.vpn.managed.$(uuidgen)</string>\n      <key>PayloadType</key>\n      <string>com.apple.vpn.managed</string>\n      <key>PayloadUUID</key>\n      <string>$(uuidgen)</string>\n      <key>PayloadVersion</key>\n      <integer>1</integer>\n      <key>Proxies</key>\n      <dict>\n        <key>HTTPEnable</key>\n        <integer>0</integer>\n        <key>HTTPSEnable</key>\n        <integer>0</integer>\n      </dict>\n      <key>UserDefinedName</key>\n      <string>${VPNHOST}</string>\n      <key>VPNType</key>\n      <string>IKEv2</string>\n    </dict>\n  </array>\n  <key>PayloadDisplayName</key>\n  <string>IKEv2 VPN configuration (${VPNHOST})</string>\n  <key>PayloadIdentifier</key>\n  <string>com.mackerron.vpn.$(uuidgen)</string>\n  <key>PayloadRemovalDisallowed</key>\n  <false/>\n  <key>PayloadType</key>\n  <string>Configuration</string>\n  <key>PayloadUUID</key>\n  <string>$(uuidgen)</string>\n  <key>PayloadVersion</key>\n  <integer>1</integer>\n</dict>\n</plist>\"\nset tmpdir to do shell script \"mktemp -d\"\nset tmpfile to tmpdir & \"/vpn.mobileconfig\"\ndo shell script \"touch \" & tmpfile\nwrite plist to tmpfile\ndo shell script \"open /System/Library/PreferencePanes/Profiles.prefPane \" & tmpfile\ndelay 5\ndo shell script \"rm \" & tmpfile\nEOF\n\ngrep -Fq 'jawj/IKEv2-setup' /etc/mime.types || echo \"\n# https://github.com/jawj/IKEv2-setup\napplication/vnd.strongswan.profile sswan\n\" >> /etc/mime.types\n\ncat << EOF > vpn-android.sswan\n{\n  \"uuid\": \"$(uuidgen)\",\n  \"name\": \"${VPNHOST}\",\n  \"type\": \"ikev2-eap\",\n  \"remote\": {\n    \"addr\": \"${VPNHOST}\"\n  }\n}\nEOF\n\ncat << EOF > vpn-ubuntu-client.sh\n#!/bin/bash -e\nif [[ \\$(id -u) -ne 0 ]]; then echo \"Please run as root (e.g. sudo ./path/to/this/script)\"; exit 1; fi\n\nread -p \"VPN username (same as entered on server): \" VPNUSERNAME\nwhile true; do\nread -s -p \"VPN password (same as entered on server): \" VPNPASSWORD\necho\nread -s -p \"Confirm VPN password: \" VPNPASSWORD2\necho\n[ \"\\$VPNPASSWORD\" = \"\\$VPNPASSWORD2\" ] && break\necho \"Passwords didn't match -- please try again\"\ndone\n\napt-get install -y strongswan libstrongswan-standard-plugins libcharon-extra-plugins\napt-get install -y libcharon-standard-plugins || true  # 17.04+ only\n\nln -f -s /etc/ssl/certs/ISRG_Root_X1.pem /etc/ipsec.d/cacerts/\n\ngrep -Fq 'jawj/IKEv2-setup' /etc/ipsec.conf || echo \"\n# https://github.com/jawj/IKEv2-setup\nconn ikev2vpn\n        ikelifetime=60m\n        keylife=20m\n        rekeymargin=3m\n        keyingtries=1\n        keyexchange=ikev2\n        ike=aes256gcm16-prfsha384-ecp384!\n        esp=aes256gcm16-ecp384!\n        leftsourceip=%config\n        leftauth=eap-mschapv2\n        eap_identity=\\${VPNUSERNAME}\n        right=${VPNHOST}\n        rightauth=pubkey\n        rightid=@${VPNHOST}\n        rightsubnet=0.0.0.0/0\n        auto=add  # or auto=start to bring up automatically\n\" >> /etc/ipsec.conf\n\ngrep -Fq 'jawj/IKEv2-setup' /etc/ipsec.secrets || echo \"\n# https://github.com/jawj/IKEv2-setup\n\\${VPNUSERNAME} : EAP \\\"\\${VPNPASSWORD}\\\"\n\" >> /etc/ipsec.secrets\n\nipsec restart\nsleep 5  # is there a better way?\n\necho \"Bringing up VPN ...\"\nipsec up ikev2vpn\nipsec statusall\n\necho\necho -n \"Testing IP address ... \"\nVPNIP=\\$(dig -4 +short ${VPNHOST})\nACTUALIP=\\$(dig -4 +short myip.opendns.com @resolver1.opendns.com)\nif [[ \"\\$VPNIP\" == \"\\$ACTUALIP\" ]]; then echo \"PASSED (IP: \\${VPNIP})\"; else echo \"FAILED (IP: \\${ACTUALIP}, VPN IP: \\${VPNIP})\"; fi\n\necho\necho \"To disconnect: ipsec down ikev2vpn\"\necho \"To reconnect:  ipsec up ikev2vpn\"\necho \"To connect automatically: change auto=add to auto=start in /etc/ipsec.conf\"\nEOF\n\ncat << EOF > vpn-instructions.txt\n== iOS ==\n\nA configuration profile is attached as vpn-ios.mobileconfig.\n\nOpen this attachment. Then go to Settings > General > VPN & Device Management, and find the profile under 'DOWNLOADED PROFILE'.\n\nYou will be asked for your device PIN or password, and then your VPN username and password.\n\nThese instructions apply to iOS 15. Earlier (and probably later) versions of iOS will also work, but the exact setup steps may differ.\n\n\n== macOS ==\n\nIn macOS Monterey, your VPN username and password must be embedded in the profile file. However, your password cannot be included in a profile sent by email for security reasons.\n\nSo: open vpn-mac.applescript and run it from Script Editor. You'll be prompted for your VPN username and password.\n\nSystem Preferences will then open. Select the profile listed as 'Downloaded' on the left, and click 'Install...' in the main panel.\n\n\n== Windows ==\n\nYou will need Windows 10 Pro or above. Please run the following commands in PowerShell:\n\n\\$Response = Invoke-WebRequest -UseBasicParsing -Uri https://valid-isrgrootx1.letsencrypt.org\n# ^ this line fixes a certificate lazy-loading bug: see https://github.com/jawj/IKEv2-setup/issues/126\n\nAdd-VpnConnection -Name \"${VPNHOST}\" \\`\n  -ServerAddress \"${VPNHOST}\" \\`\n  -TunnelType IKEv2 \\`\n  -EncryptionLevel Maximum \\`\n  -AuthenticationMethod EAP \\`\n  -RememberCredential\n\nSet-VpnConnectionIPsecConfiguration -ConnectionName \"${VPNHOST}\" \\`\n  -AuthenticationTransformConstants GCMAES256 \\`\n  -CipherTransformConstants GCMAES256 \\`\n  -EncryptionMethod GCMAES256 \\`\n  -IntegrityCheckMethod SHA384 \\`\n  -DHGroup ECP384 \\`\n  -PfsGroup ECP384 \\`\n  -Force\n\n# Run the following command to retain access to the local network (e.g. printers, file servers) while the VPN is connected.\n# On a home network, you probably want this. On a public network, you probably don't.\n\nSet-VpnConnection -Name \"${VPNHOST}\" -SplitTunneling \\$True\n\nYou will need to enter your chosen VPN username and password in order to connect.\n\n\n== Android ==\n\nDownload the strongSwan app from the Play Store: https://play.google.com/store/apps/details?id=org.strongswan.android\n\nThen open the attached .sswan file, or select it after choosing 'Import VPN profile' from the strongSwan app menu. You will need to enter your chosen VPN username and password in order to connect.\n\nFor a persistent connection, go to your device's Settings app and choose Network & Internet > Advanced > VPN > strongSwan VPN Client, tap the gear icon and toggle on 'Always-on VPN' (these options may differ by Android version and provider).\n\n\n== Ubuntu ==\n\nA bash script to set up strongSwan as a VPN client is attached as vpn-ubuntu-client.sh. You will need to chmod +x and then run the script as root.\n\nEOF\n\nEMAIL=$USER@$VPNHOST mutt -s \"VPN configuration\" -a vpn-ios.mobileconfig vpn-mac.applescript vpn-android.sswan vpn-ubuntu-client.sh -- \"${EMAILADDR}\" < vpn-instructions.txt\n\necho\necho \"--- How to connect ---\"\necho\necho \"Connection instructions have been emailed to you, and can also be found in your home directory, /home/${LOGINUSERNAME}\"\n\n# necessary for IKEv2?\n# Windows: https://support.microsoft.com/en-us/kb/926179\n# HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PolicyAgent += AssumeUDPEncapsulationContextOnSendRule, DWORD = 2\n"
        }
      ]
    }
  ]
}