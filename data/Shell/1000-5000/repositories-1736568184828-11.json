{
  "metadata": {
    "timestamp": 1736568184828,
    "page": 11,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ToyoDAdoubi/doubi",
      "stars": 4696,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0361328125,
          "content": "MIT License\n\nCopyright (c) 2017 Toyo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.890625,
          "content": "# 一个逗比写的逗比脚本\n\n![GitHub](https://img.shields.io/github/license/mashape/apistatus.svg)\n[![GitHub stars](https://img.shields.io/github/stars/ToyoDAdoubi/doubi.svg?style=popout&label=Stars)](https://github.com/ToyoDAdoubi/doubi/stargazers)\n[![GitHub forks](https://img.shields.io/github/forks/ToyoDAdoubi/doubi.svg?style=popout&label=Fork)](https://github.com/ToyoDAdoubi/doubi/fork)\n## 脚本索引\n\n* [***代理相关***](#代理相关)\n  * [ss-go.sh](#ss_gosh)\n  * [ssr.sh](#ssrsh)\n  * [ssrmu.sh](#ssrmush)\n  * [brook.sh](#brooksh)\n  * [goflyway.sh](#goflywaysh)\n  * [daze.sh](#dazesh)\n  * [lightsocks.sh](#lightsockssh)\n  * [mtproxy.sh](#mtproxysh)\n  * [mtproxy_go.sh](#mtproxy_gosh)\n* [***中转相关***](#中转相关)\n  * [iptables-pf.sh](#iptables-pfsh)\n  * [brook-pf.sh](#brook-pfsh)\n  * [haproxy.sh](#haproxysh)\n  * [socat.sh](#socatsh)\n  * [tinymapper.sh](#tinymappersh)\n* [***BT下载相关***](#bt下载相关)\n  * [aria2.sh](#aria2sh)\n  * [cloudt.sh](#cloudtsh)\n  * [pserver.sh](#pserversh)\n* [***服务器相关***](#服务器相关)\n  * [bbr.sh](#bbrsh)\n  * [status.sh](#statussh)\n  * [ban_iptables.sh](#ban_iptablessh)\n  * [ssh_port.sh](#ssh_portsh)\n* [***VPN 相关***](#vpn相关)\n  * [ocserv.sh](#ocservsh)\n* [***DNS 相关***](#dns相关)\n  * [dowsdns.sh](#dowsdnssh)\n* [***HTTP 相关***](#http相关)\n  * [caddy_install.sh](#caddy_installsh)\n  * [pythonhttp.sh](#pythonhttpsh)\n* [***其他***](#其他)\n  * [adbyby.sh](#adbybysh)\n  * [gfw_push.sh](#gfw_pushsh)\n  * [libsodium.sh](#libsodiumsh)\n  * [ssrstatus.sh](#ssrstatussh)\n  * [ssr_check.sh](#ssr_checksh)\n  * [ssr_ip_check.sh](#ssr_ip_checksh)\n\n---\n\n## 代理相关\n\n## ss_go.sh\n\n- 脚本说明: Shadowsocks 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/ss-jc67/\n- 项目地址: https://github.com/shadowsocks/go-shadowsocks2\n\n#### 脚本特点:\n目前网上的各个Shadowsocks脚本基本都是只有 安装/启动/重启 等基础功能，对于小白来说还是不够简单方便。既然是一键脚本，那么就要尽可能地简单，小白更容易接受使用！\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ss-go.sh && chmod +x ss-go.sh && bash ss-go.sh\n```\n\n---\n## ssr.sh\n\n- 脚本说明: ShadowsocksR 一键安装管理脚本，支持单端口/多端口切换和管理\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/ss-jc42/\n- 项目地址: https://github.com/ToyoDAdoubiBackup/shadowsocksr\n\n#### 脚本特点:\n目前网上的各个ShadowsocksR脚本基本都是只有 安装/启动/重启 等基础功能，对于小白来说还是不够简单方便。既然是一键脚本，那么就要尽可能地简单，小白更容易接受使用！\n\n- 支持 限制 用户速度\n- 支持 限制 端口设备数\n- 支持 显示 当前连接IP\n- 支持 显示 SS/SSR连接+二维码\n- 支持 切换管理 单/多端口\n- 支持 一键安装 锐速\n- 支持 一键安装 BBR\n- 支持 一键封禁 垃圾邮件(SMAP)/BT/PT\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n```\n\n---\n## ssrmu.sh\n\n- 脚本说明: ShadowsocksR 一键安装管理脚本，支持流量控制\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/ss-jc60/\n- 项目地址: https://github.com/ToyoDAdoubiBackup/shadowsocksr\n\n#### 脚本特点:\n目前网上的各个ShadowsocksR脚本基本都是只有 安装/启动/重启 等基础功能，对于小白来说还是不够简单方便。既然是一键脚本，那么就要尽可能地简单，小白更容易接受使用！\n\n- 支持 限制 用户速度\n- 支持 限制 用户设备数\n- 支持 限制 用户总流量\n- 支持 定时 流量清零\n- 支持 显示 当前连接IP\n- 支持 显示 SS/SSR连接+二维码\n- 支持 一键安装 锐速\n- 支持 一键安装 BBR\n- 支持 一键封禁 垃圾邮件(SMAP)/BT/PT\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh && chmod +x ssrmu.sh && bash ssrmu.sh\n```\n\n---\n## brook.sh\n\n- 脚本说明: Brook 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian7+ / Ubuntu14+\n- 使用方法: https://doub.io/brook-jc3/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook.sh && chmod +x brook.sh && bash brook.sh\n```\n\n---\n## goflyway.sh\n\n- 脚本说明: GoFlyway 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian7+ / Ubuntu14+\n- 使用方法: https://doub.io/goflyway-jc2/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/goflyway.sh && chmod +x goflyway.sh && bash goflyway.sh\n```\n\n---\n## lightsocks.sh\n\n- 脚本说明: LightSocks 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian7+ / Ubuntu14+\n- 使用方法: https://doub.io/lightsocks-jc1/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/lightsocks.sh && chmod +x lightsocks.sh && bash lightsocks.sh\n```\n\n---\n## daze.sh\n\n- 脚本说明: DAZE 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian7+ / Ubuntu14+\n- 使用方法: https://doub.io/daze-jc3/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/daze.sh && chmod +x daze.sh && bash daze.sh\n```\n\n---\n## mtproxy.sh\n\n- 脚本说明: Mtproto Proxy 一键安装管理脚本\n- 系统支持: CentOS7 / Debian7+ / Ubuntu14+\n- 使用方法: https://doub.io/shell-jc7/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/mtproxy.sh && chmod +x mtproxy.sh && bash mtproxy.sh\n```\n\n---\n## mtproxy_go.sh\n\n- 脚本说明: Mtproto Proxy Go版 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian7+ / Ubuntu14+\n- 使用方法: https://doub.io/shell-jc9/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/mtproxy_go.sh && chmod +x mtproxy_go.sh && bash mtproxy_go.sh\n```\n\n---\n\n## 中转相关\n\n## iptables-pf.sh\n\n- 脚本说明: iptables 端口转发 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/wlzy-20/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/iptables-pf.sh && chmod +x iptables-pf.sh && bash iptables-pf.sh\n```\n\n---\n## brook-pf.sh\n\n- 脚本说明: Brook 端口转发 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/wlzy-37/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook-pf.sh && chmod +x brook-pf.sh && bash brook-pf.sh\n```\n\n---\n## haproxy.sh\n\n- 脚本说明: HaProxy 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/wlzy-19/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/haproxy.sh && chmod +x haproxy.sh && bash haproxy.sh\n```\n\n---\n## socat.sh\n\n- 脚本说明: Socat 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/wlzy-18/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/socat.sh && chmod +x socat.sh && bash socat.sh\n```\n\n---\n## tinymapper.sh\n\n- 脚本说明: tinyPortMapper 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/wlzy-36/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/tinymapper.sh && chmod +x tinymapper.sh && bash tinymapper.sh\n```\n\n---\n\n## BT下载相关\n\n## aria2.sh\n\n- 脚本说明: Aria2 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/shell-jc4/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/aria2.sh && chmod +x aria2.sh && bash aria2.sh\n```\n\n---\n## cloudt.sh\n\n- 脚本说明: Cloud Torrent 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/wlzy-12/\n- 项目地址: https://github.com/jpillora/cloud-torrent\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/cloudt.sh && chmod +x cloudt.sh && bash cloudt.sh\n```\n\n---\n## pserver.sh\n\n- 脚本说明: Peerflix Server 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/wlzy-13/\n- 项目地址: https://github.com/asapach/peerflix-server\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/pserver.sh && chmod +x pserver.sh && bash pserver.sh\n```\n\n---\n\n## 服务器相关\n\n## bbr.sh\n\n- 脚本说明: BBR 一键安装管理脚本\n- 系统支持: Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/wlzy-16/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/bbr.sh && chmod +x bbr.sh && bash bbr.sh\n```\n\n---\n## status.sh\n\n- 脚本说明: ServerStatus 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/shell-jc3/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/status.sh && chmod +x status.sh && bash status.sh\n```\n\n---\n## ban_iptables.sh\n\n- 脚本说明: iptables 垃圾邮件(SPAM)/BT/PT 一键封禁脚本\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/shell-jc2/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ban_iptables.sh && chmod +x ban_iptables.sh && bash ban_iptables.sh\n```\n\n---\n## ssh_port.sh\n\n- 脚本说明: SSH 一键修改端口脚本\n- 系统支持: Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/linux-jc11/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssh_port.sh && chmod +x ssh_port.sh && bash ssh_port.sh\n```\n\n---\n\n## VPN相关\n\n## ocserv.sh\n\n- 脚本说明: Ocserv AnyConnect 一键安装管理脚本\n- 系统支持: Debian7+ / Ubuntu14+\n- 使用方法: https://doub.io/vpnzy-7/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ocserv.sh && chmod +x ocserv.sh && bash ocserv.sh\n```\n\n---\n\n## DNS相关\n\n## dowsdns.sh\n\n- 脚本说明: DowsDNS 一键安装管理脚本\n- 系统支持: CentOS7 / Debian7+ / Ubuntu14+\n- 使用方法: https://doub.io/dowsdns-jc3/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/dowsdns.sh && chmod +x dowsdns.sh && bash dowsdns.sh\n```\n\n---\n\n## HTTP相关\n\n## caddy_install.sh\n\n- 脚本说明: Caddy 一键安装脚本\n- 系统支持: CentOS6+ / Debian7+ / Ubuntu14+\n- 使用方法: https://doub.io/shell-jc1\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/caddy_install.sh && chmod +x caddy_install.sh && bash caddy_install.sh\n # 安装插件：\n bash caddy_install.sh xxx,xxx\n  # 例如同时安装 http.filemanager 和 http.webdav插件：\n  bash caddy_install.sh http.filemanager,http.webdav\n  # 插件和Caddy是集成在一起的(单个二进制文件)，多个插件必须同时安装。\n# 卸载命令：\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/caddy_install.sh && chmod +x caddy_install.sh && caddy_install.sh uninstall\n```\n\n---\n## pythonhttp.sh\n\n- 脚本说明: SimpleHTTPServer 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/wlzy-8/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/pythonhttp.sh && chmod +x pythonhttp.sh && bash pythonhttp.sh\n```\n\n---\n\n## 其他\n\n## adbyby.sh\n\n- 脚本说明: ADbyby 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/adbyby-jc2/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/adbyby.sh && chmod +x adbyby.sh && bash adbyby.sh\n```\n\n## gfw_push.sh\n\n- 脚本说明: 监测服务器IP是否被墙并推送至 Telegram 一键脚本\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/shell-jc8/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/gfw_push.sh && chmod +x gfw_push.sh && bash gfw_push.sh\n```\n\n---\n## libsodium.sh\n\n- 脚本说明: libsodium 一键安装管理脚本\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/shell-jc6/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/libsodium.sh && chmod +x libsodium.sh && bash libsodium.sh\n```\n\n---\n## ssr_check.sh\n\n- 脚本说明: ShadowsocksR 批量快速验证账号可用性\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/ss-jc56/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr_check.sh && chmod +x ssr_check.sh\n```\n\n---\n## ssrstatus.sh\n\n- 脚本说明: ShadowsocksR 账号在线监控网站\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/shell-jc5/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrstatus.sh && chmod +x ssrstatus.sh && bash ssrstatus\n```\n\n---\n## ssr_ip_check.sh\n\n- 脚本说明: ShadowsocksR 检测每个端口链接IP数\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/ss-jc50/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr_ip_check.sh && chmod +x ssr_ip_check.sh\n```\n\n---\n## ~~pipes.sh~~\n\n- 脚本说明: PipeSocks 一键安装管理脚本（该软件已停更）\n- 系统支持: CentOS7 / Debian7+ / Ubuntu14+\n- 使用方法: https://doub.io/pipesocks-jc2/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/pipesocks/install/master/install.sh && mv install.sh pipes.sh && chmod +x pipes.sh && bash pipes.sh\n```\n\n---\n## ~~gogo.sh~~\n\n- 脚本说明: GoGo Tunnel 一键安装管理脚本（该软件已停更）\n- 系统支持: CentOS6+ / Debian6+ / Ubuntu14+\n- 使用方法: https://doub.io/wlzy-24/\n\n#### 下载安装:\n``` bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/gogo.sh && chmod +x gogo.sh && bash gogo.sh\n```\n\n---\nCopyright (C) 2016-2018 Toyo <https://doub.io>\n"
        },
        {
          "name": "adbyby.sh",
          "type": "blob",
          "size": 6.568359375,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: ADbyby\n#\tVersion: 1.0.1\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/adbyby-jc2/\n#=================================================\n\nfile=\"/usr/local/adbyby\"\nadbyby_file=\"/usr/local/adbyby/bin/adbyby\"\nadbyby_conf=\"/usr/local/adbyby/bin/adhook.ini\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_installed_status(){\n\t[[ ! -e ${adbyby_file} ]] && echo -e \"${Error} ADbyby 没有安装，请检查 !\" && exit 1\n}\ncheck_pid(){\n\tPID=`ps -ef| grep \"adbyby\"| grep -v grep| grep -v \"adbyby.sh\"| grep -v \"init.d\"| grep -v \"service\"| awk '{print $2}'`\n}\nDownload_adbyby(){\n\tcd ${file}\n\tif [[ ${bit} == \"x86_64\" ]]; then\n\t\twget --no-check-certificate -O \"adbyby.tar.gz\" \"https://raw.githubusercontent.com/adbyby/Files/master/linux.64.tar.gz\"\n\telse\n\t\twget --no-check-certificate -O \"adbyby.tar.gz\" \"https://raw.githubusercontent.com/adbyby/Files/master/linux.86.tar.gz\"\n\tfi\n\t[[ ! -e \"adbyby.tar.gz\" ]] && echo -e \"${Error} ADbyby 下载失败 !\" && exit 1\n\ttar -xzf adbyby.tar.gz && rm -rf adbyby.tar.gz\n\t[[ ! -e \"${adbyby_file}\" ]] && echo -e \"${Error} ADbyby 解压失败 !\" && exit 1\n\tcd bin\n\tchmod 777 adbyby\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/other/adhook.ini\"\n}\nService_adbyby(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/adbyby_centos -O /etc/init.d/adbyby; then\n\t\t\techo -e \"${Error} ADbyby服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/adbyby\n\t\tchkconfig --add adbyby\n\t\tchkconfig adbyby on\n\telse\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/adbyby_debian -O /etc/init.d/adbyby; then\n\t\t\techo -e \"${Error} ADbyby服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/adbyby\n\t\tupdate-rc.d -f adbyby defaults\n\tfi\n\techo -e \"${Info} ADbyby服务 管理脚本下载完成 !\"\n}\nInstallation_dependency(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tyum update\n\t\tyum install -y vim\n\telse\n\t\tapt-get update\n\t\tapt-get install -y vim\n\tfi\n\tmkdir ${file}\n}\nInstall_adbyby(){\n\t[[ -e ${adbyby_file} ]] && echo -e \"${Error} 检测到 ADbyby 已安装 !\" && exit 1\n\tcheck_sys\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始下载/安装...\"\n\tDownload_adbyby\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService_adbyby\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart_adbyby\n}\nStart_adbyby(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} ADbyby 正在运行，请检查 !\" && exit 1\n\tservice adbyby start\n}\nStop_adbyby(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} ADbyby 没有运行，请检查 !\" && exit 1\n\tservice adbyby stop\n}\nRestart_adbyby(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && service adbyby stop\n\tservice adbyby start\n}\nSet_adbyby(){\n\tcheck_installed_status\n\tvi ${adbyby_conf}\n\tRestart_adbyby\n}\nUninstall_adbyby(){\n\tcheck_installed_status\n\techo \"确定要卸载 ADbyby ? (y/N)\"\n\techo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tDel_iptables\n\t\tSave_iptables\n\t\trm -rf ${file} && rm -rf /etc/init.d/adbyby\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del adbyby\n\t\telse\n\t\t\tupdate-rc.d -f adbyby remove\n\t\tfi\n\t\techo && echo \"ADbyby 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nAdd_iptables(){\n\tiptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8118\n}\nDel_iptables(){\n\tiptables -t nat -D PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8118\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\techo -e \"net.ipv4.ip_forward=1\" >> /etc/sysctl.conf\n\tsysctl -p\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\necho && echo -e \"请输入一个数字来选择选项\n\n ${Green_font_prefix}1.${Font_color_suffix} 安装 ADbyby\n ${Green_font_prefix}2.${Font_color_suffix} 卸载 ADbyby\n————————————\n ${Green_font_prefix}3.${Font_color_suffix} 启动 ADbyby\n ${Green_font_prefix}4.${Font_color_suffix} 停止 ADbyby\n ${Green_font_prefix}5.${Font_color_suffix} 重启 ADbyby\n————————————\n ${Green_font_prefix}6.${Font_color_suffix} 修改 配置文件\n————————————\" && echo\nif [[ -e ${adbyby_file} ]]; then\n\tcheck_pid\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\telse\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\tfi\nelse\n\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\nfi\necho\nread -e -p \" 请输入数字 [1-8]:\" num\ncase \"$num\" in\n\t1)\n\tInstall_adbyby\n\t;;\n\t2)\n\tUninstall_adbyby\n\t;;\n\t3)\n\tStart_adbyby\n\t;;\n\t4)\n\tStop_adbyby\n\t;;\n\t5)\n\tRestart_adbyby\n\t;;\n\t6)\n\tSet_adbyby\n\t;;\n\t*)\n\techo \"请输入正确数字 [1-8]\"\n\t;;\nesac"
        },
        {
          "name": "aria2.sh",
          "type": "blob",
          "size": 24.23828125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: Aria2\n#\tVersion: 1.1.10\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/shell-jc4/\n#=================================================\nsh_ver=\"1.1.10\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile_1=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\nfile=\"/root/.aria2\"\naria2_conf=\"/root/.aria2/aria2.conf\"\naria2_log=\"/root/.aria2/aria2.log\"\nFolder=\"/usr/local/aria2\"\naria2c=\"/usr/bin/aria2c\"\nCrontab_file=\"/usr/bin/crontab\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前非ROOT账号(或没有ROOT权限)，无法继续操作，请更换ROOT账号或使用 ${Green_background_prefix}sudo su${Font_color_suffix} 命令获取临时ROOT权限（执行后可能会提示输入当前账号的密码）。\" && exit 1\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_installed_status(){\n\t[[ ! -e ${aria2c} ]] && echo -e \"${Error} Aria2 没有安装，请检查 !\" && exit 1\n\t[[ ! -e ${aria2_conf} ]] && echo -e \"${Error} Aria2 配置文件不存在，请检查 !\" && [[ $1 != \"un\" ]] && exit 1\n}\ncheck_crontab_installed_status(){\n\tif [[ ! -e ${Crontab_file} ]]; then\n\t\techo -e \"${Error} Crontab 没有安装，开始安装...\"\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum install crond -y\n\t\telse\n\t\t\tapt-get install cron -y\n\t\tfi\n\t\tif [[ ! -e ${Crontab_file} ]]; then\n\t\t\techo -e \"${Error} Crontab 安装失败，请检查！\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} Crontab 安装成功！\"\n\t\tfi\n\tfi\n}\ncheck_pid(){\n\tPID=`ps -ef| grep \"aria2c\"| grep -v grep| grep -v \"aria2.sh\"| grep -v \"init.d\"| grep -v \"service\"| awk '{print $2}'`\n}\ncheck_new_ver(){\n\techo -e \"${Info} 请输入 Aria2 版本号，格式如：[ 1.34.0 ]，获取地址：[ https://github.com/q3aql/aria2-static-builds/releases ]\"\n\tread -e -p \"默认回车自动获取最新版本号:\" aria2_new_ver\n\tif [[ -z ${aria2_new_ver} ]]; then\n\t\taria2_new_ver=$(wget --no-check-certificate -qO- https://api.github.com/repos/q3aql/aria2-static-builds/releases | grep -o '\"tag_name\": \".*\"' |head -n 1| sed 's/\"//g;s/v//g' | sed 's/tag_name: //g')\n\t\tif [[ -z ${aria2_new_ver} ]]; then\n\t\t\techo -e \"${Error} Aria2 最新版本获取失败，请手动获取最新版本号[ https://github.com/q3aql/aria2-static-builds/releases ]\"\n\t\t\tread -e -p \"请输入版本号 [ 格式如 1.34.0 ] :\" aria2_new_ver\n\t\t\t[[ -z \"${aria2_new_ver}\" ]] && echo \"取消...\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} 检测到 Aria2 最新版本为 [ ${aria2_new_ver} ]\"\n\t\tfi\n\telse\n\t\techo -e \"${Info} 即将准备下载 Aria2 版本为 [ ${aria2_new_ver} ]\"\n\tfi\n}\ncheck_ver_comparison(){\n\taria2_now_ver=$(${aria2c} -v|head -n 1|awk '{print $3}')\n\t[[ -z ${aria2_now_ver} ]] && echo -e \"${Error} Brook 当前版本获取失败 !\" && exit 1\n\tif [[ \"${aria2_now_ver}\" != \"${aria2_new_ver}\" ]]; then\n\t\techo -e \"${Info} 发现 Aria2 已有新版本 [ ${aria2_new_ver} ](当前版本：${aria2_now_ver})\"\n\t\tread -e -p \"是否更新(会中断当前下载任务，请注意) ? [Y/n] :\" yn\n\t\t[[ -z \"${yn}\" ]] && yn=\"y\"\n\t\tif [[ $yn == [Yy] ]]; then\n\t\t\tcheck_pid\n\t\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\t\tDownload_aria2 \"update\"\n\t\t\tStart_aria2\n\t\tfi\n\telse\n\t\techo -e \"${Info} 当前 Aria2 已是最新版本 [ ${aria2_new_ver} ]\" && exit 1\n\tfi\n}\nDownload_aria2(){\n\tupdate_dl=$1\n\tcd \"/usr/local\"\n\t#echo -e \"${bit}\"\n\tif [[ ${bit} == \"x86_64\" ]]; then\n\t\tbit=\"64bit\"\n\telif [[ ${bit} == \"i386\" || ${bit} == \"i686\" ]]; then\n\t\tbit=\"32bit\"\n\telse\n\t\tbit=\"arm-rbpi\"\n\tfi\n\twget -N --no-check-certificate \"https://github.com/q3aql/aria2-static-builds/releases/download/v${aria2_new_ver}/aria2-${aria2_new_ver}-linux-gnu-${bit}-build1.tar.bz2\"\n\tAria2_Name=\"aria2-${aria2_new_ver}-linux-gnu-${bit}-build1\"\n\t\n\t[[ ! -s \"${Aria2_Name}.tar.bz2\" ]] && echo -e \"${Error} Aria2 压缩包下载失败 !\" && exit 1\n\ttar jxvf \"${Aria2_Name}.tar.bz2\"\n\t[[ ! -e \"/usr/local/${Aria2_Name}\" ]] && echo -e \"${Error} Aria2 解压失败 !\" && rm -rf \"${Aria2_Name}.tar.bz2\" && exit 1\n\t[[ ${update_dl} = \"update\" ]] && rm -rf \"${Folder}\"\n\tmv \"/usr/local/${Aria2_Name}\" \"${Folder}\"\n\t[[ ! -e \"${Folder}\" ]] && echo -e \"${Error} Aria2 文件夹重命名失败 !\" && rm -rf \"${Aria2_Name}.tar.bz2\" && rm -rf \"/usr/local/${Aria2_Name}\" && exit 1\n\trm -rf \"${Aria2_Name}.tar.bz2\"\n\tcd \"${Folder}\"\n\tmake install\n\t[[ ! -e ${aria2c} ]] && echo -e \"${Error} Aria2 主程序安装失败！\" && rm -rf \"${Folder}\" && exit 1\n\tchmod +x aria2c\n\techo -e \"${Info} Aria2 主程序安装完毕！开始下载配置文件...\"\n}\nDownload_aria2_conf(){\n\tmkdir \"${file}\" && cd \"${file}\"\n\twget --no-check-certificate -N \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/other/Aria2/aria2.conf\"\n\t[[ ! -s \"aria2.conf\" ]] && echo -e \"${Error} Aria2 配置文件下载失败 !\" && rm -rf \"${file}\" && exit 1\n\twget --no-check-certificate -N \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/other/Aria2/dht.dat\"\n\t[[ ! -s \"dht.dat\" ]] && echo -e \"${Error} Aria2 DHT文件下载失败 !\" && rm -rf \"${file}\" && exit 1\n\techo '' > aria2.session\n\tsed -i 's/^rpc-secret=DOUBIToyo/rpc-secret='$(date +%s%N | md5sum | head -c 20)'/g' ${aria2_conf}\n}\nService_aria2(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/aria2_centos -O /etc/init.d/aria2; then\n\t\t\techo -e \"${Error} Aria2服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/aria2\n\t\tchkconfig --add aria2\n\t\tchkconfig aria2 on\n\telse\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/aria2_debian -O /etc/init.d/aria2; then\n\t\t\techo -e \"${Error} Aria2服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/aria2\n\t\tupdate-rc.d -f aria2 defaults\n\tfi\n\techo -e \"${Info} Aria2服务 管理脚本下载完成 !\"\n}\nInstallation_dependency(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tyum update\n\t\tyum -y groupinstall \"Development Tools\"\n\t\tyum install nano -y\n\telse\n\t\tapt-get update\n\t\tapt-get install nano build-essential -y\n\tfi\n}\nInstall_aria2(){\n\tcheck_root\n\t[[ -e ${aria2c} ]] && echo -e \"${Error} Aria2 已安装，请检查 !\" && exit 1\n\tcheck_sys\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始下载/安装 主程序...\"\n\tcheck_new_ver\n\tDownload_aria2\n\techo -e \"${Info} 开始下载/安装 配置文件...\"\n\tDownload_aria2_conf\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService_aria2\n\tRead_config\n\taria2_RPC_port=${aria2_port}\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart_aria2\n}\nStart_aria2(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} Aria2 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/aria2 start\n}\nStop_aria2(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} Aria2 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/aria2 stop\n}\nRestart_aria2(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/aria2 stop\n\t/etc/init.d/aria2 start\n}\nSet_aria2(){\n\tcheck_installed_status\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix}  修改 Aria2 RPC密码\n ${Green_font_prefix}2.${Font_color_suffix}  修改 Aria2 RPC端口\n ${Green_font_prefix}3.${Font_color_suffix}  修改 Aria2 文件下载位置\n ${Green_font_prefix}4.${Font_color_suffix}  修改 Aria2 密码+端口+文件下载位置\n ${Green_font_prefix}5.${Font_color_suffix}  手动 打开配置文件修改\" && echo\n\tread -e -p \"(默认: 取消):\" aria2_modify\n\t[[ -z \"${aria2_modify}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${aria2_modify} == \"1\" ]]; then\n\t\tSet_aria2_RPC_passwd\n\telif [[ ${aria2_modify} == \"2\" ]]; then\n\t\tSet_aria2_RPC_port\n\telif [[ ${aria2_modify} == \"3\" ]]; then\n\t\tSet_aria2_RPC_dir\n\telif [[ ${aria2_modify} == \"4\" ]]; then\n\t\tSet_aria2_RPC_passwd_port_dir\n\telif [[ ${aria2_modify} == \"5\" ]]; then\n\t\tSet_aria2_vim_conf\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-5)\" && exit 1\n\tfi\n}\nSet_aria2_RPC_passwd(){\n\tread_123=$1\n\tif [[ ${read_123} != \"1\" ]]; then\n\t\tRead_config\n\tfi\n\tif [[ -z \"${aria2_passwd}\" ]]; then\n\t\taria2_passwd_1=\"空(没有检测到配置，可能手动删除或注释了)\"\n\telse\n\t\taria2_passwd_1=${aria2_passwd}\n\tfi\n\techo -e \"请输入要设置的 Aria2 RPC密码(旧密码为：${Green_font_prefix}${aria2_passwd_1}${Font_color_suffix})\"\n\tread -e -p \"(默认密码: 随机生成 密码请不要包含等号 = 和井号 #):\" aria2_RPC_passwd\n\techo\n\t[[ -z \"${aria2_RPC_passwd}\" ]] && aria2_RPC_passwd=$(date +%s%N | md5sum | head -c 20)\n\tif [[ \"${aria2_passwd}\" != \"${aria2_RPC_passwd}\" ]]; then\n\t\tif [[ -z \"${aria2_passwd}\" ]]; then\n\t\t\techo -e \"\\nrpc-secret=${aria2_RPC_passwd}\" >> ${aria2_conf}\n\t\t\tif [[ $? -eq 0 ]];then\n\t\t\t\techo -e \"${Info} 密码修改成功！新密码为：${Green_font_prefix}${aria2_RPC_passwd}${Font_color_suffix}(因为找不到旧配置参数，所以自动加入配置文件底部)\"\n\t\t\t\tif [[ ${read_123} != \"1\" ]]; then\n\t\t\t\t\tRestart_aria2\n\t\t\t\tfi\n\t\t\telse \n\t\t\t\techo -e \"${Error} 密码修改失败！旧密码为：${Green_font_prefix}${aria2_passwd}${Font_color_suffix}\"\n\t\t\tfi\n\t\telse\n\t\t\tsed -i 's/^rpc-secret='${aria2_passwd}'/rpc-secret='${aria2_RPC_passwd}'/g' ${aria2_conf}\n\t\t\tif [[ $? -eq 0 ]];then\n\t\t\t\techo -e \"${Info} 密码修改成功！新密码为：${Green_font_prefix}${aria2_RPC_passwd}${Font_color_suffix}\"\n\t\t\t\tif [[ ${read_123} != \"1\" ]]; then\n\t\t\t\t\tRestart_aria2\n\t\t\t\tfi\n\t\t\telse \n\t\t\t\techo -e \"${Error} 密码修改失败！旧密码为：${Green_font_prefix}${aria2_passwd}${Font_color_suffix}\"\n\t\t\tfi\n\t\tfi\n\telse\n\t\techo -e \"${Error} 新密码与旧密码一致，取消...\"\n\tfi\n}\nSet_aria2_RPC_port(){\n\tread_123=$1\n\tif [[ ${read_123} != \"1\" ]]; then\n\t\tRead_config\n\tfi\n\tif [[ -z \"${aria2_port}\" ]]; then\n\t\taria2_port_1=\"空(没有检测到配置，可能手动删除或注释了)\"\n\telse\n\t\taria2_port_1=${aria2_port}\n\tfi\n\techo -e \"请输入要设置的 Aria2 RPC端口(旧端口为：${Green_font_prefix}${aria2_port_1}${Font_color_suffix})\"\n\tread -e -p \"(默认端口: 6800):\" aria2_RPC_port\n\techo\n\t[[ -z \"${aria2_RPC_port}\" ]] && aria2_RPC_port=\"6800\"\n\tif [[ \"${aria2_port}\" != \"${aria2_RPC_port}\" ]]; then\n\t\tif [[ -z \"${aria2_port}\" ]]; then\n\t\t\techo -e \"\\nrpc-listen-port=${aria2_RPC_port}\" >> ${aria2_conf}\n\t\t\tif [[ $? -eq 0 ]];then\n\t\t\t\techo -e \"${Info} 端口修改成功！新端口为：${Green_font_prefix}${aria2_RPC_port}${Font_color_suffix}(因为找不到旧配置参数，所以自动加入配置文件底部)\"\n\t\t\t\tDel_iptables\n\t\t\t\tAdd_iptables\n\t\t\t\tSave_iptables\n\t\t\t\tif [[ ${read_123} != \"1\" ]]; then\n\t\t\t\t\tRestart_aria2\n\t\t\t\tfi\n\t\t\telse \n\t\t\t\techo -e \"${Error} 端口修改失败！旧端口为：${Green_font_prefix}${aria2_port}${Font_color_suffix}\"\n\t\t\tfi\n\t\telse\n\t\t\tsed -i 's/^rpc-listen-port='${aria2_port}'/rpc-listen-port='${aria2_RPC_port}'/g' ${aria2_conf}\n\t\t\tif [[ $? -eq 0 ]];then\n\t\t\t\techo -e \"${Info} 端口修改成功！新密码为：${Green_font_prefix}${aria2_RPC_port}${Font_color_suffix}\"\n\t\t\t\tDel_iptables\n\t\t\t\tAdd_iptables\n\t\t\t\tSave_iptables\n\t\t\t\tif [[ ${read_123} != \"1\" ]]; then\n\t\t\t\t\tRestart_aria2\n\t\t\t\tfi\n\t\t\telse \n\t\t\t\techo -e \"${Error} 端口修改失败！旧密码为：${Green_font_prefix}${aria2_port}${Font_color_suffix}\"\n\t\t\tfi\n\t\tfi\n\telse\n\t\techo -e \"${Error} 新端口与旧端口一致，取消...\"\n\tfi\n}\nSet_aria2_RPC_dir(){\n\tread_123=$1\n\tif [[ ${read_123} != \"1\" ]]; then\n\t\tRead_config\n\tfi\n\tif [[ -z \"${aria2_dir}\" ]]; then\n\t\taria2_dir_1=\"空(没有检测到配置，可能手动删除或注释了)\"\n\telse\n\t\taria2_dir_1=${aria2_dir}\n\tfi\n\techo -e \"请输入要设置的 Aria2 文件下载位置(旧位置为：${Green_font_prefix}${aria2_dir_1}${Font_color_suffix})\"\n\tread -e -p \"(默认位置: /usr/local/caddy/www/aria2/Download):\" aria2_RPC_dir\n\t[[ -z \"${aria2_RPC_dir}\" ]] && aria2_RPC_dir=\"/usr/local/caddy/www/aria2/Download\"\n\techo\n\tif [[ -d \"${aria2_RPC_dir}\" ]]; then\n\t\tif [[ \"${aria2_dir}\" != \"${aria2_RPC_dir}\" ]]; then\n\t\t\tif [[ -z \"${aria2_dir}\" ]]; then\n\t\t\t\techo -e \"\\ndir=${aria2_RPC_dir}\" >> ${aria2_conf}\n\t\t\t\tif [[ $? -eq 0 ]];then\n\t\t\t\t\techo -e \"${Info} 位置修改成功！新位置为：${Green_font_prefix}${aria2_RPC_dir}${Font_color_suffix}(因为找不到旧配置参数，所以自动加入配置文件底部)\"\n\t\t\t\t\tif [[ ${read_123} != \"1\" ]]; then\n\t\t\t\t\t\tRestart_aria2\n\t\t\t\t\tfi\n\t\t\t\telse \n\t\t\t\t\techo -e \"${Error} 位置修改失败！旧位置为：${Green_font_prefix}${aria2_dir}${Font_color_suffix}\"\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\taria2_dir_2=$(echo \"${aria2_dir}\"|sed 's/\\//\\\\\\//g')\n\t\t\t\taria2_RPC_dir_2=$(echo \"${aria2_RPC_dir}\"|sed 's/\\//\\\\\\//g')\n\t\t\t\tsed -i 's/^dir='${aria2_dir_2}'/dir='${aria2_RPC_dir_2}'/g' ${aria2_conf}\n\t\t\t\tif [[ $? -eq 0 ]];then\n\t\t\t\t\techo -e \"${Info} 位置修改成功！新位置为：${Green_font_prefix}${aria2_RPC_dir}${Font_color_suffix}\"\n\t\t\t\t\tif [[ ${read_123} != \"1\" ]]; then\n\t\t\t\t\t\tRestart_aria2\n\t\t\t\t\tfi\n\t\t\t\telse \n\t\t\t\t\techo -e \"${Error} 位置修改失败！旧位置为：${Green_font_prefix}${aria2_dir}${Font_color_suffix}\"\n\t\t\t\tfi\n\t\t\tfi\n\t\telse\n\t\t\techo -e \"${Error} 新位置与旧位置一致，取消...\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 新位置文件夹不存在，请检查！新位置为：${Green_font_prefix}${aria2_RPC_dir}${Font_color_suffix}\"\n\tfi\n}\nSet_aria2_RPC_passwd_port_dir(){\n\tRead_config\n\tSet_aria2_RPC_passwd \"1\"\n\tSet_aria2_RPC_port \"1\"\n\tSet_aria2_RPC_dir \"1\"\n\tRestart_aria2\n}\nSet_aria2_vim_conf(){\n\tRead_config\n\taria2_port_old=${aria2_port}\n\techo -e \"${Tip} 手动修改配置文件须知（nano 文本编辑器详细使用教程：https://doub.io/linux-jc13/）：\n${Green_font_prefix}1.${Font_color_suffix} 配置文件中含有中文注释，如果你的 服务器系统 或 SSH工具 不支持中文显示，将会乱码(请本地编辑)。\n${Green_font_prefix}2.${Font_color_suffix} 一会自动打开配置文件后，就可以开始手动编辑文件了。\n${Green_font_prefix}3.${Font_color_suffix} 如果要退出并保存文件，那么按 ${Green_font_prefix}Ctrl+X键${Font_color_suffix} 后，输入 ${Green_font_prefix}y${Font_color_suffix} 后，再按一下 ${Green_font_prefix}回车键${Font_color_suffix} 即可。\n${Green_font_prefix}4.${Font_color_suffix} 如果要退出并不保存文件，那么按 ${Green_font_prefix}Ctrl+X键${Font_color_suffix} 后，输入 ${Green_font_prefix}n${Font_color_suffix} 即可。\n${Green_font_prefix}5.${Font_color_suffix} 如果你想在本地编辑配置文件，那么配置文件位置： ${Green_font_prefix}/root/.aria2/aria2.conf${Font_color_suffix} (注意是隐藏目录) 。\" && echo\n\tread -e -p \"如果已经理解 nano 使用方法，请按任意键继续，如要取消请使用 Ctrl+C 。\" var\n\tnano \"${aria2_conf}\"\n\tRead_config\n\tif [[ ${aria2_port_old} != ${aria2_port} ]]; then\n\t\taria2_RPC_port=${aria2_port}\n\t\taria2_port=${aria2_port_old}\n\t\tDel_iptables\n\t\tAdd_iptables\n\t\tSave_iptables\n\tfi\n\tRestart_aria2\n}\nRead_config(){\n\tstatus_type=$1\n\tif [[ ! -e ${aria2_conf} ]]; then\n\t\tif [[ ${status_type} != \"un\" ]]; then\n\t\t\techo -e \"${Error} Aria2 配置文件不存在 !\" && exit 1\n\t\tfi\n\telse\n\t\tconf_text=$(cat ${aria2_conf}|grep -v '#')\n\t\taria2_dir=$(echo -e \"${conf_text}\"|grep \"dir=\"|awk -F \"=\" '{print $NF}')\n\t\taria2_port=$(echo -e \"${conf_text}\"|grep \"rpc-listen-port=\"|awk -F \"=\" '{print $NF}')\n\t\taria2_passwd=$(echo -e \"${conf_text}\"|grep \"rpc-secret=\"|awk -F \"=\" '{print $NF}')\n\tfi\n\t\n}\nView_Aria2(){\n\tcheck_installed_status\n\tRead_config\n\tip=$(wget -qO- -t1 -T2 ipinfo.io/ip)\n\tif [[ -z \"${ip}\" ]]; then\n\t\tip=$(wget -qO- -t1 -T2 api.ip.sb/ip)\n\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\tip=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\t\tip=\"VPS_IP(外网IP检测失败)\"\n\t\t\tfi\n\t\tfi\n\tfi\n\t[[ -z \"${aria2_dir}\" ]] && aria2_dir=\"找不到配置参数\"\n\t[[ -z \"${aria2_port}\" ]] && aria2_port=\"找不到配置参数\"\n\t[[ -z \"${aria2_passwd}\" ]] && aria2_passwd=\"找不到配置参数(或无密码)\"\n\tclear\n\techo -e \"\\nAria2 简单配置信息：\\n\n 地址\\t: ${Green_font_prefix}${ip}${Font_color_suffix}\n 端口\\t: ${Green_font_prefix}${aria2_port}${Font_color_suffix}\n 密码\\t: ${Green_font_prefix}${aria2_passwd}${Font_color_suffix}\n 目录\\t: ${Green_font_prefix}${aria2_dir}${Font_color_suffix}\\n\"\n}\nView_Log(){\n\t[[ ! -e ${aria2_log} ]] && echo -e \"${Error} Aria2 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${aria2_log}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${aria2_log}\n}\nUpdate_bt_tracker(){\n\tcheck_installed_status\n\tcheck_crontab_installed_status\n\tcrontab_update_status=$(crontab -l|grep \"aria2.sh update-bt-tracker\")\n\tif [[ -z \"${crontab_update_status}\" ]]; then\n\t\techo && echo -e \"当前自动更新模式: ${Red_font_prefix}未开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要开启 ${Green_font_prefix}Aria2 自动更新 BT-Tracker服务器${Font_color_suffix} 功能吗？(一般情况下会加强BT下载效果)[Y/n]\"\n\t\tread -e -p \"注意：该功能会定时重启 Aria2！(默认: y):\" crontab_update_status_ny\n\t\t[[ -z \"${crontab_update_status_ny}\" ]] && crontab_update_status_ny=\"y\"\n\t\tif [[ ${crontab_update_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_update_start\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"当前自动更新模式: ${Green_font_prefix}已开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要关闭 ${Red_font_prefix}Aria2 自动更新 BT-Tracker服务器${Font_color_suffix} 功能吗？(一般情况下会加强BT下载效果)[y/N]\"\n\t\tread -e -p \"注意：该功能会定时重启 Aria2！(默认: n):\" crontab_update_status_ny\n\t\t[[ -z \"${crontab_update_status_ny}\" ]] && crontab_update_status_ny=\"n\"\n\t\tif [[ ${crontab_update_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_update_stop\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\ncrontab_update_start(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/aria2.sh update-bt-tracker/d\" \"$file_1/crontab.bak\"\n\techo -e \"\\n0 3 * * 1 /bin/bash $file_1/aria2.sh update-bt-tracker\" >> \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -f \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"aria2.sh update-bt-tracker\")\n\tif [[ -z ${cron_config} ]]; then\n\t\techo -e \"${Error} Aria2 自动更新 BT-Tracker服务器 开启失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} Aria2 自动更新 BT-Tracker服务器 开启成功 !\"\n\t\tUpdate_bt_tracker_cron\n\tfi\n}\ncrontab_update_stop(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/aria2.sh update-bt-tracker/d\" \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -f \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"aria2.sh update-bt-tracker\")\n\tif [[ ! -z ${cron_config} ]]; then\n\t\techo -e \"${Error} Aria2 自动更新 BT-Tracker服务器 停止失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} Aria2 自动更新 BT-Tracker服务器 停止成功 !\"\n\tfi\n}\nUpdate_bt_tracker_cron(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/aria2 stop\n\tbt_tracker_list=$(wget -qO- https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all.txt |awk NF|sed \":a;N;s/\\n/,/g;ta\")\n\tif [ -z \"`grep \"bt-tracker\" ${aria2_conf}`\" ]; then\n\t\tsed -i '$a bt-tracker='${bt_tracker_list} \"${aria2_conf}\"\n\t\techo -e \"${Info} 添加成功...\"\n\telse\n\t\tsed -i \"s@bt-tracker.*@bt-tracker=$bt_tracker_list@g\" \"${aria2_conf}\"\n\t\techo -e \"${Info} 更新成功...\"\n\tfi\n\t/etc/init.d/aria2 start\n}\nUpdate_aria2(){\n\tcheck_installed_status\n\tcheck_new_ver\n\tcheck_ver_comparison\n}\nUninstall_aria2(){\n\tcheck_installed_status \"un\"\n\techo \"确定要卸载 Aria2 ? (y/N)\"\n\techo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcrontab -l > \"$file_1/crontab.bak\"\n\t\tsed -i \"/aria2.sh/d\" \"$file_1/crontab.bak\"\n\t\tcrontab \"$file_1/crontab.bak\"\n\t\trm -f \"$file_1/crontab.bak\"\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tRead_config \"un\"\n\t\tDel_iptables\n\t\tSave_iptables\n\t\tcd \"${Folder}\"\n\t\tmake uninstall\n\t\tcd ..\n\t\trm -rf \"${aria2c}\"\n\t\trm -rf \"${Folder}\"\n\t\trm -rf \"${file}\"\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del aria2\n\t\telse\n\t\t\tupdate-rc.d -f aria2 remove\n\t\tfi\n\t\trm -rf \"/etc/init.d/aria2\"\n\t\techo && echo \"Aria2 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${aria2_RPC_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${aria2_RPC_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${aria2_port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${aria2_port} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/aria2.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/aria2\" ]]; then\n\t\trm -rf /etc/init.d/aria2\n\t\tService_aria2\n\tfi\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/aria2.sh\" && chmod +x aria2.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\naction=$1\nif [[ \"${action}\" == \"update-bt-tracker\" ]]; then\n\tUpdate_bt_tracker_cron\nelse\necho && echo -e \" Aria2 一键安装管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  -- Toyo | doub.io/shell-jc4 --\n  \n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 Aria2\n ${Green_font_prefix} 2.${Font_color_suffix} 更新 Aria2\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 Aria2\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 Aria2\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 Aria2\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 Aria2\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 修改 配置文件\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 配置信息\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 日志信息\n ${Green_font_prefix}10.${Font_color_suffix} 配置 自动更新 BT-Tracker服务器\n————————————\" && echo\nif [[ -e ${aria2c} ]]; then\n\tcheck_pid\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\telse\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\tfi\nelse\n\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\nfi\necho\nread -e -p \" 请输入数字 [0-10]:\" num\ncase \"$num\" in\n\t0)\n\tUpdate_Shell\n\t;;\n\t1)\n\tInstall_aria2\n\t;;\n\t2)\n\tUpdate_aria2\n\t;;\n\t3)\n\tUninstall_aria2\n\t;;\n\t4)\n\tStart_aria2\n\t;;\n\t5)\n\tStop_aria2\n\t;;\n\t6)\n\tRestart_aria2\n\t;;\n\t7)\n\tSet_aria2\n\t;;\n\t8)\n\tView_Aria2\n\t;;\n\t9)\n\tView_Log\n\t;;\n\t10)\n\tUpdate_bt_tracker\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-10]\"\n\t;;\nesac\nfi"
        },
        {
          "name": "aria2_old.sh",
          "type": "blob",
          "size": 9.4912109375,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: Aria2\n#\tVersion: 1.0.4\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/shell-jc4/\n#=================================================\nsh_ver=\"1.0.4\"\nfile=\"/root/.aria2\"\naria2_conf=\"${file}/aria2.conf\"\naria2_log=\"/root/.aria2/aria2.log\"\naria2c=\"/usr/bin/aria2c\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_installed_status(){\n\t[[ ! -e ${aria2c} ]] && echo -e \"${Error} Aria2 没有安装，请检查 !\" && exit 1\n\t[[ ! -e ${aria2_conf} ]] && echo -e \"${Error} Aria2 配置文件不存在，请检查 !\" && [[ $1 != \"un\" ]] && exit 1\n}\ncheck_pid(){\n\tPID=`ps -ef| grep \"aria2c\"| grep -v grep| grep -v \".sh\"| grep -v \"init.d\"| grep -v \"service\"| awk '{print $2}'`\n}\nDownload_aria2(){\n\tmkdir \"${file}\" && cd \"${file}\"\n\twget --no-check-certificate -N \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/other/Aria2/aria2.conf\"\n\t[[ ! -s \"aria2.conf\" ]] && echo -e \"${Error} Aria2 配置文件下载失败 !\" && rm -rf \"${file}\" && exit 1\n\twget --no-check-certificate -N \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/other/Aria2/dht.dat\"\n\t[[ ! -s \"dht.dat\" ]] && echo -e \"${Error} Aria2 DHT文件下载失败 !\" && rm -rf \"${file}\" && exit 1\n\techo '' > aria2.session\n}\nService_aria2(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/other/aria2_centos -O /etc/init.d/aria2; then\n\t\t\techo -e \"${Error} Aria2服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/aria2\n\t\tchkconfig --add aria2\n\t\tchkconfig aria2 on\n\telse\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/other/aria2_debian -O /etc/init.d/aria2; then\n\t\t\techo -e \"${Error} Aria2服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/aria2\n\t\tupdate-rc.d -f aria2 defaults\n\tfi\n\techo -e \"${Info} Aria2服务 管理脚本下载完成 !\"\n}\nInstallation_dependency(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\t\tif [[ $? = 1 ]]; then\n\t\t\techo -e \"${Error} CentOS6 系统不支持安装 Aria2（源没有Aria2包），请更换 CentOS7 或其他系统安装 !\" && exit 1\n\t\tfi\n\t\twget -N --no-check-certificate http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n\t\t[[ ! -e \"epel-release-latest-7.noarch.rpm\" ]] && echo -e \"${Error} CentOS7 EPEL 源下载失败 !\" && exit 1\n\t\trpm -ivh epel-release-latest-7.noarch.rpm\n\t\trm -rf epel-release-latest-7.noarch.rpm\n\t\tyum update\n\t\tyum install aria2 curl unzip vim -y\n\telif [[ ${release} = \"debian\" ]]; then\n\t\tmv /etc/apt/sources.list /etc/apt/sources.list.bak\n\t\twget --no-check-certificate -O \"/etc/apt/sources.list\" \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/sources/us.sources_stretch.list\"\n\t\tapt-get update\n\t\tapt-get install aria2 curl unzip vim -y\n\t\trm -rf /etc/apt/sources.list\n\t\tmv /etc/apt/sources.list.bak /etc/apt/sources.list\n\t\tapt-get update\n\telse\n\t\tapt-get update\n\t\tapt-get install aria2 curl unzip vim -y\n\tfi\n\t[[ ! -e ${aria2c} ]] && echo -e \"${Error} Aria2 安装失败，请检查 !\" && exit 1\n}\nInstall_aria2(){\n\t[[ -e ${aria2c} ]] && echo -e \"${Error} Aria2 已安装，请检查 !\" && exit 1\n\tcheck_sys\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始下载/安装 配置文件...\"\n\tDownload_aria2\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService_aria2\n\tRead_config\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart_aria2\n}\nStart_aria2(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} Aria2 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/aria2 start\n}\nStop_aria2(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} Aria2 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/aria2 stop\n}\nRestart_aria2(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/aria2 stop\n\t/etc/init.d/aria2 start\n}\nSet_aria2(){\n\tcheck_installed_status\n\tvim ${aria2_conf}\n\tRestart_aria2\n}\nRead_config(){\n\t[[ ! -e ${aria2_conf} ]] && echo -e \"${Error} Aria2 配置文件不存在 !\" && exit 1\n\tconf_text=$(cat ${aria2_conf}|grep -v '#')\n\taria2_dir=$(echo -e \"${conf_text}\"|grep \"dir=\"|awk -F \"=\" '{print $NF}')\n\taria2_rpc_port=$(echo -e \"${conf_text}\"|grep \"rpc-listen-port=\"|awk -F \"=\" '{print $NF}')\n\taria2_rpc_secret=$(echo -e \"${conf_text}\"|grep \"rpc-secret=\"|awk -F \"=\" '{print $NF}')\n}\nView_Log(){\n\t[[ ! -e ${aria2_log} ]] && echo -e \"${Error} Aria2 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo\n\ttail -f ${aria2_log}\n}\nUninstall_aria2(){\n\tcheck_installed_status \"un\"\n\techo \"确定要卸载 Aria2 ? (y/N)\"\n\techo\n\tstty erase '^H' && read -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tRead_config\n\t\tDel_iptables\n\t\tSave_iptables\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del aria2\n\t\t\tyum remove aria2 -y\n\t\telse\n\t\t\tupdate-rc.d -f aria2 remove\n\t\t\tapt-get remove --purge aria2 -y\n\t\tfi\n\t\trm -rf ${file}\n\t\techo && echo \"Aria2 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${aria2_rpc_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${aria2_rpc_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${aria2_rpc_port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${aria2_rpc_port} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nUpdate_Shell(){\n\techo -e \"当前版本为 [ ${sh_ver} ]，开始检测最新版本...\"\n\tsh_new_ver=$(wget --no-check-certificate -qO- \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/aria2.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1)\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 检测最新版本失败 !\" && exit 0\n\tif [[ ${sh_new_ver} != ${sh_ver} ]]; then\n\t\techo -e \"发现新版本[ ${sh_new_ver} ]，是否更新？[Y/n]\"\n\t\tstty erase '^H' && read -p \"(默认: y):\" yn\n\t\t[[ -z \"${yn}\" ]] && yn=\"y\"\n\t\tif [[ ${yn} == [Yy] ]]; then\n\t\t\twget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/aria2.sh && chmod +x aria2.sh\n\t\t\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !\"\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo -e \"当前已是最新版本[ ${sh_new_ver} ] !\"\n\tfi\n}\necho && echo -e \" Aria2 一键安装管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  -- Toyo | doub.io/shell-jc4 --\n  \n ${Green_font_prefix}0.${Font_color_suffix} 升级脚本\n————————————\n ${Green_font_prefix}1.${Font_color_suffix} 安装 Aria2\n ${Green_font_prefix}2.${Font_color_suffix} 卸载 Aria2\n————————————\n ${Green_font_prefix}3.${Font_color_suffix} 启动 Aria2\n ${Green_font_prefix}4.${Font_color_suffix} 停止 Aria2\n ${Green_font_prefix}5.${Font_color_suffix} 重启 Aria2\n————————————\n ${Green_font_prefix}6.${Font_color_suffix} 修改 配置文件\n ${Green_font_prefix}7.${Font_color_suffix} 查看 日志信息\n————————————\" && echo\nif [[ -e ${aria2c} ]]; then\n\tcheck_pid\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\telse\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\tfi\nelse\n\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\nfi\necho\nstty erase '^H' && read -p \" 请输入数字 [0-7]:\" num\ncase \"$num\" in\n\t0)\n\tUpdate_Shell\n\t;;\n\t1)\n\tInstall_aria2\n\t;;\n\t2)\n\tUninstall_aria2\n\t;;\n\t3)\n\tStart_aria2\n\t;;\n\t4)\n\tStop_aria2\n\t;;\n\t5)\n\tRestart_aria2\n\t;;\n\t6)\n\tSet_aria2\n\t;;\n\t7)\n\tView_Log\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-7]\"\n\t;;\nesac"
        },
        {
          "name": "ban_iptables.sh",
          "type": "blob",
          "size": 15.4892578125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n#=================================================\n#       System Required: CentOS/Debian/Ubuntu\n#       Description: iptables 封禁 BT、PT、SPAM（垃圾邮件）和自定义端口、关键词\n#       Version: 1.0.10\n#       Blog: https://doub.io/shell-jc2/\n#=================================================\n\nsh_ver=\"1.0.10\"\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\n\nsmtp_port=\"25,26,465,587\"\npop3_port=\"109,110,995\"\nimap_port=\"143,218,220,993\"\nother_port=\"24,50,57,105,106,158,209,1109,24554,60177,60179\"\nbt_key_word=\"torrent\n.torrent\npeer_id=\nannounce\ninfo_hash\nget_peers\nfind_node\nBitTorrent\nannounce_peer\nBitTorrent protocol\nannounce.php?passkey=\nmagnet:\nxunlei\nsandai\nThunder\nXLLiveUD\"\n\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_BT(){\n\tCat_KEY_WORDS\n\tBT_KEY_WORDS=$(echo -e \"$Ban_KEY_WORDS_list\"|grep \"torrent\")\n}\ncheck_SPAM(){\n\tCat_PORT\n\tSPAM_PORT=$(echo -e \"$Ban_PORT_list\"|grep \"${smtp_port}\")\n}\nCat_PORT(){\n\tBan_PORT_list=$(iptables -t filter -L OUTPUT -nvx --line-numbers|grep \"REJECT\"|awk '{print $13}')\n}\nCat_KEY_WORDS(){\n\tBan_KEY_WORDS_list=\"\"\n\tBan_KEY_WORDS_v6_list=\"\"\n\tif [[ ! -z ${v6iptables} ]]; then\n\t\tBan_KEY_WORDS_v6_text=$(${v6iptables} -t mangle -L OUTPUT -nvx --line-numbers|grep \"DROP\")\n\t\tBan_KEY_WORDS_v6_list=$(echo -e \"${Ban_KEY_WORDS_v6_text}\"|sed -r 's/.*\\\"(.+)\\\".*/\\1/')\n\tfi\n\tBan_KEY_WORDS_text=$(${v4iptables} -t mangle -L OUTPUT -nvx --line-numbers|grep \"DROP\")\n\tBan_KEY_WORDS_list=$(echo -e \"${Ban_KEY_WORDS_text}\"|sed -r 's/.*\\\"(.+)\\\".*/\\1/')\n}\nView_PORT(){\n\tCat_PORT\n\techo -e \"===============${Red_background_prefix} 当前已封禁 端口 ${Font_color_suffix}===============\"\n\techo -e \"$Ban_PORT_list\" && echo && echo -e \"===============================================\"\n}\nView_KEY_WORDS(){\n\tCat_KEY_WORDS\n\techo -e \"==============${Red_background_prefix} 当前已封禁 关键词 ${Font_color_suffix}==============\"\n\techo -e \"$Ban_KEY_WORDS_list\" && echo -e \"===============================================\"\n}\nView_ALL(){\n\techo\n\tView_PORT\n\tView_KEY_WORDS\n\techo\n}\nSave_iptables_v4_v6(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tif [[ ! -z \"$v6iptables\" ]]; then\n\t\t\tservice ip6tables save\n\t\t\tchkconfig --level 2345 ip6tables on\n\t\tfi\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tif [[ ! -z \"$v6iptables\" ]]; then\n\t\t\tip6tables-save > /etc/ip6tables.up.rules\n\t\t\techo -e \"#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules\\n/sbin/ip6tables-restore < /etc/ip6tables.up.rules\" > /etc/network/if-pre-up.d/iptables\n\t\telse\n\t\t\techo -e \"#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules\" > /etc/network/if-pre-up.d/iptables\n\t\tfi\n\t\tiptables-save > /etc/iptables.up.rules\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nSet_key_word() { $1 -t mangle -$3 OUTPUT -m string --string \"$2\" --algo bm --to 65535 -j DROP; }\nSet_tcp_port() {\n\t[[ \"$1\" = \"$v4iptables\" ]] && $1 -t filter -$3 OUTPUT -p tcp -m multiport --dports \"$2\" -m state --state NEW,ESTABLISHED -j REJECT --reject-with icmp-port-unreachable\n\t[[ \"$1\" = \"$v6iptables\" ]] && $1 -t filter -$3 OUTPUT -p tcp -m multiport --dports \"$2\" -m state --state NEW,ESTABLISHED -j REJECT --reject-with tcp-reset\n}\nSet_udp_port() { $1 -t filter -$3 OUTPUT -p udp -m multiport --dports \"$2\" -j DROP; }\nSet_SPAM_Code_v4(){\n\tfor i in ${smtp_port} ${pop3_port} ${imap_port} ${other_port}\n\t\tdo\n\t\tSet_tcp_port $v4iptables \"$i\" $s\n\t\tSet_udp_port $v4iptables \"$i\" $s\n\tdone\n}\nSet_SPAM_Code_v4_v6(){\n\tfor i in ${smtp_port} ${pop3_port} ${imap_port} ${other_port}\n\tdo\n\t\tfor j in $v4iptables $v6iptables\n\t\tdo\n\t\t\tSet_tcp_port $j \"$i\" $s\n\t\t\tSet_udp_port $j \"$i\" $s\n\t\tdone\n\tdone\n}\nSet_PORT(){\n\tif [[ -n \"$v4iptables\" ]] && [[ -n \"$v6iptables\" ]]; then\n\t\tSet_tcp_port $v4iptables $PORT $s\n\t\tSet_udp_port $v4iptables $PORT $s\n\t\tSet_tcp_port $v6iptables $PORT $s\n\t\tSet_udp_port $v6iptables $PORT $s\n\telif [[ -n \"$v4iptables\" ]]; then\n\t\tSet_tcp_port $v4iptables $PORT $s\n\t\tSet_udp_port $v4iptables $PORT $s\n\tfi\n\tSave_iptables_v4_v6\n}\nSet_KEY_WORDS(){\n\tkey_word_num=$(echo -e \"${key_word}\"|wc -l)\n\tfor((integer = 1; integer <= ${key_word_num}; integer++))\n\t\tdo\n\t\t\ti=$(echo -e \"${key_word}\"|sed -n \"${integer}p\")\n\t\t\tSet_key_word $v4iptables \"$i\" $s\n\t\t\t[[ ! -z \"$v6iptables\" ]] && Set_key_word $v6iptables \"$i\" $s\n\tdone\n\tSave_iptables_v4_v6\n}\nSet_BT(){\n\tkey_word=${bt_key_word}\n\tSet_KEY_WORDS\n\tSave_iptables_v4_v6\n}\nSet_SPAM(){\n\tif [[ -n \"$v4iptables\" ]] && [[ -n \"$v6iptables\" ]]; then\n\t\tSet_SPAM_Code_v4_v6\n\telif [[ -n \"$v4iptables\" ]]; then\n\t\tSet_SPAM_Code_v4\n\tfi\n\tSave_iptables_v4_v6\n}\nSet_ALL(){\n\tSet_BT\n\tSet_SPAM\n}\nBan_BT(){\n\tcheck_BT\n\t[[ ! -z ${BT_KEY_WORDS} ]] && echo -e \"${Error} 检测到已封禁BT、PT 关键词，无需再次封禁 !\" && exit 0\n\ts=\"A\"\n\tSet_BT\n\tView_ALL\n\techo -e \"${Info} 已封禁BT、PT 关键词 !\"\n}\nBan_SPAM(){\n\tcheck_SPAM\n\t[[ ! -z ${SPAM_PORT} ]] && echo -e \"${Error} 检测到已封禁SPAM(垃圾邮件) 端口，无需再次封禁 !\" && exit 0\n\ts=\"A\"\n\tSet_SPAM\n\tView_ALL\n\techo -e \"${Info} 已封禁SPAM(垃圾邮件) 端口 !\"\n}\nBan_ALL(){\n\tcheck_BT\n\tcheck_SPAM\n\ts=\"A\"\n\tif [[ -z ${BT_KEY_WORDS} ]]; then\n\t\tif [[ -z ${SPAM_PORT} ]]; then\n\t\t\tSet_ALL\n\t\t\tView_ALL\n\t\t\techo -e \"${Info} 已封禁BT、PT 关键词 和 SPAM(垃圾邮件) 端口 !\"\n\t\telse\n\t\t\tSet_BT\n\t\t\tView_ALL\n\t\t\techo -e \"${Info} 已封禁BT、PT 关键词 !\"\n\t\tfi\n\telse\n\t\tif [[ -z ${SPAM_PORT} ]]; then\n\t\t\tSet_SPAM\n\t\t\tView_ALL\n\t\t\techo -e \"${Info} 已封禁SPAM(垃圾邮件) 端口 !\"\n\t\telse\n\t\t\techo -e \"${Error} 检测到已封禁BT、PT 关键词 和 SPAM(垃圾邮件) 端口，无需再次封禁 !\" && exit 0\n\t\tfi\n\tfi\n}\nUnBan_BT(){\n\tcheck_BT\n\t[[ -z ${BT_KEY_WORDS} ]] && echo -e \"${Error} 检测到未封禁BT、PT 关键词，请检查 !\" && exit 0\n\ts=\"D\"\n\tSet_BT\n\tView_ALL\n\techo -e \"${Info} 已解封BT、PT 关键词 !\"\n}\nUnBan_SPAM(){\n\tcheck_SPAM\n\t[[ -z ${SPAM_PORT} ]] && echo -e \"${Error} 检测到未封禁SPAM(垃圾邮件) 端口，请检查 !\" && exit 0\n\ts=\"D\"\n\tSet_SPAM\n\tView_ALL\n\techo -e \"${Info} 已解封SPAM(垃圾邮件) 端口 !\"\n}\nUnBan_ALL(){\n\tcheck_BT\n\tcheck_SPAM\n\ts=\"D\"\n\tif [[ ! -z ${BT_KEY_WORDS} ]]; then\n\t\tif [[ ! -z ${SPAM_PORT} ]]; then\n\t\t\tSet_ALL\n\t\t\tView_ALL\n\t\t\techo -e \"${Info} 已解封BT、PT 关键词 和 SPAM(垃圾邮件) 端口 !\"\n\t\telse\n\t\t\tSet_BT\n\t\t\tView_ALL\n\t\t\techo -e \"${Info} 已解封BT、PT 关键词 !\"\n\t\tfi\n\telse\n\t\tif [[ ! -z ${SPAM_PORT} ]]; then\n\t\t\tSet_SPAM\n\t\t\tView_ALL\n\t\t\techo -e \"${Info} 已解封SPAM(垃圾邮件) 端口 !\"\n\t\telse\n\t\t\techo -e \"${Error} 检测到未封禁BT、PT 关键词和 SPAM(垃圾邮件) 端口，请检查 !\" && exit 0\n\t\tfi\n\tfi\n}\nENTER_Ban_KEY_WORDS_type(){\n\tType=$1\n\tType_1=$2\n\tif [[ $Type_1 != \"ban_1\" ]]; then\n\t\techo -e \"请选择输入类型：\n 1. 手动输入（只支持单个关键词）\n 2. 本地文件读取（支持批量读取关键词，每行一个关键词）\n 3. 网络地址读取（支持批量读取关键词，每行一个关键词）\" && echo\n\t\tread -e -p \"(默认: 1. 手动输入):\" key_word_type\n\tfi\n\t[[ -z \"${key_word_type}\" ]] && key_word_type=\"1\"\n\tif [[ ${key_word_type} == \"1\" ]]; then\n\t\tif [[ $Type == \"ban\" ]]; then\n\t\t\tENTER_Ban_KEY_WORDS\n\t\telse\n\t\t\tENTER_UnBan_KEY_WORDS\n\t\tfi\n\telif [[ ${key_word_type} == \"2\" ]]; then\n\t\tENTER_Ban_KEY_WORDS_file\n\telif [[ ${key_word_type} == \"3\" ]]; then\n\t\tENTER_Ban_KEY_WORDS_url\n\telse\n\t\tif [[ $Type == \"ban\" ]]; then\n\t\t\tENTER_Ban_KEY_WORDS\n\t\telse\n\t\t\tENTER_UnBan_KEY_WORDS\n\t\tfi\n\tfi\n}\nENTER_Ban_PORT(){\n\techo -e \"请输入欲封禁的 端口（单端口/多端口/连续端口段）\"\n\tif [[ ${Ban_PORT_Type_1} != \"1\" ]]; then\n\techo -e \"${Green_font_prefix}========示例说明========${Font_color_suffix}\n 单端口：25（单个端口）\n 多端口：25,26,465,587（多个端口用英文逗号分割）\n 连续端口段：25:587（25-587之间的所有端口）\" && echo\n\tfi\n\tread -e -p \"(回车默认取消):\" PORT\n\t[[ -z \"${PORT}\" ]] && echo \"已取消...\" && View_ALL && exit 0\n}\nENTER_Ban_KEY_WORDS(){\n\techo -e \"请输入欲封禁的 关键词（域名等，仅支持单个关键词）\"\n\tif [[ ${Type_1} != \"ban_1\" ]]; then\n\techo -e \"${Green_font_prefix}========示例说明========${Font_color_suffix}\n 关键词：youtube，即禁止访问任何包含关键词 youtube 的域名。\n 关键词：youtube.com，即禁止访问任何包含关键词 youtube.com 的域名（泛域名屏蔽）。\n 关键词：www.youtube.com，即禁止访问任何包含关键词 www.youtube.com 的域名（子域名屏蔽）。\n 更多效果自行测试（如关键词 .zip 即可禁止下载任何 .zip 后缀的文件）。\" && echo\n\tfi\n\tread -e -p \"(回车默认取消):\" key_word\n\t[[ -z \"${key_word}\" ]] && echo \"已取消...\" && View_ALL && exit 0\n}\nENTER_Ban_KEY_WORDS_file(){\n\techo -e \"请输入欲封禁/解封的 关键词本地文件（请使用绝对路径）\" && echo\n\tread -e -p \"(默认 读取脚本同目录下的 key_word.txt ):\" key_word\n\t[[ -z \"${key_word}\" ]] && key_word=\"key_word.txt\"\n\tif [[ -e \"${key_word}\" ]]; then\n\t\tkey_word=$(cat \"${key_word}\")\n\t\t[[ -z ${key_word} ]] && echo -e \"${Error} 文件内容为空 !\" && View_ALL && exit 0\n\telse\n\t\techo -e \"${Error} 没有找到文件 ${key_word} !\" && View_ALL && exit 0\n\tfi\n}\nENTER_Ban_KEY_WORDS_url(){\n\techo -e \"请输入欲封禁/解封的 关键词网络文件地址（例如 http://xxx.xx/key_word.txt）\" && echo\n\tread -e -p \"(回车默认取消):\" key_word\n\t[[ -z \"${key_word}\" ]] && echo \"已取消...\" && View_ALL && exit 0\n\tkey_word=$(wget --no-check-certificate -t3 -T5 -qO- \"${key_word}\")\n\t[[ -z ${key_word} ]] && echo -e \"${Error} 网络文件内容为空或访问超时 !\" && View_ALL && exit 0\n}\nENTER_UnBan_KEY_WORDS(){\n\tView_KEY_WORDS\n\techo -e \"请输入欲解封的 关键词（根据上面的列表输入完整准确的 关键词）\" && echo\n\tread -e -p \"(回车默认取消):\" key_word\n\t[[ -z \"${key_word}\" ]] && echo \"已取消...\" && View_ALL && exit 0\n}\nENTER_UnBan_PORT(){\n\techo -e \"请输入欲解封的 端口（根据上面的列表输入完整准确的 端口，包括逗号、冒号）\" && echo\n\tread -e -p \"(回车默认取消):\" PORT\n\t[[ -z \"${PORT}\" ]] && echo \"已取消...\" && View_ALL && exit 0\n}\nBan_PORT(){\n\ts=\"A\"\n\tENTER_Ban_PORT\n\tSet_PORT\n\techo -e \"${Info} 已封禁端口 [ ${PORT} ] !\\n\"\n\tBan_PORT_Type_1=\"1\"\n\twhile true\n\tdo\n\t\tENTER_Ban_PORT\n\t\tSet_PORT\n\t\techo -e \"${Info} 已封禁端口 [ ${PORT} ] !\\n\"\n\tdone\n\tView_ALL\n}\nBan_KEY_WORDS(){\n\ts=\"A\"\n\tENTER_Ban_KEY_WORDS_type \"ban\"\n\tSet_KEY_WORDS\n\techo -e \"${Info} 已封禁关键词 [ ${key_word} ] !\\n\"\n\twhile true\n\tdo\n\t\tENTER_Ban_KEY_WORDS_type \"ban\" \"ban_1\"\n\t\tSet_KEY_WORDS\n\t\techo -e \"${Info} 已封禁关键词 [ ${key_word} ] !\\n\"\n\tdone\n\tView_ALL\n}\nUnBan_PORT(){\n\ts=\"D\"\n\tView_PORT\n\t[[ -z ${Ban_PORT_list} ]] && echo -e \"${Error} 检测到未封禁任何 端口 !\" && exit 0\n\tENTER_UnBan_PORT\n\tSet_PORT\n\techo -e \"${Info} 已解封端口 [ ${PORT} ] !\\n\"\n\twhile true\n\tdo\n\t\tView_PORT\n\t\t[[ -z ${Ban_PORT_list} ]] && echo -e \"${Error} 检测到未封禁任何 端口 !\" && exit 0\n\t\tENTER_UnBan_PORT\n\t\tSet_PORT\n\t\techo -e \"${Info} 已解封端口 [ ${PORT} ] !\\n\"\n\tdone\n\tView_ALL\n}\nUnBan_KEY_WORDS(){\n\ts=\"D\"\n\tCat_KEY_WORDS\n\t[[ -z ${Ban_KEY_WORDS_list} ]] && echo -e \"${Error} 检测到未封禁任何 关键词 !\" && exit 0\n\tENTER_Ban_KEY_WORDS_type \"unban\"\n\tSet_KEY_WORDS\n\techo -e \"${Info} 已解封关键词 [ ${key_word} ] !\\n\"\n\twhile true\n\tdo\n\t\tCat_KEY_WORDS\n\t\t[[ -z ${Ban_KEY_WORDS_list} ]] && echo -e \"${Error} 检测到未封禁任何 关键词 !\" && exit 0\n\t\tENTER_Ban_KEY_WORDS_type \"unban\" \"ban_1\"\n\t\tSet_KEY_WORDS\n\t\techo -e \"${Info} 已解封关键词 [ ${key_word} ] !\\n\"\n\tdone\n\tView_ALL\n}\nUnBan_KEY_WORDS_ALL(){\n\tCat_KEY_WORDS\n\t[[ -z ${Ban_KEY_WORDS_text} ]] && echo -e \"${Error} 检测到未封禁任何 关键词，请检查 !\" && exit 0\n\tif [[ ! -z \"${v6iptables}\" ]]; then\n\t\tBan_KEY_WORDS_v6_num=$(echo -e \"${Ban_KEY_WORDS_v6_list}\"|wc -l)\n\t\tfor((integer = 1; integer <= ${Ban_KEY_WORDS_v6_num}; integer++))\n\t\t\tdo\n\t\t\t\t${v6iptables} -t mangle -D OUTPUT 1\n\t\tdone\n\tfi\n\tBan_KEY_WORDS_num=$(echo -e \"${Ban_KEY_WORDS_list}\"|wc -l)\n\tfor((integer = 1; integer <= ${Ban_KEY_WORDS_num}; integer++))\n\t\tdo\n\t\t\t${v4iptables} -t mangle -D OUTPUT 1\n\tdone\n\tSave_iptables_v4_v6\n\tView_ALL\n\techo -e \"${Info} 已解封所有关键词 !\"\n}\ncheck_iptables(){\n\tv4iptables=`iptables -V`\n\tv6iptables=`ip6tables -V`\n\tif [[ ! -z ${v4iptables} ]]; then\n\t\tv4iptables=\"iptables\"\n\t\tif [[ ! -z ${v6iptables} ]]; then\n\t\t\tv6iptables=\"ip6tables\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 未安装 iptables 防火墙 !\n请安装 iptables防火墙：\nCentOS 系统：yum install iptables -y\nDebian / Ubuntu 系统：apt-get install iptables -y\"\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ban_iptables.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1)\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ban_iptables.sh\" && chmod +x ban_iptables.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\ncheck_sys\ncheck_iptables\naction=$1\nif [[ ! -z $action ]]; then\n\t[[ $action = \"banbt\" ]] && Ban_BT && exit 0\n\t[[ $action = \"banspam\" ]] && Ban_SPAM && exit 0\n\t[[ $action = \"banall\" ]] && Ban_ALL && exit 0\n\t[[ $action = \"unbanbt\" ]] && UnBan_BT && exit 0\n\t[[ $action = \"unbanspam\" ]] && UnBan_SPAM && exit 0\n\t[[ $action = \"unbanall\" ]] && UnBan_ALL && exit 0\nfi\necho && echo -e \" iptables防火墙 封禁管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  -- Toyo | doub.io/shell-jc2 --\n\n  ${Green_font_prefix}0.${Font_color_suffix} 查看 当前封禁列表\n————————————\n  ${Green_font_prefix}1.${Font_color_suffix} 封禁 BT、PT\n  ${Green_font_prefix}2.${Font_color_suffix} 封禁 SPAM(垃圾邮件)\n  ${Green_font_prefix}3.${Font_color_suffix} 封禁 BT、PT+SPAM\n  ${Green_font_prefix}4.${Font_color_suffix} 封禁 自定义  端口\n  ${Green_font_prefix}5.${Font_color_suffix} 封禁 自定义关键词\n————————————\n  ${Green_font_prefix}6.${Font_color_suffix} 解封 BT、PT\n  ${Green_font_prefix}7.${Font_color_suffix} 解封 SPAM(垃圾邮件)\n  ${Green_font_prefix}8.${Font_color_suffix} 解封 BT、PT+SPAM\n  ${Green_font_prefix}9.${Font_color_suffix} 解封 自定义  端口\n ${Green_font_prefix}10.${Font_color_suffix} 解封 自定义关键词\n ${Green_font_prefix}11.${Font_color_suffix} 解封 所有  关键词\n————————————\n ${Green_font_prefix}12.${Font_color_suffix} 升级脚本\n\" && echo\nread -e -p \" 请输入数字 [0-12]:\" num\ncase \"$num\" in\n\t0)\n\tView_ALL\n\t;;\n\t1)\n\tBan_BT\n\t;;\n\t2)\n\tBan_SPAM\n\t;;\n\t3)\n\tBan_ALL\n\t;;\n\t4)\n\tBan_PORT\n\t;;\n\t5)\n\tBan_KEY_WORDS\n\t;;\n\t6)\n\tUnBan_BT\n\t;;\n\t7)\n\tUnBan_SPAM\n\t;;\n\t8)\n\tUnBan_ALL\n\t;;\n\t9)\n\tUnBan_PORT\n\t;;\n\t10)\n\tUnBan_KEY_WORDS\n\t;;\n\t11)\n\tUnBan_KEY_WORDS_ALL\n\t;;\n\t12)\n\tUpdate_Shell\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-12]\"\n\t;;\nesac"
        },
        {
          "name": "base64.sh",
          "type": "blob",
          "size": 1.4580078125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\" && Error=\"${Red_font_prefix}[错误]${Font_color_suffix}\" && Tip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\nurlsafe_base64(){\n\tdate=$(echo -n \"$1\"|base64|sed ':a;N;s/\\n/ /g;ta'|sed 's/ //g;s/=//g;s/+/-/g;s/\\//_/g')\n\techo -e \"${date}\"\n}\nurlsafe_base64_d(){\n\tdate=$(echo -n \"$1\"|sed 's/-/+/g;s/_/\\//g'|base64 -d)\n\techo -e \"${date}\"\n}\nset_type(){\n\techo -e \"你要干什么呢？\n ${Green_font_prefix}1.${Font_color_suffix} URL_Safe_Base64 加密文本\n ${Green_font_prefix}2.${Font_color_suffix} URL_Safe_Base64 解密文本\"\n\tread -e -p \"(默认:1):\" enter_type\n\t[[ -z \"${enter_type}\" ]] && enter_type=\"1\"\n\tif [[ ${enter_type} == \"1\" ]]; then\n\t\tset_text \"1\"\n\telif [[ ${enter_type} == \"2\" ]]; then\n\t\tset_text \"2\"\n\telse\n\t\tset_text \"1\"\n\tfi\n}\nset_text(){\n\techo \"请输入要 URL_Safe_Base64 加密/解密 的文本\"\n\tread -e -p \"(默认回车取消):\" text\n\t[[ -z \"${text}\" ]] && echo \"已取消...\" && exit 1\n\t[[ -z \"${enter_type}\" ]] && enter_type=\"1\"\n\tif [[ $1 == \"1\" ]]; then\n\t\techo && urlsafe_base64 \"${text}\" && echo\n\telif [[ $1 == \"2\" ]]; then\n\t\techo && urlsafe_base64_d \"${text}\" && echo\n\telse\n\t\techo && urlsafe_base64 \"${text}\" && echo\n\tfi\n}\nset_type"
        },
        {
          "name": "bbr.sh",
          "type": "blob",
          "size": 9.4921875,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: Debian/Ubuntu\n#\tDescription: TCP-BBR\n#\tVersion: 1.0.22\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/wlzy-16/\n#=================================================\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前非ROOT账号(或没有ROOT权限)，无法继续操作，请更换ROOT账号或使用 ${Green_background_prefix}sudo su${Font_color_suffix} 命令获取临时ROOT权限（执行后可能会提示输入当前账号的密码）。\" && exit 1\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n}\nSet_latest_new_version(){\n\techo -e \"请输入 要下载安装的Linux内核版本(BBR) ${Green_font_prefix}[ 格式: x.xx.xx ，例如: 4.9.96 ]${Font_color_suffix}\n${Tip} 内核版本列表请去这里获取：${Green_font_prefix}[ http://kernel.ubuntu.com/~kernel-ppa/mainline/ ]${Font_color_suffix}\n建议使用${Green_font_prefix}稳定版本：4.9.XX ${Font_color_suffix}，4.9 以上版本属于测试版，稳定版与测试版同步更新，BBR 加速效果无区别。\"\n\tread -e -p \"(直接回车，自动获取最新稳定版本):\" latest_version\n\t[[ -z \"${latest_version}\" ]] && get_latest_new_version\n\techo\n}\n# 本段获取最新版本的代码来源自: https://teddysun.com/489.html\nget_latest_new_version(){\n\techo -e \"${Info} 检测稳定版内核最新版本中...\"\n\tlatest_version=$(wget -qO- -t1 -T2 \"http://kernel.ubuntu.com/~kernel-ppa/mainline/\" | awk -F'\\\"v' '/v4.9.*/{print $2}' |grep -v '\\-rc'| cut -d/ -f1 | sort -V | tail -1)\n\t[[ -z ${latest_version} ]] && echo -e \"${Error} 检测内核最新版本失败 !\" && exit 1\n\techo -e \"${Info} 稳定版内核最新版本为 : ${latest_version}\"\n}\nget_latest_version(){\n\tSet_latest_new_version\n\tbit=`uname -m`\n\tif [[ ${bit} == \"x86_64\" ]]; then\n\t\tdeb_name=$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${latest_version}/ | grep \"linux-image\" | grep \"generic\" | awk -F'\\\">' '/amd64.deb/{print $2}' | cut -d'<' -f1 | head -1 )\n\t\tdeb_kernel_url=\"http://kernel.ubuntu.com/~kernel-ppa/mainline/v${latest_version}/${deb_name}\"\n\t\tdeb_kernel_name=\"linux-image-${latest_version}-amd64.deb\"\n\telse\n\t\tdeb_name=$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${latest_version}/ | grep \"linux-image\" | grep \"generic\" | awk -F'\\\">' '/i386.deb/{print $2}' | cut -d'<' -f1 | head -1)\n\t\tdeb_kernel_url=\"http://kernel.ubuntu.com/~kernel-ppa/mainline/v${latest_version}/${deb_name}\"\n\t\tdeb_kernel_name=\"linux-image-${latest_version}-i386.deb\"\n\tfi\n}\n#检查内核是否满足\ncheck_deb_off(){\n\tget_latest_new_version\n\tdeb_ver=`dpkg -l|grep linux-image | awk '{print $2}' | awk -F '-' '{print $3}' | grep '[4-9].[0-9]*.'`\n\tlatest_version_2=$(echo \"${latest_version}\"|grep -o '\\.'|wc -l)\n\tif [[ \"${latest_version_2}\" == \"1\" ]]; then\n\t\tlatest_version=\"${latest_version}.0\"\n\tfi\n\tif [[ \"${deb_ver}\" != \"\" ]]; then\n\t\tif [[ \"${deb_ver}\" == \"${latest_version}\" ]]; then\n\t\t\techo -e \"${Info} 检测到当前内核版本[${deb_ver}] 已满足要求，继续...\"\n\t\telse\n\t\t\techo -e \"${Tip} 检测到当前内核版本[${deb_ver}] 支持开启BBR 但不是最新内核版本，可以使用${Green_font_prefix} bash ${file}/bbr.sh ${Font_color_suffix}来升级内核 !(注意：并不是越新的内核越好，4.9 以上版本的内核 目前皆为测试版，不保证稳定性，旧版本如使用无问题 建议不要升级！)\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 检测到当前内核版本[${deb_ver}] 不支持开启BBR，请使用${Green_font_prefix} bash ${file}/bbr.sh ${Font_color_suffix}来更换最新内核 !\" && exit 1\n\tfi\n}\n# 删除其余内核\ndel_deb(){\n\tdeb_total=`dpkg -l | grep linux-image | awk '{print $2}' | grep -v \"${latest_version}\" | wc -l`\n\tif [[ \"${deb_total}\" -ge \"1\" ]]; then\n\t\techo -e \"${Info} 检测到 ${deb_total} 个其余内核，开始卸载...\"\n\t\tfor((integer = 1; integer <= ${deb_total}; integer++))\n\t\tdo\n\t\t\tdeb_del=`dpkg -l|grep linux-image | awk '{print $2}' | grep -v \"${latest_version}\" | head -${integer}`\n\t\t\techo -e \"${Info} 开始卸载 ${deb_del} 内核...\"\n\t\t\tapt-get purge -y ${deb_del}\n\t\t\techo -e \"${Info} 卸载 ${deb_del} 内核卸载完成，继续...\"\n\t\tdone\n\t\tdeb_total=`dpkg -l|grep linux-image | awk '{print $2}' | wc -l`\n\t\tif [[ \"${deb_total}\" = \"1\" ]]; then\n\t\t\techo -e \"${Info} 内核卸载完毕，继续...\"\n\t\telse\n\t\t\techo -e \"${Error} 内核卸载异常，请检查 !\" && exit 1\n\t\tfi\n\telse\n\t\techo -e \"${Info} 检测到除刚安装的内核以外已无多余内核，跳过卸载多余内核步骤 !\"\n\tfi\n}\ndel_deb_over(){\n\tdel_deb\n\tupdate-grub\n\taddsysctl\n\techo -e \"${Tip} 重启VPS后，请运行脚本查看 BBR 是否正常加载，运行命令： ${Green_background_prefix} bash ${file}/bbr.sh status ${Font_color_suffix}\"\n\tread -e -p \"需要重启VPS后，才能开启BBR，是否现在重启 ? [Y/n] :\" yn\n\t[[ -z \"${yn}\" ]] && yn=\"y\"\n\tif [[ $yn == [Yy] ]]; then\n\t\techo -e \"${Info} VPS 重启中...\"\n\t\treboot\n\tfi\n}\n# 安装BBR\ninstallbbr(){\n\tcheck_root\n\tget_latest_version\n\tdeb_ver=`dpkg -l|grep linux-image | awk '{print $2}' | awk -F '-' '{print $3}' | grep '[4-9].[0-9]*.'`\n\tlatest_version_2=$(echo \"${latest_version}\"|grep -o '\\.'|wc -l)\n\tif [[ \"${latest_version_2}\" == \"1\" ]]; then\n\t\tlatest_version=\"${latest_version}.0\"\n\tfi\n\tif [[ \"${deb_ver}\" != \"\" ]]; then\t\n\t\tif [[ \"${deb_ver}\" == \"${latest_version}\" ]]; then\n\t\t\techo -e \"${Info} 检测到当前内核版本[${deb_ver}] 已是最新版本，无需继续 !\"\n\t\t\tdeb_total=`dpkg -l|grep linux-image | awk '{print $2}' | grep -v \"${latest_version}\" | wc -l`\n\t\t\tif [[ \"${deb_total}\" != \"0\" ]]; then\n\t\t\t\techo -e \"${Info} 检测到内核数量异常，存在多余内核，开始删除...\"\n\t\t\t\tdel_deb_over\n\t\t\telse\n\t\t\t\texit 1\n\t\t\tfi\n\t\telse\n\t\t\techo -e \"${Info} 检测到当前内核版本支持开启BBR 但不是最新内核版本，开始升级(或降级)内核...\"\n\t\tfi\n\telse\n\t\techo -e \"${Info} 检测到当前内核版本不支持开启BBR，开始...\"\n\t\tvirt=`virt-what`\n\t\tif [[ -z ${virt} ]]; then\n\t\t\tapt-get update && apt-get install virt-what -y\n\t\t\tvirt=`virt-what`\n\t\tfi\n\t\tif [[ ${virt} == \"openvz\" ]]; then\n\t\t\techo -e \"${Error} BBR 不支持 OpenVZ 虚拟化(不支持更换内核) !\" && exit 1\n\t\tfi\n\tfi\n\techo \"nameserver 8.8.8.8\" > /etc/resolv.conf\n\techo \"nameserver 8.8.4.4\" >> /etc/resolv.conf\n\t\n\twget -O \"${deb_kernel_name}\" \"${deb_kernel_url}\"\n\tif [[ -s ${deb_kernel_name} ]]; then\n\t\techo -e \"${Info} 内核安装包下载成功，开始安装内核...\"\n\t\tdpkg -i ${deb_kernel_name}\n\t\trm -rf ${deb_kernel_name}\n\telse\n\t\techo -e \"${Error} 内核安装包下载失败，请检查 !\" && exit 1\n\tfi\n\t#判断内核是否安装成功\n\tdeb_ver=`dpkg -l | grep linux-image | awk '{print $2}' | awk -F '-' '{print $3}' | grep \"${latest_version}\"`\n\tif [[ \"${deb_ver}\" != \"\" ]]; then\n\t\techo -e \"${Info} 检测到内核安装成功，开始卸载其余内核...\"\n\t\tdel_deb_over\n\telse\n\t\techo -e \"${Error} 检测到内核安装失败，请检查 !\" && exit 1\n\tfi\n}\nbbrstatus(){\n\tcheck_bbr_status_on=`sysctl net.ipv4.tcp_congestion_control | awk '{print $3}'`\n\tif [[ \"${check_bbr_status_on}\" = \"bbr\" ]]; then\n\t\techo -e \"${Info} 检测到 BBR 已开启 !\"\n\t\t# 检查是否启动BBR\n\t\tcheck_bbr_status_off=`lsmod | grep bbr`\n\t\tif [[ \"${check_bbr_status_off}\" = \"\" ]]; then\n\t\t\techo -e \"${Error} 检测到 BBR 已开启但未正常启动，请尝试使用低版本内核(可能是存着兼容性问题，虽然内核配置中打开了BBR，但是内核加载BBR模块失败) !\"\n\t\telse\n\t\t\techo -e \"${Info} 检测到 BBR 已开启并已正常启动 !\"\n\t\tfi\n\t\texit 1\n\tfi\n}\naddsysctl(){\n\tsed -i '/net\\.core\\.default_qdisc=fq/d' /etc/sysctl.conf\n\tsed -i '/net\\.ipv4\\.tcp_congestion_control=bbr/d' /etc/sysctl.conf\n\t\n\techo \"net.core.default_qdisc=fq\" >> /etc/sysctl.conf\n\techo \"net.ipv4.tcp_congestion_control=bbr\" >> /etc/sysctl.conf\n\tsysctl -p\n}\nstartbbr(){\n\tcheck_deb_off\n\tbbrstatus\n\taddsysctl\n\tsleep 1s\n\tbbrstatus\n}\n# 关闭BBR\nstopbbr(){\n\tcheck_deb_off\n\tsed -i '/net\\.core\\.default_qdisc=fq/d' /etc/sysctl.conf\n\tsed -i '/net\\.ipv4\\.tcp_congestion_control=bbr/d' /etc/sysctl.conf\n\tsysctl -p\n\tsleep 1s\n\t\n\tread -e -p \"需要重启VPS后，才能彻底停止BBR，是否现在重启 ? [Y/n] :\" yn\n\t[[ -z \"${yn}\" ]] && yn=\"y\"\n\tif [[ $yn == [Yy] ]]; then\n\t\techo -e \"${Info} VPS 重启中...\"\n\t\treboot\n\tfi\n}\n# 查看BBR状态\nstatusbbr(){\n\tcheck_deb_off\n\tbbrstatus\n\techo -e \"${Error} BBR 未开启 !\"\n}\ncheck_sys\n[[ ${release} != \"debian\" ]] && [[ ${release} != \"ubuntu\" ]] && echo -e \"${Error} 本脚本不支持当前系统 ${release} !\" && exit 1\naction=$1\n[[ -z $1 ]] && action=install\ncase \"$action\" in\n\tinstall|start|stop|status)\n\t${action}bbr\n\t;;\n\t*)\n\techo \"输入错误 !\"\n\techo \"用法: { install | start | stop | status }\"\n\t;;\nesac"
        },
        {
          "name": "brook-pf.sh",
          "type": "blob",
          "size": 25.6943359375,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: Brook\n#\tVersion: 1.0.6\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/wlzy-jc37/\n#=================================================\n\nsh_ver=\"1.0.6\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile_1=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\nfile=\"/usr/local/brook-pf\"\nbrook_file=\"/usr/local/brook-pf/brook\"\nbrook_conf=\"/usr/local/brook-pf/brook.conf\"\nbrook_log=\"/usr/local/brook-pf/brook.log\"\nCrontab_file=\"/usr/bin/crontab\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前非ROOT账号(或没有ROOT权限)，无法继续操作，请更换ROOT账号或使用 ${Green_background_prefix}sudo su${Font_color_suffix} 命令获取临时ROOT权限（执行后可能会提示输入当前账号的密码）。\" && exit 1\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_installed_status(){\n\t[[ ! -e ${brook_file} ]] && echo -e \"${Error} Brook 没有安装，请检查 !\" && exit 1\n}\ncheck_crontab_installed_status(){\n\tif [[ ! -e ${Crontab_file} ]]; then\n\t\techo -e \"${Error} Crontab 没有安装，开始安装...\"\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum install crond -y\n\t\telse\n\t\t\tapt-get install cron -y\n\t\tfi\n\t\tif [[ ! -e ${Crontab_file} ]]; then\n\t\t\techo -e \"${Error} Crontab 安装失败，请检查！\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} Crontab 安装成功！\"\n\t\tfi\n\tfi\n}\ncheck_pid(){\n\tPID=$(ps -ef| grep \"brook relays\"| grep -v grep| grep -v \".sh\"| grep -v \"init.d\"| grep -v \"service\"| awk '{print $2}')\n}\ncheck_new_ver(){\n\techo -e \"请输入要下载安装的 Brook 版本号 ${Green_font_prefix}[ 格式是日期，例如: v20180909 ]${Font_color_suffix}\n版本列表请去这里获取：${Green_font_prefix}[ https://github.com/txthinking/brook/releases ]${Font_color_suffix}\"\n\tread -e -p \"直接回车即自动获取:\" brook_new_ver\n\tif [[ -z ${brook_new_ver} ]]; then\n\t\tbrook_new_ver=$(wget -qO- https://api.github.com/repos/txthinking/brook/releases| grep \"tag_name\"| head -n 1| awk -F \":\" '{print $2}'| sed 's/\\\"//g;s/,//g;s/ //g')\n\t\t[[ -z ${brook_new_ver} ]] && echo -e \"${Error} Brook 最新版本获取失败！\" && exit 1\n\t\techo -e \"${Info} 检测到 Brook 最新版本为 [ ${brook_new_ver} ]\"\n\telse\n\t\techo -e \"${Info} 开始下载 Brook [ ${brook_new_ver} ] 版本！\"\n\tfi\n}\ncheck_ver_comparison(){\n\tbrook_now_ver=$(${brook_file} -v|awk '{print $3}')\n\t[[ -z ${brook_now_ver} ]] && echo -e \"${Error} Brook 当前版本获取失败 !\" && exit 1\n\tbrook_now_ver=\"v${brook_now_ver}\"\n\tif [[ \"${brook_now_ver}\" != \"${brook_new_ver}\" ]]; then\n\t\techo -e \"${Info} 发现 Brook 已有新版本 [ ${brook_new_ver} ]，旧版本 [ ${brook_now_ver} ]\"\n\t\tread -e -p \"是否更新 ? [Y/n] :\" yn\n\t\t[[ -z \"${yn}\" ]] && yn=\"y\"\n\t\tif [[ $yn == [Yy] ]]; then\n\t\t\tcheck_pid\n\t\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\t\trm -rf ${brook_file}\n\t\t\tDownload_brook\n\t\t\tStart_brook\n\t\tfi\n\telse\n\t\techo -e \"${Info} 当前 Brook 已是最新版本 [ ${brook_new_ver} ]\" && exit 1\n\tfi\n}\nDownload_brook(){\n\t[[ ! -e ${file} ]] && mkdir ${file}\n\tcd ${file}\n\tif [[ ${bit} == \"x86_64\" ]]; then\n\t\twget --no-check-certificate -N \"https://github.com/txthinking/brook/releases/download/${brook_new_ver}/brook\"\n\telse\n\t\twget --no-check-certificate -N \"https://github.com/txthinking/brook/releases/download/${brook_new_ver}/brook_linux_386\"\n\t\tmv brook_linux_386 brook\n\tfi\n\t[[ ! -e \"brook\" ]] && echo -e \"${Error} Brook 下载失败 !\" && exit 1\n\tchmod +x brook\n}\nService_brook(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/brook-pf_centos -O /etc/init.d/brook-pf; then\n\t\t\techo -e \"${Error} Brook服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/brook-pf\n\t\tchkconfig --add brook-pf\n\t\tchkconfig brook-pf on\n\telse\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/brook-pf_debian -O /etc/init.d/brook-pf; then\n\t\t\techo -e \"${Error} Brook服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/brook-pf\n\t\tupdate-rc.d -f brook-pf defaults\n\tfi\n\techo -e \"${Info} Brook服务 管理脚本下载完成 !\"\n}\nInstallation_dependency(){\n\t\\cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n}\nRead_config(){\n\t[[ ! -e ${brook_conf} ]] && echo -e \"${Error} Brook 配置文件不存在 !\" && exit 1\n\tuser_all=$(cat ${brook_conf})\n\tuser_all_num=$(echo \"${user_all}\"|wc -l)\n\t[[ -z ${user_all} ]] && echo -e \"${Error} Brook 配置文件中用户配置为空 !\" && exit 1\n}\nSet_pf_Enabled(){\n\techo -e \"立即启用该端口转发，还是禁用？ [Y/n]\"\n\tread -e -p \"(默认: Y 启用):\" pf_Enabled_un\n\t[[ -z ${pf_Enabled_un} ]] && pf_Enabled_un=\"y\"\n\tif [[ ${pf_Enabled_un} == [Yy] ]]; then\n\t\tbk_Enabled=\"1\"\n\telse\n\t\tbk_Enabled=\"0\"\n\tfi\n}\nSet_port_Modify(){\n\twhile true\n\t\tdo\n\t\techo -e \"请选择并输入要修改的 Brook 端口转发本地监听端口 [1-65535]\"\n\t\tread -e -p \"(默认取消):\" bk_port_Modify\n\t\t[[ -z \"${bk_port_Modify}\" ]] && echo \"取消...\" && exit 1\n\t\techo $((${bk_port_Modify}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${bk_port_Modify} -ge 1 ]] && [[ ${bk_port_Modify} -le 65535 ]]; then\n\t\t\t\tcheck_port \"${bk_port_Modify}\"\n\t\t\t\tif [[ $? == 0 ]]; then\n\t\t\t\t\tbreak\n\t\t\t\telse\n\t\t\t\t\techo -e \"${Error} 该本地监听端口不存在 [${bk_port_Modify}] !\"\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\tdone\n}\nSet_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 Brook 本地监听端口 [1-65535]（端口不能重复，避免冲突）\"\n\t\tread -e -p \"(默认取消):\" bk_port\n\t\t[[ -z \"${bk_port}\" ]] && echo \"已取消...\" && exit 1\n\t\techo $((${bk_port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${bk_port} -ge 1 ]] && [[ ${bk_port} -le 65535 ]]; then\n\t\t\t\techo && echo \"========================\"\n\t\t\t\techo -e \"\t本地监听端口 : ${Red_background_prefix} ${bk_port} ${Font_color_suffix}\"\n\t\t\t\techo \"========================\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\t\tdone\n}\nSet_IP_pf(){\n\techo \"请输入被转发的 IP :\"\n\tread -e -p \"(默认取消):\" bk_ip_pf\n\t[[ -z \"${bk_ip_pf}\" ]] && echo \"已取消...\" && exit 1\n\techo && echo \"========================\"\n\techo -e \"\t被转发IP : ${Red_background_prefix} ${bk_ip_pf} ${Font_color_suffix}\"\n\techo \"========================\" && echo\n}\nSet_port_pf(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 Brook 被转发的端口 [1-65535]\"\n\t\tread -e -p \"(默认取消):\" bk_port_pf\n\t\t[[ -z \"${bk_port_pf}\" ]] && echo \"已取消...\" && exit 1\n\t\techo $((${bk_port_pf}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${bk_port_pf} -ge 1 ]] && [[ ${bk_port_pf} -le 65535 ]]; then\n\t\t\t\techo && echo \"========================\"\n\t\t\t\techo -e \"\t被转发端口 : ${Red_background_prefix} ${bk_port_pf} ${Font_color_suffix}\"\n\t\t\t\techo \"========================\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\t\tdone\n}\nSet_brook(){\n\tcheck_installed_status\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix}  添加 端口转发\n ${Green_font_prefix}2.${Font_color_suffix}  删除 端口转发\n ${Green_font_prefix}3.${Font_color_suffix}  修改 端口转发\n ${Green_font_prefix}4.${Font_color_suffix}  启用/禁用 端口转发\n \n ${Tip} 本地监听端口不能重复，被转发的IP或端口可重复!\" && echo\n\tread -e -p \"(默认: 取消):\" bk_modify\n\t[[ -z \"${bk_modify}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${bk_modify} == \"1\" ]]; then\n\t\tAdd_pf\n\telif [[ ${bk_modify} == \"2\" ]]; then\n\t\tDel_pf\n\telif [[ ${bk_modify} == \"3\" ]]; then\n\t\tModify_pf\n\telif [[ ${bk_modify} == \"4\" ]]; then\n\t\tModify_Enabled_pf\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-4)\" && exit 1\n\tfi\n}\ncheck_port(){\n\tcheck_port_1=$1\n\tuser_all=$(cat ${brook_conf}|sed '1d;/^\\s*$/d')\n\t#[[ -z \"${user_all}\" ]] && echo -e \"${Error} Brook 配置文件中用户配置为空 !\" && exit 1\n\tcheck_port_statu=$(echo \"${user_all}\"|awk '{print $1}'|grep -w \"${check_port_1}\")\n\tif [[ ! -z \"${check_port_statu}\" ]]; then\n\t\treturn 0\n\telse\n\t\treturn 1\n\tfi\n}\nlist_port(){\n\tport_Type=$1\n\tuser_all=$(cat ${brook_conf}|sed '/^\\s*$/d')\n\tif [[ -z \"${user_all}\" ]]; then\n\t\tif [[ \"${port_Type}\" == \"ADD\" ]]; then\n\t\t\techo -e \"${Info} 目前 Brook 配置文件中用户配置为空。\"\n\t\telse\n\t\t\techo -e \"${Info} 目前 Brook 配置文件中用户配置为空。\" && exit 1\n\t\tfi\n\telse\n\t\tuser_num=$(echo -e \"${user_all}\"|wc -l)\n\t\tfor((integer = 1; integer <= ${user_num}; integer++))\n\t\tdo\n\t\t\tuser_port=$(echo \"${user_all}\"|sed -n \"${integer}p\"|awk '{print $1}')\n\t\t\tuser_ip_pf=$(echo \"${user_all}\"|sed -n \"${integer}p\"|awk '{print $2}')\n\t\t\tuser_port_pf=$(echo \"${user_all}\"|sed -n \"${integer}p\"|awk '{print $3}')\n\t\t\tuser_Enabled_pf=$(echo \"${user_all}\"|sed -n \"${integer}p\"|awk '{print $4}')\n\t\t\tif [[ ${user_Enabled_pf} == \"0\" ]]; then\n\t\t\t\tuser_Enabled_pf_1=\"${Red_font_prefix}禁用${Font_color_suffix}\"\n\t\t\telse\n\t\t\t\tuser_Enabled_pf_1=\"${Green_font_prefix}启用${Font_color_suffix}\"\n\t\t\tfi\n\t\t\tuser_list_all=${user_list_all}\"本地监听端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 被转发IP: ${Green_font_prefix}\"${user_ip_pf}\"${Font_color_suffix}\\t 被转发端口: ${Green_font_prefix}\"${user_port_pf}\"${Font_color_suffix}\\t 状态: ${user_Enabled_pf_1}\\n\"\n\t\t\tuser_IP=\"\"\n\t\tdone\n\t\tip=$(wget -qO- -t1 -T2 ipinfo.io/ip)\n\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\tip=$(wget -qO- -t1 -T2 api.ip.sb/ip)\n\t\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\t\tip=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\t\t\tip=\"VPS_IP\"\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\t\techo -e \"当前端口转发总数: ${Green_background_prefix} \"${user_num}\" ${Font_color_suffix} 当前服务器IP: ${Green_background_prefix} \"${ip}\" ${Font_color_suffix}\"\n\t\techo -e \"${user_list_all}\"\n\t\techo -e \"========================\\n\"\n\tfi\n}\nAdd_pf(){\n\twhile true\n\tdo\n\t\tlist_port \"ADD\"\n\t\tSet_port\n\t\tcheck_port \"${bk_port}\"\n\t\t[[ $? == 0 ]] && echo -e \"${Error} 该本地监听端口已使用 [${bk_port}] !\" && exit 1\n\t\tSet_IP_pf\n\t\tSet_port_pf\n\t\tSet_pf_Enabled\n\t\techo \"${bk_port} ${bk_ip_pf} ${bk_port_pf} ${bk_Enabled}\" >> ${brook_conf}\n\t\tAdd_success=$(cat ${brook_conf}| grep ${bk_port})\n\t\tif [[ -z \"${Add_success}\" ]]; then\n\t\t\techo -e \"${Error} 端口转发 添加失败 ${Green_font_prefix}[端口: ${bk_port} 被转发IP和端口: ${bk_ip_pf}:${bk_port_pf}]${Font_color_suffix} \"\n\t\t\tbreak\n\t\telse\n\t\t\tAdd_iptables\n\t\t\tSave_iptables\n\t\t\techo -e \"${Info} 端口转发 添加成功 ${Green_font_prefix}[端口: ${bk_port} 被转发IP和端口: ${bk_ip_pf}:${bk_port_pf}]${Font_color_suffix}\\n\"\n\t\t\tread -e -p \"是否继续 添加端口转发配置？[Y/n]:\" addyn\n\t\t\t[[ -z ${addyn} ]] && addyn=\"y\"\n\t\t\tif [[ ${addyn} == [Nn] ]]; then\n\t\t\t\tRestart_brook\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo -e \"${Info} 继续 添加端口转发配置...\"\n\t\t\t\tuser_list_all=\"\"\n\t\t\tfi\n\t\tfi\n\tdone\n}\nDel_pf(){\n\twhile true\n\tdo\n\t\tlist_port\n\t\tSet_port\n\t\tcheck_port \"${bk_port}\"\n\t\t[[ $? == 1 ]] && echo -e \"${Error} 该本地监听端口不存在 [${bk_port}] !\" && exit 1\n\t\tsed -i \"/^${bk_port} /d\" ${brook_conf}\n\t\tDel_success=$(cat ${brook_conf}| grep ${bk_port})\n\t\tif [[ ! -z \"${Del_success}\" ]]; then\n\t\t\techo -e \"${Error} 端口转发 删除失败 ${Green_font_prefix}[端口: ${bk_port}]${Font_color_suffix} \"\n\t\t\tbreak\n\t\telse\n\t\t\tport=${bk_port}\n\t\t\tDel_iptables\n\t\t\tSave_iptables\n\t\t\techo -e \"${Info} 端口转发 删除成功 ${Green_font_prefix}[端口: ${bk_port}]${Font_color_suffix}\\n\"\n\t\t\tport_num=$(cat ${brook_conf}|sed '/^\\s*$/d'|wc -l)\n\t\t\tif [[ ${port_num} == 0 ]]; then\n\t\t\t\techo -e \"${Error} 已无任何端口 !\"\n\t\t\t\tcheck_pid\n\t\t\t\tif [[ ! -z ${PID} ]]; then\n\t\t\t\t\tStop_brook\n\t\t\t\tfi\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\tread -e -p \"是否继续 删除端口转发配置？[Y/n]:\" delyn\n\t\t\t\t[[ -z ${delyn} ]] && delyn=\"y\"\n\t\t\t\tif [[ ${delyn} == [Nn] ]]; then\n\t\t\t\t\tRestart_brook\n\t\t\t\t\tbreak\n\t\t\t\telse\n\t\t\t\t\techo -e \"${Info} 继续 删除端口转发配置...\"\n\t\t\t\t\tuser_list_all=\"\"\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tdone\n}\nModify_pf(){\n\tlist_port\n\tSet_port_Modify\n\techo -e \"\\n${Info} 开始输入新端口... \\n\"\n\tSet_port\n\tcheck_port \"${bk_port}\"\n\t[[ $? == 0 ]] && echo -e \"${Error} 该端口已存在 [${bk_port}] !\" && exit 1\n\tSet_IP_pf\n\tSet_port_pf\n\tsed -i \"/^${bk_port_Modify} /d\" ${brook_conf}\n\tSet_pf_Enabled\n\techo \"${bk_port} ${bk_ip_pf} ${bk_port_pf} ${bk_Enabled}\" >> ${brook_conf}\n\tModify_success=$(cat ${brook_conf}| grep \"${bk_port} ${bk_ip_pf} ${bk_port_pf} ${bk_Enabled}\")\n\tif [[ -z \"${Modify_success}\" ]]; then\n\t\techo -e \"${Error} 端口转发 修改失败 ${Green_font_prefix}[端口: ${bk_port} 被转发IP和端口: ${bk_ip_pf}:${bk_port_pf}]${Font_color_suffix}\"\n\t\texit 1\n\telse\n\t\tport=${bk_port_Modify}\n\t\tDel_iptables\n\t\tAdd_iptables\n\t\tSave_iptables\n\t\tRestart_brook\n\t\techo -e \"${Info} 端口转发 修改成功 ${Green_font_prefix}[端口: ${bk_port} 被转发IP和端口: ${bk_ip_pf}:${bk_port_pf}]${Font_color_suffix}\\n\"\n\tfi\n}\nModify_Enabled_pf(){\n\tlist_port\n\tSet_port_Modify\n\tuser_pf_text=$(cat ${brook_conf}|sed '/^\\s*$/d'|grep \"${bk_port_Modify}\")\n\tuser_port_text=$(echo ${user_pf_text}|awk '{print $1}')\n\tuser_ip_pf_text=$(echo ${user_pf_text}|awk '{print $2}')\n\tuser_port_pf_text=$(echo ${user_pf_text}|awk '{print $3}')\n\tuser_Enabled_pf_text=$(echo ${user_pf_text}|awk '{print $4}')\n\tif [[ ${user_Enabled_pf_text} == \"0\" ]]; then\n\t\techo -e \"该端口转发已${Red_font_prefix}禁用${Font_color_suffix}，是否${Green_font_prefix}启用${Font_color_suffix}？ [Y/n]\"\n\t\tread -e -p \"(默认: Y 启用):\" user_Enabled_pf_text_un\n\t\t[[ -z ${user_Enabled_pf_text_un} ]] && user_Enabled_pf_text_un=\"y\"\n\t\tif [[ ${user_Enabled_pf_text_un} == [Yy] ]]; then\n\t\t\tuser_Enabled_pf_text_1=\"1\"\n\t\t\tsed -i \"/^${bk_port_Modify} /d\" ${brook_conf}\n\t\t\techo \"${user_port_text} ${user_ip_pf_text} ${user_port_pf_text} ${user_Enabled_pf_text_1}\" >> ${brook_conf}\n\t\t\tModify_Enabled_success=$(cat ${brook_conf}| grep \"${user_port_text} ${user_ip_pf_text} ${user_port_pf_text} ${user_Enabled_pf_text_1}\")\n\t\t\tif [[ -z \"${Modify_Enabled_success}\" ]]; then\n\t\t\t\techo -e \"${Error} 端口转发 启用失败 ${Green_font_prefix}[端口: ${user_port_text} 被转发IP和端口: ${user_ip_pf_text}:${user_port_pf_text}]${Font_color_suffix}\"\n\t\t\t\texit 1\n\t\t\telse\n\t\t\t\techo -e \"${Info} 端口转发 启用成功 ${Green_font_prefix}[端口: ${user_port_text} 被转发IP和端口: ${user_ip_pf_text}:${user_port_pf_text}]${Font_color_suffix}\\n\"\n\t\t\t\tRestart_brook\n\t\t\tfi\n\t\telse\n\t\t\techo \"已取消...\" && exit 0\n\t\tfi\n\telse\n\t\techo -e \"该端口转发已${Green_font_prefix}启用${Font_color_suffix}，是否${Red_font_prefix}禁用${Font_color_suffix}？ [Y/n]\"\n\t\tread -e -p \"(默认: Y 禁用):\" user_Enabled_pf_text_un\n\t\t[[ -z ${user_Enabled_pf_text_un} ]] && user_Enabled_pf_text_un=\"y\"\n\t\tif [[ ${user_Enabled_pf_text_un} == [Yy] ]]; then\n\t\t\tuser_Enabled_pf_text_1=\"0\"\n\t\t\tsed -i \"/^${bk_port_Modify} /d\" ${brook_conf}\n\t\t\techo \"${user_port_text} ${user_ip_pf_text} ${user_port_pf_text} ${user_Enabled_pf_text_1}\" >> ${brook_conf}\n\t\t\tModify_Enabled_success=$(cat ${brook_conf}| grep \"${user_port_text} ${user_ip_pf_text} ${user_port_pf_text} ${user_Enabled_pf_text_1}\")\n\t\t\tif [[ -z \"${Modify_Enabled_success}\" ]]; then\n\t\t\t\techo -e \"${Error} 端口转发 禁用失败 ${Green_font_prefix}[端口: ${user_port_text} 被转发IP和端口: ${user_ip_pf_text}:${user_port_pf_text}]${Font_color_suffix}\"\n\t\t\t\texit 1\n\t\t\telse\n\t\t\t\techo -e \"${Info} 端口转发 禁用成功 ${Green_font_prefix}[端口: ${user_port_text} 被转发IP和端口: ${user_ip_pf_text}:${user_port_pf_text}]${Font_color_suffix}\\n\"\n\t\t\t\tRestart_brook\n\t\t\tfi\n\t\telse\n\t\t\techo \"已取消...\" && exit 0\n\t\tfi\n\tfi\n}\nInstall_brook(){\n\tcheck_root\n\t[[ -e ${brook_file} ]] && echo -e \"${Error} 检测到 Brook 已安装 !\" && exit 1\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始检测最新版本...\"\n\tcheck_new_ver\n\techo -e \"${Info} 开始下载/安装...\"\n\tDownload_brook\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService_brook\n\techo -e \"${Info} 开始写入 配置文件...\"\n\techo \"\" > ${brook_conf}\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} Brook 安装完成！默认配置文件为空，请选择 [7.设置 Brook 端口转发 - 1.添加 端口转发] 来添加端口转发。\"\n}\nStart_brook(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} Brook 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/brook-pf start\n}\nStop_brook(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} Brook 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/brook-pf stop\n}\nRestart_brook(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/brook-pf stop\n\t/etc/init.d/brook-pf start\n}\nUpdate_brook(){\n\tcheck_installed_status\n\techo && echo -e \"请选择你的服务器是国内还是国外\n ${Green_font_prefix}1.${Font_color_suffix}  国内服务器(逗比云)\n ${Green_font_prefix}2.${Font_color_suffix}  国外服务器(Github)\n \n ${Tip} 因为国内对 Github 限速，这会导致国内服务器下载速度极慢，所以选择 国内服务器 选项就会从我的 逗比云 下载!\" && echo\n\tread -e -p \"(默认: 2 国外服务器):\" bk_Download\n\t[[ -z \"${bk_Download}\" ]] && bk_Download=\"2\"\n\tif [[ ${bk_Download} == \"1\" ]]; then\n\t\tDownload_type=\"1\"\n\telse\n\t\tDownload_type=\"2\"\n\tfi\n\tcheck_new_ver\n\tcheck_ver_comparison\n}\nUninstall_brook(){\n\tcheck_installed_status\n\techo -e \"确定要卸载 Brook ? [y/N]\\n\"\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tif [[ -e ${brook_conf} ]]; then\n\t\t\tuser_all=$(cat ${brook_conf}|sed '/^\\s*$/d')\n\t\t\tuser_all_num=$(echo \"${user_all}\"|wc -l)\n\t\t\tif [[ ! -z ${user_all} ]]; then\n\t\t\t\tfor((integer = 1; integer <= ${user_all_num}; integer++))\n\t\t\t\tdo\n\t\t\t\t\tport=$(echo \"${user_all}\"|sed -n \"${integer}p\"|awk '{print $1}')\n\t\t\t\t\tDel_iptables\n\t\t\t\tdone\n\t\t\t\tSave_iptables\n\t\t\tfi\n\t\tfi\n\t\tif [[ ! -z $(crontab -l | grep \"brook-pf.sh monitor\") ]]; then\n\t\t\tcrontab_monitor_brook_cron_stop\n\t\tfi\n\t\trm -rf ${file}\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del brook-pf\n\t\telse\n\t\t\tupdate-rc.d -f brook-pf remove\n\t\tfi\n\t\trm -rf /etc/init.d/brook-pf\n\t\techo && echo \"Brook 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nView_Log(){\n\tcheck_installed_status\n\t[[ ! -e ${brook_log} ]] && echo -e \"${Error} Brook 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志(正常情况是没有使用日志记录的)\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${brook_log}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${brook_log}\n}\nSet_crontab_monitor_brook(){\n\tcheck_installed_status\n\tcheck_crontab_installed_status\n\tcrontab_monitor_brook_status=$(crontab -l|grep \"brook-pf.sh monitor\")\n\tif [[ -z \"${crontab_monitor_brook_status}\" ]]; then\n\t\techo && echo -e \"当前监控模式: ${Green_font_prefix}未开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要开启 ${Green_font_prefix}Brook 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动 Brook 服务端)[Y/n]\"\n\t\tread -e -p \"(默认: y):\" crontab_monitor_brook_status_ny\n\t\t[[ -z \"${crontab_monitor_brook_status_ny}\" ]] && crontab_monitor_brook_status_ny=\"y\"\n\t\tif [[ ${crontab_monitor_brook_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_brook_cron_start\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"当前监控模式: ${Green_font_prefix}已开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要关闭 ${Green_font_prefix}Brook 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动 Brook 服务端)[y/N]\"\n\t\tread -e -p \"(默认: n):\" crontab_monitor_brook_status_ny\n\t\t[[ -z \"${crontab_monitor_brook_status_ny}\" ]] && crontab_monitor_brook_status_ny=\"n\"\n\t\tif [[ ${crontab_monitor_brook_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_brook_cron_stop\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\ncrontab_monitor_brook_cron_start(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/brook-pf.sh monitor/d\" \"$file_1/crontab.bak\"\n\techo -e \"\\n* * * * * /bin/bash $file_1/brook-pf.sh monitor\" >> \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"brook-pf.sh monitor\")\n\tif [[ -z ${cron_config} ]]; then\n\t\techo -e \"${Error} Brook 服务端运行状态监控功能 启动失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} Brook 服务端运行状态监控功能 启动成功 !\"\n\tfi\n}\ncrontab_monitor_brook_cron_stop(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/brook-pf.sh monitor/d\" \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"brook-pf.sh monitor\")\n\tif [[ ! -z ${cron_config} ]]; then\n\t\techo -e \"${Error} Brook 服务端运行状态监控功能 停止失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} Brook 服务端运行状态监控功能 停止成功 !\"\n\tfi\n}\ncrontab_monitor_brook(){\n\tcheck_installed_status\n\tcheck_pid\n\techo \"${PID}\"\n\tif [[ -z ${PID} ]]; then\n\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] 检测到 Brook服务端 未运行 , 开始启动...\" | tee -a ${brook_log}\n\t\t/etc/init.d/brook-pf start\n\t\tsleep 1s\n\t\tcheck_pid\n\t\tif [[ -z ${PID} ]]; then\n\t\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Brook服务端 启动失败...\" | tee -a ${brook_log}\n\t\telse\n\t\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Brook服务端 启动成功...\" | tee -a ${brook_log}\n\t\tfi\n\telse\n\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Brook服务端 进程运行正常...\" | tee -a ${brook_log}\n\tfi\n}\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${bk_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${bk_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook-pf.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/brook-pf\" ]]; then\n\t\trm -rf /etc/init.d/brook-pf\n\t\tService_brook\n\tfi\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook-pf.sh\" && chmod +x brook.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\ncheck_sys\naction=$1\nif [[ \"${action}\" == \"monitor\" ]]; then\n\tcrontab_monitor_brook\nelse\n\techo && echo -e \"  Brook 端口转发 一键管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  ---- Toyo | doub.io/wlzy-jc37 ----\n  \n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 Brook\n ${Green_font_prefix} 2.${Font_color_suffix} 更新 Brook\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 Brook\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 Brook\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 Brook\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 Brook\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 设置 Brook 端口转发\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 Brook 端口转发\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 Brook 日志\n ${Green_font_prefix}10.${Font_color_suffix} 监控 Brook 运行状态\n————————————\" && echo\nif [[ -e ${brook_file} ]]; then\n\tcheck_pid\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\telse\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\tfi\nelse\n\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\nfi\necho\nread -e -p \" 请输入数字 [0-10]:\" num\ncase \"$num\" in\n\t0)\n\tUpdate_Shell\n\t;;\n\t1)\n\tInstall_brook\n\t;;\n\t2)\n\tUpdate_brook\n\t;;\n\t3)\n\tUninstall_brook\n\t;;\n\t4)\n\tStart_brook\n\t;;\n\t5)\n\tStop_brook\n\t;;\n\t6)\n\tRestart_brook\n\t;;\n\t7)\n\tSet_brook\n\t;;\n\t8)\n\tcheck_installed_status\n\tlist_port\n\t;;\n\t9)\n\tView_Log\n\t;;\n\t10)\n\tSet_crontab_monitor_brook\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-10]\"\n\t;;\nesac\nfi"
        },
        {
          "name": "brook.sh",
          "type": "blob",
          "size": 26.6220703125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: Brook\n#\tVersion: 1.1.13\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/brook-jc3/\n#=================================================\n\nsh_ver=\"1.1.13\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile_1=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\nfile=\"/usr/local/brook\"\nbrook_file=\"/usr/local/brook/brook\"\nbrook_conf=\"/usr/local/brook/brook.conf\"\nbrook_log=\"/usr/local/brook/brook.log\"\nCrontab_file=\"/usr/bin/crontab\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前非ROOT账号(或没有ROOT权限)，无法继续操作，请更换ROOT账号或使用 ${Green_background_prefix}sudo su${Font_color_suffix} 命令获取临时ROOT权限（执行后可能会提示输入当前账号的密码）。\" && exit 1\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_installed_status(){\n\t[[ ! -e ${brook_file} ]] && echo -e \"${Error} Brook 没有安装，请检查 !\" && exit 1\n}\ncheck_crontab_installed_status(){\n\tif [[ ! -e ${Crontab_file} ]]; then\n\t\techo -e \"${Error} Crontab 没有安装，开始安装...\"\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum install crond -y\n\t\telse\n\t\t\tapt-get install cron -y\n\t\tfi\n\t\tif [[ ! -e ${Crontab_file} ]]; then\n\t\t\techo -e \"${Error} Crontab 安装失败，请检查！\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} Crontab 安装成功！\"\n\t\tfi\n\tfi\n}\ncheck_pid(){\n\tPID=$(ps -ef| grep \"./brook \"| grep -v \"grep\" | grep -v \"brook.sh\" | grep -v \"init.d\" |grep -v \"service\" |awk '{print $2}')\n}\ncheck_new_ver(){\n\techo -e \"请输入要下载安装的 Brook 版本号 ${Green_font_prefix}[ 格式是日期，例如: v20180707 ]${Font_color_suffix}\n版本列表请去这里获取：${Green_font_prefix}[ https://github.com/txthinking/brook/releases ]${Font_color_suffix}\"\n\tread -e -p \"直接回车即自动获取:\" brook_new_ver\n\tif [[ -z ${brook_new_ver} ]]; then\n\t\tbrook_new_ver=$(wget -qO- https://api.github.com/repos/txthinking/brook/releases| grep \"tag_name\"| head -n 1| awk -F \":\" '{print $2}'| sed 's/\\\"//g;s/,//g;s/ //g')\n\t\t[[ -z ${brook_new_ver} ]] && echo -e \"${Error} Brook 最新版本获取失败！\" && exit 1\n\t\techo -e \"${Info} 检测到 Brook 最新版本为 [ ${brook_new_ver} ]\"\n\telse\n\t\techo -e \"${Info} 开始下载 Brook [ ${brook_new_ver} ] 版本！\"\n\tfi\n}\ncheck_ver_comparison(){\n\tbrook_now_ver=$(${brook_file} -v|awk '{print $3}')\n\t[[ -z ${brook_now_ver} ]] && echo -e \"${Error} Brook 当前版本获取失败 !\" && exit 1\n\tbrook_now_ver=\"v${brook_now_ver}\"\n\tif [[ \"${brook_now_ver}\" != \"${brook_new_ver}\" ]]; then\n\t\techo -e \"${Info} 发现 Brook 已有新版本 [ ${brook_new_ver} ]，旧版本 [ ${brook_now_ver} ]\"\n\t\tread -e -p \"是否更新 ? [Y/n] :\" yn\n\t\t[[ -z \"${yn}\" ]] && yn=\"y\"\n\t\tif [[ $yn == [Yy] ]]; then\n\t\t\tcheck_pid\n\t\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\t\trm -rf ${brook_file}\n\t\t\tDownload_brook\n\t\t\tStart_brook\n\t\tfi\n\telse\n\t\techo -e \"${Info} 当前 Brook 已是最新版本 [ ${brook_new_ver} ]\" && exit 1\n\tfi\n}\nDownload_brook(){\n\t[[ ! -e ${file} ]] && mkdir ${file}\n\tcd ${file}\n\tif [[ ${bit} == \"x86_64\" ]]; then\n\t\twget --no-check-certificate -N \"https://github.com/txthinking/brook/releases/download/${brook_new_ver}/brook\"\n\telse\n\t\twget --no-check-certificate -N \"https://github.com/txthinking/brook/releases/download/${brook_new_ver}/brook_linux_386\"\n\t\tmv brook_linux_386 brook\n\tfi\n\t[[ ! -e \"brook\" ]] && echo -e \"${Error} Brook 下载失败 !\" && rm -rf \"${file}\" && exit 1\n\tchmod +x brook\n}\nService_brook(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/brook_centos\" -O /etc/init.d/brook; then\n\t\t\techo -e \"${Error} Brook服务 管理脚本下载失败 !\" && rm -rf \"${file}\" && exit 1\n\t\tfi\n\t\tchmod +x \"/etc/init.d/brook\"\n\t\tchkconfig --add brook\n\t\tchkconfig brook on\n\telse\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/brook_debian\" -O /etc/init.d/brook; then\n\t\t\techo -e \"${Error} Brook服务 管理脚本下载失败 !\" && rm -rf \"${file}\" && exit 1\n\t\tfi\n\t\tchmod +x \"/etc/init.d/brook\"\n\t\tupdate-rc.d -f brook defaults\n\tfi\n\techo -e \"${Info} Brook服务 管理脚本下载完成 !\"\n}\nInstallation_dependency(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tCentos_yum\n\telse\n\t\tDebian_apt\n\tfi\n\t\\cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n}\nCentos_yum(){\n\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\tif [[ $? = 0 ]]; then\n\t\tyum update\n\t\tyum install -y net-tools\n\tfi\n}\nDebian_apt(){\n\tcat /etc/issue |grep 9\\..*>/dev/null\n\tif [[ $? = 0 ]]; then\n\t\tapt-get update\n\t\tapt-get install -y net-tools\n\tfi\n}\nWrite_config(){\n\tcat > ${brook_conf}<<-EOF\n${bk_protocol}\n${bk_port} ${bk_passwd}\nEOF\n}\nRead_config(){\n\t[[ ! -e ${brook_conf} ]] && echo -e \"${Error} Brook 配置文件不存在 !\" && exit 1\n\tuser_all=$(cat ${brook_conf}|sed \"1d\")\n\tuser_all_num=$(echo \"${user_all}\"|wc -l)\n\t[[ -z ${user_all} ]] && echo -e \"${Error} Brook 配置文件中用户配置为空 !\" && exit 1\n\tprotocol=$(cat ${brook_conf}|sed -n \"1p\")\n}\nSet_port_Modify(){\n\twhile true\n\t\tdo\n\t\techo -e \"请选择并输入要修改的 Brook 账号端口 [1-65535]\"\n\t\tread -e -p \"(默认取消):\" bk_port_Modify\n\t\t[[ -z \"${bk_port_Modify}\" ]] && echo \"取消...\" && exit 1\n\t\techo $((${bk_port_Modify}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${bk_port_Modify} -ge 1 ]] && [[ ${bk_port_Modify} -le 65535 ]]; then\n\t\t\t\tcheck_port \"${bk_port_Modify}\"\n\t\t\t\tif [[ $? == 0 ]]; then\n\t\t\t\t\tbreak\n\t\t\t\telse\n\t\t\t\t\techo -e \"${Error} 该端口不存在 [${bk_port_Modify}] !\"\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\t\tdone\n}\nSet_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 Brook 端口 [1-65535]（端口不能重复，避免冲突）\"\n\t\tread -e -p \"(默认: 2333):\" bk_port\n\t\t[[ -z \"${bk_port}\" ]] && bk_port=\"2333\"\n\t\techo $((${bk_port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${bk_port} -ge 1 ]] && [[ ${bk_port} -le 65535 ]]; then\n\t\t\t\techo && echo \"========================\"\n\t\t\t\techo -e \"\t端口 : ${Red_background_prefix} ${bk_port} ${Font_color_suffix}\"\n\t\t\t\techo \"========================\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\t\tdone\n}\nSet_passwd(){\n\techo \"请输入 Brook 密码（因分享链接特性，密码请勿包含 % 符号）\"\n\tread -e -p \"(默认: doub.io):\" bk_passwd\n\t[[ -z \"${bk_passwd}\" ]] && bk_passwd=\"doub.io\"\n\techo && echo \"========================\"\n\techo -e \"\t密码 : ${Red_background_prefix} ${bk_passwd} ${Font_color_suffix}\"\n\techo \"========================\" && echo\n}\nSet_protocol(){\n\techo -e \"请选择 Brook 协议\n ${Green_font_prefix}1.${Font_color_suffix} Brook（新版协议，即 [servers]）\n ${Green_font_prefix}2.${Font_color_suffix} Brook Stream（旧版协议，即 [streamservers]，不推荐，除非使用新版协议速度慢）\" && echo\n\tread -e -p \"(默认: 1. Brook（新版协议）):\" bk_protocol\n\t[[ -z \"${bk_protocol}\" ]] && bk_protocol=\"1\"\n\tif [[ ${bk_protocol} == \"1\" ]]; then\n\t\tbk_protocol=\"servers\"\n\telif [[ ${bk_protocol} == \"2\" ]]; then\n\t\tbk_protocol=\"streamservers\"\n\telse\n\t\tbk_protocol=\"servers\"\n\tfi\n\techo && echo \"========================\"\n\techo -e \"\t协议 : ${Green_font_prefix}${bk_protocol}${Font_color_suffix}\"\n\techo \"========================\" && echo\n}\nSet_brook(){\n\tcheck_installed_status\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix}  添加 用户配置\n ${Green_font_prefix}2.${Font_color_suffix}  删除 用户配置\n ${Green_font_prefix}3.${Font_color_suffix}  修改 用户配置\n ${Green_font_prefix}4.${Font_color_suffix}  修改 混淆协议\n————————————————\n ${Green_font_prefix}5.${Font_color_suffix}  监控 运行状态\n \n ${Tip} 用户的端口是不能重复的，密码可以重复 !\" && echo\n\tread -e -p \"(默认: 取消):\" bk_modify\n\t[[ -z \"${bk_modify}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${bk_modify} == \"1\" ]]; then\n\t\tAdd_port_user\n\telif [[ ${bk_modify} == \"2\" ]]; then\n\t\tDel_port_user\n\telif [[ ${bk_modify} == \"3\" ]]; then\n\t\tModify_port_user\n\telif [[ ${bk_modify} == \"4\" ]]; then\n\t\tModify_protocol\n\telif [[ ${bk_modify} == \"5\" ]]; then\n\t\tSet_crontab_monitor_brook\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-5)\" && exit 1\n\tfi\n}\ncheck_port(){\n\tcheck_port_1=$1\n\tuser_all=$(cat ${brook_conf}|sed '1d;/^\\s*$/d')\n\t#[[ -z \"${user_all}\" ]] && echo -e \"${Error} Brook 配置文件中用户配置为空 !\" && exit 1\n\tcheck_port_statu=$(echo \"${user_all}\"|awk '{print $1}'|grep -w \"${check_port_1}\")\n\tif [[ ! -z \"${check_port_statu}\" ]]; then\n\t\treturn 0\n\telse\n\t\treturn 1\n\tfi\n}\nlist_port(){\n\tport_Type=$1\n\tuser_all=$(cat ${brook_conf}|sed '1d;/^\\s*$/d')\n\tif [[ -z \"${user_all}\" ]]; then\n\t\tif [[ \"${port_Type}\" != \"ADD\" ]]; then\n\t\t\techo -e \"${Error} Brook 配置文件中用户配置为空 !\" && exit 1\n\t\tfi\n\tfi\n\tport_all_1=$(echo \"${user_all}\"|awk '{print $1}')\n\techo -e \"\\n当前所有已使用端口：\\n${port_all_1}\\n========================\\n\"\n}\nAdd_port_user(){\n\tlist_port \"ADD\"\n\tSet_port\n\tcheck_port \"${bk_port}\"\n\t[[ $? == 0 ]] && echo -e \"${Error} 该端口已存在 [${bk_port}] !\" && exit 1\n\tSet_passwd\n\techo \"${bk_port} ${bk_passwd}\" >> ${brook_conf}\n\tAdd_iptables\n\tSave_iptables\n\tRestart_brook\n}\nDel_port_user(){\n\tlist_port\n\tSet_port\n\tcheck_port \"${bk_port}\"\n\t[[ $? == 1 ]] && echo -e \"${Error} 该端口不存在 [${bk_port}] !\" && exit 1\n\tsed -i \"/^${bk_port} /d\" ${brook_conf}\n\tport=${bk_port}\n\tDel_iptables\n\tSave_iptables\n\tport_num=$(cat ${brook_conf}|sed '1d;/^\\s*$/d'|wc -l)\n\tif [[ ${port_num} == 0 ]]; then\n\t\techo -e \"${Error} 已无任何端口 !\"\n\t\tStop_brook\n\telse\n\t\tRestart_brook\n\tfi\n}\nModify_port_user(){\n\tlist_port\n\tSet_port_Modify\n\techo -e \"\\n${Info} 开始输入新端口... \\n\"\n\tSet_port\n\tcheck_port \"${bk_port}\"\n\tif [[ $? == 0 ]]; then\n\t\tif [[ \"${bk_port_Modify}\" != \"${bk_port}\" ]]; then\n\t\techo -e \"${Error} 该端口已存在 [${bk_port}] !\" && exit 1\n\t\tfi\n\tfi\n\tSet_passwd\n\tsed -i \"/^${bk_port_Modify} /d\" ${brook_conf}\n\techo \"${bk_port} ${bk_passwd}\" >> ${brook_conf}\n\tport=${bk_port_Modify}\n\tDel_iptables\n\tAdd_iptables\n\tSave_iptables\n\tRestart_brook\n}\nModify_protocol(){\n\tSet_protocol\n\tsed -i \"1d\" ${brook_conf}\n\tsed -i '1i\\'${bk_protocol} ${brook_conf}\n\tRestart_brook\n}\nInstall_brook(){\n\tcheck_root\n\t[[ -e ${brook_file} ]] && echo -e \"${Error} 检测到 Brook 已安装 !\" && exit 1\n\techo -e \"${Info} 开始设置 用户配置...\"\n\tSet_port\n\tSet_passwd\n\tSet_protocol\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始检测最新版本...\"\n\tcheck_new_ver\n\techo -e \"${Info} 开始下载/安装...\"\n\tDownload_brook\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService_brook\n\techo -e \"${Info} 开始写入 配置文件...\"\n\tWrite_config\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart_brook\n}\nStart_brook(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} Brook 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/brook start\n\tsleep 1s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View_brook\n}\nStop_brook(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} Brook 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/brook stop\n}\nRestart_brook(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/brook stop\n\t/etc/init.d/brook start\n\tsleep 1s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View_brook\n}\nUpdate_brook(){\n\tcheck_installed_status\n\tcheck_new_ver\n\tcheck_ver_comparison\n}\nUninstall_brook(){\n\tcheck_installed_status\n\techo \"确定要卸载 Brook ? (y/N)\"\n\techo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tif [[ -e ${brook_conf} ]]; then\n\t\t\tuser_all=$(cat ${brook_conf}|sed \"1d\")\n\t\t\tuser_all_num=$(echo \"${user_all}\"|wc -l)\n\t\t\tif [[ ! -z ${user_all} ]]; then\n\t\t\t\tfor((integer = 1; integer <= ${user_all_num}; integer++))\n\t\t\t\tdo\n\t\t\t\t\tuser_text=$(echo \"${user_all}\"|sed -n \"${integer}p\")\n\t\t\t\t\tport=$(echo \"${user_text}\"|awk '{print $1}')\n\t\t\t\t\tDel_iptables\n\t\t\t\tdone\n\t\t\t\tSave_iptables\n\t\t\tfi\n\t\tfi\n\t\tif [[ ! -z $(crontab -l | grep \"brook.sh monitor\") ]]; then\n\t\t\tcrontab_monitor_brook_cron_stop\n\t\tfi\n\t\trm -rf \"${file}\"\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del brook\n\t\telse\n\t\t\tupdate-rc.d -f brook remove\n\t\tfi\n\t\trm -rf \"/etc/init.d/brook\"\n\t\techo && echo \"Brook 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nView_brook(){\n\tcheck_installed_status\n\tRead_config\n\tip=$(wget -qO- -t1 -T2 ipinfo.io/ip)\n\tif [[ -z \"${ip}\" ]]; then\n\t\tip=$(wget -qO- -t1 -T2 api.ip.sb/ip)\n\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\tip=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\t\tip=\"VPS_IP\"\n\t\t\tfi\n\t\tfi\n\tfi\n\tif [[ ${protocol} == \"servers\" ]]; then\n\t\tprotocol=\"Brook(新版)\"\n\telif [[ ${protocol} == \"streamservers\" ]]; then\n\t\tprotocol=\"Brook Stream(旧版)\"\n\tfi\n\tclear && echo\n\techo -e \"Brook 用户配置：\"\n\tfor((integer = 1; integer <= ${user_all_num}; integer++))\n\t\tdo\n\t\t\tuser_text=$(echo \"${user_all}\"|sed -n \"${integer}p\")\n\t\t\tport=$(echo \"${user_text}\"|awk '{print $1}')\n\t\t\tpassword=$(echo \"${user_text}\"|awk '{print $2}')\n\t\t\tbrook_link\n\t\t\techo -e \"————————————————\"\n\t\t\techo -e \" 地址\\t: ${Green_font_prefix}${ip}${Font_color_suffix}\"\n\t\t\techo -e \" 端口\\t: ${Green_font_prefix}${port}${Font_color_suffix}\"\n\t\t\techo -e \" 密码\\t: ${Green_font_prefix}${password}${Font_color_suffix}\"\n\t\t\techo -e \" 协议\\t: ${Green_font_prefix}${protocol}${Font_color_suffix}\"\n\t\t\techo -e \"${Brook_link_1}\"\n\tdone\n\techo\n\techo -e \"${Tip} Brook链接 仅适用于Windows系统的 Brook Tools客户端（https://doub.io/dbrj-7/）。\"\n\techo\n}\nbrook_link(){\n\tif [[ \"${protocol}\" == \"Brook(新版)\" ]]; then\n\t\tBrook_URL_1=\"default ${ip}:${port} ${password}\"\n\telse\n\t\tBrook_URL_1=\"stream ${ip}:${port} ${password}\"\n\tfi\n\t#printf $(echo -n \"xxx\" | sed 's/\\\\/\\\\\\\\/g;s/\\(%\\)\\([0-9a-fA-F][0-9a-fA-F]\\)/\\\\x\\2/g')\"\\n\"\n\tBrook_URL_1=$(echo \"${Brook_URL_1}\"|sed 's/ /%20/g;s/!/%21/g;s/#/%23/g;s/\\$/%24/g;s/&/%26/g;s/'\"'\"'/%27/g;s/(/%28/g;s/)/%29/g;s/*/%2A/g;s/+/%2B/g;s/,/%2C/g;s/\\//%2F/g;s/:/%3A/g;s/;/%3B/g;s/=/%3D/g;s/?/%3F/g;s/@/%40/g;s/\\[/%5B/g;s/\\]/%5D/g')\n\tBrook_URL=\"brook://${Brook_URL_1}\"\n\tBrook_link_1=\" Brook 链接 : ${Green_font_prefix}${Brook_URL}${Font_color_suffix}\"\n}\nView_Log(){\n\tcheck_installed_status\n\t[[ ! -e ${brook_log} ]] && echo -e \"${Error} Brook 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志(正常情况是没有使用日志记录的)\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${brook_log}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${brook_log}\n}\n# 显示 连接信息\ndebian_View_user_connection_info(){\n\tformat_1=$1\n\tRead_config\n\tIP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'brook' |grep 'tcp6' |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\" |wc -l`\n\techo -e \"用户总数: ${Green_background_prefix} \"${user_all_num}\" ${Font_color_suffix} 链接IP总数: ${Green_background_prefix} \"${IP_total}\" ${Font_color_suffix} \"\n\t\n\tfor((integer = 1; integer <= ${user_all_num}; integer++))\n\tdo\n\t\tuser_port=$(echo \"${user_all}\"|sed -n \"${integer}p\"|awk '{print $1}')\n\t\tuser_IP_1=`netstat -anp |grep 'ESTABLISHED' |grep 'brook' |grep 'tcp6' |grep \":${user_port} \" |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\"`\n\t\tif [[ -z ${user_IP_1} ]]; then\n\t\t\tuser_IP_total=\"0\"\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\t\telse\n\t\t\tuser_IP_total=`echo -e \"${user_IP_1}\"|wc -l`\n\t\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\t\t\t\tget_IP_address\n\t\t\t\techo\n\t\t\telse\n\t\t\t\tuser_IP=$(echo -e \"\\n${user_IP_1}\")\n\t\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\t\tfi\n\t\tfi\n\t\tuser_IP=\"\"\n\tdone\n}\ncentos_View_user_connection_info(){\n\tformat_1=$1\n\tRead_config\n\tIP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'brook' |grep 'tcp' | grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\" |wc -l`\n\techo -e \"用户总数: ${Green_background_prefix} \"${user_all_num}\" ${Font_color_suffix} 链接IP总数: ${Green_background_prefix} \"${IP_total}\" ${Font_color_suffix} \"\n\t\n\tfor((integer = 1; integer <= ${user_all_num}; integer++))\n\tdo\n\t\tuser_port=$(echo \"${user_all}\"|sed -n \"${integer}p\"|awk '{print $1}')\n\t\tuser_IP_1=`netstat -anp |grep 'ESTABLISHED' |grep 'brook' |grep 'tcp' |grep \":${user_port} \"|grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\"`\n\t\tif [[ -z ${user_IP_1} ]]; then\n\t\t\tuser_IP_total=\"0\"\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\t\telse\n\t\t\tuser_IP_total=`echo -e \"${user_IP_1}\"|wc -l`\n\t\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\t\t\t\tget_IP_address\n\t\t\t\techo\n\t\t\telse\n\t\t\t\tuser_IP=$(echo -e \"\\n${user_IP_1}\")\n\t\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\t\tfi\n\t\tfi\n\t\tuser_IP=\"\"\n\tdone\n}\nView_user_connection_info(){\n\tcheck_installed_status\n\techo && echo -e \"请选择要显示的格式：\n ${Green_font_prefix}1.${Font_color_suffix} 显示 IP 格式\n ${Green_font_prefix}2.${Font_color_suffix} 显示 IP+IP归属地 格式\" && echo\n\tread -e -p \"(默认: 1):\" brook_connection_info\n\t[[ -z \"${brook_connection_info}\" ]] && brook_connection_info=\"1\"\n\tif [[ \"${brook_connection_info}\" == \"1\" ]]; then\n\t\tView_user_connection_info_1 \"\"\n\telif [[ \"${brook_connection_info}\" == \"2\" ]]; then\n\t\techo -e \"${Tip} 检测IP归属地(ipip.net)，如果IP较多，可能时间会比较长...\"\n\t\tView_user_connection_info_1 \"IP_address\"\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-2)\" && exit 1\n\tfi\n}\nView_user_connection_info_1(){\n\tformat=$1\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\t\tif [[ $? = 0 ]]; then\n\t\t\tdebian_View_user_connection_info \"$format\"\n\t\telse\n\t\t\tcentos_View_user_connection_info \"$format\"\n\t\tfi\n\telse\n\t\tdebian_View_user_connection_info \"$format\"\n\tfi\n}\nget_IP_address(){\n\t#echo \"user_IP_1=${user_IP_1}\"\n\tif [[ ! -z ${user_IP_1} ]]; then\n\t#echo \"user_IP_total=${user_IP_total}\"\n\t\tfor((integer_1 = ${user_IP_total}; integer_1 >= 1; integer_1--))\n\t\tdo\n\t\t\tIP=$(echo \"${user_IP_1}\" |sed -n \"$integer_1\"p)\n\t\t\t#echo \"IP=${IP}\"\n\t\t\tIP_address=$(wget -qO- -t1 -T2 http://freeapi.ipip.net/${IP}|sed 's/\\\"//g;s/,//g;s/\\[//g;s/\\]//g')\n\t\t\t#echo \"IP_address=${IP_address}\"\n\t\t\t#user_IP=\"${user_IP}\\n${IP}(${IP_address})\"\n\t\t\techo -e \"${Green_font_prefix}${IP}${Font_color_suffix} (${IP_address})\"\n\t\t\t#echo \"user_IP=${user_IP}\"\n\t\t\tsleep 1s\n\t\tdone\n\tfi\n}\nSet_crontab_monitor_brook(){\n\tcheck_crontab_installed_status\n\tcrontab_monitor_brook_status=$(crontab -l|grep \"brook.sh monitor\")\n\tif [[ -z \"${crontab_monitor_brook_status}\" ]]; then\n\t\techo && echo -e \"当前监控模式: ${Green_font_prefix}未开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要开启 ${Green_font_prefix}Brook 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动 Brook 服务端)[Y/n]\"\n\t\tread -e -p \"(默认: y):\" crontab_monitor_brook_status_ny\n\t\t[[ -z \"${crontab_monitor_brook_status_ny}\" ]] && crontab_monitor_brook_status_ny=\"y\"\n\t\tif [[ ${crontab_monitor_brook_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_brook_cron_start\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"当前监控模式: ${Green_font_prefix}已开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要关闭 ${Green_font_prefix}Brook 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动 Brook 服务端)[y/N]\"\n\t\tread -e -p \"(默认: n):\" crontab_monitor_brook_status_ny\n\t\t[[ -z \"${crontab_monitor_brook_status_ny}\" ]] && crontab_monitor_brook_status_ny=\"n\"\n\t\tif [[ ${crontab_monitor_brook_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_brook_cron_stop\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\ncrontab_monitor_brook_cron_start(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/brook.sh monitor/d\" \"$file_1/crontab.bak\"\n\techo -e \"\\n* * * * * /bin/bash $file_1/brook.sh monitor\" >> \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"brook.sh monitor\")\n\tif [[ -z ${cron_config} ]]; then\n\t\techo -e \"${Error} Brook 服务端运行状态监控功能 启动失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} Brook 服务端运行状态监控功能 启动成功 !\"\n\tfi\n}\ncrontab_monitor_brook_cron_stop(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/brook.sh monitor/d\" \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"brook.sh monitor\")\n\tif [[ ! -z ${cron_config} ]]; then\n\t\techo -e \"${Error} Brook 服务端运行状态监控功能 停止失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} Brook 服务端运行状态监控功能 停止成功 !\"\n\tfi\n}\ncrontab_monitor_brook(){\n\tcheck_installed_status\n\tcheck_pid\n\t#echo \"${PID}\"\n\tif [[ -z ${PID} ]]; then\n\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] 检测到 Brook服务端 未运行 , 开始启动...\" | tee -a ${brook_log}\n\t\t/etc/init.d/brook start\n\t\tsleep 1s\n\t\tcheck_pid\n\t\tif [[ -z ${PID} ]]; then\n\t\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Brook服务端 启动失败...\" | tee -a ${brook_log}\n\t\telse\n\t\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Brook服务端 启动成功...\" | tee -a ${brook_log}\n\t\tfi\n\telse\n\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Brook服务端 进程运行正常...\" | tee -a ${brook_log}\n\tfi\n}\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${bk_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${bk_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/brook\" ]]; then\n\t\trm -rf /etc/init.d/brook\n\t\tService_brook\n\tfi\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook.sh\" && chmod +x brook.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\ncheck_sys\naction=$1\nif [[ \"${action}\" == \"monitor\" ]]; then\n\tcrontab_monitor_brook\nelse\n\techo && echo -e \"  Brook 一键管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  ---- Toyo | doub.io/brook-jc3 ----\n  \n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 Brook\n ${Green_font_prefix} 2.${Font_color_suffix} 更新 Brook\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 Brook\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 Brook\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 Brook\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 Brook\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 设置 账号配置\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 账号信息\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 日志信息\n ${Green_font_prefix}10.${Font_color_suffix} 查看 链接信息\n————————————\" && echo\n\tif [[ -e ${brook_file} ]]; then\n\t\tcheck_pid\n\t\tif [[ ! -z \"${PID}\" ]]; then\n\t\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\t\telse\n\t\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\t\tfi\n\telse\n\t\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\n\tfi\n\techo\n\tread -e -p \" 请输入数字 [0-10]:\" num\n\tcase \"$num\" in\n\t\t0)\n\t\tUpdate_Shell\n\t\t;;\n\t\t1)\n\t\tInstall_brook\n\t\t;;\n\t\t2)\n\t\tUpdate_brook\n\t\t;;\n\t\t3)\n\t\tUninstall_brook\n\t\t;;\n\t\t4)\n\t\tStart_brook\n\t\t;;\n\t\t5)\n\t\tStop_brook\n\t\t;;\n\t\t6)\n\t\tRestart_brook\n\t\t;;\n\t\t7)\n\t\tSet_brook\n\t\t;;\n\t\t8)\n\t\tView_brook\n\t\t;;\n\t\t9)\n\t\tView_Log\n\t\t;;\n\t\t10)\n\t\tView_user_connection_info\n\t\t;;\n\t\t*)\n\t\techo \"请输入正确数字 [0-10]\"\n\t\t;;\n\tesac\nfi"
        },
        {
          "name": "caddy_install.sh",
          "type": "blob",
          "size": 5.4658203125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n#=================================================\n#       System Required: CentOS/Debian/Ubuntu\n#       Description: Caddy Install\n#       Version: 1.0.8\n#       Author: Toyo\n#       Blog: https://doub.io/shell-jc1/\n#=================================================\nfile=\"/usr/local/caddy/\"\ncaddy_file=\"/usr/local/caddy/caddy\"\ncaddy_conf_file=\"/usr/local/caddy/Caddyfile\"\nInfo_font_prefix=\"\\033[32m\" && Error_font_prefix=\"\\033[31m\" && Info_background_prefix=\"\\033[42;37m\" && Error_background_prefix=\"\\033[41;37m\" && Font_suffix=\"\\033[0m\"\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前非ROOT账号(或没有ROOT权限)，无法继续操作，请更换ROOT账号或使用 ${Green_background_prefix}sudo su${Font_color_suffix} 命令获取临时ROOT权限（执行后可能会提示输入当前账号的密码）。\" && exit 1\n}\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=$(uname -m)\n}\ncheck_installed_status(){\n\t[[ ! -e ${caddy_file} ]] && echo -e \"${Error_font_prefix}[错误]${Font_suffix} Caddy 没有安装，请检查 !\" && exit 1\n}\nDownload_caddy(){\n\t[[ ! -e ${file} ]] && mkdir \"${file}\"\n\tcd \"${file}\"\n\tPID=$(ps -ef |grep \"caddy\" |grep -v \"grep\" |grep -v \"init.d\" |grep -v \"service\" |grep -v \"caddy_install\" |awk '{print $2}')\n\t[[ ! -z ${PID} ]] && kill -9 ${PID}\n\t[[ -e \"caddy_linux*.tar.gz\" ]] && rm -rf \"caddy_linux*.tar.gz\"\n\t\n\tif [[ ! -z ${extension} ]]; then\n\t\textension_all=\"?plugins=${extension}&license=personal\"\n\telse\n\t\textension_all=\"?license=personal\"\n\tfi\n\t\n\tif [[ ${bit} == \"x86_64\" ]]; then\n\t\twget --no-check-certificate -O \"caddy_linux.tar.gz\" \"https://caddyserver.com/download/linux/amd64${extension_all}\"\n\telif [[ ${bit} == \"i386\" || ${bit} == \"i686\" ]]; then\n\t\twget --no-check-certificate -O \"caddy_linux.tar.gz\" \"https://caddyserver.com/download/linux/386${extension_all}\"\n\telif [[ ${bit} == \"armv7l\" ]]; then\n\t\twget --no-check-certificate -O \"caddy_linux.tar.gz\" \"https://caddyserver.com/download/linux/arm7${extension_all}\"\n\telse\n\t\techo -e \"${Error_font_prefix}[错误]${Font_suffix} 不支持 [${bit}] ! 请向本站反馈[]中的名称，我会看看是否可以添加支持。\" && exit 1\n\tfi\n\t[[ ! -e \"caddy_linux.tar.gz\" ]] && echo -e \"${Error_font_prefix}[错误]${Font_suffix} Caddy 下载失败 !\" && exit 1\n\ttar zxf \"caddy_linux.tar.gz\"\n\trm -rf \"caddy_linux.tar.gz\"\n\t[[ ! -e ${caddy_file} ]] && echo -e \"${Error_font_prefix}[错误]${Font_suffix} Caddy 解压失败或压缩文件错误 !\" && exit 1\n\trm -rf LICENSES.txt\n\trm -rf README.txt \n\trm -rf CHANGES.txt\n\trm -rf \"init/\"\n\tchmod +x caddy\n}\nService_caddy(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/caddy_centos -O /etc/init.d/caddy; then\n\t\t\techo -e \"${Error_font_prefix}[错误]${Font_suffix} Caddy服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/caddy\n\t\tchkconfig --add caddy\n\t\tchkconfig caddy on\n\telse\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/caddy_debian -O /etc/init.d/caddy; then\n\t\t\techo -e \"${Error_font_prefix}[错误]${Font_suffix} Caddy服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/caddy\n\t\tupdate-rc.d -f caddy defaults\n\tfi\n}\ninstall_caddy(){\n\tcheck_root\n\tif [[ -e ${caddy_file} ]]; then\n\t\techo && echo -e \"${Error_font_prefix}[信息]${Font_suffix} 检测到 Caddy 已安装，是否继续安装(覆盖更新)？[y/N]\"\n\t\tread -e -p \"(默认: n):\" yn\n\t\t[[ -z ${yn} ]] && yn=\"n\"\n\t\tif [[ ${yn} == [Nn] ]]; then\n\t\t\techo && echo \"已取消...\" && exit 1\n\t\tfi\n\tfi\n\tDownload_caddy\n\tService_caddy\n\techo && echo -e \" Caddy 使用命令：${caddy_conf_file}\n 日志文件：cat /tmp/caddy.log\n 使用说明：service caddy start | stop | restart | status\n 或者使用：/etc/init.d/caddy start | stop | restart | status\n ${Info_font_prefix}[信息]${Font_suffix} Caddy 安装完成！\" && echo\n}\nuninstall_caddy(){\n\tcheck_installed_status\n\techo && echo \"确定要卸载 Caddy ? [y/N]\"\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tPID=`ps -ef |grep \"caddy\" |grep -v \"grep\" |grep -v \"init.d\" |grep -v \"service\" |grep -v \"caddy_install\" |awk '{print $2}'`\n\t\t[[ ! -z ${PID} ]] && kill -9 ${PID}\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del caddy\n\t\telse\n\t\t\tupdate-rc.d -f caddy remove\n\t\tfi\n\t\t[[ -s /tmp/caddy.log ]] && rm -rf /tmp/caddy.log\n\t\trm -rf ${caddy_file}\n\t\trm -rf ${caddy_conf_file}\n\t\trm -rf /etc/init.d/caddy\n\t\t[[ ! -e ${caddy_file} ]] && echo && echo -e \"${Info_font_prefix}[信息]${Font_suffix} Caddy 卸载完成 !\" && echo && exit 1\n\t\techo && echo -e \"${Error_font_prefix}[错误]${Font_suffix} Caddy 卸载失败 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\ncheck_sys\naction=$1\nextension=$2\n[[ -z $1 ]] && action=install\ncase \"$action\" in\n    install|uninstall)\n    ${action}_caddy\n    ;;\n    *)\n    echo \"输入错误 !\"\n    echo \"用法: {install | uninstall}\"\n    ;;\nesac"
        },
        {
          "name": "cloudt.sh",
          "type": "blob",
          "size": 14.6630859375,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: Cloud Torrent\n#\tVersion: 1.2.5\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/wlzy-12/\n#=================================================\n\nsh_ver=\"1.2.5\"\nfile=\"/usr/local/cloudtorrent\"\nct_file=\"/usr/local/cloudtorrent/cloud-torrent\"\ndl_file=\"/usr/local/cloudtorrent/downloads\"\nct_config=\"/usr/local/cloudtorrent/cloud-torrent.json\"\nct_conf=\"/usr/local/cloudtorrent/cloud-torrent.conf\"\nct_log=\"/tmp/ct.log\"\nIncomingPort=\"50007\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前非ROOT账号(或没有ROOT权限)，无法继续操作，请更换ROOT账号或使用 ${Green_background_prefix}sudo su${Font_color_suffix} 命令获取临时ROOT权限（执行后可能会提示输入当前账号的密码）。\" && exit 1\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=$(uname -m)\n}\ncheck_installed_status(){\n\t[[ ! -e ${ct_file} ]] && echo -e \"${Error} Cloud Torrent 没有安装，请检查 !\" && exit 1\n}\ncheck_pid(){\n\tPID=$(ps -ef | grep cloud-torrent | grep -v grep | awk '{print $2}')\n}\ncheck_new_ver(){\n\tct_new_ver=$(wget --no-check-certificate -qO- -t2 -T3 https://api.github.com/repos/jpillora/cloud-torrent/releases| grep \"tag_name\"| head -n 1| awk -F \":\" '{print $2}'| sed 's/\\\"//g;s/,//g;s/ //g;s/v//g')\n\tif [[ -z ${ct_new_ver} ]]; then\n\t\techo -e \"${Error} Cloud Torrent 最新版本获取失败，请手动获取最新版本号[ https://github.com/jpillora/cloud-torrent/releases ]\"\n\t\tread -e -p \"请输入版本号 [ 格式 x.x.xx , 如 0.8.21 ] :\" ct_new_ver\n\t\t[[ -z \"${ct_new_ver}\" ]] && echo \"取消...\" && exit 1\n\telse\n\t\techo -e \"${Info} Cloud Torrent 目前最新版本为 ${ct_new_ver}\"\n\tfi\n}\ncheck_ver_comparison(){\n\tct_now_ver=$(${ct_file} --version)\n\tif [[ ${ct_now_ver} != ${ct_new_ver} ]]; then\n\t\techo -e \"${Info} 发现 Cloud Torrent 已有新版本 [ ${ct_new_ver} ]\"\n\t\tread -e -p \"是否更新 ? [Y/n] :\" yn\n\t\t[ -z \"${yn}\" ] && yn=\"y\"\n\t\tif [[ ${yn} == [Yy] ]]; then\n\t\t\tcheck_pid\n\t\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\t\trm -rf ${ct_file}\n\t\t\tDownload_ct\n\t\t\tStart_ct\n\t\tfi\n\telse\n\t\techo -e \"${Info} 当前 Cloud Torrent 已是最新版本 [ ${ct_new_ver} ]\" && exit 1\n\tfi\n}\nDownload_ct(){\n\tcd ${file}\n\tif [[ ${bit} == \"x86_64\" ]]; then\n\t\twget --no-check-certificate -O cloud-torrent.gz \"https://github.com/jpillora/cloud-torrent/releases/download/${ct_new_ver}/cloud-torrent_linux_amd64.gz\"\n\telif [[ ${bit} == \"i386\" || ${bit} == \"i686\" ]]; then\n\t\twget --no-check-certificate -O cloud-torrent.gz \"https://github.com/jpillora/cloud-torrent/releases/download/${ct_new_ver}/cloud-torrent_linux_386.gz\"\n\telse\n\t\twget --no-check-certificate -O cloud-torrent.gz \"https://github.com/jpillora/cloud-torrent/releases/download/${ct_new_ver}/cloud-torrent_linux_arm.gz\"\n\tfi\n\t[[ ! -e \"cloud-torrent.gz\" ]] && echo -e \"${Error} Cloud Torrent 下载失败 !\" && exit 1\n\tgzip -d cloud-torrent.gz\n\t[[ ! -e ${ct_file} ]] && echo -e \"${Error} Cloud Torrent 解压失败(可能是 压缩包损坏 或者 没有安装 Gzip) !\" && exit 1\n\trm -rf cloud-torrent.gz\n\tchmod +x cloud-torrent\n}\nService_ct(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/cloudt_centos\" -O /etc/init.d/cloudt; then\n\t\t\techo -e \"${Error} Cloud Torrent服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/cloudt\n\t\tchkconfig --add cloudt\n\t\tchkconfig cloudt on\n\telse\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/cloudt_debian\" -O /etc/init.d/cloudt; then\n\t\t\techo -e \"${Error} Cloud Torrent服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/cloudt\n\t\tupdate-rc.d -f cloudt defaults\n\tfi\n\techo -e \"${Info} Cloud Torrent服务 管理脚本下载完成 !\"\n}\nInstallation_dependency(){\n\tgzip_ver=$(gzip -V)\n\tif [[ -z ${gzip_ver} ]]; then\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum update\n\t\t\tyum install -y gzip\n\t\telse\n\t\t\tapt-get update\n\t\t\tapt-get install -y gzip\n\t\tfi\n\tfi\n\tmkdir ${file}\n\tmkdir ${dl_file}\n}\nWrite_config(){\n\tcat > ${ct_conf}<<-EOF\nhost = ${ct_host}\nport = ${ct_port}\nuser = ${ct_user}\npasswd = ${ct_passwd}\nEOF\n}\nRead_config(){\n\t[[ ! -e ${ct_conf} ]] && echo -e \"${Error} Cloud Torrent 配置文件不存在 !\" && exit 1\n\thost=`cat ${ct_conf}|grep \"host = \"|awk -F \"host = \" '{print $NF}'`\n\tport=`cat ${ct_conf}|grep \"port = \"|awk -F \"port = \" '{print $NF}'`\n\tuser=`cat ${ct_conf}|grep \"user = \"|awk -F \"user = \" '{print $NF}'`\n\tpasswd=`cat ${ct_conf}|grep \"passwd = \"|awk -F \"passwd = \" '{print $NF}'`\n}\nSet_host(){\n\techo -e \"请输入 Cloud Torrent 监听域名或IP（当你要绑定域名前，记得先做好域名解析，目前只支持http://访问，不要写http://，只写域名！）\"\n\tread -e -p \"(默认: 0.0.0.0 监听网卡所有IP):\" ct_host\n\t[[ -z \"${ct_host}\" ]] && ct_host=\"0.0.0.0\"\n\techo && echo \"========================\"\n\techo -e \"\t主机 : ${Red_background_prefix} ${ct_host} ${Font_color_suffix}\"\n\techo \"========================\" && echo\n}\nSet_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 Cloud Torrent 监听端口 [1-65535]（如果是绑定的域名，那么建议80端口）\"\n\t\tread -e -p \"(默认端口: 80):\" ct_port\n\t\t[[ -z \"${ct_port}\" ]] && ct_port=\"80\"\n\t\techo $((${ct_port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${ct_port} -ge 1 ]] && [[ ${ct_port} -le 65535 ]]; then\n\t\t\t\techo && echo \"========================\"\n\t\t\t\techo -e \"\t端口 : ${Red_background_prefix} ${ct_port} ${Font_color_suffix}\"\n\t\t\t\techo \"========================\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\tdone\n}\nSet_user(){\n\techo \"请输入 Cloud Torrent 用户名\"\n\tread -e -p \"(默认用户名: user):\" ct_user\n\t[[ -z \"${ct_user}\" ]] && ct_user=\"user\"\n\techo && echo \"========================\"\n\techo -e \"\t用户名 : ${Red_background_prefix} ${ct_user} ${Font_color_suffix}\"\n\techo \"========================\" && echo\n\n\techo \"请输入 Cloud Torrent 用户名的密码\"\n\tread -e -p \"(默认密码: 随机生成10位数字+字母):\" ct_passwd\n\t[[ -z \"${ct_passwd}\" ]] && ct_passwd=$(date +%s%N | md5sum | head -c 10)\n\techo && echo \"========================\"\n\techo -e \"\t密码 : ${Red_background_prefix} ${ct_passwd} ${Font_color_suffix}\"\n\techo \"========================\" && echo\n}\nSet_conf(){\n\tSet_host\n\tSet_port\n\tread -e -p \"是否设置 用户名和密码 ? [y/N] :\" yn\n\t[[ -z \"${yn}\" ]] && yn=\"n\"\n\tif [[ ${yn} == [Yy] ]]; then\n\t\tSet_user\n\telse\n\t\tct_user=\"\" && ct_passwd=\"\"\n\tfi\n}\nSet_ct(){\n\tcheck_installed_status\n\tcheck_sys\n\tcheck_pid\n\tSet_conf\n\tRead_config\n\tDel_iptables\n\tWrite_config\n\tAdd_iptables\n\tSave_iptables\n\tRestart_ct\n}\nInstall_ct(){\n\tcheck_root\n\t[[ -e ${ct_file} ]] && echo -e \"${Error} 检测到 Cloud Torrent 已安装 !\" && exit 1\n\tcheck_sys\n\techo -e \"${Info} 开始设置 用户配置...\"\n\tSet_conf\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始检测最新版本...\"\n\tcheck_new_ver\n\techo -e \"${Info} 开始下载/安装...\"\n\tDownload_ct\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService_ct\n\techo -e \"${Info} 开始写入 配置文件...\"\n\tWrite_config\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart_ct\n}\nStart_ct(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} Cloud Torrent 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/cloudt start\n}\nStop_ct(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} Cloud Torrent 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/cloudt stop\n}\nRestart_ct(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/cloudt stop\n\t/etc/init.d/cloudt start\n}\nLog_ct(){\n\t[[ ! -e \"${ct_log}\" ]] && echo -e \"${Error} Cloud Torrent 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${ct_log}${Font_color_suffix} 命令。\" && echo\n\ttail -f \"${ct_log}\"\n}\nUpdate_ct(){\n\tcheck_installed_status\n\tcheck_sys\n\tcheck_new_ver\n\tcheck_ver_comparison\n\t/etc/init.d/cloudt start\n}\nUninstall_ct(){\n\tcheck_installed_status\n\techo \"确定要卸载 Cloud Torrent ? (y/N)\"\n\techo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tRead_config\n\t\tDel_iptables\n\t\tSave_iptables\n\t\trm -rf ${file} && rm -rf /etc/init.d/cloudt\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del cloudt\n\t\telse\n\t\t\tupdate-rc.d -f cloudt remove\n\t\tfi\n\t\techo && echo \"Cloud torrent 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nView_ct(){\n\tcheck_installed_status\n\tRead_config\n\tif [[ \"${host}\" == \"0.0.0.0\" ]]; then\n\t\thost=$(wget -qO- -t1 -T2 ipinfo.io/ip)\n\t\tif [[ -z \"${host}\" ]]; then\n\t\t\thost=$(wget -qO- -t1 -T2 api.ip.sb/ip)\n\t\t\tif [[ -z \"${host}\" ]]; then\n\t\t\t\thost=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\t\tif [[ -z \"${host}\" ]]; then\n\t\t\t\t\thost=\"VPS_IP\"\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tfi\n\tif [[ \"${port}\" == \"80\" ]]; then\n\t\tport=\"\"\n\telse\n\t\tport=\":${port}\"\n\tfi\n\tif [[ -z ${user} ]]; then\n\t\tclear && echo \"————————————————\" && echo\n\t\techo -e \" 你的 Cloud Torrent 信息 :\" && echo\n\t\techo -e \" 地址\\t: ${Green_font_prefix}http://${host}${port}${Font_color_suffix}\"\n\t\techo && echo \"————————————————\"\n\telse\n\t\tclear && echo \"————————————————\" && echo\n\t\techo -e \" 你的 Cloud Torrent 信息 :\" && echo\n\t\techo -e \" 地址\\t: ${Green_font_prefix}http://${host}${port}${Font_color_suffix}\"\n\t\techo -e \" 用户\\t: ${Green_font_prefix}${user}${Font_color_suffix}\"\n\t\techo -e \" 密码\\t: ${Green_font_prefix}${passwd}${Font_color_suffix}\"\n\t\techo && echo \"————————————————\"\n\tfi\n}\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${ct_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${ct_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${IncomingPort} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${IncomingPort} -j ACCEPT\n\tiptables -I OUTPUT -m state --state NEW -m tcp -p tcp --dport ${IncomingPort} -j ACCEPT\n\tiptables -I OUTPUT -m state --state NEW -m udp -p udp --dport ${IncomingPort} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${IncomingPort} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${IncomingPort} -j ACCEPT\n\tiptables -D OUTPUT -m state --state NEW -m tcp -p tcp --dport ${IncomingPort} -j ACCEPT\n\tiptables -D OUTPUT -m state --state NEW -m udp -p udp --dport ${IncomingPort} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/cloudt.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/cloudt\" ]]; then\n\t\trm -rf /etc/init.d/cloudt\n\t\tService_ct\n\tfi\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/cloudt.sh\" && chmod +x cloudt.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\necho && echo -e \"  Cloud Torrent 一键管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  ---- Toyo | doub.io/wlzy-12/ ----\n  \n ${Green_font_prefix}0.${Font_color_suffix} 升级脚本\n\n ${Green_font_prefix}1.${Font_color_suffix} 安装 Cloud Torrent\n ${Green_font_prefix}2.${Font_color_suffix} 升级 Cloud Torrent\n ${Green_font_prefix}3.${Font_color_suffix} 卸载 Cloud Torrent\n————————————\n ${Green_font_prefix}4.${Font_color_suffix} 启动 Cloud Torrent\n ${Green_font_prefix}5.${Font_color_suffix} 停止 Cloud Torrent\n ${Green_font_prefix}6.${Font_color_suffix} 重启 Cloud Torrent\n————————————\n ${Green_font_prefix}7.${Font_color_suffix} 设置 Cloud Torrent 账号\n ${Green_font_prefix}8.${Font_color_suffix} 查看 Cloud Torrent 账号\n ${Green_font_prefix}9.${Font_color_suffix} 查看 Cloud Torrent 日志\n————————————\" && echo\nif [[ -e ${ct_file} ]]; then\n\tcheck_pid\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\telse\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\tfi\nelse\n\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\nfi\necho\nread -e -p \" 请输入数字 [0-9]:\" num\ncase \"$num\" in\n\t0)\n\tUpdate_Shell\n\t;;\n\t1)\n\tInstall_ct\n\t;;\n\t2)\n\tUpdate_ct\n\t;;\n\t3)\n\tUninstall_ct\n\t;;\n\t4)\n\tStart_ct\n\t;;\n\t5)\n\tStop_ct\n\t;;\n\t6)\n\tRestart_ct\n\t;;\n\t7)\n\tSet_ct\n\t;;\n\t8)\n\tView_ct\n\t;;\n\t9)\n\tLog_ct\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-9]\"\n\t;;\nesac"
        },
        {
          "name": "daze.sh",
          "type": "blob",
          "size": 24.3115234375,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: DAZE\n#\tVersion: 1.0.1\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/daze-jc3/\n#=================================================\n\nsh_ver=\"1.0.1\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile_1=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\nFolder=\"/usr/local/daze\"\nFile=\"/usr/local/daze/daze\"\nCONF=\"/usr/local/daze/daze.conf\"\nNow_ver_File=\"/usr/local/daze/ver.txt\"\nLog_File=\"/usr/local/daze/daze.log\"\nCrontab_file=\"/usr/bin/crontab\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前非ROOT账号(或没有ROOT权限)，无法继续操作，请更换ROOT账号或使用 ${Green_background_prefix}sudo su${Font_color_suffix} 命令获取临时ROOT权限（执行后可能会提示输入当前账号的密码）。\" && exit 1\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_installed_status(){\n\t[[ ! -e ${File} ]] && echo -e \"${Error} DAZE 没有安装，请检查 !\" && exit 1\n}\ncheck_crontab_installed_status(){\n\tif [[ ! -e ${Crontab_file} ]]; then\n\t\techo -e \"${Error} Crontab 没有安装，开始安装...\"\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum install crond -y\n\t\telse\n\t\t\tapt-get install cron -y\n\t\tfi\n\t\tif [[ ! -e ${Crontab_file} ]]; then\n\t\t\techo -e \"${Error} Crontab 安装失败，请检查！\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} Crontab 安装成功！\"\n\t\tfi\n\tfi\n}\ncheck_pid(){\n\tPID=$(ps -ef| grep \"daze\"| grep -v grep| grep -v \"daze.sh\"| grep -v \"init.d\"| grep -v \"service\"| awk '{print $2}')\n}\ncheck_new_ver(){\n\tnew_ver=$(wget --no-check-certificate -qO- -t1 -T3 https://api.github.com/repos/mohanson/daze/releases| grep \"tag_name\"| head -n 1| awk -F \":\" '{print $2}'| sed 's/\\\"//g;s/,//g;s/ //g')\n\tif [[ -z ${new_ver} ]]; then\n\t\techo -e \"${Error} DAZE 最新版本获取失败，请手动获取最新版本号[ https://github.com/mohanson/daze/releases ]\"\n\t\tread -e -p \"请输入版本号 [ 格式如 2018.10.15 ] :\" new_ver\n\t\t[[ -z \"${new_ver}\" ]] && echo \"取消...\" && exit 1\n\telse\n\t\techo -e \"${Info} 检测到 DAZE 最新版本为 [ ${new_ver} ]\"\n\tfi\n}\ncheck_ver_comparison(){\n\tnow_ver=$(cat ${Now_ver_File})\n\t[[ -z ${now_ver} ]] && echo \"${new_ver}\" > ${Now_ver_File}\n\tif [[ ${now_ver} != ${new_ver} ]]; then\n\t\techo -e \"${Info} 发现 DAZE 已有新版本 [ ${new_ver} ]，当前版本 [ ${now_ver} ]\"\n\t\tread -e -p \"是否更新 ? [Y/n] :\" yn\n\t\t[[ -z \"${yn}\" ]] && yn=\"y\"\n\t\tif [[ $yn == [Yy] ]]; then\n\t\t\tcheck_pid\n\t\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\t\tcp \"${CONF}\" \"/tmp/daze.conf\"\n\t\t\trm -rf ${Folder}\n\t\t\tmkdir ${Folder}\n\t\t\tDownload\n\t\t\tmv \"/tmp/daze.conf\" \"${CONF}\"\n\t\t\tStart\n\t\tfi\n\telse\n\t\techo -e \"${Info} 当前 DAZE 已是最新版本 [ ${new_ver} ]\" && exit 1\n\tfi\n}\nDownload(){\n\tcd ${Folder}\n\tif [[ ${bit} == \"x86_64\" ]]; then\n\t\tbit=\"amd64\"\n\telif [[ ${bit} == \"i386\" || ${bit} == \"i686\" ]]; then\n\t\tbit=\"386\"\n\telse\n\t\tbit=\"arm\"\n\tfi\n\twget --no-check-certificate -N \"https://github.com/mohanson/daze/releases/download/${new_ver}/daze_linux_${bit}\"\n\t[[ ! -e \"daze_linux_${bit}\" ]] && echo -e \"${Error} DAZE 下载失败 !\" && rm -rf \"${Folder}\" && exit 1\n\tmv \"daze_linux_${bit}\" \"daze\"\n\t[[ ! -e \"daze\" ]] && echo -e \"${Error} DAZE 重命名失败 !\" && rm -rf \"${Folder}\" && exit 1\n\tchmod +x daze\n\techo \"${new_ver}\" > ${Now_ver_File}\n}\nService(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/daze_centos -O /etc/init.d/daze; then\n\t\t\techo -e \"${Error} DAZE 服务管理脚本下载失败 !\" && rm -rf \"${Folder}\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/daze\n\t\tchkconfig --add daze\n\t\tchkconfig daze on\n\telse\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/daze_debian -O /etc/init.d/daze; then\n\t\t\techo -e \"${Error} DAZE 服务管理脚本下载失败 !\" && rm -rf \"${Folder}\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/daze\n\t\tupdate-rc.d -f daze defaults\n\tfi\n\techo -e \"${Info} DAZE 服务管理脚本下载完成 !\"\n}\nInstallation_dependency(){\n\t\\cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\tmkdir ${Folder}\n}\nWrite_config(){\n\tcat > ${CONF}<<-EOF\nport=${new_port}\npassword=${new_password}\nmethod=${new_method}\nobfs_url=${new_obfs_url}\ndns=${new_dns}\nEOF\n}\nRead_config(){\n\t[[ ! -e ${CONF} ]] && echo -e \"${Error} DAZE 配置文件不存在 !\" && exit 1\n\tport=$(cat ${CONF}|grep \"port\"|awk -F \"=\" '{print $NF}')\n\tpassword=$(cat ${CONF}|grep \"password\"|awk -F \"=\" '{print $NF}')\n\tmethod=$(cat ${CONF}|grep \"method\"|awk -F \"=\" '{print $NF}')\n\tobfs_url=$(cat ${CONF}|grep \"obfs_url\"|awk -F \"=\" '{print $NF}')\n\tdns=$(cat ${CONF}|grep \"dns\"|awk -F \"=\" '{print $NF}')\n}\nSet_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 DAZE 监听端口 [1-65535]（如果要混淆伪装，建议使用：80 8080 8880）\"\n\t\tread -e -p \"(默认: 8880):\" new_port\n\t\t[[ -z \"${new_port}\" ]] && new_port=\"8880\"\n\t\techo $((${new_port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${new_port} -ge 1 ]] && [[ ${new_port} -le 65535 ]]; then\n\t\t\t\techo && echo \"========================\"\n\t\t\t\techo -e \"\t端口 : ${Red_background_prefix} ${new_port} ${Font_color_suffix}\"\n\t\t\t\techo \"========================\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\t\tdone\n}\nSet_password(){\n\techo \"请输入 DAZE 密码\"\n\tread -e -p \"(默认: doub.io):\" new_password\n\t[[ -z \"${new_password}\" ]] && new_password=\"doub.io\"\n\techo && echo \"========================\"\n\techo -e \"\t密码 : ${Red_background_prefix} ${new_password} ${Font_color_suffix}\"\n\techo \"========================\" && echo\n}\nSet_method(){\n\techo -e \"请选择 DAZE 加密方式(或者说混淆)\n\t\n ${Green_font_prefix}1.${Font_color_suffix} ashe (仅加密无混淆)\n ${Green_font_prefix}2.${Font_color_suffix} asheshadow (加密+HTTP混淆，注意后面务必填写混淆伪装的网站)\n ${Tip} 如果使用 asheshadow，那么建议搭配 80 8080 等端口，如果你有域名，请域名A记录指向当前服务器IP，DAZE 客户端处服务器地址填写你的域名，即可混淆伪装为 http://域名:端口/\" && echo\n\tread -e -p \"(默认: 1. ashe):\" new_method\n\t[[ -z \"${new_method}\" ]] && new_method=\"3\"\n\tif [[ ${new_method} == \"1\" ]]; then\n\t\tnew_method=\"ashe\"\n\telif [[ ${new_method} == \"2\" ]]; then\n\t\tnew_method=\"asheshadow\"\n\telse\n\t\tnew_method=\"ashe\"\n\tfi\n\techo && echo \"========================\"\n\techo -e \"\t加密 : ${Red_background_prefix} ${new_method^^} ${Font_color_suffix}\"\n\techo \"========================\" && echo\n}\nSet_obfs_url(){\n\techo \"请输入 DAZE 要混淆伪装的网站，如果加密方式为 asheshadow，请务必填写(反向代理，只支持 HTTP:// 网站)\n建议混淆伪装网站具备以下特点：有 http:// 地址，且不强制重定向为 https://，该网站大流量传输属于正常情况，推荐使用 CentOS Debian Ubuntu 等系统的内核仓库地址。\"\n\tread -e -p \"(默认不伪装):\" new_obfs_url\n\tif [[ ! -z ${new_obfs_url} ]]; then\n\t\techo && echo \"========================\"\n\t\techo -e \"\t伪装 : ${Red_background_prefix} ${new_obfs_url} ${Font_color_suffix}\"\n\t\techo \"========================\" && echo\n\tfi\n}\nSet_dns(){\n\techo \"请输入 DAZE 要来解析域名的 DNS (目前只支持 53 端口的DNS，例如：8.8.8.8:53)\"\n\tread -e -p \"(默认: 8.8.8.8:53):\" new_dns\n\t[[ -z \"${new_dns}\" ]] && new_dns=\"8.8.8.8:53\"\n\techo && echo \"========================\"\n\techo -e \"\tDNS : ${Red_background_prefix} ${new_dns} ${Font_color_suffix}\"\n\techo \"========================\" && echo\n}\nSet_conf(){\n\tSet_port\n\tSet_password\n\tSet_method\n\tSet_obfs_url\n\tSet_dns\n}\nModify_restart(){\n\techo -e \"是否要立刻重启? (Y/n)\"\n\tread -e -p \"(默认: Y):\" Modify_restart_yn\n\t[[ -z ${Modify_restart_yn} ]] && Modify_restart_yn=\"Y\"\n\tif [[ ${Modify_restart_yn} == [Yy] ]]; then\n\t\tRestart\n\telse\n\t\techo -e \"已取消...\"\n\tfi\n}\nModify_port(){\n\tRead_config\n\tSet_port\n\tnew_password=\"${password}\"\n\tnew_obfs_url=\"${obfs_url}\"\n\tnew_method=\"${method}\"\n\tnew_dns=\"${dns}\"\n\tDel_iptables\n\tWrite_config\n\tAdd_iptables\n\tSave_iptables\n\tModify_restart\n}\nModify_password(){\n\tRead_config\n\tSet_password\n\tnew_port=\"${port}\"\n\tnew_obfs_url=\"${obfs_url}\"\n\tnew_method=\"${method}\"\n\tnew_dns=\"${dns}\"\n\tWrite_config\n\tModify_restart\n}\nModify_obfs_url(){\n\tRead_config\n\tSet_obfs_url\n\tnew_port=\"${port}\"\n\tnew_password=\"${password}\"\n\tnew_method=\"${method}\"\n\tnew_dns=\"${dns}\"\n\tWrite_config\n\tModify_restart\n}\nModify_method(){\n\tRead_config\n\tSet_method\n\tnew_port=\"${port}\"\n\tnew_password=\"${password}\"\n\tnew_obfs_url=\"${obfs_url}\"\n\tnew_dns=\"${dns}\"\n\tWrite_config\n\tModify_restart\n}\nModify_dns(){\n\tRead_config\n\tSet_method\n\tnew_port=\"${port}\"\n\tnew_password=\"${password}\"\n\tnew_method=\"${method}\"\n\tnew_obfs_url=\"${obfs_url}\"\n\tWrite_config\n\tModify_restart\n}\nModify_all(){\n\tRead_config\n\tSet_conf\n\tDel_iptables\n\tWrite_config\n\tAdd_iptables\n\tSave_iptables\n\tModify_restart\n}\nSet(){\n\tcheck_installed_status\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix}  修改 端口配置\n ${Green_font_prefix}2.${Font_color_suffix}  修改 密码配置\n ${Green_font_prefix}3.${Font_color_suffix}  修改 加密方式(以及混淆)\n ${Green_font_prefix}4.${Font_color_suffix}  修改 伪装配置(反向代理)\n ${Green_font_prefix}5.${Font_color_suffix}  修改 DNS 配置\n ${Green_font_prefix}6.${Font_color_suffix}  修改 全部配置\n————————————————\n ${Green_font_prefix}7.${Font_color_suffix}  监控 运行状态\n \n ${Tip} 用户的端口是不能重复的，密码可以重复 !\" && echo\n\tread -e -p \"(默认: 取消):\" gf_modify\n\t[[ -z \"${gf_modify}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${gf_modify} == \"1\" ]]; then\n\t\tModify_port\n\telif [[ ${gf_modify} == \"2\" ]]; then\n\t\tModify_password\n\telif [[ ${gf_modify} == \"3\" ]]; then\n\t\tModify_method\n\telif [[ ${gf_modify} == \"4\" ]]; then\n\t\tModify_obfs_url\n\telif [[ ${gf_modify} == \"5\" ]]; then\n\t\tModify_dns\n\telif [[ ${gf_modify} == \"6\" ]]; then\n\t\tModify_all\n\telif [[ ${gf_modify} == \"7\" ]]; then\n\t\tSet_crontab_monitor\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-6)\" && exit 1\n\tfi\n}\nInstall(){\n\tcheck_root\n\t[[ -e ${File} ]] && echo -e \"${Error} 检测到 DAZE 已安装 !\" && exit 1\n\techo -e \"${Info} 开始设置 用户配置...\"\n\tSet_conf\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始检测最新版本...\"\n\tcheck_new_ver\n\techo -e \"${Info} 开始下载/安装...\"\n\tDownload\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService\n\techo -e \"${Info} 开始写入 配置文件...\"\n\tWrite_config\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart\n}\nStart(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} DAZE 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/daze start\n\tsleep 1s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View_daze\n}\nStop(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} DAZE 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/daze stop\n}\nRestart(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/daze stop\n\t/etc/init.d/daze start\n\tsleep 1s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View_daze\n}\nUpdate(){\n\tcheck_installed_status\n\tcheck_new_ver\n\tcheck_ver_comparison\n}\nUninstall(){\n\tcheck_installed_status\n\techo -e \"确定要卸载 DAZE ? (y/N)\"\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tRead_config\n\t\tDel_iptables\n\t\tSave_iptables\n\t\trm -rf ${Folder}\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del daze\n\t\telse\n\t\t\tupdate-rc.d -f daze remove\n\t\tfi\n\t\trm -rf /etc/init.d/daze\n\t\techo && echo \"DAZE 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nView_daze(){\n\tcheck_installed_status\n\tRead_config\n\tip=$(wget -qO- -t1 -T2 ipinfo.io/ip)\n\tif [[ -z \"${ip}\" ]]; then\n\t\tip=$(wget -qO- -t1 -T2 api.ip.sb/ip)\n\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\tip=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\t\tip=\"VPS_IP\"\n\t\t\tfi\n\t\tfi\n\tfi\n\t[[ -z ${obfs_url} ]] && obfs_url=\"无\"\n\tlink_qr\n\tclear && echo \"————————————————\" && echo\n\techo -e \" DAZE 账号信息 :\" && echo\n\techo -e \" 地址\\t: ${Green_font_prefix}${ip}${Font_color_suffix}\"\n\techo -e \" 端口\\t: ${Green_font_prefix}${port}${Font_color_suffix}\"\n\techo -e \" 密码\\t: ${Green_font_prefix}${password}${Font_color_suffix}\"\n\techo -e \" 加密\\t: ${Green_font_prefix}${method}${Font_color_suffix}\"\n\techo -e \" 伪装\\t: ${Green_font_prefix}${obfs_url}${Font_color_suffix}\"\n\techo -e \" DNS \\t: ${Green_font_prefix}${dns}${Font_color_suffix}\"\n\techo -e \"${link}\"\n\techo -e \"${Tip} 链接仅适用于Windows系统的 DAZE Tools 客户端（https://doub.io/dbrj-17/）。\"\n\techo && echo \"————————————————\"\n}\nurlsafe_base64(){\n\tdate=$(echo -n \"$1\"|base64|sed ':a;N;s/\\n//g;ta'|sed 's/=//g;s/+/-/g;s/\\//_/g')\n\techo -e \"${date}\"\n}\nlink_qr(){\n\tPWDbase64=$(urlsafe_base64 \"${password}\")\n\tbase64=$(urlsafe_base64 \"${ip}:${port}@${PWDbase64}:${method}\")\n\turl=\"daze://${base64}\"\n\tQRcode=\"http://doub.pw/qr/qr.php?text=${url}\"\n\tlink=\" 链接\\t: ${Red_font_prefix}${url}${Font_color_suffix} \\n 二维码 : ${Red_font_prefix}${QRcode}${Font_color_suffix} \\n \"\n}\nView_Log(){\n\tcheck_installed_status\n\t[[ ! -e ${Log_File} ]] && echo -e \"${Error} DAZE 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\"\n\techo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${Log_File}${Font_color_suffix} 命令。\"\n\techo -e \"如果需要清理日志，请用 ${Red_font_prefix}echo \\\"\\\" > ${Log_File}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${Log_File}\n}\n# 显示 连接信息\ndebian_View_user_connection_info(){\n\tformat_1=$1\n\tRead_config\n\tuser_port=${port}\n\tuser_IP_1=$(netstat -anp |grep 'ESTABLISHED' |grep 'daze' |grep 'tcp6' |grep \":${user_port} \" |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\")\n\tif [[ -z ${user_IP_1} ]]; then\n\t\tuser_IP_total=\"0\"\n\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\telse\n\t\tuser_IP_total=`echo -e \"${user_IP_1}\"|wc -l`\n\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\t\t\tget_IP_address\n\t\t\techo\n\t\telse\n\t\t\tuser_IP=$(echo -e \"\\n${user_IP_1}\")\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\tfi\n\tfi\n\tuser_IP=\"\"\n}\ncentos_View_user_connection_info(){\n\tformat_1=$1\n\tRead_config\n\tuser_port=${port}\n\tuser_IP_1=`netstat -anp |grep 'ESTABLISHED' |grep 'daze' |grep 'tcp' |grep \":${user_port} \"|grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\"`\n\tif [[ -z ${user_IP_1} ]]; then\n\t\tuser_IP_total=\"0\"\n\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\telse\n\t\tuser_IP_total=`echo -e \"${user_IP_1}\"|wc -l`\n\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\t\t\tget_IP_address\n\t\t\techo\n\t\telse\n\t\t\tuser_IP=$(echo -e \"\\n${user_IP_1}\")\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\tfi\n\tfi\n\tuser_IP=\"\"\n}\nView_user_connection_info(){\n\tcheck_installed_status\n\techo && echo -e \"请选择要显示的格式：\n ${Green_font_prefix}1.${Font_color_suffix} 显示 IP 格式\n ${Green_font_prefix}2.${Font_color_suffix} 显示 IP+IP归属地 格式\" && echo\n\tread -e -p \"(默认: 1):\" daze_connection_info\n\t[[ -z \"${daze_connection_info}\" ]] && daze_connection_info=\"1\"\n\tif [[ \"${daze_connection_info}\" == \"1\" ]]; then\n\t\tView_user_connection_info_1 \"\"\n\telif [[ \"${daze_connection_info}\" == \"2\" ]]; then\n\t\techo -e \"${Tip} 检测IP归属地(ipip.net)，如果IP较多，可能时间会比较长...\"\n\t\tView_user_connection_info_1 \"IP_address\"\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-2)\" && exit 1\n\tfi\n}\nView_user_connection_info_1(){\n\tformat=$1\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\t\tif [[ $? = 0 ]]; then\n\t\t\tdebian_View_user_connection_info \"$format\"\n\t\telse\n\t\t\tcentos_View_user_connection_info \"$format\"\n\t\tfi\n\telse\n\t\tdebian_View_user_connection_info \"$format\"\n\tfi\n}\nget_IP_address(){\n\t#echo \"user_IP_1=${user_IP_1}\"\n\tif [[ ! -z ${user_IP_1} ]]; then\n\t#echo \"user_IP_total=${user_IP_total}\"\n\t\tfor((integer_1 = ${user_IP_total}; integer_1 >= 1; integer_1--))\n\t\tdo\n\t\t\tIP=$(echo \"${user_IP_1}\" |sed -n \"$integer_1\"p)\n\t\t\t#echo \"IP=${IP}\"\n\t\t\tIP_address=$(wget -qO- -t1 -T2 http://freeapi.ipip.net/${IP}|sed 's/\\\"//g;s/,//g;s/\\[//g;s/\\]//g')\n\t\t\t#echo \"IP_address=${IP_address}\"\n\t\t\t#user_IP=\"${user_IP}\\n${IP}(${IP_address})\"\n\t\t\techo -e \"${Green_font_prefix}${IP}${Font_color_suffix} (${IP_address})\"\n\t\t\t#echo \"user_IP=${user_IP}\"\n\t\t\tsleep 1s\n\t\tdone\n\tfi\n}\nSet_crontab_monitor(){\n\tcheck_crontab_installed_status\n\tcrontab_monitor_status=$(crontab -l|grep \"daze.sh monitor\")\n\tif [[ -z \"${crontab_monitor_status}\" ]]; then\n\t\techo && echo -e \"当前监控模式: ${Green_font_prefix}未开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要开启 ${Green_font_prefix}DAZE 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动 DAZE 服务端)[Y/n]\"\n\t\tread -e -p \"(默认: y):\" crontab_monitor_status_ny\n\t\t[[ -z \"${crontab_monitor_status_ny}\" ]] && crontab_monitor_status_ny=\"y\"\n\t\tif [[ ${crontab_monitor_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_cron_start\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"当前监控模式: ${Green_font_prefix}已开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要关闭 ${Green_font_prefix}DAZE 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动 DAZE 服务端)[y/N]\"\n\t\tread -e -p \"(默认: n):\" crontab_monitor_status_ny\n\t\t[[ -z \"${crontab_monitor_status_ny}\" ]] && crontab_monitor_status_ny=\"n\"\n\t\tif [[ ${crontab_monitor_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_cron_stop\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\ncrontab_monitor_cron_start(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/daze.sh monitor/d\" \"$file_1/crontab.bak\"\n\techo -e \"\\n* * * * * /bin/bash $file_1/daze.sh monitor\" >> \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"daze.sh monitor\")\n\tif [[ -z ${cron_config} ]]; then\n\t\techo -e \"${Error} DAZE 服务端运行状态监控功能 启动失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} DAZE 服务端运行状态监控功能 启动成功 !\"\n\tfi\n}\ncrontab_monitor_cron_stop(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/daze.sh monitor/d\" \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"daze.sh monitor\")\n\tif [[ ! -z ${cron_config} ]]; then\n\t\techo -e \"${Error} DAZE 服务端运行状态监控功能 停止失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} DAZE 服务端运行状态监控功能 停止成功 !\"\n\tfi\n}\ncrontab_monitor(){\n\tcheck_installed_status\n\tcheck_pid\n\techo \"${PID}\"\n\tif [[ -z ${PID} ]]; then\n\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] 检测到 DAZE 服务端 未运行 , 开始启动...\" | tee -a ${Log_File}\n\t\t/etc/init.d/daze start\n\t\tsleep 1s\n\t\tcheck_pid\n\t\tif [[ -z ${PID} ]]; then\n\t\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] DAZE 服务端 启动失败...\" | tee -a ${Log_File}\n\t\telse\n\t\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] DAZE 服务端 启动成功...\" | tee -a ${Log_File}\n\t\tfi\n\telse\n\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] DAZE 服务端 进程运行正常...\" | tee -a ${Log_File}\n\tfi\n}\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${new_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${new_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/daze.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/daze\" ]]; then\n\t\trm -rf /etc/init.d/daze\n\t\tService\n\tfi\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/daze.sh\" && chmod +x daze.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\ncheck_sys\naction=$1\nif [[ \"${action}\" == \"monitor\" ]]; then\n\tcrontab_monitor\nelse\necho && echo -e \"  DAZE 一键管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  -- Toyo | doub.io/daze-jc3 --\n  \n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 DAZE\n ${Green_font_prefix} 2.${Font_color_suffix} 升级 DAZE\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 DAZE\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 DAZE\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 DAZE\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 DAZE\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 设置 账号配置\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 账号信息\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 日志信息\n ${Green_font_prefix}10.${Font_color_suffix} 查看 链接信息\n————————————\" && echo\nif [[ -e ${File} ]]; then\n\tcheck_pid\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\telse\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\tfi\nelse\n\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\nfi\necho\nread -e -p \" 请输入数字 [0-10]:\" num\ncase \"$num\" in\n\t0)\n\tUpdate_Shell\n\t;;\n\t1)\n\tInstall\n\t;;\n\t2)\n\tUpdate\n\t;;\n\t3)\n\tUninstall\n\t;;\n\t4)\n\tStart\n\t;;\n\t5)\n\tStop\n\t;;\n\t6)\n\tRestart\n\t;;\n\t7)\n\tSet\n\t;;\n\t8)\n\tView_daze\n\t;;\n\t9)\n\tView_Log\n\t;;\n\t10)\n\tView_user_connection_info\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-10]\"\n\t;;\nesac\nfi"
        },
        {
          "name": "dowsdns.sh",
          "type": "blob",
          "size": 23.041015625,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: dowsDNS\n#\tVersion: 1.0.10\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/dowsdns-jc3/\n#=================================================\n\nsh_ver=\"1.0.10\"\nfile=\"/usr/local/dowsDNS\"\ndowsdns_conf=\"/usr/local/dowsDNS/conf/config.json\"\ndowsdns_data=\"/usr/local/dowsDNS/conf/hosts_repository_config.json\"\ndowsdns_wrcd=\"/usr/local/dowsDNS/data/wrcd.json\"\ndowsdns_log=\"/tmp/dowsdns.log\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\" && Error=\"${Red_font_prefix}[错误]${Font_color_suffix}\" && Tip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前非ROOT账号(或没有ROOT权限)，无法继续操作，请更换ROOT账号或使用 ${Green_background_prefix}sudo su${Font_color_suffix} 命令获取临时ROOT权限（执行后可能会提示输入当前账号的密码）。\" && exit 1\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_installed_status(){\n\t[[ ! -e ${file} ]] && echo -e \"${Error} dowsDNS 没有安装，请检查 !\" && exit 1\n}\ncheck_pid(){\n\tPID=`ps -ef| grep \"python start.py\"| grep -v grep| grep -v \".sh\"| grep -v \"init.d\"| grep -v \"service\"| awk '{print $2}'`\n}\nDownload_dowsdns(){\n\tcd \"/usr/local\"\n\t#new_ver=$(wget --no-check-certificate -qO- -t1 -T3 https://api.github.com/repos/dowsnature/dowsDNS/releases| grep \"tag_name\"| head -n 1| awk -F \":\" '{print $2}'| sed 's/\\\"//g;s/,//g;s/ //g;s/v//g')\n\t#[[ -z \"${new_ver}\" ]] && echo -e \"${Error} dowsDNS 最新版本号获取失败 !\" && exit 1\n\t[[ -e \"dowsDNS.zip\" ]] && rm -rf \"dowsDNS.zip\"\n\twget --no-check-certificate -O \"dowsDNS.zip\" \"https://github.com/dowsnature/dowsDNS/archive/master.zip\"\n\t[[ ! -e \"dowsDNS.zip\" ]] && echo -e \"${Error} dowsDNS 下载失败 !\" && exit 1\n\tunzip dowsDNS.zip && rm -rf dowsDNS.zip\n\t[[ ! -e \"dowsDNS-master\" ]] && echo -e \"${Error} dowsDNS 解压失败 !\" && exit 1\n \tmv dowsDNS-master dowsDNS\n \t[[ ! -e \"dowsDNS\" ]] && echo -e \"${Error} dowsDNS 文件夹重命名失败 !\" && rm -rf dowsDNS-master && exit 1\n}\nService_dowsdns(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/dowsdns_centos\" -O /etc/init.d/dowsdns; then\n\t\t\techo -e \"${Error} dowsDNS 服务管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/dowsdns\n\t\tchkconfig --add dowsdns\n\t\tchkconfig dowsdns on\n\telse\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/dowsdns_debian\" -O /etc/init.d/dowsdns; then\n\t\t\techo -e \"${Error} dowsDNS 服务管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/dowsdns\n\t\tupdate-rc.d -f dowsdns defaults\n\tfi\n\techo -e \"${Info} dowsDNS 服务管理脚本下载完成 !\"\n}\nInstallation_dependency(){\n\tpython_status=$(python --help)\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tyum update\n\t\tif [[ -z ${python_status} ]]; then\n\t\t\tyum install -y python python-pip unzip\n\t\telse\n\t\t\tyum install -y python-pip unzip\n\t\tfi\n\telse\n\t\tapt-get update\n\t\tif [[ -z ${python_status} ]]; then\n\t\t\tapt-get install -y python python-pip unzip\n\t\telse\n\t\t\tapt-get install -y python-pip unzip\n\t\tfi\n\tfi\n\tpip install requests\n}\nWrite_config(){\n\tcat > ${dowsdns_conf}<<-EOF\n{\n\t\"Remote_dns_server\":\"${dd_remote_dns_server}\",\n\t\"Remote_dns_port\":${dd_remote_dns_port},\n\t\"Rpz_json_path\":\"./data/rpz.json\",\n\t\"Local_dns_server\":\"${dd_local_dns_server}\",\n\t\"Local_dns_port\":${dd_local_dns_port},\n\t\"sni_proxy_on\":${dd_sni_proxy_on},\n\t\"Public_Server\":${public_server},\n\t\"sni_proxy_ip\":\"${dd_sni_proxy_ip}\"\n}\nEOF\n\n}\nRead_config(){\n\t[[ ! -e ${dowsdns_conf} ]] && echo -e \"${Error} dowsDNS 配置文件不存在 !\" && exit 1\n\tremote_dns_server=`cat ${dowsdns_conf}|grep \"Remote_dns_server\"|awk -F \":\" '{print $NF}'|sed -r 's/.*\\\"(.+)\\\".*/\\1/'`\n\tremote_dns_port=`cat ${dowsdns_conf}|grep \"Remote_dns_port\"|sed -r 's/.*:(.+),.*/\\1/'`\n\tlocal_dns_server=`cat ${dowsdns_conf}|grep \"Local_dns_server\"|awk -F \":\" '{print $NF}'|sed -r 's/.*\\\"(.+)\\\".*/\\1/'`\n\tlocal_dns_port=`cat ${dowsdns_conf}|grep \"Local_dns_port\"|sed -r 's/.*:(.+),.*/\\1/'`\n\tsni_proxy_ip=`cat ${dowsdns_conf}|grep \"sni_proxy_ip\"|awk -F \":\" '{print $NF}'|sed -r 's/.*\\\"(.+)\\\".*/\\1/'`\n}\nRead_wrcd(){\n\t[[ ! -e ${dowsdns_wrcd} ]] && echo -e \"${Error} dowsDNS 泛域名解析 配置文件不存在 !\" && exit 1\n\twrcd_json=$(cat -n ${dowsdns_wrcd}|sed '$d;1d;s/\\\"//g;s/,//g')\n\twrcd_json_num=$(echo -e \"${wrcd_json}\"|wc -l)\n\twrcd_json_num=$(echo $((${wrcd_json_num}+1)))\n\techo -e \"当前 dowsDNS 泛域名解析配置(不要问我为什么是从 2 开始)：\\n\"\n\techo -e \"${wrcd_json}\\n\"\n}\nSet_remote_dns_server(){\n\techo \"请输入 dowsDNS 远程(上游)DNS解析服务器IP\"\n\tread -e -p \"(默认: 114.114.114.114):\" dd_remote_dns_server\n\t[[ -z \"${dd_remote_dns_server}\" ]] && dd_remote_dns_server=\"114.114.114.114\"\n\techo\n}\nSet_remote_dns_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 dowsDNS 远程(上游)DNS解析服务器端口 [1-65535]\"\n\t\tread -e -p \"(默认: 53):\" dd_remote_dns_port\n\t\t[[ -z \"$dd_remote_dns_port\" ]] && dd_remote_dns_port=\"53\"\n\t\techo $((${dd_remote_dns_port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${dd_remote_dns_port} -ge 1 ]] && [[ ${dd_remote_dns_port} -le 65535 ]]; then\n\t\t\t\techo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\tdone\n}\nSet_remote_dns(){\n\techo -e \"请选择并输入 dowsDNS 的远程(上游)DNS解析服务器\n 说明：即一些dowsDNS没有指定的域名都由上游DNS解析，比如百度啥的。\n \n ${Green_font_prefix}1.${Font_color_suffix} 114.114.114.114 53\n ${Green_font_prefix}2.${Font_color_suffix} 8.8.8.8 53\n ${Green_font_prefix}3.${Font_color_suffix} 208.67.222.222 53\n ${Green_font_prefix}4.${Font_color_suffix} 208.67.222.222 5353\n ${Green_font_prefix}5.${Font_color_suffix} 自定义输入\" && echo\n\tread -e -p \"(默认: 1. 114.114.114.114 53):\" dd_remote_dns\n\t[[ -z \"${dd_remote_dns}\" ]] && dd_remote_dns=\"1\"\n\tif [[ ${dd_remote_dns} == \"1\" ]]; then\n\t\tdd_remote_dns_server=\"114.114.114.114\"\n\t\tdd_remote_dns_port=\"53\"\n\telif [[ ${dd_remote_dns} == \"2\" ]]; then\n\t\tdd_remote_dns_server=\"8.8.8.8\"\n\t\tdd_remote_dns_port=\"53\"\n\telif [[ ${dd_remote_dns} == \"3\" ]]; then\n\t\tdd_remote_dns_server=\"208.67.222.222\"\n\t\tdd_remote_dns_port=\"53\"\n\telif [[ ${dd_remote_dns} == \"4\" ]]; then\n\t\tdd_remote_dns_server=\"208.67.222.222\"\n\t\tdd_remote_dns_port=\"5353\"\n\telif [[ ${dd_remote_dns} == \"5\" ]]; then\n\t\techo\n\t\tSet_remote_dns_server\n\t\tSet_remote_dns_port\n\telse\n\t\tdd_remote_dns_server=\"114.114.114.114\"\n\t\tdd_remote_dns_port=\"53\"\n\tfi\n\techo && echo \"\t================================================\"\n\techo -e \"\t远程(上游)DNS解析服务器 IP :\\t ${Red_background_prefix} ${dd_remote_dns_server} ${Font_color_suffix}\n\t远程(上游)DNS解析服务器 端口 :\\t ${Red_background_prefix} ${dd_remote_dns_port} ${Font_color_suffix}\"\n\techo \"\t================================================\" && echo\n}\nSet_local_dns_server(){\n\techo -e \"请选择并输入 dowsDNS 的本地监听方式\n ${Green_font_prefix}1.${Font_color_suffix} 127.0.0.1 (只允许本地和局域网设备访问)\n ${Green_font_prefix}2.${Font_color_suffix} 0.0.0.0 (允许外网访问)\" && echo\n\tread -e -p \"(默认: 2. 0.0.0.0):\" dd_local_dns_server\n\t[[ -z \"${dd_local_dns_server}\" ]] && dd_local_dns_server=\"2\"\n\tif [[ ${dd_local_dns_server} == \"1\" ]]; then\n\t\tdd_local_dns_server=\"127.0.0.1\"\n\t\tpublic_server=\"false\"\n\telif [[ ${dd_local_dns_server} == \"2\" ]]; then\n\t\tdd_local_dns_server=\"0.0.0.0\"\n\t\tpublic_server=\"true\"\n\telse\n\t\tdd_local_dns_server=\"0.0.0.0\"\n\t\tpublic_server=\"true\"\n\tfi\n\techo && echo \"\t================================================\"\n\techo -e \"\t本地监听方式: ${Red_background_prefix} ${dd_local_dns_server} ${Font_color_suffix}\"\n\techo \"\t================================================\" && echo\n}\nSet_local_dns_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 dowsDNS 监听端口 [1-65535]\n 注意：大部分设备是不支持设置 非53端口的DNS服务器的，所以非必须请直接回车默认使用 53端口。\" && echo\n\t\tread -e -p \"(默认: 53):\" dd_local_dns_port\n\t\t[[ -z \"$dd_local_dns_port\" ]] && dd_local_dns_port=\"53\"\n\t\techo $((${dd_local_dns_port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${dd_local_dns_port} -ge 1 ]] && [[ ${dd_local_dns_port} -le 65535 ]]; then\n\t\t\t\techo && echo \"\t================================================\"\n\t\t\t\techo -e \"\t监听端口 : ${Red_background_prefix} ${dd_local_dns_port} ${Font_color_suffix}\"\n\t\t\t\techo \"\t================================================\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\t\tdone\n}\nSet_sni_proxy_on(){\n\techo \"是否开启 dowsDNS SNI代理功能？[y/N]\n 注意：开启此功能后，任何自定义设置的 hosts或泛域名解析(包括dowsDNS自带的)，都指向设置的SNI代理IP，如果你没有SNI代理IP，请输入 N !\"\n\tread -e -p \"(默认: N 关闭):\" dd_sni_proxy_on\n\t[[ -z \"${dd_sni_proxy_on}\" ]] && dd_sni_proxy_on=\"n\"\n\tif [[ ${dd_sni_proxy_on} == [Yy] ]]; then\n\t\tdd_sni_proxy_on=\"true\"\n\telse\n\t\tdd_sni_proxy_on=\"false\"\n\tfi\n\techo && echo \"\t================================================\"\n\techo -e \"\tSNI代理开关 : ${Red_background_prefix} ${dd_sni_proxy_on} ${Font_color_suffix}\"\n\techo \"\t================================================\" && echo\n}\nSet_sni_proxy_ip(){\n\tddd_sni_proxy_ip=$(wget --no-check-certificate -t2 -T4 -qO- \"https://raw.githubusercontent.com/dowsnature/dowsDNS/master/conf/config.json\"|grep \"sni_proxy_ip\"|awk -F \":\" '{print $NF}'|sed -r 's/.*\\\"(.+)\\\".*/\\1/')\n\t[[ -z ${ddd_sni_proxy_ip} ]] && ddd_sni_proxy_ip=\"219.76.4.3\"\n\techo \"请输入 dowsDNS SNI代理 IP（如果没有就直接回车）\"\n\tread -e -p \"(默认: ${ddd_sni_proxy_ip}):\" dd_sni_proxy_ip\n\t[[ -z \"${dd_sni_proxy_ip}\" ]] && dd_sni_proxy_ip=\"${ddd_sni_proxy_ip}\"\n\techo && echo \"\t================================================\"\n\techo -e \"\tSNI代理 IP : ${Red_background_prefix} ${dd_sni_proxy_ip} ${Font_color_suffix}\"\n\techo \"\t================================================\" && echo\n}\nSet_conf(){\n\tSet_remote_dns\n\tSet_local_dns_server\n\tSet_local_dns_port\n\tSet_sni_proxy_on\n\tSet_sni_proxy_ip\n}\nSet_dowsdns_basis(){\n\tcheck_installed_status\n\tSet_conf\n\tRead_config\n\tDel_iptables\n\tWrite_config\n\tAdd_iptables\n\tSave_iptables\n\tRestart_dowsdns\n}\nSet_wrcd_name(){\n\techo \"请输入 dowsDNS 要添加/修改的域名(子域名或泛域名)\n 注意：假如你想要 youtube.com 及其二级域名全部指向 指定的IP，那么你需要添加 *.youtube.com 和 youtube.com 这两个域名解析才有效。\n 这意味着 *.youtube.com 仅代表如 www.youtube.com xxx.youtube.com 这样的二级域名，而不能代表一级域名(顶级域名) youtube.com ！\"\n\tread -e -p \"(默认回车取消):\" wrcd_name\n\t[[ -z \"${wrcd_name}\" ]] && echo \"已取消...\" && exit 0\n\techo\n}\nSet_wrcd_name_1(){\n\techo \"检测到当前添加的域名为 泛域名，是否自动添加 上级域名(如顶级域名，就是上面示例说的 youtube.com) [Y/n]\"\n\tread -e -p \"(默认: Y 添加):\" wrcd_name_1\n\t[[ -z \"${wrcd_name_1}\" ]] && wrcd_name_1=\"y\"\n\tif [[ ${wrcd_name_1} == [Yy] ]]; then\n\t\twrcd_name_1=$(echo -e \"${wrcd_name}\"|cut -c 3-100)\n\t\techo -e \"检测到 上级域名为 : ${Red_font_prefix}${wrcd_name_1}${Font_color_suffix}\"\n\telse\n\t\twrcd_name_1=\"\"\n\t\techo \"已取消...继续...\"\n\tfi\n\techo\n}\nSet_wrcd_ip(){\n\techo \"请输入 dowsDNS 刚才添加/修改的域名要指向的IP\n 注意：如果你开启了 SNI代理功能(config.json)，那么你这里设置的自定义泛域名解析都会被 SNI代理功能的SNI代理IP设置所覆盖，也就是统一指向 SNI代理的IP，这里的IP设置就没意义了。\"\n\tread -e -p \"(默认回车取消):\" wrcd_ip\n\t[[ -z \"${wrcd_ip}\" ]] && echo \"已取消...\" && exit 0\n\techo\n}\nSet_dowsdns_wrcd(){\n\tcheck_installed_status\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix}0.${Font_color_suffix} 查看 泛域名解析列表\n \n ${Green_font_prefix}1.${Font_color_suffix} 添加 泛域名解析\n ${Green_font_prefix}2.${Font_color_suffix} 删除 泛域名解析\n ${Green_font_prefix}3.${Font_color_suffix} 修改 泛域名解析\" && echo\n\tread -e -p \"(默认: 取消):\" wrcd_modify\n\t[[ -z \"${wrcd_modify}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${wrcd_modify} == \"0\" ]]; then\n\t\tRead_wrcd\n\telif [[ ${wrcd_modify} == \"1\" ]]; then\n\t\tAdd_wrcd\n\telif [[ ${wrcd_modify} == \"2\" ]]; then\n\t\tDel_wrcd\n\telif [[ ${wrcd_modify} == \"3\" ]]; then\n\t\tModify_wrcd\n\telse\n\t\techo -e \"${Error} 请输入正确的数字 [0-3]\" && exit 1\n\tfi\n}\nAdd_wrcd(){\n\twhile true\n\t\tdo\n\t\tSet_wrcd_name\n\t\t[[ $(echo -e \"${wrcd_name}\"|cut -c 1-2) == \"*.\" ]] && Set_wrcd_name_1\n\t\tSet_wrcd_ip\n\t\tsed -i \"2 i \\\"${wrcd_name}\\\":\\\"${wrcd_ip}\\\",\" ${dowsdns_wrcd}\n\t\tif [[ $? == \"0\" ]]; then\n\t\t\techo -e \"${Info} 添加泛域名解析 成功 [${wrcd_name} : ${wrcd_ip}]\"\n\t\telse\n\t\t\techo -e \"${Error} 添加泛域名解析 失败！\" && exit 0\n\t\tfi\n\t\tif [[ ! -z ${wrcd_name_1} ]]; then\n\t\t\tsed -i \"2 i \\\"${wrcd_name_1}\\\":\\\"${wrcd_ip}\\\",\" ${dowsdns_wrcd}\n\t\t\tif [[ $? == \"0\" ]]; then\n\t\t\t\techo -e \"${Info} 添加泛域名解析 成功 [${wrcd_name_1} : ${wrcd_ip}]\"\n\t\t\telse\n\t\t\t\techo -e \"${Error} 添加泛域名解析 失败！\" && exit 0\n\t\t\tfi\n\t\tfi\n\t\techo && echo \"是否继续添加 泛域名解析？[Y/n]\"\n\t\tread -e -p \"(默认: Y 继续添加):\" wrcd_add_1\n\t\t[[ -z \"${wrcd_add_1}\" ]] && wrcd_add_1=\"y\"\n\t\tif [[ ${wrcd_add_1} == [Yy] ]]; then\n\t\t\tcontinue\n\t\telse\n\t\t\tbreak\n\t\tfi\n\tdone\n\techo -e \"${Info} 重启 dowsDNS中...\"\n\tRestart_dowsdns\n}\nDel_wrcd(){\n\twhile true\n\t\tdo\n\t\tRead_wrcd\n\t\techo \"请根据上面的列表选择你要删除的 泛域名解析 序号数字 [ 2-${wrcd_json_num} ]\"\n\t\tread -e -p \"(默认回车取消):\" del_wrcd_num\n\t\t[[ -z \"$del_wrcd_num\" ]] && echo \"已取消...\" && exit 0\n\t\techo $((${del_wrcd_num}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${del_wrcd_num} -ge 2 ]] && [[ ${del_wrcd_num} -le ${wrcd_json_num} ]]; then\n\t\t\t\twrcd_text=$(cat ${dowsdns_wrcd}|sed -n \"${del_wrcd_num}p\")\n\t\t\t\twrcd_name=$(echo -e \"${wrcd_text}\"|sed 's/\\\"//g;s/,//g'|awk -F \":\" '{print $1}')\n\t\t\t\twrcd_ip=$(echo -e \"${wrcd_text}\"|sed 's/\\\"//g;s/,//g'|awk -F \":\" '{print $2}')\n\t\t\t\tdel_wrcd_determine=$(echo ${wrcd_text:((${#wrcd_text} - 1))})\n\t\t\t\tif [[ ${del_wrcd_num} == ${wrcd_json_num} ]]; then\n\t\t\t\t\tdel_wrcd_determine_num=$(echo $((${del_wrcd_num}-1)))\n\t\t\t\t\tsed -i \"${del_wrcd_determine_num}s/,//g\" ${dowsdns_wrcd}\n\t\t\t\tfi\n\t\t\t\tsed -i \"${del_wrcd_num}d\" ${dowsdns_wrcd}\n\t\t\t\tif [[ $? == \"0\" ]]; then\n\t\t\t\t\techo -e \"${Info} 删除泛域名解析 成功 [${wrcd_name} : ${wrcd_ip}]\"\n\t\t\t\telse\n\t\t\t\t\techo -e \"${Error} 删除泛域名解析 失败！\" && exit 0\n\t\t\t\tfi\n\t\t\t\techo && echo \"是否继续删除 泛域名解析？[Y/n]\"\n\t\t\t\tread -e -p \"(默认: Y 继续删除):\" wrcd_del_1\n\t\t\t\t[[ -z \"${wrcd_del_1}\" ]] && wrcd_del_1=\"y\"\n\t\t\t\tif [[ ${wrcd_del_1} == [Yy] ]]; then\n\t\t\t\t\tcontinue\n\t\t\t\telse\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的数字。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的数字。\"\n\t\tfi\n\tdone\n\techo -e \"${Info} 重启 dowsDNS中...\"\n\tRestart_dowsdns\n}\nModify_wrcd(){\n\twhile true\n\t\tdo\n\t\tRead_wrcd\n\t\techo \"请根据上面的列表选择你要修改的 泛域名解析 序号数字 [ 2-${wrcd_json_num} ]\"\n\t\tread -e -p \"(默认回车取消):\" modify_wrcd_num\n\t\t[[ -z \"$modify_wrcd_num\" ]] && echo \"已取消...\" && exit 0\n\t\techo $((${modify_wrcd_num}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${modify_wrcd_num} -ge 2 ]] && [[ ${modify_wrcd_num} -le ${wrcd_json_num} ]]; then\n\t\t\t\twrcd_name_now=$(cat ${dowsdns_wrcd}|sed -n \"${modify_wrcd_num}p\"|sed 's/\\\"//g;s/,//g'|awk -F \":\" '{print $1}')\n\t\t\t\twrcd_ip_now=$(cat ${dowsdns_wrcd}|sed -n \"${modify_wrcd_num}p\"|sed 's/\\\"//g;s/,//g'|awk -F \":\" '{print $2}')\n\t\t\t\techo\n\t\t\t\tSet_wrcd_name\n\t\t\t\tSet_wrcd_ip\n\t\t\t\tsed -i \"${modify_wrcd_num}d\" ${dowsdns_wrcd}\n\t\t\t\tsed -i \"${modify_wrcd_num} i \\\"${wrcd_name}\\\":\\\"${wrcd_ip}\\\",\" ${dowsdns_wrcd}\n\t\t\t\t#sed -i \"s/\\\"${wrcd_name_now_1}\\\":\\\"${wrcd_ip_now}\\\"/\\\"${wrcd_name_1}\\\":\\\"${wrcd_ip}\\\"/g\" ${dowsdns_wrcd}\n\t\t\t\tif [[ $? == \"0\" ]]; then\n\t\t\t\t\techo -e \"${Info} 修改泛域名解析 成功 [旧 ${wrcd_name_now} : ${wrcd_ip_now} , 新 ${wrcd_name} : ${wrcd_ip}]\"\n\t\t\t\telse\n\t\t\t\t\techo -e \"${Error} 修改泛域名解析 失败！\" && exit 0\n\t\t\t\tfi\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的数字。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的数字。\"\n\t\tfi\n\tdone\n\techo -e \"${Info} 重启 dowsDNS中...\"\n\tRestart_dowsdns\n}\nInstall_dowsdns(){\n\tcheck_root\n\t[[ -e ${file} ]] && echo -e \"${Error} 检测到 dowsDNS 已安装 !\" && exit 1\n\tcheck_sys\n\techo -e \"${Info} 开始设置 用户配置...\"\n\tSet_conf\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始下载/安装...\"\n\tDownload_dowsdns\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService_dowsdns\n\techo -e \"${Info} 开始写入 配置文件...\"\n\tWrite_config\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart_dowsdns\n}\nStart_dowsdns(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} dowsDNS 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/dowsdns start\n}\nStop_dowsdns(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} dowsDNS 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/dowsdns stop\n}\nRestart_dowsdns(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/dowsdns stop\n\t/etc/init.d/dowsdns start\n}\nUpdate_dowsdns(){\n\tcheck_installed_status\n\tcheck_sys\n\tcd ${file}\n\tpython update.py\n}\nUninstall_dowsdns(){\n\tcheck_installed_status\n\techo \"确定要卸载 dowsDNS ? (y/N)\"\n\techo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tRead_config\n\t\tDel_iptables\n\t\tSave_iptables\n\t\trm -rf ${file} && rm -rf /etc/init.d/dowsdns\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del dowsdns\n\t\telse\n\t\t\tupdate-rc.d -f dowsdns remove\n\t\tfi\n\t\techo && echo \"dowsDNS 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nView_dowsdns(){\n\tcheck_installed_status\n\tRead_config\n\tif [[ ${local_dns_server} == \"127.0.0.1\" ]]; then\n\t\tip=\"${local_dns_server} \"\n\telse\n\t\tip=`wget -qO- -t1 -T2 members.3322.org/dyndns/getip`\n\t\t[[ -z ${ip} ]] && ip=\"VPS_IP\"\n\tfi\n\tclear && echo \"————————————————\" && echo\n\techo -e \" 请在你的设备中设置DNS服务器为：\n IP : ${Green_font_prefix}${ip}${Font_color_suffix} ,端口 : ${Green_font_prefix}${local_dns_port}${Font_color_suffix}\n \n 注意：如果设备中没有 DNS端口设置选项，那么就只能使用默认的 53 端口\"\n\techo && echo \"————————————————\"\n}\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${dd_local_dns_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${dd_local_dns_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${local_dns_port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${local_dns_port} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nView_Log(){\n\t[[ ! -e ${dowsdns_log} ]] && echo -e \"${Error} dowsDNS 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${dowsdns_log}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${dowsdns_log}\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/dowsdns.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/dowsdns\" ]]; then\n\t\trm -rf /etc/init.d/dowsdns\n\t\tService_dowsdns\n\tfi\n\t\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/dowsdns.sh\" && chmod +x dowsdns.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\necho && echo -e \"  dowsDNS 一键安装管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  -- Toyo | doub.io/dowsdns-jc3 --\n  \n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n ————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 dowsDNS\n ${Green_font_prefix} 2.${Font_color_suffix} 升级 dowsDNS\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 dowsDNS\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 dowsDNS\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 dowsDNS\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 dowsDNS\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 设置 dowsDNS 基础配置\n ${Green_font_prefix} 8.${Font_color_suffix} 设置 dowsDNS 泛域名解析配置\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 dowsDNS 信息\n ${Green_font_prefix}10.${Font_color_suffix} 查看 dowsDNS 日志\n————————————\" && echo\nif [[ -e ${file} ]]; then\n\tcheck_pid\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\telse\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\tfi\nelse\n\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\nfi\necho\nread -e -p \" 请输入数字 [0-9]:\" num\ncase \"$num\" in\n\t0)\n\tUpdate_Shell\n\t;;\n\t1)\n\tInstall_dowsdns\n\t;;\n\t2)\n\tUpdate_dowsdns\n\t;;\n\t3)\n\tUninstall_dowsdns\n\t;;\n\t4)\n\tStart_dowsdns\n\t;;\n\t5)\n\tStop_dowsdns\n\t;;\n\t6)\n\tRestart_dowsdns\n\t;;\n\t7)\n\tSet_dowsdns_basis\n\t;;\n\t8)\n\tSet_dowsdns_wrcd\n\t;;\n\t9)\n\tView_dowsdns\n\t;;\n\t10)\n\tView_Log\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-10]\"\n\t;;\nesac"
        },
        {
          "name": "gfw_push.sh",
          "type": "blob",
          "size": 15.19140625,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: 监测IP是否被墙并推送消息至Telegram\n#\tVersion: 1.0.5\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/shell-jc8/\n#=================================================\n\nsh_ver=\"1.0.5\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile_1=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\nCrontab_file=\"/usr/bin/crontab\"\nCONF=\"${file_1}/gfw_push.conf\"\nLOG_file=\"${file_1}/gfw_push.log\"\nTest_link=\"www.189.cn\nwww.10010.com\nwww.10086.cn\"\nTest_UA=\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\nMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\nMozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36\nMozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36 LBBROWSER\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0\nMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17134\nMozilla/5.0 (Linux; Android 8.0.0; MHA-AL00 Build/HUAWEIMHA-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36\nMozilla/5.0 (Linux; Android 7.0; LG-H850 Build/NRD90U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Mobile Safari/537.36\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\nMozilla/5.0 (iPhone; CPU iPhone OS 12_0_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1\nMozilla/5.0 (iPhone; CPU iPhone OS 7_0_2 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) CriOS/30.0.1599.12 Mobile/11A501 Safari/8536.25 MicroMessenger/6.1.0\nMozilla/5.0 (iPad; CPU OS 12_0_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\t#bit=`uname -m`\n}\ncheck_crontab_name(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tcron_name=\"crond\"\n\telse\n\t\tcron_name=\"cron\"\n\tfi\n}\ncheck_crontab_monitor_status(){\n\tcrontab -l &> \".crontab_tmp\"\n\tsed -i \"/no crontab for/d\" \".crontab_tmp\"\n\tcron_config=$(cat \".crontab_tmp\" | grep \"gfw_push.sh monitor\")\n\trm -rf \".crontab_tmp\"\n\tif [[ -z ${cron_config} ]]; then\n\t\treturn 0\n\telse\n\t\treturn 1\n\tfi\n}\ncheck_crontab_pid(){\n\tCron_PID=$(ps -ef| grep \"${cron_name}\"| grep -v \"grep\" | grep -v \"init.d\" |grep -v \"service\" |awk '{print $2}')\n\tif [[ -z ${Cron_PID} ]]; then\n\t\treturn 0\n\telse\n\t\treturn 1\n\tfi\n}\nInstall_crontab(){\n\tif [[ ! -e \"${Crontab_file}\" ]]; then\n\t\techo -e \"${Error} Crontab 没有安装，开始安装...\"\n\t\t\\cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum update\n\t\t\tyum install \"${cron_name}\" -y\n\t\telse\n\t\t\tapt-get update\n\t\t\tapt-get install \"${cron_name}\" -y\n\t\tfi\n\t\tif [[ ! -e \"${Crontab_file}\" ]]; then\n\t\t\techo -e \"${Error} Crontab 安装失败，请检查！\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} Crontab 安装成功！\"\n\t\t\tsleep 2s\n\t\t\tcheck_crontab_pid\n\t\t\t[[ $? == 0 ]] && /etc/init.d/${cron_name} start\n\t\tfi\n\telse\n\t\t\\cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\t\t/etc/init.d/${cron_name} restart\n\tfi\n}\nSet_Name(){\n\techo \"请输入该服务器的 [别名]（可选）\n用于推送消息时，使你快速分辨服务器。支持中文，但请勿包含一些特殊符号，否则可能导致推送出错。\"\n\tread -e -p \"(默认为空):\" new_name\n\techo && echo \"========================\"\n\techo -e \"\t别名 : ${Red_background_prefix} ${new_name} ${Font_color_suffix}\"\n\techo \"========================\" && echo\n}\nSet_Token(){\n\twhile true\n\tdo\n\t\techo -e \"请输入推送机器人 [API密匙]\nToken，通过 @notificationme_bot 机器人获取。\n获取步骤：向机器人发送 /start 后，机器人会告诉一个API URL，例如：https://tgbot.lbyczf.com/sendMessage/abc，其中的 abc 就是API密匙。\"\n\t\tread -e -p \"(不能为空):\" new_token\n\t\tif [[ ! -z \"${new_token}\" ]]; then\n\t\t\techo && echo \"========================\"\n\t\t\techo -e \"\t密匙 : ${Red_background_prefix} ${new_token} ${Font_color_suffix}\"\n\t\t\techo \"========================\" && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入密匙。\"\n\t\tfi\n\tdone\n}\nWrite_config(){\n\tcat > ${CONF}<<-EOF\nNAME = ${new_name}\nTOKEN = ${new_token}\nSILL = ${SILL}\nSILL_NOW = ${sill_new}\nEOF\n}\nWrite_config_now_sill(){\n\tnew_name=\"${NAME}\"\n\tnew_token=\"${TOKEN}\"\n\tWrite_config\n}\nRead_config(){\n\t[[ ! -e ${CONF} ]] && echo -e \"${Error} 脚本配置文件不存在 !\" && exit 1\n\tNAME=$(cat ${CONF}|grep 'NAME = '|awk -F 'NAME = ' '{print $NF}')\n\t#[[ -z \"${NAME}\" ]] && NAME=\"NO-NAME\"\n\tTOKEN=$(cat ${CONF}|grep 'TOKEN = '|awk -F 'TOKEN = ' '{print $NF}')\n\t[[ -z \"${TOKEN}\" ]] && echo -e \"${Error} 脚本配置文件中API密匙为空(Token) !\" && exit 1\n\tSILL=$(cat ${CONF}|grep 'SILL = '|awk -F 'SILL = ' '{print $NF}')\n\t[[ -z \"${SILL}\" ]] && SILL=\"3\"\n\tSILL_NOW=$(cat ${CONF}|grep 'SILL_NOW = '|awk -F 'SILL_NOW = ' '{print $NF}')\n\t[[ -z \"${SILL_NOW}\" ]] && SILL_NOW=\"0\"\n}\nPOST_TG(){\n\tGet_IP\n\tif [[ -z \"${NAME}\" ]]; then\n\t\twget -qO- --post-data=\"text=\\`[疑似被墙警告]\\`  —  \\[\\`${IP}\\`]&parse_mode=Markdown&disable_notification=false\"  \"https://tgbot.lbyczf.com/sendMessage/${TOKEN}\" >> ${LOG_file}\n\telse\n\t\twget -qO- --post-data=\"text=\\`[疑似被墙警告]\\`  —  \\[${NAME}] (\\`${IP}\\`)&parse_mode=Markdown&disable_notification=false\"  \"https://tgbot.lbyczf.com/sendMessage/${TOKEN}\" >> ${LOG_file}\n\tfi\n\techo \"\" >> ${LOG_file}\n}\nGet_IP(){\n\tIP=$(wget -qO- -t1 -T2 ipinfo.io/ip)\n\tif [[ -z \"${IP}\" ]]; then\n\t\tIP=$(wget -qO- -t1 -T2 api.ip.sb/ip)\n\t\tif [[ -z \"${IP}\" ]]; then\n\t\t\tIP=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\tif [[ -z \"${IP}\" ]]; then\n\t\t\t\tIP=\"IP获取失败\"\n\t\t\tfi\n\t\tfi\n\tfi\n}\nAdd_Crontab(){\n\tcrontab -l &> \"$file_1/crontab.bak\"\n\tsed -i \"/no crontab for/d\" \"$file_1/crontab.bak\"\n\tsed -i \"/gfw_push.sh monitor/d\" \"$file_1/crontab.bak\"\n\techo -e \"\\n* * * * * /bin/bash $file_1/gfw_push.sh monitor\" >> \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcheck_crontab_monitor_status\n\tif [[ $? == 0 ]]; then\n\t\techo -e \"${Error} 定时监控功能添加失败，请检查 !\" && exit 1\n\telse\n\t\techo -e \"${Info} 定时监控功能添加成功 !\"\n\tfi\n}\nDel_Crontab(){\n\tcrontab -l &> \"$file_1/crontab.bak\"\n\tsed -i \"/no crontab for/d\" \"$file_1/crontab.bak\"\n\tsed -i \"/gfw_push.sh monitor/d\" \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcheck_crontab_monitor_status\n\tif [[ $? == 1 ]]; then\n\t\techo -e \"${Error} 定时监控功能取消失败，请检查 !\" && exit 1\n\telse\n\t\techo -e \"${Info} 定时监控功能取消成功 !\"\n\tfi\n}\nrand(){\n\trand_min=$1\n\trand_max=$(($2-$rand_min+1))\n\trand_num=$(date +%s%N)\n\techo $(($rand_num%$rand_max+$rand_min))\n}\nTest_SILL(){\n\tDetailed_output=\"${1}\"\n\tRead_config\n\techo \"${SILL_NOW}|${SILL}\"\n\tif [[ \"${SILL_NOW}\" == \"${SILL}\" ]]; then\n\t\techo -e \"${Error} 短时间内检测IP状态结果为被墙的次数已达到阈值 [${SILL}]，将不会继续检测。跳过...\" && exit 1\n\telif [[ \"${SILL_NOW}\" > \"${SILL}\" ]]; then\n\t\tsill_new=\"${SILL}\"\n\t\tWrite_config_now_sill\n\t\techo -e \"${Error} 短时间内检测IP状态结果为被墙的次数已达到阈值 [${SILL}]，将不会继续检测。跳过...\" && exit 1\n\telse\n\t\tTest\n\tfi\n}\nTest(){\n\tDetailed_output=\"${1}\"\n\tall_status_num=\"0\"\n\tReturn_status_debug=\"\"\n\tstatus_num_debug=\"\"\n\tTest_total=$(echo \"${Test_link}\"|wc -l)\n\tfor((integer = 1; integer <= ${Test_total}; integer++))\n\tdo\n\t\tUA_num=$(rand 1 12)\n\t\tUA=$(echo \"${Test_UA}\"|sed -n \"${UA_num}p\")\n\t\tnow_URL=$(echo \"${Test_link}\"|sed -n \"${integer}p\")\n\t\twget --spider -nv -t2 -T5 -4 -U \"${UA}\" \"${now_URL}\" -o \"http_code.tmp\"\n\t\t#wget --spider -nv -t2 -T5 -U \"${UA}\" \"${now_URL}\" &> /dev/null\n\t\treturn_code=$(echo $?)\n\t\t#cat \"http_code.tmp\"\n\t\t#Return_status=$(cat \"http_code.tmp\"|sed -n '$p'|awk '{print $NF}')\n\t\tReturn_status_debug=\"${Return_status_debug} | $(cat \"http_code.tmp\")\"\n\t\treturn_code_debug=\"${return_code_debug} | ${return_code}\"\n\t\t#Return_status_debug=\"${Return_status_debug} | ${return_code}\"\n\t\t#echo \"${Return_status}\"\n\t\trm -rf \"http_code.tmp\"\n\t\tif [[ \"${return_code}\" == \"0\" ]]; then\n\t\t\tstatus_num=\"1\"\n\t\t\tstatus_num_debug=\"${status_num_debug} | ${status_num}\"\n\t\t\t[[ \"${Detailed_output}\" == \"1\" ]] && echo -e \"${Info} 正常连接至 [${now_URL}] 。\"\n\t\telse\n\t\t\tstatus_num=\"0\"\n\t\t\tstatus_num_debug=\"${status_num_debug} | ${status_num}\"\n\t\t\t[[ \"${Detailed_output}\" == \"1\" ]] && echo -e \"${Error} 无法连接至 [${now_URL}] 。\"\n\t\tfi\n\t\tall_status_num=$(echo $((${all_status_num}+${status_num})))\n\tdone\n}\ncrontab_monitor(){\n\tTest_SILL\n\tDATE=$(date \"+%Y/%m/%d %H:%M:%S\")\n\tif [[ \"${all_status_num}\" == \"${Test_total}\" ]]; then\n\t\tsill_new=\"0\"\n\t\tWrite_config_now_sill\n\t\techo -e \"${Info} ${DATE} 全部 URL 测试通过！该服务器没有被墙。\"| tee -a ${LOG_file}\n\telif [[ \"${all_status_num}\" == \"0\" ]]; then\n\t\tsill_new=$(echo $((${SILL_NOW}+1)))\n\t\tWrite_config_now_sill\n\t\techo \"${Return_status_debug} / ${return_code_debug} / ${status_num_debug} / ${all_status_num}\" >> ${LOG_file}\n\t\techo -e \"${Error} ${DATE} 全部 URL 测试失败！该服务器可能被墙，累计次数中...\"| tee -a ${LOG_file}\n\t\tif [[ \"${sill_new}\" == \"3\" ]]; then\n\t\t\techo -e \"${Error} ${DATE} 疑似被墙次数累计超过 ${Test_total} 次，开始推送...\"| tee -a ${LOG_file}\n\t\t\tPOST_TG\n\t\tfi\n\telse\n\t\tsill_new=\"0\"\n\t\tWrite_config_now_sill\n\t\techo -e \"${Info} ${DATE} 部分 URL 测试通过！该服务器没有被墙，但可能与大陆链接的线路存在问题。\"| tee -a ${LOG_file}\n\tfi\n}\nInit_config(){\n\tSet_Name\n\tSet_Token\n\tInstall_crontab\n\tAdd_Crontab\n\tSILL=\"3\"\n\tsill_new=\"0\"\n\tWrite_config\n\techo -e \"${Info} 初始化配置完成，目前已启动定时检测IP被墙状态。\"\n}\nUninstall_config(){\n\techo -e \"确定要卸载(即清除定时任务及脚本配置文件) ? (y/N)\"\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tif [[ -e \"${Crontab_file}\" ]]; then\n\t\t\tDel_Crontab\n\t\tfi\n\t\t[[ -e \"${CONF}\" ]] && rm -rf \"${CONF}\"\n\t\t[[ -e \"${LOG_file}\" ]] && rm -rf \"${LOG_file}\"\n\t\techo && echo \"卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nManual_detection(){\n\tTest \"1\"\n\tif [[ \"${all_status_num}\" == \"${Test_total}\" ]]; then\n\t\techo -e \"${Info} 全部 URL 测试通过！该服务器没有被墙。\"\n\telif [[ \"${all_status_num}\" == \"0\" ]]; then\n\t\techo -e \"${Error} 全部 URL 测试失败！该服务器可能被墙。\"\n\telse\n\t\techo -e \"${Info} 部分 URL 测试通过！该服务器没有被墙，但可能与大陆链接的线路存在问题。\"\n\tfi\n}\nStop_monitor(){\n\tcheck_crontab_monitor_status\n\tif [[ $? == 1 ]]; then\n\t\tRead_config\n\t\tDel_Crontab\n\telse\n\t\techo -e \"${Error} 检测IP定时任务已经暂停。\"\n\tfi\n}\nrestart_monitor(){\n\tcheck_crontab_monitor_status\n\tif [[ $? == 1 ]]; then\n\t\tRead_config\n\t\tnew_name=\"${NAME}\"\n\t\tnew_token=\"${TOKEN}\"\n\t\tsill_new=\"0\"\n\t\tWrite_config\n\t\techo -e \"${Info} 检测IP阈值已归零。\"\n\telse\n\t\tRead_config\n\t\tAdd_Crontab\n\tfi\n}\nSet_config(){\n\tRead_config\n\tSet_Name\n\tSet_Token\n\tsill_new=${SILL_NOW}\n\tWrite_config\n\techo -e \"${Info} 修改配置完成。\"\n}\nView_config(){\n\tRead_config\n\tGet_IP\n\techo -e \"\\n脚本配置信息：\n————————————————\n 地址\\t: ${Green_font_prefix}${IP}${Font_color_suffix}\n 别名\\t: ${Green_font_prefix}${NAME}${Font_color_suffix}\n 密匙\\t: ${Green_font_prefix}${TOKEN}${Font_color_suffix}\n 阈值\\t: ${Green_font_prefix}${SILL_NOW}/${SILL}${Font_color_suffix}\\n\"\n}\nView_Log(){\n\t[[ ! -e ${LOG_file} ]] && echo -e \"${Error} 脚本日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志(正常情况是没有使用日志记录的)\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${LOG_file}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${LOG_file}\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/gfw_push.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1)\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/gfw_push.sh\" && chmod +x gfw_push.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\ncheck_sys\ncheck_crontab_name\naction=$1\nif [[ \"${action}\" == \"monitor\" ]]; then\n\tcrontab_monitor\nelse\n\techo && echo -e \"  监测IP是否被墙脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  ---- Toyo | doub.io/shell-jc8 ----\n  \n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 初始化\n ${Green_font_prefix} 2.${Font_color_suffix} 卸  载\n————————————\n ${Green_font_prefix} 3.${Font_color_suffix} 手动 检测IP\n ${Green_font_prefix} 4.${Font_color_suffix} 暂停 监测IP\n ${Green_font_prefix} 5.${Font_color_suffix} 重启 监测IP(或清零阈值)\n —— 当暂停或脚本推送三次IP被墙信息后，\n    可以用该选项使脚本继续监测IP。\n————————————\n ${Green_font_prefix} 6.${Font_color_suffix} 设置 配置信息\n ${Green_font_prefix} 7.${Font_color_suffix} 查看 配置信息\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 日志信息\n————————————\" && echo\n\tif [[ -e \"${Crontab_file}\" ]]; then\n\t\tcheck_crontab_monitor_status\n\t\tif [[ $? == 0 ]]; then\n\t\t\techo -e \" 当前状态: ${Red_font_prefix}未启动监测${Font_color_suffix}\"\n\t\telse\n\t\t\techo -e \" 当前状态: ${Green_font_prefix}已启动监测${Font_color_suffix}\"\n\t\tfi\n\t\tcheck_crontab_pid\n\t\t[[ $? == 0 ]] && echo -e \" ${Error} 检查到 Crontab 没有运行，如果不是主动关闭的，请手动启动：/etc/init.d/${cron_name} start\"\n\telse\n\t\techo -e \" 当前状态: ${Red_font_prefix}Crontab 未安装${Font_color_suffix}\"\n\tfi\n\techo\n\tread -e -p \" 请输入数字 [0-8]:\" num\n\tcase \"$num\" in\n\t\t0)\n\t\tUpdate_Shell\n\t\t;;\n\t\t1)\n\t\tInit_config\n\t\t;;\n\t\t2)\n\t\tUninstall_config\n\t\t;;\n\t\t3)\n\t\tManual_detection\n\t\t;;\n\t\t4)\n\t\tStop_monitor\n\t\t;;\n\t\t5)\n\t\trestart_monitor\n\t\t;;\n\t\t6)\n\t\tSet_config\n\t\t;;\n\t\t7)\n\t\tView_config\n\t\t;;\n\t\t8)\n\t\tView_Log\n\t\t;;\n\t\t*)\n\t\techo \"请输入正确数字 [0-8]\"\n\t\t;;\n\tesac\nfi\n"
        },
        {
          "name": "goflyway.sh",
          "type": "blob",
          "size": 23.8994140625,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: GoFlyway\n#\tVersion: 1.0.11\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/goflyway-jc2/\n#=================================================\n\nsh_ver=\"1.0.11\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile_1=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\nFolder=\"/usr/local/goflyway\"\nFile=\"/usr/local/goflyway/goflyway\"\nCONF=\"/usr/local/goflyway/goflyway.conf\"\nNow_ver_File=\"/usr/local/goflyway/ver.txt\"\nLog_File=\"/usr/local/goflyway/goflyway.log\"\nCrontab_file=\"/usr/bin/crontab\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前非ROOT账号(或没有ROOT权限)，无法继续操作，请更换ROOT账号或使用 ${Green_background_prefix}sudo su${Font_color_suffix} 命令获取临时ROOT权限（执行后可能会提示输入当前账号的密码）。\" && exit 1\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_installed_status(){\n\t[[ ! -e ${File} ]] && echo -e \"${Error} GoFlyway 没有安装，请检查 !\" && exit 1\n}\ncheck_crontab_installed_status(){\n\tif [[ ! -e ${Crontab_file} ]]; then\n\t\techo -e \"${Error} Crontab 没有安装，开始安装...\"\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum install crond -y\n\t\telse\n\t\t\tapt-get install cron -y\n\t\tfi\n\t\tif [[ ! -e ${Crontab_file} ]]; then\n\t\t\techo -e \"${Error} Crontab 安装失败，请检查！\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} Crontab 安装成功！\"\n\t\tfi\n\tfi\n}\ncheck_pid(){\n\tPID=$(ps -ef| grep \"goflyway\"| grep -v grep| grep -v \"goflyway.sh\"| grep -v \"init.d\"| grep -v \"service\"| awk '{print $2}')\n}\ncheck_new_ver(){\n\tnew_ver=$(wget --no-check-certificate -qO- -t1 -T3 https://api.github.com/repos/coyove/goflyway/releases| grep \"tag_name\"|grep -v \"caddy\"| head -n 1| awk -F \":\" '{print $2}'| sed 's/\\\"//g;s/,//g;s/ //g')\n\tif [[ -z ${new_ver} ]]; then\n\t\techo -e \"${Error} GoFlyway 最新版本获取失败，请手动获取最新版本号[ https://github.com/coyove/goflyway/releases ]\"\n\t\tread -e -p \"请输入版本号 [ 格式如 1.3.0a ] :\" new_ver\n\t\t[[ -z \"${new_ver}\" ]] && echo \"取消...\" && exit 1\n\telse\n\t\techo -e \"${Info} 检测到 GoFlyway 最新版本为 [ ${new_ver} ]\"\n\tfi\n}\ncheck_ver_comparison(){\n\tnow_ver=$(cat ${Now_ver_File})\n\t[[ -z ${now_ver} ]] && echo \"${new_ver}\" > ${Now_ver_File}\n\tif [[ ${now_ver} != ${new_ver} ]]; then\n\t\techo -e \"${Info} 发现 GoFlyway 已有新版本 [ ${new_ver} ]，当前版本 [ ${now_ver} ]\"\n\t\tread -e -p \"是否更新 ? [Y/n] :\" yn\n\t\t[[ -z \"${yn}\" ]] && yn=\"y\"\n\t\tif [[ $yn == [Yy] ]]; then\n\t\t\tcheck_pid\n\t\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\t\tcp \"${CONF}\" \"/tmp/goflyway.conf\"\n\t\t\trm -rf ${Folder}\n\t\t\tmkdir ${Folder}\n\t\t\tDownload_goflyway\n\t\t\tmv \"/tmp/goflyway.conf\" \"${CONF}\"\n\t\t\tStart_goflyway\n\t\tfi\n\telse\n\t\techo -e \"${Info} 当前 GoFlyway 已是最新版本 [ ${new_ver} ]\" && exit 1\n\tfi\n}\nDownload_goflyway(){\n\tcd ${Folder}\n\tif [[ ${bit} == \"x86_64\" ]]; then\n\t\twget --no-check-certificate -N \"https://github.com/coyove/goflyway/releases/download/${new_ver}/goflyway_linux_amd64.tar.gz\"\n\t\tmv goflyway_linux_amd64.tar.gz goflyway_linux.tar.gz\n\telse\n\t\twget --no-check-certificate -N \"https://github.com/coyove/goflyway/releases/download/${new_ver}/goflyway_linux_386.tar.gz\"\n\t\tmv goflyway_linux_386.tar.gz goflyway_linux.tar.gz\n\tfi\n\t[[ ! -e \"goflyway_linux.tar.gz\" ]] && echo -e \"${Error} GoFlyway 下载失败 !\" && exit 1\n\ttar -xzf goflyway_linux.tar.gz\n\t[[ ! -e \"goflyway\" ]] && echo -e \"${Error} GoFlyway 解压失败 !\" && rm -f goflyway_linux.tar.gz && exit 1\n\trm -f goflyway_linux.tar.gz\n\tchmod +x goflyway\n\t./goflyway -gen-ca\n\techo \"${new_ver}\" > ${Now_ver_File}\n}\nService_goflyway(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/goflyway_centos -O /etc/init.d/goflyway; then\n\t\t\techo -e \"${Error} GoFlyway 服务管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/goflyway\n\t\tchkconfig --add goflyway\n\t\tchkconfig goflyway on\n\telse\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/goflyway_debian -O /etc/init.d/goflyway; then\n\t\t\techo -e \"${Error} GoFlyway 服务管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/goflyway\n\t\tupdate-rc.d -f goflyway defaults\n\tfi\n\techo -e \"${Info} GoFlyway 服务管理脚本下载完成 !\"\n}\nInstallation_dependency(){\n\tmkdir ${Folder}\n}\nWrite_config(){\n\tcat > ${CONF}<<-EOF\nport=${new_port}\npasswd=${new_passwd}\nprotocol=${new_protocol}\nproxy_pass=${new_proxy_pass}\nEOF\n}\nRead_config(){\n\t[[ ! -e ${CONF} ]] && echo -e \"${Error} GoFlyway 配置文件不存在 !\" && exit 1\n\tport=$(cat ${CONF}|grep \"port\"|awk -F \"=\" '{print $NF}')\n\tpasswd=$(cat ${CONF}|grep \"passwd\"|awk -F \"=\" '{print $NF}')\n\tproxy_pass=$(cat ${CONF}|grep \"proxy_pass\"|awk -F \"=\" '{print $NF}')\n\tprotocol=$(cat ${CONF}|grep \"protocol\"|awk -F \"=\" '{print $NF}')\n\tif [[ -z \"${protocol}\" ]]; then\n\t\tprotocol=\"http\"\n\t\tnew_protocol=\"http\"\n\t\tnew_port=\"${port}\"\n\t\tnew_passwd=\"${passwd}\"\n\t\tnew_proxy_pass=\"${proxy_pass}\"\n\t\tWrite_config\n\tfi\n}\nSet_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 GoFlyway 监听端口 [1-65535]（如果要伪装或者套CDN，那么只能使用端口：80 8080 8880 2052 2082 2086 2095）\"\n\t\tread -e -p \"(默认: 8880):\" new_port\n\t\t[[ -z \"${new_port}\" ]] && new_port=\"8880\"\n\t\techo $((${new_port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${new_port} -ge 1 ]] && [[ ${new_port} -le 65535 ]]; then\n\t\t\t\techo && echo \"========================\"\n\t\t\t\techo -e \"\t端口 : ${Red_background_prefix} ${new_port} ${Font_color_suffix}\"\n\t\t\t\techo \"========================\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\t\tdone\n}\nSet_passwd(){\n\techo \"请输入 GoFlyway 密码\"\n\tread -e -p \"(默认: doub.io):\" new_passwd\n\t[[ -z \"${new_passwd}\" ]] && new_passwd=\"doub.io\"\n\techo && echo \"========================\"\n\techo -e \"\t密码 : ${Red_background_prefix} ${new_passwd} ${Font_color_suffix}\"\n\techo \"========================\" && echo\n}\nSet_proxy_pass(){\n\techo \"请输入 GoFlyway 要伪装的网站(反向代理，只支持 HTTP:// 网站)\"\n\tread -e -p \"(默认不伪装):\" new_proxy_pass\n\tif [[ ! -z ${new_proxy_pass} ]]; then\n\t\techo && echo \"========================\"\n\t\techo -e \"\t伪装 : ${Red_background_prefix} ${new_proxy_pass} ${Font_color_suffix}\"\n\t\techo \"========================\" && echo\n\tfi\n}\nSet_protocol(){\n\techo -e \"请选择 GoFlyway 传输协议\n\t\n ${Green_font_prefix}1.${Font_color_suffix} HTTP (默认，要使用 CDN、WebSocket 则必须选择 HTTP 协议)\n ${Green_font_prefix}2.${Font_color_suffix} KCP  (将 TCP 数据转为 KCP，并通过UDP方式传输，可复活被TCP阻断的IP)\n ${Tip} 如果使用 KCP 协议，那么将不能使用 CDN、WebSocket。另外，部分地区对海外的UDP链接会QOS限速，这可能导致 KCP 协议速度不理想。\" && echo\n\tread -e -p \"(默认: 1. HTTP):\" new_protocol\n\t[[ -z \"${new_protocol}\" ]] && new_protocol=\"3\"\n\tif [[ ${new_protocol} == \"1\" ]]; then\n\t\tnew_protocol=\"http\"\n\telif [[ ${new_protocol} == \"2\" ]]; then\n\t\tnew_protocol=\"kcp\"\n\telse\n\t\tnew_protocol=\"http\"\n\tfi\n\techo && echo \"========================\"\n\techo -e \"\t协议 : ${Red_background_prefix} ${new_protocol^^} ${Font_color_suffix}\"\n\techo \"========================\" && echo\n}\nSet_conf(){\n\tSet_port\n\tSet_passwd\n\tSet_protocol\n\tSet_proxy_pass\n}\nModify_port(){\n\tRead_config\n\tSet_port\n\tnew_passwd=\"${passwd}\"\n\tnew_proxy_pass=\"${proxy_pass}\"\n\tnew_protocol=\"${protocol}\"\n\tDel_iptables\n\tWrite_config\n\tAdd_iptables\n\tSave_iptables\n\tRestart_goflyway\n}\nModify_passwd(){\n\tRead_config\n\tSet_passwd\n\tnew_port=\"${port}\"\n\tnew_proxy_pass=\"${proxy_pass}\"\n\tnew_protocol=\"${protocol}\"\n\tWrite_config\n\tRestart_goflyway\n}\nModify_proxy_pass(){\n\tRead_config\n\tSet_proxy_pass\n\tnew_port=\"${port}\"\n\tnew_passwd=\"${passwd}\"\n\tnew_protocol=\"${protocol}\"\n\tWrite_config\n\tRestart_goflyway\n}\nModify_protocol(){\n\tRead_config\n\tSet_protocol\n\tnew_port=\"${port}\"\n\tnew_passwd=\"${passwd}\"\n\tnew_proxy_pass=\"${proxy_pass}\"\n\tWrite_config\n\tRestart_goflyway\n}\nModify_all(){\n\tRead_config\n\tSet_conf\n\tDel_iptables\n\tWrite_config\n\tAdd_iptables\n\tSave_iptables\n\tRestart_goflyway\n}\nSet_goflyway(){\n\tcheck_installed_status\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix}  修改 端口配置\n ${Green_font_prefix}2.${Font_color_suffix}  修改 密码配置\n ${Green_font_prefix}3.${Font_color_suffix}  修改 传输协议\n ${Green_font_prefix}4.${Font_color_suffix}  修改 伪装配置(反向代理)\n ${Green_font_prefix}5.${Font_color_suffix}  修改 全部配置\n————————————————\n ${Green_font_prefix}6.${Font_color_suffix}  监控 运行状态\n \n ${Tip} 用户的端口是不能重复的，密码可以重复 !\" && echo\n\tread -e -p \"(默认: 取消):\" gf_modify\n\t[[ -z \"${gf_modify}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${gf_modify} == \"1\" ]]; then\n\t\tModify_port\n\telif [[ ${gf_modify} == \"2\" ]]; then\n\t\tModify_passwd\n\telif [[ ${gf_modify} == \"3\" ]]; then\n\t\tModify_protocol\n\telif [[ ${gf_modify} == \"4\" ]]; then\n\t\tModify_proxy_pass\n\telif [[ ${gf_modify} == \"5\" ]]; then\n\t\tModify_all\n\telif [[ ${gf_modify} == \"6\" ]]; then\n\t\tSet_crontab_monitor_goflyway\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-6)\" && exit 1\n\tfi\n}\nInstall_goflyway(){\n\tcheck_root\n\t[[ -e ${File} ]] && echo -e \"${Error} 检测到 GoFlyway 已安装 !\" && exit 1\n\techo -e \"${Info} 开始设置 用户配置...\"\n\tSet_conf\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始检测最新版本...\"\n\tcheck_new_ver\n\techo -e \"${Info} 开始下载/安装...\"\n\tDownload_goflyway\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService_goflyway\n\techo -e \"${Info} 开始写入 配置文件...\"\n\tWrite_config\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart_goflyway\n}\nStart_goflyway(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} GoFlyway 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/goflyway start\n\tsleep 1s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View_goflyway\n}\nStop_goflyway(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} GoFlyway 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/goflyway stop\n}\nRestart_goflyway(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/goflyway stop\n\t/etc/init.d/goflyway start\n\tsleep 1s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View_goflyway\n}\nUpdate_goflyway(){\n\tcheck_installed_status\n\tcheck_new_ver\n\tcheck_ver_comparison\n}\nUninstall_goflyway(){\n\tcheck_installed_status\n\techo \"确定要卸载 GoFlyway ? (y/N)\"\n\techo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tRead_config\n\t\tDel_iptables\n\t\tSave_iptables\n\t\trm -rf ${Folder}\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del goflyway\n\t\telse\n\t\t\tupdate-rc.d -f goflyway remove\n\t\tfi\n\t\trm -rf /etc/init.d/goflyway\n\t\techo && echo \"GoFlyway 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nView_goflyway(){\n\tcheck_installed_status\n\tRead_config\n\tip=$(wget -qO- -t1 -T2 ipinfo.io/ip)\n\tif [[ -z \"${ip}\" ]]; then\n\t\tip=$(wget -qO- -t1 -T2 api.ip.sb/ip)\n\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\tip=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\t\tip=\"VPS_IP\"\n\t\t\tfi\n\t\tfi\n\tfi\n\t[[ -z ${proxy_pass} ]] && proxy_pass=\"无\"\n\tlink_qr\n\tclear && echo \"————————————————\" && echo\n\techo -e \" GoFlyway 信息 :\" && echo\n\techo -e \" 地址\\t: ${Green_font_prefix}${ip}${Font_color_suffix}\"\n\techo -e \" 端口\\t: ${Green_font_prefix}${port}${Font_color_suffix}\"\n\techo -e \" 密码\\t: ${Green_font_prefix}${passwd}${Font_color_suffix}\"\n\techo -e \" 协议\\t: ${Green_font_prefix}${protocol^^}${Font_color_suffix}\"\n\techo -e \" 伪装\\t: ${Green_font_prefix}${proxy_pass}${Font_color_suffix}\"\n\techo -e \"${link}\"\n\techo -e \"${Tip} 链接仅适用于Windows系统的 Goflyway Tools 客户端（https://doub.io/dbrj-11/）。\"\n\techo && echo \"————————————————\"\n}\nurlsafe_base64(){\n\tdate=$(echo -n \"$1\"|base64|sed ':a;N;s/\\n//g;ta'|sed 's/=//g;s/+/-/g;s/\\//_/g')\n\techo -e \"${date}\"\n}\nlink_qr(){\n\tPWDbase64=$(urlsafe_base64 \"${passwd}\")\n\tbase64=$(urlsafe_base64 \"${ip}:${port}@${PWDbase64}:${protocol}\")\n\turl=\"goflyway://${base64}\"\n\tQRcode=\"http://doub.pw/qr/qr.php?text=${url}\"\n\tlink=\" 链接\\t: ${Red_font_prefix}${url}${Font_color_suffix} \\n 二维码 : ${Red_font_prefix}${QRcode}${Font_color_suffix} \\n \"\n}\nView_Log(){\n\tcheck_installed_status\n\t[[ ! -e ${Log_File} ]] && echo -e \"${Error} GoFlyway 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${Log_File}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${Log_File}\n}\n# 显示 连接信息\ndebian_View_user_connection_info(){\n\tformat_1=$1\n\tRead_config\n\tuser_port=${port}\n\tuser_IP_1=$(netstat -anp |grep 'ESTABLISHED' |grep 'goflyway' |grep 'tcp6' |grep \":${user_port} \" |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\")\n\tif [[ -z ${user_IP_1} ]]; then\n\t\tuser_IP_total=\"0\"\n\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\telse\n\t\tuser_IP_total=`echo -e \"${user_IP_1}\"|wc -l`\n\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\t\t\tget_IP_address\n\t\t\techo\n\t\telse\n\t\t\tuser_IP=$(echo -e \"\\n${user_IP_1}\")\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\tfi\n\tfi\n\tuser_IP=\"\"\n}\ncentos_View_user_connection_info(){\n\tformat_1=$1\n\tRead_config\n\tuser_port=${port}\n\tuser_IP_1=`netstat -anp |grep 'ESTABLISHED' |grep 'goflyway' |grep 'tcp' |grep \":${user_port} \"|grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\"`\n\tif [[ -z ${user_IP_1} ]]; then\n\t\tuser_IP_total=\"0\"\n\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\telse\n\t\tuser_IP_total=`echo -e \"${user_IP_1}\"|wc -l`\n\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\t\t\tget_IP_address\n\t\t\techo\n\t\telse\n\t\t\tuser_IP=$(echo -e \"\\n${user_IP_1}\")\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\tfi\n\tfi\n\tuser_IP=\"\"\n}\nView_user_connection_info(){\n\tcheck_installed_status\n\techo && echo -e \"请选择要显示的格式：\n ${Green_font_prefix}1.${Font_color_suffix} 显示 IP 格式\n ${Green_font_prefix}2.${Font_color_suffix} 显示 IP+IP归属地 格式\" && echo\n\tread -e -p \"(默认: 1):\" goflyway_connection_info\n\t[[ -z \"${goflyway_connection_info}\" ]] && goflyway_connection_info=\"1\"\n\tif [[ \"${goflyway_connection_info}\" == \"1\" ]]; then\n\t\tView_user_connection_info_1 \"\"\n\telif [[ \"${goflyway_connection_info}\" == \"2\" ]]; then\n\t\techo -e \"${Tip} 检测IP归属地(ipip.net)，如果IP较多，可能时间会比较长...\"\n\t\tView_user_connection_info_1 \"IP_address\"\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-2)\" && exit 1\n\tfi\n}\nView_user_connection_info_1(){\n\tformat=$1\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\t\tif [[ $? = 0 ]]; then\n\t\t\tdebian_View_user_connection_info \"$format\"\n\t\telse\n\t\t\tcentos_View_user_connection_info \"$format\"\n\t\tfi\n\telse\n\t\tdebian_View_user_connection_info \"$format\"\n\tfi\n}\nget_IP_address(){\n\t#echo \"user_IP_1=${user_IP_1}\"\n\tif [[ ! -z ${user_IP_1} ]]; then\n\t#echo \"user_IP_total=${user_IP_total}\"\n\t\tfor((integer_1 = ${user_IP_total}; integer_1 >= 1; integer_1--))\n\t\tdo\n\t\t\tIP=$(echo \"${user_IP_1}\" |sed -n \"$integer_1\"p)\n\t\t\t#echo \"IP=${IP}\"\n\t\t\tIP_address=$(wget -qO- -t1 -T2 http://freeapi.ipip.net/${IP}|sed 's/\\\"//g;s/,//g;s/\\[//g;s/\\]//g')\n\t\t\t#echo \"IP_address=${IP_address}\"\n\t\t\t#user_IP=\"${user_IP}\\n${IP}(${IP_address})\"\n\t\t\techo -e \"${Green_font_prefix}${IP}${Font_color_suffix} (${IP_address})\"\n\t\t\t#echo \"user_IP=${user_IP}\"\n\t\t\tsleep 1s\n\t\tdone\n\tfi\n}\nSet_crontab_monitor_goflyway(){\n\tcheck_crontab_installed_status\n\tcrontab_monitor_goflyway_status=$(crontab -l|grep \"goflyway.sh monitor\")\n\tif [[ -z \"${crontab_monitor_goflyway_status}\" ]]; then\n\t\techo && echo -e \"当前监控模式: ${Green_font_prefix}未开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要开启 ${Green_font_prefix}Goflyway 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动 Goflyway 服务端)[Y/n]\"\n\t\tread -e -p \"(默认: y):\" crontab_monitor_goflyway_status_ny\n\t\t[[ -z \"${crontab_monitor_goflyway_status_ny}\" ]] && crontab_monitor_goflyway_status_ny=\"y\"\n\t\tif [[ ${crontab_monitor_goflyway_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_goflyway_cron_start\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"当前监控模式: ${Green_font_prefix}已开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要关闭 ${Green_font_prefix}Goflyway 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动 Goflyway 服务端)[y/N]\"\n\t\tread -e -p \"(默认: n):\" crontab_monitor_goflyway_status_ny\n\t\t[[ -z \"${crontab_monitor_goflyway_status_ny}\" ]] && crontab_monitor_goflyway_status_ny=\"n\"\n\t\tif [[ ${crontab_monitor_goflyway_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_goflyway_cron_stop\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\ncrontab_monitor_goflyway_cron_start(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/goflyway.sh monitor/d\" \"$file_1/crontab.bak\"\n\techo -e \"\\n* * * * * /bin/bash $file_1/goflyway.sh monitor\" >> \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"goflyway.sh monitor\")\n\tif [[ -z ${cron_config} ]]; then\n\t\techo -e \"${Error} Goflyway 服务端运行状态监控功能 启动失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} Goflyway 服务端运行状态监控功能 启动成功 !\"\n\tfi\n}\ncrontab_monitor_goflyway_cron_stop(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/goflyway.sh monitor/d\" \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"goflyway.sh monitor\")\n\tif [[ ! -z ${cron_config} ]]; then\n\t\techo -e \"${Error} Goflyway 服务端运行状态监控功能 停止失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} Goflyway 服务端运行状态监控功能 停止成功 !\"\n\tfi\n}\ncrontab_monitor_goflyway(){\n\tcheck_installed_status\n\tcheck_pid\n\techo \"${PID}\"\n\tif [[ -z ${PID} ]]; then\n\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] 检测到 Goflyway服务端 未运行 , 开始启动...\" | tee -a ${Log_File}\n\t\t/etc/init.d/goflyway start\n\t\tsleep 1s\n\t\tcheck_pid\n\t\tif [[ -z ${PID} ]]; then\n\t\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Goflyway服务端 启动失败...\" | tee -a ${Log_File}\n\t\telse\n\t\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Goflyway服务端 启动成功...\" | tee -a ${Log_File}\n\t\tfi\n\telse\n\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Goflyway服务端 进程运行正常...\" | tee -a ${Log_File}\n\tfi\n}\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${new_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${new_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/goflyway.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/goflyway\" ]]; then\n\t\trm -rf /etc/init.d/goflyway\n\t\tService_goflyway\n\tfi\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/goflyway.sh\" && chmod +x goflyway.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\ncheck_sys\naction=$1\nif [[ \"${action}\" == \"monitor\" ]]; then\n\tcrontab_monitor_goflyway\nelse\necho && echo -e \"  GoFlyway 一键管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  -- Toyo | doub.io/goflyway-jc2 --\n  \n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 GoFlyway\n ${Green_font_prefix} 2.${Font_color_suffix} 升级 GoFlyway\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 GoFlyway\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 GoFlyway\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 GoFlyway\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 GoFlyway\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 设置 账号配置\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 账号信息\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 日志信息\n ${Green_font_prefix}10.${Font_color_suffix} 查看 链接信息\n————————————\" && echo\nif [[ -e ${File} ]]; then\n\tcheck_pid\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\telse\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\tfi\nelse\n\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\nfi\necho\nread -e -p \" 请输入数字 [0-10]:\" num\ncase \"$num\" in\n\t0)\n\tUpdate_Shell\n\t;;\n\t1)\n\tInstall_goflyway\n\t;;\n\t2)\n\tUpdate_goflyway\n\t;;\n\t3)\n\tUninstall_goflyway\n\t;;\n\t4)\n\tStart_goflyway\n\t;;\n\t5)\n\tStop_goflyway\n\t;;\n\t6)\n\tRestart_goflyway\n\t;;\n\t7)\n\tSet_goflyway\n\t;;\n\t8)\n\tView_goflyway\n\t;;\n\t9)\n\tView_Log\n\t;;\n\t10)\n\tView_user_connection_info\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-10]\"\n\t;;\nesac\nfi"
        },
        {
          "name": "gogo.sh",
          "type": "blob",
          "size": 7.64453125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/java/jre/bin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: GoGo Server\n#\tVersion: 1.0.0\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/wlzy-24/\n#=================================================\n\ngogo_directory=\"/etc/gogoserver\"\ngogo_file=\"/etc/gogoserver/gogo-server.jar\"\njava_directory=\"/usr/java\"\njava_file=\"/usr/java/jre\"\nprofile_file=\"/etc/profile\"\nhttpsport=\"8443\"\n\n#检查是否安装gogo\ncheck_gogo(){\n\t[[ ! -e ${gogo_file} ]] && echo -e \"\\033[41;37m [错误] \\033[0m 没有安装GoGo，请检查 !\" && exit 1\n}\n#检查是否安装java\ncheck_java(){\n\tjava_check=`java -version`\n\t[[ -z ${java_check} ]] && echo -e \"\\033[41;37m [错误] \\033[0m 没有安装JAVA，请检查 !\" && exit 1\n}\n#检查系统\ncheck_sys(){\n\tbit=`uname -m`\n}\n# 安装java\ninstalljava(){\n\tmkdir ${java_directory}\n\tcd ${java_directory}\n\tcheck_sys\n# 系统判断\n\tif [ ${bit} == \"x86_64\" ]; then\n\t\twget -N -O java.tar.gz \"http://javadl.oracle.com/webapps/download/AutoDL?BundleId=216424\"\n\telif [ ${bit} == \"i386\" ]; then\n\t\twget -N -O java.tar.gz \"http://javadl.oracle.com/webapps/download/AutoDL?BundleId=216422\"\n\telse\n\t\techo -e \"\\033[41;37m [错误] \\033[0m 不支持 ${bit} !\" && exit 1\n\tfi\n\ttar zxvf java.tar.gz\n\tjre_file=`ls -a | grep 'jre'`\n\tmv ${jre_file} jre\n\trm -rf java.tar.gz\n# 设置java环境变量\n\techo '#set java JDK \nJAVA_HOME=/usr/java/jre\nJRE_HOME=/usr/java/jre/jre/ \nPATH=$PATH:$JAVA_HOME/bin:$JRE_home/bin \nCLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar \nexport JAVA_HOME \nexport JRE_HOME \nexport PATH \nexport CLASSPATH' >> ${profile_file}\n\tsource ${profile_file}\n#判断java是否安装成功\n\t#java_check=`java -version`\n\t#[[ -z ${java_check} ]] && echo -e \"\\033[41;37m [错误] \\033[0m 安装 JAVA 失败，请检查 !\" && exit 1\n}\n# 安装gogo\ninstallgogo(){\n# 判断是否安装gogo\n\t[[ -e ${gogo_file} ]] && echo -e \"\\033[41;37m [错误] \\033[0m 已经安装 GoGo，请检查 !\" && exit 1\n# 判断是否安装java\n\t#java_check=`java -version`\n\tif [[ ! -e ${java_directory} ]]; then\n\t\techo -e \"\\033[42;37m [信息] \\033[0m 没有检测到安装 JAVA，开始安装...\"\n\t\tinstalljava\n\tfi\n\tchmod +x /etc/rc.local\n\tmkdir ${gogo_directory}\n\tcd ${gogo_directory}\n\twget -N -O gogo-server.jar --no-check-certificate \"https://gogohome.herokuapp.com/getLatestGoGoServer\"\n\t#判断gogo是否下载成功\n\tif [[ ! -e ${gogo_file} ]]; then\n\t\techo -e \"\\033[41;37m [错误] \\033[0m 下载GoGo失败，请检查 !\" && exit 1\n\telse\n\t\tstartgogo\n\tfi\n}\nsetgogo(){\n#设置端口\n\twhile true\n\tdo\n\techo -e \"请输入GoGo Server 的 HTTP监听端口 [1-65535]:\"\n\tread -e -p \"(默认端口: 8080):\" httpport\n\t[ -z \"$httpport\" ] && httpport=\"8080\"\n\texpr ${httpport} + 0 &>/dev/null\n\tif [ $? -eq 0 ]; then\n\t\tif [ ${httpport} -ge 1 ] && [ ${httpport} -le 65535 ]; then\n\t\t\techo\n\t\t\techo \"——————————————————————————————\"\n\t\t\techo -e \"\t端口 : \\033[41;37m ${httpport} \\033[0m\"\n\t\t\techo \"——————————————————————————————\"\n\t\t\techo\n\t\t\tbreak\n\t\telse\n\t\t\techo \"输入错误，请输入正确的数字 !\"\n\t\tfi\n\telse\n\t\techo \"输入错误，请输入正确的数字 !\"\n\tfi\n\tdone\n}\n# 查看gogo列表\nviewgogo(){\n# 检查是否安装\n\tcheck_gogo\n\t\n\tPID=`ps -ef | grep \"gogo\" | grep -v grep | grep -v \"gogo.sh\" | awk '{print $2}'`\n\t[[ -z $PID ]] && echo -e \"\\033[42;37m [信息] \\033[0m GoGo 没有运行 !\" && exit 1\n\t\n\tgogo_http_port=`ps -ef | grep \"gogo\" | grep -v grep | grep -v \"gogo.sh\" | awk '{print $12}'`\n# 获取IP\n\tip=`curl -m 10 -s http://members.3322.org/dyndns/getip`\n\t[[ -z $ip ]] && ip=\"vps_ip\"\n\techo\n\techo \"——————————————————————————————\"\n\techo \"\tGoGo Server 配置信息: \"\n\techo\n\techo -e \"\t本地 IP : \\033[41;37m ${ip} \\033[0m\"\n\techo -e \"\tHTTP监听端口 : \\033[41;37m ${gogo_http_port} \\033[0m\"\n\techo -e \"\tHTTPS监听端口 : \\033[41;37m ${httpsport} \\033[0m\"\n\techo \"——————————————————————————————\"\n\techo\n}\n# 启动aProxy\nstartgogo(){\n# 检查是否安装\n\tcheck_gogo\n# 判断进程是否存在\n\tPID=`ps -ef | grep \"gogo\" | grep -v grep | grep -v \"gogo.sh\" | awk '{print $2}'`\n\t[[ ! -z $PID ]] && echo -e \"\\033[41;37m [错误] \\033[0m 发现 GoGo 正在运行，请检查 !\" && exit 1\n\tcd ${gogo_directory}\n\tsetgogo\n\tnohup java -Xmx300m -jar gogo-server.jar ${httpport} &>/dev/null &\n\tsleep 2s\n\tPID=`ps -ef | grep \"gogo\" | grep -v grep | grep -v \"gogo.sh\" | awk '{print $2}'`\n\t[[ -z $PID ]] && echo -e \"\\033[41;37m [错误] \\033[0m GoGo 启动失败 !\" && exit 1\n\tiptables -I INPUT -p tcp --dport ${httpport} -j ACCEPT\n\tiptables -I INPUT -p udp --dport ${httpport} -j ACCEPT\n\tiptables -I INPUT -p tcp --dport ${httpsport} -j ACCEPT\n\tiptables -I INPUT -p udp --dport ${httpsport} -j ACCEPT\n# 系统判断,开机启动\n\tcheck_sys\n\tif [[ ${release}  == \"debian\" ]]; then\n\t\tsed -i '$d' /etc/rc.local\n\t\techo -e \"nohup java -Xmx300m -jar gogo-server.jar ${httpport} &>/dev/null &\" >> /etc/rc.local\n\t\techo -e \"exit 0\" >> /etc/rc.local\n\telse\n\t\techo -e \"nohup java -Xmx300m -jar gogo-server.jar ${httpport} &>/dev/null &\" >> /etc/rc.local\n\tfi\n\t\n\tclear\n\techo\n\techo \"——————————————————————————————\"\n\techo\n\techo \"\tGoGo 已启动 !\"\n\tviewgogo\n}\n# 停止aProxy\nstopgogo(){\n# 检查是否安装\n\tcheck_gogo\n# 判断进程是否存在\n\tPID=`ps -ef | grep \"gogo\" | grep -v grep | grep -v \"gogo.sh\" | awk '{print $2}'`\n\t[[ -z $PID ]] && echo -e \"\\033[41;37m [错误] \\033[0m 发现 GoGo 没有运行，请检查 !\" && exit 1\n\tgogo_http_port=`ps -ef | grep \"gogo\" | grep -v grep | grep -v \"gogo.sh\" | awk '{print $12}'`\n\tsed -i \"/nohup java -Xmx300m -jar gogo-server.jar ${gogo_http_port} &>\\/dev\\/null &/d\" /etc/rc.local\n\tiptables -D INPUT -p tcp --dport ${gogo_http_port} -j ACCEPT\n\tiptables -D INPUT -p udp --dport ${gogo_http_port} -j ACCEPT\n\tiptables -D INPUT -p tcp --dport ${httpsport} -j ACCEPT\n\tiptables -D INPUT -p udp --dport ${httpsport} -j ACCEPT\n\tkill -9 ${PID}\n\tsleep 2s\n\tPID=`ps -ef | grep \"gogo\" | grep -v grep | grep -v \"gogo.sh\" | awk '{print $2}'`\n\tif [[ ! -z $PID ]]; then\n\t\techo -e \"\\033[41;37m [错误] \\033[0m GoGo 停止失败 !\" && exit 1\n\telse\n\t\techo \"\tGoGo 已停止 !\"\n\tfi\n}\nrestartgogo(){\n# 检查是否安装\n\tcheck_gogo\n\tPID=`ps -ef | grep \"gogo\" | grep -v grep | grep -v \"gogo.sh\" | awk '{print $2}'`\n\t[[ ! -z $PID ]] && stopgogo\n\tstartgogo\n}\nstatusgogo(){\n# 检查是否安装\n\tcheck_gogo\n# 判断进程是否存在\n\tPID=`ps -ef | grep \"gogo\" | grep -v grep | grep -v \"gogo.sh\" | awk '{print $2}'`\n\tif [[ ! -z $PID ]]; then\n\t\techo -e \"\\033[42;37m [信息] \\033[0m GoGo 正在运行，PID: ${PID} !\"\n\telse\n\t\techo -e \"\\033[42;37m [信息] \\033[0m GoGo 没有运行 !\"\n\tfi\n}\nuninstallgogo(){\n# 检查是否安装\n\tcheck_gogo\n\tprintf \"确定要卸载 GoGo ? (y/N)\"\n\tprintf \"\\n\"\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tPID=`ps -ef | grep \"gogo\" | grep -v grep | grep -v \"gogo.sh\" | awk '{print $2}'`\n\t\t[[ ! -z $PID ]] && stopgogo\n\t\trm -rf ${gogo_directory}\n\t\tsed -i \"/nohup java -Xmx300m -jar gogo-server.jar ${gogo_http_port} &>\\/dev\\/null &/d\" /etc/rc.local\n\t\t[[ -e ${gogo_directory} ]] && echo -e \"\\033[41;37m [错误] \\033[0m GoGo卸载失败，请检查 !\" && exit 1\n\t\techo\n\t\techo \"\tGoGo 已卸载 !\"\n\t\techo\n\telse\n\t\techo\n\t\techo \"卸载已取消...\"\n\t\techo\n\tfi\n}\n\naction=$1\n[[ -z $1 ]] && action=install\ncase \"$action\" in\n\tinstall|view|start|stop|restart|status|uninstall)\n\t${action}gogo\n\t;;\n\t*)\n\techo \"输入错误 !\"\n\techo \"用法: { install | view | start | stop | restart | status | uninstall }\"\n\t;;\nesac"
        },
        {
          "name": "haproxy.sh",
          "type": "blob",
          "size": 8.5166015625,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: HaProxy\n#\tVersion: 1.0.7\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/wlzy-19/\n#=================================================\n\nHaProxy_file=\"/etc/haproxy\"\nHaProxy_cfg_file=\"/etc/haproxy/haproxy.cfg\"\n\n#检查是否安装HaProxy\ncheck_HaProxy(){\n\tHaProxy_exist=`haproxy -v`\n\tif [[ ${HaProxy_exist} = \"\" ]]; then\n\t\techo -e \"\\033[41;37m [错误] \\033[0m 没有安装HaProxy，请检查 !\" && exit 1\n\tfi\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\t#bit=`uname -m`\n}\n# 设置 防火墙规则\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\n# 安装HaProxy\ninstallHaProxy(){\n\tHaProxy_exist=`haproxy -v`\n\tif [[ ${HaProxy_exist} != \"\" ]]; then\n\t\techo -e \"\\033[41;37m [错误] \\033[0m 已经安装HaProxy，请检查 !\" && exit 1\n\tfi\n\tif [[ ${release}  == \"centos\" ]]; then\n\t\tyum update && yum install -y vim haproxy\n\telse\n\t\tapt-get update && apt-get install -y vim haproxy\n\tfi\n\tchmod +x /etc/rc.local\n\tHaProxy_exist=`haproxy -v`\n\tif [[ ${HaProxy_exist} = \"\" ]]; then\n\t\techo -e \"\\033[41;37m [错误] \\033[0m 安装HaProxy失败，请检查 !\" && exit 1\n\telse\n\t\tSet_iptables\n\t\tif [[ ${release}  == \"centos\" ]]; then\n\t\t\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\t\t\tif [[ $? = 0 ]]; then\n\t\t\t\tsystemctl enable haproxy.service\n\t\t\telse\n\t\t\t\tchmod +x /etc/init.d/haproxy\n\t\t\t\tchkconfig --add haproxy\n\t\t\t\tchkconfig haproxy on\n\t\t\tfi\n\t\telse\n\t\t\tchmod +x /etc/init.d/haproxy\n\t\t\tupdate-rc.d -f haproxy defaults\n\t\tfi\n\t\tsetHaProxy\n\tfi\n}\nsetHaProxy(){\n\tcheck_HaProxy\n\tread -e -p \"请输入 HaProxy 的 本地监听端口(转发端口) [1-65535](支持端口段: 2333-6666): \" HaProxyport\n\t[[ -z \"${HaProxyport}\" ]] && echo \"取消...\" && exit 1\n\tread -e -p \"请输入 HaProxy 欲转发的 IP:\" HaProxyip\n\t[[ -z \"${HaProxyip}\" ]] && echo \"取消...\" && exit 1\n\techo\n\techo \"——————————————————————————————\"\n\techo \"      请检查 HaProxy 配置是否有误 !\"\n\techo\n\techo -e \"\t本地监听端口 : \\033[41;37m ${HaProxyport} \\033[0m\"\n\techo -e \"\t欲转发 IP : \\033[41;37m ${HaProxyip} \\033[0m\"\n\techo \"——————————————————————————————\"\n\techo\n\tread -e -p \"请按任意键继续，如有配置错误请使用 Ctrl+C 退出。\" var\n\tHaProxy_port_1=`cat ${HaProxy_cfg_file} | sed -n \"12p\" | cut -c 12-23 | grep \"-\"`\n\tHaProxy_port=`cat ${HaProxy_cfg_file} | sed -n \"12p\" | cut -c 12-23`\n\tif [[ ${HaProxy_port_1} = \"\" ]]; then\n\t\tiptables -D INPUT -p tcp --dport ${HaProxy_port} -j ACCEPT\n\telse\n\t\tHaProxy_port_1=`echo ${HaProxy_port_1} | sed 's/-/:/g'`\n\t\tiptables -D INPUT -p tcp --dport ${HaProxy_port_1} -j ACCEPT\n\tfi\n\tcat > ${HaProxy_cfg_file}<<-EOF\nglobal\n\ndefaults\n        log     global\n        mode    tcp\n        option  dontlognull\n        timeout connect 5000\n        timeout client  50000\n        timeout server  50000\n\nfrontend ss-in1\n    bind *:${HaProxyport}\n    default_backend ss-out1\n\nbackend ss-out1\n    server server1 ${HaProxyip} maxconn 20480\nEOF\n\trestartHaProxy\n}\n# 查看HaProxy列表\nviewHaProxy(){\n\tcheck_HaProxy\n\tHaProxy_port=`cat ${HaProxy_cfg_file} | sed -n \"12p\" | cut -c 12-23`\n\tHaProxy_ip=`cat ${HaProxy_cfg_file} | sed -n \"16p\" | awk '{print $3}'`\n\tip=`wget -qO- -t1 -T2 ipinfo.io/ip`\n\t[[ -z $ip ]] && ip=\"VPS_IP\"\n\techo\n\techo \"——————————————————————————————\"\n\techo \"\tHaProxy 配置信息: \"\n\techo\n\techo -e \"\t本地 IP : \\033[41;37m ${ip} \\033[0m\"\n\techo -e \"\t本地监听端口 : \\033[41;37m ${HaProxy_port} \\033[0m\"\n\techo\n\techo -e \"\t欲转发 IP : \\033[41;37m ${HaProxy_ip} \\033[0m\"\n\techo -e \"\t欲转发端口 : \\033[41;37m ${HaProxy_port} \\033[0m\"\n\techo \"——————————————————————————————\"\n\techo\n}\n# 启动aProxy\nstartHaProxy(){\n\tcheck_HaProxy\n\tPID=`ps -ef | grep \"haproxy\" | grep -v grep | grep -v \"haproxy.sh\" | awk '{print $2}'`\n\t[[ ! -z $PID ]] && echo -e \"\\033[41;37m [错误] \\033[0m 发现 HaProxy 正在运行，请检查 !\" && exit 1\n\tif [[ ${release}  == \"centos\" ]]; then\n\t\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\t\tif [[ $? = 0 ]]; then\n\t\t\tsystemctl start haproxy.service\n\t\telse\n\t\t\t/etc/init.d/haproxy start\n\t\tfi\n\telse\n\t\t/etc/init.d/haproxy start\n\tfi\n\tsleep 2s\n\tPID=`ps -ef | grep \"haproxy\" | grep -v grep | grep -v \"haproxy.sh\" | awk '{print $2}'`\n\t[[ -z $PID ]] && echo -e \"\\033[41;37m [错误] \\033[0m HaProxy 启动失败 !\" && exit 1\n\tHaProxy_port_1=`cat ${HaProxy_cfg_file} | sed -n \"12p\" | cut -c 12-23 | grep \"-\"`\n\tHaProxy_port=`cat ${HaProxy_cfg_file} | sed -n \"12p\" | cut -c 12-23`\n\tif [[ ${HaProxy_port_1} = \"\" ]]; then\n\t\tiptables -I INPUT -p tcp --dport ${HaProxy_port} -j ACCEPT\n\telse\n\t\tHaProxy_port_1=`echo ${HaProxy_port_1} | sed 's/-/:/g'`\n\t\tiptables -I INPUT -p tcp --dport ${HaProxy_port_1} -j ACCEPT\n\tfi\n\techo && echo \"——————————————————————————————\" && echo\n\techo \"\tHaProxy 已启动 !\"\n\tSave_iptables\n\tviewHaProxy\n}\n# 停止aProxy\nstopHaProxy(){\n\tcheck_HaProxy\n\tPID=`ps -ef | grep \"haproxy\" | grep -v grep | grep -v \"haproxy.sh\" | awk '{print $2}'`\n\t[[ -z $PID ]] && echo -e \"\\033[41;37m [错误] \\033[0m 发现 HaProxy 没有运行，请检查 !\" && exit 1\n\tif [[ ${release}  == \"centos\" ]]; then\n\t\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\t\tif [[ $? = 0 ]]; then\n\t\t\tsystemctl stop haproxy.service\n\t\telse\n\t\t\t/etc/init.d/haproxy stop\n\t\tfi\n\telse\n\t\t/etc/init.d/haproxy stop\n\tfi\n\tHaProxy_port_1=`cat ${HaProxy_cfg_file} | sed -n \"12p\" | cut -c 12-23 | grep \"-\"`\n\tHaProxy_port=`cat ${HaProxy_cfg_file} | sed -n \"12p\" | cut -c 12-23`\n\tif [[ ${HaProxy_port_1} = \"\" ]]; then\n\t\tiptables -D INPUT -p tcp --dport ${HaProxy_port} -j ACCEPT\n\telse\n\t\tHaProxy_port_1=`echo ${HaProxy_port_1} | sed 's/-/:/g'`\n\t\tiptables -D INPUT -p tcp --dport ${HaProxy_port_1} -j ACCEPT\n\tfi\n\tsleep 2s\n\tPID=`ps -ef | grep \"haproxy\" | grep -v grep | grep -v \"haproxy.sh\" | awk '{print $2}'`\n\tif [[ ! -z $PID ]]; then\n\t\techo -e \"\\033[41;37m [错误] \\033[0m HaProxy 停止失败 !\" && exit 1\n\telse\n\t\tSave_iptables\n\t\techo \"\tHaProxy 已停止 !\"\n\tfi\n}\nrestartHaProxy(){\n# 检查是否安装\n\tcheck_HaProxy\n\tPID=`ps -ef | grep \"haproxy\" | grep -v grep | grep -v \"haproxy.sh\" | awk '{print $2}'`\n\tif [[ ! -z $PID ]]; then\n\t\tstopHaProxy\n\tfi\n\tstartHaProxy\n}\nstatusHaProxy(){\n\tcheck_HaProxy\n\tPID=`ps -ef | grep \"haproxy\" | grep -v grep | grep -v \"haproxy.sh\" | awk '{print $2}'`\n\tif [[ ! -z $PID ]]; then\n\t\techo -e \"\\033[42;37m [信息] \\033[0m HaProxy 正在运行，PID: ${PID} !\"\n\telse\n\t\techo -e \"\\033[42;37m [信息] \\033[0m HaProxy 没有运行 !\"\n\tfi\n}\nuninstallHaProxy(){\n\tcheck_HaProxy\n\techo \"确定要卸载 HaProxy ? [y/N]\"\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tPID=`ps -ef | grep \"haproxy\" | grep -v grep | grep -v \"haproxy.sh\" | awk '{print $2}'`\n\t\tif [[ ! -z $PID ]]; then\n\t\t\tstopHaProxy\n\t\tfi\n\t\tif [[ ${release}  == \"centos\" ]]; then\n\t\t\tyum remove haproxy -y\n\t\telse\n\t\t\tapt-get remove haproxy -y\n\t\t\tapt-get autoremove\n\t\tfi\n\t\trm -rf ${HaProxy_file}\n\t\tHaProxy_exist=`haproxy -v`\n\t\tif [[ ${HaProxy_exist} != \"\" ]]; then\n\t\t\techo -e \"\\033[41;37m [错误] \\033[0m HaProxy卸载失败，请检查 !\" && exit 1\n\t\tfi\n\t\techo && echo \"\tHaProxy 已卸载 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\ncheck_sys\naction=$1\n[[ -z $1 ]] && action=install\ncase \"$action\" in\n\tinstall|set|view|start|stop|restart|status|uninstall)\n\t${action}HaProxy\n\t;;\n\t*)\n\techo \"输入错误 !\"\n\techo \"用法: { install | view | set | start | stop | restart | status | uninstall }\"\n\t;;\nesac"
        },
        {
          "name": "iptables-pf.sh",
          "type": "blob",
          "size": 12.34765625,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: iptables Port forwarding\n#\tVersion: 1.1.1\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/wlzy-20/\n#=================================================\nsh_ver=\"1.1.1\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\ncheck_iptables(){\n\tiptables_exist=$(iptables -V)\n\t[[ ${iptables_exist} = \"\" ]] && echo -e \"${Error} 没有安装iptables，请检查 !\" && exit 1\n}\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\t#bit=`uname -m`\n}\ninstall_iptables(){\n\tiptables_exist=$(iptables -V)\n\tif [[ ${iptables_exist} != \"\" ]]; then\n\t\techo -e \"${Info} 已经安装iptables，继续...\"\n\telse\n\t\techo -e \"${Info} 检测到未安装 iptables，开始安装...\"\n\t\tif [[ ${release}  == \"centos\" ]]; then\n\t\t\tyum update\n\t\t\tyum install -y iptables\n\t\telse\n\t\t\tapt-get update\n\t\t\tapt-get install -y iptables\n\t\tfi\n\t\tiptables_exist=$(iptables -V)\n\t\tif [[ ${iptables_exist} = \"\" ]]; then\n\t\t\techo -e \"${Error} 安装iptables失败，请检查 !\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} iptables 安装完成 !\"\n\t\tfi\n\tfi\n\techo -e \"${Info} 开始配置 iptables !\"\n\tSet_iptables\n\techo -e \"${Info} iptables 配置完毕 !\"\n}\nSet_forwarding_port(){\n\tread -e -p \"请输入 iptables 欲转发至的 远程端口 [1-65535] (支持端口段 如 2333-6666, 被转发服务器):\" forwarding_port\n\t[[ -z \"${forwarding_port}\" ]] && echo \"取消...\" && exit 1\n\techo && echo -e \"\t欲转发端口 : ${Red_font_prefix}${forwarding_port}${Font_color_suffix}\" && echo\n}\nSet_forwarding_ip(){\n\t\tread -e -p \"请输入 iptables 欲转发至的 远程IP(被转发服务器):\" forwarding_ip\n\t\t[[ -z \"${forwarding_ip}\" ]] && echo \"取消...\" && exit 1\n\t\techo && echo -e \"\t欲转发服务器IP : ${Red_font_prefix}${forwarding_ip}${Font_color_suffix}\" && echo\n}\nSet_local_port(){\n\techo -e \"请输入 iptables 本地监听端口 [1-65535] (支持端口段 如 2333-6666)\"\n\tread -e -p \"(默认端口: ${forwarding_port}):\" local_port\n\t[[ -z \"${local_port}\" ]] && local_port=\"${forwarding_port}\"\n\techo && echo -e \"\t本地监听端口 : ${Red_font_prefix}${local_port}${Font_color_suffix}\" && echo\n}\nSet_local_ip(){\n\tread -e -p \"请输入 本服务器的 网卡IP(注意是网卡绑定的IP，而不仅仅是公网IP，回车自动检测外网IP):\" local_ip\n\tif [[ -z \"${local_ip}\" ]]; then\n\t\tlocal_ip=$(wget -qO- -t1 -T2 ipinfo.io/ip)\n\t\tif [[ -z \"${local_ip}\" ]]; then\n\t\t\techo \"${Error} 无法检测到本服务器的公网IP，请手动输入\"\n\t\t\tread -e -p \"请输入 本服务器的 网卡IP(注意是网卡绑定的IP，而不仅仅是公网IP):\" local_ip\n\t\t\t[[ -z \"${local_ip}\" ]] && echo \"取消...\" && exit 1\n\t\tfi\n\tfi\n\techo && echo -e \"\t本服务器IP : ${Red_font_prefix}${local_ip}${Font_color_suffix}\" && echo\n}\nSet_forwarding_type(){\n\techo -e \"请输入数字 来选择 iptables 转发类型:\n 1. TCP\n 2. UDP\n 3. TCP+UDP\\n\"\n\tread -e -p \"(默认: TCP+UDP):\" forwarding_type_num\n\t[[ -z \"${forwarding_type_num}\" ]] && forwarding_type_num=\"3\"\n\tif [[ ${forwarding_type_num} == \"1\" ]]; then\n\t\tforwarding_type=\"TCP\"\n\telif [[ ${forwarding_type_num} == \"2\" ]]; then\n\t\tforwarding_type=\"UDP\"\n\telif [[ ${forwarding_type_num} == \"3\" ]]; then\n\t\tforwarding_type=\"TCP+UDP\"\n\telse\n\t\tforwarding_type=\"TCP+UDP\"\n\tfi\n}\nSet_Config(){\n\tSet_forwarding_port\n\tSet_forwarding_ip\n\tSet_local_port\n\tSet_local_ip\n\tSet_forwarding_type\n\techo && echo -e \"——————————————————————————————\n\t请检查 iptables 端口转发规则配置是否有误 !\\n\n\t本地监听端口    : ${Green_font_prefix}${local_port}${Font_color_suffix}\n\t服务器 IP\\t: ${Green_font_prefix}${local_ip}${Font_color_suffix}\\n\n\t欲转发的端口    : ${Green_font_prefix}${forwarding_port}${Font_color_suffix}\n\t欲转发 IP\\t: ${Green_font_prefix}${forwarding_ip}${Font_color_suffix}\n\t转发类型\\t: ${Green_font_prefix}${forwarding_type}${Font_color_suffix}\n——————————————————————————————\\n\"\n\tread -e -p \"请按任意键继续，如有配置错误请使用 Ctrl+C 退出。\" var\n}\nAdd_forwarding(){\n\tcheck_iptables\n\tSet_Config\n\tlocal_port=$(echo ${local_port} | sed 's/-/:/g')\n\tforwarding_port_1=$(echo ${forwarding_port} | sed 's/-/:/g')\n\tif [[ ${forwarding_type} == \"TCP\" ]]; then\n\t\tAdd_iptables \"tcp\"\n\telif [[ ${forwarding_type} == \"UDP\" ]]; then\n\t\tAdd_iptables \"udp\"\n\telif [[ ${forwarding_type} == \"TCP+UDP\" ]]; then\n\t\tAdd_iptables \"tcp\"\n\t\tAdd_iptables \"udp\"\n\tfi\n\tSave_iptables\n\tclear && echo && echo -e \"——————————————————————————————\n\tiptables 端口转发规则配置完成 !\\n\n\t本地监听端口    : ${Green_font_prefix}${local_port}${Font_color_suffix}\n\t服务器 IP\\t: ${Green_font_prefix}${local_ip}${Font_color_suffix}\\n\n\t欲转发的端口    : ${Green_font_prefix}${forwarding_port_1}${Font_color_suffix}\n\t欲转发 IP\\t: ${Green_font_prefix}${forwarding_ip}${Font_color_suffix}\n\t转发类型\\t: ${Green_font_prefix}${forwarding_type}${Font_color_suffix}\n——————————————————————————————\\n\"\n}\nView_forwarding(){\n\tcheck_iptables\n\tforwarding_text=$(iptables -t nat -vnL PREROUTING|tail -n +3)\n\t[[ -z ${forwarding_text} ]] && echo -e \"${Error} 没有发现 iptables 端口转发规则，请检查 !\" && exit 1\n\tforwarding_total=$(echo -e \"${forwarding_text}\"|wc -l)\n\tforwarding_list_all=\"\"\n\tfor((integer = 1; integer <= ${forwarding_total}; integer++))\n\tdo\n\t\tforwarding_type=$(echo -e \"${forwarding_text}\"|awk '{print $4}'|sed -n \"${integer}p\")\n\t\tforwarding_listen=$(echo -e \"${forwarding_text}\"|awk '{print $11}'|sed -n \"${integer}p\"|awk -F \"dpt:\" '{print $2}')\n\t\t[[ -z ${forwarding_listen} ]] && forwarding_listen=$(echo -e \"${forwarding_text}\"| awk '{print $11}'|sed -n \"${integer}p\"|awk -F \"dpts:\" '{print $2}')\n\t\tforwarding_fork=$(echo -e \"${forwarding_text}\"| awk '{print $12}'|sed -n \"${integer}p\"|awk -F \"to:\" '{print $2}')\n\t\tforwarding_list_all=${forwarding_list_all}\"${Green_font_prefix}\"${integer}\".${Font_color_suffix} 类型: ${Green_font_prefix}\"${forwarding_type}\"${Font_color_suffix} 监听端口: ${Red_font_prefix}\"${forwarding_listen}\"${Font_color_suffix} 转发IP和端口: ${Red_font_prefix}\"${forwarding_fork}\"${Font_color_suffix}\\n\"\n\tdone\n\techo && echo -e \"当前有 ${Green_background_prefix} \"${forwarding_total}\" ${Font_color_suffix} 个 iptables 端口转发规则。\"\n\techo -e ${forwarding_list_all}\n}\nDel_forwarding(){\n\tcheck_iptables\n\twhile true\n\tdo\n\tView_forwarding\n\tread -e -p \"请输入数字 来选择要删除的 iptables 端口转发规则(默认回车取消):\" Del_forwarding_num\n\t[[ -z \"${Del_forwarding_num}\" ]] && Del_forwarding_num=\"0\"\n\techo $((${Del_forwarding_num}+0)) &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${Del_forwarding_num} -ge 1 ]] && [[ ${Del_forwarding_num} -le ${forwarding_total} ]]; then\n\t\t\tforwarding_type=$(echo -e \"${forwarding_text}\"| awk '{print $4}' | sed -n \"${Del_forwarding_num}p\")\n\t\t\tforwarding_listen=$(echo -e \"${forwarding_text}\"| awk '{print $11}' | sed -n \"${Del_forwarding_num}p\" | awk -F \"dpt:\" '{print $2}' | sed 's/-/:/g')\n\t\t\t[[ -z ${forwarding_listen} ]] && forwarding_listen=$(echo -e \"${forwarding_text}\"| awk '{print $11}' |sed -n \"${Del_forwarding_num}p\" | awk -F \"dpts:\" '{print $2}')\n\t\t\tDel_iptables \"${forwarding_type}\" \"${Del_forwarding_num}\"\n\t\t\tSave_iptables\n\t\t\techo && echo -e \"${Info} iptables 端口转发规则删除完成 !\" && echo\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字 !\"\n\t\tfi\n\telse\n\t\tbreak && echo \"取消...\"\n\tfi\n\tdone\n}\nUninstall_forwarding(){\n\tcheck_iptables\n\techo -e \"确定要清空 iptables 所有端口转发规则 ? [y/N]\"\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tforwarding_text=$(iptables -t nat -vnL PREROUTING|tail -n +3)\n\t\t[[ -z ${forwarding_text} ]] && echo -e \"${Error} 没有发现 iptables 端口转发规则，请检查 !\" && exit 1\n\t\tforwarding_total=$(echo -e \"${forwarding_text}\"|wc -l)\n\t\tfor((integer = 1; integer <= ${forwarding_total}; integer++))\n\t\tdo\n\t\t\tforwarding_type=$(echo -e \"${forwarding_text}\"|awk '{print $4}'|sed -n \"${integer}p\")\n\t\t\tforwarding_listen=$(echo -e \"${forwarding_text}\"|awk '{print $11}'|sed -n \"${integer}p\"|awk -F \"dpt:\" '{print $2}')\n\t\t\t[[ -z ${forwarding_listen} ]] && forwarding_listen=$(echo -e \"${forwarding_text}\"| awk '{print $11}'|sed -n \"${integer}p\"|awk -F \"dpts:\" '{print $2}')\n\t\t\t# echo -e \"${forwarding_text} ${forwarding_type} ${forwarding_listen}\"\n\t\t\tDel_iptables \"${forwarding_type}\" \"${integer}\"\n\t\tdone\n\t\tSave_iptables\n\t\techo && echo -e \"${Info} iptables 已清空 所有端口转发规则 !\" && echo\n\telse\n\t\techo && echo \"清空已取消...\" && echo\n\tfi\n}\nAdd_iptables(){\n\tiptables -t nat -A PREROUTING -p \"$1\" --dport \"${local_port}\" -j DNAT --to-destination \"${forwarding_ip}\":\"${forwarding_port}\"\n\tiptables -t nat -A POSTROUTING -p \"$1\" -d \"${forwarding_ip}\" --dport \"${forwarding_port_1}\" -j SNAT --to-source \"${local_ip}\"\n\techo \"iptables -t nat -A PREROUTING -p $1 --dport ${local_port} -j DNAT --to-destination ${forwarding_ip}:${forwarding_port}\"\n\techo \"iptables -t nat -A POSTROUTING -p $1 -d ${forwarding_ip} --dport ${forwarding_port_1} -j SNAT --to-source ${local_ip}\"\n\techo \"${local_port}\"\n\tiptables -I INPUT -m state --state NEW -m \"$1\" -p \"$1\" --dport \"${local_port}\" -j ACCEPT\n}\nDel_iptables(){\n\tiptables -t nat -D POSTROUTING \"$2\"\n\tiptables -t nat -D PREROUTING \"$2\"\n\tiptables -D INPUT -m state --state NEW -m \"$1\" -p \"$1\" --dport \"${forwarding_listen}\" -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\techo -e \"net.ipv4.ip_forward=1\" >> /etc/sysctl.conf\n\tsysctl -p\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/iptables-pf.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1)\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/iptables-pf.sh\" && chmod +x iptables-pf.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\ncheck_sys\necho && echo -e \" iptables 端口转发一键管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  -- Toyo | doub.io/wlzy-20 --\n  \n ${Green_font_prefix}0.${Font_color_suffix} 升级脚本\n————————————\n ${Green_font_prefix}1.${Font_color_suffix} 安装 iptables\n ${Green_font_prefix}2.${Font_color_suffix} 清空 iptables 端口转发\n————————————\n ${Green_font_prefix}3.${Font_color_suffix} 查看 iptables 端口转发\n ${Green_font_prefix}4.${Font_color_suffix} 添加 iptables 端口转发\n ${Green_font_prefix}5.${Font_color_suffix} 删除 iptables 端口转发\n————————————\n注意：初次使用前请请务必执行 ${Green_font_prefix}1. 安装 iptables${Font_color_suffix}(不仅仅是安装)\" && echo\nread -e -p \" 请输入数字 [0-5]:\" num\ncase \"$num\" in\n\t0)\n\tUpdate_Shell\n\t;;\n\t1)\n\tinstall_iptables\n\t;;\n\t2)\n\tUninstall_forwarding\n\t;;\n\t3)\n\tView_forwarding\n\t;;\n\t4)\n\tAdd_forwarding\n\t;;\n\t5)\n\tDel_forwarding\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-5]\"\n\t;;\nesac"
        },
        {
          "name": "libsodium.sh",
          "type": "blob",
          "size": 2.96484375,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: Libsodium Install\n#\tVersion: 1.0.0\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/shell-jc6/\n#=================================================\n\nLibsodiumr_file=\"/usr/local/lib/libsodium.so\"\nLibsodiumr_ver_backup=\"1.0.15\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\" && Error=\"${Red_font_prefix}[错误]${Font_color_suffix}\" && Tip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\nCheck_Libsodium_ver(){\n\techo -e \"${Info} 开始获取 libsodium 最新版本...\"\n\tLibsodiumr_ver=$(wget -qO- \"https://github.com/jedisct1/libsodium/tags\"|grep \"/jedisct1/libsodium/releases/tag/\"|head -1|sed -r 's/.*tag\\/(.+)\\\">.*/\\1/')\n\t[[ -z ${Libsodiumr_ver} ]] && Libsodiumr_ver=${Libsodiumr_ver_backup}\n\techo -e \"${Info} libsodium 最新版本为 ${Green_font_prefix}[${Libsodiumr_ver}]${Font_color_suffix} !\"\n}\nInstall_Libsodium(){\n\tif [[ -e ${Libsodiumr_file} ]]; then\n\t\techo -e \"${Error} libsodium 已安装 , 是否覆盖安装(或者更新)？[y/N]\"\n\t\tread -e -p \"(默认: n):\" yn\n\t\t[[ -z ${yn} ]] && yn=\"n\"\n\t\tif [[ ${yn} == [Nn] ]]; then\n\t\t\techo \"已取消...\" && exit 1\n\t\tfi\n\telse\n\t\techo -e \"${Info} libsodium 未安装，开始安装...\"\n\tfi\n\tCheck_Libsodium_ver\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tyum update\n\t\techo -e \"${Info} 安装依赖...\"\n\t\tyum -y groupinstall \"Development Tools\"\n\t\techo -e \"${Info} 下载...\"\n\t\twget  --no-check-certificate -N \"https://github.com/jedisct1/libsodium/releases/download/${Libsodiumr_ver}-RELEASE/libsodium-${Libsodiumr_ver}.tar.gz\"\n\t\techo -e \"${Info} 解压...\"\n\t\ttar -xzf libsodium-${Libsodiumr_ver}.tar.gz\n\t\tcd libsodium-${Libsodiumr_ver}\n\t\techo -e \"${Info} 编译安装...\"\n\t\t./configure --disable-maintainer-mode\n\t\tmake -j2\n\t\tmake install\n\t\techo /usr/local/lib > /etc/ld.so.conf.d/usr_local_lib.conf\n\telse\n\t\tapt-get update\n\t\techo -e \"${Info} 安装依赖...\"\n\t\tapt-get install -y build-essential\n\t\techo -e \"${Info} 下载...\"\n\t\twget  --no-check-certificate -N \"https://github.com/jedisct1/libsodium/releases/download/${Libsodiumr_ver}-RELEASE/libsodium-${Libsodiumr_ver}.tar.gz\"\n\t\techo -e \"${Info} 解压...\"\n\t\ttar -xzf libsodium-${Libsodiumr_ver}.tar.gz\n\t\tcd libsodium-${Libsodiumr_ver}\n\t\techo -e \"${Info} 编译安装...\"\n\t\t./configure --disable-maintainer-mode\n\t\tmake -j2\n\t\tmake install\n\tfi\n\tldconfig\n\tcd ..\n\trm -rf libsodium-${Libsodiumr_ver}.tar.gz\n\trm -rf libsodium-${Libsodiumr_ver}\n\t[[ ! -e ${Libsodiumr_file} ]] && echo -e \"${Error} libsodium 安装失败 !\" && exit 1\n\techo && echo -e \"${Info} libsodium 安装成功 !\" && echo\n}\naction=$1\n[[ -z $1 ]] && action=install\ncase \"$action\" in\n\tinstall)\n\tInstall_Libsodium\n\t;;\n    *)\n    echo \"输入错误 !\"\n    echo \"用法: [ install ]\"\n    ;;\nesac\n"
        },
        {
          "name": "lightsocks.sh",
          "type": "blob",
          "size": 22.755859375,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: Lightsocks\n#\tVersion: 1.0.1\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/lightsocks-jc1/\n#=================================================\n\nsh_ver=\"1.0.1\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile_1=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\nfile=\"/usr/local/lightsocks\"\nlightsocks_file=\"/usr/local/lightsocks/lightsocks\"\nlightsocks_conf=$(echo ${HOME})\"/.lightsocks.json\"\nlightsocks_log=\"/usr/local/lightsocks/lightsocks.log\"\nCrontab_file=\"/usr/bin/crontab\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前非ROOT账号(或没有ROOT权限)，无法继续操作，请更换ROOT账号或使用 ${Green_background_prefix}sudo su${Font_color_suffix} 命令获取临时ROOT权限（执行后可能会提示输入当前账号的密码）。\" && exit 1\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_installed_status(){\n\t[[ ! -e ${lightsocks_file} ]] && echo -e \"${Error} Lightsocks 没有安装，请检查 !\" && exit 1\n}\ncheck_crontab_installed_status(){\n\tif [[ ! -e ${Crontab_file} ]]; then\n\t\techo -e \"${Error} Crontab 没有安装，开始安装...\" && exit 1\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum install crond -y\n\t\telse\n\t\t\tapt-get install cron -y\n\t\tfi\n\t\tif [[ ! -e ${Crontab_file} ]]; then\n\t\t\techo -e \"${Error} Crontab 安装失败，请检查！\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} Crontab 安装成功！\"\n\t\tfi\n\tfi\n}\ncheck_pid(){\n\tPID=`ps -ef| grep \"lightsocks\"| grep -v \"grep\" | grep -v \"lightsocks.sh\"| grep -v \"init.d\" |grep -v \"service\" |awk '{print $2}'`\n}\ncheck_new_ver(){\n\tlightsocks_new_ver=$(wget --no-check-certificate -qO- https://github.com/gwuhaolin/lightsocks/releases/latest | grep \"<title>\" | sed -r 's/.*Release (.+) · gwuhaolin.*/\\1/')\n\tif [[ -z ${lightsocks_new_ver} ]]; then\n\t\techo -e \"${Error} Lightsocks 最新版本获取失败，请手动获取最新版本号[ https://github.com/gwuhaolin/lightsocks/releases/latest ]\"\n\t\tread -e -p \"请输入版本号 [ 格式是日期 , 如 1.0.6 ] :\" lightsocks_new_ver\n\t\t[[ -z \"${lightsocks_new_ver}\" ]] && echo \"取消...\" && exit 1\n\telse\n\t\techo -e \"${Info} 检测到 Lightsocks 最新版本为 [ ${lightsocks_new_ver} ]\"\n\tfi\n}\ncheck_ver_comparison(){\n\tcheck_pid\n\t[[ ! -z $PID ]] && kill -9 ${PID}\n\trm -rf ${lightsocks_file}\n\tDownload_lightsocks\n\tStart_lightsocks\n}\nDownload_lightsocks(){\n\tcd ${file}\n\tif [ ${bit} == \"x86_64\" ]; then\n\t\twget --no-check-certificate -N \"https://github.com/gwuhaolin/lightsocks/releases/download/${lightsocks_new_ver}/lightsocks_${lightsocks_new_ver}_linux_amd64.tar.gz\"\n\t\tmv \"lightsocks_${lightsocks_new_ver}_linux_amd64.tar.gz\" \"lightsocks_linux.tar.gz\"\n\telse\n\t\twget --no-check-certificate -N \"https://github.com/gwuhaolin/lightsocks/releases/download/${lightsocks_new_ver}/lightsocks_${lightsocks_new_ver}_linux_386.tar.gz\"\n\t\tmv \"lightsocks_${lightsocks_new_ver}_linux_386.tar.gz\" \"lightsocks_linux.tar.gz\"\n\tfi\n\t[[ ! -s \"lightsocks_linux.tar.gz\" ]] && echo -e \"${Error} Lightsocks 压缩包下载失败 !\" && rm -rf \"${file}\" && exit 1\n\ttar -xzf \"lightsocks_linux.tar.gz\"\n\trm -rf lightsocks_linux.tar.gz\n\t[[ ! -e \"lightsocks-server\" ]] && echo -e \"${Error} Lightsocks 压缩包解压失败 !\" && rm -rf \"${file}\" && exit 1\n\tmv lightsocks-server lightsocks\n\tchmod +x lightsocks\n\trm -rf lightsocks-local\n\trm -rf LICENSE\n\trm -rf readme.md\n}\nService_lightsocks(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/lightsocks_centos\" -O /etc/init.d/lightsocks; then\n\t\t\techo -e \"${Error} Lightsocks服务 管理脚本下载失败 !\" && rm -rf \"${file}\" && exit 1\n\t\tfi\n\t\tchmod +x \"/etc/init.d/lightsocks\"\n\t\tchkconfig --add lightsocks\n\t\tchkconfig lightsocks on\n\telse\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/lightsocks_debian\" -O /etc/init.d/lightsocks; then\n\t\t\techo -e \"${Error} Lightsocks服务 管理脚本下载失败 !\" && rm -rf \"${file}\" && exit 1\n\t\tfi\n\t\tchmod +x \"/etc/init.d/lightsocks\"\n\t\tupdate-rc.d -f lightsocks defaults\n\tfi\n\techo -e \"${Info} Lightsocks服务 管理脚本下载完成 !\"\n}\nInstallation_dependency(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tCentos_yum\n\telse\n\t\tDebian_apt\n\tfi\n\tcp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\tmkdir ${file}\n}\nCentos_yum(){\n\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\tif [[ $? = 0 ]]; then\n\t\tyum update\n\t\tyum install -y net-tools\n\tfi\n}\nDebian_apt(){\n\tcat /etc/issue |grep 9\\..*>/dev/null\n\tif [[ $? = 0 ]]; then\n\t\tapt-get update\n\t\tapt-get install -y net-tools\n\tfi\n}\nGenerate_the_port(){\n\tmin=$1\n\tmax=$(($2-$min+1))\n\tnum=$(date +%s%N)\n\techo $(($num%$max+$min))\n}\nWrite_config(){\n\tcat > ${lightsocks_conf}<<-EOF\n{\n\t\"listen\": \":${ls_port}\",\n\t\"remote\": \"\"\n}\nEOF\n}\nRead_config(){\n\t[[ ! -e ${lightsocks_conf} ]] && echo -e \"${Error} Lightsocks 配置文件不存在 !\" && exit 1\n\tuser_all=$(cat ${lightsocks_conf}|sed \"1d;$d\")\n\t[[ -z ${user_all} ]] && echo -e \"${Error} Lightsocks 配置文件中用户配置为空 !\" && exit 1\n\tport=$(echo \"${user_all}\"|grep \"listen\"|awk -F ': ' '{print $NF}'|sed 's/\\\"//g;s/://g;s/,//g')\n\tpassword=$(echo \"${user_all}\"|grep \"password\"|awk -F ': ' '{print $NF}'|sed 's/\\\"//g')\n}\nSet_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 Lightsocks 端口 [1-65535]（端口不能重复，避免冲突）\"\n\t\tread -e -p \"(默认: 随机端口):\" ls_port\n\t\t[[ -z \"${ls_port}\" ]] && ls_port=$(Generate_the_port 443 65500)\n\t\techo $((${ls_port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${ls_port} -ge 1 ]] && [[ ${ls_port} -le 65535 ]]; then\n\t\t\t\techo && echo \"========================\"\n\t\t\t\techo -e \"\t端口 : ${Red_background_prefix} ${ls_port} ${Font_color_suffix}\"\n\t\t\t\techo \"========================\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\t\tdone\n}\nSet_lightsocks(){\n\tcheck_installed_status\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix}  修改 端口配置\n ${Green_font_prefix}2.${Font_color_suffix}  修改 密码配置\n————————————————\n ${Green_font_prefix}3.${Font_color_suffix}  监控 运行状态\n \n ${Tip} 因为 Lightsocks 限制，所以密码只能自动生成 !\" && echo\n\tread -e -p \"(默认: 取消):\" ls_modify\n\t[[ -z \"${ls_modify}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${ls_modify} == \"1\" ]]; then\n\t\tModify_user \"port\"\n\telif [[ ${ls_modify} == \"2\" ]]; then\n\t\tModify_user \"password\"\n\telif [[ ${ls_modify} == \"3\" ]]; then\n\t\tSet_crontab_monitor_lightsocks\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-2)\" && exit 1\n\tfi\n}\nModify_user(){\n\tRead_config\n\tModify_user_type=$1\n\tif [[ ${Modify_user_type} == \"port\" ]]; then\n\t\tSet_port\n\t\tModify_config_port\n\t\tDel_iptables\n\t\tAdd_iptables\n\t\tSave_iptables\n\telse\n\t\tModify_config_password\n\tfi\n\tRestart_lightsocks\n}\nModify_config_port(){\n\tsed -i 's/\"listen\": \":'\"$(echo ${port})\"'\"/\"listen\": \":'\"$(echo ${ls_port})\"'\"/g' ${lightsocks_conf}\n}\nModify_config_password(){\n\tRead_config\n\tpassword_num=$(cat \"${lightsocks_conf}\"|grep -n '\"password\":'|awk -F ':' '{print $1}')\n\tif [[ ${password_num} -gt 0 ]];then\n\t\tsed -i \"${password_num}d\" ${lightsocks_conf}\n\t\tpassword_num_1=$(echo $((${password_num}-1)))\n\t\tsed -i \"${password_num_1}s/,//g\" ${lightsocks_conf}\n\telse\n\t\techo -e \"${Error} 配置文件修改错误！\"\n\tfi\n}\nInstall_lightsocks(){\n\tcheck_root\n\t[[ -e ${lightsocks_file} ]] && echo -e \"${Error} 检测到 Lightsocks 已安装 !\" && exit 1\n\techo -e \"${Info} 开始设置 用户配置...\"\n\tSet_port\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始检测最新版本...\"\n\tcheck_new_ver\n\techo -e \"${Info} 开始下载/安装...\"\n\tDownload_lightsocks\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService_lightsocks\n\techo -e \"${Info} 开始写入 配置文件...\"\n\tWrite_config\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart_lightsocks\n}\nStart_lightsocks(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} Lightsocks 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/lightsocks start\n\tsleep 1s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View_lightsocks\n}\nStop_lightsocks(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} Lightsocks 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/lightsocks stop\n}\nRestart_lightsocks(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/lightsocks stop\n\t/etc/init.d/lightsocks start\n\tsleep 1s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View_lightsocks\n}\nUpdate_lightsocks(){\n\tcheck_installed_status\n\tcheck_new_ver\n\tcheck_ver_comparison\n}\nUninstall_lightsocks(){\n\tcheck_installed_status\n\techo \"确定要卸载 Lightsocks ? (y/N)\"\n\techo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tif [[ -e ${lightsocks_conf} ]]; then\n\t\t\tRead_config\n\t\t\tDel_iptables\n\t\t\tSave_iptables\n\t\t\trm -rf \"${lightsocks_conf}\"\n\t\tfi\n\t\trm -rf \"${file}\"\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del lightsocks\n\t\telse\n\t\t\tupdate-rc.d -f lightsocks remove\n\t\tfi\n\t\trm -rf \"/etc/init.d/lightsocks\"\n\t\techo && echo \"Lightsocks 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nView_lightsocks(){\n\tcheck_installed_status\n\tRead_config\n\tip=$(wget -qO- -t1 -T2 ipinfo.io/ip)\n\tif [[ -z \"${ip}\" ]]; then\n\t\tip=$(wget -qO- -t1 -T2 api.ip.sb/ip)\n\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\tip=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\t\tip=\"VPS_IP\"\n\t\t\tfi\n\t\tfi\n\tfi\n\tclear && echo\n\techo -e \"Lightsocks 用户配置：\"\n\t\tlightsocks_link\n\t\techo -e \"————————————————\"\n\t\techo -e \" 地址\\t: ${Green_font_prefix}${ip}${Font_color_suffix}\"\n\t\techo -e \" 端口\\t: ${Green_font_prefix}${port}${Font_color_suffix}\"\n\t\techo -e \" 密码\\t: ${Green_font_prefix}${password}${Font_color_suffix}\"\n\t\techo -e \"${Lightsocks_link_1}\"\n\techo\n\techo -e \"${Tip} Lightsocks链接 仅适用于Windows系统的 Lightsocks Tools客户端[https://doub.io/dbrj-12/]。\"\n\techo\n}\nurlsafe_base64(){\n\tdate=$(echo -n \"$1\"|base64|sed ':a;N;s/\\n//g;s/=//g;s/+/-/g;s/\\//_/g;ta')\n\techo -e \"${date}\"\n}\nlightsocks_link(){\n\tLightsocks_URL_1=$(urlsafe_base64 \"${ip}:${port}:${password}\")\n\tLightsocks_URL=\"lightsocks://${Lightsocks_URL_1}\"\n\tLightsocks_QRcode=\"http://doub.pw/qr/qr.php?text=${Lightsocks_URL}\"\n\tLightsocks_link_1=\" 链接\\t: ${Red_font_prefix}${Lightsocks_URL}${Font_color_suffix} \\n 二维码 : ${Red_font_prefix}${Lightsocks_QRcode}${Font_color_suffix} \\n \"\n}\nView_Log(){\n\tcheck_installed_status\n\t[[ ! -e ${lightsocks_log} ]] && echo -e \"${Error} Lightsocks 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志(正常情况下是没有多少日志输出的)\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${lightsocks_log}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${lightsocks_log}\n}\n# 显示 连接信息\ndebian_View_user_connection_info(){\n\tformat_1=$1\n\tRead_config\n\tIP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'lightsocks' |grep 'tcp6' |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\" |wc -l`\n\techo -e \"链接IP总数: ${Green_background_prefix} \"${IP_total}\" ${Font_color_suffix} \"\n\tuser_IP_1=`netstat -anp |grep 'ESTABLISHED' |grep 'lightsocks' |grep 'tcp6' |grep \":${port} \" |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\"`\n\tif [[ -z ${user_IP_1} ]]; then\n\t\tuser_IP_total=\"0\"\n\t\techo -e \"端口: ${Green_font_prefix}\"${port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\telse\n\t\tuser_IP_total=`echo -e \"${user_IP_1}\"|wc -l`\n\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\t\t\tget_IP_address\n\t\t\techo\n\t\telse\n\t\t\tuser_IP=$(echo -e \"\\n${user_IP_1}\")\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\tfi\n\tfi\n}\ncentos_View_user_connection_info(){\n\tformat_1=$1\n\tRead_config\n\tIP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'lightsocks' |grep 'tcp' | grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\" |wc -l`\n\techo -e \"链接IP总数: ${Green_background_prefix} \"${IP_total}\" ${Font_color_suffix} \"\n\tuser_IP_1=`netstat -anp |grep 'ESTABLISHED' |grep 'lightsocks' |grep 'tcp' |grep \":${port} \"|grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\"`\n\tif [[ -z ${user_IP_1} ]]; then\n\t\tuser_IP_total=\"0\"\n\t\techo -e \"端口: ${Green_font_prefix}\"${port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\telse\n\t\tuser_IP_total=`echo -e \"${user_IP_1}\"|wc -l`\n\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\t\t\tget_IP_address\n\t\t\techo\n\t\telse\n\t\t\tuser_IP=$(echo -e \"\\n${user_IP_1}\")\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\tfi\n\tfi\n}\nView_user_connection_info(){\n\tcheck_installed_status\n\techo && echo -e \"请选择要显示的格式：\n ${Green_font_prefix}1.${Font_color_suffix} 显示 IP 格式\n ${Green_font_prefix}2.${Font_color_suffix} 显示 IP+IP归属地 格式\" && echo\n\tread -e -p \"(默认: 1):\" lightsocks_connection_info\n\t[[ -z \"${lightsocks_connection_info}\" ]] && lightsocks_connection_info=\"1\"\n\tif [[ \"${lightsocks_connection_info}\" == \"1\" ]]; then\n\t\tView_user_connection_info_1 \"\"\n\telif [[ \"${lightsocks_connection_info}\" == \"2\" ]]; then\n\t\techo -e \"${Tip} 检测IP归属地(ipip.net)，如果IP较多，可能时间会比较长...\"\n\t\tView_user_connection_info_1 \"IP_address\"\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-2)\" && exit 1\n\tfi\n}\nView_user_connection_info_1(){\n\tformat=$1\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\t\tif [[ $? = 0 ]]; then\n\t\t\tdebian_View_user_connection_info \"$format\"\n\t\telse\n\t\t\tcentos_View_user_connection_info \"$format\"\n\t\tfi\n\telse\n\t\tdebian_View_user_connection_info \"$format\"\n\tfi\n}\nget_IP_address(){\n\t#echo \"user_IP_1=${user_IP_1}\"\n\tif [[ ! -z ${user_IP_1} ]]; then\n\t#echo \"user_IP_total=${user_IP_total}\"\n\t\tfor((integer_1 = ${user_IP_total}; integer_1 >= 1; integer_1--))\n\t\tdo\n\t\t\tIP=$(echo \"${user_IP_1}\" |sed -n \"$integer_1\"p)\n\t\t\t#echo \"IP=${IP}\"\n\t\t\tIP_address=$(wget -qO- -t1 -T2 http://freeapi.ipip.net/${IP}|sed 's/\\\"//g;s/,//g;s/\\[//g;s/\\]//g')\n\t\t\t#echo \"IP_address=${IP_address}\"\n\t\t\t#user_IP=\"${user_IP}\\n${IP}(${IP_address})\"\n\t\t\techo -e \"${Green_font_prefix}${IP}${Font_color_suffix} (${IP_address})\"\n\t\t\t#echo \"user_IP=${user_IP}\"\n\t\t\tsleep 1s\n\t\tdone\n\tfi\n}\nSet_crontab_monitor_lightsocks(){\n\tcheck_crontab_installed_status\n\tcrontab_monitor_lightsocks_status=$(crontab -l|grep \"lightsocks.sh monitor\")\n\tif [[ -z \"${crontab_monitor_lightsocks_status}\" ]]; then\n\t\techo && echo -e \"当前监控模式: ${Green_font_prefix}未开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要开启 ${Green_font_prefix}Lightsocks 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动SSR服务端)[Y/n]\"\n\t\tread -e -p \"(默认: y):\" crontab_monitor_lightsocks_status_ny\n\t\t[[ -z \"${crontab_monitor_lightsocks_status_ny}\" ]] && crontab_monitor_lightsocks_status_ny=\"y\"\n\t\tif [[ ${crontab_monitor_lightsocks_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_lightsocks_cron_start\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"当前监控模式: ${Green_font_prefix}已开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要关闭 ${Green_font_prefix}Lightsocks 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动SSR服务端)[y/N]\"\n\t\tread -e -p \"(默认: n):\" crontab_monitor_lightsocks_status_ny\n\t\t[[ -z \"${crontab_monitor_lightsocks_status_ny}\" ]] && crontab_monitor_lightsocks_status_ny=\"n\"\n\t\tif [[ ${crontab_monitor_lightsocks_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_lightsocks_cron_stop\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\ncrontab_monitor_lightsocks_cron_start(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/lightsocks.sh monitor/d\" \"$file_1/crontab.bak\"\n\techo -e \"\\n* * * * * /bin/bash $file_1/lightsocks.sh monitor\" >> \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"lightsocks.sh monitor\")\n\tif [[ -z ${cron_config} ]]; then\n\t\techo -e \"${Error} Lightsocks 服务端运行状态监控功能 启动失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} Lightsocks 服务端运行状态监控功能 启动成功 !\"\n\tfi\n}\ncrontab_monitor_lightsocks_cron_stop(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/lightsocks.sh monitor/d\" \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"lightsocks.sh monitor\")\n\tif [[ ! -z ${cron_config} ]]; then\n\t\techo -e \"${Error} Lightsocks 服务端运行状态监控功能 停止失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} Lightsocks 服务端运行状态监控功能 停止成功 !\"\n\tfi\n}\ncrontab_monitor_lightsocks(){\n\tcheck_installed_status\n\tcheck_pid\n\techo \"${PID}\"\n\tif [[ -z ${PID} ]]; then\n\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] 检测到 Lightsocks服务端 未运行 , 开始启动...\" | tee -a ${lightsocks_log}\n\t\t/etc/init.d/lightsocks start\n\t\tsleep 1s\n\t\tcheck_pid\n\t\tif [[ -z ${PID} ]]; then\n\t\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Lightsocks服务端 启动失败...\" | tee -a ${lightsocks_log}\n\t\telse\n\t\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Lightsocks服务端 启动成功...\" | tee -a ${lightsocks_log}\n\t\tfi\n\telse\n\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Lightsocks服务端 进程运行正常...\" | tee -a ${lightsocks_log}\n\tfi\n}\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${ls_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${ls_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/lightsocks.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/lightsocks\" ]]; then\n\t\trm -rf /etc/init.d/lightsocks\n\t\tService_lightsocks\n\tfi\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/lightsocks.sh\" && chmod +x lightsocks.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\ncheck_sys\naction=$1\nif [[ \"${action}\" == \"monitor\" ]]; then\n\tcrontab_monitor_lightsocks\nelse\n\techo && echo -e \"  Lightsocks 一键管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  ---- Toyo | doub.io/lightsocks-jc1 ----\n  \n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 Lightsocks\n ${Green_font_prefix} 2.${Font_color_suffix} 升级 Lightsocks\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 Lightsocks\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 Lightsocks\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 Lightsocks\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 Lightsocks\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 设置 账号配置\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 账号信息\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 日志信息\n ${Green_font_prefix}10.${Font_color_suffix} 查看 链接信息\n————————————\" && echo\n\tif [[ -e ${lightsocks_file} ]]; then\n\t\tcheck_pid\n\t\tif [[ ! -z \"${PID}\" ]]; then\n\t\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\t\telse\n\t\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\t\tfi\n\telse\n\t\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\n\tfi\n\techo\n\tread -e -p \" 请输入数字 [0-10]:\" num\n\tcase \"$num\" in\n\t\t0)\n\t\tUpdate_Shell\n\t\t;;\n\t\t1)\n\t\tInstall_lightsocks\n\t\t;;\n\t\t2)\n\t\tUpdate_lightsocks\n\t\t;;\n\t\t3)\n\t\tUninstall_lightsocks\n\t\t;;\n\t\t4)\n\t\tStart_lightsocks\n\t\t;;\n\t\t5)\n\t\tStop_lightsocks\n\t\t;;\n\t\t6)\n\t\tRestart_lightsocks\n\t\t;;\n\t\t7)\n\t\tSet_lightsocks\n\t\t;;\n\t\t8)\n\t\tView_lightsocks\n\t\t;;\n\t\t9)\n\t\tView_Log\n\t\t;;\n\t\t10)\n\t\tView_user_connection_info\n\t\t;;\n\t\t*)\n\t\techo \"请输入正确数字 [0-10]\"\n\t\t;;\n\tesac\nfi"
        },
        {
          "name": "mtproxy.sh",
          "type": "blob",
          "size": 30.736328125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: MTProxy\n#\tVersion: 1.0.8\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/shell-jc7/\n#=================================================\n\nsh_ver=\"1.0.8\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile_1=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\nfile=\"/usr/local/mtproxy\"\nmtproxy_file=\"/usr/local/mtproxy/mtproto-proxy\"\nmtproxy_conf=\"/usr/local/mtproxy/mtproxy.conf\"\nmtproxy_log=\"/usr/local/mtproxy/mtproxy.log\"\nmtproxy_secret=\"/usr/local/mtproxy/proxy-secret\"\nmtproxy_multi=\"/usr/local/mtproxy/proxy-multi.conf\"\nCrontab_file=\"/usr/bin/crontab\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前非ROOT账号(或没有ROOT权限)，无法继续操作，请更换ROOT账号或使用 ${Green_background_prefix}sudo su${Font_color_suffix} 命令获取临时ROOT权限（执行后可能会提示输入当前账号的密码）。\" && exit 1\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\t#bit=`uname -m`\n}\ncheck_installed_status(){\n\t[[ ! -e ${mtproxy_file} ]] && echo -e \"${Error} MTProxy 没有安装，请检查 !\" && exit 1\n}\ncheck_crontab_installed_status(){\n\tif [[ ! -e ${Crontab_file} ]]; then\n\t\techo -e \"${Error} Crontab 没有安装，开始安装...\"\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum install crond -y\n\t\telse\n\t\t\tapt-get install cron -y\n\t\tfi\n\t\tif [[ ! -e ${Crontab_file} ]]; then\n\t\t\techo -e \"${Error} Crontab 安装失败，请检查！\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} Crontab 安装成功！\"\n\t\tfi\n\tfi\n}\ncheck_pid(){\n\tPID=`ps -ef| grep \"./mtproto-proxy \"| grep -v \"grep\" | grep -v \"init.d\" |grep -v \"service\" |awk '{print $2}'`\n}\nDownload_mtproxy(){\n\tmkdir '/tmp/mtproxy'\n\tcd '/tmp/mtproxy'\n\t# wget -N --no-check-certificate \"https://github.com/TelegramMessenger/MTProxy/archive/master.zip\"\n\tgit clone https://github.com/TelegramMessenger/MTProxy.git\n\t[[ ! -e \"MTProxy/\" ]] && echo -e \"${Error} MTProxy 下载失败!\" && cd '/tmp' && rm -rf '/tmp/mtproxy' && exit 1\n\tcd MTProxy\n\tmake\n\t[[ ! -e \"objs/bin/mtproto-proxy\" ]] && echo -e \"${Error} MTProxy 编译失败!\" && echo -e \"另外，如果在上面几行看到 ${Green_font_prefix}xxxxx option \\\"-std=gnu11\\\"${Font_color_suffix} 字样，说明是系统版本过低，请尝试更换系统重试！\" && make clean && cd '/tmp' && rm -rf '/tmp/mtproxy' && exit 1\n\t[[ ! -e \"${file}\" ]] && mkdir \"${file}\"\n\t\\cp -f objs/bin/mtproto-proxy \"${file}\"\n\tchmod +x \"${mtproxy_file}\"\n\tcd '/tmp'\n\trm -rf '/tmp/mtproxy'\n}\nDownload_secret(){\n\t[[ -e \"${mtproxy_secret}\" ]] && rm -rf \"${mtproxy_secret}\"\n\twget --no-check-certificate -q \"https://core.telegram.org/getProxySecret\" -O \"${mtproxy_secret}\"\n\t[[ ! -e \"${mtproxy_secret}\" ]] && echo -e \"${Error} MTProxy Secret下载失败! 脚本将会继续安装但会启动失败，请尝试手动下载：${Green_font_prefix}wget --no-check-certificate -q \\\"https://core.telegram.org/getProxySecret\\\" -O \\\"${mtproxy_secret}\\\"${Font_color_suffix}\"\n\techo -e \"${Info} MTProxy Secret下载成功!\"\n}\nDownload_multi(){\n\t[[ -e \"${mtproxy_multi}\" ]] && rm -rf \"${mtproxy_multi}\"\n\twget --no-check-certificate -q \"https://core.telegram.org/getProxyConfig\" -O \"${mtproxy_multi}\"\n\t[[ ! -e \"${mtproxy_multi}\" ]] && echo -e \"${Error} MTProxy Multi下载失败!脚本将会继续安装但会启动失败，请尝试手动下载：${Green_font_prefix}wget --no-check-certificate -q \\\"https://core.telegram.org/getProxyConfig\\\" -O \\\"${mtproxy_multi}\\\"${Font_color_suffix}\"\n\techo -e \"${Info} MTProxy Secret下载成功!\"\n}\nService_mtproxy(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/mtproxy_centos\" -O /etc/init.d/mtproxy; then\n\t\t\techo -e \"${Error} MTProxy服务 管理脚本下载失败 !\"\n\t\t\trm -rf \"${file}\"\n\t\t\texit 1\n\t\tfi\n\t\tchmod +x \"/etc/init.d/mtproxy\"\n\t\tchkconfig --add mtproxy\n\t\tchkconfig mtproxy on\n\telse\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/mtproxy_debian\" -O /etc/init.d/mtproxy; then\n\t\t\techo -e \"${Error} MTProxy服务 管理脚本下载失败 !\"\n\t\t\trm -rf \"${file}\"\n\t\t\texit 1\n\t\tfi\n\t\tchmod +x \"/etc/init.d/mtproxy\"\n\t\tupdate-rc.d -f mtproxy defaults\n\tfi\n\techo -e \"${Info} MTProxy服务 管理脚本下载完成 !\"\n}\nInstallation_dependency(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tCentos_yum\n\telse\n\t\tDebian_apt\n\tfi\n\t\\cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n}\nCentos_yum(){\n\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\tyum update\n\tif [[ $? = 0 ]]; then\n\t\tyum install -y openssl-devel zlib-devel git\n\telse\n\t\tyum install -y openssl-devel zlib-devel git\n\tfi\n\tyum groupinstall \"Development Tools\" -y\n}\nDebian_apt(){\n\tcat /etc/issue |grep 9\\..*>/dev/null\n\tapt-get update\n\tif [[ $? = 0 ]]; then\n\t\tapt-get install -y build-essential libssl-dev zlib1g-dev git\n\telse\n\t\tapt-get install -y build-essential libssl-dev zlib1g-dev git\n\tfi\n}\nWrite_config(){\n\tcat > ${mtproxy_conf}<<-EOF\nPORT = ${mtp_port}\nPASSWORD = ${mtp_passwd}\nTAG = ${mtp_tag}\nNAT = ${mtp_nat}\nEOF\n}\nRead_config(){\n\t[[ ! -e ${mtproxy_conf} ]] && echo -e \"${Error} MTProxy 配置文件不存在 !\" && exit 1\n\tport=$(cat ${mtproxy_conf}|grep 'PORT = '|awk -F 'PORT = ' '{print $NF}')\n\tpasswd=$(cat ${mtproxy_conf}|grep 'PASSWORD = '|awk -F 'PASSWORD = ' '{print $NF}')\n\ttag=$(cat ${mtproxy_conf}|grep 'TAG = '|awk -F 'TAG = ' '{print $NF}')\n\tnat=$(cat ${mtproxy_conf}|grep 'NAT = '|awk -F 'NAT = ' '{print $NF}')\n}\nSet_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 MTProxy 端口 [1-65535]\"\n\t\tread -e -p \"(默认: 443):\" mtp_port\n\t\t[[ -z \"${mtp_port}\" ]] && mtp_port=\"443\"\n\t\techo $((${mtp_port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${mtp_port} -ge 1 ]] && [[ ${mtp_port} -le 65535 ]]; then\n\t\t\t\techo && echo \"========================\"\n\t\t\t\techo -e \"\t端口 : ${Red_background_prefix} ${mtp_port} ${Font_color_suffix}\"\n\t\t\t\techo \"========================\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\t\tdone\n}\nSet_passwd(){\n\twhile true\n\t\tdo\n\t\techo \"请输入 MTProxy 密匙（手动输入必须为32位，[0-9][a-z][A-Z]，建议随机生成）\"\n\t\tread -e -p \"(避免出错，强烈推荐随机生成，直接回车):\" mtp_passwd\n\t\tif [[ -z \"${mtp_passwd}\" ]]; then\n\t\t\tmtp_passwd=$(date +%s%N | md5sum | head -c 32)\n\t\telse\n\t\t\t[[ ${#mtp_passwd} != 32 ]] && echo -e \"${Error} 请输入正确的密匙（32位字符）。\" && continue\n\t\tfi\n\t\techo && echo \"========================\"\n\t\techo -e \"\t密码 : ${Red_background_prefix} dd${mtp_passwd} ${Font_color_suffix}\"\n\t\techo \"========================\" && echo\n\t\tbreak\n\tdone\n}\nSet_tag(){\n\techo \"请输入 MTProxy 的 TAG标签（TAG标签必须是32位，TAG标签只有在通过官方机器人 @MTProxybot 分享代理账号后才会获得，不清楚请留空回车）\"\n\tread -e -p \"(默认：回车跳过):\" mtp_tag\n\tif [[ ! -z \"${mtp_tag}\" ]]; then\n\t\techo && echo \"========================\"\n\t\techo -e \"\tTAG : ${Red_background_prefix} ${mtp_tag} ${Font_color_suffix}\"\n\t\techo \"========================\" && echo\n\tfi\n}\nSet_nat(){\n\techo -e \"\\n=== 当前服务器所有网卡信息：\\n\"\n\tif [[ -e \"/sbin/ip\" ]]; then\n\t\tip addr show\n\telse\n\t\tifconfig\n\tfi\n\techo -e \"\\n== 解释：网卡名 lo 指的是本机，请无视。\n== 解释：一般情况下，主网卡名为 eth0，Debian9系统为 ens3，CentOS Ubuntu最新系统可能为 enpXsX(X代表数字或字母)。OpenVZ 虚拟化为 venet0\\n\"\n\techo -e \"如果本机是NAT服务器（谷歌云、微软云、阿里云等，网卡绑定的IP为 10.xx.xx.xx 开头的），则请输入你的服务器内网IP，否则会导致无法使用。如果不是请直接回车！\"\n\tread -e -p \"(默认：回车跳过):\" mtp_nat\n\tif [[ -z \"${mtp_nat}\" ]]; then\n\t\tmtp_nat=\"\"\n\telse\n\t\tgetip\n\t\tmtp_nat=\"${mtp_nat}:${ip}\"\n\t\techo && echo \"========================\"\n\t\techo -e \"\tNAT : ${Red_background_prefix} ${mtp_nat} ${Font_color_suffix}\"\n\t\techo \"========================\" && echo\n\tfi\n}\nSet_mtproxy(){\n\tcheck_installed_status\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix} 1.${Font_color_suffix}  修改 端口配置\n ${Green_font_prefix} 2.${Font_color_suffix}  修改 密码配置\n ${Green_font_prefix} 3.${Font_color_suffix}  修改 TAG 配置\n ${Green_font_prefix} 4.${Font_color_suffix}  修改 NAT 配置\n ${Green_font_prefix} 5.${Font_color_suffix}  修改 全部配置\n————————————————\n ${Green_font_prefix} 6.${Font_color_suffix}  更新 Telegram IP段(无需频繁更新)\n ${Green_font_prefix} 7.${Font_color_suffix}  更新 Telegram 密匙(一般不用管)\n————————————————\n ${Green_font_prefix} 8.${Font_color_suffix}  定时 更新 Telegram IP段\n ${Green_font_prefix} 9.${Font_color_suffix}  监控 运行状态\n ${Green_font_prefix}10.${Font_color_suffix}  监控 外网IP变更\" && echo\n\tread -e -p \"(默认: 取消):\" mtp_modify\n\t[[ -z \"${mtp_modify}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ \"${mtp_modify}\" == \"1\" ]]; then\n\t\tRead_config\n\t\tSet_port\n\t\tmtp_passwd=${passwd}\n\t\tmtp_tag=${tag}\n\t\tmtp_nat=${nat}\n\t\tWrite_config\n\t\tDel_iptables\n\t\tAdd_iptables\n\t\tRestart_mtproxy\n\telif [[ \"${mtp_modify}\" == \"2\" ]]; then\n\t\tRead_config\n\t\tSet_passwd\n\t\tmtp_port=${port}\n\t\tmtp_tag=${tag}\n\t\tmtp_nat=${nat}\n\t\tWrite_config\n\t\tRestart_mtproxy\n\telif [[ \"${mtp_modify}\" == \"3\" ]]; then\n\t\tRead_config\n\t\tSet_tag\n\t\tmtp_port=${port}\n\t\tmtp_passwd=${passwd}\n\t\tmtp_nat=${nat}\n\t\tWrite_config\n\t\tRestart_mtproxy\n\telif [[ \"${mtp_modify}\" == \"4\" ]]; then\n\t\tRead_config\n\t\tSet_nat\n\t\tmtp_port=${port}\n\t\tmtp_passwd=${passwd}\n\t\tmtp_tag=${tag}\n\t\tWrite_config\n\t\tRestart_mtproxy\n\telif [[ \"${mtp_modify}\" == \"5\" ]]; then\n\t\tRead_config\n\t\tSet_port\n\t\tSet_passwd\n\t\tSet_tag\n\t\tSet_nat\n\t\tWrite_config\n\t\tRestart_mtproxy\n\telif [[ \"${mtp_modify}\" == \"6\" ]]; then\n\t\tUpdate_multi\n\telif [[ \"${mtp_modify}\" == \"7\" ]]; then\n\t\tUpdate_secret\n\telif [[ \"${mtp_modify}\" == \"8\" ]]; then\n\t\tSet_crontab_update_multi\n\telif [[ \"${mtp_modify}\" == \"9\" ]]; then\n\t\tSet_crontab_monitor_mtproxy\n\telif [[ \"${mtp_modify}\" == \"10\" ]]; then\n\t\tSet_crontab_monitorip\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-10)\" && exit 1\n\tfi\n}\nInstall_mtproxy(){\n\tcheck_root\n\t[[ -e ${mtproxy_file} ]] && echo -e \"${Error} 检测到 MTProxy 已安装 !\" && exit 1\n\techo -e \"${Info} 开始设置 用户配置...\"\n\tSet_port\n\tSet_passwd\n\tSet_tag\n\tSet_nat\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始下载/安装...\"\n\tDownload_mtproxy\n\tDownload_secret\n\tDownload_multi\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService_mtproxy\n\techo -e \"${Info} 开始写入 配置文件...\"\n\tWrite_config\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart_mtproxy\n}\nStart_mtproxy(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} MTProxy 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/mtproxy start\n\tsleep 1s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View_mtproxy\n}\nStop_mtproxy(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} MTProxy 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/mtproxy stop\n}\nRestart_mtproxy(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/mtproxy stop\n\t/etc/init.d/mtproxy start\n\tsleep 1s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View_mtproxy\n}\nUpdate_mtproxy(){\n\techo -e \"${Tip} 因为官方无最新版本号，所以无法对比版本，请自行判断是否需要更新。是否更新？[Y/n]\"\n\tread -e -p \"(默认: y):\" yn\n\t[[ -z \"${yn}\" ]] && yn=\"y\"\n\tif [[ ${yn} == [Yy] ]]; then\n\t\tcheck_installed_status\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && /etc/init.d/mtproxy stop\n\t\trm -rf ${mtproxy_file}\n\t\tDownload_mtproxy\n\t\techo -e \"${Info} MTProxy 更新完成...\"\n\t\tStart_mtproxy\n\tfi\n\t\n}\nUninstall_mtproxy(){\n\tcheck_installed_status\n\techo \"确定要卸载 MTProxy ? (y/N)\"\n\techo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tif [[ -e ${mtproxy_conf} ]]; then\n\t\t\tport=$(cat ${mtproxy_conf}|grep 'PORT = '|awk -F 'PORT = ' '{print $NF}')\n\t\t\tDel_iptables\n\t\t\tSave_iptables\n\t\tfi\n\t\tif [[ ! -z $(crontab -l | grep \"mtproxy.sh monitor\") ]]; then\n\t\t\tcrontab_monitor_mtproxy_cron_stop\n\t\tfi\n\t\tif [[ ! -z $(crontab -l | grep \"mtproxy.sh update\") ]]; then\n\t\t\tcrontab_update_mtproxy_cron_stop\n\t\tfi\n\t\trm -rf \"${file}\"\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del mtproxy\n\t\telse\n\t\t\tupdate-rc.d -f mtproxy remove\n\t\tfi\n\t\trm -rf \"/etc/init.d/mtproxy\"\n\t\techo && echo \"MTProxy 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\ngetip(){\n\tip=$(wget -qO- -t1 -T2 ipinfo.io/ip)\n\tif [[ -z \"${ip}\" ]]; then\n\t\tip=$(wget -qO- -t1 -T2 api.ip.sb/ip)\n\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\tip=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\t\tip=\"VPS_IP\"\n\t\t\tfi\n\t\tfi\n\tfi\n}\nView_mtproxy(){\n\tcheck_installed_status\n\tRead_config\n\tgetip\n\tclear && echo\n\techo -e \"Mtproto Proxy 用户配置：\"\n\techo -e \"————————————————\"\n\techo -e \" 地址\\t: ${Green_font_prefix}${ip}${Font_color_suffix}\"\n\techo -e \" 端口\\t: ${Green_font_prefix}${port}${Font_color_suffix}\"\n\techo -e \" 密匙\\t: ${Green_font_prefix}dd${passwd}${Font_color_suffix}\"\n\t[[ ! -z \"${nat}\" ]] && echo -e \" NAT \\t: ${Green_font_prefix}${nat}${Font_color_suffix}\"\n\t[[ ! -z \"${tag}\" ]] && echo -e \" TAG \\t: ${Green_font_prefix}${tag}${Font_color_suffix}\"\n\techo -e \" 链接\\t: ${Red_font_prefix}tg://proxy?server=${ip}&port=${port}&secret=dd${passwd}${Font_color_suffix}\"\n\techo -e \" 链接\\t: ${Red_font_prefix}https://t.me/proxy?server=${ip}&port=${port}&secret=dd${passwd}${Font_color_suffix}\"\n\techo\n\techo -e \" ${Red_font_prefix}注意\\t:${Font_color_suffix} 密匙头部的 ${Green_font_prefix}dd${Font_color_suffix} 字符是代表客户端启用${Green_font_prefix}随机填充混淆模式${Font_color_suffix}，如果不需要请手动删除。\\n     \\t  另外，在官方机器人处分享账号获取TAG标签时记得删除，获取TAG标签后分享时可以再加上。\"\n}\nView_Log(){\n\tcheck_installed_status\n\t[[ ! -e ${mtproxy_log} ]] && echo -e \"${Error} MTProxy 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${mtproxy_log}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${mtproxy_log}\n}\nUpdate_secret(){\n\trm -rf \"${mtproxy_secret}\"\n\tDownload_secret\n\tRestart_mtproxy\n}\nUpdate_multi(){\n\trm -rf \"${mtproxy_multi}\"\n\tDownload_multi\n\tRestart_mtproxy\n}\n# 显示 连接信息\ndebian_View_user_connection_info(){\n\tformat_1=$1\n\tRead_config\n\tuser_IP=`netstat -anp |grep 'ESTABLISHED' |grep 'mtproto' |grep 'tcp' |grep \":${port} \" |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\"`\n\tif [[ -z ${user_IP} ]]; then\n\t\tuser_IP_total=\"0\"\n\t\techo -e \"端口: ${Green_font_prefix}\"${port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\telse\n\t\tuser_IP_total=`echo -e \"${user_IP}\"|wc -l`\n\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\t\t\tget_IP_address\n\t\t\techo\n\t\telse\n\t\t\tuser_IP=$(echo -e \"\\n${user_IP}\")\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\tfi\n\tfi\n\tuser_IP=\"\"\n}\ncentos_View_user_connection_info(){\n\tformat_1=$1\n\tRead_config\n\tuser_IP=`netstat -anp |grep 'ESTABLISHED' |grep 'mtproto' |grep 'tcp' |grep \":${port} \"|awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\"`\n\tif [[ -z ${user_IP} ]]; then\n\t\tuser_IP_total=\"0\"\n\t\techo -e \"端口: ${Green_font_prefix}\"${port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\telse\n\t\tuser_IP_total=`echo -e \"${user_IP}\"|wc -l`\n\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\t\t\tget_IP_address\n\t\t\techo\n\t\telse\n\t\t\tuser_IP=$(echo -e \"\\n${user_IP}\")\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\tfi\n\tfi\n\tuser_IP=\"\"\n}\nView_user_connection_info(){\n\tcheck_installed_status\n\techo && echo -e \"请选择要显示的格式：\n ${Green_font_prefix}1.${Font_color_suffix} 显示 IP 格式\n ${Green_font_prefix}2.${Font_color_suffix} 显示 IP+IP归属地 格式\" && echo\n\tread -e -p \"(默认: 1):\" mtproxy_connection_info\n\t[[ -z \"${mtproxy_connection_info}\" ]] && mtproxy_connection_info=\"1\"\n\tif [[ \"${mtproxy_connection_info}\" == \"1\" ]]; then\n\t\tView_user_connection_info_1 \"\"\n\telif [[ \"${mtproxy_connection_info}\" == \"2\" ]]; then\n\t\techo -e \"${Tip} 检测IP归属地(ipip.net)，如果IP较多，可能时间会比较长...\"\n\t\tView_user_connection_info_1 \"IP_address\"\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-2)\" && exit 1\n\tfi\n}\nView_user_connection_info_1(){\n\tformat=$1\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\t\tif [[ $? = 0 ]]; then\n\t\t\tdebian_View_user_connection_info \"$format\"\n\t\telse\n\t\t\tcentos_View_user_connection_info \"$format\"\n\t\tfi\n\telse\n\t\tdebian_View_user_connection_info \"$format\"\n\tfi\n}\nget_IP_address(){\n\tif [[ ! -z ${user_IP} ]]; then\n\t\tfor((integer_1 = ${user_IP_total}; integer_1 >= 1; integer_1--))\n\t\tdo\n\t\t\tIP=$(echo \"${user_IP}\" |sed -n \"$integer_1\"p)\n\t\t\tIP_address=$(wget -qO- -t1 -T2 http://freeapi.ipip.net/${IP}|sed 's/\\\"//g;s/,//g;s/\\[//g;s/\\]//g')\n\t\t\techo -e \"${Green_font_prefix}${IP}${Font_color_suffix} (${IP_address})\"\n\t\t\tsleep 1s\n\t\tdone\n\tfi\n}\nSet_crontab_monitor_mtproxy(){\n\tcheck_crontab_installed_status\n\tcrontab_monitor_mtproxy_status=$(crontab -l|grep \"mtproxy.sh monitor\")\n\tif [[ -z \"${crontab_monitor_mtproxy_status}\" ]]; then\n\t\techo && echo -e \"当前监控运行状态模式: ${Red_font_prefix}未开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要开启 ${Green_font_prefix}MTProxy 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动 MTProxy 服务端)[Y/n]\"\n\t\tread -e -p \"(默认: y):\" crontab_monitor_mtproxy_status_ny\n\t\t[[ -z \"${crontab_monitor_mtproxy_status_ny}\" ]] && crontab_monitor_mtproxy_status_ny=\"y\"\n\t\tif [[ ${crontab_monitor_mtproxy_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_mtproxy_cron_start\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"当前监控运行状态模式: ${Green_font_prefix}已开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要关闭 ${Red_font_prefix}MTProxy 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动 MTProxy 服务端)[y/N]\"\n\t\tread -e -p \"(默认: n):\" crontab_monitor_mtproxy_status_ny\n\t\t[[ -z \"${crontab_monitor_mtproxy_status_ny}\" ]] && crontab_monitor_mtproxy_status_ny=\"n\"\n\t\tif [[ ${crontab_monitor_mtproxy_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_mtproxy_cron_stop\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\ncrontab_monitor_mtproxy_cron_start(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/mtproxy.sh monitor/d\" \"$file_1/crontab.bak\"\n\techo -e \"\\n* * * * * /bin/bash $file_1/mtproxy.sh monitor\" >> \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"mtproxy.sh monitor\")\n\tif [[ -z ${cron_config} ]]; then\n\t\techo -e \"${Error} MTProxy 服务端运行状态监控功能 启动失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} MTProxy 服务端运行状态监控功能 启动成功 !\"\n\tfi\n}\ncrontab_monitor_mtproxy_cron_stop(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/mtproxy.sh monitor/d\" \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"mtproxy.sh monitor\")\n\tif [[ ! -z ${cron_config} ]]; then\n\t\techo -e \"${Error} MTProxy 服务端运行状态监控功能 停止失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} MTProxy 服务端运行状态监控功能 停止成功 !\"\n\tfi\n}\ncrontab_monitor_mtproxy(){\n\tcheck_installed_status\n\tcheck_pid\n\t#echo \"${PID}\"\n\tif [[ -z ${PID} ]]; then\n\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] 检测到 MTProxy服务端 未运行 , 开始启动...\" | tee -a ${mtproxy_log}\n\t\t/etc/init.d/mtproxy start\n\t\tsleep 1s\n\t\tcheck_pid\n\t\tif [[ -z ${PID} ]]; then\n\t\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] MTProxy服务端 启动失败...\" | tee -a ${mtproxy_log}\n\t\telse\n\t\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] MTProxy服务端 启动成功...\" | tee -a ${mtproxy_log}\n\t\tfi\n\telse\n\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] MTProxy服务端 进程运行正常...\" | tee -a ${mtproxy_log}\n\tfi\n}\nSet_crontab_update_multi(){\n\tcheck_crontab_installed_status\n\tcrontab_update_mtproxy_status=$(crontab -l|grep \"mtproxy.sh update\")\n\tif [[ -z \"${crontab_update_mtproxy_status}\" ]]; then\n\t\techo && echo -e \"当前自动更新 Telegram IP段功能: ${Red_font_prefix}未开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要开启 ${Green_font_prefix}MTProxy 自动更新 Telegram IP段${Font_color_suffix} 功能吗？[Y/n]\"\n\t\tread -e -p \"(默认: y):\" crontab_update_mtproxy_status_ny\n\t\t[[ -z \"${crontab_update_mtproxy_status_ny}\" ]] && crontab_update_mtproxy_status_ny=\"y\"\n\t\tif [[ ${crontab_update_mtproxy_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_update_mtproxy_cron_start\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"当前自动更新 Telegram IP段功能: ${Green_font_prefix}已开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要关闭 ${Red_font_prefix}MTProxy 自动更新 Telegram IP段${Font_color_suffix} 功能吗？[y/N]\"\n\t\tread -e -p \"(默认: n):\" crontab_update_mtproxy_status_ny\n\t\t[[ -z \"${crontab_update_mtproxy_status_ny}\" ]] && crontab_update_mtproxy_status_ny=\"n\"\n\t\tif [[ ${crontab_update_mtproxy_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_update_mtproxy_cron_stop\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\ncrontab_update_mtproxy_cron_start(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/mtproxy.sh update/d\" \"$file_1/crontab.bak\"\n\techo -e \"\\n10 3 * * * /bin/bash $file_1/mtproxy.sh update\" >> \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"mtproxy.sh update\")\n\tif [[ -z ${cron_config} ]]; then\n\t\techo -e \"${Error} MTProxy 自动更新 Telegram IP段功能 启动失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} MTProxy 自动更新 Telegram IP段功能 启动成功 !\"\n\tfi\n}\ncrontab_update_mtproxy_cron_stop(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/mtproxy.sh update/d\" \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"mtproxy.sh update\")\n\tif [[ ! -z ${cron_config} ]]; then\n\t\techo -e \"${Error} MTProxy 自动更新 Telegram IP段功能 停止失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} MTProxy 自动更新 Telegram IP段功能 停止成功 !\"\n\tfi\n}\ncrontab_update_mtproxy(){\n\tcheck_installed_status\n\tcheck_pid\n\trm -rf \"${mtproxy_multi}\"\n\tDownload_multi\n\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Telegram IP段自动更新完成...\" | tee -a ${mtproxy_log}\n\t/etc/init.d/mtproxy restart\n}\nSet_crontab_monitorip(){\n\tcheck_crontab_installed_status\n\tcrontab_monitor_status=$(crontab -l|grep \"mtproxy.sh monitorip\")\n\tif [[ -z \"${crontab_monitor_status}\" ]]; then\n\t\techo && echo -e \"当前监控外网IP模式: ${Red_font_prefix}未开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要开启 ${Green_font_prefix}服务器外网IP变更监控${Font_color_suffix} 功能吗？(当服务器外网IP变化后，自动重新配置并重启服务端)[Y/n]\"\n\t\tread -e -p \"(默认: y):\" crontab_monitor_status_ny\n\t\t[[ -z \"${crontab_monitor_status_ny}\" ]] && crontab_monitor_status_ny=\"y\"\n\t\tif [[ ${crontab_monitor_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_cron_start2\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"当前监控外网IP模式: ${Green_font_prefix}已开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要关闭 ${Red_font_prefix}服务器外网IP变更监控${Font_color_suffix} 功能吗？(当服务器外网IP变化后，自动重新配置并重启服务端)[Y/n]\"\n\t\tread -e -p \"(默认: n):\" crontab_monitor_status_ny\n\t\t[[ -z \"${crontab_monitor_status_ny}\" ]] && crontab_monitor_status_ny=\"n\"\n\t\tif [[ ${crontab_monitor_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_cron_stop2\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\ncrontab_monitor_cron_start2(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/mtproxy.sh monitorip/d\" \"$file_1/crontab.bak\"\n\techo -e \"\\n* * * * * /bin/bash $file_1/mtproxy.sh monitorip\" >> \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"mtproxy.sh monitorip\")\n\tif [[ -z ${cron_config} ]]; then\n\t\techo -e \"${Error} 服务器外网IP变更监控功能 启动失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} 服务器外网IP变更监控功能 启动成功 !\"\n\tfi\n}\ncrontab_monitor_cron_stop2(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/mtproxy.sh monitorip/d\" \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"mtproxy.sh monitorip\")\n\tif [[ ! -z ${cron_config} ]]; then\n\t\techo -e \"${Error} 服务器外网IP变更监控功能 停止失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} 服务器外网IP变更监控功能 停止成功 !\"\n\tfi\n}\ncrontab_monitorip(){\n\tcheck_installed_status\n\tRead_config\n\tgetip\n\tipv4=$(echo \"${nat}\"|awk -F ':' '{print $2}')\n\tnat_ipv4=$(echo \"${nat}\"|awk -F ':' '{print $1}')\n\tif [[ \"${ip}\" != \"VPS_IP\" ]]; then\n\t\tif [[ \"${ip}\" != \"${ipv4}\" ]]; then\n\t\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] 检测到 服务器外网IP变更[旧: ${ipv4}，新: ${ip}], 开始重新配置并准备重启服务端...\" | tee -a ${mtproxy_log}\n\t\t\tmtp_nat=\"${nat_ipv4}:${ip}\"\n\t\t\tmtp_port=${port}\n\t\t\tmtp_passwd=${passwd}\n\t\t\tmtp_tag=${tag}\n\t\t\tWrite_config\n\t\t\tRestart_mtproxy\n\t\tfi\n\telse\n\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] 服务器外网IPv4获取失败...\" | tee -a ${mtproxy_log}\n\tfi\n}\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${mtp_port} -j ACCEPT\n\t#iptables -I INPUT -m state --state NEW -m udp -p udp --dport ${mtp_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\t#iptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/mtproxy.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/mtproxy\" ]]; then\n\t\trm -rf /etc/init.d/mtproxy\n\t\tService_mtproxy\n\tfi\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/mtproxy.sh\" && chmod +x mtproxy.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\ncheck_sys\naction=$1\nif [[ \"${action}\" == \"monitor\" ]]; then\n\tcrontab_monitor_mtproxy\nelif [[ \"${action}\" == \"update\" ]]; then\n\tcrontab_update_mtproxy\nelif [[ \"${action}\" == \"monitorip\" ]]; then\n\tcrontab_monitorip\nelse\n\techo && echo -e \"  MTProxy 一键管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  ---- Toyo | doub.io/shell-jc7 ----\n  \n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 MTProxy\n ${Green_font_prefix} 2.${Font_color_suffix} 更新 MTProxy\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 MTProxy\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 MTProxy\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 MTProxy\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 MTProxy\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 设置 账号配置\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 账号信息\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 日志信息\n ${Green_font_prefix}10.${Font_color_suffix} 查看 链接信息\n————————————\" && echo\n\tif [[ -e ${mtproxy_file} ]]; then\n\t\tcheck_pid\n\t\tif [[ ! -z \"${PID}\" ]]; then\n\t\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\t\telse\n\t\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\t\tfi\n\telse\n\t\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\n\tfi\n\techo\n\tread -e -p \" 请输入数字 [0-10]:\" num\n\tcase \"$num\" in\n\t\t0)\n\t\tUpdate_Shell\n\t\t;;\n\t\t1)\n\t\tInstall_mtproxy\n\t\t;;\n\t\t2)\n\t\tUpdate_mtproxy\n\t\t;;\n\t\t3)\n\t\tUninstall_mtproxy\n\t\t;;\n\t\t4)\n\t\tStart_mtproxy\n\t\t;;\n\t\t5)\n\t\tStop_mtproxy\n\t\t;;\n\t\t6)\n\t\tRestart_mtproxy\n\t\t;;\n\t\t7)\n\t\tSet_mtproxy\n\t\t;;\n\t\t8)\n\t\tView_mtproxy\n\t\t;;\n\t\t9)\n\t\tView_Log\n\t\t;;\n\t\t10)\n\t\tView_user_connection_info\n\t\t;;\n\t\t*)\n\t\techo \"请输入正确数字 [0-10]\"\n\t\t;;\n\tesac\nfi"
        },
        {
          "name": "mtproxy_go.sh",
          "type": "blob",
          "size": 27.4072265625,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: MTProxy Golang\n#\tVersion: 1.0.1\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/shell-jc9/\n#=================================================\n\nsh_ver=\"1.0.1\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile_1=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\nfile=\"/usr/local/mtproxy-go\"\nmtproxy_file=\"/usr/local/mtproxy-go/mtg\"\nmtproxy_conf=\"/usr/local/mtproxy-go/mtproxy.conf\"\nmtproxy_log=\"/usr/local/mtproxy-go/mtproxy.log\"\nNow_ver_File=\"/usr/local/mtproxy-go/ver.txt\"\nCrontab_file=\"/usr/bin/crontab\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前非ROOT账号(或没有ROOT权限)，无法继续操作，请更换ROOT账号或使用 ${Green_background_prefix}sudo su${Font_color_suffix} 命令获取临时ROOT权限（执行后可能会提示输入当前账号的密码）。\" && exit 1\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_installed_status(){\n\t[[ ! -e ${mtproxy_file} ]] && echo -e \"${Error} MTProxy 没有安装，请检查 !\" && exit 1\n}\ncheck_crontab_installed_status(){\n\tif [[ ! -e ${Crontab_file} ]]; then\n\t\techo -e \"${Error} Crontab 没有安装，开始安装...\"\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum install crond -y\n\t\telse\n\t\t\tapt-get install cron -y\n\t\tfi\n\t\tif [[ ! -e ${Crontab_file} ]]; then\n\t\t\techo -e \"${Error} Crontab 安装失败，请检查！\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} Crontab 安装成功！\"\n\t\tfi\n\tfi\n}\ncheck_pid(){\n\tPID=$(ps -ef| grep \"./mtg \"| grep -v \"grep\" | grep -v \"init.d\" |grep -v \"service\" |awk '{print $2}')\n}\ncheck_new_ver(){\n\tnew_ver=$(wget -qO- https://api.github.com/repos/9seconds/mtg/releases| grep \"tag_name\"| head -n 1| awk -F \":\" '{print $2}'| sed 's/\\\"//g;s/,//g;s/ //g')\n\t[[ -z ${new_ver} ]] && echo -e \"${Error} MTProxy 最新版本获取失败！\" && exit 1\n\techo -e \"${Info} 检测到 MTProxy 最新版本为 [ ${new_ver} ]\"\n}\ncheck_ver_comparison(){\n\tnow_ver=$(cat ${Now_ver_File})\n\tif [[ \"${now_ver}\" != \"${new_ver}\" ]]; then\n\t\techo -e \"${Info} 发现 MTProxy 已有新版本 [ ${new_ver} ]，旧版本 [ ${now_ver} ]\"\n\t\tread -e -p \"是否更新 ? [Y/n] :\" yn\n\t\t[[ -z \"${yn}\" ]] && yn=\"y\"\n\t\tif [[ $yn == [Yy] ]]; then\n\t\t\tcheck_pid\n\t\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\t\t\\cp \"${mtproxy_conf}\" \"/tmp/mtproxy.conf\"\n\t\t\trm -rf ${file}\n\t\t\tDownload\n\t\t\tmv \"/tmp/mtproxy.conf\" \"${mtproxy_conf}\"\n\t\t\tStart\n\t\tfi\n\telse\n\t\techo -e \"${Info} 当前 MTProxy 已是最新版本 [ ${new_ver} ]\" && exit 1\n\tfi\n}\nDownload(){\n\tif [[ ! -e \"${file}\" ]]; then\n\t\tmkdir \"${file}\"\n\telse\n\t\t[[ -e \"${mtproxy_file}\" ]] && rm -rf \"${mtproxy_file}\"\n\tfi\n\tcd \"${file}\"\n\tif [[ ${bit} == \"x86_64\" ]]; then\n\t\tbit=\"amd64\"\n\telif [[ ${bit} == \"i386\" || ${bit} == \"i686\" ]]; then\n\t\tbit=\"386\"\n\telse\n\t\tbit=\"arm\"\n\tfi\n\twget --no-check-certificate -N \"https://github.com/9seconds/mtg/releases/download/${new_ver}/mtg-linux-${bit}\"\n\t[[ ! -e \"mtg-linux-${bit}\" ]] && echo -e \"${Error} MTProxy 下载失败 !\" && rm -rf \"${file}\" && exit 1\n\tmv \"mtg-linux-${bit}\" \"mtg\"\n\t[[ ! -e \"mtg\" ]] && echo -e \"${Error} MTProxy 重命名失败 !\" && rm -rf \"${file}\" && exit 1\n\tchmod +x mtg\n\techo \"${new_ver}\" > ${Now_ver_File}\n}\nService(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/mtproxy_go_centos\" -O /etc/init.d/mtproxy-go; then\n\t\t\techo -e \"${Error} MTProxy服务 管理脚本下载失败 !\"\n\t\t\trm -rf \"${file}\"\n\t\t\texit 1\n\t\tfi\n\t\tchmod +x \"/etc/init.d/mtproxy-go\"\n\t\tchkconfig --add mtproxy-go\n\t\tchkconfig mtproxy-go on\n\telse\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/mtproxy_go_debian\" -O /etc/init.d/mtproxy-go; then\n\t\t\techo -e \"${Error} MTProxy服务 管理脚本下载失败 !\"\n\t\t\trm -rf \"${file}\"\n\t\t\texit 1\n\t\tfi\n\t\tchmod +x \"/etc/init.d/mtproxy-go\"\n\t\tupdate-rc.d -f mtproxy-go defaults\n\tfi\n\techo -e \"${Info} MTProxy服务 管理脚本下载完成 !\"\n}\nInstallation_dependency(){\n\t\\cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n}\nWrite_config(){\n\tcat > ${mtproxy_conf}<<-EOF\nPORT = ${mtp_port}\nPASSWORD = ${mtp_passwd}\nTAG = ${mtp_tag}\nNAT-IPv4 = ${mtp_nat_ipv4}\nNAT-IPv6 = ${mtp_nat_ipv6}\nSECURE = ${mtp_secure}\nEOF\n}\nRead_config(){\n\t[[ ! -e ${mtproxy_conf} ]] && echo -e \"${Error} MTProxy 配置文件不存在 !\" && exit 1\n\tport=$(cat ${mtproxy_conf}|grep 'PORT = '|awk -F 'PORT = ' '{print $NF}')\n\tpasswd=$(cat ${mtproxy_conf}|grep 'PASSWORD = '|awk -F 'PASSWORD = ' '{print $NF}')\n\ttag=$(cat ${mtproxy_conf}|grep 'TAG = '|awk -F 'TAG = ' '{print $NF}')\n\tnat_ipv4=$(cat ${mtproxy_conf}|grep 'NAT-IPv4 = '|awk -F 'NAT-IPv4 = ' '{print $NF}')\n\tnat_ipv6=$(cat ${mtproxy_conf}|grep 'NAT-IPv6 = '|awk -F 'NAT-IPv6 = ' '{print $NF}')\n\tsecure=$(cat ${mtproxy_conf}|grep 'SECURE = '|awk -F 'SECURE = ' '{print $NF}')\n}\nSet_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 MTProxy 端口 [1-65535]\"\n\t\tread -e -p \"(默认: 443):\" mtp_port\n\t\t[[ -z \"${mtp_port}\" ]] && mtp_port=\"443\"\n\t\techo $((${mtp_port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${mtp_port} -ge 1 ]] && [[ ${mtp_port} -le 65535 ]]; then\n\t\t\t\techo && echo \"========================\"\n\t\t\t\techo -e \"\t端口 : ${Red_background_prefix} ${mtp_port} ${Font_color_suffix}\"\n\t\t\t\techo \"========================\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\t\tdone\n}\nSet_passwd(){\n\twhile true\n\t\tdo\n\t\techo \"请输入 MTProxy 密匙（手动输入必须为32位，[0-9][a-z][A-Z]，建议随机生成）\"\n\t\tread -e -p \"(避免出错，强烈推荐随机生成，直接回车):\" mtp_passwd\n\t\tif [[ -z \"${mtp_passwd}\" ]]; then\n\t\t\tmtp_passwd=$(date +%s%N | md5sum | head -c 32)\n\t\telse\n\t\t\t[[ ${#mtp_passwd} != 32 ]] && echo -e \"${Error} 请输入正确的密匙（32位字符）。\" && continue\n\t\tfi\n\t\techo && echo \"========================\"\n\t\techo -e \"\t密码 : ${Red_background_prefix} dd${mtp_passwd} ${Font_color_suffix}\"\n\t\techo \"========================\" && echo\n\t\tbreak\n\tdone\n}\nSet_tag(){\n\techo \"请输入 MTProxy 的 TAG标签（TAG标签必须是32位，TAG标签只有在通过官方机器人 @MTProxybot 分享代理账号后才会获得，不清楚请留空回车）\"\n\tread -e -p \"(默认：回车跳过):\" mtp_tag\n\tif [[ ! -z \"${mtp_tag}\" ]]; then\n\t\techo && echo \"========================\"\n\t\techo -e \"\tTAG : ${Red_background_prefix} ${mtp_tag} ${Font_color_suffix}\"\n\t\techo \"========================\" && echo\n\telse\n\t\techo\n\tfi\n}\nSet_nat(){\n\techo -e \"如果本机是NAT服务器（谷歌云、微软云、阿里云等，网卡绑定的IP为 10.xx.xx.xx 开头的），则需要指定公网 IPv4。\"\n\tread -e -p \"(默认：自动检测 IPv4 地址):\" mtp_nat_ipv4\n\tif [[ -z \"${mtp_nat_ipv4}\" ]]; then\n\t\tgetipv4\n\t\tif [[ \"${ipv4}\" == \"IPv4_Error\" ]]; then\n\t\t\tmtp_nat_ipv4=\"\"\n\t\telse\n\t\t\tmtp_nat_ipv4=\"${ipv4}\"\n\t\tfi\n\t\techo && echo \"========================\"\n\t\techo -e \"\tNAT-IPv4 : ${Red_background_prefix} ${mtp_nat_ipv4} ${Font_color_suffix}\"\n\t\techo \"========================\" && echo\n\tfi\n\techo -e \"如果本机是NAT服务器（谷歌云、微软云、阿里云等），则需要指定公网 IPv6。\"\n\tread -e -p \"(默认：自动检测 IPv6 地址):\" mtp_nat_ipv6\n\tif [[ -z \"${mtp_nat_ipv6}\" ]]; then\n\t\tgetipv6\n\t\tif [[ \"${ipv6}\" == \"IPv6_Error\" ]]; then\n\t\t\tmtp_nat_ipv6=\"\"\n\t\telse\n\t\t\tmtp_nat_ipv6=\"${ipv6}\"\n\t\tfi\n\t\techo && echo \"========================\"\n\t\techo -e \"\tNAT-IPv6 : ${Red_background_prefix} ${mtp_nat_ipv6} ${Font_color_suffix}\"\n\t\techo \"========================\" && echo\n\tfi\n}\nSet_secure(){\n\techo -e \"是否启用强制安全模式？[Y/n]\n只有启用[安全混淆模式]的客户端才能链接(即密匙头部有 dd 字符)，降低服务器被墙几率，建议开启。\"\n\tread -e -p \"(默认：Y 启用):\" mtp_secure\n\t[[ -z \"${mtp_secure}\" ]] && mtp_secure=\"Y\"\n\tif [[ \"${mtp_secure}\" == [Yy] ]]; then\n\t\tmtp_secure=\"YES\"\n\telse\n\t\tmtp_secure=\"NO\"\n\tfi\n\techo && echo \"========================\"\n\techo -e \"\t强制安全模式 : ${Red_background_prefix} ${mtp_secure} ${Font_color_suffix}\"\n\techo \"========================\" && echo\n}\nSet(){\n\tcheck_installed_status\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix}  修改 端口配置\n ${Green_font_prefix}2.${Font_color_suffix}  修改 密码配置\n ${Green_font_prefix}3.${Font_color_suffix}  修改 TAG 配置\n ${Green_font_prefix}4.${Font_color_suffix}  修改 NAT 配置\n ${Green_font_prefix}5.${Font_color_suffix}  修改 强制安全模式 配置\n ${Green_font_prefix}6.${Font_color_suffix}  修改 全部配置\n————————————————\n ${Green_font_prefix}7.${Font_color_suffix}  监控 运行状态\n ${Green_font_prefix}8.${Font_color_suffix}  监控 外网IP变更\" && echo\n\tread -e -p \"(默认: 取消):\" mtp_modify\n\t[[ -z \"${mtp_modify}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ \"${mtp_modify}\" == \"1\" ]]; then\n\t\tRead_config\n\t\tSet_port\n\t\tmtp_passwd=${passwd}\n\t\tmtp_tag=${tag}\n\t\tmtp_nat_ipv4=${nat_ipv4}\n\t\tmtp_nat_ipv6=${nat_ipv6}\n\t\tmtp_secure=${secure}\n\t\tWrite_config\n\t\tDel_iptables\n\t\tAdd_iptables\n\t\tRestart\n\telif [[ \"${mtp_modify}\" == \"2\" ]]; then\n\t\tRead_config\n\t\tSet_passwd\n\t\tmtp_port=${port}\n\t\tmtp_tag=${tag}\n\t\tmtp_nat_ipv4=${nat_ipv4}\n\t\tmtp_nat_ipv6=${nat_ipv6}\n\t\tmtp_secure=${secure}\n\t\tWrite_config\n\t\tRestart\n\telif [[ \"${mtp_modify}\" == \"3\" ]]; then\n\t\tRead_config\n\t\tSet_tag\n\t\tmtp_port=${port}\n\t\tmtp_passwd=${passwd}\n\t\tmtp_nat_ipv4=${nat_ipv4}\n\t\tmtp_nat_ipv6=${nat_ipv6}\n\t\tmtp_secure=${secure}\n\t\tWrite_config\n\t\tRestart\n\telif [[ \"${mtp_modify}\" == \"4\" ]]; then\n\t\tRead_config\n\t\tSet_nat\n\t\tmtp_port=${port}\n\t\tmtp_passwd=${passwd}\n\t\tmtp_tag=${tag}\n\t\tmtp_secure=${secure}\n\t\tWrite_config\n\t\tRestart\n\telif [[ \"${mtp_modify}\" == \"5\" ]]; then\n\t\tRead_config\n\t\tSet_secure\n\t\tmtp_port=${port}\n\t\tmtp_passwd=${passwd}\n\t\tmtp_tag=${tag}\n\t\tmtp_nat_ipv4=${nat_ipv4}\n\t\tmtp_nat_ipv6=${nat_ipv6}\n\t\tWrite_config\n\t\tRestart\n\telif [[ \"${mtp_modify}\" == \"6\" ]]; then\n\t\tRead_config\n\t\tSet_port\n\t\tSet_passwd\n\t\tSet_tag\n\t\tSet_nat\n\t\tSet_secure\n\t\tWrite_config\n\t\tRestart\n\telif [[ \"${mtp_modify}\" == \"7\" ]]; then\n\t\tSet_crontab_monitor\n\telif [[ \"${mtp_modify}\" == \"8\" ]]; then\n\t\tSet_crontab_monitorip\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-8)\" && exit 1\n\tfi\n}\nInstall(){\n\tcheck_root\n\t[[ -e ${mtproxy_file} ]] && echo -e \"${Error} 检测到 MTProxy 已安装 !\" && exit 1\n\techo -e \"${Info} 开始设置 用户配置...\"\n\tSet_port\n\tSet_passwd\n\tSet_tag\n\tSet_nat\n\tSet_secure\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始下载/安装...\"\n\tcheck_new_ver\n\tDownload\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService\n\techo -e \"${Info} 开始写入 配置文件...\"\n\tWrite_config\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart\n}\nStart(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} MTProxy 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/mtproxy-go start\n\tsleep 1s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View\n}\nStop(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} MTProxy 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/mtproxy-go stop\n}\nRestart(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/mtproxy-go stop\n\t/etc/init.d/mtproxy-go start\n\tsleep 1s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View\n}\nUpdate(){\n\tcheck_installed_status\n\tcheck_new_ver\n\tcheck_ver_comparison\n}\nUninstall(){\n\tcheck_installed_status\n\techo \"确定要卸载 MTProxy ? (y/N)\"\n\techo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tif [[ -e ${mtproxy_conf} ]]; then\n\t\t\tport=$(cat ${mtproxy_conf}|grep 'PORT = '|awk -F 'PORT = ' '{print $NF}')\n\t\t\tDel_iptables\n\t\t\tSave_iptables\n\t\tfi\n\t\tif [[ ! -z $(crontab -l | grep \"mtproxy_go.sh monitor\") ]]; then\n\t\t\tcrontab_monitor_cron_stop\n\t\tfi\n\t\trm -rf \"${file}\"\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del mtproxy-go\n\t\telse\n\t\t\tupdate-rc.d -f mtproxy-go remove\n\t\tfi\n\t\trm -rf \"/etc/init.d/mtproxy-go\"\n\t\techo && echo \"MTProxy 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\ngetipv4(){\n\tipv4=$(wget -qO- -4 -t1 -T2 ipinfo.io/ip)\n\tif [[ -z \"${ipv4}\" ]]; then\n\t\tipv4=$(wget -qO- -4 -t1 -T2 api.ip.sb/ip)\n\t\tif [[ -z \"${ipv4}\" ]]; then\n\t\t\tipv4=$(wget -qO- -4 -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\tif [[ -z \"${ipv4}\" ]]; then\n\t\t\t\tipv4=\"IPv4_Error\"\n\t\t\tfi\n\t\tfi\n\tfi\n}\ngetipv6(){\n\tipv6=$(wget -qO- -6 -t1 -T3 ifconfig.co)\n\tif [[ -z \"${ipv6}\" ]]; then\n\t\tipv6=\"IPv6_Error\"\n\tfi\n}\nView(){\n\tcheck_installed_status\n\tRead_config\n\t#getipv4\n\t#getipv6\n\tclear && echo\n\techo -e \"Mtproto Proxy 用户配置：\"\n\techo -e \"————————————————\"\n\techo -e \" 地址\\t: ${Green_font_prefix}${nat_ipv4}${Font_color_suffix}\"\n\t[[ ! -z \"${nat_ipv6}\" ]] && echo -e \" 地址\\t: ${Green_font_prefix}${nat_ipv6}${Font_color_suffix}\"\n\techo -e \" 端口\\t: ${Green_font_prefix}${port}${Font_color_suffix}\"\n\techo -e \" 密匙\\t: ${Green_font_prefix}dd${passwd}${Font_color_suffix}\"\n\t[[ ! -z \"${tag}\" ]] && echo -e \" TAG \\t: ${Green_font_prefix}${tag}${Font_color_suffix}\"\n\techo -e \" 链接\\t: ${Red_font_prefix}tg://proxy?server=${nat_ipv4}&port=${port}&secret=dd${passwd}${Font_color_suffix}\"\n\techo -e \" 链接\\t: ${Red_font_prefix}https://t.me/proxy?server=${nat_ipv4}&port=${port}&secret=dd${passwd}${Font_color_suffix}\"\n\t[[ ! -z \"${nat_ipv6}\" ]] && echo -e \" 链接\\t: ${Red_font_prefix}tg://proxy?server=${nat_ipv6}&port=${port}&secret=dd${passwd}${Font_color_suffix}\"\n\t[[ ! -z \"${nat_ipv6}\" ]] && echo -e \" 链接\\t: ${Red_font_prefix}https://t.me/proxy?server=${nat_ipv6}&port=${port}&secret=dd${passwd}${Font_color_suffix}\"\n\techo\n\techo -e \" 强制安全模式\\t: ${Green_font_prefix}${secure}${Font_color_suffix}\"\n\techo\n\techo -e \" ${Red_font_prefix}注意\\t:${Font_color_suffix} 密匙头部的 ${Green_font_prefix}dd${Font_color_suffix} 字符是代表客户端启用${Green_font_prefix}安全混淆模式${Font_color_suffix}，可以降低服务器被墙几率。\\n     \\t  另外，在官方机器人处分享账号获取TAG标签时记得删除，获取TAG标签后分享时可以再加上。\"\n}\nView_Log(){\n\tcheck_installed_status\n\t[[ ! -e ${mtproxy_log} ]] && echo -e \"${Error} MTProxy 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${mtproxy_log}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${mtproxy_log}\n}\n# 显示 连接信息\ndebian_View_user_connection_info(){\n\tformat_1=$1\n\tRead_config\n\tuser_IP=$(ss state connected sport = :${port} -tn|sed '1d'|awk '{print $NF}'|awk -F ':' '{print $(NF-1)}'|sort -u)\n\tif [[ -z ${user_IP} ]]; then\n\t\tuser_IP_total=\"0\"\n\t\techo -e \"端口: ${Green_font_prefix}\"${port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\telse\n\t\tuser_IP_total=$(echo -e \"${user_IP}\"|wc -l)\n\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\t\t\tget_IP_address\n\t\t\techo\n\t\telse\n\t\t\tuser_IP=$(echo -e \"\\n${user_IP}\")\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\tfi\n\tfi\n\tuser_IP=\"\"\n}\nView_user_connection_info(){\n\tcheck_installed_status\n\techo && echo -e \"请选择要显示的格式：\n ${Green_font_prefix}1.${Font_color_suffix} 显示 IP 格式\n ${Green_font_prefix}2.${Font_color_suffix} 显示 IP+IP归属地 格式\" && echo\n\tread -e -p \"(默认: 1):\" mtproxy_connection_info\n\t[[ -z \"${mtproxy_connection_info}\" ]] && mtproxy_connection_info=\"1\"\n\tif [[ \"${mtproxy_connection_info}\" == \"1\" ]]; then\n\t\tView_user_connection_info_1 \"\"\n\telif [[ \"${mtproxy_connection_info}\" == \"2\" ]]; then\n\t\techo -e \"${Tip} 检测IP归属地(ipip.net)，如果IP较多，可能时间会比较长...\"\n\t\tView_user_connection_info_1 \"IP_address\"\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-2)\" && exit 1\n\tfi\n}\nView_user_connection_info_1(){\n\tformat=$1\n\tdebian_View_user_connection_info \"$format\"\n}\nget_IP_address(){\n\tif [[ ! -z ${user_IP} ]]; then\n\t\tfor((integer_1 = ${user_IP_total}; integer_1 >= 1; integer_1--))\n\t\tdo\n\t\t\tIP=$(echo \"${user_IP}\" |sed -n \"$integer_1\"p)\n\t\t\tIP_address=$(wget -qO- -t1 -T2 http://freeapi.ipip.net/${IP}|sed 's/\\\"//g;s/,//g;s/\\[//g;s/\\]//g')\n\t\t\techo -e \"${Green_font_prefix}${IP}${Font_color_suffix} (${IP_address})\"\n\t\t\tsleep 1s\n\t\tdone\n\tfi\n}\nSet_crontab_monitor(){\n\tcheck_crontab_installed_status\n\tcrontab_monitor_status=$(crontab -l|grep \"mtproxy_go.sh monitor\")\n\tif [[ -z \"${crontab_monitor_status}\" ]]; then\n\t\techo && echo -e \"当前监控运行状态模式: ${Red_font_prefix}未开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要开启 ${Green_font_prefix}MTProxy 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动 MTProxy 服务端)[Y/n]\"\n\t\tread -e -p \"(默认: y):\" crontab_monitor_status_ny\n\t\t[[ -z \"${crontab_monitor_status_ny}\" ]] && crontab_monitor_status_ny=\"y\"\n\t\tif [[ ${crontab_monitor_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_cron_start\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"当前监控运行状态模式: ${Green_font_prefix}已开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要关闭 ${Red_font_prefix}MTProxy 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动 MTProxy 服务端)[y/N]\"\n\t\tread -e -p \"(默认: n):\" crontab_monitor_status_ny\n\t\t[[ -z \"${crontab_monitor_status_ny}\" ]] && crontab_monitor_status_ny=\"n\"\n\t\tif [[ ${crontab_monitor_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_cron_stop\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\ncrontab_monitor_cron_start(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/mtproxy_go.sh monitor/d\" \"$file_1/crontab.bak\"\n\techo -e \"\\n* * * * * /bin/bash $file_1/mtproxy_go.sh monitor\" >> \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"mtproxy_go.sh monitor\")\n\tif [[ -z ${cron_config} ]]; then\n\t\techo -e \"${Error} MTProxy 服务端运行状态监控功能 启动失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} MTProxy 服务端运行状态监控功能 启动成功 !\"\n\tfi\n}\ncrontab_monitor_cron_stop(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/mtproxy_go.sh monitor/d\" \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"mtproxy_go.sh monitor\")\n\tif [[ ! -z ${cron_config} ]]; then\n\t\techo -e \"${Error} MTProxy 服务端运行状态监控功能 停止失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} MTProxy 服务端运行状态监控功能 停止成功 !\"\n\tfi\n}\ncrontab_monitor(){\n\tcheck_installed_status\n\tcheck_pid\n\t#echo \"${PID}\"\n\tif [[ -z ${PID} ]]; then\n\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] 检测到 MTProxy服务端 未运行 , 开始启动...\" | tee -a ${mtproxy_log}\n\t\t/etc/init.d/mtproxy-go start\n\t\tsleep 1s\n\t\tcheck_pid\n\t\tif [[ -z ${PID} ]]; then\n\t\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] MTProxy服务端 启动失败...\" | tee -a ${mtproxy_log}\n\t\telse\n\t\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] MTProxy服务端 启动成功...\" | tee -a ${mtproxy_log}\n\t\tfi\n\telse\n\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] MTProxy服务端 进程运行正常...\" | tee -a ${mtproxy_log}\n\tfi\n}\nSet_crontab_monitorip(){\n\tcheck_crontab_installed_status\n\tcrontab_monitor_status=$(crontab -l|grep \"mtproxy_go.sh monitorip\")\n\tif [[ -z \"${crontab_monitor_status}\" ]]; then\n\t\techo && echo -e \"当前监控外网IP模式: ${Red_font_prefix}未开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要开启 ${Green_font_prefix}服务器外网IP变更监控${Font_color_suffix} 功能吗？(当服务器外网IP变化后，自动重新配置并重启服务端)[Y/n]\"\n\t\tread -e -p \"(默认: y):\" crontab_monitor_status_ny\n\t\t[[ -z \"${crontab_monitor_status_ny}\" ]] && crontab_monitor_status_ny=\"y\"\n\t\tif [[ ${crontab_monitor_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_cron_start2\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"当前监控外网IP模式: ${Green_font_prefix}已开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要关闭 ${Red_font_prefix}服务器外网IP变更监控${Font_color_suffix} 功能吗？(当服务器外网IP变化后，自动重新配置并重启服务端)[Y/n]\"\n\t\tread -e -p \"(默认: n):\" crontab_monitor_status_ny\n\t\t[[ -z \"${crontab_monitor_status_ny}\" ]] && crontab_monitor_status_ny=\"n\"\n\t\tif [[ ${crontab_monitor_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_cron_stop2\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\ncrontab_monitor_cron_start2(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/mtproxy_go.sh monitorip/d\" \"$file_1/crontab.bak\"\n\techo -e \"\\n* * * * * /bin/bash $file_1/mtproxy_go.sh monitorip\" >> \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"mtproxy_go.sh monitorip\")\n\tif [[ -z ${cron_config} ]]; then\n\t\techo -e \"${Error} 服务器外网IP变更监控功能 启动失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} 服务器外网IP变更监控功能 启动成功 !\"\n\tfi\n}\ncrontab_monitor_cron_stop2(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/mtproxy_go.sh monitorip/d\" \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"mtproxy_go.sh monitorip\")\n\tif [[ ! -z ${cron_config} ]]; then\n\t\techo -e \"${Error} 服务器外网IP变更监控功能 停止失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} 服务器外网IP变更监控功能 停止成功 !\"\n\tfi\n}\ncrontab_monitorip(){\n\tcheck_installed_status\n\tRead_config\n\tgetipv4\n\tgetipv6\n\tmonitorip_yn=\"NO\"\n\tif [[ \"${ipv4}\" != \"IPv4_Error\" ]]; then\n\t\tif [[ \"${ipv4}\" != \"${nat_ipv4}\" ]]; then\n\t\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] 检测到 服务器外网IPv4变更[旧: ${nat_ipv4}，新: ${ipv4}], 开始重新配置并准备重启服务端...\" | tee -a ${mtproxy_log}\n\t\t\tmonitorip_yn=\"YES\"\n\t\t\tmtp_nat_ipv4=${ipv4}\n\t\tfi\n\telse\n\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] 服务器外网IPv4获取失败...\" | tee -a ${mtproxy_log}\n\t\tmtp_nat_ipv4=${nat_ipv4}\n\tfi\n\tif [[ \"${ipv6}\" != \"IPv6_Error\" ]]; then\n\t\tif [[ \"${ipv6}\" != \"${nat_ipv6}\" ]]; then\n\t\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] 检测到 服务器外网IPv6变更[旧: ${nat_ipv6}，新: ${ipv6}], 开始重新配置并准备重启服务端...\" | tee -a ${mtproxy_log}\n\t\t\tmonitorip_yn=\"YES\"\n\t\t\tmtp_nat_ipv6=${ipv6}\n\t\tfi\n\telse\n\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] 服务器外网IPv6获取失败...\" | tee -a ${mtproxy_log}\n\t\tmtp_nat_ipv6=${nat_ipv6}\n\tfi\n\tif [[ ${monitorip_yn} == \"YES\" ]]; then\n\t\tmtp_port=${port}\n\t\tmtp_passwd=${passwd}\n\t\tmtp_tag=${tag}\n\t\tmtp_secure=${secure}\n\t\tWrite_config\n\t\tRestart\n\tfi\n}\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${mtp_port} -j ACCEPT\n\tip6tables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${mtp_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\tip6tables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tservice ip6tables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\tip6tables-save > /etc/ip6tables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tservice ip6tables save\n\t\tchkconfig --level 2345 iptables on\n\t\tchkconfig --level 2345 ip6tables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\tip6tables-save > /etc/ip6tables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules\\n/sbin/ip6tables-restore < /etc/ip6tables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/mtproxy_go.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/mtproxy-go\" ]]; then\n\t\trm -rf /etc/init.d/mtproxy-go\n\t\tService\n\tfi\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/mtproxy_go.sh\" && chmod +x mtproxy_go.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\ncheck_sys\naction=$1\nif [[ \"${action}\" == \"monitor\" ]]; then\n\tcrontab_monitor\nelif [[ \"${action}\" == \"monitorip\" ]]; then\n\tcrontab_monitorip\nelse\n\techo && echo -e \"  MTProxy-Go 一键管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  ---- Toyo | doub.io/shell-jc9 ----\n  \n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 MTProxy\n ${Green_font_prefix} 2.${Font_color_suffix} 更新 MTProxy\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 MTProxy\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 MTProxy\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 MTProxy\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 MTProxy\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 设置 账号配置\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 账号信息\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 日志信息\n ${Green_font_prefix}10.${Font_color_suffix} 查看 链接信息\n————————————\" && echo\n\tif [[ -e ${mtproxy_file} ]]; then\n\t\tcheck_pid\n\t\tif [[ ! -z \"${PID}\" ]]; then\n\t\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\t\telse\n\t\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\t\tfi\n\telse\n\t\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\n\tfi\n\techo\n\tread -e -p \" 请输入数字 [0-10]:\" num\n\tcase \"$num\" in\n\t\t0)\n\t\tUpdate_Shell\n\t\t;;\n\t\t1)\n\t\tInstall\n\t\t;;\n\t\t2)\n\t\tUpdate\n\t\t;;\n\t\t3)\n\t\tUninstall\n\t\t;;\n\t\t4)\n\t\tStart\n\t\t;;\n\t\t5)\n\t\tStop\n\t\t;;\n\t\t6)\n\t\tRestart\n\t\t;;\n\t\t7)\n\t\tSet\n\t\t;;\n\t\t8)\n\t\tView\n\t\t;;\n\t\t9)\n\t\tView_Log\n\t\t;;\n\t\t10)\n\t\tView_user_connection_info\n\t\t;;\n\t\t*)\n\t\techo \"请输入正确数字 [0-10]\"\n\t\t;;\n\tesac\nfi"
        },
        {
          "name": "ocserv.sh",
          "type": "blob",
          "size": 21.0625,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: Debian/Ubuntu\n#\tDescription: ocserv AnyConnect\n#\tVersion: 1.0.5\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/vpnzy-7/\n#=================================================\nsh_ver=\"1.0.5\"\nfile=\"/usr/local/sbin/ocserv\"\nconf_file=\"/etc/ocserv\"\nconf=\"/etc/ocserv/ocserv.conf\"\npasswd_file=\"/etc/ocserv/ocpasswd\"\nlog_file=\"/tmp/ocserv.log\"\nocserv_ver=\"0.11.8\"\nPID_FILE=\"/var/run/ocserv.pid\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前非ROOT账号(或没有ROOT权限)，无法继续操作，请更换ROOT账号或使用 ${Green_background_prefix}sudo su${Font_color_suffix} 命令获取临时ROOT权限（执行后可能会提示输入当前账号的密码）。\" && exit 1\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\t#bit=`uname -m`\n}\ncheck_installed_status(){\n\t[[ ! -e ${file} ]] && echo -e \"${Error} ocserv 没有安装，请检查 !\" && exit 1\n\t[[ ! -e ${conf} ]] && echo -e \"${Error} ocserv 配置文件不存在，请检查 !\" && [[ $1 != \"un\" ]] && exit 1\n}\ncheck_pid(){\n\tif [[ ! -e ${PID_FILE} ]]; then\n\t\tPID=\"\"\n\telse\n\t\tPID=$(cat ${PID_FILE})\n\tfi\n}\nGet_ip(){\n\tip=$(wget -qO- -t1 -T2 ipinfo.io/ip)\n\tif [[ -z \"${ip}\" ]]; then\n\t\tip=$(wget -qO- -t1 -T2 api.ip.sb/ip)\n\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\tip=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\t\tip=\"VPS_IP\"\n\t\t\tfi\n\t\tfi\n\tfi\n}\nDownload_ocserv(){\n\tmkdir \"ocserv\" && cd \"ocserv\"\n\twget \"ftp://ftp.infradead.org/pub/ocserv/ocserv-${ocserv_ver}.tar.xz\"\n\t[[ ! -s \"ocserv-${ocserv_ver}.tar.xz\" ]] && echo -e \"${Error} ocserv 源码文件下载失败 !\" && rm -rf \"ocserv/\" && rm -rf \"ocserv-${ocserv_ver}.tar.xz\" && exit 1\n\ttar -xJf ocserv-0.11.8.tar.xz && cd ocserv-0.11.8\n\t./configure\n\tmake\n\tmake install\n\tcd .. && cd ..\n\trm -rf ocserv/\n\t\n\tif [[ -e ${file} ]]; then\n\t\tmkdir \"${conf_file}\"\n\t\twget --no-check-certificate -N -P \"${conf_file}\" \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/other/ocserv.conf\"\n\t\t[[ ! -s \"${conf}\" ]] && echo -e \"${Error} ocserv 配置文件下载失败 !\" && rm -rf \"${conf_file}\" && exit 1\n\telse\n\t\techo -e \"${Error} ocserv 编译安装失败，请检查！\" && exit 1\n\tfi\n}\nService_ocserv(){\n\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/ocserv_debian -O /etc/init.d/ocserv; then\n\t\techo -e \"${Error} ocserv 服务 管理脚本下载失败 !\" && over\n\tfi\n\tchmod +x /etc/init.d/ocserv\n\tupdate-rc.d -f ocserv defaults\n\techo -e \"${Info} ocserv 服务 管理脚本下载完成 !\"\n}\nrand(){\n\tmin=10000\n\tmax=$((60000-$min+1))\n\tnum=$(date +%s%N)\n\techo $(($num%$max+$min))\n}\nGenerate_SSL(){\n\tlalala=$(rand)\n\tmkdir /tmp/ssl && cd /tmp/ssl\n\techo -e 'cn = \"'${lalala}'\"\norganization = \"'${lalala}'\"\nserial = 1\nexpiration_days = 365\nca\nsigning_key\ncert_signing_key\ncrl_signing_key' > ca.tmpl\n\t[[ $? != 0 ]] && echo -e \"${Error} 写入SSL证书签名模板失败(ca.tmpl) !\" && over\n\tcerttool --generate-privkey --outfile ca-key.pem\n\t[[ $? != 0 ]] && echo -e \"${Error} 生成SSL证书密匙文件失败(ca-key.pem) !\" && over\n\tcerttool --generate-self-signed --load-privkey ca-key.pem --template ca.tmpl --outfile ca-cert.pem\n\t[[ $? != 0 ]] && echo -e \"${Error} 生成SSL证书文件失败(ca-cert.pem) !\" && over\n\t\n\tGet_ip\n\tif [[ -z \"$ip\" ]]; then\n\t\techo -e \"${Error} 检测外网IP失败 !\"\n\t\tread -e -p \"请手动输入你的服务器外网IP:\" ip\n\t\t[[ -z \"${ip}\" ]] && echo \"取消...\" && over\n\tfi\n\techo -e 'cn = \"'${ip}'\"\norganization = \"'${lalala}'\"\nexpiration_days = 365\nsigning_key\nencryption_key\ntls_www_server' > server.tmpl\n\t[[ $? != 0 ]] && echo -e \"${Error} 写入SSL证书签名模板失败(server.tmpl) !\" && over\n\tcerttool --generate-privkey --outfile server-key.pem\n\t[[ $? != 0 ]] && echo -e \"${Error} 生成SSL证书密匙文件失败(server-key.pem) !\" && over\n\tcerttool --generate-certificate --load-privkey server-key.pem --load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem --template server.tmpl --outfile server-cert.pem\n\t[[ $? != 0 ]] && echo -e \"${Error} 生成SSL证书文件失败(server-cert.pem) !\" && over\n\t\n\tmkdir /etc/ocserv/ssl\n\tmv ca-cert.pem /etc/ocserv/ssl/ca-cert.pem\n\tmv ca-key.pem /etc/ocserv/ssl/ca-key.pem\n\tmv server-cert.pem /etc/ocserv/ssl/server-cert.pem\n\tmv server-key.pem /etc/ocserv/ssl/server-key.pem\n\tcd .. && rm -rf /tmp/ssl/\n}\nInstallation_dependency(){\n\t[[ ! -e \"/dev/net/tun\" ]] && echo -e \"${Error} 你的VPS没有开启TUN，请联系IDC或通过VPS控制面板打开TUN/TAP开关 !\" && exit 1\n\tif [[ ${release} = \"centos\" ]]; then\n\t\techo -e \"${Error} 本脚本不支持 CentOS 系统 !\" && exit 1\n\telif [[ ${release} = \"debian\" ]]; then\n\t\tcat /etc/issue |grep 9\\..*>/dev/null\n\t\tif [[ $? = 0 ]]; then\n\t\t\tapt-get update\n\t\t\tapt-get install vim net-tools pkg-config build-essential libgnutls28-dev libwrap0-dev liblz4-dev libseccomp-dev libreadline-dev libnl-nf-3-dev libev-dev gnutls-bin -y\n\t\telse\n\t\t\tmv /etc/apt/sources.list /etc/apt/sources.list.bak\n\t\t\twget --no-check-certificate -O \"/etc/apt/sources.list\" \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/sources/us.sources.list\"\n\t\t\tapt-get update\n\t\t\tapt-get install vim net-tools pkg-config build-essential libgnutls28-dev libwrap0-dev liblz4-dev libseccomp-dev libreadline-dev libnl-nf-3-dev libev-dev gnutls-bin -y\n\t\t\trm -rf /etc/apt/sources.list\n\t\t\tmv /etc/apt/sources.list.bak /etc/apt/sources.list\n\t\t\tapt-get update\n\t\tfi\n\telse\n\t\tapt-get update\n\t\tapt-get install vim net-tools pkg-config build-essential libgnutls28-dev libwrap0-dev liblz4-dev libseccomp-dev libreadline-dev libnl-nf-3-dev libev-dev gnutls-bin -y\n\tfi\n}\nInstall_ocserv(){\n\tcheck_root\n\t[[ -e ${file} ]] && echo -e \"${Error} ocserv 已安装，请检查 !\" && exit 1\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始下载/安装 配置文件...\"\n\tDownload_ocserv\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService_ocserv\n\techo -e \"${Info} 开始自签SSL证书...\"\n\tGenerate_SSL\n\techo -e \"${Info} 开始设置账号配置...\"\n\tRead_config\n\tSet_Config\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart_ocserv\n}\nStart_ocserv(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} ocserv 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/ocserv start\n\tsleep 2s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View_Config\n}\nStop_ocserv(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} ocserv 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/ocserv stop\n}\nRestart_ocserv(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/ocserv stop\n\t/etc/init.d/ocserv start\n\tsleep 2s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View_Config\n}\nSet_ocserv(){\n\t[[ ! -e ${conf} ]] && echo -e \"${Error} ocserv 配置文件不存在 !\" && exit 1\n\ttcp_port=$(cat ${conf}|grep \"tcp-port =\"|awk -F ' = ' '{print $NF}')\n\tudp_port=$(cat ${conf}|grep \"udp-port =\"|awk -F ' = ' '{print $NF}')\n\tvim ${conf}\n\tset_tcp_port=$(cat ${conf}|grep \"tcp-port =\"|awk -F ' = ' '{print $NF}')\n\tset_udp_port=$(cat ${conf}|grep \"udp-port =\"|awk -F ' = ' '{print $NF}')\n\tDel_iptables\n\tAdd_iptables\n\tSave_iptables\n\techo \"是否重启 ocserv ? (Y/n)\"\n\tread -e -p \"(默认: Y):\" yn\n\t[[ -z ${yn} ]] && yn=\"y\"\n\tif [[ ${yn} == [Yy] ]]; then\n\t\tRestart_ocserv\n\tfi\n}\nSet_username(){\n\techo \"请输入 要添加的VPN账号 用户名\"\n\tread -e -p \"(默认: admin):\" username\n\t[[ -z \"${username}\" ]] && username=\"admin\"\n\techo && echo -e \"\t用户名 : ${Red_font_prefix}${username}${Font_color_suffix}\" && echo\n}\nSet_passwd(){\n\techo \"请输入 要添加的VPN账号 密码\"\n\tread -e -p \"(默认: doub.io):\" userpass\n\t[[ -z \"${userpass}\" ]] && userpass=\"doub.io\"\n\techo && echo -e \"\t密码 : ${Red_font_prefix}${userpass}${Font_color_suffix}\" && echo\n}\nSet_tcp_port(){\n\twhile true\n\tdo\n\techo -e \"请输入VPN服务端的TCP端口\"\n\tread -e -p \"(默认: 443):\" set_tcp_port\n\t[[ -z \"$set_tcp_port\" ]] && set_tcp_port=\"443\"\n\techo $((${set_tcp_port}+0)) &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${set_tcp_port} -ge 1 ]] && [[ ${set_tcp_port} -le 65535 ]]; then\n\t\t\techo && echo -e \"\tTCP端口 : ${Red_font_prefix}${set_tcp_port}${Font_color_suffix}\" && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字！\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字！\"\n\tfi\n\tdone\n}\nSet_udp_port(){\n\twhile true\n\tdo\n\techo -e \"请输入VPN服务端的UDP端口\"\n\tread -e -p \"(默认: ${set_tcp_port}):\" set_udp_port\n\t[[ -z \"$set_udp_port\" ]] && set_udp_port=\"${set_tcp_port}\"\n\techo $((${set_udp_port}+0)) &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${set_udp_port} -ge 1 ]] && [[ ${set_udp_port} -le 65535 ]]; then\n\t\t\techo && echo -e \"\tTCP端口 : ${Red_font_prefix}${set_udp_port}${Font_color_suffix}\" && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字！\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字！\"\n\tfi\n\tdone\n}\nSet_Config(){\n\tSet_username\n\tSet_passwd\n\techo -e \"${userpass}\\n${userpass}\"|ocpasswd -c ${passwd_file} ${username}\n\tSet_tcp_port\n\tSet_udp_port\n\tsed -i 's/tcp-port = '\"$(echo ${tcp_port})\"'/tcp-port = '\"$(echo ${set_tcp_port})\"'/g' ${conf}\n\tsed -i 's/udp-port = '\"$(echo ${udp_port})\"'/udp-port = '\"$(echo ${set_udp_port})\"'/g' ${conf}\n}\nRead_config(){\n\t[[ ! -e ${conf} ]] && echo -e \"${Error} ocserv 配置文件不存在 !\" && exit 1\n\tconf_text=$(cat ${conf}|grep -v '#')\n\ttcp_port=$(echo -e \"${conf_text}\"|grep \"tcp-port =\"|awk -F ' = ' '{print $NF}')\n\tudp_port=$(echo -e \"${conf_text}\"|grep \"udp-port =\"|awk -F ' = ' '{print $NF}')\n\tmax_same_clients=$(echo -e \"${conf_text}\"|grep \"max-same-clients =\"|awk -F ' = ' '{print $NF}')\n\tmax_clients=$(echo -e \"${conf_text}\"|grep \"max-clients =\"|awk -F ' = ' '{print $NF}')\n}\nList_User(){\n\t[[ ! -e ${passwd_file} ]] && echo -e \"${Error} ocserv 账号配置文件不存在 !\" && exit 1\n\tUser_text=$(cat ${passwd_file})\n\tif [[ ! -z ${User_text} ]]; then\n\t\tUser_num=$(echo -e \"${User_text}\"|wc -l)\n\t\tuser_list_all=\"\"\n\t\tfor((integer = 1; integer <= ${User_num}; integer++))\n\t\tdo\n\t\t\tuser_name=$(echo -e \"${User_text}\" | awk -F ':*:' '{print $1}' | sed -n \"${integer}p\")\n\t\t\tuser_status=$(echo -e \"${User_text}\" | awk -F ':*:' '{print $NF}' | sed -n \"${integer}p\"|cut -c 1)\n\t\t\tif [[ ${user_status} == '!' ]]; then\n\t\t\t\tuser_status=\"禁用\"\n\t\t\telse\n\t\t\t\tuser_status=\"启用\"\n\t\t\tfi\n\t\t\tuser_list_all=${user_list_all}\"用户名: \"${user_name}\" 账号状态: \"${user_status}\"\\n\"\n\t\tdone\n\t\techo && echo -e \"用户总数 ${Green_font_prefix}\"${User_num}\"${Font_color_suffix}\"\n\t\techo -e ${user_list_all}\n\tfi\n}\nAdd_User(){\n\tSet_username\n\tSet_passwd\n\tuser_status=$(cat \"${passwd_file}\"|grep \"${username}\"':*:')\n\t[[ ! -z ${user_status} ]] && echo -e \"${Error} 用户名已存在 ![ ${username} ]\" && exit 1\n\techo -e \"${userpass}\\n${userpass}\"|ocpasswd -c ${passwd_file} ${username}\n\tuser_status=$(cat \"${passwd_file}\"|grep \"${username}\"':*:')\n\tif [[ ! -z ${user_status} ]]; then\n\t\techo -e \"${Info} 账号添加成功 ![ ${username} ]\"\n\telse\n\t\techo -e \"${Error} 账号添加失败 ![ ${username} ]\" && exit 1\n\tfi\n}\nDel_User(){\n\tList_User\n\t[[ ${User_num} == 1 ]] && echo -e \"${Error} 当前仅剩一个账号配置，无法删除 !\" && exit 1\n\techo -e \"请输入要删除的VPN账号的用户名\"\n\tread -e -p \"(默认取消):\" Del_username\n\t[[ -z \"${Del_username}\" ]] && echo \"已取消...\" && exit 1\n\tuser_status=$(cat \"${passwd_file}\"|grep \"${Del_username}\"':*:')\n\t[[ -z ${user_status} ]] && echo -e \"${Error} 用户名不存在 ! [${Del_username}]\" && exit 1\n\tocpasswd -c ${passwd_file} -d ${Del_username}\n\tuser_status=$(cat \"${passwd_file}\"|grep \"${Del_username}\"':*:')\n\tif [[ -z ${user_status} ]]; then\n\t\techo -e \"${Info} 删除成功 ! [${Del_username}]\"\n\telse\n\t\techo -e \"${Error} 删除失败 ! [${Del_username}]\" && exit 1\n\tfi\n}\nModify_User_disabled(){\n\tList_User\n\techo -e \"请输入要启用/禁用的VPN账号的用户名\"\n\tread -e -p \"(默认取消):\" Modify_username\n\t[[ -z \"${Modify_username}\" ]] && echo \"已取消...\" && exit 1\n\tuser_status=$(cat \"${passwd_file}\"|grep \"${Modify_username}\"':*:')\n\t[[ -z ${user_status} ]] && echo -e \"${Error} 用户名不存在 ! [${Modify_username}]\" && exit 1\n\tuser_status=$(cat \"${passwd_file}\" | grep \"${Modify_username}\"':*:' | awk -F ':*:' '{print $NF}' |cut -c 1)\n\tif [[ ${user_status} == '!' ]]; then\n\t\t\tocpasswd -c ${passwd_file} -u ${Modify_username}\n\t\t\tuser_status=$(cat \"${passwd_file}\" | grep \"${Modify_username}\"':*:' | awk -F ':*:' '{print $NF}' |cut -c 1)\n\t\t\tif [[ ${user_status} != '!' ]]; then\n\t\t\t\techo -e \"${Info} 启用成功 ! [${Modify_username}]\"\n\t\t\telse\n\t\t\t\techo -e \"${Error} 启用失败 ! [${Modify_username}]\" && exit 1\n\t\t\tfi\n\t\telse\n\t\t\tocpasswd -c ${passwd_file} -l ${Modify_username}\n\t\t\tuser_status=$(cat \"${passwd_file}\" | grep \"${Modify_username}\"':*:' | awk -F ':*:' '{print $NF}' |cut -c 1)\n\t\t\tif [[ ${user_status} == '!' ]]; then\n\t\t\t\techo -e \"${Info} 禁用成功 ! [${Modify_username}]\"\n\t\t\telse\n\t\t\t\techo -e \"${Error} 禁用失败 ! [${Modify_username}]\" && exit 1\n\t\t\tfi\n\t\tfi\n}\nSet_Pass(){\n\tcheck_installed_status\n\techo && echo -e \" 你要做什么？\n\t\n ${Green_font_prefix} 0.${Font_color_suffix} 列出 账号配置\n————————\n ${Green_font_prefix} 1.${Font_color_suffix} 添加 账号配置\n ${Green_font_prefix} 2.${Font_color_suffix} 删除 账号配置\n————————\n ${Green_font_prefix} 3.${Font_color_suffix} 启用/禁用 账号配置\n \n 注意：添加/修改/删除 账号配置后，VPN服务端会实时读取，无需重启服务端 !\" && echo\n\tread -e -p \"(默认: 取消):\" set_num\n\t[[ -z \"${set_num}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${set_num} == \"0\" ]]; then\n\t\tList_User\n\telif [[ ${set_num} == \"1\" ]]; then\n\t\tAdd_User\n\telif [[ ${set_num} == \"2\" ]]; then\n\t\tDel_User\n\telif [[ ${set_num} == \"3\" ]]; then\n\t\tModify_User_disabled\n\telse\n\t\techo -e \"${Error} 请输入正确的数字[1-3]\" && exit 1\n\tfi\n}\nView_Config(){\n\tGet_ip\n\tRead_config\n\tclear && echo \"===================================================\" && echo\n\techo -e \" AnyConnect 配置信息：\" && echo\n\techo -e \" I  P\\t\\t  : ${Green_font_prefix}${ip}${Font_color_suffix}\"\n\techo -e \" TCP端口\\t  : ${Green_font_prefix}${tcp_port}${Font_color_suffix}\"\n\techo -e \" UDP端口\\t  : ${Green_font_prefix}${udp_port}${Font_color_suffix}\"\n\techo -e \" 单用户设备数限制 : ${Green_font_prefix}${max_same_clients}${Font_color_suffix}\"\n\techo -e \" 总用户设备数限制 : ${Green_font_prefix}${max_clients}${Font_color_suffix}\"\n\techo -e \"\\n 客户端链接请填写 : ${Green_font_prefix}${ip}:${tcp_port}${Font_color_suffix}\"\n\techo && echo \"===================================================\"\n}\nView_Log(){\n\t[[ ! -e ${log_file} ]] && echo -e \"${Error} ocserv 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${log_file}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${log_file}\n}\nUninstall_ocserv(){\n\tcheck_installed_status \"un\"\n\techo \"确定要卸载 ocserv ? (y/N)\"\n\techo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && kill -9 ${PID} && rm -f ${PID_FILE}\n\t\tRead_config\n\t\tDel_iptables\n\t\tSave_iptables\n\t\tupdate-rc.d -f ocserv remove\n\t\trm -rf /etc/init.d/ocserv\n\t\trm -rf \"${conf_file}\"\n\t\trm -rf \"${log_file}\"\n\t\tcd '/usr/local/bin' && rm -f occtl\n\t\trm -f ocpasswd\n\t\tcd '/usr/local/bin' && rm -f ocserv-fw\n\t\tcd '/usr/local/sbin' && rm -f ocserv\n\t\tcd '/usr/local/share/man/man8' && rm -f ocserv.8\n\t\trm -f ocpasswd.8\n\t\trm -f occtl.8\n\t\techo && echo \"ocserv 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nover(){\n\tupdate-rc.d -f ocserv remove\n\trm -rf /etc/init.d/ocserv\n\trm -rf \"${conf_file}\"\n\trm -rf \"${log_file}\"\n\tcd '/usr/local/bin' && rm -f occtl\n\trm -f ocpasswd\n\tcd '/usr/local/bin' && rm -f ocserv-fw\n\tcd '/usr/local/sbin' && rm -f ocserv\n\tcd '/usr/local/share/man/man8' && rm -f ocserv.8\n\trm -f ocpasswd.8\n\trm -f occtl.8\n\techo && echo \"安装过程错误，ocserv 卸载完成 !\" && echo\n}\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${set_tcp_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${set_udp_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${tcp_port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${udp_port} -j ACCEPT\n}\nSave_iptables(){\n\tiptables-save > /etc/iptables.up.rules\n}\nSet_iptables(){\n\techo -e \"net.ipv4.ip_forward=1\" >> /etc/sysctl.conf\n\tsysctl -p\n\tifconfig_status=$(ifconfig)\n\tif [[ -z ${ifconfig_status} ]]; then\n\t\techo -e \"${Error} ifconfig 未安装 !\"\n\t\tread -e -p \"请手动输入你的网卡名(一般情况下，网卡名为 eth0，Debian9 则为 ens3，CentOS Ubuntu 最新版本可能为 enpXsX(X代表数字或字母)，OpenVZ 虚拟化则为 venet0):\" Network_card\n\t\t[[ -z \"${Network_card}\" ]] && echo \"取消...\" && exit 1\n\telse\n\t\tNetwork_card=$(ifconfig|grep \"eth0\")\n\t\tif [[ ! -z ${Network_card} ]]; then\n\t\t\tNetwork_card=\"eth0\"\n\t\telse\n\t\t\tNetwork_card=$(ifconfig|grep \"ens3\")\n\t\t\tif [[ ! -z ${Network_card} ]]; then\n\t\t\t\tNetwork_card=\"ens3\"\n\t\t\telse\n\t\t\t\tNetwork_card=$(ifconfig|grep \"venet0\")\n\t\t\t\tif [[ ! -z ${Network_card} ]]; then\n\t\t\t\t\tNetwork_card=\"venet0\"\n\t\t\t\telse\n\t\t\t\t\tifconfig\n\t\t\t\t\tread -e -p \"检测到本服务器的网卡非 eth0 \\ ens3(Debian9) \\ venet0(OpenVZ) \\ enpXsX(CentOS Ubuntu 最新版本，X代表数字或字母)，请根据上面输出的网卡信息手动输入你的网卡名:\" Network_card\n\t\t\t\t\t[[ -z \"${Network_card}\" ]] && echo \"取消...\" && exit 1\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tfi\n\tiptables -t nat -A POSTROUTING -o ${Network_card} -j MASQUERADE\n\t\n\tiptables-save > /etc/iptables.up.rules\n\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\tchmod +x /etc/network/if-pre-up.d/iptables\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ocserv.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/ocserv\" ]]; then\n\t\trm -rf /etc/init.d/ocserv\n\t\tService_ocserv\n\tfi\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ocserv.sh\" && chmod +x ocserv.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\ncheck_sys\n[[ ${release} != \"debian\" ]] && [[ ${release} != \"ubuntu\" ]] && echo -e \"${Error} 本脚本不支持当前系统 ${release} !\" && exit 1\necho && echo -e \" ocserv 一键安装管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  -- Toyo | doub.io/vpnzy-7 --\n  \n ${Green_font_prefix}0.${Font_color_suffix} 升级脚本\n————————————\n ${Green_font_prefix}1.${Font_color_suffix} 安装 ocserv\n ${Green_font_prefix}2.${Font_color_suffix} 卸载 ocserv\n————————————\n ${Green_font_prefix}3.${Font_color_suffix} 启动 ocserv\n ${Green_font_prefix}4.${Font_color_suffix} 停止 ocserv\n ${Green_font_prefix}5.${Font_color_suffix} 重启 ocserv\n————————————\n ${Green_font_prefix}6.${Font_color_suffix} 设置 账号配置\n ${Green_font_prefix}7.${Font_color_suffix} 查看 配置信息\n ${Green_font_prefix}8.${Font_color_suffix} 修改 配置文件\n ${Green_font_prefix}9.${Font_color_suffix} 查看 日志信息\n————————————\" && echo\nif [[ -e ${file} ]]; then\n\tcheck_pid\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\telse\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\tfi\nelse\n\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\nfi\necho\nread -e -p \" 请输入数字 [0-9]:\" num\ncase \"$num\" in\n\t0)\n\tUpdate_Shell\n\t;;\n\t1)\n\tInstall_ocserv\n\t;;\n\t2)\n\tUninstall_ocserv\n\t;;\n\t3)\n\tStart_ocserv\n\t;;\n\t4)\n\tStop_ocserv\n\t;;\n\t5)\n\tRestart_ocserv\n\t;;\n\t6)\n\tSet_Pass\n\t;;\n\t7)\n\tView_Config\n\t;;\n\t8)\n\tSet_ocserv\n\t;;\n\t9)\n\tView_Log\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-9]\"\n\t;;\nesac"
        },
        {
          "name": "other",
          "type": "tree",
          "content": null
        },
        {
          "name": "pac_get.sh",
          "type": "blob",
          "size": 19.3125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\nPAC_URL=\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\"\nOutput_URL=\"pac.txt\"\nprefix_suffix(){\nPAC_TAME=\"/*\n * Last Updated:$(date '+%Y-%m-%d %H:%M:%S')\n */\n\"\nPAC_prefix='var direct = \"__DIRECT__\";\nif (direct == \"__DIR\" + \"ECT__\") direct = \"DIRECT;\";\n\nvar wall_proxy = function(){ return \"__PROXY__\"; };\nvar wall_v6_proxy = function(){ return \"__PROXY__\"; };\n\nvar nowall_proxy = function(){ return direct; };\nvar ip_proxy = function(){ return nowall_proxy(); };\nvar ipv6_proxy = function(){ return nowall_proxy(); };\n\n/*\n * Copyright (C) 2014 breakwa11\n * https://github.com/breakwa11/gfw_whitelist\n */\n \n/*\n * Copyright (C) 2017-2018 Toyo\n * https://softs.loan/Other/pac.txt\n */\n\nvar rules = [\n'\nPAC_suffix='\n];\n\n/*\n* This file is part of Adblock Plus <http://adblockplus.org/>,\n* Copyright (C) 2006-2014 Eyeo GmbH\n*\n* Adblock Plus is free software: you can redistribute it and/or modify\n* it under the terms of the GNU General Public License version 3 as\n* published by the Free Software Foundation.\n*\n* Adblock Plus is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\tSee the\n* GNU General Public License for more details.\n*\n* You should have received a copy of the GNU General Public License\n* along with Adblock Plus.\tIf not, see <http://www.gnu.org/licenses/>.\n*/\n\nfunction createDict()\n{\n\tvar result = {};\n\tresult.__proto__ = null;\n\treturn result;\n}\n\nfunction getOwnPropertyDescriptor(obj, key)\n{\n\tif (obj.hasOwnProperty(key))\n\t{\n\t\treturn obj[key];\n\t}\n\treturn null;\n}\n\nfunction extend(subclass, superclass, definition)\n{\n\tif (Object.__proto__)\n\t{\n\t\tdefinition.__proto__ = superclass.prototype;\n\t\tsubclass.prototype = definition;\n\t}\n\telse\n\t{\n\t\tvar tmpclass = function(){}, ret;\n\t\ttmpclass.prototype = superclass.prototype;\n\t\tsubclass.prototype = new tmpclass();\n\t\tsubclass.prototype.constructor = superclass;\n\t\tfor (var i in definition)\n\t\t{\n\t\t\tif (definition.hasOwnProperty(i))\n\t\t\t{\n\t\t\t\tsubclass.prototype[i] = definition[i];\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction Filter(text)\n{\n\tthis.text = text;\n\tthis.subscriptions = [];\n}\nFilter.prototype = {\n\ttext: null,\n\tsubscriptions: null,\n\ttoString: function()\n\t{\n\t\treturn this.text;\n\t}\n};\nFilter.knownFilters = createDict();\nFilter.elemhideRegExp = /^([^\\/\\*\\|\\@\"!]*?)#(\\@)?(?:([\\w\\-]+|\\*)((?:\\([\\w\\-]+(?:[$^*]?=[^\\(\\)\"]*)?\\))*)|#([^{}]+))$/;\nFilter.regexpRegExp = /^(@@)?\\/.*\\/(?:\\$~?[\\w\\-]+(?:=[^,\\s]+)?(?:,~?[\\w\\-]+(?:=[^,\\s]+)?)*)?$/;\nFilter.optionsRegExp = /\\$(~?[\\w\\-]+(?:=[^,\\s]+)?(?:,~?[\\w\\-]+(?:=[^,\\s]+)?)*)$/;\nFilter.fromText = function(text)\n{\n\tif (text in Filter.knownFilters)\n\t{\n\t\treturn Filter.knownFilters[text];\n\t}\n\tvar ret;\n\tif (text.charAt(0) == \"!\")\n\t{\n\t\tret = new CommentFilter(text);\n\t}\n\telse\n\t{\n\t\tret = RegExpFilter.fromText(text);\n\t}\n\tFilter.knownFilters[ret.text] = ret;\n\treturn ret;\n};\n\nfunction InvalidFilter(text, reason)\n{\n\tFilter.call(this, text);\n\tthis.reason = reason;\n}\nextend(InvalidFilter, Filter, {\n\treason: null\n});\n\nfunction CommentFilter(text)\n{\n\tFilter.call(this, text);\n}\nextend(CommentFilter, Filter, {\n});\n\nfunction ActiveFilter(text, domains)\n{\n\tFilter.call(this, text);\n\tthis.domainSource = domains;\n}\nextend(ActiveFilter, Filter, {\n\tdomainSource: null,\n\tdomainSeparator: null,\n\tignoreTrailingDot: true,\n\tdomainSourceIsUpperCase: false,\n\tgetDomains: function()\n\t{\n\t\tvar prop = getOwnPropertyDescriptor(this, \"domains\");\n\t\tif (prop)\n\t\t{\n\t\t\treturn prop;\n\t\t}\n\t\tvar domains = null;\n\t\tif (this.domainSource)\n\t\t{\n\t\t\tvar source = this.domainSource;\n\t\t\tif (!this.domainSourceIsUpperCase)\n\t\t\t{\n\t\t\t\tsource = source.toUpperCase();\n\t\t\t}\n\t\t\tvar list = source.split(this.domainSeparator);\n\t\t\tif (list.length == 1 && (list[0]).charAt(0) != \"~\")\n\t\t\t{\n\t\t\t\tdomains = createDict();\n\t\t\t\tdomains[\"\"] = false;\n\t\t\t\tif (this.ignoreTrailingDot)\n\t\t\t\t{\n\t\t\t\t\tlist[0] = list[0].replace(/\\.+$/, \"\");\n\t\t\t\t}\n\t\t\t\tdomains[list[0]] = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar hasIncludes = false;\n\t\t\t\tfor (var i = 0; i < list.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar domain = list[i];\n\t\t\t\t\tif (this.ignoreTrailingDot)\n\t\t\t\t\t{\n\t\t\t\t\t\tdomain = domain.replace(/\\.+$/, \"\");\n\t\t\t\t\t}\n\t\t\t\t\tif (domain == \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tvar include;\n\t\t\t\t\tif (domain.charAt(0) == \"~\")\n\t\t\t\t\t{\n\t\t\t\t\t\tinclude = false;\n\t\t\t\t\t\tdomain = domain.substr(1);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tinclude = true;\n\t\t\t\t\t\thasIncludes = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!domains)\n\t\t\t\t\t{\n\t\t\t\t\t\tdomains = createDict();\n\t\t\t\t\t}\n\t\t\t\t\tdomains[domain] = include;\n\t\t\t\t}\n\t\t\t\tdomains[\"\"] = !hasIncludes;\n\t\t\t}\n\t\t\tthis.domainSource = null;\n\t\t}\n\t\treturn this.domains;\n\t},\n\tsitekeys: null,\n\tisActiveOnDomain: function(docDomain, sitekey)\n\t{\n\t\tif (this.getSitekeys() && (!sitekey || this.getSitekeys().indexOf(sitekey.toUpperCase()) < 0))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.getDomains())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tif (!docDomain)\n\t\t{\n\t\t\treturn this.getDomains()[\"\"];\n\t\t}\n\t\tif (this.ignoreTrailingDot)\n\t\t{\n\t\t\tdocDomain = docDomain.replace(/\\.+$/, \"\");\n\t\t}\n\t\tdocDomain = docDomain.toUpperCase();\n\t\twhile (true)\n\t\t{\n\t\t\tif (docDomain in this.getDomains())\n\t\t\t{\n\t\t\t\treturn this.domains[docDomain];\n\t\t\t}\n\t\t\tvar nextDot = docDomain.indexOf(\".\");\n\t\t\tif (nextDot < 0)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdocDomain = docDomain.substr(nextDot + 1);\n\t\t}\n\t\treturn this.domains[\"\"];\n\t},\n\tisActiveOnlyOnDomain: function(docDomain)\n\t{\n\t\tif (!docDomain || !this.getDomains() || this.getDomains()[\"\"])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (this.ignoreTrailingDot)\n\t\t{\n\t\t\tdocDomain = docDomain.replace(/\\.+$/, \"\");\n\t\t}\n\t\tdocDomain = docDomain.toUpperCase();\n\t\tfor (var domain in this.getDomains())\n\t\t{\n\t\t\tif (this.domains[domain] && domain != docDomain && (domain.length <= docDomain.length || domain.indexOf(\".\" + docDomain) != domain.length - docDomain.length - 1))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n});\n\nfunction RegExpFilter(text, regexpSource, contentType, matchCase, domains, thirdParty, sitekeys)\n{\n\tActiveFilter.call(this, text, domains, sitekeys);\n\tif (contentType != null)\n\t{\n\t\tthis.contentType = contentType;\n\t}\n\tif (matchCase)\n\t{\n\t\tthis.matchCase = matchCase;\n\t}\n\tif (thirdParty != null)\n\t{\n\t\tthis.thirdParty = thirdParty;\n\t}\n\tif (sitekeys != null)\n\t{\n\t\tthis.sitekeySource = sitekeys;\n\t}\n\tif (regexpSource.length >= 2 && regexpSource.charAt(0) == \"/\" && regexpSource.charAt(regexpSource.length - 1) == \"/\")\n\t{\n\t\tvar regexp = new RegExp(regexpSource.substr(1, regexpSource.length - 2), this.matchCase ? \"\" : \"i\");\n\t\tthis.regexp = regexp;\n\t}\n\telse\n\t{\n\t\tthis.regexpSource = regexpSource;\n\t}\n}\nextend(RegExpFilter, ActiveFilter, {\n\tdomainSourceIsUpperCase: true,\n\tlength: 1,\n\tdomainSeparator: \"|\",\n\tregexpSource: null,\n\tgetRegexp: function()\n\t{\n\t\tvar prop = getOwnPropertyDescriptor(this, \"regexp\");\n\t\tif (prop)\n\t\t{\n\t\t\treturn prop;\n\t\t}\n\t\tvar source = this.regexpSource.replace(/\\*+/g, \"*\").replace(/\\^\\|$/, \"^\").replace(/\\W/g, \"\\\\$&\").replace(/\\\\\\*/g, \".*\").replace(/\\\\\\^/g, \"(?:[\\\\x00-\\\\x24\\\\x26-\\\\x2C\\\\x2F\\\\x3A-\\\\x40\\\\x5B-\\\\x5E\\\\x60\\\\x7B-\\\\x7F]|$)\").replace(/^\\\\\\|\\\\\\|/, \"^[\\\\w\\\\-]+:\\\\/+(?!\\\\/)(?:[^\\\\/]+\\\\.)?\").replace(/^\\\\\\|/, \"^\").replace(/\\\\\\|$/, \"$\").replace(/^(\\.\\*)/, \"\").replace(/(\\.\\*)$/, \"\");\n\t\tvar regexp = new RegExp(source, this.matchCase ? \"\" : \"i\");\n\t\tthis.regexp = regexp;\n\t\treturn regexp;\n\t},\n\tcontentType: 2147483647,\n\tmatchCase: false,\n\tthirdParty: null,\n\tsitekeySource: null,\n\tgetSitekeys: function()\n\t{\n\t\tvar prop = getOwnPropertyDescriptor(this, \"sitekeys\");\n\t\tif (prop)\n\t\t{\n\t\t\treturn prop;\n\t\t}\n\t\tvar sitekeys = null;\n\t\tif (this.sitekeySource)\n\t\t{\n\t\t\tsitekeys = this.sitekeySource.split(\"|\");\n\t\t\tthis.sitekeySource = null;\n\t\t}\n\t\tthis.sitekeys = sitekeys;\n\t\treturn this.sitekeys;\n\t},\n\tmatches: function(location, contentType, docDomain, thirdParty, sitekey)\n\t{\n\t\tif (this.getRegexp().test(location) && this.isActiveOnDomain(docDomain, sitekey))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n});\nRegExpFilter.prototype[\"0\"] = \"#this\";\nRegExpFilter.fromText = function(text)\n{\n\tvar blocking = true;\n\tvar origText = text;\n\tif (text.indexOf(\"@@\") == 0)\n\t{\n\t\tblocking = false;\n\t\ttext = text.substr(2);\n\t}\n\tvar contentType = null;\n\tvar matchCase = null;\n\tvar domains = null;\n\tvar sitekeys = null;\n\tvar thirdParty = null;\n\tvar collapse = null;\n\tvar options;\n\tvar match = text.indexOf(\"$\") >= 0 ? Filter.optionsRegExp.exec(text) : null;\n\tif (match)\n\t{\n\t\toptions = match[1].toUpperCase().split(\",\");\n\t\ttext = match.input.substr(0, match.index);\n\t\tfor (var _loopIndex6 = 0; _loopIndex6 < options.length; ++_loopIndex6)\n\t\t{\n\t\t\tvar option = options[_loopIndex6];\n\t\t\tvar value = null;\n\t\t\tvar separatorIndex = option.indexOf(\"=\");\n\t\t\tif (separatorIndex >= 0)\n\t\t\t{\n\t\t\t\tvalue = option.substr(separatorIndex + 1);\n\t\t\t\toption = option.substr(0, separatorIndex);\n\t\t\t}\n\t\t\toption = option.replace(/-/, \"_\");\n\t\t\tif (option in RegExpFilter.typeMap)\n\t\t\t{\n\t\t\t\tif (contentType == null)\n\t\t\t\t{\n\t\t\t\t\tcontentType = 0;\n\t\t\t\t}\n\t\t\t\tcontentType |= RegExpFilter.typeMap[option];\n\t\t\t}\n\t\t\telse if (option.charAt(0) == \"~\" && option.substr(1) in RegExpFilter.typeMap)\n\t\t\t{\n\t\t\t\tif (contentType == null)\n\t\t\t\t{\n\t\t\t\t\tcontentType = RegExpFilter.prototype.contentType;\n\t\t\t\t}\n\t\t\t\tcontentType &= ~RegExpFilter.typeMap[option.substr(1)];\n\t\t\t}\n\t\t\telse if (option == \"MATCH_CASE\")\n\t\t\t{\n\t\t\t\tmatchCase = true;\n\t\t\t}\n\t\t\telse if (option == \"~MATCH_CASE\")\n\t\t\t{\n\t\t\t\tmatchCase = false;\n\t\t\t}\n\t\t\telse if (option == \"DOMAIN\" && typeof value != \"undefined\")\n\t\t\t{\n\t\t\t\tdomains = value;\n\t\t\t}\n\t\t\telse if (option == \"THIRD_PARTY\")\n\t\t\t{\n\t\t\t\tthirdParty = true;\n\t\t\t}\n\t\t\telse if (option == \"~THIRD_PARTY\")\n\t\t\t{\n\t\t\t\tthirdParty = false;\n\t\t\t}\n\t\t\telse if (option == \"COLLAPSE\")\n\t\t\t{\n\t\t\t\tcollapse = true;\n\t\t\t}\n\t\t\telse if (option == \"~COLLAPSE\")\n\t\t\t{\n\t\t\t\tcollapse = false;\n\t\t\t}\n\t\t\telse if (option == \"SITEKEY\" && typeof value != \"undefined\")\n\t\t\t{\n\t\t\t\tsitekeys = value;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new InvalidFilter(origText, \"Unknown option \" + option.toLowerCase());\n\t\t\t}\n\t\t}\n\t}\n\tif (!blocking && (contentType == null || contentType & RegExpFilter.typeMap.DOCUMENT) && (!options || options.indexOf(\"DOCUMENT\") < 0) && !/^\\|?[\\w\\-]+:/.test(text))\n\t{\n\t\tif (contentType == null)\n\t\t{\n\t\t\tcontentType = RegExpFilter.prototype.contentType;\n\t\t}\n\t\tcontentType &= ~RegExpFilter.typeMap.DOCUMENT;\n\t}\n\ttry\n\t{\n\t\tif (blocking)\n\t\t{\n\t\t\treturn new BlockingFilter(origText, text, contentType, matchCase, domains, thirdParty, sitekeys, collapse);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn new WhitelistFilter(origText, text, contentType, matchCase, domains, thirdParty, sitekeys);\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\treturn new InvalidFilter(origText, e);\n\t}\n};\nRegExpFilter.typeMap = {\n\tOTHER: 1,\n\tSCRIPT: 2,\n\tIMAGE: 4,\n\tSTYLESHEET: 8,\n\tOBJECT: 16,\n\tSUBDOCUMENT: 32,\n\tDOCUMENT: 64,\n\tXBL: 1,\n\tPING: 1,\n\tXMLHTTPREQUEST: 2048,\n\tOBJECT_SUBREQUEST: 4096,\n\tDTD: 1,\n\tMEDIA: 16384,\n\tFONT: 32768,\n\tBACKGROUND: 4,\n\tPOPUP: 268435456,\n\tELEMHIDE: 1073741824\n};\nRegExpFilter.prototype.contentType &= ~ (RegExpFilter.typeMap.ELEMHIDE | RegExpFilter.typeMap.POPUP);\n\nfunction BlockingFilter(text, regexpSource, contentType, matchCase, domains, thirdParty, sitekeys, collapse)\n{\n\tRegExpFilter.call(this, text, regexpSource, contentType, matchCase, domains, thirdParty, sitekeys);\n\tthis.collapse = collapse;\n}\nextend(BlockingFilter, RegExpFilter, {\n\tcollapse: null\n});\n\nfunction WhitelistFilter(text, regexpSource, contentType, matchCase, domains, thirdParty, sitekeys)\n{\n\tRegExpFilter.call(this, text, regexpSource, contentType, matchCase, domains, thirdParty, sitekeys);\n}\nextend(WhitelistFilter, RegExpFilter, {\n});\n\nfunction Matcher()\n{\n\tthis.clear();\n}\nMatcher.prototype = {\n\tfilterByKeyword: null,\n\tkeywordByFilter: null,\n\tclear: function()\n\t{\n\t\tthis.filterByKeyword = createDict();\n\t\tthis.keywordByFilter = createDict();\n\t},\n\tadd: function(filter)\n\t{\n\t\tif (filter.text in this.keywordByFilter)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tvar keyword = this.findKeyword(filter);\n\t\tvar oldEntry = this.filterByKeyword[keyword];\n\t\tif (typeof oldEntry == \"undefined\")\n\t\t{\n\t\t\tthis.filterByKeyword[keyword] = filter;\n\t\t}\n\t\telse if (oldEntry.length == 1)\n\t\t{\n\t\t\tthis.filterByKeyword[keyword] = [oldEntry, filter];\n\t\t}\n\t\telse\n\t\t{\n\t\t\toldEntry.push(filter);\n\t\t}\n\t\tthis.keywordByFilter[filter.text] = keyword;\n\t},\n\tremove: function(filter)\n\t{\n\t\tif (!(filter.text in this.keywordByFilter))\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tvar keyword = this.keywordByFilter[filter.text];\n\t\tvar list = this.filterByKeyword[keyword];\n\t\tif (list.length <= 1)\n\t\t{\n\t\t\tdelete this.filterByKeyword[keyword];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar index = list.indexOf(filter);\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\tlist.splice(index, 1);\n\t\t\t\tif (list.length == 1)\n\t\t\t\t{\n\t\t\t\t\tthis.filterByKeyword[keyword] = list[0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdelete this.keywordByFilter[filter.text];\n\t},\n\tfindKeyword: function(filter)\n\t{\n\t\tvar result = \"\";\n\t\tvar text = filter.text;\n\t\tif (Filter.regexpRegExp.test(text))\n\t\t{\n\t\t\treturn result;\n\t\t}\n\t\tvar match = Filter.optionsRegExp.exec(text);\n\t\tif (match)\n\t\t{\n\t\t\ttext = match.input.substr(0, match.index);\n\t\t}\n\t\tif (text.substr(0, 2) == \"@@\")\n\t\t{\n\t\t\ttext = text.substr(2);\n\t\t}\n\t\tvar candidates = text.toLowerCase().match(/[^a-z0-9%*][a-z0-9%]{3,}(?=[^a-z0-9%*])/g);\n\t\tif (!candidates)\n\t\t{\n\t\t\treturn result;\n\t\t}\n\t\tvar hash = this.filterByKeyword;\n\t\tvar resultCount = 16777215;\n\t\tvar resultLength = 0;\n\t\tfor (var i = 0, l = candidates.length; i < l; i++)\n\t\t{\n\t\t\tvar candidate = candidates[i].substr(1);\n\t\t\tvar count = candidate in hash ? hash[candidate].length : 0;\n\t\t\tif (count < resultCount || count == resultCount && candidate.length > resultLength)\n\t\t\t{\n\t\t\t\tresult = candidate;\n\t\t\t\tresultCount = count;\n\t\t\t\tresultLength = candidate.length;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t},\n\thasFilter: function(filter)\n\t{\n\t\treturn filter.text in this.keywordByFilter;\n\t},\n\tgetKeywordForFilter: function(filter)\n\t{\n\t\tif (filter.text in this.keywordByFilter)\n\t\t{\n\t\t\treturn this.keywordByFilter[filter.text];\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\t_checkEntryMatch: function(keyword, location, contentType, docDomain, thirdParty, sitekey)\n\t{\n\t\tvar list = this.filterByKeyword[keyword];\n\t\tfor (var i = 0; i < list.length; i++)\n\t\t{\n\t\t\tvar filter = list[i];\n\t\t\tif (filter == \"#this\")\n\t\t\t{\n\t\t\t\tfilter = list;\n\t\t\t}\n\t\t\tif (filter.matches(location, contentType, docDomain, thirdParty, sitekey))\n\t\t\t{\n\t\t\t\treturn filter;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t},\n\tmatchesAny: function(location, contentType, docDomain, thirdParty, sitekey)\n\t{\n\t\tvar candidates = location.toLowerCase().match(/[a-z0-9%]{3,}/g);\n\t\tif (candidates === null)\n\t\t{\n\t\t\tcandidates = [];\n\t\t}\n\t\tcandidates.push(\"\");\n\t\tfor (var i = 0, l = candidates.length; i < l; i++)\n\t\t{\n\t\t\tvar substr = candidates[i];\n\t\t\tif (substr in this.filterByKeyword)\n\t\t\t{\n\t\t\t\tvar result = this._checkEntryMatch(substr, location, contentType, docDomain, thirdParty, sitekey);\n\t\t\t\tif (result)\n\t\t\t\t{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n};\n\nfunction CombinedMatcher()\n{\n\tthis.blacklist = new Matcher();\n\tthis.whitelist = new Matcher();\n\tthis.resultCache = createDict();\n}\nCombinedMatcher.maxCacheEntries = 1000;\nCombinedMatcher.prototype = {\n\tblacklist: null,\n\twhitelist: null,\n\tresultCache: null,\n\tcacheEntries: 0,\n\tclear: function()\n\t{\n\t\tthis.blacklist.clear();\n\t\tthis.whitelist.clear();\n\t\tthis.resultCache = createDict();\n\t\tthis.cacheEntries = 0;\n\t},\n\tadd: function(filter)\n\t{\n\t\tif (filter instanceof WhitelistFilter)\n\t\t{\n\t\t\tthis.whitelist.add(filter);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.blacklist.add(filter);\n\t\t}\n\t\tif (this.cacheEntries > 0)\n\t\t{\n\t\t\tthis.resultCache = createDict();\n\t\t\tthis.cacheEntries = 0;\n\t\t}\n\t},\n\tremove: function(filter)\n\t{\n\t\tif (filter instanceof WhitelistFilter)\n\t\t{\n\t\t\tthis.whitelist.remove(filter);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.blacklist.remove(filter);\n\t\t}\n\t\tif (this.cacheEntries > 0)\n\t\t{\n\t\t\tthis.resultCache = createDict();\n\t\t\tthis.cacheEntries = 0;\n\t\t}\n\t},\n\tfindKeyword: function(filter)\n\t{\n\t\tif (filter instanceof WhitelistFilter)\n\t\t{\n\t\t\treturn this.whitelist.findKeyword(filter);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.blacklist.findKeyword(filter);\n\t\t}\n\t},\n\thasFilter: function(filter)\n\t{\n\t\tif (filter instanceof WhitelistFilter)\n\t\t{\n\t\t\treturn this.whitelist.hasFilter(filter);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.blacklist.hasFilter(filter);\n\t\t}\n\t},\n\tgetKeywordForFilter: function(filter)\n\t{\n\t\tif (filter instanceof WhitelistFilter)\n\t\t{\n\t\t\treturn this.whitelist.getKeywordForFilter(filter);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.blacklist.getKeywordForFilter(filter);\n\t\t}\n\t},\n\tisSlowFilter: function(filter)\n\t{\n\t\tvar matcher = filter instanceof WhitelistFilter ? this.whitelist : this.blacklist;\n\t\tif (matcher.hasFilter(filter))\n\t\t{\n\t\t\treturn !matcher.getKeywordForFilter(filter);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn !matcher.findKeyword(filter);\n\t\t}\n\t},\n\tmatchesAnyInternal: function(location, contentType, docDomain, thirdParty, sitekey)\n\t{\n\t\tvar candidates = location.toLowerCase().match(/[a-z0-9%]{3,}/g);\n\t\tif (candidates === null)\n\t\t{\n\t\t\tcandidates = [];\n\t\t}\n\t\tcandidates.push(\"\");\n\t\tvar blacklistHit = null;\n\t\tfor (var i = 0, l = candidates.length; i < l; i++)\n\t\t{\n\t\t\tvar substr = candidates[i];\n\t\t\tif (substr in this.whitelist.filterByKeyword)\n\t\t\t{\n\t\t\t\tvar result = this.whitelist._checkEntryMatch(substr, location, contentType, docDomain, thirdParty, sitekey);\n\t\t\t\tif (result)\n\t\t\t\t{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (substr in this.blacklist.filterByKeyword && blacklistHit === null)\n\t\t\t{\n\t\t\t\tblacklistHit = this.blacklist._checkEntryMatch(substr, location, contentType, docDomain, thirdParty, sitekey);\n\t\t\t}\n\t\t}\n\t\treturn blacklistHit;\n\t},\n\tmatchesAny: function(location, docDomain)\n\t{\n\t\tvar key = location + \" \" + docDomain + \" \";\n\t\tif (key in this.resultCache)\n\t\t{\n\t\t\treturn this.resultCache[key];\n\t\t}\n\t\tvar result = this.matchesAnyInternal(location, 0, docDomain, null, null);\n\t\tif (this.cacheEntries >= CombinedMatcher.maxCacheEntries)\n\t\t{\n\t\t\tthis.resultCache = createDict();\n\t\t\tthis.cacheEntries = 0;\n\t\t}\n\t\tthis.resultCache[key] = result;\n\t\tthis.cacheEntries++;\n\t\treturn result;\n\t}\n};\nvar defaultMatcher = new CombinedMatcher();\n\nfor (var i = 0; i < rules.length; i++) {\n\tdefaultMatcher.add(Filter.fromText(rules[i]));\n}\n\nvar subnetIpRangeList = [\n0,1,\n167772160,184549376,\t//10.0.0.0/8\n2886729728,2887778304,\t//172.16.0.0/12\n3232235520,3232301056,\t//192.168.0.0/16\n2130706432,2130706688\t//127.0.0.0/24\n];\n\nfunction convertAddress(ipchars) {\n\tvar bytes = ipchars.split('\"'.'\"');\n\tvar result = (bytes[0] << 24) |\n\t(bytes[1] << 16) |\n\t(bytes[2] << 8) |\n\t(bytes[3]);\n\treturn result >>> 0;\n}\n\nfunction check_ipv4(host) {\n\tvar re_ipv4 = /^\\d+\\.\\d+\\.\\d+\\.\\d+$/g;\n\tif (re_ipv4.test(host)) {\n\t\treturn true;\n\t}\n}\nfunction check_ipv6(host) {\n\tvar re_ipv6 = /^\\[?([a-fA-F0-9]{0,4}\\:){1,7}[a-fA-F0-9]{0,4}\\]?$/g;\n\tif (re_ipv6.test(host)) {\n\t\treturn true;\n\t}\n}\nfunction check_ipv6_dns(dnsstr) {\n\tvar re_ipv6 = /([a-fA-F0-9]{0,4}\\:){1,7}[a-fA-F0-9]{0,4}(%[0-9]+)?/g;\n\tif (re_ipv6.test(dnsstr)) {\n\t\treturn true;\n\t}\n}\nfunction isInSubnetRange(ipRange, intIp) {\n\tfor ( var i = 0; i < 10; i += 2 ) {\n\t\tif ( ipRange[i] <= intIp && intIp < ipRange[i+1] )\n\t\t\treturn true;\n\t}\n}\nfunction getProxyFromIP(strIp) {\n\tvar intIp = convertAddress(strIp);\n\tif ( isInSubnetRange(subnetIpRangeList, intIp) ) {\n\t\treturn direct;\n\t}\n\treturn ip_proxy();\n}\n\nfunction FindProxyForURL(url, host) {\n\tif ( isPlainHostName(host) === true ) {\n\t\treturn direct;\n\t}\n\tif (defaultMatcher.matchesAny(url, host) instanceof BlockingFilter) {\n\t\treturn wall_proxy();\n\t}\n\tif ( check_ipv4(host) === true ) {\n\t\treturn getProxyFromIP(host);\n\t}\n\treturn direct;\n}\n'\n}\nprefix_suffix\nurlsafe_base64_d(){\n\tdate=$(echo -n \"$1\"|sed 's/-/+/g;s/_/\\//g'|base64 -d)\n\techo -e \"${date}\"\n}\nPAC_TEXT=$(curl -m 10 -s \"${PAC_URL}\")\nPAC_BASE64=$(urlsafe_base64_d \"${PAC_TEXT}\"|grep -v \"!\"|sed '1d;s/\\\\/\\\\\\\\/g;/^\\s*$/d;s/^/\t\"&/g;s/$/&\",/g;$s/.$//')\nPAC_NUM=$(echo \"${PAC_BASE64}\"|wc -l)\necho \"${PAC_TAME}${PAC_prefix}${PAC_BASE64}${PAC_suffix}\" > \"${Output_URL}\"\nsed -i 's/$/\\r/' \"${Output_URL}\"\necho \"${PAC_NUM}\""
        },
        {
          "name": "pipes.sh",
          "type": "blob",
          "size": 10.900390625,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n#=================================================\n#       System Required: CentOS/Debian/Ubuntu\n#       Description: PipeSocks\n#       Version: 1.0.5\n#       Author: Toyo\n#       Blog: https://doub.io/pipesocks-jc1/\n#       Github: https://github.com/pipesocks/install\n#=================================================\npipes_file=\"/usr/local/pipesocks\"\npipes_ver=\"/usr/local/pipesocks/ver.txt\"\npipes_log=\"/usr/local/pipesocks/pipesocks.log\"\npipes_config_file=\"/etc/pipesocks\"\npipes_config=\"/etc/pipesocks/pipesocks.conf\"\nInfo_font_prefix=\"\\033[32m\" && Error_font_prefix=\"\\033[31m\" && Info_background_prefix=\"\\033[42;37m\" && Error_background_prefix=\"\\033[41;37m\" && Font_suffix=\"\\033[0m\"\n\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_installed_status(){\n\t[[ ! -e ${pipes_file} ]] && echo -e \"${Error_font_prefix}[错误]${Font_suffix} PipeSocks 没有安装，请检查 !\" && exit 1\n}\ncheck_new_ver(){\n\t#pipes_new_ver=`curl -m 10 -s \"https://pipesocks.github.io/js/index.js\" | sed -n \"15p\" | awk -F \": \" '{print $NF}' | sed 's/\"//g;s/,//g'`\n\tpipes_new_ver=`wget -qO- \"https://pipesocks.github.io/dist.json\" | sed -n \"15p\" | awk -F \": \" '{print $NF}' | sed 's/\"//g;s/,//g'`\n\t[[ -z ${pipes_new_ver} ]] && echo -e \"${Error_font_prefix}[错误]${Font_suffix} PipeSocks 最新版本获取失败 !\" && exit 1\n}\ncheck_ver_comparison(){\n\tpipes_now_ver=`cat ${pipes_ver}`\n\tif [[ ${pipes_now_ver} != \"\" ]]; then\n\t\tif [[ ${pipes_now_ver} != ${pipes_new_ver} ]]; then\n\t\t\techo -e \"${Info_font_prefix}[信息]${Font_suffix} 发现 PipeSocks 已有新版本 [v${pipes_new_ver}] !\"\n\t\t\tread -e -p \"是否更新 ? [Y/n] :\" yn\n\t\t\t[[ -z \"${yn}\" ]] && yn=\"y\"\n\t\t\tif [[ $yn == [Yy] ]]; then\n\t\t\t\tPID=`ps -ef|grep \"pipesocks\"|grep -v \"grep\"|awk '{print $2}'` && [[ ! -z $PID ]] && kill -9 ${PID}\n\t\t\t\tDownload_pipes\n\t\t\t\tRead_config\n\t\t\t\tStart_pipes\n\t\t\tfi\n\t\telse\n\t\t\techo -e \"${Info_font_prefix}[信息]${Font_suffix} 当前 PipeSocks 已是最新版本 [v${pipes_new_ver}] !\" && exit 1\n\t\tfi\n\telse\n\t\techo \"${pipes_new_ver}\" > ${pipes_ver}\n\t\techo -e \"${Info_font_prefix}[信息]${Font_suffix} 当前 PipeSocks 已是最新版本 [v${pipes_new_ver}] !\" && exit 1\n\tfi\n}\nDownload_pipes(){\n\tcd \"/usr/local\"\n\tif [[ ${bit} == \"x86_64\" ]]; then\n\t\t#wget -O \"pipesocks-linux.tar.xz\" \"https://coding.net/u/yvbbrjdr/p/pipesocks-release/git/raw/master/pipesocks-${pipes_new_ver}-linux.tar.xz\"\n\t\twget --no-check-certificate -O \"pipesocks-linux.tar.xz\" \"https://github.com/pipesocks/pipesocks/releases/download/${pipes_new_ver}/pipesocks-${pipes_new_ver}-linux.tar.xz\"\n\telse\n\t\techo -e \"${Error_font_prefix}[错误]${Font_suffix} 不支持 ${bit} !\" && exit 1\n\tfi\n\t[[ ! -e \"pipesocks-linux.tar.xz\" ]] && echo -e \"${Error_font_prefix}[错误]${Font_suffix} PipeSocks 下载失败 !\" && exit 1\n\t[[ -e ${pipes_file} ]] && rm -rf ${pipes_file}\n\ttar -xJf pipesocks-linux.tar.xz && rm -rf pipesocks-linux.tar.xz\n\t[[ ! -e ${pipes_file} ]] && echo -e \"${Error_font_prefix}[错误]${Font_suffix} PipeSocks 解压失败或压缩文件不完整 !\" && exit 1\n\tmv pipesocks pipes\n\tmkdir pipesocks/\n\tmv pipes pipesocks/pipesocks\n\tcd ${pipes_file}\n\techo \"${pipes_new_ver}\" > ${pipes_ver}\n}\nService_pipes(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/pipes_centos -O /etc/init.d/pipes; then\n\t\t\techo -e \"${Error} ShadowsocksR服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/pipes\n\t\tchkconfig --add pipes\n\t\tchkconfig pipes on\n\telse\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/pipes_debian -O /etc/init.d/pipes; then\n\t\t\techo -e \"${Error} ShadowsocksR服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/pipes\n\t\tupdate-rc.d -f pipes defaults\n\tfi\n\techo -e \"${Info} ShadowsocksR服务 管理脚本下载完成 !\"\n}\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${pipes_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${pipes_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${pump_port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${pump_port} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nWrite_config(){\n\tif [[ ! -e ${pipes_config} ]]; then\n\t\t[[ ! -e ${pipes_config_file} ]] && mkdir ${pipes_config_file}\n\tfi\n\tcat > ${pipes_config}<<-EOF\npump_port=${pipes_port}\npump_passwd=${pipes_passwd}\nEOF\n}\nRead_config(){\n\t[[ ! -e ${pipes_config} ]] && echo -e \"${Error_font_prefix}[错误]${Font_suffix} PipeSocks 配置文件不存在 !\" && exit 1\n\tpump_port=`cat ${pipes_config}|grep \"pump_port\"|awk -F \"=\" '{print $NF}'`\n\tpump_passwd=`cat ${pipes_config}|grep \"pump_passwd\"|awk -F \"=\" '{print $NF}'`\n}\nSet_user_pipes(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 PipeSocks 本地监听端口 [1-65535]\"\n\t\tread -e -p \"(默认: 2333):\" pipes_port\n\t\t[[ -z \"$pipes_port\" ]] && pipes_port=\"2333\"\n\t\techo $((${pipes_port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${pipes_port} -ge 1 ]] && [[ ${pipes_port} -le 65535 ]]; then\n\t\t\t\techo && echo \"————————————————————\"\n\t\t\t\techo -e \"\t端口 : ${Info_font_prefix} ${pipes_port}${Font_suffix}\"\n\t\t\t\techo \"————————————————————\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\tdone\n\techo \"请输入 PipeSocks 密码\"\n\tread -e -p \"(默认: doub.io):\" pipes_passwd\n\t[[ -z \"${pipes_passwd}\" ]] && pipes_passwd=\"doub.io\"\n\techo && echo \"————————————————————\"\n\techo -e \"\t密码 : ${Info_font_prefix}${pipes_passwd}${Font_suffix}\"\n\techo \"————————————————————\" && echo\n}\nSet_pipes(){\n\tcheck_installed_status \n\tSet_user_pipes\n\tRead_config\n\tDel_iptables\n\tAdd_iptables\n\tSave_iptables\n\tWrite_config\n\tRestart_pipes\n}\nView_pipes(){\n\tcheck_installed_status\n\tRead_config\n\tip=`wget -qO- -t1 -T2 ipinfo.io/ip`\n\t[[ -z ${ip} ]] && ip=\"VPS_IP\"\n\tclear && echo \"————————————————\" && echo\n\techo -e \" 你的 PipeSocks 账号信息 :\" && echo\n\techo -e \" I  P\\t: ${Info_font_prefix}${ip}${Font_suffix}\"\n\techo -e \" 端口\\t: ${Info_font_prefix}${pump_port}${Font_suffix}\"\n\techo -e \" 密码\\t: ${Info_font_prefix}${pump_passwd}${Font_suffix}\"\n\techo && echo \"————————————————\"\n\tPID=`ps -ef|grep \"pipesocks\"|grep -v \"grep\"|awk '{print $2}'`\n\tif [[ ! -z $PID ]]; then\n\t\techo -e \" 当前状态: ${Info_font_prefix}正在运行${Font_suffix}\"\n\telse\n\t\techo -e \" 当前状态: ${Error_font_prefix}没有运行${Font_suffix}\"\n\tfi\n\techo\n}\nInstall_pipes(){\n\t[[ -e ${pipes_file} ]] && echo -e \"${Error_font_prefix}[错误]${Font_suffix} 检测到 PipeSocks 已安装，如需继续，请先卸载 !\" && exit 1\n\tcheck_new_ver\n\tSet_user_pipes\n\tDownload_pipes\n\tService_pipes\n\tWrite_config\n\tSet_iptables\n\tAdd_iptables\n\tSave_iptables\n\tStart_pipes\n}\nUpdate_pipes(){\n\tcheck_installed_status\n\tcheck_new_ver\n\tcheck_ver_comparison\n}\nStart_pipes(){\n\tcheck_installed_status\n\tPID=`ps -ef|grep \"pipesocks\"|grep -v \"grep\"|awk '{print $2}'`\n\t[[ ! -z $PID ]] && echo -e \"${Error_font_prefix}[错误]${Font_suffix} PipeSocks 进程正在运行，请检查 !\" && exit 1\n\t/etc/init.d/pipes start\n}\nStop_pipes(){\n\tcheck_installed_status\n\tPID=`ps -ef|grep \"pipesocks\"|grep -v \"grep\"|awk '{print $2}'`\n\t[[ -z $PID ]] && echo -e \"${Error_font_prefix}[错误]${Font_suffix} 没有发现 PipeSocks 进程运行，请检查 !\" && exit 1\n\t/etc/init.d/pipes stop\n}\nRestart_pipes(){\n\tcheck_installed_status\n\tPID=`ps -ef|grep \"pipesocks\"|grep -v \"grep\"|awk '{print $2}'`\n\tif [[ ! -z $PID ]]; then\n\t\t/etc/init.d/pipes stop\n\tfi\n\t/etc/init.d/pipes start\n}\nLog_pipes(){\n\tcheck_installed_status\n\t[[ ! -e ${pipes_log} ]] && echo -e \"${Error_font_prefix}[错误]${Font_suffix} PipeSocks 日志文件不存在 !\" && exit 1\n\techo && echo -e \"使用 ${Info_background_prefix} Ctrl+C ${Font_suffix} 键退出查看日志 !\" && echo -e \"如果需要查看完整日志内容，请用 ${Info_background_prefix}cat ${pipes_log}${Font_suffix} 命令。\" && echo\n\ttail -f ${pipes_log}\n}\nUninstall_pipes(){\n\tcheck_installed_status\n\techo \"确定要卸载 PipeSocks ? [y/N]\" && echo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tPID=`ps -ef|grep \"pipesocks\"|grep -v \"grep\"|awk '{print $2}'`\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tRead_config\n\t\tDel_iptables\n\t\tSave_iptables\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del pipes\n\t\telse\n\t\t\tupdate-rc.d -f pipes remove\n\t\tfi\n\t\trm -rf /etc/init.d/pipes\n\t\trm -rf ${pipes_file} && rm -rf  ${pipes_config_file}\n\t\techo && echo \"PipeSocks 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\ncheck_sys\necho && echo \"请输入一个数字来选择选项\" && echo\necho -e \" 1. 安装 PipeSocks\"\necho -e \" 2. 升级 PipeSocks\"\necho -e \" 3. 卸载 PipeSocks\"\necho \"————————————\"\necho -e \" 4. 启动 PipeSocks\"\necho -e \" 5. 停止 PipeSocks\"\necho -e \" 6. 重启 PipeSocks\"\necho \"————————————\"\necho -e \" 7. 设置 PipeSocks 账号\"\necho -e \" 8. 查看 PipeSocks 账号\"\necho -e \" 9. 查看 PipeSocks 日志\"\necho \"————————————\" && echo\nif [[ -e ${pipes_file} ]]; then\n\tPID=`ps -ef|grep \"pipesocks\"|grep -v \"grep\"|awk '{print $2}'`\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\techo -e \" 当前状态: ${Info_font_prefix}已安装${Font_suffix} 并 ${Info_font_prefix}已启动${Font_suffix}\"\n\telse\n\t\techo -e \" 当前状态: ${Info_font_prefix}已安装${Font_suffix} 但 ${Error_font_prefix}未启动${Font_suffix}\"\n\tfi\nelse\n\techo -e \" 当前状态: ${Error_font_prefix}未安装${Font_suffix}\"\nfi\necho\nread -e -p \" 请输入数字 [1-9]:\" num\ncase \"$num\" in\n\t1)\n\tInstall_pipes\n\t;;\n\t2)\n\tUpdate_pipes\n\t;;\n\t3)\n\tUninstall_pipes\n\t;;\n\t4)\n\tStart_pipes\n\t;;\n\t5)\n\tStop_pipes\n\t;;\n\t6)\n\tRestart_pipes\n\t;;\n\t7)\n\tSet_pipes\n\t;;\n\t8)\n\tView_pipes\n\t;;\n\t9)\n\tLog_pipes\n\t;;\n\t*)\n\techo \"请输入正确数字 [1-9]\"\n\t;;\nesac"
        },
        {
          "name": "pserver.sh",
          "type": "blob",
          "size": 12.64453125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: Peerflix Server\n#\tVersion: 1.1.0\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/wlzy-13/\n#=================================================\n\nsh_ver=\"1.1.0\"\nnode_ver=\"v8.11.3\"\nnode_file=\"/etc/node\"\nps_file=\"/etc/node/lib/node_modules/peerflix-server\"\nconf_file=\"/etc/peerflix-server\"\nps_conf=\"/etc/peerflix-server/peerflix-server.conf\"\nps_log=\"/tmp/peerflix-server.log\"\nbt_port=\"6881\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前非ROOT账号(或没有ROOT权限)，无法继续操作，请更换ROOT账号或使用 ${Green_background_prefix}sudo su${Font_color_suffix} 命令获取临时ROOT权限（执行后可能会提示输入当前账号的密码）。\" && exit 1\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=$(uname -m)\n}\ncheck_installed_status(){\n\t[[ ! -e ${ps_file} ]] && echo -e \"${Error} Peerflix Server 没有安装，请检查 !\" && exit 1\n}\ncheck_pid(){\n\tPID=$(ps -ef | grep peerflix-server | grep -v grep |grep -v \"init.d\" |grep -v \"service\" |awk '{print $2}')\n}\nDownload_ps(){\n\techo -e \"${Info} 开始安装 node-js ...\"\n\tif [[ ! -e ${node_file} ]]; then\n\t\tcd /tmp\n\t\tif [[ ${bit} == \"x86_64\" ]]; then\n\t\t\tnode_name=\"node-${node_ver}-linux-x64\"\n\t\t\twget --no-check-certificate -O node.tar.xz \"https://nodejs.org/dist/${node_ver}/node-${node_ver}-linux-x64.tar.xz\"\n\t\telse\n\t\t\tnode_name=\"node-${node_ver}-linux-x86\"\n\t\t\twget --no-check-certificate -O node.tar.xz \"https://nodejs.org/dist/${node_ver}/node-${node_ver}-linux-x86.tar.xz\"\n\t\tfi\n\t\t[[ ! -e \"node.tar.xz\" ]] && echo -e \"${Error} Peerflix Server 压缩包下载失败 !\" && Download_shanhou 0\n\t\txz -d node.tar.xz\n\t\t[[ ! -e \"node.tar\" ]] && echo -e \"${Error} Peerflix Server 解压失败(可能是 压缩包损坏 或者 没有安装 XZ) !\" && Download_shanhou 1\n\t\ttar -xvf \"node.tar\" -C \"/etc\"\n\t\t[[ ! -e \"node.tar\" ]] && echo -e \"${Error} Peerflix Server 解压失败(可能是 压缩包损坏 或者 没有安装 Tar) !\" && Download_shanhou 2\n\t\tmv \"/etc/${node_name}\" ${node_file}\n\t\t[[ ! -e \"${node_file}\" ]] && echo -e \"${Error} Peerflix Server 文件夹重命名失败!\" && Download_shanhou 4\n\t\trm -rf \"/tmp/node.tar.xz\"\n\t\trm -rf \"/tmp/node.tar\"\n\t\tln -s ${node_file}/bin/node /usr/local/bin/node\n\t\tln -s ${node_file}/bin/npm /usr/local/bin/npm\n\t\techo -e \"${Info} node-js 安装完成，开始安装 peerflix-server ...\"\n\telse\n\t\techo -e \"${Info} node-js 已安装，开始安装 peerflix-server ...\"\n\tfi\n\t\n\tnpm install -g peerflix-server\n\tif [[ ! -e ${ps_file} ]]; then\n\t\techo -e \"${Error} Peerflix Server 安装失败，请检查 !\" && exit 1\n\telse\n\t\techo -e \"${Info} Peerflix Server 安装成功，继续...\"\n\tfi\n}\nDownload_shanhou(){\n\tif [[ $1 == 0 ]]; then\n\t\trm -rf ${conf_file}\n\telif [[ $1 == 1 ]]; then\n\t\trm -rf ${conf_file}\n\t\trm -rf \"/tmp/node.tar.xz\"\n\telif [[ $1 == 2 ]]; then\n\t\trm -rf ${conf_file}\n\t\trm -rf \"/tmp/node.tar.xz\"\n\t\trm -rf \"/tmp/node.tar\"\n\telif [[ $1 == 3 ]]; then\n\t\trm -rf ${conf_file}\n\t\trm -rf \"/tmp/node.tar.xz\"\n\t\trm -rf \"/tmp/node.tar\"\n\t\trm -rf \"/etc/node-${node_ver}-linux-x64\"\n\telif [[ $1 == 4 ]]; then\n\t\trm -rf ${conf_file}\n\t\trm -rf \"/tmp/node.tar.xz\"\n\t\trm -rf \"/tmp/node.tar\"\n\t\trm -rf \"/etc/node-${node_ver}-linux-x86\"\n\tfi\n\texit 1\n}\nService_ps(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/pserver_centos\" -O /etc/init.d/pserver; then\n\t\t\techo -e \"${Error} Peerflix Server服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/pserver\n\t\tchkconfig --add pserver\n\t\tchkconfig pserver on\n\telse\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/pserver_debian\" -O /etc/init.d/pserver; then\n\t\t\techo -e \"${Error} Peerflix Server服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/pserver\n\t\tupdate-rc.d -f pserver defaults\n\tfi\n\techo -e \"${Info} Peerflix Server服务 管理脚本下载完成 !\"\n}\nInstallation_dependency(){\n\txz_ver=$(xz -V)\n\ttar_ver=$(tar --version)\n\t[[ -z ${xz_ver} ]] && pack_name=\"xz \"\n\t[[ -z ${tar_ver} ]] && pack_name=\"${pack_name}tar\"\n\tif [[ ! -z ${pack_name} ]]; then\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum update\n\t\t\tyum install -y ${pack_name}\n\t\telse\n\t\t\tapt-get update\n\t\t\tapt-get install -y ${pack_name}\n\t\tfi\n\tfi\n\tmkdir \"${conf_file}\"\n}\nWrite_config(){\n\techo -e \"port = ${ps_port}\" > ${ps_conf}\n}\nRead_config(){\n\t[[ ! -e ${ps_conf} ]] && echo -e \"${Error} Peerflix Server 配置文件不存在 !\" && exit 1\n\tport=`cat ${ps_conf}|grep \"port = \"|awk -F \"port = \" '{print $NF}'`\n}\nSet_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 Peerflix Server 监听端口 [1-65535]（如果是绑定的域名，那么建议80端口）\"\n\t\tread -e -p \"(默认端口: 9000):\" ps_port\n\t\t[[ -z \"${ps_port}\" ]] && ps_port=\"9000\"\n\t\techo $((${ps_port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${ps_port} -ge 1 ]] && [[ ${ps_port} -le 65535 ]]; then\n\t\t\t\techo && echo \"========================\"\n\t\t\t\techo -e \"\t端口 : ${Red_background_prefix} ${ps_port} ${Font_color_suffix}\"\n\t\t\t\techo \"========================\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\tdone\n}\nSet_ps(){\n\tcheck_installed_status\n\tSet_port\n\tRead_config\n\tDel_iptables\n\tWrite_config\n\tAdd_iptables\n\tSave_iptables\n\tRestart_ps\n}\nInstall_ps(){\n\tcheck_root\n\t[[ -e ${ps_file} ]] && echo -e \"${Error} 检测到 Peerflix Server 已安装 !\" && exit 1\n\tcheck_sys\n\techo -e \"${Info} 开始设置 用户配置...\"\n\tSet_port\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始下载/安装...\"\n\tDownload_ps\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService_ps\n\techo -e \"${Info} 开始写入 配置文件...\"\n\tWrite_config\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart_ps\n}\nStart_ps(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} Peerflix Server 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/pserver start\n}\nStop_ps(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} Peerflix Server 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/pserver stop\n}\nRestart_ps(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/pserver stop\n\t/etc/init.d/pserver start\n}\nLog_ps(){\n\t[[ ! -e \"${ps_log}\" ]] && echo -e \"${Error} Peerflix Server 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${ps_log}${Font_color_suffix} 命令。\" && echo\n\ttail -f \"${ps_log}\"\n}\nUninstall_ps(){\n\tcheck_installed_status\n\techo \"确定要卸载 Peerflix Server ? (y/N)\"\n\techo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tport=`cat ${ps_conf}|grep \"port = \"|awk -F \"port = \" '{print $NF}'`\n\t\tDel_iptables\n\t\t\n\t\trm -rf /usr/local/bin/node\n\t\trm -rf /usr/local/bin/npm\n\t\trm -rf ${node_file}\n\t\trm -rf ${conf_file}\n\t\trm -rf /etc/init.d/pserver\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del pserver\n\t\telse\n\t\t\tupdate-rc.d -f pserver remove\n\t\tfi\n\t\techo && echo \"Peerflix Server 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nView_ps(){\n\tcheck_installed_status\n\tRead_config\n\tip=$(wget -qO- -t1 -T2 ipinfo.io/ip)\n\tif [[ -z \"${ip}\" ]]; then\n\t\tip=$(wget -qO- -t1 -T2 api.ip.sb/ip)\n\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\tip=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\t\tip=\"VPS_IP\"\n\t\t\tfi\n\t\tfi\n\tfi\n\tclear && echo \"————————————————\" && echo\n\techo -e \" Peerflix Server 信息 :\" && echo\n\techo -e \" 地址\\t: ${Green_font_prefix}http://${ip}:${port}${Font_color_suffix}\"\n\techo && echo \"————————————————\"\n}\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${ps_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${ps_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${bt_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${bt_port} -j ACCEPT\n\tiptables -I OUTPUT -m state --state NEW -m tcp -p tcp --dport ${bt_port} -j ACCEPT\n\tiptables -I OUTPUT -m state --state NEW -m udp -p udp --dport ${bt_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${bt_port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${bt_port} -j ACCEPT\n\tiptables -D OUTPUT -m state --state NEW -m tcp -p tcp --dport ${bt_port} -j ACCEPT\n\tiptables -D OUTPUT -m state --state NEW -m udp -p udp --dport ${bt_port} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/pserver.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/pserver\" ]]; then\n\t\trm -rf /etc/init.d/pserver\n\t\tService_ps\n\tfi\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/pserver.sh\" && chmod +x pserver.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\necho && echo -e \"  Peerflix Server 一键管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  ---- Toyo | doub.io/wlzy-13/ ----\n  \n ${Green_font_prefix}0.${Font_color_suffix} 升级脚本\n\n ${Green_font_prefix}1.${Font_color_suffix} 安装 Peerflix Server\n ${Green_font_prefix}2.${Font_color_suffix} 卸载 Peerflix Server\n————————————\n ${Green_font_prefix}3.${Font_color_suffix} 启动 Peerflix Server\n ${Green_font_prefix}4.${Font_color_suffix} 停止 Peerflix Server\n ${Green_font_prefix}5.${Font_color_suffix} 重启 Peerflix Server\n————————————\n ${Green_font_prefix}6.${Font_color_suffix} 设置 Peerflix Server 端口\n ${Green_font_prefix}7.${Font_color_suffix} 查看 Peerflix Server 信息\n ${Green_font_prefix}8.${Font_color_suffix} 查看 Peerflix Server 日志\n————————————\" && echo\nif [[ -e ${ps_file} ]]; then\n\tcheck_pid\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\telse\n\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\tfi\nelse\n\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\nfi\necho\nread -e -p \" 请输入数字 [0-8]:\" num\ncase \"$num\" in\n\t0)\n\tUpdate_Shell\n\t;;\n\t1)\n\tInstall_ps\n\t;;\n\t2)\n\tUninstall_ps\n\t;;\n\t3)\n\tStart_ps\n\t;;\n\t4)\n\tStop_ps\n\t;;\n\t5)\n\tRestart_ps\n\t;;\n\t6)\n\tSet_ps\n\t;;\n\t7)\n\tView_ps\n\t;;\n\t8)\n\tLog_ps\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-8]\"\n\t;;\nesac"
        },
        {
          "name": "pythonhttp.sh",
          "type": "blob",
          "size": 3.3037109375,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#       System Required: All\n#       Description: Python HTTP Server\n#       Version: 1.0.2\n#       Author: Toyo\n#       Blog: https://doub.io/wlzy-8/\n#=================================================\n\nsethttp(){\n#设置端口\n\twhile true\n\tdo\n\techo -e \"请输入要开放的HTTP服务端口 [1-65535]\"\n\tread -e -p \"(默认端口: 8000):\" httpport\n\t[[ -z \"$httpport\" ]] && httpport=\"8000\"\n\texpr ${httpport} + 0 &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${httpport} -ge 1 ]] && [[ ${httpport} -le 65535 ]]; then\n\t\t\techo\n\t\t\techo -e \"\t端口 : \\033[41;37m ${httpport} \\033[0m\"\n\t\t\techo\n\t\t\tbreak\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\telse\n\t\techo \"输入错误, 请输入正确的端口。\"\n\tfi\n\tdone\n\t#设置目录\n\techo \"请输入要开放的目录(绝对路径)\"\n\tread -e -p \"(直接回车, 默认当前文件夹):\" httpfile\n\tif [[ ! -z $httpfile ]]; then\n\t\t[[ ! -e $httpfile ]] && echo -e \"\\033[41;37m [错误] \\033[0m 输入的目录不存在 或 当前用户无权限访问, 请检查!\" && exit 1\n\telse\n\t\thttpfile=`echo $PWD`\n\tfi\n\t#最后确认\n\techo\n\techo \"========================\"\n\techo \"      请检查配置是否正确 !\"\n\techo\n\techo -e \"\t端口 : \\033[41;37m ${httpport} \\033[0m\"\n\techo -e \"\t目录 : \\033[41;37m ${httpfile} \\033[0m\"\n\techo \"========================\"\n\techo\n\tread -e -p \"按任意键继续，如有错误，请使用 Ctrl + C 退出.\" var\n}\niptables_add(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${httpport} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${httpport} -j ACCEPT\n}\niptables_del(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n}\nstarthttp(){\n\tPID=`ps -ef | grep SimpleHTTPServer | grep -v grep | awk '{print $2}'`\n\t[[ ! -z $PID ]] && echo -e \"\\033[41;37m [错误] \\033[0m SimpleHTTPServer 正着运行，请检查 !\" && exit 1\n\tsethttp\n\tiptables_add\n\tcd ${httpfile}\n\tnohup python -m SimpleHTTPServer $httpport >> httpserver.log 2>&1 &\n\tsleep 2s\n\tPID=`ps -ef | grep SimpleHTTPServer | grep -v grep | awk '{print $2}'`\n\tif [[ -z $PID ]]; then\n\t\techo -e \"\\033[41;37m [错误] \\033[0m SimpleHTTPServer 启动失败 !\" && exit 1\n\telse\n\t\tip=`curl -m 10 -s http://members.3322.org/dyndns/getip`\n\t\t[[ -z \"$ip\" ]] && ip=\"VPS_IP\"\n\t\techo\n\t\techo \"HTTP服务 已启动 !\"\n\t\techo -e \"浏览器访问，地址： \\033[41;37m http://${ip}:${httpport} \\033[0m \"\n\t\techo\n\tfi\n}\nstophttp(){\n\tPID=`ps -ef | grep SimpleHTTPServer | grep -v grep | awk '{print $2}'`\n\t[[ -z $PID ]] && echo -e \"\\033[41;37m [错误] \\033[0m 没有发现 SimpleHTTPServer 进程运行，请检查 !\" && exit 1\n\tport=`netstat -lntp | grep ${PID} | awk '{print $4}' | awk -F \":\" '{print $2}'`\n\tiptables_del\n\tkill -9 ${PID}\n\tsleep 2s\n\tPID=`ps -ef | grep SimpleHTTPServer | grep -v grep | awk '{print $2}'`\n\tif [[ ! -z $PID ]]; then\n\t\techo -e \"\\033[41;37m [错误] \\033[0m SimpleHTTPServer 停止失败 !\" && exit 1\n\telse\n\t\techo\n\t\techo \"HTTP服务 已停止 !\"\n\t\techo\n\tfi\n}\n\naction=$1\n[[ -z $1 ]] && action=start\ncase \"$action\" in\n    start|stop)\n    ${action}http\n    ;;\n    *)\n    echo \"输入错误 !\"\n    echo \"用法: {start|stop}\"\n    ;;\nesac"
        },
        {
          "name": "service",
          "type": "tree",
          "content": null
        },
        {
          "name": "socat.sh",
          "type": "blob",
          "size": 13.865234375,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: Debian/Ubuntu\n#\tDescription: Socat\n#\tVersion: 1.0.5\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/wlzy-18/\n#=================================================\n\nsh_ver=\"1.0.5\"\nsocat_file=\"/usr/bin/socat\"\nsocat_log_file=\"/tmp/socat.log\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\" && Error=\"${Red_font_prefix}[错误]${Font_color_suffix}\" && Tip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\nSave_iptables(){\n\tiptables-save > /etc/iptables.up.rules\n}\nSet_iptables(){\n\tiptables-save > /etc/iptables.up.rules\n\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\tchmod +x /etc/network/if-pre-up.d/iptables\n}\ncheck_socat(){\n\t[[ ! -e ${socat_file} ]] && echo -e \"${Error} 没有安装Socat，请检查 !\" && exit 1\n}\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\t#bit=`uname -m`\n}\ninstallSocat(){\n\t[[ -e ${socat_file} ]] && echo -e \"${Error} 已经安装Socat，请检查 !\" && exit 1\n\tapt-get update\n\tapt-get install -y socat\n\tSet_iptables\n\tchmod +x /etc/rc.local\n\t# echo \"nameserver 8.8.8.8\" > /etc/resolv.conf\n\t# echo \"nameserver 8.8.4.4\" >> /etc/resolv.conf\n\tsocat_exist=`socat -h`\n\tif [[ ! -e ${socat_file} ]]; then\n\t\techo -e \"${Error} 安装Socat失败，请检查 !\" && exit 1\n\telse\n\t\techo -e \"${Info} Socat 安装完成 !\"\n\tfi\n}\naddSocat(){\n# 判断是否安装Socat\n\tcheck_socat\n# 设置本地监听端口\n\twhile true\n\tdo\n\t\techo -e \"请输入 Socat 的 本地监听端口 [1-65535]\"\n\t\tread -e -p \"(默认端口: 23333):\" Socatport\n\t\t[[ -z \"$Socatport\" ]] && Socatport=\"23333\"\n\t\techo $((${Socatport}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${Socatport} -ge 1 ]] && [[ ${Socatport} -le 65535 ]]; then\n\t\t\t\techo\n\t\t\t\techo \"——————————————————————————————\"\n\t\t\t\techo -e \"\t本地监听端口 : ${Red_background_prefix} ${Socatport} ${Font_color_suffix}\"\n\t\t\t\techo \"——————————————————————————————\"\n\t\t\t\techo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo -e \"${Error} 请输入正确的数字 !\"\n\t\t\tfi\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字 !\"\n\t\tfi\n\tdone\n# 设置欲转发端口\n\twhile true\n\tdo\n\t\techo -e \"请输入 Socat 远程被转发 端口 [1-65535]\"\n\t\tread -e -p \"(默认端口: ${Socatport}):\" Socatport1\n\t\t[[ -z \"$Socatport1\" ]] && Socatport1=${Socatport}\n\t\techo $((${Socatport1}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${Socatport1} -ge 1 ]] && [[ ${Socatport1} -le 65535 ]]; then\n\t\t\t\techo\n\t\t\t\techo \"——————————————————————————————\"\n\t\t\t\techo -e \"\t远程转发端口 : ${Red_background_prefix} ${Socatport1} ${Font_color_suffix}\"\n\t\t\t\techo \"——————————————————————————————\"\n\t\t\t\techo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo -e \"${Error} 请输入正确的数字 !\"\n\t\t\tfi\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字 !\"\n\t\tfi\n\tdone\n# 设置欲转发 IP\n\tread -e -p \"请输入 Socat 远程被转发 IP:\" socatip\n\t[[ -z \"${socatip}\" ]] && echo \"取消...\" && exit 1\n\techo\n\techo \"——————————————————————————————\"\n\techo -e \"\t远程转发 IP : ${Red_background_prefix} ${socatip} ${Font_color_suffix}\"\n\techo \"——————————————————————————————\"\n\techo\n#设置 转发类型\n\techo \"请输入数字 来选择 Socat 转发类型:\"\n\techo \"1. TCP\"\n\techo \"2. UDP\"\n\techo \"3. TCP+UDP\"\n\techo\n\tread -e -p \"(默认: TCP+UDP):\" socattype_num\n\t[[ -z \"${socattype_num}\" ]] && socattype_num=\"3\"\n\tif [[ ${socattype_num} = \"1\" ]]; then\n\t\tsocattype=\"TCP\"\n\telif [[ ${socattype_num} = \"2\" ]]; then\n\t\tsocattype=\"UDP\"\n\telif [[ ${socattype_num} = \"3\" ]]; then\n\t\tsocattype=\"TCP+UDP\"\n\telse\n\t\tsocattype=\"TCP+UDP\"\n\tfi\n#最后确认\n\techo\n\techo \"——————————————————————————————\"\n\techo \"      请检查 Socat 配置是否有误 !\"\n\techo\n\techo -e \"\t本地监听端口\\t : ${Red_background_prefix} ${Socatport} ${Font_color_suffix}\"\n\techo -e \"\t远程转发 IP\\t : ${Red_background_prefix} ${socatip} ${Font_color_suffix}\"\n\techo -e \"\t远程转发端口\\t : ${Red_background_prefix} ${Socatport1} ${Font_color_suffix}\"\n\techo -e \"\t转发类型\\t : ${Red_background_prefix} ${socattype} ${Font_color_suffix}\"\n\techo \"——————————————————————————————\"\n\techo\n\tread -e -p \"请按任意键继续，如有配置错误请使用 Ctrl+C 退出。\" var\n\tstartSocat\n\t# 获取IP\n\tip=`wget -qO- -t1 -T2 ipinfo.io/ip`\n\t[[ -z $ip ]] && ip=\"ip\"\n\tclear\n\techo\n\techo \"——————————————————————————————\"\n\techo \"\tSocat 已启动 !\"\n\techo\n\techo -e \"\t本地监听 IP\\t : ${Red_background_prefix} ${ip} ${Font_color_suffix}\"\n\techo -e \"\t本地监听端口\\t : ${Red_background_prefix} ${Socatport} ${Font_color_suffix}\"\n\techo\n\techo -e \"\t远程转发 IP\\t : ${Red_background_prefix} ${socatip} ${Font_color_suffix}\"\n\techo -e \"\t远程转发端口\\t : ${Red_background_prefix} ${Socatport1} ${Font_color_suffix}\"\n\techo -e \"\t转发类型\\t : ${Red_background_prefix} ${socattype} ${Font_color_suffix}\"\n\techo \"——————————————————————————————\"\n\techo\n}\nstartSocat(){\n\tif [[ ${socattype} = \"TCP\" ]]; then\n\t\trunSocat \"TCP4\"\n\t\tsleep 2s\n\t\tPID=`ps -ef | grep \"socat TCP4-LISTEN:${Socatport}\" | grep -v grep | awk '{print $2}'`\n\t\t[[ -z $PID ]] && echo -e \"${Error} Socat TCP 启动失败 !\" && exit 1\n\t\taddLocal \"TCP4\"\n\t\tiptables -I INPUT -p tcp --dport ${Socatport} -j ACCEPT\n\telif [[ ${socattype} = \"UDP\" ]]; then\n\t\trunSocat \"UDP4\"\n\t\tsleep 2s\n\t\tPID=`ps -ef | grep \"socat UDP4-LISTEN:${Socatport}\" | grep -v grep | awk '{print $2}'`\n\t\t[[ -z $PID ]] && echo -e \"${Error} Socat UDP 启动失败 !\" && exit 1\n\t\taddLocal \"UDP4\"\n\t\tiptables -I INPUT -p udp --dport ${Socatport} -j ACCEPT\n\telif [[ ${socattype} = \"TCP+UDP\" ]]; then\n\t\trunSocat \"TCP4\"\n\t\trunSocat \"UDP4\"\n\t\tsleep 2s\n\t\tPID=`ps -ef | grep \"socat TCP4-LISTEN:${Socatport}\" | grep -v grep | awk '{print $2}'`\n\t\tPID1=`ps -ef | grep \"socat UDP4-LISTEN:${Socatport}\" | grep -v grep | awk '{print $2}'`\n\t\tif [[ -z $PID ]]; then\n\t\t\techo -e \"${Error} Socat TCP 启动失败 !\" && exit 1\n\t\telse\n\t\t\t[[ -z $PID1 ]] && echo -e \"${Error} Socat TCP 启动成功，但 UDP 启动失败 !\"\n\t\t\taddLocal \"TCP4\"\n\t\t\taddLocal \"UDP4\"\n\t\t\tiptables -I INPUT -p tcp --dport ${Socatport} -j ACCEPT\n\t\t\tiptables -I INPUT -p udp --dport ${Socatport} -j ACCEPT\n\t\tfi\n\tfi\n\tSave_iptables\n}\nrunSocat(){\n\tnohup socat $1-LISTEN:${Socatport},reuseaddr,fork $1:${socatip}:${Socatport1} >> ${socat_log_file} 2>&1 &\n}\naddLocal(){\n\tsed -i '/exit 0/d' /etc/rc.local\n\techo -e \"nohup socat $1-LISTEN:${Socatport},reuseaddr,fork $1:${socatip}:${Socatport1} >> ${socat_log_file} 2>&1 &\" >> /etc/rc.local\n\t[[ ${release}  == \"debian\" ]] && echo -e \"exit 0\" >> /etc/rc.local\n}\n# 查看Socat列表\nlistSocat(){\n# 检查是否安装\n\tcheck_socat\n\tsocat_total=`ps -ef | grep socat | grep -v grep | grep -v \"socat.sh\" | wc -l`\n\tif [[ ${socat_total} = \"0\" ]]; then\n\t\techo -e \"${Error} 没有发现 Socat 进程运行，请检查 !\" && exit 1\n\tfi\n\tsocat_list_all=\"\"\n\tfor((integer = 1; integer <= ${socat_total}; integer++))\n\tdo\n\t\tsocat_all=`ps -ef | grep socat | grep -v grep | grep -v \"socat.sh\"`\n\t\tsocat_type=`echo -e \"${socat_all}\" | awk '{print $9}' | sed -n \"${integer}p\" | cut -c 1-4`\n\t\tsocat_listen=`echo -e \"${socat_all}\" | awk '{print $9}' | sed -n \"${integer}p\" | sed -r 's/.*LISTEN:(.+),reuseaddr.*/\\1/'`\n\t\tsocat_fork=`echo -e \"${socat_all}\" | awk '{print $10}' | sed -n \"${integer}p\" | cut -c 6-26`\n\t\tsocat_pid=`echo -e \"${socat_all}\" | awk '{print $2}' | sed -n \"${integer}p\"`\n\t\tsocat_list_all=${socat_list_all}\"${Green_font_prefix}\"${integer}\". ${Font_color_suffix}进程PID: ${Red_font_prefix}\"${socat_pid}\"${Font_color_suffix} 类型: ${Red_font_prefix}\"${socat_type}\"${Font_color_suffix} 监听端口: ${Green_font_prefix}\"${socat_listen}\"${Font_color_suffix} 转发IP和端口: ${Green_font_prefix}\"${socat_fork}\"${Font_color_suffix}\\n\"\n\tdone\n\techo\n\techo -e \"当前有${Green_background_prefix}\" ${socat_total} \"${Font_color_suffix}个Socat转发进程。\"\n\techo -e ${socat_list_all}\n}\ndelSocat(){\n# 检查是否安装\n\tcheck_socat\n# 判断进程是否存在\n\tPID=`ps -ef | grep socat | grep -v grep | grep -v \"socat.sh\" | awk '{print $2}'`\n\tif [[ -z $PID ]]; then\n\t\techo -e \"${Error} 没有发现 Socat 进程运行，请检查 !\" && exit 1\n\tfi\n\t\n\twhile true\n\tdo\n\t# 列出 Socat\n\tlistSocat\n\tread -e -p \"请输入数字 来选择要终止的 Socat 进程:\" stopsocat\n\t[[ -z \"${stopsocat}\" ]] && stopsocat=\"0\"\n\techo $((${stopsocat}+0)) &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${stopsocat} -ge 1 ]] && [[ ${stopsocat} -le ${socat_total} ]]; then\n\t\t\t# 删除开机启动\n\t\t\tsocat_del_rc1=`ps -ef | grep socat | grep -v grep | grep -v \"socat.sh\" | awk '{print $8}' | sed -n \"${stopsocat}p\"`\n\t\t\tsocat_del_rc2=`ps -ef | grep socat | grep -v grep | grep -v \"socat.sh\" | awk '{print $9}' | sed -n \"${stopsocat}p\"`\n\t\t\tsocat_del_rc3=`ps -ef | grep socat | grep -v grep | grep -v \"socat.sh\" | awk '{print $10}' | sed -n \"${stopsocat}p\"`\n\t\t\tsocat_del_rc4=${socat_del_rc1}\" \"${socat_del_rc2}\" \"${socat_del_rc3}\n\t\t\t#echo ${socat_del_rc4}\n\t\t\tsed -i \"/${socat_del_rc4}/d\" /etc/rc.local\n\t\t\t# 删除防火墙规则\n\t\t\tsocat_listen=`ps -ef | grep socat | grep -v grep | grep -v \"socat.sh\" | awk '{print $9}' | sed -n \"${stopsocat}p\" | sed -r 's/.*LISTEN:(.+),reuseaddr.*/\\1/'`\n\t\t\tsocat_type=`ps -ef | grep socat | grep -v grep | grep -v \"socat.sh\" | awk '{print $9}' | sed -n \"${stopsocat}p\" | cut -c 1-4`\n\t\t\tif [[ ${socat_type} = \"TCP4\" ]]; then\n\t\t\t\tiptables -D INPUT -p tcp --dport ${socat_listen} -j ACCEPT\n\t\t\telse\n\t\t\t\tiptables -D INPUT -p udp --dport ${socat_listen} -j ACCEPT\n\t\t\tfi\n\t\t\tSave_iptables\n\t\t\tsocat_total=`ps -ef | grep socat | grep -v grep | grep -v \"socat.sh\" | wc -l`\n\t\t\tPID=`ps -ef | grep socat | grep -v grep | grep -v \"socat.sh\" | awk '{print $2}' | sed -n \"${stopsocat}p\"`\n\t\t\tkill -2 ${PID}\n\t\t\tsleep 2s\n\t\t\tsocat_total1=$((${socat_total}-1))\n\t\t\tsocat_total=`ps -ef | grep socat | grep -v grep | grep -v \"socat.sh\" | wc -l`\n\t\t\tif [[ ${socat_total} != ${socat_total1} ]]; then\n\t\t\t\techo -e \"${Error} Socat 停止失败 !\" && exit 1\n\t\t\telse\n\t\t\t\techo && echo \"\tSocat 已停止 !\" && echo\n\t\t\tfi\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字 !\"\n\t\tfi\n\telse\n\t\techo \"取消...\" && exit 1\n\tfi\n\tdone\n}\n# 查看日志\ntailSocat(){\n\t[[ ! -e ${socat_log_file} ]] && echo -e \"${Error} Socat 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${socat_log_file}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${socat_log_file}\n}\nuninstallSocat(){\n\tcheck_socat\n\techo \"确定要卸载 Socat ? [y/N]\"\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tPID=$(ps -ef | grep \"socat\" | grep -v grep | grep -v \".sh\" |awk '{print $2}')\n\t\t[[ ! -z \"${PID}\" ]] && kill -9 \"${PID}\"\n\t\tapt-get remove --purge socat -y\n\t\tsed -i \"/socat/d\" /etc/rc.local\n\t\t[[ -e ${socat_file} ]] && echo -e \"${Error} Socat 卸载失败，请检查 !\" && exit 1\n\t\techo && echo -e \"${Info} Socat 已卸载 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/socat.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/socat.sh\" && chmod +x socat.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\ncheck_sys\n[[ ${release} != \"debian\" ]] && [[ ${release} != \"ubuntu\" ]] && echo -e \"${Error} 本脚本不支持当前系统 ${release} !\" && exit 1\necho && echo -e \"  SoCat 一键管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  -- Toyo | doub.io/wlzy-18 --\n  \n ${Green_font_prefix}0.${Font_color_suffix} 升级脚本\n————————————\n ${Green_font_prefix}1.${Font_color_suffix} 安装 SoCat\n ${Green_font_prefix}2.${Font_color_suffix} 卸载 SoCat\n————————————\n ${Green_font_prefix}3.${Font_color_suffix} 新增 SoCat\n ${Green_font_prefix}4.${Font_color_suffix} 删除 SoCat\n————————————\n ${Green_font_prefix}5.${Font_color_suffix} 查看 SoCat 信息\n ${Green_font_prefix}6.${Font_color_suffix} 查看 SoCat 日志\n————————————\" && echo\nif [[ -e ${socat_file} ]]; then\n\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix}\"\nelse\n\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\nfi\necho\nread -e -p \" 请输入数字 [0-9]:\" num\ncase \"$num\" in\n\t0)\n\tUpdate_Shell\n\t;;\n\t1)\n\tinstallSocat\n\t;;\n\t2)\n\tuninstallSocat\n\t;;\n\t3)\n\taddSocat\n\t;;\n\t4)\n\tdelSocat\n\t;;\n\t5)\n\tlistSocat\n\t;;\n\t6)\n\ttailSocat\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-6]\"\n\t;;\nesac"
        },
        {
          "name": "sources",
          "type": "tree",
          "content": null
        },
        {
          "name": "ss-go.sh",
          "type": "blob",
          "size": 24.6435546875,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: Shadowsocks Golang\n#\tVersion: 1.0.0\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/ss-jc67/\n#=================================================\n\nsh_ver=\"1.0.0\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile_1=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\nFOLDER=\"/usr/local/shadowsocks-go\"\nFILE=\"/usr/local/shadowsocks-go/shadowsocks-go\"\nCONF=\"/usr/local/shadowsocks-go/shadowsocks-go.conf\"\nLOG=\"/usr/local/shadowsocks-go/shadowsocks-go.log\"\nNow_ver_File=\"/usr/local/shadowsocks-go/ver.txt\"\nCrontab_file=\"/usr/bin/crontab\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前非ROOT账号(或没有ROOT权限)，无法继续操作，请更换ROOT账号或使用 ${Green_background_prefix}sudo su${Font_color_suffix} 命令获取临时ROOT权限（执行后可能会提示输入当前账号的密码）。\" && exit 1\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_installed_status(){\n\t[[ ! -e ${FILE} ]] && echo -e \"${Error} Shadowsocks 没有安装，请检查 !\" && exit 1\n}\ncheck_crontab_installed_status(){\n\tif [[ ! -e ${Crontab_file} ]]; then\n\t\techo -e \"${Error} Crontab 没有安装，开始安装...\"\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum install crond -y\n\t\telse\n\t\t\tapt-get install cron -y\n\t\tfi\n\t\tif [[ ! -e ${Crontab_file} ]]; then\n\t\t\techo -e \"${Error} Crontab 安装失败，请检查！\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} Crontab 安装成功！\"\n\t\tfi\n\tfi\n}\ncheck_pid(){\n\tPID=$(ps -ef| grep \"./shadowsocks-go \"| grep -v \"grep\" | grep -v \"init.d\" |grep -v \"service\" |awk '{print $2}')\n}\ncheck_new_ver(){\n\tnew_ver=$(wget -qO- https://api.github.com/repos/shadowsocks/go-shadowsocks2/releases| grep \"tag_name\"| head -n 1| awk -F \":\" '{print $2}'| sed 's/\\\"//g;s/,//g;s/ //g')\n\t[[ -z ${new_ver} ]] && echo -e \"${Error} Shadowsocks 最新版本获取失败！\" && exit 1\n\techo -e \"${Info} 检测到 Shadowsocks 最新版本为 [ ${new_ver} ]\"\n}\ncheck_ver_comparison(){\n\tnow_ver=$(cat ${Now_ver_File})\n\tif [[ \"${now_ver}\" != \"${new_ver}\" ]]; then\n\t\techo -e \"${Info} 发现 Shadowsocks 已有新版本 [ ${new_ver} ]，旧版本 [ ${now_ver} ]\"\n\t\tread -e -p \"是否更新 ? [Y/n] :\" yn\n\t\t[[ -z \"${yn}\" ]] && yn=\"y\"\n\t\tif [[ $yn == [Yy] ]]; then\n\t\t\tcheck_pid\n\t\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\t\t\\cp \"${CONF}\" \"/tmp/shadowsocks-go.conf\"\n\t\t\trm -rf ${FOLDER}\n\t\t\tDownload\n\t\t\tmv \"/tmp/shadowsocks-go.conf\" \"${CONF}\"\n\t\t\tStart\n\t\tfi\n\telse\n\t\techo -e \"${Info} 当前 Shadowsocks 已是最新版本 [ ${new_ver} ]\" && exit 1\n\tfi\n}\nDownload(){\n\tif [[ ! -e \"${FOLDER}\" ]]; then\n\t\tmkdir \"${FOLDER}\"\n\telse\n\t\t[[ -e \"${FILE}\" ]] && rm -rf \"${FILE}\"\n\tfi\n\tcd \"${FOLDER}\"\n\tif [[ ${bit} == \"x86_64\" ]]; then\n\t\twget --no-check-certificate -N \"https://github.com/shadowsocks/go-shadowsocks2/releases/download/${new_ver}/shadowsocks2-linux.gz\"\n\telse\n\t\techo -e \"${Error} Shadowsocks-Go版目前不支持 非64位 构架的服务器安装，请更换系统 !\" && rm -rf \"${FOLDER}\" && exit 1\n\tfi\n\t[[ ! -e \"shadowsocks2-linux.gz\" ]] && echo -e \"${Error} Shadowsocks 压缩包下载失败 !\" && rm -rf \"${FOLDER}\" && exit 1\n\tgzip -d \"shadowsocks2-linux.gz\"\n\t[[ ! -e \"shadowsocks2-linux\" ]] && echo -e \"${Error} Shadowsocks 压缩包解压失败 !\" && rm -rf \"${FOLDER}\" && exit 1\n\tmv \"shadowsocks2-linux\" \"shadowsocks-go\"\n\t[[ ! -e \"shadowsocks-go\" ]] && echo -e \"${Error} Shadowsocks 重命名失败 !\" && rm -rf \"${FOLDER}\" && exit 1\n\tchmod +x shadowsocks-go\n\techo \"${new_ver}\" > ${Now_ver_File}\n}\nService(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/ss_go_centos\" -O /etc/init.d/ss-go; then\n\t\t\techo -e \"${Error} Shadowsocks 服务管理脚本下载失败 !\"\n\t\t\trm -rf \"${FOLDER}\"\n\t\t\texit 1\n\t\tfi\n\t\tchmod +x \"/etc/init.d/ss-go\"\n\t\tchkconfig --add ss-go\n\t\tchkconfig ss-go on\n\telse\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/ss_go_debian\" -O /etc/init.d/ss-go; then\n\t\t\techo -e \"${Error} Shadowsocks 服务管理脚本下载失败 !\"\n\t\t\trm -rf \"${FOLDER}\"\n\t\t\texit 1\n\t\tfi\n\t\tchmod +x \"/etc/init.d/ss-go\"\n\t\tupdate-rc.d -f ss-go defaults\n\tfi\n\techo -e \"${Info} Shadowsocks 服务管理脚本下载完成 !\"\n}\nInstallation_dependency(){\n\tgzip_ver=$(gzip -V)\n\tif [[ -z ${gzip_ver} ]]; then\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum update\n\t\t\tyum install -y gzip\n\t\telse\n\t\t\tapt-get update\n\t\t\tapt-get install -y gzip\n\t\tfi\n\tfi\n\t\\cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n}\nWrite_config(){\n\tcat > ${CONF}<<-EOF\nPORT = ${ss_port}\nPASSWORD = ${ss_password}\nCIPHER = ${ss_cipher}\nVERBOSE = ${ss_verbose}\nEOF\n}\nRead_config(){\n\t[[ ! -e ${CONF} ]] && echo -e \"${Error} Shadowsocks 配置文件不存在 !\" && exit 1\n\tport=$(cat ${CONF}|grep 'PORT = '|awk -F 'PORT = ' '{print $NF}')\n\tpassword=$(cat ${CONF}|grep 'PASSWORD = '|awk -F 'PASSWORD = ' '{print $NF}')\n\tcipher=$(cat ${CONF}|grep 'CIPHER = '|awk -F 'CIPHER = ' '{print $NF}')\n\tverbose=$(cat ${CONF}|grep 'VERBOSE = '|awk -F 'VERBOSE = ' '{print $NF}')\n}\nSet_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 Shadowsocks 端口 [1-65535]\"\n\t\tread -e -p \"(默认: 443):\" ss_port\n\t\t[[ -z \"${ss_port}\" ]] && ss_port=\"443\"\n\t\techo $((${ss_port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${ss_port} -ge 1 ]] && [[ ${ss_port} -le 65535 ]]; then\n\t\t\t\techo && echo \"========================\"\n\t\t\t\techo -e \"\t端口 : ${Red_background_prefix} ${ss_port} ${Font_color_suffix}\"\n\t\t\t\techo \"========================\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\t\tdone\n}\nSet_password(){\n\techo \"请输入 Shadowsocks 密码 [0-9][a-z][A-Z]\"\n\tread -e -p \"(默认: 随机生成):\" ss_password\n\t[[ -z \"${ss_password}\" ]] && ss_password=$(date +%s%N | md5sum | head -c 16)\n\techo && echo \"========================\"\n\techo -e \"\t密码 : ${Red_background_prefix} ${ss_password} ${Font_color_suffix}\"\n\techo \"========================\" && echo\n}\nSet_cipher(){\n\techo -e \"请选择 Shadowsocks 加密方式\n\t\n ${Green_font_prefix} 1.${Font_color_suffix} aes-128-cfb\n ${Green_font_prefix} 2.${Font_color_suffix} aes-128-ctr\n ${Green_font_prefix} 3.${Font_color_suffix} aes-192-cfb\n ${Green_font_prefix} 4.${Font_color_suffix} aes-192-ctr\n ${Green_font_prefix} 5.${Font_color_suffix} aes-256-cfb\n ${Green_font_prefix} 6.${Font_color_suffix} aes-256-ctr\n ${Green_font_prefix} 7.${Font_color_suffix} chacha20-ietf\n ${Green_font_prefix} 8.${Font_color_suffix} xchacha20\n ${Green_font_prefix} 9.${Font_color_suffix} aes-128-gcm            (AEAD)\n ${Green_font_prefix}10.${Font_color_suffix} aes-192-gcm            (AEAD)\n ${Green_font_prefix}11.${Font_color_suffix} aes-256-gcm            (AEAD)\n ${Green_font_prefix}12.${Font_color_suffix} chacha20-ietf-poly1305 (AEAD)\n\n ${Tip} chacha20 系列加密方式无需额外安装 libsodium，Shadowsocks Go版默认集成 !\" && echo\n\tread -e -p \"(默认: 12. chacha20-ietf-poly1305):\" ss_cipher\n\t[[ -z \"${ss_cipher}\" ]] && ss_cipher=\"12\"\n\tif [[ ${ss_cipher} == \"1\" ]]; then\n\t\tss_cipher=\"aes-128-cfb\"\n\telif [[ ${ss_cipher} == \"2\" ]]; then\n\t\tss_cipher=\"aes-128-ctr\"\n\telif [[ ${ss_cipher} == \"3\" ]]; then\n\t\tss_cipher=\"aes-192-cfb\"\n\telif [[ ${ss_cipher} == \"4\" ]]; then\n\t\tss_cipher=\"aes-192-ctr\"\n\telif [[ ${ss_cipher} == \"5\" ]]; then\n\t\tss_cipher=\"aes-256-cfb\"\n\telif [[ ${ss_cipher} == \"6\" ]]; then\n\t\tss_cipher=\"aes-256-ctr\"\n\telif [[ ${ss_cipher} == \"7\" ]]; then\n\t\tss_cipher=\"chacha20-ietf\"\n\telif [[ ${ss_cipher} == \"8\" ]]; then\n\t\tss_cipher=\"xchacha20\"\n\telif [[ ${ss_cipher} == \"9\" ]]; then\n\t\tss_cipher=\"aead_aes_128_gcm\"\n\telif [[ ${ss_cipher} == \"10\" ]]; then\n\t\tss_cipher=\"aead_aes_192_gcm\"\n\telif [[ ${ss_cipher} == \"11\" ]]; then\n\t\tss_cipher=\"aead_aes_256_gcm\"\n\telif [[ ${ss_cipher} == \"12\" ]]; then\n\t\tss_cipher=\"aead_chacha20_poly1305\"\n\telse\n\t\tss_cipher=\"aead_chacha20_poly1305\"\n\tfi\n\techo && echo \"========================\"\n\techo -e \"\t加密 : ${Red_background_prefix} ${ss_cipher} ${Font_color_suffix}\"\n\techo \"========================\" && echo\n}\nSet_verbose(){\n\techo -e \"是否启用详细日志模式？[Y/n]\n启用详细日志模式就可以在日志中看到链接者信息(链接时间、链接代理端口、链接者IP、链接者访问的目标域名或IP这些非敏感类信息)。\"\n\tread -e -p \"(默认：N 禁用):\" ss_verbose\n\t[[ -z \"${ss_verbose}\" ]] && ss_verbose=\"N\"\n\tif [[ \"${ss_verbose}\" == [Yy] ]]; then\n\t\tss_verbose=\"YES\"\n\telse\n\t\tss_verbose=\"NO\"\n\tfi\n\techo && echo \"========================\"\n\techo -e \"\t详细日志模式 : ${Red_background_prefix} ${ss_verbose} ${Font_color_suffix}\"\n\techo \"========================\" && echo\n}\nSet(){\n\tcheck_installed_status\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix}  修改 端口配置\n ${Green_font_prefix}2.${Font_color_suffix}  修改 密码配置\n ${Green_font_prefix}3.${Font_color_suffix}  修改 加密配置\n ${Green_font_prefix}4.${Font_color_suffix}  修改 详细日志模式 配置\n ${Green_font_prefix}5.${Font_color_suffix}  修改 全部配置\n————————————————\n ${Green_font_prefix}6.${Font_color_suffix}  监控 运行状态\" && echo\n\tread -e -p \"(默认: 取消):\" ss_modify\n\t[[ -z \"${ss_modify}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ \"${ss_modify}\" == \"1\" ]]; then\n\t\tRead_config\n\t\tSet_port\n\t\tss_password=${password}\n\t\tss_cipher=${cipher}\n\t\tss_verbose=${verbose}\n\t\tWrite_config\n\t\tDel_iptables\n\t\tAdd_iptables\n\t\tRestart\n\telif [[ \"${ss_modify}\" == \"2\" ]]; then\n\t\tRead_config\n\t\tSet_password\n\t\tss_port=${port}\n\t\tss_cipher=${cipher}\n\t\tss_verbose=${verbose}\n\t\tWrite_config\n\t\tRestart\n\telif [[ \"${ss_modify}\" == \"3\" ]]; then\n\t\tRead_config\n\t\tSet_cipher\n\t\tss_port=${port}\n\t\tss_password=${password}\n\t\tss_verbose=${verbose}\n\t\tWrite_config\n\t\tRestart\n\telif [[ \"${ss_modify}\" == \"4\" ]]; then\n\t\tRead_config\n\t\tSet_verbose\n\t\tss_port=${port}\n\t\tss_password=${password}\n\t\tss_cipher=${cipher}\n\t\tWrite_config\n\t\tRestart\n\telif [[ \"${ss_modify}\" == \"5\" ]]; then\n\t\tRead_config\n\t\tSet_port\n\t\tSet_password\n\t\tSet_cipher\n\t\tSet_verbose\n\t\tWrite_config\n\t\tRestart\n\telif [[ \"${ss_modify}\" == \"6\" ]]; then\n\t\tSet_crontab_monitor\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-6)\" && exit 1\n\tfi\n}\nInstall(){\n\tcheck_root\n\t[[ -e ${FILE} ]] && echo -e \"${Error} 检测到 Shadowsocks 已安装 !\" && exit 1\n\techo -e \"${Info} 开始设置 用户配置...\"\n\tSet_port\n\tSet_password\n\tSet_cipher\n\tSet_verbose\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始下载/安装...\"\n\tcheck_new_ver\n\tDownload\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService\n\techo -e \"${Info} 开始写入 配置文件...\"\n\tWrite_config\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart\n}\nStart(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} Shadowsocks 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/ss-go start\n\t#sleep 1s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View\n}\nStop(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} Shadowsocks 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/ss-go stop\n}\nRestart(){\n\tcheck_installed_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/ss-go stop\n\t/etc/init.d/ss-go start\n\t#sleep 1s\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View\n}\nUpdate(){\n\tcheck_installed_status\n\tcheck_new_ver\n\tcheck_ver_comparison\n}\nUninstall(){\n\tcheck_installed_status\n\techo \"确定要卸载 Shadowsocks ? (y/N)\"\n\techo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tif [[ -e ${CONF} ]]; then\n\t\t\tport=$(cat ${CONF}|grep 'PORT = '|awk -F 'PORT = ' '{print $NF}')\n\t\t\tDel_iptables\n\t\t\tSave_iptables\n\t\tfi\n\t\tif [[ ! -z $(crontab -l | grep \"ss-go.sh monitor\") ]]; then\n\t\t\tcrontab_monitor_cron_stop\n\t\tfi\n\t\trm -rf \"${FOLDER}\"\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del ss-go\n\t\telse\n\t\t\tupdate-rc.d -f ss-go remove\n\t\tfi\n\t\trm -rf \"/etc/init.d/ss-go\"\n\t\techo && echo \"Shadowsocks 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\ngetipv4(){\n\tipv4=$(wget -qO- -4 -t1 -T2 ipinfo.io/ip)\n\tif [[ -z \"${ipv4}\" ]]; then\n\t\tipv4=$(wget -qO- -4 -t1 -T2 api.ip.sb/ip)\n\t\tif [[ -z \"${ipv4}\" ]]; then\n\t\t\tipv4=$(wget -qO- -4 -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\tif [[ -z \"${ipv4}\" ]]; then\n\t\t\t\tipv4=\"IPv4_Error\"\n\t\t\tfi\n\t\tfi\n\tfi\n}\ngetipv6(){\n\tipv6=$(wget -qO- -6 -t1 -T2 ifconfig.co)\n\tif [[ -z \"${ipv6}\" ]]; then\n\t\tipv6=\"IPv6_Error\"\n\tfi\n}\nurlsafe_base64(){\n\tdate=$(echo -n \"$1\"|base64|sed ':a;N;s/\\n/ /g;ta'|sed 's/ //g;s/=//g;s/+/-/g;s/\\//_/g')\n\techo -e \"${date}\"\n}\nss_link_qr(){\n\tif [[ \"${ipv4}\" != \"IPv4_Error\" ]]; then\n\t\tif [[ \"${cipher}\" == \"aead_chacha20_poly1305\" ]]; then\n\t\t\tcipher_1=\"chacha20-ietf-poly1305\"\n\t\telse\n\t\t\tcipher_1=$(echo \"${cipher}\"|sed 's/aead_//g;s/_/-/g')\n\t\tfi\n\t\tSSbase64=$(urlsafe_base64 \"${cipher_1}:${password}@${ipv4}:${port}\")\n\t\tSSurl=\"ss://${SSbase64}\"\n\t\tSSQRcode=\"http://doub.pw/qr/qr.php?text=${SSurl}\"\n\t\tss_link_ipv4=\" 链接  [ipv4] : ${Red_font_prefix}${SSurl}${Font_color_suffix} \\n 二维码[ipv4] : ${Red_font_prefix}${SSQRcode}${Font_color_suffix}\"\n\tfi\n\tif [[ \"${ipv6}\" != \"IPv6_Error\" ]]; then\n\t\tif [[ \"${cipher}\" == \"aead_chacha20_poly1305\" ]]; then\n\t\t\tcipher_1=\"chacha20-ietf-poly1305\"\n\t\telse\n\t\t\tcipher_1=$(echo \"${cipher}\"|sed 's/aead_//g;s/_/-/g')\n\t\tfi\n\t\tSSbase64=$(urlsafe_base64 \"${cipher_1}:${password}@${ipv6}:${port}\")\n\t\tSSurl=\"ss://${SSbase64}\"\n\t\tSSQRcode=\"http://doub.pw/qr/qr.php?text=${SSurl}\"\n\t\tss_link_ipv6=\" 链接  [ipv6] : ${Red_font_prefix}${SSurl}${Font_color_suffix} \\n 二维码[ipv6] : ${Red_font_prefix}${SSQRcode}${Font_color_suffix}\"\n\tfi\n}\nView(){\n\tcheck_installed_status\n\tRead_config\n\tgetipv4\n\tgetipv6\n\tss_link_qr\n\tif [[ \"${cipher}\" == \"aead_chacha20_poly1305\" ]]; then\n\t\tcipher_2=\"chacha20-ietf-poly1305\"\n\telse\n\t\tcipher_2=$(echo \"${cipher}\"|sed 's/aead_//g;s/_/-/g')\n\tfi\n\tclear && echo\n\techo -e \"Shadowsocks 用户配置：\"\n\techo -e \"————————————————\"\n\t[[ \"${ipv4}\" != \"IPv4_Error\" ]] && echo -e \" 地址\\t: ${Green_font_prefix}${ipv4}${Font_color_suffix}\"\n\t[[ \"${ipv6}\" != \"IPv6_Error\" ]] && echo -e \" 地址\\t: ${Green_font_prefix}${ipv6}${Font_color_suffix}\"\n\techo -e \" 端口\\t: ${Green_font_prefix}${port}${Font_color_suffix}\"\n\techo -e \" 密码\\t: ${Green_font_prefix}${password}${Font_color_suffix}\"\n\techo -e \" 加密\\t: ${Green_font_prefix}${cipher_2}${Font_color_suffix}\"\n\t[[ ! -z \"${ss_link_ipv4}\" ]] && echo -e \"${ss_link_ipv4}\"\n\t[[ ! -z \"${ss_link_ipv6}\" ]] && echo -e \"${ss_link_ipv6}\"\n\techo\n\techo -e \" 详细日志模式\\t: ${Green_font_prefix}${verbose}${Font_color_suffix}\"\n\techo\n}\nView_Log(){\n\tcheck_installed_status\n\t[[ ! -e ${LOG} ]] && echo -e \"${Error} Shadowsocks 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\"\n\techo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${LOG}${Font_color_suffix} 命令。\"\n\techo -e \"如果想要查看详细日志，请在 [7.设置 账号配置 - 4.修改 详细日志模式 配置] 开启。\" && echo\n\ttail -f ${LOG}\n}\n# 显示 连接信息\nView_user_connection_info_1(){\n\tformat_1=$1\n\tRead_config\n\tuser_IP=$(ss state connected sport = :${port} -tn|sed '1d'|awk '{print $NF}'|awk -F ':' '{print $(NF-1)}'|sort -u)\n\tif [[ -z ${user_IP} ]]; then\n\t\tuser_IP_total=\"0\"\n\t\techo -e \"端口: ${Green_font_prefix}\"${port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\telse\n\t\tuser_IP_total=$(echo -e \"${user_IP}\"|wc -l)\n\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: \"\n\t\t\tget_IP_address\n\t\t\techo\n\t\telse\n\t\t\tuser_IP=$(echo -e \"\\n${user_IP}\")\n\t\t\techo -e \"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\tfi\n\tfi\n\tuser_IP=\"\"\n}\nView_user_connection_info(){\n\tcheck_installed_status\n\techo && echo -e \"请选择要显示的格式：\n ${Green_font_prefix}1.${Font_color_suffix} 显示 IP 格式\n ${Green_font_prefix}2.${Font_color_suffix} 显示 IP+IP归属地 格式\" && echo\n\tread -e -p \"(默认: 1):\" connection_info\n\t[[ -z \"${connection_info}\" ]] && connection_info=\"1\"\n\tif [[ \"${connection_info}\" == \"1\" ]]; then\n\t\tView_user_connection_info_1\n\telif [[ \"${connection_info}\" == \"2\" ]]; then\n\t\techo -e \"${Tip} 检测IP归属地(ipip.net)，如果IP较多，可能时间会比较长...\"\n\t\tView_user_connection_info_1 \"IP_address\"\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-2)\" && exit 1\n\tfi\n}\nget_IP_address(){\n\tif [[ ! -z ${user_IP} ]]; then\n\t\tfor((integer_1 = ${user_IP_total}; integer_1 >= 1; integer_1--))\n\t\tdo\n\t\t\tIP=$(echo \"${user_IP}\" |sed -n \"$integer_1\"p)\n\t\t\tIP_address=$(wget -qO- -t1 -T2 http://freeapi.ipip.net/${IP}|sed 's/\\\"//g;s/,//g;s/\\[//g;s/\\]//g')\n\t\t\techo -e \"${Green_font_prefix}${IP}${Font_color_suffix} (${IP_address})\"\n\t\t\tsleep 1s\n\t\tdone\n\tfi\n}\nSet_crontab_monitor(){\n\tcheck_crontab_installed_status\n\tcrontab_monitor_status=$(crontab -l|grep \"ss-go.sh monitor\")\n\tif [[ -z \"${crontab_monitor_status}\" ]]; then\n\t\techo && echo -e \"当前监控模式: ${Red_font_prefix}未开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要开启 ${Green_font_prefix}Shadowsocks 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动 Shadowsocks 服务端)[Y/n]\"\n\t\tread -e -p \"(默认: y):\" crontab_monitor_status_ny\n\t\t[[ -z \"${crontab_monitor_status_ny}\" ]] && crontab_monitor_status_ny=\"y\"\n\t\tif [[ ${crontab_monitor_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_cron_start\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"当前监控模式: ${Green_font_prefix}已开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要关闭 ${Red_font_prefix}Shadowsocks 服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动 Shadowsocks 服务端)[y/N]\"\n\t\tread -e -p \"(默认: n):\" crontab_monitor_status_ny\n\t\t[[ -z \"${crontab_monitor_status_ny}\" ]] && crontab_monitor_status_ny=\"n\"\n\t\tif [[ ${crontab_monitor_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_cron_stop\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\ncrontab_monitor_cron_start(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/ss-go.sh monitor/d\" \"$file_1/crontab.bak\"\n\techo -e \"\\n* * * * * /bin/bash $file_1/ss-go.sh monitor\" >> \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"ss-go.sh monitor\")\n\tif [[ -z ${cron_config} ]]; then\n\t\techo -e \"${Error} Shadowsocks 服务端运行状态监控功能 启动失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} Shadowsocks 服务端运行状态监控功能 启动成功 !\"\n\tfi\n}\ncrontab_monitor_cron_stop(){\n\tcrontab -l > \"$file_1/crontab.bak\"\n\tsed -i \"/ss-go.sh monitor/d\" \"$file_1/crontab.bak\"\n\tcrontab \"$file_1/crontab.bak\"\n\trm -r \"$file_1/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"ss-go.sh monitor\")\n\tif [[ ! -z ${cron_config} ]]; then\n\t\techo -e \"${Error} Shadowsocks 服务端运行状态监控功能 停止失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} Shadowsocks 服务端运行状态监控功能 停止成功 !\"\n\tfi\n}\ncrontab_monitor(){\n\tcheck_installed_status\n\tcheck_pid\n\t#echo \"${PID}\"\n\tif [[ -z ${PID} ]]; then\n\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] 检测到 Shadowsocks服务端 未运行 , 开始启动...\" | tee -a ${LOG}\n\t\t/etc/init.d/ss-go start\n\t\tsleep 1s\n\t\tcheck_pid\n\t\tif [[ -z ${PID} ]]; then\n\t\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Shadowsocks服务端 启动失败...\" | tee -a ${LOG}\n\t\telse\n\t\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Shadowsocks服务端 启动成功...\" | tee -a ${LOG}\n\t\tfi\n\telse\n\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] Shadowsocks服务端 进程运行正常...\" | tee -a ${LOG}\n\tfi\n}\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${ss_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${ss_port} -j ACCEPT\n\tip6tables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${ss_port} -j ACCEPT\n\tip6tables -I INPUT -m state --state NEW -m udp -p udp --dport ${ss_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n\tip6tables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\tip6tables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tservice ip6tables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\tip6tables-save > /etc/ip6tables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tservice ip6tables save\n\t\tchkconfig --level 2345 iptables on\n\t\tchkconfig --level 2345 ip6tables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\tip6tables-save > /etc/ip6tables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules\\n/sbin/ip6tables-restore < /etc/ip6tables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ss-go.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/ss-go\" ]]; then\n\t\trm -rf /etc/init.d/ss-go\n\t\tService\n\tfi\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ss-go.sh\" && chmod +x ss-go.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\ncheck_sys\naction=$1\nif [[ \"${action}\" == \"monitor\" ]]; then\n\tcrontab_monitor\nelse\n\techo && echo -e \"  Shadowsocks-Go 一键管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  ---- Toyo | doub.io/ss-jc67 ----\n  \n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 Shadowsocks\n ${Green_font_prefix} 2.${Font_color_suffix} 更新 Shadowsocks\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 Shadowsocks\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 Shadowsocks\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 Shadowsocks\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 Shadowsocks\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 设置 账号配置\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 账号信息\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 日志信息\n ${Green_font_prefix}10.${Font_color_suffix} 查看 链接信息\n————————————\" && echo\n\tif [[ -e ${FILE} ]]; then\n\t\tcheck_pid\n\t\tif [[ ! -z \"${PID}\" ]]; then\n\t\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\t\telse\n\t\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\t\tfi\n\telse\n\t\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\n\tfi\n\techo\n\tread -e -p \" 请输入数字 [0-10]:\" num\n\tcase \"$num\" in\n\t\t0)\n\t\tUpdate_Shell\n\t\t;;\n\t\t1)\n\t\tInstall\n\t\t;;\n\t\t2)\n\t\tUpdate\n\t\t;;\n\t\t3)\n\t\tUninstall\n\t\t;;\n\t\t4)\n\t\tStart\n\t\t;;\n\t\t5)\n\t\tStop\n\t\t;;\n\t\t6)\n\t\tRestart\n\t\t;;\n\t\t7)\n\t\tSet\n\t\t;;\n\t\t8)\n\t\tView\n\t\t;;\n\t\t9)\n\t\tView_Log\n\t\t;;\n\t\t10)\n\t\tView_user_connection_info\n\t\t;;\n\t\t*)\n\t\techo \"请输入正确数字 [0-10]\"\n\t\t;;\n\tesac\nfi"
        },
        {
          "name": "ssh_port.sh",
          "type": "blob",
          "size": 7.986328125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: Debian/Ubuntu\n#\tDescription: SSH modify port\n#\tVersion: 1.0.0\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/linux-jc11/\n#=================================================\n\nsh_ver=\"1.0.0\"\nCONF=\"/etc/ssh/sshd_config\"\nSSH_init_1=\"/etc/init.d/ssh\"\nSSH_init_2=\"/etc/init.d/sshd\"\nif [[ -e ${SSH_init_1} ]]; then\n\tSSH_init=${SSH_init_1}\nelif [[ -e ${SSH_init_2} ]]; then\n\tSSH_init=${SSH_init_2}\nelse\n\techo -e \"${Error} 找不到 SSH 的服务脚本文件！\" && exit 1\nfi\nbak_text=\"（可通过备份SSH配置文件复原：[ ${Green_font_prefix}rm -rf /etc/ssh/sshd_config && mv /etc/ssh/sshd_config.bak /etc/ssh/sshd_config && ${SSH_init} restart${Font_color_suffix} ]）\"\nover_text=\"${Tip} 当服务器存在外部防火墙时（如 阿里云、腾讯云、微软云、谷歌云、亚马逊云等），需要外部防火墙开放 新SSH端口TCP协议方可连接！(如使用途中出现任何问题均可通过该代码复原：[ ${Green_font_prefix}rm -rf /etc/ssh/sshd_config && mv /etc/ssh/sshd_config.bak /etc/ssh/sshd_config && ${SSH_init} restart${Font_color_suffix} ] )\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\" && Error=\"${Red_font_prefix}[错误]${Font_color_suffix}\" && Tip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\n\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\t#bit=`uname -m`\n}\ncheck_installed_status(){\n\t[[ ! -e ${CONF} ]] && echo -e \"${Error} SSH配置文件不存在[ ${CONF} ]，请检查 !\" && exit 1\n}\ncheck_pid(){\n\tPID=$(ps -ef| grep '/usr/sbin/sshd'| grep -v grep| awk '{print $2}')\n}\nRead_config(){\n\tport_all=$(cat ${CONF}|grep -v '#'|grep \"Port \"|awk '{print $2}')\n\tif [[ -z ${port_all} ]]; then\n\t\tport=22\n\telse\n\t\tport=${port_all}\n\tfi\n}\nSet_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"\\n旧SSH端口：${Green_font_prefix}[${port}]${Font_color_suffix}\"\n\t\techo -e \"请输入新的SSH端口 [1-65535]\"\n\t\tread -e -p \"(输入为空则取消):\" new_port\n\t\t[[ -z \"${new_port}\" ]] && echo \"取消...\" && exit 1\n\t\techo $((${new_port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${new_port} -ge 1 ]] && [[ ${new_port} -le 65535 ]]; then\n\t\t\t\tif [[ ${new_port} == ${port} ]]; then\n\t\t\t\t\techo -e \"输入错误, 新端口与旧端口一致。\"\n\t\t\t\telse\n\t\t\t\t\techo && echo \"=============================\"\n\t\t\t\t\techo -e \"\t新端口 : ${Red_background_prefix} ${new_port} ${Font_color_suffix}\"\n\t\t\t\t\techo \"=============================\" && echo\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\techo -e \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo -e \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\tdone\n}\nchoose_the_way(){\n\techo -e \"请选择SSH端口修改方式：\n 1. 直接修改（直接修改旧端口为新端口，并且防火墙禁止旧端口 开放新端口）\n 2. 保守修改（不删除旧端口，先添加新端口，然后手动断开SSH链接并使用新端口尝试链接，如果链接正常，那么再次执行脚本删除旧端口配置）\\n\n 一般来说修改SSH端口不会出现什么问题，但保守起见，我做了两个修改方式。\n 如果不懂请选 ${Green_font_prefix}[2. 保守修改]${Font_color_suffix}，避免因为未知问题而导致修改后无法通过 新端口和旧端口 链接服务器！\\n\n ${over_text}\\n\"\n\tread -e -p \"(默认: 2. 保守修改):\" choose_the_way_num\n\t[[ -z \"${choose_the_way_num}\" ]] && choose_the_way_num=\"2\"\n\tif [[ ${choose_the_way_num} == \"1\" ]]; then\n\t\tcp -f \"${CONF}\" \"/etc/ssh/sshd_config.bak\"\n\t\tDirect_modification\n\telif [[ ${choose_the_way_num} == \"2\" ]]; then\n\t\tcp -f \"${CONF}\" \"/etc/ssh/sshd_config.bak\"\n\t\tConservative_modifications\n\telse\n\t\techo -e \"${Error} 请输入正确的数字 [1-2]\" && exit 1\n\tfi\n}\nDirect_modification(){\n\techo -e \"${Info} 删除旧端口配置...\"\n\tsed -i \"/Port ${port}/d\" \"${CONF}\"\n\techo -e \"${Info} 添加新端口配置...\"\n\techo -e \"\\nPort ${new_port}\" >> \"${CONF}\"\n\t${SSH_init} restart\n\tsleep 2s\n\tcheck_pid\n\tif [[ -z ${PID} ]]; then\n\t\t\techo -e \"${Error} SSH 启动失败 !${bak_text}\" && exit 1\n\t\telse\n\t\t\tport_status=$(netstat -lntp|grep ssh|awk '{print $4}'|grep -w \"${new_port}\")\n\t\t\tif [[ -z ${port_status} ]]; then\n\t\t\t\techo -e \"${Error} SSH 端口修改失败 !${bak_text}\" && exit 1\n\t\t\telse\n\t\t\t\tDel_iptables_ACCEPT\n\t\t\t\tDel_iptables_DROP\n\t\t\t\tAdd_iptables_ACCEPT\n\t\t\t\tAdd_iptables_DROP\n\t\t\t\tSet_iptables\n\t\t\t\t#rm -rf /etc/ssh/sshd_config.bak\n\t\t\t\techo -e \"${Info} SSH 端口修改成功！新端口：[${Green_font_prefix}${new_port}${Font_color_suffix}]\"\n\t\t\t\techo -e \"${over_text}\"\n\t\t\tfi\n\t\tfi\n}\nConservative_modifications(){\n\tif [[ $1 != \"End\" ]]; then\n\t\techo -e \"${Info} 添加新端口配置...\"\n\t\techo -e \"\\nPort ${new_port}\" >> \"${CONF}\"\n\t\t${SSH_init} restart\n\t\tsleep 2s\n\t\tcheck_pid\n\t\tif [[ -z ${PID} ]]; then\n\t\t\techo -e \"${Error} SSH 启动失败 !${bak_text}\" && exit 1\n\t\telse\n\t\t\tport_status=$(netstat -lntp|grep ssh|awk '{print $4}'|grep -w \"${new_port}\")\n\t\t\tif [[ -z ${port_status} ]]; then\n\t\t\t\techo -e \"${Error} SSH 端口添加失败 !${bak_text}\" && exit 1\n\t\t\telse\n\t\t\t\tAdd_iptables_ACCEPT\n\t\t\t\tSet_iptables\n\t\t\t\techo \"${new_port}|${port}\" > \"${file}/ssh_port.conf\"\n\t\t\t\techo -e \"${Info} SSH 端口添加成功 ! \n请手动断开 SSH链接并使用新端口 ${Green_font_prefix}[${new_port}]${Font_color_suffix} 尝试链接，如无法链接 请通过旧端口 ${Green_font_prefix}[${port}]${Font_color_suffix} 链接，如链接正常 请链接后再次执行脚本${Green_font_prefix} [bash ${file}/ssh_port.sh end]${Font_color_suffix} 以删除旧端口配置！\"\n\t\t\t\techo -e \"${over_text}\"\n\t\t\tfi\n\t\tfi\n\telse\n\t\t[[ ! -e \"${file}/ssh_port.conf\" ]] && echo -e \"${Error} ${file}/ssh_port.conf 文件缺失 !\" && exit 1\n\t\tnew_port=$(cat \"${file}/ssh_port.conf\"|awk -F '|' '{print $1}')\n\t\tport=$(cat \"${file}/ssh_port.conf\"|awk -F '|' '{print $2}')\n\t\trm -rf \"${file}/ssh_port.conf\"\n\t\techo -e \"${Info} 删除旧端口配置...\"\n\t\tsed -i \"/Port ${port}/d\" \"${CONF}\"\n\t\t${SSH_init} restart\n\t\tsleep 2s\n\t\tcheck_pid\n\t\tif [[ -z ${PID} ]]; then\n\t\t\techo -e \"${Error} SSH 启动失败 !\" && exit 1\n\t\telse\n\t\t\tAdd_iptables_DROP\n\t\t\tSet_iptables\n\t\t\t#rm -rf /etc/ssh/sshd_config.bak\n\t\t\techo -e \"${Info} 所有配置完成！新端口：[${Green_font_prefix}${new_port}${Font_color_suffix}]\"\n\t\t\techo -e \"${over_text}\"\n\t\tfi\n\tfi\n}\nmodify_ssh(){\n\tRead_config\n\tSet_port\n\tchoose_the_way\n}\nend_ssh(){\n\tConservative_modifications \"End\"\n}\nAdd_iptables_ACCEPT(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${new_port} -j ACCEPT\n}\nDel_iptables_ACCEPT(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n}\nAdd_iptables_DROP(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j DROP\n}\nDel_iptables_DROP(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${new_port} -j DROP\n}\nSet_iptables(){\n\tiptables-save > /etc/iptables.up.rules\n\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\tchmod +x /etc/network/if-pre-up.d/iptables\n}\ncheck_sys\n[[ ${release} != \"debian\" ]] && [[ ${release} != \"ubuntu\" ]] && echo -e \"${Error} 本脚本不支持当前系统 ${release} !\" && exit 1\ncheck_installed_status\naction=$1\n[[ -z $1 ]] && action=modify\ncase \"$action\" in\n    modify|end)\n    ${action}_ssh\n    ;;\n    *)\n    echo \"输入错误 !\"\n    echo \"用法: {modify|end}\"\n    ;;\nesac"
        },
        {
          "name": "ssr.sh",
          "type": "blob",
          "size": 59.7470703125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS 6+/Debian 6+/Ubuntu 14.04+\n#\tDescription: Install the ShadowsocksR server\n#\tVersion: 2.0.38\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/ss-jc42/\n#=================================================\n\nsh_ver=\"2.0.38\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\nssr_folder=\"/usr/local/shadowsocksr\"\nssr_ss_file=\"${ssr_folder}/shadowsocks\"\nconfig_file=\"${ssr_folder}/config.json\"\nconfig_folder=\"/etc/shadowsocksr\"\nconfig_user_file=\"${config_folder}/user-config.json\"\nssr_log_file=\"${ssr_ss_file}/ssserver.log\"\nLibsodiumr_file=\"/usr/local/lib/libsodium.so\"\nLibsodiumr_ver_backup=\"1.0.13\"\nServer_Speeder_file=\"/serverspeeder/bin/serverSpeeder.sh\"\nLotServer_file=\"/appex/bin/serverSpeeder.sh\"\nBBR_file=\"${file}/bbr.sh\"\njq_file=\"${ssr_folder}/jq\"\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\nSeparator_1=\"——————————————————————————————\"\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前账号非ROOT(或没有ROOT权限)，无法继续操作，请使用${Green_background_prefix} sudo su ${Font_color_suffix}来获取临时ROOT权限（执行后会提示输入当前账号的密码）。\" && exit 1\n}\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_pid(){\n\tPID=`ps -ef |grep -v grep | grep server.py |awk '{print $2}'`\n}\nSSR_installation_status(){\n\t[[ ! -e ${config_user_file} ]] && echo -e \"${Error} 没有发现 ShadowsocksR 配置文件，请检查 !\" && exit 1\n\t[[ ! -e ${ssr_folder} ]] && echo -e \"${Error} 没有发现 ShadowsocksR 文件夹，请检查 !\" && exit 1\n}\nServer_Speeder_installation_status(){\n\t[[ ! -e ${Server_Speeder_file} ]] && echo -e \"${Error} 没有安装 锐速(Server Speeder)，请检查 !\" && exit 1\n}\nLotServer_installation_status(){\n\t[[ ! -e ${LotServer_file} ]] && echo -e \"${Error} 没有安装 LotServer，请检查 !\" && exit 1\n}\nBBR_installation_status(){\n\tif [[ ! -e ${BBR_file} ]]; then\n\t\techo -e \"${Error} 没有发现 BBR脚本，开始下载...\"\n\t\tcd \"${file}\"\n\t\tif ! wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/bbr.sh; then\n\t\t\techo -e \"${Error} BBR 脚本下载失败 !\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} BBR 脚本下载完成 !\"\n\t\t\tchmod +x bbr.sh\n\t\tfi\n\tfi\n}\n# 设置 防火墙规则\nAdd_iptables(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${ssr_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${ssr_port} -j ACCEPT\n\tip6tables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${ssr_port} -j ACCEPT\n\tip6tables -I INPUT -m state --state NEW -m udp -p udp --dport ${ssr_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n\tip6tables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\tip6tables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tservice ip6tables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\tip6tables-save > /etc/ip6tables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tservice ip6tables save\n\t\tchkconfig --level 2345 iptables on\n\t\tchkconfig --level 2345 ip6tables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\tip6tables-save > /etc/ip6tables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules\\n/sbin/ip6tables-restore < /etc/ip6tables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\n# 读取 配置信息\nGet_IP(){\n\tip=$(wget -qO- -t1 -T2 ipinfo.io/ip)\n\tif [[ -z \"${ip}\" ]]; then\n\t\tip=$(wget -qO- -t1 -T2 api.ip.sb/ip)\n\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\tip=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\t\tip=\"VPS_IP\"\n\t\t\tfi\n\t\tfi\n\tfi\n}\nGet_User(){\n\t[[ ! -e ${jq_file} ]] && echo -e \"${Error} JQ解析器 不存在，请检查 !\" && exit 1\n\tport=`${jq_file} '.server_port' ${config_user_file}`\n\tpassword=`${jq_file} '.password' ${config_user_file} | sed 's/^.//;s/.$//'`\n\tmethod=`${jq_file} '.method' ${config_user_file} | sed 's/^.//;s/.$//'`\n\tprotocol=`${jq_file} '.protocol' ${config_user_file} | sed 's/^.//;s/.$//'`\n\tobfs=`${jq_file} '.obfs' ${config_user_file} | sed 's/^.//;s/.$//'`\n\tprotocol_param=`${jq_file} '.protocol_param' ${config_user_file} | sed 's/^.//;s/.$//'`\n\tspeed_limit_per_con=`${jq_file} '.speed_limit_per_con' ${config_user_file}`\n\tspeed_limit_per_user=`${jq_file} '.speed_limit_per_user' ${config_user_file}`\n\tconnect_verbose_info=`${jq_file} '.connect_verbose_info' ${config_user_file}`\n}\nurlsafe_base64(){\n\tdate=$(echo -n \"$1\"|base64|sed ':a;N;s/\\n/ /g;ta'|sed 's/ //g;s/=//g;s/+/-/g;s/\\//_/g')\n\techo -e \"${date}\"\n}\nss_link_qr(){\n\tSSbase64=$(urlsafe_base64 \"${method}:${password}@${ip}:${port}\")\n\tSSurl=\"ss://${SSbase64}\"\n\tSSQRcode=\"http://doub.pw/qr/qr.php?text=${SSurl}\"\n\tss_link=\" SS    链接 : ${Green_font_prefix}${SSurl}${Font_color_suffix} \\n SS  二维码 : ${Green_font_prefix}${SSQRcode}${Font_color_suffix}\"\n}\nssr_link_qr(){\n\tSSRprotocol=$(echo ${protocol} | sed 's/_compatible//g')\n\tSSRobfs=$(echo ${obfs} | sed 's/_compatible//g')\n\tSSRPWDbase64=$(urlsafe_base64 \"${password}\")\n\tSSRbase64=$(urlsafe_base64 \"${ip}:${port}:${SSRprotocol}:${method}:${SSRobfs}:${SSRPWDbase64}\")\n\tSSRurl=\"ssr://${SSRbase64}\"\n\tSSRQRcode=\"http://doub.pw/qr/qr.php?text=${SSRurl}\"\n\tssr_link=\" SSR   链接 : ${Red_font_prefix}${SSRurl}${Font_color_suffix} \\n SSR 二维码 : ${Red_font_prefix}${SSRQRcode}${Font_color_suffix} \\n \"\n}\nss_ssr_determine(){\n\tprotocol_suffix=`echo ${protocol} | awk -F \"_\" '{print $NF}'`\n\tobfs_suffix=`echo ${obfs} | awk -F \"_\" '{print $NF}'`\n\tif [[ ${protocol} = \"origin\" ]]; then\n\t\tif [[ ${obfs} = \"plain\" ]]; then\n\t\t\tss_link_qr\n\t\t\tssr_link=\"\"\n\t\telse\n\t\t\tif [[ ${obfs_suffix} != \"compatible\" ]]; then\n\t\t\t\tss_link=\"\"\n\t\t\telse\n\t\t\t\tss_link_qr\n\t\t\tfi\n\t\tfi\n\telse\n\t\tif [[ ${protocol_suffix} != \"compatible\" ]]; then\n\t\t\tss_link=\"\"\n\t\telse\n\t\t\tif [[ ${obfs_suffix} != \"compatible\" ]]; then\n\t\t\t\tif [[ ${obfs_suffix} = \"plain\" ]]; then\n\t\t\t\t\tss_link_qr\n\t\t\t\telse\n\t\t\t\t\tss_link=\"\"\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\tss_link_qr\n\t\t\tfi\n\t\tfi\n\tfi\n\tssr_link_qr\n}\n# 显示 配置信息\nView_User(){\n\tSSR_installation_status\n\tGet_IP\n\tGet_User\n\tnow_mode=$(cat \"${config_user_file}\"|grep '\"port_password\"')\n\t[[ -z ${protocol_param} ]] && protocol_param=\"0(无限)\"\n\tif [[ -z \"${now_mode}\" ]]; then\n\t\tss_ssr_determine\n\t\tclear && echo \"===================================================\" && echo\n\t\techo -e \" ShadowsocksR账号 配置信息：\" && echo\n\t\techo -e \" I  P\\t    : ${Green_font_prefix}${ip}${Font_color_suffix}\"\n\t\techo -e \" 端口\\t    : ${Green_font_prefix}${port}${Font_color_suffix}\"\n\t\techo -e \" 密码\\t    : ${Green_font_prefix}${password}${Font_color_suffix}\"\n\t\techo -e \" 加密\\t    : ${Green_font_prefix}${method}${Font_color_suffix}\"\n\t\techo -e \" 协议\\t    : ${Red_font_prefix}${protocol}${Font_color_suffix}\"\n\t\techo -e \" 混淆\\t    : ${Red_font_prefix}${obfs}${Font_color_suffix}\"\n\t\techo -e \" 设备数限制 : ${Green_font_prefix}${protocol_param}${Font_color_suffix}\"\n\t\techo -e \" 单线程限速 : ${Green_font_prefix}${speed_limit_per_con} KB/S${Font_color_suffix}\"\n\t\techo -e \" 端口总限速 : ${Green_font_prefix}${speed_limit_per_user} KB/S${Font_color_suffix}\"\n\t\techo -e \"${ss_link}\"\n\t\techo -e \"${ssr_link}\"\n\t\techo -e \" ${Green_font_prefix} 提示: ${Font_color_suffix}\n 在浏览器中，打开二维码链接，就可以看到二维码图片。\n 协议和混淆后面的[ _compatible ]，指的是 兼容原版协议/混淆。\"\n\t\techo && echo \"===================================================\"\n\telse\n\t\tuser_total=`${jq_file} '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | wc -l`\n\t\t[[ ${user_total} = \"0\" ]] && echo -e \"${Error} 没有发现 多端口用户，请检查 !\" && exit 1\n\t\tclear && echo \"===================================================\" && echo\n\t\techo -e \" ShadowsocksR账号 配置信息：\" && echo\n\t\techo -e \" I  P\\t    : ${Green_font_prefix}${ip}${Font_color_suffix}\"\n\t\techo -e \" 加密\\t    : ${Green_font_prefix}${method}${Font_color_suffix}\"\n\t\techo -e \" 协议\\t    : ${Red_font_prefix}${protocol}${Font_color_suffix}\"\n\t\techo -e \" 混淆\\t    : ${Red_font_prefix}${obfs}${Font_color_suffix}\"\n\t\techo -e \" 设备数限制 : ${Green_font_prefix}${protocol_param}${Font_color_suffix}\"\n\t\techo -e \" 单线程限速 : ${Green_font_prefix}${speed_limit_per_con} KB/S${Font_color_suffix}\"\n\t\techo -e \" 端口总限速 : ${Green_font_prefix}${speed_limit_per_user} KB/S${Font_color_suffix}\" && echo\n\t\tfor((integer = ${user_total}; integer >= 1; integer--))\n\t\tdo\n\t\t\tport=`${jq_file} '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $1}' | sed -n \"${integer}p\" | sed -r 's/.*\\\"(.+)\\\".*/\\1/'`\n\t\t\tpassword=`${jq_file} '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $2}' | sed -n \"${integer}p\" | sed -r 's/.*\\\"(.+)\\\".*/\\1/'`\n\t\t\tss_ssr_determine\n\t\t\techo -e ${Separator_1}\n\t\t\techo -e \" 端口\\t    : ${Green_font_prefix}${port}${Font_color_suffix}\"\n\t\t\techo -e \" 密码\\t    : ${Green_font_prefix}${password}${Font_color_suffix}\"\n\t\t\techo -e \"${ss_link}\"\n\t\t\techo -e \"${ssr_link}\"\n\t\tdone\n\t\techo -e \" ${Green_font_prefix} 提示: ${Font_color_suffix}\n 在浏览器中，打开二维码链接，就可以看到二维码图片。\n 协议和混淆后面的[ _compatible ]，指的是 兼容原版协议/混淆。\"\n\t\techo && echo \"===================================================\"\n\tfi\n}\n# 设置 配置信息\nSet_config_port(){\n\twhile true\n\tdo\n\techo -e \"请输入要设置的ShadowsocksR账号 端口\"\n\tread -e -p \"(默认: 2333):\" ssr_port\n\t[[ -z \"$ssr_port\" ]] && ssr_port=\"2333\"\n\techo $((${ssr_port}+0)) &>/dev/null\n\tif [[ $? == 0 ]]; then\n\t\tif [[ ${ssr_port} -ge 1 ]] && [[ ${ssr_port} -le 65535 ]]; then\n\t\t\techo && echo ${Separator_1} && echo -e \"\t端口 : ${Green_font_prefix}${ssr_port}${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字(1-65535)\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-65535)\"\n\tfi\n\tdone\n}\nSet_config_password(){\n\techo \"请输入要设置的ShadowsocksR账号 密码\"\n\tread -e -p \"(默认: doub.io):\" ssr_password\n\t[[ -z \"${ssr_password}\" ]] && ssr_password=\"doub.io\"\n\techo && echo ${Separator_1} && echo -e \"\t密码 : ${Green_font_prefix}${ssr_password}${Font_color_suffix}\" && echo ${Separator_1} && echo\n}\nSet_config_method(){\n\techo -e \"请选择要设置的ShadowsocksR账号 加密方式\n\t\n ${Green_font_prefix} 1.${Font_color_suffix} none\n ${Tip} 如果使用 auth_chain_a 协议，请加密方式选择 none，混淆随意(建议 plain)\n \n ${Green_font_prefix} 2.${Font_color_suffix} rc4\n ${Green_font_prefix} 3.${Font_color_suffix} rc4-md5\n ${Green_font_prefix} 4.${Font_color_suffix} rc4-md5-6\n \n ${Green_font_prefix} 5.${Font_color_suffix} aes-128-ctr\n ${Green_font_prefix} 6.${Font_color_suffix} aes-192-ctr\n ${Green_font_prefix} 7.${Font_color_suffix} aes-256-ctr\n \n ${Green_font_prefix} 8.${Font_color_suffix} aes-128-cfb\n ${Green_font_prefix} 9.${Font_color_suffix} aes-192-cfb\n ${Green_font_prefix}10.${Font_color_suffix} aes-256-cfb\n \n ${Green_font_prefix}11.${Font_color_suffix} aes-128-cfb8\n ${Green_font_prefix}12.${Font_color_suffix} aes-192-cfb8\n ${Green_font_prefix}13.${Font_color_suffix} aes-256-cfb8\n \n ${Green_font_prefix}14.${Font_color_suffix} salsa20\n ${Green_font_prefix}15.${Font_color_suffix} chacha20\n ${Green_font_prefix}16.${Font_color_suffix} chacha20-ietf\n ${Tip} salsa20/chacha20-*系列加密方式，需要额外安装依赖 libsodium ，否则会无法启动ShadowsocksR !\" && echo\n\tread -e -p \"(默认: 5. aes-128-ctr):\" ssr_method\n\t[[ -z \"${ssr_method}\" ]] && ssr_method=\"5\"\n\tif [[ ${ssr_method} == \"1\" ]]; then\n\t\tssr_method=\"none\"\n\telif [[ ${ssr_method} == \"2\" ]]; then\n\t\tssr_method=\"rc4\"\n\telif [[ ${ssr_method} == \"3\" ]]; then\n\t\tssr_method=\"rc4-md5\"\n\telif [[ ${ssr_method} == \"4\" ]]; then\n\t\tssr_method=\"rc4-md5-6\"\n\telif [[ ${ssr_method} == \"5\" ]]; then\n\t\tssr_method=\"aes-128-ctr\"\n\telif [[ ${ssr_method} == \"6\" ]]; then\n\t\tssr_method=\"aes-192-ctr\"\n\telif [[ ${ssr_method} == \"7\" ]]; then\n\t\tssr_method=\"aes-256-ctr\"\n\telif [[ ${ssr_method} == \"8\" ]]; then\n\t\tssr_method=\"aes-128-cfb\"\n\telif [[ ${ssr_method} == \"9\" ]]; then\n\t\tssr_method=\"aes-192-cfb\"\n\telif [[ ${ssr_method} == \"10\" ]]; then\n\t\tssr_method=\"aes-256-cfb\"\n\telif [[ ${ssr_method} == \"11\" ]]; then\n\t\tssr_method=\"aes-128-cfb8\"\n\telif [[ ${ssr_method} == \"12\" ]]; then\n\t\tssr_method=\"aes-192-cfb8\"\n\telif [[ ${ssr_method} == \"13\" ]]; then\n\t\tssr_method=\"aes-256-cfb8\"\n\telif [[ ${ssr_method} == \"14\" ]]; then\n\t\tssr_method=\"salsa20\"\n\telif [[ ${ssr_method} == \"15\" ]]; then\n\t\tssr_method=\"chacha20\"\n\telif [[ ${ssr_method} == \"16\" ]]; then\n\t\tssr_method=\"chacha20-ietf\"\n\telse\n\t\tssr_method=\"aes-128-ctr\"\n\tfi\n\techo && echo ${Separator_1} && echo -e \"\t加密 : ${Green_font_prefix}${ssr_method}${Font_color_suffix}\" && echo ${Separator_1} && echo\n}\nSet_config_protocol(){\n\techo -e \"请选择要设置的ShadowsocksR账号 协议插件\n\t\n ${Green_font_prefix}1.${Font_color_suffix} origin\n ${Green_font_prefix}2.${Font_color_suffix} auth_sha1_v4\n ${Green_font_prefix}3.${Font_color_suffix} auth_aes128_md5\n ${Green_font_prefix}4.${Font_color_suffix} auth_aes128_sha1\n ${Green_font_prefix}5.${Font_color_suffix} auth_chain_a\n ${Green_font_prefix}6.${Font_color_suffix} auth_chain_b\n ${Tip} 如果使用 auth_chain_a 协议，请加密方式选择 none，混淆随意(建议 plain)\" && echo\n\tread -e -p \"(默认: 2. auth_sha1_v4):\" ssr_protocol\n\t[[ -z \"${ssr_protocol}\" ]] && ssr_protocol=\"2\"\n\tif [[ ${ssr_protocol} == \"1\" ]]; then\n\t\tssr_protocol=\"origin\"\n\telif [[ ${ssr_protocol} == \"2\" ]]; then\n\t\tssr_protocol=\"auth_sha1_v4\"\n\telif [[ ${ssr_protocol} == \"3\" ]]; then\n\t\tssr_protocol=\"auth_aes128_md5\"\n\telif [[ ${ssr_protocol} == \"4\" ]]; then\n\t\tssr_protocol=\"auth_aes128_sha1\"\n\telif [[ ${ssr_protocol} == \"5\" ]]; then\n\t\tssr_protocol=\"auth_chain_a\"\n\telif [[ ${ssr_protocol} == \"6\" ]]; then\n\t\tssr_protocol=\"auth_chain_b\"\n\telse\n\t\tssr_protocol=\"auth_sha1_v4\"\n\tfi\n\techo && echo ${Separator_1} && echo -e \"\t协议 : ${Green_font_prefix}${ssr_protocol}${Font_color_suffix}\" && echo ${Separator_1} && echo\n\tif [[ ${ssr_protocol} != \"origin\" ]]; then\n\t\tif [[ ${ssr_protocol} == \"auth_sha1_v4\" ]]; then\n\t\t\tread -e -p \"是否设置 协议插件兼容原版(_compatible)？[Y/n]\" ssr_protocol_yn\n\t\t\t[[ -z \"${ssr_protocol_yn}\" ]] && ssr_protocol_yn=\"y\"\n\t\t\t[[ $ssr_protocol_yn == [Yy] ]] && ssr_protocol=${ssr_protocol}\"_compatible\"\n\t\t\techo\n\t\tfi\n\tfi\n}\nSet_config_obfs(){\n\techo -e \"请选择要设置的ShadowsocksR账号 混淆插件\n\t\n ${Green_font_prefix}1.${Font_color_suffix} plain\n ${Green_font_prefix}2.${Font_color_suffix} http_simple\n ${Green_font_prefix}3.${Font_color_suffix} http_post\n ${Green_font_prefix}4.${Font_color_suffix} random_head\n ${Green_font_prefix}5.${Font_color_suffix} tls1.2_ticket_auth\n ${Tip} 如果使用 ShadowsocksR 加速游戏，请选择 混淆兼容原版或 plain 混淆，然后客户端选择 plain，否则会增加延迟 !\n 另外, 如果你选择了 tls1.2_ticket_auth，那么客户端可以选择 tls1.2_ticket_fastauth，这样即能伪装又不会增加延迟 !\n 如果你是在日本、美国等热门地区搭建，那么选择 plain 混淆可能被墙几率更低 !\" && echo\n\tread -e -p \"(默认: 1. plain):\" ssr_obfs\n\t[[ -z \"${ssr_obfs}\" ]] && ssr_obfs=\"1\"\n\tif [[ ${ssr_obfs} == \"1\" ]]; then\n\t\tssr_obfs=\"plain\"\n\telif [[ ${ssr_obfs} == \"2\" ]]; then\n\t\tssr_obfs=\"http_simple\"\n\telif [[ ${ssr_obfs} == \"3\" ]]; then\n\t\tssr_obfs=\"http_post\"\n\telif [[ ${ssr_obfs} == \"4\" ]]; then\n\t\tssr_obfs=\"random_head\"\n\telif [[ ${ssr_obfs} == \"5\" ]]; then\n\t\tssr_obfs=\"tls1.2_ticket_auth\"\n\telse\n\t\tssr_obfs=\"plain\"\n\tfi\n\techo && echo ${Separator_1} && echo -e \"\t混淆 : ${Green_font_prefix}${ssr_obfs}${Font_color_suffix}\" && echo ${Separator_1} && echo\n\tif [[ ${ssr_obfs} != \"plain\" ]]; then\n\t\t\tread -e -p \"是否设置 混淆插件兼容原版(_compatible)？[Y/n]\" ssr_obfs_yn\n\t\t\t[[ -z \"${ssr_obfs_yn}\" ]] && ssr_obfs_yn=\"y\"\n\t\t\t[[ $ssr_obfs_yn == [Yy] ]] && ssr_obfs=${ssr_obfs}\"_compatible\"\n\t\t\techo\n\tfi\n}\nSet_config_protocol_param(){\n\twhile true\n\tdo\n\techo -e \"请输入要设置的ShadowsocksR账号 欲限制的设备数 (${Green_font_prefix} auth_* 系列协议 不兼容原版才有效 ${Font_color_suffix})\"\n\techo -e \"${Tip} 设备数限制：每个端口同一时间能链接的客户端数量(多端口模式，每个端口都是独立计算)，建议最少 2个。\"\n\tread -e -p \"(默认: 无限):\" ssr_protocol_param\n\t[[ -z \"$ssr_protocol_param\" ]] && ssr_protocol_param=\"\" && echo && break\n\techo $((${ssr_protocol_param}+0)) &>/dev/null\n\tif [[ $? == 0 ]]; then\n\t\tif [[ ${ssr_protocol_param} -ge 1 ]] && [[ ${ssr_protocol_param} -le 9999 ]]; then\n\t\t\techo && echo ${Separator_1} && echo -e \"\t设备数限制 : ${Green_font_prefix}${ssr_protocol_param}${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字(1-9999)\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-9999)\"\n\tfi\n\tdone\n}\nSet_config_speed_limit_per_con(){\n\twhile true\n\tdo\n\techo -e \"请输入要设置的每个端口 单线程 限速上限(单位：KB/S)\"\n\techo -e \"${Tip} 单线程限速：每个端口 单线程的限速上限，多线程即无效。\"\n\tread -e -p \"(默认: 无限):\" ssr_speed_limit_per_con\n\t[[ -z \"$ssr_speed_limit_per_con\" ]] && ssr_speed_limit_per_con=0 && echo && break\n\techo $((${ssr_speed_limit_per_con}+0)) &>/dev/null\n\tif [[ $? == 0 ]]; then\n\t\tif [[ ${ssr_speed_limit_per_con} -ge 1 ]] && [[ ${ssr_speed_limit_per_con} -le 131072 ]]; then\n\t\t\techo && echo ${Separator_1} && echo -e \"\t单线程限速 : ${Green_font_prefix}${ssr_speed_limit_per_con} KB/S${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字(1-131072)\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-131072)\"\n\tfi\n\tdone\n}\nSet_config_speed_limit_per_user(){\n\twhile true\n\tdo\n\techo\n\techo -e \"请输入要设置的每个端口 总速度 限速上限(单位：KB/S)\"\n\techo -e \"${Tip} 端口总限速：每个端口 总速度 限速上限，单个端口整体限速。\"\n\tread -e -p \"(默认: 无限):\" ssr_speed_limit_per_user\n\t[[ -z \"$ssr_speed_limit_per_user\" ]] && ssr_speed_limit_per_user=0 && echo && break\n\techo $((${ssr_speed_limit_per_user}+0)) &>/dev/null\n\tif [[ $? == 0 ]]; then\n\t\tif [[ ${ssr_speed_limit_per_user} -ge 1 ]] && [[ ${ssr_speed_limit_per_user} -le 131072 ]]; then\n\t\t\techo && echo ${Separator_1} && echo -e \"\t端口总限速 : ${Green_font_prefix}${ssr_speed_limit_per_user} KB/S${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字(1-131072)\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-131072)\"\n\tfi\n\tdone\n}\nSet_config_all(){\n\tSet_config_port\n\tSet_config_password\n\tSet_config_method\n\tSet_config_protocol\n\tSet_config_obfs\n\tSet_config_protocol_param\n\tSet_config_speed_limit_per_con\n\tSet_config_speed_limit_per_user\n}\n# 修改 配置信息\nModify_config_port(){\n\tsed -i 's/\"server_port\": '\"$(echo ${port})\"'/\"server_port\": '\"$(echo ${ssr_port})\"'/g' ${config_user_file}\n}\nModify_config_password(){\n\tsed -i 's/\"password\": \"'\"$(echo ${password})\"'\"/\"password\": \"'\"$(echo ${ssr_password})\"'\"/g' ${config_user_file}\n}\nModify_config_method(){\n\tsed -i 's/\"method\": \"'\"$(echo ${method})\"'\"/\"method\": \"'\"$(echo ${ssr_method})\"'\"/g' ${config_user_file}\n}\nModify_config_protocol(){\n\tsed -i 's/\"protocol\": \"'\"$(echo ${protocol})\"'\"/\"protocol\": \"'\"$(echo ${ssr_protocol})\"'\"/g' ${config_user_file}\n}\nModify_config_obfs(){\n\tsed -i 's/\"obfs\": \"'\"$(echo ${obfs})\"'\"/\"obfs\": \"'\"$(echo ${ssr_obfs})\"'\"/g' ${config_user_file}\n}\nModify_config_protocol_param(){\n\tsed -i 's/\"protocol_param\": \"'\"$(echo ${protocol_param})\"'\"/\"protocol_param\": \"'\"$(echo ${ssr_protocol_param})\"'\"/g' ${config_user_file}\n}\nModify_config_speed_limit_per_con(){\n\tsed -i 's/\"speed_limit_per_con\": '\"$(echo ${speed_limit_per_con})\"'/\"speed_limit_per_con\": '\"$(echo ${ssr_speed_limit_per_con})\"'/g' ${config_user_file}\n}\nModify_config_speed_limit_per_user(){\n\tsed -i 's/\"speed_limit_per_user\": '\"$(echo ${speed_limit_per_user})\"'/\"speed_limit_per_user\": '\"$(echo ${ssr_speed_limit_per_user})\"'/g' ${config_user_file}\n}\nModify_config_connect_verbose_info(){\n\tsed -i 's/\"connect_verbose_info\": '\"$(echo ${connect_verbose_info})\"'/\"connect_verbose_info\": '\"$(echo ${ssr_connect_verbose_info})\"'/g' ${config_user_file}\n}\nModify_config_all(){\n\tModify_config_port\n\tModify_config_password\n\tModify_config_method\n\tModify_config_protocol\n\tModify_config_obfs\n\tModify_config_protocol_param\n\tModify_config_speed_limit_per_con\n\tModify_config_speed_limit_per_user\n}\nModify_config_port_many(){\n\tsed -i 's/\"'\"$(echo ${port})\"'\":/\"'\"$(echo ${ssr_port})\"'\":/g' ${config_user_file}\n}\nModify_config_password_many(){\n\tsed -i 's/\"'\"$(echo ${password})\"'\"/\"'\"$(echo ${ssr_password})\"'\"/g' ${config_user_file}\n}\n# 写入 配置信息\nWrite_configuration(){\n\tcat > ${config_user_file}<<-EOF\n{\n    \"server\": \"0.0.0.0\",\n    \"server_ipv6\": \"::\",\n    \"server_port\": ${ssr_port},\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1080,\n\n    \"password\": \"${ssr_password}\",\n    \"method\": \"${ssr_method}\",\n    \"protocol\": \"${ssr_protocol}\",\n    \"protocol_param\": \"${ssr_protocol_param}\",\n    \"obfs\": \"${ssr_obfs}\",\n    \"obfs_param\": \"\",\n    \"speed_limit_per_con\": ${ssr_speed_limit_per_con},\n    \"speed_limit_per_user\": ${ssr_speed_limit_per_user},\n\n    \"additional_ports\" : {},\n    \"timeout\": 120,\n    \"udp_timeout\": 60,\n    \"dns_ipv6\": false,\n    \"connect_verbose_info\": 0,\n    \"redirect\": \"\",\n    \"fast_open\": false\n}\nEOF\n}\nWrite_configuration_many(){\n\tcat > ${config_user_file}<<-EOF\n{\n    \"server\": \"0.0.0.0\",\n    \"server_ipv6\": \"::\",\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1080,\n\n    \"port_password\":{\n        \"${ssr_port}\":\"${ssr_password}\"\n    },\n    \"method\": \"${ssr_method}\",\n    \"protocol\": \"${ssr_protocol}\",\n    \"protocol_param\": \"${ssr_protocol_param}\",\n    \"obfs\": \"${ssr_obfs}\",\n    \"obfs_param\": \"\",\n    \"speed_limit_per_con\": ${ssr_speed_limit_per_con},\n    \"speed_limit_per_user\": ${ssr_speed_limit_per_user},\n\n    \"additional_ports\" : {},\n    \"timeout\": 120,\n    \"udp_timeout\": 60,\n    \"dns_ipv6\": false,\n    \"connect_verbose_info\": 0,\n    \"redirect\": \"\",\n    \"fast_open\": false\n}\nEOF\n}\nCheck_python(){\n\tpython_ver=`python -h`\n\tif [[ -z ${python_ver} ]]; then\n\t\techo -e \"${Info} 没有安装Python，开始安装...\"\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum install -y python\n\t\telse\n\t\t\tapt-get install -y python\n\t\tfi\n\tfi\n}\nCentos_yum(){\n\tyum update\n\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\tif [[ $? = 0 ]]; then\n\t\tyum install -y vim unzip net-tools\n\telse\n\t\tyum install -y vim unzip\n\tfi\n}\nDebian_apt(){\n\tapt-get update\n\tcat /etc/issue |grep 9\\..*>/dev/null\n\tif [[ $? = 0 ]]; then\n\t\tapt-get install -y vim unzip net-tools\n\telse\n\t\tapt-get install -y vim unzip\n\tfi\n}\n# 下载 ShadowsocksR\nDownload_SSR(){\n\tcd \"/usr/local/\"\n\twget -N --no-check-certificate \"https://github.com/ToyoDAdoubiBackup/shadowsocksr/archive/manyuser.zip\"\n\t#git config --global http.sslVerify false\n\t#env GIT_SSL_NO_VERIFY=true git clone -b manyuser https://github.com/ToyoDAdoubiBackup/shadowsocksr.git\n\t#[[ ! -e ${ssr_folder} ]] && echo -e \"${Error} ShadowsocksR服务端 下载失败 !\" && exit 1\n\t[[ ! -e \"manyuser.zip\" ]] && echo -e \"${Error} ShadowsocksR服务端 压缩包 下载失败 !\" && rm -rf manyuser.zip && exit 1\n\tunzip \"manyuser.zip\"\n\t[[ ! -e \"/usr/local/shadowsocksr-manyuser/\" ]] && echo -e \"${Error} ShadowsocksR服务端 解压失败 !\" && rm -rf manyuser.zip && exit 1\n\tmv \"/usr/local/shadowsocksr-manyuser/\" \"/usr/local/shadowsocksr/\"\n\t[[ ! -e \"/usr/local/shadowsocksr/\" ]] && echo -e \"${Error} ShadowsocksR服务端 重命名失败 !\" && rm -rf manyuser.zip && rm -rf \"/usr/local/shadowsocksr-manyuser/\" && exit 1\n\trm -rf manyuser.zip\n\t[[ -e ${config_folder} ]] && rm -rf ${config_folder}\n\tmkdir ${config_folder}\n\t[[ ! -e ${config_folder} ]] && echo -e \"${Error} ShadowsocksR配置文件的文件夹 建立失败 !\" && exit 1\n\techo -e \"${Info} ShadowsocksR服务端 下载完成 !\"\n}\nService_SSR(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/ssr_centos -O /etc/init.d/ssr; then\n\t\t\techo -e \"${Error} ShadowsocksR服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/ssr\n\t\tchkconfig --add ssr\n\t\tchkconfig ssr on\n\telse\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/ssr_debian -O /etc/init.d/ssr; then\n\t\t\techo -e \"${Error} ShadowsocksR服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/ssr\n\t\tupdate-rc.d -f ssr defaults\n\tfi\n\techo -e \"${Info} ShadowsocksR服务 管理脚本下载完成 !\"\n}\n# 安装 JQ解析器\nJQ_install(){\n\tif [[ ! -e ${jq_file} ]]; then\n\t\tcd \"${ssr_folder}\"\n\t\tif [[ ${bit} = \"x86_64\" ]]; then\n\t\t\tmv \"jq-linux64\" \"jq\"\n\t\t\t#wget --no-check-certificate \"https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64\" -O ${jq_file}\n\t\telse\n\t\t\tmv \"jq-linux32\" \"jq\"\n\t\t\t#wget --no-check-certificate \"https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux32\" -O ${jq_file}\n\t\tfi\n\t\t[[ ! -e ${jq_file} ]] && echo -e \"${Error} JQ解析器 重命名失败，请检查 !\" && exit 1\n\t\tchmod +x ${jq_file}\n\t\techo -e \"${Info} JQ解析器 安装完成，继续...\" \n\telse\n\t\techo -e \"${Info} JQ解析器 已安装，继续...\"\n\tfi\n}\n# 安装 依赖\nInstallation_dependency(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tCentos_yum\n\telse\n\t\tDebian_apt\n\tfi\n\t[[ ! -e \"/usr/bin/unzip\" ]] && echo -e \"${Error} 依赖 unzip(解压压缩包) 安装失败，多半是软件包源的问题，请检查 !\" && exit 1\n\tCheck_python\n\t#echo \"nameserver 8.8.8.8\" > /etc/resolv.conf\n\t#echo \"nameserver 8.8.4.4\" >> /etc/resolv.conf\n\t\\cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n}\nInstall_SSR(){\n\tcheck_root\n\t[[ -e ${config_user_file} ]] && echo -e \"${Error} ShadowsocksR 配置文件已存在，请检查( 如安装失败或者存在旧版本，请先卸载 ) !\" && exit 1\n\t[[ -e ${ssr_folder} ]] && echo -e \"${Error} ShadowsocksR 文件夹已存在，请检查( 如安装失败或者存在旧版本，请先卸载 ) !\" && exit 1\n\techo -e \"${Info} 开始设置 ShadowsocksR账号配置...\"\n\tSet_config_all\n\techo -e \"${Info} 开始安装/配置 ShadowsocksR依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始下载/安装 ShadowsocksR文件...\"\n\tDownload_SSR\n\techo -e \"${Info} 开始下载/安装 ShadowsocksR服务脚本(init)...\"\n\tService_SSR\n\techo -e \"${Info} 开始下载/安装 JSNO解析器 JQ...\"\n\tJQ_install\n\techo -e \"${Info} 开始写入 ShadowsocksR配置文件...\"\n\tWrite_configuration\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动 ShadowsocksR服务端...\"\n\tStart_SSR\n}\nUpdate_SSR(){\n\tSSR_installation_status\n\techo -e \"因破娃暂停更新ShadowsocksR服务端，所以此功能临时禁用。\"\n\t#cd ${ssr_folder}\n\t#git pull\n\t#Restart_SSR\n}\nUninstall_SSR(){\n\t[[ ! -e ${config_user_file} ]] && [[ ! -e ${ssr_folder} ]] && echo -e \"${Error} 没有安装 ShadowsocksR，请检查 !\" && exit 1\n\techo \"确定要 卸载ShadowsocksR？[y/N]\" && echo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z \"${PID}\" ]] && kill -9 ${PID}\n\t\tif [[ -z \"${now_mode}\" ]]; then\n\t\t\tport=`${jq_file} '.server_port' ${config_user_file}`\n\t\t\tDel_iptables\n\t\t\tSave_iptables\n\t\telse\n\t\t\tuser_total=`${jq_file} '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | wc -l`\n\t\t\tfor((integer = 1; integer <= ${user_total}; integer++))\n\t\t\tdo\n\t\t\t\tport=`${jq_file} '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $1}' | sed -n \"${integer}p\" | sed -r 's/.*\\\"(.+)\\\".*/\\1/'`\n\t\t\t\tDel_iptables\n\t\t\tdone\n\t\t\tSave_iptables\n\t\tfi\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del ssr\n\t\telse\n\t\t\tupdate-rc.d -f ssr remove\n\t\tfi\n\t\trm -rf ${ssr_folder} && rm -rf ${config_folder} && rm -rf /etc/init.d/ssr\n\t\techo && echo \" ShadowsocksR 卸载完成 !\" && echo\n\telse\n\t\techo && echo \" 卸载已取消...\" && echo\n\tfi\n}\nCheck_Libsodium_ver(){\n\techo -e \"${Info} 开始获取 libsodium 最新版本...\"\n\tLibsodiumr_ver=$(wget -qO- \"https://github.com/jedisct1/libsodium/tags\"|grep \"/jedisct1/libsodium/releases/tag/\"|head -1|sed -r 's/.*tag\\/(.+)\\\">.*/\\1/')\n\t[[ -z ${Libsodiumr_ver} ]] && Libsodiumr_ver=${Libsodiumr_ver_backup}\n\techo -e \"${Info} libsodium 最新版本为 ${Green_font_prefix}${Libsodiumr_ver}${Font_color_suffix} !\"\n}\nInstall_Libsodium(){\n\tif [[ -e ${Libsodiumr_file} ]]; then\n\t\techo -e \"${Error} libsodium 已安装 , 是否覆盖安装(更新)？[y/N]\"\n\t\tread -e -p \"(默认: n):\" yn\n\t\t[[ -z ${yn} ]] && yn=\"n\"\n\t\tif [[ ${yn} == [Nn] ]]; then\n\t\t\techo \"已取消...\" && exit 1\n\t\tfi\n\telse\n\t\techo -e \"${Info} libsodium 未安装，开始安装...\"\n\tfi\n\tCheck_Libsodium_ver\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tyum update\n\t\techo -e \"${Info} 安装依赖...\"\n\t\tyum -y groupinstall \"Development Tools\"\n\t\techo -e \"${Info} 下载...\"\n\t\twget  --no-check-certificate -N \"https://github.com/jedisct1/libsodium/releases/download/${Libsodiumr_ver}-RELEASE/libsodium-${Libsodiumr_ver}.tar.gz\"\n\t\techo -e \"${Info} 解压...\"\n\t\ttar -xzf libsodium-${Libsodiumr_ver}.tar.gz && cd libsodium-${Libsodiumr_ver}\n\t\techo -e \"${Info} 编译安装...\"\n\t\t./configure --disable-maintainer-mode && make -j2 && make install\n\t\techo /usr/local/lib > /etc/ld.so.conf.d/usr_local_lib.conf\n\telse\n\t\tapt-get update\n\t\techo -e \"${Info} 安装依赖...\"\n\t\tapt-get install -y build-essential\n\t\techo -e \"${Info} 下载...\"\n\t\twget  --no-check-certificate -N \"https://github.com/jedisct1/libsodium/releases/download/${Libsodiumr_ver}-RELEASE/libsodium-${Libsodiumr_ver}.tar.gz\"\n\t\techo -e \"${Info} 解压...\"\n\t\ttar -xzf libsodium-${Libsodiumr_ver}.tar.gz && cd libsodium-${Libsodiumr_ver}\n\t\techo -e \"${Info} 编译安装...\"\n\t\t./configure --disable-maintainer-mode && make -j2 && make install\n\tfi\n\tldconfig\n\tcd .. && rm -rf libsodium-${Libsodiumr_ver}.tar.gz && rm -rf libsodium-${Libsodiumr_ver}\n\t[[ ! -e ${Libsodiumr_file} ]] && echo -e \"${Error} libsodium 安装失败 !\" && exit 1\n\techo && echo -e \"${Info} libsodium 安装成功 !\" && echo\n}\n# 显示 连接信息\ndebian_View_user_connection_info(){\n\tformat_1=$1\n\tif [[ -z \"${now_mode}\" ]]; then\n\t\tnow_mode=\"单端口\" && user_total=\"1\"\n\t\tIP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\" |wc -l`\n\t\tuser_port=`${jq_file} '.server_port' ${config_user_file}`\n\t\tuser_IP_1=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep \":${user_port} \" |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\" `\n\t\tif [[ -z ${user_IP_1} ]]; then\n\t\t\tuser_IP_total=\"0\"\n\t\telse\n\t\t\tuser_IP_total=`echo -e \"${user_IP_1}\"|wc -l`\n\t\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\t\tget_IP_address\n\t\t\telse\n\t\t\t\tuser_IP=`echo -e \"\\n${user_IP_1}\"`\n\t\t\tfi\n\t\tfi\n\t\tuser_list_all=\"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\tuser_IP=\"\"\n\t\techo -e \"当前模式: ${Green_background_prefix} \"${now_mode}\" ${Font_color_suffix} 链接IP总数: ${Green_background_prefix} \"${IP_total}\" ${Font_color_suffix}\"\n\t\techo -e \"${user_list_all}\"\n\telse\n\t\tnow_mode=\"多端口\" && user_total=`${jq_file} '.port_password' ${config_user_file} |sed '$d;1d' | wc -l`\n\t\tIP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\" |wc -l`\n\t\tuser_list_all=\"\"\n\t\tfor((integer = ${user_total}; integer >= 1; integer--))\n\t\tdo\n\t\t\tuser_port=`${jq_file} '.port_password' ${config_user_file} |sed '$d;1d' |awk -F \":\" '{print $1}' |sed -n \"${integer}p\" |sed -r 's/.*\\\"(.+)\\\".*/\\1/'`\n\t\t\tuser_IP_1=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep \"${user_port}\" |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\"`\n\t\t\tif [[ -z ${user_IP_1} ]]; then\n\t\t\t\tuser_IP_total=\"0\"\n\t\t\telse\n\t\t\t\tuser_IP_total=`echo -e \"${user_IP_1}\"|wc -l`\n\t\t\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\t\t\tget_IP_address\n\t\t\t\telse\n\t\t\t\t\tuser_IP=`echo -e \"\\n${user_IP_1}\"`\n\t\t\t\tfi\n\t\t\tfi\n\t\t\tuser_list_all=${user_list_all}\"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\t\tuser_IP=\"\"\n\t\tdone\n\t\techo -e \"当前模式: ${Green_background_prefix} \"${now_mode}\" ${Font_color_suffix} 用户总数: ${Green_background_prefix} \"${user_total}\" ${Font_color_suffix} 链接IP总数: ${Green_background_prefix} \"${IP_total}\" ${Font_color_suffix} \"\n\t\techo -e \"${user_list_all}\"\n\tfi\n}\ncentos_View_user_connection_info(){\n\tformat_1=$1\n\tif [[ -z \"${now_mode}\" ]]; then\n\t\tnow_mode=\"单端口\" && user_total=\"1\"\n\t\tIP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' |grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\" |wc -l`\n\t\tuser_port=`${jq_file} '.server_port' ${config_user_file}`\n\t\tuser_IP_1=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' |grep \":${user_port} \" | grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\"`\n\t\tif [[ -z ${user_IP_1} ]]; then\n\t\t\tuser_IP_total=\"0\"\n\t\telse\n\t\t\tuser_IP_total=`echo -e \"${user_IP_1}\"|wc -l`\n\t\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\t\tget_IP_address\n\t\t\telse\n\t\t\t\tuser_IP=`echo -e \"\\n${user_IP_1}\"`\n\t\t\tfi\n\t\tfi\n\t\tuser_list_all=\"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\tuser_IP=\"\"\n\t\techo -e \"当前模式: ${Green_background_prefix} \"${now_mode}\" ${Font_color_suffix} 链接IP总数: ${Green_background_prefix} \"${IP_total}\" ${Font_color_suffix}\"\n\t\techo -e \"${user_list_all}\"\n\telse\n\t\tnow_mode=\"多端口\" && user_total=`${jq_file} '.port_password' ${config_user_file} |sed '$d;1d' | wc -l`\n\t\tIP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' | grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\" |wc -l`\n\t\tuser_list_all=\"\"\n\t\tfor((integer = 1; integer <= ${user_total}; integer++))\n\t\tdo\n\t\t\tuser_port=`${jq_file} '.port_password' ${config_user_file} |sed '$d;1d' |awk -F \":\" '{print $1}' |sed -n \"${integer}p\" |sed -r 's/.*\\\"(.+)\\\".*/\\1/'`\n\t\t\tuser_IP_1=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' |grep \"${user_port}\"|grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\" `\n\t\t\tif [[ -z ${user_IP_1} ]]; then\n\t\t\t\tuser_IP_total=\"0\"\n\t\t\telse\n\t\t\t\tuser_IP_total=`echo -e \"${user_IP_1}\"|wc -l`\n\t\t\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\t\t\tget_IP_address\n\t\t\t\telse\n\t\t\t\t\tuser_IP=`echo -e \"\\n${user_IP_1}\"`\n\t\t\t\tfi\n\t\t\tfi\n\t\t\tuser_list_all=${user_list_all}\"端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\t\tuser_IP=\"\"\n\t\tdone\n\t\techo -e \"当前模式: ${Green_background_prefix} \"${now_mode}\" ${Font_color_suffix} 用户总数: ${Green_background_prefix} \"${user_total}\" ${Font_color_suffix} 链接IP总数: ${Green_background_prefix} \"${IP_total}\" ${Font_color_suffix} \"\n\t\techo -e \"${user_list_all}\"\n\tfi\n}\nView_user_connection_info(){\n\tSSR_installation_status\n\techo && echo -e \"请选择要显示的格式：\n ${Green_font_prefix}1.${Font_color_suffix} 显示 IP 格式\n ${Green_font_prefix}2.${Font_color_suffix} 显示 IP+IP归属地 格式\" && echo\n\tread -e -p \"(默认: 1):\" ssr_connection_info\n\t[[ -z \"${ssr_connection_info}\" ]] && ssr_connection_info=\"1\"\n\tif [[ ${ssr_connection_info} == \"1\" ]]; then\n\t\tView_user_connection_info_1 \"\"\n\telif [[ ${ssr_connection_info} == \"2\" ]]; then\n\t\techo -e \"${Tip} 检测IP归属地(ipip.net)，如果IP较多，可能时间会比较长...\"\n\t\tView_user_connection_info_1 \"IP_address\"\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-2)\" && exit 1\n\tfi\n}\nView_user_connection_info_1(){\n\tformat=$1\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\t\tif [[ $? = 0 ]]; then\n\t\t\tdebian_View_user_connection_info \"$format\"\n\t\telse\n\t\t\tcentos_View_user_connection_info \"$format\"\n\t\tfi\n\telse\n\t\tdebian_View_user_connection_info \"$format\"\n\tfi\n}\nget_IP_address(){\n\t#echo \"user_IP_1=${user_IP_1}\"\n\tif [[ ! -z ${user_IP_1} ]]; then\n\t#echo \"user_IP_total=${user_IP_total}\"\n\t\tfor((integer_1 = ${user_IP_total}; integer_1 >= 1; integer_1--))\n\t\tdo\n\t\t\tIP=`echo \"${user_IP_1}\" |sed -n \"$integer_1\"p`\n\t\t\t#echo \"IP=${IP}\"\n\t\t\tIP_address=`wget -qO- -t1 -T2 http://freeapi.ipip.net/${IP}|sed 's/\\\"//g;s/,//g;s/\\[//g;s/\\]//g'`\n\t\t\t#echo \"IP_address=${IP_address}\"\n\t\t\tuser_IP=\"${user_IP}\\n${IP}(${IP_address})\"\n\t\t\t#echo \"user_IP=${user_IP}\"\n\t\t\tsleep 1s\n\t\tdone\n\tfi\n}\n# 修改 用户配置\nModify_Config(){\n\tSSR_installation_status\n\tif [[ -z \"${now_mode}\" ]]; then\n\t\techo && echo -e \"当前模式: 单端口，你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix} 修改 用户端口\n ${Green_font_prefix}2.${Font_color_suffix} 修改 用户密码\n ${Green_font_prefix}3.${Font_color_suffix} 修改 加密方式\n ${Green_font_prefix}4.${Font_color_suffix} 修改 协议插件\n ${Green_font_prefix}5.${Font_color_suffix} 修改 混淆插件\n ${Green_font_prefix}6.${Font_color_suffix} 修改 设备数限制\n ${Green_font_prefix}7.${Font_color_suffix} 修改 单线程限速\n ${Green_font_prefix}8.${Font_color_suffix} 修改 端口总限速\n ${Green_font_prefix}9.${Font_color_suffix} 修改 全部配置\" && echo\n\t\tread -e -p \"(默认: 取消):\" ssr_modify\n\t\t[[ -z \"${ssr_modify}\" ]] && echo \"已取消...\" && exit 1\n\t\tGet_User\n\t\tif [[ ${ssr_modify} == \"1\" ]]; then\n\t\t\tSet_config_port\n\t\t\tModify_config_port\n\t\t\tAdd_iptables\n\t\t\tDel_iptables\n\t\t\tSave_iptables\n\t\telif [[ ${ssr_modify} == \"2\" ]]; then\n\t\t\tSet_config_password\n\t\t\tModify_config_password\n\t\telif [[ ${ssr_modify} == \"3\" ]]; then\n\t\t\tSet_config_method\n\t\t\tModify_config_method\n\t\telif [[ ${ssr_modify} == \"4\" ]]; then\n\t\t\tSet_config_protocol\n\t\t\tModify_config_protocol\n\t\telif [[ ${ssr_modify} == \"5\" ]]; then\n\t\t\tSet_config_obfs\n\t\t\tModify_config_obfs\n\t\telif [[ ${ssr_modify} == \"6\" ]]; then\n\t\t\tSet_config_protocol_param\n\t\t\tModify_config_protocol_param\n\t\telif [[ ${ssr_modify} == \"7\" ]]; then\n\t\t\tSet_config_speed_limit_per_con\n\t\t\tModify_config_speed_limit_per_con\n\t\telif [[ ${ssr_modify} == \"8\" ]]; then\n\t\t\tSet_config_speed_limit_per_user\n\t\t\tModify_config_speed_limit_per_user\n\t\telif [[ ${ssr_modify} == \"9\" ]]; then\n\t\t\tSet_config_all\n\t\t\tModify_config_all\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字(1-9)\" && exit 1\n\t\tfi\n\telse\n\t\techo && echo -e \"当前模式: 多端口，你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix}  添加 用户配置\n ${Green_font_prefix}2.${Font_color_suffix}  删除 用户配置\n ${Green_font_prefix}3.${Font_color_suffix}  修改 用户配置\n——————————\n ${Green_font_prefix}4.${Font_color_suffix}  修改 加密方式\n ${Green_font_prefix}5.${Font_color_suffix}  修改 协议插件\n ${Green_font_prefix}6.${Font_color_suffix}  修改 混淆插件\n ${Green_font_prefix}7.${Font_color_suffix}  修改 设备数限制\n ${Green_font_prefix}8.${Font_color_suffix}  修改 单线程限速\n ${Green_font_prefix}9.${Font_color_suffix}  修改 端口总限速\n ${Green_font_prefix}10.${Font_color_suffix} 修改 全部配置\" && echo\n\t\tread -e -p \"(默认: 取消):\" ssr_modify\n\t\t[[ -z \"${ssr_modify}\" ]] && echo \"已取消...\" && exit 1\n\t\tGet_User\n\t\tif [[ ${ssr_modify} == \"1\" ]]; then\n\t\t\tAdd_multi_port_user\n\t\telif [[ ${ssr_modify} == \"2\" ]]; then\n\t\t\tDel_multi_port_user\n\t\telif [[ ${ssr_modify} == \"3\" ]]; then\n\t\t\tModify_multi_port_user\n\t\telif [[ ${ssr_modify} == \"4\" ]]; then\n\t\t\tSet_config_method\n\t\t\tModify_config_method\n\t\telif [[ ${ssr_modify} == \"5\" ]]; then\n\t\t\tSet_config_protocol\n\t\t\tModify_config_protocol\n\t\telif [[ ${ssr_modify} == \"6\" ]]; then\n\t\t\tSet_config_obfs\n\t\t\tModify_config_obfs\n\t\telif [[ ${ssr_modify} == \"7\" ]]; then\n\t\t\tSet_config_protocol_param\n\t\t\tModify_config_protocol_param\n\t\telif [[ ${ssr_modify} == \"8\" ]]; then\n\t\t\tSet_config_speed_limit_per_con\n\t\t\tModify_config_speed_limit_per_con\n\t\telif [[ ${ssr_modify} == \"9\" ]]; then\n\t\t\tSet_config_speed_limit_per_user\n\t\t\tModify_config_speed_limit_per_user\n\t\telif [[ ${ssr_modify} == \"10\" ]]; then\n\t\t\tSet_config_method\n\t\t\tSet_config_protocol\n\t\t\tSet_config_obfs\n\t\t\tSet_config_protocol_param\n\t\t\tSet_config_speed_limit_per_con\n\t\t\tSet_config_speed_limit_per_user\n\t\t\tModify_config_method\n\t\t\tModify_config_protocol\n\t\t\tModify_config_obfs\n\t\t\tModify_config_protocol_param\n\t\t\tModify_config_speed_limit_per_con\n\t\t\tModify_config_speed_limit_per_user\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字(1-9)\" && exit 1\n\t\tfi\n\tfi\n\tRestart_SSR\n}\n# 显示 多端口用户配置\nList_multi_port_user(){\n\tuser_total=`${jq_file} '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | wc -l`\n\t[[ ${user_total} = \"0\" ]] && echo -e \"${Error} 没有发现 多端口用户，请检查 !\" && exit 1\n\tuser_list_all=\"\"\n\tfor((integer = ${user_total}; integer >= 1; integer--))\n\tdo\n\t\tuser_port=`${jq_file} '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $1}' | sed -n \"${integer}p\" | sed -r 's/.*\\\"(.+)\\\".*/\\1/'`\n\t\tuser_password=`${jq_file} '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $2}' | sed -n \"${integer}p\" | sed -r 's/.*\\\"(.+)\\\".*/\\1/'`\n\t\tuser_list_all=${user_list_all}\"端口: \"${user_port}\" 密码: \"${user_password}\"\\n\"\n\tdone\n\techo && echo -e \"用户总数 ${Green_font_prefix}\"${user_total}\"${Font_color_suffix}\"\n\techo -e ${user_list_all}\n}\n# 添加 多端口用户配置\nAdd_multi_port_user(){\n\tSet_config_port\n\tSet_config_password\n\tsed -i \"8 i \\\"        \\\"${ssr_port}\\\":\\\"${ssr_password}\\\",\" ${config_user_file}\n\tsed -i \"8s/^\\\"//\" ${config_user_file}\n\tAdd_iptables\n\tSave_iptables\n\techo -e \"${Info} 多端口用户添加完成 ${Green_font_prefix}[端口: ${ssr_port} , 密码: ${ssr_password}]${Font_color_suffix} \"\n}\n# 修改 多端口用户配置\nModify_multi_port_user(){\n\tList_multi_port_user\n\techo && echo -e \"请输入要修改的用户端口\"\n\tread -e -p \"(默认: 取消):\" modify_user_port\n\t[[ -z \"${modify_user_port}\" ]] && echo -e \"已取消...\" && exit 1\n\tdel_user=`cat ${config_user_file}|grep '\"'\"${modify_user_port}\"'\"'`\n\tif [[ ! -z \"${del_user}\" ]]; then\n\t\tport=\"${modify_user_port}\"\n\t\tpassword=`echo -e ${del_user}|awk -F \":\" '{print $NF}'|sed -r 's/.*\\\"(.+)\\\".*/\\1/'`\n\t\tSet_config_port\n\t\tSet_config_password\n\t\tsed -i 's/\"'$(echo ${port})'\":\"'$(echo ${password})'\"/\"'$(echo ${ssr_port})'\":\"'$(echo ${ssr_password})'\"/g' ${config_user_file}\n\t\tDel_iptables\n\t\tAdd_iptables\n\t\tSave_iptables\n\t\techo -e \"${Inof} 多端口用户修改完成 ${Green_font_prefix}[旧: ${modify_user_port}  ${password} , 新: ${ssr_port}  ${ssr_password}]${Font_color_suffix} \"\n\telse\n\t\techo -e \"${Error} 请输入正确的端口 !\" && exit 1\n\tfi\n}\n# 删除 多端口用户配置\nDel_multi_port_user(){\n\tList_multi_port_user\n\tuser_total=`${jq_file} '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | wc -l`\n\t[[ \"${user_total}\" = \"1\" ]] && echo -e \"${Error} 多端口用户仅剩 1个，不能删除 !\" && exit 1\n\techo -e \"请输入要删除的用户端口\"\n\tread -e -p \"(默认: 取消):\" del_user_port\n\t[[ -z \"${del_user_port}\" ]] && echo -e \"已取消...\" && exit 1\n\tdel_user=`cat ${config_user_file}|grep '\"'\"${del_user_port}\"'\"'`\n\tif [[ ! -z ${del_user} ]]; then\n\t\tport=${del_user_port}\n\t\tDel_iptables\n\t\tSave_iptables\n\t\tdel_user_determine=`echo ${del_user:((${#del_user} - 1))}`\n\t\tif [[ ${del_user_determine} != \",\" ]]; then\n\t\t\tdel_user_num=$(sed -n -e \"/${port}/=\" ${config_user_file})\n\t\t\techo $((${ssr_protocol_param}+0)) &>/dev/null\n\t\t\tdel_user_num=$(echo $((${del_user_num}-1)))\n\t\t\tsed -i \"${del_user_num}s/,//g\" ${config_user_file}\n\t\tfi\n\t\tsed -i \"/${port}/d\" ${config_user_file}\n\t\techo -e \"${Info} 多端口用户删除完成 ${Green_font_prefix} ${del_user_port} ${Font_color_suffix} \"\n\telse\n\t\techo \"${Error} 请输入正确的端口 !\" && exit 1\n\tfi\n}\n# 手动修改 用户配置\nManually_Modify_Config(){\n\tSSR_installation_status\n\tport=`${jq_file} '.server_port' ${config_user_file}`\n\tvi ${config_user_file}\n\tif [[ -z \"${now_mode}\" ]]; then\n\t\tssr_port=`${jq_file} '.server_port' ${config_user_file}`\n\t\tDel_iptables\n\t\tAdd_iptables\n\tfi\n\tRestart_SSR\n}\n# 切换端口模式\nPort_mode_switching(){\n\tSSR_installation_status\n\tif [[ -z \"${now_mode}\" ]]; then\n\t\techo && echo -e \"\t当前模式: ${Green_font_prefix}单端口${Font_color_suffix}\" && echo\n\t\techo -e \"确定要切换为 多端口模式？[y/N]\"\n\t\tread -e -p \"(默认: n):\" mode_yn\n\t\t[[ -z ${mode_yn} ]] && mode_yn=\"n\"\n\t\tif [[ ${mode_yn} == [Yy] ]]; then\n\t\t\tport=`${jq_file} '.server_port' ${config_user_file}`\n\t\t\tSet_config_all\n\t\t\tWrite_configuration_many\n\t\t\tDel_iptables\n\t\t\tAdd_iptables\n\t\t\tSave_iptables\n\t\t\tRestart_SSR\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"\t当前模式: ${Green_font_prefix}多端口${Font_color_suffix}\" && echo\n\t\techo -e \"确定要切换为 单端口模式？[y/N]\"\n\t\tread -e -p \"(默认: n):\" mode_yn\n\t\t[[ -z ${mode_yn} ]] && mode_yn=\"n\"\n\t\tif [[ ${mode_yn} == [Yy] ]]; then\n\t\t\tuser_total=`${jq_file} '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | wc -l`\n\t\t\tfor((integer = 1; integer <= ${user_total}; integer++))\n\t\t\tdo\n\t\t\t\tport=`${jq_file} '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $1}' | sed -n \"${integer}p\" | sed -r 's/.*\\\"(.+)\\\".*/\\1/'`\n\t\t\t\tDel_iptables\n\t\t\tdone\n\t\t\tSet_config_all\n\t\t\tWrite_configuration\n\t\t\tAdd_iptables\n\t\t\tRestart_SSR\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\nStart_SSR(){\n\tSSR_installation_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} ShadowsocksR 正在运行 !\" && exit 1\n\t/etc/init.d/ssr start\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View_User\n}\nStop_SSR(){\n\tSSR_installation_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} ShadowsocksR 未运行 !\" && exit 1\n\t/etc/init.d/ssr stop\n}\nRestart_SSR(){\n\tSSR_installation_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/ssr stop\n\t/etc/init.d/ssr start\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && View_User\n}\nView_Log(){\n\tSSR_installation_status\n\t[[ ! -e ${ssr_log_file} ]] && echo -e \"${Error} ShadowsocksR日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${ssr_log_file}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${ssr_log_file}\n}\n# 锐速\nConfigure_Server_Speeder(){\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix} 安装 锐速\n ${Green_font_prefix}2.${Font_color_suffix} 卸载 锐速\n————————\n ${Green_font_prefix}3.${Font_color_suffix} 启动 锐速\n ${Green_font_prefix}4.${Font_color_suffix} 停止 锐速\n ${Green_font_prefix}5.${Font_color_suffix} 重启 锐速\n ${Green_font_prefix}6.${Font_color_suffix} 查看 锐速 状态\n \n 注意： 锐速和LotServer不能同时安装/启动！\" && echo\n\tread -e -p \"(默认: 取消):\" server_speeder_num\n\t[[ -z \"${server_speeder_num}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${server_speeder_num} == \"1\" ]]; then\n\t\tInstall_ServerSpeeder\n\telif [[ ${server_speeder_num} == \"2\" ]]; then\n\t\tServer_Speeder_installation_status\n\t\tUninstall_ServerSpeeder\n\telif [[ ${server_speeder_num} == \"3\" ]]; then\n\t\tServer_Speeder_installation_status\n\t\t${Server_Speeder_file} start\n\t\t${Server_Speeder_file} status\n\telif [[ ${server_speeder_num} == \"4\" ]]; then\n\t\tServer_Speeder_installation_status\n\t\t${Server_Speeder_file} stop\n\telif [[ ${server_speeder_num} == \"5\" ]]; then\n\t\tServer_Speeder_installation_status\n\t\t${Server_Speeder_file} restart\n\t\t${Server_Speeder_file} status\n\telif [[ ${server_speeder_num} == \"6\" ]]; then\n\t\tServer_Speeder_installation_status\n\t\t${Server_Speeder_file} status\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-6)\" && exit 1\n\tfi\n}\nInstall_ServerSpeeder(){\n\t[[ -e ${Server_Speeder_file} ]] && echo -e \"${Error} 锐速(Server Speeder) 已安装 !\" && exit 1\n\tcd /root\n\t#借用91yun.rog的开心版锐速\n\twget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder.sh\n\t[[ ! -e \"serverspeeder.sh\" ]] && echo -e \"${Error} 锐速安装脚本下载失败 !\" && exit 1\n\tbash serverspeeder.sh\n\tsleep 2s\n\tPID=`ps -ef |grep -v grep |grep \"serverspeeder\" |awk '{print $2}'`\n\tif [[ ! -z ${PID} ]]; then\n\t\trm -rf /root/serverspeeder.sh\n\t\trm -rf /root/91yunserverspeeder\n\t\trm -rf /root/91yunserverspeeder.tar.gz\n\t\techo -e \"${Info} 锐速(Server Speeder) 安装完成 !\" && exit 1\n\telse\n\t\techo -e \"${Error} 锐速(Server Speeder) 安装失败 !\" && exit 1\n\tfi\n}\nUninstall_ServerSpeeder(){\n\techo \"确定要卸载 锐速(Server Speeder)？[y/N]\" && echo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && echo && echo \"已取消...\" && exit 1\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tchattr -i /serverspeeder/etc/apx*\n\t\t/serverspeeder/bin/serverSpeeder.sh uninstall -f\n\t\techo && echo \"锐速(Server Speeder) 卸载完成 !\" && echo\n\tfi\n}\n# LotServer\nConfigure_LotServer(){\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix} 安装 LotServer\n ${Green_font_prefix}2.${Font_color_suffix} 卸载 LotServer\n————————\n ${Green_font_prefix}3.${Font_color_suffix} 启动 LotServer\n ${Green_font_prefix}4.${Font_color_suffix} 停止 LotServer\n ${Green_font_prefix}5.${Font_color_suffix} 重启 LotServer\n ${Green_font_prefix}6.${Font_color_suffix} 查看 LotServer 状态\n \n 注意： 锐速和LotServer不能同时安装/启动！\" && echo\n\tread -e -p \"(默认: 取消):\" lotserver_num\n\t[[ -z \"${lotserver_num}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${lotserver_num} == \"1\" ]]; then\n\t\tInstall_LotServer\n\telif [[ ${lotserver_num} == \"2\" ]]; then\n\t\tLotServer_installation_status\n\t\tUninstall_LotServer\n\telif [[ ${lotserver_num} == \"3\" ]]; then\n\t\tLotServer_installation_status\n\t\t${LotServer_file} start\n\t\t${LotServer_file} status\n\telif [[ ${lotserver_num} == \"4\" ]]; then\n\t\tLotServer_installation_status\n\t\t${LotServer_file} stop\n\telif [[ ${lotserver_num} == \"5\" ]]; then\n\t\tLotServer_installation_status\n\t\t${LotServer_file} restart\n\t\t${LotServer_file} status\n\telif [[ ${lotserver_num} == \"6\" ]]; then\n\t\tLotServer_installation_status\n\t\t${LotServer_file} status\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-6)\" && exit 1\n\tfi\n}\nInstall_LotServer(){\n\t[[ -e ${LotServer_file} ]] && echo -e \"${Error} LotServer 已安装 !\" && exit 1\n\t#Github: https://github.com/0oVicero0/serverSpeeder_Install\n\twget --no-check-certificate -qO /tmp/appex.sh \"https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh\"\n\t[[ ! -e \"/tmp/appex.sh\" ]] && echo -e \"${Error} LotServer 安装脚本下载失败 !\" && exit 1\n\tbash /tmp/appex.sh 'install'\n\tsleep 2s\n\tPID=`ps -ef |grep -v grep |grep \"appex\" |awk '{print $2}'`\n\tif [[ ! -z ${PID} ]]; then\n\t\techo -e \"${Info} LotServer 安装完成 !\" && exit 1\n\telse\n\t\techo -e \"${Error} LotServer 安装失败 !\" && exit 1\n\tfi\n}\nUninstall_LotServer(){\n\techo \"确定要卸载 LotServer？[y/N]\" && echo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && echo && echo \"已取消...\" && exit 1\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\twget --no-check-certificate -qO /tmp/appex.sh \"https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh\" && bash /tmp/appex.sh 'uninstall'\n\t\techo && echo \"LotServer 卸载完成 !\" && echo\n\tfi\n}\n# BBR\nConfigure_BBR(){\n\techo && echo -e \"  你要做什么？\n\t\n ${Green_font_prefix}1.${Font_color_suffix} 安装 BBR\n————————\n ${Green_font_prefix}2.${Font_color_suffix} 启动 BBR\n ${Green_font_prefix}3.${Font_color_suffix} 停止 BBR\n ${Green_font_prefix}4.${Font_color_suffix} 查看 BBR 状态\" && echo\necho -e \"${Green_font_prefix} [安装前 请注意] ${Font_color_suffix}\n1. 安装开启BBR，需要更换内核，存在更换失败等风险(重启后无法开机)\n2. 本脚本仅支持 Debian / Ubuntu 系统更换内核，OpenVZ和Docker 不支持更换内核\n3. Debian 更换内核过程中会提示 [ 是否终止卸载内核 ] ，请选择 ${Green_font_prefix} NO ${Font_color_suffix}\" && echo\n\tread -e -p \"(默认: 取消):\" bbr_num\n\t[[ -z \"${bbr_num}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${bbr_num} == \"1\" ]]; then\n\t\tInstall_BBR\n\telif [[ ${bbr_num} == \"2\" ]]; then\n\t\tStart_BBR\n\telif [[ ${bbr_num} == \"3\" ]]; then\n\t\tStop_BBR\n\telif [[ ${bbr_num} == \"4\" ]]; then\n\t\tStatus_BBR\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-4)\" && exit 1\n\tfi\n}\nInstall_BBR(){\n\t[[ ${release} = \"centos\" ]] && echo -e \"${Error} 本脚本不支持 CentOS系统安装 BBR !\" && exit 1\n\tBBR_installation_status\n\tbash \"${BBR_file}\"\n}\nStart_BBR(){\n\tBBR_installation_status\n\tbash \"${BBR_file}\" start\n}\nStop_BBR(){\n\tBBR_installation_status\n\tbash \"${BBR_file}\" stop\n}\nStatus_BBR(){\n\tBBR_installation_status\n\tbash \"${BBR_file}\" status\n}\n# 其他功能\nOther_functions(){\n\techo && echo -e \"  你要做什么？\n\t\n  ${Green_font_prefix}1.${Font_color_suffix} 配置 BBR\n  ${Green_font_prefix}2.${Font_color_suffix} 配置 锐速(ServerSpeeder)\n  ${Green_font_prefix}3.${Font_color_suffix} 配置 LotServer(锐速母公司)\n  注意： 锐速/LotServer/BBR 不支持 OpenVZ！\n  注意： 锐速/LotServer/BBR 不能共存！\n————————————\n  ${Green_font_prefix}4.${Font_color_suffix} 一键封禁 BT/PT/SPAM (iptables)\n  ${Green_font_prefix}5.${Font_color_suffix} 一键解封 BT/PT/SPAM (iptables)\n  ${Green_font_prefix}6.${Font_color_suffix} 切换 ShadowsocksR日志输出模式\n  ——说明：SSR默认只输出错误日志，此项可切换为输出详细的访问日志\" && echo\n\tread -e -p \"(默认: 取消):\" other_num\n\t[[ -z \"${other_num}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${other_num} == \"1\" ]]; then\n\t\tConfigure_BBR\n\telif [[ ${other_num} == \"2\" ]]; then\n\t\tConfigure_Server_Speeder\n\telif [[ ${other_num} == \"3\" ]]; then\n\t\tConfigure_LotServer\n\telif [[ ${other_num} == \"4\" ]]; then\n\t\tBanBTPTSPAM\n\telif [[ ${other_num} == \"5\" ]]; then\n\t\tUnBanBTPTSPAM\n\telif [[ ${other_num} == \"6\" ]]; then\n\t\tSet_config_connect_verbose_info\n\telse\n\t\techo -e \"${Error} 请输入正确的数字 [1-6]\" && exit 1\n\tfi\n}\n# 封禁 BT PT SPAM\nBanBTPTSPAM(){\n\twget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ban_iptables.sh && chmod +x ban_iptables.sh && bash ban_iptables.sh banall\n\trm -rf ban_iptables.sh\n}\n# 解封 BT PT SPAM\nUnBanBTPTSPAM(){\n\twget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ban_iptables.sh && chmod +x ban_iptables.sh && bash ban_iptables.sh unbanall\n\trm -rf ban_iptables.sh\n}\nSet_config_connect_verbose_info(){\n\tSSR_installation_status\n\tGet_User\n\tif [[ ${connect_verbose_info} = \"0\" ]]; then\n\t\techo && echo -e \"当前日志模式: ${Green_font_prefix}简单模式（只输出错误日志）${Font_color_suffix}\" && echo\n\t\techo -e \"确定要切换为 ${Green_font_prefix}详细模式（输出详细连接日志+错误日志）${Font_color_suffix}？[y/N]\"\n\t\tread -e -p \"(默认: n):\" connect_verbose_info_ny\n\t\t[[ -z \"${connect_verbose_info_ny}\" ]] && connect_verbose_info_ny=\"n\"\n\t\tif [[ ${connect_verbose_info_ny} == [Yy] ]]; then\n\t\t\tssr_connect_verbose_info=\"1\"\n\t\t\tModify_config_connect_verbose_info\n\t\t\tRestart_SSR\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"当前日志模式: ${Green_font_prefix}详细模式（输出详细连接日志+错误日志）${Font_color_suffix}\" && echo\n\t\techo -e \"确定要切换为 ${Green_font_prefix}简单模式（只输出错误日志）${Font_color_suffix}？[y/N]\"\n\t\tread -e -p \"(默认: n):\" connect_verbose_info_ny\n\t\t[[ -z \"${connect_verbose_info_ny}\" ]] && connect_verbose_info_ny=\"n\"\n\t\tif [[ ${connect_verbose_info_ny} == [Yy] ]]; then\n\t\t\tssr_connect_verbose_info=\"0\"\n\t\t\tModify_config_connect_verbose_info\n\t\t\tRestart_SSR\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/ssr\" ]]; then\n\t\trm -rf /etc/init.d/ssr\n\t\tService_SSR\n\tfi\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh\" && chmod +x ssr.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\n# 显示 菜单状态\nmenu_status(){\n\tif [[ -e ${config_user_file} ]]; then\n\t\tcheck_pid\n\t\tif [[ ! -z \"${PID}\" ]]; then\n\t\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\t\telse\n\t\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\t\tfi\n\t\tnow_mode=$(cat \"${config_user_file}\"|grep '\"port_password\"')\n\t\tif [[ -z \"${now_mode}\" ]]; then\n\t\t\techo -e \" 当前模式: ${Green_font_prefix}单端口${Font_color_suffix}\"\n\t\telse\n\t\t\techo -e \" 当前模式: ${Green_font_prefix}多端口${Font_color_suffix}\"\n\t\tfi\n\telse\n\t\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\n\tfi\n}\ncheck_sys\n[[ ${release} != \"debian\" ]] && [[ ${release} != \"ubuntu\" ]] && [[ ${release} != \"centos\" ]] && echo -e \"${Error} 本脚本不支持当前系统 ${release} !\" && exit 1\necho -e \"  ShadowsocksR 一键管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  ---- Toyo | doub.io/ss-jc42 ----\n\n  ${Green_font_prefix}1.${Font_color_suffix} 安装 ShadowsocksR\n  ${Green_font_prefix}2.${Font_color_suffix} 更新 ShadowsocksR\n  ${Green_font_prefix}3.${Font_color_suffix} 卸载 ShadowsocksR\n  ${Green_font_prefix}4.${Font_color_suffix} 安装 libsodium(chacha20)\n————————————\n  ${Green_font_prefix}5.${Font_color_suffix} 查看 账号信息\n  ${Green_font_prefix}6.${Font_color_suffix} 显示 连接信息\n  ${Green_font_prefix}7.${Font_color_suffix} 设置 用户配置\n  ${Green_font_prefix}8.${Font_color_suffix} 手动 修改配置\n  ${Green_font_prefix}9.${Font_color_suffix} 切换 端口模式\n————————————\n ${Green_font_prefix}10.${Font_color_suffix} 启动 ShadowsocksR\n ${Green_font_prefix}11.${Font_color_suffix} 停止 ShadowsocksR\n ${Green_font_prefix}12.${Font_color_suffix} 重启 ShadowsocksR\n ${Green_font_prefix}13.${Font_color_suffix} 查看 ShadowsocksR 日志\n————————————\n ${Green_font_prefix}14.${Font_color_suffix} 其他功能\n ${Green_font_prefix}15.${Font_color_suffix} 升级脚本\n \"\nmenu_status\necho && read -e -p \"请输入数字 [1-15]：\" num\ncase \"$num\" in\n\t1)\n\tInstall_SSR\n\t;;\n\t2)\n\tUpdate_SSR\n\t;;\n\t3)\n\tUninstall_SSR\n\t;;\n\t4)\n\tInstall_Libsodium\n\t;;\n\t5)\n\tView_User\n\t;;\n\t6)\n\tView_user_connection_info\n\t;;\n\t7)\n\tModify_Config\n\t;;\n\t8)\n\tManually_Modify_Config\n\t;;\n\t9)\n\tPort_mode_switching\n\t;;\n\t10)\n\tStart_SSR\n\t;;\n\t11)\n\tStop_SSR\n\t;;\n\t12)\n\tRestart_SSR\n\t;;\n\t13)\n\tView_Log\n\t;;\n\t14)\n\tOther_functions\n\t;;\n\t15)\n\tUpdate_Shell\n\t;;\n\t*)\n\techo -e \"${Error} 请输入正确的数字 [1-15]\"\n\t;;\nesac\n"
        },
        {
          "name": "ssr_check.sh",
          "type": "blob",
          "size": 12.533203125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS 6+/Debian 7+/Ubuntu 14.04+\n#\tDescription: ShadowsocksR Config Check\n#\tVersion: 1.0.3\n#\tAuthor: Toyo\n#=================================================\n\nTimeout=\"10\"\nTest_URL=\"https://github.com\"\nSSR_folder=\"/root/shadowsocksr/shadowsocks\"\nlog_file=\"$PWD/ssr_check.log\"\nconfig_file=\"$PWD/ssr_check.conf\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\" && Error=\"${Red_font_prefix}[错误]${Font_color_suffix}\" && Tip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\nset_config_ip(){\n\techo \"请输入 ShadowsocksR 账号服务器公网IP\"\n\tread -e -p \"(默认取消):\" ip\n\t[[ -z \"${ip}\" ]] && echo \"已取消...\" && exit 1\n\techo && echo -e \"\tI   P : ${Red_font_prefix}${ip}${Font_color_suffix}\" && echo\n}\nset_config_port(){\n\twhile true\n\tdo\n\techo -e \"请输入 ShadowsocksR 账号端口\"\n\tread -e -p \"(默认: 2333):\" port\n\t[[ -z \"$port\" ]] && port=\"2333\"\n\techo $((${port}+0)) &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${port} -ge 1 ]] && [[ ${port} -le 65535 ]]; then\n\t\t\techo && echo -e \"\t端口 : ${Red_font_prefix}${port}${Font_color_suffix}\" && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字！\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字！\"\n\tfi\n\tdone\n}\nset_config_password(){\n\techo \"请输入 ShadowsocksR 账号密码\"\n\tread -e -p \"(默认: doub.io):\" passwd\n\t[[ -z \"${passwd}\" ]] && passwd=\"doub.io\"\n\techo && echo -e \"\t密码 : ${Red_font_prefix}${passwd}${Font_color_suffix}\" && echo\n}\nset_config_method(){\n\techo -e \"请选择要设置的ShadowsocksR账号 加密方式\n ${Green_font_prefix} 1.${Font_color_suffix} none\n ${Tip} 如果使用 auth_chain_a 协议，请加密方式选择 none，混淆随意(建议 plain)\n \n ${Green_font_prefix} 2.${Font_color_suffix} rc4\n ${Green_font_prefix} 3.${Font_color_suffix} rc4-md5\n ${Green_font_prefix} 4.${Font_color_suffix} rc4-md5-6\n \n ${Green_font_prefix} 5.${Font_color_suffix} aes-128-ctr\n ${Green_font_prefix} 6.${Font_color_suffix} aes-192-ctr\n ${Green_font_prefix} 7.${Font_color_suffix} aes-256-ctr\n \n ${Green_font_prefix} 8.${Font_color_suffix} aes-128-cfb\n ${Green_font_prefix} 9.${Font_color_suffix} aes-192-cfb\n ${Green_font_prefix}10.${Font_color_suffix} aes-256-cfb\n \n ${Green_font_prefix}11.${Font_color_suffix} aes-128-cfb8\n ${Green_font_prefix}12.${Font_color_suffix} aes-192-cfb8\n ${Green_font_prefix}13.${Font_color_suffix} aes-256-cfb8\n \n ${Green_font_prefix}14.${Font_color_suffix} salsa20\n ${Green_font_prefix}15.${Font_color_suffix} chacha20\n ${Green_font_prefix}16.${Font_color_suffix} chacha20-ietf\n ${Tip} salsa20/chacha20-*系列加密方式，需要额外安装依赖 libsodium ，否则会无法启动ShadowsocksR !\" && echo\n\tread -e -p \"(默认: 5. aes-128-ctr):\" method\n\t[[ -z \"${method}\" ]] && method=\"5\"\n\tif [[ ${method} == \"1\" ]]; then\n\t\tmethod=\"none\"\n\telif [[ ${method} == \"2\" ]]; then\n\t\tmethod=\"rc4\"\n\telif [[ ${method} == \"3\" ]]; then\n\t\tmethod=\"rc4-md5\"\n\telif [[ ${method} == \"4\" ]]; then\n\t\tmethod=\"rc4-md5-6\"\n\telif [[ ${method} == \"5\" ]]; then\n\t\tmethod=\"aes-128-ctr\"\n\telif [[ ${method} == \"6\" ]]; then\n\t\tmethod=\"aes-192-ctr\"\n\telif [[ ${method} == \"7\" ]]; then\n\t\tmethod=\"aes-256-ctr\"\n\telif [[ ${method} == \"8\" ]]; then\n\t\tmethod=\"aes-128-cfb\"\n\telif [[ ${method} == \"9\" ]]; then\n\t\tmethod=\"aes-192-cfb\"\n\telif [[ ${method} == \"10\" ]]; then\n\t\tmethod=\"aes-256-cfb\"\n\telif [[ ${method} == \"11\" ]]; then\n\t\tmethod=\"aes-128-cfb8\"\n\telif [[ ${method} == \"12\" ]]; then\n\t\tmethod=\"aes-192-cfb8\"\n\telif [[ ${method} == \"13\" ]]; then\n\t\tmethod=\"aes-256-cfb8\"\n\telif [[ ${method} == \"14\" ]]; then\n\t\tmethod=\"salsa20\"\n\telif [[ ${method} == \"15\" ]]; then\n\t\tmethod=\"chacha20\"\n\telif [[ ${method} == \"16\" ]]; then\n\t\tmethod=\"chacha20-ietf\"\n\telse\n\t\tmethod=\"aes-128-ctr\"\n\tfi\n\techo && echo ${Separator_1} && echo -e \"\t加密 : ${Red_font_prefix}${method}${Font_color_suffix}\" && echo ${Separator_1} && echo\n}\nset_config_protocol(){\n\techo -e \"请选择要设置的ShadowsocksR账号 协议插件\n ${Green_font_prefix}1.${Font_color_suffix} origin\n ${Green_font_prefix}2.${Font_color_suffix} auth_sha1_v4\n ${Green_font_prefix}3.${Font_color_suffix} auth_aes128_md5\n ${Green_font_prefix}4.${Font_color_suffix} auth_aes128_sha1\n ${Green_font_prefix}5.${Font_color_suffix} auth_chain_a\n ${Tip} 如果使用 auth_chain_a 协议，请加密方式选择 none，混淆随意(建议 plain)\" && echo\n\tread -e -p \"(默认: 2. auth_sha1_v4):\" protocol\n\t[[ -z \"${protocol}\" ]] && protocol=\"2\"\n\tif [[ ${protocol} == \"1\" ]]; then\n\t\tprotocol=\"origin\"\n\telif [[ ${protocol} == \"2\" ]]; then\n\t\tprotocol=\"auth_sha1_v4\"\n\telif [[ ${protocol} == \"3\" ]]; then\n\t\tprotocol=\"auth_aes128_md5\"\n\telif [[ ${protocol} == \"4\" ]]; then\n\t\tprotocol=\"auth_aes128_sha1\"\n\telif [[ ${protocol} == \"5\" ]]; then\n\t\tprotocol=\"auth_chain_a\"\n\telse\n\t\tprotocol=\"auth_sha1_v4\"\n\tfi\n\techo && echo -e \"\t协议 : ${Red_font_prefix}${protocol}${Font_color_suffix}\" && echo\n}\nset_config_obfs(){\n\techo -e \"请选择要设置的ShadowsocksR账号 混淆插件\n ${Green_font_prefix}1.${Font_color_suffix} plain\n ${Green_font_prefix}2.${Font_color_suffix} http_simple\n ${Green_font_prefix}3.${Font_color_suffix} http_post\n ${Green_font_prefix}4.${Font_color_suffix} random_head\n ${Green_font_prefix}5.${Font_color_suffix} tls1.2_ticket_auth\n ${Tip} 如果使用 ShadowsocksR 加速游戏，请选择 混淆兼容原版或 plain 混淆，然后客户端选择 plain，否则会增加延迟 !\" && echo\n\tread -e -p \"(默认: 5. tls1.2_ticket_auth):\" obfs\n\t[[ -z \"${obfs}\" ]] && obfs=\"5\"\n\tif [[ ${obfs} == \"1\" ]]; then\n\t\tobfs=\"plain\"\n\telif [[ ${obfs} == \"2\" ]]; then\n\t\tobfs=\"http_simple\"\n\telif [[ ${obfs} == \"3\" ]]; then\n\t\tobfs=\"http_post\"\n\telif [[ ${obfs} == \"4\" ]]; then\n\t\tobfs=\"random_head\"\n\telif [[ ${obfs} == \"5\" ]]; then\n\t\tobfs=\"tls1.2_ticket_auth\"\n\telse\n\t\tobfs=\"tls1.2_ticket_auth\"\n\tfi\n\techo && echo -e \"\t混淆 : ${Red_font_prefix}${obfs}${Font_color_suffix}\" && echo\n}\nset_config_like(){\n\techo \"请输入 ShadowsocksR 的链接(SS/SSR链接皆可，如 ss://xxxx ssr://xxxx)\"\n\tread -e -p \"(默认回车取消):\" Like\n\t[[ -z \"${Like}\" ]] && echo \"已取消...\" && exit 1\n\techo && echo -e \"\t链接 : ${Red_font_prefix}${Like}${Font_color_suffix}\" && echo\n}\nset_config_user(){\n\techo -e \"请输入选择输入方式\n ${Green_font_prefix}1.${Font_color_suffix} 输入ShadowsocksR账号全部信息(Shadowsocks原版也可以)\n ${Green_font_prefix}2.${Font_color_suffix} 输入ShadowsocksR账号的 SSR链接(Shadowsocks原版也可以)\"\n\tread -e -p \"(默认:2):\" enter_type\n\t[[ -z \"${enter_type}\" ]] && enter_type=\"2\"\n\tif [[ ${enter_type} == \"1\" ]]; then\n\t\techo -e \"下面依次开始输入要检测可用性的 ShadowsocksR账号信息。\" && echo\n\t\tset_config_ip\n\t\tset_config_port\n\t\tset_config_password\n\t\tset_config_method\n\t\tset_config_protocol\n\t\tset_config_obfs\n\t\treturn 1\n\telif [[ ${enter_type} == \"2\" ]]; then\n\t\tset_config_like\n\t\treturn 2\n\telse\n\t\tset_config_like\n\t\treturn 2\n\tfi\n}\nGO(){\n\techo -e \"========== 开始记录测试信息 [$(date '+%Y-%m-%d %H:%M:%S')]==========\\n\" >> ${log_file}\n}\nexit_GG(){\n\techo -e \"========== 记录测试信息结束 [$(date '+%Y-%m-%d %H:%M:%S')]==========\\n\\n\" >> ${log_file}\n\texit 0\n}\nGet_Like(){\n\t[[ ! -e ${config_file} ]] && echo -e \"${Error} 配置文件不存在！(${config_file})\" | tee -a ${log_file} && exit_GG\n\tLike=$(cat \"${config_file}\")\n\t[[ -z ${Like} ]] && echo -e \"${Error} 获取SS/SSR账号信息失败或配置文件为空 !\" | tee -a ${log_file} && exit_GG\n\tLike_num=$(echo -e \"${Like}\"|wc -l)\n}\nAnalysis_Config(){\n\tConfig_info_base64=$(echo -e \"${Like}\"|sed -n \"$1\"p)\n\tConfig_info_base64_determine=$(echo -e ${Config_info_base64}|cut -c 1-6)\n\tif [[ \"${Config_info_base64_determine}\" == \"ssr://\" ]]; then\n\t\tConfig_info=$(echo -e \"${Config_info_base64}\"|cut -c 7-2000|base64 -d)\n\t\tif [[ -z ${Config_info} ]]; then\n\t\t\techo -e \"${Error} Base64解密失败 [${Config_info_base64}] !\" | tee -a ${log_file}\n\t\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\t\texit_GG\n\t\t\telse\n\t\t\t\tcontinue\n\t\t\tfi\n\t\tfi\n\t\tssr_config\n\telse\n\t\tConfig_info=$(echo -e \"${Config_info_base64}\"|cut -c 6-2000|base64 -d)\n\t\tif [[ -z ${Config_info} ]]; then\n\t\t\techo -e \"${Error} Base64解密失败 [${Config_info_base64}] !\" | tee -a ${log_file}\n\t\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\t\texit_GG\n\t\t\telse\n\t\t\t\tcontinue\n\t\t\tfi\n\t\tfi\n\t\tss_config\n\tfi\n}\nss_config(){\n\tzuo=$(echo -e \"${Config_info}\"|awk -F \"@\" '{print $1}')\n\tyou=$(echo -e \"${Config_info}\"|awk -F \"@\" '{print $2}')\n\tport=$(echo -e \"${you}\"|awk -F \":\" '{print $NF}')\n\tip=$(echo -e \"${you}\"|awk -F \":${port}\" '{print $1}')\n\tif [[ $(echo -e \"${ip}\"|wc -L) -le 8 ]]; then\n\t\techo -e \"${Error} 错误，IP格式错误或为 ipv6地址[ ${ip} ]\" | tee -a ${log_file}\n\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\texit_GG\n\t\telse\n\t\t\tcontinue\n\t\tfi\n\tfi\n\tmethod=$(echo -e \"${zuo}\"|awk -F \":\" '{print $1}')\n\tpasswd=$(echo -e \"${zuo}\"|awk -F \":\" '{print $2}')\n\tprotocol=\"origin\"\n\tobfs=\"plain\"\n\tif [[ -z ${ip} ]] || [[ -z ${port} ]] || [[ -z ${method} ]] || [[ -z ${passwd} ]] || [[ -z ${protocol} ]] || [[ -z ${obfs} ]]; then\n\t\techo -e \"${Error} 错误，有部分 账号参数为空！[ ${ip} ,${port} ,${method} ,${passwd} ,${protocol} ,${obfs} ]\" | tee -a ${log_file}\n\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\texit_GG\n\t\telse\n\t\t\tcontinue\n\t\tfi\n\tfi\n}\nssr_config(){\n\tzuo=$(echo -e \"${Config_info}\"|awk -F \"/?\" '{print $1}')\n\tpasswd_base64=$(echo -e \"${zuo}\"|awk -F \":\" '{print $NF}')\n\tzuo=$(echo -e \"${Config_info}\"|awk -F \":${passwd_base64}\" '{print $1}')\n\tobfs=$(echo -e \"${zuo}\"|awk -F \":\" '{print $NF}')\n\tzuo=$(echo -e \"${Config_info}\"|awk -F \":${obfs}\" '{print $1}')\n\tmethod=$(echo -e \"${zuo}\"|awk -F \":\" '{print $NF}')\n\tzuo=$(echo -e \"${Config_info}\"|awk -F \":${method}\" '{print $1}')\n\tprotocol=$(echo -e \"${zuo}\"|awk -F \":\" '{print $NF}')\n\tzuo=$(echo -e \"${Config_info}\"|awk -F \":${protocol}\" '{print $1}')\n\tport=$(echo -e \"${zuo}\"|awk -F \":\" '{print $NF}')\n\tip=$(echo -e \"${Config_info}\"|awk -F \":${port}\" '{print $1}')\n\tif [[ $(echo -e \"${ip}\"|wc -L) -le 8 ]]; then\n\t\techo -e \"${Error} 错误，IP格式错误[ ${ip} ]\" | tee -a ${log_file}\n\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\texit_GG\n\t\telse\n\t\t\tContinue_if\n\t\tfi\n\tfi\n\tpasswd=$(echo -e \"${passwd_base64}\"|base64 -d)\n\t[[ ${debug} == [Yy] ]] && echo -e \"${ip}\\n${port}\\n${method}\\n${passwd}\\n${protocol}\\n${obfs}\\n\"\n\tif [[ -z ${ip} ]] || [[ -z ${port} ]] || [[ -z ${method} ]] || [[ -z ${passwd} ]] || [[ -z ${protocol} ]] || [[ -z ${obfs} ]]; then\n\t\techo -e \"${Error} 错误，有部分 账号参数为空！[ ${ip} ,${port} ,${method} ,${passwd} ,${protocol} ,${obfs} ]\" | tee -a ${log_file}\n\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\texit_GG\n\t\telse\n\t\t\tcontinue\n\t\tfi\n\tfi\n}\nStart_Client(){\n\tnohup python \"${SSR_folder}/local.py\" -b \"127.0.0.1\" -l \"${local_port}\" -s \"${ip}\" -p \"${port}\" -k \"${passwd}\" -m \"${method}\" -O \"${protocol}\" -o \"${obfs}\" > /dev/null 2>&1 &\n\tsleep 2s\n\tPID=$(ps -ef |grep -v grep | grep \"local.py\" | grep \"${local_port}\" |awk '{print $2}')\n\tif [[ -z ${PID} ]]; then\n\t\techo -e \"${Error} ShadowsocksR客户端 启动失败，请检查 !\" | tee -a ${log_file}\n\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\texit_GG\n\t\telse\n\t\t\tcontinue\n\t\tfi\n\tfi\n}\nSocks5_test(){\n\tTest_results=$(curl --socks5 127.0.0.1:${local_port} -k -m ${Timeout} -s \"${Test_URL}\")\n\tif [[ -z ${Test_results} ]]; then\n\t\techo -e \"${Error} [${ip}] 检测失败，账号不可用 !\" | tee -a ${log_file}\n\t\tConfig_Status=\"false\"\n\telse\n\t\techo -e \"${Info} [${ip}] 检测成功，账号可用 !\" | tee -a ${log_file}\n\t\tConfig_Status=\"true\"\n\tfi\n\tkill -9 ${PID}\n\tPID=$(ps -ef |grep -v grep | grep \"local.py\" | grep \"${local_port}\" |awk '{print $2}')\n\tif [[ ! -z ${PID} ]]; then\n\t\techo -e \"${Error} ShadowsocksR客户端 停止失败，请检查 !\" | tee -a ${log_file}\n\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\texit_GG\n\t\telse\n\t\t\tcontinue\n\t\tfi\n\tfi\n\techo \"---------------------------------------------------------\"\n}\nrand(){\n\tmin=1000\n\tmax=$((2000-$min+1))\n\tnum=$(date +%s%N)\n\techo $(($num%$max+$min))\n}\nTest(){\n\tGO\n\tGet_Like\n\tcd ${SSR_folder}\n\tlocal_port=$(rand)\n\tfor((integer = 1; integer <= \"${Like_num}\"; integer++))\n\tdo\n\t\tAnalysis_Config \"${integer}\"\n\t\tStart_Client\n\t\tSocks5_test\n\tdone\n\texit_GG\n}\nTest_add(){\n\tGO\n\tcd ${SSR_folder}\n\tlocal_port=$(rand)\n\tset_config_user\n\t[[ $? == 2 ]] && analysis_type=\"add\" && Analysis_Config \"1\"\n\tStart_Client\n\tSocks5_test\n\texit_GG\n}\nView_log(){\n\t[[ ! -e ${log_file} ]] && echo -e \"${Error} 找不到 日志文件！(${log_file})\"\n\tcat \"${log_file}\"\n}\naction=$1\ndebug=$2\nif [[ ${1} == \"t\" ]]; then\n\tTest\nelif [[ ${1} == \"a\" ]]; then\n\tTest_add\nelif [[ ${1} == \"log\" ]]; then\n\tView_log\nfi"
        },
        {
          "name": "ssr_ip_check.sh",
          "type": "blob",
          "size": 6.740234375,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS 6+/Debian 7+/Ubuntu 14.04+\n#\tDescription: ShadowsocksR Port-IP Check\n#\tVersion: 1.0.6\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/ss-jc50/\n#=================================================\nIP_threshold=3\n# IP阈值\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\"\nYellow_font_prefix=\"\\033[33m\" && Purple_font_prefix=\"\\033[35m\"\nSky_blue_font_prefix=\"\\033[36m\" && Blue_font_prefix=\"\\033[34m\"\nGreen_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n# ——————————————————————————————\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\t#bit=`uname -m`\n}\ncheck_pid(){\n\tPID=`ps -ef |grep -v grep | grep server.py |awk '{print $2}'`\n\t[[ -z ${PID} ]] && echo -e \"${Error} ShadowsocksR服务端没有运行，请检查 !\" && exit 1\n}\nscan_port_centos(){\n\tport=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' | grep '::ffff:' |awk '{print $4}' |awk -F \":\" '{print $NF}' |sort -u`\n\tport_num=`echo \"${port}\" |wc -l`\n\t[[ -z ${port} ]] && echo -e \"${Error} 没有发现正在链接的端口 !\" && exit 1\n\t[[ ${port_num} = 0 ]] && echo -e \"${Error} 没有发现正在链接的端口 !\" && exit 1\n}\nscan_port_debian(){\n\tport=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |awk '{print $4}' |awk -F \":\" '{print $NF}' |sort -u`\n\tport_num=`echo \"${port}\" |wc -l`\n\t[[ -z ${port} ]] && echo -e \"${Error} 没有发现正在链接的端口 !\" && exit 1\n\t[[ ${port_num} = 0 ]] && echo -e \"${Error} 没有发现正在链接的端口 !\" && exit 1\n}\nscan_ip_centos(){\n\tip=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' | grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\"`\n\tip_num=`echo \"${ip}\" |wc -l`\n\t[[ -z ${ip} ]] && echo -e \"${Error} 没有发现正在链接的IP !\" && exit 1\n\t[[ ${ip_num} = 0 ]] && echo -e \"${Error} 没有发现正在链接的IP !\" && exit 1\n}\nscan_ip_debian(){\n\tip=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\"`\n\tip_num=`echo \"${ip}\" |wc -l`\n\t[[ -z ${ip} ]] && echo -e \"${Error} 没有发现正在链接的IP !\" && exit 1\n\t[[ ${ip_num} = 0 ]] && echo -e \"${Error} 没有发现正在链接的IP !\" && exit 1\n}\ncheck_threshold_centos(){\n\tfor((integer = ${port_num}; integer >= 1; integer--))\n\tdo\n\t\tport_check=`echo \"${port}\" |sed -n \"$integer\"p`\n\t\tip_check_1=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' |grep \"${port_check}\" | grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u`\n\t\tip_num=`echo \"${ip_check_1}\" |wc -l`\n\t\tif [[ ${action_2} == \"y\" ]]; then\n\t\t\tget_IP_address\n\t\telse\n\t\t\tip_check=`echo -e \"\\n${ip_check_1}\"`\n\t\tfi\n\t\t[[ ${ip_num} -ge ${IP_threshold} ]] && echo -e \" 端口: ${Red_font_prefix}${port_check}${Font_color_suffix} ,IP总数: ${Red_font_prefix}${ip_num}${Font_color_suffix} ,IP: ${Sky_blue_font_prefix}$(echo \"${ip_check}\")${Font_color_suffix}\"\n\t\tip_check=\"\"\n\tdone\n}\ncheck_threshold_debian(){\n\t[[ ${action_2} == \"y\" ]] && echo -e \"${Tip} 检测IP归属地(ipip.net)，如果IP较多，可能时间会比较长...\"\n\tfor((integer = ${port_num}; integer >= 1; integer--))\n\tdo\n\t\tport_check=`echo \"${port}\" |sed -n \"$integer\"p`\n\t\tip_check_1=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep \"${port_check}\" |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u`\n\t\tip_num=`echo \"${ip_check_1}\" |wc -l`\n\t\tif [[ ${action_2} == \"y\" ]]; then\n\t\t\tget_IP_address\n\t\telse\n\t\t\tip_check=`echo -e \"\\n${ip_check_1}\"`\n\t\tfi\n\t\t[[ ${ip_num} -ge ${IP_threshold} ]] && echo -e \" 端口: ${Red_font_prefix}${port_check}${Font_color_suffix} ,IP总数: ${Red_font_prefix}${ip_num}${Font_color_suffix} ,IP: ${Sky_blue_font_prefix}$(echo \"${ip_check}\")${Font_color_suffix}\"\n\t\tip_check=\"\"\n\tdone\n}\nget_IP_address(){\n\t#echo \"port_check=${port_check}\"\n\t#echo \"ip_check_1=${ip_check_1}\"\n\tif [[ ${ip_num} -ge ${IP_threshold} ]]; then\n\t\tif [[ ! -z ${ip_check_1} ]]; then\n\t\t\t#echo \"ip_num=${ip_num}\"\n\t\t\tfor((integer_1 = ${ip_num}; integer_1 >= 1; integer_1--))\n\t\t\tdo\n\t\t\t\tIP=`echo \"${ip_check_1}\" |sed -n \"$integer_1\"p`\n\t\t\t\t#echo \"IP=${IP}\"\n\t\t\t\tIP_address=`wget -qO- -t1 -T2 http://freeapi.ipip.net/${IP}|sed 's/\\\"//g;s/,//g;s/\\[//g;s/\\]//g'`\n\t\t\t\t#echo \"IP_address=${IP_address}\"\n\t\t\t\tip_check=\"${ip_check}\\n${IP}(${IP_address})\"\n\t\t\t\t#echo \"ip_check=${ip_check}\"\n\t\t\t\t# echo \"${IP}(${IP_address})\"\n\t\t\t\tsleep 1s\n\t\t\tdone\n\t\tfi\n\tfi\n}\nc_ssr(){\n\tcheck_pid\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tscan_port_centos\n\t\techo -e \"当前时间：${Yellow_font_prefix}$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")${Font_color_suffix}\\n\"\n\t\tcheck_threshold_centos\n\telse\n\t\tscan_port_debian\n\t\techo -e \"当前时间：${Yellow_font_prefix}$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")${Font_color_suffix}\\n\"\n\t\tcheck_threshold_debian\n\tfi\n}\na_ssr(){\n\tcheck_pid\n\tIP_threshold=1\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tscan_port_centos\n\t\tscan_ip_centos\n\t\techo -e \"当前时间：${Yellow_font_prefix}$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")${Font_color_suffix} ,当前链接的端口共 ${Red_font_prefix}${port_num}${Font_color_suffix} ,当前链接的IP共 ${Red_font_prefix}${ip_num}${Font_color_suffix} \\n\"\n\t\tcheck_threshold_centos\n\telse\n\t\tscan_port_debian\n\t\tscan_ip_debian\n\t\techo -e \"当前时间：${Yellow_font_prefix}$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")${Font_color_suffix} ,当前链接的端口共 ${Red_font_prefix}${port_num}${Font_color_suffix} ,当前链接的IP共 ${Red_font_prefix}${ip_num}${Font_color_suffix} \\n\"\n\t\tcheck_threshold_debian\n\tfi\n}\ncheck_sys\n[[ ${release} != \"debian\" ]] && [[ ${release} != \"ubuntu\" ]] && [[ ${release} != \"centos\" ]] && echo -e \"${Error} 本脚本不支持当前系统 ${release} !\" && exit 1\naction=$1\naction_2=$2\n[[ -z $1 ]] && action=c\ncase \"$action\" in\n    c|a)\n    ${action}_ssr\n    ;;\n    *)\n    echo -e \"输入错误 !\n 用法: \n c 检查并显示 超过IP阈值的端口\n a 显示当前 所有端口IP连接信息\n y 显示IP归属地(这是第二个参数如：bash ssr_ip_check.sh a y)\"\n    ;;\nesac"
        },
        {
          "name": "ssr_mujson_clear.sh",
          "type": "blob",
          "size": 1.70703125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS 6+/Debian 7+/Ubuntu 14.04+\n#\tDescription: ShadowsocksR mujson mode traffic clear script\n#\tVersion: 1.0.1\n#\tAuthor: Toyo\n#=================================================\nSSR_file=\"/usr/local/shadowsocksr\"\n# 这里填写 mujson_mgr.py 文件的上层绝对路径\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Font_color_suffix=\"\\033[0m\" && Info=\"${Green_font_prefix}[信息]${Font_color_suffix}\" && Error=\"${Red_font_prefix}[错误]${Font_color_suffix}\" && Tip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\ncheck_ssr(){\n\t[[ ! -e ${SSR_file} ]] && echo -e \"${Error} mujson_mgr.py 文件不存在或变量设定错误 !\" && exit 1\n}\nscan_port(){\n\tcd \"${SSR_file}\"\n\tport_all=$(python \"mujson_mgr.py\" -l)\n\t[[ -z ${port_all} ]] && echo -e \"${Error} 没有发现任何端口(用户) !\" && exit 1\n\tport_num=$(echo \"${port_all}\"|wc -l)\n\t[[ ${port_num} = 0 ]] && echo -e \"${Error} 没有发现任何端口(用户) !\" && exit 1\n}\nclear_traffic(){\n\tfor((integer = 1; integer <= ${port_num}; integer++))\n\tdo\n\t\tport=$(echo -e \"${port_all}\"|sed -n \"${integer}p\"|awk '{print $NF}')\n\t\t[[ -z ${port} ]] && echo -e \"${Error} 获取的端口(用户)为空 !\" && exit 1\n\t\tresult=$(python \"mujson_mgr.py\" -c -p \"${port}\")\n\t\techo -e \"${Info} 端口[${port}] 流量已清零 !\"\n\tdone\n\techo -e \"${Info} 所有端口(用户)流量已清零 !\"\n}\nc_ssr(){\n\tcheck_ssr\n\tscan_port\n\tclear_traffic\n}\naction=$1\n[[ -z $1 ]] && action=c\ncase \"$action\" in\n    c)\n    ${action}_ssr\n    ;;\n    *)\n    echo -e \"输入错误 !\n 用法: c 清空 所有用户已使用流量\"\n    ;;\nesac"
        },
        {
          "name": "ssr_old.sh",
          "type": "blob",
          "size": 82.18359375,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS 6/Debian/Ubuntu 14.04+\n#\tDescription: Install the ShadowsocksR server\n#\tVersion: 1.2.9\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/ss-jc42/\n#=================================================\n\n#ssr_pid=\"/var/run/shadowsocks.pid\"\nssr_file=\"/etc/shadowsocksr\"\nssr_ss_file=\"/etc/shadowsocksr/shadowsocks\"\nconfig_file=\"/etc/shadowsocksr/config.json\"\nconfig_user_file=\"/etc/shadowsocksr/user-config.json\"\nLibsodiumr_file=\"/root/libsodium\"\nLibsodiumr_ver=\"1.0.11\"\nauto_restart_cron=\"auto_restart_cron.sh\"\nGreen_font_prefix=\"\\033[32m\"\nRed_font_prefix=\"\\033[31m\"\nGreen_background_prefix=\"\\033[42;37m\"\nRed_background_prefix=\"\\033[41;37m\"\nFont_color_suffix=\"\\033[0m\"\n\nSeparator_1=\"——————————————————————————————\"\n# 脚本文字变量(Translation)\nLanguage(){\n\tif [[ ! -e \"${PWD}/lang_en\" ]]; then\n\t\tWord_default=\"默认\"\n\t\tWord_unlimited=\"无限\"\n\t\tWord_user=\"用户\"\n\t\tWord_port=\"端口\"\n\t\tWord_pass=\"密码\"\n\t\tWord_method=\"加密\"\n\t\tWord_protocol=\"协议\"\n\t\tWord_obfs=\"混淆\"\n\t\tWord_ss_like=\" SS    链接\"\n\t\tWord_ss_qr_code=\" SS  二维码\"\n\t\tWord_ssr_like=\" SSR   链接\"\n\t\tWord_ssr_qr_code=\" SSR 二维码\"\n\t\tWord_single_port=\"单端口\"\n\t\tWord_multi_port=\"多端口\"\n\t\tWord_current_mode=\"当前模式\"\n\t\tWord_current_status=\"当前状态\"\n\t\tWord_number_of_devices=\"设备数\"\n\t\tWord_number_of_devices_limit=\"设备数限制\"\n\t\tWord_single_threaded_speed_limit=\"单线程限速\"\n\t\tWord_port_total_speed_limit=\"端口总限速\"\n\t\tWord_the_installation_is_complete=\"安装完成\"\n\t\tWord_installation_failed=\"安装失败\"\n\t\tWord_uninstall_is_complete=\"卸载完成\"\n\t\tWord_uninstall_cancelled=\"卸载已取消...\"\n\t\tWord_canceled=\"已取消...\"\n\t\tWord_cancel=\"取消\"\n\t\tWord_startup_failed=\"启动失败\"\n\t\tWord_stop_failing=\"停止失败\"\n\t\tWord_stopped=\"已停止\"\n\t\tWord_installed=\"已安装\"\n\t\tWord_not_installed=\"未安装\"\n\t\tWord_has_started=\"已启动\"\n\t\tWord_have_not_started=\"未启动\"\n\t\tWord_running=\"正在运行\"\n\t\tWord_not_running=\"没有运行\"\n\t\tWord_info=\"信息\"\n\t\tWord_error=\"错误\"\n\t\tWord_Prompt=\"提示\"\n\t\tWord_timing_interval=\"定时间隔\"\n\t\tWord_and=\"并\"\n\t\tWord_but=\"但\"\n\t\tWord_serverspeeder=\"锐速\"\n\t\n\t\tInfo_switch_single_port_mode=\"你确定要切换模式为 ${Word_single_port} ?[y/N]\"\n\t\tInfo_switch_multi_port_mode=\"你确定要切换模式为 ${Word_multi_port} ?[y/N]\"\n\t\tInfo_input_port=\"请输入ShadowsocksR ${Word_port} [1-65535]\"\n\t\tInfo_input_pass=\"请输入ShadowsocksR ${Word_pass}\"\n\t\tInfo_input_method=\"请输入数字 来选择ShadowsocksR ${Word_method}\"\n\t\tInfo_input_protocol=\"请输入数字 来选择ShadowsocksR ${Word_protocol}( auth_aes128_* 以后的协议不再支持 兼容原版 )\"\n\t\tInfo_input_number_of_devices=\"请输入 ShadowsocksR账号欲限制的设备数 (${Green_font_prefix} auth_* 系列协议 不兼容原版才有效 ${Font_color_suffix})\"\n\t\tPrompt_number_of_devices=\"${Green_font_prefix} ${Word_Prompt}: ${Font_color_suffix}该设备数限制，指的是每个端口同一时间能链接的客户端数量(多端口模式，每个端口都是独立计算)。\"\n\t\tInfo_input_obfs=\"请输入数字 来选择ShadowsocksR ${Word_obfs}\"\n\t\tInfo_protocol_compatible=\"是否设置 协议 兼容原版 ( _compatible )? [Y/n] :\"\n\t\tInfo_obfs_compatible=\"是否设置 混淆 兼容原版 ( _compatible )? [Y/n] :\"\n\t\tInfo_protocol_obfs_compatible=\"是否设置 协议/混淆 兼容原版 ( _compatible )? [Y/n] :\"\n\t\tInfo_input_single_threaded_speed_limit=\"请输入 你要设置的每个端口 单线程 限速上限(单位：KB/S)\"\n\t\tPrompt_input_single_threaded_speed_limit=\"${Green_font_prefix} ${Word_Prompt}: ${Font_color_suffix}这个指的是，每个端口 单线程的限速上限，多线程即无效。\"\n\t\tInfo_total_port_speed_limit=\"请输入 你要设置的每个端口 总速度 限速上限(单位：KB/S)\"\n\t\tPrompt_total_port_speed_limit=\"${Green_font_prefix} ${Word_Prompt}: ${Font_color_suffix}这个指的是，每个端口 总速度 限速上限，单个端口整体限速。\"\n\t\n\t\tInfo_input_modify_the_type=\"请输入数字 来选择你要修改的类型 :\n1. 修改 ${Word_port}/${Word_pass}\n2. 修改 ${Word_method}/${Word_protocol}/${Word_obfs}\"\n\t\tinfo_input_select_user_id_modified=\"请选择并输入 你要修改的用户前面的数字 :\"\n\t\tInfo_input_select_user_id_del=\"请选择并输入 你要删除的用户前面的数字 :\"\n\t\tPrompt_method_protocol_obfs_modified=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} ShadowsocksR ${Word_method}/${Word_protocol}/${Word_obfs}已修改!\"\n\n\t\tInfo_jq_installation_is_complete=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} JSON解析器 JQ 安装完成，继续...\"\n\t\tInfo_jq_is_installed=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} 检测到 JSON解析器 JQ 已安装，继续...\"\n\t\tInfo_uninstall_ssr=\"确定要卸载 ShadowsocksR ? [y/N]\"\n\t\tInfo_uninstall_server_speeder=\"确定要卸载 ${Word_serverspeeder} ? [y/N]\"\n\t\tInfo_install_bbr=\"确定要安装 BBR ? [y/n]\"\n\t\tInfo_install_bbr_0=\"${Green_font_prefix} [安装前 请注意] ${Font_color_suffix}\n1. 安装开启BBR，需要更换内核，存在更换失败等风险(重启后无法开机)\n2. 本脚本仅支持 Debian / Ubuntu 系统更换内核，OpenVZ虚拟化 不支持更换内核 !\n3. Debian 更换内核过程中会提示 [ 是否终止卸载内核 ] ，请选择 ${Green_font_prefix} NO ${Font_color_suffix}\n4. 安装BBR并重启后，需要重新运行脚本开启BBR ${Green_font_prefix} bash bbr.sh start ${Font_color_suffix}\"\n\t\tInfo_input_set_crontab_interval=\"请输入ShadowsocksR 定时重启的间隔\"\n\t\tInfo_input_set_crontab_interval_default=\"每天凌晨2点0分 [0 2 * * *]\"\n\t\tInfo_set_crontab_interval_0=\"${Green_font_prefix} 格式说明 : ${Font_color_suffix}\n 格式: ${Green_font_prefix} * * * * * ${Font_color_suffix}，分别对应 ${Green_font_prefix} 分钟 小时 日 月 星期 ${Font_color_suffix}\n 示例: ${Green_font_prefix} 30 2 * * * ${Font_color_suffix}，每天 凌晨2点30分时 重启一次\n 示例: ${Green_font_prefix} 30 2 */3 * * ${Font_color_suffix}，每隔3天 凌晨2点30分时 重启一次\n 示例: ${Green_font_prefix} 30 */2 * * * ${Font_color_suffix}，每天 每隔两小时 在30分时 重启一次\"\n\t\tInfo_no_cron_installed=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} 检测到没有安装 corn ，开始安装...\"\n\t\tInfo_input_set_cron=\"请输入数字 来选择你要做什么\n1. 添加 定时任务\n2. 删除 定时任务\n ${Green_font_prefix} ${Word_Prompt}: ${Font_color_suffix}暂时只能添加设置一个定时重启任务。\"\n\t\tInfo_set_corn_status=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} corn 当前没有定时重启任务 !\"\n\t\tInfo_set_corn_del_success=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} corn 删除定时重启任务成功 !\"\n\t\tInfo_set_corn_add_success=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} ShadowsocksR 定时重启任务添加成功 !\"\n\t\tInfo_limit_the_number_of_devices=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} ShadowsocksR 设备数限制 已修改 !\"\n\t\tInfo_port_speed_limit=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} ShadowsocksR 端口限速 已修改 !\"\n\t\tInfo_switch_language_english=\"Are you sure you want to switch the script language to English ? [y/n]\"\n\t\tInfo_switch_language_chinese=\"确定要切换脚本语言为 中文 ? [y/n]\"\n\t\tInfo_switch_language_1=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} Re-run the script to see the language after switching !\"\n\n\t\tErrpr_input_num_error=\"${Red_font_prefix}[${Word_error}]${Font_color_suffix} 请输入正确的数字 !\"\n\t\tError_not_install_ssr=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} 没有发现安装ShadowsocksR，请检查 !\"\n\t\tError_ssr_installed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR已安装 !\"\n\t\tError_no_multi_port_users_were_found=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} 没有发现 多端口用户，请检查 !\"\n\t\tError_jq_installation_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} JSON解析器 JQ 安装失败 !\"\n\t\tError_does_not_support_the_system=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} 本脚本不支持当前系统 !\"\n\t\tError_ssr_download_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR 下载失败 !\"\n\t\tError_ssr_failed_to_start=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR 启动失败 !\"\n\t\tError_the_current_mode_is_single_port=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} 当前模式为 单端口，请检查 !\"\n\t\tError_the_current_mode_is_multi_port=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} 当前模式为 多端口，请检查 !\"\n\t\tError_multi_port_user_remaining_one=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} 当前多端口用户 仅剩一个，无法删除 !\"\n\t\tError_startup_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR 启动失败, 请检查日志 !\"\n\t\tError_no_log_found=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} 没有找到日志文件，请检查 !\"\n\t\tError_server_speeder_installed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ${Word_serverspeeder} 已安装 !\"\n\t\tError_server_speeder_installation_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ${Word_serverspeeder} 安装失败 !\"\n\t\tError_server_speeder_not_installed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ${Word_serverspeeder} 没有安装，请检查 !\"\n\t\tError_cron_installation_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} corn 安装失败 !\"\n\t\tError_set_corn_del_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} corn 删除定时重启任务失败 !\"\n\t\tError_set_corn_add_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR 定时重启任务添加失败 !\"\n\t\tError_set_corn_Write_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR 定时重启脚本写入失败 !\"\n\t\tError_limit_the_number_of_devices_1=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR当前协议为 兼容原版(_compatible)，限制设备数无效 !\"\n\t\tError_limit_the_number_of_devices_2=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR当前协议为 原版(origin)，限制设备数无效 !\"\n\n\t\tPrompt_method_libsodium=\"${Green_font_prefix} ${Word_Prompt}: ${Font_color_suffix}chacha20*等加密方式 需要安装 libsodium 支持库，否则会启动失败 !\"\n\t\tPrompt_any_key=\"请按任意键继续，如有配置错误请使用 Ctrl+C 退出。\"\n\t\tPrompt_check_if_the_configuration_is_incorrect=\"请检查Shadowsocks账号配置是否有误 !\"\n\t\tPrompt_your_account_configuration=\"你的ShadowsocksR 账号配置 :\"\n\t\tPrompt_ssr_status_on=\"ShadowsocksR 正在运行 !\"\n\t\tPrompt_ssr_status_off=\"ShadowsocksR 没有运行 !\"\n\t\tPrompt_tip=\"${Green_font_prefix} ${Word_Prompt}: ${Font_color_suffix}\n 浏览器中，打开二维码链接，就可以看到二维码图片。\n 协议和混淆后面的[ _compatible ]，指的是兼容原版Shadowsocks协议/混淆。\"\n\t\tPrompt_total_number_of_users=\"当前用户配置总数为:\"\n\t\tPrompt_total_number_of_ip=\"当前链接的IP总数为:\"\n\t\tPrompt_the_currently_connected_ip=\"当前连接的IP:\"\n\t\tPrompt_total_number_of_ip_number=\"IP数量:\"\n\t\tPrompt_modify_multi_port_user=\"多端口用户已修改 !\"\n\t\tPrompt_add_multi_port_user=\"多端口用户已添加 !\"\n\t\tPrompt_del_multi_port_user=\"多端口用户已删除 !\"\n\t\tPrompt_log=\"使用 ${Red_font_prefix} Ctrl+C ${Font_color_suffix} 键退出查看日志 !\"\n\t\tPrompt_switch_language_chinese=\" The current scripting language: English\"\n\t\tPrompt_switch_language_english=\" 当前脚本语言为:  中文\"\n\n#菜单\n\t\tMenu_prompt_1=\"请输入一个数字来选择对应的选项\" \n\t\tMenu_prompt_2=\"(请输入数字 0-27): \"\n\t\tMenu_prompt_3=\"请选择并输入数字 0-27\"\n\t\tMenu_options=\"${Green_font_prefix}  1. ${Font_color_suffix}安装 ShadowsocksR\n${Green_font_prefix}  2. ${Font_color_suffix}安装 libsodium(chacha20)\n${Green_font_prefix}  3. ${Font_color_suffix}显示 单/多端口 账号信息\n${Green_font_prefix}  4. ${Font_color_suffix}显示 单/多端口 连接信息\n${Green_font_prefix}  5. ${Font_color_suffix}修改 单端口用户配置\n${Green_font_prefix}  6. ${Font_color_suffix}手动 修改  用户配置\n${Green_font_prefix}  7. ${Font_color_suffix}卸载 ShadowsocksR\n${Green_font_prefix}  8. ${Font_color_suffix}更新 ShadowsocksR\n——————————————————\n${Green_font_prefix}  9. ${Font_color_suffix}切换 单/多端口 模式\n${Green_font_prefix} 10. ${Font_color_suffix}添加 多端口用户配置\n${Green_font_prefix} 11. ${Font_color_suffix}修改 多端口用户配置\n${Green_font_prefix} 12. ${Font_color_suffix}删除 多端口用户配置\n——————————————————\n${Green_font_prefix} 13. ${Font_color_suffix}启动 ShadowsocksR\n${Green_font_prefix} 14. ${Font_color_suffix}停止 ShadowsocksR\n${Green_font_prefix} 15. ${Font_color_suffix}重启 ShadowsocksR\n${Green_font_prefix} 16. ${Font_color_suffix}查看 ShadowsocksR 状态\n${Green_font_prefix} 17. ${Font_color_suffix}查看 ShadowsocksR 日志\n——————————————————\n${Green_font_prefix} 18. ${Font_color_suffix}安装 ${Word_serverspeeder}\n${Green_font_prefix} 19. ${Font_color_suffix}停止 ${Word_serverspeeder}\n${Green_font_prefix} 20. ${Font_color_suffix}重启 ${Word_serverspeeder}\n${Green_font_prefix} 21. ${Font_color_suffix}查看 ${Word_serverspeeder} 状态\n${Green_font_prefix} 22. ${Font_color_suffix}卸载 ${Word_serverspeeder}\n——————————————————\"\n\t\tMenu_options_bbr=\"${Green_font_prefix} 23. ${Font_color_suffix}安装 BBR(需更换内核, 存在风险)\"\n\t\tMenu_options_other=\"${Green_font_prefix} 24. ${Font_color_suffix}封禁 BT/PT/垃圾邮件(SPAM)\n${Green_font_prefix} 25. ${Font_color_suffix}设置 ShadowsocksR 定时重启\n${Green_font_prefix} 26. ${Font_color_suffix}设置 ShadowsocksR 设备数限制\n${Green_font_prefix} 27. ${Font_color_suffix}设置 ShadowsocksR 速度限制\n——————————————————\n${Green_font_prefix}  0. ${Font_color_suffix}The scripting language is English\n 注意事项： ${Word_serverspeeder}/BBR 不支持 OpenVZ !\"\n\telse\n\t\tWord_default=\"default\"\n\t\tWord_unlimited=\"unlimited\"\n\t\tWord_user=\"user\"\n\t\tWord_port=\"port\"\n\t\tWord_pass=\"pass\"\n\t\tWord_method=\"method\"\n\t\tWord_protocol=\"protocol\"\n\t\tWord_obfs=\"obfs\"\n\t\tWord_ss_like=\" SS Like\"\n\t\tWord_ss_qr_code=\" SS QRcode\"\n\t\tWord_ssr_like=\" SSR Like\"\n\t\tWord_ssr_qr_code=\" SSR QRcode\"\n\t\tWord_single_port=\"single_port\"\n\t\tWord_multi_port=\"multi_port\"\n\t\tWord_current_mode=\"Current_mode\"\n\t\tWord_current_status=\"Current_status\"\n\t\tWord_number_of_devices=\"number of devices\"\n\t\tWord_number_of_devices_limit=\"number of devices limit\"\n\t\tWord_single_threaded_speed_limit=\"single-threaded speed limit\"\n\t\tWord_port_total_speed_limit=\"port total speed limit\"\n\t\tWord_the_installation_is_complete=\"The installation is complete\"\n\t\tWord_installation_failed=\"Installation failed\"\n\t\tWord_uninstall_is_complete=\"Uninstall is complete\"\n\t\tWord_uninstall_cancelled=\"Uninstall cancelled...\"\n\t\tWord_canceled=\"Canceled...\"\n\t\tWord_cancel=\"cancel\"\n\t\tWord_startup_failed=\"Startup failed\"\n\t\tWord_stop_failing=\"Stop failing\"\n\t\tWord_stopped=\"Stopped\"\n\t\tWord_installed=\"Installed\"\n\t\tWord_not_installed=\"Not installed\"\n\t\tWord_has_started=\"Has started\"\n\t\tWord_have_not_started=\"Have not started\"\n\t\tWord_running=\"Running\"\n\t\tWord_not_running=\"Not running\"\n\t\tWord_info=\"Info\"\n\t\tWord_error=\"Error\"\n\t\tWord_Prompt=\"Prompt\"\n\t\tWord_timing_interval=\"Timing interval\"\n\t\tWord_and=\"and\"\n\t\tWord_but=\"but\"\n\t\tWord_serverspeeder=\"ServerSpeeder\"\n\t\n\t\tInfo_switch_single_port_mode=\"Are you sure you want to switch mode to ${Word_single_port} ?[y/N]\"\n\t\tInfo_switch_multi_port_mode=\"Are you sure you want to switch mode to Word_multi_port ?[y/N]\"\n\t\tInfo_input_port=\"Please enter ShadowsocksR ${Word_port} [1-65535]\"\n\t\tInfo_input_pass=\"Please enter ShadowsocksR ${Word_pass}\"\n\t\tInfo_input_method=\"Please enter the number to select ShadowsocksR ${Word_method}\"\n\t\tInfo_input_protocol=\"Please enter the number to select ShadowsocksR ${Word_protocol}( auth_aes128_* 以后的协议不再支持 兼容原版 )\"\n\t\tInfo_input_number_of_devices=\"Please enter the number of devices that ShadowsocksR ports want to restrict (${Green_font_prefix} Auth_ * protocol is not compatible with the original version is valid! ${Font_color_suffix})\"\n\t\tPrompt_number_of_devices=\"${Green_font_prefix} ${Word_Prompt}: ${Font_color_suffix}The number of devices is limited, referring to the number of clients that can be linked per port (multi_port mode, each port is independently calculated).\"\n\t\tInfo_input_obfs=\"Please enter the number to select ShadowsocksR ${Word_obfs}\"\n\t\tInfo_protocol_compatible=\"It is compatible with the original set protocol? ( _compatible ) [Y/n] :\"\n\t\tInfo_obfs_compatible=\"It is compatible with the original set obfs? ( _compatible ) [Y/n] :\"\n\t\tInfo_protocol_obfs_compatible=\"It is compatible with the original set protocol / obfs? ( _compatible ) [Y/n] :\"\n\t\tInfo_input_single_threaded_speed_limit=\"Please enter the maximum speed of each port you want to set for a single thread (in KB / S)\"\n\t\tPrompt_input_single_threaded_speed_limit=\"${Green_font_prefix} ${Word_Prompt}: ${Font_color_suffix}This refers to the limit of each port single-threaded limit, multi-threaded that is invalid.\"\n\t\tInfo_total_port_speed_limit=\"Please enter the maximum speed limit for each port you want to set (in KB / S)\"\n\t\tPrompt_total_port_speed_limit=\"${Green_font_prefix} ${Word_Prompt}: ${Font_color_suffix}This refers to the total speed limit per port, the overall speed limit for a single port.\"\n\t\n\t\tInfo_input_modify_the_type=\"Please enter a number to select the type you want to modify :\n1. Modify ${Word_port}/${Word_pass}\n2. Modify ${Word_method}/${Word_protocol}/${Word_obfs}\"\n\t\tinfo_input_select_user_id_modified=\"Please select and enter the user ID you want to modify :\"\n\t\tInfo_input_select_user_id_del=\"Please select and enter the user ID you want to delete :\"\n\t\tPrompt_method_protocol_obfs_modified=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} ShadowsocksR ${Word_method}/${Word_protocol}/${Word_obfs} has been modified!\"\n\n\t\tInfo_jq_installation_is_complete=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} JSON parser JQ has been installed, continue ...\"\n\t\tInfo_jq_is_installed=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} JSON parser JQ installed, continues ...\"\n\t\tInfo_uninstall_ssr=\"Sure you want to uninstall ShadowsocksR ? [y/N]\"\n\t\tInfo_uninstall_server_speeder=\"Sure you want to uninstall ${Word_serverspeeder} ? [y/N]\"\n\t\tInfo_install_bbr=\"Sure you want to install the BBR ? [y/n]\"\n\t\tInfo_install_bbr_0=\"${Green_font_prefix} [Before installation, please note the following points] ${Font_color_suffix}\n1. Install BBR, need to replace the kernel, there is a risk of replacement failure (can not boot) !\n2. This script only supports Debian / Ubuntu system replacement kernel, OpenVZ virtualization does not support the replacement of the kernel !\n3. In the process of replacing the kernel, you will be prompted to [ terminate the uninstall kernel ], Please select [${Green_font_prefix} NO ${Font_color_suffix}]!\n4. After installing BBR and restart, you need to re-run the script to open BBR [${Green_font_prefix} bash bbr.sh start ${Font_color_suffix}] !\"\n\t\tInfo_input_set_crontab_interval=\"Please enter the interval at which ShadowsocksR reboots regularly\"\n\t\tInfo_input_set_crontab_interval_default=\"Every morning at 2:30 am [0 2 * * *]\"\n\t\tInfo_set_crontab_interval_0=\"${Green_font_prefix} Format Description : ${Font_color_suffix}\n Format: ${Green_font_prefix} * * * * * ${Font_color_suffix}, corresponding to ${Green_font_prefix} minutes / hour / day / month / week ${Font_color_suffix}\n Example: ${Green_font_prefix}30 2 * * * ${Font_color_suffix}, every day, 2:30 am, restart once\n Example: ${Green_font_prefix}30 2 * / 3 * * ${Font_color_suffix}, every 3 days, 2:30 am, restart once\n Example: ${Green_font_prefix}30 * / 2 * * * ${Font_color_suffix}, every day, every two hours at 30 minutes, restart once\"\n\t\tInfo_no_cron_installed=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} Detected no installation of corn, started to install ...\"\n\t\tInfo_input_set_cron=\"Please enter a number to choose what you want to do\n1. Add a timed task\n2. Delete the timed task\n ${Green_font_prefix} ${Word_Prompt}: ${Font_color_suffix}Currently only add a regular restart task.\"\n\t\tInfo_set_corn_status=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} There are currently no scheduled reboot task !\"\n\t\tInfo_set_corn_del_success=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} Corn Remove the timing reboot mission success !\"\n\t\tInfo_set_corn_add_success=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} Timed restart task was added successfully !\"\n\t\tInfo_limit_the_number_of_devices=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} ShadowsocksR device limit has been modified !\"\n\t\tInfo_port_speed_limit=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} ShadowsocksR port speed limit has been modified !\"\n\t\tInfo_switch_language_english=\"Are you sure you want to switch the script language to English ? [y/n]\"\n\t\tInfo_switch_language_chinese=\"确定要切换脚本语言为 中文 ? [y/n]\"\n\t\tInfo_switch_language_1=\"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} 重新运行脚本即可看到切换后的语言 !\"\n\n\t\tErrpr_input_num_error=\"${Red_font_prefix}[${Word_error}]${Font_color_suffix} Please enter the correct number !\"\n\t\tError_not_install_ssr=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} No installation ShadowsocksR, please check !\"\n\t\tError_ssr_installed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR is installed !\"\n\t\tError_no_multi_port_users_were_found=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} Do not find multi_port users, please check !\"\n\t\tError_jq_installation_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} JSON parser JQ installation failed !\"\n\t\tError_does_not_support_the_system=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} This script does not support the current system !\"\n\t\tError_ssr_download_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR download failed !\"\n\t\tError_ssr_failed_to_start=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR failed to start !\"\n\t\tError_the_current_mode_is_single_port=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} The current mode is single port, please check !\"\n\t\tError_the_current_mode_is_multi_port=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} The current mode is multi_port, please check !\"\n\t\tError_multi_port_user_remaining_one=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} The current multi_port users only one, can not be deleted !\"\n\t\tError_startup_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR failed to start, please check the log !\"\n\t\tError_no_log_found=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} Did not find the log file, please check it out !\"\n\t\tError_server_speeder_installed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ${Word_serverspeeder} installed !\"\n\t\tError_server_speeder_installation_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ${Word_serverspeeder}  installation failed !\"\n\t\tError_server_speeder_not_installed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ${Word_serverspeeder} is not installed, please check !\"\n\t\tError_cron_installation_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} Corn installation failed !\"\n\t\tError_set_corn_del_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} Delete the scheduled reboot task fails !\"\n\t\tError_set_corn_add_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} Timed restart task failed to add !\"\n\t\tError_set_corn_Write_failed=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} Timed restart script write failed !\"\n\t\tError_limit_the_number_of_devices_1=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} The current protocol is compatible with the original (_compatible), limit the number of devices is invalid !\"\n\t\tError_limit_the_number_of_devices_2=\"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} The current agreement is the original (origin), limit the number of devices is invalid !\"\n\n\t\tPrompt_method_libsodium=\"${Green_font_prefix} ${Word_Prompt}: ${Font_color_suffix} Chacha20-* and other encryption methods need to install libsodium support library, otherwise it will fail to start !\"\n\t\tPrompt_any_key=\"Please press any key to continue, if the configuration error please use Ctrl + C exit.\"\n\t\tPrompt_check_if_the_configuration_is_incorrect=\"请检查Shadowsocks账号配置是否有误 !\"\n\t\tPrompt_your_account_configuration=\"Your ShadowsocksR account configuration :\"\n\t\tPrompt_ssr_status_on=\"ShadowsocksR is running !\"\n\t\tPrompt_ssr_status_off=\"ShadowsocksR is not running !\"\n\t\tPrompt_tip=\"${Green_font_prefix} ${Word_Prompt}: ${Font_color_suffix}\n Browser, open the QRcode link, you can see the QRcode picture.\n Protocols and confusion behind [_compatible], referring to the original compatible Shadowsocks protocol / obfs.\"\n\t\tPrompt_total_number_of_users=\"Current total number of users:\"\n\t\tPrompt_total_number_of_ip=\"The total number of currently linked IPs is:\"\n\t\tPrompt_the_currently_connected_ip=\"The currently connected IP:\"\n\t\tPrompt_total_number_of_ip_number=\"IP number:\"\n\t\tPrompt_modify_multi_port_user=\"multi_port users have modified !\"\n\t\tPrompt_add_multi_port_user=\"multi_port users have added !\"\n\t\tPrompt_del_multi_port_user=\"multi_port user has been deleted !\"\n\t\tPrompt_log=\"Use ${Red_font_prefix} Ctrl+C ${Font_color_suffix} to exit View Log !\"\n\t\tPrompt_switch_language_chinese=\" The current scripting language: English\"\n\t\tPrompt_switch_language_english=\" 当前脚本语言为:  中文\"\n\n#菜单\n\t\tMenu_prompt_1=\"Please enter a number to select the corresponding option\" \n\t\tMenu_prompt_2=\"(Please enter numbers 0-27): \"\n\t\tMenu_prompt_3=\"Please select and enter numbers 0-27 !\"\n\t\tMenu_options=\"${Green_font_prefix}  1. ${Font_color_suffix}Install Shadowsocks\n${Green_font_prefix}  2. ${Font_color_suffix}Install libsodium (chacha20)\n${Green_font_prefix}  3. ${Font_color_suffix}Display account information\n${Green_font_prefix}  4. ${Font_color_suffix}Display connection information\n${Green_font_prefix}  5. ${Font_color_suffix}Modify single-port user configuration\n${Green_font_prefix}  6. ${Font_color_suffix}Manually modify user profiles\n${Green_font_prefix}  7. ${Font_color_suffix}Uninstall Shadowsocks\n${Green_font_prefix}  8. ${Font_color_suffix}Update Shadowsocks\n——————————————————\n${Green_font_prefix}  9. ${Font_color_suffix}Switch single / multi port mode\n${Green_font_prefix} 10. ${Font_color_suffix}Add a multi_port user configuration\n${Green_font_prefix} 11. ${Font_color_suffix}Modify multi_port user configuration\n${Green_font_prefix} 12. ${Font_color_suffix}Remove the multi_port user configuration\n——————————————————\n${Green_font_prefix} 13. ${Font_color_suffix}Start Shadowsocks\n${Green_font_prefix} 14. ${Font_color_suffix}Stop Shadowsocks\n${Green_font_prefix} 15. ${Font_color_suffix}Restart Shadowsocks\n${Green_font_prefix} 16. ${Font_color_suffix}View the ShadowsocksR state\n${Green_font_prefix} 17. ${Font_color_suffix}View the ShadowsocksR log\n——————————————————\n${Green_font_prefix} 18. ${Font_color_suffix}Install ${Word_serverspeeder}\n${Green_font_prefix} 19. ${Font_color_suffix}Stop ${Word_serverspeeder}\n${Green_font_prefix} 20. ${Font_color_suffix}Restart ${Word_serverspeeder}\n${Green_font_prefix} 21. ${Font_color_suffix}View the ${Word_serverspeeder} state\n${Green_font_prefix} 22. ${Font_color_suffix}Uninstall ${Word_serverspeeder}\n——————————————————\"\n\t\tMenu_options_bbr=\"${Green_font_prefix} 23. ${Font_color_suffix}Install BBR(Need to replace the kernel, there is a risk)\"\n\t\tMenu_options_other=\"${Green_font_prefix} 24. ${Font_color_suffix}Banned BT/PT/SPAM\n${Green_font_prefix} 25. ${Font_color_suffix}Set ShadowsocksR scheduled reboot\n${Green_font_prefix} 26. ${Font_color_suffix}Set the ShadowsocksR device limit\n${Green_font_prefix} 27. ${Font_color_suffix}Set the ShadowsocksR speed limit\n——————————————————\n${Green_font_prefix}  0. ${Font_color_suffix}切换 脚本语言为中文\n Note: ${Word_serverspeeder} / BBR does not support OpenVZ !\"\n\tfi\n\tMenu_status_1=\" ${Word_current_status}: ${Green_font_prefix} ${Word_installed} ${Font_color_suffix} ${Word_and} ${Green_font_prefix} ${Word_has_started} ${Font_color_suffix}\"\n\tMenu_status_2=\" ${Word_current_status}: ${Green_font_prefix} ${Word_installed} ${Font_color_suffix} ${Word_but} ${Red_font_prefix} ${Word_have_not_started} ${Font_color_suffix}\"\n\tMenu_status_3=\" ${Word_current_status}: ${Red_font_prefix} ${Word_not_installed} ${Font_color_suffix}\"\n\tMenu_mode_1=\" ${Word_current_mode}: ${Green_font_prefix} ${Word_single_port} ${Font_color_suffix}\"\n\tMenu_mode_2=\" ${Word_current_mode}: ${Green_font_prefix} ${Word_multi_port} ${Font_color_suffix}\"\n}\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\t#bit=`uname -m`\n}\nSSR_install_status(){\n\t[[ ! -e $config_user_file ]] && echo -e \"${Error_not_install_ssr}\" && exit 1\n}\n#获取IP\ngetIP(){\n\tip=`curl -m 10 -s \"ipinfo.io/ip\"`\n\t#ip=`wget -qO- -t1 -T2 ipinfo.io/ip`\n\t[[ -z \"$ip\" ]] && ip=\"VPS_IP\"\n}\n#获取用户账号信息\ngetUser(){\n\tport=`jq '.server_port' ${config_user_file}`\n\tpassword=`jq '.password' ${config_user_file} | sed 's/^.//;s/.$//'`\n\tmethod=`jq '.method' ${config_user_file} | sed 's/^.//;s/.$//'`\n\tprotocol=`jq '.protocol' ${config_user_file} | sed 's/^.//;s/.$//'`\n\tobfs=`jq '.obfs' ${config_user_file} | sed 's/^.//;s/.$//'`\n\tprotocol_param=`jq '.protocol_param' ${config_user_file} | sed 's/^.//;s/.$//'`\n\tspeed_limit_per_con=`jq '.speed_limit_per_con' ${config_user_file}`\n\tspeed_limit_per_user=`jq '.speed_limit_per_user' ${config_user_file}`\n}\n# 设置 端口和密码\nset_port_pass(){\n\t#设置端口\n\twhile true\n\tdo\n\techo -e \"${Info_input_port}\"\n\tstty erase '^H' && read -p \"(${Word_default}: 2333):\" ssport\n\t[[ -z \"$ssport\" ]] && ssport=\"2333\"\n\texpr ${ssport} + 0 &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${ssport} -ge 1 ]] && [[ ${ssport} -le 65535 ]]; then\n\t\t\techo && echo ${Separator_1} && echo -e \"\t${Word_port} : ${Green_font_prefix}${ssport}${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Errpr_input_num_error}\"\n\t\tfi\n\telse\n\t\techo -e \"${Errpr_input_num_error}\"\n\tfi\n\tdone\n\t#设置密码\n\techo \"${Info_input_pass}:\"\n\tstty erase '^H' && read -p \"(${Word_default}: doub.io):\" sspwd\n\t[[ -z \"${sspwd}\" ]] && sspwd=\"doub.io\"\n\techo && echo ${Separator_1} && echo -e \"\t${Word_pass} : ${Green_font_prefix}${sspwd}${Font_color_suffix}\" && echo ${Separator_1} && echo\n}\n# 设置 加密方式、协议和混淆等\nset_others(){\n\t#设置加密方式\n\techo \"${Info_input_method}\"\n\techo \" 1. rc4-md5\"\n\techo \" 2. aes-128-ctr\"\n\techo \" 3. aes-256-ctr\"\n\techo \" 4. aes-256-cfb\"\n\techo \" 5. aes-256-cfb8\"\n\techo \" 6. camellia-256-cfb\"\n\techo \" 7. chacha20\"\n\techo \" 8. chacha20-ietf\"\n\techo -e \"${Prompt_method_libsodium}\"\n\techo\n\tstty erase '^H' && read -p \"(${Word_default}: 2. aes-128-ctr):\" ssmethod\n\t[[ -z \"${ssmethod}\" ]] && ssmethod=\"2\"\n\tif [[ ${ssmethod} == \"1\" ]]; then\n\t\tssmethod=\"rc4-md5\"\n\telif [[ ${ssmethod} == \"2\" ]]; then\n\t\tssmethod=\"aes-128-ctr\"\n\telif [[ ${ssmethod} == \"3\" ]]; then\n\t\tssmethod=\"aes-256-ctr\"\n\telif [[ ${ssmethod} == \"4\" ]]; then\n\t\tssmethod=\"aes-256-cfb\"\n\telif [[ ${ssmethod} == \"5\" ]]; then\n\t\tssmethod=\"aes-256-cfb8\"\n\telif [[ ${ssmethod} == \"6\" ]]; then\n\t\tssmethod=\"camellia-256-cfb\"\n\telif [[ ${ssmethod} == \"7\" ]]; then\n\t\tssmethod=\"chacha20\"\n\telif [[ ${ssmethod} == \"8\" ]]; then\n\t\tssmethod=\"chacha20-ietf\"\n\telse\n\t\tssmethod=\"aes-128-ctr\"\n\tfi\n\techo && echo ${Separator_1} && echo -e \"\t${Word_method} : ${Green_font_prefix}${ssmethod}${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t#设置协议\n\techo \"${Info_input_protocol}\"\n\techo \" 1. origin\"\n\techo \" 2. auth_sha1_v4\"\n\techo \" 3. auth_aes128_md5\"\n\techo \" 4. auth_aes128_sha1\"\n\techo\n\tstty erase '^H' && read -p \"(${Word_default}: 2. auth_sha1_v4):\" ssprotocol\n\t[[ -z \"${ssprotocol}\" ]] && ssprotocol=\"2\"\n\tif [[ ${ssprotocol} == \"1\" ]]; then\n\t\tssprotocol=\"origin\"\n\telif [[ ${ssprotocol} == \"2\" ]]; then\n\t\tssprotocol=\"auth_sha1_v4\"\n\telif [[ ${ssprotocol} == \"3\" ]]; then\n\t\tssprotocol=\"auth_aes128_md5\"\n\telif [[ ${ssprotocol} == \"4\" ]]; then\n\t\tssprotocol=\"auth_aes128_sha1\"\n\telse\n\t\tssprotocol=\"auth_sha1_v4\"\n\tfi\n\techo && echo ${Separator_1} && echo -e \"\t${Word_protocol} : ${Green_font_prefix}${ssprotocol}${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t#设置混淆\n\techo \"${Info_input_obfs}\"\n\techo \" 1. plain\"\n\techo \" 2. http_simple\"\n\techo \" 3. http_post\"\n\techo \" 4. random_head\"\n\techo \" 5. tls1.2_ticket_auth\"\n\techo\n\tstty erase '^H' && read -p \"(${Word_default}: 5. tls1.2_ticket_auth):\" ssobfs\n\t[[ -z \"${ssobfs}\" ]] && ssobfs=\"5\"\n\tif [[ ${ssobfs} == \"1\" ]]; then\n\t\tssobfs=\"plain\"\n\telif [[ ${ssobfs} == \"2\" ]]; then\n\t\tssobfs=\"http_simple\"\n\telif [[ ${ssobfs} == \"3\" ]]; then\n\t\tssobfs=\"http_post\"\n\telif [[ ${ssobfs} == \"4\" ]]; then\n\t\tssobfs=\"random_head\"\n\telif [[ ${ssobfs} == \"5\" ]]; then\n\t\tssobfs=\"tls1.2_ticket_auth\"\n\telse\n\t\tssobfs=\"tls1.2_ticket_auth\"\n\tfi\n\techo && echo ${Separator_1} && echo -e \"\t${Word_obfs} : ${Green_font_prefix}${ssobfs}${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t#询问是否设置 ${Word_obfs} 兼容原版\n\tif [[ ${ssprotocol} != \"origin\" ]]; then\n\t\tif [[ ${ssobfs} != \"plain\" ]]; then\n\t\t\tif [[ ${ssprotocol} == \"verify_sha1\" ]] || [[ ${ssprotocol} == \"auth_sha1_v2\" ]]  || [[ ${ssprotocol} == \"auth_sha1_v4\" ]]; then\n\t\t\t\tstty erase '^H' && read -p \"${Info_protocol_obfs_compatible}\" yn1\n\t\t\t\t[[ -z \"${yn1}\" ]] && yn1=\"y\"\n\t\t\t\t[[ $yn1 == [Yy] ]] && ssobfs=${ssobfs}\"_compatible\" && ssprotocol=${ssprotocol}\"_compatible\"\n\t\t\telse\n\t\t\t\tstty erase '^H' && read -p \"${Info_obfs_compatible}\" yn1\n\t\t\t\t[[ -z \"${yn1}\" ]] && yn1=\"y\"\n\t\t\t\t[[ $yn1 == [Yy] ]] && ssobfs=${ssobfs}\"_compatible\"\n\t\t\tfi\n\t\telse\n\t\t\tif [[ ${ssprotocol} == \"verify_sha1\" ]] || [[ ${ssprotocol} == \"auth_sha1_v2\" ]]  || [[ ${ssprotocol} == \"auth_sha1_v4\" ]]; then\n\t\t\t\tstty erase '^H' && read -p \"${Info_protocol_compatible}\" yn1\n\t\t\t\t[[ -z \"${yn1}\" ]] && yn1=\"y\"\n\t\t\t\t[[ $yn1 == [Yy] ]] && ssprotocol=${ssprotocol}\"_compatible\"\n\t\t\tfi\n\t\tfi\n\telse\n\t\tif [[ ${ssobfs} != \"plain\" ]]; then\n\t\t\tstty erase '^H' && read -p \"${Info_obfs_compatible}\" yn1\n\t\t\t[[ -z \"${yn1}\" ]] && yn1=\"y\"\n\t\t\t[[ $yn1 == [Yy] ]] && ssobfs=${ssobfs}\"_compatible\"\n\t\tfi\n\tfi\n\tif [[ ${ssprotocol} != \"origin\" ]]; then\n\t\twhile true\n\t\tdo\n\t\techo\n\t\techo -e \"${Info_input_number_of_devices}\"\n\t\techo -e \"${Prompt_number_of_devices}\"\n\t\tstty erase '^H' && read -p \"(${Word_default}: ${Word_unlimited}):\" ssprotocol_param\n\t\t[[ -z \"$ssprotocol_param\" ]] && ssprotocol_param=\"\" && break\n\t\texpr ${ssprotocol_param} + 0 &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${ssprotocol_param} -ge 1 ]] && [[ ${ssprotocol_param} -le 99999 ]]; then\n\t\t\t\techo && echo ${Separator_1} && echo -e \"\t${Word_number_of_devices} : ${Green_font_prefix}${ssprotocol_param}${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"${Errpr_input_num_error}\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"${Errpr_input_num_error}\"\n\t\tfi\n\t\tdone\n\tfi\n\t# 设置单线程限速\n\twhile true\n\tdo\n\techo\n\techo -e \"${Info_input_single_threaded_speed_limit}\"\n\techo -e \"${Prompt_input_single_threaded_speed_limit}\"\n\tstty erase '^H' && read -p \"(${Word_default}: ${Word_unlimited}):\" ssspeed_limit_per_con\n\t[[ -z \"$ssspeed_limit_per_con\" ]] && ssspeed_limit_per_con=0 && break\n\texpr ${ssspeed_limit_per_con} + 0 &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${ssspeed_limit_per_con} -ge 1 ]] && [[ ${ssspeed_limit_per_con} -le 99999 ]]; then\n\t\t\techo && echo ${Separator_1} && echo -e \"\t${Word_single_threaded_speed_limit} : ${Green_font_prefix}${ssspeed_limit_per_con} KB/S${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo \"${Errpr_input_num_error}\"\n\t\tfi\n\telse\n\t\techo \"${Errpr_input_num_error}\"\n\tfi\n\tdone\n\t# 设置端口总限速\n\twhile true\n\tdo\n\techo\n\techo -e \"${Info_total_port_speed_limit}\"\n\techo -e \"${Prompt_total_port_speed_limit}\"\n\tstty erase '^H' && read -p \"(${Word_default}: ${Word_unlimited}):\" ssspeed_limit_per_user\n\t[[ -z \"$ssspeed_limit_per_user\" ]] && ssspeed_limit_per_user=0 && break\n\texpr ${ssspeed_limit_per_user} + 0 &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${ssspeed_limit_per_user} -ge 1 ]] && [[ ${ssspeed_limit_per_user} -le 99999 ]]; then\n\t\t\techo && echo ${Separator_1} && echo -e \"\t${Word_port_total_speed_limit} : ${Green_font_prefix}${ssspeed_limit_per_user} KB/S${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo \"${Errpr_input_num_error}\"\n\t\tfi\n\telse\n\t\techo \"${Errpr_input_num_error}\"\n\tfi\n\tdone\n}\n#设置用户账号信息\nsetUser(){\n\tset_port_pass\n\tset_others\n\t#最后确认\n\t[[ \"${ssprotocol_param}\" == \"\" ]] && ssprotocol_param=\"0(${Word_unlimited})\"\n\techo && echo ${Separator_1}\n\techo \" ${Prompt_check_if_the_configuration_is_incorrect}\" && echo\n\techo -e \" ${Word_port}\\t    : ${Green_font_prefix}${ssport}${Font_color_suffix}\"\n\techo -e \" ${Word_pass}\\t    : ${Green_font_prefix}${sspwd}${Font_color_suffix}\"\n\techo -e \" ${Word_method}\\t    : ${Green_font_prefix}${ssmethod}${Font_color_suffix}\"\n\techo -e \" ${Word_protocol}\\t    : ${Green_font_prefix}${ssprotocol}${Font_color_suffix}\"\n\techo -e \" ${Word_obfs}\\t    : ${Green_font_prefix}${ssobfs} ${Font_color_suffix}\"\n\techo -e \" ${Word_number_of_devices_limit} : ${Green_font_prefix}${ssprotocol_param}${Font_color_suffix}\"\n\techo -e \" ${Word_number_of_devices_limit} : ${Green_font_prefix}${ssspeed_limit_per_con} KB/S${Font_color_suffix}\"\n\techo -e \" ${Word_port_total_speed_limit} : ${Green_font_prefix}${ssspeed_limit_per_user} KB/S${Font_color_suffix}\"\n\techo ${Separator_1} && echo\n\tstty erase '^H' && read -p \"${Prompt_any_key}\" var\n\t[[ \"${ssprotocol_param}\" = \"0(${Word_unlimited})\" ]] && ssprotocol_param=\"\"\n}\nss_link_qr(){\n\tSSbase64=`echo -n \"${method}:${password}@${ip}:${port}\" | base64 | sed ':a;N;s/\\n/ /g;ta' | sed 's/ //g'`\n\tSSurl=\"ss://\"${SSbase64}\n\tSSQRcode=\"http://doub.pw/qr/qr.php?text=\"${SSurl}\n\tss_link=\"${Word_ss_like} : ${Green_font_prefix}${SSurl}${Font_color_suffix} \\n${Word_ss_qr_code} : ${Green_font_prefix}${SSQRcode}${Font_color_suffix}\"\n}\nssr_link_qr(){\n\tSSRprotocol=`echo ${protocol} | sed 's/_compatible//g'`\n\tSSRobfs=`echo ${obfs} | sed 's/_compatible//g'`\n\tSSRPWDbase64=`echo -n \"${password}\" | base64 | sed ':a;N;s/\\n/ /g;ta' | sed 's/ //g'`\n\tSSRbase64=`echo -n \"${ip}:${port}:${SSRprotocol}:${method}:${SSRobfs}:${SSRPWDbase64}\" | base64 | sed ':a;N;s/\\n/ /g;ta' | sed 's/ //g'`\n\tSSRurl=\"ssr://\"${SSRbase64}\n\tSSRQRcode=\"http://doub.pw/qr/qr.php?text=\"${SSRurl}\n\tssr_link=\"${Word_ssr_like} : ${Green_font_prefix}${SSRurl}${Font_color_suffix} \\n${Word_ssr_qr_code} : ${Green_font_prefix}${SSRQRcode}${Font_color_suffix} \\n \"\n}\nss_link_qr_1(){\n\tSSbase64=`echo -n \"${method}:${user_password}@${ip}:${user_port}\" | base64 | sed ':a;N;s/\\n/ /g;ta' | sed 's/ //g'`\n\t#echo -e \"${user_port}\" && echo -e \"${user_password}\" && echo -e \"${SSbase64}\"\n\tSSurl=\"ss://\"${SSbase64}\n\tSSQRcode=\"http://doub.pw/qr/qr.php?text=\"${SSurl}\n\tss_link=\"${Word_ss_like} : ${Green_font_prefix}${SSurl}${Font_color_suffix} \\n${Word_ss_qr_code} : ${Green_font_prefix}${SSQRcode}${Font_color_suffix}\"\n}\nssr_link_qr_1(){\n\tSSRprotocol=`echo ${protocol} | sed 's/_compatible//g'`\n\tSSRobfs=`echo ${obfs} | sed 's/_compatible//g'`\n\tSSRPWDbase64=`echo -n \"${user_password}\" | base64 | sed ':a;N;s/\\n/ /g;ta' | sed 's/ //g'`\n\tSSRbase64=`echo -n \"${ip}:${user_port}:${SSRprotocol}:${method}:${SSRobfs}:${SSRPWDbase64}\" | base64 | sed ':a;N;s/\\n/ /g;ta' | sed 's/ //g'`\n\t#echo -e \"${user_port}\" && echo -e \"${user_password}\" && echo -e \"${SSRbase64}\"\n\tSSRurl=\"ssr://\"${SSRbase64}\n\tSSRQRcode=\"http://doub.pw/qr/qr.php?text=\"${SSRurl}\n\tssr_link=\"${Word_ssr_like} : ${Green_font_prefix}${SSRurl}${Font_color_suffix} \\n${Word_ssr_qr_code} : ${Green_font_prefix}${SSRQRcode}${Font_color_suffix} \\n \"\n}\n#显示用户账号信息\nviewUser(){\n\tSSR_install_status\n\tPID=`ps -ef |grep -v grep | grep server.py |awk '{print $2}'`\n\tif [[ -z \"${PID}\" ]]; then\n\t\tssr_status=\"${Red_font_prefix} ${Word_current_status}: ${Font_color_suffix} ShadowsocksR ${Word_not_running} !\"\n\telse\n\t\tssr_status=\"${Green_font_prefix} ${Word_current_status}: ${Font_color_suffix} ShadowsocksR ${Word_running} !\"\n\tfi\n\tgetIP\n\tnow_mode=`jq '.port_password' ${config_user_file}`\n\tif [[ \"${now_mode}\" = \"null\" ]]; then\n\t\tgetUser\n\t\tSSprotocol=`echo ${protocol} | awk -F \"_\" '{print $NF}'`\n\t\tSSobfs=`echo ${obfs} | awk -F \"_\" '{print $NF}'`\n\t\tif [[ ${protocol} = \"origin\" ]]; then\n\t\t\tif [[ ${obfs} = \"plain\" ]]; then\n\t\t\t\tss_link_qr\n\t\t\t\tssr_link=\"\"\n\t\t\telse\n\t\t\t\tif [[ ${SSobfs} != \"compatible\" ]]; then\n\t\t\t\t\tss_link=\"\"\n\t\t\t\telse\n\t\t\t\t\tss_link_qr\n\t\t\t\tfi\n\t\t\tfi\n\t\telse\n\t\t\tif [[ ${SSprotocol} != \"compatible\" ]]; then\n\t\t\t\tss_link=\"\"\n\t\t\telse\n\t\t\t\tif [[ ${SSobfs} != \"compatible\" ]]; then\n\t\t\t\t\tif [[ ${SSobfs} = \"plain\" ]]; then\n\t\t\t\t\t\tss_link_qr\n\t\t\t\t\telse\n\t\t\t\t\t\tss_link=\"\"\n\t\t\t\t\tfi\n\t\t\t\telse\n\t\t\t\t\tss_link_qr\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\t\tssr_link_qr\n\t\t[[ -z ${protocol_param} ]] && protocol_param=\"0(${Word_unlimited})\"\n\t\tclear\n\t\techo \"===================================================\"\n\t\techo\n\t\techo -e \" ${Prompt_your_account_configuration}\"\n\t\techo\n\t\techo -e \" I  P\\t    : ${Green_font_prefix}${ip}${Font_color_suffix}\"\n\t\techo -e \" ${Word_port}\\t    : ${Green_font_prefix}${port}${Font_color_suffix}\"\n\t\techo -e \" ${Word_pass}\\t    : ${Green_font_prefix}${password}${Font_color_suffix}\"\n\t\techo -e \" ${Word_method}\\t    : ${Green_font_prefix}${method}${Font_color_suffix}\"\n\t\techo -e \" ${Word_protocol}\\t    : ${Green_font_prefix}${protocol}${Font_color_suffix}\"\n\t\techo -e \" ${Word_obfs}\\t    : ${Green_font_prefix}${obfs}${Font_color_suffix}\"\n\t\techo -e \" ${Word_number_of_devices_limit} : ${Green_font_prefix}${protocol_param}${Font_color_suffix}\"\n\t\techo -e \" ${Word_number_of_devices_limit} : ${Green_font_prefix}${speed_limit_per_con} KB/S${Font_color_suffix}\"\n\t\techo -e \" ${Word_port_total_speed_limit} : ${Green_font_prefix}${speed_limit_per_user} KB/S${Font_color_suffix}\"\n\t\techo -e \"${ss_link}\"\n\t\techo -e \"${ssr_link}\"\n\t\techo -e \"${Prompt_tip}\"\n\t\techo\n\t\techo -e ${ssr_status}\n\t\techo\n\t\techo \"===================================================\"\n\telse\n\t\tgetUser\n\t\t[[ -z ${protocol_param} ]] && protocol_param=\"0(${Word_unlimited})\"\n\t\tclear\n\t\techo \"===================================================\"\n\t\techo\n\t\techo -e \" ${Prompt_your_account_configuration}\"\n\t\techo\n\t\techo -e \" I  P\\t    : ${Green_font_prefix}${ip}${Font_color_suffix}\"\n\t\techo -e \" ${Word_method}\\t    : ${Green_font_prefix}${method}${Font_color_suffix}\"\n\t\techo -e \" ${Word_protocol}\\t    : ${Green_font_prefix}${protocol}${Font_color_suffix}\"\n\t\techo -e \" ${Word_obfs}\\t    : ${Green_font_prefix}${obfs}${Font_color_suffix}\"\n\t\techo -e \" ${Word_number_of_devices_limit} : ${Green_font_prefix}${protocol_param}${Font_color_suffix}\"\n\t\techo -e \" ${Word_number_of_devices_limit} : ${Green_font_prefix}${speed_limit_per_con} KB/S${Font_color_suffix}\"\n\t\techo -e \" ${Word_port_total_speed_limit} : ${Green_font_prefix}${speed_limit_per_user} KB/S${Font_color_suffix}\"\n\t\techo\n\t\tuser_total=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | wc -l`\n\t\t[[ ${socat_total} = \"0\" ]] && echo -e \"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} 没有发现 多端口用户，请检查 !\" && exit 1\n\t\tuser_id=0\n\t\tcheck_sys\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tfor((integer = 1; integer <= ${user_total}; integer++))\n\t\t\tdo\n\t\t\t\tuser_port=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $1}' | sed -n \"${integer}p\" | perl -e 'while($_=<>){ /\\\"(.*)\\\"/; print $1;}'`\n\t\t\t\tuser_password=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $2}' | sed -n \"${integer}p\" | perl -e 'while($_=<>){ /\\\"(.*)\\\"/; print $1;}'`\n\t\t\t\tuser_id=$[$user_id+1]\n\t\t\t\t\t#echo -e ${user_port} && echo -e ${user_password} && echo -e ${user_id}\n\t\t\t\tSSprotocol=`echo ${protocol} | awk -F \"_\" '{print $NF}'`\n\t\t\t\tSSobfs=`echo ${obfs} | awk -F \"_\" '{print $NF}'`\n\t\t\t\tif [[ ${protocol} = \"origin\" ]]; then\n\t\t\t\t\tif [[ ${obfs} = \"plain\" ]]; then\n\t\t\t\t\t\tss_link_qr_1\n\t\t\t\t\t\tssr_link=\"\"\n\t\t\t\t\telse\n\t\t\t\t\t\tif [[ ${SSobfs} != \"compatible\" ]]; then\n\t\t\t\t\t\t\tss_link=\"\"\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tss_link_qr_1\n\t\t\t\t\t\tfi\n\t\t\t\t\tfi\n\t\t\t\telse\n\t\t\t\t\tif [[ ${SSprotocol} != \"compatible\" ]]; then\n\t\t\t\t\t\tss_link=\"\"\n\t\t\t\t\telse\n\t\t\t\t\t\tif [[ ${SSobfs} != \"compatible\" ]]; then\n\t\t\t\t\t\t\tif [[ ${SSobfs} = \"plain\" ]]; then\n\t\t\t\t\t\t\t\tss_link_qr_1\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tss_link=\"\"\n\t\t\t\t\t\t\tfi\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tss_link_qr_1\n\t\t\t\t\t\tfi\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\t\tssr_link_qr_1\n\t\t\t\techo -e \" ——————————${Green_font_prefix} ${Word_user} ${user_id} ${Font_color_suffix} ——————————\"\n\t\t\t\techo -e \" ${Word_port}\\t    : ${Green_font_prefix}${user_port}${Font_color_suffix}\"\n\t\t\t\techo -e \" ${Word_pass}\\t    : ${Green_font_prefix}${user_password}${Font_color_suffix}\"\n\t\t\t\techo -e \"${ss_link}\"\n\t\t\t\techo -e \"${ssr_link}\"\n\t\t\tdone\n\t\telse\n\t\t\tfor((integer = ${user_total}; integer >= 1; integer--))\n\t\t\tdo\n\t\t\t\tuser_port=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $1}' | sed -n \"${integer}p\" | perl -e 'while($_=<>){ /\\\"(.*)\\\"/; print $1;}'`\n\t\t\t\tuser_password=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $2}' | sed -n \"${integer}p\" | perl -e 'while($_=<>){ /\\\"(.*)\\\"/; print $1;}'`\n\t\t\t\tuser_id=$[$user_id+1]\t\n\t\t\t\n\t\t\t\tSSprotocol=`echo ${protocol} | awk -F \"_\" '{print $NF}'`\n\t\t\t\tSSobfs=`echo ${obfs} | awk -F \"_\" '{print $NF}'`\n\t\t\t\tif [[ ${protocol} = \"origin\" ]]; then\n\t\t\t\t\tif [[ ${obfs} = \"plain\" ]]; then\n\t\t\t\t\t\tss_link_qr_1\n\t\t\t\t\t\tssr_link=\"\"\n\t\t\t\t\telse\n\t\t\t\t\t\tif [[ ${SSobfs} != \"compatible\" ]]; then\n\t\t\t\t\t\t\tss_link=\"\"\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tss_link_qr_1\n\t\t\t\t\t\tfi\n\t\t\t\t\tfi\n\t\t\t\telse\n\t\t\t\t\tif [[ ${SSprotocol} != \"compatible\" ]]; then\n\t\t\t\t\t\tss_link=\"\"\n\t\t\t\t\telse\n\t\t\t\t\t\tif [[ ${SSobfs} != \"compatible\" ]]; then\n\t\t\t\t\t\t\tif [[ ${SSobfs} = \"plain\" ]]; then\n\t\t\t\t\t\t\t\tss_link_qr_1\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tss_link=\"\"\n\t\t\t\t\t\t\tfi\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tss_link_qr_1\n\t\t\t\t\t\tfi\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\t\tssr_link_qr_1\n\t\t\t\techo -e \" —————————— ${Green_font_prefix} ${Word_user} ${user_id} ${Font_color_suffix} ——————————\"\n\t\t\t\techo -e \" ${Word_port}\\t    : ${Green_font_prefix}${user_port}${Font_color_suffix}\"\n\t\t\t\techo -e \" ${Word_pass}\\t    : ${Green_font_prefix}${user_password}${Font_color_suffix}\"\n\t\t\t\techo -e \"${ss_link}\"\n\t\t\t\techo -e \"${ssr_link}\"\n\t\t\tdone\n\t\tfi\n\t\techo -e \"${Prompt_tip}\"\n\t\techo\n\t\techo -e ${ssr_status}\n\t\techo\n\t\techo \"===================================================\"\n\tfi\n}\ndebian_apt(){\n\tapt-get update\n\tapt-get install -y python-pip python-m2crypto curl unzip vim git gcc build-essential make\n}\ncentos_yum(){\n\tyum update\n\tyum install -y python-pip python-m2crypto curl unzip vim git gcc make\n}\nJQ_install(){\n\tJQ_ver=`jq -V`\n\tif [[ -z ${JQ_ver} ]]; then\n\t\t#wget --no-check-certificate -N \"https://softs.pw/Bash/other/jq-1.5.tar.gz\"\n\t\twget --no-check-certificate -N \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/other/jq-1.5.tar.gz\"\n\t\ttar -xzf jq-1.5.tar.gz && cd jq-1.5\n\t\t./configure --disable-maintainer-mode && make && make install\n\t\tldconfig\n\t\tcd .. && rm -rf jq-1.5.tar.gz && rm -rf jq-1.5\n\t\tJQ_ver=`jq -V`\n\t\t[[ -z ${JQ_ver} ]]&& echo -e \"${Error_jq_installation_failed}\" && exit 1\n\t\techo -e \"${Info_jq_installation_is_complete}\" \n\telse\n\t\techo -e \"${Info_jq_is_installed}\"\n\tfi\n}\nrc.local_ss_set(){\n#添加开机启动\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tchmod +x /etc/rc.d/rc.local\n\t\t#sed -i '/cd \\/etc\\/shadowsocksr\\/shadowsocks\\//d' /etc/rc.d/rc.local\n\t\t#sed -i '/nohup python server.py a >> ssserver.log 2>&1 &/d' /etc/rc.d/rc.local\n\t\tsed -i '/shadowsocksr/d' /etc/rc.d/rc.local\n\t\tsed -i '/python server.py/d' /etc/rc.d/rc.local\n\t\techo -e \"cd ${ssr_ss_file} && nohup python server.py a >> ssserver.log 2>&1 &\" >> /etc/rc.d/rc.local\n\telse\n\t\tchmod +x /etc/rc.local\n\t\tsed -i '$d' /etc/rc.local\n\t\t#sed -i '/cd \\/etc\\/shadowsocksr\\/shadowsocks\\//d' /etc/rc.local\n\t\t#sed -i '/nohup python server.py a >> ssserver.log 2>&1 &/d' /etc/rc.local\n\t\tsed -i '/shadowsocksr/d' /etc/rc.local\n\t\tsed -i '/python server.py/d' /etc/rc.local\n\t\techo -e \"cd ${ssr_ss_file} && nohup python server.py a >> ssserver.log 2>&1 &\" >> /etc/rc.local\n\t\techo -e \"exit 0\" >> /etc/rc.local\n\tfi\n}\nrc.local_ss_del(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\t#sed -i '/cd \\/etc\\/shadowsocksr\\/shadowsocks\\//d' /etc/rc.d/rc.local\n\t\t#sed -i '/nohup python server.py a >> ssserver.log 2>&1 &/d' /etc/rc.d/rc.local\n\t\tsed -i '/shadowsocksr/d' /etc/rc.d/rc.local\n\t\tsed -i '/python server.py/d' /etc/rc.d/rc.local\n\telse\n\t\t#sed -i '/cd \\/etc\\/shadowsocksr\\/shadowsocks\\//d' /etc/rc.local\n\t\t#sed -i '/nohup python server.py a >> ssserver.log 2>&1 &/d' /etc/rc.local\n\t\tsed -i '/shadowsocksr/d' /etc/rc.local\n\t\tsed -i '/python server.py/d' /etc/rc.local\n\tfi\n}\nrc.local_serverspeed_set(){\n#添加开机启动\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tchmod +x /etc/rc.d/rc.local\n\t\tsed -i '/serverspeeder/d' /etc/rc.d/rc.local\n\t\techo -e \"/serverspeeder/bin/serverSpeeder.sh start\" >> /etc/rc.d/rc.local\n\telse\n\t\tchmod +x /etc/rc.local\n\t\tsed -i '$d' /etc/rc.local\n\t\tsed -i '/serverspeeder/d' /etc/rc.local\n\t\techo -e \"/serverspeeder/bin/serverSpeeder.sh start\" >> /etc/rc.local\n\t\techo -e \"exit 0\" >> /etc/rc.local\n\tfi\n}\nrc.local_serverspeed_del(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tsed -i '/serverspeeder/d' /etc/rc.d/rc.local\n\telse\n\t\tsed -i '/serverspeeder/d' /etc/rc.local\n\tfi\n}\niptables_add(){\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${ssport} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${ssport} -j ACCEPT\n}\niptables_del(){\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n}\niptables_set(){\n\t#删除旧端口的防火墙规则，添加新端口的规则\n\tiptables_del\n\tiptables_add\n}\nset_config_port_pass(){\n\tsed -i 's/\"server_port\": '$(echo ${port})'/\"server_port\": '$(echo ${ssport})'/g' ${config_user_file}\n\tsed -i 's/\"password\": \"'$(echo ${password})'\"/\"password\": \"'$(echo ${sspwd})'\"/g' ${config_user_file}\n}\nset_config_method_obfs_protocol(){\n\tsed -i 's/\"method\": \"'$(echo ${method})'\"/\"method\": \"'$(echo ${ssmethod})'\"/g' ${config_user_file}\n\tsed -i 's/\"obfs\": \"'$(echo ${obfs})'\"/\"obfs\": \"'$(echo ${ssobfs})'\"/g' ${config_user_file}\n\tsed -i 's/\"protocol\": \"'$(echo ${protocol})'\"/\"protocol\": \"'$(echo ${ssprotocol})'\"/g' ${config_user_file}\n}\nset_config_protocol_param(){\n\tsed -i 's/\"protocol_param\": \"'$(echo ${protocol_param})'\"/\"protocol_param\": \"'$(echo ${ssprotocol_param})'\"/g' ${config_user_file}\n}\nset_config_speed_limit_per(){\n\tsed -i 's/\"speed_limit_per_con\": '$(echo ${speed_limit_per_con})'/\"speed_limit_per_con\": '$(echo ${ssspeed_limit_per_con})'/g' ${config_user_file}\n\tsed -i 's/\"speed_limit_per_user\": '$(echo ${speed_limit_per_user})'/\"speed_limit_per_user\": '$(echo ${ssspeed_limit_per_user})'/g' ${config_user_file}\n}\n#安装ShadowsocksR\ninstallSSR(){\n\t[[ -e $config_user_file ]] && echo -e \"${Error_ssr_installed}\" && exit 1\n\tsetUser\n\tcheck_sys\n\t# 系统判断\n\tif [[ ${release} = \"debian\" ]]; then\n\t\tdebian_apt\n\telif [[ ${release} = \"ubuntu\" ]]; then\n\t\tdebian_apt\n\telif [[ ${release} = \"centos\" ]]; then\n\t\tcentos_yum\n\telse\n\t\techo -e \"${Error_does_not_support_the_system}\" && exit 1\n\tfi\n\t#修改DNS为8.8.8.8\n\techo \"nameserver 8.8.8.8\" > /etc/resolv.conf\n\techo \"nameserver 8.8.4.4\" >> /etc/resolv.conf\n\tcp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\tJQ_install\n\tcd /etc\n\t#git config --global http.sslVerify false\n\tenv GIT_SSL_NO_VERIFY=true git clone -b manyuser https://github.com/shadowsocksr/shadowsocksr.git\n\t[[ ! -e ${config_file} ]] && echo -e \"${Error_ssr_download_failed}\" && exit 1\n\tcp ${config_file} ${config_user_file}\n\t#修改配置文件的密码 端口 加密方式\n\tcat > ${config_user_file}<<-EOF\n{\n    \"server\": \"0.0.0.0\",\n    \"server_ipv6\": \"::\",\n    \"server_port\": ${ssport},\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1080,\n    \"password\": \"${sspwd}\",\n    \"timeout\": 120,\n    \"udp_timeout\": 60,\n    \"method\": \"${ssmethod}\",\n    \"protocol\": \"${ssprotocol}\",\n    \"protocol_param\": \"${ssprotocol_param}\",\n    \"obfs\": \"${ssobfs}\",\n    \"obfs_param\": \"\",\n    \"speed_limit_per_con\": ${ssspeed_limit_per_con},\n    \"speed_limit_per_user\": ${ssspeed_limit_per_user},\n    \"dns_ipv6\": false,\n    \"connect_verbose_info\": 0,\n    \"redirect\": \"\",\n    \"fast_open\": false\n}\nEOF\n\n\t#添加新端口的规则\n\tiptables_add\n\trc.local_ss_set\n\t#启动SSR服务端，并判断是否启动成功\n\tcd ${ssr_ss_file}\n\tnohup python server.py a >> ssserver.log 2>&1 &\n\tsleep 2s\n\tPID=`ps -ef |grep -v grep | grep server.py |awk '{print $2}'`\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\tviewUser\n\t\techo\n\t\techo -e \"ShadowsocksR ${Word_the_installation_is_complete} !\"\n\t\techo -e \"https://doub.io/ss-jc42/\"\n\t\techo\n\t\techo \"############################################################\"\n\telse\n\t\techo -e \"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR ${Word_startup_failed} !\"\n\tfi\n}\ninstallLibsodium(){\n\t# 系统判断\n\tcheck_sys\n\tif [[ ${release}  != \"debian\" ]]; then\n\t\tif [[ ${release}  != \"ubuntu\" ]]; then\n\t\t\tif [[ ${release}  != \"centos\" ]]; then\n\t\t\t\techo -e \"${Error_does_not_support_the_system}\" && exit 1\n\t\t\tfi\n\t\tfi\n\tfi\n\tif [[ ${release} != \"centos\" ]]; then\n\t\tapt-get update && apt-get install -y gcc build-essential make\n\t\tcd /root\n\t\twget  --no-check-certificate -O libsodium.tar.gz https://github.com/jedisct1/libsodium/releases/download/${Libsodiumr_ver}/libsodium-${Libsodiumr_ver}.tar.gz\n\t\ttar -xzf libsodium.tar.gz && mv libsodium-${Libsodiumr_ver} libsodium && cd libsodium\n\t\t./configure --disable-maintainer-mode && make -j2 && make install\n\t\tldconfig\n\t\tcd .. && rm -rf libsodium.tar.gz && rm -rf libsodium\n\telse\n\t\tyum update && yum install epel-release -y && yum install libsodium -y\n\tfi\n\techo ${Separator_1} && echo\n\techo -e \"Libsodium ${Word_the_installation_is_complete} !\"\n\techo -e \"https://doub.io/ss-jc42/\"\n\techo && echo ${Separator_1}\n}\n#修改单端口用户配置\nmodifyUser(){\n\tSSR_install_status\n\tnow_mode=`jq '.port_password' ${config_user_file}`\n\t[[ \"${now_mode}\" != \"null\" ]] && echo -e \"${Error_the_current_mode_is_multi_port}\" && exit 1\n\tgetUser\n\tsetUser\n\t#修改配置文件的密码 ${Word_port} 加密方式\n\tset_config_port_pass\n\tset_config_method_obfs_protocol\n\tset_config_protocol_param\n\tset_config_speed_limit_per\n\tiptables_set\n\tRestartSSR\n}\n#手动修改用户配置\nmanuallyModifyUser(){\n\tSSR_install_status\n\tport=`jq '.server_port' ${config_user_file}`\n\tvi $config_user_file\n\tssport=`jq '.server_port' ${config_user_file}`\n\tiptables_set\n\tRestartSSR\n}\n#卸载ShadowsocksR\nUninstallSSR(){\n\t[[ ! -e $config_file ]] && echo -e \"${Error_not_install_ssr}\" && exit 1\n\techo \"${Info_uninstall_ssr}\"\n\techo\n\tstty erase '^H' && read -p \"(${Word_default}: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n#停止ShadowsocksR服务端并删除防火墙规则，删除Shadowsocks文件夹。\n\t\tPID=`ps -ef |grep -v grep | grep server.py |awk '{print $2}'`\n\t\t[[ ! -z \"${PID}\" ]] && kill -9 ${PID}\n\t\tcron_ssr=`crontab -l | grep \"${ssr_file}/${auto_restart_cron}\" | wc -l`\n\t\tif [[ ${cron_ssr} > \"0\" ]]; then\n\t\t\tcrontab -l > ${ssr_file}\"/crontab.bak\"\n\t\t\tsed -i \"/\\/etc\\/shadowsocksr\\/${auto_restart_cron}/d\" ${ssr_file}\"/crontab.bak\"\n\t\t\tcrontab ${ssr_file}\"/crontab.bak\"\n\t\t\trm -rf ${ssr_file}\"/crontab.bak\"\n\t\tfi\n\t\tnow_mode=`jq '.port_password' ${config_user_file}`\n\t\tif [[ \"${now_mode}\" = \"null\" ]]; then\n\t\t\tport=`jq '.server_port' ${config_user_file}`\n\t\t\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\t\t\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n\t\telse\n\t\t\tuser_total=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | wc -l`\n\t\t\tfor((integer = 1; integer <= ${user_total}; integer++))\n\t\t\tdo\n\t\t\t\tport=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $1}' | sed -n \"${integer}p\" | perl -e 'while($_=<>){ /\\\"(.*)\\\"/; print $1;}'`\n\t\t\t\tiptables_del\n\t\t\tdone\n\t\tfi\n#取消开机启动\n\t\tcheck_sys\n\t\trc.local_ss_del\n\t\trm -rf ${ssr_file} && rm -rf ${Libsodiumr_file} && rm -rf ${Libsodiumr_file}.tar.gz\n\t\techo && echo \"\tShadowsocksR ${Word_uninstall_is_complete} !\" && echo\n\telse\n\t\techo && echo \"${Word_uninstall_cancelled}\" && echo\n\tfi\n}\n# 更新ShadowsocksR\nUpdateSSR(){\n\tSSR_install_status\n\tcd ${ssr_file}\n\tgit pull\n\tRestartSSR\n}\n# 切换 单/多端口模式\nPort_mode_switching(){\n\tSSR_install_status\n\tnow_mode=`jq '.port_password' ${config_user_file}`\n\tif [[ \"${now_mode}\" = \"null\" ]]; then\n\t\techo\n\t\techo -e \"\t${Word_current_mode}: ${Green_font_prefix} ${Word_single_port} ${Font_color_suffix}\"\n\t\techo\n\t\techo -e \"${Info_switch_multi_port_mode}\"\n\t\techo\n\t\tstty erase '^H' && read -p \"(${Word_default}: n):\" mode_yn\n\t\t[[ -z ${mode_yn} ]] && mode_yn=\"n\"\n\t\tif [[ ${mode_yn} == [Yy] ]]; then\n\t\t\tport=`jq '.server_port' ${config_user_file}`\n\t\t\tsetUser\n\t\t\tiptables_set\n\t\t\tcat > ${config_user_file}<<-EOF\n{\n    \"server\": \"0.0.0.0\",\n    \"server_ipv6\": \"::\",\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1080,\n    \"port_password\":{\n        \"${ssport}\":\"${sspwd}\"\n    },\n    \"timeout\": 120,\n    \"udp_timeout\": 60,\n    \"method\": \"${ssmethod}\",\n    \"protocol\": \"${ssprotocol}\",\n    \"protocol_param\": \"${ssprotocol_param}\",\n    \"obfs\": \"${ssobfs}\",\n    \"obfs_param\": \"\",\n    \"speed_limit_per_con\": ${ssspeed_limit_per_con},\n    \"speed_limit_per_user\": ${ssspeed_limit_per_user},\n    \"dns_ipv6\": false,\n    \"connect_verbose_info\": 0,\n    \"redirect\": \"\",\n    \"fast_open\": false\n}\nEOF\n\t\t\tRestartSSR\n\t\telse\n\t\t\techo && echo \"\t${Word_canceled}\" && echo\n\t\tfi\n\telse\n\t\techo\n\t\techo -e \"\t${Word_current_mode}: ${Green_font_prefix} ${Word_multi_port} ${Font_color_suffix}\"\n\t\techo\n\t\techo -e \"${Info_switch_single_port_mode}\"\n\t\techo\n\t\tstty erase '^H' && read -p \"(${Word_default}: n):\" mode_yn\n\t\t[[ -z ${mode_yn} ]] && mode_yn=\"n\"\n\t\tif [[ ${mode_yn} == [Yy] ]]; then\n\t\t\tuser_total=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | wc -l`\n\t\t\tfor((integer = 1; integer <= ${user_total}; integer++))\n\t\t\tdo\n\t\t\t\tport=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $1}' | sed -n \"${integer}p\" | perl -e 'while($_=<>){ /\\\"(.*)\\\"/; print $1;}'`\n\t\t\t\tiptables_del\n\t\t\tdone\n\t\t\tsetUser\n\t\t\tiptables_add\n\t\tcat > ${config_user_file}<<-EOF\n{\n    \"server\": \"0.0.0.0\",\n    \"server_ipv6\": \"::\",\n    \"server_port\": ${ssport},\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1080,\n    \"password\": \"${sspwd}\",\n    \"timeout\": 120,\n    \"udp_timeout\": 60,\n    \"method\": \"${ssmethod}\",\n    \"protocol\": \"${ssprotocol}\",\n    \"protocol_param\": \"${ssprotocol_param}\",\n    \"obfs\": \"${ssobfs}\",\n    \"obfs_param\": \"\",\n    \"speed_limit_per_con\": ${ssspeed_limit_per_con},\n    \"speed_limit_per_user\": ${ssspeed_limit_per_user},\n    \"dns_ipv6\": false,\n    \"connect_verbose_info\": 0,\n    \"redirect\": \"\",\n    \"fast_open\": false\n}\nEOF\n\t\t\tRestartSSR\n\t\telse\n\t\t\techo && echo \"\t${Word_canceled}\" && echo\n\t\tfi\n\tfi\n}\nList_multi_port_user(){\n\tuser_total=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | wc -l`\n\t[[ ${socat_total} = \"0\" ]] && echo -e \"${Error_no_multi_port_users_were_found}\" && exit 1\n\tuser_list_all=\"\"\n\tuser_id=0\n\tcheck_sys\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tfor((integer = 1; integer <= ${user_total}; integer++))\n\t\tdo\n\t\t\tuser_port=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $1}' | sed -n \"${integer}p\" | perl -e 'while($_=<>){ /\\\"(.*)\\\"/; print $1;}'`\n\t\t\tuser_password=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $2}' | sed -n \"${integer}p\" | perl -e 'while($_=<>){ /\\\"(.*)\\\"/; print $1;}'`\n\t\t\tuser_id=$[$user_id+1]\n\t\t\tuser_list_all=${user_list_all}${user_id}\". ${Word_port}: \"${user_port}\" ${Word_pass}: \"${user_password}\"\\n\"\n\t\tdone\n\telse\n\t\tfor((integer = ${user_total}; integer >= 1; integer--))\n\t\tdo\n\t\t\tuser_port=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $1}' | sed -n \"${integer}p\" | perl -e 'while($_=<>){ /\\\"(.*)\\\"/; print $1;}'`\n\t\t\tuser_password=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $2}' | sed -n \"${integer}p\" | perl -e 'while($_=<>){ /\\\"(.*)\\\"/; print $1;}'`\n\t\t\tuser_id=$[$user_id+1]\n\t\t\tuser_list_all=${user_list_all}${user_id}\". ${Word_port}: \"${user_port}\" ${Word_pass}: \"${user_password}\"\\n\"\n\t\tdone\n\tfi\n\techo\n\techo -e \"${Prompt_total_number_of_users} ${Green_font_prefix} \"${user_total}\" ${Font_color_suffix} \"\n\techo -e ${user_list_all}\n}\n# 添加 多端口用户配置\nAdd_multi_port_user(){\n\tSSR_install_status\n\tnow_mode=`jq '.port_password' ${config_user_file}`\n\t[[ \"${now_mode}\" = \"null\" ]] && echo -e \"${Error_the_current_mode_is_single_port}\" && exit 1\n\tset_port_pass\n\tsed -i \"7 i \\\"        \\\"${ssport}\\\":\\\"${sspwd}\\\",\" ${config_user_file}\n\tsed -i \"7s/^\\\"//\" ${config_user_file}\n\tiptables_add\n\tRestartSSR\n\techo -e \"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} ${Prompt_add_multi_port_user} ${Green_font_prefix} [${Word_port}: ${ssport} , ${Word_pass}: ${sspwd}] ${Font_color_suffix} \"\n}\n# 修改 多端口用户配置\nModify_multi_port_user(){\n\tSSR_install_status\n\tnow_mode=`jq '.port_password' ${config_user_file}`\n\t[[ \"${now_mode}\" = \"null\" ]] && echo -e \"${Error_the_current_mode_is_single_port}\" && exit 1\n\techo -e \"${Info_input_modify_the_type}\"\n\tstty erase '^H' && read -p \"(${Word_default}: ${Word_cancel}):\" modify_type\n\t[[ -z \"${modify_type}\" ]] && exit 1\n\tif [[ ${modify_type} == \"1\" ]]; then\n\t\tList_multi_port_user\n\t\twhile true\n\t\tdo\n\t\techo -e \"${info_input_select_user_id_modified}\"\n\t\tstty erase '^H' && read -p \"(${Word_default}: ${Word_cancel}):\" del_user_num\n\t\t[[ -z \"${del_user_num}\" ]] && exit 1\n\t\texpr ${del_user_num} + 0 &>/dev/null\n\t\tif [ $? -eq 0 ]; then\n\t\t\tif [[ ${del_user_num} -ge 1 ]] && [[ ${del_user_num} -le ${user_total} ]]; then\n\t\t\t\tset_port_pass\n\t\t\t\tdel_user_num_3=$[ $del_user_num + 6]\n\t\t\t\tport=`sed -n \"${del_user_num_3}p\" ${config_user_file} | awk -F \":\" '{print $1}' | perl -e 'while($_=<>){ /\\\"(.*)\\\"/; print $1;}'`\n\t\t\t\tpassword=`sed -n \"${del_user_num_3}p\" ${config_user_file} | awk -F \":\" '{print $2}' | perl -e 'while($_=<>){ /\\\"(.*)\\\"/; print $1;}'`\n\t\t\t\tsed -i 's/\"'$(echo ${port})'\":\"'$(echo ${password})'\"/\"'$(echo ${ssport})'\":\"'$(echo ${sspwd})'\"/g' ${config_user_file}\n\t\t\t\tiptables_set\n\t\t\t\tRestartSSR\n\t\t\t\techo -e \"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} ${Prompt_modify_multi_port_user} ${Green_font_prefix} ${del_user_num} ${Font_color_suffix} \"\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"${Errpr_input_num_error}\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"${Errpr_input_num_error}\"\n\t\tfi\n\t\tdone\t\n\telif [[ ${modify_type} == \"2\" ]]; then\n\t\tset_others\n\t\tgetUser\n\t\tset_config_method_obfs_protocol\n\t\tset_config_protocol_param\n\t\tset_config_speed_limit_per\n\t\tRestartSSR\n\t\techo -e \"${Prompt_method_protocol_obfs_modified}\"\n\tfi\n}\n# 删除 多端口用户配置\nDel_multi_port_user(){\n\tSSR_install_status\n\tnow_mode=`jq '.port_password' ${config_user_file}`\n\t[[ \"${now_mode}\" = \"null\" ]] && echo -e \"${Error_the_current_mode_is_single_port}\" && exit 1\n\tList_multi_port_user\n\tuser_total=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | wc -l`\n\t[[ \"${user_total}\" -le \"1\" ]] && echo -e \"${Error_multi_port_user_remaining_one}\" && exit 1\n\twhile true\n\tdo\n\techo -e \"${Info_input_select_user_id_del}\"\n\tstty erase '^H' && read -p \"(${Word_default}: ${Word_cancel}):\" del_user_num\n\t[[ -z \"${del_user_num}\" ]] && exit 1\n\texpr ${del_user_num} + 0 &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${del_user_num} -ge 1 ]] && [[ ${del_user_num} -le ${user_total} ]]; then\n\t\t\tdel_user_num_4=$[ $del_user_num + 6]\n\t\t\tport=`sed -n \"${del_user_num_4}p\" ${config_user_file} | awk -F \":\" '{print $1}' | perl -e 'while($_=<>){ /\\\"(.*)\\\"/; print $1;}'`\n\t\t\tiptables_del\n\t\t\tdel_user_num_1=$[ $del_user_num + 6 ]\n\t\t\tsed -i \"${del_user_num_1}d\" ${config_user_file}\n\t\t\tif [[ ${del_user_num} = ${user_total} ]]; then\n\t\t\t\tdel_user_num_1=$[ $del_user_num_1 - 1 ]\n\t\t\t\tsed -i \"${del_user_num_1}s/,$//g\" ${config_user_file}\n\t\t\tfi\n\t\t\tRestartSSR\n\t\t\techo -e \"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} ${Prompt_del_multi_port_user} ${Green_font_prefix} ${del_user_num} ${Font_color_suffix} \"\n\t\t\tbreak\n\t\telse\n\t\t\techo \"${Errpr_input_num_error}\"\n\t\tfi\n\telse\n\t\techo \"${Errpr_input_num_error}\"\n\tfi\n\tdone\n}\n# 显示用户连接信息\nView_user_connection_info(){\n\tSSR_install_status\n\tcheck_sys\n\tif [[ ${release} = \"debian\" ]]; then\n\t\tdebian_View_user_connection_info\n\telif [[ ${release} = \"ubuntu\" ]]; then\n\t\tdebian_View_user_connection_info\n\telif [[ ${release} = \"centos\" ]]; then\n\t\tcentos_View_user_connection_info\n\tfi\n}\ndebian_View_user_connection_info(){\n\tnow_mode=`jq '.port_password' ${config_user_file}`\n\tif [[ \"${now_mode}\" = \"null\" ]]; then\n\t\tnow_mode=\"${Word_single_port}\" && user_total=\"1\"\n\t\tIP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |wc -l`\n\t\tuser_port=`jq '.server_port' ${config_user_file}`\n\t\tuser_IP=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep \"${user_port}\" |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u`\n\t\tuser_IP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep \"${user_port}\" |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |wc -l`\n\t\tuser_list_all=\"1. ${Word_port}: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}, ${Prompt_total_number_of_ip_number} ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}, ${Prompt_the_currently_connected_ip} ${Green_font_prefix}\"${user_IP}\"${Font_color_suffix}\\n\"\n\t\techo -e \"${Word_current_mode} ${Green_font_prefix} \"${now_mode}\" ${Font_color_suffix} 。\"\n\t\techo -e ${user_list_all}\n\telse\n\t\tnow_mode=\"${Word_multi_port}\" && user_total=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | wc -l`\n\t\tIP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |wc -l`\n\t\tuser_list_all=\"\"\n\t\tuser_id=0\n\t\tfor((integer = ${user_total}; integer >= 1; integer--))\n\t\tdo\n\t\t\tuser_port=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $1}' | sed -n \"${integer}p\" | perl -e 'while($_=<>){ /\\\"(.*)\\\"/; print $1;}'`\n\t\t\tuser_IP=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep \"${user_port}\" |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u`\n\t\t\tuser_IP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep \"${user_port}\" |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |wc -l`\n\t\t\tuser_id=$[$user_id+1]\n\t\t\tuser_list_all=${user_list_all}${user_id}\". ${Word_port}: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}, ${Prompt_total_number_of_ip_number} ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}, ${Prompt_the_currently_connected_ip} ${Green_font_prefix}\"${user_IP}\"${Font_color_suffix}\\n\"\n\t\tdone\n\t\techo -e \"${Word_current_mode} ${Green_font_prefix} \"${now_mode}\" ${Font_color_suffix} ，${Word_current_mode} ${Green_font_prefix} \"${user_total}\" ${Font_color_suffix} ，${Prompt_total_number_of_ip} ${Green_font_prefix} \"${IP_total}\" ${Font_color_suffix} \"\n\t\techo -e ${user_list_all}\n\tfi\n}\ncentos_View_user_connection_info(){\n\tnow_mode=`jq '.port_password' ${config_user_file}`\n\tif [[ \"${now_mode}\" = \"null\" ]]; then\n\t\tnow_mode=\"${Word_single_port}\" && user_total=\"1\"\n\t\tIP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' | grep '::ffff:' |awk '{print $4}' |sort -u |wc -l`\n\t\tuser_port=`jq '.server_port' ${config_user_file}`\n\t\tuser_IP=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' |grep \"${user_port}\" | grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u`\n\t\tuser_IP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' |grep \"${user_port}\" | grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u |wc -l`\n\t\tuser_list_all=\"1. ${Word_port}: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}, ${Prompt_total_number_of_ip_number} ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}, ${Prompt_the_currently_connected_ip} ${Green_font_prefix}\"${user_IP}\"${Font_color_suffix}\\n\"\n\t\techo -e \"${Word_current_mode} ${Green_font_prefix} \"${now_mode}\" ${Font_color_suffix} 。\"\n\t\techo -e ${user_list_all}\n\telse\n\t\tnow_mode=\"${Word_multi_port}\" && user_total=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | wc -l`\n\t\tIP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' | grep '::ffff:' |awk '{print $4}' |sort -u |wc -l`\n\t\tuser_list_all=\"\"\n\t\tuser_id=0\n\t\tfor((integer = 1; integer <= ${user_total}; integer++))\n\t\tdo\n\t\t\tuser_port=`jq '.port_password' ${config_user_file} | sed '$d' | sed \"1d\" | awk -F \":\" '{print $1}' | sed -n \"${integer}p\" | perl -e 'while($_=<>){ /\\\"(.*)\\\"/; print $1;}'`\n\t\t\tuser_IP=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' |grep \"${user_port}\" | grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u`\n\t\t\tuser_IP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' |grep \"${user_port}\" | grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u |wc -l`\n\t\t\tuser_id=$[$user_id+1]\n\t\t\tuser_list_all=${user_list_all}${user_id}\". ${Word_port}: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}, ${Prompt_total_number_of_ip_number} ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}, ${Prompt_the_currently_connected_ip} ${Green_font_prefix}\"${user_IP}\"${Font_color_suffix}\\n\"\n\t\tdone\n\t\techo -e \"${Word_current_mode} ${Green_font_prefix} \"${now_mode}\" ${Font_color_suffix} ，${Word_current_mode} ${Green_font_prefix} \"${user_total}\" ${Font_color_suffix} ，${Prompt_total_number_of_ip} ${Green_font_prefix} \"${IP_total}\" ${Font_color_suffix} \"\n\t\techo -e ${user_list_all}\n\tfi\n}\nSSR_start(){\n\tcd ${ssr_ss_file}\n\tnohup python server.py a > ssserver.log 2>&1 &\n\tsleep 2s\n\tPID=`ps -ef |grep -v grep | grep server.py |awk '{print $2}'`\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\tviewUser\n\t\techo ${Separator_1} && echo && echo -e \"\tShadowsocksR ${Word_has_started} !\" && echo && echo ${Separator_1}\n\telse\n\t\techo -e \"${Error_startup_failed}\"\n\tfi\n}\n#启动ShadowsocksR\nStartSSR(){\n\tSSR_install_status\n\tPID=`ps -ef |grep -v grep | grep server.py |awk '{print $2}'`\n\t[[ ! -z ${PID} ]] && echo -e \"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR ${Word_running} !\" && exit 1\n\tSSR_start\n}\n#停止ShadowsocksR\nStopSSR(){\n\tSSR_install_status\n\tPID=`ps -ef |grep -v grep | grep server.py |awk '{print $2}'`\n\t[[ -z $PID ]] && echo -e \"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR ${Word_not_running} !\" && exit 1\n\tkill -9 ${PID} && sleep 2s\n\tPID=`ps -ef |grep -v grep | grep server.py |awk '{print $2}'`\n\tif [[ -z \"${PID}\" ]]; then\n\t\techo ${Separator_1} && echo && echo -e \"\tShadowsocksR ${Word_stopped} !\" && echo && echo ${Separator_1}\n\telse\n\t\techo -e \"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR ${Word_stop_failing} !\"\n\tfi\n}\n#重启ShadowsocksR\nRestartSSR(){\n\tSSR_install_status\n\tPID=`ps -ef |grep -v grep | grep server.py |awk '{print $2}'`\n\t[[ ! -z \"${PID}\" ]] && kill -9 ${PID}\n\tSSR_start\n}\n#查看 ShadowsocksR 日志\nTailSSR(){\n\t[[ ! -e ${ssr_ss_file}\"/ssserver.log\" ]] && echo -e \"${Error_no_log_found}\" && exit 1\n\techo && echo -e \"${Prompt_log}\" && echo\n\ttail -f ${ssr_ss_file}\"/ssserver.log\"\n}\n#查看 ShadowsocksR 状态\nStatusSSR(){\n\tSSR_install_status\n\tPID=`ps -ef |grep -v grep | grep server.py |awk '{print $2}'`\n\tif [[ -z \"${PID}\" ]]; then\n\t\techo ${Separator_1} && echo && echo -e \"\tShadowsocksR ${Word_not_running} !\" && echo && echo ${Separator_1}\n\telse\n\t\techo ${Separator_1} && echo && echo -e \"\tShadowsocksR ${Word_running} (PID: ${PID}) !\" && echo && echo ${Separator_1}\n\tfi\n}\n#安装锐速\ninstallServerSpeeder(){\n\t[[ -e \"/serverspeeder\" ]] && echo -e \"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ${Word_serverspeeder} ${Word_installed} !\" && exit 1\n\tcd /root\n\t#借用91yun.rog的开心版锐速\n\twget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh\n\tbash serverspeeder-all.sh\n\tsleep 2s\n\tPID=`ps -ef |grep -v grep |grep \"serverspeeder\" |awk '{print $2}'`\n\tif [[ ! -z ${PID} ]]; then\n\t\tcheck_sys\n\t\trc.local_serverspeed_set\n\t\techo -e \"${Green_font_prefix} [${Word_info}] ${Font_color_suffix} ${Word_serverspeeder} ${Word_the_installation_is_complete} !\" && exit 1\n\telse\n\t\techo -e \"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ${Word_serverspeeder} ${Word_installation_failed} !\" && exit 1\n\tfi\n}\n#查看锐速状态\nStatusServerSpeeder(){\n\t[[ ! -e \"/serverspeeder\" ]] && echo -e \"${Error_server_speeder_not_installed}\" && exit 1\n\t/serverspeeder/bin/serverSpeeder.sh status\n}\n#停止锐速\nStopServerSpeeder(){\n\t[[ ! -e \"/serverspeeder\" ]] && echo -e \"${Error_server_speeder_not_installed}\" && exit 1\n\t/serverspeeder/bin/serverSpeeder.sh stop\n}\n#重启锐速\nRestartServerSpeeder(){\n\t[[ ! -e \"/serverspeeder\" ]] && echo -e \"${Error_server_speeder_not_installed}\" && exit 1\n\t/serverspeeder/bin/serverSpeeder.sh restart\n}\n#卸载锐速\nUninstallServerSpeeder(){\n\t[[ ! -e \"/serverspeeder\" ]] && echo -e \"${Error_server_speeder_not_installed}\" && exit 1\n\techo \"${Info_uninstall_server}\"\n\techo\n\tstty erase '^H' && read -p \"(${Word_default}: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\trm -rf /root/serverspeeder-all.sh\n\t\trm -rf /root/91yunserverspeeder\n\t\trm -rf /root/91yunserverspeeder.tar.gz\n\t\tcheck_sys\n\t\trc.local_serverspeed_del\n\t\tchattr -i /serverspeeder/etc/apx*\n\t\t/serverspeeder/bin/serverSpeeder.sh uninstall -f\n\t\techo && echo \"${Word_serverspeeder} ${Word_uninstall_is_complete} !\" && echo\n\telse\n\t\techo && echo \"${Word_uninstall_cancelled}\" && echo\n\tfi\n}\nBanBTPTSPAM(){\n\twget -4qO- raw.githubusercontent.com/ToyoDAdoubi/doubi/master/Get_Out_Spam.sh | bash\n}\nInstallBBR(){\n\techo -e \"${Info_install_bbr_0}\"\n\techo\n\techo \"${Info_install_bbr}\"\n\tstty erase '^H' && read -p \"(${Word_default}: ${Word_cancel}):\" unyn\n\t[[ -z ${unyn} ]] && echo \"${Word_canceled}\" && exit 1\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\twget -N --no-check-certificate https://softs.pw/Bash/bbr.sh && chmod +x bbr.sh && bash bbr.sh\n\tfi\n}\nSetCrontab_interval(){\n\techo -e \"${Info_set_crontab_interval_0}\"\n\techo \"${Info_input_set_crontab_interval}\"\n\tstty erase '^H' && read -p \"(${Word_default}: ${Info_input_set_crontab_interval_default} ):\" crontab_interval\n\t[[ -z \"${crontab_interval}\" ]] && crontab_interval=\"0 2 * * *\"\n\techo\n\techo \"——————————————————————————————\"\n\techo -e \"\t${Word_timing_interval} : ${Red_font_prefix} ${crontab_interval} ${Font_color_suffix}\"\n\techo \"——————————————————————————————\"\n\techo\n}\nSetCrontab(){\n\tSSR_install_status\n\tcheck_sys\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tcorn_status=`service crond status`\n\telse\n\t\tcorn_status=`service cron status`\n\tfi\n\tif [[ -z ${corn_status} ]]; then\n\t\techo -e \"${Info_no_cron_installed}\"\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tyum update && yum install crond -y\n\t\telse\n\t\t\tapt-get update && apt-get install cron -y\n\t\tfi\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tcorn_status=`service crond status`\n\t\telse\n\t\t\tcorn_status=`service cron status`\n\t\tfi\n\t\t[[ -z ${corn_status} ]] && echo -e \"${Error_cron_installation_failed}\" && exit 1\n\tfi\n\techo -e \"${Info_input_set_cron}\"\n\techo\n\tstty erase '^H' && read -p \"(${Word_default} :${Word_cancel}):\" setcron_select\n\t[[ -z \"${setcron_select}\" ]] && exit 1\n\tif [[ ${setcron_select} != \"1\" ]]; then\n\t\tif [[ ${setcron_select} != \"2\" ]]; then\n\t\t\texit 1\n\t\tfi\n\tfi\n\tcron_ssr=`crontab -l | grep \"${ssr_file}/${auto_restart_cron}\" | wc -l`\n\tif [[ ${cron_ssr} > \"0\" ]]; then\n\t\tcrontab -l > ${ssr_file}\"/crontab.bak\"\n\t\tsed -i \"/\\/etc\\/shadowsocksr\\/${auto_restart_cron}/d\" ${ssr_file}\"/crontab.bak\"\n\t\tcrontab ${ssr_file}\"/crontab.bak\"\n\t\trm -rf ${ssr_file}\"/crontab.bak\"\n\t\tcron_ssr=`crontab -l | grep \"${ssr_file}/${auto_restart_cron}\" | wc -l`\n\t\tif [[ ${cron_ssr} > \"0\" ]]; then\n\t\t\techo -e \"${Error_set_corn_del_failed}\" && exit 1\n\t\tfi\n\telse\n\t\tif [[ ${setcron_select} == \"2\" ]]; then\n\t\t\techo -e \"${Info_set_corn_status}\" && exit 1\n\t\tfi\n\tfi\n\tif [[ ${setcron_select} == \"2\" ]]; then\n\t\techo -e \"${Info_set_corn_del_success}\" && exit 1\n\tfi\n\tSetCrontab_interval\n\tcat > ${ssr_file}\"/\"${auto_restart_cron}<<-EOF\n#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\nserver_ss_file=\"/etc/shadowsocksr/shadowsocks/\"\nserver_file=${server_ss_file}\"server.py\"\nconfig_user_file=\"/etc/shadowsocksr/user-config.json\"\n\n[ ! -e $config_user_file ] && exit 1\nPID=`ps -ef |grep -v grep | grep server.py |awk '{print $2}'`\n[ ! -z \"${PID}\" ] && kill -9 ${PID}\ncd ${server_ss_file}\nnohup python server.py a >> ssserver.log 2>&1 &\nsleep 2s\nPID=`ps -ef |grep -v grep | grep server.py |awk '{print $2}'`\nif [ ! -z \"${PID}\" ]; then\n\techo -e \"\tShadowsocksR 重启完成 !\"\nelse\n\techo -e \"${Red_font_prefix} [${Word_error}] ${Font_color_suffix} ShadowsocksR 启动失败 !\"\nfi\nEOF\n\tif [[ -s ${ssr_file}\"/\"${auto_restart_cron} ]]; then\n\t\tchmod +x ${ssr_file}\"/\"${auto_restart_cron}\n\t\tcrontab -l > ${ssr_file}\"/crontab.bak\"\n\t\techo \"${crontab_interval} /bin/bash ${ssr_file}/${auto_restart_cron}\" >> ${ssr_file}\"/crontab.bak\"\n\t\tcrontab ${ssr_file}\"/crontab.bak\"\n\t\trm -rf ${ssr_file}\"/crontab.bak\"\n\t\tcron_ssr=`crontab -l | grep \"${ssr_file}/${auto_restart_cron}\" | wc -l`\n\t\tif [[ ${cron_ssr} > \"0\" ]]; then\n\t\t\tcp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\t\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\t\tservice crond restart\n\t\t\telse\n\t\t\t\tservice cron restart\n\t\t\tfi\n\t\t\techo -e \"${Info_set_corn_add_success}\"\n\t\telse\n\t\t\techo -e \"${Error_set_corn_add_failed}\" && exit 1\n\t\tfi\n\t\t\n\telse\n\t\trm -rf ${ssr_file}\"/\"${auto_restart_cron}\n\t\techo -e \"${Error_set_corn_Write_failed}\"\n\tfi\n}\n# 设置设备数\nClient_limit(){\n\tSSR_install_status\n\tgetUser\n\tif [[ ${protocol} != \"origin\" ]]; then\n\t\tprotocol_1=`echo ${protocol} | sed 's/_compatible//g'`\n\t\tif [[ ${protocol} == ${protocol_1} ]]; then\n\t\t\twhile true\n\t\t\tdo\n\t\t\techo\n\t\t\techo -e \"${Info_input_number_of_devices}\"\n\t\t\techo -e \"${Prompt_number_of_devices}\"\n\t\t\tstty erase '^H' && read -p \"(${Word_default}: ${Word_unlimited}):\" ssprotocol_param\n\t\t\t[[ -z \"$ssprotocol_param\" ]] && ssprotocol_param=\"\" && break\n\t\t\texpr ${ssprotocol_param} + 0 &>/dev/null\n\t\t\tif [[ $? -eq 0 ]]; then\n\t\t\t\tif [[ ${ssprotocol_param} -ge 1 ]] && [[ ${ssprotocol_param} -le 99999 ]]; then\n\t\t\t\t\techo && echo ${Separator_1} && echo -e \"\t${Word_number_of_devices} : ${Green_font_prefix}${ssprotocol_param}${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\t\t\tbreak\n\t\t\t\telse\n\t\t\t\t\techo \"${Errpr_input_num_error}\"\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\techo \"${Errpr_input_num_error}\"\n\t\t\tfi\n\t\t\tdone\n\t\telse\n\t\t\techo -e \"${Error_limit_the_number_of_devices_1}\" && exit 1\n\t\tfi\n\telse\n\t\techo -e \"${Error_limit_the_number_of_devices_2}\" && exit 1\n\tfi\n\tset_config_protocol_param\n\tRestartSSR\n\techo -e \"${Info_limit_the_number_of_devices}\"\n}\nSpeed_limit(){\n\tSSR_install_status\n\t# 设置单线程限速\n\twhile true\n\tdo\n\techo\n\techo -e \"${Info_input_single_threaded_speed_limit}\"\n\techo -e \"${Prompt_input_single_threaded_speed_limit}\"\n\tstty erase '^H' && read -p \"(${Word_default}: ${Word_unlimited}):\" ssspeed_limit_per_con\n\t[[ -z \"$ssspeed_limit_per_con\" ]] && ssspeed_limit_per_con=0 && break\n\texpr ${ssspeed_limit_per_con} + 0 &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${ssspeed_limit_per_con} -ge 1 ]] && [[ ${ssspeed_limit_per_con} -le 99999 ]]; then\n\t\t\techo && echo ${Separator_1} && echo -e \"\t${Word_single_threaded_speed_limit} : ${Green_font_prefix}${ssspeed_limit_per_con} KB/S ${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo \"${Errpr_input_num_error}\"\n\t\tfi\n\telse\n\t\techo \"${Errpr_input_num_error}\"\n\tfi\n\tdone\n\t# 设置端口总限速\n\twhile true\n\tdo\n\techo\n\techo -e \"${Info_total_port_speed_limit}\"\n\techo -e \"${Prompt_total_port_speed_limit}\"\n\tstty erase '^H' && read -p \"(${Word_default}: ${Word_unlimited}):\" ssspeed_limit_per_user\n\t[[ -z \"$ssspeed_limit_per_user\" ]] && ssspeed_limit_per_user=0 && break\n\texpr ${ssspeed_limit_per_user} + 0 &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${ssspeed_limit_per_user} -ge 1 ]] && [[ ${ssspeed_limit_per_user} -le 99999 ]]; then\n\t\t\techo && echo ${Separator_1} && echo -e \"\t${Word_port_total_speed_limit} : ${Green_font_prefix}${ssspeed_limit_per_user} KB/S ${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo \"${Errpr_input_num_error}\"\n\t\tfi\n\telse\n\t\techo \"${Errpr_input_num_error}\"\n\tfi\n\tdone\n\tgetUser\n\tset_config_speed_limit_per\n\tRestartSSR\n\techo -e \"${Info_port_speed_limit}\"\n}\nSwitch_language(){\n\tif [[ ! -e \"${PWD}/lang_en\" ]]; then\n\t\techo -e \"${Prompt_switch_language_english}\"\n\t\techo && echo -e \"${Info_switch_language_english}\"\n\t\tstty erase '^H' && read -p \"(${Word_default}: ${Word_cancel}):\" unyn\n\t\t[[ -z ${unyn} ]] && echo \"${Word_canceled}\" && exit 1\n\t\tif [[ ${unyn} == [Yy] ]]; then\n\t\t\techo \"lang_en\" > \"${PWD}/lang_en\"\n\t\t\techo -e \"${Info_switch_language_1}\" && exit 1\n\t\tfi\n\telse\n\t\techo -e \"${Prompt_switch_language_chinese}\"\n\t\techo && echo -e \"${Info_switch_language_chinese}\"\n\t\tstty erase '^H' && read -p \"(${Word_default}: ${Word_cancel}):\" unyn\n\t\t[[ -z ${unyn} ]] && echo \"${Word_canceled}\" && exit 1\n\t\tif [[ ${unyn} == [Yy] ]]; then\n\t\t\trm -rf \"${PWD}/lang_en\"\n\t\t\techo -e \"${Info_switch_language_1}\" && exit 1\n\t\tfi\n\tfi\n}\nLanguage\n#菜单判断\necho\necho && echo \"${Menu_prompt_1}\" && echo\necho -e \"${Menu_options}\"\ncheck_sys\n[[ ${release} != \"centos\" ]] && echo -e \"${Menu_options_bbr}\"\necho -e \"${Menu_options_other}\"\nif [[ -e $config_user_file ]]; then\n\tPID=`ps -ef |grep -v grep | grep server.py |awk '{print $2}'`\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\techo -e \"${Menu_status_1}\"\n\telse\n\t\techo -e \"${Menu_status_2}\"\n\tfi\n\tnow_mode_1=`jq '.port_password' ${config_user_file}`\n\tif [[ \"${now_mode_1}\" = \"null\" ]]; then\n\t\techo -e \"${Menu_mode_1}\"\n\telse\n\t\techo -e \"${Menu_mode_2}\"\n\tfi\nelse\n\techo -e \"${Menu_status_3}\"\nfi\necho\nstty erase '^H' && read -p \"${Menu_prompt_2}\" num\n\ncase \"$num\" in\n\t1)\n\tinstallSSR\n\t;;\n\t2)\n\tinstallLibsodium\n\t;;\n\t3)\n\tviewUser\n\t;;\n\t4)\n\tView_user_connection_info\n\t;;\n\t5)\n\tmodifyUser\n\t;;\n\t6)\n\tmanuallyModifyUser\n\t;;\n\t7)\n\tUninstallSSR\n\t;;\n\t8)\n\tUpdateSSR\n\t;;\n\t9)\n\tPort_mode_switching\n\t;;\n\t10)\n\tAdd_multi_port_user\n\t;;\n\t11)\n\tModify_multi_port_user\n\t;;\n\t12)\n\tDel_multi_port_user\n\t;;\n\t13)\n\tStartSSR\n\t;;\n\t14)\n\tStopSSR\n\t;;\n\t15)\n\tRestartSSR\n\t;;\n\t16)\n\tStatusSSR\n\t;;\n\t17)\n\tTailSSR\n\t;;\n\t18)\n\tinstallServerSpeeder\n\t;;\n\t19)\n\tStopServerSpeeder\n\t;;\n\t20)\n\tRestartServerSpeeder\n\t;;\n\t21)\n\tStatusServerSpeeder\n\t;;\n\t22)\n\tUninstallServerSpeeder\n\t;;\n\t23)\n\tInstallBBR\n\t;;\n\t24)\n\tBanBTPTSPAM\n\t;;\n\t25)\n\tSetCrontab\n\t;;\n\t26)\n\tClient_limit\n\t;;\n\t27)\n\tSpeed_limit\n\t;;\n\t0)\n\tSwitch_language\n\t;;\n\t*)\n\techo \"${Menu_prompt_3}\"\n\t;;\nesac"
        },
        {
          "name": "ssrmu.sh",
          "type": "blob",
          "size": 76.904296875,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS 6+/Debian 6+/Ubuntu 14.04+\n#\tDescription: Install the ShadowsocksR mudbjson server\n#\tVersion: 1.0.26\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/ss-jc60/\n#=================================================\n\nsh_ver=\"1.0.26\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\nssr_folder=\"/usr/local/shadowsocksr\"\nconfig_file=\"${ssr_folder}/config.json\"\nconfig_user_file=\"${ssr_folder}/user-config.json\"\nconfig_user_api_file=\"${ssr_folder}/userapiconfig.py\"\nconfig_user_mudb_file=\"${ssr_folder}/mudb.json\"\nssr_log_file=\"${ssr_folder}/ssserver.log\"\nLibsodiumr_file=\"/usr/local/lib/libsodium.so\"\nLibsodiumr_ver_backup=\"1.0.15\"\nServer_Speeder_file=\"/serverspeeder/bin/serverSpeeder.sh\"\nLotServer_file=\"/appex/bin/serverSpeeder.sh\"\nBBR_file=\"${file}/bbr.sh\"\njq_file=\"${ssr_folder}/jq\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\nSeparator_1=\"——————————————————————————————\"\n\ncheck_root(){\n\t[[ $EUID != 0 ]] && echo -e \"${Error} 当前账号非ROOT(或没有ROOT权限)，无法继续操作，请使用${Green_background_prefix} sudo su ${Font_color_suffix}来获取临时ROOT权限（执行后会提示输入当前账号的密码）。\" && exit 1\n}\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_pid(){\n\tPID=`ps -ef |grep -v grep | grep server.py |awk '{print $2}'`\n}\ncheck_crontab(){\n\t[[ ! -e \"/usr/bin/crontab\" ]] && echo -e \"${Error} 缺少依赖 Crontab ，请尝试手动安装 CentOS: yum install crond -y , Debian/Ubuntu: apt-get install cron -y !\" && exit 1\n}\nSSR_installation_status(){\n\t[[ ! -e ${ssr_folder} ]] && echo -e \"${Error} 没有发现 ShadowsocksR 文件夹，请检查 !\" && exit 1\n}\nServer_Speeder_installation_status(){\n\t[[ ! -e ${Server_Speeder_file} ]] && echo -e \"${Error} 没有安装 锐速(Server Speeder)，请检查 !\" && exit 1\n}\nLotServer_installation_status(){\n\t[[ ! -e ${LotServer_file} ]] && echo -e \"${Error} 没有安装 LotServer，请检查 !\" && exit 1\n}\nBBR_installation_status(){\n\tif [[ ! -e ${BBR_file} ]]; then\n\t\techo -e \"${Error} 没有发现 BBR脚本，开始下载...\"\n\t\tcd \"${file}\"\n\t\tif ! wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/bbr.sh; then\n\t\t\techo -e \"${Error} BBR 脚本下载失败 !\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} BBR 脚本下载完成 !\"\n\t\t\tchmod +x bbr.sh\n\t\tfi\n\tfi\n}\n# 设置 防火墙规则\nAdd_iptables(){\n\tif [[ ! -z \"${ssr_port}\" ]]; then\n\t\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${ssr_port} -j ACCEPT\n\t\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${ssr_port} -j ACCEPT\n\t\tip6tables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${ssr_port} -j ACCEPT\n\t\tip6tables -I INPUT -m state --state NEW -m udp -p udp --dport ${ssr_port} -j ACCEPT\n\tfi\n}\nDel_iptables(){\n\tif [[ ! -z \"${port}\" ]]; then\n\t\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\t\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n\t\tip6tables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\t\tip6tables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n\tfi\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tservice ip6tables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\tip6tables-save > /etc/ip6tables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tservice ip6tables save\n\t\tchkconfig --level 2345 iptables on\n\t\tchkconfig --level 2345 ip6tables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\tip6tables-save > /etc/ip6tables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules\\n/sbin/ip6tables-restore < /etc/ip6tables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\n# 读取 配置信息\nGet_IP(){\n\tip=$(wget -qO- -t1 -T2 ipinfo.io/ip)\n\tif [[ -z \"${ip}\" ]]; then\n\t\tip=$(wget -qO- -t1 -T2 api.ip.sb/ip)\n\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\tip=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\t\tip=\"VPS_IP\"\n\t\t\tfi\n\t\tfi\n\tfi\n}\nGet_User_info(){\n\tGet_user_port=$1\n\tuser_info_get=$(python mujson_mgr.py -l -p \"${Get_user_port}\")\n\tmatch_info=$(echo \"${user_info_get}\"|grep -w \"### user \")\n\tif [[ -z \"${match_info}\" ]]; then\n\t\techo -e \"${Error} 用户信息获取失败 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} \" && exit 1\n\tfi\n\tuser_name=$(echo \"${user_info_get}\"|grep -w \"user :\"|awk -F \"user : \" '{print $NF}')\n\tport=$(echo \"${user_info_get}\"|grep -w \"port :\"|sed 's/[[:space:]]//g'|awk -F \":\" '{print $NF}')\n\tpassword=$(echo \"${user_info_get}\"|grep -w \"passwd :\"|awk -F \"passwd : \" '{print $NF}')\n\tmethod=$(echo \"${user_info_get}\"|grep -w \"method :\"|sed 's/[[:space:]]//g'|awk -F \":\" '{print $NF}')\n\tprotocol=$(echo \"${user_info_get}\"|grep -w \"protocol :\"|sed 's/[[:space:]]//g'|awk -F \":\" '{print $NF}')\n\tprotocol_param=$(echo \"${user_info_get}\"|grep -w \"protocol_param :\"|sed 's/[[:space:]]//g'|awk -F \":\" '{print $NF}')\n\t[[ -z ${protocol_param} ]] && protocol_param=\"0(无限)\"\n\tobfs=$(echo \"${user_info_get}\"|grep -w \"obfs :\"|sed 's/[[:space:]]//g'|awk -F \":\" '{print $NF}')\n\t#transfer_enable=$(echo \"${user_info_get}\"|grep -w \"transfer_enable :\"|sed 's/[[:space:]]//g'|awk -F \":\" '{print $NF}'|awk -F \"ytes\" '{print $1}'|sed 's/KB/ KB/;s/MB/ MB/;s/GB/ GB/;s/TB/ TB/;s/PB/ PB/')\n\t#u=$(echo \"${user_info_get}\"|grep -w \"u :\"|sed 's/[[:space:]]//g'|awk -F \":\" '{print $NF}')\n\t#d=$(echo \"${user_info_get}\"|grep -w \"d :\"|sed 's/[[:space:]]//g'|awk -F \":\" '{print $NF}')\n\tforbidden_port=$(echo \"${user_info_get}\"|grep -w \"forbidden_port :\"|sed 's/[[:space:]]//g'|awk -F \":\" '{print $NF}')\n\t[[ -z ${forbidden_port} ]] && forbidden_port=\"无限制\"\n\tspeed_limit_per_con=$(echo \"${user_info_get}\"|grep -w \"speed_limit_per_con :\"|sed 's/[[:space:]]//g'|awk -F \":\" '{print $NF}')\n\tspeed_limit_per_user=$(echo \"${user_info_get}\"|grep -w \"speed_limit_per_user :\"|sed 's/[[:space:]]//g'|awk -F \":\" '{print $NF}')\n\tGet_User_transfer \"${port}\"\n}\nGet_User_transfer(){\n\ttransfer_port=$1\n\t#echo \"transfer_port=${transfer_port}\"\n\tall_port=$(${jq_file} '.[]|.port' ${config_user_mudb_file})\n\t#echo \"all_port=${all_port}\"\n\tport_num=$(echo \"${all_port}\"|grep -nw \"${transfer_port}\"|awk -F \":\" '{print $1}')\n\t#echo \"port_num=${port_num}\"\n\tport_num_1=$(echo $((${port_num}-1)))\n\t#echo \"port_num_1=${port_num_1}\"\n\ttransfer_enable_1=$(${jq_file} \".[${port_num_1}].transfer_enable\" ${config_user_mudb_file})\n\t#echo \"transfer_enable_1=${transfer_enable_1}\"\n\tu_1=$(${jq_file} \".[${port_num_1}].u\" ${config_user_mudb_file})\n\t#echo \"u_1=${u_1}\"\n\td_1=$(${jq_file} \".[${port_num_1}].d\" ${config_user_mudb_file})\n\t#echo \"d_1=${d_1}\"\n\ttransfer_enable_Used_2_1=$(echo $((${u_1}+${d_1})))\n\t#echo \"transfer_enable_Used_2_1=${transfer_enable_Used_2_1}\"\n\ttransfer_enable_Used_1=$(echo $((${transfer_enable_1}-${transfer_enable_Used_2_1})))\n\t#echo \"transfer_enable_Used_1=${transfer_enable_Used_1}\"\n\t\n\tif [[ ${transfer_enable_1} -lt 1024 ]]; then\n\t\ttransfer_enable=\"${transfer_enable_1} B\"\n\telif [[ ${transfer_enable_1} -lt 1048576 ]]; then\n\t\ttransfer_enable=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_1}'/'1024'}')\n\t\ttransfer_enable=\"${transfer_enable} KB\"\n\telif [[ ${transfer_enable_1} -lt 1073741824 ]]; then\n\t\ttransfer_enable=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_1}'/'1048576'}')\n\t\ttransfer_enable=\"${transfer_enable} MB\"\n\telif [[ ${transfer_enable_1} -lt 1099511627776 ]]; then\n\t\ttransfer_enable=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_1}'/'1073741824'}')\n\t\ttransfer_enable=\"${transfer_enable} GB\"\n\telif [[ ${transfer_enable_1} -lt 1125899906842624 ]]; then\n\t\ttransfer_enable=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_1}'/'1099511627776'}')\n\t\ttransfer_enable=\"${transfer_enable} TB\"\n\tfi\n\t#echo \"transfer_enable=${transfer_enable}\"\n\tif [[ ${u_1} -lt 1024 ]]; then\n\t\tu=\"${u_1} B\"\n\telif [[ ${u_1} -lt 1048576 ]]; then\n\t\tu=$(awk 'BEGIN{printf \"%.2f\\n\",'${u_1}'/'1024'}')\n\t\tu=\"${u} KB\"\n\telif [[ ${u_1} -lt 1073741824 ]]; then\n\t\tu=$(awk 'BEGIN{printf \"%.2f\\n\",'${u_1}'/'1048576'}')\n\t\tu=\"${u} MB\"\n\telif [[ ${u_1} -lt 1099511627776 ]]; then\n\t\tu=$(awk 'BEGIN{printf \"%.2f\\n\",'${u_1}'/'1073741824'}')\n\t\tu=\"${u} GB\"\n\telif [[ ${u_1} -lt 1125899906842624 ]]; then\n\t\tu=$(awk 'BEGIN{printf \"%.2f\\n\",'${u_1}'/'1099511627776'}')\n\t\tu=\"${u} TB\"\n\tfi\n\t#echo \"u=${u}\"\n\tif [[ ${d_1} -lt 1024 ]]; then\n\t\td=\"${d_1} B\"\n\telif [[ ${d_1} -lt 1048576 ]]; then\n\t\td=$(awk 'BEGIN{printf \"%.2f\\n\",'${d_1}'/'1024'}')\n\t\td=\"${d} KB\"\n\telif [[ ${d_1} -lt 1073741824 ]]; then\n\t\td=$(awk 'BEGIN{printf \"%.2f\\n\",'${d_1}'/'1048576'}')\n\t\td=\"${d} MB\"\n\telif [[ ${d_1} -lt 1099511627776 ]]; then\n\t\td=$(awk 'BEGIN{printf \"%.2f\\n\",'${d_1}'/'1073741824'}')\n\t\td=\"${d} GB\"\n\telif [[ ${d_1} -lt 1125899906842624 ]]; then\n\t\td=$(awk 'BEGIN{printf \"%.2f\\n\",'${d_1}'/'1099511627776'}')\n\t\td=\"${d} TB\"\n\tfi\n\t#echo \"d=${d}\"\n\tif [[ ${transfer_enable_Used_1} -lt 1024 ]]; then\n\t\ttransfer_enable_Used=\"${transfer_enable_Used_1} B\"\n\telif [[ ${transfer_enable_Used_1} -lt 1048576 ]]; then\n\t\ttransfer_enable_Used=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_Used_1}'/'1024'}')\n\t\ttransfer_enable_Used=\"${transfer_enable_Used} KB\"\n\telif [[ ${transfer_enable_Used_1} -lt 1073741824 ]]; then\n\t\ttransfer_enable_Used=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_Used_1}'/'1048576'}')\n\t\ttransfer_enable_Used=\"${transfer_enable_Used} MB\"\n\telif [[ ${transfer_enable_Used_1} -lt 1099511627776 ]]; then\n\t\ttransfer_enable_Used=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_Used_1}'/'1073741824'}')\n\t\ttransfer_enable_Used=\"${transfer_enable_Used} GB\"\n\telif [[ ${transfer_enable_Used_1} -lt 1125899906842624 ]]; then\n\t\ttransfer_enable_Used=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_Used_1}'/'1099511627776'}')\n\t\ttransfer_enable_Used=\"${transfer_enable_Used} TB\"\n\tfi\n\t#echo \"transfer_enable_Used=${transfer_enable_Used}\"\n\tif [[ ${transfer_enable_Used_2_1} -lt 1024 ]]; then\n\t\ttransfer_enable_Used_2=\"${transfer_enable_Used_2_1} B\"\n\telif [[ ${transfer_enable_Used_2_1} -lt 1048576 ]]; then\n\t\ttransfer_enable_Used_2=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_Used_2_1}'/'1024'}')\n\t\ttransfer_enable_Used_2=\"${transfer_enable_Used_2} KB\"\n\telif [[ ${transfer_enable_Used_2_1} -lt 1073741824 ]]; then\n\t\ttransfer_enable_Used_2=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_Used_2_1}'/'1048576'}')\n\t\ttransfer_enable_Used_2=\"${transfer_enable_Used_2} MB\"\n\telif [[ ${transfer_enable_Used_2_1} -lt 1099511627776 ]]; then\n\t\ttransfer_enable_Used_2=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_Used_2_1}'/'1073741824'}')\n\t\ttransfer_enable_Used_2=\"${transfer_enable_Used_2} GB\"\n\telif [[ ${transfer_enable_Used_2_1} -lt 1125899906842624 ]]; then\n\t\ttransfer_enable_Used_2=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_Used_2_1}'/'1099511627776'}')\n\t\ttransfer_enable_Used_2=\"${transfer_enable_Used_2} TB\"\n\tfi\n\t#echo \"transfer_enable_Used_2=${transfer_enable_Used_2}\"\n}\nGet_User_transfer_all(){\n\tif [[ ${transfer_enable_Used_233} -lt 1024 ]]; then\n\t\ttransfer_enable_Used_233_2=\"${transfer_enable_Used_233} B\"\n\telif [[ ${transfer_enable_Used_233} -lt 1048576 ]]; then\n\t\ttransfer_enable_Used_233_2=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_Used_233}'/'1024'}')\n\t\ttransfer_enable_Used_233_2=\"${transfer_enable_Used_233_2} KB\"\n\telif [[ ${transfer_enable_Used_233} -lt 1073741824 ]]; then\n\t\ttransfer_enable_Used_233_2=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_Used_233}'/'1048576'}')\n\t\ttransfer_enable_Used_233_2=\"${transfer_enable_Used_233_2} MB\"\n\telif [[ ${transfer_enable_Used_233} -lt 1099511627776 ]]; then\n\t\ttransfer_enable_Used_233_2=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_Used_233}'/'1073741824'}')\n\t\ttransfer_enable_Used_233_2=\"${transfer_enable_Used_233_2} GB\"\n\telif [[ ${transfer_enable_Used_233} -lt 1125899906842624 ]]; then\n\t\ttransfer_enable_Used_233_2=$(awk 'BEGIN{printf \"%.2f\\n\",'${transfer_enable_Used_233}'/'1099511627776'}')\n\t\ttransfer_enable_Used_233_2=\"${transfer_enable_Used_233_2} TB\"\n\tfi\n}\nurlsafe_base64(){\n\tdate=$(echo -n \"$1\"|base64|sed ':a;N;s/\\n/ /g;ta'|sed 's/ //g;s/=//g;s/+/-/g;s/\\//_/g')\n\techo -e \"${date}\"\n}\nss_link_qr(){\n\tSSbase64=$(urlsafe_base64 \"${method}:${password}@${ip}:${port}\")\n\tSSurl=\"ss://${SSbase64}\"\n\tSSQRcode=\"http://doub.pw/qr/qr.php?text=${SSurl}\"\n\tss_link=\" SS    链接 : ${Green_font_prefix}${SSurl}${Font_color_suffix} \\n SS  二维码 : ${Green_font_prefix}${SSQRcode}${Font_color_suffix}\"\n}\nssr_link_qr(){\n\tSSRprotocol=$(echo ${protocol} | sed 's/_compatible//g')\n\tSSRobfs=$(echo ${obfs} | sed 's/_compatible//g')\n\tSSRPWDbase64=$(urlsafe_base64 \"${password}\")\n\tSSRbase64=$(urlsafe_base64 \"${ip}:${port}:${SSRprotocol}:${method}:${SSRobfs}:${SSRPWDbase64}\")\n\tSSRurl=\"ssr://${SSRbase64}\"\n\tSSRQRcode=\"http://doub.pw/qr/qr.php?text=${SSRurl}\"\n\tssr_link=\" SSR   链接 : ${Red_font_prefix}${SSRurl}${Font_color_suffix} \\n SSR 二维码 : ${Red_font_prefix}${SSRQRcode}${Font_color_suffix} \\n \"\n}\nss_ssr_determine(){\n\tprotocol_suffix=`echo ${protocol} | awk -F \"_\" '{print $NF}'`\n\tobfs_suffix=`echo ${obfs} | awk -F \"_\" '{print $NF}'`\n\tif [[ ${protocol} = \"origin\" ]]; then\n\t\tif [[ ${obfs} = \"plain\" ]]; then\n\t\t\tss_link_qr\n\t\t\tssr_link=\"\"\n\t\telse\n\t\t\tif [[ ${obfs_suffix} != \"compatible\" ]]; then\n\t\t\t\tss_link=\"\"\n\t\t\telse\n\t\t\t\tss_link_qr\n\t\t\tfi\n\t\tfi\n\telse\n\t\tif [[ ${protocol_suffix} != \"compatible\" ]]; then\n\t\t\tss_link=\"\"\n\t\telse\n\t\t\tif [[ ${obfs_suffix} != \"compatible\" ]]; then\n\t\t\t\tif [[ ${obfs_suffix} = \"plain\" ]]; then\n\t\t\t\t\tss_link_qr\n\t\t\t\telse\n\t\t\t\t\tss_link=\"\"\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\tss_link_qr\n\t\t\tfi\n\t\tfi\n\tfi\n\tssr_link_qr\n}\n# 显示 配置信息\nView_User(){\n\tSSR_installation_status\n\tList_port_user\n\twhile true\n\tdo\n\t\techo -e \"请输入要查看账号信息的用户 端口\"\n\t\tread -e -p \"(默认: 取消):\" View_user_port\n\t\t[[ -z \"${View_user_port}\" ]] && echo -e \"已取消...\" && exit 1\n\t\tView_user=$(cat \"${config_user_mudb_file}\"|grep '\"port\": '\"${View_user_port}\"',')\n\t\tif [[ ! -z ${View_user} ]]; then\n\t\t\tGet_User_info \"${View_user_port}\"\n\t\t\tView_User_info\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的端口 !\"\n\t\tfi\n\tdone\n}\nView_User_info(){\n\tip=$(cat ${config_user_api_file}|grep \"SERVER_PUB_ADDR = \"|awk -F \"[']\" '{print $2}')\n\t[[ -z \"${ip}\" ]] && Get_IP\n\tss_ssr_determine\n\tclear && echo \"===================================================\" && echo\n\techo -e \" 用户 [${user_name}] 的配置信息：\" && echo\n\techo -e \" I  P\\t    : ${Green_font_prefix}${ip}${Font_color_suffix}\"\n\techo -e \" 端口\\t    : ${Green_font_prefix}${port}${Font_color_suffix}\"\n\techo -e \" 密码\\t    : ${Green_font_prefix}${password}${Font_color_suffix}\"\n\techo -e \" 加密\\t    : ${Green_font_prefix}${method}${Font_color_suffix}\"\n\techo -e \" 协议\\t    : ${Red_font_prefix}${protocol}${Font_color_suffix}\"\n\techo -e \" 混淆\\t    : ${Red_font_prefix}${obfs}${Font_color_suffix}\"\n\techo -e \" 设备数限制 : ${Green_font_prefix}${protocol_param}${Font_color_suffix}\"\n\techo -e \" 单线程限速 : ${Green_font_prefix}${speed_limit_per_con} KB/S${Font_color_suffix}\"\n\techo -e \" 用户总限速 : ${Green_font_prefix}${speed_limit_per_user} KB/S${Font_color_suffix}\"\n\techo -e \" 禁止的端口 : ${Green_font_prefix}${forbidden_port} ${Font_color_suffix}\"\n\techo\n\techo -e \" 已使用流量 : 上传: ${Green_font_prefix}${u}${Font_color_suffix} + 下载: ${Green_font_prefix}${d}${Font_color_suffix} = ${Green_font_prefix}${transfer_enable_Used_2}${Font_color_suffix}\"\n\techo -e \" 剩余的流量 : ${Green_font_prefix}${transfer_enable_Used} ${Font_color_suffix}\"\n\techo -e \" 用户总流量 : ${Green_font_prefix}${transfer_enable} ${Font_color_suffix}\"\n\techo -e \"${ss_link}\"\n\techo -e \"${ssr_link}\"\n\techo -e \" ${Green_font_prefix} 提示: ${Font_color_suffix}\n 在浏览器中，打开二维码链接，就可以看到二维码图片。\n 协议和混淆后面的[ _compatible ]，指的是 兼容原版协议/混淆。\"\n\techo && echo \"===================================================\"\n}\n# 设置 配置信息\nSet_config_user(){\n\techo \"请输入要设置的用户 用户名(请勿重复, 用于区分, 不支持中文、空格, 会报错 !)\"\n\tread -e -p \"(默认: doubi):\" ssr_user\n\t[[ -z \"${ssr_user}\" ]] && ssr_user=\"doubi\"\n\tssr_user=$(echo \"${ssr_user}\"|sed 's/ //g')\n\techo && echo ${Separator_1} && echo -e \"\t用户名 : ${Green_font_prefix}${ssr_user}${Font_color_suffix}\" && echo ${Separator_1} && echo\n}\nSet_config_port(){\n\twhile true\n\tdo\n\techo -e \"请输入要设置的用户 端口(请勿重复, 用于区分)\"\n\tread -e -p \"(默认: 2333):\" ssr_port\n\t[[ -z \"$ssr_port\" ]] && ssr_port=\"2333\"\n\techo $((${ssr_port}+0)) &>/dev/null\n\tif [[ $? == 0 ]]; then\n\t\tif [[ ${ssr_port} -ge 1 ]] && [[ ${ssr_port} -le 65535 ]]; then\n\t\t\techo && echo ${Separator_1} && echo -e \"\t端口 : ${Green_font_prefix}${ssr_port}${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字(1-65535)\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-65535)\"\n\tfi\n\tdone\n}\nSet_config_password(){\n\techo \"请输入要设置的用户 密码\"\n\tread -e -p \"(默认: doub.io):\" ssr_password\n\t[[ -z \"${ssr_password}\" ]] && ssr_password=\"doub.io\"\n\techo && echo ${Separator_1} && echo -e \"\t密码 : ${Green_font_prefix}${ssr_password}${Font_color_suffix}\" && echo ${Separator_1} && echo\n}\nSet_config_method(){\n\techo -e \"请选择要设置的用户 加密方式\n\t\n ${Green_font_prefix} 1.${Font_color_suffix} none\n ${Tip} 如果使用 auth_chain_* 系列协议，建议加密方式选择 none (该系列协议自带 RC4 加密)，混淆随意\n \n ${Green_font_prefix} 2.${Font_color_suffix} rc4\n ${Green_font_prefix} 3.${Font_color_suffix} rc4-md5\n ${Green_font_prefix} 4.${Font_color_suffix} rc4-md5-6\n \n ${Green_font_prefix} 5.${Font_color_suffix} aes-128-ctr\n ${Green_font_prefix} 6.${Font_color_suffix} aes-192-ctr\n ${Green_font_prefix} 7.${Font_color_suffix} aes-256-ctr\n \n ${Green_font_prefix} 8.${Font_color_suffix} aes-128-cfb\n ${Green_font_prefix} 9.${Font_color_suffix} aes-192-cfb\n ${Green_font_prefix}10.${Font_color_suffix} aes-256-cfb\n \n ${Green_font_prefix}11.${Font_color_suffix} aes-128-cfb8\n ${Green_font_prefix}12.${Font_color_suffix} aes-192-cfb8\n ${Green_font_prefix}13.${Font_color_suffix} aes-256-cfb8\n \n ${Green_font_prefix}14.${Font_color_suffix} salsa20\n ${Green_font_prefix}15.${Font_color_suffix} chacha20\n ${Green_font_prefix}16.${Font_color_suffix} chacha20-ietf\n ${Tip} salsa20/chacha20-*系列加密方式，需要额外安装依赖 libsodium ，否则会无法启动ShadowsocksR !\" && echo\n\tread -e -p \"(默认: 5. aes-128-ctr):\" ssr_method\n\t[[ -z \"${ssr_method}\" ]] && ssr_method=\"5\"\n\tif [[ ${ssr_method} == \"1\" ]]; then\n\t\tssr_method=\"none\"\n\telif [[ ${ssr_method} == \"2\" ]]; then\n\t\tssr_method=\"rc4\"\n\telif [[ ${ssr_method} == \"3\" ]]; then\n\t\tssr_method=\"rc4-md5\"\n\telif [[ ${ssr_method} == \"4\" ]]; then\n\t\tssr_method=\"rc4-md5-6\"\n\telif [[ ${ssr_method} == \"5\" ]]; then\n\t\tssr_method=\"aes-128-ctr\"\n\telif [[ ${ssr_method} == \"6\" ]]; then\n\t\tssr_method=\"aes-192-ctr\"\n\telif [[ ${ssr_method} == \"7\" ]]; then\n\t\tssr_method=\"aes-256-ctr\"\n\telif [[ ${ssr_method} == \"8\" ]]; then\n\t\tssr_method=\"aes-128-cfb\"\n\telif [[ ${ssr_method} == \"9\" ]]; then\n\t\tssr_method=\"aes-192-cfb\"\n\telif [[ ${ssr_method} == \"10\" ]]; then\n\t\tssr_method=\"aes-256-cfb\"\n\telif [[ ${ssr_method} == \"11\" ]]; then\n\t\tssr_method=\"aes-128-cfb8\"\n\telif [[ ${ssr_method} == \"12\" ]]; then\n\t\tssr_method=\"aes-192-cfb8\"\n\telif [[ ${ssr_method} == \"13\" ]]; then\n\t\tssr_method=\"aes-256-cfb8\"\n\telif [[ ${ssr_method} == \"14\" ]]; then\n\t\tssr_method=\"salsa20\"\n\telif [[ ${ssr_method} == \"15\" ]]; then\n\t\tssr_method=\"chacha20\"\n\telif [[ ${ssr_method} == \"16\" ]]; then\n\t\tssr_method=\"chacha20-ietf\"\n\telse\n\t\tssr_method=\"aes-128-ctr\"\n\tfi\n\techo && echo ${Separator_1} && echo -e \"\t加密 : ${Green_font_prefix}${ssr_method}${Font_color_suffix}\" && echo ${Separator_1} && echo\n}\nSet_config_protocol(){\n\techo -e \"请选择要设置的用户 协议插件\n\t\n ${Green_font_prefix}1.${Font_color_suffix} origin\n ${Green_font_prefix}2.${Font_color_suffix} auth_sha1_v4\n ${Green_font_prefix}3.${Font_color_suffix} auth_aes128_md5\n ${Green_font_prefix}4.${Font_color_suffix} auth_aes128_sha1\n ${Green_font_prefix}5.${Font_color_suffix} auth_chain_a\n ${Green_font_prefix}6.${Font_color_suffix} auth_chain_b\n ${Tip} 如果使用 auth_chain_* 系列协议，建议加密方式选择 none (该系列协议自带 RC4 加密)，混淆随意\" && echo\n\tread -e -p \"(默认: 3. auth_aes128_md5):\" ssr_protocol\n\t[[ -z \"${ssr_protocol}\" ]] && ssr_protocol=\"3\"\n\tif [[ ${ssr_protocol} == \"1\" ]]; then\n\t\tssr_protocol=\"origin\"\n\telif [[ ${ssr_protocol} == \"2\" ]]; then\n\t\tssr_protocol=\"auth_sha1_v4\"\n\telif [[ ${ssr_protocol} == \"3\" ]]; then\n\t\tssr_protocol=\"auth_aes128_md5\"\n\telif [[ ${ssr_protocol} == \"4\" ]]; then\n\t\tssr_protocol=\"auth_aes128_sha1\"\n\telif [[ ${ssr_protocol} == \"5\" ]]; then\n\t\tssr_protocol=\"auth_chain_a\"\n\telif [[ ${ssr_protocol} == \"6\" ]]; then\n\t\tssr_protocol=\"auth_chain_b\"\n\telse\n\t\tssr_protocol=\"auth_aes128_md5\"\n\tfi\n\techo && echo ${Separator_1} && echo -e \"\t协议 : ${Green_font_prefix}${ssr_protocol}${Font_color_suffix}\" && echo ${Separator_1} && echo\n\tif [[ ${ssr_protocol} != \"origin\" ]]; then\n\t\tif [[ ${ssr_protocol} == \"auth_sha1_v4\" ]]; then\n\t\t\tread -e -p \"是否设置 协议插件兼容原版(_compatible)？[Y/n]\" ssr_protocol_yn\n\t\t\t[[ -z \"${ssr_protocol_yn}\" ]] && ssr_protocol_yn=\"y\"\n\t\t\t[[ $ssr_protocol_yn == [Yy] ]] && ssr_protocol=${ssr_protocol}\"_compatible\"\n\t\t\techo\n\t\tfi\n\tfi\n}\nSet_config_obfs(){\n\techo -e \"请选择要设置的用户 混淆插件\n\t\n ${Green_font_prefix}1.${Font_color_suffix} plain\n ${Green_font_prefix}2.${Font_color_suffix} http_simple\n ${Green_font_prefix}3.${Font_color_suffix} http_post\n ${Green_font_prefix}4.${Font_color_suffix} random_head\n ${Green_font_prefix}5.${Font_color_suffix} tls1.2_ticket_auth\n ${Tip} 如果使用 ShadowsocksR 代理游戏，建议选择 混淆兼容原版或 plain 混淆，然后客户端选择 plain，否则会增加延迟 !\n 另外, 如果你选择了 tls1.2_ticket_auth，那么客户端可以选择 tls1.2_ticket_fastauth，这样即能伪装又不会增加延迟 !\n 如果你是在日本、美国等热门地区搭建，那么选择 plain 混淆可能被墙几率更低 !\" && echo\n\tread -e -p \"(默认: 1. plain):\" ssr_obfs\n\t[[ -z \"${ssr_obfs}\" ]] && ssr_obfs=\"1\"\n\tif [[ ${ssr_obfs} == \"1\" ]]; then\n\t\tssr_obfs=\"plain\"\n\telif [[ ${ssr_obfs} == \"2\" ]]; then\n\t\tssr_obfs=\"http_simple\"\n\telif [[ ${ssr_obfs} == \"3\" ]]; then\n\t\tssr_obfs=\"http_post\"\n\telif [[ ${ssr_obfs} == \"4\" ]]; then\n\t\tssr_obfs=\"random_head\"\n\telif [[ ${ssr_obfs} == \"5\" ]]; then\n\t\tssr_obfs=\"tls1.2_ticket_auth\"\n\telse\n\t\tssr_obfs=\"plain\"\n\tfi\n\techo && echo ${Separator_1} && echo -e \"\t混淆 : ${Green_font_prefix}${ssr_obfs}${Font_color_suffix}\" && echo ${Separator_1} && echo\n\tif [[ ${ssr_obfs} != \"plain\" ]]; then\n\t\t\tread -e -p \"是否设置 混淆插件兼容原版(_compatible)？[Y/n]\" ssr_obfs_yn\n\t\t\t[[ -z \"${ssr_obfs_yn}\" ]] && ssr_obfs_yn=\"y\"\n\t\t\t[[ $ssr_obfs_yn == [Yy] ]] && ssr_obfs=${ssr_obfs}\"_compatible\"\n\t\t\techo\n\tfi\n}\nSet_config_protocol_param(){\n\twhile true\n\tdo\n\techo -e \"请输入要设置的用户 欲限制的设备数 (${Green_font_prefix} auth_* 系列协议 不兼容原版才有效 ${Font_color_suffix})\"\n\techo -e \"${Tip} 设备数限制：每个端口同一时间能链接的客户端数量(多端口模式，每个端口都是独立计算)，建议最少 2个。\"\n\tread -e -p \"(默认: 无限):\" ssr_protocol_param\n\t[[ -z \"$ssr_protocol_param\" ]] && ssr_protocol_param=\"\" && echo && break\n\techo $((${ssr_protocol_param}+0)) &>/dev/null\n\tif [[ $? == 0 ]]; then\n\t\tif [[ ${ssr_protocol_param} -ge 1 ]] && [[ ${ssr_protocol_param} -le 9999 ]]; then\n\t\t\techo && echo ${Separator_1} && echo -e \"\t设备数限制 : ${Green_font_prefix}${ssr_protocol_param}${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字(1-9999)\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-9999)\"\n\tfi\n\tdone\n}\nSet_config_speed_limit_per_con(){\n\twhile true\n\tdo\n\techo -e \"请输入要设置的用户 单线程 限速上限(单位：KB/S)\"\n\techo -e \"${Tip} 单线程限速：每个端口 单线程的限速上限，多线程即无效。\"\n\tread -e -p \"(默认: 无限):\" ssr_speed_limit_per_con\n\t[[ -z \"$ssr_speed_limit_per_con\" ]] && ssr_speed_limit_per_con=0 && echo && break\n\techo $((${ssr_speed_limit_per_con}+0)) &>/dev/null\n\tif [[ $? == 0 ]]; then\n\t\tif [[ ${ssr_speed_limit_per_con} -ge 1 ]] && [[ ${ssr_speed_limit_per_con} -le 131072 ]]; then\n\t\t\techo && echo ${Separator_1} && echo -e \"\t单线程限速 : ${Green_font_prefix}${ssr_speed_limit_per_con} KB/S${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字(1-131072)\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-131072)\"\n\tfi\n\tdone\n}\nSet_config_speed_limit_per_user(){\n\twhile true\n\tdo\n\techo\n\techo -e \"请输入要设置的用户 总速度 限速上限(单位：KB/S)\"\n\techo -e \"${Tip} 端口总限速：每个端口 总速度 限速上限，单个端口整体限速。\"\n\tread -e -p \"(默认: 无限):\" ssr_speed_limit_per_user\n\t[[ -z \"$ssr_speed_limit_per_user\" ]] && ssr_speed_limit_per_user=0 && echo && break\n\techo $((${ssr_speed_limit_per_user}+0)) &>/dev/null\n\tif [[ $? == 0 ]]; then\n\t\tif [[ ${ssr_speed_limit_per_user} -ge 1 ]] && [[ ${ssr_speed_limit_per_user} -le 131072 ]]; then\n\t\t\techo && echo ${Separator_1} && echo -e \"\t用户总限速 : ${Green_font_prefix}${ssr_speed_limit_per_user} KB/S${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字(1-131072)\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-131072)\"\n\tfi\n\tdone\n}\nSet_config_transfer(){\n\twhile true\n\tdo\n\techo\n\techo -e \"请输入要设置的用户 可使用的总流量上限(单位: GB, 1-838868 GB)\"\n\tread -e -p \"(默认: 无限):\" ssr_transfer\n\t[[ -z \"$ssr_transfer\" ]] && ssr_transfer=\"838868\" && echo && break\n\techo $((${ssr_transfer}+0)) &>/dev/null\n\tif [[ $? == 0 ]]; then\n\t\tif [[ ${ssr_transfer} -ge 1 ]] && [[ ${ssr_transfer} -le 838868 ]]; then\n\t\t\techo && echo ${Separator_1} && echo -e \"\t用户总流量 : ${Green_font_prefix}${ssr_transfer} GB${Font_color_suffix}\" && echo ${Separator_1} && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字(1-838868)\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-838868)\"\n\tfi\n\tdone\n}\nSet_config_forbid(){\n\techo \"请输入要设置的用户 禁止访问的端口\"\n\techo -e \"${Tip} 禁止的端口：例如不允许访问 25端口，用户就无法通过SSR代理访问 邮件端口25了，如果禁止了 80,443 那么用户将无法正常访问 http/https 网站。\n封禁单个端口格式: 25\n封禁多个端口格式: 23,465\n封禁  端口段格式: 233-266\n封禁多种格式端口: 25,465,233-666 (不带冒号:)\"\n\tread -e -p \"(默认为空 不禁止访问任何端口):\" ssr_forbid\n\t[[ -z \"${ssr_forbid}\" ]] && ssr_forbid=\"\"\n\techo && echo ${Separator_1} && echo -e \"\t禁止的端口 : ${Green_font_prefix}${ssr_forbid}${Font_color_suffix}\" && echo ${Separator_1} && echo\n}\nSet_config_enable(){\n\tuser_total=$(echo $((${user_total}-1)))\n\tfor((integer = 0; integer <= ${user_total}; integer++))\n\tdo\n\t\techo -e \"integer=${integer}\"\n\t\tport_jq=$(${jq_file} \".[${integer}].port\" \"${config_user_mudb_file}\")\n\t\techo -e \"port_jq=${port_jq}\"\n\t\tif [[ \"${ssr_port}\" == \"${port_jq}\" ]]; then\n\t\t\tenable=$(${jq_file} \".[${integer}].enable\" \"${config_user_mudb_file}\")\n\t\t\techo -e \"enable=${enable}\"\n\t\t\t[[ \"${enable}\" == \"null\" ]] && echo -e \"${Error} 获取当前端口[${ssr_port}]的禁用状态失败 !\" && exit 1\n\t\t\tssr_port_num=$(cat \"${config_user_mudb_file}\"|grep -n '\"port\": '${ssr_port}','|awk -F \":\" '{print $1}')\n\t\t\techo -e \"ssr_port_num=${ssr_port_num}\"\n\t\t\t[[ \"${ssr_port_num}\" == \"null\" ]] && echo -e \"${Error} 获取当前端口[${ssr_port}]的行数失败 !\" && exit 1\n\t\t\tssr_enable_num=$(echo $((${ssr_port_num}-5)))\n\t\t\techo -e \"ssr_enable_num=${ssr_enable_num}\"\n\t\t\tbreak\n\t\tfi\n\tdone\n\tif [[ \"${enable}\" == \"1\" ]]; then\n\t\techo -e \"端口 [${ssr_port}] 的账号状态为：${Green_font_prefix}启用${Font_color_suffix} , 是否切换为 ${Red_font_prefix}禁用${Font_color_suffix} ?[Y/n]\"\n\t\tread -e -p \"(默认: Y):\" ssr_enable_yn\n\t\t[[ -z \"${ssr_enable_yn}\" ]] && ssr_enable_yn=\"y\"\n\t\tif [[ \"${ssr_enable_yn}\" == [Yy] ]]; then\n\t\t\tssr_enable=\"0\"\n\t\telse\n\t\t\techo \"取消...\" && exit 0\n\t\tfi\n\telif [[ \"${enable}\" == \"0\" ]]; then\n\t\techo -e \"端口 [${ssr_port}] 的账号状态为：${Green_font_prefix}禁用${Font_color_suffix} , 是否切换为 ${Red_font_prefix}启用${Font_color_suffix} ?[Y/n]\"\n\t\tread -e -p \"(默认: Y):\" ssr_enable_yn\n\t\t[[ -z \"${ssr_enable_yn}\" ]] && ssr_enable_yn = \"y\"\n\t\tif [[ \"${ssr_enable_yn}\" == [Yy] ]]; then\n\t\t\tssr_enable=\"1\"\n\t\telse\n\t\t\techo \"取消...\" && exit 0\n\t\tfi\n\telse\n\t\techo -e \"${Error} 当前端口的禁用状态异常[${enable}] !\" && exit 1\n\tfi\n}\nSet_user_api_server_pub_addr(){\n\taddr=$1\n\tif [[ \"${addr}\" == \"Modify\" ]]; then\n\t\tserver_pub_addr=$(cat ${config_user_api_file}|grep \"SERVER_PUB_ADDR = \"|awk -F \"[']\" '{print $2}')\n\t\tif [[ -z ${server_pub_addr} ]]; then\n\t\t\techo -e \"${Error} 获取当前配置的 服务器IP或域名失败！\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} 当前配置的服务器IP或域名为： ${Green_font_prefix}${server_pub_addr}${Font_color_suffix}\"\n\t\tfi\n\tfi\n\techo \"请输入用户配置中要显示的 服务器IP或域名 (当服务器有多个IP时，可以指定用户配置中显示的IP或者域名)\"\n\tread -e -p \"(默认自动检测外网IP):\" ssr_server_pub_addr\n\tif [[ -z \"${ssr_server_pub_addr}\" ]]; then\n\t\tGet_IP\n\t\tif [[ ${ip} == \"VPS_IP\" ]]; then\n\t\t\twhile true\n\t\t\tdo\n\t\t\tread -e -p \"${Error} 自动检测外网IP失败，请手动输入服务器IP或域名\" ssr_server_pub_addr\n\t\t\tif [[ -z \"$ssr_server_pub_addr\" ]]; then\n\t\t\t\techo -e \"${Error} 不能为空！\"\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\tdone\n\t\telse\n\t\t\tssr_server_pub_addr=\"${ip}\"\n\t\tfi\n\tfi\n\techo && echo ${Separator_1} && echo -e \"\tIP或域名 : ${Green_font_prefix}${ssr_server_pub_addr}${Font_color_suffix}\" && echo ${Separator_1} && echo\n}\nSet_config_all(){\n\tlal=$1\n\tif [[ \"${lal}\" == \"Modify\" ]]; then\n\t\tSet_config_password\n\t\tSet_config_method\n\t\tSet_config_protocol\n\t\tSet_config_obfs\n\t\tSet_config_protocol_param\n\t\tSet_config_speed_limit_per_con\n\t\tSet_config_speed_limit_per_user\n\t\tSet_config_transfer\n\t\tSet_config_forbid\n\telse\n\t\tSet_config_user\n\t\tSet_config_port\n\t\tSet_config_password\n\t\tSet_config_method\n\t\tSet_config_protocol\n\t\tSet_config_obfs\n\t\tSet_config_protocol_param\n\t\tSet_config_speed_limit_per_con\n\t\tSet_config_speed_limit_per_user\n\t\tSet_config_transfer\n\t\tSet_config_forbid\n\tfi\n}\n# 修改 配置信息\nModify_config_password(){\n\tmatch_edit=$(python mujson_mgr.py -e -p \"${ssr_port}\" -k \"${ssr_password}\"|grep -w \"edit user \")\n\tif [[ -z \"${match_edit}\" ]]; then\n\t\techo -e \"${Error} 用户密码修改失败 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} \" && exit 1\n\telse\n\t\techo -e \"${Info} 用户密码修改成功 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} (注意：可能需要十秒左右才会应用最新配置)\"\n\tfi\n}\nModify_config_method(){\n\tmatch_edit=$(python mujson_mgr.py -e -p \"${ssr_port}\" -m \"${ssr_method}\"|grep -w \"edit user \")\n\tif [[ -z \"${match_edit}\" ]]; then\n\t\techo -e \"${Error} 用户加密方式修改失败 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} \" && exit 1\n\telse\n\t\techo -e \"${Info} 用户加密方式修改成功 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} (注意：可能需要十秒左右才会应用最新配置)\"\n\tfi\n}\nModify_config_protocol(){\n\tmatch_edit=$(python mujson_mgr.py -e -p \"${ssr_port}\" -O \"${ssr_protocol}\"|grep -w \"edit user \")\n\tif [[ -z \"${match_edit}\" ]]; then\n\t\techo -e \"${Error} 用户协议修改失败 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} \" && exit 1\n\telse\n\t\techo -e \"${Info} 用户协议修改成功 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} (注意：可能需要十秒左右才会应用最新配置)\"\n\tfi\n}\nModify_config_obfs(){\n\tmatch_edit=$(python mujson_mgr.py -e -p \"${ssr_port}\" -o \"${ssr_obfs}\"|grep -w \"edit user \")\n\tif [[ -z \"${match_edit}\" ]]; then\n\t\techo -e \"${Error} 用户混淆修改失败 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} \" && exit 1\n\telse\n\t\techo -e \"${Info} 用户混淆修改成功 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} (注意：可能需要十秒左右才会应用最新配置)\"\n\tfi\n}\nModify_config_protocol_param(){\n\tmatch_edit=$(python mujson_mgr.py -e -p \"${ssr_port}\" -G \"${ssr_protocol_param}\"|grep -w \"edit user \")\n\tif [[ -z \"${match_edit}\" ]]; then\n\t\techo -e \"${Error} 用户协议参数(设备数限制)修改失败 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} \" && exit 1\n\telse\n\t\techo -e \"${Info} 用户议参数(设备数限制)修改成功 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} (注意：可能需要十秒左右才会应用最新配置)\"\n\tfi\n}\nModify_config_speed_limit_per_con(){\n\tmatch_edit=$(python mujson_mgr.py -e -p \"${ssr_port}\" -s \"${ssr_speed_limit_per_con}\"|grep -w \"edit user \")\n\tif [[ -z \"${match_edit}\" ]]; then\n\t\techo -e \"${Error} 用户单线程限速修改失败 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} \" && exit 1\n\telse\n\t\techo -e \"${Info} 用户单线程限速修改成功 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} (注意：可能需要十秒左右才会应用最新配置)\"\n\tfi\n}\nModify_config_speed_limit_per_user(){\n\tmatch_edit=$(python mujson_mgr.py -e -p \"${ssr_port}\" -S \"${ssr_speed_limit_per_user}\"|grep -w \"edit user \")\n\tif [[ -z \"${match_edit}\" ]]; then\n\t\techo -e \"${Error} 用户端口总限速修改失败 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} \" && exit 1\n\telse\n\t\techo -e \"${Info} 用户端口总限速修改成功 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} (注意：可能需要十秒左右才会应用最新配置)\"\n\tfi\n}\nModify_config_connect_verbose_info(){\n\tsed -i 's/\"connect_verbose_info\": '\"$(echo ${connect_verbose_info})\"',/\"connect_verbose_info\": '\"$(echo ${ssr_connect_verbose_info})\"',/g' ${config_user_file}\n}\nModify_config_transfer(){\n\tmatch_edit=$(python mujson_mgr.py -e -p \"${ssr_port}\" -t \"${ssr_transfer}\"|grep -w \"edit user \")\n\tif [[ -z \"${match_edit}\" ]]; then\n\t\techo -e \"${Error} 用户总流量修改失败 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} \" && exit 1\n\telse\n\t\techo -e \"${Info} 用户总流量修改成功 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} (注意：可能需要十秒左右才会应用最新配置)\"\n\tfi\n}\nModify_config_forbid(){\n\tmatch_edit=$(python mujson_mgr.py -e -p \"${ssr_port}\" -f \"${ssr_forbid}\"|grep -w \"edit user \")\n\tif [[ -z \"${match_edit}\" ]]; then\n\t\techo -e \"${Error} 用户禁止访问端口修改失败 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} \" && exit 1\n\telse\n\t\techo -e \"${Info} 用户禁止访问端口修改成功 ${Green_font_prefix}[端口: ${ssr_port}]${Font_color_suffix} (注意：可能需要十秒左右才会应用最新配置)\"\n\tfi\n}\nModify_config_enable(){\n\tsed -i \"${ssr_enable_num}\"'s/\"enable\": '\"$(echo ${enable})\"',/\"enable\": '\"$(echo ${ssr_enable})\"',/' ${config_user_mudb_file}\n}\nModify_user_api_server_pub_addr(){\n\tsed -i \"s/SERVER_PUB_ADDR = '${server_pub_addr}'/SERVER_PUB_ADDR = '${ssr_server_pub_addr}'/\" ${config_user_api_file}\n}\nModify_config_all(){\n\tModify_config_password\n\tModify_config_method\n\tModify_config_protocol\n\tModify_config_obfs\n\tModify_config_protocol_param\n\tModify_config_speed_limit_per_con\n\tModify_config_speed_limit_per_user\n\tModify_config_transfer\n\tModify_config_forbid\n}\nCheck_python(){\n\tpython_ver=`python -h`\n\tif [[ -z ${python_ver} ]]; then\n\t\techo -e \"${Info} 没有安装Python，开始安装...\"\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum install -y python\n\t\telse\n\t\t\tapt-get install -y python\n\t\tfi\n\tfi\n}\nCentos_yum(){\n\tyum update\n\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\tif [[ $? = 0 ]]; then\n\t\tyum install -y vim unzip crond net-tools\n\telse\n\t\tyum install -y vim unzip crond\n\tfi\n}\nDebian_apt(){\n\tapt-get update\n\tcat /etc/issue |grep 9\\..*>/dev/null\n\tif [[ $? = 0 ]]; then\n\t\tapt-get install -y vim unzip cron net-tools\n\telse\n\t\tapt-get install -y vim unzip cron\n\tfi\n}\n# 下载 ShadowsocksR\nDownload_SSR(){\n\tcd \"/usr/local\"\n\twget -N --no-check-certificate \"https://github.com/ToyoDAdoubiBackup/shadowsocksr/archive/manyuser.zip\"\n\t#git config --global http.sslVerify false\n\t#env GIT_SSL_NO_VERIFY=true git clone -b manyuser https://github.com/ToyoDAdoubiBackup/shadowsocksr.git\n\t#[[ ! -e ${ssr_folder} ]] && echo -e \"${Error} ShadowsocksR服务端 下载失败 !\" && exit 1\n\t[[ ! -e \"manyuser.zip\" ]] && echo -e \"${Error} ShadowsocksR服务端 压缩包 下载失败 !\" && rm -rf manyuser.zip && exit 1\n\tunzip \"manyuser.zip\"\n\t[[ ! -e \"/usr/local/shadowsocksr-manyuser/\" ]] && echo -e \"${Error} ShadowsocksR服务端 解压失败 !\" && rm -rf manyuser.zip && exit 1\n\tmv \"/usr/local/shadowsocksr-manyuser/\" \"/usr/local/shadowsocksr/\"\n\t[[ ! -e \"/usr/local/shadowsocksr/\" ]] && echo -e \"${Error} ShadowsocksR服务端 重命名失败 !\" && rm -rf manyuser.zip && rm -rf \"/usr/local/shadowsocksr-manyuser/\" && exit 1\n\trm -rf manyuser.zip\n\tcd \"shadowsocksr\"\n\tcp \"${ssr_folder}/config.json\" \"${config_user_file}\"\n\tcp \"${ssr_folder}/mysql.json\" \"${ssr_folder}/usermysql.json\"\n\tcp \"${ssr_folder}/apiconfig.py\" \"${config_user_api_file}\"\n\t[[ ! -e ${config_user_api_file} ]] && echo -e \"${Error} ShadowsocksR服务端 apiconfig.py 复制失败 !\" && exit 1\n\tsed -i \"s/API_INTERFACE = 'sspanelv2'/API_INTERFACE = 'mudbjson'/\" ${config_user_api_file}\n\tserver_pub_addr=\"127.0.0.1\"\n\tModify_user_api_server_pub_addr\n\t#sed -i \"s/SERVER_PUB_ADDR = '127.0.0.1'/SERVER_PUB_ADDR = '${ip}'/\" ${config_user_api_file}\n\tsed -i 's/ \\/\\/ only works under multi-user mode//g' \"${config_user_file}\"\n\techo -e \"${Info} ShadowsocksR服务端 下载完成 !\"\n}\nService_SSR(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/ssrmu_centos -O /etc/init.d/ssrmu; then\n\t\t\techo -e \"${Error} ShadowsocksR服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/ssrmu\n\t\tchkconfig --add ssrmu\n\t\tchkconfig ssrmu on\n\telse\n\t\tif ! wget --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/ssrmu_debian -O /etc/init.d/ssrmu; then\n\t\t\techo -e \"${Error} ShadowsocksR服务 管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/ssrmu\n\t\tupdate-rc.d -f ssrmu defaults\n\tfi\n\techo -e \"${Info} ShadowsocksR服务 管理脚本下载完成 !\"\n}\n# 安装 JQ解析器\nJQ_install(){\n\tif [[ ! -e ${jq_file} ]]; then\n\t\tcd \"${ssr_folder}\"\n\t\tif [[ ${bit} = \"x86_64\" ]]; then\n\t\t\tmv \"jq-linux64\" \"jq\"\n\t\t\t#wget --no-check-certificate \"https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64\" -O ${jq_file}\n\t\telse\n\t\t\tmv \"jq-linux32\" \"jq\"\n\t\t\t#wget --no-check-certificate \"https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux32\" -O ${jq_file}\n\t\tfi\n\t\t[[ ! -e ${jq_file} ]] && echo -e \"${Error} JQ解析器 重命名失败，请检查 !\" && exit 1\n\t\tchmod +x ${jq_file}\n\t\techo -e \"${Info} JQ解析器 安装完成，继续...\" \n\telse\n\t\techo -e \"${Info} JQ解析器 已安装，继续...\"\n\tfi\n}\n# 安装 依赖\nInstallation_dependency(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tCentos_yum\n\telse\n\t\tDebian_apt\n\tfi\n\t[[ ! -e \"/usr/bin/unzip\" ]] && echo -e \"${Error} 依赖 unzip(解压压缩包) 安装失败，多半是软件包源的问题，请检查 !\" && exit 1\n\tCheck_python\n\t#echo \"nameserver 8.8.8.8\" > /etc/resolv.conf\n\t#echo \"nameserver 8.8.4.4\" >> /etc/resolv.conf\n\t\\cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\tif [[ ${release} == \"centos\" ]]; then\n\t\t/etc/init.d/crond restart\n\telse\n\t\t/etc/init.d/cron restart\n\tfi\n}\nInstall_SSR(){\n\tcheck_root\n\t[[ -e ${ssr_folder} ]] && echo -e \"${Error} ShadowsocksR 文件夹已存在，请检查( 如安装失败或者存在旧版本，请先卸载 ) !\" && exit 1\n\techo -e \"${Info} 开始设置 ShadowsocksR账号配置...\"\n\tSet_user_api_server_pub_addr\n\tSet_config_all\n\techo -e \"${Info} 开始安装/配置 ShadowsocksR依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始下载/安装 ShadowsocksR文件...\"\n\tDownload_SSR\n\techo -e \"${Info} 开始下载/安装 ShadowsocksR服务脚本(init)...\"\n\tService_SSR\n\techo -e \"${Info} 开始下载/安装 JSNO解析器 JQ...\"\n\tJQ_install\n\techo -e \"${Info} 开始添加初始用户...\"\n\tAdd_port_user \"install\"\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动 ShadowsocksR服务端...\"\n\tStart_SSR\n\tGet_User_info \"${ssr_port}\"\n\tView_User_info\n}\nUpdate_SSR(){\n\tSSR_installation_status\n\techo -e \"因破娃暂停更新ShadowsocksR服务端，所以此功能临时禁用。\"\n\t#cd ${ssr_folder}\n\t#git pull\n\t#Restart_SSR\n}\nUninstall_SSR(){\n\t[[ ! -e ${ssr_folder} ]] && echo -e \"${Error} 没有安装 ShadowsocksR，请检查 !\" && exit 1\n\techo \"确定要 卸载ShadowsocksR？[y/N]\" && echo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid\n\t\t[[ ! -z \"${PID}\" ]] && kill -9 ${PID}\n\t\tuser_info=$(python mujson_mgr.py -l)\n\t\tuser_total=$(echo \"${user_info}\"|wc -l)\n\t\tif [[ ! -z ${user_info} ]]; then\n\t\t\tfor((integer = 1; integer <= ${user_total}; integer++))\n\t\t\tdo\n\t\t\t\tport=$(echo \"${user_info}\"|sed -n \"${integer}p\"|awk '{print $4}')\n\t\t\t\tDel_iptables\n\t\t\tdone\n\t\t\tSave_iptables\n\t\tfi\n\t\tif [[ ! -z $(crontab -l | grep \"ssrmu.sh\") ]]; then\n\t\t\tcrontab_monitor_ssr_cron_stop\n\t\t\tClear_transfer_all_cron_stop\n\t\tfi\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del ssrmu\n\t\telse\n\t\t\tupdate-rc.d -f ssrmu remove\n\t\tfi\n\t\trm -rf ${ssr_folder} && rm -rf /etc/init.d/ssrmu\n\t\techo && echo \" ShadowsocksR 卸载完成 !\" && echo\n\telse\n\t\techo && echo \" 卸载已取消...\" && echo\n\tfi\n}\nCheck_Libsodium_ver(){\n\techo -e \"${Info} 开始获取 libsodium 最新版本...\"\n\tLibsodiumr_ver=$(wget -qO- \"https://github.com/jedisct1/libsodium/tags\"|grep \"/jedisct1/libsodium/releases/tag/\"|head -1|sed -r 's/.*tag\\/(.+)\\\">.*/\\1/')\n\t[[ -z ${Libsodiumr_ver} ]] && Libsodiumr_ver=${Libsodiumr_ver_backup}\n\techo -e \"${Info} libsodium 最新版本为 ${Green_font_prefix}${Libsodiumr_ver}${Font_color_suffix} !\"\n}\nInstall_Libsodium(){\n\tif [[ -e ${Libsodiumr_file} ]]; then\n\t\techo -e \"${Error} libsodium 已安装 , 是否覆盖安装(更新)？[y/N]\"\n\t\tread -e -p \"(默认: n):\" yn\n\t\t[[ -z ${yn} ]] && yn=\"n\"\n\t\tif [[ ${yn} == [Nn] ]]; then\n\t\t\techo \"已取消...\" && exit 1\n\t\tfi\n\telse\n\t\techo -e \"${Info} libsodium 未安装，开始安装...\"\n\tfi\n\tCheck_Libsodium_ver\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tyum update\n\t\techo -e \"${Info} 安装依赖...\"\n\t\tyum -y groupinstall \"Development Tools\"\n\t\techo -e \"${Info} 下载...\"\n\t\twget  --no-check-certificate -N \"https://github.com/jedisct1/libsodium/releases/download/${Libsodiumr_ver}-RELEASE/libsodium-${Libsodiumr_ver}.tar.gz\"\n\t\techo -e \"${Info} 解压...\"\n\t\ttar -xzf libsodium-${Libsodiumr_ver}.tar.gz && cd libsodium-${Libsodiumr_ver}\n\t\techo -e \"${Info} 编译安装...\"\n\t\t./configure --disable-maintainer-mode && make -j2 && make install\n\t\techo /usr/local/lib > /etc/ld.so.conf.d/usr_local_lib.conf\n\telse\n\t\tapt-get update\n\t\techo -e \"${Info} 安装依赖...\"\n\t\tapt-get install -y build-essential\n\t\techo -e \"${Info} 下载...\"\n\t\twget  --no-check-certificate -N \"https://github.com/jedisct1/libsodium/releases/download/${Libsodiumr_ver}-RELEASE/libsodium-${Libsodiumr_ver}.tar.gz\"\n\t\techo -e \"${Info} 解压...\"\n\t\ttar -xzf libsodium-${Libsodiumr_ver}.tar.gz && cd libsodium-${Libsodiumr_ver}\n\t\techo -e \"${Info} 编译安装...\"\n\t\t./configure --disable-maintainer-mode && make -j2 && make install\n\tfi\n\tldconfig\n\tcd .. && rm -rf libsodium-${Libsodiumr_ver}.tar.gz && rm -rf libsodium-${Libsodiumr_ver}\n\t[[ ! -e ${Libsodiumr_file} ]] && echo -e \"${Error} libsodium 安装失败 !\" && exit 1\n\techo && echo -e \"${Info} libsodium 安装成功 !\" && echo\n}\n# 显示 连接信息\ndebian_View_user_connection_info(){\n\tformat_1=$1\n\tuser_info=$(python mujson_mgr.py -l)\n\tuser_total=$(echo \"${user_info}\"|wc -l)\n\t[[ -z ${user_info} ]] && echo -e \"${Error} 没有发现 用户，请检查 !\" && exit 1\n\tIP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\" |wc -l`\n\tuser_list_all=\"\"\n\tfor((integer = 1; integer <= ${user_total}; integer++))\n\tdo\n\t\tuser_port=$(echo \"${user_info}\"|sed -n \"${integer}p\"|awk '{print $4}')\n\t\tuser_IP_1=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep \":${user_port} \" |awk '{print $5}' |awk -F \":\" '{print $1}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\"`\n\t\tif [[ -z ${user_IP_1} ]]; then\n\t\t\tuser_IP_total=\"0\"\n\t\telse\n\t\t\tuser_IP_total=`echo -e \"${user_IP_1}\"|wc -l`\n\t\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\t\tget_IP_address\n\t\t\telse\n\t\t\t\tuser_IP=`echo -e \"\\n${user_IP_1}\"`\n\t\t\tfi\n\t\tfi\n\t\tuser_info_233=$(python mujson_mgr.py -l|grep -w \"${user_port}\"|awk '{print $2}'|sed 's/\\[//g;s/\\]//g')\n\t\tuser_list_all=${user_list_all}\"用户名: ${Green_font_prefix}\"${user_info_233}\"${Font_color_suffix}\\t 端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\tuser_IP=\"\"\n\tdone\n\techo -e \"用户总数: ${Green_background_prefix} \"${user_total}\" ${Font_color_suffix} 链接IP总数: ${Green_background_prefix} \"${IP_total}\" ${Font_color_suffix} \"\n\techo -e \"${user_list_all}\"\n}\ncentos_View_user_connection_info(){\n\tformat_1=$1\n\tuser_info=$(python mujson_mgr.py -l)\n\tuser_total=$(echo \"${user_info}\"|wc -l)\n\t[[ -z ${user_info} ]] && echo -e \"${Error} 没有发现 用户，请检查 !\" && exit 1\n\tIP_total=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' | grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\" |wc -l`\n\tuser_list_all=\"\"\n\tfor((integer = 1; integer <= ${user_total}; integer++))\n\tdo\n\t\tuser_port=$(echo \"${user_info}\"|sed -n \"${integer}p\"|awk '{print $4}')\n\t\tuser_IP_1=`netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' |grep \":${user_port} \"|grep '::ffff:' |awk '{print $5}' |awk -F \":\" '{print $4}' |sort -u |grep -E -o \"([0-9]{1,3}[\\.]){3}[0-9]{1,3}\"`\n\t\tif [[ -z ${user_IP_1} ]]; then\n\t\t\tuser_IP_total=\"0\"\n\t\telse\n\t\t\tuser_IP_total=`echo -e \"${user_IP_1}\"|wc -l`\n\t\t\tif [[ ${format_1} == \"IP_address\" ]]; then\n\t\t\t\tget_IP_address\n\t\t\telse\n\t\t\t\tuser_IP=`echo -e \"\\n${user_IP_1}\"`\n\t\t\tfi\n\t\tfi\n\t\tuser_info_233=$(python mujson_mgr.py -l|grep -w \"${user_port}\"|awk '{print $2}'|sed 's/\\[//g;s/\\]//g')\n\t\tuser_list_all=${user_list_all}\"用户名: ${Green_font_prefix}\"${user_info_233}\"${Font_color_suffix}\\t 端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 链接IP总数: ${Green_font_prefix}\"${user_IP_total}\"${Font_color_suffix}\\t 当前链接IP: ${Green_font_prefix}${user_IP}${Font_color_suffix}\\n\"\n\t\tuser_IP=\"\"\n\tdone\n\techo -e \"用户总数: ${Green_background_prefix} \"${user_total}\" ${Font_color_suffix} 链接IP总数: ${Green_background_prefix} \"${IP_total}\" ${Font_color_suffix} \"\n\techo -e \"${user_list_all}\"\n}\nView_user_connection_info(){\n\tSSR_installation_status\n\techo && echo -e \"请选择要显示的格式：\n ${Green_font_prefix}1.${Font_color_suffix} 显示 IP 格式\n ${Green_font_prefix}2.${Font_color_suffix} 显示 IP+IP归属地 格式\" && echo\n\tread -e -p \"(默认: 1):\" ssr_connection_info\n\t[[ -z \"${ssr_connection_info}\" ]] && ssr_connection_info=\"1\"\n\tif [[ ${ssr_connection_info} == \"1\" ]]; then\n\t\tView_user_connection_info_1 \"\"\n\telif [[ ${ssr_connection_info} == \"2\" ]]; then\n\t\techo -e \"${Tip} 检测IP归属地(ipip.net)，如果IP较多，可能时间会比较长...\"\n\t\tView_user_connection_info_1 \"IP_address\"\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-2)\" && exit 1\n\tfi\n}\nView_user_connection_info_1(){\n\tformat=$1\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\t\tif [[ $? = 0 ]]; then\n\t\t\tdebian_View_user_connection_info \"$format\"\n\t\telse\n\t\t\tcentos_View_user_connection_info \"$format\"\n\t\tfi\n\telse\n\t\tdebian_View_user_connection_info \"$format\"\n\tfi\n}\nget_IP_address(){\n\t#echo \"user_IP_1=${user_IP_1}\"\n\tif [[ ! -z ${user_IP_1} ]]; then\n\t#echo \"user_IP_total=${user_IP_total}\"\n\t\tfor((integer_1 = ${user_IP_total}; integer_1 >= 1; integer_1--))\n\t\tdo\n\t\t\tIP=`echo \"${user_IP_1}\" |sed -n \"$integer_1\"p`\n\t\t\t#echo \"IP=${IP}\"\n\t\t\tIP_address=`wget -qO- -t1 -T2 http://freeapi.ipip.net/${IP}|sed 's/\\\"//g;s/,//g;s/\\[//g;s/\\]//g'`\n\t\t\t#echo \"IP_address=${IP_address}\"\n\t\t\tuser_IP=\"${user_IP}\\n${IP}(${IP_address})\"\n\t\t\t#echo \"user_IP=${user_IP}\"\n\t\t\tsleep 1s\n\t\tdone\n\tfi\n}\n# 修改 用户配置\nModify_port(){\n\tList_port_user\n\twhile true\n\tdo\n\t\techo -e \"请输入要修改的用户 端口\"\n\t\tread -e -p \"(默认: 取消):\" ssr_port\n\t\t[[ -z \"${ssr_port}\" ]] && echo -e \"已取消...\" && exit 1\n\t\tModify_user=$(cat \"${config_user_mudb_file}\"|grep '\"port\": '\"${ssr_port}\"',')\n\t\tif [[ ! -z ${Modify_user} ]]; then\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的端口 !\"\n\t\tfi\n\tdone\n}\nModify_Config(){\n\tSSR_installation_status\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix}  添加 用户配置\n ${Green_font_prefix}2.${Font_color_suffix}  删除 用户配置\n————— 修改 用户配置 —————\n ${Green_font_prefix}3.${Font_color_suffix}  修改 用户密码\n ${Green_font_prefix}4.${Font_color_suffix}  修改 加密方式\n ${Green_font_prefix}5.${Font_color_suffix}  修改 协议插件\n ${Green_font_prefix}6.${Font_color_suffix}  修改 混淆插件\n ${Green_font_prefix}7.${Font_color_suffix}  修改 设备数限制\n ${Green_font_prefix}8.${Font_color_suffix}  修改 单线程限速\n ${Green_font_prefix}9.${Font_color_suffix}  修改 用户总限速\n ${Green_font_prefix}10.${Font_color_suffix} 修改 用户总流量\n ${Green_font_prefix}11.${Font_color_suffix} 修改 用户禁用端口\n ${Green_font_prefix}12.${Font_color_suffix} 修改 全部配置\n————— 其他 —————\n ${Green_font_prefix}13.${Font_color_suffix} 修改 用户配置中显示的IP或域名\n \n ${Tip} 用户的用户名和端口是无法修改，如果需要修改请使用脚本的 手动修改功能 !\" && echo\n\tread -e -p \"(默认: 取消):\" ssr_modify\n\t[[ -z \"${ssr_modify}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${ssr_modify} == \"1\" ]]; then\n\t\tAdd_port_user\n\telif [[ ${ssr_modify} == \"2\" ]]; then\n\t\tDel_port_user\n\telif [[ ${ssr_modify} == \"3\" ]]; then\n\t\tModify_port\n\t\tSet_config_password\n\t\tModify_config_password\n\telif [[ ${ssr_modify} == \"4\" ]]; then\n\t\tModify_port\n\t\tSet_config_method\n\t\tModify_config_method\n\telif [[ ${ssr_modify} == \"5\" ]]; then\n\t\tModify_port\n\t\tSet_config_protocol\n\t\tModify_config_protocol\n\telif [[ ${ssr_modify} == \"6\" ]]; then\n\t\tModify_port\n\t\tSet_config_obfs\n\t\tModify_config_obfs\n\telif [[ ${ssr_modify} == \"7\" ]]; then\n\t\tModify_port\n\t\tSet_config_protocol_param\n\t\tModify_config_protocol_param\n\telif [[ ${ssr_modify} == \"8\" ]]; then\n\t\tModify_port\n\t\tSet_config_speed_limit_per_con\n\t\tModify_config_speed_limit_per_con\n\telif [[ ${ssr_modify} == \"9\" ]]; then\n\t\tModify_port\n\t\tSet_config_speed_limit_per_user\n\t\tModify_config_speed_limit_per_user\n\telif [[ ${ssr_modify} == \"10\" ]]; then\n\t\tModify_port\n\t\tSet_config_transfer\n\t\tModify_config_transfer\n\telif [[ ${ssr_modify} == \"11\" ]]; then\n\t\tModify_port\n\t\tSet_config_forbid\n\t\tModify_config_forbid\n\telif [[ ${ssr_modify} == \"12\" ]]; then\n\t\tModify_port\n\t\tSet_config_all \"Modify\"\n\t\tModify_config_all\n\telif [[ ${ssr_modify} == \"13\" ]]; then\n\t\tSet_user_api_server_pub_addr \"Modify\"\n\t\tModify_user_api_server_pub_addr\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-13)\" && exit 1\n\tfi\n}\nList_port_user(){\n\tuser_info=$(python mujson_mgr.py -l)\n\tuser_total=$(echo \"${user_info}\"|wc -l)\n\t[[ -z ${user_info} ]] && echo -e \"${Error} 没有发现 用户，请检查 !\" && exit 1\n\tuser_list_all=\"\"\n\tfor((integer = 1; integer <= ${user_total}; integer++))\n\tdo\n\t\tuser_port=$(echo \"${user_info}\"|sed -n \"${integer}p\"|awk '{print $4}')\n\t\tuser_username=$(echo \"${user_info}\"|sed -n \"${integer}p\"|awk '{print $2}'|sed 's/\\[//g;s/\\]//g')\n\t\tGet_User_transfer \"${user_port}\"\n\t\ttransfer_enable_Used_233=$(echo $((${transfer_enable_Used_233}+${transfer_enable_Used_2_1})))\n\t\tuser_list_all=${user_list_all}\"用户名: ${Green_font_prefix} \"${user_username}\"${Font_color_suffix}\\t 端口: ${Green_font_prefix}\"${user_port}\"${Font_color_suffix}\\t 流量使用情况(已用+剩余=总): ${Green_font_prefix}${transfer_enable_Used_2}${Font_color_suffix} + ${Green_font_prefix}${transfer_enable_Used}${Font_color_suffix} = ${Green_font_prefix}${transfer_enable}${Font_color_suffix}\\n\"\n\tdone\n\tGet_User_transfer_all\n\techo && echo -e \"=== 用户总数 ${Green_background_prefix} \"${user_total}\" ${Font_color_suffix}\"\n\techo -e ${user_list_all}\n\techo -e \"=== 当前所有用户已使用流量总和: ${Green_background_prefix} ${transfer_enable_Used_233_2} ${Font_color_suffix}\\n\"\n}\nAdd_port_user(){\n\tlalal=$1\n\tif [[ \"$lalal\" == \"install\" ]]; then\n\t\tmatch_add=$(python mujson_mgr.py -a -u \"${ssr_user}\" -p \"${ssr_port}\" -k \"${ssr_password}\" -m \"${ssr_method}\" -O \"${ssr_protocol}\" -G \"${ssr_protocol_param}\" -o \"${ssr_obfs}\" -s \"${ssr_speed_limit_per_con}\" -S \"${ssr_speed_limit_per_user}\" -t \"${ssr_transfer}\" -f \"${ssr_forbid}\"|grep -w \"add user info\")\n\telse\n\t\twhile true\n\t\tdo\n\t\t\tSet_config_all\n\t\t\tmatch_port=$(python mujson_mgr.py -l|grep -w \"port ${ssr_port}$\")\n\t\t\t[[ ! -z \"${match_port}\" ]] && echo -e \"${Error} 该端口 [${ssr_port}] 已存在，请勿重复添加 !\" && exit 1\n\t\t\tmatch_username=$(python mujson_mgr.py -l|grep -w \"user \\[${ssr_user}]\")\n\t\t\t[[ ! -z \"${match_username}\" ]] && echo -e \"${Error} 该用户名 [${ssr_user}] 已存在，请勿重复添加 !\" && exit 1\n\t\t\tmatch_add=$(python mujson_mgr.py -a -u \"${ssr_user}\" -p \"${ssr_port}\" -k \"${ssr_password}\" -m \"${ssr_method}\" -O \"${ssr_protocol}\" -G \"${ssr_protocol_param}\" -o \"${ssr_obfs}\" -s \"${ssr_speed_limit_per_con}\" -S \"${ssr_speed_limit_per_user}\" -t \"${ssr_transfer}\" -f \"${ssr_forbid}\"|grep -w \"add user info\")\n\t\t\tif [[ -z \"${match_add}\" ]]; then\n\t\t\t\techo -e \"${Error} 用户添加失败 ${Green_font_prefix}[用户名: ${ssr_user} , 端口: ${ssr_port}]${Font_color_suffix} \"\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\tAdd_iptables\n\t\t\t\tSave_iptables\n\t\t\t\techo -e \"${Info} 用户添加成功 ${Green_font_prefix}[用户名: ${ssr_user} , 端口: ${ssr_port}]${Font_color_suffix} \"\n\t\t\t\techo\n\t\t\t\tread -e -p \"是否继续 添加用户配置？[Y/n]:\" addyn\n\t\t\t\t[[ -z ${addyn} ]] && addyn=\"y\"\n\t\t\t\tif [[ ${addyn} == [Nn] ]]; then\n\t\t\t\t\tGet_User_info \"${ssr_port}\"\n\t\t\t\t\tView_User_info\n\t\t\t\t\tbreak\n\t\t\t\telse\n\t\t\t\t\techo -e \"${Info} 继续 添加用户配置...\"\n\t\t\t\tfi\n\t\t\tfi\n\t\tdone\n\tfi\n}\nDel_port_user(){\n\tList_port_user\n\twhile true\n\tdo\n\t\techo -e \"请输入要删除的用户 端口\"\n\t\tread -e -p \"(默认: 取消):\" del_user_port\n\t\t[[ -z \"${del_user_port}\" ]] && echo -e \"已取消...\" && exit 1\n\t\tdel_user=$(cat \"${config_user_mudb_file}\"|grep '\"port\": '\"${del_user_port}\"',')\n\t\tif [[ ! -z ${del_user} ]]; then\n\t\t\tport=${del_user_port}\n\t\t\tmatch_del=$(python mujson_mgr.py -d -p \"${del_user_port}\"|grep -w \"delete user \")\n\t\t\tif [[ -z \"${match_del}\" ]]; then\n\t\t\t\techo -e \"${Error} 用户删除失败 ${Green_font_prefix}[端口: ${del_user_port}]${Font_color_suffix} \"\n\t\t\telse\n\t\t\t\tDel_iptables\n\t\t\t\tSave_iptables\n\t\t\t\techo -e \"${Info} 用户删除成功 ${Green_font_prefix}[端口: ${del_user_port}]${Font_color_suffix} \"\n\t\t\tfi\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的端口 !\"\n\t\tfi\n\tdone\n}\nManually_Modify_Config(){\n\tSSR_installation_status\n\tvi ${config_user_mudb_file}\n\techo \"是否现在重启ShadowsocksR？[Y/n]\" && echo\n\tread -e -p \"(默认: y):\" yn\n\t[[ -z ${yn} ]] && yn=\"y\"\n\tif [[ ${yn} == [Yy] ]]; then\n\t\tRestart_SSR\n\tfi\n}\nClear_transfer(){\n\tSSR_installation_status\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix}  清零 单个用户已使用流量\n ${Green_font_prefix}2.${Font_color_suffix}  清零 所有用户已使用流量(不可挽回)\n ${Green_font_prefix}3.${Font_color_suffix}  启动 定时所有用户流量清零\n ${Green_font_prefix}4.${Font_color_suffix}  停止 定时所有用户流量清零\n ${Green_font_prefix}5.${Font_color_suffix}  修改 定时所有用户流量清零\" && echo\n\tread -e -p \"(默认: 取消):\" ssr_modify\n\t[[ -z \"${ssr_modify}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${ssr_modify} == \"1\" ]]; then\n\t\tClear_transfer_one\n\telif [[ ${ssr_modify} == \"2\" ]]; then\n\t\techo \"确定要 清零 所有用户已使用流量？[y/N]\" && echo\n\t\tread -e -p \"(默认: n):\" yn\n\t\t[[ -z ${yn} ]] && yn=\"n\"\n\t\tif [[ ${yn} == [Yy] ]]; then\n\t\t\tClear_transfer_all\n\t\telse\n\t\t\techo \"取消...\"\n\t\tfi\n\telif [[ ${ssr_modify} == \"3\" ]]; then\n\t\tcheck_crontab\n\t\tSet_crontab\n\t\tClear_transfer_all_cron_start\n\telif [[ ${ssr_modify} == \"4\" ]]; then\n\t\tcheck_crontab\n\t\tClear_transfer_all_cron_stop\n\telif [[ ${ssr_modify} == \"5\" ]]; then\n\t\tcheck_crontab\n\t\tClear_transfer_all_cron_modify\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-5)\" && exit 1\n\tfi\n}\nClear_transfer_one(){\n\tList_port_user\n\twhile true\n\tdo\n\t\techo -e \"请输入要清零已使用流量的用户 端口\"\n\t\tread -e -p \"(默认: 取消):\" Clear_transfer_user_port\n\t\t[[ -z \"${Clear_transfer_user_port}\" ]] && echo -e \"已取消...\" && exit 1\n\t\tClear_transfer_user=$(cat \"${config_user_mudb_file}\"|grep '\"port\": '\"${Clear_transfer_user_port}\"',')\n\t\tif [[ ! -z ${Clear_transfer_user} ]]; then\n\t\t\tmatch_clear=$(python mujson_mgr.py -c -p \"${Clear_transfer_user_port}\"|grep -w \"clear user \")\n\t\t\tif [[ -z \"${match_clear}\" ]]; then\n\t\t\t\techo -e \"${Error} 用户已使用流量清零失败 ${Green_font_prefix}[端口: ${Clear_transfer_user_port}]${Font_color_suffix} \"\n\t\t\telse\n\t\t\t\techo -e \"${Info} 用户已使用流量清零成功 ${Green_font_prefix}[端口: ${Clear_transfer_user_port}]${Font_color_suffix} \"\n\t\t\tfi\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的端口 !\"\n\t\tfi\n\tdone\n}\nClear_transfer_all(){\n\tcd \"${ssr_folder}\"\n\tuser_info=$(python mujson_mgr.py -l)\n\tuser_total=$(echo \"${user_info}\"|wc -l)\n\t[[ -z ${user_info} ]] && echo -e \"${Error} 没有发现 用户，请检查 !\" && exit 1\n\tfor((integer = 1; integer <= ${user_total}; integer++))\n\tdo\n\t\tuser_port=$(echo \"${user_info}\"|sed -n \"${integer}p\"|awk '{print $4}')\n\t\tmatch_clear=$(python mujson_mgr.py -c -p \"${user_port}\"|grep -w \"clear user \")\n\t\tif [[ -z \"${match_clear}\" ]]; then\n\t\t\techo -e \"${Error} 用户已使用流量清零失败 ${Green_font_prefix}[端口: ${user_port}]${Font_color_suffix} \"\n\t\telse\n\t\t\techo -e \"${Info} 用户已使用流量清零成功 ${Green_font_prefix}[端口: ${user_port}]${Font_color_suffix} \"\n\t\tfi\n\tdone\n\techo -e \"${Info} 所有用户流量清零完毕 !\"\n}\nClear_transfer_all_cron_start(){\n\tcrontab -l > \"$file/crontab.bak\"\n\tsed -i \"/ssrmu.sh/d\" \"$file/crontab.bak\"\n\techo -e \"\\n${Crontab_time} /bin/bash $file/ssrmu.sh clearall\" >> \"$file/crontab.bak\"\n\tcrontab \"$file/crontab.bak\"\n\trm -r \"$file/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"ssrmu.sh\")\n\tif [[ -z ${cron_config} ]]; then\n\t\techo -e \"${Error} 定时所有用户流量清零启动失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} 定时所有用户流量清零启动成功 !\"\n\tfi\n}\nClear_transfer_all_cron_stop(){\n\tcrontab -l > \"$file/crontab.bak\"\n\tsed -i \"/ssrmu.sh/d\" \"$file/crontab.bak\"\n\tcrontab \"$file/crontab.bak\"\n\trm -r \"$file/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"ssrmu.sh\")\n\tif [[ ! -z ${cron_config} ]]; then\n\t\techo -e \"${Error} 定时所有用户流量清零停止失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} 定时所有用户流量清零停止成功 !\"\n\tfi\n}\nClear_transfer_all_cron_modify(){\n\tSet_crontab\n\tClear_transfer_all_cron_stop\n\tClear_transfer_all_cron_start\n}\nSet_crontab(){\n\t\techo -e \"请输入流量清零时间间隔\n === 格式说明 ===\n * * * * * 分别对应 分钟 小时 日份 月份 星期\n ${Green_font_prefix} 0 2 1 * * ${Font_color_suffix} 代表 每月1日2点0分 清零已使用流量\n ${Green_font_prefix} 0 2 15 * * ${Font_color_suffix} 代表 每月15日2点0分 清零已使用流量\n ${Green_font_prefix} 0 2 */7 * * ${Font_color_suffix} 代表 每7天2点0分 清零已使用流量\n ${Green_font_prefix} 0 2 * * 0 ${Font_color_suffix} 代表 每个星期日(7) 清零已使用流量\n ${Green_font_prefix} 0 2 * * 3 ${Font_color_suffix} 代表 每个星期三(3) 清零已使用流量\" && echo\n\tread -e -p \"(默认: 0 2 1 * * 每月1日2点0分):\" Crontab_time\n\t[[ -z \"${Crontab_time}\" ]] && Crontab_time=\"0 2 1 * *\"\n}\nStart_SSR(){\n\tSSR_installation_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} ShadowsocksR 正在运行 !\" && exit 1\n\t/etc/init.d/ssrmu start\n}\nStop_SSR(){\n\tSSR_installation_status\n\tcheck_pid\n\t[[ -z ${PID} ]] && echo -e \"${Error} ShadowsocksR 未运行 !\" && exit 1\n\t/etc/init.d/ssrmu stop\n}\nRestart_SSR(){\n\tSSR_installation_status\n\tcheck_pid\n\t[[ ! -z ${PID} ]] && /etc/init.d/ssrmu stop\n\t/etc/init.d/ssrmu start\n}\nView_Log(){\n\tSSR_installation_status\n\t[[ ! -e ${ssr_log_file} ]] && echo -e \"${Error} ShadowsocksR日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${ssr_log_file}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${ssr_log_file}\n}\n# 锐速\nConfigure_Server_Speeder(){\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix} 安装 锐速\n ${Green_font_prefix}2.${Font_color_suffix} 卸载 锐速\n————————\n ${Green_font_prefix}3.${Font_color_suffix} 启动 锐速\n ${Green_font_prefix}4.${Font_color_suffix} 停止 锐速\n ${Green_font_prefix}5.${Font_color_suffix} 重启 锐速\n ${Green_font_prefix}6.${Font_color_suffix} 查看 锐速 状态\n \n 注意： 锐速和LotServer不能同时安装/启动！\" && echo\n\tread -e -p \"(默认: 取消):\" server_speeder_num\n\t[[ -z \"${server_speeder_num}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${server_speeder_num} == \"1\" ]]; then\n\t\tInstall_ServerSpeeder\n\telif [[ ${server_speeder_num} == \"2\" ]]; then\n\t\tServer_Speeder_installation_status\n\t\tUninstall_ServerSpeeder\n\telif [[ ${server_speeder_num} == \"3\" ]]; then\n\t\tServer_Speeder_installation_status\n\t\t${Server_Speeder_file} start\n\t\t${Server_Speeder_file} status\n\telif [[ ${server_speeder_num} == \"4\" ]]; then\n\t\tServer_Speeder_installation_status\n\t\t${Server_Speeder_file} stop\n\telif [[ ${server_speeder_num} == \"5\" ]]; then\n\t\tServer_Speeder_installation_status\n\t\t${Server_Speeder_file} restart\n\t\t${Server_Speeder_file} status\n\telif [[ ${server_speeder_num} == \"6\" ]]; then\n\t\tServer_Speeder_installation_status\n\t\t${Server_Speeder_file} status\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-6)\" && exit 1\n\tfi\n}\nInstall_ServerSpeeder(){\n\t[[ -e ${Server_Speeder_file} ]] && echo -e \"${Error} 锐速(Server Speeder) 已安装 !\" && exit 1\n\t#借用91yun.rog的开心版锐速\n\twget --no-check-certificate -qO /tmp/serverspeeder.sh https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder.sh\n\t[[ ! -e \"/tmp/serverspeeder.sh\" ]] && echo -e \"${Error} 锐速安装脚本下载失败 !\" && exit 1\n\tbash /tmp/serverspeeder.sh\n\tsleep 2s\n\tPID=`ps -ef |grep -v grep |grep \"serverspeeder\" |awk '{print $2}'`\n\tif [[ ! -z ${PID} ]]; then\n\t\trm -rf /tmp/serverspeeder.sh\n\t\trm -rf /tmp/91yunserverspeeder\n\t\trm -rf /tmp/91yunserverspeeder.tar.gz\n\t\techo -e \"${Info} 锐速(Server Speeder) 安装完成 !\" && exit 1\n\telse\n\t\techo -e \"${Error} 锐速(Server Speeder) 安装失败 !\" && exit 1\n\tfi\n}\nUninstall_ServerSpeeder(){\n\techo \"确定要卸载 锐速(Server Speeder)？[y/N]\" && echo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && echo && echo \"已取消...\" && exit 1\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tchattr -i /serverspeeder/etc/apx*\n\t\t/serverspeeder/bin/serverSpeeder.sh uninstall -f\n\t\techo && echo \"锐速(Server Speeder) 卸载完成 !\" && echo\n\tfi\n}\n# LotServer\nConfigure_LotServer(){\n\techo && echo -e \"你要做什么？\n ${Green_font_prefix}1.${Font_color_suffix} 安装 LotServer\n ${Green_font_prefix}2.${Font_color_suffix} 卸载 LotServer\n————————\n ${Green_font_prefix}3.${Font_color_suffix} 启动 LotServer\n ${Green_font_prefix}4.${Font_color_suffix} 停止 LotServer\n ${Green_font_prefix}5.${Font_color_suffix} 重启 LotServer\n ${Green_font_prefix}6.${Font_color_suffix} 查看 LotServer 状态\n \n 注意： 锐速和LotServer不能同时安装/启动！\" && echo\n\tread -e -p \"(默认: 取消):\" lotserver_num\n\t[[ -z \"${lotserver_num}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${lotserver_num} == \"1\" ]]; then\n\t\tInstall_LotServer\n\telif [[ ${lotserver_num} == \"2\" ]]; then\n\t\tLotServer_installation_status\n\t\tUninstall_LotServer\n\telif [[ ${lotserver_num} == \"3\" ]]; then\n\t\tLotServer_installation_status\n\t\t${LotServer_file} start\n\t\t${LotServer_file} status\n\telif [[ ${lotserver_num} == \"4\" ]]; then\n\t\tLotServer_installation_status\n\t\t${LotServer_file} stop\n\telif [[ ${lotserver_num} == \"5\" ]]; then\n\t\tLotServer_installation_status\n\t\t${LotServer_file} restart\n\t\t${LotServer_file} status\n\telif [[ ${lotserver_num} == \"6\" ]]; then\n\t\tLotServer_installation_status\n\t\t${LotServer_file} status\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-6)\" && exit 1\n\tfi\n}\nInstall_LotServer(){\n\t[[ -e ${LotServer_file} ]] && echo -e \"${Error} LotServer 已安装 !\" && exit 1\n\t#Github: https://github.com/0oVicero0/serverSpeeder_Install\n\twget --no-check-certificate -qO /tmp/appex.sh \"https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh\"\n\t[[ ! -e \"/tmp/appex.sh\" ]] && echo -e \"${Error} LotServer 安装脚本下载失败 !\" && exit 1\n\tbash /tmp/appex.sh 'install'\n\tsleep 2s\n\tPID=`ps -ef |grep -v grep |grep \"appex\" |awk '{print $2}'`\n\tif [[ ! -z ${PID} ]]; then\n\t\techo -e \"${Info} LotServer 安装完成 !\" && exit 1\n\telse\n\t\techo -e \"${Error} LotServer 安装失败 !\" && exit 1\n\tfi\n}\nUninstall_LotServer(){\n\techo \"确定要卸载 LotServer？[y/N]\" && echo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && echo && echo \"已取消...\" && exit 1\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\twget --no-check-certificate -qO /tmp/appex.sh \"https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh\" && bash /tmp/appex.sh 'uninstall'\n\t\techo && echo \"LotServer 卸载完成 !\" && echo\n\tfi\n}\n# BBR\nConfigure_BBR(){\n\techo && echo -e \"  你要做什么？\n\t\n ${Green_font_prefix}1.${Font_color_suffix} 安装 BBR\n————————\n ${Green_font_prefix}2.${Font_color_suffix} 启动 BBR\n ${Green_font_prefix}3.${Font_color_suffix} 停止 BBR\n ${Green_font_prefix}4.${Font_color_suffix} 查看 BBR 状态\" && echo\necho -e \"${Green_font_prefix} [安装前 请注意] ${Font_color_suffix}\n1. 安装开启BBR，需要更换内核，存在更换失败等风险(重启后无法开机)\n2. 本脚本仅支持 Debian / Ubuntu 系统更换内核，OpenVZ和Docker 不支持更换内核\n3. Debian 更换内核过程中会提示 [ 是否终止卸载内核 ] ，请选择 ${Green_font_prefix} NO ${Font_color_suffix}\" && echo\n\tread -e -p \"(默认: 取消):\" bbr_num\n\t[[ -z \"${bbr_num}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${bbr_num} == \"1\" ]]; then\n\t\tInstall_BBR\n\telif [[ ${bbr_num} == \"2\" ]]; then\n\t\tStart_BBR\n\telif [[ ${bbr_num} == \"3\" ]]; then\n\t\tStop_BBR\n\telif [[ ${bbr_num} == \"4\" ]]; then\n\t\tStatus_BBR\n\telse\n\t\techo -e \"${Error} 请输入正确的数字(1-4)\" && exit 1\n\tfi\n}\nInstall_BBR(){\n\t[[ ${release} = \"centos\" ]] && echo -e \"${Error} 本脚本不支持 CentOS系统安装 BBR !\" && exit 1\n\tBBR_installation_status\n\tbash \"${BBR_file}\"\n}\nStart_BBR(){\n\tBBR_installation_status\n\tbash \"${BBR_file}\" start\n}\nStop_BBR(){\n\tBBR_installation_status\n\tbash \"${BBR_file}\" stop\n}\nStatus_BBR(){\n\tBBR_installation_status\n\tbash \"${BBR_file}\" status\n}\n# 其他功能\nOther_functions(){\n\techo && echo -e \"  你要做什么？\n\t\n  ${Green_font_prefix}1.${Font_color_suffix} 配置 BBR\n  ${Green_font_prefix}2.${Font_color_suffix} 配置 锐速(ServerSpeeder)\n  ${Green_font_prefix}3.${Font_color_suffix} 配置 LotServer(锐速母公司)\n  ${Tip} 锐速/LotServer/BBR 不支持 OpenVZ！\n  ${Tip} 锐速和LotServer不能共存！\n————————————\n  ${Green_font_prefix}4.${Font_color_suffix} 一键封禁 BT/PT/SPAM (iptables)\n  ${Green_font_prefix}5.${Font_color_suffix} 一键解封 BT/PT/SPAM (iptables)\n————————————\n  ${Green_font_prefix}6.${Font_color_suffix} 切换 ShadowsocksR日志输出模式\n  —— 说明：SSR默认只输出错误日志，此项可切换为输出详细的访问日志。\n  ${Green_font_prefix}7.${Font_color_suffix} 监控 ShadowsocksR服务端运行状态\n  —— 说明：该功能适合于SSR服务端经常进程结束，启动该功能后会每分钟检测一次，当进程不存在则自动启动SSR服务端。\" && echo\n\tread -e -p \"(默认: 取消):\" other_num\n\t[[ -z \"${other_num}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${other_num} == \"1\" ]]; then\n\t\tConfigure_BBR\n\telif [[ ${other_num} == \"2\" ]]; then\n\t\tConfigure_Server_Speeder\n\telif [[ ${other_num} == \"3\" ]]; then\n\t\tConfigure_LotServer\n\telif [[ ${other_num} == \"4\" ]]; then\n\t\tBanBTPTSPAM\n\telif [[ ${other_num} == \"5\" ]]; then\n\t\tUnBanBTPTSPAM\n\telif [[ ${other_num} == \"6\" ]]; then\n\t\tSet_config_connect_verbose_info\n\telif [[ ${other_num} == \"7\" ]]; then\n\t\tSet_crontab_monitor_ssr\n\telse\n\t\techo -e \"${Error} 请输入正确的数字 [1-7]\" && exit 1\n\tfi\n}\n# 封禁 BT PT SPAM\nBanBTPTSPAM(){\n\twget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ban_iptables.sh && chmod +x ban_iptables.sh && bash ban_iptables.sh banall\n\trm -rf ban_iptables.sh\n}\n# 解封 BT PT SPAM\nUnBanBTPTSPAM(){\n\twget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ban_iptables.sh && chmod +x ban_iptables.sh && bash ban_iptables.sh unbanall\n\trm -rf ban_iptables.sh\n}\nSet_config_connect_verbose_info(){\n\tSSR_installation_status\n\t[[ ! -e ${jq_file} ]] && echo -e \"${Error} JQ解析器 不存在，请检查 !\" && exit 1\n\tconnect_verbose_info=`${jq_file} '.connect_verbose_info' ${config_user_file}`\n\tif [[ ${connect_verbose_info} = \"0\" ]]; then\n\t\techo && echo -e \"当前日志模式: ${Green_font_prefix}简单模式（只输出错误日志）${Font_color_suffix}\" && echo\n\t\techo -e \"确定要切换为 ${Green_font_prefix}详细模式（输出详细连接日志+错误日志）${Font_color_suffix}？[y/N]\"\n\t\tread -e -p \"(默认: n):\" connect_verbose_info_ny\n\t\t[[ -z \"${connect_verbose_info_ny}\" ]] && connect_verbose_info_ny=\"n\"\n\t\tif [[ ${connect_verbose_info_ny} == [Yy] ]]; then\n\t\t\tssr_connect_verbose_info=\"1\"\n\t\t\tModify_config_connect_verbose_info\n\t\t\tRestart_SSR\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"当前日志模式: ${Green_font_prefix}详细模式（输出详细连接日志+错误日志）${Font_color_suffix}\" && echo\n\t\techo -e \"确定要切换为 ${Green_font_prefix}简单模式（只输出错误日志）${Font_color_suffix}？[y/N]\"\n\t\tread -e -p \"(默认: n):\" connect_verbose_info_ny\n\t\t[[ -z \"${connect_verbose_info_ny}\" ]] && connect_verbose_info_ny=\"n\"\n\t\tif [[ ${connect_verbose_info_ny} == [Yy] ]]; then\n\t\t\tssr_connect_verbose_info=\"0\"\n\t\t\tModify_config_connect_verbose_info\n\t\t\tRestart_SSR\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\nSet_crontab_monitor_ssr(){\n\tSSR_installation_status\n\tcrontab_monitor_ssr_status=$(crontab -l|grep \"ssrmu.sh monitor\")\n\tif [[ -z \"${crontab_monitor_ssr_status}\" ]]; then\n\t\techo && echo -e \"当前监控模式: ${Green_font_prefix}未开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要开启为 ${Green_font_prefix}ShadowsocksR服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动SSR服务端)[Y/n]\"\n\t\tread -e -p \"(默认: y):\" crontab_monitor_ssr_status_ny\n\t\t[[ -z \"${crontab_monitor_ssr_status_ny}\" ]] && crontab_monitor_ssr_status_ny=\"y\"\n\t\tif [[ ${crontab_monitor_ssr_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_ssr_cron_start\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\telse\n\t\techo && echo -e \"当前监控模式: ${Green_font_prefix}已开启${Font_color_suffix}\" && echo\n\t\techo -e \"确定要关闭为 ${Green_font_prefix}ShadowsocksR服务端运行状态监控${Font_color_suffix} 功能吗？(当进程关闭则自动启动SSR服务端)[y/N]\"\n\t\tread -e -p \"(默认: n):\" crontab_monitor_ssr_status_ny\n\t\t[[ -z \"${crontab_monitor_ssr_status_ny}\" ]] && crontab_monitor_ssr_status_ny=\"n\"\n\t\tif [[ ${crontab_monitor_ssr_status_ny} == [Yy] ]]; then\n\t\t\tcrontab_monitor_ssr_cron_stop\n\t\telse\n\t\t\techo && echo \"\t已取消...\" && echo\n\t\tfi\n\tfi\n}\ncrontab_monitor_ssr(){\n\tSSR_installation_status\n\tcheck_pid\n\tif [[ -z ${PID} ]]; then\n\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] 检测到 ShadowsocksR服务端 未运行 , 开始启动...\" | tee -a ${ssr_log_file}\n\t\t/etc/init.d/ssrmu start\n\t\tsleep 1s\n\t\tcheck_pid\n\t\tif [[ -z ${PID} ]]; then\n\t\t\techo -e \"${Error} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] ShadowsocksR服务端 启动失败...\" | tee -a ${ssr_log_file} && exit 1\n\t\telse\n\t\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] ShadowsocksR服务端 启动成功...\" | tee -a ${ssr_log_file} && exit 1\n\t\tfi\n\telse\n\t\techo -e \"${Info} [$(date \"+%Y-%m-%d %H:%M:%S %u %Z\")] ShadowsocksR服务端 进程运行正常...\" exit 0\n\tfi\n}\ncrontab_monitor_ssr_cron_start(){\n\tcrontab -l > \"$file/crontab.bak\"\n\tsed -i \"/ssrmu.sh monitor/d\" \"$file/crontab.bak\"\n\techo -e \"\\n* * * * * /bin/bash $file/ssrmu.sh monitor\" >> \"$file/crontab.bak\"\n\tcrontab \"$file/crontab.bak\"\n\trm -r \"$file/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"ssrmu.sh monitor\")\n\tif [[ -z ${cron_config} ]]; then\n\t\techo -e \"${Error} ShadowsocksR服务端运行状态监控功能 启动失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} ShadowsocksR服务端运行状态监控功能 启动成功 !\"\n\tfi\n}\ncrontab_monitor_ssr_cron_stop(){\n\tcrontab -l > \"$file/crontab.bak\"\n\tsed -i \"/ssrmu.sh monitor/d\" \"$file/crontab.bak\"\n\tcrontab \"$file/crontab.bak\"\n\trm -r \"$file/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"ssrmu.sh monitor\")\n\tif [[ ! -z ${cron_config} ]]; then\n\t\techo -e \"${Error} ShadowsocksR服务端运行状态监控功能 停止失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} ShadowsocksR服务端运行状态监控功能 停止成功 !\"\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/ssrmu\" ]]; then\n\t\trm -rf /etc/init.d/ssrmu\n\t\tService_SSR\n\tfi\n\tcd \"${file}\"\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh\" && chmod +x ssrmu.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\n# 显示 菜单状态\nmenu_status(){\n\tif [[ -e ${ssr_folder} ]]; then\n\t\tcheck_pid\n\t\tif [[ ! -z \"${PID}\" ]]; then\n\t\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\t\telse\n\t\t\techo -e \" 当前状态: ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\t\tfi\n\t\tcd \"${ssr_folder}\"\n\telse\n\t\techo -e \" 当前状态: ${Red_font_prefix}未安装${Font_color_suffix}\"\n\tfi\n}\ncheck_sys\n[[ ${release} != \"debian\" ]] && [[ ${release} != \"ubuntu\" ]] && [[ ${release} != \"centos\" ]] && echo -e \"${Error} 本脚本不支持当前系统 ${release} !\" && exit 1\naction=$1\nif [[ \"${action}\" == \"clearall\" ]]; then\n\tClear_transfer_all\nelif [[ \"${action}\" == \"monitor\" ]]; then\n\tcrontab_monitor_ssr\nelse\n\techo -e \"  ShadowsocksR MuJSON一键管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  ---- Toyo | doub.io/ss-jc60 ----\n\n  ${Green_font_prefix}1.${Font_color_suffix} 安装 ShadowsocksR\n  ${Green_font_prefix}2.${Font_color_suffix} 更新 ShadowsocksR\n  ${Green_font_prefix}3.${Font_color_suffix} 卸载 ShadowsocksR\n  ${Green_font_prefix}4.${Font_color_suffix} 安装 libsodium(chacha20)\n————————————\n  ${Green_font_prefix}5.${Font_color_suffix} 查看 账号信息\n  ${Green_font_prefix}6.${Font_color_suffix} 显示 连接信息\n  ${Green_font_prefix}7.${Font_color_suffix} 设置 用户配置\n  ${Green_font_prefix}8.${Font_color_suffix} 手动 修改配置\n  ${Green_font_prefix}9.${Font_color_suffix} 配置 流量清零\n————————————\n ${Green_font_prefix}10.${Font_color_suffix} 启动 ShadowsocksR\n ${Green_font_prefix}11.${Font_color_suffix} 停止 ShadowsocksR\n ${Green_font_prefix}12.${Font_color_suffix} 重启 ShadowsocksR\n ${Green_font_prefix}13.${Font_color_suffix} 查看 ShadowsocksR 日志\n————————————\n ${Green_font_prefix}14.${Font_color_suffix} 其他功能\n ${Green_font_prefix}15.${Font_color_suffix} 升级脚本\n \"\n\tmenu_status\n\techo && read -e -p \"请输入数字 [1-15]：\" num\ncase \"$num\" in\n\t1)\n\tInstall_SSR\n\t;;\n\t2)\n\tUpdate_SSR\n\t;;\n\t3)\n\tUninstall_SSR\n\t;;\n\t4)\n\tInstall_Libsodium\n\t;;\n\t5)\n\tView_User\n\t;;\n\t6)\n\tView_user_connection_info\n\t;;\n\t7)\n\tModify_Config\n\t;;\n\t8)\n\tManually_Modify_Config\n\t;;\n\t9)\n\tClear_transfer\n\t;;\n\t10)\n\tStart_SSR\n\t;;\n\t11)\n\tStop_SSR\n\t;;\n\t12)\n\tRestart_SSR\n\t;;\n\t13)\n\tView_Log\n\t;;\n\t14)\n\tOther_functions\n\t;;\n\t15)\n\tUpdate_Shell\n\t;;\n\t*)\n\techo -e \"${Error} 请输入正确的数字 [1-15]\"\n\t;;\nesac\nfi\n"
        },
        {
          "name": "ssrstatus.sh",
          "type": "blob",
          "size": 31.5986328125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS 6+/Debian 7+/Ubuntu 14.04+\n#\tDescription: ShadowsocksR Status\n#\tVersion: 1.0.5\n#\tAuthor: Toyo\n#=================================================\n\nsh_ver=\"1.0.5\"\nTimeout=\"10\"\nTest_URL=\"https://www.bing.com\"\nWeb_file=\"/usr/local/SSRStatus\"\nSSR_folder=\"/root/shadowsocksr/shadowsocks\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\nlog_file=\"${file}/ssr_status.log\"\nconfig_file=\"${file}/ssr_status.conf\"\nJSON_file=\"/usr/local/SSRStatus/json/stats.json\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\" && Error=\"${Red_font_prefix}[错误]${Font_color_suffix}\" && Tip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\t#bit=`uname -m`\n}\ncheck_installed_server_status(){\n\t[[ ! -e \"${Web_file}\" ]] && echo -e \"${Error} SSRStatus Web网页文件没有安装，请检查 !\" && exit 1\n}\nset_config_ip(){\n\techo \"请输入 ShadowsocksR 账号服务器公网IP\"\n\tread -e -p \"(默认取消):\" ip\n\t[[ -z \"${ip}\" ]] && echo \"已取消...\" && exit 1\n\techo && echo -e \"\tI   P : ${Red_font_prefix}${ip}${Font_color_suffix}\" && echo\n}\nset_config_port(){\n\twhile true\n\tdo\n\techo -e \"请输入 ShadowsocksR 账号端口\"\n\tread -e -p \"(默认: 2333):\" port\n\t[[ -z \"$port\" ]] && port=\"2333\"\n\techo $((${port}+0)) &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${port} -ge 1 ]] && [[ ${port} -le 65535 ]]; then\n\t\t\techo && echo -e \"\t端口 : ${Red_font_prefix}${port}${Font_color_suffix}\" && echo\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字！\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字！\"\n\tfi\n\tdone\n}\nset_config_password(){\n\techo \"请输入 ShadowsocksR 账号密码\"\n\tread -e -p \"(默认: doub.io):\" passwd\n\t[[ -z \"${passwd}\" ]] && passwd=\"doub.io\"\n\techo && echo -e \"\t密码 : ${Red_font_prefix}${passwd}${Font_color_suffix}\" && echo\n}\nset_config_method(){\n\techo -e \"请选择要设置的ShadowsocksR账号 加密方式\n ${Green_font_prefix} 1.${Font_color_suffix} none\n \n ${Green_font_prefix} 2.${Font_color_suffix} rc4\n ${Green_font_prefix} 3.${Font_color_suffix} rc4-md5\n ${Green_font_prefix} 4.${Font_color_suffix} rc4-md5-6\n \n ${Green_font_prefix} 5.${Font_color_suffix} aes-128-ctr\n ${Green_font_prefix} 6.${Font_color_suffix} aes-192-ctr\n ${Green_font_prefix} 7.${Font_color_suffix} aes-256-ctr\n \n ${Green_font_prefix} 8.${Font_color_suffix} aes-128-cfb\n ${Green_font_prefix} 9.${Font_color_suffix} aes-192-cfb\n ${Green_font_prefix}10.${Font_color_suffix} aes-256-cfb\n \n ${Green_font_prefix}11.${Font_color_suffix} aes-128-cfb8\n ${Green_font_prefix}12.${Font_color_suffix} aes-192-cfb8\n ${Green_font_prefix}13.${Font_color_suffix} aes-256-cfb8\n \n ${Green_font_prefix}14.${Font_color_suffix} salsa20\n ${Green_font_prefix}15.${Font_color_suffix} chacha20\n ${Green_font_prefix}16.${Font_color_suffix} chacha20-ietf\n ${Tip} salsa20/chacha20-*系列加密方式，需要额外安装依赖 libsodium ，否则会无法启动ShadowsocksR !\" && echo\n\tread -e -p \"(默认: 5. aes-128-ctr):\" method\n\t[[ -z \"${method}\" ]] && method=\"5\"\n\tif [[ ${method} == \"1\" ]]; then\n\t\tmethod=\"none\"\n\telif [[ ${method} == \"2\" ]]; then\n\t\tmethod=\"rc4\"\n\telif [[ ${method} == \"3\" ]]; then\n\t\tmethod=\"rc4-md5\"\n\telif [[ ${method} == \"4\" ]]; then\n\t\tmethod=\"rc4-md5-6\"\n\telif [[ ${method} == \"5\" ]]; then\n\t\tmethod=\"aes-128-ctr\"\n\telif [[ ${method} == \"6\" ]]; then\n\t\tmethod=\"aes-192-ctr\"\n\telif [[ ${method} == \"7\" ]]; then\n\t\tmethod=\"aes-256-ctr\"\n\telif [[ ${method} == \"8\" ]]; then\n\t\tmethod=\"aes-128-cfb\"\n\telif [[ ${method} == \"9\" ]]; then\n\t\tmethod=\"aes-192-cfb\"\n\telif [[ ${method} == \"10\" ]]; then\n\t\tmethod=\"aes-256-cfb\"\n\telif [[ ${method} == \"11\" ]]; then\n\t\tmethod=\"aes-128-cfb8\"\n\telif [[ ${method} == \"12\" ]]; then\n\t\tmethod=\"aes-192-cfb8\"\n\telif [[ ${method} == \"13\" ]]; then\n\t\tmethod=\"aes-256-cfb8\"\n\telif [[ ${method} == \"14\" ]]; then\n\t\tmethod=\"salsa20\"\n\telif [[ ${method} == \"15\" ]]; then\n\t\tmethod=\"chacha20\"\n\telif [[ ${method} == \"16\" ]]; then\n\t\tmethod=\"chacha20-ietf\"\n\telse\n\t\tmethod=\"aes-128-ctr\"\n\tfi\n\techo && echo ${Separator_1} && echo -e \"\t加密 : ${Red_font_prefix}${method}${Font_color_suffix}\" && echo ${Separator_1} && echo\n}\nset_config_protocol(){\n\techo -e \"请选择ShadowsocksR账号 协议插件\n ${Green_font_prefix}1.${Font_color_suffix} origin\n ${Green_font_prefix}2.${Font_color_suffix} auth_sha1_v4\n ${Green_font_prefix}3.${Font_color_suffix} auth_aes128_md5\n ${Green_font_prefix}4.${Font_color_suffix} auth_aes128_sha1\n ${Green_font_prefix}5.${Font_color_suffix} auth_chain_a\" && echo\n\tread -e -p \"(默认: 2. auth_sha1_v4):\" protocol\n\t[[ -z \"${protocol}\" ]] && protocol=\"2\"\n\tif [[ ${protocol} == \"1\" ]]; then\n\t\tprotocol=\"origin\"\n\telif [[ ${protocol} == \"2\" ]]; then\n\t\tprotocol=\"auth_sha1_v4\"\n\telif [[ ${protocol} == \"3\" ]]; then\n\t\tprotocol=\"auth_aes128_md5\"\n\telif [[ ${protocol} == \"4\" ]]; then\n\t\tprotocol=\"auth_aes128_sha1\"\n\telif [[ ${protocol} == \"5\" ]]; then\n\t\tprotocol=\"auth_chain_a\"\n\telse\n\t\tprotocol=\"auth_sha1_v4\"\n\tfi\n\techo && echo -e \"\t协议 : ${Red_font_prefix}${protocol}${Font_color_suffix}\" && echo\n}\nset_config_obfs(){\n\techo -e \"请选择ShadowsocksR账号 混淆插件\n ${Green_font_prefix}1.${Font_color_suffix} plain\n ${Green_font_prefix}2.${Font_color_suffix} http_simple\n ${Green_font_prefix}3.${Font_color_suffix} http_post\n ${Green_font_prefix}4.${Font_color_suffix} random_head\n ${Green_font_prefix}5.${Font_color_suffix} tls1.2_ticket_auth\" && echo\n\tread -e -p \"(默认: 5. tls1.2_ticket_auth):\" obfs\n\t[[ -z \"${obfs}\" ]] && obfs=\"5\"\n\tif [[ ${obfs} == \"1\" ]]; then\n\t\tobfs=\"plain\"\n\telif [[ ${obfs} == \"2\" ]]; then\n\t\tobfs=\"http_simple\"\n\telif [[ ${obfs} == \"3\" ]]; then\n\t\tobfs=\"http_post\"\n\telif [[ ${obfs} == \"4\" ]]; then\n\t\tobfs=\"random_head\"\n\telif [[ ${obfs} == \"5\" ]]; then\n\t\tobfs=\"tls1.2_ticket_auth\"\n\telse\n\t\tobfs=\"tls1.2_ticket_auth\"\n\tfi\n\techo && echo -e \"\t混淆 : ${Red_font_prefix}${obfs}${Font_color_suffix}\" && echo\n}\nset_config_like(){\n\techo \"请输入 ShadowsocksR 的链接(SS/SSR链接皆可，如 ss://xxxx ssr://xxxx)\"\n\tread -e -p \"(默认回车取消):\" Like\n\t[[ -z \"${Like}\" ]] && echo \"已取消...\" && exit 1\n\techo && echo -e \"\t链接 : ${Red_font_prefix}${Like}${Font_color_suffix}\" && echo\n}\nset_config_user(){\n\techo -e \"请输入选择输入方式\n ${Green_font_prefix}1.${Font_color_suffix} 输入ShadowsocksR账号全部信息(Shadowsocks原版也可以)\n ${Green_font_prefix}2.${Font_color_suffix} 输入ShadowsocksR账号的 SSR链接(Shadowsocks原版也可以)\"\n\tread -e -p \"(默认:2):\" enter_type\n\t[[ -z \"${enter_type}\" ]] && enter_type=\"2\"\n\tif [[ ${enter_type} == \"1\" ]]; then\n\t\techo -e \"下面依次开始输入要检测可用性的 ShadowsocksR账号信息。\" && echo\n\t\tset_config_ip\n\t\tset_config_port\n\t\tset_config_password\n\t\tset_config_method\n\t\tset_config_protocol\n\t\tset_config_obfs\n\t\treturn 1\n\telif [[ ${enter_type} == \"2\" ]]; then\n\t\tset_config_like\n\t\treturn 2\n\telse\n\t\tset_config_like\n\t\treturn 2\n\tfi\n}\nset_config_name(){\n\techo \"请输入 ShadowsocksR 账号的名称(用于区分，取个名字，可重复)\"\n\tread -e -p \"(默认取消):\" Config_Name\n\t[[ -z \"${Config_Name}\" ]] && echo \"已取消...\" && exit 1\n\techo && echo -e \"\t名称 : ${Red_font_prefix}${Config_Name}${Font_color_suffix}\" && echo\n}\nset_config_location(){\n\techo \"请输入 ShadowsocksR 账号的位置(用于区分，可重复)\"\n\tread -e -p \"(默认取消):\" Config_Location\n\t[[ -z \"${Config_Location}\" ]] && echo \"已取消...\" && exit 1\n\techo && echo -e \"\t位置 : ${Red_font_prefix}${Config_Location}${Font_color_suffix}\" && echo\n}\nSet_server(){\n\techo -e \"请输入 SSRStatus 网站要设置的 域名[server]\n默认为本机IP为域名，例如输入: toyoo.ml，如果要使用本机IP，请留空直接回车\"\n\tread -e -p \"(默认: 本机IP):\" server_s\n\t[[ -z \"$server_s\" ]] && server_s=\"\"\n\t\n\techo && echo -e \"\tIP/域名[server]: ${Red_background_prefix} ${server_s} ${Font_color_suffix}\" && echo\n}\nSet_server_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 SSRStatus 网站要设置的 域名/IP的端口[1-65535]（如果是域名的话，一般建议用 http 80 端口）\"\n\t\tread -e -p \"(默认: 8888):\" server_port_s\n\t\t[[ -z \"$server_port_s\" ]] && server_port_s=\"8888\"\n\t\techo $((${server_port_s}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${server_port_s} -ge 1 ]] && [[ ${server_port_s} -le 65535 ]]; then\n\t\t\t\techo && echo -e \"\tIP/域名[server]: ${Red_background_prefix} ${server_port_s} ${Font_color_suffix}\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\tdone\n}\nSet_crontab(){\n\techo -e \"请选择你要设置的ShadowsocksR账号检测时间间隔（如账号很多，请不要设置时间间隔过小）\n ${Green_font_prefix}1.${Font_color_suffix} 5分钟\n ${Green_font_prefix}2.${Font_color_suffix} 10分钟\n ${Green_font_prefix}3.${Font_color_suffix} 20分钟\n ${Green_font_prefix}4.${Font_color_suffix} 30分钟\n ${Green_font_prefix}5.${Font_color_suffix} 40分钟\n ${Green_font_prefix}6.${Font_color_suffix} 50分钟\n ${Green_font_prefix}7.${Font_color_suffix} 1小时\n ${Green_font_prefix}8.${Font_color_suffix} 2小时\n ${Green_font_prefix}9.${Font_color_suffix} 自定义输入\" && echo\n\tread -e -p \"(默认: 2. 10分钟):\" Crontab_time\n\t[[ -z \"${Crontab_time}\" ]] && Crontab_time=\"2\"\n\tif [[ ${Crontab_time} == \"1\" ]]; then\n\t\tCrontab_time=\"*/5 * * * *\"\n\telif [[ ${Crontab_time} == \"2\" ]]; then\n\t\tCrontab_time=\"*/10 * * * *\"\n\telif [[ ${Crontab_time} == \"3\" ]]; then\n\t\tCrontab_time=\"*/20 * * * *\"\n\telif [[ ${Crontab_time} == \"4\" ]]; then\n\t\tCrontab_time=\"*/30 * * * *\"\n\telif [[ ${Crontab_time} == \"5\" ]]; then\n\t\tCrontab_time=\"*/40 * * * *\"\n\telif [[ ${Crontab_time} == \"6\" ]]; then\n\t\tCrontab_time=\"*/50 * * * *\"\n\telif [[ ${Crontab_time} == \"7\" ]]; then\n\t\tCrontab_time=\"0 * * * *\"\n\telif [[ ${Crontab_time} == \"8\" ]]; then\n\t\tCrontab_time=\"0 */2 * * *\"\n\telif [[ ${Crontab_time} == \"9\" ]]; then\n\t\tSet_crontab_customize\n\telse\n\t\tCrontab_time=\"*/10 * * * *\"\n\tfi\n\techo && echo -e \"\t间隔时间 : ${Red_font_prefix}${Crontab_time}${Font_color_suffix}\" && echo\n\tAdd_Crontab\n}\nSet_crontab_customize(){\n\techo -e \"请输入ShadowsocksR账号检测时间间隔（如账号很多，请不要设置时间间隔过小）\n === 格式说明 ===\n * * * * * 分别对应 分钟 小时 日份 月份 星期\n ${Green_font_prefix} */10 * * * * ${Font_color_suffix} 代表每10分钟 检测一次\n ${Green_font_prefix} 0 */2 * * * ${Font_color_suffix} 代表每2小时的0分 检测一次\n ${Green_font_prefix} 10 * * * * ${Font_color_suffix} 代表每小时的第10分 检测一次\n ${Green_font_prefix} * 2 * * * ${Font_color_suffix} 代表每天的第2点 检测一次\n ${Green_font_prefix} 0 0 2 * * ${Font_color_suffix} 代表每2天的0点0分 检测一次\" && echo\n\tread -e -p \"(默认: */10 * * * *):\" Crontab_time\n\t[[ -z \"${Crontab_time}\" ]] && Crontab_time=\"*/10 * * * *\"\n}\nGO(){\n\techo -e \"========== 开始记录测试信息 [$(date '+%Y-%m-%d %H:%M:%S')]==========\\n\" >> ${log_file}\n}\nexit_GG(){\n\techo -e \"========== 记录测试信息结束 [$(date '+%Y-%m-%d %H:%M:%S')]==========\\n\\n\" >> ${log_file}\n\tif [[ ${analysis_type} != \"add\" ]]; then\n\t\tConfig_JSON=\"{\\n\\\"servers\\\": [\\n${Config_JSON}],\\n\\\"updated\\\": \\\"$(date +%s)\\\"\\n}\"\n\t\techo -e \"${Config_JSON}\" > ${JSON_file}\n\tfi\n\texit 0\n}\nContinue_if(){\n\tConfig_Status=\"false\"\n\t[[ -z ${ip} ]] && ip=\"---.---.---.---\"\n\tif [[ ${Like_num} == ${integer} ]]; then\n\t\tConfig_JSON=\"${Config_JSON}{ \\\"ip\\\": \\\"${ip}\\\", \\\"name\\\": \\\"${Config_Name}\\\", \\\"type\\\": \\\"${Config_Type}\\\", \\\"type_1\\\": \\\"${Config_Type_1}\\\", \\\"location\\\": \\\"${Config_Location}\\\", \\\"status\\\": ${Config_Status}, \\\"time\\\": \\\"$(date '+%Y-%m-%d %H:%M:%S')\\\"  }\\n\"\n\telse\n\t\tConfig_JSON=\"${Config_JSON}{ \\\"ip\\\": \\\"${ip}\\\", \\\"name\\\": \\\"${Config_Name}\\\", \\\"type\\\": \\\"${Config_Type}\\\", \\\"type_1\\\": \\\"${Config_Type_1}\\\", \\\"location\\\": \\\"${Config_Location}\\\", \\\"status\\\": ${Config_Status}, \\\"time\\\": \\\"$(date '+%Y-%m-%d %H:%M:%S')\\\"  },\\n\"\n\tfi\n\tcontinue\n}\nGet_Like(){\n\t[[ ! -e ${config_file} ]] && echo -e \"${Error} 配置文件不存在！(${config_file})\" | tee -a ${log_file} && exit 0\n\tLike=$(cat \"${config_file}\")\n\t[[ -z ${Like} ]] && echo -e \"${Error} 获取SS/SSR账号信息失败或配置文件为空 !\" | tee -a ${log_file} && exit 0\n\tLike_num=$(echo -e \"${Like}\"|wc -l)\n}\nAnalysis_Config(){\n\tConfig=$(echo -e \"${Like}\"|sed -n \"$1\"p)\n\tConfig_info_base64=$(echo -e \"${Config}\"|awk -F '###' '{print $1}')\n\tConfig_Name=$(echo -e \"${Config}\"|awk -F '###' '{print $2}')\n\tConfig_Location=$(echo -e \"${Config}\"|awk -F '###' '{print $3}')\n\tConfig_Disabled=$(echo -e \"${Config}\"|awk -F '###' '{print $4}')\n\tif [[ ${Config_Disabled} == \"true\" ]]; then\n\t\techo -e \"${Info} 账号已禁用，跳过检测 [${Config_info_base64}] !\" | tee -a ${log_file}\n\t\techo \"---------------------------------------------------------\"\n\t\tcontinue\n\telse\n\t\tConfig_info_base64_determine=$(echo -e ${Config_info_base64}|cut -c 1-6)\n\t\tif [[ \"${Config_info_base64_determine}\" == \"ssr://\" ]]; then\n\t\t\tConfig_Type=\"ShadowsocksR\"\n\t\t\tConfig_Type_1=\"SSR\"\n\t\t\tConfig_info=$(echo -e \"${Config_info_base64}\"|cut -c 7-2000|base64 -d)\n\t\t\tif [[ -z ${Config_info} ]]; then\n\t\t\t\techo -e \"${Error} Base64解密失败 [${Config_info_base64}] !\" | tee -a ${log_file}\n\t\t\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\t\t\texit_GG\n\t\t\t\telse\n\t\t\t\t\tContinue_if\n\t\t\t\tfi\n\t\t\tfi\n\t\t\tssr_config\n\t\telse\n\t\t\tConfig_Type=\"Shadowsocks\"\n\t\t\tConfig_Type_1=\"SS\"\n\t\t\tConfig_info=$(echo -e \"${Config_info_base64}\"|cut -c 6-2000|base64 -d)\n\t\t\tif [[ -z ${Config_info} ]]; then\n\t\t\t\techo -e \"${Error} Base64解密失败 [${Config_info_base64}] !\" | tee -a ${log_file}\n\t\t\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\t\t\texit_GG\n\t\t\t\telse\n\t\t\t\t\tContinue_if\n\t\t\t\tfi\n\t\t\tfi\n\t\t\tss_config\n\t\tfi\n\tfi\n}\nss_config(){\n\tzuo=$(echo -e \"${Config_info}\"|awk -F \"@\" '{print $1}')\n\tyou=$(echo -e \"${Config_info}\"|awk -F \"@\" '{print $2}')\n\tport=$(echo -e \"${you}\"|awk -F \":\" '{print $NF}')\n\tip=$(echo -e \"${you}\"|awk -F \":${port}\" '{print $1}')\n\tif [[ $(echo -e \"${ip}\"|wc -L) -lt 7 ]]; then\n\t\techo -e \"${Error} 错误，IP格式错误或为 ipv6地址[ ${ip} ]\" | tee -a ${log_file}\n\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\texit_GG\n\t\telse\n\t\t\tContinue_if\n\t\tfi\n\tfi\n\tmethod=$(echo -e \"${zuo}\"|awk -F \":\" '{print $1}')\n\tpasswd=$(echo -e \"${zuo}\"|awk -F \":\" '{print $2}')\n\tprotocol=\"origin\"\n\tobfs=\"plain\"\n\techo -e \"${ip} ${port} ${method} ${passwd} ${protocol} ${obfs}\"\n\tif [[ -z ${ip} ]] || [[ -z ${port} ]] || [[ -z ${method} ]] || [[ -z ${passwd} ]] || [[ -z ${protocol} ]] || [[ -z ${obfs} ]]; then\n\t\techo -e \"${Error} 错误，有部分 账号参数为空！[ ${ip} ,${port} ,${method} ,${passwd} ,${protocol} ,${obfs} ]\" | tee -a ${log_file}\n\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\texit_GG\n\t\telse\n\t\t\tContinue_if\n\t\tfi\n\tfi\n}\nssr_config(){\n\tzuo=$(echo -e \"${Config_info}\"|awk -F \"/?\" '{print $1}')\n\tpasswd_base64=$(echo -e \"${zuo}\"|awk -F \":\" '{print $NF}')\n\tzuo=$(echo -e \"${Config_info}\"|awk -F \":${passwd_base64}\" '{print $1}')\n\tobfs=$(echo -e \"${zuo}\"|awk -F \":\" '{print $NF}')\n\tzuo=$(echo -e \"${Config_info}\"|awk -F \":${obfs}\" '{print $1}')\n\tmethod=$(echo -e \"${zuo}\"|awk -F \":\" '{print $NF}')\n\tzuo=$(echo -e \"${Config_info}\"|awk -F \":${method}\" '{print $1}')\n\tprotocol=$(echo -e \"${zuo}\"|awk -F \":\" '{print $NF}')\n\tzuo=$(echo -e \"${Config_info}\"|awk -F \":${protocol}\" '{print $1}')\n\tport=$(echo -e \"${zuo}\"|awk -F \":\" '{print $NF}')\n\tip=$(echo -e \"${Config_info}\"|awk -F \":${port}\" '{print $1}')\n\tif [[ $(echo -e \"${ip}\"|wc -L) -lt 7 ]]; then\n\t\techo -e \"${Error} 错误，IP格式错误[ ${ip} ]\" | tee -a ${log_file}\n\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\texit_GG\n\t\telse\n\t\t\tContinue_if\n\t\tfi\n\tfi\n\tpasswd=$(echo -e \"${passwd_base64}\"|base64 -d)\n\techo -e \"${ip} ${port} ${method} ${passwd} ${protocol} ${obfs}\"\n\tif [[ -z ${ip} ]] || [[ -z ${port} ]] || [[ -z ${method} ]] || [[ -z ${passwd} ]] || [[ -z ${protocol} ]] || [[ -z ${obfs} ]]; then\n\t\techo -e \"${Error} 错误，有部分 账号参数为空！[ ${ip} ,${port} ,${method} ,${passwd} ,${protocol} ,${obfs} ]\" | tee -a ${log_file}\n\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\texit_GG\n\t\telse\n\t\t\tContinue_if\n\t\tfi\n\tfi\n}\nStart_Client(){\n\tnohup python \"${SSR_folder}/local.py\" -b \"127.0.0.1\" -l \"${local_port}\" -s \"${ip}\" -p \"${port}\" -k \"${passwd}\" -m \"${method}\" -O \"${protocol}\" -o \"${obfs}\" > /dev/null 2>&1 &\n\tsleep 2s\n\tPID=$(ps -ef |grep -v grep | grep \"local.py\" | grep \"${local_port}\" |awk '{print $2}')\n\tif [[ -z ${PID} ]]; then\n\t\techo -e \"${Error} ShadowsocksR客户端 启动失败，请检查 !\" | tee -a ${log_file}\n\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\texit_GG\n\t\telse\n\t\t\tContinue_if\n\t\tfi\n\tfi\n}\nSocks5_test(){\n\tTest_results=$(curl --socks5 127.0.0.1:${local_port} -k -m ${Timeout} -s \"${Test_URL}\")\n\tif [[ -z ${Test_results} ]]; then\n\t\techo -e \"${Error} [${ip}] 检测失败，账号不可用，重新尝试一次...\" | tee -a ${log_file}\n\t\tsleep 2s\n\t\tTest_results=$(curl --socks5 127.0.0.1:${local_port} -k -m ${Timeout} -s \"${Test_URL}\")\n\t\tif [[ -z ${Test_results} ]]; then\n\t\t\techo -e \"${Error} [${ip}] 检测失败，账号不可用(已重新尝试) !\" | tee -a ${log_file}\n\t\t\tConfig_Status=\"false\"\n\t\telse\n\t\t\techo -e \"${Info} [${ip}] 检测成功，账号可用 !\" | tee -a ${log_file}\n\t\t\tConfig_Status=\"true\"\n\t\tfi\n\telse\n\t\techo -e \"${Info} [${ip}] 检测成功，账号可用 !\" | tee -a ${log_file}\n\t\tConfig_Status=\"true\"\n\tfi\n\tkill -9 ${PID}\n\tPID=$(ps -ef |grep -v grep | grep \"local.py\" | grep \"${local_port}\" |awk '{print $2}')\n\tif [[ ! -z ${PID} ]]; then\n\t\techo -e \"${Error} ShadowsocksR客户端 停止失败，请检查 !\" | tee -a ${log_file}\n\t\tif [[ ${analysis_type} == \"add\" ]]; then\n\t\t\texit_GG\n\t\telse\n\t\t\tContinue_if\n\t\tfi\n\tfi\n\techo \"---------------------------------------------------------\"\n\tif [[ ${analysis_type} != \"add\" ]]; then\n\t\tif [[ ${Like_num} == ${integer} ]]; then\n\t\t\tConfig_JSON=\"${Config_JSON}{ \\\"ip\\\": \\\"${ip}\\\", \\\"name\\\": \\\"${Config_Name}\\\", \\\"type\\\": \\\"${Config_Type}\\\", \\\"type_1\\\": \\\"${Config_Type_1}\\\", \\\"location\\\": \\\"${Config_Location}\\\", \\\"status\\\": ${Config_Status}, \\\"time\\\": \\\"$(date '+%Y-%m-%d %H:%M:%S')\\\"  }\\n\"\n\t\telse\n\t\t\tConfig_JSON=\"${Config_JSON}{ \\\"ip\\\": \\\"${ip}\\\", \\\"name\\\": \\\"${Config_Name}\\\", \\\"type\\\": \\\"${Config_Type}\\\", \\\"type_1\\\": \\\"${Config_Type_1}\\\", \\\"location\\\": \\\"${Config_Location}\\\", \\\"status\\\": ${Config_Status}, \\\"time\\\": \\\"$(date '+%Y-%m-%d %H:%M:%S')\\\"  },\\n\"\n\t\tfi\n\tfi\n}\nrand(){\n\tmin=1000\n\tmax=$((2000-$min+1))\n\tnum=$(date +%s%N)\n\techo $(($num%$max+$min))\n}\nTest(){\n\tGO\n\tGet_Like\n\tcd ${SSR_folder}\n\tlocal_port=$(rand)\n\tfor((integer = 1; integer <= \"${Like_num}\"; integer++))\n\tdo\n\t\tAnalysis_Config \"${integer}\"\n\t\tStart_Client\n\t\tSocks5_test\n\tdone\n\texit_GG\n}\nTest_add(){\n\tanalysis_type=\"add\"\n\tGO\n\tcd ${SSR_folder}\n\tlocal_port=$(rand)\n\tset_config_user\n\t[[ $? == 2 ]] && Analysis_Config \"1\"\n\tStart_Client\n\tSocks5_test\n\texit_GG\n}\nTest_one(){\n\tList_SSRStatus\n\tcd ${SSR_folder}\n\tlocal_port=$(rand)\n\twhile true\n\tdo\n\techo -e \"请选择你要单独测试的账号序号\"\n\tread -e -p \"(默认取消):\" Test_one_num\n\t[[ -z \"${Test_one_num}\" ]] && echo \"已取消...\" && exit 1\n\techo $((${Test_one_num}+0)) &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${Test_one_num} -ge 1 ]] && [[ ${Test_one_num} -le ${Like_num} ]]; then\n\t\t\tanalysis_type=\"add\" && Analysis_Config \"${Test_one_num}\"\n\t\t\tStart_Client\n\t\t\tSocks5_test\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字！\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字！\"\n\tfi\n\tdone\n}\nView_log(){\n\t[[ ! -e ${log_file} ]] && echo -e \"${Error} 找不到 日志文件！(${log_file})\"\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${log_file}${Font_color_suffix} 命令。\" && echo\n\tcat \"${log_file}\"\n}\nSet_SSRStatus(){\n\tcheck_installed_server_status\n\techo && echo -e \" 你要做什么？\n\t\n ${Green_font_prefix} 1.${Font_color_suffix} 添加 账号配置\n ${Green_font_prefix} 2.${Font_color_suffix} 删除 账号配置\n ${Green_font_prefix} 3.${Font_color_suffix} 修改 账号配置\n————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启用/禁用 账号配置\n 注意：添加/修改/删除 账号配置后，不会立即更新，需要自动(定时)/手动检测一次所有账号，网页才会更新 !\" && echo\n\tread -e -p \"(默认: 取消):\" server_num\n\t[[ -z \"${server_num}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${server_num} == \"1\" ]]; then\n\t\tAdd_SSRStatus\n\telif [[ ${server_num} == \"2\" ]]; then\n\t\tDel_SSRStatus\n\telif [[ ${server_num} == \"3\" ]]; then\n\t\tModify_SSRStatus\n\telif [[ ${server_num} == \"4\" ]]; then\n\t\tModify_SSRStatus_disabled\n\telse\n\t\techo -e \"${Error} 请输入正确的数字[1-4]\" && exit 1\n\tfi\n}\nList_SSRStatus(){\n\tGet_Like\n\techo -e \"目前有 ${Like_num} 个账号配置\\n$(echo -e \"${Like}\"|grep -n \"#\")\"\n}\nAdd_SSRStatus(){\n\tset_config_user\n\tif [[ $? == 1 ]]; then\n\t\tif [[ ${protocol} == \"origin\" ]] && [[ ${obfs} == \"plain\" ]]; then\n\t\t\tLike_base64=$(echo -n \"${method}:${passwd}@${ip}:${port}\"|base64|sed ':a;N;s/\\n/ /g;ta'|sed 's/ //g;s/=//g')\n\t\t\tLike=\"ss://\"${Like_base64}\n\t\telse\n\t\t\tpasswd_base64=$(echo -n \"${passwd}\"|base64|sed ':a;N;s/\\n/ /g;ta'|sed 's/ //g;s/=//g')\n\t\t\tLike_base64=$(echo -n \"${ip}:${port}:${protocol}:${method}:${obfs}:${passwd_base64}\"|base64|sed ':a;N;s/\\n/ /g;ta'|sed 's/ //g;s/=//g')\n\t\t\tLike=\"ssr://\"${Like_base64}\n\t\tfi\n\tfi\n\tset_config_name\n\tset_config_location\n\tLike=\"${Like}###${Config_Name}###${Config_Location}###false\"\n\techo -e \"${Like}\" >> ${config_file}\n\tif [[ $? == 0 ]]; then\n\t\techo -e \"${Info} 添加成功 ! [${Like}]\"\n\telse\n\t\techo -e \"${Error} 添加失败 ! [${Like}]\"\n\tfi\n}\nDel_SSRStatus(){\n\tList_SSRStatus\n\t[[ ${Like_num} == 1 ]] && echo -e \"${Error} 当前仅剩一个账号配置，无法删除 !\" && exit 0\n\twhile true\n\tdo\n\techo -e \"请选择你要删除的账号序号\"\n\tread -e -p \"(默认取消):\" Del_num\n\t[[ -z \"${Del_num}\" ]] && echo \"已取消...\" && exit 1\n\techo $((${Del_num}+0)) &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${Del_num} -ge 1 ]] && [[ ${Del_num} -le ${Like_num} ]]; then\n\t\t\tsed -i \"${Del_num}d\" ${config_file}\n\t\t\tif [[ $? == 0 ]]; then\n\t\t\t\techo -e \"${Info} 删除成功 ! [${Del_num}]\"\n\t\t\telse\n\t\t\t\techo -e \"${Error} 删除失败 ! [${Del_num}]\"\n\t\t\tfi\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字！\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字！\"\n\tfi\n\tdone\n}\nModify_SSRStatus(){\n\tList_SSRStatus\n\twhile true\n\tdo\n\techo -e \"请选择你要修改的账号序号\"\n\tread -e -p \"(默认取消):\" Modify_num\n\t[[ -z \"${Modify_num}\" ]] && echo \"已取消...\" && exit 1\n\techo $((${Modify_num}+0)) &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${Modify_num} -ge 1 ]] && [[ ${Modify_num} -le ${Like_num} ]]; then\n\t\t\tset_config_user\n\t\t\tif [[ $? == 1 ]]; then\n\t\t\t\tif [[ ${protocol} == \"origin\" ]] && [[ ${obfs} == \"plain\" ]]; then\n\t\t\t\t\tLike_base64=$(echo -n \"${method}:${passwd}@${ip}:${port}\"|base64|sed ':a;N;s/\\n/ /g;ta'|sed 's/ //g;s/=//g')\n\t\t\t\t\tLike=\"ss://\"${Like_base64}\n\t\t\t\telse\n\t\t\t\t\tpasswd_base64=$(echo -n \"${passwd}\"|base64|sed ':a;N;s/\\n/ /g;ta'|sed 's/ //g;s/=//g')\n\t\t\t\t\tLike_base64=$(echo -n \"${ip}:${port}:${protocol}:${method}:${obfs}:${passwd_base64}\"|base64|sed ':a;N;s/\\n/ /g;ta'|sed 's/ //g;s/=//g')\n\t\t\t\t\tLike=\"ssr://\"${Like_base64}\n\t\t\t\tfi\n\t\t\tfi\n\t\t\tset_config_name\n\t\t\tset_config_location\n\t\t\tLike=\"${Like}###${Config_Name}###${Config_Location}###false\"\n\t\t\tsed -i \"${Modify_num}d\" ${config_file}\n\t\t\tsed -i \"${Modify_num}i\\\\${Like}\" ${config_file}\n\t\t\tif [[ $? == 0 ]]; then\n\t\t\t\techo -e \"${Info} 修改成功 ! [${Like}]\"\n\t\t\telse\n\t\t\t\techo -e \"${Error} 修改失败 ! [${Like}]\"\n\t\t\tfi\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字！\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字！\"\n\tfi\n\tdone\n}\nModify_SSRStatus_disabled(){\n\tList_SSRStatus\n\twhile true\n\tdo\n\techo -e \"请选择你要启用/禁用的账号序号\"\n\tread -e -p \"(默认取消):\" Modify_num\n\t[[ -z \"${Modify_num}\" ]] && echo \"已取消...\" && exit 1\n\techo $((${Modify_num}+0)) &>/dev/null\n\tif [[ $? -eq 0 ]]; then\n\t\tif [[ ${Modify_num} -ge 1 ]] && [[ ${Modify_num} -le ${Like_num} ]]; then\n\t\t\tConfig_old=$(echo -e \"${Like}\"|sed -n \"${Modify_num}\"p)\n\t\t\techo -e \"${Config_old}\"\n\t\t\tConfig_old_Disabled=$(echo -e \"${Config_old}\"|awk -F '###' '{print $4}')\n\t\t\tConfig_old=$(echo -e \"${Config_old}\"|awk -F \"###${Config_old_Disabled}\" '{print $1}')\n\t\t\techo -e \"${Config_old_Disabled}\\n${Config_old}\"\n\t\t\tif [[ ${Config_old_Disabled} == \"true\" ]]; then\n\t\t\t\tConfig_Disabled=\"false\"\n\t\t\t\tLike=\"${Config_old}###${Config_Disabled}\"\n\t\t\telse\n\t\t\t\tConfig_Disabled=\"true\"\n\t\t\t\tLike=\"${Config_old}###${Config_Disabled}\"\n\t\t\tfi\n\t\t\techo -e \"${Config_Disabled}\\n${Like}\"\n\t\t\tsed -i \"${Modify_num}d\" ${config_file}\n\t\t\tsed -i \"${Modify_num}i\\\\${Like}\" ${config_file}\n\t\t\tif [[ $? == 0 ]]; then\n\t\t\t\techo -e \"${Info} 修改成功 ! [账号状态为: ${Config_Disabled}]\"\n\t\t\telse\n\t\t\t\techo -e \"${Error} 修改失败 ! [账号状态为: ${Config_Disabled}]\"\n\t\t\tfi\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字！\"\n\t\tfi\n\telse\n\t\techo -e \"${Error} 请输入正确的数字！\"\n\tfi\n\tdone\n}\nInstallation_dependency(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tyum update\n\t\tyum install -y unzip vim curl crond\n\t\t[[ -z $(ls /usr/sbin/crond) ]] && echo -e \"${Error} 依赖 crond 安装失败...\" && exit 0\n\telse\n\t\tapt-get update\n\t\tapt-get install -y unzip vim curl cron\n\t\t[[ -z $(ls /usr/sbin/cron) ]] && echo -e \"${Error} 依赖 cron 安装失败...\" && exit 0\n\tfi\n\t[[ -z $(unzip --help) ]] && echo -e \"${Error} 依赖 unzip 安装失败...\" && exit 0\n\t[[ -z $(curl --help) ]] && echo -e \"${Error} 依赖 curl 安装失败...\" && exit 0\n\tcp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n}\nInstall_caddy(){\n\techo -e \"是否由脚本自动配置HTTP服务(在线监控网站)[Y/n]\"\n\tread -e -p \"(默认: Y 自动部署):\" caddy_yn\n\t[[ -z \"$caddy_yn\" ]] && caddy_yn=\"y\"\n\tif [[ \"${caddy_yn}\" == [Yy] ]]; then\n\t\tSet_server\n\t\tSet_server_port\n\t\tif [[ ! -e \"/usr/local/caddy/caddy\" ]]; then\n\t\t\twget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/caddy_install.sh\n\t\t\tchmod +x caddy_install.sh\n\t\t\tbash caddy_install.sh install\n\t\t\t[[ ! -e \"/usr/local/caddy/caddy\" ]] && echo -e \"${Error} Caddy安装失败，请手动部署，Web网页文件位置：${Web_file}\" && exit 0\n\t\telse\n\t\t\techo -e \"${Info} 发现Caddy已安装，开始配置...\"\n\t\tfi\n\t\tif [[ ! -s \"/usr/local/caddy/Caddyfile\" ]]; then\n\t\t\tcat > \"/usr/local/caddy/Caddyfile\"<<-EOF\nhttp://${server_s}:${server_port_s} {\n root ${Web_file}\n timeouts none\n gzip\n}\nEOF\n\t\t\t/etc/init.d/caddy restart\n\t\telse\n\t\t\techo -e \"${Info} 发现 Caddy 配置文件非空，开始追加 ServerStatus 网站配置内容到文件最后...\"\n\t\t\tcat >> \"/usr/local/caddy/Caddyfile\"<<-EOF\nhttp://${server_s}:${server_port_s} {\n root ${Web_file}\n timeouts none\n gzip\n}\nEOF\n\t\t\t/etc/init.d/caddy restart\n\t\tfi\n\telse\n\t\techo -e \"${Info} 跳过 HTTP服务部署，请手动部署，Web网页文件位置：${Web_file} !\"\n\tfi\n}\nDownload_SSRStatus(){\n\tcd \"/usr/local\"\n\twget -N --no-check-certificate \"https://github.com/ToyoDAdoubi/SSRStatus/archive/master.zip\"\n\t[[ ! -e \"master.zip\" ]] && echo -e \"${Error} SSRStatus 网页文件下载失败 !\" && exit 1\n\tunzip master.zip && rm -rf master.zip\n\t[[ ! -e \"SSRStatus-master\" ]] && echo -e \"${Error} SSRStatus 网页文件解压失败 !\" && exit 1\n\tmv SSRStatus-master SSRStatus\n\t[[ ! -e \"${Web_file}\" ]] && echo -e \"${Error} SSRStatus 网页文件文件夹重命名失败 !\" && rm -rf SSRStatus-master && exit 1\n}\nInstall_Web(){\n\t[[ -e \"${Web_file}\" ]] && echo -e \"${Error} 检测到 SSRStatus 网页文件已安装 !\" && exit 1\n\tcheck_sys\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency\n\techo -e \"${Info} 开始部署HTTP服务(Caddy)...\"\n\tInstall_caddy\n\techo -e \"${Info} 开始下载/安装...\"\n\tDownload_SSRStatus\n\techo -e \"${Info} 开始配置定时任务...\"\n\tSet_crontab\n\techo -e \"${Info} 所有步骤 安装完毕... 请打开本脚本并修改开头的 SSR_folder 变量引号内的ShadowsocksR子目录绝对路径，方可使用。\"\n}\nUninstall_Web(){\n\tcheck_installed_server_status\n\techo \"确定要卸载 SSRStatus 网页文件(自动部署的Caddy并不会删除) ? [y/N]\"\n\techo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\t/etc/init.d/caddy stop\n\t\tDel_Crontab\n\t\trm -rf \"${Web_file}\"\n\t\techo && echo \"SSRStatus 网页文件卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nAdd_Crontab(){\n\tcrontab -l > \"$file/crontab.bak\"\n\tsed -i \"/ssrstatus.sh/d\" \"$file/crontab.bak\"\n\techo -e \"\\n${Crontab_time} /bin/bash $file/ssrstatus.sh t\" >> \"$file/crontab.bak\"\n\tcrontab \"$file/crontab.bak\"\n\trm -r \"$file/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"ssrstatus.sh\")\n\tif [[ -z ${cron_config} ]]; then\n\t\techo -e \"${Error} 添加 Crontab 定时任务失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} 添加 Crontab 定时任务成功 !\"\n\tfi\n}\nDel_Crontab(){\n\tcrontab -l > \"$file/crontab.bak\"\n\tsed -i \"/ssrstatus.sh/d\" \"$file/crontab.bak\"\n\tcrontab \"$file/crontab.bak\"\n\trm -r \"$file/crontab.bak\"\n\tcron_config=$(crontab -l | grep \"ssrstatus.sh\")\n\tif [[ ! -z ${cron_config} ]]; then\n\t\techo -e \"${Error} 删除 Crontab 定时任务失败 !\" && exit 1\n\telse\n\t\techo -e \"${Info} 删除 Crontab 定时任务成功 !\"\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrstatus.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrstatus.sh\" && chmod +x ssrstatus.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\nmenu(){\necho && echo -e \"  SSRStatus 一键安装管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  -- Toyo | doub.io/shell-jc5 --\n  \n ${Green_font_prefix}0.${Font_color_suffix} 升级脚本\n ————————————\n ${Green_font_prefix}1.${Font_color_suffix} 安装 依赖及Web网页\n ${Green_font_prefix}2.${Font_color_suffix} 卸载 依赖及Web网页\n————————————\n ${Green_font_prefix}3.${Font_color_suffix} 测试 所有账号\n ${Green_font_prefix}4.${Font_color_suffix} 测试 单独账号\n ${Green_font_prefix}5.${Font_color_suffix} 测试 自定义账号\n————————————\n ${Green_font_prefix}6.${Font_color_suffix} 设置 配置信息\n ${Green_font_prefix}7.${Font_color_suffix} 查看 配置信息\n ${Green_font_prefix}8.${Font_color_suffix} 查看 运行日志\n ${Green_font_prefix}9.${Font_color_suffix} 设置 定时间隔\n————————————\" && echo\nif [[ -e ${Web_file} ]]; then\n\techo -e \" 当前状态: Web网页 ${Green_font_prefix}已安装${Font_color_suffix}\"\nelse\n\techo -e \" 当前状态: Web网页 ${Red_font_prefix}未安装${Font_color_suffix}\"\nfi\necho\nread -e -p \" 请输入数字 [0-9]:\" num\ncase \"$num\" in\n\t0)\n\tUpdate_Shell\n\t;;\n\t1)\n\tInstall_Web\n\t;;\n\t2)\n\tUninstall_Web\n\t;;\n\t3)\n\tTest\n\t;;\n\t4)\n\tTest_one\n\t;;\n\t5)\n\tTest_add\n\t;;\n\t6)\n\tSet_SSRStatus\n\t;;\n\t7)\n\tList_SSRStatus\n\t;;\n\t8)\n\tView_log\n\t;;\n\t9)\n\tSet_crontab\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-9]\"\n\t;;\nesac\n}\naction=$1\nif [[ ${1} == \"t\" ]]; then\n\tTest\nelif [[ ${1} == \"a\" ]]; then\n\tTest_add\nelif [[ ${1} == \"o\" ]]; then\n\tTest_one\nelif [[ ${1} == \"log\" ]]; then\n\tView_log\nelse\n\tmenu\nfi"
        },
        {
          "name": "status.sh",
          "type": "blob",
          "size": 43.8935546875,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: ServerStatus client + server\n#\tVersion: 1.0.15\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/shell-jc3/\n#=================================================\n\nsh_ver=\"1.0.15\"\nfilepath=$(cd \"$(dirname \"$0\")\"; pwd)\nfile_1=$(echo -e \"${filepath}\"|awk -F \"$0\" '{print $1}')\nfile=\"/usr/local/ServerStatus\"\nweb_file=\"/usr/local/ServerStatus/web\"\nserver_file=\"/usr/local/ServerStatus/server\"\nserver_conf=\"/usr/local/ServerStatus/server/config.json\"\nserver_conf_1=\"/usr/local/ServerStatus/server/config.conf\"\nclient_file=\"/usr/local/ServerStatus/client\"\nclient_log_file=\"/tmp/serverstatus_client.log\"\nserver_log_file=\"/tmp/serverstatus_server.log\"\njq_file=\"${file}/jq\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\n#检查系统\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_installed_server_status(){\n\t[[ ! -e \"${server_file}/sergate\" ]] && echo -e \"${Error} ServerStatus 服务端没有安装，请检查 !\" && exit 1\n}\ncheck_installed_client_status(){\n\tif [[ ! -e \"${client_file}/status-client.py\" ]]; then\n\t\tif [[ ! -e \"${file}/status-client.py\" ]]; then\n\t\t\techo -e \"${Error} ServerStatus 客户端没有安装，请检查 !\" && exit 1\n\t\tfi\n\tfi\n}\ncheck_pid_server(){\n\tPID=`ps -ef| grep \"sergate\"| grep -v grep| grep -v \".sh\"| grep -v \"init.d\"| grep -v \"service\"| awk '{print $2}'`\n}\ncheck_pid_client(){\n\tPID=`ps -ef| grep \"status-client.py\"| grep -v grep| grep -v \".sh\"| grep -v \"init.d\"| grep -v \"service\"| awk '{print $2}'`\n}\nDownload_Server_Status_server(){\n\tcd \"/tmp\"\n\twget -N --no-check-certificate \"https://github.com/ToyoDAdoubi/ServerStatus-Toyo/archive/master.zip\"\n\t[[ ! -e \"master.zip\" ]] && echo -e \"${Error} ServerStatus 服务端下载失败 !\" && exit 1\n\tunzip master.zip\n\trm -rf master.zip\n\t[[ ! -e \"/tmp/ServerStatus-Toyo-master\" ]] && echo -e \"${Error} ServerStatus 服务端解压失败 !\" && exit 1\n\tcd \"/tmp/ServerStatus-Toyo-master/server\"\n\tmake\n\t[[ ! -e \"sergate\" ]] && echo -e \"${Error} ServerStatus 服务端编译失败 !\" && cd \"${file_1}\" && rm -rf \"/tmp/ServerStatus-Toyo-master\" && exit 1\n\tcd \"${file_1}\"\n\t[[ ! -e \"${file}\" ]] && mkdir \"${file}\"\n\tif [[ ! -e \"${server_file}\" ]]; then\n\t\tmkdir \"${server_file}\"\n\t\tmv \"/tmp/ServerStatus-Toyo-master/server/sergate\" \"${server_file}/sergate\"\n\t\tmv \"/tmp/ServerStatus-Toyo-master/web\" \"${web_file}\"\n\telse\n\t\tif [[ -e \"${server_file}/sergate\" ]]; then\n\t\t\tmv \"${server_file}/sergate\" \"${server_file}/sergate1\"\n\t\t\tmv \"/tmp/ServerStatus-Toyo-master/server/sergate\" \"${server_file}/sergate\"\n\t\telse\n\t\t\tmv \"/tmp/ServerStatus-Toyo-master/server/sergate\" \"${server_file}/sergate\"\n\t\t\tmv \"/tmp/ServerStatus-Toyo-master/web\" \"${web_file}\"\n\t\tfi\n\tfi\n\tif [[ ! -e \"${server_file}/sergate\" ]]; then\n\t\techo -e \"${Error} ServerStatus 服务端移动重命名失败 !\"\n\t\t[[ -e \"${server_file}/sergate1\" ]] && mv \"${server_file}/sergate1\" \"${server_file}/sergate\"\n\t\trm -rf \"/tmp/ServerStatus-Toyo-master\"\n\t\texit 1\n\telse\n\t\t[[ -e \"${server_file}/sergate1\" ]] && rm -rf \"${server_file}/sergate1\"\n\t\trm -rf \"/tmp/ServerStatus-Toyo-master\"\n\tfi\n}\nDownload_Server_Status_client(){\n\tcd \"/tmp\"\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/ServerStatus-Toyo/master/clients/status-client.py\"\n\t[[ ! -e \"status-client.py\" ]] && echo -e \"${Error} ServerStatus 客户端下载失败 !\" && exit 1\n\tcd \"${file_1}\"\n\t[[ ! -e \"${file}\" ]] && mkdir \"${file}\"\n\tif [[ ! -e \"${client_file}\" ]]; then\n\t\tmkdir \"${client_file}\"\n\t\tmv \"/tmp/status-client.py\" \"${client_file}/status-client.py\"\n\telse\n\t\tif [[ -e \"${client_file}/status-client.py\" ]]; then\n\t\t\tmv \"${client_file}/status-client.py\" \"${client_file}/status-client1.py\"\n\t\t\tmv \"/tmp/status-client.py\" \"${client_file}/status-client.py\"\n\t\telse\n\t\t\tmv \"/tmp/status-client.py\" \"${client_file}/status-client.py\"\n\t\tfi\n\tfi\n\tif [[ ! -e \"${client_file}/status-client.py\" ]]; then\n\t\techo -e \"${Error} ServerStatus 客户端移动失败 !\"\n\t\t[[ -e \"${client_file}/status-client1.py\" ]] && mv \"${client_file}/status-client1.py\" \"${client_file}/status-client.py\"\n\t\trm -rf \"/tmp/status-client.py\"\n\t\texit 1\n\telse\n\t\t[[ -e \"${client_file}/status-client1.py\" ]] && rm -rf \"${client_file}/status-client1.py\"\n\t\trm -rf \"/tmp/status-client.py\"\n\tfi\n}\nService_Server_Status_server(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/server_status_server_centos\" -O /etc/init.d/status-server; then\n\t\t\techo -e \"${Error} ServerStatus 服务端服务管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/status-server\n\t\tchkconfig --add status-server\n\t\tchkconfig status-server on\n\telse\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/server_status_server_debian\" -O /etc/init.d/status-server; then\n\t\t\techo -e \"${Error} ServerStatus 服务端服务管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/status-server\n\t\tupdate-rc.d -f status-server defaults\n\tfi\n\techo -e \"${Info} ServerStatus 服务端服务管理脚本下载完成 !\"\n}\nService_Server_Status_client(){\n\tif [[ ${release} = \"centos\" ]]; then\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/server_status_client_centos\" -O /etc/init.d/status-client; then\n\t\t\techo -e \"${Error} ServerStatus 客户端服务管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/status-client\n\t\tchkconfig --add status-client\n\t\tchkconfig status-client on\n\telse\n\t\tif ! wget --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/service/server_status_client_debian\" -O /etc/init.d/status-client; then\n\t\t\techo -e \"${Error} ServerStatus 客户端服务管理脚本下载失败 !\" && exit 1\n\t\tfi\n\t\tchmod +x /etc/init.d/status-client\n\t\tupdate-rc.d -f status-client defaults\n\tfi\n\techo -e \"${Info} ServerStatus 客户端服务管理脚本下载完成 !\"\n}\nInstallation_dependency(){\n\tmode=$1\n\t[[ -z ${mode} ]] && mode=\"server\"\n\tif [[ ${mode} == \"server\" ]]; then\n\t\tpython_status=$(python --help)\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tyum update\n\t\t\tif [[ -z ${python_status} ]]; then\n\t\t\t\tyum install -y python unzip vim make\n\t\t\t\tyum groupinstall \"Development Tools\" -y\n\t\t\telse\n\t\t\t\tyum install -y unzip vim make\n\t\t\t\tyum groupinstall \"Development Tools\" -y\n\t\t\tfi\n\t\telse\n\t\t\tapt-get update\n\t\t\tif [[ -z ${python_status} ]]; then\n\t\t\t\tapt-get install -y python unzip vim build-essential make\n\t\t\telse\n\t\t\t\tapt-get install -y unzip vim build-essential make\n\t\t\tfi\n\t\tfi\n\telse\n\t\tpython_status=$(python --help)\n\t\tif [[ ${release} == \"centos\" ]]; then\n\t\t\tif [[ -z ${python_status} ]]; then\n\t\t\t\tyum update\n\t\t\t\tyum install -y python\n\t\t\tfi\n\t\telse\n\t\t\tif [[ -z ${python_status} ]]; then\n\t\t\t\tapt-get update\n\t\t\t\tapt-get install -y python\n\t\t\tfi\n\t\tfi\n\tfi\n}\nWrite_server_config(){\n\tcat > ${server_conf}<<-EOF\n{\"servers\":\n [\n  {\n   \"username\": \"username01\",\n   \"password\": \"password\",\n   \"name\": \"Server 01\",\n   \"type\": \"KVM\",\n   \"host\": \"\",\n   \"location\": \"Hong Kong\",\n   \"disabled\": false\n  }\n ]\n}\nEOF\n}\nWrite_server_config_conf(){\n\tcat > ${server_conf_1}<<-EOF\nPORT = ${server_port_s}\nEOF\n}\nRead_config_client(){\n\tif [[ ! -e \"${client_file}/status-client.py\" ]]; then\n\t\tif [[ ! -e \"${file}/status-client.py\" ]]; then\n\t\t\techo -e \"${Error} ServerStatus 客户端文件不存在 !\" && exit 1\n\t\telse\n\t\t\tclient_text=\"$(cat \"${file}/status-client.py\"|sed 's/\\\"//g;s/,//g;s/ //g')\"\n\t\t\trm -rf \"${file}/status-client.py\"\n\t\tfi\n\telse\n\t\tclient_text=\"$(cat \"${client_file}/status-client.py\"|sed 's/\\\"//g;s/,//g;s/ //g')\"\n\tfi\n\tclient_server=\"$(echo -e \"${client_text}\"|grep \"SERVER=\"|awk -F \"=\" '{print $2}')\"\n\tclient_port=\"$(echo -e \"${client_text}\"|grep \"PORT=\"|awk -F \"=\" '{print $2}')\"\n\tclient_user=\"$(echo -e \"${client_text}\"|grep \"USER=\"|awk -F \"=\" '{print $2}')\"\n\tclient_password=\"$(echo -e \"${client_text}\"|grep \"PASSWORD=\"|awk -F \"=\" '{print $2}')\"\n}\nRead_config_server(){\n\tif [[ ! -e \"${server_conf_1}\" ]]; then\n\t\tserver_port_s=\"35601\"\n\t\tWrite_server_config_conf\n\t\tserver_port=\"35601\"\n\telse\n\t\tserver_port=\"$(cat \"${server_conf_1}\"|grep \"PORT = \"|awk '{print $3}')\"\n\tfi\n}\nSet_server(){\n\tmode=$1\n\t[[ -z ${mode} ]] && mode=\"server\"\n\tif [[ ${mode} == \"server\" ]]; then\n\t\techo -e \"请输入 ServerStatus 服务端中网站要设置的 域名[server]\n默认为本机IP为域名，例如输入: toyoo.pw ，如果要使用本机IP，请留空直接回车\"\n\t\tread -e -p \"(默认: 本机IP):\" server_s\n\t\t[[ -z \"$server_s\" ]] && server_s=\"\"\n\telse\n\t\techo -e \"请输入 ServerStatus 服务端的 IP/域名[server]\"\n\t\tread -e -p \"(默认: 127.0.0.1):\" server_s\n\t\t[[ -z \"$server_s\" ]] && server_s=\"127.0.0.1\"\n\tfi\n\t\n\techo && echo \"\t================================================\"\n\techo -e \"\tIP/域名[server]: ${Red_background_prefix} ${server_s} ${Font_color_suffix}\"\n\techo \"\t================================================\" && echo\n}\nSet_server_http_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 ServerStatus 服务端中网站要设置的 域名/IP的端口[1-65535]（如果是域名的话，一般用 80 端口）\"\n\t\tread -e -p \"(默认: 8888):\" server_http_port_s\n\t\t[[ -z \"$server_http_port_s\" ]] && server_http_port_s=\"8888\"\n\t\techo $((${server_http_port_s}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${server_http_port_s} -ge 1 ]] && [[ ${server_http_port_s} -le 65535 ]]; then\n\t\t\t\techo && echo \"\t================================================\"\n\t\t\t\techo -e \"\t端口: ${Red_background_prefix} ${server_http_port_s} ${Font_color_suffix}\"\n\t\t\t\techo \"\t================================================\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\tdone\n}\nSet_server_port(){\n\twhile true\n\t\tdo\n\t\techo -e \"请输入 ServerStatus 服务端监听的端口[1-65535]（用于服务端接收客户端消息的端口，客户端要填写这个端口）\"\n\t\tread -e -p \"(默认: 35601):\" server_port_s\n\t\t[[ -z \"$server_port_s\" ]] && server_port_s=\"35601\"\n\t\techo $((${server_port_s}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${server_port_s} -ge 1 ]] && [[ ${server_port_s} -le 65535 ]]; then\n\t\t\t\techo && echo \"\t================================================\"\n\t\t\t\techo -e \"\t端口: ${Red_background_prefix} ${server_port_s} ${Font_color_suffix}\"\n\t\t\t\techo \"\t================================================\" && echo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\t\tfi\n\t\telse\n\t\t\techo \"输入错误, 请输入正确的端口。\"\n\t\tfi\n\tdone\n}\nSet_username(){\n\tmode=$1\n\t[[ -z ${mode} ]] && mode=\"server\"\n\tif [[ ${mode} == \"server\" ]]; then\n\t\techo -e \"请输入 ServerStatus 服务端要设置的用户名[username]（字母/数字，不可与其他账号重复）\"\n\telse\n\t\techo -e \"请输入 ServerStatus 服务端中对应配置的用户名[username]（字母/数字，不可与其他账号重复）\"\n\tfi\n\tread -e -p \"(默认: 取消):\" username_s\n\t[[ -z \"$username_s\" ]] && echo \"已取消...\" && exit 0\n\techo && echo \"\t================================================\"\n\techo -e \"\t账号[username]: ${Red_background_prefix} ${username_s} ${Font_color_suffix}\"\n\techo \"\t================================================\" && echo\n}\nSet_password(){\n\tmode=$1\n\t[[ -z ${mode} ]] && mode=\"server\"\n\tif [[ ${mode} == \"server\" ]]; then\n\t\techo -e \"请输入 ServerStatus 服务端要设置的密码[password]（字母/数字，可重复）\"\n\telse\n\t\techo -e \"请输入 ServerStatus 服务端中对应配置的密码[password]（字母/数字）\"\n\tfi\n\tread -e -p \"(默认: doub.io):\" password_s\n\t[[ -z \"$password_s\" ]] && password_s=\"doub.io\"\n\techo && echo \"\t================================================\"\n\techo -e \"\t密码[password]: ${Red_background_prefix} ${password_s} ${Font_color_suffix}\"\n\techo \"\t================================================\" && echo\n}\nSet_name(){\n\techo -e \"请输入 ServerStatus 服务端要设置的节点名称[name]（支持中文，前提是你的系统和SSH工具支持中文输入，仅仅是个名字）\"\n\tread -e -p \"(默认: Server 01):\" name_s\n\t[[ -z \"$name_s\" ]] && name_s=\"Server 01\"\n\techo && echo \"\t================================================\"\n\techo -e \"\t节点名称[name]: ${Red_background_prefix} ${name_s} ${Font_color_suffix}\"\n\techo \"\t================================================\" && echo\n}\nSet_type(){\n\techo -e \"请输入 ServerStatus 服务端要设置的节点虚拟化类型[type]（例如 OpenVZ / KVM）\"\n\tread -e -p \"(默认: KVM):\" type_s\n\t[[ -z \"$type_s\" ]] && type_s=\"KVM\"\n\techo && echo \"\t================================================\"\n\techo -e \"\t虚拟化类型[type]: ${Red_background_prefix} ${type_s} ${Font_color_suffix}\"\n\techo \"\t================================================\" && echo\n}\nSet_location(){\n\techo -e \"请输入 ServerStatus 服务端要设置的节点位置[location]（支持中文，前提是你的系统和SSH工具支持中文输入）\"\n\tread -e -p \"(默认: Hong Kong):\" location_s\n\t[[ -z \"$location_s\" ]] && location_s=\"Hong Kong\"\n\techo && echo \"\t================================================\"\n\techo -e \"\t节点位置[location]: ${Red_background_prefix} ${location_s} ${Font_color_suffix}\"\n\techo \"\t================================================\" && echo\n}\nSet_config_server(){\n\tSet_username \"server\"\n\tSet_password \"server\"\n\tSet_name\n\tSet_type\n\tSet_location\n}\nSet_config_client(){\n\tSet_server \"client\"\n\tSet_server_port\n\tSet_username \"client\"\n\tSet_password \"client\"\n}\nSet_ServerStatus_server(){\n\tcheck_installed_server_status\n\techo && echo -e \" 你要做什么？\n\t\n ${Green_font_prefix} 1.${Font_color_suffix} 添加 节点配置\n ${Green_font_prefix} 2.${Font_color_suffix} 删除 节点配置\n————————\n ${Green_font_prefix} 3.${Font_color_suffix} 修改 节点配置 - 节点用户名\n ${Green_font_prefix} 4.${Font_color_suffix} 修改 节点配置 - 节点密码\n ${Green_font_prefix} 5.${Font_color_suffix} 修改 节点配置 - 节点名称\n ${Green_font_prefix} 6.${Font_color_suffix} 修改 节点配置 - 节点虚拟化\n ${Green_font_prefix} 7.${Font_color_suffix} 修改 节点配置 - 节点位置\n ${Green_font_prefix} 8.${Font_color_suffix} 修改 节点配置 - 全部参数\n————————\n ${Green_font_prefix} 9.${Font_color_suffix} 启用/禁用 节点配置\n————————\n ${Green_font_prefix}10.${Font_color_suffix} 修改 服务端监听端口\" && echo\n\tread -e -p \"(默认: 取消):\" server_num\n\t[[ -z \"${server_num}\" ]] && echo \"已取消...\" && exit 1\n\tif [[ ${server_num} == \"1\" ]]; then\n\t\tAdd_ServerStatus_server\n\telif [[ ${server_num} == \"2\" ]]; then\n\t\tDel_ServerStatus_server\n\telif [[ ${server_num} == \"3\" ]]; then\n\t\tModify_ServerStatus_server_username\n\telif [[ ${server_num} == \"4\" ]]; then\n\t\tModify_ServerStatus_server_password\n\telif [[ ${server_num} == \"5\" ]]; then\n\t\tModify_ServerStatus_server_name\n\telif [[ ${server_num} == \"6\" ]]; then\n\t\tModify_ServerStatus_server_type\n\telif [[ ${server_num} == \"7\" ]]; then\n\t\tModify_ServerStatus_server_location\n\telif [[ ${server_num} == \"8\" ]]; then\n\t\tModify_ServerStatus_server_all\n\telif [[ ${server_num} == \"9\" ]]; then\n\t\tModify_ServerStatus_server_disabled\n\telif [[ ${server_num} == \"10\" ]]; then\n\t\tRead_config_server\n\t\tDel_iptables \"${server_port}\"\n\t\tSet_server_port\n\t\tWrite_server_config_conf\n\t\tAdd_iptables \"${server_port_s}\"\n\telse\n\t\techo -e \"${Error} 请输入正确的数字[1-10]\" && exit 1\n\tfi\n\tRestart_ServerStatus_server\n}\nList_ServerStatus_server(){\n\tconf_text=$(${jq_file} '.servers' ${server_conf}|${jq_file} \".[]|.username\"|sed 's/\\\"//g')\n\tconf_text_total=$(echo -e \"${conf_text}\"|wc -l)\n\t[[ ${conf_text_total} = \"0\" ]] && echo -e \"${Error} 没有发现 一个节点配置，请检查 !\" && exit 1\n\tconf_text_total_a=$(echo $((${conf_text_total}-1)))\n\tconf_list_all=\"\"\n\tfor((integer = 0; integer <= ${conf_text_total_a}; integer++))\n\tdo\n\t\tnow_text=$(${jq_file} '.servers' ${server_conf}|${jq_file} \".[${integer}]\"|sed 's/\\\"//g;s/,$//g'|sed '$d;1d')\n\t\tnow_text_username=$(echo -e \"${now_text}\"|grep \"username\"|awk -F \": \" '{print $2}')\n\t\tnow_text_password=$(echo -e \"${now_text}\"|grep \"password\"|awk -F \": \" '{print $2}')\n\t\tnow_text_name=$(echo -e \"${now_text}\"|grep \"name\"|grep -v \"username\"|awk -F \": \" '{print $2}')\n\t\tnow_text_type=$(echo -e \"${now_text}\"|grep \"type\"|awk -F \": \" '{print $2}')\n\t\tnow_text_location=$(echo -e \"${now_text}\"|grep \"location\"|awk -F \": \" '{print $2}')\n\t\tnow_text_disabled=$(echo -e \"${now_text}\"|grep \"disabled\"|awk -F \": \" '{print $2}')\n\t\tif [[ ${now_text_disabled} == \"false\" ]]; then\n\t\t\tnow_text_disabled_status=\"${Green_font_prefix}启用${Font_color_suffix}\"\n\t\telse\n\t\t\tnow_text_disabled_status=\"${Red_font_prefix}禁用${Font_color_suffix}\"\n\t\tfi\n\t\tconf_list_all=${conf_list_all}\"用户名: ${Green_font_prefix}\"${now_text_username}\"${Font_color_suffix} 密码: ${Green_font_prefix}\"${now_text_password}\"${Font_color_suffix} 节点名: ${Green_font_prefix}\"${now_text_name}\"${Font_color_suffix} 类型: ${Green_font_prefix}\"${now_text_type}\"${Font_color_suffix} 位置: ${Green_font_prefix}\"${now_text_location}\"${Font_color_suffix} 状态: ${Green_font_prefix}\"${now_text_disabled_status}\"${Font_color_suffix}\\n\"\n\tdone\n\techo && echo -e \"节点总数 ${Green_font_prefix}\"${conf_text_total}\"${Font_color_suffix}\"\n\techo -e ${conf_list_all}\n}\nAdd_ServerStatus_server(){\n\tSet_config_server\n\tSet_username_ch=$(cat ${server_conf}|grep '\"username\": \"'\"${username_s}\"'\"')\n\t[[ ! -z \"${Set_username_ch}\" ]] && echo -e \"${Error} 用户名已被使用 !\" && exit 1\n\tsed -i '3i\\  },' ${server_conf}\n\tsed -i '3i\\   \"disabled\": false' ${server_conf}\n\tsed -i '3i\\   \"location\": \"'\"${location_s}\"'\",' ${server_conf}\n\tsed -i '3i\\   \"host\": \"'\"None\"'\",' ${server_conf}\n\tsed -i '3i\\   \"type\": \"'\"${type_s}\"'\",' ${server_conf}\n\tsed -i '3i\\   \"name\": \"'\"${name_s}\"'\",' ${server_conf}\n\tsed -i '3i\\   \"password\": \"'\"${password_s}\"'\",' ${server_conf}\n\tsed -i '3i\\   \"username\": \"'\"${username_s}\"'\",' ${server_conf}\n\tsed -i '3i\\  {' ${server_conf}\n\techo -e \"${Info} 添加节点成功 ${Green_font_prefix}[ 节点名称: ${name_s}, 节点用户名: ${username_s}, 节点密码: ${password_s} ]${Font_color_suffix} !\"\n}\nDel_ServerStatus_server(){\n\tList_ServerStatus_server\n\t[[ \"${conf_text_total}\" = \"1\" ]] && echo -e \"${Error} 节点配置仅剩 1个，不能删除 !\" && exit 1\n\techo -e \"请输入要删除的节点用户名\"\n\tread -e -p \"(默认: 取消):\" del_server_username\n\t[[ -z \"${del_server_username}\" ]] && echo -e \"已取消...\" && exit 1\n\tdel_username=`cat -n ${server_conf}|grep '\"username\": \"'\"${del_server_username}\"'\"'|awk '{print $1}'`\n\tif [[ ! -z ${del_username} ]]; then\n\t\tdel_username_min=$(echo $((${del_username}-1)))\n\t\tdel_username_max=$(echo $((${del_username}+7)))\n\t\tdel_username_max_text=$(sed -n \"${del_username_max}p\" ${server_conf})\n\t\tdel_username_max_text_last=`echo ${del_username_max_text:((${#del_username_max_text} - 1))}`\n\t\tif [[ ${del_username_max_text_last} != \",\" ]]; then\n\t\t\tdel_list_num=$(echo $((${del_username_min}-1)))\n\t\t\tsed -i \"${del_list_num}s/,$//g\" ${server_conf}\n\t\tfi\n\t\tsed -i \"${del_username_min},${del_username_max}d\" ${server_conf}\n\t\techo -e \"${Info} 节点删除成功 ${Green_font_prefix}[ 节点用户名: ${del_server_username} ]${Font_color_suffix} \"\n\telse\n\t\techo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n\tfi\n}\nModify_ServerStatus_server_username(){\n\tList_ServerStatus_server\n\techo -e \"请输入要修改的节点用户名\"\n\tread -e -p \"(默认: 取消):\" manually_username\n\t[[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n\tSet_username_num=$(cat -n ${server_conf}|grep '\"username\": \"'\"${manually_username}\"'\"'|awk '{print $1}')\n\tif [[ ! -z ${Set_username_num} ]]; then\n\t\tSet_username\n\t\tSet_username_ch=$(cat ${server_conf}|grep '\"username\": \"'\"${username_s}\"'\"')\n\t\t[[ ! -z \"${Set_username_ch}\" ]] && echo -e \"${Error} 用户名已被使用 !\" && exit 1\n\t\tsed -i \"${Set_username_num}\"'s/\"username\": \"'\"${manually_username}\"'\"/\"username\": \"'\"${username_s}\"'\"/g' ${server_conf}\n\t\techo -e \"${Info} 修改成功 [ 原节点用户名: ${manually_username}, 新节点用户名: ${username_s} ]\"\n\telse\n\t\techo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n\tfi\n}\nModify_ServerStatus_server_password(){\n\tList_ServerStatus_server\n\techo -e \"请输入要修改的节点用户名\"\n\tread -e -p \"(默认: 取消):\" manually_username\n\t[[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n\tSet_username_num=$(cat -n ${server_conf}|grep '\"username\": \"'\"${manually_username}\"'\"'|awk '{print $1}')\n\tif [[ ! -z ${Set_username_num} ]]; then\n\t\tSet_password\n\t\tSet_password_num_a=$(echo $((${Set_username_num}+1)))\n\t\tSet_password_num_text=$(sed -n \"${Set_password_num_a}p\" ${server_conf}|sed 's/\\\"//g;s/,$//g'|awk -F \": \" '{print $2}')\n\t\tsed -i \"${Set_password_num_a}\"'s/\"password\": \"'\"${Set_password_num_text}\"'\"/\"password\": \"'\"${password_s}\"'\"/g' ${server_conf}\n\t\techo -e \"${Info} 修改成功 [ 原节点密码: ${Set_password_num_text}, 新节点密码: ${password_s} ]\"\n\telse\n\t\techo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n\tfi\n}\nModify_ServerStatus_server_name(){\n\tList_ServerStatus_server\n\techo -e \"请输入要修改的节点用户名\"\n\tread -e -p \"(默认: 取消):\" manually_username\n\t[[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n\tSet_username_num=$(cat -n ${server_conf}|grep '\"username\": \"'\"${manually_username}\"'\"'|awk '{print $1}')\n\tif [[ ! -z ${Set_username_num} ]]; then\n\t\tSet_name\n\t\tSet_name_num_a=$(echo $((${Set_username_num}+2)))\n\t\tSet_name_num_a_text=$(sed -n \"${Set_name_num_a}p\" ${server_conf}|sed 's/\\\"//g;s/,$//g'|awk -F \": \" '{print $2}')\n\t\tsed -i \"${Set_name_num_a}\"'s/\"name\": \"'\"${Set_name_num_a_text}\"'\"/\"name\": \"'\"${name_s}\"'\"/g' ${server_conf}\n\t\techo -e \"${Info} 修改成功 [ 原节点名称: ${Set_name_num_a_text}, 新节点名称: ${name_s} ]\"\n\telse\n\t\techo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n\tfi\n}\nModify_ServerStatus_server_type(){\n\tList_ServerStatus_server\n\techo -e \"请输入要修改的节点用户名\"\n\tread -e -p \"(默认: 取消):\" manually_username\n\t[[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n\tSet_username_num=$(cat -n ${server_conf}|grep '\"username\": \"'\"${manually_username}\"'\"'|awk '{print $1}')\n\tif [[ ! -z ${Set_username_num} ]]; then\n\t\tSet_type\n\t\tSet_type_num_a=$(echo $((${Set_username_num}+3)))\n\t\tSet_type_num_a_text=$(sed -n \"${Set_type_num_a}p\" ${server_conf}|sed 's/\\\"//g;s/,$//g'|awk -F \": \" '{print $2}')\n\t\tsed -i \"${Set_type_num_a}\"'s/\"type\": \"'\"${Set_type_num_a_text}\"'\"/\"type\": \"'\"${type_s}\"'\"/g' ${server_conf}\n\t\techo -e \"${Info} 修改成功 [ 原节点虚拟化: ${Set_type_num_a_text}, 新节点虚拟化: ${type_s} ]\"\n\telse\n\t\techo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n\tfi\n}\nModify_ServerStatus_server_location(){\n\tList_ServerStatus_server\n\techo -e \"请输入要修改的节点用户名\"\n\tread -e -p \"(默认: 取消):\" manually_username\n\t[[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n\tSet_username_num=$(cat -n ${server_conf}|grep '\"username\": \"'\"${manually_username}\"'\"'|awk '{print $1}')\n\tif [[ ! -z ${Set_username_num} ]]; then\n\t\tSet_location\n\t\tSet_location_num_a=$(echo $((${Set_username_num}+5)))\n\t\tSet_location_num_a_text=$(sed -n \"${Set_location_num_a}p\" ${server_conf}|sed 's/\\\"//g;s/,$//g'|awk -F \": \" '{print $2}')\n\t\tsed -i \"${Set_location_num_a}\"'s/\"location\": \"'\"${Set_location_num_a_text}\"'\"/\"location\": \"'\"${location_s}\"'\"/g' ${server_conf}\n\t\techo -e \"${Info} 修改成功 [ 原节点位置: ${Set_location_num_a_text}, 新节点位置: ${location_s} ]\"\n\telse\n\t\techo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n\tfi\n}\nModify_ServerStatus_server_all(){\n\tList_ServerStatus_server\n\techo -e \"请输入要修改的节点用户名\"\n\tread -e -p \"(默认: 取消):\" manually_username\n\t[[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n\tSet_username_num=$(cat -n ${server_conf}|grep '\"username\": \"'\"${manually_username}\"'\"'|awk '{print $1}')\n\tif [[ ! -z ${Set_username_num} ]]; then\n\t\tSet_username\n\t\tSet_password\n\t\tSet_name\n\t\tSet_type\n\t\tSet_location\n\t\tsed -i \"${Set_username_num}\"'s/\"username\": \"'\"${manually_username}\"'\"/\"username\": \"'\"${username_s}\"'\"/g' ${server_conf}\n\t\tSet_password_num_a=$(echo $((${Set_username_num}+1)))\n\t\tSet_password_num_text=$(sed -n \"${Set_password_num_a}p\" ${server_conf}|sed 's/\\\"//g;s/,$//g'|awk -F \": \" '{print $2}')\n\t\tsed -i \"${Set_password_num_a}\"'s/\"password\": \"'\"${Set_password_num_text}\"'\"/\"password\": \"'\"${password_s}\"'\"/g' ${server_conf}\n\t\tSet_name_num_a=$(echo $((${Set_username_num}+2)))\n\t\tSet_name_num_a_text=$(sed -n \"${Set_name_num_a}p\" ${server_conf}|sed 's/\\\"//g;s/,$//g'|awk -F \": \" '{print $2}')\n\t\tsed -i \"${Set_name_num_a}\"'s/\"name\": \"'\"${Set_name_num_a_text}\"'\"/\"name\": \"'\"${name_s}\"'\"/g' ${server_conf}\n\t\tSet_type_num_a=$(echo $((${Set_username_num}+3)))\n\t\tSet_type_num_a_text=$(sed -n \"${Set_type_num_a}p\" ${server_conf}|sed 's/\\\"//g;s/,$//g'|awk -F \": \" '{print $2}')\n\t\tsed -i \"${Set_type_num_a}\"'s/\"type\": \"'\"${Set_type_num_a_text}\"'\"/\"type\": \"'\"${type_s}\"'\"/g' ${server_conf}\n\t\tSet_location_num_a=$(echo $((${Set_username_num}+5)))\n\t\tSet_location_num_a_text=$(sed -n \"${Set_location_num_a}p\" ${server_conf}|sed 's/\\\"//g;s/,$//g'|awk -F \": \" '{print $2}')\n\t\tsed -i \"${Set_location_num_a}\"'s/\"location\": \"'\"${Set_location_num_a_text}\"'\"/\"location\": \"'\"${location_s}\"'\"/g' ${server_conf}\n\t\techo -e \"${Info} 修改成功。\"\n\telse\n\t\techo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n\tfi\n}\nModify_ServerStatus_server_disabled(){\n\tList_ServerStatus_server\n\techo -e \"请输入要修改的节点用户名\"\n\tread -e -p \"(默认: 取消):\" manually_username\n\t[[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n\tSet_username_num=$(cat -n ${server_conf}|grep '\"username\": \"'\"${manually_username}\"'\"'|awk '{print $1}')\n\tif [[ ! -z ${Set_username_num} ]]; then\n\t\tSet_disabled_num_a=$(echo $((${Set_username_num}+6)))\n\t\tSet_disabled_num_a_text=$(sed -n \"${Set_disabled_num_a}p\" ${server_conf}|sed 's/\\\"//g;s/,$//g'|awk -F \": \" '{print $2}')\n\t\tif [[ ${Set_disabled_num_a_text} == \"false\" ]]; then\n\t\t\tdisabled_s=\"true\"\n\t\telse\n\t\t\tdisabled_s=\"false\"\n\t\tfi\n\t\tsed -i \"${Set_disabled_num_a}\"'s/\"disabled\": '\"${Set_disabled_num_a_text}\"'/\"disabled\": '\"${disabled_s}\"'/g' ${server_conf}\n\t\techo -e \"${Info} 修改成功 [ 原禁用状态: ${Set_disabled_num_a_text}, 新禁用状态: ${disabled_s} ]\"\n\telse\n\t\techo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n\tfi\n}\nSet_ServerStatus_client(){\n\tcheck_installed_client_status\n\tSet_config_client\n\tRead_config_client\n\tDel_iptables_OUT \"${client_port}\"\n\tModify_config_client\n\tAdd_iptables_OUT \"${server_port_s}\"\n\tRestart_ServerStatus_client\n}\nModify_config_client(){\n\tsed -i 's/SERVER = \"'\"${client_server}\"'\"/SERVER = \"'\"${server_s}\"'\"/g' \"${client_file}/status-client.py\"\n\tsed -i \"s/PORT = ${client_port}/PORT = ${server_port_s}/g\" \"${client_file}/status-client.py\"\n\tsed -i 's/USER = \"'\"${client_user}\"'\"/USER = \"'\"${username_s}\"'\"/g' \"${client_file}/status-client.py\"\n\tsed -i 's/PASSWORD = \"'\"${client_password}\"'\"/PASSWORD = \"'\"${password_s}\"'\"/g' \"${client_file}/status-client.py\"\n}\nInstall_jq(){\n\tif [[ ! -e ${jq_file} ]]; then\n\t\tif [[ ${bit} = \"x86_64\" ]]; then\n\t\t\twget --no-check-certificate \"https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64\" -O ${jq_file}\n\t\telse\n\t\t\twget --no-check-certificate \"https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux32\" -O ${jq_file}\n\t\tfi\n\t\t[[ ! -e ${jq_file} ]] && echo -e \"${Error} JQ解析器 下载失败，请检查 !\" && exit 1\n\t\tchmod +x ${jq_file}\n\t\techo -e \"${Info} JQ解析器 安装完成，继续...\" \n\telse\n\t\techo -e \"${Info} JQ解析器 已安装，继续...\"\n\tfi\n}\nInstall_caddy(){\n\techo\n\techo -e \"${Info} 是否由脚本自动配置HTTP服务(服务端的在线监控网站)，如果选择 N，则请在其他HTTP服务中配置网站根目录为：${Green_font_prefix}${web_file}${Font_color_suffix} [Y/n]\"\n\tread -e -p \"(默认: Y 自动部署):\" caddy_yn\n\t[[ -z \"$caddy_yn\" ]] && caddy_yn=\"y\"\n\tif [[ \"${caddy_yn}\" == [Yy] ]]; then\n\t\tSet_server \"server\"\n\t\tSet_server_http_port\n\t\tif [[ ! -e \"/usr/local/caddy/caddy\" ]]; then\n\t\t\twget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/caddy_install.sh\n\t\t\tchmod +x caddy_install.sh\n\t\t\tbash caddy_install.sh install\n\t\t\trm -rf caddy_install.sh\n\t\t\t[[ ! -e \"/usr/local/caddy/caddy\" ]] && echo -e \"${Error} Caddy安装失败，请手动部署，Web网页文件位置：${Web_file}\" && exit 1\n\t\telse\n\t\t\techo -e \"${Info} 发现Caddy已安装，开始配置...\"\n\t\tfi\n\t\tif [[ ! -s \"/usr/local/caddy/Caddyfile\" ]]; then\n\t\t\tcat > \"/usr/local/caddy/Caddyfile\"<<-EOF\nhttp://${server_s}:${server_http_port_s} {\n root ${web_file}\n timeouts none\n gzip\n}\nEOF\n\t\t\t/etc/init.d/caddy restart\n\t\telse\n\t\t\techo -e \"${Info} 发现 Caddy 配置文件非空，开始追加 ServerStatus 网站配置内容到文件最后...\"\n\t\t\tcat >> \"/usr/local/caddy/Caddyfile\"<<-EOF\nhttp://${server_s}:${server_http_port_s} {\n root ${web_file}\n timeouts none\n gzip\n}\nEOF\n\t\t\t/etc/init.d/caddy restart\n\t\tfi\n\telse\n\t\techo -e \"${Info} 跳过 HTTP服务部署，请手动部署，Web网页文件位置：${web_file} ，如果位置改变，请注意修改服务脚本文件 /etc/init.d/status-server 中的 WEB_BIN 变量 !\"\n\tfi\n}\nInstall_ServerStatus_server(){\n\t[[ -e \"${server_file}/sergate\" ]] && echo -e \"${Error} 检测到 ServerStatus 服务端已安装 !\" && exit 1\n\tSet_server_port\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency \"server\"\n\tInstall_caddy\n\techo -e \"${Info} 开始下载/安装...\"\n\tDownload_Server_Status_server\n\tInstall_jq\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService_Server_Status_server\n\techo -e \"${Info} 开始写入 配置文件...\"\n\tWrite_server_config\n\tWrite_server_config_conf\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables \"${server_port_s}\"\n\t[[ ! -z \"${server_http_port_s}\" ]] && Add_iptables \"${server_http_port_s}\"\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart_ServerStatus_server\n}\nInstall_ServerStatus_client(){\n\t[[ -e \"${client_file}/status-client.py\" ]] && echo -e \"${Error} 检测到 ServerStatus 客户端已安装 !\" && exit 1\n\tcheck_sys\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tcat /etc/redhat-release |grep 7\\..*|grep -i centos>/dev/null\n\t\tif [[ $? != 0 ]]; then\n\t\t\techo -e \"${Info} 检测到你的系统为 CentOS6，该系统自带的 Python2.6 版本过低，会导致无法运行客户端，如果你有能力升级为 Python2.7，那么请继续(否则建议更换系统)：[y/N]\"\n\t\t\tread -e -p \"(默认: N 继续安装):\" sys_centos6\n\t\t\t[[ -z \"$sys_centos6\" ]] && sys_centos6=\"n\"\n\t\t\tif [[ \"${sys_centos6}\" == [Nn] ]]; then\n\t\t\t\techo -e \"\\n${Info} 已取消...\\n\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\tfi\n\tfi\n\techo -e \"${Info} 开始设置 用户配置...\"\n\tSet_config_client\n\techo -e \"${Info} 开始安装/配置 依赖...\"\n\tInstallation_dependency \"client\"\n\techo -e \"${Info} 开始下载/安装...\"\n\tDownload_Server_Status_client\n\techo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n\tService_Server_Status_client\n\techo -e \"${Info} 开始写入 配置...\"\n\tRead_config_client\n\tModify_config_client\n\techo -e \"${Info} 开始设置 iptables防火墙...\"\n\tSet_iptables\n\techo -e \"${Info} 开始添加 iptables防火墙规则...\"\n\tAdd_iptables_OUT \"${server_port_s}\"\n\techo -e \"${Info} 开始保存 iptables防火墙规则...\"\n\tSave_iptables\n\techo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n\tStart_ServerStatus_client\n}\nUpdate_ServerStatus_server(){\n\tcheck_installed_server_status\n\tcheck_pid_server\n\t[[ ! -z ${PID} ]] && /etc/init.d/status-server stop\n\tDownload_Server_Status_server\n\trm -rf /etc/init.d/status-server\n\tService_Server_Status_server\n\tStart_ServerStatus_server\n}\nUpdate_ServerStatus_client(){\n\tcheck_installed_client_status\n\tcheck_pid_client\n\t[[ ! -z ${PID} ]] && /etc/init.d/status-client stop\n\tif [[ ! -e \"${client_file}/status-client.py\" ]]; then\n\t\tif [[ ! -e \"${file}/status-client.py\" ]]; then\n\t\t\techo -e \"${Error} ServerStatus 客户端文件不存在 !\" && exit 1\n\t\telse\n\t\t\tclient_text=\"$(cat \"${file}/status-client.py\"|sed 's/\\\"//g;s/,//g;s/ //g')\"\n\t\t\trm -rf \"${file}/status-client.py\"\n\t\tfi\n\telse\n\t\tclient_text=\"$(cat \"${client_file}/status-client.py\"|sed 's/\\\"//g;s/,//g;s/ //g')\"\n\tfi\n\tserver_s=\"$(echo -e \"${client_text}\"|grep \"SERVER=\"|awk -F \"=\" '{print $2}')\"\n\tserver_port_s=\"$(echo -e \"${client_text}\"|grep \"PORT=\"|awk -F \"=\" '{print $2}')\"\n\tusername_s=\"$(echo -e \"${client_text}\"|grep \"USER=\"|awk -F \"=\" '{print $2}')\"\n\tpassword_s=\"$(echo -e \"${client_text}\"|grep \"PASSWORD=\"|awk -F \"=\" '{print $2}')\"\n\tDownload_Server_Status_client\n\tRead_config_client\n\tModify_config_client\n\trm -rf /etc/init.d/status-client\n\tService_Server_Status_client\n\tStart_ServerStatus_client\n}\nStart_ServerStatus_server(){\n\tcheck_installed_server_status\n\tcheck_pid_server\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} ServerStatus 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/status-server start\n}\nStop_ServerStatus_server(){\n\tcheck_installed_server_status\n\tcheck_pid_server\n\t[[ -z ${PID} ]] && echo -e \"${Error} ServerStatus 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/status-server stop\n}\nRestart_ServerStatus_server(){\n\tcheck_installed_server_status\n\tcheck_pid_server\n\t[[ ! -z ${PID} ]] && /etc/init.d/status-server stop\n\t/etc/init.d/status-server start\n}\nUninstall_ServerStatus_server(){\n\tcheck_installed_server_status\n\techo \"确定要卸载 ServerStatus 服务端(如果同时安装了客户端，则只会删除服务端) ? [y/N]\"\n\techo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid_server\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tRead_config_server\n\t\tDel_iptables \"${server_port}\"\n\t\tSave_iptables\n\t\tif [[ -e \"${client_file}/status-client.py\" ]]; then\n\t\t\trm -rf \"${server_file}\"\n\t\t\trm -rf \"${web_file}\"\n\t\telse\n\t\t\trm -rf \"${file}\"\n\t\tfi\n\t\trm -rf \"/etc/init.d/status-server\"\n\t\tif [[ -e \"/etc/init.d/caddy\" ]]; then\n\t\t\t/etc/init.d/caddy stop\n\t\t\twget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/caddy_install.sh\n\t\t\tchmod +x caddy_install.sh\n\t\t\tbash caddy_install.sh uninstall\n\t\t\trm -rf caddy_install.sh\n\t\tfi\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del status-server\n\t\telse\n\t\t\tupdate-rc.d -f status-server remove\n\t\tfi\n\t\techo && echo \"ServerStatus 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nStart_ServerStatus_client(){\n\tcheck_installed_client_status\n\tcheck_pid_client\n\t[[ ! -z ${PID} ]] && echo -e \"${Error} ServerStatus 正在运行，请检查 !\" && exit 1\n\t/etc/init.d/status-client start\n}\nStop_ServerStatus_client(){\n\tcheck_installed_client_status\n\tcheck_pid_client\n\t[[ -z ${PID} ]] && echo -e \"${Error} ServerStatus 没有运行，请检查 !\" && exit 1\n\t/etc/init.d/status-client stop\n}\nRestart_ServerStatus_client(){\n\tcheck_installed_client_status\n\tcheck_pid_client\n\t[[ ! -z ${PID} ]] && /etc/init.d/status-client stop\n\t/etc/init.d/status-client start\n}\nUninstall_ServerStatus_client(){\n\tcheck_installed_client_status\n\techo \"确定要卸载 ServerStatus 客户端(如果同时安装了服务端，则只会删除客户端) ? [y/N]\"\n\techo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tcheck_pid_client\n\t\t[[ ! -z $PID ]] && kill -9 ${PID}\n\t\tRead_config_client\n\t\tDel_iptables_OUT \"${client_port}\"\n\t\tSave_iptables\n\t\tif [[ -e \"${server_file}/sergate\" ]]; then\n\t\t\trm -rf \"${client_file}\"\n\t\telse\n\t\t\trm -rf \"${file}\"\n\t\tfi\n\t\trm -rf /etc/init.d/status-client\n\t\tif [[ ${release} = \"centos\" ]]; then\n\t\t\tchkconfig --del status-client\n\t\telse\n\t\t\tupdate-rc.d -f status-client remove\n\t\tfi\n\t\techo && echo \"ServerStatus 卸载完成 !\" && echo\n\telse\n\t\techo && echo \"卸载已取消...\" && echo\n\tfi\n}\nView_ServerStatus_client(){\n\tcheck_installed_client_status\n\tRead_config_client\n\tclear && echo \"————————————————————\" && echo\n\techo -e \"  ServerStatus 客户端配置信息：\n \n  IP \\t: ${Green_font_prefix}${client_server}${Font_color_suffix}\n  端口 \\t: ${Green_font_prefix}${client_port}${Font_color_suffix}\n  账号 \\t: ${Green_font_prefix}${client_user}${Font_color_suffix}\n  密码 \\t: ${Green_font_prefix}${client_password}${Font_color_suffix}\n \n————————————————————\"\n}\nView_client_Log(){\n\t[[ ! -e ${client_log_file} ]] && echo -e \"${Error} 没有找到日志文件 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${client_log_file}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${client_log_file}\n}\nView_server_Log(){\n\t[[ ! -e ${erver_log_file} ]] && echo -e \"${Error} 没有找到日志文件 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${erver_log_file}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${erver_log_file}\n}\nAdd_iptables_OUT(){\n\tiptables_ADD_OUT_port=$1\n\tiptables -I OUTPUT -m state --state NEW -m tcp -p tcp --dport ${iptables_ADD_OUT_port} -j ACCEPT\n\tiptables -I OUTPUT -m state --state NEW -m udp -p udp --dport ${iptables_ADD_OUT_port} -j ACCEPT\n}\nDel_iptables_OUT(){\n\tiptables_DEL_OUT_port=$1\n\tiptables -D OUTPUT -m state --state NEW -m tcp -p tcp --dport ${iptables_DEL_OUT_port} -j ACCEPT\n\tiptables -D OUTPUT -m state --state NEW -m udp -p udp --dport ${iptables_DEL_OUT_port} -j ACCEPT\n}\nAdd_iptables(){\n\tiptables_ADD_IN_port=$1\n\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${iptables_ADD_IN_port} -j ACCEPT\n\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${iptables_ADD_IN_port} -j ACCEPT\n}\nDel_iptables(){\n\tiptables_DEL_IN_port=$1\n\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${iptables_DEL_IN_port} -j ACCEPT\n\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${iptables_DEL_IN_port} -j ACCEPT\n}\nSave_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\tfi\n}\nSet_iptables(){\n\tif [[ ${release} == \"centos\" ]]; then\n\t\tservice iptables save\n\t\tchkconfig --level 2345 iptables on\n\telse\n\t\tiptables-save > /etc/iptables.up.rules\n\t\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\t\tchmod +x /etc/network/if-pre-up.d/iptables\n\tfi\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/status.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\tif [[ -e \"/etc/init.d/status-client\" ]]; then\n\t\trm -rf /etc/init.d/status-client\n\t\tService_Server_Status_client\n\tfi\n\tif [[ -e \"/etc/init.d/status-server\" ]]; then\n\t\trm -rf /etc/init.d/status-server\n\t\tService_Server_Status_server\n\tfi\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/status.sh\" && chmod +x status.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\nmenu_client(){\necho && echo -e \"  ServerStatus 一键安装管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  -- Toyo | doub.io/shell-jc3 --\n  \n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n ————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 客户端\n ${Green_font_prefix} 2.${Font_color_suffix} 更新 客户端\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 客户端\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 客户端\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 客户端\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 客户端\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 设置 客户端配置\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 客户端信息\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 客户端日志\n————————————\n ${Green_font_prefix}10.${Font_color_suffix} 切换为 服务端菜单\" && echo\nif [[ -e \"${client_file}/status-client.py\" ]]; then\n\tcheck_pid_client\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\techo -e \" 当前状态: 客户端 ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\telse\n\t\techo -e \" 当前状态: 客户端 ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\tfi\nelse\n\tif [[ -e \"${file}/status-client.py\" ]]; then\n\t\tcheck_pid_client\n\t\tif [[ ! -z \"${PID}\" ]]; then\n\t\t\techo -e \" 当前状态: 客户端 ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\t\telse\n\t\t\techo -e \" 当前状态: 客户端 ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\t\tfi\n\telse\n\t\techo -e \" 当前状态: 客户端 ${Red_font_prefix}未安装${Font_color_suffix}\"\n\tfi\nfi\necho\nread -e -p \" 请输入数字 [0-10]:\" num\ncase \"$num\" in\n\t0)\n\tUpdate_Shell\n\t;;\n\t1)\n\tInstall_ServerStatus_client\n\t;;\n\t2)\n\tUpdate_ServerStatus_client\n\t;;\n\t3)\n\tUninstall_ServerStatus_client\n\t;;\n\t4)\n\tStart_ServerStatus_client\n\t;;\n\t5)\n\tStop_ServerStatus_client\n\t;;\n\t6)\n\tRestart_ServerStatus_client\n\t;;\n\t7)\n\tSet_ServerStatus_client\n\t;;\n\t8)\n\tView_ServerStatus_client\n\t;;\n\t9)\n\tView_client_Log\n\t;;\n\t10)\n\tmenu_server\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-10]\"\n\t;;\nesac\n}\nmenu_server(){\necho && echo -e \"  ServerStatus 一键安装管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  -- Toyo | doub.io/shell-jc3 --\n  \n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n ————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 服务端\n ${Green_font_prefix} 2.${Font_color_suffix} 更新 服务端\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 服务端\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 服务端\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 服务端\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 服务端\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 设置 服务端配置\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 服务端信息\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 服务端日志\n————————————\n ${Green_font_prefix}10.${Font_color_suffix} 切换为 客户端菜单\" && echo\nif [[ -e \"${server_file}/sergate\" ]]; then\n\tcheck_pid_server\n\tif [[ ! -z \"${PID}\" ]]; then\n\t\techo -e \" 当前状态: 服务端 ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n\telse\n\t\techo -e \" 当前状态: 服务端 ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n\tfi\nelse\n\techo -e \" 当前状态: 服务端 ${Red_font_prefix}未安装${Font_color_suffix}\"\nfi\necho\nread -e -p \" 请输入数字 [0-10]:\" num\ncase \"$num\" in\n\t0)\n\tUpdate_Shell\n\t;;\n\t1)\n\tInstall_ServerStatus_server\n\t;;\n\t2)\n\tUpdate_ServerStatus_server\n\t;;\n\t3)\n\tUninstall_ServerStatus_server\n\t;;\n\t4)\n\tStart_ServerStatus_server\n\t;;\n\t5)\n\tStop_ServerStatus_server\n\t;;\n\t6)\n\tRestart_ServerStatus_server\n\t;;\n\t7)\n\tSet_ServerStatus_server\n\t;;\n\t8)\n\tList_ServerStatus_server\n\t;;\n\t9)\n\tView_server_Log\n\t;;\n\t10)\n\tmenu_client\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-10]\"\n\t;;\nesac\n}\ncheck_sys\naction=$1\nif [[ ! -z $action ]]; then\n\tif [[ $action = \"s\" ]]; then\n\t\tmenu_server\n\telif [[ $action = \"c\" ]]; then\n\t\tmenu_client\n\tfi\nelse\n\tmenu_server\nfi"
        },
        {
          "name": "tinymapper.sh",
          "type": "blob",
          "size": 17.0673828125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#\tSystem Required: CentOS/Debian/Ubuntu\n#\tDescription: tinyPortMapper\n#\tVersion: 1.0.2\n#\tAuthor: Toyo\n#\tBlog: https://doub.io/wlzy-36/\n#=================================================\nsh_ver=\"1.0.2\"\n\nFolder=\"/usr/local/tinyPortMapper\"\nFile=\"/usr/local/tinyPortMapper/tinymapper\"\nLOG_File=\"/tmp/tinymapper.log\"\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Green_background_prefix=\"\\033[42;37m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\" && Error=\"${Red_font_prefix}[错误]${Font_color_suffix}\" && Tip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\nGet_IP(){\n\tip=$(wget -qO- -t1 -T2 ipinfo.io/ip)\n\tif [[ -z \"${ip}\" ]]; then\n\t\tip=$(wget -qO- -t1 -T2 api.ip.sb/ip)\n\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\tip=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip)\n\t\t\tif [[ -z \"${ip}\" ]]; then\n\t\t\t\tip=\"VPS_IP\"\n\t\t\tfi\n\t\tfi\n\tfi\n}\nAdd_iptables(){\n\tiptables_Type=$1\n\tif [[ ! -z \"${local_Port}\" ]]; then\n\t\tif [[ ${iptables_Type} == \"tcp\" ]]; then\n\t\t\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${local_Port} -j ACCEPT\n\t\telif [[ ${iptables_Type} == \"udp\" ]]; then\n\t\t\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${local_Port} -j ACCEPT\n\t\telif [[ ${iptables_Type} == \"all\" ]]; then\n\t\t\tiptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${local_Port} -j ACCEPT\n\t\t\tiptables -I INPUT -m state --state NEW -m udp -p udp --dport ${local_Port} -j ACCEPT\n\t\tfi\n\tfi\n}\nDel_iptables(){\n\tiptables_Type=$1\n\tif [[ ! -z \"${port}\" ]]; then\n\t\tif [[ ${iptables_Type} == \"tcp\" ]]; then\n\t\t\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\t\telif [[ ${iptables_Type} == \"udp\" ]]; then\n\t\t\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n\t\telif [[ ${iptables_Type} == \"all\" ]]; then\n\t\t\tiptables -D INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n\t\t\tiptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n\t\tfi\n\tfi\n}\nSave_iptables(){\n\tiptables-save > /etc/iptables.up.rules\n}\nSet_iptables(){\n\tiptables-save > /etc/iptables.up.rules\n\techo -e '#!/bin/bash\\n/sbin/iptables-restore < /etc/iptables.up.rules' > /etc/network/if-pre-up.d/iptables\n\tchmod +x /etc/network/if-pre-up.d/iptables\n}\ncheck_tinyPortMapper(){\n\t[[ ! -e ${File} ]] && echo -e \"${Error} 没有安装 tinyPortMapper , 请检查 !\" && exit 1\n}\ncheck_sys(){\n\tif [[ -f /etc/redhat-release ]]; then\n\t\trelease=\"centos\"\n\telif cat /etc/issue | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n\telif cat /proc/version | grep -q -E -i \"debian\"; then\n\t\trelease=\"debian\"\n\telif cat /proc/version | grep -q -E -i \"ubuntu\"; then\n\t\trelease=\"ubuntu\"\n\telif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\n\t\trelease=\"centos\"\n    fi\n\tbit=`uname -m`\n}\ncheck_new_ver(){\n\ttinymapper_new_ver=$(wget --no-check-certificate -qO- https://api.github.com/repos/wangyu-/tinyPortMapper/releases | grep -o '\"tag_name\": \".*\"' |grep -v '20180620.0'|head -n 1| sed 's/\"//g;s/v//g' | sed 's/tag_name: //g')\n\tif [[ -z ${tinymapper_new_ver} ]]; then\n\t\techo -e \"${Error} tinyPortMapper 最新版本获取失败，请手动获取最新版本号[ https://github.com/wangyu-/tinyPortMapper/releases ]\"\n\t\tread -e -p \"请输入版本号 [ 格式是日期 , 如 20180224.0 ] :\" tinymapper_new_ver\n\t\t[[ -z \"${tinymapper_new_ver}\" ]] && echo \"取消...\" && exit 1\n\telse\n\t\techo -e \"${Info} 检测到 tinyPortMapper 最新版本为 [ ${tinymapper_new_ver} ]\"\n\tfi\n}\nDownload_tinyPortMapper(){\n\tcd ${Folder}\n\twget -N --no-check-certificate \"https://github.com/wangyu-/tinyPortMapper/releases/download/${tinymapper_new_ver}/tinymapper_binaries.tar.gz\"\n\t[[ ! -e \"tinymapper_binaries.tar.gz\" ]] && echo -e \"${Error} tinyPortMapper 压缩包下载失败 !\" && exit 1\n\ttar -xzf tinymapper_binaries.tar.gz\n\tif [[ ${bit} == \"x86_64\" ]]; then\n\t\t[[ ! -e \"tinymapper_amd64\" ]] && echo -e \"${Error} tinyPortMapper 解压失败 !\" && exit 1\n\t\tmv tinymapper_amd64 tinymapper\n\telse\n\t\t[[ ! -e \"tinymapper_x86\" ]] && echo -e \"${Error} tinyPortMapper 解压失败 !\" && exit 1\n\t\tmv tinymapper_x86 tinymapper\n\tfi\n\t[[ ! -e \"tinymapper\" ]] && echo -e \"${Error} tinyPortMapper 重命名失败 !\" && exit 1\n\tchmod +x tinymapper\n\trm -rf version.txt\n\trm -rf tinymapper_*\n\trm -rf tinymapper_binaries.tar.gz\n}\nInstall_tinyPortMapper(){\n\t[[ -e ${File} ]] && echo -e \"${Error} 已经安装 tinyPortMapper , 请检查 !\" && exit 1\n\tmkdir ${Folder}\n\tcheck_new_ver\n\tDownload_tinyPortMapper\n\tSet_iptables\n\techo -e \"${Info} tinyPortMapper 安装完成！\"\n}\nUninstall_tinyPortMapper(){\n\tcheck_tinyPortMapper\n\techo \"确定要 卸载 tinyPortMapper？[y/N]\" && echo\n\tread -e -p \"(默认: n):\" unyn\n\t[[ -z ${unyn} ]] && unyn=\"n\"\n\tif [[ ${unyn} == [Yy] ]]; then\n\t\tUninstall_forwarding \"Uninstall\"\n\t\trm -rf ${Folder}\n\t\techo && echo \" tinyPortMapper 卸载完成 !\" && echo\n\telse\n\t\techo && echo \" 卸载已取消...\" && echo\n\tfi\n}\nUninstall_forwarding(){\n\tUninstall_forwarding_Type=$1\n\tcheck_tinyPortMapper\n\ttinymapper_Total=$(ps -ef | grep tinymapper | grep -v grep | grep -v \"tinymapper.sh\" | wc -l)\n\tif [[ ${tinymapper_Total} != \"0\" ]]; then\n\t\tfor((integer = 1; integer <= ${tinymapper_Total}; integer++))\n\t\tdo\n\t\t\tUninstall_all=$(ps -ef | grep tinymapper | grep -v grep | grep -v \"tinymapper.sh\")\n\t\t\tUninstall_pid=$(echo -e \"${Uninstall_all}\"| sed -n \"1p\"| awk '{print $2}')\n\t\t\tUninstall_listen=$(echo -e \"${Uninstall_all}\"| sed -n \"1p\"| awk '{print $10}'| awk -F ':' '{print $NF}')\n\t\t\tUninstall_type_tcp=$(echo -e \"${Uninstall_all}\"| sed -n \"1p\"| awk '{print $13}')\n\t\t\tif [[ ${Uninstall_type_tcp} == \"-t\" ]]; then\n\t\t\tUninstall_type_udp=$(echo -e \"${Uninstall_all}\"| sed -n \"1p\"| awk '{print $14}')\n\t\t\tif [[ ${Uninstall_type_udp} == \"-u\" ]]; then\n\t\t\t\tUninstall_type=\"all\"\n\t\t\telse\n\t\t\t\tUninstall_type=\"tcp\"\n\t\t\tfi\n\t\t\telse\n\t\t\t\tUninstall_type=\"udp\"\n\t\t\tfi\n\t\t\tkill -9 \"${Uninstall_pid}\"\n\t\t\tDel_iptables \"${Uninstall_type}\"\n\t\t\tsleep 1s\n\t\tdone\n\tfi\n\tif [[ ${Uninstall_forwarding_Type} != \"Uninstall\" ]]; then\n\t\ttinymapper_Total=$(ps -ef | grep tinymapper | grep -v grep | grep -v \"tinymapper.sh\" | wc -l)\n\t\tif [[ ${tinymapper_Total} == \"0\" ]]; then\n\t\t\techo -e \"${Info} tinyPortMapper 所有端口转发已清空！\"\n\t\telse\n\t\t\techo -e \"${Error} tinyPortMapper 所有端口转发清空失败！\"\n\t\tfi\n\tfi\n}\nAdd_forwarding(){\n\tcheck_tinyPortMapper\n\tSet_local_Port\n\tSet_Mapper_Port\n\tSet_Mapper_IP\n\tSet_Mapper_Type\n\tMapper_Type_1=${Mapper_Type}\n\t[[ ${Mapper_Type_1} == \"ALL\" ]] && Mapper_Type_1=\"TCP+UDP\"\n\techo -e \"\\n——————————————————————————————\n    请检查 tinyPortMapper 配置是否有误 !\\n\n\t本地监听端口\\t : ${Red_background_prefix} ${local_Port} ${Font_color_suffix}\n\t远程转发 IP\\t : ${Red_background_prefix} ${Mapper_IP} ${Font_color_suffix}\n\t远程转发端口\\t : ${Red_background_prefix} ${Mapper_Port} ${Font_color_suffix}\n\t转发类型\\t : ${Red_background_prefix} ${Mapper_Type_1} ${Font_color_suffix}\n——————————————————————————————\\n\"\n\tread -e -p \"请按任意键继续，如有配置错误请使用 Ctrl+C 退出。\" var\n\tStart_tinyPortMapper\n\tGet_IP\n\tclear\n\techo -e \"\\n——————————————————————————————\n\ttinyPortMapper 已启动 !\\n\n\t本地监听 IP\\t : ${Red_background_prefix} ${ip} ${Font_color_suffix}\n\t本地监听端口\\t : ${Red_background_prefix} ${local_Port} ${Font_color_suffix}\\n\n\t远程转发 IP\\t : ${Red_background_prefix} ${Mapper_IP} ${Font_color_suffix}\n\t远程转发端口\\t : ${Red_background_prefix} ${Mapper_Port} ${Font_color_suffix}\n\t转发类型\\t : ${Red_background_prefix} ${Mapper_Type_1} ${Font_color_suffix}\n——————————————————————————————\\n\"\n}\nSet_local_Port(){\n\twhile true\n\tdo\n\t\techo -e \"请输入 tinyPortMapper 的 本地监听端口 [1-65535]\"\n\t\tread -e -p \"(默认回车取消):\" local_Port\n\t\t[[ -z \"${local_Port}\" ]] && echo \"已取消...\" && exit 1\n\t\techo $((${local_Port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${local_Port} -ge 1 ]] && [[ ${local_Port} -le 65535 ]]; then\n\t\t\t\techo\n\t\t\t\techo \"——————————————————————————————\"\n\t\t\t\techo -e \"\t本地监听端口 : ${Red_background_prefix} ${local_Port} ${Font_color_suffix}\"\n\t\t\t\techo \"——————————————————————————————\"\n\t\t\t\techo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo -e \"${Error} 请输入正确的数字 !\"\n\t\t\tfi\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字 !\"\n\t\tfi\n\tdone\n}\nSet_Mapper_Port(){\n\twhile true\n\tdo\n\t\techo -e \"请输入 tinyPortMapper 远程被转发 端口 [1-65535](就是被中转服务器的端口)\"\n\t\tread -e -p \"(默认同本地监听端口: ${local_Port}):\" Mapper_Port\n\t\t[[ -z \"${Mapper_Port}\" ]] && Mapper_Port=${local_Port}\n\t\techo $((${Mapper_Port}+0)) &>/dev/null\n\t\tif [[ $? -eq 0 ]]; then\n\t\t\tif [[ ${Mapper_Port} -ge 1 ]] && [[ ${Mapper_Port} -le 65535 ]]; then\n\t\t\t\techo\n\t\t\t\techo \"——————————————————————————————\"\n\t\t\t\techo -e \"\t远程转发端口 : ${Red_background_prefix} ${Mapper_Port} ${Font_color_suffix}\"\n\t\t\t\techo \"——————————————————————————————\"\n\t\t\t\techo\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\techo -e \"${Error} 请输入正确的数字 !\"\n\t\t\tfi\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的数字 !\"\n\t\tfi\n\tdone\n}\nSet_Mapper_IP(){\n\techo -e \"请输入 tinyPortMapper 远程被转发 IP(就是被中转服务器的外网IP)\"\n\tread -e -p \"(默认回车取消):\" Mapper_IP\n\t[[ -z \"${Mapper_IP}\" ]] && echo \"已取消...\" && exit 1\n\techo\n\techo \"——————————————————————————————\"\n\techo -e \"\t远程转发 IP : ${Red_background_prefix} ${Mapper_IP} ${Font_color_suffix}\"\n\techo \"——————————————————————————————\"\n\techo\n}\nSet_Mapper_Type(){\n\techo -e \"请输入数字 来选择 tinyPortMapper 转发类型:\"\n\techo -e \"\t1. TCP\\n\t2. UDP\\n\t3. TCP+UDP(ALL)\\n\"\n\tread -e -p \"(默认: TCP+UDP):\" Mapper_Type_num\n\t[[ -z \"${Mapper_Type_num}\" ]] && Mapper_Type_num=\"3\"\n\tif [[ ${Mapper_Type_num} = \"1\" ]]; then\n\t\tMapper_Type=\"TCP\"\n\telif [[ ${Mapper_Type_num} = \"2\" ]]; then\n\t\tMapper_Type=\"UDP\"\n\telif [[ ${Mapper_Type_num} = \"3\" ]]; then\n\t\tMapper_Type=\"ALL\"\n\telse\n\t\tMapper_Type=\"ALL\"\n\tfi\n}\nStart_tinyPortMapper(){\n\tcd ${Folder}\n\tif [[ ${Mapper_Type} = \"TCP\" ]]; then\n\t\tRun_tinyPortMapper \"-t\"\n\t\tsleep 2s\n\t\tPID=$(ps -ef | grep \"./tinymapper -l 0.0.0.0:${local_Port}\" | grep -v grep | awk '{print $2}')\n\t\t[[ -z ${PID} ]] && echo -e \"${Error} tinyPortMapper TCP 启动失败 !\" && exit 1\n\t\tAdd_iptables \"tcp\"\n\telif [[ ${Mapper_Type} = \"UDP\" ]]; then\n\t\tRun_tinyPortMapper \"-u\"\n\t\tsleep 2s\n\t\tPID=$(ps -ef | grep \"./tinymapper -l 0.0.0.0:${local_Port}\" | grep -v grep | awk '{print $2}')\n\t\t[[ -z ${PID} ]] && echo -e \"${Error} tinyPortMapper UDP 启动失败 !\" && exit 1\n\t\tAdd_iptables \"udp\"\n\telif [[ ${Mapper_Type} = \"ALL\" ]]; then\n\t\tRun_tinyPortMapper \"-t -u\"\n\t\tsleep 2s\n\t\tPID=$(ps -ef | grep \"./tinymapper -l 0.0.0.0:${local_Port}\" | grep -v grep | awk '{print $2}')\n\t\t[[ -z ${PID} ]] && echo -e \"${Error} tinyPortMapper TCP+UDP 启动失败 !\" && exit 1\n\t\tAdd_iptables \"all\"\n\tfi\n\tSave_iptables\n}\nRun_tinyPortMapper(){\n\tnohup ./tinymapper -l 0.0.0.0:${local_Port} -r ${Mapper_IP}:${Mapper_Port} $1 > ${LOG_File} 2>&1 &\n}\nView_forwarding(){\n\tcheck_tinyPortMapper\n\ttinymapper_Total=$(ps -ef | grep tinymapper | grep -v grep | grep -v \"tinymapper.sh\" | wc -l)\n\tif [[ ${tinymapper_Total} = \"0\" ]]; then\n\t\techo -e \"${Error} 没有发现 tinyPortMapper 进程运行，请检查 !\" && exit 1\n\tfi\n\ttinymapper_list_all=\"\"\n\tfor((integer = 1; integer <= ${tinymapper_Total}; integer++))\n\tdo\n\t\ttinymapper_all=$(ps -ef | grep tinymapper | grep -v grep | grep -v \"tinymapper.sh\")\n\t\ttinymapper_pid=$(echo -e \"${tinymapper_all}\"| sed -n \"${integer}p\"| awk '{print $2}')\n\t\ttinymapper_listen=$(echo -e \"${tinymapper_all}\"| sed -n \"${integer}p\"| awk '{print $10}'| awk -F ':' '{print $NF}')\n\t\ttinymapper_fork=$(echo -e \"${tinymapper_all}\"| sed -n \"${integer}p\"| awk '{print $12}')\n\t\ttinymapper_type_tcp=$(echo -e \"${tinymapper_all}\"| sed -n \"${integer}p\"| awk '{print $13}')\n\t\tif [[ ${tinymapper_type_tcp} == \"-t\" ]]; then\n\t\ttinymapper_type_udp=$(echo -e \"${tinymapper_all}\"| sed -n \"${integer}p\"| awk '{print $14}')\n\t\tif [[ ${tinymapper_type_udp} == \"-u\" ]]; then\n\t\t\ttinymapper_type=\"TCP+UDP\"\n\t\telse\n\t\t\ttinymapper_type=\"TCP\"\n\t\tfi\n\t\telse\n\t\t\ttinymapper_type=\"UDP\"\n\t\tfi\n\t\ttinymapper_list_all=${tinymapper_list_all}\"进程PID: ${Red_font_prefix}\"${tinymapper_pid}\"${Font_color_suffix} 类型: ${Red_font_prefix}\"${tinymapper_type}\"${Font_color_suffix} 监听端口: ${Green_font_prefix}\"${tinymapper_listen}\"${Font_color_suffix} 转发IP和端口: ${Green_font_prefix}\"${tinymapper_fork}\"${Font_color_suffix}\\n\"\n\tdone\n\techo\n\techo -e \"当前有${Green_background_prefix}\" ${tinymapper_Total} \"${Font_color_suffix}个 tinyPortMapper 端口转发进程。\"\n\techo -e \"${tinymapper_list_all}\"\n}\nDel_forwarding(){\n\tcheck_tinyPortMapper\n\tPID=$(ps -ef | grep tinymapper | grep -v grep | grep -v \"tinymapper.sh\" | awk '{print $2}')\n\t[[ -z $PID ]] && echo -e \"${Error} 没有发现 tinyPortMapper 进程运行，请检查 !\" && exit 1\n\twhile true\n\tdo\n\t\tView_forwarding\n\t\tread -e -p \"请输入你要终止的 tinyPortMapper 本地监听端口:\" Del_forwarding_port\n\t\t[[ -z \"${Del_forwarding_port}\" ]] && echo \"已取消...\" && exit 0\n\t\tDel_port=$(echo -e \"${tinymapper_list_all}\"|grep ${Del_forwarding_port})\n\t\tif [[ ! -z ${Del_port} ]]; then\n\t\t\tport=${Del_forwarding_port}\n\t\t\tDel_all=$(ps -ef | grep tinymapper | grep -v grep | grep -v \"tinymapper.sh\")\n\t\t\tpid=$(echo -e \"${Del_all}\"| grep \"./tinymapper -l 0.0.0.0:${Del_forwarding_port}\"| awk '{print $2}')\n\t\t\tDel_type_tcp=$(echo -e \"${Del_all}\"| grep \"./tinymapper -l 0.0.0.0:${Del_forwarding_port}\"| awk '{print $13}')\n\t\t\tif [[ ${Del_type_tcp} == \"-t\" ]]; then\n\t\t\t\tDel_type_udp=$(echo -e \"${Del_all}\"| grep \"./tinymapper -l 0.0.0.0:${Del_forwarding_port}\"| awk '{print $14}')\n\t\t\t\tif [[ ${Del_type_udp} == \"-u\" ]]; then\n\t\t\t\t\tDel_type=\"all\"\n\t\t\t\telse\n\t\t\t\t\tDel_type=\"tcp\"\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\tDel_type=\"udp\"\n\t\t\tfi\n\t\t\tkill -9 ${pid}\n\t\t\tsleep 2s\n\t\t\tpid=$(ps -ef | grep tinymapper | grep -v grep | grep -v \"tinymapper.sh\"| grep \"./tinymapper -l 0.0.0.0:${Del_forwarding_port}\"| awk '{print $2}')\n\t\t\tif [[ -z ${pid} ]]; then\n\t\t\t\techo -e \"${Info} tinyPortMapper [${Del_forwarding_port}] 终止成功！\"\n\t\t\t\tDel_iptables \"${Del_type}\"\n\t\t\telse\n\t\t\t\techo -e \"${Error} tinyPortMapper [${Del_forwarding_port}] 终止失败！\" && exit 1\n\t\t\tfi\n\t\t\tbreak\n\t\telse\n\t\t\techo -e \"${Error} 请输入正确的端口 !\"\n\t\tfi\n\tdone\n}\n# 查看日志\nView_Log(){\n\t[[ ! -e ${LOG_File} ]] && echo -e \"${Error} tinyPortMapper 日志文件不存在 !\" && exit 1\n\techo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${LOG_File}${Font_color_suffix} 命令。\" && echo\n\ttail -f ${LOG_File}\n}\nUpdate_Shell(){\n\tsh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/tinymapper.sh\"|grep 'sh_ver=\"'|awk -F \"=\" '{print $NF}'|sed 's/\\\"//g'|head -1) && sh_new_type=\"github\"\n\t[[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n\twget -N --no-check-certificate \"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/tinymapper.sh\" && chmod +x tinymapper.sh\n\techo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\ncheck_sys\n[[ ${release} != \"centos\" ]] && [[ ${release} != \"debian\" ]] && [[ ${release} != \"ubuntu\" ]] && echo -e \"${Error} 本脚本不支持当前系统 ${release} !\" && exit 1\necho && echo -e \" tinyPortMapper 端口转发一键管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  -- Toyo | doub.io/wlzy-36 --\n  \n ${Green_font_prefix}0.${Font_color_suffix} 升级脚本\n————————————\n ${Green_font_prefix}1.${Font_color_suffix} 安装 tinyPortMapper\n ${Green_font_prefix}2.${Font_color_suffix} 卸载 tinyPortMapper\n ${Green_font_prefix}3.${Font_color_suffix} 清空 tinyPortMapper 端口转发\n————————————\n ${Green_font_prefix}4.${Font_color_suffix} 查看 tinyPortMapper 端口转发\n ${Green_font_prefix}5.${Font_color_suffix} 添加 tinyPortMapper 端口转发\n ${Green_font_prefix}6.${Font_color_suffix} 删除 tinyPortMapper 端口转发\n————————————\n ${Green_font_prefix}7.${Font_color_suffix} 查看 tinyPortMapper 输出日志\" && echo\nread -e -p \" 请输入数字 [0-7]:\" num\ncase \"$num\" in\n\t0)\n\tUpdate_Shell\n\t;;\n\t1)\n\tInstall_tinyPortMapper\n\t;;\n\t2)\n\tUninstall_tinyPortMapper\n\t;;\n\t3)\n\tUninstall_forwarding\n\t;;\n\t4)\n\tView_forwarding\n\t;;\n\t5)\n\tAdd_forwarding\n\t;;\n\t6)\n\tDel_forwarding\n\t;;\n\t7)\n\tView_Log\n\t;;\n\t*)\n\techo \"请输入正确数字 [0-7]\"\n\t;;\nesac"
        }
      ]
    }
  ]
}