{
  "metadata": {
    "timestamp": 1736568596718,
    "page": 656,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "supabase/postgres",
      "stars": 1421,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.263671875,
          "content": ".DS_Store\n.python-version\n.mise.toml\nvenv/\n*.swp\ndocker/cache/\n\nansible/image-manifest*.json\ntestinfra-aio-container-logs.log\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n#nix related\nresult*\n.env-local\n.history\n\n\n#IDE\n.idea/\n.vscode/\n\ndb\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.80859375,
          "content": "# Welcome to Supabase Postgres contributing guide\n\n## Adding a new extension\n\nExtensions can either be built from source or installed through a debian package. In general, you want to add the installation commands for your extension to the [Dockerfile](Dockerfile) following the steps below.\n\n1. Create a [build stage](Dockerfile#L777) named after your extension.\n2. Add build args that specify the extension's [release version](Dockerfile#L37).\n3. If your extension is published as a package, download it to `/tmp/<name>.deb` using the [ADD command](Dockerfile#L705).\n4. If you need to build the extensions from source, use [checkinstall](Dockerfile#L791) to create a `/tmp/<name>.deb` package.\n5. Copy your extension's package from build stage to [extensions stage](Dockerfile#L851).\n\nHere's a minimal example:\n\n```dockerfile\nARG pg_graphql_release=1.1.0\n\n####################\n# 19-pg_graphql.yml\n####################\nFROM base as pg_graphql\n# Download package archive\nARG pg_graphql_release\nADD \"https://github.com/supabase/pg_graphql/releases/download/v${pg_graphql_release}/pg_graphql-v${pg_graphql_release}-pg${postgresql_major}-${TARGETARCH}-linux-gnu.deb\" \\\n    /tmp/pg_graphql.deb\n\n####################\n# Collect extension packages\n####################\nFROM scratch as extensions\nCOPY --from=pg_graphql /tmp/*.deb /tmp/\n```\n\nUsing this process maximises the effectiveness of Docker layer caching, which significantly speeds up our CI builds.\n\n## Testing an extension\n\nExtensions can be tested automatically using pgTAP. Start by creating a new file in [migrations/tests/extensions](migrations/tests/extensions). For example:\n\n```sql\nBEGIN;\ncreate extension if not exists wrappers with schema \"extensions\";\nROLLBACK;\n```\n\nThis test will be run as part of CI to check that your extension can be enabled successfully from the final Docker image.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 37.2158203125,
          "content": "# syntax=docker/dockerfile:1.6\nARG postgresql_major=15\nARG postgresql_release=${postgresql_major}.1\n\n# Bump default build arg to build a package from source\n# Bump vars.yml to specify runtime package version\nARG sfcgal_release=1.3.10\nARG postgis_release=3.3.2\nARG pgrouting_release=3.4.1\nARG pgtap_release=1.2.0\nARG pg_cron_release=1.6.2\nARG pgaudit_release=1.7.0\nARG pgjwt_release=9742dab1b2f297ad3811120db7b21451bca2d3c9\nARG pgsql_http_release=1.5.0\nARG plpgsql_check_release=2.2.5\nARG pg_safeupdate_release=1.4\nARG timescaledb_release=2.9.1\nARG wal2json_release=2_5\nARG pljava_release=1.6.4\nARG plv8_release=3.1.5\nARG pg_plan_filter_release=5081a7b5cb890876e67d8e7486b6a64c38c9a492\nARG pg_net_release=0.9.2\nARG rum_release=1.3.13\nARG pg_hashids_release=cd0e1b31d52b394a0df64079406a14a4f7387cd6\nARG libsodium_release=1.0.18\nARG pgsodium_release=3.1.6\nARG pg_graphql_release=1.5.1\nARG pg_stat_monitor_release=1.1.1\nARG pg_jsonschema_release=0.1.4\nARG pg_repack_release=1.4.8\nARG vault_release=0.2.8\nARG groonga_release=12.0.8\nARG pgroonga_release=2.4.0\nARG wrappers_release=0.4.1\nARG hypopg_release=1.3.1\nARG pgvector_release=0.4.0\nARG pg_tle_release=1.3.2\nARG index_advisor_release=0.2.0\nARG supautils_release=2.5.0\nARG wal_g_release=2.0.1\n\n####################\n# Setup Postgres PPA\n####################\nFROM ubuntu:focal as ppa\n# Redeclare args for use in subsequent stages\nARG postgresql_major\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    gnupg \\\n    ca-certificates \\\n    && rm -rf /var/lib/apt/lists/*\n# Add Postgres PPA\n# In the off-chance that the key in the repository expires, it can be replaced by running the following in the repository's root:\n#  gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys $NEW_POSTGRESQL_GPG_KEY\n#  gpg --export --armor $NEW_POSTGRESQL_GPG_KEY > postgresql.gpg.key\nCOPY postgresql.gpg.key /tmp/postgresql.gpg.key\nRUN apt-key add /tmp/postgresql.gpg.key && \\\n    echo \"deb https://apt-archive.postgresql.org/pub/repos/apt focal-pgdg-archive main\" > /etc/apt/sources.list.d/pgdg.list\n\n####################\n# Download pre-built postgres\n####################\nFROM ppa as pg\nARG postgresql_release\n# Download .deb packages\nRUN apt-get update && apt-get install -y --no-install-recommends --download-only \\\n    postgresql-${postgresql_major}=${postgresql_release}-1.pgdg20.04+1 \\\n    && rm -rf /var/lib/apt/lists/*\nRUN mv /var/cache/apt/archives/*.deb /tmp/\n\nFROM ppa as pg-dev\nARG postgresql_release\n# Download .deb packages\nRUN apt-get update && apt-get install -y --no-install-recommends --download-only \\\n    postgresql-server-dev-${postgresql_major}=${postgresql_release}-1.pgdg20.04+1 \\\n    && rm -rf /var/lib/apt/lists/*\nRUN mv /var/cache/apt/archives/*.deb /tmp/\n\n####################\n# Install postgres\n####################\nFROM ubuntu:focal as base\n# Redeclare args for use in subsequent stages\nARG TARGETARCH\nARG postgresql_major\n\n# Install postgres\nCOPY --from=pg /tmp /tmp\n# Ref: https://github.com/docker-library/postgres/blob/master/15/bullseye/Dockerfile#L91\nENV DEBIAN_FRONTEND=noninteractive\nRUN set -ex; \\\n    export PYTHONDONTWRITEBYTECODE=1; \\\n    apt-get update; \\\n    apt-get install -y --no-install-recommends /tmp/postgresql-common_*.deb /tmp/postgresql-client-common_*.deb; \\\n    sed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf; \\\n    apt-get install -y --no-install-recommends /tmp/*.deb; \\\n    rm -rf /var/lib/apt/lists/* /tmp/*; \\\n    find /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S \"$pyc\" &> /dev/null || rm -vf \"$pyc\"; done' -- '{}' +\n\nENV PATH=$PATH:/usr/lib/postgresql/${postgresql_major}/bin\nENV PGDATA=/var/lib/postgresql/data\n\n# Make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\nRUN localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\nENV LANG=en_US.UTF-8\nENV LC_CTYPE=C.UTF-8\nENV LC_COLLATE=C.UTF-8\n\nFROM base as builder\n# Install build dependencies\nCOPY --from=pg-dev /tmp /tmp\nRUN apt-get update && \\\n    rm -f /tmp/libssl-dev* && \\\n    apt-get install -y --no-install-recommends \\\n    /tmp/*.deb \\\n    build-essential \\\n    checkinstall \\\n    cmake \\\n    && rm -rf /var/lib/apt/lists/* /tmp/*\n\nFROM builder as ccache\n# Cache large build artifacts\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    clang \\\n    ccache \\\n    && rm -rf /var/lib/apt/lists/*\nENV CCACHE_DIR=/ccache\nENV PATH=/usr/lib/ccache:$PATH\n# Used to update ccache\nARG CACHE_EPOCH\n\n####################\n# 01-postgis.yml\n####################\nFROM ccache as sfcgal\n# Download and extract\nARG sfcgal_release\nARG sfcgal_release_checksum\nADD --checksum=${sfcgal_release_checksum} \\\n    \"https://supabase-public-artifacts-bucket.s3.amazonaws.com/sfcgal/SFCGAL-v${sfcgal_release}.tar.gz\" \\\n    /tmp/sfcgal.tar.gz\nRUN tar -xvf /tmp/sfcgal.tar.gz -C /tmp --one-top-level --strip-components 1 && \\\n    rm -rf /tmp/sfcgal.tar.gz\n# Install build dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libcgal-dev \\\n    libboost-serialization1.71-dev \\\n    libmpfr-dev \\\n    libgmp-dev \\\n    && rm -rf /var/lib/apt/lists/*\n# Build from source\nWORKDIR /tmp/sfcgal/build\nRUN cmake ..\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=yes --fstrans=no --backup=no --pakdir=/tmp --pkgname=sfcgal --pkgversion=${sfcgal_release} --requires=libgmpxx4ldbl,libboost-serialization1.71.0,libmpfr6 --nodoc\n\nFROM sfcgal as postgis-source\n# Download and extract\nARG postgis_release\nARG postgis_release_checksum\nADD --checksum=${postgis_release_checksum} \\\n    \"https://supabase-public-artifacts-bucket.s3.amazonaws.com/postgis-${postgis_release}.tar.gz\" \\\n    /tmp/postgis.tar.gz\nRUN tar -xvf /tmp/postgis.tar.gz -C /tmp && \\\n    rm -rf /tmp/postgis.tar.gz\n# Install build dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    protobuf-c-compiler \\\n    libgeos-dev \\\n    libproj-dev \\\n    libgdal-dev \\\n    libjson-c-dev \\\n    libxml2-dev \\\n    libprotobuf-c-dev \\\n    && rm -rf /var/lib/apt/lists/*\n# Build from source\nWORKDIR /tmp/postgis-${postgis_release}\nRUN ./configure --with-sfcgal\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --requires=libgeos-c1v5,libproj15,libjson-c4,libprotobuf-c1,libgdal26 --nodoc\n\nFROM ppa as postgis\n# Latest available is 3.3.2\nARG postgis_release\n# Download pre-built packages\nRUN apt-get update && apt-get install -y --no-install-recommends --download-only \\\n    postgresql-${postgresql_major}-postgis-3=${postgis_release}+dfsg-1.pgdg20.04+1 \\\n    && rm -rf /var/lib/apt/lists/*\nRUN mv /var/cache/apt/archives/*.deb /tmp/\n\n####################\n# 02-pgrouting.yml\n####################\nFROM ccache as pgrouting-source\n# Download and extract\nARG pgrouting_release\nARG pgrouting_release_checksum\nADD --checksum=${pgrouting_release_checksum} \\\n    \"https://github.com/pgRouting/pgrouting/releases/download/v${pgrouting_release}/pgrouting-${pgrouting_release}.tar.gz\" \\\n    /tmp/pgrouting.tar.gz\nRUN tar -xvf /tmp/pgrouting.tar.gz -C /tmp && \\\n    rm -rf /tmp/pgrouting.tar.gz\n# Install build dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libboost-all-dev \\\n    && rm -rf /var/lib/apt/lists/*\n# Build from source\nWORKDIR /tmp/pgrouting-${pgrouting_release}/build\nRUN cmake -DBUILD_HTML=OFF -DBUILD_DOXY=OFF ..\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --pkgname=pgrouting --pkgversion=${pgrouting_release} --nodoc\n\nFROM ppa as pgrouting\nARG pgrouting_release\n# Download pre-built packages\nRUN apt-get update && apt-get install -y --no-install-recommends --download-only \\\n    postgresql-${postgresql_major}-pgrouting=${pgrouting_release}-1.pgdg20.04+1 \\\n    && rm -rf /var/lib/apt/lists/*\nRUN mv /var/cache/apt/archives/*.deb /tmp/\n\n####################\n# 03-pgtap.yml\n####################\nFROM builder as pgtap-source\n# Download and extract\nARG pgtap_release\nARG pgtap_release_checksum\nADD --checksum=${pgtap_release_checksum} \\\n    \"https://github.com/theory/pgtap/archive/v${pgtap_release}.tar.gz\" \\\n    /tmp/pgtap.tar.gz\nRUN tar -xvf /tmp/pgtap.tar.gz -C /tmp && \\\n    rm -rf /tmp/pgtap.tar.gz\n# Build from source\nWORKDIR /tmp/pgtap-${pgtap_release}\nRUN make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --nodoc\n\n####################\n# 04-pg_cron.yml\n####################\nFROM ccache as pg_cron-source\n# Download and extract\nARG pg_cron_release\nARG pg_cron_release_checksum\nADD --checksum=${pg_cron_release_checksum} \\\n    \"https://github.com/citusdata/pg_cron/archive/refs/tags/v${pg_cron_release}.tar.gz\" \\\n    /tmp/pg_cron.tar.gz\nRUN tar -xvf /tmp/pg_cron.tar.gz -C /tmp && \\\n    rm -rf /tmp/pg_cron.tar.gz\n# Build from source\nWORKDIR /tmp/pg_cron-${pg_cron_release}\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --nodoc\n\n####################\n# 05-pgaudit.yml\n####################\nFROM ccache as pgaudit-source\n# Download and extract\nARG pgaudit_release\nARG pgaudit_release_checksum\nADD --checksum=${pgaudit_release_checksum} \\\n    \"https://github.com/pgaudit/pgaudit/archive/refs/tags/${pgaudit_release}.tar.gz\" \\\n    /tmp/pgaudit.tar.gz\nRUN tar -xvf /tmp/pgaudit.tar.gz -C /tmp && \\\n    rm -rf /tmp/pgaudit.tar.gz\n# Install build dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libssl-dev \\\n    libkrb5-dev \\\n    && rm -rf /var/lib/apt/lists/*\n# Build from source\nWORKDIR /tmp/pgaudit-${pgaudit_release}\nENV USE_PGXS=1\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --nodoc\n\n####################\n# 06-pgjwt.yml\n####################\nFROM builder as pgjwt-source\n# Download and extract\nARG pgjwt_release\nADD \"https://github.com/michelp/pgjwt.git#${pgjwt_release}\" \\\n    /tmp/pgjwt-${pgjwt_release}\n# Build from source\nWORKDIR /tmp/pgjwt-${pgjwt_release}\nRUN make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --pkgversion=1 --nodoc\n\n####################\n# 07-pgsql-http.yml\n####################\nFROM ccache as pgsql-http-source\n# Download and extract\nARG pgsql_http_release\nARG pgsql_http_release_checksum\nADD --checksum=${pgsql_http_release_checksum} \\\n    \"https://github.com/pramsey/pgsql-http/archive/refs/tags/v${pgsql_http_release}.tar.gz\" \\\n    /tmp/pgsql-http.tar.gz\nRUN tar -xvf /tmp/pgsql-http.tar.gz -C /tmp && \\\n    rm -rf /tmp/pgsql-http.tar.gz\n# Install build dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libcurl4-gnutls-dev \\\n    && rm -rf /var/lib/apt/lists/*\n# Build from source\nWORKDIR /tmp/pgsql-http-${pgsql_http_release}\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --requires=libcurl3-gnutls --nodoc\n\n####################\n# 08-plpgsql_check.yml\n####################\nFROM ccache as plpgsql_check-source\n# Download and extract\nARG plpgsql_check_release\nARG plpgsql_check_release_checksum\nADD --checksum=${plpgsql_check_release_checksum} \\\n    \"https://github.com/okbob/plpgsql_check/archive/refs/tags/v${plpgsql_check_release}.tar.gz\" \\\n    /tmp/plpgsql_check.tar.gz\nRUN tar -xvf /tmp/plpgsql_check.tar.gz -C /tmp && \\\n    rm -rf /tmp/plpgsql_check.tar.gz\n# Install build dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libicu-dev \\\n    && rm -rf /var/lib/apt/lists/*\n# Build from source\nWORKDIR /tmp/plpgsql_check-${plpgsql_check_release}\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --nodoc\n\n####################\n# 09-pg-safeupdate.yml\n####################\nFROM ccache as pg-safeupdate-source\n# Download and extract\nARG pg_safeupdate_release\nARG pg_safeupdate_release_checksum\nADD --checksum=${pg_safeupdate_release_checksum} \\\n    \"https://github.com/eradman/pg-safeupdate/archive/refs/tags/${pg_safeupdate_release}.tar.gz\" \\\n    /tmp/pg-safeupdate.tar.gz\nRUN tar -xvf /tmp/pg-safeupdate.tar.gz -C /tmp && \\\n    rm -rf /tmp/pg-safeupdate.tar.gz\n# Build from source\nWORKDIR /tmp/pg-safeupdate-${pg_safeupdate_release}\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --nodoc\n\n####################\n# 10-timescaledb.yml\n####################\nFROM ccache as timescaledb-source\n# Download and extract\nARG timescaledb_release\nARG timescaledb_release_checksum\nADD --checksum=${timescaledb_release_checksum} \\\n    \"https://github.com/timescale/timescaledb/archive/refs/tags/${timescaledb_release}.tar.gz\" \\\n    /tmp/timescaledb.tar.gz\nRUN tar -xvf /tmp/timescaledb.tar.gz -C /tmp && \\\n    rm -rf /tmp/timescaledb.tar.gz\n# Build from source\nWORKDIR /tmp/timescaledb-${timescaledb_release}/build\nRUN cmake -DAPACHE_ONLY=1 ..\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --pkgname=timescaledb --pkgversion=${timescaledb_release} --nodoc\n\n####################\n# 11-wal2json.yml\n####################\nFROM ccache as wal2json-source\n# Download and extract\nARG wal2json_release\nARG wal2json_release_checksum\nADD --checksum=${wal2json_release_checksum} \\\n    \"https://github.com/eulerto/wal2json/archive/refs/tags/wal2json_${wal2json_release}.tar.gz\" \\\n    /tmp/wal2json.tar.gz\nRUN tar -xvf /tmp/wal2json.tar.gz -C /tmp --one-top-level --strip-components 1 && \\\n    rm -rf /tmp/wal2json.tar.gz\n# Build from source\nWORKDIR /tmp/wal2json\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nENV version=${wal2json_release}\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --pkgversion=\"\\${version/_/.}\" --nodoc\n\n####################\n# 12-pljava.yml\n####################\nFROM builder as pljava-source\n# Download and extract\n# TODO: revert to using main repo after PG15 support is merged: https://github.com/tada/pljava/pull/413\nARG pljava_release=master\nARG pljava_release_checksum=sha256:e99b1c52f7b57f64c8986fe6ea4a6cc09d78e779c1643db060d0ac66c93be8b6\nADD --checksum=${pljava_release_checksum} \\\n    \"https://github.com/supabase/pljava/archive/refs/heads/${pljava_release}.tar.gz\" \\\n    /tmp/pljava.tar.gz\nRUN tar -xvf /tmp/pljava.tar.gz -C /tmp && \\\n    rm -rf /tmp/pljava.tar.gz\n# Install build dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    maven \\\n    default-jdk \\\n    libssl-dev \\\n    libkrb5-dev \\\n    && rm -rf /var/lib/apt/lists/*\n# Build from source\nWORKDIR /tmp/pljava-${pljava_release}\nRUN mvn -T 1C clean install -Dmaven.test.skip -DskipTests -Dmaven.javadoc.skip=true\n# Create debian package\nRUN cp pljava-packaging/target/pljava-pg${postgresql_major}.jar /tmp/\n\nFROM base as pljava\n# Download pre-built packages\nRUN apt-get update && apt-get install -y --no-install-recommends --download-only \\\n    default-jdk-headless \\\n    postgresql-${postgresql_major}-pljava \\\n    && rm -rf /var/lib/apt/lists/*\nRUN mv /var/cache/apt/archives/*.deb /tmp/\n\n####################\n# 13-plv8.yml\n####################\nFROM ccache as plv8-source\n# Download and extract\nARG plv8_release\nARG plv8_release_checksum\nADD --checksum=${plv8_release_checksum} \\\n    \"https://github.com/supabase/plv8/archive/refs/tags/v${plv8_release}.tar.gz\" \\\n    /tmp/plv8.tar.gz\nRUN tar -xvf /tmp/plv8.tar.gz -C /tmp && \\\n    rm -rf /tmp/plv8.tar.gz\n# Install build dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    pkg-config \\\n    ninja-build \\\n    git \\\n    libtinfo5 \\\n    libstdc++-10-dev \\\n    && rm -rf /var/lib/apt/lists/*\n# Build from source\nWORKDIR /tmp/plv8-${plv8_release}\nENV DOCKER=1\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --nodoc\n\nFROM scratch as plv8-deb\nCOPY --from=plv8-source /tmp/*.deb /tmp/\n\nFROM ghcr.io/supabase/plv8:${plv8_release}-pg${postgresql_major} as plv8\n\n####################\n# 14-pg_plan_filter.yml\n####################\nFROM ccache as pg_plan_filter-source\n# Download and extract\nARG pg_plan_filter_release\nADD \"https://github.com/pgexperts/pg_plan_filter.git#${pg_plan_filter_release}\" \\\n    /tmp/pg_plan_filter-${pg_plan_filter_release}\n# Build from source\nWORKDIR /tmp/pg_plan_filter-${pg_plan_filter_release}\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --pkgversion=1 --nodoc\n\n####################\n# 15-pg_net.yml\n####################\nFROM ccache as pg_net-source\n# Download and extract\nARG pg_net_release\nARG pg_net_release_checksum\nADD --checksum=${pg_net_release_checksum} \\\n    \"https://github.com/supabase/pg_net/archive/refs/tags/v${pg_net_release}.tar.gz\" \\\n    /tmp/pg_net.tar.gz\nRUN tar -xvf /tmp/pg_net.tar.gz -C /tmp && \\\n    rm -rf /tmp/pg_net.tar.gz\n# Install build dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libcurl4-gnutls-dev \\\n    && rm -rf /var/lib/apt/lists/*\n# Build from source\nWORKDIR /tmp/pg_net-${pg_net_release}\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --requires=libcurl3-gnutls --nodoc\n\n####################\n# 16-rum.yml\n####################\nFROM ccache as rum-source\n# Download and extract\nARG rum_release\nARG rum_release_checksum\nADD --checksum=${rum_release_checksum} \\\n    \"https://github.com/postgrespro/rum/archive/refs/tags/${rum_release}.tar.gz\" \\\n    /tmp/rum.tar.gz\nRUN tar -xvf /tmp/rum.tar.gz -C /tmp && \\\n    rm -rf /tmp/rum.tar.gz\n# Install build dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    systemtap-sdt-dev \\\n    && rm -rf /var/lib/apt/lists/*\n# Build from source\nWORKDIR /tmp/rum-${rum_release}\nENV USE_PGXS=1\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --nodoc\n\n####################\n# 17-pg_hashids.yml\n####################\nFROM ccache as pg_hashids-source\n# Download and extract\nARG pg_hashids_release\nADD \"https://github.com/iCyberon/pg_hashids.git#${pg_hashids_release}\" \\\n    /tmp/pg_hashids-${pg_hashids_release}\n# Build from source\nWORKDIR /tmp/pg_hashids-${pg_hashids_release}\nRUN make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --pkgversion=1 --nodoc\n\n####################\n# 18-pgsodium.yml\n####################\nFROM ccache as libsodium\n# Download and extract\nARG libsodium_release\nARG libsodium_release_checksum\nADD --checksum=${libsodium_release_checksum} \\\n    \"https://supabase-public-artifacts-bucket.s3.amazonaws.com/libsodium/libsodium-${libsodium_release}.tar.gz\" \\\n    /tmp/libsodium.tar.gz\nRUN tar -xvf /tmp/libsodium.tar.gz -C /tmp && \\\n    rm -rf /tmp/libsodium.tar.gz\n# Build from source\nWORKDIR /tmp/libsodium-${libsodium_release}\nRUN ./configure\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\nRUN make install\n\nFROM libsodium as pgsodium-source\n# Download and extract\nARG pgsodium_release\nARG pgsodium_release_checksum\nADD --checksum=${pgsodium_release_checksum} \\\n    \"https://github.com/michelp/pgsodium/archive/refs/tags/v${pgsodium_release}.tar.gz\" \\\n    /tmp/pgsodium.tar.gz\nRUN tar -xvf /tmp/pgsodium.tar.gz -C /tmp && \\\n    rm -rf /tmp/pgsodium.tar.gz\n# Build from source\nWORKDIR /tmp/pgsodium-${pgsodium_release}\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --requires=libsodium23 --nodoc\n\n####################\n# 19-pg_graphql.yml\n####################\nFROM base as pg_graphql\n# Download package archive\nARG pg_graphql_release\nADD \"https://github.com/supabase/pg_graphql/releases/download/v${pg_graphql_release}/pg_graphql-v${pg_graphql_release}-pg${postgresql_major}-${TARGETARCH}-linux-gnu.deb\" \\\n    /tmp/pg_graphql.deb\n\n####################\n# 20-pg_stat_monitor.yml\n####################\nFROM ccache as pg_stat_monitor-source\n# Download and extract\nARG pg_stat_monitor_release\nARG pg_stat_monitor_release_checksum\nADD --checksum=${pg_stat_monitor_release_checksum} \\\n    \"https://github.com/percona/pg_stat_monitor/archive/refs/tags/${pg_stat_monitor_release}.tar.gz\" \\\n    /tmp/pg_stat_monitor.tar.gz\nRUN tar -xvf /tmp/pg_stat_monitor.tar.gz -C /tmp && \\\n    rm -rf /tmp/pg_stat_monitor.tar.gz\n# Build from source\nWORKDIR /tmp/pg_stat_monitor-${pg_stat_monitor_release}\nENV USE_PGXS=1\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --nodoc\n\n####################\n# 22-pg_jsonschema.yml\n####################\nFROM base as pg_jsonschema\n# Download package archive\nARG pg_jsonschema_release\nADD \"https://github.com/supabase/pg_jsonschema/releases/download/v${pg_jsonschema_release}/pg_jsonschema-v${pg_jsonschema_release}-pg${postgresql_major}-${TARGETARCH}-linux-gnu.deb\" \\\n    /tmp/pg_jsonschema.deb\n\n####################\n# 23-vault.yml\n####################\nFROM builder as vault-source\n# Download and extract\nARG vault_release\nARG vault_release_checksum\nADD --checksum=${vault_release_checksum} \\\n    \"https://github.com/supabase/vault/archive/refs/tags/v${vault_release}.tar.gz\" \\\n    /tmp/vault.tar.gz\nRUN tar -xvf /tmp/vault.tar.gz -C /tmp && \\\n    rm -rf /tmp/vault.tar.gz\n# Build from source\nWORKDIR /tmp/vault-${vault_release}\nRUN make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --nodoc\n\n####################\n# 24-pgroonga.yml\n####################\nFROM ccache as groonga\n# Download and extract\nARG groonga_release\nARG groonga_release_checksum\nADD --checksum=${groonga_release_checksum} \\\n    \"https://packages.groonga.org/source/groonga/groonga-${groonga_release}.tar.gz\" \\\n    /tmp/groonga.tar.gz\nRUN tar -xvf /tmp/groonga.tar.gz -C /tmp && \\\n    rm -rf /tmp/groonga.tar.gz\n# Install build dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    zlib1g-dev \\\n    liblz4-dev \\\n    libzstd-dev \\\n    libmsgpack-dev \\\n    libzmq3-dev \\\n    libevent-dev \\\n    libmecab-dev \\\n    rapidjson-dev \\\n    pkg-config \\\n    && rm -rf /var/lib/apt/lists/*\n# Build from source\nWORKDIR /tmp/groonga-${groonga_release}\nRUN ./configure\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=yes --fstrans=no --backup=no --pakdir=/tmp --requires=zlib1g,liblz4-1,libzstd1,libmsgpackc2,libzmq5,libevent-2.1-7,libmecab2 --nodoc\n\nFROM groonga as pgroonga-source\n# Download and extract\nARG pgroonga_release\nARG pgroonga_release_checksum\nADD --checksum=${pgroonga_release_checksum} \\\n    \"https://packages.groonga.org/source/pgroonga/pgroonga-${pgroonga_release}.tar.gz\" \\\n    /tmp/pgroonga.tar.gz\nRUN tar -xvf /tmp/pgroonga.tar.gz -C /tmp && \\\n    rm -rf /tmp/pgroonga.tar.gz\n# Build from source\nWORKDIR /tmp/pgroonga-${pgroonga_release}\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --requires=mecab-naist-jdic --nodoc\n\nFROM scratch as pgroonga-deb\nCOPY --from=pgroonga-source /tmp/*.deb /tmp/\n\nFROM base as pgroonga\n# Latest available is 3.0.3\nARG pgroonga_release\n# Download pre-built packages\nADD \"https://packages.groonga.org/ubuntu/groonga-apt-source-latest-focal.deb\" /tmp/source.deb\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    ca-certificates \\\n    /tmp/source.deb \\\n    && rm -rf /var/lib/apt/lists/*\nRUN rm /tmp/source.deb\nRUN apt-get update && apt-get install -y --no-install-recommends --download-only \\\n    postgresql-${postgresql_major}-pgdg-pgroonga=${pgroonga_release}-1 \\\n    && rm -rf /var/lib/apt/lists/*\nRUN mv /var/cache/apt/archives/*.deb /tmp/\n\n####################\n# 25-wrappers.yml\n####################\nFROM base as wrappers\n# Download package archive\nARG wrappers_release\nADD \"https://github.com/supabase/wrappers/releases/download/v${wrappers_release}/wrappers-v${wrappers_release}-pg${postgresql_major}-${TARGETARCH}-linux-gnu.deb\" \\\n    /tmp/wrappers.deb\n\n####################\n# 26-hypopg.yml\n####################\nFROM ccache as hypopg-source\n# Download and extract\nARG hypopg_release\nARG hypopg_release_checksum\nADD --checksum=${hypopg_release_checksum} \\\n    \"https://github.com/HypoPG/hypopg/archive/refs/tags/${hypopg_release}.tar.gz\" \\\n    /tmp/hypopg.tar.gz\nRUN tar -xvf /tmp/hypopg.tar.gz -C /tmp && \\\n    rm -rf /tmp/hypopg.tar.gz\n# Build from source\nWORKDIR /tmp/hypopg-${hypopg_release}\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --nodoc\n\n####################\n # 27-pg_repack.yml\n ####################\n FROM ccache as pg_repack-source\n ARG pg_repack_release\n ARG pg_repack_release_checksum\n ADD --checksum=${pg_repack_release_checksum} \\\n     \"https://github.com/reorg/pg_repack/archive/refs/tags/ver_${pg_repack_release}.tar.gz\" \\\n     /tmp/pg_repack.tar.gz\n RUN tar -xvf /tmp/pg_repack.tar.gz -C /tmp && \\\n     rm -rf /tmp/pg_repack.tar.gz\n # Install build dependencies\n RUN apt-get update && apt-get install -y --no-install-recommends \\\n     liblz4-dev \\\n     libz-dev \\\n     libzstd-dev \\\n     libreadline-dev \\\n     && rm -rf /var/lib/apt/lists/*\n # Build from source\n WORKDIR /tmp/pg_repack-ver_${pg_repack_release}\n ENV USE_PGXS=1\n RUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n     make -j$(nproc)\n # Create debian package\n RUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --pkgversion=${pg_repack_release} --nodoc\n\n####################\n# 28-pgvector.yml\n####################\nFROM ccache as pgvector-source\nARG pgvector_release\nARG pgvector_release_checksum\nADD --checksum=${pgvector_release_checksum} \\\n    \"https://github.com/pgvector/pgvector/archive/refs/tags/v${pgvector_release}.tar.gz\" \\\n    /tmp/pgvector.tar.gz\nRUN tar -xvf /tmp/pgvector.tar.gz -C /tmp && \\\n    rm -rf /tmp/pgvector.tar.gz\n# Build from source\nWORKDIR /tmp/pgvector-${pgvector_release}\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --nodoc\n\n####################\n# 29-pg_tle.yml\n####################\nFROM ccache as pg_tle-source\nARG pg_tle_release\nARG pg_tle_release_checksum\nADD --checksum=${pg_tle_release_checksum} \\\n    \"https://github.com/aws/pg_tle/archive/refs/tags/v${pg_tle_release}.tar.gz\" \\\n    /tmp/pg_tle.tar.gz\nRUN tar -xvf /tmp/pg_tle.tar.gz -C /tmp && \\\n    rm -rf /tmp/pg_tle.tar.gz\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    flex \\\n    libkrb5-dev \\\n    && rm -rf /var/lib/apt/lists/*\n# Build from source\nWORKDIR /tmp/pg_tle-${pg_tle_release}\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --nodoc\n\n######################\n# 30-index_advisor.yml\n######################\nFROM ccache as index_advisor\nARG index_advisor_release\nARG index_advisor_release_checksum\nADD --checksum=${index_advisor_release_checksum} \\\n    \"https://github.com/olirice/index_advisor/archive/refs/tags/v${index_advisor_release}.tar.gz\" \\\n    /tmp/index_advisor.tar.gz\nRUN tar -xvf /tmp/index_advisor.tar.gz -C /tmp && \\\n    rm -rf /tmp/index_advisor.tar.gz\n# Build from source\nWORKDIR /tmp/index_advisor-${index_advisor_release}\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    make -j$(nproc)\n# Create debian package\nRUN checkinstall -D --install=no --fstrans=no --backup=no --pakdir=/tmp --nodoc\n\n####################\n# internal/supautils.yml\n####################\nFROM base as supautils\n# Download package archive\nARG supautils_release\n# Define checksums for different architectures\nARG supautils_release_arm64_deb_checksum\nARG supautils_release_amd64_deb_checksum\n\nRUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*\n\n# Set up a script to download the correct package\nRUN echo '#!/bin/sh' > /tmp/download_supautils.sh && \\\n    echo 'set -e' >> /tmp/download_supautils.sh && \\\n    echo 'if [ \"$TARGETARCH\" = \"amd64\" ]; then' >> /tmp/download_supautils.sh && \\\n    echo '    CHECKSUM=\"${supautils_release_amd64_deb_checksum}\"' >> /tmp/download_supautils.sh && \\\n    echo '    ARCH=\"amd64\"' >> /tmp/download_supautils.sh && \\\n    echo 'elif [ \"$TARGETARCH\" = \"arm64\" ]; then' >> /tmp/download_supautils.sh && \\\n    echo '    CHECKSUM=\"${supautils_release_arm64_deb_checksum}\"' >> /tmp/download_supautils.sh && \\\n    echo '    ARCH=\"arm64\"' >> /tmp/download_supautils.sh && \\\n    echo 'else' >> /tmp/download_supautils.sh && \\\n    echo '    echo \"Unsupported architecture: $TARGETARCH\" >&2' >> /tmp/download_supautils.sh && \\\n    echo '    exit 1' >> /tmp/download_supautils.sh && \\\n    echo 'fi' >> /tmp/download_supautils.sh && \\\n    echo 'CHECKSUM=$(echo $CHECKSUM | sed \"s/^sha256://\")' >> /tmp/download_supautils.sh && \\\n    echo 'curl -fsSL -o /tmp/supautils.deb \\\\' >> /tmp/download_supautils.sh && \\\n    echo '    \"https://github.com/supabase/supautils/releases/download/v${supautils_release}/supautils-v${supautils_release}-pg${postgresql_major}-$ARCH-linux-gnu.deb\"' >> /tmp/download_supautils.sh && \\\n    echo 'echo \"$CHECKSUM  /tmp/supautils.deb\" | sha256sum -c -' >> /tmp/download_supautils.sh && \\\n    chmod +x /tmp/download_supautils.sh\n\n# Run the script to download and verify the package\nRUN /tmp/download_supautils.sh && rm /tmp/download_supautils.sh\n\n####################\n# setup-wal-g.yml\n####################\nFROM base as walg\nARG wal_g_release\n# ADD \"https://github.com/wal-g/wal-g/releases/download/v${wal_g_release}/wal-g-pg-ubuntu-20.04-${TARGETARCH}.tar.gz\" /tmp/wal-g.tar.gz\nRUN arch=$([ \"$TARGETARCH\" = \"arm64\" ] && echo \"aarch64\" || echo \"$TARGETARCH\") && \\\n    apt-get update && apt-get install -y --no-install-recommends curl && \\\n    curl -kL \"https://github.com/wal-g/wal-g/releases/download/v${wal_g_release}/wal-g-pg-ubuntu-20.04-${arch}.tar.gz\" -o /tmp/wal-g.tar.gz && \\\n    tar -xvf /tmp/wal-g.tar.gz -C /tmp && \\\n    rm -rf /tmp/wal-g.tar.gz && \\\n    mv /tmp/wal-g-pg-ubuntu*20.04-$arch /tmp/wal-g\n\n####################\n# Collect extension packages\n####################\nFROM scratch as extensions\nCOPY --from=postgis-source /tmp/*.deb /tmp/\nCOPY --from=pgrouting-source /tmp/*.deb /tmp/\nCOPY --from=pgtap-source /tmp/*.deb /tmp/\nCOPY --from=pg_cron-source /tmp/*.deb /tmp/\nCOPY --from=pgaudit-source /tmp/*.deb /tmp/\nCOPY --from=pgjwt-source /tmp/*.deb /tmp/\nCOPY --from=pgsql-http-source /tmp/*.deb /tmp/\nCOPY --from=plpgsql_check-source /tmp/*.deb /tmp/\nCOPY --from=pg-safeupdate-source /tmp/*.deb /tmp/\nCOPY --from=timescaledb-source /tmp/*.deb /tmp/\nCOPY --from=wal2json-source /tmp/*.deb /tmp/\n# COPY --from=pljava /tmp/*.deb /tmp/\nCOPY --from=plv8 /tmp/*.deb /tmp/\nCOPY --from=pg_plan_filter-source /tmp/*.deb /tmp/\nCOPY --from=pg_net-source /tmp/*.deb /tmp/\nCOPY --from=rum-source /tmp/*.deb /tmp/\nCOPY --from=pgsodium-source /tmp/*.deb /tmp/\nCOPY --from=pg_hashids-source /tmp/*.deb /tmp/\nCOPY --from=pg_graphql /tmp/*.deb /tmp/\nCOPY --from=pg_stat_monitor-source /tmp/*.deb /tmp/\nCOPY --from=pg_jsonschema /tmp/*.deb /tmp/\nCOPY --from=vault-source /tmp/*.deb /tmp/\nCOPY --from=pgroonga-source /tmp/*.deb /tmp/\nCOPY --from=wrappers /tmp/*.deb /tmp/\nCOPY --from=hypopg-source /tmp/*.deb /tmp/\nCOPY --from=pg_repack-source /tmp/*.deb /tmp/\nCOPY --from=pgvector-source /tmp/*.deb /tmp/\nCOPY --from=pg_tle-source /tmp/*.deb /tmp/\nCOPY --from=index_advisor /tmp/*.deb /tmp/\nCOPY --from=supautils /tmp/*.deb /tmp/\n\n####################\n# Download gosu for easy step-down from root\n####################\nFROM ubuntu:focal as gosu\nARG TARGETARCH\n# Install dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    gnupg \\\n    ca-certificates \\\n    && rm -rf /var/lib/apt/lists/*\n# Download binary\nARG GOSU_VERSION=1.16\nARG GOSU_GPG_KEY=B42F6819007F00F88E364FD4036A9C25BF357DD4\nADD https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$TARGETARCH \\\n    /usr/local/bin/gosu\nADD https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$TARGETARCH.asc \\\n    /usr/local/bin/gosu.asc\n# Verify checksum\nRUN gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys $GOSU_GPG_KEY && \\\n    gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu && \\\n    gpgconf --kill all && \\\n    chmod +x /usr/local/bin/gosu\n\n####################\n# Build final image\n####################\nFROM base as production\n\n# Setup extensions\nCOPY --from=extensions /tmp /tmp\nCOPY --from=walg /tmp/wal-g /usr/local/bin/\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    /tmp/*.deb \\\n    # Needed for anything using libcurl\n    # https://github.com/supabase/postgres/issues/573\n    ca-certificates \\\n    && rm -rf /var/lib/apt/lists/* /tmp/*\n\n# Initialise configs\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/postgresql.conf.j2 /etc/postgresql/postgresql.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/pg_hba.conf.j2 /etc/postgresql/pg_hba.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/pg_ident.conf.j2 /etc/postgresql/pg_ident.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/postgresql-stdout-log.conf /etc/postgresql/logging.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/supautils.conf.j2 /etc/postgresql-custom/supautils.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_extension_custom_scripts /etc/postgresql-custom/extension-custom-scripts\nCOPY --chown=postgres:postgres ansible/files/pgsodium_getkey_urandom.sh.j2 /usr/lib/postgresql/${postgresql_major}/bin/pgsodium_getkey.sh\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/custom_read_replica.conf.j2 /etc/postgresql-custom/read-replica.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/custom_walg.conf.j2 /etc/postgresql-custom/wal-g.conf\nCOPY --chown=postgres:postgres ansible/files/walg_helper_scripts/wal_fetch.sh /home/postgres/wal_fetch.sh\nCOPY ansible/files/walg_helper_scripts/wal_change_ownership.sh /root/wal_change_ownership.sh\n\nRUN sed -i \\\n    -e \"s|#unix_socket_directories = '/tmp'|unix_socket_directories = '/var/run/postgresql'|g\" \\\n    -e \"s|#session_preload_libraries = ''|session_preload_libraries = 'supautils'|g\" \\\n    -e \"s|#include = '/etc/postgresql-custom/supautils.conf'|include = '/etc/postgresql-custom/supautils.conf'|g\" \\\n    -e \"s|#include = '/etc/postgresql-custom/wal-g.conf'|include = '/etc/postgresql-custom/wal-g.conf'|g\" /etc/postgresql/postgresql.conf && \\\n    echo \"pljava.libjvm_location = '/usr/lib/jvm/java-11-openjdk-${TARGETARCH}/lib/server/libjvm.so'\" >> /etc/postgresql/postgresql.conf && \\\n    echo \"pgsodium.getkey_script= '/usr/lib/postgresql/${postgresql_major}/bin/pgsodium_getkey.sh'\" >> /etc/postgresql/postgresql.conf && \\\n    useradd --create-home --shell /bin/bash wal-g -G postgres && \\\n    mkdir -p /etc/postgresql-custom && \\\n    chown postgres:postgres /etc/postgresql-custom\n\n# Include schema migrations\nCOPY migrations/db /docker-entrypoint-initdb.d/\nCOPY ansible/files/pgbouncer_config/pgbouncer_auth_schema.sql /docker-entrypoint-initdb.d/init-scripts/00-schema.sql\nCOPY ansible/files/stat_extension.sql /docker-entrypoint-initdb.d/migrations/00-extension.sql\n\n# Add upstream entrypoint script\nCOPY --from=gosu /usr/local/bin/gosu /usr/local/bin/gosu\nADD --chmod=0755 \\\n    https://github.com/docker-library/postgres/raw/master/15/bullseye/docker-entrypoint.sh \\\n    /usr/local/bin/\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nHEALTHCHECK --interval=2s --timeout=2s --retries=10 CMD pg_isready -U postgres -h localhost\nSTOPSIGNAL SIGINT\nEXPOSE 5432\n\nENV POSTGRES_HOST=/var/run/postgresql\nCMD [\"postgres\", \"-D\", \"/etc/postgresql\"]\n\n####################\n# Update build cache\n####################\nFROM ccache as stats\nCOPY --from=extensions /tmp/*.deb /dev/null\n# Additional packages that are separately built from source\n# COPY --from=plv8-deb /tmp/*.deb /dev/null\n# Cache mount is only populated by docker build --no-cache\nRUN --mount=type=cache,target=/ccache,from=public.ecr.aws/supabase/postgres:ccache \\\n    ccache -s && \\\n    cp -r /ccache/* /tmp\nFROM scratch as buildcache\nCOPY --from=stats /tmp /\n"
        },
        {
          "name": "Dockerfile-15",
          "type": "blob",
          "size": 9.203125,
          "content": "# syntax=docker/dockerfile:1.6\nARG postgresql_major=15\nARG postgresql_release=${postgresql_major}.1\n\n# Bump default build arg to build a package from source\n# Bump vars.yml to specify runtime package version\nARG sfcgal_release=1.3.10\nARG postgis_release=3.3.2\nARG pgrouting_release=3.4.1\nARG pgtap_release=1.2.0\nARG pg_cron_release=1.6.2\nARG pgaudit_release=1.7.0\nARG pgjwt_release=9742dab1b2f297ad3811120db7b21451bca2d3c9\nARG pgsql_http_release=1.5.0\nARG plpgsql_check_release=2.2.5\nARG pg_safeupdate_release=1.4\nARG timescaledb_release=2.9.1\nARG wal2json_release=2_5\nARG pljava_release=1.6.4\nARG plv8_release=3.1.5\nARG pg_plan_filter_release=5081a7b5cb890876e67d8e7486b6a64c38c9a492\nARG pg_net_release=0.7.1\nARG rum_release=1.3.13\nARG pg_hashids_release=cd0e1b31d52b394a0df64079406a14a4f7387cd6\nARG libsodium_release=1.0.18\nARG pgsodium_release=3.1.6\nARG pg_graphql_release=1.5.1\nARG pg_stat_monitor_release=1.1.1\nARG pg_jsonschema_release=0.1.4\nARG pg_repack_release=1.4.8\nARG vault_release=0.2.8\nARG groonga_release=12.0.8\nARG pgroonga_release=2.4.0\nARG wrappers_release=0.3.0\nARG hypopg_release=1.3.1\nARG pgvector_release=0.4.0\nARG pg_tle_release=1.3.2\nARG index_advisor_release=0.2.0\nARG supautils_release=2.2.0\nARG wal_g_release=2.0.1\n\nFROM ubuntu:focal as base\n\nRUN apt update -y && apt install -y \\\n    curl \\\n    gnupg \\\n    lsb-release \\\n    software-properties-common \\\n    wget \\\n    sudo \\\n    && apt clean\n\n\nRUN adduser --system  --home /var/lib/postgresql --no-create-home --shell /bin/bash --group --gecos \"PostgreSQL administrator\" postgres\nRUN adduser --system  --no-create-home --shell /bin/bash --group  wal-g\nRUN curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install linux \\\n--init none \\\n--no-confirm \\\n--extra-conf \"substituters = https://cache.nixos.org https://nix-postgres-artifacts.s3.amazonaws.com\" \\\n--extra-conf \"trusted-public-keys = nix-postgres-artifacts:dGZlQOvKcNEjvT7QEAJbcV6b6uk7VF/hWMjhYleiaLI=% cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=\"\n\nENV PATH=\"${PATH}:/nix/var/nix/profiles/default/bin\"\n\nCOPY . /nixpg\n\nWORKDIR /nixpg\n\nRUN nix profile install .#psql_15/bin \n\n\n\nWORKDIR /\n\n\nRUN mkdir -p /usr/lib/postgresql/bin \\\n    /usr/lib/postgresql/share/postgresql \\\n    /usr/share/postgresql \\\n    /var/lib/postgresql \\\n    && chown -R postgres:postgres /usr/lib/postgresql \\\n    && chown -R postgres:postgres /var/lib/postgresql \\\n    && chown -R postgres:postgres /usr/share/postgresql\n\n# Create symbolic links\nRUN ln -s /nix/var/nix/profiles/default/bin/* /usr/lib/postgresql/bin/ \\\n    && ln -s /nix/var/nix/profiles/default/bin/* /usr/bin/ \\\n    && chown -R postgres:postgres /usr/bin\n\n# Create symbolic links for PostgreSQL shares\nRUN ln -s /nix/var/nix/profiles/default/share/postgresql/* /usr/lib/postgresql/share/postgresql/\nRUN ln -s /nix/var/nix/profiles/default/share/postgresql/* /usr/share/postgresql/\nRUN chown -R postgres:postgres /usr/lib/postgresql/share/postgresql/\nRUN chown -R postgres:postgres /usr/share/postgresql/ \n# Create symbolic links for contrib directory\nRUN mkdir -p /usr/lib/postgresql/share/postgresql/contrib \\\n    && find /nix/var/nix/profiles/default/share/postgresql/contrib/ -mindepth 1 -type d -exec sh -c 'for dir do ln -s \"$dir\" \"/usr/lib/postgresql/share/postgresql/contrib/$(basename \"$dir\")\"; done' sh {} + \\\n    && chown -R postgres:postgres /usr/lib/postgresql/share/postgresql/contrib/\n\nRUN chown -R postgres:postgres /usr/lib/postgresql\n\nRUN ln -sf /usr/lib/postgresql/share/postgresql/timezonesets /usr/share/postgresql/timezonesets\n\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends tzdata\n\nRUN ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime && \\\n    dpkg-reconfigure --frontend noninteractive tzdata\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    build-essential \\\n    checkinstall \\\n    cmake \n\nENV PGDATA=/var/lib/postgresql/data\n\n####################\n# setup-wal-g.yml\n####################\nFROM base as walg\nARG wal_g_release\n# ADD \"https://github.com/wal-g/wal-g/releases/download/v${wal_g_release}/wal-g-pg-ubuntu-20.04-${TARGETARCH}.tar.gz\" /tmp/wal-g.tar.gz\nRUN arch=$([ \"$TARGETARCH\" = \"arm64\" ] && echo \"aarch64\" || echo \"$TARGETARCH\") && \\\n    apt-get update && apt-get install -y --no-install-recommends curl && \\\n    curl -kL \"https://github.com/wal-g/wal-g/releases/download/v${wal_g_release}/wal-g-pg-ubuntu-20.04-aarch64.tar.gz\" -o /tmp/wal-g.tar.gz && \\\n    tar -xvf /tmp/wal-g.tar.gz -C /tmp && \\\n    rm -rf /tmp/wal-g.tar.gz && \\\n    mv /tmp/wal-g-pg-ubuntu*20.04-aarch64 /tmp/wal-g\n\n# ####################\n# # Download gosu for easy step-down from root\n# ####################\nFROM base as gosu\nARG TARGETARCH\n# Install dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n   gnupg \\\n   ca-certificates \\\n   && rm -rf /var/lib/apt/lists/*\n# Download binary\nARG GOSU_VERSION=1.16\nARG GOSU_GPG_KEY=B42F6819007F00F88E364FD4036A9C25BF357DD4\nADD https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$TARGETARCH \\\n    /usr/local/bin/gosu\nADD https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$TARGETARCH.asc \\\n    /usr/local/bin/gosu.asc\n# Verify checksum\nRUN gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys $GOSU_GPG_KEY && \\\n    gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu && \\\n    gpgconf --kill all && \\\n    chmod +x /usr/local/bin/gosu\n\n# ####################\n# # Build final image\n# ####################\nFROM gosu as production\nRUN id postgres || (echo \"postgres user does not exist\" && exit 1)\n# # Setup extensions\nCOPY --from=walg /tmp/wal-g /usr/local/bin/\n\n# # Initialise configs\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/postgresql.conf.j2 /etc/postgresql/postgresql.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/pg_hba.conf.j2 /etc/postgresql/pg_hba.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/pg_ident.conf.j2 /etc/postgresql/pg_ident.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/postgresql-stdout-log.conf /etc/postgresql/logging.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/supautils.conf.j2 /etc/postgresql-custom/supautils.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_extension_custom_scripts /etc/postgresql-custom/extension-custom-scripts\nCOPY --chown=postgres:postgres ansible/files/pgsodium_getkey_urandom.sh.j2 /usr/lib/postgresql/bin/pgsodium_getkey.sh\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/custom_read_replica.conf.j2 /etc/postgresql-custom/read-replica.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/custom_walg.conf.j2 /etc/postgresql-custom/wal-g.conf\nCOPY --chown=postgres:postgres ansible/files/walg_helper_scripts/wal_fetch.sh /home/postgres/wal_fetch.sh\nCOPY ansible/files/walg_helper_scripts/wal_change_ownership.sh /root/wal_change_ownership.sh\n\nRUN sed -i \\\n    -e \"s|#unix_socket_directories = '/tmp'|unix_socket_directories = '/var/run/postgresql'|g\" \\\n    -e \"s|#session_preload_libraries = ''|session_preload_libraries = 'supautils'|g\" \\\n    -e \"s|#include = '/etc/postgresql-custom/supautils.conf'|include = '/etc/postgresql-custom/supautils.conf'|g\" \\\n    -e \"s|#include = '/etc/postgresql-custom/wal-g.conf'|include = '/etc/postgresql-custom/wal-g.conf'|g\" /etc/postgresql/postgresql.conf && \\\n    echo \"cron.database_name = 'postgres'\" >> /etc/postgresql/postgresql.conf && \\\n    #echo \"pljava.libjvm_location = '/usr/lib/jvm/java-11-openjdk-${TARGETARCH}/lib/server/libjvm.so'\" >> /etc/postgresql/postgresql.conf && \\\n    echo \"pgsodium.getkey_script= '/usr/lib/postgresql/bin/pgsodium_getkey.sh'\" >> /etc/postgresql/postgresql.conf && \\\n    echo 'auto_explain.log_min_duration = 10s' >> /etc/postgresql/postgresql.conf && \\\n    usermod -aG postgres wal-g && \\\n    mkdir -p /etc/postgresql-custom && \\\n    chown postgres:postgres /etc/postgresql-custom\n\n# # Include schema migrations\nCOPY migrations/db /docker-entrypoint-initdb.d/\nCOPY ansible/files/pgbouncer_config/pgbouncer_auth_schema.sql /docker-entrypoint-initdb.d/init-scripts/00-schema.sql\nCOPY ansible/files/stat_extension.sql /docker-entrypoint-initdb.d/migrations/00-extension.sql\n\n# # Add upstream entrypoint script\nCOPY --from=gosu /usr/local/bin/gosu /usr/local/bin/gosu\nADD --chmod=0755 \\\n    https://github.com/docker-library/postgres/raw/master/15/bullseye/docker-entrypoint.sh \\\n    /usr/local/bin/\n\nRUN mkdir -p /var/run/postgresql && chown postgres:postgres /var/run/postgresql\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nHEALTHCHECK --interval=2s --timeout=2s --retries=10 CMD pg_isready -U postgres -h localhost\nSTOPSIGNAL SIGINT\nEXPOSE 5432\n\nENV POSTGRES_HOST=/var/run/postgresql\nENV POSTGRES_USER=supabase_admin\nENV POSTGRES_DB=postgres\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    locales \\\n    && rm -rf /var/lib/apt/lists/* && \\\n    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 \\\n    && localedef -i C -c -f UTF-8 -A /usr/share/locale/locale.alias C.UTF-8 \nRUN echo \"C.UTF-8 UTF-8\" > /etc/locale.gen && echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\nENV LC_CTYPE=C.UTF-8\nENV LC_COLLATE=C.UTF-8\nENV LOCALE_ARCHIVE /usr/lib/locale/locale-archive\nCMD [\"postgres\", \"-D\", \"/etc/postgresql\"]\n"
        },
        {
          "name": "Dockerfile-158",
          "type": "blob",
          "size": 9.203125,
          "content": "# syntax=docker/dockerfile:1.6\nARG postgresql_major=15\nARG postgresql_release=${postgresql_major}.1\n\n# Bump default build arg to build a package from source\n# Bump vars.yml to specify runtime package version\nARG sfcgal_release=1.3.10\nARG postgis_release=3.3.2\nARG pgrouting_release=3.4.1\nARG pgtap_release=1.2.0\nARG pg_cron_release=1.6.2\nARG pgaudit_release=1.7.0\nARG pgjwt_release=9742dab1b2f297ad3811120db7b21451bca2d3c9\nARG pgsql_http_release=1.5.0\nARG plpgsql_check_release=2.2.5\nARG pg_safeupdate_release=1.4\nARG timescaledb_release=2.9.1\nARG wal2json_release=2_5\nARG pljava_release=1.6.4\nARG plv8_release=3.1.5\nARG pg_plan_filter_release=5081a7b5cb890876e67d8e7486b6a64c38c9a492\nARG pg_net_release=0.7.1\nARG rum_release=1.3.13\nARG pg_hashids_release=cd0e1b31d52b394a0df64079406a14a4f7387cd6\nARG libsodium_release=1.0.18\nARG pgsodium_release=3.1.6\nARG pg_graphql_release=1.5.1\nARG pg_stat_monitor_release=1.1.1\nARG pg_jsonschema_release=0.1.4\nARG pg_repack_release=1.4.8\nARG vault_release=0.2.8\nARG groonga_release=12.0.8\nARG pgroonga_release=2.4.0\nARG wrappers_release=0.3.0\nARG hypopg_release=1.3.1\nARG pgvector_release=0.4.0\nARG pg_tle_release=1.3.2\nARG index_advisor_release=0.2.0\nARG supautils_release=2.2.0\nARG wal_g_release=2.0.1\n\nFROM ubuntu:focal as base\n\nRUN apt update -y && apt install -y \\\n    curl \\\n    gnupg \\\n    lsb-release \\\n    software-properties-common \\\n    wget \\\n    sudo \\\n    && apt clean\n\n\nRUN adduser --system  --home /var/lib/postgresql --no-create-home --shell /bin/bash --group --gecos \"PostgreSQL administrator\" postgres\nRUN adduser --system  --no-create-home --shell /bin/bash --group  wal-g\nRUN curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install linux \\\n--init none \\\n--no-confirm \\\n--extra-conf \"substituters = https://cache.nixos.org https://nix-postgres-artifacts.s3.amazonaws.com\" \\\n--extra-conf \"trusted-public-keys = nix-postgres-artifacts:dGZlQOvKcNEjvT7QEAJbcV6b6uk7VF/hWMjhYleiaLI=% cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=\"\n\nENV PATH=\"${PATH}:/nix/var/nix/profiles/default/bin\"\n\nCOPY . /nixpg\n\nWORKDIR /nixpg\n\nRUN nix profile install .#psql_15/bin \n\n\n\nWORKDIR /\n\n\nRUN mkdir -p /usr/lib/postgresql/bin \\\n    /usr/lib/postgresql/share/postgresql \\\n    /usr/share/postgresql \\\n    /var/lib/postgresql \\\n    && chown -R postgres:postgres /usr/lib/postgresql \\\n    && chown -R postgres:postgres /var/lib/postgresql \\\n    && chown -R postgres:postgres /usr/share/postgresql\n\n# Create symbolic links\nRUN ln -s /nix/var/nix/profiles/default/bin/* /usr/lib/postgresql/bin/ \\\n    && ln -s /nix/var/nix/profiles/default/bin/* /usr/bin/ \\\n    && chown -R postgres:postgres /usr/bin\n\n# Create symbolic links for PostgreSQL shares\nRUN ln -s /nix/var/nix/profiles/default/share/postgresql/* /usr/lib/postgresql/share/postgresql/\nRUN ln -s /nix/var/nix/profiles/default/share/postgresql/* /usr/share/postgresql/\nRUN chown -R postgres:postgres /usr/lib/postgresql/share/postgresql/\nRUN chown -R postgres:postgres /usr/share/postgresql/ \n# Create symbolic links for contrib directory\nRUN mkdir -p /usr/lib/postgresql/share/postgresql/contrib \\\n    && find /nix/var/nix/profiles/default/share/postgresql/contrib/ -mindepth 1 -type d -exec sh -c 'for dir do ln -s \"$dir\" \"/usr/lib/postgresql/share/postgresql/contrib/$(basename \"$dir\")\"; done' sh {} + \\\n    && chown -R postgres:postgres /usr/lib/postgresql/share/postgresql/contrib/\n\nRUN chown -R postgres:postgres /usr/lib/postgresql\n\nRUN ln -sf /usr/lib/postgresql/share/postgresql/timezonesets /usr/share/postgresql/timezonesets\n\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends tzdata\n\nRUN ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime && \\\n    dpkg-reconfigure --frontend noninteractive tzdata\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    build-essential \\\n    checkinstall \\\n    cmake \n\nENV PGDATA=/var/lib/postgresql/data\n\n####################\n# setup-wal-g.yml\n####################\nFROM base as walg\nARG wal_g_release\n# ADD \"https://github.com/wal-g/wal-g/releases/download/v${wal_g_release}/wal-g-pg-ubuntu-20.04-${TARGETARCH}.tar.gz\" /tmp/wal-g.tar.gz\nRUN arch=$([ \"$TARGETARCH\" = \"arm64\" ] && echo \"aarch64\" || echo \"$TARGETARCH\") && \\\n    apt-get update && apt-get install -y --no-install-recommends curl && \\\n    curl -kL \"https://github.com/wal-g/wal-g/releases/download/v${wal_g_release}/wal-g-pg-ubuntu-20.04-aarch64.tar.gz\" -o /tmp/wal-g.tar.gz && \\\n    tar -xvf /tmp/wal-g.tar.gz -C /tmp && \\\n    rm -rf /tmp/wal-g.tar.gz && \\\n    mv /tmp/wal-g-pg-ubuntu*20.04-aarch64 /tmp/wal-g\n\n# ####################\n# # Download gosu for easy step-down from root\n# ####################\nFROM base as gosu\nARG TARGETARCH\n# Install dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n   gnupg \\\n   ca-certificates \\\n   && rm -rf /var/lib/apt/lists/*\n# Download binary\nARG GOSU_VERSION=1.16\nARG GOSU_GPG_KEY=B42F6819007F00F88E364FD4036A9C25BF357DD4\nADD https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$TARGETARCH \\\n    /usr/local/bin/gosu\nADD https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$TARGETARCH.asc \\\n    /usr/local/bin/gosu.asc\n# Verify checksum\nRUN gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys $GOSU_GPG_KEY && \\\n    gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu && \\\n    gpgconf --kill all && \\\n    chmod +x /usr/local/bin/gosu\n\n# ####################\n# # Build final image\n# ####################\nFROM gosu as production\nRUN id postgres || (echo \"postgres user does not exist\" && exit 1)\n# # Setup extensions\nCOPY --from=walg /tmp/wal-g /usr/local/bin/\n\n# # Initialise configs\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/postgresql.conf.j2 /etc/postgresql/postgresql.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/pg_hba.conf.j2 /etc/postgresql/pg_hba.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/pg_ident.conf.j2 /etc/postgresql/pg_ident.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/postgresql-stdout-log.conf /etc/postgresql/logging.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/supautils.conf.j2 /etc/postgresql-custom/supautils.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_extension_custom_scripts /etc/postgresql-custom/extension-custom-scripts\nCOPY --chown=postgres:postgres ansible/files/pgsodium_getkey_urandom.sh.j2 /usr/lib/postgresql/bin/pgsodium_getkey.sh\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/custom_read_replica.conf.j2 /etc/postgresql-custom/read-replica.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/custom_walg.conf.j2 /etc/postgresql-custom/wal-g.conf\nCOPY --chown=postgres:postgres ansible/files/walg_helper_scripts/wal_fetch.sh /home/postgres/wal_fetch.sh\nCOPY ansible/files/walg_helper_scripts/wal_change_ownership.sh /root/wal_change_ownership.sh\n\nRUN sed -i \\\n    -e \"s|#unix_socket_directories = '/tmp'|unix_socket_directories = '/var/run/postgresql'|g\" \\\n    -e \"s|#session_preload_libraries = ''|session_preload_libraries = 'supautils'|g\" \\\n    -e \"s|#include = '/etc/postgresql-custom/supautils.conf'|include = '/etc/postgresql-custom/supautils.conf'|g\" \\\n    -e \"s|#include = '/etc/postgresql-custom/wal-g.conf'|include = '/etc/postgresql-custom/wal-g.conf'|g\" /etc/postgresql/postgresql.conf && \\\n    echo \"cron.database_name = 'postgres'\" >> /etc/postgresql/postgresql.conf && \\\n    #echo \"pljava.libjvm_location = '/usr/lib/jvm/java-11-openjdk-${TARGETARCH}/lib/server/libjvm.so'\" >> /etc/postgresql/postgresql.conf && \\\n    echo \"pgsodium.getkey_script= '/usr/lib/postgresql/bin/pgsodium_getkey.sh'\" >> /etc/postgresql/postgresql.conf && \\\n    echo 'auto_explain.log_min_duration = 10s' >> /etc/postgresql/postgresql.conf && \\\n    usermod -aG postgres wal-g && \\\n    mkdir -p /etc/postgresql-custom && \\\n    chown postgres:postgres /etc/postgresql-custom\n\n# # Include schema migrations\nCOPY migrations/db /docker-entrypoint-initdb.d/\nCOPY ansible/files/pgbouncer_config/pgbouncer_auth_schema.sql /docker-entrypoint-initdb.d/init-scripts/00-schema.sql\nCOPY ansible/files/stat_extension.sql /docker-entrypoint-initdb.d/migrations/00-extension.sql\n\n# # Add upstream entrypoint script\nCOPY --from=gosu /usr/local/bin/gosu /usr/local/bin/gosu\nADD --chmod=0755 \\\n    https://github.com/docker-library/postgres/raw/master/15/bullseye/docker-entrypoint.sh \\\n    /usr/local/bin/\n\nRUN mkdir -p /var/run/postgresql && chown postgres:postgres /var/run/postgresql\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nHEALTHCHECK --interval=2s --timeout=2s --retries=10 CMD pg_isready -U postgres -h localhost\nSTOPSIGNAL SIGINT\nEXPOSE 5432\n\nENV POSTGRES_HOST=/var/run/postgresql\nENV POSTGRES_USER=supabase_admin\nENV POSTGRES_DB=postgres\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    locales \\\n    && rm -rf /var/lib/apt/lists/* && \\\n    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 \\\n    && localedef -i C -c -f UTF-8 -A /usr/share/locale/locale.alias C.UTF-8 \nRUN echo \"C.UTF-8 UTF-8\" > /etc/locale.gen && echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\nENV LC_CTYPE=C.UTF-8\nENV LC_COLLATE=C.UTF-8\nENV LOCALE_ARCHIVE /usr/lib/locale/locale-archive\nCMD [\"postgres\", \"-D\", \"/etc/postgresql\"]\n"
        },
        {
          "name": "Dockerfile-orioledb-17",
          "type": "blob",
          "size": 9.921875,
          "content": "# syntax=docker/dockerfile:1.6\nARG postgresql_major=17-orioledb\nARG postgresql_release=${postgresql_major}.1\n\n# Bump default build arg to build a package from source\n# Bump vars.yml to specify runtime package version\nARG sfcgal_release=1.3.10\nARG postgis_release=3.3.2\nARG pgrouting_release=3.4.1\nARG pgtap_release=1.2.0\nARG pg_cron_release=1.6.2\nARG pgaudit_release=1.7.0\nARG pgjwt_release=9742dab1b2f297ad3811120db7b21451bca2d3c9\nARG pgsql_http_release=1.5.0\nARG plpgsql_check_release=2.2.5\nARG pg_safeupdate_release=1.4\nARG timescaledb_release=2.9.1\nARG wal2json_release=2_5\nARG pljava_release=1.6.4\nARG plv8_release=3.1.5\nARG pg_plan_filter_release=5081a7b5cb890876e67d8e7486b6a64c38c9a492\nARG pg_net_release=0.7.1\nARG rum_release=1.3.13\nARG pg_hashids_release=cd0e1b31d52b394a0df64079406a14a4f7387cd6\nARG libsodium_release=1.0.18\nARG pgsodium_release=3.1.6\nARG pg_graphql_release=1.5.1\nARG pg_stat_monitor_release=1.1.1\nARG pg_jsonschema_release=0.1.4\nARG pg_repack_release=1.4.8\nARG vault_release=0.2.8\nARG groonga_release=12.0.8\nARG pgroonga_release=2.4.0\nARG wrappers_release=0.3.0\nARG hypopg_release=1.3.1\nARG pgvector_release=0.4.0\nARG pg_tle_release=1.3.2\nARG index_advisor_release=0.2.0\nARG supautils_release=2.2.0\nARG wal_g_release=2.0.1\n\nFROM ubuntu:focal as base\n\nRUN apt update -y && apt install -y \\\n    curl \\\n    gnupg \\\n    lsb-release \\\n    software-properties-common \\\n    wget \\\n    sudo \\\n    tree \\\n    && apt clean\n\n\nRUN adduser --system  --home /var/lib/postgresql --no-create-home --shell /bin/bash --group --gecos \"PostgreSQL administrator\" postgres\nRUN adduser --system  --no-create-home --shell /bin/bash --group  wal-g\nRUN curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install linux \\\n--init none \\\n--no-confirm \\\n--extra-conf \"substituters = https://cache.nixos.org https://nix-postgres-artifacts.s3.amazonaws.com\" \\\n--extra-conf \"trusted-public-keys = nix-postgres-artifacts:dGZlQOvKcNEjvT7QEAJbcV6b6uk7VF/hWMjhYleiaLI=% cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=\"\n\nENV PATH=\"${PATH}:/nix/var/nix/profiles/default/bin\"\n\nCOPY . /nixpg\n\nWORKDIR /nixpg\n\nRUN nix profile install .#psql_orioledb-17/bin \n\n\n\nWORKDIR /\n\n\nRUN mkdir -p /usr/lib/postgresql/bin \\\n    /usr/lib/postgresql/share/postgresql \\\n    /usr/share/postgresql \\\n    /var/lib/postgresql \\\n    && chown -R postgres:postgres /usr/lib/postgresql \\\n    && chown -R postgres:postgres /var/lib/postgresql \\\n    && chown -R postgres:postgres /usr/share/postgresql\n\n# Create symbolic links\nRUN ln -s /nix/var/nix/profiles/default/bin/* /usr/lib/postgresql/bin/ \\\n    && ln -s /nix/var/nix/profiles/default/bin/* /usr/bin/ \\\n    && chown -R postgres:postgres /usr/bin\n\n# Create symbolic links for PostgreSQL shares\nRUN ln -s /nix/var/nix/profiles/default/share/postgresql/* /usr/lib/postgresql/share/postgresql/\nRUN ln -s /nix/var/nix/profiles/default/share/postgresql/* /usr/share/postgresql/\nRUN chown -R postgres:postgres /usr/lib/postgresql/share/postgresql/\nRUN chown -R postgres:postgres /usr/share/postgresql/ \n# Create symbolic links for contrib directory\nRUN tree /nix > /tmp/tree.txt && cat /tmp/tree.txt && cat /tmp/tree.txt >&2\n\nRUN chown -R postgres:postgres /usr/lib/postgresql\n\nRUN ln -sf /usr/lib/postgresql/share/postgresql/timezonesets /usr/share/postgresql/timezonesets\n\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends tzdata\n\nRUN ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime && \\\n    dpkg-reconfigure --frontend noninteractive tzdata\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    build-essential \\\n    checkinstall \\\n    cmake \n\nENV PGDATA=/var/lib/postgresql/data\n\n####################\n# setup-wal-g.yml\n####################\nFROM base as walg\nARG wal_g_release\n# ADD \"https://github.com/wal-g/wal-g/releases/download/v${wal_g_release}/wal-g-pg-ubuntu-20.04-${TARGETARCH}.tar.gz\" /tmp/wal-g.tar.gz\nRUN arch=$([ \"$TARGETARCH\" = \"arm64\" ] && echo \"aarch64\" || echo \"$TARGETARCH\") && \\\n    apt-get update && apt-get install -y --no-install-recommends curl && \\\n    curl -kL \"https://github.com/wal-g/wal-g/releases/download/v${wal_g_release}/wal-g-pg-ubuntu-20.04-aarch64.tar.gz\" -o /tmp/wal-g.tar.gz && \\\n    tar -xvf /tmp/wal-g.tar.gz -C /tmp && \\\n    rm -rf /tmp/wal-g.tar.gz && \\\n    mv /tmp/wal-g-pg-ubuntu*20.04-aarch64 /tmp/wal-g\n\n# ####################\n# # Download gosu for easy step-down from root\n# ####################\nFROM base as gosu\nARG TARGETARCH\n# Install dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n   gnupg \\\n   ca-certificates \\\n   && rm -rf /var/lib/apt/lists/*\n# Download binary\nARG GOSU_VERSION=1.16\nARG GOSU_GPG_KEY=B42F6819007F00F88E364FD4036A9C25BF357DD4\nADD https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$TARGETARCH \\\n    /usr/local/bin/gosu\nADD https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$TARGETARCH.asc \\\n    /usr/local/bin/gosu.asc\n# Verify checksum\nRUN gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys $GOSU_GPG_KEY && \\\n    gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu && \\\n    gpgconf --kill all && \\\n    chmod +x /usr/local/bin/gosu\n\n# ####################\n# # Build final image\n# ####################\nFROM gosu as production\nRUN id postgres || (echo \"postgres user does not exist\" && exit 1)\n# # Setup extensions\nCOPY --from=walg /tmp/wal-g /usr/local/bin/\n\n# # Initialise configs\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/postgresql.conf.j2 /etc/postgresql/postgresql.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/pg_hba.conf.j2 /etc/postgresql/pg_hba.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/pg_ident.conf.j2 /etc/postgresql/pg_ident.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/postgresql-stdout-log.conf /etc/postgresql/logging.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/supautils.conf.j2 /etc/postgresql-custom/supautils.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_extension_custom_scripts /etc/postgresql-custom/extension-custom-scripts\nCOPY --chown=postgres:postgres ansible/files/pgsodium_getkey_urandom.sh.j2 /usr/lib/postgresql/bin/pgsodium_getkey.sh\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/custom_read_replica.conf.j2 /etc/postgresql-custom/read-replica.conf\nCOPY --chown=postgres:postgres ansible/files/postgresql_config/custom_walg.conf.j2 /etc/postgresql-custom/wal-g.conf\nCOPY --chown=postgres:postgres ansible/files/walg_helper_scripts/wal_fetch.sh /home/postgres/wal_fetch.sh\nCOPY ansible/files/walg_helper_scripts/wal_change_ownership.sh /root/wal_change_ownership.sh\n\nRUN sed -i \\\n    -e \"s|#unix_socket_directories = '/tmp'|unix_socket_directories = '/var/run/postgresql'|g\" \\\n    -e \"s|#session_preload_libraries = ''|session_preload_libraries = 'supautils'|g\" \\\n    -e \"s|#include = '/etc/postgresql-custom/supautils.conf'|include = '/etc/postgresql-custom/supautils.conf'|g\" \\\n    -e \"s|#include = '/etc/postgresql-custom/wal-g.conf'|include = '/etc/postgresql-custom/wal-g.conf'|g\" /etc/postgresql/postgresql.conf && \\\n    echo \"cron.database_name = 'postgres'\" >> /etc/postgresql/postgresql.conf && \\\n    #echo \"pljava.libjvm_location = '/usr/lib/jvm/java-11-openjdk-${TARGETARCH}/lib/server/libjvm.so'\" >> /etc/postgresql/postgresql.conf && \\\n    echo \"pgsodium.getkey_script= '/usr/lib/postgresql/bin/pgsodium_getkey.sh'\" >> /etc/postgresql/postgresql.conf && \\\n    echo 'auto_explain.log_min_duration = 10s' >> /etc/postgresql/postgresql.conf && \\\n    usermod -aG postgres wal-g && \\\n    mkdir -p /etc/postgresql-custom && \\\n    chown postgres:postgres /etc/postgresql-custom\n\n    # Remove items from postgresql.conf\nRUN sed -i 's/ timescaledb,//g;' \"/etc/postgresql/postgresql.conf\" \n    #as of pg 16.4 + this db_user_namespace totally deprecated and will break the server if setting is present\nRUN sed -i 's/db_user_namespace = off/#db_user_namespace = off/g;' \"/etc/postgresql/postgresql.conf\" \nRUN sed -i 's/ timescaledb,//g; s/ plv8,//g; s/ postgis,//g; s/ pgrouting,//g' \"/etc/postgresql-custom/supautils.conf\" \nRUN sed -i 's/\\(shared_preload_libraries.*\\)'\\''\\(.*\\)$/\\1, orioledb'\\''\\2/' \"/etc/postgresql/postgresql.conf\" \nRUN echo \"default_table_access_method = 'orioledb'\" >> \"/etc/postgresql/postgresql.conf\" \n\n\n\n# # Include schema migrations\nCOPY migrations/db /docker-entrypoint-initdb.d/\nCOPY ansible/files/pgbouncer_config/pgbouncer_auth_schema.sql /docker-entrypoint-initdb.d/init-scripts/00-schema.sql\nCOPY ansible/files/stat_extension.sql /docker-entrypoint-initdb.d/migrations/00-extension.sql\n# Enable orioledb extension first\nRUN echo \"CREATE EXTENSION orioledb;\" > /docker-entrypoint-initdb.d/init-scripts/00-pre-init.sql && \\\n    chown postgres:postgres /docker-entrypoint-initdb.d/init-scripts/00-pre-init.sql\n\n# # Add upstream entrypoint script\nCOPY --from=gosu /usr/local/bin/gosu /usr/local/bin/gosu\nADD --chmod=0755 \\\n    https://github.com/docker-library/postgres/raw/master/17/bullseye/docker-entrypoint.sh \\\n    /usr/local/bin/\n\nRUN mkdir -p /var/run/postgresql && chown postgres:postgres /var/run/postgresql\n\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nHEALTHCHECK --interval=2s --timeout=2s --retries=10 CMD pg_isready -U postgres -h localhost\nSTOPSIGNAL SIGINT\nEXPOSE 5432\n\nENV POSTGRES_HOST=/var/run/postgresql\nENV POSTGRES_USER=supabase_admin\nENV POSTGRES_DB=postgres\nENV POSTGRES_INITDB_ARGS=\"--allow-group-access --locale-provider=icu --encoding=UTF-8 --icu-locale=en_US.UTF-8\"\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    locales \\\n    && rm -rf /var/lib/apt/lists/* && \\\n    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 \\\n    && localedef -i C -c -f UTF-8 -A /usr/share/locale/locale.alias C.UTF-8 \nRUN echo \"C.UTF-8 UTF-8\" > /etc/locale.gen && echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen && locale-gen\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\nENV LC_CTYPE=C.UTF-8\nENV LC_COLLATE=C.UTF-8\nENV LOCALE_ARCHIVE /usr/lib/locale/locale-archive\nCMD [\"postgres\", \"-D\", \"/etc/postgresql\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.91015625,
          "content": "The PostgreSQL License\n\nCopyright (c) 2020, Supabase\n\nPermission to use, copy, modify, and distribute this software and its documentation for any purpose, without fee, and without a written agreement is hereby granted, provided that the above copyright notice and this paragraph and the following two paragraphs appear in all copies.\n\nIN NO EVENT SHALL Supabase BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF Supabase HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nSupabase SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND Supabase HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.771484375,
          "content": "# Postgres + goodies\n\nUnmodified Postgres with some useful plugins. Our goal with this repo is not to modify Postgres, but to provide some of the most common extensions with a one-click install.\n\n## Primary Features\n- ✅ Postgres [15](https://www.postgresql.org/about/news/postgresql-15-released-2526/).\n- ✅ Ubuntu 20.04 (Focal Fossa).\n- ✅ [wal_level](https://www.postgresql.org/docs/current/runtime-config-wal.html) = logical and [max_replication_slots](https://www.postgresql.org/docs/current/runtime-config-replication.html) = 5. Ready for replication.\n- ✅ [Large Systems Extensions](https://github.com/aws/aws-graviton-getting-started#building-for-graviton-and-graviton2). Enabled for ARM images.\n\n## Extensions \n| Extension | Version | Description |\n| ------------- | :-------------: | ------------- |\n| [Postgres contrib modules](https://www.postgresql.org/docs/current/contrib.html) | - | Because everyone should enable `pg_stat_statements`. |\n| [PostGIS](https://postgis.net/) | [3.3.2](https://git.osgeo.org/gitea/postgis/postgis/raw/tag/3.3.2/NEWS) | Postgres' most popular extension - support for geographic objects. |\n| [pgRouting](https://pgrouting.org/) | [v3.4.1](https://github.com/pgRouting/pgrouting/releases/tag/v3.4.1) | Extension of PostGIS - provides geospatial routing functionalities. |\n| [pgTAP](https://pgtap.org/) | [v1.2.0](https://github.com/theory/pgtap/releases/tag/v1.2.0) | Unit Testing for Postgres. |\n| [pg_cron](https://github.com/citusdata/pg_cron) | [v1.6.2](https://github.com/citusdata/pg_cron/releases/tag/v1.6.2) | Run CRON jobs inside Postgres. |\n| [pgAudit](https://www.pgaudit.org/) | [1.7.0](https://github.com/pgaudit/pgaudit/releases/tag/1.7.0) | Generate highly compliant audit logs. |\n| [pgjwt](https://github.com/michelp/pgjwt) | [commit](https://github.com/michelp/pgjwt/commit/9742dab1b2f297ad3811120db7b21451bca2d3c9) | Generate JSON Web Tokens (JWT) in Postgres. |\n| [pgsql-http](https://github.com/pramsey/pgsql-http) | [1.5.0](https://github.com/pramsey/pgsql-http/releases/tag/v1.5.0) | HTTP client for Postgres. |\n| [plpgsql_check](https://github.com/okbob/plpgsql_check) | [2.2.3](https://github.com/okbob/plpgsql_check/releases/tag/v2.2.3) | Linter tool for PL/pgSQL. |\n| [pg-safeupdate](https://github.com/eradman/pg-safeupdate) | [1.4](https://github.com/eradman/pg-safeupdate/releases/tag/1.4) | Protect your data from accidental updates or deletes. |\n| [wal2json](https://github.com/eulerto/wal2json) | [commit](https://github.com/eulerto/wal2json/commit/53b548a29ebd6119323b6eb2f6013d7c5fe807ec) | JSON output plugin for logical replication decoding. |\n| [PL/Java](https://github.com/tada/pljava) | [1.6.4](https://github.com/tada/pljava/releases/tag/V1_6_4) | Write in Java functions in Postgres. |\n| [plv8](https://github.com/plv8/plv8) | [commit](https://github.com/plv8/plv8/commit/bcddd92f71530e117f2f98b92d206dafe824f73a) | Write in Javascript functions in Postgres. |\n| [pg_plan_filter](https://github.com/pgexperts/pg_plan_filter) | [commit](https://github.com/pgexperts/pg_plan_filter/commit/5081a7b5cb890876e67d8e7486b6a64c38c9a492) | Only allow statements that fulfill set criteria to be executed. |\n| [pg_net](https://github.com/supabase/pg_net) | [v0.6.1](https://github.com/supabase/pg_net/releases/tag/v0.6.1) | Expose the SQL interface for async networking. |\n| [pg_repack](https://github.com/reorg/pg_repack) | [ver_1.5.0](https://github.com/reorg/pg_repack/releases/tag/ver_1.5.0) | Tool to remove bloat from tables and indexes\n| [rum](https://github.com/postgrespro/rum) | [1.3.13](https://github.com/postgrespro/rum/releases/tag/1.3.13) | An alternative to the GIN index. |\n| [pg_hashids](https://github.com/iCyberon/pg_hashids) | [commit](https://github.com/iCyberon/pg_hashids/commit/83398bcbb616aac2970f5e77d93a3200f0f28e74) | Generate unique identifiers from numbers. |\n| [pgsodium](https://github.com/michelp/pgsodium) | [3.1.0](https://github.com/michelp/pgsodium/releases/tag/2.0.0) | Modern encryption API using libsodium. |\n| [pg_stat_monitor](https://github.com/percona/pg_stat_monitor) | [1.0.1](https://github.com/percona/pg_stat_monitor/releases/tag/1.0.1) | Query Performance Monitoring Tool for PostgreSQL\n| [pgvector](https://github.com/pgvector/pgvector) | [v0.4.0](https://github.com/pgvector/pgvector/releases/tag/v0.4.0) | Open-source vector similarity search for Postgres\n\n\nCan't find your favorite extension? Suggest for it to be added into future releases [here](https://github.com/supabase/supabase/discussions/679)!\n\n## Enhanced Security\n*This is only available for our AWS EC2/ DO Droplet images*\n\nAside from having [ufw](https://help.ubuntu.com/community/UFW),[fail2ban](https://www.fail2ban.org/wiki/index.php/Main_Page), and [unattended-upgrades](https://wiki.debian.org/UnattendedUpgrades) installed, we also have the following enhancements in place: \n| Enhancement | Description |\n| ------------- | ------------- |\n| [fail2ban filter](https://github.com/supabase/postgres/blob/develop/ansible/files/fail2ban_config/filter-postgresql.conf.j2) for PostgreSQL access | Monitors for brute force attempts over at port `5432`. |\n| [fail2ban filter](https://github.com/supabase/postgres/blob/develop/ansible/files/fail2ban_config/filter-pgbouncer.conf.j2) for PgBouncer access | Monitors for brute force attempts over at port `6543`. |\n\n## Additional Goodies\n*This is only available for our AWS EC2/ DO Droplet images*\n\n| Goodie | Version | Description |\n| ------------- | :-------------: | ------------- |\n| [PgBouncer](https://www.pgbouncer.org/) | [1.16.1](http://www.pgbouncer.org/changelog.html#pgbouncer-116x) | Set up Connection Pooling. |\n| [PostgREST](https://postgrest.org/en/stable/) | [v12.2.3](https://github.com/PostgREST/postgrest/releases/tag/v12.2.3) | Instantly transform your database into an RESTful API. |\n| [WAL-G](https://github.com/wal-g/wal-g#wal-g) | [v2.0.1](https://github.com/wal-g/wal-g/releases/tag/v2.0.1) | Tool for physical database backup and recovery. |\n\n## Install\n\nSee all installation instructions in the [repo wiki](https://github.com/supabase/postgres/wiki).\n\n[![Docker](https://github.com/supabase/postgres/blob/develop/docs/img/docker.png)](https://github.com/supabase/postgres/wiki/Docker)\n[![Digital Ocean](https://github.com/supabase/postgres/blob/develop/docs/img/digital-ocean.png)](https://github.com/supabase/postgres/wiki/Digital-Ocean)\n[![AWS](https://github.com/supabase/postgres/blob/develop/docs/img/aws.png)](https://github.com/supabase/postgres/wiki/AWS-EC2)\n\n### Marketplace Images\n|   | Postgres & Extensions | PgBouncer | PostgREST | WAL-G |\n|---|:---:|:---:|:---:|:---:|\n| Supabase Postgres |  ✔️   | ❌    | ❌   |  ✔️   |\n| Supabase Postgres: PgBouncer Bundle  |  ✔️   |  ✔️  | ❌    |   ✔️ |\n| Supabase Postgres: PostgREST Bundle |  ✔️   |  ❌  |  ✔️   |   ✔️ |\n| Supabase Postgres: Complete Bundle |  ✔️  |  ✔️   | ✔️   | ✔️   |\n\n#### Availability\n|   | AWS ARM | AWS x86 | Digital Ocean x86 |\n|---|:---:|:---:|:---:|\n| Supabase Postgres | Coming Soon | Coming Soon | Coming Soon |\n| Supabase Postgres: PgBouncer Bundle  | Coming Soon | Coming Soon | Coming Soon |\n| Supabase Postgres: PostgREST Bundle | Coming Soon | Coming Soon | Coming Soon |\n| Supabase Postgres: Complete Bundle | Coming Soon | Coming Soon | Coming Soon |\n\n### Quick Build\n\n```bash\n$ time packer build -timestamp-ui \\\n  --var \"aws_access_key=<insert aws access key>\" \\\n  --var \"aws_secret_key=<insert aws secret key>\" \\\n  --var \"ami_regions=<insert desired regions>\" \\\n  amazon-arm.json\n```\n\n## Motivation\n\n- Make it fast and simple to get started with Postgres.\n- Show off a few of Postgres' most exciting features.\n- This is the same build we offer at [Supabase](https://supabase.io).\n\n## Roadmap\n\n- [Support for more images](https://github.com/supabase/postgres/issues/4)\n- [Vote for more plugins/extensions](https://github.com/supabase/postgres/issues/5)\n- Open a github issue if you have a feature request\n\n## License\n\n[The PostgreSQL License](https://opensource.org/licenses/postgresql). We realize that licensing is tricky since we are bundling all the various plugins. If we have infringed on any license, let us know and we will make the necessary changes (or remove that extension from this repo).\n\n## Sponsors\n\nWe are building the features of Firebase using enterprise-grade, open source products. We support existing communities wherever possible, and if the products don’t exist we build them and open source them ourselves.\n\n[![New Sponsor](https://user-images.githubusercontent.com/10214025/90518111-e74bbb00-e198-11ea-8f88-c9e3c1aa4b5b.png)](https://github.com/sponsors/supabase)\n\n\n## Experimental Nix Packaging of resources\n\nThere is a `/nix` folder in this repo, plus a `flake.nix` and `flake.lock` that facilitate using the Nix package management system to package supabase/postgres, and all of our extensions and wrappers. A user will need nix installed on their machine. As of 4/1/2024 the package set only builds on target machines (`x86_64-linux` and `aarch64-linux`), however work is under way to also support building and using directly on `aarch64-darwin` (macOs). As of 4/1/2024, versions of packages and extensions are synced from `/ansible/vars.yml` via a utility that can be run by executing `nix run .#sync-exts-versions` (you must have nix installed and be on the supported `x86_64-linux` and `aarch64-linux` for this command to work). The short term goal is to sync these versions as they are updated by our infrastructure and postgres teams, then to see the nix packaged versions build successfully in parallel over time, along with tests of the nix packaged versions passing. \n\nThe supabase/postgres repo will continue to source it's dependencies from ansible for the short term, while we stabilize this nix build. \n\nForthcoming PR's will include: integrating the nix work into our ansible/packer builds, building natively on aarch64-darwin (macOs), more testing\n"
        },
        {
          "name": "amazon-arm64-nix.pkr.hcl",
          "type": "blob",
          "size": 5.6494140625,
          "content": "variable \"ami\" {\n  type    = string\n  default = \"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-arm64-server-*\"\n}\n\nvariable \"profile\" {\n  type    = string\n  default = \"${env(\"AWS_PROFILE\")}\"\n}\n\nvariable \"ami_name\" {\n  type    = string\n  default = \"supabase-postgres\"\n}\n\nvariable \"ami_regions\" {\n  type    = list(string)\n  default = [\"ap-southeast-2\"]\n}\n\nvariable \"ansible_arguments\" {\n  type    = string\n  default = \"--skip-tags install-postgrest,install-pgbouncer,install-supabase-internal\"\n}\n\nvariable \"aws_access_key\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"aws_secret_key\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"environment\" {\n  type    = string\n  default = \"prod\"\n}\n\nvariable \"region\" {\n  type    = string\n}\n\nvariable \"build-vol\" {\n  type    = string\n  default = \"xvdc\"\n}\n\n# ccache docker image details\nvariable \"docker_user\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"docker_passwd\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"docker_image\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"docker_image_tag\" {\n  type    = string\n  default = \"latest\"\n}\n\nlocals {\n  creator = \"packer\"\n}\n\nvariable \"postgres-version\" {\n  type = string\n  default = \"\"\n}\n\nvariable \"git-head-version\" {\n  type = string\n  default = \"unknown\"\n}\n\nvariable \"packer-execution-id\" {\n  type = string\n  default = \"unknown\"\n}\n\nvariable \"force-deregister\" {\n  type    = bool\n  default = false\n}\n\npacker {\n  required_plugins {\n    amazon = {\n      source  = \"github.com/hashicorp/amazon\"\n      version = \"~> 1\"\n    }\n  }\n}\n\n# source block\nsource \"amazon-ebssurrogate\" \"source\" {\n  profile = \"${var.profile}\"\n  #access_key    = \"${var.aws_access_key}\"\n  #ami_name = \"${var.ami_name}-arm64-${formatdate(\"YYYY-MM-DD-hhmm\", timestamp())}\"\n  ami_name = \"${var.ami_name}-${var.postgres-version}-stage-1\"\n  ami_virtualization_type = \"hvm\"\n  ami_architecture = \"arm64\"\n  ami_regions   = \"${var.ami_regions}\"\n  instance_type = \"c6g.4xlarge\"\n  region       = \"${var.region}\"\n  #secret_key   = \"${var.aws_secret_key}\"\n  force_deregister = var.force-deregister\n\n  # Use latest official ubuntu focal ami owned by Canonical.\n  source_ami_filter {\n    filters = {\n      virtualization-type = \"hvm\"\n      name = \"${var.ami}\"\n      root-device-type = \"ebs\"\n    }\n    owners = [ \"099720109477\" ]\n    most_recent = true\n   }\n  ena_support = true\n  launch_block_device_mappings {\n    device_name = \"/dev/xvdf\"\n    delete_on_termination = true\n    volume_size = 10\n    volume_type = \"gp3\"\n   }\n\n  launch_block_device_mappings {\n    device_name = \"/dev/xvdh\"\n    delete_on_termination = true\n    volume_size = 8\n    volume_type = \"gp3\"\n   }\n\n  launch_block_device_mappings {\n    device_name           = \"/dev/${var.build-vol}\"\n    delete_on_termination = true\n    volume_size           = 16\n    volume_type           = \"gp2\"\n    omit_from_artifact    = true\n  }\n\n  run_tags = {\n    creator           = \"packer\"\n    appType           = \"postgres\"\n    packerExecutionId = \"${var.packer-execution-id}\"\n  }\n  run_volume_tags = {\n    creator = \"packer\"\n    appType = \"postgres\"\n  }\n  snapshot_tags = {\n    creator = \"packer\"\n    appType = \"postgres\"\n  }\n  tags = {\n    creator = \"packer\"\n    appType = \"postgres\"\n    postgresVersion = \"${var.postgres-version}-stage1\"\n    sourceSha = \"${var.git-head-version}\"\n  }\n\n  communicator = \"ssh\"\n  ssh_pty = true\n  ssh_username = \"ubuntu\"\n  ssh_timeout = \"5m\"\n\n  ami_root_device {\n    source_device_name = \"/dev/xvdf\"\n    device_name = \"/dev/xvda\"\n    delete_on_termination = true\n    volume_size = 10\n    volume_type = \"gp2\"\n  }\n\n  associate_public_ip_address = true\n}\n\n# a build block invokes sources and runs provisioning steps on them.\nbuild {\n  sources = [\"source.amazon-ebssurrogate.source\"]\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/files/sources-arm64.cfg\"\n    destination = \"/tmp/sources.list\"\n  }\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/files/ebsnvme-id\"\n    destination = \"/tmp/ebsnvme-id\"\n  }\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/files/70-ec2-nvme-devices.rules\"\n    destination = \"/tmp/70-ec2-nvme-devices.rules\"\n  }\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/scripts/chroot-bootstrap-nix.sh\"\n    destination = \"/tmp/chroot-bootstrap-nix.sh\"\n  }\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/files/cloud.cfg\"\n    destination = \"/tmp/cloud.cfg\"\n  }\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/files/vector.timer\"\n    destination = \"/tmp/vector.timer\"\n  }\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/files/apparmor_profiles\"\n    destination = \"/tmp\"\n  }\n\n  provisioner \"file\" {\n    source = \"migrations\"\n    destination = \"/tmp\"\n  }\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/files/unit-tests\"\n    destination = \"/tmp\"\n  }\n\n  # Copy ansible playbook\n  provisioner \"shell\" {\n    inline = [\"mkdir /tmp/ansible-playbook\"]\n  }\n\n  provisioner \"file\" {\n    source = \"ansible\"\n    destination = \"/tmp/ansible-playbook\"\n  }\n\n  provisioner \"file\" {\n    source = \"scripts\"\n    destination = \"/tmp/ansible-playbook\"\n  }\n\n  provisioner \"file\" {\n    source = \"ansible/vars.yml\"\n    destination = \"/tmp/ansible-playbook/vars.yml\"\n  }\n\n  provisioner \"shell\" {\n    environment_vars = [\n      \"ARGS=${var.ansible_arguments}\",\n      \"DOCKER_USER=${var.docker_user}\",\n      \"DOCKER_PASSWD=${var.docker_passwd}\",\n      \"DOCKER_IMAGE=${var.docker_image}\",\n      \"DOCKER_IMAGE_TAG=${var.docker_image_tag}\",\n      \"POSTGRES_SUPABASE_VERSION=${var.postgres-version}\"\n    ]\n    use_env_var_file = true\n    script = \"ebssurrogate/scripts/surrogate-bootstrap-nix.sh\"\n    execute_command = \"sudo -S sh -c '. {{.EnvVarFile}} && {{.Path}}'\"\n    start_retry_timeout = \"5m\"\n    skip_clean = true\n  }\n\n  provisioner \"file\" {\n    source = \"/tmp/ansible.log\"\n    destination = \"/tmp/ansible.log\"\n    direction = \"download\"\n  }\n}\n"
        },
        {
          "name": "amazon-arm64.pkr.hcl",
          "type": "blob",
          "size": 5.6494140625,
          "content": "variable \"ami\" {\n  type    = string\n  default = \"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-arm64-server-*\"\n}\n\nvariable \"profile\" {\n  type    = string\n  default = \"${env(\"AWS_PROFILE\")}\"\n}\n\nvariable \"ami_name\" {\n  type    = string\n  default = \"supabase-postgres\"\n}\n\nvariable \"ami_regions\" {\n  type    = list(string)\n  default = [\"ap-southeast-2\"]\n}\n\nvariable \"ansible_arguments\" {\n  type    = string\n  default = \"--skip-tags install-postgrest,install-pgbouncer,install-supabase-internal\"\n}\n\nvariable \"aws_access_key\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"aws_secret_key\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"environment\" {\n  type    = string\n  default = \"prod\"\n}\n\nvariable \"region\" {\n  type    = string\n}\n\nvariable \"build-vol\" {\n  type    = string\n  default = \"xvdc\"\n}\n\n# ccache docker image details\nvariable \"docker_user\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"docker_passwd\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"docker_image\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"docker_image_tag\" {\n  type    = string\n  default = \"latest\"\n}\n\nlocals {\n  creator = \"packer\"\n}\n\nvariable \"postgres-version\" {\n  type = string\n  default = \"\"\n}\n\nvariable \"git-head-version\" {\n  type = string\n  default = \"unknown\"\n}\n\nvariable \"packer-execution-id\" {\n  type = string\n  default = \"unknown\"\n}\n\nvariable \"force-deregister\" {\n  type    = bool\n  default = false\n}\n\npacker {\n  required_plugins {\n    amazon = {\n      source  = \"github.com/hashicorp/amazon\"\n      version = \"~> 1\"\n    }\n  }\n}\n\n# source block\nsource \"amazon-ebssurrogate\" \"source\" {\n  profile = \"${var.profile}\"\n  #access_key    = \"${var.aws_access_key}\"\n  #ami_name = \"${var.ami_name}-arm64-${formatdate(\"YYYY-MM-DD-hhmm\", timestamp())}\"\n  ami_name = \"${var.ami_name}-${var.postgres-version}\"\n  ami_virtualization_type = \"hvm\"\n  ami_architecture = \"arm64\"\n  ami_regions   = \"${var.ami_regions}\"\n  instance_type = \"c6g.4xlarge\"\n  region       = \"${var.region}\"\n  #secret_key   = \"${var.aws_secret_key}\"\n  force_deregister = var.force-deregister\n\n  # Use latest official ubuntu focal ami owned by Canonical.\n  source_ami_filter {\n    filters = {\n      virtualization-type = \"hvm\"\n      name = \"${var.ami}\"\n      root-device-type = \"ebs\"\n    }\n    owners = [ \"099720109477\" ]\n    most_recent = true\n   }\n  ena_support = true\n  launch_block_device_mappings {\n    device_name = \"/dev/xvdf\"\n    delete_on_termination = true\n    volume_size = 10\n    volume_type = \"gp3\"\n   }\n\n  launch_block_device_mappings {\n    device_name = \"/dev/xvdh\"\n    delete_on_termination = true\n    volume_size = 8\n    volume_type = \"gp3\"\n   }\n\n  launch_block_device_mappings {\n    device_name           = \"/dev/${var.build-vol}\"\n    delete_on_termination = true\n    volume_size           = 16\n    volume_type           = \"gp2\"\n    omit_from_artifact    = true\n  }\n\n  run_tags = {\n    creator           = \"packer\"\n    appType           = \"postgres\"\n    packerExecutionId = \"${var.packer-execution-id}\"\n  }\n  run_volume_tags = {\n    creator = \"packer\"\n    appType = \"postgres\"\n  }\n  snapshot_tags = {\n    creator = \"packer\"\n    appType = \"postgres\"\n  }\n  tags = {\n    creator = \"packer\"\n    appType = \"postgres\"\n    postgresVersion = \"${var.postgres-version}\"\n    sourceSha = \"${var.git-head-version}\"\n  }\n\n  communicator = \"ssh\"\n  ssh_pty = true\n  ssh_username = \"ubuntu\"\n  ssh_timeout = \"5m\"\n\n  ami_root_device {\n    source_device_name = \"/dev/xvdf\"\n    device_name = \"/dev/xvda\"\n    delete_on_termination = true\n    volume_size = 10\n    volume_type = \"gp2\"\n  }\n\n  associate_public_ip_address = true\n}\n\n# a build block invokes sources and runs provisioning steps on them.\nbuild {\n  sources = [\"source.amazon-ebssurrogate.source\"]\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/files/sources-arm64.cfg\"\n    destination = \"/tmp/sources.list\"\n  }\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/files/ebsnvme-id\"\n    destination = \"/tmp/ebsnvme-id\"\n  }\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/files/70-ec2-nvme-devices.rules\"\n    destination = \"/tmp/70-ec2-nvme-devices.rules\"\n  }\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/scripts/chroot-bootstrap.sh\"\n    destination = \"/tmp/chroot-bootstrap.sh\"\n  }\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/files/cloud.cfg\"\n    destination = \"/tmp/cloud.cfg\"\n  }\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/files/vector.timer\"\n    destination = \"/tmp/vector.timer\"\n  }\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/files/apparmor_profiles\"\n    destination = \"/tmp\"\n  }\n\n  provisioner \"file\" {\n    source = \"migrations\"\n    destination = \"/tmp\"\n  }\n\n  provisioner \"file\" {\n    source = \"ebssurrogate/files/unit-tests\"\n    destination = \"/tmp\"\n  }\n\n  # Copy ansible playbook\n  provisioner \"shell\" {\n    inline = [\"mkdir /tmp/ansible-playbook\"]\n  }\n\n  provisioner \"file\" {\n    source = \"ansible\"\n    destination = \"/tmp/ansible-playbook\"\n  }\n\n  provisioner \"file\" {\n    source = \"scripts\"\n    destination = \"/tmp/ansible-playbook\"\n  }\n\n  provisioner \"shell\" {\n    environment_vars = [\n      \"ARGS=${var.ansible_arguments}\",\n      \"DOCKER_USER=${var.docker_user}\",\n      \"DOCKER_PASSWD=${var.docker_passwd}\",\n      \"DOCKER_IMAGE=${var.docker_image}\",\n      \"DOCKER_IMAGE_TAG=${var.docker_image_tag}\",\n      \"POSTGRES_SUPABASE_VERSION=${var.postgres-version}\"\n    ]\n    use_env_var_file = true\n    script = \"ebssurrogate/scripts/surrogate-bootstrap.sh\"\n    execute_command = \"sudo -S sh -c '. {{.EnvVarFile}} && {{.Path}}'\"\n    start_retry_timeout = \"5m\"\n    skip_clean = true\n  }\n\n  provisioner \"file\" {\n    source = \"/tmp/ansible.log\"\n    destination = \"/tmp/ansible.log\"\n    direction = \"download\"\n  }\n\n  provisioner \"file\" {\n    source = \"/tmp/pg_binaries.tar.gz\"\n    destination = \"/tmp/pg_binaries.tar.gz\"\n    direction = \"download\"\n  }\n}\n"
        },
        {
          "name": "ansible.cfg",
          "type": "blob",
          "size": 0.0458984375,
          "content": "[defaults]\n\ncallback_whitelist = profile_tasks\n"
        },
        {
          "name": "ansible",
          "type": "tree",
          "content": null
        },
        {
          "name": "common.vars.pkr.hcl",
          "type": "blob",
          "size": 0.0302734375,
          "content": "postgres-version = \"15.1.1.95\"\n"
        },
        {
          "name": "development-arm.vars.pkr.hcl",
          "type": "blob",
          "size": 0.1484375,
          "content": "arch = \"arm64\"\nami_regions = [\"us-east-1\"]\nenvironment = \"dev\"\ninstance-type = \"c6g.4xlarge\"\nregion= \"us-east-1\"\nubuntu-2004 = \"ami-0b49a4a6e8e22fa16\"\n\n"
        },
        {
          "name": "digitalOcean.json",
          "type": "blob",
          "size": 1.177734375,
          "content": "{\n  \"variables\": {\n    \"do_token\": \"\",\n    \"image_name\": \"ubuntu-20-04-x64\",\n    \"region\": \"sgp1\",\n    \"snapshot_regions\": \"sgp1\",\n    \"snapshot_name\": \"supabase-postgres-13.3.0\",\n    \"ansible_arguments\": \"--skip-tags,update-only,--skip-tags,aws-only,-e,supabase_internal='false'\"\n  },\n  \"builders\": [\n    {\n      \"type\": \"digitalocean\",\n      \"api_token\": \"{{user `do_token`}}\",\n      \"image\": \"{{user `image_name`}}\",\n      \"region\": \"{{user `region`}}\",\n      \"snapshot_regions\": \"{{user `snapshot_regions`}}\",\n      \"size\": \"s-1vcpu-1gb\",\n      \"ssh_username\": \"root\",\n      \"snapshot_name\": \"{{user `snapshot_name`}}\"\n    }\n  ],\n  \"provisioners\": [\n    {\n      \"type\": \"shell\",\n      \"inline\": [\n        \"while [ ! -f /var/lib/cloud/instance/boot-finished ]; do echo 'Waiting for cloud-init...'; sleep 1; done\"\n      ]\n    },\n    {\n      \"type\": \"ansible\",\n      \"user\": \"root\",\n      \"playbook_file\": \"ansible/playbook.yml\",\n      \"extra_arguments\": \"{{user `ansible_arguments`}}\"\n    },\n    {\n      \"type\": \"shell\",\n      \"scripts\": [\n        \"scripts/01-postgres_check.sh\",\n        \"scripts/90-cleanup.sh\",\n        \"scripts/91-log_cleanup.sh\",\n        \"scripts/99-img_check.sh\"\n      ]\n    }\n  ]\n}\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ebssurrogate",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 5.5908203125,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1705309234,\n        \"narHash\": \"sha256-uNRRNRKmJyCRC/8y1RqBkqWBLM034y4qN7EprSdmgyA=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"1ef2e671c3b0c19053962c07dbda38332dcebf26\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"flake-utils_2\": {\n      \"inputs\": {\n        \"systems\": \"systems_2\"\n      },\n      \"locked\": {\n        \"lastModified\": 1694529238,\n        \"narHash\": \"sha256-zsNZZGTGnMOf9YpHKJqMSsa0dXbfmxeoJ7xHlrt+xmY=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"ff7b65b44d01cf9ba6a71320833626af21126384\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nix-editor\": {\n      \"inputs\": {\n        \"nixpkgs\": \"nixpkgs\",\n        \"utils\": \"utils\"\n      },\n      \"locked\": {\n        \"lastModified\": 1703105021,\n        \"narHash\": \"sha256-Ne9NG7x45a8aJyAN+yYWbr/6mQHBVVkwZZ72EZHHRqw=\",\n        \"owner\": \"snowfallorg\",\n        \"repo\": \"nix-editor\",\n        \"rev\": \"b5017f8d61753ce6a3a1a2aa7e474d59146a8ae3\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"snowfallorg\",\n        \"repo\": \"nix-editor\",\n        \"type\": \"github\"\n      }\n    },\n    \"nix2container\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils_2\",\n        \"nixpkgs\": \"nixpkgs_2\"\n      },\n      \"locked\": {\n        \"lastModified\": 1708764364,\n        \"narHash\": \"sha256-+pOtDvmuVTg0Gi58hKDUyrNla5NbyUvt3Xs3gLR0Fws=\",\n        \"owner\": \"nlewo\",\n        \"repo\": \"nix2container\",\n        \"rev\": \"c891f90d2e3c48a6b33466c96e4851e0fc0cf455\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nlewo\",\n        \"repo\": \"nix2container\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1675673983,\n        \"narHash\": \"sha256-8hzNh1jtiPxL5r3ICNzSmpSzV7kGb3KwX+FS5BWJUTo=\",\n        \"owner\": \"nixos\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"5a350a8f31bb7ef0c6e79aea3795a890cf7743d4\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nixos\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs_2\": {\n      \"locked\": {\n        \"lastModified\": 1697269602,\n        \"narHash\": \"sha256-dSzV7Ud+JH4DPVD9od53EgDrxUVQOcSj4KGjggCDVJI=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"9cb540e9c1910d74a7e10736277f6eb9dff51c81\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs_3\": {\n      \"locked\": {\n        \"lastModified\": 1712666087,\n        \"narHash\": \"sha256-WwjUkWsjlU8iUImbivlYxNyMB1L5YVqE8QotQdL9jWc=\",\n        \"owner\": \"nixos\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"a76c4553d7e741e17f289224eda135423de0491d\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nixos\",\n        \"ref\": \"nixpkgs-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs_4\": {\n      \"locked\": {\n        \"lastModified\": 1728538411,\n        \"narHash\": \"sha256-f0SBJz1eZ2yOuKUr5CA9BHULGXVSn6miBuUWdTyhUhU=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"b69de56fac8c2b6f8fd27f2eca01dcda8e0a4221\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixpkgs-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nix-editor\": \"nix-editor\",\n        \"nix2container\": \"nix2container\",\n        \"nixpkgs\": \"nixpkgs_3\",\n        \"rust-overlay\": \"rust-overlay\"\n      }\n    },\n    \"rust-overlay\": {\n      \"inputs\": {\n        \"nixpkgs\": \"nixpkgs_4\"\n      },\n      \"locked\": {\n        \"lastModified\": 1729045942,\n        \"narHash\": \"sha256-HjmK0x5Zm2TK2vFpC7XBM2e3EDNVnAIuEoU2FkeN8xw=\",\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"rev\": \"9de3cea452d2401d6f93c06ad985178a4e11d1fc\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"oxalica\",\n        \"repo\": \"rust-overlay\",\n        \"type\": \"github\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    },\n    \"systems_2\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    },\n    \"utils\": {\n      \"locked\": {\n        \"lastModified\": 1667395993,\n        \"narHash\": \"sha256-nuEHfE/LcWyuSWnS8t12N1wc105Qtau+/OdUAjtQ0rA=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"5aed5285a952e0b949eb3ba02c12fa4fcfef535f\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 32.251953125,
          "content": "{\n  description = \"Prototype tooling for deploying PostgreSQL\";\n\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixpkgs-unstable\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n    nix2container.url = \"github:nlewo/nix2container\";\n    nix-editor.url = \"github:snowfallorg/nix-editor\";\n    rust-overlay.url = \"github:oxalica/rust-overlay\";\n  };\n\n  outputs = { self, nixpkgs, flake-utils, nix2container, nix-editor, rust-overlay, ...}:\n    let\n      gitRev = \"vcs=${self.shortRev or \"dirty\"}+${builtins.substring 0 8 (self.lastModifiedDate or self.lastModified or \"19700101\")}\";\n\n      ourSystems = with flake-utils.lib; [\n        system.x86_64-linux\n        system.aarch64-linux\n        system.aarch64-darwin\n        system.x86_64-darwin\n      ];\n    in\n    flake-utils.lib.eachSystem ourSystems (system:\n      let\n        pgsqlDefaultPort = \"5435\";\n        pgsqlSuperuser = \"supabase_admin\";\n        nix2img = nix2container.packages.${system}.nix2container;\n\n        pkgs = import nixpkgs {\n          config = { \n            allowUnfree = true;\n            permittedInsecurePackages = [\n              \"v8-9.7.106.18\"\n            ];  \n          };\n          inherit system;\n          overlays = [\n            # NOTE: add any needed overlays here. in theory we could\n            # pull them from the overlays/ directory automatically, but we don't\n            # want to have an arbitrary order, since it might matter. being\n            # explicit is better.\n            (import rust-overlay)\n            (final: prev: {\n              cargo-pgrx = final.callPackage ./nix/cargo-pgrx/default.nix {\n                inherit (final) lib;\n                inherit (final) darwin;\n                inherit (final) fetchCrate;\n                inherit (final) openssl;\n                inherit (final) pkg-config;\n                inherit (final) makeRustPlatform;\n                inherit (final) stdenv;\n                inherit (final) rust-bin;\n              };\n\n              buildPgrxExtension = final.callPackage ./nix/cargo-pgrx/buildPgrxExtension.nix {\n                inherit (final) cargo-pgrx;\n                inherit (final) lib;\n                inherit (final) Security;\n                inherit (final) pkg-config;\n                inherit (final) makeRustPlatform;\n                inherit (final) stdenv;\n                inherit (final) writeShellScriptBin;\n              };\n\n              buildPgrxExtension_0_11_3 = prev.buildPgrxExtension.override {\n                cargo-pgrx = final.cargo-pgrx.cargo-pgrx_0_11_3;\n              };\n\n              buildPgrxExtension_0_12_6 = prev.buildPgrxExtension.override {\n                cargo-pgrx = final.cargo-pgrx.cargo-pgrx_0_12_6;\n              };\n            })\n            (final: prev: {\n              postgresql = final.callPackage ./nix/postgresql/default.nix {\n                inherit (final) lib stdenv fetchurl makeWrapper callPackage buildEnv newScope;\n              };\n            })\n          ];\n        };\n        sfcgal = pkgs.callPackage ./nix/ext/sfcgal/sfcgal.nix { };\n        supabase-groonga = pkgs.callPackage ./nix/supabase-groonga.nix { };\n        mecab-naist-jdic = pkgs.callPackage ./nix/ext/mecab-naist-jdic/default.nix { };\n        # Our list of PostgreSQL extensions which come from upstream Nixpkgs.\n        # These are maintained upstream and can easily be used here just by\n        # listing their name. Anytime the version of nixpkgs is upgraded, these\n        # may also bring in new versions of the extensions.\n        psqlExtensions = [\n          /* pljava */\n          /*\"postgis\"*/\n        ];\n\n        #FIXME for now, timescaledb is not included in the orioledb version of supabase extensions, as there is an issue\n        # with building timescaledb with the orioledb patched version of postgresql\n        orioledbPsqlExtensions = [\n          /* pljava */\n          /*\"timescaledb\"*/\n        ];\n\n        # Custom extensions that exist in our repository. These aren't upstream\n        # either because nobody has done the work, maintaining them here is\n        # easier and more expedient, or because they may not be suitable, or are\n        # too niche/one-off.\n        #\n        # Ideally, most of these should have copies upstream for third party\n        # use, but even if they did, keeping our own copies means that we can\n        # rollout new versions of these critical things easier without having to\n        # go through the upstream release engineering process.\n        ourExtensions = [\n          ./nix/ext/rum.nix\n          ./nix/ext/timescaledb.nix\n          ./nix/ext/timescaledb-2.9.1.nix\n          ./nix/ext/pgroonga.nix\n          ./nix/ext/index_advisor.nix\n          ./nix/ext/wal2json.nix\n          ./nix/ext/pgmq.nix\n          ./nix/ext/pg_repack.nix\n          ./nix/ext/pg-safeupdate.nix\n          ./nix/ext/plpgsql-check.nix\n          ./nix/ext/pgjwt.nix\n          ./nix/ext/pgaudit.nix\n          ./nix/ext/postgis.nix\n          ./nix/ext/pgrouting.nix\n          ./nix/ext/pgtap.nix\n          ./nix/ext/pg_backtrace.nix\n          ./nix/ext/pg_cron.nix\n          ./nix/ext/pgsql-http.nix\n          ./nix/ext/pg_plan_filter.nix\n          ./nix/ext/pg_net.nix\n          ./nix/ext/pg_hashids.nix\n          ./nix/ext/pgsodium.nix\n          ./nix/ext/pg_graphql.nix\n          ./nix/ext/pg_stat_monitor.nix\n          ./nix/ext/pg_jsonschema.nix\n          ./nix/ext/pgvector.nix\n          ./nix/ext/vault.nix\n          ./nix/ext/hypopg.nix\n          ./nix/ext/pg_tle.nix\n          ./nix/ext/wrappers/default.nix\n          ./nix/ext/supautils.nix\n          ./nix/ext/plv8.nix\n        ];\n\n        #Where we import and build the orioledb extension, we add on our custom extensions\n        # plus the orioledb option\n        #we're not using timescaledb in the orioledb version of supabase extensions\n        orioleFilteredExtensions = builtins.filter (\n          x: \n            x != ./nix/ext/timescaledb.nix &&\n            x != ./nix/ext/timescaledb-2.9.1.nix &&\n            x != ./nix/ext/plv8.nix && \n            x != ./nix/ext/postgis.nix && \n            x != ./nix/ext/pgrouting.nix &&\n            x != ./nix/ext/pg_jsonschema.nix &&\n            x != ./nix/ext/pg_graphql.nix \n        ) ourExtensions;\n\n        orioledbExtensions = orioleFilteredExtensions ++ [ ./nix/ext/orioledb.nix ];\n        pg16Extensions = builtins.filter (\n          x:\n          x != ./nix/ext/timescaledb-2.9.1.nix\n        ) ourExtensions;\n        getPostgresqlPackage = version:\n          pkgs.postgresql.\"postgresql_${version}\";\n        # Create a 'receipt' file for a given postgresql package. This is a way\n        # of adding a bit of metadata to the package, which can be used by other\n        # tools to inspect what the contents of the install are: the PSQL\n        # version, the installed extensions, et cetera.\n        #\n        # This takes three arguments:\n        #  - pgbin: the postgresql package we are building on top of\n        #  - upstreamExts: the list of extensions from upstream nixpkgs. This is\n        #    not a list of packages, but an attrset containing extension names\n        #    mapped to versions.\n        #  - ourExts: the list of extensions from upstream nixpkgs. This is not\n        #    a list of packages, but an attrset containing extension names\n        #    mapped to versions.\n        #\n        # The output is a package containing the receipt.json file, which can be\n        # merged with the PostgreSQL installation using 'symlinkJoin'.\n        makeReceipt = pgbin: upstreamExts: ourExts: pkgs.writeTextFile {\n          name = \"receipt\";\n          destination = \"/receipt.json\";\n          text = builtins.toJSON {\n            revision = gitRev;\n            psql-version = pgbin.version;\n            nixpkgs = {\n              revision = nixpkgs.rev;\n              extensions = upstreamExts;\n            };\n            extensions = ourExts;\n\n            # NOTE this field can be used to do cache busting (e.g.\n            # force a rebuild of the psql packages) but also to helpfully inform\n            # tools what version of the schema is being used, for forwards and\n            # backwards compatibility\n            receipt-version = \"1\";\n          };\n        };\n\n        makeOurPostgresPkgs = version:\n          let \n            postgresql = getPostgresqlPackage version;\n            extensionsToUse = if (builtins.elem version [\"orioledb-16\" \"orioledb-17\"])\n              then orioledbExtensions\n              else if version == \"16\"\n              then pg16Extensions\n              else ourExtensions;\n          in map (path: pkgs.callPackage path { inherit postgresql; }) extensionsToUse;\n\n        # Create an attrset that contains all the extensions included in a server.\n        makeOurPostgresPkgsSet = version:\n          (builtins.listToAttrs (map\n            (drv:\n              { name = drv.pname; value = drv; }\n            )\n            (makeOurPostgresPkgs version)))\n          // { recurseForDerivations = true; };\n\n\n        # Create a binary distribution of PostgreSQL, given a version.\n        #\n        # NOTE: The version here does NOT refer to the exact PostgreSQL version;\n        # it refers to the *major number only*, which is used to select the\n        # correct version of the package from nixpkgs. This is because we want\n        # to be able to do so in an open ended way. As an example, the version\n        # \"15\" passed in will use the nixpkgs package \"postgresql_15\" as the\n        # basis for building extensions, etc.\n        makePostgresBin = version:\n          let\n            postgresql = getPostgresqlPackage version;\n            upstreamExts = map\n              (ext: {\n                name = postgresql.pkgs.\"${ext}\".pname;\n                version = postgresql.pkgs.\"${ext}\".version;\n              })\n              psqlExtensions;\n            ourExts = map (ext: { name = ext.pname; version = ext.version; }) (makeOurPostgresPkgs version);\n\n            pgbin = postgresql.withPackages (ps:\n              (map (ext: ps.\"${ext}\") psqlExtensions) ++ (makeOurPostgresPkgs version)\n            );\n          in\n          pkgs.symlinkJoin {\n            inherit (pgbin) name version;\n            paths = [ pgbin (makeReceipt pgbin upstreamExts ourExts) ];\n          };\n\n        # Create an attribute set, containing all the relevant packages for a\n        # PostgreSQL install, wrapped up with a bow on top. There are three\n        # packages:\n        #\n        #  - bin: the postgresql package itself, with all the extensions\n        #    installed, and a receipt.json file containing metadata about the\n        #    install.\n        #  - exts: an attrset containing all the extensions, mapped to their\n        #    package names.\n        makePostgres = version: rec {\n          bin = makePostgresBin version;\n          exts = makeOurPostgresPkgsSet version;\n          recurseForDerivations = true;\n        };\n\n        # The base set of packages that we export from this Nix Flake, that can\n        # be used with 'nix build'. Don't use the names listed below; check the\n        # name in 'nix flake show' in order to make sure exactly what name you\n        # want.\n        basePackages = let\n          # Function to get the PostgreSQL version from the attribute name\n          getVersion = name: \n            let\n              match = builtins.match \"psql_([0-9]+)\" name;\n            in\n            if match == null then null else builtins.head match;\n\n          # Define the available PostgreSQL versions\n          postgresVersions = {\n            psql_15 = makePostgres \"15\";\n            psql_16 = makePostgres \"16\";\n            #psql_orioledb-16 = makePostgres \"orioledb-16\" ;\n            psql_orioledb-17 = makePostgres \"orioledb-17\" ;\n          };\n\n          # Find the active PostgreSQL version\n          activeVersion = getVersion (builtins.head (builtins.attrNames postgresVersions));\n\n          # Function to create the pg_regress package\n          makePgRegress = version:\n            let\n              postgresqlPackage = pkgs.\"postgresql_${version}\";\n            in\n              pkgs.callPackage ./nix/ext/pg_regress.nix { \n                postgresql = postgresqlPackage;\n              };\n          postgresql_15 = getPostgresqlPackage \"15\";\n          postgresql_16 = getPostgresqlPackage \"16\";\n          #postgresql_orioledb-16 = getPostgresqlPackage \"orioledb-16\";\n          postgresql_orioledb-17 = getPostgresqlPackage \"orioledb-17\";\n        in \n        postgresVersions //{\n          supabase-groonga = supabase-groonga;\n          cargo-pgrx_0_11_3 = pkgs.cargo-pgrx.cargo-pgrx_0_11_3;\n          cargo-pgrx_0_12_6 = pkgs.cargo-pgrx.cargo-pgrx_0_12_6;\n          # PostgreSQL versions.\n          psql_15 = postgresVersions.psql_15;\n          psql_16 = postgresVersions.psql_16;\n          #psql_orioledb-16 = postgresVersions.psql_orioledb-16;\n          psql_orioledb-17 = postgresVersions.psql_orioledb-17;\n          sfcgal = sfcgal;\n          pg_prove = pkgs.perlPackages.TAPParserSourceHandlerpgTAP;\n          inherit postgresql_15 postgresql_16 postgresql_orioledb-17;\n          postgresql_15_debug = if pkgs.stdenv.isLinux then postgresql_15.debug else null;\n          postgresql_16_debug = if pkgs.stdenv.isLinux then postgresql_16.debug else null;\n          postgresql_orioledb-17_debug = if pkgs.stdenv.isLinux then postgresql_orioledb-17.debug else null;\n          postgresql_15_src = pkgs.stdenv.mkDerivation {\n            pname = \"postgresql-15-src\";\n            version = postgresql_15.version;\n\n            src = postgresql_15.src;\n\n            nativeBuildInputs = [ pkgs.bzip2 ];\n\n            phases = [ \"unpackPhase\" \"installPhase\" ];\n\n            installPhase = ''\n              mkdir -p $out\n              cp -r . $out\n            '';\n\n            meta = with pkgs.lib; {\n              description = \"PostgreSQL 15 source files\";\n              homepage = \"https://www.postgresql.org/\";\n              license = licenses.postgresql;\n              platforms = platforms.all;\n            };\n          };\n          postgresql_16_src = pkgs.stdenv.mkDerivation {\n            pname = \"postgresql-16-src\";\n            version = postgresql_16.version;\n\n            src = postgresql_16.src;\n\n            nativeBuildInputs = [ pkgs.bzip2 ];\n\n            phases = [ \"unpackPhase\" \"installPhase\" ];\n\n            installPhase = ''\n              mkdir -p $out\n              cp -r . $out\n            '';\n\n            meta = with pkgs.lib; {\n              description = \"PostgreSQL 15 source files\";\n              homepage = \"https://www.postgresql.org/\";\n              license = licenses.postgresql;\n              platforms = platforms.all;\n            };\n          };\n          postgresql_orioledb-17_src = pkgs.stdenv.mkDerivation {\n            pname = \"postgresql-17-src\";\n            version = postgresql_orioledb-17.version;\n\n            src = postgresql_orioledb-17.src;\n\n            nativeBuildInputs = [ pkgs.bzip2 ];\n\n            phases = [ \"unpackPhase\" \"installPhase\" ];\n\n            installPhase = ''\n              mkdir -p $out\n              cp -r . $out\n            '';\n\n            meta = with pkgs.lib; {\n              description = \"PostgreSQL 15 source files\";\n              homepage = \"https://www.postgresql.org/\";\n              license = licenses.postgresql;\n              platforms = platforms.all;\n            };\n          };\n          mecab_naist_jdic = mecab-naist-jdic;\n          supabase_groonga = supabase-groonga;\n          pg_regress = makePgRegress activeVersion;\n          # Start a version of the server.\n          start-server =\n            let\n              pgconfigFile = builtins.path {\n                name = \"postgresql.conf\";\n                path = ./ansible/files/postgresql_config/postgresql.conf.j2;\n              };\n              supautilsConfigFile = builtins.path {\n                name = \"supautils.conf\";\n                path = ./ansible/files/postgresql_config/supautils.conf.j2;\n              };\n              loggingConfigFile = builtins.path {\n                name = \"logging.conf\";\n                path = ./ansible/files/postgresql_config/postgresql-csvlog.conf;\n              };\n              readReplicaConfigFile = builtins.path {\n                name = \"readreplica.conf\";\n                path = ./ansible/files/postgresql_config/custom_read_replica.conf.j2;\n              };\n              pgHbaConfigFile = builtins.path {\n                name = \"pg_hba.conf\";\n                path = ./ansible/files/postgresql_config/pg_hba.conf.j2;\n              };\n              pgIdentConfigFile = builtins.path {\n                name = \"pg_ident.conf\";\n                path = ./ansible/files/postgresql_config/pg_ident.conf.j2;\n              };\n              postgresqlExtensionCustomScriptsPath = builtins.path {\n                name = \"extension-custom-scripts\";\n                path = ./ansible/files/postgresql_extension_custom_scripts;\n              };\n              getkeyScript = ./nix/tests/util/pgsodium_getkey.sh;\n              localeArchive = if pkgs.stdenv.isDarwin\n                then \"${pkgs.darwin.locale}/share/locale\"\n                else \"${pkgs.glibcLocales}/lib/locale/locale-archive\";\n            in\n            pkgs.runCommand \"start-postgres-server\" { } ''\n              mkdir -p $out/bin $out/etc/postgresql-custom $out/etc/postgresql $out/extension-custom-scripts\n              cp ${supautilsConfigFile} $out/etc/postgresql-custom/supautils.conf || { echo \"Failed to copy supautils.conf\"; exit 1; }\n              cp ${pgconfigFile} $out/etc/postgresql/postgresql.conf || { echo \"Failed to copy postgresql.conf\"; exit 1; }\n              cp ${loggingConfigFile} $out/etc/postgresql-custom/logging.conf || { echo \"Failed to copy logging.conf\"; exit 1; }\n              cp ${readReplicaConfigFile} $out/etc/postgresql-custom/read-replica.conf || { echo \"Failed to copy read-replica.conf\"; exit 1; }\n              cp ${pgHbaConfigFile} $out/etc/postgresql/pg_hba.conf || { echo \"Failed to copy pg_hba.conf\"; exit 1; }\n              cp ${pgIdentConfigFile} $out/etc/postgresql/pg_ident.conf || { echo \"Failed to copy pg_ident.conf\"; exit 1; }\n              cp -r ${postgresqlExtensionCustomScriptsPath}/* $out/extension-custom-scripts/ || { echo \"Failed to copy custom scripts\"; exit 1; }\n              echo \"Copy operation completed\"\n              chmod 644 $out/etc/postgresql-custom/supautils.conf\n              chmod 644 $out/etc/postgresql/postgresql.conf\n              chmod 644 $out/etc/postgresql-custom/logging.conf\n              chmod 644 $out/etc/postgresql/pg_hba.conf\n              substitute ${./nix/tools/run-server.sh.in} $out/bin/start-postgres-server \\\n                --subst-var-by 'PGSQL_DEFAULT_PORT' '${pgsqlDefaultPort}' \\\n                --subst-var-by 'PGSQL_SUPERUSER' '${pgsqlSuperuser}' \\\n                --subst-var-by 'PSQL15_BINDIR' '${basePackages.psql_15.bin}' \\\n                --subst-var-by 'PSQL_CONF_FILE' $out/etc/postgresql/postgresql.conf \\\n                --subst-var-by 'PSQL16_BINDIR' '${basePackages.psql_16.bin}' \\\n                --subst-var-by 'PSQLORIOLEDB17_BINDIR' '${basePackages.psql_orioledb-17.bin}' \\\n                --subst-var-by 'PGSODIUM_GETKEY' '${getkeyScript}' \\\n                --subst-var-by 'READREPL_CONF_FILE' \"$out/etc/postgresql-custom/read-replica.conf\" \\\n                --subst-var-by 'LOGGING_CONF_FILE' \"$out/etc/postgresql-custom/logging.conf\" \\\n                --subst-var-by 'SUPAUTILS_CONF_FILE' \"$out/etc/postgresql-custom/supautils.conf\" \\\n                --subst-var-by 'PG_HBA' \"$out/etc/postgresql/pg_hba.conf\" \\\n                --subst-var-by 'PG_IDENT' \"$out/etc/postgresql/pg_ident.conf\" \\\n                --subst-var-by 'LOCALES' '${localeArchive}' \\\n                --subst-var-by 'EXTENSION_CUSTOM_SCRIPTS_DIR' \"$out/extension-custom-scripts\" \\\n                --subst-var-by 'MECAB_LIB' '${basePackages.psql_15.exts.pgroonga}/lib/groonga/plugins/tokenizers/tokenizer_mecab.so' \\\n                --subst-var-by 'GROONGA_DIR' '${supabase-groonga}' \\\n                --subst-var-by 'CURRENT_SYSTEM' '${system}'\n\n              chmod +x $out/bin/start-postgres-server\n            '';\n\n          # Start a version of the client and runs migrations script on server.\n          start-client =\n            let\n              migrationsDir = ./migrations/db;\n              postgresqlSchemaSql = ./nix/tools/postgresql_schema.sql;\n              pgbouncerAuthSchemaSql = ./ansible/files/pgbouncer_config/pgbouncer_auth_schema.sql;\n              statExtensionSql = ./ansible/files/stat_extension.sql;\n            in\n            pkgs.runCommand \"start-postgres-client\" { } ''\n              mkdir -p $out/bin\n              substitute ${./nix/tools/run-client.sh.in} $out/bin/start-postgres-client \\\n                --subst-var-by 'PGSQL_DEFAULT_PORT' '${pgsqlDefaultPort}' \\\n                --subst-var-by 'PGSQL_SUPERUSER' '${pgsqlSuperuser}' \\\n                --subst-var-by 'PSQL15_BINDIR' '${basePackages.psql_15.bin}' \\\n                --subst-var-by 'PSQL16_BINDIR' '${basePackages.psql_16.bin}' \\\n                --subst-var-by 'PSQLORIOLEDB17_BINDIR' '${basePackages.psql_orioledb-17.bin}' \\\n                --subst-var-by 'MIGRATIONS_DIR' '${migrationsDir}' \\\n                --subst-var-by 'POSTGRESQL_SCHEMA_SQL' '${postgresqlSchemaSql}' \\\n                --subst-var-by 'PGBOUNCER_AUTH_SCHEMA_SQL' '${pgbouncerAuthSchemaSql}' \\\n                --subst-var-by 'STAT_EXTENSION_SQL' '${statExtensionSql}'\n              chmod +x $out/bin/start-postgres-client\n            '';\n\n          # Migrate between two data directories.\n          migrate-tool =\n            let\n              configFile = ./nix/tests/postgresql.conf.in;\n              getkeyScript = ./nix/tests/util/pgsodium_getkey.sh;\n              primingScript = ./nix/tests/prime.sql;\n              migrationData = ./nix/tests/migrations/data.sql;\n            in\n            pkgs.runCommand \"migrate-postgres\" { } ''\n              mkdir -p $out/bin\n              substitute ${./nix/tools/migrate-tool.sh.in} $out/bin/migrate-postgres \\\n                --subst-var-by 'PSQL15_BINDIR' '${basePackages.psql_15.bin}' \\\n                --subst-var-by 'PSQL_CONF_FILE' '${configFile}' \\\n                --subst-var-by 'PGSODIUM_GETKEY' '${getkeyScript}' \\\n                --subst-var-by 'PRIMING_SCRIPT' '${primingScript}' \\\n                --subst-var-by 'MIGRATION_DATA' '${migrationData}'\n\n              chmod +x $out/bin/migrate-postgres\n            '';\n\n          start-replica = pkgs.runCommand \"start-postgres-replica\" { } ''\n            mkdir -p $out/bin\n            substitute ${./nix/tools/run-replica.sh.in} $out/bin/start-postgres-replica \\\n              --subst-var-by 'PGSQL_SUPERUSER' '${pgsqlSuperuser}' \\\n              --subst-var-by 'PSQL15_BINDIR' '${basePackages.psql_15.bin}'\n            chmod +x $out/bin/start-postgres-replica\n          '';\n          pg-restore =\n            pkgs.runCommand \"run-pg-restore\" { } ''\n              mkdir -p $out/bin\n              substitute ${./nix/tools/run-restore.sh.in} $out/bin/pg-restore \\\n                --subst-var-by PSQL15_BINDIR '${basePackages.psql_15.bin}'\n              chmod +x $out/bin/pg-restore\n            '';\n          sync-exts-versions = pkgs.runCommand \"sync-exts-versions\" { } ''\n            mkdir -p $out/bin \n            substitute ${./nix/tools/sync-exts-versions.sh.in} $out/bin/sync-exts-versions \\\n              --subst-var-by 'YQ' '${pkgs.yq}/bin/yq' \\\n              --subst-var-by 'JQ' '${pkgs.jq}/bin/jq' \\\n              --subst-var-by 'NIX_EDITOR' '${nix-editor.packages.${system}.nix-editor}/bin/nix-editor' \\\n              --subst-var-by 'NIXPREFETCHURL' '${pkgs.nixVersions.nix_2_20}/bin/nix-prefetch-url' \\\n              --subst-var-by 'NIX' '${pkgs.nixVersions.nix_2_20}/bin/nix'\n            chmod +x $out/bin/sync-exts-versions\n          '';\n\n          local-infra-bootstrap = pkgs.runCommand \"local-infra-bootstrap\" { } ''\n            mkdir -p $out/bin\n            substitute ${./nix/tools/local-infra-bootstrap.sh.in} $out/bin/local-infra-bootstrap\n            chmod +x $out/bin/local-infra-bootstrap\n          '';\n          dbmate-tool = \n          let\n            migrationsDir = ./migrations/db;\n            ansibleVars = ./ansible/vars.yml;\n            pgbouncerAuthSchemaSql = ./ansible/files/pgbouncer_config/pgbouncer_auth_schema.sql;\n            statExtensionSql = ./ansible/files/stat_extension.sql;\n          in\n          pkgs.runCommand \"dbmate-tool\" {\n            buildInputs = with pkgs; [\n              overmind\n              dbmate\n              nix\n              jq\n              yq\n            ];\n            nativeBuildInputs = with pkgs; [\n              makeWrapper\n            ];\n          } ''\n            mkdir -p $out/bin $out/migrations \n            cp -r ${migrationsDir}/* $out\n            substitute ${./nix/tools/dbmate-tool.sh.in} $out/bin/dbmate-tool \\\n              --subst-var-by 'PGSQL_DEFAULT_PORT' '${pgsqlDefaultPort}' \\\n              --subst-var-by 'MIGRATIONS_DIR' $out \\\n              --subst-var-by 'PGSQL_SUPERUSER' '${pgsqlSuperuser}' \\\n              --subst-var-by 'ANSIBLE_VARS' ${ansibleVars} \\\n              --subst-var-by 'CURRENT_SYSTEM' '${system}' \\\n              --subst-var-by 'PGBOUNCER_AUTH_SCHEMA_SQL' '${pgbouncerAuthSchemaSql}' \\\n              --subst-var-by 'STAT_EXTENSION_SQL' '${statExtensionSql}'\n            chmod +x $out/bin/dbmate-tool\n            wrapProgram $out/bin/dbmate-tool \\\n              --prefix PATH : ${pkgs.lib.makeBinPath [ pkgs.overmind pkgs.dbmate pkgs.nix pkgs.jq pkgs.yq ]}\n          '';       \n        };\n\n\n        # Create a testing harness for a PostgreSQL package. This is used for\n        # 'nix flake check', and works with any PostgreSQL package you hand it.\n        makeCheckHarness = pgpkg:\n          let\n            sqlTests = ./nix/tests/smoke;\n            pg_prove = pkgs.perlPackages.TAPParserSourceHandlerpgTAP;\n            supabase-groonga = pkgs.callPackage ./nix/supabase-groonga.nix { };\n            pg_regress = basePackages.pg_regress;\n            tmpDirCmd = if pkgs.stdenv.isDarwin then\n              ''mkdir -p /tmp/postgres-check.$$ && echo \"/tmp/postgres-check.$$\"''\n            else\n              \"mktemp -d\";\n          in\n          pkgs.runCommand \"postgres-${pgpkg.version}-check-harness\"\n            {\n              nativeBuildInputs = with pkgs; [ coreutils bash pgpkg pg_prove pg_regress procps supabase-groonga ];\n            } ''\n            TMPDIR=$(${tmpDirCmd})\n            if [ $? -ne 0 ]; then\n              echo \"Failed to create temp directory\" >&2\n              exit 1\n            fi\n            chmod -R 755 \"$TMPDIR\"\n\n            # Ensure the temporary directory is removed on exit\n            #trap 'rm -rf \"$TMPDIR\"' EXIT\n\n            export PGDATA=\"$TMPDIR/pgdata\"\n            export PGSODIUM_DIR=\"$TMPDIR/pgsodium\"\n\n            mkdir -p $PGDATA\n            mkdir -p $TMPDIR/logfile\n            # Generate a random key and store it in an environment variable\n            export PGSODIUM_KEY=$(head -c 32 /dev/urandom | od -A n -t x1 | tr -d ' \\n')\n            export GRN_PLUGINS_DIR=${supabase-groonga}/lib/groonga/plugins\n            # Create a simple script to echo the key\n            echo '#!/bin/sh' > $TMPDIR/getkey.sh\n            echo 'echo $PGSODIUM_KEY' >> $TMPDIR/getkey.sh\n            chmod +x $TMPDIR/getkey.sh\n            initdb --locale=C --username=supabase_admin\n            substitute ${./nix/tests/postgresql.conf.in} $PGDATA/postgresql.conf \\\n              --subst-var-by PGSODIUM_GETKEY_SCRIPT \"$TMPDIR/getkey.sh\"\n            echo \"listen_addresses = '*'\" >> $PGDATA/postgresql.conf\n            echo \"port = 5432\" >> $PGDATA/postgresql.conf\n            echo \"host all all 127.0.0.1/32 trust\" >> $PGDATA/pg_hba.conf\n            # Add system-specific configuration for aarch64-darwin\n\n            #postgres -D \"$PGDATA\" -k \"$TMPDIR\" -h localhost -p 5432 >$TMPDIR/logfile/postgresql.log 2>&1 &\n            pg_ctl -D \"$PGDATA\" -l $TMPDIR/logfile/postgresql.log -o \"-k $TMPDIR -p 5432\" start\n            for i in {1..60}; do\n              if pg_isready -h localhost -p 5432; then\n                echo \"PostgreSQL is ready\"\n                break\n              fi\n              sleep 1\n              if [ $i -eq 60 ]; then\n                echo \"PostgreSQL is not ready after 60 seconds\"\n                echo \"PostgreSQL status:\"\n                pg_ctl -D \"$PGDATA\" status\n                echo \"PostgreSQL log content:\"\n                cat $TMPDIR/logfile/postgresql.log\n                exit 1\n              fi\n            done\n            createdb -p 5432 -h localhost --username=supabase_admin testing\n            if ! psql -p 5432 -h localhost --username=supabase_admin -d testing -v ON_ERROR_STOP=1 -Xaf ${./nix/tests/prime.sql}; then\n              echo \"Error executing SQL file. PostgreSQL log content:\"\n              cat $TMPDIR/logfile/postgresql.log\n              pg_ctl -D \"$PGDATA\" stop\n              exit 1\n            fi\n            pg_prove -p 5432 -h localhost --username=supabase_admin -d testing ${sqlTests}/*.sql\n\n            mkdir -p $out/regression_output\n            pg_regress \\\n              --use-existing \\\n              --dbname=testing \\\n              --inputdir=${./nix/tests} \\\n              --outputdir=$out/regression_output \\\n              --host=localhost \\\n              --port=5432 \\\n              --user=supabase_admin \\\n              $(ls ${./nix/tests/sql} | sed -e 's/\\..*$//' | sort )\n\n            pg_ctl -D \"$PGDATA\" stop\n            mv $TMPDIR/logfile/postgresql.log $out\n            echo ${pgpkg}\n          '';      \n      in\n      rec {\n        # The list of all packages that can be built with 'nix build'. The list\n        # of names that can be used can be shown with 'nix flake show'\n        packages = flake-utils.lib.flattenTree basePackages // {\n          # Any extra packages we might want to include in our package\n          # set can go here.\n          inherit (pkgs);\n        };\n\n        # The list of exported 'checks' that are run with every run of 'nix\n        # flake check'. This is run in the CI system, as well.\n        checks = {\n          psql_15 = makeCheckHarness basePackages.psql_15.bin;\n          psql_16 = makeCheckHarness basePackages.psql_16.bin;\n          #psql_orioledb_16 = makeCheckHarness basePackages.psql_orioledb_16.bin;\n        };\n\n        # Apps is a list of names of things that can be executed with 'nix run';\n        # these are distinct from the things that can be built with 'nix build',\n        # so they need to be listed here too.\n        apps =\n          let\n            mkApp = attrName: binName: {\n              type = \"app\";\n              program = \"${basePackages.\"${attrName}\"}/bin/${binName}\";\n            };\n          in\n          {\n            start-server = mkApp \"start-server\" \"start-postgres-server\";\n            start-client = mkApp \"start-client\" \"start-postgres-client\";\n            start-replica = mkApp \"start-replica\" \"start-postgres-replica\";\n            migrate-postgres = mkApp \"migrate-tool\" \"migrate-postgres\";\n            sync-exts-versions = mkApp \"sync-exts-versions\" \"sync-exts-versions\";\n            pg-restore = mkApp \"pg-restore\" \"pg-restore\";\n            local-infra-bootstrap = mkApp \"local-infra-bootstrap\" \"local-infra-bootstrap\";\n            dbmate-tool = mkApp \"dbmate-tool\" \"dbmate-tool\";\n            migration-unit-tests = mkApp \"migration-unit-tests\" \"migration-unit-tests\";\n          };\n\n        # 'devShells.default' lists the set of packages that are included in the\n        # ambient $PATH environment when you run 'nix develop'. This is useful\n        # for development and puts many convenient devtools instantly within\n        # reach.\n\n      devShells = let\n        mkCargoPgrxDevShell = { pgrxVersion, rustVersion }: pkgs.mkShell {\n          packages = with pkgs; [\n            basePackages.\"cargo-pgrx_${pgrxVersion}\"\n            (rust-bin.stable.${rustVersion}.default.override {\n              extensions = [ \"rust-src\" ];\n            })\n          ];\n          shellHook = ''\n            export HISTFILE=.history\n          '';\n        };\n      in {\n        default = pkgs.mkShell {\n          packages = with pkgs; [\n            coreutils\n            just\n            nix-update\n            #pg_prove\n            shellcheck\n            ansible\n            ansible-lint\n            (packer.overrideAttrs (oldAttrs: {\n              version = \"1.7.8\";\n            }))\n\n            basePackages.start-server\n            basePackages.start-client\n            basePackages.start-replica\n            basePackages.migrate-tool\n            basePackages.sync-exts-versions\n            dbmate\n          ];\n          shellHook = ''\n            export HISTFILE=.history\n          '';\n        };\n        cargo-pgrx_0_11_3 = mkCargoPgrxDevShell {\n          pgrxVersion = \"0_11_3\";\n          rustVersion = \"1.80.0\";\n        };\n        cargo-pgrx_0_12_6 = mkCargoPgrxDevShell {\n          pgrxVersion = \"0_12_6\";\n          rustVersion = \"1.80.0\";\n        };\n      };     \n  }\n  );\n}\n"
        },
        {
          "name": "migrations",
          "type": "tree",
          "content": null
        },
        {
          "name": "nix",
          "type": "tree",
          "content": null
        },
        {
          "name": "postgresql.gpg.key",
          "type": "blob",
          "size": 3.8857421875,
          "content": "-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBE6XR8IBEACVdDKT2HEH1IyHzXkb4nIWAY7echjRxo7MTcj4vbXAyBKOfjja\nUrBEJWHN6fjKJXOYWXHLIYg0hOGeW9qcSiaa1/rYIbOzjfGfhE4x0Y+NJHS1db0V\nG6GUj3qXaeyqIJGS2z7m0Thy4Lgr/LpZlZ78Nf1fliSzBlMo1sV7PpP/7zUO+aA4\nbKa8Rio3weMXQOZgclzgeSdqtwKnyKTQdXY5MkH1QXyFIk1nTfWwyqpJjHlgtwMi\nc2cxjqG5nnV9rIYlTTjYG6RBglq0SmzF/raBnF4Lwjxq4qRqvRllBXdFu5+2pMfC\nIZ10HPRdqDCTN60DUix+BTzBUT30NzaLhZbOMT5RvQtvTVgWpeIn20i2NrPWNCUh\nhj490dKDLpK/v+A5/i8zPvN4c6MkDHi1FZfaoz3863dylUBR3Ip26oM0hHXf4/2U\nA/oA4pCl2W0hc4aNtozjKHkVjRx5Q8/hVYu+39csFWxo6YSB/KgIEw+0W8DiTII3\nRQj/OlD68ZDmGLyQPiJvaEtY9fDrcSpI0Esm0i4sjkNbuuh0Cvwwwqo5EF1zfkVj\nTqz2REYQGMJGc5LUbIpk5sMHo1HWV038TWxlDRwtOdzw08zQA6BeWe9FOokRPeR2\nAqhyaJJwOZJodKZ76S+LDwFkTLzEKnYPCzkoRwLrEdNt1M7wQBThnC5z6wARAQAB\ntBxQb3N0Z3JlU1FMIERlYmlhbiBSZXBvc2l0b3J5iQJOBBMBCAA4AhsDBQsJCAcD\nBRUKCQgLBRYCAwEAAh4BAheAFiEEuXsK/KoaR/BE8kSgf8x9RqzMTPgFAlhtCD8A\nCgkQf8x9RqzMTPgECxAAk8uL+dwveTv6eH21tIHcltt8U3Ofajdo+D/ayO53LiYO\nxi27kdHD0zvFMUWXLGxQtWyeqqDRvDagfWglHucIcaLxoxNwL8+e+9hVFIEskQAY\nkVToBCKMXTQDLarz8/J030Pmcv3ihbwB+jhnykMuyyNmht4kq0CNgnlcMCdVz0d3\nz/09puryIHJrD+A8y3TD4RM74snQuwc9u5bsckvRtRJKbP3GX5JaFZAqUyZNRJRJ\nTn2OQRBhCpxhlZ2afkAPFIq2aVnEt/Ie6tmeRCzsW3lOxEH2K7MQSfSu/kRz7ELf\nCz3NJHj7rMzC+76Rhsas60t9CjmvMuGONEpctijDWONLCuch3Pdj6XpC+MVxpgBy\n2VUdkunb48YhXNW0jgFGM/BFRj+dMQOUbY8PjJjsmVV0joDruWATQG/M4C7O8iU0\nB7o6yVv4m8LDEN9CiR6r7H17m4xZseT3f+0QpMe7iQjz6XxTUFRQxXqzmNnloA1T\n7VjwPqIIzkj/u0V8nICG/ktLzp1OsCFatWXh7LbU+hwYl6gsFH/mFDqVxJ3+DKQi\nvyf1NatzEwl62foVjGUSpvh3ymtmtUQ4JUkNDsXiRBWczaiGSuzD9Qi0ONdkAX3b\newqmN4TfE+XIpCPxxHXwGq9Rv1IFjOdCX0iG436GHyTLC1tTUIKF5xV4Y0+cXIOJ\nAj0EEwEIACcCGwMFCwkIBwMFFQoJCAsFFgIDAQACHgECF4AFAlLpFRkFCQ6EJy0A\nCgkQf8x9RqzMTPjOZA//Zp0e25pcvle7cLc0YuFr9pBv2JIkLzPm83nkcwKmxaWa\nyUIG4Sv6pH6hm8+S/CHQij/yFCX+o3ngMw2J9HBUvafZ4bnbI0RGJ70GsAwraQ0V\nlkIfg7GUw3TzvoGYO42rZTru9S0K/6nFP6D1HUu+U+AsJONLeb6oypQgInfXQExP\nZyliUnHdipei4WR1YFW6sjSkZT/5C3J1wkAvPl5lvOVthI9Zs6bZlJLZwusKxU0U\nM4Btgu1Sf3nnJcHmzisixwS9PMHE+AgPWIGSec/N27a0KmTTvImV6K6nEjXJey0K\n2+EYJuIBsYUNorOGBwDFIhfRk9qGlpgt0KRyguV+AP5qvgry95IrYtrOuE7307Si\ndEbSnvO5ezNemE7gT9Z1tM7IMPfmoKph4BfpNoH7aXiQh1Wo+ChdP92hZUtQrY2N\nm13cmkxYjQ4ZgMWfYMC+DA/GooSgZM5i6hYqyyfAuUD9kwRN6BqTbuAUAp+hCWYe\nN4D88sLYpFh3paDYNKJ+Gf7Yyi6gThcV956RUFDH3ys5Dk0vDL9NiWwdebWfRFbz\noRM3dyGP889aOyLzS3mh6nHzZrNGhW73kslSQek8tjKrB+56hXOnb4HaElTZGDvD\n5wmrrhN94kbyGtz3cydIohvNO9d90+29h0eGEDYti7j7maHkBKUAwlcPvMg5m3aJ\nAj0EEwEIACcCGwMFCwkIBwMFFQoJCAsFFgIDAQACHgECF4AFAlEqbZUFCQg2wEEA\nCgkQf8x9RqzMTPhFMQ//WxAfKMdpSIA9oIC/yPD/dJpY/+DyouOljpE6MucMy/Ar\nBECjFTBwi/j9NYM4ynAk34IkhuNexc1i9/05f5RM6+riLCLgAOsADDbHD4miZzoS\nxiVr6GQ3YXMbOGld9kV9Sy6mGNjcUov7iFcf5Hy5w3AjPfKuR9zXswyfzIU1YXOb\niiZT38l55pp/BSgvGVQsvbNjsff5CbEKXS7q3xW+WzN0QWF6YsfNVhFjRGj8hKtH\nvwKcA02wwjLeLXVTm6915ZUKhZXUFc0vM4Pj4EgNswH8Ojw9AJaKWJIZmLyW+aP+\nwpu6YwVCicxBY59CzBO2pPJDfKFQzUtrErk9irXeuCCLesDyirxJhv8o0JAvmnMA\nKOLhNFUrSQ2m+3EnF7zhfz70gHW+EG8X8mL/EN3/dUM09j6TVrjtw43RLxBzwMDe\nariFF9yC+5bLtnGgxjsB9Ik6GV5v34/NEEGf1qBiAzFmDVFRZlrNDkq6gmpvGnA5\nhUWNr+y0i01LjGyaLSWHYjgw2UEQOqcUtTFK9MNzbZze4mVaHMEz9/aMfX25R6qb\niNqCChveIm8mYr5Ds2zdZx+G5bAKdzX7nx2IUAxFQJEE94VLSp3npAaTWv3sHr7d\nR8tSyUJ9poDwgw4W9BIcnAM7zvFYbLF5FNggg/26njHCCN70sHt8zGxKQINMc6SJ\nAj0EEwEIACcCGwMFCwkIBwMFFQoJCAsFFgIDAQACHgECF4AFAlB5KywFCQPDFt8A\nCgkQf8x9RqzMTPhuCQ//QAjRSAOCQ02qmUAikT+mTB6baOAakkYq6uHbEO7qPZkv\n4E/M+HPIJ4wdnBNeSQjfvdNcZBA/x0hr5EMcBneKKPDj4hJ0panOIRQmNSTThQw9\nOU351gm3YQctAMPRUu1fTJAL/AuZUQf9ESmhyVtWNlH/56HBfYjE4iVeaRkkNLJy\nX3vkWdJSMwC/LO3Lw/0M3R8itDsm74F8w4xOdSQ52nSRFRh7PunFtREl+QzQ3EA/\nWB4AIj3VohIGkWDfPFCzV3cyZQiEnjAe9gG5pHsXHUWQsDFZ12t784JgkGyO5wT2\n6pzTiuApWM3k/9V+o3HJSgH5hn7wuTi3TelEFwP1fNzI5iUUtZdtxbFOfWMnZAyp\nEhaLmXNkg4zDkH44r0ss9fR0DAgUav1a25UnbOn4PgIEQy2fgHKHwRpCy20d6oCS\nlmgyWsR40EPPYvtGq49A2aK6ibXmdvvFT+Ts8Z+q2SkFpoYFX20mR2nsF0fbt1lf\nH65P64dukxeRGteWIeNakDD40bAAOH8+OaoTGVBJ2ACJfLVNM53PEoftavAwUYMr\nR910qvwYfd/46rh46g1Frr9SFMKYE9uvIJIgDsQB3QBp71houU4H55M5GD8XURYs\n+bfiQpJG1p7eB8e5jZx1SagNWc4XwL2FzQ9svrkbg1Y+359buUiP7T6QXX2zY+8=\n=XSRU\n-----END PGP PUBLIC KEY BLOCK-----\n"
        },
        {
          "name": "rfcs",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "stage2-nix-psql.pkr.hcl",
          "type": "blob",
          "size": 2.5986328125,
          "content": "variable \"profile\" {\n  type    = string\n  default = \"${env(\"AWS_PROFILE\")}\"\n}\n\nvariable \"ami_regions\" {\n  type    = list(string)\n  default = [\"ap-southeast-2\"]\n}\n\nvariable \"environment\" {\n  type    = string\n  default = \"prod\"\n}\n\nvariable \"region\" {\n  type    = string\n}\n\nvariable \"ami_name\" {\n  type    = string\n  default = \"supabase-postgres\"\n}\n\nvariable \"postgres-version\" {\n  type = string\n  default = \"\"\n}\n\nvariable \"git-head-version\" {\n  type = string\n  default = \"unknown\"\n}\n\nvariable \"packer-execution-id\" {\n  type = string\n  default = \"unknown\"\n}\n\nvariable \"force-deregister\" {\n  type    = bool\n  default = false\n}\nvariable \"git_sha\" {\n  type    = string\n  default = env(\"GIT_SHA\")\n}\n\nvariable \"postgres_major_version\" {\n  type    = string\n  default = \"\"\n}\n\npacker {\n  required_plugins {\n    amazon = {\n      version = \">= 0.0.2\"\n      source  = \"github.com/hashicorp/amazon\"\n    }\n  }\n}\n\nsource \"amazon-ebs\" \"ubuntu\" {\n  ami_name      = \"${var.ami_name}-${var.postgres-version}\"\n  instance_type = \"c6g.4xlarge\"\n  region        = \"${var.region}\"\n  source_ami_filter {\n    filters = {\n      name   = \"${var.ami_name}-${var.postgres-version}-stage-1\"\n      root-device-type    = \"ebs\"\n      virtualization-type = \"hvm\"\n    }\n    most_recent = true\n    owners      = [\"amazon\", \"self\"]\n  }\n  \n  communicator = \"ssh\"\n  ssh_pty = true\n  ssh_username = \"ubuntu\"\n  ssh_timeout = \"5m\"\n  \n  associate_public_ip_address = true\n\n\n  ena_support = true\n  \n  run_tags = {\n    creator           = \"packer\"\n    appType           = \"postgres\"\n    packerExecutionId = \"${var.packer-execution-id}\"\n  }\n  run_volume_tags = {\n    creator = \"packer\"\n    appType = \"postgres\"\n  }\n  snapshot_tags = {\n    creator = \"packer\"\n    appType = \"postgres\"\n  }\n  tags = {\n    creator = \"packer\"\n    appType = \"postgres\"\n    postgresVersion = \"${var.postgres-version}\"\n    sourceSha = \"${var.git-head-version}\"\n  }\n}\n\nbuild {\n  name = \"nix-packer-ubuntu\"\n  sources = [\n    \"source.amazon-ebs.ubuntu\"\n  ]\n\n  # Copy ansible playbook\n  provisioner \"shell\" {\n    inline = [\"mkdir /tmp/ansible-playbook\"]\n  }\n\n  provisioner \"file\" {\n    source = \"ansible\"\n    destination = \"/tmp/ansible-playbook\"\n  }\n\n  provisioner \"file\" {\n    source = \"migrations\"\n    destination = \"/tmp\"\n  }\n\n  provisioner \"file\" {\n    source       = \"ebssurrogate/files/unit-tests\"\n    destination  = \"/tmp/unit-tests\"\n  }\n\n  provisioner \"file\" {\n    source = \"scripts\"\n    destination = \"/tmp/ansible-playbook\"\n  }\n  \n  provisioner \"shell\" {\n    environment_vars = [\n      \"GIT_SHA=${var.git_sha}\",\n      \"POSTGRES_MAJOR_VERSION=${var.postgres_major_version}\"\n    ]\n     script = \"scripts/nix-provision.sh\"\n  }\n  \n}\n"
        },
        {
          "name": "testinfra",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}