{
  "metadata": {
    "timestamp": 1736568268998,
    "page": 156,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "haiibo/OpenWrt",
      "stars": 2915,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0634765625,
          "content": "MIT License\n\nCopyright (c) 2019-2020 P3TERX <https://p3terx.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.2861328125,
          "content": "<div align=\"center\">\n<img width=\"768\" src=\"https://cdn.jsdelivr.net/gh/haiibo/OpenWrt/images/openwrt.png\"/>\n<h1>OpenWrt — 多设备固件云编译</h1>\n\n<img src=\"https://img.shields.io/github/downloads/haiibo/OpenWrt/total.svg?style=for-the-badge&color=32C955\"/>\n<img src=\"https://img.shields.io/github/stars/haiibo/OpenWrt.svg?style=for-the-badge&color=orange\"/>\n<img src=\"https://img.shields.io/github/forks/haiibo/OpenWrt.svg?style=for-the-badge&color=ff69b4\"/>\n<img src=\"https://img.shields.io/github/license/haiibo/OpenWrt.svg?style=for-the-badge&color=blueviolet\"/>\n\n[![](https://img.shields.io/badge/-目录:-696969.svg)](#readme) [![](https://img.shields.io/badge/-项目说明-FFFFFF.svg)](#项目说明-) [![](https://img.shields.io/badge/-固件特色-FFFFFF.svg)](#固件特色-) [![](https://img.shields.io/badge/-固件下载-FFFFFF.svg)](#固件下载-) [![](https://img.shields.io/badge/-近期更新-FFFFFF.svg)](#近期更新-) [![](https://img.shields.io/badge/-插件预览-FFFFFF.svg)](#插件预览-) [![](https://img.shields.io/badge/-定制固件-FFFFFF.svg)](#定制固件-) [![](https://img.shields.io/badge/-特别提示-FFFFFF.svg)](#特别提示-) [![](https://img.shields.io/badge/-鸣谢-FFFFFF.svg)](#鸣谢-)\n</div>\n\n\n## 项目说明 [![](https://img.shields.io/badge/-项目基本介绍-FFFFFF.svg)](#项目说明-)\n- 固件构成：[![Lean](https://img.shields.io/badge/Lede-Lean-ff69b4.svg?style=flat&logo=appveyor)](https://github.com/coolsnowwolf/lede) [![P3TERX](https://img.shields.io/badge/OpenWrt-P3TERX-blueviolet.svg?style=flat&logo=appveyor)](https://github.com/P3TERX/Actions-OpenWrt) [![Flippy](https://img.shields.io/badge/Package-Flippy-orange.svg?style=flat&logo=appveyor)](https://github.com/unifreq/openwrt_packit) [![Haiibo](https://img.shields.io/badge/Build-Haiibo-32C955.svg?style=flat&logo=appveyor)](https://github.com/haiibo/OpenWrt)\n- 项目使用 Github Actions 拉取 [Lean](https://github.com/coolsnowwolf/lede) 的 Openwrt 源码仓库进行云编译\n- 固件默认管理地址：`192.168.1.1` 默认用户：`root` 默认密码：`password`\n- 提供适配于 ARMv8 电视盒子、Rockchip 平台、树莓派以及 X86 平台设备的 OpenWrt 固件\n- ARMv8 盒子固件分为 [Mini版](https://github.com/haiibo/OpenWrt/releases/tag/ARMv8_MINI) 和 [Plus版](https://github.com/haiibo/OpenWrt/releases/tag/ARMv8_PLUS)，Mini 精简版以科学上网为主，Plus 多功能版插件多适合折腾\n- ARMv8 系列固件包含 [F大](https://github.com/unifreq/openwrt_packit) 发布的所有已适配的盒子固件，并提供 Docker 镜像固件[➦使用方法](https://hub.docker.com/r/summary/openwrt-aarch64)\n- 固件集成的所有 ipk 插件全部打包在 Packages 文件中，可以在 [Releases](https://github.com/haiibo/OpenWrt/releases) 内进行下载\n- 项目编译的固件插件为最新版本，最新版插件可能有 BUG，如果之前使用稳定则无需追新\n- 第一次使用请采用全新安装，避免出现升级失败以及其他一些可能的 BUG\n\n\n## 固件特色 [![](https://img.shields.io/badge/-本项目固件特色-FFFFFF.svg)](#固件特色-)\n1. 固件每天定时自动编译，以确保获得最新体验\n2. 集成部分常用有线、无线、3G / 4G 网卡驱动\n3. 集成中文版 netdata 实时监控插件，小白也能轻松看懂系统概况\n4. 集成 iStore 应用商店，可根据自己需求自由安装所需插件\n5. 集成 Docker 服务，可在 OpenWrt 内自由部署 Docker 应用\n6. 集成应用过滤插件，支持游戏、视频、聊天、下载等 APP 过滤\n7. 集成在线用户插件，可查看所有在线用户 IP 地址与实时速率等\n8. ARMv8 系列固件内置晶晨宝盒，支持在线更新固件及内核等\n\n\n## 固件下载 [![](https://img.shields.io/badge/-编译状态及下载链接-FFFFFF.svg)](#固件下载-)\n点击下表中 [![](https://img.shields.io/badge/下载-链接-blueviolet.svg?style=flat&logo=hack-the-box)](https://github.com/haiibo/OpenWrt/releases) 即可跳转到该设备固件下载页面\n| 平台+设备名称 | 固件编译状态 | 配置文件 | 固件下载 |\n| :-------------: | :-------------: | :-------------: | :-------------: |\n| [![](https://img.shields.io/badge/OpenWrt-X86_64位-32C955.svg?logo=openwrt)](https://github.com/haiibo/OpenWrt/blob/main/.github/workflows/X86_64-OpenWrt.yml) | [![](https://github.com/haiibo/OpenWrt/actions/workflows/X86_64-OpenWrt.yml/badge.svg)](https://github.com/haiibo/OpenWrt/actions/workflows/X86_64-OpenWrt.yml) | [![](https://img.shields.io/badge/编译-配置-orange.svg?logo=apache-spark)](https://github.com/haiibo/OpenWrt/blob/main/configs/x86_64.config) | [![](https://img.shields.io/badge/下载-链接-blueviolet.svg?logo=hack-the-box)](https://github.com/haiibo/OpenWrt/releases/tag/X86_64) |\n| [![](https://img.shields.io/badge/OpenWrt-ARMv8_Mini-32C955.svg?logo=openwrt)](https://github.com/haiibo/OpenWrt/blob/main/.github/workflows/ARMv8-Mini-OpenWrt.yml) | [![](https://github.com/haiibo/OpenWrt/actions/workflows/ARMv8-Mini-OpenWrt.yml/badge.svg)](https://github.com/haiibo/OpenWrt/actions/workflows/ARMv8-Mini-OpenWrt.yml) | [![](https://img.shields.io/badge/编译-配置-orange.svg?logo=apache-spark)](https://github.com/haiibo/OpenWrt/blob/main/configs/armv8-mini.config) | [![](https://img.shields.io/badge/下载-链接-blueviolet.svg?logo=hack-the-box)](https://github.com/haiibo/OpenWrt/releases/tag/ARMv8_MINI) |\n| [![](https://img.shields.io/badge/OpenWrt-ARMv8_Plus-32C955.svg?logo=openwrt)](https://github.com/haiibo/OpenWrt/blob/main/.github/workflows/ARMv8-Plus-OpenWrt.yml) | [![](https://github.com/haiibo/OpenWrt/actions/workflows/ARMv8-Plus-OpenWrt.yml/badge.svg)](https://github.com/haiibo/OpenWrt/actions/workflows/ARMv8-Plus-OpenWrt.yml) | [![](https://img.shields.io/badge/编译-配置-orange.svg?logo=apache-spark)](https://github.com/haiibo/OpenWrt/blob/main/configs/armv8-plus.config) | [![](https://img.shields.io/badge/下载-链接-blueviolet.svg?logo=hack-the-box)](https://github.com/haiibo/OpenWrt/releases/tag/ARMv8_PLUS) |\n| [![](https://img.shields.io/badge/OpenWrt-Rockchip_平台-32C955.svg?logo=openwrt)](https://github.com/haiibo/OpenWrt/blob/main/.github/workflows/Rockchip-OpenWrt.yml) | [![](https://github.com/haiibo/OpenWrt/actions/workflows/Rockchip-OpenWrt.yml/badge.svg)](https://github.com/haiibo/OpenWrt/actions/workflows/Rockchip-OpenWrt.yml) | [![](https://img.shields.io/badge/编译-配置-orange.svg?logo=apache-spark)](https://github.com/haiibo/OpenWrt/blob/main/configs/rockchip.config) | [![](https://img.shields.io/badge/下载-链接-blueviolet.svg?logo=hack-the-box)](https://github.com/haiibo/OpenWrt/releases/tag/Rockchip) |\n| [![](https://img.shields.io/badge/OpenWrt-树莓派_4B-32C955.svg?logo=openwrt)](https://github.com/haiibo/OpenWrt/blob/main/.github/workflows/RaspberryPi4-OpenWrt.yml) | [![](https://github.com/haiibo/OpenWrt/actions/workflows/RaspberryPi4-OpenWrt.yml/badge.svg)](https://github.com/haiibo/OpenWrt/actions/workflows/RaspberryPi4-OpenWrt.yml) | [![](https://img.shields.io/badge/编译-配置-orange.svg?logo=apache-spark)](https://github.com/haiibo/OpenWrt/blob/main/configs/rpi4.config) | [![](https://img.shields.io/badge/下载-链接-blueviolet.svg?logo=hack-the-box)](https://github.com/haiibo/OpenWrt/releases/tag/RaspberryPi4) |\n| [![](https://img.shields.io/badge/OpenWrt-树莓派_3B/3B+-32C955.svg?logo=openwrt)](https://github.com/haiibo/OpenWrt/blob/main/.github/workflows/RaspberryPi3-OpenWrt.yml) | [![](https://github.com/haiibo/OpenWrt/actions/workflows/RaspberryPi3-OpenWrt.yml/badge.svg)](https://github.com/haiibo/OpenWrt/actions/workflows/RaspberryPi3-OpenWrt.yml) | [![](https://img.shields.io/badge/编译-配置-orange.svg?logo=apache-spark)](https://github.com/haiibo/OpenWrt/blob/main/configs/rpi3.config) | [![](https://img.shields.io/badge/下载-链接-blueviolet.svg?logo=hack-the-box)](https://github.com/haiibo/OpenWrt/releases/tag/RaspberryPi3) |\n\n\n## 近期更新 [![](https://img.shields.io/badge/-近期固件更新-FFFFFF.svg)](#近期更新-)\n🤣努力修复中……\n\n\n## 插件预览 [![](https://img.shields.io/badge/-固件插件及功能预览-FFFFFF.svg)](#插件预览-)\n<details>\n<summary><b>&nbsp;ARMv8 盒子 Mini 精简版本插件预览</b></summary>\n<br/>\n<img src=\"https://cdn.jsdelivr.net/gh/haiibo/OpenWrt/images/mini.png\"/>\n</details>\n\n<details>\n<summary><b>&nbsp;ARMv8 盒子 Plus 多功能版插件预览</b></summary>\n<br/>\n<img src=\"https://cdn.jsdelivr.net/gh/haiibo/OpenWrt/images/plus.png\"/>\n</details>\n\n<details>\n<summary><b>&nbsp;X86、R2S、R4S 等软路由插件预览</b></summary>\n<br/>\n<details>\n<summary><b>├── 状态</b></summary>\n　├── 概况<br/>\n　├── 防火墙<br/>\n　├── 路由表<br/>\n　├── 系统日志<br/>\n　├── 内核日志<br/>\n　├── 系统进程<br/>\n　├── 实时信息<br/>\n　├── 实时监控<br/>\n　├── 在线用户<br/>\n　├── WireGuard 状态<br/>\n　├── 负载均衡<br/>\n　└── 释放内存\n</details>\n<details>\n<summary><b>├── 系统</b></summary>\n　├── 系统<br/>\n　├── 管理权<br/>\n　├── TTYD 终端<br/>\n　├── 软件包<br/>\n　├── 启动项<br/>\n　├── 计划任务<br/>\n　├── 挂载点<br/>\n　├── 磁盘管理<br/>\n　├── 备份/升级<br/>\n　├── 自定义命令<br/>\n　├── 定时重启<br/>\n　├── 文件传输<br/>\n　├── Argon 主题设置<br/>\n　├── 重启<br/>\n　└── 关机\n</details>\n<details>\n<summary><b>├── 服务</b></summary>\n　├── PassWall<br/>\n　├── PassWall2<br/>\n　├── Hello World<br/>\n　├── iKoolProxy 滤广告<br/>\n　├── V2ray 服务器<br/>\n　├── 广告屏蔽大师 Plus+<br/>\n　├── ShadowSocksR Plus+<br/>\n　├── AdGuard Home<br/>\n　├── 应用过滤<br/>\n　├── MosDNS<br/>\n　├── 全能推送<br/>\n　├── 微信推送<br/>\n　├── 上网时间控制<br/>\n　├── 解锁网易云灰色歌曲<br/>\n　├── OpenClash<br/>\n　├── 动态 DNS<br/>\n　├── MultiSD_Lite<br/>\n　├── SmartDNS<br/>\n　├── 网络唤醒<br/>\n　├── 迅雷快鸟<br/>\n　├── Frps<br/>\n　├── UU游戏加速器<br/>\n　├── UPnP<br/>\n　├── KMS 服务器<br/>\n　├── AirPlay 2 音频接收<br/>\n　├── udpxy<br/>\n　├── Nps 内网穿透<br/>\n　├── uHTTPd<br/>\n　├── Frp 内网穿透<br/>\n　└── MWAN3 分流助手\n</details>\n<details>\n<summary><b>├── Docker</b></summary>\n　├── 概览<br/>\n　├── 容器<br/>\n　├── 镜像<br/>\n　├── 网络<br/>\n　├── 存储卷<br/>\n　├── 事件<br/>\n　└── 设置\n</details>\n<details>\n<summary><b>├── 网络存储</b></summary>\n　├── 文件浏览器<br/>\n　├── 可道云<br/>\n　├── NFS 管理<br/>\n　├── 微力同步<br/>\n　├── Alist 文件列表<br/>\n　├── qBittorrent<br/>\n　├── USB 打印服务器<br/>\n　├── 硬盘休眠<br/>\n　├── 挂载 SMB 网络共享<br/>\n　├── 网络共享<br/>\n　├── FTP 服务器<br/>\n　├── Rclone<br/>\n　├── Aria2 配置<br/>\n　├── miniDLNA<br/>\n　└── Transmission\n</details>\n<details>\n<summary><b>├── VPN</b></summary>\n　├── N2N v2 VPN<br/>\n　├── SoftEther VPN 服务器<br/>\n　├── OpenVPN 服务器<br/>\n　├── PPTP VPN 服务器<br/>\n　├── IPSec VPN 服务器<br/>\n　└── ZeroTier\n</details>\n<details>\n<summary><b>├── 网络</b></summary>\n　├── 接口<br/>\n　├── DHCP/DNS<br/>\n　├── 主机名<br/>\n　├── IP/MAC 绑定<br/>\n　├── 静态路由<br/>\n　├── 防火墙<br/>\n　├── 诊断<br/>\n　├── Socat<br/>\n　├── SQM QoS<br/>\n　├── 网速控制<br/>\n　├── 多线多拨<br/>\n　├── 负载均衡<br/>\n　└── Turbo ACC 网络加速\n</details>\n<details>\n<summary><b>├── 带宽监控</b></summary>\n　├── 显示<br/>\n　├── 配置<br/>\n　├── 备份<br/>\n　├── 网速监控<br/>\n　└── 实时流量监测\n</details>\n　└── <b>退出</b>\n</details>\n\n\n## 定制固件 [![](https://img.shields.io/badge/-项目基本编译教程-FFFFFF.svg)](#定制固件-)\n1. 首先要登录 Gihub 账号，然后 Fork 此项目到你自己的 Github 仓库\n2. 修改 `configs` 目录对应文件添加或删除插件，或者上传自己的 `xx.config` 配置文件\n3. 插件对应名称及功能请参考恩山网友帖子：[Applications 添加插件应用说明](https://www.right.com.cn/forum/thread-3682029-1-1.html)\n4. 如需修改默认 IP、添加或删除插件包以及一些其他设置请在 `diy-script.sh` 文件内修改\n5. 添加或修改 `xx.yml` 文件，最后点击 `Actions` 运行要编译的 `workflow` 即可开始编译\n6. 编译大概需要3-5小时，编译完成后在仓库主页 [Releases](https://github.com/haiibo/OpenWrt/releases) 对应 Tag 标签内下载固件\n<details>\n<summary><b>&nbsp;如果你觉得修改 config 文件麻烦，那么你可以点击此处尝试本地提取</b></summary>\n\n1. 首先装好 Linux 系统，推荐 Debian 11 或 Ubuntu LTS\n\n2. 安装编译依赖环境\n\n   ```bash\n   sudo apt update -y\n   sudo apt full-upgrade -y\n   sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \\\n   bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \\\n   git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \\\n   libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \\\n   mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \\\n   libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \\\n   vim wget xmlto xxd zlib1g-dev\n   ```\n\n3. 下载源代码，更新 feeds 并安装到本地\n\n   ```bash\n   git clone https://github.com/coolsnowwolf/lede\n   cd lede\n   ./scripts/feeds update -a\n   ./scripts/feeds install -a\n   ```\n\n4. 复制 diy-script.sh 文件内所有内容到命令行，添加自定义插件和自定义设置\n\n5. 命令行输入 `make menuconfig` 选择配置，选好配置后导出差异部分到 seed.config 文件\n\n   ```bash\n   make defconfig\n   ./scripts/diffconfig.sh > seed.config\n   ```\n\n7. 命令行输入 `cat seed.config` 查看这个文件，也可以用文本编辑器打开\n\n8. 复制 seed.config 文件内所有内容到 configs 目录对应文件中覆盖就可以了\n\n   **如果看不懂编译界面可以参考 YouTube 视频：[软路由固件 OpenWrt 编译界面设置](https://www.youtube.com/watch?v=jEE_J6-4E3Y&list=WL&index=7)**\n</details>\n\n\n## 特别提示 [![](https://img.shields.io/badge/-个人免责声明-FFFFFF.svg)](#特别提示-)\n\n- **因精力有限不提供任何技术支持和教程等相关问题解答，不保证完全无 BUG！**\n\n- **本人不对任何人因使用本固件所遭受的任何理论或实际的损失承担责任！**\n\n- **本固件禁止用于任何商业用途，请务必严格遵守国家互联网使用相关法律规定！**\n\n\n## 鸣谢 [![](https://img.shields.io/badge/-跪谢各大佬-FFFFFF.svg)](#鸣谢-)\n| [ImmortalWrt](https://github.com/immortalwrt) | [coolsnowwolf](https://github.com/coolsnowwolf) | [P3TERX](https://github.com/P3TERX) | [Flippy](https://github.com/unifreq) |\n| :-------------: | :-------------: | :-------------: | :-------------: |\n| <img width=\"100\" src=\"https://avatars.githubusercontent.com/u/53193414\"/> | <img width=\"100\" src=\"https://avatars.githubusercontent.com/u/31687149\"/> | <img width=\"100\" src=\"https://avatars.githubusercontent.com/u/25927179\"/> | <img width=\"100\" src=\"https://avatars.githubusercontent.com/u/39355261\"/> |\n| [Ophub](https://github.com/ophub) | [SuLingGG](https://github.com/SuLingGG) | [QiuSimons](https://github.com/QiuSimons) | [IvanSolis1989](https://github.com/IvanSolis1989) |\n| <img width=\"100\" src=\"https://avatars.githubusercontent.com/u/68696949\"/> | <img width=\"100\" src=\"https://avatars.githubusercontent.com/u/22287562\"/> | <img width=\"100\" src=\"https://avatars.githubusercontent.com/u/45143996\"/> | <img width=\"100\" src=\"https://avatars.githubusercontent.com/u/44228691\"/> |\n\n\n<a href=\"#readme\">\n<img src=\"https://img.shields.io/badge/-返回顶部-FFFFFF.svg\" title=\"返回顶部\" align=\"right\"/>\n</a>\n"
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "diy-mini.sh",
          "type": "blob",
          "size": 6.3017578125,
          "content": "#!/bin/bash\n\n# 修改默认IP\n# sed -i 's/192.168.1.1/10.0.0.1/g' package/base-files/files/bin/config_generate\n\n# 更改默认 Shell 为 zsh\n# sed -i 's/\\/bin\\/ash/\\/usr\\/bin\\/zsh/g' package/base-files/files/etc/passwd\n\n# TTYD 免登录\n# sed -i 's|/bin/login|/bin/login -f root|g' feeds/packages/utils/ttyd/files/ttyd.config\n\n# 移除要替换的包\nrm -rf feeds/packages/net/mosdns\nrm -rf feeds/packages/net/msd_lite\nrm -rf feeds/packages/net/smartdns\nrm -rf feeds/luci/themes/luci-theme-argon\nrm -rf feeds/luci/applications/luci-app-mosdns\nrm -rf feeds/luci/applications/luci-app-netdata\n\n# Git稀疏克隆，只克隆指定目录到本地\nfunction git_sparse_clone() {\n  branch=\"$1\" repourl=\"$2\" && shift 2\n  git clone --depth=1 -b $branch --single-branch --filter=blob:none --sparse $repourl\n  repodir=$(echo $repourl | awk -F '/' '{print $(NF)}')\n  cd $repodir && git sparse-checkout set $@\n  mv -f $@ ../package\n  cd .. && rm -rf $repodir\n}\n\n# 添加额外插件\ngit clone --depth=1 https://github.com/kongfl888/luci-app-adguardhome package/luci-app-adguardhome\ngit clone --depth=1 https://github.com/Jason6111/luci-app-netdata package/luci-app-netdata\n# git_sparse_clone master https://github.com/syb999/openwrt-19.07.1 package/network/services/msd_lite\n\n# 科学上网插件\ngit clone --depth=1 -b main https://github.com/fw876/helloworld package/luci-app-ssr-plus\ngit clone --depth=1 https://github.com/xiaorouji/openwrt-passwall-packages package/openwrt-passwall\ngit clone --depth=1 https://github.com/xiaorouji/openwrt-passwall package/luci-app-passwall\ngit clone --depth=1 https://github.com/xiaorouji/openwrt-passwall2 package/luci-app-passwall2\ngit_sparse_clone master https://github.com/vernesong/OpenClash luci-app-openclash\n\n# Themes\ngit clone --depth=1 -b 18.06 https://github.com/kiddin9/luci-theme-edge package/luci-theme-edge\ngit clone --depth=1 -b 18.06 https://github.com/jerrykuku/luci-theme-argon package/luci-theme-argon\ngit clone --depth=1 https://github.com/jerrykuku/luci-app-argon-config package/luci-app-argon-config\ngit clone --depth=1 https://github.com/xiaoqingfengATGH/luci-theme-infinityfreedom package/luci-theme-infinityfreedom\ngit_sparse_clone main https://github.com/haiibo/packages luci-theme-opentomcat\n\n# 更改 Argon 主题背景\ncp -f $GITHUB_WORKSPACE/images/bg1.jpg package/luci-theme-argon/htdocs/luci-static/argon/img/bg1.jpg\n\n# 晶晨宝盒\ngit_sparse_clone main https://github.com/ophub/luci-app-amlogic luci-app-amlogic\nsed -i \"s|firmware_repo.*|firmware_repo 'https://github.com/haiibo/OpenWrt'|g\" package/luci-app-amlogic/root/etc/config/amlogic\n# sed -i \"s|kernel_path.*|kernel_path 'https://github.com/ophub/kernel'|g\" package/luci-app-amlogic/root/etc/config/amlogic\nsed -i \"s|ARMv8|ARMv8_MINI|g\" package/luci-app-amlogic/root/etc/config/amlogic\n\n# SmartDNS\ngit clone --depth=1 -b lede https://github.com/pymumu/luci-app-smartdns package/luci-app-smartdns\ngit clone --depth=1 https://github.com/pymumu/openwrt-smartdns package/smartdns\n\n# msd_lite\ngit clone --depth=1 https://github.com/ximiTech/luci-app-msd_lite package/luci-app-msd_lite\ngit clone --depth=1 https://github.com/ximiTech/msd_lite package/msd_lite\n\n# MosDNS\ngit clone --depth=1 https://github.com/sbwml/luci-app-mosdns package/luci-app-mosdns\n\n# Alist\ngit clone --depth=1 https://github.com/sbwml/luci-app-alist package/luci-app-alist\n\n# iStore\ngit_sparse_clone main https://github.com/linkease/istore-ui app-store-ui\ngit_sparse_clone main https://github.com/linkease/istore luci\n\n# 在线用户\ngit_sparse_clone main https://github.com/haiibo/packages luci-app-onliner\nsed -i '$i uci set nlbwmon.@nlbwmon[0].refresh_interval=2s' package/lean/default-settings/files/zzz-default-settings\nsed -i '$i uci commit nlbwmon' package/lean/default-settings/files/zzz-default-settings\nchmod 755 package/luci-app-onliner/root/usr/share/onliner/setnlbw.sh\n\n# x86 型号只显示 CPU 型号\nsed -i 's/${g}.*/${a}${b}${c}${d}${e}${f}${hydrid}/g' package/lean/autocore/files/x86/autocore\n\n# 修改本地时间格式\nsed -i 's/os.date()/os.date(\"%a %Y-%m-%d %H:%M:%S\")/g' package/lean/autocore/files/*/index.htm\n\n# 修改版本为编译日期\ndate_version=$(date +\"%y.%m.%d\")\norig_version=$(cat \"package/lean/default-settings/files/zzz-default-settings\" | grep DISTRIB_REVISION= | awk -F \"'\" '{print $2}')\nsed -i \"s/${orig_version}/R${date_version} by Haiibo/g\" package/lean/default-settings/files/zzz-default-settings\n\n# 修复 hostapd 报错\ncp -f $GITHUB_WORKSPACE/scripts/011-fix-mbo-modules-build.patch package/network/services/hostapd/patches/011-fix-mbo-modules-build.patch\n\n# 修复 armv8 设备 xfsprogs 报错\nsed -i 's/TARGET_CFLAGS.*/TARGET_CFLAGS += -DHAVE_MAP_SYNC -D_LARGEFILE64_SOURCE/g' feeds/packages/utils/xfsprogs/Makefile\n\n# 修改 Makefile\nfind package/*/ -maxdepth 2 -path \"*/Makefile\" | xargs -i sed -i 's/..\\/..\\/luci.mk/$(TOPDIR)\\/feeds\\/luci\\/luci.mk/g' {}\nfind package/*/ -maxdepth 2 -path \"*/Makefile\" | xargs -i sed -i 's/..\\/..\\/lang\\/golang\\/golang-package.mk/$(TOPDIR)\\/feeds\\/packages\\/lang\\/golang\\/golang-package.mk/g' {}\nfind package/*/ -maxdepth 2 -path \"*/Makefile\" | xargs -i sed -i 's/PKG_SOURCE_URL:=@GHREPO/PKG_SOURCE_URL:=https:\\/\\/github.com/g' {}\nfind package/*/ -maxdepth 2 -path \"*/Makefile\" | xargs -i sed -i 's/PKG_SOURCE_URL:=@GHCODELOAD/PKG_SOURCE_URL:=https:\\/\\/codeload.github.com/g' {}\n\n# 取消主题默认设置\nfind package/luci-theme-*/* -type f -name '*luci-theme-*' -print -exec sed -i '/set luci.main.mediaurlbase/d' {} \\;\n\n# 调整 Docker 到 服务 菜单\nsed -i 's/\"admin\"/\"admin\", \"services\"/g' feeds/luci/applications/luci-app-dockerman/luasrc/controller/*.lua\nsed -i 's/\"admin\"/\"admin\", \"services\"/g; s/admin\\//admin\\/services\\//g' feeds/luci/applications/luci-app-dockerman/luasrc/model/cbi/dockerman/*.lua\nsed -i 's/admin\\//admin\\/services\\//g' feeds/luci/applications/luci-app-dockerman/luasrc/view/dockerman/*.htm\nsed -i 's|admin\\\\|admin\\\\/services\\\\|g' feeds/luci/applications/luci-app-dockerman/luasrc/view/dockerman/container.htm\n\n# 调整 ZeroTier 到 服务 菜单\n# sed -i 's/vpn/services/g; s/VPN/Services/g' feeds/luci/applications/luci-app-zerotier/luasrc/controller/zerotier.lua\n# sed -i 's/vpn/services/g' feeds/luci/applications/luci-app-zerotier/luasrc/view/zerotier/zerotier_status.htm\n\n# 取消对 samba4 的菜单调整\n# sed -i '/samba4/s/^/#/' package/lean/default-settings/files/zzz-default-settings\n\n./scripts/feeds update -a\n./scripts/feeds install -a\n"
        },
        {
          "name": "diy-script.sh",
          "type": "blob",
          "size": 6.654296875,
          "content": "#!/bin/bash\n\n# 修改默认IP\n# sed -i 's/192.168.1.1/10.0.0.1/g' package/base-files/files/bin/config_generate\n\n# 更改默认 Shell 为 zsh\n# sed -i 's/\\/bin\\/ash/\\/usr\\/bin\\/zsh/g' package/base-files/files/etc/passwd\n\n# TTYD 免登录\n# sed -i 's|/bin/login|/bin/login -f root|g' feeds/packages/utils/ttyd/files/ttyd.config\n\n# 移除要替换的包\nrm -rf feeds/packages/net/mosdns\nrm -rf feeds/packages/net/msd_lite\nrm -rf feeds/packages/net/smartdns\nrm -rf feeds/luci/themes/luci-theme-argon\nrm -rf feeds/luci/themes/luci-theme-netgear\nrm -rf feeds/luci/applications/luci-app-mosdns\nrm -rf feeds/luci/applications/luci-app-netdata\nrm -rf feeds/luci/applications/luci-app-serverchan\n\n# Git稀疏克隆，只克隆指定目录到本地\nfunction git_sparse_clone() {\n  branch=\"$1\" repourl=\"$2\" && shift 2\n  git clone --depth=1 -b $branch --single-branch --filter=blob:none --sparse $repourl\n  repodir=$(echo $repourl | awk -F '/' '{print $(NF)}')\n  cd $repodir && git sparse-checkout set $@\n  mv -f $@ ../package\n  cd .. && rm -rf $repodir\n}\n\n# 添加额外插件\ngit clone --depth=1 https://github.com/kongfl888/luci-app-adguardhome package/luci-app-adguardhome\ngit clone --depth=1 -b openwrt-18.06 https://github.com/tty228/luci-app-wechatpush package/luci-app-serverchan\ngit clone --depth=1 https://github.com/ilxp/luci-app-ikoolproxy package/luci-app-ikoolproxy\ngit clone --depth=1 https://github.com/esirplayground/luci-app-poweroff package/luci-app-poweroff\ngit clone --depth=1 https://github.com/destan19/OpenAppFilter package/OpenAppFilter\ngit clone --depth=1 https://github.com/Jason6111/luci-app-netdata package/luci-app-netdata\ngit_sparse_clone main https://github.com/Lienol/openwrt-package luci-app-filebrowser luci-app-ssr-mudb-server\ngit_sparse_clone openwrt-18.06 https://github.com/immortalwrt/luci applications/luci-app-eqos\n# git_sparse_clone master https://github.com/syb999/openwrt-19.07.1 package/network/services/msd_lite\n\n# 科学上网插件\ngit clone --depth=1 -b main https://github.com/fw876/helloworld package/luci-app-ssr-plus\ngit clone --depth=1 https://github.com/xiaorouji/openwrt-passwall-packages package/openwrt-passwall\ngit clone --depth=1 https://github.com/xiaorouji/openwrt-passwall package/luci-app-passwall\ngit clone --depth=1 https://github.com/xiaorouji/openwrt-passwall2 package/luci-app-passwall2\ngit_sparse_clone master https://github.com/vernesong/OpenClash luci-app-openclash\n\n# Themes\ngit clone --depth=1 -b 18.06 https://github.com/kiddin9/luci-theme-edge package/luci-theme-edge\ngit clone --depth=1 -b 18.06 https://github.com/jerrykuku/luci-theme-argon package/luci-theme-argon\ngit clone --depth=1 https://github.com/jerrykuku/luci-app-argon-config package/luci-app-argon-config\ngit clone --depth=1 https://github.com/xiaoqingfengATGH/luci-theme-infinityfreedom package/luci-theme-infinityfreedom\ngit_sparse_clone main https://github.com/haiibo/packages luci-theme-atmaterial luci-theme-opentomcat luci-theme-netgear\n\n# 更改 Argon 主题背景\ncp -f $GITHUB_WORKSPACE/images/bg1.jpg package/luci-theme-argon/htdocs/luci-static/argon/img/bg1.jpg\n\n# 晶晨宝盒\ngit_sparse_clone main https://github.com/ophub/luci-app-amlogic luci-app-amlogic\nsed -i \"s|firmware_repo.*|firmware_repo 'https://github.com/haiibo/OpenWrt'|g\" package/luci-app-amlogic/root/etc/config/amlogic\n# sed -i \"s|kernel_path.*|kernel_path 'https://github.com/ophub/kernel'|g\" package/luci-app-amlogic/root/etc/config/amlogic\nsed -i \"s|ARMv8|ARMv8_PLUS|g\" package/luci-app-amlogic/root/etc/config/amlogic\n\n# SmartDNS\ngit clone --depth=1 -b lede https://github.com/pymumu/luci-app-smartdns package/luci-app-smartdns\ngit clone --depth=1 https://github.com/pymumu/openwrt-smartdns package/smartdns\n\n# msd_lite\ngit clone --depth=1 https://github.com/ximiTech/luci-app-msd_lite package/luci-app-msd_lite\ngit clone --depth=1 https://github.com/ximiTech/msd_lite package/msd_lite\n\n# MosDNS\ngit clone --depth=1 https://github.com/sbwml/luci-app-mosdns package/luci-app-mosdns\n\n# Alist\ngit clone --depth=1 https://github.com/sbwml/luci-app-alist package/luci-app-alist\n\n# DDNS.to\ngit_sparse_clone main https://github.com/linkease/nas-packages-luci luci/luci-app-ddnsto\ngit_sparse_clone master https://github.com/linkease/nas-packages network/services/ddnsto\n\n# iStore\ngit_sparse_clone main https://github.com/linkease/istore-ui app-store-ui\ngit_sparse_clone main https://github.com/linkease/istore luci\n\n# 在线用户\ngit_sparse_clone main https://github.com/haiibo/packages luci-app-onliner\nsed -i '$i uci set nlbwmon.@nlbwmon[0].refresh_interval=2s' package/lean/default-settings/files/zzz-default-settings\nsed -i '$i uci commit nlbwmon' package/lean/default-settings/files/zzz-default-settings\nchmod 755 package/luci-app-onliner/root/usr/share/onliner/setnlbw.sh\n\n# x86 型号只显示 CPU 型号\nsed -i 's/${g}.*/${a}${b}${c}${d}${e}${f}${hydrid}/g' package/lean/autocore/files/x86/autocore\n\n# 修改本地时间格式\nsed -i 's/os.date()/os.date(\"%a %Y-%m-%d %H:%M:%S\")/g' package/lean/autocore/files/*/index.htm\n\n# 修改版本为编译日期\ndate_version=$(date +\"%y.%m.%d\")\norig_version=$(cat \"package/lean/default-settings/files/zzz-default-settings\" | grep DISTRIB_REVISION= | awk -F \"'\" '{print $2}')\nsed -i \"s/${orig_version}/R${date_version} by Haiibo/g\" package/lean/default-settings/files/zzz-default-settings\n\n# 修复 hostapd 报错\ncp -f $GITHUB_WORKSPACE/scripts/011-fix-mbo-modules-build.patch package/network/services/hostapd/patches/011-fix-mbo-modules-build.patch\n\n# 修复 armv8 设备 xfsprogs 报错\nsed -i 's/TARGET_CFLAGS.*/TARGET_CFLAGS += -DHAVE_MAP_SYNC -D_LARGEFILE64_SOURCE/g' feeds/packages/utils/xfsprogs/Makefile\n\n# 修改 Makefile\nfind package/*/ -maxdepth 2 -path \"*/Makefile\" | xargs -i sed -i 's/..\\/..\\/luci.mk/$(TOPDIR)\\/feeds\\/luci\\/luci.mk/g' {}\nfind package/*/ -maxdepth 2 -path \"*/Makefile\" | xargs -i sed -i 's/..\\/..\\/lang\\/golang\\/golang-package.mk/$(TOPDIR)\\/feeds\\/packages\\/lang\\/golang\\/golang-package.mk/g' {}\nfind package/*/ -maxdepth 2 -path \"*/Makefile\" | xargs -i sed -i 's/PKG_SOURCE_URL:=@GHREPO/PKG_SOURCE_URL:=https:\\/\\/github.com/g' {}\nfind package/*/ -maxdepth 2 -path \"*/Makefile\" | xargs -i sed -i 's/PKG_SOURCE_URL:=@GHCODELOAD/PKG_SOURCE_URL:=https:\\/\\/codeload.github.com/g' {}\n\n# 取消主题默认设置\nfind package/luci-theme-*/* -type f -name '*luci-theme-*' -print -exec sed -i '/set luci.main.mediaurlbase/d' {} \\;\n\n# 调整 V2ray服务器 到 VPN 菜单\n# sed -i 's/services/vpn/g' feeds/luci/applications/luci-app-v2ray-server/luasrc/controller/*.lua\n# sed -i 's/services/vpn/g' feeds/luci/applications/luci-app-v2ray-server/luasrc/model/cbi/v2ray_server/*.lua\n# sed -i 's/services/vpn/g' feeds/luci/applications/luci-app-v2ray-server/luasrc/view/v2ray_server/*.htm\n\n./scripts/feeds update -a\n./scripts/feeds install -a\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}