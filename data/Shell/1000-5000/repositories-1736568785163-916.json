{
  "metadata": {
    "timestamp": 1736568785163,
    "page": 916,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkxOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "AlexPresso/VideoStation-FFMPEG-Patcher",
      "stars": 1083,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0068359375,
          "content": "/.idea\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7373046875,
          "content": "# VideoStation-FFMPEG-Patcher\n\n<p align=\"center\">\n  <img src=\"https://github.com/AlexPresso/VideoStation-FFMPEG-Patcher/blob/main/banner.png?raw=true\" height=200px alt=\"Banner\">\n</p>\n\nThis patcher is designed to continue the work of [Benjamin Poncet](https://github.com/BenjaminPoncet), to enable **DTS**, **EAC3** and **TrueHD** support to Synology VideoStation, by replacing the original ffmpeg and gstreamer files by a wrapper using SynoCommunity packages.\n\nHuge thanks to [Benjamin Poncet](https://github.com/BenjaminPoncet), [Vincent Fortier](https://github.com/th0ma7), [SynoCommunity](https://github.com/SynoCommunity) and all contributors.\n\n### Also want to patch MediaServer ? [there you go](https://github.com/AlexPresso/mediaserver-ffmpeg-patcher)\n\n## Dependencies\n- DSM 6.2.2-24922 Update 4 (and above)\n- Video Station 2.4.6-1594 (and above)\n- SynoCommunity ffmpeg 4.x.x, ffmpeg 5.x.x, ffmpeg 6.x.x or ffmpeg 7.x.x ([help](https://synocommunity.com/#easy-install))\n\n## Supported scenarios\n- **[DTS or EAC3 or TrueHD] + [Any non HEVC standard video format]**: ✅\n- **[no DTS, no EAC3, no TrueHD] + [HEVC]**: ✅\n- **[DTS or EAC3 or TrueHD] + [HEVC]**: ✅ (credits to @nap-liu)\n\n## Instructions\n- Check that you meet the required [dependencies](https://github.com/AlexPresso/VideoStation-FFMPEG-Patcher#dependencies)\n- Install SynoCommunity ffmpeg ([help](https://synocommunity.com/#easy-install))\n- If you plan to play HEVC / AAC videos, install Advanced Media Extensions and license it using your Synology account inside the app\n- Connect to your NAS using SSH (admin user required) ([help](https://www.synology.com/en-global/knowledgebase/DSM/tutorial/General_Setup/How_to_login_to_DSM_with_root_permission_via_SSH_Telnet))\n- Use the command `sudo -i` to switch to root user\n- Use the [following](https://github.com/AlexPresso/VideoStation-FFMPEG-Patcher#usage) command (Basic command) to execute the patch\n  - Note : Basic command uses **ffmpeg4** by default, if you want to use a different ffmpeg version (i.e. **ffmpeg5**, **ffmpeg6** or **ffmpeg7**), please check the command [flags](https://github.com/AlexPresso/VideoStation-FFMPEG-Patcher#usage).\n- You'll have to re-run the patcher everytime you update VideoStation, Advanced Media Extensions and DSM\n\n## Update procedure\nTo update the wrapper, just unpatch and repatch using the following commands:\n- Unpatch: `curl https://raw.githubusercontent.com/AlexPresso/VideoStation-FFMPEG-Patcher/main/patcher.sh | bash -s -- -a unpatch`\n- Patch: `curl https://raw.githubusercontent.com/AlexPresso/VideoStation-FFMPEG-Patcher/main/patcher.sh | bash`\n\n## Usage\nBasic command:  \n`curl https://raw.githubusercontent.com/AlexPresso/VideoStation-FFMPEG-Patcher/main/patcher.sh | bash`   \nWith options:  \n`curl https://raw.githubusercontent.com/AlexPresso/VideoStation-FFMPEG-Patcher/main/patcher.sh | bash -s -- <flags>`\n\n| Flags | Required | Description                                                                               | Default                           |\n|-------|----------|-------------------------------------------------------------------------------------------|-----------------------------------|\n| -a    | No       | Action flag: choose between `patch` or `unpatch` ; example: `-a patch`                    | patch                             |\n| -b    | No       | Branch flag: allows you to choose the wrapper branch to use ; example `-b main`           | main                              |                                                  \n| -p    | No       | Proxy flag: allows you to use a proxy to connect to github ; example `-p http://my-proxy` | https://raw.githubusercontent.com |\n| -v    | No       | FFMpeg version flag: allows you to choose desired ffmpeg version ; example `-v 5`         | `4`                               |\n"
        },
        {
          "name": "banner.png",
          "type": "blob",
          "size": 26.734375,
          "content": null
        },
        {
          "name": "issue-report.sh",
          "type": "blob",
          "size": 2.7314453125,
          "content": "#!/bin/bash\n\n###############################\n# VARS + EXTERNAL FILES\n###############################\n\nffmpeg_version=ffmpeg\n\n# shellcheck source=/.github/workflows/mock/VERSION\nsource \"/etc/VERSION\"\n\ndsm_version=\"$productversion $buildnumber-$smallfixnumber\"\nvs_path=/var/packages/VideoStation\ncp_path=/var/packages/CodecPack\n\n###############################\n# UTILS\n###############################\n\nfunction root_check() {\n  if [[ \"$EUID\" -ne 0 ]]; then\n    echo \"This tool needs root access (please run 'sudo -i' before proceeding).\"\n    exit 1\n  fi\n}\n\n################################\n# ENTRYPOINT\n################################\n\nroot_check\n\necho \"\n================ ISSUE REPORT TOOL ================\nhttps://github.com/AlexPresso/VideoStation-FFMPEG-Patcher\n\nSystem Details.....................................\n  DSM Version: $dsm_version\n  Arch details: $(uname -a)\n\nPackage Details....................................\n  VideoStation version: $(synopkg version VideoStation || echo \"Not installed\")\n  FFMPEG version ($ffmpeg_version): $(synopkg version \"${ffmpeg_version}\" || echo \"Not installed\")\n  CodecPack version: $(synopkg version CodecPack || echo \"Not installed\")\n\nPatch Details......................................\n  Is patched ? $([ -f \"$vs_path/target/lib/libsynovte.so.orig\" ] && echo \"yes\" || echo \"no\")\n  Has gstreamer ? $([ -f \"$vs_path/target/bin/gst-launch-1.0\" ] && echo \"yes\" || echo \"no\")\n\nFFMPEG VAAPI.......................................\n  $(\"/var/packages/${ffmpeg_version}/target/bin/vainfo\" || echo \"No VAAPI Support\")\n\nCodecPack Details..................................\n  Has AAC ? $([ -f \"$cp_path/target/pack/HAS_AAC\" ] && echo \"yes\" || echo \"no\")\n  Has HEVC ? $([ -f \"$cp_path/target/pack/HAS_HEVC\" ] && echo \"yes\" || echo \"no\")\n\"\n\necho \"CodecPack target/bin content.......................\"\nls -l \"$cp_path/target/bin\"\necho \"\"\necho \"CodecPack target/pack/bin content..................\"\nls -l \"$cp_path/target/pack/bin\"\necho \"\"\necho \"CodecPack status...................................\"\ncat \"$cp_path/var/codec_requirements.json\" || echo \"file not exists\"\n\necho \"\"\n\necho \"\"\necho \"GSTInspect last stderr logs........................\"\ntail -22 /tmp/gstinspect*.stderr\necho \"\"\necho \"GSTInspect stderr.prev logs........................\"\ncat /tmp/gstinspect*.stderr.prev\necho \"\"\necho \"GSTLaunch last stderr logs.........................\"\ntail -22 /tmp/gstlaunch*.stderr\necho \"\"\necho \"GSTLaunch stderr.prev logs.........................\"\ncat /tmp/gstlaunch*.stderr.prev\n\necho \"\"\necho \"FFMPEG head logs...................................\"\nhead /tmp/ffmpeg*.stderr\necho \"\"\necho \"FFMPEG last stderr logs............................\"\ntail -22 /tmp/ffmpeg*.stderr\n\necho \"\"\necho \"FFMPEG prev logs...................................\"\ncat /tmp/ffmpeg*.stderr.prev\necho \"\"\n"
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "motd.txt",
          "type": "blob",
          "size": 0.322265625,
          "content": "A new version of the wrapper was deployed (v2.6) fixing an issue with offline transcoding.\nYou can find the changelog here: https://github.com/AlexPresso/VideoStation-FFMPEG-Patcher/releases/tag/2.6\n\n/!\\ PLEASE FOLLOW THE UPDATE PROCEDURE IN THE CHANGELOG TO UPDATE /!\\\n\nAs always, please let me know of any issue you could have.\n"
        },
        {
          "name": "patcher.sh",
          "type": "blob",
          "size": 9.8642578125,
          "content": "#!/bin/bash\n\n###############################\n# VARS\n###############################\n\n# shellcheck source=/.github/workflows/mock/VERSION\nsource \"/etc/VERSION\"\ndsm_version=\"$productversion $buildnumber-$smallfixnumber\"\nrepo_base_url=\"https://raw.githubusercontent.com/AlexPresso/VideoStation-FFMPEG-Patcher\"\naction=\"patch\"\nbranch=\"main\"\nffmpegversion=\"\"\nwrappers=(\n  \"ffmpeg\"\n  \"gst-launch-1.0\"\n  \"gst-inspect-1.0\"\n)\n\nvs_base_path=/var/packages/VideoStation\nvs_path=\"$vs_base_path/target\"\nlibsynovte_path=\"$vs_path/lib/libsynovte.so\"\ncp_base_path=/var/packages/CodecPack\ncp_path=\"$cp_base_path/target\"\ncp_bin_path=\"$cp_path/bin\"\ncp_to_patch=(\n  \"ffmpeg41:ffmpeg\"\n  \"ffmpeg27:ffmpeg\"\n  \"ffmpeg33:ffmpeg\"\n  \"gst-launch-1.0:gst-launch-1.0\"\n  \"gst-inspect-1.0:gst-inspect-1.0\"\n)\n\ngstreamer_plugins=(\n  \"libgstdtsdec\"\n  \"libgstlibav\"\n)\ngstreamer_libs=(\n  \"libavcodec-ffmpeg.so.56\"\n  \"libavformat-ffmpeg.so.56\"\n  \"libavutil-ffmpeg.so.54\"\n  \"libbluray.so.1\"\n  \"libdca.so.0\"\n  \"libgme.so.0\"\n  \"libgnutls-deb0.so.28\"\n  \"libgsm.so.1\"\n  \"libhogweed.so.4\"\n  \"libmodplug.so.1\"\n  \"libnettle.so.6\"\n  \"libnuma.so.1\"\n  \"libopenjpeg.so.5\"\n  \"libopenjpeg_JPWL.so.5\"\n  \"libopus.so.0\"\n  \"liborc-0.4.so.0\"\n  \"libp11-kit.so.0\"\n  \"libpng12.so.0\"\n  \"librtmp.so.1\"\n  \"libschroedinger-1.0.so.0\"\n  \"libshine.so.3\"\n  \"libsoxr.so.0\"\n  \"libspeex.so.1\"\n  \"libssh-gcrypt.so.4\"\n  \"libssh-gcrypt_threads.so.4\"\n  \"libswresample-ffmpeg.so.1\"\n  \"libtasn1.so.6\"\n  \"libtheora.so.0\"\n  \"libtheoradec.so.1\"\n  \"libtheoraenc.so.1\"\n  \"libtwolame.so.0\"\n  \"libva.so.1\"\n  \"libvpx.so.2\"\n  \"libvpx.so.2.0\"\n  \"libwavpack.so.1\"\n  \"libwebp.so.5\"\n  \"libx264.so.146\"\n  \"libx265.so.59\"\n  \"libxvidcore.so.4\"\n  \"libzvbi.so.0\"\n  \"libzvbi-chains.so.0\"\n  \"dri/dummy_drv_video.so\"\n  \"x264-10bit/libx264.so.146\"\n  \"x265-10bit/libx265.so.59\"\n)\n\n###############################\n# UTILS\n###############################\n\nlog() {\n  printf \"\\e[0;37m[%s] \\e[0m[%s] %b\" \"$(date '+%Y-%m-%d %H:%M:%S')\" \"$1\" \"$2$3\"\n}\ninfo() {\n  log \"INFO\" \"\\e[0m\" \"$1\\n\"\n}\nerror() {\n  log \"ERROR\" \"\\e[0;31m\" \"$1\\n\"\n}\nsuccess() {\n  log \"SUCCESS\" \"\\e[0;32m\" \"$1\\n\"\n}\n\nwelcome_motd() {\n  info \"ffmpeg-patcher\"\n\n  download \"motd\" \"$repo_base_url/$branch/motd.txt\" /tmp/tmp.wget\n  log \"Message of the day\" \"\\033[1;33m\" \"\\n\\n$(cat /tmp/tmp.wget)\\n\\n\"\n\n  sleep 3\n}\n\nroot_check() {\n  if [[ \"$EUID\" -ne 0 ]]; then\n    error \"This tool needs root access (please run 'sudo -i' before proceeding).\"\n    exit 1\n  fi\n}\n\ncheck_dependencies() {\n  missingDeps=0\n\n  for dependency in \"${dependencies[@]}\"; do\n    if [[ ! -d \"/var/packages/$dependency\" ]]; then\n      error \"Missing $dependency package, please install it and re-run the patcher.\"\n      missingDeps=1\n    fi\n  done\n\n  if [[ $missingDeps -eq 1 ]]; then\n    exit 1\n  fi\n}\n\nclear_cache() {\n  if [[ -d \"$cp_base_path/etc/gstreamer-1.0\" ]]; then\n    info \"Clearing CodecPack gstreamer cache...\"\n    rm -f \"$cp_base_path/etc/gstreamer-1.0/registry.*.bin\"\n  fi\n\n  if [[ -d \"$vs_base_path/etc/gstreamer-1.0\" ]]; then\n    info \"Clearing VideoStation gstreamer cache...\"\n    rm -f \"$vs_base_path/etc/gstreamer-1.0/registry.*.bin\"\n  fi\n}\n\nclean() {\n  info \"Cleaning orphan files...\"\n\n  rm -f /tmp/tmp.wget\n  rm -f /tmp/ffmpeg.log\n  rm -f /tmp/ffmpeg*.stderr\n  rm -f /tmp/ffmpeg*.stderr.prev\n  rm -f /tmp/gstreamer.log\n  rm -f /tmp/gst*.stderr\n  rm -f /tmp/gst*.stderr.prev\n}\n\ndownload() {\n  log \"INFO\" \"\\e[0m\" \"Downloading $1... \"\n\n  wget -q -O - \"$2\" > /tmp/temp.wget\n  downloadStatus=$?\n\n  if [[ $downloadStatus == 0 ]]; then\n    mv -f /tmp/temp.wget \"$3\"\n    printf \"\\e[0;32mDone\\n\"\n  else\n    printf \"\\e[0;31mError\\n\"\n    error \"An error occurred while downloading $2. Rolling back changes...\"\n    unpatch\n\n    error \"An error occurred while downloading $2, every changes were rolled back.\"\n    error \"Please check your internet connection / GithubStatus. If you think this is an error, please file an issue to the repository.\"\n    exit 1\n  fi\n}\n\n################################\n# PATCH PROCEDURES\n################################\n\npatch() {\n  check_dependencies\n\n  info \"====== Patching procedure (branch: $branch) ======\"\n\n  if [[ -f \"$vs_path/lib/libsynovte.so.orig\" ]]; then\n    error \"You're trying to patch over an already patched VideoStation, if that's really what you want to do, please unpatch before patching again.\"\n    exit 1\n  fi\n\n  for filename in \"${wrappers[@]}\"; do\n    if [[ -f \"$vs_path/bin/$filename\" ]]; then\n      info \"Saving current $filename as $filename.orig\"\n      mv -n \"$vs_path/bin/$filename\" \"$vs_path/bin/$filename.orig\"\n\n      download \"$filename.sh\" \"$repo_base_url/$branch/wrappers/$filename.sh\" \"$vs_path/bin/$filename\"\n      chown root:VideoStation \"$vs_path/bin/$filename\"\n      chmod 750 \"$vs_path/bin/$filename\"\n      chmod u+s \"$vs_path/bin/$filename\"\n\n      sed -i -e \"s/@package_name@/VideoStation/\" \"$vs_path/bin/$filename\"\n      sed -i -e \"s/@ffmpeg_version@/ffmpeg$ffmpegversion/\" \"$vs_path/bin/$filename\"\n    fi\n  done\n\n  if [[ -d $cp_bin_path ]]; then\n    for file in \"${cp_to_patch[@]}\"; do\n      filename=\"${file%%:*}\"\n      target=\"${file##*:}\"\n\n      if [[ -f \"$cp_bin_path/$filename\" ]]; then\n        info \"Patching CodecPack's $filename\"\n\n        mv -n \"$cp_bin_path/$filename\" \"$cp_bin_path/$filename.orig\"\n        download \"$filename.sh\" \"$repo_base_url/$branch/wrappers/$target.sh\" \"$cp_bin_path/$filename\"\n        chmod 750 \"$cp_bin_path/$filename\"\n        chmod u+s \"$cp_bin_path/$filename\"\n\n        sed -i -e \"s/@package_name@/CodecPack/\" \"$cp_bin_path/$filename\"\n        sed -i -e \"s/@ffmpeg_version@/ffmpeg$ffmpegversion/\" \"$cp_bin_path/$filename\"\n      fi\n    done\n\n    if [[ -d \"$cp_path/lib/gstreamer\" ]]; then\n      gst_lib_path=\"$cp_path/lib/gstreamer/patch\"\n      gst_plugin_path=\"$cp_path/lib/gstreamer/gstreamer-1.0/patch\"\n\n      info \"Downloading CodecPack's gstreamer plugins...\"\n\n      mkdir \"$gst_plugin_path\"\n      for plugin in \"${gstreamer_plugins[@]}\"; do\n        download \"Gstreamer plugin: $plugin\" \"$repo_base_url/$branch/plugins/$plugin.so\" \"$gst_plugin_path/$plugin.so\"\n      done\n\n      mkdir \"$gst_lib_path\"\n      mkdir -p \"$gst_lib_path/dri\"\n      mkdir -p \"$gst_lib_path/x264-10bit\"\n      mkdir -p \"$gst_lib_path/x265-10bit\"\n\n      for lib in \"${gstreamer_libs[@]}\"; do\n        download \"Gstreamer library: $lib\" \"$repo_base_url/$branch/libs/$lib\" \"$gst_lib_path/$lib\"\n      done\n    fi\n  fi\n\n  if [[ -f \"$vs_path/bin/gst-launch-1.0\" ]]; then\n    gst_lib_path=\"$vs_path/lib/gstreamer/patch\"\n    gst_plugin_path=\"$vs_path/lib/gstreamer/gstreamer-1.0/patch\"\n\n    info \"Downloading gstreamer plugins...\"\n\n    mkdir \"$gst_plugin_path\"\n    for plugin in \"${gstreamer_plugins[@]}\"; do\n      download \"Gstreamer plugin: $plugin\" \"$repo_base_url/$branch/plugins/$plugin.so\" \"$gst_plugin_path/$plugin.so\"\n    done\n\n    mkdir \"$gst_lib_path\"\n    mkdir -p \"$gst_lib_path/dri\"\n    mkdir -p \"$gst_lib_path/x264-10bit\"\n    mkdir -p \"$gst_lib_path/x265-10bit\"\n\n    for lib in \"${gstreamer_libs[@]}\"; do\n      download \"Gstreamer library: $lib\" \"$repo_base_url/$branch/libs/$lib\" \"$gst_lib_path/$lib\"\n    done\n\n    info \"Saving current GSTOmx configuration...\"\n    mv -n \"$vs_path/etc/gstomx.conf\" \"$vs_path/etc/gstomx.conf.orig\"\n\n    info \"Injecting GSTOmx configuration...\"\n    cp -n \"$cp_path/etc/gstomx.conf\" \"$vs_path/etc/gstomx.conf\"\n  fi\n\n  info \"Saving current libsynovte.so as libsynovte.so.orig\"\n  cp -n \"$libsynovte_path\" \"$libsynovte_path.orig\"\n  chown VideoStation:VideoStation \"$libsynovte_path.orig\"\n\n  info \"Enabling eac3, dts and truehd\"\n  sed -i -e 's/eac3/3cae/' -e 's/dts/std/' -e 's/truehd/dheurt/' \"$libsynovte_path\"\n\n  clear_cache\n  clean\n\n  success \"Done patching, you can now enjoy your movies ;) (please add a star to the repo if it worked for you)\"\n}\n\nunpatch() {\n  info \"====== Unpatch procedure ======\"\n\n  if [[ -f \"$libsynovte_path.orig\" ]]; then\n    info \"Restoring libsynovte.so\"\n    mv -T -f \"$libsynovte_path.orig\" \"$libsynovte_path\"\n  else\n    info \"libsynovte.so was not patched, keeping actual file.\"\n  fi\n\n  find \"$vs_path/bin\" -type f -name \"*.orig\" | while read -r filename; do\n    info \"Restoring VideoStation's $filename\"\n    mv -T -f \"$filename\" \"${filename::-5}\"\n  done\n\n  if [[ -d $cp_bin_path ]]; then\n    for file in \"${cp_to_patch[@]}\"; do\n      filename=\"${file%%:*}\"\n      target=\"${file##*:}\"\n\n      rm -f \"$cp_bin_path/$target\"\n\n      if [[ -f  \"$cp_bin_path/$filename.orig\" ]]; then\n        info \"Restoring CodecPack's $filename\"\n        mv -T -f \"$cp_bin_path/$filename.orig\" \"$cp_bin_path/$filename\"\n      fi\n    done\n\n    if [[ -d \"$cp_path/lib/gstreamer\" ]]; then\n      info \"Removing CodecPack gstreamer's patched libraries and plugins\"\n      rm -rf \"$cp_path/lib/gstreamer/patch\"\n      rm -rf \"$cp_path/lib/gstreamer/gstreamer-1.0/patch\"\n    fi\n  fi\n\n  if [[ -f \"$vs_path/bin/gst-launch-1.0\" ]]; then\n    info \"Removing VideoStation gstreamer's patched libraries and plugins\"\n    rm -rf \"$vs_path/lib/gstreamer/patch\"\n    rm -rf \"$vs_path/lib/gstreamer/gstreamer-1.0/patch\"\n\n    if [[ -f \"$vs_path/etc/gstomx.conf.orig\" ]]; then\n      info \"Restoring GSTOmx configuration...\"\n      mv -T -f \"$vs_path/etc/gstomx.conf.orig\" \"$vs_path/etc/gstomx.conf\"\n    else\n      info \"GSTOmx configuration was not patched, keeping actual file.\"\n    fi\n  fi\n\n  clear_cache\n  clean\n\n  success \"Unpatch complete\"\n}\n\n################################\n# ENTRYPOINT\n################################\nroot_check\n\nwhile getopts a:b:p:v: flag; do\n  case \"${flag}\" in\n    a) action=${OPTARG};;\n    b) branch=${OPTARG};;\n    p) repo_base_url=\"${OPTARG}/AlexPresso/VideoStation-FFMPEG-Patcher\";;\n    v) ffmpegversion=\"${OPTARG}\";;\n    *) echo \"usage: $0 [-a patch|unpatch] [-b branch] [-p http://proxy] [-v ffmpegVersion]\" >&2; exit 1;;\n  esac\ndone\n\nif [[ \"$ffmpegversion\" == \"4\" ]]; then\n  ffmpegversion=\"\"\nfi\n\ndependencies=(\"VideoStation\" \"ffmpeg$ffmpegversion\")\n\nwelcome_motd\n\ninfo \"You're running DSM $dsm_version\"\nif [[ -d /var/packages/CodecPack/target/pack ]]; then\n  cp_path=\"$cp_base_path/target/pack\"\n  cp_bin_path=\"$cp_path/bin\"\n  info \"Tuned script for DSM $dsm_version\"\nfi\n\ncase \"$action\" in\n  unpatch) unpatch;;\n  patch) patch;;\nesac\n\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "wrappers",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}