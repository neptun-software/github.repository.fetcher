{
  "metadata": {
    "timestamp": 1736568382734,
    "page": 323,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jimeh/git-aware-prompt",
      "stars": 2160,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 6.400390625,
          "content": "CC0 1.0 Universal\n\nStatement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator and\nsubsequent owner(s) (each and all, an \"owner\") of an original work of\nauthorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for the\npurpose of contributing to a commons of creative, cultural and scientific\nworks (\"Commons\") that the public can reliably and without fear of later\nclaims of infringement build upon, modify, incorporate in other works, reuse\nand redistribute as freely as possible in any form whatsoever and for any\npurposes, including without limitation commercial purposes. These owners may\ncontribute to the Commons to promote the ideal of a free culture and the\nfurther production of creative, cultural and scientific works, or to gain\nreputation or greater distribution for their Work in part through the use and\nefforts of others.\n\nFor these and/or other purposes and motivations, and without any expectation\nof additional consideration or compensation, the person associating CC0 with a\nWork (the \"Affirmer\"), to the extent that he or she is an owner of Copyright\nand Related Rights in the Work, voluntarily elects to apply CC0 to the Work\nand publicly distribute the Work under its terms, with knowledge of his or her\nCopyright and Related Rights in the Work and the meaning and intended legal\neffect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\nprotected by copyright and related or neighboring rights (\"Copyright and\nRelated Rights\"). Copyright and Related Rights include, but are not limited\nto, the following:\n\n  i. the right to reproduce, adapt, distribute, perform, display, communicate,\n  and translate a Work;\n\n  ii. moral rights retained by the original author(s) and/or performer(s);\n\n  iii. publicity and privacy rights pertaining to a person's image or likeness\n  depicted in a Work;\n\n  iv. rights protecting against unfair competition in regards to a Work,\n  subject to the limitations in paragraph 4(a), below;\n\n  v. rights protecting the extraction, dissemination, use and reuse of data in\n  a Work;\n\n  vi. database rights (such as those arising under Directive 96/9/EC of the\n  European Parliament and of the Council of 11 March 1996 on the legal\n  protection of databases, and under any national implementation thereof,\n  including any amended or successor version of such directive); and\n\n  vii. other similar, equivalent or corresponding rights throughout the world\n  based on applicable law or treaty, and any national implementations thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention of,\napplicable law, Affirmer hereby overtly, fully, permanently, irrevocably and\nunconditionally waives, abandons, and surrenders all of Affirmer's Copyright\nand Related Rights and associated claims and causes of action, whether now\nknown or unknown (including existing as well as future claims and causes of\naction), in the Work (i) in all territories worldwide, (ii) for the maximum\nduration provided by applicable law or treaty (including future time\nextensions), (iii) in any current or future medium and for any number of\ncopies, and (iv) for any purpose whatsoever, including without limitation\ncommercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes\nthe Waiver for the benefit of each member of the public at large and to the\ndetriment of Affirmer's heirs and successors, fully intending that such Waiver\nshall not be subject to revocation, rescission, cancellation, termination, or\nany other legal or equitable action to disrupt the quiet enjoyment of the Work\nby the public as contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason be\njudged legally invalid or ineffective under applicable law, then the Waiver\nshall be preserved to the maximum extent permitted taking into account\nAffirmer's express Statement of Purpose. In addition, to the extent the Waiver\nis so judged Affirmer hereby grants to each affected person a royalty-free,\nnon transferable, non sublicensable, non exclusive, irrevocable and\nunconditional license to exercise Affirmer's Copyright and Related Rights in\nthe Work (i) in all territories worldwide, (ii) for the maximum duration\nprovided by applicable law or treaty (including future time extensions), (iii)\nin any current or future medium and for any number of copies, and (iv) for any\npurpose whatsoever, including without limitation commercial, advertising or\npromotional purposes (the \"License\"). The License shall be deemed effective as\nof the date CC0 was applied by Affirmer to the Work. Should any part of the\nLicense for any reason be judged legally invalid or ineffective under\napplicable law, such partial invalidity or ineffectiveness shall not\ninvalidate the remainder of the License, and in such case Affirmer hereby\naffirms that he or she will not (i) exercise any of his or her remaining\nCopyright and Related Rights in the Work or (ii) assert any associated claims\nand causes of action with respect to the Work, in either case contrary to\nAffirmer's express Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\n  a. No trademark or patent rights held by Affirmer are waived, abandoned,\n  surrendered, licensed or otherwise affected by this document.\n\n  b. Affirmer offers the Work as-is and makes no representations or warranties\n  of any kind concerning the Work, express, implied, statutory or otherwise,\n  including without limitation warranties of title, merchantability, fitness\n  for a particular purpose, non infringement, or the absence of latent or\n  other defects, accuracy, or the present or absence of errors, whether or not\n  discoverable, all to the greatest extent permissible under applicable law.\n\n  c. Affirmer disclaims responsibility for clearing rights of other persons\n  that may apply to the Work or any use thereof, including without limitation\n  any person's Copyright and Related Rights in the Work. Further, Affirmer\n  disclaims responsibility for obtaining any necessary consents, permissions\n  or other rights required for any use of the Work.\n\n  d. Affirmer understands and acknowledges that Creative Commons is not a\n  party to this document and has no duty or obligation with respect to this\n  CC0 or use of the Work.\n\nFor more information, please see\n<http://creativecommons.org/publicdomain/zero/1.0/>"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.296875,
          "content": "# Git Aware Prompt\n\nWorking with Git and its great branching/merging features is\namazing. Constantly switching branches can be confusing though as you have to\nrun `git status` to see which branch you're currently on.\n\nThe solution to this is to have your terminal prompt display the current\nbranch. There's a [number][1] [of][2] [articles][3] [available][4] online\nabout how to achieve this. This project is an attempt to make an easy to\ninstall/configure solution.\n\n[1]: http://aaroncrane.co.uk/2009/03/git_branch_prompt/\n[2]: http://railstips.org/2009/2/2/bedazzle-your-bash-prompt-with-git-info\n[3]: http://techblog.floorplanner.com/2008/12/14/working-with-git-branches/\n[4]: http://www.intridea.com/2009/2/2/git-status-in-your-prompt\n\n\n## Overview\n\nIf you `cd` to a Git working directory, you will see the current Git branch\nname displayed in your terminal prompt. When you're not in a Git working\ndirectory, your prompt works like normal.\n\n![Git Branch in Prompt](https://raw.github.com/jimeh/git-aware-prompt/master/preview.png)\n\n\n## Installation\n\nClone the project to a `.bash` folder in your home directory:\n\n```bash\nmkdir ~/.bash\ncd ~/.bash\ngit clone https://github.com/jimeh/git-aware-prompt.git\n```\n\nEdit your `~/.bash_profile` or `~/.profile` or `~/.bashrc` (for Ubuntu) and add the following to the top:\n\n```bash\nexport GITAWAREPROMPT=~/.bash/git-aware-prompt\nsource \"${GITAWAREPROMPT}/main.sh\"\n```\n\n\n## Configuring\n\nOnce installed, there will be new `$git_branch` and `$git_dirty` variables\navailable to use in the `PS1` environment variable, along with a number of\ncolor helper variables which you can see a list of in [colors.sh][].\n\n[colors.sh]: https://github.com/jimeh/git-aware-prompt/blob/master/colors.sh\n\nIf you want to know more about how to customize your prompt, I recommend\nthis article: [How to: Change / Setup bash custom prompt (PS1)][how-to]\n\n[how-to]: http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html\n\n\n### Suggested Prompts\n\nBelow are a few suggested prompt configurations. Simply paste the code at the\nend of the same file you pasted the installation code into earlier.\n\n\n#### Mac OS X\n\n```bash\nexport PS1=\"\\u@\\h \\W \\[\\$txtcyn\\]\\$git_branch\\[\\$txtred\\]\\$git_dirty\\[\\$txtrst\\]\\$ \"\n```\n\nOptionally, if you want a nice pretty prompt when using `sudo -s`, also add\nthis line:\n\n```bash\nexport SUDO_PS1=\"\\[$bakred\\]\\u@\\h\\[$txtrst\\] \\w\\$ \"\n```\n\n\n#### Ubuntu\n\nStandard:\n\n```bash\nexport PS1=\"\\${debian_chroot:+(\\$debian_chroot)}\\u@\\h:\\w \\[$txtcyn\\]\\$git_branch\\[$txtred\\]\\$git_dirty\\[$txtrst\\]\\$ \"\n```\n\nColorized:\n\n```bash\nexport PS1=\"\\${debian_chroot:+(\\$debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\] \\[$txtcyn\\]\\$git_branch\\[$txtred\\]\\$git_dirty\\[$txtrst\\]\\$ \"\n```\n\n#### Windows\n\n```bash\nexport PS1=\"\\[\\033]0;$MSYSTEM:\\w\\007\\033[32m\\]\\u@\\h:\\[\\033[33m\\w \\[$txtcyn\\]\\$git_branch\\[$txtred\\]\\$git_dirty\\[$txtrst\\]\\033[0m\\]\\$ \"\n```\n\n## Updating\n\nAssuming you followed the default installation instructions and cloned this\nrepo to `~/.bash/git-aware-prompt`:\n\n```bash\ncd ~/.bash/git-aware-prompt\ngit pull\n```\n\n\n## Usage Tips\n\nTo view other user's tips, please check the\n[Usage Tips](https://github.com/jimeh/git-aware-prompt/wiki/Usage-Tips) wiki\npage. Or if you have tips of your own, feel free to add them :)\n\n\n## License\n\n[CC0 1.0 Universal](http://creativecommons.org/publicdomain/zero/1.0/)\n"
        },
        {
          "name": "colors.sh",
          "type": "blob",
          "size": 2.4990234375,
          "content": "# Regular\ntxtblk=\"$(tput setaf 0 2>/dev/null || echo '\\e[0;30m')\"  # Black\ntxtred=\"$(tput setaf 1 2>/dev/null || echo '\\e[0;31m')\"  # Red\ntxtgrn=\"$(tput setaf 2 2>/dev/null || echo '\\e[0;32m')\"  # Green\ntxtylw=\"$(tput setaf 3 2>/dev/null || echo '\\e[0;33m')\"  # Yellow\ntxtblu=\"$(tput setaf 4 2>/dev/null || echo '\\e[0;34m')\"  # Blue\ntxtpur=\"$(tput setaf 5 2>/dev/null || echo '\\e[0;35m')\"  # Purple\ntxtcyn=\"$(tput setaf 6 2>/dev/null || echo '\\e[0;36m')\"  # Cyan\ntxtwht=\"$(tput setaf 7 2>/dev/null || echo '\\e[0;37m')\"  # White\n\n# Bold\nbldblk=\"$(tput setaf 0 2>/dev/null)$(tput bold 2>/dev/null || echo '\\e[1;30m')\"  # Black\nbldred=\"$(tput setaf 1 2>/dev/null)$(tput bold 2>/dev/null || echo '\\e[1;31m')\"  # Red\nbldgrn=\"$(tput setaf 2 2>/dev/null)$(tput bold 2>/dev/null || echo '\\e[1;32m')\"  # Green\nbldylw=\"$(tput setaf 3 2>/dev/null)$(tput bold 2>/dev/null || echo '\\e[1;33m')\"  # Yellow\nbldblu=\"$(tput setaf 4 2>/dev/null)$(tput bold 2>/dev/null || echo '\\e[1;34m')\"  # Blue\nbldpur=\"$(tput setaf 5 2>/dev/null)$(tput bold 2>/dev/null || echo '\\e[1;35m')\"  # Purple\nbldcyn=\"$(tput setaf 6 2>/dev/null)$(tput bold 2>/dev/null || echo '\\e[1;36m')\"  # Cyan\nbldwht=\"$(tput setaf 7 2>/dev/null)$(tput bold 2>/dev/null || echo '\\e[1;37m')\"  # White\n\n# Underline\nundblk=\"$(tput setaf 0 2>/dev/null)$(tput smul 2>/dev/null || echo '\\e[4;30m')\"  # Black\nundred=\"$(tput setaf 1 2>/dev/null)$(tput smul 2>/dev/null || echo '\\e[4;31m')\"  # Red\nundgrn=\"$(tput setaf 2 2>/dev/null)$(tput smul 2>/dev/null || echo '\\e[4;32m')\"  # Green\nundylw=\"$(tput setaf 3 2>/dev/null)$(tput smul 2>/dev/null || echo '\\e[4;33m')\"  # Yellow\nundblu=\"$(tput setaf 4 2>/dev/null)$(tput smul 2>/dev/null || echo '\\e[4;34m')\"  # Blue\nundpur=\"$(tput setaf 5 2>/dev/null)$(tput smul 2>/dev/null || echo '\\e[4;35m')\"  # Purple\nundcyn=\"$(tput setaf 6 2>/dev/null)$(tput smul 2>/dev/null || echo '\\e[4;36m')\"  # Cyan\nundwht=\"$(tput setaf 7 2>/dev/null)$(tput smul 2>/dev/null || echo '\\e[4;37m')\"  # White\n\n# Background\nbakblk=\"$(tput setab 0 2>/dev/null || echo '\\e[40m')\"  # Black\nbakred=\"$(tput setab 1 2>/dev/null || echo '\\e[41m')\"  # Red\nbakgrn=\"$(tput setab 2 2>/dev/null || echo '\\e[42m')\"  # Green\nbakylw=\"$(tput setab 3 2>/dev/null || echo '\\e[43m')\"  # Yellow\nbakblu=\"$(tput setab 4 2>/dev/null || echo '\\e[44m')\"  # Blue\nbakpur=\"$(tput setab 5 2>/dev/null || echo '\\e[45m')\"  # Purple\nbakcyn=\"$(tput setab 6 2>/dev/null || echo '\\e[46m')\"  # Cyan\nbakwht=\"$(tput setab 7 2>/dev/null || echo '\\e[47m')\"  # White\n\n# Reset\ntxtrst=\"$(tput sgr 0 2>/dev/null || echo '\\e[0m')\"  # Text Reset\n"
        },
        {
          "name": "main.sh",
          "type": "blob",
          "size": 0.072265625,
          "content": "source \"${GITAWAREPROMPT}/colors.sh\"\nsource \"${GITAWAREPROMPT}/prompt.sh\"\n"
        },
        {
          "name": "preview.png",
          "type": "blob",
          "size": 7.025390625,
          "content": null
        },
        {
          "name": "prompt.sh",
          "type": "blob",
          "size": 0.861328125,
          "content": "find_git_branch() {\n  # Based on: http://stackoverflow.com/a/13003854/170413\n  local branch\n  if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null); then\n    if [[ \"$branch\" == \"HEAD\" ]]; then\n      branch='detached*'\n    fi\n    git_branch=\"($branch)\"\n  else\n    git_branch=\"\"\n  fi\n}\n\nfind_git_dirty() {\n  local status=$(git status --porcelain 2> /dev/null)\n  if [[ \"$status\" != \"\" ]]; then\n    git_dirty='*'\n  else\n    git_dirty=''\n  fi\n}\n\nPROMPT_COMMAND=\"find_git_branch; find_git_dirty; $PROMPT_COMMAND\"\n\n# Default Git enabled prompt with dirty state\n# export PS1=\"\\u@\\h \\w \\[$txtcyn\\]\\$git_branch\\[$txtred\\]\\$git_dirty\\[$txtrst\\]\\$ \"\n\n# Another variant:\n# export PS1=\"\\[$bldgrn\\]\\u@\\h\\[$txtrst\\] \\w \\[$bldylw\\]\\$git_branch\\[$txtcyn\\]\\$git_dirty\\[$txtrst\\]\\$ \"\n\n# Default Git enabled root prompt (for use with \"sudo -s\")\n# export SUDO_PS1=\"\\[$bakred\\]\\u@\\h\\[$txtrst\\] \\w\\$ \"\n"
        }
      ]
    }
  ]
}