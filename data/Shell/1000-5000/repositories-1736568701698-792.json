{
  "metadata": {
    "timestamp": 1736568701698,
    "page": 792,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "CyberShadow/aconfmgr",
      "stars": 1232,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.083984375,
          "content": "*\n!/src\n!/test/docker/run-test-inner.sh\n!/test/docker/aur/\n!/test/docker/build-aur.sh\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0126953125,
          "content": "/config\n/tmp\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.8720703125,
          "content": "# aconfmgr: A configuration manager for Arch Linux<br>[![test](https://github.com/CyberShadow/aconfmgr/actions/workflows/test.yml/badge.svg)](https://github.com/CyberShadow/aconfmgr/actions/workflows/test.yml)[![Coverage Status](https://coveralls.io/repos/github/CyberShadow/aconfmgr/badge.svg)](https://coveralls.io/github/CyberShadow/aconfmgr)[![Discussions](https://img.shields.io/github/discussions/CyberShadow/aconfmgr)](https://github.com/CyberShadow/aconfmgr/discussions)\n\n`aconfmgr` is a package to track, manage, and restore the configuration of an Arch Linux system.\nIts goals are:\n\n- Quickly configure a new system, or restore an existing system according to a saved configuration\n- Track temporary/undesired changes to the system's configuration\n- Identify obsolete packages and maintain a lean system\n\n`aconfmgr` tracks the list of installed packages (both native and external), as well as changes to configuration files (`/etc/`).\nSince the system configuration is described as shell scripts, it is trivially extensible.\n\n![screenshot](https://dump.thecybershadow.net/60cf0b31d4f999ff6596ae5ca6a86d61/composed.png)\n\n## Table of Contents\n\n* [Usage](#usage)\n  * [Installation](#installation)\n  * [First run](#first-run)\n  * [Maintenance](#maintenance)\n  * [Restoring](#restoring)\n* [Modus operandi](#modus-operandi)\n  * [Packages](#packages)\n* [Advanced Usage](#advanced-usage)\n  * [Configuration syntax](#configuration-syntax)\n  * [Ignoring some changes](#ignoring-some-changes)\n    * [Ignoring files](#ignoring-files)\n    * [Ignoring parts of files](#ignoring-parts-of-files)\n    * [Ignoring packages](#ignoring-packages)\n  * [Inlining files](#inlining-files)\n    * [Inlining file content entirely](#inlining-file-content-entirely)\n    * [Inlining file edits](#inlining-file-edits)\n  * [Managing multiple systems](#managing-multiple-systems)\n  * [More tips and tricks](#more-tips-and-tricks)\n* [Comparisons](#comparisons)\n  * [aconfmgr vs. Puppet/Ansible](#aconfmgr-vs-puppetansible)\n  * [aconfmgr vs. NixOS](#aconfmgr-vs-nixos)\n  * [aconfmgr vs. lostfiles](#aconfmgr-vs-lostfiles)\n  * [aconfmgr vs. etckeeper](#aconfmgr-vs-etckeeper)\n* [Limitations](#limitations)\n* [License](#license)\n\n## Usage\n\n### Installation\n\nSimply clone (or [download](https://github.com/CyberShadow/aconfmgr/archive/master.zip)+unzip) the GitHub repository. `aconfmgr` will install dependencies as needed during execution. [An AUR package is also available](https://aur.archlinux.org/packages/aconfmgr-git/).\n\n### First run\n\nRun `aconfmgr save` to transcribe the system's configuration to the configuration directory. This will create the file `99-unsorted.sh` in the configuration directory, as well as other files describing the system configuration. (The configuration directory will usually be `~/.config/aconfmgr`, or `./config` if running directly from git, or it can be overridden with `-c`.)\n\nOn the first run, `aconfmgr` will likely include some files which you may not want to include in your system configuration. These can be temporary or auto-generated files which are not directly owned by a package. To prevent `aconfmgr` from including these files in the configuration, create e.g. `10-ignores.sh` in the configuration directory, with the lines e.g. `IgnorePath '/path/to/file.ext'` or `IgnorePath '/path/to/dir/*'`. (See [ignoring files](#ignoring-files) for details.) Delete everything from the configuration directory except that file and re-run `aconfmgr save` to regenerate a configuration minding these ignore rules.\n\nOnce `aconfmgr save` finishes, you should review the contents of `99-unsorted.sh`, and sort it into one or more new files (e.g.: `10-base.sh`, `20-drivers.sh`, `30-gui.sh`, `50-misc.sh` ...). The files should have a `.sh` extension, and use `bash` syntax. I suggest adding a comment for each package describing why installing the package was needed, so it is clear when the package is no longer needed and can be removed.\n\nDuring this process, you may identify packages or system changes which are no longer needed. Do not sort them into your configuration files - instead, delete the file `99-unsorted.sh`, and run `aconfmgr apply`. This will synchronize the system state against your configuration, thus removing the omitted packages. (You will be given a chance to confirm all changes before they are applied.)\n\nNote: you don't need to run `aconfmgr` via `sudo`. It will elevate as necessary by invoking `sudo` itself.\n\n### Maintenance\n\nThe configuration directory should be versioned using a version control system (e.g. Git). Ideally, the file `99-unsorted.sh` should not be versioned - it will only be created when the current configuration does not reflect the current system state, therefore indicating that there are system changes that have not been accounted for.\n\nPeriodic maintenance consists of running `aconfmgr save`; if this results in uncommitted changes to the configuration directory, then there are unaccounted system changes. The changes should be reviewed, sorted, documented, committed and pushed.\n\n### Restoring\n\nTo restore a system to its earlier state, or to set up a new system, simply make sure the correct configuration is in the configuration directory and run `aconfmgr apply`. You will be able to preview and confirm any actual system changes.\n\n## Modus operandi\n\nThe `aconfmgr` script has two subcommands:\n\n- `aconfmgr save` calculates the difference between the current system's configuration and the configuration described by the configuration directory, and writes it back to the configuration directory.\n- `aconfmgr apply` applies the difference between the configuration described by the configuration directory and the current system's configuration, installing/removing packages and creating/editing configuration files.\n\nThe configuration directory contains shell scripts, initially generated by the `save` subcommand, and then usually edited by the user. Evaluating these scripts will *compile* a system configuration description in the `output` directory. The difference between that directory's contents, and the actual current system configuration, dictates the actions ultimately taken by `aconfmgr`.\n\n`aconfmgr save` will write the difference to the file `99-unsorted.sh` (under the configuration directory) as a series of shell commands which attempt to bring the configuration up to date with the current system. When starting with an empty configuration, this difference will consist of the entire system description. Since the script only appends to that file, it may end up undoing configuration changes done earlier in the scripts (e.g. removing packages from the package list). It is up to the user to refactor the configuration to remove redundancies, document changes, and improve maintainability.\n\n`aconfmgr apply` will apply the differences to the actual system.\n\nThe contracts of both commands are that they are mutually idempotent: after a successful invocation of either, invoking either command immediately after will be a no-op.\n\n### Packages\n\nBackground: On Arch Linux, every installed package is installed either explicitly, or as a dependency for another package. Packages can also have mandatory (hard) or optional dependencies. You can view this information using `pacman -Qi <package>` (\"Install Reason\", \"Depends On\", \"Optional Deps\").\n\n`aconfmgr` only tracks explicitly-installed packages, ignoring their hard dependencies. Therefore:\n\n- `aconfmgr save` will only save installed packages that are marked as explicitly installed.\n- Installed packages that are neither explicitly installed, nor are hard dependencies of other installed packages, are considered prunable orphans and will be removed.\n- Packages that are only optional dependencies of other packages must be listed explicitly, otherwise they will be pruned.\n- `aconfmgr apply` removes unlisted packages by unpinning them (setting their install reason as \"installed as a dependency\"), after which it prunes all orphan packages. If the package is still required by another package, it will remain on the system (until it is no longer required); otherwise, it is removed.\n- Packages that are installed and explicitly listed in the configuration will have their install reason set to \"explicitly installed\".\n\n## Advanced Usage\n\n### Configuration syntax\n\nThe configuration files use `bash` syntax. The easiest way to learn the syntax is to run `aconfmgr save` and examine its output (`99-unsorted.sh`).\n\nSome simple helper functions are defined in `src/helpers.bash` (sourced automatically). You are encouraged to examine their implementation - their main goal is not so much to provide an API as simply to make the generated configuration terser and more readable. As such, their use is in no way required, and they can be substituted with their underlying implementations.\n\nThe list of provided helper functions:\n\n- `AddPackage [--foreign] PACKAGE...` - Adds a package to the list of packages to be installed.\n- `RemovePackage [--foreign] PACKAGE...` - Removes an earlier-added package to the list of packages to be installed.\n- `IgnorePackage [--foreign] PACKAGE...` - Adds a package to the list of [packages to be ignored](#ignoring-packages).\n- `AddPackageGroup GROUP` - Adds all packages currently in the given group to the list of packages to be installed.\n- `CopyFile PATH [MODE [OWNER [GROUP]]]` - Copies a file from the `files` subdirectory to the output.\n- `CopyFileTo SRC-PATH DST-PATH [MODE [OWNER [GROUP]]]` - As above, but allows source and output paths to vary.\n- `CreateFile [--no-clobber] PATH [MODE [OWNER [GROUP]]]` - Creates an empty file, to be included in the output. Prints its absolute path to standard output.\n- `GetPackageOriginalFile [--no-clobber] PACKAGE PATH` - Extracts the original file from a package's archive for inclusion in the output. Prints its absolute path to standard output.\n- `CreateLink PATH TARGET [OWNER [GROUP]]` - Creates a symbolic link with the specified target.\n- `RemoveFile PATH` - Removes an earlier-added file.\n- `SetFileProperty PATH TYPE VALUE` - Sets a file property.\n- `IgnorePath PATTERN` - Adds the specified pattern to the list of [ignored paths](#ignoring-files).\n- `AddFileContentFilter PATTERN FUNCTION` - Adds the specified rule to the list of [file content filters](#ignoring-parts-of-files).\n\nYou are free to define your own custom helper functions as part of your configuration, e.g. by placing them in a `00-helpers.sh` file.\n\nSome examples can be found on [the project wiki](https://github.com/CyberShadow/aconfmgr/wiki).\n\n### Ignoring some changes\n\n#### Ignoring files\n\nSome files will inevitably neither belong to or match any installed packages, nor can be considered part of the system configuration. This can include:\n\n* Temporary / cache / auto-generated / lock / pipe / pid / timestamp / database / backup / log files\n* Files managed by third-party package managers, esp. programming languages' package managers (pip, gem, npm)\n* Virtual machine disk images\n\nOther files may not be desirable to include in the managed system configuration because they are security-sensitive (e.g. sshd private keys).\n\nTo declare a group of files to be ignored by `aconfmgr`, you can use the provided `IgnorePath` function, e.g.:\n\n```bash\nIgnorePath '/var/lib/pacman/local/*' # package metadata\nIgnorePath '/var/lib/pacman/sync/*.db' # repos\nIgnorePath '/var/lib/pacman/sync/*.db.sig' # repo sigs\n```\n\nMake sure to quote the pattern argument to prevent globbing at configuration parse time.\n\n#### Ignoring parts of files\n\nIf only some parts of a file are relevant to the system configuration, and the rest can be safely omitted or normalized to some default value, a filter rule can be configured to normalize how the contents of a file appears to aconfmgr. For example, this is applicable if a file contains a timestamp or some randomly-generated or frequently-changing value, which can be safely discarded.\n\nTo configure a file content rule, first define a function which specifies how to filter the file. The function is called with the file name as the only parameter, the file contents on its stdin, and is expected to provide the filtered contents on its stdout:\n\n```bash\nfunction NetworkManagerConnectionFilter() {\n\tgrep -v '^timestamp='\n}\n```\n\nThen, register the rule by calling the `AddFileContentFilter` helper function:\n\n```bash\nAddFileContentFilter '/etc/NetworkManager/system-connections/*.nmconnection' NetworkManagerConnectionFilter\n```\n\nOnly one function may be configured per unique pattern. The most recently added rule takes precedence over any rules with matching patterns preceding it.\n\n#### Ignoring packages\n\nTo ignore the presence of some packages on the system, you can use the `IgnorePackage` function:\n\n```bash\nIgnorePackage linux-git\n```\n\n`aconfmgr save` will not update the configuration based on ignored packages' presence or absence, and `aconfmgr apply` will not install or uninstall them. The packages should also not be present in the configuration's package list, of course. To ignore a foreign package (e.g. a non-AUR foreign package), use the `--foreign` switch (e.g. `IgnorePackage --foreign my-flobulator`).\n\n### Inlining files\n\nIn the output generated by `aconfmgr save`, non-empty new or modified files are copied in their entirety to the configuration directory, under the `/files/` subdirectory, accompanied by a `Copyfile` invocation. However, this can sometimes be wasteful or unwieldy if the file consists of a single line, or has one line changed out of a thousand. This section describes some techniques to move the edits into the configuration files entirely.\n\n#### Inlining file content entirely\n\nInstead of copying, the file's can be inlined using a `bash` heredoc, or even an `echo`:\n\n```bash\n# Enable Magic SysRq\necho \"kernel.sysrq = 1\" > \"$(CreateFile /etc/sysctl.d/99-sysrq.conf)\"\n\n# https://wiki.archlinux.org/index.php/Getty#Have_boot_messages_stay_on_tty1\ncat > \"$(CreateFile /etc/systemd/system/getty@tty1.service.d/noclear.conf)\" <<EOF\n[Service]\nTTYVTDisallocate=no\nEOF\n```\n\n#### Inlining file edits\n\nIt is also possible to generate an output file that is a modification of the original. For this purpose, the helper function `GetPackageOriginalFile` is provided. The function will extract the indicated file from the archive in pacman's package cache, downloading it first if necessary.\n\n```bash\n# Append some options to systemd's system.conf\ncat >> \"$(GetPackageOriginalFile systemd /etc/systemd/system.conf)\" <<EOF\nRuntimeWatchdogSec=10min\nShutdownWatchdogSec=10min\nDefaultTimeoutStartSec=30s\nDefaultTimeoutStopSec=30s\nEOF\n\n# Specify locales\nf=\"$(GetPackageOriginalFile glibc /etc/locale.gen)\"\nsed -i 's/^#\\(en_US.UTF-8\\)/\\1/g' \"$f\"\nsed -i 's/^#\\(en_DK.UTF-8\\)/\\1/g' \"$f\" # for ISO timestamps\n```\n\nThe [Augeas](http://augeas.net/) package can assist in editing configuration files:\n\n```bash\nAconfNeedProgram augtool augeas n # Install augeas now, if needed\naug() { augtool --root=\"$output_dir/files\" \"$@\" ; }\n\n# DNS\nGetPackageOriginalFile filesystem /etc/resolv.conf > /dev/null\naug set '/files/etc/resolv.conf/nameserver[101]' 127.0.0.1 # dnsmasq\naug set '/files/etc/resolv.conf/nameserver[102]' 8.8.8.8 # Google\naug set '/files/etc/resolv.conf/nameserver[103]' 8.8.4.4 # Google\n```\n\n#### Comparing differences\n\nWhen files are automatically generated by the configuration, or inlined therein, it can be onerous to obtain the differences between the configuration-generated version and the current system version. For this purpose, `aconfmgr` provides the `diff` action, which can be used to display a comparison between the two.\n\n```console\n$ aconfmgr --skip-config --skip-inspection diff /etc/resolv.conf\n: Compiling user configuration...\n:: Skipped.\n: Inspecting system state...\n:: Skipped.\n--- ./tmp/system/files/etc/resolv.conf\t2020-10-12 07:36:00.095597318 +0000\n+++ ./tmp/output/files/etc/resolv.conf\t2020-10-12 07:35:39.087903266 +0000\n...\n```\n\nThe diff direction is from system to configuration, i.e., it displays changes that would be applied by `aconfmgr apply`.\nIf the file belongs to a package and is unmodified on the system, `aconfmgr` will display the comparison between the original package version and the configuration version;\nlikewise, if the file is absent from the configuration, the comparison will be between the filesystem version and the original package version.\n\n### Managing multiple systems\n\nYou can use the same configuration repository to manage multiple sufficiently-similar systems. One way of doing so is e.g. Git branches (having one main branch plus one branch per machine, and periodically merge in changes from the main branch into the machine-specific branches); however, it is simpler to use shell scripting:\n\n```bash\nAddPackage coreutils\n# ... more common packages ...\n\nif [[ \"$HOSTNAME\" == \"home.example.com\" ]]\nthen\n\tAddPackage nvidia\n\tAddPackage nvidia-utils\n\t# ... more packages only for the home system ...\nfi\n```\n\nTo manage different versions of a file for different systems, you can [inline the file](#inlining-files), or copy a different version depending on the hostname.\n\nAn example for inlining `/etc/hosts`:\n\n```bash\nf=\"$(GetPackageOriginalFile filesystem /etc/hosts)\"\necho '1.2.3.4 home.example.net' >> \"$f\"\nif [[ \"$HOSTNAME\" == laptop.example.net ]]\nthen\n\techo '127.0.1.1 laptop.example.net laptop' >> \"$f\"\nfi\n```\n\nIf the file is binary, or too large to make inlining practical, `CopyFileTo` can be used:\n\n```bash\nCopyFileTo \"/etc/hosts-$HOSTNAME\" \"/etc/hosts\"\n```\n\nThis will use `files/etc/hosts-home.example.net` for the `home.example.net` machine, and so on.\n\n### More tips and tricks\n\nYou can find user-contributed additions on [the project wiki](https://github.com/CyberShadow/aconfmgr/wiki).\n\n## Comparisons\n\n### aconfmgr vs. Puppet/Ansible\n\nAlthough `aconfmgr` calls itself a configuration manager, it has a number of core distinctions from the more well-known ones. One big distinction is that `aconfmgr` manages only one system - the one it is running on. It does not depend on any background services or network agents to work.\n\nAnother big distinction is the scope, and the direction of the flow of information. To clarify:\n\n- Puppet and Ansible have limited discovery abilities, whereas `aconfmgr` attempts to discover and save the system configuration in its entirety. There is no Puppet/Ansible command that can be run to save a running system's configuration to a file which, when executed, will produce a similarly-configured system; however, this is the goal of `aconfmgr save`.\n\n- Puppet and Ansible manage the system's configuration insofar as it is defined by the configuration file, whereas `aconfmgr` manages the entire system; as such, the absence of an item in the configuration file indicates its absence on the system. This is not true for [Puppet](http://www.puppetcookbook.com/posts/remove-package.html) or [Ansible](http://stackoverflow.com/questions/29914253/remove-package-ansible-playbook), where, to remove a package, one must first push a configuration file that explicitly indicates that the package is to be removed, only after which can all mentions of the package be removed from the configuration file.\n\n### aconfmgr vs. NixOS\n\nThere are some similarities between the [NixOS configuration file](https://nixos.org/nixos/manual/) and `aconfmgr`: they both attempt to describe the entire system configuration from a text file, with any changes in the configuration reflecting on the system. However, while `NixOS` forbids directly editing files under its control, `aconfmgr` doesn't. As with Puppet/Ansible, `aconfmgr` differs in that it provides a mechanism to transcribe changes in system state back to the configuration, making it idempotent.\n\nAnother difference is that `NixOS` provides a specialized syntax for many common configuration settings of managed software (e.g. allowing syntax such as `boot.loader.grub.device = \"/dev/sda\";`). `aconfmgr` doesn't provide this directly, though this can be achieved to some extent using tools such as [Augeas](#inlining-file-edits), without also sacrificing the extent of possible configuration to only [the predefined set of available options](https://nixos.org/nixos/manual/options.html).\n\n### aconfmgr vs. lostfiles\n\n[lostfiles](https://github.com/graysky2/lostfiles) is a \"simple script that identifies files not owned and not created by any Arch Linux package\". `aconfmgr` provides a superset of its functionality, not least the ability to save exclusions to a configuration file.\n\n### aconfmgr vs. etckeeper\n\n[etckeeper](https://joeyh.name/code/etckeeper) allows storing `/etc` in a version control system. `aconfmgr` allows this as well, although it does not directly provide a way to automatically merge configuration files with upstream package versions. This can be done manually, by [inlining file changes](#inlining-files).\n\n## Limitations\n\n- Dependencies where more than one package provides something (e.g. `fcron` and `cronie` provide `cron`) are not tracked, and the desired dependency must be pinned or added to the configuration manually.\n- Installing AUR packages that depend on virtual packages (such as `java-environment`) is not currently implemented. The desired dependency can be manually specified in the configuration, or a supported AUR helper can be used instead.\n\n## License\n\nCopyright (c) 2016-2018 aconfmgr authors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "aconfmgr",
          "type": "blob",
          "size": 0.578125,
          "content": "#!/bin/bash\n# shellcheck disable=2030,2031\n# SC2030/2031: https://github.com/koalaman/shellcheck/issues/732\n\nset -eEuo pipefail\nshopt -s lastpipe\n\nIFS=$'\\n'\nexport LC_COLLATE=C\n\nif [[ -f ./aconfmgr && -f ./src/common.bash ]]\nthen\n\t# Running locally - use $PWD\n\tconfig_dir=./config\n\ttmp_dir=./tmp\n\tsrc_dir=src\nelse\n\t# Installed system-wide - use well-defined paths\n\txdg_config_home=\"${XDG_CONFIG_HOME:-$HOME/.config}\"\n\tconfig_dir=\"$xdg_config_home\"/aconfmgr\n\ttmp_dir=\"${TMPDIR:-/tmp}/aconfmgr-$USER\"\n\tsrc_dir=/usr/lib/aconfmgr\nfi\n\n# shellcheck source=src/main.bash\nsource \"$src_dir\"/main.bash\n"
        },
        {
          "name": "aconfmgr.1",
          "type": "blob",
          "size": 4.1865234375,
          "content": ".TH ACONFMGR 1\n.SH NAME\naconfmgr \\- a configuration manager for Arch Linux\n.SH SYNOPSIS\n.B aconfmgr\n[\\fIOPTIONS\\fR]\n.BR save \" | \" apply \" | \" check \" | \" diff\n.SH DESCRIPTION\n.B aconfmgr\nis a package to track, manage, and restore the configuration of an Arch Linux system.\n\nFor a detailed description, please see the full documentation:\n\n.I https://github.com/CyberShadow/aconfmgr#readme\n.SH ACTIONS\n\n.TP\n.BR save\nUpdate the configuration to reflect the current state of the system.\n\n.TP\n.BR apply\nUpdate the system to reflect the current contents of the configuration.\n\n.TP\n.BR check\nSyntax-check and lint the configuration.\n\n.TP\n.BR diff\nDisplay a comparison between files in the configuration and the system.\n\nThis action takes a list of absolute paths, or additional options to pass\nto \\fBdiff\\fR, as arguments following the action name.\n\n.SH OPTIONS\n\n.TP\n.BR \\-h \", \" \\-\\-help\nOutput a usage message and exit.\n\n.TP\n.BR \\-c \", \" \\-\\-config \" \" \\fIDIR\\fR\nSet the path to the configuration directory.\n\nThis directory will contain the configuration that\nthe \\fBsave\\fR command will write to, and\nthe \\fBapply\\fR command will read from, respectively.\n\nSee also \\fBFILES\\fR below.\n\n.TP\n.B \\-\\-skip-config\nSkip the configuration parsing step, and reuse results from previous run.\n\n.TP\n.B \\-\\-skip-inspection\nSkip the system inspection step, and reuse results from previous run.\n\n.TP\n.B \\-\\-skip-checksums\nSkip the checksum verification of files belonging to installed packages.\n\nWhen enabled, changes to a package's files are still detected through modification\ntime, size and other properties.\n\nEnabling this option is generally safe and greatly speeds up execution speed,\nbut can fail to detect changes to a file's contents in exceptional circumstances,\nsuch as filesystem corruption, intentional manipulation or badly behaved programs.\n\n.TP\n\\fB\\-\\-aur-helper\\fR \\fIHELPER\\fR\nSet the AUR helper to use for installing foreign packages.\n\nSupported values are\n.BR aurman \", \" pacaur \", \" yaourt \", \" yay \", \" paru \", and \" makepkg\n(for which \\fBaconfmgr\\fR will download, resolve dependencies, and build/install itself).\n\n.TP\n\\fB\\-\\-color\\fR \\fIWHEN\\fR\nWhen to use colors in output\n.RB ( always / auto / never ).\n\nIf unset or set to \\fBauto\\fR, \\fBaconfmgr\\fR will use color when the output is determined to be a TTY.\n\nIf set, it is propagated appropriately to invoked programs.\n\n.TP\n\\fB\\-\\-paranoid\\fR\nAlways prompt before making any changes to the system.\n\nThe default is to not prompt when executed commands would themselves show a prompt before performing changes.\n\nThis option is mutually exclusive with \\fB\\-\\-yes\\fR.\n\nIf set, it is propagated appropriately to invoked programs.\n\n.TP\n\\fB\\-\\-yes\\fR\nNever prompt before making any changes to the system.\n\nThis option is mutually exclusive with \\fB\\-\\-paranoid\\fR.\n\nIf set, it is propagated appropriately to invoked programs.\n\n.TP\n.BR \\-v \", \" \\-\\-verbose\n Show progress with additional detail.\n\n.SH FILES\n.TP\n.I ~/.config/aconfmgr\nDefault location of configuration directory\n(can be overridden with \\fB\\-c\\fR).\n\nThe default location is affected by the \\fB$XDG_CONFIG_HOME\\fR and \\fB$HOME\\fR environment variables.\n\n.TP\n.IB /tmp/aconfmgr- USER\nTemporary directory, used for intermediary system state and configuration output data, and other temporary files.\n\nThe location is affected by the \\fB$TMPDIR\\fR environment variable.\n\n.SH \"ENVIRONMENT VARIABLES\"\n.TP\n.B $HOME\nAffects the default location of the configuration directory.\n\n.TP\n.B $PACMAN\nThe command that will be used to check for missing dependencies and to install\nand remove packages. \\fBpacman\\fR's\n.IR -Qq \", \" -Rns \", \" -S \", \" -T \", and \" -U\noperations must be supported by this command. If the variable is not set or empty, \\fBaconfmgr\\fR will fall back to 'pacman'.\n\n.TP\n.B $TMPDIR\nAffects the default location of the temporary directory.\n\n.TP\n.B $XDG_CONFIG_HOME\nAffects the default location of the configuration directory.\n\n.SH BUGS\nPlease report defects and enhancement requests to the GitHub issue tracker:\n\n.I https://github.com/CyberShadow/aconfmgr/issues\n\n.SH AUTHORS\n\n.de foo\n.BR \"bersh\"\nad\n..\n\n\\fBaconfmgr\\fR is written by Vladimir Panteleev <aconfmgr@thecy\\fRbersh\\fRadow.net> and contributors:\n\n.I https://github.com/CyberShadow/aconfmgr/graphs/contributors\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}