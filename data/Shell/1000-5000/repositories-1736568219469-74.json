{
  "metadata": {
    "timestamp": 1736568219469,
    "page": 74,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pystardust/ytfzf",
      "stars": 3851,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".assets",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0048828125,
          "content": "tags\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.935546875,
          "content": "# Contributing\n\n* use the development branch\n* Keep the script POSIX compliant as defined [here](https://pubs.opengroup.org/onlinepubs/9699919799/)\n    * Exceptions may be made if there is a backup POSIX function defined, for example, the `shuf` utility is used, and there is a backup `shuf` function defined if the user does not have `shuf` installed.\n    * If something is not POSIX it may only be implemented if it is available on many systems (Linux, and BSD), and it's impractical to implement in POSIX shell.\n\t* For example: `date -d` is used.\n\n* Feel free to give yourself a file in the `credits` folder, and add yourself to the table in the README :)\n\n\n# Shells\n\nA non-comprehensive list of shells to test the script with\n\n* bash\n* dash\n* ksh\n* bsd-ksh (on the aur this is the package oksh)\n* busybox sh\n* any other posix shells\n* zsh*\n\n*Technically zsh does not have to work because it's not posix compliant, but zsh should work at least some what.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.7724609375,
          "content": "PROG=ytfzf\nPREFIX=/usr/local\nBINDIR=${PREFIX}/bin\nDOCDIR=${PREFIX}/share/doc/ytfzf\nMANDIR=${PREFIX}/share/man\nLICENSEDIR=${PREFIX}/share/licenses/ytfzf\n\nYTFZF_SYSTEM_ADDON_DIR=${PREFIX}/share/ytfzf/addons\n\n.DEFAULT_GOAL := default\n\nall:\n\ndefault: install doc\n\ndoc:\n\tmkdir -p ${DESTDIR}${MANDIR}/man1\n\tmkdir -p ${DESTDIR}${MANDIR}/man5\n\tmkdir -p ${DESTDIR}${DOCDIR}\n\tmkdir -p ${DESTDIR}${LICENSEDIR}\n\tchmod 644 docs/man/ytfzf.1 docs/man/ytfzf.5 docs/conf.sh LICENSE\n\tcp docs/man/ytfzf.1 ${DESTDIR}${MANDIR}/man1\n\tcp docs/man/ytfzf.5 ${DESTDIR}${MANDIR}/man5\n\tcp docs/conf.sh ${DESTDIR}${DOCDIR}\n\tcp LICENSE ${DESTDIR}${LICENSEDIR}\n\ninstall:\n\tchmod 755 ${PROG}\n\tcp ${PROG} ${PROG}.bak\n\tsed 's_$${YTFZF\\_SYSTEM\\_ADDON\\_DIR:=/usr/local/share/ytfzf/addons}_$${YTFZF\\_SYSTEM\\_ADDON\\_DIR:=${YTFZF_SYSTEM_ADDON_DIR}}_' < ${PROG} > ${PROG}.bak\n\tmkdir -p ${DESTDIR}${BINDIR}\n\tcp ${PROG}.bak ${DESTDIR}${BINDIR}/${PROG}\n\trm ${PROG}.bak\n\naddons:\n\tchmod 755 addons/*/*\n\tmkdir -p ${DESTDIR}${YTFZF_SYSTEM_ADDON_DIR}\n\tcp -r addons/interfaces ${DESTDIR}${YTFZF_SYSTEM_ADDON_DIR}\n\tcp -r addons/scrapers ${DESTDIR}${YTFZF_SYSTEM_ADDON_DIR}\n\tcp -r addons/sort-names ${DESTDIR}${YTFZF_SYSTEM_ADDON_DIR}\n\tcp -r addons/thumbnail-viewers ${DESTDIR}${YTFZF_SYSTEM_ADDON_DIR}\n\tcp -r addons/url-handlers ${DESTDIR}${YTFZF_SYSTEM_ADDON_DIR}\n\tcp -r addons/extensions ${DESTDIR}${YTFZF_SYSTEM_ADDON_DIR}\n\nuninstall:\n\trm -f ${DESTDIR}${MANDIR}/man1/ytfzf.1\n\trm -f ${DESTDIR}${MANDIR}/man5/ytfzf.5\n\trm -rf ${DESTDIR}${DOCDIR}\n\trm -rf ${DESTDIR}${LICENSEDIR}\n\trm -f ${DESTDIR}${BINDIR}/${PROG}\n\trm -rf ${DESTDIR}${YTFZF_SYSTEM_ADDON_DIR}\n\n#legacy install locations on linux\nuninstall-old:\n\trm -f /usr/bin/ytfzf\n\trm -f /usr/share/man/man1/ytfzf.1*\n\trm -f /usr/share/man/man5/ytfzf.5*\n\n.PHONY: all default install uninstall doc addons uninstall-old\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.005859375,
          "content": "# NOTICE\n\nThis project is no longer actively maintained, it should still work for the foreseeable future\n\n---\n\n<p align=\"center\">\n    <a> <img src=.assets/logo.png></a>\n    <br />\n    <br />\n\t<a href=\"https://github.com/pystardust/ytfzf/stargazers\"><img src=\"https://img.shields.io/github/stars/pystardust/ytfzf?color=orange&logo=github&style=flat-square\"></a>\n\t<a href=\"https://github.com/pystardust/ytfzf/graphs/contributors\"><img src=\"https://img.shields.io/github/contributors/pystardust/ytfzf?style=flat-square\"></a>\n\t<img src=\"https://img.shields.io/static/v1?color=%231831ad&message=Euro20179&label=Maintainer&style=flat-square\" alt=\"Maintainer: Euro20179\">\n\t<a href=\"https://github.com/pystardust/ytfzf/releases/tag/v1.1.1\"><img src=\"https://img.shields.io/github/v/tag/pystardust/ytfzf?style=flat-square\"> </a>\n\t<a href=\"https://github.com/pystardust/ytfzf/commits/master\"><img src=\"https://img.shields.io/github/commit-activity/m/pystardust/ytfzf?color=green&style=flat-square\"></a>\n\t<a href=\"https://discord.gg/kupWznHjRJ\"><img src=\"https://img.shields.io/discord/815609275644117022?color=yellow&logo=discord&style=flat-square\" alt=\"Discord\"></a>\n\t<a href=\"https://matrix.to/#/#ytfzf-chat:matrix.org\"><img src=\"https://img.shields.io/static/v1?color=%230eb687&message=chat&logo=matrix&label=matrix&style=flat-square\" alt=\"Discord\"></a>\n    <br />\n    <br />\n    <i>A POSIX script that helps you find Youtube videos (without API) and opens/downloads them using mpv/youtube-dl</i>\n\t<hr>\n</p>\n\n<h1 align=\"center\">\n\tThis is a little showcase\n</h1>\n<p align=\"center\">\n<img src=.assets/ytfzf.gif width=\"100%\">\n</p>\n\n---\n\n# Table Of Contents\n\n- [`Dependencies`](#Dependencies)\n- [`Install`](#Install)\n- [`Features`](#Features)\n- [`Examples`](#Examples)\n- [`Configuration`](#Configuration)\n- [`Bugs`](#Bugs)\n- [`Contributing`](#Contributing)\n- [`Credits`](#Credits)\n\n---\n\n# Dependencies\n\nThere are only 2 required dependencies, however the rest require some configuration before you can replace them.\n\n## Required dependencies\n\n- [`jq`](https://github.com/stedolan/jq)\n- [`curl`](https://github.com/curl/curl)\n\n## Recommended dependencies\n\n- [`mpv`](https://github.com/mpv-player/mpv) (the default video and audio player)\n- [`fzf`](https://github.com/junegunn/fzf) (the default menu selection screen)\n\n## Optional dependencies\n\n- [`yt-dlp`](https://github.com/yt-dlp/yt-dlp) (for downloading)\n- [`dmenu`](https://tools.suckless.org/dmenu/) (only if using the -D option)\n- [`ueberzugpp`](https://github.com/jstkdng/ueberzugpp)\n  - needed for the following thumbnail viewers:\n    - `kitty`, `iterm2`, `sixel`, and `ueberzug`\n  - the original [`ueberzug`](https://github.com/seebye/ueberzug) or any fork may be used if you only want to use the `ueberzug` viewer.\n\n### Thumbnail Viewers\n\n- **To use a thumbnail viewer include `-T <viewer>` in the command when running ytfzf**\n\n| Program                                                                | Wayland Support        |\n| :--------------------------------------------------------------------- | :--------------------- |\n| [`kitty`](https://github.com/kovidgoyal/kitty) (requires `ueberzugpp`) | &#9989;                |\n| `iterm2` (requires `ueberzugpp`)                                       | &#9989;                |\n| `sixel` (requires `ueberzugpp`)                                        | &#9989;                |\n| `sway` (requires `ueberzugpp`)                                         | &#9989; (only on sway) |\n| `wayland` (requires `ueberzugpp`)                                      | &#9989;                |\n| [`chafa`](https://github.com/hpjansson/chafa)                          | &#9989;                |\n| [`catimg`](https://github.com/posva/catimg)                            | &#9989;                |\n| [`imv`](https://git.sr.ht/~exec64/imv)                                 | &#9989;                |\n| [`mpv`](https://github.com/mpv-player/mpv)                             | &#9989;                |\n| [`swayimg`](https://github.com/artemsen/swayimg)                       | only on `sway`         |\n| [`swayimg`](https://github.com/artemsen/swayimg) (-T swayimg-hyprland) | only on `hyprland`     |\n\n# Install\n\n<a href=\"https://repology.org/metapackage/ytfzf\">\n    <img src=\"https://repology.org/badge/vertical-allrepos/ytfzf.svg\" alt=\"Repo status\" align=\"right\">\n</a>\n\n**if on `linux` and installed using make on version `2.0` or prior, run `sudo make uninstall-old` first**\n\n1. Install the dependencies listed [above](#Dependencies)\n2. Run the following commands\n\n```sh\ngit clone https://github.com/pystardust/ytfzf\ncd ytfzf\nsudo make install doc\n```\n\n- If you wish to not install documentation (highly unrecommended) run `sudo make install` instead.\n\n- If you wish to install addons, run `sudo make addons`\n\n  - `YTFZF_SYSTEM_ADDONS_DIR` will point to `/usr/local/share/ytfzf/addons` even if you set `PREFIX` to something else\n  - If you use a different prefix, it would be smart to export `YTFZF_SYSTEM_ADDONS_DIR` to `$PREFIX/share/ytfzf/addons` in a shell startup file.\n\n- You may also install `ytfzf` through your package manager, as listed on the side.\n\n## Addons\n\nAddons are extra features that will not be as supported as everything built into `ytfzf` itself.\n\nAddons are located in `addons`, copy any addon to `~/.config/ytfzf/{addon-type}/{addon}`, and give it execute permissions.\n\nYou may also just copy the entire addon folder type, eg: `cp -r addons/thumbnail-viewers ~/.config/ytfzf/`\n\n### Usage\n\nTo use a scraper addon run `ytfzf -c <scraper> ...`\n\nTo use a thumbnail-viewer addon run `ytfzf -T <viewer> ...`\n\nTo use a interface addon run `ytfzf -i <interface> ...`\n\nTo use a url-handler addon run `ytfzf -u <handler> ...`\n\nTo use a sort-name addon run `ytfzf --sort-name=<sort-name> ...`\n\nTo use an extension addon run `ytfzf -e <extension> ...`\n\n---\n\n# Features\n\n- Subscriptions\n- Thumbnails\n- Watch history\n- Search History\n- Downloading\n- Queueing multiple videos\n- Custom menus, and scrapers\n- Addon support\n\n---\n\n# Examples\n\n> Search with thumbnails\n\n```sh\nytfzf -t <search>\n```\n\n> Use `dmenu` as the menu instead of `fzf`\n\n```sh\nytfzf -D <search>\n```\n\n> Print the link of the selected video instead of playing it\n\n```sh\nytfzf -L <search>\n```\n\n> Search Odysee instead of youtube\n\n```sh\nytfzf -cO <search>\n```\n\n> Use the chafa thumbnail viewer, pass --vo=sixel, and --quiet to mpv, scrape odysee with the search _odysee search_, youtube with the search: _youtube search_, and also scrape subscriptions\n\n```sh\nytfzf -t -T chafa --url-handler-opts='--vo=sixel --quiet' -cO,Y,SI --multi-search odysee search,youtube search\n```\n\n---\n\n# Configuration\n\nEverything that is an option can also be configured in `~/.config/ytfzf/conf.sh`.\n\nIn addition, the video player and other things may be changed here\n\nHere is a [sample configuration](docs/conf.sh) (please dont use it)\n\nFor more information, see `ytfzf(5)` which should be installed, if it's not see [the wiki](https://github.com/pystardust/ytfzf/wiki).\n\n---\n\n# Bugs\n\n- _dwm with swallow patch: Images don't render with ueberzug when looped (ie, option `-l`)_\n- _if thumbnails are not working `.Xauthority` might be causing it. Try deleting it and relogging into your computer._\n- When fzf is not set to 100% height, thumbnails may appear in the wrong position\n\n# Contributing\n\nFeel free to contribute, and add your name to the credits, please use the development branch. For more information see [contributing](CONTRIBUTING.md)\n\n# Credits\n\n| User          | Contributions                             | Donate |\n| :------------ | :---------------------------------------- | :----- |\n| Pystardust    | [contributions](credits/pystardust.md)    |        |\n| Euro20179     | [contributions](credits/euro20179.md)     |        |\n| Simonhughxyz  | [contributions](credits/simonhughxyz.md)  |        |\n| Jac-Zac       | [contributions](credits/jac-zac.md)       |        |\n| Mudskipper875 | [contributions](credits/mudskipper875.md) |        |\n| Gardockt      | [contributions](credits/gardockt.md)      |        |\n| qoheniac      | [contributions](credits/qoheniac.md)      |        |\n| mathisto      | [contributions](credits/mathisto.md)      |        |\n"
        },
        {
          "name": "addons",
          "type": "tree",
          "content": null
        },
        {
          "name": "credits",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ytfzf",
          "type": "blob",
          "size": 119.259765625,
          "content": "#!/usr/bin/env sh\n\n# state variables\n: \"${__is_submenu:=0}\" \"${__is_fzf_preview:=0}\"\n\n# versioning system:\n# major.minor.bugs\nYTFZF_VERSION=\"git-2077.0857c74\"\n\n#ENVIRONMENT VARIABLES {{{\n: \"${YTFZF_CONFIG_DIR:=${XDG_CONFIG_HOME:-$HOME/.config}/ytfzf}\"\n: \"${YTFZF_CONFIG_FILE:=$YTFZF_CONFIG_DIR/conf.sh}\"\n: \"${YTFZF_SUBSCRIPTIONS_FILE:=$YTFZF_CONFIG_DIR/subscriptions}\"\n: \"${YTFZF_THUMBNAIL_VIEWERS_DIR:=$YTFZF_CONFIG_DIR/thumbnail-viewers}\"\n: \"${YTFZF_SORT_NAMES_DIR:=$YTFZF_CONFIG_DIR/sort-names}\"\n: \"${YTFZF_CUSTOM_INTERFACES_DIR:=$YTFZF_CONFIG_DIR/interfaces}\"\n: \"${YTFZF_URL_HANDLERS_DIR:=$YTFZF_CONFIG_DIR/url-handlers}\"\n: \"${YTFZF_CUSTOM_THUMBNAILS_DIR:=$YTFZF_CONFIG_DIR/thumbnails}\"\n: \"${YTFZF_EXTENSIONS_DIR:=$YTFZF_CONFIG_DIR/extensions}\"\n: \"${YTFZF_CUSTOM_SCRAPERS_DIR:=$YTFZF_CONFIG_DIR/scrapers}\"\n\n: \"${YTFZF_SYSTEM_ADDON_DIR:=/usr/local/share/ytfzf/addons}\"\n\n: \"${YTFZF_TEMP_DIR:=\"${TMPDIR:-/tmp}\"/ytfzf-$(id -u)}\"\n\n: \"${YTFZF_LOGFILE:=}\"\n\nif [ \"$YTFZF_LOGFILE\" ] && { [ \"$__is_fzf_preview\" -eq 1 ] || [ \"$__is_submenu\" -eq 1 ]; }; then\n\tprintf \"[%s]\\n==============\\nSubmenu: %d\\nFzf Preview: %d\\n==============\\n\" \"$(date)\" \"$__is_submenu\" \"$__is_fzf_preview\" >>\"${YTFZF_LOGFILE}\"\nelif [ \"${YTFZF_LOGFILE}\" ]; then\n\t: >\"${YTFZF_LOGFILE}\"\nfi\n\n! [ -d \"$YTFZF_TEMP_DIR\" ] && mkdir -p \"${YTFZF_TEMP_DIR}\"\n\nexport YTFZF_PID=$$\n#}}}\n\n############################\n#        DEBUGGING         #\n############################\n\n# There are only a couple tooling methods that I know of for debugging (other than printing stuff everywhere)\n# set log_level to 3, and set YTFZF_LOGFILE=./some-file.log\n# set -x may also be used.\n\n############################\n#        CODE STYLE        #\n############################\n\n##################\n# VARIABLE NAMES #\n##################\n\n# Starts with __ if it is a state variable thatt is allowed to be accessed globally.\n# for example: __is_submenu is a state variable that keeps track of whether or not itt is a submenu\n# another example: __scrape_count is the current scrape number\n\n# Environment variables should be all caps, do not use full caps for constansts\n\n# Const variable should start with c_ or const_\n\n# Configuration variables should not start with any prefix, and should have a --long-opt equivelent with as close of a name as posisble to the variable\n# example: the search_source variable has the long opt equivelent of --search-source\n\n# Private variables should start with an _\n# A major exception to this is the _search variable, which is global, and should not be used as a local variable.\n\n##################\n# FUNCTION NAMES #\n##################\n\n# Private functions should start with an _\n\n# All other functions that should be accessed globally should not start with an _\n# A major exception to this is _get_request which is a global function\n\n# interface functions MUST start with interface_ in order to work properly\n# scraper functions MUST start with scrape_ in order to work properly\n\n############################\n#          ERRORS          #\n############################\n\n# 0: success\n# 1: general error\n# 2: invalid -opt or command argument, invalid argument for opt, configuration error\n# eg: ytfzf -c terminal (invalid scrape)\n# 3: missing dependency\n# 4: scraping error\n# 5: empty search\n# *: Likely a curl error\n\n############################\n#          CODE            #\n############################\n\n# colors {{{\nc_red=\"\\033[1;31m\"\nc_green=\"\\033[1;32m\"\nc_yellow=\"\\033[1;33m\"\nc_blue=\"\\033[1;34m\"\nc_magenta=\"\\033[1;35m\"\nc_cyan=\"\\033[1;36m\"\nc_reset=\"\\033[0m\"\nc_bold=\"\\033[1m\"\n#}}}\n\n: \"${check_vars_exists:=${YTFZF_CHECK_VARS_EXISTS:-1}}\"\n\n# __ytfzf__ extension {{{\n\nprint_help___ytfzf__() {\n\t#the [2A will clear the \\n---__ytfzf__--- garbage (in supported terminals)\n\tprintf \"\\033[2A%s\" \\\n\t\t\"Usage: ytfzf [OPTIONS...] <search-query>\n    The search-query can also be read from stdin\n    GENERAL OPTIONS:\n        -h                      Show this help text\n\n        --version                Get the current version\n\n        --version-all            Get the current version of ytfzf,\n                                    and required dependencies\n\n    UTILITY OPTIONS:\n        --channel-link=<link>    Gets the uuid of a youtube channel from a link.\n\n    PLAYING OPTIONS:\n        -d                      Download the selected video(s)\n\n        -m                      Only play audio\n\n        -f                      Select a video format before playing\n\n        --format-selection=<type>\n                                Type can either be normal, or simple\n        --format-sort=<sort>    The sort used in ytdl for -f.\n\n        --video-pref=<pref>     The ytdl video preference.\n\n        --audio-pref=<pref>     The ytdl audio preference.\n\n        --ytdl-pref=<pref>      The combined ytdl video and audio preference.\n\n        -u <url handler>        The program to use for handling urls\n                                    (deafult: multimedia_player)\n        -L                      Show the link of selected video(s)\n\n        -I <info>               Instead of playing the selected video(s),\n                                    get information about them.\n                                    Options can be separated with a comma,\n                                      eg: L,R\n                                    Options for info:\n                                      L:         print the link of the video\n                                      VJ:        print the json of the video\n                                      J:         print the json of all videos\n                                                 shown in the search\n                                      R:         print the data\n                                                 of the selected videos,\n                                                 as appears in the menu\n                                      F:         print the selected video format\n        --info-wait              When -I or -L is used,\n                                 wait for user input before continuing\n\n        --info-action=<action>   \n                                 The action to do when --info-wait is 1.\n                                 action can be one of\n                                      q: exit\n                                      Q: exit (bypass -l)\n                                      '': play video\n\n        --detach                 Detach the url handler from the terminal\n\n        --notify-playing         Sends a notification when a video is selected.\n\n        --url-handler-opts=<opts>\n                                 Pass the given opts to the url handler.\n\n        --ytdl-opts=<opts>       Pass the opts to ytdl when downloading\n\n        --ytdl-path=<path>       The path to youtube-dl\n\n    MENU OPTIONS:\n        -l                      Reopen the menu when the video stops playing\n\n        -t                      Show thumbnails\n\n        -T <viewer>             The program to use for displaying thumbnails.\n                                    see ytfzf(1) for a list of viewers.\n\n        --async-thumbnails      Download thumbnails asynchronously.\n\n        --skip-thumb-download   Skips the process of downloading thumbnails\n\n        --thumbnail-quality=<quality>\n                                Select quality of thumbnails,\n                                can be:\n                                    maxres\n                                    maxresdefault\n                                    sddefault\n                                    high (default)\n                                    medium\n                                    default\n                                    start\n                                    middle\n                                    end\n\n        -i <interface>          The interface to use (default: text)\n\n        -D                      Alias for -i ext\n\n        -a                      Automatically select the first video\n\n        -r                      Automatically select a random video\n\n        -A                      Select all videos\n\n        -S <sed address>        Automatically selects a specific video\n                                    based on a given sed address\n\n        -n <video count>        The amount of videos to select with -a and -r\n\n        --preview-side=<side>   The side to show the preview on in fzf:\n                                    left\n                                    right\n                                    up\n                                    down\n        --fancy-subs             Adds a divider between each subscription\n                                 when scraping subscriptions\n\n        --sort                   Sorts video results by a sort name,\n                                    The default sort name is upload-date\n                                    To change sort names use --sort=<name>\n\n        --sort-name=<name>       Load a different sorting algorithm for --sort\n                                    To see usable sort-names, use --list-addons\n\n        --disable-submenus       Whether or not to disable submenus,\n                                 which are menus for results like:\n                                    playlists and channels\n\n        --disable-back           Disables the back button in submenus\n\n        --disable-actions        Disables actions such as submenus, and the back button.\n\n        --keep-vars              Options passed to ytfzf are kept in submenus.\n\n        --submenu-opts=<opts>    ytfzf options to pass to submenus.\n\n    SEARCH OPTIONS:\n        -s                      After closing fzf make another search\n\n        -q                      Use a search query from search history\n                                see ytfzf(1) for more info.\n\n        --search-source=<source>\n                                The place to get the search from\n                                see ytfzf(1) for more information\n\n        --multi-search          Allow multiple searches seperated by ,\n\n        --pages                 The amount of pages to scrape\n                                    does not work with some scrapers.\n        --pages-start=<page>    The page number to start on\n\n        --odysee-video-count    The amount of videos to scrape from odysee\n\n        --nsfw                  Enable nsfw videos (odysee only)\n\n        --sort-by=<sort>        Searches for videos sorted by:\n                                    relevance\n                                    rating (youtube only)\n                                    upload_date\n                                    oldest_first (odysee only)\n                                    view_count (youtube only)\n\n        --upload-date=<time>    Searches for videos that were uploaded:\n                                    hour\n                                    today\n                                    week\n                                    month\n                                    year\n\n        --video-duration=<time> Searches for videos that are:\n                                    short\n                                    medium\n                                    long\n\n        --type=<type>           Searches for uploads of type:\n                                    video\n                                    playlist\n                                    channel\n                                    all\n\n        --features=<features>   Searches for videos with features:\n                                    hd\n                                    subtitles\n                                    creative_commons\n                                    3d\n                                    live\n                                    4k\n                                    360\n                                    location\n                                    hdr\n\n        --region=<country-code> The region to search.\n\n        -c <scraper>            The scraper to use,\n                                    See ytfzf(1) for a list of builtin scrapers\n                                    you can use multiple scrapers\n                                    by separating each with a comma, eg:\n                                        youtube,odysee\n\n        --scrape+=<scraper>     Use another scraper\n\n        --scrape-=<scraper>     Dont use a scraper.\n\n        -H                      alias for -c H\n\n        --ii=<instance>         The invidious instance to use for scraping.\n\n        --force-youtube         Converts invidious links to youtube links\n                                before playing (enabled by default)\n\n        --force-invidious       Uses the chosen invidious instance\n                                instead of converting to a youtube link\n\n    ADDON OPTIONS:\n        -e <extention>          Load an extention\n\n        --list-addons            Show available addons\n\n    MISC OPTIONS:\n        -x                       Clear search and watch history\n\n        --history-clear=<type>   Clear either search, or watch  history.\n\n        --max-threads=<count>    The amount of threads that should be spawned\n                                 at any given time.\n\n        --single-threaded        Same as --max-threads=1\n\n        --rii                   Refreseh invidious instance cache\n\n        --available-inv-instances\n                                Shows the invidious instances\n                                that ytfzf may pick from\n\n        --keep-cache            Do not delete the cache files.\n\n        --thumbnail-log         Write thumbnail errors to this file.\n\n    See ytfzf(1) and ytfzf(5) for more information.\n\"\n}\n\nhandle_playing_notifications() {\n\t# if no notify-send push error to /dev/null\n\tif [ \"$#\" -le 1 ]; then\n\t\tunset IFS\n\t\twhile read -r id title; do\n\t\t\tnotify-send -c ytfzf -i \"$thumb_dir/${id}.jpg\" \"Ytfzf Info\" \"Opening: $title\" 2>/dev/null\n\t\tdone <<-EOF\n\t\t\t    $(jq -r '.[]|select(.url==\"'\"$*\"'\")|\"\\(.ID)\\t\\(.title)\"' <\"$ytfzf_video_json_file\")\n\t\tEOF\n\telse\n\t\tnotify-send -c ytfzf \"ytfzf info\" \"Opening: $# videos\" 2>/dev/null\n\tfi\n}\n\non_open_url_handler___ytfzf__() {\n\t[ \"$notify_playing\" -eq 1 ] && handle_playing_notifications \"$@\"\n}\n\non_clean_up___ytfzf__() {\n\t# print_info \"cleaning up\\n\"\n\t# clean up only as parent process\n\t# kill ytfzf sub process{{{\n\t# I think this needs to be written to a file because of sub-shells\n\tjobs_file=\"${YTFZF_TEMP_DIR}/the-jobs-need-to-be-written-to-a-file-$$.list\"\n\tjobs -p >\"$jobs_file\"\n\twhile read -r line; do\n\t\t[ \"$line\" ] && kill \"$line\" 2>/dev/null\n\tdone <\"$jobs_file\"\n\trm -f \"$jobs_file\"\n\t#}}}\n\tif [ \"$__is_fzf_preview\" -eq 0 ]; then\n\t\t[ \"$keep_cache\" -eq 1 ] && print_debug \"[CLEAN UP]: copying cache dir\" && cp -r \"${session_cache_dir}\" \"${cache_dir}\"\n\t\t[ -d \"$session_cache_dir\" ] && rm -rf \"$session_cache_dir\"\n\tfi\n}\n\non_load_fake_extension___ytfzf__() {\n\t#these need to be here, because it modifies stuff for _getopts\n\t#also no harm done because enable_hist cannot be set to true with an --option\n\n\t#do not check if hist is enabled, because on_load_fake_extension___ytfzf_history__ does that\n\tload_fake_extension \"__ytfzf_history__\" \"1\"\n\tload_fake_extension \"__ytfzf_search_history__\" \"1\"\n}\n\non_post_set_vars___ytfzf__() {\n\t[ -z \"$ytdl_path\" ] && { command_exists \"yt-dlp\" && ytdl_path=\"yt-dlp\" || ytdl_path=\"youtube-dl\"; }\n\n\t: \"${ytdl_pref:=$video_pref+$audio_pref/best/$video_pref/$audio_pref}\"\n\n\t: \"${shortcut_binds=\"Enter,double-click,${download_shortcut},${video_shortcut},${audio_shortcut},${detach_shortcut},${print_link_shortcut},${show_formats_shortcut},${info_shortcut},${search_again_shortcut},${custom_shortcut_binds},${custom_shortcut_binds}\"}\"\n\n\t[ ! -d \"$cache_dir\" ] && mkdir -p \"$cache_dir\"\n\n\t# If file doesn't already exist (or if force-refresh is requested), cURL and cache it.\n\t# CHECK: implement check for force-request\n\t# CHECK: added --refresh-inv-instances to optargs\n\t[ ! -f \"$instances_file\" ] && refresh_inv_instances\n\n\t: \"${invidious_instance:=$(get_random_invidious_instance)}\"\n\n\t#if there is no domain, use the chosen invidious instance\n\t[ -z \"${yt_video_link_domain}\" ] && yt_video_link_domain=\"${invidious_instance}\"\n\n\texport FZF_DEFAULT_OPTS=\"--margin=0,3,0,0 $FZF_DEFAULT_OPTS\"\n\n\t[ \"$multi_search\" -eq 1 ] && load_fake_extension \"__ytfzf_multisearch__\"\n\n\tscrape_search_exclude=\"${scrape_search_exclude}${custom_scrape_search_exclude} \"\n\n\tsource_scrapers\n\n\tprint_debug \"${new_line}=============${new_line}VARIABLE DUMP${new_line}=============\"\n\tprint_debug \"$(set)\"\n\tprint_debug \"${new_line}============${new_line}END VAR DUMP${new_line}============\"\n}\n#}}}\n\n# __ytfzf_multisearch__ extension {{{\n\non_init_search___ytfzf_multisearch__() {\n\tprepare_for_set_args \",\"\n\t# shellcheck disable=SC2086\n\tset -- $1\n\tend_of_set_args\n\t__total_search_count=\"$#\"\n\tprintf \"%s\\n\" \"$@\" >\"${session_cache_dir}/searches.list\"\n\t# if we get rid of everything up to the first comma, and it's empty or equal to the original, there is 1 scrape\n\tif [ \"$__total_scrape_count\" -lt \"$__total_search_count\" ]; then\n\t\tscrape=$(mul_str \"${scrape},\" \"$(($(wc -l <\"${session_cache_dir}/searches.list\") / __total_scrape_count))\")\n\t\tset_scrape_count\n\tfi\n}\n\next_on_search___ytfzf_multisearch__() {\n\tget_search_from_source \"next\"\n}\n\nget_search_from_next() {\n\t_search=$(head -n \"$__scrape_count\" \"${session_cache_dir}/searches.list\" | tail -n 1)\n}\n\n# }}}\n\n# __ytfzf_history_management__ {{{\n\non_load_fake_extension___ytfzf_history_management__() {\n\ton_opt_parse_x() {\n\t\tclear_hist \"${1:-all}\"\n\t\texit 0\n\t}\n\ton_opt_parse_hist_clear() { on_opt_parse_x \"$@\"; }\n\n\tclear_hist() {\n\t\tcase \"$1\" in\n\t\tsearch)\n\t\t\t: >\"$search_hist_file\"\n\t\t\tprint_info \"Search history cleared\"\n\t\t\t;;\n\t\twatch)\n\t\t\t: >\"$hist_file\"\n\t\t\tprint_info \"Watch history cleared\"\n\t\t\t;;\n\t\t*)\n\t\t\t: >\"$search_hist_file\"\n\t\t\t: >\"$hist_file\"\n\t\t\tprint_info \"History cleared\"\n\t\t\t;;\n\t\tesac\n\t}\n}\n# }}}\n\n# __ytfzf_history__ extension {{{\non_load_fake_extension___ytfzf_history__() {\n\n\t! extension_is_loaded \"__ytfzf_history_management__\" && load_fake_extension \"__ytfzf_history_management__\"\n\n\t: \"${hist_file:=\"$cache_dir/watch_hist\"}\"\n\ton_opt_parse_history() {\n\t\tif [ \"$enable_hist\" -eq 0 ]; then\n\t\t\tdie 1 \"enable_hist must be set to 1 for -H/--history\"\n\t\tfi\n\t\tscrape=history\n\t}\n\ton_opt_parse_H() {\n\t\ton_opt_parse_history \"$@\"\n\t}\n}\n\non_open_url_handler___ytfzf_history__() {\n\tadd_to_hist \"$ytfzf_video_json_file\" <\"$ytfzf_selected_urls\"\n}\n\nadd_to_hist() {\n\t[ \"$enable_hist\" -eq 1 ] || return\n\tprint_debug \"[WATCH HIST]: adding to file $hist_file\"\n\t# id of the video to add to hist will be passed through stdin\n\t# if multiple videos are selected, multiple ids will be present on multiple lines\n\tjson_file=\"$1\"\n\turls=\"$(printf '\"%s\",' $(cat))\"\n\turls=\"[${urls%,}]\"\n\tjq -r '[ .[]|select(.url as $url | '\"$urls\"' | index($url) >= 0)]' <\"$json_file\" | sed \"/\\[\\]/d\" | sed \"2s/$/\\n    \\\"viewed\\\": \\\"$(date +'%m\\/%d\\/%y\\ %H\\:%M\\:%S\\ %z')\\\",/\" >>\"$hist_file\"\n\tunset url urls json_file\n}\n\nscrape_history() {\n\tenable_hist=0 # enabling history while scrape is history causes issues\n\tscrape_json_file \"$hist_file\" \"$2\"\n\tcp \"$2\" \"$2.tmp\"\n\tjq -s '[.[]|.[]+{scraper: \"watch_history\"}]' <\"$2.tmp\" >\"$2\"\n\trm \"$2.tmp\"\n}\nscrape_H() { scrape_history \"$@\"; }\n\nvideo_info_text_watch_history() {\n\tviewed_len=19\n\n\t[ \"${views#\"|\"}\" -eq \"${views#\"|\"}\" ] 2>/dev/null && views=\"|$(printf \"%s\" \"${views#\"|\"}\" | add_commas)\"\n\tprintf \"%-${title_len}.${title_len}s\\t\" \"$title\"\n\tprintf \"%-${channel_len}.${channel_len}s\\t\" \"$channel\"\n\tprintf \"%-${dur_len}.${dur_len}s\\t\" \"$duration\"\n\tprintf \"%-${view_len}.${view_len}s\\t\" \"$views\"\n\tprintf \"%-${date_len}.${date_len}s\\t\" \"$date\"\n\tprintf \"%-${viewed_len}.${viewed_len}s\\t\" \"$viewed\"\n\tprintf \"%s\" \"$url\"\n\tprintf \"\\n\"\n}\n# }}}\n\n# __ytfzf_search_history__ extension {{{\n\non_load_fake_extension___ytfzf_search_history__() {\n\n\t! extension_is_loaded \"__ytfzf_history_management__\" && load_fake_extension \"__ytfzf_history_management__\"\n\n\t: \"${search_hist_file:=\"$cache_dir/search_hist\"}\"\n\ton_opt_parse_q() {\n\t\tif [ \"$enable_search_hist\" -eq 0 ]; then\n\t\t\tdie 1 \"In order to use this search history must be enabled\"\n\t\tfi\n\t\t[ ! -s \"$search_hist_file\" ] && die 1 \"You have no search history\"\n\t\tsearch_source=\"hist\"\n\t}\n\ton_opt_parse_search_hist() {\n\t\ton_opt_parse_q \"$@\"\n\t}\n}\n\non_post_set_vars___ytfzf_search_history__() {\n\t[ \"${use_search_hist:-0}\" -eq 1 ] && print_warning \"use_search_hist is deprecated, please use search_source=hist instead\" && search_source=hist\n}\n\non_init_search___ytfzf_history__() {\n\t[ \"$enable_search_hist\" -eq 1 ] && [ -n \"$_search\" ] && [ \"$__is_submenu\" -eq 0 ] && [ \"$__is_fzf_preview\" -eq 0 ] && handle_search_history \"$_search\" \"$search_hist_file\"\n}\n\nget_search_from_hist() {\n\t_search=\"$(parse_search_hist_file <\"$search_hist_file\" | quick_menu_wrapper)\"\n}\n\nparse_search_hist_file() {\n\tawk -F\"${tab_space}\" '{ if ($2 == \"\") {print $1} else {print $2} }'\n}\n\nhandle_search_history() {\n\tprintf \"%s${tab_space}%s\\n\" \"$(date +'%D %H:%M:%S %z')\" \"${1}\" >>\"$2\"\n}\n\n# }}}\n\n# Utility functions {{{\n\n############################\n#    UTILITY FUNCTIONS     #\n############################\n\n# In order to be a utility function it must meet the following requirements:\n# Does not have side effects\n# Can be redefined by the user in an extension or config file\n\n## Jq util{{{\njq_pad_left='\ndef pad_left(n; num):\n    num | tostring |\n        if (n > length) then ((n - length) * \"0\") + (.) else . end\n'\n# }}}\n\n# Invidious{{{\nrefresh_inv_instances() {\n\tprint_info \"Fetching list of healthy invidious instances ...\" &&\n\t\t# The pipeline does the following:\n\t\t#   - Fetches the avaiable invidious instances\n\t\t#   - Gets the one where the api is public\n\t\t#   - Puts them in a list\n\t\tcurl -X GET -sSf \"$instances_url\" | jq -r '[.[]|select(.[1].api==true)|.[1].uri]|join(\"\\n\")' >\"$instances_file\"\n}\n\nget_invidious_instances() {\n\tcat \"$instances_file\"\n}\n\nget_random_invidious_instance() {\n\tshuf \"$instances_file\" | head -n 1\n}\n# }}}\n\n# General Scraping{{{\n_get_request() {\n\t_base_url=$1\n\tshift 1\n\t# Get search query from youtube\n\tcurl -f \"$_base_url\" -s -L \\\n\t\t\"$@\" \\\n\t\t-H \"User-Agent: $useragent\" \\\n\t\t-H 'Accept-Language: en-US,en;q=0.9' \\\n\t\t--compressed\n}\n\ncreate_sorted_video_data() {\n\tjq -c -r 'select(.!=[])|.[]' <\"$ytfzf_video_json_file\" | sort_video_data_fn\n}\n\ndownload_thumbnails() {\n\t[ \"$skip_thumb_download\" -eq 1 ] && {\n\t\tprint_info \"Skipping thumbnail download\"\n\t\treturn 0\n\t}\n\t[ \"$async_thumbnails\" -eq 0 ] && print_info \"Fetching thumbnails...${new_line}\"\n\tcurl_config_file=\"${session_temp_dir}/curl_config\"\n\t[ -z \"$*\" ] && return 0\n\t: >\"$curl_config_file\"\n\tfor line in \"$@\"; do\n\t\tprintf \"url=\\\"%s\\\"\\noutput=\\\"$thumb_dir/%s.jpg\\\"\\n\" \"${line%%';'*}\" \"${line##*';'}\"\n\tdone >>\"$curl_config_file\"\n\tcurl -fLZ -K \"$curl_config_file\"\n\t[ $? -eq 2 ] && curl -fL -K \"$curl_config_file\"\n}\n\nget_missing_thumbnails() {\n\t# this function could be done in a more pure-shell way, however it is extremely slow\n\t_tmp_id_list_file=\"${session_temp_dir}/all-ids.list\"\n\t_downloaded_ids_file=\"${session_temp_dir}/downloaded-ids.list\"\n\n\t# gets all ids and writes them to file\n\tjq -r '.[]|select(.thumbs!=null)|.ID' <\"$ytfzf_video_json_file\" | sort | uniq >\"$_tmp_id_list_file\"\n\t# gets thumb urls, and ids, and concatinates them such as: <thumbnail>;<id>\n\t# essencially gets all downloaded thumbnail ids, by checking $thumb_dir and substituting out the \\.jpg at the end\n\tfind \"$thumb_dir\" -type f | sed -n 's/^.*\\///; s/\\.jpg$//; /^[^\\/]*$/p' | sort >\"$_downloaded_ids_file\"\n\n\t# Finds ids that appear in _tmp_id_list_file only\n\t# shellcheck disable=SC2089\n\tmissing_ids=\"\\\"$(diff \"$_downloaded_ids_file\" \"$_tmp_id_list_file\" | sed -n 's/^[>+] *\\(.*\\)$/\\1/p')\\\"\"\n\n\t# formats missing ids into the format: <thumb-url>;<id>\n\tjq --arg ids \"$missing_ids\" -r '.[]|select(.thumbs!=null)|select(.ID as $id | $ids | contains($id))|.thumbs + \";\" + .ID' <\"$ytfzf_video_json_file\"\n\n\tunset _tmp_id_list_file _downloaded_ids_file missing_ids\n}\n# }}}\n\n#arg/ifs manipulation{{{\nprepare_for_set_args() {\n\tOLD_IFS=$IFS\n\t[ \"$1\" = \"\" ] && unset IFS || IFS=$1\n\tset -f\n}\nend_of_set_args() {\n\tIFS=$OLD_IFS\n}\n\nmodify_ifs() {\n\tOLD_IFS=$IFS\n\tIFS=${1:-\" ${tab_space}${new_line}\"}\n}\nend_modify_ifs() {\n\tIFS=$OLD_IFS\n}\n# }}}\n\n#general util{{{\n\n_get_real_channel_link() {\n\t_input_link=$(trim_blank \"$1\")\n\n\tcase \"$1\" in\n\thttp?://*/@*)\n\t\tdomain=${_input_link#https://}\n\t\tdomain=${domain%%/*}\n\t\turl=$(printf \"https://www.youtube.com/channel/%s\\n\" \"$(_get_request \"$_input_link\" | sed -n 's/.*\"channelId\":\"\\([^\"]\\+\\).*/\\1/p')\")\n\t\t_get_real_channel_link_handle_empty_real_path() {\n\t\t\tprintf \"$url\"\n\t\t}\n\t\t;;\n\thttp?://*/c/* | http?://*/user/* | *\\.*)\n\t\tdomain=${_input_link#https://}\n\t\tdomain=${domain%%/*}\n\t\turl=$(printf \"%s\" \"$_input_link\" | sed 's_\\(https://\\)*\\(www\\.\\)*youtube\\.com_'\"${invidious_instance}\"'_')\n\t\t_get_real_channel_link_handle_empty_real_path() {\n\t\t\tprintf \"https://%s\\n\" \"${1#https://}\"\n\t\t}\n\t\t;;\n\t[Uu][Cc]??????????????????????/videos | [Uu][Cc]?????????????????????? | *channel/[Uu][Cc]?????????????????????? | *channel/[Uu][Cc]??????????????????????/videos)\n\t\tid=\"${_input_link%/videos}\"\n\t\tid=\"${id%/playlists}\"\n\t\tid=\"${id%/streams}\"\n\t\tid=\"${id##*channel/}\"\n\t\tprint_warning \"$_input_link appears to be a youtube id, which is hard to detect, please use a full channel url next time\"\n\t\tdomain=\"youtube.com\"\n\t\turl=$(printf \"https://youtube.com/channel/%s/videos\" \"$id\" | sed 's_\\(https://\\)*\\(www\\.\\)*youtube\\.com_'\"${invidious_instance}\"'_')\n\t\t_get_real_channel_link_handle_empty_real_path() {\n\t\t\tprintf \"%s\\n\" \"https://${domain}/channel/${id}/videos\"\n\t\t}\n\t\t;;\n\t\"@\"*)\n\t\tfor link in \"https://www.youtube.com/user/${1#\"@\"}\" \"https://www.youtube.com/c/${1#\"@\"}\"; do\n\t\t\t_real_link=\"$(_get_real_channel_link \"$link\")\"\n\t\t\tif [ \"$_real_link\" != \"$link\" ]; then\n\t\t\t\tprintf \"%s\\n\" \"$_real_link\"\n\t\t\t\treturn 0\n\t\t\tfi\n\t\tdone\n\t\treturn 1\n\t\t;;\n\t*)\n\t\t_get_real_channel_link_handle_empty_real_path() {\n\t\t\tprintf \"$1\\n\"\n\t\t}\n\t\t;;\n\tesac\n\n\treal_path=\"$(curl -is \"$url\" | sed -n 's/^[Ll]ocation: //p' | sed 's/[\\n\\r]$//g')\"\n\t# prints the origional url because it was correct\n\tif [ -z \"$real_path\" ]; then\n\t\t_get_real_channel_link_handle_empty_real_path \"$_input_link\"\n\t\treturn 0\n\tfi\n\tprintf \"%s\\n\" \"https://${domain}${real_path}\"\n}\n\ntrim_url() {\n\twhile IFS= read -r _line; do\n\t\tprintf '%s\\n' \"${_line##*\"|\"}\"\n\tdone\n}\n\ntrim_blank() {\n\tsed -e 's/^[[:blank:]]*//g' -e 's/[[:blank:]]*$//g' <<EOF\n$1\nEOF\n}\n\ncommand_exists() {\n\tcommand -v \"$1\" >/dev/null 2>&1\n}\n\nis_relative_dir() {\n\tcase \"$1\" in\n\t../* | ./* | ~/* | /*) return 0 ;;\n\tesac\n\treturn 1\n}\n\nget_key_value() {\n\tsep=\"${3:- }\"\n\tvalue=\"${1##*\"${sep}\"\"${2}\"=}\"\n\t# this can be used similarly to how you use $REPLY in bash\n\tKEY_VALUE=\"${value%%\"${sep}\"*}\"\n\tprintf \"%s\" \"$KEY_VALUE\"\n\tunset value\n\t[ \"$KEY_VALUE\" ]\n\treturn \"$?\"\n}\n\n# capitalizes the first letter of a string\ntitle_str() {\n\tawk '{printf \"%s%s\\n\", toupper(substr($1,0,1)), substr($1,2)}' <<-EOF\n\t\t    $1\n\tEOF\n}\n\n# backup shuf function, as shuf is not posix\ncommand_exists \"shuf\" || shuf() {\n\t#make awk read from fd 3, fd 3 will read $1 if exists, or stdin\n\t[ \"$1\" ] && exec 3<\"$1\" || exec 3<&0\n\tawk -F'\\n' 'BEGIN{srand()} {print rand() \" \" $0}' <&3 | sort -n | sed 's/[^ ]* //'\n\texec 3<&-\n}\n\nadd_commas() {\n\tawk '\n\t\t{\n            for(i=0; i<length($1); i++){\n\t\t\t\tif(i % 3 == 0 && i!=0){\n                    printf \",\"\n\t\t\t\t}\n                printf \"%s\", substr($1, length($1) - i, 1)\n\t\t\t}\n\t\t}\n\n\t\tEND{\n            print \"\"\n\t\t}' |\n\t\tawk '\n            {\n                for (i=length($1); i>0; i--){\n                    printf \"%s\", substr($1, i, 1)\n                }\n            }\n        '\n}\n\nmul_str() {\n\tstr=$1\n\tby=$2\n\tnew_str=\"$str\"\n\tmul_str_i=1\n\twhile [ \"$mul_str_i\" -lt \"$by\" ]; do\n\t\tnew_str=\"${new_str}${str}\"\n\t\tmul_str_i=$((mul_str_i + 1))\n\tdone\n\tprintf \"%s\" \"$new_str\"\n\tunset mul_str_i new_str by str\n}\n\ndetach_cmd() {\n\tnohup \"$@\" >\"/dev/null\" 2>&1 &\n}\n\nremove_ansi_escapes() {\n\tsed -e 's/[[:cntrl:]]\\[\\([[:digit:]][[:digit:]]*\\(;\\|m\\)\\)*//g'\n}\n# }}}\n\n#Menu stuff{{{\nquick_menu() {\n\tfzf --ansi --reverse --prompt=\"$1\"\n}\nquick_menu_ext() {\n\texternal_menu \"$1\"\n}\n\ninfo_wait_prompt() {\n\tprintf \"%s\\n\" \"quit [q]\" \"quit (override -l) [Q]\" \"open menu [c]\" \"play [enter]\"\n\tread -r info_wait_action\n}\ninfo_wait_prompt_ext() {\n\tinfo_wait_action=$(printf \"%s\\n\" \"quit: q\" \"quit (override -l): Q\" \"open menu: c\" \"play: enter\" | quick_menu_wrapper \"Choose action\" | sed -e 's/enter//' -e 's/^.*: \\(.*\\)$/\\1/p' | tr -d '[:space:]')\n}\n\ndisplay_text() {\n\tprintf \"%s\\n\" \"$@\"\n}\ndisplay_text_ext() {\n\tdisplay_text \"$@\"\n}\n\ndisplay_text_wrapper() {\n\tgeneric_wrapper \"display_text\" \"$@\"\n}\n\ninfo_wait_prompt_wrapper() {\n\tgeneric_wrapper \"info_wait_prompt\" \"$@\"\n}\n\nsearch_prompt_menu_wrapper() {\n\tgeneric_wrapper \"search_prompt_menu\" \"$@\"\n}\n\nquick_menu_wrapper() {\n\tgeneric_wrapper \"quick_menu\" \"$1\"\n}\n\ngeneric_wrapper() {\n\tbase_name=$1\n\tshift\n\tfn_name=\"$base_name\"\"$(printf \"%s\" \"${interface:+_$interface}\" | sed 's/-/_/g')\"\n\tif command_exists \"$fn_name\"; then\n\t\tprint_debug \"[INTERFACE]: Running menu function: $fn_name\"\n\t\t$fn_name \"$@\"\n\telse\n\t\tprint_debug \"[INTERFACE]: Menu function $fn_name did not exist, falling back to ${base_name}_ext\"\n\t\t\"$base_name\"_ext \"$@\"\n\tfi\n\tunset fn_name\n}\n\n# The menu to use instead of fzf when -D is specified\nexternal_menu() {\n\t# dmenu extremely laggy when showing tabs\n\ttr -d '\\t' | remove_ansi_escapes | dmenu -i -l 30 -p \"$1\"\n}\n\nsearch_prompt_menu() {\n\tprintf \"Search\\n> \" >/dev/stderr\n\tread -r _search\n\tprintf \"\\033[1A\\033[K\\r%s\\n\" \"> $_search\" >/dev/stderr\n}\nsearch_prompt_menu_ext() {\n\t_search=\"$(printf '' | external_menu \"Search: \")\"\n}\n\nrun_interface() {\n\n\tif [ \"$show_thumbnails\" -eq 1 ]; then\n\t\tprepare_for_set_args\n\t\tcase \"$async_thumbnails\" in\n\t\t0) download_thumbnails $(get_missing_thumbnails) ;;\n\t\t1) download_thumbnails $(get_missing_thumbnails) >/dev/null 2>&1 & ;;\n\t\tesac\n\t\tend_of_set_args\n\tfi\n\n\t_interface=\"interface_${interface:-text}\"\n\n\tprint_debug \"[INTERFACE]: Running interface: $_interface\"\n\n\t$(printf \"%s\" \"$_interface\" | sed 's/-/_/g') \"$ytfzf_video_json_file\" \"$ytfzf_selected_urls\"\n\tunset _interface\n}\n\n_init_video_info_text() {\n\tTTY_COLS=$1\n\n\tcommand_exists \"column\" && use_column=1 || {\n\t\tuse_column=0\n\t\tprint_warning \"command \\\"column\\\" not found, the menu may look very bad\"\n\t}\n\n\ttitle_len=$((TTY_COLS / 2))\n\tchannel_len=$((TTY_COLS / 5))\n\tdur_len=7\n\tview_len=10\n\tdate_len=14\n}\n\n_post_video_info_text() {\n\tif [ \"$use_column\" = \"1\" ]; then\n\t\tcolumn -t -s \"$tab_space\"\n\telse\n\t\tcat\n\tfi\n}\n\n_video_info_text() {\n\t[ \"${views#\"|\"}\" -eq \"${views#\"|\"}\" ] 2>/dev/null && views=\"|$(printf \"%s\" \"${views#\"|\"}\" | add_commas)\"\n\tprintf \"%-${title_len}.${title_len}s\\t\" \"$title\"\n\tprintf \"%-${channel_len}.${channel_len}s\\t\" \"$channel\"\n\tprintf \"%-${dur_len}.${dur_len}s\\t\" \"$duration\"\n\tprintf \"%-${view_len}.${view_len}s\\t\" \"$views\"\n\tprintf \"%-${date_len}.${date_len}s\\t\" \"$date\"\n\tprintf \"%s\" \"$url\"\n\tprintf \"\\n\"\n}\n\n#This function generates a series of lines that will be displayed in fzf, or some other interface\n#takes in a series of jsonl lines, each jsonl should follow the VIDEO JSON FORMAT\nvideo_info_text() {\n\tjq -r '[.title, .channel, .duration, .views, .date, .viewed, .url, .scraper]|join(\"\\t|\")' | while IFS=\"$tab_space\" read -r title channel duration views date viewed url scraper; do\n\t\tscraper=\"${scraper#\"|\"}\"\n\t\tfn_name=video_info_text_\"${scraper}\"\n\t\tif command_exists \"$fn_name\"; then\n\t\t\t\"$fn_name\" \"$title\" \"$channel\" \"$duration\" \"$views\" \"$date\" \"$viewed\" \"$url\" \"$scraper\"\n\t\telse\n\t\t\t_video_info_text \"$title\" \"$channel\" \"$duration\" \"$views\" \"$date\" \"$viewed\" \"$url\" \"$scraper\"\n\t\tfi\n\tdone\n\tunset title channel duration views date viewed url scraper\n}\n\n# This is completely unrelated to video_info_text\n# It is used in preview_img for when text should appear in the preview in fzf\nthumbnail_video_info_text() {\n\t[ \"$views\" -eq \"$views\" ] 2>/dev/null && views=\"$(printf \"%s\" \"$views\" | add_commas)\"\n\t[ -n \"$title\" ] && printf \"\\n ${c_cyan}%s\" \"$title\"\n\t[ -n \"$channel\" ] && printf \"\\n ${c_blue}Channel  ${c_green}%s\" \"$channel\"\n\t[ -n \"$duration\" ] && printf \"\\n ${c_blue}Duration ${c_yellow}%s\" \"$duration\"\n\t[ -n \"$views\" ] && printf \"\\n ${c_blue}Views    ${c_magenta}%s\" \"$views\"\n\t[ -n \"$date\" ] && printf \"\\n ${c_blue}Date     ${c_cyan}%s\" \"$date\"\n\t[ -n \"$viewed\" ] && printf \"\\n ${c_blue}Viewed   ${c_cyan}%s\" \"$viewed\"\n\t[ -n \"$description\" ] && printf \"\\n ${c_blue}Description ${c_reset}: %s\" \"$(printf \"%s\" \"$description\" | sed 's/\\\\n/\\n/g')\"\n}\n# }}}\n\n# Extension stuff{{{\n\ndo_an_event_function() {\n\tevent=\"$1\"\n\tshift\n\tprint_debug \"[EVENT]: doing event: $event\"\n\tcommand_exists \"$event\" && $event \"$@\"\n\tprepare_for_set_args \" \"\n\tfor ext in $loaded_extensions; do\n\t\tcommand_exists \"${event}_$ext\" && print_debug \"[EVENT]: $ext running $event\" && \"${event}_$ext\" \"$@\"\n\tdone\n\tend_of_set_args\n}\n\nsource_scrapers() {\n\tprepare_for_set_args \",\"\n\tfor _scr in $scrape; do\n\t\tif [ -f \"$YTFZF_CUSTOM_SCRAPERS_DIR/$_scr\" ]; then\n\t\t\t# shellcheck disable=SC1090\n\t\t\t. \"${YTFZF_CUSTOM_SCRAPERS_DIR}/$_scr\"\n\t\telif [ -f \"$YTFZF_SYSTEM_ADDON_DIR/scrapers/$_scr\" ]; then\n\t\t\t# shellcheck disable=SC1090\n\t\t\t. \"${YTFZF_SYSTEM_ADDON_DIR}/scrapers/$_scr\"\n\t\tfi\n\t\t[ \"$__is_fzf_preview\" -eq 0 ] && command_exists \"on_startup_$_scr\" && \"on_startup_$_scr\"\n\t\tprint_debug \"[LOADING]: Loaded scraper: $_scr\"\n\tdone\n\tend_of_set_args\n}\n\nextension_is_loaded() {\n\tcase \"$loaded_extensions\" in\n\t#the extension may be at the middle, beginning, or end\n\t#spaces must be accounted differently\n\t*\" $1 \"* | \"$1 \"* | *\" $1\") return 0 ;;\n\t*) return 1 ;;\n\tesac\n}\n\nload_extension() {\n\text=$1\n\tloaded_extensions=\"$loaded_extensions $(printf \"%s\" \"${ext##*/}\" | sed 's/[ -]/_/g')\"\n\tloaded_extensions=\"${loaded_extensions# }\"\n\n\tprepare_for_set_args\n\tfor path in \"${YTFZF_EXTENSIONS_DIR}/${ext}\" \"${YTFZF_SYSTEM_ADDON_DIR}/extensions/${ext}\" \"${ext}\"; do\n\t\tif [ -f \"${path}\" ]; then\n\t\t\t__loaded_path=\"${path}\" . \"${path}\"\n\t\t\trv=\"$?\"\n\t\t\tbreak\n\t\telse\n\t\t\trv=127\n\t\tfi\n\tdone\n\tend_of_set_args\n\n\tprint_debug \"[LOADING]: loaded extension: ${ext} with exit code: ${rv}\"\n\n\treturn $rv\n}\n\n#for extensions succh as __ytfzf__\nload_fake_extension() {\n\t_should_be_first=\"$2\"\n\tif [ \"${_should_be_first:-0}\" -eq 1 ]; then\n\t\tloaded_extensions=\"$1 ${loaded_extensions}\"\n\telse\n\t\tloaded_extensions=\"${loaded_extensions} $1\"\n\t\tloaded_extensions=\"${loaded_extensions# }\"\n\tfi\n\n\tcommand_exists \"on_load_fake_extension_$1\" && on_load_fake_extension_\"$1\"\n\tprint_debug \"[LOADING]: fake extension: $1 loaded\"\n}\n\nload_sort_name() {\n\t_sort_name=$1\n\t# shellcheck disable=SC1090\n\t# shellcheck disable=SC2015\n\tcase \"$_sort_name\" in\n\t./* | ../* | /* | ~/*) command_exists \"$_sort_name\" && . \"$_sort_name\" ;;\n\t*)\n\t\tif [ -f \"${YTFZF_SORT_NAMES_DIR}/${_sort_name}\" ]; then\n\t\t\t. \"${YTFZF_SORT_NAMES_DIR}/${_sort_name}\"\n\t\telif [ -f \"${YTFZF_SYSTEM_ADDON_DIR}/sort-names/${_sort_name}\" ]; then\n\t\t\t. \"${YTFZF_SYSTEM_ADDON_DIR}/sort-names/${_sort_name}\"\n\t\telse\n\t\t\tfalse\n\t\tfi\n\t\t;;\n\tesac\n\trv=\"$?\"\n\tunset \"$_sort_name\"\n\tprint_debug \"[LOADING]: loaded sort name: ${_sort_name} with exit code: ${rv}\"\n\treturn \"$rv\"\n}\n\nload_url_handler() {\n\trequested_url_handler=$1\n\tif command_exists \"$requested_url_handler\"; then\n\t\turl_handler=\"${requested_url_handler:-multimedia_player}\"\n\telse\n\t\tfor path in \"$YTFZF_URL_HANDLERS_DIR\" \"$YTFZF_SYSTEM_ADDON_DIR/url-handlers\"; do\n\t\t\t[ -f \"${path}/${requested_url_handler}\" ] && url_handler=\"${path}/${requested_url_handler}\" && return\n\t\tdone\n\t\tdie 2 \"$1 is not a url-handler\"\n\tfi\n\tprint_debug \"[LOADING]: loaded url handler: ${requested_url_handler}\"\n}\n\nload_interface() {\n\trequested_interface=\"$1\"\n\t# if we don't check which interface, itll try to source $YTFZF_CUSTOM_INTERFACES_DIR/{ext,scripting} which won't work\n\t# shellcheck disable=SC1090\n\tcase \"$requested_interface\" in\n\t\"ext\" | \"scripting\" | \"\")\n\t\tinterface=$requested_interface\n\t\ttrue\n\t\t;;\n\t./* | ../* | /* | ~/*)\n\t\t[ -f \"$requested_interface\" ] && . \"$requested_interface\" && interface=\"${requested_interface##*/}\"\n\t\tfalse\n\t\t;;\n\t*)\n\t\tif [ -f \"${YTFZF_CUSTOM_INTERFACES_DIR}/${requested_interface}\" ]; then\n\t\t\tinterface=$requested_interface\n\t\t\t. \"$YTFZF_CUSTOM_INTERFACES_DIR/$requested_interface\"\n\t\telif [ -f \"${YTFZF_SYSTEM_ADDON_DIR}/interfaces/${requested_interface}\" ]; then\n\t\t\tinterface=$requested_interface\n\t\t\t. \"${YTFZF_SYSTEM_ADDON_DIR}/interfaces/${requested_interface}\"\n\t\t\ttrue\n\t\tfi\n\t\t;;\n\tesac\n\trv=\"$?\"\n\tunset requested_interface\n\tprint_debug \"[LOADING]: loaded interface: ${requested_interface}\"\n\treturn \"$rv\"\n}\n\nload_thumbnail_viewer() {\n\t_thumbnail_viewer=\"$1\"\n\tcase \"$_thumbnail_viewer\" in\n\t# these are special cases, where they are not themselves commands\n\tchafa-16 | chafa | chafa-tty | chafa-sixel | catimg | catimg-256 | imv | ueberzug | iterm2 | swayimg | mpv | sixel | kitty | sway | wayland)\n\t\tthumbnail_viewer=\"$_thumbnail_viewer\"\n\t\ttrue\n\t\t;;\n\tswayimg-hyprland)\n\t\tprint_warning \"swayimg-hyprland thumbnail viewer may mess up any rules you have for swayimg\"\n\t\tthumbnail_viewer=\"$_thumbnail_viewer\"\n\t\t;;\n\t./* | /* | ../* | ~/*)\n\t\tthumbnail_viewer=\"$_thumbnail_viewer\"\n\t\tfalse\n\t\t;;\n\t*)\n\t\tif [ -f \"${YTFZF_THUMBNAIL_VIEWERS_DIR}/${_thumbnail_viewer}\" ]; then\n\t\t\tthumbnail_viewer=\"${YTFZF_THUMBNAIL_VIEWERS_DIR}/${_thumbnail_viewer}\"\n\t\telse\n\t\t\tthumbnail_viewer=\"${YTFZF_SYSTEM_ADDON_DIR}/thumbnail-viewers/$_thumbnail_viewer\"\n\t\tfi\n\t\tfalse\n\t\t;;\n\tesac\n\trv=\"$?\"\n\tprint_debug \"[LOADING]: loaded thumbnail viewer: ${_thumbnail_viewer}\"\n\tunset _thumbnail_viewer\n\treturn $rv\n}\n#}}}\n\n# Logging {{{\n\n_print_to_log_and_stderr() {\n\ttee -a \"${YTFZF_LOGFILE:-/dev/null}\" <<EOF >&2\n$(printf -- \"$1\")\nEOF\n}\n\nprint_debug() {\n\t[ \"${YTFZF_LOGFILE}\" ] && pre_text=\"[DEBUG]\" || pre_text=\"${c_blue}[DEBUG]${c_reset}\"\n\t[ \"$log_level\" -ge 3 ] && _print_to_log_and_stderr \"${pre_text}: $1\"\n\treturn 0\n}\nprint_info() {\n\t[ \"$log_level\" -ge 2 ] && _print_to_log_and_stderr \"$1\"\n}\nprint_warning() {\n\t[ \"${YTFZF_LOGFILE}\" ] && pre_text=\"[WARNING]\" || pre_text=\"${c_yellow}[WARNING]${c_reset}\"\n\t[ \"$log_level\" -ge 1 ] && _print_to_log_and_stderr \"${pre_text}: $1\"\n}\nprint_error() {\n\t[ \"${YTFZF_LOGFILE}\" ] && pre_text=\"[ERROR]\" || pre_text=\"${c_red}[ERROR]${c_reset}\"\n\t[ \"$log_level\" -ge 0 ] && _print_to_log_and_stderr \"${pre_text}: $1\"\n}\n\ndie() {\n\t_return_status=$1\n\tprint_error \"$2\"\n\texit \"$_return_status\"\n}\n\n#}}}\n\n# urlhandlers{{{\n# job of url handlers is:\n# handle the given urls, and take into account some requested attributes, eg: video_pref, and --detach\n# print what the handler is doing\nvideo_player() {\n\t# this function should not be set as the url_handler as it is part of multimedia_player\n\tcommand_exists \"mpv\" || die 3 \"mpv is not installed\\n\"\n\t[ \"$is_detach\" -eq 1 ] && use_detach_cmd=detach_cmd || use_detach_cmd=''\n\t# shellcheck disable=SC2086\n\tunset IFS\n\t$use_detach_cmd mpv --ytdl-format=\"$ytdl_pref\" $(eval echo \"$url_handler_opts\") \"$@\"\n}\n\naudio_player() {\n\t# this function should not be set as the url_handler as it is part of multimedia_player\n\tcommand_exists \"mpv\" || die 3 \"mpv is not installed\\n\"\n\t# shellcheck disable=SC2086\n\tunset IFS\n\tcase \"$is_detach\" in\n\t0) mpv --no-video --ytdl-format=\"$ytdl_pref\" $(eval echo \"$url_handler_opts\") \"$@\" ;;\n\t1) detach_cmd mpv --force-window --no-video --ytdl-format=\"$ytdl_pref\" $(eval echo \"$url_handler_opts\") \"$@\" ;;\n\tesac\n}\n\nmultimedia_player() {\n\t# this function differentiates whether or not audio_only was requested\n\tcase \"$is_audio_only\" in\n\t0) video_player \"$@\" ;;\n\t1) audio_player \"$@\" ;;\n\tesac\n}\n\ndownloader() {\n\tcommand_exists \"${ytdl_path}\" || die 3 \"${ytdl_path} is not installed\\n\"\n\t[ \"$is_detach\" -eq 1 ] && use_detach_cmd=detach_cmd || use_detach_cmd=''\n\tprepare_for_set_args\n\t# shellcheck disable=SC2086\n\tcase $is_audio_only in\n\t0) $use_detach_cmd \"${ytdl_path}\" -f \"${ytdl_pref}\" $ytdl_opts \"$@\" ;;\n\t1) $use_detach_cmd \"${ytdl_path}\" -x -f \"${audio_pref}\" $ytdl_opts \"$@\" ;;\n\tesac && _success=\"finished\" || _success=\"failed\"\n\t[ \"$notify_playing\" -eq 1 ] && notify-send -c ytfzf \"Ytfzf Info\" \"Download $_success\"\n\n\tend_of_set_args\n}\n# }}}\n\n# Searching {{{\nget_search_from_source() {\n\tsource=$1\n\tshift\n\tprepare_for_set_args \":\"\n\tfor src in $source; do\n\t\tend_of_set_args\n\t\tcase \"$src\" in\n\t\targs) _search=\"$initial_search\" ;;\n\t\tprompt) search_prompt_menu_wrapper ;;\n\t\tfn-args) _search=\"$*\" ;;\n\t\t*) command_exists \"get_search_from_$src\" && get_search_from_\"$src\" \"$@\" ;;\n\t\tesac\n\t\t[ \"$_search\" ] && break\n\tdone\n}\n\n# }}}\n\n#Misc{{{\nclean_up() {\n\tdo_an_event_function on_clean_up\n}\n\nusage() {\n\tunset IFS\n\tset -f\n\tfor ext in $loaded_extensions; do\n\t\tif command_exists \"print_help_$ext\"; then\n\t\t\tprintf \"\\n----%s----\\n\" \"$ext\"\n\t\t\t\"print_help_$ext\"\n\t\tfi\n\tdone\n}\n\n# }}}\n# }}}\n\n# Traps {{{\n[ $__is_fzf_preview -eq 0 ] && trap 'clean_up' EXIT\n[ $__is_fzf_preview -eq 0 ] && trap 'exit' INT TERM HUP\n#}}}\n\n# Global Variables and Start Up {{{\n\nset_vars() {\n\n\tcheck_exists=\"${1:-1}\"\n\n\t# save the ecurrent environment so that any user set variables will be saved\n\tif [ \"$check_exists\" -eq 1 ]; then\n\t\ttmp_env=\"${YTFZF_TEMP_DIR}/ytfzf-env-$$\"\n\t\texport -p >\"$tmp_env\"\n\tfi\n\n\t# debugging\n\tlog_level=\"2\" thumbnail_debug_log=\"/dev/null\"\n\n\t# global vars\n\n\tgap_space=\"                             \"\n\tnew_line='\n    ' tab_space=$(printf '\\t')\n\t#necessary as a seperator for -W\n\tEOT=\"$(printf '\\003')\"\n\n\tif [ \"${COLUMNS:-$TTY_COLS}\" ] && [ \"${LINES:-$TTY_LINES}\" ]; then\n\t\tTTY_COLS=\"${COLUMNS:-$TTY_COLS}\"\n\t\tTTY_LINES=\"${LINES:-$TTY_LINES}\"\n\telif command_exists \"tput\"; then\n\t\tTTY_COLS=$(tput cols 2>/dev/null)\n\t\tTTY_LINES=$(tput lines 2>/dev/null)\n\telif [ \"${stty_cols_lines:=$(stty size 2>/dev/null)}\" ]; then #set the var here to avoid running stty size twice.\n\t\tTTY_LINES=\"${stty_cols_lines% *}\"\n\t\tTTY_COLS=\"${stty_cols_lines#* }\"\n\telse\n\t\tprint_warning \"Could not determine terminal size, defaulting to 80 COLUMNS x 25 LINES\"\n\t\tTTY_COLS=80\n\t\tTTY_LINES=25\n\tfi\n\n\t#config vars\n\n\tsearch_source=args:prompt\n\n\t# scraping\n\tuseragent=\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Safari/537.36\"\n\n\t# menu options\n\n\tpreview_window_width=50%\n\n\tenable_submenus=\"1\" submenu_opts=\"\" submenu_scraping_opts=\"\" enable_back_button=\"1\"\n\tkeep_vars=0\n\n\tinterface=\"\"\n\n\tfancy_subs=\"0\" fancy_subs_left=\"-------------\" fancy_subs_right=\"${fancy_subs_right=$fancy_subs_left}\"\n\n\tfzf_preview_side=\"left\" thumbnail_viewer=\"ueberzug\"\n\n\t#actions are slow, disable if you want to increase runtime speed by 15ms\n\tenable_actions=1\n\n\tselection_meta_key=\"alt\"\n\taction_meta_key=\"ctrl\"\n\n\t# shortcuts\n\tdownload_shortcut=\"${selection_meta_key}-d\" video_shortcut=\"${selection_meta_key}-v\" audio_shortcut=\"${selection_meta_key}-m\" detach_shortcut=\"${selection_meta_key}-e\" print_link_shortcut=\"${selection_meta_key}-l\" show_formats_shortcut=\"${selection_meta_key}-f\" info_shortcut=\"${selection_meta_key}-i\" search_again_shortcut=\"${selection_meta_key}-s\"\n\n\tnext_page_action_shortcut=\"${action_meta_key}-p\"\n\n\t# interface design\n\tshow_thumbnails=\"0\" is_sort=\"0\" skip_thumb_download=\"0\" external_menu_len=\"210\"\n\n\tis_loop=\"0\" search_again=\"0\"\n\n\t# Notifications\n\n\tnotify_playing=\"0\"\n\n\t# directories\n\tcache_dir=\"${XDG_CACHE_HOME:-$HOME/.cache}/ytfzf\" keep_cache=\"0\"\n\n\t# history\n\tenable_hist=\"1\" enable_search_hist=\"1\"\n\n\t# format options\n\t# variable for switching on sort (date)\n\tis_detach=\"0\" is_audio_only=\"0\"\n\turl_handler=\"multimedia_player\"\n\turl_handler_opts=\"\"\n\tinfo_to_print=\"\" info_wait=\"0\" info_wait_action=\"q\"\n\tvideo_pref=\"bestvideo\" audio_pref=\"bestaudio\"\n\tshow_formats=\"0\" format_selection_screen=\"simple\" format_selection_sort=\"height\"\n\n\tscripting_video_count=\"1\"\n\tis_random_select=\"0\" is_auto_select=\"0\" is_specific_select=\"0\"\n\n\t# option parsing\n\tlong_opt_char=\"-\"\n\n\t# scrape\n\tscrape=\"youtube\"\n\t# this comes from invidious' api\n\tthumbnail_quality=\"high\"\n\tsub_link_count=\"2\"\n\n\tyt_video_link_domain=\"https://youtube.com\"\n\tsearch_sort_by=\"relevance\" search_upload_date=\"\" search_video_duration=\"\" search_result_type=\"video\" search_result_features=\"\" search_region=\"US\"\n\tpages_to_scrape=\"\" pages_start=\"\"\n\tnsfw=\"false\" odysee_video_search_count=\"30\"\n\n\tmulti_search=\"0\"\n\n\tcustom_scrape_search_exclude=\"\" scrape_search_exclude=\" youtube-subscriptions S SI SL T youtube-trending H history from-cache \"\n\n\tmax_thread_count=\"20\"\n\n\t# When set to 1, instead of having to wait for thumbnails to download\n\t# The menu opens immediately while thumbnails download in the background\n\tasync_thumbnails=\"0\"\n\n\t#misc\n\tinstances_url=\"https://api.invidious.io/instances.json?sort_by=type,health,api\"\n\tinstances_file=\"$cache_dir/instancesV2.json\"\n\n\t# read from environment to reset any variables to what the user set\n\n\tif [ \"$check_exists\" -eq 1 ]; then\n\t\t_current_var_name=\n\t\t_current_var_value=\n\t\twhile read -r _var; do\n\t\t\t[ -z \"$_var\" ] && continue\n\t\t\tcase \"$_var\" in\n\t\t\texport\" \"*)\n\t\t\t\t[ \"$_current_var_name\" ] && {\n\t\t\t\t\texport \"${_current_var_name}\"=\"$(eval echo \"$_current_var_value\")\"\n\t\t\t\t\t_current_var_name=\"\"\n\t\t\t\t\t_current_var_value=\"\"\n\t\t\t\t}\n\t\t\t\t_current_var_name=\"${_var#\"export \"}\"\n\t\t\t\t_current_var_name=\"${_current_var_name%%=*}\"\n\t\t\t\t_current_var_value=\"${_var#*=}\"\n\t\t\t\t;;\n\t\t\t*) _current_var_value=\"${_current_var_value}${new_line}${_var}\" ;;\n\t\t\tesac\n\t\tdone <\"$tmp_env\"\n\t\t[ \"$_current_var_name\" ] && {\n\t\t\texport \"${_current_var_name}\"=\"$(eval echo \"$_current_var_value\")\"\n\t\t\t_current_var_name=\"\"\n\t\t\t_current_var_value=\"\"\n\t\t}\n\n\t\trm \"$tmp_env\"\n\tfi\n\tunset check_exists _var _current_var_name _current_var_value\n}\n\nset_vars \"${check_vars_exists}\"\n\n# hard dependency checks{{{\nmissing_deps=\"\"\nfor dep in jq curl; do\n\tcommand_exists \"$dep\" || missing_deps=\"${missing_deps}, ${dep}\"\ndone\n[ \"$missing_deps\" ] && die 3 \"You are missing the following required dependencies${missing_deps}, Please install them.\"\nunset missing_deps\n#}}}\n\n# shellcheck disable=SC1090\n[ -f \"$YTFZF_CONFIG_FILE\" ] && . \"$YTFZF_CONFIG_FILE\"\n\nload_fake_extension \"__ytfzf__\" \"1\"\n\n# }}}\n\n# Scraping {{{\n\n############################\n#         SCRAPERS         #\n############################\n\n#############\n# ARGUMENTS #\n#############\n\n# Scrapers take 2 arguments:\n# 1: the search query (do not store in a variable called $_search, it is preferable to use $search, $c_search, or $const_search)\n# Do not use the global $_search variable directly as $1 may be different.\n# 2: the file to write the finished json to (the standard name for this variable is $output_json_file)\n\n#############\n#   FILES   #\n#############\n\n# Store all temp files in $session_temp_dir with a name prefix that matches the scraper name.\n# Even better all temp files can be in $session_temp_dir/$scrape_name, no name prefix required.\n\n##############\n# EXIT CODES #\n##############\n\n# 0: success\n# 1: failed to load website, or general error\n# 100: :help search query\n#----curl errors-----\n# Even if not using curl, return these values.\n# 6: Unresponsive website\n# 22: General request error\n\n####################\n# RESPONSIBILITIES #\n####################\n\n# Scrapers are responsible for the following\n\n# * If the search query is exactly: \":help\", it should:\n# 1. print a little information on what the scraper does, and how to use it\n# 2. return 100\n\n# * All other search words starting with : may be treated as special operators, you can do anything you want with them.\n# * Currently :help is the only standard operator.\n\n# * Lastly the scraper should create a json and store it in $2\n# The required keys are:\n# ID (string): (a unique identifier for the video can be anything really)\n# url (string): the url that will be opened when the video is selected.\n# title (string): The tittle of the video.\n# scraper (string): the name of the scraper.\n# Optional keys include:\n# thumbs (string): Link to a thumbnail (no, \"thumbs\" is not a typo)\n# channel (string): The author of the video (Should be human readable)\n# duration (string): Length of the video (Should be human readable)\n# views (string): view count\n# date (string): The upload date (should be human readable).\n# action (string): An action that should be read by the handle_actions function when the video is selected.\n# For information on how to format an action, see the handle_actions function.\n\n# Scraping backends {{{\n\n_start_series_of_threads() {\n\t_thread_count=0\n}\n\n_thread_started() {\n\t_latest_fork=\"$1\"\n\t_thread_count=$((_thread_count + 1))\n\t[ $_thread_count -ge $max_thread_count ] && wait \"$_latest_fork\" && _thread_count=$(jobs -p | wc -l)\n}\n\nset_real_channel_url_and_id() {\n\t_input_url=\"$1\"\n\tcase \"$_input_url\" in\n\t*/videos | */streams | */playlists) _input_url=\"${_input_url%/*}\" ;;\n\tesac\n\t_id=\"$(_get_channel_id \"$_input_url\")\"\n\t[ \"$_id\" = \"$_input_url\" ] &&\n\t\t_url=\"$(_get_real_channel_link \"$_input_url\")\" && _id=\"$(_get_channel_id \"$_url\")\"\n\tprint_debug \"[SCRAPE]: input url: $_input_url, detected url: $_url, detected id: $_id\"\n\tchannel_url=\"$_url\" channel_id=\"$_id\"\n\tunset _url _id _input_url\n}\n\n#}}}\n\n## Youtube  {{{\n# Youtube backend functions {{{\n\n_youtube_channel_name() {\n\t# takes channel page html (stdin) and returns the channel name\n\tsed -n 's/.*[<]title[>]\\(.*\\) - YouTube[<]\\/title[>].*/\\1/p' |\n\t\tsed \\\n\t\t\t-e \"s/&apos;/'/g\" \\\n\t\t\t-e \"s/&#39;/'/g\" \\\n\t\t\t-e \"s/&quot;/\\\"/g\" \\\n\t\t\t-e \"s/&#34;/\\\"/g\" \\\n\t\t\t-e \"s/&amp;/\\&/g\" \\\n\t\t\t-e \"s/&#38;/\\&/g\"\n}\n\n_youtube_get_json() {\n\t# Separates the json embedded in the youtube html page\n\t# * removes the content after ytInitialData\n\t# * removes all newlines and trims the json out\n\tsed -n '/var *ytInitialData/,$p' |\n\t\ttr -d '\\n' |\n\t\tsed ' s_^.*var ytInitialData *=__ ; s_;</script>.*__ ;'\n}\n\n_youtube_channel_playlists_json() {\n\tchannel_name=\"$1\"\n\tjq ' [..|.items?|select(.!=null) | flatten(1) | .[] |\n        {\n            scraper: \"youtube_channel_playlist\",\n            ID: .gridPlaylistRenderer.playlistId,\n            thumbs: .gridPlaylistRenderer.thumbnail.thumbnails[0].url,\n            title: .gridPlaylistRenderer.title.runs[0].text,\n            channel: \"'\"$channel_name\"'\",\n            url: \"'\"$yt_video_link_domain\"'/playlist?list=\\(.gridPlaylistRenderer.playlistId)\",\n            duration: \"\\(.gridPlaylistRenderer.videoCountText.runs[0].text) videos\",\n\t\t\taction: \"scrape type=invidious-playlist search='\"${yt_video_link_domain}\"'/playlist?list=\\(.gridPlaylistRenderer.playlistId)\"\n        }]'\n}\n\n_youtube_channel_json() {\n\tchannel_name=$1\n\t__scr=\"$2\"\n\tjq '[..|.richGridRenderer?|select(.!=null)|..|.contents?|select(.!=null)|..|.richItemRenderer?|select(.!=null) |\n\t    {\n\t\tscraper: \"'\"$__scr\"'\",\n\t    \tID: .content.videoRenderer.videoId,\n\t\turl: \"'\"$yt_video_link_domain\"'/watch?v=\\(.content.videoRenderer.videoId)\",\n\t\ttitle: .content.videoRenderer.title.runs[0].text,\n\t    \tchannel: \"'\"$channel_name\"'\",\n\t    \tthumbs: .content.videoRenderer.thumbnail.thumbnails[2].url|sub(\"\\\\?.*\";\"\"),\n\t    \tduration: .content.videoRenderer.lengthText.simpleText,\n            views: \"\\(.content.videoRenderer.lengthText.simpleText | split(\"views\")[0])\",\n\t    \tdate: .content.videoRenderer.publishedTimeText.simpleText,\n            description: .content.videoRenderer.descriptionSnippet.runs[0].text\n\t    }\n\t]'\n}\n#}}}\n\nscrape_yt() {\n\tsearch=$1\n\t[ \"$search\" = \":help\" ] && print_info \"Scrape youtube without invidious\" && return 100\n\toutput_json_file=$2\n\t_tmp_html=\"${session_temp_dir}/yt-search.html\"\n\t_tmp_json=\"${session_temp_dir}/yt-search.json\"\n\n\tprintf \"%s\\n\" \"Scraping Youtube (with https://www.youtube.com) ($search)\"\n\n\t_get_request \"https://www.youtube.com/results\" \\\n\t\t-G --data-urlencode \"search_query=$search\" \\\n\t\t-H \"User-Agent: $4\" \\\n\t\t-H 'Accept-Language: en-US,en;q=0.9' \\\n\t\t--compressed >\"$_tmp_html\" || exit \"$?\"\n\tsed -n '/var *ytInitialData/,$p' <\"$_tmp_html\" |\n\t\ttr -d '\\n' |\n\t\tsed -E ' s_^.*var ytInitialData ?=__ ; s_;</script>.*__ ;' >\"$_tmp_json\"\n\n\t#gets a list of videos\n\t{\n\t\tjq '[ .contents|\n\t..|.videoRenderer? |\n\tselect(. !=null) |\n\t\t{\n\t\t\tscraper: \"youtube_search\",\n\t\t\turl: \"'\"${yt_video_link_domain}\"'/watch?v=\\(.videoId)\",\n\t\t\ttitle: .title.runs[0].text,\n\t\t\tchannel: .longBylineText.runs[0].text,\n\t\t\tduration:.lengthText.simpleText,\n\t\t\tviews: .shortViewCountText.simpleText,\n\t\t\tdate: .publishedTimeText.simpleText,\n\t\t\tdescription: .detailedMetadataSnippets[0].snippetText.runs[0].text,\n\t\t\tID: .videoId,\n\t\t\tthumbs: .thumbnail.thumbnails[0].url\n\t\t}\n\t]'\n\n\t\tjq '[ .contents|\n\t..|.playlistRenderer? |\n\tselect(. !=null) |\n\t\t{\n\t\t\tscraper: \"youtube_search\",\n\t\t\turl: \"'\"${yt_video_link_domain}\"'/playlist?list=\\(.videoId)\",\n\t\t\ttitle: \"[Playlist] \\(.title.simpleText)\",\n\t\t\tchannel: .longBylineText.runs[0].text,\n\t\t\tduration: \"\\(.videoCount) videos\",\n\t\t\tviews: \"playlist\",\n\t\t\tdate: \"playlist\",\n\t\t\tID: .playlistId,\n\t\t\tthumbs: .thumbnails[0].thumbnails[0].url,\n\t\t\taction: \"scrape type=invidious-playlist search='\"${yt_video_link_domain}\"'/playlist?list=\\(.playlistId)\"\n\t\t}\n\t]'\n\t} <\"$_tmp_json\" >>\"$output_json_file\"\n}\n\nscrape_subscriptions() {\n\t! [ -f \"$YTFZF_SUBSCRIPTIONS_FILE\" ] && die 2 \"subscriptions file doesn't exist\"\n\n\t# if _tmp_subfile does not have a unique name, weird things happen\n\t__subfile_line=-1\n\t_start_series_of_threads\n\twhile read -r channel_url || [ -n \"$channel_url\" ]; do\n\n\t\t__subfile_line=$((__subfile_line + 1))\n\n\t\tchannel_url=$(trim_blank \"${channel_url%%#*}\")\n\n\t\t[ -z \"$channel_url\" ] && continue\n\t\t__subfile_line=$((__subfile_line + 1))\n\t\t{\n\t\t\tprint_info \"Scraping subscription: ${channel_url} (https://www.youtube.com)\"\n\t\t\t_tmp_subfile=\"${session_temp_dir}/channel-$__subfile_line\"\n\t\t\t_tmp_html=\"${session_temp_dir}/${tmp_filename}${__subfile_line}.html\"\n\t\t\t_tmp_json=\"${session_temp_dir}/${tmp_filename}${__subfile_line}.json\"\n\t\t\tset_real_channel_url_and_id \"$channel_url\"\n\t\t\t_get_request \"https://www.youtube.com/channel/${channel_id}/videos\" >\"$_tmp_html\"\n\t\t\t_youtube_get_json <\"$_tmp_html\" >\"$_tmp_json\"\n\n\t\t\tchannel_name=$(_youtube_channel_name <\"$_tmp_html\")\n\t\t\t_youtube_channel_json \"$channel_name\" \"youtube_channel_$mod\" <\"$_tmp_json\" >>\"$_tmp_subfile\"\n\t\t\t__new_data=\"$(jq '.[].scraper=\"subscriptions\"' <\"$_tmp_subfile\")\"\n\t\t\tprintf \"%s\\n\" \"$__new_data\" >\"$_tmp_subfile\"\n\t\t\tif [ ${fancy_subs} -eq 1 ]; then\n\t\t\t\tjq --arg left \"${fancy_subs_left}\" --arg right \"${fancy_subs_right}\" '\"\\($left + .[0].channel + $right)\" as $div | [{\"title\": $div, \"action\": \"do-nothing\", \"url\": $div, \"ID\": \"subscriptions-channel:\\(.[0].channel)\" }] + .[0:'\"$sub_link_count\"']' <\"$_tmp_subfile\"\n\t\t\telse\n\t\t\t\tjq '.[0:'\"$sub_link_count\"']' <\"$_tmp_subfile\"\n\t\t\tfi >>\"$ytfzf_video_json_file\"\n\t\t} &\n\t\t_thread_started \"$!\"\n\t\tsleep 0.01\n\tdone <\"$YTFZF_SUBSCRIPTIONS_FILE\"\n\twait\n}\nscrape_youtube_subscriptions() { scrape_subscriptions \"$@\"; }\nscrape_S() { scrape_subscriptions \"$@\"; }\nscrape_s() { scrape_subscriptions \"$@\"; }\n\nscrape_SI() {\n\toutput_json_file=\"$2\"\n\t_curl_config_file=\"${session_temp_dir}/curl_channels\"\n\t: >\"$_curl_config_file\"\n\n\twhile read -r url; do\n\t\turl=$(trim_blank \"${url%%#*}\")\n\n\t\t[ -z \"$url\" ] && continue\n\n\t\tset_real_channel_url_and_id \"$url\"\n\n\t\tchannel_url=\"$invidious_instance/api/v1/channels/$channel_id\"\n\n\t\t_tmp_file=\"${session_temp_dir}/SI-${channel_id}.json\"\n\n\t\tprintf \"url=\\\"%s\\\"\\noutput=\\\"%s\\\"\\n\" \"$channel_url\" \"$_tmp_file\" >>\"${_curl_config_file}\"\n\n\tdone <\"${YTFZF_SUBSCRIPTIONS_FILE}\"\n\n\t_tmp_json=\"${session_temp_dir}/SI.json\"\n\n\tprint_info \"Scraping subscriptions with instance: $invidious_instance\"\n\n\tcurl -fLZ --parallel-max \"${max_thread_count}\" -K \"$_curl_config_file\"\n\t[ $? -eq 2 ] && curl -fL -K \"$_curl_config_file\"\n\n\tset +f\n\t#this pipeline does the following:\n\t#   1. concatinate every channel json downloaded (cat)\n\t#   2. if the json is the newer-style, convert it to a list of videos (jq part 1)\n\t#   3. if fancy_subs -eq 1\n\t#   1.  add fancy subs and slice the amount of videos the user wants (jq part 2)\n\t#   4. else\n\t#   1.  slice the amount of videos the user wants.\n\t#   5. convert to ytfzf json format\n\n\t_get_invidious_thumb_quality_name\n\n\tcat \"${session_temp_dir}/SI-\"*\".json\" |\n\t\tjq 'if (.videos|type) == \"array\" then .videos elif (.latestVideos|type) == \"array\" then .latestVideos else null end' | if [ \"$fancy_subs\" -eq 1 ]; then\n\t\tjq --arg left \"${fancy_subs_left}\" --arg right \"${fancy_subs_right}\" '\"\\($left + .[0].author + $right)\" as $div | [{\"title\": $div, \"action\": \"do-nothing\", \"url\": $div, \"ID\": \"subscriptions-channel:\\(.[0].channel)\" }] + .[0:'\"$sub_link_count\"']'\n\telse\n\t\tjq '.[0:'\"$sub_link_count\"']' | _invidious_search_json_generic \"SI\"\n\tfi >>\"$output_json_file\"\n\tset -f\n}\n\nscrape_si() { scrape_SI \"$@\"; }\n\nscrape_youtube_channel() {\n\tchannel_url=\"$1\"\n\t[ \"$channel_url\" = \":help\" ] && print_info \"The search should be a link to a youtube channel${new_line}You can put one or more of the following modifiers followed by a space before the url to specify which type of videos to scrape:${new_line}:videos${new_line}:streams${new_line}:playlists${new_line}:v, :s, and :p may also be used as a shorter version${new_line}You may also use --type=live, --type=video, --type=playlist, or --type=all\" && return 100\n\toutput_json_file=\"$2\"\n\n\tprepare_for_set_args\n\t#shellcheck disable=2086\n\tset -- $1\n\tend_of_set_args\n\tmodifiers=\"\"\n\n\t# support the --features=live argument\n\tcase \"$search_result_features\" in\n\t*live*) modifiers=\"streams\" ;;\n\t*video*) modifiers=\"$modifiers videos\" ;;\n\t*playlist*) modifiers=\"$modifiers playlists\" ;;\n\tesac\n\n\t#support --type=playlist, etc\n\tprepare_for_set_args \",\"\n\tfor _type in $search_result_type; do\n\t\tcase \"$_type\" in\n\t\tall) modifiers=\"streams playlists videos\" ;;\n\t\tvideo) modifiers=\"$modifiers videos\" ;;\n\t\t*) modifiers=\"$modifiers $_type\" ;;\n\t\tesac\n\tdone\n\tend_of_set_args\n\n\tunset IFS\n\n\tfor arg in \"$@\"; do\n\t\tcase \"$arg\" in\n\t\t:videos | :streams | :playlists) modifiers=\"$modifiers ${arg#:}\" ;; #starts with a colon to have  consistency with the search operator syntax.\n\t\t:v) modifiers=\"$modifiers videos\" ;;\n\t\t:p) modifiers=\"$modifiers playlists\" ;;\n\t\t:s | :l) modifiers=\"$modifiers streams\" ;;\n\t\t*)\n\t\t\tchannel_url=$arg\n\t\t\tbreak\n\t\t\t;;\n\t\tesac\n\tdone\n\n\tmodifiers=$(trim_blank \"$modifiers\")\n\n\t[ -z \"$modifiers\" ] && modifiers=\"videos\"\n\n\tset_real_channel_url_and_id \"$channel_url\"\n\n\tfor mod in $modifiers; do\n\t\tprint_info \"Scraping Youtube channel: https://www.youtube.com/channel/${channel_id}/$mod\"\n\t\ttmp_filename=\"channel-${channel_id}-$mod\"\n\t\t_tmp_html=\"${session_temp_dir}/${tmp_filename}.html\"\n\t\t_tmp_json=\"${session_temp_dir}/${tmp_filename}.json\"\n\n\t\t_get_request \"https://www.youtube.com/channel/${channel_id}/$mod\" >\"$_tmp_html\"\n\t\t_youtube_get_json <\"$_tmp_html\" >\"$_tmp_json\"\n\n\t\tchannel_name=$(_youtube_channel_name <\"$_tmp_html\")\n\t\tif [ \"$mod\" = \"playlists\" ]; then\n\t\t\t_youtube_channel_playlists_json \"$channel_name\" <\"$_tmp_json\"\n\t\telse\n\t\t\t_youtube_channel_json \"$channel_name\" \"youtube_channel_$mod\" <\"$_tmp_json\"\n\t\tfi >>\"$output_json_file\"\n\tdone\n}\n\n# }}}\n\n## Invidious {{{\n# invidious backend functions {{{\n_get_channel_id() {\n\tlink=\"$1\"\n\tlink=\"${link##*channel/}\"\n\tlink=\"${link%/*}\"\n\tprintf \"%s\" \"$link\"\n}\n\n_get_invidious_thumb_quality_name() {\n\tcase \"$thumbnail_quality\" in\n\thigh) thumbnail_quality=\"hqdefault\" ;;\n\tmedium) thumbnail_quality=\"mqdefault\" ;;\n\tstart) thumbnail_quality=\"1\" ;;\n\tmiddle) thumbnail_quality=\"2\" ;;\n\tend) thumbnail_quality=\"3\" ;;\n\tesac\n}\n\n_invidious_search_json_playlist() {\n\tjq '[ .[] | select(.type==\"playlist\") |\n\t\t{\n\t\t\tscraper: \"invidious_search\",\n\t\t\tID: .playlistId,\n\t\t\turl: \"'\"${yt_video_link_domain}\"'/playlist?list=\\(.playlistId)\",\n\t\t\ttitle: \"[playlist] \\(.title)\",\n\t\t\tchannel: .author,\n\t\t\tthumbs: .playlistThumbnail,\n\t\t\tduration: \"\\(.videoCount) videos\",\n\t\t\taction: \"scrape type=invidious-playlist search='\"${yt_video_link_domain}\"'/playlist?list=\\(.playlistId)\"\n\t\t}\n\t]'\n}\n_invidious_search_json_channel() {\n\tjq '\n\t[ .[] | select(.type==\"channel\") |\n\t\t{\n\t\t\tscraper: \"invidious_search\",\n\t\t\tID: .authorId,\n\t\t\turl: \"'\"${yt_video_link_domain}\"'/channel/\\(.authorId)\",\n\t\t\ttitle: \"[channel] \\(.author)\",\n\t\t\tchannel: .author,\n\t\t\tthumbs: \"https:\\(.authorThumbnails[4].url)\",\n\t\t\tduration: \"\\(.videoCount) uploaded videos\",\n\t\t\taction: \"scrape type=invidious-channel search='\"${invidious_instance}\"'/channel/\\(.authorId)\"\n\t\t}\n\t]'\n}\n_invidious_search_json_live() {\n\tjq '[ .[] | select(.type==\"video\" and .liveNow==true) |\n\t\t{\n\t\t\tscraper: \"invidious_search\",\n\t\t\tID: .videoId,\n\t\t\turl: \"'\"${yt_video_link_domain}\"'/watch?v=\\(.videoId)\",\n\t\t\ttitle: \"[live] \\(.title)\",\n\t\t\tchannel: .author,\n\t\t\tthumbs: \"'\"${invidious_instance}\"'/vi/\\(.videoId)/'\"$thumbnail_quality\"'.jpg\"\n\t\t}\n\t]'\n}\n_invidious_search_json_videos() {\n\t__scr=\"$1\"\n\tjq '\n    '\"$jq_pad_left\"'\n\t\t;\n\t[ .[] | select(.type==\"video\" and .liveNow==false) |\n\t\t{\n\t\t\tscraper: \"'\"$__scr\"'\",\n\t\t\tID: .videoId,\n\t\t\turl: \"'\"${yt_video_link_domain}\"'/watch?v=\\(.videoId)\",\n\t\t\ttitle: .title,\n\t\t\tchannel: .author,\n\t\t\tthumbs: \"'\"${invidious_instance}\"'/vi/\\(.videoId)/'\"$thumbnail_quality\"'.jpg\",\n\t\t\tduration: \"\\(.lengthSeconds / 60 | floor):\\(pad_left(2; .lengthSeconds % 60))\",\n\t\t\tviews: \"\\(.viewCount)\",\n\t\t\tdate: .publishedText,\n\t\t\tdescription: .description\n\t\t}\n\t]'\n}\n_invidious_search_json_generic() {\n\t__scr=\"$1\"\n\tjq '\n    '\"$jq_pad_left\"'\n\t\t;\n\t[ .[] |\n\t\t{\n\t\t\tscraper: \"'\"$__scr\"'\",\n\t\t\tID: .videoId,\n\t\t\turl: \"'\"${yt_video_link_domain}\"'/watch?v=\\(.videoId)\",\n\t\t\ttitle: .title,\n\t\t\tchannel: .author,\n\t\t\tthumbs: \"'\"${invidious_instance}\"'/vi/\\(.videoId)/'\"$thumbnail_quality\"'.jpg\",\n\t\t\tduration: \"\\(.lengthSeconds / 60 | floor):\\(pad_left(2; .lengthSeconds % 60))\",\n\t\t\tviews: \"\\(.viewCount)\",\n\t\t\tdate: .publishedText,\n\t\t\tdescription: .description\n\t\t}\n\t]'\n}\n\n_invidious_playlist_json() {\n\tjq '\n    '\"$jq_pad_left\"'\n\t\t;\n\t[ .videos | .[] |\n\t\t{\n\t\t\tscraper: \"invidious_playlist\",\n\t\t\tID: .videoId,\n\t\t\turl: \"'\"${yt_video_link_domain}\"'/watch?v=\\(.videoId)\",\n\t\t\ttitle: .title,\n\t\t\tchannel: .author,\n\t\t\tthumbs: \"'\"${invidious_instance}\"'/vi/\\(.videoId)/'\"$thumbnail_quality\"'.jpg\",\n\t\t\tduration: \"\\(.lengthSeconds / 60 | floor):\\(pad_left(2; .lengthSeconds % 60))\",\n\t\t\tdate: .publishedText,\n\t\t\tdescription: .description\n\t\t}\n\t]'\n}\n\n_concatinate_json_file() {\n\ttemplate=\"$1\"\n\tpage_count=$2\n\t_output_json_file=\"$3\"\n\t__cur_page=${4:-1}\n\tset --\n\t# this sets the arguments to the files in order for cat\n\twhile [ \"$__cur_page\" -le \"$page_count\" ]; do\n\t\tset -- \"$@\" \"${template}${__cur_page}.json.final\"\n\t\t__cur_page=$((__cur_page + 1))\n\tdone\n\tcat \"$@\" 2>/dev/null >>\"$_output_json_file\"\n}\n#}}}\n\nscrape_invidious_playlist() {\n\tplaylist_url=$1\n\t[ \"$playlist_url\" = \":help\" ] && print_info \"The search should be a link to a youtube playlist\" && return 100\n\toutput_json_file=$2\n\n\tplaylist_id=\"${playlist_url##*[?]list=}\"\n\n\t_get_invidious_thumb_quality_name\n\n\t# used to put the full playlist in, to later remove duplicates\n\t_full_playlist_json=\"${session_temp_dir}/full-playlist-$playlist_id.json\"\n\n\t_cur_page=${pages_start:-1}\n\tpages_to_scrape=${pages_to_scrape:-100}\n\tpages_start=${pages_start:-1}\n\twhile [ \"$_cur_page\" -lt \"$((pages_start + pages_to_scrape))\" ]; do\n\t\t_tmp_json=\"${session_temp_dir}/yt-playlist-$playlist_id-$_cur_page.json\"\n\t\t_get_request \"$invidious_instance/api/v1/playlists/$playlist_id\" \\\n\t\t\t-G --data-urlencode \"page=$_cur_page\" >\"$_tmp_json\" || return \"$?\"\n\t\tjq -e '.videos==[]' <\"$_tmp_json\" >/dev/null 2>&1 && break\n\t\tprint_info \"Scraping Youtube playlist (with $invidious_instance) (playlist: $playlist_url, pg: $_cur_page)\"\n\n\t\t_invidious_playlist_json <\"$_tmp_json\" >>\"$output_json_file\"\n\t\t_cur_page=$((_cur_page + 1))\n\tdone\n}\nscrape_youtube_playlist() { scrape_invidious_playlist \"$@\"; }\n\nscrape_invidious_search() {\n\tpage_query=$1\n\t[ \"$page_query\" = \":help\" ] && print_info \"Make a youtube search\" && return 100\n\toutput_json_file=$2\n\n\t_ivs_cur_page=${pages_start:-1}\n\n\tpage_num=$((_ivs_cur_page + ${pages_to_scrape:-1}))\n\n\t# shellcheck disable=SC2209\n\tcase \"$search_sort_by\" in\n\tupload_date) search_sort_by=\"date\" ;;\n\tview_count) search_sort_by=views ;;\n\tesac\n\n\t_start_series_of_threads\n\twhile [ ${_ivs_cur_page} -lt $page_num ]; do\n\t\t{\n\t\t\t_tmp_json=\"${session_temp_dir}/yt-search-$_ivs_cur_page.json\"\n\n\t\t\tprint_info \"Scraping YouTube (with $invidious_instance) ($page_query, pg: $_ivs_cur_page)\"\n\n\t\t\t_get_request \"$invidious_instance/api/v1/search\" \\\n\t\t\t\t-G --data-urlencode \"q=$page_query\" \\\n\t\t\t\t--data-urlencode \"type=${search_result_type}\" \\\n\t\t\t\t--data-urlencode \"sort=${search_sort_by}\" \\\n\t\t\t\t--data-urlencode \"date=${search_upload_date}\" \\\n\t\t\t\t--data-urlencode \"duration=${search_video_duration}\" \\\n\t\t\t\t--data-urlencode \"features=${search_result_features}\" \\\n\t\t\t\t--data-urlencode \"region=${search_region}\" \\\n\t\t\t\t--data-urlencode \"page=${_ivs_cur_page}\" >\"$_tmp_json\"\n\n\t\t\t_get_invidious_thumb_quality_name\n\n\t\t\t{\n\t\t\t\t_invidious_search_json_live <\"$_tmp_json\"\n\t\t\t\t_invidious_search_json_videos \"invidious_search\" <\"$_tmp_json\"\n\t\t\t\t_invidious_search_json_channel <\"$_tmp_json\"\n\t\t\t\t_invidious_search_json_playlist <\"$_tmp_json\"\n\t\t\t} >>\"$_tmp_json.final\"\n\t\t} &\n\t\t_ivs_cur_page=$((_ivs_cur_page + 1))\n\t\t_thread_started \"$!\"\n\tdone\n\t# hangs for some reason when called frrom scrape_new_page_invidious_search\n\t# probably cause it's a subprocess of ytfzf\n\tcase \"$4\" in\n\t1) wait \"$!\" ;;\n\t*) wait ;;\n\tesac\n\t_concatinate_json_file \"${session_temp_dir}/yt-search-\" \"$((_ivs_cur_page - 1))\" \"$output_json_file\" \"$pages_start\"\n\tprintf \"%s\\n\" \"$_ivs_cur_page\" >\"${session_temp_dir}/invidious_search-current-page\"\n}\n\nscrape_youtube() { scrape_invidious_search \"$@\"; }\nscrape_Y() { scrape_invidious_search \"$@\"; }\n\nscrape_next_page_invidious_search() {\n\t# we can do this because _comment_file is overritten every time, meaning it will contain the latest scrape\n\tscrape_invidious_search \"$_search\" \"$video_json_file\"\n}\n\nscrape_invidious_video_recommended() {\n\tvideo=\"$1\"\n\t[ \"$video\" = \":help\" ] && print_info \"The search should be a link to a youtube video\" && return 100\n\toutput_json_file=\"$2\"\n\tcase \"$video\" in\n\t*/*) video=\"${video##*=}\" ;;\n\tesac\n\t_tmp_json=\"${session_temp_dir}/invidious-video-recommended.json\"\n\t_get_request \"$invidious_instance/api/v1/videos/$video\" | jq '.recommendedVideos' >\"$_tmp_json\"\n\t_get_invidious_thumb_quality_name\n\t_invidious_search_json_generic \"invidious_recommended\" <\"$_tmp_json\" >>\"$output_json_file\"\n}\nscrape_video_recommended() { scrape_invidious_video_recommended \"$@\"; }\nscrape_R() { scrape_invidious_video_recommended \"$@\"; }\n\nscrape_invidious_trending() {\n\ttrending_tab=$(title_str \"$1\")\n\t[ \"$trending_tab\" = \":help\" ] && print_info \"The search should be one of: Normal, Gaming, Music, News\" && return 100\n\toutput_json_file=$2\n\tprint_info \"Scraping YouTube (with $invidious_instance) trending (${trending_tab:-Normal})\"\n\n\t_tmp_json=\"${session_temp_dir}/yt-trending\"\n\n\turl=\"$invidious_instance/api/v1/trending\"\n\t[ -n \"$trending_tab\" ] && url=\"${url}?type=${trending_tab}\" && _tmp_json=\"${_tmp_json}-$trending_tab\"\n\n\t_get_request \"$url\" \\\n\t\t-G --data-urlencode \"region=${search_region}\" >\"$_tmp_json\" || return \"$?\"\n\n\t_get_invidious_thumb_quality_name\n\n\t_invidious_search_json_videos \"invidious_trending\" <\"$_tmp_json\" >>\"$output_json_file\"\n}\nscrape_youtube_trending() { scrape_invidious_trending \"$@\"; }\nscrape_T() { scrape_invidious_trending \"$@\"; }\n\nscrape_invidious_channel() {\n\tchannel_url=$1\n\t[ \"$channel_url\" = \":help\" ] && print_info \"The search should be a link to a youtube channel${new_line}You can put one or more of the following modifiers followed by a space before the url to specify which type of videos to scrape:${new_line}:videos${new_line}:streams${new_line}:playlists${new_line}:v, :s, and :p may also be used as a shorter version${new_line}You may also use --type=live, --type=video, --type=playlist, or --type=all\" && return 100\n\toutput_json_file=$2\n\n\ttmp_file_name=\"channel-${channel_id}\"\n\t_tmp_html=\"${session_temp_dir}/${tmp_file_name}.html\"\n\t_tmp_json=\"${session_temp_dir}/${tmp_file_name}.json\"\n\n\t[ -n \"$pages_to_scrape\" ] || [ -n \"$pages_start\" ] && print_warning \"If you want to use --pages or --pages-start${new_line}use -c invidious-playlist where the search is https://www.youtube.com/playlist?list=$channel_id\"\n\n\tprepare_for_set_args\n\tset -- $1\n\tend_of_set_args\n\n\tmodifiers=\"\"\n\n\t# support the --features=live argument\n\tcase \"$search_result_features\" in\n\t*live*) modifiers=\"streams\" ;;\n\t*video*) modifiers=\"$modifiers videos\" ;;\n\t*playlist*) modifiers=\"$modifiers playlists\" ;;\n\tesac\n\n\t#support --type=playlist, etc\n\tprepare_for_set_args \",\"\n\tfor _type in $search_result_type; do\n\t\tcase \"$_type\" in\n\t\tall) modifiers=\"streams playlists videos\" ;;\n\t\tvideo) modifiers=\"$modifiers videos\" ;;\n\t\t*) modifiers=\"$modifiers $_type\" ;;\n\t\tesac\n\tdone\n\tend_of_set_args\n\tunset IFS\n\n\tfor arg in \"$@\"; do\n\t\tcase \"$arg\" in\n\t\t:videos | :streams | :playlists) modifiers=\"$modifiers ${arg#:}\" ;; #starts with a colon to have  consistency with the search operator syntax.\n\t\t:v) modifiers=\"$modifiers videos\" ;;\n\t\t:p) modifiers=\"$modifiers playlists\" ;;\n\t\t:s | :l) modifiers=\"$modifiers streams\" ;;\n\t\t*)\n\t\t\tchannel_url=$arg\n\t\t\tbreak\n\t\t\t;;\n\t\tesac\n\tdone\n\n\tmodifiers=$(trim_blank \"$modifiers\")\n\n\t[ -z \"$modifiers\" ] && modifiers=\"videos\"\n\n\t# Converting channel title page url to channel video url\n\tset_real_channel_url_and_id \"$channel_url\"\n\n\tfor modifier in $modifiers; do\n\t\tchannel_url=\"$invidious_instance/api/v1/channels/$channel_id/$modifier\"\n\n\t\tprint_info \"Scraping Youtube (with $invidious_instance) channel: $channel_url\"\n\n\t\tcase \"$modifier\" in\n\t\tstreams)\n\t\t\t__jq_filter='.streams? // []'\n\t\t\t__jq_parser=_invidious_search_json_live\n\t\t\t;;\n\t\tplaylists)\n\t\t\t__jq_filter='.playlists? // []'\n\t\t\t__jq_parser=_invidious_search_json_playlist\n\t\t\t;;\n\t\tvideos | *)\n\t\t\t__jq_filter='(.videos? // []) + (.latestVideos? // [])'\n\t\t\t__jq_parser=_invidious_search_json_generic\n\t\t\t;;\n\t\tesac\n\n\t\t_get_invidious_thumb_quality_name\n\n\t\t_get_request \"${channel_url##* }\" \\\n\t\t\t-G --data-urlencode \"page=$_cur_page\" |\n\t\t\tjq \"$__jq_filter\" | $__jq_parser \"invidious_channel\" |\n\t\t\tjq 'select(.!=[])' >>\"$output_json_file\" || return \"$?\"\n\tdone\n}\n\n## }}}\n\n## Ytfzf {{{\nscrape_multi() {\n\t[ \"$1\" = \":help\" ] && print_info \"Perform multiple ytfzf calls and present them in 1 menu, a more powerful multi-scrape\nEg:\n    ytfzf -cM search 1 :NEXT search 2 :NEXT -c O odysee search :NEXT --pages=3 3 pages of youtube\n\" && return 100\n\tPARENT_OUTPUT_JSON_FILE=$2\n\tPARENT_invidious_instance=\"$invidious_instance\"\n\tunset IFS\n\tset -f\n\twhile read -r params; do\n\t\t[ -z \"$params\" ] && continue\n\t\t# shellcheck disable=SC2086\n\t\tset -- $params\n\t\t(\n\t\t\tset_vars 0\n\t\t\t# shellcheck disable=SC2030\n\t\t\tinvidious_instance=\"$PARENT_invidious_instance\"\n\t\t\tcache_dir=\"$session_cache_dir\"\n\t\t\ton_opt_parse_s() {\n\t\t\t\tprint_warning \"-s is not supported in multi search\"\n\t\t\t}\n\t\t\t_getopts \"$@\"\n\t\t\tsource_scrapers\n\t\t\tshift $((OPTIND - 1))\n\t\t\tsearch_again=0\n\t\t\tunset IFS\n\t\t\tinit_and_make_search \"$*\" \"fn-args\"\n\t\t\tsomething_was_scraped || exit 4\n\t\t\tcat \"$ytfzf_video_json_file\" >>\"$PARENT_OUTPUT_JSON_FILE\"\n\t\t\tclean_up\n\t\t)\n\tdone <<-EOF\n\t\t    $(printf \"%s\" \"$1\" | sed 's/ *:N\\(EXT\\)* */\\n/g')\n\tEOF\n\tunset PARENT_invidious_instance PARENT_OUTPUT_JSON_FILE\n\treturn 0\n}\nscrape_M() { scrape_multi \"$@\"; }\n## }}}\n\n## Peertube {{{\nscrape_peertube() {\n\tpage_query=$1\n\t[ \"$page_query\" = \":help\" ] && print_info \"Search peertube\" && return 100\n\toutput_json_file=$2\n\tprint_info \"Scraping Peertube ($page_query)\"\n\n\t_tmp_json=\"${session_temp_dir}/peertube.json\"\n\n\t# gets a list of videos\n\t_get_request \"https://sepiasearch.org/api/v1/search/videos\" -G --data-urlencode \"search=$1\" >\"$_tmp_json\" || return \"$?\"\n\n\tjq '\n\tdef pad_left(n; num):\n\t\tnum | tostring |\n\t\t\tif (n > length) then ((n - length) * \"0\") + (.) else . end\n\t\t;\n\t[ .data | .[] |\n\t\t\t{\n\t\t\t\tscraper: \"peertube_search\",\n\t\t\t\tID: .uuid,\n\t\t\t\turl: .url,\n\t\t\t\ttitle: .name,\n\t\t\t\tchannel: .channel.displayName,\n\t\t\t\tthumbs: .thumbnailUrl,\n\t\t\t\tduration: \"\\(.duration / 60 | floor):\\(pad_left(2; .duration % 60))\",\n\t\t\t\tviews: \"\\(.views)\",\n\t\t\t\tdate: .publishedAt\n\t\t\t}\n\t\t]' <\"$_tmp_json\" >>\"$output_json_file\"\n\n}\nscrape_P() { scrape_peertube \"$@\"; }\n## }}}\n\n## Odysee {{{\nscrape_odysee() {\n\t[ \"$odysee_video_search_count\" -gt 50 ] && die 1 \"--odysee-video-count must be <= 50\"\n\tpage_query=$1\n\t[ \"$page_query\" = \":help\" ] && print_info \"Search odysee\" && return 100\n\t[ \"${#page_query}\" -le 2 ] && die 4 \"Odysee searches must be 3 or more characters\"\n\toutput_json_file=$2\n\n\t# for scrape_next_page_odysee_search\n\t[ -z \"$_initial_odysee_video_search_count\" ] && _initial_odysee_video_search_count=$odysee_video_search_count\n\n\tprint_info \"Scraping Odysee ($page_query)\"\n\n\t_tmp_json=\"${session_temp_dir}/odysee.json\"\n\n\tcase \"$search_sort_by\" in\n\tupload_date | newest_first) search_sort_by=\"release_time\" ;;\n\toldest_first) search_sort_by=\"^release_time\" ;;\n\trelevance) search_sort_by=\"\" ;;\n\tesac\n\tcase \"$search_upload_date\" in\n\tweek | month | year) search_upload_date=\"this${search_upload_date}\" ;;\n\tday) search_upload_date=\"today\" ;;\n\tesac\n\n\tcase \"$nsfw\" in\n\t1) nsfw=true ;;\n\t0) nsfw=false ;;\n\tesac\n\n\t# this if is because when search_sort_by is empty, it breaks lighthouse\n\tif [ -n \"$search_sort_by\" ]; then\n\t\t_get_request \"https://lighthouse.lbry.com/search\" -G \\\n\t\t\t--data-urlencode \"s=$page_query\" \\\n\t\t\t--data-urlencode \"mediaType=video,audio\" \\\n\t\t\t--data-urlencode \"include=channel,title,thumbnail_url,duration,cq_created_at,description,view_cnt\" \\\n\t\t\t--data-urlencode \"sort_by=$search_sort_by\" \\\n\t\t\t--data-urlencode \"time_filter=$search_upload_date\" \\\n\t\t\t--data-urlencode \"nsfw=$nsfw\" \\\n\t\t\t--data-urlencode \"size=$odysee_video_search_count\" >\"$_tmp_json\" || return \"$?\"\n\telse\n\t\t_get_request \"https://lighthouse.lbry.com/search\" -G \\\n\t\t\t--data-urlencode \"s=$page_query\" \\\n\t\t\t--data-urlencode \"mediaType=video,audio\" \\\n\t\t\t--data-urlencode \"include=channel,title,thumbnail_url,duration,cq_created_at,description,view_cnt\" \\\n\t\t\t--data-urlencode \"time_filter=$search_upload_date\" \\\n\t\t\t--data-urlencode \"nsfw=$nsfw\" \\\n\t\t\t--data-urlencode \"size=$odysee_video_search_count\" >\"$_tmp_json\" || return \"$?\"\n\n\tfi\n\t# select(.duration != null) selects videos that aren't live, there is no .is_live key\n\tjq '\n\tdef pad_left(n; num):\n\t\tnum | tostring |\n\t\t\tif (n > length) then ((n - length) * \"0\") + (.) else . end\n\t\t;\n\t[ .[] |select(.duration != null) |\n\t    {\n\t\t    scraper: \"odysee_search\",\n\t\t\tID: .claimId,\n\t\t\ttitle: .title,\n\t\t\turl: \"https://www.odysee.com/\\(.channel)/\\(.name)\",\n\t\t\tchannel: .channel,\n\t\t\tthumbs: .thumbnail_url,\n\t\t\tduration: \"\\(.duration / 60 | floor):\\(pad_left(2; .duration % 60))\",\n\t\t\tviews: \"\\(.view_cnt)\",\n\t\t\tdate: .cq_created_at\n\t    }\n\t]' <\"$_tmp_json\" >>\"$output_json_file\"\n\n}\nscrape_O() { scrape_odysee \"$@\"; }\n## }}}\n\n# ytfzf json format{{{\n\nscrape_from_cache() {\n\tsearch=\"$1\"\n\t[ \"$search\" = \":help\" ] && print_info \"Scrapes from a cached ytfzf search${new_line}the search is the cache # to use, where 1 is the most recent and \\$ is the least recent\" && return 100\n\ton_clean_up_scrape_from_cache() {\n\t\trm -r \"${cache_dir}/${SEARCH_PREFIX}-${YTFZF_PID}\" >/dev/null 2>&1\n\t}\n\tload_fake_extension \"scrape_from_cache\"\n\n\tset +f\n\t_locations=$(\n\t\tfor location in \"$cache_dir\"/*-[0-9][0-9]*; do\n\t\t\tprintf \"%s\\n\" \"$(cat \"${location}/created-at\")-${location}\"\n\t\tdone | sort -nr | cut -d '-' -f2-\n\t)\n\n\tif [ -n \"$search\" ]; then\n\t\t_location=\"$(\n\t\t\tsed -n \"${search}p\" <<EOF\n$_locations\nEOF\n\t\t)\"\n\telse\n\t\t_location=$(\n\t\t\tquick_menu_wrapper \"Pick from previous searches\" <<EOF\n$_locations\nEOF\n\t\t)\n\tfi\n\t[ -z \"$_location\" ] && return 1\n\tscrape_json_file \"$_location/videos_json\" \"$2\"\n\tcp -r \"$_location/thumbnails\" \"${session_cache_dir}\"\n\tset -f\n}\n\nscrape_json_file() {\n\tsearch=\"$1\"\n\toutput_json_file=\"$2\"\n\tcp \"$search\" \"$output_json_file\" 2>/dev/null\n}\nscrape_playlist() { scrape_json_file \"$@\"; }\nscrape_p() { scrape_json_file \"$@\"; }\n#}}}\n\n# Comments{{{\nscrape_comments() {\n\tvideo_id=\"$1\"\n\t[ \"$video_id\" = \":help\" ] && print_info \"Search should be a link to a youtube video\" && return 100\n\tcase \"$video_id\" in\n\t*/*) video_id=\"${video_id##*=}\" ;;\n\tesac\n\toutput_json_file=\"$2\"\n\t_comment_file=\"${session_temp_dir}/comments-$video_id.tmp.json\"\n\ti=\"${pages_start:-1}\"\n\tpage_count=\"$((i + ${pages_to_scrape:-1}))\"\n\twhile [ \"$i\" -le \"$page_count\" ]; do\n\t\tprint_info \"Scraping comments (pg: $i)\"\n\t\t_out_comment_file=\"${session_temp_dir}/comments-$i.json.final\"\n\t\t_get_request \"$invidious_instance/api/v1/comments/${video_id}\" -G \\\n\t\t\t--data-urlencode \"continuation=$continuation\" >\"$_comment_file\"\n\t\tcontinuation=$(jq -r '.continuation' <\"$_comment_file\")\n\t\tjq --arg continuation \"$continuation\" '[ .comments[] | {\"scraper\": \"comments\", \"channel\": .author, \"date\": .publishedText, \"ID\": .commentId, \"title\": .author, \"description\": .content, \"url\": \"'\"$yt_video_link_domain\"'/watch?v='\"$video_id\"'&lc=\\(.commentId)\", \"action\": \"do-nothing\", \"thumbs\": .authorThumbnails[2].url, \"continuation\": $continuation} ]' <\"$_comment_file\" >>\"$output_json_file\"\n\t\ti=$((i + 1))\n\tdone\n\tprintf \"%s\\n\" \"$i\" >\"${session_temp_dir}/comments-current-page\"\n}\n\nscrape_next_page_comments() {\n\t# we can do this because _comment_file is overritten every time, meaning it will contain the latest scrape\n\tscrape_comments \"$_search\" \"$video_json_file\"\n}\n#}}}\n\n# url {{{\nscrape_url() {\n\tprintf \"%s\\n\" \"$1\" >\"$ytfzf_selected_urls\"\n\topen_format_selection_if_requested \"$ytfzf_selected_urls\"\n\topen_url_handler \"$ytfzf_selected_urls\"\n\tclose_url_handler \"$url_handler\"\n\texit\n}\nscrape_U() { scrape_url \"$@\"; }\nscrape_u() { printf '[{\"ID\": \"%s\", \"title\": \"%s\", \"url\": \"%s\"}]\\n' \"URL-${1##*/}\" \"$1\" \"$1\" >>\"$2\"; }\n#}}}\n\n# }}}\n\n# Sorting {{{\n\n############################\n#         SORTING          #\n############################\n\n# There is a 2 step soring process.\n# 1. the get_sort_by function is called\n# 2. the data_sort_fn function is called\n# The result of those 2 steps is then printed to stdout.\n\n#TODO: refactor sorting to not rely on video_info_text, and instead be based on json\n\n# Take a json line as the first argument, the line should follow VIDEO JSON FORMAT\n# This function should print the information from the line to sort by (or something else)\n# This specific implementation of get_sort_by prints the upload date in unix time\ncommand_exists \"get_sort_by\" || get_sort_by() {\n\t_video_json_line=\"$1\"\n\tdate=\"${_video_json_line##*'\"date\":\"'}\"\n\tdate=\"${date%%\\\"*}\"\n\t# youtube specific\n\tdate=${date#*Streamed}\n\tdate=${date#*Premiered}\n\tdate -d \"$date\" '+%s' 2>/dev/null || date -f \"$date\" '+%s' 2>/dev/null || printf \"null\"\n}\n\n# This function sorts the data being piped into it.\ncommand_exists \"data_sort_fn\" || data_sort_fn() {\n\tsort -nr\n}\n\n#This function reads all lines being piped in, and sorts them.\nsort_video_data_fn() {\n\tif [ $is_sort -eq 1 ]; then\n\t\twhile IFS= read -r _video_json_line; do\n\t\t\t# run the key function to get the value to sort by\n\t\t\tget_sort_by \"$_video_json_line\" | tr -d '\\n'\n\t\t\tprintf \"\\t%s\\n\" \"$_video_json_line\"\n\t\tdone | data_sort_fn | cut -f2-\n\telse\n\t\tcat\n\tfi\n}\n#}}}\n\n# History Management {{{\n\n#}}}\n\n# User Interface {{{\n\n############################\n#        INTERFACES        #\n############################\n\n# The interface takes 2 arguments\n# 1: The video json file to read from\n# The json file will be in the VIDEO JSON FORMAT (see ytfzf(5)) for more information\n# 2: The url file to write to\n# each url should be seperated by a new line when written to the url file.\n\n# Interfaces are responsible for the following:\n\n# $ytfzf_video_json_file contains a file with the raw search result json\n# or use the create_sorted_video_data to get a jsonl string of sorted videos.\n\n# * Checking if the menu it wants to use is installed.\n# * Example: interface_text checks if fzf is installed and exits with code 3 if it can't.\n\n# * If the interface uses shortcuts, it is responsible for calling handle_post_keypress if the $keypress_file exists.\n\n# * The interface should display thumbnails if thumbnails are enabled, and the interface supports it\n\n# * It is not required, but interfaces (especially tui interfaces) should use the output from the output from the video_info_text function to display the results.\n# * The interface needs to define the following variables for video_info_text to work properly:\n# * title_len\n# * channel_len\n# * dur_len\n# * view_len\n# * date_len\n# Each of these variables should equal the amount of columns (characters) each segment should take\n\n# * Lastly, if a key, or key combination was pressed (and the interface supports it), it should be written to $keypress_file.\n# * $keypress_file will be used *after* the interface is closed, If the interface does not function in a way similar to fzf do not use this file for shortcuts.\n# * When handling keypresses manually, it is preferrable to use the keybinds listed in $shortcut_binds,\n# * For example, the download shortcut to check against should be $download_shortcut\n\n# Keypresses {{{\nset_keypress() {\n\t# this function uses echo to keep new lines\n\tread -r keypress\n\twhile read -r line; do\n\t\tinput=\"${input}${new_line}${line}\"\n\tdone\n\t# this if statement checks if there is a keypress, if so, print the input, otherwise print everything\n\t# $keypress could also be a standalone variable, but it's nice to be able to interact with it externally\n\tif printf \"%s\" \"$keypress\" | grep -E '^[[:alnum:]-]+$' >\"$keypress_file\"; then\n\t\techo \"$input\" | sed -n '2,$p'\n\telse\n\t\t# there was no key press, remove all blank lines\n\t\techo \"${keypress}${new_line}${input}\" | grep -Ev '^[[:space:]]*$'\n\tfi\n\tunset keypress\n}\n\nhandle_post_keypress() {\n\tread -r keypress <\"$keypress_file\"\n\tcommand_exists \"handle_custom_post_keypresses\" && { handle_custom_post_keypresses \"$keypress\" || return \"$?\"; }\n\tcase \"$keypress\" in\n\t\"$download_shortcut\" | \"$video_shortcut\" | \"$audio_shortcut\") url_handler=$_last_url_handler ;;\n\t\"$detach_shortcut\") is_detach=0 ;;\n\t\"$print_link_shortcut\" | \"$info_shortcut\") info_to_print=\"$_last_info_to_print\" ;;\n\t\"$show_formats_shortcut\") show_formats=0 ;;\n\t\"$search_again_shortcut\") : ;;\n\t*)\n\t\t_fn_name=handle_post_keypress_$(\n\t\t\tsed 's/-/_/g' <<-EOF\n\t\t\t\t$keypress\n\t\t\tEOF\n\t\t)\n\t\tcommand_exists \"$_fn_name\" && $_fn_name\n\t\t;;\n\tesac\n\tunset keypress\n\n}\n\nhandle_keypress() {\n\tread -r keypress <\"$1\"\n\n\tprint_debug \"[KEYPRESS]: handling keypress: $keypress\"\n\n\tcommand_exists \"handle_custom_keypresses\" && { handle_custom_keypresses \"$keypress\" || return \"$?\"; }\n\tcase \"$keypress\" in\n\t\"$download_shortcut\")\n\t\t_last_url_handler=$url_handler\n\t\turl_handler=downloader\n\t\t;;\n\t\"$video_shortcut\")\n\t\t_last_url_handler=$url_handler\n\t\turl_handler=video_player\n\t\t;;\n\t\"$audio_shortcut\")\n\t\t_last_url_handler=$url_handler\n\t\turl_handler=audio_player\n\t\t;;\n\t\"$detach_shortcut\") is_detach=1 ;;\n\t\"$print_link_shortcut\")\n\t\t_last_info_to_print=\"$info_to_print\"\n\t\tinfo_to_print=\"L\"\n\t\t;;\n\t\"$show_formats_shortcut\") show_formats=1 ;;\n\t\"$info_shortcut\")\n\t\t_last_info_to_print=\"$info_to_print\"\n\t\tinfo_to_print=\"VJ\"\n\t\t;;\n\t\"$search_again_shortcut\")\n\t\tclean_up\n\t\tinitial_search=\"\" init_and_make_search \"\" \"$search_source\"\n\t\treturn 3\n\t\t;;\n\t*)\n\t\t_fn_name=handle_keypress_$(\n\t\t\tsed 's/-/_/g' <<-EOF\n\t\t\t\t$keypress\n\t\t\tEOF\n\t\t)\n\t\tcommand_exists \"$_fn_name\" && $_fn_name\n\t\trv=\"$?\"\n\t\t;;\n\tesac\n\tunset keypress\n\treturn \"${rv:-0}\"\n}\n\n#}}}\n\ncommand_exists \"thumbnail_video_info_text_comments\" || thumbnail_video_info_text_comments() {\n\t[ -n \"$title\" ] && printf \"${c_bold}%s\\n${c_reset}\" \"$title\"\n\t[ -n \"$description\" ] && printf \"\\n%s\" \"$description\"\n}\n\n# Scripting selection {{{\nauto_select() {\n\tvideo_json_file=$1\n\tselected_id_file=$2\n\t# shellcheck disable=SC2194\n\tcase 1 in\n\t#sed is faster than jq, lets use it\n\t#this sed command finds `\"url\": \"some-url\"`, and prints all urls then selects the first $scripting_video_count urls.\n\t\"$is_auto_select\") sed -n 's/[[:space:]]*\"url\":[[:space:]]*\"\\([^\"]\\+\\)\",*$/\\1/p' <\"$video_json_file\" | sed -n \"1,${scripting_video_count}p\" ;;\n\t\"$is_random_select\") sed -n 's/[[:space:]]*\"url\":[[:space:]]*\"\\([^\"]\\+\\)\",*$/\\1/p' <\"$video_json_file\" | shuf | sed -n \"1,$scripting_video_count\"p ;;\n\t\"$is_specific_select\") jq -r '.[]|\"\\(.title)\\t|\\(.channel)\\t|\\(.duration)\\t|\\(.views)\\t|\\(.date)\\t|\\(.viewed)\\t|\\(.url)\"' <\"$ytfzf_video_json_file\" | sed -n \"$scripting_video_count\"p | trim_url ;;\n\t*) return 1 ;;\n\tesac >\"$selected_id_file\"\n\treturn 0\n\t# jq '.[]' < \"$video_json_file\" | jq -s -r --arg N \"$scripting_video_count\" '.[0:$N|tonumber]|.[]|.ID' > \"$selected_id_file\"\n}\n# }}}\n\n# Text interface {{{\ninterface_text() {\n\tcommand_exists \"fzf\" || die 3 \"fzf not installed, cannot use the default menu\"\n\t# if it doesn't exist, this menu has not opened yet, no need to revert the actions of the last keypress\n\t[ -f \"$keypress_file\" ] && handle_post_keypress\n\n\t_fzf_start_bind=\"\"\n\tif [ \"${_const_fzf_selected_line_no:-0}\" -gt 0 ]; then\n\t\t#if line n (where n != 0) was selected, add a start bind that moves the cursor down (n) times\n\t\t_fzf_start_bind=\"--bind start:$(mul_str \"down+\" \"${_const_fzf_selected_line_no}\")\"\n\t\t_fzf_start_bind=\"${_fzf_start_bind%\"+\"}\"\n\tfi\n\n\t_init_video_info_text \"$TTY_COLS\"\n\n\t[ \"$show_thumbnails\" -eq 1 ] && {\n\t\tinterface_thumbnails \"$@\"\n\t\treturn\n\t}\n\n\tvideo_json_file=$1\n\tselected_id_file=$2\n\n\tunset IFS\n\n\t_c_SORTED_VIDEO_DATA=\"$(create_sorted_video_data)\"\n\n\tprintf \"%s\\n\" \"$_c_SORTED_VIDEO_DATA\" |\n\t\tvideo_info_text |\n\t\t_post_video_info_text |\n\t\tfzf -m --sync --tabstop=1 --layout=reverse --expect=\"$shortcut_binds\" \\\n\t\t\t$_fzf_start_bind \\\n\t\t\t--bind \"${next_page_action_shortcut}:reload(__is_fzf_preview=1 TTY_COLS=${TTY_COLS} TTY_LINES=${TTY_LINES} YTFZF_CHECK_VARS_EXISTS=1 session_cache_dir='$session_cache_dir' ytfzf_video_json_file='$ytfzf_video_json_file' invidious_instance='$invidious_instance' yt_video_link_domain='$yt_video_link_domain' pages_to_scrape='$pages_to_scrape' session_temp_dir='$session_temp_dir' $0 -W \\\"next_page\"$EOT\"{f}\\\")\" | set_keypress |\n\t\ttrim_url >\"$selected_id_file\"\n\n\t_const_top_url=\"$(head -n 1 \"$selected_id_file\")\"\n\t_const_fzf_selected_line_no=\"$(\n\t\tjq -s -r --arg url \"$_const_top_url\" 'flatten|[.[]|.url]|index($url)' <<-EOF\n\t\t\t    ${_c_SORTED_VIDEO_DATA}\n\t\tEOF\n\t)\"\n}\n#}}}\n\n# External interface {{{\ninterface_ext() {\n\tvideo_json_file=$1\n\tselected_id_file=$2\n\n\t# video_info_text can be set in the conf.sh, if set it will be preferred over the default given below\n\t_init_video_info_text $external_menu_len\n\n\tcreate_sorted_video_data |\n\t\tvideo_info_text |\n\t\texternal_menu \"Select video: \" |\n\t\ttrim_url >\"$selected_id_file\"\n}\n#}}}\n\n# Thumbnail Interface {{{\n\n_get_video_json_attr() {\n\tsed -n 's/^[[:space:]]*\"'\"$1\"'\":[[:space:]]*\"\\([^\\n]*\\)\",*/\\1/p' <<-EOF | sed 's/\\\\\\([\\\\\"]\\)/\\1/g'\n\t\t    $_correct_json\n\tEOF\n}\n\n# Image preview {{{\npreview_start() {\n\tthumbnail_viewer=$1\n\tcase $thumbnail_viewer in\n\tueberzug | sixel | kitty | iterm2 | sway | wayland)\n\t\tcommand_exists \"ueberzug\" || {\n\t\t\t[ \"$thumbnail_viewer\" = \"ueberzug\" ] && die 3 \"ueberzug is not installed\" || die 3 \"ueberzugpp is not installed\"\n\t\t}\n\t\texport UEBERZUG_FIFO=\"$session_temp_dir/ytfzf-ueberzug-fifo\"\n\t\trm -f \"$UEBERZUG_FIFO\"\n\t\tmkfifo \"$UEBERZUG_FIFO\"\n\t\tif [ \"$thumbnail_viewer\" = \"ueberzug\" ]; then\n\t\t\to=\"x11\"\n\t\telse\n\t\t\to=\"${thumbnail_viewer}\"\n\t\tfi\n\t\tif command_exists ueberzugpp; then\n\t\t\tueberzugpp layer -o \"${o}\" --parser json <\"$UEBERZUG_FIFO\" 2>>\"$thumbnail_debug_log\" &\n\t\telse\n\t\t\tueberzug layer --parser json <\"$UEBERZUG_FIFO\" 2>>\"$thumbnail_debug_log\" &\n\t\tfi\n\t\texec 3>\"$UEBERZUG_FIFO\"\n\t\t;;\n\tchafa | chafa-16 | chafa-tty | chafa-sixel | catimg | catimg-256 | swayimg | swayimg-hyprland) : ;;\n\timv)\n\t\tfirst_img=\"$(jq -r '.[0].ID|select(.!=null)' <\"$ytfzf_video_json_file\")\"\n\t\timv \"$thumb_dir/${first_img}.jpg\" >>\"$thumbnail_debug_log\" 2>&1 &\n\t\texport imv_pid=\"$!\"\n\t\t# helps prevent imv seg fault\n\t\tsleep 0.1\n\t\t;;\n\tmpv)\n\t\tcommand_exists \"socat\" && command_exists \"mpv\" || die 3 \"socat, and mpv must be installed for the mpv thumbnail viewer\"\n\t\tfirst_img=\"$(jq -r '.[0].ID|select(.!=null)' <\"$ytfzf_video_json_file\")\"\n\t\texport MPV_SOCKET=\"$session_temp_dir/mpv.socket\"\n\t\trm -f \"$MPV_SOCKET\" >/dev/null 2>&1\n\t\tmpv --input-ipc-server=\"$MPV_SOCKET\" --loop-file=inf --idle=yes \"$thumb_dir/${first_img}.jpg\" >>\"$thumbnail_debug_log\" 2>&1 &\n\t\texport mpv_pid=$!\n\t\t;;\n\t*)\n\t\t\"$thumbnail_viewer\" \"start\" \"$FZF_PREVIEW_COLUMNS\" \"$FZF_PREVIEW_LINES\" 2>/dev/null\n\t\t;;\n\tesac\n}\npreview_stop() {\n\tthumbnail_viewer=$1\n\tcase $thumbnail_viewer in\n\tueberzug | sixel | kitty | iterm2 | sway | wayland) exec 3>&- ;;\n\tchafa | chafa-16 | chafa-tty | chafa-sixel | catimg | catimg-256) : ;;\n\tmpv)\n\t\tkill \"$mpv_pid\"\n\t\trm \"$MPV_SOCKET\" >/dev/null 2>&1\n\t\t;;\n\tswayimg | swayimg-hyprland) killall swayimg 2>/dev/null ;;\n\timv) kill \"$imv_pid\" ;;\n\t*)\n\t\t\"$thumbnail_viewer\" \"stop\" \"$FZF_PREVIEW_COLUMNS\" \"$FZF_PREVIEW_LINES\" 2>/dev/null\n\t\t;;\n\tesac\n}\n\ncommand_exists \"on_no_thumbnail\" || on_no_thumbnail() {\n\t[ \"${__did_on_no_thumbnail:-0}\" -eq 1 ] || print_error \"No image\"\n\t__did_on_no_thumbnail=1\n}\n\npreview_no_img() {\n\tthumbnail_viewer=\"$1\"\n\tcase $thumbnail_viewer in\n\tchafa | chafa-16 | chafa-tty | chafa-sixel | catimg | catimg-256 | imv | mpv) : ;;\n\tueberzug | sixel | kitty | iterm2 | sway | wayland)\n\t\t{\n\t\t\tprintf \"{\"\n\t\t\tprintf \"\\\"%s\\\": \\\"%s\\\",\" \"action\" \"remove\" \"identifier\" \"ytfzf\"\n\t\t\tprintf '\"%s\": \"%s\"' \"draw\" \"True\"\n\t\t\tprintf \"}\\n\"\n\t\t} >\"$UEBERZUG_FIFO\"\n\t\t;;\n\tswayimg | swayimg-hyprland)\n\t\tkillall swayimg 2>/dev/null\n\t\ttrue\n\t\t;; # we want this to be true so that the && at the bottom happens\n\t*) \"$thumbnail_viewer\" \"no-img\" ;;\n\tesac && do_an_event_function \"on_no_thumbnail\"\n\n}\n# ueberzug positioning{{{\ncommand_exists \"get_ueberzug_positioning_left\" || get_ueberzug_positioning_left() {\n\twidth=$1\n\theight=$(($2 - __text_line_count + 2))\n\tx=2\n\ty=$((__text_line_count + 2))\n}\ncommand_exists \"get_ueberzug_positioning_right\" || get_ueberzug_positioning_right() {\n\tget_ueberzug_positioning_left \"$@\"\n\twidth=$1\n\tx=$(($1 + 6))\n}\ncommand_exists \"get_ueberzug_positioning_up\" || get_ueberzug_positioning_up() {\n\twidth=$1\n\theight=$(($2 - __text_line_count))\n\tx=2\n\ty=9\n}\ncommand_exists \"get_ueberzug_positioning_down\" || get_ueberzug_positioning_down() {\n\twidth=$1\n\theight=$(($2 - __text_line_count))\n\t#$2*2 goes to the bottom subtracts height, adds padding\n\ty=$(($2 * 2 - height + 2))\n\tx=2\n}\n\ncommand_exists \"get_swayimg_positioning_left\" || get_swayimg_positioning_left() {\n\t# allows space for text\n\ty_gap=$((__text_line_count + 3)) #the plus 3 just seems to work better\n\ty_gap=$((line_px_height * y_gap))\n\t#these are seperate because treesitter syntax highlighting dies when parentheses are inside of math\n\n\t# it's subtracting the gap between the border and the edge of terminal\n\tw_correct=$((max_width / 2 - 2 * col_px_width))\n\th_correct=$((max_height - 3 * line_px_height - y_gap))\n\n\t# offset from the edge by half a column\n\tx=$((term_x + col_px_width / 2))\n\t# move down to allow for text\n\ty=$((term_y + y_gap))\n\t[ \"$img_w\" -gt \"$w_correct\" ] && img_w=$((w_correct))\n\t#-20 is to leave space for the text\n\t[ \"$img_h\" -gt \"$h_correct\" ] && img_h=$((h_correct))\n}\n\ncommand_exists \"get_swayimg_positioning_right\" || get_swayimg_positioning_right() {\n\tget_swayimg_positioning_left \"$@\"\n\t# after setting the positioning as if side was `left` set x to the correct place\n\tx=$((term_x + max_width - w_correct))\n}\n\ncommand_exists \"get_swayimg_positioning_up\" || get_swayimg_positioning_up() {\n\tw_correct=$((max_width / 2))\n\t# offset from border slightly\n\th_correct=$((max_height - 2 * line_px_height))\n\n\t# offset from info text by 30 columns\n\tx=$((max_width - w_correct))\n\tx=$((term_x + x))\n\t# go down from the top by 2 lines\n\ty=$((term_y + 2 * line_px_height))\n\n\t[ \"$img_w\" -gt \"$w_correct\" ] && img_w=$((w_correct))\n\t#-20 is to leave space for the text\n\t[ \"$img_h\" -gt \"$h_correct\" ] && img_h=$((h_correct))\n}\n\ncommand_exists \"get_swayimg_positioning_down\" || get_swayimg_positioning_down() {\n\tget_swayimg_positioning_up \"$@\"\n\t# after setting the positioning as if side was `up` set y to the correct place\n\ty=$((term_y + max_height / 2 + 2 * line_px_height))\n}\n\nget_swayimg_positioning() {\n\tmax_width=$1\n\tmax_height=$2\n\tterm_x=$3\n\tterm_y=$4\n\tcol_px_width=$5\n\tline_px_height=$6\n\n\timg_size=\"$(identify -format \"%w %h\" \"$thumb_path\")\"\n\timg_w=${img_size% *}\n\timg_h=${img_size#* }\n\n\tget_swayimg_positioning_$fzf_preview_side \"${img_size% *}\" \"${img_size#* }\" \"$max_width\" \"$max_height\" \"$term_x\" \"$term_y\" \"$col_px_width\" \"$line_px_height\"\n}\n\nget_ueberzug_positioning() {\n\tmax_width=$1\n\tmax_height=$2\n\t\"get_ueberzug_positioning_$fzf_preview_side\" \"$max_width\" \"$max_height\"\n}\n#}}}\npreview_display_image() {\n\tthumbnail_viewer=$1\n\tid=$2\n\n\tfor path in \"${YTFZF_CUSTOM_THUMBNAILS_DIR}/$id.jpg\" \"${thumb_dir}/${id}.jpg\" \"${YTFZF_CUSTOM_THUMBNAILS_DIR}/YTFZF:DEFAULT.jpg\"; do\n\t\tthumb_path=\"$path\"\n\t\t[ -f \"${thumb_path}\" ] && break\n\tdone || preview_no_img \"$thumbnail_viewer\"\n\t# this is separate becuase, preview_no_img will not happen if thumb_path = YTFZF:DEFAULT, but on_no_thumbnail should still happen\n\t[ \"$thumb_path\" = \"${YTFZF_CUSTOM_THUMBNAILS_DIR}/YTFZF:DEFAULT.jpg\" ] && do_an_event_function \"on_no_thumbnail\"\n\n\tget_ueberzug_positioning \"$FZF_PREVIEW_COLUMNS\" \"$FZF_PREVIEW_LINES\" \"$fzf_preview_side\"\n\tcase $thumbnail_viewer in\n\tueberzug | sixel | kitty | iterm2 | sway | wayland)\n\t\t#not exactly sure why this is necessary\n\t\t[ \"$thumbnail_viewer\" = \"kitty\" ] && width=$((width - 11))\n\t\t{\n\t\t\tprintf \"{\"\n\t\t\tprintf \"\\\"%s\\\": \\\"%s\\\",\" \"action\" \"remove\" \"identifier\" \"ytfzf\"\n\t\t\tprintf '\"%s\": \"%s\"' \"draw\" \"True\"\n\t\t\tprintf \"}\\n\"\n\t\t} >\"$UEBERZUG_FIFO\" 2>>\"$thumbnail_debug_log\"\n\t\t{\n\t\t\tprintf \"{\"\n\t\t\tprintf '\"%s\": \"%s\",' \\\n\t\t\t\t'action' 'add' \\\n\t\t\t\t'identifier' 'ytfzf' \\\n\t\t\t\t'path' \"$thumb_path\" \\\n\t\t\t\t'x' \"$x\" \\\n\t\t\t\t'y' \"$y\" \\\n\t\t\t\t'width' \"$width\"\n\t\t\tprintf '\"%s\": \"%s\"' 'height' \"$height\"\n\t\t\tprintf \"}\\n\"\n\t\t} >\"$UEBERZUG_FIFO\" 2>>\"$thumbnail_debug_log\"\n\t\t;;\n\tswayimg-hyprland)\n\t\tcommand_exists \"hyprctl\" || die 3 \"hyprctl is required for this thumbnail viewer\"\n\t\t_swayimg_pid_file=\"${session_temp_dir}/_swayimg.pid\"\n\t\t[ -f \"$_swayimg_pid_file\" ] && kill \"$(cat \"$_swayimg_pid_file\")\" 2>/dev/null\n\n\t\twindow_data=\"$(hyprctl activewindow -j)\"\n\n\t\tIFS=\" \" read -r x y w h <<-EOF\n\t\t\t            $(printf \"%s\" \"$window_data\" | jq -r '\"\\(.at[0]) \\(.at[1]) \\(.size[0]) \\(.size[1])\"')\n\t\tEOF\n\t\tread -r output_x output_y <<-EOF\n\t\t\t            $(hyprctl monitors -j | jq -r '.[]|select(.focused==true) as $mon | \"\\($mon.x) \\($mon.y)\"')\n\t\tEOF\n\t\tx=$((x - output_x))\n\t\ty=$((y - output_y))\n\t\t# shellcheck disable=SC2034\n\t\tw_half=$((w / 2)) h_half=$((h / 2))\n\t\t# how many pixels per col\n\t\tcol_px_width=$((w / TTY_COLS))\n\t\t# how many pixels per line\n\t\tline_px_height=$((h / TTY_LINES))\n\t\tget_swayimg_positioning \"$((w))\" \"$((h))\" \"$x\" \"$y\" \"$col_px_width\" \"$line_px_height\"\n\t\thyprctl keyword windowrulev2 \"move $((x + 10)) $y,title:swayimg\" >/dev/null 2>&1\n\t\thyprctl keyword windowrulev2 float,title:swayimg >/dev/null 2>&1\n\t\thyprctl keyword windowrulev2 nofocus,title:swayimg >/dev/null 2>&1\n\t\thyprctl keyword windowrulev2 \"noborder,title:swayimg\" >/dev/null 2>&1\n\t\tswayimg -s fit -g $((x + 10)),$y,$((img_w)),$((img_h)) \"$thumb_path\" 2>>\"$thumbnail_debug_log\" >&2 &\n\t\tprintf \"%s\" \"$!\" >\"$_swayimg_pid_file\"\n\t\t# without this there are weird flushing issues (maybe)\n\t\t;;\n\tswayimg)\n\t\t_swayimg_pid_file=\"${session_temp_dir}/_swayimg.pid\"\n\t\t[ -f \"$_swayimg_pid_file\" ] && kill \"$(cat \"$_swayimg_pid_file\")\" 2>/dev/null\n\t\t# this jq call finds the id of the selected monitor and saves it as $focused_id\n\t\t# then finds x, and y of the focused monitor and saves it as the var $d1\n\t\t# then it finds the geometry of the focused window and saves it as the var $d2\n\t\t# at the end it concatinates the two strings with a tab in the middle so that read can read it into 6 vars\n\t\tread -r output_x output_y x y w h <<-EOF\n\t\t\t    $(swaymsg -t get_tree | jq -r '. as $data |\n\t\t\t        .focus[0] as $focused_id |\n\t\t\t        ..| try select(.type==\"output\" and .id==$focused_id) |\n\t\t\t        [.rect.x,.rect.y] | @tsv as $d1 |\n\t\t\t        $data | .. | try select(.focused==true) |\n\t\t\t        [.rect.x,.rect.y,.rect.width,.rect.height] | @tsv as $d2 |\n\t\t\t        $d1 + \"\\t\" + $d2')\n\t\tEOF\n\t\t# we're subtracting output_* to make sure swayimg places on correct monitor\n\t\tx=$((x - output_x))\n\t\ty=$((y - output_y))\n\t\t# shellcheck disable=SC2034\n\t\tw_half=$((w / 2)) h_half=$((h / 2))\n\t\t# how many pixels per col\n\t\tcol_px_width=$((w / TTY_COLS))\n\t\t# how many pixels per line\n\t\tline_px_height=$((h / TTY_LINES))\n\t\tget_swayimg_positioning \"$((w))\" \"$((h))\" \"$x\" \"$y\" \"$col_px_width\" \"$line_px_height\"\n\t\tswaymsg 'no_focus [app_id=\"swayimg_.*\"]' >/dev/null 2>&1\n\t\tswayimg -s fit -g $x,$y,$((img_w)),$((img_h)) \"$thumb_path\" 2>>\"$thumbnail_debug_log\" >&2 &\n\t\tprintf \"%s\" \"$!\" >\"$_swayimg_pid_file\"\n\t\t# without this there are weird flushing issues (maybe)\n\t\techo\n\t\t;;\n\tchafa)\n\t\tprintf '\\n'\n\t\tcommand_exists \"chafa\" || die 3 \"${new_line}chafa is not installed\"\n\t\tchafa --format=symbols -s \"$((width - 4))x$height\" \"$thumb_path\" 2>>\"$thumbnail_debug_log\"\n\t\t;;\n\tchafa-16)\n\t\tprintf '\\n'\n\t\tcommand_exists \"chafa\" || die 3 \"${new_line}chafa is not installed\"\n\t\tchafa --format=symbols -c 240 -s \"$((width - 2))x$((height - 10))\" \"$thumb_path\" 2>>\"$thumbnail_debug_log\"\n\t\t;;\n\tchafa-tty)\n\t\tprintf '\\n'\n\t\tcommand_exists \"chafa\" || die 3 \"${new_line}chafa is not installed\"\n\t\tchafa --format=symbols -c 16 -s \"$((width - 2))x$((height - 10))\" \"$thumb_path\" 2>>\"$thumbnail_debug_log\"\n\t\t;;\n    chafa-sixel)\n        printf '\\n'\n        command_exists \"chafa\" || die 3 \"${new_line}chafa is not installed\"\n        chafa -f sixel -s \"${FZF_PREVIEW_COLUMNS}x${FZF_PREVIEW_LINES}\" \"$thumb_path\" 2>> \"$thumbnail_debug_log\" ;;\n\tcatimg)\n\t\tprintf '\\n'\n\t\tcommand_exists \"catimg\" || die 3 \"${new_line}catimg is not installed\"\n\t\tcatimg -w \"$width\" \"$thumb_path\" 2>>\"$thumbnail_debug_log\"\n\t\t;;\n\tcatimg-256)\n\t\tprintf '\\n'\n\t\tcommand_exists \"catimg\" || die 3 \"${new_line}catimg is not installed\"\n\t\tcatimg -c -w \"$width\" \"$thumb_path\" 2>>\"$thumbnail_debug_log\"\n\t\t;;\n\timv)\n\t\timv-msg \"$imv_pid\" open \"$thumb_path\" 2>>\"$thumbnail_debug_log\" >&2\n\t\timv-msg \"$imv_pid\" next 2>>\"$thumbnail_debug_log\" >&2\n\t\t;;\n\tmpv)\n\t\techo \"loadfile '$thumb_path'\" | socat - \"$MPV_SOCKET\" >>\"$thumbnail_debug_log\" 2>&1\n\t\t;;\n\t*)\n\t\tget_ueberzug_positioning \"$FZF_PREVIEW_COLUMNS\" \"$FZF_PREVIEW_LINES\" \"$fzf_preview_side\"\n\t\t\"$thumbnail_viewer\" \"view\" \"$thumb_path\" \"$x\" \"$y\" \"$width\" \"$height\" \"$FZF_PREVIEW_COLUMNS\" \"$FZF_PREVIEW_LINES\" \"$fzf_preview_side\"\n\t\t;;\n\n\tesac\n}\n#}}}\n\npreview_img() {\n\t# This function is common to every thumbnail viewer\n\tthumbnail_viewer=$1\n\tline=$2\n\tvideo_json_file=$3\n\turl=${line##*\"|\"}\n\n\t# make sure all variables are set{{{\n\t_correct_json=$(jq -nr --arg url \"$url\" '[inputs[]|select(.url==$url)][0]' <\"$video_json_file\")\n\tid=\"$(_get_video_json_attr \"ID\")\"\n\ttitle=\"$(_get_video_json_attr \"title\")\"\n\tchannel=\"$(_get_video_json_attr \"channel\")\"\n\tviews=\"$(_get_video_json_attr \"views\")\"\n\tdate=\"$(_get_video_json_attr \"date\")\"\n\tscraper=\"$(_get_video_json_attr \"scraper\")\"\n\tduration=\"$(_get_video_json_attr \"duration\")\"\n\tviewed=\"$(_get_video_json_attr \"viewed\")\"\n\tdescription=\"$(_get_video_json_attr \"description\" | sed 's/\\\\n/\\n/g')\"\n\t#}}}\n\n\t_const_text=$(if command_exists \"thumbnail_video_info_text${scraper:+_$scraper}\"; then\n\t\tthumbnail_video_info_text${scraper:+_$scraper}\n\telse\n\t\tthumbnail_video_info_text\n\tfi)\n\n\t__text_line_count=$(\n\t\twc -l <<-EOF\n\t\t\t    $_const_text\n\t\tEOF\n\t)\n\n\techo \"$_const_text\"\n\n\tpreview_display_image \"$thumbnail_viewer\" \"$id\"\n}\n\ninterface_thumbnails() {\n\t# Takes video json file and downloads the thumnails as ${ID}.png to thumb_dir\n\tvideo_json_file=$1\n\tselected_id_file=$2\n\n\tpreview_start \"$thumbnail_viewer\"\n\n\tunset IFS\n\n\t# ytfzf -U preview_img ueberzug {} \"$video_json_file\"\n\t# fzf_preview_side will get reset if we don't pass it in\n\n\t_c_SORTED_VIDEO_DATA=\"$(create_sorted_video_data)\"\n\n\tYTFZF_SERVER_PID=\"$!\"\n\n\tprintf \"%s\\n\" \"$_c_SORTED_VIDEO_DATA\" |\n\t\tjq -r '\"\\(.title)'\"$gap_space\"'\\t|\\(.channel)\\t|\\(.duration)\\t|\\(.views)\\t|\\(.date)\\t|\\(.viewed)\\t|\\(.url)\"' |\n\t\t_post_video_info_text |\n\t\tfzf -m --sync \\\n\t\t\t--expect=\"$shortcut_binds\" \\\n\t\t\t--preview \"__is_fzf_preview=1 YTFZF_CHECK_VARS_EXISTS=1 session_cache_dir='$session_cache_dir' session_temp_dir='$session_temp_dir' fzf_preview_side='$fzf_preview_side' scrape='$scrape' thumbnail_viewer='$thumbnail_viewer' ytfzf_video_json_file='$ytfzf_video_json_file' $0 -W \\\"preview_img\"$EOT\"{f}\\\"\" \\\n\t\t\t$_fzf_start_bind \\\n\t\t\t--bind \"${next_page_action_shortcut}:reload(__is_fzf_preview=1 TTY_COLS=${TTY_COLS} TTY_LINES=${TTY_LINES} YTFZF_CHECK_VARS_EXISTS=1 session_cache_dir='$session_cache_dir' ytfzf_video_json_file='$ytfzf_video_json_file' invidious_instance='$invidious_instance' yt_video_link_domain='$yt_video_link_domain' pages_to_scrape='$pages_to_scrape' session_temp_dir='$session_temp_dir' $0 -W \\\"next_page\"$EOT\"{f}\\\")\" \\\n\t\t\t--preview-window \"$fzf_preview_side:$preview_window_width:wrap\" --layout=reverse |\n\t\tset_keypress |\n\t\ttrim_url >\"$selected_id_file\"\n\n\tpreview_stop \"$thumbnail_viewer\"\n\n\t_const_top_url=\"$(head -n 1 \"$selected_id_file\")\"\n\t_const_fzf_selected_line_no=\"$(\n\t\tjq -s -r --arg url \"$_const_top_url\" 'flatten|[.[]|.url]|index($url)' <<-EOF\n\t\t\t    $_c_SORTED_VIDEO_DATA\n\t\tEOF\n\t)\"\n}\n#}}}\n\n#}}}\n\n# Handling selection from interface {{{\nget_requested_info() {\n\turl_list=\"$1\"\n\tprepare_for_set_args \",\"\n\tset -- $info_to_print\n\turls=\"[$(sed 's/^\\(.*\\)$/\"\\1\",/' \"$url_list\")\"\n\turls=\"${urls%,}]\"\n\tfor request in \"$@\"; do\n\t\tcase \"$request\" in\n\t\t[Ll] | link)\n\t\t\t# cat is better here because a lot of urls could be selected\n\t\t\tcat \"$url_list\"\n\t\t\t;;\n\t\tVJ | vj | video-json) jq '(.[] | if( [.url] | inside('\"$urls\"')) then . else \"\" end)' <\"$ytfzf_video_json_file\" | jq -s '[ .[]|select(.!=\"\") ]' ;;\n\t\t[Jj] | json) jq <\"$ytfzf_video_json_file\" ;;\n\t\t[Ff] | format) printf \"%s\\n\" \"$ytdl_pref\" ;;\n\t\t[Rr] | raw)\n\t\t\tjq -r '.[] | if( [.url] | inside('\"$urls\"')) then \"\\(.title)\\t|\\(.channel)\\t|\\(.duration)\\t|\\(.views)\\t|\\(.date)\\t|\\(.url)\" else \"\" end' <\"$ytfzf_video_json_file\" | { command_exists \"column\" && column -s \"$tab_space\" -t; }\n\t\t\t;;\n\t\t*)\n\t\t\tcommand_exists \"get_requested_info_$request\" && \"get_requested_info_$request\"\n\t\t\t;;\n\t\tesac\n\tdone\n\tend_of_set_args\n\treturn 0\n}\n\nhandle_info() {\n\tdisplay_text_wrapper \"$(get_requested_info \"$ytfzf_selected_urls\")\"\n\n\t[ \"$info_wait\" -eq 1 ] && info_wait_prompt_wrapper\n\n\tcase \"$info_wait_action\" in\n\t# simulates old behavior of when alt-l or alt-i is pressed and -l is enabled\n\tq) [ \"$is_loop\" -eq 1 ] && return 3 || return 2 ;;\n\tQ) return 2 ;;\n\t[MmCc]) return 3 ;;\n\t'') return 0 ;;\n\t*) if command_exists \"custom_info_wait_action_$info_wait_action\"; then custom_info_wait_action_\"$info_wait_action\"; else print_error \"info_wait_action is set to $info_wait_action but custom_info_wait_action_$info_wait_action does not exist\"; fi ;;\n\tesac\n\treturn 0\n\n}\n\nsubmenu_handler() {\n\t# eat stdin and close it\n\tcat >/dev/null\n\told_interface=\"$interface\"\n\told_thumbnail_viewer=\"$thumbnail_viewer\"\n\t[ \"$keep_vars\" -eq 0 ] && set_vars 0\n\tsearch=\"$(get_key_value \"$_submenu_actions\" \"search\")\"\n\t__scrape=\"$(get_key_value \"$_submenu_actions\" \"type\")\"\n\tsubmenu_opts=\"$old_submenu_scraping_opts $old_submenu_opts -c${__scrape}\"\n\t# this needs to be here as well as close_url_handler because it will not happen inside this function if it's not here\n\turl_handler=\"$old_url_handler\"\n\tthumbnail_viewer=\"$old_thumbnail_viewer\"\n\tinterface=\"$old_interface\"\n\tunset old_interface\n\t(\n\t\t# shellcheck disable=2030\n\t\texport __is_submenu=1\n\n\t\t# shellcheck disable=2030\n\t\tcache_dir=\"${session_cache_dir}\"\n\n\t\tif [ -f \"$YTFZF_CONFIG_DIR/submenu-conf.sh\" ]; then\n\t\t\t# shellcheck disable=1091\n\t\t\t. \"$YTFZF_CONFIG_DIR/submenu-conf.sh\"\n\t\telif [ -f \"$YTFZF_CONFIG_FILE\" ]; then\n\t\t\t# shellcheck disable=1091\n\t\t\t# shellcheck disable=1090\n\t\t\t. \"$YTFZF_CONFIG_FILE\"\n\t\tfi\n\n\t\tprepare_for_set_args\n\t\t# shellcheck disable=2086\n\t\tset -- $submenu_opts \"$search\"\n\t\tend_of_set_args\n\n\t\ton_opt_parse_s() {\n\t\t\tprint_warning \"-s is not supported in submenus\"\n\t\t}\n\n\t\t_getopts \"$@\"\n\n\t\tsource_scrapers\n\n\t\tsearch_again=0\n\n\t\tshift $((OPTIND - 1))\n\n\t\tinit_and_make_search \"$*\" \"fn-args\"\n\t\tif [ \"$enable_back_button\" -eq 1 ]; then\n\t\t\tdata=\"$(cat \"$ytfzf_video_json_file\")\"\n\t\t\techo '[{\"ID\": \"BACK-BUTTON\", \"title\": \"[BACK]\", \"url\": \"back\", \"action\": \"back\"}]' \"$data\" >\"$ytfzf_video_json_file\"\n\t\tfi\n\n\t\tsomething_was_scraped || exit 4\n\n\t\tmain\n\t)\n\tsubmenu_opts=\"$old_submenu_opts\"\n\tsubmenu_scraping_opts=\"$old_submenu_scraping_opts\"\n}\n\nclose_url_handler_submenu_handler() {\n\turl_handler=\"$old_url_handler\"\n\tsubmenu_opts=\"$old_submenu_opts\"\n\tsubmenu_scraping_opts=\"$old_submenu_scraping_opts\"\n}\n\nclose_url_handler() {\n\tfn_name=\"$(printf \"%s\" \"$1\" | tr '-' '_')\"\n\tcommand_exists \"close_url_handler_$fn_name\" && close_url_handler_\"$fn_name\"\n\tprint_debug \"[URL HANDLER]: Closing url handler: ${c_blue}${1}${c_reset} with function: ${c_bold}close_url_handler_${fn_name}${c_reset}\"\n\tdo_an_event_function \"after_close_url_handler\" \"$1\"\n}\n\nopen_url_handler() {\n\t# isaudio, isdownload, ytdl_pref\n\turls=\"$(tr '\\n' ' ' <\"$1\")\"\n\n\tprepare_for_set_args ' '\n\t# shellcheck disable=SC2086\n\tset -- $urls\n\t[ -z \"$*\" ] && print_info \"No urls selected\" && return 0\n\tend_of_set_args\n\n\tdo_an_event_function \"on_open_url_handler\" \"$@\"\n\n\tprint_debug \"[URL HANDLER]: Opening links: ${c_bold}${urls}${c_reset} with ${c_blue}${url_handler}${c_reset}\"\n\n\t# if we provide video_pref etc as arguments, we wouldn't be able to add more as it would break every url handler function\n\t# shellcheck disable=2031\n\tprintf \"%s\\t\" \"$ytdl_pref\" \"$is_audio_only\" \"$is_detach\" \"$video_pref\" \"$audio_pref\" \"$url_handler_opts\" | session_temp_dir=\"${session_temp_dir}\" session_cache_dir=\"${session_cache_dir}\" \"$url_handler\" \"$@\"\n}\n#}}}\n\n# Format selection {{{\nget_video_format_simple() {\n\t# select format if flag given\n\tformats=$(${ytdl_path} -F \"$1\" | grep -v \"storyboard\")\n\t# shellcheck disable=2059\n\tquality=\"$(printf \"$formats\" | grep -v \"audio only\" | sed -n '/^[[:digit:]]/s/.*[[:digit:]]\\+x\\([[:digit:]]\\+\\).*/\\1p/p; 1i\\Audio' | sort -n | uniq | quick_menu_wrapper \"Video Quality\" | sed \"s/p//g\")\"\n\tif [ \"$quality\" = \"Audio\" ]; then\n\t\tis_audio_only=1\n\telif expr \"$formats\" \":\" \".*audio only\" >/dev/null 2>&1; then\n\t\tvideo_format_no=$(printf \"%s\" \"$formats\" | grep -F \"x$quality\" | sed -n 1p)\n\t\tvideo_format_no=\"${video_format_no%% *}\"\n\t\tytdl_pref=\"${video_format_no}+bestaudio/bestaudio\"\n\telse\n\t\tytdl_pref=\"best[height=$quality]/best[height<=?$quality]/bestaudio\"\n\tfi\n\tunset max_quality quality\n}\n\nget_video_format() {\n\tcase \"${ytdl_path##*/}\" in\n\tyoutube-dl) _format_options=$(\"${ytdl_path}\" -F \"$1\" | sed 1,3d) ;;\n\t*) _format_options=$(\"${ytdl_path}\" -q -F \"$1\" --format-sort \"$format_selection_sort\" | sed 1,3d) ;;\n\tesac\n\t_audio_choices=\"$(echo \"$_format_options\" | grep \"audio only\")\"\n\t[ \"$_audio_choices\" ] && audio_pref=\"$(echo \"$_audio_choices\" | quick_menu_wrapper \"Audio format: \" | awk '{print $1}')\"\n\tif [ \"$is_audio_only\" -eq 0 ]; then\n\t\tvideo_pref=$(echo \"$_format_options\" | sed 's/\\\\033\\[[[:digit:]]*m//g' | grep -v 'audio only' | quick_menu_wrapper \"Video Format: \" | awk '{print $1}')\n\tfi\n\tytdl_pref=\"${video_pref}+${audio_pref}/${video_pref}/${audio_pref}\"\n}\n\nopen_format_selection_if_requested() {\n\t[ \"$show_formats\" -eq 0 ] && return\n\n\tprepare_for_set_args\n\t#read from $ytfzf_selected_urls\n\tset -- $(tr '\\n' ' ' <\"$1\")\n\tend_of_set_args\n\n\tprint_debug \"[INTERFACE]: [FORMAT SELECTION]: open format screen: ${c_blue}${format_selection_screen}${c_reset}\"\n\tcase \"$format_selection_screen\" in\n\tnormal)\n\t\tget_video_format \"$1\"\n\t\t;;\n\t*)\n\t\tget_video_format_$format_selection_screen \"$@\"\n\t\t;;\n\tesac\n}\n\n#}}}\n\n# Internal Actions {{{\n#\n# Internal actions are usually called from fzf with the -W option.\n# The point of these actions is to do something that can only be done given a specific ytfzf process instance. Such as displaying thumbnails\n\ninternal_action_help() {\n\tprintf \"%s\\n\" \"Usage: ytfzf -W [help|preview_img]<EOT>[args...]\nAn action followed by \\\\003 (ascii: EOT) followed by args which are seperated by \\\\003.\nActions:\nhelp:\n    Prints usage on -W\npreview_img <ytfzf-line-format>:\n    ytfzf-line-format:\n        path to file where items seperated by \\t| where the last item is the url of the item\n    The following variables must be set\n        session_temp_dir set to the ytfzf process instance's temp dir\n        session_cache_dir set to the ytfzf process instance's cache dir\"\n}\n\ninternal_action_next_page() {\n\tshift\n\n\tread -r line <\"$*\"\n\turl=\"${line##*\"|\"}\"\n\n\tvideo_json_file=\"$ytfzf_video_json_file\"\n\n\tthumb_dir=\"${session_cache_dir}/thumbnails\"\n\n\thovered_scraper=\"$(jq -r '.[]|select(.url==\"'\"$url\"'\").scraper' <\"$ytfzf_video_json_file\")\"\n\n\tif command_exists \"scrape_next_page_$hovered_scraper\"; then\n\t\t_search=\"$(cat \"${session_cache_dir}/searches.list\")\"\n\n\t\tpages_start=\"$(cat \"${session_temp_dir}/${hovered_scraper}-current-page\")\"\n\t\tpages_start=\"${pages_start#[\\\"\\']}\"\n\t\tpages_start=\"${pages_start%[\\\"\\']}\"\n\n\t\tscrape_next_page_\"$hovered_scraper\"\n\tfi\n\n\tif [ \"$show_thumbnails\" -eq 1 ]; then\n\t\tprepare_for_set_args\n\t\tcase \"$async_thumbnails\" in\n\t\t0) download_thumbnails $(get_missing_thumbnails) ;;\n\t\t1) download_thumbnails $(get_missing_thumbnails) >/dev/null 2>&1 & ;;\n\t\tesac\n\t\tend_of_set_args\n\tfi\n\n\t_init_video_info_text \"$TTY_COLS\"\n\n\tcreate_sorted_video_data |\n\t\tvideo_info_text |\n\t\t_post_video_info_text\n}\n\ninternal_action_preview_img() {\n\tshift\n\n\tthumb_dir=\"${session_cache_dir}/thumbnails\"\n\n\tvideo_json_file=\"$ytfzf_video_json_file\"\n\n\tline_file=\"$*\"\n\tread -r line <\"$line_file\"\n\tline=\"${line#\\'}\" line=\"${line%\\'}\"\n\tsource_scrapers\n\tpreview_img \"$thumbnail_viewer\" \"$line\" \"$ytfzf_video_json_file\"\n}\n# }}}\n\n# Options {{{\nparse_opt() {\n\topt=$1\n\toptarg=$2\n\t# for some reason optarg may equal opt intentionally,\n\t# this checks the unmodified optarg, which will only be equal if there is no = sign\n\t[ \"$opt\" = \"$OPTARG\" ] && optarg=\"\"\n\tprint_debug \"[OPTIONS]: Parsing opt: $opt=$optarg\"\n\t# shellcheck disable=SC2031\n\tcommand_exists \"on_opt_parse\" && { on_opt_parse \"$opt\" \"$optarg\" \"$OPT\" \"$OPTARG\" || return 0; }\n\tfn_name=\"on_opt_parse_$(printf \"%s\" \"$opt\" | tr '-' '_')\"\n\t# shellcheck disable=SC2031\n\tcommand_exists \"$fn_name\" && { $fn_name \"$optarg\" \"$OPT\" \"$OPTARG\" || return 0; }\n\tcase $opt in\n\th | help)\n\t\tusage\n\t\texit 0\n\t\t;;\n\tD | external-menu) [ -z \"$optarg\" ] || [ \"$optarg\" -eq 1 ] && interface='ext' ;;\n\tm | audio-only) is_audio_only=${optarg:-1} ;;\n\td | download) url_handler=downloader ;;\n\tf | formats) show_formats=${optarg:-1} ;;\n\tS | select) interface=\"scripting\" && is_specific_select=\"1\" && scripting_video_count=\"$optarg\" ;;\n\ta | auto-select) [ -z \"$optarg\" ] || [ \"$optarg\" -eq 1 ] && is_auto_select=${optarg:-1} ;;\n\tA | select-all) [ -z \"$optarg\" ] || [ \"$optarg\" -eq 1 ] && is_auto_select=${optarg:-1} && scripting_video_count='$' ;;\n\tr | random-select) [ -z \"$optarg\" ] || [ \"$optarg\" -eq 1 ] && is_random_select=${optarg:-1} ;;\n\tn | link-count) scripting_video_count=$optarg ;;\n\tl | loop) is_loop=${optarg:-1} ;;\n\ts | search-again) search_again=${optarg:-1} ;;\n\tt | show-thumbnails) show_thumbnails=${optarg:-1} ;;\n\tversion)\n\t\tprintf 'ytfzf: %s \\n' \"$YTFZF_VERSION\"\n\t\texit 0\n\t\t;;\n\tversion-all)\n\t\tprintf -- '---\\n%s: %s\\n' \"ytfzf\" \"$YTFZF_VERSION\" \"jq\" \"$(jq --version)\" \"curl\" \"$(curl --version)\"\n\t\texit 0\n\t\t;;\n\tL) info_to_print=\"$info_to_print,L\" ;;\n\tpages) pages_to_scrape=\"$optarg\" ;;\n\tpages-start) pages_start=\"$optarg\" ;;\n\tthumbnail-log) thumbnail_debug_log=\"${optarg:-/dev/stderr}\" ;;\n\todysee-video-count) odysee_video_search_count=\"$optarg\" ;;\n\tii | inv-instance) invidious_instance=\"$optarg\" ;;\n\trii | refresh-inv-instances) refresh_inv_instances ;;\n\ti | interface) load_interface \"$optarg\" || die 2 \"$optarg is not an interface\" ;;\n\tc | scrape) scrape=$optarg ;;\n\tscrape+) scrape=\"$scrape,$optarg\" ;;\n\tscrape-) scrape=\"$(printf '%s' \"$scrape\" | sed 's/'\"$optarg\"'//; s/,,/,/g')\" ;;\n\tI) info_to_print=$optarg ;;\n\tnotify-playing) notify_playing=\"${optarg:-1}\" ;;\n\t# long-opt exclusives\n\tsort)\n\t\t: \"${optarg:=1}\"\n\t\tif [ \"$optarg\" != 1 ] && [ \"$optarg\" != 0 ]; then\n\t\t\tis_sort=\"1\"\n\t\t\tload_sort_name \"$optarg\" || die 2 \"$optarg is not a sort-name\"\n\t\telse\n\t\t\tis_sort=${optarg}\n\t\tfi\n\t\t;;\n\tsort-name)\n\t\t# shellcheck disable=SC2015\n\t\tload_sort_name \"$optarg\" && is_sort=1 || die 2 \"$optarg is not a sort-name\"\n\t\t;;\n\tvideo-pref) video_pref=$optarg ;;\n\tytdl-pref) ytdl_pref=$optarg ;;\n\taudio-pref) audio_pref=$optarg ;;\n\tdetach) is_detach=${optarg:-1} ;;\n\tytdl-opts) ytdl_opts=\"$optarg\" ;;\n\tytdl-path) ytdl_path=\"$optarg\" ;;\n\tpreview-side)\n\t\tfzf_preview_side=\"${optarg}\"\n\t\t[ -z \"$fzf_preview_side\" ] && die 2 \"no preview side given\"\n\t\tcase \"$fzf_preview_side\" in\n\t\tleft | right | up | down) : ;;\n\t\t*) die 2 \"$fzf_preview_side is not a valid preview side, must be one of: left, right, up, down\" ;;\n\t\tesac\n\t\t;;\n\tT | thumb-viewer) load_thumbnail_viewer \"$optarg\" || [ -f \"$thumbnail_viewer\" ] || die 2 \"$optarg is not a thumb-viewer\" ;;\n\tforce-youtube) yt_video_link_domain=\"https://www.youtube.com\" ;;\n\tforce-invidious) yt_video_link_domain=\"\" ;;\n\tinfo-print-exit | info-exit) [ \"${optarg:-1}\" -eq 1 ] && info_wait_action=q ;;\n\tinfo-action) info_wait_action=\"$optarg\" ;;\n\tinfo-wait) info_wait=\"${optarg:-1}\" ;;\n\tsort-by) search_sort_by=\"$optarg\" ;;\n\tupload-date) search_upload_date=\"$optarg\" ;;\n\tvideo-duration) search_video_duration=$optarg ;;\n\ttype) search_result_type=$optarg ;;\n\tfeatures) search_result_features=$optarg ;;\n\tregion) search_region=$optarg ;;\n\tchannel-link)\n\t\tinvidious_instance=$(get_random_invidious_instance)\n\t\t_get_real_channel_link \"$optarg\"\n\t\texit 0\n\t\t;;\n\tavailable-inv-instances)\n\t\tget_invidious_instances\n\t\texit 0\n\t\t;;\n\tdisable-submenus) enable_submenus=\"${optarg:-0}\" ;;\n\tdisable-actions) enable_actions=\"$((${optarg:-1} ^ 1))\" ;;\n\tthumbnail-quality) thumbnail_quality=\"$optarg\" ;;\n\tu | url-handler) load_url_handler \"$optarg\" ;;\n\tkeep-cache) keep_cache=\"${optarg:-1}\" ;;\n\tsubmenu-opts | submenu-scraping-opts) submenu_opts=\"${optarg}\" ;;\n\tkeep-vars) keep_vars=\"${optarg:-1}\" ;;\n\tnsfw) nsfw=\"${optarg:-true}\" ;;\n\tmax-threads | single-threaded) max_thread_count=${optarg:-1} ;;\n\t# flip the bit\n\tdisable-back) enable_back_button=${optarg:-0} ;;\n\tskip-thumb-download) skip_thumb_download=${optarg:-1} ;;\n\tmulti-search) multi_search=${optarg:-1} ;;\n\tsearch-source) search_source=\"${optarg:-args}\" ;;\n\tformat-selection) format_selection_screen=${optarg:-normal} ;;\n\tformat-sort) format_selection_sort=\"$optarg\" ;;\n\te | ext) load_extension \"$optarg\" ;;\n\turl-handler-opts) url_handler_opts=\"$optarg\" ;;\n\tlist-addons)\n\t\tfor path in \"$YTFZF_THUMBNAIL_VIEWERS_DIR\" \"$YTFZF_SORT_NAMES_DIR\" \\\n\t\t\t\"$YTFZF_CUSTOM_INTERFACES_DIR\" \"$YTFZF_URL_HANDLERS_DIR\" \"$YTFZF_EXTENSIONS_DIR\"; do\n\t\t\t! [ -d \"$path\" ] && continue\n\t\t\tprintf \"${c_bold}%s:${c_reset}\\n\" \"user addon, ${path##*/}\"\n\t\t\tls \"$path\"\n\t\tdone\n\n\t\techo ----------------\n\n\t\t[ ! -d \"$YTFZF_SYSTEM_ADDON_DIR\" ] && exit\n\n\t\tset +f\n\t\tfor path in \"$YTFZF_SYSTEM_ADDON_DIR\"/*; do\n\t\t\tprintf \"${c_bold}%s:${c_reset}\\n\" \"system addon, ${path##*/}\"\n\t\t\tls \"$path\"\n\t\tdone\n\t\texit\n\t\t;;\n\tasync-thumbnails) async_thumbnails=\"${optarg:-1}\" ;;\n\tfancy-subs)\n\t\tfancy_subs=${optarg:-1}\n\t\t[ \"$fancy_subs\" -eq 1 ] && is_sort=0\n\t\t;;\n\tW)\n\t\tprepare_for_set_args \"$EOT\"\n\t\tset -- $optarg\n\t\tend_of_set_args\n\t\taction=\"$1\"\n\t\tvar_fifo=\"$session_cache_dir/var-fifo\"\n\t\tcommand_exists \"internal_action_$1\" && internal_action_\"$1\" \"$@\"\n\t\texit 0\n\t\t;;\n\t*)\n\t\t# shellcheck disable=SC2031\n\t\t[ \"$OPT\" = \"$long_opt_char\" ] && print_info \"$0: illegal long option -- $opt\"\n\t\t;;\n\tesac\n}\n\n_getopts() {\n\tcase \"$long_opt_char\" in\n\t[a-uw-zA-UW-Z0-9]) die 2 \"long_opt_char must be v or non alphanumeric\" ;;\n\t#? = 1 char, * = 1+ chars; ?* = 2+ chars\n\t??*) die 2 \"long_opt_char must be 1 char\" ;;\n\tesac\n\n\tOPTIND=0\n\n\twhile getopts \"${optstring:=ac:de:fhi:lmn:qrstu:xADHI:LS:T:W:${long_opt_char}:}\" OPT; do\n\t\tcase $OPT in\n\t\t\"$long_opt_char\")\n\t\t\tparse_opt \"${OPTARG%%=*}\" \"${OPTARG#*=}\"\n\t\t\t;;\n\t\t*)\n\t\t\tparse_opt \"${OPT}\" \"${OPTARG}\"\n\t\t\t;;\n\t\tesac\n\tdone\n}\n\n_getopts \"$@\"\n# shellcheck disable=SC2031\nshift $((OPTIND - 1))\n#}}}\n\ndo_an_event_function \"on_post_set_vars\"\n\n# Get search{{{\n#$initial_search should be used before make_search is called\n#$_search should be used in make_search or after it's called and outisde of any scrapers themselves\n#$search should be used in a scraper: eg scrape_json_file\nunset IFS\n: \"${initial_search:=$*}\"\n#}}}\n\n# files {{{\ninit_files() {\n\t#$1 will be a search\n\tSEARCH_PREFIX=$(printf \"%s\" \"$1\" | tr '/' '_' | tr -d \"\\\"'\")\n\t# shellcheck disable=SC2031\n\tif [ \"$__is_submenu\" -eq 1 ]; then\n\t\tSEARCH_PREFIX=$(jq -r --arg url \"$1\" '.[]|select(.url==$url).title' <\"${cache_dir}/videos_json\")\n\tfi\n\n\t# if no search is provided, use a fallback value of SCRAPE-$scrape\n\tSEARCH_PREFIX=\"${SEARCH_PREFIX:-SCRAPE-$scrape}\"\n\t[ \"${#SEARCH_PREFIX}\" -gt 200 ] && SEARCH_PREFIX=\"SCRAPE-$scrape\"\n\n\t#if we are in a submenu, cache_dir will be the previous session_cache_dir\n\n\t[ \"$__is_submenu\" -eq 1 ] && _session_cache_dir_prefix=\"${cache_dir}\" || _session_cache_dir_prefix=\"${YTFZF_TEMP_DIR}\"\n\tsession_cache_dir=\"${_session_cache_dir_prefix}/${SEARCH_PREFIX}-${YTFZF_PID}\"\n\n\tsession_temp_dir=\"${session_cache_dir}/tmp\"\n\n\tthumb_dir=\"${session_cache_dir}/thumbnails\"\n\n\tytfzf_selected_urls=$session_cache_dir/ids\n\tytfzf_video_json_file=$session_cache_dir/videos_json\n\n\tmkdir -p \"$session_temp_dir\" \"$thumb_dir\"\n\n\tkeypress_file=\"${session_temp_dir}/menu_keypress\"\n\n\t: >\"$ytfzf_video_json_file\" 2>\"$ytfzf_selected_urls\" 3>\"$keypress_file\"\n\n\t[ \"$1\" ] && printf \"%s\\n\" \"$1\" >\"${session_cache_dir}/searches.list\"\n\n\tawk 'BEGIN{print srand(srand())}' >\"${session_cache_dir}/created-at\"\n\n\tunset _session_cache_dir_prefix\n}\n\n# }}}\n\n# actions {{{\n\n############################\n#         ACTIONS          #\n############################\n\n# Actions happen after a video is selected, and after the keypresses are handled\n\n# Actions are formatted in the following way\n# action-name data...\n# for the scrape action, data must be formatted in the following way,\n# For custom actions, data can be formatted in any way\n# scrape search=search-in-one-word type=scraper\n\n# actions are attached to videos/items in the menu\nhandle_actions() {\n\tunset _submenu_actions IFS\n\t[ \"$enable_actions\" -eq 0 ] && return 0\n\tactions=$(jq -r --arg urls \"$(cat \"$1\")\" '.[] | [.url, .action] as $data | if ( ($urls | split(\"\\n\" )) | index($data[0]) and $data[1] != null ) == true then $data[1] else \"\" end' <\"$ytfzf_video_json_file\" | sed '/^[[:space:]]*$/d')\n\twhile read -r action; do\n\t\tprint_debug \"[ACTION]: handling action: $action\"\n\n\t\t# this wil only be empty after all urls with actions have happened\n\t\t# shellcheck disable=SC2031\n\t\t# shellcheck disable=SC2086\n\t\tcase \"$action\" in\n\t\tback*) [ $__is_submenu -eq 1 ] && exit ;;\n\t\tscrape*)\n\t\t\t[ $enable_submenus -eq 0 ] && continue\n\t\t\told_url_handler=\"$url_handler\"\n\t\t\told_submenu_opts=\"$submenu_opts\"\n\t\t\told_submenu_scraping_opts=\"$submenu_scraping_opts\"\n\t\t\turl_handler=submenu_handler\n\t\t\t_submenu_actions=\"${_submenu_actions}${new_line}${action}\"\n\t\t\t;;\n\t\tdo-nothing*) return 1 ;;\n\t\t*)\n\t\t\tfn_name=\"handle_custom_action_$(printf \"%s\" \"${action%% *}\" | tr '-' '_')\"\n\t\t\tif command_exists \"$fn_name\"; then\n\t\t\t\t$fn_name \"${action#* }\"\n\t\t\telif command_exists \"handle_custom_action\"; then\n\t\t\t\thandle_custom_action \"$action\"\n\t\t\tfi || return $?\n\t\t\t;;\n\t\tesac\n\t\tbreak # TODO: allow multiple actions or at least let the action decide whether or not it can handle multiple actions\n\tdone <<-EOF\n\t\t    $actions\n\tEOF\n}\n\n#}}}\n\n# scraping wrappers {{{\n\nset_scrape_count() {\n\tprepare_for_set_args \",\"\n\t# shellcheck disable=SC2086\n\tset -- $scrape\n\tend_of_set_args\n\t__total_scrape_count=\"$#\"\n}\n\nhandle_scrape_error() {\n\t_scr=\"$2\"\n\tcase \"$1\" in\n\t1) print_info \"$_scr failed to load website\" ;;\n\t6) print_error \"Website ($_scr) unresponsive (do you have internet?)\" ;;\n\t9) print_info \"$_scr does not have a configuration file\" ;;\n\t22)\n\t\tcase \"$_scr\" in\n\t\tyoutube | Y | youtube-trending | T)\n\t\t\tprint_error \"There was an error scraping $_scr ($invidious_instance)${new_line}Try changing invidious instances\"\n\t\t\t;;\n\t\t*) print_error \"There was an error scraping $_scr\" ;;\n\t\tesac\n\t\t;;\n\t\t#:help search operator\n\t100) print_info \"---------\" && return 100 ;;\n\t126) print_info \"$_scr does not have execute permissions\" ;;\n\t127) die 2 \"invalid scraper: $_scr\" ;;\n\t*) print_error \"An error occured while scraping: $_scr (scraper returned error: $1)\" ;;\n\tesac\n}\n\nhandle_scraping() {\n\t_search=\"$1\"\n\tprepare_for_set_args \",\"\n\t# if there is only 1 scraper used, multi search is on, then multiple searches will be performed seperated by ,\n\t__scrape_count=0\n\t__ret=0\n\tfor curr_scrape in $scrape; do\n\t\t__scrape_count=$((__scrape_count + 1))\n\t\tdo_an_event_function \"ext_on_search\" \"$_search\" \"$curr_scrape\"\n\t\tcommand_exists \"on_search_$_search\" && \"on_search_$_search\" \"$curr_scrape\"\n\t\t\"scrape_$(printf '%s' \"$curr_scrape\" | sed 's/-/_/g')\" \"$_search\" \"$ytfzf_video_json_file\"\n\t\t__ret=$?\n\t\tif [ $__ret != 0 ]; then\n\t\t\thandle_scrape_error $__ret \"$curr_scrape\"\n\t\tfi\n\tdone\n\t[ $? -eq 100 ] && exit 0\n\tend_of_set_args\n}\n\n# check if nothing was scraped{{{\nsomething_was_scraped() {\n\t#this MUST be `! grep -q -v -e '\\[\\]` because it's possible that [] exists in the file IN ADDITION to a list of actual results, we want to see if those actual results exists.\n\tif ! [ -s \"${ytfzf_video_json_file}\" ] || ! grep -q -v -e '\\[\\]' \"$ytfzf_video_json_file\"; then\n\t\tprint_error \"Nothing was scraped\"\n\t\treturn 1\n\tfi\n\treturn 0\n}\n#}}}\n\nis_asking_for_search_necessary() {\n\tprepare_for_set_args \",\"\n\tfor _scr in $scrape; do\n\t\t[ \"${scrape_search_exclude#*\" $_scr \"}\" = \"${scrape_search_exclude}\" ] && return 0\n\tdone\n\tend_of_set_args\n\treturn 1\n}\n\ninit_search() {\n\t_search=\"$1\"\n\t_search_source=\"$2\"\n\n\tprint_debug \"[SEARCH]: initializing search with search: $_search, and sources: $_search_source\"\n\n\t# only ask for search if scrape isn't something like S or T\n\tis_asking_for_search_necessary && { get_search_from_source \"$_search_source\" \"$_search\" || die 5 \"No search query\"; }\n\tinit_files \"$_search\"\n\tset_scrape_count\n\n\t# shellcheck disable=SC2031\n\n\tdo_an_event_function \"on_init_search\" \"$_search\"\n}\n\ninit_and_make_search() {\n\t_search=$1\n\t_search_source=$2\n\tinit_search \"$_search\" \"$_search_source\"\n\tmake_search \"$_search\"\n}\n\nmake_search() {\n\t_search=\"$1\"\n\thandle_scraping \"$_search\"\n\tdo_an_event_function post_scrape\n}\n#}}}\n\n# Main {{{\n\ninit_and_make_search \"$initial_search\" \"$search_source\"\nuntil something_was_scraped; do\n\tcase \"$search_again\" in\n\t0) exit 4 ;;\n\t1) init_and_make_search \"\" \"$search_source\" ;;\n\tesac\ndone\n\nmain() {\n\twhile :; do\n\t\t# calls the interface only if we shouldn't auto select\n\t\tauto_select \"$ytfzf_video_json_file\" \"$ytfzf_selected_urls\" || run_interface\n\n\t\thandle_keypress \"$keypress_file\" || case \"$?\" in\n\t\t2) break ;; 3) continue ;; esac\n\n\t\thandle_actions \"$ytfzf_selected_urls\" || case \"$?\" in\n\t\t2) break ;; 3) continue ;; esac\n\n\t\t# nothing below needs to happen if  this is empty (causes bugs when this is not here)\n\t\t[ ! -s \"$ytfzf_selected_urls\" ] && break\n\n\t\t# shellcheck disable=SC2015\n\t\tif [ \"$info_to_print\" ]; then\n\t\t\thandle_info\n\t\t\tcase \"$?\" in\n\t\t\t2) break ;; 3) continue ;; esac\n\t\tfi\n\n\t\topen_format_selection_if_requested \"$ytfzf_selected_urls\"\n\n\t\topen_url_handler \"$ytfzf_selected_urls\"\n\t\tclose_url_handler \"$url_handler\"\n\n\t\t[ \"$is_loop\" -eq 0 ] && break\n\tdone\n}\n\nmain\n# doing this after the loop allows for -l and -s to coexist\nwhile [ \"$search_again\" -eq 1 ]; do\n\tclean_up\n\tinitial_search= init_and_make_search \"\" \"$search_source\"\n\tmain\ndone\n#}}}\n# vim: foldmethod=marker:shiftwidth=4:tabstop=4\n"
        }
      ]
    }
  ]
}