{
  "metadata": {
    "timestamp": 1736568394779,
    "page": 337,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "andsens/homeshick",
      "stars": 2123,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2021484375,
          "content": "# EditorConfig is awesome: http://EditorConfig.org\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.sh]\nindent_size = 2\nindent_style = space\n\n[*.md]\nmax_line_length = 80\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "/homeshick.code-workspace\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.984375,
          "content": "# Contribution guidelines #\n\n## Reporting issues ##\nMake sure that what you are experiencing is actually an error and that it lies\nwith homeshick (often it can be a git configuration error)\n\n### Questions ###\nIf you have a question be sure to read\n[the documentation](https://github.com/andsens/homeshick/wiki) first.\nOften you will find the answer to it there.\n\n### Description ###\nAs with bug reports everywhere else:\n\n* state the action(s) you took\n* explain what outcome you expected\n* describe the actual result\n\nYou will also need to report which operating system you encountered the issue on\nand which shell you used (type `echo $SHELL` in your terminal if you are unsure).\n\n### Reproducing ###\nUnless you ran in to a [heisenbug](http://en.wikipedia.org/wiki/Heisenbug),\nit should be possible to reproduce the\nbug in a testing environment. To that end run\n`$HOME/.homesick/repos/homeshick/test/interactive` and reproduce the bug.  This\nscript drops you into a new shell where `$HOME` is set to an (almost) empty\ntemporary folder. If you cannot reproduce the bug there, the error is likely\nwith your setup and not homeshick. Otherwise attach the commands you executed\nin that environment to the issue.\n\n## Pull requests ##\n\n### Branching\n**Work from and create pull requests on `development`, not `master`.**\n\n`master` always represents the latest release since that is the way homeshick\nupdates itself. The `development` branch is where work is done for the next\nrelease version of homeshick.\n\n### Code style ###\n* Indent with 2 spaces.\n* Always use double brackets for `if` blocks\n* Run your changes through\n[shellcheck](https://www.shellcheck.net/) with `test/shellcheck`\nand the [bats](https://github.com/sstephenson/bats) testsuite with `test/run`\n\nUse the supplied [editorconfig](http://editorconfig.org) file.\nMost editors have [editorconfig plugins](http://editorconfig.org/#download)\nto apply these settings.\n\n### Content ###\n**Every PR should only contain one feature change, bug fix or typo correction.**\n\nCommits should be atomic units of work, if they are not you should rebase them\nso that they are (typo corrections from a previous change for example do not\njustify a commit).\n\n### Description ###\nThe PR should clearly describe what problem the change fixes.\nA feature addition with no justification and use-case will be rejected.\n\n### Testing ###\nUnless the code-change is a refactor, you should always add unit tests.  When\nfixing a bug there should be a new test case that fails with the old code and\nsucceeds with the new code. When introducing a new feature, it should be\ntested extensively, a single test case will not suffice.\n\nNote that bats does not fail a test case when using double brackets.\nTo assert variable values and file existance you *must* use single brackets!\n\nAlso consider negative test cases (e.g. what happens when a non-existing\ncastlename is passed as an argument?).\n\nYou can read about the details of the testing framework in the\n[testing documentation](https://github.com/andsens/homeshick/wiki/Testing).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "Copyright (c) 2012-2014 Anders Ingemann \n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.3515625,
          "content": "homeshick ![Lint & test](https://github.com/andsens/homeshick/workflows/Lint%20&%20test/badge.svg)\n=========\nIn Unix, configuration files are king.  \nTailoring tools to suit your needs through configuration can be empowering.  \nAn immense number of hours is spent on getting these adjustments just right,\nbut once you leave the confines of your own computer, these local optimizations are left behind.\n\nBy the power of git, homeshick enables you to bring the symphony of settings\nyou have poured your heart into with you to remote computers.\nWith it you can begin to focus even more energy on bettering your work environment\nsince the benefits are reaped on whichever machine you are using.\n\nHowever bare bones these machines are, provided that at least Bash 3 and Git 1.5 are available you can use homeshick.\nhomeshick can handle multiple dotfile repositories. This means that you can install\nlarger frameworks like [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)\nor a multitude of emacs or vim plugins alongside your own customizations without clutter.\n\nFor detailed [installation instructions](https://github.com/andsens/homeshick/wiki/Installation), [tutorials](https://github.com/andsens/homeshick/wiki/Tutorials) and [tips](https://github.com/andsens/homeshick/wiki/Automatic-deployment) & [tricks](https://github.com/andsens/homeshick/wiki/Symlinking) have a look at the [wiki](https://github.com/andsens/homeshick/wiki).\n\nQuick install\n-------------\n\nhomeshick is installed to your own home directory and does not require root privileges to be installed.\n```sh\ngit clone https://github.com/andsens/homeshick.git $HOME/.homesick/repos/homeshick\n```\n*Note: If you'd like to help testing new features before they are released use `git clone --branch testing https://...`*\n\nTo invoke homeshick, source the `homeshick.sh` script from your rc-script:\n```sh\n# from sh and its derivates (bash, dash, ksh, zsh etc.)\nprintf '\\nsource \"$HOME/.homesick/repos/homeshick/homeshick.sh\"' >> $HOME/.bashrc\n# csh and derivatives (i.e. tcsh)\nprintf '\\nalias homeshick source \"$HOME/.homesick/repos/homeshick/homeshick.csh\"\\n' >> $HOME/.cshrc\n# fish shell\necho \\n'source \"$HOME/.homesick/repos/homeshick/homeshick.fish\"' >> \"$HOME/.config/fish/config.fish\"\n```\n\nContributing\n------------\n\nBefore submitting pull requests or reporting bugs, please make sure to read\nthe [contribution guidelines](CONTRIBUTING.md).\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "homeshick.csh",
          "type": "blob",
          "size": 0.4765625,
          "content": "# This helper script should be sourced via an alias, e.g.\n#\n#   alias homeshick \"source $HOME/.homesick/repos/homeshick/homeshick.csh\"\n#\nif ( \"$1\" == \"cd\" && \"x$2\" != \"x\" ) then\n    if ( -d \"$HOME/.homesick/repos/$2/home\" ) then\n        cd \"$HOME/.homesick/repos/$2/home\"\n    else\n        cd \"$HOME/.homesick/repos/$2\"\n    endif\nelse\n    if ( $?HOMESHICK_DIR ) then\n        $HOMESHICK_DIR/bin/homeshick $*\n    else\n        $HOME/.homesick/repos/homeshick/bin/homeshick $*\n    endif\nendif\n"
        },
        {
          "name": "homeshick.fish",
          "type": "blob",
          "size": 0.7509765625,
          "content": "# This script should be sourced in the context of your shell like so:\n# source $HOME/.homesick/repos/homeshick/homeshick.fish\n# Alternatively, it can be installed into one of the directories\n# that fish uses to autoload functions (e.g ~/.config/fish/functions)\n# Once the homeshick() function is defined, you can type\n# \"homeshick cd CASTLE\" to enter a castle.\n\nfunction homeshick\n  if test \\( (count $argv) = 2 -a \"$argv[1]\" = \"cd\" \\)\n    cd \"$HOME/.homesick/repos/$argv[2]\"\n  else if set -q HOMESHICK_DIR\n    eval $HOMESHICK_DIR/bin/homeshick (string escape -- $argv)\n  else if set homeshick (type -P homeshick 2> /dev/null)\n    eval $homeshick (string escape -- $argv)\n  else\n    eval $HOME/.homesick/repos/homeshick/bin/homeshick (string escape -- $argv)\n  end\nend\n"
        },
        {
          "name": "homeshick.sh",
          "type": "blob",
          "size": 0.5029296875,
          "content": "#!/usr/bin/env sh\n# This script should be sourced in the context of your shell like so:\n# source $HOME/.homesick/repos/homeshick/homeshick.sh\n# Once the homeshick() function is defined, you can type\n# \"homeshick cd CASTLE\" to enter a castle.\n\nhomeshick () {\n  if [ \"$1\" = \"cd\" ] && [ -n \"$2\" ]; then\n    # We want replicate cd behavior, so don't use cd ... ||\n    # shellcheck disable=SC2164\n    cd \"$HOME/.homesick/repos/$2\"\n  else\n    \"${HOMESHICK_DIR:-$HOME/.homesick/repos/homeshick}/bin/homeshick\" \"$@\"\n  fi\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}