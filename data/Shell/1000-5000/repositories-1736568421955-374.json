{
  "metadata": {
    "timestamp": 1736568421955,
    "page": 374,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ophub/amlogic-s9xxx-openwrt",
      "stars": 2009,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1123046875,
          "content": "!.gitignore\n/make-openwrt/kernel\n/make-openwrt/u-boot\n/openwrt\n/openwrt-armvirt\n/out\n/tmp\n.DS_Store\nnpm-debug.log*\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "README.cn.md",
          "type": "blob",
          "size": 34.5302734375,
          "content": "# OpenWrt\n\n查看英文说明 | [View English description](README.md)\n\n[OpenWrt](https://openwrt.org/) 项目是一个针对嵌入式设备的 Linux 路由器操作系统。OpenWrt 不是一个单一且不可更改的固件，而是提供了具有软件包管理功能的完全可写的文件系统，让您可以自由选择需要的软件包来定制路由器系统。对于开发人员来说，OpenWrt 是一个无需围绕它构建完整固件就能开发应用程序的框架；对于普通用户来说，这意味着拥有了完全定制的能力，能以意想不到的方式使用该设备。它拥有超过 3000+ 个标准化应用软件包和非常丰富的第三方插件支持，让您可以轻松地将他们应用于各种支持的设备。现在你可以将电视盒子的安卓 TV 系统更换为 OpenWrt 系统，让他成为一台功能强大的路由器。\n\n本项目托众多的[贡献者](https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/CONTRIBUTORS.md)，为 `Amlogic`，`Rockchip` 和 `Allwinner` 盒子构建 OpenWrt 系统。支持写入 eMMC 中使用，支持更新内核等功能，使用方法详见 [OpenWrt 使用文档](./documents/README.cn.md)。最新的固件可以在 [Releases](https://github.com/ophub/amlogic-s9xxx-openwrt/releases) 中下载。欢迎你 `Fork` 并进行个性化软件包定制。如果对你有用，可以点仓库右上角的 `Star` 表示支持。\n\n## OpenWrt 固件说明\n\n| 芯片  | 设备 | [内核](https://github.com/ophub/kernel) | [OpenWrt](https://github.com/ophub/amlogic-s9xxx-openwrt/releases) |\n| ---- | ---- | ---- | ---- |\n| a311d | [Khadas-VIM3](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/99) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_a311d.img |\n| s922x | [Beelink-GT-King](https://github.com/ophub/amlogic-s9xxx-armbian/issues/370), [Beelink-GT-King-Pro](https://github.com/ophub/amlogic-s9xxx-armbian/issues/707), [Ugoos-AM6-Plus](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/464), [ODROID-N2](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/201), [X88-King](https://github.com/ophub/amlogic-s9xxx-armbian/issues/988), [Ali-CT2000](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1150) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s922x.img |\n| s905x3 | [X96-Max+](https://github.com/ophub/amlogic-s9xxx-armbian/issues/351), [HK1-Box](https://github.com/ophub/amlogic-s9xxx-armbian/issues/414), [Vontar-X3](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1006), [H96-Max-X3](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1250), [Ugoos-X3](https://github.com/ophub/amlogic-s9xxx-armbian/issues/782), [TX3(QZ)](https://github.com/ophub/amlogic-s9xxx-armbian/issues/644), [TX3(BZ)](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1077), [X96-Air](https://github.com/ophub/amlogic-s9xxx-armbian/issues/366), [X96-Max+_A100](https://github.com/ophub/amlogic-s9xxx-armbian/issues/779), [A95X-F3-Air](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2282), [Tencent-Aurora-3Pro(s905x3-b)](https://github.com/ophub/amlogic-s9xxx-armbian/issues/506), [X96-Max+Q1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/788), [X96-Max+100W](https://github.com/ophub/amlogic-s9xxx-armbian/issues/909), [X96-Max+_2101](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1086), [Infinity-B32](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1181), [Whale](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1166), [X88-Pro-X3](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1621), [X99-Max-Plus](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1621), [Transpeed-X3-Plus](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1621) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905x3.img |\n| s905x2 | [X96Max-4G](https://github.com/ophub/amlogic-s9xxx-armbian/issues/453), [X96Max-2G](https://github.com/ophub/amlogic-s9xxx-armbian/issues/95), [MECOOL-KM3-4G](https://github.com/ophub/amlogic-s9xxx-armbian/issues/79), [Tanix-Tx5-Max](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/351), [A95X-F2](https://github.com/ophub/amlogic-s9xxx-armbian/issues/851) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905x2.img |\n| s912 | [Tanix-TX8-Max](https://github.com/ophub/amlogic-s9xxx-armbian/issues/500), [Tanix-TX9-Pro(3G)](https://github.com/ophub/amlogic-s9xxx-armbian/issues/315), [Tanix-TX9-Pro(2G)](https://github.com/ophub/amlogic-s9xxx-armbian/issues/740), [Tanix-TX92](https://github.com/ophub/amlogic-s9xxx-armbian/issues/72#issuecomment-1012790770), [Nexbox-A1](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/260), [Nexbox-A95X-A2](https://www.cafago.com/en/p-v2979eu-2g.html),  [A95X](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/260), [H96-Pro-Plus](https://github.com/ophub/amlogic-s9xxx-armbian/issues/72#issuecomment-1013071513), [VORKE-Z6-Plus](https://github.com/ophub/amlogic-s9xxx-armbian/issues/72), [Mecool-M8S-PRO-L](https://github.com/ophub/amlogic-s9xxx-armbian/issues/158), [Vontar-X92](https://github.com/ophub/amlogic-s9xxx-armbian/issues/525), [T95Z-Plus](https://github.com/ophub/amlogic-s9xxx-armbian/issues/668), [Octopus-Planet](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1020), [Phicomm-T1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/522), [TX3-Mini](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1882), [OneCloudPro-V1.1_V1.2](https://github.com/ophub/amlogic-s9xxx-armbian/pull/2241) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s912.img |\n| s905d | [MECOOL-KI-Pro](https://github.com/ophub/amlogic-s9xxx-armbian/issues/59), [Phicomm-N1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/925), [SML-5442TW](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/451) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905d.img |\n| s905x | [HG680P](https://github.com/ophub/amlogic-s9xxx-armbian/issues/262), [B860H](https://github.com/ophub/amlogic-s9xxx-armbian/issues/60), [TBee-Box](https://github.com/ophub/amlogic-s9xxx-armbian/issues/98), [T95](https://github.com/ophub/amlogic-s9xxx-armbian/issues/285), [TX9](https://github.com/ophub/amlogic-s9xxx-armbian/issues/645), [XiaoMI-3S](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1405), [X96](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1480), [Nexbox-a95x](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1714) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905x.img |\n| s905w | [X96-Mini](https://github.com/ophub/amlogic-s9xxx-armbian/issues/621), [TX3-Mini](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1062), [W95](https://github.com/ophub/amlogic-s9xxx-armbian/issues/570), [X96W/FunTV](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1044), [MXQ-Pro-4K](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1140) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905w.img |\n| s905mb | [S65](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1644) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905s905mb.img |\n| s905l | [UNT402A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1481), [M201-S](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/444), [MiBox-4](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2101), [MiBox-4C](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1826), [MG101](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1912), [E900V21C](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2341), [IP108H-53u1m](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2357), [Tencent-Aurora-1s](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2465), [B860AV2.1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2491), [B860AV2.1U](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2499), [HM201](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2585) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905l.img |\n| s905l2 | [MGV2000](https://github.com/ophub/amlogic-s9xxx-armbian/issues/648), [MGV2000-K](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1839), [MGV3000](https://github.com/ophub/amlogic-s9xxx-armbian/issues/921), [Wojia-TV-IPBS9505](https://github.com/ophub/amlogic-s9xxx-armbian/issues/648), [M301A](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/405), [E900v21E](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1278), [e900v21d](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2127), [CM201-1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2188), [IP108H](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2598), [MGV2000-CW](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2616) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905l2.img |\n| s905l3 | [CM211-1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1318), [CM311-1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/763), [HG680-LC](https://github.com/ophub/amlogic-s9xxx-armbian/issues/978), [M401A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/921#issuecomment-1453143251), [UNT400G1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1277), [UNT400G](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2625), [UNT402A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1481), [ZXV10-BV310](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1512), [M411A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1817), [ZXV10-B860AV3.2-M](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2012), [ZXV10-B860AV2.1-U](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2273), [E900V22D-2](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2058), [CM201-1-6-YS](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2539), [IP108H](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2539) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905l3.img |\n| s905l3a | [E900V22C/D](https://github.com/Calmact/e900v22c), [CM311-1a-YST](https://github.com/ophub/amlogic-s9xxx-armbian/issues/517), [M401A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/732), [M411A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/517), [UNT403A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/970), [UNT413A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/970), [ZTE-B863AV3.2-M](https://github.com/ophub/amlogic-s9xxx-armbian/issues/741), [CM311-1a-CH](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1508), [IP112H](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1520), [B863AV3.1-M2](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2292) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905l3a.img |\n| s905l3b | [CM201-1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2209), [CM211-1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1180), [CM311-1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1268), [E900V21D](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2447), [E900V22D](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1256), [E900V21E](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1514), [E900V22E](https://github.com/ophub/amlogic-s9xxx-armbian/issues/939), [M302A/M304A](https://github.com/ophub/amlogic-s9xxx-armbian/pull/615), [Hisense-IP103H](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1154), [TY1608](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1332), [TY1608](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1568), [MGV2000](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1613), [B860AV-2.1M](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1598), [UNT403A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1712), [RG020ET-CA](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1860) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905l3b.img |\n| s905lb | [Q96-mini](https://github.com/ophub/amlogic-s9xxx-armbian/issues/734), [BesTV-R3300L](https://github.com/ophub/amlogic-s9xxx-armbian/pull/993), [SumaVision-Q7](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1190), [MG101](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1570), [s65](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2128), [IPBS9505](https://github.com/ophub/amlogic-s9xxx-armbian/pull/993#issuecomment-2276804591) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905lb.img |\n| s905 | [Beelink-Mini-MX-2G](https://github.com/ophub/amlogic-s9xxx-armbian/issues/127), [Sunvell-T95M](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/337), [MXQ-Pro+4K](https://github.com/ophub/amlogic-s9xxx-armbian/issues/715), [SumaVision-Q5](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1175) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905.img |\n| rk3588 | [Radxa-Rock5B](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1240), [Radxa-Rock5C](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2324), [Orange-Pi-5-Plus](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2400), [Beelink-IPC-R](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/415), [HLink-H88K](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1726), [HLink-H88K-V3](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1726), [NanoPC-T6](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2453) | [rk3588](https://github.com/ophub/kernel/releases/tag/kernel_rk3588) | rockchip_boxname.img |\n| rk3568 | [FastRhino-R66S](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1061), [FastRhino-R68S](https://github.com/ophub/amlogic-s9xxx-armbian/issues/774), [Radxa-E25](https://wiki.radxa.com/Rock3/CM/CM3I/E25), [NanoPi-R5S](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1217), [NanoPi-R5C](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1217), [HLink-H66K](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1726), [HLink-H68K](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1726), [HLink-H69K](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1726), [Seewo-sv21](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2017), [Mrkaio-m68s](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2155), [Swan1-w28](https://github.com/ophub/amlogic-s9xxx-armbian/pull/2407), [Ruisen-box](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2508), [DG-TN3568](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2661) | [rk35xx](https://github.com/ophub/kernel/releases/tag/kernel_rk35xx) | [rk35xx](https://github.com/ophub/kernel/releases/tag/kernel_rk35xx)<br />[6.x.y](https://github.com/ophub/kernel/releases/tag/kernel_stable) | rockchip_boxname.img |\n| rk3566 | [Panther-X2](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1319), [JP-TvBox](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1867), [LCKFB-Taishan-Pi](https://github.com/ophub/amlogic-s9xxx-armbian/pull/2538) | [rk35xx](https://github.com/ophub/kernel/releases/tag/kernel_rk35xx)<br />[6.x.y](https://github.com/ophub/kernel/releases/tag/kernel_stable) | rockchip_boxname.img |\n| rk3528 | [HLink-H28K](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1726), [Radxa-E20C](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2324), [H96-Max-M2](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2404) | [rk35xx](https://github.com/ophub/kernel/releases/tag/kernel_rk35xx) | rockchip_boxname.img |\n| rk3399 | [EAIDK-610](https://github.com/ophub/amlogic-s9xxx-armbian/pull/991), [King3399](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1080), [TN3399](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1094), [Kylin3399](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1132), [ZCube1-Max](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1247), [CRRC](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1280), [SMART-AM40](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1317), [SW799](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1326), [ZYSJ](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1380), [DG-3399](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1492), [DLFR100](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1522), [Emb3531](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1549), [Leez-p710](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1609), [tvi3315a](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1687), [xiaobao](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1698), [Fine3399](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1790), [Firefly-RK3399](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/491), [LX-R3S](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2026), [Hugsun-x99](https://github.com/ophub/amlogic-s9xxx-armbian/pull/2050), [Tb-ls3399](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2146), [Hisense-hs530r](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/572), [Tpm312](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2403), [ZK-rk39a](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2446), [YSKJ](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2673), [Fmx1-Pro](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2691) | [6.x.y](https://github.com/ophub/kernel/releases/tag/kernel_stable) | rockchip_boxname.img |\n| rk3328 | [BeikeYun](https://github.com/ophub/amlogic-s9xxx-armbian/issues/852), [Chainedbox-L1-Pro](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1680), [Station-M1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1313), [Bqeel-MVR9](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1313), [Renegade/Firefly](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1861) | [全部](https://github.com/ophub/kernel/releases/tag/kernel_stable) | rockchip_boxname.img |\n| rk3318 | [RX3318-Box](https://github.com/ophub/amlogic-s9xxx-armbian/pull/2129) | [6.x.y](https://github.com/ophub/kernel/releases/tag/kernel_stable) | rockchip_boxname.img |\n| h6 | [Vplus](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1100), [Tanix-TX6](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1120), [TQC-A01](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1638) | [6.x.y](https://github.com/ophub/kernel/releases/tag/kernel_stable)<br>[h6](https://github.com/ophub/kernel/releases/tag/kernel_h6) | allwinner_boxname.img |\n\n> [!TIP]\n> 目前 [s905 的盒子](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1173)只能在 `TF/SD/USB` 中使用，其他型号的盒子支持写入 `EMMC` 中使用。更多信息请查阅[支持的设备列表说明](make-openwrt/openwrt-files/common-files/etc/model_database.conf)。可以参考说明文档中 12.15 章节的方法[添加新的支持设备](https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/documents/README.cn.md#1215-如何添加新的支持设备)。使用前先阅读 [OpenWrt 使用文档](./documents/README.cn.md)，常见问题都有解决方法。\n\n## 安装及升级 OpenWrt 的相关说明\n\n选择和你的电视盒子型号对应的 OpenWrt 固件，不同设备的使用方法查看对应的说明。\n\n- ### 安装 OpenWrt\n\n1. `Rockchip` 平台的安装方法请查看说明文档中的 [第 8 章节](https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/documents/README.cn.md) 的介绍，和 Armbian 的安装方法相同。\n\n2. `Amlogic` 和 `Allwinner` 平台，使用 [Rufus](https://rufus.ie/) 或者 [balenaEtcher](https://www.balena.io/etcher/) 等工具将固件写入 USB 里，然后把写好固件的 USB 插入盒子。浏览器访问 OpenWrt 的 IP(例如 192.168.1.1) → `使用默认账户登录进入 OpenWrt` → `系统菜单` → `晶晨宝盒` → `安装 OpenWrt` ，在支持的设备下拉列表中选择你的盒子，点击 `安装 OpenWrt` 按钮进行安装。\n\n- ### 升级 OpenWrt 系统或内核\n\n浏览器访问 OpenWrt 的 IP(例如 192.168.1.1) →  `使用账户登录进入 OpenWrt` → `系统菜单` → `晶晨宝盒` → `手动上传更新 / 在线下载更新`\n\n如果选择 `手动上传更新` [OpenWrt 固件](https://github.com/ophub/amlogic-s9xxx-openwrt/releases)，可以将编译好 OpenWrt 固件压缩包，如 openwrt_xxx_k5.15.50.img.gz 进行上传（推荐上传压缩包，系统会自动解压。如果上传解压缩后的 xxx.img 格式的文件，可能会因为文件太大而上传失败），上传完成后界面将显示 `更新固件` 的操作按钮，点击即可更新。\n\n如果选择 `手动上传更新` [OpenWrt 内核](https://github.com/ophub/kernel/releases/tag/kernel_stable)，可以将 `boot-xxx.tar.gz`, `dtb-xxx.tar.gz`, `modules-xxx.tar.gz` 这 3 个内核文件上传（其他内核文件不需要，如果同时上传也不影响更新，系统可以准确识别需要的内核文件），上传完成后界面将显示 `更新内核` 的操作按钮，点击即可更新。内核更新失败造成系统无法启动时，可以使用 `openwrt-kernel -s` 命令进行内核恢复，方法详见[内核恢复](documents/README.cn.md#9-升级-openwrt-系统或内核)\n\n如果选择 `在线下载更新` OpenWrt 固件或内核，将根据`插件设置`中的`固件下载地址`和`内核下载地址`进行下载，你可以自定义修改下载来源，具体操作方法详见 [luci-app-amlogic](https://github.com/ophub/luci-app-amlogic) 的编译与使用说明。\n\n- ### 为 OpenWrt 创建 swap\n\n如果你在使用 `docker` 等内存占用较大的应用时，觉得当前盒子的内存不够使用，可以创建 `swap` 虚拟内存分区，将 `/mnt/*4` 磁盘空间的一定容量虚拟成内存来使用。下面命令输入参数的单位是 `GB`，默认为 `1`。\n\n浏览器访问 OpenWrt 的 IP(例如 192.168.1.1) → `使用默认账户登录进入 OpenWrt` → `系统菜单` → `TTYD 终端` → 输入命令\n\n```yaml\nopenwrt-swap 1\n```\n\n- ### 备份/还原 EMMC 原系统\n\n支持在 `TF/SD/USB` 中对盒子的 `EMMC` 分区进行备份/恢复。建议您在全新的盒子里安装 OpenWrt 系统前，先对当前盒子自带的安卓 TV 系统进行备份，以便日后在恢复电视系统等情况下使用。\n\n请从 `TF/SD/USB` 启动 OpenWrt 系统，浏览器访问 OpenWrt 的 IP(例如 192.168.1.1) → `使用默认账户登录进入 OpenWrt` → `系统菜单` → `TTYD 终端` → 输入命令\n\n```yaml\nopenwrt-ddbr\n```\n\n根据提示输入 `b` 进行系统备份，输入 `r` 进行系统恢复。\n\n> [!IMPORTANT]\n> 除此之外也可以通过线刷的方法，将安卓系统刷入 eMMC 中，安卓系统的下载镜像可在 [Tools](https://github.com/ophub/kernel/releases/tag/tools) 中查找。\n\n- ### 控制 LED 显示\n\n浏览器访问 OpenWrt 的 IP(例如 192.168.1.1) → `使用默认账户登录进入 OpenWrt` → `系统菜单` → `TTYD 终端` → 输入命令\n\n```yaml\nopenwrt-openvfd\n```\n\n根据 [LED 屏显示控制说明](https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/documents/led_screen_display_control.md) 进行调试。\n\n- ### 恢复到初始化状态\n\n浏览器访问 OpenWrt 的 IP(例如 192.168.1.1) → `使用默认账户登录进入 OpenWrt` → `系统菜单` → `晶晨宝盒` → `备份固件配置` → `快照管理` → `初始化快照`，点击 `还原快照` 即可恢复至初始化状态。\n\n也可以在 `系统菜单` → `TTYD 终端` → 输入命令 `firstboot` 恢复系统至初始化状态。这两种方法的操作结果相同。\n\n- ### 更多使用说明\n\n在 OpenWrt 的使用中，一些可能遇到的常见问题详见 [使用文档](./documents/README.cn.md)\n\n## 本地化打包\n\n1. 安装必要的软件包（如 Ubuntu 22.04 LTS 用户）\n```yaml\nsudo apt-get update -y\nsudo apt-get full-upgrade -y\n# For Ubuntu-22.04\nsudo apt-get install -y $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)\n```\n2. Clone 仓库到本地 `git clone --depth 1 https://github.com/ophub/amlogic-s9xxx-openwrt.git`\n3. 在 `~/amlogic-s9xxx-openwrt` 根目录下创建 `openwrt-armvirt` 文件夹, 并将 `openwrt-armvirt-64-default-rootfs.tar.gz` 文件上传至此目录。\n4. 在 `~/amlogic-s9xxx-openwrt` 根目录中输入打包命令，如 `sudo ./remake -b s905x3 -k 6.1.10`。打包完成的 OpenWrt 固件放在根目录下的 `out` 文件夹里。\n\n- ### 本地化打包参数说明\n\n| 参数  | 含义       | 说明               |\n| ---- | ---------- | ----------------- |\n| -b   | Board      | 指定电视盒子型号，如 `-b s905x3` . 多个型号使用 `_` 进行连接，如 `-b s905x3_s905d` . 使用 `all` 表示全部型号。型号代码详见 [model_database.conf](make-openwrt/openwrt-files/common-files/etc/model_database.conf) 中的 `BOARD` 设置。默认值：`all` |\n| -r   | KernelRepo | 指定 github.com 内核仓库的 `<owner>/<repo>`。默认值：`ophub/kernel` |\n| -u   | kernelUsage | 设置使用的内核的 `tags 后缀`，如 [stable](https://github.com/ophub/kernel/releases/tag/kernel_stable), [flippy](https://github.com/ophub/kernel/releases/tag/kernel_flippy), [dev](https://github.com/ophub/kernel/releases/tag/kernel_dev), [beta](https://github.com/ophub/kernel/releases/tag/kernel_beta)。默认值：`stable` |\n| -k   | Kernel     | 指定 [kernel](https://github.com/ophub/kernel/releases/tag/kernel_stable) 名称，如 `-k 5.10.125` . 多个内核使用 `_` 进行连接，如 `-k 5.10.125_5.15.50` 。通过 `-k` 参数自由指定的内核版本只对使用 `stable/flippy/dev/beta` 的内核有效。其他内核系列例如 [rk3588](https://github.com/ophub/kernel/releases/tag/kernel_rk3588) / [rk35xx](https://github.com/ophub/kernel/releases/tag/kernel_rk35xx) / 其他内核系列例如 [h6](https://github.com/ophub/kernel/releases/tag/kernel_h6) 等只能使用特定内核。  |\n| -a   | AutoKernel | 设置是否自动采用同系列最新版本内核。当为 `true` 时，将自动在内核库中查找在 `-k` 中指定的内核如 5.10.125 的同系列是否有更新的版本，如有 5.10.125 之后的最新版本时，将自动更换为最新版。设置为 `false` 时将编译指定版本内核。默认值：`true` |\n| -s   | Size       | 对系统的镜像分区大小进行设置，只设置 ROOTFS 分区大小时可以只指定一个数值，例如： `-s 1024`。需要同时设置 BOOTFS 和 ROOTFS 分区大小时，使用 / 对两个数值进行连接，例如： `-s 256/1024`。默认值：`256/1024` |\n| -n   | BuilderName | 设置 OpenWrt 系统构建者签名。设置签名时请勿包含空格。默认值：`无` |\n\n- `sudo ./remake` : 使用默认配置，使用内核库中的最新内核包，对全部型号的电视盒子进行打包。\n- `sudo ./remake -b s905x3 -k 6.1.10` : 推荐使用. 使用默认配置进行相关内核打包。\n- `sudo ./remake -b s905x3 -k 6.1.y` : 使用默认配置进行相关内核打包，内核使用 6.1.y 系列的最新版。\n- `sudo ./remake -b s905x3_s905d -k 6.1.10_5.15.50` : 使用默认配置，进行多个内核同时打包。使用 `_` 进行多内核参数连接。\n- `sudo ./remake -b s905x3 -k 6.1.10 -s 1024` : 使用默认配置，指定一个内核，一个型号进行打包，固件大小设定为 1024 MiB。\n- `sudo ./remake -b s905x3_s905d`  使用默认配置，对多个型号的电视盒子进行全部内核打包, 使用 `_` 进行多型号连接。\n- `sudo ./remake -k 6.1.10_5.15.50` : 使用默认配置，指定多个内核，进行全部型号电视盒子进行打包, 内核包使用 `_` 进行连接。\n- `sudo ./remake -k 6.1.10_5.15.50 -a true` : 使用默认配置，指定多个内核，进行全部型号电视盒子进行打包, 内核包使用 `_` 进行连接。自动升级到同系列最新内核。\n- `sudo ./remake -s 1024 -k 6.1.10` : 使用默认配置，设置固件大小为 1024 MiB, 并指定内核为 6.1.10 ，对全部型号电视盒子进行打包。\n\n## 使用 GitHub Actions 进行编译\n\n你可以通过修改 [config](config) 目录的相关个性化固件配置文件，以及 [.yml](.github/workflows) 文件, 自定义和编译适合你的 OpenWrt 固件,  固件可以上传至 github.com 的 `Actions` 和 `Releases` 等处.\n\n1. 你可以在 [使用文档](./documents/README.cn.md) 中查看个性化固件配置说明。编译流程控制文件是 [.yml](https://github.com/ophub/amlogic-s9xxx-openwrt/blob/main/.github/workflows/build-openwrt.yml)\n2. 全新编译：在 github.com 的 [Action](https://github.com/ophub/amlogic-s9xxx-openwrt/actions) 选择 ***`Build OpenWrt`*** . 点击 ***`Run workflow`*** 按钮进行固件一站式编译和打包。\n3. 再次编译：如果 [Releases](https://github.com/ophub/amlogic-s9xxx-openwrt/releases) 中有已经编译好的 `openwrt-armvirt-64-default-rootfs.tar.gz` 文件，你只是想再次制作其他不同 board 的盒子，可以跳过 OpenWrt 源文件的编译，直接进行二次制作。在 [Actions](https://github.com/ophub/amlogic-s9xxx-openwrt/actions) 页面中选择  ***`Use Releases file to Packaging`*** ，点击 ***`Run workflow`*** 按钮即可二次编译。\n4. 更多支持：编译好的 `openwrt-armvirt-64-default-rootfs.tar.gz` 文件是制作各种不同 board 固件的通用文件，也适用于使用 [unifreq](https://github.com/unifreq/openwrt_packit) 的打包脚本制作 OpenWrt 固件。他作为在盒子里使用 OpenWrt 和 Armbian 系统的开创者，对更多的设备进行了支持，如在 [Armbian](https://github.com/ophub/amlogic-s9xxx-armbian) 系统中通过 `KVM` 虚拟机使用的 OpenWrt（[QEMU 版](https://github.com/unifreq/openwrt_packit/blob/master/files/qemu-aarch64/qemu-aarch64-readme.md)）、Amlogic、Rockchip，以及 Allwinner 系列等。打包方法详见他的仓库说明，在 Actions 中通过 [packaging-openwrt-for-qemu-etc.yml](.github/workflows/packaging-openwrt-for-qemu-etc.yml) 可以调用他的打包脚本制作更多固件。\n\n```yaml\n- name: Package Armvirt as OpenWrt\n  uses: ophub/amlogic-s9xxx-openwrt@main\n  with:\n    openwrt_path: openwrt/bin/targets/*/*/*rootfs.tar.gz\n    openwrt_board: s905x3_s905x2_s905x_s905w_s905d_s922x_s912\n    openwrt_kernel: 6.1.y_5.15.y\n```\n\n- ### GitHub Actions 输入参数说明\n\n相关参数与`本地打包命令`相对应，请参考上面的说明。\n\n| 参数               | 默认值             | 说明                                        |\n|-------------------|-------------------|-------------------------------------------|\n| openwrt_path      | 无                | 设置 `openwrt-armvirt-64-default-rootfs.tar.gz` 的文件路径，可以使用相对路径如 `openwrt/bin/targets/*/*/*rootfs.tar.gz` 或网络文件下载地址如 `https://github.com/*/releases/*/*rootfs.tar.gz` |\n| openwrt_board     | all               | 设置打包盒子的 `board` ，功能参考 `-b` |\n| kernel_repo       | ophub/kernel      | 指定 github.com 内核仓库的 `<owner>/<repo>`，功能参考 `-r` |\n| kernel_usage      | stable            | 设置使用的内核的 `tags 后缀`。功能参考 `-u` |\n| openwrt_kernel    | 6.1.y_5.15.y      | 设置内核版本，功能参考 `-k` |\n| auto_kernel       | true              | 设置是否自动采用同系列最新版本内核。功能参考 `-a` |\n| openwrt_size      | 256/1024          | 设置系统 BOOTFS 和 ROOTFS 分区的大小，功能参考 `-s` |\n| builder_name      | 无                | 设置 OpenWrt 系统构建者签名，功能参考 `-n`     |\n\n\n- ### GitHub Actions 输出变量说明\n\n上传到 `Releases` 需要给仓库设置 `Workflow 读写权限`，详见[使用说明](./documents/README.cn.md#2-设置隐私变量-github_token)。\n\n| 参数                              | 默认值              | 说明                   |\n|----------------------------------|--------------------|------------------------|\n| ${{ env.PACKAGED_OUTPUTPATH }}   | out                | Armbian 系统文件输出路径  |\n| ${{ env.PACKAGED_OUTPUTDATE }}   | 04.13.1058         | 打包日期（月.日.时分）     |\n| ${{ env.PACKAGED_STATUS }}       | success / failure  | 打包状态。成功 / 失败     |\n\n## openwrt-*-rootfs.tar.gz 用于打包的文件编译选项\n\n| Option | Value |\n| ------ | ----- |\n| Target System | Arm SystemReady (EFI) compliant |\n| Subtarget | 64-bit (armv8) machines |\n| Target Profile | Generic EFI Boot |\n| Target Images | tar.gz |\n\n更多信息请查阅 [使用文档](./documents/README.cn.md)\n\n## OpenWrt 固件默认信息\n\n| 名称 | 值 |\n| ---- | ---- |\n| 默认 IP | 192.168.1.1 |\n| 默认账号 | root |\n| 默认密码 | password |\n| 默认 WIFI 名称 | OpenWrt |\n| 默认 WIFI 密码 | 无 |\n\n## 编译内核\n\n内核的编译方法详见 [compile-kernel](https://github.com/ophub/amlogic-s9xxx-armbian/tree/main/compile-kernel)\n\n```yaml\n- name: Compile the kernel\n  uses: ophub/amlogic-s9xxx-armbian@main\n  with:\n    build_target: kernel\n    kernel_version: 6.1.y_5.15.y\n    kernel_auto: true\n    kernel_sign: -yourname\n```\n\n## 资源说明\n\n制作 OpenWrt 系统时，所使用的 [kernel](https://github.com/ophub/kernel) 和 [u-boot](https://github.com/ophub/u-boot) 等文件，与制作 [Armbian](https://github.com/ophub/amlogic-s9xxx-armbian) 系统使用的是相同的文件。为了不重复维护，相关内容归类放在了对应的资源仓库，在使用时将自动从相关仓库进行下载。\n\n本系统所使用的 [u-boot](https://github.com/ophub/u-boot), [kernel](https://github.com/ophub/kernel) 等资源主要从 [unifreq/openwrt_packit](https://github.com/unifreq/openwrt_packit) 的项目中复制而来，部分文件由用户在 [amlogic-s9xxx-openwrt](https://github.com/ophub/amlogic-s9xxx-openwrt) / [amlogic-s9xxx-armbian](https://github.com/ophub/amlogic-s9xxx-armbian) / [luci-app-amlogic](https://github.com/ophub/luci-app-amlogic) / [kernel](https://github.com/ophub/kernel) / [u-boot](https://github.com/ophub/u-boot) 等项目的 [Pull](https://github.com/ophub/amlogic-s9xxx-openwrt/pulls) 和 [Issues](https://github.com/ophub/amlogic-s9xxx-openwrt/issues) 中提供分享。`unifreq` 为我们开启了在电视盒子中使用 OpenWrt 的大门，深受其影响，我的固件在制作和使用中继承了他一贯的标准。为感谢这些开拓者和分享者，我统一在 [CONTRIBUTORS.md](https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/CONTRIBUTORS.md) 中进行了记录。再次感谢大家为盒子赋予了新的生命和意义。\n\n## 其他发行版\n\n- [unifreq](https://github.com/unifreq/openwrt_packit) 为晶晨、瑞芯微和全志等更多盒子制作了 `OpenWrt` 系统，属于盒子圈的标杆，推荐使用。\n- [amlogic-s9xxx-armbian](https://github.com/ophub/amlogic-s9xxx-armbian) 项目提供了在盒子中使用的 `Armbian` 系统，在支持 OpenWrt 的相关设备中同样适用。\n\n## 链接\n\n- [unifreq](https://github.com/unifreq/openwrt_packit)\n- [OpenWrt](https://github.com/openwrt/openwrt)\n- [coolsnowwolf](https://github.com/coolsnowwolf/lede)\n- [immortalwrt](https://github.com/immortalwrt/immortalwrt)\n\n## License\n\nThe amlogic-s9xxx-openwrt © OPHUB is licensed under [GPL-2.0](https://github.com/ophub/amlogic-s9xxx-openwrt/blob/main/LICENSE)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 36.0537109375,
          "content": "# OpenWrt\n\nView Chinese description | [查看中文说明](README.cn.md)\n\nThe [OpenWrt](https://openwrt.org/) project is a Linux router operating system for embedded devices. OpenWrt is not a single and immutable firmware, but rather provides a fully writable filesystem with package management capabilities, allowing you to freely select the required software packages to customize the router system. For developers, OpenWrt is a framework that allows application development without having to build a complete firmware around it; for ordinary users, it means having the capability for complete customization, and the ability to use the device in unexpected ways. It has over 3000+ standardized application software packages and extensive third-party plugin support, allowing you to easily apply them to various supported devices. Now you can replace the Android TV system on your TV box with the OpenWrt system, turning it into a powerful router.\n\nThis project, thanks to numerous [contributors](https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/CONTRIBUTORS.md), builds the OpenWrt system for `Amlogic`, `Rockchip`, and `Allwinner` boxes. It supports writing to eMMC for use, supports updating the kernel, and more. For detailed usage instructions, see the [OpenWrt User Guide](./documents). The latest firmware can be downloaded from [Releases](https://github.com/ophub/amlogic-s9xxx-openwrt/releases). You are welcome to `Fork` and customize the software packages. If you find it useful, you can click the `Star` in the upper right corner of the repository to show your support.\n\n## OpenWrt System Description\n\n| SoC  | Device | [Kernel](https://github.com/ophub/kernel) | [OpenWrt](https://github.com/ophub/amlogic-s9xxx-openwrt/releases) |\n| ---- | ---- | ---- | ---- |\n| a311d | [Khadas-VIM3](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/99) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_a311d.img |\n| s922x | [Beelink-GT-King](https://github.com/ophub/amlogic-s9xxx-armbian/issues/370), [Beelink-GT-King-Pro](https://github.com/ophub/amlogic-s9xxx-armbian/issues/707), [Ugoos-AM6-Plus](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/464), [ODROID-N2](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/201), [X88-King](https://github.com/ophub/amlogic-s9xxx-armbian/issues/988), [Ali-CT2000](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1150) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s922x.img |\n| s905x3 | [X96-Max+](https://github.com/ophub/amlogic-s9xxx-armbian/issues/351), [HK1-Box](https://github.com/ophub/amlogic-s9xxx-armbian/issues/414), [Vontar-X3](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1006), [H96-Max-X3](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1250), [Ugoos-X3](https://github.com/ophub/amlogic-s9xxx-armbian/issues/782), [TX3(QZ)](https://github.com/ophub/amlogic-s9xxx-armbian/issues/644), [TX3(BZ)](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1077), [X96-Air](https://github.com/ophub/amlogic-s9xxx-armbian/issues/366), [X96-Max+_A100](https://github.com/ophub/amlogic-s9xxx-armbian/issues/779), [A95X-F3-Air](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2282), [Tencent-Aurora-3Pro(s905x3-b)](https://github.com/ophub/amlogic-s9xxx-armbian/issues/506), [X96-Max+Q1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/788), [X96-Max+100W](https://github.com/ophub/amlogic-s9xxx-armbian/issues/909), [X96-Max+_2101](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1086), [Infinity-B32](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1181), [Whale](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1166), [X88-Pro-X3](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1621), [X99-Max-Plus](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1621), [Transpeed-X3-Plus](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1621) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905x3.img |\n| s905x2 | [X96Max-4G](https://github.com/ophub/amlogic-s9xxx-armbian/issues/453), [X96Max-2G](https://github.com/ophub/amlogic-s9xxx-armbian/issues/95), [MECOOL-KM3-4G](https://github.com/ophub/amlogic-s9xxx-armbian/issues/79), [Tanix-Tx5-Max](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/351), [A95X-F2](https://github.com/ophub/amlogic-s9xxx-armbian/issues/851) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905x2.img |\n| s912 | [Tanix-TX8-Max](https://github.com/ophub/amlogic-s9xxx-armbian/issues/500), [Tanix-TX9-Pro(3G)](https://github.com/ophub/amlogic-s9xxx-armbian/issues/315), [Tanix-TX9-Pro(2G)](https://github.com/ophub/amlogic-s9xxx-armbian/issues/740), [Tanix-TX92](https://github.com/ophub/amlogic-s9xxx-armbian/issues/72#issuecomment-1012790770), [Nexbox-A1](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/260), [Nexbox-A95X-A2](https://www.cafago.com/en/p-v2979eu-2g.html),  [A95X](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/260), [H96-Pro-Plus](https://github.com/ophub/amlogic-s9xxx-armbian/issues/72#issuecomment-1013071513), [VORKE-Z6-Plus](https://github.com/ophub/amlogic-s9xxx-armbian/issues/72), [Mecool-M8S-PRO-L](https://github.com/ophub/amlogic-s9xxx-armbian/issues/158), [Vontar-X92](https://github.com/ophub/amlogic-s9xxx-armbian/issues/525), [T95Z-Plus](https://github.com/ophub/amlogic-s9xxx-armbian/issues/668), [Octopus-Planet](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1020), [Phicomm-T1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/522), [TX3-Mini](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1882), [OneCloudPro-V1.1_V1.2](https://github.com/ophub/amlogic-s9xxx-armbian/pull/2241) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s912.img |\n| s905d | [MECOOL-KI-Pro](https://github.com/ophub/amlogic-s9xxx-armbian/issues/59), [Phicomm-N1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/925), [SML-5442TW](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/451) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905d.img |\n| s905x | [HG680P](https://github.com/ophub/amlogic-s9xxx-armbian/issues/262), [B860H](https://github.com/ophub/amlogic-s9xxx-armbian/issues/60), [TBee-Box](https://github.com/ophub/amlogic-s9xxx-armbian/issues/98), [T95](https://github.com/ophub/amlogic-s9xxx-armbian/issues/285), [TX9](https://github.com/ophub/amlogic-s9xxx-armbian/issues/645), [XiaoMI-3S](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1405), [X96](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1480), [Nexbox-a95x](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1714) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905x.img |\n| s905w | [X96-Mini](https://github.com/ophub/amlogic-s9xxx-armbian/issues/621), [TX3-Mini](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1062), [W95](https://github.com/ophub/amlogic-s9xxx-armbian/issues/570), [X96W/FunTV](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1044), [MXQ-Pro-4K](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1140) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905w.img |\n| s905mb | [S65](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1644) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905s905mb.img |\n| s905l | [UNT402A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1481), [M201-S](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/444), [MiBox-4](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2101), [MiBox-4C](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1826), [MG101](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1912), [E900V21C](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2341), [IP108H-53u1m](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2357), [Tencent-Aurora-1s](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2465), [B860AV2.1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2491), [B860AV2.1U](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2499), [HM201](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2585) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905l.img |\n| s905l2 | [MGV2000](https://github.com/ophub/amlogic-s9xxx-armbian/issues/648), [MGV2000-K](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1839), [MGV3000](https://github.com/ophub/amlogic-s9xxx-armbian/issues/921), [Wojia-TV-IPBS9505](https://github.com/ophub/amlogic-s9xxx-armbian/issues/648), [M301A](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/405), [E900v21E](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1278), [e900v21d](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2127), [CM201-1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2188), [IP108H](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2598), [MGV2000-CW](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2616) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905l2.img |\n| s905l3 | [CM211-1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1318), [CM311-1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/763), [HG680-LC](https://github.com/ophub/amlogic-s9xxx-armbian/issues/978), [M401A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/921#issuecomment-1453143251), [UNT400G1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1277), [UNT400G](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2625), [UNT402A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1481), [ZXV10-BV310](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1512), [M411A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1817), [ZXV10-B860AV3.2-M](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2012), [ZXV10-B860AV2.1-U](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2273), [E900V22D-2](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2058), [CM201-1-6-YS](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2539), [IP108H](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2539) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905l3.img |\n| s905l3a | [E900V22C/D](https://github.com/Calmact/e900v22c), [CM311-1a-YST](https://github.com/ophub/amlogic-s9xxx-armbian/issues/517), [M401A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/732), [M411A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/517), [UNT403A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/970), [UNT413A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/970), [ZTE-B863AV3.2-M](https://github.com/ophub/amlogic-s9xxx-armbian/issues/741), [CM311-1a-CH](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1508), [IP112H](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1520), [B863AV3.1-M2](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2292) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905l3a.img |\n| s905l3b | [CM201-1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2209), [CM211-1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1180), [CM311-1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1268), [E900V21D](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2447), [E900V22D](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1256), [E900V21E](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1514), [E900V22E](https://github.com/ophub/amlogic-s9xxx-armbian/issues/939), [M302A/M304A](https://github.com/ophub/amlogic-s9xxx-armbian/pull/615), [Hisense-IP103H](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1154), [TY1608](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1332), [TY1608](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1568), [MGV2000](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1613), [B860AV-2.1M](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1598), [UNT403A](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1712), [RG020ET-CA](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1860) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905l3b.img |\n| s905lb | [Q96-mini](https://github.com/ophub/amlogic-s9xxx-armbian/issues/734), [BesTV-R3300L](https://github.com/ophub/amlogic-s9xxx-armbian/pull/993), [SumaVision-Q7](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1190), [MG101](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1570), [s65](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2128), [IPBS9505](https://github.com/ophub/amlogic-s9xxx-armbian/pull/993#issuecomment-2276804591) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905lb.img |\n| s905 | [Beelink-Mini-MX-2G](https://github.com/ophub/amlogic-s9xxx-armbian/issues/127), [Sunvell-T95M](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/337), [MXQ-Pro+4K](https://github.com/ophub/amlogic-s9xxx-armbian/issues/715), [SumaVision-Q5](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1175) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | amlogic_s905.img |\n| rk3588 | [Radxa-Rock5B](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1240), [Radxa-Rock5C](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2324), [Orange-Pi-5-Plus](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2400), [Beelink-IPC-R](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/415), [HLink-H88K](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1726), [HLink-H88K-V3](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1726), [NanoPC-T6](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2453) | [rk3588](https://github.com/ophub/kernel/releases/tag/kernel_rk3588) | rockchip_boxname.img |\n| rk3568 | [FastRhino-R66S](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1061), [FastRhino-R68S](https://github.com/ophub/amlogic-s9xxx-armbian/issues/774), [Radxa-E25](https://wiki.radxa.com/Rock3/CM/CM3I/E25), [NanoPi-R5S](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1217), [NanoPi-R5C](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1217), [HLink-H66K](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1726), [HLink-H68K](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1726), [HLink-H69K](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1726), [Seewo-sv21](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2017), [Mrkaio-m68s](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2155), [Swan1-w28](https://github.com/ophub/amlogic-s9xxx-armbian/pull/2407), [Ruisen-box](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2508), [DG-TN3568](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2661) | [rk35xx](https://github.com/ophub/kernel/releases/tag/kernel_rk35xx) | [rk35xx](https://github.com/ophub/kernel/releases/tag/kernel_rk35xx)<br />[6.x.y](https://github.com/ophub/kernel/releases/tag/kernel_stable) | rockchip_boxname.img |\n| rk3566 | [Panther-X2](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1319), [JP-TvBox](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1867), [LCKFB-Taishan-Pi](https://github.com/ophub/amlogic-s9xxx-armbian/pull/2538) | [rk35xx](https://github.com/ophub/kernel/releases/tag/kernel_rk35xx)<br />[6.x.y](https://github.com/ophub/kernel/releases/tag/kernel_stable) | rockchip_boxname.img |\n| rk3528 | [HLink-H28K](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1726), [Radxa-E20C](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2324), [H96-Max-M2](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2404) | [rk35xx](https://github.com/ophub/kernel/releases/tag/kernel_rk35xx) | rockchip_boxname.img |\n| rk3399 | [EAIDK-610](https://github.com/ophub/amlogic-s9xxx-armbian/pull/991), [King3399](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1080), [TN3399](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1094), [Kylin3399](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1132), [ZCube1-Max](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1247), [CRRC](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1280), [SMART-AM40](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1317), [SW799](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1326), [ZYSJ](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1380), [DG-3399](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1492), [DLFR100](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1522), [Emb3531](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1549), [Leez-p710](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1609), [tvi3315a](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1687), [xiaobao](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1698), [Fine3399](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1790), [Firefly-RK3399](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/491), [LX-R3S](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2026), [Hugsun-x99](https://github.com/ophub/amlogic-s9xxx-armbian/pull/2050), [Tb-ls3399](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2146), [Hisense-hs530r](https://github.com/ophub/amlogic-s9xxx-openwrt/issues/572), [Tpm312](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2403), [ZK-rk39a](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2446), [YSKJ](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2673), [Fmx1-Pro](https://github.com/ophub/amlogic-s9xxx-armbian/issues/2691) | [6.x.y](https://github.com/ophub/kernel/releases/tag/kernel_stable) | rockchip_boxname.img |\n| rk3328 | [BeikeYun](https://github.com/ophub/amlogic-s9xxx-armbian/issues/852), [Chainedbox-L1-Pro](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1680), [Station-M1](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1313), [Bqeel-MVR9](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1313), [Renegade/Firefly](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1861) | [All](https://github.com/ophub/kernel/releases/tag/kernel_stable) | rockchip_boxname.img |\n| rk3318 | [RX3318-Box](https://github.com/ophub/amlogic-s9xxx-armbian/pull/2129) | [6.x.y](https://github.com/ophub/kernel/releases/tag/kernel_stable) | rockchip_boxname.img |\n| h6 | [Vplus](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1100), [Tanix-TX6](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1120), [TQC-A01](https://github.com/ophub/amlogic-s9xxx-armbian/pull/1638) | [6.x.y](https://github.com/ophub/kernel/releases/tag/kernel_stable)<br>[h6](https://github.com/ophub/kernel/releases/tag/kernel_h6) | allwinner_boxname.img |\n\n> [!TIP]\n> Currently, the [s905 box](https://github.com/ophub/amlogic-s9xxx-armbian/issues/1173) can only be used with a `SD card` or a `USB drive`, other models of boxes support using the `EMMC`. For more information, please refer to the [Supported Device List Description](make-openwrt/openwrt-files/common-files/etc/model_database.conf). You can refer to the method in Section 12.15 of the instruction manual to [add new supported devices](https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/documents/README.md#1215-how-to-add-new-supported-devices). Please read the [OpenWrt User Guide](./documents) before use. It provides solutions to common issues.\n\n## Install and Update OpenWrt\n\nChoose the OpenWrt firmware corresponding to your TV box model, and refer to the corresponding instructions for the use of different devices.\n\n- ### Install OpenWrt\n\n1. For the `Rockchip` platform, please refer to the [Chapter 8](https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/documents/README.md#8-installing-armbian-to-emmc) of the instruction manual, the installation method is the same as that of Armbian.\n\n2. For the `Amlogic` and `Allwinner` platforms, use tools like [Rufus](https://rufus.ie/) or [balenaEtcher](https://www.balena.io/etcher/) to write the firmware to USB, then insert the USB with the written firmware into the box. Browser access to OpenWrt's IP (e.g. 192.168.1.1) → `Log in to OpenWrt with the default account` → `System Menu` → `Amlogic Treasure Box` → `Install OpenWrt`, select your box from the dropdown list of supported devices, click `Install OpenWrt` button to install.\n\n- ### Update OpenWrt system or kernel\n\nBrowser access to OpenWrt's IP (e.g. 192.168.1.1) → `Log in to OpenWrt with your account` → `System Menu` → `Amlogic Treasure Box` → `Manually Upload Update / Online Download Update`\n\nIf you select `Manually Upload Update` [OpenWrt Firmware](https://github.com/ophub/amlogic-s9xxx-openwrt/releases), you can upload the compressed package of the compiled OpenWrt firmware, such as openwrt_xxx_k5.15.50.img.gz (recommended to upload the compressed package, the system will automatically decompress. If you upload the decompressed xxx.img format file, it may fail due to the large file size). After the upload is complete, the interface will display the operation button of `Update Firmware`, click to update.\n\nIf you select `Manually Upload Update` [OpenWrt Kernel](https://github.com/ophub/kernel/releases/tag/kernel_stable), you can upload the three kernel files: `boot-xxx.tar.gz`, `dtb-xxx.tar.gz`, `modules-xxx.tar.gz` (other kernel files are not needed, if uploaded simultaneously, it does not affect the update, the system can accurately identify the needed kernel files). After the upload is complete, the interface will display the operation button of `Update Kernel`, click to update. When a kernel update failure causes the system to be unbootable, you can use the `openwrt-kernel -s` command for kernel recovery. For the method, see [Kernel Recovery](documents/README.md#9-update-openwrt-system-or-kernel).\n\nIf you select `Online Download Update` for OpenWrt firmware or kernel, it will be downloaded according to the `firmware download address` and `kernel download address` in the `Plugin Settings`. You can customize the download source. For specific operation methods, please refer to the compilation and usage instructions of [luci-app-amlogic](https://github.com/ophub/luci-app-amlogic).\n\n- ### Create swap for OpenWrt\n\nIf you feel that the current box's memory is not enough when using memory-intensive applications like `docker`, you can create a `swap` virtual memory partition, and use a certain capacity of the `/mnt/*4` disk space as memory. The unit of the input parameter in the command below is `GB`, the default is `1`.\n\nBrowser access to OpenWrt's IP (e.g. 192.168.1.1) → `Log in to OpenWrt with the default account` → `System Menu` → `TTYD Terminal` → enter the command\n\n```yaml\nopenwrt-swap 1\n```\n\n- ### Backup/Restore Original EMMC System\n\nSupports backing up/restoring the `EMMC` to a `SD card` or a `USB flash drive`. We recommend that you backup the Android TV system that comes with the box before installing the OpenWrt system in a brand-new box for future use in restoring the TV system, etc.\n\nPlease boot OpenWrt system from a `SD card` or a `USB flash drive`, then from the browser, Browser access to OpenWrt's IP (e.g. 192.168.1.1) → `Log in to OpenWrt with the default account` → `System Menu` → `TTYD Terminal` → enter the command\n\n```yaml\nopenwrt-ddbr\n```\n\nFollow the prompts to enter `b` to backup the system, or enter `r` to restore the system.\n\n> [!IMPORTANT]\n> In addition, the Android system can also be flashed into eMMC using the method of flashing via a cable. The download image of the Android system can be found in [Tools](https://github.com/ophub/kernel/releases/tag/tools).\n\n- ### Control LED Display\n\nBrowser access to OpenWrt's IP (e.g. 192.168.1.1) → `Log in to OpenWrt with the default account` → `System Menu` → `TTYD Terminal` → enter the command\n\n```yaml\nopenwrt-openvfd\n```\n\nRefer to [LED Screen Display Control Description](https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/documents/led_screen_display_control.md) for debugging.\n\n- ### Restore to Initial State\n\nBrowser access to OpenWrt's IP (e.g. 192.168.1.1) → `Log in to OpenWrt with the default account` → `System Menu` → `Amlogic Service` → `Backup Firmware Config` → `Snapshot Management` → `Select Initialize Snapshot`, and click on `Restore Snap` to revert to the initial state.\n\nAlternatively, you can navigate to `System menu` → `TTYD Terminal` → Enter the command `firstboot` to restore the system to its initial state. Both methods yield the same result.\n\n- ### More Usage Instructions\n\nSome common problems that might be encountered during the use of OpenWrt can be found in the [User Guide](./documents)\n\n## Local Packaging\n\n1. Install necessary packages (for Ubuntu 22.04 LTS users)\n```yaml\nsudo apt-get update -y\nsudo apt-get full-upgrade -y\n# For Ubuntu-22.04\nsudo apt-get install -y $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)\n```\n2. Clone repository to local `git clone --depth 1 https://github.com/ophub/amlogic-s9xxx-openwrt.git`\n3. In the root directory of `~/amlogic-s9xxx-openwrt`, create `openwrt-armvirt` folder, and upload the `openwrt-armvirt-64-default-rootfs.tar.gz` file to this directory.\n4. Enter the packaging command in the root directory of `~/amlogic-s9xxx-openwrt`, such as `sudo ./remake -b s905x3 -k 6.1.10`. The packaged OpenWrt firmware is placed in the `out` folder in the root directory.\n\n- ### Explanation of Local Packaging Parameters\n\n| Parameter | Meaning       | Description |\n| --------- | ------------- | ----------- |\n| -b        | Board         | Specify the model of the TV box, such as `-b s905x3`. Connect multiple models with `_`, such as `-b s905x3_s905d`. Use `all` to represent all models. See the `BOARD` setting in [model_database.conf](make-openwrt/openwrt-files/common-files/etc/model_database.conf) for model codes. Default: `all` |\n| -r        | KernelRepo    | Specify the `<owner>/<repo>` of the github.com kernel repository. Default: `ophub/kernel` |\n| -u        | kernelUsage   | Set the `tag suffix` of the kernel to be used, such as [stable](https://github.com/ophub/kernel/releases/tag/kernel_stable), [flippy](https://github.com/ophub/kernel/releases/tag/kernel_flippy), [dev](https://github.com/ophub/kernel/releases/tag/kernel_dev), [beta](https://github.com/ophub/kernel/releases/tag/kernel_beta). Default: `stable` |\n| -k        | Kernel        | Specify the [kernel](https://github.com/ophub/kernel/releases/tag/kernel_stable) name, such as `-k 5.10.125`. Connect multiple kernels with `_`, such as `-k 5.10.125_5.15.50`. The kernel version freely specified by the `-k` parameter is only valid for kernels using `stable/flippy/dev/beta`. Other kernel series such as [rk3588](https://github.com/ophub/kernel/releases/tag/kernel_rk3588) / [rk35xx](https://github.com/ophub/kernel/releases/tag/kernel_rk35xx) / [h6](https://github.com/ophub/kernel/releases/tag/kernel_h6) can only use specific kernels. |\n| -a        | AutoKernel    | Set whether to automatically adopt the latest version of the same series of kernels. When set to `true`, it will automatically search the kernel library for updates of the same series as the kernel specified in `-k`, such as 5.10.125, and will automatically switch to the latest version if there is a version later than 5.10.125. When set to `false`, it will compile the specified version of the kernel. Default: `true` |\n| -s        | Size          | Set the size of the system's image partitions. When setting only the ROOTFS partition size, you can specify a single value, for example: `-s 1024`. When setting both BOOTFS and ROOTFS partition sizes, use / to connect the two values, for example: `-s 256/1024`. The default value is `256/1024` |\n| -n        | BuilderName   | Set the signature of the OpenWrt system builder. Do not include spaces when setting signatures. Default: `none` |\n\n- `sudo ./remake` : Use default configuration, use the latest kernel package in the kernel library, and package all models of TV boxes.\n- `sudo ./remake -b s905x3 -k 6.1.10` : Recommended. Use default configuration for related kernel packaging.\n- `sudo ./remake -b s905x3 -k 6.1.y` : Package the relevant kernels using the default configuration; the kernel utilizes the latest version of the 6.1.y series.\n- `sudo ./remake -b s905x3_s905d -k 6.1.10_5.15.50` : Use the default configuration and package multiple kernels at the same time. Use `_` to connect multiple kernel parameters.\n- `sudo ./remake -b s905x3 -k 6.1.10 -s 1024` : Use the default configuration, specify a kernel, a model for packaging, and set the firmware size to 1024 MiB.\n- `sudo ./remake -b s905x3_s905d` : Use default configuration, package all kernels for multiple models of TV boxes, use `_` to connect multiple models.\n- `sudo ./remake -k 6.1.10_5.15.50` : Use the default configuration, specify multiple kernels, package all models of TV boxes, and connect kernel packages with `_`.\n- `sudo ./remake -k 6.1.10_5.15.50 -a true` : Use the default configuration, specify multiple kernels, package all models of TV boxes, and connect kernel packages with `_`. Automatically upgrade to the latest kernel of the same series.\n- `sudo ./remake -s 1024 -k 6.1.10` : Use the default configuration, set the firmware size to 1024 MiB, and specify the kernel as 6.1.10 to package all models of TV boxes.\n\n## Use GitHub Actions for Compilation\n\nYou can modify the related personalized firmware configuration files in the [config](config) directory, as well as the [.yml](.github/workflows) file, customize and compile your OpenWrt firmware, and the firmware can be uploaded to `Actions` and `Releases` on github.com.\n\n1. You can view the personalized firmware configuration instructions in the [user documentation](./documents). The compilation process control file is [.yml](https://github.com/ophub/amlogic-s9xxx-openwrt/blob/main/.github/workflows/build-openwrt.yml)\n2. New compilation: In github.com's [Action](https://github.com/ophub/amlogic-s9xxx-openwrt/actions) select ***`Build OpenWrt`***. Click the ***`Run workflow`*** button for one-stop firmware compilation and packaging.\n3. Re-compilation: If there is already a compiled `openwrt-armvirt-64-default-rootfs.tar.gz` file in [Releases](https://github.com/ophub/amlogic-s9xxx-openwrt/releases), and you just want to remake other different boards, you can skip the compilation of OpenWrt source files and go directly to the second production. Select ***`Use Releases file to Packaging`*** on the [Actions](https://github.com/ophub/amlogic-s9xxx-openwrt/actions) page, and click the ***`Run workflow`*** button to recompile.\n4. More Support: The compiled `openwrt-armvirt-64-default-rootfs.tar.gz` file is a universal file for making firmware for different boards. It is also applicable for creating OpenWrt firmware using [unifreq](https://github.com/unifreq/openwrt_packit)'s packaging scripts. As the pioneer of using OpenWrt and Armbian systems in TV boxes, he provides support for more devices, such as OpenWrt (QEMU version) used in the Armbian system through a `KVM` virtual machine, and Amlogic, Rockchip, and Allwinner series, etc. For packaging methods, please refer to the instructions in his repository. In Actions, through [packaging-openwrt-for-qemu-etc.yml](.github/workflows/packaging-openwrt-for-qemu-etc.yml), you can call his packaging scripts to create more firmware.\n\n```yaml\n- name: Package Armvirt as OpenWrt\n  uses: ophub/amlogic-s9xxx-openwrt@main\n  with:\n    openwrt_path: openwrt/bin/targets/*/*/*rootfs.tar.gz\n    openwrt_board: s905x3_s905x2_s905x_s905w_s905d_s922x_s912\n    openwrt_kernel: 6.1.y_5.15.y\n```\n\n- ### GitHub Actions Input Parameters Explanation\n\nThese parameters correspond to the `local packaging command`, please refer to the explanations above.\n\n| Parameter | Default Value | Description |\n| --------- | ------------- | ----------- |\n| openwrt_path | None | Set the file path of `openwrt-armvirt-64-default-rootfs.tar.gz`, you can use relative path like `openwrt/bin/targets/*/*/*rootfs.tar.gz` or a network file download URL like `https://github.com/*/releases/*/*rootfs.tar.gz` |\n| openwrt_board | all | Set the `board` of the box to be packaged, functionality refers to `-b` |\n| kernel_repo | ophub/kernel | Specify `<owner>/<repo>` of the kernel repository on github.com, functionality refers to `-r` |\n| kernel_usage | stable | Set the `tags suffix` of the kernel to be used, functionality refers to `-u` |\n| openwrt_kernel | 6.1.y_5.15.y | Set the kernel version, functionality refers to `-k` |\n| auto_kernel | true | Set whether to automatically adopt the latest version of the same series of kernels, functionality refers to `-a` |\n| openwrt_size | 256/1024 | Set the size of the system BOOTFS and ROOTFS partitions, function reference `-s` |\n| builder_name | None | Set the signature of the OpenWrt system builder, functionality refers to `-n` |\n\n- ### GitHub Actions Output Variables Explanation\n\nTo upload to `Releases`, you need to set `Workflow read/write permissions` for repository. For details, see [usage instructions](./documents/README.md#2-set-the-privacy-variable-github_token).\n\n| Parameter                      | Default Value     | Description                            |\n| ------------------------------ | ----------------- | -------------------------------------- |\n| ${{ env.PACKAGED_OUTPUTPATH }} | out               | OpenWrt system files output path       |\n| ${{ env.PACKAGED_OUTPUTDATE }} | 04.13.1058        | Packaging date (month.day.hourminute)  |\n| ${{ env.PACKAGED_STATUS }}     | success / failure | Packaging status. success / failure    |\n\n## Compilation Options of openwrt-*-rootfs.tar.gz for Packaging\n\n| Option | Value |\n| ------ | ----- |\n| Target System | Arm SystemReady (EFI) compliant |\n| Subtarget | 64-bit (armv8) machines |\n| Target Profile | Generic EFI Boot |\n| Target Images | tar.gz |\n\nFor more information, please refer to the [User Documentation](./documents)\n\n## Default Information for OpenWrt Firmware\n\n| Name | Value |\n| ---- | ---- |\n| Default IP | 192.168.1.1 |\n| Default Account | root |\n| Default Password | password |\n| Default WIFI Name | OpenWrt |\n| Default WIFI Password | None |\n\n## Compile the Kernel\n\nFor instructions on how to compile the kernel, see [compile-kernel](https://github.com/ophub/amlogic-s9xxx-armbian/tree/main/compile-kernel).\n\n```yaml\n- name: Compile the kernel\n  uses: ophub/amlogic-s9xxx-armbian@main\n  with:\n    build_target: kernel\n    kernel_version: 6.1.y_5.15.y\n    kernel_auto: true\n    kernel_sign: -yourname\n```\n\n## Resource Description\n\nWhen making the OpenWrt system, the files used, such as [kernel](https://github.com/ophub/kernel) and [u-boot](https://github.com/ophub/u-boot), are the same files used to create the [Armbian](https://github.com/ophub/amlogic-s9xxx-armbian) system. In order to avoid repeated maintenance, related content has been classified and placed in the corresponding resource repositories, and will be automatically downloaded from the relevant repositories during use.\n\nThe [u-boot](https://github.com/ophub/u-boot), [kernel](https://github.com/ophub/kernel) and other resources used by this system mainly come from the [unifreq/openwrt_packit](https://github.com/unifreq/openwrt_packit) project. Some files are shared by users in the [Pull](https://github.com/ophub/amlogic-s9xxx-openwrt/pulls) and [Issues](https://github.com/ophub/amlogic-s9xxx-openwrt/issues) of the [amlogic-s9xxx-openwrt](https://github.com/ophub/amlogic-s9xxx-openwrt) / [amlogic-s9xxx-armbian](https://github.com/ophub/amlogic-s9xxx-armbian) / [luci-app-amlogic](https://github.com/ophub/luci-app-amlogic) / [kernel](https://github.com/ophub/kernel) / [u-boot](https://github.com/ophub/u-boot) and other projects. `unifreq` has opened the door for us to use OpenWrt in TV boxes. Deeply influenced by him, my firmware production and usage follow his consistent standards. To thank these pioneers and sharers, I have recorded them in [CONTRIBUTORS.md](https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/CONTRIBUTORS.md). Once again, I want to thank everyone for giving new life and meaning to the boxes.\n\n## Other Distributions\n\n- [unifreq](https://github.com/unifreq/openwrt_packit) has made `OpenWrt` systems for more boxes such as Amlogic, Rockchip, and Allwinner. It is a benchmark in the box circle, recommended for use.\n- The [amlogic-s9xxx-armbian](https://github.com/ophub/amlogic-s9xxx-armbian) project provides the `Armbian` system used in the box, which is also applicable in devices that support OpenWrt.\n\n## Links\n\n- [unifreq](https://github.com/unifreq/openwrt_packit)\n- [OpenWrt](https://github.com/openwrt/openwrt)\n- [coolsnowwolf](https://github.com/coolsnowwolf/lede)\n- [immortalwrt](https://github.com/immortalwrt/immortalwrt)\n\n## License\n\nThe amlogic-s9xxx-openwrt © OPHUB is licensed under the [GPL-2.0](https://github.com/ophub/amlogic-s9xxx-openwrt/blob/main/LICENSE) license\n\n"
        },
        {
          "name": "action.yml",
          "type": "blob",
          "size": 4.2294921875,
          "content": "name: \"Make OpenWrt\"\nauthor: \"https://github.com/ophub/amlogic-s9xxx-openwrt\"\ndescription: \"Support Amlogic, Rockchip and Allwinner boxes.\"\ninputs:\n  mode:\n    description: \"Select script.\"\n    required: false\n    default: \"ophub\"\n  openwrt_path:\n    description: \"Select armvirt64 file path.\"\n    required: false\n    default: \"openwrt/bin/targets/*/*/*rootfs.tar.gz\"\n  openwrt_board:\n    description: \"Select device board.\"\n    required: false\n    default: \"all\"\n  kernel_repo:\n    description: \"Select kernel repository.\"\n    required: false\n    default: \"ophub/kernel\"\n  kernel_usage:\n    description: \"Set the tags of the stable kernel.\"\n    required: false\n    default: \"stable\"\n  openwrt_kernel:\n    description: \"Select kernel version.\"\n    required: false\n    default: \"6.1.y_5.15.y\"\n  auto_kernel:\n    description: \"Auto use the latest kernel.\"\n    required: false\n    default: \"true\"\n  openwrt_size:\n    description: \"Set the rootfs size(Unit: MiB).\"\n    required: false\n    default: \"\"\n  builder_name:\n    description: \"Set OpenWrt builder signature.\"\n    required: false\n    default: \"\"\n\nruns:\n  using: \"composite\"\n  steps:\n    - shell: bash\n      run: |\n        cd ${GITHUB_ACTION_PATH}\n        echo -e \"ophub package actions path: [ ${PWD} ]\"\n\n        openwrt_filename=\"${{ inputs.openwrt_path }}\"\n        openwrt_savefile=\"${openwrt_filename##*/}\"\n        openwrt_savepath=\"openwrt-armvirt\"\n        openwrt_outpath=\"openwrt/out\"\n        echo -e \"Get openwrt file input parameters: [ ${openwrt_filename} ]\"\n        [[ -z \"${openwrt_filename}\" ]] && echo -e \"The [ openwrt_path ] variable must be specified.\" && exit 1\n        [[ -d \"${openwrt_savepath}\" ]] || mkdir -p ${openwrt_savepath}\n        [[ -d \"${openwrt_outpath}\" ]] || mkdir -p ${openwrt_outpath}\n\n        if [[ \"${openwrt_filename}\" == http* ]]; then\n            echo -e \"Download file: [ ${openwrt_filename} ]\"\n            curl -fsSL \"${openwrt_filename}\" -o \"${openwrt_savepath}/${openwrt_savefile}\"\n        else\n            if [[ -z \"$(ls ${openwrt_savepath}/${openwrt_savefile} 2>/dev/null)\" ]]; then\n                echo -e \"Copy OpenWrt rootfs file: [ ${openwrt_filename} ]\"\n                cp -vf ${GITHUB_WORKSPACE}/${openwrt_filename} ${openwrt_savepath} 2>/dev/null\n            else\n                echo -e \"The [ ${openwrt_savepath}/${openwrt_savefile} ] file already exists, skipping.\"\n            fi\n        fi\n        sync\n        echo -e \"About the [ ${openwrt_savepath} ] directory: \\n$(ls -l ${openwrt_savepath} 2>/dev/null)\"\n\n        cd ${GITHUB_ACTION_PATH}\n        echo -e \"Start to make openwrt...\"\n        make_command=\"\"\n        [[ -n \"${{ inputs.openwrt_board }}\" ]] && make_command=\"${make_command} -b ${{ inputs.openwrt_board }}\"\n        [[ -n \"${{ inputs.kernel_repo }}\" ]] && make_command=\"${make_command} -r ${{ inputs.kernel_repo }}\"\n        [[ -n \"${{ inputs.kernel_usage }}\" ]] && make_command=\"${make_command} -u ${{ inputs.kernel_usage }}\"\n        [[ -n \"${{ inputs.openwrt_kernel }}\" ]] && make_command=\"${make_command} -k ${{ inputs.openwrt_kernel }}\"\n        [[ -n \"${{ inputs.auto_kernel }}\" ]] && make_command=\"${make_command} -a ${{ inputs.auto_kernel }}\"\n        [[ -n \"${{ inputs.openwrt_size }}\" ]] && make_command=\"${make_command} -s ${{ inputs.openwrt_size }}\"\n        [[ -n \"${{ inputs.builder_name }}\" ]] && make_command=\"${make_command} -n ${{ inputs.builder_name }}\"\n        sudo ./remake ${make_command}\n\n        cd ${GITHUB_ACTION_PATH}/${openwrt_outpath}\n        # Generate a sha256sum verification file for each OpenWrt image file\n        for file in *; do [[ -f \"${file}\" ]] && sha256sum \"${file}\" >\"${file}.sha\" 2>/dev/null; done\n        rm -f *.sha.sha 2>/dev/null\n        sync && sleep 3\n\n        cd ${GITHUB_ACTION_PATH}\n        echo -e \"Output environment variables.\"\n        echo \"PACKAGED_OUTPUTPATH=${PWD}/${openwrt_outpath}\" >> ${GITHUB_ENV}\n        echo \"PACKAGED_OUTPUTDATE=$(date +\"%m.%d.%H%M\")\" >> ${GITHUB_ENV}\n        echo \"PACKAGED_STATUS=success\" >> ${GITHUB_ENV}\n        echo -e \"PACKAGED_OUTPUTPATH: ${PWD}/${openwrt_outpath}\"\n        echo -e \"PACKAGED_OUTPUTDATE: $(date +\"%m.%d.%H%M\")\"\n        echo -e \"PACKAGED_STATUS: success\"\n        echo -e \"PACKAGED_OUTPUTPATH files list: \\n$(ls -l ${PWD}/${openwrt_outpath}/ 2>/dev/null)\"\n\nbranding:\n  icon: \"terminal\"\n  color: \"gray-dark\"\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "documents",
          "type": "tree",
          "content": null
        },
        {
          "name": "make-openwrt",
          "type": "tree",
          "content": null
        },
        {
          "name": "remake",
          "type": "blob",
          "size": 51.1455078125,
          "content": "#!/bin/bash\n#================================================================================================\n#\n# This file is licensed under the terms of the GNU General Public\n# License version 2. This program is licensed \"as is\" without any\n# warranty of any kind, whether express or implied.\n#\n# This file is a part of the Remake OpenWrt\n# https://github.com/ophub/amlogic-s9xxx-openwrt\n#\n# Description: Automatically Packaged OpenWrt\n# Copyright (C) 2020~ https://github.com/openwrt/openwrt\n# Copyright (C) 2020~ https://github.com/coolsnowwolf/lede\n# Copyright (C) 2020~ https://github.com/immortalwrt/immortalwrt\n# Copyright (C) 2020~ https://github.com/unifreq/openwrt_packit\n# Copyright (C) 2021~ https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/CONTRIBUTORS.md\n# Copyright (C) 2020~ https://github.com/ophub/amlogic-s9xxx-openwrt\n#\n# Command: sudo ./remake\n# Command optional parameters please refer to the source code repository\n#\n#======================================== Functions list ========================================\n#\n# error_msg          : Output error message\n# process_msg        : Output process message\n# mount_try          : Mount the image file, fail again\n# get_textoffset     : Get kernel TEXT_OFFSET\n#\n# init_var           : Initialize all variables\n# check_data         : Check the validity of the data\n# find_openwrt       : Find OpenWrt file (openwrt-armvirt/*rootfs.tar.gz)\n# git_pull_dir       : Download the files from the git repository\n# download_depends   : Download the dependency files\n# query_kernel       : Query the latest kernel version\n# check_kernel       : Check kernel files integrity\n# download_kernel    : Download the latest kernel\n#\n# confirm_version    : Confirm version type\n# make_image         : Making OpenWrt file\n# extract_openwrt    : Extract OpenWrt files\n# replace_kernel     : Replace the kernel\n# refactor_bootfs    : Refactor bootfs files\n# refactor_rootfs    : Refactor rootfs files\n# clean_tmp          : Clear temporary files\n#\n# loop_make          : Loop to make OpenWrt files\n#\n#================================ Set make environment variables ================================\n#\n# Related file storage path\ncurrent_path=\"${PWD}\"\nmake_path=\"${current_path}/openwrt\"\ntmp_path=\"${make_path}/tmp\"\nout_path=\"${make_path}/out\"\nopenwrt_path=\"${current_path}/openwrt-armvirt\"\nopenwrt_rootfs_file=\"*rootfs.tar.gz\"\nresource_path=\"${current_path}/make-openwrt\"\nkernel_path=\"${resource_path}/kernel\"\nuboot_path=\"${resource_path}/u-boot\"\ncommon_files=\"${resource_path}/openwrt-files/common-files\"\nplatform_files=\"${resource_path}/openwrt-files/platform-files\"\ndifferent_files=\"${resource_path}/openwrt-files/different-files\"\nfirmware_path=\"${common_files}/lib/firmware\"\nmodel_conf=\"${common_files}/etc/model_database.conf\"\nmodel_txt=\"${common_files}/etc/model_database.txt\"\n[[ -d \"${make_path}\" ]] || mkdir -p ${make_path}\n\n# System operation environment\narch_info=\"$(uname -m)\"\nhost_release=\"$(cat /etc/os-release | grep '^VERSION_CODENAME=.*' | cut -d'=' -f2)\"\n# Add custom OpenWrt firmware information\nop_release=\"etc/flippy-openwrt-release\"\nophub_release_file=\"etc/ophub-release\"\n\n# Dependency files download repository\ndepends_repo=\"https://github.com/ophub/amlogic-s9xxx-armbian\"\n# U-BOOT files download repository\nuboot_repo=\"https://github.com/ophub/u-boot\"\n# Firmware files download repository\nfirmware_repo=\"https://github.com/ophub/firmware\"\n# Install/Update script files download repository\nscript_repo=\"https://github.com/ophub/luci-app-amlogic\"\n\n# Set the kernel download repository from github.com\nkernel_repo=\"https://github.com/ophub/kernel\"\n# Set the tags(kernel_xxx) of the default kernel that can be replaced via the [ -u ] parameter\ndefault_tags=\"stable\"\nkernel_usage=\"\"\n# Set the list of kernels used by default(Selectable version)\nstable_kernel=(\"6.6.y\" \"6.1.y\")\nflippy_kernel=(${stable_kernel[@]})\ndev_kernel=(${stable_kernel[@]})\nbeta_kernel=(${stable_kernel[@]})\nrk3588_kernel=(\"5.10.y\")\nrk35xx_kernel=(\"5.10.y\")\nh6_kernel=(\"6.6.y\")\nspecific_6xy=(\"6.6.y\" \"6.1.y\")\nspecific_5xy=(\"5.15.y\" \"5.10.y\" \"5.4.y\")\n# Set to automatically use the latest kernel\nauto_kernel=\"true\"\n# Initialize the kernel array\ndeclare -A tags_list\n\n# Set the Amlogic's u-boot series(u-boot-xxx.bin)\nuboot_meson_gxl=(\"p201.bin\" \"p212.bin\" \"s905x-s912.bin\" \"n1.bin\" \"r3300l.bin\")\nuboot_meson_gxm=(\"p212.bin\" \"s905x-s912.bin\" \"zyxq.bin\")\nuboot_meson_g12a=(\"x96max.bin\" \"e900v22c.bin\")\nuboot_meson_g12b=(\"gtking.bin\" \"gtkingpro.bin\" \"gtkingpro-rev-a.bin\" \"s905x2-s922.bin\")\nuboot_meson_sm1=(\"x96maxplus.bin\" \"ugoos-x3.bin\" \"tx3-qz.bin\" \"tx3-bz.bin\" \"skyworth-lb2004.bin\")\nuboot_meson_gxbb=(\"p201.bin\" \"s905.bin\")\n\n# Initialize the build device\nmake_board=\"all\"\n\n# Set OpenWrt firmware size (Unit: MiB, boot_mb >= 256, root_mb >= 512)\nboot_mb=\"256\"\nroot_mb=\"1024\"\n# Set OpenWrt builder signature\nbuilder_name=\"\"\n\n# Set font color\nSTEPS=\"[\\033[95m STEPS \\033[0m]\"\nINFO=\"[\\033[94m INFO \\033[0m]\"\nNOTE=\"[\\033[93m NOTE \\033[0m]\"\nWARNING=\"[\\033[93m WARNING \\033[0m]\"\nSUCCESS=\"[\\033[92m SUCCESS \\033[0m]\"\nERROR=\"[\\033[91m ERROR \\033[0m]\"\n#\n#================================================================================================\n\nerror_msg() {\n    echo -e \" [💔] ${1}\"\n    exit 1\n}\n\nprocess_msg() {\n    echo -e \" [🌿] ${1}\"\n}\n\nmount_try() {\n    # Check mount parameters\n    m_type=\"${1}\"\n    m_dev=\"${2}\"\n    m_target=\"${3}\"\n    [[ -n \"${m_type}\" && -n \"${m_dev}\" && -n \"${m_target}\" ]] || {\n        error_msg \"Mount parameter is missing: [ ${m_type}, ${m_dev}, ${m_target} ]\"\n    }\n\n    t=\"1\"\n    max_try=\"10\"\n    while [[ \"${t}\" -le \"${max_try}\" ]]; do\n        # Mount according to the image partition format\n        if [[ \"${m_type}\" == \"btrfs\" ]]; then\n            mount -t ${m_type} -o discard,compress=zstd:6 ${m_dev} ${m_target}\n        else\n            mount -t ${m_type} -o discard ${m_dev} ${m_target}\n        fi\n\n        # Mount failed and continue trying\n        if [[ \"${?}\" -eq 0 ]]; then\n            break\n        else\n            sync && sleep 3\n            umount -f ${m_target} 2>/dev/null\n            t=\"$((t + 1))\"\n        fi\n    done\n    [[ \"${t}\" -gt \"${max_try}\" ]] && error_msg \"[ ${t} ] attempts to mount failed.\"\n}\n\nget_textoffset() {\n    vmlinuz_name=\"${1}\"\n    need_overload=\"yes\"\n    # With TEXT_OFFSET patch is [ 0108 ], without TEXT_OFFSET patch is [ 0000 ]\n    [[ \"$(hexdump -n 15 -x \"${vmlinuz_name}\" 2>/dev/null | head -n 1 | awk '{print $7}')\" == \"0108\" ]] && need_overload=\"no\"\n}\n\ninit_var() {\n    echo -e \"${STEPS} Start Initializing Variables...\"\n\n    # If it is followed by [ : ], it means that the option requires a parameter value\n    get_all_ver=\"$(getopt \"b:r:u:k:a:s:n:\" \"${@}\")\"\n\n    while [[ -n \"${1}\" ]]; do\n        case \"${1}\" in\n        -b | --Board)\n            if [[ -n \"${2}\" ]]; then\n                make_board=\"${2// /}\"\n                shift\n            else\n                error_msg \"Invalid -b parameter [ ${2} ]!\"\n            fi\n            ;;\n        -r | --kernelRepository)\n            if [[ -n \"${2}\" ]]; then\n                kernel_repo=\"${2}\"\n                shift\n            else\n                error_msg \"Invalid -r parameter [ ${2} ]!\"\n            fi\n            ;;\n        -u | --kernelUsage)\n            if [[ -n \"${2}\" ]]; then\n                kernel_usage=\"${2//kernel_/}\"\n                shift\n            else\n                error_msg \"Invalid -u parameter [ ${2} ]!\"\n            fi\n            ;;\n        -k | --Kernel)\n            if [[ -n \"${2}\" ]]; then\n                oldIFS=\"${IFS}\"\n                IFS=\"_\"\n                flippy_kernel=(${2})\n                stable_kernel=(${2})\n                dev_kernel=(${2})\n                beta_kernel=(${2})\n                IFS=\"${oldIFS}\"\n                shift\n            else\n                error_msg \"Invalid -k parameter [ ${2} ]!\"\n            fi\n            ;;\n        -a | --Autokernel)\n            if [[ -n \"${2}\" ]]; then\n                auto_kernel=\"${2}\"\n                shift\n            else\n                error_msg \"Invalid -a parameter [ ${2} ]!\"\n            fi\n            ;;\n        -s | --Size)\n            if [[ -n \"${2}\" ]]; then\n                img_mb=\"${2}\"\n                shift\n            else\n                error_msg \"Invalid -s parameter [ ${2} ]!\"\n            fi\n            ;;\n        -n | --BuilderName)\n            if [[ -n \"${2}\" ]]; then\n                builder_name=\"${2// /}\"\n                shift\n            else\n                error_msg \"Invalid -n parameter [ ${2} ]!\"\n            fi\n            ;;\n        *)\n            error_msg \"Invalid option [ ${1} ]!\"\n            ;;\n        esac\n        shift\n    done\n\n    # Set the image size, such as [ -s 512/2560 ] or [ -s 2560 ]\n    [[ -n \"${img_mb}\" ]] && {\n        if [[ \"${img_mb}\" =~ / ]]; then\n            boot_mb=\"${img_mb%%/*}\"\n            root_mb=\"${img_mb##*/}\"\n        else\n            root_mb=\"${img_mb}\"\n        fi\n    }\n}\n\ncheck_data() {\n    # Columns of ${model_conf}:\n    # 1.ID  2.MODEL  3.SOC  4.FDTFILE  5.UBOOT_OVERLOAD  6.MAINLINE_UBOOT  7.BOOTLOADER_IMG  8.DESCRIPTION\n    # 9.KERNEL_TAGS  10.PLATFORM  11.FAMILY  12.BOOT_CONF  13.CONTRIBUTORS  14.BOARD  15.BUILD\n    [[ -f \"${model_conf}\" ]] || error_msg \"Missing model config file: [ ${model_conf} ]\"\n\n    # Convert ${model_conf} to ${model_txt} for [ openwrt-install-amlogic ], Just the first 8 columns.\n    cat ${model_conf} |\n        sed -e 's/NULL/NA/g' -e 's/[ ][ ]*//g' |\n        grep -E \"^[^#ar].*\" |\n        awk -F':' '{if ($6 != \"NA\") $6 = \"/lib/u-boot/\"$6; if ($7 != \"NA\") $7 = \"/lib/u-boot/\"$7; NF = 12; print}' OFS=':' \\\n            >${model_txt}\n\n    # Get a list of build devices\n    if [[ \"${make_board}\" == \"all\" ]]; then\n        board_list=\":(yes)\"\n        make_openwrt=($(\n            cat ${model_conf} |\n                sed -e 's/NA//g' -e 's/NULL//g' -e 's/[ ][ ]*//g' |\n                grep -E \"^[^#].*:yes$\" | awk -F':' '{print $14}' |\n                sort -u | xargs\n        ))\n    else\n        board_list=\":($(echo ${make_board} | sed -e 's/_/\\|/g')):(yes|no)\"\n        make_openwrt=($(echo ${make_board} | sed -e 's/_/ /g'))\n    fi\n    [[ \"${#make_openwrt[@]}\" -eq 0 ]] && error_msg \"The board is missing, stop making.\"\n\n    # Get the kernel array\n    kernel_from=($(\n        cat ${model_conf} |\n            sed -e 's/NA//g' -e 's/NULL//g' -e 's/[ ][ ]*//g' |\n            grep -E \"^[^#].*${board_list}$\" | awk -F':' '{print $9}' |\n            sort -u | xargs\n    ))\n    [[ \"${#kernel_from[@]}\" -eq 0 ]] && error_msg \"Missing [ KERNEL_TAGS ] settings, stop building.\"\n    # Replace custom kernel tags\n    [[ -n \"${kernel_usage}\" ]] && {\n        for ((i = 0; i < ${#kernel_from[@]}; i++)); do\n            if [[ ${kernel_from[${i}]} == \"${default_tags}/\"* ]]; then\n                kernel_from[${i}]=\"${kernel_from[${i}]//${default_tags}/${kernel_usage}}\"\n            fi\n        done\n    }\n\n    # Convert the kernel_from to the kernel array\n    for item in \"${kernel_from[@]}\"; do\n        # Split the key and value\n        IFS='/' read -r key value <<<\"${item}\"\n\n        # Check if the value is \"all\".\n        if [[ \"${value}\" == \"all\" ]]; then\n            # If the value is \"all\", assign the value of ${key}_kernel. such as [ stable_kernel, rk3588_kernel, etc. ]\n            eval \"value=\\\"\\${${key}_kernel[@]}\\\"\"\n        elif [[ \"${value}\" =~ ^[1-9]+ ]]; then\n            if [[ \"${value}\" == \"5.x.y\" ]]; then\n                value=\"${specific_5xy[@]}\"\n            elif [[ \"${value}\" == \"6.x.y\" ]]; then\n                value=\"${specific_6xy[@]}\"\n            else\n                IFS='_' read -ra value <<<\"${value}\"\n                value=\"${value[@]}\"\n            fi\n        fi\n\n        # Merge the same key values\n        if [[ -n \"${tags_list[${key}]}\" ]]; then\n            tags_list[${key}]+=\" ${value}\"\n        else\n            tags_list[${key}]=\"${value}\"\n        fi\n    done\n\n    # Convert the tags_list array to the kernel array (remove duplicates)\n    for key in \"${!tags_list[@]}\"; do\n        # Convert the space-separated string to an array and remove duplicates\n        read -ra unique_values <<<\"$(echo \"${tags_list[${key}]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\"\n        # Assign the unique values back to the tags_list\n        tags_list[${key}]=\"${unique_values[@]}\"\n    done\n\n    # Check the kernel tags list\n    [[ \"${#tags_list[@]}\" -eq 0 ]] && error_msg \"The [ tags_list ] is missing, stop building.\"\n    echo -e \"${INFO} The kernel tags list: [ ${!tags_list[@]} ]\"\n\n    # Convert kernel repository address to api format\n    [[ \"${kernel_repo}\" =~ ^https: ]] && kernel_repo=\"$(echo ${kernel_repo} | awk -F'/' '{print $4\"/\"$5}')\"\n    kernel_api=\"https://github.com/${kernel_repo}\"\n}\n\nfind_openwrt() {\n    cd ${current_path}\n    echo -e \"${STEPS} Start searching for OpenWrt file...\"\n\n    # Find whether the OpenWrt file exists\n    openwrt_default_file=\"$(ls ${openwrt_path}/${openwrt_rootfs_file} 2>/dev/null | head -n 1 | awk -F \"/\" '{print $NF}')\"\n    if [[ -n \"${openwrt_default_file}\" ]]; then\n        echo -e \"${INFO} OpenWrt file: [ ${openwrt_default_file} ]\"\n    else\n        error_msg \"There is no [ ${openwrt_rootfs_file} ] file in the [ ${openwrt_path} ] directory.\"\n    fi\n\n    # Extract the OpenWrt release information file\n    source_codename=\"\"\n    source_release_file=\"etc/openwrt_release\"\n    temp_dir=\"$(mktemp -d)\"\n    (cd ${temp_dir} && tar -mxzf \"${openwrt_path}/${openwrt_default_file}\" \"./${source_release_file}\" 2>/dev/null)\n    # Find custom DISTRIB_SOURCECODE, such as [ official/lede ]\n    [[ -f \"${temp_dir}/${source_release_file}\" ]] && {\n        source_codename=\"$(cat ${temp_dir}/${source_release_file} 2>/dev/null | grep -oE \"^DISTRIB_SOURCECODE=.*\" | head -n 1 | cut -d\"'\" -f2)\"\n        [[ -n \"${source_codename}\" ]] && {\n            # Record OpenWrt source codes repository\n            case \"${source_codename}\" in\n            official) OPENWRT_SOURCECODE=\"github.com/openwrt/openwrt\" ;;\n            lede) OPENWRT_SOURCECODE=\"github.com/coolsnowwolf/lede\" ;;\n            immortalwrt) OPENWRT_SOURCECODE=\"github.com/immortalwrt/immortalwrt\" ;;\n            *) OPENWRT_SOURCECODE=\"unknown\" ;;\n            esac\n\n            # Complete filename\n            [[ \"${source_codename:0:1}\" != \"_\" ]] && source_codename=\"_${source_codename}\"\n        }\n        echo -e \"${INFO} The source_codename: [ ${source_codename} ], OpenWrt source code repository: [ ${OPENWRT_SOURCECODE} ]\"\n    }\n    # Remove temporary directory\n    rm -rf ${temp_dir}\n}\n\ngit_pull_dir() {\n    cd ${current_path}\n\n    # Check git_pull_dir parameters\n    git_repo=\"${1}\"\n    git_branch=\"${2}\"\n    git_path=\"${3}\"\n    [[ -n \"${git_repo}\" && -n \"${git_branch}\" && -n \"${git_path}\" ]] || {\n        error_msg \"git_pull_dir parameter is missing: [ ${git_repo}, ${git_branch}, ${git_path} ]\"\n    }\n\n    # Clone the repository to the temporary directory. If it fails, wait 1 minute and try again, try 10 times.\n    for i in {1..10}; do\n        git clone --quiet --single-branch --depth=1 --branch=${git_branch} ${git_repo} ${git_path}\n        [[ \"${?}\" -eq 0 ]] && break || sleep 60\n    done\n    [[ \"${?}\" -eq 0 ]] || error_msg \"Failed to clone the [ ${git_repo} ] repository.\"\n}\n\ndownload_depends() {\n    cd ${current_path}\n    echo -e \"${STEPS} Start downloading dependency files...\"\n\n    # Download Armbian u-boot files\n    git_path=\"$(mktemp -d)\"\n    git_pull_dir ${uboot_repo} main ${git_path}\n    # Move the files to the storage directory\n    mkdir -p ${uboot_path}\n    cp -af --no-preserve=ownership ${git_path}/u-boot/* ${uboot_path}\n    [[ \"${?}\" -eq 0 ]] || error_msg \"Failed to move the [ u-boot ] files to the [ ${uboot_path} ] directory.\"\n    # Delete temporary files\n    rm -rf ${git_path}\n\n    # Download Armbian firmware files\n    git_path=\"$(mktemp -d)\"\n    git_pull_dir ${firmware_repo} main ${git_path}\n    # Move the files to the storage directory\n    mkdir -p ${firmware_path}\n    cp -af --no-preserve=ownership ${git_path}/firmware/* ${firmware_path}\n    [[ \"${?}\" -eq 0 ]] && echo -e \"${INFO} firmware download completed.\" || error_msg \"firmware download failed.\"\n    # Delete temporary files\n    rm -rf ${git_path}\n\n    # Download platform files\n    git_path=\"$(mktemp -d)\"\n    git_pull_dir ${depends_repo} main ${git_path}\n    # Move the files to the storage directory\n    cp -af --no-preserve=ownership ${git_path}/build-armbian/armbian-files/platform-files/* ${platform_files}\n    # Remove the special files in the [ sbin ] directory of the Armbian system\n    rm -rf $(find ${platform_files} -type d -name \"sbin\")\n    # Download different files\n    cp -af --no-preserve=ownership ${git_path}/build-armbian/armbian-files/different-files/* ${different_files}\n    [[ \"${?}\" -eq 0 ]] && echo -e \"${INFO} different-files download completed.\" || error_msg \"different-files download failed.\"\n    # Download balethirq related files\n    cp -f --no-preserve=ownership ${git_path}/build-armbian/armbian-files/common-files/usr/sbin/balethirq.pl ${common_files}/usr/sbin\n    cp -f --no-preserve=ownership ${git_path}/build-armbian/armbian-files/common-files/etc/balance_irq ${common_files}/etc\n    [[ \"${?}\" -eq 0 ]] && echo -e \"${INFO} balethirq download completed.\" || error_msg \"balethirq download failed.\"\n    # Delete temporary files\n    rm -rf ${git_path}\n\n    # Download install/update and other related files\n    git_path=\"$(mktemp -d)\"\n    git_pull_dir ${script_repo} main ${git_path}\n    # Move the files to the storage directory\n    cp -af --no-preserve=ownership ${git_path}/luci-app-amlogic/root/usr/sbin/* ${common_files}/usr/sbin\n    [[ \"${?}\" -eq 0 ]] && echo -e \"${INFO} app/sbin download completed.\" || error_msg \"app/sbin download failed.\"\n    chmod +x ${common_files}/usr/sbin/*\n    # Move the files to the storage directory\n    mkdir -p ${common_files}/usr/share/amlogic\n    cp -af --no-preserve=ownership ${git_path}/luci-app-amlogic/root/usr/share/amlogic ${common_files}/usr/share/amlogic\n    [[ \"${?}\" -eq 0 ]] && echo -e \"${INFO} app/share download completed.\" || error_msg \"app/share download failed.\"\n    chmod +x ${common_files}/usr/share/amlogic/*\n    # Delete temporary files\n    rm -rf ${git_path}\n}\n\nquery_kernel() {\n    echo -e \"${STEPS} Start querying the latest kernel version...\"\n\n    # Check the version on the kernel repository\n    x=\"1\"\n    for key in \"${!tags_list[@]}\"; do\n        {\n            # Query the name of the latest kernel version\n            tmp_arr_kernels=()\n            down_kernel_list=(${tags_list[${key}]})\n            i=1\n            for kernel_var in \"${down_kernel_list[@]}\"; do\n                echo -e \"${INFO} (${x}.${i}) Auto query the latest kernel version for [ ${key} - ${kernel_var} ]\"\n\n                # Identify the kernel <VERSION> and <PATCHLEVEL>, such as [ 6.1 ]\n                kernel_verpatch=\"$(echo ${kernel_var} | awk -F '.' '{print $1\".\"$2}')\"\n\n                # Query the latest kernel version\n                latest_version=\"$(\n                    curl -fsSL \\\n                        ${kernel_api}/releases/expanded_assets/kernel_${key} |\n                        grep -oE \"${kernel_verpatch}.[0-9]+.tar.gz\" | sed 's/.tar.gz//' |\n                        sort -urV | head -n 1\n                )\"\n\n                if [[ \"${?}\" -eq 0 && -n \"${latest_version}\" ]]; then\n                    tmp_arr_kernels[${i}]=\"${latest_version}\"\n                else\n                    tmp_arr_kernels[${i}]=\"${kernel_var}\"\n                fi\n\n                echo -e \"${INFO} (${x}.${i}) [ ${key} - ${tmp_arr_kernels[$i]} ] is latest kernel. \\n\"\n\n                let i++\n            done\n\n            # Assign the latest kernel version to the array\n            tags_list[${key}]=\"${tmp_arr_kernels[@]}\"\n\n            let x++\n        }\n    done\n}\n\ncheck_kernel() {\n    [[ -n \"${1}\" ]] && check_path=\"${1}\" || error_msg \"Invalid kernel path to check.\"\n    check_files=($(cat \"${check_path}/sha256sums\" | awk '{print $2}'))\n    for cf in \"${check_files[@]}\"; do\n        {\n            # Check if file exists\n            [[ -s \"${check_path}/${cf}\" ]] || error_msg \"The [ ${cf} ] file is missing.\"\n            # Check if the file sha256sum is correct\n            tmp_sha256sum=\"$(sha256sum \"${check_path}/${cf}\" | awk '{print $1}')\"\n            tmp_checkcode=\"$(cat ${check_path}/sha256sums | grep ${cf} | awk '{print $1}')\"\n            [[ \"${tmp_sha256sum}\" == \"${tmp_checkcode}\" ]] || error_msg \"[ ${cf} ]: sha256sum verification failed.\"\n        }\n    done\n    echo -e \"${INFO} All [ ${#check_files[@]} ] kernel files are sha256sum checked to be complete.\\n\"\n}\n\ndownload_kernel() {\n    cd ${current_path}\n    echo -e \"${STEPS} Start downloading the kernel files...\"\n\n    x=\"1\"\n    for key in \"${!tags_list[@]}\"; do\n        {\n            down_kernel_list=(${tags_list[${key}]})\n            # Download the kernel to the storage directory\n            i=\"1\"\n            for kernel_var in \"${down_kernel_list[@]}\"; do\n                if [[ ! -d \"${kernel_path}/${key}/${kernel_var}\" ]]; then\n                    kernel_down_from=\"https://github.com/${kernel_repo}/releases/download/kernel_${key}/${kernel_var}.tar.gz\"\n                    echo -e \"${INFO} (${x}.${i}) [ ${key} - ${kernel_var} ] Kernel download from [ ${kernel_down_from} ]\"\n\n                    # Download the kernel files. If the download fails, try again 10 times.\n                    [[ -d \"${kernel_path}/${key}\" ]] || mkdir -p ${kernel_path}/${key}\n                    for t in {1..10}; do\n                        curl -fsSL \"${kernel_down_from}\" -o \"${kernel_path}/${key}/${kernel_var}.tar.gz\"\n                        [[ \"${?}\" -eq 0 ]] && break || sleep 60\n                    done\n                    [[ \"${?}\" -eq 0 ]] || error_msg \"Failed to download the kernel files from the server.\"\n\n                    # Decompress the kernel files\n                    tar -mxzf \"${kernel_path}/${key}/${kernel_var}.tar.gz\" -C \"${kernel_path}/${key}\"\n                    [[ \"${?}\" -eq 0 ]] || error_msg \"[ ${kernel_var} ] kernel decompression failed.\"\n                else\n                    echo -e \"${INFO} (${x}.${i}) [ ${key} - ${kernel_var} ] Kernel is in the local directory.\"\n                fi\n\n                # If the kernel contains the sha256sums file, check the files integrity\n                [[ -f \"${kernel_path}/${key}/${kernel_var}/sha256sums\" ]] && check_kernel \"${kernel_path}/${key}/${kernel_var}\"\n\n                let i++\n            done\n\n            # Delete downloaded kernel temporary files\n            rm -f ${kernel_path}/${key}/*.tar.gz\n            sync\n\n            let x++\n        }\n    done\n}\n\nconfirm_version() {\n    cd ${current_path}\n\n    # Columns of ${model_conf}:\n    # 1.ID  2.MODEL  3.SOC  4.FDTFILE  5.UBOOT_OVERLOAD  6.MAINLINE_UBOOT  7.BOOTLOADER_IMG  8.DESCRIPTION\n    # 9.KERNEL_TAGS  10.PLATFORM  11.FAMILY  12.BOOT_CONF  13.CONTRIBUTORS  14.BOARD  15.BUILD\n    # Column 5, called <UBOOT_OVERLOAD> in Amlogic, <TRUST_IMG> in Rockchip, Not used in Allwinner.\n\n    # Find [ the first ] configuration information with [ the same BOARD name ] and [ BUILD as yes ] in the ${model_conf} file.\n    board_conf=\"$(\n        cat ${model_conf} |\n            sed -e 's/NA//g' -e 's/NULL//g' -e 's/[ ][ ]*//g' |\n            grep -E \"^[^#].*:${board}:(yes|no)$\" |\n            head -n 1\n    )\"\n    [[ -n \"${board_conf}\" ]] || error_msg \"[ ${board} ] config is missing!\"\n\n    # Get device settings options\n    MODEL_ID=\"$(echo ${board_conf} | awk -F':' '{print $1}')\"\n    MODEL_NAME=\"$(echo ${board_conf} | awk -F':' '{print $2}')\"\n    SOC=\"$(echo ${board_conf} | awk -F':' '{print $3}')\"\n    FDTFILE=\"$(echo ${board_conf} | awk -F':' '{print $4}')\"\n    UBOOT_OVERLOAD=\"$(echo ${board_conf} | awk -F':' '{print $5}')\"\n    TRUST_IMG=\"${UBOOT_OVERLOAD}\"\n    MAINLINE_UBOOT=\"$(echo ${board_conf} | awk -F':' '{print $6}')\"\n    BOOTLOADER_IMG=\"$(echo ${board_conf} | awk -F':' '{print $7}')\"\n    KERNEL_TAGS=\"$(echo ${board_conf} | awk -F':' '{print $9}')\"\n    PLATFORM=\"$(echo ${board_conf} | awk -F':' '{print $10}')\"\n    FAMILY=\"$(echo ${board_conf} | awk -F':' '{print $11}')\"\n    BOOT_CONF=\"$(echo ${board_conf} | awk -F':' '{print $12}')\"\n    CONTRIBUTORS=\"$(echo ${board_conf} | awk -F':' '{print $13}')\"\n\n    # Check whether the key parameters are correct\n    [[ -n \"${PLATFORM}\" ]] || error_msg \"Invalid PLATFORM parameter: [ ${PLATFORM} ]\"\n    # Set supported platform name\n    support_platform=(\"amlogic\" \"rockchip\" \"allwinner\")\n    [[ -n \"$(echo \"${support_platform[@]}\" | grep -w \"${PLATFORM}\")\" ]] || error_msg \"[ ${PLATFORM} ] not supported.\"\n\n    # Add u-boot files record information\n    [[ -n \"${MAINLINE_UBOOT}\" ]] && RECORD_MAINLINE_UBOOT=\"/lib/u-boot/${MAINLINE_UBOOT}\" || RECORD_MAINLINE_UBOOT=\"\"\n    [[ -n \"${BOOTLOADER_IMG}\" ]] && RECORD_BOOTLOADER_IMG=\"/lib/u-boot/${BOOTLOADER_IMG}\" || RECORD_BOOTLOADER_IMG=\"\"\n    [[ -n \"${TRUST_IMG}\" ]] && RECORD_TRUST_IMG=\"/lib/u-boot/${TRUST_IMG}\" || RECORD_TRUST_IMG=\"\"\n    # Set the Amlogic u-boot series\n    family_rename=\"${FAMILY//-/_}\"\n    eval \"amlogic_uboot=(\\${uboot_${family_rename}[@]})\"\n\n    # Get the kernel tags and version\n    conf_kernel_tags=\"${KERNEL_TAGS%%/*}\"\n    conf_kernel_list=\"${KERNEL_TAGS##*/}\"\n    # Replace the default kernel tags with the custom kernel tags\n    [[ -n \"${kernel_usage}\" && \"${conf_kernel_tags}\" == \"${default_tags}\" ]] && conf_kernel_tags=\"${kernel_usage}\"\n\n    # Set the kernel version array\n    build_kernel=()\n    if [[ \"${conf_kernel_list}\" == \"all\" ]]; then\n        build_kernel=(${tags_list[${conf_kernel_tags}]})\n    else\n        conf_kernel_list=\"${conf_kernel_list//[a-z]/[0-9]+}\"\n        # Convert the string into an array, using \"_\" as the delimiter.\n        IFS='_' read -ra conf_kernel_list <<<\"${conf_kernel_list}\"\n        model_kernel=(${conf_kernel_list[@]})\n        latest_kernel=(${tags_list[${conf_kernel_tags}]})\n        # Find the kernel version that matches the custom version\n        for ck in \"${model_kernel[@]}\"; do\n            for lk in \"${latest_kernel[@]}\"; do\n                [[ \"${lk}\" =~ ^${ck}$ ]] && build_kernel+=(\"${lk}\")\n            done\n        done\n    fi\n\n    # Check the kernel tags and version\n    [[ -n \"${conf_kernel_tags}\" || \"${#conf_kernel_list[@]}\" -eq 0 ]] || error_msg \"The [ KERNEL_TAGS ] is invalid: [ ${KERNEL_TAGS} ].\"\n    [[ \"${#build_kernel[@]}\" -eq 0 ]] && error_msg \"The [ KERNEL_TAGS ] is invalid: [ ${KERNEL_TAGS} ].\"\n}\n\nmake_image() {\n    process_msg \"(1/6) Make OpenWrt image.\"\n    cd ${current_path}\n\n    # Set Armbian image file parameters\n    [[ \"${PLATFORM}\" == \"amlogic\" ]] && {\n        skip_mb=\"4\"\n        partition_table_type=\"msdos\"\n        bootfs_type=\"fat32\"\n    }\n    [[ \"${PLATFORM}\" == \"rockchip\" ]] && {\n        skip_mb=\"16\"\n        partition_table_type=\"gpt\"\n        bootfs_type=\"ext4\"\n    }\n    [[ \"${PLATFORM}\" == \"allwinner\" ]] && {\n        skip_mb=\"16\"\n        partition_table_type=\"msdos\"\n        bootfs_type=\"fat32\"\n    }\n\n    # Set OpenWrt filename\n    [[ -d \"${out_path}\" ]] || mkdir -p ${out_path}\n    openwrt_filename=\"openwrt${source_codename}_${PLATFORM}_${board}_k${kernel}_$(date +\"%Y.%m.%d\").img\"\n    build_image_file=\"${out_path}/${openwrt_filename}\"\n    rm -f ${build_image_file}\n\n    IMG_SIZE=\"$((skip_mb + boot_mb + root_mb))\"\n    truncate -s ${IMG_SIZE}M ${build_image_file} >/dev/null 2>&1\n\n    parted -s ${build_image_file} mklabel ${partition_table_type} 2>/dev/null\n    parted -s ${build_image_file} mkpart primary ${bootfs_type} $((skip_mb))MiB $((skip_mb + boot_mb - 1))MiB 2>/dev/null\n    parted -s ${build_image_file} mkpart primary btrfs $((skip_mb + boot_mb))MiB 100% 2>/dev/null\n\n    # Mount the OpenWrt image file\n    loop_new=\"$(losetup -P -f --show \"${build_image_file}\")\"\n    [[ -n \"${loop_new}\" ]] || error_msg \"losetup ${build_image_file} failed.\"\n\n    # Confirm BOOT_UUID\n    BOOT_UUID=\"$(cat /proc/sys/kernel/random/uuid)\"\n    [[ -z \"${BOOT_UUID}\" ]] && BOOT_UUID=\"$(uuidgen)\"\n    [[ -z \"${BOOT_UUID}\" ]] && error_msg \"The uuidgen is invalid, cannot continue.\"\n    # Confirm ROOTFS_UUID\n    ROOTFS_UUID=\"$(cat /proc/sys/kernel/random/uuid)\"\n    [[ -z \"${ROOTFS_UUID}\" ]] && ROOTFS_UUID=\"$(uuidgen)\"\n    [[ -z \"${ROOTFS_UUID}\" ]] && error_msg \"The uuidgen is invalid, cannot continue.\"\n\n    # Format bootfs partition\n    if [[ \"${bootfs_type}\" == \"fat32\" ]]; then\n        mkfs.vfat -F 32 -n \"BOOT\" ${loop_new}p1 >/dev/null 2>&1\n    else\n        mkfs.ext4 -F -q -U ${BOOT_UUID} -L \"BOOT\" -b 4k -m 0 ${loop_new}p1 >/dev/null 2>&1\n    fi\n\n    # Format rootfs partition\n    mkfs.btrfs -f -U ${ROOTFS_UUID} -L \"ROOTFS\" -m single ${loop_new}p2 >/dev/null 2>&1\n\n    # Write the specific bootloader for [ Amlogic ] boxes\n    [[ \"${PLATFORM}\" == \"amlogic\" ]] && {\n        bootloader_path=\"${uboot_path}/${PLATFORM}/bootloader\"\n        if [[ -n \"${MAINLINE_UBOOT}\" && -f \"${bootloader_path}/${MAINLINE_UBOOT}\" ]]; then\n            dd if=\"${bootloader_path}/${MAINLINE_UBOOT}\" of=\"${loop_new}\" conv=fsync bs=1 count=444 2>/dev/null\n            dd if=\"${bootloader_path}/${MAINLINE_UBOOT}\" of=\"${loop_new}\" conv=fsync bs=512 skip=1 seek=1 2>/dev/null\n            #echo -e \"${INFO} 01. For [ ${board} ] write bootloader: ${MAINLINE_UBOOT}\"\n        elif [[ -n \"${BOOTLOADER_IMG}\" && -f \"${bootloader_path}/${BOOTLOADER_IMG}\" ]]; then\n            dd if=\"${bootloader_path}/${BOOTLOADER_IMG}\" of=\"${loop_new}\" conv=fsync bs=1 count=444 2>/dev/null\n            dd if=\"${bootloader_path}/${BOOTLOADER_IMG}\" of=\"${loop_new}\" conv=fsync bs=512 skip=1 seek=1 2>/dev/null\n            #echo -e \"${INFO} 02. For [ ${board} ] write bootloader: ${BOOTLOADER_IMG}\"\n        fi\n    }\n\n    # Write the specific bootloader for [ Rockchip ] boxes\n    [[ \"${PLATFORM}\" == \"rockchip\" ]] && {\n        bootloader_path=\"${uboot_path}/${PLATFORM}/${board}\"\n        if [[ -n \"${BOOTLOADER_IMG}\" && -f \"${bootloader_path}/${BOOTLOADER_IMG}\" ]] &&\n            [[ -n \"${MAINLINE_UBOOT}\" && -f \"${bootloader_path}/${MAINLINE_UBOOT}\" ]] &&\n            [[ -n \"${TRUST_IMG}\" && -f \"${bootloader_path}/${TRUST_IMG}\" ]]; then\n            dd if=\"${bootloader_path}/${BOOTLOADER_IMG}\" of=\"${loop_new}\" conv=fsync,notrunc bs=512 seek=64 2>/dev/null\n            dd if=\"${bootloader_path}/${MAINLINE_UBOOT}\" of=\"${loop_new}\" conv=fsync,notrunc bs=512 seek=16384 2>/dev/null\n            dd if=\"${bootloader_path}/${TRUST_IMG}\" of=\"${loop_new}\" conv=fsync,notrunc bs=512 seek=24576 2>/dev/null\n            #echo -e \"${INFO} 01. For [ ${board} ] write bootloader: ${TRUST_IMG}\"\n        elif [[ -n \"${BOOTLOADER_IMG}\" && -f \"${bootloader_path}/${BOOTLOADER_IMG}\" ]] &&\n            [[ -n \"${MAINLINE_UBOOT}\" && -f \"${bootloader_path}/${MAINLINE_UBOOT}\" ]]; then\n            dd if=\"${bootloader_path}/${BOOTLOADER_IMG}\" of=\"${loop_new}\" conv=fsync,notrunc bs=512 seek=64 2>/dev/null\n            dd if=\"${bootloader_path}/${MAINLINE_UBOOT}\" of=\"${loop_new}\" conv=fsync,notrunc bs=512 seek=16384 2>/dev/null\n            #echo -e \"${INFO} 02. For [ ${board} ] write bootloader: ${MAINLINE_UBOOT}\"\n        elif [[ -n \"${BOOTLOADER_IMG}\" && -f \"${bootloader_path}/${BOOTLOADER_IMG}\" ]]; then\n            dd if=\"${bootloader_path}/${BOOTLOADER_IMG}\" of=\"${loop_new}\" conv=fsync,notrunc bs=512 skip=64 seek=64 2>/dev/null\n            #echo -e \"${INFO} 03. For [ ${board} ] write bootloader: ${BOOTLOADER_IMG}\"\n        fi\n    }\n\n    # Write the specific bootloader for [ Allwinner ] boxes\n    [[ \"${PLATFORM}\" == \"allwinner\" ]] && {\n        bootloader_path=\"${uboot_path}/${PLATFORM}/${board}\"\n        if [[ -n \"${BOOTLOADER_IMG}\" && -f \"${bootloader_path}/${BOOTLOADER_IMG}\" ]] &&\n            [[ -n \"${MAINLINE_UBOOT}\" && -f \"${bootloader_path}/${MAINLINE_UBOOT}\" ]]; then\n            dd if=\"${bootloader_path}/${BOOTLOADER_IMG}\" of=\"${loop_new}\" conv=fsync,notrunc bs=8k seek=1 2>/dev/null\n            dd if=\"${bootloader_path}/${MAINLINE_UBOOT}\" of=\"${loop_new}\" conv=fsync,notrunc bs=8k seek=5 2>/dev/null\n            #echo -e \"${INFO} 01. For [ ${board} ] write bootloader: ${MAINLINE_UBOOT}\"\n        elif [[ -n \"${BOOTLOADER_IMG}\" && -f \"${bootloader_path}/${BOOTLOADER_IMG}\" ]]; then\n            dd if=\"${bootloader_path}/${BOOTLOADER_IMG}\" of=\"${loop_new}\" conv=fsync,notrunc bs=8k seek=1 2>/dev/null\n            #echo -e \"${INFO} 02. For [ ${board} ] write bootloader: ${BOOTLOADER_IMG}\"\n        fi\n    }\n}\n\nextract_openwrt() {\n    process_msg \"(2/6) Extract OpenWrt files.\"\n    cd ${current_path}\n\n    # Create a dual-partition general directory\n    tag_bootfs=\"${tmp_path}/${kernel}/${board}/bootfs\"\n    tag_rootfs=\"${tmp_path}/${kernel}/${board}/rootfs\"\n    mkdir -p ${tag_bootfs} ${tag_rootfs}\n    chown root:root ${tag_bootfs} ${tag_rootfs}\n\n    # Mount bootfs\n    if [[ \"${bootfs_type}\" == \"fat32\" ]]; then\n        mount_try vfat ${loop_new}p1 ${tag_bootfs}\n    else\n        mount_try ext4 ${loop_new}p1 ${tag_bootfs}\n    fi\n\n    # Mount rootfs\n    mount_try btrfs ${loop_new}p2 ${tag_rootfs}\n\n    # Create snapshot directory\n    btrfs subvolume create ${tag_rootfs}/etc >/dev/null 2>&1\n\n    # Unzip the OpenWrt rootfs file\n    tar -mxzf ${openwrt_path}/${openwrt_default_file} -C ${tag_rootfs}\n    rm -rf ${tag_rootfs}/lib/modules/*\n    rm -f ${tag_rootfs}/rom/sbin/firstboot\n\n    # Copy the common files\n    [[ -d \"${common_files}\" ]] && cp -af --no-preserve=ownership ${common_files}/* ${tag_rootfs}\n\n    # Copy the platform files\n    platform_bootfs=\"${platform_files}/${PLATFORM}/bootfs\"\n    platform_rootfs=\"${platform_files}/${PLATFORM}/rootfs\"\n    [[ -d \"${platform_bootfs}\" ]] && cp -rf ${platform_bootfs}/* ${tag_bootfs}\n    [[ -d \"${platform_rootfs}\" ]] && cp -af --no-preserve=ownership ${platform_rootfs}/* ${tag_rootfs}\n\n    # Copy the different files\n    different_bootfs=\"${different_files}/${board}/bootfs\"\n    different_rootfs=\"${different_files}/${board}/rootfs\"\n    [[ -d \"${different_bootfs}\" ]] && cp -rf ${different_bootfs}/* ${tag_bootfs}\n    [[ -d \"${different_rootfs}\" ]] && cp -af --no-preserve=ownership ${different_rootfs}/* ${tag_rootfs}\n\n    # Copy the bootloader files\n    [[ -d \"${tag_rootfs}/lib/u-boot\" ]] || mkdir -p \"${tag_rootfs}/lib/u-boot\"\n    rm -rf ${tag_rootfs}/lib/u-boot/*\n    [[ -d \"${bootloader_path}\" ]] && cp -af --no-preserve=ownership ${bootloader_path}/* ${tag_rootfs}/lib/u-boot\n\n    # Copy the Amlogic overload files\n    [[ \"${PLATFORM}\" == \"amlogic\" ]] && {\n        for au in \"${amlogic_uboot[@]}\"; do\n            if [[ -f \"${uboot_path}/${PLATFORM}/overload/u-boot-${au}\" ]]; then\n                cp -f ${uboot_path}/${PLATFORM}/overload/u-boot-${au} ${tag_bootfs}\n            else\n                error_msg \"The [ u-boot-${au} ] file is missing in the [ ${uboot_path}/${PLATFORM}/overload ] directory.\"\n            fi\n        done\n    }\n\n    # Remove the .git directories\n    rm -rf $(find ${tmp_path} -type d -name '.git')\n}\n\nreplace_kernel() {\n    process_msg \"(3/6) Replace the kernel.\"\n    cd ${current_path}\n\n    # Determine custom kernel filename\n    kernel_boot=\"$(ls ${kernel_path}/${conf_kernel_tags}/${kernel}/boot-${kernel}*.tar.gz 2>/dev/null | head -n 1)\"\n    kernel_name=\"${kernel_boot##*/}\" && kernel_name=\"${kernel_name:5:-7}\"\n    [[ -n \"${kernel_name}\" ]] || error_msg \"Missing kernel files for [ ${kernel} ]\"\n    kernel_dtb=\"${kernel_path}/${conf_kernel_tags}/${kernel}/dtb-${PLATFORM}-${kernel_name}.tar.gz\"\n    kernel_modules=\"${kernel_path}/${conf_kernel_tags}/${kernel}/modules-${kernel_name}.tar.gz\"\n    [[ -s \"${kernel_boot}\" && -s \"${kernel_dtb}\" && -s \"${kernel_modules}\" ]] || error_msg \"The 3 kernel missing.\"\n\n    # 01. For /boot five files\n    tar -mxzf ${kernel_boot} -C ${tag_bootfs}\n    [[ \"${PLATFORM}\" == \"allwinner\" ]] && (cd ${tag_bootfs} && cp -f uInitrd-${kernel_name} uInitrd && cp -f vmlinuz-${kernel_name} Image)\n    [[ \"${PLATFORM}\" == \"amlogic\" ]] && (cd ${tag_bootfs} && cp -f uInitrd-${kernel_name} uInitrd && cp -f vmlinuz-${kernel_name} zImage)\n    [[ \"${PLATFORM}\" == \"rockchip\" ]] && (cd ${tag_bootfs} && ln -sf uInitrd-${kernel_name} uInitrd && ln -sf vmlinuz-${kernel_name} Image)\n    [[ \"$(ls ${tag_bootfs}/*${kernel_name} -l 2>/dev/null | grep \"^-\" | wc -l)\" -ge \"2\" ]] || error_msg \"The /boot files is missing.\"\n    [[ \"${PLATFORM}\" == \"amlogic\" ]] && get_textoffset \"${tag_bootfs}/zImage\"\n\n    # 02. For /boot/dtb/${PLATFORM}/*\n    [[ -d \"${tag_bootfs}/dtb/${PLATFORM}\" ]] || mkdir -p ${tag_bootfs}/dtb/${PLATFORM}\n    tar -mxzf ${kernel_dtb} -C ${tag_bootfs}/dtb/${PLATFORM}\n    [[ \"${PLATFORM}\" == \"rockchip\" ]] && ln -sf dtb ${tag_bootfs}/dtb-${kernel_name}\n    [[ \"$(ls ${tag_bootfs}/dtb/${PLATFORM} -l 2>/dev/null | grep \"^-\" | wc -l)\" -ge \"2\" ]] || error_msg \"/boot/dtb/${PLATFORM} files is missing.\"\n\n    # 03. For /lib/modules/${kernel_name}\n    tar -mxzf ${kernel_modules} -C ${tag_rootfs}/lib/modules\n    (cd ${tag_rootfs}/lib/modules/${kernel_name}/ && rm -f build source *.ko 2>/dev/null && find ./ -type f -name '*.ko' -exec ln -s {} ./ \\;)\n    [[ \"$(ls ${tag_rootfs}/lib/modules/${kernel_name} -l 2>/dev/null | grep \"^d\" | wc -l)\" -eq \"1\" ]] || error_msg \"/usr/lib/modules kernel folder is missing.\"\n}\n\nrefactor_bootfs() {\n    process_msg \"(4/6) Refactor bootfs files.\"\n    cd ${tag_bootfs}\n\n    # Process Amlogic series boot partition files\n    [[ \"${PLATFORM}\" == \"amlogic\" && \"${need_overload}\" == \"yes\" ]] && {\n        # Add u-boot.ext for Amlogic 5.10 kernel\n        if [[ -n \"${UBOOT_OVERLOAD}\" && -f \"${UBOOT_OVERLOAD}\" ]]; then\n            cp -f ${UBOOT_OVERLOAD} u-boot.ext\n            chmod +x u-boot.ext\n        elif [[ -z \"${UBOOT_OVERLOAD}\" || ! -f \"${UBOOT_OVERLOAD}\" ]]; then\n            error_msg \"${board} Board does not support using ${kernel} kernel, missing u-boot.\"\n        fi\n    }\n\n    # Set uEnv.txt & extlinux.conf mount parameters\n    uenv_rootdev=\"UUID=${ROOTFS_UUID} rootflags=compress=zstd:6 rootfstype=btrfs\"\n    # Set armbianEnv.txt mount parameters\n    armbianenv_rootdev=\"UUID=${ROOTFS_UUID}\"\n    armbianenv_rootflags=\"compress=zstd:6\"\n\n    # Edit the uEnv.txt\n    uenv_conf_file=\"uEnv.txt\"\n    [[ -f \"${uenv_conf_file}\" ]] && {\n        sed -i \"s|LABEL=ROOTFS|${uenv_rootdev}|g\" ${uenv_conf_file}\n        sed -i \"s|meson.*.dtb|${FDTFILE}|g\" ${uenv_conf_file}\n        sed -i \"s|sun.*.dtb|${FDTFILE}|g\" ${uenv_conf_file}\n        sed -i \"s|rk.*.dtb|${FDTFILE}|g\" ${uenv_conf_file}\n    }\n\n    # Add an alternate file (/boot/extlinux/extlinux.conf)\n    boot_extlinux_file=\"extlinux/extlinux.conf.bak\"\n    rename_extlinux_file=\"extlinux/extlinux.conf\"\n    [[ -f \"${boot_extlinux_file}\" ]] && {\n        sed -i \"s|LABEL=ROOTFS|${uenv_rootdev}|g\" ${boot_extlinux_file}\n        sed -i \"s|meson.*.dtb|${FDTFILE}|g\" ${boot_extlinux_file}\n        sed -i \"s|sun.*.dtb|${FDTFILE}|g\" ${boot_extlinux_file}\n        sed -i \"s|rk.*.dtb|${FDTFILE}|g\" ${boot_extlinux_file}\n        # If needed, such as t95z(s905x), rename delete .bak\n        [[ \"${BOOT_CONF}\" == \"extlinux.conf\" ]] && mv -f ${boot_extlinux_file} ${rename_extlinux_file}\n    }\n\n    # Edit the armbianEnv.txt\n    armbianenv_conf_file=\"armbianEnv.txt\"\n    [[ -f \"${armbianenv_conf_file}\" ]] && {\n        sed -i \"s|\\(fdtfile=.*\\/\\)[^/]*$|\\1${FDTFILE}|g\" ${armbianenv_conf_file}\n        sed -i \"s|^rootdev=.*|rootdev=${armbianenv_rootdev}|g\" ${armbianenv_conf_file}\n        sed -i \"s|^rootfstype=.*|rootfstype=btrfs|g\" ${armbianenv_conf_file}\n        sed -i \"s|^rootflags=.*|rootflags=${armbianenv_rootflags}|g\" ${armbianenv_conf_file}\n        sed -i \"s|^overlay_prefix=.*|overlay_prefix=${FAMILY}|g\" ${armbianenv_conf_file}\n    }\n\n    # Check device configuration files\n    [[ -f \"${uenv_conf_file}\" || -f \"${rename_extlinux_file}\" || -f \"${armbianenv_conf_file}\" ]] || error_msg \"Missing [ /boot/*Env.txt ]\"\n}\n\nrefactor_rootfs() {\n    process_msg \"(5/6) Refactor rootfs files.\"\n    cd ${tag_rootfs}\n\n    # Add directory\n    mkdir -p .reserved boot run\n\n    # Edit fstab\n    [[ -f \"etc/fstab\" && -f \"etc/config/fstab\" ]] || error_msg \"The [ fstab ] files does not exist.\"\n    sed -i \"s|LABEL=ROOTFS|UUID=${ROOTFS_UUID}|g\" etc/fstab\n    sed -i \"s|option label 'ROOTFS'|option uuid '${ROOTFS_UUID}'|g\" etc/config/fstab\n\n    # Set the keyword for tags in Releases\n    [[ -n \"${source_codename}\" ]] && {\n        sed -i \"s|option amlogic_firmware_tag.*|option amlogic_firmware_tag '${source_codename}'|g\" etc/config/amlogic\n    }\n\n    # Modify the default script to [ bash ] for [ cpustat ]\n    [[ -x \"bin/bash\" ]] && {\n        sed -i \"s/\\/bin\\/ash/\\/bin\\/bash/\" etc/passwd\n        sed -i \"s/\\/bin\\/ash/\\/bin\\/bash/\" usr/libexec/login.sh\n    }\n\n    # Turn off hw_flow by default\n    [[ -f \"etc/config/turboacc\" ]] && {\n        sed -i \"s|option hw_flow.*|option hw_flow '0'|g\" etc/config/turboacc\n        sed -i \"s|option sw_flow.*|option sw_flow '0'|g\" etc/config/turboacc\n    }\n\n    # Add custom startup script\n    custom_startup_script=\"etc/custom_service/start_service.sh\"\n    [[ -x \"${custom_startup_script}\" && -f \"etc/rc.local\" ]] && {\n        sed -i '/^exit 0/i\\bash /etc/custom_service/start_service.sh' etc/rc.local\n    }\n\n    # Modify the cpu mode to schedutil\n    [[ -f \"etc/config/cpufreq\" ]] && sed -i \"s/ondemand/schedutil/\" etc/config/cpufreq\n\n    # Turn off speed limit by default\n    [[ -f \"etc/config/nft-qos\" ]] && sed -i \"s|option limit_enable.*|option limit_enable '0'|g\" etc/config/nft-qos\n\n    # Add USB and wireless network drivers\n    [[ -f \"etc/modules.d/usb-net-rtl8150\" ]] || echo \"rtl8150\" >etc/modules.d/usb-net-rtl8150\n    # USB RTL8152/8153/8156 network card Driver\n    [[ -f \"etc/modules.d/usb-net-rtl8152\" ]] || echo \"r8152\" >etc/modules.d/usb-net-rtl8152\n    # USB AX88179 network card Driver\n    [[ -f \"etc/modules.d/usb-net-asix-ax88179\" ]] || echo \"ax88179_178a\" >etc/modules.d/usb-net-asix-ax88179\n    # brcmfmac built-in wireless network card Driver\n    echo \"brcmfmac\" >etc/modules.d/brcmfmac\n    echo \"brcmutil\" >etc/modules.d/brcmutil\n    echo \"bcmdhd\" >etc/modules.d/bcmdhd\n    # USB Realtek RTL8188EU Wireless LAN Driver\n    echo \"r8188eu\" >etc/modules.d/rtl8188eu\n    # Realtek RTL8189FS Wireless LAN Driver\n    echo \"8189fs\" >etc/modules.d/8189fs\n    # Realtek RTL8188FU Wireless LAN Driver\n    echo \"rtl8188fu\" >etc/modules.d/rtl8188fu\n    # Realtek RTL8822CS Wireless LAN Driver\n    echo \"88x2cs\" >etc/modules.d/88x2cs\n    # USB Ralink Wireless LAN Driver\n    echo \"rt2500usb\" >etc/modules.d/rt2500-usb\n    echo \"rt2800usb\" >etc/modules.d/rt2800-usb\n    echo \"rt2x00usb\" >etc/modules.d/rt2x00-usb\n    # USB Mediatek Wireless LAN Driver\n    echo \"mt7601u\" >etc/modules.d/mt7601u\n    echo \"mt7663u\" >etc/modules.d/mt7663u\n    echo \"mt76x0u\" >etc/modules.d/mt76x0u\n    echo \"mt76x2u\" >etc/modules.d/mt76x2u\n    echo \"mt76x2e\" >etc/modules.d/mt76x2e\n    echo \"mt7921e\" >etc/modules.d/mt7921e\n    echo \"mt7915e\" >etc/modules.d/mt7915e\n\n    # GPU Driver\n    echo \"panfrost\" >etc/modules.d/panfrost\n    # PWM Driver\n    echo \"pwm_meson\" >etc/modules.d/pwm_meson\n    # Ath10k Driver\n    echo \"ath10k_core\" >etc/modules.d/ath10k_core\n    echo \"ath10k_sdio\" >etc/modules.d/ath10k_sdio\n    echo \"ath10k_usb\" >etc/modules.d/ath10k_usb\n    echo \"ath10k_pci\" >etc/modules.d/ath10k-pci\n    echo \"ath10k_core frame_mode=2\" >etc/modules.d/ath10k\n    # Enable watchdog driver\n    echo \"meson_gxbb_wdt\" >etc/modules.d/watchdog\n    # For rk3588\n    echo \"bifrost_kbase\" >etc/modules.d/rk_gpu\n    echo \"rknpu\" >etc/modules.d/rk_npu\n    # For rk3568\n    echo \"rockchipdrm\" >etc/modules.d/drm-rockchip\n    echo \"rk_crypto2\" >etc/modules.d/rk_crypto\n    echo -e \"snd_soc_simple_card_utils\\nsnd_soc_simple_card\\nsnd_soc_rockchip_i2s\" >etc/modules.d/snd-rk3568\n    echo \"pwm_fan\" >etc/modules.d/pwm-fan\n    echo \"option\" >etc/modules.d/usb-serial-option\n    # For rk3328\n    echo -e \"snd_soc_simple_card_utils\\nsnd_soc_simple_card\\nsnd_soc_rockchip_i2s\" >etc/modules.d/snd-rk3328\n\n    # Add blacklist\n    mkdir -p etc/modprobe.d\n    cat >etc/modprobe.d/99-local.conf <<EOF\nblacklist snd_soc_meson_aiu_i2s\nalias brnf br_netfilter\nalias pwm pwm_meson\nalias wifi brcmfmac\nEOF\n\n    # Adjust startup settings\n    [[ -f \"etc/init.d/boot\" ]] && {\n        if ! grep -q 'ulimit -n' etc/init.d/boot; then\n            sed -i '/kmodloader/i \\\\tulimit -n 51200\\n' etc/init.d/boot\n        fi\n        if ! grep -q '/tmp/update' etc/init.d/boot; then\n            sed -i '/mkdir -p \\/tmp\\/.uci/a \\\\tmkdir -p \\/tmp\\/update' etc/init.d/boot\n        fi\n    }\n    [[ -f \"etc/inittab\" ]] && {\n        sed -i 's/ttyAMA0/ttyAML0/' etc/inittab\n        sed -i 's/ttyS0/tty0/' etc/inittab\n    }\n\n    # Automatic expansion of the third and fourth partitions\n    echo \"yes\" >root/.todo_rootfs_resize\n\n    # Relink the kmod program\n    [[ -x \"sbin/kmod\" ]] && (\n        kmod_list=\"depmod insmod lsmod modinfo modprobe rmmod\"\n        for ki in ${kmod_list}; do\n            rm -f sbin/${ki}\n            ln -sf kmod sbin/${ki}\n        done\n    )\n\n    # Add wireless master mode\n    wireless_mac80211=\"lib/netifd/wireless/mac80211.sh\"\n    [[ -f \"${wireless_mac80211}\" ]] && {\n        cp -f ${wireless_mac80211} ${wireless_mac80211}.bak\n        sed -i \"s|iw |ipconfig |g\" ${wireless_mac80211}\n    }\n\n    # Get random macaddr\n    mac_hexchars=\"0123456789ABCDEF\"\n    mac_end=$(for i in {1..6}; do echo -n ${mac_hexchars:$((${RANDOM} % 16)):1}; done | sed -e 's/\\(..\\)/:\\1/g')\n    random_macaddr=\"9E:62${mac_end}\"\n\n    # Optimize wifi/bluetooth module\n    [[ -d \"lib/firmware/brcm\" ]] && (\n        cd lib/firmware/brcm/ && rm -f ../*.hcd\n\n        # gtking/gtking pro is bcm4356 wifi/bluetooth, wifi5 module AP6356S\n        sed -e \"s/macaddr=.*/macaddr=${random_macaddr}:00/\" \"brcmfmac4356-sdio.txt\" >\"brcmfmac4356-sdio.azw,gtking.txt\"\n        # gtking/gtking pro is bcm4356 wifi/bluetooth, wifi6 module AP6275S\n        sed -e \"s/macaddr=.*/macaddr=${random_macaddr}:01/\" \"brcmfmac4375-sdio.txt\" >\"brcmfmac4375-sdio.azw,gtking.txt\"\n        # MXQ Pro+ is AP6330(bcm4330) wifi/bluetooth\n        sed -e \"s/macaddr=.*/macaddr=${random_macaddr}:02/\" \"brcmfmac4330-sdio.txt\" >\"brcmfmac4330-sdio.crocon,mxq-pro-plus.txt\"\n        # HK1 Box & H96 Max X3 is bcm54339 wifi/bluetooth\n        sed -e \"s/macaddr=.*/macaddr=${random_macaddr}:03/\" \"brcmfmac4339-sdio.ZP.txt\" >\"brcmfmac4339-sdio.amlogic,sm1.txt\"\n        # new ugoos x3 is brm43456\n        sed -e \"s/macaddr=.*/macaddr=${random_macaddr}:04/\" \"brcmfmac43456-sdio.txt\" >\"brcmfmac43456-sdio.amlogic,sm1.txt\"\n        # x96max plus v5.1 (ip1001m phy) adopts am7256 (brcm4354)\n        sed -e \"s/macaddr=.*/macaddr=${random_macaddr}:05/\" \"brcmfmac4354-sdio.txt\" >\"brcmfmac4354-sdio.amlogic,sm1.txt\"\n        # panther x2 AP6212A\n        sed -e \"s/macaddr=.*/macaddr=${random_macaddr}:06/\" \"brcmfmac43430-sdio.txt\" >\"brcmfmac43430-sdio.panther,x2.txt\"\n        # ct2000 s922x is brm4359\n        sed -i \"s/macaddr=.*/macaddr=${random_macaddr}:07/\" \"brcmfmac4359-sdio.ali,ct2000.txt\"\n    )\n\n    # Add firmware version information to the terminal page\n    [[ -n \"${builder_name}\" ]] && builder_display=\"Builder Name: ${builder_name} | \" || builder_display=\"\"\n    [[ -f \"etc/banner\" ]] && {\n        echo \" Install OpenWrt: System → Amlogic Service → Install OpenWrt\" >>etc/banner\n        echo \" Update  OpenWrt: System → Amlogic Service → Online  Update\" >>etc/banner\n        echo \" Board: ${board} | OpenWrt Kernel: ${kernel_name}\" >>etc/banner\n        echo \" ${builder_display}Production Date: $(date +%Y-%m-%d)\" >>etc/banner\n        echo \"───────────────────────────────────────────────────────────────────────\" >>etc/banner\n    }\n\n    # Add firmware information\n    echo \"PLATFORM='${PLATFORM}'\" >>${op_release}\n    echo \"MODEL_ID='${MODEL_ID}'\" >>${op_release}\n    echo \"MODEL_NAME='${MODEL_NAME}'\" >>${op_release}\n    echo \"SOC='${SOC}'\" >>${op_release}\n    echo \"FDTFILE='${FDTFILE}'\" >>${op_release}\n    echo \"FAMILY='${FAMILY}'\" >>${op_release}\n    echo \"BOARD='${board}'\" >>${op_release}\n    echo \"KERNEL_TAGS='${conf_kernel_tags}'\" >>${op_release}\n    echo \"KERNEL_VERSION='${kernel}'\" >>${op_release}\n    echo \"BOOT_CONF='${BOOT_CONF}'\" >>${op_release}\n    echo \"MAINLINE_UBOOT='${RECORD_MAINLINE_UBOOT}'\" >>${op_release}\n    echo \"ANDROID_UBOOT='${RECORD_BOOTLOADER_IMG}'\" >>${op_release}\n    if [[ \"${PLATFORM}\" == \"rockchip\" ]]; then\n        echo \"TRUST_IMG='${RECORD_TRUST_IMG}'\" >>${op_release}\n    elif [[ \"${PLATFORM}\" == \"amlogic\" ]]; then\n        echo \"UBOOT_OVERLOAD='${UBOOT_OVERLOAD}'\" >>${op_release}\n    fi\n    if [[ \"${PLATFORM}\" == \"rockchip\" ]]; then\n        echo \"SHOW_INSTALL_MENU='no'\" >>${op_release}\n    else\n        echo \"SHOW_INSTALL_MENU='yes'\" >>${op_release}\n    fi\n    echo \"OPENWRT_SOURCECODE='${OPENWRT_SOURCECODE}'\" >>${op_release}\n    echo \"BUILDER_NAME='${builder_name}'\" >>${op_release}\n    echo \"CONTRIBUTORS='${CONTRIBUTORS}'\" >>${op_release}\n    echo \"PACKAGED_DATE='$(date +%Y-%m-%d)'\" >>${op_release}\n    # Creating an Alias\n    ln -sf ${op_release#*/} ${ophub_release_file}\n\n    # Remove the menus that are not applicable in the model\n    install_menu=$(echo \"${model_txt}\" | awk -F'/' '{print $(NF-1)\"/\"$NF}')\n    grep -E \":${FAMILY}:\" ${install_menu} | cut -d':' -f1-8 >temp.txt && mv -f temp.txt ${install_menu}\n\n    # Create snapshot\n    mkdir -p .snapshots\n    btrfs subvolume snapshot -r etc .snapshots/etc-000 >/dev/null 2>&1\n\n    sync && sleep 3\n}\n\nclean_tmp() {\n    process_msg \"(6/6) Cleanup tmp files.\"\n    cd ${current_path}\n\n    # Unmount the OpenWrt image file\n    fstrim ${tag_bootfs} 2>/dev/null\n    fstrim ${tag_rootfs} 2>/dev/null\n    umount -f ${tag_bootfs} 2>/dev/null\n    umount -f ${tag_rootfs} 2>/dev/null\n    losetup -d ${loop_new} 2>/dev/null\n\n    cd ${out_path}\n    # Compress the OpenWrt image file\n    pigz -qf ${openwrt_filename} || gzip -qf ${openwrt_filename}\n\n    cd ${current_path}\n    # Clear temporary files directory\n    rm -rf ${tmp_path} && sync\n}\n\nloop_make() {\n    cd ${current_path}\n    echo -e \"${STEPS} Start making OpenWrt firmware...\"\n\n    j=\"1\"\n    for b in \"${make_openwrt[@]}\"; do\n        {\n            # Set specific configuration for making OpenWrt system\n            board=\"${b}\"\n            confirm_version\n\n            i=\"1\"\n            for k in \"${build_kernel[@]}\"; do\n                {\n                    # Set the kernel version\n                    kernel=\"${k}\"\n\n                    # Check disk space size\n                    echo -ne \"(${j}.${i}) Start making OpenWrt [\\033[92m ${board} - ${conf_kernel_tags}/${kernel} \\033[0m]. \"\n                    now_remaining_space=\"$(df -Tk ${make_path} | tail -n1 | awk '{print $5}' | echo $(($(xargs) / 1024 / 1024)))\"\n                    if [[ \"${now_remaining_space}\" -le \"3\" ]]; then\n                        echo -e \"${WARNING} Remaining space is less than 3G, exit this make.\"\n                        break\n                    else\n                        echo \"Remaining space is ${now_remaining_space}G.\"\n                    fi\n\n                    # Execute the following functions in sequence\n                    make_image\n                    extract_openwrt\n                    replace_kernel\n                    refactor_bootfs\n                    refactor_rootfs\n                    clean_tmp\n\n                    echo -e \"(${j}.${i}) OpenWrt made successfully. \\n\"\n                    let i++\n                }\n            done\n\n            let j++\n        }\n    done\n}\n\n# Show welcome message\necho -e \"${STEPS} Welcome to make OpenWrt!\"\necho -e \"${INFO} Server running on Ubuntu: [ Release: ${host_release} / Host: ${arch_info} ] \\n\"\n# Check script permission\n[[ \"$(id -u)\" == 0 ]] || error_msg \"please run this script as root: [ sudo ./${0} ]\"\n\n# Initialize variables and download the kernel\ninit_var \"${@}\"\ncheck_data\n# Find OpenWrt file\nfind_openwrt\n# Download the dependency files\ndownload_depends\n# Query the latest kernel version\n[[ \"${auto_kernel}\" == \"true\" ]] && query_kernel\n# Download the kernel files\ndownload_kernel\n\n# Show make settings\necho -e \"${INFO} [ ${#make_openwrt[@]} ] lists of OpenWrt board: [ $(echo ${make_openwrt[@]} | xargs) ]\"\necho -e \"${INFO} Kernel Repo: [ ${kernel_repo} ], Kernel Usage: [ ${kernel_usage} ] \\n\"\n# Show server start information\necho -e \"${INFO} Server space usage before starting to compile: \\n$(df -hT ${make_path}) \\n\"\n\n# Loop to make OpenWrt firmware\nloop_make\n\n# Show server end information\necho -e \"${STEPS} Server space usage after compilation: \\n$(df -hT ${make_path}) \\n\"\necho -e \"${SUCCESS} All process completed successfully.\"\n# All process completed\nwait\n"
        }
      ]
    }
  ]
}