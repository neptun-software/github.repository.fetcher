{
  "metadata": {
    "timestamp": 1736568187268,
    "page": 17,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spiritLHLS/ecs",
      "stars": 4568,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 27.5224609375,
          "content": "# CHANGELOG\n\n# 主要变化\n\n2025.01.02\n\n- 支持适配更多的系统\n- 在出现错误意外退出执行时指向golang版本的融合怪进行测试\n\n2025.01.01\n\n- pastebin使用自己手搓的方便自定义页面，修复分享展示的时候显示有背景问题\n\n2024.11.08\n\n- 优化并发下载中的进度条显示可能存在的除0错误问题，减少报错显示，增加提示\n- 增加```ifconfig```命令的替代命令```ip```，避免部分新系统不再使用已经不维护的组件\n\n2024.09.30\n\n- 显示分享链接时同时显示https协议和http协议\n\n2024.08.29\n\n- 显示下载文件的进度条，减少等待过程中未知报错的问题\n- 去除besttrace依赖(出BUG官方维护极慢)，直接使用nexttrace(出BUG官方维护迅速)，不再轮询检测报错才替换\n\n2024.08.14\n\n- 修复Docker检测可能失败的问题，增加cgroup检测\n- 未来将显示下载文件的进度条，减少等待过程中未知报错的问题\n\n2024.08.10\n\n- 修复IPV6检测IP段不存在时仍显示报错的问题\n- 修复fgit已经跑路，不再加速下载的问题，优化下载的逻辑，先尝试curl再尝试wget\n\n2024.07.26\n\n- 分享链接强制显示为http协议，避免CDN抽风导致无法访问页面\n\n2024.07.21\n\n- 更新项目说明头部信息，更新仓库部分说明\n\n2024.07.20\n\n- pastebin的托管服务商间歇性和Cloudflare的CDN不对付，分流先尝试http上传，如果失败再尝试https上传\n\n2024.07.07\n\n- 替换ghproxy增加支持IPV6的反代\n\n2024.07.01\n\n- 替换 abstractapi 检测 为 bigdatacloud 检测\n\n2024.06.24\n\n- 优化常用流媒体检测不再显示IP信息，避免重复查询\n\n2024.06.13\n\n- 检测打印结果时增加错误检测\n- 邮件端口检测重构使用golang实现[oneclickvirt/portchecker](https://github.com/oneclickvirt/portchecker)进行测试，检测速度更快、检测协议更多\n\n2024.05.24\n\n- 删除无用的中间文件的生成\n- 增加文件下载的提示，避免部分服务器带宽过小时不知道环境安装走到哪一步了\n- 增加部分二进制文件执行前的检测，避免部分文件下载失败时仍执行文件\n\n2024.05.20\n\n- 优化测速的重试机制\n\n2024.05.18\n\n- 更新北京电信、北京联通的目标IP地址\n\n2024.05.14\n\n- 使用[oneclickvirt/securityCheck](https://github.com/oneclickvirt/securityCheck)替换shell版本的IP质量检测\n- 优化环境初始化过程中的文件下载，更改为并行下载以加速环境初始化\n- 归档一些被golang版本融合怪模块替换的函数\n- 更新仓库脚本运行示例截图\n\n2024.05.08\n\n- 删除无效的两个数据库，因为风控过于严格几乎等于没有，查询了等于没查\n- 增加Golang版本融合怪重构过程中产生的部分模块的项目地址说明[此处查询相关模块重构进度](https://github.com/topics/goecs)\n- 删除Cloudflare的威胁得分查询，因为频繁的查询会导致URL被CF的Privacy规则Ban掉，所以查的多了URL自然会失效无法查询，且一般不是攻击者该项测试值都为0，没有查询的必要\n- 基础系统信息排版顺序优化了一下\n\n2024.05.05\n\n- 去除脚本的Python环境依赖，大幅优化初始化加载速度\n- 使用自写[gostun](https://github.com/oneclickvirt/gostun)检测本机NAT类型，不再依赖[pystun](https://github.com/jtriley/pystun)和[py3stun](https://github.com/xiongnemo/py3stun)进行检测，适配更多架构和平台\n\n2024.05.02\n\n- 基于[netflix-verify](https://github.com/sjlleo/netflix-verify)、[VerifyDisneyPlus](https://github.com/sjlleo/VerifyDisneyPlus)、[TubeCheck](https://github.com/sjlleo/TubeCheck)整合代码至于[CommonMediaTests](https://github.com/oneclickvirt/CommonMediaTests)，同时优化测试速度\n- 脚本应用[speedtest-go](https://github.com/showwin/speedtest-go/issues/182)优化，使用请求头避免测速请求被拒绝导致的下载速度测试为零，同时更新二进制文件的版本\n- 修复分享链接生成过程中的日志裁剪部分代码的小BUG\n\n2024.05.01\n\n- 二次开发[zhanghanyun/backtrace](https://github.com/zhanghanyun/backtrace)使用自修复和优化版本的[oneclickvirt/backtrace](https://github.com/oneclickvirt/backtrace)替代原版\n- 增加对```CN2GT```和```CN2GIA```线路的判断，原版[backtrace](https://github.com/zhanghanyun/backtrace)不支持\n- 增加对```CMIN2```和```CMI```线路的判断，原版[backtrace](https://github.com/zhanghanyun/backtrace)不支持\n- 增加对整个回程路由进行线路分析，与原版[backtrace](https://github.com/zhanghanyun/backtrace)仅进行一次判断不同\n- 修复原版[backtrace](https://github.com/zhanghanyun/backtrace)对IPV4地址信息获取时json解析失败依然打印信息的问题\n- 增加对全平台的编译支持，原版[backtrace](https://github.com/zhanghanyun/backtrace)仅支持linux平台的amd64和arm64架构\n\n2024.04.21\n\n- 修复sysbench的可用性判断的一个错误\n\n2024.04.20\n\n- 增加第三方测速脚本\n\n2024.03.26\n\n- 修复更新选项的错误行匹配\n\n2024.03.20\n\n- 增加IP质量查询的数据库，新增4个数据库\n\n2024.03.17\n\n- 更新IP质量查询的部分命令，原有域名失效，使用新域名\n\n2024.02.22\n\n- 优化系统查询命令，仅查询必要信息\n\n2024.02.18\n\n- 优化sysbench安装失败时替换为geekbench5测试的判断条件，重载PATH\n\n2024.02.04\n\n- 优化部分英文描述\n\n2024.02.02\n\n- 修复ASN的双引号处理逻辑，避免提取内容遇到多个双引号时出错\n- 增加IPV6路由测试的 北京、上海、广州 三网地址，可通过```-r```指令进行指定\n- 修复IPV6的子网掩码测试，避免筛选网卡的过程中出现错误，避免去除fe80开头的地址时错误的把真正的地址也去除了\n\n2024.01.31\n\n- 修复github的api的请求处理逻辑，适配纯IPV6、国内被ban的情况\n- 优化ASN和地区检测的部分网站解析逻辑\n- 更正潜在可能导致查询出现错误的函数\n\n2024.01.23\n\n- 限制chronyd最多执行30秒，避免有的机器卡死在时间同步这块\n\n2024.01.20\n\n- 优化部分参数的对应逻辑，加速脚本运行\n- 修正IPV6的子网掩码判断\n\n2024.01.17\n\n- 增加脚本的英文说明文档。\n- 更新部分脚本中文说明文档的描述。\n\n2024.01.16\n\n- 修复```api.github.com```的反代在国内被```ban```的问题，使用自定义的域名避免被```ban```.\n\n2024.01.12\n\n- 更新sysbench安装失败时处理的相关逻辑，避免安装失败时卡死脚本\n- 更新IPV6子网掩码判断的相关逻辑，避免获取不到物理网卡时还显示128\n\n2024.01.07\n\n- 更新部分yabs的处理内容，避免上传后结果出现重复行\n- 增加一个参数```-bansp```可选项，可强制不测网速\n\n2024.01.06\n\n- 更新fio测试的原始脚本，继续依托最新的```yabs.sh```去构建\n- 优化IPV6子网掩码查询时若V6不为公网则不显示\n\n2024.01.04\n\n- 部分IP质量查询API将要达到限额，增加随机抽取Key以避免达到限额\n- 优化部分sysctl配置，参考了[cloudflare](https://blog.cloudflare.com/optimizing-tcp-for-high-throughput-and-low-latency)和[magicTCP](https://github.com/nexstorm/magicTCP)的内容\n\n2023.12.31\n\n- 增加```-stype```和```-en```的指令模式，正式适配英文输出模式\n- 修复部分测速时长可能超过70秒的问题，尽可能的去限制执行任务的时长\n- 修复三网测速时部分运营商之前未考虑不可用时使用第二个平台替代的问题\n- 修复nslookup可能重复判断的问题，提前到环境预处理中\n\n2023.12.18\n\n- 修复纯IPV6测试的情况下，回程路由测试失效的情况，替换广东仍能使用的IPV6网关作为回程测试的目标地址\n\n2023.12.17\n\n- 修复纯IPV6测试的情况下，大部分反代CDN失效的情况\n\n2023.12.13\n\n- 更新参数模式的指令的解析\n- 增加```-mdisk```指令，可指定测试含挂载盘在内的多盘IO\n- 优化```-ctype```和```-dtype```指令的执行，新增两个judge函数分配任务\n- 更新```-h```指令的解释\n\n2023.12.12\n\n- 更新参数模式的指令的解析\n- 增加```-ctype```指令\n- 优化IPV6子网掩码大小的检测与别的任务并行\n- 优化```-h```指令的解释\n\n2023.12.08\n\n- 更新参数模式的指令的解析\n- 增加```-base```、```-dtype```、```-banup```三个指令\n- 增加IPV6子网掩码大小的检测\n- 简化运行时间计算的代码，将计时开始时间移动到脚本开头\n\n2023.12.07\n\n- 更新参数模式的部分指令的解析，增加-b指令\n\n2023.12.04\n\n- 更新参数模式的部分指令的解析\n- 说明界面增加提供支持的平台的logo和链接\n\n2023.12.03\n\n- 更新参数模式的指令形式\n- 更新nexttrace的正则匹配\n- 更新besttrace的老版本存档，优先使用besttrace以确保精确度\n\n2023.12.02\n\n- 增加sysbench编译安装中可能出现的证书校验异常问题，若首次证书请求失败，则尝试忽略证书进行请求\n- 更换分享链接保存的宿主机\n\n2023.11.24\n\n- 修复pip和pip3安装pystun3或pystun中可能出现的问题，增加修复安装的命令\n\n2023.11.22\n\n- 修复可能检测私网IPV6失灵的情况，完善检测逻辑\n- 修复可能宿主机内可能绑定不止一个IPV6地址的情况，只测试地址最长的公网IPV6地址\n\n2023.11.07\n\n- 修复脚本在archlinux上运行时sysbench可能缺少一个内核补丁的问题，同时加入sysbench的版本判断，对应版本用对应版本的指令\n- 修复脚本在FreeBSD上运行硬盘检测识别不出具体的事件处理数量的问题\n- 优化 ipinfo.io 的信息查询，尽量减少请求的次数\n- 优化解决脚本在时间对准过程中可能因为轮询节点耗时过长的问题，限时对准时间这个步骤最多耗时60秒\n- 修复脚本在FreeBSD上运行上sed命令可能存在的部分问题，但只修复了很小的一部分，仍旧有大部分sed命令待修复(感觉修复了这个alpine也能测了)\n\n2023.10.09\n\n- 修复脚本运行时间计算可能会受到运行的宿主机的时区产生计时错误的问题\n\n2023.10.03\n\n- 修复sysbench安装过程中，原有镜像已失效的问题\n- 优化sysbench安装过程，centos和redhat系先尝试使用yum安装然后尝试使用dnf安装，确保二者都尝试过\n- 修复输入错误提示重新输入在之前插入参数模式后失效的问题\n\n2023.09.29\n\n- 参数模式下支持自定义路由回程的IP设置\n\n2023.09.28\n\n- 修复不生成分享链接的BUG\n\n2023.09.22\n\n- 支持使用参数预设需要执行的指令\n\n2023.09.21\n\n- 修复部分组件可能存在的报错显示问题\n\n2023.09.18\n\n- 自动裁剪的函数存在部分问题，有的东西未裁剪丢弃有的裁剪多了，目前已修复\n\n2023.08.26\n\n- 针对纯IPV6服务器，使用v6的目标地址进行路由测试\n- 修复IPV4的地址检测判断，识别 RFC 6598 地址避免误判，特殊处理在纯IPV6的情况下无法检测IP类型的情况\n- 优化自动替换Besttrace为Nexttrace的判断条件，自动替换兼容的情况更多了\n- 优化路由检测的v6部分的判断\n- 同步系统基础信息检测的lemonbench的上游更新，优化上游更新中依然存在的bug\n\n2023.08.20\n\n- besttrace的API由于平台可能时不时存在403问题，遇到403或查询失败将应自动替换为备用的nexttrace测试，即使精度有下降\n\n2023.08.15\n\n- 测速节点增加欧洲地区节点\n- CPU检测区分受测机是物理还是虚拟以便使用物理核心数测试还是线程数测试\n- ip234.in 测试网站已炸，更换为 ipwhois.io 查询\n\n2023.07.29\n\n- 增加主体脚本一键更新的选项，避免有些人主体脚本下了之后再也没更新过了，导致部分BUG实际修复了但未更新反馈有问题，实际没问题\n- IP质量检测再次完全重构，支持10个数据库查询，又因为用了异步并发查询，新增数据源不会导致速度变慢，测试速度不变\n- 更新仓库说明中的展示图为最新的脚本截图\n- 单独的IP质量检测也支持分享链接了\n- IP质量检测同样输出的数据将合并输出，只留下数据库编号\n\n2023.07.27\n\n- 迁移分享链接的地址\n\n2023.07.23\n\n- 修复纯IPV6的机器测试网速会为空，未对纯IPV6服务器的测速适配的问题，暂时识别到后部分分区自动跳过测试\n- lxc或openvz架构由于部分测试项目可能输出了错误日志，导致命令行窗口虽然显示正常，但有部分机器上传上去的文件显示空缺部分内容，应该是正则匹配删东西删多了，尝试修复了一下，如若还有问题后续再尝试修复\n\n2023.07.16\n\n- 更新CPU性能检测的代码的核数判断部分，避免变量错配提示\n- 更新CPU核数检测的主体代码，对接上游更新\n\n2023.07.10\n\n- 虚拟化检测修改判断条件，修复可能存在systemd-detect-virt但是wsl的情况\n- 时区对准的ntpd矫正前，先检测123端口是否已被占用，如若被占用则证明有在校准中，无需再次矫准，跳过不进行矫正\n- 部分系统信息的判断条件稍作修改，修复某些变量比较的类型错误的问题\n- CPU测试的CPU核数修改使用的来源，避免部分检测核心数和检测的线程数不一致\n\n2023.07.09\n\n- 增加错误处理，增加速率限制识别，避免ASN的识别和邮箱可达性识别出问题\n- 更新系统基础信息查询，使用两个原始脚本融合，更新lemonbench的部分\n- 去除virt-what的依赖，对基础信息的查询减少了很多依赖项\n- 增加对系统信息的非0非空判断，以判别使用哪个原始脚本的方法获取系统信息\n\n2023.07.08\n\n- IPV4和IPV6的查询增加本地查询选项，增加内外网IP检测，保证查询到的IP是外网IP\n- 如果查询到是内网IP，再使用API进行外网IP查询\n- 并发查询ASN和IPV4/IPV6，并发查询IP质量各项，减少脚本的运行时长大概5~10秒\n- virt-what的检测修改为which的检测方式，避免某些特殊情况查询不到 \n\n2023.07.05\n\n- ASN查询与地址查询增加cloudflare的检测源，多源使用并行执行并发检测，提高了检测的成功率和准确性\n- ASN查询删除重复查询，精简了代码，提高了检测速度\n- 邮箱可达性检测增加错误代码处理，避免显示错误日志\n- 删除部分无效函数代码归档，调整代码块顺序，集合同类型的代码块，方便未来维护\n\n2023.07.04\n\n- 增加IP质量检测分区检测源，新增25端口的邮箱可达性检测\n- 更新纯测IP质量部分脚本，更新部分组件安装的流程\n- 增加脚本运行次数的统计\n\n2023.06.27\n\n- 增加IP质量检测分区检测源，新增黑名单网站数量检测，检测IP被多少个黑名单网站记录了\n- 暂时放弃适配FreeBSD和Armbian系统，太难适配了，手头无相关测试机器\n- 更新纯测IP质量部分脚本，去除jq依赖，缩短检测时长\n\n2023.06.21\n\n- 修复 Ubuntu18 系统在安装 virt-what 组件时，可能缺少universe的情况，自动添加universe记录\n\n2023.06.19\n\n- 修复部分组件的检测，避免检测的漏洞导致组件没被安装\n- 修复硬盘的DD测试中IOPS的部分隐性BUG，优化写入计算的部分\n\n2023.06.12\n\n- 适配已正式发布的Debian12系统\n\n2023.06.05\n\n- 增加对FreeBSD系统的支持\n- 去除了系统OS重复判断的部分函数，精简该部分代码\n- 给分享链接的生成增加路径修正，避免有时候因为意外退出路径不对导致分享链接对应的文件处理失败\n- 增加了systemctl还是rc.d支持的判断，避免部分系统无法使用相关的命令\n- virt-what的检测通过which进行而不是写死对/usr/sbin/virt-what路径进行判断，普适性更高\n\n2023.06.01 \n\n- 修复部分机器被stun服务器和IP查询的API站点拉黑的问题，报错替换为中文显示而不是网页源码显示\n- 修复astralinux系统的部分机器无法使用apt源下载sysbench时编译出错的问题，替换为debian模式进行编译\n\n2023.05.31\n\n- 优化dmidecode组件安装，尝试各种安装参数\n- 适配Astra Linux CE系统\n- 适配Debian11系统上的sysbench和virt-what安装，不再使用debian10的版本，预设了debian12的版本选项等待官方正式发布\n- 修复sysbench在低版本系统安装时不存在events per second输出导致识别为空的问题，实测Debian8和9检测CPU时不再识别为空\n- 增加了apt-get自动修复缺失公钥的功能\n- 修改部分第三方分区描述，避免歧义\n\n2023.05.29 \n\n- 修改脚本使得systl优化仅在测试期间起效果，执行完毕后重置回默认的设置，避免影响原系统环境\n\n2023.05.28 \n\n- 测试支持了OracleLinux 8+系统，修复在偏门的系统上安装NAT类型检测工具包失效的问题\n\n2023.05.24 \n\n- 由于有上游仓库兼容了chatgpt的检测，故在融合怪中删除本人维护的版本的分区，同时删除易造成echo错误的检测代码\n\n2023.05.22 \n\n- 修复部分开发板的内存测试读测试异常大的问题\n- 增加ntpd服务检测，避免存在ntpd时还使用chronyd同步时间\n- 增加内核参数优化，优化tcp请求和内核资源限制\n- 增加haveged以提供更优质的熵避免部分命令因此执行时间变长\n\n2023.05.20 \n\n- 修复.cn测速时延迟显示小数位过长约束为2位小数\n- CPU类型检测有时候会出现一连串的空格，替换最多连续出现一个空格\n- 适配stun，pystun，pystun3包进行NAT类型检测，避免单一包环境失效导致检测失败(centos系无stun包，python3无pystun包)，按顺序越往后检测越不精准\n- 调整部分输出更美观\n\n2023.05.19 \n\n- 修复一些输出和pastebin的问题\n\n2023.05.18\n\n- speedtest.net 有时候移动节点列表会为空，应当此时切换至 speedtest.cn 的移动列表，已修复添加\n- speedtest.net 的国际节点测速ID时常变换，待替换为自动更新的测速ID列表，已修复替换\n\n2023.05.15 \n\n- 更新io测试中yabs测试的部分使用GitHub的文件，不再使其依赖gitlab，适配使用cdn加速下载\n- 硬件测试分区和原创区增加测试挂载的多个磁盘的IO(仅测试挂载盘)的单项\n- 替换timedatectl使用chronyd同步时间，规避时区识别，仅作时间同步\n- 修复部分系统缺少tar命令无法解压文件的问题\n- 增加RockyLinux 8+系统的支持\n\n2023.05.14 \n\n- 增加NAT类型检测，使用stun工具查询，如果查询结果为开放型或支持回环，那么应该是独立外网IP的服务器，其他的看情况，大概率是无独立IP的共享IP的服务器\n- 暂时去除新加坡日本洛杉矶的测速节点ID后续使用自动更新的源避免老是要手动更新这部分节点\n- 因为三网回程测试基于ipip.net的程序，有时间准确度要求，为修正避免出现timestamp error的错误报告，增加时区检测，若本机系统时间偏差本机时区超过180秒自动修正后再执行检测\n\n2023.05.13 \n\n- 增加全国三网ping值测试的脚本，指定检测到中国IP时使用延迟检测替换路由检测，增加可用的CDN(自建白名单CDN)，增加中国IP检测的API(cip.cc)，增加第三方脚本添加三网Ping值测试脚本\n\n2023.05.11 \n\n- 删除当识别为中国IP时仍然检测线路和回程路由的部分，准备替换为全国省会的Ping值检测\n\n2023.05.06 \n\n- 网站 ipinfo.io 的API有的机器因为代理原因或同段欺诈分过高原因，免费的额度耗尽，修复自动替换为其他接口查询，修复查询开发板的CPU型号时有换行符的问题\n\n2023.05.05 \n\n- 部分服务器在测试时使用speedtest-cli组件版本有要求，修复自动替换版本时部分服务器重复测试的问题\n\n2023.05.04 \n\n- 优化io测试中重复查询系统信息以及CPU检测时重复查询系统版本的函数，修改部分分区描述，修复在开发板上的本地设备检测不到CPU型号的问题\n\n2023.05.03 \n\n- 修复三网路由测试显示ASN时不显示AS号码的问题，删除无效的全国网络延迟测试\n\n2023.05.02 \n\n- 修复纯IPV6无法测试四网线路显示文件不存在的问题，修复纯IPV6网络查询到的ASN只显示了名字没显示AS号码的问题，修复IPV4的ASN查询可能出现的bug，增加两个数据来源网站\n\n2023.05.01 \n\n- 修复部分ARM机器识别CPU成功，但在甲骨文的新加坡的ARM上，即便使用yabs的CPU检测依然无法检测CPU类型的问题\n- 修复显示ASN组织时使用ip.sb源时不显示AS号码的问题，删除上传的结果中yabs的IO测试部分出现的一些无效行\n- 修复分区选择时可能错按选项导致菜单退出的问题，合并三网路由检测的函数简化代码\n\n2023.04.29 \n\n- 修复纯IPV6机器的IPV6测试中可能存在的一些BUG\n- 修复纯IPV6机器的IPV6的ASN有时候识别失效的问题\n\n2023.04.29 \n\n- 修复部分机器查询内容的free命令不存在的问题\n- 修复部分机器/proc/sys/vm/drop_caches是只读权限时，清除内存缓存会报无法写入的错误，增加sudo组件的检测和安装\n- 修补有时候docker容器内的虚拟化架构检测误判为宿主机虚拟化架构的问题\n\n2023.04.28 \n\n- 第三方脚本区新增全球测速脚本，对应speedtest.cn的三网测速脚本\n- 修复部分服务器组件安装需要交互的问题\n\n2023.04.27 \n\n- 修复单项测试多下载了io测试文件的问题\n- 修复可能的非英文语言系统造成的部分信息识别失效的问题\n- 修复screen挂起时语言模块缺少en_utf8语言包显示乱码的问题\n\n2023.04.25 \n\n- 更新修复国内服务器测三网路由时下载出错的问题\n\n2023.04.24 \n\n- 检测国内外IP增加两个判断，避免在国内还继续测流媒体等无用信息\n- 修补使用CDN下载可能造成的重定向跟踪问题\n\n2023.04.15 \n\n使用[ecs-net](https://github.com/spiritLHLS/ecsspeed)自写测速脚本替代原有的脚本，修改：\n- 三网测速每个运营商选择本机ping值最低的两个节点测速，节点列表大概每7天自动更新一次\n- 支持国内服务器测试(有判断是否为国内机器)，在国内使用时使用CDN加速\n- 当官方CLI安装失败(如罕见的架构或者官方网站访问失败时)自动使用 speedtest-go 作为替代品测速\n- 同时修改了一个融合怪并发测试的版本，追求更短的测试时长，但前提要求是机器足够强劲\n\n2023.04.14 \n\n- 去除Python3的依赖，全套脚本只使用Shell语言\n- IPV4的检测使用多个数据来源，保证IP质量检测能正常运行，不仅限于ip.sb来源\n- 删除一个无效的IP数据库来源，去除jq组件和python组件的依赖，大幅度减少前期组件安装所需的时间\n\n2023.04.13 \n\n- 修复检测ARM时CPU识别不出来的BUG\n\n2023.04.12 \n\n- 修复如果测试有问题出现空测评的情况时会传空文件到pastebin的问题\n- 增加Geekbench6测试选项在对应分区\n\n2023.04.03 \n\n- 修复sjlleo的nf查询不支持ARM架构机器查询的问题，但考虑到sjlleo不再维护流媒体检测的脚本，考虑替换别的作者的脚本检测\n\n2023.04.02 \n\n- 修复脚本openai脚本测试超时的问题，使用自维护的脚本，第三方流媒体检测方面脚本加入本人优化版本的选项，运行完毕自动上传结果到pastebin并给出分享链接\n\n2023.03.30 \n\n- 脚本运行还没选择就进行了部分组件的安装的逻辑问题已解决，组件只在选择完毕后进行安装\n- 删除无效的ping0数据库，增加ip234数据库，优化了IP质量查询的函数减少了模块依赖，替换IP质量检测的V6检测平台，支持V6的地址进行检测\n- 升级sysbench由1.0.17到1.0.20版本\n\n2023.03.12 \n\n- 更新修复适配中文系统支持，解决部分命令查询结果为中文不适配\n- 更新了移动的测速节点ID\n\n2023.03.04 \n\n- 使用tmp文件优化缩减脚本执行时长，缩减了大概30秒执行时长\n\n2023.02.28 \n\n- 修复纯V6网络测试容易触发的某些错误\n\n2023.02.20 \n\n- 修复Fedora 23系统检测被redhat检测覆盖的问题\n- 修复debian/ubuntu低版本需要验证才能下载virt-what, jq等工具包的问题\n\n2023.02.11 \n\n- 新增OpenAI检测，已加入融合怪套餐，修复删除部分流媒体检测空行的显示节省空间\n\n2023.02.08 \n\n- 解决almalinux部分版本安装不上sysbench部件的问题(epel-release的编译安装新增almalinux的判断)\n\n2023.02.06 \n\n- 解决almalinux不自带unzip的问题\n\n2023.01.25 \n\n- IP质量检测重构输出，增加两个数据库来源\n\n2023.01.20 \n\n- 三网路由测试收纳 nexttrace 作为第三方脚本选项和原创区脚本选项\n\n2023.01.19 \n\n- 修复自定义IP路由测试的一些显示bug\n\n2023.01.17 \n\n- 硬件测试合集添加对应硬件测试脚本，修改部分链接使用原始链接。\n\n2023.01.16 \n\n- 隐藏部分错误显示，优化了输出。\n\n2023.01.15 \n\n- 更新tiktok的检测，替换失效的函数\n\n2023.01.14 \n\n- 新增成都三网回程路由测试选项，改进测速部分的显示去除乱码\n- 优化代码缩减了代码行数。\n\n2023.01.11 \n\n- 由于部分新服务器刚开机不自启动bbr，现脚本询问是否需要启动了bbr后再进行测试(前提是服务器自身已安装bbr但未启动，未安装则不询问，已启动也不询问)\n- 第三方脚本重新分区并整合为合集，相同类型脚本在同合集中，自行选择\n- 部分脚本描述细微更改\n\n2023.01.07 \n\n- 删除部分无效代码，三网回程路由优化使用ip.sb进行IP检测与ASN检测，再度优化缩减代码行数，merge了一个push以支持arch系统测试\n\n2023.01.06 \n\n- 修复IP质量检测的curl有的服务器会curl到V6去，而不是最基础的V4的bug，merge一个pull，脚本支持arch系统测试了\n\n2023.01.03 \n\n- 更改三网回程的环境文件下载方式，避免某些隐性bug\n\n2023.01.02 \n\n- 下载环境前预加载CDN加速轮询判断，如若无可用CDN才用原链接，解决国内服务器无法访问部分资源的问题，加速各种环境文件的下载，减少脚本环境准备时长。\n\n2023.01.01 \n\n- 修复脚本部分curl命令需要ssl验证的问题，已忽略校验\n- 修复脚本OVZ运行时执行内核缓存清除报错显示的问题\n- 修复python2版本不做IP质量检测以达到修复执行报错的问题\n- 修复如果未设置TCP拥堵控制算法时显示为空的问题。\n\n2022.12.28 \n\n- 修复查询TCP加速方式时可能遇到的sysctl的路径不存在或者异常的问题\n- 修复虚拟化架构只通过命令判断有可能失效导致查询结果为Dedicated的问题，增加检查系统文件的查询函数\n- 简化部分函数判断，缩减脚本行数\n\n2022.12.17 \n\n- 删除一个无效数据库来源，又套了cf的5秒盾了，啧\n\n2022.12.14 \n\n- 非致命性bug后续很长一段时间内不再更新本脚本，所有致命性bug已修复\n- 第三方脚本增加两个三网回程线路检测脚本\n- 原创区新增自定义IP的IP质量检测脚本\n- 融合怪的执行结果保存在```/root```下的test_result.txt中，运行完毕可用```cat test_result.txt```查看记录\n\n2022.12.13 \n\n- 流媒体检测部分远程调用最新脚本不再直接使用老脚本函数，检测准确度提升\n- 替换部分github的raw链接使用cf的cdn链接加速下载，融合怪脚本所需运行时长缩减\n\n2022.12.12 \n\n- 新增两个IP类型数据库，IP检测已包含三个数据库\n- 修复debian10系统apt源broken的问题，内置```apt --fix-broken install -y```\n- 修复centos8的源失效问题，自动替换新源下载```AppStream```\n- 新增支持Almalinux系统\n\n2022.12.11 \n\n- 不再使用ip.gs改用api.ipify.org进行IP识别\n\n2022.11.04 \n\n- 更新替换Tiktok检测脚本为superbench脚本，暂时移除端口检测\n- 第三方脚本增加Geekbench选项，修改部分分区描述\n\n2022.10.02 \n\n- 重新划分测试区域，含借鉴脚本的原始脚本选项和原创脚本选项，如果本脚本不好用，可以试试原始脚本\n\n2022.09.23 \n\n- 增加全国网络延迟测试，新增两个原始版本的三网测速的选项\n\n2022.08.31 \n\n- 增加三网路由延迟，Tiktok解锁测试提速\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2022 spiritLHLS\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.7373046875,
          "content": "# ecs\n\n[![Hits](https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2FspiritLHLS%2Fecs&count_bg=%2357DEFF&title_bg=%23000000&icon=cliqz.svg&icon_color=%23E7E7E7&title=hits&edge_flat=false)](https://www.spiritlhl.net/)\n\n## 语言\n\n[中文文档](README.md) | [English Docs](README_EN.md)\n\n## 前言\n\n**如果有本项目未列出的系统/架构，或本项目测试有BUG测不出来，或测试不想要魔改本机配置想要最小化环境变动的**\n\n**请尝试[https://github.com/oneclickvirt/ecs](https://github.com/oneclickvirt/ecs)进行测试**\n\n支持系统：\n\nUbuntu 18+, Debian 8+, Centos 7+, Fedora 33+, Almalinux 8.5+, OracleLinux 8+, RockyLinux 8+, AstraLinux CE, Arch\n\n半支持系统：\n\nFreeBSD(前提已执行```pkg install -y curl bash```)，Armbian\n\n支持架构：\n\namd64(x86_64)、arm64、i386、arm\n\n支持地域：\n\n能连得上网都支持\n\nPS: 考虑到多系统多架构的普遍测试的需求，融合怪的Shell版本不再做新功能开发，仅作维护，各项测试已重构为Golang版本([https://github.com/oneclickvirt/ecs](https://github.com/oneclickvirt/ecs))，预计年末完成整个项目的测试排障并正式发版。\n\n# 目录\n- [前言](#前言)\n- [目录](#目录)\n- [融合怪测评脚本](#融合怪测评脚本)\n  - [部分服务器运行测试有各类bug一键修复后再测试](#部分服务器运行测试有各类bug一键修复后再测试)\n  - [更新](#更新)\n  - [融合怪命令](#融合怪命令)\n    - [交互形式](#交互形式)\n    - [无交互形式-参数模式](#无交互形式-参数模式)\n  - [IP质量检测](#ip质量检测)\n  - [融合怪说明](#融合怪说明)\n  - [融合怪功能](#融合怪功能)\n- [友链](#友链)\n  - [测评频道](#测评频道)\n    - [https://t.me/vps\\_reviews](#httpstmevps_reviews)\n  - [自动更新测速服务器节点列表的网络基准测试脚本](#自动更新测速服务器节点列表的网络基准测试脚本)\n    - [https://github.com/spiritLHLS/ecsspeed](#httpsgithubcomspiritlhlsecsspeed)\n- [脚本概况](#脚本概况)\n- [Stargazers over time](#stargazers-over-time)\n- [致谢](#致谢)\n\n<a id=\"top\"></a>\n------\n<a id=\"artical_1\"></a>\n\n# 融合怪测评脚本\n\n## 部分服务器运行测试有各类bug一键修复后再测试\n\n一键修复各种系统原生bug的仓库：\n\nhttps://github.com/spiritLHLS/one-click-installation-script\n\n如若还有系统bug请到上面仓库的issues反馈，脚本原生BUG该仓库issues反馈\n\n## 更新\n\n2025.01.04\n\n- 优化确保IP质量检测的单项脚本，出现测试为空的情况自动重试\n- 分享链接的页面优化复制命令，三次不同的方法确保无论什么浏览器都能复制成功\n- 分享链接的页面增加其他相关项目/开发者/开发组织的跳转链接\n\n历史更新日志：[跳转](https://github.com/spiritLHLS/ecs/blob/main/CHANGELOG.md)\n\n**[返回顶部](https://github.com/spiritLHLS/ecs#top)**\n\n## 融合怪命令\n\n### 交互形式\n\n```bash\ncurl -L https://gitlab.com/spiritysdx/za/-/raw/main/ecs.sh -o ecs.sh && chmod +x ecs.sh && bash ecs.sh\n```\n\n或\n\n```bash\ncurl -L https://github.com/spiritLHLS/ecs/raw/main/ecs.sh -o ecs.sh && chmod +x ecs.sh && bash ecs.sh\n```\n\n或\n\n```\nbash <(wget -qO- bash.spiritlhl.net/ecs)\n```\n\n或\n\n```\nbash <(wget -qO- ecs.0s.hk)\n```\n\n或\n\n```\nbash <(wget -qO- ecs.12345.ing)\n```\n\n### 无交互形式-参数模式\n\n```bash\ncurl -L https://gitlab.com/spiritysdx/za/-/raw/main/ecs.sh -o ecs.sh && chmod +x ecs.sh && bash ecs.sh -m 1\n```\n\n或\n\n```bash\ncurl -L https://github.com/spiritLHLS/ecs/raw/main/ecs.sh -o ecs.sh && chmod +x ecs.sh && bash ecs.sh -m 1\n```\n\n或通过\n\n```\ncurl -L https://gitlab.com/spiritysdx/za/-/raw/main/ecs.sh -o ecs.sh && chmod +x ecs.sh\n```\n\n下载文件后使用类似\n\n```bash\nbash ecs.sh -m 1\n```\n\n这样的参数命令指定选项执行\n\n以下为参数说明：\n\n| 指令 | 项目 | 说明 | 备注 |\n| ---- | ---- | ----------- | ---- |\n| -m | 必填项 | 可指定原本menu中的对应选项，最多支持三层选择，例如执行```bash ecs.sh -m 5 1 1```将选择主菜单第5选项下的第1选项下的子选项1的脚本执行 | 可缺省仅指定一个参数，如```-m 1```仅指定执行融合怪完全体，执行```-m 1 0```以及```-m 1 0 0```都是指定执行融合怪完全体 |\n| -en | 可选项 | 可指定强制输出为英文 | 无该指令则默认使用中文输出 |\n| -i | 可选项 | 可指定回程路由测试中的目标IPV4地址 | 可通过```ip.sb```、```ipinfo.io```等网站获取本地IPV4地址后指定 |\n| -r | 可选项 | 可指定回程路由测试中的目标IPV4地址，可选```b``` ```g``` ```s``` ```c``` 分别对应```北京```、```广州```、```上海、```成都``` | 如```-r b```指定测试北京回程(三网) |\n|   |   | 可指定仅测试IPV6三网，可选 ```b6``` ```g6``` ```s6``` 分别对应 ```北京```、```广州```、```上海``` 的三网的IPV6地址 | 如```-r b6``` 指定测试北京IPV6地址回程(三网) |\n| -base | 可选项 | 可指定仅测试基础的系统信息 | 无该指令则默认按照menu选项的组合测试 |\n| -ctype | 可选项 | 可指定通过何种方式测试cpu，可选```gb4```、```gb5```、```gb6```分别对应```geekbench```的```4```、```5```、```6```版本 | 无该指令则默认使用```sysbench```测试 |\n| -dtype | 可选项 | 可指定测试硬盘IO的程序，可选```dd```、```fio```，前者测试快后者测试慢 | 无该指令则默认都使用进行测试 |\n| -mdisk | 可选项 | 可指定测试多个挂载盘的IO | 注意本指令包含测试系统盘 |\n| -stype | 可选项 | 可指定使用```.cn```还是```.net```的数据进行测速 | 无该指令则默认使用```.net```数据测速优先，不可用时才替换为```.cn```数据 |\n| -bansp | 可选项 | 可指定强制不测试网速 | 无该指令则默认测试网速 |\n| -banup | 可选项 | 可指定强制不生成分享链接 | 无该指令则默认生成分享链接 |\n\n## IP质量检测\n\n- IP质量检测，含15家数据库查询，含DNS黑名单查询\n- 含 ```IPV4``` 和 ```IPV6``` 检测，含ASN和地址查询\n- 含邮件端口检测\n\n```bash\nbash <(wget -qO- bash.spiritlhl.net/ecs-ipcheck)\n```\n\n或\n\n```bash\nbash <(wget -qO- --no-check-certificate https://raw.githubusercontent.com/spiritLHLS/ecs/main/ipcheck.sh)\n```\n\n或\n\n需要事先安裝```dos2unix```\n\n```bash\nwget -qO ipcheck.sh --no-check-certificate https://gitlab.com/spiritysdx/za/-/raw/main/ipcheck.sh\ndos2unix ipcheck.sh\nbash ipcheck.sh\n```\n\n## 融合怪说明\n\n融合怪脚本最好在 /root 路径下执行，避免各种奇奇怪怪的问题\n\n融合怪的执行结果保存在当前路径下的```test_result.txt```中，可在```screen```或```tmux```中执行，先退出SSH登录过一段时间后再查看文件\n\n**有时候想要测一些配置极其拉跨的机器时，上面这样执行这样可以避免IO或者CPU过于垃圾导致的测试过程中的SSH连接中断，就不会测一半啥都没了，假如screen中显示乱码，也没问题，分享链接中的结果是不带乱码的**\n\n融合怪的完整版和精简版运行完毕会自动上传结果到pastebin并回传分享链接，如果测一半想要退出，那么按```Ctrl+C```同时按下可终止测试，此时会自动退出删除残余文件\n\n最烂机器测试的例子(跑了47分钟一样测完)：[跳转](https://github.com/spiritLHLS/ecs/blob/main/lowpage/README.md)\n\n使用**CDN**已支持**国内**和**国外**加速服务器环境安装和预制文件下载，但国内受CDN连通性或国内机器带宽大小的限制加载可能会慢很多\n\n融合怪测试说明以及部分测试结果的内容解释(初次使用推荐查看)：\n<details>\n\n除了已标注的原创内容，其余所有分区均为借鉴并进行优化修改后的版本，与原始对应的脚本不一样\n\n所有检测都有考虑过使用并行测试，并在部分环节使用了该技术，比正常的顺序执行优化了2~3分钟，属于是独有的，暂无哪家的测试有同类技术\n\n系统基础信息测试融合了多家还有我自己修补的部分检测(systl、NAT类型检测，并发ASN检测等)，应该是目前最全面最通用的了\n\nCPU测试默认使用sysbench测试得分，不是yabs的gb4或gb5(虽然默认不是geekbench但可以通过指令指定geekbench常见版本进行测试)，前者只是简单的计算质数测试速度快，后者geekbench是综合测试系统算加权得分\n\n使用sysbench测试得分是每秒处理的事件数目，这个指标无论在强还是弱性能的服务器上都能迅速测出来，而geekbench很多是测不动或者速度很慢起码2分半钟\n\nCPU测试单核sysbench得分在5000以上的可以算第一梯队，4000到5000分算第二梯队，每1000分算一档，自己看看自己在哪个档位吧\n\nAMD的7950x单核满血性能得分在6500左右，AMD的5950x单核满血性能得分5700左右，Intel普通的CPU(E5之类的)在1000~800左右，低于500的单核CPU可以说是性能比较烂的了\n\nIO测试收录了两种，来源于lemonbench的dd磁盘测试和yabs的fio磁盘测试，综合来看会比较好，前者可能误差偏大但测试速度快无硬盘大小限制，后者真实一点但测试速度慢有硬盘以及内存大小限制\n\n流媒体测试收录了两种，一个是go编译的二进制文件和一个shell脚本版本，二者各有优劣，互相对比看即可\n\ntiktok测试有superbench和lmc999两种版本，哪个失效了随时可能更新为其中一种版本，以最新的脚本为准\n\n回程路由测试选用的GO编译的二进制版本和朋友PR的版本，本人做了优化适配多个IP列表以及融合部分查询\n\nIP质量检测纯原创，如有bug或者更多数据库来源可在issues中提出，日常看IP2Location数据库的IP类型即可，其中的25端口邮箱可达，则可搭建邮局\n\n融合怪的IP质量检测是简化过的，没有查询Cloudflare的威胁得分，个人原创区的IP质量检测才是完整版(或者仓库说明中列出的那个IP质量检测的命令也是完整版)\n\n三网测速使用自写的测速脚本，尽量使用最新节点最新组件进行测速，且有备用第三方go版本测速内核，做到自更新测速节点列表，自适应系统环境测速\n\n其他第三方脚本归纳到了第三方脚本区，里面有同类型脚本不同作者的各种竞品脚本，如果融合怪不能使你满意或者有错误，可以看看那部分\n\n原创脚本区是个人原创的部分，有事没事也可以看看，可能会更新某些偏门或者独到的脚本\n\nVPS测试，VPS测速，VPS综合性能测试，VPS回程线路测试，VPS流媒体测试等所有测试融合的脚本，本脚本能融合的都融合了\n\n</details>\n\n**[返回顶部](https://github.com/spiritLHLS/ecs#top)**\n\n## 融合怪功能\n\n- [x] 自由组合测试方向和单项测试以及合集收录第三方脚本，融合怪各项测试均自优化修复过，与原始脚本均不同\n- [x] 基础信息查询--感谢[bench.sh](https://github.com/teddysun/across/blob/master/bench.sh)、[superbench.sh](https://www.oldking.net/350.html)、[yabs](https://github.com/masonr/yet-another-bench-script)、[lemonbench](https://github.com/LemonBench/LemonBench)开源，本人整理修改优化，同原版均不一致\n- [x] CPU测试--感谢[lemonbench](https://github.com/LemonBench/LemonBench)和[yabs](https://github.com/masonr/yet-another-bench-script)开源，本人整理修改优化\n- [x] 内存测试--感谢[lemonbench](https://github.com/LemonBench/LemonBench)开源，本人整理修改优化\n- [x] 磁盘dd读写测试--感谢[lemonbench](https://github.com/LemonBench/LemonBench)开源，本人整理修改优化\n- [x] 硬盘fio读写测试--感谢[yabs](https://github.com/masonr/yet-another-bench-script)开源，本人整理修改优化\n- [x] 御三家流媒体解锁测试--感谢[netflix-verify](https://github.com/sjlleo/netflix-verify)、[VerifyDisneyPlus](https://github.com/sjlleo/VerifyDisneyPlus)、[TubeCheck](https://github.com/sjlleo/TubeCheck)开源，本人整理修改维护[CommonMediaTests](https://github.com/oneclickvirt/CommonMediaTests)使用\n- [x] 常用流媒体解锁测试--感谢[RegionRestrictionCheck](https://github.com/lmc999/RegionRestrictionCheck)开源，本人整理修改优化\n- [x] Tiktok解锁--感谢[TikTokCheck](https://github.com/lmc999/TikTokCheck)开源，本人整理修改优化\n- [x] 三网回程以及路由延迟--感谢[zhanghanyun/backtrace](https://github.com/zhanghanyun/backtrace)开源，本人整理修改维护[oneclickvirt/backtrace](https://github.com/oneclickvirt/backtrace)使用\n- [x] 回程路由及带宽类型检测(商宽/家宽/数据中心)--由[fscarmen](https://github.com/fscarmen)的PR以及本人的技术思路提供，本人修改优化维护\n- [x] IP质量(含IPV4和IPV6)与邮件端口检测--使用[oneclickvirt/securityCheck](https://github.com/oneclickvirt/securityCheck)和[oneclickvirt/portchecker](https://github.com/oneclickvirt/portchecker)进行测试，感谢互联网提供的查询资源\n- [x] speedtest测速--使用自写[ecsspeed](https://github.com/spiritLHLS/ecsspeed)仓库，自动更新测速服务器ID，一劳永逸解决老是要手动更新测速ID的问题\n\n# 友链\n\n## 测评频道\n\n### https://t.me/vps_reviews\n\n## 自动更新测速服务器节点列表的网络基准测试脚本\n\n### https://github.com/spiritLHLS/ecsspeed\n\n**[返回顶部](https://github.com/spiritLHLS/ecs#top)**\n\n# 脚本概况\n\n主界面：\n\n![图片](https://github.com/spiritLHLS/ecs/assets/103393591/051f1a83-ecd6-4713-af2f-c8b494e33c7f)\n\n选项1融合怪完全体(实际有高亮颜色显示，截图问题暂无显示，以实际运行结果为准)：\n\n![图片](https://github.com/spiritLHLS/ecs/assets/103393591/6dfab873-39fd-44ac-90e0-d3b82720fc04)\n![图片](https://github.com/spiritLHLS/ecs/assets/103393591/62b2d8e1-497d-4329-aa00-cd56f732f28a)\n![图片](https://github.com/spiritLHLS/ecs/assets/103393591/77b79eb9-1b2a-448b-bf83-0ecec8529515)\n![图片](https://github.com/spiritLHLS/ecs/assets/103393591/350c7323-39a5-4caf-8bf2-c3fde045fa64)\n![图片](https://github.com/spiritLHLS/ecs/assets/103393591/5cbaf73c-308e-4147-9a8c-638cfede3440)\n![图片](https://github.com/spiritLHLS/ecs/assets/103393591/903c0b19-b93c-4739-80f6-944992cb0640)\n![图片](https://github.com/spiritLHLS/ecs/assets/103393591/58bc4f72-415b-4b47-a98d-4329ab31fd3e)\n\n选项6原创区：\n\n![图片](https://github.com/spiritLHLS/ecs/assets/103393591/393db695-5c94-41a9-9b02-812ad9d64967)\n\n\n**[返回顶部](https://github.com/spiritLHLS/ecs#top)**\n\n# Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/spiritLHLS/ecs.svg)](https://starchart.cc/spiritLHLS/ecs)\n\n# 致谢\n\n感谢 [ipinfo.io](https://ipinfo.io) [ip.sb](https://ip.sb) [cheervision.co](https://cheervision.co) [ipip.net](https://en.ipip.net) [cip.cc](http://www.cip.cc) [scamalytics.com](https://scamalytics.com) [abuseipdb.com](https://www.abuseipdb.com/) [virustotal.com](https://www.virustotal.com/) [ip2location.com](ip2location.com/) [ip-api.com](https://ip-api.com) [ipregistry.co](https://ipregistry.co/) [ipdata.co](https://ipdata.co/) [ipgeolocation.io](https://ipgeolocation.io) [ipwhois.io](https://ipwhois.io) [ipapi.com](https://ipapi.com/) [ipapi.is](https://ipapi.is/) ~~[abstractapi.com](https://abstractapi.com/)~~ [ipqualityscore.com](https://www.ipqualityscore.com/) [bigdatacloud.com](https://www.bigdatacloud.com/) 等网站提供的API进行检测，感谢互联网各网站提供的查询资源\n\n感谢所有开源项目提供的原始测试脚本\n\n感谢\n\n<a href=\"https://h501.io/?from=69\" target=\"_blank\">\n  <img src=\"https://github.com/spiritLHLS/ecs/assets/103393591/dfd47230-2747-4112-be69-b5636b34f07f\" alt=\"h501\">\n</a>\n\n提供的免费托管支持本开源项目\n\n同时感谢以下平台提供编辑和测试支持\n\n![PyCharm logo](https://resources.jetbrains.com/storage/products/company/brand/logos/PyCharm.png)\n\n**[返回顶部](https://github.com/spiritLHLS/ecs#top)**\n"
        },
        {
          "name": "README_EN.md",
          "type": "blob",
          "size": 15.6435546875,
          "content": "# ecs\n\n[![Hits](https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2FspiritLHLS%2Fecs&count_bg=%2357DEFF&title_bg=%23000000&icon=cliqz.svg&icon_color=%23E7E7E7&title=hits&edge_flat=false)](https://www.spiritlhl.net/)\n\n## Language\n\n[中文文档](README.md) | [English Docs](README_EN.md)\n\n## Foreword\n\n**If there is a system/architecture that is not listed in this project, or if there is a bug that cannot be detected in this project's tests, or if the tests do not want to magically change the local configuration and want to minimize environmental changes**\n\n**Please try [https://github.com/oneclickvirt/ecs](https://github.com/oneclickvirt/ecs/blob/master/README_EN.md) for testing**\n\nSupport system:\n\nUbuntu 18+, Debian 8+, Centos 7+, Fedora 33+, Almalinux 8.5+, OracleLinux 8+, RockyLinux 8+, AstraLinux CE, Arch\n\nSemi-support system:\n\nFreeBSD(Prerequisites implemented```pkg install -y curl bash```)，Armbian\n\nSupport Architecture:\n\namd64(x86_64)、arm64、i386、arm\n\nSupport geography:\n\nAnywhere you can connect to the Internet\n\nPS: Considering the demand of universal testing for multi-system and multi-architecture, the Shell version of Fusion Monster is no longer for new feature development, only for maintenance, and the tests have been refactored to Golang version ([https://github.com/oneclickvirt/ecs](https://github.com/oneclickvirt/ecs/blob/master/README_EN.md)), is expected to complete the entire project at the end of the year test troubleshooting and formal release.\n\n# Menu\n- [Foreword](#Foreword)\n- [Menu](#Menu)\n- [VPS_Fusion_Monster_Server_Test_Script](#VPS_Fusion_Monster_Server_Test_Script)\n  - [Fusion_Monster_command](#Fusion_Monster_command)\n    - [Forms_of_interaction](#Forms_of_interaction)\n    - [Forms_of_No-interaction](#Forms_of_No-interaction)\n  - [IP_Quality_Inspection](#IP_Quality_Inspection)\n  - [Fusion_Monster_Description](#Fusion_Monster_Description)\n  - [Fusion_Monster_Function](#Fusion_Monster_Function)\n- [Friendly_link](#Friendly_link)\n  - [Review_Channel](#Review_Channel)\n    - [https://t.me/vps\\_reviews](#httpstmevps_reviews)\n- [Stargazers_over_time](#Stargazers_over_time)\n- [Thanks](#Thanks)\n\n<a id=\"top\"></a>\n------\n<a id=\"artical_1\"></a>\n\n# VPS_Fusion_Monster_Server_Test_Script\n\n## Fusion_Monster_command\n\n### Forms_of_interaction\n\n```bash\ncurl -L https://gitlab.com/spiritysdx/za/-/raw/main/ecs.sh -o ecs.sh && chmod +x ecs.sh && bash ecs.sh -en\n```\n\nOR\n\n```bash\ncurl -L https://github.com/spiritLHLS/ecs/raw/main/ecs.sh -o ecs.sh && chmod +x ecs.sh && bash ecs.sh -en\n```\n\nOR\n\n```\nbash <(wget -qO- bash.spiritlhl.net/ecs) -en\n```\n\n### Forms_of_No-interaction\n\n```bash\ncurl -L https://gitlab.com/spiritysdx/za/-/raw/main/ecs.sh -o ecs.sh && chmod +x ecs.sh && bash ecs.sh -en -m 1\n```\n\nOR\n\n```bash\ncurl -L https://github.com/spiritLHLS/ecs/raw/main/ecs.sh -o ecs.sh && chmod +x ecs.sh && bash ecs.sh -en -m 1\n```\n\nOR\n\n```\ncurl -L https://gitlab.com/spiritysdx/za/-/raw/main/ecs.sh -o ecs.sh && chmod +x ecs.sh\n```\n\nDownload the script file and use something like\n\n```bash\nbash ecs.sh -en -m 1\n```\n\nSuch a parameterized command specifies the option to execute\n\nThe following is a description of the parameters:\n\n| Command | Item | Description | Remarks |\n| ---- | ---- | ----------- | ---- |\n| -m | Mandatory | Specify the corresponding option in the original menu, supports up to three levels of selection, e.g. executing ```bash ecs.sh -m 5 1 1``` will select the script to execute under sub-option 1 of option 1 of option 5 in the main menu | Specify only one parameter by default, e.g. executing ``` -m 1``` will only specify to execute the fusion monsters' complete body, executing ```-m 1 0``` and ```-m 1 0 0``` will both specify to execute the fusion monsters' complete body. and ``` -m 1 0 0``` both specify execution of the full fusion monster |\n| -en | Optional | Forces output to English | Without this command, Chinese output is used by default |\n| -i | Optional | Specifies the target IPV4 address for the backhaul routing test | Specify the local IPV4 address after obtaining it from ```ip.sb```, ```ipinfo.io```, etc. |\n| -base | Optional | Specifies that only the base system information is tested | Without this command, the default is to test according to the combination of menu options |\n| -ctype | optional | Specifies the method to test the cpu, options are ```gb4```, ```gb5```, ```gb6``` corresponding to geeksbench version 4, 5, 6 respectively | Without this command, the default is to use sysbench |\n| -dtype | Optional | Specifies the program to test the IO of the hard disk, options are ```dd```, ```fio```, the former is faster and the latter is slower | Without this command, the default is to use all tests |\n| -mdisk | Optional | Specify to test the IO of multiple mounted disks | Note that this command includes testing the system disk | -stype | -mdisk | Optional | Specifies to test the IO of multiple mounted disks.\n| -bansp | Optional | Specify to force no speed test | Without this command, the default is to test speed | -banup | Optional | Specify to force no speed test | Without this command, the default is to test speed | -banup | Optional | Specify to force no speed test | Without this command, the default is to test speed\n| -banup | Optional | Specify to force no sharing links to be generated | Without this command, sharing links will be generated by default | -banup | Optional | Specify to force no sharing links to be generated | Without this command, sharing links will be generated by default\n\n## IP_Quality_Inspection\n\n- IP quality inspection with multiple database lookups and blacklist lookups\n- With ``IPV4`` and ``IPV6`` inspection, including ASN and address lookups.\n\n```bash\nbash <(wget -qO- bash.spiritlhl.net/ecs-ipcheck)\n```\n\nOR\n\n```bash\nbash <(wget -qO- --no-check-certificate https://raw.githubusercontent.com/spiritLHLS/ecs/main/ipcheck.sh)\n```\n\nOR\n\nPre-installation is required ```dos2unxi```\n\n```bash\nwget -qO ipcheck.sh --no-check-certificate https://gitlab.com/spiritysdx/za/-/raw/main/ipcheck.sh\ndos2unix ipcheck.sh\nbash ipcheck.sh\n```\n\n## Fusion_Monster_Description\n\nThe fusion monster script is best executed under the /root path to avoid all sorts of weird problems\n\nThe result of the fusion monster is saved in ```test_result.txt``` under the current path, which can be executed in ```screen``` or ```tmux```, first log out of SSH and log in for a period of time before checking the file.\n\n**Sometimes want to test some of the configuration of the machine is extremely pull across the above so that the implementation of this can be avoided IO or CPU is too much garbage caused by the test process of the SSH connection interruption, will not test half of the nothing, if the screen in the display of the garbled, but also no problem, to share the link in the results are not garbled**\n\nThe full version and lite version of Fusion Monster will automatically upload the results to pastebin and send back the sharing link when finished, if you want to quit halfway through the test, then press ```Ctrl+C``` at the same time to terminate the test, and then it will automatically quit and delete the remaining files.\n\nUse **CDN** to accelerate the server environment installation and prefabricated file downloads\n\nExplanation of Fusion Monster test and content explanation of some test results (recommended view for first time users):\n<details>\n\nIn addition to the original content has been marked, all the remaining partitions are borrowed and optimized and modified version, not the same as the original corresponding scripts\n\nAll tests have considered the use of parallel testing, and in some parts of the use of the technology, optimized than the normal sequential execution of 2 ~ 3 minutes, belong to the unique, no test has the same kind of technology for the time being\n\nThe system basic information test incorporates a number of other part of my own patch test (systl, NAT type detection, concurrent ASN detection, etc.), it should be the most comprehensive and most common at present\n\nCPU test default use sysbench test score, not yabs gb4 or gb5 (although the default is not gekbench but you can specify the common version of gekbench through the command to test), the former is just a simple calculation of the number of primes to test the speed of the fast, the latter gekbench is a comprehensive test system to count the weighted score!\n\nThe use of sysbench test score is the number of events processed per second, this indicator whether in the strong or weak performance of the server can be quickly measured, while many of the geekbench is not measured or very slow at least 2 minutes and a half\n\nCPU test single-core sysbench score of more than 5000 can be counted in the first tier, 4000 to 5000 points counted in the second tier, every 1000 points counted in a class, see for yourself in which class it!\n\nAMD's 7950x single-core full-blooded performance score of 6500 or so, AMD's 5950x single-core full-blooded performance score of 5700 or so, Intel's ordinary CPU (E5 and so on) in the 1000 ~ 800 or so, less than 500 single-core CPU can be said to be the performance of the more rotten!\n\nIO test included two kinds, from lemonbench's dd disk test and yabs's fio disk test, a comprehensive view will be better, the former may be biased error but the test speed is fast without hard disk size limitations, the latter a little more realistic but the test speed is slow with hard disk as well as memory size limitations\n\nStreaming media test included two kinds, a go compiled binaries and a shell script version, both have their own advantages and disadvantages, compared with each other to see it\n\nThe tiktok test has two versions, superbench and lmc999, which is invalid at any time may be updated to one of the versions, to the latest script shall prevail\n\nBackhaul routing test selected GO compiled binary version and friends PR version, I did optimization to adapt to multiple IP lists and integration of some of the queries\n\nIP quality testing is purely original, if there are bugs or more database sources can be raised in the issues, the daily look at the IP2Location database IP type can be, which can be reached by the mailbox on port 25, you can build the post office\n\nFusion Monster's IP Quality Check is simplified and doesn't query Cloudflare's Threat Score, the IP Quality Check in the Personal Originals section is the full version (or the command listed in the repository description for that IP Quality Check is also the full version).\n\nSpeed test using self-written speed test script, try to use the latest nodes and the latest components for speed test, and there is a spare third-party go version of the speed test kernel, so as to self-update the speed test node list, adaptive system environment speed test.\n\nOther third-party scripts are summarized in the third-party script area, which has the same type of scripts by different authors of a variety of competing scripts, if the fusion of blame can not make you satisfied or there is an error, you can look at that part!\n\nOriginal script area is a personal original part, something can also look at, may update some off the beaten path or unique scripts.\n\nVPS test, VPS speed test, VPS comprehensive performance test, VPS backhaul line test, VPS streaming test and all the test fusion script, this script can be fusion of all fusion.\n\n</details>\n\n**[Back to top](https://github.com/spiritLHLS/ecs/blob/main/README_EN.md#top)**\n\n## Fusion_Monster_Function\n\n- [x] Free combination of test direction and individual tests and collection of third-party scripts, Fusion Monster tests are self-optimized and repaired, and are different from the original scripts.\n- [x] Basic information query - thanks to [bench.sh](https://github.com/teddysun/across/blob/master/bench.sh), [superbench.sh](https://www.oldking.net/350.html ), [yabs](https://github.com/masonr/yet-another-bench-script), [lemonbench](https://github.com/LemonBench/LemonBench) open source, I organize the modification and optimization, with the original version of are not consistent\n- [x] CPU test - thanks to [lemonbench](https://github.com/LemonBench/LemonBench) and [yabs](https://github.com/masonr/yet-another-bench-script) open source. I organize, modify and optimize\n- [x] Memory test - thanks to [lemonbench](https://github.com/LemonBench/LemonBench) open source, I organize the modification optimization\n- [x] disk dd read/write test - thanks to [lemonbench](https://github.com/LemonBench/LemonBench) open source, I organize the modified optimization!\n- [x] Hard disk fio read and write test - thanks to [yabs](https://github.com/masonr/yet-another-bench-script) open source, I organize the modified optimization\n- [x] Mikado streaming unlock test - thanks to [sjlleo's binary file](https://github.com/sjlleo?tab=repositories), I modify the finishing optimized\n- [x] Streaming media unlocking test - thanks to [RegionRestrictionCheck](https://github.com/lmc999/RegionRestrictionCheck) open source, I organize, modify and optimize the\n- [x] Tiktok unlock - Thanks to [TikTokCheck](https://github.com/lmc999/TikTokCheck) open source, I organize modified to optimize the\n- [x] Backhaul routing and bandwidth type detection (business wide/home wide/data center) - by [fscarmen](https://github.com/fscarmen) PR as well as my technical ideas to provide, I modify the optimization maintenance\n- [x] IP quality and port 25 detection (including IPV4 and IPV6) - this script is original, thanks to the Internet to provide the query resources\n- [x] speedtest speed test - use self-writing [ecsspeed](https://github.com/spiritLHLS/ecsspeed) warehouse, automatically update the speed test server ID, once and for all to solve the problem of always have to manually update the speed test ID!\n\n# Friendly_link\n\n## Review_Channel\n\n### https://t.me/vps_reviews\n\n**[Back to top](https://github.com/spiritLHLS/ecs/blob/main/README_EN.md#top)**\n\n# Screenshot\n\n![图片](https://github.com/spiritLHLS/ecs/assets/103393591/0acecaea-8cbc-43a0-9262-e2fa157fb8e9)\n\n![图片](https://github.com/spiritLHLS/ecs/assets/103393591/d25713e1-eeb0-48c0-9d6f-6ac1a0f6b6df)\n\n![图片](https://github.com/spiritLHLS/ecs/assets/103393591/1b578739-4809-4ab0-8187-b860a502c8d9)\n\n![图片](https://github.com/spiritLHLS/ecs/assets/103393591/010d4e5d-561e-4aa3-8313-e592f29405d1)\n\n![图片](https://github.com/spiritLHLS/ecs/assets/103393591/bfe775ad-323c-4f6e-8d81-fcf787644653)\n\n# Stargazers_over_time\n\n[![Stargazers over time](https://starchart.cc/spiritLHLS/ecs.svg)](https://starchart.cc/spiritLHLS/ecs)\n\n# Thanks\n\nThanks [ipinfo.io](https://ipinfo.io) [ip.sb](https://ip.sb) [cheervision.co](https://cheervision.co) [ipip.net](https://en.ipip.net) [cip.cc](http://www.cip.cc) [scamalytics.com](https://scamalytics.com) [abuseipdb.com](https://www.abuseipdb.com/) [virustotal.com](https://www.virustotal.com/) [ip2location.com](ip2location.com/) [ip-api.com](https://ip-api.com) [ipregistry.co](https://ipregistry.co/) [ipdata.co](https://ipdata.co/) [ipgeolocation.io](https://ipgeolocation.io) [ipwhois.io](https://ipwhois.io) [ipapi.com](https://ipapi.com/) [ipapi.is](https://ipapi.is/) ~~[abstractapi.com](https://abstractapi.com/)~~ [ipqualityscore.com](https://www.ipqualityscore.com/) [bigdatacloud.com](https://www.bigdatacloud.com/) and so on. They provide APIs for testing, thanks to the query resources provided by various sites on the Internet.\n\nThanks to all the open source projects for providing the original test scripts.\n\nThanks\n\n<a href=\"https://h501.io/?from=69\" target=\"_blank\">\n  <img src=\"https://github.com/spiritLHLS/ecs/assets/103393591/dfd47230-2747-4112-be69-b5636b34f07f\" alt=\"h501\">\n</a>\n\nprovided  hosting to support this open source project.\n\nThanks also to the following platforms for editorial and testing support.\n\n![PyCharm logo](https://resources.jetbrains.com/storage/products/company/brand/logos/PyCharm.png)\n\n**[Back to top](https://github.com/spiritLHLS/ecs/blob/main/README_EN.md#top)**\n"
        },
        {
          "name": "archive",
          "type": "tree",
          "content": null
        },
        {
          "name": "back",
          "type": "tree",
          "content": null
        },
        {
          "name": "customizeqzcheck.sh",
          "type": "blob",
          "size": 9.2705078125,
          "content": "#!/usr/bin/env bash\n#by spiritlhl\n#from https://github.com/spiritLHLS/ecs\n\nver=\"2023.06.27\"\nchangeLog=\"IP质量测试，由频道 https://t.me/vps_reviews 原创\"\n\nred() {\n    echo -e \"\\033[31m\\033[01m$1\\033[0m\"\n}\n\ngreen() {\n    echo -e \"\\033[32m\\033[01m$1\\033[0m\"\n}\n\nyellow() {\n    echo -e \"\\033[33m\\033[01m$1\\033[0m\"\n}\nreading() { read -rp \"$(green \"$1\")\" \"$2\"; }\nREGEX=(\"debian\" \"ubuntu\" \"centos|red hat|kernel|oracle linux|alma|rocky\" \"'amazon linux'\" \"alpine\")\nRELEASE=(\"Debian\" \"Ubuntu\" \"CentOS\" \"CentOS\" \"Alpine\")\nPACKAGE_UPDATE=(\"apt -y update\" \"apt -y update\" \"yum -y update\" \"yum -y update\" \"apk update -f\")\nPACKAGE_INSTALL=(\"apt -y install\" \"apt -y install\" \"yum -y install\" \"yum -y install\" \"apk add -f\")\nCMD=(\"$(grep -i pretty_name /etc/os-release 2>/dev/null | cut -d \\\" -f2)\" \"$(hostnamectl 2>/dev/null | grep -i system | cut -d : -f2)\" \"$(lsb_release -sd 2>/dev/null)\" \"$(grep -i description /etc/lsb-release 2>/dev/null | cut -d \\\" -f2)\" \"$(grep . /etc/redhat-release 2>/dev/null)\" \"$(grep . /etc/issue 2>/dev/null | cut -d \\\\ -f1 | sed '/^[ ]*$/d')\")\nutf8_locale=$(locale -a 2>/dev/null | grep -i -m 1 -E \"UTF-8|utf8\")\nif [[ -z \"$utf8_locale\" ]]; then\n    echo \"No UTF-8 locale found\"\nelse\n    export LC_ALL=\"$utf8_locale\"\n    export LANG=\"$utf8_locale\"\n    export LANGUAGE=\"$utf8_locale\"\n    echo \"Locale set to $utf8_locale\"\nfi\nfor i in \"${CMD[@]}\"; do\n    SYS=\"$i\" && [[ -n $SYS ]] && break\ndone\n\nfor ((int = 0; int < ${#REGEX[@]}; int++)); do\n    if [[ $(echo \"$SYS\" | tr '[:upper:]' '[:lower:]') =~ ${REGEX[int]} ]]; then\n        SYSTEM=\"${RELEASE[int]}\" && [[ -n $SYSTEM ]] && break\n    fi\ndone\n\ntrap _exit INT QUIT TERM\n\n_red() { echo -e \"\\033[31m\\033[01m$@\\033[0m\"; }\n\n_green() { echo -e \"\\033[32m\\033[01m$@\\033[0m\"; }\n\n_yellow() { echo -e \"\\033[33m\\033[01m$@\\033[0m\"; }\n\n_blue() { echo -e \"\\033[36m\\033[01m$@\\033[0m\"; }\n\n_exists() {\n    local cmd=\"$1\"\n    if eval type type >/dev/null 2>&1; then\n        eval type \"$cmd\" >/dev/null 2>&1\n    elif command >/dev/null 2>&1; then\n        command -v \"$cmd\" >/dev/null 2>&1\n    else\n        which \"$cmd\" >/dev/null 2>&1\n    fi\n    local rt=$?\n    return ${rt}\n}\n\n_exit() {\n    _red \"\\n检测到退出操作，脚本终止！\\n\"\n    # clean up\n    rm -fr benchtest_*\n    exit 1\n}\n\ncheckroot() {\n    [[ $EUID -ne 0 ]] && echo -e \"${RED}请使用 root 用户运行本脚本！${PLAIN}\" && exit 1\n}\n\ncheckupdate() {\n    echo \"正在更新包管理源\"\n    if [ \"${release}\" == \"centos\" ]; then\n        yum update >/dev/null 2>&1\n    else\n        apt-get update >/dev/null 2>&1\n    fi\n\n}\n\ncheckupdate() {\n    echo \"正在更新包管理源\"\n    if [ \"${release}\" == \"centos\" ]; then\n        yum update >/dev/null 2>&1\n        yum install dos2unix -y\n    else\n        apt-get update >/dev/null 2>&1\n        apt install dos2unix -y\n    fi\n\n}\n\ncheckdnsutils() {\n    if [ ! -e '/usr/bin/dnsutils' ]; then\n        echo \"正在安装 dnsutils\"\n        if [ \"${release}\" == \"centos\" ]; then\n            # \t                    yum update > /dev/null 2>&1\n            yum -y install dnsutils >/dev/null 2>&1\n        else\n            # \t                    apt-get update > /dev/null 2>&1\n            apt-get -y install dnsutils >/dev/null 2>&1\n        fi\n\n    fi\n}\n\ncheckcurl() {\n    if [ ! -e '/usr/bin/curl' ]; then\n        echo \"正在安装 Curl\"\n        if [ \"${release}\" == \"centos\" ]; then\n            # \t                yum update > /dev/null 2>&1\n            yum -y install curl >/dev/null 2>&1\n        else\n            # \t                apt-get update > /dev/null 2>&1\n            apt-get -y install curl >/dev/null 2>&1\n        fi\n    fi\n}\n\ncheckwget() {\n    if [ ! -e '/usr/bin/wget' ]; then\n        echo \"正在安装 Wget\"\n        if [ \"${release}\" == \"centos\" ]; then\n            # \t                yum update > /dev/null 2>&1\n            yum -y install wget >/dev/null 2>&1\n        else\n            # \t                apt-get update > /dev/null 2>&1\n            apt-get -y install wget >/dev/null 2>&1\n        fi\n    fi\n}\n\nnext() {\n    printf \"%-70s\\n\" \"-\" | sed 's/\\s/-/g'\n}\n\nprint_end_time() {\n    end_time=$(date +%s)\n    time=$((${end_time} - ${start_time}))\n    if [ ${time} -gt 60 ]; then\n        min=$(expr $time / 60)\n        sec=$(expr $time % 60)\n        echo \" 总共花费        : ${min} 分 ${sec} 秒\"\n    else\n        echo \" 总共花费        : ${time} 秒\"\n    fi\n    date_time=$(date +%Y-%m-%d\" \"%H:%M:%S)\n    echo \" 时间          : $date_time\"\n}\n\nhead='key: '\n\ntranslate_status() {\n    if [[ \"$1\" == \"false\" ]]; then\n        echo \"No\"\n    elif [[ \"$1\" == \"true\" ]]; then\n        echo \"Yes\"\n    else\n        echo \"未知\"\n    fi\n}\n\nscamalytics() {\n    ip=\"$1\"\n    context=$(curl -sL -H \"$head\" -m 10 \"https://scamalytics.com/ip/$ip\")\n    if [[ \"$?\" -ne 0 ]]; then\n        return\n    fi\n    temp1=$(echo \"$context\" | grep -oP '(?<=>Fraud Score: )[^<]+')\n    if [ -n \"$temp1\" ]; then\n        echo \"scamalytics数据库:\"\n        echo \"  欺诈分数(越低越好)：$temp1\"\n    else\n        return\n    fi\n    temp2=$(echo \"$context\" | grep -oP '(?<=<div).*?(?=</div>)' | tail -n 6)\n    nlist=(\"匿名代理\" \"Tor出口节点\" \"服务器IP\" \"公共代理\" \"网络代理\" \"搜索引擎机器人\")\n    for element in $temp2; do\n        if echo \"$element\" | grep -q \"score\" >/dev/null 2>&1; then\n            status_t2=1\n            break\n        else\n            status_t2=2\n            break\n        fi\n    done\n    i=0\n    if ! [ \"$status_t2\" -eq 1 ]; then\n        while read -r temp3; do\n            if [[ -n \"$temp3\" ]]; then\n                echo \"  ${nlist[$i]}: ${temp3#*>}\"\n                i=$((i + 1))\n            fi\n        done <<<\"$(echo \"$temp2\" | sed 's/<[^>]*>//g' | sed 's/^[[:blank:]]*//g')\"\n    fi\n}\n\nvirustotal() {\n    local ip=\"$1\"\n    local api_keys=()\n    local api_key=${api_keys[$RANDOM % ${#api_keys[@]}]}\n    local output=$(curl -s --request GET --url \"https://www.virustotal.com/api/v3/ip_addresses/$ip\" --header \"x-apikey:$api_key\")\n    local result=$(echo \"$output\" | awk -F\"[,:}]\" '{\n        for(i=1;i<=NF;i++){\n            if($i~/\\042timeout\\042/){\n                exit\n            } else if($i~/\\042harmless\\042/){\n                print \"  无害记录：\" $(i+1)\n            } else if($i~/\\042malicious\\042/){\n                print \"  恶意记录：\" $(i+1)\n            } else if($i~/\\042suspicious\\042/){\n                print \"  可疑记录：\" $(i+1)\n            } else if($i~/\\042undetected\\042/){\n                print \"  未检测到记录：\" $(i+1)\n            }\n        }\n    }' | sed 's/\\\"//g')\n    if [[ -n \"$result\" ]] && [[ -n \"$(echo \"$result\" | awk 'NF')\" ]]; then\n        echo \"黑名单记录统计:(有多少黑名单网站有记录)\"\n        echo \"$result\"\n    fi\n}\n\nabuse() {\n    ip=\"$1\"\n    context2=$(curl -sL -H \"$head\" -m 10 \"https://api.abuseipdb.com/api/v2/check?ipAddress=${ip}\")\n    if [[ \"$context2\" == *\"abuseConfidenceScore\"* ]]; then\n        score=$(echo \"$context2\" | grep -o '\"abuseConfidenceScore\":[^,}]*' | sed 's/.*://')\n        echo \"abuseipdb数据库-abuse得分：$score\"\n        echo \"IP类型:\"\n        usageType=$(grep -oP '\"usageType\":\\s*\"\\K[^\"]+' <<<\"$context2\" | sed 's/\\\\\\//\\//g')\n        if [ -z \"$usageType\" ]; then\n            usageType=\"Unknown (Maybe Fixed Line ISP)\"\n        fi\n        echo \"  IP2Location数据库: $usageType\"\n    fi\n}\n\nipapi() {\n    ip=$1\n    context4=$(curl -sL -m 10 \"http://ip-api.com/json/$ip?fields=mobile,proxy,hosting\")\n    if [[ \"$context4\" == *\"mobile\"* ]]; then\n        echo \"ip-api数据库:\"\n        mobile=$(echo \"$context4\" | grep -o '\"mobile\":[^,}]*' | sed 's/.*://;s/\"//g')\n        tp1=$(translate_status ${mobile})\n        echo \"  手机流量: $tp1\"\n        proxy=$(echo \"$context4\" | grep -o '\"proxy\":[^,}]*' | sed 's/.*://;s/\"//g')\n        tp2=$(translate_status ${proxy})\n        echo \"  代理服务: $tp2\"\n        hosting=$(echo \"$context4\" | grep -o '\"hosting\":[^,}]*' | sed 's/.*://;s/\"//g')\n        tp3=$(translate_status ${hosting})\n        echo \"  数据中心: $tp3\"\n    fi\n}\n\nip234() {\n    local ip=\"$1\"\n    context5=$(curl -sL -m 10 \"http://ip234.in/fraud_check?ip=$ip\")\n    if [[ \"$?\" -ne 0 ]]; then\n        return\n    fi\n    risk=$(grep -oP '(?<=\"score\":)[^,}]+' <<<\"$context5\")\n    if [[ -n \"$risk\" ]]; then\n        echo \"ip234数据库：\"\n        echo \"  欺诈分数(越低越好)：$risk\"\n    else\n        return\n    fi\n}\n\ngoogle() {\n    curl_result=$(curl -sL \"https://www.google.com/search?q=www.spiritysdx.top\" -H \"User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0\")\n    if echo \"$curl_result\" | grep -q \"二叉树的博客\"; then\n        echo \"Google搜索可行性：YES\"\n    else\n        echo \"Google搜索可行性：NO\"\n    fi\n}\n\nmain() {\n    reading \"\\n 请输入需要查询的 IP: \" ip4\n    yellow \"\\n 检测中，请稍等片刻。\\n\"\n    echo \"-----------------欺诈分数以及IP质量检测--本频道独创-------------------\"\n    echo \"                   测评频道: https://t.me/vps_reviews                    \"\n    next\n    yellow \"数据仅作参考，不代表100%准确，IP类型如果不一致请手动查询多个数据库比对\"\n    scamalytics \"$ip4\"\n    virustotal \"$ip4\"\n    ip234 \"$ip4\"\n    ipapi \"$ip4\"\n    abuse \"$ip4\"\n    next\n}\n\ncheckupdate\ncheckroot\ncheckwget\ncheckcurl\n! _exists \"wget\" && _red \"Error: wget command not found.\\n\" && exit 1\n! _exists \"free\" && _red \"Error: free command not found.\\n\" && exit 1\nclear\nstart_time=$(date +%s)\nmain\nprint_end_time\nnext\nrm -rf wget-log*\n"
        },
        {
          "name": "ecs.sh",
          "type": "blob",
          "size": 213.0537109375,
          "content": "#!/usr/bin/env bash\n# by spiritlhl\n# from https://github.com/spiritLHLS/ecs\n\ncd /root >/dev/null 2>&1\nmyvar=$(pwd)\nver=\"2025.01.02\"\n\n# =============== 默认输入设置 ===============\nRED=\"\\033[31m\"\nGREEN=\"\\033[32m\"\nYELLOW=\"\\033[33m\"\nPLAIN=\"\\033[0m\"\nSAVE_CURSOR=\"\\033[s\"\nRESTORE_CURSOR=\"\\033[u\"\nHIDE_CURSOR=\"\\033[?25l\"\nSHOW_CURSOR=\"\\033[?25h\"\n_red() { echo -e \"\\033[31m\\033[01m$@\\033[0m\"; }\n_green() { echo -e \"\\033[32m\\033[01m$@\\033[0m\"; }\n_yellow() { echo -e \"\\033[33m\\033[01m$@\\033[0m\"; }\n_blue() { echo -e \"\\033[36m\\033[01m$@\\033[0m\"; }\nreading() { read -rp \"$(_green \"$1\")\" \"$2\"; }\nutf8_locale=$(locale -a 2>/dev/null | grep -i -m 1 -E \"UTF-8|utf8\")\nif [[ -z \"$utf8_locale\" ]]; then\n    _yellow \"No UTF-8 locale found\"\nelse\n    export LC_ALL=\"$utf8_locale\"\n    export LANG=\"$utf8_locale\"\n    export LANGUAGE=\"$utf8_locale\"\n    _green \"Locale set to $utf8_locale\"\nfi\nmenu_mode=true\nen_status=false\nswhc_mode=true\ntest_base_status=false\ntest_cpu_type=\"\"\ntest_disk_type=\"\"\ntest_network_type=\"\"\nbuild_text_status=true\nmultidisk_status=false\ntarget_ipv4=\"\"\nroute_location=\"\"\nenable_speedtest=true\nmain_menu_option=0\nsub_menu_option=0\nsub_of_sub_menu_option=0\nbreak_status=true\nm_params=()\n# 解析命令行选项\nwhile [ \"$#\" -gt 0 ]; do\n    case \"$1\" in\n    -m)\n        # 处理 -m 选项，关闭菜单模式\n        menu_mode=false\n        shift # 移动到下一个参数\n        while [ \"$#\" -gt 0 ] && [[ \"$1\" != -* ]]; do\n            m_params+=(\"$1\")\n            shift\n        done\n        ;;\n    -i)\n        # 处理 -i 选项，获取IPv4地址\n        target_ipv4=\"$2\"\n        swhc_mode=false\n        shift 2\n        ;;\n    -r)\n        # 处理 -r 选项，选择测试回程路由的目标地址 (三网)\n        route_location=\"$2\"\n        shift 2\n        ;;\n    -en)\n        # 处理 -en 选项，选择使用英文显示\n        en_status=true\n        shift\n        ;;\n    -base)\n        # 处理 -base 选项，选择仅测试系统信息\n        menu_mode=false\n        test_base_status=true\n        shift\n        ;;\n    -ctype)\n        # 处理 -ctype 选项，选择测试cpu使用的方式\n        test_cpu_type=\"$2\"\n        shift 2\n        ;;\n    -dtype)\n        # 处理 -dtype 选项，选择测试磁盘使用的方式\n        test_disk_type=\"$2\"\n        shift 2\n        ;;\n    -mdisk)\n        # 处理 -mdisk 选项，选择测试多个挂载盘，且含系统盘\n        multidisk_status=true\n        shift\n        ;;\n    -stype)\n        # 处理 -stype 选项，选择测试网速的数据来源，不指定时默认优先使用.net数据\n        test_network_type=\"$2\"\n        shift 2\n        ;;\n    -bansp)\n        # 处理 -bansp 选项，禁用测速\n        enable_speedtest=false\n        shift\n        ;;\n    -banup)\n        # 处理 -banup 选项，禁用分享链接生成\n        build_text_status=false\n        shift\n        ;;\n    -h)\n        if [ \"$en_status\" = true ]; then\n            echo \"Executed using parameter mode:\"\n            echo \"-m     Mandatory, Specify the options in the original menu, support up to three levels of selection\"\n            echo \"       For example, executing bash ecs.sh -m 5 1 1 will select the script execution for sub-option 1 under option 1 of option 5 of the main menu.\"\n            echo \"       Can specify only 1~3 parameter by default, e.g. -m 1 or -m 1 0 or -m 1 0 0\"\n            echo \"-en    Optional, Can specify which language is used to display the test, unspecified Chinese is used.\"\n            echo \"-i     Optional, Can specify the target IPV4 address in the backhaul routing test.\"\n            echo \"-base  Optional, Only basic system information is tested, not CPU, hard disk, streaming, backhaul routing, etc.\"\n            echo \"-ctype Optional, Can specify the way to test the cpu, optional gb4 gb5 gb6 corresponds to geekbench version 4, 5, 6 respectively.\"\n            echo \"-dtype Optional, Can specify the program to test the IO of the hard disk, you can choose dd or fio, the former test is fast and the latter test is slow.\"\n            echo \"-mdisk Optional, Can specify to test the IO of multiple mounted disks.\"\n            echo \"-bansp Optional, Can specify not to run speedtest.\"\n            echo \"-banup Optional, Can specify to force not to generate the sharing link.\"\n        else\n            echo \"使用参数模式执行：\"\n            echo \"-m     必填项，指定原本menu中的选项，最多支持三层选择\"\n            echo \"       例如执行 bash ecs.sh -m 5 1 1 将选择主菜单第5选项下的第1选项下的子选项1的脚本执行\"\n            echo \"       (可缺省仅指定一个参数，如 -m 1 仅指定执行融合怪完全体，执行 -m 1 0 以及 -m 1 0 0 都是指定执行融合怪完全体)\"\n            echo \"-en    可选项，可指定测试时使用的是哪种语言进行展示，该指令指定为使用英语，未指定时使用中文\"\n            echo \"-i     可选项，可指定回程路由测试中的目标IPV4地址，可通过 ip.sb ipinfo.io 等网站获取本地IPV4地址后指定\"\n            echo \"-r     可选项，可指定回程路由测试中的三网IPV4地址，可选 b g s c 分别对应 北京、广州、上海、成都 的三网地址，如 -r g 指定测试广州地址\"\n            echo \"       可指定仅测试IPV6三网，可选 b6 g6 s6 分别对应 北京、广州、上海 的三网的IPV6地址，如 -r b6 指定测试北京IPV6地址\"\n            echo \"-base  可选项，仅测试基础的系统信息，不测试CPU、硬盘、流媒体、回程路由等内容\"\n            echo \"-ctype 可选项，可指定通过何种方式测试cpu，可选 gb4 gb5 gb6 分别对应geekbench的4、5、6版本，无该指令则默认使用sysbench测试\"\n            echo \"-dtype 可选项，可指定测试硬盘IO的程序，可选 dd 或 fio 前者测试快后者测试慢，无该指令则默认为都使用进行测试\"\n            echo \"-mdisk 可选项，可指定测试多个挂载盘的IO，注意这也会测试系统盘且仅使用fio测试\"\n            echo \"-stype 可选项，可指定测试时使用的是什么平台的测速节点，可选 .cn .com 分别对应 speedtest.cn speedtest.com 数据\"\n            echo \"-bansp 可选项，可指定强制不测试网速，无该指令则默认测试网速\"\n            echo \"-banup 可选项，可指定强制不生成分享链接，无该指令则默认生成分享链接\"\n        fi\n        exit 1\n        ;;\n    *)\n        echo \"未知的选项: $1\"\n        exit 1\n        ;;\n    esac\ndone\nif [ -n \"$target_ipv4\" ]; then\n    if [ \"$en_status\" = true ]; then\n        test_area_local=(\"Yor local public IPV4 address\")\n        test_ip_local=(\"$target_ipv4\")\n    else\n        test_area_local=(\"你本地的IPV4地址\")\n        test_ip_local=(\"$target_ipv4\")\n    fi\nfi\n# 在menu_mode为false时才打印信息\nif [ \"$menu_mode\" = false ]; then\n    if [ \"$en_status\" = true ]; then\n        _blue \"Parameter is detected, use parameter mode, read the parameter as follows, display for 4 seconds\"\n    else\n        _blue \"检测到参数，使用参数模式，读取参数如下，显示4秒\"\n    fi\n    echo \"menu_mode: $menu_mode\"\n    echo \"test_base_status: $test_base_status\"\n    echo \"target_ipv4: $target_ipv4\"\n    echo \"route_location: $route_location\"\n    echo \"test_cpu_type: $test_cpu_type\"\n    echo \"test_disk_type: $test_disk_type\"\n    echo \"multidisk_status: $multidisk_status\"\n    echo \"enable_speedtest: $enable_speedtest\"\n    echo \"build_text_status: $build_text_status\"\n    # 读取 -m 选项后的参数\n    main_menu_option=${m_params[0]:-0}\n    sub_menu_option=${m_params[1]:-0}\n    sub_of_sub_menu_option=${m_params[2]:-0}\n    echo \"main_menu_option: $main_menu_option\"\n    echo \"sub_menu_option: $sub_menu_option\"\n    echo \"sub_of_sub_menu_option: $sub_of_sub_menu_option\"\n    sleep 4\nfi\n\n# =============== 自定义基础参数 ==============\nif [ \"$en_status\" = true ]; then\n    changeLog=\"VPS Fusion Monster Test From Multi-script\"\nelse\n    changeLog=\"VPS融合怪测试(集百家之长)\"\nfi\nhttp_short_url=\"\"\nhttps_short_url=\"\"\nTEMP_DIR='/tmp/ecs'\nPROGRESS_DIR=\"/tmp/progress\"\nrm -rf \"$PROGRESS_DIR\"\nmkdir -p \"$PROGRESS_DIR\"\nPID_FILE=\"/tmp/pids.txt\"\nrm -rf \"$PID_FILE\"\ntemp_file_apt_fix=\"${TEMP_DIR}/apt_fix.txt\"\nWorkDir=\"/tmp/.LemonBench\"\ntest_area_g=(\"广州电信\" \"广州联通\" \"广州移动\")\ntest_ip_g=(\"58.60.188.222\" \"210.21.196.6\" \"120.196.165.24\")\ntest_area_s=(\"上海电信\" \"上海联通\" \"上海移动\")\ntest_ip_s=(\"202.96.209.133\" \"210.22.97.1\" \"211.136.112.200\")\ntest_area_b=(\"北京电信\" \"北京联通\" \"北京移动\")\ntest_ip_b=(\"219.141.140.10\", \"202.106.195.68\", \"221.179.155.161\")\ntest_area_c=(\"成都电信\" \"成都联通\" \"成都移动\")\ntest_ip_c=(\"61.139.2.69\" \"119.6.6.6\" \"211.137.96.205\")\ntest_area_g6=(\"广州电信\" \"广州联通\" \"广州移动\")\ntest_ip_g6=(\"240e:97c:2f:3000::44\" \"2408:8756:f50:1001::c\" \"2409:8c54:871:1001::12\")\ntest_area_s6=(\"上海电信\" \"上海联通\" \"上海移动\")\ntest_ip_s6=(\"240e:e1:aa00:4000::24\" \"2408:80f1:21:5003::a\" \"2409:8c1e:75b0:3003::26\")\ntest_area_b6=(\"北京电信\" \"北京联通\" \"北京移动\")\ntest_ip_b6=(\"2400:89c0:1053:3::69\" \"2400:89c0:1013:3::54\" \"2409:8c00:8421:1303::55\")\nBrowserUA=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36\"\nSpeedtest_Go_version=\"1.6.12\"\n\n# =============== 基础信息设置 ===============\nREGEX=(\"debian|astra\" \"ubuntu\" \"centos|red hat|kernel|oracle linux|alma|rocky\" \"'amazon linux'\" \"fedora\" \"arch\" \"freebsd\" \"alpine\" \"openbsd\" \"opencloudos\")\nRELEASE=(\"Debian\" \"Ubuntu\" \"CentOS\" \"CentOS\" \"Fedora\" \"Arch\" \"FreeBSD\" \"Alpine\" \"OpenBSD\" \"OpenCloudOS\")\nPACKAGE_UPDATE=(\"! apt-get update && apt-get --fix-broken install -y && apt-get update\" \"apt-get update\" \"yum -y update\" \"yum -y update\" \"yum -y update\" \"pacman -Sy\" \"pkg update\" \"apk update\" \"pkg_add -qu\" \"yum -y update\")\nPACKAGE_INSTALL=(\"apt-get -y install\" \"apt-get -y install\" \"yum -y install\" \"yum -y install\" \"yum -y install\" \"pacman -Sy --noconfirm --needed\" \"pkg install -y\" \"apk add --no-cache\" \"pkg_add -I\" \"yum -y install\")\nPACKAGE_REMOVE=(\"apt-get -y remove\" \"apt-get -y remove\" \"yum -y remove\" \"yum -y remove\" \"yum -y remove\" \"pacman -Rsc --noconfirm\" \"pkg delete\" \"apk del\" \"pkg_delete -I\" \"yum -y remove\")\nPACKAGE_UNINSTALL=(\"apt-get -y autoremove\" \"apt-get -y autoremove\" \"yum -y autoremove\" \"yum -y autoremove\" \"yum -y autoremove\" \"\" \"pkg autoremove\" \"apk autoremove\" \"pkg_delete -a\" \"yum -y autoremove\")\nCMD=(\"$(grep -i pretty_name /etc/os-release 2>/dev/null | cut -d \\\" -f2)\" \"$(hostnamectl 2>/dev/null | grep -i system | cut -d : -f2)\" \"$(lsb_release -sd 2>/dev/null)\" \"$(grep -i description /etc/lsb-release 2>/dev/null | cut -d \\\" -f2)\" \"$(grep . /etc/redhat-release 2>/dev/null)\" \"$(grep . /etc/issue 2>/dev/null | cut -d \\\\ -f1 | sed '/^[ ]*$/d')\" \"$(grep -i pretty_name /etc/os-release 2>/dev/null | cut -d \\\" -f2)\" \"$(uname -s)\")\nif [ -f /etc/opencloudos-release ]; then\n    SYS=\"opencloudos\"\nelse\n    SYS=\"${CMD[0]}\"\nfi\n[[ -n $SYS ]] || exit 1\nfor ((int = 0; int < ${#REGEX[@]}; int++)); do\n    if [[ $(echo \"$SYS\" | tr '[:upper:]' '[:lower:]') =~ ${REGEX[int]} ]]; then\n        SYSTEM=\"${RELEASE[int]}\"\n        [[ -n $SYSTEM ]] && break\n    fi\ndone\n\n# =================== 其他脚本相关设置 ===================\nexport DEBIAN_FRONTEND=noninteractive\nrm -rf test_result.txt >/dev/null 2>&1\nif [ ! -d \"/tmp\" ]; then\n    mkdir /tmp\nfi\nusage_timeout=true\nDISPLAY_RUNNING=1\n\n# =============== 脚本退出执行相关函数 部分 ===============\ntrap _exit INT QUIT TERM\n\n_exit() {\n    # 终止信号捕获 - ctrl+c\n    echo -e \"\\n${Msg_Error}Exiting ...\"\n    if [ \"$en_status\" = true ]; then\n        _red \"An exit operation is detected and the script terminates!\"\n    else\n        _red \"检测到退出操作，脚本终止！\"\n    fi\n    global_exit_action\n    rm_script\n    exit 1\n}\n\nglobal_startup_init_action() {\n    # 清理残留, 为新一次的运行做好准备\n    echo -e \"${Msg_Info}Initializing Running Enviorment, Please wait ...\"\n    rm -rf \"$WorkDir\"\n    rm -rf /.tmp_LBench/\n    mkdir \"$WorkDir\"/\n    echo -e \"${Msg_Info}Checking Dependency ...\"\n    BenchFunc_Systeminfo_GetSysteminfo\n    echo -e \"${Msg_Info}Starting Test ...\"\n}\n\nglobal_exit_action() {\n    reset_default_sysctl >/dev/null 2>&1\n    echo -en \"$SHOW_CURSOR\"\n    if [ \"$build_text_status\" = true ]; then\n        build_text\n        if [ -n \"$https_short_url\" ] || [ -n \"$http_short_url\" ]; then\n            if [ \"$en_status\" = true ]; then\n                _green \"  ShortLink:\"\n            else\n                _green \"  短链:\"\n            fi\n\n            if [ -n \"$https_short_url\" ]; then\n                _blue \"    $https_short_url\"\n            fi\n\n            if [ -n \"$http_short_url\" ]; then\n                _blue \"    $http_short_url\"\n            fi\n        fi\n    fi\n    rm -rf ${TEMP_DIR}\n    rm -rf ${WorkDir}/\n    rm -rf /.tmp_LBench/\n    rm -rf *00_00\n}\n\n_exists() {\n    # 查询对应变量或组件是否存在\n    local cmd=\"$1\"\n    if eval type type >/dev/null 2>&1; then\n        eval type \"$cmd\" >/dev/null 2>&1\n    elif command >/dev/null 2>&1; then\n        command -v \"$cmd\" >/dev/null 2>&1\n    else\n        which \"$cmd\" >/dev/null 2>&1\n    fi\n    local rt=$?\n    return ${rt}\n}\n\nreset_default_sysctl() {\n    # 还原系统原有的设置\n    if [ -f /etc/security/limits.conf ]; then\n        cp /etc/security/limits.conf.backup /etc/security/limits.conf\n        rm /etc/security/limits.conf.backup\n    fi\n    if which systemctl >/dev/null 2>&1; then\n        if [ -f \"$sysctl_conf\" ]; then\n            cp \"$sysctl_conf_backup\" \"$sysctl_conf\"\n            check_and_cat_file \"$sysctl_default\" >>\"$sysctl_conf\"\n            $sysctl_path -p 2>/dev/null\n            cp \"$sysctl_conf_backup\" \"$sysctl_conf\"\n            rm \"$sysctl_conf_backup\"\n            rm \"$sysctl_default\"\n        fi\n        $sysctl_path -p 2>/dev/null\n    fi\n}\n\nnext() {\n    echo -en \"\\r\"\n    [ \"${Var_OSRelease}\" = \"freebsd\" ] && printf \"%-72s\\n\" \"-\" | tr ' ' '-' && return\n    printf \"%-72s\\n\" \"-\" | sed 's/\\s/-/g'\n}\n\n# =============== 组件预安装及文件预下载 部分 ===============\ncheckver() {\n    check_cdn_file\n    running_version=$(sed -n '7s/ver=\"\\(.*\\)\"/\\1/p' \"$0\")\n    curl -L \"${cdn_success_url}https://raw.githubusercontent.com/spiritLHLS/ecs/main/ecs.sh\" -o ecs1.sh && chmod 777 ecs1.sh\n    downloaded_version=$(sed -n '7s/ver=\"\\(.*\\)\"/\\1/p' ecs1.sh)\n    if [ \"$running_version\" != \"$downloaded_version\" ]; then\n        if [ \"$en_status\" = true ]; then\n            _yellow \"Upgrade script from $ver to $downloaded_version\"\n        else\n            _yellow \"更新脚本从 $ver 到 $downloaded_version\"\n        fi\n        mv ecs1.sh \"$0\"\n        ./ecs.sh\n    else\n        if [ \"$en_status\" = true ]; then\n            _green \"This script is the lastes version.\"\n        else\n            _green \"本脚本已是最新脚本无需更新\"\n        fi\n        rm -rf ecs1.sh*\n    fi\n}\n\ncheck_root() {\n    local root_status=true\n    [[ $EUID -ne 0 ]] && root_status=false\n    if [ \"$en_status\" = true ] && [ \"$root_status\" = false ]; then\n        echo -e \"${RED}Please use root user to run this script!${PLAIN}\" && exit 1\n    elif [ \"$root_status\" = false ]; then\n        echo -e \"${RED}请使用 root 用户运行本脚本！${PLAIN}\" && exit 1\n    fi\n}\n\ncheck_update() {\n    _yellow \"Updating package management sources\"\n    if command -v apt-get >/dev/null 2>&1; then\n        apt_update_output=$(apt-get update 2>&1)\n        echo \"$apt_update_output\" >\"$temp_file_apt_fix\"\n        if grep -q 'NO_PUBKEY' \"$temp_file_apt_fix\"; then\n            public_keys=$(grep -oE 'NO_PUBKEY [0-9A-F]+' \"$temp_file_apt_fix\" | awk '{ print $2 }')\n            joined_keys=$(echo \"$public_keys\" | paste -sd \" \")\n            _yellow \"No Public Keys: ${joined_keys}\"\n            apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ${joined_keys}\n            apt-get update\n            if [ $? -eq 0 ]; then\n                _green \"Fixed\"\n            fi\n        fi\n        rm \"$temp_file_apt_fix\"\n    else\n        ${PACKAGE_UPDATE[int]}\n    fi\n}\n\ncheck_sudo() {\n    _yellow \"checking sudo\"\n    if ! command -v sudo >/dev/null 2>&1; then\n        _yellow \"Installing sudo\"\n        ${PACKAGE_INSTALL[int]} sudo >/dev/null 2>&1\n    fi\n}\n\ncheck_curl() {\n    if ! which curl >/dev/null; then\n        _yellow \"Installing curl\"\n        ${PACKAGE_INSTALL[int]} curl\n    fi\n    if [ $? -ne 0 ]; then\n        apt-get -f install >/dev/null 2>&1\n        ${PACKAGE_INSTALL[int]} curl\n    fi\n}\n\ncheck_wget() {\n    if ! which wget >/dev/null; then\n        _yellow \"Installing wget\"\n        ${PACKAGE_INSTALL[int]} wget\n    fi\n}\n\ncheck_free() {\n    [ \"${Var_OSRelease}\" = \"freebsd\" ] && return\n    if ! command -v free >/dev/null 2>&1; then\n        _yellow \"Installing procps\"\n        ${PACKAGE_INSTALL[int]} procps\n    fi\n}\n\ncheck_lsb_release() {\n    [ \"${Var_OSRelease}\" = \"freebsd\" ] && return\n    if ! command -v lsb_release >/dev/null 2>&1; then\n        _yellow \"Installing lsb-release\"\n        ${PACKAGE_INSTALL[int]} lsb-release\n    fi\n}\n\ncheck_timeout() {\n    if command -v timeout >/dev/null 2>&1; then\n        usage_timeout=true\n    else\n        usage_timeout=false\n    fi\n}\n\ncheck_lscpu() {\n    if ! command -v lscpu >/dev/null 2>&1; then\n        _yellow \"Installing lscpu\"\n        ${PACKAGE_INSTALL[int]} lscpu\n    fi\n}\n\ncheck_unzip() {\n    if ! command -v unzip >/dev/null 2>&1; then\n        _yellow \"Installing unzip\"\n        ${PACKAGE_INSTALL[int]} unzip\n    fi\n}\n\ncheck_ip() {\n    if ! command -v ip >/dev/null 2>&1; then\n        _yellow \"Installing iproute2 to use ip command\"\n        ${PACKAGE_INSTALL[int]} iproute2\n    fi\n    if ! command -v ifconfig >/dev/null 2>&1; then\n        _yellow \"Installing net-tools to use ifconfig command\"\n        ${PACKAGE_INSTALL[int]} net-tools\n    fi\n}\n\ncheck_ping() {\n    _yellow \"checking ping\"\n    if ! which ping >/dev/null; then\n        _yellow \"Installing ping\"\n        ${PACKAGE_INSTALL[int]} iputils-ping >/dev/null 2>&1\n        ${PACKAGE_INSTALL[int]} ping >/dev/null 2>&1\n    fi\n}\n\ncheck_nc() {\n    _yellow \"checking nc\"\n    if ! command -v nc >/dev/null; then\n        _yellow \"Installing nc\"\n        if command -v apt >/dev/null; then\n            ${PACKAGE_INSTALL[int]} netcat >/dev/null 2>&1\n        else\n            ${PACKAGE_INSTALL[int]} nc >/dev/null 2>&1\n        fi\n    fi\n}\n\ncheck_tar() {\n    _yellow \"checking tar\"\n    if ! command -v tar &>/dev/null; then\n        _yellow \"Installing tar\"\n        ${PACKAGE_INSTALL[int]} tar\n    fi\n    if [ $? -ne 0 ]; then\n        apt-get -f install >/dev/null 2>&1\n        ${PACKAGE_INSTALL[int]} tar >/dev/null 2>&1\n    fi\n}\n\ncheck_lsof() {\n    _yellow \"checking lsof\"\n    if ! command -v lsof &>/dev/null; then\n        _yellow \"Installing lsof\"\n        ${PACKAGE_INSTALL[int]} lsof\n    fi\n    if [ $? -ne 0 ]; then\n        apt-get -f install >/dev/null 2>&1\n        ${PACKAGE_INSTALL[int]} lsof >/dev/null 2>&1\n    fi\n}\n\ncheck_haveged() {\n    [ \"${Var_OSRelease}\" = \"freebsd\" ] && return\n    _yellow \"checking haveged\"\n    if ! command -v haveged >/dev/null 2>&1; then\n        ${PACKAGE_INSTALL[int]} haveged >/dev/null 2>&1\n    fi\n    if which systemctl >/dev/null 2>&1; then\n        systemctl disable --now haveged\n        systemctl enable --now haveged\n    else\n        service haveged stop\n        service haveged start\n    fi\n}\n\ncheck_dnsutils() {\n    _yellow \"Installing dnsutils\"\n    if [ \"${Var_OSRelease}\" == \"centos\" ]; then\n        yum -y install dnsutils >/dev/null 2>&1\n        yum -y install bind-utils >/dev/null 2>&1\n    elif [ \"${Var_OSRelease}\" == \"arch\" ]; then\n        pacman -S --noconfirm --needed bind >/dev/null 2>&1\n    else\n        ${PACKAGE_INSTALL[int]} dnsutils >/dev/null 2>&1\n    fi\n}\n\ncheckpip() {\n    [ \"${Var_OSRelease}\" = \"freebsd\" ] && curl -L https://bootstrap.pypa.io/get-pip.py -o get-pip.py && chmod +x get-pip.py && python3 get-pip.py && rm -rf get-pip.py && return\n    local pvr=\"$1\"\n    local pip_version=$(pip --version 2>&1)\n    if [[ $? -eq 0 && $pip_version != *\"command not found\"* ]]; then\n        _blue \"$pip_version\"\n    else\n        _yellow \"installing python${pvr}-pip\"\n        ${PACKAGE_INSTALL[int]} python${pvr}-pip\n        pip_version=$(pip --version 2>&1)\n        if [[ $? -eq 0 ]]; then\n            _blue \"$pip_version\"\n        else\n            _red \"python${pvr}-pip installation failed, please install it manually\"\n            return\n        fi\n    fi\n}\n\ncheck_and_cat_file() {\n    local file=\"$1\"\n    # 检测文件是否存在\n    if [[ -f \"$file\" ]]; then\n        # 判断文件内容是否为空或只包含空行\n        if [[ -s \"$file\" ]] && [[ \"$(grep -vE '^\\s*$' \"$file\")\" ]]; then\n            :\n        else\n            truncate -s 0 \"$file\"\n        fi\n    else\n        truncate -s 0 \"$file\"\n    fi\n    # 检测文件内容是否包含\"error\"，如果包含则不打印文件内容\n    if grep -q \"error\" \"$file\"; then\n        return\n    fi\n    cat \"$file\"\n}\n\n# 移动光标并清除行\nmove_and_clear() {\n    local line=$1\n    echo -en \"\\033[${line};0H\\033[K\"\n}\n\n# 显示进度条\ndisplay_progress() {\n    local use_tput=false\n    if command -v tput >/dev/null 2>&1; then\n        use_tput=true\n    fi\n    local progress_height=$((${#dfiles[@]} + 2)) # 进度显示所需的行数\n    # 保存光标位置并隐藏光标\n    echo -en \"$SAVE_CURSOR$HIDE_CURSOR\"\n    while [ $DISPLAY_RUNNING -eq 1 ]; do\n        # 将光标移动到保存的位置\n        echo -en \"$RESTORE_CURSOR\"\n        if [ \"$en_status\" = true ]; then\n            echo \"Download progress:\"\n        else\n            echo \"下载进度：\"\n        fi\n        local all_completed=true\n        for dfile in \"${dfiles[@]}\"; do\n            if [ -f \"$PROGRESS_DIR/$dfile\" ]; then\n                local percentage=$(cat \"$PROGRESS_DIR/$dfile\")\n                if [[ \"$percentage\" =~ ^[0-9]+$ ]]; then\n                    percentage=$((percentage > 100 ? 100 : percentage))\n                    printf \"%-20s [%-50s] %3d%%\\n\" \"$dfile\" \"$(printf '#%.0s' $(seq 1 $((percentage / 2))))\" \"$percentage\"\n                    if [ \"$percentage\" -lt 100 ]; then\n                        all_completed=false\n                    fi\n                else\n                    printf \"%-20s [%-50s] ???\\n\" \"$dfile\" \"\"\n                    all_completed=false\n                fi\n            else\n                printf \"%-20s [%-50s] ???\\n\" \"$dfile\" \"\"\n                all_completed=false\n            fi\n        done\n        if [ \"$all_completed\" = true ]; then\n            break\n        fi\n        sleep 3.5\n    done\n    # 显示光标\n    echo -en \"$SHOW_CURSOR\"\n    echo \"\"\n}\n\n# 开始整体并发下载并显示进度条\nstart_downloads() {\n    local dfiles=(\"$@\") # 接收文件列表作为参数\n    # 初始化进度\n    for dfile in \"${dfiles[@]}\"; do\n        echo \"0\" >\"$PROGRESS_DIR/$dfile\"\n    done\n    # 获取当前光标位置\n    local current_line=$(tput lines)\n    # 启动后台进程来更新显示\n    display_progress $current_line &\n    local display_pid=$!\n    # 并发下载并跟踪PID\n    for dfile in \"${dfiles[@]}\"; do\n        main_download \"$dfile\" &\n        echo $! >>\"$PID_FILE\"\n    done\n    wait\n    # 停止显示进程\n    DISPLAY_RUNNING=0\n}\n\ndownload_file() {\n    local url=$1\n    local output=$2\n    local progress_file=$3\n    # 获取文件总大小\n    local total_size=$(curl -sIkL \"$url\" | grep -i Content-Length | awk '{print $2}' | tr -d '\\r')\n    if [ -z \"$total_size\" ] || [ \"$total_size\" -eq 0 ]; then\n        echo \"无法获取 $url 的文件大小,将使用 0 作为默认值。\" >&2\n        total_size=0\n    fi\n    # 连续检测到下载完成的次数\n    local complete_count=0\n    # 连续检测到下载失败的次数\n    local download_failed=0\n    while true; do\n        if ! curl -Lk \"$url\" -o \"$output\" 2>&1 |\n            while true; do\n                if [ -f \"$output\" ]; then\n                    sleep 1\n                    local current_size=$(stat -f%z \"$output\" 2>/dev/null || stat -c%s \"$output\" 2>/dev/null)\n                    if [ \"$total_size\" -gt 0 ]; then\n                        local progress=$((current_size * 100 / total_size))\n                    else\n                        local progress=0\n                    fi\n                    echo \"$progress\" >\"$progress_file\"\n                    sleep 1\n                    # 检查是否下载完成\n                    if [ \"$current_size\" -ge \"$total_size\" ]; then\n                        complete_count=$((complete_count + 1))\n                        # 只有连续3次检测到下载完成才退出循环\n                        if [ \"$complete_count\" -ge 3 ]; then\n                            break 2 # 退出外层循环\n                        fi\n                    else\n                        complete_count=0 # 如果不完整，重置计数器\n                    fi\n                fi\n            done; then\n            complete_count=0\n            download_failed=$((download_failed + 1))\n            if [ \"$download_failed\" -ge 2 ]; then\n                echo \"curl 和 wget 下载都失败,退出下载。\" >&2\n                return 1 # 返回错误码\n            fi\n            echo \"curl 下载失败,切换到 wget 下载。\" >&2\n            wget -O \"$output\" \"$url\" 2>&1 |\n                while true; do\n                    if [ -f \"$output\" ]; then\n                        sleep 1\n                        local current_size=$(stat -f%z \"$output\" 2>/dev/null || stat -c%s \"$output\" 2>/dev/null)\n                        if [ \"$total_size\" -gt 0 ]; then\n                            local progress=$((current_size * 100 / total_size))\n                        else\n                            local progress=0\n                        fi\n                        echo \"$progress\" >\"$progress_file\"\n                        sleep 1\n                        # 检查是否下载完成\n                        if [ \"$current_size\" -ge \"$total_size\" ]; then\n                            complete_count=$((complete_count + 1))\n                            # 只有连续3次检测到下载完成才退出循环\n                            if [ \"$complete_count\" -ge 3 ]; then\n                                break 2 # 退出外层循环\n                            fi\n                        else\n                            complete_count=0 # 如果不完整，重置计数器\n                        fi\n                    fi\n                done\n        else\n            break # curl 下载成功，退出外层循环\n        fi\n    done\n    # 确保最终进度被写入\n    if [ -f \"$output\" ]; then\n        local final_size=$(stat -f%z \"$output\" 2>/dev/null || stat -c%s \"$output\" 2>/dev/null)\n        if [ \"$total_size\" -gt 0 ]; then\n            local final_progress=$((final_size * 100 / total_size))\n        else\n            local final_progress=0\n        fi\n        echo \"$final_progress\" >\"$progress_file\"\n    fi\n    # 如果下载失败两次则返回错误码\n    [ \"$download_failed\" -ge 2 ] && return 1 || return 0\n}\n\nmain_download() {\n    local file=$1\n    case $file in\n    sysbench)\n        local url=\"${cdn_success_url}https://github.com/akopytov/sysbench/archive/1.0.20.zip\"\n        local output=\"$TEMP_DIR/sysbench.zip\"\n        download_file \"$url\" \"$output\" \"$PROGRESS_DIR/$file\"\n        chmod +x \"$output\"\n        unzip \"$output\" -d ${TEMP_DIR}\n        echo \"100\" >\"$PROGRESS_DIR/$file\"\n        ;;\n    CommonMediaTests)\n        local url=\"${cdn_success_url}https://github.com/oneclickvirt/CommonMediaTests/releases/download/output/${CommonMediaTests_FILE}\"\n        local output=\"$TEMP_DIR/CommonMediaTests\"\n        download_file \"$url\" \"$output\" \"$PROGRESS_DIR/$file\"\n        chmod +x \"$output\"\n        echo \"100\" >\"$PROGRESS_DIR/$file\"\n        ;;\n    media_lmc_check)\n        local url=\"${cdn_success_url}https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/check.sh\"\n        local output=\"$TEMP_DIR/media_lmc_check.sh\"\n        download_file \"$url\" \"$output\" \"$PROGRESS_DIR/$file\"\n        chmod 777 \"$output\"\n        old_url=\"https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fcheck.unclock.media&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=visit&edge_flat=false\"\n        new_url=\"https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Foneclickvirt%2FUnlockTests&count_bg=%2323E01C&title_bg=%23555555&icon=sonarcloud.svg&icon_color=%23E7E7E7&title=hits&edge_flat=false\"\n        sed -i \"s|$old_url|$new_url|g\" \"$output\"\n        echo \"100\" >\"$PROGRESS_DIR/$file\"\n        ;;\n    # besttrace)\n    #     local url=\"${cdn_success_url}https://raw.githubusercontent.com/spiritLHLS/ecs/main/archive/besttrace/2021/${BESTTRACE_FILE}\"\n    #     local output=\"$TEMP_DIR/$BESTTRACE_FILE\"\n    #     download_file \"$url\" \"$output\" \"$PROGRESS_DIR/$file\"\n    #     chmod +x \"$output\"\n    #     echo \"100\" > \"$PROGRESS_DIR/$file\"\n    #     ;;\n    nexttrace)\n        NEXTTRACE_VERSION=$(curl -m 6 -sSL \"https://api.github.com/repos/nxtrace/Ntrace-core/releases/latest\" | awk -F \\\" '/tag_name/{print $4}')\n        if [ -z \"$NEXTTRACE_VERSION\" ]; then\n            NEXTTRACE_VERSION=$(curl -m 6 -sSL \"https://fd.spiritlhl.top/https://api.github.com/repos/nxtrace/Ntrace-core/releases/latest\" | awk -F \\\" '/tag_name/{print $4}')\n        fi\n        if [ -z \"$NEXTTRACE_VERSION\" ]; then\n            NEXTTRACE_VERSION=$(curl -m 6 -sSL \"https://githubapi.spiritlhl.top/repos/nxtrace/Ntrace-core/releases/latest\" | awk -F \\\" '/tag_name/{print $4}')\n        fi\n        local url=\"${cdn_success_url}https://github.com/nxtrace/Ntrace-core/releases/download/${NEXTTRACE_VERSION}/${NEXTTRACE_FILE}\"\n        local output=\"$TEMP_DIR/$NEXTTRACE_FILE\"\n        download_file \"$url\" \"$output\" \"$PROGRESS_DIR/$file\"\n        chmod +x \"$output\"\n        echo \"100\" >\"$PROGRESS_DIR/$file\"\n        ;;\n    backtrace)\n        local url=\"${cdn_success_url}https://github.com/oneclickvirt/backtrace/releases/download/output/$BACKTRACE_FILE\"\n        local output=\"$TEMP_DIR/backtrace\"\n        download_file \"$url\" \"$output\" \"$PROGRESS_DIR/$file\"\n        echo \"100\" >\"$PROGRESS_DIR/$file\"\n        ;;\n    gostun)\n        local url=\"${cdn_success_url}https://github.com/oneclickvirt/gostun/releases/download/output/$GOSTUN_FILE\"\n        local output=\"$TEMP_DIR/gostun\"\n        download_file \"$url\" \"$output\" \"$PROGRESS_DIR/$file\"\n        echo \"100\" >\"$PROGRESS_DIR/$file\"\n        ;;\n    securityCheck)\n        local url=\"${cdn_success_url}https://github.com/oneclickvirt/securityCheck/releases/download/output/$SecurityCheck_FILE\"\n        local output=\"$TEMP_DIR/securityCheck\"\n        download_file \"$url\" \"$output\" \"$PROGRESS_DIR/$file\"\n        echo \"100\" >\"$PROGRESS_DIR/$file\"\n        ;;\n    portchecker)\n        local url=\"${cdn_success_url}https://github.com/oneclickvirt/portchecker/releases/download/output/$PortChecker_FILE\"\n        local output=\"$TEMP_DIR/pck\"\n        download_file \"$url\" \"$output\" \"$PROGRESS_DIR/$file\"\n        echo \"100\" >\"$PROGRESS_DIR/$file\"\n        ;;\n    yabs)\n        local url=\"${cdn_success_url}https://raw.githubusercontent.com/masonr/yet-another-bench-script/master/yabs.sh\"\n        local output=\"$TEMP_DIR/yabs.sh\"\n        download_file \"$url\" \"$output\" \"$PROGRESS_DIR/$file\"\n        chmod +x \"$output\"\n        sed -i '/# gather basic system information (inc. CPU, AES-NI\\/virt status, RAM + swap + disk size)/,/^echo -e \"IPv4\\/IPv6  : $ONLINE\"/d' \"$output\"\n        echo \"100\" >\"$PROGRESS_DIR/$file\"\n        ;;\n    ecsspeed_ping)\n        local url=\"${cdn_success_url}https://raw.githubusercontent.com/spiritLHLS/ecsspeed/main/script/ecsspeed-ping.sh\"\n        local output=\"$TEMP_DIR/ecsspeed-ping.sh\"\n        download_file \"$url\" \"$output\" \"$PROGRESS_DIR/$file\"\n        chmod +x \"$output\"\n        echo \"100\" >\"$PROGRESS_DIR/$file\"\n        ;;\n    *)\n        echo \"Invalid file: $file\"\n        echo \"0\" >\"$PROGRESS_DIR/$file\"\n        ;;\n    esac\n}\n\n# =============== 其他相关信息查询 部分 ===============\ndeclare -A sysctl_vars=(\n    [\"fs.file-max\"]=1024000\n    [\"net.core.rmem_max\"]=134217728\n    [\"net.core.wmem_max\"]=134217728\n    [\"net.core.netdev_max_backlog\"]=250000\n    [\"net.core.somaxconn\"]=1024000\n    [\"net.ipv4.conf.all.rp_filter\"]=0\n    [\"net.ipv4.conf.default.rp_filter\"]=0\n    [\"net.ipv4.conf.lo.arp_announce\"]=2\n    [\"net.ipv4.conf.all.arp_announce\"]=2\n    [\"net.ipv4.conf.default.arp_announce\"]=2\n    [\"net.ipv4.ip_forward\"]=1\n    [\"net.ipv4.ip_local_port_range\"]=\"1024 65535\"\n    [\"net.ipv4.neigh.default.gc_stale_time\"]=120\n    [\"net.ipv4.tcp_syncookies\"]=1\n    [\"net.ipv4.tcp_tw_reuse\"]=1\n    [\"net.ipv4.tcp_low_latency\"]=1\n    [\"net.ipv4.tcp_fin_timeout\"]=10\n    [\"net.ipv4.tcp_window_scaling\"]=1\n    [\"net.ipv4.tcp_keepalive_time\"]=10\n    [\"net.ipv4.tcp_timestamps\"]=0\n    [\"net.ipv4.tcp_sack\"]=1\n    [\"net.ipv4.tcp_fack\"]=1\n    [\"net.ipv4.tcp_syn_retries\"]=3\n    [\"net.ipv4.tcp_synack_retries\"]=3\n    [\"net.ipv4.tcp_max_syn_backlog\"]=16384\n    [\"net.ipv4.tcp_max_tw_buckets\"]=8192\n    [\"net.ipv4.tcp_fastopen\"]=3\n    [\"net.ipv4.tcp_mtu_probing\"]=1\n    [\"net.ipv4.tcp_rmem\"]=\"8192 262144 536870912\"\n    [\"net.ipv4.tcp_wmem\"]=\"4096 16384 536870912\"\n    [\"net.ipv4.tcp_adv_win_scale\"]=-2\n    [\"net.ipv4.tcp_collapse_max_bytes\"]=6291456\n    [\"net.ipv4.tcp_notsent_lowat\"]=131072\n    [\"net.ipv4.udp_rmem_min\"]=16384\n    [\"net.ipv4.udp_wmem_min\"]=16384\n    [\"net.ipv6.conf.all.forwarding\"]=1\n    [\"net.ipv6.conf.default.forwarding\"]=1\n    [\"net.nf_conntrack_max\"]=25000000\n    [\"net.netfilter.nf_conntrack_max\"]=25000000\n    [\"net.netfilter.nf_conntrack_tcp_timeout_time_wait\"]=30\n    [\"net.netfilter.nf_conntrack_tcp_timeout_established\"]=180\n    [\"net.netfilter.nf_conntrack_tcp_timeout_close_wait\"]=30\n    [\"net.netfilter.nf_conntrack_tcp_timeout_fin_wait\"]=30\n)\nsysctl_conf=\"/etc/sysctl.conf\"\nsysctl_conf_backup=\"/etc/sysctl.conf.backup\"\nsysctl_default=\"${TEMP_DIR}/sysctl_backup.txt\"\nsysctl_path=$(which sysctl)\n\nvariable_exists() {\n    local variable=\"$1\"\n    grep -q \"^$variable=\" \"$sysctl_conf\"\n}\n\noptimized_kernel() {\n    _yellow \"optimizing resource limits\"\n    if [ -f /etc/security/limits.conf ]; then\n        cp /etc/security/limits.conf /etc/security/limits.conf.backup\n        cat >/etc/security/limits.conf <<EOF\n* soft nofile 512000\n* hard nofile 512000\n* soft nproc 512000\n* hard nproc 512000\nroot soft nofile 512000\nroot hard nofile 512000\nroot soft nproc 512000\nroot hard nproc 512000\nEOF\n    fi\n    if which systemctl >/dev/null 2>&1; then\n        _yellow \"optimizing sysctl configuration\"\n        declare -A default_values\n        if [ -f \"$sysctl_conf\" ]; then\n            if [ ! -f \"$sysctl_conf_backup\" ]; then\n                cp \"$sysctl_conf\" \"$sysctl_conf_backup\"\n            fi\n            while IFS= read -r line; do\n                variable=\"${line%%=*}\"\n                variable=\"${variable%%[[:space:]]*}\"\n                default_value=\"${line#*=}\"\n                default_values[\"$variable\"]=\"$default_value\"\n            done < <($sysctl_path -a)\n            echo \"\" >\"$sysctl_default\"\n            for variable in \"${!sysctl_vars[@]}\"; do\n                value=\"${sysctl_vars[$variable]}\"\n                if variable_exists \"$variable\"; then\n                    sed -i \"s/^$variable=.*/$variable=$value/\" \"$sysctl_conf\"\n                else\n                    echo \"$variable=$value\" >>\"$sysctl_conf\"\n                    default_value=\"${default_values[$variable]}\"\n                    echo \"$variable=$default_value\" >>\"$sysctl_default\"\n                fi\n            done\n            $sysctl_path -p 2>/dev/null\n        fi\n    fi\n}\n\ncheck_cdn() {\n    local o_url=$1\n    for cdn_url in \"${cdn_urls[@]}\"; do\n        if curl -sL -k \"$cdn_url$o_url\" --max-time 6 | grep -q \"success\" >/dev/null 2>&1; then\n            export cdn_success_url=\"$cdn_url\"\n            return\n        fi\n        sleep 0.5\n    done\n    export cdn_success_url=\"\"\n}\n\ncheck_cdn_file() {\n    check_cdn \"https://raw.githubusercontent.com/spiritLHLS/ecs/main/back/test\"\n    if [ -n \"$cdn_success_url\" ]; then\n        _yellow \"CDN available, using CDN\"\n    else\n        _yellow \"No CDN available, no use CDN\"\n    fi\n}\n\ncheck_time_zone() {\n    _yellow \"adjusting the time\"\n    if command -v ntpd >/dev/null 2>&1; then\n        if which systemctl >/dev/null 2>&1; then\n            systemctl stop chronyd\n            systemctl stop ntpd\n        else\n            service chronyd stop\n            service ntpd stop\n        fi\n        if lsof -i:123 | grep -q \"ntpd\"; then\n            echo \"Port 123 is already in use. Skipping ntpd command.\"\n        else\n            # 最多对准时长进行60秒，避免对准时间这个过程耗时过长\n            if [ \"$usage_timeout\" = true ]; then\n                timeout 60s ntpd -gq\n            else\n                ntpd -gq\n            fi\n            if which systemctl >/dev/null 2>&1; then\n                systemctl start ntpd\n            else\n                service ntpd start\n            fi\n        fi\n        sleep 0.5\n        return\n    fi\n    if ! command -v chronyd >/dev/null 2>&1; then\n        ${PACKAGE_INSTALL[int]} chrony >/dev/null 2>&1\n    fi\n    if which systemctl >/dev/null 2>&1; then\n        systemctl stop chronyd\n        chronyd -q -t 30\n        systemctl start chronyd\n    else\n        service chronyd stop\n        chronyd -q -t 30\n        service chronyd start\n    fi\n    sleep 0.5\n}\n\ncheck_nat_type() {\n    _yellow \"NAT Type being detected ......\"\n    if [[ ! -z \"$IPV4\" ]]; then\n        if [ -f \"$TEMP_DIR/gostun\" ]; then\n            chmod 777 $TEMP_DIR/gostun\n            output=$($TEMP_DIR/gostun | tail -n 1)\n            if [[ $output == *\"NAT Type\"* ]]; then\n                nat_type_r=$(echo \"$output\" | awk -F ':' '{print $NF}' | awk '{$1=$1;print}')\n            else\n                if [ \"$en_status\" = true ]; then\n                    nat_type_r=\"The query fails, please try other architectures of https://github.com/oneclickvirt/gostun by yourself\"\n                else\n                    nat_type_r=\"查询失败，请自行尝试 https://github.com/oneclickvirt/gostun 的其他架构\"\n                fi\n            fi\n        fi\n    fi\n}\n\ncheck_china() {\n    _yellow \"IP area being detected ......\"\n    if [[ -z \"${CN}\" ]]; then\n        if [[ $(curl -m 6 -s https://ipapi.co/json | grep 'China') != \"\" ]]; then\n            _yellow \"根据ipapi.co提供的信息，当前IP可能在中国\"\n            read -e -r -p \"是否选用中国镜像完成相关组件安装? ([y]/n) \" input\n            case $input in\n            [yY][eE][sS] | [yY])\n                echo \"使用中国镜像\"\n                CN=true\n                ;;\n            [nN][oO] | [nN])\n                echo \"不使用中国镜像\"\n                ;;\n            *)\n                echo \"使用中国镜像\"\n                CN=true\n                ;;\n            esac\n        else\n            if [[ $? -ne 0 ]]; then\n                if [[ $(curl -m 6 -s cip.cc) =~ \"中国\" ]]; then\n                    _yellow \"根据cip.cc提供的信息，当前IP可能在中国\"\n                    read -e -r -p \"是否选用中国镜像完成相关组件安装? [Y/n] \" input\n                    case $input in\n                    [yY][eE][sS] | [yY])\n                        echo \"使用中国镜像\"\n                        CN=true\n                        ;;\n                    [nN][oO] | [nN])\n                        echo \"不使用中国镜像\"\n                        ;;\n                    *)\n                        echo \"不使用中国镜像\"\n                        ;;\n                    esac\n                fi\n            fi\n        fi\n    fi\n}\n\nstatistics_of_run-times() {\n    COUNT=$(\n        curl -4 -ksm1 \"https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2FspiritLHLS%2Fecs&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=&edge_flat=true\" 2>&1 ||\n            curl -6 -ksm1 \"https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2FspiritLHLS%2Fecs&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=&edge_flat=true\" 2>&1\n    )\n    TODAY=$(expr \"$COUNT\" : '.*\\s\\([0-9]\\{1,\\}\\)\\s/.*')\n    TOTAL=$(expr \"$COUNT\" : '.*/\\s\\([0-9]\\{1,\\}\\)\\s.*')\n}\n\n# =============== 基础系统信息 部分 ===============\nsystemInfo_get_os_release() {\n    local regex_size=${#REGEX[@]}\n    for ((i = 0; i < regex_size; i++)); do\n        local pattern=\"${REGEX[i]}\"\n        if [ -f \"/etc/debian_version\" ] && [[ \"$pattern\" == \"debian|astra\" ]]; then\n            Var_OSRelease=\"debian\"\n            break\n        elif [ -f \"/etc/lsb-release\" ] && [[ \"$pattern\" == \"ubuntu\" ]]; then\n            Var_OSRelease=\"ubuntu\"\n            break\n        elif [ -f \"/etc/redhat-release\" ] && [[ \"$pattern\" == \"centos|red hat|kernel|oracle linux|alma|rocky\" ]]; then\n            Var_OSRelease=\"centos\"\n            break\n        elif [ -f \"/etc/amazon-linux-release\" ] && [[ \"$pattern\" == \"'amazon linux'\" ]]; then\n            Var_OSRelease=\"centos\"\n            break\n        elif [ -f \"/etc/fedora-release\" ] && [[ \"$pattern\" == \"fedora\" ]]; then\n            Var_OSRelease=\"fedora\"\n            break\n        elif [ -f \"/etc/arch-release\" ] && [[ \"$pattern\" == \"arch\" ]]; then\n            Var_OSRelease=\"arch\"\n            break\n        elif [ -f \"/etc/freebsd-update.conf\" ] && [[ \"$pattern\" == \"freebsd\" ]]; then\n            Var_OSRelease=\"freebsd\"\n            break\n        elif [ -f \"/etc/alpine-release\" ] && [[ \"$pattern\" == \"alpine\" ]]; then\n            Var_OSRelease=\"alpinelinux\"\n            break\n        elif [ -f \"/etc/openbsd.conf\" ] && [[ \"$pattern\" == \"openbsd\" ]]; then\n            Var_OSRelease=\"openbsd\"\n            break\n        elif [ -f \"/etc/opencloudos-release\" ] && [[ \"$pattern\" == \"opencloudos\" ]]; then\n            Var_OSRelease=\"opencloudos\"\n            break\n        fi\n    done\n    if [ -z \"$Var_OSRelease\" ]; then\n        Var_OSRelease=\"unknown\"\n    fi\n    if [ -f /etc/os-release ]; then\n        DISTRO=$(grep 'PRETTY_NAME' /etc/os-release | cut -d '\"' -f 2)\n    fi\n}\n\nget_system_bit() {\n    local sysarch=\"$(uname -m)\"\n    if [ \"${sysarch}\" = \"unknown\" ] || [ \"${sysarch}\" = \"\" ]; then\n        local sysarch=\"$(arch)\"\n    fi\n    # 根据架构信息设置系统位数并下载文件,其余 * 包括了 x86_64\n    case \"${sysarch}\" in\n    \"i386\" | \"i686\")\n        LBench_Result_SystemBit_Short=\"32\"\n        LBench_Result_SystemBit_Full=\"i386\"\n        GOSTUN_FILE=gostun-linux-386\n        # BESTTRACE_FILE=besttracemac\n        CommonMediaTests_FILE=CommonMediaTests-linux-386\n        SecurityCheck_FILE=securityCheck-linux-386\n        PortChecker_FILE=portchecker-linux-386\n        BACKTRACE_FILE=backtrace-linux-386\n        NEXTTRACE_FILE=nexttrace_darwin_amd64\n        ;;\n    \"armv7l\" | \"armv8\" | \"armv8l\" | \"aarch64\" | \"arm64\")\n        LBench_Result_SystemBit_Short=\"arm\"\n        LBench_Result_SystemBit_Full=\"arm\"\n        GOSTUN_FILE=gostun-linux-arm64\n        # BESTTRACE_FILE=besttracearm\n        CommonMediaTests_FILE=CommonMediaTests-linux-arm64\n        SecurityCheck_FILE=securityCheck-linux-arm64\n        PortChecker_FILE=portchecker-linux-arm64\n        BACKTRACE_FILE=backtrace-linux-arm64\n        NEXTTRACE_FILE=nexttrace_linux_arm64\n        ;;\n    *)\n        LBench_Result_SystemBit_Short=\"64\"\n        LBench_Result_SystemBit_Full=\"amd64\"\n        GOSTUN_FILE=gostun-linux-amd64\n        # BESTTRACE_FILE=besttrace\n        CommonMediaTests_FILE=CommonMediaTests-linux-amd64\n        SecurityCheck_FILE=securityCheck-linux-amd64\n        PortChecker_FILE=portchecker-linux-amd64\n        BACKTRACE_FILE=backtrace-linux-amd64\n        NEXTTRACE_FILE=nexttrace_linux_amd64\n        ;;\n    esac\n}\n\n# https://github.com/LemonBench/LemonBench/blob/main/LemonBench.sh\n# ===========================================================================\n# -> 系统信息模块 (Entrypoint) -> 执行\nfunction BenchFunc_Systeminfo_GetSysteminfo() {\n    BenchAPI_Systeminfo_GetCPUinfo\n    BenchAPI_Systeminfo_GetVMMinfo\n    BenchAPI_Systeminfo_GetMemoryinfo\n    BenchAPI_Systeminfo_GetDiskinfo\n    BenchAPI_Systeminfo_GetOSReleaseinfo\n    # BenchAPI_Systeminfo_GetLinuxKernelinfo\n}\n#\n# -> 系统信息模块 (Collector) -> 获取CPU信息\nfunction BenchAPI_Systeminfo_GetCPUinfo() {\n    # CPU 基础信息检测\n    local r_modelname && r_modelname=\"$(lscpu -B 2>/dev/null | grep -oP -m1 \"(?<=Model name:).*(?=)\" | sed -e 's/^[ ]*//g')\"\n    local r_cachesize_l1d_b && r_cachesize_l1d_b=\"$(lscpu -B 2>/dev/null | grep -oP \"(?<=L1d cache:).*(?=)\" | sed -e 's/^[ ]*//g')\"\n    local r_cachesize_l1i_b && r_cachesize_l1i_b=\"$(lscpu -B 2>/dev/null | grep -oP \"(?<=L1i cache:).*(?=)\" | sed -e 's/^[ ]*//g')\"\n    local r_cachesize_l1_b && r_cachesize_l1_b=\"$(echo \"$r_cachesize_l1d_b\" \"$r_cachesize_l1i_b\" | awk '{printf \"%d\\n\",$1+$2}')\"\n    local r_cachesize_l1_k && r_cachesize_l1_k=\"$(echo \"$r_cachesize_l1_b\" | awk '{printf \"%.2f\\n\",$1/1024}')\"\n    local t_cachesize_l1_k && t_cachesize_l1_k=\"$(echo \"$r_cachesize_l1_b\" | awk '{printf \"%d\\n\",$1/1024}')\"\n    if [ \"$t_cachesize_l1_k\" -ge \"1024\" ]; then\n        local r_cachesize_l1_m && r_cachesize_l1_m=\"$(echo \"$r_cachesize_l1_k\" | awk '{printf \"%.2f\\n\",$1/1024}')\"\n        local r_cachesize_l1=\"$r_cachesize_l1_m MB\"\n    else\n        local r_cachesize_l1=\"$r_cachesize_l1_k KB\"\n    fi\n    local r_cachesize_l2_b && r_cachesize_l2_b=\"$(lscpu -B 2>/dev/null | grep -oP \"(?<=L2 cache:).*(?=)\" | sed -e 's/^[ ]*//g')\"\n    local r_cachesize_l2_k && r_cachesize_l2_k=\"$(echo \"$r_cachesize_l2_b\" | awk '{printf \"%.2f\\n\",$1/1024}')\"\n    local t_cachesize_l2_k && t_cachesize_l2_k=\"$(echo \"$r_cachesize_l2_b\" | awk '{printf \"%d\\n\",$1/1024}')\"\n    if [ \"$t_cachesize_l2_k\" -ge \"1024\" ]; then\n        local r_cachesize_l2_m && r_cachesize_l2_m=\"$(echo \"$r_cachesize_l2_k\" | awk '{printf \"%.2f\\n\",$1/1024}')\"\n        local r_cachesize_l2=\"$r_cachesize_l2_m MB\"\n    else\n        local r_cachesize_l2=\"$r_cachesize_l2_k KB\"\n    fi\n    local r_cachesize_l3_b && r_cachesize_l3_b=\"$(lscpu -B 2>/dev/null | grep -oP \"(?<=L3 cache:).*(?=)\" | sed -e 's/^[ ]*//g')\"\n    local r_cachesize_l3_k && r_cachesize_l3_k=\"$(echo \"$r_cachesize_l3_b\" | awk '{printf \"%.2f\\n\",$1/1024}')\"\n    local t_cachesize_l3_k && t_cachesize_l3_k=\"$(echo \"$r_cachesize_l3_b\" | awk '{printf \"%d\\n\",$1/1024}')\"\n    if [ \"$t_cachesize_l3_k\" -ge \"1024\" ]; then\n        local r_cachesize_l3_m && r_cachesize_l3_m=\"$(echo \"$r_cachesize_l3_k\" | awk '{printf \"%.2f\\n\",$1/1024}')\"\n        local r_cachesize_l3=\"$r_cachesize_l3_m MB\"\n    else\n        local r_cachesize_l3=\"$r_cachesize_l3_k KB\"\n    fi\n    local r_sockets && r_sockets=\"$(lscpu -B 2>/dev/null | grep -oP \"(?<=Socket\\(s\\):).*(?=)\" | sed -e 's/^[ ]*//g')\"\n    if [ \"$r_sockets\" -ge \"2\" ]; then\n        local r_cores && r_cores=\"$(lscpu -B 2>/dev/null | grep -oP \"(?<=Core\\(s\\) per socket:).*(?=)\" | sed -e 's/^[ ]*//g')\"\n        r_cores=\"$(echo \"$r_sockets\" \"$r_cores\" | awk '{printf \"%d\\n\",$1*$2}')\"\n        local r_threadpercore && r_threadpercore=\"$(lscpu -B 2>/dev/null | grep -oP \"(?<=Thread\\(s\\) per core:).*(?=)\" | sed -e 's/^[ ]*//g')\"\n        local r_threads && r_threads=\"$(echo \"$r_cores\" \"$r_threadpercore\" | awk '{printf \"%d\\n\",$1*$2}')\"\n        r_threads=\"$(echo \"$r_threadpercore\" \"$r_cores\" | awk '{printf \"%d\\n\",$1*$2}')\"\n    else\n        local r_cores && r_cores=\"$(lscpu -B 2>/dev/null | grep -oP \"(?<=Core\\(s\\) per socket:).*(?=)\" | sed -e 's/^[ ]*//g')\"\n        local r_threadpercore && r_threadpercore=\"$(lscpu -B 2>/dev/null | grep -oP \"(?<=Thread\\(s\\) per core:).*(?=)\" | sed -e 's/^[ ]*//g')\"\n        local r_threads && r_threads=\"$(echo \"$r_cores\" \"$r_threadpercore\" | awk '{printf \"%d\\n\",$1*$2}')\"\n    fi\n    # CPU AES能力检测\n    # local t_aes && t_aes=\"$(awk -F ': ' '/flags/{print $2}' /proc/cpuinfo 2>/dev/null | grep -oE \"\\baes\\b\" | sort -u)\"\n    # [[ \"${t_aes}\" = \"aes\" ]] && Result_Systeminfo_CPUAES=\"1\" || Result_Systeminfo_CPUAES=\"0\"\n    # CPU AVX能力检测\n    # local t_avx && t_avx=\"$(awk -F ': ' '/flags/{print $2}' /proc/cpuinfo 2>/dev/null | grep -oE \"\\bavx\\b\" | sort -u)\"\n    # [[ \"${t_avx}\" = \"avx\" ]] && Result_Systeminfo_CPUAVX=\"1\" || Result_Systeminfo_CPUAVX=\"0\"\n    # CPU AVX512能力检测\n    # local t_avx512 && t_avx512=\"$(awk -F ': ' '/flags/{print $2}' /proc/cpuinfo 2>/dev/null | grep -oE \"\\bavx512\\b\" | sort -u)\"\n    # [[ \"${t_avx512}\" = \"avx\" ]] && Result_Systeminfo_CPUAVX512=\"1\" || Result_Systeminfo_CPUAVX512=\"0\"\n    # CPU 虚拟化能力检测\n    local t_vmx_vtx && t_vmx_vtx=\"$(awk -F ': ' '/flags/{print $2}' /proc/cpuinfo 2>/dev/null | grep -oE \"\\bvmx\\b\" | sort -u)\"\n    local t_vmx_svm && t_vmx_svm=\"$(awk -F ': ' '/flags/{print $2}' /proc/cpuinfo 2>/dev/null | grep -oE \"\\bsvm\\b\" | sort -u)\"\n    if [ \"$t_vmx_vtx\" = \"vmx\" ]; then\n        Result_Systeminfo_VirtReady=\"1\"\n        Result_Systeminfo_CPUVMX=\"Intel VT-x\"\n    elif [ \"$t_vmx_svm\" = \"svm\" ]; then\n        Result_Systeminfo_VirtReady=\"1\"\n        Result_Systeminfo_CPUVMX=\"AMD-V\"\n    else\n        if [ -c \"/dev/kvm\" ]; then\n            Result_Systeminfo_VirtReady=\"1\"\n            Result_Systeminfo_CPUVMX=\"unknown\"\n        else\n            Result_Systeminfo_VirtReady=\"0\"\n            Result_Systeminfo_CPUVMX=\"unknown\"\n        fi\n    fi\n    # 输出结果\n    Result_Systeminfo_CPUModelName=\"$r_modelname\"\n    Result_Systeminfo_CPUSockets=\"$r_sockets\"\n    Result_Systeminfo_CPUCores=\"$r_cores\"\n    Result_Systeminfo_CPUThreads=\"$r_threads\"\n    Result_Systeminfo_CPUCacheSizeL1=\"$r_cachesize_l1\"\n    Result_Systeminfo_CPUCacheSizeL2=\"$r_cachesize_l2\"\n    Result_Systeminfo_CPUCacheSizeL3=\"$r_cachesize_l3\"\n}\n#\n# -> 系统信息模块 (Collector) -> 获取内存及Swap信息\nfunction BenchAPI_Systeminfo_GetMemoryinfo() {\n    # 内存信息\n    local r_memtotal_kib && r_memtotal_kib=\"$(awk '/MemTotal/{print $2}' /proc/meminfo | head -n1)\"\n    local r_memtotal_mib && r_memtotal_mib=\"$(echo \"$r_memtotal_kib\" | awk '{printf \"%.2f\\n\",$1/1024}')\"\n    local r_memtotal_gib && r_memtotal_gib=\"$(echo \"$r_memtotal_kib\" | awk '{printf \"%.2f\\n\",$1/1048576}')\"\n    local r_meminfo_memfree_kib && r_meminfo_memfree_kib=\"$(awk '/MemFree/{print $2}' /proc/meminfo | head -n1)\"\n    local r_meminfo_buffers_kib && r_meminfo_buffers_kib=\"$(awk '/Buffers/{print $2}' /proc/meminfo | head -n1)\"\n    local r_meminfo_cached_kib && r_meminfo_cached_kib=\"$(awk '/Cached/{print $2}' /proc/meminfo | head -n1)\"\n    local r_memfree_kib && r_memfree_kib=\"$(echo \"$r_meminfo_memfree_kib\" \"$r_meminfo_buffers_kib\" \"$r_meminfo_cached_kib\" | awk '{printf $1+$2+$3}')\"\n    local r_memfree_mib && r_memfree_mib=\"$(echo \"$r_memfree_kib\" | awk '{printf \"%.2f\\n\",$1/1024}')\"\n    local r_memfree_gib && r_memfree_gib=\"$(echo \"$r_memfree_kib\" | awk '{printf \"%.2f\\n\",$1/1048576}')\"\n    local r_memused_kib && r_memused_kib=\"$(echo \"$r_memtotal_kib\" \"$r_memfree_kib\" | awk '{printf $1-$2}')\"\n    local r_memused_mib && r_memused_mib=\"$(echo \"$r_memused_kib\" | awk '{printf \"%.2f\\n\",$1/1024}')\"\n    local r_memused_gib && r_memused_gib=\"$(echo \"$r_memused_kib\" | awk '{printf \"%.2f\\n\",$1/1048576}')\"\n    # 交换信息\n    local r_swaptotal_kib && r_swaptotal_kib=\"$(awk '/SwapTotal/{print $2}' /proc/meminfo | head -n1)\"\n    local r_swaptotal_mib && r_swaptotal_mib=\"$(echo \"$r_swaptotal_kib\" | awk '{printf \"%.2f\\n\",$1/1024}')\"\n    local r_swaptotal_gib && r_swaptotal_gib=\"$(echo \"$r_swaptotal_kib\" | awk '{printf \"%.2f\\n\",$1/1048576}')\"\n    local r_swapfree_kib && r_swapfree_kib=\"$(awk '/SwapFree/{print $2}' /proc/meminfo | head -n1)\"\n    local r_swapfree_mib && r_swapfree_mib=\"$(echo \"$r_swapfree_kib\" | awk '{printf \"%.2f\\n\",$1/1024}')\"\n    local r_swapfree_gib && r_swapfree_gib=\"$(echo \"$r_swapfree_kib\" | awk '{printf \"%.2f\\n\",$1/1048576}')\"\n    local r_swapused_kib && r_swapused_kib=\"$(echo \"$r_swaptotal_kib\" \"${r_swapfree_kib}\" | awk '{printf $1-$2}')\"\n    local r_swapused_mib && r_swapused_mib=\"$(echo \"$r_swapused_kib\" | awk '{printf \"%.2f\\n\",$1/1024}')\"\n    local r_swapused_gib && r_swapused_gib=\"$(echo \"$r_swapused_kib\" | awk '{printf \"%.2f\\n\",$1/1048576}')\"\n    # 数据加工\n    if [ \"$r_memused_kib\" -lt \"1024\" ] && [ \"$r_memtotal_kib\" -lt \"1048576\" ]; then\n        Result_Systeminfo_Memoryinfo=\"$r_memused_kib KiB / $r_memtotal_mib MiB\"\n    elif [ \"$r_memused_kib\" -lt \"1048576\" ] && [ \"$r_memtotal_kib\" -lt \"1048576\" ]; then\n        Result_Systeminfo_Memoryinfo=\"$r_memused_mib MiB / $r_memtotal_mib MiB\"\n    elif [ \"$r_memused_kib\" -lt \"1048576\" ] && [ \"$r_memtotal_kib\" -lt \"1073741824\" ]; then\n        Result_Systeminfo_Memoryinfo=\"$r_memused_mib MiB / $r_memtotal_gib GiB\"\n    else\n        Result_Systeminfo_Memoryinfo=\"$r_memused_gib GiB / $r_memtotal_gib GiB\"\n    fi\n    if [ \"$r_swaptotal_kib\" -eq \"0\" ]; then\n        Result_Systeminfo_Swapinfo=\"[ no swap partition or swap file detected ]\"\n    elif [ \"$r_swapused_kib\" -lt \"1024\" ] && [ \"$r_swaptotal_kib\" -lt \"1048576\" ]; then\n        Result_Systeminfo_Swapinfo=\"$r_swapused_kib KiB / $r_swaptotal_mib MiB\"\n    elif [ \"$r_swapused_kib\" -lt \"1024\" ] && [ \"$r_swaptotal_kib\" -lt \"1073741824\" ]; then\n        Result_Systeminfo_Swapinfo=\"$r_swapused_kib KiB / $r_swaptotal_gib GiB\"\n    elif [ \"$r_swapused_kib\" -lt \"1048576\" ] && [ \"$r_swaptotal_kib\" -lt \"1048576\" ]; then\n        Result_Systeminfo_Swapinfo=\"$r_swapused_mib MiB / $r_swaptotal_mib MiB\"\n    elif [ \"$r_swapused_kib\" -lt \"1048576\" ] && [ \"$r_swaptotal_kib\" -lt \"1073741824\" ]; then\n        Result_Systeminfo_Swapinfo=\"$r_swapused_mib MiB / $r_swaptotal_gib GiB\"\n    else\n        Result_Systeminfo_Swapinfo=\"$r_swapused_gib GiB / $r_swaptotal_gib GiB\"\n    fi\n}\n#\n# -> 系统信息模块 (Collector) -> 获取磁盘信息\nfunction BenchAPI_Systeminfo_GetDiskinfo() {\n    # 磁盘信息\n    local r_diskpath_root && r_diskpath_root=\"$(df -x tmpfs / | awk \"NR>1\" | sed \":a;N;s/\\\\n//g;ta\" | awk '{print $1}')\"\n    local r_disktotal_kib && r_disktotal_kib=\"$(df -x tmpfs / | grep -oE \"[0-9]{4,}\" | awk 'NR==1 {print $1}')\"\n    local r_disktotal_mib && r_disktotal_mib=\"$(echo \"$r_disktotal_kib\" | awk '{printf \"%.2f\\n\",$1/1024}')\"\n    local r_disktotal_gib && r_disktotal_gib=\"$(echo \"$r_disktotal_kib\" | awk '{printf \"%.2f\\n\",$1/1048576}')\"\n    local r_disktotal_tib && r_disktotal_tib=\"$(echo \"$r_disktotal_kib\" | awk '{printf \"%.2f\\n\",$1/1073741824}')\"\n    local r_diskused_kib && r_diskused_kib=\"$(df -x tmpfs / | grep -oE \"[0-9]{4,}\" | awk 'NR==2 {print $1}')\"\n    local r_diskused_mib && r_diskused_mib=\"$(echo \"$r_diskused_kib\" | awk '{printf \"%.2f\\n\",$1/1024}')\"\n    local r_diskused_gib && r_diskused_gib=\"$(echo \"$r_diskused_kib\" | awk '{printf \"%.2f\\n\",$1/1048576}')\"\n    local r_diskused_tib && r_diskused_tib=\"$(echo \"$r_diskused_kib\" | awk '{printf \"%.2f\\n\",$1/1073741824}')\"\n    local r_diskfree_kib && r_diskfree_kib=\"$(df -x tmpfs / | grep -oE \"[0-9]{4,}\" | awk 'NR==3 {print $1}')\"\n    local r_diskfree_mib && r_diskfree_mib=\"$(echo \"$r_diskfree_kib\" | awk '{printf \"%.2f\\n\",$1/1024}')\"\n    local r_diskfree_gib && r_diskfree_gib=\"$(echo \"$r_diskfree_kib\" | awk '{printf \"%.2f\\n\",$1/1048576}')\"\n    local r_diskfree_tib && r_diskfree_tib=\"$(echo \"$r_diskfree_kib\" | awk '{printf \"%.2f\\n\",$1/1073741824}')\"\n    # 数据加工\n    Result_Systeminfo_DiskRootPath=\"$r_diskpath_root\"\n    if [ \"$r_diskused_kib\" -lt \"1048576\" ]; then\n        Result_Systeminfo_Diskinfo=\"$r_diskused_mib MiB / $r_disktotal_mib MiB\"\n    elif [ \"$r_diskused_kib\" -lt \"1048576\" ] && [ \"$r_disktotal_kib\" -lt \"1073741824\" ]; then\n        Result_Systeminfo_Diskinfo=\"$r_diskused_mib MiB / $r_disktotal_gib GiB\"\n    elif [ \"$r_diskused_kib\" -lt \"1073741824\" ] && [ \"$r_disktotal_kib\" -lt \"1073741824\" ]; then\n        Result_Systeminfo_Diskinfo=\"$r_diskused_gib GiB / $r_disktotal_gib GiB\"\n    elif [ \"$r_diskused_kib\" -lt \"1073741824\" ] && [ \"$r_disktotal_kib\" -ge \"1073741824\" ]; then\n        Result_Systeminfo_Diskinfo=\"$r_diskused_gib GiB / $r_disktotal_tib TiB\"\n    else\n        Result_Systeminfo_Diskinfo=\"$r_diskused_tib TiB / $r_disktotal_tib TiB\"\n    fi\n}\n#\n# -> 系统信息模块 (Collector) -> 获取虚拟化信息\nfunction BenchAPI_Systeminfo_GetVMMinfo() {\n    if [ -f \"/usr/bin/systemd-detect-virt\" ]; then\n        local r_vmmtype && r_vmmtype=\"$(/usr/bin/systemd-detect-virt 2>/dev/null)\"\n        case \"${r_vmmtype}\" in\n        kvm)\n            Result_Systeminfo_VMMType=\"KVM\"\n            Result_Systeminfo_VMMTypeShort=\"kvm\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        xen)\n            Result_Systeminfo_VMMType=\"Xen Hypervisor\"\n            Result_Systeminfo_VMMTypeShort=\"xen\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        microsoft)\n            Result_Systeminfo_VMMType=\"Microsoft Hyper-V\"\n            Result_Systeminfo_VMMTypeShort=\"microsoft\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        vmware)\n            Result_Systeminfo_VMMType=\"VMware\"\n            Result_Systeminfo_VMMTypeShort=\"vmware\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        oracle)\n            Result_Systeminfo_VMMType=\"Oracle VirtualBox\"\n            Result_Systeminfo_VMMTypeShort=\"oracle\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        parallels)\n            Result_Systeminfo_VMMType=\"Parallels\"\n            Result_Systeminfo_VMMTypeShort=\"parallels\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        qemu)\n            Result_Systeminfo_VMMType=\"QEMU\"\n            Result_Systeminfo_VMMTypeShort=\"qemu\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        amazon)\n            Result_Systeminfo_VMMType=\"Amazon Virtualization\"\n            Result_Systeminfo_VMMTypeShort=\"amazon\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        docker)\n            Result_Systeminfo_VMMType=\"Docker\"\n            Result_Systeminfo_VMMTypeShort=\"docker\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        openvz)\n            Result_Systeminfo_VMMType=\"OpenVZ (Virutozzo)\"\n            Result_Systeminfo_VMMTypeShort=\"openvz\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        lxc)\n            Result_Systeminfo_VMMTypeShort=\"lxc\"\n            Result_Systeminfo_VMMType=\"LXC\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        lxc-libvirt)\n            Result_Systeminfo_VMMType=\"LXC (Based on libvirt)\"\n            Result_Systeminfo_VMMTypeShort=\"lxc-libvirt\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        uml)\n            Result_Systeminfo_VMMType=\"User-mode Linux\"\n            Result_Systeminfo_VMMTypeShort=\"uml\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        systemd-nspawn)\n            Result_Systeminfo_VMMType=\"Systemd nspawn\"\n            Result_Systeminfo_VMMTypeShort=\"systemd-nspawn\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        bochs)\n            Result_Systeminfo_VMMType=\"BOCHS\"\n            Result_Systeminfo_VMMTypeShort=\"bochs\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        rkt)\n            Result_Systeminfo_VMMType=\"RKT\"\n            Result_Systeminfo_VMMTypeShort=\"rkt\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        zvm)\n            Result_Systeminfo_VMMType=\"S390 Z/VM\"\n            Result_Systeminfo_VMMTypeShort=\"zvm\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n            ;;\n        none)\n            Result_Systeminfo_VMMType=\"Dedicated\"\n            Result_Systeminfo_VMMTypeShort=\"none\"\n            Result_Systeminfo_isPhysical=\"1\"\n            if test -f \"/sys/class/iommu/dmar0/uevent\"; then\n                Result_Systeminfo_IOMMU=\"1\"\n            else\n                Result_Systeminfo_IOMMU=\"0\"\n            fi\n            return 0\n            ;;\n        *)\n            echo -e \"${Msg_Error} BenchAPI_Systeminfo_GetVirtinfo(): invalid result (${r_vmmtype}), please check parameter!\"\n            ;;\n        esac\n    fi\n    if [ -f \"/.dockerenv\" ]; then\n        Result_Systeminfo_VMMType=\"Docker\"\n        Result_Systeminfo_VMMTypeShort=\"docker\"\n        Result_Systeminfo_isPhysical=\"0\"\n        return 0\n    elif [ -c \"/dev/lxss\" ]; then\n        Result_Systeminfo_VMMType=\"Windows Subsystem for Linux\"\n        Result_Systeminfo_VMMTypeShort=\"wsl\"\n        Result_Systeminfo_isPhysical=\"0\"\n        return 0\n    else\n        if [ -f \"/proc/1/cgroup\" ] && grep -q \"docker\" /proc/1/cgroup 2>/dev/null; then\n            Result_Systeminfo_VMMType=\"Docker\"\n            Result_Systeminfo_VMMTypeShort=\"docker\"\n            Result_Systeminfo_isPhysical=\"0\"\n            return 0\n        fi\n        Result_Systeminfo_VMMType=\"Dedicated\"\n        Result_Systeminfo_VMMTypeShort=\"none\"\n        if test -f \"/sys/class/iommu/dmar0/uevent\"; then\n            Result_Systeminfo_IOMMU=\"1\"\n        else\n            Result_Systeminfo_IOMMU=\"0\"\n        fi\n        return 0\n    fi\n}\n#\n# -> 系统信息模块 (Collector) -> 获取Linux发行版信息\nfunction BenchAPI_Systeminfo_GetOSReleaseinfo() {\n    local r_arch && r_arch=\"$(arch)\"\n    Result_Systeminfo_OSArch=\"$r_arch\"\n    # CentOS/Red Hat 判断\n    if [ -f \"/etc/centos-release\" ] || [ -f \"/etc/redhat-release\" ]; then\n        Result_Systeminfo_OSReleaseNameShort=\"centos\"\n        local r_prettyname && r_prettyname=\"$(grep -oP '(?<=\\bPRETTY_NAME=\").*(?=\")' /etc/os-release)\"\n        local r_elrepo_version && r_elrepo_version=\"$(rpm -qa | grep -oP \"el[0-9]+\" | sort -ur | head -n1)\"\n        case \"$r_elrepo_version\" in\n        9 | el9)\n            Result_Systeminfo_OSReleaseVersionShort=\"9\"\n            Result_Systeminfo_OSReleaseNameFull=\"$r_prettyname ($r_arch)\"\n            return 0\n            ;;\n        8 | el8)\n            Result_Systeminfo_OSReleaseVersionShort=\"8\"\n            Result_Systeminfo_OSReleaseNameFull=\"$r_prettyname ($r_arch)\"\n            return 0\n            ;;\n        7 | el7)\n            Result_Systeminfo_OSReleaseVersionShort=\"7\"\n            Result_Systeminfo_OSReleaseNameFull=\"$r_prettyname ($r_arch)\"\n            return 0\n            ;;\n        6 | el6)\n            Result_Systeminfo_OSReleaseVersionShort=\"6\"\n            Result_Systeminfo_OSReleaseNameFull=\"$r_prettyname ($r_arch)\"\n            return 0\n            ;;\n        *)\n            echo -e \"${Msg_Error} BenchAPI_Systeminfo_GetOSReleaseinfo(): invalid result (CentOS/Redhat-$r_prettyname ($r_arch)), please check parameter!\"\n            exit 1\n            ;;\n        esac\n    elif [ -f \"/etc/lsb-release\" ]; then # Ubuntu\n        Result_Systeminfo_OSReleaseNameShort=\"ubuntu\"\n        local r_prettyname && r_prettyname=\"$(grep -oP '(?<=\\bPRETTY_NAME=\").*(?=\")' /etc/os-release)\"\n        Result_Systeminfo_OSReleaseVersion=\"$(grep -oP '(?<=\\bVERSION=\").*(?=\")' /etc/os-release)\"\n        Result_Systeminfo_OSReleaseVersionShort=\"$(grep -oP '(?<=\\bVERSION_ID=\").*(?=\")' /etc/os-release)\"\n        Result_Systeminfo_OSReleaseNameFull=\"$r_prettyname ($r_arch)\"\n        return 0\n    elif [ -f \"/etc/debian_version\" ]; then # Debian\n        Result_Systeminfo_OSReleaseNameShort=\"debian\"\n        local r_prettyname && r_prettyname=\"$(grep -oP '(?<=\\bPRETTY_NAME=\").*(?=\")' /etc/os-release)\"\n        Result_Systeminfo_OSReleaseVersion=\"$(grep -oP '(?<=\\bVERSION=\").*(?=\")' /etc/os-release)\"\n        Result_Systeminfo_OSReleaseVersionShort=\"$(grep -oP '(?<=\\bVERSION_ID=\").*(?=\")' /etc/os-release)\"\n        Result_Systeminfo_OSReleaseNameFull=\"$r_prettyname ($r_arch)\"\n        return 0\n    else\n        echo -e \"${Msg_Error} BenchAPI_Systeminfo_GetOSReleaseinfo(): invalid result ($r_prettyname ($r_arch)), please check parameter!\"\n    fi\n}\n#\n# -> 系统信息模块 (Collector) -> 获取Linux内核版本信息\n# function BenchAPI_Systeminfo_GetLinuxKernelinfo() {\n#     # 获取原始数据\n#     Result_Systeminfo_LinuxKernelVersion=\"$(uname -r)\"\n# }\n# ===========================================================================\n\n# =============== sysbench组件检测 部分 ===============\nget_sysbench_os_release() {\n    local OS_TYPE\n    case \"${Var_OSRelease}\" in\n    centos | rhel | almalinux | opencloudos) OS_TYPE=\"redhat\" ;;\n    ubuntu) OS_TYPE=\"ubuntu\" ;;\n    debian) OS_TYPE=\"debian\" ;;\n    fedora) OS_TYPE=\"fedora\" ;;\n    alpinelinux) OS_TYPE=\"alpinelinux\" ;;\n    arch) OS_TYPE=\"arch\" ;;\n    freebsd) OS_TYPE=\"freebsd\" ;;\n    openbsd) OS_TYPE=\"openbsd\" ;;\n    *) OS_TYPE=\"unknown\" ;;\n    esac\n    echo \"${OS_TYPE}\"\n}\n\nInstallSysbench() {\n    local os_release=$1\n    case \"$os_release\" in\n    ubuntu)\n        apt-get -y install sysbench || {\n            apt-get --fix-broken install -y\n            apt-get --no-install-recommends -y install sysbench\n        }\n        ;;\n    debian)\n        apt-get -y install sysbench || {\n            apt-get --fix-broken install -y\n            apt-get --no-install-recommends -y install sysbench\n        }\n        ;;\n    redhat)\n        yum -y install epel-release && yum -y install sysbench || {\n            cleanup_epel\n            dnf install epel-release -y && dnf install sysbench -y || {\n                _red \"Sysbench installation failed!\"\n                return 1\n            }\n        }\n        ;;\n    fedora)\n        dnf -y install sysbench || {\n            _red \"Sysbench installation failed!\"\n            return 1\n        }\n        ;;\n    arch)\n        pacman -S --needed --noconfirm sysbench libaio && ldconfig || {\n            _red \"Sysbench installation failed!\"\n            return 1\n        }\n        ;;\n    freebsd)\n        pkg install -y sysbench || {\n            _red \"Sysbench installation failed!\"\n            return 1\n        }\n        ;;\n    openbsd)\n        pkg_add -I sysbench || {\n            _red \"Sysbench installation failed!\"\n            return 1\n        }\n        ;;\n    alpinelinux)\n        echo -e \"${Msg_Warning}SysBench not supported on Alpine Linux, skipping...\"\n        Var_Skip_SysBench=\"1\"\n        ;;\n    *)\n        echo \"Error: Unknown OS release: $os_release\"\n        exit 1\n        ;;\n    esac\n}\n\nCheck_SysBench() {\n    if [ ! -f \"/usr/bin/sysbench\" ] && [ ! -f \"/usr/local/bin/sysbench\" ]; then\n        local os_release=$(get_sysbench_os_release)\n        if [ \"$os_release\" = \"alpinelinux\" ]; then\n            Var_Skip_SysBench=\"1\"\n        else\n            InstallSysbench \"$os_release\"\n        fi\n    fi\n    # 尝试编译安装\n    if [ ! -f \"/usr/bin/sysbench\" ] && [ ! -f \"/usr/local/bin/sysbench\" ]; then\n        echo -e \"${Msg_Warning}Sysbench Module install Failure, trying compile modules ...\"\n        Check_Sysbench_InstantBuild\n    fi\n    source ~/.bashrc\n    # 最终检测\n    if [ \"$(command -v sysbench)\" ] || [ -f \"/usr/bin/sysbench\" ] || [ -f \"/usr/local/bin/sysbench\" ]; then\n        _yellow \"Install sysbench successfully!\"\n    else\n        _red \"SysBench Moudle install Failure! Try Restart Bench or Manually install it! (/usr/bin/sysbench)\"\n        _blue \"Will try to test with geekbench5 instead later on\"\n        error_exit\n        test_cpu_type=\"gb5\"\n    fi\n    sleep 3\n}\n\nCheck_Sysbench_InstantBuild() {\n    # 检查是否支持编译安装\n    local supported_systems=\"centos|rhel|almalinux|opencloudos|ubuntu|debian|fedora|arch\"\n    if [[ ! ${Var_OSRelease} =~ $supported_systems ]]; then\n        echo -e \"${Msg_Warning}Unsupported operating system: ${Var_OSRelease}\"\n        return\n    fi\n    # 使用包管理器对应关系\n    local os_type=${Var_OSRelease}\n    case \"$os_type\" in\n    \"opencloudos\") os_type=\"centos\" ;;\n    \"rhel\") os_type=\"centos\" ;;\n    \"almalinux\") os_type=\"centos\" ;;\n    esac\n    echo -e \"${Msg_Info}Release Detected: ${os_type}\"\n    echo -e \"${Msg_Info}Preparing compile environment...\"\n    prepare_compile_env \"${os_type}\"\n    echo -e \"${Msg_Info}Downloading Source code (Version 1.0.20)...\"\n    mkdir -p /tmp/_LBench/src/\n    dfiles=(sysbench)\n    start_downloads \"${dfiles[@]}\"\n    mv ${TEMP_DIR}/sysbench-1.0.20 /tmp/_LBench/src/\n    echo -e \"${Msg_Info}Compiling Sysbench Module...\"\n    cd /tmp/_LBench/src/sysbench-1.0.20\n    ./autogen.sh && ./configure --without-mysql && make -j8 && make install\n    echo -e \"${Msg_Info}Cleaning up...\"\n    cd /tmp\n    rm -rf /tmp/_LBench/src/sysbench*\n}\n\ncleanup_epel() {\n    _yellow \"Cleaning up EPEL repositories...\"\n    rm -f /etc/yum.repos.d/*epel*\n    yum clean all\n}\n\nprepare_compile_env() {\n    local system=\"$1\"\n    case \"${system}\" in\n    redhat)\n        yum install -y epel-release || {\n            cleanup_epel\n            _yellow \"EPEL installation failed, continuing...\"\n        }\n        yum install -y wget curl make gcc gcc-c++ make automake libtool pkgconfig libaio-devel || {\n            _red \"Failed to install build dependencies!\"\n            return 1\n        }\n        ;;\n    debian | ubuntu)\n        apt-get update || {\n            apt-get --fix-broken install -y && apt-get update\n        }\n        apt-get -y install --no-install-recommends wget curl make automake libtool pkg-config libaio-dev unzip || {\n            apt-get --fix-broken install -y\n            apt-get -y install --no-install-recommends wget curl make automake libtool pkg-config libaio-dev unzip\n        }\n        ;;\n    fedora)\n        dnf install -y wget curl gcc gcc-c++ make automake libtool pkgconfig libaio-devel || {\n            _red \"Failed to install build dependencies!\"\n            return 1\n        }\n        ;;\n    arch)\n        pacman -S --needed --noconfirm wget curl gcc gcc make automake libtool pkgconfig libaio lib32-libaio || {\n            _red \"Failed to install build dependencies!\"\n            return 1\n        }\n        ;;\n    freebsd)\n        pkg install -y wget curl gcc gmake autoconf automake libtool pkgconf || {\n            _red \"Failed to install build dependencies!\"\n            return 1\n        }\n        ;;\n    openbsd)\n        pkg_add -I wget curl gcc gmake autoconf automake libtool pkgconf || {\n            _red \"Failed to install build dependencies!\"\n            return 1\n        }\n        ;;\n    *)\n        _red \"Unsupported operating system: ${system}\"\n        return 1\n        ;;\n    esac\n}\n\n# =============== CPU性能测试 部分 ===============\nRun_SysBench_CPU() {\n    # 调用方式: Run_SysBench_CPU \"线程数\" \"测试时长(s)\" \"测试遍数\" \"说明\"\n    # 变量初始化\n    maxtestcount=\"$3\"\n    local count=\"1\"\n    local TestScore=\"0\"\n    local TotalScore=\"0\"\n    # 运行测试\n    while [ $count -le $maxtestcount ]; do\n        echo -e \"\\r ${Font_Yellow}$4: ${Font_Suffix}\\t\\t$count/$maxtestcount \\c\"\n        sysbench_version=$(sysbench --version 2>&1 | awk '{print $2}')\n        local target_version=\"1.0.20\"\n        if [ \"${Var_OSRelease}\" == \"freebsd\" ]; then\n            # freebsd系统下测不准待官方修复，故而设置为0\n            local TestResult=\"events per second: 0\"\n        # elif [ \"$sysbench_version\" == \"$target_version\" ]; then\n        elif [ \"$(printf '%s\\n' \"$sysbench_version\" \"$target_version\" | sort -V | head -n 1)\" == \"$target_version\" ]; then\n            # 版本号大于或等于1.0.20使用新命令检测否则使用旧命令检测\n            local TestResult=\"$(sysbench cpu --threads=$1 --cpu-max-prime=10000 --events=1000000 --time=$2 run 2>&1)\"\n        else\n            local TestResult=\"$(sysbench --test=cpu --num-threads=$1 --cpu-max-prime=10000 --max-requests=1000000 --max-time=$2 run 2>&1)\"\n        fi\n        local TestScore=\"$(echo ${TestResult} | grep -oE \"events per second: [0-9]+\" | grep -oE \"[0-9]+\")\"\n        if [ -z \"$TestScore\" ]; then\n            TestScore=$(echo \"${TestResult}\" | grep -oE \"total number of events:\\s+[0-9]+\" | awk '{print $NF}' | awk -v time=\"$(echo \"${TestResult}\" | grep -oE \"total time:\\s+[0-9.]+[a-z]*\" | awk '{print $NF}')\" '{printf \"%.2f\\n\", $0 / time}')\n        fi\n        local TotalScore=\"$(echo \"${TotalScore} ${TestScore}\" | awk '{printf \"%d\",$1+$2}')\"\n        let count=count+1\n        local TestResult=\"\"\n        local TestScore=\"0\"\n    done\n    local ResultScore=\"$(echo \"${TotalScore} ${maxtestcount}\" | awk '{printf \"%d\",$1/$2}')\"\n    if [ \"$1\" = \"1\" ]; then\n        if [ \"$ResultScore\" -eq \"0\" ] || ([ \"$1\" -lt \"2\" ] && [ \"$ResultScore\" -gt \"100000\" ]); then\n            if [ \"$en_status\" = true ]; then\n                echo -e \"\\r ${Font_Yellow}$4: ${Font_Suffix}\\t\\t${Font_Red}sysbench test failed, please use this script option '-ctype gb5' to test${Font_Suffix}\"\n            else\n                echo -e \"\\r ${Font_Yellow}$4: ${Font_Suffix}\\t\\t${Font_Red}sysbench测试失效，请使用本脚本选项 '-ctype gb5' 进行测试${Font_Suffix}\"\n            fi\n        else\n            echo -e \"\\r ${Font_Yellow}$4: ${Font_Suffix}\\t\\t${Font_SkyBlue}${ResultScore}${Font_Suffix} ${Font_Yellow}Scores${Font_Suffix}\"\n        fi\n    elif [ \"$1\" -ge \"2\" ]; then\n        if [ \"$ResultScore\" -eq \"0\" ] || ([ \"$1\" -lt \"2\" ] && [ \"$ResultScore\" -gt \"100000\" ]); then\n            if [ \"$en_status\" = true ]; then\n                echo -e \"\\r ${Font_Yellow}$4: ${Font_Suffix}\\t\\t${Font_Red}sysbench test failed, please use this script option '-ctype gb5' to test${Font_Suffix}\"\n            else\n                echo -e \"\\r ${Font_Yellow}$4: ${Font_Suffix}\\t\\t${Font_Red}sysbench测试失效，请使用本脚本选项5中的gb4或gb5测试${Font_Suffix}\"\n            fi\n        else\n            echo -e \"\\r ${Font_Yellow}$4: ${Font_Suffix}\\t\\t${Font_SkyBlue}${ResultScore}${Font_Suffix} ${Font_Yellow}Scores${Font_Suffix}\"\n        fi\n    fi\n}\n\nFunction_SysBench_CPU_Fast() {\n    cd $myvar >/dev/null 2>&1\n    if [ \"$en_status\" = true ]; then\n        echo -e \" ${Font_Yellow}-> CPU test in progress (Fast Mode, 1-Pass @ 5sec)${Font_Suffix}\"\n        Run_SysBench_CPU \"1\" \"5\" \"1\" \"1 Thread(s) Test\"\n        sleep 1\n        if [ -n \"${Result_Systeminfo_CPUThreads}\" ] && [ \"${Result_Systeminfo_CPUThreads}\" -ge \"2\" ] >/dev/null 2>&1; then\n            Run_SysBench_CPU \"${Result_Systeminfo_CPUThreads}\" \"5\" \"1\" \"${Result_Systeminfo_CPUThreads} Thread(s) Test\"\n        elif [ -n \"${Result_Systeminfo_CPUCores}\" ] && [ \"${Result_Systeminfo_CPUCores}\" -ge \"2\" ] >/dev/null 2>&1; then\n            Run_SysBench_CPU \"${Result_Systeminfo_CPUCores}\" \"5\" \"1\" \"${Result_Systeminfo_CPUCores} Thread(s) Test\"\n        elif [ -n \"${cores}\" ] && [ \"${cores}\" -ge \"2\" ] >/dev/null 2>&1; then\n            Run_SysBench_CPU \"${cores}\" \"5\" \"1\" \"${cores} Thread(s) Test\"\n        fi\n    else\n        echo -e \" ${Font_Yellow}-> CPU 测试中 (Fast Mode, 1-Pass @ 5sec)${Font_Suffix}\"\n        Run_SysBench_CPU \"1\" \"5\" \"1\" \"1 线程测试(单核)得分\"\n        sleep 1\n        if [ -n \"${Result_Systeminfo_CPUThreads}\" ] && [ \"${Result_Systeminfo_CPUThreads}\" -ge \"2\" ] >/dev/null 2>&1; then\n            Run_SysBench_CPU \"${Result_Systeminfo_CPUThreads}\" \"5\" \"1\" \"${Result_Systeminfo_CPUThreads} 线程测试(多核)得分\"\n        elif [ -n \"${Result_Systeminfo_CPUCores}\" ] && [ \"${Result_Systeminfo_CPUCores}\" -ge \"2\" ] >/dev/null 2>&1; then\n            Run_SysBench_CPU \"${Result_Systeminfo_CPUCores}\" \"5\" \"1\" \"${Result_Systeminfo_CPUCores} 线程测试(多核)得分\"\n        elif [ -n \"${cores}\" ] && [ \"${cores}\" -ge \"2\" ] >/dev/null 2>&1; then\n            Run_SysBench_CPU \"${cores}\" \"5\" \"1\" \"${cores} 线程测试(多核)得分\"\n        fi\n    fi\n}\n\n# =============== 网速测试及延迟测试 部分 ===============\ndownload_speedtest_file() {\n    cd $myvar >/dev/null 2>&1\n    file=\"./speedtest-cli/speedtest\"\n    if [[ -e \"$file\" ]]; then\n        # _green \"speedtest found\"\n        return\n    fi\n    file=\"./speedtest-cli/speedtest-go\"\n    if [[ -e \"$file\" ]]; then\n        # _green \"speedtest-go found\"\n        return\n    fi\n    local sys_bit=\"$1\"\n    if [[ -z \"${CN}\" || \"${CN}\" != true ]]; then\n        if [ \"$speedtest_ver\" = \"1.2.0\" ]; then\n            local url1=\"https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-${sys_bit}.tgz\"\n            local url2=\"https://dl.lamp.sh/files/ookla-speedtest-1.2.0-linux-${sys_bit}.tgz\"\n        else\n            local url1=\"https://filedown.me/Linux/Tool/speedtest_cli/ookla-speedtest-1.0.0-${sys_bit}-linux.tgz\"\n            local url2=\"https://bintray.com/ookla/download/download_file?file_path=ookla-speedtest-1.0.0-${sys_bit}-linux.tgz\"\n        fi\n        curl --fail -sL -m 10 -o speedtest.tgz \"${url1}\" || curl --fail -sL -m 10 -o speedtest.tgz \"${url2}\"\n        if [[ $? -ne 0 ]]; then\n            # _red \"Error: Failed to download official speedtest-cli.\"\n            rm -rf speedtest.tgz*\n            # _yellow \"Try using the unofficial speedtest-go\"\n        fi\n        if [ \"$sys_bit\" = \"aarch64\" ]; then\n            sys_bit=\"arm64\"\n        fi\n        local url3=\"https://github.com/showwin/speedtest-go/releases/download/v${Speedtest_Go_version}/speedtest-go_${Speedtest_Go_version}_Linux_${sys_bit}.tar.gz\"\n        curl --fail -sL -m 10 -o speedtest.tar.gz \"${url3}\" || curl --fail -sL -m 15 -o speedtest.tar.gz \"${cdn_success_url}${url3}\"\n    else\n        if [ \"$sys_bit\" = \"aarch64\" ]; then\n            sys_bit=\"arm64\"\n        fi\n        local url3=\"https://github.com/showwin/speedtest-go/releases/download/v${Speedtest_Go_version}/speedtest-go_${Speedtest_Go_version}_Linux_${sys_bit}.tar.gz\"\n        curl -o speedtest.tar.gz \"${cdn_success_url}${url3}\"\n        # if [ $? -eq 0 ]; then\n        #     _green \"Used unofficial speedtest-go\"\n        # fi\n    fi\n    if [ ! -d \"./speedtest-cli\" ]; then\n        mkdir -p \"./speedtest-cli\"\n    fi\n    if [ -f \"./speedtest.tgz\" ]; then\n        tar -zxf speedtest.tgz -C ./speedtest-cli\n        chmod 777 ./speedtest-cli/speedtest\n        rm -rf speedtest.tgz*\n    elif [ -f \"./speedtest.tar.gz\" ]; then\n        tar -zxf speedtest.tar.gz -C ./speedtest-cli\n        chmod 777 ./speedtest-cli/speedtest-go\n        rm -rf speedtest.tar.gz*\n    else\n        _red \"Error: Failed to download speedtest tool.\"\n        exit 1\n    fi\n}\n\ninstall_speedtest() {\n    sys_bit=\"\"\n    local sysarch=\"$(uname -m)\"\n    case \"${sysarch}\" in\n    \"x86_64\" | \"x86\" | \"amd64\" | \"x64\") sys_bit=\"x86_64\" ;;\n    \"i386\" | \"i686\") sys_bit=\"i386\" ;;\n    \"aarch64\" | \"armv7l\" | \"armv8\" | \"armv8l\") sys_bit=\"aarch64\" ;;\n    \"s390x\") sys_bit=\"s390x\" ;;\n    \"riscv64\") sys_bit=\"riscv64\" ;;\n    \"ppc64le\") sys_bit=\"ppc64le\" ;;\n    \"ppc64\") sys_bit=\"ppc64\" ;;\n    *) sys_bit=\"x86_64\" ;;\n    esac\n    download_speedtest_file \"${sys_bit}\"\n}\n\nget_string_length() {\n    local nodeName=\"$1\"\n    local length\n    local converted\n    converted=$(echo -n \"$nodeName\" | iconv -f utf8 -t gb2312 2>/dev/null)\n    if [[ $? -eq 0 && -n \"$converted\" ]]; then\n        length=$(echo -n \"$converted\" | wc -c)\n        echo $length\n        return\n    fi\n    converted=$(echo -n \"$nodeName\" | iconv -f utf8 -t big5 2>/dev/null)\n    if [[ $? -eq 0 && -n \"$converted\" ]]; then\n        length=$(echo -n \"$converted\" | wc -c)\n        echo $length\n        return\n    fi\n    length=$(echo -n \"$nodeName\" | awk '{len=0; for(i=1;i<=length($0);i++){c=substr($0,i,1);if(c~/[^\\x00-\\x7F]/){len+=2}else{len++}}; print len}')\n    echo $length\n}\n\nspeed_test() {\n    cd $myvar >/dev/null 2>&1\n    local nodeName=\"$2\"\n    if [ ! -f \"./speedtest-cli/speedtest\" ]; then\n        if [ -z \"$1\" ]; then\n            if [ \"$usage_timeout\" = true ]; then\n                timeout 70s ./speedtest-cli/speedtest-go --ua=\"${BrowserUA}\" >./speedtest-cli/speedtest.log 2>&1\n            else\n                ./speedtest-cli/speedtest-go --ua=\"${BrowserUA}\" >./speedtest-cli/speedtest.log 2>&1\n            fi\n        else\n            if [ \"$usage_timeout\" = true ]; then\n                timeout 70s ./speedtest-cli/speedtest-go --server=$1 --ua=\"${BrowserUA}\" >./speedtest-cli/speedtest.log 2>&1\n            else\n                ./speedtest-cli/speedtest-go --server=$1 --ua=\"${BrowserUA}\" >./speedtest-cli/speedtest.log 2>&1\n            fi\n        fi\n        if [ $? -eq 0 ]; then\n            local dl_speed=$(grep -oP 'Download: \\K[\\d\\.]+' ./speedtest-cli/speedtest.log)\n            local up_speed=$(grep -oP 'Upload: \\K[\\d\\.]+' ./speedtest-cli/speedtest.log)\n            local latency=$(grep -oP 'Latency: \\K[\\d\\.]+' ./speedtest-cli/speedtest.log)\n            if [[ -n \"${latency}\" && \"${latency}\" == *.* ]]; then\n                latency=$(awk '{printf \"%.2f\", $1}' <<<\"${latency}\")\n            fi\n            if [[ -n \"${dl_speed}\" || -n \"${up_speed}\" || -n \"${latency}\" ]]; then\n                if [[ $selection =~ ^[1-5]$ ]]; then\n                    echo -e \"${nodeName}\\t ${up_speed}Mbps\\t ${dl_speed}Mbps\\t ${latency}ms\\t\"\n                else\n                    length=$(get_string_length \"$nodeName\")\n                    if [ $length -ge 8 ]; then\n                        echo -e \"${nodeName}\\t ${up_speed}Mbps\\t ${dl_speed}Mbps\\t ${latency}ms\\t\"\n                    else\n                        echo -e \"${nodeName}\\t\\t ${up_speed}Mbps\\t ${dl_speed}Mbps\\t ${latency}ms\\t\"\n                    fi\n                fi\n            fi\n        fi\n    else\n        if [ -z \"$1\" ]; then\n            ./speedtest-cli/speedtest --progress=no --accept-license --accept-gdpr >./speedtest-cli/speedtest.log 2>&1\n        else\n            ./speedtest-cli/speedtest --progress=no --server-id=$1 --accept-license --accept-gdpr >./speedtest-cli/speedtest.log 2>&1\n        fi\n        if [ $? -eq 0 ]; then\n            local dl_speed=$(awk '/Download/{print $3\" \"$4}' ./speedtest-cli/speedtest.log)\n            local up_speed=$(awk '/Upload/{print $3\" \"$4}' ./speedtest-cli/speedtest.log)\n            if [ \"$speedtest_ver\" = \"1.2.0\" ]; then\n                local latency=$(grep -oP 'Idle Latency:\\s+\\K[\\d\\.]+' ./speedtest-cli/speedtest.log)\n            else\n                local latency=$(grep -oP 'Latency:\\s+\\K[\\d\\.]+' ./speedtest-cli/speedtest.log)\n            fi\n            local packet_loss=$(awk -F': +' '/Packet Loss/{if($2==\"Not available.\"){print \"NULL\"}else{print $2}}' ./speedtest-cli/speedtest.log)\n            if [[ -n \"${dl_speed}\" || -n \"${up_speed}\" || -n \"${latency}\" ]]; then\n                if [[ $selection =~ ^[1-5]$ ]]; then\n                    echo -e \"${nodeName}\\t ${up_speed}\\t ${dl_speed}\\t ${latency}\\t  $packet_loss\"\n                else\n                    length=$(get_string_length \"$nodeName\")\n                    if [ $length -ge 8 ]; then\n                        echo -e \"${nodeName}\\t ${up_speed}\\t ${dl_speed}\\t ${latency}\\t  $packet_loss\"\n                    else\n                        echo -e \"${nodeName}\\t\\t ${up_speed}\\t ${dl_speed}\\t ${latency}\\t  $packet_loss\"\n                    fi\n                fi\n            fi\n        fi\n    fi\n}\n\nis_ipv4() {\n    local ip=$1\n    local regex=\"^([0-9]{1,3}\\.){3}[0-9]{1,3}$\"\n    if [[ $ip =~ $regex ]]; then\n        return 0 # 符合IPv4格式\n    else\n        return 1 # 不符合IPv4格式\n    fi\n}\n\ntest_list() {\n    local list=(\"$@\")\n    if [ ${#list[@]} -eq 0 ]; then\n        echo \"列表为空，程序退出\"\n        return\n    fi\n    for ((i = 0; i < ${#list[@]}; i += 1)); do\n        id=$(echo \"${list[i]}\" | cut -d',' -f1)\n        name=$(echo \"${list[i]}\" | cut -d',' -f2)\n        speed_test \"$id\" \"$name\"\n    done\n}\n\ntemp_head() {\n    if [ \"$en_status\" = true ]; then\n        echo \"------------------------------Speedtest---------------------------------\"\n        if [[ $selection =~ ^[1-5]$ ]]; then\n            if [ -f \"./speedtest-cli/speedtest\" ]; then\n                echo -e \"Location\\t     Upload\\t\\t  Download\\t Delay\\t  Loss\"\n            else\n                echo -e \"Location\\t     Upload\\t\\t Download\\t Delay\"\n            fi\n        else\n            if [ -f \"./speedtest-cli/speedtest\" ]; then\n                echo -e \"Location\\t Upload\\t\\t Download\\t Delay\\t Loss\"\n            else\n                echo -e \"Location\\t Upload\\t\\t  Download\\t Delay\"\n            fi\n        fi\n    else\n        echo \"--------------------自动更新测速节点列表--本脚本原创--------------------\"\n        if [[ $selection =~ ^[1-5]$ ]]; then\n            if [ -f \"./speedtest-cli/speedtest\" ]; then\n                echo -e \"位置\\t         上传速度\\t 下载速度\\t 延迟\\t  丢包率\"\n            else\n                echo -e \"位置\\t         上传速度\\t 下载速度\\t 延迟\"\n            fi\n        else\n            if [ -f \"./speedtest-cli/speedtest\" ]; then\n                echo -e \"位置\\t\\t 上传速度\\t 下载速度\\t 延迟\\t  丢包率\"\n            else\n                echo -e \"位置\\t\\t 上传速度\\t 下载速度\\t 延迟\"\n            fi\n        fi\n    fi\n}\n\nping_test() {\n    local ip=\"$1\"\n    local result=\"$(ping -c1 -w3 \"$ip\" 2>/dev/null | awk -F '/' 'END {print $5}')\"\n    echo \"$ip,$result\"\n}\n\nget_nearest_data() {\n    local url=\"$1\"\n    local data=()\n    local response\n    if [[ -z \"${CN}\" || \"${CN}\" != true ]]; then\n        local retries=0\n        while [[ $retries -lt 2 ]]; do\n            response=$(curl -sL -m 2 \"$url\")\n            if [[ $? -eq 0 ]]; then\n                break\n            else\n                retries=$((retries + 1))\n                sleep 1\n            fi\n        done\n        if [[ $retries -eq 2 ]]; then\n            url=\"${cdn_success_url}${url}\"\n            response=$(curl -sL -m 6 \"$url\")\n        fi\n    else\n        url=\"${cdn_success_url}${url}\"\n        response=$(curl -sL -m 8 \"$url\")\n    fi\n    while read line; do\n        if [[ -n \"$line\" ]]; then\n            local id=$(echo \"$line\" | awk -F ',' '{print $1}')\n            local city=$(echo \"$line\" | sed 's/ //g' | awk -F ',' '{print $4}')\n            local ip=$(echo \"$line\" | awk -F ',' '{print $5}')\n            if [[ \"$id,$city,$ip\" == \"id,city,ip\" ]]; then\n                continue\n            fi\n            if [[ $url == *\"Mobile\"* ]]; then\n                city=\"移动${city}\"\n            elif [[ $url == *\"Telecom\"* ]]; then\n                city=\"电信${city}\"\n            elif [[ $url == *\"Unicom\"* ]]; then\n                city=\"联通${city}\"\n            fi\n            if [ \"$en_status\" = true ]; then\n                city=$(echo \"$city\" | sed 's/洛杉矶/US_LosAngeles/g')\n                city=$(echo \"$city\" | sed 's/法兰克福/DE_Frankfurt/g')\n                city=$(echo \"$city\" | sed 's/新加坡/SG_Singapore/g')\n                city=$(echo \"$city\" | sed 's/中国香港/HK_HongKong/g')\n                city=$(echo \"$city\" | sed 's/日本东京/JP_Tokyo/g')\n            fi\n            data+=(\"$id,$city,$ip\")\n        fi\n    done <<<\"$response\"\n    rm -f /tmp/pingtest\n    # 并行ping测试所有IP\n    for ((i = 0; i < ${#data[@]}; i++)); do\n        {\n            ip=$(echo \"${data[$i]}\" | awk -F ',' '{print $3}')\n            ping_test \"$ip\" >>/tmp/pingtest\n        } &\n    done\n    wait\n    # 取IP顺序列表results\n    output=$(cat /tmp/pingtest)\n    rm -f /tmp/pingtest\n    IFS=$'\\n' read -rd '' -a lines <<<\"$output\"\n    results=()\n    for line in \"${lines[@]}\"; do\n        field=$(echo \"$line\" | cut -d',' -f1)\n        results+=(\"$field\")\n    done\n\n    # 比对data取IP对应的数组\n    sorted_data=()\n    for result in \"${results[@]}\"; do\n        for item in \"${data[@]}\"; do\n            if [[ \"$item\" == *\"$result\"* ]]; then\n                id=$(echo \"$item\" | cut -d',' -f1)\n                name=$(echo \"$item\" | cut -d',' -f2)\n                sorted_data+=(\"$id,$name\")\n            fi\n        done\n    done\n    sorted_data=(\"${sorted_data[@]:0:2}\")\n\n    # 返回结果\n    echo \"${sorted_data[@]}\"\n}\n\nchecknslookup() {\n    _yellow \"checking nslookup\"\n    if ! command -v nslookup &>/dev/null; then\n        _yellow \"Installing dnsutils\"\n        ${PACKAGE_INSTALL[int]} dnsutils\n    fi\n}\n\nget_ip_from_url() {\n    nslookup -querytype=A $1 2>/dev/null | awk '/^Name:/ {next;} /^Address: / { print $2 }'\n}\n\nget_nearest_data2() {\n    local url=\"$1\"\n    local data=()\n    local response\n    if [[ -z \"${CN}\" || \"${CN}\" != true ]]; then\n        local retries=0\n        while [[ $retries -lt 2 ]]; do\n            response=$(curl -sL -m 2 \"$url\")\n            if [[ $? -eq 0 ]]; then\n                break\n            else\n                retries=$((retries + 1))\n                sleep 1\n            fi\n        done\n        if [[ $retries -eq 2 ]]; then\n            url=\"${cdn_success_url}${url}\"\n            response=$(curl -sL -m 6 \"$url\")\n        fi\n    else\n        url=\"${cdn_success_url}${url}\"\n        response=$(curl -sL -m 8 \"$url\")\n    fi\n    ip_list=()\n    city_list=()\n    while read line; do\n        if [[ -n \"$line\" ]]; then\n            # local id=$(echo \"$line\" | awk -F ',' '{print $1}')\n            local city=$(echo \"$line\" | sed 's/ //g' | awk -F ',' '{print $9}')\n            city=${city/市/}\n            city=${city/中国/}\n            local host=$(echo \"$line\" | awk -F ',' '{print $6}')\n            local host_url=$(echo $host | sed 's/:.*//')\n            if [[ \"$host,$city\" == \"host,city\" || \"$city\" == *\"香港\"* || \"$city\" == *\"台湾\"* ]]; then\n                continue\n            fi\n            if is_ipv4 \"$host_url\"; then\n                local ip=\"$host_url\"\n            else\n                local ip=$(get_ip_from_url ${host_url})\n            fi\n            if [[ $url == *\"mobile\"* ]]; then\n                city=\"移动${city}\"\n            elif [[ $url == *\"telecom\"* ]]; then\n                city=\"电信${city}\"\n            elif [[ $url == *\"unicom\"* ]]; then\n                city=\"联通${city}\"\n            fi\n            if [ \"$en_status\" = true ]; then\n                city=$(echo \"$city\" | sed 's/洛杉矶/US_LosAngeles/g')\n                city=$(echo \"$city\" | sed 's/法兰克福/DE_Frankfurt/g')\n                city=$(echo \"$city\" | sed 's/新加坡/SG_Singapore/g')\n                city=$(echo \"$city\" | sed 's/中国香港/HK_HongKong/g')\n                city=$(echo \"$city\" | sed 's/日本东京/JP_Tokyo/g')\n            fi\n            if [[ ! \" ${ip_list[@]} \" =~ \" ${ip} \" ]] && [[ ! \" ${city_list[@]} \" =~ \" ${city} \" ]]; then\n                data+=(\"$host,$city,$ip\")\n                ip_list+=(\"$ip\")\n                city_list+=(\"$city\")\n            fi\n        fi\n    done <<<\"$response\"\n\n    rm -f /tmp/pingtest\n    for ((i = 0; i < ${#data[@]}; i++)); do\n        {\n            ip=$(echo \"${ip_list[$i]}\")\n            ping_test \"$ip\" >>/tmp/pingtest\n        } &\n    done\n    wait\n\n    output=$(cat /tmp/pingtest)\n    rm -f /tmp/pingtest\n    IFS=$'\\n' read -rd '' -a lines <<<\"$output\"\n    results=()\n    for line in \"${lines[@]}\"; do\n        field=$(echo \"$line\" | cut -d',' -f1)\n        results+=(\"$field\")\n    done\n\n    sorted_data=()\n    for result in \"${results[@]}\"; do\n        for item in \"${data[@]}\"; do\n            if [[ \"$(echo \"$item\" | cut -d ',' -f 3)\" == \"$result\" ]]; then\n                # \t      if [[ \"$item\" == *\"$result\"* ]]; then\n                host=$(echo \"$item\" | cut -d',' -f1)\n                name=$(echo \"$item\" | cut -d',' -f2)\n                sorted_data+=(\"$host,$name\")\n            fi\n        done\n    done\n    sorted_data=(\"${sorted_data[@]:0:2}\")\n\n    echo \"${sorted_data[@]}\"\n}\n\nspeed_test2() {\n    local nodeName=\"$2\"\n    if [ ! -f \"./speedtest-cli/speedtest\" ]; then\n        if [ -z \"$1\" ]; then\n            if [ \"$usage_timeout\" = true ]; then\n                timeout 70s ./speedtest-cli/speedtest-go >./speedtest-cli/speedtest.log 2>&1\n            else\n                ./speedtest-cli/speedtest-go >./speedtest-cli/speedtest.log 2>&1\n            fi\n        else\n            if [ \"$usage_timeout\" = true ]; then\n                timeout 70s ./speedtest-cli/speedtest-go --custom-url=http://\"$1\"/upload.php >./speedtest-cli/speedtest.log 2>&1\n            else\n                ./speedtest-cli/speedtest-go --custom-url=http://\"$1\"/upload.php >./speedtest-cli/speedtest.log 2>&1\n            fi\n        fi\n        if [ $? -eq 0 ]; then\n            local dl_speed=$(grep -oP 'Download: \\K[\\d\\.]+' ./speedtest-cli/speedtest.log)\n            local up_speed=$(grep -oP 'Upload: \\K[\\d\\.]+' ./speedtest-cli/speedtest.log)\n            local latency=$(grep -oP 'Latency: \\K[\\d\\.]+' ./speedtest-cli/speedtest.log)\n            if [[ -n \"${latency}\" && \"${latency}\" == *.* ]]; then\n                latency=$(awk '{printf \"%.2f\", $1}' <<<\"${latency}\")\n            fi\n            if [[ -n \"${dl_speed}\" || -n \"${up_speed}\" || -n \"${latency}\" ]]; then\n                if [[ $selection =~ ^[1-5]$ ]]; then\n                    echo -e \"\\r${nodeName}\\t ${up_speed} Mbps\\t ${dl_speed} Mbps\\t ${latency}\\t\"\n                else\n                    length=$(get_string_length \"$nodeName\")\n                    if [ $length -ge 8 ]; then\n                        echo -e \"\\r${nodeName}\\t ${up_speed} Mbps\\t ${dl_speed} Mbps\\t ${latency}\\t\"\n                    else\n                        echo -e \"\\r${nodeName}\\t\\t ${up_speed} Mbps\\t ${dl_speed} Mbps\\t ${latency}\\t\"\n                    fi\n                fi\n            fi\n        fi\n    fi\n}\n\ncheck_to_cn_test() {\n    local provider_list=\"$1\"\n    local use_all=\"$2\"\n    shift 2\n    local data_array=(\"$@\")\n    if [ \"$test_network_type\" == \".cn\" ]; then\n        data_array=($(get_nearest_data2 \"${SERVER_BASE_URL2}/${provider_list}\")) >/dev/null 2>&1\n        wait\n        if [ ${#data_array[@]} -eq 0 ]; then\n            return\n        else\n            unset -f speed_test\n            speed_test() { speed_test2 \"$@\"; }\n            echo -en \"\\r测速中                                                        \\r\"\n            if [ \"$use_all\" = \"true\" ]; then\n                test_list \"${data_array[@]}\"\n            else\n                test_list \"${data_array[0]}\"\n            fi\n        fi\n    elif [ ${#data_array[@]} -eq 0 ] && [ -z \"$test_network_type\" ]; then\n        echo -n \"该运营商.net的节点列表为空，正在替换为.cn的节点列表。。。\"\n        CN=true\n        if [ -f \"./speedtest-cli/speedtest\" ]; then\n            rm -rf ./speedtest-cli/speedtest\n            (install_speedtest >/dev/null 2>&1)\n        fi\n        data_array=($(get_nearest_data2 \"${SERVER_BASE_URL2}/${provider_list}\")) >/dev/null 2>&1\n        wait\n        if [ ${#data_array[@]} -eq 0 ]; then\n            return\n        else\n            unset -f speed_test\n            speed_test() { speed_test2 \"$@\"; }\n            echo -en \"\\r测速中                                                        \\r\"\n            if [ \"$use_all\" = \"true\" ]; then\n                test_list \"${data_array[@]}\"\n            else\n                test_list \"${data_array[0]}\"\n            fi\n        fi\n    else\n        if [ \"$use_all\" = \"true\" ]; then\n            test_list \"${data_array[@]}\"\n        else\n            test_list \"${data_array[0]}\"\n        fi\n    fi\n}\n\nspeed() {\n    [ \"${Var_OSRelease}\" = \"freebsd\" ] && return\n    local ip4=$(echo \"$IPV4\" | tr -d '\\n' | tr -d '[:space:]')\n    if [[ -z \"${ip4}\" ]]; then\n        return\n    fi\n    temp_head\n    if [ \"$test_network_type\" != \".cn\" ]; then\n        speed_test '' 'Speedtest.net'\n    fi\n    test_list \"${ls_sg_hk_jp[@]}\"\n    if [ \"$en_status\" = false ]; then\n        check_to_cn_test \"unicom.csv\" \"true\" \"${CN_Unicom[@]}\"\n        check_to_cn_test \"telecom.csv\" \"true\" \"${CN_Telecom[@]}\"\n        check_to_cn_test \"mobile.csv\" \"true\" \"${CN_Mobile[@]}\"\n    fi\n}\n\nspeed2() {\n    [ \"${Var_OSRelease}\" = \"freebsd\" ] && return\n    local ip4=$(echo \"$IPV4\" | tr -d '\\n' | tr -d '[:space:]')\n    if [[ -z \"${ip4}\" ]]; then\n        return\n    fi\n    temp_head\n    if [ \"$test_network_type\" != \".cn\" ]; then\n        speed_test '' 'Speedtest.net'\n    fi\n    if [ \"$en_status\" = false ]; then\n        check_to_cn_test \"unicom.csv\" \"false\" \"${CN_Unicom[0]}\"\n        check_to_cn_test \"telecom.csv\" \"false\" \"${CN_Telecom[0]}\"\n        check_to_cn_test \"mobile.csv\" \"false\" \"${CN_Mobile[0]}\"\n    fi\n}\n\n# =============== 磁盘测试 部分 ===============\nRun_DiskTest_DD() {\n    # 调用方式: Run_DiskTest_DD \"测试文件名\" \"块大小\" \"写入次数\" \"测试项目名称\"\n    mkdir -p /.tmp_LBench/DiskTest >/dev/null 2>&1\n    mkdir -p ${WorkDir}/data >/dev/null 2>&1\n    local Var_DiskTestResultFile=\"${WorkDir}/data/disktest_result\"\n    # 将先测试读, 后测试写\n    echo -n -e \" $4\\t\\t->\\c\"\n    # 清理缓存, 避免影响测试结果\n    sync\n    if [ \"${Result_Systeminfo_VMMTypeShort}\" != \"docker\" ] && [ \"${Result_Systeminfo_VMMTypeShort}\" != \"openvz\" ] && [ \"${Result_Systeminfo_VMMTypeShort}\" != \"lxc\" ] && [ \"${Result_Systeminfo_VMMTypeShort}\" != \"wsl\" ]; then\n        echo 3 | sudo tee /proc/sys/vm/drop_caches >/dev/null 2>&1\n    fi\n    # 避免磁盘压力过高, 启动测试前暂停1s\n    sleep 1\n    # 正式写测试\n    dd if=/dev/zero of=/.tmp_LBench/DiskTest/$1 bs=$2 count=$3 oflag=direct 2>${Var_DiskTestResultFile}\n    local DiskTest_WriteSpeed_ResultRAW=\"$(cat ${Var_DiskTestResultFile} | grep -oE \"[0-9]{1,4} kB/s|[0-9]{1,4}.[0-9]{1,2} kB/s|[0-9]{1,4} KB/s|[0-9]{1,4}.[0-9]{1,2} KB/s|[0-9]{1,4} MB/s|[0-9]{1,4}.[0-9]{1,2} MB/s|[0-9]{1,4} GB/s|[0-9]{1,4}.[0-9]{1,2} GB/s|[0-9]{1,4} TB/s|[0-9]{1,4}.[0-9]{1,2} TB/s|[0-9]{1,4} kB/秒|[0-9]{1,4}.[0-9]{1,2} kB/秒|[0-9]{1,4} KB/秒|[0-9]{1,4}.[0-9]{1,2} KB/秒|[0-9]{1,4} MB/秒|[0-9]{1,4}.[0-9]{1,2} MB/秒|[0-9]{1,4} GB/秒|[0-9]{1,4}.[0-9]{1,2} GB/秒|[0-9]{1,4} TB/秒|[0-9]{1,4}.[0-9]{1,2} TB/秒|[0-9]{1,4} bytes/sec\")\"\n    DiskTest_WriteSpeed=\"$(echo \"${DiskTest_WriteSpeed_ResultRAW}\" | sed \"s/秒/s/\")\"\n    local DiskTest_WriteTime_ResultRAW=\"$(cat ${Var_DiskTestResultFile} | grep -oE \"[0-9]{1,}.[0-9]{1,} s|[0-9]{1,}.[0-9]{1,} s|[0-9]{1,}.[0-9]{1,} 秒|[0-9]{1,}.[0-9]{1,} 秒\")\"\n    DiskTest_WriteTime=\"$(echo ${DiskTest_WriteTime_ResultRAW} | awk '{print $1}')\"\n    DiskTest_WriteIOPS=$(awk -v t=\"${DiskTest_WriteTime}\" -v c=\"${3}\" 'BEGIN{ printf \"%.0f\\n\", c / t }')\n    DiskTest_WritePastTime=\"$(echo ${DiskTest_WriteTime} | awk '{printf \"%.2f\\n\",$1}')\"\n    if [ ${DiskTest_WriteIOPS} -ge 10000 ]; then\n        DiskTest_WriteIOPS=$(awk -v i=\"${DiskTest_WriteIOPS}\" 'BEGIN{ printf \"%.2f\\n\", i / 1000 }')\n        echo -n -e \"\\r $4\\t\\t${Font_SkyBlue}${DiskTest_WriteSpeed} (${DiskTest_WriteIOPS}K IOPS, ${DiskTest_WritePastTime}s)${Font_Suffix}\\t\\t->\\c\"\n    else\n        echo -n -e \"\\r $4\\t\\t${Font_SkyBlue}${DiskTest_WriteSpeed} (${DiskTest_WriteIOPS} IOPS, ${DiskTest_WritePastTime}s)${Font_Suffix}\\t\\t->\\c\"\n    fi\n    # 清理结果文件, 准备下一次测试\n    rm -f ${Var_DiskTestResultFile}\n    # 清理缓存, 避免影响测试结果\n    sync\n    if [ \"${Result_Systeminfo_VMMTypeShort}\" != \"docker\" ] && [ \"${Result_Systeminfo_VMMTypeShort}\" != \"wsl\" ]; then\n        if [ -w /proc/sys/vm/drop_caches ]; then\n            echo 3 >/proc/sys/vm/drop_caches >/dev/null 2>&1\n        fi\n    fi\n    sleep 0.5\n    # 正式读测试\n    dd if=/.tmp_LBench/DiskTest/$1 of=/dev/null bs=$2 count=$3 iflag=direct 2>${Var_DiskTestResultFile}\n    local DiskTest_ReadSpeed_ResultRAW=\"$(cat ${Var_DiskTestResultFile} | grep -oE \"[0-9]{1,4} kB/s|[0-9]{1,4}.[0-9]{1,2} kB/s|[0-9]{1,4} KB/s|[0-9]{1,4}.[0-9]{1,2} KB/s|[0-9]{1,4} MB/s|[0-9]{1,4}.[0-9]{1,2} MB/s|[0-9]{1,4} GB/s|[0-9]{1,4}.[0-9]{1,2} GB/s|[0-9]{1,4} TB/s|[0-9]{1,4}.[0-9]{1,2} TB/s|[0-9]{1,4} kB/秒|[0-9]{1,4}.[0-9]{1,2} kB/秒|[0-9]{1,4} KB/秒|[0-9]{1,4}.[0-9]{1,2} KB/秒|[0-9]{1,4} MB/秒|[0-9]{1,4}.[0-9]{1,2} MB/秒|[0-9]{1,4} GB/秒|[0-9]{1,4}.[0-9]{1,2} GB/秒|[0-9]{1,4} TB/秒|[0-9]{1,4}.[0-9]{1,2} TB/秒|[0-9]{1,4} bytes/sec\")\"\n    DiskTest_ReadSpeed=\"$(echo \"${DiskTest_ReadSpeed_ResultRAW}\" | sed \"s/s/s/\")\"\n    local DiskTest_ReadTime_ResultRAW=\"$(cat ${Var_DiskTestResultFile} | grep -oE \"[0-9]{1,}.[0-9]{1,} s|[0-9]{1,}.[0-9]{1,} s|[0-9]{1,}.[0-9]{1,} 秒|[0-9]{1,}.[0-9]{1,} 秒\")\"\n    DiskTest_ReadTime=\"$(echo ${DiskTest_ReadTime_ResultRAW} | awk '{print $1}')\"\n    DiskTest_ReadIOPS=\"$(echo ${DiskTest_ReadTime} $3 | awk '{printf \"%d\\n\",$2/$1}')\"\n    DiskTest_ReadPastTime=\"$(echo ${DiskTest_ReadTime} | awk '{printf \"%.2f\\n\",$1}')\"\n    rm -f ${Var_DiskTestResultFile}\n    # 输出结果\n    echo -n -e \"\\r $4\\t\\t${Font_SkyBlue}${DiskTest_WriteSpeed} (${DiskTest_WriteIOPS} IOPS, ${DiskTest_WritePastTime}s)${Font_Suffix}\\t\\t${Font_SkyBlue}${DiskTest_ReadSpeed} (${DiskTest_ReadIOPS} IOPS, ${DiskTest_ReadPastTime}s)${Font_Suffix}\\n\"\n    rm -rf /.tmp_LBench/DiskTest/\n}\n\nFunction_DiskTest_Fast() {\n    if [ \"$en_status\" = true ]; then\n        echo -e \" ${Font_Yellow}-> Disk test in progress (4K Block/1M Block, Direct Mode)${Font_Suffix}\"\n    else\n        echo -e \" ${Font_Yellow}-> 磁盘IO测试中 (4K Block/1M Block, Direct Mode)${Font_Suffix}\"\n    fi\n    if [ \"${Result_Systeminfo_VMMType}\" = \"docker\" ] || [ \"${Result_Systeminfo_VMMType}\" = \"wsl\" ]; then\n        echo -e \" ${Msg_Warning}Due to virt architecture limit, the result may affect by the cache !\"\n    fi\n    if [ \"$en_status\" = true ]; then\n        echo -e \" ${Font_Yellow}Block Size\\t\\tWrite Test\\t\\t\\t\\tRead Test${Font_Suffix}\"\n    else\n        echo -e \" ${Font_Yellow}测试操作\\t\\t写速度\\t\\t\\t\\t\\t读速度${Font_Suffix}\"\n    fi\n    Run_DiskTest_DD \"100MB.test\" \"4k\" \"25600\" \"100MB-4K Block\"\n    Run_DiskTest_DD \"1GB.test\" \"1M\" \"1000\" \"1GB-1M Block\"\n    sleep 0.5\n}\n\n# =============== SysBench - 内存性能 部分 ===============\nRun_SysBench_Memory() {\n    # 调用方式: Run_SysBench_Memory \"线程数\" \"测试时长(s)\" \"测试遍数\" \"测试模式(读/写)\" \"读写方式(顺序/随机)\" \"说明\"\n    # 变量初始化\n    maxtestcount=\"$3\"\n    local count=\"1\"\n    local TestScore=\"0.00\"\n    local TestSpeed=\"0.00\"\n    local TotalScore=\"0.00\"\n    local TotalSpeed=\"0.00\"\n    if [ \"$1\" -ge \"2\" ]; then\n        MultiThread_Flag=\"1\"\n    else\n        MultiThread_Flag=\"0\"\n    fi\n    # 运行测试\n    while [ $count -le $maxtestcount ]; do\n        if [ \"$1\" -ge \"2\" ] && [ \"$4\" = \"write\" ]; then\n            echo -e \"\\r ${Font_Yellow}$6:${Font_Suffix}\\t$count/$maxtestcount \\c\"\n        else\n            echo -e \"\\r ${Font_Yellow}$6:${Font_Suffix}\\t\\t$count/$maxtestcount \\c\"\n        fi\n        local TestResult=\"$(sysbench --test=memory --num-threads=$1 --memory-block-size=1M --memory-total-size=102400G --memory-oper=$4 --max-time=$2 --memory-access-mode=$5 run 2>&1)\"\n        # 判断是MB还是MiB\n        echo \"${TestResult}\" | grep -oE \"MiB\" >/dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            local MiB_Flag=\"1\"\n        else\n            local MiB_Flag=\"0\"\n        fi\n        local TestScore=\"$(echo \"${TestResult}\" | grep -oE \"[0-9]{1,}.[0-9]{1,2} ops/sec|[0-9]{1,}.[0-9]{1,2} per second\" | grep -oE \"[0-9]{1,}.[0-9]{1,2}\")\"\n        local TestSpeed=\"$(echo \"${TestResult}\" | grep -oE \"[0-9]{1,}.[0-9]{1,2} MB/sec|[0-9]{1,}.[0-9]{1,2} MiB/sec\" | grep -oE \"[0-9]{1,}.[0-9]{1,2}\")\"\n        local TotalScore=\"$(echo \"${TotalScore} ${TestScore}\" | awk '{printf \"%.2f\",$1+$2}')\"\n        local TotalSpeed=\"$(echo \"${TotalSpeed} ${TestSpeed}\" | awk '{printf \"%.2f\",$1+$2}')\"\n        let count=count+1\n        local TestResult=\"\"\n        local TestScore=\"0.00\"\n        local TestSpeed=\"0.00\"\n    done\n    ResultScore=\"$(echo \"${TotalScore} ${maxtestcount} 1000\" | awk '{printf \"%.2f\",$1/$2/$3}')\"\n    if [ \"${MiB_Flag}\" = \"1\" ]; then\n        # MiB to MB\n        ResultSpeed=\"$(echo \"${TotalSpeed} ${maxtestcount} 1048576 1000000\" | awk '{printf \"%.2f\",$1/$2/$3*$4}')\"\n    else\n        # 直接输出\n        ResultSpeed=\"$(echo \"${TotalSpeed} ${maxtestcount}\" | awk '{printf \"%.2f\",$1/$2}')\"\n    fi\n\n    # 1线程的测试结果写入临时变量，方便与后续的多线程变量做对比\n    if [ \"$1\" = \"1\" ] && [ \"$4\" = \"read\" ]; then\n        LBench_Result_MemoryReadSpeedSingle=\"${ResultSpeed}\"\n    elif [ \"$1\" = \"1\" ] && [ \"$4\" = \"write\" ]; then\n        LBench_Result_MemoryWriteSpeedSingle=\"${ResultSpeed}\"\n    fi\n    if [ \"${MultiThread_Flag}\" = \"1\" ]; then\n        # 如果是多线程测试，输出与1线程测试对比的倍率\n        if [ \"$1\" -ge \"2\" ] && [ \"$4\" = \"read\" ]; then\n            LBench_Result_MemoryReadSpeedMulti=\"${ResultSpeed}\"\n            local readmultiple=\"$(echo \"${LBench_Result_MemoryReadSpeedMulti} ${LBench_Result_MemoryReadSpeedSingle}\" | awk '{printf \"%.2f\", $1/$2}')\"\n            echo -e \"\\r ${Font_Yellow}$6:${Font_Suffix}\\t\\t${Font_SkyBlue}${LBench_Result_MemoryReadSpeedMulti}${Font_Suffix} ${Font_Yellow}MB/s${Font_Suffix} (${readmultiple} x)\"\n        elif [ \"$1\" -ge \"2\" ] && [ \"$4\" = \"write\" ]; then\n            LBench_Result_MemoryWriteSpeedMulti=\"${ResultSpeed}\"\n            local writemultiple=\"$(echo \"${LBench_Result_MemoryWriteSpeedMulti} ${LBench_Result_MemoryWriteSpeedSingle}\" | awk '{printf \"%.2f\", $1/$2}')\"\n            echo -e \"\\r ${Font_Yellow}$6:${Font_Suffix}\\t\\t${Font_SkyBlue}${LBench_Result_MemoryWriteSpeedMulti}${Font_Suffix} ${Font_Yellow}MB/s${Font_Suffix} (${writemultiple} x)\"\n        fi\n    else\n        if [ \"$4\" = \"read\" ]; then\n            echo -e \"\\r ${Font_Yellow}$6:${Font_Suffix}\\t\\t${Font_SkyBlue}${ResultSpeed}${Font_Suffix} ${Font_Yellow}MB/s${Font_Suffix}\"\n        elif [ \"$4\" = \"write\" ]; then\n            echo -e \"\\r ${Font_Yellow}$6:${Font_Suffix}\\t\\t${Font_SkyBlue}${ResultSpeed}${Font_Suffix} ${Font_Yellow}MB/s${Font_Suffix}\"\n        fi\n    fi\n    sleep 0.5\n\n}\n\nFunction_SysBench_Memory_Fast() {\n    if [ \"$en_status\" = true ]; then\n        echo -e \" ${Font_Yellow}-> Memory Test (Fast Mode, 1-Pass @ 5sec)${Font_Suffix}\"\n        Run_SysBench_Memory \"1\" \"5\" \"1\" \"read\" \"seq\" \"Single Read Test\"\n        Run_SysBench_Memory \"1\" \"5\" \"1\" \"write\" \"seq\" \"Single Write Test\"\n    else\n        echo -e \" ${Font_Yellow}-> 内存测试 Test (Fast Mode, 1-Pass @ 5sec)${Font_Suffix}\"\n        Run_SysBench_Memory \"1\" \"5\" \"1\" \"read\" \"seq\" \"单线程读测试\"\n        Run_SysBench_Memory \"1\" \"5\" \"1\" \"write\" \"seq\" \"单线程写测试\"\n    fi\n    sleep 0.5\n}\n\n# =============== 机器配置检测 部分 ===============\ncalc_disk() {\n    local total_size=0\n    local array=$@\n    for size in ${array[@]}; do\n        [ \"${size}\" == \"0\" ] && size_t=0 || size_t=$(echo ${size:0:${#size}-1})\n        [ \"$(echo ${size:(-1)})\" == \"K\" ] && size=0\n        [ \"$(echo ${size:(-1)})\" == \"M\" ] && size=$(awk 'BEGIN{printf \"%.1f\", '$size_t' / 1024}')\n        [ \"$(echo ${size:(-1)})\" == \"T\" ] && size=$(awk 'BEGIN{printf \"%.1f\", '$size_t' * 1024}')\n        [ \"$(echo ${size:(-1)})\" == \"G\" ] && size=${size_t}\n        [ \"$(echo ${size:(-1)})\" == \"E\" ] && size=$(awk 'BEGIN{printf \"%.1f\", '$size_t' * 1024 * 1024}')\n        total_size=$(awk 'BEGIN{printf \"%.1f\", '$total_size' + '$size'}')\n    done\n    echo ${total_size}\n}\n\nis_private_ipv4() {\n    local ip_address=$1\n    local ip_parts\n    if [[ -z $ip_address ]]; then\n        return 0 # 输入为空\n    fi\n    IFS='.' read -r -a ip_parts <<<\"$ip_address\"\n    # 检查IP地址是否符合内网IP地址的范围\n    # 去除 回环，RFC 1918，多播，RFC 6598 地址\n    if [[ ${ip_parts[0]} -eq 10 ]] ||\n        [[ ${ip_parts[0]} -eq 172 && ${ip_parts[1]} -ge 16 && ${ip_parts[1]} -le 31 ]] ||\n        [[ ${ip_parts[0]} -eq 192 && ${ip_parts[1]} -eq 168 ]] ||\n        [[ ${ip_parts[0]} -eq 127 ]] ||\n        [[ ${ip_parts[0]} -eq 0 ]] ||\n        [[ ${ip_parts[0]} -eq 100 && ${ip_parts[1]} -ge 64 && ${ip_parts[1]} -le 127 ]] ||\n        [[ ${ip_parts[0]} -ge 224 ]]; then\n        return 0 # 是内网IP地址\n    else\n        return 1 # 不是内网IP地址\n    fi\n}\n\ncheck_ipv4() {\n    rm -rf /tmp/ip_quality_ipv4\n    IPV4=$(ip -4 addr show | grep global | awk '{print $2}' | cut -d '/' -f1 | head -n 1)\n    local response\n    if is_private_ipv4 \"$IPV4\"; then # 由于是内网IPV4地址，需要通过API获取外网地址\n        IPV4=\"\"\n        local API_NET=(\"ipv4.ip.sb\" \"ipget.net\" \"ip.ping0.cc\" \"https://ip4.seeip.org\" \"https://api.my-ip.io/ip\" \"https://ipv4.icanhazip.com\" \"api.ipify.org\")\n        for p in \"${API_NET[@]}\"; do\n            response=$(curl -s4m8 \"$p\")\n            if [ $? -eq 0 ] && ! echo \"$response\" | grep -q \"error\"; then\n                IP_API=\"$p\"\n                IPV4=\"$response\"\n                break\n            fi\n        done\n    fi\n    echo $IPV4 >/tmp/ip_quality_ipv4\n}\n\nis_private_ipv6() {\n    local address=$1\n    local temp=\"0\"\n    # 输入为空\n    if [[ ! -n $address ]]; then\n        temp=\"1\"\n    fi\n    # 输入不含:符号\n    if [[ -n $address && $address != *\":\"* ]]; then\n        temp=\"2\"\n    fi\n    # 检查IPv6地址是否以fe80开头（链接本地地址）\n    if [[ $address == fe80:* ]]; then\n        temp=\"3\"\n    fi\n    # 检查IPv6地址是否以fc00或fd00开头（唯一本地地址）\n    if [[ $address == fc00:* || $address == fd00:* ]]; then\n        temp=\"4\"\n    fi\n    # 检查IPv6地址是否以2001:db8开头（文档前缀）\n    if [[ $address == 2001:db8* ]]; then\n        temp=\"5\"\n    fi\n    # 检查IPv6地址是否以::1开头（环回地址）\n    if [[ $address == ::1 ]]; then\n        temp=\"6\"\n    fi\n    # 检查IPv6地址是否以::ffff:开头（IPv4映射地址）\n    if [[ $address == ::ffff:* ]]; then\n        temp=\"7\"\n    fi\n    # 检查IPv6地址是否以2002:开头（6to4隧道地址）\n    if [[ $address == 2002:* ]]; then\n        temp=\"8\"\n    fi\n    # 检查IPv6地址是否以2001:开头（Teredo隧道地址）\n    if [[ $address == 2001:* ]]; then\n        temp=\"9\"\n    fi\n    if [ \"$temp\" -gt 0 ]; then\n        # 非公网情况\n        return 0\n    else\n        # 其他情况为公网地址\n        return 1\n    fi\n}\n\ncheck_ipv6() {\n    rm -rf /tmp/ip_quality_ipv6\n    IPV6=$(ip -6 addr show | grep global | awk '{print length, $2}' | sort -nr | head -n 1 | awk '{print $2}' | cut -d '/' -f1)\n    local response\n    if is_private_ipv6 \"$IPV6\"; then # 由于是内网IPV4地址，需要通过API获取外网地址\n        IPV6=\"\"\n        local API_NET=(\"ipv6.ip.sb\" \"https://ipget.net\" \"ipv6.ping0.cc\" \"https://api.my-ip.io/ip\" \"https://ipv6.icanhazip.com\")\n        for p in \"${API_NET[@]}\"; do\n            response=$(curl -sLk6m8 \"$p\" | tr -d '[:space:]')\n            sleep 1\n            if [ $? -eq 0 ] && ! echo \"$response\" | grep -q \"error\"; then\n                IPV6=\"$response\"\n                break\n            fi\n        done\n    fi\n    echo $IPV6 >/tmp/ip_quality_ipv6\n}\n\ncheck_ip_info_by_ipinfo() {\n    # ipinfo.io\n    rm -rf /tmp/ipinfo\n    # 获取IPv4的asn、city、region、country\n    # 通过纯curl获取\n    local ip_info=$(curl -s http://ipinfo.io 2>/dev/null)\n    if [ $? -eq 0 ]; then\n        local ip=$(echo \"$ip_info\" | grep -o '\"ip\": \"[^\"]*' | cut -d'\"' -f4)\n        local city=$(echo \"$ip_info\" | grep -o '\"city\": \"[^\"]*' | cut -d'\"' -f4)\n        local region=$(echo \"$ip_info\" | grep -o '\"region\": \"[^\"]*' | cut -d'\"' -f4)\n        local country=$(echo \"$ip_info\" | grep -o '\"country\": \"[^\"]*' | cut -d'\"' -f4)\n        local asn=$(echo \"$ip_info\" | awk -F'\"' '/\"org\":/{gsub(/^[^:]*: \"/, \"\"); gsub(/\"$/, \"\"); print $0}')\n        if [ -z \"$asn\" ] || echo \"$asn\" | grep -qE \"(Comodo Secure DNS|Rate limit exceeded)|Your client does not have permission to get URL\" >/dev/null 2>&1; then\n            local ipv4_asn_info=\"None\"\n            local ipv4_location=\"None\"\n        else\n            local ipv4_city=$(echo \"$city\")\n            local ipv4_region=$(echo \"$region\")\n            local ipv4_country=$(echo \"$country\")\n            if [ -n \"$asn\" ] && [ -n \"$ipv4_city\" ] && [ -n \"$ipv4_country\" ]; then\n                local ipv4_asn_info=\"${asn}\"\n                local ipv4_location=\"${ipv4_city} / ${ipv4_region} / ${ipv4_country}\"\n            elif [ -n \"$asn\" ] && [ -n \"$ipv4_city\" ] && [ -z \"$ipv4_region\" ]; then\n                local ipv4_asn_info=\"${asn}\"\n                local ipv4_location=\"${ipv4_city} / ${ipv4_region}\"\n            elif [[ -n $asn && -n $ipv4_city ]]; then\n                local ipv4_asn_info=\"${asn}\"\n                local ipv4_location=\"${ipv4_city}\"\n            else\n                local ipv4_asn_info=\"None\"\n                local ipv4_location=\"None\"\n            fi\n        fi\n    else\n        # 通过模拟浏览器请求获取\n        local ipv4_asn=$(curl -ksL4m6 -A Mozilla ipinfo.io/org 2>/dev/null)\n        if [ \"$?\" -ne 0 ] || echo \"$ipv4_asn\" | grep -qE \"(Comodo Secure DNS|Rate limit exceeded)|Your client does not have permission to get URL\" >/dev/null 2>&1; then\n            local ipv4_asn_info=\"None\"\n            local ipv4_location=\"None\"\n        else\n            local ipv4_city=$(curl -ksL4m6 -A Mozilla ipinfo.io/city 2>/dev/null)\n            local ipv4_region=$(curl -ksL4m6 -A Mozilla ipinfo.io/region 2>/dev/null)\n            local ipv4_country=$(curl -ksL4m6 -A Mozilla ipinfo.io/country 2>/dev/null)\n            if [ -n \"$ipv4_asn\" ] && [ -n \"$ipv4_city\" ] && [ -n \"$ipv4_country\" ]; then\n                local ipv4_asn_info=\"${ipv4_asn}\"\n                local ipv4_location=\"${ipv4_city} / ${ipv4_region} / ${ipv4_country}\"\n            elif [[ -n $ipv4_asn && -n $ipv4_city && -n $ipv4_region ]]; then\n                local ipv4_asn_info=\"${ipv4_asn}\"\n                local ipv4_location=\"${ipv4_city} / ${ipv4_region}\"\n            elif [[ -n $ipv4_asn && -n $ipv4_city ]]; then\n                local ipv4_asn_info=\"${ipv4_asn}\"\n                local ipv4_location=\"${ipv4_city}\"\n            else\n                local ipv4_asn_info=\"None\"\n                local ipv4_location=\"None\"\n            fi\n        fi\n    fi\n    # 去除最后一个双引号后的内容\n    if [[ $ipv4_asn_info == *\"\\\"\"* ]]; then\n        ipv4_asn_info=\"${ipv4_asn_info%\\\"*}\"\n    fi\n    if [[ $ipv4_location == *\"\\\"\"* ]]; then\n        ipv4_location=\"${ipv4_location%\\\"*}\"\n    fi\n    if [[ $ipv6_asn_info == *\"\\\"\"* ]]; then\n        ipv6_asn_info=\"${ipv4_asn_info%\\\"*}\"\n    fi\n    if [[ $ipv6_location == *\"\\\"\"* ]]; then\n        ipv6_location=\"${ipv6_location%\\\"*}\"\n    fi\n    # 返回结果\n    echo \"$ipv4_asn_info\" >>/tmp/ipinfo\n    echo \"$ipv4_location\" >>/tmp/ipinfo\n    # 获取IPv6的asn、city和region - 无 - 该站点不支持IPV6网络识别\n    local ipv6_asn_info=\"None\"\n    local ipv6_location=\"None\"\n    # 返回结果\n    echo \"$ipv6_asn_info\" >>/tmp/ipinfo\n    echo \"$ipv6_location\" >>/tmp/ipinfo\n}\n\ncheck_ip_info_by_cloudflare() {\n    # cloudflare.com\n    rm -rf /tmp/cloudflare\n    # 获取 IPv4 信息\n    local ipv4_output=$(curl -ksL4m6 -A Mozilla https://speed.cloudflare.com/meta 2>/dev/null)\n    # 提取 IPv4 的 asn、asOrganization、city 和 region\n    local ipv4_asn=$(echo \"$ipv4_output\" | grep -oE '\"asn\":[0-9]+' | grep -oE '[0-9]+')\n    local ipv4_as_organization=$(echo \"$ipv4_output\" | grep -oE '\"asOrganization\":\"[^\"]+\"' | grep -oE '\":\"[^\"]+\"' | sed 's/\":\"//g')\n    local ipv4_city=$(echo \"$ipv4_output\" | grep -oE '\"city\":\"[^\"]+\"' | grep -oE '\":\"[^\"]+\"' | sed 's/\":\"//g')\n    local ipv4_region=$(echo \"$ipv4_output\" | grep -oE '\"region\":\"[^\"]+\"' | grep -oE '\":\"[^\"]+\"' | sed 's/\":\"//g')\n    if [ -n \"$ipv4_asn\" ] && [ -n \"$ipv4_as_organization\" ] && [ -n \"$ipv4_city\" ] && [ -n \"$ipv4_region\" ]; then\n        local ipv4_asn_info=\"AS${ipv4_asn} ${ipv4_as_organization}\"\n        local ipv4_location=\"${ipv4_city} / ${ipv4_region}\"\n    elif [ -n \"$ipv4_asn\" ] && [ -n \"$ipv4_as_organization\" ] && [ -n \"$ipv4_city\" ]; then\n        local ipv4_asn_info=\"AS${ipv4_asn} ${ipv4_as_organization}\"\n        local ipv4_location=\"${ipv4_city}\"\n    elif [ -n \"$ipv4_asn\" ] && [ -n \"$ipv4_as_organization\" ] && [ -n \"$ipv4_region\" ]; then\n        local ipv4_asn_info=\"AS${ipv4_asn} ${ipv4_as_organization}\"\n        local ipv4_location=\"${ipv4_region}\"\n    else\n        local ipv4_asn_info=\"None\"\n        local ipv4_location=\"None\"\n    fi\n    # 去除双引号\n    if [[ $ipv4_asn_info == *\"\\\"\"* ]]; then\n        ipv4_asn_info=\"${ipv4_asn_info%\\\"*}\"\n    fi\n    if [[ $ipv4_location == *\"\\\"\"* ]]; then\n        ipv4_location=\"${ipv4_location%\\\"*}\"\n    fi\n    # 返回结果\n    echo \"$ipv4_asn_info\" >>/tmp/cloudflare\n    echo \"$ipv4_location\" >>/tmp/cloudflare\n    # 获取 IPv6 信息\n    sleep 1\n    local ipv6_output=$(curl -ksL6m6 -A Mozilla https://speed.cloudflare.com/meta 2>/dev/null)\n    # 提取 IPv6 的 asn、asOrganization、city 和 region\n    local ipv6_asn=$(echo \"$ipv6_output\" | grep -oE '\"asn\":[0-9]+' | grep -oE '[0-9]+')\n    local ipv6_as_organization=$(echo \"$ipv6_output\" | grep -oE '\"asOrganization\":\"[^\"]+\"' | grep -oE '\":\"[^\"]+\"' | sed 's/\":\"//g')\n    local ipv6_city=$(echo \"$ipv6_output\" | grep -oE '\"city\":\"[^\"]+\"' | grep -oE '\":\"[^\"]+\"' | sed 's/\":\"//g')\n    local ipv6_region=$(echo \"$ipv6_output\" | grep -oE '\"region\":\"[^\"]+\"' | grep -oE '\":\"[^\"]+\"' | sed 's/\":\"//g')\n    if [ -n \"$ipv6_asn\" ] && [ -n \"$ipv6_as_organization\" ] && [ -n \"$ipv6_city\" ] && [ -n \"$ipv6_region\" ]; then\n        local ipv6_asn_info=\"AS${ipv6_asn} ${ipv6_as_organization}\"\n        local ipv6_location=\"${ipv6_city} / ${ipv6_region}\"\n    elif [ -n \"$ipv6_asn\" ] && [ -n \"$ipv6_as_organization\" ] && [ -n \"$ipv6_city\" ]; then\n        local ipv6_asn_info=\"AS${ipv6_asn} ${ipv6_as_organization}\"\n        local ipv6_location=\"${ipv6_city}\"\n    elif [ -n \"$ipv6_asn\" ] && [ -n \"$ipv6_as_organization\" ] && [ -n \"$ipv6_region\" ]; then\n        local ipv6_asn_info=\"AS${ipv6_asn} ${ipv6_as_organization}\"\n        local ipv6_location=\"${ipv6_region}\"\n    else\n        local ipv6_asn_info=\"None\"\n        local ipv6_location=\"None\"\n    fi\n    # 去除双引号\n    if [[ $ipv6_asn_info == *\"\\\"\"* ]]; then\n        ipv6_asn_info=\"${ipv6_asn_info%\\\"*}\"\n    fi\n    if [[ $ipv6_location == *\"\\\"\"* ]]; then\n        ipv6_location=\"${ipv6_location%\\\"*}\"\n    fi\n    # 返回结果\n    echo \"$ipv6_asn_info\" >>/tmp/cloudflare\n    echo \"$ipv6_location\" >>/tmp/cloudflare\n}\n\ncheck_ip_info_by_ipsb() {\n    # ip.sb\n    rm -rf /tmp/ipsb\n    local result_ipv4=$(curl -ksL4m6 -A Mozilla https://api.ip.sb/geoip 2>/dev/null)\n    if [ \"$?\" -ne 0 ] || echo \"$result_ipv4\" | grep -qE \"(Comodo Secure DNS|Rate limit exceeded)|Your client does not have permission to get URL\" >/dev/null 2>&1; then\n        local ipv4_asn_info=\"None\"\n        local ipv4_location=\"None\"\n    else\n        # 获取IPv4的asn、city、region、country\n        if [ -n \"$result_ipv4\" ]; then\n            local ipv4_asn=$(expr \"$result_ipv4\" : '.*asn\\\":[ ]*\\([0-9]*\\).*')\n            local ipv4_as_organization=$(expr \"$result_ipv4\" : '.*isp\\\":[ ]*\\\"\\([^\"]*\\).*')\n            local ipv4_city=$(echo $result_ipv4 | grep -oE '\"city\":\"[^\"]+\"' | cut -d \":\" -f2 | tr -d '\"')\n            local ipv4_region=$(echo $result_ipv4 | grep -oE '\"region\":\"[^\"]+\"' | cut -d \":\" -f2 | tr -d '\"')\n            local ipv4_country=$(echo \"$result_ipv4\" | grep -oP '(?<=\"country\":\")[^\"]*')\n            if [ -n \"$ipv4_asn\" ] && [ -n \"$ipv4_as_organization\" ] && [ -n \"$ipv4_city\" ] && [ -n \"$ipv4_region\" ] && [ -n \"$ipv4_country\" ]; then\n                local ipv4_asn_info=\"AS${ipv4_asn} ${ipv4_as_organization}\"\n                local ipv4_location=\"${ipv4_city} / ${ipv4_region} / ${ipv4_country}\"\n            elif [ -n \"$ipv4_asn\" ] && [ -n \"$ipv4_as_organization\" ] && [ -n \"$ipv4_city\" ] && [ -n \"$ipv4_region\" ]; then\n                local ipv4_asn_info=\"AS${ipv4_asn} ${ipv4_as_organization}\"\n                local ipv4_location=\"${ipv4_city} / ${ipv4_region}\"\n            elif [ -n \"$ipv4_asn\" ] && [ -n \"$ipv4_as_organization\" ] && [ -n \"$ipv4_city\" ] && [ -n \"$ipv4_country\" ]; then\n                local ipv4_asn_info=\"AS${ipv4_asn} ${ipv4_as_organization}\"\n                local ipv4_location=\"${ipv4_city} / ${ipv4_country}\"\n            elif [ -n \"$ipv4_asn\" ] && [ -n \"$ipv4_as_organization\" ] && [ -n \"$ipv4_region\" ] && [ -n \"$ipv4_country\" ]; then\n                local ipv4_asn_info=\"AS${ipv4_asn} ${ipv4_as_organization}\"\n                local ipv4_location=\"${ipv4_region} / ${ipv4_country}\"\n            elif [ -n \"$ipv4_asn\" ] && [ -n \"$ipv4_as_organization\" ] && { [ -n \"$ipv4_city\" ] || [ -n \"$ipv4_region\" ] || [ -n \"$ipv4_country\" ]; }; then\n                local ipv4_asn_info=\"AS${ipv4_asn} ${ipv4_as_organization}\"\n                local ipv4_location=\"${ipv4_city} ${ipv4_region} ${ipv4_country}\"\n            else\n                local ipv4_asn_info=\"None\"\n                local ipv4_location=\"None\"\n            fi\n        else\n            local ipv4_asn_info=\"None\"\n            local ipv4_location=\"None\"\n        fi\n    fi\n    # 返回结果\n    echo \"$ipv4_asn_info\" >>/tmp/ipsb\n    echo \"$ipv4_location\" >>/tmp/ipsb\n    # 获取IPv6的asn、city、region、country\n    sleep 1\n    local result_ipv6=$(curl -ksL6m6 -A Mozilla https://api.ip.sb/geoip 2>/dev/null)\n    if [ \"$?\" -ne 0 ] || echo \"$result_ipv6\" | grep -qE \"(Comodo Secure DNS|Rate limit exceeded)|Your client does not have permission to get URL\" >/dev/null 2>&1; then\n        local ipv6_asn_info=\"None\"\n        local ipv6_location=\"None\"\n    else\n        if [ -n \"$result_ipv6\" ]; then\n            local ipv6_asn=$(expr \"$result_ipv6\" : '.*asn\\\":[ ]*\\([0-9]*\\).*')\n            local ipv6_as_organization=$(expr \"$result_ipv6\" : '.*isp\\\":[ ]*\\\"\\([^\"]*\\).*')\n            local ipv6_city=$(echo $result_ipv6 | grep -oE '\"city\":\"[^\"]+\"' | cut -d \":\" -f2 | tr -d '\"')\n            local ipv6_region=$(echo $result_ipv6 | grep -oE '\"region\":\"[^\"]+\"' | cut -d \":\" -f2 | tr -d '\"')\n            local ipv6_country=$(echo \"$result_ipv6\" | grep -oP '(?<=\"country\":\")[^\"]*')\n            if [ -n \"$ipv6_asn\" ] && [ -n \"$ipv6_as_organization\" ] && [ -n \"$ipv6_city\" ] && [ -n \"$ipv6_region\" ] && [ -n \"$ipv6_country\" ]; then\n                local ipv6_asn_info=\"AS${ipv6_asn} ${ipv6_as_organization}\"\n                local ipv6_location=\"${ipv6_city} / ${ipv6_region} / ${ipv6_country}\"\n            elif [ -n \"$ipv6_asn\" ] && [ -n \"$ipv6_as_organization\" ] && [ -n \"$ipv6_city\" ] && [ -n \"$ipv6_region\" ]; then\n                local ipv6_asn_info=\"AS${ipv6_asn} ${ipv6_as_organization}\"\n                local ipv6_location=\"${ipv6_city} / ${ipv6_region}\"\n            elif [ -n \"$ipv6_asn\" ] && [ -n \"$ipv6_as_organization\" ] && [ -n \"$ipv6_city\" ] && [ -n \"$ipv6_country\" ]; then\n                local ipv6_asn_info=\"AS${ipv6_asn} ${ipv6_as_organization}\"\n                local ipv6_location=\"${ipv6_city} / ${ipv6_country}\"\n            elif [ -n \"$ipv6_asn\" ] && [ -n \"$ipv6_as_organization\" ] && [ -n \"$ipv6_region\" ] && [ -n \"$ipv6_country\" ]; then\n                local ipv6_asn_info=\"AS${ipv6_asn} ${ipv6_as_organization}\"\n                local ipv6_location=\"${ipv6_region} / ${ipv6_country}\"\n            elif [ -n \"$ipv6_asn\" ] && [ -n \"$ipv6_as_organization\" ] && { [ -n \"$ipv6_city\" ] || [ -n \"$ipv6_region\" ] || [ -n \"$ipv6_country\" ]; }; then\n                local ipv6_asn_info=\"AS${ipv6_asn} ${ipv6_as_organization}\"\n                local ipv6_location=\"${ipv6_city} ${ipv6_region} ${ipv6_country}\"\n            else\n                local ipv6_asn_info=\"None\"\n                local ipv6_location=\"None\"\n            fi\n        else\n            local ipv6_asn_info=\"None\"\n            local ipv6_location=\"None\"\n        fi\n    fi\n    # 返回结果\n    echo \"$ipv6_asn_info\" >>/tmp/ipsb\n    echo \"$ipv6_location\" >>/tmp/ipsb\n}\n\ncheck_ip_info_by_cheervision() {\n    # ipdata.cheervision.co\n    rm -rf /tmp/cheervision\n    local ipv4_result=$(curl -ksL4m6 -A Mozilla ipdata.cheervision.co 2>/dev/null)\n    # 获取IPv4的asn、city、region\n    if [ -n \"$ipv4_result\" ]; then\n        local ipv4_asn=$(echo \"$ipv4_result\" | sed -n 's/.*\"asn\":\\([0-9]*\\),.*/\\1/p')\n        local ipv4_organization=$(echo \"$ipv4_result\" | sed -n 's/.*\"organization\":\"\\([^\"]*\\)\",.*/\\1/p')\n        local ipv4_city=$(echo \"$ipv4_result\" | sed -n 's/.*\"city\":\"\\([^\"]*\\)\",.*/\\1/p')\n        local ipv4_region=$(echo \"$ipv4_result\" | sed -n 's/.*\"region\":{\"code\":\"\\([^\"]*\\)\".*/\\1/p')\n        if [ -n \"$ipv4_asn\" ] && [ -n \"$ipv4_organization\" ] && [ -n \"$ipv4_city\" ] && [ -n \"$ipv4_region\" ]; then\n            local ipv4_asn_info=\"AS${ipv4_asn} ${ipv4_organization}\"\n            local ipv4_location=\"${ipv4_city} / ${ipv4_region}\"\n        else\n            local ipv4_asn_info=\"None\"\n            local ipv4_location=\"None\"\n        fi\n    else\n        local ipv4_asn_info=\"None\"\n        local ipv4_location=\"None\"\n    fi\n    # 返回结果\n    echo \"$ipv4_asn_info\" >>/tmp/cheervision\n    echo \"$ipv4_location\" >>/tmp/cheervision\n    # 获取IPv6的asn、city、region\n    sleep 1\n    local ipv6_result=$(curl -ksL6m6 -A Mozilla ipdata.cheervision.co 2>/dev/null)\n    if [ -n \"$ipv6_result\" ]; then\n        local ipv6_asn=$(echo \"$ipv6_result\" | sed -n 's/.*\"asn\":\\([0-9]*\\),.*/\\1/p')\n        local ipv6_organization=$(echo \"$ipv6_result\" | sed -n 's/.*\"organization\":\"\\([^\"]*\\)\",.*/\\1/p')\n        local ipv6_city=$(echo \"$ipv6_result\" | sed -n 's/.*\"city\":\"\\([^\"]*\\)\",.*/\\1/p')\n        local ipv6_region=$(echo \"$ipv6_result\" | sed -n 's/.*\"region\":{\"code\":\"\\([^\"]*\\)\".*/\\1/p')\n        if [ -n \"$ipv6_asn\" ] && [ -n \"$ipv6_organization\" ] && [ -n \"$ipv6_city\" ] && [ -n \"$ipv6_region\" ]; then\n            local ipv6_asn_info=\"AS${ipv6_asn} ${ipv6_organization}\"\n            local ipv6_location=\"${ipv6_city} / ${ipv6_region}\"\n        else\n            local ipv6_asn_info=\"None\"\n            local ipv6_location=\"None\"\n        fi\n    else\n        local ipv6_asn_info=\"None\"\n        local ipv6_location=\"None\"\n    fi\n    # 返回结果\n    echo \"$ipv6_asn_info\" >>/tmp/cheervision\n    echo \"$ipv6_location\" >>/tmp/cheervision\n}\n\nget_system_info() {\n    local ip4=$(echo \"$IPV4\" | tr -d '\\n')\n    arch=$(uname -m)\n    if [ -n \"$Result_Systeminfo_Diskinfo\" ]; then\n        :\n    else\n        disk_size1=($(LC_ALL=C df -hPl | grep -wvE '\\-|none|tmpfs|devtmpfs|by-uuid|chroot|Filesystem|udev|docker|snapd' | awk '{print $2}'))\n        disk_size2=($(LC_ALL=C df -hPl | grep -wvE '\\-|none|tmpfs|devtmpfs|by-uuid|chroot|Filesystem|udev|docker|snapd' | awk '{print $3}'))\n        disk_total_size=$(calc_disk \"${disk_size1[@]}\")\n        disk_used_size=$(calc_disk \"${disk_size2[@]}\")\n    fi\n    if [ -f \"/proc/cpuinfo\" ]; then\n        cname=$(awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//')\n        cores=$(awk -F: '/processor/ {core++} END {print core}' /proc/cpuinfo)\n        freq=$(awk -F'[ :]' '/cpu MHz/ {print $4;exit}' /proc/cpuinfo)\n        ccache=$(awk -F: '/cache size/ {cache=$2} END {print cache}' /proc/cpuinfo | sed 's/^[ \\t]*//;s/[ \\t]*$//')\n        CPU_AES=$(cat /proc/cpuinfo | grep aes)\n        CPU_VIRT=$(cat /proc/cpuinfo | grep 'vmx\\|svm')\n        up=$(awk '{a=$1/86400;b=($1%86400)/3600;c=($1%3600)/60} {printf(\"%d days, %d hour %d min\\n\",a,b,c)}' /proc/uptime)\n        if _exists \"w\"; then\n            load=$(\n                LANG=C\n                w | head -1 | awk -F'load average:' '{print $2}' | sed 's/^[ \\t]*//;s/[ \\t]*$//'\n            )\n        elif _exists \"uptime\"; then\n            load=$(\n                LANG=C\n                uptime | head -1 | awk -F'load average:' '{print $2}' | sed 's/^[ \\t]*//;s/[ \\t]*$//'\n            )\n        fi\n    elif [ \"${Var_OSRelease}\" == \"freebsd\" ]; then\n        cname=$($sysctl_path -n hw.model)\n        cores=$($sysctl_path -n hw.ncpu)\n        freq=$($sysctl_path -n dev.cpu.0.freq 2>/dev/null || echo \"\")\n        ccache=$($sysctl_path -n hw.cacheconfig 2>/dev/null | awk -F: '{print $2}' | sed 's/^[ \\t]*//;s/[ \\t]*$//' || echo \"\")\n        CPU_AES=$($sysctl_path -a | grep -E 'crypto.aesni' | awk '{print $2}')\n        CPU_VIRT=$($sysctl_path -a | grep -E 'hw.vmx|hw.svm' | awk '{print $2}')\n        up=$($sysctl_path -n kern.boottime | perl -MPOSIX -nE 'if (/sec = (\\d+), usec = (\\d+)/) { $boottime = $1; $uptime = time() - $boottime; $days = int($uptime / 86400); $hours = int(($uptime % 86400) / 3600); $minutes = int(($uptime % 3600) / 60); say \"$days days, $hours hours, $minutes minutes\" }')\n        if _exists \"w\"; then\n            load=$(w | awk '{print $(NF-2), $(NF-1), $NF}' | head -n 1)\n        elif _exists \"uptime\"; then\n            load=$(uptime | awk '{print $(NF-2), $(NF-1), $NF}')\n        fi\n    fi\n    if [ -z \"$cname\" ] || [ ! -e /proc/cpuinfo ]; then\n        cname=$(lscpu | grep \"Model name\" | sed 's/Model name: *//g')\n        if [ $? -ne 0 ]; then\n            ${PACKAGE_INSTALL[int]} util-linux\n            cname=$(lscpu | grep \"Model name\" | sed 's/Model name: *//g')\n        fi\n        if [ -z \"$cname\" ]; then\n            cname=$(cat /proc/device-tree/model)\n        fi\n    fi\n    cname=$(echo -n \"$cname\" | tr '\\n' ' ' | sed -E 's/ +/ /g')\n    if command -v free >/dev/null 2>&1; then\n        if free -m | grep -q '内存'; then # 如果输出中包含 \"内存\" 关键词\n            tram=$(free -m | awk '/内存/{print $2}')\n            uram=$(free -m | awk '/内存/{print $3}')\n            swap=$(free -m | awk '/交换/{print $2}')\n            uswap=$(free -m | awk '/交换/{print $3}')\n        else # 否则，假定输出是英文的\n            tram=$(\n                LANG=C\n                free -m | awk '/Mem/ {print $2}'\n            )\n            uram=$(\n                LANG=C\n                free -m | awk '/Mem/ {print $3}'\n            )\n            swap=$(\n                LANG=C\n                free -m | awk '/Swap/ {print $2}'\n            )\n            uswap=$(\n                LANG=C\n                free -m | awk '/Swap/ {print $3}'\n            )\n        fi\n    else\n        tram=$($sysctl_path -n hw.physmem | awk '{printf \"%.0f\", $1/1024/1024}')\n        uram=$($sysctl_path -n vm.stats.vm.v_active_count | awk '{printf \"%.0f\", $1/1024}')\n        swap=$(swapinfo -k | awk 'NR>1{sum+=$2} END{printf \"%.0f\", sum/1024}')\n        uswap=$(swapinfo -k | awk 'NR>1{sum+=$4} END{printf \"%.0f\", sum/1024}')\n    fi\n    if _exists \"getconf\"; then\n        lbit=$(getconf LONG_BIT)\n    else\n        echo ${arch} | grep -q \"64\" && lbit=\"64\" || lbit=\"32\"\n    fi\n    kern=$(uname -r)\n    if [ -z \"$sysctl_path\" ]; then\n        tcpctrl=\"None\"\n    fi\n    tcpctrl=$($sysctl_path -n net.ipv4.tcp_congestion_control 2>/dev/null)\n    if [ $? -ne 0 ]; then\n        if [ \"$en_status\" = true ]; then\n            tcpctrl=\"TCP congestion control algorithm not set\"\n        else\n            tcpctrl=\"未设置TCP拥塞控制算法\"\n        fi\n    else\n        if [ $tcpctrl == \"bbr\" ]; then\n            :\n        else\n            if lsmod | grep bbr >/dev/null; then\n                if [ \"$en_status\" = true ]; then\n                    reading \"Should I turn on bbr before testing? (Enter to leave it on by default) [y/n] \" confirmbbr\n                else\n                    reading \"是否要开启bbr再进行测试？(回车则默认不开启) [y/n] \" confirmbbr\n                fi\n                echo \"\"\n                if [ \"$confirmbbr\" != \"y\" ]; then\n                    echo \"net.core.default_qdisc=fq\" >>\"$sysctl_conf\"\n                    echo \"net.ipv4.tcp_congestion_control=bbr\" >>\"$sysctl_conf\"\n                    $sysctl_path -p\n                fi\n                tcpctrl=$($sysctl_path -n net.ipv4.tcp_congestion_control 2>/dev/null)\n                if [ $? -ne 0 ]; then\n                    tcpctrl=\"None\"\n                fi\n            fi\n        fi\n    fi\n}\n\n# =============== 正式输出 部分 ===============\nprint_intro() {\n    echo \"--------------------- A Bench Script By spiritlhl ----------------------\"\n    if [ \"$en_status\" = true ]; then\n        echo \"              Evaluation Channel: https://t.me/vps_reviews               \"\n        echo \"VPS Fusion Monster Version：$ver\"\n        echo \"Shell Project: https://github.com/spiritLHLS/ecs\"\n        echo \"Go Project: https://github.com/oneclickvirt/ecs\"\n    else\n        echo \"                   测评频道: https://t.me/vps_reviews                    \"\n        echo \"VPS融合怪版本：$ver\"\n        echo \"Shell项目地址：https://github.com/spiritLHLS/ecs\"\n        echo \"Go项目地址：https://github.com/oneclickvirt/ecs\"\n    fi\n}\n\nget_first_not_none_element() {\n    local array=(\"$@\")\n    for element in \"${array[@]}\"; do\n        if [[ \"$element\" != \"None\" && -n \"$element\" ]]; then\n            echo \"$element\"\n            return\n        fi\n    done\n}\n\nrun_ip_info_check() {\n    _yellow \"run IP information check...\"\n    # 并行执行并发查询IP信息\n    check_ip_info_by_cloudflare &\n    check_ip_info_by_ipinfo &\n    check_ip_info_by_ipsb &\n    check_ip_info_by_cheervision &\n    wait\n}\n\nprint_ip_info() {\n    # 存储结果的四个列表\n    local ipv4_asn_info_list=()\n    local ipv4_location_list=()\n    local ipv6_asn_info_list=()\n    local ipv6_location_list=()\n    # 遍历每个函数的结果文件，读取内容到对应的列表中，按顺序来说越往后越不准\n    files=(\"/tmp/ipinfo\" \"/tmp/ipsb\" \"/tmp/cloudflare\" \"/tmp/cheervision\")\n    for file in \"${files[@]}\"; do\n        {\n            read -r asn_info\n            read -r location\n            read -r ipv6_asn_info\n            read -r ipv6_location\n        } <\"$file\"\n        ipv4_asn_info_list+=(\"$asn_info\")\n        ipv4_location_list+=(\"$location\")\n        ipv6_asn_info_list+=(\"$ipv6_asn_info\")\n        ipv6_location_list+=(\"$ipv6_location\")\n    done\n    # 找到每个列表中最长的第一个元素作为最终结果\n    local ipv4_asn_info=$(get_first_not_none_element \"${ipv4_asn_info_list[@]}\")\n    local ipv4_location=$(get_first_not_none_element \"${ipv4_location_list[@]}\")\n    local ipv6_asn_info=$(get_first_not_none_element \"${ipv6_asn_info_list[@]}\")\n    local ipv6_location=$(get_first_not_none_element \"${ipv6_location_list[@]}\")\n    # 删除缓存文件\n    for file in \"${files[@]}\"; do\n        rm -rf ${file}\n    done\n    # 获取IPV6的子网掩码\n    if [ -f \"${TEMP_DIR}/eo6s_result\" ]; then\n        local ipv6_prefixlen=$(check_and_cat_file \"${TEMP_DIR}/eo6s_result\")\n    else\n        local ipv6_prefixlen=\"\"\n    fi\n    # 打印最终结果\n    if [ \"$en_status\" = true ]; then\n        if [[ -n \"$ipv4_asn_info\" && \"$ipv4_asn_info\" != \"None\" ]]; then\n            echo \" IPV4 ASN          : $(_blue \"$ipv4_asn_info\")\"\n        fi\n        if [[ -n \"$ipv4_location\" && \"$ipv4_location\" != \"None\" ]]; then\n            echo \" IPV4 Location     : $(_blue \"$ipv4_location\")\"\n        fi\n        if [[ -n \"$ipv6_asn_info\" && \"$ipv6_asn_info\" != \"None\" ]]; then\n            echo \" IPV6 ASN          : $(_blue \"$ipv6_asn_info\")\"\n        fi\n        if [[ -n \"$ipv6_location\" && \"$ipv6_location\" != \"None\" ]]; then\n            echo \" IPV6 Location     : $(_blue \"$ipv6_location\")\"\n        fi\n        if [[ -n \"$ipv6_prefixlen\" && \"$ipv6_prefixlen\" != \"None\" ]]; then\n            echo \" IPV6 Subnet Mask  : $(_blue \"$ipv6_prefixlen\")\"\n        fi\n    else\n        if [[ -n \"$ipv4_asn_info\" && \"$ipv4_asn_info\" != \"None\" ]]; then\n            echo \" IPV4 ASN          : $(_blue \"$ipv4_asn_info\")\"\n        fi\n        if [[ -n \"$ipv4_location\" && \"$ipv4_location\" != \"None\" ]]; then\n            echo \" IPV4 位置         : $(_blue \"$ipv4_location\")\"\n        fi\n        if [[ -n \"$ipv6_asn_info\" && \"$ipv6_asn_info\" != \"None\" ]]; then\n            echo \" IPV6 ASN          : $(_blue \"$ipv6_asn_info\")\"\n        fi\n        if [[ -n \"$ipv6_location\" && \"$ipv6_location\" != \"None\" ]]; then\n            echo \" IPV6 位置         : $(_blue \"$ipv6_location\")\"\n        fi\n        if [[ -n \"$ipv6_prefixlen\" && \"$ipv6_prefixlen\" != \"None\" && -n \"$ipv6_asn_info\" && \"$ipv6_asn_info\" != \"None\" ]]; then\n            echo \" IPV6 子网掩码     : $(_blue \"$ipv6_prefixlen\")\"\n        fi\n    fi\n}\n\nprint_system_info() {\n    if [ \"$en_status\" = true ]; then\n        if [ -n \"$cname\" ] >/dev/null 2>&1; then\n            echo \" Processor         : $(_blue \"$cname\")\"\n        elif [ -n \"$Result_Systeminfo_CPUModelName\" ] >/dev/null 2>&1; then\n            echo \" Processor         : $(_blue \"$Result_Systeminfo_CPUModelName\")\"\n        else\n            echo \" Processor         : $(_blue \"Unable to detect Processor\")\"\n        fi\n        if [[ -n \"$Result_Systeminfo_isPhysical\" && \"$Result_Systeminfo_isPhysical\" = \"1\" ]] >/dev/null 2>&1; then\n            if [ -n \"$Result_Systeminfo_CPUSockets\" ] && [ \"$Result_Systeminfo_CPUSockets\" -ne 0 ] &&\n                [ -n \"$Result_Systeminfo_CPUCores\" ] && [ \"$Result_Systeminfo_CPUCores\" -ne 0 ] &&\n                [ -n \"$Result_Systeminfo_CPUThreads\" ] && [ \"$Result_Systeminfo_CPUThreads\" -ne 0 ] >/dev/null 2>&1; then\n                echo \" CPU Numbers      : $(_blue \"${Result_Systeminfo_CPUSockets} Physical CPUs, ${Result_Systeminfo_CPUCores} Total Cores, ${Result_Systeminfo_CPUThreads} Total Threads\")\"\n            elif [ -n \"$cores\" ]; then\n                echo \" CPU Numbers       : $(_blue \"$cores\")\"\n            else\n                echo \" CPU Numbers       : $(_blue \"Unable to detect CPU Numbers\")\"\n            fi\n        elif [[ -n \"$Result_Systeminfo_isPhysical\" && \"$Result_Systeminfo_isPhysical\" = \"0\" ]] >/dev/null 2>&1; then\n            if [[ -n \"$Result_Systeminfo_CPUThreads\" && \"$Result_Systeminfo_CPUThreads\" -ne 0 ]] >/dev/null 2>&1; then\n                echo \" CPU Numbers       : $(_blue \"${Result_Systeminfo_CPUThreads}\")\"\n            elif [ -n \"$cores\" ] >/dev/null 2>&1; then\n                echo \" CPU Numbers       : $(_blue \"$cores\")\"\n            else\n                echo \" CPU Numbers       : $(_blue \"Unable to detect CPU Numbers\")\"\n            fi\n        else\n            echo \" CPU Numbers       : $(_blue \"$cores\")\"\n        fi\n        if [ -n \"$freq\" ] >/dev/null 2>&1; then\n            echo \" CPU Frequency     : $(_blue \"$freq MHz\")\"\n        fi\n        if [ -n \"$Result_Systeminfo_CPUCacheSizeL1\" ] && [ -n \"$Result_Systeminfo_CPUCacheSizeL2\" ] && [ -n \"$Result_Systeminfo_CPUCacheSizeL3\" ] >/dev/null 2>&1; then\n            echo \" CPU Cache         : $(_blue \"L1: ${Result_Systeminfo_CPUCacheSizeL1} / L2: ${Result_Systeminfo_CPUCacheSizeL2} / L3: ${Result_Systeminfo_CPUCacheSizeL3}\")\"\n        elif [ -n \"$ccache\" ] >/dev/null 2>&1; then\n            echo \" CPU Cache         : $(_blue \"$ccache\")\"\n        fi\n        [[ -z \"$CPU_AES\" ]] && CPU_AES=\"✘ Disabled\" || CPU_AES=\"✔ Enabled\"\n        echo \" AES-NI            : $(_blue \"$CPU_AES\")\"\n        [[ -z \"$CPU_VIRT\" ]] && CPU_VIRT=\"✘ Disabled\" || CPU_VIRT=\"✔ Enabled\"\n        echo \" VM-x/AMD-V        : $(_blue \"$CPU_VIRT\")\"\n        if [ -n \"$Result_Systeminfo_Memoryinfo\" ] >/dev/null 2>&1; then\n            echo \" RAM               : $(_blue \"$Result_Systeminfo_Memoryinfo\")\"\n        elif [ -n \"$tram\" ] && [ -n \"$uram\" ] >/dev/null 2>&1; then\n            echo \" RAM               : $(_yellow \"$tram MB\") $(_blue \"($uram MB 已用)\")\"\n        fi\n        if [ -n \"$Result_Systeminfo_Swapinfo\" ] >/dev/null 2>&1; then\n            echo \" Swap              : $(_blue \"$Result_Systeminfo_Swapinfo\")\"\n        elif [ -n \"$swap\" ] && [ -n \"$uswap\" ] >/dev/null 2>&1; then\n            echo \" Swap              : $(_blue \"$swap MB ($uswap MB 已用)\")\"\n        fi\n        if [ -n \"$Result_Systeminfo_Diskinfo\" ] >/dev/null 2>&1; then\n            echo \" Disk Space        : $(_blue \"$Result_Systeminfo_Diskinfo\")\"\n        else\n            echo \" Disk Space        : $(_yellow \"$disk_total_size GB\") $(_blue \"($disk_used_size GB Usage)\")\"\n        fi\n        if [ -n \"$Result_Systeminfo_DiskRootPath\" ] >/dev/null 2>&1; then\n            echo \" Boot Disk         : $(_blue \"$Result_Systeminfo_DiskRootPath\")\"\n        fi\n        echo \" Uptime            : $(_blue \"$up\")\"\n        echo \" Loads             : $(_blue \"$load\")\"\n        if [ -n \"$Result_Systeminfo_OSReleaseNameFull\" ] >/dev/null 2>&1; then\n            echo \" OS Release        : $(_blue \"$Result_Systeminfo_OSReleaseNameFull\")\"\n        elif [ -n \"$DISTRO\" ] >/dev/null 2>&1; then\n            echo \" OS Release        : $(_blue \"$DISTRO\")\"\n        fi\n        echo \" Arch              : $(_blue \"$arch ($lbit Bit)\")\"\n        echo \" Kernel Version    : $(_blue \"$kern\")\"\n        echo \" TCP Acceleration  : $(_yellow \"$tcpctrl\")\"\n        echo \" VM Type           : $(_blue \"$Result_Systeminfo_VMMType\")\"\n        [[ -n \"$nat_type_r\" ]] && echo \" NAT Type          : $(_blue \"$nat_type_r\")\"\n    else\n        if [ -n \"$cname\" ] >/dev/null 2>&1; then\n            echo \" CPU 型号          : $(_blue \"$cname\")\"\n        elif [ -n \"$Result_Systeminfo_CPUModelName\" ] >/dev/null 2>&1; then\n            echo \" CPU 型号          : $(_blue \"$Result_Systeminfo_CPUModelName\")\"\n        else\n            echo \" CPU 型号          : $(_blue \"无法检测到CPU型号\")\"\n        fi\n        if [[ -n \"$Result_Systeminfo_isPhysical\" && \"$Result_Systeminfo_isPhysical\" = \"1\" ]] >/dev/null 2>&1; then\n            if [ -n \"$Result_Systeminfo_CPUSockets\" ] && [ \"$Result_Systeminfo_CPUSockets\" -ne 0 ] &&\n                [ -n \"$Result_Systeminfo_CPUCores\" ] && [ \"$Result_Systeminfo_CPUCores\" -ne 0 ] &&\n                [ -n \"$Result_Systeminfo_CPUThreads\" ] && [ \"$Result_Systeminfo_CPUThreads\" -ne 0 ] >/dev/null 2>&1; then\n                echo \" CPU 核心数        : $(_blue \"${Result_Systeminfo_CPUSockets} 物理核心, ${Result_Systeminfo_CPUCores} 总核心, ${Result_Systeminfo_CPUThreads} 总线程数\")\"\n            elif [ -n \"$cores\" ]; then\n                echo \" CPU 核心数        : $(_blue \"$cores\")\"\n            else\n                echo \" CPU 核心数        : $(_blue \"无法检测到CPU核心数量\")\"\n            fi\n        elif [[ -n \"$Result_Systeminfo_isPhysical\" && \"$Result_Systeminfo_isPhysical\" = \"0\" ]] >/dev/null 2>&1; then\n            if [[ -n \"$Result_Systeminfo_CPUThreads\" && \"$Result_Systeminfo_CPUThreads\" -ne 0 ]] >/dev/null 2>&1; then\n                echo \" CPU 核心数        : $(_blue \"${Result_Systeminfo_CPUThreads}\")\"\n            elif [ -n \"$cores\" ] >/dev/null 2>&1; then\n                echo \" CPU 核心数        : $(_blue \"$cores\")\"\n            else\n                echo \" CPU 核心数        : $(_blue \"无法检测到CPU核心数量\")\"\n            fi\n        else\n            echo \" CPU 核心数        : $(_blue \"$cores\")\"\n        fi\n        if [ -n \"$freq\" ] >/dev/null 2>&1; then\n            echo \" CPU 频率          : $(_blue \"$freq MHz\")\"\n        fi\n        if [ -n \"$Result_Systeminfo_CPUCacheSizeL1\" ] && [ -n \"$Result_Systeminfo_CPUCacheSizeL2\" ] && [ -n \"$Result_Systeminfo_CPUCacheSizeL3\" ] >/dev/null 2>&1; then\n            echo \" CPU 缓存          : $(_blue \"L1: ${Result_Systeminfo_CPUCacheSizeL1} / L2: ${Result_Systeminfo_CPUCacheSizeL2} / L3: ${Result_Systeminfo_CPUCacheSizeL3}\")\"\n        elif [ -n \"$ccache\" ] >/dev/null 2>&1; then\n            echo \" CPU 缓存          : $(_blue \"$ccache\")\"\n        fi\n        [[ -z \"$CPU_AES\" ]] && CPU_AES=\"\\xE2\\x9D\\x8C Disabled\" || CPU_AES=\"\\xE2\\x9C\\x94 Enabled\"\n        echo \" AES-NI指令集      : $(_blue \"$CPU_AES\")\"\n        [[ -z \"$CPU_VIRT\" ]] && CPU_VIRT=\"\\xE2\\x9D\\x8C Disabled\" || CPU_VIRT=\"\\xE2\\x9C\\x94 Enabled\"\n        echo \" VM-x/AMD-V支持    : $(_blue \"$CPU_VIRT\")\"\n        if [ -n \"$Result_Systeminfo_Memoryinfo\" ] >/dev/null 2>&1; then\n            echo \" 内存              : $(_blue \"$Result_Systeminfo_Memoryinfo\")\"\n        elif [ -n \"$tram\" ] && [ -n \"$uram\" ] >/dev/null 2>&1; then\n            echo \" 内存              : $(_yellow \"$tram MB\") $(_blue \"($uram MB 已用)\")\"\n        fi\n        if [ -n \"$Result_Systeminfo_Swapinfo\" ] >/dev/null 2>&1; then\n            echo \" Swap              : $(_blue \"$Result_Systeminfo_Swapinfo\")\"\n        elif [ -n \"$swap\" ] && [ -n \"$uswap\" ] >/dev/null 2>&1; then\n            echo \" Swap              : $(_blue \"$swap MB ($uswap MB 已用)\")\"\n        fi\n        if [ -n \"$Result_Systeminfo_Diskinfo\" ] >/dev/null 2>&1; then\n            echo \" 硬盘空间          : $(_blue \"$Result_Systeminfo_Diskinfo\")\"\n        else\n            echo \" 硬盘空间          : $(_yellow \"$disk_total_size GB\") $(_blue \"($disk_used_size GB 已用)\")\"\n        fi\n        if [ -n \"$Result_Systeminfo_DiskRootPath\" ] >/dev/null 2>&1; then\n            echo \" 启动盘路径        : $(_blue \"$Result_Systeminfo_DiskRootPath\")\"\n        fi\n        echo \" 系统在线时间      : $(_blue \"$up\")\"\n        echo \" 负载              : $(_blue \"$load\")\"\n        if [ -n \"$Result_Systeminfo_OSReleaseNameFull\" ] >/dev/null 2>&1; then\n            echo \" 系统              : $(_blue \"$Result_Systeminfo_OSReleaseNameFull\")\"\n        elif [ -n \"$DISTRO\" ] >/dev/null 2>&1; then\n            echo \" 系统              : $(_blue \"$DISTRO\")\"\n        fi\n        echo \" 架构              : $(_blue \"$arch ($lbit Bit)\")\"\n        echo \" 内核              : $(_blue \"$kern\")\"\n        echo \" TCP加速方式       : $(_yellow \"$tcpctrl\")\"\n        echo \" 虚拟化架构        : $(_blue \"$Result_Systeminfo_VMMType\")\"\n        [[ -n \"$nat_type_r\" ]] && echo \" NAT类型           : $(_blue \"$nat_type_r\")\"\n    fi\n}\n\nprint_end_time() {\n    end_time=$(date +%s)\n    start_time_abs=$(echo $start_time | tr -d -)\n    end_time_abs=$(echo $end_time | tr -d -)\n    time_abs_diff=$((${end_time_abs} - ${start_time_abs}))\n    time=$(echo $time_abs_diff | tr -d -)\n    if [ \"$en_status\" = true ]; then\n        if [ ${time} -gt 60 ]; then\n            min=$(expr $time / 60)\n            sec=$(expr $time % 60)\n            echo \" Total spent   : ${min} min ${sec} sec\"\n        else\n            echo \" Total spent   : ${time} sec\"\n        fi\n        date_time=$(date)\n        echo \" Time          : $date_time\"\n    else\n        if [ ${time} -gt 60 ]; then\n            min=$(expr $time / 60)\n            sec=$(expr $time % 60)\n            echo \" 总共花费      : ${min} 分 ${sec} 秒\"\n        else\n            echo \" 总共花费      : ${time} 秒\"\n        fi\n        date_time=$(date)\n        echo \" 时间          : $date_time\"\n    fi\n}\n\ncheck_lmc_script() {\n    mv $TEMP_DIR/media_lmc_check.sh ./\n}\n\n# =============== IP质量检测 部分 ===============\n# 为true时显示对应的数字序号，否则不显示\ntranslate_status() {\n    if [[ \"$1\" == \"false\" ]]; then\n        echo \"No\"\n    elif [[ \"$1\" == \"true\" ]]; then\n        echo \"Yes\"\n    else\n        echo \"$1\"\n    fi\n}\n\ngoogle() {\n    local curl_result=$(curl -sL -m 10 \"https://www.google.com/search?q=www.spiritysdx.top\" -H \"User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0\")\n    rm -rf /tmp/ip_quality_google\n    if [ \"$en_status\" = true ]; then\n        if echo \"$curl_result\" | grep -q \"二叉树的博客\"; then\n            echo \"Google search feasibility: YES\" >>/tmp/ip_quality_google\n        else\n            echo \"Google search feasibility: NO\" >>/tmp/ip_quality_google\n        fi\n    else\n        if echo \"$curl_result\" | grep -q \"二叉树的博客\"; then\n            echo \"Google搜索可行性：YES\" >>/tmp/ip_quality_google\n        else\n            echo \"Google搜索可行性：NO\" >>/tmp/ip_quality_google\n        fi\n    fi\n}\n\nsecurity_check() {\n    local language=$1\n    cd $myvar >/dev/null 2>&1\n    if [ -f \"${TEMP_DIR}/securityCheck\" ]; then\n        chmod 777 ${TEMP_DIR}/securityCheck\n    else\n        return\n    fi\n    ${TEMP_DIR}/securityCheck -l $language | sed '1d' >>/tmp/ip_quality_security_check\n}\n\nemail_check() {\n    cd $myvar >/dev/null 2>&1\n    if [ -f \"${TEMP_DIR}/pck\" ]; then\n        chmod 777 ${TEMP_DIR}/pck\n    else\n        return\n    fi\n    ${TEMP_DIR}/pck | sed '1d' >>/tmp/ip_quality_email_check\n}\n\nipcheck() {\n    { google; } &\n    if [ \"$en_status\" = true ]; then\n        { security_check \"en\"; } &\n    else\n        { security_check \"zh\"; } &\n    fi\n    { email_check; } &\n    wait\n    check_and_cat_file \"/tmp/ip_quality_security_check\"\n    check_and_cat_file \"/tmp/ip_quality_google\"\n    if [ \"$en_status\" = true ]; then\n        echo -e \"-------Email-Port-Detection--Base-On-oneclickvirt/portchecker--------\"\n    else\n        echo -e \"-------------邮件端口检测--基于oneclickvirt/portchecker开源-------------\"\n    fi\n    check_and_cat_file \"/tmp/ip_quality_email_check\"\n    rm -rf /tmp/ip_quality_*\n}\n\neo6s() {\n    # 获取IPV6的子网掩码\n    rm -rf $TEMP_DIR/eo6s_result\n    local interface=$(ls /sys/class/net/ | grep -E '^(eth|en)' | head -n 1)\n    if [ -n \"$interface\" ]; then\n        local current_ipv6=$(curl -s -6 -m 5 ipv6.ip.sb)\n        echo \"current_ipv6: ${current_ipv6}\"\n        [ -z \"$current_ipv6\" ] && echo \"None\" >$TEMP_DIR/eo6s_result && return\n        local new_ipv6=\"${current_ipv6%:*}:3\"\n        ip addr add ${new_ipv6}/128 dev ${interface}\n        sleep 6\n        local updated_ipv6=$(curl -s -6 -m 5 ipv6.ip.sb)\n        echo \"updated_ipv6: ${updated_ipv6}\"\n        ip addr del ${new_ipv6}/128 dev ${interface}\n        sleep 6\n        local final_ipv6=$(curl -s -6 -m 5 ipv6.ip.sb)\n        echo \"final_ipv6: ${final_ipv6}\"\n        local ipv6_prefixlen=\"\"\n        if command -v ifconfig &>/dev/null; then\n            local output=$(ifconfig ${interface} | grep -oP 'inet6 (?!fe80:).*prefixlen \\K\\d+')\n        else\n            local output=$(ip -6 addr show dev ${interface} | grep -oP 'inet6 (?!fe80:).* scope global.*prefixlen \\K\\d+')\n        fi\n        local num_lines=$(echo \"$output\" | wc -l)\n        if [ $num_lines -ge 2 ]; then\n            ipv6_prefixlen=$(echo \"$output\" | sort -n | head -n 1)\n        else\n            ipv6_prefixlen=$(echo \"$output\" | head -n 1)\n        fi\n        if [ \"$updated_ipv6\" == \"$current_ipv6\" ] || [ -z \"$updated_ipv6\" ]; then\n            echo \"128\" >$TEMP_DIR/eo6s_result\n        else\n            echo \"$ipv6_prefixlen\" >$TEMP_DIR/eo6s_result\n        fi\n    else\n        echo \"Unknown\" >$TEMP_DIR/eo6s_result\n    fi\n}\n\ncdn_urls=(\"http://cdn1.spiritlhl.net/\" \"http://cdn2.spiritlhl.net/\" \"http://cdn3.spiritlhl.net/\" \"https://fd.spiritlhl.top/\" \"https://cdn0.spiritlhl.top/\" \"https://cdn.spiritlhl.net/\")\nST=\"OvwKx5qgJtf7PZgCKbtyojSU.MTcwMTUxNzY1MTgwMw\"\nspeedtest_ver=\"1.2.0\"\nSERVER_BASE_URL=\"https://raw.githubusercontent.com/spiritLHLS/speedtest.net-CN-ID/main\"\nSERVER_BASE_URL2=\"https://raw.githubusercontent.com/spiritLHLS/speedtest.cn-CN-ID/main\"\n\npre_check() {\n    trap 'error_exit' ERR\n    check_update || error_exit\n    check_root\n    check_sudo\n    check_curl\n    optimized_kernel\n    run_ip_info_check &\n    check_ipv6 &\n    check_ipv4 &\n    check_ip\n    check_cdn_file\n    check_wget\n    systemInfo_get_os_release\n    check_lsof\n    check_time_zone\n    start_time=$(date +%s)\n    Check_SysBench\n    global_startup_init_action\n    cd $myvar >/dev/null 2>&1\n    ! _exists \"wget\" && error_exit && _red \"Error: wget command not found.\\n\" && exit 1\n    check_china\n    wait\n    IPV4=$(check_and_cat_file /tmp/ip_quality_ipv4)\n    IPV6=$(check_and_cat_file /tmp/ip_quality_ipv6)\n    if [ -n \"$IPV6\" ] && [ -n \"$IPV4\" ]; then\n        if [ \"$en_status\" = true ]; then\n            echo \"Detecting and verifying IPV6 subnet mask size is in progress, it will take about 10~15 seconds\"\n        else\n            echo \"正在检测和验证IPV6的子网掩码大小，大概需要10~15秒\"\n        fi\n        eo6s &\n    fi\n    if [ \"$en_status\" = true ]; then\n        echo \"Please wait patiently for the background tasks to finish\"\n    else\n        echo \"请耐心等待后台任务执行完毕\"\n    fi\n    check_haveged\n    check_free\n    check_timeout\n    check_lscpu\n    check_unzip\n    check_tar\n    check_nc\n    checknslookup\n    wait\n    if [ \"$en_status\" = true ]; then\n        echo \"Finish background task\"\n    else\n        echo \"后台任务执行完毕\"\n    fi\n}\n\nsjlleo_script() {\n    [ \"${Var_OSRelease}\" = \"freebsd\" ] && return\n    if [ \"$en_status\" = true ]; then\n        return\n    fi\n    cd $myvar >/dev/null 2>&1\n    if [ -f $TEMP_DIR/CommonMediaTests ]; then\n        mv $TEMP_DIR/CommonMediaTests ./\n        echo \"------------流媒体解锁--基于oneclickvirt/CommonMediaTests开源-----------\"\n        _yellow \"以下测试的解锁地区是准确的，但是不是完整解锁的判断可能有误，这方面仅作参考使用\"\n        ./CommonMediaTests | grep -v 'github.com/oneclickvirt/CommonMediaTests'\n        _yellow \"解锁Netflix，Youtube，DisneyPlus上面和下面进行比较，不同之处自行判断\"\n    else\n        _red \"CommonMediaTests下载失败所以不进行测试\"\n    fi\n}\n\ncpu_judge() {\n    local benchmark_type=$1\n    local benchmark_name=\"\"\n    if [ \"$en_status\" = true ]; then\n        case $benchmark_type in\n        sysbench)\n            benchmark_name=\"SysBench_CPU_Fast\"\n            echo \"---------------------------CPU-Sysbench-Test----------------------------\"\n            ;;\n        geekbench4)\n            benchmark_name=\"4\"\n            echo \"--------------------------CPU-Geekbench4-Test---------------------------\"\n            ;;\n        geekbench5)\n            benchmark_name=\"5\"\n            echo \"--------------------------CPU-Geekbench5-Test---------------------------\"\n            ;;\n        geekbench6)\n            benchmark_name=\"6\"\n            echo \"--------------------------CPU-Geekbench6-Test---------------------------\"\n            ;;\n        *)\n            echo \"Invalid benchmark type\"\n            return\n            ;;\n        esac\n    else\n        case $benchmark_type in\n        sysbench)\n            benchmark_name=\"SysBench_CPU_Fast\"\n            echo \"----------------------CPU测试--通过sysbench测试-------------------------\"\n            ;;\n        geekbench4)\n            benchmark_name=\"4\"\n            echo \"-----------------CPU测试--感谢yabs开源geekbench4测试--------------------\"\n            ;;\n        geekbench5)\n            benchmark_name=\"5\"\n            echo \"-----------------CPU测试--感谢yabs开源geekbench5测试--------------------\"\n            ;;\n        geekbench6)\n            benchmark_name=\"6\"\n            echo \"-----------------CPU测试--感谢yabs开源geekbench6测试--------------------\"\n            ;;\n        *)\n            echo \"Invalid benchmark type\"\n            return\n            ;;\n        esac\n    fi\n    if [ \"$benchmark_type\" == \"sysbench\" ]; then\n        Function_SysBench_CPU_Fast\n    else\n        mv $TEMP_DIR/yabs.sh ./\n        local output=$(./yabs.sh -s -- -f -i -n \"-$benchmark_name\" 2>&1 | tail -n +9)\n        if [[ $output =~ \"Single Core\" ]]; then\n            output=$(echo \"$output\" | grep -v 'curl' | sed '$d' | sed '$d' | sed '1,2d')\n            echo \"$output\"\n        else\n            if [ \"$en_status\" = true ]; then\n                echo \"Test failed please replace with another\"\n            else\n                echo \"测试失败请替换另一种方式\"\n            fi\n        fi\n    fi\n    cd $myvar >/dev/null 2>&1\n    sleep 1\n}\n\nmemory_script() {\n    if command -v sysbench >/dev/null 2>&1; then\n        if [ \"$en_status\" = true ]; then\n            echo \"----------------------------Memory-Test---------------------------------\"\n        else\n            echo \"---------------------内存测试--感谢lemonbench开源-----------------------\"\n        fi\n        Function_SysBench_Memory_Fast\n    fi\n}\n\nbasic_script() {\n    if [ \"$en_status\" = true ]; then\n        echo \"----------------------------Basic-Information---------------------------\"\n    else\n        echo \"---------------------基础信息查询--感谢所有开源项目---------------------\"\n    fi\n    print_system_info\n    print_ip_info\n    # cpu和内存测试\n    cd $myvar >/dev/null 2>&1\n    sleep 1\n    if [ \"$test_base_status\" = false ]; then\n        if [ -z \"$test_cpu_type\" ] || [ \"$test_cpu_type\" = \"sysbench\" ]; then\n            cpu_judge sysbench\n        elif [ \"$test_cpu_type\" = \"gb4\" ]; then\n            cpu_judge geekbench4\n        elif [ \"$test_cpu_type\" = \"gb5\" ]; then\n            cpu_judge geekbench5\n        elif [ \"$test_cpu_type\" = \"gb6\" ]; then\n            cpu_judge geekbench6\n        fi\n        memory_script\n    fi\n}\n\nio1_script() {\n    cd $myvar >/dev/null 2>&1\n    sleep 1\n    if [ \"$en_status\" = true ]; then\n        echo \"------------------------Disk-dd-Read/Write-Test-------------------------\"\n    else\n        echo \"------------------磁盘dd读写测试--感谢lemonbench开源--------------------\"\n    fi\n    Function_DiskTest_Fast\n}\n\nio2_script() {\n    [ \"${Var_OSRelease}\" = \"freebsd\" ] && return\n    cd $myvar >/dev/null 2>&1\n    cp $TEMP_DIR/yabs.sh ./\n    if [ \"$en_status\" = true ]; then\n        echo \"-----------------------Disk-fio-Read/Write-Test-------------------------\"\n    else\n        echo \"---------------------磁盘fio读写测试--感谢yabs开源----------------------\"\n    fi\n    echo -en \"\\rRunning fio test...\"\n    local output=$(./yabs.sh -s -- -i -n -g 2>&1 | tail -n +9)\n    if [[ $output =~ \"Block Size\" ]]; then\n        output=$(echo \"$output\" | grep -v 'curl' | sed '$d' | sed '$d' | sed '1,2d')\n        echo -en \"\\r\"\n        echo \"$output\"\n    else\n        echo -en \"\\r\"\n        if [ \"$en_status\" = true ]; then\n            echo \"Test failed please replace with another\"\n        else\n            echo \"测试失败请替换另一种方式\"\n        fi\n    fi\n    rm -rf yabs.sh\n}\n\nio3_script() {\n    [ \"${Var_OSRelease}\" = \"freebsd\" ] && return\n    cd $myvar >/dev/null 2>&1\n    if [ \"$en_status\" = true ]; then\n        echo \"-----------------------Multi-Disk-Read/Write-Test-----------------------\"\n    else\n        echo \"----------------------多盘读写测试--感谢yabs开源------------------------\"\n    fi\n    # 获取非以vda开头的盘名称\n    disk_names=$(lsblk -e 11 -n -o NAME | grep -v \"vda\" | grep -v \"snap\" | grep -v \"loop\")\n    if [ -z \"$disk_names\" ]; then\n        echo \"No eligible disk names found. Exiting script.\"\n        return\n    fi\n    # 存储盘名称和盘路径的数组\n    declare -a disk_paths\n    # 遍历每个盘名称并检索对应的盘路径，并将名称和路径存储到数组中\n    for disk_name in $disk_names; do\n        disk_path=$(df -h | awk -v disk_name=\"$disk_name\" '$0 ~ disk_name { print $NF }')\n        if [ -n \"$disk_path\" ]; then\n            disk_paths+=(\"$disk_name:$disk_path\")\n        fi\n    done\n    # 遍历数组，打开对应盘路径并检测IO\n    if [ ${#disk_paths[@]} -gt 0 ]; then\n        for disk_path in \"${disk_paths[@]}\"; do\n            disk_name=$(echo \"$disk_path\" | cut -d \":\" -f 1)\n            path=$(echo \"$disk_path\" | cut -d \":\" -f 2)\n            if [ -n \"$path\" ]; then\n                cd \"$path\" >/dev/null 2>&1\n                if [ $? -ne 0 ]; then\n                    continue\n                fi\n                echo -e \"---------------------------------\"\n                echo \"Current disk: ${disk_name}\"\n                echo \"Current path: ${path}\"\n                if [ ! -f \"yabs.sh\" ]; then\n                    cp $TEMP_DIR/yabs.sh ./\n                fi\n                echo -en \"\\rRunning fio test...\"\n                local output=$(./yabs.sh -s -- -i -n -g 2>&1 | tail -n +9)\n                echo -en \"\\r\"\n                if [[ $output =~ \"Block Size\" ]]; then\n                    output=$(echo \"$output\" | grep -v 'curl' | sed '$d' | sed '$d' | sed '1,2d')\n                    echo \"$output\"\n                else\n                    if [ \"$en_status\" = true ]; then\n                        echo \"Test failed please replace with another\"\n                    else\n                        echo \"测试失败请替换另一种方式\"\n                    fi\n                fi\n                rm -rf yabs.sh\n            fi\n            cd $myvar >/dev/null 2>&1\n        done\n        echo -e \"---------------------------------\"\n    else\n        echo \"No extra disk\"\n        return\n    fi\n    rm -rf yabs.sh\n}\n\nio_judge() {\n    local par=\"$1\"\n    if [ \"$par\" = \"all\" ] && [ \"$test_disk_type\" = \"\" ]; then\n        io1_script\n        sleep 0.5\n        io2_script\n        return\n    elif [ \"$par\" = \"io2\" ] && [ \"$test_disk_type\" = \"\" ]; then\n        io2_script\n        return\n    fi\n    if [ \"$multidisk_status\" = true ]; then\n        io1_script\n        sleep 0.5\n        io3_script\n    elif [ \"$test_disk_type\" = \"dd\" ]; then\n        io1_script\n    elif [ \"$test_disk_type\" = \"fio\" ]; then\n        io2_script\n    fi\n}\n\nRegionRestrictionCheck_script() {\n    if [ \"$en_status\" = true ]; then\n        echo -e \"-------------------------Streaming-Unlock-Test--------------------------\"\n        _yellow \" The following is an IPV4 network test, if there is no IPV4 network there is no output\"\n        echo 0 | bash media_lmc_check.sh -E -M 4 2>/dev/null | grep -A999999 '============\\[ Multination \\]============' | sed '/=======================================/q'\n        _yellow \" The following is an IPV6 network test, if there is no IPV6 network there is no output\"\n        echo 0 | bash media_lmc_check.sh -E -M 6 2>/dev/null | grep -A999999 '============\\[ Multination \\]============' | sed '/=======================================/q'\n    else\n        echo -e \"----------------流媒体解锁--感谢RegionRestrictionCheck开源--------------\"\n        _yellow \" 以下为IPV4网络测试，若无IPV4网络则无输出\"\n        echo 0 | bash media_lmc_check.sh -M 4 2>/dev/null | grep -A999999 '============\\[ Multination \\]============' | sed '/=======================================/q'\n        _yellow \" 以下为IPV6网络测试，若无IPV6网络则无输出\"\n        echo 0 | bash media_lmc_check.sh -M 6 2>/dev/null | grep -A999999 '============\\[ Multination \\]============' | sed '/=======================================/q'\n    fi\n}\n\nlmc999_script() {\n    cd $myvar >/dev/null 2>&1\n    if [ \"$en_status\" = true ]; then\n        echo -e \"---------------------------TikTok-Unlock-Test---------------------------\"\n    else\n        echo -e \"---------------TikTok解锁--感谢lmc999的源脚本及fscarmen PR--------------\"\n    fi\n    local Ftmpresult=$(curl $useNIC --user-agent \"${UA_Browser}\" -sL -m 10 \"https://www.tiktok.com/\")\n    if [[ \"$Ftmpresult\" = \"curl\"* ]]; then\n        _red \"\\r Tiktok Region:\\t\\t${Font_Red}Failed (Network Connection)${Font_Suffix}\"\n        return\n    fi\n    local FRegion=$(echo $Ftmpresult | grep '\"region\":' | sed 's/.*\"region\"//' | cut -f2 -d'\"')\n    if [ -n \"$FRegion\" ]; then\n        _green \"\\r Tiktok Region:\\t\\t${Font_Green}【${FRegion}】${Font_Suffix}\"\n        return\n    fi\n    local STmpresult=$(curl $useNIC --user-agent \"${UA_Browser}\" -sL -m 10 -H \"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\" -H \"Accept-Encoding: gzip\" -H \"Accept-Language: en\" \"https://www.tiktok.com\" | gunzip 2>/dev/null)\n    local SRegion=$(echo $STmpresult | grep '\"region\":' | sed 's/.*\"region\"//' | cut -f2 -d'\"')\n    if [ -n \"$SRegion\" ]; then\n        _yellow \"\\r Tiktok Region:\\t\\t${Font_Yellow}【${SRegion}】(可能为IDC IP)${Font_Suffix}\"\n        return\n    else\n        _red \"\\r Tiktok Region:\\t\\t${Font_Red}Failed${Font_Suffix}\"\n        return\n    fi\n}\n\nspiritlhl_script() {\n    [ \"${Var_OSRelease}\" = \"freebsd\" ] && return\n    cd $myvar >/dev/null 2>&1\n    if [ \"$en_status\" = true ]; then\n        echo -e \"----IP-Quality-Detection--Base-On-oneclickvirt/securityCheck---------\"\n        _yellow \"Data for reference only, does not represent 100% accurate, if and the actual situation is not consistent with the manual query multiple database comparison\"\n    else\n        echo -e \"-------------IP质量检测--基于oneclickvirt/securityCheck使用-------------\"\n        _yellow \"数据仅作参考，不代表100%准确，如果和实际情况不一致请手动查询多个数据库比对\"\n    fi\n    ipcheck\n}\n\nbacktrace_script() {\n    [ \"${Var_OSRelease}\" = \"freebsd\" ] && return\n    if [ \"$en_status\" = true ]; then\n        return\n    fi\n    cd $myvar >/dev/null 2>&1\n    if [ -f \"${TEMP_DIR}/backtrace\" ]; then\n        chmod 777 ${TEMP_DIR}/backtrace\n        curl_output=$(${TEMP_DIR}/backtrace -s=false 2>&1)\n    else\n        return\n    fi\n    echo -e \"----------------三网回程--基于oneclickvirt/backtrace开源----------------\"\n    grep -sq 'sendto: network is unreachable' <<<$curl_output && _yellow \"纯IPV6网络无法查询\" || echo \"${curl_output}\" | grep -v 'github.com/oneclickvirt/backtrace' | grep -v '正在测试' | grep -v '测试完成' | grep -v 'json decode err'\n}\n\nfscarmen_route_script() {\n    [ \"${Var_OSRelease}\" = \"freebsd\" ] && return\n    if [ \"$en_status\" = true ]; then\n        return\n    fi\n    cd $myvar >/dev/null 2>&1\n    echo -e \"---------------------回程路由--感谢fscarmen开源及PR---------------------\"\n    rm -f /tmp/ecs/ip.test\n    local test_area_4\n    local test_ip_4\n    local test_area_6\n    local test_ip_6\n    if [ \"$swhc_mode\" = false ]; then\n        test_area_4=(\"你本地的IPV4地址\")\n        test_ip_4=(\"$target_ipv4\")\n    elif [ -n \"$route_location\" ] && [[ \"$route_location\" =~ ^(b|g|s|c)$ ]]; then\n        declare -n test_area_4=\"test_area_$route_location\"\n        declare -n test_ip_4=\"test_ip_$route_location\"\n    elif [ -n \"$route_location\" ] && [[ \"$route_location\" =~ ^(b6|g6|s6)$ ]]; then\n        declare -n test_area_6=\"test_area_$route_location\"\n        declare -n test_ip_6=\"test_ip_$route_location\"\n    else\n        test_area_4=(\"${!1}\")\n        test_ip_4=(\"${!2}\")\n    fi\n    local ip4=$(echo \"$IPV4\" | tr -d '\\n')\n    local ip6=$(echo \"$IPV6\" | tr -d '\\n')\n    # 不存在IPV4网络，存在IPV6网络，未指定使用哪个城市的三网地址测试，默认修改为使用广州三网IPV6地址\n    if [[ -z \"${ip4}\" ]] && [[ -n \"$ip6\" ]] && [ -z \"$route_location\" ]; then\n        declare -n test_area_6=\"test_area_g6\"\n        declare -n test_ip_6=\"test_ip_g6\"\n    fi\n    if [[ ! -z \"${ip4}\" ]] && [[ \"$route_location\" != \"b6\" && \"$route_location\" != \"g6\" && \"$route_location\" != \"s6\" ]]; then\n        if [ \"$swhc_mode\" = false ]; then\n            _green \"核心程序来自ipip.net或nexttrace，请知悉!\" >/tmp/ecs/ip.test\n        else\n            _green \"依次测试电信/联通/移动经过的地区及线路，核心程序来自ipip.net或nexttrace，请知悉!\" >/tmp/ecs/ip.test\n        fi\n        for ((a = 0; a < ${#test_area_4[@]}; a++)); do\n            # \"$TEMP_DIR/$BESTTRACE_FILE\" \"${test_ip_4[a]}\" -g cn 2>/dev/null | sed \"s/^[ ]//g\" | sed \"/^[ ]/d\" | sed '/ms/!d' | sed \"s#.* \\([0-9.]\\+ ms.*\\)#\\1#g\" >>/tmp/ip_temp\n            # if [ ! -s \"/tmp/ip_temp\" ] || grep -q \"http: 403\" /tmp/ip_temp || grep -q \"error\" /tmp/ip_temp 2>/dev/null; then\n            #     rm -rf /tmp/ip_temp\n            #     RESULT=$(\"$TEMP_DIR/$NEXTTRACE_FILE\" \"${test_ip_4[a]}\" --nocolor 2>/dev/null)\n            #     RESULT=$(echo \"$RESULT\" | grep '^[0-9 ]')\n            #     PART_1=$(echo \"$RESULT\" | grep '^[0-9]\\{1,2\\}[ ]\\+[0-9a-f]' | awk '{$1=\"\";$2=\"\";print}' | sed \"s@^[ ]\\+@@g\")\n            #     PART_2=$(echo \"$RESULT\" | grep '\\(.*ms\\)\\{3\\}' | sed 's/.* \\([0-9*].*ms\\).*ms.*ms/\\1/g')\n            #     SPACE=' '\n            #     for ((i = 1; i <= $(echo \"$PART_1\" | wc -l); i++)); do\n            #         [ \"$i\" -eq 10 ] && unset SPACE\n            #         p_1=$(echo \"$PART_2\" | sed -n \"${i}p\") 2>/dev/null\n            #         p_2=$(echo \"$PART_1\" | sed -n \"${i}p\") 2>/dev/null\n            #         echo -e \"$p_1 \\t$p_2\" >>/tmp/ip_temp\n            #     done\n            # fi\n            rm -rf /tmp/ip_temp\n            RESULT=$(\"$TEMP_DIR/$NEXTTRACE_FILE\" \"${test_ip_4[a]}\" --nocolor 2>/dev/null)\n            RESULT=$(echo \"$RESULT\" | grep '^[0-9 ]')\n            PART_1=$(echo \"$RESULT\" | grep '^[0-9]\\{1,2\\}[ ]\\+[0-9a-f]' | awk '{$1=\"\";$2=\"\";print}' | sed \"s@^[ ]\\+@@g\")\n            PART_2=$(echo \"$RESULT\" | grep '\\(.*ms\\)\\{3\\}' | sed 's/.* \\([0-9*].*ms\\).*ms.*ms/\\1/g')\n            SPACE=' '\n            for ((i = 1; i <= $(echo \"$PART_1\" | wc -l); i++)); do\n                [ \"$i\" -eq 10 ] && unset SPACE\n                p_1=$(echo \"$PART_2\" | sed -n \"${i}p\") 2>/dev/null\n                p_2=$(echo \"$PART_1\" | sed -n \"${i}p\") 2>/dev/null\n                echo -e \"$p_1 \\t$p_2\" >>/tmp/ip_temp\n            done\n            if [ \"$swhc_mode\" = false ]; then\n                ori_ipv4=\"${test_ip_4[a]}\"\n                IFS='.' read -ra parts <<<\"$ori_ipv4\"\n                if [ \"${#parts[@]}\" -ge 2 ]; then\n                    parts[2]=\"xxx\"\n                    parts[3]=\"xxx\"\n                    new_ipv4=\"${parts[0]}.${parts[1]}.${parts[2]}.${parts[3]}\"\n                    _yellow \"${test_area_4[a]} $new_ipv4\" >>/tmp/ecs/ip.test\n                else\n                    _yellow \"${test_area_4[a]} xxx.xxx.xxx.xxx\" >>/tmp/ecs/ip.test\n                fi\n            else\n                _yellow \"${test_area_4[a]} ${test_ip_4[a]}\" >>/tmp/ecs/ip.test\n            fi\n            cat /tmp/ip_temp >>/tmp/ecs/ip.test\n            rm -rf /tmp/ip_temp\n        done\n    elif [[ -n \"$ip6\" ]] || [[ \"$route_location\" =~ ^(b6|g6|s6)$ ]]; then\n        _green \"依次测试电信/联通/移动经过的地区及线路，核心程序来自nexttrace，请知悉!\" >/tmp/ecs/ip.test\n        for ((a = 0; a < ${#test_area_6[@]}; a++)); do\n            rm -rf /tmp/ip_temp\n            RESULT=$(\"$TEMP_DIR/$NEXTTRACE_FILE\" \"${test_ip_6[a]}\" --nocolor 2>/dev/null)\n            RESULT=$(echo \"$RESULT\" | grep -E -v '^(NextTrace|MapTrace|\\[NextTrace API\\]|IP|traceroute to)')\n            PART_1=$(echo \"$RESULT\" | grep '^[0-9]\\{1,2\\}[ ]\\+[0-9a-f]' | awk '{$1=\"\";$2=\"\";print}' | sed \"s@^[ ]\\+@@g\")\n            PART_2=$(echo \"$RESULT\" | grep '\\(.*ms\\)\\{3\\}' | sed 's/.* \\([0-9*].*ms\\).*ms.*ms/\\1/g')\n            SPACE=' '\n            for ((i = 1; i <= $(echo \"$PART_1\" | wc -l); i++)); do\n                [ \"$i\" -eq 10 ] && unset SPACE\n                p_1=$(echo \"$PART_2\" | sed -n \"${i}p\") 2>/dev/null\n                p_2=$(echo \"$PART_1\" | sed -n \"${i}p\") 2>/dev/null\n                echo -e \"$p_1 \\t$p_2\" >>/tmp/ip_temp\n            done\n            _yellow \"${test_area_6[a]} ${test_ip_6[a]}\" >>/tmp/ecs/ip.test\n            cat /tmp/ip_temp >>/tmp/ecs/ip.test\n            rm -rf /tmp/ip_temp\n        done\n    fi\n    output=$(check_and_cat_file /tmp/ecs/ip.test)\n    if [ -z \"${output// /}\" ]; then\n        echo \"Hop limit\"\n    else\n        echo \"$output\"\n    fi\n    rm -f /tmp/ecs/ip.test\n}\n\necs_ping() {\n    cd $myvar >/dev/null 2>&1\n    if [ \"$en_status\" = true ]; then\n        return\n    fi\n    echo -e \"-----------------------全国延迟检测--本脚本原创-------------------------\"\n    if [ -f \"${TEMP_DIR}/ecsspeed-ping.sh\" ]; then\n        ping_output=$(bash ${TEMP_DIR}/ecsspeed-ping.sh 2>&1)\n    else\n        return\n    fi\n    echo \"${ping_output}\" | grep \"|\"\n}\n\necs_net_all_script() {\n    cd $myvar >/dev/null 2>&1\n    [ \"$enable_speedtest\" = false ] && return\n    # s_time=$(date +%s)\n    rm -rf ./speedtest-cli/speedlog.txt\n    speed | tee ./speedtest-cli/speedlog.txt\n    # e_time=$(date +%s)\n    # time=$((${e_time} - ${s_time}))\n    if [ -f ./speedtest-cli/speedlog.txt ]; then\n        if ! grep -qE \"(Speedtest.net|洛杉矶|新加坡|香港|联通|电信|移动|日本|中国)\" ./speedtest-cli/speedlog.txt; then\n            export speedtest_ver=\"1.0.0\"\n            rm -rf ./speedtest-cli/speedlog.txt\n            rm -rf ./speedtest-cli*\n            (install_speedtest >/dev/null 2>&1)\n            speed\n        fi\n    fi\n    rm -fr speedtest-cli\n}\n\necs_net_minal_script() {\n    cd $myvar >/dev/null 2>&1\n    [ \"$enable_speedtest\" = false ] && return\n    # s_time=$(date +%s)\n    rm -rf ./speedtest-cli/speedlog.txt\n    speed2 | tee ./speedtest-cli/speedlog.txt\n    # e_time=$(date +%s)\n    # time=$((${e_time} - ${s_time}))\n    if [ -f ./speedtest-cli/speedlog.txt ]; then\n        if ! grep -qE \"(Speedtest.net|洛杉矶|新加坡|香港|联通|电信|移动|日本|中国)\" ./speedtest-cli/speedlog.txt; then\n            export speedtest_ver=\"1.0.0\"\n            rm -rf ./speedtest-cli/speedlog.txt\n            rm -rf ./speedtest-cli*\n            (install_speedtest >/dev/null 2>&1)\n            speed2\n        fi\n    fi\n    rm -fr speedtest-cli\n}\n\nend_script() {\n    next\n    print_end_time\n    next\n}\n\n# =============== 分区选择 部分 ===============\nall_script() {\n    pre_check\n    if [ \"$1\" = \"B\" ]; then\n        if [[ -z \"${CN}\" || \"${CN}\" != true ]]; then\n            _yellow \"Concurrently downloading files...\"\n            # besttrace\n            dfiles=(gostun CommonMediaTests nexttrace backtrace securityCheck portchecker yabs media_lmc_check)\n            start_downloads \"${dfiles[@]}\"\n            _yellow \"All files download successfully.\"\n            get_system_info\n            check_dnsutils\n            check_ping\n            ls_sg_hk_jp=($(get_nearest_data \"${SERVER_BASE_URL}/ls_sg_hk_jp.csv\"))\n            CN_Unicom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Unicom.csv\"))\n            CN_Telecom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Telecom.csv\"))\n            CN_Mobile=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Mobile.csv\"))\n            [ \"$enable_speedtest\" = true ] && _yellow \"checking speedtest\" && install_speedtest &\n            check_lmc_script &\n            check_nat_type &\n            clear\n            print_intro\n            basic_script\n            wait\n            ecs_net_all_script >${TEMP_DIR}/ecs_net_output.txt &\n            io_judge \"all\"\n            sjlleo_script >${TEMP_DIR}/sjlleo_output.txt &\n            RegionRestrictionCheck_script >${TEMP_DIR}/RegionRestrictionCheck_output.txt &\n            lmc999_script >${TEMP_DIR}/lmc999_output.txt &\n            spiritlhl_script >${TEMP_DIR}/spiritlhl_output.txt &\n            backtrace_script >${TEMP_DIR}/backtrace_output.txt &\n            fscarmen_route_script test_area_g[@] test_ip_g[@] >${TEMP_DIR}/fscarmen_route_output.txt &\n            echo \"正在并发测试中，大概2~3分钟无输出，请耐心等待。。。\"\n            wait\n            check_and_cat_file ${TEMP_DIR}/sjlleo_output.txt\n            check_and_cat_file ${TEMP_DIR}/RegionRestrictionCheck_output.txt\n            check_and_cat_file ${TEMP_DIR}/lmc999_output.txt\n            check_and_cat_file ${TEMP_DIR}/spiritlhl_output.txt\n            check_and_cat_file ${TEMP_DIR}/backtrace_output.txt\n            check_and_cat_file ${TEMP_DIR}/fscarmen_route_output.txt\n            check_and_cat_file ${TEMP_DIR}/ecs_net_output.txt\n        else\n            _yellow \"Concurrently downloading files...\"\n            dfiles=(securityCheck portchecker ecsspeed_ping)\n            start_downloads \"${dfiles[@]}\"\n            _yellow \"All files download successfully.\"\n            get_system_info\n            check_dnsutils\n            check_ping\n            ls_sg_hk_jp=($(get_nearest_data \"${SERVER_BASE_URL}/ls_sg_hk_jp.csv\"))\n            CN_Unicom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Unicom.csv\"))\n            CN_Telecom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Telecom.csv\"))\n            CN_Mobile=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Mobile.csv\"))\n            [ \"$enable_speedtest\" = true ] && _yellow \"checking speedtest\" && install_speedtest &\n            check_lmc_script &\n            check_nat_type &\n            clear\n            print_intro\n            basic_script\n            wait\n            ecs_net_all_script >${TEMP_DIR}/ecs_net_output.txt &\n            io1_script\n            sleep 0.5\n            spiritlhl_script >${TEMP_DIR}/spiritlhl_output.txt &\n            ecs_ping >${TEMP_DIR}/ecs_ping.txt &\n            echo \"正在并发测试中，大概2~3分钟无输出，请耐心等待。。。\"\n            wait\n            check_and_cat_file ${TEMP_DIR}/spiritlhl_output.txt\n            check_and_cat_file ${TEMP_DIR}/ecs_ping.txt\n            check_and_cat_file ${TEMP_DIR}/ecs_net_output.txt\n        fi\n    else\n        # 顺序测试\n        if [[ -z \"${CN}\" || \"${CN}\" != true ]]; then\n            _yellow \"Concurrently downloading files...\"\n            # besttrace\n            dfiles=(nexttrace backtrace CommonMediaTests securityCheck portchecker gostun yabs media_lmc_check)\n            start_downloads \"${dfiles[@]}\"\n            _yellow \"All files download successfully.\"\n            get_system_info\n            check_dnsutils\n            check_ping\n            ls_sg_hk_jp=($(get_nearest_data \"${SERVER_BASE_URL}/ls_sg_hk_jp.csv\"))\n            CN_Unicom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Unicom.csv\"))\n            CN_Telecom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Telecom.csv\"))\n            CN_Mobile=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Mobile.csv\"))\n            [ \"$enable_speedtest\" = true ] && _yellow \"checking speedtest\" && install_speedtest\n            check_lmc_script\n            check_nat_type\n            clear\n            print_intro\n            basic_script\n            io_judge \"all\"\n            sjlleo_script\n            RegionRestrictionCheck_script\n            lmc999_script\n            spiritlhl_script\n            backtrace_script\n            fscarmen_route_script test_area_g[@] test_ip_g[@]\n            wait\n            ecs_net_all_script\n        else\n            _yellow \"Concurrently downloading files...\"\n            dfiles=(ecsspeed_ping securityCheck portchecker gostun)\n            start_downloads \"${dfiles[@]}\"\n            _yellow \"All files download successfully.\"\n            get_system_info\n            check_dnsutils\n            check_ping\n            ls_sg_hk_jp=($(get_nearest_data \"${SERVER_BASE_URL}/ls_sg_hk_jp.csv\"))\n            CN_Unicom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Unicom.csv\"))\n            CN_Telecom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Telecom.csv\"))\n            CN_Mobile=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Mobile.csv\"))\n            [ \"$enable_speedtest\" = true ] && _yellow \"checking speedtest\" && install_speedtest\n            check_lmc_script\n            check_nat_type\n            clear\n            print_intro\n            basic_script\n            io1_script\n            sleep 0.5\n            spiritlhl_script\n            ecs_ping\n            wait\n            sleep 1\n            ecs_net_all_script\n        fi\n    fi\n    # block_port_script\n    end_script\n}\n\nminal_script() {\n    pre_check\n    get_system_info\n    _yellow \"Concurrently downloading files...\"\n    dfiles=(gostun yabs)\n    start_downloads \"${dfiles[@]}\"\n    _yellow \"All files download successfully.\"\n    check_ping\n    CN_Unicom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Unicom.csv\"))\n    CN_Telecom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Telecom.csv\"))\n    CN_Mobile=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Mobile.csv\"))\n    [ \"$enable_speedtest\" = true ] && _yellow \"checking speedtest\" && install_speedtest\n    check_nat_type\n    clear\n    print_intro\n    basic_script\n    io_judge \"io2\"\n    ecs_net_minal_script\n    end_script\n}\n\nminal_plus() {\n    pre_check\n    _yellow \"Concurrently downloading files...\"\n    wait\n    # besttrace\n    dfiles=(nexttrace backtrace CommonMediaTests gostun yabs media_lmc_check)\n    start_downloads \"${dfiles[@]}\"\n    _yellow \"All files download successfully.\"\n    get_system_info\n    check_lmc_script\n    check_dnsutils\n    check_ping\n    CN_Unicom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Unicom.csv\"))\n    CN_Telecom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Telecom.csv\"))\n    CN_Mobile=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Mobile.csv\"))\n    [ \"$enable_speedtest\" = true ] && _yellow \"checking speedtest\" && install_speedtest\n    check_nat_type\n    clear\n    print_intro\n    basic_script\n    io_judge \"io2\"\n    sjlleo_script\n    RegionRestrictionCheck_script\n    lmc999_script\n    backtrace_script\n    fscarmen_route_script test_area_g[@] test_ip_g[@]\n    ecs_net_minal_script\n    end_script\n}\n\nminal_plus_network() {\n    pre_check\n    _yellow \"Concurrently downloading files...\"\n    # besttrace\n    dfiles=(nexttrace backtrace gostun yabs)\n    start_downloads \"${dfiles[@]}\"\n    _yellow \"All files download successfully.\"\n    get_system_info\n    check_ping\n    CN_Unicom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Unicom.csv\"))\n    CN_Telecom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Telecom.csv\"))\n    CN_Mobile=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Mobile.csv\"))\n    [ \"$enable_speedtest\" = true ] && _yellow \"checking speedtest\" && install_speedtest\n    check_nat_type\n    clear\n    print_intro\n    basic_script\n    io_judge \"io2\"\n    backtrace_script\n    fscarmen_route_script test_area_g[@] test_ip_g[@]\n    ecs_net_minal_script\n    end_script\n}\n\nminal_plus_media() {\n    pre_check\n    _yellow \"Concurrently downloading files...\"\n    dfiles=(CommonMediaTests gostun yabs media_lmc_check)\n    start_downloads \"${dfiles[@]}\"\n    _yellow \"All files download successfully.\"\n    get_system_info\n    check_dnsutils\n    check_lmc_script\n    check_ping\n    CN_Unicom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Unicom.csv\"))\n    CN_Telecom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Telecom.csv\"))\n    CN_Mobile=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Mobile.csv\"))\n    [ \"$enable_speedtest\" = true ] && _yellow \"checking speedtest\" && install_speedtest\n    check_nat_type\n    clear\n    print_intro\n    basic_script\n    io_judge \"io2\"\n    sjlleo_script\n    RegionRestrictionCheck_script\n    lmc999_script\n    ecs_net_minal_script\n    end_script\n}\n\nnetwork_script() {\n    pre_check\n    _yellow \"Concurrently downloading files...\"\n    # besttrace\n    dfiles=(nexttrace backtrace securityCheck portchecker)\n    start_downloads \"${dfiles[@]}\"\n    _yellow \"All files download successfully.\"\n    check_ping\n    ls_sg_hk_jp=($(get_nearest_data \"${SERVER_BASE_URL}/ls_sg_hk_jp.csv\"))\n    CN_Unicom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Unicom.csv\"))\n    CN_Telecom=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Telecom.csv\"))\n    CN_Mobile=($(get_nearest_data \"${SERVER_BASE_URL}/CN_Mobile.csv\"))\n    [ \"$enable_speedtest\" = true ] && _yellow \"checking speedtest\" && install_speedtest\n    clear\n    print_intro\n    spiritlhl_script\n    backtrace_script\n    fscarmen_route_script test_area_g[@] test_ip_g[@]\n    # block_port_script\n    ecs_net_all_script\n    end_script\n}\n\nmedia_script() {\n    pre_check\n    _yellow \"Concurrently downloading files...\"\n    dfiles=(CommonMediaTests media_lmc_check)\n    start_downloads \"${dfiles[@]}\"\n    _yellow \"All files download successfully.\"\n    check_dnsutils\n    check_lmc_script\n    clear\n    print_intro\n    sjlleo_script\n    RegionRestrictionCheck_script\n    lmc999_script\n    end_script\n}\n\nhardware_script() {\n    pre_check\n    _yellow \"Concurrently downloading files...\"\n    if [ \"$test_base_status\" = false ]; then\n        dfiles=(yabs gostun)\n    else\n        dfiles=(gostun)\n    fi\n    start_downloads \"${dfiles[@]}\"\n    _yellow \"All files download successfully.\"\n    get_system_info\n    check_nat_type\n    clear\n    print_intro\n    basic_script\n    if [ \"$test_base_status\" = false ]; then\n        io_judge \"all\"\n    fi\n    end_script\n}\n\nport_script() {\n    exit 1\n    pre_check\n    pre_download XXXX\n    get_system_info\n    clear\n    print_intro\n    # block_port_script\n    end_script\n}\n\nsw_script() {\n    pre_check\n    _yellow \"Concurrently downloading files...\"\n    # besttrace\n    dfiles=(nexttrace backtrace ecsspeed_ping)\n    start_downloads \"${dfiles[@]}\"\n    _yellow \"All files download successfully.\"\n    check_ping\n    clear\n    print_intro\n    backtrace_script\n    fscarmen_route_script test_area_g[@] test_ip_g[@]\n    ecs_ping\n    end_script\n}\n\nnetwork_script_select() {\n    pre_check\n    _yellow \"Concurrently downloading files...\"\n    # besttrace\n    dfiles=(nexttrace)\n    start_downloads \"${dfiles[@]}\"\n    _yellow \"All files download successfully.\"\n    clear\n    print_intro\n    if [[ \"$1\" == \"g\" ]]; then\n        fscarmen_route_script test_area_g[@] test_ip_g[@]\n    elif [[ \"$1\" == \"s\" ]]; then\n        fscarmen_route_script test_area_s[@] test_ip_s[@]\n    elif [[ \"$1\" == \"b\" ]]; then\n        fscarmen_route_script test_area_b[@] test_ip_b[@]\n    elif [[ \"$1\" == \"c\" ]]; then\n        fscarmen_route_script test_area_c[@] test_ip_c[@]\n    else\n        echo \"Invalid argument, please use 'g', 's', 'b', or 'c'.\"\n        return 1\n    fi\n    end_script\n}\n\nrm_script() {\n    cd $myvar >/dev/null 2>&1\n    rm -rf speedtest.tgz*\n    rm -rf wget-log*\n    rm -rf media_lmc_check.sh*\n    rm -rf CommonMediaTests\n    rm -rf besttrace\n    rm -rf nexttrace\n    rm -rf LemonBench.Result.txt*\n    rm -rf speedtest.log*\n    rm -rf test\n    rm -rf yabs.sh*\n    rm -rf speedtest.tgz*\n    rm -rf speedtest.tar.gz*\n    rm -rf speedtest-cli*\n    rm -rf geekbench_claim.url*\n    rm -rf \"$PROGRESS_DIR\"\n    rm -rf \"$PID_FILE\"\n}\n\nerror_exit() {\n    if [ \"$en_status\" = true ]; then\n        echo \"An error occurred during execution. Please try using https://github.com/oneclickvirt/ecs for testing instead.\"\n    else\n        echo \"执行出现错误,请使用 https://github.com/oneclickvirt/ecs 进行测试\"\n    fi\n}\n\nbuild_text() {\n    cd $myvar >/dev/null 2>&1\n    if { [ -n \"${menu_mode}\" ] && [ \"${menu_mode}\" = false ]; } || { [ -n \"${StartInput}\" ] && [ \"${StartInput}\" -eq 1 ]; } || { [ -n \"${StartInput}\" ] && [ \"${StartInput}\" -eq 2 ]; } || { [ -n \"${StartInput1}\" ] && [ \"${StartInput1}\" -ge 1 ] && [ \"${StartInput1}\" -le 4 ]; }; then\n        sed -i -e '1,/-------------------- A Bench Script By spiritlhl ---------------------/d' test_result.txt\n        sed -i -e 's/\\x1B\\[[0-9;]\\+[a-zA-Z]//g' test_result.txt\n        sed -i -e '/^$/d' test_result.txt\n        sed -i -e '/Preparing system for disk tests.../d' test_result.txt\n        sed -i -e '/Generating fio test file.../d' test_result.txt\n        sed -i -e '/Running fio random mixed R+W disk test with 4k block size.../d' test_result.txt\n        sed -i -e '/Running fio random mixed R+W disk test with 64k block size.../d' test_result.txt\n        sed -i -e '/Running fio random mixed R+W disk test with 512k block size.../d' test_result.txt\n        sed -i -e '/Running fio random mixed R+W disk test with 1m block size.../d' test_result.txt\n        tr '\\r' '\\n' <test_result.txt >test_result1.txt\n        mv test_result1.txt test_result.txt\n        sed -i -e '/^$/d' test_result.txt\n        sed -i -e '/1\\/1/d' test_result.txt\n        sed -i -e '/Block\\s*->/d' test_result.txt\n        sed -i -e '/s)\\s*->/d' test_result.txt\n        sed -i -e '/^该运营商\\|^测速中/d' test_result.txt\n        sed -i -e '/^Running fio test.../d' test_result.txt\n        sed -i -e '/^checking speedtest/d' test_result.txt\n        if [ -s test_result.txt ]; then\n            http_short_url=$(curl --ipv4 -sL -m 10 -X POST \\\n                -H \"Authorization: $ST\" \\\n                -F \"file=@${myvar}/test_result.txt\" \\\n                \"http://hpaste.spiritlhl.net/api/UL/upload\")\n            if [ $? -eq 0 ] && [ -n \"$http_short_url\" ] && echo \"$http_short_url\" | grep -q \"show\"; then\n                file_id=$(echo \"$http_short_url\" | grep -o '[^/]*$')\n                http_short_url=\"http://hpaste.spiritlhl.net/#/show/${file_id}\"\n                https_short_url=\"https://paste.spiritlhl.net/#/show/${file_id}\"\n            else\n                # 如果 HTTP 失败，尝试 HTTPS\n                https_short_url=$(curl --ipv6 -sL -m 10 -X POST \\\n                    -H \"Authorization: $ST\" \\\n                    -F \"file=@${myvar}/test_result.txt\" \\\n                    \"https://paste.spiritlhl.net/api/UL/upload\")\n                if [ $? -eq 0 ] && [ -n \"$https_short_url\" ] && echo \"$https_short_url\" | grep -q \"show\"; then\n                    file_id=$(echo \"$https_short_url\" | grep -o '[^/]*$')\n                    http_short_url=\"http://hpaste.spiritlhl.net/#/show/${file_id}\"\n                    https_short_url=\"https://paste.spiritlhl.net/#/show/${file_id}\"\n                else\n                    http_short_url=\"\"\n                    https_short_url=\"\"\n                fi\n            fi\n        fi\n    fi\n}\n\ncomprehensive_test_script_options() {\n    case $StartInputc in\n    1)\n        wget -qO- --no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash\n        break_status=true\n        ;;\n    2)\n        curl -fsL https://ilemonra.in/LemonBenchIntl | bash -s fast\n        break_status=true\n        ;;\n    3)\n        curl -sL yabs.sh | bash\n        break_status=true\n        ;;\n    4)\n        wget -qO- bench.sh | bash\n        break_status=true\n        ;;\n    5)\n        bash <(wget -qO- git.io/ceshi)\n        break_status=true\n        ;;\n    6)\n        wget --no-check-certificate https://raw.githubusercontent.com/teddysun/across/master/unixbench.sh && chmod +x unixbench.sh && ./unixbench.sh\n        break_status=true\n        ;;\n    7)\n        wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench-CN.sh && bash ZBench-CN.sh\n        break_status=true\n        ;;\n    0)\n        original_script\n        break_status=true\n        ;;\n    *)\n        if [ \"$en_status\" = true ]; then\n            echo \"Input error, please re-enter\"\n        else\n            echo \"输入错误，请重新输入\"\n        fi\n        break_status=false\n        ;;\n    esac\n}\n\ncomprehensive_test_script() {\n    head_script\n    if $menu_mode; then\n        if [ \"$en_status\" = true ]; then\n            _yellow \"Scripts with comprehensive tests are as follows\"\n            echo -e \"${GREEN}1.${PLAIN} superbench VPS test scripts - based on teddysun's secondary open source modifications\"\n            echo -e \"${GREEN}2.${PLAIN} lemonbench VPS test script\"\n            echo -e \"${GREEN}3.${PLAIN} YABS VPS Test Script\"\n            echo -e \"${GREEN}4.${PLAIN} Bench.sh VPS test script by teddysun\"\n            echo -e \"${GREEN}5.${PLAIN} Aniverse's a.sh VPS Test Script - Special Adaptation Dedicated Service\"\n            echo -e \"${GREEN}6.${PLAIN} UnixBench VPS Test Script - Special Adaptation for unix Systems\"\n            echo -e \"${GREEN}7.${PLAIN} Zbench VPS Test Script - Testing in China\"\n            echo \" -------------\"\n            echo -e \"${GREEN}0.${PLAIN} 回到上一级菜单\"\n            echo \"\"\n        else\n            _yellow \"具备综合性测试的脚本如下\"\n            echo -e \"${GREEN}1.${PLAIN} superbench VPS测试脚本-基于teddysun的二开\"\n            echo -e \"${GREEN}2.${PLAIN} lemonbench VPS测试脚本\"\n            echo -e \"${GREEN}3.${PLAIN} YABS VPS测试脚本-英文论坛常用\"\n            echo -e \"${GREEN}4.${PLAIN} teddysun的bench.sh VPS测试脚本\"\n            echo -e \"${GREEN}5.${PLAIN} Aniverse的a.sh VPS测试脚本-特殊适配独服\"\n            echo -e \"${GREEN}6.${PLAIN} UnixBench VPS测试脚本-特殊适配unix系统\"\n            echo -e \"${GREEN}7.${PLAIN} Zbench VPS测试脚本-国内测试\"\n            echo \" -------------\"\n            echo -e \"${GREEN}0.${PLAIN} 回到上一级菜单\"\n            echo \"\"\n        fi\n        while true; do\n            if [ \"$en_status\" = true ]; then\n                read -rp \"Please enter the option number:\" StartInputc\n            else\n                read -rp \"请输入选项:\" StartInputc\n            fi\n            comprehensive_test_script_options\n            if [ \"$break_status\" = true ] || [ \"$menu_mode\" = false ]; then\n                break\n            fi\n        done\n    else\n        StartInputc=\"$sub_of_sub_menu_option\"\n        comprehensive_test_script_options\n    fi\n}\n\nmedia_test_script_options() {\n    case $StartInputm in\n    1)\n        wget -O nf https://github.com/sjlleo/netflix-verify/releases/download/v3.1.0/nf_linux_amd64 && chmod +x nf && ./nf\n        break_status=true\n        ;;\n    2)\n        wget -O tubecheck https://cdn.jsdelivr.net/gh/sjlleo/TubeCheck/CDN/tubecheck_1.0beta_linux_amd64 && chmod +x tubecheck && clear && ./tubecheck\n        break_status=true\n        ;;\n    3)\n        wget -O dp https://github.com/sjlleo/VerifyDisneyPlus/releases/download/1.01/dp_1.01_linux_amd64 && chmod +x dp && clear && ./dp\n        break_status=true\n        ;;\n    4)\n        lmc999_script\n        break_status=true\n        ;;\n    5)\n        bash <(curl -s https://raw.githubusercontent.com/lmc999/TikTokCheck/main/tiktok.sh)\n        break_status=true\n        ;;\n    6)\n        bash <(curl -L -s check.unlock.media)\n        break_status=true\n        ;;\n    7)\n        bash <(curl -Ls unlock.moe)\n        break_status=true\n        ;;\n    8)\n        bash <(curl -Ls https://cpp.li/openai)\n        break_status=true\n        ;;\n    9)\n        bash <(curl -Ls https://bash.spiritlhl.net/openai-checker)\n        break_status=true\n        ;;\n    0)\n        original_script\n        break_status=true\n        ;;\n    *)\n        if [ \"$en_status\" = true ]; then\n            echo \"Input error, please re-enter\"\n        else\n            echo \"输入错误，请重新输入\"\n        fi\n        break_status=false\n        ;;\n    esac\n}\n\nmedia_test_script() {\n    head_script\n    if $menu_mode; then\n        _yellow \"流媒体测试相关的脚本如下\"\n        echo -e \"${GREEN}1.${PLAIN} sjlleo的NetFlix解锁检测脚本 \"\n        echo -e \"${GREEN}2.${PLAIN} sjlleo的Youtube地域信息检测脚本\"\n        echo -e \"${GREEN}3.${PLAIN} sjlleo的DisneyPlus解锁区域检测脚本\"\n        echo -e \"${GREEN}4.${PLAIN} lmc999的TikTok解锁区域检测脚本-本作者优化版本\"\n        echo -e \"${GREEN}5.${PLAIN} lmc999的TikTok解锁区域检测脚本-原版脚本\"\n        echo -e \"${GREEN}6.${PLAIN} lmc999的流媒体检测脚本-综合性地域流媒体全测的\"\n        echo -e \"${GREEN}7.${PLAIN} nkeonkeo的流媒体检测脚本-基于上者的GO重构版本\"\n        echo -e \"${GREEN}8.${PLAIN} missuo的OpenAI-Checker检测脚本(可能卡住)\"\n        echo -e \"${GREEN}9.${PLAIN} 本人修改优化的OpenAI-Checker检测脚本(重构优化)\"\n        echo \" -------------\"\n        echo -e \"${GREEN}0.${PLAIN} 回到上一级菜单\"\n        echo \"\"\n        while true; do\n            if [ \"$en_status\" = true ]; then\n                read -rp \"Please enter the option number:\" StartInputm\n            else\n                read -rp \"请输入选项:\" StartInputm\n            fi\n            media_test_script_options\n            if [ \"$break_status\" = true ] || [ \"$menu_mode\" = false ]; then\n                break\n            fi\n        done\n    else\n        StartInputm=\"$sub_of_sub_menu_option\"\n        media_test_script_options\n    fi\n}\n\nnetwork_test_script_options() {\n    case $StartInputn in\n    1)\n        curl https://raw.githubusercontent.com/zhanghanyun/backtrace/main/install.sh -sSf | sh\n        break_status=true\n        ;;\n    2)\n        curl https://raw.githubusercontent.com/zhucaidan/mtr_trace/main/mtr_trace.sh | bash\n        break_status=true\n        ;;\n    3)\n        wget -qO- git.io/besttrace | bash\n        break_status=true\n        ;;\n    4)\n        bash <(curl -sSL https://raw.githubusercontent.com/spiritLHLS/ecs/main/return.sh)\n        break_status=true\n        ;;\n    5)\n        bash <(curl -sSL https://raw.githubusercontent.com/spiritLHLS/ecs/main/archive/nexttrace.sh)\n        break_status=true\n        ;;\n    6)\n        wget -O jcnf.sh https://raw.githubusercontent.com/Netflixxp/jcnfbesttrace/main/jcnf.sh && bash jcnf.sh\n        break_status=true\n        ;;\n    7)\n        bash <(curl -L -Lso- https://git.io/superspeed.sh)\n        break_status=true\n        ;;\n    8)\n        bash <(curl -Lso- https://git.io/superspeed_uxh)\n        break_status=true\n        ;;\n    9)\n        bash <(curl -Lso- https://git.io/J1SEh)\n        break_status=true\n        ;;\n    10)\n        bash <(curl -L -Lso- https://bench.im/hyperspeed)\n        break_status=true\n        ;;\n    11)\n        bash <(curl -sL bash.icu/speedtest)\n        break_status=true\n        ;;\n    12)\n        curl -sL network-speed.xyz | bash\n        break_status=true\n        ;;\n    13)\n        bash <(wget -qO- bash.spiritlhl.net/ecs-net)\n        break_status=true\n        ;;\n    14)\n        bash <(wget -qO- bash.spiritlhl.net/ecs-cn)\n        break_status=true\n        ;;\n    15)\n        bash <(wget -qO- bash.spiritlhl.net/ecs-ping)\n        break_status=true\n        ;;\n    0)\n        original_script\n        break_status=true\n        ;;\n    *)\n        if [ \"$en_status\" = true ]; then\n            echo \"Input error, please re-enter\"\n        else\n            echo \"输入错误，请重新输入\"\n        fi\n        break_status=false\n        ;;\n    esac\n}\n\nnetwork_test_script() {\n    head_script\n    if $menu_mode; then\n        _yellow \"网络测试相关的脚本如下\"\n        echo -e \"${GREEN}1.${PLAIN} zhanghanyun的backtrace三网回程线路检测脚本\"\n        echo -e \"${GREEN}2.${PLAIN} zhucaidan的mtr_trace三网回程线路测脚本\"\n        echo -e \"${GREEN}3.${PLAIN} 基于besttrace回程路由测试脚本(带详情信息，可能有bug)\"\n        echo -e \"${GREEN}4.${PLAIN} 基于besttrace回程路由测试脚本(二开整合输出，可能有bug)\"\n        echo -e \"${GREEN}5.${PLAIN} 基于nexttrace回程路由测试脚本(第三方IP库，更推荐)\"\n        echo -e \"${GREEN}6.${PLAIN} 由Netflixxp维护的四网路由测试脚本\"\n        echo -e \"${GREEN}7.${PLAIN} 原始作者维护的superspeed的三网测速脚本\"\n        echo -e \"${GREEN}8.${PLAIN} 未知作者修复的superspeed的三网测速脚本\"\n        echo -e \"${GREEN}9.${PLAIN} 由sunpma维护的superspeed的三网测速脚本\"\n        echo -e \"${GREEN}10.${PLAIN} 原始作者维护的hyperspeed的三网测速脚本(测速内核不开源)\"\n        echo -e \"${GREEN}11.${PLAIN} 原始作者维护的多功能测速脚本(部分测速内核不开源)\"\n        echo -e \"${GREEN}12.${PLAIN} 综合速度测试脚本(全球的测速节点)\"\n        echo -e \"${GREEN}13.${PLAIN} 本人的ecs-net三网测速脚本(自动更新测速节点，对应 speedtest.net)\"\n        echo -e \"${GREEN}14.${PLAIN} 本人的ecs-cn三网测速脚本(自动更新测速节点，对应 speedtest.cn)\"\n        echo -e \"${GREEN}15.${PLAIN} 本人的ecs-ping三网测ping脚本(自动更新测试节点)\"\n        echo \" -------------\"\n        echo -e \"${GREEN}0.${PLAIN} 回到上一级菜单\"\n        echo \"\"\n        while true; do\n            if [ \"$en_status\" = true ]; then\n                read -rp \"Please enter the option number:\" StartInputn\n            else\n                read -rp \"请输入选项:\" StartInputn\n            fi\n            network_test_script_options\n            if [ \"$break_status\" = true ] || [ \"$menu_mode\" = false ]; then\n                break\n            fi\n        done\n    else\n        StartInputn=\"$sub_of_sub_menu_option\"\n        network_test_script_options\n    fi\n}\n\nhardware_test_script_options() {\n    case $StartInputh in\n    1)\n        bash <(curl -sSL https://raw.githubusercontent.com/spiritLHLS/ecs/main/archive/disk_info.sh)\n        break_status=true\n        ;;\n    2)\n        bash <(curl -sSL https://raw.githubusercontent.com/spiritLHLS/ecs/main/archive/geekbench4.sh)\n        break_status=true\n        ;;\n    3)\n        bash <(curl -sSL https://raw.githubusercontent.com/spiritLHLS/ecs/main/archive/geekbench5.sh)\n        break_status=true\n        ;;\n    4)\n        bash <(curl -sSL https://raw.githubusercontent.com/spiritLHLS/ecs/main/archive/geekbench6.sh)\n        break_status=true\n        ;;\n    5)\n        bash <(curl -sSL https://raw.githubusercontent.com/spiritLHLS/ecs/main/archive/multi_disk_io_test.sh)\n        break_status=true\n        ;;\n    0)\n        original_script\n        break_status=true\n        ;;\n    *)\n        if [ \"$en_status\" = true ]; then\n            echo \"Input error, please re-enter\"\n        else\n            echo \"输入错误，请重新输入\"\n        fi\n        break_status=false\n        ;;\n    esac\n}\n\nhardware_test_script() {\n    head_script\n    if $menu_mode; then\n        _yellow \"硬件测试合集如下\"\n        echo \" -------------\"\n        echo -e \"${GREEN}1.${PLAIN} 检测本机硬盘(含通电时长)-一般是独服才有用\"\n        echo -e \"${GREEN}2.${PLAIN} Geekbench4测试\"\n        echo -e \"${GREEN}3.${PLAIN} Geekbench5测试\"\n        echo -e \"${GREEN}4.${PLAIN} Geekbench6测试\"\n        echo -e \"${GREEN}5.${PLAIN} 测试挂载的多个磁盘的IO(仅测试挂载盘)\"\n        echo \" -------------\"\n        echo -e \"${GREEN}0.${PLAIN} 回到上一级菜单\"\n        echo \"\"\n        while true; do\n            if [ \"$en_status\" = true ]; then\n                read -rp \"Please enter the option number:\" StartInputh\n            else\n                read -rp \"请输入选项:\" StartInputh\n            fi\n            hardware_test_script_options\n            if [ \"$break_status\" = true ] || [ \"$menu_mode\" = false ]; then\n                break\n            fi\n        done\n    else\n        StartInputh=\"$sub_of_sub_menu_option\"\n        hardware_test_script_options\n    fi\n}\n\noriginal_script_options() {\n    case $StartInput3 in\n    1)\n        comprehensive_test_script\n        break_status=true\n        ;;\n    2)\n        media_test_script\n        break_status=true\n        ;;\n    3)\n        network_test_script\n        break_status=true\n        ;;\n    4)\n        hardware_test_script\n        break_status=true\n        ;;\n    0)\n        start_script\n        break_status=true\n        ;;\n    *)\n        if [ \"$en_status\" = true ]; then\n            echo \"Input error, please re-enter\"\n        else\n            echo \"输入错误，请重新输入\"\n        fi\n        break_status=false\n        ;;\n    esac\n}\n\noriginal_script() {\n    head_script\n    if $menu_mode; then\n        _yellow \"融合怪借鉴的脚本以及部分竞品脚本合集如下\"\n        echo -e \"${GREEN}1.${PLAIN} 综合性测试脚本合集(比如yabs，superbench等)\"\n        echo -e \"${GREEN}2.${PLAIN} 流媒体测试脚本合集(各种流媒体解锁相关)\"\n        echo -e \"${GREEN}3.${PLAIN} 网络测试脚本合集(如三网回程和三网测速等)\"\n        echo -e \"${GREEN}4.${PLAIN} 硬件测试脚本合集(如gb5，硬盘通电时长等)\"\n        echo \" -------------\"\n        echo -e \"${GREEN}0.${PLAIN} 回到主菜单\"\n        echo \"\"\n        while true; do\n            if [ \"$en_status\" = true ]; then\n                read -rp \"Please enter the option number:\" StartInput3\n            else\n                read -rp \"请输入选项:\" StartInput3\n            fi\n            original_script_options\n            if [ \"$break_status\" = true ] || [ \"$menu_mode\" = false ]; then\n                break\n            fi\n        done\n    else\n        StartInput3=\"$sub_menu_option\"\n        original_script_options\n    fi\n}\n\nsimplify_script_options() {\n    case $StartInput1 in\n    1)\n        minal_script | tee -i test_result.txt\n        break_status=true\n        ;;\n    2)\n        minal_plus | tee -i test_result.txt\n        break_status=true\n        ;;\n    3)\n        minal_plus_network | tee -i test_result.txt\n        break_status=true\n        ;;\n    4)\n        minal_plus_media | tee -i test_result.txt\n        break_status=true\n        ;;\n    0)\n        start_script\n        break_status=true\n        ;;\n    *)\n        if [ \"$en_status\" = true ]; then\n            echo \"Input error, please re-enter\"\n        else\n            echo \"输入错误，请重新输入\"\n        fi\n        break_status=false\n        ;;\n    esac\n}\n\nsimplify_script() {\n    head_script\n    if $menu_mode; then\n        if [ \"$en_status\" = true ]; then\n            _yellow \"The streamlined script for the fusion monster is as follows\"\n            echo -e \"${GREEN}1.${PLAIN} Minimalist version (system information + CPU + memory + disk IO + 4 nodes for speed test) (average run time 3 minutes)\"\n            echo -e \"${GREEN}2.${PLAIN} Lite (System Info + CPU + RAM + Disk IO + Mikado Unlocked + Common Streams + TikTok + Backhaul + Routing + 4 nodes for speed test) (4 minutes average run time)\"\n            echo -e \"${GREEN}3.${PLAIN} Lite Network Edition (4 nodes for system information + CPU + memory + disk IO + backhaul + routing + speed test) (average run time 4 minutes)\"\n            echo -e \"${GREEN}4.${PLAIN} Lite unlocked version (System info + CPU + RAM + Disk IO + Gosanja unlocked + common streams + TikTok + 4 nodes for speed test) (runs for 4 minutes on average)\"\n            echo \" -------------\"\n            echo -e \"${GREEN}0.${PLAIN} Back to the main menu\"\n        else\n            _yellow \"融合怪的精简脚本如下\"\n            echo -e \"${GREEN}1.${PLAIN} 极简版(系统信息+CPU+内存+磁盘IO+测速节点4个)(平均运行3分钟)\"\n            echo -e \"${GREEN}2.${PLAIN} 精简版(系统信息+CPU+内存+磁盘IO+御三家解锁+常用流媒体+TikTok+回程+路由+测速节点4个)(平均运行4分钟)\"\n            echo -e \"${GREEN}3.${PLAIN} 精简网络版(系统信息+CPU+内存+磁盘IO+回程+路由+测速节点4个)(平均运行4分钟)\"\n            echo -e \"${GREEN}4.${PLAIN} 精简解锁版(系统信息+CPU+内存+磁盘IO+御三家解锁+常用流媒体+TikTok+测速节点4个)(平均运行4分钟)\"\n            echo \" -------------\"\n            echo -e \"${GREEN}0.${PLAIN} 回到主菜单\"\n        fi\n        echo \"\"\n        while true; do\n            if [ \"$en_status\" = true ]; then\n                read -rp \"Please enter the option number:\" StartInput1\n            else\n                read -rp \"请输入选项:\" StartInput1\n            fi\n            simplify_script_options\n            if [ \"$break_status\" = true ] || [ \"$menu_mode\" = false ]; then\n                break\n            fi\n        done\n    else\n        StartInput1=\"$sub_menu_option\"\n        simplify_script_options\n    fi\n}\n\nsingle_item_script_options() {\n    case $StartInput2 in\n    1)\n        network_script\n        break_status=true\n        ;;\n    2)\n        media_script\n        break_status=true\n        ;;\n    3)\n        hardware_script\n        break_status=true\n        ;;\n    4)\n        # bash <(wget -qO- --no-check-certificate https://gitlab.com/spiritysdx/za/-/raw/main/ipcheck.sh)\n        bash <(wget -qO- --no-check-certificate https://cdn.spiritlhl.net/https://raw.githubusercontent.com/spiritLHLS/ecs/main/ipcheck.sh)\n        break_status=true\n        ;;\n    5)\n        port_script\n        break_status=true\n        ;;\n    6)\n        sw_script\n        break_status=true\n        ;;\n    0)\n        start_script\n        break_status=true\n        ;;\n    *)\n        if [ \"$en_status\" = true ]; then\n            echo \"Input error, please re-enter\"\n        else\n            echo \"输入错误，请重新输入\"\n        fi\n        break_status=false\n        ;;\n    esac\n}\n\nsingle_item_script() {\n    head_script\n    if $menu_mode; then\n        if [ \"$en_status\" = true ]; then\n            _yellow \"The single test script for fusion monster splitting is as follows\"\n            echo -e \"${GREEN}1.${PLAIN} Networking (simplified IP quality check + triple network backhaul + triple network routing and latency + 11 speed nodes) (average run time about 6 minutes)\"\n            echo -e \"${GREEN}2.${PLAIN} For unlocking (Gosanja unlocking + common streamer unlocking + TikTok unlocking) (average runtime 30~60 seconds)\"\n            echo -e \"${GREEN}3.${PLAIN} Hardware (basic system information + CPU + RAM + dual disk IO test) (average run time 1½ minutes)\"\n            echo -e \"${GREEN}4.${PLAIN} IP quality check (average runtime 10~20 seconds)\"\n            # echo -e \"${GREEN}5.${PLAIN} Common port openings (blocked or not) (average run time about 1 minute) (bugs not fixed yet)\"\n            # echo -e \"${GREEN}6.${PLAIN} Triple-net backhaul line + Guangzhou triple-net routing + nationwide triple-net delay (average running 1 minute 20 seconds)\"\n            echo \" -------------\"\n            echo -e \"${GREEN}0.${PLAIN} Back to the main menu\"\n        else\n            _yellow \"融合怪拆分的单项测试脚本如下\"\n            echo -e \"${GREEN}1.${PLAIN} 网络方面(简化的IP质量检测+三网回程+三网路由与延迟+测速节点11个)(平均运行6分钟左右)\"\n            echo -e \"${GREEN}2.${PLAIN} 解锁方面(御三家解锁+常用流媒体解锁+TikTok解锁)(平均运行30~60秒)\"\n            echo -e \"${GREEN}3.${PLAIN} 硬件方面(基础系统信息+CPU+内存+双重磁盘IO测试)(平均运行1分半钟)\"\n            echo -e \"${GREEN}4.${PLAIN} IP质量检测(15个数据库的IP检测+邮件端口检测)(平均运行10~20秒)\"\n            echo -e \"${GREEN}5.${PLAIN} 常用端口开通情况(是否有阻断)(平均运行1分钟左右)(暂时有bug未修复)\"\n            echo -e \"${GREEN}6.${PLAIN} 三网回程线路+广州三网路由+全国三网延迟(平均运行1分20秒)\"\n            echo \" -------------\"\n            echo -e \"${GREEN}0.${PLAIN} 回到主菜单\"\n        fi\n        echo \"\"\n        while true; do\n            if [ \"$en_status\" = true ]; then\n                read -rp \"Please enter the option number:\" StartInput2\n            else\n                read -rp \"请输入选项:\" StartInput2\n            fi\n            single_item_script_options\n            if [ \"$break_status\" = true ] || [ \"$menu_mode\" = false ]; then\n                break\n            fi\n        done\n    else\n        StartInput2=\"$sub_menu_option\"\n        single_item_script_options\n    fi\n}\n\nmy_original_script_options() {\n    case $StartInput4 in\n    1)\n        # bash <(wget -qO- --no-check-certificate https://gitlab.com/spiritysdx/za/-/raw/main/ipcheck.sh)\n        bash <(wget -qO- --no-check-certificate https://cdn.spiritlhl.net/https://raw.githubusercontent.com/spiritLHLS/ecs/main/ipcheck.sh)\n        break_status=true\n        ;;\n    2)\n        network_script_select 'g'\n        break_status=true\n        ;;\n    3)\n        network_script_select 's'\n        break_status=true\n        ;;\n    4)\n        network_script_select 'b'\n        break_status=true\n        ;;\n    5)\n        network_script_select 'c'\n        break_status=true\n        ;;\n    6)\n        bash <(curl -sSL https://github.com/spiritLHLS/ecs/raw/main/return.sh)\n        break_status=true\n        ;;\n    7)\n        bash <(curl -sSL https://github.com/spiritLHLS/ecs/raw/main/archive/nexttrace.sh)\n        break_status=true\n        ;;\n    8)\n        bash <(curl -sSL https://github.com/spiritLHLS/ecs/raw/main/customizeqzcheck.sh)\n        break_status=true\n        ;;\n    9)\n        bash <(curl -sSL https://github.com/spiritLHLS/ecs/raw/main/archive/disk_info.sh)\n        break_status=true\n        ;;\n    10)\n        bash <(curl -sSL https://github.com/spiritLHLS/ecs/raw/main/archive/geekbench4.sh)\n        break_status=true\n        ;;\n    11)\n        bash <(curl -sSL https://github.com/spiritLHLS/ecs/raw/main/archive/geekbench5.sh)\n        break_status=true\n        ;;\n    12)\n        bash <(curl -sSL https://github.com/spiritLHLS/ecs/raw/main/archive/geekbench6.sh)\n        break_status=true\n        ;;\n    13)\n        bash <(wget -qO- bash.spiritlhl.net/ecs-net)\n        break_status=true\n        ;;\n    14)\n        bash <(wget -qO- bash.spiritlhl.net/ecs-cn)\n        break_status=true\n        ;;\n    15)\n        bash <(wget -qO- bash.spiritlhl.net/ecs-ping)\n        break_status=true\n        ;;\n    16)\n        bash <(curl -sSL https://raw.githubusercontent.com/spiritLHLS/ecs/main/archive/multi_disk_io_test.sh)\n        break_status=true\n        ;;\n    17)\n        bash <(curl -sSL https://raw.githubusercontent.com/oneclickvirt/gostun/main/gostun_install.sh)\n        break_status=true\n        ;;\n    0)\n        start_script\n        break_status=true\n        ;;\n    *)\n        if [ \"$en_status\" = true ]; then\n            echo \"Input error, please re-enter\"\n        else\n            echo \"输入错误，请重新输入\"\n        fi\n        break_status=false\n        ;;\n    esac\n}\n\nmy_original_script() {\n    head_script\n    if $menu_mode; then\n        _yellow \"本作者有原创成分的脚本如下\"\n        echo -e \"${GREEN}1.${PLAIN} 完整的本机IP的IP质量检测(平均运行10~20秒)\"\n        echo -e \"${GREEN}2.${PLAIN} 三网回程路由测试(预设广州)(平均运行1分钟)\"\n        echo -e \"${GREEN}3.${PLAIN} 三网回程路由测试(预设上海)(平均运行1分钟)\"\n        echo -e \"${GREEN}4.${PLAIN} 三网回程路由测试(预设北京)(平均运行1分钟)\"\n        echo -e \"${GREEN}5.${PLAIN} 三网回程路由测试(预设成都)(平均运行1分钟)\"\n        echo -e \"${GREEN}6.${PLAIN} 自定义IP的回程路由测试(基于besttrace)(准确率高，但可能有bug)\"\n        echo -e \"${GREEN}7.${PLAIN} 自定义IP的回程路由测试(基于nexttrace)(第三方IP库)\"\n        echo -e \"${GREEN}8.${PLAIN} 自定义IP的IP质量检测(平均运行10~20秒)\"\n        echo -e \"${GREEN}9.${PLAIN} 检测本机硬盘(含通电时长)(一般是独服才有用)\"\n        echo -e \"${GREEN}10.${PLAIN} Geekbench4测试(最常见的CPU基准测试)\"\n        echo -e \"${GREEN}11.${PLAIN} Geekbench5测试(测不动gb6可以试试这个)\"\n        echo -e \"${GREEN}12.${PLAIN} Geekbench6测试(测的极其缓慢)\"\n        echo -e \"${GREEN}13.${PLAIN} ecs-net三网测速脚本(自动更新测速节点，对应 speedtest.net)\"\n        echo -e \"${GREEN}14.${PLAIN} ecs-cn三网测速脚本(自动更新测速节点，对应 speedtest.cn)\"\n        echo -e \"${GREEN}15.${PLAIN} ecs-ping三网测ping脚本(自动更新测试节点)\"\n        echo -e \"${GREEN}16.${PLAIN} 测试挂载的多个磁盘的IO(仅测试挂载盘)\"\n        echo -e \"${GREEN}17.${PLAIN} 检测本机的NAT类型\"\n        echo \" -------------\"\n        echo -e \"${GREEN}0.${PLAIN} 回到主菜单\"\n        echo \"\"\n        while true; do\n            if [ \"$en_status\" = true ]; then\n                read -rp \"Please enter the option number:\" StartInput4\n            else\n                read -rp \"请输入选项:\" StartInput4\n            fi\n            my_original_script_options\n            if [ \"$break_status\" = true ] || [ \"$menu_mode\" = false ]; then\n                break\n            fi\n        done\n    else\n        StartInput4=\"$sub_menu_option\"\n        my_original_script_options\n    fi\n}\n\nhead_script() {\n    clear\n    if [ \"$en_status\" = true ]; then\n        echo \"#############################################################\"\n        echo -e \"#          ${YELLOW}VPS Fusion Monster Server Test Script${PLAIN}            #\"\n        echo -e \"# Version: $ver                                       #\"\n        echo -e \"# Update log：$changeLog     #\"\n        echo -e \"# ${GREEN}Author${PLAIN}: spiritlhl                                         #\"\n        echo -e \"# ${GREEN}TG Channel${PLAIN}: https://t.me/vps_reviews                      #\"\n        echo -e \"# ${GREEN}GitHub${PLAIN}: https://github.com/spiritLHLS                     #\"\n        echo -e \"# ${GREEN}GitLab${PLAIN}: https://gitlab.com/spiritysdx                     #\"\n        echo \"#############################################################\"\n        echo \"\"\n        _green \"Number of times the script was run today: ${TODAY}, Cumulative number of runs: ${TOTAL}\"\n        if [ \"$menu_mode\" = true ]; then\n            _green \"Please select the option number you want to use\"\n        fi\n    else\n        echo \"#############################################################\"\n        echo -e \"#                     ${YELLOW}融合怪测评脚本${PLAIN}                        #\"\n        echo -e \"# 版本(请注意比对仓库版本更新)：$ver                  #\"\n        echo -e \"# 更新日志：$changeLog                       #\"\n        echo -e \"# ${GREEN}作者${PLAIN}: spiritlhl                                           #\"\n        echo -e \"# ${GREEN}TG频道${PLAIN}: https://t.me/vps_reviews                          #\"\n        echo -e \"# ${GREEN}GitHub${PLAIN}: https://github.com/spiritLHLS                     #\"\n        echo -e \"# ${GREEN}GitLab${PLAIN}: https://gitlab.com/spiritysdx                     #\"\n        echo \"#############################################################\"\n        echo \"\"\n        _green \"脚本当天运行次数:${TODAY}，累计运行次数:${TOTAL}\"\n        if [ \"$menu_mode\" = true ]; then\n            _green \"请选择你接下来要使用的脚本\"\n        fi\n    fi\n}\n\nstart_script_options() {\n    case $StartInput in\n    1)\n        all_script \"S\" | tee -i test_result.txt\n        break_status=true\n        ;;\n    2)\n        all_script \"B\" | tee -i test_result.txt\n        break_status=true\n        ;;\n    3)\n        simplify_script\n        break_status=true\n        ;;\n    4)\n        single_item_script\n        break_status=true\n        ;;\n    5)\n        original_script\n        break_status=true\n        ;;\n    6)\n        my_original_script\n        break_status=true\n        ;;\n    7)\n        checkver\n        break_status=true\n        ;;\n    0)\n        exit 1\n        break_status=true\n        ;;\n    *)\n        if [ \"$en_status\" = true ]; then\n            echo \"Input error, please re-enter\"\n        else\n            echo \"输入错误，请重新输入\"\n        fi\n        break_status=false\n        ;;\n    esac\n}\n\nstart_script() {\n    head_script\n    if $test_base_status; then\n        # 纯测系统信息\n        hardware_script | tee -i test_result.txt\n    elif $menu_mode; then\n        if [ \"$en_status\" = true ]; then\n            echo -e \"${GREEN}1.${PLAIN} Sequential Test - Fusion Monster Complete (all items tested) (average run time 7 minutes) (recommended for machine general)\"\n            echo -e \"${GREEN}2.${PLAIN} Parallel Test - Fusion Monster Complete (all items tested) (runs for 5 minutes on average) (Powerful machines only, do not use for normal machines)\"\n            echo -e \"${GREEN}3.${PLAIN} Fusion Monster Lite Zone (Lite or Single Test Lite version of Fusion Monster)\"\n            echo -e \"${GREEN}4.${PLAIN} Fusion Monster Single Zone (full version of Fusion Monster single test)\"\n            echo -e \"${GREEN}5.${PLAIN} Third-party scripts area (various test scripts by similar authors)\"\n            echo -e \"${GREEN}6.${PLAIN} Original area (some test scripts unique to this script)\"\n            echo -e \"${GREEN}7.${PLAIN} Update this script\"\n            echo \" -------------\"\n            echo -e \"${GREEN}0.${PLAIN} Exit\"\n        else\n            echo -e \"${GREEN}1.${PLAIN} 顺序测试--融合怪完全体(所有项目都测试)(平均运行7分钟)(机器普通推荐使用)\"\n            echo -e \"${GREEN}2.${PLAIN} 并行测试--融合怪完全体(所有项目都测试)(平均运行5分钟)(仅机器强劲可使用，机器普通勿要使用)\"\n            echo -e \"${GREEN}3.${PLAIN} 融合怪精简区(融合怪的精简版或单项测试精简版)\"\n            echo -e \"${GREEN}4.${PLAIN} 融合怪单项区(融合怪的单项测试完整版)\"\n            echo -e \"${GREEN}5.${PLAIN} 第三方脚本区(同类作者的各种测试脚本)\"\n            echo -e \"${GREEN}6.${PLAIN} 原创区(本脚本独有的一些测试脚本)\"\n            echo -e \"${GREEN}7.${PLAIN} 更新本脚本\"\n            echo \" -------------\"\n            echo -e \"${GREEN}0.${PLAIN} 退出\"\n        fi\n        echo \"\"\n        while true; do\n            if [ \"$en_status\" = true ]; then\n                read -rp \"Please enter the option number:\" StartInput\n            else\n                read -rp \"请输入选项:\" StartInput\n            fi\n            start_script_options\n            if [ \"$break_status\" = true ] || [ \"$menu_mode\" = false ]; then\n                break\n            fi\n        done\n    else\n        StartInput=\"$main_menu_option\"\n        start_script_options\n    fi\n}\n\n# =============== 正式执行 部分 ===============\nrm -rf $TEMP_DIR\nmkdir -p $TEMP_DIR\nget_system_bit\nstatistics_of_run-times\nstart_script\nglobal_exit_action\nrm_script\n"
        },
        {
          "name": "ipcheck.sh",
          "type": "blob",
          "size": 12.935546875,
          "content": "#!/usr/bin/env bash\n#by spiritlhl\n#From https://github.com/spiritLHLS/ecs\n#2025.01.04\n\ncd /root >/dev/null 2>&1\nmyvar=$(pwd)\nver=\"2025.01.04\"\nchangeLog=\"IP质量测试，由频道 https://t.me/vps_reviews 原创\"\ntemp_file_apt_fix=\"/tmp/apt_fix.txt\"\nshorturl=\"\"\nREGEX=(\"debian\" \"ubuntu\" \"centos|red hat|kernel|oracle linux|alma|rocky\" \"'amazon linux'\" \"alpine\")\nRELEASE=(\"Debian\" \"Ubuntu\" \"CentOS\" \"CentOS\" \"Alpine\")\nPACKAGE_UPDATE=(\"apt -y update\" \"apt -y update\" \"yum -y update\" \"yum -y update\" \"apk update -f\")\nPACKAGE_INSTALL=(\"apt -y install\" \"apt -y install\" \"yum -y install\" \"yum -y install\" \"apk add -f\")\nCMD=(\"$(grep -i pretty_name /etc/os-release 2>/dev/null | cut -d \\\" -f2)\" \"$(hostnamectl 2>/dev/null | grep -i system | cut -d : -f2)\" \"$(lsb_release -sd 2>/dev/null)\" \"$(grep -i description /etc/lsb-release 2>/dev/null | cut -d \\\" -f2)\" \"$(grep . /etc/redhat-release 2>/dev/null)\" \"$(grep . /etc/issue 2>/dev/null | cut -d \\\\ -f1 | sed '/^[ ]*$/d')\")\nrm -rf sc_result.txt\n\n# 安全的清屏函数\nclear_screen() {\n    if [ -t 1 ]; then\n        tput clear 2>/dev/null || echo -e \"\\033[2J\\033[H\" || clear\n    fi\n}\n\nutf8_locale=$(locale -a 2>/dev/null | grep -i -m 1 -E \"UTF-8|utf8\")\nSYS=\"${CMD[0]}\"\nif [[ -z \"$utf8_locale\" ]]; then\n    echo \"No UTF-8 locale found\"\nelse\n    export LC_ALL=\"$utf8_locale\"\n    export LANG=\"$utf8_locale\"\n    export LANGUAGE=\"$utf8_locale\"\n    echo \"Locale set to $utf8_locale\"\nfi\n\n[[ -n $SYS ]] || exit 1\nfor ((int = 0; int < ${#REGEX[@]}; int++)); do\n    if [[ $(echo \"$SYS\" | tr '[:upper:]' '[:lower:]') =~ ${REGEX[int]} ]]; then\n        SYSTEM=\"${RELEASE[int]}\"\n        [[ -n $SYSTEM ]] && break\n    fi\ndone\n\nRED=\"\\033[31m\"\nGREEN=\"\\033[32m\"\nYELLOW=\"\\033[33m\"\nPLAIN=\"\\033[0m\"\n_red() { echo -e \"\\033[31m\\033[01m$@\\033[0m\"; }\n_green() { echo -e \"\\033[32m\\033[01m$@\\033[0m\"; }\n_yellow() { echo -e \"\\033[33m\\033[01m$@\\033[0m\"; }\n_blue() { echo -e \"\\033[36m\\033[01m$@\\033[0m\"; }\nreading() { read -rp \"$(_green \"$1\")\" \"$2\"; }\n\nrm -rf securityCheck\nos=$(uname -s)\narch=$(uname -m)\n\nprint_intro() {\n    echo \"-------------------- A Bench Script By spiritlhl ---------------------\"\n    echo \"                   测评频道: https://t.me/vps_reviews                    \"\n    echo \"版本：$ver\"\n    echo \"更新日志：$changeLog\"\n}\n\ncheck_and_cat_file() {\n    local file=\"$1\"\n    if [[ -f \"$file\" ]]; then\n        if [[ -s \"$file\" ]] && [[ \"$(grep -vE '^\\s*$' \"$file\")\" ]]; then\n            if ! grep -q \"error\" \"$file\"; then\n                cat \"$file\"\n            fi\n        fi\n    fi\n}\n\nformat_output() {\n    local file=\"$1\"\n    sed -i 's/\\x1B\\[[0-9;]*[JKmsu]//g' \"$file\"\n    sed -i 's/^\\[H//' \"$file\"\n    if ! grep -q \"A Bench Script By spiritlhl\" \"$file\"; then\n        sed -i '1i\\-------------------- A Bench Script By spiritlhl ---------------------' \"$file\"\n    fi\n}\n\nbuild_text() {\n    cd $myvar >/dev/null 2>&1\n    if [ -f \"sc_result.txt\" ]; then\n        format_output \"sc_result.txt\"\n        awk '/-------------------- A Bench Script By spiritlhl ---------------------/{flag=1} flag; /^$/{flag=0}' sc_result.txt >temp.txt && mv temp.txt sc_result.txt\n        sed -i -e 's/\\x1B\\[[0-9;]\\+[a-zA-Z]//g' sc_result.txt\n        sed -i -e '/^$/d' sc_result.txt\n        sed -i 's/\\r//' sc_result.txt\n        if [ -s sc_result.txt ]; then\n            http_short_url=$(curl --ipv4 -sL -m 10 -X POST \\\n                -H \"Authorization: $ST\" \\\n                -F \"file=@${myvar}/sc_result.txt\" \\\n                \"http://hpaste.spiritlhl.net/api/UL/upload\")\n            if [ $? -eq 0 ] && [ -n \"$http_short_url\" ] && echo \"$http_short_url\" | grep -q \"show\"; then\n                file_id=$(echo \"$http_short_url\" | grep -o '[^/]*$')\n                shorturl=\"https://paste.spiritlhl.net/#/show/${file_id}\"\n            else\n                https_short_url=$(curl --ipv6 -sL -m 10 -X POST \\\n                    -H \"Authorization: $ST\" \\\n                    -F \"file=@${myvar}/sc_result.txt\" \\\n                    \"https://paste.spiritlhl.net/api/UL/upload\")\n                if [ $? -eq 0 ] && [ -n \"$https_short_url\" ] && echo \"$https_short_url\" | grep -q \"show\"; then\n                    file_id=$(echo \"$https_short_url\" | grep -o '[^/]*$')\n                    shorturl=\"https://paste.spiritlhl.net/#/show/${file_id}\"\n                else\n                    shorturl=\"\"\n                fi\n            fi\n        fi\n    fi\n}\n\ncheck_cdn() {\n    local o_url=$1\n    for cdn_url in \"${cdn_urls[@]}\"; do\n        if curl -sL -k \"$cdn_url$o_url\" --max-time 6 | grep -q \"success\" >/dev/null 2>&1; then\n            export cdn_success_url=\"$cdn_url\"\n            return\n        fi\n        sleep 0.5\n    done\n    export cdn_success_url=\"\"\n}\n\ncheck_cdn_file() {\n    check_cdn \"https://raw.githubusercontent.com/spiritLHLS/ecs/main/back/test\"\n    if [ -n \"$cdn_success_url\" ]; then\n        echo \"CDN available, using CDN\"\n    else\n        echo \"No CDN available, no use CDN\"\n    fi\n}\n\npre_download() {\n    case $os in\n    Linux)\n        case $arch in\n        \"x86_64\" | \"x86\" | \"amd64\" | \"x64\")\n            wget -O securityCheck \"${cdn_success_url}https://github.com/oneclickvirt/securityCheck/releases/download/output/securityCheck-linux-amd64\"\n            wget -O pck \"${cdn_success_url}https://github.com/oneclickvirt/portchecker/releases/download/output/portchecker-linux-amd64\"\n            ;;\n        \"i386\" | \"i686\")\n            wget -O securityCheck \"${cdn_success_url}https://github.com/oneclickvirt/securityCheck/releases/download/output/securityCheck-linux-386\"\n            wget -O pck \"${cdn_success_url}https://github.com/oneclickvirt/portchecker/releases/download/output/portchecker-linux-386\"\n            ;;\n        \"armv7l\" | \"armv8\" | \"armv8l\" | \"aarch64\")\n            wget -O securityCheck \"${cdn_success_url}https://github.com/oneclickvirt/securityCheck/releases/download/output/securityCheck-linux-arm64\"\n            wget -O pck \"${cdn_success_url}https://github.com/oneclickvirt/portchecker/releases/download/output/portchecker-linux-arm64\"\n            ;;\n        *)\n            echo \"Unsupported architecture: $arch\"\n            exit 1\n            ;;\n        esac\n        ;;\n    Darwin)\n        case $arch in\n        \"x86_64\" | \"x86\" | \"amd64\" | \"x64\")\n            wget -O securityCheck \"${cdn_success_url}https://github.com/oneclickvirt/securityCheck/releases/download/output/securityCheck-darwin-amd64\"\n            wget -O pck \"${cdn_success_url}https://github.com/oneclickvirt/portchecker/releases/download/output/portchecker-darwin-amd64\"\n            ;;\n        \"i386\" | \"i686\")\n            wget -O securityCheck \"${cdn_success_url}https://github.com/oneclickvirt/securityCheck/releases/download/output/securityCheck-darwin-386\"\n            wget -O pck \"${cdn_success_url}https://github.com/oneclickvirt/portchecker/releases/download/output/portchecker-darwin-386\"\n            ;;\n        \"armv7l\" | \"armv8\" | \"armv8l\" | \"aarch64\")\n            wget -O securityCheck \"${cdn_success_url}https://github.com/oneclickvirt/securityCheck/releases/download/output/securityCheck-darwin-arm64\"\n            wget -O pck \"${cdn_success_url}https://github.com/oneclickvirt/portchecker/releases/download/output/portchecker-darwin-arm64\"\n            ;;\n        *)\n            echo \"Unsupported architecture: $arch\"\n            exit 1\n            ;;\n        esac\n        ;;\n    FreeBSD)\n        case $arch in\n        amd64)\n            wget -O securityCheck \"${cdn_success_url}https://github.com/oneclickvirt/securityCheck/releases/download/output/securityCheck-freebsd-amd64\"\n            wget -O pck \"${cdn_success_url}https://github.com/oneclickvirt/portchecker/releases/download/output/portchecker-freebsd-amd64\"\n            ;;\n        \"i386\" | \"i686\")\n            wget -O securityCheck \"${cdn_success_url}https://github.com/oneclickvirt/securityCheck/releases/download/output/securityCheck-freebsd-386\"\n            wget -O pck \"${cdn_success_url}https://github.com/oneclickvirt/portchecker/releases/download/output/portchecker-freebsd-386\"\n            ;;\n        \"armv7l\" | \"armv8\" | \"armv8l\" | \"aarch64\")\n            wget -O securityCheck \"${cdn_success_url}https://github.com/oneclickvirt/securityCheck/releases/download/output/securityCheck-freebsd-arm64\"\n            wget -O pck \"${cdn_success_url}https://github.com/oneclickvirt/portchecker/releases/download/output/portchecker-freebsd-arm64\"\n            ;;\n        *)\n            echo \"Unsupported architecture: $arch\"\n            exit 1\n            ;;\n        esac\n        ;;\n    *)\n        echo \"Unsupported operating system: $os\"\n        exit 1\n        ;;\n    esac\n}\n\ntranslate_status() {\n    if [[ \"$1\" == \"false\" ]]; then\n        echo \"No\"\n    elif [[ \"$1\" == \"true\" ]]; then\n        echo \"Yes\"\n    else\n        echo \"$1\"\n    fi\n}\n\ngoogle() {\n    local curl_result=$(curl -sL -m 10 \"https://www.google.com/search?q=www.spiritysdx.top\" -H \"User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0\")\n    rm -rf /tmp/ip_quality_google\n    if [ \"$en_status\" = true ]; then\n        if echo \"$curl_result\" | grep -q \"二叉树的博客\"; then\n            echo \"Google search feasibility: YES\" >>/tmp/ip_quality_google\n        else\n            echo \"Google search feasibility: NO\" >>/tmp/ip_quality_google\n        fi\n    else\n        if echo \"$curl_result\" | grep -q \"二叉树的博客\"; then\n            echo \"Google搜索可行性：YES\" >>/tmp/ip_quality_google\n        else\n            echo \"Google搜索可行性：NO\" >>/tmp/ip_quality_google\n        fi\n    fi\n}\n\nsecurity_check() {\n    local language=$1\n    cd $myvar >/dev/null 2>&1\n    if [ -f \"securityCheck\" ]; then\n        chmod 777 securityCheck\n        ./securityCheck -l $language -e yes | sed '1d' >>/tmp/ip_quality_security_check\n    fi\n}\n\nemail_check() {\n    cd $myvar >/dev/null 2>&1\n    if [ -f \"pck\" ]; then\n        chmod 777 pck\n        ./pck | sed '1d' >>/tmp/ip_quality_email_check\n    fi\n}\n\nST=\"OvwKx5qgJtf7PZgCKbtyojSU.MTcwMTUxNzY1MTgwMw\"\n\nnext() {\n    echo -en \"\\r\"\n    [ \"${Var_OSRelease}\" = \"freebsd\" ] && printf \"%-72s\\n\" \"-\" | tr ' ' '-' && return\n    printf \"%-72s\\n\" \"-\" | sed 's/\\s/-/g'\n}\n\nprint_end_time() {\n    end_time=$(date +%s)\n    time=$((${end_time} - ${start_time}))\n    if [ ${time} -gt 60 ]; then\n        min=$(expr $time / 60)\n        sec=$(expr $time % 60)\n        echo \" 总共花费        : ${min} 分 ${sec} 秒\"\n    else\n        echo \" 总共花费        : ${time} 秒\"\n    fi\n    date_time=$(date +%Y-%m-%d\" \"%H:%M:%S)\n    echo \" 时间          : $date_time\"\n}\n\nipcheck() {\n    {\n        google\n        if [[ $? -ne 0 ]]; then\n            echo \"Google检测执行失败\" >>/tmp/ip_quality_google\n        fi\n    } &\n\n    if [ \"$en_status\" = true ]; then\n        {\n            security_check \"en\"\n            if [[ $? -ne 0 ]]; then\n                echo \"Security check failed\" >>/tmp/ip_quality_security_check\n            fi\n        } &\n    else\n        {\n            security_check \"zh\"\n            if [[ $? -ne 0 ]]; then\n                echo \"安全检查执行失败\" >>/tmp/ip_quality_security_check\n            fi\n        } &\n    fi\n\n    {\n        email_check\n        if [[ $? -ne 0 ]]; then\n            echo \"邮件端口检测执行失败\" >>/tmp/ip_quality_email_check\n        fi\n    } &\n\n    # 等待所有后台任务完成\n    wait\n\n    # 检查并显示结果\n    local has_output=false\n\n    if [ -f \"/tmp/ip_quality_security_check\" ]; then\n        check_and_cat_file \"/tmp/ip_quality_security_check\"\n        has_output=true\n    fi\n\n    if [ -f \"/tmp/ip_quality_google\" ]; then\n        check_and_cat_file \"/tmp/ip_quality_google\"\n        has_output=true\n    fi\n\n    if [ \"$en_status\" = true ]; then\n        echo -e \"-------Email-Port-Detection--Base-On-oneclickvirt/portchecker--------\"\n    else\n        echo -e \"-------------邮件端口检测--基于oneclickvirt/portchecker开源-------------\"\n    fi\n\n    if [ -f \"/tmp/ip_quality_email_check\" ]; then\n        check_and_cat_file \"/tmp/ip_quality_email_check\"\n        has_output=true\n    fi\n\n    # 如果没有任何输出，输出错误信息\n    if [ \"$has_output\" = false ]; then\n        echo \"警告: 未能获取到任何检测结果\"\n    fi\n\n    # 清理临时文件\n    rm -rf /tmp/ip_quality_*\n}\n\nmain() {\n    cdn_urls=(\"https://cdn0.spiritlhl.top/\" \"http://cdn3.spiritlhl.net/\" \"http://cdn1.spiritlhl.net/\" \"http://cdn2.spiritlhl.net/\" \"https://fd.spiritlhl.top/\")\n    check_cdn_file\n    pre_download\n    chmod 777 securityCheck 2>/dev/null\n    # 清屏\n    clear_screen\n    start_time=$(date +%s)\n    print_intro\n    _yellow \"数据仅作参考，不代表100%准确，IP类型如果不一致请手动查询多个数据库比对\"\n    echo -e \"-------------IP质量检测--基于oneclickvirt/securityCheck使用-------------\"\n    # 执行检测并保存到临时文件\n    temp_output=$(mktemp)\n    ipcheck | tee \"$temp_output\"\n    # 检查输出\n    if [ ! -s \"$temp_output\" ]; then\n        echo \"警告: 首次检测结果为空，正在重试...\"\n        sleep 2\n        ipcheck | tee \"$temp_output\"\n    fi\n    rm -f \"$temp_output\"\n    next\n    print_end_time\n    next\n}\n\n: >sc_result.txt\nmain | tee -i sc_result.txt\nbuild_text\nif [ -n \"$shorturl\" ]; then\n    _green \"  短链:\"\n    _blue \"    $shorturl\"\nfi\nrm -rf wget-log*\nrm -rf securityCheck*\n"
        },
        {
          "name": "lowpage",
          "type": "tree",
          "content": null
        },
        {
          "name": "return.sh",
          "type": "blob",
          "size": 5.82421875,
          "content": "#!/usr/bin/env bash\n_red() { echo -e \"\\033[31m\\033[01m$@\\033[0m\"; }\n_green() { echo -e \"\\033[32m\\033[01m$@\\033[0m\"; }\n_yellow() { echo -e \"\\033[33m\\033[01m$@\\033[0m\"; }\n_blue() { echo -e \"\\033[36m\\033[01m$@\\033[0m\"; }\nreading(){ read -rp \"$(_green \"$1\")\" \"$2\"; }\ntranslate(){ [[ -n \"$1\" ]] && curl -ksm8 \"http://fanyi.youdao.com/translate?&doctype=json&type=AUTO&i=${1//[[:space:]]/}\" | cut -d \\\" -f18 2>/dev/null; }\nTEMP_FILE='ip.test'\nutf8_locale=$(locale -a 2>/dev/null | grep -i -m 1 -E \"UTF-8|utf8\")\nif [[ -z \"$utf8_locale\" ]]; then\n  echo \"No UTF-8 locale found\"\nelse\n  export LC_ALL=\"$utf8_locale\"\n  export LANG=\"$utf8_locale\"\n  export LANGUAGE=\"$utf8_locale\"\n  echo \"Locale set to $utf8_locale\"\nfi\n\ncheck_dependencies(){ for c in $@; do\ntype -p $c >/dev/null 2>&1 || (_yellow \" 安装 $c 中…… \" && ${PACKAGE_INSTALL[b]} \"$c\") || (_yellow \" 先升级软件库才能继续安装 \\$c，时间较长，请耐心等待…… \" && ${PACKAGE_UPDATE[b]} && ${PACKAGE_INSTALL[b]} \"$c\")\n! type -p $c >/dev/null 2>&1 && _yellow \" 安装 \\$c 失败，脚本中止，问题反馈:[https://github.com/fscarmen/tools/issues] \" && exit 1; done; }\n\nfscarmen_route_script(){\n    rm -f $TEMP_FILE\n    local ARCHITECTURE=\"$(uname -m)\"\n        case $ARCHITECTURE in\n        x86_64 )  local FILE=besttrace;;\n        aarch64 ) local FILE=besttracearm;;\n        i386 )    local FILE=besttracemac;;\n        * ) _red \" 只支持 AMD64、ARM64、Mac 使用，问题反馈:[https://github.com/fscarmen/tools/issues] \" && return;;\n        esac\n    curl -s -L -k \"https://github.com/fscarmen/tools/raw/main/besttrace/${FILE}\" -o $FILE && chmod +x $FILE &>/dev/null\n    _green \"依次测试电信，联通，移动经过的地区及线路，核心程序来由: ipip.net ，请知悉!\" >> $TEMP_FILE\n    ./\"$FILE\" \"$ip\" -g cn 2>/dev/null | sed \"s/^[ ]//g\" | sed \"/^[ ]/d\" | sed '/ms/!d' | sed \"s#.* \\([0-9.]\\+ ms.*\\)#\\1#g\" >> $TEMP_FILE\n    cat $TEMP_FILE\n    rm -f $TEMP_FILE\n}\n\nARCHITECTURE=\"$(arch)\"\n# 多方式判断操作系统，试到有值为止。只支持 Debian 10/11、Ubuntu 18.04/20.04 或 CentOS 7/8 ,如非上述操作系统，退出脚本\nif [[ $ARCHITECTURE = i386 ]]; then\n  sw_vesrs 2>/dev/null | grep -qvi macos && _red \" 本脚本只支持 Debian、Ubuntu、CentOS、Alpine 或者 macOS 系统,问题反馈:[https://github.com/fscarmen/warp_unlock/issues] \" && exit 1\n  b=0\n  SYSTEM='macOS'\n  PACKAGE_INSTALL=(\"brew install\")\nelse\n  CMD=(\t\"$(grep -i pretty_name /etc/os-release 2>/dev/null | cut -d \\\" -f2)\"\n      \t\"$(hostnamectl 2>/dev/null | grep -i system | cut -d : -f2)\"\n\t\"$(lsb_release -sd 2>/dev/null)\"\n\t\"$(grep -i description /etc/lsb-release 2>/dev/null | cut -d \\\" -f2)\"\n\t\"$(grep . /etc/redhat-release 2>/dev/null)\"\n\t\"$(grep . /etc/issue 2>/dev/null | cut -d \\\\ -f1 | sed '/^[ ]*$/d')\"\n\t)\n\n  REGEX=(\"debian\" \"ubuntu\" \"centos|red hat|kernel|oracle linux|amazon linux|alma|rocky\")\n  RELEASE=(\"Debian\" \"Ubuntu\" \"CentOS\")\n  PACKAGE_UPDATE=(\"apt -y update\" \"apt -y update\" \"yum -y update\")\n  PACKAGE_INSTALL=(\"apt -y install\" \"apt -y install\" \"yum -y install\")\n\n  for a in \"${CMD[@]}\"; do\n\t  SYS=\"$a\" && [[ -n $SYS ]] && break\n  done\n  \n  for ((b=0; b<${#REGEX[@]}; b++)); do\n\t[[ $(echo \"$SYS\" | tr '[:upper:]' '[:lower:]') =~ ${REGEX[b]} ]] && SYSTEM=\"${RELEASE[b]}\" && break\n  done\nfi\n\n[[ -z $SYSTEM ]] && _red \" 本脚本只支持 Debian、Ubuntu、CentOS、Alpine 或者 macOS 系统,问题反馈:[https://github.com/fscarmen/warp_unlock/issues] \" && exit 1\n\ncheck_dependencies curl sudo\n\nmain() {\n    [[ -z \"$ip\" || $ip = '[DESTINATION_IP]' ]] && reading \"\\n 请输入目的地 IP: \" ip\n    _yellow \"\\n 检测中，请稍等片刻。\\n\"\n    # 遍历本机可以使用的 IP API 服务商\n  API_NET=(\"ip.sb\" \"ipget.net\" \"ip.ping0.cc\" \"https://ip4.seeip.org\" \"https://api.my-ip.io/ip\" \"https://ipv4.icanhazip.com\" \"api.ipify.org\")\n    API_URL=(\"api.ip.sb/geoip\" \"ifconfig.co/json\")\n    API_ASN=(\"isp\" \"asn_org\")\n    for ((p=0; p<${#API_NET[@]}; p++)); do ping -c1 -W1 ${API_NET[p]} >/dev/null 2>&1 && IP_API=\"${API_NET[p]}\" && break; done\n\n    IP_4=$(curl -s4m5 -A Mozilla https://${API_URL[p]}) &&\n    WAN_4=$(expr \"$IP_4\" : '.*ip\\\":[ ]*\\\"\\([^\"]*\\).*')\n    if [ -n \"$WAN_4\" ]; then\n      COUNTRY_4E=$(expr \"$IP_4\" : '.*country\\\":[ ]*\\\"\\([^\"]*\\).*')\n      COUNTRY_4=$(translate \"$COUNTRY_4E\")\n      ASNORG_4=$(expr \"$IP_4\" : '.*'${API_ASN[p]}'\\\":[ ]*\\\"\\([^\"]*\\).*')\n      TYPE_4=$(curl -4m5 -sSL https://www.abuseipdb.com/check/$WAN_4 2>/dev/null | grep -A2 '<th>Usage Type</th>' | tail -n 1 | sed \"s@Data Center/Web Hosting/Transit@数据中心@;s@Fixed Line ISP@家庭宽带@;s@Commercial@商业宽带@;s@Mobile ISP@移动流量@;s@Content Delivery Network@内容分发网络(CDN)@;s@Search Engine Spider@搜索引擎蜘蛛@;s@University/College/School@教育网@;s@Unknown@未知@\")\n      _green \" IPv4: $WAN_4\\t\\t 地区: $COUNTRY_4\\t 类型: $TYPE_4\\t ASN: $ASNORG_4\\n\"\n    fi\n\n    IP_6=$(curl -s6m5 -A Mozilla https://${API_URL[p]}) &&\n    WAN_6=$(expr \"$IP_6\" : '.*ip\\\":[ ]*\\\"\\([^\"]*\\).*') &&\n    if [ -n \"$WAN_6\" ]; then\n      COUNTRY_6E=$(expr \"$IP_6\" : '.*country\\\":[ ]*\\\"\\([^\"]*\\).*')\n      COUNTRY_6=$(translate \"$COUNTRY_6E\")\n      ASNORG_6=$(expr \"$IP_6\" : '.*'${API_ASN[p]}'\\\":[ ]*\\\"\\([^\"]*\\).*')\n      TYPE_6=$(curl -6m5 -sSL https://www.abuseipdb.com/check/$WAN_6 2>/dev/null | grep -A2 '<th>Usage Type</th>' | tail -n 1 | sed \"s@Data Center/Web Hosting/Transit@数据中心@;s@Fixed Line ISP@家庭宽带@;s@Commercial@商业宽带@;s@Mobile ISP@移动流量@;s@Content Delivery Network@内容分发网络(CDN)@;s@Search Engine Spider@搜索引擎蜘蛛@;s@University/College/School@教育网@;s@Unknown@未知@\")\n      _green \" IPv6: $WAN_6\\t 地区: $COUNTRY_6\\t 类型: $TYPE_6\\t ASN: $ASNORG_6\\n\"\n    fi\n\n    [[ $ip =~ '.' && -z \"$IP_4\" ]] && red \" VPS 没有 IPv4 网络，不能查 $ip\\n\" && exit 1\n    [[ $ip =~ ':' && -z \"$IP_6\" ]] && red \" VPS 没有 IPv6 网络，不能查 $ip\\n\" && exit 1\n    fscarmen_route_script\n}\n\nmain\n"
        }
      ]
    }
  ]
}