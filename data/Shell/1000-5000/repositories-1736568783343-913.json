{
  "metadata": {
    "timestamp": 1736568783343,
    "page": 913,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkxOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "notthebee/ansible-easy-vpn",
      "stars": 1088,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".ansible-lint",
          "type": "blob",
          "size": 0.20703125,
          "content": "---\nexclude_paths:\n  - .git/\n  - .github/\nwarn_list:\n  - package-latest\n  - yaml\n  - fqcn\n  - var-naming[no-role-prefix]\nskip_list:\n  - command-instead-of-shell\n  - experimental\n  - name[template]\n  - no-handler\n"
        },
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.0966796875,
          "content": "export PATH=$HOME/ansible-easy-vpn/.venv/bin:$PATH\nexport VIRTUAL_ENV=$HOME/ansible-easy-vpn/.venv\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.04296875,
          "content": ".DS_Store\nsecret.yml\n.vscode\n.venv\n.ansible\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.1689453125,
          "content": "---\nrepos:\n- repo: https://github.com/ansible-community/ansible-lint.git\n  rev: v6.15.0\n  hooks:\n    - id: ansible-lint\n      files: \\.(yaml|yml)$\n      entry: ansible-lint\n"
        },
        {
          "name": ".yamllint",
          "type": "blob",
          "size": 0.23046875,
          "content": "---\nextends: default\n\nrules:\n  line-length: disable\n  truthy:\n    allowed-values: ['true', 'false', 'yes', 'no']\n  comments:\n    min-spaces-from-content: 1\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n\nignore: |\n  .cache\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 5.341796875,
          "content": "# Frequently Asked Questions\n\n* [I can connect to the VPN, but can't access the Internet](#q-i-can-connect-to-the-vpn-but-cant-access-the-internet)\n* [I've run the playbook succesfully, but now I want to change the domain name/username/password. How can I do that?](#q-ive-run-the-playbook-succesfully-but-now-i-want-to-change-the-domain-nameusernamepassword-how-can-i-do-that)\n* [I get a \"Secure connection failed\" error when trying to access the Wireguard WebUI in the browser](#q-i-get-a-secure-connection-failed-error-when-trying-to-access-the-wireguard-webui-in-the-browser)\n* [I get \"500 Internal Server Error\" when trying to access the Wireguard WebUI in the browser](#q-i-get-500-internal-server-error-when-trying-to-access-the-wireguard-webui-in-the-browser)\n* [My SMTP credentials are correct, but I still get the HTTP 500 error, and the Authelia logs show an \"i/o timeout\" error](#q-my-smtp-credentials-are-correct-but-i-still-get-the-http-500-error-and-the-authelia-logs-show-an-io-timeout-error)\n* [I'd like to completely automate the process of setting up the VPN on my machines. How can I do that?](#q-id-like-to-completely-automate-the-process-of-setting-up-the-vpn-on-my-machines-how-can-i-do-that)\n* [When I try to copy the SSH key to my Windows machine, I get an error](#q-when-i-try-to-copy-the-ssh-key-to-my-windows-machine-i-get-an-error)\n* [I've lost my second factor device. How do I reset the 2FA?](#q-ive-lost-my-second-factor-device-how-do-i-reset-the-2fa)\n\n### Q: I can connect to the VPN, but can't access the Internet\n\nUnfortunately, most Wireguard clients are a bit misleading in that regard. If you can connect to the VPN, but see very little data in the 'Received' column and can't access the Internet, this most likely means that **you actually can't connect to the VPN server**.\n\nThe most common reason for that is a firewall blocking the Wireguard port â€“ either on the VPS side, or on the client side. Your VPS provider may apply some default firewall rules to your server, which you can edit in the web control panel of your VPS provider.\n\nAlternatively, your ISP may be blocking the default Wireguard port (51820/udp). This can be fixed by changing the port to something else (for examlpe, 12345), and re-running the playbook:\n\n```\ncd $HOME/ansible-easy-vpn\necho 'wireguard_port: \"12345\"` >> custom.yml\nbash bootstrap.sh\n```\n\n\n### Q: I've run the playbook succesfully, but now I want to change the domain name/username/password. How can I do that?\n\nA: Edit the variable files, and then re-run the script\n\n```\ncd $HOME/ansible-easy-vpn\nnano custom.yml \nansible-vault edit secret.yml\nbash bootstrap.sh\n```\n\n### Q: I get a \"Secure connection failed\" error when trying to access the Wireguard WebUI in the browser\n\nA: This usually means that Let's Encrypt has failed to generate the certificates for your domain name.\n\nThere are a few reasons why that might happen:\n\n1. Firewall misconfiguration (are the ports 80 and 443 open?)\n2. The server is behind NAT (make sure that the ports 80 and 443 are port-forwarded to the server's internal IP on the router)\n3. Let's Encrypt has time-limited your domain name (try a different domain name)\n\nCheck the Bunkerweb logs for more details:\n```\ndocker logs bunkerweb\n```\n\nYou can use the commands from the previous answer to change your domain name.\n\n### Q: I get \"500 Internal Server Error\" when trying to access the Wireguard WebUI in the browser\n\nA: Most likely, you chose to configure the e-mail functionality, but entered wrong SMTP credentials. Check out Authelia logs for details:\n```\ndocker logs authelia\n```\nYou can either disable e-mail functionality entirely, by removing the `email_password` variable from `secret.yml`, or enter the correct SMTP credentials. In both cases, you'll need to re-run the playbook after the changes have been made:\n```\ncd $HOME/ansible-easy-vpn\nansible-vault edit secret.yml\nbash bootstrap.sh\n```\n\n### Q: My SMTP credentials are correct, but I still get the HTTP 500 error, and the Authelia logs show an \"i/o timeout\" error\n\nA: This error message indicates that your VPS provider is blocking the SMTP ports (465/25).\n\n```\nerror dialing the SMTP server: dial tcp: lookup smtp.example.com: i/o timeout\"\n```\n\nAsk the provider to unblock the ports or disable the e-mail functionality by removing the `email_password` line from secret.yml and re-run the playbook:\n```\ncd $HOME/ansible-easy-vpn\nansible-vault edit secret.yml\nbash bootstrap.sh\n```\n\n### Q: I'd like to completely automate the process of setting up the VPN on my machines. How can I do that?\n\n1. Fork this repository\n2. Fill out the `custom.yml` and `secret.yml` files, either by running the `bootstrap.sh` script, or editing the files manually\n3. Remove `secret.yml` from .gitignore\n4. Commit and push the changes\n\nConsider making your repository private. Even though the Vault file is encrypted, it might be unsafe to make it publicly accessible.\n\n### Q: When I try to copy the SSH key to my Windows machine, I get an error\n\nA: On Windows, you might need to omit the `~/` before `.ssh`:\n```\ncd ~\nscp -P 22 root@65.109.141.154:/tmp/id_ssh_ed25519 .ssh/id_vpn_username\nssh -p 22 username@65.109.141.154 -i .ssh/id_vpn_username\n```\n\n\n### Q: I've lost my second factor device. How do I reset the 2FA?\n\nA: Log in to the server via SSH and execute the following commands:\n```\ndocker stop authelia && docker rm authelia\nsudo rm -rf /opt/docker/authelia\ncd $HOME/ansible-easy-vpn\nbash bootstrap.sh\n```\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.5625,
          "content": "# ABSL\n\nThe Anyone But Stallman License may be referred to as the ABSL.\n\nThe ABSL is licensed under the terms of The ABSL.\n\n## Definitions\n\n1. \"GNU RMS\" is defined as the person, commonly known as Richard Matthew Stallman, responsible for the development and writing of the GNU General Public License versions 2 and 3 and the founding of the Free Software Foundation. \n\n2. \"his descendants\" are defined as biological or adoptive children of GNU RMS, the heirs of GNU RMS in any fashion, any organisms made using genetic material from GNU RMS, any intelligences (artificial or otherwise) made using a brain state of GNU RMS as a template, any entities claiming to be the descendant of GNU RMS, any persons having a title which includes \"Stallman\" in its designation and/or any person whose voluntary or involuntary role is to mimic GNU RMS.\n\n\n## Terms\n\n1. The licensed work may not be used by GNU RMS or his descendants.\n\n2. Modified versions of the licensed work may be used without restrictions, following the MIT license: https://opensource.org/license/mit/\n\n## Exceptions\n\n1. None.\n\n## Non-binding Notes\n\nThe following notes are meant to provide context to the license, and should not be used when interpreting the text of the license.\n\n- This license does not comply with the [Debian Free Software Guidelines](https://en.wikipedia.org/wiki/Debian_Free_Software_Guidelines): it discriminates against a person.\n- This originated as a joke license, but that doesn't mean you can't use it as an actual license.\n- This can be used as an actual license, but that doesn't mean you should use it as one.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.2080078125,
          "content": "# Why is this project archived?\nTL;DR: It wasn't as \"easy\" as the name suggested, and took too much time to develop, test and debug.\n\n**Long version**\n\nWhen developing ansible-easy-vpn, I tried to come up with an easy turn-key solution that would work for everyone, no matter their knowledge of Docker, Ansible, Linux, etc.\n\nUnfortunately, due to just how different OS configurations and environments are across different VPS/cloud providers, this playbook does not work everywhere.\n\nMoreover, by presenting it as an \"easy\" solution that doesn't require a deep knowledge of Linux shell, Ansible or Docker, I obfuscated a lot of complexities in the setup, making it difficult for the end user to fix any potential errors. \n\nAt the same time, the errors in question were tricky to debug for me, since I'm not [eating my own dogfood](https://en.wikipedia.org/wiki/Eating_your_own_dog_food) and do not have time to test this playbook on every popular VPS/cloud server there is.\n\nFinally, this playbook was way too intrusive â€“ it was made for setting up a single-purpose VPN server from scratch, taking care of automatic updates, SSH hardening and SSL certificates.\n\nHowever, most people would want to use their VPS for things other than just a VPN server, and due to the aforementioned reasons, modifying and extending this playbook is difficult unless you know Ansible and Docker well enough.\n\n# So what do I do now?\n\nIf you want to get rid of the services managed by this playbook, you will need to stop and remove the Docker containers, and delete their persistent storage:\n```bash\ndocker stop authelia wg-easy adguard-unbound-doh watchtower bunkerweb\ndocker rm authelia wg-easy adguard-unbound-doh watchtower bunkerweb\nsudo rm -rf /opt/docker\ndocker system prune -a\n```\nThe configuration for unattended upgrades, SSH and the non-root user created by the playbook will remain in place.\n\nIf you're interested in a similar setup, I recommend using this project as a starting point: https://github.com/notthebee/cloud-homeserver\n\nThis Compose project sets up other services and uses Traefik instead of Bunkerweb, but follows the same purpose â€“ running Dockerized web applications on a cloud server, protected by Authelia.\n\nSo long, and thanks for all the fish!\n"
        },
        {
          "name": "ansible.cfg",
          "type": "blob",
          "size": 0.498046875,
          "content": "[defaults]\n#ask_vault_pass = True\ninventory = inventory.yml\ninterpreter_python = python3\nroles_path = .ansible/roles\ncollections_paths = .ansible/collections\ncallback_enabled = profile_tasks\nretry_files_enabled = False\nhost_key_checking = False\n# Use the YAML callback plugin.\nstdout_callback = yaml\n# Use the stdout_callback when running ad-hoc commands.\nbin_ansible_callbacks = True\n# needed on Debian server\nallow_world_readable_tmpfiles = True\n\n[privilege_escalation]\nbecome_ask_pass = False\nbecome = True\n"
        },
        {
          "name": "bootstrap.sh",
          "type": "blob",
          "size": 12.8076171875,
          "content": "#!/bin/bash -uxe\n# A bash script that prepares the OS\n# before running the Ansible playbook\n\n# Discard stdin. Needed when running from an one-liner which includes a newline\nread -N 999999 -t 0.001\n\n# Quit on error\nset -e\n\n# Detect OS\nif grep -qs \"ubuntu\" /etc/os-release; then\n\tos=\"ubuntu\"\n\tos_version=$(grep 'VERSION_ID' /etc/os-release | cut -d '\"' -f 2 | tr -d '.')\n  if [[ \"$os_version\" -lt 2004 ]]; then\n      echo \"Ubuntu 20.04 or higher is required to use this installer.\"\n      echo \"This version of Ubuntu is too old and unsupported.\"\n      exit\n    fi\nelif [[ -e /etc/debian_version ]]; then\n\tos=\"debian\"\n\tos_version=$(grep -oE '[0-9]+' /etc/debian_version | head -1)\n  if [[ \"$os_version\" -lt 11 ]]; then\n      echo \"Debian 11 or higher is required to use this installer.\"\n      echo \"This version of Debian is too old and unsupported.\"\n      exit\n  fi\nelif [[ -e /etc/almalinux-release || -e /etc/rocky-release || -e /etc/centos-release ]]; then\n\tos=\"centos\"\n\tos_version=$(grep -shoE '[0-9]+' /etc/almalinux-release /etc/rocky-release /etc/centos-release | head -1)\n  if [[ \"$os_version\" -lt 8 ]]; then\n      echo \"Rocky Linux 8 or higher is required to use this installer.\"\n      echo \"This version of Rocky/CentOS is too old and unsupported.\"\n      exit\n  fi\nfi\n\ncheck_root() {\n# Check if the user is root or not\nif [[ $EUID -ne 0 ]]; then\n  if [[ ! -z \"$1\" ]]; then\n    SUDO='sudo -E -H'\n  else\n    SUDO='sudo -E'\n  fi\nelse\n  SUDO=''\nfi\n}\n\ninstall_dependencies_debian() {\n  REQUIRED_PACKAGES=(\n    sudo\n    software-properties-common\n    dnsutils\n    curl\n    git\n    locales\n    rsync\n    apparmor\n    python3\n    python3-setuptools\n    python3-apt\n    python3-venv\n    python3-pip\n    aptitude\n    direnv\n    iptables\n  )\n\n  REQUIRED_PACKAGES_ARM64=(\n    gcc\n    python3-dev\n    libffi-dev\n    libssl-dev\n    make\n  )\n\n  check_root\n  # Disable interactive apt functionality\n  export DEBIAN_FRONTEND=noninteractive\n  # Update apt database, update all packages and install Ansible + dependencies\n  $SUDO apt update -y;\n  yes | $SUDO apt-get -o Dpkg::Options::=\"--force-confold\" -fuy dist-upgrade;\n  yes | $SUDO apt-get -o Dpkg::Options::=\"--force-confold\" -fuy install \"${REQUIRED_PACKAGES[@]}\"\n  yes | $SUDO apt-get -o Dpkg::Options::=\"--force-confold\" -fuy autoremove;\n  [ $(uname -m) == \"aarch64\" ] && yes | $SUDO apt install -fuy \"${REQUIRED_PACKAGES_ARM64[@]}\"\n  export DEBIAN_FRONTEND=\n}\n\ninstall_dependencies_centos() {\n  check_root\n  REQUIRED_PACKAGES=(\n    sudo\n    bind-utils\n    curl\n    git\n    rsync\n    https://kojipkgs.fedoraproject.org//vol/fedora_koji_archive02/packages/direnv/2.12.2/1.fc28/x86_64/direnv-2.12.2-1.fc28.x86_64.rpm\n  )\n  if [[ \"$os_version\" -eq 9 ]]; then\n    REQUIRED_PACKAGES+=(\n      python3\n      python3-setuptools\n      python3-pip\n      python3-firewall\n    )\n  else \n    REQUIRED_PACKAGES+=(\n      python39\n      python39-setuptools\n      python39-pip\n      python3-firewall\n      kmod-wireguard\n      https://ftp.gwdg.de/pub/linux/elrepo/elrepo/el8/x86_64/RPMS/kmod-wireguard-1.0.20220627-4.el8_7.elrepo.x86_64.rpm\n    )\n  fi\n  $SUDO dnf update -y\n  $SUDO dnf install -y epel-release\n  $SUDO dnf install -y \"${REQUIRED_PACKAGES[@]}\"\n}\n\n# Install all the dependencies\nif [[ \"$os\" == \"debian\" || \"$os\" == \"ubuntu\" ]]; then\n  install_dependencies_debian\nelif [[ \"$os\" == \"centos\" ]]; then\n  install_dependencies_centos\nfi\n\n# Clone the Ansible playbook\nif [ -d \"$HOME/ansible-easy-vpn\" ]; then\n  pushd $HOME/ansible-easy-vpn\n  git pull\n  popd\nelse\n  git clone https://github.com/notthebee/ansible-easy-vpn $HOME/ansible-easy-vpn\nfi\n\n# Set up a Python venv\nset +e\nif which python3.9; then\n  PYTHON=$(which python3.9)\nelse\n  PYTHON=$(which python3)\nfi\nset -e\ncd $HOME/ansible-easy-vpn\n[ -d $HOME/ansible-easy-vpn/.venv ] || $PYTHON -m venv .venv\nexport VIRTUAL_ENV=\"$HOME/ansible-easy-vpn/.venv\"\nexport PATH=\"$HOME/ansible-easy-vpn/.venv/bin:$PATH\"\n.venv/bin/python3 -m pip install --upgrade pip\n.venv/bin/python3 -m pip install -r requirements.txt\n\n\n\n# Install the Galaxy requirements\ncd $HOME/ansible-easy-vpn && ansible-galaxy install --force -r requirements.yml\n\n# Check if we're running on an AWS EC2 instance\nset +e\naws=$(curl -m 5 -s http://169.254.169.254/latest/meta-data/ami-id)\n\nif [[ \"$aws\" =~ ^ami.*$ ]]; then\n  aws=true\nelse\n  aws=false\nfi\nset -e\n\ntouch $HOME/ansible-easy-vpn/custom.yml\n\ncustom_filled=$(awk -v RS=\"\" '/username/&&/dns_nameservers/&&/root_host/{print FILENAME}' $HOME/ansible-easy-vpn/custom.yml)\n\nif [[ \"$custom_filled\" =~ \"custom.yml\" ]]; then\n  clear\n  echo \"custom.yml already exists. Running the playbook...\"\n  echo\n  echo \"If you want to change something (e.g. username, domain name, etc.)\"\n  echo \"Please edit custom.yml or secret.yml manually, and then re-run this script\"\n  echo\n  cd $HOME/ansible-easy-vpn && ansible-playbook --ask-vault-pass run.yml\n  exit 0\nfi\n\nclear\necho \"Welcome to ansible-easy-vpn!\"\necho\necho \"This script is interactive\"\necho \"If you prefer to fill in the custom.yml file manually,\"\necho \"press [Ctrl+C] to quit this script\"\necho\necho \"Enter your desired UNIX username\"\nread -p \"Username: \" username\nuntil [[ \"$username\" =~ ^[a-z0-9]*$ ]]; do\n  echo \"Invalid username\"\n  echo \"Make sure the username only contains lowercase letters and numbers\"\n  read -p \"Username: \" username\ndone\n\necho \"username: \\\"${username}\\\"\" >> $HOME/ansible-easy-vpn/custom.yml\n\necho\necho \"Enter your user password\"\necho \"This password will be used for Authelia login, administrative access and SSH login\"\nread -s -p \"Password: \" user_password\nuntil [[ \"${#user_password}\" -lt 60 ]]; do\n  echo\n  echo \"The password is too long\"\n  echo \"OpenSSH does not support passwords longer than 72 characters\"\n  read -s -p \"Password: \" user_password\ndone\necho\nread -s -p \"Repeat password: \" user_password2\necho\nuntil [[ \"$user_password\" == \"$user_password2\" ]]; do\n  echo\n  echo \"The passwords don't match\"\n  read -s -p \"Password: \" user_password\n  echo\n  read -s -p \"Repeat password: \" user_password2\ndone\n\necho\necho \"Would you like to enable Adguard, Unbound and DNS-over-HTTP\"\necho \"for secure DNS resolution with ad blocking functionality?\"\necho \"This functionality is experimental and might lead to instability\"\necho\nread -p \"Enable Adguard? [y/N]: \" adguard_enable\nuntil [[ \"$adguard_enable\" =~ ^[yYnN]*$ ]]; do\n  echo \"$adguard_enable: invalid selection.\"\n  read -p \"[y/N]: \" adguard_enable\ndone\nif [[ \"$adguard_enable\" =~ ^[yY]$ ]]; then\n  echo \"enable_adguard_unbound_doh: true\" >> $HOME/ansible-easy-vpn/custom.yml\nfi\n\necho\necho\necho \"Enter your domain name\"\necho \"The domain name should already resolve to the IP address of your server\"\nif [[ \"$adguard_enable\" =~ ^[yY]$ ]]; then\n  echo \"Make sure that 'wg', 'auth' and 'adguard' subdomains also point to that IP (not necessary with DuckDNS)\"\nelse\n  echo \"Make sure that 'wg' and 'auth' subdomains also point to that IP (not necessary with DuckDNS)\"\nfi\necho\nread -p \"Domain name: \" root_host\nuntil [[ \"$root_host\" =~ ^[a-z0-9\\.\\-]*$ ]]; do\n  echo \"Invalid domain name\"\n  read -p \"Domain name: \" root_host\ndone\n\npublic_ip=$(curl -s https://api.ipify.org)\ndomain_ip=$(dig +short @1.1.1.1 ${root_host})\n\nuntil [[ $domain_ip =~ $public_ip ]]; do\n  echo\n  echo \"The domain $root_host does not resolve to the public IP of this server ($public_ip)\"\n  echo\n  root_host_prev=$root_host\n  read -p \"Domain name [$root_host_prev]: \" root_host\n  if [ -z ${root_host} ]; then\n    root_host=$root_host_prev\n  fi\n  public_ip=$(curl -s ipinfo.io/ip)\n  domain_ip=$(dig +short @1.1.1.1 ${root_host})\n  echo\ndone\n\necho\necho \"Running certbot in dry-run mode to test the validity of the domain...\"\nif [[ \"$adguard_enable\" =~ ^[yY]$ ]]; then\n  $SUDO .venv/bin/certbot certonly --non-interactive --break-my-certs --force-renewal --agree-tos --email root@localhost.com --standalone --staging -d $root_host -d wg.$root_host -d auth.$root_host -d adguard.$root_host || $SUDO .venv/bin/certbot certonly --non-interactive --force-renewal --agree-tos --email root@localhost.com --standalone -d $root_host -d wg.$root_host -d auth.$root_host -d adguard.$root_host || exit\nelse\n  $SUDO .venv/bin/certbot certonly --non-interactive --break-my-certs --force-renewal --agree-tos --email root@localhost.com --standalone --staging -d $root_host -d wg.$root_host -d auth.$root_host || $SUDO .venv/bin/certbot certonly --non-interactive --force-renewal --agree-tos --email root@localhost.com --standalone -d $root_host -d wg.$root_host -d auth.$root_host  || exit\nfi\necho \"OK\"\n\necho \"root_host: \\\"${root_host}\\\"\" >> $HOME/ansible-easy-vpn/custom.yml\n\necho \"What's your preferred DNS?\"\necho\necho \"1. Cloudflare [1.1.1.1] (default)\"\necho \"2. Quad9 [9.9.9.9]\"\necho \"3. Google [8.8.8.8]\"\necho\n\nread -p \"DNS [1]: \" dns_number\n\nif [ -z ${dns_number} ] || [ ${dns_number} == \"1\" ]; then\n    dns_nameservers=\"cloudflare\"\nelse\n  until [[ \"$dns_number\" =~ ^[2-3]$ ]]; do\n    echo \"Invalid DNS choice\"\n    echo \"Make sure that you answer with either 1, 2 or 3\"\n    read -p \"DNS [1]: \" dns_number\n  done\n    case $dns_number in \n      \"2\")\n        dns_nameservers=\"quad9\"\n        ;;\n      \"3\")\n        dns_nameservers=\"google\"\n        ;;\n        *)\n        dns_nameservers=\"cloudflare\"\n        ;;\n    esac\nfi\n\necho \"dns_nameservers: \\\"${dns_nameservers}\\\"\" >> $HOME/ansible-easy-vpn/custom.yml\n\nif [[ ! $AWS_EC2 =~ true ]]; then\n  echo\n  echo \"Would you like to use an existing SSH key?\"\n  echo \"Press 'n' if you want to generate a new SSH key pair\"\n  echo\n  read -p \"Use existing SSH key? [y/N]: \" new_ssh_key_pair\n  until [[ \"$new_ssh_key_pair\" =~ ^[yYnN]*$ ]]; do\n          echo \"$new_ssh_key_pair: invalid selection.\"\n          read -p \"[y/N]: \" new_ssh_key_pair\n  done\n  echo \"enable_ssh_keygen: true\" >> $HOME/ansible-easy-vpn/custom.yml\n\n  if [[ \"$new_ssh_key_pair\" =~ ^[yY]$ ]]; then\n    echo\n    read -p \"Please enter your SSH public key: \" ssh_key_pair\n\n    echo \"ssh_public_key: \\\"${ssh_key_pair}\\\"\" >> $HOME/ansible-easy-vpn/custom.yml\n  fi\nfi\n\n\necho\necho \"Would you like to set up the e-mail functionality?\"\necho \"It will be used to confirm the 2FA setup and restore the password in case you forget it\"\necho\necho \"This is optional\"\necho\nread -p \"Set up e-mail? [y/N]: \" email_setup\nuntil [[ \"$email_setup\" =~ ^[yYnN]*$ ]]; do\n\t\t\t\techo \"$email_setup: invalid selection.\"\n\t\t\t\tread -p \"[y/N]: \" email_setup\ndone\n\nif [[ \"$email_setup\" =~ ^[yY]$ ]]; then\n  echo\n  read -p \"SMTP server: \" email_smtp_host\n  until [[ \"$email_smtp_host\" =~ ^[-a-z0-9\\.]*$ ]]; do\n    echo \"Invalid SMTP server\"\n    read -p \"SMTP server: \" email_smtp_host\n  done\n  echo\n  read -p \"SMTP port [465]: \" email_smtp_port\n  if [ -z ${email_smtp_port} ]; then\n    email_smtp_port=\"465\"\n  fi\n  echo\n  read -p \"SMTP login: \" email_login\n  echo\n  read -s -p \"SMTP password: \" email_password\n  until [[ ! -z \"$email_password\" ]]; do\n    echo \"The password is empty\"\n    read -s -p \"SMTP password: \" email_password\n  done\n  echo\n  echo\n  read -p \"'From' e-mail [${email_login}]: \" email\n  if [ ! -z ${email} ]; then\n    echo \"email: \\\"${email}\\\"\" >> $HOME/ansible-easy-vpn/custom.yml\n  fi\n\n  read -p \"'To' e-mail [${email_login}]: \" email_recipient\n  if [ ! -z ${email_recipient} ]; then\n    echo \"email_recipient: \\\"${email_recipient}\\\"\" >> $HOME/ansible-easy-vpn/custom.yml\n  fi\n\n\n\n  echo \"email_smtp_host: \\\"${email_smtp_host}\\\"\" >> $HOME/ansible-easy-vpn/custom.yml\n  echo \"email_smtp_port: \\\"${email_smtp_port}\\\"\" >> $HOME/ansible-easy-vpn/custom.yml\n  echo \"email_login: \\\"${email_login}\\\"\" >> $HOME/ansible-easy-vpn/custom.yml\nfi\n\n\n# Set secure permissions for the Vault file\ntouch $HOME/ansible-easy-vpn/secret.yml\nchmod 600 $HOME/ansible-easy-vpn/secret.yml\n\nif [ -z ${email_password+x} ]; then\n  echo\nelse \n  echo \"email_password: \\\"${email_password}\\\"\" >> $HOME/ansible-easy-vpn/secret.yml\nfi\n\nif [[ $user_password =~ '\"' ]]; then\n  echo \"user_password: '${user_password}'\" >> $HOME/ansible-easy-vpn/secret.yml\nelse\n  echo \"user_password: \\\"${user_password}\\\"\" >> $HOME/ansible-easy-vpn/secret.yml\nfi\n\n\njwt_secret=$(openssl rand -hex 23)\nsession_secret=$(openssl rand -hex 23)\nstorage_encryption_key=$(openssl rand -hex 23)\n\necho \"jwt_secret: ${jwt_secret}\" >> $HOME/ansible-easy-vpn/secret.yml\necho \"session_secret: ${session_secret}\" >> $HOME/ansible-easy-vpn/secret.yml\necho \"storage_encryption_key: ${storage_encryption_key}\" >> $HOME/ansible-easy-vpn/secret.yml\n\necho\necho \"Encrypting the variables\"\nansible-vault encrypt $HOME/ansible-easy-vpn/secret.yml\n\necho\necho \"Success!\"\nread -p \"Would you like to run the playbook now? [y/N]: \" launch_playbook\nuntil [[ \"$launch_playbook\" =~ ^[yYnN]*$ ]]; do\n\t\t\t\techo \"$launch_playbook: invalid selection.\"\n\t\t\t\tread -p \"[y/N]: \" launch_playbook\ndone\n\nif [[ \"$launch_playbook\" =~ ^[yY]$ ]]; then\n  if [[ $EUID -ne 0 ]]; then\n    echo\n    echo \"Please enter your current sudo password now\"\n    cd $HOME/ansible-easy-vpn && ansible-playbook --ask-vault-pass -K run.yml\n  else\n    cd $HOME/ansible-easy-vpn && ansible-playbook --ask-vault-pass run.yml\n  fi\nelse\n  echo \"You can run the playbook by executing the bootstrap script again:\"\n  echo \"cd ~/ansible-easy-vpn && bash bootstrap.sh\"\n  exit\nfi\n"
        },
        {
          "name": "handlers",
          "type": "tree",
          "content": null
        },
        {
          "name": "inventory.yml",
          "type": "blob",
          "size": 2.8642578125,
          "content": "# Please don't edit this file directly! It will be reset when you update the git repository\n# Instead, put your variable customizations into custom.yml\n---\n\nall:\n  hosts:\n    localhost:\n      ansible_connection: local\n\n  vars:\n    username: notthebee\n\n    root_host: example.duckdns.org\n\n    enable_username_creation: yes\n\n    user_shell: /bin/bash\n\n    enable_passwordless_sudo: yes\n\n    # Whether or not you want to generate a public key pair for SSH auth\n    # The playbook will not generate a new pair if $HOME/.ssh/authorized_keys exists and isn't empty\n    enable_ssh_keygen: yes\n\n    # Uncomment this line if you already have a public SSH key and put your public key in it\n    # This overrides `enable_ssh_keygen`\n    # ssh_public_key: \"\"\n\n    authelia_host: \"auth.{{ root_host }}\"\n\n    wireguard_host: \"wg.{{ root_host }}\"\n\n    wireguard_subnet: \"10.8.0.x\"\n\n    wireguard_client_allowed_ips: \"0.0.0.0/0, ::/0\"\n\n    adguard_host: \"adguard.{{ root_host }}\"\n\n    wireguard_port: \"51820\"\n\n    # Possible choices: cloudflare, quad9, google\n    #\n    # In case you've enabled Adguard, Unbound and DoH functionality,\n    # this will also set upstream DoH resolvers for dnscrypt\n    dns_nameservers: cloudflare\n\n    # This will enable Adguard, Unbound and dnscrypt-proxy\n    # for secure DNS resolution with ad-blocking functionality\n    #\n    # The ad blocking is disabled by default, you need to navigate to\n    # adguard.your_domain.com to set it up.\n    enable_adguard_unbound_doh: false\n\n    # Set the time at which the system should reboot after installing updates (24H format)\n    autoupdate_reboot_time: 03:00\n\n    docker_dir: \"/opt/docker\"\n\n    # You can set it to a different port in order to avoid automated scanner bots\n    ssh_port: 22\n\n    # Optional e-mail for notifications (unattended upgrades, banned IPs, etc.)\n    # Leave everything in place if you don't want any notifications\n    email_login: root@localhost\n\n    email: \"{{ email_login }}\"\n\n    email_recipient: \"{{ email_login }}\"\n\n    email_smtp_host: smtp.localhost.com\n\n    email_smtp_port: 465\n\n    # MSMTP\n    msmtp_accounts:\n      - account: mailbox\n        host: \"{{ email_smtp_host }}\"\n        port: \"{{ email_smtp_port }}\"\n        auth: \"on\"\n        from: \"{{ email }}\"\n        user: \"{{ email_login }}\"\n        password: \"{{ email_password }}\"\n\n    msmtp_default_account: \"mailbox\"\n\n    msmtp_alias_default: \"{{ email }}\"\n\n    ssh_allow_cidr: 0.0.0.0/0\n\n    iptables_allow_rules:\n      - desc: \"Allow Wireguard\"\n        proto: udp\n        port: \"{{ wireguard_port }}\"\n      - desc: \"Allow HTTP\"\n        proto: tcp\n        port: \"80\"\n      - desc: \"Allow HTTPS\"\n        proto: tcp\n        port: \"443\"\n      - desc: \"Allow SSH\"\n        proto: tcp\n        port: \"{{ ssh_port }}\"\n\n    # Fail2Ban only comes with the SSH jail by default\n    enable_fail2ban: true\n\n    pip_install_packages:\n      - name: docker\n\n    docker_users:\n      - \"{{ username }}\"\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.08203125,
          "content": "cryptography\npyOpenSSL\ncertbot\nrequests<2.29.2\npasslib \nbcrypt \nwheel\nansible>=4.10\n"
        },
        {
          "name": "requirements.yml",
          "type": "blob",
          "size": 0.5927734375,
          "content": "---\nroles:\n  - name: chriswayg.msmtp-mailer\n    src: https://github.com/chriswayg/ansible-msmtp-mailer\n  - name: geerlingguy.docker\n    src: https://github.com/geerlingguy/ansible-role-docker\n  - name: geerlingguy.pip\n    src: https://github.com/geerlingguy/ansible-role-pip\n\ncollections:\n  - name: https://github.com/ansible-collections/community.docker\n    type: git\n  - name: https://github.com/ansible-collections/community.general\n    type: git\n  - name: https://github.com/ansible-collections/community.crypto\n    type: git\n  - name: https://github.com/ansible-collections/ansible.posix\n    type: git\n"
        },
        {
          "name": "roles",
          "type": "tree",
          "content": null
        },
        {
          "name": "run.yml",
          "type": "blob",
          "size": 1.2578125,
          "content": "#!/usr/bin/env ansible-playbook\n---\n- name: Install and configure ansible-easy-vpn\n  hosts: all\n  become: true\n\n  vars_files:\n    - custom.yml\n    - secret.yml\n\n  handlers:\n    - name: Import global handlers\n      ansible.builtin.import_tasks: handlers/main.yml\n\n  pre_tasks:\n    - name: Set the AWS and Letsencrypt staging facts\n      ansible.builtin.set_fact:\n        aws: \"{{ lookup('ansible.builtin.env', 'AWS_EC2') == 'true' }}\"\n        letsencrypt_staging: \"{{ [lookup('ansible.builtin.env', 'LETSENCRYPT_STAGING') | lower | default('no')] }}\"\n\n  roles:\n    - role: system\n      tags:\n        - system\n\n    - role: geerlingguy.docker\n      tags:\n        - docker\n\n    - role: docker_network\n      tags:\n        - docker\n\n    - role: fail2ban\n      when: enable_fail2ban | default(False)\n      tags:\n        - fail2ban\n\n    - role: dns\n      when: enable_adguard_unbound_doh | default(False)\n      tags:\n        - dns\n\n    - role: watchtower\n      tags:\n        - watchtower\n\n    - role: authelia\n      tags:\n        - authelia\n\n    - role: bunkerweb\n      tags:\n        - bunkerweb\n\n    - role: wireguard\n      tags:\n        - wireguard\n\n    - role: chriswayg.msmtp-mailer\n      when: email_password is defined\n      tags:\n        - msmtp\n\n    - role: ssh\n      tags:\n        - ssh\n"
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}