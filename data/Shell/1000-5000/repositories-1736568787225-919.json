{
  "metadata": {
    "timestamp": 1736568787225,
    "page": 919,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pfelk/pfelk",
      "stars": 1081,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".env",
          "type": "blob",
          "size": 0.955078125,
          "content": "# Derived from: https://github.com/elastic/elasticsearch/blob/8.9/docs/reference/setup/install/docker/.env\n\n# User\nELASTIC_USER=elastic\n\n# Password for the 'elastic' user (at least 6 characters)\nELASTIC_PASSWORD=changeme\n\n# Password for the 'kibana_system' user (at least 6 characters)\nKIBANA_PASSWORD=changeme\n\n# Password for the 'logstash_system' user (at least 6 characters)\nLOGSTASH_PASSWORD=changeme\n\n# Version of Elastic products\nSTACK_VERSION=8.15.2\n\n# Set the cluster name\nCLUSTER_NAME=pfelk\n\n# Set to 'basic' or 'trial' to automatically start the 30-day trial\nLICENSE=basic\n#LICENSE=trial\n\n# Port to expose Elasticsearch HTTP API to the host\nES_PORT=9200\n#ES_PORT=127.0.0.1:9200\n\n# Port to expose Kibana to the host\nKIBANA_PORT=5601\n#KIBANA_PORT=80\n\n# Increase or decrease based on the available host memory (in bytes)\nES_MEM_LIMIT=4g\nKB_MEM_LIMIT=1g\nLS_MEM_LIMIT=2g\n\n# Project namespace (defaults to the current folder name if not set)\n#COMPOSE_PROJECT_NAME=myproject\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 6.0849609375,
          "content": "# Citizen Code of Conduct\n\n## 1. Purpose\n\nA primary goal of Pfelk is to be inclusive to the largest number of contributors, with the most varied and diverse backgrounds possible. As such, we are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion (or lack thereof).\n\nThis code of conduct outlines our expectations for all those who participate in our community, as well as the consequences for unacceptable behavior.\n\nWe invite all those who participate in Pfelk to help us create safe and positive experiences for everyone.\n\n## 2. Open [Source/Culture/Tech] Citizenship\n\nA supplemental goal of this Code of Conduct is to increase open [source/culture/tech] citizenship by encouraging participants to recognize and strengthen the relationships between our actions and their effects on our community.\n\nCommunities mirror the societies in which they exist and positive action is essential to counteract the many forms of inequality and abuses of power that exist in society.\n\nIf you see someone who is making an extra effort to ensure our community is welcoming, friendly, and encourages all participants to contribute to the fullest extent, we want to know.\n\n## 3. Expected Behavior\n\nThe following behaviors are expected and requested of all community members:\n\n * Participate in an authentic and active way. In doing so, you contribute to the health and longevity of this community.\n * Exercise consideration and respect in your speech and actions.\n * Attempt collaboration before conflict.\n * Refrain from demeaning, discriminatory, or harassing behavior and speech.\n * Be mindful of your surroundings and of your fellow participants. Alert community leaders if you notice a dangerous situation, someone in distress, or violations of this Code of Conduct, even if they seem inconsequential.\n * Remember that community event venues may be shared with members of the public; please be respectful to all patrons of these locations.\n\n## 4. Unacceptable Behavior\n\nThe following behaviors are considered harassment and are unacceptable within our community:\n\n * Violence, threats of violence or violent language directed against another person.\n * Sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory jokes and language.\n * Posting or displaying sexually explicit or violent material.\n * Posting or threatening to post other people's personally identifying information (\"doxing\").\n * Personal insults, particularly those related to gender, sexual orientation, race, religion, or disability.\n * Inappropriate photography or recording.\n * Inappropriate physical contact. You should have someone's consent before touching them.\n * Unwelcome sexual attention. This includes, sexualized comments or jokes; inappropriate touching, groping, and unwelcomed sexual advances.\n * Deliberate intimidation, stalking or following (online or in person).\n * Advocating for, or encouraging, any of the above behavior.\n * Sustained disruption of community events, including talks and presentations.\n\n## 5. Weapons Policy\n\nNo weapons will be allowed at Pfelk events, community spaces, or in other spaces covered by the scope of this Code of Conduct. Weapons include but are not limited to guns, explosives (including fireworks), and large knives such as those used for hunting or display, as well as any other item used for the purpose of causing injury or harm to others. Anyone seen in possession of one of these items will be asked to leave immediately, and will only be allowed to return without the weapon. Community members are further expected to comply with all state and local laws on this matter.\n\n## 6. Consequences of Unacceptable Behavior\n\nUnacceptable behavior from any community member, including sponsors and those with decision-making authority, will not be tolerated.\n\nAnyone asked to stop unacceptable behavior is expected to comply immediately.\n\nIf a community member engages in unacceptable behavior, the community organizers may take any action they deem appropriate, up to and including a temporary ban or permanent expulsion from the community without warning (and without refund in the case of a paid event).\n\n## 7. Reporting Guidelines\n\nIf you are subject to or witness unacceptable behavior, or have any other concerns, please notify a community organizer as soon as possible. \n\n\n\nAdditionally, community organizers are available to help community members engage with local law enforcement or to otherwise help those experiencing unacceptable behavior feel safe. In the context of in-person events, organizers will also provide escorts as desired by the person experiencing distress.\n\n## 8. Addressing Grievances\n\nIf you feel you have been falsely or unfairly accused of violating this Code of Conduct, you should notify 3ilson with a concise description of your grievance. Your grievance will be handled in accordance with our existing governing policies. \n\n\n\n## 9. Scope\n\nWe expect all community participants (contributors, paid or otherwise; sponsors; and other guests) to abide by this Code of Conduct in all community venues--online and in-person--as well as in all one-on-one communications pertaining to community business.\n\nThis code of conduct and its related procedures also applies to unacceptable behavior occurring outside the scope of community activities when such behavior has the potential to adversely affect the safety and well-being of community members.\n\n\n## 10. License and attribution\n\nThe Citizen Code of Conduct is distributed by [Stumptown Syndicate](http://stumptownsyndicate.org) under a [Creative Commons Attribution-ShareAlike license](http://creativecommons.org/licenses/by-sa/3.0/). \n\nPortions of text derived from the [Django Code of Conduct](https://www.djangoproject.com/conduct/) and the [Geek Feminism Anti-Harassment Policy](http://geekfeminism.wikia.com/wiki/Conference_anti-harassment/Policy).\n\n_Revision 2.3. Posted 6 March 2017._\n\n_Revision 2.2. Posted 4 February 2016._\n\n_Revision 2.1. Posted 23 June 2014._\n\n_Revision 2.0, adopted by the [Stumptown Syndicate](http://stumptownsyndicate.org) board on 10 January 2013. Posted 17 March 2013._\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.4560546875,
          "content": "# Contributing to pfELK\n\n---\n\n### Questions :question:\n* Visit our [FAQs](#) <<<-coming soon->>>\n* <<<Discussion Forum>>>\n\n---\n\n### Start Here \nFirst, checkout the [pfELK README](README.md) for information on how to configure and run pfELK.\n\n**Then, forward your firewall logs.**\n\n* Make sure you followed all instructions\n* Configured your firewall(s) (pfSense or OPNsense)\n* All required dependencies were installed and/or configured\n\n> :clock1: _For more complex installations please reach out for assistance (i.e. multiple firewalls, sending firewall logs through VPN etc..._\n---\n\n### How to contribute \n\n#### Documentation! :page_with_curl:\n\nPlease help improve documentation with your inputs to our READMEs, examples, and FAQs.\n\n#### Bugs :beetle:\n\n**Before submitting a bug report:**\n* Ensure you are submitting this issue to the correct repository, since we have one for all individual deployments (pfelk, ansible-pfelk, docker-pfelk) listed here: https://github.com/pfelk/pfelk\n* Ensure the bug was not already reported by searching for [existing issues in pfELK](https://github.com/pfelk/pfelk/issues)\n  * If an issue is already open, comment to that issue and provide any additional details, to assist.\n* Check the [FAQs](#) for common questions and problems <<<-coming soon->>>\n\nBugs and issues are tracked as [GitHub Issues](https://github.com/a3ilson/pfelk/issues).\n**Please follow these guidelines when submitting a bug request:**\n* Ensure the title captures the subject of the issue\n* Describe the exact procedures in replicating the issue(s)\n* Explain the issue(s)\n* Fill out the [Bug/Error template](https://github.com/pfelk/pfelk/issues/new/choose) \n\n#### Feature Requests :sparkles:\n\nFeature requests include new features and minor improvements to existing functionality.\n\nFeature requests are tracked as [GitHub Issues](https://github.com/a3ilson/pfelk/issues/new/choose).\n**Please follow these guidelines when submitting a feature request:**\n* Ensure the title captures the subject of the requested feature\n* Describe the feature in as much detail as possible\n* Provide examples to help us understand the requested feature(s)\n* Follow the directions in the [feature template](https://github.com/pfelk/pfelk/issues/new/choose)\n\n#### Pull Requests \n\n**Collaboration is highly encouraged!** Make it better, improve it and share! \n\n**Help us with pull requests:**\n* Describe the problem and solution\n* Reference and include the issue number(s)\n* Verify any and all changes were extensively tested\n"
        },
        {
          "name": "Images",
          "type": "tree",
          "content": null
        },
        {
          "name": "PULL_REQUEST_TEMPLATE.md",
          "type": "blob",
          "size": 1.4501953125,
          "content": "# Pull Request Template\n\n## Description\n\nPlease include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.\n\nFixes # (issue)\n\n## Type of change\n\nPlease delete options that are not relevant.\n\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] This change requires a documentation update\n\n## How Has This Been Tested?\n\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\n\n- [ ] Original Configuration\n- [ ] Adjusted Configuration\n\n**Test Configuration**:\n* Elastic Stack Version:\n* Linux Version/Type:\n* Java Version:\n* Elastic Stack Configuration Files:\n\n## Checklist:\n\n- [ ] Code follows the style guidelines of this project\n- [ ] I have performed a self-review of my own code\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] I have made corresponding changes to the documentation\n- [ ] My changes generate no new warnings\n- [ ] I have added tests that prove my fix is effective or that my feature works\n- [ ] New and existing unit tests pass locally with my changes\n- [ ] Any dependent changes have been merged and published in downstream modules\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.9619140625,
          "content": "![Version badge](https://img.shields.io/badge/ELK-8.15.0-blue.svg)\n\n[![](https://dcbadge.vercel.app/api/server/h3DJs2Kj8k)](https://discord.gg/h3DJs2Kj8k)\n\n[![YouTube](https://img.shields.io/badge/YouTube-FF0000?style=for-the-badge&logo=youtube&logoColor=white)](https://www.youtube.com/3ilson)\n\n# Elastic Integration\n- https://docs.elastic.co/en/integrations/pfsense\n\n# pfSense/OPNsense + Elastic Stack  \n![pfelk dashboard](https://raw.githubusercontent.com/pfelk/pfelk/main/Images/Dashboard%20-%20v61.gif)\n\n### Contents\n* [Prerequisites](#prerequisites)\n* [Key Features](#key-features)\n* [pfelk overview](#pfelk-overview)\n* [Installation](#installation)\n  * [docker](#docker-compose)\n  * [script installation](#script-installation-method)\n  * [manual installation](#manual-installation-method)\n* [Roadmap](#roadmap)\n* [Comparison to similar solutions](#comparison-to-similar-solutions)\n* [Contributing](#contributing)\n* [License](#license)\n\n### Prerequisites\n- Ubuntu Server v20.04+ or Debian Server 11+ (stretch and buster tested)\n- pfSense v2.5.0+ or OPNsense 23.0+\n- Minimum of 8GB of RAM (Docker requires more) and recommend 32GB ([WiKi Reference](https://github.com/pfelk/pfelk/wiki/How-To:-Performance))\n- Setting up remote logging ([WiKi Reference](https://github.com/pfelk/pfelk/wiki/How-To:-Prerequisite-%7C--pfSense-OPNsense-Logging))\n\n**pfelk** is a highly customizable **open-source** tool for ingesting and visualizing your firewall traffic with the full power of Elasticsearch, Logstash and Kibana.\n\n### Key features:\n\n- **ingest** and **enrich** your pfSense/OPNsense **firewall traffic** logs by leveraging *Logstash*\n\n- **search** your indexed data in *near-real-time* with the full power of the *Elasticsearch*\n\n- **visualize** you network traffic with interactive dashboards, Maps, graphs in *Kibana*\n\nSupported entries include:\n - pfSense/OPNSense setups\n - TCP/UDP/ICMP protocols\n - KEA-DHCP (v4/v6) message types with dashboard - in development \n - DHCP (v4/v6) message types with dashboard - depreciated\n - IPv4/IPv6 mapping\n - pfSense CARP data\n - openVPN with dashboard\n - Unbound DNS Resolver with dashboard and Kibana SIEM compliance\n - Suricata IDS with dashboard and Kibana SIEM compliance\n - Snort IDS with dashboard and Kibana SIEM compliance \n - Squid with dashboard and Kibana SIEM compliance\n - HAProxy with dashboard\n - Captive Portal with dashboard\n - NGINX with dashboard\n\n**pfelk** aims to replace the vanilla pfSense/OPNsense web UI with extended search and visualization features. You can deploy this solution via **ansible-playbook**, **docker-compose**, **bash script**, or manually.\n\n### pfelk overview\n* ![pfelk-overview](https://github.com/pfelk/pfelk/raw/main/Images/pfelk-visual.png)\n\n### Quick start\n\n### Installation\n\n#### docker-compose\n * [Manual Method](https://github.com/pfelk/pfelk/blob/main/install/docker.md) or [Scripted Installed](#) - Scripted Method Coming Soon\n * `$ docker-compose up`\n * [![YouTube](https://img.shields.io/badge/YouTube-FF0000?style=for-the-badge&logo=youtube&logoColor=white)](https://www.youtube.com/watch?v=MJVbLvdVtyY) Guide (Update Coming Soon\n\n#### script installation method\n* Download installer script from [pfelk](https://raw.githubusercontent.com/pfelk/pfelk/main/etc/pfelk/scripts/pfelk-installer.sh) repository\n* `$ wget https://raw.githubusercontent.com/pfelk/pfelk/main/etc/pfelk/scripts/pfelk-installer.sh`\n* Make script executable \n* `$ chmod +x pfelk-installer.sh`\n* Run installer script \n* `$ sudo ./pfelk-installer.sh`\n* Configure Security [here](https://github.com/pfelk/pfelk/blob/main/install/security.md)\n* Templates [here](https://github.com/pfelk/pfelk/blob/main/install/templates.md)\n* Finish Configuring [here](https://github.com/pfelk/pfelk/blob/main/install/configuration.md)\n* [![YouTube](https://img.shields.io/badge/YouTube-FF0000?style=for-the-badge&logo=youtube&logoColor=white)](https://www.youtube.com/watch?v=qcGcsQQoPo0) Guide\n\n#### manual installation method\n* [Ubuntu 20.04-22.04](https://github.com/pfelk/pfelk/blob/main/install/preparation.md)\n* [Debian 11-12](https://github.com/pfelk/pfelk/blob/main/install/preparation.md)\n* [Docker](https://github.com/pfelk/pfelk/blob/main/install/docker.md)\n* [![YouTube](https://img.shields.io/badge/YouTube-FF0000?style=for-the-badge&logo=youtube&logoColor=white)](https://www.youtube.com/watch?v=_IJAAUqNVRc) Guide\n\n### Roadmap\nThis is the experimental public roadmap for the pfelk project.\n\n[See the roadmap »](https://github.com/orgs/pfelk/projects/11)\n\n### Comparison to similar solutions\n[Comparisions »](https://github.com/pfelk/pfelk/wiki/Comparison)\n\n### Contributing\nPlease reference to the [CONTRIBUTING file](https://github.com/pfelk/pfelk/blob/main/CONTRIBUTING.md). Collectively we can enhance and improve this product. Issues, feature requests, PRs, and documentation contributions are encouraged and welcomed!\n\n### License\nThis project is licensed under the terms of the Apache 2.0 open source license. Please refer to [LICENSE](https://github.com/pfelk/pfelk/blob/main/license) for the full terms.\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0283203125,
          "content": "theme: jekyll-theme-modernist"
        },
        {
          "name": "changelog",
          "type": "blob",
          "size": 5.8056640625,
          "content": "ES Versions:\n  * pfelk >= 22.# supports Elasticstack >=8.1.0+\n  * pfelk >= 20.# supports Elastic Stack >= 7.11.0+\n  * pfelk >= 6.0  supports Elastic Stack >= 7.0.0+\n  * pfelk >= 6.0  supports pfSense >= 2.4.0+\n  * pfelk >= 6.0  supports OPNsense >= 19+\n  \nv22.04\n  - Revised to accomidate default security implemented by Elastic\n  - Renamed *.conf to *.pfelk to mitigate conflict where other *.conf files reside \n  - Made various refinements \n  - Cleaned up various files\n  - Possibly last supported version...too time consuming to continue to support\n  \nv22.01\n  - Updated output (50-outputs.conf) supporting data streams\n  - ILM now supported by default\n  - Updated output (50-outputs.conf); cleaned-up to simplify output reduced consumption of resources\n  - Updated input (01-inputs.conf); reduced ports required to recieve logs to one port\n  - Removed 02-types.conf and 03-filter.conf no longer needed\n  - Simplified initial grok pattern to support pfSense's legacy (archaic) syslog format (however, it does not support multiple log instances [e.g. more than one firewall sending logs])\n  - Data Stream format required update to Kibana saved index patterns (e.g. pfelk-firewall-* to *-pfelk-firewall*)\n  - Data Stream format required updated templates (e.g. pfelk-firewall-* to *-pfelk-firewall*)\n\nv20.3\n  -File Mappings\n  - File locations were amended to mimic docker configuraiton. This will mitigate the need to revise/amend various paths within the respective conf files.\n\nv6.5 202#/##/##\n  -SCRIPT\n  - Simple Installer  - Fix Elasticsearch timeout on startup (issue #170) <-- https://www.elastic.co/guide/en/elasticsearch/reference/current/stopping-elasticsearch.html\n                      - Add symbolic link to aid with quicker shutdowns (issue #128) <-- https://www.elastic.co/guide/en/elasticsearch/reference/current/stopping-elasticsearch.html\n                      - Add check tmp space prior to install (issue #128) <-- Fixed 1-November-2020\n\nv6.1 2020/12/10\n  -LOGSTASH\n  - conf files        - Made various changes for ECS conformity\n                      - Prevented default logstash template from being installed (eliminated initial setup issues) `manage_template => false`\n                      - Enabled ECS compatibility (v1)\n                      - Update GROK pattern aligning log output with ECS v1.7.0\n                        - Most fields are now compliant\n                          - Fields with `pf` parent are not ECS supported but renamed within GROK pattern for better organization\n                          - Squid and Snort parent fields removed to align with ECS\n                          - Enriched `tcp.options` field parsing out values in an array vs single string\n                          - Parsed DHCP logs for independent indexing\n                          - Removed or amended 'host' field to comply with ECS\n \n  -ELASTICSEARCH\n  - templates         - Migrated to new index templates \n                        - Legacy templates are depreciated and likely removed with pending v8 release (Elastic)\n                        - ECS compliant template utilized/implemented \n                        - Created ILM \n                          - Roll over at 5G or 7-days\n                            - Still needs refining \n                        - Suricata template built based off of https://www.elastic.co/guide/en/beats/filebeat/current/exported-fields-suricata.html\n                          - The following alias fields were ommited \n                            - fileinfo.filename\n                            - fileinfo.size\n                            - dest_port\n                            - src_port\n                            - proto\n                            - src_ip\n                            - dest_ip\n                            - http_status\n                            - http.http_user_agent\n                            - http.http_refer\n                            - http.url\n                            - http.hostname\n                            - http.length\n                            - http.http_method\n                            - timestamp\n                            - alert.severity\n                            - alert.action\n                            - flow.bytes_toclient\n                            - flow.start\n                            - flow.pkts_toclient\n                            - flow.bytes_toserver\n                            - flow.pkts_toserver\n                            - app_proto\n                            \n                        - Haproxy template was refined based off of https://www.elastic.co/guide/en/beats/filebeat/current/exported-fields-haproxy.html\n                          - Still needs testing and finalization (note: grok pattern was primary utilized to amend fields)\n                          - The following fields were ommited\n                            - time_request <-- needs to be amended to align with haproxy module\n                            - time_backend_response <-- needs to be amended to align with haproxy module\n                            - http_status_code <-- Alias \n               \n  -KIBANA\n  - Visualizations    - Updated and aligned with templates\n  - Dashboards        - Updated and aligned with updates                    \n                      \nv6.0 2020/10/18\n  -LOGSTASH\n  - conf files        - Removed host filtering (mitigate issues with logs traversing via routers/containers)\n                      - Added observer fields for enhanced filtering for multiple firewall setups \n  - grok pattern      - Updated to conform to Elastic Common Schema (ECS) and aligned with pfsense Raw Filter Format\n  \n  -ELASTICSEARCH\n  - templates         - Added index settings and mappings\n                      - Templates are dependent upon underlying templates                \n  -KIBANA\n  - Visualizations    - Updated and aligned with templates\n  - Dashboards        - Custom index pattern ID for each major template\n"
        },
        {
          "name": "docker-compose.(single cluster unstable)",
          "type": "blob",
          "size": 5.615234375,
          "content": "#Non-Cluster\n\nversion: \"2.2\"\n\nservices:\n  setup:\n    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}\n    container_name: pfelk-setup\n    volumes:\n      - certs:/usr/share/elasticsearch/config/certs\n    user: \"0\"\n    command: >\n      bash -c '\n        if [ x${ELASTIC_PASSWORD} == x ]; then\n          echo \"Set the ELASTIC_PASSWORD environment variable in the .env file\";\n          exit 1;\n        elif [ x${KIBANA_PASSWORD} == x ]; then\n          echo \"Set the KIBANA_PASSWORD environment variable in the .env file\";\n          exit 1;\n        elif [ x${LOGSTASH_PASSWORD} == x ]; then\n          echo \"Set the LOGSTASH_PASSWORD environment variable in the .env file\";\n          exit 1;\n        fi;\n        if [ ! -f config/certs/ca.zip ]; then\n          echo \"Creating CA\";\n          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;\n          unzip config/certs/ca.zip -d config/certs;\n        fi;\n        if [ ! -f config/certs/certs.zip ]; then\n          echo \"Creating certs\";\n          echo -ne \\\n          \"instances:\\n\"\\\n          \"  - name: es01\\n\"\\\n          \"    dns:\\n\"\\\n          \"      - es01\\n\"\\\n          \"      - localhost\\n\"\\\n          \"    ip:\\n\"\\\n          \"      - 127.0.0.1\\n\"\\\n          > config/certs/instances.yml;\n          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;\n          unzip config/certs/certs.zip -d config/certs;\n        fi;\n        echo \"Setting file permissions\"\n        chown -R 1000:1000 config/certs;\n        find . -type d -exec chmod 750 \\{\\} \\;;\n        find . -type f -exec chmod 640 \\{\\} \\;;\n        echo \"Waiting for Elasticsearch availability\";\n        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q \"missing authentication credentials\"; do sleep 30; done;\n        echo \"Setting kibana_system password\";\n        until curl -s -X POST --cacert config/certs/ca/ca.crt -u \"elastic:${ELASTIC_PASSWORD}\" -H \"Content-Type: application/json\" https://es01:9200/_security/user/kibana_system/_password -d \"{\\\"password\\\":\\\"${KIBANA_PASSWORD}\\\"}\" | grep -q \"^{}\"; do sleep 10; done;\n        echo \"Setting logstash_system password\";\n        until curl -s -X POST --cacert config/certs/ca/ca.crt -u \"elastic:${ELASTIC_PASSWORD}\" -H \"Content-Type: application/json\" https://es01:9200/_security/user/logstash_system/_password -d \"{\\\"password\\\":\\\"${LOGSTASH_PASSWORD}\\\"}\" | grep -q \"^{}\"; do sleep 10; done;\n        echo \"All done!\";\n      '\n    healthcheck:\n      test: [\"CMD-SHELL\", \"[ -f config/certs/es01/es01.crt ]\"]\n      interval: 1s\n      timeout: 5s\n      retries: 120\n\n  es01:\n    depends_on:\n      setup:\n        condition: service_healthy\n    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}\n    container_name: pfelk-elastic\n    volumes:\n      - certs:/usr/share/elasticsearch/config/certs\n      - esdata01:/usr/share/elasticsearch/data\n    ports:\n      - ${ES_PORT}:9200\n    environment:\n      - node.name=es01\n      - cluster.name=${CLUSTER_NAME}\n      - cluster.initial_master_nodes=es01\n      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}\n      - bootstrap.memory_lock=true\n      - xpack.security.enabled=true\n      - xpack.security.http.ssl.enabled=true\n      - xpack.security.http.ssl.key=certs/es01/es01.key\n      - xpack.security.http.ssl.certificate=certs/es01/es01.crt\n      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt\n      - xpack.security.http.ssl.verification_mode=certificate\n      - xpack.security.transport.ssl.enabled=true\n      - xpack.security.transport.ssl.key=certs/es01/es01.key\n      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt\n      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt\n      - xpack.security.transport.ssl.verification_mode=certificate\n      - xpack.license.self_generated.type=${LICENSE}\n    mem_limit: ${ES_MEM_LIMIT}\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    healthcheck:\n      test:\n        [\n          \"CMD-SHELL\",\n          \"curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'\",\n        ]\n      interval: 10s\n      timeout: 10s\n      retries: 120\n\n  kibana:\n    depends_on:\n      es01:\n        condition: service_healthy\n    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}\n    container_name: pfelk-kibana\n    volumes:\n      - certs:/usr/share/kibana/config/certs\n      - kibanadata:/usr/share/kibana/data\n    ports:\n      - ${KIBANA_PORT}:5601\n    environment:\n      - SERVERNAME=kibana\n      - ELASTICSEARCH_HOSTS=https://es01:9200\n      - ELASTICSEARCH_USERNAME=kibana_system\n      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}\n      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt\n    mem_limit: ${KB_MEM_LIMIT}\n    healthcheck:\n      test:\n        [\n          \"CMD-SHELL\",\n          \"curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'\",\n        ]\n      interval: 10s\n      timeout: 10s\n      retries: 120\n\n  logstash:\n    depends_on:\n      es01:\n        condition: service_healthy\n    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}\n    container_name: pfelk-logstash\n    volumes:\n      - certs:/usr/share/logstash/config/certs\n      - /etc/pfelk/config:/usr/share/logstash/config\n      - /etc/pfelk/conf.d:/etc/pfelk/conf.d:ro,Z\n      - /etc/pfelk/patterns:/etc/pfelk/patterns:ro,Z\n      - /etc/pfelk/databases:/etc/pfelk/databases:ro,Z\n    ports:\n      - 5140:5140/tcp\n      - 5140:5140/udp\n    mem_limit: ${LS_MEM_LIMIT}\n    restart: unless-stopped\n\nvolumes:\n  certs:\n    driver: local\n  esdata01:\n    driver: local\n  kibanadata:\n    driver: local\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 9.1923828125,
          "content": "#Cluster\nversion: \"2.2\"\n\nservices:\n  setup:\n    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}\n    container_name: pfelk-setup\n    volumes:\n      - certs:/usr/share/elasticsearch/config/certs\n    user: \"0\"\n    command: >\n      bash -c '\n        if [ x${ELASTIC_PASSWORD} == x ]; then\n          echo \"Set the ELASTIC_PASSWORD environment variable in the .env file\";\n          exit 1;\n        elif [ x${KIBANA_PASSWORD} == x ]; then\n          echo \"Set the KIBANA_PASSWORD environment variable in the .env file\";\n          exit 1;\n        elif [ x${LOGSTASH_PASSWORD} == x ]; then\n          echo \"Set the LOGSTASH_PASSWORD environment variable in the .env file\";\n          exit 1;\n        fi;\n        if [ ! -f config/certs/ca.zip ]; then\n          echo \"Creating CA\";\n          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;\n          unzip config/certs/ca.zip -d config/certs;\n        fi;\n        if [ ! -f config/certs/certs.zip ]; then\n          echo \"Creating certs\";\n          echo -ne \\\n          \"instances:\\n\"\\\n          \"  - name: es01\\n\"\\\n          \"    dns:\\n\"\\\n          \"      - es01\\n\"\\\n          \"      - localhost\\n\"\\\n          \"    ip:\\n\"\\\n          \"      - 127.0.0.1\\n\"\\\n          \"  - name: es02\\n\"\\\n          \"    dns:\\n\"\\\n          \"      - es02\\n\"\\\n          \"      - localhost\\n\"\\\n          \"    ip:\\n\"\\\n          \"      - 127.0.0.1\\n\"\\\n          \"  - name: es03\\n\"\\\n          \"    dns:\\n\"\\\n          \"      - es03\\n\"\\\n          \"      - localhost\\n\"\\\n          \"    ip:\\n\"\\\n          \"      - 127.0.0.1\\n\"\\\n          > config/certs/instances.yml;\n          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;\n          unzip config/certs/certs.zip -d config/certs;\n        fi;\n        echo \"Setting file permissions\"\n        chown -R 1000:1000 config/certs;\n        find . -type d -exec chmod 750 \\{\\} \\;;\n        find . -type f -exec chmod 640 \\{\\} \\;;\n        echo \"Waiting for Elasticsearch availability\";\n        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q \"missing authentication credentials\"; do sleep 30; done;\n        echo \"Setting kibana_system password\";\n        until curl -s -X POST --cacert config/certs/ca/ca.crt -u \"elastic:${ELASTIC_PASSWORD}\" -H \"Content-Type: application/json\" https://es01:9200/_security/user/kibana_system/_password -d \"{\\\"password\\\":\\\"${KIBANA_PASSWORD}\\\"}\" | grep -q \"^{}\"; do sleep 10; done;\n        echo \"Setting logstash_system password\";\n        until curl -s -X POST --cacert config/certs/ca/ca.crt -u \"elastic:${ELASTIC_PASSWORD}\" -H \"Content-Type: application/json\" https://es01:9200/_security/user/logstash_system/_password -d \"{\\\"password\\\":\\\"${LOGSTASH_PASSWORD}\\\"}\" | grep -q \"^{}\"; do sleep 10; done;\n        echo \"All done!\";\n      '\n    healthcheck:\n      test: [\"CMD-SHELL\", \"[ -f config/certs/es01/es01.crt ]\"]\n      interval: 1s\n      timeout: 5s\n      retries: 120\n\n  es01:\n    depends_on:\n      setup:\n        condition: service_healthy\n    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}\n    container_name: pfelk-es01\n    volumes:\n      - certs:/usr/share/elasticsearch/config/certs\n      - esdata01:/usr/share/elasticsearch/data\n    ports:\n      - ${ES_PORT}:9200\n    environment:\n      - node.name=es01\n      - cluster.name=${CLUSTER_NAME}\n      - cluster.initial_master_nodes=es01,es02,es03\n      - discovery.seed_hosts=es02,es03\n      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}\n      - bootstrap.memory_lock=true\n      - xpack.security.enabled=true\n      - xpack.security.http.ssl.enabled=true\n      - xpack.security.http.ssl.key=certs/es01/es01.key\n      - xpack.security.http.ssl.certificate=certs/es01/es01.crt\n      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt\n      - xpack.security.http.ssl.verification_mode=certificate\n      - xpack.security.transport.ssl.enabled=true\n      - xpack.security.transport.ssl.key=certs/es01/es01.key\n      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt\n      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt\n      - xpack.security.transport.ssl.verification_mode=certificate\n      - xpack.license.self_generated.type=${LICENSE}\n    mem_limit: ${ES_MEM_LIMIT}\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    healthcheck:\n      test:\n        [\n          \"CMD-SHELL\",\n          \"curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'\",\n        ]\n      interval: 10s\n      timeout: 10s\n      retries: 120\n\n  es02:\n    depends_on:\n      - es01\n    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}\n    container_name: pfelk-es02\n    volumes:\n      - certs:/usr/share/elasticsearch/config/certs\n      - esdata02:/usr/share/elasticsearch/data\n    environment:\n      - node.name=es02\n      - cluster.name=${CLUSTER_NAME}\n      - cluster.initial_master_nodes=es01,es02,es03\n      - discovery.seed_hosts=es01,es03\n      - bootstrap.memory_lock=true\n      - xpack.security.enabled=true\n      - xpack.security.http.ssl.enabled=true\n      - xpack.security.http.ssl.key=certs/es02/es02.key\n      - xpack.security.http.ssl.certificate=certs/es02/es02.crt\n      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt\n      - xpack.security.http.ssl.verification_mode=certificate\n      - xpack.security.transport.ssl.enabled=true\n      - xpack.security.transport.ssl.key=certs/es02/es02.key\n      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt\n      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt\n      - xpack.security.transport.ssl.verification_mode=certificate\n      - xpack.license.self_generated.type=${LICENSE}\n    mem_limit: ${ES_MEM_LIMIT}\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    healthcheck:\n      test:\n        [\n          \"CMD-SHELL\",\n          \"curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'\",\n        ]\n      interval: 10s\n      timeout: 10s\n      retries: 120\n\n  es03:\n    depends_on:\n      - es02\n    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}\n    container_name: pfelk-es03\n    volumes:\n      - certs:/usr/share/elasticsearch/config/certs\n      - esdata03:/usr/share/elasticsearch/data\n    environment:\n      - node.name=es03\n      - cluster.name=${CLUSTER_NAME}\n      - cluster.initial_master_nodes=es01,es02,es03\n      - discovery.seed_hosts=es01,es02\n      - bootstrap.memory_lock=true\n      - xpack.security.enabled=true\n      - xpack.security.http.ssl.enabled=true\n      - xpack.security.http.ssl.key=certs/es03/es03.key\n      - xpack.security.http.ssl.certificate=certs/es03/es03.crt\n      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt\n      - xpack.security.http.ssl.verification_mode=certificate\n      - xpack.security.transport.ssl.enabled=true\n      - xpack.security.transport.ssl.key=certs/es03/es03.key\n      - xpack.security.transport.ssl.certificate=certs/es03/es03.crt\n      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt\n      - xpack.security.transport.ssl.verification_mode=certificate\n      - xpack.license.self_generated.type=${LICENSE}\n    mem_limit: ${ES_MEM_LIMIT}\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    healthcheck:\n      test:\n        [\n          \"CMD-SHELL\",\n          \"curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'\",\n        ]\n      interval: 10s\n      timeout: 10s\n      retries: 120\n\n  kibana:\n    depends_on:\n      es01:\n        condition: service_healthy\n      es02:\n        condition: service_healthy\n      es03:\n        condition: service_healthy\n    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}\n    container_name: pfelk-kibana\n    volumes:\n      - certs:/usr/share/kibana/config/certs\n      - kibanadata:/usr/share/kibana/data\n    ports:\n      - ${KIBANA_PORT}:5601\n    environment:\n      - SERVERNAME=kibana\n      - ELASTICSEARCH_HOSTS=https://es01:9200\n      - ELASTICSEARCH_USERNAME=kibana_system\n      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}\n      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt\n    mem_limit: ${KB_MEM_LIMIT}\n    healthcheck:\n      test:\n        [\n          \"CMD-SHELL\",\n          \"curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'\",\n        ]\n      interval: 10s\n      timeout: 10s\n      retries: 120\n\n  logstash:\n    depends_on:\n      es01:\n        condition: service_healthy\n      es02:\n        condition: service_healthy\n      es03:\n        condition: service_healthy\n    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}\n    container_name: pfelk-logstash\n    volumes:\n      - certs:/usr/share/logstash/config/certs\n      - /etc/pfelk/config:/usr/share/logstash/config\n      - /etc/pfelk/conf.d:/etc/pfelk/conf.d:ro,Z\n      - /etc/pfelk/patterns:/etc/pfelk/patterns:ro,Z\n      - /etc/pfelk/databases:/etc/pfelk/databases:ro,Z\n    ports:\n      - 5140:5140/tcp\n      - 5140:5140/udp\n    mem_limit: ${LS_MEM_LIMIT}\n    restart: unless-stopped\n\nvolumes:\n  certs:\n    driver: local\n  esdata01:\n    driver: local\n  esdata02:\n    driver: local\n  esdata03:\n    driver: local\n  kibanadata:\n    driver: local\n"
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "install",
          "type": "tree",
          "content": null
        },
        {
          "name": "license",
          "type": "blob",
          "size": 0.6767578125,
          "content": "   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this Software except in compliance with the License.\n   You may obtain a copy of the License at\n \n       http://www.apache.org/licenses/LICENSE-2.0\n \n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n   Certain third party code is included in this Software. \n   Terms applicable to the third party code are provided in the Notice file\n"
        }
      ]
    }
  ]
}