{
  "metadata": {
    "timestamp": 1736568710519,
    "page": 808,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rfxn/linux-malware-detect",
      "stars": 1213,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ca.def",
          "type": "blob",
          "size": 0.025390625,
          "content": "files/internals/importconf"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 47.0595703125,
          "content": "v1.6.5 | Mar 27 2023:\n[Fix] monitor mode white space detection; issue #354\n[Change] event_log/clamscan_log now record year in timestamp; issue #352\n[Change] -p|--purge will now trim the inotify_log; issue #350\n[New] -E|--dump-report to dump reports to stdout; pr #362\n[Fix] monitor mode will now fail to start if 'ed' is not installed; issue #350\n      inotify_log requires in-place inode pruning to prevent exponential growth\n[Fix] inotify kernel support on debian11 checking only System.map; pr #398\n[Fix] human-readable path not displaying on -a|--scan-all default path scan (/home); #407\n[Change] default scoped scan adjusted from /var/www/html to /var/www to make sure we scope all www content; #404\n[Fix] compare md5 on ignore_sigs between monitor mode cycles and only regenerate signatures on file changes; #397\n[New] add detect_control_panel function to files/internals/functions to determine installed control panel; pr #409\n[New] add get_panel_contacts to files/internals/functions to discover contact emails; pr #409\n[New] add configuration options for From, Subject, Reply-To headers on alert emails; pr #409\n[New] add flag to enable these alerts (requires email_alert to be enabled as well); pr #409\n[New] add internal configuration to set the user alert template location; pr #409\n[New] add a base template that will be used to create emails to control panel contacts; pr #409\n[Change] ambiguous restore error modified to include file name\n[Fix] adjusted ftp.rfxn.com checkout credentials; #390\n[Fix] systemd unit file not copying properly; #371, #413\n[Fix] monitor mode dependency failures on 'ed' not properly logging to be captured by unit file; #395\n[Fix] newer versions of cpulimit explicitly enforce the usage of '--' to define where cpulimit options end; #395\n\nv1.6.4 | Mar 18 2019:\n[New] add quarantine_on_error variable to control quarantine behavior when scanner engines such as ClamAV encounter an error\n[New] add support for slack alerts; pr #240 mostafahussein\n[New] add ability to disable cron via conf.maldet; issue #260 / pr #300 , #304 sporks5000\n[New] add cleaner rule for php.malware.magentocore_ccskim and an alias of as php_malware_hexinject for associated yara rule\n[Change] update cron.daily for ispmanager5; pr #305 yogsottot\n[Change] normalize variable naming of pr #300 , #304\n[Change] validate cron_daily_scan is set; otherwise default to 1\n[Change] update importconf for cron_daily_scan block\n[Change] don't need \"find\" if given a file list; pr# 303 sporks5000\n[Change] rename ambiguous internal variables related to user signatures\n[Change] removed clamscan_return code capture from piped logic of clam(d)scan execution; now always capture return code, even on good exits\n[Change] scan results now explicitly exclude any occurrences of files related to 'no reply from clamd' errors\n[Change] add backward compatibility for renamed internals.conf variables\n[Change] removed legacy $verbose tagging at the end of eout() calls\n[Change] modified cleaner rules to set their own PATH scoping\n[Change] file_stat() has been renamed get_filestat to match associated quar_get_filestat function naming\n[Change] get_file_stat() will now grab md5 hash of files to avoid superfluous md5sum calls\n[Change] added inotify elapsed run time to scan report output\n[Change] adjust '-e|--report' output for etime value and spacing\n[Change] force email_ignore_clean=1 to stop the most common email requested issue\n[Fix] hitname not logging to quarantine.hist on manual quarantine run against scanid; issue #319\n[Fix] typo in PR #300; missing '; then' on elif\n[Fix] set default_monitor_mode to resolve issue #311 systemd service passing $default_monitor_mode as a literal string to the service\n[Fix] sad mail/sendmail validation logic, fix issue #316\n[Fix] normalized scan start time output in scan reports when inotify monitoring is used\n[Fix] scan report list summary to always display an etime value, even if null\n[Fix] ad-hoc clean calls from clean_hitlist() was not executing sigignore and gensigs functions causing clean tasks to fail due to missing variables; issue #203\n[Fix] adjust semantics of comma and spaced variables being passed to '-co|--config-option'; pr #298 sporks5000\n[Fix] modified quarantine_hits to force disable if clamdscan explicitly encounters a 'no reply from clamd' fatal error\n[Fix] modified install.sh 'ps' execution to be BSD compliant\n[Fix] clean function was not properly stripping {CAV} and {YARA} prefixes from signature names when executing cleaner rules\n[Fix] clean function was not properly handling signature names with both underscores and periods\n[Fix] refactored clean_hitlist() & clean() functions to resolve pathing errors when cleaning previous session hits; issue #203\n[Fix] ignore_inotify file exist/empty file negative match; issue #330\n[Fix] operator issue cron.daily #331\n[Fix] install.sh $ver required major numbering; renamed to ver_major so that session preservation semantics continue to work\n\nv1.6.3 | Sep 01 2018:\n[Fix] ensure clamscan_max_filesize is always set; pr #296\n[Fix] remove escaping from inotifywait exclude regexp; pr #246 issue #205\n[Fix] always set a value for monitor mode systemd unit; pr #257\n[Fix] quar_get_filestat variable collisions during restore operations\n[Fix] quarantine files could be prematurely deleted, during 'cron.daily/maldet', on distributions where the 'mv' command\n      preserves origin file mtime; call 'touch' on quarantined files to set current mtime post-move to quarantine path; issue #294\n[Fix] update tlog inotify tracking file before trimming to prevent rescan loop; pr #292\n[Fix] revert pruning empty lines from signature files to 1.6.1 behavior\n[Fix] usage semantics of cd'ing to a wildcard path on newer versions of Bash were causing version updates to fail; we now explicitly\n      'cd' to maldetect-${upstreamver}\n[Fix] spelling corrections; pr# 269\n[Change] update\timportconf text to reflect monitor mode\ton systemd behavior\n[Change] on restore actions, reset restored files to original mtime value\n[Change] increase default remote_uri timeout from 10s to 30s\n[Change] increase default remote_uri tries from 3 to 4\n[Change] added base_domain variable to internals.conf\n[Change] cleanup .tgz/.md5 files on version updates mid-flight to prevent potential 'cd: too many arguments' errors\n[Change] trim inotify log from beginning instead of end\tof file; pr #292\n[Change] user mode scanning no longer scans system temporary paths; issue #283\n[Change] improve regexp of scan start time values for '-e|--list' output\n[Change] added '--beta' flag to '-d|--update-ver' to support pulling down beta release of LMD\n[Change] stage v1.6.3 release; update version and date stamps\n[Kudos] Thank you to those that contributed pull requests and issues during this release cycle. PR contributions from:\n        sporks5000\n        jsoref\n        Joshua-Snapp\n        mkubenka\n        jkronza\n        AnnopAlias\n\nv1.6.2 | Jul 13 2017:\n[Fix] signature updates using get_remote_file() would incorrect write temporary update files into /; issue #242\n[Fix] added 'which curl' and 'which wget' for variable scoping of binary locations into internals.conf; issue #237\n[New] added support to send email through 'sendmail' binary as alternative to 'mail'; pr #241 & issue #238\n\nv1.6.1 | May 28 2017:\n[New] added conf.maldet option cron_prune_days to configure cron.daily pruning max age of quar/sess/tmp data; issue #197\n[New] added curl support, as new default, into get_remote_file; wget support is preserved secondary to curl; issue #200\n[New] added --force option on -u|--update-sigs\n[New] added --force option on -d|--update-ver\n[New] added empty lines cleaner for runtime signatures and sorting of hdb for better performance; pr #223\n[Change] modified default prune interval of quarantine/sess/tmp data from older than 7d to 21d\n[Change] set email alerts to disabled when -z $mail / issue verbose warning on CLI; issue #220\n[Change] scan_export_filelist feature had no real need to be limited to just cron runs;\n         modified so when set, it will export find results for all '-r|--recent' scans\n[Change] updated help and README to reflect '--force' option on '-u|--update-sigs' and '-d|--update-ver'\n[Change] post-change to get_remote_file(); signature version file was truncating with tmp file for maldet-clean\n[Change] replaced all calls of wget with get_remote_file()\n[Change] refactored get_remote_file() to be more generic / not depend on wget\n[Change] increased default values for wget --timeout from 5 to 10 seconds\n[Change] replace egrep with posix 'grep -E'; direct invocation of egrep/fgrep is deprecated; pr #214\n[Fix] modified sourcing of conf files and order of precedence in maldâ€¦et.sh init script to properly\n      treat default_monitor_mode being defined in conf.maldet; issue #224\n[Fix] escape quotes within eval md5sum command as fix for issues #230 and #216\n[Fix] test condition for systemd was generating unary errors on older versions of bash; pr #36\n[Fix] systemd based systems were skipping addition of sysconfig entry; pr #36\n[Fix] install.sh find operation to prune old install backups was generating error when no previous installs existed\n[Fix] wgetopt was single quoted making the variables inside of it strings, set double quotes\n[Fix] potential out of memory issue while scanning a large set of files on native LMD scanner; pr #223\n[Fix] -f option issue with relative path message; pr #223\n[Fix] issue with checkout of relative file path for non root user; pr #223\n\nv1.6 | Mar 17 2017:\n[New] added curated set of YARA webshell & malware signatures for use with ClamAV >= 0.99b\n[New] added cleaner rule 'VisitorTracker.Mob'\n[New] added cleaner rule 'js.inject.fakejquery02'\n[New] added support for 'froxlor' to cron.daily execution\n[New] added support for 'vestacp' to cron.daily execution\n[New] added support for 'ispconfig3' to cron.daily execution\n[New] added support for 'DTC' to cron.daily execution\n[New] added '$confpath', '$varlibpath' and '$libpath' for FHS separation\n[New] moved compatibility (legacy) variables out of internals.conf into compat.conf\n[New] added support to pull configuration variables for cron executions from 'sysconfig/maldet'\n[New] added Debian derivatives sysconfig and initd compatibility for function sourcing and subsys locking\n[New] added LSB tags to init script\n[New] added capability of moving public scan path with $userbasedir variable\n[New] manpage added and setup default with install.sh execution\n[New] added support for clamd running as an unprivileged user through clamdscan w/ --fdpass options\n[New] added --wget-proxy CLI option for http(s) proxy support\n[New] added clam(d)scan_extraopts variables to internals.conf for appending extra CLI options on clam(d)scan;\n      these values can also be defined in sysconfig or cron/exec based config files and on CLI\n[New] sysconfig support through '/etc/sysconfig/maldet'  or '/etc/default/maldet', system dependant, to\n      allow easier configuration overrides; all conf.maldet and internals.conf variables supported\n[Change] file stat calls replaced with function file_stat\n[Change] stat calls are now (Free|Net)BSD compatible through file_stat function\n[Change] report listing, '-e|--report list', now displays scan run time\n[Change] scan reports and cli outputs once again display simplified path definitions instead of expanded paths\n[Change] unified all clamav selection logic for data paths, running clamd processes, clam(d)scan CLI options etc...\n         into a single function, clamselector(); this will make clam behavior more predictable across all functions\n[Change] added subdomains path for ISPConfig to cron.daily\n[Change] corrected variable naming semantics for import_*_(md5|hex)_url parameters\n[Change] monitor mode now identifies inotifywait processes based on a string pattern unique to maldet\n         to avoid conflicts with any other inotifywait processes\n[Change] added wget_proxy variable for us in sysconfig and conf.maldet options\n[Change] YARA-LMD curated signature set will now be included with signature updates\n[Change] differentiate signature hits for YARA with '{YARA}' signame prefix\n[Change] inotify_docroot now accepts comma or white spaced list of paths under user root to monitor\n[Change] removed absolute path usage from 'pidof'\n[Change] drop unneeded usage of shebang from sourced configuration files\n[Change] modified shebang usage with 'env' prefix for portability\n[Change] temporary path usage now consistently using $tmpdir value\n[Change] scan paths must now be absolute paths\n[Change] modified init script stop function for Debian derivatives\n[Change] improved history tracking with proper date stamps, more verbose quarantine history logging and storing\n         into more explicitly named files '$sessdir/hits.hist' and '$sessdir/quarantine.hist'\n[Change] added scan_days value to cron.daily allowing customization of the date range scanned by daily cron\n[Change] replaced remaining absolute calls to sigdirs with '$sigdir'\n[Change] added Debian derivatives support for MONITOR_MODE checks\n[Change] updated cron.daily to provide for a custom execution file and modified custom config file into\n         'cron/conf.maldet.cron' and 'cron/custom.cron'\n[Change] install.sh cased variable on find execution\n[Change] symlink hookscan.sh to modsec.sh for pre-v1.5 compat\n[Change] added '^/tmp/clamav-.*' to ignored paths where ownership matches clamd process\n[Change] preserve custom cron configuration files on upgrade\n[Change] hookscan.sh was calling LMD using legacy, deprecated, '--config-option' options\n[Change] normalize installation path variable between LMD proper and installation scripts\n[Change] reduced redundant path definitions\n[Change] added test for main.cvd and main.cld in determining clamav signature paths\n[Change] README changes to reflect new cron customization setup\n[Change] added attempting passive ftp when active fails for malware checkout uploads\n[Change] .ca.def configuration template renamed importconf and now copied over during installation to\n         'internals/importconf'\n[Change] new versions of 'chown' don't support use of . (dot) to separate user and group\n[Change] find option regextype is now dropped on FreeBSD for compatibility\n[Change] scan.tpl reporting template handles column spacing on filenames with spaces better\n[Change] CLI usage semantics of --include-regex and --exclude-regex now consistently passing to 'find' command\n[Change] moved all internal field separator line break modifications to lbreakifs()\n[Change] quarantine .info file is now field separated with colon symbol (:)\n[Change] quarantine .info file value ordering has been modified\n         # owner:group:mode:size(b):md5:atime(epoch):mtime(epoch):ctime(epoch):file(path)\n[Change] record_hits() now writes file mode and file times (a|m|c) into hits history file\n[Change] 'eval' is now used as a prefix on the 'find' command to better handle the complex set of options passed to 'find'\n         and avoid globbing, splitting and other bash'esque semantic issues\n[Change] modified mkpubpaths cronjob to execute every 5 minutes instead of 10\n[Change] public mode scanning errors are now more verbose\n[Change] updated README to reflect required modsec >=2.9 variable 'SecTmpSaveUploadedFiles'\n         for upload scanning\n[Change] hookscan.sh (modsec.sh) now checks for variable override file at conf.maldet.hookscan\n[Change] added use of sed flag -E for FreeBSD compatibility with GNU sed usage\n[Change] clamscan will now respect scan_max_filesize value instead of hardcoded 5M\n[Change] default scan_max_filesize increased from 768k to 2048k\n[Change] clamscan max-scansize for archive depth set as scan_max_filesize*2\n[Fix] improved special character argument escaping for -a|-r options that could have caused arbitrary command\n      executions in environments where LMD was allowed to be called by non-root users and/or set-uid/gid wrappers\n[Fix] FreeBSD calls to 'md5 -q' were being incorrectly escaped causing file names to never pass and return valid\n      md5 hash string; corrected by preprending 'eval' to the md5 command callouts.\n[Fix] corrected typo with import_* variables causing configuration imports to fail\n[Fix] suppress eout() output for certain import_*() and get_remote_file() calls; this was causing\n      false-positive hits for modsec integration\n[Fix] install.sh may not have preserved certain variables on upgrade\n[Fix] clamdscan was running as a non-root user, would generate lstat errors for all file find results\n      leading to potential false positive hit/quarantine\n[Fix] the permissions of the $tmpdir path can cause clamd when running as a non-root user to fail on\n      startup due as a result of lstat errors on the custom user signature files stored under $tmpdir\n[Fix] clamd.conf configurations containing Follow(File|Directory)Symlinks set to false results in\n      the rfxn.*/lmd.user.* links causing clamd startup failures\n[Fix] suppress error output to cli for customer user signature files when they do not exist\n[Fix] uninstall.sh now cleans up signature files from clamav data paths\n[Fix] corrected invalid matching against clamdscan binary when clamd was running as non-root user\n[Fix] inotifywait on Ubuntu12 doesn't support the '-o' and '-d' option; modified to send stdout to logfile\n      for better compatibility\n[Fix] conditionally test for vz container and disable use of ionice which is not support in vz containers\n[Fix] '-k|--kill-monitor' would under certain circumstances leave zombie processes\n[Fix] monitor_cycle() could lead to memory depletion due to infinite loop cycle calls\n[Fix] uninstall.sh was not shutting off monitor mode on uninstall\n[Fix] legacy variable suppress_cleanhit references updated to email_ignore_clean\n[Fix] email alerting broke during an iterative update due to order of precedence change of how configuration\n      files were loaded and compatibility (legacy) variables being set before main conf.maldet was loaded;\n      caused by FHS refactoring\n[Fix] installation upgrade configuration importer was not properly executing after FHS refactoring during an\n      iterative update\n[Fix] issue #167 certain variables not being preserved on importconf execution, updated 'compat.conf'\n[Fix] custom signature runtime files could grow exponentially in monitor mode\n[Fix] make '--mkpubpaths' option cross-platform compatible (debian, rh, bsd)\n[Fix] replaced usage of 'awk' on file name sensitive variables with 'cut' and/or better scoped field separator for awk\n[Fix] double quote wrapped file name variables properly on restore*() functions\n[Fix] quarantine .info files were not properly recording source file atime,mtime,ctime values manual quarantine calls\n[Fix] user supplied paths to CLI are now better handled if they contain special characters\n[Fix] multiple user supplied paths to CLI would generate an error if the first path contained a space and\n      subsequent paths did not\n[Fix] commit c8a1279 introduced bug where clamav could be fed zero sized signature files resulting in fatal exit\n[Fix] public mode scanning will now properly error if mkpubpaths paths do not exist\n[Fix] hookscan.sh (modsec.sh) will now default to not using clamav if clamd is not running\n[Fix] though functional, public mode scanning would result in permission errors on console due to pathing issues with\n      history tracking files\n[Fix] clam(d)scan was not respecting values in 'ignore_sigs' file, this has been corrected for both CLI and monitor mode\n[Fix] addition of prefixing eval to find command required certain values to be escaped differently for proper function\n      of '-r|--recent'\n[Fix] util-linux 2.23 supports 'column' command with '-o' but earlier versions do not, resulting in scan reports\n      generating empty hit lists\n[Fix] importconf was setting invalid vars for custom signature imports; correct variables are import_custsigs_md5_url\n      and import_custsigs_hex_url\n[Fix] multiplying maldet monitor processes due to 'ps' command expansion under parent bash process on CentOS6\n[Fix] added default installation path to ignore_inotify to prevent monitor looping when '/' is scoped into\n      monitoring mode; results in notify log filling disk space\n[Fix] importconf was not importing the value for import_config_url\n\nv1.5 | Sep 19 2015:\n[New] added -f|--file-list CLI option to allow user supplied run-time file list for scanning\n[New] added -i|--include-regex CLI option for run-time path/file inclusion based on posix-egrep regular expressions\n[New] added -x|--exclude-regex CLI option for run-time path/file exclusion based on posix-egrep regular expressions\n[New] added support for custom md5/hex signatures with preservation across signature and version updates, files located at:\n      sigs/custom.md5.dat\n      sigs/custom.hex.dat\n[New] custom signatures perform run-time conversion into clamscan compatible format on systems that use clamscan engine\n[New] new md5 signature format (md5v2) now includes file size that an md5 hash was derived from in format of:\n      hash:filesize:signame\n[New] added support for custom cleaner rules to be executed on clean events, file name format of\n      \"clean/custom.signame\"; rules are preserved across signature and version updates\n[New] added support for clam(d) engine when running in inotify monitoring mode\n[New] added URL import feature for global configuration overrides using import_config_url variable in conf.maldet\n[New] added URL import feature for user custom signatures using import_custsigs_md5_url & import_custsigs_hex_url variables in conf.maldet\n[New] added set of defined exit codes for errored exits(1), successful runs with hits(2), successful runs with no hits(0)\n[New] added uninstall.sh script to maldetect installation path\n[New] added md5 hash verification of signature and version update downloads\n[New] added scan_cpunice option to control CPU priority value of all scan operations such as find, clamscan etc.. (default 19)\n[New] added scan_ionice option to control IO priority value of all scan operations such as find, clamscan etc.. (default 6)\n[New] added autoupdate_signatures/autoupdate_version options to control daily cron based signature/version updates\n[New] added autoupdate_version_hashed option to control validating hash of maldet executable against upstream version\n[New] added support for virtualmin to cron.daily scans\n[New] added support for ispmanager to cron.daily scans\n[New] added support/detection of clamdscan to leverage memory preloaded signatures and multi-threaded scanning\n[New] added scan_find_timeout option which controls the maximum execution time, in seconds, for the find command to generate a file list\n[New] added scan_ignore_root option to exclude root owned files from scans\n[New] added scan_ignore_user and scan_ignore_group options which allow for the exclusion of specified user and group names from scans\n[New] added scan_export_filelist option allowing for daily scan of recent added/modified files to be exported to a static path\n[New] added sourcing of of conf.maldet.cron into the cron.daily task which allows for cron specific configurations\n[New] added inotify_reloadtime which controls the time at which inotify watcher will reload LMD configuration data\n[New] added support for comma space (,) path list on CLI\n[New] added reload option for monitor mode to invoke forced configuration reload (-m|--monitor reload)\n[New] added maldet init script for monitor mode with $default_monitor_mode conf.maldet variable\n[New] added usage of /etc/sysconfig/maldet for configuration of monitor mode init/systemd options, overrides conf.maldet\n[New] added support for 'cpulimit' usage, when installed, through scan_cpulimit and inotify_cpulimit configuration variables\n[Change] increased randomness of quarantine temporary file names\n[Change] added atime,mtime,ctime since epoch values into quarantine info files\n[Change] monitor mode now supports all existing ignore options as well as enforcing minimum/maximum file sizes\n[Change] monitor mode now supports hot configuration reloads by touching reload_monitor under installation path (e.g: touch /usr/local/maldetect/monitor_reload)\n[Change] modsec.sh has been renamed to hookscan.sh and more generic hook based scanning conventions set\n[Change] hookscan.sh will now autodetect if clamdscan is running and perform scans through clamd when appropriate\n[Change] hookscan.sh will now provide more verbose output on malware hit events\n[Change] hookscan.sh now explicitly disables scanning of temporary paths, ensuring only requested file/paths are scanned\n[Change] install.sh now gracefully handles upgrades when monitoring mode is enabled by restarting monitor mode\n[Change] improved handling of single file scans which should now behave as expected\n[Change] explicitly removed the inclusion of tmpdir paths during single file scans\n[Change] automagically remove empty lines from ignore files\n[Change] reordered configuration file, expanded on variable descriptions, overall attempt to simplify/streamline conf.maldet\n[Change] installer symlinks LMD signatures into known/existing ClamAV paths to ensure signatures are loaded into memory by clamd\n[Change] installer issues SIGUSR2 to any running clamd processes to force reload of signature databases\n[Change] cron.daily signature updates issue SIGUSR2 to any running clamd processes to force reload of signature databases\n[Change] cron.daily signature/version updates sleep random interval 1-999 secs before contacting upstream rfxn.com servers to reduce cdn load\n[Change] modified clamscan database path checks to support cPanel >=11.40 RPM clamAV connector RPM's\n[Change] modified location of statistical data files from tmpdir to sessdir making tmpdir a stateless path that can be purged at anytime\n[Change] when clamscan engine is enabled scan_max_filesize value is now set dynamically based on the largest known file in the md5v2 signature set\n[Change] modified e-mail based alerts to source from an e-mail template file at .email.template\n[Change] clamscan execution command logged to logs/clamscan_log to make debugging clamscan errors easier\n[Change] clamscan stderr/stdout output now pipes to logs/clamscan_log and if clamscan returns an error code (2), flag with an appropriate\n         error message to check the clamscan_log file for more details\n[Change] ambiguous variables renamed for better consistency and more logical naming conventions, documented in CHANGELOG.VARIABLES\n[Change] modified sessionid values to derive from YYMMDD instead of MMDDYY and adjusted human readable report START/END date to include year value\n[Change] modified view_report output to sort output on unix time of scan start times\n[Change] signature updates now download as a single file tgz to reduce bandwidth usage and request load on upstream cdn\n[Change] modified signature update function for additional error checking and better handling of zero sized signature downloads\n[Change] modified version update function for additional error checking and better handling of zero sized file downloads\n[Change] modified '-e|--report list' output include total files scanned, hits and cleaned results, reversed output order and\n         consistent column spacing (column -t)\n[Change] moved tlog executable out of inotify/ path, changed inotify_log path to logs/, removed inotify directory\n[Change] created logs/ path, moved event_log path to logs/\n[Change] modified previous wget timeout values of 3s timeout & 3 retries to 5s timeout & 3 retries\n[Change] wget timeout and retry attempts are now configurable through internals.conf wget_timeout & wget_retries variables\n[Change] removed file type check on native LMD stage2 hex scanner which was part of legacy code and no longer needed\n[Change] removed verbose progressive scan output for native LMD scanner as performance penalty was unreasonable\n[Change] replaced usage of tmpwatch with find in cron.daily for temporary path pruning\n[Change] removed internals.conf from version check hashing for installation version updates (-d|--update-ver)\n[Change] cron.daily now tests for directadmin and scans appropriate user domain paths\n[Change] directory checkout uploads limited to maximum of 50 files\n[Change] added tmpdir_paths option to explicitly scan known temporary (world-write) paths on all scan types\n[Change] updated example ModSecurity rule in README file for compatibility with ModSec 2.7 which now requires\n         every rule, even hooks, to have a rule ID\n[Change] -r|--recent scan now uses mtime and ctime, instead of just mtime, to find recently changed/modified files\n[Change] LMD v1.4.2+ will now use the new md5 v2 signature format and make direct requests on signature\n         updates to the appropriate upstream file (md5v2.dat); old format, md5 v1, preserved in signature\n         releases for compatibility of pre-1.4.2 releases\n[Change] modified hexfifo.pl & hexstring.pl to accept user supplied value for path to hex signature file\n[Change] install.sh now deletes LMD backup installation copies older than 30days\n[Change] references to www.rfxn.com for remote signature and version updates now query cdn.rfxn.com\n[Change] cleaner rules are now executable scripts in which infected files are passed as an argument ($1)\n         allowing for a diverse set of cleaner rule options apart from the previous sed only setup\n[Change] converted current cleaner rules to new executable scripts format\n[Change] checkout uploads now store malware in the filename format of (hostid is an anonymous md5 identifier):\n         $hostid.$RANDOM.$filename.[ascii|bin]\n[Change] inotifywait from inotify-tools is no longer packaged with LMD, it should be downloaded in binary or\n         source form from:\n         https://github.com/rvoicilas/inotify-tools/wiki/\n         binary versions are also available from dag repo at:\n         http://pkgs.repoforge.org/inotify-tools/\n[Change] internals.conf will now attempt to detect the path to inotifywait from $PATH\n[Change] inotify max_user_watches was static set to 128, now configurable with inotify_user_watches\n[Change] inotify values for max_user_instances|watches will first be checked and only modified if the existing\n         values are lower than what maldet requires\n[Change] modified error output for missing inotifywait to display URL to inotify-tools github page\n[Change] modified default scan_hexdepth value to 65k as a result of improved scan efficiency in native scanner engine\n[Change] added backwards compatibility for all pre-v1.5 configuration options however they should be considered deprecated and will be removed in the future\n[Change] expanded on EICAR test signature support for native LMD scanner engine to better facilitate testing of functional installed signature set\n[Change] added scan/find elapsed execution time values to scan report and cli output\n[Change] relocated internal files into $inspath/internals/\n[Change] created generic clean_exit() function to handle file cleanups on all fatal exist and replaced many random rm -f calls with it\n[Change] moved all pre/post actions into a prerun() and postrun() functions\n[Change] moved statistical logging to record_hits() function\n[Change] quarantine() function borrows stat file data from record_hits to reduce calls to stat\n[Change] more extensible cleaner rules with additional input arguments:\n         $1 file path, $2 signame, $3 owner.group, $4 file_chmod, $5 file_size, $6 file_md5\n[Change] added additional fields file_size and file_md5 to quarantine info file\n[Change] added caching support for import_config_url with import_config_expire to control expiry interval\n[Change] stricter handling of variable definitions which contain dynamic variable values\n[Change] modified daily cron recent range from 2 to 1 as mtime/ctime values are n*24h, as such value of 1 is equal to two days\n[Change] modified daily cron to use comma spaced path lists instead of multiple maldet executions\n[Change] changed quarantine malware cleaning default value to 0\n[Change] use of clamav engine output statement now more verbose\n[Change] previously LMD only linked clamav signatures into clamav data paths on install, this is now done after each signature update\n[Change] maldet.sh init script exites code 1 on status check when maldet monitor mode is not found running\n[Change] monitor mode now invokes every 15 seconds, legacy installations will preserve 30 second cycle timing\n[Change] modified shebang to use env bash for portability\n[Fix] when clamdscan was running as a non-root user, would generate lstat errors for all file find results leading\n      to potential false positive hits/quarantines\n[Fix] the permissions of the $tmpdir path can cause clamd when running as a non-root user to fail on startup due\n      as a result of lstat errors on the custom user signature files stored under $tmpdir\n[Fix] clamd.conf configurations containing FollowDirectorySymlinks/FollowFileSymlinks set to false results in the\n      rfxn.* and lmd.user.* links causing clamd startup failures; corrected by updating clamav_linksigs() to copy\n      signatures into clamav data paths instead of linking them\n[Fix] inotify monitor execution now properly passes ionice configuration value\n[Fix] monitor_paths was not being preserved on version updates\n[Fix] record_hit() was not being invoked outside of clamscan based events\n[Fix] monitor.pid file would potentially have an incorrect pid written to it on each execution of monitor_check()\n[Fix] quote syntax error in scan.etpl\n[Fix] help output for -k|--kill-monitor incorrectly referred to --kill instead of --kill-monitor\n[Fix] inotify_user_instances was defined in internals.conf incorrectly as inotify_user_watches\n[Fix] tlog executable was not being set +x during installation\n[Fix] install.sh was attempt to create default event_log while the parent directory did not yet exist\n[Fix] invalid find expression was causing find to return directory paths on recent scans\n[Fix] OSTYPE env checking was not properly matching on all FreeBSD versions\n[Fix] renamed alert() to genalert() to avoid builtin function conflict on Ubuntu\n[Fix] corrected -r|--recent scan mode trap on SIGINT (CTRL+C) not calling trap_exit() for cleanup actions\n[Fix] modified native LMD scanner to better leverage bash internal field separator for handling of paths with spaces\n[Fix] modified all calls to system executables to use paths derived from $PATH\n[Fix] suppressed ignore signature count being displayed when calling with --modsec\n[Fix] set modsec.sh to use /bin/bash as interpreter instead of /bin/sh for compatibility\n[Fix] removed MAILTO & SHELL variables from crons which were causing crond 'bad minute' errors on some systems\n[Fix] quoted extension values from ignore_file_ext input to provide consistent behavior\n[Fix] added trailing slash '/' to all cron.daily scan (find) paths to properly handle symlinked paths\n[Fix] install.sh now links LMD clamav signatures into all clamav data paths it finds instead of just the first\n[Fix] clean() function was improperly exiting after first file hit clean attempt and ignoring all other hits\n[Fix] set interpreter in uninstall.sh to /bin/bash instead of /bin/sh for better compatibility\n[Fix] modified psa scan paths to pull in top level and sub domain content\n[Fix] corrected invalid matching against clamdscan binary when clamd was not available\n\nv1.4.2 | Feb 25th 2013:\n[New] detection and alerting of libkeyutils root compromised libraries\n[Change] cron.daily now tests for directadmin and scans appropriate user domain paths\n[Change] removed temporary paths /var/tmp, /tmp, and /dev/shm from cron.daily which are\n         now added explicitly to all scanning paths / modes\n\nv1.4.1 | Nov 20th 2011:\n[Change] rfxn.com ftp server moved and anonymous FTP checkout uploads changed\n[Change] modsec.sh force sets clamav_scan=0 as native LMD scanner engine is faster on\n         single / small file sets\n[Fix] correct plesk if statement added to to daily scan cronjob\n[New] added -U|--user to force execution under defined user, ideal for restoring user\n      quarantined data or viewing user reports\n      e.g: maldet --user nobody --report\n      e.g: maldet --user nobody --restore 050910-1534.21135\n[New] added public_scan variable to conf.maldet to control enabling of public mode\n      scanning, disabled by default\n[New] added cron.d/maldet_pub cronjob to populate public user paths when public mode\n      scanning is enabled; does nothing when disabled\n[Change] README file updated, had fallen behind on CLI usage help details\n[New] added -co|--config-option for defining conf.maldet options on the CLI\n[Fix] README, COPYING.GPL and CHANGELOG are now properly copied into the installation path\n[Fix] version header in config import template was incorrect\n[Fix] value of email_ignore_clean is now properly preserved on version upgrades\n[New] added modsec.sh to allow for easy calls from mod_security2 inspectFile hook\n[Change] autodetect executing uid and define public mode scanning variables\n[New] added public mode scanning which redefines tmpdir, sessdir, quardir to pub/username/\n      directory tree for user initiated (non-root) scans\n[Change] installation permissions changed to 644/755 for public mode support\n[Change] revised (gz)base64 rules to be more specific thus reducing false positives\n[Fix] tlog was set to use /bin/sh which breaks usage on systems with default shells other\n      than bash\n\nv1.4.0 | Apr 17th 2011:\n[Change] default editor now inherited from $EDITOR\n[New] clamav signatures update through sigup(), -u|--update\n[New] cleaner rules update through sigup(), -u|--update\n[Change] added error checking for missing or corrupted signature files\n[Fix] monitor_cycle() now properly trims inotify_log\n[Fix] version dates in CHANGELOG for 1.3.8 -> current had 2010 instead of 2012\n[New] added -b|--background flag to execute scans in background\n[Change] cron.daily now uses the -b flag for background scanning\n[Change] wget calls now use the --referer option to broadcast local LMD version\n[Fix] replaced stray references of absolute install path with the install path variable\n[New] stage2 (HEX) scanner now supports use of named pipe (FIFO) for passing file hex contents,\n      enabled by default, provides better performance with larger depth analysis of files\n[New] added hex_fifo_scan & hex_fifo_depth variables to conf.maldet for fifo hex scanning\n[Change] -c|--checkout now supports directory paths\n[Change] -r|--scan-recent and -a|--scan-all now supports single file scans\n[Fix] replaced absolute path to nice on inotifywait exec to which located variable value\n[Change] added error checking for all internally required binaries e.g: wget, find, od etc...\n[New] detection of ClamAV clamscan binary and usage as default scanner engine; when detected,\n      clamscan is executed on scan file lists using rfxn.com LMD clamav-compat sigs\n[Change] added OSTYPE check for differentiating md5 sum binaries on linux and FreeBSD\n[Change] added OSTYPE check on monitor mode to disable on FreeBSD, pending kqueue alternative\n         to inotifywait\n[Fix] revised od flags for FreeBSD support\n[Fix] ignore_inotify now properly interprets extended posix regexp as ignore parameters\n[Change] added sample ignore values into ignore_inotify along with sane defaults to\n         ignore common noisy files\n[New] added statistical analysis for string length to identify threats based on the longest\n      uninterrupted string within files, common of obfuscated code (e.g: base64, gzip etc...)\n[New] added string_length_scan & string_length variables to conf.maldet for strlength scanning\n[Fix] ignore_file_ext has been readded and now correctly ignores files based on extension\n[Fix] replaced absolute path to mail with which located variable value\n[Fix] lmdup() now properly errors out when rfxn.com web server is offline\n[New] added clamav_scan variable to conf.maldet to toggle clamscan detection\n[New] Full compatibility under the following distros has been verified :)\n        - FreeBSD 9.0-CURRENT\n        - RHEL/CentOS 5.6\n        - RHEL 6\n        - Fedora Core 14\n        - OpenSuse 11.4\n        - Suse Linux Enterprise Server 11 SP1\n        - Ubuntu Desktop/Server 10.10\n        - Debian 6.0.1a\n[Change] updated README file for new features & vars, sample ignore usage, revised features\n         and updated cymru hash statistics\n[Fix] relaxed grep for inotify sysfunctions to just inotify_ on System.map file\n[New] can now pass list to -e|--report to view all available scan reports\n      e.g: maldet --report list\n[New] can now pass an e-mail address to -e|--report to email a specific report\n      e.g: maldet --report SCANID user@domain.com\n[New] added email_ignore_clean variable to suppress alerts where all hits are cleaned\n\nv1.3.9 | Mar 16th 2011:\n[Fix] ignore files are now properly imported on version updates\n[Change] cron.daily now checks for version updates\n[Fix] hexdepth greater than 65Kb caused an 'argument list too long' error with hexstring.pl\n      which would fail-clean any malware on hex checks\n[Change] default hex depth increased to 61440 as there was an increasing margin of error on\n         missing threats due to them falling outside the default hexdepth; will add offset\n         option to signatures in the near future\n[Change] updated cymru hash statistics in README file\n\nv1.3.8 | Jan 30th 2011:\n[Fix] revised inotify tracking log file to properly rotate instead of growing indefinitely\n\nv1.3.7 | Nov 27th 2010:\n[Fix] package ownership at some point got set to uid 501 instead of root\n[Fix] daily cronjob now checks ps output for inotifywait proc instead of pidof\n[Fix] monitor mode users would exit prematurely if a user home path did not exist\n[Fix] a file hijacking race condition existed with quarantine mode restore function\n[Fix] inotify max_user_instances value was being set to a value that would cause inotifywait\n      to fail\n\nv1.3.6 | May 21st 2010:\n[Fix] restore option will now handle session based restores for quarantines that\n      were manually invoked with -q|--quar SCANID\n[Fix] session data gets recreated if it disappears during scan\n\nv1.3.5 | May 18th 2010:\n[Fix] tlog now handles data that logged between 0bytes and first wake cycle\n[Fix] monitor_check now properly handles CREATE,ISDIR events\n[Change] --alert-daily|weekly alerts have been changed similar to manual alerts\n[Fix] cleaner was not properly running on monitor_check calls to scan files\n[Fix] quar_suspend was not properly running on monitor_check calls to quar()\n[Change] monitor tracker files now pass through trim_log to avoid oversizing\n[Fix] monitor_check now properly handles path names with spaces\n[Fix] monitor_check was throwing nx file/directory error for monitor.pid\n[Fix] older bash versions were having trouble with the [[ =~ ]] regexp search\n[Change] set all script files from shebang/bin/sh to shebang/bin/bash\n[Change] --alert-daily|weekly will now only send alerts if hits were found\n[New] -d|--update-ver now compares file hashes to determine update status\n[Fix] suspend events were not properly being added to monitor alerts\n[Change] all alerts have had spacing changes to make them more readable\n[Fix] signature names now properly list for daily|weekly alerts hit list\n[Fix] monitor_check will now recursive monitor newly created directories\n[New] monitor daily|weekly alerts now save as a pseudo scan report with SCANID\n[Fix] monitor reports now generate properly when quar_hits=0\n\nv1.3.4 | May 16th 2010:\n[Fix] cleaner function was not properly executing under certain conditions\n[Change] additional error checking/output added to the cleaner function\n[Change] default status output of scans changed for better performance\n[New] added ignore_inotify for ignoring paths from the monitor service\n[Change] updated ignore section of README\n[Fix] backreference errors kicking from scan_stage1 function\n[New] -d|--update-ver option added to update installed version from rfxn.com\n[Change] updated short and long usage output for update-ver usage\n[Fix] -k|--kill-monitor now properly kills only the inotifywait/monitor pid's\n[Fix] monitor_cycle function now correctly stores its pid in the pidfile\n[Fix] files with multiple events in the same waking cycle are only scanned once\n[Change] install.sh now symlinks maldet executable to /usr/local/sbin/lmd\n\nv1.3.3 | May 15th 2010:\n[Fix] quarantined files were not properly dropping owner\n[New] signature based, rule driven, cleaner component added\n[New] base64.inject cleaner rule\n[New] gzbase64.inject cleaner rule\n[New] -n|--clean SCANID option added to batch clean scan all files from a scan\n[Fix] made default install file/path permissions more strict (750/640)\n[New] install.sh now preserves conf.maldet settings\n[New] install.sh now links backups of old installation to INSTALL_PATH.last\n[Fix] install.sh now properly imports session data from previous install\n[New] -s|--restore can now take a SCANID to batch restore all files from a scan\n[Change] improved the layout of conf.maldet; more scan options and commenting\n[New] added quar_susp_minuid option for suspend user minimum user id\n[Fix] inotify monitor now properly acts on MODIFY,MOVE_TO,MOVE_FROM states\n[Change] inotify monitor now can take a list of paths or file for path input\n[Change] inotify monitor now has no default use, must specify USER|FILE|PATHS\n[Change] revised short and long usage output for new options/usage changes\n[Change] inotify monitor now spawns only one process for all monitored paths\n[Change] inotify monitor sets max_user_instances to processors*2\n[Change] inotify monitor sets max_user_watches to inotify_base_watches*users\n[Change] migrated all inotify options from internals.conf to conf.maldet\n[New] added inotify_base_watches to conf.maldet for max file watches multiplier\n[New] added inotify_nice to conf.maldet for run-time prio of inotifywait\n[New] added inotify_webdir to conf.maldet for html/web root only monitoring\n[Change] extensive format change to README\n[Change] rewrote inotify section of README to reflect the many changes\n[New] added cleaner section to README\n[Change] -q|--quarantine now calls cleaner if quar_clean=1\n[Change] -n|--clean can now do in place cleaning without quarantine\n[Fix] cleaner function was not properly executing under certain conditions\n\nv1.3.2 | May 13th 2010:\n[New] added ignore files: ignore_paths , ignore_sigs \n[Change] ignore_sigs is processed as a pre-scan component before all scans\n[Change] revised README file to include details on new ignore options\n[Change] signature counts now displayed pre-scan and post-update\n[Change] install.sh now runs --update after installation\n[Fix] -p|--purge now properly clears session state data\n[New] added [ SIGNATURE UPDATES ] section to README file\n[Fix] some functions were referencing full paths instead of the variable equivs\n\nv1.3.1 | May 12th 2010:\n[Fix] typo in report command eout()\n[Fix] cron.daily tmpwatch on invalid path\n[Change] redirect stdout to /dev/null on tmpwatch calls in cron.daily\n[Change] better commented cron.daily actions\n[Change] cron.daily scans will now hit /home*/*/public_html on non-ensim systems\n[Change] inotify monitor now properly handles any user homedir paths\n[Fix] sigup will now download full signature set when no sigs are found local\n[Fix] rewrote 17 signatures that would never match due to hexdepth restrictions\n[Fix] removed some HEX signatures derived from ClamAV that would never hit\n[Change] files must now be >32bytes to be included in search results\n[Change] search results default to a max directory depth of 15\n[New] added vars for minfilesize and maxdepth scan options\n[Change] updated inotifywait to v1.3.6, statically linked binary\n[Info] signature RSS and XML data sources added, see:\nhttp://www.rfxn.com/signature-updates-rss-feed/\n[Info] LMD now has a homepage on rfxn.com:\nhttp://www.rfxn.com/projects/linux-malware-detect/\n[New] adopted new versioning scheme \n      [MAJOR].[MINOR].[REV]\n      1       3       1\n\nv1.3 | May 11th 2010:\n- First public release\n\nv1.1 - v1.2 | Mar. 2010 - May 2010:\n- Internal releases\n\nv0.5 - v1.0 | Nov. 2009 - Feb. 2010:\n- Closed beta\n\nv0.4< | Oct. 2009:\n- Internal releases\n"
        },
        {
          "name": "CHANGELOG.RELEASE",
          "type": "blob",
          "size": 1.7392578125,
          "content": "v1.6.5 | Mar 27 2023:\n[Fix] monitor mode white space detection; issue #354\n[Change] event_log/clamscan_log now record year in timestamp; issue #352\n[Change] -p|--purge will now trim the inotify_log; issue #350\n[New] -E|--dump-report to dump reports to stdout; pr #362\n[Fix] monitor mode will now fail to start if 'ed' is not installed; issue #350\n      inotify_log requires in-place inode pruning to prevent exponential growth\n[Fix] inotify kernel support on debian11 checking only System.map; pr #398\n[Fix] human-readable path not displaying on -a|--scan-all default path scan (/home); #407\n[Change] default scoped scan adjusted from /var/www/html to /var/www to make sure we scope all www content; #404\n[Fix] compare md5 on ignore_sigs between monitor mode cycles and only regenerate signatures on file changes; #397\n[New] add detect_control_panel function to files/internals/functions to determine installed control panel; pr #409\n[New] add get_panel_contacts to files/internals/functions to discover contact emails; pr #409\n[New] add configuration options for From, Subject, Reply-To headers on alert emails; pr #409\n[New] add flag to enable these alerts (requires email_alert to be enabled as well); pr #409\n[New] add internal configuration to set the user alert template location; pr #409\n[New] add a base template that will be used to create emails to control panel contacts; pr #409\n[Change] ambiguous restore error modified to include file name\n[Fix] adjusted ftp.rfxn.com checkout credentials; #390\n[Fix] systemd unit file not copying properly; #371, #413\n[Fix] monitor mode dependency failures on 'ed' not properly logging to be captured by unit file; #395\n[Fix] newer versions of cpulimit explicitly enforce the usage of '--' to define where cpulimit options end; #395\n"
        },
        {
          "name": "CHANGELOG.VARIABLES",
          "type": "blob",
          "size": 1.4560546875,
          "content": "quar_hits          =>  quarantine_hits\nquar_clean         =>  quarantine_clean\nquar_susp          =>  quarantine_suspend_user\nquar_susp_minuid   =>  quarantine_suspend_user_minuid\nmaxdepth           =>  scan_max_depth\nminfilesize        =>  scan_min_filesize\nmaxfilesize        =>  scan_max_filesize\nhexdepth           =>  scan_hexdepth\nhex_fifo_scan      =>  scan_hexfifo\nhex_fifo_depth     =>  scan_hexfifo_depth\nclamav_scan        =>  scan_clamscan\ntmpdir_scan        =>  DELETED\ntmpdir_paths       =>  scan_tmpdir_paths\npublic_scan        =>  scan_user_access\npubuser_minuid     =>  scan_user_access_minuid\nscan_nice          =>  scan_cpunice\ninotify_stime      =>  inotify_sleep\ninotify_webdir     =>  inotify_docroot\ninotify_nice       =>  inotify_cpunice\ndef_verf           =>  sig_version_file\ndefurl_ver         =>  sig_version_url\ndef_ver            =>  sig_version\ndefurl_sigpack     =>  sig_sigpack_url\ndefurl_clpack      =>  sig_clpack_url\ndat_md5hash        =>  sig_md5_file\ndat_hexstring      =>  sig_hex_file\ndat_hex_cav        =>  sig_cav_hex_file\ndat_md5_cav        =>  sig_cav_md5_file\ncustdat_md5hash    =>  sig_cust_md5_file\ncustdat_hexstring  =>  sig_cust_hex_file\nlmd_verf           =>  lmd_version_file\nlmd_ver            =>  lmd_version\nlmd_hashf          =>  lmd_hash_file\nlmdurl_hash        =>  lmd_hash_url\nlmdurl_ver         =>  lmd_version_url\nhex_fifo           =>  hex_fifo_path\nhexm_pl            =>  hex_string_script\nhexmfifo_pl        =>  hex_fifo_script\n"
        },
        {
          "name": "COPYING.GPL",
          "type": "blob",
          "size": 17.6689453125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 23.8701171875,
          "content": "Linux Malware Detect v1.6.5\n            (C) 2002-2023, R-fx Networks <proj@r-fx.org>\n            (C) 2023, Ryan MacDonald <ryan@r-fx.org>\nThis program may be freely redistributed under the terms of the GNU GPL v2\n\n::::::::::::::::::::::::::::::::::\n\n:: CONTENTS ::\n.: 1 [ DESCRIPTION ]\n.: 2 [ FEATURES ]\n.: 3 [ THREAT SOURCE DATA ]\n.: 4 [ RELEASE UPDATES ]\n.: 4.1 [ SIGNATURE UPDATES ]\n.: 5 [ DETECTED THREATS ]\n.: 6 [ THREAT SHARING ]\n.: 7 [ CONFIGURATION ]\n.: 8 [ IGNORE OPTIONS ]\n.: 9 [ CLI USAGE ]\n.: 10 [ CRON DAILY ]\n.: 11 [ INOTIFY MONITORING ]\n.: 12 [ MODSECURITY2 UPLOAD SCANNING ]\n.: 13 [ CLEANER RULES ]\n\n::::::::::::::::::::::::::::::::::\n\n.: 1 [ DESCRIPTION ]\n\nLinux Malware Detect (LMD) is a malware scanner for Linux released under the \nGNU GPLv2 license, that is designed around the threats faced in shared hosted \nenvironments. It uses threat data from network edge intrusion detection \nsystems to extract malware that is actively being used in attacks and \ngenerates signatures for detection. In addition, threat data is also derived \nfrom user submissions with the LMD checkout feature and from malware \ncommunity resources. The signatures that LMD uses are MD5 file hashes and HEX \npattern matches, they are also easily exported to any number of detection \ntools such as ClamAV.\n\nThe driving force behind LMD is that there is currently limited availability \nof open source/restriction free tools for Linux systems that focus on malware \ndetection and more important that get it right. Many of the AV products that \nperform malware detection on Linux have a very poor track record of detecting \nthreats, especially those targeted at shared hosted environments.\n\nThe threat landscape in shared hosted environments is unique from that of the \nstandard AV products detection suite in that they are detecting primarily OS \nlevel trojans, rootkits and traditional file-infecting viruses but missing \nthe ever increasing variety of malware on the user account level which serves \nas an attack platform.\n\nUsing the CYMRU malware hash registry, which provides malware detection data \nfor 30 major AV packages, we can demonstrate this short coming in current \nthreat detection. The following is an analysis of 8,882 MD5 hashes that ship \nin LMD 1.5 and the percentage of major AV products that currently detect \nthe hashes.\n\nKNOWN MALWARE:      1951\n % AV DETECT (AVG):  58\n % AV DETECT (LOW):  10\n % AV DETECT (HIGH): 100\nUNKNOWN MALWARE:    6931\n\nWhat this information means, is that of the 8,883 hashes, 78% or 6,931 malware threats\nare NOT detected by top-30 AV products. The 1,951 detected malware threats that are known\nhave an average detection rate of 58% among top-30 AV products with a low and high\ndetection rate of 10% and 100% respectively. This clearly demonstrates the significant\nlapse in user space malware detection that top-30 AV products currently provide. It is for\nthis reason LMD was created, to fill a void, specifically for shared hosted environments.\n\n.: 2 [ FEATURES ]\n\n- MD5 file hash detection for quick threat identification\n- HEX based pattern matching for identifying threat variants\n- statistical analysis component for detection of obfuscated threats (e.g: base64)\n- integrated detection of ClamAV to use as scanner engine for improved performance\n- integrated signature update feature with -u|--update\n- integrated version update feature with -d|--update-ver\n- scan-recent option to scan only files that have been added/changed in X days\n- scan-all option for full path based scanning\n- checkout option to upload suspected malware to rfxn.com for review / hashing\n- full reporting system to view current and previous scan results\n- quarantine queue that stores threats in a safe fashion with no permissions\n- quarantine batching option to quarantine the results of a current or past scans\n- quarantine restore option to restore files to original path, owner and perms\n- quarantine suspend account option to Cpanel suspend or shell revoke users\n- cleaner rules to attempt removal of malware injected strings\n- cleaner batching option to attempt cleaning of previous scan reports\n- cleaner rules to remove base64 and gzinflate(base64 injected malware\n- daily cron based scanning of all changes in last 24h in user homedirs\n- daily cron script compatible with stock RH style systems, Cpanel & Ensim\n- kernel based inotify real time file scanning of created/modified/moved files\n- kernel inotify monitor that can take path data from STDIN or FILE\n- kernel inotify monitor convenience feature to monitor system users\n- kernel inotify monitor can be restricted to a configurable user html root\n- kernel inotify monitor with dynamic sysctl limits for optimal performance\n- kernel inotify alerting through daily and/or optional weekly reports\n- HTTP upload scanning through mod_security2 inspectFile hook\n- e-mail alert reporting after every scan execution (manual & daily)\n- path, extension and signature based ignore options\n- background scanner option for unattended scan operations\n- verbose logging & output of all actions\n\n\n.: 3 [ THREAT SOURCE DATA ]\n\nThe defining difference with LMD is that it doesn't just detect malware based \non signatures/hashes that someone else generated but rather it is an \nencompassing project that actively tracks in the wild threats and generates \nsignatures based on those real world threats that are currently circulating.\n\nThere are four main sources for malware data that is used to generate LMD \nsignatures:\n- Network Edge IPS: Through networks managed as part of my day-to-day job,\nprimarily web hosting related, our web servers receive a large amount of daily\nabuse events, all of which is logged by our network edge IPS. The IPS events\nare processed to extract malware url's, decode POST payload and base64/gzip\nencoded abuse data and ultimately that malware is retrieved, reviewed, classified\nand then signatures generated as appropriate. The vast majority of LMD signatures\nhave been derived from IPS extracted data.\n\nThe network I manage hosts over 35,000 web sites and as \nsuch receives a large amount of daily abuse, all of which is logged by our \nnetwork edge IPS. The IPS events are processed to extract malware url's, \ndecode POST payload and base64/gzip encoded abuse data and ultimately that \nmalware is retrieved, reviewed, classified and then signatures generated as \nappropriate. The vast majority of LMD signatures have been derived from IPS \nextracted data.\n - Community Data: Data is aggregated from multiple community malware websites \nsuch as clean-mx and malwaredomainlist then processed to retrieve new \nmalware, review, classify and then generate signatures.\n - ClamAV: The HEX & MD5 detection signatures from ClamAV are monitored for \nrelevant updates that apply to the target user group of LMD and added to the \nproject as appropriate. To date there has been roughly 400 signatures ported \nfrom ClamAV while the LMD project has contributed back to ClamAV by \nsubmitting over 1,100 signatures and continues to do so on an ongoing basis.\n - User Submission: LMD has a checkout feature that allows users to submit \nsuspected malware for review, this has grown into a very popular feature and \ngenerates on average about 30-50 submissions per week.\n\n.: 4 [ RELEASE UPDATES ]\nUpdates to the release version of LMD are not automatically installed but can\nbe installed using the --update-ver option. There is good reasons that this is\nnot done automatically and I really dont feel like listing them so just think\nabout it a bit.\n\nThe latest changes in the release version can always be viewed at:\nhttp://www.rfxn.com/appdocs/CHANGELOG.maldetect\n\n.: 4.1 [ SIGNATURE UPDATES ]\n\nThe LMD signatures are updated typically once per day or more frequently\ndepending on incoming threat data from the LMD checkout feature, IPS malware\nextraction and other sources. The updating of signatures in LMD installations\nis performed daily through the default cron.daily script with the --update\noption, which can be run manually at any time.\n\nAn RSS & XML data source is available for tracking malware threat updates:\nRSS Recent Signatures: http://www.rfxn.com/api/lmd\nXML Recent Signatures: http://www.rfxn.com/api/lmd?id=recent\nXML All Signatures:    http://www.rfxn.com/api/lmd?id=all\n\n.: 5 [ DETECTED THREATS ]\n\nLMD 1.6 has a total of 11,061 (9,121 MD5 / 1940 HEX) signatures (before updates),\nbelow is a listing of the top 60 threats by prevalence detected by LMD.\n\nbase64.inject.unclassed    bin.dccserv.irsexxy      bin.fakeproc.Xnuxer\nbin.ircbot.nbot            bin.ircbot.php3          bin.ircbot.unclassed\nbin.pktflood.ABC123        bin.pktflood.osf         bin.trojan.linuxsmalli\nc.ircbot.tsunami           exp.linux.rstb           exp.linux.unclassed\nexp.setuid0.unclassed      gzbase64.inject          html.phishing.auc61\nhtml.phishing.hsbc         perl.connback.DataCha0s  perl.connback.N2\nperl.cpanel.cpwrap         perl.mailer.yellsoft     perl.ircbot.atrixteam\nperl.ircbot.bRuNo          perl.ircbot.Clx          perl.ircbot.devil\nperl.ircbot.fx29           perl.ircbot.magnum       perl.ircbot.oldwolf\nperl.ircbot.putr4XtReme    perl.ircbot.rafflesia    perl.ircbot.UberCracker\nperl.ircbot.xdh            perl.ircbot.xscan        perl.shell.cbLorD\nperl.shell.cgitelnet       php.cmdshell.c100        php.cmdshell.c99\nphp.cmdshell.cih           php.cmdshell.egyspider   php.cmdshell.fx29\nphp.cmdshell.ItsmYarD      php.cmdshell.Ketemu      php.cmdshell.N3tshell\nphp.cmdshell.r57           php.cmdshell.unclassed   php.defash.buno\nphp.exe.globals            php.include.remote       php.ircbot.InsideTeam\nphp.ircbot.lolwut          php.ircbot.sniper        php.ircbot.vj_denie\nphp.mailer.10hack          php.mailer.bombam        php.mailer.PostMan\nphp.phishing.AliKay        php.phishing.mrbrain     php.phishing.ReZulT\nphp.pktflood.oey           php.shell.rc99           php.shell.shellcomm\n\n.: 6 [ THREAT SHARING ]\n\nI am a firm believer in not reinventing the wheel, for my own sanity or that\nof others. As such all unique threat data is submitted to CYMRU & ClamAV so\nthat the open source and anti-malware community at large can grow from this\nproject.\n\n.: 7 [ CONFIGURATION ]\n\nThe configuration of LMD is handled through /usr/local/maldetect/conf.maldet\nand all options are well commented for ease of configuration.\n\nBy default LMD has the auto-quarantine of files disabled, this will mean that\nYOU WILL NEED TO ACT on any threats detected or pass the SCANID to the '-q'\noption to batch quarantine the results. To change this please set\nquarantine_hits=1 in conf.maldet.\n\n.: 8 [ IGNORE OPTIONS ]\n\nThere are four ignore files available and they break down as follows:\n\n/usr/local/maldetect/ignore_paths\nA line spaced file for paths that are to be excluded from search results\n Sample ignore entry:\n /home/user/public_html/cgi-bin\n\n/usr/local/maldetect/ignore_file_ext\nA line spaced file for file extensions to be excluded from search results\n Sample ignore entry:\n .js\n .css\n\n/usr/local/maldetect/ignore_sigs\nA line spaced file for signatures that should be removed from file scanning\n Sample ignore entry:\n base64.inject.unclassed\n\n/usr/local/maldetect/ignore_inotify\nA line spaced file for regexp paths that are excluded from inotify monitoring\n Sample ignore entry:\n ^/home/user$\n ^/var/tmp/#sql_.*\\.MYD$\n\n.: 9 [ CLI USAGE ]\n\nOnce LMD is installed it can be run through the 'maldet' command, the '--help'\noption gives a detailed summary of usage options:\n\n    -b, --background\n      Execute operations in the background, ideal for large scans\n      e.g: maldet -b -r /home/?/public_html 7\n\n    -u, --update [--force]\n       Update malware detection signatures from rfxn.com\n\n    -d, --update-ver [--force]\n       Update the installed version from rfxn.com\n\n    -m, --monitor USERS|PATHS|FILE\n       Run maldet with inotify kernel level file create/modify monitoring\n       If USERS is specified, monitor user homedirs for UID's > 500\n       If FILE is specified, paths will be extracted from file, line spaced\n       If PATHS are specified, must be comma spaced list, NO WILDCARDS!\n       e.g: maldet --monitor users\n       e.g: maldet --monitor /root/monitor_paths\n       e.g: maldet --monitor /home/mike,/home/ashton\n\n    -k, --kill\n       Terminate inotify monitoring service\n\n    -r, --scan-recent PATH DAYS\n       Scan files created/modified in the last X days (default: 7d, wildcard: ?)\n       e.g: maldet -r /home/?/public_html 2\n\n    -a, --scan-all PATH\n       Scan all files in path (default: /home, wildcard: ?)\n       e.g: maldet -a /home/?/public_html\n\n    -c, --checkout FILE\n       Upload suspected malware to rfxn.com for review & hashing into signatures\n\n    -l, --log\n       View maldet log file events\n\n    -e, --report SCANID email\n       View scan report of most recent scan or of a specific SCANID and optionally\n       e-mail the report to a supplied e-mail address\n       e.g: maldet --report\n       e.g: maldet --report list\n       e.g: maldet --report 050910-1534.21135\n       e.g: maldet --report SCANID user@domain.com\n\n    -E, --dump-report SCANID\n       Similar to -e/--report except dumps the report to stdout instead.\n       e.g: maldet --dump-report\n       e.g: maldet --dump-report 050910-1534.21135\n\n    -s, --restore FILE|SCANID\n       Restore file from quarantine queue to orginal path or restore all items from\n       a specific SCANID\n       e.g: maldet --restore /usr/local/maldetect/quarantine/config.php.23754\n       e.g: maldet --restore 050910-1534.21135\n\n    -q, --quarantine SCANID\n       Quarantine all malware from report SCANID\n       e.g: maldet --quarantine 050910-1534.21135\n\n    -n, --clean SCANID\n       Try to clean & restore malware hits from report SCANID\n       e.g: maldet --clean 050910-1534.21135\n\n    -U, --user USER\n       Set execution under specified user, ideal for restoring from user quarantine or\n       to view user reports.\n       e.g: maldet --user nobody --report\n       e.g: maldet --user nobody --restore 050910-1534.21135\n\n    -co, --config-option VAR1=VALUE,VAR2=VALUE,VAR3=VALUE\n       Set or redefine the value of conf.maldet config options\n       e.g: maldet --config-option email_addr=you@domain.com,quarantine_hits=1\n\n    -p, --purge\n       Clear logs, quarantine queue, session and temporary data.\n\n.: 10 [ CRON DAILY ]\n\nThe cronjob installed by LMD is located at /etc/cron.daily/maldet and is used\nto perform a daily update of signatures, keep the session, temp and quarantine\ndata to no more than 14d old and run a daily scan of recent file system changes.\n\nThe daily scan supports a variety of control panel systems or standard Linux\n/home*/user paths. \n\nIf you are running monitor mode, the daily scans will be skipped and instead a\ndaily report will be issued for all monitoring events. \n\nIf you need to scan additional paths, you should review the cronjob and use one\nof the customization hook files, such as '/usr/local/maldetect/cron/custom.cron',\nto write in custom scanning execution. For configuration based cron changes, you\ncan redefine any conf.maldet variables at '/etc/sysconfig/maldet' or \n'/usr/local/maldetect/cron/conf.maldet.cron'.\n\n.: 11 [ INOTIFY MONITORING ]\n\nThe inotify monitoring feature is designed to monitor users in real-time for\nfile creation/modify/move operations. This option requires a kernel that\nsupports inotify_watch (CONFIG_INOTIFY) which is found in kernels 2.6.13+\nand CentOS/RHEL 5 by default. If you are running CentOS 4 you should consider\nan inbox upgrade with: http://www.rfxn.com/upgrade-centos-4-8-to-5-3/\n\nThere are three modes that the monitor can be executed with and they relate\nto what will be monitored, they are USERS|PATHS|FILES. \n       e.g: maldet --monitor users\n       e.g: maldet --monitor /root/monitor_paths\n       e.g: maldet --monitor /home/mike,/home/ashton\n\nThe options break down as follows:\nUSERS -  The users option will take the homedirs of all system users that are\n         above inotify_minuid and monitor them. If inotify_webdir is set then\n         the users webdir, if it exists, will only be monitored.\nPATHS -  A comma spaced list of paths to monitor\nFILE  -  A line spaced file list of paths to monitor\n\nOnce you start maldet in monitor mode, it will preprocess the paths based on\nthe option specified followed by starting the inotify process. The starting of\nthe inotify process can be a time consuming task as it needs to setup a monitor\nhook for every file under the monitored paths. Although the startup process can\nimpact the load temporarily, once the process has started it maintains all of\nits resources inside kernel memory and has a very small userspace footprint in\nmemory or cpu usage.\n\nThe scanner component of the monitor watches for notifications from the inotify\nprocess and batches items to be scanned, by default, every 30 seconds. If you\nneed tighter control of the scanning timer, you can edit inotify_stime in\nconf.maldet.\n\nThe alerting of file hits under monitor mode is handled through a daily report\ninstead of sending an email on every hit. The cron.daily job installed by LMD\nwill call an --alert-daily flag and send an alert for the last days hits. There\nis also an --alert-weekly option that can be used, simply edit the cron at\n/etc/cron.daily/maldet and change the --alert-daily to --alert-weekly.\n\nTerminating the inotify monitoring is done by passing the '-k|--kill-monitor'\noption to maldet, it will touch a file handle monitored by maldet and on the\nnext waking cycle of the monitor service, it will terminate itself and all\ninotify processes.\n\n.: 12 [ MODSECURITY2 UPLOAD SCANNING ]\n\nThe support for HTTP upload scanning is provided through mod_security2's inspectFile hook.\nThis feature allows for a validation script to be used in permitting or denying an upload. \n\nThe convenience script to facilitate this is called hookscan.sh and is located in the\n/usr/local/maldetect installation path. The default setup is to run a standard maldet scan\nwith no clamav support, no cleaner rule executions and quarantining enabled; these options\nare set in the interest of performance vs accuracy which is a fair tradeoff. \n\nThe scan options can be modified in the hookscan.sh file if so desired, the default\nscan options are as follows:\n--config-option quarantine_hits=1,quarantine_clean=0,clamav_scan=0 --modsec -a \"$file\"\n\nThere is a tangible performance difference in disabling clamav scanning in this usage\nscenario. The native LMD scanner engine is much faster than the clamav scanner engine\nin single file scans by a wide margin. A single file scan using clamav takes roughly\n3sec on average while the LMD scanner engine takes 0.5sec or less.\n\nTo enable upload scanning with mod_security2 you must set enable the scan_user_access option\nin conf.maldet (scan_user_access=1) then add the following rules to your mod_security2 \nconfiguration. These rules are best placed in your modsec2.user.conf file on cpanel servers\nor at the top of the appropriate rules file for your setup.\n\n/usr/local/apache/conf/modsec2.user.conf (or similar mod_security2 rules file):\nSecRequestBodyAccess On\nSecRule FILES_TMPNAMES \"@inspectFile /usr/local/maldetect/hookscan.sh\" \\\n                \"id:'999999',log,auditlog,deny,severity:2,phase:2,t:none\"\n\nIf using ModSecurity >=2.9, you should set 'SecTmpSaveUploadedFiles On' before the\n'SecRule FILES_TMPNAMES' line.\n\nA restart of the Apache service is required following these changes.\n\nWhen an upload takes place that is determined to be malware, it will be rejected and an\nentry will appear in the mod_security2 SecAuditLog file. On cpanel servers and most\nconfigurations this is the modsec_audit.log located under /usr/local/apache/logs or \n/var/log/httpd.\n\nThe log entry will appear similar to the following:\nMessage: Access denied with code 406 (phase 2). File \"/tmp/20121120-....-file\" rejected by\nthe approver script \"/usr/local/maldetect/hookscan.sh\": 0 maldet: {HEX}php.cmdshell.r57.317\n/tmp/20121120-....-file [file \"/usr/local/apache/conf/modsec2.user.conf\"] [line \"3\"]\n[severity \"CRITICAL\"]\n\nThe default alerting options will apply and an e-mail will be sent when hits are found. This\ncan be changed in the hookscan.sh script by editing the --config-option values.\n\nTo disable alerts append email_alert=0 to the --config-option values:\n--config-option quarantine_hits=1,quarantine_clean=0,clamav_scan=0,email_alert=0\n\nTo change the e-mail address for alerts on upload hits, append email_addr=you@domain.com\nto the --config-option values:\n--config-option quarantine_hits=1,quarantine_clean=0,clamav_scan=0,email_addr=you@domain.com\n\nThe nature of uploads is such that they are performed either under the user that the HTTP\nservice is running as or under that of a system user in an suexec style setup (i.e: phpsuexec).\nThis required a change to the way LMD stores session, temporary and quarantine data to allow\nfor non-root users to perform scans.\n\nGiven that the maldetect installation path is owned by user root, we either need to set a pub\npath world writable (777) or populate the pub path with user owned paths. It was undesirable\nto set any path world writable and as such a feature to populate path data was created. This\nfeature is controlled with the --mkpubpaths flag and is executed from cron every 10 minutes,\nit will only execute if the scan_user_access variable is enabled in conf.maldet. As such, it is\nimportant to make sure the scan_user_access variable is set to enabled (1) in conf.maldet and it is\nadvised to run 'maldet --mkpubpaths' manually to prepopulate the user paths. There after, the\ncron will ensure new users have paths created no later than 10 minutes after creation.\n\nAll non-root scans, such as those performed under mod_security2, will be stored under the\n/usr/local/maldetect/pub/username directory tree. The quarantine paths are relative to the user\nthat executes the scan, so user nobody would be under pub/nobody/quar/. The actual paths\nfor where files are quarantined and the user which executed the scan, can be verified in the\ne-mail reports for upload hits.\n\nTo restore files quarantined under non-root users, you must pass the -U|--user option to LMD,\nfor example if user nobody quarantined a file you would like to restore, it can be restored as\nfollows:\nmaldet --user nobody /usr/local/maldetect/pub/nobody/quar/20121120-file-SFwTeu.22408\n\nOr, as always the scan ID can be used to restore\nmaldet --user nobody 112012-0032.13771\n\n.: 13 [ CLEANER RULES ]\n\nThe cleaner function looks for signature-named rules under the clean/ path,\nthese rules can consist of any command that is designed to clean a file of\nmalware. A cleaner rule must result in a file being able to pass a scan\nwithout tripping a HIT otherwise it will classify the clean action as FAILED.\n\nLet us assume for a moment we have malware that we want to clean and it trips\nwith the signature \"{HEX}php.cmdshell.r57.89\". The actual signature string in\nthis is \"php.cmdshell.r57\", the \"{HEX}\" just defines the format and \".89\" is\nthe variant number. So, to create a clean rule for php.cmdshell.r57 we would\nadd a file 'clean/php.cmdshell.r57' and this would be executed against any\nfile that hits on the signature of the same name.\n\nThe actual contents of the rule should be a single line command that will be\nexecuted against the hit file, for example the execution looks something like:\n\nYOUR_COMMAND MALWARE_FILE\n\nSo, for a string based malware injection you could easily throw in a 'sed -i'\ninto the rule file with the appropriate pattern to strip the string(s) from\nthe file. Once the clean command has run, a rescan will be performed on the\nfile and if it causes causes a hit, the clean will be marked as FAILED. A\nsuccessful clean ALWAYS results in the file being restored if possible to\nits original path, owner and mode.\n\nAn important note is that the cleaner function is a subfunction of the\nquarantine, so if the quarantine is disabled then by default, malware hits\nwill not have clean attempts made. There are two ways around this, apart from\nthe obvious of turning on quarantine and rescanning (which is a waste of time).\nThe best way is to enable the quarantine and then use the -q|--quarantine flag\nto batch through the scan results, which will quarantine and clean files. The\nsecond is to use the -n|--clean flag which will try to clean files in place,\nbe that in the quarantine or the files original path, wherever it can be found.\n\ne.g: maldet -q SCANID\ne.g: maldet --clean SCANID\n"
        },
        {
          "name": "cron.d.pub",
          "type": "blob",
          "size": 0.07421875,
          "content": "*/5 * * * * root /usr/local/maldetect/maldet --mkpubpaths >> /dev/null 2>&1\n"
        },
        {
          "name": "cron.daily",
          "type": "blob",
          "size": 3.724609375,
          "content": "#!/usr/bin/env bash\nexport PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH\nexport LMDCRON=1\ninspath='/usr/local/maldetect'\nintcnf=\"$inspath/internals/internals.conf\"\n\nif [ -f \"$intcnf\" ]; then\n\tsource $intcnf\nelse\n\techo \"\\$intcnf not found.\"\n\texit 1\nfi\nif [ -f \"$cnf\" ]; then\n\tsource $cnf\n\tif [ -f \"$compatcnf\" ]; then\n\t        source $compatcnf\n\tfi\nelse\n\techo \"could not find \\$cnf, fatal error, bye.\"\n\texit 1\nfi\n\nif [ -f \"/etc/sysconfig/maldet\" ]; then\n\t. /etc/sysconfig/maldet\nelif [ -f \"/etc/default/maldet\" ]; then\n\t. /etc/default/maldet\nfi\n\nif [ -f \"$cron_custom_conf\" ]; then\n\t. $cron_custom_conf\nfi\n\nif [ -z \"$scan_days\" ]; then\n\tscan_days=1\nfi\n\nif [ -z \"$cron_prune_days\" ]; then\n\tcron_prune_days=21\nfi\n\nif [ \"$find\" ]; then\n\t# prune any quarantine/session/tmp data older than 7 days\n\ttmpdirs=\"$tmpdir $varlibpath/sess $varlibpath/quarantine $varlibpath/pub\"\n\tfor dir in $tmpdirs; do\n\t if [ -d \"$dir\" ]; then\n\t  $find $dir -type f -mtime +${cron_prune_days} -print0 | xargs -0 rm -f >> /dev/null 2>&1\n\t fi\n\tdone\nfi\n\nif [ \"$autoupdate_version\" == \"1\" ] || [ \"$autoupdate_signatures\" == \"1\" ]; then\n\t# sleep for random 1-999s interval to better distribute upstream load\n\tsleep $(echo $RANDOM | cut -c1-3) >> /dev/null 2>&1\nfi\n\nif [ \"$autoupdate_version\" == \"1\" ]; then\n\t# check for new release version\n\t$inspath/maldet -d >> /dev/null 2>&1\nfi\n\nif [ \"$autoupdate_signatures\" == \"1\" ]; then\n\t# check for new definition set\n\t$inspath/maldet -u >> /dev/null 2>&1\nfi\n\n# if we're running inotify monitoring, send daily hit summary\nif [ \"$(ps -A --user root -o \"cmd\" | grep -E maldetect | grep -E inotifywait)\" ]; then\n        $inspath/maldet --monitor-report >> /dev/null 2>&1\nelif [ \"$cron_daily_scan\" == \"1\" ]; then\n\tif [ -d \"/home/virtual\" ] && [ -d \"/usr/lib/opcenter\" ]; then\n\t\t# ensim\n\t        $inspath/maldet -b -r /home/virtual/?/fst/var/www/html/,/home/virtual/?/fst/home/?/public_html/ $scan_days >> /dev/null 2>&1\n\telif [ -d \"/etc/psa\" ] && [ -d \"/var/lib/psa\" ]; then\n\t\t# psa\n\t\t$inspath/maldet -b -r /var/www/vhosts/?/ $scan_days >> /dev/null 2>&1\n        elif [ -d \"/usr/local/directadmin\" ]; then\n                # DirectAdmin\n                $inspath/maldet -b -r /home?/?/domains/?/public_html/,/var/www/html/?/ $scan_days >> /dev/null 2>&1\n\telif [ -d \"/var/www/clients\" ]; then\n\t\t# ISPConfig\n                $inspath/maldet -b -r /var/www/clients/?/web?/web,/var/www/clients/?/web?/subdomains,/var/www $scan_days >> /dev/null 2>&1\n\telif [ -d \"/etc/webmin/virtual-server\" ]; then\n\t\t# Virtualmin\n                $inspath/maldet -b -r /home/?/public_html/,/home/?/domains/?/public_html/ $scan_days >> /dev/null 2>&1\n\telif [ -d \"/usr/local/ispmgr\" ] || [ -d \"/usr/local/mgr5\" ]; then\n\t\t# ISPmanager\n\t\t$inspath/maldet -b -r /var/www/?/data/,/home/?/data/ $scan_days >> /dev/null 2>&1\n\telif [ -d \"/var/customers/webs\" ]; then\n\t\t# froxlor\n\t\t$inspath/maldet -b -r /var/customers/webs/ $scan_days >> /dev/null 2>&1\n        elif [ -d \"/usr/local/vesta\" ] || [ -d \"/usr/local/hestia\" ]; then\n                # VestaCP or HestiaCP\n                $inspath/maldet -b -r /home/?/web/?/public_html/,/home/?/web/?/public_shtml/,/home/?/tmp/,/home/?/web/?/private/ $scan_days >> /dev/null 2>&1\n        elif [ -d \"/usr/share/dtc\" ]; then\n                # DTC\n                if [ -f /var/lib/dtc/saved_install_config ]; then\n                    . /var/lib/dtc/saved_install_config\n                fi\n                $inspath/maldet -b -r ${conf_hosting_path:-/var/www/sites}/?/?/subdomains/?/html/ $scan_days >> /dev/null 2>&1\n\telse\n\t\t# cpanel, interworx and other standard home/user/public_html setups\n\t        $inspath/maldet -b -r /home?/?/public_html/,/var/www/,/usr/local/apache/htdocs/ $scan_days >> /dev/null 2>&1\n\tfi\nfi\n\nif [ -f \"$cron_custom_exec\" ]; then\n\t. $cron_custom_exec\nfi\n"
        },
        {
          "name": "files",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 6.0126953125,
          "content": "#!/usr/bin/env bash\n#\n##\n# Linux Malware Detect v1.6.5\n#             (C) 2002-2023, R-fx Networks <proj@r-fx.org>\n#             (C) 2023, Ryan MacDonald <ryan@r-fx.org>\n# This program may be freely redistributed under the terms of the GNU GPL v2\n##\n#\nPATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin\nver=1.6.5\nver_major=1.6\ninspath=/usr/local/maldetect\nlogf=$inspath/logs/event_log\nconftemp=\"$inspath/internals/importconf\"\nfind=`which find 2> /dev/null`\n\n\nclamav_linksigs() {\n        cpath=\"$1\"\n        if [ -d \"$cpath\" ]; then\n                rm -f $cpath/rfxn.* ; cp -f $inspath/sigs/rfxn.ndb $inspath/sigs/rfxn.hdb $cpath/ 2> /dev/null\n                rm -f $cpath/lmd.user.* ; cp -f $inspath/sigs/lmd.user.ndb $inspath/sigs/lmd.user.hdb $cpath/ 2> /dev/null\n        fi\n}\n\nif [ ! -d \"$inspath\" ] && [ -d \"files\" ]; then\n\tmkdir -p $inspath\n\tchmod 755 $inspath\n\tcp -pR files/* $inspath\n\tchmod 755 $inspath/maldet\n\tmkdir -p $inspath/clean $inspath/pub $inspath/quarantine $inspath/sess $inspath/sigs $inspath/tmp 2> /dev/null\n\tchmod 750 $inspath/quarantine $inspath/sess $inspath/tmp $inspath/internals/tlog 2> /dev/null\n\tln -fs $inspath/maldet /usr/local/sbin/maldet\n\tln -fs $inspath/maldet /usr/local/sbin/lmd\n\tcp -f CHANGELOG COPYING.GPL README $inspath/\n\tclamav_paths=\"/usr/local/cpanel/3rdparty/share/clamav/ /var/lib/clamav/ /var/clamav/ /usr/share/clamav/ /usr/local/share/clamav\"\n\tfor lp in $clamav_paths; do\n\t\tclamav_linksigs \"$lp\"\n\tdone\n\tkillall -SIGUSR2 clamd 2> /dev/null\nelse\n\tif [ \"$(ps -A --user root -o \"command\" 2> /dev/null | grep maldetect | grep inotifywait)\" ]; then\n\t\t$inspath/maldet -k >> /dev/null 2>&1\n\t\tmonmode=1\n\tfi\n\t$find ${inspath}.* -maxdepth 0 -type d -mtime +30 2> /dev/null | xargs rm -rf\n\tchattr -ia $inspath/internals/internals.conf\n\tmv $inspath $inspath.bk$$\n\tln -fs $inspath.bk$$ $inspath.last\n\tmkdir -p $inspath\n\tchmod 755 $inspath\n\tcp -pR files/* $inspath\n\tchmod 755 $inspath/maldet\n\tln -fs $inspath/maldet /usr/local/sbin/maldet\n\tln -fs $inspath/maldet /usr/local/sbin/lmd\n\tmkdir -p /usr/local/share/man/man1/\n\tgzip -9 $inspath/maldet.1\n\tln -fs $inspath/maldet.1.gz /usr/local/share/man/man1/maldet.1.gz\n\tcp -f $inspath.bk$$/ignore_* $inspath/  >> /dev/null 2>&1\n\tif [ \"$ver_major\" == \"1.5\" ] || [ \"$ver_major\" == \"1.6\" ]; then\n\t\tcp -f $inspath.bk$$/sess/* $inspath/sess/ >> /dev/null 2>&1\n\t\tcp -f $inspath.bk$$/tmp/* $inspath/tmp/ >> /dev/null 2>&1\n\t\tcp -f $inspath.bk$$/quarantine/* $inspath/quarantine/ >> /dev/null 2>&1\n                cp -f $inspath.bk$$/cron/* $inspath/cron/\n\tfi\n\tcp -f $inspath.bk$$/sigs/custom.* $inspath/sigs/ >> /dev/null 2>&1\n\tcp -f $inspath.bk$$/monitor_paths $inspath/ >> /dev/null 2>&1\n\tcp -pf $inspath.bk$$/clean/custom.* $inspath/clean/ >> /dev/null 2>&1\n\tcp -f CHANGELOG COPYING.GPL README $inspath/\n\tmkdir -p $inspath/clean $inspath/pub $inspath/quarantine $inspath/sess $inspath/sigs $inspath/tmp 2> /dev/null\n\tchmod 750 $inspath/quarantine $inspath/sess $inspath/tmp $inspath/internals/tlog 2> /dev/null\n\tclamav_paths=\"/usr/local/cpanel/3rdparty/share/clamav/ /var/lib/clamav/ /var/clamav/ /usr/share/clamav/ /usr/local/share/clamav\"\n\tfor lp in $clamav_paths; do\n\t\tclamav_linksigs \"$lp\"\n\tdone\n\tkillall -SIGUSR2 clamd 2> /dev/null\nfi\n\nif [ -d \"/etc/cron.daily\" ]; then\n\tcp -f cron.daily /etc/cron.daily/maldet\n\tchmod 755 /etc/cron.daily/maldet\nfi\n\nif [ -d \"/etc/cron.d\" ]; then\n\tcp -f cron.d.pub /etc/cron.d/maldet_pub\n\tchmod 644 /etc/cron.d/maldet_pub\nfi\n\nif [ \"$(uname -s)\" != \"FreeBSD\" ]; then\n        if test \"$(cat /proc/1/comm 2> /dev/null)\" == \"systemd\"\n        then\n                mkdir -p /etc/systemd/system/\n                mkdir -p /usr/lib/systemd/system/\n                rm -f /usr/lib/systemd/system/maldet.service\n                cp ./files/service/maldet.service /usr/lib/systemd/system/\n                systemctl daemon-reload\n                systemctl enable maldet.service\n\telse\n                cp -af ./files/service/maldet.sh /etc/init.d/maldet\n                chmod 755 /etc/init.d/maldet\n\t\tchkconfig --level 2345 maldet on\n\tfi\n\tif [ -f /etc/redhat-release ]; then\n\t\tif [ ! -f \"/etc/sysconfig/maldet\" ]; then\n\t\t\tcp -f ./files/service/maldet.sysconfig /etc/sysconfig/maldet\n\t\tfi\n\telif [ -f /etc/debian_version ] || [ -f /etc/lsb-release ]; then\n\t\tif [ ! -f \"/etc/default/maldet\" ]; then\n\t\t\tcp -f ./files/service/maldet.sysconfig /etc/default/maldet\n\t\tfi\n\t\tupdate-rc.d -f maldet remove\n\t\tupdate-rc.d maldet defaults 70 30\n\telif [ -f /etc/gentoo-release ]; then\n\t\trc-update add maldet default\n\telif [ -f /etc/slackware-version ]; then\n\t\tln -sf /etc/init.d/maldet /etc/rc.d/rc3.d/S70maldet\n\t\tln -sf /etc/init.d/maldet /etc/rc.d/rc4.d/S70maldet\n\t\tln -sf /etc/init.d/maldet /etc/rc.d/rc5.d/S70maldet\n\telse\n\t\tif [ ! -f \"/etc/sysconfig/maldet\" ]; then\n\t\t\tcp -f ./files/service/maldet.sysconfig /etc/sysconfig/maldet 2> /dev/null\n\t\tfi\n\t\t/sbin/chkconfig maldet on\n\tfi\nfi\n\nmkdir -p $inspath/logs && touch $logf\nln -fs $logf $inspath/event_log\n$inspath/maldet --alert-daily 2> /dev/null\n\necho \"Linux Malware Detect v$ver\"\necho \"            (C) 2002-2023, R-fx Networks <proj@r-fx.org>\"\necho \"            (C) 2023, Ryan MacDonald <ryan@r-fx.org>\"\necho \"This program may be freely redistributed under the terms of the GNU GPL\"\necho \"\"\necho \"installation completed to $inspath\"\necho \"config file: $inspath/conf.maldet\"\necho \"exec file: $inspath/maldet\"\necho \"exec link: /usr/local/sbin/maldet\"\necho \"exec link: /usr/local/sbin/lmd\"\necho \"cron.daily: /etc/cron.daily/maldet\"\nif [ -f \"$conftemp\" ] && [ -f \"${inspath}.last/conf.maldet\" ]; then\n\t. files/conf.maldet\n\t. ${inspath}.last/conf.maldet\n\tif [ \"$quarantine_hits\" == \"0\" ] && [ \"$quar_hits\" == \"1\" ]; then\n\t\tquarantine_hits=1\n\tfi\n\tif [ \"$quarantine_clean\" == \"0\" ] && [ \"$quar_clean\" == \"1\" ]; then\n\t\tquarantine_clean=\"1\"\n\tfi\n\tif [ -f \"files/internals/compat.conf\" ]; then\n\t\tsource files/internals/compat.conf\n\tfi\n\tsource $conftemp\n\techo \"imported config options from $inspath.last/conf.maldet\"\nfi\n$inspath/maldet --update 1\nif [ \"$monmode\" == \"1\" ]; then\n\techo \"detected active monitoring mode, restarted inotify watch with '-m users'\"\n\t$inspath/maldet -m users >> /dev/null 2>&1 &\nfi\necho \"\"\n"
        }
      ]
    }
  ]
}