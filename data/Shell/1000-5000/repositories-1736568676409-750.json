{
  "metadata": {
    "timestamp": 1736568676409,
    "page": 750,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc1OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sameersbn/docker-redmine",
      "stars": 1286,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0732421875,
          "content": ".git\ncircle.yml\ndocker-compose.yml\nLICENSE\nREADME.md\nChangelog.md\nMakefile\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "*.zip\n*.tar.gz\n*.gem\nnode_modules\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.24609375,
          "content": "sudo: true\ndist: trusty\n\njobs:\n  include:\n    - stage: test\n      script:\n      - docker build -t docker-redmine .\n      - docker build -t docker-redmine-test ./test\n      - echo docker run -d docker-redmine\n      - docker run --rm docker-redmine-test\n"
        },
        {
          "name": "Changelog.md",
          "type": "blob",
          "size": 12.4072265625,
          "content": "# Changelog\n\n**6.0.2**\n- redmine: upgrade to v6.0.2\n\n**6.0.1-2**\n- Fix `REDMINE_RELATIVE_URL_ROOT` for puma #570\n\n**6.0.1-1**\n- Replace unicorn application server with puma #569\n\n**6.0.1**\n- redmine: upgrade to v6.0.1\n- `make test-release` now creates certificates for ssl\n\n**5.1.4**\n- redmine: upgrade to v5.1.4\n\n**5.1.3**\n- redmine: upgrade to v5.1.3\n\n**5.1.2-1**\n- Fix SMTP_SSL configuration #545\n- Fix tx isolation detection for mysql #550\n- Add logger level config support #551\n- Fix imap cronjob [#553](https://github.com/sameersbn/docker-redmine/issues/553)\n- Update rake documentation [#553](https://github.com/sameersbn/docker-redmine/issues/553)\n\n**5.1.2**\n- redmine: upgrade to v5.1.2\n- Remove bundler version pin\n\n**5.1.1-5**\n- Only update file-permissions when needed on server start #547\n\n**5.1.1-4**\n- Switch to Ruby 3.2\n- Replace ubuntu as base image with ruby:3.2-slim-bookworm\n- Remove DB_SSL_MODE from mysql and mariadb example docker-compose files as mariadb does not support it\n\n**5.1.1-3**\n- Add SMTP_SSL option #513\n\n**5.1.1-2**\n- Instead of settings transaction isolation level, check and print a warning if it is not set to READ-COMMITTED. #531\n- Update mysql/mariadb docker compose examples to set transaction isolation level to READ-COMMITTED. #531\n\n**5.1.1-1**\n- Update to ubuntu:focal-20231211\n- Fix mysql signing key\n- Pin bundler version to 2.4.22, as newer versions are not compatible with ruby 2.7\n\n**5.1.1**\n\n- redmine upgrade to v5.1.1\n- Set transaction isolation level for mysql to fix race condition\nhttps://www.redmine.org/projects/redmine/wiki/MySQL_configuration\n- Fix fetch commits cron job #526\n\n**5.1.0**\n\n- redmine upgrade to v5.1.0\n- Update to ubuntu-focal-20231003\n- Upgrade unicorn gem from 5.x to 6.x\n- Upgrade dalli gem from 2.x to 3.2.x\n\n**5.0.6**\n\n- redmine upgrade to v5.0.6\n- Update to ubuntu-focal-20230801\n\n**5.0.5**\n\n- redmine: upgrade to v5.0.5\n- Update to ubuntu:focal-20230301\n\n**5.0.4**\n\n- redmine: upgrade to v5.0.4\n- Update to ubuntu:focal-20221019 for Text4Shell CVE\n\n**5.0.3-1**\n\n- Actually update to ubuntu:focal-20220826\n- nginx: Update ssl config to disable TLSv1.0/1.1 and enable TLSv1.2/1.3\n- nginx: Set expires on static files and enable gzip\n\n**5.0.3**\n\n- redmine: upgrade to v5.0.3\n- Update to ubuntu:focal-20220826\n\n**5.0.2**\n\n- redmine: upgrade to v5.0.2\n\n**5.0.1**\n\n- redmine: upgrade to v5.0.1\n\n**5.0.0-1**\n\n- Add docker-compose-memcached.yml example\n- Switch cache_store from dalli_store to mem_cache_store, issue [#501](https://github.com/sameersbn/docker-redmine/issues/501)\n\n**5.0.0**\n\n- redmine: upgrade to v5.0.0\n\n**4.2.5**\n\n- redmine: upgrade to v4.2.5\n- Update to ubuntu:focal-20220316\n\n**4.2.4**\n\n- redmine: upgrade to v4.2.4\n- Update to Ruby 2.7.5, issue [#488](https://github.com/sameersbn/docker-redmine/issues/488)\n- Update to ubuntu focal-20220105 base image for sure this time...\n\n**4.2.3-2**\n\n- Revert to Ruby 2.6.3, issue [#488](https://github.com/sameersbn/docker-redmine/issues/488)\n\n**4.2.3-1**\n\n- Update to ubuntu focal-20220105 base image\n- Update to Ruby 2.7.5\n- Update gpg key for mysql\n\n**4.2.3**\n\n- redmine: upgrade to v4.2.3\n\n**4.2.2-1**\n\n- Silence supervisord run as root warning\n- Add DB_SSL_MODE option for both postgresql and mysql\n\n**4.2.2**\n\n- redmine: upgrade to v4.2.2\n\n**4.2.1-1**\n\n- Fix keyserver #470\n- Update to ubuntu focal-20210609 base image\n\n**4.2.1**\n\n- redmine: upgrade to v4.2.1\n\n**4.2.0-1**\n\n- Fixed mysql-client version to 5.7, issue #463\n\n**4.2.0**\n\n- redmine: upgrade to v4.2.0\n\n**4.1.2**\n\n- redmine: upgrade to v4.1.2\n- use `ubuntu:focal-20210217` as docker base image\n- update system packages\n\n**4.1.1-9**\n\n- Upgrade to Ruby 2.6 as 2.4,2.5 are EOL\n\n**4.1.1-8**\n\n- Add DB_SKIP_CHECK (#445)\n- Run database check as redmine user (#445)\n\n**4.1.1-7**\n\n- Add REDMINE_RMAGICK_FONT_PATH parameter for Redmine 3.4 (#439)\n- Rename REDMINE_RMAGICK_FONT_PATH to REDMINE_MINIMAGICK_FONT_PATH for Redmine 4.1 (#443)\n\n**4.1.1-6**\n\n- Fix typo for saving IMAGE_VERSION, issue #435\n\n**4.1.1-5**\n\n- Fix sqlite image migration from older versions, issue #431\n\n**4.1.1-4**\n\n- Add sqlite support, issue #350\n\n**4.1.1-3**\n\n- Ensure cron uses same timezone as rest of redmine, issue #257\n\n**4.1.1-2**\n\n- Update ImageMagick policy to allow PDF read for thumbnail generation. (#421)\n\n**4.1.1-1**\n\n- Install ghostscript to enable ImageMagick PDF support #420\n- Fix bundler deprecation warnings #417\n\n**4.1.1**\n\n- redmine: upgrade to v4.1.1\n\n**4.1.0**\n\n- redmine: upgrade to v4.1.0\n\n**4.0.5**\n\n- redmine: upgrade to v4.0.5\n- Fix \"CRIT Server 'unix_http_server' running without any HTTP authentication checking\"\n\n**4.0.4**\n\n- redmine: upgrade to v4.0.4\n\n**4.0.3-2**\n\n- Fix logrotate. Issue #402\n\n**4.0.3-1**\n\n- Update xenial to 20190222. PR: #397\n\n**4.0.3**\n\n- redmine: upgrade to v4.0.3\n\n**4.0.2**\n\n- redmine: upgrade to v4.0.2\n\n**4.0.1**\n\n- redmine: upgrade to v4.0.1\n\n**4.0.0-3**\n\n- Fix unicorn crash by avoiding version 5.5.0, Issue #292\n\n**4.0.0-2**\n\n- Improve cipher suite, based on Mozilla's TLS recommendations. Issue #226\n- Fix to avoid adding double \"secure\" flags for cookies. Issue #297\n\n**4.0.0-1**\n\n- Fix REDMINE_FETCH_COMMITS for redmine 4.x\n\n**4.0.0**\n\n- redmine: upgrade to v.4.0.0\n- Fix function tmp:sessions:clear\n- Update ruby to v2.4\n- Support single quotes in yaml to fix issue #378\n\n**3.4.7-1**\n\n- Fix app:backup:create by installing latest postgresql-client. Issue #364\n\n**3.4.7**\n\n- redmine: upgrade to v3.4.7\n- Update mysql image\n- Update memcache image\n- Update postgresql image\n- switch to `ubuntu:trusty-20180712` base image\n- renamed `REDMINE_CACHE_DIR` to `REDMINE_ASSETS_DIR`, `REDMINE_BUILD_DIR` to `REDMINE_BUILD_ASSETS_DIR`, `REDMINE_RUNTIME_DIR` to `REDMINE_RUNTIME_ASSETS_DIR`\n- upgrade to `ubuntu:xenial-20180705`\n- Add: IMAP configuration parameter PROJECT_FROM_SUBADRESS\n- Fix mysql version in docker-compose-mysql.yml\n- Comment out pam_loginuid.so so cron jobs work\n\n**3.4.6**\n\n- redmine: upgrade to v3.4.6\n\n**3.4.5**\n\n- redmine: upgrade to v.3.4.5\n\n**3.4.4-3**\n\n- Added commands to install plugins/themes on running docker\n- Only config ssl and starttls if configured as true. Fixes issue #318\n- functions: Fix no error message when mysql database can't be contacted\n- functions: Update tar commands to auto-detect compression\n\n**3.4.4-2**\n\n- Undo accidental change to REDMINE_VERSION\n\n**3.4.4-1**\n\n- nginx: Fix REDMINE_RELATIVE_URL_ROOT #324\n\n**3.4.4**\n\n- redmine: upgrade to v.3.4.4\n\n**3.4.3**\n\n- Add docker-compose-mysql.yml\n- Fixes REDMINE_RELATIVE_URL_ROOT breaks nginx handling files #240\n- redmine: upgrade to v.3.4.3\n\n**3.4.2**\n\n- redmine: upgrade to v.3.4.2\n\n**3.4.1**\n\n- redmine: upgrade to v.3.4.1\n\n**3.4.0**\n\n- redmine: upgrade to v.3.4.0\n\n**3.3.4**\n\n- added `IMAP_STARTTLS`, `IMAP_FOLDER`, `IMAP_MOVE_ON_SUCCESS`, `IMAP_MOVE_ON_FAILURE` configuration parameters\n- upgrade to ruby2.3\n- redmine: upgrade to v.3.3.4\n\n**3.3.0**\n\n- redmine: upgrade to v.3.3.0\n\n**3.2.3**\n\n- redmine: upgrade to v.3.2.3\n\n**3.2.2**\n\n- redmine: upgrade to v.3.2.2\n\n**3.2.1**\n\n- redmine: upgrade to v.3.2.1\n\n**3.2.0-3**\n\n- `DB_TYPE` parameter renamed to `DB_ADAPTER` with `mysql2` and `postgresql` as accepted values.\n- exposed `DB_ENCODING` parameter\n- complete rewrite\n- renamed config `CA_CERTIFICATES_PATH` to `SSL_CA_CERTIFICATES_PATH`\n- renamed config `REDMINE_HTTPS_HSTS_ENABLED` to `NGINX_HSTS_ENABLED`\n- renamed config `REDMINE_HTTPS_HSTS_MAXAGE` to `NGINX_HSTS_MAXAGE`\n- install `darcs`\n- expose `REDMINE_ATTACHMENTS_DIR` parameter\n- expose `REDMINE_SECRET_TOKEN` parameter\n- expose `REDMINE_SUDO_MODE_ENABLED` and `REDMINE_SUDO_MODE_TIMEOUT` parameters\n- expose `REDMINE_CONCURRENT_UPLOADS` parameter\n- added `NGINX_ENABLED` parameter to disable the Nginx server\n- feature: create backups\n- feature: restore backups\n- added `REDMINE_BACKUP_EXPIRY` option\n- feature: automatic backups\n- renamed parameter `REDMINE_BACKUPS` to `REDMINE_BACKUP_SCHEDULE`\n\n**3.2.0**\n\n- redmine: upgrade to v.3.2.0\n\n**3.1.3**\n\n- redmine: upgrade to v.3.1.3\n\n**3.1.2**\n\n- redmine: upgrade to v.3.1.2\n\n**3.1.1**\n\n- renamed `plugins/init` script to `plugins/post-install.sh`\n- added `plugins/pre-install.sh` script to execute commands before plugin installation\n- redmine: upgrade to v.3.1.1\n\n**3.1.0-2**\n\n- added support for receiving emails via IMAP\n\n**3.1.0**\n\n- redmine: upgrade to v.3.1.0\n\n**3.0.4**\n\n- added `SMTP_TLS` configuration parameter\n- redmine: upgrade to v.3.0.4\n\n**3.0.3-1**\n\n- install: fix typo in `bundle install` command :facepalm:\n- base image update to fix SSL vulnerability\n\n**3.0.3**\n\n- redmine: upgrade to v.3.0.3\n\n**3.0.2**\n\n- redmine: upgrade to v.3.0.2\n\n**3.0.1**\n\n- fix: avoid duplicate cron entries for 'Repository.fetch_changesets'\n- fix: update the path of 'script/rails' script to 'bin/rails' in v.3.0.0\n- redmine: upgrade to v.3.0.1\n\n**3.0.0**\n\n- redmine: upgrade to v.3.0.0\n\n**2.6.2**\n\n- update postgresql client to the latest version\n- redmine: upgrade to v.2.6.2\n\n**2.6.1**\n\n- added `NGINX_WORKERS` configuration option\n- enable IPv6 support\n- added `SSL_VERIFY_CLIENT` configuration option\n- redmine: upgrade to v.2.6.1\n\n**2.6.0-1**\n\n- fix: create the `${DATA_DIR}/tmp/` directory at startup\n\n**2.6.0**\n\n- redmine: upgrade to v.2.6.0\n\n**2.5.3**\n\n- redmine: upgrade to v.2.5.3\n- added SMTP_OPENSSL_VERIFY_MODE configuration option\n- feature: redmine logs volume\n- autostart all daemons when supervisord is started\n- removed internal mysql server\n- added support for fetching `DB_NAME`, `DB_USER` and `DB_PASS` from the postgresql linkage\n- added support for fetching `DB_NAME`, `DB_USER` and `DB_PASS` from the mysql linkage\n- keep development and build packages\n\n**2.5.2-3**\n\n- upgrade to sameersbn/debian:jessie.20141001\n- added REDMINE_HTTPS_HSTS_ENABLED configuration option (advanced config)\n- added REDMINE_HTTPS_HSTS_MAXAGE configuration option (advanced config)\n- shutdown container gracefully\n- use sameersbn/debian:jessie.20140918 base image\n- added REDMINE_FETCH_COMMITS configuration option\n- added support for external/linked memcached servers\n- removed internal memcached server\n- run a daily cron job to fetch commits\n- fix: run nginx workers as redmine user\n\n**2.5.2-2**\n\n- added system for users to install themes\n- removed pre-installed themes\n- added system for users to install plugins\n- removed app:db:migrate command\n- removed pre-installed plugins\n\n**2.5.2-1**\n\n- added app:rake command to execute rake commands\n- added REDMINE_PORT configuration option\n- enabled SPDY support\n- added NGINX_X_FORWARDED_PROTO configuration option\n- added REDMINE_HTTPS and associated configuration options\n- upgrade to nginx-1.6.x series from the nginx/stable ppa\n- update to sameersbn/ubuntu:14.04.20140628 image\n- added new SMTP_ENABLED configuration option. Fixes #30\n- moved data volume path to /home/redmine/data\n- added REDMINE_RELATIVE_URL_ROOT configuration option (thanks to @k-kagurazaka)\n- update to the sameersbn/ubuntu:12.04.20140812 baseimage\n- automatically migrate the database when the redmine version changes\n\n**2.5.2**\n\n- switch to ruby1.2\n- upgrade to redmine 2.5.2\n- upgrade redmine_agile plugin to version 1.3.2\n- update to sameersbn/ubuntu:12.04.20140628\n- do not start openssh-server anymore, use nsenter to get shell access\n- added nginx to proxy requests to unicorn\n- upgrade redmine_contacts to version 3.2.17\n- added SMTP_AUTHENTICATION configuration option\n- added UNICORN_TIMEOUT configuration option\n- added UNICORN_WORKERS configuration option\n- replaced apache+passenger with unicorn app server\n- added redmine_contacts plugin version 3.2.16\n- upgrade redmine_agile plugin to version 1.3.1\n\n**2.5.1**\n\n- upgrade redmine_agile plugin to version 1.3.0\n- upgrade redmine_agile plugin to version 1.2.0\n- use sameersbn/ubuntu as the base docker image\n- upgrade redmine_people plugin to version 0.1.8\n- use redmine announcements version 1.3\n- use redmine tags version 2.1.0\n- support linking to mysql and postgresql containers\n- added postgresql server support\n- upgrade to redmine_agile v1.1.2\n- added SMTP_STARTTLS config option\n- added SMTP_DOMAIN config option\n- updated gems cache\n- install ruby1.9.1 from ubuntu repos\n- added redmine dashboard plugin\n- added redmine agile plugin\n- repo reorganization\n\n**v.2.5.0**\n\n- upgrade to redmine-2.5.0\n- added new circle theme\n- update recurring_tasks plugin to v1.3.0\n- update redmine_tags plugin\n- update redmine_gist plugin\n\n**v2.4.4**\n\n- upgrade to redmine-2.4.4\n- do not perform system upgrades (http://crosbymichael.com/dockerfile-best-practices-take-2.html)\n- added memcache support\n- restructured README with TOC\n- added Changelog\n- added DB_PORT configuration option\n- update system packages\n\n**v2.4.3**\n\n- upgraded to redmine-2.4.3\n- generate random root password\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.646484375,
          "content": "FROM ruby:3.3-slim-bookworm\n\nLABEL maintainer=\"sameer@damagehead.com\"\n\nENV REDMINE_VERSION=6.0.2 \\\n    REDMINE_USER=\"redmine\" \\\n    REDMINE_HOME=\"/home/redmine\" \\\n    REDMINE_LOG_DIR=\"/var/log/redmine\" \\\n    REDMINE_ASSETS_DIR=\"/etc/docker-redmine\" \\\n    RAILS_ENV=production\n\nENV REDMINE_INSTALL_DIR=\"${REDMINE_HOME}/redmine\" \\\n    REDMINE_DATA_DIR=\"${REDMINE_HOME}/data\" \\\n    REDMINE_BUILD_ASSETS_DIR=\"${REDMINE_ASSETS_DIR}/build\" \\\n    REDMINE_RUNTIME_ASSETS_DIR=\"${REDMINE_ASSETS_DIR}/runtime\"\n\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \\\n      supervisor logrotate nginx mariadb-client postgresql-client ca-certificates sudo tzdata \\\n      imagemagick subversion git cvs bzr mercurial darcs rsync locales openssh-client \\\n      gcc g++ make patch pkg-config gettext-base libc6-dev zlib1g-dev libxml2-dev \\\n      default-libmysqlclient-dev libmariadb-dev libpq5 libyaml-0-2 libcurl4 libssl3 uuid-dev xz-utils \\\n      libxslt1.1 libffi8 zlib1g gsfonts vim-tiny ghostscript sqlite3 libsqlite3-dev jq\\\n && update-locale LANG=C.UTF-8 LC_MESSAGES=POSIX \\\n && gem install --no-document bundler \\\n && rm -rf /var/lib/apt/lists/*\n\nCOPY assets/build/ ${REDMINE_BUILD_ASSETS_DIR}/\n\nRUN bash ${REDMINE_BUILD_ASSETS_DIR}/install.sh\n\nCOPY assets/runtime/ ${REDMINE_RUNTIME_ASSETS_DIR}/\n\nCOPY assets/tools/ /usr/bin/\n\nCOPY entrypoint.sh /sbin/entrypoint.sh\n\nCOPY VERSION /VERSION\n\nRUN chmod 755 /sbin/entrypoint.sh \\\n && sed -i '/session    required     pam_loginuid.so/c\\#session    required   pam_loginuid.so' /etc/pam.d/cron\n\nEXPOSE 80/tcp 443/tcp\n\nWORKDIR ${REDMINE_INSTALL_DIR}\n\nENTRYPOINT [\"/sbin/entrypoint.sh\"]\n\nCMD [\"app:start\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Sameer Naik\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.9912109375,
          "content": "IMAGE:=sameersbn/redmine\nCERTS_DIR=certs\nCERT_FILES=$(CERTS_DIR)/redmine.crt $(CERTS_DIR)/dhparam.pem\n\n.PHONY: test-release generate-certs clean\n\nall: build\n\nhelp:\n\t@echo \"\"\n\t@echo \"-- Help Menu\"\n\t@echo \"\"\n\t@echo \"   1. make build       - build the redmine image\"\n\t@echo \"   2. make quickstart  - start redmine\"\n\t@echo \"   3. make stop        - stop redmine\"\n\t@echo \"   4. make logs        - view logs\"\n\t@echo \"   5. make purge       - stop and remove the container\"\n\nbuild:\n\t@docker build --tag=$(IMAGE) .\n\n\ntest-release: generate-certs\n\t@echo Clean old run\n\tsudo rm -rf /srv/docker/redmine/\n\tsudo mkdir -p /srv/docker/redmine/redmine\n\tsudo cp -rf $(CERTS_DIR) /srv/docker/redmine/redmine/\n\tdocker compose down\n\tdocker compose build\n\tdocker compose up\n\ngenerate-certs: $(CERT_FILES)\n\n$(CERTS_DIR):\n\tmkdir -p $(CERTS_DIR)\n\n$(CERTS_DIR)/redmine.key: | $(CERTS_DIR)\n\topenssl genrsa -out $(CERTS_DIR)/redmine.key 2048\n\n$(CERTS_DIR)/redmine.csr: $(CERTS_DIR)/redmine.key\n\topenssl req -new -key $(CERTS_DIR)/redmine.key -out $(CERTS_DIR)/redmine.csr\n\n$(CERTS_DIR)/redmine.crt: $(CERTS_DIR)/redmine.csr $(CERTS_DIR)/redmine.key\n\topenssl x509 -req -days 365 -in $(CERTS_DIR)/redmine.csr -signkey $(CERTS_DIR)/redmine.key -out $(CERTS_DIR)/redmine.crt\n\n$(CERTS_DIR)/dhparam.pem: | $(CERTS_DIR)\n\topenssl dhparam -out $(CERTS_DIR)/dhparam.pem 2048\n\nclean:\n\trm -rf $(CERTS_DIR)\n\nrelease:\n\t./make_release.sh\n\t@echo \"Open https://github.com/sameersbn/docker-redmine/releases and Draft new release\"\n\nquickstart:\n\t@echo \"Starting redmine...\"\n\t@docker run --name=redmine-demo -d -p 10080:80 \\\n\t\t-v /var/run/docker.sock:/run/docker.sock \\\n\t\t-v $(shell which docker):/bin/docker \\\n\t\t$(IMAGE) >/dev/null\n\t@echo \"Please be patient. This could take a while...\"\n\t@echo \"Redmine will be available at http://localhost:10080\"\n\t@echo \"Type 'make logs' for the logs\"\n\nstop:\n\t@echo \"Stopping redmine...\"\n\t@docker stop redmine-demo >/dev/null\n\npurge: stop\n\t@echo \"Removing stopped container...\"\n\t@docker rm redmine-demo >/dev/null\n\nlogs:\n\t@docker logs -f redmine-demo\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 50.5966796875,
          "content": "[![redmine](https://github.com/sameersbn/docker-redmine/actions/workflows/build.yml/badge.svg)](https://github.com/sameersbn/docker-redmine/actions/workflows/build.yml)\n[![Join the chat at https://gitter.im/direktspeed/docker-redmine](https://badges.gitter.im/direktspeed/docker-redmine.svg)](https://gitter.im/direktspeed/docker-redmine?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n# Table of Contents\n\n- [Table of Contents](#table-of-contents)\n- [Introduction](#introduction)\n  - [Version](#version)\n- [Contributing](#contributing)\n- [Issues](#issues)\n- [Installation](#installation)\n- [Quick Start](#quick-start)\n- [Configuration](#configuration)\n  - [Data Store](#data-store)\n  - [Database](#database)\n    - [MySQL](#mysql)\n      - [Internal MySQL Server](#internal-mysql-server)\n      - [External MySQL Server](#external-mysql-server)\n      - [Linking to MySQL Container](#linking-to-mysql-container)\n    - [PostgreSQL](#postgresql)\n      - [External PostgreSQL Server](#external-postgresql-server)\n      - [Linking to PostgreSQL Container](#linking-to-postgresql-container)\n    - [AWS RDS Integration](#aws-rds-integration)\n  - [Memcached (Optional)](#memcached-optional)\n    - [External Memcached Server](#external-memcached-server)\n    - [Linking to Memcached Container](#linking-to-memcached-container)\n    - [Mail](#mail)\n    - [SSL](#ssl)\n      - [Generation of Self Signed Certificates](#generation-of-self-signed-certificates)\n      - [Strengthening the server security](#strengthening-the-server-security)\n      - [Installation of the SSL Certificates](#installation-of-the-ssl-certificates)\n      - [Enabling HTTPS support](#enabling-https-support)\n      - [Configuring HSTS](#configuring-hsts)\n      - [Using HTTPS with a load balancer](#using-https-with-a-load-balancer)\n    - [Deploy to a subdirectory (relative url root)](#deploy-to-a-subdirectory-relative-url-root)\n    - [Apache Proxy as frontend](#apache-proxy-as-frontend)\n    - [Mapping host user and group](#mapping-host-user-and-group)\n    - [Available Configuration Parameters](#available-configuration-parameters)\n- [Plugins](#plugins)\n  - [Installing Plugins](#installing-plugins)\n    - [Reloading plugins for development](#reloading-plugins-for-development)\n  - [Uninstalling Plugins](#uninstalling-plugins)\n- [Themes](#themes)\n  - [Installing Themes](#installing-themes)\n    - [Reloading themes for development](#reloading-themes-for-development)\n  - [Uninstalling Themes](#uninstalling-themes)\n- [Maintenance](#maintenance)\n  - [Creating backups](#creating-backups)\n  - [Restoring Backups](#restoring-backups)\n  - [Automated backups](#automated-backups)\n  - [Rake Tasks](#rake-tasks)\n  - [Upgrading](#upgrading)\n  - [Shell Access](#shell-access)\n- [Development](#development)\n  - [Upgrading to next redmine release](#upgrading-to-next-redmine-release)\n- [References](#references)\n\n# Introduction\n\nDockerfile to build a [Redmine](http://www.redmine.org/) container image.\n\n## Version\n\nCurrent Version: **sameersbn/redmine:6.0.2**\n\n_P.S.: If your installation depends on various third party plugins, please stick with 2.6.xx series to avoid breakage._\n\n# Contributing\n\nIf you find this image useful here's how you can help:\n\n- Send a Pull Request with your awesome new features and bug fixes\n- Help new users with [Issues](https://github.com/sameersbn/docker-redmine/issues) they may encounter\n- Support the development of this image with a [donation](http://www.damagehead.com/donate/)\n\n# Issues\n\nDocker is a relatively new project and is active being developed and tested by a thriving community of developers and testers and every release of docker features many enhancements and bugfixes.\n\nGiven the nature of the development and release cycle it is very important that you have the latest version of docker installed because any issue that you encounter might have already been fixed with a newer docker release.\n\nInstall the most recent version of the Docker Engine for your platform using the [official Docker releases](http://docs.docker.com/engine/installation/), which can also be installed using:\n\n```bash\nwget -qO- https://get.docker.com/ | sh\n```\n\nFedora and RHEL/CentOS users should try disabling selinux with `setenforce 0` and check if resolves the issue. If it does than there is not much that I can help you with. You can either stick with selinux disabled (not recommended by redhat) or switch to using ubuntu.\n\nIf using the latest docker version and/or disabling selinux does not fix the issue then please file a issue request on the [issues](https://github.com/sameersbn/docker-redmine/issues) page.\n\nIn your issue report please make sure you provide the following information:\n\n- The host distribution and release version.\n- Output of the `docker version` command.\n- Output of the `docker info` command.\n- The `docker run` command you used to run the image (mask out the sensitive bits).\n\n# Installation\n\nAutomated builds of the image are available on [Dockerhub](https://hub.docker.com/r/sameersbn/redmine) and is the recommended method of installation.\n\n> **Note**: Builds are also available on [Quay.io](https://quay.io/repository/sameersbn/redmine)\n\n```bash\ndocker pull sameersbn/redmine:latest\n```\n\nSince version `2.4.2`, the image builds are being tagged. You can now pull a particular version of redmine by specifying the version number. For example,\n\n```bash\ndocker pull sameersbn/redmine:6.0.2\n```\n\nAlternately you can build the image yourself.\n\n```bash\ndocker build -t sameersbn/redmine github.com/sameersbn/docker-redmine\n```\n\n# Quick Start\n\nThe quickest way to get started is using [docker compose](https://docs.docker.com/compose/).\n\n```bash\nwget https://raw.githubusercontent.com/sameersbn/docker-redmine/master/docker-compose.yml\ndocker compose up\n```\n\nAlternately, you can manually launch the `redmine` container and the supporting `postgresql` container by following this two step guide.\n\nStep 1. Launch a postgresql container\n\n```bash\ndocker run --name=postgresql-redmine -d \\\n  --env='DB_NAME=redmine_production' \\\n  --env='DB_USER=redmine' --env='DB_PASS=password' \\\n  --volume=/srv/docker/redmine/postgresql:/var/lib/postgresql \\\n  sameersbn/postgresql:14-20230628\n```\n\nStep 2. Launch the redmine container\n\n```bash\ndocker run --name=redmine -d \\\n  --link=postgresql-redmine:postgresql --publish=10083:80 \\\n  --env='REDMINE_PORT=10083' \\\n  --volume=/srv/docker/redmine/redmine:/home/redmine/data \\\n  --volume=/srv/docker/redmine/redmine-logs:/var/log/redmine/ \\\n  sameersbn/redmine:6.0.2\n```\n\n**NOTE**: Please allow a minute or two for the Redmine application to start.\n\nPoint your browser to `http://localhost:10083` and login using the default username and password:\n\n- username: **admin**\n- password: **admin**\n\nMake sure you visit the `Administration` link and `Load the default configuration` before creating any projects.\n\nYou now have the Redmine application up and ready for testing. If you want to use this image in production the please read on.\n\n_The rest of the document will use the docker command line. You can quite simply adapt your configuration into a `docker-compose.yml` file if you wish to do so._\n\n# Configuration\n\n## Data Store\n\nFor the file storage we need to mount a volume at the following location.\n\n- `/home/redmine/data`\n- `/var/log/redmine` for server logs\n\n> **NOTE**\n>\n> Existing users **need to move** the existing files directory inside `/srv/docker/redmine/redmine/`.\n>\n> ```bash\n> mkdir -p /srv/docker/redmine/redmine\n> mv /opt/redmine/files /srv/docker/redmine/redmine\n> ```\n\nSELinux users are also required to change the security context of the mount point so that it plays nicely with selinux.\n\n```bash\nmkdir -p /srv/docker/redmine/redmine\nsudo chcon -Rt svirt_sandbox_file_t /srv/docker/redmine/redmine\n```\n\nVolumes can be mounted in docker by specifying the **'-v'** option in the docker run command.\n\n```bash\ndocker run --name=redmine -it --rm \\\n  --volume=/srv/docker/redmine/redmine:/home/redmine/data \\\n  --volume=/srv/docker/redmine/redmine-logs:/var/log/redmine/ \\\n  sameersbn/redmine:6.0.2\n```\n\n## Database\n\nRedmine uses a database backend to store its data.\n\n### MySQL\n\n#### Internal MySQL Server\n\nThe internal mysql server has been removed from the image. Please use a linked [mysql](#linking-to-mysql-container) or [postgresql](#linking-to-postgresql-container) container instead or connect with an external [mysql](#external-mysql-server) or [postgresql](#external-postgresql-server) server.\n\nIf you have been using the internal mysql server follow these instructions to migrate to a linked mysql container:\n\nAssuming that your mysql data is available at `/srv/docker/redmine/mysql`\n\n```bash\ndocker run --name=mysql-redmine -d \\\n  --volume=/srv/docker/redmine/mysql:/var/lib/mysql \\\n  sameersbn/mysql:5.7.22-1\n```\n\nThis will start a mysql container with your existing mysql data. Now login to the mysql container and create a user for the existing `redmine_production` database.\n\nAll you need to do now is link this mysql container to the redmine container using the `--link=mysql-redmine:mysql` option and provide the `DB_NAME`, `DB_USER` and `DB_PASS` parameters.\n\nRefer to [Linking to MySQL Container](#linking-to-mysql-container) for more information.\n\n#### External MySQL Server\n\nThe image can be configured to use an external MySQL database instead of starting a MySQL server internally. The database configuration should be specified using environment variables while starting the Redmine image.\n\nBefore you start the Redmine image create user and database for redmine.\n\n```sql\nmysql -uroot -p\nCREATE USER 'redmine'@'%.%.%.%' IDENTIFIED BY 'password';\nCREATE DATABASE IF NOT EXISTS `redmine_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;\nGRANT SELECT, LOCK TABLES, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `redmine_production`.* TO 'redmine'@'%.%.%.%';\n```\n\nWe are now ready to start the redmine application.\n\n```bash\ndocker run --name=redmine -it --rm \\\n  --env='DB_ADAPTER=mysql2' \\\n  --env='DB_HOST=192.168.1.100' --env='DB_NAME=redmine_production' \\\n  --env='DB_USER=redmine' --env='DB_PASS=password' \\\n  --volume=/srv/docker/redmine/redmine:/home/redmine/data \\\n  --volume=/srv/docker/redmine/redmine-logs:/var/log/redmine/ \\\n  sameersbn/redmine:6.0.2\n```\n\nThis will initialize the redmine database and after a couple of minutes your redmine instance should be ready to use.\n\n#### Linking to MySQL Container\n\nYou can link this image with a mysql container for the database requirements. The alias of the mysql server container should be set to **mysql** while linking with the redmine image.\n\nIf a mysql container is linked, only the `DB_ADAPTER`, `DB_HOST` and `DB_PORT` settings are automatically retrieved using the linkage. You may still need to set other database connection parameters such as the `DB_NAME`, `DB_USER`, `DB_PASS` and so on.\n\nTo illustrate linking with a mysql container, we will use the [sameersbn/mysql](https://github.com/sameersbn/docker-mysql) image. When using docker-mysql in production you should mount a volume for the mysql data store. Please refer the [README](https://github.com/sameersbn/docker-mysql/blob/master/README.md) of docker-mysql for details.\n\nFirst, lets pull the mysql image from the docker index.\n\n```bash\ndocker pull sameersbn/mysql:5.7.22-1\n```\n\nFor data persistence lets create a store for the mysql and start the container.\n\nSELinux users are also required to change the security context of the mount point so that it plays nicely with selinux.\n\n```bash\nmkdir -p /srv/docker/redmine/mysql\nsudo chcon -Rt svirt_sandbox_file_t /srv/docker/redmine/mysql\n```\n\nThe run command looks like this.\n\n```bash\ndocker run --name=mysql-redmine -d \\\n  --env='DB_NAME=redmine_production' \\\n  --env='DB_USER=redmine' --env='DB_PASS=password' \\\n  --volume=/srv/docker/redmine/mysql:/var/lib/mysql \\\n  sameersbn/mysql:5.7.22-1\n```\n\nThe above command will create a database named `redmine_production` and also create a user named `redmine` with the password `password` with full/remote access to the `redmine_production` database.\n\nWe are now ready to start the redmine application.\n\n```bash\ndocker run --name=redmine -it --rm --link=mysql-redmine:mysql \\\n  --volume=/srv/docker/redmine/redmine:/home/redmine/data \\\n  --volume=/srv/docker/redmine/redmine-logs:/var/log/redmine/ \\\n  sameersbn/redmine:6.0.2\n```\n\nHere the image will also automatically fetch the `DB_NAME`, `DB_USER` and `DB_PASS` variables from the mysql container as they are specified in the `docker run` command for the mysql container. This is made possible using the magic of docker links and works with the following images:\n\n- [mysql](https://hub.docker.com/_/mysql/)\n- [sameersbn/mysql](https://quay.io/repository/sameersbn/mysql/)\n- [centurylink/mysql](https://hub.docker.com/r/centurylink/mysql/)\n- [orchardup/mysql](https://hub.docker.com/r/orchardup/mysql/)\n\n### PostgreSQL\n\n#### External PostgreSQL Server\n\nThe image also supports using an external PostgreSQL Server. This is also controlled via environment variables.\n\n```sql\nCREATE ROLE redmine with LOGIN CREATEDB PASSWORD 'password';\nCREATE DATABASE redmine_production;\nGRANT ALL PRIVILEGES ON DATABASE redmine_production to redmine;\n```\n\nWe are now ready to start the redmine application.\n\n```bash\ndocker run --name=redmine -it --rm \\\n  --env='DB_ADAPTER=postgresql' \\\n  --env='DB_HOST=192.168.1.100' --env='DB_NAME=redmine_production' \\\n  --env='DB_USER=redmine' --env='DB_PASS=password' \\\n  --volume=/srv/docker/redmine/redmine:/home/redmine/data \\\n  --volume=/srv/docker/redmine/redmine-logs:/var/log/redmine/ \\\n  sameersbn/redmine:6.0.2\n```\n\nThis will initialize the redmine database and after a couple of minutes your redmine instance should be ready to use.\n\n#### Linking to PostgreSQL Container\n\nYou can link this image with a postgresql container for the database requirements. The alias of the postgresql server container should be set to **postgresql** while linking with the redmine image.\n\nIf a postgresql container is linked, only the `DB_ADAPTER`, `DB_HOST` and `DB_PORT` settings are automatically retrieved using the linkage. You may still need to set other database connection parameters such as the `DB_NAME`, `DB_USER`, `DB_PASS` and so on.\n\nTo illustrate linking with a postgresql container, we will use the [sameersbn/postgresql](https://github.com/sameersbn/docker-postgresql) image. When using postgresql image in production you should mount a volume for the postgresql data store. Please refer the [README](https://github.com/sameersbn/docker-postgresql/blob/master/README.md) of docker-postgresql for details.\n\nFirst, lets pull the postgresql image from the docker index.\n\n```bash\ndocker pull sameersbn/postgresql:14-20230628\n```\n\nFor data persistence lets create a store for the postgresql and start the container.\n\nSELinux users are also required to change the security context of the mount point so that it plays nicely with selinux.\n\n```bash\nmkdir -p /srv/docker/redmine/postgresql\nsudo chcon -Rt svirt_sandbox_file_t /srv/docker/redmine/postgresql\n```\n\nThe run command looks like this.\n\n```bash\ndocker run --name=postgresql-redmine -d \\\n  --env='DB_NAME=redmine_production' \\\n  --env='DB_USER=redmine' --env='DB_PASS=password' \\\n  --volume=/srv/docker/redmine/postgresql:/var/lib/postgresql \\\n  sameersbn/postgresql:14-20230628\n```\n\nThe above command will create a database named `redmine_production` and also create a user named `redmine` with the password `password` with access to the `redmine_production` database.\n\nWe are now ready to start the redmine application.\n\n```bash\ndocker run --name=redmine -it --rm --link=postgresql-redmine:postgresql \\\n  --volume=/srv/docker/redmine/redmine:/home/redmine/data \\\n  --volume=/srv/docker/redmine/redmine-logs:/var/log/redmine/ \\\n  sameersbn/redmine:6.0.2\n```\n\nHere the image will also automatically fetch the `DB_NAME`, `DB_USER` and `DB_PASS` variables from the postgresql container as they are specified in the `docker run` command for the postgresql container. This is made possible using the magic of docker links and works with the following images:\n\n- [postgres](https://hub.docker.com/_/postgres/)\n- [sameersbn/postgresql](https://quay.io/repository/sameersbn/postgresql/)\n- [orchardup/postgresql](https://hub.docker.com/r/orchardup/postgresql/)\n- [paintedfox/postgresql](https://hub.docker.com/r/paintedfox/postgresql/)\n\n### AWS RDS Integration\n**docker-redmine** has support for fetching secrets from AWS Secrets Manager at runtime.\nRead [docs/aws.md](docs/aws.md) for detailed instructions.\n\n## Memcached (Optional)\n\nThis image can (optionally) be configured to use a memcached server to speed up Redmine. This is particularly useful when you have a large number users.\n\n### External Memcached Server\n\nThe image can be configured to use an external memcached server. The memcached server host and port configuration should be specified using environment variables `MEMCACHE_HOST` and `MEMCACHE_PORT` like so:\n\n_Assuming that the memcached server host is 192.168.1.100_\n\n```bash\ndocker run --name=redmine -it --rm \\\n  --env='MEMCACHE_HOST=192.168.1.100' --env='MEMCACHE_PORT=11211' \\\n  sameersbn/redmine:6.0.2\n```\n\n### Linking to Memcached Container\n\nAlternately you can link this image with a memcached container. The alias of the memcached server container should be set to **memcached** while linking with the redmine image.\n\nTo illustrate linking with a memcached container, we will use the [sameersbn/memcached](https://github.com/sameersbn/docker-memcached) image. Please refer the [README](https://github.com/sameersbn/docker-memcached/blob/master/README.md) of docker-memcached for details.\n\nFirst, lets pull and launch the memcached image from the docker index.\n\n```bash\ndocker run --name=memcached-redmine -d sameersbn/memcached:1.5.6\n```\n\nNow you can link memcached to the redmine image:\n\n```bash\ndocker run --name=redmine -it --rm --link=memcached-redmine:memcached \\\n  sameersbn/redmine:6.0.2\n```\n\n### Mail\n\nThe mail configuration should be specified using environment variables while starting the redmine image. The configuration defaults to using gmail to send emails and requires the specification of a valid username and password to login to the gmail servers.\n\nPlease refer the [Available Configuration Parameters](#available-configuration-parameters) section for the list of SMTP parameters that can be specified.\n\n```bash\ndocker run --name=redmine -it --rm \\\n  --env='SMTP_USER=USER@gmail.com' --env='SMTP_PASS=PASSWORD' \\\n  --volume=/srv/docker/redmine/redmine:/home/redmine/data \\\n  --volume=/srv/docker/redmine/redmine-logs:/var/log/redmine/ \\\n  sameersbn/redmine:6.0.2\n```\n\nIf you are not using google mail, then please configure the SMTP host and port using the `SMTP_HOST` and `SMTP_PORT` configuration parameters.\n\nIf you are using a google apps account with a custom domain (other than google.com), you need to set the `SMTP_DOMAIN` parameters or else you will get internal server error when doing an action that would normally send a mail.\n\nPlease see redmine email config for examples of different email configurations: https://www.redmine.org/projects/redmine/wiki/emailconfiguration\n\nSimilary you can configure receiving emails using the `IMAP_` configuration options. Please refer [Available Configuration Parameters](#available-configuration-parameters) for details. When receiving emails is enabled users can comment on issues by replying to emails.\n\n_P.S. The receiving emails feature is only available since versions `2.6.6-2`, `3.0.4-2` and `3.1.0-2`. Refer the [Changelog](Changelog.md) for details._\n\n### SSL\n\nAccess to the redmine application can be secured using SSL so as to prevent unauthorized access. While a CA certified SSL certificate allows for verification of trust via the CA, a self signed certificates can also provide an equal level of trust verification as long as each client takes some additional steps to verify the identity of your website. I will provide instructions on achieving this towards the end of this section.\n\nTo secure your application via SSL you basically need two things:\n\n- **Private key (.key)**\n- **SSL certificate (.crt)**\n\nWhen using CA certified certificates, these files are provided to you by the CA. When using self-signed certificates you need to generate these files yourself. Skip the following section if you are armed with CA certified SSL certificates.\n\nJump to the [Using HTTPS with a load balancer](#using-https-with-a-load-balancer) section if you are using a load balancer such as hipache, haproxy or nginx.\n\n#### Generation of Self Signed Certificates\n\nGeneration of self-signed SSL certificates involves a simple 3 step procedure.\n\n**STEP 1**: Create the server private key\n\n```bash\nopenssl genrsa -out redmine.key 2048\n```\n\n**STEP 2**: Create the certificate signing request (CSR)\n\n```bash\nopenssl req -new -key redmine.key -out redmine.csr\n```\n\n**STEP 3**: Sign the certificate using the private key and CSR\n\n```bash\nopenssl x509 -req -days 365 -in redmine.csr -signkey redmine.key -out redmine.crt\n```\n\nCongratulations! you have now generated an SSL certificate thats valid for 365 days.\n\n#### Strengthening the server security\n\nThis section provides you with instructions to [strengthen your server security](https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html). To achieve this we need to generate stronger DHE parameters.\n\n```bash\nopenssl dhparam -out dhparam.pem 2048\n```\n\n#### Installation of the SSL Certificates\n\nOut of the four files generated above, we need to install the `redmine.key`, `redmine.crt` and `dhparam.pem` files at the redmine server. The CSR file is not needed, but do make sure you safely backup the file (in case you ever need it again).\n\nThe default path that the redmine application is configured to look for the SSL certificates is at `/home/redmine/data/certs`, this can however be changed using the `SSL_KEY_PATH`, `SSL_CERTIFICATE_PATH` and `SSL_DHPARAM_PATH` configuration options.\n\nIf you remember from above, the `/home/redmine/data` path is the path of the [data store](#data-store), which means that we have to create a folder named certs inside `/srv/docker/redmine/redmine/` and copy the files into it and as a measure of security we will update the permission on the `redmine.key` file to only be readable by the owner.\n\n```bash\nmkdir -p /srv/docker/redmine/redmine/certs\ncp redmine.key /srv/docker/redmine/redmine/certs/\ncp redmine.crt /srv/docker/redmine/redmine/certs/\ncp dhparam.pem /srv/docker/redmine/redmine/certs/\nchmod 400 /srv/docker/redmine/redmine/certs/redmine.key\n```\n\nGreat! we are now just one step away from having our application secured.\n\n#### Enabling HTTPS support\n\nHTTPS support can be enabled by setting the `REDMINE_HTTPS` option to `true`.\n\n```bash\ndocker run --name=redmine -d \\\n  --publish=10083:80 --publish 10445:443 \\\n  --env='REDMINE_PORT=10445' --env='REDMINE_HTTPS=true' \\\n  --volume=/srv/docker/redmine/redmine:/home/redmine/data \\\n  --volume=/srv/docker/redmine/redmine-logs:/var/log/redmine/ \\\n  sameersbn/redmine:6.0.2\n```\n\nIn this configuration, any requests made over the plain http protocol will automatically be redirected to use the https protocol. However, this is not optimal when using a load balancer.\n\nNote: If startup prints `SSL keys and certificates were not found.` refer to [SSL](#ssl) and verify you put the certs in the correct place. Unless your trying to setup for [Using HTTPS with a load balancer](#using-https-with-a-load-balancer)\n\n#### Configuring HSTS\n\nHSTS if supported by the browsers makes sure that your users will only reach your server via HTTPS. When the user comes for the first time it sees a header from the server which states for how long from now this site should only be reachable via HTTPS - that's the HSTS max-age value.\n\nWith `NGINX_HSTS_MAXAGE` you can configure that value. The default value is `31536000` seconds. If you want to disable a already sent HSTS MAXAGE value, set it to `0`.\n\n```bash\ndocker run --name=redmine -d \\\n  --env='REDMINE_HTTPS=true' \\\n  --env='NGINX_HSTS_MAXAGE=2592000'\n  --volume=/srv/docker/redmine/redmine:/home/redmine/data \\\n  --volume=/srv/docker/redmine/redmine-logs:/var/log/redmine/ \\\n  sameersbn/redmine:6.0.2\n```\n\nIf you want to completely disable HSTS set `NGINX_HSTS_ENABLED` to `false`.\n\n#### Using HTTPS with a load balancer\n\nLoad balancers like nginx/haproxy/hipache talk to backend applications over plain http and as such the installation of ssl keys and certificates are not required and should **NOT** be installed in the container. The SSL configuration has to instead be done at the load balancer. Hoewever, when using a load balancer you **MUST** set `REDMINE_HTTPS` to `true`.\n\nWith this in place, you should configure the load balancer to support handling of https requests. But that is out of the scope of this document. Please refer to [Using SSL/HTTPS with HAProxy](http://seanmcgary.com/posts/using-sslhttps-with-haproxy) for information on the subject.\n\nWhen using a load balancer, you probably want to make sure the load balancer performs the automatic http to https redirection. Information on this can also be found in the link above.\n\nIn summation, when using a load balancer, the docker command would look for the most part something like this:\n\n```bash\ndocker run --name=redmine -d --publish=10083:80 \\\n  --env='REDMINE_HTTPS=true' \\\n  --volume=/srv/docker/redmine/redmine:/home/redmine/data \\\n  --volume=/srv/docker/redmine/redmine-logs:/var/log/redmine/ \\\n  sameersbn/redmine:6.0.2\n```\n\n### Deploy to a subdirectory (relative url root)\n\nBy default redmine expects that your application is running at the root (eg. /). This section explains how to run your application inside a directory.\n\nLet's assume we want to deploy our application to '/redmine'. Redmine needs to know this directory to generate the appropriate routes. This can be specified using the `REDMINE_RELATIVE_URL_ROOT` configuration option like so:\n\n```bash\ndocker run --name=redmine -d --publish=10083:80 \\\n  --env='REDMINE_RELATIVE_URL_ROOT=/redmine' \\\n  --volume=/srv/docker/redmine/redmine:/home/redmine/data \\\n  --volume=/srv/docker/redmine/redmine-logs:/var/log/redmine/ \\\n  sameersbn/redmine:6.0.2\n```\n\nRedmine will now be accessible at the `/redmine` path, e.g. `http://www.example.com/redmine`.\n\n**Note**: _The `REDMINE_RELATIVE_URL_ROOT` parameter should always begin with a slash and **SHOULD NOT** have any trailing slashes._\n\n### Apache Proxy as frontend\n\nRef #370\n\nApache config\n\n```\n# REDMINE Pass connections to docker\nProxyRequests Off\nProxyPass /redmine http://127.0.0.1:10083/redmine/\nProxyPassReverse /redmine http://127.0.0.1:10083/redmine/\n```\n\nNote the following should be set: `REDMINE_RELATIVE_URL_ROOT=/redmine` and port mapped `--publish=10083:80`\n\n### Mapping host user and group\n\nPer default the container is configured to run redmine as user and group `redmine` with `uid` and `gid` `1000`. The host possibly uses this ids for different purposes leading to unfavorable effects. From the host it appears as if the mounted data volumes are owned by the host's user/group `1000`.\n\nAlso the container processes seem to be executed as the host's user/group `1000`. The container can be configured to map the `uid` and `gid` of `redmine` user to different ids on host by passing the environment variables `USERMAP_UID` and `USERMAP_GID`. The following command maps the ids to user and group `redmine` on the host.\n\n```bash\ndocker run --name=redmine -it --rm [options] \\\n  --env=\"USERMAP_UID=500\" --env=\"USERMAP_GID=500\" \\\n  sameersbn/redmine:6.0.2\n```\n\n### Available Configuration Parameters\n\n_Please refer the docker run command options for the `--env-file` flag where you can specify all required environment variables in a single file. This will save you from writing a potentially long docker run command._\n\nBelow is the complete list of parameters that can be set using environment variables.\n\n- **REDMINE_HTTPS**: Enable HTTPS (SSL/TLS) port on server. Defaults to `false`\n- **REDMINE_PORT**: The port of the Redmine server. Defaults to `80` for plain http and `443` when https is enabled.\n- **REDMINE_RELATIVE_URL_ROOT**: The relative url of the Redmine server, e.g. `/redmine`. No default.\n- **REDMINE_ATTACHMENTS_DIR**: The attachments directory. Defaults to `/home/redmine/data/files`\n- **REDMINE_SECRET_TOKEN**: Secret key for verifying cookie session data integrity. Defaults to a random alphanumeric string.\n- **REDMINE_MINIMAGICK_FONT_PATH**: The minimagick_font_path for the png export function of GANTT to work. Defaults to `/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf`.\n- **REDMINE_CONCURRENT_UPLOADS**: Maximum number of simultaneous AJAX uploads. Defaults to `2`.\n- **REDMINE_SUDO_MODE_ENABLED**: Requires users to re-enter their password for sensitive actions. Defaults to `false`.\n- **REDMINE_SUDO_MODE_TIMEOUT**: Sudo mode timeout. Defaults to `15` minutes.\n- **REDMINE_FETCH_COMMITS**: Setup cron job to fetch commits. Possible values `disable`, `hourly`, `daily` or `monthly`. Disabled by default.\n- **REDMINE_AUTOLOGIN_COOKIE_NAME**: The name of autologin-cookie. Defaults to `autologin`.\n- **REDMINE_AUTOLOGIN_COOKIE_PATH**: The path of autologin-cookie. Defaults to `/`.\n- **REDMINE_AUTOLOGIN_COOKIE_SECURE**: Set autologin-cookie to secure. Defaults to `true` when `REDMINE_HTTPS` is `true`, else defaults to `false`.\n- **REDMINE_BACKUPS_DIR**: The backup folder in the container. Defaults to `/home/redmine/data/backups`\n- **REDMINE_BACKUP_SCHEDULE**: Setup cron job to schedule automatic backups. Possible values `disable`, `daily`, `weekly` or `monthly`. Disabled by default\n- **REDMINE_BACKUP_EXPIRY**: Configure how long (in seconds) to keep backups before they are deleted. By default when automated backups are disabled backups are kept forever (0 seconds), else the backups expire in 7 days (604800 seconds).\n- **REDMINE_BACKUP_TIME**: Set a time for the automatic backups in `HH:MM` format. Defaults to `04:00`.\n- **REDMINE_AVATAR_SERVER_URL**: Avatar server for displaying user icons. Defaults to `https://www.gravatar.com`\n- **DATABASE_URL**: The database URL. See [Configuring a Database](https://guides.rubyonrails.org/configuring.html#configuring-a-database). Possible schemes: `postgres`, `postgresql`, `mysql2`, and `sqlite3`. Defaults to no URL.\n- **DB_ADAPTER**: The database type. Possible values: `mysql2`, `postgresql`, and 'sqlite3'. Defaults to `mysql`.\n- **DB_CREATE**: Whether the db should be automatically created (`bundle exec rake db:create`). Defaults to `true`.\n- **DB_ENCODING**: The database encoding. For `DB_ADAPTER` values `postresql` and `mysql2`, this parameter defaults to `unicode` and `utf8` respectively. For full unicode support (all emojis) with mariadb or mysql set this to `utf8mb4` and make sure to also set all tables to `utf8mb4` and use `collate utf8mb4_unicode_ci`. Existing databases can be converted by following this [HowTo](https://www.redmine.org/projects/redmine/wiki/HowTo_convert_a_database_from_utf8_to_utf8mb4).\n- **DB_HOST**: The database server hostname. Defaults to `localhost`.\n- **DB_PORT**: The database server port. Defaults to `3306`.\n- **DB_NAME**: The database name. Defaults to `redmine_production`\n- **DB_USER**: The database user. Defaults to `root`\n- **DB_PASS**: The database password. Defaults to no password\n- **DB_POOL**: The database connection pool count. Defaults to `5`.\n- **DB_SKIP_CHECK**: Skip waiting for the database to start. Defaults to `false`.\n- **DB_SSL_MODE**: Configures the database ssl mode. Valid options for [postgresql](https://www.postgresql.org/docs/9.1/libpq-ssl.html) (disable|allow|prefer|require|verify-ca|verify-full) and [mysql](https://dev.mysql.com/doc/refman/5.7/en/connection-options.html#option_general_ssl-mode) (disable||preferred|required|verify_ca|verify_identity). Defaults to ''\n- **LOGGER_LEVEL**: Configures the amount of messages that are generated when redmine is running. Possible values are: `debug`, `info`, `warn`, `error`. Defaults to `info`\n- **NGINX_ENABLED**: Enable/disable the nginx server. Disabling Nginx is not recommended (see [#148](https://github.com/sameersbn/docker-redmine/pull/148)), use at your discretion. Defaults to `true`. When disabled publish port `8080` instead of the usual port `80` or `443`.\n- **NGINX_WORKERS**: The number of nginx workers to start. Defaults to `1`.\n- **NGINX_MAX_UPLOAD_SIZE**: Maximum acceptable upload size. Defaults to `20m`.\n- **NGINX_X_FORWARDED_PROTO**: Advanced configuration option for the `proxy_set_header X-Forwarded-Proto` setting in the redmine nginx vHost configuration. Defaults to `https` when `REDMINE_HTTPS` is `true`, else defaults to `$scheme`.\n- **NGINX_HSTS_ENABLED**: Advanced configuration option for turning off the HSTS configuration. Applicable only when SSL is in use. Defaults to `true`. See [#138](https://github.com/sameersbn/docker-gitlab/issues/138) for use case scenario.\n- **NGINX_HSTS_MAXAGE**: Advanced configuration option for setting the HSTS max-age in the redmine nginx vHost configuration. Applicable only when SSL is in use. Defaults to `31536000`.\n- **NGINX_CORS_ALLOW_ORIGIN**: Sets `Access-Control-Allow-Origin` response header to indicate that the response can be shared with requesting code from the given origin.\n- **NGINX_CORS_ALLOW_METHODS**: Sets `Access-Control-Allow-Methods` response header to specify the methods allowed when accessing the resource in response to a preflight request.\n- **NGINX_CORS_ALLOW_HEADERS**: Sets `Access-Control-Allow-Headers` response header to specify which headers can be used during the actual request.\n- **NGINX_CORS_ALLOW_CREDENTIALS**: Sets `Access-Control-Allow-Credentials` response header to tell browsers whether to expose the response to frontend JavaScript code when the request's credentials mode (Request.credentials) is include.\n- **PUMA_WORKERS**: The number of puma workers to start. Defaults to `2`.\n- **MEMCACHE_HOST**: The host name of the memcached server. No defaults.\n- **MEMCACHE_PORT**: The connection port of the memcached server. Defaults to `11211`.\n- **SSL_CERTIFICATE_PATH**: The path to the SSL certificate to use. Defaults to `/home/redmine/data/certs/redmine.crt`.\n- **SSL_KEY_PATH**: The path to the SSL certificate's private key. Defaults to `/home/redmine/data/certs/redmine.key`.\n- **SSL_DHPARAM_PATH**: The path to the Diffie-Hellman parameter. Defaults to `/home/redmine/data/certs/dhparam.pem`.\n- **SSL_VERIFY_CLIENT**: Enable verification of client certificates using the `SSL_CA_CERTIFICATES_PATH` file. Configures [ssl_verify_client](http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_verify_client) in nginx, options (`off`, `on`, `optional`, `optional_no_ca`). Defaults to `off`\n- **SSL_CA_CERTIFICATES_PATH**: List of SSL certificates to trust. Defaults to `/home/redmine/data/certs/ca.crt`.\n- **SMTP_ENABLED**: Enable mail delivery via SMTP. Defaults to `true` if `SMTP_USER` is defined, else defaults to `false`.\n- **SMTP_DOMAIN**: SMTP domain. Defaults to `www.gmail.com`\n- **SMTP_HOST**: SMTP server host. Defaults to `smtp.gmail.com`\n- **SMTP_PORT**: SMTP server port. Defaults to `587`.\n- **SMTP_USER**: SMTP username.\n- **SMTP_PASS**: SMTP password.\n- **SMTP_METHOD**: SMTP delivery method. Possible values: `smtp`. Defaults to `smtp`.\n- **SMTP_OPENSSL_VERIFY_MODE**: SMTP openssl verification mode. Accepted values are `none`, `peer`, `client_once` and `fail_if_no_peer_cert`. SSL certificate verification is performed by default.\n- **SMTP_STARTTLS**: Enable STARTTLS. Defaults to `true`.\n- **SMTP_TLS**: Enable SSL/TLS. Defaults to `false`.\n- **SMTP_SSL**: Enable SSL. Defaults to `false`.\nhttps://www.redmine.org/projects/redmine/wiki/EmailConfiguration#Error-TimeoutError-due-to-SSL-SMTP-server-connection\n- **SMTP_AUTHENTICATION**: Specify the SMTP authentication method. Defaults to `:login` if `SMTP_USER` is set.\n- **SMTP_CA_ENABLED**: Enable custom CA certificates for SMTP email configuration. Defaults to `false`.\n- **SMTP_CA_PATH**: Specify the `ca_path` parameter for SMTP email configuration. Defaults to `/home/redmine/data/certs`.\n- **SMTP_CA_FILE**: Specify the `ca_file` parameter for SMTP email configuration. Defaults to `/home/redmine/data/certs/ca.crt`.\n- **IMAP_ENABLED**: Enable receiving email via IMAP. Defaults to `false`.\n- **IMAP_USER**: IMAP username. Defaults to value of `SMTP_USER`. NOTE: May require escaping special characters for (CRON or Bash). Currently known: '%' needs to be escaped '\\%'\n- **IMAP_PASS**: IMAP password. Defaults to value of `SMTP_PASS`. NOTE: May require escaping special characters for (CRON or Bash). Currently known: '%' needs to be escaped '\\%'\n- **IMAP_HOST**: IMAP server host. Defaults to `imap.gmail.com`.\n- **IMAP_PORT**: IMAP server port. Defaults to `993`.\n- **IMAP_SSL**: IMAP enable SSL. Defaults to `true`.\n- **IMAP_STARTTLS**: IMAP enabled STARTTLS. Defaults to `false`.\n- **IMAP_INTERVAL**: The interval in minutes between checking emails. Defaults to `30`. Values allowed in the range `1 - 60`.\n- **IMAP_FOLDER**: IMAP folder to read. Defaults to `INBOX`.\n- **IMAP_MOVE_ON_SUCCESS**: Move emails that were successfully received to `MAILBOX` instead of deleting them.\n- **IMAP_MOVE_ON_FAILURE**: Move emails that were ignored to `MAILBOX`.\n- **INCOMING_EMAIL_UNKNOWN_USER**: How to handle emails from an unknown user. Accepted values are `ignore`, `accept` and `create`. Defaults to `ignore`.\n- **INCOMING_EMAIL_NO_PERMISSION_CHECK**: Disable permission checking when receiving the email. Defaults to `false`.\n- **INCOMING_EMAIL_NO_ACCOUNT_NOTICE**: Disable new user account notification. Defaults to `true`.\n- **INCOMING_EMAIL_DEFAULT_GROUP**: Adds created user to foo and bar groups.\n- **INCOMING_EMAIL_PROJECT**: Identifier of the target project.\n- **INCOMING_EMAIL_PROJECT_FROM_SUBADRESS**: ADDR select project from subaddress of ADDR found in To, Cc, Bcc headers.\n- **INCOMING_EMAIL_STATUS**: Name of the target status.\n- **INCOMING_EMAIL_TRACKER**: Name of the target tracker.\n- **INCOMING_EMAIL_CATEGORY**: Name of the target category.\n- **INCOMING_EMAIL_PRIORITY**: Name of the target priority.\n- **INCOMING_EMAIL_PRIVATE**: Create new issues as private.\n- **INCOMING_EMAIL_ALLOW_OVERRIDE**: Allow email content to override attributes specified by previous options. Value is a comma separated list of attributes. See [redmine documentation](http://www.redmine.org/projects/redmine/wiki/RedmineReceivingEmails#Fetching-emails-from-an-IMAP-server) for acceptable values.\n- **USERMAP_UID**: ID of user redmine inside container. Defaults to `1000`.\n- **USERMAP_GID**: ID of group redmine inside container. Defaults to `1000`.\n\n# Plugins\n\nThe functionality of redmine can be extended using plugins developed by the community. You can find a list of available plugins in the [Redmine Plugins Directory](http://www.redmine.org/plugins). You can also [search](https://github.com/search?type=Repositories&language=&q=redmine&repo=&langOverride=&x=0&y=0&start_value=1) for plugins on github.\n\n_Please check the plugin compatibility with the redmine version before installing a plugin._\n\n## Installing Plugins\n\nPlugins should be installed in the `plugins` directory at the [data store](#data-store). If you are following the readme verbatim, on the host this location would be `/srv/docker/redmine/redmine/plugins`.\n\n```bash\nmkdir -p /srv/docker/redmine/redmine/plugins\n```\n\nTo install a plugin, simply copy the plugin assets to the `plugins` directory. For example, to install the [recurring tasks](https://github.com/nutso/redmine-plugin-recurring-tasks) plugin:\n\n```bash\ncd /srv/docker/redmine/redmine/plugins\ngit clone https://github.com/nutso/redmine-plugin-recurring-tasks.git\n```\n\nFor most plugins this is all you need to do. With the plugin installed you can start the docker image normally. The image will detect that a plugin has been added (or removed) and automatically install the required gems and perform the plugin migrations and will be ready for use.\n\n**_If the gem installation fails after adding a new plugin, please retry after removing the `/srv/docker/redmine/redmine/tmp` directory_**\n\nIn some cases it might be necessary to install additional packages and/or perform some post installation setup for a plugin to function correctly. For such case the image allows you to install a `pre-install.sh` and `post-install.sh` script at the `/srv/docker/redmine/redmine/plugins` directory that will be executed everytime the image is started.\n\nFor example, the recurring tasks plugin requires that you create a cron job to periodically execute a rake task. To achieve this, create the `/srv/docker/redmine/redmine/plugins/post-install.sh` file with the following content:\n\n```bash\n## Recurring Tasks Configuration\n\n# get the list existing cron jobs for the redmine user\ncrontab -u redmine -l 2>/dev/null >/tmp/cron.redmine\n\n# add new job for recurring tasks if it does not exist\nif ! grep -q redmine:recur_tasks /tmp/cron.redmine; then\n  echo '@hourly /sbin/entrypoint.sh app:rake redmine:recur_tasks RAILS_ENV=production >> log/cron_rake.log 2>&1' >>/tmp/cron.redmine\n  crontab -u redmine /tmp/cron.redmine 2>/dev/null\nfi\n\n# remove the temporary file\nrm -rf /tmp/cron.redmine\n\n## End of Recurring Tasks Configuration\n```\n\nNow whenever the image is started the `post-install.sh` script will be executed and the required cron job will be installed.\n\nIf you need to install additional packages to satisfy a plugins dependencies then install such packages using the `pre-install.sh` script.\n\nPreviously this image packaged a couple of plugins by default. Existing users would notice that those plugins are no longer available. If you want them back, follow these instructions:\n\n```bash\ncd /srv/docker/redmine/redmine/plugins\nwget http://goo.gl/iJcvCP -O - | sh\n```\n\n_Please Note: this [plugin install script](https://gist.github.com/sameersbn/dd24dfdd13bc472d11a5) is not maintained and you would need to fix it if required (especially broken links)_\n\n### Reloading plugins for development\n\nChanging files in /srv/docker/redmine/redmine/plugins won't be automatically loaded. If you want\nto reload the plugins without restarting the docker, you can run the following.\n\n```bash\ndocker exec -it redmine redmine-install-plugins\n```\n\n## Uninstalling Plugins\n\nTo uninstall plugins you need to first tell redmine about the plugin you need to uninstall. This is done via a rake task:\n\n```bash\ndocker run --name=redmine -it --rm \\\n  --volume=/srv/docker/redmine/redmine:/home/redmine/data \\\n  --volume=/srv/docker/redmine/redmine-logs:/var/log/redmine/ \\\n  sameersbn/redmine:6.0.2 \\\n  app:rake redmine:plugins:migrate NAME=plugin_name VERSION=0\n```\n\nOnce the rake task has been executed, the plugin should be removed from the `/srv/docker/redmine/redmine/plugins/` directory.\n\n```bash\nrm -rf /srv/docker/redmine/redmine/plugins/plugin_name\n```\n\nAny configuration that you may have added in the `/srv/docker/redmine/redmine/plugins/post-install.sh` script for the plugin should also be removed.\n\nFor example, to remove the recurring tasks plugin:\n\n```bash\ndocker run --name=redmine -it --rm \\\n  --volume=/srv/docker/redmine/redmine:/home/redmine/data \\\n  --volume=/srv/docker/redmine/redmine-logs:/var/log/redmine/ \\\n  sameersbn/redmine:6.0.2 \\\n  app:rake redmine:plugins:migrate NAME=recurring_tasks VERSION=0\nrm -rf /srv/docker/redmine/redmine/plugins/recurring_tasks\n```\n\nNow when the image is started the plugin will be gone.\n\n# Themes\n\nJust like plugins, redmine allows users to install additional themes. You can find a list of available themes in the [Redmine Themes Directory](http://www.redmine.org/projects/redmine/wiki/Theme_List)\n\n## Installing Themes\n\nThemes should be installed in the `themes` directory at the [data store](#data-store). If you are following the readme verbatim, on the host this location would be `/srv/docker/redmine/redmine/themes`.\n\n```bash\nmkdir -p /srv/docker/redmine/redmine/themes\n```\n\nTo install a theme, simply copy the theme assets to the `themes` directory. For example, to install the [gitmike](https://github.com/makotokw/redmine-theme-gitmike) theme:\n\n```bash\ncd /srv/docker/redmine/redmine/themes\ngit clone https://github.com/makotokw/redmine-theme-gitmike.git gitmike\n```\n\nWith the theme installed you can start the docker image normally and the newly installed theme should be available for use.\n\nPreviously this image packaged a couple of themes by default. Existing users would notice that those themes are no longer available. If you want them back, follow these instructions:\n\n```bash\ncd /srv/docker/redmine/redmine/themes\nwget http://goo.gl/deKDpp -O - | sh\n```\n\n_Please Note: this [theme install script](https://gist.github.com/sameersbn/aaa1b7bb064703c1e23c) is not maintained and you would need to fix it if required (especially broken links)_\n\n### Reloading themes for development\n\nChanging files in /srv/docker/redmine/redmine/themes won't be automatically loaded. If you want\nto reload the themes without restarting the docker, you can run the following.\n\n```bash\ndocker exec -it redmine redmine-install-themes\n```\n\n## Uninstalling Themes\n\nTo uninstall themes you simply need to remove the theme from the `/srv/docker/redmine/redmine/themes/` directory and restart the image.\n\n```bash\nrm -rf /srv/docker/redmine/redmine/themes/theme_name\n```\n\nFor example, to remove the gitmike theme:\n\n```bash\nrm -rf /srv/docker/redmine/redmine/themes/gitmike\n```\n\nNow when the image is started the theme will be not be available anymore.\n\n# Maintenance\n\n## Creating backups\n\n**Only available in versions >`3.2.0-2`, >`3.1.3-1`, >`3.0.7-1` and >`2.6.9-1`**\n\nThe image allows users to create backups of the Redmine installation using the `app:backup:create` command or the `redmine-backup-create` helper script. The generated backup consists of configuration files, uploaded files and the sql database.\n\nBefore generating a backup — stop and remove the running instance.\n\n```bash\ndocker stop redmine && docker rm redmine\n```\n\nRelaunch the container with the `app:backup:create` argument.\n\n```bash\ndocker run --name redmine -it --rm [OPTIONS] \\\n  sameersbn/redmine:6.0.2 app:backup:create\n```\n\nThe backup will be created in the `backups/` folder of the [Data Store](#data-store). You can change the location using the `REDMINE_BACKUPS_DIR` configuration parameter.\n\n> **NOTE**\n>\n> Backups can also be generated on a running instance using:\n>\n> ```bash\n> docker exec -it redmine redmine-backup-create\n> ```\n>\n> To avoid undesired side-effects, you are advised against creating a backup on a running instance.\n\n## Restoring Backups\n\n**Only available in versions >`3.2.0-2`, >`3.1.3-1`, >`3.0.7-1` and >`2.6.9-1`**\n\nBackups created using instructions from the [Creating backups](#creating-backups) section can be restored using the `app:backup:restore` argument.\n\nBefore restoring a backup — stop and remove the running instance.\n\n```bash\ndocker stop redmine && docker rm redmine\n```\n\nRelaunch the container with the `app:backup:restore` argument. Ensure you launch the container in the interactive mode `-it`.\n\n```bash\ndocker run --name redmine -it --rm [OPTIONS] \\\n  sameersbn/redmine:6.0.2 app:backup:restore\n```\n\nA list of existing backups will be displayed. Select a backup you wish to restore.\n\nTo avoid this interaction you can specify the backup filename using the `BACKUP` argument to `app:backup:restore`, eg.\n\n```bash\ndocker run --name redmine -it --rm [OPTIONS] \\\n  sameersbn/redmine:6.0.2 app:backup:restore BACKUP=1417624827_redmine_backup.tar\n```\n\n## Automated backups\n\n**Only available in versions >`3.2.0-2`, >`3.1.3-1`, >`3.0.7-1` and >`2.6.9-1`**\n\nThe image can be configured to automatically create backups `daily`, `weekly` or `monthly` using the `REDMINE_BACKUP_SCHEDULE` configuration option.\n\nDaily backups are created everyday at `REDMINE_BACKUP_TIME`, which defaults to `04:00`. Weekly backups are created every Sunday at `REDMINE_BACKUP_TIME`. Monthly backups are created on the 1st of every month at `REDMINE_BACKUP_TIME`.\n\nBy default when automated backups are enabled, backups are held for a period of 7 days before they are deleted. When disabled, the backups are held for an infinite period of time. This behavior can be modified using the `REDMINE_BACKUP_EXPIRY` option.\n\n## Rake Tasks\n\nThe `app:rake` command allows you to run redmine rake tasks. To run a rake task simply specify the task to be executed to the `app:rake` command. For example, if you want to send a test email to the admin user.\n\n```bash\ndocker run --name=redmine -d [OPTIONS] \\\n  sameersbn/redmine:6.0.2 app:rake redmine:email:test[admin]\n```\n\nYou can also use `docker exec` to run rake tasks on running redmine instance. For example,\n\n```bash\ndocker exec redmine /sbin/entrypoint.sh app:rake redmine:email:test[admin] RAILS_ENV=production\n```\n\nSimilarly, to remove uploaded files left unattached\n\n```bash\ndocker run --name=redmine -d [OPTIONS] \\\n  sameersbn/redmine:6.0.2 app:rake redmine:attachments:prune\n```\n\nOr,\n\n```bash\ndocker exec redmine /sbin/entrypoint.sh app:rake redmine:attachments:prune RAILS_ENV=production\n```\n\nFor a complete list of available rake tasks please refer www.redmine.org/projects/redmine/wiki/RedmineRake.\n\n## Upgrading\n\nTo upgrade to newer redmine releases, simply follow this 4 step upgrade procedure.\n\n- **Step 1**: Update the docker image.\n\n```bash\ndocker pull sameersbn/redmine:6.0.2\n```\n\n- **Step 2**: Stop and remove the currently running image\n\n```bash\ndocker stop redmine\ndocker rm redmine\n```\n\n- **Step 3**: Create a backup\n\n```bash\ndocker run --name redmine -it --rm [OPTIONS] \\\n    sameersbn/redmine:x.x.x app:backup:create\n```\n\nReplace `x.x.x` with the version you are upgrading from. For example, if you are upgrading from version `2.6.4`, set `x.x.x` to `2.6.4`\n\n- **Step 4**: Start the image\n\n```bash\ndocker run --name=redmine -d [OPTIONS] sameersbn/redmine:6.0.2\n```\n\nWhen an upgrade is in progress the variable `REDMINE_WAS_UPDATED` will be defined and set to `yes`.  This allows easy integration of individual upgrade-steps via `entrypoint.custom.sh`, `pre-install.sh`, and `post-install.sh`.\n\n## Shell Access\n\nFor debugging and maintenance purposes you may want access the containers shell. If you are using docker version `1.3.0` or higher you can access a running containers shell using `docker exec` command.\n\n```bash\ndocker exec -it redmine bash\n```\n\n# Development\n\n## Upgrading to next redmine release\n\n- Commands to run to update image to next redmine release, examples are from 6.0.2 to 6.0.2\n\n```bash\nsed -i 's/6.0.2/6.0.2/g' VERSION README.md docker-compose-memcached.yml docker-compose-mysql.yml docker-compose-ssl.yml docker-compose-sqlite3.yml docker-compose-mariadb.yml Dockerfile docker-compose.yml\nvim Changelog.md # Update change log\nmake test-release # Runs the following\n#  sudo rm -rf /srv/docker/redmine/ # Clean old run\n#  sudo mkdir -p /srv/docker/redmine/redmine\n#  sudo cp -rf $(CERTS_DIR) /srv/docker/redmine/redmine/ # Copy generated certificates\n#  docker compose down\n#  docker compose build\n#  docker compose up # Test new build\n./make_release.sh # Runs the following\n#  git add -p\n#  git commit -sS -m \"release: $(cat VERSION)\"\n#  git tag -s $(cat VERSION) -m \"$(cat VERSION)\"\n#  git push\n#  git push origin --tags\n```\n\n- Open https://github.com/sameersbn/docker-redmine/releases and Draft new release\n- Select tag 6.0.2 and set release title to 6.0.2\n- Publish release\n- Check https://quay.io/repository/sameersbn/redmine?tab=info and https://hub.docker.com/r/sameersbn/redmine/builds for build progress\n\n# References\n\n    * http://www.redmine.org/\n    * http://www.redmine.org/projects/redmine/wiki/Guide\n    * http://www.redmine.org/projects/redmine/wiki/RedmineInstall\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "6.0.2\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose-aws.yml",
          "type": "blob",
          "size": 1.1962890625,
          "content": "services:\n  redmine:\n    build: ./\n    image: sameersbn/redmine:6.0.1\n    environment:\n      - TZ=America/Sao_Paulo\n      - AWS_DB_CREDENTIALS_SECRET_REGION=\n      - AWS_DB_CREDENTIALS_SECRET_NAME=\n      - DB_NAME=redmine\n      - DB_SSL_MODE=prefer\n      - DB_CREATE=false\n\n      - REDMINE_PORT=10083\n      - REDMINE_HTTPS=false\n      - REDMINE_RELATIVE_URL_ROOT=\n      - REDMINE_SECRET_TOKEN=\n\n      - REDMINE_SUDO_MODE_ENABLED=false\n      - REDMINE_SUDO_MODE_TIMEOUT=15\n\n      - REDMINE_CONCURRENT_UPLOADS=2\n\n      - REDMINE_BACKUP_SCHEDULE=\n      - REDMINE_BACKUP_EXPIRY=\n      - REDMINE_BACKUP_TIME=\n\n      - SMTP_ENABLED=false\n      - SMTP_METHOD=smtp\n      - SMTP_DOMAIN=www.example.com\n      - SMTP_HOST=smtp.gmail.com\n      - SMTP_PORT=587\n      - SMTP_USER=mailer@example.com\n      - SMTP_PASS=password\n      - SMTP_STARTTLS=true\n      - SMTP_AUTHENTICATION=:login\n\n      - IMAP_ENABLED=false\n      - IMAP_HOST=imap.gmail.com\n      - IMAP_PORT=993\n      - IMAP_USER=mailer@example.com\n      - IMAP_PASS=password\n      - IMAP_SSL=true\n      - IMAP_INTERVAL=30\n\n    ports:\n      - \"10083:80\"\n    volumes:\n      - /srv/docker/redmine/redmine:/home/redmine/data\n      - /srv/docker/redmine/redmine-logs:/var/log/redmine\n"
        },
        {
          "name": "docker-compose-mariadb.yml",
          "type": "blob",
          "size": 1.984375,
          "content": "services:\n  database:\n    image: mariadb:11.2\n    environment:\n      - MARIADB_USER=redmine\n      - MARIADB_PASSWORD=password\n      - MARIADB_DATABASE=redmine_production\n      - MARIADB_RANDOM_ROOT_PASSWORD=1\n      - MARIADB_AUTO_UPGRADE=1\n    volumes:\n      - /srv/docker/redmine/mariadb:/var/lib/mysql\n    # https://www.redmine.org/projects/redmine/wiki/MySQL_configuration\n    command:\n      - mariadbd\n      # https://www.redmine.org/projects/redmine/wiki/MySQL_configuration\n      - --transaction-isolation=READ-COMMITTED\n      # Configure 4byte utf8 support for full unicode support (all emojis), this requires manual conversion for existing tables. See README\n      - --character-set-server=utf8mb4\n      - --collation-server=utf8mb4_unicode_ci\n\n  redmine:\n    build: ./\n    image: sameersbn/redmine:6.0.2\n    depends_on:\n      - database\n    environment:\n      - TZ=Asia/Kolkata\n\n      - DB_ADAPTER=mysql2\n      - DB_ENCODING=utf8mb4\n      - DB_HOST=database\n      - DB_PORT=3306\n      - DB_USER=redmine\n      - DB_PASS=password\n      - DB_NAME=redmine_production\n\n      - REDMINE_PORT=10083\n      - REDMINE_HTTPS=false\n      - REDMINE_RELATIVE_URL_ROOT=\n      - REDMINE_SECRET_TOKEN=\n\n      - REDMINE_SUDO_MODE_ENABLED=false\n      - REDMINE_SUDO_MODE_TIMEOUT=15\n\n      - REDMINE_CONCURRENT_UPLOADS=2\n\n      - REDMINE_BACKUP_SCHEDULE=\n      - REDMINE_BACKUP_EXPIRY=\n      - REDMINE_BACKUP_TIME=\n\n      - SMTP_ENABLED=false\n      - SMTP_METHOD=smtp\n      - SMTP_DOMAIN=www.example.com\n      - SMTP_HOST=smtp.gmail.com\n      - SMTP_PORT=587\n      - SMTP_USER=mailer@example.com\n      - SMTP_PASS=password\n      - SMTP_STARTTLS=true\n      - SMTP_AUTHENTICATION=:login\n\n      - IMAP_ENABLED=false\n      - IMAP_HOST=imap.gmail.com\n      - IMAP_PORT=993\n      - IMAP_USER=mailer@example.com\n      - IMAP_PASS=password\n      - IMAP_SSL=true\n      - IMAP_INTERVAL=30\n\n    ports:\n      - \"10083:80\"\n    volumes:\n      - /srv/docker/redmine/redmine_mariadb:/home/redmine/data\n      - /srv/docker/redmine/redmine-logs:/var/log/redmine\n"
        },
        {
          "name": "docker-compose-memcached.yml",
          "type": "blob",
          "size": 1.625,
          "content": "services:\n  postgresql:\n    image: sameersbn/postgresql:14-20230628\n    environment:\n      - DB_USER=redmine\n      - DB_PASS=password\n      - DB_NAME=redmine_production\n    volumes:\n      - /srv/docker/redmine/postgresql:/var/lib/postgresql\n\n  memcached:\n    image: memcached:alpine\n    # Debug memcache connection\n    #command: -vv\n\n\n  redmine:\n    build: ./\n    image: sameersbn/redmine:6.0.2\n    depends_on:\n      - postgresql\n      - memcached\n    environment:\n      - TZ=Asia/Kolkata\n\n      - DB_ADAPTER=postgresql\n      - DB_HOST=postgresql\n      - DB_PORT=5432\n      - DB_USER=redmine\n      - DB_PASS=password\n      - DB_NAME=redmine_production\n      - DB_SSL_MODE=prefer\n\n      - REDMINE_PORT=10083\n      - REDMINE_HTTPS=false\n      - REDMINE_RELATIVE_URL_ROOT=\n      - REDMINE_SECRET_TOKEN=\n\n      - REDMINE_SUDO_MODE_ENABLED=false\n      - REDMINE_SUDO_MODE_TIMEOUT=15\n\n      - REDMINE_CONCURRENT_UPLOADS=2\n\n      - REDMINE_BACKUP_SCHEDULE=\n      - REDMINE_BACKUP_EXPIRY=\n      - REDMINE_BACKUP_TIME=\n\n      - SMTP_ENABLED=false\n      - SMTP_METHOD=smtp\n      - SMTP_DOMAIN=www.example.com\n      - SMTP_HOST=smtp.gmail.com\n      - SMTP_PORT=587\n      - SMTP_USER=mailer@example.com\n      - SMTP_PASS=password\n      - SMTP_STARTTLS=true\n      - SMTP_AUTHENTICATION=:login\n\n      - IMAP_ENABLED=false\n      - IMAP_HOST=imap.gmail.com\n      - IMAP_PORT=993\n      - IMAP_USER=mailer@example.com\n      - IMAP_PASS=password\n      - IMAP_SSL=true\n      - IMAP_INTERVAL=30\n\n      - MEMCACHE_HOST=memcached\n\n    ports:\n      - \"10083:80\"\n    volumes:\n      - /srv/docker/redmine/redmine:/home/redmine/data\n      - /srv/docker/redmine/redmine-logs:/var/log/redmine\n"
        },
        {
          "name": "docker-compose-mysql.yml",
          "type": "blob",
          "size": 1.669921875,
          "content": "services:\n  mysql:\n    image: mysql:8.0-bookworm\n    environment:\n      - MYSQL_USER=redmine\n      - MYSQL_PASSWORD=password\n      - MYSQL_DATABASE=redmine_production\n      - MYSQL_RANDOM_ROOT_PASSWORD=yes\n    volumes:\n      - /srv/docker/redmine/mysql:/var/lib/mysql\n    # https://www.redmine.org/projects/redmine/wiki/MySQL_configuration\n    command: --transaction-isolation=READ-COMMITTED\n    cap_add:\n      - SYS_NICE  # CAP_SYS_NICE\n\n  redmine:\n    build: ./\n    image: sameersbn/redmine:6.0.2\n    depends_on:\n      - mysql\n    environment:\n      - TZ=Asia/Kolkata\n\n      - DB_ADAPTER=mysql2\n      - DB_ENCODING=utf8mb4\n      - DB_HOST=mysql\n      - DB_PORT=3306\n      - DB_USER=redmine\n      - DB_PASS=password\n      - DB_NAME=redmine_production\n\n      - REDMINE_PORT=10083\n      - REDMINE_HTTPS=false\n      - REDMINE_RELATIVE_URL_ROOT=\n      - REDMINE_SECRET_TOKEN=\n\n      - REDMINE_SUDO_MODE_ENABLED=false\n      - REDMINE_SUDO_MODE_TIMEOUT=15\n\n      - REDMINE_CONCURRENT_UPLOADS=2\n\n      - REDMINE_BACKUP_SCHEDULE=\n      - REDMINE_BACKUP_EXPIRY=\n      - REDMINE_BACKUP_TIME=\n\n      - SMTP_ENABLED=false\n      - SMTP_METHOD=smtp\n      - SMTP_DOMAIN=www.example.com\n      - SMTP_HOST=smtp.gmail.com\n      - SMTP_PORT=587\n      - SMTP_USER=mailer@example.com\n      - SMTP_PASS=password\n      - SMTP_STARTTLS=true\n      - SMTP_AUTHENTICATION=:login\n\n      - IMAP_ENABLED=false\n      - IMAP_HOST=imap.gmail.com\n      - IMAP_PORT=993\n      - IMAP_USER=mailer@example.com\n      - IMAP_PASS=password\n      - IMAP_SSL=true\n      - IMAP_INTERVAL=30\n\n    ports:\n      - \"10083:80\"\n    volumes:\n      - /srv/docker/redmine/redmine_mysql:/home/redmine/data\n      - /srv/docker/redmine/redmine-logs:/var/log/redmine\n"
        },
        {
          "name": "docker-compose-sqlite3.yml",
          "type": "blob",
          "size": 1.0986328125,
          "content": "services:\n  redmine:\n    build: ./\n    image: sameersbn/redmine:6.0.2\n    environment:\n      - TZ=Asia/Kolkata\n\n      - DB_ADAPTER=sqlite3\n      - DB_NAME=db.sqlite3\n\n      - REDMINE_PORT=10083\n      - REDMINE_HTTPS=false\n      - REDMINE_RELATIVE_URL_ROOT=\n      - REDMINE_SECRET_TOKEN=\n\n      - REDMINE_SUDO_MODE_ENABLED=false\n      - REDMINE_SUDO_MODE_TIMEOUT=15\n\n      - REDMINE_CONCURRENT_UPLOADS=2\n\n      - REDMINE_BACKUP_SCHEDULE=\n      - REDMINE_BACKUP_EXPIRY=\n      - REDMINE_BACKUP_TIME=\n\n      - SMTP_ENABLED=false\n      - SMTP_METHOD=smtp\n      - SMTP_DOMAIN=www.example.com\n      - SMTP_HOST=smtp.gmail.com\n      - SMTP_PORT=587\n      - SMTP_USER=mailer@example.com\n      - SMTP_PASS=password\n      - SMTP_STARTTLS=true\n      - SMTP_AUTHENTICATION=:login\n\n      - IMAP_ENABLED=false\n      - IMAP_HOST=imap.gmail.com\n      - IMAP_PORT=993\n      - IMAP_USER=mailer@example.com\n      - IMAP_PASS=password\n      - IMAP_SSL=true\n      - IMAP_INTERVAL=30\n\n    ports:\n      - \"10083:80\"\n    volumes:\n      - /srv/docker/redmine/redmine_sqlite:/home/redmine/data\n      - /srv/docker/redmine/redmine-logs:/var/log/redmine\n"
        },
        {
          "name": "docker-compose-ssl.yml",
          "type": "blob",
          "size": 1.7421875,
          "content": "services:\n  postgresql:\n    image: sameersbn/postgresql:14-20230628\n    environment:\n      - DB_USER=redmine\n      - DB_PASS=password\n      - DB_NAME=redmine_production\n    volumes:\n      - /srv/docker/redmine/postgresql:/var/lib/postgresql\n\n  redmine:\n    build: ./\n    image: sameersbn/redmine:6.0.2\n    depends_on:\n      - postgresql\n    environment:\n      - TZ=Asia/Kolkata\n\n      - DB_ADAPTER=postgresql\n      - DB_HOST=postgresql\n      - DB_PORT=5432\n      - DB_USER=redmine\n      - DB_PASS=password\n      - DB_NAME=redmine_production\n      - DB_SSL_MODE=prefer\n\n      - REDMINE_PORT=10445\n      - REDMINE_HTTPS=true\n      # Defaults for ssl path.  Please read https://github.com/sameersbn/docker-redmine#ssl\n      #- SSL_KEY_PATH=/home/redmine/data/certs\n      #- SSL_CERTIFICATE_PATH=/home/redmine/data/certs\n      #- SSL_DHPARAM_PATH=/home/redmine/data/certs\n      - REDMINE_RELATIVE_URL_ROOT=\n      - REDMINE_SECRET_TOKEN=\n\n      - REDMINE_SUDO_MODE_ENABLED=false\n      - REDMINE_SUDO_MODE_TIMEOUT=15\n\n      - REDMINE_CONCURRENT_UPLOADS=2\n\n      - REDMINE_BACKUP_SCHEDULE=\n      - REDMINE_BACKUP_EXPIRY=\n      - REDMINE_BACKUP_TIME=\n\n      - SMTP_ENABLED=false\n      - SMTP_METHOD=smtp\n      - SMTP_DOMAIN=www.example.com\n      - SMTP_HOST=smtp.gmail.com\n      - SMTP_PORT=587\n      - SMTP_USER=mailer@example.com\n      - SMTP_PASS=password\n      - SMTP_STARTTLS=true\n      - SMTP_AUTHENTICATION=:login\n\n      - IMAP_ENABLED=false\n      - IMAP_HOST=imap.gmail.com\n      - IMAP_PORT=993\n      - IMAP_USER=mailer@example.com\n      - IMAP_PASS=password\n      - IMAP_SSL=true\n      - IMAP_INTERVAL=30\n\n    ports:\n      - \"10083:80\"\n      - \"10445:443\"\n    volumes:\n      - /srv/docker/redmine/redmine:/home/redmine/data\n      - /srv/docker/redmine/redmine-logs:/var/log/redmine\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 1.6396484375,
          "content": "services:\n  postgresql:\n    image: sameersbn/postgresql:14-20230628\n    environment:\n      - DB_USER=redmine\n      - DB_PASS=password\n      - DB_NAME=redmine_production\n    volumes:\n      - /srv/docker/redmine/postgresql:/var/lib/postgresql\n    healthcheck:\n      test: \"psql -U postgres\"\n      interval: 3s\n      timeout: 3s\n      retries: 5\n      start_period: 10s\n  redmine:\n    build: ./\n    image: sameersbn/redmine:6.0.2\n    depends_on:\n      postgresql:\n        condition: service_healthy\n    environment:\n      - TZ=Asia/Kolkata\n\n      - DB_ADAPTER=postgresql\n      - DB_HOST=postgresql\n      - DB_PORT=5432\n      - DB_USER=redmine\n      - DB_PASS=password\n      - DB_NAME=redmine_production\n      - DB_SSL_MODE=prefer\n\n      - REDMINE_PORT=10083\n      - REDMINE_HTTPS=false\n      - REDMINE_RELATIVE_URL_ROOT=\n      - REDMINE_SECRET_TOKEN=\n\n      - REDMINE_SUDO_MODE_ENABLED=false\n      - REDMINE_SUDO_MODE_TIMEOUT=15\n\n      - REDMINE_CONCURRENT_UPLOADS=2\n\n      - REDMINE_BACKUP_SCHEDULE=\n      - REDMINE_BACKUP_EXPIRY=\n      - REDMINE_BACKUP_TIME=\n\n      - SMTP_ENABLED=false\n      - SMTP_METHOD=smtp\n      - SMTP_DOMAIN=www.example.com\n      - SMTP_HOST=smtp.gmail.com\n      - SMTP_PORT=587\n      - SMTP_USER=mailer@example.com\n      - SMTP_PASS=password\n      - SMTP_STARTTLS=true\n      - SMTP_AUTHENTICATION=:login\n\n      - IMAP_ENABLED=false\n      - IMAP_HOST=imap.gmail.com\n      - IMAP_PORT=993\n      - IMAP_USER=mailer@example.com\n      - IMAP_PASS=password\n      - IMAP_SSL=true\n      - IMAP_INTERVAL=30\n\n    ports:\n      - \"10083:80\"\n    volumes:\n      - /srv/docker/redmine/redmine:/home/redmine/data\n      - /srv/docker/redmine/redmine-logs:/var/log/redmine\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "entrypoint.sh",
          "type": "blob",
          "size": 1.5771484375,
          "content": "#!/bin/bash\nset -e\nsource ${REDMINE_RUNTIME_ASSETS_DIR}/functions\n\n[[ $DEBUG == true ]] && set -x\n\ncase ${1} in\n  app:init|app:start|app:rake|app:backup:create|app:backup:restore)\n\n    initialize_system\n    configure_redmine\n    configure_nginx\n\n    case ${1} in\n      app:start)\n        version_check\n        migrate_database\n        install_plugins\n        install_themes\n\n        if [[ -f ${REDMINE_DATA_DIR}/entrypoint.custom.sh ]]; then\n          echo \"Executing entrypoint.custom.sh...\"\n          . ${REDMINE_DATA_DIR}/entrypoint.custom.sh\n        fi\n\n        rm -rf /var/run/supervisor.sock\n        exec /usr/bin/supervisord -nc /etc/supervisor/supervisord.conf\n        ;;\n      app:init)\n        version_check\n        migrate_database\n        install_plugins\n        install_themes\n        ;;\n      app:rake)\n        shift 1\n        execute_raketask $@\n        ;;\n      app:backup:create)\n        shift 1\n        backup_create $@\n        ;;\n      app:backup:restore)\n        shift 1\n        backup_restore $@\n        ;;\n    esac\n    ;;\n  app:help)\n    echo \"Available options:\"\n    echo \" app:start          - Starts the Redmine server (default)\"\n    echo \" app:init           - Initialize the Redmine server (e.g. create databases, install plugins/themes), but don't start it.\"\n    echo \" app:rake <task>    - Execute a rake task.\"\n    echo \" app:backup:create  - Create a backup.\"\n    echo \" app:backup:restore - Restore an existing backup.\"\n    echo \" app:help           - Displays the help\"\n    echo \" [command]          - Execute the specified command, eg. bash.\"\n    ;;\n  *)\n    exec \"$@\"\n    ;;\nesac\n"
        },
        {
          "name": "make_release.sh",
          "type": "blob",
          "size": 0.1572265625,
          "content": "#!/bin/bash\n\nset -e\nset -x\n\ngit add -p\ngit commit -sS -m \"release: $(cat VERSION)\"\ngit tag -s $(cat VERSION) -m \"$(cat VERSION)\"\ngit push\ngit push origin --tags\n"
        },
        {
          "name": "support",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}