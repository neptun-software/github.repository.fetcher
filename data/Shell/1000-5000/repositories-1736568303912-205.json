{
  "metadata": {
    "timestamp": 1736568303912,
    "page": 205,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "void-linux/void-packages",
      "stars": 2632,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0390625,
          "content": "*\n!common/container/\n!common/repo-keys/\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3271484375,
          "content": "root = true\n\n[*]\nindent_style = tab\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\nindent_size = 4\nindent_style = space\n\n[*.{yml,yaml}]\nindent_size = 2\nindent_style = space\n\n[*.{patch,diff}]\nindent_style = unset\nend_of_line = unset\ncharset = unset\ntrim_trailing_whitespace = unset\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1591796875,
          "content": "template linguist-language=bash\ncommon/shlibs merge=union\n*.patch whitespace=-space-before-tab,-trailing-space\n*.diff whitespace=-space-before-tab,-trailing-space\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3125,
          "content": "*.swo\n*.swp\n*~\n\\#*#\n\n# exclude everything in root except files and directories from void-packages\n/*\n!/.editorconfig\n!/.gitattributes\n!/.github\n!/.gitignore\n!/.mailmap\n!/CONTRIBUTING.md\n!/COPYING\n!/Manual.md\n!/README.md\n!/common\n!/etc\n!/srcpkgs\n!/xbps-src\netc/conf\netc/conf.*\netc/virtual\netc/xbps.d/custom\netc/repo-keys\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 4.376953125,
          "content": "# git mailmap (see git-shortlog(1))\n# format: New Name <new@address> Old Name <old@address>\n\nAndrea Brancaleoni <abc@pompel.me> Andrea Brancaleoni <andrea.brancaleoni@cleafy.com>\nAndrea Brancaleoni <abc@pompel.me> Andrea Brancaleoni <miwaxe@gmail.com>\nAndrea Brancaleoni <abc@pompel.me> Andrea Brancaleoni <virus@gmx.us>\nAndrew Benson <abenson+void@gmail.com> Andrew Benson <abenson@gmail.com>\nAndrew Benson <abenson+void@gmail.com> Andrewb Benson <abenson+void@gmail.com>\nCameron Nemo <cam@nohom.org> Cameron Nemo <cnemo@tutanota.com>\nCameron Nemo <cam@nohom.org> Cameron Nemo <camerontnorman@gmail.com>\nDominik Honnef <dominik@honnef.co> Dominik Honnef <dominikh@fork-bomb.org>\nDuncaen <duncaen@voidlinux.org> Duncaen <mail@duncano.de>\nDuncaen <duncaen@voidlinux.org> Duncan Overbruck <administrator@duncano.de>\nDuncaen <duncaen@voidlinux.org> Duncan Overbruck <mail@duncano.de>\nEnno Boland <gottox@voidlinux.org> Enno Boland <eb@s01.de>\nEnno Boland <gottox@voidlinux.org> Enno Boland <g@s01.de>\nEnno Boland <gottox@voidlinux.org> Gottox <g@s01.de>\nJan S <jan.schreib@gmail.com> jan-schreib <jan.schreib@gmail.com>\nJohn Regan <john@jrjrtech.com> John Regan <jregan@mesonet.org>\nJürgen Buchmüller <pullmoll@t-online.de> Juergen Buchmueller <pullmoll@t-online.de>\nLeah Neukirchen <leah@vuxu.org> Christian Neukirchen <chneukirchen@gmail.com>\nLogen Kain <logen@sudotask.com> Logen Kain <walach.of.harkon@gmail.com>\nMatt Boehlke <git@mtboehlke.com> Mat Boehlke <mtboehlke@gmail.com>\nMichael Aldridge <maldridge@VoidLinux.eu> Michael Aldridge <aldridge.mac@gmail.com>\nPhilipp Hirsch <itself@hanspolo.net> hanspolo <ph.hanspolo@googlemail.com>\nPiraty <mail@piraty.dev> Piraty <piraty@users.noreply.github.com>\nPiraty <mail@piraty.dev> Piraty <piraty1@inbox.ru>\nRoberto Ricci <io@r-ricci.it> <ricci@disroot.org>\nRoberto Ricci <io@r-ricci.it> <52817765+4ricci@users.noreply.github.com>\nStefan Mühlinghaus <jazzman@alphabreed.com> Stefan Mühlinghaus <muehlinghaus@mmh.ag>\nbougyman <bougyman@voidlinux.eu> bougyman <bougyman@rubyists.com>\nbougyman <bougyman@voidlinux.eu> bougyman <bougyman@users.noreply.github.com>\nbougyman <bougyman@voidlinux.eu> bougyman <tj@rubyists.com>\nchrome-pepper-bot <eb@s01.de> Enno Boland (bot) <g@s01.de>\nonekk <carlo.dormeletti@email.it> onekk <carlo.dormeletti@alice.it>\npancake <pancake@nopcode.org> pancake <pancake@flubox.(none)>\npancake <pancake@nopcode.org> radare <pancake@nopcode.org>\nxdave <davehome@redthumb.info.tm> davehome <davehome@redthumb.info.tm>\nyopito <pierre.bourgin@free.fr> yopito <yopito@users.noreply.github.com>\n\nDuncaen <duncaen@voidlinux.org> Duncaen <duncaen@voidlinux.eu>\nEnno Boland <gottox@voidlinux.org> Enno Boland <gottox@voidlinux.eu>\nJuan RP <xtraeme@voidlinux.org> Juan RP <xtraeme@voidlinux.eu>\nToyam Cox <Vaelatern@voidlinux.org> Toyam Cox <Vaelatern@voidlinux.eu>\nananteris <ananteris@voidlinux.org> ananteris <ananteris@voidlinux.eu>\nbougyman <bougyman@voidlinux.org> bougyman <bougyman@voidlinux.eu>\n\nRasmus Thomsen <oss@cogitri.dev> Rasmus Thomsen <rasmus.thomsen@protonmail.com>\nRasmus Thomsen <oss@cogitri.dev> Rasmus Thomsen <cogitri@exherbo.org>\n\nRenato Aguiar <renato@renatoaguiar.net> Renato Aguiar <renato@renag.me>\nRenato Aguiar <renato@renatoaguiar.net> Renato Aguiar <contact@renatoaguiar.org>\nRenato Aguiar <renato@renatoaguiar.net> Renato Aguiar <renato@aguiar.info>\nĐoàn Trần Công Danh <congdanhqx@gmail.com> <congdanhqx+sgn@gmail.com>\nĐoàn Trần Công Danh <congdanhqx@gmail.com> Doan Tran Cong Danh <congdanhqx@gmail.com>\nJohn <me@johnnynator.dev> John <johnz@posteo.net>\nJohn <me@johnnynator.dev> John Zimmermann <johnz@posteo.net>\nDaniel Kolesa <daniel@octaforge.org> q66 <daniel@octaforge.org>\nteldra <teldra@rotce.de> Teldra <teldra@rotce.de>\nteldra <teldra@rotce.de> xor <aur@rotce.de>\nAndrew J. Hesford <ajh@sideband.org> Andrew J. Hesford <ahesford@gleason.com>\n\nhowtologinquickwiththirtyninecharacters <howtologinquickwiththirtyninecharacters@users.noreply.github.com> It looks like the profile name is limited to 256 characters, just like most error messages here it says 255 characters but we know better, do we? As usual, let's try to fill it with meaningless words about nothing at all. Maybe I can reach its limit. End <61999526+howtologinquickwiththirtyninecharacters@users.noreply.github.com>\n\nÉrico Nogueira <erico.erc@gmail.com> Érico Rolim <erico.erc@gmail.com>\nAdam Gausmann <adam@gaussian.dev> Adam Gausmann <agausmann@fastmail.com>\ntriallax <triallax@tutanota.com>\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 14.4208984375,
          "content": "# Contributing to void-packages\n\nvoid-packages is the backbone of the Void Linux distribution. It contains all the definitions to build packages from source.\n\nThis document describes how you, as a contributor, can help with adding packages, correcting bugs and adding features to void-packages.\n\n## Package Requirements\n\nTo be included in the Void repository, software must meet at least one of the following requirements.\nExceptions to the list are possible, and might be accepted, but are extremely unlikely.\nIf you believe you have an exception, start a PR and make an argument for why that particular piece of software,\nwhile not meeting any of the following requirements, is a good candidate for the Void packages system.\n\n1. **System**: The software should be installed system-wide, not per-user.\n\n1. **Compiled**: The software needs to be compiled before being used, even if it is software that is not needed by the whole system.\n\n1. **Required**: Another package either within the repository or pending inclusion requires the package.\n\nIn particular, new themes are highly unlikely to be accepted.\nSimple shell scripts are unlikely to be accepted unless they provide considerable value to a broad user base.\nNew fonts may be accepted if they provide value beyond aesthetics (e.g. they contain glyphs for a script missing in already packaged fonts).\nPackages related to cryptocurrencies (wallets, miners, nodes, etc) are not accepted.\n\nBrowser forks, including those based on Chromium and Firefox, are generally not accepted.\nSuch forks require heavy patching, maintenance and hours of build time.\n\nSoftware need to be used in version announced by authors as ready to use by the general public - usually called releases.\nBetas, arbitrary VCS revisions, templates using tip of development branch taken at build time and releases created by the package maintainer won't be accepted.\n\n## Creating, updating, and modifying packages in Void by yourself\n\nIf you really want to get a new package or package update into Void Linux, we recommend you contribute it yourself.\n\nWe provide a [comprehensive Manual](./Manual.md) on how to create new packages.\nThere's also a [manual for xbps-src](./README.md), which is used to build package files from templates.\n\nFor this guide, we assume you have basic knowledge about [git](http://git-scm.org), as well as a [GitHub Account](http://github.com) with [SSH set up](https://docs.github.com/en/authentication/connecting-to-github-with-ssh).\n\nYou should also [set the email](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address) on your GitHub account and in git so your commits are associated with your GitHub account properly.\n\nTo get started, [fork](https://help.github.com/articles/fork-a-repo) the void-linux `void-packages` git repository on GitHub and clone it:\n\n    $ git clone git@github.com:<user>/void-packages.git\n\nTo keep your forked repository up to date, setup the `upstream` remote to pull in new changes:\n\n    $ git remote add upstream https://github.com/void-linux/void-packages.git\n    $ git pull --rebase upstream master\n\nThis can also be done with the `github-cli` tool:\n\n    $ gh repo fork void-linux/void-packages\n    $ gh repo clone <user>/void-packages\n\nThis automatically sets up the `upstream` remote, so `git pull --rebase upstream master` can still be used to keep your fork up-to-date.\n\nUsing the GitHub web editor for making changes is strongly discouraged, because you will need to clone the repo anyways to edit and test your changes.\n\nUsing the `master` branch of your fork for contributing is also strongly discouraged.\nIt can cause many issues with updating your pull request (also called a PR), and having multiple PRs open at once.\nTo create a new branch:\n\n    $ git checkout master -b <a-descriptive-name>\n\n### Creating a new template\n\nYou can use the helper tool `xnew`, from the [xtools](https://github.com/leahneukirchen/xtools) package, to create new templates:\n\n    $ xnew pkgname subpkg1 subpkg2 ...\n\nTemplates must have the name `void-packages/srcpkgs/<pkgname>/template`, where `pkgname` is the same as the `pkgname` variable in the template.\n\nFor deeper insights on the contents of template files, please read the [manual](./Manual.md), and be sure to browse the existing template files in the `srcpkgs` directory of this repository for concrete examples.\n\n### Updating a template\n\nAt minimum, a template update will consist of changing `version` and `checksum`, if there was an upstream version change, and/or `revision`, if a template-specific change (e.g. patch, correction, etc.) is needed.\nOther changes to the template may be needed depending on what changes the upstream has made.\n\nThe checksum can be updated automatically with the `xgensum` helper from the [xtools](https://github.com/leahneukirchen/xtools) package:\n\n    $ xgensum -i <pkgname>\n\n### Adopting a template\n\nIf a template is orphaned (maintained by `orphan@voidlinux.org`) or the current `maintainer` has not contributed to\nVoid in over a year, template maintainership can be adopted by someone else. To ensure a template gets the care it needs,\ntemplate adopters should be familiar with the package and have an established history of contributions to Void.\nThose who have contributed several updates, especially for the template in question, are good candidates for template\nmaintainership.\n\nIt is best to adopt a template when making another change to it. When adopting the template, add your name or username\nand email to the `maintainer` field in the template, and mention the adoption in your commit message, for example:\n\n    libfoo: update to 1.2.3, adopt.\n\n### Orphaning a template\n\nIf you no longer wish to maintain a template, you can remove yourself as maintainer by setting the `maintainer` field in\nthe template to `Orphaned <orphan@voidlinux.org>`. The commit message should mention this, for example:\n\n    libfoo: orphan.\n\nIt is not necessary to make other changes to the template when orphaning, and incrementing the revision (triggering a\nrebuild) is not necessary either.\n\n### Committing your changes\n\nAfter making your changes, please check that the package builds successfully. From the top level directory of your local copy of the `void-packages` repository, run:\n\n    $ ./xbps-src pkg <pkgname>\n\nYour package must build successfully for at least x86, but we recommend also trying a cross-build for armv6l* as well, e.g.:\n\n    $ ./xbps-src -a armv6l pkg <pkgname>\n\nWhen building for `x86_64*` or `i686`, building with the `-Q` flag or with `XBPS_CHECK_PKGS=yes` set in `etc/conf` (to run the check phase) is strongly encouraged.\nAlso, new packages and updates will not be accepted unless they have been runtime tested by installing and running the package.\n\nWhen you've finished working on the template file, please check it with `xlint` helper from the [xtools](https://github.com/leahneukirchen/xtools) package:\n\n    $ xlint template\n\nIf `xlint` reports any issues, resolve them before committing.\n\nOnce you have made and verified your changes to the package template and/or other files, make one commit per package (including all changes to its sub-packages). Each commit message should have one of the following formats:\n\n* for new packages, use `New package: <pkgname>-<version>` ([example](https://github.com/void-linux/void-packages/commit/8ed8d41c40bf6a82cf006c7e207e05942c15bff8)).\n\n* for package updates, use `<pkgname>: update to <version>.` ([example](https://github.com/void-linux/void-packages/commit/c92203f1d6f33026ae89f3e4c1012fb6450bbac1)).\n\n* for template modifications without a version change, use `<pkgname>: <reason>` ([example](https://github.com/void-linux/void-packages/commit/ff39c912d412717d17232de9564f659b037e95b5)).\n\n* for package removals, use `<pkgname>: remove package` and include the removal reason in the commit body ([example](https://github.com/void-linux/void-packages/commit/4322f923bdf5d4e0eb36738d4f4717d72d0a0ca4)).\n\n* for changes to any other file, use `<filename>: <reason>` ([example](https://github.com/void-linux/void-packages/commit/e00bea014c36a70d60acfa1758514b0c7cb0627d),\n  [example](https://github.com/void-linux/void-packages/commit/93bf159ce10d8e474da5296e5bc98350d00c6c82), [example](https://github.com/void-linux/void-packages/commit/dc62938c67b66a7ff295eab541dc37b92fb9fb78), [example](https://github.com/void-linux/void-packages/commit/e52317e939d41090562cf8f8131a68772245bdde))\n\nIf you want to describe your changes in more detail, explain in the commit body (separated from the first line with a blank line) ([example](https://github.com/void-linux/void-packages/commit/f1c45a502086ba1952f23ace9084a870ce437bc6)).\n\n`xbump`, available in the [xtools](https://github.com/leahneukirchen/xtools) package, can be used to commit a new or updated package:\n\n    $ xbump <pkgname> <git commit options>\n\n`xrevbump`, also available in the [xtools](https://github.com/leahneukirchen/xtools) package, can be used to commit a template modification for a package:\n\n    $ xrevbump '<message>' <pkgnames...>\n\n`xbump` and `xrevbump` will use `git commit` to commit the changes with the appropriate commit message. For more fine-grained control over the commit, specific options can be passed to `git commit` by adding them after the package name.\n\n### Starting a pull request\n\nOnce you have successfully built the package, you can [create a pull request](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request). Pull requests are also known as PRs.\n\nMost pull requests should only contain a single package and dependencies which are not part of void-packages yet.\n\nIf you make updates to packages containing a soname bump, you also need to update `common/shlibs` and revbump all packages that are dependant.\nThere should be a commit for each package revbump, and those commits should be part of the same pull request.\n\nWhen you make changes to your pull request, please *do not close and reopen your pull request*. Instead, just [forcibly git push](#review), overwriting any old commits. Closing and opening your pull requests repeatedly spams the Void maintainers.\n\n#### Continuous Integration\n\nPull requests are automatically submitted for Continuous Integration (CI) testing to ensure packages build and pass their tests (on native builds) on various combinations of C library and architecture.\nPackages that take longer than 120 minutes or need more than 14G of storage to complete their build (for example, Firefox or the Linux kernel) will fail CI and should include `[ci skip]` in the PR title or body (the comment field when the PR is being opened) to avoid wasting CI builder time.\nUse your best judgment on build times based on your local building experience. If you skip CI when submitting a PR, please build and cross-build for a variety of architectures locally, with both glibc and musl, and note your local results in PR comments.\nMake sure to cover 64-bit and 32-bit architectures.\n\nIf you notice a failure in CI that didn't happen locally, that is likely because you didn't run tests locally.\nUse `./xbps-src -Q pkg <package>` to do so.\nSome tests won't work in the CI environment or at all, and their templates should encode this information using the `make_check` variable.\n\nContinuous Integration will also check if the templates you have changed\ncomply with the our guidelines. At the moment not all packages comply with the rules, so if you update a package, it may report errors about places you haven't touched. Please feel free to fix those errors too.\n\n#### Review\n\nIt's possible (and common) that a pull request will contain mistakes or reviewers will ask for additional tweaks.\nReviewers will comment on your pull request and point out which changes are needed before the pull request can be merged.\n\nMost PRs will have a single commit, as seen [above](#committing-your-changes), so if you need to make changes to the commit and already have a pull request open, you can use the following commands:\n\n    $ git add <file>\n    $ git commit --amend\n    $ git push -f\n\nA more powerful way of modifying commits than using `git commit --amend` is with [git-rebase](https://git-scm.com/docs/git-rebase#_interactive_mode), which allows you to join, reorder, change description of past commits and more.\n\nAlternatively, if there are issues with your git history, you can make another branch and push it to the existing PR:\n\n    $ git checkout master -b <attempt2>\n    $ # do changes anew\n    $ git push -f <fork> <attempt2>:<branch-of-pr>\n\n#### Closing the pull request\n\nOnce you have applied all requested changes, the reviewers will merge your request.\n\nIf the pull request becomes inactive for some days, the reviewers may or may not warn you when they are about to close it.\nIf it stays inactive further, it will be closed.\n\nPlease abstain from temporarily closing a pull request while revising the templates. Instead, leave a comment on the PR describing what still needs work, [mark it as a draft](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request#converting-a-pull-request-to-a-draft), or add \"[WIP]\" to the PR title. Only close your pull request if you're sure you don't want your changes to be included.\n\n#### Publishing the package\n\nOnce the reviewers have merged the pull request, our [build server](http://build.voidlinux.org) is automatically triggered and builds\nall packages in the pull request for all supported platforms. Upon completion, the packages are available to all Void Linux users.\n\n## Testing Pull Requests\n\nWhile it is the responsibility of the PR creator to test changes before sending it, one person can't test all configuration options, usecases, hardware, etc.\nTesting new package submissions and updates is always helpful, and is a great way to get started with contributing.\nFirst, [clone the repository](https://github.com/void-linux/void-packages#quick-start) if you haven't done so already.\nThen check out the pull request, either with `github-cli`:\n\n    $ gh pr checkout <number>\n\nOr with `git`:\n\nIf your local void-packages repository is cloned from your fork, you may need to add the main repository as a remote first:\n\n    $ git remote add upstream https://github.com/void-linux/void-packages.git\n\nThen fetch and check out the PR (replacing `<remote>` with either `origin` or `upstream`):\n\n    $ git fetch <remote> pull/<number>/head:<branch-name>\n    $ git checkout <branch-name>\n\nThen [build and install](https://github.com/void-linux/void-packages#building-packages) the package and test its functionality.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.3251953125,
          "content": " Copyright (c) 2008-2020 Juan Romero Pardines and contributors\n Copyright (c) 2017-2025 The Void Linux team and contributors\n All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Manual.md",
          "type": "blob",
          "size": 94.857421875,
          "content": "# The XBPS source packages manual\n\nThis article contains an exhaustive manual of how to create new source\npackages for XBPS, the `Void Linux` native packaging system.\n\n*Table of Contents*\n\n* The XBPS source packages manual\n\t* [Introduction](#Introduction)\n\t* [Package build phases](#buildphase)\n\t* [Package naming conventions](#namingconventions)\n\t\t* [Libraries](#libs)\n\t\t* [Language Modules](#language_modules)\n\t\t* [Language Bindings](#language_bindings)\n\t\t* [Programs](#programs)\n\t* [Global functions](#global_funcs)\n\t* [Global variables](#global_vars)\n\t* [Available variables](#available_vars)\n\t\t* [Mandatory variables](#mandatory_vars)\n\t\t* [Optional variables](#optional_vars)\n\t\t* [About the depends variables](#explain_depends)\n\t* [Repositories](#repositories)\n\t\t* [Repositories defined by Branch](#repo_by_branch)\n\t\t* [Package defined repositories](#pkg_defined_repo)\n\t* [Checking for new upstream releases](#updates)\n\t* [Handling patches](#patches)\n\t* [Build style scripts](#build_scripts)\n\t* [Build helper scripts](#build_helper)\n\t* [Functions](#functions)\n\t* [Build options](#build_options)\n\t* [INSTALL and REMOVE files](#install_remove_files)\n\t* [INSTALL.msg and REMOVE.msg files](#install_remove_files_msg)\n\t* [Creating system accounts/groups at runtime](#runtime_account_creation)\n\t* [Writing runit services](#writing_runit_services)\n\t* [32bit packages](#32bit_pkgs)\n\t* [Subpackages](#pkgs_sub)\n\t* [Some package classes](#pkgs_classes)\n\t\t* [Development packages](#pkgs_development)\n\t\t* [Data packages](#pkgs_data)\n\t\t* [Documentation packages](#pkgs_documentation)\n\t\t* [Python packages](#pkgs_python)\n\t\t* [Go packages](#pkgs_go)\n\t\t* [Haskell packages](#pkgs_haskell)\n\t\t* [Font packages](#pkgs_font)\n\t* [Renaming a package](#pkg_rename)\n\t* [Removing a package](#pkg_remove)\n\t* [XBPS Triggers](#xbps_triggers)\n\t\t* [appstream-cache](#triggers_appstream_cache)\n\t\t* [binfmts](#triggers_binfmts)\n\t\t* [dkms](#triggers_dkms)\n\t\t* [gconf-schemas](#triggers_gconf_schemas)\n\t\t* [gdk-pixbuf-loaders](#triggers_gdk_pixbuf_loaders)\n\t\t* [gio-modules](#triggers_gio_modules)\n\t\t* [gettings-schemas](#triggers_gsettings_schemas)\n\t\t* [gtk-icon-cache](#triggers_gtk_icon_cache)\n\t\t* [gtk-immodules](#triggers_gtk_immodules)\n\t\t* [gtk-pixbuf-loaders](#triggers_gtk_pixbuf_loaders)\n\t\t* [gtk3-immodules](#triggers_gtk3_immodules)\n\t\t* [hwdb.d-dir](#triggers_hwdb.d_dir)\n\t\t* [info-files](#triggers_info_files)\n\t\t* [initramfs-regenerate](#triggers_initramfs_regenerate)\n\t\t* [kernel-hooks](#triggers_kernel_hooks)\n\t\t* [mimedb](#triggers_mimedb)\n\t\t* [mkdirs](#triggers_mkdirs)\n\t\t* [pango-modules](#triggers_pango_module)\n\t\t* [pycompile](#triggers_pycompile)\n\t\t* [register-shell](#triggers_register_shell)\n\t\t* [system-accounts](#triggers_system_accounts)\n\t\t* [texmf-dist](#triggers_texmf_dist)\n\t\t* [update-desktopdb](#triggers_update_desktopdb)\n\t\t* [x11-fonts](#triggers_x11_fonts)\n\t\t* [xml-catalog](#triggers_xml_catalog)\n\t* [Void specific documentation](#documentation)\n\t* [Notes](#notes)\n\t* [Contributing via git](#contributing)\n\t* [Help](#help)\n\n<a id=\"Introduction\"></a>\n### Introduction\n\nThe `void-packages` repository contains all the\nrecipes to download, compile and build binary packages for Void Linux.\nThese `source` package files are called `templates`.\n\nThe `template` files are shell scripts that define `variables` and `functions`\nto be processed by `xbps-src`, the package builder, to generate binary packages.\nThe shell used by `xbps-src` is GNU bash; `xbps-src` doesn't aim to be\ncompatible with POSIX `sh`.\n\nBy convention, all templates start with a comment saying that it is a\n`template file` for a certain package. Most of the lines should be kept under 80\ncolumns; variables that list many values can be split into new lines, with the\ncontinuation in the next line indented by one space.\n\nA simple `template` example is as follows:\n\n```\n# Template file for 'foo'\npkgname=foo\nversion=1.0\nrevision=1\nbuild_style=gnu-configure\nshort_desc=\"A short description max 72 chars\"\nmaintainer=\"name <email>\"\nlicense=\"GPL-3.0-or-later\"\nhomepage=\"http://www.foo.org\"\ndistfiles=\"http://www.foo.org/foo-${version}.tar.gz\"\nchecksum=\"fea0a94d4b605894f3e2d5572e3f96e4413bcad3a085aae7367c2cf07908b2ff\"\n```\n\nThe template file contains definitions to download, build and install the\npackage files to a `fake destdir`, and after this a binary package can be\ngenerated with the definitions specified on it.\n\nDon't worry if anything is not clear as it should be. The reserved `variables`\nand `functions` will be explained later. This `template` file should be created\nin a directory matching `$pkgname`, Example: `void-packages/srcpkgs/foo/template`.\n\nIf everything went fine after running\n\n    $ ./xbps-src pkg <pkgname>\n\na binary package named `foo-1.0_1.<arch>.xbps` will be generated in the local repository\n`hostdir/binpkgs`.\n\n<a id=\"buildphase\"></a>\n### Package build phases\n\nBuilding a package consist of the following phases:\n\n- `setup` This phase prepares the environment for building a package.\n\n- `fetch` This phase downloads required sources for a `source package`, as defined by\nthe `distfiles` variable or `do_fetch()` function.\n\n- `extract` This phase extracts the `distfiles` files into `$wrksrc` or executes the `do_extract()`\nfunction, which is the directory to be used to compile the `source package`.\n\n- `patch` This phase applies all patches in the patches directory of the package and\ncan be used to perform other operations before configuring the package.\n\n- `configure` This phase executes the `configuration` of a `source package`, i.e `GNU configure scripts`.\n\n- `build` This phase compiles/prepares the `source files` via `make` or any other compatible method.\n\n- `check` This optional phase checks the result of the `build` phase by running the testsuite provided by the package.\nIf the default `do_check` function provided by the build style doesn't do anything, the template should set\n`make_check_target` and/or `make_check_args` appropriately or define its own `do_check` function. If tests take too long\nor can't run in all environments, `make_check` should be set to fitting value or\n`do_check` should be customized to limit testsuite unless `XBPS_CHECK_PKGS` is `full`.\n\n- `install` This phase installs the `package files` into the package destdir `<masterdir>/destdir/<pkgname>-<version>`,\nvia `make install` or any other compatible method.\n\n- `pkg` This phase builds the `binary packages` with files stored in the\n`package destdir` and registers them into the local repository.\n\n- `clean` This phase cleans up the package (if defined).\n\n`xbps-src` supports running just the specified phase, and if it ran\nsuccessfully, the phase will be skipped later (unless its work directory\n`${wrksrc}` is removed with `xbps-src clean`).\n\n<a id=\"namingconventions\"></a>\n### Package naming conventions\n\n<a id=\"libs\"></a>\n#### Libraries\n\nLibraries are packages which provide shared objects (\\*.so) in /usr/lib.\nThey should be named like their upstream package name with the following\nexceptions:\n\n- The package is a subpackage of a front end application and provides\nshared objects used by the base package and other third party libraries. In that\ncase it should be prefixed with 'lib'. An exception from that rule is: If an\nexecutable is only used for building that package, it moves to the -devel\npackage.\n\nExample: wireshark -> subpkg libwireshark\n\nLibraries have to be split into two sub packages: `<name>` and `<name>-devel`.\n\n- `<name>` should only contain those parts of a package which are needed to run\na linked program.\n\n- `<name>-devel` should contain all files which are needed to compile a package\nagainst this package. If the library is a sub package, its corresponding\ndevelopment package should be named `lib<name>-devel`\n\n<a id=\"language_modules\"></a>\n#### Language Modules\n\nLanguage modules are extensions to script or compiled languages. Those packages\ndo not provide any executables themselves, but can be used by other packages\nwritten in the same language.\n\nThe naming convention to those packages is:\n\n```\n<language>-<name>\n```\n\nIf a package provides both, a module and a executable, it should be split into\na package providing the executable named `<name>` and the module named\n`<language>-<name>`. If a package starts with the languages name itself, the\nlanguage prefix can be dropped. Short names for languages are no valid substitute\nfor the language prefix.\n\nExample: perl-URI, python3-pyside2\n\n<a id=\"language_bindings\"></a>\n#### Language Bindings\n\nLanguage Bindings are packages which allow programs or libraries to have\nextensions or plugins written in a certain language.\n\nThe naming convention to those packages is:\n```\n<name>-<language>\n```\n\nExample: gimp-python3, irssi-perl\n\n<a id=\"programs\"></a>\n#### Programs\n\nPrograms put executables under /usr/bin (or in very special cases in other\n.../bin directories)\n\nFor those packages the upstream packages name should be used. Remember that\nin contrast to many other distributions, void doesn't lowercase package names.\nAs a rule of thumb, if the tar.gz of a package contains uppercase letter, then\nthe package name should contain them too; if it doesn't, the package name\nis lowercase.\n\nPrograms can be split into program packages and library packages. The program\npackage should be named as described above. The library package should be\nprefixed with \"lib\" (see section `Libraries`)\n\n<a id=\"global_funcs\"></a>\n### Global functions\n\nThe following functions are defined by `xbps-src` and can be used on any template:\n\n- *vinstall()* `vinstall <file> <mode> <targetdir> [<name>]`\n\n\tInstalls `file` with the specified `mode` into `targetdir` in the pkg `$DESTDIR`.\n\tThe optional 4th argument can be used to change the `file name`.\n\n- *vcopy()* `vcopy <pattern> <targetdir>`\n\n\tCopies recursively all files in `pattern` to `targetdir` in the pkg `$DESTDIR`.\n\n- *vmove()* `vmove <pattern>`\n\n\tMoves `pattern` to the specified directory in the pkg `$DESTDIR`.\n\n- *vmkdir()* `vmkdir <directory> [<mode>]`\n\n\tCreates a directory in the pkg `$DESTDIR`. The 2nd optional argument sets the mode of the directory.\n\n- *vbin()* `vbin <file> [<name>]`\n\n\tInstalls `file` into `usr/bin` in the pkg `$DESTDIR` with the\n\tpermissions 0755. The optional 2nd argument can be used to change\n\tthe `file name`.\n\n- *vman()* `vman <file> [<name>]`\n\n\tInstalls `file` as a man page. `vman()` parses the name and\n\tdetermines the section as well as localization. Also transparently\n\tconverts gzipped (.gz) and bzipped (.bz2) manpages into plaintext.\n\tExample mappings:\n\n\t- `foo.1` -> `${DESTDIR}/usr/share/man/man1/foo.1`\n\t- `foo.fr.1` -> `${DESTDIR}/usr/share/man/fr/man1/foo.1`\n\t- `foo.1p` -> `${DESTDIR}/usr/share/man/man1/foo.1p`\n\t- `foo.1.gz` -> `${DESTDIR}/usr/share/man/man1/foo.1`\n\t- `foo.1.bz2` -> `${DESTDIR}/usr/share/man/man1/foo.1`\n\n- *vdoc()* `vdoc <file> [<name>]`\n\n\tInstalls `file` into `usr/share/doc/<pkgname>` in the pkg\n\t`$DESTDIR`. The optional 2nd argument can be used to change the\n\t`file name`.\n\n- *vconf()* `vconf <file> [<name>]`\n\n\tInstalls `file` into `etc` in the pkg\n\t`$DESTDIR`. The optional 2nd argument can be used to change the\n\t`file name`.\n\n- *vsconf()* `vsconf <file> [<name>]`\n\n\tInstalls `file` into `usr/share/examples/<pkgname>` in the pkg\n\t`$DESTDIR`. The optional 2nd argument can be used to change the\n\t`file name`.\n\n- <a id=\"vlicense\"></a>\n *vlicense()* `vlicense <file> [<name>]`\n\n\tInstalls `file` into `usr/share/licenses/<pkgname>` in the pkg\n\t`$DESTDIR`. The optional 2nd argument can be used to change the\n\t`file name`. See [license](#var_license) for when to use it.\n\n- *vsv()* `vsv <service> [<facility>]`\n\n\tInstalls `service` from `${FILESDIR}` to /etc/sv. The service must\n\tbe a directory containing at least a run script. Note the `supervise`\n\tsymlink will be created automatically by `vsv` and that the run script\n\tis automatically made executable by this function.\n\tFor further information on how to create a new service directory see\n\t[The corresponding section the FAQ](http://smarden.org/runit/faq.html#create).\n\tA `log` sub-service will be automatically created if one does not exist in\n\t`${FILESDIR}/$service`, containing `exec vlogger -t $service -p $facility`.\n\tif a second argument is not specified, the `daemon` facility is used.\n\tFor more information about `vlogger` and available values for the facility,\n\tsee [vlogger(8)](https://man.voidlinux.org/vlogger.8).\n\n- *vsed()* `vsed -i <file> -e <regex>`\n\n\tWrapper around sed that checks sha256sum of a file before and after running\n\tthe sed command to detect cases in which the sed call didn't change anything.\n\tTakes any arbitrary amount of files and regexes by calling `-i file` and\n\t`-e regex` repeatedly, at least one file and one regex must be specified.\n\n\tNote that vsed will call the sed command for every regex specified against\n\tevery file specified, in the order that they are given.\n\n- *vcompletion()* `<file> <shell> [<command>]`\n\n\tInstalls shell completion from `file` for `command`, in the correct location\n\tand with the appropriate filename for `shell`. If `command` isn't specified,\n\tit will default to `pkgname`. The `shell` argument can be one of `bash`,\n\t`fish` or `zsh`.\n\n- *vextract()* `[-C <target directory>] [--no-strip-components|--strip-components=<n>] <file>`\n\n\tExtracts `file` to `target directory` with `n` directory components stripped. If\n\t`target directory` not specified, defaults to the working directory. If\n\t`--strip-components` or `--no-strip-components` is not specified, defaults to\n\t`--strip-components=1`.\n\n- *vsrcextract()* `[-C <target directory>] [--no-strip-components|--strip-components=<n>] <file>`\n\n\tExtracts `$XBPS_SRCDISTDIR/$pkgname-$version/<file>` to `target directory`\n\twith `n` directory components stripped. If `target directory` not specified,\n\tdefaults to the working directory. If `--strip-components` or `--no-strip-components`\n\tis not specified, defaults to `--strip-components=1`.\n\n\tThis is useful when used in conjunction with `skip_extraction` and for submodule distfiles.\n\n- *vsrccopy()* `<file>... <target>`\n\n\tCopies `file`s from `$XBPS_SRCDISTDIR/$pkgname-$version/` into the `target` directory,\n\tcreating `target` if it does not exist.\n\n\tThis is useful when used in conjunction with `skip_extraction`.\n\n> Shell wildcards must be properly quoted, Example: `vmove \"usr/lib/*.a\"`.\n\n<a id=\"global_vars\"></a>\n### Global variables\n\nThe following variables are defined by `xbps-src` and can be used on any template:\n\n- `makejobs` Set to `-jX` if `XBPS_MAKEJOBS` is defined, to allow parallel jobs with `GNU make`.\n\n- `sourcepkg`  Set to the to main package name, can be used to match the main package\nrather than additional binary package names.\n\n- `CHROOT_READY`  Set if the target chroot (masterdir) is ready for chroot builds.\n\n- `CROSS_BUILD` Set if `xbps-src` is cross compiling a package.\n\n- `XBPS_CHECK_PKGS` Set if `xbps-src` is going to run tests for a package.\nLonger testsuites should only be run in `do_check()` if it is set to `full`.\n\n- `DESTDIR` Full path to the fake destdir used by the source pkg, set to\n`<masterdir>/destdir/${sourcepkg}-${version}`.\n\n- `FILESDIR` Full path to the `files` package directory, i.e `srcpkgs/foo/files`.\nThe `files` directory can be used to store additional files to be installed\nas part of the source package.\n\n- `PKGDESTDIR` Full path to the fake destdir used by the `pkg_install()` function in\n`subpackages`, set to `<masterdir>/destdir/${pkgname}-${version}`.\n\n- `XBPS_BUILDDIR` Directory to store the `source code` of the source package being processed,\nset to `<masterdir>/builddir`. The package `wrksrc` is always stored\nin this directory such as `${XBPS_BUILDDIR}/${wrksrc}`.\n\n- `XBPS_MACHINE` The machine architecture as returned by `xbps-uhelper arch`.\n\n- `XBPS_ENDIAN` The machine's endianness (\"le\" or \"be\").\n\n- `XBPS_LIBC` The machine's C library (\"glibc\" or \"musl\").\n\n- `XBPS_WORDSIZE` The machine's word size in bits (32 or 64).\n\n- `XBPS_NO_ATOMIC8` The machine lacks native 64-bit atomics (needs libatomic emulation).\n\n- `XBPS_SRCDISTDIR` Full path to where the `source distfiles` are stored, i.e `$XBPS_HOSTDIR/sources`.\n\n- `XBPS_SRCPKGDIR` Full path to the `srcpkgs` directory.\n\n- `XBPS_TARGET_MACHINE` The target machine architecture when cross compiling a package.\n\n- `XBPS_TARGET_ENDIAN` The target machine's endianness (\"le\" or \"be\").\n\n- `XBPS_TARGET_LIBC` The target machine's C library (\"glibc\" or \"musl\").\n\n- `XBPS_TARGET_WORDSIZE` The target machine's word size in bits (32 or 64).\n\n- `XBPS_TARGET_NO_ATOMIC8` The target machine lacks native 64-bit atomics (needs libatomic emulation).\n\n- `XBPS_FETCH_CMD` The utility to fetch files from `ftp`, `http` of `https` servers.\n\n- `XBPS_WRAPPERDIR` Full path to where xbps-src's wrappers for utilities are stored.\n\n- `XBPS_CROSS_BASE` Full path to where cross-compile dependencies are installed, varies according to the target architecture triplet. i.e `aarch64` -> `/usr/aarch64-linux-gnu`.\n\n- `XBPS_RUST_TARGET` The target architecture triplet used by `rustc` and `cargo`.\n\n- `XBPS_BUILD_ENVIRONMENT` Enables continuous-integration-specific operations. Set to `void-packages-ci` if in continuous integration.\n\n<a id=\"available_vars\"></a>\n### Available variables\n\n<a id=\"mandatory_vars\"></a>\n#### Mandatory variables\n\nThe list of mandatory variables for a template:\n\n- `homepage` An URL pointing to the upstream homepage.\n\n\n- <a id=\"var_license\"></a>\n`license` A string matching the license's [SPDX Short identifier](https://spdx.org/licenses),\n`Public Domain`, or string prefixed with `custom:` for other licenses.\nMultiple licenses should be listed as an\n[SPDX license expression](https://spdx.github.io/spdx-spec/v3.0/annexes/SPDX-license-expressions/)\n(examples: `MIT OR Apache-2.0`, `MIT AND (LGPL-2.1-or-later OR BSD-3-Clause)`).\nUsage of `AND`, `OR`, `WITH`, and `()` are supported by xlint. The legacy\ncomma-separated format should be converted when encountered (example:\n`GPL-3.0-or-later, custom:Hugware`).\n\n  Empty meta-packages that don't include any files\n  and thus have and require no license should use\n  `Public Domain`.\n\n  Note: `AGPL`, `MIT`, `BSD`, `ISC`, `X11`, and custom licenses\n  require the license file to be supplied with the binary package.\n\n- `maintainer` A string in the form of `name <user@domain>`.  The email for this field\nmust be a valid email that you can be reached at. Packages using\n`users.noreply.github.com` emails will not be accepted.\n\n- `pkgname` A string with the package name, matching `srcpkgs/<pkgname>`.\n\n- `revision` A number that must be set to 1 when the `source package` is created, or\nupdated to a new `upstream version`. This should only be increased when\nthe generated `binary packages` have been modified.\n\n- `short_desc` A string with a brief description for this package. Max 72 chars.\n\n- `version` A string with the package version. Must not contain dashes or underscore\nand at least one digit is required. Shell's variable substitution usage is not allowed.\n\n`pkgname` and `version` are forbidden to contain special characters. Hence, they don't\nneed to be quoted, and by convention, they shouldn't be.\n\n<a id=\"optional_vars\"></a>\n#### Optional variables\n\n- `hostmakedepends` The list of `host` dependencies required to build the package, and\nthat will be installed to the master directory. There is no need to specify a version\nbecause the current version in srcpkgs will always be required.\nExample: `hostmakedepends=\"foo blah\"`.\n\n- `makedepends` The list of `target` dependencies required to build the package, and that\nwill be installed to the master directory. There is no need to specify a version\nbecause the current version in srcpkgs will always be required.\nExample: `makedepends=\"foo blah\"`.\n\n- `checkdepends` The list of dependencies required to run the package checks, i.e.\nthe script or make rule specified in the template's `do_check()` function.\nExample: `checkdepends=\"gtest\"`.\n\n- `depends` The list of dependencies required to run the package. These dependencies\nare not installed to the master directory, rather are only checked if a binary package\nin the local repository exists to satisfy the required version. Dependencies\ncan be specified with the following version comparators: `<`, `>`, `<=`, `>=`\nor `foo-1.0_1` to match an exact version. If version comparator is not\ndefined (just a package name), the version comparator is automatically set to `>=0`.\nExample: `depends=\"foo blah>=1.0\"`. See the [Runtime dependencies](#deps_runtime) section\nfor more information.\n\n- `bootstrap` If enabled the source package is considered to be part of the `bootstrap`\nprocess and required to be able to build packages in the chroot. Only a\nsmall number of packages must set this property.\n\n- `conflicts` An optional list of packages conflicting with this package.\nConflicts can be specified with the following version comparators: `<`, `>`, `<=`, `>=`\nor `foo-1.0_1` to match an exact version. If version comparator is not\ndefined (just a package name), the version comparator is automatically set to `>=0`.\nExample: `conflicts=\"foo blah>=0.42.3\"`.\n\n- `distfiles` The full URL to the `upstream` source distribution files. Multiple files\ncan be separated by whitespaces. The files must end in `.tar.lzma`, `.tar.xz`,\n`.txz`, `.tar.bz2`, `.tbz`, `.tar.gz`, `.tgz`, `.gz`, `.bz2`, `.tar` or\n`.zip`. To define a target filename, append `>filename` to the URL.\nExample:\n\tdistfiles=\"http://foo.org/foo-1.0.tar.gz http://foo.org/bar-1.0.tar.gz>bar.tar.gz\"\n\n  To avoid repetition, several variables for common hosting sites\n  exist:\n\n  | Variable         | Value                                           |\n  |------------------|-------------------------------------------------|\n  | CPAN_SITE        | https://cpan.perl.org/modules/by-module          |\n  | DEBIAN_SITE      | http://ftp.debian.org/debian/pool               |\n  | FREEDESKTOP_SITE | https://freedesktop.org/software                 |\n  | GNOME_SITE       | https://ftp.gnome.org/pub/GNOME/sources          |\n  | GNU_SITE         | https://ftp.gnu.org/gnu                          |\n  | KERNEL_SITE      | https://www.kernel.org/pub/linux                 |\n  | MOZILLA_SITE     | https://ftp.mozilla.org/pub                      |\n  | NONGNU_SITE      | https://download.savannah.nongnu.org/releases    |\n  | PYPI_SITE        | https://files.pythonhosted.org/packages/source  |\n  | SOURCEFORGE_SITE | https://downloads.sourceforge.net/sourceforge    |\n  | UBUNTU_SITE      | http://archive.ubuntu.com/ubuntu/pool           |\n  | XORG_SITE        | https://www.x.org/releases/individual            |\n  | KDE_SITE         | https://download.kde.org/stable                 |\n  | VIDEOLAN_SITE    | https://download.videolan.org/pub/videolan      |\n\n- `checksum` The `sha256` digests matching `${distfiles}`. Multiple files can be\nseparated by blanks. Please note that the order must be the same than\nwas used in `${distfiles}`. Example: `checksum=\"kkas00xjkjas\"`\n\nIf a distfile changes its checksum for every download because it is packaged\non the fly on the server, like e.g. snapshot tarballs from any of the\n`https://*.googlesource.com/` sites, the checksum of the `archive contents`\ncan be specified by prepending a commercial at (@).\nFor tarballs you can find the contents checksum by using the command\n`tar xf <tarball.ext> --to-stdout | sha256sum`.\n\n- `wrksrc` The directory name where the package sources are extracted, set to `${pkgname}-${version}`.\n\n- `build_wrksrc` A directory relative to `${wrksrc}` that will be used when building the package.\n\n- `create_wrksrc` Usually, after extracting, if there're multiple top-level\n  files and/or directories or when there're no directories at all, top-level files,\n  and directories will be wrapped inside one more layer of directory.\n  Set `create_wrksrc` to force this behaviour.\n\n- `build_style` This specifies the `build method` for a package. Read below to know more\nabout the available package `build methods` or effect of leaving this not set.\n\n- `build_helper` Whitespace-separated list of files in `common/build-helper` to be\nsourced and its variables be made available on the template. i.e. `build_helper=\"rust\"`.\n\n- `configure_script` The name of the `configure` script to execute at the `configure` phase if\n`${build_style}` is set to `configure` or `gnu-configure` build methods.\nBy default set to `./configure`.\n\n- `configure_args` The arguments to be passed in to the `configure` script if `${build_style}`\nis set to `configure` or `gnu-configure` build methods. By default, prefix\nmust be set to `/usr`. In `gnu-configure` packages, some options are already\nset by default: `--prefix=/usr --sysconfdir=/etc --infodir=/usr/share/info --mandir=/usr/share/man --localstatedir=/var`.\n\n- `make_cmd` The executable to run at the `build` phase if `${build_style}` is set to\n`configure`, `gnu-configure` or `gnu-makefile` build methods.\nBy default set to `make`.\n\n- `make_build_args` The arguments to be passed in to `${make_cmd}` at the build phase if\n`${build_style}` is set to `configure`, `gnu-configure` or `gnu-makefile`\nbuild methods. Unset by default.\n\n- `make_check_args` The arguments to be passed in to `${make_cmd}` at the check phase if\n`${build_style}` is set to `configure`, `gnu-configure` or `gnu-makefile`\nbuild methods. Unset by default.\n\n- `make_install_args` The arguments to be passed in to `${make_cmd}` at the `install`\nphase if `${build_style}` is set to `configure`, `gnu-configure` or `gnu-makefile` build methods.\n\n- `make_build_target` The build target. If `${build_style}` is set to `configure`, `gnu-configure`\nor `gnu-makefile`, this is the target passed to `${make_cmd}` in the build phase;\nwhen unset the default target is used.\nIf `${build_style}` is `python3-pep517`, this is the path of the package\ndirectory that should be built as a Python wheel; when unset, defaults to `.` (the current\ndirectory with respect to the build).\n\n- `make_check_target` The target to be passed in to `${make_cmd}` at the check phase if\n`${build_style}` is set to `configure`, `gnu-configure` or `gnu-makefile`\nbuild methods. By default set to `check`.\n\n- `make_install_target` The installation target. When `${build_style}` is set to `configure`,\n`gnu-configure` or `gnu-makefile`, this is the target passed to `${make_command}` in the install\nphase; when unset, it defaults to `install`. If `${build_style}` is `python3-pep517`, this is the\npath of the Python wheel produced by the build phase that will be installed; when unset, the\n`python3-pep517` build style will look for a wheel matching the package name and version in the\ncurrent directory with respect to the install.\n\n- `make_check_pre` The expression in front of `${make_cmd}`. This can be used for wrapper commands\nor for setting environment variables for the check command. By default empty.\n\n- `patch_args` The arguments to be passed in to the `patch(1)` command when applying\npatches to the package sources during `do_patch()`. Patches are stored in\n`srcpkgs/<pkgname>/patches` and must be in `-p1` format. By default set to `-Np1`.\n\n- `disable_parallel_build` If set the package won't be built in parallel\nand `XBPS_MAKEJOBS` will be set to 1. If a package does not work well with `XBPS_MAKEJOBS`\nbut still has a mechanism to build in parallel, set `disable_parallel_build` and\nuse `XBPS_ORIG_MAKEJOBS` (which holds the original value of `XBPS_MAKEJOBS`) in the template.\n\n- `disable_parallel_check` If set tests for the package won't be built and run in parallel\nand `XBPS_MAKEJOBS` will be set to 1. If a package does not work well with `XBPS_MAKEJOBS`\nbut still has a mechanism to run checks in parallel, set `disable_parallel_check` and\nuse `XBPS_ORIG_MAKEJOBS` (which holds the original value of `XBPS_MAKEJOBS`) in the template.\n\n- `make_check` Sets the cases in which the `check` phase is run.\nThis option has to be accompanied by a comment explaining why the tests fail.\nAllowed values:\n  - `yes` (the default) to run if `XBPS_CHECK_PKGS` is set.\n  - `extended` to run if `XBPS_CHECK_PKGS` is `full`.\n  - `ci-skip` to run locally if `XBPS_CHECK_PKGS` is set, but not as part of pull request checks.\n  - `no` to never run.\n\n\n- `keep_libtool_archives` If enabled the `GNU Libtool` archives won't be removed. By default those\nfiles are always removed automatically.\n\n- `skip_extraction` A list of filenames that should not be extracted in the `extract` phase.\nThis must match the basename of any url defined in `${distfiles}`.\nExample: `skip_extraction=\"foo-${version}.tar.gz\"`.\n\n- `nodebug` If enabled -dbg packages won't be generated even if `XBPS_DEBUG_PKGS` is set.\n\n- `conf_files` A list of configuration files the binary package owns; this expects full\npaths, wildcards will be extended, and multiple entries can be separated by blanks.\nExample: `conf_files=\"/etc/foo.conf /etc/foo2.conf /etc/foo/*.conf\"`.\n\n- `mutable_files` A list of files the binary package owns, with the expectation\n  that those files will be changed. These act a lot like `conf_files` but\n  without the assumption that a human will edit them.\n\n- `make_dirs` A list of entries defining directories and permissions to be\n  created at install time. Each entry should be space separated, and will\n  itself contain spaces. `make_dirs=\"/dir 0750 user group\"`. User and group and\n  mode are required on every line, even if they are `755 root root`. By\n  convention, there is only one entry of `dir perms user group` per line.\n\n- `repository` Defines the repository in which the package will be placed. See\n  *Repositories* for a list of valid repositories.\n\n- `nostrip` If set, the ELF binaries with debugging symbols won't be stripped. By\ndefault all binaries are stripped.\n\n- `nostrip_files` White-space separated list of ELF binaries that won't be stripped of\ndebugging symbols. Files can be given by full path or by filename.\n\n- `noshlibprovides` If set, the ELF binaries won't be inspected to collect the provided\nsonames in shared libraries.\n\n- `noverifyrdeps` If set, the ELF binaries and shared libraries won't be inspected to collect\ntheir reverse dependencies. You need to specify all dependencies in the `depends` when you\nneed to set this.\n\n- `skiprdeps` White space separated list of filenames specified by their absolute path in\nthe `$DESTDIR` which will not be scanned for runtime dependencies. This may be useful to\nskip files which are not meant to be run or loaded on the host but are to be sent to some\ntarget device or emulation.\n\n- `ignore_elf_files` White space separated list of machine code files\nin /usr/share directory specified by absolute path, which are expected and allowed.\n\n- `ignore_elf_dirs` White space separated list of directories in /usr/share directory\nspecified by absolute path, which are expected and allowed to contain machine code files.\n\n- `nocross` If set, cross compilation won't be allowed and will exit immediately.\nThis should be set to a string describing why it fails, or a link to a buildlog (from the official builders, CI buildlogs can vanish) demonstrating the failure.\n\n- `restricted` If set, xbps-src will refuse to build the package unless\n`etc/conf` has `XBPS_ALLOW_RESTRICTED=yes`. The primary builders for Void\nLinux do not have this setting, so the primary repositories will not have any\nrestricted package. This is useful for packages where the license forbids\nredistribution.\n\n- `subpackages` A white space separated list of subpackages (matching `foo_package()`)\nto override the guessed list. Only use this if a specific order of subpackages is required,\notherwise the default would work in most cases.\n\n- `broken` If set, building the package won't be allowed because its state is currently broken.\nThis should be set to a string describing why it is broken, or a link to a buildlog demonstrating the failure.\n\n- `shlib_provides` A white space separated list of additional sonames the package provides on.\nThis appends to the generated file rather than replacing it.\n\n- `shlib_requires` A white space separated list of additional sonames the package requires.\nThis appends to the generated file rather than replacing it.\n\n- `nopie` Only needs to be set to something to make active, disables building the package with hardening\n  features (PIE, relro, etc). Not necessary for most packages.\n\n- `nopie_files` White-space separated list of ELF binaries that won't be checked\nfor PIE. Files must be given by full path.\n\n- `reverts` xbps supports a unique feature which allows to downgrade from broken\npackages automatically. In the `reverts` field one can define a list of broken\npkgver the resulting package should revert. This field *must* be defined before\n`version` and `revision` fields in order to work as expected. The versions\ndefined in `reverts` must be bigger than the one defined in `version`.\nExample:\n\n    ```\n    reverts=\"2.0_1 2.0_2\"\n    version=1.9\n    revision=2\n    ```\n\n- `alternatives` A white space separated list of supported alternatives the package provides.\nA list is composed of three components separated by a colon: group, symlink and target.\nExample: `alternatives=\"vi:/usr/bin/vi:/usr/bin/nvi ex:/usr/bin/ex:/usr/bin/nvi-ex\"`.\n\n- `font_dirs` A white space separated list of directories specified by an absolute path where a\nfont package installs its fonts.\nIt is used in the `x11-fonts` xbps-trigger to rebuild the font cache during install/removal\nof the package.\nExample: `font_dirs=\"/usr/share/fonts/TTF /usr/share/fonts/X11/misc\"`\n\n- `dkms_modules` A white space separated list of Dynamic Kernel Module Support (dkms) modules\nthat will be installed and removed by the `dkms` xbps-trigger with the install/removal of the\npackage.\nThe format is a white space separated pair of strings that represent the name of the module,\nmost of the time `pkgname`, and the version of the module, most of the time `version`.\nExample: `dkms_modules=\"$pkgname $version zfs 4.14\"`\n\n- `register_shell` A white space separated list of shells defined by absolute path to be\nregistered into the system shells database. It is used by the `register-shell` trigger.\nExample: `register_shell=\"/bin/tcsh /bin/csh\"`\n\n- `tags` A white space separated list of tags (categories) that are registered into the\npackage metadata and can be queried with `xbps-query` by users.\nExample for qutebrowser: `tags=\"browser chromium-based qt5 python3\"`\n\n- `perl_configure_dirs` A white space separate list of directories relative to `wrksrc`\nthat contain Makefile.PL files that need to be processes for the package to work. It is\nused in the perl-module build_style and has no use outside of it.\nExample: `perl_configure_dirs=\"blob/bob foo/blah\"`\n\n- `preserve` If set, files owned by the package in the system are not removed when\nthe package is updated, reinstalled or removed. This is mostly useful for kernel packages\nthat shouldn't remove the kernel files when they are removed in case it might break the\nuser's booting and module loading. Otherwise in the majority of cases it should not be\nused.\n\n- `fetch_cmd` Executable to be used to fetch URLs in `distfiles` during the `do_fetch` phase.\n\n- `changelog` An URL pointing to the upstream changelog. Raw text files are preferred.\n\n- `archs` Whitespace separated list of architectures that a package can be\nbuilt for, available architectures can be found under `common/cross-profiles`.\nIn general, `archs` should only be set if the upstream software explicitly targets\ncertain architectures or there is a compelling reason why the software should not be\navailable on some supported architectures.\nPrepending a pattern with a tilde means disallowing build on the indicated archs.\nThe first matching pattern is taken to allow/deny build. When no pattern matches,\nthe package is built if the last pattern includes a tilde.\nExamples:\n\n\t```\n\t# Build package only for musl architectures\n\tarchs=\"*-musl\"\n\t# Build package for x86_64-musl and any non-musl architecture\n\tarchs=\"x86_64-musl ~*-musl\"\n\t# Default value (all arches)\n\tarchs=\"*\"\n\t```\nA special value `noarch` used to be available, but has since been removed.\n\n- `nocheckperms` If set, xbps-src will not fail on common permission errors (world writable files, etc.)\n\n- `nofixperms` If set, xbps-src will not fix common permission errors (executable manpages, etc.)\n\n- `no_generic_pkgconfig_link` If set, xbps-src will not create a symlink from `$XBPS_CROSS_TRIPLET-pkg-config`\n  to `$XBPS_WRAPPERDIR/pkg-config` before building the template.\n\n<a id=\"explain_depends\"></a>\n#### About the many types of `depends` variables\n\nSo far, we have listed four types of `depends` variables: `hostmakedepends`,\n`makedepends`, `checkdepends` and `depends`. These different kinds of variables\nare necessary because `xbps-src` supports cross compilation and to avoid\ninstalling unnecessary packages in the build environment.\n\nDuring a build process, there are programs that must be _run_ on the host, such\nas `yacc` or the C compiler. The packages that contain these programs should be\nlisted in `hostmakedepends`, and will be installed on the host when building the\ntarget package. Some of these packages are dependencies of the `base-chroot`\npackage and don't need to be listed. It is possible that some of the programs\nnecessary to build a project are located in `-devel` packages.\n\nThe target package can also depend on other packages for libraries to link\nagainst or header files. These packages should be listed in `makedepends` and\nwill match the target architecture, regardless of the architecture of the build\nmachine. Typically, `makedepends` will contain mainly `-devel` packages.\n\nFurthermore, if `XBPS_CHECK_PKGS` is set or the `-Q` option is passed to\n`xbps-src`, the target package might require specific dependencies or libraries\nthat are linked into its test binaries to run its test suite. These dependencies\nshould be listed in `checkdepends` and will be installed as if they were part of\n`hostmakedepends`. Some dependencies that can be included in `checkdepends` are:\n\n- `dejagnu`: used for some GNU projects\n- `cmocka-devel`: linked into test binaries\n- `dbus`: makes it possible to run `dbus-run-session <test-command>` to provide\n  a D-Bus session for applications that need it\n- `git`: some test suites run the `git` command\n\n<a id=\"deps_runtime\"></a>\nLastly, a package may require certain dependencies at runtime, without which it\nis unusable. These dependencies, when they aren't detected automatically by\nXBPS, should be listed in `depends`.\n\nLibraries linked by ELF objects are detected automatically by `xbps-src`, hence they\nmust not be specified in templates via `depends`. This variable should list:\n\n- executables called as separate processes.\n- ELF objects using dlopen(3).\n- non-object code, e.g. C headers, perl/python/ruby/etc modules.\n- data files.\n- overriding the minimal version specified in the `common/shlibs` file.\n\nThe runtime dependencies for ELF objects are detected by checking which SONAMEs\nthey require and then the SONAMEs are mapped to a binary package name with a minimal\nrequired version. The `common/shlibs` file\nsets up the `<SONAME> <pkgname>>=<version>` mappings.\n\nFor example the `foo-1.0_1` package provides the `libfoo.so.1` SONAME and\nsoftware requiring this library will link to `libfoo.so.1`; the resulting binary\npackage will have a run-time dependency on `foo>=1.0_1` package as specified in\n`common/shlibs`:\n\n```\n# common/shlibs\n...\nlibfoo.so.1 foo-1.0_1\n...\n```\n\n- The first field specifies the SONAME.\n- The second field specified the package name and minimal version required.\n- A third optional field (usually set to `ignore`) can be used to skip checks in soname bumps.\n\nDependencies declared via `depends` are not installed to the master directory, rather they are\nonly checked if they exist as binary packages, and are built automatically by `xbps-src` if\nthe specified version is not in the local repository.\n\nAs a special case, `virtual` dependencies may be specified as runtime dependencies in the\n`depends` template variable. Several different packages can provide common functionality by\ndeclaring a virtual name and version in the `provides` template variable (e.g.\n`provides=\"vpkg-0.1_1\"`). Packages that rely on the common functionality without concern for the\nspecific provider can declare a dependency on the virtual package name with the prefix `virtual?`\n(e.g., `depends=\"virtual?vpkg-0.1_1\"`). When a package is built by `xbps-src`, providers for any\nvirtual packages will be confirmed to exist and will be built if necessary. A map from virtual\npackages to their default providers is defined in `etc/defaults.virtual`. Individual mappings can be\noverridden by local preferences in `etc/virtual`. Comments in `etc/defaults.virtual` provide more\ninformation on this map.\n\nFinally, as a general rule, if a package is built the exact same way whether or\nnot a particular package is present in `makedepends` or `hostmakedepends`, that\npackage shouldn't be added as a build time dependency.\n\n<a id=\"repositories\"></a>\n### Repositories\n\n<a id=\"repo_by_branch\"></a>\n#### Repositories defined by Branch\n\nThe global repository takes the name of\nthe current branch, except if the name of the branch is master. Then the resulting\nrepository will be at the global scope. The usage scenario is that the user can\nupdate multiple packages in a second branch without polluting their local repository.\n\n<a id=\"pkg_defined_repo\"></a>\n#### Package defined Repositories\n\nThe second way to define a repository is by setting the `repository` variable in\na template. This way the maintainer can define repositories for a specific\npackage or a group of packages. This is currently used to distinguish between\ncertain classes of packages.\n\nThe following repository names are valid:\n\n* `bootstrap`: Repository for xbps-src-specific packages.\n* `debug`: Repository for packages containing debug symbols. In almost all cases,\n  these packages are generated automatically.\n* `nonfree`: Repository for packages that are closed source or have nonfree licenses.\n\n<a id=\"updates\"></a>\n### Checking for new upstream releases\n\nNew upstream versions can be automatically checked using\n`./xbps-src update-check <pkgname>`. In some cases you need to override\nthe sensible defaults by assigning the following variables in a `update`\nfile in the same directory as the relevant `template` file:\n\n- `site` contains the URL where the version number is\n  mentioned.  If unset, defaults to `homepage` and the directories where\n`distfiles` reside.\n\n- `pkgname` is the package name the default pattern checks for.\nIf unset, defaults to `pkgname` from the template.\n\n- `pattern` is a perl-compatible regular expression\nmatching the version number.  Anchor the version number using `\\K`\nand `(?=...)`.  Example: `pattern='<b>\\K[\\d.]+(?=</b>)'`, this\nmatches a version number enclosed in `<b>...</b>` tags.\n\n- `ignore` is a space-separated list of shell globs that match\nversion numbers which are not taken into account for checking newer\nversions.  Example: `ignore=\"*b*\"`\n\n- `version` is the version number used to compare against\nupstream versions. Example: `version=${version//./_}`\n\n- `single_directory` can be set to disable\ndetecting directory containing one version of sources in url,\nthen searching new version in adjacent directories.\n\n- `vdprefix` is a perl-compatible regular expression matching\npart that precedes numeric part of version directory\nin url. Defaults to `(|v|$pkgname)[-_.]*`.\n\n- `vdsuffix` is a perl-compatible regular expression matching\npart that follows numeric part of version directory\nin url. Defaults to `(|\\.x)`.\n\n- `disabled` can be set to disable update checking for the package,\nin cases where checking for updates is impossible or does not make sense.\nThis should be set to a string describing why it is disabled.\n\n<a id=\"patches\"></a>\n### Handling patches\n\nSometimes software needs to be patched, most commonly to fix bugs that have\nbeen found or to fix compilation with new software.\n\nTo handle this, xbps-src has patching functionality. It will look for all files\nthat match the glob `srcpkgs/$pkgname/patches/*.{diff,patch}` and will\nautomatically apply all files it finds using `patch(1)` with `-Np1`. This happens\nduring the `do_patch()` phase. The variable `PATCHESDIR` is\navailable in the template, pointing to the `patches` directory.\n\nThe patching behaviour can be changed in the following ways:\n\n- A file called `series` can be created in the `patches` directory with a newline\nseparated list of patches to be applied in the order presented. When present\nxbps-src will only apply patches named in the `series` file.\n\n- A file with the same name as one of the patches but with `.args` as extension can\nbe used to set the args passed to `patch(1)`. As an example, if `foo.patch` requires\nspecial arguments to be passed to `patch(1)` that can't be used when applying other\npatches, `foo.patch.args` can be created containing those args.\n\n<a id=\"build_scripts\"></a>\n### build style scripts\n\nThe `build_style` variable specifies the build method to build and install a\npackage. It expects the name of any available script in the\n`void-packages/common/build-style` directory. Please note that required packages\nto execute a `build_style` script must be defined via `$hostmakedepends`.\n\nThe current list of available `build_style` scripts is the following:\n\n- If `build_style` is not set, the template must (at least) define\n`do_install()` function and optionally more build phases such as\n`do_configure()`, `do_build()`, etc., and may overwrite default `do_fetch()` and\n`do_extract()` that fetch and extract files defined in `distfiles` variable.\n\n- `cargo` For packages written in rust that use Cargo for building.\nConfiguration arguments (such as `--features`) can be defined in the variable\n`configure_args` and are passed to cargo during `do_build`.\n\n- `cmake` For packages that use the CMake build system, configuration arguments\ncan be passed in via `configure_args`. The `cmake_builddir` variable may be\ndefined to specify the directory for building under `build_wrksrc` instead of\nthe default `build`.\n\n- `configure` For packages that use non-GNU configure scripts, at least `--prefix=/usr`\nshould be passed in via `configure_args`.\n\n- `fetch` For packages that only fetch files and are installed as is via `do_install()`.\n\n- `gnu-configure` For packages that use GNU autotools-compatible configure scripts,\nadditional configuration arguments can be passed in via `configure_args`.\n\n- `gnu-makefile` For packages that use GNU make, build arguments can be passed in via\n`make_build_args` and install arguments via `make_install_args`. The build\ntarget can be overridden via `make_build_target` and the install target\nvia `make_install_target`. This build style tries to compensate for makefiles\nthat do not respect environment variables, so well written makefiles, those\nthat do such things as append (`+=`) to variables, should have `make_use_env`\nset in the body of the template.\n\n- `go` For programs written in Go that follow the standard package\nstructure. The variable `go_import_path` must be set to the package's\nimport path, e.g. `github.com/github/hub` for the `hub` program. This\ninformation can be found in the `go.mod` file for modern Go projects.\nIt's expected that the distfile contains the package, but dependencies\nwill be downloaded with `go get`.\n\n- `meta` For `meta-packages`, i.e packages that only install local files or simply\ndepend on additional packages. This build style does not install\ndependencies to the root directory, and only checks if a binary package is\navailable in repositories.\n\n- `R-cran` For packages that are available on The Comprehensive R Archive\nNetwork (CRAN). The build style requires the `pkgname` to start with\n`R-cran-` and any dashes (`-`) in the CRAN-given version to be replaced\nwith the character `r` in the `version` variable. The `distfiles`\nlocation will automatically be set as well as the package made to depend\non `R`.\n\n- `gemspec` For packages that use\n[gemspec](https://guides.rubygems.org/specification-reference/) files for building a ruby\ngem and then installing it. The gem command can be overridden by `gem_cmd`. `configure_args`\ncan be used to pass arguments during compilation. If your package does not make use of compiled\nextensions consider using the `gem` build style instead.\n\n- `gem` For packages that are installed using gems from [RubyGems](https://rubygems.org/).\nThe gem command can be overridden by `gem_cmd`.\n`distfiles` is set by the build style if the template does not do so. If your gem\nprovides extensions which must be compiled consider using the `gemspec` build style instead.\n\n- `ruby-module` For packages that are ruby modules and are installable via `ruby install.rb`.\nAdditional install arguments can be specified via `make_install_args`.\n\n- `perl-ModuleBuild` For packages that use the Perl\n[Module::Build](https://metacpan.org/pod/Module::Build) method.\n\n- `perl-module` For packages that use the Perl\n[ExtUtils::MakeMaker](http://perldoc.perl.org/ExtUtils/MakeMaker.html) build method.\n\n- `raku-dist` For packages that use the Raku `raku-install-dist` build method with rakudo.\n\n- `waf3` For packages that use the Python3 `waf` build method with python3.\n\n- `slashpackage` For packages that use the /package hierarchy and package/compile to build,\nsuch as `daemontools` or any `djb` software.\n\n- `qmake` For packages that use Qt5/Qt6 qmake profiles (`*.pro`), qmake arguments\nfor the configure phase can be passed in via `configure_args`, make build arguments can\nbe passed in via `make_build_args` and install arguments via `make_install_args`. The build\ntarget can be overridden via `make_build_target` and the install target\nvia `make_install_target`.\n\n- `meson` For packages that use the Meson Build system, configuration options can be passed\nvia `configure_args`, the meson command can be overridden by `meson_cmd` and the location of\nthe out of source build by `meson_builddir`\n\n- `void-cross` For cross-toolchain packages used to build Void systems. There are no\nmandatory variables (target triplet is inferred), but you can specify some optional\nones - `cross_gcc_skip_go` can be specified to skip `gccgo`, individual subproject\nconfigure arguments can be specified via `cross_*_configure_args` where `*` is `binutils`,\n`gcc_bootstrap` (early gcc), `gcc` (final gcc), `glibc` (or `musl`), `configure_args` is\nadditionally passed to both early and final `gcc`. You can also specify custom `CFLAGS`\nand `LDFLAGS` for the libc as `cross_(glibc|musl)_(cflags|ldflags)`.\n\n- `zig-build` For packages using [Zig](https://ziglang.org)'s build\nsystem. Additional arguments may be passed to the `zig build` invocation using\n`configure_args`.\n\nFor packages that use the Python module build method (`setup.py` or\n[PEP 517](https://www.python.org/dev/peps/pep-0517/)), you can choose one of the following:\n\n- `python3-module` to build Python 3.x modules\n\n- `python3-pep517` to build Python 3.x modules that provide a PEP 517 build description without\na `setup.py` script\n\nEnvironment variables for a specific `build_style` can be declared in a filename\nmatching the `build_style` name, Example:\n\n    `common/environment/build-style/gnu-configure.sh`\n\n- `texmf` For texmf zip/tarballs that need to go into /usr/share/texmf-dist. Includes\nduplicates handling.\n\n<a id=\"build_helper\"></a>\n### build helper scripts\n\nThe `build_helper` variable specifies shell snippets to be sourced that will create a\nsuitable environment for working with certain sets of packages.\n\nThe current list of available `build_helper` scripts is the following:\n\n- `cmake-wxWidgets-gtk3` sets the `WX_CONFIG` variable which is used by FindwxWidgets.cmake\n\n- `gir` specifies dependencies for native and cross builds to deal with\nGObject Introspection. The following variables may be set in the template to handle\ncross builds which require additional hinting or exhibit problems. `GIR_EXTRA_LIBS_PATH` defines\nadditional paths to be searched when linking target binaries to be introspected.\n`GIR_EXTRA_OPTIONS` defines additional options for the `g-ir-scanner-qemuwrapper` calling\n`qemu-<target_arch>-static` when running the target binary. You can for example specify\n`GIR_EXTRA_OPTIONS=\"-strace\"` to see a trace of what happens when running that binary.\n\n- `meson` creates a cross file, `${XBPS_WRAPPERDIR}/meson/xbps_meson.cross`, which configures\nmeson for cross builds. This is particularly useful for building packages that wrap meson\ninvocations (e.g., `python3-pep517` packages that use a meson backend) and is added by default\nfor packages that use the `meson` build style.\n\n- `numpy` configures the environment for cross-compilation of python packages that provide\ncompiled extensions linking to NumPy C libraries. If the `meson` build helper is also\nconfigured, a secondary cross file, `${XBPS_WRAPPERDIR}/meson/xbps_numpy.cross`, will be\nwritten to inform meson where common NumPy components may be found.\n\n- `python3` configures the cross-build environment to use Python libraries, header files, and\ninterpreter configurations in the target root. The `python3` helper is added by default for\npackages that use the `python3-module` or `python3-pep517` build styles.\n\n- `qemu` sets additional variables for the `cmake` and `meson` build styles to allow\nexecuting cross-compiled binaries inside qemu.\nIt sets `CMAKE_CROSSCOMPILING_EMULATOR` for cmake and `exe_wrapper` for meson\nto `qemu-<target_arch>-static` and `QEMU_LD_PREFIX` to `XBPS_CROSS_BASE`.\nIt also creates the `vtargetrun` function to wrap commands in a call to\n`qemu-<target_arch>-static` for the target architecture.\n\n- `qmake` creates the `qt.conf` configuration file (cf. `qmake` `build_style`)\nneeded for cross builds and a qmake-wrapper to make `qmake` use this configuration.\nThis aims to fix cross-builds for when the build-style is mixed: e.g. when in a\n`gnu-configure` style the configure script calls `qmake` or a `Makefile` in\n`gnu-makefile` style, respectively. This is for Qt5 packages.\n\n- `qmake6` is like `qmake` but for Qt6.\n\n- `rust` specifies environment variables required for cross-compiling crates via cargo and\nfor compiling cargo -sys crates.\nIt also adds a `cargo` wrapper that detects and passes builds through `cargo-auditable`.\nThis helper is added by default for packages that use the `cargo` build style.\n\n<a id=\"functions\"></a>\n### Functions\n\nThe following functions can be defined to change the behavior of how the\npackage is downloaded, compiled and installed.\n\n- `pre_fetch()` Actions to execute before `do_fetch()`.\n\n- `do_fetch()` if defined and `distfiles` is not set, use it to fetch the required sources.\n\n- `post_fetch()` Actions to execute after `do_fetch()`.\n\n- `pre_extract()` Actions to execute after `post_fetch()`.\n\n- `do_extract()` if defined and `distfiles` is not set, use it to extract the required sources.\n\n- `post_extract()` Actions to execute after `do_extract()`.\n\n- `pre_patch()` Actions to execute after `post_extract()`.\n\n- `do_patch()` if defined use it to prepare the build environment and run hooks to apply patches.\n\n- `post_patch()` Actions to execute after `do_patch()`.\n\n- `pre_configure()` Actions to execute after `post_patch()`.\n\n- `do_configure()` Actions to execute to configure the package; `${configure_args}` should\nstill be passed in if it's a GNU configure script.\n\n- `post_configure()` Actions to execute after `do_configure()`.\n\n- `pre_build()` Actions to execute after `post_configure()`.\n\n- `do_build()` Actions to execute to build the package.\n\n- `post_build()` Actions to execute after `do_build()`.\n\n- `pre_check()` Actions to execute after `post_build()`.\n\n- `do_check()` Actions to execute to run checks for the package.\n\n- `post_check()` Actions to execute after `do_check()`.\n\n- `pre_install()` Actions to execute after `post_check()`.\n\n- `do_install()` Actions to execute to install the package files into the `fake destdir`.\n\n- `post_install()` Actions to execute after `do_install()`.\n\n- `do_clean()` Actions to execute to clean up after a successful package phase.\n\n> A function defined in a template has preference over the same function\ndefined by a `build_style` script.\n\nCurrent working directory for functions is set as follows:\n\n- For pre_fetch, pre_extract, do_clean: `<masterdir>`.\n\n- For do_fetch, post_fetch: `XBPS_BUILDDIR`.\n\n- For do_extract through do_patch: `wrksrc`.\n\n- For post_patch through post_install: `build_wrksrc`\nif it is defined, otherwise `wrksrc`.\n\n<a id=\"build_options\"></a>\n### Build options\n\nSome packages might be built with different build options to enable/disable\nadditional features; The XBPS source packages collection allows you to do this with some simple tweaks\nto the `template` file.\n\nThe following variables may be set to allow package build options:\n\n- `build_options` Sets the build options supported by the source package.\n\n- `build_options_default` Sets the default build options to be used by the source package.\n\n- `desc_option_<option>` Sets the description for the build option `option`. This must match the\nkeyword set in *build_options*. Note that if the build option is generic enough, its description\nshould be added to `common/options.description` instead.\n\nAfter defining those required variables, you can check for the\n`build_option_<option>` variable to know if it has been set and adapt the source\npackage accordingly. Additionally, the following functions are available:\n\n- *vopt_if()* `vopt_if <option> <if_true> [<if_false>]`\n\n  Outputs `if_true` if `option` is set, or `if_false` if it isn't set.\n\n- *vopt_with()* `vopt_with <option> [<flag>]`\n\n  Outputs `--with-<flag>` if the option is set, or `--without-<flag>`\n  otherwise. If `flag` isn't set, it defaults to `option`.\n\n  Examples:\n\n  - `vopt_with dbus`\n  - `vopt_with xml xml2`\n\n- *vopt_enable()* `vopt_enable <option> [<flag>]`\n\n  Same as `vopt_with`, but uses `--enable-<flag>` and\n  `--disable-<flag>` respectively.\n\n- *vopt_conflict()* `vopt_conflict <option 1> <option 2>`\n\n  Emits an error and exits if both options are set at the same time.\n\n- *vopt_bool()* `vopt_bool <option> <property>`\n\n  Outputs `-D<property>=true` if the option is set, or\n  `-D<property>=false` otherwise.\n\n- *vopt_feature()* `vopt_feature <option> <property>`\n\n  Same as `vopt_bool`, but uses `-D<property>=enabled` and\n\t`-D<property>=disabled` respectively.\n\nThe following example shows how to change a source package that uses GNU\nconfigure to enable a new build option to support PNG images:\n\n```\n# Template file for 'foo'\npkgname=foo\nversion=1.0\nrevision=1\nbuild_style=gnu-configure\nconfigure_args=\"... $(vopt_with png)\"\nmakedepends=\"... $(vopt_if png libpng-devel)\"\n...\n\n# Package build options\nbuild_options=\"png\"\ndesc_option_png=\"Enable support for PNG images\"\n\n# To build the package by default with the `png` option:\n#\n# build_options_default=\"png\"\n\n...\n\n```\n\nThe supported build options for a source package can be shown with `xbps-src`:\n\n    $ ./xbps-src show-options foo\n\nBuild options can be enabled with the `-o` flag of `xbps-src`:\n\n    $ ./xbps-src -o option,option1 <cmd> foo\n\nBuild options can be disabled by prefixing them with `~`:\n\n    $ ./xbps-src -o ~option,~option1 <cmd> foo\n\nBoth ways can be used together to enable and/or disable multiple options\nat the same time with `xbps-src`:\n\n    $ ./xbps-src -o option,~option1,~option2 <cmd> foo\n\nThe build options can also be shown for binary packages via `xbps-query(8)`:\n\n    $ xbps-query -R --property=build-options foo\n\nPermanent global package build options can be set via `XBPS_PKG_OPTIONS` variable in the\n`etc/conf` configuration file. Per package build options can be set via\n`XBPS_PKG_OPTIONS_<pkgname>`.\n\n> NOTE: if `pkgname` contains `dashes`, those should be replaced by `underscores`\nExample: `XBPS_PKG_OPTIONS_xorg_server=opt`.\n\nThe list of supported package build options and its description is defined in the\n`common/options.description` file.\n\n<a id=\"install_remove_files\"></a>\n### INSTALL and REMOVE files\n\nThe INSTALL and REMOVE shell snippets can be used to execute certain actions at a specified\nstage when a binary package is installed, updated or removed. There are some variables\nthat are always set by `xbps` when the scripts are executed:\n\n- `$ACTION`: to conditionalize its actions: `pre` or `post`.\n- `$PKGNAME`: the package name.\n- `$VERSION`: the package version.\n- `$UPDATE`: set to `yes` if package is being upgraded, `no` if package is being `installed` or `removed`.\n- `$CONF_FILE`: full path to `xbps.conf`.\n- `$ARCH`: the target architecture it is running on.\n\nAn example of how an `INSTALL` or `REMOVE` script shall be created is shown below:\n\n```\n# INSTALL\ncase \"$ACTION\" in\npre)\n\t# Actions to execute before the package files are unpacked.\n\t...\n\t;;\npost)\n\tif [ \"$UPDATE\" = \"yes\" ]; then\n\t\t# actions to execute if package is being updated.\n\t\t...\n\telse\n\t\t# actions to execute if package is being installed.\n\t\t...\n\tfi\n\t;;\nesac\n```\n\nsubpackages can also have their own `INSTALL` and `REMOVE` files, simply create them\nas `srcpkgs/<pkgname>/<subpkg>.INSTALL` or `srcpkgs/<pkgname>/<subpkg>.REMOVE` respectively.\n\n> NOTE: always use paths relative to the current working directory, otherwise if the scripts cannot\nbe executed via `chroot(2)` won't work correctly.\n\n> NOTE: do not use INSTALL/REMOVE scripts to print messages, see the next section for\nmore information.\n\n<a id=\"install_remove_files_msg\"></a>\n### INSTALL.msg and REMOVE.msg files\n\nThe `INSTALL.msg` and `REMOVE.msg` files can be used to print a message at post-install\nor pre-remove time, respectively.\n\nIdeally those files should not exceed 80 chars per line.\n\nsubpackages can also have their own `INSTALL.msg` and `REMOVE.msg` files, simply create them\nas `srcpkgs/<pkgname>/<subpkg>.INSTALL.msg` or `srcpkgs/<pkgname>/<subpkg>.REMOVE.msg` respectively.\n\nThis should only be used for critical messages, like warning users of breaking changes.\n\n<a id=\"runtime_account_creation\"></a>\n### Creating system accounts/groups at runtime\n\nThere's a trigger along with some variables that are specifically to create\n**system users and groups** when the binary package is being configured.\nThe following variables can be used for this purpose:\n\n- `system_groups` This specifies the names of the new *system groups* to be created, separated\nby blanks. Optionally the **gid** can be specified by delimiting it with a\ncolon, i.e `system_groups=\"_mygroup:78\"` or `system_groups=\"_foo _blah:8000\"`.\n\n- `system_accounts` This specifies the names of the new **system users/groups** to be created,\nseparated by blanks, i.e `system_accounts=\"_foo _blah:22\"`. Optionally the **uid** and **gid**\ncan be specified by delimiting it with a colon, i.e `system_accounts=\"_foo:48\"`.\nAdditional variables for the **system accounts** can be specified to change its behavior:\n\n\t- `<account>_homedir` the home directory for the user. If unset defaults to `/var/empty`.\n\t- `<account>_shell` the shell for the new user. If unset defaults to `/sbin/nologin`.\n\t- `<account>_descr` the description for the new user. If unset defaults to `<account> unprivileged user`.\n\t- `<account>_groups` additional groups to be added to for the new user.\n\t- `<account>_pgroup` to set the primary group, by default primary group is set to `<account>`.\n\nThe **system user** is created by using a dynamically allocated **uid/gid** in your system\nand it's created as a `system account`, unless the **uid** is set. A new group will be created for the\nspecified `system account` and used exclusively for this purpose.\n\nSystem accounts and groups must be prefixed with an underscore to prevent clashing with names of user\naccounts.\n\n> NOTE: The underscore policy does not apply to old packages, due to the inevitable breakage of\n> changing the username only new packages should follow it.\n\n<a id=\"writing_runit_services\"></a>\n### Writing runit services\n\nVoid Linux uses [runit](http://smarden.org/runit/) for booting and supervision of services.\n\nMost information about how to write them can be found in their\n[FAQ](http://smarden.org/runit/faq.html#create). The following are guidelines specific to\nVoid Linux on how to write services.\n\nIf the service daemon supports CLI flags, consider adding support for changing it via the\n`OPTS` variable by reading a file called `conf` in the same directory as the daemon.\n\n```sh\n#!/bin/sh\n[ -r conf ] && . ./conf\nexec daemon ${OPTS:- --flag-enabled-by-default}\n```\n\nIf the service requires the creation of a directory under `/run` or its link `/var/run`\nfor storing runtime information (like Pidfiles) write it into the service file. It\nis advised to use `install` if you need to create it with specific permissions instead\nof `mkdir -p`.\n\n```sh\n#!/bin/sh\ninstall -d -m0700 /run/foo\nexec foo\n```\n\n```sh\n#!/bin/sh\ninstall -d -m0700 -o bar -g bar /run/bar\nexec bar\n```\n\nIf the service requires directories in parts of the system that are not generally in\ntemporary filesystems. Then use the `make_dirs` variable in the template to create\nthose directories when the package is installed.\n\nIf the package installs a systemd service file or other unit, leave it in place as a\nreference point so long as including it has no negative side effects.\n\nExamples of when *not* to install systemd units:\n\n1. When doing so changes runtime behavior of the packaged software.\n2. When it is done via a compile time flag that also changes build dependencies.\n\n<a id=\"32bit_pkgs\"></a>\n### 32bit packages\n\n32bit packages are built automatically when the builder is x86 (32bit), but\nthere are some variables that can change the behavior:\n\n- `lib32depends` If this variable is set, dependencies listed here will be used rather than\nthose detected automatically by `xbps-src` and **depends**. Please note that\ndependencies must be specified with version comparators, Example:\n`lib32depends=\"foo>=0 blah<2.0\"`.\n\n- `lib32disabled` If this variable is set, no 32bit package will be built.\n\n- `lib32files` Additional files to be added to the **32bit** package. This expect absolute\npaths separated by blanks, Example: `lib32files=\"/usr/bin/blah /usr/include/blah.\"`.\n\n- `lib32symlinks` Makes a symlink of the target filename stored in the `lib32` directory.\nThis expects the basename of the target file, Example: `lib32symlinks=\"foo\"`.\n\n- `lib32mode` If unset, only shared/static libraries and pkg-config files will be copied to the\n**32bit** package. If set to `full` all files will be copied to the 32bit package, unmodified.\n\n<a id=\"pkgs_sub\"></a>\n### Subpackages\n\nIn the example shown above just a binary package is generated, but with some\nsimple tweaks multiple binary packages can be generated from a single\ntemplate/build, this is called `subpackages`.\n\nTo create additional `subpackages` the `template` must define a new function\nwith this naming: `<subpkgname>_package()`, Example:\n\n```\n# Template file for 'foo'\npkgname=foo\nversion=1.0\nrevision=1\nbuild_style=gnu-configure\nshort_desc=\"A short description max 72 chars\"\nmaintainer=\"name <email>\"\nlicense=\"GPL-3.0-or-later\"\nhomepage=\"http://www.foo.org\"\ndistfiles=\"http://www.foo.org/foo-${version}.tar.gz\"\nchecksum=\"fea0a94d4b605894f3e2d5572e3f96e4413bcad3a085aae7367c2cf07908b2ff\"\n\n# foo-devel is a subpkg\nfoo-devel_package() {\n\tshort_desc+=\" - development files\"\n\tdepends=\"${sourcepkg}>=${version}_${revision}\"\n\tpkg_install() {\n\t\tvmove usr/include\n\t\tvmove \"usr/lib/*.a\"\n\t\tvmove \"usr/lib/*.so\"\n\t\tvmove usr/lib/pkgconfig\n\t}\n}\n```\n\nAll subpackages need an additional symlink to the `main` pkg, otherwise dependencies\nrequiring those packages won't find its `template` Example:\n\n```\n /srcpkgs\n  |- foo <- directory (main pkg)\n  |  |- template\n  |- foo-devel <- symlink to `foo`\n```\n\nThe main package should specify all required `build dependencies` to be able to build\nall subpackages defined in the template.\n\nAn important point of `subpackages` is that they are processed after the main\npackage has run its `install` phase. The `pkg_install()` function specified on them\ncommonly is used to move files from the `main` package destdir to the `subpackage` destdir.\n\nThe helper functions `vinstall`, `vmkdir`, `vcopy` and `vmove` are just wrappers that simplify\nthe process of creating, copying and moving files/directories between the `main` package\ndestdir (`$DESTDIR`) to the `subpackage` destdir (`$PKGDESTDIR`).\n\nSubpackages are processed always in alphabetical order; To force a custom order,\nthe `subpackages` variable can be declared with the wanted order.\n\n<a id=\"pkgs_classes\"></a>\n### Some package classes\n\n<a id=\"pkgs_development\"></a>\n#### Development packages\n\nA development package, commonly generated as a subpackage, shall only contain\nfiles required for development, that is, headers, static libraries, shared\nlibrary symlinks, pkg-config files, API documentation or any other script\nthat is only useful when developing for the target software.\n\nA development package should depend on packages that are required to link\nagainst the provided shared libraries, i.e if `libfoo` provides the\n`libfoo.so.2` shared library and the linking needs `-lbar`, the package\nproviding the `libbar` shared library should be added as a dependency;\nand most likely it shall depend on its development package.\n\nIf a development package provides a `pkg-config` file, you should verify\nwhat dependencies the package needs for dynamic or static linking, and add\nthe appropriate `development` packages as dependencies.\n\nDevelopment packages for the C and C++ languages usually `vmove` the\nfollowing subset of files from the main package:\n\n* Header files `usr/include`\n* Static libraries `usr/lib/*.a`\n* Shared library symbolic links `usr/lib/*.so`\n* Cmake rules `usr/lib/cmake` `usr/share/cmake`\n* Package config files `usr/lib/pkgconfig` `usr/share/pkgconfig`\n* Autoconf macros `usr/share/aclocal`\n* Gobject introspection XML files `usr/share/gir-1.0`\n* Vala bindings `usr/share/vala`\n\n<a id=\"pkgs_data\"></a>\n#### Data packages\n\nAnother common subpackage type is the `-data` subpackage. This subpackage\ntype used to split architecture independent, big(ger) or huge amounts\nof data from a package's main and architecture dependent part. It is up\nto you to decide, if a `-data` subpackage makes sense for your package.\nThis type is common for games (graphics, sound and music), part libraries (CAD)\nor card material (maps).\nThe main package must then have `depends=\"${pkgname}-data-${version}_${revision}\"`,\npossibly in addition to other, non-automatic depends.\n\n<a id=\"pkgs_documentation\"></a>\n#### Documentation packages\n\nPackages intended for user interaction do not always unconditionally require\ntheir documentation part. A user who does not want to e.g. develop\nwith Qt5 will not need to install the (huge) qt5-doc package.\nAn expert may not need it or opt to use an online version.\n\nIn general a `-doc` package is useful, if the main package can be used both with\nor without documentation and the size of the documentation isn't really small.\nThe base package and the `-devel` subpackage should be kept small so that when\nbuilding packages depending on a specific package there is no need to install large\namounts of documentation for no reason. Thus the size of the documentation part should\nbe your guidance to decide whether or not to split off a `-doc` subpackage.\n\n<a id=\"pkgs_python\"></a>\n#### Python packages\n\nPython packages should be built with the `python3-module` build style, if possible.\nThis sets some environment variables required to allow cross compilation. Support to allow\nbuilding a python module for multiple versions from a single template is also possible.\nThe `python3-pep517` build style provides means to build python packages that provide a build-system\ndefinition compliant with [PEP 517](https://www.python.org/dev/peps/pep-0517/) without a traditional\n`setup.py` script. The `python3-pep517` build style does not provide a specific build backend, so\npackages will need to add an appropriate backend provider to `hostmakedepends`.\n\nPython packages that rely on `python3-setuptools` should generally map `setup_requires`\ndependencies in `setup.py` to `hostmakedepends` in the template and `install_requires`\ndependencies to `depends` in the template; include `python3` in `depends` if there are no other\npython dependencies. If the package includes a compiled extension, the `python3-devel` packages\nshould be added to `makedepends`, as should any python packages that also provide native libraries\nagainst which the extension will be linked (even if that package is also included in\n`hostmakedepends` to satisfy `setuptools`).\n\n**NB**: Python `setuptools` will attempt to use `pip` or `EasyInstall` to fetch any missing\ndependencies at build time. If you notice warnings about `EasyInstall` deprecation or python eggs\npresent in `${wrksrc}/.eggs` after building the package, then those packages should be added to\n`hostmakedepends`.\n\nThe following variables may influence how the python packages are built and configured\nat post-install time:\n\n- `pycompile_module`: By default, files and directories installed into\n`usr/lib/pythonX.Y/site-packages`, excluding `*-info` and `*.so`, are byte-compiled\nat install time as python modules.  This variable expects subset of them that\nshould be byte-compiled, if default is wrong.  Multiple python modules may be specified separated\nby blanks, Example: `pycompile_module=\"foo blah\"`. If a python module installs a file into\n`site-packages` rather than a directory, use the name of the file, Example:\n`pycompile_module=\"fnord.py\"`.\n\n- `pycompile_dirs`: this variable expects the python directories that should be `byte-compiled`\nrecursively by the target python version. This differs from `pycompile_module` in that any\npath may be specified, Example: `pycompile_dirs=\"usr/share/foo\"`.\n\n- `python_version`: this variable expects the supported Python major version.\nIn most cases version is inferred from shebang, install path or build style.\nOnly required for some multi-language\napplications (e.g., the application is written in C while the command is\nwritten in Python) or just single Python file ones that live in `/usr/bin`.\nIf `python_version` is set to `ignore`, python-containing shebangs will not be rewritten.\nUse this only if a package should not be using a system version of python.\n\n- `python_extras`: Python module extras to consider when verifying Python module dependencies.\nCan be used to ensure additional dependency sets are checked. Example: `python_extras=\"all\"`.\n\n- `nopyprovides`: if set, don't create `provides` entries for Python modules in the package.\n\n- `noverifypydeps`: if set, don't verify Python module dependencies.\n\nAlso, a set of useful variables are defined to use in the templates:\n\n| Variable    | Value                            |\n|-------------|----------------------------------|\n| py2_ver     | 2.X                              |\n| py2_lib     | usr/lib/python2.X                |\n| py2_sitelib | usr/lib/python2.X/site-packages  |\n| py2_inc     | usr/include/python2.X            |\n| py3_ver     | 3.X                              |\n| py3_lib     | usr/lib/python3.X                |\n| py3_sitelib | usr/lib/python3.X/site-packages  |\n| py3_inc     | usr/include/python3.Xm           |\n\n> NOTE: it's expected that additional subpkgs must be generated to allow packaging for multiple\npython versions.\n\n<a id=\"pkgs_go\"></a>\n#### Go packages\n\nGo packages should be built with the `go` build style, if possible.\nThe `go` build style takes care of downloading Go dependencies and\nsetting up cross compilation.\n\nThe following template variables influence how Go packages are built:\n\n- `go_import_path`: The import path of the package included in the\n  distfile, as it would be used with `go get`. For example, GitHub's\n  `hub` program has the import path `github.com/github/hub`. This\n  variable is required.\n- `go_package`: A space-separated list of import paths of the packages\n  that should be built. Defaults to `go_import_path`.\n- `go_build_tags`: An optional, space-separated list of build tags to\n  pass to Go.\n- `go_mod_mode`: The module download mode to use. May be `off` to ignore\n  any go.mod files, `default` to use Go's default behavior, or anything\n  accepted by `go build -mod MODE`.  Defaults to `vendor` if there's\n  a vendor directory, otherwise `default`.\n- `go_ldflags`: Arguments to pass to the linking steps of go tool.\n\nThe following environment variables influence how Go packages are built:\n\n- `XBPS_MAKEJOBS`: Value passed to the `-p` flag of `go install`, to\n  control the parallelism of the Go compiler.\n\nOccasionally it is necessary to perform operations from within the Go\nsource tree.  This is usually needed by programs using go-bindata or\notherwise preping some assets.  If possible do this in pre_build().\nThe path to the package's source inside `$GOPATH` is available as\n`$GOSRCPATH`.\n\n<a id=\"pkgs_haskell\"></a>\n#### Haskell packages\n\nWe build Haskell package using `stack` from\n[Stackage](http://www.stackage.org/), generally the LTS versions.\nHaskell templates need to have host dependencies on `ghc` and `stack`,\nand set build style to `haskell-stack`.\n\nThe following variables influence how Haskell packages are built:\n\n- `stackage`: The Stackage version used to build the package, e.g.\n  `lts-3.5`. Alternatively:\n  - You can prepare a `stack.yaml` configuration for the project and put it\n    into `files/stack.yaml`.\n  - If a `stack.yaml` file is present in the source files, it will be used\n- `make_build_args`: This is passed as-is to `stack build ...`, so\n  you can add your `--flag ...` parameters there.\n\n<a id=\"pkgs_font\"></a>\n#### Font packages\n\nFont packages are very straightforward to write, they are always set with the\nfollowing variables:\n\n- `depends=\"font-util\"`: because they are required for regenerating the font\ncache during the install/removal of the package\n- `font_dirs`: which should be set to the directory where the package\ninstalls its fonts\n\n<a id=\"pkg_rename\"></a>\n### Renaming a package\n\n- Create empty package of old name, depending on new package. This is\nnecessary to provide updates to systems where old package is already\ninstalled. This should be a subpackage of new one, except when version\nnumber of new package decreased: then create a separate template using\nold version and increased revision.\n- Edit references to package in other templates and common/shlibs.\n- Don't set `replaces=`, it can result in removing both packages from\nsystems by xbps.\n\n<a id=\"pkg_remove\"></a>\n### Removing a package\n\nFollows a list of things that should be done to help guarantee that a\npackage template removal and by extension its binary packages from\nVoid Linux's repositories goes smoothly.\n\nBefore removing a package template:\n\n- Guarantee that no package depends on it or any of its subpackages.\nFor that you can search the templates for references to the package\nwith `grep -r '\\bpkg\\b' srcpkgs/`.\n- Guarantee that no package depends on shlibs provided by it.\n\nWhen removing the package template:\n\n- Remove all symlinks that point to the package.\n`find srcpkgs/ -lname <pkg>` should be enough.\n- If the package provides shlibs make sure to remove them from\ncommon/shlibs.\n- Some packages use patches and files from other packages using symlinks,\ngenerally those packages are the same but have been split as to avoid\ncyclic dependencies. Make sure that the package you're removing is not\nthe source of those patches/files.\n- Remove package template.\n- Add `pkgname<=version_revision` to `replaces` variable of `removed-packages`\ntemplate.  All removed subpkgs should be added too.\nThis will uninstall package from systems where it is installed.\n- Remove the package from the repository index\nor contact a team member that can do so.\n\n<a id=\"xbps_triggers\"></a>\n### XBPS Triggers\n\nXBPS triggers are a collection of snippets of code, provided by the `xbps-triggers`\npackage, that are added to the INSTALL/REMOVE scripts of packages either manually\nby setting the `triggers` variable in the template, or automatically, when specific\nconditions are met.\n\nThe following is a list of all available triggers, their current status, what each\nof them does and what conditions need to be for it to be included automatically on a\npackage.\n\nThis is not a complete overview of the package. It is recommended to read the variables\nreferenced and the triggers themselves.\n\n<a id=\"triggers_appstream_cache\"></a>\n#### appstream-cache\n\nThe appstream-cache trigger is responsible for rebuilding the appstream metadata cache.\n\nDuring installation it executes `appstreamcli refresh-cache --verbose --force --datapath\n$APPSTREAM_PATHS --cachepath var/cache/app-info/gv`. By default APPSTREAM_PATHS are all the\npaths that appstreamcli will look into for metadata files.\n\nThe directories searched by appstreamcli are:\n\n- `usr/share/appdata`\n- `usr/share/app-info`\n- `var/lib/app-info`\n- `var/cache/app-info`\n\nDuring removal of the `AppStream` package it will remove the `var/cache/app-info/gv`\ndirectory.\n\nIt is automatically added to packages that have XML files under one of the directories\nsearched by appstreamcli.\n\n<a id=\"triggers_binfmts\"></a>\n#### binfmts\n\nThe binfmts trigger is responsible for registration and removal of arbitrary\nexecutable binary formats, know as binfmts.\n\nDuring installation/removal it uses `update-binfmts` from the `binfmt-support` package\nto register/remove entries from the arbitrary executable binary formats database.\n\nIt is automatically added to packages that contain files in `usr/share/binfmts`.\nThese files should be `update-binfmts` format files and will be imported with\n`update-binfmts --import`.\n\nWhile it is not preferred, the trigger can also be added by using the `binfmts` variable,\nwhich should contain lines defining binfmts to register:\n\n```\n/path/to/interpreter [update-binfmts binary format specification arguments ...]\n...\n```\n\nSee [`update-binfmts(8)`](https://man.voidlinux.org/man8/update-binfmts.8) for more details.\n\n<a id=\"triggers_dkms\"></a>\n#### dkms\n\nThe dkms trigger is responsible for compiling and removing dynamic kernel modules of a\npackage.\n\nDuring installation the trigger compiles and installs the dynamic module for all `linux`\npackages that have their corresponding linux-headers package installed. During removal\nthe corresponding module will be removed\n\nTo include the trigger use the `dkms_modules` variable, as the trigger won't do anything\nunless it is defined.\n\n<a id=\"triggers_gconf_schemas\"></a>\n#### gconf-schemas\n\nThe gconf-schemas trigger is responsible for registering and removing .schemas and\n.entries files into the schemas database directory\n\nDuring installation it uses `gconftool-2` to install .schemas and .entries files into\n`usr/share/gconf/schemas`. During removal it uses `gconftool-2` to remove the entries\nand schemas belonging to the package that is being removed from the database.\n\nTo include it add `gconf-schemas` to `triggers` and add the appropriate .schemas in\nthe `gconf_schemas` variable and .entries in `gconf_entries`.\n\nIt is automatically added to packages that have `/usr/share/gconf/schemas` present\nas a directory. All files with the schemas file extension under that directory\nare passed to the trigger.\n\n<a id=\"triggers_gdk_pixbuf_loaders\"></a>\n#### gdk-pixbuf-loaders\n\nThe gdk-pixbuf-loaders trigger is responsible for maintaining the GDK Pixbuf loaders cache.\n\nDuring installation it runs `gdk-pixbuf-query-loaders --update-cache` and also deletes\nthe obsolete `etc/gtk-2.0/gdk-pixbuf.loaders` file if present. During removal of the\ngdk-pixbuf package it removes the cache file if present. Normally at\n`usr/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache`.\n\nIt can be added by defining `gdk-pixbuf-loaders` in the `triggers` variable. It is also\nadded automatically to any package that has the path `usr/lib/gdk-pixbuf-2.0/2.10.0/loaders`\navailable as a directory.\n\n<a id=\"triggers_gio_modules\"></a>\n#### gio-modules\n\nThe gio-modules trigger is responsible for updating the Glib GIO module cache with\n`gio-querymodules` from the `glib` package\n\nDuring install and removal it just runs `gio-querymodules` to update the cache file\npresent under `usr/lib/gio/modules`.\n\nIt is automatically added to packages that have `/usr/lib/gio/modules` present\nas a directory.\n\n<a id=\"triggers_gsettings_schemas\"></a>\n#### gsettings-schemas\n\nThe gsettings-schemas trigger is responsible for compiling Glib's GSettings XML\nschema files during installation and removing the compiled files during removal.\n\nDuring installation it uses `glib-compile-schemas` from `glib` to compile the\nschemas into files with the suffix .compiled into `/usr/share/glib-2.0/schemas`.\n\nDuring removal of the glib package it deletes all files inside\n`/usr/share/glib-2.0/schemas` that end with .compiled.\n\nIt is automatically added to packages that have `/usr/share/glib-2.0/schemas` present\nas a directory.\n\n<a id=\"triggers_gtk_icon_cache\"></a>\n#### gtk-icon-cache\n\nThe gtk-icon-cache trigger is responsible for updating the gtk+ icon cache.\n\nDuring installation it uses `gtk-update-icon-cache` to update the icon cache.\n\nDuring removal of the gtk+ package it deletes the `icon-theme.cache` file\nin the directories defined by the variable `gtk_iconcache_dirs`.\n\nIt is automatically added on packages that have `/usr/share/icons` available\nas a directory, all directories under that directory have their absolute path\npassed to the trigger.\n\n<a id=\"triggers_gtk_immodules\"></a>\n#### gtk-immodules\n\nThe gtk-immodules trigger is responsible for updating the IM (Input Method) modules\nfile for gtk+.\n\nDuring installation it uses `gtk-query-immodules-2.0 --update-cache` to update the\ncache file. It also removes the obsolete configuration file  `etc/gtk-2.0/gtk.immodules`\nif present.\n\nDuring removal of the `gtk+` package it removes the cache file which is located at\n`usr/lib/gtk-2.0/2.10.0/immodules.cache`.\n\nIt is automatically added to packages that have `/usr/lib/gtk-2.0/2.10.0/immodules`\npresent as a directory.\n\n<a id=\"triggers_gtk_pixbuf_loaders\"></a>\n#### gtk-pixbuf-loaders\n\ngtk-pixbuf-loaders is the old name for the current `gdk-pixbuf-loaders` trigger and is\nin the process of being removed. It currently re-execs into `gdk-pixbuf-loaders` as a\ncompatibility measure.\n\nFor information about how it works refer to [gdk-pixbuf-loaders](#triggers_gdk_pixbuf_loaders).\n\n<a id=\"triggers_gtk3_immodules\"></a>\n#### gtk3-immodules\n\nThe gtk3-immodules trigger is responsible for updating the IM (Input Method) modules\nfile for gtk+3.\n\nDuring installation it executes `gtk-query-immodules-3.0 --update-cache` to update the\ncache file. It also removes the obsolete configuration file  `etc/gtk-3.0/gtk.immodules`\nif present.\n\nDuring removal of the `gtk+3` package it removes the cache file which is located at\n`usr/lib/gtk-3.0/3.0.0/immodules.cache`.\n\nIt is automatically added to packages that have `/usr/lib/gtk-3.0/3.0.0/immodules`\npresent as a directory.\n\n<a id=\"triggers_hwdb.d_dir\"></a>\n#### hwdb.d-dir\n\nThe hwdb.d-dir trigger is responsible for updating the hardware database.\n\nDuring installation and removal it runs `usr/bin/udevadm hwdb --root=. --update`.\n\nIt is automatically added to packages that have `/usr/lib/udev/hwdb.d` present\nas a directory.\n\n<a id=\"triggers_info_files\"></a>\n#### info-files\n\nThe info-files trigger is responsible for registering and unregistering the GNU info\nfiles of a package.\n\nIt checks the existence of the info files presented to it and if it is running under\nanother architecture.\n\nDuring installation it uses `install-info` to register info files into\n`usr/share/info`.\n\nDuring removal it uses `install-info --delete` to remove the info files from the\nregistry located at `usr/share/info`.\n\nIf it is running under another architecture it tries to use the host's `install-info`\nutility.\n\n<a id=\"triggers_initramfs_regenerate\"></a>\n#### initramfs-regenerate\n\nThe initramfs-regenerate trigger will trigger the regeneration of all kernel\ninitramfs images after package installation or removal. The trigger must be\nmanually requested.\n\nThis hook is probably most useful for DKMS packages because it will provide a\nmeans to include newly compiled kernel modules in initramfs images for all\ncurrently available kernels. When used in a DKMS package, it is recommended to\nmanually include the `dkms` trigger *before* the `initramfs-regenerate` trigger\nusing, for example,\n\n    ```\n    triggers=\"dkms initramfs-regenerate\"\n    ```\n\nAlthough `xbps-src` will automatically include the `dkms` trigger whenever\n`dkms_modules` is installed, the automatic addition will come *after*\n`initramfs-regenerate`, which will cause initramfs images to be recreated\nbefore the modules are compiled.\n\nBy default, the trigger uses `dracut --regenerate-all` to recreate initramfs\nimages. If `/etc/default/initramfs-regenerate` exists and defines\n`INITRAMFS_GENERATOR=mkinitcpio`, the trigger will instead use `mkinitcpio` and\nloop over all kernel versions for which modules appear to be installed.\nAlternatively, setting `INITRAMFS_GENERATOR=none` will disable image\nregeneration entirely.\n\n<a id=\"triggers_kernel_hooks\"></a>\n#### kernel-hooks\n\nThe kernel-hooks trigger is responsible for running scripts during installation/removal\nof kernel packages.\n\nThe available targets are pre-install, pre-remove, post-install and post-remove.\n\nWhen run it will try to run all executables found under `etc/kernel.d/$TARGET`. The\n`TARGET` variable is one of the 4 targets available for the trigger. It will also\ncreate the directory if it isn't present.\n\nDuring updates it won't try to run any executables when running with the pre-remove\ntarget.\n\nIt is automatically added if the helper variable `kernel_hooks_version` is defined.\nHowever it is not obligatory to have it defined.\n\n<a id=\"triggers_mimedb\"></a>\n#### mimedb\n\nThe mimedb trigger is responsible for updating the shared-mime-info database.\n\nIn all runs it will just execute `update-mime-database -n usr/share/mime`.\n\nIt is automatically added to packages that have `/usr/share/mime` available as\na directory.\n\n<a id=\"triggers_mkdirs\"></a>\n#### mkdirs\n\nThe mkdirs trigger is responsible for creating and removing directories dictated\nby the `make_dirs` variable.\n\nDuring installation it takes the `make_dirs` variable and splits it into groups of\n4 variables.\n\n- dir = full path to the directory\n- mode = Unix permissions for the directory\n- uid = name of the owning user\n- gid = name of the owning group\n\nIt will continue to split the values of `make_dirs` into groups of 4 until the values\nend.\n\nDuring installation it will create a directory with `dir` then set mode with `mode`\nand permission with `uid:gid`.\n\nDuring removal it will delete the directory using `rmdir`.\n\nTo include this trigger use the `make_dirs` variable, as the trigger won't do anything\nunless it is defined.\n\n<a id=\"triggers_pango_module\"></a>\n#### pango-modules\n\nThe pango-modules trigger is currently being removed since upstream has removed the\ncode responsible for it.\n\nIt used to update the pango modules file with `pango-modulesquery` during installation\nof any package.\n\nCurrently it removes `etc/pango/pango.modules` file during removal of the pango package.\n\nIt can be added by defining `pango-modules` in the `triggers` variable and has no way to get\nadded automatically to a package.\n\n<a id=\"triggers_pycompile\"></a>\n#### pycompile\n\nThe pycompile trigger is responsible for compiling python code into native\nbytecode and removing generated bytecode.\n\nDuring installation it will compile all python code under the paths it is given by\n`pycompile_dirs` and all modules described in `pycompile_module` into native bytecode and\nupdate the ldconfig(8) cache.\n\nDuring removal it will remove all the native bytecode and update the ldconfig(8) cache.\n\nTo include this trigger use the variables `pycompile_dirs` and `pycompile_module`. The\ntrigger won't do anything unless at least one of those variables is defined.\n\nA `python_version` variable can be set to direct behaviour of the trigger.\n\n<a id=\"triggers_register_shell\"></a>\n#### register-shell\n\nThe register-shell trigger is responsible for registering and removing shell entries\ninto `etc/shells`.\n\nDuring installation it will append the `etc/shells` file with the new shell and also\nchange the permissions to `644` on the file.\n\nDuring removal it will use `sed` to delete the shell from the file.\n\nTo include this trigger use the `register_shell` variable, as the trigger won't do\nanything unless it is defined.\n\n<a id=\"triggers_system_accounts\"></a>\n#### system-accounts\n\nThe system-accounts trigger is responsible for creating and disabling system accounts\nand groups.\n\nDuring removal it will disable the account by setting the Shell to /bin/false,\nHome to /var/empty, and appending ' - for uninstalled package $pkgname' to the\nDescription.\nExample: `transmission unprivileged user - for uninstalled package transmission`\n\nThis trigger can only be used by using the `system_accounts` variable.\n\n<a id=\"triggers_texmf_dist\"></a>\n#### texmf-dist\n\nThe texmf-dist trigger is responsible for regenerating TeXLive's texmf databases.\n\nDuring both installation and removal, it regenerates both the texhash and format\ndatabases using `texhash` and `fmtutil-sys`, to add or remove any new hashes or\nformats.\n\nIt runs on every package that changes /usr/share/texmf-dist. This is likely overkill,\nbut it is much cleaner rather than checking each format directory and each directory\nthat is hashed. In addition, it is very likely any package touching /usr/share/texmf-dist\nrequires one of these triggers anyway.\n\n<a id=\"triggers_update_desktopdb\"></a>\n#### update-desktopdb\n\nThe update-desktopdb trigger is responsible for updating the system's MIME database.\n\nDuring installation it will execute `update-desktop-database usr/share/applications`\nwhich will result in a cache file being created at `usr/share/applications/mimeinfo.cache`.\n\nDuring removal of the `desktop-file-utils` package it will remove the cache file that\nwas created during installation.\n\nIt is automatically added to packages that have `/usr/share/applications` available as\na directory.\n\n<a id=\"triggers_x11_fonts\"></a>\n#### x11-fonts\n\nThe x11-fonts trigger is responsible for rebuilding the fonts.dir and fonts.scale files\nfor packages that install X11 fonts, and update fontconfig's cache for these fonts.\n\nDuring installation and removal it executes `mkfontdir`, `mkfontscale` and `fc-cache` for\nall font directories it was given via the `font_dirs` variable.\n\nTo include this trigger use the `font_dirs` variable, as the trigger won't do anything\nunless it is defined.\n\n<a id=\"triggers_xml_catalog\"></a>\n#### xml-catalog\n\nThe xml-catalog trigger is responsible for registering and removing SGML/XML catalog entries.\n\nDuring installation it uses `xmlcatmgr` to register all catalogs, passed to it by the\n`sgml_entries` and `xml_entries` variables, in `usr/share/sgml/catalog` and\n`usr/share/xml/catalog` respectively.\n\nDuring removal it uses `xmlcatmgr` to remove all catalogs passed to it by the\n`sgml_entries` and `xml_entries` variables, in `usr/share/sgml/catalog` and\n`usr/share/xml/catalog` respectively.\n\nTo include this trigger use the `sgml_entries` variable or/and the `xml_entries` variable,\nas the trigger won't do anything unless either of them are defined.\n\n<a id=\"documentation\"></a>\n### Void specific documentation\n\nWhen you want document details of package's configuration and usage specific to Void Linux,\nnot covered by upstream documentation, put notes into\n`srcpkgs/<pkgname>/files/README.voidlinux` and install with\n`vdoc \"${FILESDIR}/README.voidlinux\"`.\n\n<a id=\"notes\"></a>\n### Notes\n\n- Make sure that all software is configured to use the `/usr` prefix.\n\n- Binaries should always be installed at `/usr/bin`.\n\n- Manual pages should always be installed at `/usr/share/man`.\n\n- If a software provides **shared libraries** and headers, probably you should\ncreate a `development package` that contains `headers`, `static libraries`\nand other files required for development (not required at runtime).\n\n- If you are updating a package please be careful with SONAME bumps, check\nthe installed files (`./xbps-src show-files pkg`) before pushing new updates.\n\n- Make sure that binaries are not stripped by the software, let xbps-src do this;\notherwise the `debug` packages won't have debugging symbols.\n\n<a id=\"contributing\"></a>\n### Contributing via git\n\nTo get started, [fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo) the void-linux `void-packages` git repository on GitHub and clone it:\n\n    $ git clone git@github.com:<user>/void-packages.git\n\nSee [CONTRIBUTING.md](./CONTRIBUTING.md) for information on how to format your\ncommits and other tips for contributing.\n\nOnce you've made changes to your `forked` repository, submit\na github pull request.\n\nTo keep your forked repository always up to date, setup the `upstream` remote\nto pull in new changes:\n\n    $ git remote add upstream https://github.com/void-linux/void-packages.git\n    $ git pull --rebase upstream master\n\n<a id=\"help\"></a>\n### Help\n\nIf after reading this `manual` you still need some kind of help, please join\nus at `#xbps` via IRC at `irc.libera.chat`.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.611328125,
          "content": "## The XBPS source packages collection\n\nThis repository contains the XBPS source packages collection to build binary packages\nfor the Void Linux distribution.\n\nThe included `xbps-src` script will fetch and compile the sources, and install its\nfiles into a `fake destdir` to generate XBPS binary packages that can be installed\nor queried through the `xbps-install(1)` and `xbps-query(1)` utilities, respectively.\n\nSee [Contributing](./CONTRIBUTING.md) for a general overview of how to contribute and the\n[Manual](./Manual.md) for details of how to create source packages.\n\n### Table of Contents\n\n- [Requirements](#requirements)\n- [Quick start](#quick-start)\n- [chroot methods](#chroot-methods)\n- [Install the bootstrap packages](#install-bootstrap)\n- [Configuration](#configuration)\n- [Directory hierarchy](#directory-hierarchy)\n- [Building packages](#building-packages)\n- [Package build options](#build-options)\n- [Sharing and signing your local repositories](#sharing-and-signing)\n- [Rebuilding and overwriting existing local packages](#rebuilding)\n- [Enabling distcc for distributed compilation](#distcc)\n- [Distfiles mirrors](#distfiles-mirrors)\n- [Cross compiling packages for a target architecture](#cross-compiling)\n- [Using xbps-src in a foreign Linux distribution](#foreign)\n- [Remaking the masterdir](#remaking-masterdir)\n- [Keeping your masterdir uptodate](#updating-masterdir)\n- [Building 32bit packages on x86_64](#building-32bit)\n- [Building packages natively for the musl C library](#building-for-musl)\n- [Building void base-system from scratch](#building-base-system)\n\n### Requirements\n\n- GNU bash\n- xbps >= 0.56\n- git(1) - unless configured to not, see etc/defaults.conf\n- common POSIX utilities included by default in almost all UNIX systems\n- curl(1) - required by `xbps-src update-check`\n\nFor bootstrapping additionally:\n- flock(1) - util-linux\n- bsdtar or GNU tar (in that order of preference)\n- install(1) - GNU coreutils\n- objcopy(1), objdump(1), strip(1): binutils\n\n`xbps-src` requires [a utility to chroot](#chroot-methods) and bind mount existing directories\ninto a `masterdir` that is used as its main `chroot` directory. `xbps-src` supports\nmultiple utilities to accomplish this task.\n\n> NOTE: `xbps-src` does not allow building as root anymore. Use one of the chroot\nmethods.\n\n<a name=\"quick-start\"></a>\n### Quick start\n\nClone the `void-packages` git repository and install the bootstrap packages:\n\n```\n$ git clone https://github.com/void-linux/void-packages.git\n$ cd void-packages\n$ ./xbps-src binary-bootstrap\n```\n\nBuild a package by specifying the `pkg` target and the package name:\n\n```\n$ ./xbps-src pkg <package_name>\n```\n\nUse `./xbps-src -h` to list all available targets and options.\n\nTo build packages marked as 'restricted', modify `etc/conf`:\n\n```\n$ echo XBPS_ALLOW_RESTRICTED=yes >> etc/conf\n```\n\nOnce built, the package will be available in `hostdir/binpkgs` or an appropriate subdirectory (e.g. `hostdir/binpkgs/nonfree`). To install the package:\n\n```\n# xbps-install --repository hostdir/binpkgs <package_name>\n```\n\nAlternatively, packages can be installed with the `xi` utility, from the `xtools` package. `xi` takes the repository of the current working directory into account.\n\n```\n$ xi <package_name>\n```\n\n<a name=\"chroot-methods\"></a>\n### chroot methods\n\n#### xbps-uunshare(1) (default)\n\nXBPS utility that uses `user_namespaces(7)` (part of xbps, default without `-t` flag).\n\nThis utility requires these Linux kernel options:\n\n- CONFIG\\_NAMESPACES\n- CONFIG\\_IPC\\_NS\n- CONFIG\\_UTS\\_NS\n- CONFIG\\_USER\\_NS\n\nThis is the default method, and if your system does not support any of the required kernel\noptions it will fail with `EINVAL (Invalid argument)`.\n\n#### xbps-uchroot(1)\n\nXBPS utility that uses `namespaces` and must be `setgid` (part of xbps).\n\n> NOTE: This is the only method that implements functionality of `xbps-src -t`, therefore the\nflag ignores the choice made in configuration files and enables `xbps-uchroot`.\n\nThis utility requires these Linux kernel options:\n\n- CONFIG\\_NAMESPACES\n- CONFIG\\_IPC\\_NS\n- CONFIG\\_PID\\_NS\n- CONFIG\\_UTS\\_NS\n\nYour user must be added to a special group to be able to use `xbps-uchroot(1)` and the\nexecutable must be `setgid`:\n\n    # chown root:<group> xbps-uchroot\n    # chmod 4750 xbps-uchroot\n    # usermod -a -G <group> <user>\n\n> NOTE: by default in void you shouldn't do this manually, your user must be a member of\nthe `xbuilder` group.\n\nTo enable it:\n\n    $ cd void-packages\n    $ echo XBPS_CHROOT_CMD=uchroot >> etc/conf\n\nIf for some reason it's erroring out as `ERROR clone (Operation not permitted)`, check that\nyour user is a member of the required `group` and that `xbps-uchroot(1)` utility has the\nproper permissions and owner/group as explained above.\n\n#### bwrap(1)\n\nbubblewrap, sandboxing tool for unprivileged users that uses\nuser namespaces or setuid.\nSee <https://github.com/containers/bubblewrap>.\n\n#### ethereal\n\nDestroys host system it runs on. Only useful for one-shot containers, i.e docker (used with CI).\n\n<a name=\"install-bootstrap\"></a>\n### Install the bootstrap packages\n\nThere is a set of packages that makes up the initial build container, called the `bootstrap`.\nThese packages are installed into the `masterdir` in order to create the container.\n\nThe primary and recommended way to set up this container is using the `binary-bootstrap`\ncommand. This will use pre-existing binary packages, either from remote `xbps` repositories\nor from your local repository.\n\nThere is also the `bootstrap` command, which will build all necessary `bootstrap` packages from\nscratch. This is usually not recommended, since those packages are built using your host system's\ntoolchain and are neither fully featured nor reproducible (your host system may influence the\nbuild) and thus should only be used as a stage 0 for bootstrapping new Void systems.\n\nIf you still choose to use `bootstrap`, use the resulting stage 0 container to rebuild all\n`bootstrap` packages again, then use `binary-bootstrap` (stage 1) and rebuild the `bootstrap`\npackages once more (to gain stage 2, and then use `binary-bootstrap` again). Once you've done\nthat, you will have a `bootstrap` set equivalent to using `binary-bootstrap` in the first place.\n\nAlso keep in mind that a full source `bootstrap` is time consuming and will require having an\nassortment of utilities installed in your host system, such as `binutils`, `gcc`, `perl`,\n`texinfo` and others.\n\n### Configuration\n\nThe `etc/defaults.conf` file contains the possible settings that can be overridden\nthrough the `etc/conf` configuration file for the `xbps-src` utility; if that file\ndoes not exist, will try to read configuration settings from `$XDG_CONFIG_HOME/xbps-src.conf`, `~/.config/xbps-src.conf`, `~/.xbps-src.conf`.\n\nIf you want to customize default `CFLAGS`, `CXXFLAGS` and `LDFLAGS`, don't override\nthose defined in `etc/defaults.conf`, set them on `etc/conf` instead i.e:\n\n    $ echo 'XBPS_CFLAGS=\"your flags here\"' >> etc/conf\n    $ echo 'XBPS_LDFLAGS=\"your flags here\"' >> etc/conf\n\nNative and cross compiler/linker flags are set per architecture in `common/build-profiles`\nand `common/cross-profiles` respectively. Ideally those settings are good enough by default,\nand there's no need to set your own unless you know what you are doing.\n\n#### Virtual packages\n\nThe `etc/defaults.virtual` file contains the default replacements for virtual packages,\nused as dependencies in the source packages tree.\n\nIf you want to customize those replacements, copy `etc/defaults.virtual` to `etc/virtual`\nand edit it accordingly to your needs.\n\n<a name=\"directory-hierarchy\"></a>\n### Directory hierarchy\n\nThe following directory hierarchy is used with a default configuration file:\n\n         /void-packages\n            |- common\n            |- etc\n            |- srcpkgs\n            |  |- xbps\n            |     |- template\n            |\n            |- hostdir\n            |  |- binpkgs ...\n            |  |- ccache ...\n            |  |- distcc-<arch> ...\n            |  |- repocache ...\n            |  |- sources ...\n            |\n            |- masterdir-<arch>\n            |  |- builddir -> ...\n            |  |- destdir -> ...\n            |  |- host -> bind mounted from <hostdir>\n            |  |- void-packages -> bind mounted from <void-packages>\n\n\nThe description of these directories is as follows:\n\n - `masterdir-<arch>`: master directory to be used as rootfs to build/install packages.\n - `builddir`: to unpack package source tarballs and where packages are built.\n - `destdir`: to install packages, aka **fake destdir**.\n - `hostdir/ccache`: to store ccache data if the `XBPS_CCACHE` option is enabled.\n - `hostdir/distcc-<arch>`: to store distcc data if the `XBPS_DISTCC` option is enabled.\n - `hostdir/repocache`: to store binary packages from remote repositories.\n - `hostdir/sources`: to store package sources.\n - `hostdir/binpkgs`: local repository to store generated binary packages.\n\n<a name=\"building-packages\"></a>\n### Building packages\n\nThe simplest form of building package is accomplished by running the `pkg` target in `xbps-src`:\n\n```\n$ cd void-packages\n$ ./xbps-src pkg <pkgname>\n```\n\nWhen the package and its required dependencies are built, the binary packages will be created\nand registered in the default local repository at `hostdir/binpkgs`; the path to this local repository can be added to\nany xbps configuration file (see xbps.d(5)) or by explicitly appending them via cmdline, i.e:\n\n    $ xbps-install --repository=hostdir/binpkgs ...\n    $ xbps-query --repository=hostdir/binpkgs ...\n\nBy default **xbps-src** will try to resolve package dependencies in this order:\n\n - If a dependency exists in the local repository, use it (`hostdir/binpkgs`).\n - If a dependency exists in a remote repository, use it.\n - If a dependency exists in a source package, use it.\n\nIt is possible to avoid using remote repositories completely by using the `-N` flag.\n\n> The default local repository may contain multiple *sub-repositories*: `debug`, `multilib`, etc.\n\n<a name=\"build-options\"></a>\n### Package build options\n\nThe supported build options for a source package can be shown with `xbps-src show-options`:\n\n    $ ./xbps-src show-options foo\n\nBuild options can be enabled with the `-o` flag of `xbps-src`:\n\n    $ ./xbps-src -o option,option1 pkg foo\n\nBuild options can be disabled by prefixing them with `~`:\n\n    $ ./xbps-src -o ~option,~option1 pkg foo\n\nBoth ways can be used together to enable and/or disable multiple options\nat the same time with `xbps-src`:\n\n    $ ./xbps-src -o option,~option1,~option2 pkg foo\n\nThe build options can also be shown for binary packages via `xbps-query(1)`:\n\n    $ xbps-query -R --property=build-options foo\n\n> NOTE: if you build a package with a custom option, and that package is available\nin an official void repository, an update will ignore those options. Put that package\non `hold` mode via `xbps-pkgdb(1)`, i.e `xbps-pkgdb -m hold foo` to ignore updates\nwith `xbps-install -u`. Once the package is on `hold`, the only way to update it\nis by declaring it explicitly: `xbps-install -u foo`.\n\nPermanent global package build options can be set via `XBPS_PKG_OPTIONS` variable in the\n`etc/conf` configuration file. Per package build options can be set via\n`XBPS_PKG_OPTIONS_<pkgname>`.\n\n> NOTE: if `pkgname` contains `dashes`, those should be replaced by `underscores`\ni.e `XBPS_PKG_OPTIONS_xorg_server=opt`.\n\nThe list of supported package build options and its description is defined in the\n`common/options.description` file or in the `template` file.\n\n<a name=\"sharing-and-signing\"></a>\n### Sharing and signing your local repositories\n\nTo share a local repository remotely it's mandatory to sign it and the binary packages\nstored on it. This is accomplished with the `xbps-rindex(1)` utility.\n\nFirst a RSA key must be created with `openssl(1)` or `ssh-keygen(1)`:\n\n\t$ openssl genrsa -des3 -out privkey.pem 4096\n\nor\n\n\t$ ssh-keygen -t rsa -b 4096 -m PEM -f privkey.pem\n\n> Only RSA keys in PEM format are currently accepted by xbps.\n\nOnce the RSA private key is ready you can use it to initialize the repository metadata:\n\n\t$ xbps-rindex --sign --signedby \"I'm Groot\" --privkey privkey.pem $PWD/hostdir/binpkgs\n\nAnd then make a signature per package:\n\n\t$ xbps-rindex --sign-pkg --privkey privkey.pem $PWD/hostdir/binpkgs/*.xbps\n\n> If --privkey is unset, it defaults to `~/.ssh/id_rsa`.\n\nIf the RSA key was protected with a passphrase you'll have to type it, or alternatively set\nit via the `XBPS_PASSPHRASE` environment variable.\n\nOnce the binary packages have been signed, check if the repository contains the appropriate `hex fingerprint`:\n\n\t$ xbps-query --repository=hostdir/binpkgs -vL\n\t...\n\nEach time a binary package is created, a package signature must be created with `--sign-pkg`.\n\n> It is not possible to sign a repository with multiple RSA keys.\n\nIf packages in `hostdir/binpkgs` are signed, the key in `.plist` format (as imported by xbps) can be placed\nin `etc/repo-keys/` to prevent xbps-src from prompting to import that key.\n\n<a name=\"rebuilding\"></a>\n### Rebuilding and overwriting existing local packages\n\nPackages are overwritten on every build to make getting package with changed build options easy.\nTo make xbps-src skip build and preserve first package build with given version and revision,\nsame as in official void repository, set `XBPS_PRESERVE_PKGS=yes` in `etc/conf` file.\n\nReinstalling a package in your target `rootdir` can be easily done too:\n\n    $ xbps-install --repository=/path/to/local/repo -yf xbps-0.25_1\n\nUsing `-f` flag twice will overwrite configuration files.\n\n> Please note that the `package expression` must be properly defined to explicitly pick up\nthe package from the desired repository.\n\n<a name=\"distcc\"></a>\n### Enabling distcc for distributed compilation\n\nSetup the workers (machines that will compile the code):\n\n    # xbps-install -Sy distcc\n    \nUpdate distcc compiler whitelist\n\n    # update-distcc-symlinks\n\nModify the configuration to allow your local network machines to use distcc (e.g. `192.168.2.0/24`):\n\n    # echo \"192.168.2.0/24\" >> /etc/distcc/clients.allow\n\nEnable and start the `distccd` service:\n\n    # ln -s /etc/sv/distccd /var/service\n\nInstall distcc on the host (machine that executes xbps-src) as well.\nUnless you want to use the host as worker from other machines, there is no need\nto modify the configuration.\n\nOn the host you can now enable distcc in the `void-packages/etc/conf` file:\n\n    XBPS_DISTCC=yes\n    XBPS_DISTCC_HOSTS=\"localhost/2 --localslots_cpp=24 192.168.2.101/9 192.168.2.102/2\"\n    XBPS_MAKEJOBS=16\n\nThe example values assume a localhost CPU with 4 cores of which at most 2 are used for compiler jobs.\nThe number of slots for preprocessor jobs is set to 24 in order to have enough preprocessed data for other CPUs to compile.\nThe worker 192.168.2.101 has a CPU with 8 cores and the /9 for the number of jobs is a saturating choice.\nThe worker 192.168.2.102 is set to run at most 2 compile jobs to keep its load low, even if its CPU has 4 cores.\nThe XBPS_MAKEJOBS setting is increased to 16 to account for the possible parallelism (2 + 9 + 2 + some slack).\n\n<a name=\"distfiles-mirrors\"></a>\n### Distfiles mirror(s)\n\nIn etc/conf you may optionally define a mirror or a list of mirrors to search for distfiles.\n\n    $ echo 'XBPS_DISTFILES_MIRROR=\"ftp://192.168.100.5/gentoo/distfiles\"' >> etc/conf\n\nIf more than one mirror is to be searched, you can either specify multiple URLs separated\nwith blanks, or add to the variable like this\n\n    $ echo 'XBPS_DISTFILES_MIRROR+=\" https://sources.voidlinux.org/\"' >> etc/conf\n\nMake sure to put the blank after the first double quote in this case.\n\nThe mirrors are searched in order for the distfiles to build a package until the\nchecksum of the downloaded file matches the one specified in the template.\n\nUltimately, if no mirror carries the distfile, or in case all downloads failed the\nchecksum verification, the original download location is used.\n\nIf you use `uchroot` for your XBPS_CHROOT_CMD, you may also specify a local path\nusing the `file://` prefix or simply an absolute path on your build host (e.g. /mnt/distfiles).\nMirror locations specified this way are bind mounted inside the chroot environment\nunder $XBPS_MASTERDIR and searched for distfiles just the same as remote locations.\n\n<a name=\"cross-compiling\"></a>\n### Cross compiling packages for a target architecture\n\nCurrently `xbps-src` can cross build packages for some target architectures with a cross compiler.\nThe supported target is shown with `./xbps-src -h`.\n\nIf a source package has been adapted to be **cross buildable** `xbps-src` will automatically build the binary package(s) with a simple command:\n\n    $ ./xbps-src -a <target> pkg <pkgname>\n\nIf the build for whatever reason fails, might be a new build issue or simply because it hasn't been adapted to be **cross compiled**.\n\n<a name=\"foreign\"></a>\n### Using xbps-src in a foreign Linux distribution\n\nxbps-src can be used in any recent Linux distribution matching the CPU architecture.\n\nTo use xbps-src in your Linux distribution use the following instructions. Let's start downloading the xbps static binaries:\n\n    $ wget http://repo-default.voidlinux.org/static/xbps-static-latest.<arch>-musl.tar.xz\n    $ mkdir ~/XBPS\n    $ tar xvf xbps-static-latest.<arch>-musl.tar.xz -C ~/XBPS\n    $ export PATH=~/XBPS/usr/bin:$PATH\n\nIf `xbps-uunshare` does not work because of lack of `user_namespaces(7)` support,\ntry other [chroot methods](#chroot-methods).\n\nClone the `void-packages` git repository:\n\n    $ git clone https://github.com/void-linux/void-packages.git\n\nand `xbps-src` should be fully functional; just start the `bootstrap` process, i.e:\n\n    $ ./xbps-src binary-bootstrap\n\nThe default masterdir is created in the current working directory, i.e. `void-packages/masterdir-<arch>`, where `<arch>` for the default masterdir is is the native xbps architecture.\n\n<a name=\"remaking-masterdir\"></a>\n### Remaking the masterdir\n\nIf for some reason you must update xbps-src and the `bootstrap-update` target is not enough, it's possible to recreate a masterdir with two simple commands (please note that `zap` keeps your `ccache/distcc/host` directories intact):\n\n    $ ./xbps-src zap\n    $ ./xbps-src binary-bootstrap\n\n<a name=\"updating-masterdir\"></a>\n### Keeping your masterdir uptodate\n\nSometimes the bootstrap packages must be updated to the latest available version in repositories, this is accomplished with the `bootstrap-update` target:\n\n    $ ./xbps-src bootstrap-update\n\n<a name=\"building-32bit\"></a>\n### Building 32bit packages on x86_64\n\nTwo ways are available to build 32bit packages on x86\\_64:\n\n - native mode with a 32bit masterdir (recommended, used in official repository)\n - cross compilation mode to i686 [target](#cross-compiling)\n\nThe canonical mode (native) needs a new x86 `masterdir`:\n\n    $ ./xbps-src -A i686 binary-bootstrap\n    $ ./xbps-src -A i686 ...\n\n<a name=\"building-for-musl\"></a>\n### Building packages natively for the musl C library\n\nThe canonical way of building packages for same architecture but different C library is through a dedicated masterdir by using the host architecture flag `-A`.\nTo build for x86_64-musl on glibc x86_64 system, prepare a new masterdir with the musl packages:\n\n    $ ./xbps-src -A x86_64-musl binary-bootstrap\n\nThis will create and bootstrap a new masterdir called `masterdir-x86_64-musl` that will be used when `-A x86_64-musl` is specified.\nYour new masterdir is now ready to build packages natively for the musl C library:\n\n    $ ./xbps-src -A x86_64-musl pkg ...\n\n<a name=\"building-base-system\"></a>\n### Building void base-system from scratch\n\nTo rebuild all packages in `base-system` for your native architecture:\n\n    $ ./xbps-src -N pkg base-system\n\nIt's also possible to cross compile everything from scratch:\n\n    $ ./xbps-src -a <target> -N pkg base-system\n\nOnce the build has finished, you can specify the path to the local repository to `void-mklive`, i.e:\n\n    # cd void-mklive\n    # make\n    # ./mklive.sh ... -r /path/to/hostdir/binpkgs\n"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "srcpkgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "xbps-src",
          "type": "blob",
          "size": 35.41796875,
          "content": "#!/bin/bash\n# vim: set ts=4 sw=4 et:\n\nprint_cross_targets() {\n    local f\n    for f in \"${XBPS_DISTDIR}\"/common/cross-profiles/*.sh; do\n        f=${f%.sh}; f=${f##*/}; printf \"\\t$f\\n\"\n    done\n}\n\nusage() {\n    # copied from main logic because this is run before XBPS_DISTDIR is set normally\n    local _distdir=\"$(readlink -f \"${0%/*}\")\"\n    if [ \"${_distdir}\" = \".\" ]; then\n        readonly XBPS_DISTDIR=\"$(pwd -P)\"\n    else\n        readonly XBPS_DISTDIR=\"${_distdir}\"\n    fi\n    cat << _EOF\n$PROGNAME: [options] <target> [arguments]\n\nTargets: (only one may be specified)\n\nbinary-bootstrap\n    Install bootstrap packages from host repositories into <masterdir>.\n    If the optional '-A <arch>' flag is set, it will install bootstrap packages\n    from this architecture, and its required xbps utilities. The <masterdir> will\n    be initialized for chroot operations.\n\nbootstrap\n    Build and install from source the bootstrap packages into <masterdir>.\n    If the optional '-A <arch>' flag is set, it will build and install bootstrap\n    packages from this architecture, and its required xbps utilities. The <masterdir>\n    will be initialized for chroot operations.\n\nbootstrap-update\n    Updates bootstrap packages with latest versions available from registered\n    repositories in the XBPS configuration file.\n\nconsistency-check\n    Runs a consistency check on all packages\n\nchroot\n    Enter to the chroot in <masterdir>.\n\nclean-repocache\n    Removes obsolete packages from <hostdir>/repocache.\n\nfetch <pkgname>\n    Download package source distribution file(s).\n\nextract <pkgname>\n    Extract package source distribution file(s) into the build directory.\n    By default set to <masterdir>/builddir.\n\npatch <pkgname>\n    Patch the package sources and perform other operations required to\n    prepare a package for configuring and building\n\nconfigure <pkgname>\n    Configure a package (fetch + extract + patch + configure).\n\nbuild <pkgname>\n    Build package source (fetch + extract + patch + configure + build).\n\ncheck <pkgname>\n    Run the package check(s) after building the package source.\n\ninstall <pkgname>\n    Install target package into <destdir> but not building the binary package\n    and not removing build directory for inspection purposes.\n\npkg <pkgname>\n    Build binary package for <pkgname> and all required dependencies.\n\nclean [pkgname]\n    Removes auto dependencies, cleans up <masterdir>/builddir and <masterdir>/destdir.\n    If <pkgname> argument is specified, package files from <masterdir>/destdir and its\n    build directory in <masterdir>/buiddir are removed.\n\nlist\n    Lists installed packages in <masterdir>.\n\nremove <pkgname>\n    Remove target package from <destdir>. If <pkgname>-<version> is not matched\n    from build template nothing is removed.\n\nremove-autodeps\n    Removes all package dependencies that were installed automatically.\n\npurge-distfiles\n    Removes all obsolete distfiles in <hostdir>/sources.\n\nshow <pkgname>\n    Show information for the specified package.\n\nshow-avail <pkgname>\n    Returns 0 if package can be built for the given architecture,\n    any other error otherwise.\n\nshow-build-deps <pkgname>\n    Show required build dependencies for <pkgname>.\n\nshow-check-deps <pkgname>\n    Show required check dependencies for <pkgname>.\n\nshow-deps <pkgname>\n    Show required run-time dependencies for <pkgname>. Package must be\n    installed into destdir.\n\nshow-files <pkgname>\n    Show files installed by <pkgname>. Package must be installed into destdir.\n\nshow-hostmakedepends <pkgname>\n    Show required host build dependencies for <pkgname>.\n\nshow-makedepends <pkgname>\n    Show required target build dependencies for <pkgname>.\n\nshow-options <pkgname>\n    Show available build options by <pkgname>.\n\nshow-shlib-provides <pkgname>\n    Show list of provided shlibs for <pkgname>. Package must be installed into destdir.\n\nshow-shlib-requires <pkgname>\n    Show list of required shlibs for <pkgname>. Package must be installed into destdir.\n\nshow-var <var>\n    Prints the value of <var> if it's defined in xbps-src.\n\nshow-repo-updates\n    Prints the list of outdated packages in XBPS repositories.\n\nshow-sys-updates\n    Prints the list of outdated packages in your system.\n\nshow-local-updates\n    Prints the list of outdated packages in your local repositories.\n\nsort-dependencies <pkg> <pkgN+1> ...\n    Given a list of packages specified as additional arguments, a sorted dependency\n    list will be returned to stdout.\n\nupdate-bulk\n    Rebuilds all packages in the system repositories that are outdated.\n\nupdate-sys\n    Rebuilds all packages in your system that are outdated and updates them.\n\nupdate-local\n    Rebuilds all packages in your local repositories that are outdated.\n\nupdate-check <pkgname>\n    Check upstream site of <pkgname> for new releases.\n\nupdate-hash-cache\n    Update the hash cache with existing source distfiles.\n\nzap\n    Removes a masterdir but preserving ccache, distcc and host directories.\n\nOptions:\n\n-1  If dependencies of target package are missing, fail instead of building them.\n\n-A <host>\n    Use this host machine. Automatically creates masterdir-<host> if it doesn't\n    already exist. Some host machines may require qemu-user and\n    binfmt-support if not natively supported by the processor. Supported hosts:\n\n$(print_cross_targets)\n\n-a  <target>\n    Cross compile packages for this target machine. Supported targets:\n\n$(print_cross_targets)\n\n-b  Build packages even if marked as broken, nocross, or excluded with archs.\n\n-c  <configuration>\n    If specified, etc/conf.<configuration> will be used as the primary config\n    file name; etc/conf will only be attempted if that does not exist.\n\n-C  Do not remove build directory, automatic dependencies and\n    package destdir after successful install.\n\n-E  If a binary package exists in a repository for the target package,\n    do not try to build it, exit immediately.\n\n-f  Force running the specified stage (configure/build/install/pkg)\n    even if it ran successfully.\n\n-G  Enable XBPS_USE_GIT_REVS (see etc/defaults.conf for more information).\n\n-g  Enable building -dbg packages with debugging symbols.\n\n-H  <hostdir>\n    Absolute path to a directory to be bind mounted at <masterdir>/host.\n    The host directory stores binary packages, sources and package dependencies\n    downloaded from remote repositories.\n    If unset defaults to void-packages/hostdir.\n\n-h  Usage output.\n\n-I  Ignore required dependencies, useful for extracting/fetching sources.\n\n-i  Make xbps-src internal errors non-fatal.\n\n-j  Number of parallel build jobs to use when building packages.\n\n-L  Disable ASCII colors.\n\n-m  <masterdir>\n    Absolute path to a directory to be used as masterdir.\n    The masterdir is the main directory to build/store/compile packages.\n    If unset defaults to void-packages/masterdir-<host>.\n\n-N  Disable use of remote repositories to resolve dependencies.\n\n-o  <opt,~opt2,...>\n    Enable or disable (prefixed with ~) package build options. If 'etc/conf'\n    already specifies some, it is merged. Keep in mind that these options\n    apply to all packages within the build, as in if a dependency needs to\n    be built, it will inherit these options.\n\n    Supported options can be shown with the 'show-options' target.\n\n-p  <variable,variable2,...>\n    For show target, show specified variables in addition to default ones.\n    Variable is split and each word is printed in separate line by default.\n    In order to print the whole value in one line, append asterisk to variable name.\n\n-Q  Enable running the check stage.\n\n-K  Enable running the check stage with longer tests.\n\n-q  Suppress informational output of xbps-src (build output is still printed).\n\n-r  <repo>\n    Use an alternative local repository to store generated binary packages.\n    If unset defaults to <hostdir>/binpkgs. If set the binpkgs will\n    be stored into <hostdir>/binpkgs/<repo>.\n    This alternative repository will also be used to resolve dependencies\n    with highest priority order than others.\n\n-s  Make some warnings into errors.\n\n-t  Create a temporary masterdir to not pollute the current one. Note that\n    the existing masterdir must be fully populated with binary-bootstrap first.\n    Once the target has finished, this temporary masterdir will be removed.\n    This flag requires xbps-uchroot(1), and won't work on filesystems that don't\n    support overlayfs.\n\n-v  Show verbose messages (only affects update-check).\n\n-V  Print version of xbps, then exit.\n\n_EOF\n}\n\ncheck_reqhost_utils() {\n    local broken\n\n    [ \"$IN_CHROOT\" ] && return 0\n\n    for f in ${REQHOST_UTILS}; do\n        if ! command -v ${f} &>/dev/null; then\n            echo \"${f} is missing in your system, can't continue!\" 1>&2\n            broken=1\n        fi\n    done\n    [ \"$broken\" ] && exit 1\n    [ -z \"$1\" ] && return 0\n\n    for f in ${REQHOST_UTILS_BOOTSTRAP}; do\n        if ! command -v ${f} &>/dev/null; then\n            echo \"${f} is missing in your system, can't continue!\" 1>&2\n            broken=1\n        fi\n    done\n    [ \"$broken\" ] && exit 1\n}\n\ncheck_build_requirements() {\n    local found\n\n    case \"$XBPS_TARGET\" in\n        *bootstrap*) found=1;;\n        *) ;;\n    esac\n    if [ -z \"$found\" ]; then\n        xbps-uhelper cmpver \"$XBPS_VERSION\" \"$XBPS_VERSION_REQ\"\n        if [ $? -eq 255 ]; then\n            echo \"ERROR: requires xbps>=${XBPS_VERSION_REQ}\" 1>&2\n            echo \"Bootstrap packages must be updated with 'xbps-src bootstrap-update'\" 1>&2\n            exit 1\n        fi\n    fi\n}\n\nchroot_check() {\n    if [ -f $XBPS_MASTERDIR/.xbps_chroot_init -o \"$XBPS_CHROOT_CMD\" = \"ethereal\" ]; then\n        export CHROOT_READY=1\n    fi\n}\n\ncheck_native_arch() {\n    if [ \"$CHROOT_READY\" ]; then\n        if [ -s $XBPS_MASTERDIR/.xbps_chroot_init ]; then\n            export XBPS_ARCH=$(<$XBPS_MASTERDIR/.xbps_chroot_init)\n        else\n            export XBPS_ARCH=$(xbps-uhelper arch)\n        fi\n    else\n        export XBPS_ARCH=\"$XBPS_MACHINE\"\n    fi\n}\n\nmasterdir_zap() {\n    rm -rf \"$XBPS_MASTERDIR\"\n    mkdir -p \"$XBPS_MASTERDIR\"\n    msg_normal \"xbps-src: $XBPS_MASTERDIR masterdir cleaned up.\\n\"\n}\n\nexit_func() {\n    wait\n    if [ \"$sourcepkg\" ]; then\n        remove_pkg $XBPS_CROSS_BUILD\n    fi\n    if [ -z \"$IN_CHROOT\" ]; then\n        msg_red \"xbps-src: a failure has occurred! exiting...\\n\"\n    fi\n    exit 2\n}\n\nread_pkg() {\n    if [ -z \"${XBPS_TARGET_PKG}\" ]; then\n        [ ! -r ./template ] && msg_error \"xbps-src: missing build template in $(pwd).\\n\"\n        XBPS_TARGET_PKG=${PWD##*/}\n    fi\n    setup_pkg \"$XBPS_TARGET_PKG\" \"$XBPS_CROSS_BUILD\" \"$1\"\n}\n\nsetup_distfiles_mirror() {\n    local mirror scheme path\n\n    # Scheme file:// mirror locations only work with uchroot\n    for mirror in $XBPS_DISTFILES_MIRROR; do\n        scheme=\"file\"\n        if [[ \"$mirror\" == *://* ]]; then\n            scheme=\"${mirror%%://*}\"\n            path=\"${mirror#${scheme}://}\"\n        else\n            path=\"$mirror\"\n        fi\n        [ \"$scheme\" != \"file\" ] && continue\n        if [ \"$XBPS_CHROOT_CMD\" == \"uchroot\" ]; then\n            if [ ! -d \"$path\" ]; then\n                msg_warn \"xbps-src: Invalid path in XBPS_DISTFILES_MIRROR ($mirror)\\n\"\n                continue\n            fi\n            mkdir -p \"$XBPS_MASTERDIR/$path\"\n            XBPS_CHROOT_CMD_ARGS+=\" -b $path:$path\"\n        else\n            case \"$XBPS_TARGET\" in\n                fetch|extract|patch|configure|build|check|install|pkg|bootstrap|bootstrap-update|update-sys)\n                    msg_warn \"xbps-src: File URLs ($mirror) don't work with '$XBPS_CHROOT_CMD'\\n\"\n            esac\n        fi\n    done\n}\n\n#\n# main()\n#\nreadonly PROGNAME=\"${0##*/}\"\nreadonly XBPS_VERSION_REQ=\"0.55\"\nXBPS_VERSION=$(xbps-uhelper -V)\nXBPS_VERSION=${XBPS_VERSION%%API*}\nXBPS_VERSION=${XBPS_VERSION##*:}\nreadonly XBPS_SRC_VERSION=\"113\"\nexport XBPS_MACHINE=$(xbps-uhelper -C /dev/null arch)\n\nXBPS_OPTIONS=\nXBPS_OPTSTRING=\"1A:a:bc:CEfgGhH:iIj:Lm:No:p:qsQKr:tvV\"\n\n# Preprocess arguments in order to allow options before and after XBPS_TARGET.\neval set -- $(getopt \"$XBPS_OPTSTRING\" \"$@\");\n\n# Options are saved as XBPS_ARG_FOO instead of XBPS_FOO for now; this is\n# because configuration files may override those and we want arguments to\n# take precedence over configuration files\nwhile getopts \"$XBPS_OPTSTRING\" opt; do\n    case $opt in\n        1) XBPS_ARG_BUILD_ONLY_ONE_PKG=yes; XBPS_OPTIONS+=\" -1\";;\n        A) XBPS_ARG_MACHINE=\"$OPTARG\"; XBPS_OPTIONS+=\" -A $OPTARG\";;\n        a) XBPS_ARG_CROSS_BUILD=\"$OPTARG\"; XBPS_OPTIONS+=\" -a $OPTARG\";;\n        b) XBPS_ARG_IGNORE_BROKENNESS=yes; XBPS_OPTIONS+=\" -b\";;\n        c) XBPS_ARG_CONFIG=\"$OPTARG\"; XBPS_OPTIONS+=\" -c $OPTARG\";;\n        C) XBPS_ARG_KEEP_ALL=1; XBPS_OPTIONS+=\" -C\";;\n        E) XBPS_ARG_BINPKG_EXISTS=1; XBPS_OPTIONS+=\" -E\";;\n        f) XBPS_ARG_BUILD_FORCEMODE=1; XBPS_OPTIONS+=\" -f\";;\n        G) XBPS_ARG_USE_GIT_REVS=1; XBPS_OPTIONS+=\" -G\";;\n        g) XBPS_ARG_DEBUG_PKGS=1; XBPS_OPTIONS+=\" -g\";;\n        H) XBPS_ARG_HOSTDIR=\"$OPTARG\"; XBPS_OPTIONS+=\" -H $OPTARG\";;\n        h) usage && exit 0;;\n        i) XBPS_ARG_INFORMATIVE_RUN=1; XBPS_OPTIONS+=\" -i\";;\n        I) XBPS_ARG_SKIP_DEPS=1; XBPS_SKIP_REMOTEREPOS=1; XBPS_OPTIONS+=\" -I -N\";;\n        j) XBPS_ARG_MAKEJOBS=\"$OPTARG\"; XBPS_OPTIONS+=\" -j $OPTARG\";;\n        L) export NOCOLORS=1; XBPS_OPTIONS+=\" -L\";;\n        m) XBPS_ARG_MASTERDIR=\"$OPTARG\"; XBPS_OPTIONS+=\" -m $OPTARG\";;\n        N) XBPS_ARG_SKIP_REMOTEREPOS=1; XBPS_OPTIONS+=\" -N\";;\n        o) XBPS_ARG_PKG_OPTIONS=\"$OPTARG\"; XBPS_OPTIONS+=\" -o $OPTARG\";;\n        p) XBPS_ARG_PRINT_VARIABLES=\"$OPTARG\"; XBPS_OPTIONS+=\" -p $OPTARG\";;\n        q) XBPS_ARG_QUIET=1; XBPS_OPTIONS+=\" -q\";;\n        Q) XBPS_ARG_CHECK_PKGS=yes; XBPS_OPTIONS+=\" -Q\";;\n        K) XBPS_ARG_CHECK_PKGS=full; XBPS_OPTIONS+=\" -K\";;\n        r) XBPS_ARG_ALT_REPOSITORY=\"$OPTARG\"; XBPS_OPTIONS+=\" -r $OPTARG\";;\n        s) XBPS_ARG_STRICT=yes; XBPS_OPTIONS+=\" -s\";;\n        t) XBPS_ARG_TEMP_MASTERDIR=1; XBPS_OPTIONS+=\" -t -C\";;\n        v) XBPS_ARG_VERBOSE=1; XBPS_OPTIONS+=\" -v\";;\n        V) echo \"xbps-src-$XBPS_SRC_VERSION $(xbps-uhelper -V)\" && exit 0;;\n        --) shift; break;;\n    esac\ndone\nshift $(($OPTIND - 1))\n\n[ $# -eq 0 ] && usage && exit 1\n\n# Check if stdout is a tty; if false disable colors.\ntest -t 1 || export NOCOLORS=1\n# http://no-color.org\nif [ \"${NO_COLOR+x}\" ]; then\n    export NOCOLORS=1\nfi\n\n# sane umask\numask 022\n\n#\n# Check for required utilities in host system.\n#\n# Required utilities in host system for the bootstrap target.\nreadonly REQHOST_UTILS_BOOTSTRAP=\"file objdump find make gawk bash sed gcc g++ gnat \\\n    perl bsdtar gzip patch flock pkg-config\"\n\n# Required utilities in host.\nreadonly REQHOST_UTILS=\"xbps-install xbps-query xbps-rindex xbps-uhelper \\\n    xbps-reconfigure xbps-remove xbps-create xbps-uchroot xbps-uunshare\"\n\ncheck_reqhost_utils\n\n#\n# Set XBPS_CONFIG_FILE, XBPS_DISTDIR, XBPS_MASTERDIR\n# and XBPS_HOSTDIR.\n#\nif [ \"$IN_CHROOT\" ]; then\n    readonly XBPS_CONFIG_FILE=/etc/xbps/xbps-src.conf\n    readonly XBPS_DISTDIR=/void-packages\n    readonly XBPS_MASTERDIR=/\n    readonly XBPS_HOSTDIR=/host\nelse\n    _distdir=\"$(readlink -f ${0%/*})\"\n    if [ \"${_distdir}\" = \".\" ]; then\n        readonly XBPS_DISTDIR=\"$(pwd -P)\"\n    else\n        readonly XBPS_DISTDIR=\"${_distdir}\"\n    fi\n    # Read defaults and then the local configuration file\n    if [ -f $XBPS_DISTDIR/etc/defaults.conf ]; then\n        . $XBPS_DISTDIR/etc/defaults.conf\n    fi\n    if [ -n \"$XBPS_ARG_CONFIG\" -a -s $XBPS_DISTDIR/etc/conf.$XBPS_ARG_CONFIG ]; then\n        # If specified, read custom user configuration...\n        readonly XBPS_CONFIG_FILE=$XBPS_DISTDIR/etc/conf.$XBPS_ARG_CONFIG\n    elif [ -s $XBPS_DISTDIR/etc/conf ]; then\n        # ... otherwise read generic user configuration...\n        readonly XBPS_CONFIG_FILE=$XBPS_DISTDIR/etc/conf\n    elif [ -s ${XDG_CONFIG_HOME:-$HOME/.config}/xbps-src.conf ]; then\n        readonly XBPS_CONFIG_FILE=${XDG_CONFIG_HOME:-$HOME/.config}/xbps-src.conf\n    elif [ -s $HOME/.xbps-src.conf ]; then\n        # ... fallback to ~/.xbps-src.conf otherwise.\n        readonly XBPS_CONFIG_FILE=$HOME/.xbps-src.conf\n    fi\nfi\n# Read settings from config file\n[ -s \"$XBPS_CONFIG_FILE\" ] && . $XBPS_CONFIG_FILE &>/dev/null\n\n# show colors unconditionally in CI\n[ \"$XBPS_BUILD_ENVIRONMENT\" = void-packages-ci ] && export NOCOLORS=\n\n# Set options passed on command line, after configuration files have been read\n[ -n \"$XBPS_ARG_BUILD_ONLY_ONE_PKG\" ] && XBPS_BUILD_ONLY_ONE_PKG=yes\n[ -n \"$XBPS_ARG_IGNORE_BROKENNESS\" ] && XBPS_IGNORE_BROKENNESS=1\n[ -n \"$XBPS_ARG_SKIP_REMOTEREPOS\" ] && XBPS_SKIP_REMOTEREPOS=1\n[ -n \"$XBPS_ARG_BUILD_FORCEMODE\" ] && XBPS_BUILD_FORCEMODE=1\n[ -n \"$XBPS_ARG_INFORMATIVE_RUN\" ] && XBPS_INFORMATIVE_RUN=1\n[ -n \"$XBPS_ARG_TEMP_MASTERDIR\" ] && XBPS_TEMP_MASTERDIR=1\n[ -n \"$XBPS_ARG_BINPKG_EXISTS\" ] && XBPS_BINPKG_EXISTS=1\n[ -n \"$XBPS_ARG_USE_GIT_REVS\" ] && XBPS_USE_GIT_REVS=1\n[ -n \"$XBPS_ARG_DEBUG_PKGS\" ] && XBPS_DEBUG_PKGS=1\n[ -n \"$XBPS_ARG_SKIP_DEPS\" ] && XBPS_SKIP_DEPS=1\n[ -n \"$XBPS_ARG_KEEP_ALL\" ] && XBPS_KEEP_ALL=1\n[ -n \"$XBPS_ARG_QUIET\" ] && XBPS_QUIET=1\n[ -n \"$XBPS_ARG_PRINT_VARIABLES\" ] && XBPS_PRINT_VARIABLES=\"$XBPS_ARG_PRINT_VARIABLES\"\n[ -n \"$XBPS_ARG_ALT_REPOSITORY\" ] && XBPS_ALT_REPOSITORY=\"$XBPS_ARG_ALT_REPOSITORY\"\n[ -n \"$XBPS_ARG_STRICT\" ] && XBPS_STRICT=\"$XBPS_ARG_STRICT\"\n[ -n \"$XBPS_ARG_MACHINE\" ] && XBPS_MACHINE=\"$XBPS_ARG_MACHINE\"\n[ -n \"$XBPS_ARG_CROSS_BUILD\" ] && XBPS_CROSS_BUILD=\"$XBPS_ARG_CROSS_BUILD\"\n[ -n \"$XBPS_ARG_CHECK_PKGS\" ] && XBPS_CHECK_PKGS=\"$XBPS_ARG_CHECK_PKGS\"\n[ -n \"$XBPS_ARG_MAKEJOBS\" ] && XBPS_MAKEJOBS=\"$XBPS_ARG_MAKEJOBS\"\n[ -n \"$XBPS_ARG_VERBOSE\" ] && XBPS_VERBOSE=\"$XBPS_ARG_VERBOSE\"\n\n# Default to nproc for XBPS_MAKEJOBS if not set and nproc is available\nif command -v nproc >/dev/null ; then\n    : ${XBPS_MAKEJOBS:=$(nproc)}\nelse\n    : ${XBPS_MAKEJOBS:=1}\nfi\n\nexport XBPS_BUILD_ONLY_ONE_PKG XBPS_SKIP_REMOTEREPOS XBPS_BUILD_FORCEMODE \\\n       XBPS_INFORMATIVE_RUN XBPS_TEMP_MASTERDIR XBPS_BINPKG_EXISTS \\\n       XBPS_USE_GIT_REVS XBPS_CHECK_PKGS XBPS_DEBUG_PKGS XBPS_SKIP_DEPS \\\n       XBPS_KEEP_ALL XBPS_QUIET XBPS_ALT_REPOSITORY XBPS_STRICT XBPS_CROSS_BUILD \\\n       XBPS_MAKEJOBS XBPS_PRINT_VARIABLES XBPS_IGNORE_BROKENNESS\n\n# The masterdir/hostdir variables are forced and readonly in chroot\nif [ -z \"$IN_CHROOT\" ]; then\n    [ -n \"$XBPS_ARG_MASTERDIR\" ] && XBPS_MASTERDIR=\"$XBPS_ARG_MASTERDIR\"\n    [ -n \"$XBPS_ARG_HOSTDIR\" ] && XBPS_HOSTDIR=\"$XBPS_ARG_HOSTDIR\"\n\n    # Sanitize masterdir/hostdir once set for real (resolve links)\n    export XBPS_MASTERDIR=\"$(readlink -f $XBPS_MASTERDIR 2>/dev/null)\"\n    export XBPS_HOSTDIR=\"$(readlink -f $XBPS_HOSTDIR 2>/dev/null)\"\nfi\n\n# Forbid root unless XBPS_ALLOW_CHROOT_BREAKOUT is set\n# (for CI).\nif [ -z \"$IN_CHROOT\" -a \"$UID\" -eq 0 -a -z \"$XBPS_ALLOW_CHROOT_BREAKOUT\" ]; then\n    echo \"ERROR: xbps-src cannot be used as root.\" 1>&2\n    exit 1\nfi\n\n# if XBPS_MASTERDIR unset, defaults to $XBPS_DISTDIR/masterdir-<host machine>\n# unless in a container for simplicity of container/CI usage\nif [ \"$XBPS_CHROOT_CMD\" = ethereal ]; then\n    : \"${XBPS_MASTERDIR:=$XBPS_DISTDIR/masterdir}\"\nelif [ -n \"$XBPS_ARG_MASTERDIR\" ]; then\n    : # Don't mess with masterdir in argv\nelse\n    : \"${XBPS_MASTERDIR:=$XBPS_DISTDIR/masterdir-$XBPS_MACHINE}\"\n    # but use $XBPS_DISTDIR/masterdir if it exists and the new style doesn't\n    if [ ! -d \"${XBPS_MASTERDIR}\" ] && [ -r \"${XBPS_DISTDIR}/masterdir/.xbps_chroot_init\" ] \\\n        && [ \"$(cat \"${XBPS_DISTDIR}/masterdir/.xbps_chroot_init\")\" = \"$XBPS_MACHINE\" ]; then\n        XBPS_MASTERDIR=\"${XBPS_DISTDIR}/masterdir\"\n    fi\nfi\n[ ! -d \"$XBPS_MASTERDIR\" ] && mkdir -p \"$XBPS_MASTERDIR\"\n\n# if XBPS_HOSTDIR unset, defaults to $XBPS_DISTDIR/hostdir.\n: ${XBPS_HOSTDIR:=$XBPS_DISTDIR/hostdir}\n[ ! -d $XBPS_HOSTDIR ] && mkdir -p $XBPS_HOSTDIR\n\nif [ -d \"$XBPS_MASTERDIR\" -a ! -w \"$XBPS_MASTERDIR\" ]; then\n    echo \"ERROR: can't write to masterdir $XBPS_MASTERDIR.\" 1>&2\n    exit 1\nfi\n\n# Try using chroot-git then git from the host system\nXBPS_GIT_CMD=\"$(PATH=\"/usr/libexec/chroot-git:$PATH:$XBPS_MASTERDIR/usr/libexec/chroot-git\" command -v git 2>/dev/null)\"\nif [ -n \"$XBPS_GIT_CMD\" ]; then\n    export XBPS_GIT_CMD\nelif [ -z \"$XBPS_USE_BUILD_MTIME\" ] || [ \"$XBPS_USE_GIT_REVS\" ]; then\n    echo \"neither chroot-git or git are available in your system!\" 1>&2\n    exit 1\nelse\n    unset XBPS_GIT_CMD\nfi\n\nif [ -n \"$XBPS_HOSTDIR\" ]; then\n    export XBPS_REPOSITORY=$XBPS_HOSTDIR/binpkgs\n    readonly XBPS_SRCDISTDIR=$XBPS_HOSTDIR/sources\nelse\n    export XBPS_REPOSITORY=$XBPS_MASTERDIR/host/binpkgs\n    readonly XBPS_SRCDISTDIR=$XBPS_MASTERDIR/host/sources\nfi\n\n# Set XBPS_REPOSITORY to our current branch.\nif [ -z \"$XBPS_ALT_REPOSITORY\" ]; then\n    pushd \"$PWD\" &>/dev/null\n    cd $XBPS_DISTDIR\n    _gitbranch=\"$($XBPS_GIT_CMD symbolic-ref --short HEAD 2>/dev/null)\"\n    if [ \"${_gitbranch}\" -a \"${_gitbranch}\" != \"master\" ]; then\n        export XBPS_ALT_REPOSITORY=\"${_gitbranch}\"\n        export XBPS_REPOSITORY=\"${XBPS_REPOSITORY}/${_gitbranch}\"\n     fi\n     popd &>/dev/null\nelse\n    export XBPS_REPOSITORY=\"${XBPS_REPOSITORY}/${XBPS_ALT_REPOSITORY}\"\nfi\n\nreadonly XBPS_SRCPKGDIR=$XBPS_DISTDIR/srcpkgs\nreadonly XBPS_COMMONDIR=$XBPS_DISTDIR/common\nreadonly XBPS_SHUTILSDIR=$XBPS_COMMONDIR/xbps-src/shutils\nreadonly XBPS_TRIGGERSDIR=$XBPS_SRCPKGDIR/xbps-triggers/files\nreadonly XBPS_CROSSPFDIR=$XBPS_COMMONDIR/cross-profiles\nreadonly XBPS_BUILDSTYLEDIR=$XBPS_COMMONDIR/build-style\nreadonly XBPS_LIBEXECDIR=$XBPS_COMMONDIR/xbps-src/libexec\nreadonly XBPS_BUILDHELPERDIR=$XBPS_COMMONDIR/build-helper\n\nreadonly XBPS_TARGET=\"$1\"\nif [ \"$2\" ]; then\n    XBPS_TARGET_PKG=\"${2##*/}\"\nfi\n\n# Check for CHROOT_READY and set up XBPS_ARCH environment var for xbps.\nchroot_check\ncheck_native_arch\n\n# test if to use linux32 for 32-bit masterdirs in 64-bit environments\n# x86_64, ppc64 (BE) and aarch64 are capable of this, others are not\nlinux32_check() {\n    local hostarch=\"$1\"\n    local tgtarch=\"$2\"\n    case \"$hostarch\" in\n        x86_64*) if [[ \"$tgtarch\" == i686* ]]; then return 0; fi ;;\n        ppc64le*) if [[ \"$tgtarch\" == ppcle* ]]; then return 0; fi ;;\n        ppc64*)\n            case \"$tgtarch\" in\n                ppc64*) return 1 ;;\n                ppc*) return 0 ;;\n            esac\n            ;;\n        aarch64*) if [[ \"$tgtarch\" == armv* ]]; then return 0; fi ;;\n    esac\n    return 1\n}\n\n# Reconfigure pkgs for 32bit on 64-bit systems and reexec itself.\nif [ -z \"$XBPS_REINIT\" -a -s $XBPS_MASTERDIR/.xbps_chroot_init ]; then\n    export XBPS_ARCH=${XBPS_ARCH:-$(<$XBPS_MASTERDIR/.xbps_chroot_init)}\n    if linux32_check \"$XBPS_MACHINE\" \"$XBPS_ARCH\"; then\n        # reconfigure pkgs via linux32\n        linux32 xbps-reconfigure -r ${XBPS_MASTERDIR} -a &>/dev/null\n        # reexec itself via linux32\n        export XBPS_REINIT=1\n        exec linux32 $0 ${XBPS_OPTIONS} \"$@\"\n    fi\nfi\nif [ -n \"$XBPS_ARCH\" ]; then\n    export XBPS_MACHINE=$XBPS_ARCH\nfi\n# At this point if XBPS_TARGET_MACHINE isn't defined we assume\n# it's a native build.\nif [ -z \"$XBPS_TARGET_MACHINE\" ]; then\n        export XBPS_TARGET_MACHINE=$XBPS_MACHINE\nfi\n\nif [ \"$IN_CHROOT\" ]; then\n    readonly XBPS_UHELPER_CMD=\"xbps-uhelper\"\n    readonly XBPS_INSTALL_CMD=\"xbps-install -c /host/repocache-$XBPS_MACHINE\"\n    readonly XBPS_QUERY_CMD=\"xbps-query -c /host/repocache-$XBPS_MACHINE\"\n    readonly XBPS_RECONFIGURE_CMD=\"xbps-reconfigure\"\n    readonly XBPS_REMOVE_CMD=\"xbps-remove\"\n    readonly XBPS_CHECKVERS_CMD=\"xbps-checkvers\"\n    readonly XBPS_DESTDIR=/destdir\n    readonly XBPS_BUILDDIR=/builddir\nelse\n    readonly XBPS_UHELPER_CMD=\"xbps-uhelper -r $XBPS_MASTERDIR\"\n    readonly XBPS_INSTALL_CMD=\"xbps-install -c $XBPS_HOSTDIR/repocache-$XBPS_MACHINE -r $XBPS_MASTERDIR -C etc/xbps.d\"\n    readonly XBPS_QUERY_CMD=\"xbps-query -c $XBPS_HOSTDIR/repocache-$XBPS_MACHINE -r $XBPS_MASTERDIR -C etc/xbps.d\"\n    readonly XBPS_RECONFIGURE_CMD=\"xbps-reconfigure -r $XBPS_MASTERDIR\"\n    readonly XBPS_REMOVE_CMD=\"xbps-remove -r $XBPS_MASTERDIR\"\n    readonly XBPS_CHECKVERS_CMD=\"xbps-checkvers -r $XBPS_MASTERDIR\"\n    readonly XBPS_DESTDIR=$XBPS_MASTERDIR/destdir\n    readonly XBPS_BUILDDIR=$XBPS_MASTERDIR/builddir\nfi\nreadonly XBPS_RINDEX_CMD=\"xbps-rindex\"\nreadonly XBPS_FETCH_CMD=\"xbps-fetch\"\nreadonly XBPS_DIGEST_CMD=\"xbps-digest\"\nreadonly XBPS_CMPVER_CMD=\"xbps-uhelper cmpver\"\n\nexport XBPS_SHUTILSDIR XBPS_CROSSPFDIR XBPS_TRIGGERSDIR \\\n    XBPS_SRCPKGDIR XBPS_COMMONDIR XBPS_BUILDDIR \\\n    XBPS_REPOSITORY XBPS_ALT_REPOSITORY XBPS_STRICT XBPS_SRCDISTDIR XBPS_DIGEST_CMD \\\n    XBPS_UHELPER_CMD XBPS_INSTALL_CMD XBPS_QUERY_CMD XBPS_BUILD_ONLY_ONE_PKG \\\n    XBPS_RINDEX_CMD XBPS_RECONFIGURE_CMD XBPS_REMOVE_CMD XBPS_CHECKVERS_CMD \\\n    XBPS_CMPVER_CMD XBPS_FETCH_CMD XBPS_VERSION XBPS_BUILDSTYLEDIR \\\n    XBPS_CPPFLAGS XBPS_CFLAGS XBPS_CXXFLAGS XBPS_FFLAGS XBPS_LDFLAGS \\\n    XBPS_MAKEJOBS XBPS_BUILD_FORCEMODE XBPS_USE_GIT_REVS XBPS_DEBUG_PKGS \\\n    XBPS_CHECK_PKGS XBPS_CCACHE XBPS_DISTCC XBPS_DISTCC_HOSTS XBPS_SKIP_DEPS \\\n    XBPS_SKIP_REMOTEREPOS XBPS_CROSS_BUILD XBPS_ARG_PKG_OPTIONS XBPS_CONFIG_FILE \\\n    XBPS_KEEP_ALL XBPS_HOSTDIR XBPS_MASTERDIR XBPS_SRC_VERSION \\\n    XBPS_DESTDIR XBPS_MACHINE XBPS_TEMP_MASTERDIR XBPS_BINPKG_EXISTS \\\n    XBPS_LIBEXECDIR XBPS_DISTDIR XBPS_DISTFILES_MIRROR XBPS_ALLOW_RESTRICTED \\\n    XBPS_USE_GIT_COMMIT_DATE XBPS_PKG_COMPTYPE XBPS_REPO_COMPTYPE \\\n    XBPS_BUILDHELPERDIR XBPS_USE_BUILD_MTIME XBPS_BUILD_ENVIRONMENT \\\n    XBPS_PRESERVE_PKGS XBPS_IGNORE_BROKENNESS\n\nfor i in REPOSITORY DESTDIR BUILDDIR SRCDISTDIR; do\n    eval val=\"\\$XBPS_$i\"\n    if [ ! -d \"$val\" ]; then\n        mkdir -p $val\n    fi\n    unset val\ndone\n\n# A temporary masterdir requires xbps-uchroot(1) and -O to use overlayfs\n# on tmpfs (available with xbps-0.45).\nif [ -z \"$IN_CHROOT\" -a -n \"$XBPS_TEMP_MASTERDIR\" ]; then\n    export XBPS_CHROOT_CMD=\"uchroot\"\n    export XBPS_CHROOT_CMD_ARGS+=\" -O\"\nfi\n#\n# Sanitize PATH.\n#\nif [ -z \"$IN_CHROOT\" ]; then\n    # In non chroot case always prefer host tools.\n    export PATH=\"$PATH:$XBPS_MASTERDIR/usr/bin\"\nfi\n\n#\n# Set up ccache\n#\nif [ \"$XBPS_CCACHE\" ]; then\n    export CCACHEPATH=\"/usr/lib/ccache/bin\"\n    export CCACHE_DIR=\"$XBPS_HOSTDIR/ccache\"\n    # Avoid not using cached files just due to compiler mtime\n    # changes when e.g. bootstrapping\n    export CCACHE_COMPILERCHECK=content CCACHE_COMPRESS=1\n    export PATH=\"$CCACHEPATH:$PATH\"\n    mkdir -p $CCACHE_DIR\nfi\n\n#\n# Set up distcc\n#\nif [ \"$XBPS_DISTCC\" ]; then\n    if [ \"$XBPS_CCACHE\" ]; then\n        export CCACHE_PREFIX=\"/usr/bin/distcc\"\n    else\n        DISTCCPATH=\"/usr/lib/distcc/bin\"\n        export PATH=\"$DISTCCPATH:$PATH\"\n    fi\n    export DISTCC_DIR=\"$XBPS_HOSTDIR/distcc-${XBPS_CROSS_BUILD:-${XBPS_MACHINE}}\"\n    export DISTCC_HOSTS=\"$XBPS_DISTCC_HOSTS\"\n    mkdir -p $DISTCC_DIR\nfi\n\ncheck_build_requirements\n\n#\n# Read funcs from helpers\n#\nfor f in ${XBPS_SHUTILSDIR}/*.sh; do\n    [ -r \"$f\" ] && . $f\ndone\n\nif [ -z \"$IN_CHROOT\" ]; then\n    trap 'exit_func' INT TERM\n    if [ -n \"$XBPS_DISTFILES_MIRROR\" ]; then\n        setup_distfiles_mirror\n    fi\nfi\n\nreconfigure_base_chroot\n\n#\n# Main switch.\n#\ncase \"$XBPS_TARGET\" in\n    binary-bootstrap)\n        if [ -n \"$XBPS_TARGET_PKG\" ]; then\n            msg_error \"xbps-src: binary-bootstrap <arch> is no longer supported, use '-A <arch>' instead\\n\"\n            exit 1\n        fi\n        install_base_chroot \"$XBPS_MACHINE\"\n        ;;\n    bootstrap)\n        if [ -n \"$XBPS_CHECK_PKGS\" ]; then\n            msg_error \"xbps-src: disable tests for bootstrap\\n\"\n            exit 1\n        fi\n        if [ -n \"$XBPS_TARGET_PKG\" ]; then\n            msg_error \"xbps-src: bootstrap <arch> is no longer supported, use '-A <arch>' instead\\n\"\n            exit 1\n        fi\n        # base-chroot building on host\n        # check for required host utils\n        check_reqhost_utils bootstrap\n        (\n            export XBPS_ARCH=$XBPS_MACHINE\n            export XBPS_SKIP_REMOTEREPOS=1\n            chroot_sync_repodata\n            $XBPS_LIBEXECDIR/build.sh \\\n                base-chroot base-chroot $XBPS_TARGET || exit 1\n        ) || exit 1\n        [ -d $XBPS_MASTERDIR ] && rm -rf $XBPS_MASTERDIR\n        install_base_chroot \"$XBPS_MACHINE\"\n        ;;\n    bootstrap-update)\n        if [ -n \"$CHROOT_READY\" -a -z \"$IN_CHROOT\" ]; then\n            chroot_handler bootstrap-update\n        else\n            chroot_sync_repodata\n            update_base_chroot\n        fi\n        ;;\n    chroot)\n        chroot_sync_repodata\n        chroot_handler chroot dummy\n        ;;\n    clean)\n        if [ -z \"$XBPS_TARGET_PKG\" ]; then\n            if [ -n \"$CHROOT_READY\" -a -z \"$IN_CHROOT\" ]; then\n                chroot_handler remove-autodeps\n            else\n                remove_pkg_autodeps\n            fi\n            msg_normal \"xbps-src: cleaning up masterdir...\\n\"\n            # Needed to remove Go Modules\n            [ -d \"$XBPS_BUILDDIR\" ] && chmod -R +wX $XBPS_BUILDDIR\n            rm -rf \\\n                $XBPS_BUILDDIR \\\n                $XBPS_DESTDIR\n            rm -rf $XBPS_MASTERDIR/tmp\n            mkdir -p $XBPS_MASTERDIR/tmp\n        else\n            read_pkg\n            if [ -n \"$CHROOT_READY\" -a -z \"$IN_CHROOT\" ]; then\n                chroot_handler $XBPS_TARGET $XBPS_TARGET_PKG || exit $?\n            else\n                if declare -f do_clean >/dev/null; then\n                    run_func do_clean\n                fi\n                remove_pkg_wrksrc\n                remove_pkg_statedir\n            fi\n            remove_pkg $XBPS_CROSS_BUILD\n        fi\n        ;;\n    clean-repocache)\n        export XBPS_TARGET_ARCH=\"${XBPS_CROSS_BUILD:-$XBPS_TARGET_MACHINE}\"\n        $XBPS_REMOVE_CMD -C /dev/null -c $XBPS_HOSTDIR/repocache-${XBPS_TARGET_ARCH} -O\n        ;;\n    consistency-check)\n        consistency_check\n        ;;\n    remove-autodeps)\n        if [ -n \"$CHROOT_READY\" -a -z \"$IN_CHROOT\" ]; then\n            chroot_handler remove-autodeps\n        else\n            remove_pkg_autodeps\n        fi\n        ;;\n    fetch|extract|patch|configure|build|check|install|pkg)\n        if [ \"$XBPS_TARGET\" = \"check\" ] && [ -z \"$XBPS_CHECK_PKGS\" ]; then\n            export XBPS_CHECK_PKGS=full\n        fi\n        read_pkg\n        if [ -n \"$CHROOT_READY\" -a -z \"$IN_CHROOT\" ]; then\n            chroot_handler $XBPS_TARGET $XBPS_TARGET_PKG\n        else\n            check_existing_pkg\n            chroot_sync_repodata\n            # prevent update_base_chroot from removing the builddir/destdir\n            update_base_chroot keep-all-force\n            $XBPS_LIBEXECDIR/build.sh $XBPS_TARGET_PKG $XBPS_TARGET_PKG \\\n                $XBPS_TARGET $XBPS_CROSS_BUILD || exit $?\n        fi\n        ;;\n    remove|remove-destdir)\n        read_pkg\n        remove_pkg $XBPS_CROSS_BUILD\n        ;;\n    list)\n        $XBPS_QUERY_CMD -l\n        ;;\n    purge-distfiles)\n        purge_distfiles\n        ;;\n    show)\n        read_pkg ignore-problems\n        show_pkg $XBPS_PRINT_VARIABLES\n        ;;\n    show-avail)\n        read_pkg &>/dev/null\n        show_avail\n        ;;\n    show-files)\n        read_pkg ignore-problems\n        show_pkg_files\n        ;;\n    show-deps)\n        read_pkg ignore-problems\n        show_pkg_deps\n        ;;\n    show-build-deps)\n        read_pkg ignore-problems\n        show_pkg_build_deps\n        ;;\n    show-hostmakedepends)\n        read_pkg ignore-problems\n        show_pkg_hostmakedepends\n        ;;\n    show-makedepends)\n        read_pkg ignore-problems\n        show_pkg_makedepends\n        ;;\n    show-checkdepends)\n        read_pkg ignore-problems\n        show_pkg_checkdepends\n        ;;\n    show-pkg-var-dump)\n        read_pkg ignore-problems\n        for sub_name in $subpackages; do\n            if [ $sub_name = $XBPS_TARGET_PKG ]; then\n                . ${XBPS_COMMONDIR}/environment/setup-subpkg/subpkg.sh\n                ${sub_name}_package\n            fi\n        done\n        printf \"archs: %s\\n\\n\" \"$archs\"\n        printf \"bootstrap: %s\\n\\n\" \"$bootstrap\"\n        printf \"broken: %s\\n\\n\" \"$broken\"\n        printf \"depends: %s\\n\\n\" \"$depends\"\n        printf \"hostmakedepends: %s\\n\\n\" \"$hostmakedepends\"\n        printf \"makedepends: %s\\n\\n\" \"$makedepends\"\n        printf \"nocross: %s\\n\\n\" \"$nocross\"\n        printf \"pkgname: %s\\n\\n\" \"$pkgname\"\n        printf \"restricted: %s\\n\\n\" \"$restricted\"\n        printf \"revision: %s\\n\\n\" \"$revision\"\n        printf \"subpackages: %s\\n\\n\" \"$subpackages\"\n        printf \"version: %s\\n\\n\" \"$version\"\n        printf \"provides: %s\\n\\n\" \"$provides\"\n        printf \"lib32disabled: %s\\n\\n\" \"$lib32disabled\"\n        printf \"nodebug: %s\\n\\n\" \"$nodebug\"\n        ;;\n    show-pkg-var)\n        read_pkg ignore-problems\n        for sub_name in $subpackages; do\n            if [ $sub_name = $XBPS_TARGET_PKG ]; then\n                . ${XBPS_COMMONDIR}/environment/setup-subpkg/subpkg.sh\n                ${sub_name}_package\n            fi\n        done\n        while IFS= read -r pkg_var; do\n                print_var=\n                case \"${pkg_var}\" in\n                    archs) print_var=\"$archs \";;\n                    bootstrap) print_var=\"$bootstrap \";;\n                    broken) print_var=\"$broken \";;\n                    depends) print_var=\"$depends \";;\n                    hostmakedepends) print_var=\"$hostmakedepends \";;\n                    makedepends) print_var=\"$makedepends \";;\n                    nocross) print_var=\"$nocross \";;\n                    pkgname) print_var=\"$pkgname \";;\n                    restricted) print_var=\"$restricted \";;\n                    revision) print_var=\"$revision \";;\n                    subpackages) print_var=\"$subpackages \";;\n                    version) print_var=\"$version \";;\n                    provides) print_var=\"$provides \";;\n                    lib32disabled) print_var=\"$lib32disabled \";;\n                    nodebug) print_var=\"$nodebug \";;\n                esac # the space at the end of each is essential for unset vars\n                if [ -n \"$print_var\" ]; then\n                        printf \"%s\\n\" \"$(printf \"${print_var% }\" | tr -t '\\n\\r' ' ')\"\n                fi # The trailing space gets stripped before printing anyway\n        done\n        ;;\n    dbulk-dump)\n        read_pkg\n        check_pkg_arch \"$XBPS_CROSS_BUILD\"\n        for x in pkgname version revision; do\n            printf '%s: %s\\n' \"$x\" \"${!x}\"\n        done\n        for x in bootstrap; do\n            [[ ${!x} ]] && printf '%s: %s\\n' \"$x\" \"${!x}\"\n        done\n        for x in hostmakedepends makedepends; do\n            arr=(${!x})\n            if [[ ${#arr} -gt 0 ]]; then\n                printf '%s:\\n' \"$x\"\n                printf ' %s\\n' \"${arr[@]}\"\n            fi\n        done\n        _cleandeps=$(setup_pkg_depends \"\" 1 1 | { grep -vF \"$(printf \"%s\\n\" $pkgname $subpackages)\" || :; } | sort -u) || exit 1\n        if [[ $_cleandeps ]]; then\n                printf 'depends:\\n'\n                printf ' %s\\n' $_cleandeps\n        fi\n        if [[ $subpackages ]]; then\n            printf 'subpackages:\\n'\n            printf ' %s\\n' $subpackages\n        fi\n        ;;\n    show-options)\n        read_pkg ignore-problems\n        show_pkg_build_options\n        ;;\n    show-shlib-provides)\n        read_pkg ignore-problems\n        show_pkg_shlib_provides\n        ;;\n    show-shlib-requires)\n        read_pkg ignore-problems\n        show_pkg_shlib_requires\n        ;;\n    show-var)\n        for f in ${XBPS_COMMONDIR}/environment/setup/*.sh; do\n            source $f\n        done\n        if [ \"$XBPS_CROSS_BUILD\" ]; then\n            source ${XBPS_COMMONDIR}/cross-profiles/${XBPS_CROSS_BUILD}.sh\n        else\n            source ${XBPS_COMMONDIR}/build-profiles/${XBPS_MACHINE}.sh\n        fi\n        eval value=\"\\${$XBPS_TARGET_PKG}\"\n        echo $value\n        ;;\n    show-repo-updates)\n        bulk_build\n        ;;\n    show-sys-updates)\n        bulk_build installed\n        ;;\n    show-local-updates)\n        bulk_build local\n        ;;\n    sort-dependencies)\n        bulk_sortdeps ${@/$XBPS_TARGET/}\n        ;;\n    update-bulk)\n        bulk_update\n        ;;\n    update-sys)\n        bulk_update installed\n        ;;\n    update-local)\n        bulk_update local\n        ;;\n    update-check)\n        read_pkg ignore-problems\n        update_check\n        ;;\n    update-hash-cache)\n        update_hash_cache\n        ;;\n    zap)\n        masterdir_zap\n        ;;\n    *)\n        msg_red \"xbps-src: invalid target $XBPS_TARGET.\\n\"\n        usage && exit 1\n        ;;\nesac\n\nexit_and_cleanup $?\n"
        }
      ]
    }
  ]
}