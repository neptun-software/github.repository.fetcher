{
  "metadata": {
    "timestamp": 1736568765174,
    "page": 879,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg4OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "eastmaple/easytrojan",
      "stars": 1121,
      "defaultBranch": "main",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.298828125,
          "content": "![language](https://img.shields.io/badge/language-Shell_&_Go-brightgreen.svg)\n![release](https://img.shields.io/badge/release-v2.0_20221212-blue.svg)\n# EasyTrojan #\n\n#### 世界上最简单的Trojan部署脚本，仅需一行命令即可搭建一台代理服务器 ####\n\n- 该项目会自动提供trojan服务所需的免费域名与证书，无需购买、解析等繁琐操作\n\n- 支持RHEL 7、8、9 (CentOS、RedHat、AlmaLinux、RockyLinux)、Debian 9、10、11、12、Ubuntu 16、18、20、22\n\n- 技术原理不做解释，初衷只为解决个人用户与主机商家被阻断连接的问题，降低大量IP被阻断造成的各种后续影响\n\n- 该项目仅限研究用途，用户应根据所在管辖区的当地法律评估自己的法规遵从义务\n\n---\n\n#### 首次安装 ####\n请将结尾的password更换为自己的密码，例如 bash easytrojan.sh 123456，安装成功后会返回trojan的连接参数\n```\ncurl https://raw.githubusercontent.com/eastmaple/easytrojan/main/easytrojan.sh -o easytrojan.sh && chmod +x easytrojan.sh && bash easytrojan.sh password\n```\n\n#### 放行端口 ####\n如果服务器开启了防火墙，应放行TCP80与443端口，如在云厂商的web管理页面有防火墙应同时放行TCP80与443端口\n```\n# RHEL 7、8、9 (CentOS、RedHat、AlmaLinux、RockyLinux) 放行端口命令\nfirewall-cmd --permanent --add-port=80/tcp --add-port=443/tcp && firewall-cmd --reload && iptables -F\n\n# Debian 9、10、11、12、Ubuntu 16、18、20、22 放行端口命令\nsudo ufw allow proto tcp from any to any port 80,443 && sudo iptables -F\n```\n> 验证端口是否放行 (示例IP应修改为trojan服务器的IP)\n>\n> 通过浏览器访问脚本提供的免费域名，例如1.3.5.7.nip.io </br>\n> 如果自动跳转至https，页面显示Service Unavailable，说明端口已放行\n\n#### 密码管理 ####\n请将结尾的password更换为自己的密码，仅限字母、数字、下划线，非多密码管理用途无需使用\n```\n# 下载trojan密码管理脚本\ncurl https://raw.githubusercontent.com/eastmaple/easytrojan/main/mytrojan.sh -o mytrojan.sh && chmod +x mytrojan.sh\n\n# 创建密码\nbash mytrojan.sh add password\n\n# 一次创建多个密码示例\nbash mytrojan.sh add password1 password2 ...\n\n# 删除密码\nbash mytrojan.sh del password\n\n# 一次删除多个密码示例\nbash mytrojan.sh del password1 password2 ...\n\n# 流量查询\nbash mytrojan.sh status password1 password2 ...\n\n# 流量归零\nbash mytrojan.sh rotate\n*流量统计归零后会自动在/etc/caddy/trojan/data目录下生成历史记录\n\n# 密码列表\nbash mytrojan.sh list\n```\n\n#### 重新安装 ####\n```\nsystemctl stop caddy.service && curl https://raw.githubusercontent.com/eastmaple/easytrojan/main/easytrojan.sh -o easytrojan.sh && chmod +x easytrojan.sh && bash easytrojan.sh password\n```\n\n#### 完全卸载 ####\n```\nsystemctl stop caddy.service && systemctl disable caddy.service && rm -rf /etc/caddy /usr/local/bin/caddy /etc/systemd/system/caddy.service\n```\n\n---\n\n#### 脚本说明 ####\n- 注意事项\n\n```\n必须使用root用户部署\n\n请勿修改配置文件参数\n```\n\n- 免费域名\n\n```\n通过nip.io提供的免费域名解析服务获取，域名由ServerIP+nip.io组成\n例如你的服务器IP为1.3.5.7，对应的域名则是1.3.5.7.nip.io\n```\n\n- 指定域名\n\n仅建议在免费域名被阻断时使用\n```\n在密码后加入域名即可指定域名重新安装，密码与域名之间应使用空格分隔，执行命令如下：\nsystemctl stop caddy.service && curl https://raw.githubusercontent.com/eastmaple/easytrojan/main/easytrojan.sh -o easytrojan.sh && chmod +x easytrojan.sh && bash easytrojan.sh password yourdomain\n\n*当指定域名后，如需切换回免费域名，必须完全卸载脚本，重新执行首次安装命令\n```\n\n- 更换端口\n\n仅建议在443端口被阻断时临时使用\n```\n# 将443端口更换为8443端口示例\nsed -i \"s/443/8443/g\" /etc/caddy/Caddyfile && systemctl restart caddy.service\n\n*更换端口后应开启对应端口的防火墙\n*当测试临时端口超过48小时未阻断后，应尽快更换IP并重新安装，使用默认的443端口\n```\n\n- 免费证书\n\n```\n通过Caddy的HTTPS模块实现，会自动申请letsencrypt或zerossl的免费证书\n\n*关闭防火墙后执行重新安装命令，能大概率解决证书申请失败的问题\n\n# RHEL 7、8、9 (CentOS、RedHat、AlmaLinux、RockyLinux)\nsystemctl stop firewalld.service && systemctl disable firewalld.service\n\n# Debian 9、10、11、Ubuntu 16、18、20、22\nsudo ufw disable\n```\n\n- 连接参数\n\nIP为1.3.5.7 密码为123456的服务器示例\n```\n地址：1.3.5.7.nip.io  #根据服务器IP生成（即免费域名）\n端口：443\n密码：123456          #安装时设置的密码\nALPN: h2/http1.1\n```\n\n- 服务伪装\n\n```\n非密码正确的trojan客户端访问返回503状态，将trojan伪装成过载的Web服务\n```\n\n---\n\n#### 连接方式 ####\n\n客户端的TLS指纹是导致trojan被封端口的重要原因之一，但问题不仅存在于客户端，服务端也应作出对应配置\n\n移动设备建议使用能够开启uTLS指纹功能的客户端，暂未有数据表明其它设备会因未启用uTLS指纹功能被封端口\n```\n为方便用户理解，配置示例中使用服务器IP:1.3.5.7、密码:123456，实际应修改为trojan服务器真实的连接参数\n\n客户端不只局限于以下几种，仅需支持trojan连接即可\n```\n\n- 常见客户端连接trojan示例\n>- Windows </br>\n> [配置示例](https://testingcf.jsdelivr.net/gh/eastmaple/easytrojan@client/v2rayn-trojan.png) | [V2rayN-Core](https://github.com/2dust/v2rayN/releases) | [加速下载](https://ghproxy.com/https://github.com/2dust/v2rayN/releases/download/6.23/v2rayN-With-Core.zip) \n>- MacOS </br>\n> [配置示例](https://testingcf.jsdelivr.net/gh/eastmaple/easytrojan@client/v2rayu-trojan.png) | [V2rayU](https://github.com/yanue/V2rayU/releases)  | [加速下载-64](https://ghproxy.com/https://github.com/yanue/V2rayU/releases/download/v3.8.0/V2rayU-64.dmg) | [加速下载-arm](https://ghproxy.com/https://github.com/yanue/V2rayU/releases/download/v3.8.0/V2rayU-arm64.dmg)\n>- Android </br>\n> [配置示例](https://testingcf.jsdelivr.net/gh/eastmaple/easytrojan@client/v2rayng-trojan.png) | [V2rayNG](https://github.com/2dust/v2rayNG/releases) | [加速下载](https://ghproxy.com/https://github.com/2dust/v2rayNG/releases/download/1.8.5/v2rayNG_1.8.5.apk) \n>- iOS </br>\n> [配置示例](https://testingcf.jsdelivr.net/gh/eastmaple/easytrojan@client/shadowrocket-trojan.png) | [Shadowrocket](https://apps.apple.com/us/app/shadowrocket/id932747118) | [AppStore海外代购](https://www.rocketgirls.space/product)\n\n- OpenWRT passwall [配置示例](https://testingcf.jsdelivr.net/gh/eastmaple/easytrojan@client/passwall-trojan.png)\n\n- Xray连接trojan部分示例\n```\n{\n    ...\n\n    \"outbounds\": [\n        {\n            \"protocol\": \"trojan\",\n            \"settings\": {\n                \"servers\": [\n                    {\n                        \"address\": \"1.3.5.7\",        #连接trojan的服务器IP或域名\n                        \"port\": 443,\n                        \"password\": \"123456\"         #连接trojan的密码\n                    }\n                ]\n            },\n            \"streamSettings\": {\n                \"network\": \"tcp\",\n                \"security\": \"tls\",\n                \"tlsSettings\": {\n                    \"allowInsecure\": false,\n                    \"serverName\": \"1.3.5.7.nip.io\",  #连接trojan的域名\n                    \"fingerprint\": \"chrome\",\n                    \"alpn\": \"h2,http/1.1\"\n                }\n            }\n        }\n    ]\n}\n```\n\n- Clash连接trojan部分示例（仅限非ARM设备）\n```\n- name: \"trojan\"\n    type: trojan\n    server: 1.3.5.7\n    port: 443\n    password: 123456\n    udp: true\n    sni: 1.3.5.7.nip.io\n    alpn:\n      - h2\n      - http/1.1\n    skip-cert-verify: false\n```\n> 警告：请勿在移动设备及其它除Mac外的ARM设备上使用Clash及不包含UTLS指纹功能的客户端连接trojan\n\n---\n\n#### 用户交流 ####\n[Telegram Group](https://t.me/easytrojan)\n\n---\n\n#### 数据报告 ####\n\n自北京时间2022年10月3日起，不断有中国大陆的用户报告基于TLS的代理服务器被封端口。\n\n>- 普遍现象：先被封禁443端口，更换端口后会在1~2天的时间内被再次封禁，多次更换端口后服务器IP被阻断\n>- 讨论结果：客户端指纹、服务端指纹、连接数量过多、TLS in TLS被识别等，总之众说纷纭，没有解决方案\n\n该项目经过多台服务器测试，以及与部分包含trojan协议的客户端开发者沟通，总结出了相对可靠的抗封锁方案，由于用户的客户端、网络环境差异很大，不保证部署后一定不封禁端口。\n\n> 样本服务器测试数据：\n>- 2022年10月初，2台来自境内用户日常使用的Non-TLS代理服务器相继被阻断IP\n>- 2022年10月初，2台样本服务器更换为trojan协议，客户端使用路由器连接，稳定运行\n>- 2022年10月上，多用户使用移动客户端连接其中1台trojan服务器，必定出现1天内被封端口现象\n>- 2022年10月上，排查原因，分析变量，调研多个被封样本，推测出三个最有可能的原因\n>- 2022年10月中，逐条更换变量测试，最终确定被封问题来自一个移动端不可描述的原因\n>- 2022年10月末，2台服务器在每日约10台设备连接、日流量消耗10~20G的情况下稳定运行\n>- 2022年10月末，新购1台封端口重灾区的服务器，并联系了10位使用trojan被封端口的用户，内测该部署方案\n>- 2022年11月初，样本服务器中，12台443端口正常，1台被封443端口，原因是客户端跳过了证书验证，更正后稳定运行\n>- 2022年11月中，总计13台样本服务器，443端口全部正常，期间有围观用户尝试部署，未收到端口被封反馈\n>- 2022年11月末，少量用户在移动设备使用clash客户端连接trojan被封端口，更换为该项目建议的客户端后均稳定运行\n>- 2022年11月末，已有超过100台服务器使用该项目部署，暂未收到用户服务器端口被封的反馈\n>- 2022年黑色星期五，将该部署方案制作成脚本并发布，并在10天后登上Github Trending总榜\n\n[![Stargazers over time](https://starchart.cc/eastmaple/easytrojan.svg)](https://starchart.cc/eastmaple/easytrojan)\n\n---\n\n#### 鸣谢项目 ####\n[CaddyServer](https://github.com/caddyserver/caddy) </br>\n[CaddyTrojan](https://github.com/imgk/caddy-trojan)\n"
        },
        {
          "name": "easytrojan.sh",
          "type": "blob",
          "size": 8.2021484375,
          "content": "#!/bin/bash\n#\n# Notes: EasyTrojan for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+\n#\n# Project home page:\n#        https://github.com/eastmaple/easytrojan\n\ntrojan_passwd=$1\ncaddy_domain=$2\naddress_ip=$(curl ipv4.ip.sb)\nnip_domain=${address_ip}.nip.io\ncheck_port=$(ss -Hlnp sport = :80 or sport = :443)\n\n[ \"$trojan_passwd\" = \"\" ] && { echo \"Error: You must enter a trojan's password to run this script\"; exit 1; }\n[ \"$caddy_domain\" != \"\" ] && domain_ip=$(ping \"${caddy_domain}\" -c 1 | sed '1{s/[^(]*(//;s/).*//;q}') && [ \"$domain_ip\" != \"$address_ip\" ] && { echo \"Error: Could not resolve hostname\"; exit 1; }\n[ \"$(id -u)\" != \"0\" ] && { echo \"Error: You must be root to run this script\"; exit 1; }\n[ \"$check_port\" != \"\" ] && { echo \"Error: Port 80 or 443 is already in use\"; exit 1; }\n\ncheck_cmd () { command -v \"$1\" &>/dev/null; }\n\nif ! check_cmd tar; then\n    echo \"tar: command not found, installing...\"\n    if check_cmd yum; then\n        yum install -y tar\n    elif check_cmd apt-get; then\n        apt-get install -y tar\n    elif check_cmd dnf; then\n        dnf install -y tar\n    else\n        echo \"Error: Unable to install tar\"; exit 1\n    fi\nfi\n\ncase $(uname -m) in\n    x86_64)\n        caddy_url=https://raw.githubusercontent.com/eastmaple/easytrojan/caddy/caddy_trojan_linux_amd64.tar.gz\n        ;;\n    aarch64)\n        caddy_url=https://raw.githubusercontent.com/eastmaple/easytrojan/caddy/caddy_trojan_linux_arm64.tar.gz\n        ;;\n    *) \n        echo \"Error: Your system version does not support\"\n        exit 1\n        ;;\nesac\n\ncurl -L $caddy_url | tar -zx -C /usr/local/bin caddy\n\nif ! id caddy &>/dev/null; then groupadd --system caddy; useradd --system -g caddy -s \"$(command -v nologin)\" caddy; fi\n\nmkdir -p /etc/caddy/trojan && chown -R caddy:caddy /etc/caddy && chmod 700 /etc/caddy\n\n[ \"$caddy_domain\" != \"\" ] && nip_domain=$caddy_domain && rm -rf /etc/caddy/certificates\n\ncat > /etc/caddy/Caddyfile <<EOF\n{\n    order trojan before respond\n    https_port 443\n    servers :443 {\n        listener_wrappers {\n            trojan\n        }\n        protocols h2 h1\n    }\n    servers :80 {\n        protocols h1\n    }\n    trojan {\n        caddy\n        no_proxy\n    }\n}\n:443, $nip_domain {\n    tls $address_ip@nip.io {\n        protocols tls1.2 tls1.2\n        ciphers TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n    }\n    log {\n        level ERROR\n    }\n    trojan {\n        websocket\n    }\n    respond \"Service Unavailable\" 503 {\n        close\n    }\n}\n:80 {\n    redir https://{host}{uri} permanent\n}\nEOF\n\ncat > /etc/systemd/system/caddy.service <<EOF\n[Unit]\nDescription=Caddy\nDocumentation=https://caddyserver.com/docs/\nAfter=network.target network-online.target\nRequires=network-online.target\n\n[Service]\nType=notify\nUser=caddy\nGroup=caddy\nEnvironment=XDG_CONFIG_HOME=/etc XDG_DATA_HOME=/etc\nExecStart=/usr/local/bin/caddy run --environ --config /etc/caddy/Caddyfile\nExecReload=/usr/local/bin/caddy reload --config /etc/caddy/Caddyfile --force\nTimeoutStopSec=5s\nLimitNOFILE=1048576\nLimitNPROC=512\nPrivateTmp=true\nAmbientCapabilities=CAP_NET_BIND_SERVICE\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nif ip link show lo | grep -q DOWN; then ip link set lo up; fi\nsystemctl daemon-reload && systemctl restart caddy.service && systemctl enable caddy.service\n\ncurl -X POST -H \"Content-Type: application/json\" -d \"{\\\"password\\\": \\\"$trojan_passwd\\\"}\" http://127.0.0.1:2019/trojan/users/add\necho \"$trojan_passwd\" >> /etc/caddy/trojan/passwd.txt && sort /etc/caddy/trojan/passwd.txt | uniq > /etc/caddy/trojan/passwd.tmp && mv -f /etc/caddy/trojan/passwd.tmp /etc/caddy/trojan/passwd.txt\n\necho \"Obtaining and Installing an SSL Certificate...\"\ncount=0\nsslfail=0\nuntil [ -d /etc/caddy/certificates ]; do\ncount=$((count + 1))\nsleep 3\n(( count > 20 )) && sslfail=1 && break\ndone\n\n[ \"$sslfail\" = \"1\" ] && { echo \"Certificate application failed, please check your server firewall and network settings\"; exit 1; }\n\nsed -i '/^# End of file/,$d' /etc/security/limits.conf\n\ncat >> /etc/security/limits.conf <<EOF\n# End of file\n*     soft   nofile    1048576\n*     hard   nofile    1048576\n*     soft   nproc     1048576\n*     hard   nproc     1048576\n*     soft   core      1048576\n*     hard   core      1048576\n*     hard   memlock   unlimited\n*     soft   memlock   unlimited\n\nroot     soft   nofile    1048576\nroot     hard   nofile    1048576\nroot     soft   nproc     1048576\nroot     hard   nproc     1048576\nroot     soft   core      1048576\nroot     hard   core      1048576\nroot     hard   memlock   unlimited\nroot     soft   memlock   unlimited\nEOF\n\nsed -i '/fs.file-max/d' /etc/sysctl.conf\nsed -i '/fs.inotify.max_user_instances/d' /etc/sysctl.conf\nsed -i '/net.core.somaxconn/d' /etc/sysctl.conf\nsed -i '/net.core.netdev_max_backlog/d' /etc/sysctl.conf\nsed -i '/net.core.rmem_max/d' /etc/sysctl.conf\nsed -i '/net.core.wmem_max/d' /etc/sysctl.conf\nsed -i '/net.ipv4.udp_rmem_min/d' /etc/sysctl.conf\nsed -i '/net.ipv4.udp_wmem_min/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_rmem/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_wmem/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_syncookies/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_fin_timeout/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_tw_reuse/d' /etc/sysctl.conf\nsed -i '/net.ipv4.ip_local_port_range/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_max_syn_backlog/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_max_tw_buckets/d' /etc/sysctl.conf\nsed -i '/net.ipv4.route.gc_timeout/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_syn_retries/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_synack_retries/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_timestamps/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_max_orphans/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_no_metrics_save/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_ecn/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_frto/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_mtu_probing/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_rfc1337/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_sack/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_fack/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_window_scaling/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_adv_win_scale/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_moderate_rcvbuf/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_keepalive_time/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_notsent_lowat/d' /etc/sysctl.conf\nsed -i '/net.ipv4.conf.all.route_localnet/d' /etc/sysctl.conf\nsed -i '/net.ipv4.ip_forward/d' /etc/sysctl.conf\nsed -i '/net.ipv4.conf.all.forwarding/d' /etc/sysctl.conf\nsed -i '/net.ipv4.conf.default.forwarding/d' /etc/sysctl.conf\nsed -i '/net.core.default_qdisc/d' /etc/sysctl.conf\nsed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf\n\ncat >> /etc/sysctl.conf << EOF\nfs.file-max = 1048576\nfs.inotify.max_user_instances = 8192\nnet.core.somaxconn = 32768\nnet.core.netdev_max_backlog = 32768\nnet.core.rmem_max=33554432\nnet.core.wmem_max=33554432\nnet.ipv4.udp_rmem_min=8192\nnet.ipv4.udp_wmem_min=8192\nnet.ipv4.tcp_rmem=4096 87380 33554432\nnet.ipv4.tcp_wmem=4096 16384 33554432\nnet.ipv4.tcp_syncookies = 1\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 1024 65000\nnet.ipv4.tcp_max_syn_backlog = 16384\nnet.ipv4.tcp_max_tw_buckets = 6000\nnet.ipv4.route.gc_timeout = 100\nnet.ipv4.tcp_syn_retries = 1\nnet.ipv4.tcp_synack_retries = 1\nnet.ipv4.tcp_timestamps = 0\nnet.ipv4.tcp_max_orphans = 32768\nnet.ipv4.tcp_no_metrics_save = 1\nnet.ipv4.tcp_ecn = 0\nnet.ipv4.tcp_frto = 0\nnet.ipv4.tcp_mtu_probing = 0\nnet.ipv4.tcp_rfc1337 = 0\nnet.ipv4.tcp_sack = 1\nnet.ipv4.tcp_fack = 1\nnet.ipv4.tcp_window_scaling = 1\nnet.ipv4.tcp_adv_win_scale = 1\nnet.ipv4.tcp_moderate_rcvbuf = 1\nnet.ipv4.tcp_keepalive_time = 600\nnet.ipv4.tcp_notsent_lowat = 16384\nnet.ipv4.conf.all.route_localnet = 1\nnet.ipv4.ip_forward = 1\nnet.ipv4.conf.all.forwarding = 1\nnet.ipv4.conf.default.forwarding = 1\nEOF\n\nmodprobe tcp_bbr &>/dev/null\nif grep -wq bbr /proc/sys/net/ipv4/tcp_available_congestion_control; then\necho \"net.core.default_qdisc = fq\" >>/etc/sysctl.conf\necho \"net.ipv4.tcp_congestion_control = bbr\" >>/etc/sysctl.conf\nfi\n\nsysctl -p\n\ncheck_http=$(curl -L http://\"$nip_domain\")\n[ \"$check_http\" != \"Service Unavailable\" ] && { echo \"You have installed EasyTrojan 2.0,please enable TCP port 80 and 443\"; exit 1; }\n\nclear\n\necho \"You have successfully installed EasyTrojan 2.0\" && echo \"Address: $nip_domain | Port: 443 | Password: $trojan_passwd | Alpn: h2,http/1.1\"\n"
        },
        {
          "name": "mytrojan.sh",
          "type": "blob",
          "size": 1.8798828125,
          "content": "#!/bin/bash\n#\n# Notes: EasyMyTrojan for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+\n#\n# Project home page:\n#        https://github.com/eastmaple/easytrojan\n\n[ \"$(id -u)\" != \"0\" ] && { echo \"Error: You must be root to run this script\"; exit 1; }\n\ncase $1 in\nadd)\nshift\n    for i in \"$@\" ; do\n        if curl -X POST -H \"Content-Type: application/json\" -d \"{\\\"password\\\": \\\"$i\\\"}\" http://127.0.0.1:2019/trojan/users/add ; then\n            echo \"$i\" >> /etc/caddy/trojan/passwd.txt &&\n            sort /etc/caddy/trojan/passwd.txt | uniq > /etc/caddy/trojan/passwd.tmp &&\n            mv -f /etc/caddy/trojan/passwd.tmp /etc/caddy/trojan/passwd.txt &&\n            echo \"Add Succeeded\"\n        else\n            echo \"Add $i Failed\"\n        fi\n    done\n;;\ndel)\nshift\n    for i in \"$@\" ; do\n        if curl -X DELETE -H \"Content-Type: application/json\" -d \"{\\\"password\\\": \\\"$i\\\"}\" http://127.0.0.1:2019/trojan/users/delete ; then\n            sed -i \"/^${i}$/d\" /etc/caddy/trojan/passwd.txt &&\n            echo \"Delete Succeeded\"\n        else\n            echo \"Delete $i Failed\"\n        fi\n    done\n;;\nstatus)\nshift\n    for i in \"$@\" ; do\n        hash=$(echo -n \"$i\" | sha224sum | cut -d ' ' -f1)\n        echo \"$i data usage: $(cat /etc/caddy/trojan/\"$hash\")\"\n    done\n;;\nrotate)\n    mkdate=$(date +%Y%m%d-%H%M%S)\n    cpdate=$(find /etc/caddy/trojan -maxdepth 1 -type f -not -path \"*passwd.txt*\")\n    mkdir -p /etc/caddy/trojan/data/\"$mkdate\"\n    for alldate in $cpdate; do\n        cp -f \"$alldate\" /etc/caddy/trojan/data/\"$mkdate\" &&\n        sed -i -r -e \"s|[0-9]+|0|g\" \"$alldate\"\n    done\n    echo \"Clear all data usage successful\"\n;;\nlist)\n    cat /etc/caddy/trojan/passwd.txt\n;;\n*)\n    echo \"Command Examples:\"\n    echo \"./mytrojan.sh add passwd1 passwd2 ...\"\n    echo \"./mytrojan.sh del passwd1 passwd2 ...\"\n    echo \"./mytrojan.sh status passwd1 passwd2 ...\"\n    echo \"./mytrojan.sh rotate\"\n    echo \"./mytrojan.sh list\"\n;;\nesac\n"
        }
      ]
    }
  ]
}