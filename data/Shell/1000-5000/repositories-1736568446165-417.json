{
  "metadata": {
    "timestamp": 1736568446165,
    "page": 417,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fcambus/ansiweather",
      "stars": 1881,
      "defaultBranch": "master",
      "files": [
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.099609375,
          "content": "AnsiWeather is developed by:\n\nFrederic Cambus <fred AT statdns DOT com>\n\nSite: https://www.cambus.net\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 4.94140625,
          "content": "AnsiWeather 1.19.0 (2023-01-09)\n\n- Quote location in example, as this is a common source of error\n- Add an entry for \"feels_like_text\" in the .ansiweatherrc example file\n- Only set LC_NUMERIC=C, instead of LC_ALL. This prevents overriding\n  locale date format when displaying days and months in forecast mode.\n\n\n\nAnsiWeather 1.18.0 (2021-09-14)\n\n- Update man page to add the -v option (Thanks Takayuki Hirota)\n- Add support for displaying feels like temperature (Thanks Andrew Abdalian)\n- Use command -v instead of which (Thanks er0k)\n- Add SPDX short license identifier in source file\n\n\n\nAnsiWeather 1.17.0 (2020-06-16)\n\n- Use cut instead of awk for parsing the config file, allowing to use the\n  colon character as part of the config value (Thanks Niklas Lindgren)\n\n\n\nAnsiWeather 1.16.0 (2020-01-21)\n\n- Switch default delimiter from \"=>\" to \":\" and stop prepending space\n- Do not hardcode colon in forecast mode, use $delimiter instead\n\n\n\nAnsiWeather 1.15.0 (2019-11-14)\n\n- Use HTTPS for performing weather API calls\n\n\n\nAnsiWeather 1.14.0 (2019-08-13)\n\n- Add final dots for options descriptions in ansiweather.1\n- Stop mentioning that ftp can be used on Mac OS X, as it's apparently\n  not the case anymore in Mojave\n- Remove space before percent sign for humidity display\n- Respect freedesktop/XDG spec for configuration (Thanks Ryan Delaney)\n\n\n\nAnsiWeather 1.13.0 (2018-07-16)\n\n- Do not attempt to fetch UV data when in forecast mode\n\n\n\nAnsiWeather 1.12.0 (2018-06-29)\n\n- Replace spaces in city names by '%20', underscores are not accepted\n  anymore by the OpenWeatherMap API\n- Add support for fetching and displaying UV index\n- Document the UV index feature and related flags and options\n\n\n\nAnsiWeather 1.11 (2017-06-21)\n\n- Unicode symbols display is now off by default\n- Shorten default greeting text: \"Current weather\" => \"Weather\"\n\n\n\nAnsiWeather 1.10 (2017-02-16)\n\n- Add a '-v' option to show version number\n- Exit with error code when an unknown option is invoked\n- Make wind direction customizable\n\n\n\nAnsiWeather 1.09 (2016-10-18)\n\n- Allow toggling display of wind, humidity, and pressure data (Thanks\n  John Kaczmarek)\n- The -h option does not show help anymore, as everything is available in\n  the manpage\n- Remove extraneous whitespace before daylight data\n- Rename 'daylight' variable to 'show_daylight' for consistency with the\n  newly introduced options (user configuration files must be updated)\n- Various documentation and manpage updates and reformatting\n\n\n\nAnsiWeather 1.08 (2016-07-26)\n\n- Use env printf instead of hardcoding printf path\n- Added a $forecast_text variable allowing to customize forecast text\n- Relicensed under the BSD 2-Clause license\n\n\n\nAnsiWeather 1.07 (2016-01-19)\n\n- Exit with non-zero return code on failure\n- Documentation updates\n- Added a manual page\n\n\n\nAnsiWeather 1.06 (2015-10-30)\n\n- Added support for OpenWeatherMap API keys\n- Changed curl options from '-s' to '-sf' to fail silently on server errors\n- Removing auto location helper, user location must now be explicitly set\n- Changed default city to Rzeszow, Poland\n- Changing rain and thunderstorm icons default colors to white and yellow\n- Documentation updates\n\n\n\nAnsiWeather 1.05 (2015-09-27)\n\n- Fixes for numeric translation on NetBSD (Thanks Kamil Rytarowski)\n- Use xargs printf construct to avoid hardcoding path to external\n  printf command (Thanks Kamil Rytarowski)\n- Use '/bin/sh' shebang instead of '/usr/bin/env sh' for portability\n  reasons (Thanks Kamil Rytarowski)\n- Replacing spaces by underscores in location name before calling\n  the weather API\n- Force bc to always return integers for wind directions (Thanks Lornix)\n- Documentation updates\n\n\n\nAnsiWeather 1.04 (2015-09-10)\n\n- Added a '-a' option to toggle ANSI colors display\n- Daylight option in the example configuration file now default to\n  false to match program default\n- Better formatting for usage display\n- Documentation updates\n\n\n\nAnsiWeather 1.03 (2015-09-08)\n\n- Removed dependency on Bash, AnsiWeather is now using plain sh\n- Detect all numeric locations and switching from 'q' to 'id' API query\n  parameter in this case\n- Do not attempt to convert pressure data to imperial units in forecast\n  mode (Bugfix)\n- Added a '-h' option to display usage\n- Parse arguments before setting options (Thanks Lucas Hoffmann)\n- Documentation updates\n- Linting and minor fixes\n\n\n\nAnsiWeather 1.02 (2015-05-09)\n\n- Documentation updates\n- Populated ChangeLog\n- Allow overriding default config file location using ANSIWEATHERRC\n  environment variable (Thanks Lucas Hoffmann)\n- Check if 'bc' is installed before starting\n\n\n\nAnsiWeather 1.01 (2015-03-16)\n\n- Add ability to store options in config file (Thanks Aaron Bieber)\n- Automatic location detection (Thanks Michael Price)\n- Showing wind direction and speed\n- Add ability to display upcoming weekly forecast (Thanks Michael Reinhardt)\n- Add ability to display daylight data (Thanks Roy Hodgman)\n- Allow custom geolocation server to be set (Thanks Aaron Bieber)\n- Removed dependency on seq\n\n\n\nAnsiWeather 1.00 (2013-10-19)\n\n- Initial release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2822265625,
          "content": "Copyright (c) 2013-2023, Frederic Cambus\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS\nBE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.7998046875,
          "content": "## Description\n\nAnsiWeather is a Shell script for displaying the current weather conditions\nin your terminal, with support for ANSI colors and Unicode symbols.\n\n![AnsiWeather Screenshot][1]\n\nWeather data comes from the `OpenWeatherMap` free weather API.\n\n\n\n## Requirements\n\nAnsiWeather requires the following dependencies:\n\n- A command to fetch HTTP data such as FTP, cURL or wget\n- [jq][2] (lightweight and flexible command-line JSON processor)\n- [bc][3] (arbitrary precision numeric processing language), for doing float\n  arithmetic\n\n\n\n## Installation\n\nAfter cloning the repository, simply invoke the script by typing:\n\n\t./ansiweather\n\nAnsiWeather packages are available for:\n\n- [OpenBSD][4]\n- [NetBSD][5]\n- [FreeBSD][6]\n- [Debian][7]\n- [Ubuntu][8]\n- [Homebrew][9]\n- [Haiku][10]\n- [Gentoo][11]\n- [Alpine Linux][12]\n\n\n\n## Usage\n\n### Synopsis\n\n\tansiweather [-l location] [-u system] [-f days] [-F] [-a value]\n\t            [-s value] [-k key] [-i value] [-w value] [-h value]\n\t            [-H value] [-p value] [-d value] [-v]\n\n### Options\n\n\t-l location\n\t        Specify location.\n\t\n\t-u system\n\t        Specify unit system to use ( metric or imperial ).\n\t\n\t-f days\n\t        Toggle forecast mode for the specified number of upcoming days.\n\t\n\t-F      Toggle forecast mode for the next five days.\n\t\n\t-a value\n\t        Toggle ANSI colors display ( true or false ).\n\t\n\t-s value\n\t        Toggle symbols display ( true or false ).\n\t\n\t-k key  Specify OpenWeatherMap API key.\n\t\n\t-i value\n\t        Toggle UV Index display ( true or false ).\n\t\n\t-w value\n\t        Toggle wind data display ( true or false ).\n\t\n\t-h value\n\t        Toggle humidity data display ( true or false ).\n\t\n\t-H value\n\t        Toggle Feels like display ( true or false ).\n\t\n\t-p value\n\t        Toggle pressure data display ( true or false ).\n\t\n\t-d value\n\t        Toggle daylight data display ( true or false ).\n\t\n\t-v      Display version.\n\n### Examples\n\nDisplay forecast using metric units for the next five days (showing symbols\nand daylight data) for Rzeszow, Poland:\n\n\tansiweather -l \"Rzeszow,PL\" -u metric -s true -f 5 -d true\n\n\n\n## Configuration\n\nThe default config file is ~/.ansiweatherrc. The environment variable\nANSIWEATHERRC can be set to override this. The following configuration\noptions (detailed below) are available and should be set according to\nyour location and preferences.\n\nExample: `~/.ansiweatherrc`\n\n\tlocation:Rzeszow,PL\n\tfetch_cmd:ftp -V -o -\n\tunits:metric\n\tshow_daylight:true\n\nThe file `ansiweatherrc.example` contains all available configuration\nvariables.\n\n### Location\n\nLocation format is `city,CC` where `CC` is a two-letter ISO 3166-1 alpha-2\ncountry code. A list of country codes is available [here][13].\nAlternatively, it's also possible to specify locations by their ID, a city\nlist is available [here][14].\n\nIn case no location is specified, AnsiWeather will fallback to the default\nlocation.\n\nExample: `Rzeszow,PL`\n\n\tlocation:Rzeszow,PL\n\n### Fetch Command\n\nVarious tools can be used to fetch data: `curl`, `wget`, `ftp`.\n\nPlease note that `ftp` flags and options might differ among implementations\nand versions, and the example provided here is known to work only on OpenBSD\nand NetBSD.\n\nExample: `curl -sf`\n\n\tfetch_cmd:curl -sf\n\nExample: `wget -qO-`\n\n\tfetch_cmd:wget -qO-\n\nExample: `ftp -V -o -`\n\n\tfetch_cmd:ftp -V -o -\n\nDefault: `curl -sf`\n\n### System of Units\n\nBoth `metric` and `imperial` systems are supported.\n\n\tunits:metric\n\nDefault: `metric`\n\n### Display ANSI sequences\n\nToggle ANSI sequences display. Value can be either `true` (requires an ANSI\ncapable display) or `false`.\n\n\tansi:true\n\nDefault: `true`\n\n### Display symbols\n\nToggle Unicode symbols display. Value can be either `true` (requires a\nUnicode capable display) or `false`.\n\n\tsymbols:true\n\nDefault: `false`\n\nSymbols can be configured or replaced by custom text using the following\nconfiguration variables: `sun`, `moon`, `clouds`, `rain`, `fog`, `mist`,\n`haze`, `snow`, `thunderstorm`.\n\n### Display forecast\n\nShow upcoming forecast for the next `N` days (for 0 <= N <= 7). `0` will\nshow standard output.\n\n\tforecast:5\n\nDefault: `0`\n\n### Display wind / humidity / pressure\n\nToggle UV Index, wind, humidity, and/or pressure display. Values can be either\n`true` or `false`.\n\n\tshow_uvi:true\n\tshow_wind:true\n\tshow_humidity:true\n\tshow_pressure:true\n\nDefault: `true`\n\n### Display sunrise / sunset\n\nToggle daylight display. Value can be either `true` or `false`.\n\n\tshow_daylight:false\n\nDefault: `false`\n\n### Date and Time format\n\nConfigure date and time format display. See Unix date formatting docs\nfor details.\n\n\tdateformat:%a %b %d\n\nDefault: `%a %b %d`\n\n\ttimeformat:%b %d %r\n\nDefault: `%b %d %r`\n\n### OpenWeatherMap API key\n\nSpecify an OpenWeatherMap API key. By default AnsiWeather uses its own\nkey, but users can optionally get their own one by creating a free\n[OpenWeatherMap account][15].\n\n\tapi_key:85a4e3c55b73909f42c6a23ec35b7147\n\n\n\n## License\n\nAnsiWeather is released under the BSD 2-Clause license. See `LICENSE` file\nfor details.\n\n\n\n## Author\n\nAnsiWeather is developed by Frederic Cambus.\n\n- Site: https://www.cambus.net\n\n\n\n## Resources\n\nGitHub: https://github.com/fcambus/ansiweather\n\n[1]: https://www.cambus.net/files/ansiweather/ansiweather.png\n[2]: https://stedolan.github.io/jq/\n[3]: https://www.gnu.org/software/bc/\n[4]: https://openports.pl/path/astro/ansiweather\n[5]: https://pkgsrc.se/misc/ansiweather\n[6]: https://www.freshports.org/misc/ansiweather\n[7]: https://packages.debian.org/search?keywords=ansiweather\n[8]: https://packages.ubuntu.com/search?keywords=ansiweather\n[9]: https://formulae.brew.sh/formula/ansiweather\n[10]: https://github.com/haikuports/haikuports/tree/master/app-misc/ansiweather\n[11]: https://packages.gentoo.org/packages/app-misc/ansiweather\n[12]: https://pkgs.alpinelinux.org/packages?name=ansiweather\n[13]: https://www.statdns.com/cctlds/\n[14]: https://bulk.openweathermap.org/sample/\n[15]: https://home.openweathermap.org/users/sign_up\n"
        },
        {
          "name": "ansiweather",
          "type": "blob",
          "size": 10.76953125,
          "content": "#!/bin/sh\n\n#\n# AnsiWeather 1.19.0\n# Copyright (c) 2013-2023, Frederic Cambus\n# https://github.com/fcambus/ansiweather\n#\n# Created: 2013-08-29\n# Last Updated: 2023-01-09\n#\n# AnsiWeather is released under the BSD 2-Clause license.\n# See LICENSE file for details.\n#\n# SPDX-License-Identifier: BSD-2-Clause\n#\n\n###[ Configuration options ]###################################################\n\nLC_NUMERIC=C; export LC_NUMERIC\n\nif [ -n \"$ANSIWEATHERRC\" ] ; then\n\tconfig_file=\"$ANSIWEATHERRC\"\nelif [ -s \"$XDG_CONFIG_HOME\"/ansiweather/config ] ; then\n\tconfig_file=\"$XDG_CONFIG_HOME\"/ansiweather/config\nelif [ -s \"$HOME\"/.config/ansiweather/config ] ; then\n\tconfig_file=\"$HOME\"/.config/ansiweather/config\nelse\n\tconfig_file=~/.ansiweatherrc\nfi\n\nget_config() {\n\tret=\"\"\n\tif [ -f \"$config_file\" ]\n\tthen\n\t\tret=$(grep \"^$1:\" \"$config_file\" | cut -d: -f2-)\n\tfi\n\n\tif [ \"X$ret\" = \"X\" ]\n\tthen\n\t\treturn 1\n\telse\n\t\techo \"$ret\"\n\tfi\n}\n\nfetch_cmd=$(get_config \"fetch_cmd\" || echo \"curl -sf\")\n\n\n\n###[ Parse the command line ]##################################################\n\n# Get config options from command line flags\nwhile getopts l:u:f:FH:a:s:k:i:w:h:p:d:v option\ndo\n\tcase \"${option}\"\n\tin\n\t\tl) location=${OPTARG};;\n\t\tu) units=${OPTARG};;\n\t\tf) forecast=${OPTARG};;\n\t\tF) forecast=\"5\";;\n\t\tH) show_feels_like=${OPTARG};;\n\t\ta) ansi=${OPTARG};;\n\t\ts) symbols=${OPTARG};;\n\t\tk) api_key=${OPTARG};;\n\t\ti) show_uvi=${OPTARG};;\n\t\tw) show_wind=${OPTARG};;\n\t\th) show_humidity=${OPTARG};;\n\t\tp) show_pressure=${OPTARG};;\n\t\td) show_daylight=${OPTARG};;\n\t\tv) echo \"AnsiWeather 1.19.0\" && exit 0;;\n\t\t\\?) exit 64;; # EX_USAGE\n\tesac\ndone\n\n\n\n###[ Check if bc and jq are installed ]########################################\n\njqpath=$(command -v jq)\nif [ \"$jqpath\" = \"\" ]\nthen\n\techo \"ERROR: Cannot find jq binary\"\n\texit 69 # EX_UNAVAILABLE\nfi\n\nbcpath=$(command -v bc)\nif [ \"$bcpath\" = \"\" ]\nthen\n\techo \"ERROR: Cannot find bc binary\"\n\texit 69 # EX_UNAVAILABLE\nfi\n\n\n\n###[ Set options that are not set from command line ]##########################\n\n# OpenWeatherMap API key\n[ -z \"$api_key\" ] && api_key=$(get_config \"api_key\" || echo \"85a4e3c55b73909f42c6a23ec35b7147\")\n\n# Location: example \"Rzeszow,PL\"\n[ -z \"$location\" ] && location=$(get_config \"location\" || echo \"Rzeszow,PL\")\n\n# System of Units: \"metric\" or \"imperial\"\n[ -z \"$units\" ] && units=$(get_config \"units\" || echo \"metric\")\n\n# Show forecast: How many days, example \"5\". \"0\" is standard output\n[ -z \"$forecast\" ] && forecast=$(get_config \"forecast\" || echo 0)\n\n# Display ANSI colors: \"true\" or \"false\"\n[ -z \"$ansi\" ] && ansi=$(get_config \"ansi\" || echo true)\n\n# Display symbols: \"true\" or \"false\" (requires a Unicode capable display)\n[ -z \"$symbols\" ] && symbols=$(get_config \"symbols\" || echo false)\n\n# Show feels-like: \"true\" or \"false\"\n[ -z \"$show_feels_like\" ] && show_feels_like=$(get_config \"show_feels_like\" || echo false)\n\n# Show UVI: \"true\" or \"false\"\n[ -z \"$show_uvi\" ] && show_uvi=$(get_config \"show_uvi\" || echo true)\n\n# Show wind: \"true\" or \"false\"\n[ -z \"$show_wind\" ] && show_wind=$(get_config \"show_wind\" || echo true)\n\n# Show humidity: \"true\" or \"false\"\n[ -z \"$show_humidity\" ] && show_humidity=$(get_config \"show_humidity\" || echo true)\n\n# Show pressure: \"true\" or \"false\"\n[ -z \"$show_pressure\" ] && show_pressure=$(get_config \"show_pressure\" || echo true)\n\n# Show daylight: \"true\" or \"false\"\n[ -z \"$show_daylight\" ] && show_daylight=$(get_config \"show_daylight\" || echo false)\n\ndateformat=$(get_config \"dateformat\" || echo \"%a %b %d\")\ntimeformat=$(get_config \"timeformat\" || echo \"%b %d %r\")\n\n\n\n###[ Colors and characters ]###################################################\n\nbackground=$(get_config \"background\" || echo \"\\033[44m\")\ntext=$(get_config \"text\" || echo \"\\033[36;1m\")\ndata=$(get_config \"data\" || echo \"\\033[33;1m\")\ndelimiter=$(get_config \"delimiter\" || echo \"\\033[35m:\")\ndashes=$(get_config \"dashes\" || echo \"\\033[34m-\")\n\n\n\n###[ Text Labels ]#############################################################\n\ngreeting_text=$(get_config \"greeting_text\" || echo \"Weather in\")\nwind_text=$(get_config \"wind_text\" || echo \"Wind\")\nfeels_like_text=$(get_config \"feels_like_text\" || echo \"Feels like\")\nhumidity_text=$(get_config \"humidity_text\" || echo \"Humidity\")\npressure_text=$(get_config \"pressure_text\" || echo \"Pressure\")\nsunrise_text=$(get_config \"sunrise_text\" || echo \"Sunrise\")\nsunset_text=$(get_config \"sunset_text\" || echo \"Sunset\")\nforecast_text=$(get_config \"forecast_text\" || echo \"forecast\")\n\n\n\n###[ Unicode Symbols for icons ]###############################################\n\nsun=$(get_config \"sun\" || echo \"\\033[33;1m\\xe2\\x98\\x80\")\nmoon=$(get_config \"moon\" || echo \"\\033[36m\\xe2\\x98\\xbd\")\nclouds=$(get_config \"clouds\" || echo \"\\033[37;1m\\xe2\\x98\\x81\")\nrain=$(get_config \"rain\" || echo \"\\033[37;1m\\xe2\\x98\\x94\")\nfog=$(get_config \"fog\" || echo \"\\033[37;1m\\xe2\\x96\\x92\")\nmist=$(get_config \"mist\" || echo \"\\033[34m\\xe2\\x96\\x91\")\nhaze=$(get_config \"haze\" || echo \"\\033[33m\\xe2\\x96\\x91\")\nsnow=$(get_config \"snow\" || echo \"\\033[37;1m\\xe2\\x9d\\x84\")\nthunderstorm=$(get_config \"thunderstorm\" || echo \"\\033[33;1m\\xe2\\x9a\\xa1\")\n\n\n\n###[ Fetch Weather data ]######################################################\n\napi_cmd=$([ \"$forecast\" != 0 ] && echo \"forecast/daily\" || echo \"weather\")\n\nif [ \"$location\" -gt 0 ] 2> /dev/null\nthen\n\t# Location is all numeric\n\tweather=$($fetch_cmd \"https://api.openweathermap.org/data/2.5/$api_cmd?id=$location&units=$units&appid=$api_key\")\nelse\n\t# Location is a string\n\tlocation=$(echo \"$location\" | sed \"s/ /%20/g\")\n\tweather=$($fetch_cmd \"https://api.openweathermap.org/data/2.5/$api_cmd?q=$location&units=$units&appid=$api_key\")\nfi\n\nif [ -z \"$weather\" ]\nthen\n\techo \"ERROR: Cannot fetch weather data\"\n\texit 75 # EX_TEMPFAIL\nfi\n\nstatus_code=$(echo \"$weather\" | jq -r '.cod' 2>/dev/null)\n\nif [ \"$status_code\" != 200 ]\nthen\n\techo \"ERROR: Cannot fetch weather data for the given location\"\n\texit 69 # EX_UNAVAILABLE\nfi\n\n\n\n###[ Fetch UV data ]###########################################################\n\nif [ \"$show_uvi\" = true ] && [ \"$forecast\" = 0 ]\nthen\n\tlat=$(echo \"$weather\" | jq -r '.coord.lat')\n\tlon=$(echo \"$weather\" | jq -r '.coord.lon')\n\n\tuvdata=$($fetch_cmd \"https://api.openweathermap.org/data/2.5/uvi?lat=$lat&lon=$lon&appid=$api_key\")\n\tuvi=$(echo \"$uvdata\" | jq -r '.value')\nfi\n\n\n\n###[ Process Weather data ]####################################################\n\nepoch_to_date() {\n\tif date -j -r \"$1\" +\"%a %b %d\" > /dev/null 2>&1; then\n\t\t# BSD\n\t\tret=$(date -j -r \"$1\" +\"$dateformat\")\n\telse\n\t\t# GNU\n\t\tret=$(date -d \"@$1\" +\"$dateformat\")\n\tfi\n\techo \"$ret\"\n}\n\nif [ \"$forecast\" != 0 ]\nthen\n\tcity=$(echo \"$weather\" | jq -r '.city.name')\n\tflength=$(echo \"$weather\" | jq '.list | length')\n\tforecast=$([ \"$forecast\" -gt \"$flength\" ] && echo \"$flength\" || echo \"$forecast\")\nelse\n\tcity=$(echo \"$weather\" | jq -r '.name')\n\ttemperature=$(echo \"$weather\" | jq '.main.temp' | xargs printf \"%.0f\")\n\thumidity=$(echo \"$weather\" | jq '.main.humidity')\n\tfeels_like=$(echo \"$weather\" | jq '.main.feels_like' | xargs printf \"%.0f\")\n\tpressure=$(echo \"$weather\" | jq '.main.pressure')\n\tsky=$(echo \"$weather\" | jq -r '.weather[0].main')\n\tsunrise=$(echo \"$weather\" | jq '.sys.sunrise')\n\tsunset=$(echo \"$weather\" | jq '.sys.sunset')\n\twind=$(echo \"$weather\" | jq '.wind.speed')\n\tazimuth=$(echo \"$weather\" | jq '.wind.deg')\nfi\n\n\n\n###[ Process Wind data ]#######################################################\n\nset -- $(get_config \"wind_directions\" || echo \"N NNE NE ENE E ESE SE SSE S SSW SW WSW W WNW NW NNW\")\n\nif [ \"$forecast\" = 0 ]\nthen\n\tshift \"$(echo \"scale=0; ($azimuth + 11.25)/22.5 % 16\" | bc)\"\n\tdirection=$1\nfi\n\n\n\n###[ Process Sunrise and Sunset data ]#########################################\n\nepoch_to_time() {\n\tif date -j -r \"$1\" +\"%r\" > /dev/null 2>&1; then\n\t\t# BSD\n\t\tret=$(date -j -r \"$1\" +\"$timeformat\")\n\telse\n\t\t# GNU\n\t\tret=$(date -d \"@$1\" +\"$timeformat\")\n\tfi\n\techo \"$ret\"\n}\n\nif [ \"$forecast\" = 0 ]\nthen\n\tif [ -n \"$sunrise\" ]\n\tthen\n\t\tsunrise_time=$(epoch_to_time \"$sunrise\")\n\tfi\n\n\tif [ -n \"$sunset\" ]\n\tthen\n\t\tsunset_time=$(epoch_to_time \"$sunset\")\n\tfi\nfi\n\n\n\n###[ Set the period ]##########################################################\n\nnow=$(date +%s)\n\nif [ \"$forecast\" != 0 ]\nthen\n\tperiod=\"none\"\nelse\n\tif [ -z \"$sunset\" ] || [ -z \"$sunrise\" ]\n\tthen\n\t\tperiod=\"day\"\n\telif [ \"$now\" -ge \"$sunset\" ] || [ \"$now\" -le \"$sunrise\" ]\n\tthen\n\t\tperiod=\"night\"\n\telse\n\t\tperiod=\"day\"\n\tfi\nfi\n\n\n\n###[ Set the scale ]###########################################################\n\ncase $units in\n\tmetric)\n\t\tscale=\"°C\"\n\t\tspeed_unit=\"m/s\"\n\t\tpressure_unit=\"hPa\"\n\t\tpressure=$(echo \"$pressure\" | xargs printf \"%.0f\")\n\t\t;;\n\timperial)\n\t\tscale=\"°F\"\n\t\tspeed_unit=\"mph\"\n\t\tpressure_unit=\"inHg\"\n\t\tif [ \"$forecast\" = 0 ]\n\t\tthen\n\t\t\tpressure=$(echo \"$pressure*0.0295\" | bc | xargs printf \"%.2f\")\n\t\tfi\n\t\t;;\nesac\n\n\n\n###[ Set icons ]###############################################################\n\nget_icon() {\n\tcase $1 in\n\t\tClear)\n\t\t\tif [ $period = \"night\" ]\n\t\t\tthen\n\t\t\t\techo \"$moon \"\n\t\t\telse\n\t\t\t\techo \"$sun \"\n\t\t\tfi\n\t\t\t;;\n\t\tClouds)\n\t\t\techo \"$clouds \"\n\t\t\t;;\n\t\tRain)\n\t\t\techo \"$rain \"\n\t\t\t;;\n\t\tFog)\n\t\t\techo \"$fog \"\n\t\t\t;;\n\t\tMist)\n\t\t\techo \"$mist \"\n\t\t\t;;\n\t\tHaze)\n\t\t\techo \"$haze \"\n\t\t\t;;\n\t\tSnow)\n\t\t\techo \"$snow \"\n\t\t\t;;\n\t\tThunderstorm)\n\t\t\techo \"$thunderstorm \"\n\t\t\t;;\n\tesac\n}\n\n\n\n###[ Display current Weather ]#################################################\n\nif [ \"$forecast\" != 0 ]\nthen\n\toutput=\"$background$text $city $forecast_text$text$delimiter \"\n\n\ti=0\n\twhile [ $i -lt \"$forecast\" ]\n\tdo\n\t\tday=$(echo \"$weather\" | jq \".list[$i]\")\n\t\tdate=$(epoch_to_date \"$(echo \"$day\" | jq -r '.dt')\")\n\t\tlow=$(echo \"$day\" | jq -r '.temp.min' | xargs printf \"%.0f\")\n\t\thigh=$(echo \"$day\" | jq -r '.temp.max' | xargs printf \"%.0f\")\n\n\t\ticon=\"\"\n\t\tif [ \"$symbols\" = true ]\n\t\tthen\n\t\t\tsky=$(echo \"$day\" | jq -r '.weather[0].main')\n\t\t\ticon=$(get_icon \"$sky\")\n\t\tfi\n\n\t\toutput=\"$output$text$date$delimiter $data$high$text/$data$low $scale $icon\"\n\t\tif [ $i -lt $((forecast-1)) ]\n\t\tthen\n\t\t\toutput=\"$output$dashes \"\n\t\tfi\n\n\t\ti=$((i + 1))\n\tdone\nelse\n\tif [ \"$symbols\" = true ]\n\tthen\n\t\ticon=\"$(get_icon \"$sky\")\"\n\tfi\n\toutput=\"$background$text $greeting_text $city$delimiter$data $temperature $scale $icon\"\n\n        if [ \"$show_feels_like\" = true ]\n        then\n                output=\"$output$dashes$text $feels_like_text$delimiter$data $feels_like $scale \"\n        fi\n\n\tif [ \"$show_uvi\" = true ]\n\tthen\n\t\toutput=\"$output$dashes$text UVI$delimiter$data $uvi \"\n\tfi\n\n\tif [ \"$show_wind\" = true ]\n\tthen\n\t\toutput=\"$output$dashes$text $wind_text$delimiter$data $wind $speed_unit $direction \"\n\tfi\n\n\tif [ \"$show_humidity\" = true ]\n\tthen\n\t\toutput=\"$output$dashes$text $humidity_text$delimiter$data $humidity%% \"\n\tfi\n\n\tif [ \"$show_pressure\" = true ]\n\tthen\n\t\toutput=\"$output$dashes$text $pressure_text$delimiter$data $pressure $pressure_unit \"\n\tfi\n\n\tif [ \"$show_daylight\" = true ]\n\tthen\n\t\toutput=\"$output$dashes$text $sunrise_text$delimiter$data $sunrise_time $dashes$text $sunset_text$delimiter$data $sunset_time \"\n\tfi\nfi\n\nif [ \"$ansi\" = true ]\nthen\n\tenv printf \"$output\\033[0m\\n\"\nelse\n\tenv printf \"$output\\n\" | sed \"s/$(printf '\\033')\\[[0-9;]*m//g\"\nfi\n"
        },
        {
          "name": "ansiweather.1",
          "type": "blob",
          "size": 3.142578125,
          "content": ".\\\"\n.\\\" Copyright (c) 2013-2023, Frederic Cambus\n.\\\" All rights reserved.\n.\\\"\n.\\\" Redistribution and use in source and binary forms, with or without\n.\\\" modification, are permitted provided that the following conditions are met:\n.\\\"\n.\\\"   * Redistributions of source code must retain the above copyright\n.\\\"     notice, this list of conditions and the following disclaimer.\n.\\\"\n.\\\"   * Redistributions in binary form must reproduce the above copyright\n.\\\"     notice, this list of conditions and the following disclaimer in the\n.\\\"     documentation and/or other materials provided with the distribution.\n.\\\"\n.\\\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n.\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n.\\\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n.\\\" ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS\n.\\\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n.\\\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n.\\\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n.\\\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n.\\\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n.\\\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n.\\\" POSSIBILITY OF SUCH DAMAGE.\n.\\\"\n.Dd $Mdocdate: January 7 2023 $\n.Dt ANSIWEATHER 1\n.Os\n.Sh NAME\n.Nm ansiweather\n.Nd weather in terminal, with ANSI colors and Unicode symbols\n.Sh SYNOPSIS\n.Nm\n.Op Fl l Ar location\n.Op Fl u Ar system\n.Op Fl f Ar days\n.Op Fl F\n.Op Fl a Ar value\n.Op Fl s Ar value\n.Op Fl k Ar key\n.Op Fl i Ar value\n.Op Fl w Ar value\n.Op Fl h Ar value\n.Op Fl H Ar value\n.Op Fl p Ar value\n.Op Fl d Ar value\n.Op Fl v\n.Sh DESCRIPTION\n.Nm\nis a shell script for displaying the current weather\nconditions in a terminal, with support for ANSI colors and Unicode\nsymbols.\n.Pp\nWeather data comes from the OpenWeatherMap free weather API.\n.Pp\nThe options are as follows:\n.Bl -tag -width Ds\n.It Fl l Ar location\nSpecify location.\n.It Fl u Ar system\nSpecify unit system to use (\n.Ar metric\nor\n.Ar imperial\n).\n.It Fl f Ar days\nToggle forecast mode for the specified number of upcoming days.\n.It Fl F\nToggle forecast mode for the next five days.\n.It Fl a Ar value\nToggle ANSI colors display (\n.Ar true\nor\n.Ar false\n).\n.It Fl s Ar value\nToggle symbols display (\n.Ar true\nor\n.Ar false\n).\n.It Fl k Ar key\nSpecify OpenWeatherMap API key.\n.It Fl i Ar value\nToggle UV Index display (\n.Ar true\nor\n.Ar false\n).\n.It Fl w Ar value\nToggle wind data display (\n.Ar true\nor\n.Ar false\n).\n.It Fl h Ar value\nToggle humidity data display (\n.Ar true\nor\n.Ar false\n).\n.It Fl H Ar value\nToggle Feels like display (\n.Ar true\nor\n.Ar false\n).\n.It Fl p Ar value\nToggle pressure data display (\n.Ar true\nor\n.Ar false\n).\n.It Fl d Ar value\nToggle daylight data display (\n.Ar true\nor\n.Ar false\n).\n.It Fl v\nDisplay version.\n.El\n.Sh EXAMPLES\nDisplay forecast using metric units for the next five days (showing\nsymbols and daylight data) for Rzeszow, Poland:\n.Pp\nansiweather -l \"Rzeszow,PL\" -u metric -s true -f 5 -d true\n.Sh AUTHORS\n.Nm\nwas written by\n.An Frederic Cambus .\n"
        },
        {
          "name": "ansiweather.plugin.zsh",
          "type": "blob",
          "size": 0.033203125,
          "content": "export PATH=${PATH}:$(dirname $0)\n"
        },
        {
          "name": "ansiweatherrc.example",
          "type": "blob",
          "size": 0.92578125,
          "content": "# .ansiweatherrc example showing all available options\n\napi_key:85a4e3c55b73909f42c6a23ec35b7147\nfetch_cmd:curl -sf\nlocation:Rzeszow,PL\nunits:metric\nforecast:0\nansi:true\nsymbols:false\nshow_feels_like:false\nshow_uvi:true\nshow_wind:true\nshow_humidity:true\nshow_pressure:true\nshow_daylight:false\ndateformat:%a %b %d\ntimeformat:%b %d %r\n\n# Text and Colors\nbackground:\\033[44m\ntext:\\033[36;1m\ndata:\\033[33;1m\ndelimiter:\\033[35m:\ndashes:\\033[34m-\nforecast_text:forecast\ngreeting_text:Weather in\nfeels_like_text:Feels like\nhumidity_text:Humidity\npressure_text:Pressure\nsunrise_text:Sunrise\nsunset_text:Sunset\nwind_directions:N NNE NE ENE E ESE SE SSE S SSW SW WSW W WNW NW NNW\nwind_text:Wind\n\n# Icons\nsun:\\033[33;1m\\xe2\\x98\\x80\nmoon:\\033[36m\\xe2\\x98\\xbd\nclouds:\\033[37;1m\\xe2\\x98\\x81\nrain:\\033[37;1m\\xe2\\x98\\x94\nfog:\\033[37;1m\\xe2\\x96\\x92\nmist:\\033[34m\\xe2\\x96\\x91\nhaze:\\033[33m\\xe2\\x96\\x91\nsnow:\\033[37;1m\\xe2\\x9d\\x84\nthunderstorm:\\033[33;1m\\xe2\\x9a\\xa1\n"
        },
        {
          "name": "screenshot",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}