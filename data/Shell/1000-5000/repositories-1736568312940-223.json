{
  "metadata": {
    "timestamp": 1736568312940,
    "page": 223,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pipeseroni/pipes.sh",
      "stars": 2549,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.015625,
          "content": "pipes.sh.6.html\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.630859375,
          "content": "language: bash\n\nmatrix:\n  include:\n    - os: linux\n    - os: osx\n      env: HOMEBREW_NO_AUTO_UPDATE=1\n\naddons:\n  apt:\n    packages:\n      - groff\n      - shunit2\n\nsudo: required\n\nbefore_install:\n  - if [[ \"$TRAVIS_OS_NAME\" == 'osx' ]]; then brew install bash; fi\n  - if [[ \"$TRAVIS_OS_NAME\" == 'osx' ]]; then export PATH=/usr/local/bin:$PATH; fi\n  - if [[ \"$TRAVIS_OS_NAME\" == 'osx' ]]; then bash -c 'echo $BASH_VERSION'; fi\n  - if [[ \"$TRAVIS_OS_NAME\" == 'osx' ]]; then brew install shunit2; fi\n\nbefore_script:\n  - tput -V\n  - groff --version\n  - if [[ \"$TRAVIS_OS_NAME\" != 'osx' ]]; then sed --version; fi\n\nscript:\n  - scripts/travis-script.sh\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 0.607421875,
          "content": "======================\nContributing Guideline\n======================\n\nAny contributions are greatly appreciated, whether it's codes or documenting,\nor helping out on issues.\n\nHowever, in order to reduce unnecessary works and communications, please make\nsure you read this guideline before carrying out any tasks.\n\n\nPull Requests\n=============\n\nPlease follow this `general rules`__, and when in doubt, ask in issues first, a\nfew examples:\n\n  * It could be a big commit and impossible to split.\n  * Changing default settings or existing behaviors.\n\n__ https://github.com/pipeseroni/pipes.sh/wiki/Development:-Coding#summary\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.146484375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-2018 Pipeseroni/pipes.sh contributors\nCopyright (c) 2013-2015 Yu-Jie Lin\nCopyright (c) 2010 Matthew Simpson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.9677734375,
          "content": "SCRIPT  = pipes.sh\nMANPAGE = $(SCRIPT).6\nGEN_MAN = scripts/gen-man-html.sh\n\nPREFIX  = /usr/local\nDESTDIR =\nINSTDIR = $(DESTDIR)$(PREFIX)\nINSTBIN = $(INSTDIR)/bin\nINSTMAN = $(INSTDIR)/share/man/man6\n\n\nall:\n\t@echo did nothing. try targets: install, or uninstall.\n.PHONY: all\n\n\n# this target is intended for an HTML version of manpage to be displayed on\n# GitHub Pages, so if there is a such named directory, it will also copy the\n# generated HTML to the directory.\n$(MANPAGE).html: $(MANPAGE) $(GEN_MAN)\n\tTZ=UTC $(GEN_MAN) $(MANPAGE) $@\n\ttest -d gh-pages && cp -a $@ gh-pages/ || true\n\n\nclean:\n\t$(RM) $(MANPAGE).html\n.PHONY: clean\n\n\ntest:\n\ttest/run_tests.sh\n.PHONY: test\n\n\ninstall:\n\ttest -d $(INSTDIR) || mkdir -p $(INSTDIR)\n\ttest -d $(INSTBIN) || mkdir -p $(INSTBIN)\n\ttest -d $(INSTMAN) || mkdir -p $(INSTMAN)\n\n\tinstall -m 0755 $(SCRIPT) $(INSTBIN)\n\tinstall -m 0644 $(MANPAGE) $(INSTMAN)\n.PHONY: install\n\n\nuninstall:\n\t$(RM) $(INSTBIN)/$(SCRIPT)\n\t$(RM) $(INSTMAN)/$(MANPAGE)\n.PHONY: uninstall\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 5.455078125,
          "content": "========\npipes.sh\n========\n\n  *Animated pipes terminal screensaver.*\n\n.. note on taking the screenshots\n\n  Font is Inconsolata, font size 24 as in 16x35 pixel per character\n\n  Image size is 640x210. A sample command, where terminal at +0+18,\n  window border is 2, terminal is urxvt, seems to 2 pixels as padding:\n\n  xsnap -region 640x210+$((2+2))+$((20+2)) -file i/pipes.png\n\n.. figure:: i/pipes.png\n  :target: screencast_\n\n  Screenshot of pipes.sh, click to watch a screencast_ on YouTube.\n\n.. _screencast: http://youtu.be/q_nYfR6CVEY\n\n.. contents:: **Contents**\n   :local:\n   :backlinks: top\n\n\nRequirements\n============\n\n* Bash 4+ since version 1.0.0.\n\n* ncurses for ``tput``\n\n  * >= 6.1 (2018-01-27) for 24-bit colors and ``TERM=*-direct``.\n\n\nInstallation\n============\n\nIf you want to install, you can run:\n\n.. code:: sh\n\n  $ make install\n\nBy default, it installs to ``/usr/local``; for user home, you can run:\n\n.. code:: sh\n\n  $ make PREFIX=$HOME/.local install\n\nOr any ``PREFIX`` you prefer.\n\nThe ``Makefile`` also provides ``uninstall`` target.\n\nIf you are a `Homebrew <http://brew.sh>`_ user, you can install via:\n\n.. code-block:: sh\n\n    $ brew install pipes-sh\n\n\nOptions\n=======\n\nSee |pipes.sh(6)|_ for a full list of options.\n\n.. |pipes.sh(6)| replace:: ``pipes.sh(6)``\n.. _pipes.sh(6): https://pipeseroni.github.io/pipes.sh/pipes.sh.6.html\n\n\n``-t [#]``: pipe types\n----------------------\n\n.. note on taking the screenshots\n\n  Font is Inconsolata, font size 24 as in 16x35 pixel per character\n\n  Image size is 480x140. A sample command, where terminal at +0+18,\n  window border is 2, terminal is urxvt, seems to 2 pixels as padding:\n\n  xsnap -region 480x140+$((2+2))+$((20+2)) -file i/pipes.t#.png\n\n+----------+------------------------+----------------------------+\n| ``-t #`` | Characters             | Screenshots                |\n+==========+========================+============================+\n| ``-t 0`` | ``┃┏ ┓┛━┓  ┗┃┛┗ ┏━``   | .. figure:: i/pipes.t0.png |\n+----------+------------------------+----------------------------+\n| ``-t 1`` | ``│╭ ╮╯─╮  ╰│╯╰ ╭─``   | .. figure:: i/pipes.t1.png |\n+----------+------------------------+----------------------------+\n| ``-t 2`` | ``│┌ ┐┘─┐  └│┘└ ┌─``   | .. figure:: i/pipes.t2.png |\n+----------+------------------------+----------------------------+\n| ``-t 3`` | ``║╔ ╗╝═╗  ╚║╝╚ ╔═``   | .. figure:: i/pipes.t3.png |\n+----------+------------------------+----------------------------+\n| ``-t 4`` | ``|+ ++-+  +|++ +-``   | .. figure:: i/pipes.t4.png |\n+----------+------------------------+----------------------------+\n| ``-t 5`` | ``|/ \\/-\\  \\|/\\ /-``   | .. figure:: i/pipes.t5.png |\n+----------+------------------------+----------------------------+\n| ``-t 6`` | ``.. ....  .... ..``   | .. figure:: i/pipes.t6.png |\n+----------+------------------------+----------------------------+\n| ``-t 7`` | ``.o oo.o  o.oo o.``   | .. figure:: i/pipes.t7.png |\n+----------+------------------------+----------------------------+\n| ``-t 8`` | | ``-\\ /\\|/  /-\\/ \\|`` | .. figure:: i/pipes.t8.png |\n|          | | (railway)            |                            |\n+----------+------------------------+----------------------------+\n| ``-t 9`` | | ``╿┍ ┑┚╼┒  ┕╽┙┖ ┎╾`` | .. figure:: i/pipes.t9.png |\n|          | | (knobby)             |                            |\n+----------+------------------------+----------------------------+\n\n\n``-t c[16 chars]``: custom pipe\n-------------------------------\n\nFor example, ``-t cMAYFORCEBWITHYOU``.\n\n.. note on taking the screenshot\n\n  Font is Inconsolata, font size 24 as in 16x35 pixel per character\n\n  Image size is 640x140. A sample command, where terminal at +0+18,\n  window border is 2, terminal is urxvt, seems to 2 pixels as padding:\n\n  xsnap -region 640x140+$((2+2))+$((20+2)) -file i/pipes.tc.png\n\n.. figure:: i/pipes.tc.png\n\n\nControls\n========\n\nPress any key to exit the program, except the following :kbd:`Shift` +\n:kbd:`Key`:\n\n===================  ======================================================\nKeys                 Actions\n===================  ======================================================\n:kbd:`P` / :kbd:`O`  Increase/decrease probability of straight pipes\n:kbd:`F` / :kbd:`D`  Increase/decrease frame rate\n:kbd:`B`             Toggle bold effect\n:kbd:`C`             Toggle no colors\n:kbd:`K`             Toggle keeping pipe color and type when crossing edges\n===================  ======================================================\n\n\nHistory\n=======\n\n(Read full history_  in |pipes.sh(6)|_)\n\n.. _history: https://pipeseroni.github.io/pipes.sh/pipes.sh.6.html#HISTORY\n\npipes.sh was originally created by Matthew Simpson and posted to the `Arch\nLinux Forums`__ in early 2010. It was also later posted to Gist__ released in\nthe public domain.\n\n__ https://bbs.archlinux.org/viewtopic.php?pid=728932#p728932\n__ https://gist.github.com/msimpson/1096939\n\nIn 2015, the MIT License was added and the Pipeseroni_ collective was formed to\nmaintain pipes.sh.\n\n.. _Pipeseroni: https://pipeseroni.github.io/\n\n\nReporting an Issue\n==================\n\n* `Reporting a bug`__\n\n__ https://github.com/pipeseroni/pipes.sh/issues/new?template=BUG.md&title=Brief+bug+summary\n\n\nContribution\n============\n\nFeel free to fork and/or create pull request following the guideline_. If\nyou're contributing, remember your changes will be released under the MIT\nlicense.\n\n.. _guideline: CONTRIBUTING.rst\n\n\nCopyright\n=========\n\npipes.sh is licensed under the MIT License.\n"
        },
        {
          "name": "i",
          "type": "tree",
          "content": null
        },
        {
          "name": "pipes.sh",
          "type": "blob",
          "size": 11.0595703125,
          "content": "#!/usr/bin/env bash\n# pipes.sh: Animated pipes terminal screensaver.\n# https://github.com/pipeseroni/pipes.sh\n#\n# Copyright (c) 2015-2018 Pipeseroni/pipes.sh contributors\n# Copyright (c) 2013-2015 Yu-Jie Lin\n# Copyright (c) 2010 Matthew Simpson\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\n\nVERSION=1.3.0\n\nM=32768  # Bash RANDOM maximum + 1\np=1      # number of pipes\nf=75     # frame rate\ns=13     # probability of straight fitting\nr=2000   # characters limit\nt=0      # iteration counter for -r character limit\nw=80     # terminal size\nh=24\n\n# ab -> sets[][idx] = a*4 + b\n# 0: up, 1: right, 2: down, 3: left\n# 00 means going up   , then going up   -> ┃\n# 12 means going right, then going down -> ┓\nsets=(\n    \"┃┏ ┓┛━┓  ┗┃┛┗ ┏━\"\n    \"│╭ ╮╯─╮  ╰│╯╰ ╭─\"\n    \"│┌ ┐┘─┐  └│┘└ ┌─\"\n    \"║╔ ╗╝═╗  ╚║╝╚ ╔═\"\n    \"|+ ++-+  +|++ +-\"\n    \"|/ \\/-\\  \\|/\\ /-\"\n    \".. ....  .... ..\"\n    \".o oo.o  o.oo o.\"\n    \"-\\ /\\|/  /-\\/ \\|\"  # railway\n    \"╿┍ ┑┚╼┒  ┕╽┙┖ ┎╾\"  # knobby pipe\n)\nSETS=()  # rearranged all pipe chars into individul elements for easier access\n\n# pipes'\nx=()  # current position\ny=()\nl=()  # current directions\n      # 0: up, 1: right, 2: down, 3: left\nn=()  # new directions\nv=()  # current types\nc=()  # current escape codes\n\n# selected pipes'\nV=()  # types (indexes to sets[])\nC=()  # color indices for tput setaf\nVN=0  # number of selected types\nCN=0  # number of selected colors\nE=()  # pre-generated escape codes from BOLD, NOCOLOR, and C\n\n# switches\nRNDSTART=0  # randomize starting position and direction\nBOLD=1\nNOCOLOR=0\nKEEPCT=0    # keep pipe color and type\n\n\n# print help message in 72-char width\nprint_help() {\n    local cgap\n    printf -v cgap '%*s' $((15 - ${#COLORS})) ''\n    cat <<HELP\nUsage: $(basename $0) [OPTION]...\nAnimated pipes terminal screensaver.\n\n  -p [1-]               number of pipes (D=1)\n  -t [0-$((${#sets[@]} - 1))]              pipe type (D=0)\n  -t c[16 chars]        custom pipe type\n  -c [0-$COLORS]${cgap}pipe color INDEX (TERM=$TERM), can be\n                        hexadecimal with '#' prefix\n                        (D=-c 1 -c 2 ... -c 7 -c 0)\n  -f [20-100]           framerate (D=75)\n  -s [5-15]             going straight probability, 1 in (D=13)\n  -r [0-]               reset after (D=2000) characters, 0 if no reset\n  -R                    randomize starting position and direction\n  -B                    no bold effect\n  -C                    no color\n  -K                    keep pipe color and type when crossing edges\n  -h                    print this help message\n  -v                    print version number\n\nNote: -t and -c can be used more than once.\nHELP\n}\n\n\n# parse command-line options\n# It depends on a valid COLORS which is set by _CP_init_termcap_vars\nparse() {\n    # test if $1 is a natural number in decimal, an integer >= 0\n    is_N() {\n        [[ -n $1 && -z ${1//[0-9]} ]]\n    }\n\n\n    # test if $1 is a hexadecimal string\n    is_hex() {\n        [[ -n $1 && -z ${1//[0-9A-Fa-f]} ]]\n    }\n\n\n    # print error message for invalid argument to standard error, this\n    # - mimics getopts error message\n    # - use all positional parameters as error message\n    # - has a newline appended\n    # $arg and $OPTARG are the option name and argument set by getopts.\n    pearg() {\n        printf \"%s: -$arg invalid argument -- $OPTARG; %s\\n\" \"$0\" \"$*\" >&2\n    }\n\n\n    OPTIND=1\n    while getopts \"p:t:c:f:s:r:RBCKhv\" arg; do\n    case $arg in\n        p)\n            if is_N \"$OPTARG\" && ((OPTARG > 0)); then\n                p=$OPTARG\n            else\n                pearg 'must be an integer and greater than 0'\n                return 1\n            fi\n            ;;\n        t)\n            if [[ \"$OPTARG\" = c???????????????? ]]; then\n                V+=(${#sets[@]})\n                sets+=(\"${OPTARG:1}\")\n            elif is_N \"$OPTARG\" && ((OPTARG < ${#sets[@]})); then\n                V+=($OPTARG)\n            else\n                pearg 'must be an integer and from 0 to' \\\n                      \"$((${#sets[@]} - 1)); or a custom type\"\n                return 1\n            fi\n            ;;\n        c)\n            if [[ $OPTARG == '#'* ]]; then\n                if ! is_hex \"${OPTARG:1}\"; then\n                    pearg 'unrecognized hexadecimal string'\n                    return 1\n                fi\n                if ((16$OPTARG >= COLORS)); then\n                    pearg 'hexadecimal must be from #0 to' \\\n                          \"#$(printf '%X' $((COLORS - 1)))\"\n                    return 1\n                fi\n                C+=($((16$OPTARG)))\n            elif is_N \"$OPTARG\" && ((OPTARG < COLORS)); then\n                C+=($OPTARG)\n            else\n                pearg \"must be an integer and from 0 to $((COLORS - 1));\" \\\n                      'or a hexadecimal string with # prefix'\n                return 1\n            fi\n            ;;\n        f)\n            if is_N \"$OPTARG\" && ((OPTARG >= 20 && OPTARG <= 100)); then\n                f=$OPTARG\n            else\n                pearg 'must be an integer and from 20 to 100'\n                return 1\n            fi\n            ;;\n        s)\n            if is_N \"$OPTARG\" && ((OPTARG >= 5 && OPTARG <= 15)); then\n                s=$OPTARG\n            else\n                pearg 'must be an integer and from 5 to 15'\n                return 1\n            fi\n            ;;\n        r)\n            if is_N \"$OPTARG\"; then\n                r=$OPTARG\n            else\n                pearg 'must be a non-negative integer'\n                return 1\n            fi\n            ;;\n        R) RNDSTART=1;;\n        B) BOLD=0;;\n        C) NOCOLOR=1;;\n        K) KEEPCT=1;;\n        h)\n            print_help\n            exit 0\n            ;;\n        v) echo \"$(basename -- \"$0\") $VERSION\"\n            exit 0\n            ;;\n        *)\n            return 1\n        esac\n    done\n\n    shift $((OPTIND - 1))\n    if (($#)); then\n        printf \"$0: illegal arguments -- $*; no arguments allowed\\n\" >&2\n        return 1\n    fi\n}\n\n\ncleanup() {\n    # clear out standard input\n    read -t 0.001 && cat </dev/stdin>/dev/null\n\n    tput reset  # fix for konsole, see pipeseroni/pipes.sh#43\n    tput rmcup\n    tput cnorm\n    stty echo\n    printf \"$SGR0\"\n    exit 0\n}\n\n\nresize() {\n    w=$(tput cols) h=$(tput lines)\n}\n\n\ninit_pipes() {\n    # +_CP_init_pipes\n    local i\n\n    ci=$((KEEPCT ? 0 : CN * RANDOM / M))\n    vi=$((KEEPCT ? 0 : VN * RANDOM / M))\n    for ((i = 0; i < p; i++)); do\n        ((\n            n[i] = 0,\n            l[i] = RNDSTART ? RANDOM % 4 : 0,\n            x[i] = RNDSTART ? w * RANDOM / M : w / 2,\n            y[i] = RNDSTART ? h * RANDOM / M : h / 2,\n            v[i] = V[vi]\n        ))\n        c[i]=${E[ci]}\n        ((ci = (ci + 1) % CN, vi = (vi + 1) % VN))\n    done\n    # -_CP_init_pipes\n}\n\n\ninit_screen() {\n    stty -echo\n    tput smcup\n    tput civis\n    tput clear\n    trap cleanup HUP TERM\n\n    resize\n    trap resize SIGWINCH\n}\n\n\nmain() {\n    # simple pre-check of TERM, tput's error message should be enough\n    tput -T \"$TERM\" sgr0 >/dev/null || return $?\n\n    # +_CP_init_termcap_vars\n    COLORS=$(tput colors)  # COLORS - 1 == maximum color index for -c argument\n    SGR0=$(tput sgr0)\n    SGR_BOLD=$(tput bold)\n    # -_CP_init_termcap_vars\n\n    parse \"$@\" || return $?\n\n    # +_CP_init_VC\n    # set default values if not by options\n    ((${#V[@]})) || V=(0)\n    VN=${#V[@]}\n    ((${#C[@]})) || C=(1 2 3 4 5 6 7 0)\n    CN=${#C[@]}\n    # -_CP_init_VC\n\n    # +_CP_init_E\n    # generate E[] based on BOLD (SGR_BOLD), NOCOLOR, and C for each element in\n    # C, a corresponding element in E[] =\n    #   SGR0\n    #   + SGR_BOLD, if BOLD\n    #   + tput setaf C, if !NOCOLOR\n    local i\n    for ((i = 0; i < CN; i++)) {\n        E[i]=$SGR0\n        ((BOLD))    && E[i]+=$SGR_BOLD\n        ((NOCOLOR)) || E[i]+=$(tput setaf ${C[i]})\n    }\n    # -_CP_init_E\n\n    # +_CP_init_SETS\n    local i j\n    for ((i = 0; i < ${#sets[@]}; i++)) {\n        for ((j = 0; j < 16; j++)) {\n            SETS+=(\"${sets[i]:j:1}\")\n        }\n    }\n    unset i j\n    # -_CP_init_SETS\n\n    init_screen\n    init_pipes\n\n    # any key press exits the loop and this script\n    trap 'break 2' INT\n\n    local i\n    while REPLY=; do\n        read -t 0.0$((1000 / f)) -n 1 2>/dev/null\n        case \"$REPLY\" in\n            P) ((s = s <  15 ? s + 1 : s));;\n            O) ((s = s >   3 ? s - 1 : s));;\n            F) ((f = f < 100 ? f + 1 : f));;\n            D) ((f = f >  20 ? f - 1 : f));;\n            B) ((BOLD = (BOLD + 1) % 2));;\n            C) ((NOCOLOR = (NOCOLOR + 1) % 2));;\n            K) ((KEEPCT = (KEEPCT + 1) % 2));;\n            ?) break;;\n        esac\n        for ((i = 0; i < p; i++)); do\n            # New position:\n            # l[] direction = 0: up, 1: right, 2: down, 3: left\n            # +_CP_newpos\n            ((l[i] % 2)) && ((x[i] += -l[i] + 2, 1)) || ((y[i] += l[i] - 1))\n            # -_CP_newpos\n\n            # Loop on edges (change color on loop):\n            # +_CP_warp\n            ((!KEEPCT && (x[i] >= w || x[i] < 0 || y[i] >= h || y[i] < 0))) \\\n            && { c[i]=${E[CN * RANDOM / M]}; ((v[i] = V[VN * RANDOM / M])); }\n            ((x[i] = (x[i] + w) % w,\n              y[i] = (y[i] + h) % h))\n            # -_CP_warp\n\n            # new turning direction:\n            # $((s - 1)) in $s, going straight, therefore n[i] == l[i];\n            # and 1 in $s that pipe makes a right or left turn\n            #\n            #     s * RANDOM / M - 1 == 0\n            #     n[i] == -1\n            #  => n[i] == l[i] + 1 or l[i] - 1\n            # +_CP_newdir\n            ((\n                n[i] = s * RANDOM / M - 1,\n                n[i] = n[i] >= 0 ? l[i] : l[i] + (2 * (RANDOM % 2) - 1),\n                n[i] = (n[i] + 4) % 4\n            ))\n            # -_CP_newdir\n\n            # Print:\n            # +_CP_print\n            printf '\\e[%d;%dH%s%s'                      \\\n                   $((y[i] + 1)) $((x[i] + 1)) ${c[i]}  \\\n                   \"${SETS[v[i] * 16 + l[i] * 4 + n[i]]}\"\n            # -_CP_print\n            l[i]=${n[i]}\n        done\n        ((r > 0 && t * p >= r)) && tput reset && tput civis && t=0 || ((t++))\n    done\n\n    cleanup\n}\n\n\n# when being sourced, $0 == bash, only invoke main when they are the same\n[[ \"$0\" != \"$BASH_SOURCE\" ]] ||  main \"$@\"\n"
        },
        {
          "name": "pipes.sh.6",
          "type": "blob",
          "size": 4.9921875,
          "content": ".\\\" Manpage for pipes.sh\n.\\\" Report errors or typos to https://github.com/pipeseroni/pipes.sh\n.TH pipes.sh 6 \"25 Feb 2018\" \"1.3.0\" \"pipes.sh man page\"\n\n.SH NAME\npipes.sh \\- animated pipes terminal screensaver\n\n.SH SYNOPSIS\n.B pipes.sh\n[\\fIOPTION\\fR]...\n\n.SH DESCRIPTION\nA bash script which draws randomly pathed pipes over the terminal. Generally used either as a functional screensaver or for amusement.\n\n.SH OPTIONS\n.TP 5\n.B -p [1-]\nNumber of pipes. (default is 1)\n.TP\n.B -t [0-9]\nDetermines the type of pipes to be drawn. Multiple arguments can be used. (default is 0)\n\nDue to the manpage limitation, the following list describes types in text,\nplease see\n.UR https://github.com/pipeseroni/pipes.sh#-t--pipe-types\nREADME\n.UE\nfor actual Unicode characters and screenshots.\n.RS\n.TP\n.B -t 0\n\"BOX DRAWING HEAVY\"\n.TP\n.B -t 1\n\"BOX DRAWING LIGHT\" and \"BOX DRAWING LIGHT ARC\"\n.TP\n.B -t 2\n\"BOX DRAWING LIGHT\"\n.TP\n.B -t 3\n\"BOX DRAWING DOUBLE\"\n.TP\n.B -t 4\n\"|+ ++-+ +|++ +-\"\n.TP\n.B -t 5\n\"|/ \\\\/-\\\\ \\\\|/\\\\ /-\"\n.TP\n.B -t 6\n\".. .... .... ..\"\n.TP\n.B -t 7\n\".o oo.o o.oo o.\"\n.TP\n.B -t 8\n\"-\\\\ /\\\\|/ /-\\\\/ \\\\|\" (railway)\n.TP\n.B -t 9\n\"BOX DRAWING HEAVY AND LIGHT\" (knobby)\n.RE\n\n.TP\n.B -t c[16 chars]\nUse custom type of pipes.\n\nThe following table describes the order of characters and what they represent.\nFour of the characters are not applicable as the pipes does not perform a\n180-turn.\n.RS\n.TP\n.B Index\nGoing\n.TP\n.B 1\nStraight up\n.TP\n.B 2\nUp and going right\n.TP\n.B 3\nNot applicable (up and back down), use space\n.TP\n.B 4\nUp and going left\n.TP\n.B 5\nRight and going up\n.TP\n.B 6\nStright right\n.TP\n.B 7\nRight and going down\n.TP\n.B 8\nNot applicable (right and back left), use space\n.TP\n.B 9\nNot applicable (down and back up), use space\n.TP\n.B 10\nDown and going right\n.TP\n.B 11\nStraight down\n.TP\n.B 12\nDown and going left\n.TP\n.B 13\nLeft and going up\n.TP\n.B 14\nNot applicable (left and back right), use space\n.TP\n.B 15\nLeft and going down\n.TP\n.B 16\nStraight left\n.RE\n\n.TP\n.B -c [0-(COLORS-1)]\nColor index of pipes. Multiple arguments can be used. (default is 1 2 3 4 5 6 7\n0)\n\n\\fICOLORS\\fR is the available colors depending on \\fB$TERM\\fR capability.  For\nexamples, \\fBxterm\\fR has 8 colors, \\fBxterm-256color\\fR has 256 colors, and\n\\fBxterm-direct\\fR -- requires ncurses 6.1+ -- has 16,777,216 colors.\n\nThe color index is used to generate escape code using \\fBtput setaf\ncolor_index\\fR.\n\nFor 256 colors, you may use 0 to 255 as color index.  For 16,777,216 colors,\nthe index can be calculated with three color components,  R * 65536 + G * 256 +\nB (0 <= R, G, B < 256).\n\nYou can also use hexadecimal, for examples:\n.RS 8\n.TP 12\n-c\\fB#ffff\\fR\n# cyan color\n.TP\n-c\\fB#FFA500\\fR\n# orange color\n.TP\n-c\\fB#64\\fR\n# for 256color index 100\n.RE\n\n.RS\nSee also\n.UR https://en.wikipedia.org/wiki/ANSI_escape_code#Colors\nWikipedia\n.UE .\n.RE\n\n.TP\n.B -f [20-100]\nFrame rate. (default is 75)\n.TP\n.B -s [5-15]\nProbability of straight fitting. (default is 13)\n.TP\n.B -r [LIMIT]\nResets the drawing after [LIMIT] characters. If no limit is specified then it takes the value 0. (default is 2000) \n.TP\n.B -R\nRandomize starting position and direction.\n.TP\n.B -B\nNo bold effect.\n.TP\n.B -C\nNo color.\n.TP\n.B -K\nNo change of colors and types when hitting screen edges.\n.TP\n.B -h\nDisplays a help message.\n.TP\n.B -v\nPrints the version number.\n\n.SH KEYBOARD CONTROLS\nPress any key to quit pipes.sh, except the following \\fBShift\\fR + \\fBKey\\fR:\n.TP\n\\fBP\\fR / \\fBO\\fR\nIncrease/decrease probability of straight pipes\n.TP\n\\fBF\\fR / \\fBD\\fR\nIncrease/decrease frame rate\n.TP\n.B B\nToggle bold effect\n.TP\n.B C\nToggle no colors\n.TP\n.B K\nToggle keeping pipe color and type when crossing edges\n\n.SH HISTORY\n\\fIpipes.sh\\fR was originally created by Matthew Simpson and posted to the\n.UR https://bbs.archlinux.org/viewtopic.php?pid=728932#p728932\nArch Linux Forums\n.UE\nin early 2010. It was also later posted to\n.UR https://gist.github.com/msimpson/1096939\nGist\n.UE\nreleased in the public domain.\n\nIn early 2013, Yu-Jie Lin posted a modification of the script to Gist after\nreading about it on a\n.UR https://inconsolation.wordpress.com/2013/02/01/pipes-sh-a-little-bit-of-fun/\nblog\n.UE .\nIt was maintained on Gist independently for a period of a few months.\n\nIn 2014, the script was given its own GitHub repository as a project which\nencouraged contributions from other developers. As the project gained more\npopularity the decision was made to combine forces with developers of similar\nprojects.\n\nFinally in 2015, the MIT License was added and the Pipeseroni collective was\nformed (see \\fBLINKS\\fR below) to maintain the project.\n\n.SH LINKS\n.UR https://pipeseroni.github.io/\n\\fBWebsite\\fR\n.UE\n\n.UR https://github.com/pipeseroni/pipes.sh\n\\fBRepository\\fR\n.UE\n\n.SH BUGS\nPlease see current issues on\n.UR https://github.com/pipeseroni/pipes.sh/issues\nissue tracker\n.UE ,\nand report any bugs or request feature you'd like.\n\n.SH AUTHORS\n.UR https://github.com/pipeseroni/pipes.sh/graphs/contributors\nPipeseroni/pipes.sh contributors\n.UE .\n\n.SH COPYRIGHT\nCopyright (c) 2010-2018 Pipeseroni/pipes.sh contributors.\n\n\\fIpipes.sh\\fR is licensed under the MIT License, see LICENSE file.\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}