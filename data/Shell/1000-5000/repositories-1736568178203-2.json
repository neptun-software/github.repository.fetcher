{
  "metadata": {
    "timestamp": 1736568178203,
    "page": 2,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "appleboy/ssh-action",
      "stars": 4948,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".goreleaser.yaml",
          "type": "blob",
          "size": 0.65234375,
          "content": "builds:\n  - # If true, skip the build.\n    # Useful for library projects.\n    # Default is false\n    skip: true\n\nchangelog:\n  use: github\n  groups:\n    - title: Features\n      regexp: \"^.*feat[(\\\\w)]*:+.*$\"\n      order: 0\n    - title: \"Bug fixes\"\n      regexp: \"^.*fix[(\\\\w)]*:+.*$\"\n      order: 1\n    - title: \"Enhancements\"\n      regexp: \"^.*chore[(\\\\w)]*:+.*$\"\n      order: 2\n    - title: \"Refactor\"\n      regexp: \"^.*refactor[(\\\\w)]*:+.*$\"\n      order: 3\n    - title: \"Build process updates\"\n      regexp: ^.*?(build|ci)(\\(.+\\))??!?:.+$\n      order: 4\n    - title: \"Documentation updates\"\n      regexp: ^.*?docs?(\\(.+\\))??!?:.+$\n      order: 4\n    - title: Others\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2019 Bo-Yi Wu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.4990234375,
          "content": "# 🚀 SSH for GitHub Actions\n\n[繁體中文](./README.zh-tw.md) | [简体中文](./README.zh-cn.md)\n\n[GitHub Action](https://github.com/features/actions) for executing remote SSH commands.\n\n![ssh workflow](./images/ssh-workflow.png)\n\n[![testing main branch](https://github.com/appleboy/ssh-action/actions/workflows/main.yml/badge.svg)](https://github.com/appleboy/ssh-action/actions/workflows/main.yml)\n\nThis project is built using [Golang](https://go.dev) and [drone-ssh](https://github.com/appleboy/drone-ssh). 🚀\n\n## Input variables\n\nSee [action.yml](./action.yml) for more detailed information.\n\n| Input Parameter           | Description                                                                              | Default Value |\n| ------------------------- | ---------------------------------------------------------------------------------------- | ------------- |\n| host                      | SSH host address                                                                         |               |\n| port                      | SSH port number                                                                          | 22            |\n| passphrase                | SSH key passphrase                                                                       |               |\n| username                  | SSH username                                                                             |               |\n| password                  | SSH password                                                                             |               |\n| protocol                  | SSH protocol version (tcp, tcp4, tcp6)                                                   | tcp           |\n| sync                      | Enable synchronous execution if multiple hosts                                           | false         |\n| use_insecure_cipher       | Include more ciphers with use_insecure_cipher                                            | false         |\n| cipher                    | Allowed cipher algorithms. If unspecified, a sensible default                            |               |\n| timeout                   | Timeout duration for SSH to host                                                         | 30s           |\n| command_timeout           | Timeout duration for SSH command                                                         | 10m           |\n| key                       | Content of SSH private key. e.g., raw content of ~/.ssh/id_rsa                           |               |\n| key_path                  | Path of SSH private key                                                                  |               |\n| fingerprint               | SHA256 fingerprint of the host public key                                                |               |\n| proxy_host                | SSH proxy host                                                                           |               |\n| proxy_port                | SSH proxy port                                                                           | 22            |\n| proxy_protocol            | SSH proxy protocol version (tcp, tcp4, tcp6)                                             | tcp           |\n| proxy_username            | SSH proxy username                                                                       |               |\n| proxy_password            | SSH proxy password                                                                       |               |\n| proxy_passphrase          | SSH proxy key passphrase                                                                 |               |\n| proxy_timeout             | Timeout for SSH to proxy host                                                            | 30s           |\n| proxy_key                 | Content of SSH proxy private key                                                         |               |\n| proxy_key_path            | Path of SSH proxy private key                                                            |               |\n| proxy_fingerprint         | SHA256 fingerprint of the proxy host public key                                          |               |\n| proxy_cipher              | Allowed cipher algorithms for the proxy                                                  |               |\n| proxy_use_insecure_cipher | Include more ciphers with use_insecure_cipher for the proxy                              | false         |\n| script                    | Execute commands                                                                         |               |\n| script_path               | Execute commands from a file                                                             |               |\n| envs                      | Pass environment variables to shell script                                               |               |\n| envs_format               | Flexible configuration of environment value transfer                                     |               |\n| debug                     | Enable debug mode                                                                        | false         |\n| allenvs                   | Pass the environment variables with prefix value of `GITHUB_` and `INPUT_` to the script | false         |\n| request_pty               | Request a pseudo-terminal from the server                                                | false         |\n\n## Usage\n\nExecuting remote SSH commands.\n\n```yaml\nname: remote ssh command\non: [push]\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - name: executing remote ssh commands using password\n        uses: appleboy/ssh-action@v1.2.0\n        with:\n          host: ${{ secrets.HOST }}\n          username: linuxserver.io\n          password: ${{ secrets.PASSWORD }}\n          port: ${{ secrets.PORT }}\n          script: whoami\n```\n\noutput:\n\n```sh\n======CMD======\nwhoami\n======END======\nlinuxserver.io\n===============================================\n✅ Successfully executed commands to all hosts.\n===============================================\n```\n\n### Setting up a SSH Key\n\nMake sure to follow the below steps while creating SSH Keys and using them.\nThe best practice is create the SSH Keys on local machine not remote machine.\nLogin with username specified in Github Secrets. Generate a RSA Key-Pair:\n\n### Generate rsa key\n\n```bash\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n```\n\n### Generate ed25519 key\n\n```bash\nssh-keygen -t ed25519 -a 200 -C \"your_email@example.com\"\n```\n\nAdd newly generated key into Authorized keys. Read more about authorized keys [here](https://www.ssh.com/ssh/authorized_keys/).\n\n### Add rsa key into Authorized keys\n\n```bash\ncat .ssh/id_rsa.pub | ssh b@B 'cat >> .ssh/authorized_keys'\n```\n\n### Add ed25519 key into Authorized keys\n\n```bash\ncat .ssh/id_ed25519.pub | ssh b@B 'cat >> .ssh/authorized_keys'\n```\n\nCopy Private Key content and paste in Github Secrets.\n\n### Copy rsa Private key\n\nBefore copying the private key, install `clip` command as shown below:\n\n```bash\n# Ubuntu\nsudo apt-get install xclip\n```\n\ncopy the private key:\n\n```bash\n# macOS\npbcopy < ~/.ssh/id_rsa\n# Ubuntu\nxclip < ~/.ssh/id_rsa\n```\n\n### Copy ed25519 Private key\n\n```bash\n# macOS\npbcopy < ~/.ssh/id_ed25519\n# Ubuntu\nxclip < ~/.ssh/id_ed25519\n```\n\nSee the detail information about [SSH login without password](http://www.linuxproblem.org/art_9.html).\n\n**A note** from one of our readers: Depending on your version of SSH you might also have to do the following changes:\n\n- Put the public key in `.ssh/authorized_keys2`\n- Change the permissions of `.ssh` to 700\n- Change the permissions of `.ssh/authorized_keys2` to 640\n\n### If you are using OpenSSH\n\nIf you are currently using OpenSSH and are getting the following error:\n\n```bash\nssh: handshake failed: ssh: unable to authenticate, attempted methods [none publickey]\n```\n\nMake sure that your key algorithm of choice is supported. On Ubuntu 20.04 or later you must explicitly allow the use of the ssh-rsa algorithm. Add the following line to your OpenSSH daemon file (which is either `/etc/ssh/sshd_config` or a drop-in file under `/etc/ssh/sshd_config.d/`):\n\n```bash\nCASignatureAlgorithms +ssh-rsa\n```\n\nAlternatively, `ed25519` keys are accepted by default in OpenSSH. You could use this instead of rsa if needed:\n\n```bash\nssh-keygen -t ed25519 -a 200 -C \"your_email@example.com\"\n```\n\n### Example\n\n#### Executing remote ssh commands using password\n\n```yaml\n- name: executing remote ssh commands using password\n  uses: appleboy/ssh-action@v1.2.0\n  with:\n    host: ${{ secrets.HOST }}\n    username: ${{ secrets.USERNAME }}\n    password: ${{ secrets.PASSWORD }}\n    port: ${{ secrets.PORT }}\n    script: whoami\n```\n\n#### Using private key\n\n```yaml\n- name: executing remote ssh commands using ssh key\n  uses: appleboy/ssh-action@v1.2.0\n  with:\n    host: ${{ secrets.HOST }}\n    username: ${{ secrets.USERNAME }}\n    key: ${{ secrets.KEY }}\n    port: ${{ secrets.PORT }}\n    script: whoami\n```\n\n#### Multiple Commands\n\n```yaml\n- name: multiple command\n  uses: appleboy/ssh-action@v1.2.0\n  with:\n    host: ${{ secrets.HOST }}\n    username: ${{ secrets.USERNAME }}\n    key: ${{ secrets.KEY }}\n    port: ${{ secrets.PORT }}\n    script: |\n      whoami\n      ls -al\n```\n\n![result](./images/output-result.png)\n\n#### Commands from a file\n\n```yaml\n- name: file commands\n  uses: appleboy/ssh-action@v1.2.0\n  with:\n    host: ${{ secrets.HOST }}\n    username: ${{ secrets.USERNAME }}\n    key: ${{ secrets.KEY }}\n    port: ${{ secrets.PORT }}\n    script_path: scripts/script.sh\n```\n\n#### Multiple Hosts\n\n```diff\n  - name: multiple host\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n-     host: \"foo.com\"\n+     host: \"foo.com,bar.com\"\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n      script: |\n        whoami\n        ls -al\n```\n\nThe default value of `port` is `22`.\n\n#### Multiple hosts with different port\n\n```diff\n  - name: multiple host\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n-     host: \"foo.com\"\n+     host: \"foo.com:1234,bar.com:5678\"\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      script: |\n        whoami\n        ls -al\n```\n\n#### Synchronous execution on multiple hosts\n\n```diff\n  - name: multiple host\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n      host: \"foo.com,bar.com\"\n+     sync: true\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n      script: |\n        whoami\n        ls -al\n```\n\n#### Pass environment variable to shell script\n\n```diff\n  - name: pass environment\n    uses: appleboy/ssh-action@v1.2.0\n+   env:\n+     FOO: \"BAR\"\n+     BAR: \"FOO\"\n+     SHA: ${{ github.sha }}\n    with:\n      host: ${{ secrets.HOST }}\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n+     envs: FOO,BAR,SHA\n      script: |\n        echo \"I am $FOO\"\n        echo \"I am $BAR\"\n        echo \"sha: $SHA\"\n```\n\n_Inside `env` object, you need to pass every environment variable as a string, passing `Integer` data type or any other may output unexpected results._\n\n#### How to connect remote server using `ProxyCommand`?\n\n```bash\n+--------+       +----------+      +-----------+\n| Laptop | <-->  | Jumphost | <--> | FooServer |\n+--------+       +----------+      +-----------+\n```\n\nin your `~/.ssh/config`, you will see the following.\n\n```bash\nHost Jumphost\n  HostName Jumphost\n  User ubuntu\n  Port 22\n  IdentityFile ~/.ssh/keys/jump_host.pem\n\nHost FooServer\n  HostName FooServer\n  User ubuntu\n  Port 22\n  ProxyCommand ssh -q -W %h:%p Jumphost\n```\n\n#### How to convert to YAML format of GitHubActions\n\n```diff\n  - name: ssh proxy command\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n      host: ${{ secrets.HOST }}\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n+     proxy_host: ${{ secrets.PROXY_HOST }}\n+     proxy_username: ${{ secrets.PROXY_USERNAME }}\n+     proxy_key: ${{ secrets.PROXY_KEY }}\n+     proxy_port: ${{ secrets.PROXY_PORT }}\n      script: |\n        mkdir abc/def\n        ls -al\n```\n\n#### Protecting a Private Key\n\nThe purpose of the passphrase is usually to encrypt the private key.\nThis makes the key file by itself useless to an attacker.\nIt is not uncommon for files to leak from backups or decommissioned hardware, and hackers commonly exfiltrate files from compromised systems.\n\n```diff\n  - name: ssh key passphrase\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n      host: ${{ secrets.HOST }}\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n+     passphrase: ${{ secrets.PASSPHRASE }}\n      script: |\n        whoami\n        ls -al\n```\n\n#### Using host fingerprint verification\n\nSetting up SSH host fingerprint verification can help to prevent Person-in-the-Middle attacks. Before setting this up, run the command below to get your SSH host fingerprint. Remember to replace `ed25519` with your appropriate key type (`rsa`, `dsa`, etc.) that your server is using and `example.com` with your host.\n\nIn modern OpenSSH releases, the _default_ key types to be fetched are `rsa` (since version 5.1), `ecdsa` (since version 6.0), and `ed25519` (since version 6.7).\n\n```sh\nssh example.com ssh-keygen -l -f /etc/ssh/ssh_host_ed25519_key.pub | cut -d ' ' -f2\n```\n\nNow you can adjust you config:\n\n```diff\n  - name: ssh key passphrase\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n      host: ${{ secrets.HOST }}\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n+     fingerprint: ${{ secrets.FINGERPRINT }}\n      script: |\n        whoami\n        ls -al\n```\n\n## Q&A\n\n### Command not found (npm or other command)\n\nSee the [issue comment](https://github.com/appleboy/ssh-action/issues/31#issuecomment-1006565847) about interactive vs non interactive shell. Thanks @kocyigityunus for the solution.\n\nBasically, if you are running a command in a non interactive shell, like ssh-action, on many linux distros,\n\n`/etc/bash.bashrc` file has a specific command that returns only, so some of the files didn't run and some specific commands doesn't add to path,\n\n```sh\n# /etc/bash.bashrc\n# System-wide .bashrc file for interactive bash(1) shells.\n\n# To enable the settings / commands in this file for login shells as well,\n# this file has to be sourced in /etc/profile.\n\n# If not running interactively, don't do anything\n[ -z \"$PS1\" ] && return`\n```\n\njust comment out the line that returns early and everything should work fine, or you can use the real paths of the commands that you would like to use.\n\n## Contributing\n\nWe would love for you to contribute to `appleboy/ssh-action`, pull requests are welcome!\n\n## License\n\nThe scripts and documentation in this project are released under the [MIT License](LICENSE)\n"
        },
        {
          "name": "README.zh-cn.md",
          "type": "blob",
          "size": 12.0927734375,
          "content": "# 🚀 用于 GitHub Actions 的 SSH\n\n[English](./README.md) | [繁體中文](./README.zh-tw.md)\n\n[GitHub Action](https://github.com/features/actions) 用于执行远程 SSH 命令。\n\n![ssh workflow](./images/ssh-workflow.png)\n\n[![testing main branch](https://github.com/appleboy/ssh-action/actions/workflows/main.yml/badge.svg)](https://github.com/appleboy/ssh-action/actions/workflows/main.yml)\n\n该项目使用 [Golang](https://go.dev) 和 [drone-ssh](https://github.com/appleboy/drone-ssh) 构建。🚀\n\n## 输入变量\n\n更详细的信息，请参考 [action.yml](./action.yml)。\n\n| 输入参数                  | 描述                                                  | 默认值 |\n| ------------------------- | ----------------------------------------------------- | ------ |\n| host                      | SSH 主机地址                                          |        |\n| port                      | SSH 端口号                                            | 22     |\n| passphrase                | SSH 密钥密码短语                                      |        |\n| username                  | SSH 用户名                                            |        |\n| password                  | SSH 密码                                              |        |\n| protocol                  | SSH 协议版本（tcp, tcp4, tcp6）                       | tcp    |\n| sync                      | 如果有多个主机，启用同步执行                          | false  |\n| use_insecure_cipher       | 使用不安全的密码算法                                  | false  |\n| cipher                    | 允许的密码算法。如果未指定，则使用适当的算法          |        |\n| timeout                   | SSH 连接到主机的超时时间                              | 30s    |\n| command_timeout           | SSH 命令的超时时间                                    | 10m    |\n| key                       | SSH 私钥的内容，例如 ~/.ssh/id_rsa 的原始内容         |        |\n| key_path                  | SSH 私钥的路径                                        |        |\n| fingerprint               | 主机公钥的 SHA256 指纹                                |        |\n| proxy_host                | SSH 代理主机                                          |        |\n| proxy_port                | SSH 代理端口                                          | 22     |\n| proxy_protocol            | SSH 代理协议版本（tcp, tcp4, tcp6）                   | tcp    |\n| proxy_username            | SSH 代理用户名                                        |        |\n| proxy_password            | SSH 代理密码                                          |        |\n| proxy_passphrase          | SSH 代理密钥密码短语                                  |        |\n| proxy_timeout             | SSH 连接到代理主机的超时时间                          | 30s    |\n| proxy_key                 | SSH 代理私钥的内容                                    |        |\n| proxy_key_path            | SSH 代理私钥的路径                                    |        |\n| proxy_fingerprint         | 代理主机公钥的 SHA256 指纹                            |        |\n| proxy_cipher              | 代理允许的密码算法                                    |        |\n| proxy_use_insecure_cipher | 使用不安全的密码算法                                  | false  |\n| script                    | 执行命令                                              |        |\n| script_path               | 从文件执行命令                                        |        |\n| envs                      | 传递环境变量到 shell 脚本                             |        |\n| envs_format               | 环境变量传递的灵活配置                                |        |\n| debug                     | 启用调试模式                                          | false  |\n| allenvs                   | 将带有 `GITHUB_` 和 `INPUT_` 前缀的环境变量传递给脚本 | false  |\n| request_pty               | 请求伪终端                                            | false  |\n\n## 使用方法\n\n执行远程 SSH 命令\n\n```yaml\nname: remote ssh command\non: [push]\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - name: executing remote ssh commands using password\n        uses: appleboy/ssh-action@v1.2.0\n        with:\n          host: ${{ secrets.HOST }}\n          username: ${{ secrets.USERNAME }}\n          password: ${{ secrets.PASSWORD }}\n          port: ${{ secrets.PORT }}\n          script: whoami\n```\n\n画面输出\n\n```sh\n======CMD======\nwhoami\n======END======\nout: ***\n===============================================\n✅ Successfully executed commands to all hosts.\n===============================================\n```\n\n### 设置 SSH 密钥\n\n请在创建 SSH 密钥并使用 SSH 密钥时遵循以下步骤。最佳做法是在本地机器上创建 SSH 密钥而不是远程机器上。请使用 Github Secrets 中指定的用户名登录。生成 RSA 密钥：\n\n### 生成 RSA 密钥\n\n```bash\nssh-keygen -t rsa -b 4096 -C ”your_email@example.com“\n```\n\n### 生成 ed25519 密钥\n\n```bash\nssh-keygen -t ed25519 -a 200 -C ”your_email@example.com“\n```\n\n将新生成的密钥添加到已授权的密钥中。详细了解已授权的密钥请点[此处](https://www.ssh.com/ssh/authorized_keys/)。\n\n### 将 RSA 密钥添加到已授权密钥中\n\n```bash\ncat .ssh/id_rsa.pub | ssh b@B ’cat >> .ssh/authorized_keys‘\n```\n\n### 将 ed25519 密钥添加到已授权密钥中\n\n```bash\ncat .ssh/id_ed25519.pub | ssh b@B ’cat >> .ssh/authorized_keys‘\n```\n\n复制私钥内容，然后将其粘贴到 Github Secrets 中。\n\n### 复制 rsa 私钥内容\n\n```bash\nclip < ~/.ssh/id_rsa\n```\n\n### 复制 ed25519 私钥内容\n\n```bash\nclip < ~/.ssh/id_ed25519\n```\n\n有关无需密码登录 SSH 的详细信息，请[见该网站](http://www.linuxproblem.org/art_9.html)。\n\n**来自读者的注意事项**： 根据您的 SSH 版本，您可能还需要进行以下更改：\n\n- 将公钥放在 `.ssh/authorized_keys2` 中\n- 将 `.ssh` 的权限更改为 700\n- 将 `.ssh/authorized_keys2` 的权限更改为 640\n\n### 如果你使用的是 OpenSSH\n\n如果您正在使用 OpenSSH，并出现以下错误：\n\n```bash\nssh: handshake failed: ssh: unable to authenticate, attempted methods [none publickey]\n```\n\n请确保您所选择的密钥算法得到支持。在 Ubuntu 20.04 或更高版本上，您必须明确允许使用 SSH-RSA 算法。请在 OpenSSH 守护进程文件中添加以下行（它可以是 `/etc/ssh/sshd_config` 或 `/etc/ssh/sshd_config.d/` 中的一个附加文件）：\n\n```bash\nCASignatureAlgorithms +ssh-rsa\n```\n\n或者，`Ed25519` 密钥在 OpenSSH 中默认被接受。如果需要，您可以使用它来替代 RSA。\n\n```bash\nssh-keygen -t ed25519 -a 200 -C ”your_email@example.com“\n```\n\n### Example\n\n#### 使用密码执行远程 SSH 命令\n\n```yaml\n- name: executing remote ssh commands using password\n  uses: appleboy/ssh-action@v1.2.0\n  with:\n    host: ${{ secrets.HOST }}\n    username: ${{ secrets.USERNAME }}\n    password: ${{ secrets.PASSWORD }}\n    port: ${{ secrets.PORT }}\n    script: whoami\n```\n\n#### 使用私钥\n\n```yaml\n- name: executing remote ssh commands using ssh key\n  uses: appleboy/ssh-action@v1.2.0\n  with:\n    host: ${{ secrets.HOST }}\n    username: ${{ secrets.USERNAME }}\n    key: ${{ secrets.KEY }}\n    port: ${{ secrets.PORT }}\n    script: whoami\n```\n\n#### 多个命令\n\n```yaml\n- name: multiple command\n  uses: appleboy/ssh-action@v1.2.0\n  with:\n    host: ${{ secrets.HOST }}\n    username: ${{ secrets.USERNAME }}\n    key: ${{ secrets.KEY }}\n    port: ${{ secrets.PORT }}\n    script: |\n      whoami\n      ls -al\n```\n\n![result](./images/output-result.png)\n\n#### 多台主机\n\n```diff\n  - name: multiple host\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n-     host: ”foo.com“\n+     host: ”foo.com,bar.com“\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n      script: |\n        whoami\n        ls -al\n```\n\n#### Commands from a file\n\n```yaml\n- name: file commands\n  uses: appleboy/ssh-action@v1.2.0\n  with:\n    host: ${{ secrets.HOST }}\n    username: ${{ secrets.USERNAME }}\n    key: ${{ secrets.KEY }}\n    port: ${{ secrets.PORT }}\n    script_path: scripts/script.sh\n```\n\n#### 多个不同端口的主机\n\n```diff\n  - name: multiple host\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n-     host: ”foo.com“\n+     host: ”foo.com:1234,bar.com:5678“\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      script: |\n        whoami\n        ls -al\n```\n\n#### 在多台主机上同步执行\n\n```diff\n  - name: multiple host\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n      host: ”foo.com,bar.com“\n+     sync: true\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n      script: |\n        whoami\n        ls -al\n```\n\n#### 将环境变量传递到 Shell 脚本\n\n```diff\n  - name: pass environment\n    uses: appleboy/ssh-action@v1.2.0\n+   env:\n+     FOO: ”BAR“\n+     BAR: ”FOO“\n+     SHA: ${{ github.sha }}\n    with:\n      host: ${{ secrets.HOST }}\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n+     envs: FOO,BAR,SHA\n      script: |\n        echo ”I am $FOO“\n        echo ”I am $BAR“\n        echo ”sha: $SHA“\n```\n\n_在 `env` 对象中，您需要将每个环境变量作为字符串传递，传递 `Integer` 数据类型或任何其他类型可能会产生意外结果。_\n\n#### 如何使用 `ProxyCommand` 连接远程服务器？\n\n```bash\n+———+       +-———+      +————+\n| Laptop | <—>  | Jumphost | <—> | FooServer |\n+———+       +-———+      +————+\n```\n\n在您的 `~/.ssh/config` 文件中，您会看到以下内容。\n\n```bash\nHost Jumphost\n  HostName Jumphost\n  User ubuntu\n  Port 22\n  IdentityFile ~/.ssh/keys/jump_host.pem\n\nHost FooServer\n  HostName FooServer\n  User ubuntu\n  Port 22\n  ProxyCommand ssh -q -W %h:%p Jumphost\n```\n\n#### 如何将其转换为 GitHubActions 的 YAML 格式？\n\n```diff\n  - name: ssh proxy command\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n      host: ${{ secrets.HOST }}\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n+     proxy_host: ${{ secrets.PROXY_HOST }}\n+     proxy_username: ${{ secrets.PROXY_USERNAME }}\n+     proxy_key: ${{ secrets.PROXY_KEY }}\n+     proxy_port: ${{ secrets.PROXY_PORT }}\n      script: |\n        mkdir abc/def\n        ls -al\n```\n\n#### 如何保护私钥？\n\n密码短语通常用于加密私钥。这使得攻击者无法单独使用密钥文件。文件泄露可能来自备份或停用的硬件，黑客通常可以从受攻击系统中泄露文件。因此，保护私钥非常重要。\n\n```diff\n  - name: ssh key passphrase\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n      host: ${{ secrets.HOST }}\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n+     passphrase: ${{ secrets.PASSPHRASE }}\n      script: |\n        whoami\n        ls -al\n```\n\n#### 使用主机指纹验证\n\n设置 SSH 主机指纹验证可以帮助防止中间人攻击。在设置之前，运行以下命令以获取 SSH 主机指纹。请记得将 `ed25519` 替换为您适当的密钥类型（`rsa`、 `dsa`等），而 `example.com` 则替换为您的主机。\n\n现代 OpenSSH 版本中，需要提取的**默认密钥**类型是 `rsa`（从版本 5.1 开始）、`ecdsa`（从版本 6.0 开始）和 `ed25519`（从版本 6.7 开始）。\n\n```sh\nssh example.com ssh-keygen -l -f /etc/ssh/ssh_host_ed25519_key.pub | cut -d ’ ‘ -f2\n```\n\n现在您可以调整您的配置：\n\n```diff\n  - name: ssh key passphrase\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n      host: ${{ secrets.HOST }}\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n+     fingerprint: ${{ secrets.FINGERPRINT }}\n      script: |\n        whoami\n        ls -al\n```\n\n## 贡献\n\n我们非常希望您为 `appleboy/ssh-action` 做出贡献，欢迎提交请求！\n\n## 授权方式\n\n本项目中的脚本和文档采用 [MIT](LICENSE) 许可证 发布。\n"
        },
        {
          "name": "README.zh-tw.md",
          "type": "blob",
          "size": 12.0322265625,
          "content": "# 🚀 GitHub Actions 的 SSH\n\n[English](./README.md) | [简体中文](./README.zh-cn.md)\n\n[GitHub Action](https://github.com/features/actions) 用於執行遠端 SSH 命令。\n\n![ssh workflow](./images/ssh-workflow.png)\n\n[![testing main branch](https://github.com/appleboy/ssh-action/actions/workflows/main.yml/badge.svg)](https://github.com/appleboy/ssh-action/actions/workflows/main.yml)\n\n此專案使用 [Golang](https://go.dev) 和 [drone-ssh](https://github.com/appleboy/drone-ssh) 建立。🚀\n\n## 輸入變數\n\n請參閱 [action.yml](./action.yml) 以獲取更詳細的信息。\n\n| 輸入參數                  | 描述                                                  | 預設值 |\n| ------------------------- | ----------------------------------------------------- | ------ |\n| host                      | SSH 主機地址                                          |        |\n| port                      | SSH 埠號                                              | 22     |\n| passphrase                | SSH 金鑰密碼                                          |        |\n| username                  | SSH 使用者名稱                                        |        |\n| password                  | SSH 密碼                                              |        |\n| protocol                  | SSH 協議版本 (tcp, tcp4, tcp6)                        | tcp    |\n| sync                      | 如果有多個主機，啟用同步執行                          | false  |\n| use_insecure_cipher       | 包含更多不安全的加密算法                              | false  |\n| cipher                    | 允許的加密算法。如果未指定，則使用合理的預設值        |        |\n| timeout                   | SSH 連接主機的超時時間                                | 30s    |\n| command_timeout           | SSH 命令的超時時間                                    | 10m    |\n| key                       | SSH 私鑰的內容。例如，~/.ssh/id_rsa 的原始內容        |        |\n| key_path                  | SSH 私鑰的路徑                                        |        |\n| fingerprint               | 主機公鑰的 SHA256 指紋                                |        |\n| proxy_host                | SSH 代理主機                                          |        |\n| proxy_port                | SSH 代理埠號                                          | 22     |\n| proxy_protocol            | SSH 代理協議版本 (tcp, tcp4, tcp6)                    | tcp    |\n| proxy_username            | SSH 代理使用者名稱                                    |        |\n| proxy_password            | SSH 代理密碼                                          |        |\n| proxy_passphrase          | SSH 代理金鑰密碼                                      |        |\n| proxy_timeout             | SSH 連接代理主機的超時時間                            | 30s    |\n| proxy_key                 | SSH 代理私鑰的內容                                    |        |\n| proxy_key_path            | SSH 代理私鑰的路徑                                    |        |\n| proxy_fingerprint         | 代理主機公鑰的 SHA256 指紋                            |        |\n| proxy_cipher              | 代理允許的加密算法                                    |        |\n| proxy_use_insecure_cipher | 包含更多不安全的加密算法                              | false  |\n| script                    | 執行命令                                              |        |\n| script_path               | 從文件中執行命令                                      |        |\n| envs                      | 將環境變數傳遞給 shell 腳本                           |        |\n| envs_format               | 環境值傳遞的靈活配置                                  |        |\n| debug                     | 啟用調試模式                                          | false  |\n| allenvs                   | 將帶有 `GITHUB_` 和 `INPUT_` 前綴的環境變數傳遞給腳本 | false  |\n| request_pty               | 從伺服器請求偽終端                                    | false  |\n\n## 用法\n\n執行遠端 SSH 命令\n\n```yaml\nname: remote ssh command\non: [push]\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - name: executing remote ssh commands using password\n        uses: appleboy/ssh-action@v1.2.0\n        with:\n          host: ${{ secrets.HOST }}\n          username: ${{ secrets.USERNAME }}\n          password: ${{ secrets.PASSWORD }}\n          port: ${{ secrets.PORT }}\n          script: whoami\n```\n\n畫面輸出\n\n```sh\n======CMD======\nwhoami\n======END======\nout: ***\n===============================================\n✅ Successfully executed commands to all hosts.\n===============================================\n```\n\n### 設置 SSH 金鑰\n\n請在創建 SSH 金鑰並使用 SSH 金鑰時遵循以下步驟。最佳做法是在本地機器上創建 SSH 金鑰而不是遠端機器上。請使用 Github Secrets 中指定的用戶名登錄。生成 RSA 金鑰：\n\n### 生成 RSA 金鑰\n\n```bash\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n```\n\n### 生成 ed25519 金鑰\n\n```bash\nssh-keygen -t ed25519 -a 200 -C \"your_email@example.com\"\n```\n\n將新生成的金鑰添加到已授權的金鑰中。詳細了解已授權的金鑰請點擊[此處](https://www.ssh.com/ssh/authorized_keys/).\n\n### 將 RSA 金鑰添加到已授權金鑰中\n\n```bash\ncat .ssh/id_rsa.pub | ssh b@B 'cat >> .ssh/authorized_keys'\n```\n\n### 將 ed25519 金鑰添加到已授權金鑰中\n\n```bash\ncat .ssh/id_ed25519.pub | ssh b@B 'cat >> .ssh/authorized_keys'\n```\n\n複製私鑰內容，然後將其粘貼到 Github Secrets 中。\n\n### 複製 rsa 私鑰內容\n\n```bash\nclip < ~/.ssh/id_rsa\n```\n\n### 複製 ed25519 私鑰內容\n\n```bash\nclip < ~/.ssh/id_ed25519\n```\n\n有關無需密碼登錄 SSH 的詳細信息，請[參見該網站](http://www.linuxproblem.org/art_9.html)。\n\n**來自讀者的注意事項**： 根據您的 SSH 版本，您可能還需要進行以下更改：\n\n- 將公鑰放在 `.ssh/authorized_keys2` 中\n- 將 `.ssh` 的權限更改為 700\n- 將 `.ssh/authorized_keys2` 的權限更改為 640\n\n### 如果你使用的是 OpenSSH\n\n如果您正在使用 OpenSSH，並出現以下錯誤：\n\n```bash\nssh: handshake failed: ssh: unable to authenticate, attempted methods [none publickey]\n```\n\n請確保您所選擇的密鑰演算法得到支援。在 Ubuntu 20.04 或更高版本上，您必須明確允許使用 SSH-RSA 演算法。請在 OpenSSH 守護進程文件中添加以下行（它可以是 `/etc/ssh/sshd_config` 或 `/etc/ssh/sshd_config.d/` 中的一個附著文件）：\n\n```bash\nCASignatureAlgorithms +ssh-rsa\n```\n\n或者，`Ed25519` 密鑰在 OpenSSH 中默認被接受。如果需要，您可以使用它來替代 RSA。\n\n```bash\nssh-keygen -t ed25519 -a 200 -C \"your_email@example.com\"\n```\n\n### Example\n\n#### 使用密碼執行遠端 SSH 命令\n\n```yaml\n- name: executing remote ssh commands using password\n  uses: appleboy/ssh-action@v1.2.0\n  with:\n    host: ${{ secrets.HOST }}\n    username: ${{ secrets.USERNAME }}\n    password: ${{ secrets.PASSWORD }}\n    port: ${{ secrets.PORT }}\n    script: whoami\n```\n\n#### 使用私鑰\n\n```yaml\n- name: executing remote ssh commands using ssh key\n  uses: appleboy/ssh-action@v1.2.0\n  with:\n    host: ${{ secrets.HOST }}\n    username: ${{ secrets.USERNAME }}\n    key: ${{ secrets.KEY }}\n    port: ${{ secrets.PORT }}\n    script: whoami\n```\n\n#### 多個命令\n\n```yaml\n- name: multiple command\n  uses: appleboy/ssh-action@v1.2.0\n  with:\n    host: ${{ secrets.HOST }}\n    username: ${{ secrets.USERNAME }}\n    key: ${{ secrets.KEY }}\n    port: ${{ secrets.PORT }}\n    script: |\n      whoami\n      ls -al\n```\n\n![result](./images/output-result.png)\n\n#### Commands from a file\n\n```yaml\n- name: file commands\n  uses: appleboy/ssh-action@v1.2.0\n  with:\n    host: ${{ secrets.HOST }}\n    username: ${{ secrets.USERNAME }}\n    key: ${{ secrets.KEY }}\n    port: ${{ secrets.PORT }}\n    script_path: scripts/script.sh\n```\n\n#### 多台主機\n\n```diff\n  - name: multiple host\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n-     host: \"foo.com\"\n+     host: \"foo.com,bar.com\"\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n      script: |\n        whoami\n        ls -al\n```\n\n#### 多個不同端口的主機\n\n```diff\n  - name: multiple host\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n-     host: \"foo.com\"\n+     host: \"foo.com:1234,bar.com:5678\"\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      script: |\n        whoami\n        ls -al\n```\n\n#### 在多個主機上同步執行\n\n```diff\n  - name: multiple host\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n      host: \"foo.com,bar.com\"\n+     sync: true\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n      script: |\n        whoami\n        ls -al\n```\n\n#### 將環境變量傳遞到 Shell 腳本\n\n```diff\n  - name: pass environment\n    uses: appleboy/ssh-action@v1.2.0\n+   env:\n+     FOO: \"BAR\"\n+     BAR: \"FOO\"\n+     SHA: ${{ github.sha }}\n    with:\n      host: ${{ secrets.HOST }}\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n+     envs: FOO,BAR,SHA\n      script: |\n        echo \"I am $FOO\"\n        echo \"I am $BAR\"\n        echo \"sha: $SHA\"\n```\n\n_在 `env` 對象中，您需要將每個環境變量作為字符串傳遞，傳遞 `Integer` 數據類型或任何其他類型可能會產生意外結果。_\n\n#### 如何使用 `ProxyCommand` 連接遠程服務器？\n\n```bash\n+--------+       +----------+      +-----------+\n| Laptop | <-->  | Jumphost | <--> | FooServer |\n+--------+       +----------+      +-----------+\n```\n\n在您的 `~/.ssh/config` 文件中，您會看到以下內容。\n\n```bash\nHost Jumphost\n  HostName Jumphost\n  User ubuntu\n  Port 22\n  IdentityFile ~/.ssh/keys/jump_host.pem\n\nHost FooServer\n  HostName FooServer\n  User ubuntu\n  Port 22\n  ProxyCommand ssh -q -W %h:%p Jumphost\n```\n\n#### 如何將其轉換為 GitHubActions 的 YAML 格式？\n\n```diff\n  - name: ssh proxy command\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n      host: ${{ secrets.HOST }}\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n+     proxy_host: ${{ secrets.PROXY_HOST }}\n+     proxy_username: ${{ secrets.PROXY_USERNAME }}\n+     proxy_key: ${{ secrets.PROXY_KEY }}\n+     proxy_port: ${{ secrets.PROXY_PORT }}\n      script: |\n        mkdir abc/def\n        ls -al\n```\n\n#### 如何保護私鑰？\n\n密碼短語通常用於加密私鑰。這使得攻擊者無法單獨使用密鑰文件。文件泄露可能來自備份或停用的硬件，黑客通常可以從受攻擊系統中洩露文件。因此，保護私鑰非常重要。\n\n```diff\n  - name: ssh key passphrase\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n      host: ${{ secrets.HOST }}\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n+     passphrase: ${{ secrets.PASSPHRASE }}\n      script: |\n        whoami\n        ls -al\n```\n\n#### 使用主機指紋驗證\n\n設置 SSH 主機指紋驗證可以幫助防止中間人攻擊。在設置之前，運行以下命令以獲取 SSH 主機指紋。請記得將 `ed25519` 替換為您的適當金鑰類型（`rsa`、 `dsa`等），而 `example.com` 則替換為您的主機。\n\n現代 OpenSSH 版本中，需要提取的**默認金鑰**類型是 `rsa`（從版本 5.1 開始）、`ecdsa`（從版本 6.0 開始）和 `ed25519`（從版本 6.7 開始）。\n\n```sh\nssh example.com ssh-keygen -l -f /etc/ssh/ssh_host_ed25519_key.pub | cut -d ' ' -f2\n```\n\n現在您可以調整您的配置：\n\n```diff\n  - name: ssh key passphrase\n    uses: appleboy/ssh-action@v1.2.0\n    with:\n      host: ${{ secrets.HOST }}\n      username: ${{ secrets.USERNAME }}\n      key: ${{ secrets.KEY }}\n      port: ${{ secrets.PORT }}\n+     fingerprint: ${{ secrets.FINGERPRINT }}\n      script: |\n        whoami\n        ls -al\n```\n\n## 貢獻\n\n我們非常希望您為 `appleboy/ssh-action` 做出貢獻，歡迎提交請求！\n\n## 授權方式\n\n本項目中的腳本和文檔采用 [MIT](LICENSE) 許可證 發布。\n"
        },
        {
          "name": "action.yml",
          "type": "blob",
          "size": 5.0419921875,
          "content": "name: \"SSH Remote Commands\"\ndescription: \"Executing remote ssh commands\"\nauthor: \"Bo-Yi Wu\"\ninputs:\n  host:\n    description: \"SSH host address.\"\n  port:\n    description: \"SSH port number.\"\n    default: \"22\"\n  passphrase:\n    description: \"Passphrase for the SSH key.\"\n  username:\n    description: \"SSH username.\"\n  password:\n    description: \"SSH password.\"\n  protocol:\n    description: 'The IP protocol to use. Valid values are \"tcp\". \"tcp4\" or \"tcp6\". Default to tcp.'\n    default: \"tcp\"\n  sync:\n    description: \"Enable synchronous execution if multiple hosts are involved.\"\n  use_insecure_cipher:\n    description: \"Include more ciphers by using insecure ciphers.\"\n  cipher:\n    description: \"Allowed cipher algorithms. If unspecified, a sensible default is used.\"\n  timeout:\n    description: \"Timeout duration for establishing SSH connection to the host.\"\n    default: \"30s\"\n  command_timeout:\n    description: \"Timeout duration for SSH commands execution.\"\n    default: \"10m\"\n  key:\n    description: \"Content of the SSH private key. For example, the raw content of ~/.ssh/id_rsa.\"\n  key_path:\n    description: \"Path to the SSH private key file.\"\n  fingerprint:\n    description: \"SHA256 fingerprint of the host public key.\"\n  proxy_host:\n    description: \"SSH proxy host address.\"\n  proxy_port:\n    description: \"SSH proxy port number.\"\n    default: \"22\"\n  proxy_username:\n    description: \"SSH proxy username.\"\n  proxy_password:\n    description: \"SSH proxy password.\"\n  proxy_protocol:\n    description: 'The IP protocol to use. Valid values are \"tcp\". \"tcp4\" or \"tcp6\". Default to tcp.'\n    default: \"tcp\"\n  proxy_passphrase:\n    description: \"SSH proxy key passphrase.\"\n  proxy_timeout:\n    description: \"Timeout duration for establishing SSH connection to the proxy host.\"\n    default: \"30s\"\n  proxy_key:\n    description: \"Content of the SSH proxy private key. For example, the raw content of ~/.ssh/id_rsa.\"\n  proxy_key_path:\n    description: \"Path to the SSH proxy private key file.\"\n  proxy_fingerprint:\n    description: \"SHA256 fingerprint of the proxy host public key.\"\n  proxy_cipher:\n    description: \"Allowed cipher algorithms for the proxy. If unspecified, a sensible default is used.\"\n  proxy_use_insecure_cipher:\n    description: \"Include more ciphers for the proxy by using insecure ciphers.\"\n  script:\n    description: \"Commands to be executed.\"\n  script_path:\n    description: \"Path to the file containing commands to be executed.\"\n  envs:\n    description: \"Environment variables to be passed to the shell script.\"\n  envs_format:\n    description: \"Flexible configuration for environment value transfer.\"\n  debug:\n    description: \"Enable debug mode.\"\n  allenvs:\n    description: \"pass all environment variable to shell script.\"\n  request_pty:\n    description: \"Request a pseudo-terminal from the server.\"\n  capture_stdout:\n    description: \"Capture the stdout of the commands.\"\n    default: \"false\"\n\noutputs:\n  stdout:\n    description: 'Standard output of the executed commands.'\n    value: ${{ steps.entrypoint.outputs.stdout }}\n\nruns:\n  using: \"composite\"\n  steps:\n    - name: Set GitHub Path\n      run: echo \"$GITHUB_ACTION_PATH\" >> $GITHUB_PATH\n      shell: bash\n      env:\n        GITHUB_ACTION_PATH: ${{ github.action_path }}\n    - id: entrypoint\n      name: Run entrypoint.sh\n      run: entrypoint.sh\n      shell: bash\n      env:\n        GITHUB_ACTION_PATH: ${{ github.action_path }}\n        INPUT_HOST: ${{ inputs.host }}\n        INPUT_PORT: ${{ inputs.port }}\n        INPUT_PROTOCOL: ${{ inputs.protocol }}\n        INPUT_USERNAME: ${{ inputs.username }}\n        INPUT_PASSWORD: ${{ inputs.password }}\n        INPUT_PASSPHRASE: ${{ inputs.passphrase }}\n        INPUT_KEY: ${{ inputs.key }}\n        INPUT_KEY_PATH: ${{ inputs.key_path }}\n        INPUT_FINGERPRINT: ${{ inputs.fingerprint }}\n        INPUT_PROXY_HOST: ${{ inputs.proxy_host }}\n        INPUT_PROXY_PORT: ${{ inputs.proxy_port }}\n        INPUT_PROXY_USERNAME: ${{ inputs.proxy_username }}\n        INPUT_PROXY_PASSWORD: ${{ inputs.proxy_password }}\n        INPUT_PROXY_PASSPHRASE: ${{ inputs.proxy_passphrase }}\n        INPUT_PROXY_KEY: ${{ inputs.proxy_key }}\n        INPUT_PROXY_KEY_PATH: ${{ inputs.proxy_key_path }}\n        INPUT_PROXY_FINGERPRINT: ${{ inputs.proxy_fingerprint }}\n        INPUT_TIMEOUT: ${{ inputs.timeout }}\n        INPUT_PROXY_TIMEOUT: ${{ inputs.proxy_timeout }}\n        INPUT_COMMAND_TIMEOUT: ${{ inputs.command_timeout }}\n        INPUT_SCRIPT: ${{ inputs.script }}\n        INPUT_SCRIPT_FILE: ${{ inputs.script_path }}\n        INPUT_ENVS: ${{ inputs.envs }}\n        INPUT_ENVS_FORMAT: ${{ inputs.envs_format }}\n        INPUT_DEBUG: ${{ inputs.debug }}\n        INPUT_ALL_ENVS: ${{ inputs.allenvs }}\n        INPUT_REQUEST_PTY: ${{ inputs.request_pty }}\n        INPUT_USE_INSECURE_CIPHER: ${{ inputs.use_insecure_cipher }}\n        INPUT_CIPHER: ${{ inputs.cipher }}\n        INPUT_PROXY_USE_INSECURE_CIPHER: ${{ inputs.proxy_use_insecure_cipher }}\n        INPUT_PROXY_CIPHER: ${{ inputs.proxy_cipher }}\n        INPUT_SYNC: ${{ inputs.sync }}\n        INPUT_CAPTURE_STDOUT: ${{ inputs.capture_stdout }}\n\nbranding:\n  icon: \"terminal\"\n  color: \"gray-dark\"\n"
        },
        {
          "name": "entrypoint.sh",
          "type": "blob",
          "size": 2.0390625,
          "content": "#!/usr/bin/env bash\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nexport GITHUB=\"true\"\n\nGITHUB_ACTION_PATH=\"${GITHUB_ACTION_PATH%/}\"\nDRONE_SSH_RELEASE_URL=\"${DRONE_SSH_RELEASE_URL:-https://github.com/appleboy/drone-ssh/releases/download}\"\nDRONE_SSH_VERSION=\"${DRONE_SSH_VERSION:-1.8.0}\"\n\nfunction detect_client_info() {\n  if [ -n \"${SSH_CLIENT_OS-}\" ]; then\n    CLIENT_PLATFORM=\"${SSH_CLIENT_OS}\"\n  else\n    local kernel\n    kernel=\"$(uname -s)\"\n    case \"${kernel}\" in\n    Darwin)\n      CLIENT_PLATFORM=\"darwin\"\n      ;;\n    Linux)\n      CLIENT_PLATFORM=\"linux\"\n      ;;\n    Windows)\n      CLIENT_PLATFORM=\"windows\"\n      ;;\n    *)\n      echo \"Unknown, unsupported platform: ${kernel}.\" >&2\n      echo \"Supported platforms: Linux, Darwin and Windows.\" >&2\n      echo \"Bailing out.\" >&2\n      exit 2\n      ;;\n    esac\n  fi\n\n  if [ -n \"${SSH_CLIENT_ARCH-}\" ]; then\n    CLIENT_ARCH=\"${SSH_CLIENT_ARCH}\"\n  else\n    local machine\n    machine=\"$(uname -m)\"\n    case \"${machine}\" in\n    x86_64* | i?86_64* | amd64*)\n      CLIENT_ARCH=\"amd64\"\n      ;;\n    aarch64* | arm64*)\n      CLIENT_ARCH=\"arm64\"\n      ;;\n    *)\n      echo \"Unknown, unsupported architecture (${machine}).\" >&2\n      echo \"Supported architectures x86_64, i686, arm64.\" >&2\n      echo \"Bailing out.\" >&2\n      exit 3\n      ;;\n    esac\n  fi\n}\n\ndetect_client_info\nDOWNLOAD_URL_PREFIX=\"${DRONE_SSH_RELEASE_URL}/v${DRONE_SSH_VERSION}\"\nCLIENT_BINARY=\"drone-ssh-${DRONE_SSH_VERSION}-${CLIENT_PLATFORM}-${CLIENT_ARCH}\"\nTARGET=\"${GITHUB_ACTION_PATH}/${CLIENT_BINARY}\"\necho \"Will download ${CLIENT_BINARY} from ${DOWNLOAD_URL_PREFIX}\"\ncurl -fsSL --retry 5 --keepalive-time 2 \"${DOWNLOAD_URL_PREFIX}/${CLIENT_BINARY}\" -o ${TARGET}\nchmod +x ${TARGET}\n\necho \"======= CLI Version =======\"\nsh -c \"${TARGET} --version\" # print version\necho \"===========================\"\nif [[ \"$INPUT_CAPTURE_STDOUT\" == 'true' ]]; then\n  echo 'stdout<<EOF' >> $GITHUB_OUTPUT # use heredoc for multiline output\n  sh -c \"${TARGET} $*\" | tee -a $GITHUB_OUTPUT # run the command\n  echo 'EOF' >> $GITHUB_OUTPUT\nelse\n  sh -c \"${TARGET} $*\" # run the command\nfi\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}