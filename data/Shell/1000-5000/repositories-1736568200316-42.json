{
  "metadata": {
    "timestamp": 1736568200316,
    "page": 42,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Nyr/wireguard-install",
      "stars": 4176,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.044921875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2020 Nyr\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.4609375,
          "content": "## wireguard-install\nWireGuard [road warrior](http://en.wikipedia.org/wiki/Road_warrior_%28computing%29) installer for Ubuntu, Debian, AlmaLinux, Rocky Linux, CentOS and Fedora.\n\nThis script will let you set up your own VPN server in no more than a minute, even if you haven't used WireGuard before. It has been designed to be as unobtrusive and universal as possible.\n\n### Installation\nRun the script and follow the assistant:\n\n`wget https://git.io/wireguard -O wireguard-install.sh && bash wireguard-install.sh`\n\nOnce it ends, you can run it again to add more users, remove some of them or even completely uninstall WireGuard.\n\n### I want to run my own VPN but don't have a server for that\nYou can get a VPS from just [2 EUR](https://alphavps.com/clients/cart.php?a=add&pid=457&aff=474&currency=1) or [2 USD](https://alphavps.com/clients/cart.php?a=add&pid=457&aff=474&currency=6) per month at [AlphaVPS](https://alphavps.com/clients/cart.php?a=add&pid=457&aff=474&currency=1).\n\n### Donations\nIf you want to show your appreciation, you can donate via [PayPal](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=VBAYDL34Z7J6L) or [cryptocurrency](https://pastebin.com/raw/M2JJpQpC). Thanks!\n\n### Sponsors\nThis project is proudly sponsored by our friends at [FrogeHost](https://froge.host/?utm_source=nyr).\n\nFor a commercial VPN with strong anti-censorship capabilities (最强翻墙VPN) from $1/month, check out [Clever VPN](https://www.clever-vpn.net/?wg-referral=01LOULuQoi)."
        },
        {
          "name": "wireguard-install.sh",
          "type": "blob",
          "size": 25.05859375,
          "content": "#!/bin/bash\n#\n# https://github.com/Nyr/wireguard-install\n#\n# Copyright (c) 2020 Nyr. Released under the MIT License.\n\n\n# Detect Debian users running the script with \"sh\" instead of bash\nif readlink /proc/$$/exe | grep -q \"dash\"; then\n\techo 'This installer needs to be run with \"bash\", not \"sh\".'\n\texit\nfi\n\n# Discard stdin. Needed when running from an one-liner which includes a newline\nread -N 999999 -t 0.001\n\n# Detect OS\n# $os_version variables aren't always in use, but are kept here for convenience\nif grep -qs \"ubuntu\" /etc/os-release; then\n\tos=\"ubuntu\"\n\tos_version=$(grep 'VERSION_ID' /etc/os-release | cut -d '\"' -f 2 | tr -d '.')\nelif [[ -e /etc/debian_version ]]; then\n\tos=\"debian\"\n\tos_version=$(grep -oE '[0-9]+' /etc/debian_version | head -1)\nelif [[ -e /etc/almalinux-release || -e /etc/rocky-release || -e /etc/centos-release ]]; then\n\tos=\"centos\"\n\tos_version=$(grep -shoE '[0-9]+' /etc/almalinux-release /etc/rocky-release /etc/centos-release | head -1)\nelif [[ -e /etc/fedora-release ]]; then\n\tos=\"fedora\"\n\tos_version=$(grep -oE '[0-9]+' /etc/fedora-release | head -1)\nelse\n\techo \"This installer seems to be running on an unsupported distribution.\nSupported distros are Ubuntu, Debian, AlmaLinux, Rocky Linux, CentOS and Fedora.\"\n\texit\nfi\n\nif [[ \"$os\" == \"ubuntu\" && \"$os_version\" -lt 2204 ]]; then\n\techo \"Ubuntu 22.04 or higher is required to use this installer.\nThis version of Ubuntu is too old and unsupported.\"\n\texit\nfi\n\nif [[ \"$os\" == \"debian\" ]]; then\n\tif grep -q '/sid' /etc/debian_version; then\n\t\techo \"Debian Testing and Debian Unstable are unsupported by this installer.\"\n\t\texit\n\tfi\n\tif [[ \"$os_version\" -lt 11 ]]; then\n\t\techo \"Debian 11 or higher is required to use this installer.\nThis version of Debian is too old and unsupported.\"\n\t\texit\n\tfi\nfi\n\nif [[ \"$os\" == \"centos\" && \"$os_version\" -lt 9 ]]; then\n\tos_name=$(sed 's/ release.*//' /etc/almalinux-release /etc/rocky-release /etc/centos-release 2>/dev/null | head -1)\n\techo \"$os_name 9 or higher is required to use this installer.\nThis version of $os_name is too old and unsupported.\"\n\texit\nfi\n\n# Detect environments where $PATH does not include the sbin directories\nif ! grep -q sbin <<< \"$PATH\"; then\n\techo '$PATH does not include sbin. Try using \"su -\" instead of \"su\".'\n\texit\nfi\n\n# Detect if BoringTun (userspace WireGuard) needs to be used\nif ! systemd-detect-virt -cq; then\n\t# Not running inside a container\n\tuse_boringtun=\"0\"\nelif grep -q '^wireguard ' /proc/modules; then\n\t# Running inside a container, but the wireguard kernel module is available\n\tuse_boringtun=\"0\"\nelse\n\t# Running inside a container and the wireguard kernel module is not available\n\tuse_boringtun=\"1\"\nfi\n\nif [[ \"$EUID\" -ne 0 ]]; then\n\techo \"This installer needs to be run with superuser privileges.\"\n\texit\nfi\n\nif [[ \"$use_boringtun\" -eq 1 ]]; then\n\tif [ \"$(uname -m)\" != \"x86_64\" ]; then\n\t\techo \"In containerized systems without the wireguard kernel module, this installer\nsupports only the x86_64 architecture.\nThe system runs on $(uname -m) and is unsupported.\"\n\t\texit\n\tfi\n\t# TUN device is required to use BoringTun\n\tif [[ ! -e /dev/net/tun ]] || ! ( exec 7<>/dev/net/tun ) 2>/dev/null; then\n\t\techo \"The system does not have the TUN device available.\nTUN needs to be enabled before running this installer.\"\n\t\texit\n\tfi\nfi\n\nnew_client_dns () {\n\techo \"Select a DNS server for the client:\"\n\techo \"   1) Current system resolvers\"\n\techo \"   2) Google\"\n\techo \"   3) 1.1.1.1\"\n\techo \"   4) OpenDNS\"\n\techo \"   5) Quad9\"\n\techo \"   6) AdGuard\"\n\tread -p \"DNS server [1]: \" dns\n\tuntil [[ -z \"$dns\" || \"$dns\" =~ ^[1-6]$ ]]; do\n\t\techo \"$dns: invalid selection.\"\n\t\tread -p \"DNS server [1]: \" dns\n\tdone\n\t\t# DNS\n\tcase \"$dns\" in\n\t\t1|\"\")\n\t\t\t# Locate the proper resolv.conf\n\t\t\t# Needed for systems running systemd-resolved\n\t\t\tif grep '^nameserver' \"/etc/resolv.conf\" | grep -qv '127.0.0.53' ; then\n\t\t\t\tresolv_conf=\"/etc/resolv.conf\"\n\t\t\telse\n\t\t\t\tresolv_conf=\"/run/systemd/resolve/resolv.conf\"\n\t\t\tfi\n\t\t\t# Extract nameservers and provide them in the required format\n\t\t\tdns=$(grep -v '^#\\|^;' \"$resolv_conf\" | grep '^nameserver' | grep -v '127.0.0.53' | grep -oE '[0-9]{1,3}(\\.[0-9]{1,3}){3}' | xargs | sed -e 's/ /, /g')\n\t\t;;\n\t\t2)\n\t\t\tdns=\"8.8.8.8, 8.8.4.4\"\n\t\t;;\n\t\t3)\n\t\t\tdns=\"1.1.1.1, 1.0.0.1\"\n\t\t;;\n\t\t4)\n\t\t\tdns=\"208.67.222.222, 208.67.220.220\"\n\t\t;;\n\t\t5)\n\t\t\tdns=\"9.9.9.9, 149.112.112.112\"\n\t\t;;\n\t\t6)\n\t\t\tdns=\"94.140.14.14, 94.140.15.15\"\n\t\t;;\n\tesac\n}\n\nnew_client_setup () {\n\t# Given a list of the assigned internal IPv4 addresses, obtain the lowest still\n\t# available octet. Important to start looking at 2, because 1 is our gateway.\n\toctet=2\n\twhile grep AllowedIPs /etc/wireguard/wg0.conf | cut -d \".\" -f 4 | cut -d \"/\" -f 1 | grep -q \"^$octet$\"; do\n\t\t(( octet++ ))\n\tdone\n\t# Don't break the WireGuard configuration in case the address space is full\n\tif [[ \"$octet\" -eq 255 ]]; then\n\t\techo \"253 clients are already configured. The WireGuard internal subnet is full!\"\n\t\texit\n\tfi\n\tkey=$(wg genkey)\n\tpsk=$(wg genpsk)\n\t# Configure client in the server\n\tcat << EOF >> /etc/wireguard/wg0.conf\n# BEGIN_PEER $client\n[Peer]\nPublicKey = $(wg pubkey <<< $key)\nPresharedKey = $psk\nAllowedIPs = 10.7.0.$octet/32$(grep -q 'fddd:2c4:2c4:2c4::1' /etc/wireguard/wg0.conf && echo \", fddd:2c4:2c4:2c4::$octet/128\")\n# END_PEER $client\nEOF\n\t# Create client configuration\n\tcat << EOF > ~/\"$client\".conf\n[Interface]\nAddress = 10.7.0.$octet/24$(grep -q 'fddd:2c4:2c4:2c4::1' /etc/wireguard/wg0.conf && echo \", fddd:2c4:2c4:2c4::$octet/64\")\nDNS = $dns\nPrivateKey = $key\n\n[Peer]\nPublicKey = $(grep PrivateKey /etc/wireguard/wg0.conf | cut -d \" \" -f 3 | wg pubkey)\nPresharedKey = $psk\nAllowedIPs = 0.0.0.0/0, ::/0\nEndpoint = $(grep '^# ENDPOINT' /etc/wireguard/wg0.conf | cut -d \" \" -f 3):$(grep ListenPort /etc/wireguard/wg0.conf | cut -d \" \" -f 3)\nPersistentKeepalive = 25\nEOF\n}\n\nif [[ ! -e /etc/wireguard/wg0.conf ]]; then\n\t# Detect some Debian minimal setups where neither wget nor curl are installed\n\tif ! hash wget 2>/dev/null && ! hash curl 2>/dev/null; then\n\t\techo \"Wget is required to use this installer.\"\n\t\tread -n1 -r -p \"Press any key to install Wget and continue...\"\n\t\tapt-get update\n\t\tapt-get install -y wget\n\tfi\n\tclear\n\techo 'Welcome to this WireGuard road warrior installer!'\n\t# If system has a single IPv4, it is selected automatically. Else, ask the user\n\tif [[ $(ip -4 addr | grep inet | grep -vEc '127(\\.[0-9]{1,3}){3}') -eq 1 ]]; then\n\t\tip=$(ip -4 addr | grep inet | grep -vE '127(\\.[0-9]{1,3}){3}' | cut -d '/' -f 1 | grep -oE '[0-9]{1,3}(\\.[0-9]{1,3}){3}')\n\telse\n\t\tnumber_of_ip=$(ip -4 addr | grep inet | grep -vEc '127(\\.[0-9]{1,3}){3}')\n\t\techo\n\t\techo \"Which IPv4 address should be used?\"\n\t\tip -4 addr | grep inet | grep -vE '127(\\.[0-9]{1,3}){3}' | cut -d '/' -f 1 | grep -oE '[0-9]{1,3}(\\.[0-9]{1,3}){3}' | nl -s ') '\n\t\tread -p \"IPv4 address [1]: \" ip_number\n\t\tuntil [[ -z \"$ip_number\" || \"$ip_number\" =~ ^[0-9]+$ && \"$ip_number\" -le \"$number_of_ip\" ]]; do\n\t\t\techo \"$ip_number: invalid selection.\"\n\t\t\tread -p \"IPv4 address [1]: \" ip_number\n\t\tdone\n\t\t[[ -z \"$ip_number\" ]] && ip_number=\"1\"\n\t\tip=$(ip -4 addr | grep inet | grep -vE '127(\\.[0-9]{1,3}){3}' | cut -d '/' -f 1 | grep -oE '[0-9]{1,3}(\\.[0-9]{1,3}){3}' | sed -n \"$ip_number\"p)\n\tfi\n\t# If $ip is a private IP address, the server must be behind NAT\n\tif echo \"$ip\" | grep -qE '^(10\\.|172\\.1[6789]\\.|172\\.2[0-9]\\.|172\\.3[01]\\.|192\\.168)'; then\n\t\techo\n\t\techo \"This server is behind NAT. What is the public IPv4 address or hostname?\"\n\t\t# Get public IP and sanitize with grep\n\t\tget_public_ip=$(grep -m 1 -oE '^[0-9]{1,3}(\\.[0-9]{1,3}){3}$' <<< \"$(wget -T 10 -t 1 -4qO- \"http://ip1.dynupdate.no-ip.com/\" || curl -m 10 -4Ls \"http://ip1.dynupdate.no-ip.com/\")\")\n\t\tread -p \"Public IPv4 address / hostname [$get_public_ip]: \" public_ip\n\t\t# If the checkip service is unavailable and user didn't provide input, ask again\n\t\tuntil [[ -n \"$get_public_ip\" || -n \"$public_ip\" ]]; do\n\t\t\techo \"Invalid input.\"\n\t\t\tread -p \"Public IPv4 address / hostname: \" public_ip\n\t\tdone\n\t\t[[ -z \"$public_ip\" ]] && public_ip=\"$get_public_ip\"\n\tfi\n\t# If system has a single IPv6, it is selected automatically\n\tif [[ $(ip -6 addr | grep -c 'inet6 [23]') -eq 1 ]]; then\n\t\tip6=$(ip -6 addr | grep 'inet6 [23]' | cut -d '/' -f 1 | grep -oE '([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}')\n\tfi\n\t# If system has multiple IPv6, ask the user to select one\n\tif [[ $(ip -6 addr | grep -c 'inet6 [23]') -gt 1 ]]; then\n\t\tnumber_of_ip6=$(ip -6 addr | grep -c 'inet6 [23]')\n\t\techo\n\t\techo \"Which IPv6 address should be used?\"\n\t\tip -6 addr | grep 'inet6 [23]' | cut -d '/' -f 1 | grep -oE '([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}' | nl -s ') '\n\t\tread -p \"IPv6 address [1]: \" ip6_number\n\t\tuntil [[ -z \"$ip6_number\" || \"$ip6_number\" =~ ^[0-9]+$ && \"$ip6_number\" -le \"$number_of_ip6\" ]]; do\n\t\t\techo \"$ip6_number: invalid selection.\"\n\t\t\tread -p \"IPv6 address [1]: \" ip6_number\n\t\tdone\n\t\t[[ -z \"$ip6_number\" ]] && ip6_number=\"1\"\n\t\tip6=$(ip -6 addr | grep 'inet6 [23]' | cut -d '/' -f 1 | grep -oE '([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}' | sed -n \"$ip6_number\"p)\n\tfi\n\techo\n\techo \"What port should WireGuard listen to?\"\n\tread -p \"Port [51820]: \" port\n\tuntil [[ -z \"$port\" || \"$port\" =~ ^[0-9]+$ && \"$port\" -le 65535 ]]; do\n\t\techo \"$port: invalid port.\"\n\t\tread -p \"Port [51820]: \" port\n\tdone\n\t[[ -z \"$port\" ]] && port=\"51820\"\n\techo\n\techo \"Enter a name for the first client:\"\n\tread -p \"Name [client]: \" unsanitized_client\n\t# Allow a limited lenght and set of characters to avoid conflicts\n\tclient=$(sed 's/[^0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-]/_/g' <<< \"$unsanitized_client\" | cut -c-15)\n\t[[ -z \"$client\" ]] && client=\"client\"\n\techo\n\tnew_client_dns\n\t# Set up automatic updates for BoringTun if the user is fine with that\n\tif [[ \"$use_boringtun\" -eq 1 ]]; then\n\t\techo\n\t\techo \"BoringTun will be installed to set up WireGuard in the system.\"\n\t\tread -p \"Should automatic updates be enabled for it? [Y/n]: \" boringtun_updates\n\t\tuntil [[ \"$boringtun_updates\" =~ ^[yYnN]*$ ]]; do\n\t\t\techo \"$remove: invalid selection.\"\n\t\t\tread -p \"Should automatic updates be enabled for it? [Y/n]: \" boringtun_updates\n\t\tdone\n\t\t[[ -z \"$boringtun_updates\" ]] && boringtun_updates=\"y\"\n\t\tif [[ \"$boringtun_updates\" =~ ^[yY]$ ]]; then\n\t\t\tif [[ \"$os\" == \"centos\" || \"$os\" == \"fedora\" ]]; then\n\t\t\t\tcron=\"cronie\"\n\t\t\telif [[ \"$os\" == \"debian\" || \"$os\" == \"ubuntu\" ]]; then\n\t\t\t\tcron=\"cron\"\n\t\t\tfi\n\t\tfi\n\tfi\n\techo\n\techo \"WireGuard installation is ready to begin.\"\n\t# Install a firewall if firewalld or iptables are not already available\n\tif ! systemctl is-active --quiet firewalld.service && ! hash iptables 2>/dev/null; then\n\t\tif [[ \"$os\" == \"centos\" || \"$os\" == \"fedora\" ]]; then\n\t\t\tfirewall=\"firewalld\"\n\t\t\t# We don't want to silently enable firewalld, so we give a subtle warning\n\t\t\t# If the user continues, firewalld will be installed and enabled during setup\n\t\t\techo \"firewalld, which is required to manage routing tables, will also be installed.\"\n\t\telif [[ \"$os\" == \"debian\" || \"$os\" == \"ubuntu\" ]]; then\n\t\t\t# iptables is way less invasive than firewalld so no warning is given\n\t\t\tfirewall=\"iptables\"\n\t\tfi\n\tfi\n\tread -n1 -r -p \"Press any key to continue...\"\n\t# Install WireGuard\n\t# If BoringTun is not required, set up with the WireGuard kernel module\n\tif [[ \"$use_boringtun\" -eq 0 ]]; then\n\t\tif [[ \"$os\" == \"ubuntu\" ]]; then\n\t\t\t# Ubuntu\n\t\t\tapt-get update\n\t\t\tapt-get install -y wireguard qrencode $firewall\n\t\telif [[ \"$os\" == \"debian\" ]]; then\n\t\t\t# Debian\n\t\t\tapt-get update\n\t\t\tapt-get install -y wireguard qrencode $firewall\n\t\telif [[ \"$os\" == \"centos\" ]]; then\n\t\t\t# CentOS\n\t\t\tdnf install -y epel-release\n\t\t\tdnf install -y wireguard-tools qrencode $firewall\n\t\telif [[ \"$os\" == \"fedora\" ]]; then\n\t\t\t# Fedora\n\t\t\tdnf install -y wireguard-tools qrencode $firewall\n\t\t\tmkdir -p /etc/wireguard/\n\t\tfi\n\t# Else, BoringTun needs to be used\n\telse\n\t\t# Install required packages\n\t\tif [[ \"$os\" == \"ubuntu\" ]]; then\n\t\t\t# Ubuntu\n\t\t\tapt-get update\n\t\t\tapt-get install -y qrencode ca-certificates $cron $firewall\n\t\t\tapt-get install -y wireguard-tools --no-install-recommends\n\t\telif [[ \"$os\" == \"debian\" ]]; then\n\t\t\t# Debian\n\t\t\tapt-get update\n\t\t\tapt-get install -y qrencode ca-certificates $cron $firewall\n\t\t\tapt-get install -y wireguard-tools --no-install-recommends\n\t\telif [[ \"$os\" == \"centos\" ]]; then\n\t\t\t# CentOS\n\t\t\tdnf install -y epel-release\n\t\t\tdnf install -y wireguard-tools qrencode ca-certificates tar $cron $firewall\n\t\telif [[ \"$os\" == \"fedora\" ]]; then\n\t\t\t# Fedora\n\t\t\tdnf install -y wireguard-tools qrencode ca-certificates tar $cron $firewall\n\t\t\tmkdir -p /etc/wireguard/\n\t\tfi\n\t\t# Grab the BoringTun binary using wget or curl and extract into the right place.\n\t\t# Don't use this service elsewhere without permission! Contact me before you do!\n\t\t{ wget -qO- https://wg.nyr.be/1/latest/download 2>/dev/null || curl -sL https://wg.nyr.be/1/latest/download ; } | tar xz -C /usr/local/sbin/ --wildcards 'boringtun-*/boringtun' --strip-components 1\n\t\t# Configure wg-quick to use BoringTun\n\t\tmkdir /etc/systemd/system/wg-quick@wg0.service.d/ 2>/dev/null\n\t\techo \"[Service]\nEnvironment=WG_QUICK_USERSPACE_IMPLEMENTATION=boringtun\nEnvironment=WG_SUDO=1\" > /etc/systemd/system/wg-quick@wg0.service.d/boringtun.conf\n\t\tif [[ -n \"$cron\" ]] && [[ \"$os\" == \"centos\" || \"$os\" == \"fedora\" ]]; then\n\t\t\tsystemctl enable --now crond.service\n\t\tfi\n\tfi\n\t# If firewalld was just installed, enable it\n\tif [[ \"$firewall\" == \"firewalld\" ]]; then\n\t\tsystemctl enable --now firewalld.service\n\tfi\n\t# Generate wg0.conf\n\tcat << EOF > /etc/wireguard/wg0.conf\n# Do not alter the commented lines\n# They are used by wireguard-install\n# ENDPOINT $([[ -n \"$public_ip\" ]] && echo \"$public_ip\" || echo \"$ip\")\n\n[Interface]\nAddress = 10.7.0.1/24$([[ -n \"$ip6\" ]] && echo \", fddd:2c4:2c4:2c4::1/64\")\nPrivateKey = $(wg genkey)\nListenPort = $port\n\nEOF\n\tchmod 600 /etc/wireguard/wg0.conf\n\t# Enable net.ipv4.ip_forward for the system\n\techo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/99-wireguard-forward.conf\n\t# Enable without waiting for a reboot or service restart\n\techo 1 > /proc/sys/net/ipv4/ip_forward\n\tif [[ -n \"$ip6\" ]]; then\n\t\t# Enable net.ipv6.conf.all.forwarding for the system\n\t\techo \"net.ipv6.conf.all.forwarding=1\" >> /etc/sysctl.d/99-wireguard-forward.conf\n\t\t# Enable without waiting for a reboot or service restart\n\t\techo 1 > /proc/sys/net/ipv6/conf/all/forwarding\n\tfi\n\tif systemctl is-active --quiet firewalld.service; then\n\t\t# Using both permanent and not permanent rules to avoid a firewalld\n\t\t# reload.\n\t\tfirewall-cmd --add-port=\"$port\"/udp\n\t\tfirewall-cmd --zone=trusted --add-source=10.7.0.0/24\n\t\tfirewall-cmd --permanent --add-port=\"$port\"/udp\n\t\tfirewall-cmd --permanent --zone=trusted --add-source=10.7.0.0/24\n\t\t# Set NAT for the VPN subnet\n\t\tfirewall-cmd --direct --add-rule ipv4 nat POSTROUTING 0 -s 10.7.0.0/24 ! -d 10.7.0.0/24 -j SNAT --to \"$ip\"\n\t\tfirewall-cmd --permanent --direct --add-rule ipv4 nat POSTROUTING 0 -s 10.7.0.0/24 ! -d 10.7.0.0/24 -j SNAT --to \"$ip\"\n\t\tif [[ -n \"$ip6\" ]]; then\n\t\t\tfirewall-cmd --zone=trusted --add-source=fddd:2c4:2c4:2c4::/64\n\t\t\tfirewall-cmd --permanent --zone=trusted --add-source=fddd:2c4:2c4:2c4::/64\n\t\t\tfirewall-cmd --direct --add-rule ipv6 nat POSTROUTING 0 -s fddd:2c4:2c4:2c4::/64 ! -d fddd:2c4:2c4:2c4::/64 -j SNAT --to \"$ip6\"\n\t\t\tfirewall-cmd --permanent --direct --add-rule ipv6 nat POSTROUTING 0 -s fddd:2c4:2c4:2c4::/64 ! -d fddd:2c4:2c4:2c4::/64 -j SNAT --to \"$ip6\"\n\t\tfi\n\telse\n\t\t# Create a service to set up persistent iptables rules\n\t\tiptables_path=$(command -v iptables)\n\t\tip6tables_path=$(command -v ip6tables)\n\t\t# nf_tables is not available as standard in OVZ kernels. So use iptables-legacy\n\t\t# if we are in OVZ, with a nf_tables backend and iptables-legacy is available.\n\t\tif [[ $(systemd-detect-virt) == \"openvz\" ]] && readlink -f \"$(command -v iptables)\" | grep -q \"nft\" && hash iptables-legacy 2>/dev/null; then\n\t\t\tiptables_path=$(command -v iptables-legacy)\n\t\t\tip6tables_path=$(command -v ip6tables-legacy)\n\t\tfi\n\t\techo \"[Unit]\nBefore=network.target\n[Service]\nType=oneshot\nExecStart=$iptables_path -t nat -A POSTROUTING -s 10.7.0.0/24 ! -d 10.7.0.0/24 -j SNAT --to $ip\nExecStart=$iptables_path -I INPUT -p udp --dport $port -j ACCEPT\nExecStart=$iptables_path -I FORWARD -s 10.7.0.0/24 -j ACCEPT\nExecStart=$iptables_path -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\nExecStop=$iptables_path -t nat -D POSTROUTING -s 10.7.0.0/24 ! -d 10.7.0.0/24 -j SNAT --to $ip\nExecStop=$iptables_path -D INPUT -p udp --dport $port -j ACCEPT\nExecStop=$iptables_path -D FORWARD -s 10.7.0.0/24 -j ACCEPT\nExecStop=$iptables_path -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\" > /etc/systemd/system/wg-iptables.service\n\t\tif [[ -n \"$ip6\" ]]; then\n\t\t\techo \"ExecStart=$ip6tables_path -t nat -A POSTROUTING -s fddd:2c4:2c4:2c4::/64 ! -d fddd:2c4:2c4:2c4::/64 -j SNAT --to $ip6\nExecStart=$ip6tables_path -I FORWARD -s fddd:2c4:2c4:2c4::/64 -j ACCEPT\nExecStart=$ip6tables_path -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\nExecStop=$ip6tables_path -t nat -D POSTROUTING -s fddd:2c4:2c4:2c4::/64 ! -d fddd:2c4:2c4:2c4::/64 -j SNAT --to $ip6\nExecStop=$ip6tables_path -D FORWARD -s fddd:2c4:2c4:2c4::/64 -j ACCEPT\nExecStop=$ip6tables_path -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\" >> /etc/systemd/system/wg-iptables.service\n\t\tfi\n\t\techo \"RemainAfterExit=yes\n[Install]\nWantedBy=multi-user.target\" >> /etc/systemd/system/wg-iptables.service\n\t\tsystemctl enable --now wg-iptables.service\n\tfi\n\t# Generates the custom client.conf\n\tnew_client_setup\n\t# Enable and start the wg-quick service\n\tsystemctl enable --now wg-quick@wg0.service\n\t# Set up automatic updates for BoringTun if the user wanted to\n\tif [[ \"$boringtun_updates\" =~ ^[yY]$ ]]; then\n\t\t# Deploy upgrade script\n\t\tcat << 'EOF' > /usr/local/sbin/boringtun-upgrade\n#!/bin/bash\nlatest=$(wget -qO- https://wg.nyr.be/1/latest 2>/dev/null || curl -sL https://wg.nyr.be/1/latest 2>/dev/null)\n# If server did not provide an appropriate response, exit\nif ! head -1 <<< \"$latest\" | grep -qiE \"^boringtun.+[0-9]+\\.[0-9]+.*$\"; then\n\techo \"Update server unavailable\"\n\texit\nfi\ncurrent=$(/usr/local/sbin/boringtun -V)\nif [[ \"$current\" != \"$latest\" ]]; then\n\tdownload=\"https://wg.nyr.be/1/latest/download\"\n\txdir=$(mktemp -d)\n\t# If download and extraction are successful, upgrade the boringtun binary\n\tif { wget -qO- \"$download\" 2>/dev/null || curl -sL \"$download\" ; } | tar xz -C \"$xdir\" --wildcards \"boringtun-*/boringtun\" --strip-components 1; then\n\t\tsystemctl stop wg-quick@wg0.service\n\t\trm -f /usr/local/sbin/boringtun\n\t\tmv \"$xdir\"/boringtun /usr/local/sbin/boringtun\n\t\tsystemctl start wg-quick@wg0.service\n\t\techo \"Succesfully updated to $(/usr/local/sbin/boringtun -V)\"\n\telse\n\t\techo \"boringtun update failed\"\n\tfi\n\trm -rf \"$xdir\"\nelse\n\techo \"$current is up to date\"\nfi\nEOF\n\t\tchmod +x /usr/local/sbin/boringtun-upgrade\n\t\t# Add cron job to run the updater daily at a random time between 3:00 and 5:59\n\t\t{ crontab -l 2>/dev/null; echo \"$(( $RANDOM % 60 )) $(( $RANDOM % 3 + 3 )) * * * /usr/local/sbin/boringtun-upgrade &>/dev/null\" ; } | crontab -\n\tfi\n\techo\n\tqrencode -t ANSI256UTF8 < ~/\"$client.conf\"\n\techo -e '\\xE2\\x86\\x91 That is a QR code containing the client configuration.'\n\techo\n\techo \"Finished!\"\n\techo\n\techo \"The client configuration is available in:\" ~/\"$client.conf\"\n\techo \"New clients can be added by running this script again.\"\nelse\n\tclear\n\techo \"WireGuard is already installed.\"\n\techo\n\techo \"Select an option:\"\n\techo \"   1) Add a new client\"\n\techo \"   2) Remove an existing client\"\n\techo \"   3) Remove WireGuard\"\n\techo \"   4) Exit\"\n\tread -p \"Option: \" option\n\tuntil [[ \"$option\" =~ ^[1-4]$ ]]; do\n\t\techo \"$option: invalid selection.\"\n\t\tread -p \"Option: \" option\n\tdone\n\tcase \"$option\" in\n\t\t1)\n\t\t\techo\n\t\t\techo \"Provide a name for the client:\"\n\t\t\tread -p \"Name: \" unsanitized_client\n\t\t\t# Allow a limited lenght and set of characters to avoid conflicts\n\t\t\tclient=$(sed 's/[^0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-]/_/g' <<< \"$unsanitized_client\" | cut -c-15)\n\t\t\twhile [[ -z \"$client\" ]] || grep -q \"^# BEGIN_PEER $client$\" /etc/wireguard/wg0.conf; do\n\t\t\t\techo \"$client: invalid name.\"\n\t\t\t\tread -p \"Name: \" unsanitized_client\n\t\t\t\tclient=$(sed 's/[^0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-]/_/g' <<< \"$unsanitized_client\" | cut -c-15)\n\t\t\tdone\n\t\t\techo\n\t\t\tnew_client_dns\n\t\t\tnew_client_setup\n\t\t\t# Append new client configuration to the WireGuard interface\n\t\t\twg addconf wg0 <(sed -n \"/^# BEGIN_PEER $client/,/^# END_PEER $client/p\" /etc/wireguard/wg0.conf)\n\t\t\techo\n\t\t\tqrencode -t ANSI256UTF8 < ~/\"$client.conf\"\n\t\t\techo -e '\\xE2\\x86\\x91 That is a QR code containing your client configuration.'\n\t\t\techo\n\t\t\techo \"$client added. Configuration available in:\" ~/\"$client.conf\"\n\t\t\texit\n\t\t;;\n\t\t2)\n\t\t\t# This option could be documented a bit better and maybe even be simplified\n\t\t\t# ...but what can I say, I want some sleep too\n\t\t\tnumber_of_clients=$(grep -c '^# BEGIN_PEER' /etc/wireguard/wg0.conf)\n\t\t\tif [[ \"$number_of_clients\" = 0 ]]; then\n\t\t\t\techo\n\t\t\t\techo \"There are no existing clients!\"\n\t\t\t\texit\n\t\t\tfi\n\t\t\techo\n\t\t\techo \"Select the client to remove:\"\n\t\t\tgrep '^# BEGIN_PEER' /etc/wireguard/wg0.conf | cut -d ' ' -f 3 | nl -s ') '\n\t\t\tread -p \"Client: \" client_number\n\t\t\tuntil [[ \"$client_number\" =~ ^[0-9]+$ && \"$client_number\" -le \"$number_of_clients\" ]]; do\n\t\t\t\techo \"$client_number: invalid selection.\"\n\t\t\t\tread -p \"Client: \" client_number\n\t\t\tdone\n\t\t\tclient=$(grep '^# BEGIN_PEER' /etc/wireguard/wg0.conf | cut -d ' ' -f 3 | sed -n \"$client_number\"p)\n\t\t\techo\n\t\t\tread -p \"Confirm $client removal? [y/N]: \" remove\n\t\t\tuntil [[ \"$remove\" =~ ^[yYnN]*$ ]]; do\n\t\t\t\techo \"$remove: invalid selection.\"\n\t\t\t\tread -p \"Confirm $client removal? [y/N]: \" remove\n\t\t\tdone\n\t\t\tif [[ \"$remove\" =~ ^[yY]$ ]]; then\n\t\t\t\t# The following is the right way to avoid disrupting other active connections:\n\t\t\t\t# Remove from the live interface\n\t\t\t\twg set wg0 peer \"$(sed -n \"/^# BEGIN_PEER $client$/,\\$p\" /etc/wireguard/wg0.conf | grep -m 1 PublicKey | cut -d \" \" -f 3)\" remove\n\t\t\t\t# Remove from the configuration file\n\t\t\t\tsed -i \"/^# BEGIN_PEER $client$/,/^# END_PEER $client$/d\" /etc/wireguard/wg0.conf\n\t\t\t\techo\n\t\t\t\techo \"$client removed!\"\n\t\t\telse\n\t\t\t\techo\n\t\t\t\techo \"$client removal aborted!\"\n\t\t\tfi\n\t\t\texit\n\t\t;;\n\t\t3)\n\t\t\techo\n\t\t\tread -p \"Confirm WireGuard removal? [y/N]: \" remove\n\t\t\tuntil [[ \"$remove\" =~ ^[yYnN]*$ ]]; do\n\t\t\t\techo \"$remove: invalid selection.\"\n\t\t\t\tread -p \"Confirm WireGuard removal? [y/N]: \" remove\n\t\t\tdone\n\t\t\tif [[ \"$remove\" =~ ^[yY]$ ]]; then\n\t\t\t\tport=$(grep '^ListenPort' /etc/wireguard/wg0.conf | cut -d \" \" -f 3)\n\t\t\t\tif systemctl is-active --quiet firewalld.service; then\n\t\t\t\t\tip=$(firewall-cmd --direct --get-rules ipv4 nat POSTROUTING | grep '\\-s 10.7.0.0/24 '\"'\"'!'\"'\"' -d 10.7.0.0/24' | grep -oE '[^ ]+$')\n\t\t\t\t\t# Using both permanent and not permanent rules to avoid a firewalld reload.\n\t\t\t\t\tfirewall-cmd --remove-port=\"$port\"/udp\n\t\t\t\t\tfirewall-cmd --zone=trusted --remove-source=10.7.0.0/24\n\t\t\t\t\tfirewall-cmd --permanent --remove-port=\"$port\"/udp\n\t\t\t\t\tfirewall-cmd --permanent --zone=trusted --remove-source=10.7.0.0/24\n\t\t\t\t\tfirewall-cmd --direct --remove-rule ipv4 nat POSTROUTING 0 -s 10.7.0.0/24 ! -d 10.7.0.0/24 -j SNAT --to \"$ip\"\n\t\t\t\t\tfirewall-cmd --permanent --direct --remove-rule ipv4 nat POSTROUTING 0 -s 10.7.0.0/24 ! -d 10.7.0.0/24 -j SNAT --to \"$ip\"\n\t\t\t\t\tif grep -qs 'fddd:2c4:2c4:2c4::1/64' /etc/wireguard/wg0.conf; then\n\t\t\t\t\t\tip6=$(firewall-cmd --direct --get-rules ipv6 nat POSTROUTING | grep '\\-s fddd:2c4:2c4:2c4::/64 '\"'\"'!'\"'\"' -d fddd:2c4:2c4:2c4::/64' | grep -oE '[^ ]+$')\n\t\t\t\t\t\tfirewall-cmd --zone=trusted --remove-source=fddd:2c4:2c4:2c4::/64\n\t\t\t\t\t\tfirewall-cmd --permanent --zone=trusted --remove-source=fddd:2c4:2c4:2c4::/64\n\t\t\t\t\t\tfirewall-cmd --direct --remove-rule ipv6 nat POSTROUTING 0 -s fddd:2c4:2c4:2c4::/64 ! -d fddd:2c4:2c4:2c4::/64 -j SNAT --to \"$ip6\"\n\t\t\t\t\t\tfirewall-cmd --permanent --direct --remove-rule ipv6 nat POSTROUTING 0 -s fddd:2c4:2c4:2c4::/64 ! -d fddd:2c4:2c4:2c4::/64 -j SNAT --to \"$ip6\"\n\t\t\t\t\tfi\n\t\t\t\telse\n\t\t\t\t\tsystemctl disable --now wg-iptables.service\n\t\t\t\t\trm -f /etc/systemd/system/wg-iptables.service\n\t\t\t\tfi\n\t\t\t\tsystemctl disable --now wg-quick@wg0.service\n\t\t\t\trm -f /etc/systemd/system/wg-quick@wg0.service.d/boringtun.conf\n\t\t\t\trm -f /etc/sysctl.d/99-wireguard-forward.conf\n\t\t\t\t# Different stuff was installed depending on whether BoringTun was used or not\n\t\t\t\tif [[ \"$use_boringtun\" -eq 0 ]]; then\n\t\t\t\t\tif [[ \"$os\" == \"ubuntu\" ]]; then\n\t\t\t\t\t\t# Ubuntu\n\t\t\t\t\t\trm -rf /etc/wireguard/\n\t\t\t\t\t\tapt-get remove --purge -y wireguard wireguard-tools\n\t\t\t\t\telif [[ \"$os\" == \"debian\" ]]; then\n\t\t\t\t\t\t# Debian\n\t\t\t\t\t\trm -rf /etc/wireguard/\n\t\t\t\t\t\tapt-get remove --purge -y wireguard wireguard-tools\n\t\t\t\t\telif [[ \"$os\" == \"centos\" ]]; then\n\t\t\t\t\t\t# CentOS\n\t\t\t\t\t\tdnf remove -y wireguard-tools\n\t\t\t\t\t\trm -rf /etc/wireguard/\n\t\t\t\t\telif [[ \"$os\" == \"fedora\" ]]; then\n\t\t\t\t\t\t# Fedora\n\t\t\t\t\t\tdnf remove -y wireguard-tools\n\t\t\t\t\t\trm -rf /etc/wireguard/\n\t\t\t\t\tfi\n\t\t\t\telse\n\t\t\t\t\t{ crontab -l 2>/dev/null | grep -v '/usr/local/sbin/boringtun-upgrade' ; } | crontab -\n\t\t\t\t\tif [[ \"$os\" == \"ubuntu\" ]]; then\n\t\t\t\t\t\t# Ubuntu\n\t\t\t\t\t\trm -rf /etc/wireguard/\n\t\t\t\t\t\tapt-get remove --purge -y wireguard-tools\n\t\t\t\t\telif [[ \"$os\" == \"debian\" ]]; then\n\t\t\t\t\t\t# Debian\n\t\t\t\t\t\trm -rf /etc/wireguard/\n\t\t\t\t\t\tapt-get remove --purge -y wireguard-tools\n\t\t\t\t\telif [[ \"$os\" == \"centos\" ]]; then\n\t\t\t\t\t\t# CentOS\n\t\t\t\t\t\tdnf remove -y wireguard-tools\n\t\t\t\t\t\trm -rf /etc/wireguard/\n\t\t\t\t\telif [[ \"$os\" == \"fedora\" ]]; then\n\t\t\t\t\t\t# Fedora\n\t\t\t\t\t\tdnf remove -y wireguard-tools\n\t\t\t\t\t\trm -rf /etc/wireguard/\n\t\t\t\t\tfi\n\t\t\t\t\trm -f /usr/local/sbin/boringtun /usr/local/sbin/boringtun-upgrade\n\t\t\t\tfi\n\t\t\t\techo\n\t\t\t\techo \"WireGuard removed!\"\n\t\t\telse\n\t\t\t\techo\n\t\t\t\techo \"WireGuard removal aborted!\"\n\t\t\tfi\n\t\t\texit\n\t\t;;\n\t\t4)\n\t\t\texit\n\t\t;;\n\tesac\nfi\n"
        }
      ]
    }
  ]
}