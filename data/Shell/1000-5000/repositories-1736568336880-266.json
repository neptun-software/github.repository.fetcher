{
  "metadata": {
    "timestamp": 1736568336880,
    "page": 266,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sakai135/wsl-vpnkit",
      "stars": 2374,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.068359375,
          "content": ".git\n.github\n.dockerignore\ndistro/Dockerfile\nREADME.md\ndistro/test.sh\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": "wsl-vpnkit.tar.gz\nwsl-gvproxy.exe\nwsl-vm\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2021 Keiichi Shimamura\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.06640625,
          "content": "# wsl-vpnkit\n\nThe `wsl-vpnkit` v0.4 script uses [gvisor-tap-vsock](https://github.com/containers/gvisor-tap-vsock) to provide network connectivity to the WSL 2 VM while connected to VPNs on the Windows host. This requires no settings changes or admin privileges on the Windows host.\n\nFor previous versions, see [v0.3](https://github.com/sakai135/wsl-vpnkit/tree/v0.3.x) and [v0.2](https://github.com/sakai135/wsl-vpnkit/tree/v0.2.x).\n\n## Setup\n\nBefore setting up `wsl-vpnkit`, check if a DNS server change may be enough to get connectivity by pinging a public IP address from WSL 2. If that works, follow the steps in [WSL has no network connectivity once connected to a VPN](https://learn.microsoft.com/en-us/windows/wsl/troubleshooting#wsl-has-no-network-connectivity-once-connected-to-a-vpn).\n\n`wsl-vpnkit` is intended to help when more than a DNS server change is needed.\n\n### Setup as a distro\n\n#### Install\n\nDownload the prebuilt file `wsl-vpnkit.tar.gz` from the [latest release](https://github.com/sakai135/wsl-vpnkit/releases/latest) and import the distro into WSL 2. \n\n```pwsh\n# PowerShell\n\nwsl --import wsl-vpnkit --version 2 $env:USERPROFILE\\wsl-vpnkit wsl-vpnkit.tar.gz\n```\n\nRun `wsl-vpnkit`. This will run `wsl-vpnkit` in the foreground.\n\n```sh\nwsl.exe -d wsl-vpnkit --cd /app wsl-vpnkit\n```\n\n#### Update\n\nTo update, unregister the existing distro and import the new version.\n\n```pwsh\n# PowerShell\n\nwsl --unregister wsl-vpnkit\nwsl --import wsl-vpnkit --version 2 $env:USERPROFILE\\wsl-vpnkit wsl-vpnkit.tar.gz\n```\n\n#### Uninstall\n\nTo uninstall, unregister the distro.\n\n```pwsh\n# PowerShell\n\nwsl --unregister wsl-vpnkit\n```\n\n### Setup as a standalone script\n\nThe `wsl-vpnkit` script can be used as a normal script in your existing distro. This is an example setup script for Ubuntu.\n\n```sh\n# install dependencies\nsudo apt-get install iproute2 iptables iputils-ping dnsutils wget\n\n# download wsl-vpnkit and unpack\nVERSION=v0.4.x\nwget https://github.com/sakai135/wsl-vpnkit/releases/download/$VERSION/wsl-vpnkit.tar.gz\ntar --strip-components=1 -xf wsl-vpnkit.tar.gz \\\n    app/wsl-vpnkit \\\n    app/wsl-gvproxy.exe \\\n    app/wsl-vm \\\n    app/wsl-vpnkit.service\nrm wsl-vpnkit.tar.gz\n\n# run the wsl-vpnkit script in the foreground\nsudo VMEXEC_PATH=$(pwd)/wsl-vm GVPROXY_PATH=$(pwd)/wsl-gvproxy.exe ./wsl-vpnkit\n```\n\n### Setup systemd\n\nWSL versions 0.67.6 and later [support systemd](https://learn.microsoft.com/en-us/windows/wsl/wsl-config#systemd-support). Follow the instructions in the link to enable systemd support for your distro.\n\nCreate the service file and enable the service. Now `wsl-vpnkit.service` should start with your distro next time.\n\n```sh\n# wsl-vpnkit setup as a distro\nwsl.exe -d wsl-vpnkit --cd /app cat /app/wsl-vpnkit.service | sudo tee /etc/systemd/system/wsl-vpnkit.service\n\n# copy and edit for wsl-vpnkit setup as a standalone script\nsudo cp ./wsl-vpnkit.service /etc/systemd/system/\nsudo nano /etc/systemd/system/wsl-vpnkit.service\n\n# enable the service\nsudo systemctl enable wsl-vpnkit\n\n# start and check the status of the service\nsudo systemctl start wsl-vpnkit\nsystemctl status wsl-vpnkit\n```\n\n## Build\n\n\n```sh\n# build with alpine image to ./wsl-vpnkit.tar.gz\n./build.sh alpine\n\n# build with fedora using Podman\nDOCKER=podman ./build.sh fedora\n\n# import the built distro from ./wsl-vpnkit.tar.gz\n./import.sh\n\n# run using the imported distro\nwsl.exe -d wsl-vpnkit --cd /app wsl-vpnkit\n```\n\n## Troubleshooting\n\n### Notes\n\n* Ports on the WSL 2 VM are [accessible from the Windows host using `localhost`](https://learn.microsoft.com/en-us/windows/wsl/networking#accessing-linux-networking-apps-from-windows-localhost).\n* Ports on the Windows host are accessible from WSL 2 using `host.containers.internal`, `192.168.127.254` or [the IP address of the host machine](https://docs.microsoft.com/en-us/windows/wsl/networking#accessing-windows-networking-apps-from-linux-host-ip).\n\n### Error messages from `wsl-vpnkit`\n\n#### resolv.conf has been modified without setting generateResolvConf\n\n`wsl-vpnkit` uses `/mnt/wsl/resolv.conf` to get the WSL 2 gateway IP. If modifying `/etc/resolv.conf` to set a custom DNS configuration, set [`generateResolvConf=false` in `wsl.conf`](https://learn.microsoft.com/en-us/windows/wsl/wsl-config#network-settings).\n\nOn older WSL versions where `/mnt/wsl/resolv.conf` is not available, `wsl-vpnkit` will fallback to using `/etc/resolv.conf`. When setup as a standalone script and using a custom DNS configuration for the distro, the `WSL2_GATEWAY_IP` environment variable should be set for `wsl-vpnkit` to use.\n\n#### wsl-gvproxy.exe is not executable due to WSL interop settings or Windows permissions\n\n`wsl-vpnkit` requires that the WSL 2 distro be able to run Windows executables. This [`interop` setting](https://learn.microsoft.com/en-us/windows/wsl/wsl-config#interop-settings) is enabled by default in WSL 2 and in the `wsl-vpnkit` distro.\n\nSecurity configurations on the Windows host may only permit running executables in certain directories. You can copy `wsl-gvproxy.exe` to an appropriate location and use the `GVPROXY_PATH` environment variable to specify the location.\n\n```sh\n# enable [automount] in wsl.conf for wsl-vpnkit distro\nwsl.exe -d wsl-vpnkit --cd /app sed -i -- \"s/enabled=false/enabled=true/\" /etc/wsl.conf\n\n# set GVPROXY_PATH when running wsl-vpnkit\nwsl.exe -d wsl-vpnkit --cd /app GVPROXY_PATH=/mnt/c/path/wsl-gvproxy.exe wsl-vpnkit\n```\n\n### Configuring proxies and certificates\n\n`wsl-vpnkit` currently only handles creating a network connection. Proxies and certificates must be configured separately in your distro.\n\n### Configure VS Code Remote WSL Extension\n\nIf VS Code takes a long time to open your folder in WSL, [enable the setting \"Connect Through Localhost\"](https://github.com/microsoft/vscode-docs/blob/main/remote-release-notes/v1_54.md#fix-for-wsl-2-connection-issues-when-behind-a-proxy).\n\n### Try shutting down WSL 2 VM to reset\n\n```pwsh\n# PowerShell\n\n# shutdown WSL to reset networking state\nwsl --shutdown\n\n# kill any straggler wsl-gvproxy processes\nkill -Name wsl-gvproxy\n```\n\n### Run service with debug\n\n```sh\n# set the DEBUG environment variable\nwsl.exe -d wsl-vpnkit --cd /app DEBUG=1 wsl-vpnkit\n```\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.7255859375,
          "content": "#!/bin/bash -xe\n\n# run from repo root\n# ./build.sh\n\n: \"${DOCKER:=docker}\"   # docker/podman command  (default: docker)\nDUMP=wsl-vpnkit.tar.gz  # exported rootfs file\nTAG_NAME=wslvpnkit      # build tag\nBASE_DISTRO=$1\n\n# build\nbuild_args=()\n[ -z \"${http_proxy}\" ] || build_args+=( --build-arg http_proxy=\"${http_proxy}\" )\n[ -z \"${https_proxy}\" ] || build_args+=( --build-arg https_proxy=\"${https_proxy}\" )\n[ -z \"${no_proxy}\" ] || build_args+=( --build-arg no_proxy=\"${no_proxy}\" )\n${DOCKER} build --network host \"${build_args[@]}\" --tag ${TAG_NAME} --file ./distro/$BASE_DISTRO.dockerfile .\nCONTAINER_ID=$(${DOCKER} create ${TAG_NAME})\n${DOCKER} export \"${CONTAINER_ID}\" | gzip > ${DUMP}\n${DOCKER} container rm \"${CONTAINER_ID}\"\nls -la ${DUMP}\n"
        },
        {
          "name": "distro",
          "type": "tree",
          "content": null
        },
        {
          "name": "import.sh",
          "type": "blob",
          "size": 0.4033203125,
          "content": "#!/bin/bash -xe\n\n# run from repo root\n# ./import.sh\n\nCMDSHELL=\"$(command -v cmd.exe || echo '/mnt/c/Windows/system32/cmd.exe')\"\nUSERPROFILE=\"$($CMDSHELL /d /v:off /c 'echo | set /p t=%USERPROFILE%' 2>/dev/null)\"\nDUMP=wsl-vpnkit.tar.gz\n\n# build if necessary\n[ -f ${DUMP} ] || ./build.sh\n\n# reinstall\nwsl.exe --unregister wsl-vpnkit || :\nwsl.exe --import wsl-vpnkit --version 2 \"${USERPROFILE}\\\\wsl-vpnkit\" ${DUMP}\n"
        },
        {
          "name": "wsl-vpnkit",
          "type": "blob",
          "size": 5.0234375,
          "content": "#!/bin/sh\n\nset -x\n\n# hardcoded in gvisor-tap-vsock\nVPNKIT_GATEWAY_IP=${VPNKIT_GATEWAY_IP:-192.168.127.1}\nVPNKIT_HOST_IP=${VPNKIT_HOST_IP:-192.168.127.254}\nVPNKIT_LOCAL_IP=${VPNKIT_LOCAL_IP:-192.168.127.2}\nTAP_MAC_ADDR=${TAP_MAC_ADDR:-5a:94:ef:e4:0c:ee}\n\n# overrideable with env\nVMEXEC_PATH=${VMEXEC_PATH:-/app/wsl-vm}\nGVPROXY_PATH=${GVPROXY_PATH:-/app/wsl-gvproxy.exe}\nTAP_NAME=${TAP_NAME:-wsltap}\nCHECK_HOST=${CHECK_HOST:-example.com}\nCHECK_DNS=${CHECK_DNS:-1.1.1.1}\nDEBUG=${DEBUG:-0}\n\nset +x\n\n# WSL2 default values\nWSL2_TAP_NAME=${WSL2_TAP_NAME:-eth0}\nWSL2_RESOLVCONF_DEFAULT=\"/mnt/wsl/resolv.conf\"\nif [ ! -f \"$WSL2_RESOLVCONF_DEFAULT\" ]; then\n    WSL2_RESOLVCONF_DEFAULT=\"/etc/resolv.conf\"\nfi\nWSL2_RESOLVCONF=${WSL2_RESOLVCONF:-$WSL2_RESOLVCONF_DEFAULT}\nWSL2_GATEWAY_IP_FROM_RESOLVCONF=\"$(cat $WSL2_RESOLVCONF | awk '/^nameserver/ {print $2}')\"\nWSL2_GATEWAY_IP=${WSL2_GATEWAY_IP:-$WSL2_GATEWAY_IP_FROM_RESOLVCONF}\n\nset -x\n\n# show values\nWSL2_TAP_NAME=$WSL2_TAP_NAME\nWSL2_GATEWAY_IP=$WSL2_GATEWAY_IP\n\nif [ \"$DEBUG\" -eq 0 ]; then\n    set +x\nfi\n\n# replace calls to iptables if iptables-legacy exists\ncommand -v iptables-legacy >/dev/null && alias iptables=iptables-legacy\n\nrun () {\n    echo \"starting vm and gvproxy...\"\n    $VMEXEC_PATH \\\n        -url=\"stdio:$GVPROXY_PATH?listen-stdio=accept&debug=$DEBUG\" \\\n        -iface=\"$TAP_NAME\" \\\n        -stop-if-exist=\"\" \\\n        -preexisting=1 \\\n        -debug=$DEBUG &\n    sleep 1 # wait to establish connection\n    echo \"started vm and gvproxy\"\n}\n\nwsl2tap_down () {\n    # remove WSL2 default route\n    ip route del default\n\n    # setup wsl-vpnkit tap\n    ip tuntap add $TAP_NAME mode tap\n    ip link set dev $TAP_NAME address $TAP_MAC_ADDR\n    ip link set dev $TAP_NAME up\n    ip addr add $VPNKIT_LOCAL_IP/255.255.255.0 dev $TAP_NAME\n    ip route add default via $VPNKIT_GATEWAY_IP dev $TAP_NAME\n}\n\nwsl2tap_up () {\n    # take down wsl-vpnkit tap\n    ip link set dev $TAP_NAME down 2>/dev/null\n    ip tuntap del $TAP_NAME mode tap\n\n    # add WSL2 default route\n    ip route add default via $WSL2_GATEWAY_IP dev $WSL2_TAP_NAME 2>/dev/null\n}\n\niptables_set () {\n    iptables -t nat -$1 PREROUTING -d $WSL2_GATEWAY_IP/32 -p udp -m udp --dport 53 -j DNAT --to-destination $VPNKIT_GATEWAY_IP:53\n    iptables -t nat -$1 PREROUTING -d $WSL2_GATEWAY_IP/32 -p tcp -m tcp --dport 53 -j DNAT --to-destination $VPNKIT_GATEWAY_IP:53\n    iptables -t nat -$1 PREROUTING -d $WSL2_GATEWAY_IP/32 -j DNAT --to-destination $VPNKIT_HOST_IP\n    iptables -t nat -$1 OUTPUT -d $WSL2_GATEWAY_IP/32 -p udp -m udp --dport 53 -j DNAT --to-destination $VPNKIT_GATEWAY_IP:53\n    iptables -t nat -$1 OUTPUT -d $WSL2_GATEWAY_IP/32 -p tcp -m tcp --dport 53 -j DNAT --to-destination $VPNKIT_GATEWAY_IP:53\n    iptables -t nat -$1 OUTPUT -d $WSL2_GATEWAY_IP/32 -j DNAT --to-destination $VPNKIT_HOST_IP\n    iptables -t nat -$1 POSTROUTING -o $TAP_NAME -j MASQUERADE\n}\n\ncheck_ping () {\n    ping -$1 -c 1 $3 >/dev/null && \\\n        echo \"check: ✔️ ping success to IPv$1 $2 ($3)\" || \\\n        echo \"check: $([ $1 = '6' ] && echo '➖' || echo '❌') ping fail to IPv$1 $2 ($3)\"\n}\n\ncheck_dns () {\n    TYPE=$([ \"$1\" = \"4\" ] && echo 'A' || echo 'AAAA')\n    nslookup -type=$TYPE $2 $3 >/dev/null && \\\n        echo \"check: ✔️ nslookup success for $2 $TYPE using $3\" || \\\n        echo \"check: ❌ nslookup fail for $2 $TYPE using $3\"\n}\n\ncheck_https () {\n    wget --spider -q $1 && \\\n        echo \"check: ✔️ wget success for $1\" || \\\n        echo \"check: ❌ wget fail for $1\"\n}\n\ncheck () {\n    check_ping 4 'WSL 2 gateway / Windows host' $WSL2_GATEWAY_IP\n    check_ping 4 'Windows host' $VPNKIT_HOST_IP\n    check_ping 4 'gateway' $VPNKIT_GATEWAY_IP\n    check_dns 4 $CHECK_HOST $VPNKIT_GATEWAY_IP\n    check_dns 4 $CHECK_HOST $WSL2_GATEWAY_IP\n    check_dns 4 $CHECK_HOST $CHECK_DNS\n    check_ping 4 'external host domain' $CHECK_HOST\n    check_ping 4 'external host IP' $CHECK_DNS\n    check_dns 6 $CHECK_HOST $VPNKIT_GATEWAY_IP\n    check_dns 6 $CHECK_HOST $WSL2_GATEWAY_IP\n    check_dns 6 $CHECK_HOST $CHECK_DNS\n    check_ping 6 'external host' $CHECK_HOST\n    check_https \"http://$CHECK_HOST\"\n    check_https \"https://$CHECK_HOST\"\n}\n\ncleanup () {\n    iptables_set D 2>/dev/null\n    wsl2tap_up\n}\n\nclose () {\n    echo \"cleaning up...\"\n    cleanup\n    echo \"stopped wsl-vpnkit\"\n    kill 0\n}\n\nif [ ${EUID:-$(id -u)} -ne 0 ]; then\n    echo \"Please run this script as root\"\n    exit 1\nfi\nif [ ! -f \"$VMEXEC_PATH\" ]; then\n    echo \"VMEXEC_PATH [$VMEXEC_PATH] does not exist\"\n    exit 1\nfi\nif [ ! -f \"$GVPROXY_PATH\" ]; then\n    echo \"GVPROXY_PATH [$GVPROXY_PATH] does not exist\"\n    exit 1\nfi\ncat $WSL2_RESOLVCONF | grep \"automatically generated by WSL\" >/dev/null\nif [ $? -eq 1 ]; then\n    echo \"resolv.conf has been modified without setting generateResolvConf\"\nfi\n$GVPROXY_PATH -help 2>/dev/null\nif [ $? -eq 1 ]; then\n    echo \"$GVPROXY_PATH is not executable due to WSL interop settings or Windows permissions\"\n    exit 1\nfi\n\n# trap first so close runs even if the rest of the commands fail\ntrap close exit\ntrap exit int term\n\n# run cleanup to restore any leftover configuration changes\ncleanup\n\nwsl2tap_down\nrun\niptables_set A\ncheck\nwait\n"
        },
        {
          "name": "wsl-vpnkit.service",
          "type": "blob",
          "size": 0.4052734375,
          "content": "[Unit]\nDescription=wsl-vpnkit\nAfter=network.target\n\n[Service]\n# for wsl-vpnkit setup as a distro\nExecStart=/mnt/c/Windows/system32/wsl.exe -d wsl-vpnkit --cd /app wsl-vpnkit\n\n# for wsl-vpnkit setup as a standalone script\n#ExecStart=/full/path/to/wsl-vpnkit\n#Environment=VMEXEC_PATH=/full/path/to/wsl-vm GVPROXY_PATH=/full/path/to/wsl-gvproxy.exe\n\nRestart=always\nKillMode=mixed\n\n[Install]\nWantedBy=multi-user.target\n"
        }
      ]
    }
  ]
}