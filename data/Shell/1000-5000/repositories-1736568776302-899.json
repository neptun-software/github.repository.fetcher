{
  "metadata": {
    "timestamp": 1736568776302,
    "page": 899,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkwOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rdp/ffmpeg-windows-build-helpers",
      "stars": 1103,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.044921875,
          "content": "sandbox/\noutput/\noutput_*/\ndo-docker-build.sh\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0361328125,
          "content": "patches/*.* linguist-detectable=false"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.55078125,
          "content": "sandbox/\noutput/\noutput_*/\n.DS_store\nconfig.log\nsandbox/\n.vs/\n\nmeson-cross.mingw.txt\n/.vs/slnx.sqlite\n/.vs/ProjectSettings.json\n/.vs/ffmpeg-windows-build-helpers2/v16/Browse.VC.opendb\n/.vs/ffmpeg-windows-build-helpers2/v16/Browse.VC.db-wal\n/.vs/ffmpeg-windows-build-helpers2/v16/Browse.VC.db-shm\n/.vs/ffmpeg-windows-build-helpers2/v16/Browse.VC.db\n/.vs/ffmpeg-windows-build-helpers/v16/Browse.VC.db\n/.vs/ffmpeg-windows-build-helpers/v16/Browse.VC.db-shm\n/.vs/ffmpeg-windows-build-helpers/v16/Browse.VC.db-wal\n/.vs/ffmpeg-windows-build-helpers/v16/Browse.VC.opendb\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 35.6396484375,
          "content": "#                     GNU GENERAL PUBLIC LICENSE\n#                        Version 3, 29 June 2007\n# \n#  Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n#  Everyone is permitted to copy and distribute verbatim copies\n#  of this license document, but changing it is not allowed.\n# \n#                             Preamble\n# \n#   The GNU General Public License is a free, copyleft license for\n# software and other kinds of works.\n# \n#   The licenses for most software and other practical works are designed\n# to take away your freedom to share and change the works.  By contrast,\n# the GNU General Public License is intended to guarantee your freedom to\n# share and change all versions of a program--to make sure it remains free\n# software for all its users.  We, the Free Software Foundation, use the\n# GNU General Public License for most of our software; it applies also to\n# any other work released this way by its authors.  You can apply it to\n# your programs, too.\n# \n#   When we speak of free software, we are referring to freedom, not\n# price.  Our General Public Licenses are designed to make sure that you\n# have the freedom to distribute copies of free software (and charge for\n# them if you wish), that you receive source code or can get it if you\n# want it, that you can change the software or use pieces of it in new\n# free programs, and that you know you can do these things.\n# \n#   To protect your rights, we need to prevent others from denying you\n# these rights or asking you to surrender the rights.  Therefore, you have\n# certain responsibilities if you distribute copies of the software, or if\n# you modify it: responsibilities to respect the freedom of others.\n# \n#   For example, if you distribute copies of such a program, whether\n# gratis or for a fee, you must pass on to the recipients the same\n# freedoms that you received.  You must make sure that they, too, receive\n# or can get the source code.  And you must show them these terms so they\n# know their rights.\n# \n#   Developers that use the GNU GPL protect your rights with two steps:\n# (1) assert copyright on the software, and (2) offer you this License\n# giving you legal permission to copy, distribute and/or modify it.\n# \n#   For the developers' and authors' protection, the GPL clearly explains\n# that there is no warranty for this free software.  For both users' and\n# authors' sake, the GPL requires that modified versions be marked as\n# changed, so that their problems will not be attributed erroneously to\n# authors of previous versions.\n# \n#   Some devices are designed to deny users access to install or run\n# modified versions of the software inside them, although the manufacturer\n# can do so.  This is fundamentally incompatible with the aim of\n# protecting users' freedom to change the software.  The systematic\n# pattern of such abuse occurs in the area of products for individuals to\n# use, which is precisely where it is most unacceptable.  Therefore, we\n# have designed this version of the GPL to prohibit the practice for those\n# products.  If such problems arise substantially in other domains, we\n# stand ready to extend this provision to those domains in future versions\n# of the GPL, as needed to protect the freedom of users.\n# \n#   Finally, every program is threatened constantly by software patents.\n# States should not allow patents to restrict development and use of\n# software on general-purpose computers, but in those that do, we wish to\n# avoid the special danger that patents applied to a free program could\n# make it effectively proprietary.  To prevent this, the GPL assures that\n# patents cannot be used to render the program non-free.\n# \n#   The precise terms and conditions for copying, distribution and\n# modification follow.\n# \n#                        TERMS AND CONDITIONS\n# \n#   0. Definitions.\n# \n#   \"This License\" refers to version 3 of the GNU General Public License.\n# \n#   \"Copyright\" also means copyright-like laws that apply to other kinds of\n# works, such as semiconductor masks.\n# \n#   \"The Program\" refers to any copyrightable work licensed under this\n# License.  Each licensee is addressed as \"you\".  \"Licensees\" and\n# \"recipients\" may be individuals or organizations.\n# \n#   To \"modify\" a work means to copy from or adapt all or part of the work\n# in a fashion requiring copyright permission, other than the making of an\n# exact copy.  The resulting work is called a \"modified version\" of the\n# earlier work or a work \"based on\" the earlier work.\n# \n#   A \"covered work\" means either the unmodified Program or a work based\n# on the Program.\n# \n#   To \"propagate\" a work means to do anything with it that, without\n# permission, would make you directly or secondarily liable for\n# infringement under applicable copyright law, except executing it on a\n# computer or modifying a private copy.  Propagation includes copying,\n# distribution (with or without modification), making available to the\n# public, and in some countries other activities as well.\n# \n#   To \"convey\" a work means any kind of propagation that enables other\n# parties to make or receive copies.  Mere interaction with a user through\n# a computer network, with no transfer of a copy, is not conveying.\n# \n#   An interactive user interface displays \"Appropriate Legal Notices\"\n# to the extent that it includes a convenient and prominently visible\n# feature that (1) displays an appropriate copyright notice, and (2)\n# tells the user that there is no warranty for the work (except to the\n# extent that warranties are provided), that licensees may convey the\n# work under this License, and how to view a copy of this License.  If\n# the interface presents a list of user commands or options, such as a\n# menu, a prominent item in the list meets this criterion.\n# \n#   1. Source Code.\n# \n#   The \"source code\" for a work means the preferred form of the work\n# for making modifications to it.  \"Object code\" means any non-source\n# form of a work.\n# \n#   A \"Standard Interface\" means an interface that either is an official\n# standard defined by a recognized standards body, or, in the case of\n# interfaces specified for a particular programming language, one that\n# is widely used among developers working in that language.\n# \n#   The \"System Libraries\" of an executable work include anything, other\n# than the work as a whole, that (a) is included in the normal form of\n# packaging a Major Component, but which is not part of that Major\n# Component, and (b) serves only to enable use of the work with that\n# Major Component, or to implement a Standard Interface for which an\n# implementation is available to the public in source code form.  A\n# \"Major Component\", in this context, means a major essential component\n# (kernel, window system, and so on) of the specific operating system\n# (if any) on which the executable work runs, or a compiler used to\n# produce the work, or an object code interpreter used to run it.\n# \n#   The \"Corresponding Source\" for a work in object code form means all\n# the source code needed to generate, install, and (for an executable\n# work) run the object code and to modify the work, including scripts to\n# control those activities.  However, it does not include the work's\n# System Libraries, or general-purpose tools or generally available free\n# programs which are used unmodified in performing those activities but\n# which are not part of the work.  For example, Corresponding Source\n# includes interface definition files associated with source files for\n# the work, and the source code for shared libraries and dynamically\n# linked subprograms that the work is specifically designed to require,\n# such as by intimate data communication or control flow between those\n# subprograms and other parts of the work.\n# \n#   The Corresponding Source need not include anything that users\n# can regenerate automatically from other parts of the Corresponding\n# Source.\n# \n#   The Corresponding Source for a work in source code form is that\n# same work.\n# \n#   2. Basic Permissions.\n# \n#   All rights granted under this License are granted for the term of\n# copyright on the Program, and are irrevocable provided the stated\n# conditions are met.  This License explicitly affirms your unlimited\n# permission to run the unmodified Program.  The output from running a\n# covered work is covered by this License only if the output, given its\n# content, constitutes a covered work.  This License acknowledges your\n# rights of fair use or other equivalent, as provided by copyright law.\n# \n#   You may make, run and propagate covered works that you do not\n# convey, without conditions so long as your license otherwise remains\n# in force.  You may convey covered works to others for the sole purpose\n# of having them make modifications exclusively for you, or provide you\n# with facilities for running those works, provided that you comply with\n# the terms of this License in conveying all material for which you do\n# not control copyright.  Those thus making or running the covered works\n# for you must do so exclusively on your behalf, under your direction\n# and control, on terms that prohibit them from making any copies of\n# your copyrighted material outside their relationship with you.\n# \n#   Conveying under any other circumstances is permitted solely under\n# the conditions stated below.  Sublicensing is not allowed; section 10\n# makes it unnecessary.\n# \n#   3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n# \n#   No covered work shall be deemed part of an effective technological\n# measure under any applicable law fulfilling obligations under article\n# 11 of the WIPO copyright treaty adopted on 20 December 1996, or\n# similar laws prohibiting or restricting circumvention of such\n# measures.\n# \n#   When you convey a covered work, you waive any legal power to forbid\n# circumvention of technological measures to the extent such circumvention\n# is effected by exercising rights under this License with respect to\n# the covered work, and you disclaim any intention to limit operation or\n# modification of the work as a means of enforcing, against the work's\n# users, your or third parties' legal rights to forbid circumvention of\n# technological measures.\n# \n#   4. Conveying Verbatim Copies.\n# \n#   You may convey verbatim copies of the Program's source code as you\n# receive it, in any medium, provided that you conspicuously and\n# appropriately publish on each copy an appropriate copyright notice;\n# keep intact all notices stating that this License and any\n# non-permissive terms added in accord with section 7 apply to the code;\n# keep intact all notices of the absence of any warranty; and give all\n# recipients a copy of this License along with the Program.\n# \n#   You may charge any price or no price for each copy that you convey,\n# and you may offer support or warranty protection for a fee.\n# \n#   5. Conveying Modified Source Versions.\n# \n#   You may convey a work based on the Program, or the modifications to\n# produce it from the Program, in the form of source code under the\n# terms of section 4, provided that you also meet all of these conditions:\n# \n#     a) The work must carry prominent notices stating that you modified\n#     it, and giving a relevant date.\n# \n#     b) The work must carry prominent notices stating that it is\n#     released under this License and any conditions added under section\n#     7.  This requirement modifies the requirement in section 4 to\n#     \"keep intact all notices\".\n# \n#     c) You must license the entire work, as a whole, under this\n#     License to anyone who comes into possession of a copy.  This\n#     License will therefore apply, along with any applicable section 7\n#     additional terms, to the whole of the work, and all its parts,\n#     regardless of how they are packaged.  This License gives no\n#     permission to license the work in any other way, but it does not\n#     invalidate such permission if you have separately received it.\n# \n#     d) If the work has interactive user interfaces, each must display\n#     Appropriate Legal Notices; however, if the Program has interactive\n#     interfaces that do not display Appropriate Legal Notices, your\n#     work need not make them do so.\n# \n#   A compilation of a covered work with other separate and independent\n# works, which are not by their nature extensions of the covered work,\n# and which are not combined with it such as to form a larger program,\n# in or on a volume of a storage or distribution medium, is called an\n# \"aggregate\" if the compilation and its resulting copyright are not\n# used to limit the access or legal rights of the compilation's users\n# beyond what the individual works permit.  Inclusion of a covered work\n# in an aggregate does not cause this License to apply to the other\n# parts of the aggregate.\n# \n#   6. Conveying Non-Source Forms.\n# \n#   You may convey a covered work in object code form under the terms\n# of sections 4 and 5, provided that you also convey the\n# machine-readable Corresponding Source under the terms of this License,\n# in one of these ways:\n# \n#     a) Convey the object code in, or embodied in, a physical product\n#     (including a physical distribution medium), accompanied by the\n#     Corresponding Source fixed on a durable physical medium\n#     customarily used for software interchange.\n# \n#     b) Convey the object code in, or embodied in, a physical product\n#     (including a physical distribution medium), accompanied by a\n#     written offer, valid for at least three years and valid for as\n#     long as you offer spare parts or customer support for that product\n#     model, to give anyone who possesses the object code either (1) a\n#     copy of the Corresponding Source for all the software in the\n#     product that is covered by this License, on a durable physical\n#     medium customarily used for software interchange, for a price no\n#     more than your reasonable cost of physically performing this\n#     conveying of source, or (2) access to copy the\n#     Corresponding Source from a network server at no charge.\n# \n#     c) Convey individual copies of the object code with a copy of the\n#     written offer to provide the Corresponding Source.  This\n#     alternative is allowed only occasionally and noncommercially, and\n#     only if you received the object code with such an offer, in accord\n#     with subsection 6b.\n# \n#     d) Convey the object code by offering access from a designated\n#     place (gratis or for a charge), and offer equivalent access to the\n#     Corresponding Source in the same way through the same place at no\n#     further charge.  You need not require recipients to copy the\n#     Corresponding Source along with the object code.  If the place to\n#     copy the object code is a network server, the Corresponding Source\n#     may be on a different server (operated by you or a third party)\n#     that supports equivalent copying facilities, provided you maintain\n#     clear directions next to the object code saying where to find the\n#     Corresponding Source.  Regardless of what server hosts the\n#     Corresponding Source, you remain obligated to ensure that it is\n#     available for as long as needed to satisfy these requirements.\n# \n#     e) Convey the object code using peer-to-peer transmission, provided\n#     you inform other peers where the object code and Corresponding\n#     Source of the work are being offered to the general public at no\n#     charge under subsection 6d.\n# \n#   A separable portion of the object code, whose source code is excluded\n# from the Corresponding Source as a System Library, need not be\n# included in conveying the object code work.\n# \n#   A \"User Product\" is either (1) a \"consumer product\", which means any\n# tangible personal property which is normally used for personal, family,\n# or household purposes, or (2) anything designed or sold for incorporation\n# into a dwelling.  In determining whether a product is a consumer product,\n# doubtful cases shall be resolved in favor of coverage.  For a particular\n# product received by a particular user, \"normally used\" refers to a\n# typical or common use of that class of product, regardless of the status\n# of the particular user or of the way in which the particular user\n# actually uses, or expects or is expected to use, the product.  A product\n# is a consumer product regardless of whether the product has substantial\n# commercial, industrial or non-consumer uses, unless such uses represent\n# the only significant mode of use of the product.\n# \n#   \"Installation Information\" for a User Product means any methods,\n# procedures, authorization keys, or other information required to install\n# and execute modified versions of a covered work in that User Product from\n# a modified version of its Corresponding Source.  The information must\n# suffice to ensure that the continued functioning of the modified object\n# code is in no case prevented or interfered with solely because\n# modification has been made.\n# \n#   If you convey an object code work under this section in, or with, or\n# specifically for use in, a User Product, and the conveying occurs as\n# part of a transaction in which the right of possession and use of the\n# User Product is transferred to the recipient in perpetuity or for a\n# fixed term (regardless of how the transaction is characterized), the\n# Corresponding Source conveyed under this section must be accompanied\n# by the Installation Information.  But this requirement does not apply\n# if neither you nor any third party retains the ability to install\n# modified object code on the User Product (for example, the work has\n# been installed in ROM).\n# \n#   The requirement to provide Installation Information does not include a\n# requirement to continue to provide support service, warranty, or updates\n# for a work that has been modified or installed by the recipient, or for\n# the User Product in which it has been modified or installed.  Access to a\n# network may be denied when the modification itself materially and\n# adversely affects the operation of the network or violates the rules and\n# protocols for communication across the network.\n# \n#   Corresponding Source conveyed, and Installation Information provided,\n# in accord with this section must be in a format that is publicly\n# documented (and with an implementation available to the public in\n# source code form), and must require no special password or key for\n# unpacking, reading or copying.\n# \n#   7. Additional Terms.\n# \n#   \"Additional permissions\" are terms that supplement the terms of this\n# License by making exceptions from one or more of its conditions.\n# Additional permissions that are applicable to the entire Program shall\n# be treated as though they were included in this License, to the extent\n# that they are valid under applicable law.  If additional permissions\n# apply only to part of the Program, that part may be used separately\n# under those permissions, but the entire Program remains governed by\n# this License without regard to the additional permissions.\n# \n#   When you convey a copy of a covered work, you may at your option\n# remove any additional permissions from that copy, or from any part of\n# it.  (Additional permissions may be written to require their own\n# removal in certain cases when you modify the work.)  You may place\n# additional permissions on material, added by you to a covered work,\n# for which you have or can give appropriate copyright permission.\n# \n#   Notwithstanding any other provision of this License, for material you\n# add to a covered work, you may (if authorized by the copyright holders of\n# that material) supplement the terms of this License with terms:\n# \n#     a) Disclaiming warranty or limiting liability differently from the\n#     terms of sections 15 and 16 of this License; or\n# \n#     b) Requiring preservation of specified reasonable legal notices or\n#     author attributions in that material or in the Appropriate Legal\n#     Notices displayed by works containing it; or\n# \n#     c) Prohibiting misrepresentation of the origin of that material, or\n#     requiring that modified versions of such material be marked in\n#     reasonable ways as different from the original version; or\n# \n#     d) Limiting the use for publicity purposes of names of licensors or\n#     authors of the material; or\n# \n#     e) Declining to grant rights under trademark law for use of some\n#     trade names, trademarks, or service marks; or\n# \n#     f) Requiring indemnification of licensors and authors of that\n#     material by anyone who conveys the material (or modified versions of\n#     it) with contractual assumptions of liability to the recipient, for\n#     any liability that these contractual assumptions directly impose on\n#     those licensors and authors.\n# \n#   All other non-permissive additional terms are considered \"further\n# restrictions\" within the meaning of section 10.  If the Program as you\n# received it, or any part of it, contains a notice stating that it is\n# governed by this License along with a term that is a further\n# restriction, you may remove that term.  If a license document contains\n# a further restriction but permits relicensing or conveying under this\n# License, you may add to a covered work material governed by the terms\n# of that license document, provided that the further restriction does\n# not survive such relicensing or conveying.\n# \n#   If you add terms to a covered work in accord with this section, you\n# must place, in the relevant source files, a statement of the\n# additional terms that apply to those files, or a notice indicating\n# where to find the applicable terms.\n# \n#   Additional terms, permissive or non-permissive, may be stated in the\n# form of a separately written license, or stated as exceptions;\n# the above requirements apply either way.\n# \n#   8. Termination.\n# \n#   You may not propagate or modify a covered work except as expressly\n# provided under this License.  Any attempt otherwise to propagate or\n# modify it is void, and will automatically terminate your rights under\n# this License (including any patent licenses granted under the third\n# paragraph of section 11).\n# \n#   However, if you cease all violation of this License, then your\n# license from a particular copyright holder is reinstated (a)\n# provisionally, unless and until the copyright holder explicitly and\n# finally terminates your license, and (b) permanently, if the copyright\n# holder fails to notify you of the violation by some reasonable means\n# prior to 60 days after the cessation.\n# \n#   Moreover, your license from a particular copyright holder is\n# reinstated permanently if the copyright holder notifies you of the\n# violation by some reasonable means, this is the first time you have\n# received notice of violation of this License (for any work) from that\n# copyright holder, and you cure the violation prior to 30 days after\n# your receipt of the notice.\n# \n#   Termination of your rights under this section does not terminate the\n# licenses of parties who have received copies or rights from you under\n# this License.  If your rights have been terminated and not permanently\n# reinstated, you do not qualify to receive new licenses for the same\n# material under section 10.\n# \n#   9. Acceptance Not Required for Having Copies.\n# \n#   You are not required to accept this License in order to receive or\n# run a copy of the Program.  Ancillary propagation of a covered work\n# occurring solely as a consequence of using peer-to-peer transmission\n# to receive a copy likewise does not require acceptance.  However,\n# nothing other than this License grants you permission to propagate or\n# modify any covered work.  These actions infringe copyright if you do\n# not accept this License.  Therefore, by modifying or propagating a\n# covered work, you indicate your acceptance of this License to do so.\n# \n#   10. Automatic Licensing of Downstream Recipients.\n# \n#   Each time you convey a covered work, the recipient automatically\n# receives a license from the original licensors, to run, modify and\n# propagate that work, subject to this License.  You are not responsible\n# for enforcing compliance by third parties with this License.\n# \n#   An \"entity transaction\" is a transaction transferring control of an\n# organization, or substantially all assets of one, or subdividing an\n# organization, or merging organizations.  If propagation of a covered\n# work results from an entity transaction, each party to that\n# transaction who receives a copy of the work also receives whatever\n# licenses to the work the party's predecessor in interest had or could\n# give under the previous paragraph, plus a right to possession of the\n# Corresponding Source of the work from the predecessor in interest, if\n# the predecessor has it or can get it with reasonable efforts.\n# \n#   You may not impose any further restrictions on the exercise of the\n# rights granted or affirmed under this License.  For example, you may\n# not impose a license fee, royalty, or other charge for exercise of\n# rights granted under this License, and you may not initiate litigation\n# (including a cross-claim or counterclaim in a lawsuit) alleging that\n# any patent claim is infringed by making, using, selling, offering for\n# sale, or importing the Program or any portion of it.\n# \n#   11. Patents.\n# \n#   A \"contributor\" is a copyright holder who authorizes use under this\n# License of the Program or a work on which the Program is based.  The\n# work thus licensed is called the contributor's \"contributor version\".\n# \n#   A contributor's \"essential patent claims\" are all patent claims\n# owned or controlled by the contributor, whether already acquired or\n# hereafter acquired, that would be infringed by some manner, permitted\n# by this License, of making, using, or selling its contributor version,\n# but do not include claims that would be infringed only as a\n# consequence of further modification of the contributor version.  For\n# purposes of this definition, \"control\" includes the right to grant\n# patent sublicenses in a manner consistent with the requirements of\n# this License.\n# \n#   Each contributor grants you a non-exclusive, worldwide, royalty-free\n# patent license under the contributor's essential patent claims, to\n# make, use, sell, offer for sale, import and otherwise run, modify and\n# propagate the contents of its contributor version.\n# \n#   In the following three paragraphs, a \"patent license\" is any express\n# agreement or commitment, however denominated, not to enforce a patent\n# (such as an express permission to practice a patent or covenant not to\n# sue for patent infringement).  To \"grant\" such a patent license to a\n# party means to make such an agreement or commitment not to enforce a\n# patent against the party.\n# \n#   If you convey a covered work, knowingly relying on a patent license,\n# and the Corresponding Source of the work is not available for anyone\n# to copy, free of charge and under the terms of this License, through a\n# publicly available network server or other readily accessible means,\n# then you must either (1) cause the Corresponding Source to be so\n# available, or (2) arrange to deprive yourself of the benefit of the\n# patent license for this particular work, or (3) arrange, in a manner\n# consistent with the requirements of this License, to extend the patent\n# license to downstream recipients.  \"Knowingly relying\" means you have\n# actual knowledge that, but for the patent license, your conveying the\n# covered work in a country, or your recipient's use of the covered work\n# in a country, would infringe one or more identifiable patents in that\n# country that you have reason to believe are valid.\n# \n#   If, pursuant to or in connection with a single transaction or\n# arrangement, you convey, or propagate by procuring conveyance of, a\n# covered work, and grant a patent license to some of the parties\n# receiving the covered work authorizing them to use, propagate, modify\n# or convey a specific copy of the covered work, then the patent license\n# you grant is automatically extended to all recipients of the covered\n# work and works based on it.\n# \n#   A patent license is \"discriminatory\" if it does not include within\n# the scope of its coverage, prohibits the exercise of, or is\n# conditioned on the non-exercise of one or more of the rights that are\n# specifically granted under this License.  You may not convey a covered\n# work if you are a party to an arrangement with a third party that is\n# in the business of distributing software, under which you make payment\n# to the third party based on the extent of your activity of conveying\n# the work, and under which the third party grants, to any of the\n# parties who would receive the covered work from you, a discriminatory\n# patent license (a) in connection with copies of the covered work\n# conveyed by you (or copies made from those copies), or (b) primarily\n# for and in connection with specific products or compilations that\n# contain the covered work, unless you entered into that arrangement,\n# or that patent license was granted, prior to 28 March 2007.\n# \n#   Nothing in this License shall be construed as excluding or limiting\n# any implied license or other defenses to infringement that may\n# otherwise be available to you under applicable patent law.\n# \n#   12. No Surrender of Others' Freedom.\n# \n#   If conditions are imposed on you (whether by court order, agreement or\n# otherwise) that contradict the conditions of this License, they do not\n# excuse you from the conditions of this License.  If you cannot convey a\n# covered work so as to satisfy simultaneously your obligations under this\n# License and any other pertinent obligations, then as a consequence you may\n# not convey it at all.  For example, if you agree to terms that obligate you\n# to collect a royalty for further conveying from those to whom you convey\n# the Program, the only way you could satisfy both those terms and this\n# License would be to refrain entirely from conveying the Program.\n# \n#   13. Use with the GNU Affero General Public License.\n# \n#   Notwithstanding any other provision of this License, you have\n# permission to link or combine any covered work with a work licensed\n# under version 3 of the GNU Affero General Public License into a single\n# combined work, and to convey the resulting work.  The terms of this\n# License will continue to apply to the part which is the covered work,\n# but the special requirements of the GNU Affero General Public License,\n# section 13, concerning interaction through a network will apply to the\n# combination as such.\n# \n#   14. Revised Versions of this License.\n# \n#   The Free Software Foundation may publish revised and/or new versions of\n# the GNU General Public License from time to time.  Such new versions will\n# be similar in spirit to the present version, but may differ in detail to\n# address new problems or concerns.\n# \n#   Each version is given a distinguishing version number.  If the\n# Program specifies that a certain numbered version of the GNU General\n# Public License \"or any later version\" applies to it, you have the\n# option of following the terms and conditions either of that numbered\n# version or of any later version published by the Free Software\n# Foundation.  If the Program does not specify a version number of the\n# GNU General Public License, you may choose any version ever published\n# by the Free Software Foundation.\n# \n#   If the Program specifies that a proxy can decide which future\n# versions of the GNU General Public License can be used, that proxy's\n# public statement of acceptance of a version permanently authorizes you\n# to choose that version for the Program.\n# \n#   Later license versions may give you additional or different\n# permissions.  However, no additional obligations are imposed on any\n# author or copyright holder as a result of your choosing to follow a\n# later version.\n# \n#   15. Disclaimer of Warranty.\n# \n#   THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\n# APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\n# HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\n# OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\n# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n# PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\n# IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\n# ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n# \n#   16. Limitation of Liability.\n# \n#   IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\n# WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\n# THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\n# GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\n# USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\n# DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\n# PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\n# EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\n# SUCH DAMAGES.\n# \n#   17. Interpretation of Sections 15 and 16.\n# \n#   If the disclaimer of warranty and limitation of liability provided\n# above cannot be given local legal effect according to their terms,\n# reviewing courts shall apply local law that most closely approximates\n# an absolute waiver of all civil liability in connection with the\n# Program, unless a warranty or assumption of liability accompanies a\n# copy of the Program in return for a fee.\n# \n#                      END OF TERMS AND CONDITIONS\n# \n#             How to Apply These Terms to Your New Programs\n# \n#   If you develop a new program, and you want it to be of the greatest\n# possible use to the public, the best way to achieve this is to make it\n# free software which everyone can redistribute and change under these terms.\n# \n#   To do so, attach the following notices to the program.  It is safest\n# to attach them to the start of each source file to most effectively\n# state the exclusion of warranty; and each file should have at least\n# the \"copyright\" line and a pointer to where the full notice is found.\n# \n#     <one line to give the program's name and a brief idea of what it does.>\n#     Copyright (C) <year>  <name of author>\n# \n#     This program is free software: you can redistribute it and/or modify\n#     it under the terms of the GNU General Public License as published by\n#     the Free Software Foundation, either version 3 of the License, or\n#     (at your option) any later version.\n# \n#     This program is distributed in the hope that it will be useful,\n#     but WITHOUT ANY WARRANTY; without even the implied warranty of\n#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#     GNU General Public License for more details.\n# \n#     You should have received a copy of the GNU General Public License\n#     along with this program.  If not, see <http://www.gnu.org/licenses/>.\n# \n# Also add information on how to contact you by electronic and paper mail.\n# \n#   If the program does terminal interaction, make it output a short\n# notice like this when it starts in an interactive mode:\n# \n#     <program>  Copyright (C) <year>  <name of author>\n#     This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n#     This is free software, and you are welcome to redistribute it\n#     under certain conditions; type `show c' for details.\n# \n# The hypothetical commands `show w' and `show c' should show the appropriate\n# parts of the General Public License.  Of course, your program's commands\n# might be different; for a GUI interface, you would use an \"about box\".\n# \n#   You should also get your employer (if you work as a programmer) or school,\n# if any, to sign a \"copyright disclaimer\" for the program, if necessary.\n# For more information on this, and how to apply and follow the GNU GPL, see\n# <http://www.gnu.org/licenses/>.\n# \n#   The GNU General Public License does not permit incorporating your program\n# into proprietary programs.  If your program is a subroutine library, you\n# may consider it more useful to permit linking proprietary applications with\n# the library.  If this is what you want to do, use the GNU Lesser General\n# Public License instead of this License.  But first, please read\n# <http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.6337890625,
          "content": "ffmpeg-windows-build-helpers\n============================\n\nThis helper script lets you cross compile a windows-based 32 or 64-bit version of ffmpeg.exe/mplayer/mp4box.exe, etc,  including their dependencies and libraries that they use.\nNote that I do offer custom builds, price negotiable. Ping me at rogerdpack@gmail.com and we can negotiate, I'll do the work for you :) \n\nThe script allows the user to build using a Linux host (which uses cross compiles to build windows binaries).  Windows users can use wsl or virtualbox (which run linux).\nBuilding on native linux box might take less time overall.\nNB if you use WSL Ubuntu 20.04 you need to do an extra step: https://github.com/rdp/ffmpeg-windows-build-helpers/issues/452 or look in the \"extra\" directory for a script to do various builds on WSL.\n\n**Cross-compiling from a Linux environment:**\n\nTakes about 2 hours.\n\nDeploy a Linux VM on the host of your choice (>= 20.04 for Ubuntu), or natively on an extra computer or a dual boot system, or via a hosting provider such as Digital Ocean.  Cheapest way: install windows 10 wsl bash shell.  Another option: linux on a virtualbox VM.  Another option, typically fast: temporarily rent a box (ex: DigitalOcean or vultr).  \n\nDownload the script by cloning this repository via git:\n\n    $ git clone https://github.com/rdp/ffmpeg-windows-build-helpers.git\n    $ cd ffmpeg-windows-build-helpers\n\n Now run the script:\n    \n    $ ./cross_compile_ffmpeg.sh\n\nAnswer the prompts.\nIt should end up with a working, statically-built ffmpeg.exe binary within the \"`sandbox/*/ffmpeg_git`\" director(ies).  You're done!\n\nIf you're on a \"too old\" version of linux (or a distro besides Ubuntu, which is the most supported) you may have luck with building it inside a \"docker\" see the docker directory.\n\nAnother option which might save time (but doesn't have as many options, just creates an ffmpeg/x264/fdk-aac) instead of running `./cross_compile_ffmpeg.sh` is to run \n\n    $ quick_build/quick_cross_compile_ffmpeg_fdk_aac_and_x264_using_packaged_mingw64.sh\n    \nscript.\nNote the \"quick\" part here which attempts to use the locally installed `mingw-w64` package from your distribution for the cross compiler, thus skipping the time-intensive cross-compiler toolchain build step.  It's not as well tested as running the normal one, however, which builds gcc from scratch.\n\nFor Mac OSX users, simply follow the instructions for Linux above and built it natively in OS X terminal.\n\nTo view additional arguments and options supported by the script, run:\n\n    ./cross_compile_ffmpeg.sh -h \n\nto see all the various options available.\n\nFor long running builds, do run them overnight as they take a while.  You can just let it go...\n\nIf you want to build a \"shared\" build (there's a command line option for that :) then link it into your MSVC project see https://stackoverflow.com/questions/11701635/use-ffmpeg-in-visual-studio/11701737\n\nAlso note that you can also \"cross compile\" mp4box, mplayer,mencoder and vlc binaries if you pass in the appropriate command line parameters. And a few others.\nSome of them are currently broken, send a PM if you'd want it fixed.\n\nTo enable Intel QuickSync encoders (supported on Windows vista and above), which is optional,  pass the  option `--build-intel-qsv=y` to the cross-compilation script above.\nThere is also an LGPL command line option for those that want that.\n\nIf you want to customize your FFmpeg final executable even further ( to remove features you don't need, make a smaller build, or custom build, etc.) then edit the script.\n1. Add or remove the \"`--enable-xxx`\" settings in the `build_ffmpeg` function (under `config_options`) near the bottom of the script.  This can enable or disable parts of FFmpeg to suit your requirements.\n\nYou may also add new dependencies and libraries to the project as shown:\n1. You can write custom functions for new features you want to integrate. Make sure to add them to the `build_dependencies()` functions and also include the corresponding \"`--enable-xxx`\" parameter switches to the `build_ffmpeg()` function under the `config_options`.\n2. There are some helper methods (quoted under `do_XXX` clauses. for checking out code, running make only once, etc. that may be useful.\n\nNote that you can optionally create a machine-optimized build by passing additional arguments to the  `--cflags` parameter, such as  --cflags='-march=athlon64-sse2 -O3' , as inferred by [mtune](https://gcc.gnu.org/onlinedocs/gcc-4.5.3/gcc/i386-and-x86_002d64-Options.html). Google mtune options for references to this. A good reference can be found on [Gentoo's wiki](https://wiki.gentoo.org/wiki/GCC_optimization).\nTake precautions not to use excessive flags without understanding their impact on performance.\n\nOne option you cannot use is `--cflags=-march=native` (the native flag doesn't work in cross compiler environments).\nTo find an appropriate \"native\" flag for your local box, do as illustrated here:\n\nOn the target machine,run:\n\n    % gcc -march=native -Q --help=target | grep march\n    -march=                               core-avx-i\n\nThen use the output shown (in this case, `core-avx-i`, corresponding to Intel's Sandy-bridge micro-architecture) on the build machine:\n\n    % gcc -march=core-avx-i ...\n\nBenchmarks prove that modifying the CFLAGS this way (at least using libx264) doesn't end up helping much speed-wise (it might make a smaller executable?) since libx264 auto detects and auto uses your cpu capabilities anyway, so until further research is done, these options may not actually provide significant or any speedup, while making the executable \"undistributable\" since it can only be run on certain cpu's, but it's fun!\nPing me if you get different results than this, as you may be wasting your time using the `--cflags=` parameter here.\n\nNote that the build scripts fetch stable sources (not mainline) which may contain slightly older/out of date dependency versions, and as such, there may be implied security risks (see CVEs that may not be patched downstream), though FFmpeg itself will be built from git master by default.\n\nNote that if you have wine installed (in linux) you may need to run this command first to disable it (if you are building for a different `-march=XX` than the building machine, especially), so that it doesn't auto run files like `conftest.exe`, etc. during the build (they may crash with an annoying popup prompt otherwise)\n\n    $ sudo update-binfmts --disable wine\n\nSee [this reference](http://askubuntu.com/questions/344088/how-to-ensure-wine-does-not-auto-run-exe-files) on the issue highlighted above. Failure to apply the workaround will most likely result in hangs (especially during the configure stage) as highlighted in the reference above.\n\nFeedback is welcome, send an email to roger-projects@googlegroups.com\n\nRelated projects (similar to this one...):\n  https://github.com/jb-alvarado/media-autobuild_suite (native'ish windows using msys2)\n  https://github.com/Warblefly/multimediaWin64 (native'ish windows using cygwin)\n  there's also the \"fast\" option see above, within this project\n\nRelated projects (that do cross compiling with dependency libraries):\n\n  vlc has a \"contribs\" building (cross compiling) system for its dependencies: https://wiki.videolan.org/Win32Compile/\n    (NB this script has an option to compile VLC as well, though currently it makes huge .exe files :)\n  mxe \"m cross environment\" https://github.com/mxe/mxe is a library for cross compiling many things, including FFmpeg I believe.\n\n[1] if you use a 512MB RAM droplet, make sure to first add some extra swap space: https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04 before starting.  \nHere's my vultr referral link in case you want it [you get $100 free credit] https://www.vultr.com/?ref=8518257-6G\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 5.3759765625,
          "content": "== actual todos ==\n\n== maybe/never do, more on the never... ==\nfix mplayer\n\nbuild \"all\" doesn't actually built low and high bitdepth x26x??\n\nfix vlc... :| then patch for DVD :)\npoor audio sdl ffplay something?\ntry more march, does it really even matter?\n  compare with gcc 4.9.3 ?? grr\n  try with latest gcc :|\n\nnvidia build various deps :)\n\nadd cygwin \"cygwin bash\" prompt [and combine...]\n\nrelease fei0r filters once\n\ndistro mp4box/anything else vaguely useful :|\n\nrelease 7z options too? :)\n\nrelease \"real\" static libs: http://stackoverflow.com/questions/11701635/use-ffmpeg-in-visual-studio\n\nXP mingwex?\ntest out mplayer with its record-size whatever...\nfix gsm shared is broken...that was painful...\n\nopencl support [copy in headers?] https://www.khronos.org/registry/cl/ it needs something to link against too...ai ai\n  I doubt you can use the kronos stuff but maybe...\n  apparently \"hard\" http://oscarbg.blogspot.com/2009/12/opencl-with-mingw.html but possible, but https://streamcomputing.eu/blog/2015-03-16/how-to-install-opencl-on-windows/ says just to download the drivers still :|\n  or maybe just use the most basic version and is ok? https://raw.githubusercontent.com/KhronosGroup/OpenCL-Headers/opencl12/opencl.h\n\nfigure out real static linkable builds [tell zeranoe to put them on his site?]\n  linkable against them with mingw, msvc...\n\nlibav.pc is missing myriad things [patches to ffmpeg-core?]\n  then use it in x264 LOL wait isn't that circular...ok maybe this is low prio\n\nadd more executables like the jb-alvarado one [?] meh\n\nnot use the \"default lib\" directory I guess, if that enables us to build versions for linux instead, easily, and as well...except shouldn't they use their own dep system? I guess it might still be convenient...awaiting more demand...\n\nauto detect new release versions of dependencies [that are active LOL]\n\nmplayer use svn trunk?\n\nfinal install of ffmpeg static to some folder etc. [?] yeah why not...\n  and .exe distro LOL\n\nreal distro/installer/put it online\n  release \"debug\" builds, full static linkable builds [?]\n\nask the x264 guys what is a good fprofiled option out there...\n\nwere there any other places with suspect non -march stuff?\n\nlinux VM download with all of it\n\nhttps://github.com/qyot27/mpv/blob/extra-new/DOCS/crosscompile-mingw-tedious.txt lists some more dependencies, some of which even work with FFmpeg.  Some might work with Mplayer.  Might as well add them, right?\n\ndon't ffmpeg enable runtime cpu detect for march cases? [meh, just for a smaller binary? or does it make it faster?]\n\nclean sandbox build all with libfdk [i.e. can it still build everything everything?] \n\nmarch without runtime cpu with hard core 1GB y4m fprofiled x264 and amd/intel cpu specified...LOLyeah...ask sherpya if he gets any speedups.\n\nuse libcaca git instead, tell them it still isn't enough...\n  https://ffmpeg.zeranoe.com/forum/viewtopic.php?t=1391 also tell them non windows xp? also tell mingw-w64 what?\n\ntest all things dvd to make sure they play anything...\n\n\n-d should auto select \"both 32 and 64 bit\" [XXX make it into command line param too?]\n\ncommand line option \"don't update any git repos\"\n\ncomplain on anybody that I have to sed their .pc files [yikes!]\n\n  check for any other configs zeranoe uses?\n\nfix all that are hard coded revision checkouts...meh\n\nSDL check if has same configure bug with 2.0, if so then file it...\n\nQt check if same weirdness with 5.1, if so then file it...\n\nit should notice when configure was originally from some other git commit...anyway today, if you go to ffmpeg, checkout a different branch, it doesn't reconfigure...\n\nx264 pkg-config should specify -libpthread? (repro by compiling ffmpeg with windows threads, you'll see...)\n  tell them? others that require tweaks also?\n\nout only real speedup hopes: configure ffmpeg --cpu, libx264 profile guided <sigh>\n  make march work with ffmpeg/x264\n   compare speeds, plus 64 vs 32 bit for everything\n  then with profiled LOL\n\ntell those that fail with multi-threaded make\n\ndistribute \"my own set of [I guess optimized?] binaries\" that are processor optimized (if it even matters speed-wise LOL).\n  though mine do have pthreads...but hopefully I can test and report and get the zeranoe ones built that way...share the workload :)\n  move all downloads to some place I control...maybe even \"all\" downloads LOL\n    old downloads to sourceforge [?]\n\na distro that's a VM they can just open up and hit \"go\" in :)\n\nmake it compilable on windows native...\n  release a downloadable \"click here to run it\" to build full libfdk-aac on windows LOL\n\nrelease \"some 10 bit, some not\" ?\n  command line?\n\nrelease some compiler optimized? does it make a difference? real installer?\n  ancient debug builds, etc...hmm...sourceforge for legacy? yeah\n\nadd openmp, for libsoxr? (any other dependency?)\n\ntest fribidi git master (does 0.19.5 fail? it should?) with wine installed\n\ntell orc+schro \"you didn't well cross compile!\"\n\ncalculate size of each piece, put it on a wiki somewhere...\n  startup slowdown, too?\n\nsupport external toolchains\n  then support \"checking if they already have zlib installed into it\"\n\n--enable-none --enable-x264 --enable-all-gpl --enable-all-non-free\n\nprofile guided builds?\n  major libs\n  everything\n\nother \"-march\" like options? fastmath? f full program?\n  x264 fomit frame pointer for 32 bit?\n\nqt seemed to infer too much about the cpu [possibly?]\n\nsomewhere mentioned the old \"-fwhole-project\" setting again somewhere LOL hmm...for optimizing x264 possibly?\n"
        },
        {
          "name": "cross_compile_ffmpeg.sh",
          "type": "blob",
          "size": 131.8701171875,
          "content": "#!/usr/bin/env bash\n# ffmpeg windows cross compile helper/download script, see github repo README\n# Copyright (C) 2012 Roger Pack, the script is under the GPLv3, but output FFmpeg's executables aren't\n# set -x\n\nyes_no_sel () {\n  unset user_input\n  local question=\"$1\"\n  shift\n  local default_answer=\"$1\"\n  while [[ \"$user_input\" != [YyNn] ]]; do\n    echo -n \"$question\"\n    read user_input\n    if [[ -z \"$user_input\" ]]; then\n      echo \"using default $default_answer\"\n      user_input=$default_answer\n    fi\n    if [[ \"$user_input\" != [YyNn] ]]; then\n      clear; echo 'Your selection was not vaild, please try again.'; echo\n    fi\n  done\n  # downcase it\n  user_input=$(echo $user_input | tr '[A-Z]' '[a-z]')\n}\n\nset_box_memory_size_bytes() {\n  if [[ $OSTYPE == darwin* ]]; then\n    box_memory_size_bytes=20000000000 # 20G fake it out for now :|\n  else\n    local ram_kilobytes=`grep MemTotal /proc/meminfo | awk '{print $2}'`\n    local swap_kilobytes=`grep SwapTotal /proc/meminfo | awk '{print $2}'`\n    box_memory_size_bytes=$[ram_kilobytes * 1024 + swap_kilobytes * 1024]\n  fi\n}\n\nfunction sortable_version { echo \"$@\" | awk -F. '{ printf(\"%d%03d%03d%03d\\n\", $1,$2,$3,$4); }'; }\n\nat_least_required_version() { # params: required actual\n  local sortable_required=$(sortable_version $1)\n  sortable_required=$(echo $sortable_required | sed 's/^0*//') # remove preceding zeroes, which bash later interprets as octal or screwy\n  local sortable_actual=$(sortable_version $2)\n  sortable_actual=$(echo $sortable_actual | sed 's/^0*//')\n  [[ \"$sortable_actual\" -ge \"$sortable_required\" ]]\n}\n\napt_not_installed() {\n  for x in \"$@\"; do\n    if ! dpkg -l \"$x\" | grep -q '^.i'; then\n      need_install=\"$need_install $x\"\n    fi\n  done\n  echo \"$need_install\"\n}\n\ncheck_missing_packages () {\n  # We will need this later if we don't want to just constantly be grepping the /etc/os-release file\n  if [ -z \"${VENDOR}\" ] && grep -E '(centos|rhel)' /etc/os-release &> /dev/null; then\n    # In RHEL this should always be set anyway. But not so sure about CentOS\n    VENDOR=\"redhat\"\n  fi\n  # zeranoe's build scripts use wget, though we don't here...\n  local check_packages=('ragel' 'curl' 'pkg-config' 'make' 'git' 'svn' 'gcc' 'autoconf' 'automake' 'yasm' 'cvs' 'flex' 'bison' 'makeinfo' 'g++' 'ed' 'pax' 'unzip' 'patch' 'wget' 'xz' 'nasm' 'gperf' 'autogen' 'bzip2' 'realpath' 'meson' 'clang' 'python')\n  # autoconf-archive is just for leptonica FWIW\n  # I'm not actually sure if VENDOR being set to centos is a thing or not. On all the centos boxes I can test on it's not been set at all.\n  # that being said, if it where set I would imagine it would be set to centos... And this contition will satisfy the \"Is not initially set\"\n  # case because the above code will assign \"redhat\" all the time.\n  if [ -z \"${VENDOR}\" ] || [ \"${VENDOR}\" != \"redhat\" ] && [ \"${VENDOR}\" != \"centos\" ]; then\n    check_packages+=('cmake')\n  fi\n  # libtool check is wonky...\n  if [[ $OSTYPE == darwin* ]]; then\n    check_packages+=('glibtoolize') # homebrew special :|\n  else\n    check_packages+=('libtoolize') # the rest of the world\n  fi\n  # Use hash to check if the packages exist or not. Type is a bash builtin which I'm told behaves differently between different versions of bash.\n  for package in \"${check_packages[@]}\"; do\n    hash \"$package\" &> /dev/null || missing_packages=(\"$package\" \"${missing_packages[@]}\")\n  done\n  if [ \"${VENDOR}\" = \"redhat\" ] || [ \"${VENDOR}\" = \"centos\" ]; then\n    if [ -n \"$(hash cmake 2>&1)\" ] && [ -n \"$(hash cmake3 2>&1)\" ]; then missing_packages=('cmake' \"${missing_packages[@]}\"); fi\n  fi\n  if [[ -n \"${missing_packages[@]}\" ]]; then\n    clear\n    echo \"Could not find the following execs (svn is actually package subversion, makeinfo is actually package texinfo if you're missing them): ${missing_packages[*]}\"\n    echo 'Install the missing packages before running this script.'\n    determine_distro\n\n    apt_pkgs='subversion ragel curl texinfo g++ ed bison flex cvs yasm automake libtool autoconf gcc cmake git make pkg-config zlib1g-dev unzip pax nasm gperf autogen bzip2 autoconf-archive p7zip-full meson clang'\n\n    [[ $DISTRO == \"debian\" ]] && apt_pkgs=\"$apt_pkgs libtool-bin ed\" # extra for debian\n    case \"$DISTRO\" in\n      Ubuntu)\n        echo \"for ubuntu:\"\n        echo \"$ sudo apt-get update\"\n        ubuntu_ver=\"$(lsb_release -rs)\"\n        if at_least_required_version \"18.04\" \"$ubuntu_ver\"; then\n          apt_pkgs=\"$apt_pkgs python3-distutils\" # guess it's no longer built-in, lensfun requires it...\n        fi\n        if at_least_required_version \"20.04\" \"$ubuntu_ver\"; then\n          apt_pkgs=\"$apt_pkgs python-is-python3\" # needed\n        fi\n        echo \"$ sudo apt-get install $apt_pkgs -y\"\n        if uname -a | grep  -q -- \"-microsoft\" ; then\n         echo NB if you use WSL Ubuntu 20.04 you need to do an extra step: https://github.com/rdp/ffmpeg-windows-build-helpers/issues/452\n\tfi\n        ;;\n      debian)\n        echo \"for debian:\"\n        echo \"$ sudo apt-get update\"\n        # Debian version is always encoded in the /etc/debian_version\n        # This file is deployed via the base-files package which is the essential one - deployed in all installations.\n        # See their content for individual debian releases - https://sources.debian.org/src/base-files/\n        # Stable releases contain a version number.\n        # Testing/Unstable releases contain a textual codename description (e.g. bullseye/sid)\n        #\n        deb_ver=\"$(cat /etc/debian_version)\"\n        # Upcoming codenames taken from https://en.wikipedia.org/wiki/Debian_version_history\n        #\n        if [[ $deb_ver =~ bullseye ]]; then\n            deb_ver=\"11\"\n        elif [[ $deb_ver =~ bookworm ]]; then\n            deb_ver=\"12\"\n        elif [[ $deb_ver =~ trixie ]]; then\n            deb_ver=\"13\"\n        fi\n        if at_least_required_version \"10\" \"$deb_ver\"; then\n          apt_pkgs=\"$apt_pkgs python3-distutils\" # guess it's no longer built-in, lensfun requires it...\n        fi\n        if at_least_required_version \"11\" \"$deb_ver\"; then\n          apt_pkgs=\"$apt_pkgs python-is-python3\" # needed\n        fi\n        apt_missing=\"$(apt_not_installed \"$apt_pkgs\")\"\n        echo \"$ sudo apt-get install $apt_missing -y\"\n        ;;\n      *)\n        echo \"for OS X (homebrew): brew install ragel wget cvs yasm autogen automake autoconf cmake libtool xz pkg-config nasm bzip2 autoconf-archive p7zip coreutils meson llvm\" # if edit this edit docker/Dockerfile also :|\n        echo \"   and set llvm to your PATH if on catalina\"\n        echo \"for RHEL/CentOS: First ensure you have epel repo available, then run $ sudo yum install ragel subversion texinfo libtool autogen gperf nasm patch unzip pax ed gcc-c++ bison flex yasm automake autoconf gcc zlib-devel cvs bzip2 cmake3 -y\"\n        echo \"for fedora: if your distribution comes with a modern version of cmake then use the same as RHEL/CentOS but replace cmake3 with cmake.\"\n        echo \"for linux native compiler option: same as <your OS> above, also add libva-dev\"\n        ;;\n    esac\n    exit 1\n  fi\n\n  export REQUIRED_CMAKE_VERSION=\"3.0.0\"\n  for cmake_binary in 'cmake' 'cmake3'; do\n    # We need to check both binaries the same way because the check for installed packages will work if *only* cmake3 is installed or\n    # if *only* cmake is installed.\n    # On top of that we ideally would handle the case where someone may have patched their version of cmake themselves, locally, but if\n    # the version of cmake required move up to, say, 3.1.0 and the cmake3 package still only pulls in 3.0.0 flat, then the user having manually\n    # installed cmake at a higher version wouldn't be detected.\n    if hash \"${cmake_binary}\"  &> /dev/null; then\n      cmake_version=\"$( \"${cmake_binary}\" --version | sed -e \"s#${cmake_binary}##g\" | head -n 1 | tr -cd '[0-9.\\n]' )\"\n      if at_least_required_version \"${REQUIRED_CMAKE_VERSION}\" \"${cmake_version}\"; then\n        export cmake_command=\"${cmake_binary}\"\n        break\n      else\n        echo \"your ${cmake_binary} version is too old ${cmake_version} wanted ${REQUIRED_CMAKE_VERSION}\"\n      fi\n    fi\n  done\n\n  # If cmake_command never got assigned then there where no versions found which where sufficient.\n  if [ -z \"${cmake_command}\" ]; then\n    echo \"there where no appropriate versions of cmake found on your machine.\"\n    exit 1\n  else\n    # If cmake_command is set then either one of the cmake's is adequate.\n    if [[ $cmake_command != \"cmake\" ]]; then # don't echo if it's the normal default\n      echo \"cmake binary for this build will be ${cmake_command}\"\n    fi\n  fi\n\n  if [[ ! -f /usr/include/zlib.h ]]; then\n    echo \"warning: you may need to install zlib development headers first if you want to build mp4-box [on ubuntu: $ apt-get install zlib1g-dev] [on redhat/fedora distros: $ yum install zlib-devel]\" # XXX do like configure does and attempt to compile and include zlib.h instead?\n    sleep 1\n  fi\n\n  # TODO nasm version :|\n\n  # doing the cut thing with an assigned variable dies on the version of yasm I have installed (which I'm pretty sure is the RHEL default)\n  # because of all the trailing lines of stuff\n  export REQUIRED_YASM_VERSION=\"1.2.0\" # export ???\n  local yasm_binary=yasm\n  local yasm_version=\"$( \"${yasm_binary}\" --version |sed -e \"s#${yasm_binary}##g\" | head -n 1 | tr -dc '[0-9.\\n]' )\"\n  if ! at_least_required_version \"${REQUIRED_YASM_VERSION}\" \"${yasm_version}\"; then\n    echo \"your yasm version is too old $yasm_version wanted ${REQUIRED_YASM_VERSION}\"\n    exit 1\n  fi\n  local meson_version=`meson --version`\n  if ! at_least_required_version \"0.49.2\" \"${meson_version}\"; then\n    echo \"your meson version is too old $meson_version wanted 0.49.2\"\n    exit 1\n  fi\n  # also check missing \"setup\" so it's early LOL\n\n  #check if WSL\n  # check WSL for interop setting make sure its disabled\n  # check WSL for kernel version look for version 4.19.128 current as of 11/01/2020\n  if uname -a | grep  -iq -- \"-microsoft\" ; then\n    if cat /proc/sys/fs/binfmt_misc/WSLInterop | grep -q enabled ; then\n      echo \"windows WSL detected: you must first disable 'binfmt' by running this\n      sudo bash -c 'echo 0 > /proc/sys/fs/binfmt_misc/WSLInterop'\n      then try again\"\n      #exit 1\n    fi\n    export MINIMUM_KERNEL_VERSION=\"4.19.128\"\n    KERNVER=$(uname -a | awk -F'[ ]' '{ print $3 }' | awk -F- '{ print $1 }')\n\n    function version { # for version comparison @ stackoverflow.com/a/37939589\n      echo \"$@\" | awk -F. '{ printf(\"%d%03d%03d%03d\\n\", $1,$2,$3,$4); }'\n    }\n\n    if [ $(version $KERNVER) -lt $(version $MINIMUM_KERNEL_VERSION) ]; then\n      echo \"Windows Subsystem for Linux (WSL) detected - kernel not at minumum version required: $MINIMUM_KERNEL_VERSION\n      Please update via windows update then try again\"\n      #exit 1\n    fi\n    echo \"for WSL ubuntu 20.04 you need to do an extra step https://github.com/rdp/ffmpeg-windows-build-helpers/issues/452\"\n  fi\n\n}\n\ndetermine_distro() {\n\n# Determine OS platform from https://askubuntu.com/a/459425/20972\nUNAME=$(uname | tr \"[:upper:]\" \"[:lower:]\")\n# If Linux, try to determine specific distribution\nif [ \"$UNAME\" == \"linux\" ]; then\n    # If available, use LSB to identify distribution\n    if [ -f /etc/lsb-release -o -d /etc/lsb-release.d ]; then\n        export DISTRO=$(lsb_release -i | cut -d: -f2 | sed s/'^\\t'//)\n    # Otherwise, use release info file\n    else\n        export DISTRO=$(grep '^ID' /etc/os-release | sed 's#.*=\\(\\)#\\1#')\n    fi\nfi\n# For everything else (or if above failed), just use generic identifier\n[ \"$DISTRO\" == \"\" ] && export DISTRO=$UNAME\nunset UNAME\n}\n\n\nintro() {\n  cat <<EOL\n     ##################### Welcome ######################\n  Welcome to the ffmpeg cross-compile builder-helper script.\n  Downloads and builds will be installed to directories within $cur_dir\n  If this is not ok, then exit now, and cd to the directory where you'd\n  like them installed, then run this script again from there.\n  NB that once you build your compilers, you can no longer rename/move\n  the sandbox directory, since it will have some hard coded paths in there.\n  You can, of course, rebuild ffmpeg from within it, etc.\nEOL\n  echo `date` # for timestamping super long builds LOL\n  if [[ $sandbox_ok != 'y' && ! -d sandbox ]]; then\n    echo\n    echo \"Building in $PWD/sandbox, will use ~ 12GB space!\"\n    echo\n  fi\n  mkdir -p \"$cur_dir\"\n  cd \"$cur_dir\"\n  if [[ $disable_nonfree = \"y\" ]]; then\n    non_free=\"n\"\n  else\n    if  [[ $disable_nonfree = \"n\" ]]; then\n      non_free=\"y\"\n    else\n      yes_no_sel \"Would you like to include non-free (non GPL compatible) libraries, like [libfdk_aac,decklink -- note that the internal AAC encoder is ruled almost as high a quality as fdk-aac these days]\nThe resultant binary may not be distributable, but can be useful for in-house use. Include these non-free license libraries [y/N]?\" \"n\"\n      non_free=\"$user_input\" # save it away\n    fi\n  fi\n  echo \"sit back, this may take awhile...\"\n}\n\npick_compiler_flavors() {\n  while [[ \"$compiler_flavors\" != [1-5] ]]; do\n    if [[ -n \"${unknown_opts[@]}\" ]]; then\n      echo -n 'Unknown option(s)'\n      for unknown_opt in \"${unknown_opts[@]}\"; do\n        echo -n \" '$unknown_opt'\"\n      done\n      echo ', ignored.'; echo\n    fi\n    cat <<'EOF'\nWhat version of MinGW-w64 would you like to build or update?\n  1. Both Win32 and Win64\n  2. Win32 (32-bit only)\n  3. Win64 (64-bit only)\n  4. Local native\n  5. Exit\nEOF\n    echo -n 'Input your choice [1-5]: '\n    read compiler_flavors\n  done\n  case \"$compiler_flavors\" in\n  1 ) compiler_flavors=multi ;;\n  2 ) compiler_flavors=win32 ;;\n  3 ) compiler_flavors=win64 ;;\n  4 ) compiler_flavors=native ;;\n  5 ) echo \"exiting\"; exit 0 ;;\n  * ) clear;  echo 'Your choice was not valid, please try again.'; echo ;;\n  esac\n}\n\n# made into a method so I don't/don't have to download this script every time if only doing just 32 or just6 64 bit builds...\ndownload_gcc_build_script() {\n    local zeranoe_script_name=$1\n    rm -f $zeranoe_script_name || exit 1\n    curl -4 file://$patch_dir/$zeranoe_script_name -O --fail || exit 1\n    chmod u+x $zeranoe_script_name\n}\n\ninstall_cross_compiler() {\n  local win32_gcc=\"cross_compilers/mingw-w64-i686/bin/i686-w64-mingw32-gcc\"\n  local win64_gcc=\"cross_compilers/mingw-w64-x86_64/bin/x86_64-w64-mingw32-gcc\"\n  if [[ -f $win32_gcc && -f $win64_gcc ]]; then\n   echo \"MinGW-w64 compilers both already installed, not re-installing...\"\n   if [[ -z $compiler_flavors ]]; then\n     echo \"selecting multi build (both win32 and win64)...since both cross compilers are present assuming you want both...\"\n     compiler_flavors=multi\n   fi\n   return # early exit they've selected at least some kind by this point...\n  fi\n\n  if [[ -z $compiler_flavors ]]; then\n    pick_compiler_flavors\n  fi\n  if [[ $compiler_flavors == \"native\" ]]; then\n    echo \"native build, not building any cross compilers...\"\n    return\n  fi\n\n  mkdir -p cross_compilers\n  cd cross_compilers\n\n    unset CFLAGS # don't want these \"windows target\" settings used the compiler itself since it creates executables to run on the local box (we have a parameter allowing them to set them for the script \"all builds\" basically)\n    # pthreads version to avoid having to use cvs for it\n    echo \"Starting to download and build cross compile version of gcc [requires working internet access] with thread count $gcc_cpu_count...\"\n    echo \"\"\n\n    # --disable-shared allows c++ to be distributed at all...which seemed necessary for some random dependency which happens to use/require c++...\n    local zeranoe_script_name=mingw-w64-build-r22.local\n    local zeranoe_script_options=\"--gcc-ver=10.2.0 --mingw-w64-ver=9.0.0 --default-configure --cpu-count=$gcc_cpu_count --disable-shared --clean-build --verbose --allow-overwrite --threads=winpthreads\" # allow-overwrite to avoid some crufty prompts if I do rebuilds [or maybe should just nuke everything...]\n    if [[ ($compiler_flavors == \"win32\" || $compiler_flavors == \"multi\") && ! -f ../$win32_gcc ]]; then\n      echo \"Building win32 cross compiler...\"\n      download_gcc_build_script $zeranoe_script_name\n      if [[ `uname` =~ \"5.1\" ]]; then # Avoid using secure API functions for compatibility with msvcrt.dll on Windows XP.\n        sed -i \"s/ --enable-secure-api//\" $zeranoe_script_name\n      fi\n      CFLAGS=-O2 CXXFLAGS=-O2 nice ./$zeranoe_script_name $zeranoe_script_options --build-type=win32 || exit 1\n      if [[ ! -f ../$win32_gcc ]]; then\n        echo \"Failure building 32 bit gcc? Recommend nuke sandbox (rm -rf sandbox) and start over...\"\n        exit 1\n      fi\n      if [[ ! -f  ../cross_compilers/mingw-w64-i686/i686-w64-mingw32/lib/libmingwex.a ]]; then\n\t      echo \"failure building mingwex? 32 bit\"\n\t      exit 1\n      fi\n    fi\n    if [[ ($compiler_flavors == \"win64\" || $compiler_flavors == \"multi\") && ! -f ../$win64_gcc ]]; then\n      echo \"Building win64 x86_64 cross compiler...\"\n      download_gcc_build_script $zeranoe_script_name\n      CFLAGS=-O2 CXXFLAGS=-O2 nice ./$zeranoe_script_name $zeranoe_script_options --build-type=win64 || exit 1\n      if [[ ! -f ../$win64_gcc ]]; then\n        echo \"Failure building 64 bit gcc? Recommend nuke sandbox (rm -rf sandbox) and start over...\"\n        exit 1\n      fi\n      if [[ ! -f  ../cross_compilers/mingw-w64-x86_64/x86_64-w64-mingw32/lib/libmingwex.a ]]; then\n\t      echo \"failure building mingwex? 64 bit\"\n\t      exit 1\n      fi\n    fi\n\n    # rm -f build.log # leave resultant build log...sometimes useful...\n    reset_cflags\n  cd ..\n  echo \"Done building (or already built) MinGW-w64 cross-compiler(s) successfully...\"\n  echo `date` # so they can see how long it took :)\n}\n\n# helper methods for downloading and building projects that can take generic input\n\ndo_svn_checkout() {\n  repo_url=\"$1\"\n  to_dir=\"$2\"\n  desired_revision=\"$3\"\n  if [ ! -d $to_dir ]; then\n    echo \"svn checking out to $to_dir\"\n    if [[ -z \"$desired_revision\" ]]; then\n      svn checkout $repo_url $to_dir.tmp  --non-interactive --trust-server-cert || exit 1\n    else\n      svn checkout -r $desired_revision $repo_url $to_dir.tmp || exit 1\n    fi\n    mv $to_dir.tmp $to_dir\n  else\n    cd $to_dir\n    echo \"not svn Updating $to_dir since usually svn repo's aren't updated frequently enough...\"\n    # XXX accomodate for desired revision here if I ever uncomment the next line...\n    # svn up\n    cd ..\n  fi\n}\n\n# params: git url, to_dir\nretry_git_or_die() {  # originally from https://stackoverflow.com/a/76012343/32453\n  local RETRIES_NO=50\n  local RETRY_DELAY=3\n  local repo_url=$1\n  local to_dir=$2\n\n  for i in $(seq 1 $RETRIES_NO); do\n   echo \"Downloading (via git clone) $to_dir from $repo_url\"\n   rm -rf $to_dir.tmp # just in case it was interrupted previously...not sure if necessary...\n   git clone $repo_url $to_dir.tmp --recurse-submodules && break\n   # get here -> failure\n   [[ $i -eq $RETRIES_NO ]] && echo \"Failed to execute git cmd $repo_url $to_dir after $RETRIES_NO retries\" && exit 1\n   echo \"sleeping before retry git\"\n   sleep ${RETRY_DELAY}\n  done\n  # prevent partial checkout confusion by renaming it only after success\n  mv $to_dir.tmp $to_dir\n  echo \"done git cloning to $to_dir\"\n}\n\ndo_git_checkout() {\n  local repo_url=\"$1\"\n  local to_dir=\"$2\"\n  if [[ -z $to_dir ]]; then\n    to_dir=$(basename $repo_url | sed s/\\.git/_git/) # http://y/abc.git -> abc_git\n  fi\n  local desired_branch=\"$3\"\n  if [ ! -d $to_dir ]; then\n    retry_git_or_die $repo_url $to_dir\n    cd $to_dir\n  else\n    cd $to_dir\n    if [[ $git_get_latest = \"y\" ]]; then\n      git fetch # want this for later...\n    else\n      echo \"not doing git get latest pull for latest code $to_dir\" # too slow'ish...\n    fi\n  fi\n\n  # reset will be useless if they didn't git_get_latest but pretty fast so who cares...plus what if they changed branches? :)\n  old_git_version=`git rev-parse HEAD`\n  if [[ -z $desired_branch ]]; then\n\t# Check for either \"origin/main\" or \"origin/master\".\n\tif [ $(git show-ref | grep -e origin\\/main$ -c) = 1 ]; then\n\t\tdesired_branch=\"origin/main\"\n\telif [ $(git show-ref | grep -e origin\\/master$ -c) = 1 ]; then\n\t\tdesired_branch=\"origin/master\"\n\telse\n\t\techo \"No valid git branch!\"\n\t\texit 1\n\tfi\n  fi\n  echo \"doing git checkout $desired_branch\"\n  git -c 'advice.detachedHead=false' checkout \"$desired_branch\" || (git_hard_reset && git -c 'advice.detachedHead=false' checkout \"$desired_branch\") || (git reset --hard \"$desired_branch\") || exit 1 # can't just use merge -f because might \"think\" patch files already applied when their changes have been lost, etc...\n  # vmaf on 16.04 needed that weird reset --hard? huh?\n  if git show-ref --verify --quiet \"refs/remotes/origin/$desired_branch\"; then # $desired_branch is actually a branch, not a tag or commit\n    git merge \"origin/$desired_branch\" || exit 1 # get incoming changes to a branch\n  fi\n  new_git_version=`git rev-parse HEAD`\n  if [[ \"$old_git_version\" != \"$new_git_version\" ]]; then\n    echo \"got upstream changes, forcing re-configure. Doing git clean\"\n    git_hard_reset\n  else\n    echo \"fetched no code changes, not forcing reconfigure for that...\"\n  fi\n  cd ..\n}\n\ngit_hard_reset() {\n  git reset --hard # throw away results of patch files\n  git clean -fx # throw away local changes; 'already_*' and bak-files for instance.\n}\n\nget_small_touchfile_name() { # have to call with assignment like a=$(get_small...)\n  local beginning=\"$1\"\n  local extra_stuff=\"$2\"\n  local touch_name=\"${beginning}_$(echo -- $extra_stuff $CFLAGS $LDFLAGS | /usr/bin/env md5sum)\" # md5sum to make it smaller, cflags to force rebuild if changes\n  touch_name=$(echo \"$touch_name\" | sed \"s/ //g\") # md5sum introduces spaces, remove them\n  echo \"$touch_name\" # bash cruddy return system LOL\n}\n\ndo_configure() {\n  local configure_options=\"$1\"\n  local configure_name=\"$2\"\n  if [[ \"$configure_name\" = \"\" ]]; then\n    configure_name=\"./configure\"\n  fi\n  local cur_dir2=$(pwd)\n  local english_name=$(basename $cur_dir2)\n  local touch_name=$(get_small_touchfile_name already_configured \"$configure_options $configure_name\")\n  if [ ! -f \"$touch_name\" ]; then\n    # make uninstall # does weird things when run under ffmpeg src so disabled for now...\n\n    echo \"configuring $english_name ($PWD) as $ PKG_CONFIG_PATH=$PKG_CONFIG_PATH PATH=$mingw_bin_path:\\$PATH $configure_name $configure_options\" # say it now in case bootstrap fails etc.\n    echo \"all touch files\" already_configured* touchname= \"$touch_name\"\n    echo \"config options \"$configure_options $configure_name\"\"\n    if [ -f bootstrap ]; then\n      ./bootstrap # some need this to create ./configure :|\n    fi\n    if [[ ! -f $configure_name && -f bootstrap.sh ]]; then # fftw wants to only run this if no configure :|\n      ./bootstrap.sh\n    fi\n    if [[ ! -f $configure_name ]]; then\n      echo \"running autoreconf to generate configure file for us...\"\n      autoreconf -fiv # a handful of them require this to create ./configure :|\n    fi\n    rm -f already_* # reset\n    chmod u+x \"$configure_name\" # In non-windows environments, with devcontainers, the configuration file doesn't have execution permissions\n    nice -n 5 \"$configure_name\" $configure_options || { echo \"failed configure $english_name\"; exit 1;} # less nicey than make (since single thread, and what if you're running another ffmpeg nice build elsewhere?)\n    touch -- \"$touch_name\"\n    echo \"doing preventative make clean\"\n    nice make clean -j $cpu_count # sometimes useful when files change, etc.\n  #else\n  #  echo \"already configured $(basename $cur_dir2)\"\n  fi\n}\n\ndo_make() {\n  local extra_make_options=\"$1\"\n  extra_make_options=\"$extra_make_options -j $cpu_count\"\n  local cur_dir2=$(pwd)\n  local touch_name=$(get_small_touchfile_name already_ran_make \"$extra_make_options\" )\n\n  if [ ! -f $touch_name ]; then\n    echo\n    echo \"Making $cur_dir2 as $ PATH=$mingw_bin_path:\\$PATH make $extra_make_options\"\n    echo\n    if [ ! -f configure ]; then\n      nice make clean -j $cpu_count # just in case helpful if old junk left around and this is a 're make' and wasn't cleaned at reconfigure time\n    fi\n    nice make $extra_make_options || exit 1\n    touch $touch_name || exit 1 # only touch if the build was OK\n  else\n    echo \"Already made $(dirname \"$cur_dir2\") $(basename \"$cur_dir2\") ...\"\n  fi\n}\n\ndo_make_and_make_install() {\n  local extra_make_options=\"$1\"\n  do_make \"$extra_make_options\"\n  do_make_install \"$extra_make_options\"\n}\n\ndo_make_install() {\n  local extra_make_install_options=\"$1\"\n  local override_make_install_options=\"$2\" # startingly, some need/use something different than just 'make install'\n  if [[ -z $override_make_install_options ]]; then\n    local make_install_options=\"install $extra_make_install_options\"\n  else\n    local make_install_options=\"$override_make_install_options $extra_make_install_options\"\n  fi\n  local touch_name=$(get_small_touchfile_name already_ran_make_install \"$make_install_options\")\n  if [ ! -f $touch_name ]; then\n    echo \"make installing $(pwd) as $ PATH=$mingw_bin_path:\\$PATH make $make_install_options\"\n    nice make $make_install_options || exit 1\n    touch $touch_name || exit 1\n  fi\n}\n\ndo_cmake() {\n  extra_args=\"$1\"\n  local build_from_dir=\"$2\"\n  if [[ -z $build_from_dir ]]; then\n    build_from_dir=\".\"\n  fi\n  local touch_name=$(get_small_touchfile_name already_ran_cmake \"$extra_args\")\n\n  if [ ! -f $touch_name ]; then\n    rm -f already_* # reset so that make will run again if option just changed\n    local cur_dir2=$(pwd)\n    echo doing cmake in $cur_dir2 with PATH=$mingw_bin_path:\\$PATH with extra_args=$extra_args like this:\n    if [[ $compiler_flavors != \"native\" ]]; then\n      local command=\"${build_from_dir} -DENABLE_STATIC_RUNTIME=1 -DBUILD_SHARED_LIBS=0 -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_FIND_ROOT_PATH=$mingw_w64_x86_64_prefix -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DCMAKE_RANLIB=${cross_prefix}ranlib -DCMAKE_C_COMPILER=${cross_prefix}gcc -DCMAKE_CXX_COMPILER=${cross_prefix}g++ -DCMAKE_RC_COMPILER=${cross_prefix}windres -DCMAKE_INSTALL_PREFIX=$mingw_w64_x86_64_prefix $extra_args\"\n    else\n      local command=\"${build_from_dir} -DENABLE_STATIC_RUNTIME=1 -DBUILD_SHARED_LIBS=0 -DCMAKE_INSTALL_PREFIX=$mingw_w64_x86_64_prefix $extra_args\"\n    fi\n    echo \"doing ${cmake_command}  -G\\\"Unix Makefiles\\\" $command\"\n    nice -n 5  ${cmake_command} -G\"Unix Makefiles\" $command || exit 1\n    touch $touch_name || exit 1\n  fi\n}\n\ndo_cmake_from_build_dir() { # some sources don't allow it, weird XXX combine with the above :)\n  source_dir=\"$1\"\n  extra_args=\"$2\"\n  do_cmake \"$extra_args\" \"$source_dir\"\n}\n\ndo_cmake_and_install() {\n  do_cmake \"$1\"\n  do_make_and_make_install\n}\n\ndo_meson() {\n    local configure_options=\"$1 --unity=off\"\n    local configure_name=\"$2\"\n    local configure_env=\"$3\"\n    local configure_noclean=\"\"\n    if [[ \"$configure_name\" = \"\" ]]; then\n        configure_name=\"meson\"\n    fi\n    local cur_dir2=$(pwd)\n    local english_name=$(basename $cur_dir2)\n    local touch_name=$(get_small_touchfile_name already_built_meson \"$configure_options $configure_name $LDFLAGS $CFLAGS\")\n    if [ ! -f \"$touch_name\" ]; then\n        if [ \"$configure_noclean\" != \"noclean\" ]; then\n            make clean # just in case\n        fi\n        rm -f already_* # reset\n        echo \"Using meson: $english_name ($PWD) as $ PATH=$PATH ${configure_env} $configure_name $configure_options\"\n        #env\n        \"$configure_name\" $configure_options || exit 1\n        touch -- \"$touch_name\"\n        make clean # just in case\n    else\n        echo \"Already used meson $(basename $cur_dir2)\"\n    fi\n}\n\ngeneric_meson() {\n    local extra_configure_options=\"$1\"\n    mkdir -pv build\n    do_meson \"--prefix=${mingw_w64_x86_64_prefix} --libdir=${mingw_w64_x86_64_prefix}/lib --buildtype=release --default-library=static --cross-file=${top_dir}/meson-cross.mingw.txt $extra_configure_options . build\"\n}\n\ngeneric_meson_ninja_install() {\n    generic_meson \"$1\"\n    do_ninja_and_ninja_install\n}\n\ndo_ninja_and_ninja_install() {\n    local extra_ninja_options=\"$1\"\n    do_ninja \"$extra_ninja_options\"\n    local touch_name=$(get_small_touchfile_name already_ran_make_install \"$extra_ninja_options\")\n    if [ ! -f $touch_name ]; then\n        echo \"ninja installing $(pwd) as $PATH=$PATH ninja -C build install $extra_make_options\"\n        ninja -C build install || exit 1\n        touch $touch_name || exit 1\n    fi\n}\n\ndo_ninja() {\n  local extra_make_options=\" -j $cpu_count\"\n  local cur_dir2=$(pwd)\n  local touch_name=$(get_small_touchfile_name already_ran_make \"${extra_make_options}\")\n\n  if [ ! -f $touch_name ]; then\n    echo\n    echo \"ninja-ing $cur_dir2 as $ PATH=$PATH ninja -C build \"${extra_make_options}\"\n    echo\n    ninja -C build \"${extra_make_options} || exit 1\n    touch $touch_name || exit 1 # only touch if the build was OK\n  else\n    echo \"already did ninja $(basename \"$cur_dir2\")\"\n  fi\n}\n\napply_patch() {\n  local url=$1 # if you want it to use a local file instead of a url one [i.e. local file with local modifications] specify it like file://localhost/full/path/to/filename.patch\n  local patch_type=$2\n  if [[ -z $patch_type ]]; then\n    patch_type=\"-p0\" # some are -p1 unfortunately, git's default\n  fi\n  local patch_name=$(basename $url)\n  local patch_done_name=\"$patch_name.done\"\n  if [[ ! -e $patch_done_name ]]; then\n    if [[ -f $patch_name ]]; then\n      rm $patch_name || exit 1 # remove old version in case it has been since updated on the server...\n    fi\n    curl -4 --retry 5 $url -O --fail || echo_and_exit \"unable to download patch file $url\"\n    echo \"applying patch $patch_name\"\n    patch $patch_type < \"$patch_name\" || exit 1\n    touch $patch_done_name || exit 1\n    # too crazy, you can't do do_configure then apply a patch?\n    # rm -f already_ran* # if it's a new patch, reset everything too, in case it's really really really new\n  #else\n  #  echo \"patch $patch_name already applied\" # too chatty\n  fi\n}\n\necho_and_exit() {\n  echo \"failure, exiting: $1\"\n  exit 1\n}\n\n# takes a url, output_dir as params, output_dir optional\ndownload_and_unpack_file() {\n  url=\"$1\"\n  output_name=$(basename $url)\n  output_dir=\"$2\"\n  if [[ -z $output_dir ]]; then\n    output_dir=$(basename $url | sed s/\\.tar\\.*//) # remove .tar.xx\n  fi\n  if [ ! -f \"$output_dir/unpacked.successfully\" ]; then\n    echo \"downloading $url\" # redownload in case failed...\n    if [[ -f $output_name ]]; then\n      rm $output_name || exit 1\n    fi\n\n    #  From man curl\n    #  -4, --ipv4\n    #  If curl is capable of resolving an address to multiple IP versions (which it is if it is  IPv6-capable),\n    #  this option tells curl to resolve names to IPv4 addresses only.\n    #  avoid a \"network unreachable\" error in certain [broken Ubuntu] configurations a user ran into once\n    #  -L means \"allow redirection\" or some odd :|\n\n    curl -4 \"$url\" --retry 50 -O -L --fail || echo_and_exit \"unable to download $url\"\n    echo \"unzipping $output_name ...\"\n    tar -xf \"$output_name\" || unzip \"$output_name\" || exit 1\n    touch \"$output_dir/unpacked.successfully\" || exit 1\n    rm \"$output_name\" || exit 1\n  fi\n}\n\ngeneric_configure() {\n  build_triple=\"${build_triple:-$(gcc -dumpmachine)}\"\n  local extra_configure_options=\"$1\"\n  if [[ -n $build_triple ]]; then extra_configure_options+=\" --build=$build_triple\"; fi\n  do_configure \"--host=$host_target --prefix=$mingw_w64_x86_64_prefix --disable-shared --enable-static $extra_configure_options\"\n}\n\n# params: url, optional \"english name it will unpack to\"\ngeneric_download_and_make_and_install() {\n  local url=\"$1\"\n  local english_name=\"$2\"\n  if [[ -z $english_name ]]; then\n    english_name=$(basename $url | sed s/\\.tar\\.*//) # remove .tar.xx, take last part of url\n  fi\n  local extra_configure_options=\"$3\"\n  download_and_unpack_file $url $english_name\n  cd $english_name || exit \"unable to cd, may need to specify dir it will unpack to as parameter\"\n  generic_configure \"$extra_configure_options\"\n  do_make_and_make_install\n  cd ..\n}\n\ndo_git_checkout_and_make_install() {\n  local url=$1\n  local git_checkout_name=$(basename $url | sed s/\\.git/_git/) # http://y/abc.git -> abc_git\n  do_git_checkout $url $git_checkout_name\n  cd $git_checkout_name\n    generic_configure_make_install\n  cd ..\n}\n\ngeneric_configure_make_install() {\n  if [ $# -gt 0 ]; then\n    echo \"cant pass parameters to this method today, they'd be a bit ambiguous\"\n    echo \"The following arguments where passed: ${@}\"\n    exit 1\n  fi\n  generic_configure # no parameters, force myself to break it up if needed\n  do_make_and_make_install\n}\n\ngen_ld_script() {\n  lib=$mingw_w64_x86_64_prefix/lib/$1\n  lib_s=\"$2\"\n  if [[ ! -f $mingw_w64_x86_64_prefix/lib/lib$lib_s.a ]]; then\n    echo \"Generating linker script $lib: $2 $3\"\n    mv -f $lib $mingw_w64_x86_64_prefix/lib/lib$lib_s.a\n    echo \"GROUP ( -l$lib_s $3 )\" > $lib\n  fi\n}\n\nbuild_dlfcn() {\n  do_git_checkout https://github.com/dlfcn-win32/dlfcn-win32.git\n  cd dlfcn-win32_git\n    if [[ ! -f Makefile.bak ]]; then # Change CFLAGS.\n      sed -i.bak \"s/-O3/-O2/\" Makefile\n    fi\n    do_configure \"--prefix=$mingw_w64_x86_64_prefix --cross-prefix=$cross_prefix\" # rejects some normal cross compile options so custom here\n    do_make_and_make_install\n    gen_ld_script libdl.a dl_s -lpsapi # dlfcn-win32's 'README.md': \"If you are linking to the static 'dl.lib' or 'libdl.a', then you would need to explicitly add 'psapi.lib' or '-lpsapi' to your linking command, depending on if MinGW is used.\"\n  cd ..\n}\n\nbuild_bzip2() {\n  download_and_unpack_file https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz\n  cd bzip2-1.0.8\n    apply_patch file://$patch_dir/bzip2-1.0.8_brokenstuff.diff\n    if [[ ! -f ./libbz2.a ]] || [[ -f $mingw_w64_x86_64_prefix/lib/libbz2.a && ! $(/usr/bin/env md5sum ./libbz2.a) = $(/usr/bin/env md5sum $mingw_w64_x86_64_prefix/lib/libbz2.a) ]]; then # Not built or different build installed\n      do_make \"$make_prefix_options libbz2.a\"\n      install -m644 bzlib.h $mingw_w64_x86_64_prefix/include/bzlib.h\n      install -m644 libbz2.a $mingw_w64_x86_64_prefix/lib/libbz2.a\n    else\n      echo \"Already made bzip2-1.0.8\"\n    fi\n  cd ..\n}\n\nbuild_liblzma() {\n  download_and_unpack_file https://sourceforge.net/projects/lzmautils/files/xz-5.2.5.tar.xz\n  cd xz-5.2.5\n    generic_configure \"--disable-xz --disable-xzdec --disable-lzmadec --disable-lzmainfo --disable-scripts --disable-doc --disable-nls\"\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_zlib() {\n  download_and_unpack_file https://github.com/madler/zlib/archive/v1.2.11.tar.gz zlib-1.2.11\n  cd zlib-1.2.11\n    local make_options\n    if [[ $compiler_flavors == \"native\" ]]; then\n      export CFLAGS=\"$CFLAGS -fPIC\" # For some reason glib needs this even though we build a static library\n    else\n      export ARFLAGS=rcs # Native can't take ARFLAGS; https://stackoverflow.com/questions/21396988/zlib-build-not-configuring-properly-with-cross-compiler-ignores-ar\n    fi\n    do_configure \"--prefix=$mingw_w64_x86_64_prefix --static\"\n    do_make_and_make_install \"$make_prefix_options ARFLAGS=rcs\"\n    if [[ $compiler_flavors == \"native\" ]]; then\n      reset_cflags\n    else\n      unset ARFLAGS\n    fi\n  cd ..\n}\n\nbuild_iconv() {\n  download_and_unpack_file https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.16.tar.gz\n  cd libiconv-1.16\n    generic_configure \"--disable-nls\"\n    do_make \"install-lib\" # No need for 'do_make_install', because 'install-lib' already has install-instructions.\n  cd ..\n}\n\nbuild_sdl2() {\n  download_and_unpack_file https://www.libsdl.org/release/SDL2-2.0.12.tar.gz\n  cd SDL2-2.0.12\n    apply_patch file://$patch_dir/SDL2-2.0.12_lib-only.diff\n    if [[ ! -f configure.bak ]]; then\n      sed -i.bak \"s/ -mwindows//\" configure # Allow ffmpeg to output anything to console.\n    fi\n    export CFLAGS=\"$CFLAGS -DDECLSPEC=\"  # avoid SDL trac tickets 939 and 282 [broken shared builds]\n    if [[ $compiler_flavors == \"native\" ]]; then\n      unset PKG_CONFIG_LIBDIR # Allow locally installed things for native builds; libpulse-dev is an important one otherwise no audio for most Linux\n    fi\n    generic_configure \"--bindir=$mingw_bin_path\"\n    do_make_and_make_install\n    if [[ $compiler_flavors == \"native\" ]]; then\n      export PKG_CONFIG_LIBDIR=\n    fi\n    if [[ ! -f $mingw_bin_path/$host_target-sdl2-config ]]; then\n      mv \"$mingw_bin_path/sdl2-config\" \"$mingw_bin_path/$host_target-sdl2-config\" # At the moment FFmpeg's 'configure' doesn't use 'sdl2-config', because it gives priority to 'sdl2.pc', but when it does, it expects 'i686-w64-mingw32-sdl2-config' in 'cross_compilers/mingw-w64-i686/bin'.\n    fi\n    reset_cflags\n  cd ..\n}\n\nbuild_amd_amf_headers() {\n  # was https://github.com/GPUOpen-LibrariesAndSDKs/AMF.git too big\n  # or https://github.com/DeadSix27/AMF smaller\n  # but even smaller!\n  do_git_checkout https://github.com/GPUOpen-LibrariesAndSDKs/AMF.git amf_headers_git\n\n  cd amf_headers_git\n    if [ ! -f \"already_installed\" ]; then\n      #rm -rf \"./Thirdparty\" # ?? plus too chatty...\n      if [ ! -d \"$mingw_w64_x86_64_prefix/include/AMF\" ]; then\n        mkdir -p \"$mingw_w64_x86_64_prefix/include/AMF\"\n      fi\n      cp -av \"amf/public/include/.\" \"$mingw_w64_x86_64_prefix/include/AMF\"\n      touch \"already_installed\"\n    fi\n  cd ..\n}\n\nbuild_nv_headers() {\n  if [[ $ffmpeg_git_checkout_version == *\"n6.0\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n5.1\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n5.0\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n4.4\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n4.3\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n4.2\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n4.1\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n3.4\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n3.2\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n2.8\"* ]]; then\n    # nv_headers for old versions\n    do_git_checkout https://github.com/FFmpeg/nv-codec-headers.git nv-codec-headers_git n12.0.16.1\n  else\n    do_git_checkout https://github.com/FFmpeg/nv-codec-headers.git\n  fi\n  cd nv-codec-headers_git\n    do_make_install \"PREFIX=$mingw_w64_x86_64_prefix\" # just copies in headers\n  cd ..\n}\n\nbuild_intel_qsv_mfx() { # disableable via command line switch...\n  do_git_checkout https://github.com/lu-zero/mfx_dispatch.git mfx_dispatch_git 2cd279f # lu-zero?? oh well seems somewhat supported...\n  cd mfx_dispatch_git\n    if [[ ! -f \"configure\" ]]; then\n      autoreconf -fiv || exit 1\n      automake --add-missing || exit 1\n    fi\n    if [[ $compiler_flavors == \"native\" && $OSTYPE != darwin* ]]; then\n      unset PKG_CONFIG_LIBDIR # allow mfx_dispatch to use libva-dev or some odd on linux...not sure for OS X so just disable it :)\n      generic_configure_make_install\n      export PKG_CONFIG_LIBDIR=\n    else\n      generic_configure_make_install\n    fi\n  cd ..\n}\n\nbuild_libleptonica() {\n  build_libjpeg_turbo\n  do_git_checkout https://github.com/DanBloomberg/leptonica.git leptonica_git 1.82.0\n  cd leptonica_git\n    export CPPFLAGS=\"-DOPJ_STATIC\"\n    generic_configure_make_install\n    reset_cppflags\n  cd ..\n}\n\nbuild_libtiff() {\n  build_libjpeg_turbo # auto uses it?\n  generic_download_and_make_and_install http://download.osgeo.org/libtiff/tiff-4.1.0.tar.gz\n  sed -i.bak 's/-ltiff.*$/-ltiff -llzma -ljpeg -lz/' $PKG_CONFIG_PATH/libtiff-4.pc # static deps\n}\n\nbuild_libtensorflow() {\n  do_git_checkout_and_make_install https://github.com/tensorflow/tensorflow.git\n}\n\nbuild_glib() {\n  export CPPFLAGS=\"$CPPFLAGS -DLIBXML_STATIC -liconv\" # gettext build...\n  generic_download_and_make_and_install  https://ftp.gnu.org/pub/gnu/gettext/gettext-0.21.tar.gz\n  reset_cppflags\n  generic_download_and_make_and_install  https://github.com/libffi/libffi/releases/download/v3.3/libffi-3.3.tar.gz # also dep\n  download_and_unpack_file https://gitlab.gnome.org/GNOME/glib/-/archive/2.64.3/glib-2.64.3.tar.gz\n  cd glib-2.64.3\n    apply_patch  file://$patch_dir/glib-2.64.3_mingw-static.patch -p1\n    export CPPFLAGS=\"$CPPFLAGS -pthread -DGLIB_STATIC_COMPILATION\"\n    export CXXFLAGS=\"$CFLAGS\" # Not certain this is needed, but it doesn't hurt\n    export LDFLAGS=\"-L${mingw_w64_x86_64_prefix}/lib\" # For some reason the frexp configure checks fail without this as math.h isn't found when cross-compiling; no negative impact for native builds\n    local meson_options=\"--prefix=${mingw_w64_x86_64_prefix} --libdir=${mingw_w64_x86_64_prefix}/lib --buildtype=release --default-library=static -Dinternal_pcre=true -Dforce_posix_threads=true . build\"\n    if [[ $compiler_flavors != \"native\" ]]; then\n      get_local_meson_cross_with_propeties # Need to add flags to meson properties; otherwise ran into some issues\n      meson_options+=\" --cross-file=meson-cross.mingw.txt\"\n    fi\n    do_meson \"$meson_options\"\n    do_ninja_and_ninja_install\n    if [[ $compiler_flavors == \"native\" ]]; then\n      sed -i.bak 's/-lglib-2.0.*$/-lglib-2.0 -pthread -lm -liconv/' $PKG_CONFIG_PATH/glib-2.0.pc\n    else\n      sed -i.bak 's/-lglib-2.0.*$/-lglib-2.0 -lintl -pthread -lws2_32 -lwinmm -lm -liconv -lole32/' $PKG_CONFIG_PATH/glib-2.0.pc\n    fi\n    reset_cppflags\n    unset CXXFLAGS\n    unset LDFLAGS\n  cd ..\n}\n\nbuild_lensfun() {\n  build_glib\n  do_git_checkout https://github.com/lensfun/lensfun.git lensfun_git v0.3.3\n  cd lensfun_git\n    export CMAKE_STATIC_LINKER_FLAGS='-lws2_32 -pthread'\n    do_cmake \"-DBUILD_STATIC=on -DCMAKE_INSTALL_DATAROOTDIR=$mingw_w64_x86_64_prefix\"\n    do_make\n    do_make_install\n    sed -i.bak 's/-llensfun/-llensfun -lstdc++/' \"$PKG_CONFIG_PATH/lensfun.pc\"\n    unset CMAKE_STATIC_LINKER_FLAGS\n  cd ..\n}\n\nbuild_libtesseract() {\n  build_libtiff # no disable configure option for this in tesseract? odd...\n  build_libleptonica\n  do_git_checkout https://github.com/tesseract-ocr/tesseract.git tesseract_git 4.1.1\n  cd tesseract_git\n    sed -i.bak 's/libcurl/libbcurl_disabled/g' configure.ac # --disable-curl hard disable, sometimes it's here but they link it wrong so punt...\n    if [[ $compiler_flavors != \"native\"  ]]; then\n      apply_patch file://$patch_dir/tesseract-4.1.1_mingw-std-threads.patch\n      generic_configure \"--disable-openmp\"\n      do_make_and_make_install\n      sed -i.bak 's/-ltesseract.*$/-ltesseract -lstdc++ -lws2_32 -llept -ltiff -llzma -ljpeg -lz/' $PKG_CONFIG_PATH/tesseract.pc # why does it needs winsock? LOL plus all of libtiff's <sigh>\n    else\n      generic_configure_make_install\n      sed -i.bak 's/-ltesseract.*$/-ltesseract -lstdc++ -llept -ltiff -llzma -ljpeg -lz -lgomp/' $PKG_CONFIG_PATH/tesseract.pc # see above, gomp for linux native\n    fi\n  cd ..\n}\n\nbuild_libzimg() {\n  do_git_checkout https://github.com/sekrit-twc/zimg.git zimg_git\n  cd zimg_git\n    generic_configure_make_install\n  cd ..\n}\n\nbuild_libopenjpeg() {\n  do_git_checkout https://github.com/uclouvain/openjpeg.git openjpeg_git v2.5.0\n  cd openjpeg_git\n    do_cmake_and_install \"-DBUILD_CODEC=0\"\n  cd ..\n}\n\nbuild_glew() {\n  download_and_unpack_file https://sourceforge.net/projects/glew/files/glew/2.2.0/glew-2.2.0.tgz glew-2.2.0\n  cd glew-2.2.0/build\n    local cmake_params=\"\"\n    if [[ $compiler_flavors != \"native\" ]]; then\n      cmake_params+=\" -DWIN32=1\"\n    fi\n    do_cmake_from_build_dir ./cmake \"$cmake_params\" # \"-DWITH_FFMPEG=0 -DOPENCV_GENERATE_PKGCONFIG=1 -DHAVE_DSHOW=0\"\n    do_make_and_make_install\n  cd ../..\n}\n\nbuild_glfw() {\n  download_and_unpack_file https://github.com/glfw/glfw/releases/download/3.3.2/glfw-3.3.2.zip glfw-3.3.2\n  cd glfw-3.3.2\n    do_cmake_and_install\n  cd ..\n}\n\nbuild_libpng() {\n  do_git_checkout https://github.com/glennrp/libpng.git\n  cd libpng_git\n    generic_configure\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_libwebp() {\n  do_git_checkout https://chromium.googlesource.com/webm/libwebp.git libwebp_git v1.2.4\n  cd libwebp_git\n    export LIBPNG_CONFIG=\"$mingw_w64_x86_64_prefix/bin/libpng-config --static\" # LibPNG somehow doesn't get autodetected.\n    generic_configure \"--disable-wic\"\n    do_make_and_make_install\n    unset LIBPNG_CONFIG\n  cd ..\n}\n\nbuild_harfbuzz() {\n  local new_build=false\n  do_git_checkout https://github.com/harfbuzz/harfbuzz.git harfbuzz_git \"93930fb1c49b85\" # keep old autogen build :)\n  if [ ! -f harfbuzz_git/already_done_harf ]; then # Not done or new master, so build\n    new_build=true\n  fi\n\n  # basically gleaned from https://gist.github.com/roxlu/0108d45308a0434e27d4320396399153\n  build_freetype \"--without-harfbuzz\" $new_build # Check for initial or new freetype or force rebuild if needed\n  local new_freetype=$?\n  if $new_build || [ $new_freetype = 0 ]; then # 0 is true\n    rm -f harfbuzz_git/already* # Force rebuilding in case only freetype has changed\n    # cmake no .pc file generated so use configure :|\n    cd harfbuzz_git\n      if [ ! -f configure ]; then\n        ./autogen.sh # :|\n      fi\n      export LDFLAGS=-lpthread # :|\n      generic_configure \"--with-freetype=yes --with-fontconfig=no --with-icu=no\" # no fontconfig, don't want another circular what? icu is #372\n      unset LDFLAGS\n      do_make_and_make_install\n    cd ..\n\n    build_freetype \"--with-harfbuzz\" true # with harfbuzz now...\n    touch harfbuzz_git/already_done_harf\n    echo \"Done harfbuzz\"\n  else\n    echo \"Already done harfbuzz\"\n  fi\n  sed -i.bak 's/-lfreetype.*/-lfreetype -lharfbuzz -lpng -lbz2 -lpthread/' \"$PKG_CONFIG_PATH/freetype2.pc\" # for some reason it lists harfbuzz as Requires.private only??\n  sed -i.bak 's/-lharfbuzz.*/-lfreetype -lharfbuzz -lpng -lbz2 -lpthread/' \"$PKG_CONFIG_PATH/harfbuzz.pc\" # does anything even use this?\n  sed -i.bak 's/libfreetype.la -lbz2/libfreetype.la -lharfbuzz -lpng -lbz2 -lpthread/' \"${mingw_w64_x86_64_prefix}/lib/libfreetype.la\" # XXX what the..needed?\n  sed -i.bak 's/libfreetype.la -lbz2/libfreetype.la -lharfbuzz -lpng -lbz2 -lpthread/' \"${mingw_w64_x86_64_prefix}/lib/libharfbuzz.la\"\n}\n\nbuild_freetype() {\n  local force_build=$2\n  local new_build=1\n  if [[ ! -f freetype-2.10.4/already_done_freetype || $force_build = true ]]; then\n    download_and_unpack_file https://sourceforge.net/projects/freetype/files/freetype2/2.10.4/freetype-2.10.4.tar.xz\n    rm -f freetype-2.10.4/already*\n    cd freetype-2.10.4\n        apply_patch file://$patch_dir/freetype2-crosscompiled-apinames.diff # src/tools/apinames.c gets crosscompiled and makes the compilation fail\n        # harfbuzz autodetect :|\n        generic_configure \"--with-bzip2 $1\"\n        do_make_and_make_install\n        touch already_done_freetype\n        new_build=0\n    cd ..\n  fi\n  return $new_build # Give caller a way to know if a new build was done\n}\n\nbuild_libxml2() {\n  download_and_unpack_file http://xmlsoft.org/sources/libxml2-2.9.10.tar.gz libxml2-2.9.10\n  cd libxml2-2.9.10\n    generic_configure \"--with-ftp=no --with-http=no --with-python=no\"\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_libvmaf() {\n  do_git_checkout https://github.com/Netflix/vmaf.git vmaf_git v2.3.0\n  cd vmaf_git\n    cd libvmaf\n    export CFLAGS=\"$CFLAGS -pthread\"\n    export CXXFLAGS=\"$CFLAGS -pthread\"\n    export LDFLAGS=\"-pthread\" # Needed here too for some reason\n    mkdir build\n    local meson_options=\"--prefix=${mingw_w64_x86_64_prefix} --libdir=${mingw_w64_x86_64_prefix}/lib --buildtype=release --default-library=static . build\"\n    if [[ $compiler_flavors != \"native\" ]]; then\n      get_local_meson_cross_with_propeties # Need to add flags to meson properties; otherwise ran into some issues\n      meson_options+=\" --cross-file=meson-cross.mingw.txt\"\n    fi\n    do_meson \"$meson_options\"\n    do_ninja_and_ninja_install\n    reset_cflags\n    unset CXXFLAGS\n    unset LDFLAGS\n    if [[ $compiler_flavors == \"native\" ]]; then # Can't find a way to not build these; meson is already set to --default-library=static but it still builds both\n      rm -f ${mingw_w64_x86_64_prefix}/lib/libvmaf.so\n    else\n      rm -f ${mingw_w64_x86_64_prefix}/lib/libvmaf.dll.a\n    fi\n    sed -i.bak \"s/Libs: .*/& -lstdc++/\" \"$PKG_CONFIG_PATH/libvmaf.pc\" # .pc is still broken\n  cd ../..\n}\n\nbuild_fontconfig() {\n  download_and_unpack_file https://www.freedesktop.org/software/fontconfig/release/fontconfig-2.13.92.tar.xz\n  cd fontconfig-2.13.92\n    #export CFLAGS= # compile fails with -march=sandybridge ... with mingw 4.0.6 at least ...\n    generic_configure \"--enable-iconv --enable-libxml2 --disable-docs --with-libiconv\" # Use Libxml2 instead of Expat.\n    do_make_and_make_install\n    #reset_cflags\n  cd ..\n}\n\nbuild_gmp() {\n  download_and_unpack_file https://ftp.gnu.org/pub/gnu/gmp/gmp-6.2.1.tar.xz\n  cd gmp-6.2.1\n    export CC_FOR_BUILD=/usr/bin/gcc # WSL seems to need this..\n    export CPP_FOR_BUILD=usr/bin/cpp\n    generic_configure \"ABI=$bits_target\"\n    unset CC_FOR_BUILD\n    unset CPP_FOR_BUILD\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_librtmfp() {\n  # needs some version of openssl...\n  # build_openssl-1.0.2 # fails OS X\n  build_openssl-1.1.1\n  do_git_checkout https://github.com/MonaSolutions/librtmfp.git\n  cd librtmfp_git/include/Base\n    do_git_checkout https://github.com/meganz/mingw-std-threads.git mingw-std-threads # our g++ apparently doesn't have std::mutex baked in...weird...this replaces it...\n  cd ../../..\n  cd librtmfp_git\n    if [[ $compiler_flavors != \"native\" ]]; then\n      apply_patch file://$patch_dir/rtmfp.static.cross.patch -p1 # works e48efb4f\n      apply_patch file://$patch_dir/rtmfp_capitalization.diff -p1 # cross for windows needs it if on linux...\n      apply_patch file://$patch_dir/librtmfp_xp.diff.diff -p1 # cross for windows needs it if on linux...\n    else\n      apply_patch file://$patch_dir/rtfmp.static.make.patch -p1\n    fi\n    do_make \"$make_prefix_options GPP=${cross_prefix}g++\"\n    do_make_install \"prefix=$mingw_w64_x86_64_prefix PKGCONFIGPATH=$PKG_CONFIG_PATH\"\n    if [[ $compiler_flavors == \"native\" ]]; then\n      sed -i.bak 's/-lrtmfp.*/-lrtmfp -lstdc++/' \"$PKG_CONFIG_PATH/librtmfp.pc\"\n    else\n      sed -i.bak 's/-lrtmfp.*/-lrtmfp -lstdc++ -lws2_32 -liphlpapi/' \"$PKG_CONFIG_PATH/librtmfp.pc\"\n    fi\n  cd ..\n}\n\nbuild_libnettle() {\n  download_and_unpack_file https://ftp.gnu.org/gnu/nettle/nettle-3.6.tar.gz\n  cd nettle-3.6\n    local config_options=\"--disable-openssl --disable-documentation\" # in case we have both gnutls and openssl, just use gnutls [except that gnutls uses this so...huh?\n    if [[ $compiler_flavors == \"native\" ]]; then\n      config_options+=\" --libdir=${mingw_w64_x86_64_prefix}/lib\" # Otherwise native builds install to /lib32 or /lib64 which gnutls doesn't find\n    fi\n    generic_configure \"$config_options\" # in case we have both gnutls and openssl, just use gnutls [except that gnutls uses this so...huh? https://github.com/rdp/ffmpeg-windows-build-helpers/issues/25#issuecomment-28158515\n    do_make_and_make_install # What's up with \"Configured with: ... --with-gmp=/cygdrive/d/ffmpeg-windows-build-helpers-master/native_build/windows/ffmpeg_local_builds/sandbox/cross_compilers/pkgs/gmp/gmp-6.1.2-i686\" in 'config.log'? Isn't the 'gmp-6.1.2' above being used?\n  cd ..\n}\n\nbuild_unistring() {\n  generic_download_and_make_and_install https://ftp.gnu.org/gnu/libunistring/libunistring-0.9.10.tar.xz\n}\n\nbuild_libidn2() {\n  generic_download_and_make_and_install https://ftp.gnu.org/gnu/libidn/libidn2-2.3.0.tar.gz\n}\n\nbuild_gnutls() {\n  download_and_unpack_file https://www.gnupg.org/ftp/gcrypt/gnutls/v3.6/gnutls-3.6.15.tar.xz\n  cd gnutls-3.6.15\n    # --disable-cxx don't need the c++ version, in an effort to cut down on size... XXXX test size difference...\n    # --enable-local-libopts to allow building with local autogen installed,\n    # --disable-guile is so that if it finds guile installed (cygwin did/does) it won't try and link/build to it and fail...\n    # libtasn1 is some dependency, appears provided is an option [see also build_libnettle]\n    # pks #11 hopefully we don't need kit\n    apply_patch file://$patch_dir/gnutls-windows8.patch -p1 # defaults to win 8 kind of, either this or setWINNT_VER :|\n    generic_configure \"--disable-doc --disable-tools --disable-cxx --disable-tests --disable-gtk-doc-html --disable-libdane --disable-nls --enable-local-libopts --disable-guile --with-included-libtasn1 --without-p11-kit\"\n    do_make_and_make_install\n    if [[ $compiler_flavors != \"native\"  ]]; then\n      # libsrt doesn't know how to use its pkg deps, so put them in as non-static deps :| https://github.com/Haivision/srt/issues/565\n      sed -i.bak 's/-lgnutls.*/-lgnutls -lcrypt32 -lnettle -lhogweed -lgmp -lidn2 -liconv -lunistring/' \"$PKG_CONFIG_PATH/gnutls.pc\"\n      if [[ $OSTYPE == darwin* ]]; then\n        sed -i.bak 's/-lgnutls.*/-lgnutls -framework Security -framework Foundation/' \"$PKG_CONFIG_PATH/gnutls.pc\"\n      fi\n    fi\n  cd ..\n}\n\nbuild_openssl-1.0.2() {\n  download_and_unpack_file https://www.openssl.org/source/openssl-1.0.2p.tar.gz\n  cd openssl-1.0.2p\n    apply_patch file://$patch_dir/openssl-1.0.2l_lib-only.diff\n    export CC=\"${cross_prefix}gcc\"\n    export AR=\"${cross_prefix}ar\"\n    export RANLIB=\"${cross_prefix}ranlib\"\n    local config_options=\"--prefix=$mingw_w64_x86_64_prefix zlib \"\n    if [ \"$1\" = \"dllonly\" ]; then\n      config_options+=\"shared \"\n    else\n      config_options+=\"no-shared no-dso \"\n    fi\n    if [ \"$bits_target\" = \"32\" ]; then\n      config_options+=\"mingw\" # Build shared libraries ('libeay32.dll' and 'ssleay32.dll') if \"dllonly\" is specified.\n      local arch=x86\n    else\n      config_options+=\"mingw64\" # Build shared libraries ('libeay64.dll' and 'ssleay64.dll') if \"dllonly\" is specified.\n      local arch=x86_64\n    fi\n    do_configure \"$config_options\" ./Configure\n    if [[ ! -f Makefile_1 ]]; then\n      sed -i_1 \"s/-O3/-O2/\" Makefile # Change CFLAGS (OpenSSL's 'Configure' already creates a 'Makefile.bak').\n    fi\n    if [ \"$1\" = \"dllonly\" ]; then\n      do_make \"build_libs\"\n\n      mkdir -p $cur_dir/redist # Strip and pack shared libraries.\n      archive=\"$cur_dir/redist/openssl-${arch}-v1.0.2l.7z\"\n      if [[ ! -f $archive ]]; then\n        for sharedlib in *.dll; do\n          ${cross_prefix}strip $sharedlib\n        done\n        sed \"s/$/\\r/\" LICENSE > LICENSE.txt\n        7z a -mx=9 $archive *.dll LICENSE.txt && rm -f LICENSE.txt\n      fi\n    else\n      do_make_and_make_install\n    fi\n    unset CC\n    unset AR\n    unset RANLIB\n  cd ..\n}\n\nbuild_openssl-1.1.1() {\n  download_and_unpack_file https://www.openssl.org/source/openssl-1.1.1.tar.gz\n  cd openssl-1.1.1\n    export CC=\"${cross_prefix}gcc\"\n    export AR=\"${cross_prefix}ar\"\n    export RANLIB=\"${cross_prefix}ranlib\"\n    local config_options=\"--prefix=$mingw_w64_x86_64_prefix zlib \"\n    if [ \"$1\" = \"dllonly\" ]; then\n      config_options+=\"shared no-engine \"\n    else\n      config_options+=\"no-shared no-dso no-engine \"\n    fi\n    if [[ `uname` =~ \"5.1\" ]] || [[ `uname` =~ \"6.0\" ]]; then\n      config_options+=\"no-async \" # \"Note: on older OSes, like CentOS 5, BSD 5, and Windows XP or Vista, you will need to configure with no-async when building OpenSSL 1.1.0 and above. The configuration system does not detect lack of the Posix feature on the platforms.\" (https://wiki.openssl.org/index.php/Compilation_and_Installation)\n    fi\n    if [[ $compiler_flavors == \"native\" ]]; then\n      if [[ $OSTYPE == darwin* ]]; then\n        config_options+=\"darwin64-x86_64-cc \"\n      else\n        config_options+=\"linux-generic64 \"\n      fi\n      local arch=native\n    elif [ \"$bits_target\" = \"32\" ]; then\n      config_options+=\"mingw\" # Build shared libraries ('libcrypto-1_1.dll' and 'libssl-1_1.dll') if \"dllonly\" is specified.\n      local arch=x86\n    else\n      config_options+=\"mingw64\" # Build shared libraries ('libcrypto-1_1-x64.dll' and 'libssl-1_1-x64.dll') if \"dllonly\" is specified.\n      local arch=x86_64\n    fi\n    do_configure \"$config_options\" ./Configure\n    if [[ ! -f Makefile.bak ]]; then # Change CFLAGS.\n      sed -i.bak \"s/-O3/-O2/\" Makefile\n    fi\n    do_make \"build_libs\"\n    if [ \"$1\" = \"dllonly\" ]; then\n      mkdir -p $cur_dir/redist # Strip and pack shared libraries.\n      archive=\"$cur_dir/redist/openssl-${arch}-v1.1.0f.7z\"\n      if [[ ! -f $archive ]]; then\n        for sharedlib in *.dll; do\n          ${cross_prefix}strip $sharedlib\n        done\n        sed \"s/$/\\r/\" LICENSE > LICENSE.txt\n        7z a -mx=9 $archive *.dll LICENSE.txt && rm -f LICENSE.txt\n      fi\n    else\n      do_make_install \"\" \"install_dev\"\n    fi\n    unset CC\n    unset AR\n    unset RANLIB\n  cd ..\n}\n\nbuild_libogg() {\n  do_git_checkout https://github.com/xiph/ogg.git\n  cd ogg_git\n    generic_configure_make_install\n  cd ..\n}\n\nbuild_libvorbis() {\n  do_git_checkout https://github.com/xiph/vorbis.git\n  cd vorbis_git\n    generic_configure \"--disable-docs --disable-examples --disable-oggtest\"\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_libopus() {\n  do_git_checkout https://github.com/xiph/opus.git opus_git origin/main\n  cd opus_git\n    generic_configure \"--disable-doc --disable-extra-programs --disable-stack-protector\"\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_libspeexdsp() {\n  do_git_checkout https://github.com/xiph/speexdsp.git\n  cd speexdsp_git\n    generic_configure \"--disable-examples\"\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_libspeex() {\n  do_git_checkout https://github.com/xiph/speex.git\n  cd speex_git\n    export SPEEXDSP_CFLAGS=\"-I$mingw_w64_x86_64_prefix/include\"\n    export SPEEXDSP_LIBS=\"-L$mingw_w64_x86_64_prefix/lib -lspeexdsp\" # 'configure' somehow can't find SpeexDSP with 'pkg-config'.\n    generic_configure \"--disable-binaries\" # If you do want the libraries, then 'speexdec.exe' needs 'LDFLAGS=-lwinmm'.\n    do_make_and_make_install\n    unset SPEEXDSP_CFLAGS\n    unset SPEEXDSP_LIBS\n  cd ..\n}\n\nbuild_libtheora() {\n  do_git_checkout https://github.com/xiph/theora.git\n  cd theora_git\n    generic_configure \"--disable-doc --disable-spec --disable-oggtest --disable-vorbistest --disable-examples --disable-asm\" # disable asm: avoid [theora @ 0x1043144a0]error in unpack_block_qpis in 64 bit... [OK OS X 64 bit tho...]\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_libsndfile() {\n  do_git_checkout https://github.com/libsndfile/libsndfile.git\n  cd libsndfile_git\n    generic_configure \"--disable-sqlite --disable-external-libs --disable-full-suite\"\n    do_make_and_make_install\n    if [ \"$1\" = \"install-libgsm\" ]; then\n      if [[ ! -f $mingw_w64_x86_64_prefix/lib/libgsm.a ]]; then\n        install -m644 src/GSM610/gsm.h $mingw_w64_x86_64_prefix/include/gsm.h || exit 1\n        install -m644 src/GSM610/.libs/libgsm.a $mingw_w64_x86_64_prefix/lib/libgsm.a || exit 1\n      else\n        echo \"already installed GSM 6.10 ...\"\n      fi\n    fi\n  cd ..\n}\n\nbuild_mpg123() {\n  do_svn_checkout svn://scm.orgis.org/mpg123/trunk mpg123_svn r5008 # avoid Think again failure\n  cd mpg123_svn\n    generic_configure\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_lame() {\n  do_svn_checkout https://svn.code.sf.net/p/lame/svn/trunk/lame lame_svn \n  cd lame_svn\n    sed -i.bak '1s/^\\xEF\\xBB\\xBF//' libmp3lame/i386/nasm.h # Remove a UTF-8 BOM that breaks nasm if it's still there; should be fixed in trunk eventually https://sourceforge.net/p/lame/patches/81/\n    generic_configure \"--enable-nasm --enable-libmpg123\"\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_twolame() {\n  do_git_checkout https://github.com/njh/twolame.git twolame_git \"origin/main\"\n  cd twolame_git\n    if [[ ! -f Makefile.am.bak ]]; then # Library only, front end refuses to build for some reason with git master\n      sed -i.bak \"/^SUBDIRS/s/ frontend.*//\" Makefile.am || exit 1\n    fi\n    cpu_count=1 # maybe can't handle it http://betterlogic.com/roger/2017/07/mp3lame-woe/ comments\n    generic_configure_make_install\n    cpu_count=$original_cpu_count\n  cd ..\n}\n\nbuild_fdk-aac() {\nlocal checkout_dir=fdk-aac_git\n    if [[ ! -z $fdk_aac_git_checkout_version ]]; then\n      checkout_dir+=\"_$fdk_aac_git_checkout_version\"\n      do_git_checkout \"https://github.com/mstorsjo/fdk-aac.git\" $checkout_dir \"refs/tags/$fdk_aac_git_checkout_version\"\n    else\n      do_git_checkout \"https://github.com/mstorsjo/fdk-aac.git\" $checkout_dir\n    fi\n  cd $checkout_dir\n    if [[ ! -f \"configure\" ]]; then\n      autoreconf -fiv || exit 1\n    fi\n    generic_configure_make_install\n  cd ..\n}\n\nbuild_libopencore() {\n  generic_download_and_make_and_install https://sourceforge.net/projects/opencore-amr/files/opencore-amr/opencore-amr-0.1.5.tar.gz\n  generic_download_and_make_and_install https://sourceforge.net/projects/opencore-amr/files/vo-amrwbenc/vo-amrwbenc-0.1.3.tar.gz\n}\n\nbuild_libilbc() {\n  do_git_checkout https://github.com/TimothyGu/libilbc.git libilbc_git v2.0.2\n  cd libilbc_git\n    generic_configure_make_install\n  cd ..\n}\n\nbuild_libmodplug() {\n  do_git_checkout https://github.com/Konstanty/libmodplug.git\n  cd libmodplug_git\n    sed -i.bak 's/__declspec(dllexport)//' \"$mingw_w64_x86_64_prefix/include/libmodplug/modplug.h\" #strip DLL import/export directives\n    sed -i.bak 's/__declspec(dllimport)//' \"$mingw_w64_x86_64_prefix/include/libmodplug/modplug.h\"\n    if [[ ! -f \"configure\" ]]; then\n      autoreconf -fiv || exit 1\n      automake --add-missing || exit 1\n    fi\n    generic_configure_make_install # or could use cmake I guess\n  cd ..\n}\n\nbuild_libgme() {\n  # do_git_checkout https://bitbucket.org/mpyne/game-music-emu.git\n  download_and_unpack_file https://bitbucket.org/mpyne/game-music-emu/downloads/game-music-emu-0.6.3.tar.xz\n  cd game-music-emu-0.6.3\n    do_cmake_and_install \"-DENABLE_UBSAN=0\"\n  cd ..\n}\n\nbuild_mingw_std_threads() {\n  do_git_checkout https://github.com/meganz/mingw-std-threads.git # it needs std::mutex too :|\n  cd mingw-std-threads_git\n    cp *.h \"$mingw_w64_x86_64_prefix/include\"\n  cd ..\n}\n\nbuild_opencv() {\n  build_mingw_std_threads\n  #do_git_checkout https://github.com/opencv/opencv.git # too big :|\n  download_and_unpack_file https://github.com/opencv/opencv/archive/3.4.5.zip opencv-3.4.5\n  mkdir -p opencv-3.4.5/build\n  cd opencv-3.4.5\n     apply_patch file://$patch_dir/opencv.detection_based.patch\n  cd ..\n  cd opencv-3.4.5/build\n    # could do more here, it seems to think it needs its own internal libwebp etc...\n    cpu_count=1\n    do_cmake_from_build_dir .. \"-DWITH_FFMPEG=0 -DOPENCV_GENERATE_PKGCONFIG=1 -DHAVE_DSHOW=0\" # https://stackoverflow.com/q/40262928/32453, no pkg config by default on \"windows\", who cares ffmpeg\n    do_make_and_make_install\n    cp unix-install/opencv.pc $PKG_CONFIG_PATH\n    cpu_count=$original_cpu_count\n  cd ../..\n}\n\nbuild_facebooktransform360() {\n  build_opencv\n  do_git_checkout https://github.com/facebook/transform360.git\n  cd transform360_git\n    apply_patch file://$patch_dir/transform360.pi.diff -p1\n  cd ..\n  cd transform360_git/Transform360\n    do_cmake \"\"\n    sed -i.bak \"s/isystem/I/g\" CMakeFiles/Transform360.dir/includes_CXX.rsp # weird stdlib.h error\n    do_make_and_make_install\n  cd ../..\n}\n\nbuild_libbluray() {\n  unset JDK_HOME # #268 was causing failure\n  do_git_checkout https://code.videolan.org/videolan/libbluray.git\n  cd libbluray_git\n    if [[ ! -d .git/modules ]]; then\n      git submodule update --init --remote # For UDF support [default=enabled], which strangely enough is in another repository.\n    else\n      local local_git_version=`git --git-dir=.git/modules/contrib/libudfread rev-parse HEAD`\n      local remote_git_version=`git ls-remote -h https://code.videolan.org/videolan/libudfread.git | sed \"s/[[:space:]].*//\"`\n      if [[ \"$local_git_version\" != \"$remote_git_version\" ]]; then\n        echo \"detected upstream udfread changed, attempted to update submodules\" # XXX use do_git_checkout here instead somehow?\n        git submodule foreach -q 'git clean -fx' # Throw away local changes; 'already_configured_*' and 'udfread.c.bak' in this case.\n        rm -f contrib/libudfread/src/udfread-version.h\n        git submodule update --remote -f # Checkout even if the working tree differs from HEAD.\n      fi\n    fi\n    if [[ ! -f jni/win32/jni_md.h.bak ]]; then\n      sed -i.bak \"/JNIEXPORT/s/ __declspec.*//\" jni/win32/jni_md.h # Needed for building shared FFmpeg libraries.\n    fi\n    # avoid collision with newer ffmpegs, couldn't figure out better glob LOL\n    sed -i.bak \"s/dec_init/dec__init/g\" src/libbluray/disc/*.{c,h}\n    cd contrib/libudfread\n      if [[ ! -f src/udfread.c.bak ]]; then\n        sed -i.bak \"/WIN32$/,+4d\" src/udfread.c # Fix WinXP incompatibility.\n      fi\n      if [[ ! -f src/udfread-version.h ]]; then\n        generic_configure # Generate 'udfread-version.h', or building Libbluray fails otherwise.\n      fi\n    cd ../..\n    generic_configure \"--disable-examples --disable-bdjava-jar\"\n    do_make_and_make_install \"CPPFLAGS=\\\"-Ddec_init=libbr_dec_init\\\"\"\n  cd ..\n}\n\nbuild_libbs2b() {\n  download_and_unpack_file https://downloads.sourceforge.net/project/bs2b/libbs2b/3.1.0/libbs2b-3.1.0.tar.gz\n  cd libbs2b-3.1.0\n    apply_patch file://$patch_dir/libbs2b.patch\n    sed -i.bak \"s/AC_FUNC_MALLOC//\" configure.ac # #270\n    export LIBS=-lm # avoid pow failure linux native\n    generic_configure_make_install\n    unset LIBS\n  cd ..\n}\n\nbuild_libsoxr() {\n  do_git_checkout https://github.com/chirlu/soxr.git soxr_git\n  cd soxr_git\n    do_cmake_and_install \"-DHAVE_WORDS_BIGENDIAN_EXITCODE=0 -DWITH_OPENMP=0 -DBUILD_TESTS=0 -DBUILD_EXAMPLES=0\"\n  cd ..\n}\n\nbuild_libflite() {\n  # download_and_unpack_file http://www.festvox.org/flite/packed/flite-2.1/flite-2.1-release.tar.bz2\n  # original link is not working so using a substitute\n  # from a trusted source\n  download_and_unpack_file http://deb.debian.org/debian/pool/main/f/flite/flite_2.1-release.orig.tar.bz2 flite-2.1-release\n  cd flite-2.1-release\n    apply_patch file://$patch_dir/flite-2.1.0_mingw-w64-fixes.patch\n    if [[ ! -f main/Makefile.bak ]]; then\n      sed -i.bak \"s/cp -pd/cp -p/\" main/Makefile # friendlier cp for OS X\n    fi\n    generic_configure\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_libsnappy() {\n  do_git_checkout https://github.com/google/snappy.git snappy_git 1.1.8 # got weird failure once\n  cd snappy_git\n    do_cmake_and_install \"-DBUILD_BINARY=OFF -DCMAKE_BUILD_TYPE=Release -DSNAPPY_BUILD_TESTS=OFF\" # extra params from deadsix27 and from new cMakeLists.txt content\n    rm -f $mingw_w64_x86_64_prefix/lib/libsnappy.dll.a # unintall shared :|\n  cd ..\n}\n\nbuild_vamp_plugin() {\n  download_and_unpack_file https://code.soundsoftware.ac.uk/attachments/download/2691/vamp-plugin-sdk-2.10.0.tar.gz\n  cd vamp-plugin-sdk-2.10.0\n    apply_patch file://$patch_dir/vamp-plugin-sdk-2.10_static-lib.diff\n    if [[ $compiler_flavors != \"native\" && ! -f src/vamp-sdk/PluginAdapter.cpp.bak ]]; then\n      sed -i.bak \"s/#include <mutex>/#include <mingw.mutex.h>/\" src/vamp-sdk/PluginAdapter.cpp\n    fi\n    if [[ ! -f configure.bak ]]; then # Fix for \"'M_PI' was not declared in this scope\" (see https://stackoverflow.com/a/29264536).\n      sed -i.bak \"s/c++11/gnu++11/\" configure\n      sed -i.bak \"s/c++11/gnu++11/\" Makefile.in\n    fi\n    do_configure \"--host=$host_target --prefix=$mingw_w64_x86_64_prefix --disable-programs\"\n    do_make \"install-static\" # No need for 'do_make_install', because 'install-static' already has install-instructions.\n  cd ..\n}\n\nbuild_fftw() {\n  download_and_unpack_file http://fftw.org/fftw-3.3.8.tar.gz\n  cd fftw-3.3.8\n    generic_configure \"--disable-doc\"\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_libsamplerate() {\n  # I think this didn't work with ubuntu 14.04 [too old automake or some odd] :|\n  do_git_checkout https://github.com/erikd/libsamplerate.git\n  cd libsamplerate_git\n    generic_configure\n    do_make_and_make_install\n  cd ..\n  # but OS X can't use 0.1.9 :|\n  # rubberband can use this, but uses speex bundled by default [any difference? who knows!]\n}\n\nbuild_librubberband() {\n  do_git_checkout https://github.com/breakfastquay/rubberband.git rubberband_git 18c06ab8c431854056407c467f4755f761e36a8e\n  cd rubberband_git\n    apply_patch file://$patch_dir/rubberband_git_static-lib.diff # create install-static target\n    do_configure \"--host=$host_target --prefix=$mingw_w64_x86_64_prefix --disable-ladspa\"\n    do_make \"install-static AR=${cross_prefix}ar\" # No need for 'do_make_install', because 'install-static' already has install-instructions.\n    sed -i.bak 's/-lrubberband.*$/-lrubberband -lfftw3 -lsamplerate -lstdc++/' $PKG_CONFIG_PATH/rubberband.pc\n  cd ..\n}\n\nbuild_frei0r() {\n  #do_git_checkout https://github.com/dyne/frei0r.git\n  #cd frei0r_git\n  download_and_unpack_file https://github.com/dyne/frei0r/archive/refs/tags/v2.3.0.tar.gz frei0r-2.3.0\n  cd frei0r-2.3.0\n    sed -i.bak 's/-arch i386//' CMakeLists.txt # OS X https://github.com/dyne/frei0r/issues/64\n    do_cmake_and_install \"-DWITHOUT_OPENCV=1\" # XXX could look at this more...\n\n    mkdir -p $cur_dir/redist # Strip and pack shared libraries.\n    if [ $bits_target = 32 ]; then\n      local arch=x86\n    else\n      local arch=x86_64\n    fi\n    archive=\"$cur_dir/redist/frei0r-plugins-${arch}-$(git describe --tags).7z\"\n    if [[ ! -f \"$archive.done\" ]]; then\n      for sharedlib in $mingw_w64_x86_64_prefix/lib/frei0r-1/*.dll; do\n        ${cross_prefix}strip $sharedlib\n      done\n      for doc in AUTHORS ChangeLog COPYING README.md; do\n        sed \"s/$/\\r/\" $doc > $mingw_w64_x86_64_prefix/lib/frei0r-1/$doc.txt\n      done\n      7z a -mx=9 $archive $mingw_w64_x86_64_prefix/lib/frei0r-1 && rm -f $mingw_w64_x86_64_prefix/lib/frei0r-1/*.txt\n      touch \"$archive.done\" # for those with no 7z so it won't restrip every time\n    fi\n  cd ..\n}\n\nbuild_svt-hevc() {\n  do_git_checkout https://github.com/OpenVisualCloud/SVT-HEVC.git\n  mkdir -p SVT-HEVC_git/release\n  cd SVT-HEVC_git/release\n    do_cmake_from_build_dir .. \"-DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_PROCESSOR=AMD64\"\n    do_make_and_make_install\n  cd ../..\n}\n\nbuild_svt-vp9() {\n  do_git_checkout https://github.com/OpenVisualCloud/SVT-VP9.git\n  cd SVT-VP9_git\n  cd Build\n    do_cmake_from_build_dir .. \"-DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_PROCESSOR=AMD64\"\n    do_make_and_make_install\n  cd ../..\n}\n\nbuild_svt-av1() {\n  do_git_checkout https://gitlab.com/AOMediaCodec/SVT-AV1.git\n  cd SVT-AV1_git\n  cd Build\n    do_cmake_from_build_dir .. \"-DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_PROCESSOR=AMD64\"\n    do_make_and_make_install\n  cd ../..\n}\n\nbuild_vidstab() {\n  do_git_checkout https://github.com/georgmartius/vid.stab.git vid.stab_git\n  cd vid.stab_git\n    do_cmake_and_install \"-DUSE_OMP=0\" # '-DUSE_OMP' is on by default, but somehow libgomp ('cygwin_local_install/lib/gcc/i686-pc-cygwin/5.4.0/include/omp.h') can't be found, so '-DUSE_OMP=0' to prevent a compilation error.\n  cd ..\n}\n\nbuild_libmysofa() {\n  do_git_checkout https://github.com/hoene/libmysofa.git libmysofa_git \"origin/main\"\n  cd libmysofa_git\n    local cmake_params=\"-DBUILD_TESTS=0\"\n    if [[ $compiler_flavors == \"native\" ]]; then\n      cmake_params+=\" -DCODE_COVERAGE=0\"\n    fi\n    do_cmake \"$cmake_params\"\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_libcaca() {\n  do_git_checkout https://github.com/cacalabs/libcaca.git libcaca_git 813baea7a7bc28986e474541dd1080898fac14d7\n  cd libcaca_git\n    apply_patch file://$patch_dir/libcaca_git_stdio-cruft.diff -p1 # Fix WinXP incompatibility.\n    cd caca\n      sed -i.bak \"s/__declspec(dllexport)//g\" *.h # get rid of the declspec lines otherwise the build will fail for undefined symbols\n      sed -i.bak \"s/__declspec(dllimport)//g\" *.h\n    cd ..\n    generic_configure \"--libdir=$mingw_w64_x86_64_prefix/lib --disable-csharp --disable-java --disable-cxx --disable-python --disable-ruby --disable-doc --disable-cocoa --disable-ncurses\"\n    do_make_and_make_install\n    if [[ $compiler_flavors == \"native\" ]]; then\n      sed -i.bak \"s/-lcaca.*/-lcaca -lX11/\" $PKG_CONFIG_PATH/caca.pc\n    fi\n  cd ..\n}\n\nbuild_libdecklink() {\n  local url=https://notabug.org/RiCON/decklink-headers.git\n  git ls-remote $url\n  if [ $? -ne 0 ]; then\n    # If NotABug.org server is down , Change to use GitLab.com .\n    # https://gitlab.com/m-ab-s/decklink-headers\n    url=https://gitlab.com/m-ab-s/decklink-headers.git\n  fi\n  do_git_checkout $url\n  cd decklink-headers_git\n    do_make_install PREFIX=$mingw_w64_x86_64_prefix\n  cd ..\n}\n\nbuild_zvbi() {\n  download_and_unpack_file https://sourceforge.net/projects/zapping/files/zvbi/0.2.35/zvbi-0.2.35.tar.bz2\n  cd zvbi-0.2.35\n    if [[ $compiler_flavors != \"native\" ]]; then\n      apply_patch file://$patch_dir/zvbi-win32.patch\n    fi\n    apply_patch file://$patch_dir/zvbi-no-contrib.diff # weird issues with some stuff in contrib...\n    apply_patch file://$patch_dir/zvbi-aarch64.patch\n    generic_configure \" --disable-dvb --disable-bktr --disable-proxy --disable-nls --without-doxygen --without-libiconv-prefix\"\n    # Without '--without-libiconv-prefix' 'configure' would otherwise search for and only accept a shared Libiconv library.\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_fribidi() {\n  download_and_unpack_file https://github.com/fribidi/fribidi/releases/download/v1.0.9/fribidi-1.0.9.tar.xz # Get c2man errors building from repo\n  cd fribidi-1.0.9\n    generic_configure \"--disable-debug --disable-deprecated --disable-docs\"\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_libsrt() {\n  # do_git_checkout https://github.com/Haivision/srt.git # might be able to use these days...?\n  download_and_unpack_file https://github.com/Haivision/srt/archive/v1.4.1.tar.gz srt-1.4.1\n  cd srt-1.4.1\n    if [[ $compiler_flavors != \"native\" ]]; then\n      apply_patch file://$patch_dir/srt.app.patch -p1\n    fi\n    # CMake Warning at CMakeLists.txt:893 (message):\n    #   On MinGW, some C++11 apps are blocked due to lacking proper C++11 headers\n    #   for <thread>.  FIX IF POSSIBLE.\n    do_cmake \"-DUSE_GNUTLS=ON -DENABLE_SHARED=OFF -DENABLE_CXX11=OFF\"\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_libass() {\n  do_git_checkout_and_make_install https://github.com/libass/libass.git\n}\n\nbuild_libaribb24() {\n  do_git_checkout https://github.com/nkoriyama/aribb24\n  cd aribb24\n    generic_configure_make_install\n  cd ..\n}\n\nbuild_libaribcaption() {\n  do_git_checkout https://github.com/xqq/libaribcaption\n  cd libaribcaption\n  mkdir build\n  cd build\n  do_cmake_from_build_dir .. \"-DCMAKE_BUILD_TYPE=Release\"\n  do_make_and_make_install\n  cd ../..\n}\n\nbuild_libxavs() {\n  do_svn_checkout https://svn.code.sf.net/p/xavs/code/trunk xavs_svn\n  cd xavs_svn\n    if [[ ! -f Makefile.bak ]]; then\n      sed -i.bak \"s/O4/O2/\" configure # Change CFLAGS.\n    fi\n    do_configure \"--host=$host_target --prefix=$mingw_w64_x86_64_prefix --cross-prefix=$cross_prefix\" # see https://github.com/rdp/ffmpeg-windows-build-helpers/issues/3\n    do_make_and_make_install \"$make_prefix_options\"\n    rm -f NUL # cygwin causes windows explorer to not be able to delete this folder if it has this oddly named file in it...\n  cd ..\n}\n\nbuild_libxavs2() {\n  do_git_checkout https://github.com/pkuvcl/xavs2.git\n  cd xavs2_git/build/linux\n  do_configure \"--cross-prefix=$cross_prefix --host=$host_target --prefix=$mingw_w64_x86_64_prefix --enable-pic\"\n  do_make_and_make_install\n  cd ../../..\n}\n\nbuild_libdavs2() {\n  do_git_checkout https://github.com/pkuvcl/davs2.git\n  cd davs2_git/build/linux\n  if [[ $host_target == 'i686-w64-mingw32' ]]; then\n    do_configure \"--cross-prefix=$cross_prefix --host=$host_target --prefix=$mingw_w64_x86_64_prefix --enable-pic --disable-asm\"\n  else\n    do_configure \"--cross-prefix=$cross_prefix --host=$host_target --prefix=$mingw_w64_x86_64_prefix --enable-pic\"\n  fi\n  do_make_and_make_install\n  cd ../../..\n}\n\nbuild_libxvid() {\n  download_and_unpack_file https://downloads.xvid.com/downloads/xvidcore-1.3.7.tar.gz xvidcore\n  cd xvidcore/build/generic\n    apply_patch file://$patch_dir/xvidcore-1.3.7_static-lib.patch\n    do_configure \"--host=$host_target --prefix=$mingw_w64_x86_64_prefix\" # no static option...\n    do_make_and_make_install\n  cd ../../..\n}\n\nbuild_libvpx() {\n  do_git_checkout https://chromium.googlesource.com/webm/libvpx.git libvpx_git \"origin/main\"\n  cd libvpx_git\n    apply_patch file://$patch_dir/vpx_160_semaphore.patch -p1 # perhaps someday can remove this after 1.6.0 or mingw fixes it LOL\n    if [[ $compiler_flavors == \"native\" ]]; then\n      local config_options=\"\"\n    elif [[ \"$bits_target\" = \"32\" ]]; then\n      local config_options=\"--target=x86-win32-gcc\"\n    else\n      local config_options=\"--target=x86_64-win64-gcc\"\n    fi\n    export CROSS=\"$cross_prefix\"  \n    # VP8 encoder *requires* sse3 support\n    do_configure \"$config_options --prefix=$mingw_w64_x86_64_prefix --enable-ssse3 --enable-static --disable-shared --disable-examples --disable-tools --disable-docs --disable-unit-tests --enable-vp9-highbitdepth --extra-cflags=-fno-asynchronous-unwind-tables --extra-cflags=-mstackrealign\" # fno for Error: invalid register for .seh_savexmm\n    do_make_and_make_install\n    unset CROSS\n  cd ..\n}\n\nbuild_libaom() {\n  do_git_checkout https://aomedia.googlesource.com/aom aom_git\n  if [[ $compiler_flavors == \"native\" ]]; then\n    local config_options=\"\"\n  elif [ \"$bits_target\" = \"32\" ]; then\n    local config_options=\"-DCMAKE_TOOLCHAIN_FILE=../build/cmake/toolchains/x86-mingw-gcc.cmake -DAOM_TARGET_CPU=x86\"\n  else\n    local config_options=\"-DCMAKE_TOOLCHAIN_FILE=../build/cmake/toolchains/x86_64-mingw-gcc.cmake -DAOM_TARGET_CPU=x86_64\"\n  fi\n  mkdir -p aom_git/aom_build\n  cd aom_git/aom_build\n    do_cmake_from_build_dir .. $config_options\n    do_make_and_make_install\n  cd ../..\n}\n\nbuild_dav1d() {\n  do_git_checkout https://code.videolan.org/videolan/dav1d.git libdav1d\n  cd libdav1d\n    if [[ $bits_target == 32 || $bits_target == 64 ]]; then # XXX why 64???\n      apply_patch file://$patch_dir/david_no_asm.patch -p1 # XXX report\n    fi\n    cpu_count=1 # XXX report :|\n    local meson_options=\"--prefix=${mingw_w64_x86_64_prefix} --libdir=${mingw_w64_x86_64_prefix}/lib --buildtype=release --default-library=static . build\"\n    if [[ $compiler_flavors != \"native\" ]]; then\n      meson_options+=\" --cross-file=${top_dir}/meson-cross.mingw.txt\"\n    fi\n    do_meson \"$meson_options\"\n    do_ninja_and_ninja_install\n    cp build/src/libdav1d.a $mingw_w64_x86_64_prefix/lib || exit 1 # avoid 'run ranlib' weird failure, possibly older meson's https://github.com/mesonbuild/meson/issues/4138 :|\n    cpu_count=$original_cpu_count\n  cd ..\n}\n\nbuild_avisynth() {\n  do_git_checkout https://github.com/AviSynth/AviSynthPlus.git avisynth_git\n  mkdir -p avisynth_git/avisynth-build\n  cd avisynth_git/avisynth-build\n    do_cmake_from_build_dir .. -DHEADERS_ONLY:bool=on\n    do_make \"$make_prefix_options VersionGen install\"\n  cd ../..\n}\n\nbuild_libx265() {\n  local checkout_dir=x265\n  local remote=\"https://bitbucket.org/multicoreware/x265_git\"\n  if [[ ! -z $x265_git_checkout_version ]]; then\n    checkout_dir+=\"_$x265_git_checkout_version\"\n    do_git_checkout \"$remote\" $checkout_dir \"$x265_git_checkout_version\"\n  else\n    if [[ $prefer_stable = \"n\" ]]; then\n      checkout_dir+=\"_unstable\"\n      do_git_checkout \"$remote\" $checkout_dir \"origin/master\"\n    fi\n    if [[ $prefer_stable = \"y\" ]]; then\n      do_git_checkout \"$remote\" $checkout_dir \"origin/stable\"\n    fi\n  fi\n  cd $checkout_dir\n\n  local cmake_params=\"-DENABLE_SHARED=0\" # build x265.exe\n\n  # Apply x86 noasm detection fix on newer versions\n  if [[ $x265_git_checkout_version != *\"3.5\"* ]] && [[ $x265_git_checkout_version != *\"3.4\"* ]] && [[ $x265_git_checkout_version != *\"3.3\"* ]] && [[ $x265_git_checkout_version != *\"3.2\"* ]] && [[ $x265_git_checkout_version != *\"3.1\"* ]]; then\n    git apply \"$patch_dir/x265_x86_noasm_fix.patch\"\n  fi\n\n  if [ \"$bits_target\" = \"32\" ]; then\n    cmake_params+=\" -DWINXP_SUPPORT=1\" # enable windows xp/vista compatibility in x86 build, since it still can I think...\n  fi\n  mkdir -p 8bit 10bit 12bit\n\n  # Build 12bit (main12)\n  cd 12bit\n  local cmake_12bit_params=\"$cmake_params -DENABLE_CLI=0 -DHIGH_BIT_DEPTH=1 -DMAIN12=1 -DEXPORT_C_API=0\"\n  if [ \"$bits_target\" = \"32\" ]; then\n    cmake_12bit_params=\"$cmake_12bit_params -DENABLE_ASSEMBLY=OFF\" # apparently required or build fails\n  fi\n  do_cmake_from_build_dir ../source \"$cmake_12bit_params\"\n  do_make\n  cp libx265.a ../8bit/libx265_main12.a\n\n  # Build 10bit (main10)\n  cd ../10bit\n  local cmake_10bit_params=\"$cmake_params -DENABLE_CLI=0 -DHIGH_BIT_DEPTH=1 -DENABLE_HDR10_PLUS=1 -DEXPORT_C_API=0\"\n  if [ \"$bits_target\" = \"32\" ]; then\n    cmake_10bit_params=\"$cmake_10bit_params -DENABLE_ASSEMBLY=OFF\" # apparently required or build fails\n  fi\n  do_cmake_from_build_dir ../source \"$cmake_10bit_params\"\n  do_make\n  cp libx265.a ../8bit/libx265_main10.a\n\n  # Build 8 bit (main) with linked 10 and 12 bit then install\n  cd ../8bit\n  cmake_params=\"$cmake_params -DENABLE_CLI=1 -DEXTRA_LINK_FLAGS=-L. -DLINKED_10BIT=1 -DLINKED_12BIT=1\"\n  if [[ $compiler_flavors == \"native\" && $OSTYPE != darwin* ]]; then\n    cmake_params+=\" -DENABLE_SHARED=0 -DEXTRA_LIB='$(pwd)/libx265_main10.a;$(pwd)/libx265_main12.a;-ldl'\" # Native multi-lib CLI builds are slightly broken right now; other option is to -DENABLE_CLI=0, but this seems to work (https://bitbucket.org/multicoreware/x265/issues/520)\n  else\n    cmake_params+=\" -DEXTRA_LIB='$(pwd)/libx265_main10.a;$(pwd)/libx265_main12.a'\"\n  fi\n  do_cmake_from_build_dir ../source \"$cmake_params\"\n  do_make\n  mv libx265.a libx265_main.a\n  if [[ $compiler_flavors == \"native\" && $OSTYPE == darwin* ]]; then\n    libtool -static -o libx265.a libx265_main.a libx265_main10.a libx265_main12.a 2>/dev/null\n  else\n    ${cross_prefix}ar -M <<EOF\nCREATE libx265.a\nADDLIB libx265_main.a\nADDLIB libx265_main10.a\nADDLIB libx265_main12.a\nSAVE\nEND\nEOF\n  fi\n  make install # force reinstall in case you just switched from stable to not :|\n  cd ../..\n}\n\nbuild_libopenh264() {\n  do_git_checkout \"https://github.com/cisco/openh264.git\" openh264_git 75b9fcd2669c75a99791 # wels/codec_api.h weirdness\n  cd openh264_git\n    sed -i.bak \"s/_M_X64/_M_DISABLED_X64/\" codec/encoder/core/inc/param_svc.h # for 64 bit, avoid missing _set_FMA3_enable, it needed to link against msvcrt120 to get this or something weird?\n    if [[ $bits_target == 32 ]]; then\n      local arch=i686 # or x86?\n    else\n      local arch=x86_64\n    fi\n    if [[ $compiler_flavors == \"native\" ]]; then\n      # No need for 'do_make_install', because 'install-static' already has install-instructions. we want install static so no shared built...\n      do_make \"$make_prefix_options ASM=yasm install-static\"\n    else\n      do_make \"$make_prefix_options OS=mingw_nt ARCH=$arch ASM=yasm install-static\"\n    fi\n  cd ..\n}\n\nbuild_libx264() {\n  local checkout_dir=\"x264\"\n  if [[ $build_x264_with_libav == \"y\" ]]; then\n    build_ffmpeg static --disable-libx264 ffmpeg_git_pre_x264 # installs libav locally so we can use it within x264.exe FWIW...\n    checkout_dir=\"${checkout_dir}_with_libav\"\n    # they don't know how to use a normal pkg-config when cross compiling, so specify some manually: (see their mailing list for a request...)\n    export LAVF_LIBS=\"$LAVF_LIBS $(pkg-config --libs libavformat libavcodec libavutil libswscale)\"\n    export LAVF_CFLAGS=\"$LAVF_CFLAGS $(pkg-config --cflags libavformat libavcodec libavutil libswscale)\"\n    export SWSCALE_LIBS=\"$SWSCALE_LIBS $(pkg-config --libs libswscale)\"\n  fi\n\n  local x264_profile_guided=n # or y -- haven't gotten this proven yet...TODO\n\n  if [[ $prefer_stable = \"n\" ]]; then\n    checkout_dir=\"${checkout_dir}_unstable\"\n    do_git_checkout \"https://code.videolan.org/videolan/x264.git\" $checkout_dir \"origin/master\" \n  else\n    do_git_checkout \"https://code.videolan.org/videolan/x264.git\" $checkout_dir  \"origin/stable\" \n  fi\n  cd $checkout_dir\n    if [[ ! -f configure.bak ]]; then # Change CFLAGS.\n      sed -i.bak \"s/O3 -/O2 -/\" configure\n    fi\n\n    local configure_flags=\"--host=$host_target --enable-static --cross-prefix=$cross_prefix --prefix=$mingw_w64_x86_64_prefix --enable-strip\" # --enable-win32thread --enable-debug is another useful option here?\n    if [[ $build_x264_with_libav == \"n\" ]]; then\n      configure_flags+=\" --disable-lavf\" # lavf stands for libavformat, there is no --enable-lavf option, either auto or disable...\n    fi\n    configure_flags+=\" --bit-depth=all\"\n    for i in $CFLAGS; do\n      configure_flags+=\" --extra-cflags=$i\" # needs it this way seemingly :|\n    done\n\n    if [[ $x264_profile_guided = y ]]; then\n      # I wasn't able to figure out how/if this gave any speedup...\n      # TODO more march=native here?\n      # TODO profile guided here option, with wine?\n      do_configure \"$configure_flags\"\n      curl -4 http://samples.mplayerhq.hu/yuv4mpeg2/example.y4m.bz2 -O --fail || exit 1\n      rm -f example.y4m # in case it exists already...\n      bunzip2 example.y4m.bz2 || exit 1\n      # XXX does this kill git updates? maybe a more general fix, since vid.stab does also?\n      sed -i.bak \"s_\\\\, ./x264_, wine ./x264_\" Makefile # in case they have wine auto-run disabled http://askubuntu.com/questions/344088/how-to-ensure-wine-does-not-auto-run-exe-files\n      do_make_and_make_install \"fprofiled VIDS=example.y4m\" # guess it has its own make fprofiled, so we don't need to manually add -fprofile-generate here...\n    else\n      # normal path non profile guided\n      do_configure \"$configure_flags\"\n      do_make\n      make install # force reinstall in case changed stable -> unstable\n    fi\n\n    unset LAVF_LIBS\n    unset LAVF_CFLAGS\n    unset SWSCALE_LIBS\n  cd ..\n}\n\nbuild_lsmash() { # an MP4 library\n  do_git_checkout https://github.com/l-smash/l-smash.git l-smash\n  cd l-smash\n    do_configure \"--prefix=$mingw_w64_x86_64_prefix --cross-prefix=$cross_prefix\"\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_libdvdread() {\n  build_libdvdcss\n  download_and_unpack_file http://dvdnav.mplayerhq.hu/releases/libdvdread-4.9.9.tar.xz # last revision before 5.X series so still works with MPlayer\n  cd libdvdread-4.9.9\n    # XXXX better CFLAGS here...\n    generic_configure \"CFLAGS=-DHAVE_DVDCSS_DVDCSS_H LDFLAGS=-ldvdcss --enable-dlfcn\" # vlc patch: \"--enable-libdvdcss\" # XXX ask how I'm *supposed* to do this to the dvdread peeps [svn?]\n    do_make_and_make_install\n    sed -i.bak 's/-ldvdread.*/-ldvdread -ldvdcss/' \"$PKG_CONFIG_PATH/dvdread.pc\"\n  cd ..\n}\n\nbuild_libdvdnav() {\n  download_and_unpack_file http://dvdnav.mplayerhq.hu/releases/libdvdnav-4.2.1.tar.xz # 4.2.1. latest revision before 5.x series [?]\n  cd libdvdnav-4.2.1\n    if [[ ! -f ./configure ]]; then\n      ./autogen.sh\n    fi\n    generic_configure_make_install\n    sed -i.bak 's/-ldvdnav.*/-ldvdnav -ldvdread -ldvdcss -lpsapi/' \"$PKG_CONFIG_PATH/dvdnav.pc\" # psapi for dlfcn ... [hrm?]\n  cd ..\n}\n\nbuild_libdvdcss() {\n  generic_download_and_make_and_install https://download.videolan.org/pub/videolan/libdvdcss/1.2.13/libdvdcss-1.2.13.tar.bz2\n}\n\nbuild_libjpeg_turbo() {\n  do_git_checkout https://github.com/libjpeg-turbo/libjpeg-turbo libjpeg-turbo_git \"origin/main\"\n  cd libjpeg-turbo_git\n    local cmake_params=\"-DENABLE_SHARED=0 -DCMAKE_ASM_NASM_COMPILER=yasm\"\n    if [[ $compiler_flavors != \"native\" ]]; then\n      cmake_params+=\" -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake\"\n      local target_proc=AMD64\n      if [ \"$bits_target\" = \"32\" ]; then\n        target_proc=X86\n      fi\n      cat > toolchain.cmake << EOF\nset(CMAKE_SYSTEM_NAME Windows)\nset(CMAKE_SYSTEM_PROCESSOR ${target_proc})\nset(CMAKE_C_COMPILER ${cross_prefix}gcc)\nset(CMAKE_RC_COMPILER ${cross_prefix}windres)\nEOF\n    fi\n    do_cmake_and_install \"$cmake_params\"\n    cd ..\n}\n\nbuild_libproxy() {\n  # NB this lacks a .pc file still\n  download_and_unpack_file https://libproxy.googlecode.com/files/libproxy-0.4.11.tar.gz\n  cd libproxy-0.4.11\n    sed -i.bak \"s/= recv/= (void *) recv/\" libmodman/test/main.cpp # some compile failure\n    do_cmake_and_install\n  cd ..\n}\n\nbuild_lua() {\n  download_and_unpack_file https://www.lua.org/ftp/lua-5.3.3.tar.gz\n  cd lua-5.3.3\n    export AR=\"${cross_prefix}ar rcu\" # needs rcu parameter so have to call it out different :|\n    do_make \"CC=${cross_prefix}gcc RANLIB=${cross_prefix}ranlib generic\" # generic == \"generic target\" and seems to result in a static build, no .exe's blah blah the mingw option doesn't even build liblua.a\n    unset AR\n    do_make_install \"INSTALL_TOP=$mingw_w64_x86_64_prefix\" \"generic install\"\n    cp etc/lua.pc $PKG_CONFIG_PATH\n  cd ..\n}\n\nbuild_libcurl() {\n  download_and_unpack_file https://curl.haxx.se/download/curl-7.86.0.tar.gz\n  cd curl-7.86.0\n    generic_configure \"--without-ssl\" # XXX use --with-gnutls but it needed pkg-config or some odd?\n    do_make_and_make_install\n  cd ..\n}\n\nbuild_libhdhomerun() {\n  exit 1 # still broken unfortunately, for cross compile :|\n  download_and_unpack_file https://download.silicondust.com/hdhomerun/libhdhomerun_20150826.tgz libhdhomerun\n  cd libhdhomerun\n    do_make CROSS_COMPILE=$cross_prefix  OS=Windows_NT\n  cd ..\n}\n\nbuild_dvbtee_app() {\n  build_iconv # said it needed it\n  build_libcurl # it \"can use this\" so why not\n#  build_libhdhomerun # broken but possible dependency apparently :|\n  do_git_checkout https://github.com/mkrufky/libdvbtee.git libdvbtee_git\n  cd libdvbtee_git\n    # checkout its submodule, apparently required\n    if [ ! -e libdvbpsi/bootstrap ]; then\n      rm -rf libdvbpsi # remove placeholder\n      do_git_checkout https://github.com/mkrufky/libdvbpsi.git\n      cd libdvbpsi_git\n        generic_configure_make_install # library dependency submodule... TODO don't install it, just leave it local :)\n      cd ..\n    fi\n    generic_configure\n    do_make # not install since don't have a dependency on the library\n  cd ..\n}\n\nbuild_qt() {\n  build_libjpeg_turbo # libjpeg a dependency [?]\n  unset CFLAGS # it makes something of its own first, which runs locally, so can't use a foreign arch, or maybe it can, but not important enough: http://stackoverflow.com/a/18775859/32453 XXXX could look at this\n  #download_and_unpack_file http://pkgs.fedoraproject.org/repo/pkgs/qt/qt-everywhere-opensource-src-4.8.7.tar.gz/d990ee66bf7ab0c785589776f35ba6ad/qt-everywhere-opensource-src-4.8.7.tar.gz # untested\n  #cd qt-everywhere-opensource-src-4.8.7\n  # download_and_unpack_file http://download.qt-project.org/official_releases/qt/5.1/5.1.1/submodules/qtbase-opensource-src-5.1.1.tar.xz qtbase-opensource-src-5.1.1 # not officially supported seems...so didn't try it\n  download_and_unpack_file http://pkgs.fedoraproject.org/repo/pkgs/qt/qt-everywhere-opensource-src-4.8.5.tar.gz/1864987bdbb2f58f8ae8b350dfdbe133/qt-everywhere-opensource-src-4.8.5.tar.gz\n  cd qt-everywhere-opensource-src-4.8.5\n    apply_patch file://$patch_dir/imageformats.patch\n    apply_patch file://$patch_dir/qt-win64.patch\n    # vlc's configure options...mostly\n    do_configure \"-static -release -fast -no-exceptions -no-stl -no-sql-sqlite -no-qt3support -no-gif -no-libmng -qt-libjpeg -no-libtiff -no-qdbus -no-openssl -no-webkit -sse -no-script -no-multimedia -no-phonon -opensource -no-scripttools -no-opengl -no-script -no-scripttools -no-declarative -no-declarative-debug -opensource -no-s60 -host-little-endian -confirm-license -xplatform win32-g++ -device-option CROSS_COMPILE=$cross_prefix -prefix $mingw_w64_x86_64_prefix -prefix-install -nomake examples\"\n    if [ ! -f 'already_qt_maked_k' ]; then\n      make sub-src -j $cpu_count\n      make install sub-src # let it fail, baby, it still installs a lot of good stuff before dying on mng...? huh wuh?\n      cp ./plugins/imageformats/libqjpeg.a $mingw_w64_x86_64_prefix/lib || exit 1 # I think vlc's install is just broken to need this [?]\n      cp ./plugins/accessible/libqtaccessiblewidgets.a  $mingw_w64_x86_64_prefix/lib || exit 1 # this feels wrong...\n      # do_make_and_make_install \"sub-src\" # sub-src might make the build faster? # complains on mng? huh?\n      touch 'already_qt_maked_k'\n    fi\n    # vlc needs an adjust .pc file? huh wuh?\n    sed -i.bak 's/Libs: -L${libdir} -lQtGui/Libs: -L${libdir} -lcomctl32 -lqjpeg -lqtaccessiblewidgets -lQtGui/' \"$PKG_CONFIG_PATH/QtGui.pc\" # sniff\n  cd ..\n  reset_cflags\n}\n\nbuild_vlc() {\n  # currently broken, since it got too old for libavcodec and I didn't want to build its own custom one yet to match, and now it's broken with gcc 5.2.0 seemingly\n  # call out dependencies here since it's a lot, plus hierarchical FTW!\n  # should be ffmpeg 1.1.1 or some odd?\n  echo \"not building vlc, broken dependencies or something weird\"\n  return\n  # vlc's own dependencies:\n  build_lua\n  build_libdvdread\n  build_libdvdnav\n  build_libx265\n  build_libjpeg_turbo\n  build_ffmpeg\n  build_qt\n\n  # currently vlc itself currently broken :|\n  do_git_checkout https://github.com/videolan/vlc.git\n  cd vlc_git\n  #apply_patch file://$patch_dir/vlc_localtime_s.patch # git revision needs it...\n  # outdated and patch doesn't apply cleanly anymore apparently...\n  #if [[ \"$non_free\" = \"y\" ]]; then\n  #  apply_patch https://raw.githubusercontent.com/gcsx/ffmpeg-windows-build-helpers/patch-5/patches/priorize_avcodec.patch\n  #fi\n  if [[ ! -f \"configure\" ]]; then\n    ./bootstrap\n  fi\n  export DVDREAD_LIBS='-ldvdread -ldvdcss -lpsapi'\n  do_configure \"--disable-libgcrypt --disable-a52 --host=$host_target --disable-lua --disable-mad --enable-qt --disable-sdl --disable-mod\" # don't have lua mingw yet, etc. [vlc has --disable-sdl [?]] x265 disabled until we care enough... Looks like the bluray problem was related to the BLURAY_LIBS definition. [not sure what's wrong with libmod]\n  rm -f `find . -name *.exe` # try to force a rebuild...though there are tons of .a files we aren't rebuilding as well FWIW...:|\n  rm -f already_ran_make* # try to force re-link just in case...\n  do_make\n  # do some gymnastics to avoid building the mozilla plugin for now [couldn't quite get it to work]\n  #sed -i.bak 's_git://git.videolan.org/npapi-vlc.git_https://github.com/rdp/npapi-vlc.git_' Makefile # this wasn't enough...following lines instead...\n  sed -i.bak \"s/package-win-common: package-win-install build-npapi/package-win-common: package-win-install/\" Makefile\n  sed -i.bak \"s/.*cp .*builddir.*npapi-vlc.*//g\" Makefile\n  make package-win-common # not do_make, fails still at end, plus this way we get new vlc.exe's\n  echo \"\n\n\n     vlc success, created a file like ${PWD}/vlc-xxx-git/vlc.exe\n\n\n\n\"\n  cd ..\n  unset DVDREAD_LIBS\n}\n\nreset_cflags() {\n  export CFLAGS=$original_cflags\n}\n\nreset_cppflags() {\n  export CPPFLAGS=$original_cppflags\n}\n\nbuild_meson_cross() {\n  local cpu_family=\"x86_64\"\n  if [ $bits_target = 32 ]; then\n    cpu_family=\"x86\"\n  fi\n  rm -fv meson-cross.mingw.txt\n  cat >> meson-cross.mingw.txt << EOF\n[binaries]\nc = '${cross_prefix}gcc'\ncpp = '${cross_prefix}g++'\nld = '${cross_prefix}ld'\nar = '${cross_prefix}ar'\nstrip = '${cross_prefix}strip'\npkgconfig = '${cross_prefix}pkg-config'\nnm = '${cross_prefix}nm'\nwindres = '${cross_prefix}windres'\n\n[host_machine]\nsystem = 'windows'\ncpu_family = '$cpu_family'\ncpu = '$cpu_family'\nendian = 'little'\nEOF\n  mv -v meson-cross.mingw.txt ../..\n}\n\nget_local_meson_cross_with_propeties() {\n  local local_dir=\"$1\"\n  local c_args=\n  local cpp_args=\n  local link_args=\n  if [[ -z $local_dir ]]; then\n    local_dir=\".\"\n  fi\n  cp ${top_dir}/meson-cross.mingw.txt \"$local_dir\"\n  if [[ -n \"$CFLAGS\" ]]; then\n    c_args=\"'$(echo ${CFLAGS} | sed \"s/ /\\',\\'/g\")'\"\n  fi\n  if [[ -n \"$CXXFLAGS\" ]]; then\n    cpp_args=\"'$(echo ${CXXFLAGS} | sed \"s/ /\\',\\'/g\")'\"\n  fi\n  if [[ -n \"$LDFLAGS\" ]]; then\n    link_args=\"'$(echo ${LDFLAGS} | sed \"s/ /\\',\\'/g\")'\"\n  fi\n  cat >> meson-cross.mingw.txt << EOF\n\n[properties]\nc_args = [$c_args]\nc_link_args = [$link_args]\ncpp_args = [$cpp_args]\ncpp_link_args = [$link_args]\nEOF\n}\n\nbuild_mplayer() {\n  # pre requisites\n  build_libjpeg_turbo\n  build_libdvdread\n  build_libdvdnav\n\n  download_and_unpack_file https://sourceforge.net/projects/mplayer-edl/files/mplayer-export-snapshot.2014-05-19.tar.bz2 mplayer-export-2014-05-19\n  cd mplayer-export-2014-05-19\n    do_git_checkout https://github.com/FFmpeg/FFmpeg ffmpeg d43c303038e9bd # known compatible commit\n    export LDFLAGS='-lpthread -ldvdnav -ldvdread -ldvdcss' # not compat with newer dvdread possibly? huh wuh?\n    export CFLAGS=-DHAVE_DVDCSS_DVDCSS_H\n    do_configure \"--enable-cross-compile --host-cc=cc --cc=${cross_prefix}gcc --windres=${cross_prefix}windres --ranlib=${cross_prefix}ranlib --ar=${cross_prefix}ar --as=${cross_prefix}as --nm=${cross_prefix}nm --enable-runtime-cpudetection --extra-cflags=$CFLAGS --with-dvdnav-config=$mingw_w64_x86_64_prefix/bin/dvdnav-config --disable-dvdread-internal --disable-libdvdcss-internal --disable-w32threads --enable-pthreads --extra-libs=-lpthread --enable-debug --enable-ass-internal --enable-dvdread --enable-dvdnav --disable-libvpx-lavc\" # haven't reported the ldvdcss thing, think it's to do with possibly it not using dvdread.pc [?] XXX check with trunk\n    # disable libvpx didn't work with its v1.5.0 some reason :|\n    unset LDFLAGS\n    reset_cflags\n    sed -i.bak \"s/HAVE_PTHREAD_CANCEL 0/HAVE_PTHREAD_CANCEL 1/g\" config.h # mplayer doesn't set this up right?\n    touch -t 201203101513 config.h # the above line change the modify time for config.h--forcing a full rebuild *every time* yikes!\n    # try to force re-link just in case...\n    rm -f *.exe\n    rm -f already_ran_make* # try to force re-link just in case...\n    do_make\n    cp mplayer.exe mplayer_debug.exe\n    ${cross_prefix}strip mplayer.exe\n    echo \"built ${PWD}/{mplayer,mencoder,mplayer_debug}.exe\"\n  cd ..\n}\n\nbuild_mp4box() { # like build_gpac\n  # This script only builds the gpac_static lib plus MP4Box. Other tools inside\n  # specify revision until this works: https://sourceforge.net/p/gpac/discussion/287546/thread/72cf332a/\n  do_git_checkout https://github.com/gpac/gpac.git mp4box_gpac_git\n  cd mp4box_gpac_git\n    # are these tweaks needed? If so then complain to the mp4box people about it?\n    sed -i.bak \"s/has_dvb4linux=\\\"yes\\\"/has_dvb4linux=\\\"no\\\"/g\" configure\n    # XXX do I want to disable more things here?\n    # ./sandbox/cross_compilers/mingw-w64-i686/bin/i686-w64-mingw32-sdl-config\n    generic_configure \"  --cross-prefix=${cross_prefix} --target-os=MINGW32 --extra-cflags=-Wno-format --static-build --static-bin --disable-oss-audio --extra-ldflags=-municode --disable-x11 --sdl-cfg=${cross_prefix}sdl-config\"\n    ./check_revision.sh\n    # I seem unable to pass 3 libs into the same config line so do it with sed...\n    sed -i.bak \"s/EXTRALIBS=.*/EXTRALIBS=-lws2_32 -lwinmm -lz/g\" config.mak\n    cd src\n      do_make \"$make_prefix_options\"\n    cd ..\n    rm -f ./bin/gcc/MP4Box* # try and force a relink/rebuild of the .exe\n    cd applications/mp4box\n      rm -f already_ran_make* # ??\n      do_make \"$make_prefix_options\"\n    cd ../..\n    # copy it every time just in case it was rebuilt...\n    cp ./bin/gcc/MP4Box ./bin/gcc/MP4Box.exe # it doesn't name it .exe? That feels broken somehow...\n    echo \"built $(readlink -f ./bin/gcc/MP4Box.exe)\"\n  cd ..\n}\n\nbuild_libMXF() {\n  download_and_unpack_file https://sourceforge.net/projects/ingex/files/1.0.0/libMXF/libMXF-src-1.0.0.tgz \"libMXF-src-1.0.0\"\n  cd libMXF-src-1.0.0\n    apply_patch file://$patch_dir/libMXF.diff\n    do_make \"MINGW_CC_PREFIX=$cross_prefix\"\n    #\n    # Manual equivalent of make install. Enable it if desired. We shouldn't need it in theory since we never use libMXF.a file and can just hand pluck out the *.exe files already...\n    #\n    #cp libMXF/lib/libMXF.a $mingw_w64_x86_64_prefix/lib/libMXF.a\n    #cp libMXF++/libMXF++/libMXF++.a $mingw_w64_x86_64_prefix/lib/libMXF++.a\n    #mv libMXF/examples/writeaviddv50/writeaviddv50 libMXF/examples/writeaviddv50/writeaviddv50.exe\n    #mv libMXF/examples/writeavidmxf/writeavidmxf libMXF/examples/writeavidmxf/writeavidmxf.exe\n    #cp libMXF/examples/writeaviddv50/writeaviddv50.exe $mingw_w64_x86_64_prefix/bin/writeaviddv50.exe\n    #cp libMXF/examples/writeavidmxf/writeavidmxf.exe $mingw_w64_x86_64_prefix/bin/writeavidmxf.exe\n  cd ..\n}\n\nbuild_ffmpeg() {\n  local extra_postpend_configure_options=$2\n  local build_type=$1\n  if [[ -z $3 ]]; then\n    local output_dir=\"ffmpeg_git\"\n  else\n    local output_dir=$3\n  fi\n  if [[ \"$non_free\" = \"y\" ]]; then\n    output_dir+=\"_with_fdk_aac\"\n  fi\n  if [[ $build_intel_qsv == \"n\" ]]; then\n    output_dir+=\"_xp_compat\"\n  fi\n  if [[ $enable_gpl == 'n' ]]; then\n    output_dir+=\"_lgpl\"\n  fi\n\n  if [[ ! -z $ffmpeg_git_checkout_version ]]; then\n    local output_branch_sanitized=$(echo ${ffmpeg_git_checkout_version} | sed \"s/\\//_/g\") # release/4.3 to release_4.3\n    output_dir+=\"_$output_branch_sanitized\"\n  else\n    # If version not provided, assume master branch desired\n    ffmpeg_git_checkout_version=\"master\"\n  fi\n\n  local postpend_configure_opts=\"\"\n  local install_prefix=\"\"\n  # can't mix and match --enable-static --enable-shared unfortunately, or the final executable seems to just use shared if the're both present\n  if [[ $build_type == \"shared\" ]]; then\n    output_dir+=\"_shared\"\n    install_prefix=\"$(pwd)/${output_dir}\" # install them to their a separate dir\n  else\n    install_prefix=\"${mingw_w64_x86_64_prefix}\" # don't really care since we just pluck ffmpeg.exe out of the src dir for static, but x264 pre wants it installed...\n  fi\n\n  # allow using local source directory version of ffmpeg\n  if [[ -z $ffmpeg_source_dir ]]; then\n    do_git_checkout $ffmpeg_git_checkout $output_dir $ffmpeg_git_checkout_version || exit 1\n  else\n    output_dir=\"${ffmpeg_source_dir}\"\n    install_prefix=\"${output_dir}\"\n  fi\n\n  if [[ $build_type == \"shared\" ]]; then\n    postpend_configure_opts=\"--enable-shared --disable-static --prefix=${install_prefix}\" # I guess this doesn't have to be at the end...\n  else\n    postpend_configure_opts=\"--enable-static --disable-shared --prefix=${install_prefix}\"\n  fi\n\n  if [[ $ffmpeg_git_checkout_version == *\"n4.4\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n4.3\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n4.2\"* ]]; then\n    postpend_configure_opts=\"${postpend_configure_opts} --disable-libdav1d \" # dav1d has diverged since so isn't compat with older ffmpegs\n  fi\n\n  cd $output_dir\n    apply_patch file://$patch_dir/frei0r_load-shared-libraries-dynamically.diff\n    if [ \"$bits_target\" = \"32\" ]; then\n      local arch=x86\n    else\n      local arch=x86_64\n    fi\n\n    init_options=\"--pkg-config=pkg-config --pkg-config-flags=--static --extra-version=ffmpeg-windows-build-helpers --enable-version3 --disable-debug --disable-w32threads\"\n    if [[ $compiler_flavors != \"native\" ]]; then\n      init_options+=\" --arch=$arch --target-os=mingw32 --cross-prefix=$cross_prefix\"\n    else\n      if [[ $OSTYPE != darwin* ]]; then\n        unset PKG_CONFIG_LIBDIR # just use locally packages for all the xcb stuff for now, you need to install them locally first...\n        init_options+=\" --enable-libv4l2 --enable-libxcb --enable-libxcb-shm --enable-libxcb-xfixes --enable-libxcb-shape \"\n      fi\n    fi\n    if [[ `uname` =~ \"5.1\" ]]; then\n      init_options+=\" --disable-schannel\"\n      # Fix WinXP incompatibility by disabling Microsoft's Secure Channel, because Windows XP doesn't support TLS 1.1 and 1.2, but with GnuTLS or OpenSSL it does.  XP compat!\n    fi\n    config_options=\"$init_options\"\n    config_options+=\" --enable-libcaca\"\n    config_options+=\" --enable-gray\"\n    config_options+=\" --enable-libtesseract\"\n    config_options+=\" --enable-fontconfig\"\n    config_options+=\" --enable-gmp\"\n    config_options+=\" --enable-libass\"\n    config_options+=\" --enable-libbluray\"\n    config_options+=\" --enable-libbs2b\"\n    config_options+=\" --enable-libflite\"\n    config_options+=\" --enable-libfreetype\"\n    config_options+=\" --enable-libfribidi\"\n    config_options+=\" --enable-libgme\"\n    config_options+=\" --enable-libgsm\"\n    config_options+=\" --enable-libilbc\"\n    config_options+=\" --enable-libmodplug\"\n    config_options+=\" --enable-libmp3lame\"\n    config_options+=\" --enable-libopencore-amrnb\"\n    config_options+=\" --enable-libopencore-amrwb\"\n    config_options+=\" --enable-libopus\"\n    config_options+=\" --enable-libsnappy\"\n    config_options+=\" --enable-libsoxr\"\n    config_options+=\" --enable-libspeex\"\n    config_options+=\" --enable-libtheora\"\n    config_options+=\" --enable-libtwolame\"\n    config_options+=\" --enable-libvo-amrwbenc\"\n    config_options+=\" --enable-libvorbis\"\n    config_options+=\" --enable-libwebp\"\n    config_options+=\" --enable-libzimg\"\n    config_options+=\" --enable-libzvbi\"\n    config_options+=\" --enable-libmysofa\"\n    config_options+=\" --enable-libopenjpeg\"\n    config_options+=\" --enable-libopenh264\"\n    config_options+=\" --enable-libvmaf\"\n    config_options+=\" --enable-libsrt\"\n    config_options+=\" --enable-libxml2\"\n    config_options+=\" --enable-opengl\"\n    config_options+=\" --enable-libdav1d\"\n    config_options+=\" --enable-gnutls\"\n\n    if [[ \"$bits_target\" != \"32\" ]]; then\n      if [[ $build_svt_hevc = y ]]; then\n        # SVT-HEVC\n        # Apply the correct patches based on version. Logic (n4.4 patch for n4.2, n4.3 and n4.4)  based on patch notes here:\n        # https://github.com/OpenVisualCloud/SVT-HEVC/commit/b5587b09f44bcae70676f14d3bc482e27f07b773#diff-2b35e92117ba43f8397c2036658784ba2059df128c9b8a2625d42bc527dffea1\n        if [[ $ffmpeg_git_checkout_version == *\"n4.4\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n4.3\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n4.2\"* ]]; then\n          git apply \"$work_dir/SVT-HEVC_git/ffmpeg_plugin/n4.4-0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch\"\n          git apply \"$patch_dir/SVT-HEVC-0002-doc-Add-libsvt_hevc-encoder-docs.patch\"  # upstream patch does not apply on current ffmpeg master\n        elif [[ $ffmpeg_git_checkout_version == *\"n4.1\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n3.4\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n3.2\"* ]] || [[ $ffmpeg_git_checkout_version == *\"n2.8\"* ]]; then\n          : # too old...\n        else\n          # newer:\n          git apply \"$work_dir/SVT-HEVC_git/ffmpeg_plugin/master-0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch\"\n        fi\n        config_options+=\" --enable-libsvthevc\"\n      fi\n      if [[ $build_svt_vp9 = y ]]; then\n        # SVT-VP9\n        # Apply the correct patches based on version. Logic (n4.4 patch for n4.2, n4.3 and n4.4)  based on patch notes here:\n        # https://github.com/OpenVisualCloud/SVT-VP9/tree/master/ffmpeg_plugin\n        if [[ $ffmpeg_git_checkout_version == *\"n4.3.1\"* ]]; then\n          git apply \"$work_dir/SVT-VP9_git/ffmpeg_plugin/n4.3.1-0001-Add-ability-for-ffmpeg-to-run-svt-vp9.patch\"\n        elif [[ $ffmpeg_git_checkout_version == *\"n4.2.3\"* ]]; then\n          git apply \"$work_dir/SVT-VP9_git/ffmpeg_plugin/n4.2.3-0001-Add-ability-for-ffmpeg-to-run-svt-vp9.patch\"\n        elif [[ $ffmpeg_git_checkout_version == *\"n4.2.2\"* ]]; then\n          git apply \"$work_dir/SVT-VP9_git/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-vp9.patch\"\n        else \n          # newer:\n          git apply \"$work_dir/SVT-VP9_git/ffmpeg_plugin/master-0001-Add-ability-for-ffmpeg-to-run-svt-vp9.patch\"\n        fi\n\t\tconfig_options+=\" --enable-libsvtvp9\"\n      fi\n      config_options+=\" --enable-libsvtav1\"\n    fi # else doesn't work/matter with 32 bit\n    config_options+=\" --enable-libvpx\"\n    config_options+=\" --enable-libaom\"\n\n    if [[ $compiler_flavors != \"native\" ]]; then\n      config_options+=\" --enable-nvenc --enable-nvdec\" # don't work OS X\n    fi\n\n    # the order of extra-libs switches is important (appended in reverse)\n    config_options+=\" --extra-libs=-lz\"\n    config_options+=\" --extra-libs=-lpng\"\n    config_options+=\" --extra-libs=-lm\" # libflite seemed to need this linux native...and have no .pc file huh?\n    config_options+=\" --extra-libs=-lfreetype\"\n\n    if [[ $compiler_flavors != \"native\" ]]; then\n      config_options+=\" --extra-libs=-lshlwapi\" # lame needed this, no .pc file?\n    fi\n    config_options+=\" --extra-libs=-lmpg123\" # ditto\n    config_options+=\" --extra-libs=-lpthread\" # for some reason various and sundry needed this linux native\n\n    config_options+=\" --extra-cflags=-DLIBTWOLAME_STATIC --extra-cflags=-DMODPLUG_STATIC --extra-cflags=-DCACA_STATIC\" # if we ever do a git pull then it nukes changes, which overrides manual changes to configure, so just use these for now :|\n    if [[ $build_amd_amf = n ]]; then\n      config_options+=\" --disable-amf\" # Since its autodetected we have to disable it if we do not want it. #unless we define no autodetection but.. we don't.\n    else\n      config_options+=\" --enable-amf\" # This is actually autodetected but for consistency.. we might as well set it.\n    fi\n\n    if [[ $build_intel_qsv = y && $compiler_flavors != \"native\" ]]; then # Broken for native builds right now: https://github.com/lu-zero/mfx_dispatch/issues/71\n      config_options+=\" --enable-libmfx\"\n    else\n      config_options+=\" --disable-libmfx\"\n    fi\n    \n    if [[ $ffmpeg_git_checkout_version != *\"n6.0\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n5.1\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n5.0\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n4.4\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n4.3\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n4.2\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n4.1\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n3.4\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n3.2\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n2.8\"* ]]; then\n      # Disable libaribcatption on old versions\n      config_options+=\" --enable-libaribcaption\" # libaribcatption (MIT licensed)\n    fi\n    \n    if [[ $enable_gpl == 'y' ]]; then\n      config_options+=\" --enable-gpl --enable-frei0r --enable-librubberband --enable-libvidstab --enable-libx264 --enable-libx265 --enable-avisynth --enable-libaribb24\"\n      config_options+=\" --enable-libxvid --enable-libdavs2\"\n      if [[ $host_target != 'i686-w64-mingw32' ]]; then\n        config_options+=\" --enable-libxavs2\"\n      fi\n      if [[ $compiler_flavors != \"native\" ]]; then\n        config_options+=\" --enable-libxavs\" # don't compile OS X\n      fi\n    fi\n    local licensed_gpl=n # lgpl build with libx264 included for those with \"commercial\" license :)\n    if [[ $licensed_gpl == 'y' ]]; then\n      apply_patch file://$patch_dir/x264_non_gpl.diff -p1\n      config_options+=\" --enable-libx264\"\n    fi\n    # other possibilities:\n    #   --enable-w32threads # [worse UDP than pthreads, so not using that]\n\n    for i in $CFLAGS; do\n      config_options+=\" --extra-cflags=$i\" # --extra-cflags may not be needed here, but adds it to the final console output which I like for debugging purposes\n    done\n\n    config_options+=\" $postpend_configure_opts\"\n\n    if [[ \"$non_free\" = \"y\" ]]; then\n      config_options+=\" --enable-nonfree --enable-libfdk-aac\"\n\n      if [[ $compiler_flavors != \"native\" ]]; then\n        config_options+=\" --enable-decklink\" # Error finding rpc.h in native builds even if it's available\n      fi\n      # other possible options: --enable-openssl [unneeded since we already use gnutls]\n    fi\n\n    do_debug_build=n # if you need one for backtraces/examining segfaults using gdb.exe ... change this to y :) XXXX make it affect x264 too...and make it real param :)\n    if [[ \"$do_debug_build\" = \"y\" ]]; then\n      # not sure how many of these are actually needed/useful...possibly none LOL\n      config_options+=\" --disable-optimizations --extra-cflags=-Og --extra-cflags=-fno-omit-frame-pointer --enable-debug=3 --extra-cflags=-fno-inline $postpend_configure_opts\"\n      # this one kills gdb workability for static build? ai ai [?] XXXX\n      config_options+=\" --disable-libgme\"\n    fi\n    config_options+=\" $extra_postpend_configure_options\"\n\n    do_configure \"$config_options\"\n    rm -f */*.a */*.dll *.exe # just in case some dependency library has changed, force it to re-link even if the ffmpeg source hasn't changed...\n    rm -f already_ran_make*\n    echo \"doing ffmpeg make $(pwd)\"\n\n    do_make_and_make_install # install ffmpeg as well (for shared, to separate out the .dll's, for things that depend on it like VLC, to create static libs)\n\n    # build ismindex.exe, too, just for fun\n    if [[ $build_ismindex == \"y\" ]]; then\n      make tools/ismindex.exe || exit 1\n    fi\n\n    # XXX really ffmpeg should have set this up right but doesn't, patch FFmpeg itself instead...\n    if [[ $1 == \"static\" ]]; then\n     # nb we can just modify this every time, it getes recreated, above..\n      if [[ $build_intel_qsv = y  && $compiler_flavors != \"native\" ]]; then # Broken for native builds right now: https://github.com/lu-zero/mfx_dispatch/issues/71\n        sed -i.bak 's/-lavutil -pthread -lm /-lavutil -pthread -lm -lmfx -lstdc++ -lmpg123 -lshlwapi /' \"$PKG_CONFIG_PATH/libavutil.pc\"\n      else\n        sed -i.bak 's/-lavutil -pthread -lm /-lavutil -pthread -lm -lmpg123 -lshlwapi /' \"$PKG_CONFIG_PATH/libavutil.pc\"\n      fi\n    fi\n\n    sed -i.bak 's/-lswresample -lm.*/-lswresample -lm -lsoxr/' \"$PKG_CONFIG_PATH/libswresample.pc\" # XXX patch ffmpeg\n\n    if [[ $non_free == \"y\" ]]; then\n      if [[ $build_type == \"shared\" ]]; then\n        echo \"Done! You will find $bits_target-bit $1 non-redistributable binaries in $(pwd)/bin\"\n      else\n        echo \"Done! You will find $bits_target-bit $1 non-redistributable binaries in $(pwd)\"\n      fi\n    else\n      mkdir -p $cur_dir/redist\n      archive=\"$cur_dir/redist/ffmpeg-$(git describe --tags --match N)-win$bits_target-$1\"\n      if [[ $original_cflags =~ \"pentium3\" ]]; then\n        archive+=\"_legacy\"\n      fi\n      if [[ $build_type == \"shared\" ]]; then\n        echo \"Done! You will find $bits_target-bit $1 binaries in $(pwd)/bin\"\n        # Some manual package stuff because the install_root may be cluttered with static as well...\n        # XXX this misses the docs and share?\n        if [[ ! -f $archive.7z ]]; then\n          sed \"s/$/\\r/\" COPYING.GPLv3 > bin/COPYING.GPLv3.txt # XXX we include this even if it's not a GPL build?\n          cp -r include bin\n          cd bin\n            7z a -mx=9 $archive.7z include *.exe *.dll *.lib COPYING.GPLv3.txt && rm -f COPYING.GPLv3.txt\n          cd ..\n        fi\n      else\n        echo \"Done! You will find $bits_target-bit $1 binaries in $(pwd)\" `date`\n        if [[ ! -f $archive.7z ]]; then\n          sed \"s/$/\\r/\" COPYING.GPLv3 > COPYING.GPLv3.txt\n          echo \"creating distro zip...\" # XXX opt in?\n          7z a -mx=9 $archive.7z ffmpeg.exe ffplay.exe ffprobe.exe COPYING.GPLv3.txt && rm -f COPYING.GPLv3.txt\n        else\n          echo \"not creating distro zip as one already exists...\"\n        fi\n      fi\n      echo \"You will find redistributable archive .7z file in $archive.7z\"\n    fi\n\n  if [[ -z $ffmpeg_source_dir ]]; then\n    cd ..\n  else\n    cd \"$work_dir\"\n  fi\n}\n\nbuild_lsw() {\n   # Build L-Smash-Works, which are AviSynth plugins based on lsmash/ffmpeg\n   #build_ffmpeg static # dependency, assume already built since it builds before this does...\n   build_lsmash # dependency\n   do_git_checkout https://github.com/VFR-maniac/L-SMASH-Works.git lsw\n   cd lsw/VapourSynth\n     do_configure \"--prefix=$mingw_w64_x86_64_prefix --cross-prefix=$cross_prefix --target-os=mingw\"\n     do_make_and_make_install\n     # AviUtl is 32bit-only\n     if [ \"$bits_target\" = \"32\" ]; then\n       cd ../AviUtl\n       do_configure \"--prefix=$mingw_w64_x86_64_prefix --cross-prefix=$cross_prefix\"\n       do_make\n     fi\n   cd ../..\n}\n\nfind_all_build_exes() {\n  local found=\"\"\n# NB that we're currently in the sandbox dir...\n  for file in `find . -name ffmpeg.exe` `find . -name ffmpeg_g.exe` `find . -name ffplay.exe` `find . -name ffmpeg` `find . -name ffplay` `find . -name ffprobe` `find . -name MP4Box.exe` `find . -name mplayer.exe` `find . -name mencoder.exe` `find . -name avconv.exe` `find . -name avprobe.exe` `find . -name x264.exe` `find . -name writeavidmxf.exe` `find . -name writeaviddv50.exe` `find . -name rtmpdump.exe` `find . -name x265.exe` `find . -name ismindex.exe` `find . -name dvbtee.exe` `find . -name boxdumper.exe` `find . -name muxer.exe ` `find . -name remuxer.exe` `find . -name timelineeditor.exe` `find . -name lwcolor.auc` `find . -name lwdumper.auf` `find . -name lwinput.aui` `find . -name lwmuxer.auf` `find . -name vslsmashsource.dll`; do\n    found=\"$found $(readlink -f $file)\"\n  done\n\n  # bash recursive glob fails here again?\n  for file in `find . -name vlc.exe | grep -- -`; do\n    found=\"$found $(readlink -f $file)\"\n  done\n  echo $found # pseudo return value...\n}\n\nbuild_ffmpeg_dependencies() {\n  if [[ $build_dependencies = \"n\" ]]; then\n    echo \"Skip build ffmpeg dependency libraries...\"\n    return\n  fi\n\n  echo \"Building ffmpeg dependency libraries...\"\n  if [[ $compiler_flavors != \"native\" ]]; then # build some stuff that don't build native...\n    build_dlfcn\n    build_libxavs\n  fi\n\n  build_libdavs2\n  if [[ $host_target != 'i686-w64-mingw32' ]]; then\n    build_libxavs2\n  fi\n\n  build_meson_cross\n  build_mingw_std_threads\n  build_zlib # Zlib in FFmpeg is autodetected.\n  build_libcaca # Uses zlib and dlfcn (on windows).\n  build_bzip2 # Bzlib (bzip2) in FFmpeg is autodetected.\n  build_liblzma # Lzma in FFmpeg is autodetected. Uses dlfcn.\n  build_iconv # Iconv in FFmpeg is autodetected. Uses dlfcn.\n  build_sdl2 # Sdl2 in FFmpeg is autodetected. Needed to build FFPlay. Uses iconv and dlfcn.\n  if [[ $build_amd_amf = y ]]; then\n    build_amd_amf_headers\n  fi\n  if [[ $build_intel_qsv = y && $compiler_flavors != \"native\" ]]; then # Broken for native builds right now: https://github.com/lu-zero/mfx_dispatch/issues/71\n    build_intel_qsv_mfx\n  fi\n  build_nv_headers\n  build_libzimg # Uses dlfcn.\n  build_libopenjpeg\n  build_glew\n  build_glfw\n  #build_libjpeg_turbo # mplayer can use this, VLC qt might need it? [replaces libjpeg] (ffmpeg seems to not need it so commented out here)\n  build_libpng # Needs zlib >= 1.0.4. Uses dlfcn.\n  build_libwebp # Uses dlfcn.\n  build_harfbuzz\n  # harf does now include build_freetype # Uses zlib, bzip2, and libpng.\n  build_libxml2 # Uses zlib, liblzma, iconv and dlfcn.\n  build_libvmaf\n  build_fontconfig # Needs freetype and libxml >= 2.6. Uses iconv and dlfcn.\n  build_gmp # For rtmp support configure FFmpeg with '--enable-gmp'. Uses dlfcn.\n  #build_librtmfp # mainline ffmpeg doesn't use it yet\n  build_libnettle # Needs gmp >= 3.0. Uses dlfcn.\n  build_unistring\n  build_libidn2 # needs iconv and unistring\n  build_gnutls # Needs nettle >= 3.1, hogweed (nettle) >= 3.1. Uses libidn2, unistring, zlib, and dlfcn.\n  #if [[ \"$non_free\" = \"y\" ]]; then\n  #  build_openssl-1.0.2 # Nonfree alternative to GnuTLS. 'build_openssl-1.0.2 \"dllonly\"' to build shared libraries only.\n  #  build_openssl-1.1.1 # Nonfree alternative to GnuTLS. Can't be used with LibRTMP. 'build_openssl-1.1.1 \"dllonly\"' to build shared libraries only.\n  #fi\n  build_libogg # Uses dlfcn.\n  build_libvorbis # Needs libogg >= 1.0. Uses dlfcn.\n  build_libopus # Uses dlfcn.\n  build_libspeexdsp # Needs libogg for examples. Uses dlfcn.\n  build_libspeex # Uses libspeexdsp and dlfcn.\n  build_libtheora # Needs libogg >= 1.1. Needs libvorbis >= 1.0.1, sdl and libpng for test, programs and examples [disabled]. Uses dlfcn.\n  build_libsndfile \"install-libgsm\" # Needs libogg >= 1.1.3 and libvorbis >= 1.2.3 for external support [disabled]. Uses dlfcn. 'build_libsndfile \"install-libgsm\"' to install the included LibGSM 6.10.\n  build_mpg123\n  build_lame # Uses dlfcn, mpg123\n  build_twolame # Uses libsndfile >= 1.0.0 and dlfcn.\n  build_libopencore # Uses dlfcn.\n  build_libilbc # Uses dlfcn.\n  build_libmodplug # Uses dlfcn.\n  build_libgme\n  build_libbluray # Needs libxml >= 2.6, freetype, fontconfig. Uses dlfcn.\n  build_libbs2b # Needs libsndfile. Uses dlfcn.\n  build_libsoxr\n  build_libflite\n  build_libsnappy # Uses zlib (only for unittests [disabled]) and dlfcn.\n  build_vamp_plugin # Needs libsndfile for 'vamp-simple-host.exe' [disabled].\n  build_fftw # Uses dlfcn.\n  build_libsamplerate # Needs libsndfile >= 1.0.6 and fftw >= 0.15.0 for tests. Uses dlfcn.\n  build_librubberband # Needs libsamplerate, libsndfile, fftw and vamp_plugin. 'configure' will fail otherwise. Eventhough librubberband doesn't necessarily need them (libsndfile only for 'rubberband.exe' and vamp_plugin only for \"Vamp audio analysis plugin\"). How to use the bundled libraries '-DUSE_SPEEX' and '-DUSE_KISSFFT'?\n  build_frei0r # Needs dlfcn. could use opencv...\n  if [[ \"$bits_target\" != \"32\" ]]; then\n    if [[ $build_svt_hevc = y ]]; then\n      build_svt-hevc\n    fi\n    if [[ $build_svt_vp9 = y ]]; then\n      build_svt-vp9\n    fi\n    build_svt-av1\n  fi\n  build_vidstab\n  #build_facebooktransform360 # needs modified ffmpeg to use it so not typically useful\n  build_libmysofa # Needed for FFmpeg's SOFAlizer filter (https://ffmpeg.org/ffmpeg-filters.html#sofalizer). Uses dlfcn.\n  if [[ \"$non_free\" = \"y\" ]]; then\n    build_fdk-aac # Uses dlfcn.\n    if [[ $compiler_flavors != \"native\" ]]; then\n      build_libdecklink # Error finding rpc.h in native builds even if it's available\n    fi\n  fi\n  build_zvbi # Uses iconv, libpng and dlfcn.\n  build_fribidi # Uses dlfcn.\n  build_libass # Needs freetype >= 9.10.3 (see https://bugs.launchpad.net/ubuntu/+source/freetype1/+bug/78573 o_O) and fribidi >= 0.19.0. Uses fontconfig >= 2.10.92, iconv and dlfcn.\n\n  build_libxvid # FFmpeg now has native support, but libxvid still provides a better image.\n  build_libsrt # requires gnutls, mingw-std-threads\n  if [[ $ffmpeg_git_checkout_version != *\"n6.0\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n5.1\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n5.0\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n4.4\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n4.3\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n4.2\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n4.1\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n3.4\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n3.2\"* ]] && [[ $ffmpeg_git_checkout_version != *\"n2.8\"* ]]; then\n    build_libaribcaption\n  fi\n  build_libaribb24\n  build_libtesseract\n  build_lensfun  # requires png, zlib, iconv\n  # build_libtensorflow # broken\n  build_libvpx\n  build_libx265\n  build_libopenh264\n  build_libaom\n  build_dav1d\n  build_avisynth\n  build_libx264 # at bottom as it might internally build a copy of ffmpeg (which needs all the above deps...\n }\n\nbuild_apps() {\n  if [[ $build_dvbtee = \"y\" ]]; then\n    build_dvbtee_app\n  fi\n  # now the things that use the dependencies...\n  if [[ $build_libmxf = \"y\" ]]; then\n    build_libMXF\n  fi\n  if [[ $build_mp4box = \"y\" ]]; then\n    build_mp4box\n  fi\n  if [[ $build_mplayer = \"y\" ]]; then\n    build_mplayer\n  fi\n  if [[ $build_ffmpeg_static = \"y\" ]]; then\n    build_ffmpeg static\n  fi\n  if [[ $build_ffmpeg_shared = \"y\" ]]; then\n    build_ffmpeg shared\n  fi\n  if [[ $build_vlc = \"y\" ]]; then\n    build_vlc\n  fi\n  if [[ $build_lsw = \"y\" ]]; then\n    build_lsw\n  fi\n}\n\n# set some parameters initial values\ntop_dir=\"$(pwd)\"\ncur_dir=\"$(pwd)/sandbox\"\npatch_dir=\"$(pwd)/patches\"\ncpu_count=\"$(grep -c processor /proc/cpuinfo 2>/dev/null)\" # linux cpu count\nif [ -z \"$cpu_count\" ]; then\n  cpu_count=`sysctl -n hw.ncpu | tr -d '\\n'` # OS X cpu count\n  if [ -z \"$cpu_count\" ]; then\n    echo \"warning, unable to determine cpu count, defaulting to 1\"\n    cpu_count=1 # else default to just 1, instead of blank, which means infinite\n  fi\nfi\n\nset_box_memory_size_bytes\nif [[ $box_memory_size_bytes -lt 600000000 ]]; then\n  echo \"your box only has $box_memory_size_bytes, 512MB (only) boxes crash when building cross compiler gcc, please add some swap\" # 1G worked OK however...\n  exit 1\nfi\n\nif [[ $box_memory_size_bytes -gt 2000000000 ]]; then\n  gcc_cpu_count=$cpu_count # they can handle it seemingly...\nelse\n  echo \"low RAM detected so using only one cpu for gcc compilation\"\n  gcc_cpu_count=1 # compatible low RAM...\nfi\n\n# variables with their defaults\nbuild_ffmpeg_static=y\nbuild_ffmpeg_shared=n\nbuild_dvbtee=n\nbuild_libmxf=n\nbuild_mp4box=n\nbuild_mplayer=n\nbuild_vlc=n\nbuild_lsw=n # To build x264 with L-Smash-Works.\nbuild_dependencies=y\ngit_get_latest=y\nprefer_stable=y # Only for x264 and x265.\nbuild_intel_qsv=y # note: not windows xp friendly!\nbuild_amd_amf=y\ndisable_nonfree=y # comment out to force user y/n selection\noriginal_cflags='-mtune=generic -O3' # high compatible by default, see #219, some other good options are listed below, or you could use -march=native to target your local box:\noriginal_cppflags='-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0' # Needed for mingw-w64 7 as FORTIFY_SOURCE is now partially implemented, but not actually working\n# if you specify a march it needs to first so x264's configure will use it :| [ is that still the case ?]\n\n#flags=$(cat /proc/cpuinfo | grep flags)\n#if [[ $flags =~ \"ssse3\" ]]; then # See https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html, https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html and https://stackoverflow.com/questions/19689014/gcc-difference-between-o3-and-os.\n#  original_cflags='-march=core2 -O2'\n#elif [[ $flags =~ \"sse3\" ]]; then\n#  original_cflags='-march=prescott -O2'\n#elif [[ $flags =~ \"sse2\" ]]; then\n#  original_cflags='-march=pentium4 -O2'\n#elif [[ $flags =~ \"sse\" ]]; then\n#  original_cflags='-march=pentium3 -O2 -mfpmath=sse -msse'\n#else\n#  original_cflags='-mtune=generic -O2'\n#fi\nffmpeg_git_checkout_version=\nbuild_ismindex=n\nenable_gpl=y\nbuild_x264_with_libav=n # To build x264 with Libavformat.\nffmpeg_git_checkout=\"https://github.com/FFmpeg/FFmpeg.git\"\nffmpeg_source_dir=\nbuild_svt_hevc=n\nbuild_svt_vp9=n\n\n# parse command line parameters, if any\nwhile true; do\n  case $1 in\n    -h | --help ) echo \"available option=default_value:\n      --build-ffmpeg-static=y  (ffmpeg.exe, ffplay.exe and ffprobe.exe)\n      --build-ffmpeg-shared=n  (ffmpeg.exe (with libavformat-x.dll, etc., ffplay.exe, ffprobe.exe and dll-files)\n      --ffmpeg-git-checkout-version=[master] if you want to build a particular version of FFmpeg, ex: n3.1.1 or a specific git hash\n      --ffmpeg-git-checkout=[https://github.com/FFmpeg/FFmpeg.git] if you want to clone FFmpeg from other repositories\n      --ffmpeg-source-dir=[default empty] specifiy the directory of ffmpeg source code. When specified, git will not be used.\n      --x265-git-checkout-version=[master] if you want to build a particular version of x265, ex: --x265-git-checkout-version=Release_3.2 or a specific git hash\n      --fdk-aac-git-checkout-version= if you want to build a particular version of fdk-aac, ex: --fdk-aac-git-checkout-version=v2.0.1 or another tag\n      --gcc-cpu-count=[cpu_cores_on_box if RAM > 1GB else 1] number of cpu cores this speeds up initial cross compiler build.\n      --build-cpu-count=[cpu_cores_on_box] set to lower than your cpu cores if the background processes eating all your cpu bugs your desktop usage\n      --disable-nonfree=y (set to n to include nonfree like libfdk-aac,decklink)\n      --build-intel-qsv=y (set to y to include the [non windows xp compat.] qsv library and ffmpeg module. NB this not not hevc_qsv...\n      --sandbox-ok=n [skip sandbox prompt if y]\n      -d [meaning \\\"defaults\\\" skip all prompts, just build ffmpeg static 64 bit with some defaults for speed like no git updates]\n      --build-libmxf=n [builds libMXF, libMXF++, writeavidmxfi.exe and writeaviddv50.exe from the BBC-Ingex project]\n      --build-mp4box=n [builds MP4Box.exe from the gpac project]\n      --build-mplayer=n [builds mplayer.exe and mencoder.exe]\n      --build-vlc=n [builds a [rather bloated] vlc.exe]\n      --build-lsw=n [builds L-Smash Works VapourSynth and AviUtl plugins]\n      --build-ismindex=n [builds ffmpeg utility ismindex.exe]\n      -a 'build all' builds ffmpeg, mplayer, vlc, etc. with all fixings turned on [many disabled from disuse these days]\n      --build-svt-hevc=n [builds libsvt-hevc modules within ffmpeg etc.]\n      --build-svt-vp9=n [builds libsvt-hevc modules within ffmpeg etc.]\n      --build-dvbtee=n [build dvbtee.exe a DVB profiler]\n      --compiler-flavors=[multi,win32,win64,native] [default prompt, or skip if you already have one built, multi is both win32 and win64]\n      --cflags=[default is $original_cflags, which works on any cpu, see README for options]\n      --git-get-latest=y [do a git pull for latest code from repositories like FFmpeg--can force a rebuild if changes are detected]\n      --build-x264-with-libav=n build x264.exe with bundled/included \"libav\" ffmpeg libraries within it\n      --prefer-stable=y build a few libraries from releases instead of git master\n      --debug Make this script  print out each line as it executes\n      --enable-gpl=[y] set to n to do an lgpl build\n      --build-dependencies=y [builds the ffmpeg dependencies. Disable it when the dependencies was built once and can greatly reduce build time. ]\n       \"; exit 0 ;;\n    --sandbox-ok=* ) sandbox_ok=\"${1#*=}\"; shift ;;\n    --gcc-cpu-count=* ) gcc_cpu_count=\"${1#*=}\"; shift ;;\n    --build-cpu-count=* ) cpu_count=\"${1#*=}\"; shift ;;\n    --ffmpeg-git-checkout-version=* ) ffmpeg_git_checkout_version=\"${1#*=}\"; shift ;;\n    --ffmpeg-git-checkout=* ) ffmpeg_git_checkout=\"${1#*=}\"; shift ;;\n    --ffmpeg-source-dir=* ) ffmpeg_source_dir=\"${1#*=}\"; shift ;;\n    --x265-git-checkout-version=* ) x265_git_checkout_version=\"${1#*=}\"; shift ;;\n    --fdk-aac-git-checkout-version=* ) fdk_aac_git_checkout_version=\"${1#*=}\"; shift ;;\n    --build-libmxf=* ) build_libmxf=\"${1#*=}\"; shift ;;\n    --build-mp4box=* ) build_mp4box=\"${1#*=}\"; shift ;;\n    --build-ismindex=* ) build_ismindex=\"${1#*=}\"; shift ;;\n    --git-get-latest=* ) git_get_latest=\"${1#*=}\"; shift ;;\n    --build-amd-amf=* ) build_amd_amf=\"${1#*=}\"; shift ;;\n    --build-intel-qsv=* ) build_intel_qsv=\"${1#*=}\"; shift ;;\n    --build-x264-with-libav=* ) build_x264_with_libav=\"${1#*=}\"; shift ;;\n    --build-mplayer=* ) build_mplayer=\"${1#*=}\"; shift ;;\n    --cflags=* )\n       original_cflags=\"${1#*=}\"; echo \"setting cflags as $original_cflags\"; shift ;;\n    --build-vlc=* ) build_vlc=\"${1#*=}\"; shift ;;\n    --build-lsw=* ) build_lsw=\"${1#*=}\"; shift ;;\n    --build-dvbtee=* ) build_dvbtee=\"${1#*=}\"; shift ;;\n    --disable-nonfree=* ) disable_nonfree=\"${1#*=}\"; shift ;;\n    # this doesn't actually \"build all\", like doesn't build 10 high-bit LGPL ffmpeg, but it does exercise the \"non default\" type build options...\n    -a         ) compiler_flavors=\"multi\"; build_mplayer=n; build_libmxf=y; build_mp4box=n; build_vlc=y; build_lsw=n;\n                 build_ffmpeg_static=y; build_ffmpeg_shared=y; disable_nonfree=n; git_get_latest=y;\n                 sandbox_ok=y; build_amd_amf=y; build_intel_qsv=y; build_dvbtee=y; build_x264_with_libav=y; shift ;;\n    --build-svt-hevc=* ) build_svt_hevc=\"${1#*=}\"; shift ;;\n    --build-svt-vp9=* ) build_svt_vp9=\"${1#*=}\"; shift ;;\n    -d         ) echo \"defaults: doing 64 bit only, fast\"; gcc_cpu_count=$cpu_count; disable_nonfree=\"y\"; sandbox_ok=\"y\"; compiler_flavors=\"win64\"; git_get_latest=\"n\"; shift ;;\n    --compiler-flavors=* )\n         compiler_flavors=\"${1#*=}\";\n         if [[ $compiler_flavors == \"native\" && $OSTYPE == darwin* ]]; then\n           build_intel_qsv=n\n           echo \"disabling qsv since os x\"\n         fi\n         shift ;;\n    --build-ffmpeg-static=* ) build_ffmpeg_static=\"${1#*=}\"; shift ;;\n    --build-ffmpeg-shared=* ) build_ffmpeg_shared=\"${1#*=}\"; shift ;;\n    --prefer-stable=* ) prefer_stable=\"${1#*=}\"; shift ;;\n    --enable-gpl=* ) enable_gpl=\"${1#*=}\"; shift ;;\n    --build-dependencies=* ) build_dependencies=\"${1#*=}\"; shift ;;\n    --debug ) set -x; shift ;;\n    -- ) shift; break ;;\n    -* ) echo \"Error, unknown option: '$1'.\"; exit 1 ;;\n    * ) break ;;\n  esac\ndone\n\noriginal_cpu_count=$cpu_count # save it away for some that revert it temporarily\nreset_cflags # also overrides any \"native\" CFLAGS, which we may need if there are some 'linux only' settings in there\nreset_cppflags # Ensure CPPFLAGS are cleared and set to what is configured\ncheck_missing_packages # do this first since it's annoying to go through prompts then be rejected\nintro # remember to always run the intro, since it adjust pwd\ninstall_cross_compiler\n\nexport PKG_CONFIG_LIBDIR= # disable pkg-config from finding [and using] normal linux system installed libs [yikes]\n\nif [[ $OSTYPE == darwin* ]]; then\n  # mac add some helper scripts\n  mkdir -p mac_helper_scripts\n  cd mac_helper_scripts\n    if [[ ! -x readlink ]]; then\n      # make some scripts behave like linux...\n      curl -4 file://$patch_dir/md5sum.mac --fail > md5sum  || exit 1\n      chmod u+x ./md5sum\n      curl -4 file://$patch_dir/readlink.mac --fail > readlink  || exit 1\n      chmod u+x ./readlink\n    fi\n    export PATH=`pwd`:$PATH\n  cd ..\nfi\n\noriginal_path=\"$PATH\"\n\nif [[ $compiler_flavors == \"native\" ]]; then\n  echo \"starting native build...\"\n  # realpath so if you run it from a different symlink path it doesn't rebuild the world...\n  # mkdir required for realpath first time\n  mkdir -p $cur_dir/cross_compilers/native\n  mkdir -p $cur_dir/cross_compilers/native/bin\n  mingw_w64_x86_64_prefix=\"$(realpath $cur_dir/cross_compilers/native)\"\n  mingw_bin_path=\"$(realpath $cur_dir/cross_compilers/native/bin)\" # sdl needs somewhere to drop \"binaries\"??\n  export PKG_CONFIG_PATH=\"$mingw_w64_x86_64_prefix/lib/pkgconfig\"\n  export PATH=\"$mingw_bin_path:$original_path\"\n  make_prefix_options=\"PREFIX=$mingw_w64_x86_64_prefix\"\n  if [[ $(uname -m) =~ 'i686' ]]; then\n    bits_target=32\n  else\n    bits_target=64\n  fi\n  #  bs2b doesn't use pkg-config, sndfile needed Carbon :|\n  export CPATH=$cur_dir/cross_compilers/native/include:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/Carbon.framework/Versions/A/Headers # C_INCLUDE_PATH\n  export LIBRARY_PATH=$cur_dir/cross_compilers/native/lib\n  work_dir=\"$(realpath $cur_dir/native)\"\n  mkdir -p \"$work_dir\"\n  cd \"$work_dir\"\n    build_ffmpeg_dependencies\n    build_ffmpeg\n  cd ..\nfi\n\nif [[ $compiler_flavors == \"multi\" || $compiler_flavors == \"win32\" ]]; then\n  echo\n  echo \"Starting 32-bit builds...\"\n  host_target='i686-w64-mingw32'\n  mkdir -p $cur_dir/cross_compilers/mingw-w64-i686/$host_target\n  mingw_w64_x86_64_prefix=\"$(realpath $cur_dir/cross_compilers/mingw-w64-i686/$host_target)\"\n  mkdir -p $cur_dir/cross_compilers/mingw-w64-i686/bin\n  mingw_bin_path=\"$(realpath $cur_dir/cross_compilers/mingw-w64-i686/bin)\"\n  export PKG_CONFIG_PATH=\"$mingw_w64_x86_64_prefix/lib/pkgconfig\"\n  export PATH=\"$mingw_bin_path:$original_path\"\n  bits_target=32\n  cross_prefix=\"$mingw_bin_path/i686-w64-mingw32-\"\n  make_prefix_options=\"CC=${cross_prefix}gcc AR=${cross_prefix}ar PREFIX=$mingw_w64_x86_64_prefix RANLIB=${cross_prefix}ranlib LD=${cross_prefix}ld STRIP=${cross_prefix}strip CXX=${cross_prefix}g++\"\n  work_dir=\"$(realpath $cur_dir/win32)\"\n  mkdir -p \"$work_dir\"\n  cd \"$work_dir\"\n    build_ffmpeg_dependencies\n    build_apps\n  cd ..\nfi\n\nif [[ $compiler_flavors == \"multi\" || $compiler_flavors == \"win64\" ]]; then\n  echo\n  echo \"**************Starting 64-bit builds...\" # make it have a bit easier to you can see when 32 bit is done\n  host_target='x86_64-w64-mingw32'\n  mkdir -p $cur_dir/cross_compilers/mingw-w64-x86_64/$host_target\n  mingw_w64_x86_64_prefix=\"$(realpath $cur_dir/cross_compilers/mingw-w64-x86_64/$host_target)\"\n  mkdir -p $cur_dir/cross_compilers/mingw-w64-x86_64/bin\n  mingw_bin_path=\"$(realpath $cur_dir/cross_compilers/mingw-w64-x86_64/bin)\"\n  export PKG_CONFIG_PATH=\"$mingw_w64_x86_64_prefix/lib/pkgconfig\"\n  export PATH=\"$mingw_bin_path:$original_path\"\n  bits_target=64\n  cross_prefix=\"$mingw_bin_path/x86_64-w64-mingw32-\"\n  make_prefix_options=\"CC=${cross_prefix}gcc AR=${cross_prefix}ar PREFIX=$mingw_w64_x86_64_prefix RANLIB=${cross_prefix}ranlib LD=${cross_prefix}ld STRIP=${cross_prefix}strip CXX=${cross_prefix}g++\"\n  work_dir=\"$(realpath $cur_dir/win64)\"\n  mkdir -p \"$work_dir\"\n  cd \"$work_dir\"\n    build_ffmpeg_dependencies\n    build_apps\n  cd ..\nfi\n\necho \"searching for all local exe's (some may not have been built this round, NB)...\"\nfor file in $(find_all_build_exes); do\n  echo \"built $file\"\ndone\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "patches",
          "type": "tree",
          "content": null
        },
        {
          "name": "quick_build",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}