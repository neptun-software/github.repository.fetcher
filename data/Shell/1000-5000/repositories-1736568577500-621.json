{
  "metadata": {
    "timestamp": 1736568577500,
    "page": 621,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "K0p1-Git/cloudflare-ddns-updater",
      "stars": 1480,
      "defaultBranch": "main",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2020 Jason Koh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.0048828125,
          "content": "# Cloudflare Dynamic DNS IP Updater\n<img alt=\"GitHub\" src=\"https://img.shields.io/github/license/K0p1-Git/cloudflare-ddns-updater?color=black\"> <img alt=\"GitHub last commit (branch)\" src=\"https://img.shields.io/github/last-commit/K0p1-Git/cloudflare-ddns-updater/main\"> <img alt=\"GitHub contributors\" src=\"https://img.shields.io/github/contributors/K0p1-Git/cloudflare-ddns-updater\">\n\nThis script is used to update Dynamic DNS (DDNS) service based on Cloudflare! Access your home network remotely via a custom domain name without a static IP! Written in pure BASH.\n\n## Support Me\n[![Donate Via Paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.me/Jasonkkf)\n\n## Installation\n\n```bash\ngit clone https://github.com/K0p1-Git/cloudflare-ddns-updater.git\n```\n\n## Usage\nThis script is used with crontab. Specify the frequency of execution through crontab.\n\n```bash\n# ┌───────────── minute (0 - 59)\n# │ ┌───────────── hour (0 - 23)\n# │ │ ┌───────────── day of the month (1 - 31)\n# │ │ │ ┌───────────── month (1 - 12)\n# │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday 7 is also Sunday on some systems)\n# │ │ │ │ │ ┌───────────── command to issue                               \n# │ │ │ │ │ │\n# │ │ │ │ │ │\n# * * * * * /bin/bash {Location of the script}\n```\n\n## Tested Environments:\nmacOS Mojave version 10.14.6 (x86_64) <br />\nAlmaLinux 9.3 (Linux kernel: 5.14.0 | x86_64) <br />\nDebian Bullseye 11 (Linux kernel: 6.1.28 | aarch64) <br />\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\n## Reference\nThis script was made with reference from [Keld Norman](https://www.youtube.com/watch?v=vSIBkH7sxos) video.\n\n## License\n[MIT](https://github.com/K0p1-Git/cloudflare-ddns-updater/blob/main/LICENSE)\n"
        },
        {
          "name": "cloudflare-template.sh",
          "type": "blob",
          "size": 5.25390625,
          "content": "#!/bin/bash\n## change to \"bin/sh\" when necessary\n\nauth_email=\"\"                                       # The email used to login 'https://dash.cloudflare.com'\nauth_method=\"token\"                                 # Set to \"global\" for Global API Key or \"token\" for Scoped API Token\nauth_key=\"\"                                         # Your API Token or Global API Key\nzone_identifier=\"\"                                  # Can be found in the \"Overview\" tab of your domain\nrecord_name=\"\"                                      # Which record you want to be synced\nttl=3600                                            # Set the DNS TTL (seconds)\nproxy=\"false\"                                       # Set the proxy to true or false\nsitename=\"\"                                         # Title of site \"Example Site\"\nslackchannel=\"\"                                     # Slack Channel #example\nslackuri=\"\"                                         # URI for Slack WebHook \"https://hooks.slack.com/services/xxxxx\"\ndiscorduri=\"\"                                       # URI for Discord WebHook \"https://discordapp.com/api/webhooks/xxxxx\"\n\n\n###########################################\n## Check if we have a public IP\n###########################################\nipv4_regex='([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])'\nip=$(curl -s -4 https://cloudflare.com/cdn-cgi/trace | grep -E '^ip'); ret=$?\nif [[ ! $ret == 0 ]]; then # In the case that cloudflare failed to return an ip.\n    # Attempt to get the ip from other websites.\n    ip=$(curl -s https://api.ipify.org || curl -s https://ipv4.icanhazip.com)\nelse\n    # Extract just the ip from the ip line from cloudflare.\n    ip=$(echo $ip | sed -E \"s/^ip=($ipv4_regex)$/\\1/\")\nfi\n\n# Use regex to check for proper IPv4 format.\nif [[ ! $ip =~ ^$ipv4_regex$ ]]; then\n    logger -s \"DDNS Updater: Failed to find a valid IP.\"\n    exit 2\nfi\n\n###########################################\n## Check and set the proper auth header\n###########################################\nif [[ \"${auth_method}\" == \"global\" ]]; then\n  auth_header=\"X-Auth-Key:\"\nelse\n  auth_header=\"Authorization: Bearer\"\nfi\n\n###########################################\n## Seek for the A record\n###########################################\n\nlogger \"DDNS Updater: Check Initiated\"\nrecord=$(curl -s -X GET \"https://api.cloudflare.com/client/v4/zones/$zone_identifier/dns_records?type=A&name=$record_name\" \\\n                      -H \"X-Auth-Email: $auth_email\" \\\n                      -H \"$auth_header $auth_key\" \\\n                      -H \"Content-Type: application/json\")\n\n###########################################\n## Check if the domain has an A record\n###########################################\nif [[ $record == *\"\\\"count\\\":0\"* ]]; then\n  logger -s \"DDNS Updater: Record does not exist, perhaps create one first? (${ip} for ${record_name})\"\n  exit 1\nfi\n\n###########################################\n## Get existing IP\n###########################################\nold_ip=$(echo \"$record\" | sed -E 's/.*\"content\":\"(([0-9]{1,3}\\.){3}[0-9]{1,3})\".*/\\1/')\n# Compare if they're the same\nif [[ $ip == $old_ip ]]; then\n  logger \"DDNS Updater: IP ($ip) for ${record_name} has not changed.\"\n  exit 0\nfi\n\n###########################################\n## Set the record identifier from result\n###########################################\nrecord_identifier=$(echo \"$record\" | sed -E 's/.*\"id\":\"([A-Za-z0-9_]+)\".*/\\1/')\n\n###########################################\n## Change the IP@Cloudflare using the API\n###########################################\nupdate=$(curl -s -X PATCH \"https://api.cloudflare.com/client/v4/zones/$zone_identifier/dns_records/$record_identifier\" \\\n                     -H \"X-Auth-Email: $auth_email\" \\\n                     -H \"$auth_header $auth_key\" \\\n                     -H \"Content-Type: application/json\" \\\n                     --data \"{\\\"type\\\":\\\"A\\\",\\\"name\\\":\\\"$record_name\\\",\\\"content\\\":\\\"$ip\\\",\\\"ttl\\\":$ttl,\\\"proxied\\\":${proxy}}\")\n\n###########################################\n## Report the status\n###########################################\ncase \"$update\" in\n*\"\\\"success\\\":false\"*)\n  echo -e \"DDNS Updater: $ip $record_name DDNS failed for $record_identifier ($ip). DUMPING RESULTS:\\n$update\" | logger -s \n  if [[ $slackuri != \"\" ]]; then\n    curl -L -X POST $slackuri \\\n    --data-raw '{\n      \"channel\": \"'$slackchannel'\",\n      \"text\" : \"'\"$sitename\"' DDNS Update Failed: '$record_name': '$record_identifier' ('$ip').\"\n    }'\n  fi\n  if [[ $discorduri != \"\" ]]; then\n    curl -i -H \"Accept: application/json\" -H \"Content-Type:application/json\" -X POST \\\n    --data-raw '{\n      \"content\" : \"'\"$sitename\"' DDNS Update Failed: '$record_name': '$record_identifier' ('$ip').\"\n    }' $discorduri\n  fi\n  exit 1;;\n*)\n  logger \"DDNS Updater: $ip $record_name DDNS updated.\"\n  if [[ $slackuri != \"\" ]]; then\n    curl -L -X POST $slackuri \\\n    --data-raw '{\n      \"channel\": \"'$slackchannel'\",\n      \"text\" : \"'\"$sitename\"' Updated: '$record_name''\"'\"'s'\"\"' new IP Address is '$ip'\"\n    }'\n  fi\n  if [[ $discorduri != \"\" ]]; then\n    curl -i -H \"Accept: application/json\" -H \"Content-Type:application/json\" -X POST \\\n    --data-raw '{\n      \"content\" : \"'\"$sitename\"' Updated: '$record_name''\"'\"'s'\"\"' new IP Address is '$ip'\"\n    }' $discorduri\n  fi\n  exit 0;;\nesac\n"
        },
        {
          "name": "cloudflare-templatev6.sh",
          "type": "blob",
          "size": 8.0595703125,
          "content": "#!/bin/bash\n## change to \"bin/sh\" when necessary\n\n##############  CLOUDFLARE CREDENTIALS  ##############\n# @auth_email           - The email used to login 'https://dash.cloudflare.com'\n# @auth_method          - Set to \"global\" for Global API Key or \"token\" for Scoped API Token\n# @auth_key             - Your API Token or Global API Key\n# @zone_identifier      - Can be found in the \"Overview\" tab of your domain\n# -------------------------------------------------- #\nauth_email=\"\"\nauth_method=\"token\"\nauth_key=\"\"\nzone_identifier=\"\"\n\n#############  DNS RECORD CONFIGURATION  #############\n# @record_name          - Which record you want to be synced\n# @ttl                  - DNS TTL (seconds), can be set between (30 if enterprise) 60 and 86400 seconds, or 1 for Automatic\n# @proxy                - Set the proxy to true or false\n# -------------------------------------------------- #\nrecord_name=\"\"\nttl=3600\nproxy=\"false\"\n\n###############  SCRIPT CONFIGURATION  ###############\n# @static_IPv6_mode     - Useful if you are using EUI-64 IPv6 address with SLAAC IPv6 suffix token. (Privacy Extensions)\n#                       + Or some kind of static IPv6 assignment from DHCP server configuration, etc\n#                       + If set to false, the IPv6 address will be acquired from external services\n# @last_notable_hexes   - Used with `static_IPv6_mode`. Configure this to target what specific IPv6 address to search for\n#                       + E.g. Your global primary IPv6 address is 2404:6800:4001:80e::59ec:ab12:34cd, then\n#                       + You can put values (i.e. static suffixes) such as \"34cd\", \"ab12:34cd\" and etc\n# @log_header_name      - Header name used for logs\n# -------------------------------------------------- #\nstatic_IPv6_mode=\"false\"\nlast_notable_hexes=\"ffff:ffff\"\nlog_header_name=\"DDNS Updater_v6\"\n\n#############  WEBHOOKS CONFIGURATION  ###############\n# @sitename             - Title of site \"Example Site\"\n# @slackchannel         - Slack Channel #example\n# @slackuri             - URI for Slack WebHook \"https://hooks.slack.com/services/xxxxx\"\n# @discorduri           - URI for Discord WebHook \"https://discordapp.com/api/webhooks/xxxxx\"\n# -------------------------------------------------- #\nsitename=\"\"\nslackchannel=\"\"\nslackuri=\"\"\ndiscorduri=\"\"\n\n\n\n################################################\n## Make sure we have a valid IPv6 connection\n################################################\nif ! { curl -6 -s --head --fail https://ipv6.google.com >/dev/null; }; then\n    logger -s \"$log_header_name: Unable to establish a valid IPv6 connection to a known host.\"\n    exit 1\nfi\n\n################################################\n## Finding our IPv6 address\n################################################\n# Regex credits to https://stackoverflow.com/a/17871737\nipv6_regex=\"(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\"\n\nif $static_IPv6_mode; then\n    # Test whether 'ip' command is available\n    if { command -v \"ip\" &>/dev/null; }; then\n        ip=$(ip -6 -o addr show scope global primary -deprecated | grep -oE \"$ipv6_regex\" | grep -oE \".*($last_notable_hexes)$\")\n    else\n        # Fall back to 'ifconfig' command\n        ip=$(ifconfig | grep -oE \"$ipv6_regex\" | grep -oE \".*($last_notable_hexes)$\")\n    fi\nelse\n    # Use external services to discover our system's preferred IPv6 address\n    ip=$(curl -s -6 https://cloudflare.com/cdn-cgi/trace | grep -E '^ip')\n    ret=$?\n    if [[ ! $ret == 0 ]]; then # In the case that cloudflare failed to return an ip.\n        # Attempt to get the ip from other websites.\n        ip=$(curl -s -6 https://api64.ipify.org || curl -s -6 https://ipv6.icanhazip.com)\n    else\n        # Extract just the ip from the ip line from cloudflare.\n        ip=$(echo $ip | sed -E \"s/^ip=($ipv6_regex)$/\\1/\")\n    fi\nfi\n\n# Check point: Make sure the collected IPv6 address is valid\nif [[ ! $ip =~ ^$ipv6_regex$ ]]; then\n    logger -s \"$log_header_name: Failed to find a valid IPv6 address.\"\n    exit 1\nfi\n\n################################################\n## Check and set the proper auth header\n################################################\nif [[ \"${auth_method}\" == \"global\" ]]; then\n    auth_header=\"X-Auth-Key:\"\nelse\n    auth_header=\"Authorization: Bearer\"\nfi\n\n################################################\n## Seek for the AAAA record\n################################################\nlogger \"$log_header_name: Check Initiated\"\nrecord=$(curl -s -X GET \"https://api.cloudflare.com/client/v4/zones/$zone_identifier/dns_records?type=AAAA&name=$record_name\" \\\n    -H \"X-Auth-Email: $auth_email\" \\\n    -H \"$auth_header $auth_key\" \\\n    -H \"Content-Type: application/json\")\n\n################################################\n## Check if the domain has an AAAA record\n################################################\nif [[ $record == *\"\\\"count\\\":0\"* ]]; then\n    logger -s \"$log_header_name: Record does not exist, perhaps create one first? (${ip} for ${record_name})\"\n    exit 1\nfi\n\n################################################\n## Get existing IP\n################################################\nold_ip=$(echo \"$record\" | sed -E 's/.*\"content\":\"'${ipv6_regex}'\".*/\\1/')\n\n# Make sure the extracted IPv6 address is valid\nif [[ ! $old_ip =~ ^$ipv6_regex$ ]]; then\n    logger -s \"$log_header_name: Unable to extract existing IPv6 address from DNS record.\"\n    exit 1\nfi\n\n# Compare if they're the same\nif [[ $ip == $old_ip ]]; then\n    logger \"$log_header_name: IP ($ip) for ${record_name} has not changed.\"\n    exit 0\nfi\n\n################################################\n## Set the record identifier from result\n################################################\nrecord_identifier=$(echo \"$record\" | sed -E 's/.*\"id\":\"([A-Za-z0-9_]+)\".*/\\1/')\n\n################################################\n## Change the IP@Cloudflare using the API\n################################################\nupdate=$(curl -s -X PATCH \"https://api.cloudflare.com/client/v4/zones/$zone_identifier/dns_records/$record_identifier\" \\\n    -H \"X-Auth-Email: $auth_email\" \\\n    -H \"$auth_header $auth_key\" \\\n    -H \"Content-Type: application/json\" \\\n    --data \"{\\\"content\\\":\\\"$ip\\\",\\\"ttl\\\":$ttl,\\\"proxied\\\":$proxy}\")\n\n################################################\n## Report the status\n################################################\ncase \"$update\" in\n*\"\\\"success\\\":false\"*)\n    echo -e \"$log_header_name: $ip $record_name DDNS failed for $record_identifier ($ip). DUMPING RESULTS:\\n$update\" | logger -s\n    if [[ $slackuri != \"\" ]]; then\n        curl -L -X POST $slackuri \\\n            --data-raw \"{\n                \\\"channel\\\": \\\"$slackchannel\\\",\n                \\\"text\\\": \\\"$sitename DDNS Update Failed: $record_name: $record_identifier ($ip).\\\"\n            }\"\n    fi\n    if [[ $discorduri != \"\" ]]; then\n        curl -i -H \"Accept: application/json\" -H \"Content-Type:application/json\" -X POST \\\n            --data-raw \"{\n                \\\"content\\\": \\\"$sitename DDNS Update Failed: $record_name: $record_identifier ($ip).\\\"\n            }\" $discorduri\n    fi\n    exit 1\n    ;;\n*)\n    logger \"$log_header_name: $ip $record_name DDNS updated.\"\n    if [[ $slackuri != \"\" ]]; then\n        curl -L -X POST $slackuri \\\n            --data-raw \"{\n                \\\"channel\\\": \\\"$slackchannel\\\",\n                \\\"text\\\": \\\"$sitename Updated: $record_name's new IPv6 Address is $ip\\\"\n            }\"\n    fi\n    if [[ $discorduri != \"\" ]]; then\n        curl -i -H \"Accept: application/json\" -H \"Content-Type:application/json\" -X POST \\\n            --data-raw \"{\n                \\\"content\\\": \\\"$sitename Updated: $record_name's new IPv6 Address is $ip\\\"\n            }\" $discorduri\n    fi\n    exit 0\n    ;;\nesac\n"
        }
      ]
    }
  ]
}