{
  "metadata": {
    "timestamp": 1736568325076,
    "page": 249,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "monlor/docker-xiaoya",
      "stars": 2454,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.75390625,
          "content": "Creative Commons Attribution-NonCommercial 4.0 International\n\nYou are free to:\n\n- Share — copy and redistribute the material in any medium or format\n- Adapt — remix, transform, and build upon the material\n\nUnder the following terms:\n\n- Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n- NonCommercial — You may not use the material for commercial purposes.\n\nNo additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.\n\nFor more details, visit https://creativecommons.org/licenses/by-nc/4.0/"
        },
        {
          "name": "Questions.md",
          "type": "blob",
          "size": 0.634765625,
          "content": "### 常见问题\n\n#### 获取file id失败\n\n1. 请检查你的阿里云盘token，opentoken和folderid配置是否正确，\n2. 阿里云盘空间是否饱和，\n3. 多次尝试更换token和opentoken。\n\n#### 访问502\n\n检查日志，查看服务是否正常启动\n\n#### 怎么更新服务，怎么修改阿里云盘和夸克云盘配置？\n\n重新执行安装脚本可以更新服务配置\n\n#### 是否可以更新小雅的镜像？\n\n1. 一般情况下没有必要同步更新小雅的镜像，除非有新功能上的变动，这种情况下给我提feature，我会同步更新\n2. 小雅的alist数据会每天自动更新，不需要更新镜像"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.658203125,
          "content": "![docker-xiaoya](https://socialify.git.ci/monlor/docker-xiaoya/image?description=0&font=Rokkitt&forks=1&issues=1&language=1&logo=https%3A%2F%2Fcdn.monlor.com%2F2024%2F6%2F4%2F2024-06-04%252017.30.47.jpeg&name=1&owner=1&pattern=Circuit%20Board&pulls=1&stargazers=1&theme=Auto)\n\n<div align=\"center\">\n<h2>小雅全家桶部署</h2>\n<p><em>使用 Docker Compose 一键部署 Alist + Emby + Jellyfin</em></p>\n</div>\n\n<p align=\"center\">\n<a href=\"https://github.com/monlor/docker-xiaoya/actions/workflows/docker-build.yml\"><img src=\"https://github.com/monlor/docker-xiaoya/actions/workflows/docker-build.yml/badge.svg\" alt=\"Build Status\"></a> \n<a><img src=\"https://img.shields.io/github/repo-size/monlor/docker-xiaoya.svg?style=flat\" alt=\"repo size\"></a> \n<a href=\"https://github.com/monlor/docker-xiaoya/releases/latest\"><img src=\"https://img.shields.io/github/v/release/monlor/docker-xiaoya\" alt=\"GitHub release (latest by date)\"></a> \n<a href=\"https://github.com/monlor/docker-xiaoya/graphs/contributors\"><img src=\"https://img.shields.io/badge/Contributors-6-orange.svg\" alt=\"All Contributors\"></a> \n<a href=\"https://buymeacoffee.com/monlor\"><img src=\"https://img.shields.io/badge/Buy%20me%20a%20coffee-048754?logo=buymeacoffee\" alt=\"buymeacoffee\"></a>\n</p>\n\n## 功能特性\n\n![](https://cdn.monlor.com/2024/6/4/SCR-20240603-kpvb.jpeg)\n\n🚀 使用 Docker Compose 一键部署服务，兼容群晖，Linux，Windows，Mac，包含所有X86和Arm架构\n\n✨ 部署alist+下载元数据+部署emby/jellyfin服务全流程自动，无需人工干预\n\n* 所有脚本集成到 Docker 镜像，避免污染系统环境\n* 合并jellyfin和emby的x86和arm镜像，部署时无需区分镜像名\n* 自动清理阿里云盘，默认每10分钟一次\n* 自动更新小雅alist中的云盘数据，默认每天一次\n* 自动更新emby服务配置，默认每周一次\n* 自动更新emby媒体数据，默认每天一次\n* 支持小雅夸克网盘资源，挂载自定义夸克网盘资源\n* 支持小雅PikPak网盘资源，挂载自定义PikPak资源\n* 支持小雅阿里云盘资源，挂载自定义阿里云盘资源\n* 支持WebDav，TvBox服务\n* [Beta]适配Armv7设备，包括alist, emby和jellyfin\n\n## 提问规则\n\n1. 提BUG和需求，在 [Issues](https://github.com/monlor/docker-xiaoya/issues) 里提\n2. 相关问题讨论或其他内容，在 [Discussions](https://github.com/monlor/docker-xiaoya/discussions) 里提\n\n## 一键部署\n\n### 部署或更新脚本\n\n> 脚本支持重复执行，每天自动同步最新镜像（不需要同步请选择下面的稳定版本）\n\n```bash\nexport VERSION=main && bash -c \"$(curl -fsSL ${GH_PROXY}https://raw.githubusercontent.com/monlor/docker-xiaoya/${VERSION:-main}/install.sh)\"\n```\n\n**使用加速源**\n\n```bash\nexport VERSION=main GH_PROXY=https://gh.monlor.com/ IMAGE_PROXY=ghcr.monlor.com && bash -c \"$(curl -fsSL ${GH_PROXY}https://raw.githubusercontent.com/monlor/docker-xiaoya/${VERSION:-main}/install.sh)\"\n```\n\n**环境信息**\n\n| 类型  | 地址 | 默认用户密码 |\n| --- | --- | --- |\n| alist | http://ip:5678 | - |\n| webdav | http://ip:5678/dav | guest/guest_Api789 |\n| tvbox | http://ip:5678/tvbox/my_ext.json | - |\n| emby | http://ip:2345 | xiaoya/1234 |\n| jellyfin | http://ip:2346 | ailg/5678 |\n\n### 卸载脚本\n\n```bash\nbash -c \"$(curl -fsSL https://raw.githubusercontent.com/monlor/docker-xiaoya/main/uninstall.sh)\"\n```\n\n**使用加速源**\n\n```bash\nexport GH_PROXY=https://gh.monlor.com/ IMAGE_PROXY=ghcr.monlor.com && bash -c \"$(curl -fsSL ${GH_PROXY}https://raw.githubusercontent.com/monlor/docker-xiaoya/main/uninstall.sh)\"\n```\n\n### 自定义配置\n\n【**非必须，小白跳过这一步**】脚本没有计划支持硬解，在我看来这个功能没有必要。如果你需要修改硬解，端口，数据目录，环境变量，请自行修改docker-compose.yml和env文件，修改完成后执行下面的命令，使配置生效。**修改后注意**：执行更新脚本会覆盖docker-compose.yml，不会覆盖env文件。\n\n```bash\ncd 你的安装目录\ndocker-compose up --remove-orphans -d\n```\n\n### 稳定版\n\n> release 版本\n\n```bash\nbash -c \"$(curl -fsSL https://raw.githubusercontent.com/monlor/docker-xiaoya/main/install.sh)\"\n```\n\n## 部署配置推荐\n\n| 部署方案          | CPU      | 内存      | 硬盘      |\n| ----------------- | -------- | --------- | --------- |\n| Alist + Emby      | 2核   | 4G    | 140G  |\n| 仅部署 Alist      | 1核   | 512M  | 512M  |\n| Alist + Emby + Jellyfin      | 4核   | 8G    | 300G  |\n| Alist + Jellyfin      | 4核   | 8G    | 155G  |\n\n## 配置示例\n\n* [只部署小雅alist](/docker-compose-alist.yml)\n* [部署小雅alist+emby](/docker-compose.yml)\n* [部署小雅alist+jellyfin](/docker-compose-jellyfin.yml)\n* [部署小雅alist+emby+jellyfin](/docker-compose-all.yml)\n\n## 服务组件介绍\n\n* [Alist](/alist): 提供资源在线播放，WebDav服务\n* [Metadata](/metadata): Emby和Jellyfin的元数据管理\n* [Emby](/emby): 用家庭影视库的方式，可视化展示Alist中的资源\n* [Jellyfin](/jellyfin): Emby的开源版本，功能是一样的\n\n## 手动部署\n\n仅展示小雅alist+emby的部署方式\n\n### 使用Docker Compose\n\n1. 创建compose文件夹\n\n```bash\nmkdir /opt/xiaoya\ncd /opt/xiaoya\n```\n\n2. 下载配置\n\n```bash\ncurl -#LO https://raw.githubusercontent.com/monlor/docker-xiaoya/main/docker-compose.yml\ncurl -#LO https://raw.githubusercontent.com/monlor/docker-xiaoya/main/env\n```\n\n3. 修改配置env里面的阿里云盘相关变量，启动服务\n\n```bash\ndocker compose up -d\n```\n\n4. 查看日志\n\n```bash\ndocker compose logs\n```\n\n### 部署在 Kubernetes\n\n1. 安装helm\n\n```bash\ncurl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n```\n\n2. 安装helmfile\n\n```bash\nver=0.161.0\ncurl -LO https://github.com/helmfile/helmfile/releases/download/v${ver}/helmfile_${ver}_linux_arm64.tar.gz\ntar zxvf helmfile_${ver}_linux_arm64.tar.gz -C helmfile\nmv helmfile/helmfile /usr/local/bin\nrm -rf helmfile helmfile_${ver}_linux_arm64.tar.gz\nhelm plugin install https://github.com/databus23/helm-diff\n```\n\n3. 下载helmfile配置\n\n```bash\ncurl -#LO https://raw.githubusercontent.com/monlor/docker-xiaoya/main/helmfile.yaml\n```\n\n4. 修改helmfile的环境变量，环境变量含义看这里[alist](/alist)\n\n```yaml\nenv:\n    ...\n    WEBDAV_PASSWORD: \n    ALIYUN_TOKEN: \n    ALIYUN_OPEN_TOKEN: \n    ALIYUN_FOLDER_ID: \n    QUARK_COOKIE:\n    PAN115_COOKIE:\n    PIKPAK_USER:\n    ...\n```\n\n5. 部署helm服务\n\n```bash\nhelmfile sync -f helmfile.yaml\n```\n\n### 使用docker部署【不推荐】\n\n1. 创建volume\n\n```bash\ndocker volume create xiaoya\ndocker volume create media\ndocker volume create config\ndocker volume create meta\ndocker volume create cache\n```\n\n2. 创建网络\n\n```bash\ndocker network create xiaoya\n```\n\n3. 启动小雅alist，修改下面的阿里云盘配置，再执行命令\n\n```bash\ndocker run -d --name alist \\\n    -v xiaoya:/data \\\n    -p 5678:5678 -p 2345:2345 -p 2346:2346 \\\n    -e TZ=Asia/Shanghai \\\n    -e ALIYUN_TOKEN=阿里云盘TOKEN \\\n    -e ALIYUN_OPEN_TOKEN=阿里云盘Open Token \\\n    -e ALIYUN_FOLDER_ID=阿里云盘文件夹ID \\\n    -e QUARK_COOKIE=夸克网盘cookie \\\n    -e AUTO_UPDATE_ENABLED=true \\\n    -e AUTO_CLEAR_ENABLED=true \\\n    --network=xiaoya \\\n    ghcr.io/monlor/xiaoya-alist \n```\n\n4. 启动metadata用于元数据同步\n\n```bash\ndocker run -d --name metadata \\\n    -e LANG=C.UTF-8 \\\n    -e EMBY_ENABLED=true \\\n    -e JELLYFIN_ENABLED=false \\\n    -e AUTO_UPDATE_EMBY_CONFIG_ENABLED=true \\\n    -v xiaoya:/etc/xiaoya \\\n    -v media:/media/xiaoya \\\n    -v config:/media/config \\\n    -v cache:/media/config/cache \\\n    -v meta:/media/temp \\\n    --network=xiaoya \\\n    ghcr.io/monlor/xiaoya-metadata\n```\n\n5. 启动emby服务\n\n```bash\ndocker run -d --name emby\n    -e TZ=Asia/Shanghai \\\n    -e GIDLIST=0 \\\n    -e ALIST_ADDR=http://alist:5678 \\\n    -v media:/media \\\n    -v config:/config \\\n    -v cache:/cache \\\n    -p 6908:6908 \\\n    --network=xiaoya \\\n    ghcr.io/monlor/xiaoya-embyserver\n```\n\n6. 查看日志\n\n```\ndocker logs alist\ndocker logs metadata\ndocker logs emby\n```\n\n## 安全建议\n\n* 开启alist的登陆，alist服务设置webdav的密码`WEBDAV_PASSWORD`\n* 在emby控制台修改ApiKey，这个key需要配置到metadata和alist服务，变量名：`EMBY_APIKEY`\n\n## 赞助\n\n<a href=\"https://www.buymeacoffee.com/monlor\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\" alt=\"Buy Me A Coffee\" style=\"height: 60px !important;width: 217px !important;\" ></a>\n\n## License\n\nThis project is licensed under the [Creative Commons Attribution-NonCommercial 4.0 International License](https://creativecommons.org/licenses/by-nc/4.0/).\n\n## 参考\n\nhttps://github.com/DDS-Derek/xiaoya-alist\n\nhttps://www.kdocs.cn/l/cvEe3cv6dGkH\n\nhttps://xiaoyaliu.notion.site/xiaoya-docker-69404af849504fa5bcf9f2dd5ecaa75f"
        },
        {
          "name": "alist",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.287109375,
          "content": "#!/bin/bash\n\nservice=\"$1\"\nservices=(\n    \"alist\"\n    \"emby\"\n    \"jellyfin\"\n    \"metadata\"\n)\n\nif [ -z \"$service\" ]; then\n    for service in \"${services[@]}\"; do\n        docker build -t \"monlor/xiaoya-$service\" \"$service\"\n    done\nelse\n    docker build -t \"monlor/xiaoya-$service\" \"$service\"\nfi\n\n"
        },
        {
          "name": "docker-compose-alist.yml",
          "type": "blob",
          "size": 0.2880859375,
          "content": "services:\n  alist:\n    image: ghcr.io/monlor/xiaoya-alist:latest\n    volumes:\n      - xiaoya:/data\n    ports:\n      - \"5678:5678\"\n      - \"2345:2345\"\n      - \"2346:2346\"\n    env_file:\n      - env\n    restart: unless-stopped\n    networks:\n      - default\n\nnetworks:\n  default:\n\nvolumes:\n  xiaoya:"
        },
        {
          "name": "docker-compose-all.yml",
          "type": "blob",
          "size": 1.4765625,
          "content": "services:\n  alist:\n    image: ghcr.io/monlor/xiaoya-alist:latest\n    volumes:\n      - xiaoya:/data\n    ports:\n      - \"5678:5678\"\n      - \"2345:2345\"\n      - \"2346:2346\"\n    env_file:\n      - env\n    restart: unless-stopped\n    networks:\n      - default\n  metadata:\n    image: ghcr.io/monlor/xiaoya-metadata:latest\n    environment:\n      - EMBY_ENABLED=true\n      - JELLYFIN_ENABLED=true\n    env_file:\n      - env\n    volumes:\n      - xiaoya:/etc/xiaoya\n      - media:/media/xiaoya\n      - config:/media/config\n      - cache:/media/config/cache\n      - jf_media:/media/jf_xiaoya\n      - jf_config:/media/jf_config\n      - jf_cache:/media/jf_config/cache\n      - meta:/media/temp\n    depends_on:\n      - alist\n    restart: unless-stopped\n    networks:\n      - default\n  emby:\n    image: ghcr.io/monlor/xiaoya-embyserver:latest\n    env_file:\n      - env\n    depends_on:\n      - metadata\n      - alist\n    volumes:\n      - media:/media\n      - config:/config\n      - cache:/cache\n    ports:\n      - \"6908:6908\"\n    restart: unless-stopped\n    networks:\n      - default\n  jellyfin:\n    image: ghcr.io/monlor/xiaoya-jellyfin:latest\n    env_file:\n      - env\n    privileged: true\n    depends_on:\n      - metadata\n      - alist\n    volumes:\n      - jf_media:/media\n      - jf_config:/config\n      - jf_cache:/cache\n    ports:\n      - 8096:8096\n    restart: unless-stopped\n    networks:\n      - default\n\nnetworks:\n  default:\n\nvolumes:\n  xiaoya:\n  media:\n  config:\n  cache:\n  jf_media:\n  jf_config:\n  jf_cache:\n  meta:\n  "
        },
        {
          "name": "docker-compose-jellyfin.yml",
          "type": "blob",
          "size": 1.06640625,
          "content": "services:\n  alist:\n    image: ghcr.io/monlor/xiaoya-alist:latest\n    volumes:\n      - xiaoya:/data\n    ports:\n      - \"5678:5678\"\n      - \"2345:2345\"\n      - \"2346:2346\"\n    env_file:\n      - env\n    restart: unless-stopped\n    networks:\n      - default\n  metadata:\n    image: ghcr.io/monlor/xiaoya-metadata:latest\n    environment:\n      - EMBY_ENABLED=false\n      - JELLYFIN_ENABLED=true\n    env_file:\n      - env\n    volumes:\n      - xiaoya:/etc/xiaoya\n      - jf_media:/media/jf_xiaoya\n      - jf_config:/media/jf_config\n      - jf_cache:/media/jf_config/cache\n      - meta:/media/temp\n    depends_on:\n      - alist\n    restart: unless-stopped\n    networks:\n      - default\n  jellyfin:\n    image: ghcr.io/monlor/xiaoya-jellyfin:latest\n    env_file:\n      - env\n    privileged: true\n    depends_on:\n      - metadata\n      - alist\n    volumes:\n      - jf_media:/media\n      - jf_config:/config\n      - jf_cache:/cache\n    ports:\n      - 8096:8096\n    restart: unless-stopped\n    networks:\n      - default\n\nnetworks:\n  default:\n\nvolumes:\n  xiaoya:\n  jf_media:\n  jf_config:\n  jf_cache:\n  meta:"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.9384765625,
          "content": "services:\n  alist:\n    image: ghcr.io/monlor/xiaoya-alist:latest\n    volumes:\n      - xiaoya:/data\n    ports:\n      - \"5678:5678\"\n      - \"2345:2345\"\n      - \"2346:2346\"\n    env_file:\n      - env\n    restart: unless-stopped\n    networks:\n      - default\n  metadata:\n    image: ghcr.io/monlor/xiaoya-metadata:latest\n    env_file:\n      - env\n    volumes:\n      - xiaoya:/etc/xiaoya\n      - media:/media/xiaoya\n      - config:/media/config\n      - cache:/media/config/cache\n      - meta:/media/temp\n    depends_on:\n      - alist\n    restart: unless-stopped\n    networks:\n      - default\n  emby:\n    image: ghcr.io/monlor/xiaoya-embyserver:latest\n    env_file:\n      - env\n    depends_on:\n      - metadata\n      - alist\n    volumes:\n      - media:/media\n      - config:/config\n      - cache:/cache\n    ports:\n      - \"6908:6908\"\n    restart: unless-stopped\n    networks:\n      - default\n\nnetworks:\n  default:\n\nvolumes:\n  xiaoya:\n  media:\n  config:\n  meta:\n  cache:"
        },
        {
          "name": "emby",
          "type": "tree",
          "content": null
        },
        {
          "name": "env",
          "type": "blob",
          "size": 1.435546875,
          "content": "TZ=Asia/Shanghai\n# 阿里云盘token\nALIYUN_TOKEN=\n# 阿里云盘open token\nALIYUN_OPEN_TOKEN=\n# 阿里云盘文件夹ID\nALIYUN_FOLDER_ID=\n# 夸克网盘的cookie\nQUARK_COOKIE=\n# 115网盘的cookie\nPAN115_COOKIE=\n# 阿里云盘转存115播放\nALIYUN_TO_115=\n# 自动更新小雅alist文件\nAUTO_UPDATE_ENABLED=false\n# 自动清理阿里云盘\nAUTO_CLEAR_ENABLED=true\n# 阿里云盘自动清理间隔，单位分钟，范围0-60分钟，默认10分钟\nAUTO_CLEAR_INTERVAL=\n# pikpak 账号，用来观看小雅中pikpak分享给你的资源，格式：`qqq@qq.com:aaadds`\nPIKPAK_USER=\n# 开启tvbox随机订阅地址，true/false，默认false\nTVBOX_SECURITY=\n# webdav用户名为dav，设置密码。默认用户密码：guest/guest_Api789\nWEBDAV_PASSWORD=\n\n# emby 地址，容器内部使用地址，一般不用改\nEMBY_ADDR=http://emby:6908\n# jellyfin 地址，容器内部使用地址，一般不用改\nJELLYFIN_ADDR=http://jellyfin:8096\n# alist 地址，容器内部使用地址，一般不用改\nALIST_ADDR=http://alist:5678\n\n# 是否启用emby\nEMBY_ENABLED=true\n# 是否启用jellyfin\nJELLYFIN_ENABLED=false\n# 自动更新emby的配置，依赖EMBY_APIKEY\nAUTO_UPDATE_EMBY_CONFIG_ENABLED=false\n# 自动更新emby配置，config.mp4间隔，单位天，默认7天\nAUTO_UPDATE_EMBY_INTERVAL=\n# 自动更新emby元数据\nAUTO_UPDATE_EMBY_METADATA_ENABLED=true\n# emby的apikey\nEMBY_APIKEY=\n# 下载解压完是否清除源文件，true/false，默认false\nCLEAR_TEMP=\n"
        },
        {
          "name": "helmfile.yaml",
          "type": "blob",
          "size": 4.06640625,
          "content": "# 定义全局的repositories\nrepositories:\n  - name: monlor\n    url: https://monlor.github.io/helm-charts\n\nreleases:\n  - name: alist\n    namespace: media\n    chart: monlor/quickchart\n    version: 0.3.2\n    values:\n      - port: 5678\n        extraPort:\n        - port: 2345\n          protocol: TCP\n        - port: 2346\n          protocol: TCP\n        nodeSelector:\n          kubernetes.io/hostname: nuc-1-node-1\n        image:\n          repository: ghcr.io\n          name: monlor/xiaoya-alist\n          tag: latest\n          pullPolicy: Always\n        env:\n          TZ: Asia/Shanghai\n          AUTO_UPDATE_ENABLED: true\n          AUTO_CLEAR_ENABLED: true\n          WEBDAV_PASSWORD: \n          ALIYUN_TOKEN: \n          ALIYUN_OPEN_TOKEN: \n          ALIYUN_FOLDER_ID: \n          QUARK_COOKIE:\n          PAN115_COOKIE:\n          PIKPAK_USER:\n        volumes:\n        - name: data\n          mountPath: /data\n          hostPath: \n            path: /opt/xiaoya/data\n            type: DirectoryOrCreate\n        health:\n          enabled: false\n        strategy:\n          type: Recreate\n        resources: \n          limits:\n            cpu: 2\n            memory: 4Gi\n          requests:\n            cpu: 100m\n            memory: 1Gi\n        ingress:\n          enabled: true\n          className: nginx\n          clusterIssuer: cloudflare\n          hosts:\n          - host: alist.monlor.cn\n          - host: emby.monlor.cn\n            port: 2345\n  \n  - name: metadata\n    namespace: media\n    chart: monlor/quickchart\n    version: 0.3.2\n    values:\n      - nodeSelector:\n          kubernetes.io/hostname: nuc-1-node-1\n        image:\n          repository: ghcr.io\n          name: monlor/xiaoya-metadata\n          tag: latest\n          pullPolicy: Always  \n        env:\n          TZ: Asia/Shanghai\n          # ALIST_ADDR: http://alist:5678\n          EMBY_ENABLED: true\n          JELLYFIN_ENABLED: false\n          AUTO_UPDATE_EMBY_CONFIG_ENABLED: true\n          AUTO_UPDATE_EMBY_METADATA_ENABLED: true\n        volumes:\n        - name: data\n          mountPath: /etc/xiaoya\n          hostPath: \n            path: /opt/xiaoya/data\n            type: DirectoryOrCreate\n        - name: media\n          mountPath: /media/xiaoya\n          hostPath: \n            path: /opt/xiaoya/media\n            type: DirectoryOrCreate\n        - name: config\n          mountPath: /media/config\n          hostPath: \n            path: /opt/xiaoya/config\n            type: DirectoryOrCreate\n        - name: meta\n          mountPath: /media/temp\n          hostPath: \n            path: /opt/xiaoya/temp\n            type: DirectoryOrCreate\n        health:\n          enabled: false\n        strategy:\n          type: Recreate\n        resources: \n          limits:\n            cpu: 4\n            memory: 8Gi\n          requests:\n            cpu: 100m\n            memory: 512Mi\n\n  - name: emby\n    namespace: media\n    chart: monlor/quickchart\n    version: 0.3.2\n    values:\n      - port: 6908\n        extraPort:\n          - port: 8080\n            protocol: TCP\n        nodeSelector:\n          kubernetes.io/hostname: nuc-1-node-1\n        image:\n          repository: ghcr.io\n          name: monlor/xiaoya-embyserver\n          tag: latest\n          pullPolicy: Always  \n        env:\n          TZ: Asia/Shanghai\n          # ALIST_ADDR: http://alist:5678\n        volumes:\n        - name: media\n          mountPath: /media\n          hostPath: \n            path: /opt/xiaoya/media\n            type: DirectoryOrCreate\n        - name: config\n          mountPath: /config\n          hostPath: \n            path: /opt/xiaoya/config\n            type: DirectoryOrCreate\n        - name: cache\n          mountPath: /cache\n          hostPath: \n            path: /opt/xiaoya/config/cache\n            type: DirectoryOrCreate\n        health:\n          enabled: false\n        strategy:\n          type: Recreate\n        resources: \n          limits:\n            cpu: 4\n            memory: 8Gi\n          requests:\n            cpu: 500m\n            memory: 1Gi\n        # ingress:\n        #   enabled: true\n        #   className: nginx\n        #   clusterIssuer: cloudflare\n        #   hosts:\n        #   - host: emby.monlor.cn\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 10.869140625,
          "content": "#!/bin/bash\n\nset -eu\n\nsedsh() {\n  if [[ \"$(uname -o)\" = \"Darwin\" ]]; then\n    # macOS\n    sed -i '' \"$@\"\n  else\n    # Linux\n    sed -i \"$@\"\n  fi\n}\n\n# 解除read输入长度限制\nif [[ \"$(uname -o)\" = \"Darwin\" ]]; then\n  stty -icanon\nfi\n\n# 格式https://xxx.com/\nGH_PROXY=\"${GH_PROXY:=}\"\n# 格式xxx.com\nIMAGE_PROXY=\"${IMAGE_PROXY:=}\"\n\n# 服务镜像\nIMAGE_TAG=\"${VERSION:-latest}\"\n# 服务下载地址\nDOWNLOAD_URL=\"${GH_PROXY}https://raw.githubusercontent.com/monlor/docker-xiaoya/${VERSION:-main}\"\n\n# 欢迎信息\necho \"欢迎使用xiaoya服务部署脚本\"\necho \"项目地址：https://github.com/monlor/docker-xiaoya\"\necho \"作者：monlor (https://link.monlor.com)\"\necho\n\n# 检查docker服务是否存在，不存在则询问用户是否安装，不安装退出脚本\nif ! command -v docker &> /dev/null; then\n  if [ \"$(uname -o)\" = \"Darwin\" ]; then\n    echo \"Docker 未安装，请安装docker后再运行脚本，推荐OrbStack：https://orbstack.dev/\"\n    exit 1\n  fi\n  read -rp \"Docker 未安装，是否安装？(y/n): \" install\n  if [ \"$install\" = \"y\" ]; then\n    echo \"安装docker...\"\n    curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun\n    systemctl enable docker\n    systemctl start docker\n  else \n    echo \"退出安装\"\n    exit 1\n  fi\nfi\n\nDOCKER_COMPOSE=\"docker compose\"\n\n# 检查是否安装了compose插件,docker compose 命令\nif ! docker compose &> /dev/null && ! which docker-compose &> /dev/null; then\n  read -rp \"Docker Compose 未安装，是否安装？(y/n): \" install\n  if [ \"$install\" = \"y\" ]; then\n    echo \"安装docker compose...\"\n    # 判断系统是x86还是arm，arm有很多种类，都要判断\n    if [ \"$(uname -m)\" = \"aarch64\" ]; then\n      file=docker-compose-linux-aarch64\n    elif [ \"$(uname -m)\" = \"x86_64\" ]; then\n      file=docker-compose-linux-x86_64\n    else\n      echo \"不支持的系统架构$(uname -m), 请自行安装docker compose(https://docs.docker.com/compose/install/linux/#install-using-the-repository)\"\n      exit 1\n    fi\n    curl -SL \"${GH_PROXY}https://github.com/docker/compose/releases/download/v2.27.1/$file\" -o /usr/local/bin/docker-compose\n    chmod +x /usr/local/bin/docker-compose\n  else\n    echo \"退出安装\"\n    exit 1\n  fi\nfi\n\nif ! docker compose &> /dev/null; then\n  DOCKER_COMPOSE=\"docker-compose\"\nfi\n\n# 让用户输入服务部署目录，默认/opt/xiaoya\nread -rp \"请输入服务部署目录（默认/opt/xiaoya）: \" install_path\ninstall_path=${install_path:=/opt/xiaoya}\n\n# 检查服务是否已经运行\nupdate=0\nif [ -f \"$install_path/docker-compose.yml\" ]; then\n  # 询问用户是否要更新服务\n  cat <<-EOF\n\n更新方式：\n1. 全部更新，会覆盖更新docker-compose.yml和env配置\n2. 部分更新，仅覆盖更新docker-compose.yml\n3. 退出脚本，不更新\nEOF\n  read -rp \"请选择更新方式（默认为1）: \" update\n  update=${update:-1}\n  case $update in\n    1|2)\n      # 备份\n      cp -rf \"$install_path/env\" \"$install_path/env.bak\"\n      cp -rf \"$install_path/docker-compose.yml\" \"$install_path/docker-compose.yml.bak\"\n      ;;\n    *)\n      echo \"退出安装\"\n      exit 1\n      ;;\n  esac\n  \nfi\n\nDOCKER_HOME=\"$(docker info | grep \"Docker Root Dir\" | awk -F ':' '{print$2}')\"\n\n# 选择数据保存位置\ndata_location=1\nif [ -d \"$install_path/data\" ]; then\n  data_location=2\nfi\ncat <<-EOF\n\n数据保存位置：\n1. Docker卷（数据保存在: ${DOCKER_HOME}/volumes）\n2. 服务部署目录（数据保存在: ${install_path}）\nEOF\nread -rp \"请选择数据保存位置（默认为${data_location}）: \" res\ndata_location=${res:-${data_location}}\n\ntoken=\"\"\nopen_token=\"\"\nfolder_id=\"\"\nquark_cookie=\"\"\npan115_cookie=\"\"\naliyun_to_115=\"false\"\n\n# 如果是更新服务，则从原有的compose配置中获取token等信息\nif [ \"${update}\" != \"0\" ]; then\n  token=$(grep ALIYUN_TOKEN \"$install_path/env\" 2> /dev/null | cut -d '=' -f2-)\n  open_token=$(grep ALIYUN_OPEN_TOKEN \"$install_path/env\" 2> /dev/null | cut -d '=' -f2-)\n  folder_id=$(grep ALIYUN_FOLDER_ID \"$install_path/env\" 2> /dev/null | cut -d '=' -f2-)\n  quark_cookie=$(grep QUARK_COOKIE \"$install_path/env\" 2> /dev/null | cut -d '=' -f2-)\n  pan115_cookie=$(grep PAN115_COOKIE \"$install_path/env\" 2> /dev/null | cut -d '=' -f2-)\n  aliyun_to_115=$(grep ALIYUN_TO_115 \"$install_path/env\" 2> /dev/null | cut -d '=' -f2-)\nfi\n\n# 让用户输入阿里云盘TOKEN，token获取方式教程：https://alist.nn.ci/zh/guide/drivers/aliyundrive.html \necho\necho \"阿里云盘token获取方式教程：https://alist.nn.ci/zh/guide/drivers/aliyundrive.html\"\nread -rp \"请输入阿里云盘TOKEN(默认为$token): \" res\ntoken=${res:=$token}\nif [ ${#token} -ne 32 ]; then\n  echo \"长度不对,阿里云盘 Token是32位\"\n  exit 1\nfi\n\n# 让用户输入阿里云盘OpenTOKEN，token获取方式教程：https://alist.nn.ci/zh/guide/drivers/aliyundrive_open.html\necho\necho \"阿里云盘Open token获取方式教程：https://alist.nn.ci/zh/guide/drivers/aliyundrive_open.html\"\nread -rp \"请输入阿里云盘Open TOKEN(默认为$open_token): \" res\nopen_token=${res:=$open_token}\nif [ ${#open_token} -le 334 ]; then\n  echo \"长度不对,阿里云盘 Open Token是335位\"\n  exit 1\nfi\n\n# 让用户输入阿里云盘转存目录folder_id，folder_id获取方式教程：https://www.aliyundrive.com/s/rP9gP3h9asE\necho\necho \"进入阿里云盘网页版，资源盘里面创建一个文件夹，点击文件夹，复制浏览器阿里云盘地址末尾的文件夹ID（最后一个斜杠/后面的一串字符串）\"\nread -rp \"请输入阿里云盘缓存目录ID(默认为$folder_id): \" res\nfolder_id=${res:=$folder_id}\nif [ ${#folder_id} -ne 40 ]; then\n  echo \"长度不对,阿里云盘 folder id是40位\"\n  exit 1\nfi\n\necho \necho \"登陆夸克网盘，浏览器F12，点击network，随便点一个请求，找到里面的Cookie值\"\nread -rp \"请输入夸克网盘Cookie值(默认为$quark_cookie): \" res\nquark_cookie=${res:=$quark_cookie}\n\necho \necho \"登陆115网盘，浏览器F12，点击network，随便点一个请求，找到里面的Cookie值\"\nread -rp \"请输入115网盘Cookie值(默认为$pan115_cookie): \" res\npan115_cookie=${res:=$pan115_cookie}\n\nif [ -n \"${pan115_cookie}\" ]; then\n  read -rp \"是否开启将阿里云盘转存到115播放？[y/n]: \" res\n  if [ \"${res}\" = \"y\" ]; then\n    aliyun_to_115=\"true\"\n  else\n    aliyun_to_115=\"false\"\n  fi\nfi\n\n# 选择部署服务类型，alist + emby (默认), alist, alist + jellyfin, alist + emby + jellyfin\necho\necho \"部署类型：\"\necho \"1. alist + emby (默认)\"\necho \"2. alist\"\n# echo \"3. alist + jellyfin\"\n# echo \"4. alist + emby + jellyfin\"\nread -rp \"请选择部署服务类型: \" service_type\ncase $service_type in\n  1)\n    service_type=\"\"\n    ;;\n  2)\n    service_type=\"-alist\"\n    ;;\n  3)\n    service_type=\"-jellyfin\"\n    ;;\n  4)\n    service_type=\"-all\"\n    ;;\n  *)\n    service_type=\"\"\n    ;;\nesac\n\n\n# 检查目录是否存在，不存在则创建\nif [ ! -d \"$install_path\" ]; then\n  mkdir -p \"$install_path\"\nfi\n\ncd \"$install_path\"\n\necho \"开始生成配置文件docker-compose${service_type}.yml...\"\ncurl -#Lo \"$install_path/docker-compose.yml\" \"${DOWNLOAD_URL}/docker-compose${service_type}.yml\"\nif [ \"${update}\" != \"2\" ]; then\n  curl -#Lo \"$install_path/env\" \"${DOWNLOAD_URL}/env\"\nfi\nsedsh \"s#ALIYUN_TOKEN=.*#ALIYUN_TOKEN=$token#g\" env\nsedsh \"s#ALIYUN_OPEN_TOKEN=.*#ALIYUN_OPEN_TOKEN=$open_token#g\" env\nsedsh \"s#ALIYUN_FOLDER_ID=.*#ALIYUN_FOLDER_ID=$folder_id#g\" env\nsedsh \"s#QUARK_COOKIE=.*#QUARK_COOKIE=$quark_cookie#g\" env\nsedsh \"s#PAN115_COOKIE=.*#PAN115_COOKIE=$pan115_cookie#g\" env\nsedsh \"s#ALIYUN_TO_115=.*#ALIYUN_TO_115=$aliyun_to_115#g\" env\n\nif [ -n \"$IMAGE_PROXY\" ]; then\n  sedsh -E \"s#image: [^/]+#image: ${IMAGE_PROXY}#g\" docker-compose.yml\nfi\n\n# 修改镜像版本\nsedsh \"s#:latest#:$IMAGE_TAG#g\" docker-compose.yml\n\n# 修改数据保存位置\nif [ \"$data_location\" = \"2\" ]; then\n  sed -n '/^volumes/,$p' ./docker-compose.yml | sed -e 's/://g' | grep -v volumes | while read -r volume; do\n    if [ -z \"${volume}\" ]; then\n      continue\n    fi\n    if [ ! -d \"$install_path/data/$volume\" ]; then\n      mkdir -p \"$install_path/data/$volume\"\n    fi\n    sedsh \"s#- $volume:#- $install_path/data/$volume:#g\" docker-compose.yml\n  done\n  sedsh \"/^volumes/,\\$d\" docker-compose.yml\nfi\n\necho \"开始部署服务...\"\n$DOCKER_COMPOSE -f docker-compose.yml up --remove-orphans --pull=always -d\n\necho \"服务开始部署，如果部署emby/jellyfin，下载并解压60G元数据需要一段时间，请耐心等待...\"\necho \"脚本执行完成不代表服务启动完成，请执行下面的命令查看日志来检查部署情况.\"\n\necho \necho \"> 服务管理（请牢记以下命令）\"\n# 提示用户compose如何查看日志，启动，重启，停止服务\necho \"查看日志：$install_path/manage.sh logs\"\n# 更新服务\necho \"启动服务：$install_path/manage.sh start\"\necho \"停止服务：$install_path/manage.sh stop\"\necho \"重启服务：$install_path/manage.sh restart\"\necho \"加载配置：$install_path/manage.sh reload\"\necho \"更新服务：$install_path/manage.sh update\"\necho \"高级用户自定义配置：$install_path/env\"\necho \"修改env或者compose配置后，需要执行上面的加载配置reload命令生效！\"\n\n# 获取当前服务器ip\nip=$(curl -s ip.3322.net 2> /dev/null)\n# 内网ip\nlocal_ip=\"\"\nif [[ \"$(uname -o)\" = \"Darwin\" ]]; then\n  interface=\"$(route -n get default | grep interface | awk -F ':' '{print$2}' | awk '{$1=$1};1')\"\n  local_ip=\"$(ifconfig \"${interface}\" | grep 'inet ' | awk '{print$2}')\"\nelse\n  interface=\"$(ip route | grep default | awk '{print$5}')\"\n  local_ip=\"$(ip -o -4 addr show \"${interface}\" | awk '{print $4}' | cut -d/ -f1)\"\nfi\n\necho \necho \"> 服务正在部署，请查看日志等待部署成功后，尝试访问下面的地址\"\necho \"alist: http://$local_ip:5678, http://$ip:5678\"\necho \"webdav: http://$local_ip:5678/dav, http://$ip:5678/dav, 默认用户密码: guest/guest_Api789\"\necho \"tvbox: http://$local_ip:5678/tvbox/my_ext.json, http://$ip:5678/tvbox/my_ext.json\"\necho \"emby: http://$local_ip:2345, http://$ip:2345, 默认用户密码: xiaoya/1234\"\necho \"jellyfin: http://$local_ip:2346, http://$ip:2346, 默认用户密码：ailg/5678\"\n\necho\necho \"服务正在后台部署，执行这个命令查看日志：$install_path/manage.sh logs\"\necho \"部署alist需要10分钟，emby/jellyfin需要1-24小时，请耐心等待...\"\n# 添加管理脚本，启动，停止，查看日志\ncat > \"$install_path/manage.sh\" <<-EOF\n#!/bin/bash\n\nset -e\n\ncase \\$1 in\n  start)\n    $DOCKER_COMPOSE -f \"$install_path/docker-compose.yml\" start\n    ;;\n  stop)\n    $DOCKER_COMPOSE -f \"$install_path/docker-compose.yml\" stop\n    ;;\n  restart)\n    $DOCKER_COMPOSE -f \"$install_path/docker-compose.yml\" restart\n    ;;\n  reload)\n    $DOCKER_COMPOSE -f \"$install_path/docker-compose.yml\" up --remove-orphans -d\n    ;;\n  logs)\n    $DOCKER_COMPOSE -f \"$install_path/docker-compose.yml\" logs -f\n    ;;\n  update)\n    $DOCKER_COMPOSE -f \"$install_path/docker-compose.yml\" up --remove-orphans --pull=always -d \n    ;;\n  *)\n    echo \"Usage: \\$0 {start|stop|restart|reload|logs|update}\"\n    exit 1\n    ;;\nesac\nEOF\n\nchmod +x \"$install_path/manage.sh\"\n"
        },
        {
          "name": "jellyfin",
          "type": "tree",
          "content": null
        },
        {
          "name": "metadata",
          "type": "tree",
          "content": null
        },
        {
          "name": "uninstall.sh",
          "type": "blob",
          "size": 0.71484375,
          "content": "#!/bin/bash\n\nset -eu\n\nread -rp \"请输入服务部署目录（默认/opt/xiaoya）: \" install_path\ninstall_path=${install_path:=/opt/xiaoya}\n\nif [ ! -d \"$install_path\" ]; then\n  echo \"目录不存在，退出卸载\"\n  exit 1\nfi\n\nDOCKER_COMPOSE=\"docker compose\"\n\nif ! docker compose &> /dev/null; then\n  DOCKER_COMPOSE=\"docker-compose\"\nfi\n\ndocker_params=\"\"\nread -rp \"是否删除数据卷？(y/n): \" delete_volume\nif [ \"$delete_volume\" = \"y\" ]; then\n  docker_params=\"--volumes\"\nfi\n\necho \"停止服务...\"\n$DOCKER_COMPOSE -f \"$install_path/docker-compose.yml\" down $docker_params\n\nif [ \"$delete_volume\" = \"y\" ]; then\n  rm -rf \"${install_path:?}\"/*\nelse\n  find \"${install_path:?}\" -type f -not -path \"${install_path}/data/*\" -delete\nfi"
        }
      ]
    }
  ]
}