{
  "metadata": {
    "timestamp": 1736568280648,
    "page": 177,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yonggekkk/sing-box-yg",
      "stars": 2790,
      "defaultBranch": "main",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.4228515625,
          "content": "### 一、Sing-box-yg精装桶小白专享一键四协议共存脚本（VPS专用）\n\n脚本特色：多功能前台显示、高自由度交互体验，全平台全客户端无脑通吃\n\n支持人气最高的四大协议：Vless-reality-vision、Vmess-ws(tls)/Argo、Hysteria-2、Tuic-v5\n\n支持纯IPV6、纯IPV4、双栈VPS，支持amd与arm架构，支持alpine系统，推荐使用最新的Ubuntu系统\n\n本项目分享订阅节点为本地化生成，不使用节点转换等第三方外链引用，无需担心节点订阅被外链作者查看\n\n小白简单模式：无需域名证书，回车三次就安装完成，复制、扫描你要的节点配置\n\n------------------------------------------------------------------------------------\n\n### 相关说明及注意点请查看[甬哥博客说明与Sing-box视频教程](https://ygkkk.blogspot.com/2023/10/sing-box-yg.html)\n\n### 视频教程：\n\n[Sing-box精装桶小白一键脚本（一）：配置文件通吃SFA/SFI/SFW三平台客户端，Argo隧道、双证书切换、域名分流](https://youtu.be/QwTapeVPeB0)\n\n[Sing-box精装桶小白一键脚本（二）：纯IPV6 VPS搭建，CDN优选IP设置汇总，全平台多种客户端一个脚本全套带走](https://youtu.be/kmTgj1DundU)\n\n[Sing-box精装桶小白一键脚本（三）：自建gitlab私有订阅链接一键同步推送全平台，WARP分流ChatGPT，SFW电脑客户端支持订阅链接](https://youtu.be/by7C2HU6-fU)\n\n[Sing-box精装桶小白一键脚本（四）：vmess协议CDN优选IP多形态设置(详见说明图)](https://youtu.be/Qfm8DbLeb6w)\n\n[Sing-box精装桶小白一键脚本（五）：集成oblivion warp免费vpn功能，本地WARP+赛风VPN切换分流(30个国家IP)](https://youtu.be/5Y6NPsYPws0)\n\n--------------------------------------------------------------\n### 交流平台：[甬哥博客地址](https://ygkkk.blogspot.com)、[甬哥YouTube频道](https://www.youtube.com/@ygkkk)、[甬哥TG电报群组](https://t.me/+jZHc6-A-1QQ5ZGVl)、[甬哥TG电报频道](https://t.me/+DkC9ZZUgEFQzMTZl)\n--------------------------------------------------------------\n### 截止目前，推荐使用sing-box官方V1.10.0系列正式版本\n-----------------------------------------------------\n### 一键脚本：\n```\nbash <(curl -Ls https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/sb.sh)\n```\n或者\n```\nbash <(wget -qO- https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/sb.sh)\n```\n-----------------------------------\n### Sing-box-yg脚本界面预览图（注：相关参数随意填写，仅供围观）\n\n![1d5425c093618313888fe41a55f493f](https://github.com/user-attachments/assets/2b4b04a6-2de4-499a-afa1-ed78bccc50a8)\n\n-----------------------------------------------------\n\n### 二、Serv00一键三协议共存脚本（Serv00专用）：\n\n修改自Serv00老王sing-box安装脚本，支持一键三协议：vless-reality、vmess-ws(argo)、hysteria2。\n\n主要增加reality协议默认支持 CF vless/trojan 节点的proxyip以及非标端口的优选反代IP功能\n\n详细设置视频教程，请点击[Serv00最全面的代理脚本](https://youtu.be/2VF9D6z2z7w)\n\n1、Serv00本地专用一键脚本，快捷方式：```bash serv00.sh```\n```\nbash <(curl -Ls https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/serv00.sh)\n```\n脚本界面预览图：\n\n![1a215abda2dd54d1042e8d3e61979b1](https://github.com/user-attachments/assets/cc28a80b-7cee-41b8-98c1-1d64cb0b1013)\n\n---------------------------------------------------------\n\n2、Serv00多账号自动部署脚本，创建私有库，修改serv00.yml文件的参数，运行github action，自动部署且保活单个或多个Serv00账号的节点\n\n---------------------------------------------------------\n\n3、Serv00多账号自动部署脚本，修改kp.sh文件的参数，可在多个平台上自动远程自动部署且保活单个或多个Serv00账号的节点\n\nVPS、软路由专用，不可用在serv00本地上，默认nano编辑形式，你也可以手动放在其他目录，做好cron定时运行\n```\ncurl -sSL https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/kp.sh -o kp.sh && chmod +x kp.sh && nano kp.sh\n```\n运行```bash kp.sh```可测试有效性 \n\n-----------------------------------------------------\n\n### 感谢你右上角的star🌟\n[![Stargazers over time](https://starchart.cc/yonggekkk/sing-box-yg.svg)](https://starchart.cc/yonggekkk/sing-box-yg)\n\n---------------------------------------\n#### 声明：所有代码来源于Github社区与ChatGPT的整合\n"
        },
        {
          "name": "SFW电脑客户端网页版(V1.10.1).zip",
          "type": "blob",
          "size": 13589.947265625,
          "content": ""
        },
        {
          "name": "sb.sh",
          "type": "blob",
          "size": 157.2802734375,
          "content": "#!/bin/bash\nexport LANG=en_US.UTF-8\nred='\\033[0;31m'\ngreen='\\033[0;32m'\nyellow='\\033[0;33m'\nblue='\\033[0;36m'\nbblue='\\033[0;34m'\nplain='\\033[0m'\nred(){ echo -e \"\\033[31m\\033[01m$1\\033[0m\";}\ngreen(){ echo -e \"\\033[32m\\033[01m$1\\033[0m\";}\nyellow(){ echo -e \"\\033[33m\\033[01m$1\\033[0m\";}\nblue(){ echo -e \"\\033[36m\\033[01m$1\\033[0m\";}\nwhite(){ echo -e \"\\033[37m\\033[01m$1\\033[0m\";}\nreadp(){ read -p \"$(yellow \"$1\")\" $2;}\n[[ $EUID -ne 0 ]] && yellow \"请以root模式运行脚本\" && exit\n#[[ -e /etc/hosts ]] && grep -qE '^ *172.65.251.78 gitlab.com' /etc/hosts || echo -e '\\n172.65.251.78 gitlab.com' >> /etc/hosts\nif [[ -f /etc/redhat-release ]]; then\nrelease=\"Centos\"\nelif cat /etc/issue | grep -q -E -i \"alpine\"; then\nrelease=\"alpine\"\nelif cat /etc/issue | grep -q -E -i \"debian\"; then\nrelease=\"Debian\"\nelif cat /etc/issue | grep -q -E -i \"ubuntu\"; then\nrelease=\"Ubuntu\"\nelif cat /etc/issue | grep -q -E -i \"centos|red hat|redhat\"; then\nrelease=\"Centos\"\nelif cat /proc/version | grep -q -E -i \"debian\"; then\nrelease=\"Debian\"\nelif cat /proc/version | grep -q -E -i \"ubuntu\"; then\nrelease=\"Ubuntu\"\nelif cat /proc/version | grep -q -E -i \"centos|red hat|redhat\"; then\nrelease=\"Centos\"\nelse \nred \"脚本不支持当前的系统，请选择使用Ubuntu,Debian,Centos系统。\" && exit\nfi\nvsid=$(grep -i version_id /etc/os-release | cut -d \\\" -f2 | cut -d . -f1)\nop=$(cat /etc/redhat-release 2>/dev/null || cat /etc/os-release 2>/dev/null | grep -i pretty_name | cut -d \\\" -f2)\n#if [[ $(echo \"$op\" | grep -i -E \"arch|alpine\") ]]; then\nif [[ $(echo \"$op\" | grep -i -E \"arch\") ]]; then\nred \"脚本不支持当前的 $op 系统，请选择使用Ubuntu,Debian,Centos系统。\" && exit\nfi\nversion=$(uname -r | cut -d \"-\" -f1)\n[[ -z $(systemd-detect-virt 2>/dev/null) ]] && vi=$(virt-what 2>/dev/null) || vi=$(systemd-detect-virt 2>/dev/null)\ncase $(uname -m) in\narmv7l) cpu=armv7;;\naarch64) cpu=arm64;;\nx86_64) cpu=amd64;;\n*) red \"目前脚本不支持$(uname -m)架构\" && exit;;\nesac\n#bit=$(uname -m)\n#if [[ $bit = \"aarch64\" ]]; then\n#cpu=\"arm64\"\n#elif [[ $bit = \"x86_64\" ]]; then\n#amdv=$(cat /proc/cpuinfo | grep flags | head -n 1 | cut -d: -f2)\n#[[ $amdv == *avx2* && $amdv == *f16c* ]] && cpu=\"amd64v3\" || cpu=\"amd64\"\n#else\n#red \"目前脚本不支持 $bit 架构\" && exit\n#fi\nif [[ -n $(sysctl net.ipv4.tcp_congestion_control 2>/dev/null | awk -F ' ' '{print $3}') ]]; then\nbbr=`sysctl net.ipv4.tcp_congestion_control | awk -F ' ' '{print $3}'`\nelif [[ -n $(ping 10.0.0.2 -c 2 | grep ttl) ]]; then\nbbr=\"Openvz版bbr-plus\"\nelse\nbbr=\"Openvz/Lxc\"\nfi\nhostname=$(hostname)\n\nif [ ! -f sbyg_update ]; then\ngreen \"首次安装Sing-box-yg脚本必要的依赖……\"\nif [[ x\"${release}\" == x\"alpine\" ]]; then\napk update\napk add wget curl tar jq tzdata openssl expect git socat iproute2 iptables\napk add virt-what\napk add qrencode\nelse\nif [[ $release = Centos && ${vsid} =~ 8 ]]; then\ncd /etc/yum.repos.d/ && mkdir backup && mv *repo backup/ \ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo\nsed -i -e \"s|mirrors.cloud.aliyuncs.com|mirrors.aliyun.com|g \" /etc/yum.repos.d/CentOS-*\nsed -i -e \"s|releasever|releasever-stream|g\" /etc/yum.repos.d/CentOS-*\nyum clean all && yum makecache\ncd\nfi\nif [ -x \"$(command -v apt-get)\" ]; then\napt update -y\napt install jq iptables-persistent -y\nelif [ -x \"$(command -v yum)\" ]; then\nyum update -y && yum install epel-release -y\nyum install jq -y\nelif [ -x \"$(command -v dnf)\" ]; then\ndnf update -y\ndnf install jq -y\nfi\nif [ -x \"$(command -v yum)\" ] || [ -x \"$(command -v dnf)\" ]; then\nif [ -x \"$(command -v yum)\" ]; then\nyum install -y cronie iptables-services\nelif [ -x \"$(command -v dnf)\" ]; then\ndnf install -y cronie iptables-services\nfi\nsystemctl enable iptables >/dev/null 2>&1\nsystemctl start iptables >/dev/null 2>&1\nfi\nif [[ -z $vi ]]; then\napt install iputils-ping iproute2 systemctl -y\nfi\n\npackages=(\"curl\" \"openssl\" \"iptables\" \"tar\" \"expect\" \"wget\" \"xxd\" \"python3\" \"qrencode\" \"git\")\ninspackages=(\"curl\" \"openssl\" \"iptables\" \"tar\" \"expect\" \"wget\" \"xxd\" \"python3\" \"qrencode\" \"git\")\nfor i in \"${!packages[@]}\"; do\npackage=\"${packages[$i]}\"\ninspackage=\"${inspackages[$i]}\"\nif ! command -v \"$package\" &> /dev/null; then\nif [ -x \"$(command -v apt-get)\" ]; then\napt-get install -y \"$inspackage\"\nelif [ -x \"$(command -v yum)\" ]; then\nyum install -y \"$inspackage\"\nelif [ -x \"$(command -v dnf)\" ]; then\ndnf install -y \"$inspackage\"\nfi\nfi\ndone\nfi\ntouch sbyg_update\nfi\n\nif [[ $vi = openvz ]]; then\nTUN=$(cat /dev/net/tun 2>&1)\nif [[ ! $TUN =~ 'in bad state' ]] && [[ ! $TUN =~ '处于错误状态' ]] && [[ ! $TUN =~ 'Die Dateizugriffsnummer ist in schlechter Verfassung' ]]; then \nred \"检测到未开启TUN，现尝试添加TUN支持\" && sleep 4\ncd /dev && mkdir net && mknod net/tun c 10 200 && chmod 0666 net/tun\nTUN=$(cat /dev/net/tun 2>&1)\nif [[ ! $TUN =~ 'in bad state' ]] && [[ ! $TUN =~ '处于错误状态' ]] && [[ ! $TUN =~ 'Die Dateizugriffsnummer ist in schlechter Verfassung' ]]; then \ngreen \"添加TUN支持失败，建议与VPS厂商沟通或后台设置开启\" && exit\nelse\necho '#!/bin/bash' > /root/tun.sh && echo 'cd /dev && mkdir net && mknod net/tun c 10 200 && chmod 0666 net/tun' >> /root/tun.sh && chmod +x /root/tun.sh\ngrep -qE \"^ *@reboot root bash /root/tun.sh >/dev/null 2>&1\" /etc/crontab || echo \"@reboot root bash /root/tun.sh >/dev/null 2>&1\" >> /etc/crontab\ngreen \"TUN守护功能已启动\"\nfi\nfi\nfi\n\nv4v6(){\nv4=$(curl -s4m5 icanhazip.com -k)\nv6=$(curl -s6m5 icanhazip.com -k)\n}\n\nwarpcheck(){\nwgcfv6=$(curl -s6m5 https://www.cloudflare.com/cdn-cgi/trace -k | grep warp | cut -d= -f2)\nwgcfv4=$(curl -s4m5 https://www.cloudflare.com/cdn-cgi/trace -k | grep warp | cut -d= -f2)\n}\n\nv6(){\nv4orv6(){\nif [ -z $(curl -s4m5 icanhazip.com -k) ]; then\necho\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nyellow \"检测到 纯IPV6 VPS，添加DNS64\"\necho -e \"nameserver 2a00:1098:2b::1\\nnameserver 2a00:1098:2c::1\\nnameserver 2a01:4f8:c2c:123f::1\" > /etc/resolv.conf\nendip=2606:4700:d0::a29f:c101\nipv=prefer_ipv6\nelse\nendip=162.159.192.1\nipv=prefer_ipv4\n#echo '4' > /etc/s-box/i\nfi\n}\nwarpcheck\nif [[ ! $wgcfv4 =~ on|plus && ! $wgcfv6 =~ on|plus ]]; then\nv4orv6\nelse\nsystemctl stop wg-quick@wgcf >/dev/null 2>&1\nkill -15 $(pgrep warp-go) >/dev/null 2>&1 && sleep 2\nv4orv6\nsystemctl start wg-quick@wgcf >/dev/null 2>&1\nsystemctl restart warp-go >/dev/null 2>&1\nsystemctl enable warp-go >/dev/null 2>&1\nsystemctl start warp-go >/dev/null 2>&1\nfi\n}\n\nargopid(){\nym=$(cat /etc/s-box/sbargoympid.log 2>/dev/null)\nls=$(cat /etc/s-box/sbargopid.log 2>/dev/null)\n}\n\nclose(){\nsystemctl stop firewalld.service >/dev/null 2>&1\nsystemctl disable firewalld.service >/dev/null 2>&1\nsetenforce 0 >/dev/null 2>&1\nufw disable >/dev/null 2>&1\niptables -P INPUT ACCEPT >/dev/null 2>&1\niptables -P FORWARD ACCEPT >/dev/null 2>&1\niptables -P OUTPUT ACCEPT >/dev/null 2>&1\niptables -t mangle -F >/dev/null 2>&1\niptables -F >/dev/null 2>&1\niptables -X >/dev/null 2>&1\nnetfilter-persistent save >/dev/null 2>&1\nif [[ -n $(apachectl -v 2>/dev/null) ]]; then\nsystemctl stop httpd.service >/dev/null 2>&1\nsystemctl disable httpd.service >/dev/null 2>&1\nservice apache2 stop >/dev/null 2>&1\nsystemctl disable apache2 >/dev/null 2>&1\nfi\nsleep 1\ngreen \"执行开放端口，关闭防火墙完毕\"\n}\n\nopenyn(){\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nreadp \"是否开放端口，关闭防火墙？\\n1、是，执行 (回车默认)\\n2、否，跳过！自行处理\\n请选择【1-2】：\" action\nif [[ -z $action ]] || [[ \"$action\" = \"1\" ]]; then\nclose\nelif [[ \"$action\" = \"2\" ]]; then\necho\nelse\nred \"输入错误,请重新选择\" && openyn\nfi\n}\n\ninssb(){\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\ngreen \"一、开始下载并安装Sing-box正式版1.10系列内核……请稍等\"\necho\nsbcore=$(curl -Ls https://data.jsdelivr.com/v1/package/gh/SagerNet/sing-box | grep -Eo '\"1\\.10[0-9\\.]*\",'  | sed -n 1p | tr -d '\",')\nsbname=\"sing-box-$sbcore-linux-$cpu\"\ncurl -L -o /etc/s-box/sing-box.tar.gz  -# --retry 2 https://github.com/SagerNet/sing-box/releases/download/v$sbcore/$sbname.tar.gz\nif [[ -f '/etc/s-box/sing-box.tar.gz' ]]; then\ntar xzf /etc/s-box/sing-box.tar.gz -C /etc/s-box\nmv /etc/s-box/$sbname/sing-box /etc/s-box\nrm -rf /etc/s-box/{sing-box.tar.gz,$sbname}\nif [[ -f '/etc/s-box/sing-box' ]]; then\nchown root:root /etc/s-box/sing-box\nchmod +x /etc/s-box/sing-box\nblue \"成功安装 Sing-box 内核版本：$(/etc/s-box/sing-box version | awk '/version/{print $NF}')\"\nelse\nred \"下载 Sing-box 内核不完整，安装失败，请再运行安装一次\" && exit\nfi\nelse\nred \"下载 Sing-box 内核失败，请再运行安装一次，并检测VPS的网络是否可以访问Github\" && exit\nfi\n}\n\ninscertificate(){\nymzs(){\nym_vl_re=www.yahoo.com\necho\nblue \"Vless-reality的SNI域名默认为 www.yahoo.com\"\nblue \"Vmess-ws将开启TLS，Hysteria-2、Tuic-v5将使用 $(cat /root/ygkkkca/ca.log 2>/dev/null) 证书，并开启SNI证书验证\"\ntlsyn=true\nym_vm_ws=$(cat /root/ygkkkca/ca.log 2>/dev/null)\ncertificatec_vmess_ws='/root/ygkkkca/cert.crt'\ncertificatep_vmess_ws='/root/ygkkkca/private.key'\ncertificatec_hy2='/root/ygkkkca/cert.crt'\ncertificatep_hy2='/root/ygkkkca/private.key'\ncertificatec_tuic='/root/ygkkkca/cert.crt'\ncertificatep_tuic='/root/ygkkkca/private.key'\n}\n\nzqzs(){\nym_vl_re=www.yahoo.com\necho\nblue \"Vless-reality的SNI域名默认为 www.yahoo.com\"\nblue \"Vmess-ws将关闭TLS，Hysteria-2、Tuic-v5将使用bing自签证书，并关闭SNI证书验证\"\ntlsyn=false\nym_vm_ws=www.bing.com\ncertificatec_vmess_ws='/etc/s-box/cert.pem'\ncertificatep_vmess_ws='/etc/s-box/private.key'\ncertificatec_hy2='/etc/s-box/cert.pem'\ncertificatep_hy2='/etc/s-box/private.key'\ncertificatec_tuic='/etc/s-box/cert.pem'\ncertificatep_tuic='/etc/s-box/private.key'\n}\n\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\ngreen \"二、生成并设置相关证书\"\necho\nblue \"自动生成bing自签证书中……\" && sleep 2\nopenssl ecparam -genkey -name prime256v1 -out /etc/s-box/private.key\nopenssl req -new -x509 -days 36500 -key /etc/s-box/private.key -out /etc/s-box/cert.pem -subj \"/CN=www.bing.com\"\necho\nif [[ -f /etc/s-box/cert.pem ]]; then\nblue \"生成bing自签证书成功\"\nelse\nred \"生成bing自签证书失败\" && exit\nfi\necho\nif [[ -f /root/ygkkkca/cert.crt && -f /root/ygkkkca/private.key && -s /root/ygkkkca/cert.crt && -s /root/ygkkkca/private.key ]]; then\nyellow \"经检测，之前已使用Acme-yg脚本申请过Acme域名证书：$(cat /root/ygkkkca/ca.log) \"\ngreen \"是否使用 $(cat /root/ygkkkca/ca.log) 域名证书？\"\nyellow \"1：否！使用自签的证书 (回车默认)\"\nyellow \"2：是！使用 $(cat /root/ygkkkca/ca.log) 域名证书\"\nreadp \"请选择【1-2】：\" menu\nif [ -z \"$menu\" ] || [ \"$menu\" = \"1\" ] ; then\nzqzs\nelse\nymzs\nfi\nelse\ngreen \"如果你有解析完成的域名，是否申请一个Acme域名证书？\"\nyellow \"1：否！继续使用自签的证书 (回车默认)\"\nyellow \"2：是！使用Acme-yg脚本申请Acme证书 (支持常规80端口模式与Dns API模式)\"\nreadp \"请选择【1-2】：\" menu\nif [ -z \"$menu\" ] || [ \"$menu\" = \"1\" ] ; then\nzqzs\nelse\nbash <(curl -Ls https://gitlab.com/rwkgyg/acme-script/raw/main/acme.sh)\nif [[ ! -f /root/ygkkkca/cert.crt && ! -f /root/ygkkkca/private.key && ! -s /root/ygkkkca/cert.crt && ! -s /root/ygkkkca/private.key ]]; then\nred \"Acme证书申请失败，继续使用自签证书\" \nzqzs\nelse\nymzs\nfi\nfi\nfi\n}\n\nchooseport(){\nif [[ -z $port ]]; then\nport=$(shuf -i 10000-65535 -n 1)\nuntil [[ -z $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") && -z $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]] \ndo\n[[ -n $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") || -n $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]] && yellow \"\\n端口被占用，请重新输入端口\" && readp \"自定义端口:\" port\ndone\nelse\nuntil [[ -z $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") && -z $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]]\ndo\n[[ -n $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") || -n $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]] && yellow \"\\n端口被占用，请重新输入端口\" && readp \"自定义端口:\" port\ndone\nfi\nblue \"确认的端口：$port\" && sleep 2\n}\n\nvlport(){\nreadp \"\\n设置Vless-reality端口[1-65535] (回车跳过为10000-65535之间的随机端口)：\" port\nchooseport\nport_vl_re=$port\n}\nvmport(){\nreadp \"\\n设置Vmess-ws端口[1-65535] (回车跳过为10000-65535之间的随机端口)：\" port\nchooseport\nport_vm_ws=$port\n}\nhy2port(){\nreadp \"\\n设置Hysteria2主端口[1-65535] (回车跳过为10000-65535之间的随机端口)：\" port\nchooseport\nport_hy2=$port\n}\ntu5port(){\nreadp \"\\n设置Tuic5主端口[1-65535] (回车跳过为10000-65535之间的随机端口)：\" port\nchooseport\nport_tu=$port\n}\n\ninsport(){\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\ngreen \"三、设置各个协议端口\"\nyellow \"1：自动生成每个协议的随机端口 (10000-65535范围内)，回车默认\"\nyellow \"2：自定义每个协议端口\"\nreadp \"请输入【1-2】：\" port\nif [ -z \"$port\" ] || [ \"$port\" = \"1\" ] ; then\nports=()\nfor i in {1..4}; do\nwhile true; do\nport=$(shuf -i 10000-65535 -n 1)\nif ! [[ \" ${ports[@]} \" =~ \" $port \" ]] && \\\n[[ -z $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]] && \\\n[[ -z $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]]; then\nports+=($port)\nbreak\nfi\ndone\ndone\nport_vm_ws=${ports[0]}\nport_vl_re=${ports[1]}\nport_hy2=${ports[2]}\nport_tu=${ports[3]}\nif [[ $tlsyn == \"true\" ]]; then\nnumbers=(\"2053\" \"2083\" \"2087\" \"2096\" \"8443\")\nelse\nnumbers=(\"8080\" \"8880\" \"2052\" \"2082\" \"2086\" \"2095\")\nfi\nport_vm_ws=${numbers[$RANDOM % ${#numbers[@]}]}\nuntil [[ -z $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port_vm_ws\") ]]\ndo\nif [[ $tlsyn == \"true\" ]]; then\nnumbers=(\"2053\" \"2083\" \"2087\" \"2096\" \"8443\")\nelse\nnumbers=(\"8080\" \"8880\" \"2052\" \"2082\" \"2086\" \"2095\")\nfi\nport_vm_ws=${numbers[$RANDOM % ${#numbers[@]}]}\ndone\necho\nblue \"根据Vmess-ws协议是否启用TLS，随机指定支持CDN优选IP的标准端口：$port_vm_ws\"\nelse\nvlport && vmport && hy2port && tu5port\nfi\necho\nblue \"各协议端口确认如下\"\nblue \"Vless-reality端口：$port_vl_re\"\nblue \"Vmess-ws端口：$port_vm_ws\"\nblue \"Hysteria-2端口：$port_hy2\"\nblue \"Tuic-v5端口：$port_tu\"\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\ngreen \"四、自动生成各个协议统一的uuid (密码)\"\nuuid=$(/etc/s-box/sing-box generate uuid)\nblue \"已确认uuid (密码)：${uuid}\"\nblue \"已确认Vmess的path路径：${uuid}-vm\"\n}\n\ninssbjsonser(){\ncat > /etc/s-box/sb.json <<EOF\n{\n\"log\": {\n    \"disabled\": false,\n    \"level\": \"info\",\n    \"timestamp\": true\n  },\n  \"inbounds\": [\n    {\n      \"type\": \"vless\",\n      \"sniff\": true,\n      \"sniff_override_destination\": true,\n      \"tag\": \"vless-sb\",\n      \"listen\": \"::\",\n      \"listen_port\": ${port_vl_re},\n      \"users\": [\n        {\n          \"uuid\": \"${uuid}\",\n          \"flow\": \"xtls-rprx-vision\"\n        }\n      ],\n      \"tls\": {\n        \"enabled\": true,\n        \"server_name\": \"${ym_vl_re}\",\n          \"reality\": {\n          \"enabled\": true,\n          \"handshake\": {\n            \"server\": \"${ym_vl_re}\",\n            \"server_port\": 443\n          },\n          \"private_key\": \"$private_key\",\n          \"short_id\": [\"$short_id\"]\n        }\n      }\n    },\n{\n        \"type\": \"vmess\",\n        \"sniff\": true,\n        \"sniff_override_destination\": true,\n        \"tag\": \"vmess-sb\",\n        \"listen\": \"::\",\n        \"listen_port\": ${port_vm_ws},\n        \"users\": [\n            {\n                \"uuid\": \"${uuid}\",\n                \"alterId\": 0\n            }\n        ],\n        \"transport\": {\n            \"type\": \"ws\",\n            \"path\": \"${uuid}-vm\",\n            \"max_early_data\":2048,\n            \"early_data_header_name\": \"Sec-WebSocket-Protocol\"    \n        },\n        \"tls\":{\n                \"enabled\": ${tlsyn},\n                \"server_name\": \"${ym_vm_ws}\",\n                \"certificate_path\": \"$certificatec_vmess_ws\",\n                \"key_path\": \"$certificatep_vmess_ws\"\n            }\n    }, \n    {\n        \"type\": \"hysteria2\",\n        \"sniff\": true,\n        \"sniff_override_destination\": true,\n        \"tag\": \"hy2-sb\",\n        \"listen\": \"::\",\n        \"listen_port\": ${port_hy2},\n        \"users\": [\n            {\n                \"password\": \"${uuid}\"\n            }\n        ],\n        \"ignore_client_bandwidth\":false,\n        \"tls\": {\n            \"enabled\": true,\n            \"alpn\": [\n                \"h3\"\n            ],\n            \"certificate_path\": \"$certificatec_hy2\",\n            \"key_path\": \"$certificatep_hy2\"\n        }\n    },\n        {\n            \"type\":\"tuic\",\n            \"sniff\": true,\n            \"sniff_override_destination\": true,\n            \"tag\": \"tuic5-sb\",\n            \"listen\": \"::\",\n            \"listen_port\": ${port_tu},\n            \"users\": [\n                {\n                    \"uuid\": \"${uuid}\",\n                    \"password\": \"${uuid}\"\n                }\n            ],\n            \"congestion_control\": \"bbr\",\n            \"tls\":{\n                \"enabled\": true,\n                \"alpn\": [\n                    \"h3\"\n                ],\n                \"certificate_path\": \"$certificatec_tuic\",\n                \"key_path\": \"$certificatep_tuic\"\n            }\n        }\n],\n\"outbounds\": [\n{\n\"type\":\"direct\",\n\"tag\":\"direct\",\n\"domain_strategy\": \"$ipv\"\n},\n{\n\"type\":\"direct\",\n\"tag\": \"vps-outbound-v4\", \n\"domain_strategy\":\"ipv4_only\"\n},\n{\n\"type\":\"direct\",\n\"tag\": \"vps-outbound-v6\",\n\"domain_strategy\":\"ipv6_only\"\n},\n{\n\"type\": \"socks\",\n\"tag\": \"socks-out\",\n\"server\": \"127.0.0.1\",\n\"server_port\": 40000,\n\"version\": \"5\"\n},\n{\n\"type\":\"direct\",\n\"tag\":\"socks-IPv4-out\",\n\"detour\":\"socks-out\",\n\"domain_strategy\":\"ipv4_only\"\n},\n{\n\"type\":\"direct\",\n\"tag\":\"socks-IPv6-out\",\n\"detour\":\"socks-out\",\n\"domain_strategy\":\"ipv6_only\"\n},\n{\n\"type\":\"direct\",\n\"tag\":\"warp-IPv4-out\",\n\"detour\":\"wireguard-out\",\n\"domain_strategy\":\"ipv4_only\"\n},\n{\n\"type\":\"direct\",\n\"tag\":\"warp-IPv6-out\",\n\"detour\":\"wireguard-out\",\n\"domain_strategy\":\"ipv6_only\"\n},\n{\n\"type\":\"wireguard\",\n\"tag\":\"wireguard-out\",\n\"server\":\"$endip\",\n\"server_port\":2408,\n\"local_address\":[\n\"172.16.0.2/32\",\n\"${v6}/128\"\n],\n\"private_key\":\"$pvk\",\n\"peer_public_key\":\"bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=\",\n\"reserved\":$res\n},\n{\n\"type\": \"block\",\n\"tag\": \"block\"\n}\n],\n\"route\":{\n\"rules\":[\n{\n\"protocol\": [\n\"quic\",\n\"stun\"\n],\n\"outbound\": \"block\"\n},\n{\n\"outbound\":\"warp-IPv4-out\",\n\"domain\": [\n\"yg_kkk\"\n]\n,\"geosite\": [\n\"yg_kkk\"\n]\n},\n{\n\"outbound\":\"warp-IPv6-out\",\n\"domain\": [\n\"yg_kkk\"\n]\n,\"geosite\": [\n\"yg_kkk\"\n]\n},\n{\n\"outbound\":\"socks-IPv4-out\",\n\"domain\": [\n\"yg_kkk\"\n]\n,\"geosite\": [\n\"yg_kkk\"\n]\n},\n{\n\"outbound\":\"socks-IPv6-out\",\n\"domain\": [\n\"yg_kkk\"\n]\n,\"geosite\": [\n\"yg_kkk\"\n]\n},\n{\n\"outbound\":\"vps-outbound-v4\",\n\"domain\": [\n\"yg_kkk\"\n]\n,\"geosite\": [\n\"yg_kkk\"\n]\n},\n{\n\"outbound\":\"vps-outbound-v6\",\n\"domain\": [\n\"yg_kkk\"\n]\n,\"geosite\": [\n\"yg_kkk\"\n]\n},\n{\n\"outbound\": \"direct\",\n\"network\": \"udp,tcp\"\n}\n]\n}\n}\nEOF\n}\n\nsbservice(){\nif [[ x\"${release}\" == x\"alpine\" ]]; then\necho '#!/sbin/openrc-run\ndescription=\"sing-box service\"\ncommand=\"/etc/s-box/sing-box\"\ncommand_args=\"run -c /etc/s-box/sb.json\"\ncommand_background=true\npidfile=\"/var/run/sing-box.pid\"' > /etc/init.d/sing-box\nchmod +x /etc/init.d/sing-box\nrc-update add sing-box default\nrc-service sing-box start\nelse\ncat > /etc/systemd/system/sing-box.service <<EOF\n[Unit]\nAfter=network.target nss-lookup.target\n[Service]\nUser=root\nWorkingDirectory=/root\nCapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_NET_RAW\nAmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_NET_RAW\nExecStart=/etc/s-box/sing-box run -c /etc/s-box/sb.json\nExecReload=/bin/kill -HUP \\$MAINPID\nRestart=on-failure\nRestartSec=10\nLimitNOFILE=infinity\n[Install]\nWantedBy=multi-user.target\nEOF\nsystemctl daemon-reload\nsystemctl enable sing-box >/dev/null 2>&1\nsystemctl start sing-box\nsystemctl restart sing-box\nfi\n}\n\nipuuid(){\nuuid=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[0].users[0].uuid')\nserip=$(curl -s4m5 icanhazip.com -k || curl -s6m5 icanhazip.com -k)\nif [[ \"$serip\" =~ : ]]; then\nsbdnsip='tls://[2001:4860:4860::8888]/dns-query'\nserver_ip=\"[$serip]\"\nserver_ipcl=\"$serip\"\nelse\nsbdnsip='tls://8.8.8.8/dns-query'\nserver_ip=\"$serip\"\nserver_ipcl=\"$serip\"\nfi\n}\n\nwgcfgo(){\nwarpcheck\nif [[ ! $wgcfv4 =~ on|plus && ! $wgcfv6 =~ on|plus ]]; then\nipuuid\nelse\nsystemctl stop wg-quick@wgcf >/dev/null 2>&1\nkill -15 $(pgrep warp-go) >/dev/null 2>&1 && sleep 2\nipuuid\nsystemctl start wg-quick@wgcf >/dev/null 2>&1\nsystemctl restart warp-go >/dev/null 2>&1\nsystemctl enable warp-go >/dev/null 2>&1\nsystemctl start warp-go >/dev/null 2>&1\nfi\n}\n\nresult_vl_vm_hy_tu(){\nif [[ -f /root/ygkkkca/cert.crt && -f /root/ygkkkca/private.key && -s /root/ygkkkca/cert.crt && -s /root/ygkkkca/private.key ]]; then\nym=`bash ~/.acme.sh/acme.sh --list | tail -1 | awk '{print $1}'`\necho $ym > /root/ygkkkca/ca.log\nfi\nrm -rf /etc/s-box/vm_ws_argo.txt /etc/s-box/vm_ws.txt /etc/s-box/vm_ws_tls.txt\nwgcfgo\nvl_port=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[0].listen_port')\nvl_name=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[0].tls.server_name')\npublic_key=$(cat /etc/s-box/public.key)\nshort_id=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[0].tls.reality.short_id[0]')\nargo=$(cat /etc/s-box/argo.log 2>/dev/null | grep -a trycloudflare.com | awk 'NR==2{print}' | awk -F// '{print $2}' | awk '{print $1}')\nws_path=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].transport.path')\nvm_port=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].listen_port')\ntls=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].tls.enabled')\nvm_name=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].tls.server_name')\nif [[ \"$tls\" = \"false\" ]]; then\nif [[ -f /etc/s-box/cfymjx.txt ]]; then\nvm_name=$(cat /etc/s-box/cfymjx.txt 2>/dev/null)\nelse\nvm_name=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].tls.server_name')\nfi\nvmadd_local=$server_ipcl\nvmadd_are_local=$server_ip\nelse\nvmadd_local=$vm_name\nvmadd_are_local=$vm_name\nfi\nif [[ -f /etc/s-box/cfvmadd_local.txt ]]; then\nvmadd_local=$(cat /etc/s-box/cfvmadd_local.txt 2>/dev/null)\nvmadd_are_local=$(cat /etc/s-box/cfvmadd_local.txt 2>/dev/null)\nelse\nif [[ \"$tls\" = \"false\" ]]; then\nif [[ -f /etc/s-box/cfymjx.txt ]]; then\nvm_name=$(cat /etc/s-box/cfymjx.txt 2>/dev/null)\nelse\nvm_name=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].tls.server_name')\nfi\nvmadd_local=$server_ipcl\nvmadd_are_local=$server_ip\nelse\nvmadd_local=$vm_name\nvmadd_are_local=$vm_name\nfi\nfi\nif [[ -f /etc/s-box/cfvmadd_argo.txt ]]; then\nvmadd_argo=$(cat /etc/s-box/cfvmadd_argo.txt 2>/dev/null)\nelse\nvmadd_argo=www.visa.com.sg\nfi\nhy2_port=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[2].listen_port')\nhy2_ports=$(iptables -t nat -nL --line 2>/dev/null | grep -w \"$hy2_port\" | awk '{print $8}' | sed 's/dpts://; s/dpt://' | tr '\\n' ',' | sed 's/,$//')\nif [[ -n $hy2_ports ]]; then\nhy2ports=$(echo $hy2_ports | sed 's/:/-/g')\nhyps=$hy2_port,$hy2ports\nelse\nhyps=$hy2_port\nfi\nym=$(cat /root/ygkkkca/ca.log 2>/dev/null)\nhy2_sniname=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[2].tls.key_path')\nif [[ \"$hy2_sniname\" = '/etc/s-box/private.key' ]]; then\nhy2_name=www.bing.com\nsb_hy2_ip=$server_ip\ncl_hy2_ip=$server_ipcl\nins_hy2=1\nhy2_ins=true\nelse\nhy2_name=$ym\nsb_hy2_ip=$ym\ncl_hy2_ip=$ym\nins_hy2=0\nhy2_ins=false\nfi\ntu5_port=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[3].listen_port')\nym=$(cat /root/ygkkkca/ca.log 2>/dev/null)\ntu5_sniname=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[3].tls.key_path')\nif [[ \"$tu5_sniname\" = '/etc/s-box/private.key' ]]; then\ntu5_name=www.bing.com\nsb_tu5_ip=$server_ip\ncl_tu5_ip=$server_ipcl\nins=1\ntu5_ins=true\nelse\ntu5_name=$ym\nsb_tu5_ip=$ym\ncl_tu5_ip=$ym\nins=0\ntu5_ins=false\nfi\n}\n\nresvless(){\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nvl_link=\"vless://$uuid@$server_ip:$vl_port?encryption=none&flow=xtls-rprx-vision&security=reality&sni=$vl_name&fp=chrome&pbk=$public_key&sid=$short_id&type=tcp&headerType=none#vl-reality-$hostname\"\necho \"$vl_link\" > /etc/s-box/vl_reality.txt\nred \"🚀【 vless-reality-vision 】节点信息如下：\" && sleep 2\necho\necho \"分享链接【v2rayn、v2rayng、nekobox、小火箭shadowrocket】\"\necho -e \"${yellow}$vl_link${plain}\"\necho\necho \"二维码【v2rayn、v2rayng、nekobox、小火箭shadowrocket】\"\nqrencode -o - -t ANSIUTF8 \"$(cat /etc/s-box/vl_reality.txt)\"\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\n}\n\nresvmess(){\nif [[ \"$tls\" = \"false\" ]]; then\nargopid\nif [[ -n $(ps -e | grep -w $ls 2>/dev/null) ]]; then\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nred \"🚀【 vmess-ws(tls)+Argo 】临时节点信息如下(可选择3-8-3，自定义CDN优选地址)：\" && sleep 2\necho\necho \"分享链接【v2rayn、v2rayng、nekobox、小火箭shadowrocket】\"\necho -e \"${yellow}vmess://$(echo '{\"add\":\"'$vmadd_argo'\",\"aid\":\"0\",\"host\":\"'$argo'\",\"id\":\"'$uuid'\",\"net\":\"ws\",\"path\":\"'$ws_path'\",\"port\":\"8443\",\"ps\":\"'vm-argo-$hostname'\",\"tls\":\"tls\",\"sni\":\"'$argo'\",\"type\":\"none\",\"v\":\"2\"}' | base64 -w 0)${plain}\"\necho\necho \"二维码【v2rayn、v2rayng、nekobox、小火箭shadowrocket】\"\necho 'vmess://'$(echo '{\"add\":\"'$vmadd_argo'\",\"aid\":\"0\",\"host\":\"'$argo'\",\"id\":\"'$uuid'\",\"net\":\"ws\",\"path\":\"'$ws_path'\",\"port\":\"8443\",\"ps\":\"'vm-argo-$hostname'\",\"tls\":\"tls\",\"sni\":\"'$argo'\",\"type\":\"none\",\"v\":\"2\"}' | base64 -w 0) > /etc/s-box/vm_ws_argols.txt\nqrencode -o - -t ANSIUTF8 \"$(cat /etc/s-box/vm_ws_argols.txt)\"\nfi\nif [[ -n $(ps -e | grep -w $ym 2>/dev/null) ]]; then\nargogd=$(cat /etc/s-box/sbargoym.log 2>/dev/null)\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nred \"🚀【 vmess-ws(tls)+Argo 】固定节点信息如下 (可选择3-8-3，自定义CDN优选地址)：\" && sleep 2\necho\necho \"分享链接【v2rayn、v2rayng、nekobox、小火箭shadowrocket】\"\necho -e \"${yellow}vmess://$(echo '{\"add\":\"'$vmadd_argo'\",\"aid\":\"0\",\"host\":\"'$argogd'\",\"id\":\"'$uuid'\",\"net\":\"ws\",\"path\":\"'$ws_path'\",\"port\":\"8443\",\"ps\":\"'vm-argo-$hostname'\",\"tls\":\"tls\",\"sni\":\"'$argogd'\",\"type\":\"none\",\"v\":\"2\"}' | base64 -w 0)${plain}\"\necho\necho \"二维码【v2rayn、v2rayng、nekobox、小火箭shadowrocket】\"\necho 'vmess://'$(echo '{\"add\":\"'$vmadd_argo'\",\"aid\":\"0\",\"host\":\"'$argogd'\",\"id\":\"'$uuid'\",\"net\":\"ws\",\"path\":\"'$ws_path'\",\"port\":\"8443\",\"ps\":\"'vm-argo-$hostname'\",\"tls\":\"tls\",\"sni\":\"'$argogd'\",\"type\":\"none\",\"v\":\"2\"}' | base64 -w 0) > /etc/s-box/vm_ws_argogd.txt\nqrencode -o - -t ANSIUTF8 \"$(cat /etc/s-box/vm_ws_argogd.txt)\"\nfi\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nred \"🚀【 vmess-ws 】节点信息如下 (建议选择3-8-1，设置为CDN优选节点)：\" && sleep 2\necho\necho \"分享链接【v2rayn、v2rayng、nekobox、小火箭shadowrocket】\"\necho -e \"${yellow}vmess://$(echo '{\"add\":\"'$vmadd_are_local'\",\"aid\":\"0\",\"host\":\"'$vm_name'\",\"id\":\"'$uuid'\",\"net\":\"ws\",\"path\":\"'$ws_path'\",\"port\":\"'$vm_port'\",\"ps\":\"'vm-ws-$hostname'\",\"tls\":\"\",\"type\":\"none\",\"v\":\"2\"}' | base64 -w 0)${plain}\"\necho\necho \"二维码【v2rayn、v2rayng、nekobox、小火箭shadowrocket】\"\necho 'vmess://'$(echo '{\"add\":\"'$vmadd_are_local'\",\"aid\":\"0\",\"host\":\"'$vm_name'\",\"id\":\"'$uuid'\",\"net\":\"ws\",\"path\":\"'$ws_path'\",\"port\":\"'$vm_port'\",\"ps\":\"'vm-ws-$hostname'\",\"tls\":\"\",\"type\":\"none\",\"v\":\"2\"}' | base64 -w 0) > /etc/s-box/vm_ws.txt\nqrencode -o - -t ANSIUTF8 \"$(cat /etc/s-box/vm_ws.txt)\"\nelse\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nred \"🚀【 vmess-ws-tls 】节点信息如下 (建议选择3-8-1，设置为CDN优选节点)：\" && sleep 2\necho\necho \"分享链接【v2rayn、v2rayng、nekobox、小火箭shadowrocket】\"\necho -e \"${yellow}vmess://$(echo '{\"add\":\"'$vmadd_are_local'\",\"aid\":\"0\",\"host\":\"'$vm_name'\",\"id\":\"'$uuid'\",\"net\":\"ws\",\"path\":\"'$ws_path'\",\"port\":\"'$vm_port'\",\"ps\":\"'vm-ws-tls-$hostname'\",\"tls\":\"tls\",\"sni\":\"'$vm_name'\",\"type\":\"none\",\"v\":\"2\"}' | base64 -w 0)${plain}\"\necho\necho \"二维码【v2rayn、v2rayng、nekobox、小火箭shadowrocket】\"\necho 'vmess://'$(echo '{\"add\":\"'$vmadd_are_local'\",\"aid\":\"0\",\"host\":\"'$vm_name'\",\"id\":\"'$uuid'\",\"net\":\"ws\",\"path\":\"'$ws_path'\",\"port\":\"'$vm_port'\",\"ps\":\"'vm-ws-tls-$hostname'\",\"tls\":\"tls\",\"sni\":\"'$vm_name'\",\"type\":\"none\",\"v\":\"2\"}' | base64 -w 0) > /etc/s-box/vm_ws_tls.txt\nqrencode -o - -t ANSIUTF8 \"$(cat /etc/s-box/vm_ws_tls.txt)\"\nfi\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\n}\n\nreshy2(){\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nhy2_link=\"hysteria2://$uuid@$sb_hy2_ip:$hy2_port?&alpn=h3&insecure=$ins_hy2&mport=$hyps&sni=$hy2_name#hy2-$hostname\"\necho \"$hy2_link\" > /etc/s-box/hy2.txt\nred \"🚀【 Hysteria-2 】节点信息如下：\" && sleep 2\necho\necho \"分享链接【v2rayn、nekobox、小火箭shadowrocket】\"\necho -e \"${yellow}$hy2_link${plain}\"\necho\necho \"二维码【v2rayn、nekobox、小火箭shadowrocket】\"\nqrencode -o - -t ANSIUTF8 \"$(cat /etc/s-box/hy2.txt)\"\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\n}\n\nrestu5(){\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\ntuic5_link=\"tuic://$uuid:$uuid@$sb_tu5_ip:$tu5_port?congestion_control=bbr&udp_relay_mode=native&alpn=h3&sni=$tu5_name&allow_insecure=$ins#tu5-$hostname\"\necho \"$tuic5_link\" > /etc/s-box/tuic5.txt\nred \"🚀【 Tuic-v5 】节点信息如下：\" && sleep 2\necho\necho \"分享链接【v2rayn、nekobox、小火箭shadowrocket】\"\necho -e \"${yellow}$tuic5_link${plain}\"\necho\necho \"二维码【v2rayn、nekobox、小火箭shadowrocket】\"\nqrencode -o - -t ANSIUTF8 \"$(cat /etc/s-box/tuic5.txt)\"\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\n}\n\nsb_client(){\ntls=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].tls.enabled')\nargopid\nif [[ -n $(ps -e | grep -w $ym 2>/dev/null) && -n $(ps -e | grep -w $ls 2>/dev/null) && \"$tls\" = \"false\" ]]; then\ncat > /etc/s-box/sing_box_client.json <<EOF\n{\n  \"log\": {\n    \"disabled\": false,\n    \"level\": \"info\",\n    \"timestamp\": true\n  },\n  \"experimental\": {\n    \"clash_api\": {\n      \"external_controller\": \"127.0.0.1:9090\",\n      \"external_ui\": \"ui\",\n      \"external_ui_download_url\": \"\",\n      \"external_ui_download_detour\": \"\",\n      \"secret\": \"\",\n      \"default_mode\": \"Rule\"\n       },\n      \"cache_file\": {\n            \"enabled\": true,\n            \"path\": \"cache.db\",\n            \"store_fakeip\": true\n        }\n    },\n    \"dns\": {\n        \"servers\": [\n            {\n                \"tag\": \"proxydns\",\n                \"address\": \"$sbdnsip\",\n                \"detour\": \"select\"\n            },\n            {\n                \"tag\": \"localdns\",\n                \"address\": \"h3://223.5.5.5/dns-query\",\n                \"detour\": \"direct\"\n            },\n            {\n                \"tag\": \"dns_fakeip\",\n                \"address\": \"fakeip\"\n            }\n        ],\n        \"rules\": [\n            {\n                \"outbound\": \"any\",\n                \"server\": \"localdns\",\n                \"disable_cache\": true\n            },\n            {\n                \"clash_mode\": \"Global\",\n                \"server\": \"proxydns\"\n            },\n            {\n                \"clash_mode\": \"Direct\",\n                \"server\": \"localdns\"\n            },\n            {\n                \"rule_set\": \"geosite-cn\",\n                \"server\": \"localdns\"\n            },\n            {\n                 \"rule_set\": \"geosite-geolocation-!cn\",\n                 \"server\": \"proxydns\"\n            },\n             {\n                \"rule_set\": \"geosite-geolocation-!cn\",         \n                \"query_type\": [\n                    \"A\",\n                    \"AAAA\"\n                ],\n                \"server\": \"dns_fakeip\"\n            }\n          ],\n           \"fakeip\": {\n           \"enabled\": true,\n           \"inet4_range\": \"198.18.0.0/15\",\n           \"inet6_range\": \"fc00::/18\"\n         },\n          \"independent_cache\": true,\n          \"final\": \"proxydns\"\n        },\n      \"inbounds\": [\n    {\n      \"type\": \"tun\",\n           \"tag\": \"tun-in\",\n\t  \"address\": [\n      \"172.19.0.1/30\",\n\t  \"fd00::1/126\"\n      ],\n      \"auto_route\": true,\n      \"strict_route\": true,\n      \"sniff\": true,\n      \"sniff_override_destination\": true,\n      \"domain_strategy\": \"prefer_ipv4\"\n    }\n  ],\n  \"outbounds\": [\n    {\n      \"tag\": \"select\",\n      \"type\": \"selector\",\n      \"default\": \"auto\",\n      \"outbounds\": [\n        \"auto\",\n        \"vless-$hostname\",\n        \"vmess-$hostname\",\n        \"hy2-$hostname\",\n        \"tuic5-$hostname\",\n\"vmess-tls-argo固定-$hostname\",\n\"vmess-argo固定-$hostname\",\n\"vmess-tls-argo临时-$hostname\",\n\"vmess-argo临时-$hostname\"\n      ]\n    },\n    {\n      \"type\": \"vless\",\n      \"tag\": \"vless-$hostname\",\n      \"server\": \"$server_ipcl\",\n      \"server_port\": $vl_port,\n      \"uuid\": \"$uuid\",\n      \"packet_encoding\": \"xudp\",\n      \"flow\": \"xtls-rprx-vision\",\n      \"tls\": {\n        \"enabled\": true,\n        \"server_name\": \"$vl_name\",\n        \"utls\": {\n          \"enabled\": true,\n          \"fingerprint\": \"chrome\"\n        },\n      \"reality\": {\n          \"enabled\": true,\n          \"public_key\": \"$public_key\",\n          \"short_id\": \"$short_id\"\n        }\n      }\n    },\n{\n            \"server\": \"$vmadd_local\",\n            \"server_port\": $vm_port,\n            \"tag\": \"vmess-$hostname\",\n            \"tls\": {\n                \"enabled\": $tls,\n                \"server_name\": \"$vm_name\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$vm_name\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\n\n    {\n        \"type\": \"hysteria2\",\n        \"tag\": \"hy2-$hostname\",\n        \"server\": \"$cl_hy2_ip\",\n        \"server_port\": $hy2_port,\n        \"password\": \"$uuid\",\n        \"tls\": {\n            \"enabled\": true,\n            \"server_name\": \"$hy2_name\",\n            \"insecure\": $hy2_ins,\n            \"alpn\": [\n                \"h3\"\n            ]\n        }\n    },\n        {\n            \"type\":\"tuic\",\n            \"tag\": \"tuic5-$hostname\",\n            \"server\": \"$cl_tu5_ip\",\n            \"server_port\": $tu5_port,\n            \"uuid\": \"$uuid\",\n            \"password\": \"$uuid\",\n            \"congestion_control\": \"bbr\",\n            \"udp_relay_mode\": \"native\",\n            \"udp_over_stream\": false,\n            \"zero_rtt_handshake\": false,\n            \"heartbeat\": \"10s\",\n            \"tls\":{\n                \"enabled\": true,\n                \"server_name\": \"$tu5_name\",\n                \"insecure\": $tu5_ins,\n                \"alpn\": [\n                    \"h3\"\n                ]\n            }\n        },\n{\n            \"server\": \"$vmadd_argo\",\n            \"server_port\": 8443,\n            \"tag\": \"vmess-tls-argo固定-$hostname\",\n            \"tls\": {\n                \"enabled\": true,\n                \"server_name\": \"$argogd\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argogd\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\n{\n            \"server\": \"$vmadd_argo\",\n            \"server_port\": 8880,\n            \"tag\": \"vmess-argo固定-$hostname\",\n            \"tls\": {\n                \"enabled\": false,\n                \"server_name\": \"$argogd\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argogd\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\n{\n            \"server\": \"$vmadd_argo\",\n            \"server_port\": 8443,\n            \"tag\": \"vmess-tls-argo临时-$hostname\",\n            \"tls\": {\n                \"enabled\": true,\n                \"server_name\": \"$argo\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argo\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\n{\n            \"server\": \"$vmadd_argo\",\n            \"server_port\": 8880,\n            \"tag\": \"vmess-argo临时-$hostname\",\n            \"tls\": {\n                \"enabled\": false,\n                \"server_name\": \"$argo\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argo\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\n    {\n      \"tag\": \"direct\",\n      \"type\": \"direct\"\n    },\n    {\n      \"tag\": \"auto\",\n      \"type\": \"urltest\",\n      \"outbounds\": [\n        \"vless-$hostname\",\n        \"vmess-$hostname\",\n        \"hy2-$hostname\",\n        \"tuic5-$hostname\",\n\"vmess-tls-argo固定-$hostname\",\n\"vmess-argo固定-$hostname\",\n\"vmess-tls-argo临时-$hostname\",\n\"vmess-argo临时-$hostname\"\n      ],\n      \"url\": \"https://www.gstatic.com/generate_204\",\n      \"interval\": \"1m\",\n      \"tolerance\": 50,\n      \"interrupt_exist_connections\": false\n    }\n  ],\n  \"route\": {\n      \"rule_set\": [\n            {\n                \"tag\": \"geosite-geolocation-!cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/geolocation-!cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            },\n            {\n                \"tag\": \"geosite-cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/geolocation-cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            },\n            {\n                \"tag\": \"geoip-cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geoip/cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            }\n        ],\n    \"auto_detect_interface\": true,\n    \"final\": \"select\",\n    \"rules\": [\n      {\n      \"inbound\": \"tun-in\",\n      \"action\": \"sniff\"\n      },\n      {\n      \"protocol\": \"dns\",\n      \"action\": \"hijack-dns\"\n      },\n      {\n      \"port\": 443,\n      \"network\": \"udp\",\n      \"action\": \"reject\"\n      },\n      {\n        \"clash_mode\": \"Direct\",\n        \"outbound\": \"direct\"\n      },\n      {\n        \"clash_mode\": \"Global\",\n        \"outbound\": \"select\"\n      },\n      {\n        \"rule_set\": \"geoip-cn\",\n        \"outbound\": \"direct\"\n      },\n      {\n        \"rule_set\": \"geosite-cn\",\n        \"outbound\": \"direct\"\n      },\n      {\n      \"ip_is_private\": true,\n      \"outbound\": \"direct\"\n      },\n      {\n        \"rule_set\": \"geosite-geolocation-!cn\",\n        \"outbound\": \"select\"\n      }\n    ]\n  },\n    \"ntp\": {\n    \"enabled\": true,\n    \"server\": \"time.apple.com\",\n    \"server_port\": 123,\n    \"interval\": \"30m\",\n    \"detour\": \"direct\"\n  }\n}\nEOF\n\ncat > /etc/s-box/clash_meta_client.yaml <<EOF\nport: 7890\nallow-lan: true\nmode: rule\nlog-level: info\nunified-delay: true\nglobal-client-fingerprint: chrome\ndns:\n  enable: true\n  listen: :53\n  ipv6: true\n  enhanced-mode: fake-ip\n  fake-ip-range: 198.18.0.1/16\n  default-nameserver: \n    - 223.5.5.5\n    - 8.8.8.8\n  nameserver:\n    - https://dns.alidns.com/dns-query\n    - https://doh.pub/dns-query\n  fallback:\n    - https://1.0.0.1/dns-query\n    - tls://dns.google\n  fallback-filter:\n    geoip: true\n    geoip-code: CN\n    ipcidr:\n      - 240.0.0.0/4\n\nproxies:\n- name: vless-reality-vision-$hostname               \n  type: vless\n  server: $server_ipcl                           \n  port: $vl_port                                \n  uuid: $uuid   \n  network: tcp\n  udp: true\n  tls: true\n  flow: xtls-rprx-vision\n  servername: $vl_name                 \n  reality-opts: \n    public-key: $public_key    \n    short-id: $short_id                      \n  client-fingerprint: chrome                  \n\n- name: vmess-ws-$hostname                         \n  type: vmess\n  server: $vmadd_local                        \n  port: $vm_port                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: $tls\n  network: ws\n  servername: $vm_name                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $vm_name                     \n\n- name: hysteria2-$hostname                            \n  type: hysteria2                                      \n  server: $cl_hy2_ip                               \n  port: $hy2_port                                \n  password: $uuid                          \n  alpn:\n    - h3\n  sni: $hy2_name                               \n  skip-cert-verify: $hy2_ins\n  fast-open: true\n\n- name: tuic5-$hostname                            \n  server: $cl_tu5_ip                      \n  port: $tu5_port                                    \n  type: tuic\n  uuid: $uuid       \n  password: $uuid   \n  alpn: [h3]\n  disable-sni: true\n  reduce-rtt: true\n  udp-relay-mode: native\n  congestion-controller: bbr\n  sni: $tu5_name                                \n  skip-cert-verify: $tu5_ins\n\n- name: vmess-tls-argo固定-$hostname                         \n  type: vmess\n  server: $vmadd_argo                        \n  port: 8443                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: true\n  network: ws\n  servername: $argogd                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argogd\n\n\n- name: vmess-argo固定-$hostname                         \n  type: vmess\n  server: $vmadd_argo                        \n  port: 8880                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: false\n  network: ws\n  servername: $argogd                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argogd\n\n- name: vmess-tls-argo临时-$hostname                         \n  type: vmess\n  server: $vmadd_argo                        \n  port: 8443                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: true\n  network: ws\n  servername: $argo                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argo\n\n- name: vmess-argo临时-$hostname                         \n  type: vmess\n  server: $vmadd_argo                        \n  port: 8880                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: false\n  network: ws\n  servername: $argo                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argo \n\nproxy-groups:\n- name: 负载均衡\n  type: load-balance\n  url: https://www.gstatic.com/generate_204\n  interval: 300\n  strategy: round-robin\n  proxies:\n    - vless-reality-vision-$hostname                              \n    - vmess-ws-$hostname\n    - hysteria2-$hostname\n    - tuic5-$hostname\n    - vmess-tls-argo固定-$hostname\n    - vmess-argo固定-$hostname\n    - vmess-tls-argo临时-$hostname\n    - vmess-argo临时-$hostname\n\n- name: 自动选择\n  type: url-test\n  url: https://www.gstatic.com/generate_204\n  interval: 300\n  tolerance: 50\n  proxies:\n    - vless-reality-vision-$hostname                              \n    - vmess-ws-$hostname\n    - hysteria2-$hostname\n    - tuic5-$hostname\n    - vmess-tls-argo固定-$hostname\n    - vmess-argo固定-$hostname\n    - vmess-tls-argo临时-$hostname\n    - vmess-argo临时-$hostname\n    \n- name: 🌍选择代理节点\n  type: select\n  proxies:\n    - 负载均衡                                         \n    - 自动选择\n    - DIRECT\n    - vless-reality-vision-$hostname                              \n    - vmess-ws-$hostname\n    - hysteria2-$hostname\n    - tuic5-$hostname\n    - vmess-tls-argo固定-$hostname\n    - vmess-argo固定-$hostname\n    - vmess-tls-argo临时-$hostname\n    - vmess-argo临时-$hostname\nrules:\n  - GEOIP,LAN,DIRECT\n  - GEOIP,CN,DIRECT\n  - MATCH,🌍选择代理节点\nEOF\n\n\nelif [[ ! -n $(ps -e | grep -w $ym 2>/dev/null) && -n $(ps -e | grep -w $ls 2>/dev/null) && \"$tls\" = \"false\" ]]; then\ncat > /etc/s-box/sing_box_client.json <<EOF\n{\n  \"log\": {\n    \"disabled\": false,\n    \"level\": \"info\",\n    \"timestamp\": true\n  },\n  \"experimental\": {\n    \"clash_api\": {\n      \"external_controller\": \"127.0.0.1:9090\",\n      \"external_ui\": \"ui\",\n      \"external_ui_download_url\": \"\",\n      \"external_ui_download_detour\": \"\",\n      \"secret\": \"\",\n      \"default_mode\": \"Rule\"\n       },\n      \"cache_file\": {\n            \"enabled\": true,\n            \"path\": \"cache.db\",\n            \"store_fakeip\": true\n        }\n    },\n    \"dns\": {\n        \"servers\": [\n            {\n                \"tag\": \"proxydns\",\n                \"address\": \"$sbdnsip\",\n                \"detour\": \"select\"\n            },\n            {\n                \"tag\": \"localdns\",\n                \"address\": \"h3://223.5.5.5/dns-query\",\n                \"detour\": \"direct\"\n            },\n            {\n                \"tag\": \"dns_fakeip\",\n                \"address\": \"fakeip\"\n            }\n        ],\n        \"rules\": [\n            {\n                \"outbound\": \"any\",\n                \"server\": \"localdns\",\n                \"disable_cache\": true\n            },\n            {\n                \"clash_mode\": \"Global\",\n                \"server\": \"proxydns\"\n            },\n            {\n                \"clash_mode\": \"Direct\",\n                \"server\": \"localdns\"\n            },\n            {\n                \"rule_set\": \"geosite-cn\",\n                \"server\": \"localdns\"\n            },\n            {\n                 \"rule_set\": \"geosite-geolocation-!cn\",\n                 \"server\": \"proxydns\"\n            },\n             {\n                \"rule_set\": \"geosite-geolocation-!cn\",         \n                \"query_type\": [\n                    \"A\",\n                    \"AAAA\"\n                ],\n                \"server\": \"dns_fakeip\"\n            }\n          ],\n           \"fakeip\": {\n           \"enabled\": true,\n           \"inet4_range\": \"198.18.0.0/15\",\n           \"inet6_range\": \"fc00::/18\"\n         },\n          \"independent_cache\": true,\n          \"final\": \"proxydns\"\n        },\n      \"inbounds\": [\n    {\n      \"type\": \"tun\",\n           \"tag\": \"tun-in\",\n\t  \"address\": [\n      \"172.19.0.1/30\",\n\t  \"fd00::1/126\"\n      ],\n      \"auto_route\": true,\n      \"strict_route\": true,\n      \"sniff\": true,\n      \"sniff_override_destination\": true,\n      \"domain_strategy\": \"prefer_ipv4\"\n    }\n  ],\n  \"outbounds\": [\n    {\n      \"tag\": \"select\",\n      \"type\": \"selector\",\n      \"default\": \"auto\",\n      \"outbounds\": [\n        \"auto\",\n        \"vless-$hostname\",\n        \"vmess-$hostname\",\n        \"hy2-$hostname\",\n        \"tuic5-$hostname\",\n\"vmess-tls-argo临时-$hostname\",\n\"vmess-argo临时-$hostname\"\n      ]\n    },\n    {\n      \"type\": \"vless\",\n      \"tag\": \"vless-$hostname\",\n      \"server\": \"$server_ipcl\",\n      \"server_port\": $vl_port,\n      \"uuid\": \"$uuid\",\n      \"packet_encoding\": \"xudp\",\n      \"flow\": \"xtls-rprx-vision\",\n      \"tls\": {\n        \"enabled\": true,\n        \"server_name\": \"$vl_name\",\n        \"utls\": {\n          \"enabled\": true,\n          \"fingerprint\": \"chrome\"\n        },\n      \"reality\": {\n          \"enabled\": true,\n          \"public_key\": \"$public_key\",\n          \"short_id\": \"$short_id\"\n        }\n      }\n    },\n{\n            \"server\": \"$vmadd_local\",\n            \"server_port\": $vm_port,\n            \"tag\": \"vmess-$hostname\",\n            \"tls\": {\n                \"enabled\": $tls,\n                \"server_name\": \"$vm_name\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$vm_name\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\n\n    {\n        \"type\": \"hysteria2\",\n        \"tag\": \"hy2-$hostname\",\n        \"server\": \"$cl_hy2_ip\",\n        \"server_port\": $hy2_port,\n        \"password\": \"$uuid\",\n        \"tls\": {\n            \"enabled\": true,\n            \"server_name\": \"$hy2_name\",\n            \"insecure\": $hy2_ins,\n            \"alpn\": [\n                \"h3\"\n            ]\n        }\n    },\n        {\n            \"type\":\"tuic\",\n            \"tag\": \"tuic5-$hostname\",\n            \"server\": \"$cl_tu5_ip\",\n            \"server_port\": $tu5_port,\n            \"uuid\": \"$uuid\",\n            \"password\": \"$uuid\",\n            \"congestion_control\": \"bbr\",\n            \"udp_relay_mode\": \"native\",\n            \"udp_over_stream\": false,\n            \"zero_rtt_handshake\": false,\n            \"heartbeat\": \"10s\",\n            \"tls\":{\n                \"enabled\": true,\n                \"server_name\": \"$tu5_name\",\n                \"insecure\": $tu5_ins,\n                \"alpn\": [\n                    \"h3\"\n                ]\n            }\n        },\n{\n            \"server\": \"$vmadd_argo\",\n            \"server_port\": 8443,\n            \"tag\": \"vmess-tls-argo临时-$hostname\",\n            \"tls\": {\n                \"enabled\": true,\n                \"server_name\": \"$argo\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argo\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\n{\n            \"server\": \"$vmadd_argo\",\n            \"server_port\": 8880,\n            \"tag\": \"vmess-argo临时-$hostname\",\n            \"tls\": {\n                \"enabled\": false,\n                \"server_name\": \"$argo\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argo\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\n    {\n      \"tag\": \"direct\",\n      \"type\": \"direct\"\n    },\n    {\n      \"tag\": \"auto\",\n      \"type\": \"urltest\",\n      \"outbounds\": [\n        \"vless-$hostname\",\n        \"vmess-$hostname\",\n        \"hy2-$hostname\",\n        \"tuic5-$hostname\",\n\"vmess-tls-argo临时-$hostname\",\n\"vmess-argo临时-$hostname\"\n      ],\n      \"url\": \"https://www.gstatic.com/generate_204\",\n      \"interval\": \"1m\",\n      \"tolerance\": 50,\n      \"interrupt_exist_connections\": false\n    }\n  ],\n  \"route\": {\n      \"rule_set\": [\n            {\n                \"tag\": \"geosite-geolocation-!cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/geolocation-!cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            },\n            {\n                \"tag\": \"geosite-cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/geolocation-cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            },\n            {\n                \"tag\": \"geoip-cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geoip/cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            }\n        ],\n    \"auto_detect_interface\": true,\n    \"final\": \"select\",\n    \"rules\": [\n      {\n      \"inbound\": \"tun-in\",\n      \"action\": \"sniff\"\n      },\n      {\n      \"protocol\": \"dns\",\n      \"action\": \"hijack-dns\"\n      },\n      {\n      \"port\": 443,\n      \"network\": \"udp\",\n      \"action\": \"reject\"\n      },\n      {\n        \"clash_mode\": \"Direct\",\n        \"outbound\": \"direct\"\n      },\n      {\n        \"clash_mode\": \"Global\",\n        \"outbound\": \"select\"\n      },\n      {\n        \"rule_set\": \"geoip-cn\",\n        \"outbound\": \"direct\"\n      },\n      {\n        \"rule_set\": \"geosite-cn\",\n        \"outbound\": \"direct\"\n      },\n      {\n      \"ip_is_private\": true,\n      \"outbound\": \"direct\"\n      },\n      {\n        \"rule_set\": \"geosite-geolocation-!cn\",\n        \"outbound\": \"select\"\n      }\n    ]\n  },\n    \"ntp\": {\n    \"enabled\": true,\n    \"server\": \"time.apple.com\",\n    \"server_port\": 123,\n    \"interval\": \"30m\",\n    \"detour\": \"direct\"\n  }\n}\nEOF\n\ncat > /etc/s-box/clash_meta_client.yaml <<EOF\nport: 7890\nallow-lan: true\nmode: rule\nlog-level: info\nunified-delay: true\nglobal-client-fingerprint: chrome\ndns:\n  enable: true\n  listen: :53\n  ipv6: true\n  enhanced-mode: fake-ip\n  fake-ip-range: 198.18.0.1/16\n  default-nameserver: \n    - 223.5.5.5\n    - 8.8.8.8\n  nameserver:\n    - https://dns.alidns.com/dns-query\n    - https://doh.pub/dns-query\n  fallback:\n    - https://1.0.0.1/dns-query\n    - tls://dns.google\n  fallback-filter:\n    geoip: true\n    geoip-code: CN\n    ipcidr:\n      - 240.0.0.0/4\n\nproxies:\n- name: vless-reality-vision-$hostname               \n  type: vless\n  server: $server_ipcl                           \n  port: $vl_port                                \n  uuid: $uuid   \n  network: tcp\n  udp: true\n  tls: true\n  flow: xtls-rprx-vision\n  servername: $vl_name                 \n  reality-opts: \n    public-key: $public_key    \n    short-id: $short_id                      \n  client-fingerprint: chrome                  \n\n- name: vmess-ws-$hostname                         \n  type: vmess\n  server: $vmadd_local                        \n  port: $vm_port                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: $tls\n  network: ws\n  servername: $vm_name                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $vm_name                     \n\n- name: hysteria2-$hostname                            \n  type: hysteria2                                      \n  server: $cl_hy2_ip                               \n  port: $hy2_port                                \n  password: $uuid                          \n  alpn:\n    - h3\n  sni: $hy2_name                               \n  skip-cert-verify: $hy2_ins\n  fast-open: true\n\n- name: tuic5-$hostname                            \n  server: $cl_tu5_ip                      \n  port: $tu5_port                                    \n  type: tuic\n  uuid: $uuid       \n  password: $uuid   \n  alpn: [h3]\n  disable-sni: true\n  reduce-rtt: true\n  udp-relay-mode: native\n  congestion-controller: bbr\n  sni: $tu5_name                                \n  skip-cert-verify: $tu5_ins\n\n\n\n\n\n\n\n\n\n- name: vmess-tls-argo临时-$hostname                         \n  type: vmess\n  server: $vmadd_argo                        \n  port: 8443                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: true\n  network: ws\n  servername: $argo                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argo\n\n- name: vmess-argo临时-$hostname                         \n  type: vmess\n  server: $vmadd_argo                        \n  port: 8880                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: false\n  network: ws\n  servername: $argo                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argo \n\nproxy-groups:\n- name: 负载均衡\n  type: load-balance\n  url: https://www.gstatic.com/generate_204\n  interval: 300\n  strategy: round-robin\n  proxies:\n    - vless-reality-vision-$hostname                              \n    - vmess-ws-$hostname\n    - hysteria2-$hostname\n    - tuic5-$hostname\n    - vmess-tls-argo临时-$hostname\n    - vmess-argo临时-$hostname\n\n- name: 自动选择\n  type: url-test\n  url: https://www.gstatic.com/generate_204\n  interval: 300\n  tolerance: 50\n  proxies:\n    - vless-reality-vision-$hostname                              \n    - vmess-ws-$hostname\n    - hysteria2-$hostname\n    - tuic5-$hostname\n    - vmess-tls-argo临时-$hostname\n    - vmess-argo临时-$hostname\n    \n- name: 🌍选择代理节点\n  type: select\n  proxies:\n    - 负载均衡                                         \n    - 自动选择\n    - DIRECT\n    - vless-reality-vision-$hostname                              \n    - vmess-ws-$hostname\n    - hysteria2-$hostname\n    - tuic5-$hostname\n    - vmess-tls-argo临时-$hostname\n    - vmess-argo临时-$hostname\nrules:\n  - GEOIP,LAN,DIRECT\n  - GEOIP,CN,DIRECT\n  - MATCH,🌍选择代理节点\nEOF\n\nelif [[ -n $(ps -e | grep -w $ym 2>/dev/null) && ! -n $(ps -e | grep -w $ls 2>/dev/null) && \"$tls\" = \"false\" ]]; then\ncat > /etc/s-box/sing_box_client.json <<EOF\n{\n  \"log\": {\n    \"disabled\": false,\n    \"level\": \"info\",\n    \"timestamp\": true\n  },\n  \"experimental\": {\n    \"clash_api\": {\n      \"external_controller\": \"127.0.0.1:9090\",\n      \"external_ui\": \"ui\",\n      \"external_ui_download_url\": \"\",\n      \"external_ui_download_detour\": \"\",\n      \"secret\": \"\",\n      \"default_mode\": \"Rule\"\n       },\n      \"cache_file\": {\n            \"enabled\": true,\n            \"path\": \"cache.db\",\n            \"store_fakeip\": true\n        }\n    },\n    \"dns\": {\n        \"servers\": [\n            {\n                \"tag\": \"proxydns\",\n                \"address\": \"$sbdnsip\",\n                \"detour\": \"select\"\n            },\n            {\n                \"tag\": \"localdns\",\n                \"address\": \"h3://223.5.5.5/dns-query\",\n                \"detour\": \"direct\"\n            },\n            {\n                \"tag\": \"dns_fakeip\",\n                \"address\": \"fakeip\"\n            }\n        ],\n        \"rules\": [\n            {\n                \"outbound\": \"any\",\n                \"server\": \"localdns\",\n                \"disable_cache\": true\n            },\n            {\n                \"clash_mode\": \"Global\",\n                \"server\": \"proxydns\"\n            },\n            {\n                \"clash_mode\": \"Direct\",\n                \"server\": \"localdns\"\n            },\n            {\n                \"rule_set\": \"geosite-cn\",\n                \"server\": \"localdns\"\n            },\n            {\n                 \"rule_set\": \"geosite-geolocation-!cn\",\n                 \"server\": \"proxydns\"\n            },\n             {\n                \"rule_set\": \"geosite-geolocation-!cn\",         \n                \"query_type\": [\n                    \"A\",\n                    \"AAAA\"\n                ],\n                \"server\": \"dns_fakeip\"\n            }\n          ],\n           \"fakeip\": {\n           \"enabled\": true,\n           \"inet4_range\": \"198.18.0.0/15\",\n           \"inet6_range\": \"fc00::/18\"\n         },\n          \"independent_cache\": true,\n          \"final\": \"proxydns\"\n        },\n      \"inbounds\": [\n    {\n      \"type\": \"tun\",\n     \"tag\": \"tun-in\",\n\t  \"address\": [\n      \"172.19.0.1/30\",\n\t  \"fd00::1/126\"\n      ],\n      \"auto_route\": true,\n      \"strict_route\": true,\n      \"sniff\": true,\n      \"sniff_override_destination\": true,\n      \"domain_strategy\": \"prefer_ipv4\"\n    }\n  ],\n  \"outbounds\": [\n    {\n      \"tag\": \"select\",\n      \"type\": \"selector\",\n      \"default\": \"auto\",\n      \"outbounds\": [\n        \"auto\",\n        \"vless-$hostname\",\n        \"vmess-$hostname\",\n        \"hy2-$hostname\",\n        \"tuic5-$hostname\",\n\"vmess-tls-argo固定-$hostname\",\n\"vmess-argo固定-$hostname\"\n      ]\n    },\n    {\n      \"type\": \"vless\",\n      \"tag\": \"vless-$hostname\",\n      \"server\": \"$server_ipcl\",\n      \"server_port\": $vl_port,\n      \"uuid\": \"$uuid\",\n      \"packet_encoding\": \"xudp\",\n      \"flow\": \"xtls-rprx-vision\",\n      \"tls\": {\n        \"enabled\": true,\n        \"server_name\": \"$vl_name\",\n        \"utls\": {\n          \"enabled\": true,\n          \"fingerprint\": \"chrome\"\n        },\n      \"reality\": {\n          \"enabled\": true,\n          \"public_key\": \"$public_key\",\n          \"short_id\": \"$short_id\"\n        }\n      }\n    },\n{\n            \"server\": \"$vmadd_local\",\n            \"server_port\": $vm_port,\n            \"tag\": \"vmess-$hostname\",\n            \"tls\": {\n                \"enabled\": $tls,\n                \"server_name\": \"$vm_name\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$vm_name\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\n\n    {\n        \"type\": \"hysteria2\",\n        \"tag\": \"hy2-$hostname\",\n        \"server\": \"$cl_hy2_ip\",\n        \"server_port\": $hy2_port,\n        \"password\": \"$uuid\",\n        \"tls\": {\n            \"enabled\": true,\n            \"server_name\": \"$hy2_name\",\n            \"insecure\": $hy2_ins,\n            \"alpn\": [\n                \"h3\"\n            ]\n        }\n    },\n        {\n            \"type\":\"tuic\",\n            \"tag\": \"tuic5-$hostname\",\n            \"server\": \"$cl_tu5_ip\",\n            \"server_port\": $tu5_port,\n            \"uuid\": \"$uuid\",\n            \"password\": \"$uuid\",\n            \"congestion_control\": \"bbr\",\n            \"udp_relay_mode\": \"native\",\n            \"udp_over_stream\": false,\n            \"zero_rtt_handshake\": false,\n            \"heartbeat\": \"10s\",\n            \"tls\":{\n                \"enabled\": true,\n                \"server_name\": \"$tu5_name\",\n                \"insecure\": $tu5_ins,\n                \"alpn\": [\n                    \"h3\"\n                ]\n            }\n        },\n{\n            \"server\": \"$vmadd_argo\",\n            \"server_port\": 8443,\n            \"tag\": \"vmess-tls-argo固定-$hostname\",\n            \"tls\": {\n                \"enabled\": true,\n                \"server_name\": \"$argogd\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argogd\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\n{\n            \"server\": \"$vmadd_argo\",\n            \"server_port\": 8880,\n            \"tag\": \"vmess-argo固定-$hostname\",\n            \"tls\": {\n                \"enabled\": false,\n                \"server_name\": \"$argogd\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argogd\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\n    {\n      \"tag\": \"direct\",\n      \"type\": \"direct\"\n    },\n    {\n      \"tag\": \"auto\",\n      \"type\": \"urltest\",\n      \"outbounds\": [\n        \"vless-$hostname\",\n        \"vmess-$hostname\",\n        \"hy2-$hostname\",\n        \"tuic5-$hostname\",\n\"vmess-tls-argo固定-$hostname\",\n\"vmess-argo固定-$hostname\"\n      ],\n      \"url\": \"https://www.gstatic.com/generate_204\",\n      \"interval\": \"1m\",\n      \"tolerance\": 50,\n      \"interrupt_exist_connections\": false\n    }\n  ],\n  \"route\": {\n      \"rule_set\": [\n            {\n                \"tag\": \"geosite-geolocation-!cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/geolocation-!cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            },\n            {\n                \"tag\": \"geosite-cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/geolocation-cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            },\n            {\n                \"tag\": \"geoip-cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geoip/cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            }\n        ],\n    \"auto_detect_interface\": true,\n    \"final\": \"select\",\n    \"rules\": [\n      {\n      \"inbound\": \"tun-in\",\n      \"action\": \"sniff\"\n      },\n      {\n      \"protocol\": \"dns\",\n      \"action\": \"hijack-dns\"\n      },\n      {\n      \"port\": 443,\n      \"network\": \"udp\",\n      \"action\": \"reject\"\n      },\n      {\n        \"clash_mode\": \"Direct\",\n        \"outbound\": \"direct\"\n      },\n      {\n        \"clash_mode\": \"Global\",\n        \"outbound\": \"select\"\n      },\n      {\n        \"rule_set\": \"geoip-cn\",\n        \"outbound\": \"direct\"\n      },\n      {\n        \"rule_set\": \"geosite-cn\",\n        \"outbound\": \"direct\"\n      },\n      {\n      \"ip_is_private\": true,\n      \"outbound\": \"direct\"\n      },\n      {\n        \"rule_set\": \"geosite-geolocation-!cn\",\n        \"outbound\": \"select\"\n      }\n    ]\n  },\n    \"ntp\": {\n    \"enabled\": true,\n    \"server\": \"time.apple.com\",\n    \"server_port\": 123,\n    \"interval\": \"30m\",\n    \"detour\": \"direct\"\n  }\n}\nEOF\n\ncat > /etc/s-box/clash_meta_client.yaml <<EOF\nport: 7890\nallow-lan: true\nmode: rule\nlog-level: info\nunified-delay: true\nglobal-client-fingerprint: chrome\ndns:\n  enable: true\n  listen: :53\n  ipv6: true\n  enhanced-mode: fake-ip\n  fake-ip-range: 198.18.0.1/16\n  default-nameserver: \n    - 223.5.5.5\n    - 8.8.8.8\n  nameserver:\n    - https://dns.alidns.com/dns-query\n    - https://doh.pub/dns-query\n  fallback:\n    - https://1.0.0.1/dns-query\n    - tls://dns.google\n  fallback-filter:\n    geoip: true\n    geoip-code: CN\n    ipcidr:\n      - 240.0.0.0/4\n\nproxies:\n- name: vless-reality-vision-$hostname               \n  type: vless\n  server: $server_ipcl                           \n  port: $vl_port                                \n  uuid: $uuid   \n  network: tcp\n  udp: true\n  tls: true\n  flow: xtls-rprx-vision\n  servername: $vl_name                 \n  reality-opts: \n    public-key: $public_key    \n    short-id: $short_id                      \n  client-fingerprint: chrome                  \n\n- name: vmess-ws-$hostname                         \n  type: vmess\n  server: $vmadd_local                        \n  port: $vm_port                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: $tls\n  network: ws\n  servername: $vm_name                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $vm_name                     \n\n- name: hysteria2-$hostname                            \n  type: hysteria2                                      \n  server: $cl_hy2_ip                               \n  port: $hy2_port                                \n  password: $uuid                          \n  alpn:\n    - h3\n  sni: $hy2_name                               \n  skip-cert-verify: $hy2_ins\n  fast-open: true\n\n- name: tuic5-$hostname                            \n  server: $cl_tu5_ip                      \n  port: $tu5_port                                    \n  type: tuic\n  uuid: $uuid       \n  password: $uuid   \n  alpn: [h3]\n  disable-sni: true\n  reduce-rtt: true\n  udp-relay-mode: native\n  congestion-controller: bbr\n  sni: $tu5_name                                \n  skip-cert-verify: $tu5_ins\n\n\n\n\n\n\n\n- name: vmess-tls-argo固定-$hostname                         \n  type: vmess\n  server: $vmadd_argo                        \n  port: 8443                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: true\n  network: ws\n  servername: $argogd                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argogd\n\n- name: vmess-argo固定-$hostname                         \n  type: vmess\n  server: $vmadd_argo                        \n  port: 8880                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: false\n  network: ws\n  servername: $argogd                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $argogd\n\nproxy-groups:\n- name: 负载均衡\n  type: load-balance\n  url: https://www.gstatic.com/generate_204\n  interval: 300\n  strategy: round-robin\n  proxies:\n    - vless-reality-vision-$hostname                              \n    - vmess-ws-$hostname\n    - hysteria2-$hostname\n    - tuic5-$hostname\n    - vmess-tls-argo固定-$hostname\n    - vmess-argo固定-$hostname\n\n- name: 自动选择\n  type: url-test\n  url: https://www.gstatic.com/generate_204\n  interval: 300\n  tolerance: 50\n  proxies:\n    - vless-reality-vision-$hostname                              \n    - vmess-ws-$hostname\n    - hysteria2-$hostname\n    - tuic5-$hostname\n    - vmess-tls-argo固定-$hostname\n    - vmess-argo固定-$hostname\n    \n- name: 🌍选择代理节点\n  type: select\n  proxies:\n    - 负载均衡                                         \n    - 自动选择\n    - DIRECT\n    - vless-reality-vision-$hostname                              \n    - vmess-ws-$hostname\n    - hysteria2-$hostname\n    - tuic5-$hostname\n    - vmess-tls-argo固定-$hostname\n    - vmess-argo固定-$hostname\nrules:\n  - GEOIP,LAN,DIRECT\n  - GEOIP,CN,DIRECT\n  - MATCH,🌍选择代理节点\nEOF\n\nelse\ncat > /etc/s-box/sing_box_client.json <<EOF\n{\n  \"log\": {\n    \"disabled\": false,\n    \"level\": \"info\",\n    \"timestamp\": true\n  },\n  \"experimental\": {\n    \"clash_api\": {\n      \"external_controller\": \"127.0.0.1:9090\",\n      \"external_ui\": \"ui\",\n      \"external_ui_download_url\": \"\",\n      \"external_ui_download_detour\": \"\",\n      \"secret\": \"\",\n      \"default_mode\": \"Rule\"\n       },\n      \"cache_file\": {\n            \"enabled\": true,\n            \"path\": \"cache.db\",\n            \"store_fakeip\": true\n        }\n    },\n    \"dns\": {\n        \"servers\": [\n            {\n                \"tag\": \"proxydns\",\n                \"address\": \"$sbdnsip\",\n                \"detour\": \"select\"\n            },\n            {\n                \"tag\": \"localdns\",\n                \"address\": \"h3://223.5.5.5/dns-query\",\n                \"detour\": \"direct\"\n            },\n            {\n                \"tag\": \"dns_fakeip\",\n                \"address\": \"fakeip\"\n            }\n        ],\n        \"rules\": [\n            {\n                \"outbound\": \"any\",\n                \"server\": \"localdns\",\n                \"disable_cache\": true\n            },\n            {\n                \"clash_mode\": \"Global\",\n                \"server\": \"proxydns\"\n            },\n            {\n                \"clash_mode\": \"Direct\",\n                \"server\": \"localdns\"\n            },\n            {\n                \"rule_set\": \"geosite-cn\",\n                \"server\": \"localdns\"\n            },\n            {\n                 \"rule_set\": \"geosite-geolocation-!cn\",\n                 \"server\": \"proxydns\"\n            },\n             {\n                \"rule_set\": \"geosite-geolocation-!cn\",         \n                \"query_type\": [\n                    \"A\",\n                    \"AAAA\"\n                ],\n                \"server\": \"dns_fakeip\"\n            }\n          ],\n           \"fakeip\": {\n           \"enabled\": true,\n           \"inet4_range\": \"198.18.0.0/15\",\n           \"inet6_range\": \"fc00::/18\"\n         },\n          \"independent_cache\": true,\n          \"final\": \"proxydns\"\n        },\n      \"inbounds\": [\n    {\n      \"type\": \"tun\",\n     \"tag\": \"tun-in\",\n\t  \"address\": [\n      \"172.19.0.1/30\",\n\t  \"fd00::1/126\"\n      ],\n      \"auto_route\": true,\n      \"strict_route\": true,\n      \"sniff\": true,\n      \"sniff_override_destination\": true,\n      \"domain_strategy\": \"prefer_ipv4\"\n    }\n  ],\n  \"outbounds\": [\n    {\n      \"tag\": \"select\",\n      \"type\": \"selector\",\n      \"default\": \"auto\",\n      \"outbounds\": [\n        \"auto\",\n        \"vless-$hostname\",\n        \"vmess-$hostname\",\n        \"hy2-$hostname\",\n        \"tuic5-$hostname\"\n      ]\n    },\n    {\n      \"type\": \"vless\",\n      \"tag\": \"vless-$hostname\",\n      \"server\": \"$server_ipcl\",\n      \"server_port\": $vl_port,\n      \"uuid\": \"$uuid\",\n      \"packet_encoding\": \"xudp\",\n      \"flow\": \"xtls-rprx-vision\",\n      \"tls\": {\n        \"enabled\": true,\n        \"server_name\": \"$vl_name\",\n        \"utls\": {\n          \"enabled\": true,\n          \"fingerprint\": \"chrome\"\n        },\n      \"reality\": {\n          \"enabled\": true,\n          \"public_key\": \"$public_key\",\n          \"short_id\": \"$short_id\"\n        }\n      }\n    },\n{\n            \"server\": \"$vmadd_local\",\n            \"server_port\": $vm_port,\n            \"tag\": \"vmess-$hostname\",\n            \"tls\": {\n                \"enabled\": $tls,\n                \"server_name\": \"$vm_name\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$vm_name\"\n                    ]\n                },\n                \"path\": \"$ws_path\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$uuid\"\n        },\n\n    {\n        \"type\": \"hysteria2\",\n        \"tag\": \"hy2-$hostname\",\n        \"server\": \"$cl_hy2_ip\",\n        \"server_port\": $hy2_port,\n        \"password\": \"$uuid\",\n        \"tls\": {\n            \"enabled\": true,\n            \"server_name\": \"$hy2_name\",\n            \"insecure\": $hy2_ins,\n            \"alpn\": [\n                \"h3\"\n            ]\n        }\n    },\n        {\n            \"type\":\"tuic\",\n            \"tag\": \"tuic5-$hostname\",\n            \"server\": \"$cl_tu5_ip\",\n            \"server_port\": $tu5_port,\n            \"uuid\": \"$uuid\",\n            \"password\": \"$uuid\",\n            \"congestion_control\": \"bbr\",\n            \"udp_relay_mode\": \"native\",\n            \"udp_over_stream\": false,\n            \"zero_rtt_handshake\": false,\n            \"heartbeat\": \"10s\",\n            \"tls\":{\n                \"enabled\": true,\n                \"server_name\": \"$tu5_name\",\n                \"insecure\": $tu5_ins,\n                \"alpn\": [\n                    \"h3\"\n                ]\n            }\n        },\n    {\n      \"tag\": \"direct\",\n      \"type\": \"direct\"\n    },\n    {\n      \"tag\": \"auto\",\n      \"type\": \"urltest\",\n      \"outbounds\": [\n        \"vless-$hostname\",\n        \"vmess-$hostname\",\n        \"hy2-$hostname\",\n        \"tuic5-$hostname\"\n      ],\n      \"url\": \"https://www.gstatic.com/generate_204\",\n      \"interval\": \"1m\",\n      \"tolerance\": 50,\n      \"interrupt_exist_connections\": false\n    }\n  ],\n  \"route\": {\n      \"rule_set\": [\n            {\n                \"tag\": \"geosite-geolocation-!cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/geolocation-!cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            },\n            {\n                \"tag\": \"geosite-cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/geolocation-cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            },\n            {\n                \"tag\": \"geoip-cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geoip/cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            }\n        ],\n    \"auto_detect_interface\": true,\n    \"final\": \"select\",\n    \"rules\": [\n      {\n      \"inbound\": \"tun-in\",\n      \"action\": \"sniff\"\n      },\n      {\n      \"protocol\": \"dns\",\n      \"action\": \"hijack-dns\"\n      },\n      {\n      \"port\": 443,\n      \"network\": \"udp\",\n      \"action\": \"reject\"\n      },\n      {\n        \"clash_mode\": \"Direct\",\n        \"outbound\": \"direct\"\n      },\n      {\n        \"clash_mode\": \"Global\",\n        \"outbound\": \"select\"\n      },\n      {\n        \"rule_set\": \"geoip-cn\",\n        \"outbound\": \"direct\"\n      },\n      {\n        \"rule_set\": \"geosite-cn\",\n        \"outbound\": \"direct\"\n      },\n      {\n      \"ip_is_private\": true,\n      \"outbound\": \"direct\"\n      },\n      {\n        \"rule_set\": \"geosite-geolocation-!cn\",\n        \"outbound\": \"select\"\n      }\n    ]\n  },\n    \"ntp\": {\n    \"enabled\": true,\n    \"server\": \"time.apple.com\",\n    \"server_port\": 123,\n    \"interval\": \"30m\",\n    \"detour\": \"direct\"\n  }\n}\nEOF\n\ncat > /etc/s-box/clash_meta_client.yaml <<EOF\nport: 7890\nallow-lan: true\nmode: rule\nlog-level: info\nunified-delay: true\nglobal-client-fingerprint: chrome\ndns:\n  enable: true\n  listen: :53\n  ipv6: true\n  enhanced-mode: fake-ip\n  fake-ip-range: 198.18.0.1/16\n  default-nameserver: \n    - 223.5.5.5\n    - 8.8.8.8\n  nameserver:\n    - https://dns.alidns.com/dns-query\n    - https://doh.pub/dns-query\n  fallback:\n    - https://1.0.0.1/dns-query\n    - tls://dns.google\n  fallback-filter:\n    geoip: true\n    geoip-code: CN\n    ipcidr:\n      - 240.0.0.0/4\n\nproxies:\n- name: vless-reality-vision-$hostname               \n  type: vless\n  server: $server_ipcl                           \n  port: $vl_port                                \n  uuid: $uuid   \n  network: tcp\n  udp: true\n  tls: true\n  flow: xtls-rprx-vision\n  servername: $vl_name                 \n  reality-opts: \n    public-key: $public_key    \n    short-id: $short_id                    \n  client-fingerprint: chrome                  \n\n- name: vmess-ws-$hostname                         \n  type: vmess\n  server: $vmadd_local                        \n  port: $vm_port                                     \n  uuid: $uuid       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: $tls\n  network: ws\n  servername: $vm_name                    \n  ws-opts:\n    path: \"$ws_path\"                             \n    headers:\n      Host: $vm_name                     \n\n\n\n\n\n- name: hysteria2-$hostname                            \n  type: hysteria2                                      \n  server: $cl_hy2_ip                               \n  port: $hy2_port                                \n  password: $uuid                          \n  alpn:\n    - h3\n  sni: $hy2_name                               \n  skip-cert-verify: $hy2_ins\n  fast-open: true\n\n- name: tuic5-$hostname                            \n  server: $cl_tu5_ip                      \n  port: $tu5_port                                    \n  type: tuic\n  uuid: $uuid       \n  password: $uuid   \n  alpn: [h3]\n  disable-sni: true\n  reduce-rtt: true\n  udp-relay-mode: native\n  congestion-controller: bbr\n  sni: $tu5_name                                \n  skip-cert-verify: $tu5_ins\n\nproxy-groups:\n- name: 负载均衡\n  type: load-balance\n  url: https://www.gstatic.com/generate_204\n  interval: 300\n  strategy: round-robin\n  proxies:\n    - vless-reality-vision-$hostname                              \n    - vmess-ws-$hostname\n    - hysteria2-$hostname\n    - tuic5-$hostname\n\n- name: 自动选择\n  type: url-test\n  url: https://www.gstatic.com/generate_204\n  interval: 300\n  tolerance: 50\n  proxies:\n    - vless-reality-vision-$hostname                              \n    - vmess-ws-$hostname\n    - hysteria2-$hostname\n    - tuic5-$hostname\n    \n- name: 🌍选择代理节点\n  type: select\n  proxies:\n    - 负载均衡                                         \n    - 自动选择\n    - DIRECT\n    - vless-reality-vision-$hostname                              \n    - vmess-ws-$hostname\n    - hysteria2-$hostname\n    - tuic5-$hostname\nrules:\n  - GEOIP,LAN,DIRECT\n  - GEOIP,CN,DIRECT\n  - MATCH,🌍选择代理节点\nEOF\nfi\n\ncat > /etc/s-box/v2rayn_hy2.yaml <<EOF\nserver: $sb_hy2_ip:$hy2_port\nauth: $uuid\ntls:\n  sni: $hy2_name\n  insecure: $hy2_ins\nfastOpen: true\nsocks5:\n  listen: 127.0.0.1:50000\nlazy: true\ntransport:\n  udp:\n    hopInterval: 30s\nEOF\n\ncat > /etc/s-box/v2rayn_tu5.json <<EOF\n{\n    \"relay\": {\n        \"server\": \"$sb_tu5_ip:$tu5_port\",\n        \"uuid\": \"$uuid\",\n        \"password\": \"$uuid\",\n        \"congestion_control\": \"bbr\",\n        \"alpn\": [\"h3\", \"spdy/3.1\"]\n    },\n    \"local\": {\n        \"server\": \"127.0.0.1:55555\"\n    },\n    \"log_level\": \"info\"\n}\nEOF\nif [[ -n $hy2_ports ]]; then\nhy2_ports=\",$hy2_ports\"\nhy2_ports=$(echo $hy2_ports | sed 's/:/-/g')\na=$hy2_ports\nsed -i \"/server:/ s/$/$a/\" /etc/s-box/v2rayn_hy2.yaml\nfi\nsed -i 's/server: \\(.*\\)/server: \"\\1\"/' /etc/s-box/v2rayn_hy2.yaml\n#if [[ -f /etc/s-box/i ]]; then\n#sed -i 's/\"inet6_address\":/\\/\\/&/' /etc/s-box/sing_box_client.json\n#fi\n}\n\ncfargo_ym(){\ntls=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].tls.enabled')\nif [[ \"$tls\" = \"false\" ]]; then\necho\nyellow \"1：Argo临时隧道\"\nyellow \"2：Argo固定隧道\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-2】：\" menu\nif [ \"$menu\" = \"1\" ]; then\ncfargo\nelif [ \"$menu\" = \"2\" ]; then\ncfargoym\nelse\nchangeserv\nfi\nelse\nyellow \"因vmess开启了tls，Argo隧道功能不可用\" && sleep 2\nfi\n}\n\ncloudflaredargo(){\nif [ ! -e /etc/s-box/cloudflared ]; then\ncase $(uname -m) in\naarch64) cpu=arm64;;\nx86_64) cpu=amd64;;\nesac\ncurl -L -o /etc/s-box/cloudflared -# --retry 2 https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-$cpu\n#curl -L -o /etc/s-box/cloudflared -# --retry 2 https://gitlab.com/rwkgyg/sing-box-yg/-/raw/main/$cpu\nchmod +x /etc/s-box/cloudflared\nfi\n}\n\ncfargoym(){\necho\nif [[ -f /etc/s-box/sbargotoken.log && -f /etc/s-box/sbargoym.log ]]; then\ngreen \"当前Argo固定隧道域名：$(cat /etc/s-box/sbargoym.log 2>/dev/null)\"\ngreen \"当前Argo固定隧道Token：$(cat /etc/s-box/sbargotoken.log 2>/dev/null)\"\nfi\necho\ngreen \"请确保Cloudflare官网 --- Zero Trust --- Networks --- Tunnels已设置完成\"\nyellow \"1：重置/设置Argo固定隧道域名\"\nyellow \"2：停止Argo固定隧道\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-2】：\" menu\nif [ \"$menu\" = \"1\" ]; then\ncloudflaredargo\nreadp \"输入Argo固定隧道Token: \" argotoken\nreadp \"输入Argo固定隧道域名: \" argoym\nif [[ -n $(ps -e | grep cloudflared) ]]; then\nkill -15 $(cat /etc/s-box/sbargoympid.log 2>/dev/null) >/dev/null 2>&1\nfi\necho\nif [[ -n \"${argotoken}\" && -n \"${argoym}\" ]]; then\nnohup setsid /etc/s-box/cloudflared tunnel --no-autoupdate --edge-ip-version auto --protocol http2 run --token ${argotoken} >/dev/null 2>&1 & echo \"$!\" > /etc/s-box/sbargoympid.log\nsleep 20\nfi\necho ${argoym} > /etc/s-box/sbargoym.log\necho ${argotoken} > /etc/s-box/sbargotoken.log\ncrontab -l > /tmp/crontab.tmp\nsed -i '/sbargoympid/d' /tmp/crontab.tmp\necho '@reboot /bin/bash -c \"nohup setsid /etc/s-box/cloudflared tunnel --no-autoupdate --edge-ip-version auto --protocol http2 run --token $(cat /etc/s-box/sbargotoken.log 2>/dev/null) >/dev/null 2>&1 & pid=\\$! && echo \\$pid > /etc/s-box/sbargoympid.log\"' >> /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\nargo=$(cat /etc/s-box/sbargoym.log 2>/dev/null)\nblue \"Argo固定隧道设置完成，固定域名：$argo\"\nelif [ \"$menu\" = \"2\" ]; then\nkill -15 $(cat /etc/s-box/sbargoympid.log 2>/dev/null) >/dev/null 2>&1\ncrontab -l > /tmp/crontab.tmp\nsed -i '/sbargoympid/d' /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\nrm -rf /etc/s-box/vm_ws_argogd.txt\ngreen \"Argo固定隧道已停止\"\nelse\ncfargo_ym\nfi\n}\n\ncfargo(){\necho\nyellow \"1：重置Argo临时隧道域名\"\nyellow \"2：停止Argo临时隧道\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-2】：\" menu\nif [ \"$menu\" = \"1\" ]; then\ncloudflaredargo\ni=0\nwhile [ $i -le 4 ]; do let i++\nyellow \"第$i次刷新验证Cloudflared Argo临时隧道域名有效性，请稍等……\"\nif [[ -n $(ps -e | grep cloudflared) ]]; then\nkill -15 $(cat /etc/s-box/sbargopid.log 2>/dev/null) >/dev/null 2>&1\nfi\n/etc/s-box/cloudflared tunnel --url http://localhost:$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].listen_port') --edge-ip-version auto --no-autoupdate --protocol http2 > /etc/s-box/argo.log 2>&1 &\necho \"$!\" > /etc/s-box/sbargopid.log\nsleep 20\nif [[ -n $(curl -sL https://$(cat /etc/s-box/argo.log 2>/dev/null | grep -a trycloudflare.com | awk 'NR==2{print}' | awk -F// '{print $2}' | awk '{print $1}')/ -I | awk 'NR==1 && /404|400|503/') ]]; then\nargo=$(cat /etc/s-box/argo.log 2>/dev/null | grep -a trycloudflare.com | awk 'NR==2{print}' | awk -F// '{print $2}' | awk '{print $1}')\nblue \"Argo临时隧道申请成功，域名验证有效：$argo\" && sleep 2\nbreak\nfi\nif [ $i -eq 5 ]; then\necho\nyellow \"Argo临时域名验证暂不可用，稍后可能会自动恢复，或者申请重置\" && sleep 3\nfi\ndone\ncrontab -l > /tmp/crontab.tmp\nsed -i '/sbargopid/d' /tmp/crontab.tmp\necho '@reboot /bin/bash -c \"/etc/s-box/cloudflared tunnel --url http://localhost:$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].listen_port') --edge-ip-version auto --no-autoupdate --protocol http2 > /etc/s-box/argo.log 2>&1 & pid=\\$! && echo \\$pid > /etc/s-box/sbargopid.log\"' >> /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\nelif [ \"$menu\" = \"2\" ]; then\nkill -15 $(cat /etc/s-box/sbargopid.log 2>/dev/null) >/dev/null 2>&1\ncrontab -l > /tmp/crontab.tmp\nsed -i '/sbargopid/d' /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\nrm -rf /etc/s-box/vm_ws_argols.txt\ngreen \"Argo临时隧道已停止\"\nelse\ncfargo_ym\nfi\n}\n\ninstsllsingbox(){\nif [[ -f '/etc/systemd/system/sing-box.service' ]]; then\nred \"已安装Sing-box服务，无法再次安装\" && exit\nfi\nmkdir -p /etc/s-box\nv6\nopenyn\ninssb\ninscertificate\ninsport\nsleep 2\necho\nblue \"Vless-reality相关key与id将自动生成……\"\nkey_pair=$(/etc/s-box/sing-box generate reality-keypair)\nprivate_key=$(echo \"$key_pair\" | awk '/PrivateKey/ {print $2}' | tr -d '\"')\npublic_key=$(echo \"$key_pair\" | awk '/PublicKey/ {print $2}' | tr -d '\"')\necho \"$public_key\" > /etc/s-box/public.key\nshort_id=$(/etc/s-box/sing-box generate rand --hex 4)\nwget -q -O /root/geoip.db https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip.db\nwget -q -O /root/geosite.db https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.db\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\ngreen \"五、自动生成warp-wireguard出站账户\" && sleep 2\nwarpwg\ninssbjsonser && sbservice && sbactive\n#curl -sL https://gitlab.com/rwkgyg/sing-box-yg/-/raw/main/version/version | awk -F \"更新内容\" '{print $1}' | head -n 1 > /etc/s-box/v\ncurl -sL https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/version | awk -F \"更新内容\" '{print $1}' | head -n 1 > /etc/s-box/v\nclear\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nlnsb && blue \"Sing-box-yg脚本安装成功，脚本快捷方式：sb\" && cronsb && sleep 1\nsbshare\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nblue \"Hysteria2/Tuic5自定义V2rayN配置、Clash-Meta/Sing-box客户端配置及私有订阅链接，请选择9查看\"\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\n}\n\nchangeym(){\n[ -f /root/ygkkkca/ca.log ] && ymzs=\"$yellow切换为域名证书：$(cat /root/ygkkkca/ca.log 2>/dev/null)$plain\" || ymzs=\"$yellow未申请域名证书，无法切换$plain\"\nvl_na=\"正在使用的域名：$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[0].tls.server_name')。$yellow更换符合reality要求的域名，不支持证书域名$plain\"\ntls=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].tls.enabled')\n[[ \"$tls\" = \"false\" ]] && vm_na=\"当前已关闭TLS。$ymzs ${yellow}将开启TLS，Argo隧道将不支持开启${plain}\" || vm_na=\"正在使用的域名证书：$(cat /root/ygkkkca/ca.log 2>/dev/null)。$yellow切换为关闭TLS，Argo隧道将可用$plain\"\nhy2_sniname=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[2].tls.key_path')\n[[ \"$hy2_sniname\" = '/etc/s-box/private.key' ]] && hy2_na=\"正在使用自签bing证书。$ymzs\" || hy2_na=\"正在使用的域名证书：$(cat /root/ygkkkca/ca.log 2>/dev/null)。$yellow切换为自签bing证书$plain\"\ntu5_sniname=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[3].tls.key_path')\n[[ \"$tu5_sniname\" = '/etc/s-box/private.key' ]] && tu5_na=\"正在使用自签bing证书。$ymzs\" || tu5_na=\"正在使用的域名证书：$(cat /root/ygkkkca/ca.log 2>/dev/null)。$yellow切换为自签bing证书$plain\"\necho\ngreen \"请选择要切换证书模式的协议\"\ngreen \"1：vless-reality协议，$vl_na\"\nif [[ -f /root/ygkkkca/ca.log ]]; then\ngreen \"2：vmess-ws协议，$vm_na\"\ngreen \"3：Hysteria2协议，$hy2_na\"\ngreen \"4：Tuic5协议，$tu5_na\"\nelse\nred \"仅支持选项1 (vless-reality)。因未申请域名证书，vmess-ws、Hysteria-2、Tuic-v5的证书切换选项暂不予显示\"\nfi\ngreen \"0：返回上层\"\nreadp \"请选择：\" menu\nif [ \"$menu\" = \"1\" ]; then\nreadp \"请输入vless-reality域名 (回车使用www.yahoo.com)：\" menu\nym_vl_re=${menu:-www.yahoo.com}\na=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[0].tls.server_name')\nb=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[0].tls.reality.handshake.server')\nc=$(cat /etc/s-box/vl_reality.txt | cut -d'=' -f5 | cut -d'&' -f1)\nsed -i \"23s/$a/$ym_vl_re/\" /etc/s-box/sb.json\nsed -i \"27s/$b/$ym_vl_re/\" /etc/s-box/sb.json\nrestartsb\nblue \"设置完毕，请回到主菜单进入选项9更新节点配置\"\nelif [ \"$menu\" = \"2\" ]; then\nif [ -f /root/ygkkkca/ca.log ]; then\na=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].tls.enabled')\n[ \"$a\" = \"true\" ] && a_a=false || a_a=true\nb=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].tls.server_name')\n[ \"$b\" = \"www.bing.com\" ] && b_b=$(cat /root/ygkkkca/ca.log) || b_b=$(cat /root/ygkkkca/ca.log)\nc=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].tls.certificate_path')\nd=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].tls.key_path')\nif [ \"$d\" = '/etc/s-box/private.key' ]; then\nc_c='/root/ygkkkca/cert.crt'\nd_d='/root/ygkkkca/private.key'\nelse\nc_c='/etc/s-box/cert.pem'\nd_d='/etc/s-box/private.key'\nfi\nsed -i \"55s#$a#$a_a#\" /etc/s-box/sb.json\nsed -i \"56s#$b#$b_b#\" /etc/s-box/sb.json\nsed -i \"57s#$c#$c_c#\" /etc/s-box/sb.json\nsed -i \"58s#$d#$d_d#\" /etc/s-box/sb.json\nrestartsb\nblue \"设置完毕，请回到主菜单进入选项9更新节点配置\"\necho\ntls=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].tls.enabled')\nvm_port=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].listen_port')\nblue \"当前Vmess-ws(tls)的端口：$vm_port\"\n[[ \"$tls\" = \"false\" ]] && blue \"切记：可进入主菜单选项4-2，将Vmess-ws端口更改为任意7个80系端口(80、8080、8880、2052、2082、2086、2095)，可实现CDN优选IP\" || blue \"切记：可进入主菜单选项4-2，将Vmess-ws-tls端口更改为任意6个443系的端口(443、8443、2053、2083、2087、2096)，可实现CDN优选IP\"\necho\nelse\nred \"当前未申请域名证书，不可切换。主菜单选择12，执行Acme证书申请\" && sleep 2 && sb\nfi\nelif [ \"$menu\" = \"3\" ]; then\nif [ -f /root/ygkkkca/ca.log ]; then\nc=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[2].tls.certificate_path')\nd=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[2].tls.key_path')\nif [ \"$d\" = '/etc/s-box/private.key' ]; then\nc_c='/root/ygkkkca/cert.crt'\nd_d='/root/ygkkkca/private.key'\nelse\nc_c='/etc/s-box/cert.pem'\nd_d='/etc/s-box/private.key'\nfi\nsed -i \"79s#$c#$c_c#\" /etc/s-box/sb.json\nsed -i \"80s#$d#$d_d#\" /etc/s-box/sb.json\nrestartsb\nblue \"设置完毕，请回到主菜单进入选项9更新节点配置\"\nelse\nred \"当前未申请域名证书，不可切换。主菜单选择12，执行Acme证书申请\" && sleep 2 && sb\nfi\nelif [ \"$menu\" = \"4\" ]; then\nif [ -f /root/ygkkkca/ca.log ]; then\nc=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[3].tls.certificate_path')\nd=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[3].tls.key_path')\nif [ \"$d\" = '/etc/s-box/private.key' ]; then\nc_c='/root/ygkkkca/cert.crt'\nd_d='/root/ygkkkca/private.key'\nelse\nc_c='/etc/s-box/cert.pem'\nd_d='/etc/s-box/private.key'\nfi\nsed -i \"102s#$c#$c_c#\" /etc/s-box/sb.json\nsed -i \"103s#$d#$d_d#\" /etc/s-box/sb.json\nrestartsb\nblue \"设置完毕，请回到主菜单进入选项9更新节点配置\"\nelse\nred \"当前未申请域名证书，不可切换。主菜单选择12，执行Acme证书申请\" && sleep 2 && sb\nfi\nelse\nsb\nfi\n}\n\nallports(){\nvl_port=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[0].listen_port')\nvm_port=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].listen_port')\nhy2_port=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[2].listen_port')\ntu5_port=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[3].listen_port')\nhy2_ports=$(iptables -t nat -nL --line 2>/dev/null | grep -w \"$hy2_port\" | awk '{print $8}' | sed 's/dpts://; s/dpt://' | tr '\\n' ',' | sed 's/,$//')\ntu5_ports=$(iptables -t nat -nL --line 2>/dev/null | grep -w \"$tu5_port\" | awk '{print $8}' | sed 's/dpts://; s/dpt://' | tr '\\n' ',' | sed 's/,$//')\n[[ -n $hy2_ports ]] && hy2zfport=\"$hy2_ports\" || hy2zfport=\"未添加\"\n[[ -n $tu5_ports ]] && tu5zfport=\"$tu5_ports\" || tu5zfport=\"未添加\"\n}\n\nchangeport(){\nsbactive\nallports\nfports(){\nreadp \"\\n请输入转发的端口范围 (1000-65535范围内，格式为 小数字:大数字)：\" rangeport\nif [[ $rangeport =~ ^([1-9][0-9]{3,4}:[1-9][0-9]{3,4})$ ]]; then\nb=${rangeport%%:*}\nc=${rangeport##*:}\nif [[ $b -ge 1000 && $b -le 65535 && $c -ge 1000 && $c -le 65535 && $b -lt $c ]]; then\niptables -t nat -A PREROUTING -p udp --dport $rangeport -j DNAT --to-destination :$port\nip6tables -t nat -A PREROUTING -p udp --dport $rangeport -j DNAT --to-destination :$port\nnetfilter-persistent save >/dev/null 2>&1\nservice iptables save >/dev/null 2>&1\nblue \"已确认转发的端口范围：$rangeport\"\nelse\nred \"输入的端口范围不在有效范围内\" && fports\nfi\nelse\nred \"输入格式不正确。格式为 小数字:大数字\" && fports\nfi\necho\n}\nfport(){\nreadp \"\\n请输入一个转发的端口 (1000-65535范围内)：\" onlyport\nif [[ $onlyport -ge 1000 && $onlyport -le 65535 ]]; then\niptables -t nat -A PREROUTING -p udp --dport $onlyport -j DNAT --to-destination :$port\nip6tables -t nat -A PREROUTING -p udp --dport $onlyport -j DNAT --to-destination :$port\nnetfilter-persistent save >/dev/null 2>&1\nservice iptables save >/dev/null 2>&1\nblue \"已确认转发的端口：$onlyport\"\nelse\nblue \"输入的端口不在有效范围内\" && fport\nfi\necho\n}\n\nhy2deports(){\nallports\nhy2_ports=$(echo \"$hy2_ports\" | sed 's/,/,/g')\nIFS=',' read -ra ports <<< \"$hy2_ports\"\nfor port in \"${ports[@]}\"; do\niptables -t nat -D PREROUTING -p udp --dport $port -j DNAT --to-destination :$hy2_port\nip6tables -t nat -D PREROUTING -p udp --dport $port -j DNAT --to-destination :$hy2_port\ndone\nnetfilter-persistent save >/dev/null 2>&1\nservice iptables save >/dev/null 2>&1\n}\ntu5deports(){\nallports\ntu5_ports=$(echo \"$tu5_ports\" | sed 's/,/,/g')\nIFS=',' read -ra ports <<< \"$tu5_ports\"\nfor port in \"${ports[@]}\"; do\niptables -t nat -D PREROUTING -p udp --dport $port -j DNAT --to-destination :$tu5_port\nip6tables -t nat -D PREROUTING -p udp --dport $port -j DNAT --to-destination :$tu5_port\ndone\nnetfilter-persistent save >/dev/null 2>&1\nservice iptables save >/dev/null 2>&1\n}\n\nallports\ngreen \"Vless-reality与Vmess-ws仅能更改唯一的端口，vmess-ws注意Argo端口重置\"\ngreen \"Hysteria2与Tuic5支持更改主端口，也支持增删多个转发端口\"\ngreen \"Hysteria2支持端口跳跃，且与Tuic5都支持多端口复用\"\necho\ngreen \"1：Vless-reality协议 ${yellow}端口:$vl_port${plain}\"\ngreen \"2：Vmess-ws协议 ${yellow}端口:$vm_port${plain}\"\ngreen \"3：Hysteria2协议 ${yellow}端口:$hy2_port  转发多端口: $hy2zfport${plain}\"\ngreen \"4：Tuic5协议 ${yellow}端口:$tu5_port  转发多端口: $tu5zfport${plain}\"\ngreen \"0：返回上层\"\nreadp \"请选择要变更端口的协议【0-4】：\" menu\nif [ \"$menu\" = \"1\" ]; then\nvlport\nsed -i \"14s/$vl_port/$port_vl_re/\" /etc/s-box/sb.json\nrestartsb\nblue \"Vless-reality端口更改完成，可选择9输出配置信息\"\necho\nelif [ \"$menu\" = \"2\" ]; then\nvmport\nsed -i \"41s/$vm_port/$port_vm_ws/\" /etc/s-box/sb.json\nrestartsb\nblue \"Vmess-ws端口更改完成，可选择9输出配置信息\"\ntls=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].tls.enabled')\nif [[ \"$tls\" = \"false\" ]]; then\nblue \"切记：如果Argo使用中，临时隧道必须重置，固定隧道的CF设置界面端口必须修改为$port_vm_ws。\"\nelse\nblue \"当前Argo隧道已不支持开启\"\nfi\necho\nelif [ \"$menu\" = \"3\" ]; then\ngreen \"1：更换Hysteria2主端口 (原多端口自动重置删除)\"\ngreen \"2：添加Hysteria2多端口\"\ngreen \"3：重置删除Hysteria2多端口\"\ngreen \"0：返回上层\"\nreadp \"请选择【0-3】：\" menu\nif [ \"$menu\" = \"1\" ]; then\nif [ -n $hy2_ports ]; then\nhy2deports\nhy2port\nsed -i \"67s/$hy2_port/$port_hy2/\" /etc/s-box/sb.json\nrestartsb\nresult_vl_vm_hy_tu && reshy2 && sb_client\nelse\nhy2port\nsed -i \"67s/$hy2_port/$port_hy2/\" /etc/s-box/sb.json\nrestartsb\nresult_vl_vm_hy_tu && reshy2 && sb_client\nfi\nelif [ \"$menu\" = \"2\" ]; then\ngreen \"1：添加Hysteria2范围端口\"\ngreen \"2：添加Hysteria2单端口\"\ngreen \"0：返回上层\"\nreadp \"请选择【0-2】：\" menu\nif [ \"$menu\" = \"1\" ]; then\nport=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[2].listen_port')\nfports && result_vl_vm_hy_tu && sb_client && changeport\nelif [ \"$menu\" = \"2\" ]; then\nport=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[2].listen_port')\nfport && result_vl_vm_hy_tu && sb_client && changeport\nelse\nchangeport\nfi\nelif [ \"$menu\" = \"3\" ]; then\nif [ -n $hy2_ports ]; then\nhy2deports && result_vl_vm_hy_tu && sb_client && changeport\nelse\nyellow \"Hysteria2未设置多端口\" && changeport\nfi\nelse\nchangeport\nfi\n\nelif [ \"$menu\" = \"4\" ]; then\ngreen \"1：更换Tuic5主端口 (原多端口自动重置删除)\"\ngreen \"2：添加Tuic5多端口\"\ngreen \"3：重置删除Tuic5多端口\"\ngreen \"0：返回上层\"\nreadp \"请选择【0-3】：\" menu\nif [ \"$menu\" = \"1\" ]; then\nif [ -n $tu5_ports ]; then\ntu5deports\ntu5port\nsed -i \"89s/$tu5_port/$port_tu/\" /etc/s-box/sb.json\nrestartsb\nresult_vl_vm_hy_tu && restu5 && sb_client\nelse\ntu5port\nsed -i \"89s/$tu5_port/$port_tu/\" /etc/s-box/sb.json\nrestartsb\nresult_vl_vm_hy_tu && restu5 && sb_client\nfi\nelif [ \"$menu\" = \"2\" ]; then\ngreen \"1：添加Tuic5范围端口\"\ngreen \"2：添加Tuic5单端口\"\ngreen \"0：返回上层\"\nreadp \"请选择【0-2】：\" menu\nif [ \"$menu\" = \"1\" ]; then\nport=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[3].listen_port')\nfports && result_vl_vm_hy_tu && sb_client && changeport\nelif [ \"$menu\" = \"2\" ]; then\nport=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[3].listen_port')\nfport && result_vl_vm_hy_tu && sb_client && changeport\nelse\nchangeport\nfi\nelif [ \"$menu\" = \"3\" ]; then\nif [ -n $tu5_ports ]; then\ntu5deports && result_vl_vm_hy_tu && sb_client && changeport\nelse\nyellow \"Tuic5未设置多端口\" && changeport\nfi\nelse\nchangeport\nfi\nelse\nsb\nfi\n}\n\nchangeuuid(){\necho\nolduuid=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[0].users[0].uuid')\noldvmpath=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].transport.path')\ngreen \"全协议的uuid (密码)：$olduuid\"\ngreen \"Vmess的path路径：$oldvmpath\"\necho\nyellow \"1：自定义全协议的uuid (密码)\"\nyellow \"2：自定义Vmess的path路径\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-2】：\" menu\nif [ \"$menu\" = \"1\" ]; then\nreadp \"输入uuid，必须是uuid格式，不懂就回车(重置并随机生成uuid)：\" menu\nif [ -z \"$menu\" ]; then\nuuid=$(/etc/s-box/sing-box generate uuid)\nelse\nuuid=$menu\nfi\nsed -i \"s/$olduuid/$uuid/g\" /etc/s-box/sb.json\nrestartsb\nblue \"已确认uuid (密码)：${uuid}\" \nblue \"已确认Vmess的path路径：$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].transport.path')\"\nelif [ \"$menu\" = \"2\" ]; then\nreadp \"输入Vmess的path路径，回车表示不变：\" menu\nif [ -z \"$menu\" ]; then\necho\nelse\nvmpath=$menu\nsed -i \"50s#$oldvmpath#$vmpath#g\" /etc/s-box/sb.json\nrestartsb\nfi\nblue \"已确认Vmess的path路径：$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].transport.path')\"\nsbshare\nelse\nchangeserv\nfi\n}\n\nchangeip(){\nv4v6\nchip(){\nrpip=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.outbounds[0].domain_strategy')\nsed -i \"111s/$rpip/$rrpip/g\" /etc/s-box/sb.json\nrestartsb\n}\nreadp \"1. IPV4优先\\n2. IPV6优先\\n3. 仅IPV4\\n4. 仅IPV6\\n请选择：\" choose\nif [[ $choose == \"1\" && -n $v4 ]]; then\nrrpip=\"prefer_ipv4\" && chip && v4_6=\"IPV4优先($v4)\"\nelif [[ $choose == \"2\" && -n $v6 ]]; then\nrrpip=\"prefer_ipv6\" && chip && v4_6=\"IPV6优先($v6)\"\nelif [[ $choose == \"3\" && -n $v4 ]]; then\nrrpip=\"ipv4_only\" && chip && v4_6=\"仅IPV4($v4)\"\nelif [[ $choose == \"4\" && -n $v6 ]]; then\nrrpip=\"ipv6_only\" && chip && v4_6=\"仅IPV6($v6)\"\nelse \nred \"当前不存在你选择的IPV4/IPV6地址，或者输入错误\" && changeip\nfi\nblue \"当前已更换的IP优先级：${v4_6}\" && sb\n}\n\ntgsbshow(){\necho\nyellow \"1：重置/设置Telegram机器人的Token、用户ID\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-1】：\" menu\nif [ \"$menu\" = \"1\" ]; then\nrm -rf /etc/s-box/sbtg.sh\nreadp \"输入Telegram机器人Token: \" token\ntelegram_token=$token\nreadp \"输入Telegram机器人用户ID: \" userid\ntelegram_id=$userid\necho '#!/bin/bash\nexport LANG=en_US.UTF-8\n\ntotal_lines=$(wc -l < /etc/s-box/clash_meta_client.yaml)\nhalf=$((total_lines / 2))\nhead -n $half /etc/s-box/clash_meta_client.yaml > /etc/s-box/clash_meta_client1.txt\ntail -n +$((half + 1)) /etc/s-box/clash_meta_client.yaml > /etc/s-box/clash_meta_client2.txt\n\ntotal_lines=$(wc -l < /etc/s-box/sing_box_client.json)\nquarter=$((total_lines / 4))\nhead -n $quarter /etc/s-box/sing_box_client.json > /etc/s-box/sing_box_client1.txt\ntail -n +$((quarter + 1)) /etc/s-box/sing_box_client.json | head -n $quarter > /etc/s-box/sing_box_client2.txt\ntail -n +$((2 * quarter + 1)) /etc/s-box/sing_box_client.json | head -n $quarter > /etc/s-box/sing_box_client3.txt\ntail -n +$((3 * quarter + 1)) /etc/s-box/sing_box_client.json > /etc/s-box/sing_box_client4.txt\n\nm1=$(cat /etc/s-box/vl_reality.txt 2>/dev/null)\nm2=$(cat /etc/s-box/vm_ws.txt 2>/dev/null)\nm3=$(cat /etc/s-box/vm_ws_argols.txt 2>/dev/null)\nm3_5=$(cat /etc/s-box/vm_ws_argogd.txt 2>/dev/null)\nm4=$(cat /etc/s-box/vm_ws_tls.txt 2>/dev/null)\nm5=$(cat /etc/s-box/hy2.txt 2>/dev/null)\nm6=$(cat /etc/s-box/tuic5.txt 2>/dev/null)\nm7=$(cat /etc/s-box/sing_box_client1.txt 2>/dev/null)\nm7_5=$(cat /etc/s-box/sing_box_client2.txt 2>/dev/null)\nm7_5_5=$(cat /etc/s-box/sing_box_client3.txt 2>/dev/null)\nm7_5_5_5=$(cat /etc/s-box/sing_box_client4.txt 2>/dev/null)\nm8=$(cat /etc/s-box/clash_meta_client1.txt 2>/dev/null)\nm8_5=$(cat /etc/s-box/clash_meta_client2.txt 2>/dev/null)\nm9=$(cat /etc/s-box/sing_box_gitlab.txt 2>/dev/null)\nm10=$(cat /etc/s-box/clash_meta_gitlab.txt 2>/dev/null)\nm11=$(cat /etc/s-box/jh_sub.txt 2>/dev/null)\nmessage_text_m1=$(echo \"$m1\")\nmessage_text_m2=$(echo \"$m2\")\nmessage_text_m3=$(echo \"$m3\")\nmessage_text_m3_5=$(echo \"$m3_5\")\nmessage_text_m4=$(echo \"$m4\")\nmessage_text_m5=$(echo \"$m5\")\nmessage_text_m6=$(echo \"$m6\")\nmessage_text_m7=$(echo \"$m7\")\nmessage_text_m7_5=$(echo \"$m7_5\")\nmessage_text_m7_5_5=$(echo \"$m7_5_5\")\nmessage_text_m7_5_5_5=$(echo \"$m7_5_5_5\")\nmessage_text_m8=$(echo \"$m8\")\nmessage_text_m8_5=$(echo \"$m8_5\")\nmessage_text_m9=$(echo \"$m9\")\nmessage_text_m10=$(echo \"$m10\")\nmessage_text_m11=$(echo \"$m11\")\nMODE=HTML\nURL=\"https://api.telegram.org/bottelegram_token/sendMessage\"\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=🚀【 Vless-reality-vision 分享链接 】：支持v2rayng、nekobox \"$'\"'\"'\\n\\n'\"'\"'\"${message_text_m1}\")\nif [[ -f /etc/s-box/vm_ws.txt ]]; then\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=🚀【 Vmess-ws 分享链接 】：支持v2rayng、nekobox \"$'\"'\"'\\n\\n'\"'\"'\"${message_text_m2}\")\nfi\nif [[ -f /etc/s-box/vm_ws_argols.txt ]]; then\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=🚀【 Vmess-ws(tls)+Argo临时域名分享链接 】：支持v2rayng、nekobox \"$'\"'\"'\\n\\n'\"'\"'\"${message_text_m3}\")\nfi\nif [[ -f /etc/s-box/vm_ws_argogd.txt ]]; then\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=🚀【 Vmess-ws(tls)+Argo固定域名分享链接 】：支持v2rayng、nekobox \"$'\"'\"'\\n\\n'\"'\"'\"${message_text_m3_5}\")\nfi\nif [[ -f /etc/s-box/vm_ws_tls.txt ]]; then\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=🚀【 Vmess-ws-tls 分享链接 】：支持v2rayng、nekobox \"$'\"'\"'\\n\\n'\"'\"'\"${message_text_m4}\")\nfi\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=🚀【 Hysteria-2 分享链接 】：支持nekobox \"$'\"'\"'\\n\\n'\"'\"'\"${message_text_m5}\")\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=🚀【 Tuic-v5 分享链接 】：支持nekobox \"$'\"'\"'\\n\\n'\"'\"'\"${message_text_m6}\")\n\nif [[ -f /etc/s-box/sing_box_gitlab.txt ]]; then\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=🚀【 Sing-box 订阅链接 】：支持SFA、SFW、SFI \"$'\"'\"'\\n\\n'\"'\"'\"${message_text_m9}\")\nelse\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=🚀【 Sing-box 配置文件(4段) 】：支持SFA、SFW、SFI \"$'\"'\"'\\n\\n'\"'\"'\"${message_text_m7}\")\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=${message_text_m7_5}\")\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=${message_text_m7_5_5}\")\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=${message_text_m7_5_5_5}\")\nfi\n\nif [[ -f /etc/s-box/clash_meta_gitlab.txt ]]; then\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=🚀【 Clash-meta 订阅链接 】：支持Clash-meta相关客户端 \"$'\"'\"'\\n\\n'\"'\"'\"${message_text_m10}\")\nelse\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=🚀【 Clash-meta 配置文件(2段) 】：支持Clash-meta相关客户端 \"$'\"'\"'\\n\\n'\"'\"'\"${message_text_m8}\")\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=${message_text_m8_5}\")\nfi\nres=$(timeout 20s curl -s -X POST $URL -d chat_id=telegram_id  -d parse_mode=${MODE} --data-urlencode \"text=🚀【 四合一协议聚合订阅链接 】：支持v2rayng、nekobox \"$'\"'\"'\\n\\n'\"'\"'\"${message_text_m11}\")\n\nif [ $? == 124 ];then\necho TG_api请求超时,请检查网络是否重启完成并是否能够访问TG\nfi\nresSuccess=$(echo \"$res\" | jq -r \".ok\")\nif [[ $resSuccess = \"true\" ]]; then\necho \"TG推送成功\";\nelse\necho \"TG推送失败，请检查TG机器人Token和ID\";\nfi\n' > /etc/s-box/sbtg.sh\nsed -i \"s/telegram_token/$telegram_token/g\" /etc/s-box/sbtg.sh\nsed -i \"s/telegram_id/$telegram_id/g\" /etc/s-box/sbtg.sh\ngreen \"设置完成！请确保TG机器人已处于激活状态！\"\ntgnotice\nelse\nchangeserv\nfi\n}\n\ntgnotice(){\nif [[ -f /etc/s-box/sbtg.sh ]]; then\ngreen \"请稍等5秒，TG机器人准备推送……\"\nsbshare > /dev/null 2>&1\nbash /etc/s-box/sbtg.sh\nelse\nyellow \"未设置TG通知功能\"\nfi\nexit\n}\n\nchangeserv(){\nsbactive\necho\ngreen \"Sing-box配置变更选择如下:\"\nreadp \"1：更换Reality域名伪装地址、切换自签证书与Acme域名证书、开关TLS\\n2：更换全协议UUID(密码)、Vmess-Path路径\\n3：设置Argo临时隧道、固定隧道\\n4：切换IPV4或IPV6的代理优先级\\n5：设置Telegram推送节点通知\\n6：更换Warp-wireguard出站账户、自动优选对端IP\\n7：设置Gitlab订阅分享链接\\n8：设置所有Vmess节点的CDN优选地址\\n0：返回上层\\n请选择【0-8】：\" menu\nif [ \"$menu\" = \"1\" ];then\nchangeym\nelif [ \"$menu\" = \"2\" ];then\nchangeuuid\nelif [ \"$menu\" = \"3\" ];then\ncfargo_ym\nelif [ \"$menu\" = \"4\" ];then\nchangeip\nelif [ \"$menu\" = \"5\" ];then\ntgsbshow\nelif [ \"$menu\" = \"6\" ];then\nchangewg\nelif [ \"$menu\" = \"7\" ];then\ngitlabsub\nelif [ \"$menu\" = \"8\" ];then\nvmesscfadd\nelse \nsb\nfi\n}\n\nvmesscfadd(){\necho\ngreen \"推荐使用稳定的世界大厂或组织的官方CDN域名作为CDN优选地址：\"\nblue \"www.visa.com.sg\"\nblue \"www.wto.org\"\nblue \"www.web.com\"\necho\nyellow \"1：自定义Vmess-ws(tls)主协议节点的CDN优选地址\"\nyellow \"2：针对选项1，重置客户端host/sni域名(IP解析到CF上的域名)\"\nyellow \"3：自定义Vmess-ws(tls)-Argo节点的CDN优选地址\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-3】：\" menu\nif [ \"$menu\" = \"1\" ]; then\necho\ngreen \"请确保VPS的IP已解析到Cloudflare的域名上\"\nif [[ ! -f /etc/s-box/cfymjx.txt ]] 2>/dev/null; then\nreadp \"输入客户端host/sni域名(IP解析到CF上的域名)：\" menu\necho \"$menu\" > /etc/s-box/cfymjx.txt\nfi\necho\nreadp \"输入自定义的优选IP/域名：\" menu\necho \"$menu\" > /etc/s-box/cfvmadd_local.txt\ngreen \"设置成功，选择主菜单9进行节点配置更新\" && sleep 2 && vmesscfadd\nelif  [ \"$menu\" = \"2\" ]; then\nrm -rf /etc/s-box/cfymjx.txt\ngreen \"重置成功，可选择1重新设置\" && sleep 2 && vmesscfadd\nelif  [ \"$menu\" = \"3\" ]; then\nreadp \"输入自定义的优选IP/域名：\" menu\necho \"$menu\" > /etc/s-box/cfvmadd_argo.txt\ngreen \"设置成功，选择主菜单9进行节点配置更新\" && sleep 2 && vmesscfadd\nelse\nchangeserv\nfi\n}\n\ngitlabsub(){\necho\ngreen \"请确保Gitlab官网上已建立项目，已开启推送功能，已获取访问令牌\"\nyellow \"1：重置/设置Gitlab订阅链接\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-1】：\" menu\nif [ \"$menu\" = \"1\" ]; then\ncd /etc/s-box\nreadp \"输入登录邮箱: \" email\nreadp \"输入访问令牌: \" token\nreadp \"输入用户名: \" userid\nreadp \"输入项目名: \" project\necho\ngreen \"多台VPS共用一个令牌及项目名，可创建多个分支订阅链接\"\ngreen \"回车跳过表示不新建，仅使用主分支main订阅链接(首台VPS建议回车跳过)\"\nreadp \"新建分支名称: \" gitlabml\necho\nif [[ -z \"$gitlabml\" ]]; then\ngitlab_ml=''\ngit_sk=main\nrm -rf /etc/s-box/gitlab_ml_ml\nelse\ngitlab_ml=\":${gitlabml}\"\ngit_sk=\"${gitlabml}\"\necho \"${gitlab_ml}\" > /etc/s-box/gitlab_ml_ml\nfi\necho \"$token\" > /etc/s-box/gitlabtoken.txt\nrm -rf /etc/s-box/.git\ngit init >/dev/null 2>&1\ngit add sing_box_client.json clash_meta_client.yaml jh_sub.txt >/dev/null 2>&1\ngit config --global user.email \"${email}\" >/dev/null 2>&1\ngit config --global user.name \"${userid}\" >/dev/null 2>&1\ngit commit -m \"commit_add_$(date +\"%F %T\")\" >/dev/null 2>&1\nbranches=$(git branch)\nif [[ $branches == *master* ]]; then\ngit branch -m master main >/dev/null 2>&1\nfi\ngit remote add origin https://${token}@gitlab.com/${userid}/${project}.git >/dev/null 2>&1\nif [[ $(ls -a | grep '^\\.git$') ]]; then\ncat > /etc/s-box/gitpush.sh <<EOF\n#!/usr/bin/expect\nspawn bash -c \"git push -f origin main${gitlab_ml}\"\nexpect \"Password for 'https://$(cat /etc/s-box/gitlabtoken.txt 2>/dev/null)@gitlab.com':\"\nsend \"$(cat /etc/s-box/gitlabtoken.txt 2>/dev/null)\\r\"\ninteract\nEOF\nchmod +x gitpush.sh\n./gitpush.sh \"git push -f origin main${gitlab_ml}\" cat /etc/s-box/gitlabtoken.txt >/dev/null 2>&1\necho \"https://gitlab.com/api/v4/projects/${userid}%2F${project}/repository/files/sing_box_client.json/raw?ref=${git_sk}&private_token=${token}\" > /etc/s-box/sing_box_gitlab.txt\necho \"https://gitlab.com/api/v4/projects/${userid}%2F${project}/repository/files/clash_meta_client.yaml/raw?ref=${git_sk}&private_token=${token}\" > /etc/s-box/clash_meta_gitlab.txt\necho \"https://gitlab.com/api/v4/projects/${userid}%2F${project}/repository/files/jh_sub.txt/raw?ref=${git_sk}&private_token=${token}\" > /etc/s-box/jh_sub_gitlab.txt\nclsbshow\nelse\nyellow \"设置Gitlab订阅链接失败，请反馈\"\nfi\ncd\nelse\nchangeserv\nfi\n}\n\ngitlabsubgo(){\ncd /etc/s-box\nif [[ $(ls -a | grep '^\\.git$') ]]; then\nif [ -f /etc/s-box/gitlab_ml_ml ]; then\ngitlab_ml=$(cat /etc/s-box/gitlab_ml_ml)\nfi\ngit rm --cached sing_box_client.json clash_meta_client.yaml jh_sub.txt >/dev/null 2>&1\ngit commit -m \"commit_rm_$(date +\"%F %T\")\" >/dev/null 2>&1\ngit add sing_box_client.json clash_meta_client.yaml jh_sub.txt >/dev/null 2>&1\ngit commit -m \"commit_add_$(date +\"%F %T\")\" >/dev/null 2>&1\nchmod +x gitpush.sh\n./gitpush.sh \"git push -f origin main${gitlab_ml}\" cat /etc/s-box/gitlabtoken.txt >/dev/null 2>&1\nclsbshow\nelse\nyellow \"未设置Gitlab订阅链接\"\nfi\ncd\n}\n\nclsbshow(){\ngreen \"当前Sing-box节点已更新并推送\"\ngreen \"Sing-box订阅链接如下：\"\nblue \"$(cat /etc/s-box/sing_box_gitlab.txt 2>/dev/null)\"\necho\ngreen \"Sing-box订阅链接二维码如下：\"\nqrencode -o - -t ANSIUTF8 \"$(cat /etc/s-box/sing_box_gitlab.txt 2>/dev/null)\"\necho\necho \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\ngreen \"当前Clash-meta节点配置已更新并推送\"\ngreen \"Clash-meta订阅链接如下：\"\nblue \"$(cat /etc/s-box/clash_meta_gitlab.txt 2>/dev/null)\"\necho\ngreen \"Clash-meta订阅链接二维码如下：\"\nqrencode -o - -t ANSIUTF8 \"$(cat /etc/s-box/clash_meta_gitlab.txt 2>/dev/null)\"\necho\necho \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\ngreen \"当前聚合订阅节点配置已更新并推送\"\ngreen \"订阅链接如下：\"\nblue \"$(cat /etc/s-box/jh_sub_gitlab.txt 2>/dev/null)\"\necho\nyellow \"可以在网页上输入订阅链接查看配置内容，如果无配置内容，请自检Gitlab相关设置并重置\"\necho\n}\n\nwarpwg(){\nwarpcode(){\nreg(){\nkeypair=$(openssl genpkey -algorithm X25519|openssl pkey -text -noout)\nprivate_key=$(echo \"$keypair\" | awk '/priv:/{flag=1; next} /pub:/{flag=0} flag' | tr -d '[:space:]' | xxd -r -p | base64)\npublic_key=$(echo \"$keypair\" | awk '/pub:/{flag=1} flag' | tr -d '[:space:]' | xxd -r -p | base64)\ncurl -X POST 'https://api.cloudflareclient.com/v0a2158/reg' -sL --tlsv1.3 \\\n-H 'CF-Client-Version: a-7.21-0721' -H 'Content-Type: application/json' \\\n-d \\\n'{\n\"key\":\"'${public_key}'\",\n\"tos\":\"'$(date +\"%Y-%m-%dT%H:%M:%S.000Z\")'\"\n}' \\\n| python3 -m json.tool | sed \"/\\\"account_type\\\"/i\\         \\\"private_key\\\": \\\"$private_key\\\",\"\n}\nreserved(){\nreserved_str=$(echo \"$warp_info\" | grep 'client_id' | cut -d\\\" -f4)\nreserved_hex=$(echo \"$reserved_str\" | base64 -d | xxd -p)\nreserved_dec=$(echo \"$reserved_hex\" | fold -w2 | while read HEX; do printf '%d ' \"0x${HEX}\"; done | awk '{print \"[\"$1\", \"$2\", \"$3\"]\"}')\necho -e \"{\\n    \\\"reserved_dec\\\": $reserved_dec,\"\necho -e \"    \\\"reserved_hex\\\": \\\"0x$reserved_hex\\\",\"\necho -e \"    \\\"reserved_str\\\": \\\"$reserved_str\\\"\\n}\"\n}\nresult() {\necho \"$warp_reserved\" | grep -P \"reserved\" | sed \"s/ //g\" | sed 's/:\"/: \"/g' | sed 's/:\\[/: \\[/g' | sed 's/\\([0-9]\\+\\),\\([0-9]\\+\\),\\([0-9]\\+\\)/\\1, \\2, \\3/' | sed 's/^\"/    \"/g' | sed 's/\"$/\",/g'\necho \"$warp_info\" | grep -P \"(private_key|public_key|\\\"v4\\\": \\\"172.16.0.2\\\"|\\\"v6\\\": \\\"2)\" | sed \"s/ //g\" | sed 's/:\"/: \"/g' | sed 's/^\"/    \"/g'\necho \"}\"\n}\nwarp_info=$(reg) \nwarp_reserved=$(reserved) \nresult\n}\noutput=$(warpcode)\nif ! echo \"$output\" 2>/dev/null | grep -w \"private_key\" > /dev/null; then\nv6=2606:4700:110:8f20:f22e:2c8d:d8ee:fe7\npvk=SGU6hx3CJAWGMr6XYoChvnrKV61hxAw2S4VlgBAxzFs=\nres=[15,242,244]\nelse\npvk=$(echo \"$output\" | sed -n 4p | awk '{print $2}' | tr -d ' \"' | sed 's/.$//')\nv6=$(echo \"$output\" | sed -n 7p | awk '{print $2}' | tr -d ' \"')\nres=$(echo \"$output\" | sed -n 1p | awk -F\":\" '{print $NF}' | tr -d ' ' | sed 's/.$//')\nfi\nblue \"Private_key私钥：$pvk\"\nblue \"IPV6地址：$v6\"\nblue \"reserved值：$res\"\n}\n\nchangewg(){\nwgipv6=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.outbounds[] | select(.type == \"wireguard\") | .local_address[1] | split(\"/\")[0]')\nwgprkey=$(sed 's://.*::g' /etc/s-box/sb.json | jq '.outbounds[] | select(.type == \"wireguard\") | .private_key' | tr -d '\"')\nwgres=$(sed -n '165s/.*\\[\\(.*\\)\\].*/\\1/p' /etc/s-box/sb.json)\nwgip=$(sed 's://.*::g' /etc/s-box/sb.json | jq '.outbounds[] | select(.type == \"wireguard\") | .server' | tr -d '\"')\nwgpo=$(sed 's://.*::g' /etc/s-box/sb.json | jq '.outbounds[] | select(.type == \"wireguard\") | .server_port' | tr -d '\"')\necho\ngreen \"当前warp-wireguard可更换的参数如下：\"\ngreen \"Private_key私钥：$wgprkey\"\ngreen \"IPV6地址：$wgipv6\"\ngreen \"Reserved值：$wgres\"\ngreen \"对端IP：$wgip:$wgpo\"\necho\nyellow \"1：更换warp-wireguard账户\"\nyellow \"2：自动优选warp-wireguard对端IP\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-2】：\" menu\nif [ \"$menu\" = \"1\" ]; then\ngreen \"最新随机生成普通warp-wireguard账户如下\"\nwarpwg\necho\nreadp \"输入自定义Private_key：\" menu\nsed -i \"163s#$wgprkey#$menu#g\" /etc/s-box/sb.json\nreadp \"输入自定义IPV6地址：\" menu\nsed -i \"161s/$wgipv6/$menu/g\" /etc/s-box/sb.json\nreadp \"输入自定义Reserved值 (格式：数字,数字,数字)，如无值则回车跳过：\" menu\nif [ -z \"$menu\" ]; then\nmenu=0,0,0\nfi\nsed -i \"165s/$wgres/$menu/g\" /etc/s-box/sb.json\nrestartsb\ngreen \"设置结束\"\ngreen \"可以先在选项5-1或5-2使用完整域名分流：cloudflare.com\"\ngreen \"然后使用任意节点打开网页https://cloudflare.com/cdn-cgi/trace，查看当前WARP账户类型\"\nelif  [ \"$menu\" = \"2\" ]; then\ngreen \"请稍等……更新中……\"\nif [ -z $(curl -s4m5 icanhazip.com -k) ]; then\ncurl -sSL https://gitlab.com/rwkgyg/CFwarp/raw/main/point/endip.sh -o endip.sh && chmod +x endip.sh && (echo -e \"1\\n2\\n\") | bash endip.sh > /dev/null 2>&1\nnwgip=$(awk -F, 'NR==2 {print $1}' /root/result.csv 2>/dev/null | grep -o '\\[.*\\]' | tr -d '[]')\nnwgpo=$(awk -F, 'NR==2 {print $1}' /root/result.csv 2>/dev/null | awk -F \"]\" '{print $2}' | tr -d ':')\nelse\ncurl -sSL https://gitlab.com/rwkgyg/CFwarp/raw/main/point/endip.sh -o endip.sh && chmod +x endip.sh && (echo -e \"1\\n1\\n\") | bash endip.sh > /dev/null 2>&1\nnwgip=$(awk -F, 'NR==2 {print $1}' /root/result.csv 2>/dev/null | awk -F: '{print $1}')\nnwgpo=$(awk -F, 'NR==2 {print $1}' /root/result.csv 2>/dev/null | awk -F: '{print $2}')\nfi\na=$(cat /root/result.csv 2>/dev/null | awk -F, '$3!=\"timeout ms\" {print} ' | sed -n '2p' | awk -F ',' '{print $2}')\nif [[ -z $a || $a = \"100.00%\" ]]; then\nif [[ -z $(curl -s4m5 icanhazip.com -k) ]]; then\nnwgip=2606:4700:d0::a29f:c001\nnwgpo=2408\nelse\nnwgip=162.159.192.1\nnwgpo=2408\nfi\nfi\nsed -i \"157s#$wgip#$nwgip#g\" /etc/s-box/sb.json\nsed -i \"158s#$wgpo#$nwgpo#g\" /etc/s-box/sb.json\nrestartsb\nrm -rf /root/result.csv /root/endip.sh \necho\ngreen \"优选完毕，当前使用的对端IP：$nwgip:$nwgpo\"\nelse\nchangeserv\nfi\n}\n\nsbymfl(){\nsbport=$(cat /etc/s-box/sbwpph.log 2>/dev/null | awk '{print $3}' | awk -F\":\" '{print $NF}') \nsbport=${sbport:-'40000'}\nresv1=$(curl -s --socks5 localhost:$sbport icanhazip.com)\nresv2=$(curl -sx socks5h://localhost:$sbport icanhazip.com)\nif [[ -z $resv1 && -z $resv2 ]]; then\nwarp_s4_ip='Socks5-IPV4未启动，黑名单模式'\nwarp_s6_ip='Socks5-IPV6未启动，黑名单模式'\nelse\nwarp_s4_ip='Socks5-IPV4可用'\nwarp_s6_ip='Socks5-IPV6自测'\nfi\nv4v6\nif [[ -z $v4 ]]; then\nvps_ipv4='无本地IPV4，黑名单模式'      \nvps_ipv6=\"当前IP：$v6\"\nelif [[ -n $v4 &&  -n $v6 ]]; then\nvps_ipv4=\"当前IP：$v4\"    \nvps_ipv6=\"当前IP：$v6\"\nelse\nvps_ipv4=\"当前IP：$v4\"    \nvps_ipv6='无本地IPV6，黑名单模式'\nfi\nunset swg4 swd4 swd6 swg6 ssd4 ssg4 ssd6 ssg6 sad4 sag4 sad6 sag6\nwd4=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.route.rules[1].domain | join(\" \")')\nwg4=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.route.rules[1].geosite | join(\" \")' 2>/dev/null)\nif [[ \"$wd4\" == \"yg_kkk\" && (\"$wg4\" == \"yg_kkk\" || -z \"$wg4\") ]]; then\nwfl4=\"${yellow}【warp出站IPV4可用】未分流${plain}\"\nelse\nif [[ \"$wd4\" != \"yg_kkk\" ]]; then\nswd4=\"$wd4 \"\nfi\nif [[ \"$wg4\" != \"yg_kkk\" ]]; then\nswg4=$wg4\nfi\nwfl4=\"${yellow}【warp出站IPV4可用】已分流：$swd4$swg4${plain} \"\nfi\n\nwd6=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.route.rules[2].domain | join(\" \")')\nwg6=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.route.rules[2].geosite | join(\" \")' 2>/dev/null)\nif [[ \"$wd6\" == \"yg_kkk\" && (\"$wg6\" == \"yg_kkk\"|| -z \"$wg6\") ]]; then\nwfl6=\"${yellow}【warp出站IPV6自测】未分流${plain}\"\nelse\nif [[ \"$wd6\" != \"yg_kkk\" ]]; then\nswd6=\"$wd6 \"\nfi\nif [[ \"$wg6\" != \"yg_kkk\" ]]; then\nswg6=$wg6\nfi\nwfl6=\"${yellow}【warp出站IPV6自测】已分流：$swd6$swg6${plain} \"\nfi\n\nsd4=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.route.rules[3].domain | join(\" \")')\nsg4=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.route.rules[3].geosite | join(\" \")' 2>/dev/null)\nif [[ \"$sd4\" == \"yg_kkk\" && (\"$sg4\" == \"yg_kkk\" || -z \"$sg4\") ]]; then\nsfl4=\"${yellow}【$warp_s4_ip】未分流${plain}\"\nelse\nif [[ \"$sd4\" != \"yg_kkk\" ]]; then\nssd4=\"$sd4 \"\nfi\nif [[ \"$sg4\" != \"yg_kkk\" ]]; then\nssg4=$sg4\nfi\nsfl4=\"${yellow}【$warp_s4_ip】已分流：$ssd4$ssg4${plain} \"\nfi\n\nsd6=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.route.rules[4].domain | join(\" \")')\nsg6=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.route.rules[4].geosite | join(\" \")' 2>/dev/null)\nif [[ \"$sd6\" == \"yg_kkk\" && (\"$sg6\" == \"yg_kkk\" || -z \"$sg6\") ]]; then\nsfl6=\"${yellow}【$warp_s6_ip】未分流${plain}\"\nelse\nif [[ \"$sd6\" != \"yg_kkk\" ]]; then\nssd6=\"$sd6 \"\nfi\nif [[ \"$sg6\" != \"yg_kkk\" ]]; then\nssg6=$sg6\nfi\nsfl6=\"${yellow}【$warp_s6_ip】已分流：$ssd6$ssg6${plain} \"\nfi\n\nad4=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.route.rules[5].domain | join(\" \")')\nag4=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.route.rules[5].geosite | join(\" \")' 2>/dev/null)\nif [[ \"$ad4\" == \"yg_kkk\" && (\"$ag4\" == \"yg_kkk\" || -z \"$ag4\") ]]; then\nadfl4=\"${yellow}【$vps_ipv4】未分流${plain}\" \nelse\nif [[ \"$ad4\" != \"yg_kkk\" ]]; then\nsad4=\"$ad4 \"\nfi\nif [[ \"$ag4\" != \"yg_kkk\" ]]; then\nsag4=$ag4\nfi\nadfl4=\"${yellow}【$vps_ipv4】已分流：$sad4$sag4${plain} \"\nfi\n\nad6=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.route.rules[6].domain | join(\" \")')\nag6=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.route.rules[6].geosite | join(\" \")' 2>/dev/null)\nif [[ \"$ad6\" == \"yg_kkk\" && (\"$ag6\" == \"yg_kkk\" || -z \"$ag6\") ]]; then\nadfl6=\"${yellow}【$vps_ipv6】未分流${plain}\" \nelse\nif [[ \"$ad6\" != \"yg_kkk\" ]]; then\nsad6=\"$ad6 \"\nfi\nif [[ \"$ag6\" != \"yg_kkk\" ]]; then\nsag6=$ag6\nfi\nadfl6=\"${yellow}【$vps_ipv6】已分流：$sad6$sag6${plain} \"\nfi\n}\n\nchangefl(){\nsbactive\ngreen \"对所有协议进行统一的域名分流\"\nyellow \"warp-wireguard默认开启，IPV4与IPV6可用 (选项1与2)\"\nyellow \"socks5需要在VPS安装warp官方客户端或者WARP-plus-Socks5-赛风VPN (选项3与4)\"\nyellow \"VPS本地出站分流(选项5与6)\"\necho\nsbnh=$(/etc/s-box/sing-box version | awk '/version/{print $NF}' | cut -d '.' -f 1,2)\n[ $sbnh = 1.10 ] && blue \"恭喜！当前Sing-box内核支持geosite分流方式\" || blue \"遗憾！当前Sing-box内核不支持geosite分流方式。如要支持，请切换1.10系列内核\"\nyellow \"注意：\"\nyellow \"一、完整域名方式只能填完整域名 (例：谷歌网站填写：www.google.com)\"\nyellow \"二、geosite方式须填写geosite规则名 (例：奈飞填写：netflix ；迪士尼填写：disney ；ChatGPT填写：openai ；全局且绕过中国填写：geolocation-!cn)\"\nyellow \"三、同一个完整域名或者geosite切勿重复分流\"\nyellow \"四、如该分流通道无网络，所填分流为黑名单模式，即屏蔽该网站访问\"\nchangef\n}\n\nchangef(){\nsbnh=$(/etc/s-box/sing-box version | awk '/version/{print $NF}' | cut -d '.' -f 1,2)\nsbymfl\necho\ngreen \"1：重置warp-wireguard-ipv4分流域名 $wfl4\"\ngreen \"2：重置warp-wireguard-ipv6分流域名 $wfl6\"\ngreen \"3：重置warp-socks5-ipv4分流域名 $sfl4\"\ngreen \"4：重置warp-socks5-ipv6分流域名 $sfl6\"\ngreen \"5：重置VPS本地ipv4分流域名 $adfl4\"\ngreen \"6：重置VPS本地ipv6分流域名 $adfl6\"\ngreen \"0：返回上层\"\necho\nreadp \"请选择【0-6】：\" menu\n\nif [ \"$menu\" = \"1\" ]; then\nreadp \"1：使用完整域名方式\\n2：使用geosite方式\\n3：返回上层\\n请选择：\" menu\nif [ \"$menu\" = \"1\" ]; then\nreadp \"每个域名之间留空格，回车跳过表示重置清空warp-wireguard-ipv4的完整域名方式的分流通道)：\" w4flym\nif [ -z \"$w4flym\" ]; then\nw4flym='\"yg_kkk\"'\nelse\nw4flym=\"$(echo \"$w4flym\" | sed 's/ /\",\"/g')\"\nw4flym=\"\\\"$w4flym\\\"\"\nfi\nsed -i \"184s/.*/$w4flym/\" /etc/s-box/sb.json\nrestartsb\nchangef\nelif [ \"$menu\" = \"2\" ]; then\nif [ $sbnh = 1.10 ]; then\nreadp \"每个域名之间留空格，回车跳过表示重置清空warp-wireguard-ipv4的geosite方式的分流通道)：\" w4flym\nif [ -z \"$w4flym\" ]; then\nw4flym='\"yg_kkk\"'\nelse\nw4flym=\"$(echo \"$w4flym\" | sed 's/ /\",\"/g')\"\nw4flym=\"\\\"$w4flym\\\"\"\nfi\nsed -i \"187s/.*/$w4flym/\" /etc/s-box/sb.json\nrestartsb\nchangef\nelse\nyellow \"遗憾！当前Sing-box内核不支持geosite分流方式。如要支持，请切换1.10系列内核\" && exit\nfi\nelse\nchangef\nfi\n\nelif [ \"$menu\" = \"2\" ]; then\nreadp \"1：使用完整域名方式\\n2：使用geosite方式\\n3：返回上层\\n请选择：\" menu\nif [ \"$menu\" = \"1\" ]; then\nreadp \"每个域名之间留空格，回车跳过表示重置清空warp-wireguard-ipv6的完整域名方式的分流通道：\" w6flym\nif [ -z \"$w6flym\" ]; then\nw6flym='\"yg_kkk\"'\nelse\nw6flym=\"$(echo \"$w6flym\" | sed 's/ /\",\"/g')\"\nw6flym=\"\\\"$w6flym\\\"\"\nfi\nsed -i \"193s/.*/$w6flym/\" /etc/s-box/sb.json\nrestartsb\nchangef\nelif [ \"$menu\" = \"2\" ]; then\nif [ $sbnh = 1.10 ]; then\nreadp \"每个域名之间留空格，回车跳过表示重置清空warp-wireguard-ipv6的geosite方式的分流通道：\" w6flym\nif [ -z \"$w6flym\" ]; then\nw6flym='\"yg_kkk\"'\nelse\nw6flym=\"$(echo \"$w6flym\" | sed 's/ /\",\"/g')\"\nw6flym=\"\\\"$w6flym\\\"\"\nfi\nsed -i \"196s/.*/$w6flym/\" /etc/s-box/sb.json\nrestartsb\nchangef\nelse\nyellow \"遗憾！当前Sing-box内核不支持geosite分流方式。如要支持，请切换1.10系列内核\" && exit\nfi\nelse\nchangef\nfi\n\nelif [ \"$menu\" = \"3\" ]; then\nreadp \"1：使用完整域名方式\\n2：使用geosite方式\\n3：返回上层\\n请选择：\" menu\nif [ \"$menu\" = \"1\" ]; then\nreadp \"每个域名之间留空格，回车跳过表示重置清空warp-socks5-ipv4的完整域名方式的分流通道：\" s4flym\nif [ -z \"$s4flym\" ]; then\ns4flym='\"yg_kkk\"'\nelse\ns4flym=\"$(echo \"$s4flym\" | sed 's/ /\",\"/g')\"\ns4flym=\"\\\"$s4flym\\\"\"\nfi\nsed -i \"202s/.*/$s4flym/\" /etc/s-box/sb.json\nrestartsb\nchangef\nelif [ \"$menu\" = \"2\" ]; then\nif [ $sbnh = 1.10 ]; then\nreadp \"每个域名之间留空格，回车跳过表示重置清空warp-socks5-ipv4的geosite方式的分流通道：\" s4flym\nif [ -z \"$s4flym\" ]; then\ns4flym='\"yg_kkk\"'\nelse\ns4flym=\"$(echo \"$s4flym\" | sed 's/ /\",\"/g')\"\ns4flym=\"\\\"$s4flym\\\"\"\nfi\nsed -i \"205s/.*/$s4flym/\" /etc/s-box/sb.json\nrestartsb\nchangef\nelse\nyellow \"遗憾！当前Sing-box内核不支持geosite分流方式。如要支持，请切换1.10系列内核\" && exit\nfi\nelse\nchangef\nfi\n\nelif [ \"$menu\" = \"4\" ]; then\nreadp \"1：使用完整域名方式\\n2：使用geosite方式\\n3：返回上层\\n请选择：\" menu\nif [ \"$menu\" = \"1\" ]; then\nreadp \"每个域名之间留空格，回车跳过表示重置清空warp-socks5-ipv6的完整域名方式的分流通道：\" s6flym\nif [ -z \"$s6flym\" ]; then\ns6flym='\"yg_kkk\"'\nelse\ns6flym=\"$(echo \"$s6flym\" | sed 's/ /\",\"/g')\"\ns6flym=\"\\\"$s6flym\\\"\"\nfi\nsed -i \"211s/.*/$s6flym/\" /etc/s-box/sb.json\nrestartsb\nchangef\nelif [ \"$menu\" = \"2\" ]; then\nif [ $sbnh = 1.10 ]; then\nreadp \"每个域名之间留空格，回车跳过表示重置清空warp-socks5-ipv6的geosite方式的分流通道：\" s6flym\nif [ -z \"$s6flym\" ]; then\ns6flym='\"yg_kkk\"'\nelse\ns6flym=\"$(echo \"$s6flym\" | sed 's/ /\",\"/g')\"\ns6flym=\"\\\"$s6flym\\\"\"\nfi\nsed -i \"214s/.*/$s6flym/\" /etc/s-box/sb.json\nrestartsb\nchangef\nelse\nyellow \"遗憾！当前Sing-box内核不支持geosite分流方式。如要支持，请切换1.10系列内核\" && exit\nfi\nelse\nchangef\nfi\n\nelif [ \"$menu\" = \"5\" ]; then\nreadp \"1：使用完整域名方式\\n2：使用geosite方式\\n3：返回上层\\n请选择：\" menu\nif [ \"$menu\" = \"1\" ]; then\nreadp \"每个域名之间留空格，回车跳过表示重置清空VPS本地ipv4的完整域名方式的分流通道：\" ad4flym\nif [ -z \"$ad4flym\" ]; then\nad4flym='\"yg_kkk\"'\nelse\nad4flym=\"$(echo \"$ad4flym\" | sed 's/ /\",\"/g')\"\nad4flym=\"\\\"$ad4flym\\\"\"\nfi\nsed -i \"220s/.*/$ad4flym/\" /etc/s-box/sb.json\nrestartsb\nchangef\nelif [ \"$menu\" = \"2\" ]; then\nif [ $sbnh = 1.10 ]; then\nreadp \"每个域名之间留空格，回车跳过表示重置清空VPS本地ipv4的geosite方式的分流通道：\" ad4flym\nif [ -z \"$ad4flym\" ]; then\nad4flym='\"yg_kkk\"'\nelse\nad4flym=\"$(echo \"$ad4flym\" | sed 's/ /\",\"/g')\"\nad4flym=\"\\\"$ad4flym\\\"\"\nfi\nsed -i \"223s/.*/$ad4flym/\" /etc/s-box/sb.json\nrestartsb\nchangef\nelse\nyellow \"遗憾！当前Sing-box内核不支持geosite分流方式。如要支持，请切换1.10系列内核\" && exit\nfi\nelse\nchangef\nfi\n\nelif [ \"$menu\" = \"6\" ]; then\nreadp \"1：使用完整域名方式\\n2：使用geosite方式\\n3：返回上层\\n请选择：\" menu\nif [ \"$menu\" = \"1\" ]; then\nreadp \"每个域名之间留空格，回车跳过表示重置清空VPS本地ipv6的完整域名方式的分流通道：\" ad6flym\nif [ -z \"$ad6flym\" ]; then\nad6flym='\"yg_kkk\"'\nelse\nad6flym=\"$(echo \"$ad6flym\" | sed 's/ /\",\"/g')\"\nad6flym=\"\\\"$ad6flym\\\"\"\nfi\nsed -i \"229s/.*/$ad6flym/\" /etc/s-box/sb.json\nrestartsb\nchangef\nelif [ \"$menu\" = \"2\" ]; then\nif [ $sbnh = 1.10 ]; then\nreadp \"每个域名之间留空格，回车跳过表示重置清空VPS本地ipv6的geosite方式的分流通道：\" ad6flym\nif [ -z \"$ad6flym\" ]; then\nad6flym='\"yg_kkk\"'\nelse\nad6flym=\"$(echo \"$ad6flym\" | sed 's/ /\",\"/g')\"\nad6flym=\"\\\"$ad6flym\\\"\"\nfi\nsed -i \"232s/.*/$ad6flym/\" /etc/s-box/sb.json\nrestartsb\nchangef\nelse\nyellow \"遗憾！当前Sing-box内核不支持geosite分流方式。如要支持，请切换1.10系列内核\" && exit\nfi\nelse\nchangef\nfi\nelse\nsb\nfi\n}\n\nrestartsb(){\nif [[ x\"${release}\" == x\"alpine\" ]]; then\nrc-service sing-box restart\nelse\nsystemctl enable sing-box\nsystemctl start sing-box\nsystemctl restart sing-box\nfi\n}\n\nstclre(){\nif [[ ! -f '/etc/s-box/sb.json' ]]; then\nred \"未正常安装Sing-box\" && exit\nfi\nreadp \"1：重启\\n2：关闭\\n请选择：\" menu\nif [ \"$menu\" = \"1\" ]; then\nrestartsb\nsbactive\ngreen \"Sing-box服务已重启\\n\" && sleep 3 && sb\nelif [ \"$menu\" = \"2\" ]; then\nif [[ x\"${release}\" == x\"alpine\" ]]; then\nrc-service sing-box stop\nelse\nsystemctl stop sing-box\nsystemctl disable sing-box\nfi\ngreen \"Sing-box服务已关闭\\n\" && sleep 3 && sb\nelse\nstclre\nfi\n}\n\ncronsb(){\nuncronsb\ncrontab -l > /tmp/crontab.tmp\necho \"0 1 * * * systemctl restart sing-box;rc-service sing-box restart\" >> /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\n}\nuncronsb(){\ncrontab -l > /tmp/crontab.tmp\nsed -i '/sing-box/d' /tmp/crontab.tmp\nsed -i '/sbargopid/d' /tmp/crontab.tmp\nsed -i '/sbargoympid/d' /tmp/crontab.tmp\nsed -i '/sbwpphid.log/d' /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\n}\n\nlnsb(){\nrm -rf /usr/bin/sb\ncurl -L -o /usr/bin/sb -# --retry 2 --insecure https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/sb.sh\nchmod +x /usr/bin/sb\n}\n\nupsbyg(){\nif [[ ! -f '/usr/bin/sb' ]]; then\nred \"未正常安装Sing-box-yg\" && exit\nfi\nlnsb\ncurl -sL https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/version | awk -F \"更新内容\" '{print $1}' | head -n 1 > /etc/s-box/v\ngreen \"Sing-box-yg安装脚本升级成功\" && sleep 5 && sb\n}\n\nlapre(){\nlatcore=$(curl -Ls https://data.jsdelivr.com/v1/package/gh/SagerNet/sing-box | grep -Eo '\"[0-9.]+\",' | sed -n 1p | tr -d '\",')\nprecore=$(curl -Ls https://data.jsdelivr.com/v1/package/gh/SagerNet/sing-box | grep -Eo '\"[0-9.]*-[^\"]*\"' | sed -n 1p | tr -d '\",')\ninscore=$(/etc/s-box/sing-box version 2>/dev/null | awk '/version/{print $NF}')\n}\n\nupsbcroe(){\nsbactive\nlapre\n[[ $inscore =~ ^[0-9.]+$ ]] && lat=\"【已安装v$inscore】\" || pre=\"【已安装v$inscore】\"\ngreen \"1：升级/切换Sing-box最新正式版 v$latcore  ${bblue}${lat}${plain}\"\ngreen \"2：升级/切换Sing-box最新测试版 v$precore  ${bblue}${pre}${plain}\"\ngreen \"3：切换Sing-box某个正式版或测试版，需指定版本号 (建议1.10.0以上版本)\"\ngreen \"0：返回上层\"\nreadp \"请选择【0-3】：\" menu\nif [ \"$menu\" = \"1\" ]; then\nupcore=$(curl -Ls https://data.jsdelivr.com/v1/package/gh/SagerNet/sing-box | grep -Eo '\"[0-9.]+\",' | sed -n 1p | tr -d '\",')\nelif [ \"$menu\" = \"2\" ]; then\nupcore=$(curl -Ls https://data.jsdelivr.com/v1/package/gh/SagerNet/sing-box | grep -Eo '\"[0-9.]*-[^\"]*\"' | sed -n 1p | tr -d '\",')\nelif [ \"$menu\" = \"3\" ]; then\necho\nred \"注意: 版本号在 https://github.com/SagerNet/sing-box/tags 可查，且有Downloads字样 (建议1.10.0以上版本)\"\ngreen \"正式版版本号格式：数字.数字.数字 (例：1.10.0   注意，1.10系列内核支持geosite分流，1.10以上版本不支持geosite分流)\"\ngreen \"测试版版本号格式：数字.数字.数字-alpha或rc或beta.数字 (例：1.10.0-alpha或rc或beta.1)\"\nreadp \"请输入Sing-box版本号：\" upcore\nelse\nsb\nfi\nif [[ -n $upcore ]]; then\ngreen \"开始下载并更新Sing-box内核……请稍等\"\nsbname=\"sing-box-$upcore-linux-$cpu\"\ncurl -L -o /etc/s-box/sing-box.tar.gz  -# --retry 2 https://github.com/SagerNet/sing-box/releases/download/v$upcore/$sbname.tar.gz\nif [[ -f '/etc/s-box/sing-box.tar.gz' ]]; then\ntar xzf /etc/s-box/sing-box.tar.gz -C /etc/s-box\nmv /etc/s-box/$sbname/sing-box /etc/s-box\nrm -rf /etc/s-box/{sing-box.tar.gz,$sbname}\nif [[ -f '/etc/s-box/sing-box' ]]; then\nchown root:root /etc/s-box/sing-box\nchmod +x /etc/s-box/sing-box\nsbnh110yn\nrestartsb\nblue \"成功升级/切换 Sing-box 内核版本：$(/etc/s-box/sing-box version | awk '/version/{print $NF}')\" && sleep 3 && sb\nelse\nred \"下载 Sing-box 内核不完整，安装失败，请重试\" && upsbcroe\nfi\nelse\nred \"下载 Sing-box 内核失败或不存在，请重试\" && upsbcroe\nfi\nelse\nred \"版本号检测出错，请重试\" && upsbcroe\nfi\n}\n\nsbnh110yn(){\nsbnh=$(/etc/s-box/sing-box version | awk '/version/{print $NF}' | cut -d '.' -f 1,2)\nif [ $sbnh = 1.10 ]; then\nsed -i '186s/^\\/\\///' /etc/s-box/sb.json\nsed -i '187s/^\\/\\///' /etc/s-box/sb.json\nsed -i '188s/^\\/\\///' /etc/s-box/sb.json\nsed -i '195s/^\\/\\///' /etc/s-box/sb.json\nsed -i '196s/^\\/\\///' /etc/s-box/sb.json\nsed -i '197s/^\\/\\///' /etc/s-box/sb.json\nsed -i '204s/^\\/\\///' /etc/s-box/sb.json\nsed -i '205s/^\\/\\///' /etc/s-box/sb.json\nsed -i '206s/^\\/\\///' /etc/s-box/sb.json\nsed -i '213s/^\\/\\///' /etc/s-box/sb.json\nsed -i '214s/^\\/\\///' /etc/s-box/sb.json\nsed -i '215s/^\\/\\///' /etc/s-box/sb.json\nsed -i '222s/^\\/\\///' /etc/s-box/sb.json\nsed -i '223s/^\\/\\///' /etc/s-box/sb.json\nsed -i '224s/^\\/\\///' /etc/s-box/sb.json\nsed -i '231s/^\\/\\///' /etc/s-box/sb.json\nsed -i '232s/^\\/\\///' /etc/s-box/sb.json\nsed -i '233s/^\\/\\///' /etc/s-box/sb.json\nyellow \"当前Sing-box内核版本为1.10系列，geosite分流模式可用\"\nelse\nsed -i '186s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '187s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '188s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '195s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '196s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '197s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '204s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '205s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '206s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '213s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '214s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '215s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '222s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '223s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '224s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '231s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '232s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nsed -i '233s/^\\([^\\/]\\)/\\/\\/\\1/' /etc/s-box/sb.json\nred \"当前Sing-box内核不支持geosite分流模式，如要使用geosite分流模式，请切换1.10内核版本\"\nfi\n}\n\nunins(){\nif [[ x\"${release}\" == x\"alpine\" ]]; then\nrc-service sing-box stop\nrc-update del sing-box default\nrm /etc/init.d/sing-box -f\nelse\nsystemctl stop sing-box >/dev/null 2>&1\nsystemctl disable sing-box >/dev/null 2>&1\nrm -f /etc/systemd/system/sing-box.service\nfi\nkill -15 $(cat /etc/s-box/sbargopid.log 2>/dev/null) >/dev/null 2>&1\nkill -15 $(cat /etc/s-box/sbargoympid.log 2>/dev/null) >/dev/null 2>&1\nkill -15 $(cat /etc/s-box/sbwpphid.log 2>/dev/null) >/dev/null 2>&1\nrm -rf /etc/s-box sbyg_update /usr/bin/sb /root/geoip.db /root/geosite.db /root/warpapi /root/warpip\nuncronsb\niptables -t nat -F PREROUTING >/dev/null 2>&1\nnetfilter-persistent save >/dev/null 2>&1\nservice iptables save >/dev/null 2>&1\ngreen \"Sing-box卸载完成！\"\nblue \"欢迎继续使用Sing-box-yg脚本：bash <(curl -Ls https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/sb.sh)\"\necho\n}\n\nsblog(){\nred \"退出日志 Ctrl+c\"\nif [[ x\"${release}\" == x\"alpine\" ]]; then\nyellow \"暂不支持alpine查看日志\"\nelse\n#systemctl status sing-box\njournalctl -u sing-box.service -o cat -f\nfi\n}\n\nsbactive(){\nif [[ ! -f /etc/s-box/sb.json ]]; then\nred \"未正常启动Sing-box，请卸载重装或者选择10查看运行日志反馈\" && exit\nfi\n}\n\nsbshare(){\nrm -rf /etc/s-box/jhdy.txt /etc/s-box/vl_reality.txt /etc/s-box/vm_ws_argols.txt /etc/s-box/vm_ws_argogd.txt /etc/s-box/vm_ws.txt /etc/s-box/vm_ws_tls.txt /etc/s-box/hy2.txt /etc/s-box/tuic5.txt\nresult_vl_vm_hy_tu && resvless && resvmess && reshy2 && restu5\ncat /etc/s-box/vl_reality.txt 2>/dev/null >> /etc/s-box/jhdy.txt\ncat /etc/s-box/vm_ws_argols.txt 2>/dev/null >> /etc/s-box/jhdy.txt\ncat /etc/s-box/vm_ws_argogd.txt 2>/dev/null >> /etc/s-box/jhdy.txt\ncat /etc/s-box/vm_ws.txt 2>/dev/null >> /etc/s-box/jhdy.txt\ncat /etc/s-box/vm_ws_tls.txt 2>/dev/null >> /etc/s-box/jhdy.txt\ncat /etc/s-box/hy2.txt 2>/dev/null >> /etc/s-box/jhdy.txt\ncat /etc/s-box/tuic5.txt 2>/dev/null >> /etc/s-box/jhdy.txt\nurl=$(cat /etc/s-box/jhdy.txt 2>/dev/null)\nbaseurl=$(echo -e \"$url\" | base64 -w 0)\necho \"$baseurl\" > /etc/s-box/jh_sub.txt\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nred \"🚀【 四合一聚合订阅 】节点信息如下：\" && sleep 2\necho\necho \"分享链接【v2rayn、v2rayng、nekobox、Karing】\"\necho -e \"${yellow}$baseurl${plain}\"\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\nsb_client\n}\n\nclash_sb_share(){\nsbactive\necho\nyellow \"1：刷新并查看各协议分享链接、二维码、四合一聚合订阅\"\nyellow \"2：刷新并查看Clash-Meta、Sing-box客户端SFA/SFI/SFW三合一配置、Gitlab私有订阅链接\"\nyellow \"3：刷新并查看Hysteria2、Tuic5的V2rayN客户端自定义配置\"\nyellow \"4：推送最新节点配置信息(选项1+选项2)到Telegram通知\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-4】：\" menu\nif [ \"$menu\" = \"1\" ]; then\nsbshare\nelif  [ \"$menu\" = \"2\" ]; then\ngreen \"请稍等……\"\nsbshare > /dev/null 2>&1\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nred \"Gitlab订阅链接如下：\"\ngitlabsubgo\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nred \"🚀【 vless-reality、vmess-ws、Hysteria2、Tuic5 】Clash-Meta配置文件显示如下：\"\nred \"文件目录 /etc/s-box/clash_meta_client.yaml ，复制自建以yaml文件格式为准\" && sleep 2\necho\ncat /etc/s-box/clash_meta_client.yaml\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nred \"🚀【 vless-reality、vmess-ws、Hysteria2、Tuic5 】SFA/SFI/SFW配置文件显示如下：\"\nred \"安卓SFA、苹果SFI，win电脑官方文件包SFW请到甬哥Github项目自行下载，\"\nred \"文件目录 /etc/s-box/sing_box_client.json ，复制自建以json文件格式为准\" && sleep 2\necho\ncat /etc/s-box/sing_box_client.json\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\nelif  [ \"$menu\" = \"3\" ]; then\ngreen \"请稍等……\"\nsbshare > /dev/null 2>&1\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nred \"🚀【 Hysteria-2 】自定义V2rayN配置文件显示如下：\"\nred \"文件目录 /etc/s-box/v2rayn_hy2.yaml ，复制自建以yaml文件格式为准\" && sleep 2\necho\ncat /etc/s-box/v2rayn_hy2.yaml\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\ntu5_sniname=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[3].tls.key_path')\nif [[ \"$tu5_sniname\" = '/etc/s-box/private.key' ]]; then\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\nred \"注意：V2rayN客户端使用自定义Tuic5官方客户端核心时，不支持Tuic5自签证书，仅支持域名证书\" && sleep 2\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nelse\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nred \"🚀【 Tuic-v5 】自定义V2rayN配置文件显示如下：\"\nred \"文件目录 /etc/s-box/v2rayn_tu5.json ，复制自建以json文件格式为准\" && sleep 2\necho\ncat /etc/s-box/v2rayn_tu5.json\necho\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\nfi\nelif [ \"$menu\" = \"4\" ]; then\ntgnotice\nelse\nsb\nfi\n}\n\nacme(){\nbash <(curl -Ls https://gitlab.com/rwkgyg/acme-script/raw/main/acme.sh)\n}\ncfwarp(){\nbash <(curl -Ls https://gitlab.com/rwkgyg/CFwarp/raw/main/CFwarp.sh)\n}\nbbr(){\nif [[ $vi =~ lxc|openvz ]]; then\nyellow \"当前VPS的架构为 $vi，不支持开启原版BBR加速\" && sleep 2 && exit \nelse\ngreen \"点击任意键，即可开启BBR加速，ctrl+c退出\"\nbash <(curl -Ls https://raw.githubusercontent.com/teddysun/across/master/bbr.sh)\nfi\n}\n\nshowprotocol(){\nallports\nsbymfl\ntls=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].tls.enabled')\nif [[ \"$tls\" = \"false\" ]]; then\nargopid\nif [[ -n $(ps -e | grep -w $ym 2>/dev/null) || -n $(ps -e | grep -w $ls 2>/dev/null) ]]; then\nvm_zs=\"TLS关闭\"\nargoym=\"已开启\"\nelse\nvm_zs=\"TLS关闭\"\nargoym=\"未开启\"\nfi\nelse\nvm_zs=\"TLS开启\"\nargoym=\"不支持开启\"\nfi\nhy2_sniname=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[2].tls.key_path')\n[[ \"$hy2_sniname\" = '/etc/s-box/private.key' ]] && hy2_zs=\"自签证书\" || hy2_zs=\"域名证书\"\ntu5_sniname=$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[3].tls.key_path')\n[[ \"$tu5_sniname\" = '/etc/s-box/private.key' ]] && tu5_zs=\"自签证书\" || tu5_zs=\"域名证书\"\necho -e \"Sing-box节点关键信息、已分流域名情况如下：\"\necho -e \"🚀【 Vless-reality 】${yellow}端口:$vl_port  Reality域名证书伪装地址：$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[0].tls.server_name')${plain}\"\nif [[ \"$tls\" = \"false\" ]]; then\necho -e \"🚀【   Vmess-ws    】${yellow}端口:$vm_port   证书形式:$vm_zs   Argo状态:$argoym${plain}\"\nelse\necho -e \"🚀【 Vmess-ws-tls  】${yellow}端口:$vm_port   证书形式:$vm_zs   Argo状态:$argoym${plain}\"\nfi\necho -e \"🚀【  Hysteria-2   】${yellow}端口:$hy2_port  证书形式:$hy2_zs  转发多端口: $hy2zfport${plain}\"\necho -e \"🚀【    Tuic-v5    】${yellow}端口:$tu5_port  证书形式:$tu5_zs  转发多端口: $tu5zfport${plain}\"\nif [ \"$argoym\" = \"已开启\" ]; then\necho -e \"Vmess-UUID：${yellow}$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[0].users[0].uuid')${plain}\"\necho -e \"Vmess-Path：${yellow}$(sed 's://.*::g' /etc/s-box/sb.json | jq -r '.inbounds[1].transport.path')${plain}\"\nif [[ -n $(ps -e | grep -w $ls 2>/dev/null) ]]; then\necho -e \"Argo临时域名：${yellow}$(cat /etc/s-box/argo.log 2>/dev/null | grep -a trycloudflare.com | awk 'NR==2{print}' | awk -F// '{print $2}' | awk '{print $1}')${plain}\"\nfi\nif [[ -n $(ps -e | grep -w $ym 2>/dev/null) ]]; then\necho -e \"Argo固定域名：${yellow}$(cat /etc/s-box/sbargoym.log 2>/dev/null)${plain}\"\nfi\nfi\necho \"------------------------------------------------------------------------------------\"\nif [[ -n $(ps -e | grep sbwpph) ]]; then\ns5port=$(cat /etc/s-box/sbwpph.log 2>/dev/null | awk '{print $3}'| awk -F\":\" '{print $NF}')\ns5gj=$(cat /etc/s-box/sbwpph.log 2>/dev/null | awk '{print $6}')\ncase \"$s5gj\" in\nAT) showgj=\"奥地利\" ;;\nAU) showgj=\"澳大利亚\" ;;\nBE) showgj=\"比利时\" ;;\nBG) showgj=\"保加利亚\" ;;\nCA) showgj=\"加拿大\" ;;\nCH) showgj=\"瑞士\" ;;\nCZ) showgj=\"捷克\" ;;\nDE) showgj=\"德国\" ;;\nDK) showgj=\"丹麦\" ;;\nEE) showgj=\"爱沙尼亚\" ;;\nES) showgj=\"西班牙\" ;;\nFI) showgj=\"芬兰\" ;;\nFR) showgj=\"法国\" ;;\nGB) showgj=\"英国\" ;;\nHR) showgj=\"克罗地亚\" ;;\nHU) showgj=\"匈牙利\" ;;\nIE) showgj=\"爱尔兰\" ;;\nIN) showgj=\"印度\" ;;\nIT) showgj=\"意大利\" ;;\nJP) showgj=\"日本\" ;;\nLV) showgj=\"拉脱维亚\" ;;\nNL) showgj=\"荷兰\" ;;\nNO) showgj=\"挪威\" ;;\nPL) showgj=\"波兰\" ;;\nPT) showgj=\"葡萄牙\" ;;\nRO) showgj=\"罗马尼亚\" ;;\nRS) showgj=\"塞尔维亚\" ;;\nSE) showgj=\"瑞典\" ;;\nSG) showgj=\"新加坡\" ;;\nSK) showgj=\"斯洛伐克\" ;;\nUS) showgj=\"美国\" ;;\nesac\ngrep -q \"country\" /etc/s-box/sbwpph.log 2>/dev/null && s5ms=\"多地区Psiphon代理模式 (端口:$s5port  国家:$showgj)\" || s5ms=\"本地Warp代理模式 (端口:$s5port)\"\necho -e \"WARP-plus-Socks5状态：$yellow已启动 $s5ms$plain\"\nelse\necho -e \"WARP-plus-Socks5状态：$yellow未启动$plain\"\nfi\necho \"------------------------------------------------------------------------------------\"\nww4=\"warp-wireguard-ipv4分流域名：$wfl4\"\nww6=\"warp-wireguard-ipv6分流域名：$wfl6\"\nws4=\"warp-socks5-ipv4分流域名：$sfl4\"\nws6=\"warp-socks5-ipv6分流域名：$sfl6\"\nl4=\"VPS本地ipv4分流域名：$adfl4\"\nl6=\"VPS本地ipv6分流域名：$adfl6\"\nymflzu=(\"ww4\" \"ww6\" \"ws4\" \"ws6\" \"l4\" \"l6\")\nfor ymfl in \"${ymflzu[@]}\"; do\nif [[ ${!ymfl} != *\"未\"* ]]; then\necho -e \"${!ymfl}\"\nfi\ndone\nif [[ $ww4 = *\"未\"* && $ww6 = *\"未\"* && $ws4 = *\"未\"* && $ws6 = *\"未\"* && $l4 = *\"未\"* && $l6 = *\"未\"* ]] ; then\necho -e \"未设置域名分流\"\nfi\n}\n\ninssbwpph(){\nsbactive\nins(){\nif [ ! -e /etc/s-box/sbwpph ]; then\ncase $(uname -m) in\naarch64) cpu=arm64;;\nx86_64) cpu=amd64;;\nesac\ncurl -L -o /etc/s-box/sbwpph -# --retry 2 --insecure https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/sbwpph_$cpu\nchmod +x /etc/s-box/sbwpph\nfi\nif [[ -n $(ps -e | grep sbwpph) ]]; then\nkill -15 $(cat /etc/s-box/sbwpphid.log 2>/dev/null) >/dev/null 2>&1\nfi\nv4v6\nif [[ -z $v4 ]]; then\nred \"IPV4不存在，确保安装过WARP-IPV4模式\"\nfi \n[[ -n $v6 ]] && sw46=6 || sw46=4\necho\nreadp \"设置WARP-plus-Socks5端口（回车跳过端口默认40000）：\" port\nif [[ -z $port ]]; then\nport=40000\nuntil [[ -z $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") && -z $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]] \ndo\n[[ -n $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") || -n $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]] && yellow \"\\n端口被占用，请重新输入端口\" && readp \"自定义端口:\" port\ndone\nelse\nuntil [[ -z $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") && -z $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]]\ndo\n[[ -n $(ss -tunlp | grep -w udp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") || -n $(ss -tunlp | grep -w tcp | awk '{print $5}' | sed 's/.*://g' | grep -w \"$port\") ]] && yellow \"\\n端口被占用，请重新输入端口\" && readp \"自定义端口:\" port\ndone\nfi\ns5port=$(cat /etc/s-box/sb.json | jq '.outbounds[] | select(.type == \"socks\") | .server_port' | tr -d '\"')\nsed -i \"127s/$s5port/$port/g\" /etc/s-box/sb.json\nrestartsb\n}\nunins(){\nkill -15 $(cat /etc/s-box/sbwpphid.log 2>/dev/null) >/dev/null 2>&1\nrm -rf /etc/s-box/sbwpph.log /etc/s-box/sbwpphid.log\ncrontab -l > /tmp/crontab.tmp\nsed -i '/sbwpphid.log/d' /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\n}\necho\nyellow \"1：重置启用WARP-plus-Socks5本地Warp代理模式\"\nyellow \"2：重置启用WARP-plus-Socks5多地区Psiphon代理模式\"\nyellow \"3：停止WARP-plus-Socks5代理模式\"\nyellow \"0：返回上层\"\nreadp \"请选择【0-3】：\" menu\nif [ \"$menu\" = \"1\" ]; then\nins\nnohup setsid /etc/s-box/sbwpph -b 127.0.0.1:$port --gool -$sw46 >/dev/null 2>&1 & echo \"$!\" > /etc/s-box/sbwpphid.log\ngreen \"申请IP中……请稍等……\" && sleep 20\nresv1=$(curl -s --socks5 localhost:$port icanhazip.com)\nresv2=$(curl -sx socks5h://localhost:$port icanhazip.com)\nif [[ -z $resv1 && -z $resv2 ]]; then\nred \"WARP-plus-Socks5的IP获取失败\" && unins && exit\nelse\necho \"/etc/s-box/sbwpph -b 127.0.0.1:$port --gool -$sw46 >/dev/null 2>&1\" > /etc/s-box/sbwpph.log\ncrontab -l > /tmp/crontab.tmp\nsed -i '/sbwpphid.log/d' /tmp/crontab.tmp\necho '@reboot /bin/bash -c \"nohup setsid $(cat /etc/s-box/sbwpph.log 2>/dev/null) & pid=\\$! && echo \\$pid > /etc/s-box/sbwpphid.log\"' >> /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\ngreen \"WARP-plus-Socks5的IP获取成功，可进行Socks5代理分流\"\nfi\nelif [ \"$menu\" = \"2\" ]; then\nins\necho '\n奥地利（AT）\n澳大利亚（AU）\n比利时（BE）\n保加利亚（BG）\n加拿大（CA）\n瑞士（CH）\n捷克 (CZ)\n德国（DE）\n丹麦（DK）\n爱沙尼亚（EE）\n西班牙（ES）\n芬兰（FI）\n法国（FR）\n英国（GB）\n克罗地亚（HR）\n匈牙利 (HU)\n爱尔兰（IE）\n印度（IN）\n意大利 (IT)\n日本（JP）\n拉脱维亚（LV）\n荷兰（NL）\n挪威 (NO)\n波兰（PL）\n葡萄牙（PT）\n罗马尼亚 (RO)\n塞尔维亚（RS）\n瑞典（SE）\n新加坡 (SG)\n斯洛伐克（SK）\n美国（US）\n'\nreadp \"可选择国家地区（输入末尾两个大写字母，如美国，则输入US）：\" guojia\nnohup setsid /etc/s-box/sbwpph -b 127.0.0.1:$port --cfon --country $guojia -$sw46 >/dev/null 2>&1 & echo \"$!\" > /etc/s-box/sbwpphid.log\ngreen \"申请IP中……请稍等……\" && sleep 20\nresv1=$(curl -s --socks5 localhost:$port icanhazip.com)\nresv2=$(curl -sx socks5h://localhost:$port icanhazip.com)\nif [[ -z $resv1 && -z $resv2 ]]; then\nred \"WARP-plus-Socks5的IP获取失败，尝试换个国家地区吧\" && unins && exit\nelse\necho \"/etc/s-box/sbwpph -b 127.0.0.1:$port --cfon --country $guojia -$sw46 >/dev/null 2>&1\" > /etc/s-box/sbwpph.log\ncrontab -l > /tmp/crontab.tmp\nsed -i '/sbwpphid.log/d' /tmp/crontab.tmp\necho '@reboot /bin/bash -c \"nohup setsid $(cat /etc/s-box/sbwpph.log 2>/dev/null) & pid=\\$! && echo \\$pid > /etc/s-box/sbwpphid.log\"' >> /tmp/crontab.tmp\ncrontab /tmp/crontab.tmp\nrm /tmp/crontab.tmp\ngreen \"WARP-plus-Socks5的IP获取成功，可进行Socks5代理分流\"\nfi\nelif [ \"$menu\" = \"3\" ]; then\nunins && green \"已停止WARP-plus-Socks5代理功能\"\nelse\nsb\nfi\n}\n\nclear\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" \necho -e \"${bblue} ░██     ░██      ░██ ██ ██         ░█${plain}█   ░██     ░██   ░██     ░█${red}█   ░██${plain}  \"\necho -e \"${bblue}  ░██   ░██      ░██    ░░██${plain}        ░██  ░██      ░██  ░██${red}      ░██  ░██${plain}   \"\necho -e \"${bblue}   ░██ ░██      ░██ ${plain}                ░██ ██        ░██ █${red}█        ░██ ██  ${plain}   \"\necho -e \"${bblue}     ░██        ░${plain}██    ░██ ██       ░██ ██        ░█${red}█ ██        ░██ ██  ${plain}  \"\necho -e \"${bblue}     ░██ ${plain}        ░██    ░░██        ░██ ░██       ░${red}██ ░██       ░██ ░██ ${plain}  \"\necho -e \"${bblue}     ░█${plain}█          ░██ ██ ██         ░██  ░░${red}██     ░██  ░░██     ░██  ░░██ ${plain}  \"\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" \nwhite \"甬哥Github项目  ：github.com/yonggekkk\"\nwhite \"甬哥Blogger博客 ：ygkkk.blogspot.com\"\nwhite \"甬哥YouTube频道 ：www.youtube.com/@ygkkk\"\nwhite \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\" \nwhite \"Vless-reality-vision、Vmess-ws(tls)+Argo、Hysteria-2、Tuic-v5 四协议共存脚本\"\nwhite \"脚本快捷方式：sb\"\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho \"由于sing-box的1.10与1.11内核在配置文件上变化之大\"\necho \"当1.11正式版内核发布后，切勿更新内核版本，保持1.10系列内核不动\"\necho \"等待后续更新！\"\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\ngreen \" 1. 一键安装 Sing-box\" \ngreen \" 2. 删除卸载 Sing-box\"\nwhite \"----------------------------------------------------------------------------------\"\ngreen \" 3. 变更配置 【双证书TLS/UUID路径/Argo/IP优先/TG通知/Warp/订阅/CDN优选】\" \ngreen \" 4. 更改主端口/添加多端口跳跃复用\" \ngreen \" 5. 三通道域名分流\"\ngreen \" 6. 关闭/重启 Sing-box\"   \ngreen \" 7. 更新 Sing-box-yg 脚本\"\ngreen \" 8. 更新/切换/指定 Sing-box 内核版本\"\nwhite \"----------------------------------------------------------------------------------\"\ngreen \" 9. 刷新并查看节点 【Clash-Meta/SFA+SFI+SFW三合一配置/订阅链接/推送TG通知】\"\ngreen \"10. 查看 Sing-box 运行日志\"\ngreen \"11. 一键原版BBR+FQ加速\"\ngreen \"12. 管理 Acme 申请域名证书\"\ngreen \"13. 管理 Warp 查看Netflix/ChatGPT解锁情况\"\ngreen \"14. 添加 WARP-plus-Socks5 代理模式 【本地Warp/多地区Psiphon-VPN】\"\ngreen \" 0. 退出脚本\"\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\ninsV=$(cat /etc/s-box/v 2>/dev/null)\nlatestV=$(curl -sL https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/version | awk -F \"更新内容\" '{print $1}' | head -n 1)\nif [ -f /etc/s-box/v ]; then\nif [ \"$insV\" = \"$latestV\" ]; then\necho -e \"当前 Sing-box-yg 脚本最新版：${bblue}${insV}${plain} (已安装)\"\nelse\necho -e \"当前 Sing-box-yg 脚本版本号：${bblue}${insV}${plain}\"\necho -e \"检测到最新 Sing-box-yg 脚本版本号：${yellow}${latestV}${plain} (可选择7进行更新)\"\necho -e \"${yellow}$(curl -sL https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/version)${plain}\"\nfi\nelse\necho -e \"当前 Sing-box-yg 脚本版本号：${bblue}${latestV}${plain}\"\necho -e \"请先选择 1 ，安装 Sing-box-yg 脚本\"\nfi\n\nlapre\nif [ -f '/etc/s-box/sb.json' ]; then\nif [[ $inscore =~ ^[0-9.]+$ ]]; then\nif [ \"${inscore}\" = \"${latcore}\" ]; then\necho\necho -e \"当前 Sing-box 最新正式版内核：${bblue}${inscore}${plain} (已安装)\"\necho\necho -e \"当前 Sing-box 最新测试版内核：${bblue}${precore}${plain} (可切换)\"\nelse\necho\necho -e \"当前 Sing-box 已安装正式版内核：${bblue}${inscore}${plain}\"\necho -e \"检测到最新 Sing-box 正式版内核：${yellow}${latcore}${plain} (可选择8进行更新)\"\necho\necho -e \"当前 Sing-box 最新测试版内核：${bblue}${precore}${plain} (可切换)\"\nfi\nelse\nif [ \"${inscore}\" = \"${precore}\" ]; then\necho\necho -e \"当前 Sing-box 最新测试版内核：${bblue}${inscore}${plain} (已安装)\"\necho\necho -e \"当前 Sing-box 最新正式版内核：${bblue}${latcore}${plain} (可切换)\"\nelse\necho\necho -e \"当前 Sing-box 已安装测试版内核：${bblue}${inscore}${plain}\"\necho -e \"检测到最新 Sing-box 测试版内核：${yellow}${precore}${plain} (可选择8进行更新)\"\necho\necho -e \"当前 Sing-box 最新正式版内核：${bblue}${latcore}${plain} (可切换)\"\nfi\nfi\nelse\necho\necho -e \"当前 Sing-box 最新正式版内核：${bblue}${latcore}${plain}\"\necho -e \"当前 Sing-box 最新测试版内核：${bblue}${precore}${plain}\"\nfi\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho -e \"VPS状态如下：\"\necho -e \"系统:$blue$op$plain  \\c\";echo -e \"内核:$blue$version$plain  \\c\";echo -e \"处理器:$blue$cpu$plain  \\c\";echo -e \"虚拟化:$blue$vi$plain  \\c\";echo -e \"BBR算法:$blue$bbr$plain\"\nv4v6\nif [[ \"$v6\" == \"2a09\"* ]]; then\nw6=\"【WARP】\"\nfi\nif [[ \"$v4\" == \"104.28\"* ]]; then\nw4=\"【WARP】\"\nfi\nrpip=$(sed 's://.*::g' /etc/s-box/sb.json 2>/dev/null | jq -r '.outbounds[0].domain_strategy')\n[[ -z $v4 ]] && showv4='IPV4地址丢失，请切换至IPV6或者重装Sing-box' || showv4=$v4$w4\n[[ -z $v6 ]] && showv6='IPV6地址丢失，请切换至IPV4或者重装Sing-box' || showv6=$v6$w6\nif [[ $rpip = 'prefer_ipv6' ]]; then\nv4_6=\"IPV6优先出站($showv6)\"\nelif [[ $rpip = 'prefer_ipv4' ]]; then\nv4_6=\"IPV4优先出站($showv4)\"\nelif [[ $rpip = 'ipv4_only' ]]; then\nv4_6=\"仅IPV4出站($showv4)\"\nelif [[ $rpip = 'ipv6_only' ]]; then\nv4_6=\"仅IPV6出站($showv6)\"\nfi\nif [[ -z $v4 ]]; then\nvps_ipv4='无IPV4'      \nvps_ipv6=\"$v6\"\nelif [[ -n $v4 &&  -n $v6 ]]; then\nvps_ipv4=\"$v4\"    \nvps_ipv6=\"$v6\"\nelse\nvps_ipv4=\"$v4\"    \nvps_ipv6='无IPV6'\nfi\necho -e \"本地IPV4地址：$blue$vps_ipv4$w4$plain   本地IPV6地址：$blue$vps_ipv6$w6$plain\"\nif [[ -n $rpip ]]; then\necho -e \"代理IP优先级：$blue$v4_6$plain\"\nfi\nif [[ x\"${release}\" == x\"alpine\" ]]; then\nstatus_cmd=\"rc-service sing-box status\"\nstatus_pattern=\"started\"\nelse\nstatus_cmd=\"systemctl status sing-box\"\nstatus_pattern=\"active\"\nfi\nif [[ -n $($status_cmd 2>/dev/null | grep -w \"$status_pattern\") && -f '/etc/s-box/sb.json' ]]; then\necho -e \"Sing-box状态：$blue运行中$plain\"\nelif [[ -z $($status_cmd 2>/dev/null | grep -w \"$status_pattern\") && -f '/etc/s-box/sb.json' ]]; then\necho -e \"Sing-box状态：$yellow未启动，选择10查看日志并反馈，建议卸载重装Sing-box-yg脚本$plain\"\nelse\necho -e \"Sing-box状态：$red未安装$plain\"\nfi\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\nif [ -f '/etc/s-box/sb.json' ]; then\nshowprotocol\nfi\nred \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\"\necho\nreadp \"请输入数字【0-14】:\" Input\ncase \"$Input\" in  \n 1 ) instsllsingbox;;\n 2 ) unins;;\n 3 ) changeserv;;\n 4 ) changeport;;\n 5 ) changefl;;\n 6 ) stclre;;\n 7 ) upsbyg;; \n 8 ) upsbcroe;;\n 9 ) clash_sb_share;;\n10 ) sblog;;\n11 ) bbr;;\n12 ) acme;;\n13 ) cfwarp;;\n14 ) inssbwpph;;\n * ) exit \nesac\n"
        },
        {
          "name": "sbwpph_amd64",
          "type": "blob",
          "size": 17780.1318359375,
          "content": ""
        },
        {
          "name": "sbwpph_arm64",
          "type": "blob",
          "size": 17152.1318359375,
          "content": ""
        },
        {
          "name": "sb官方客户端配置说明.txt",
          "type": "blob",
          "size": 7.947265625,
          "content": "sing-box官方SFA/SFI/SFW客户端配置简要说明\n小白关键点操作指南 V23.11.15（不定时更新）\n\n注意：小白在自己的sing-box配置文件中，只要改动节点区与分流组这两块区域即可\n------------------------------------------------------------------------------------\n节点区\n------------------------------------------------------------------------------------\n一、vless-reality-vision节点\n------------------------------------------------------------------------------------\n    {\n      \"type\": \"vless\",\n      \"tag\": \"vless-sb\",                                                  自定义节点名称\n      \"server\": \"1.2.3.4\",                                                服务器本地ip\n      \"server_port\": 12345,                                               自定义的端口\n      \"uuid\": \"658ff7f4-0448-4368-a104-c3108517f56a\",                     自定义的uuid\n      \"flow\": \"xtls-rprx-vision\",\n      \"tls\": {\n        \"enabled\": true,\n        \"server_name\": \"www.yahoo.com\",                                   自定义的第三方偷域名\n        \"utls\": {\n          \"enabled\": true,\n          \"fingerprint\": \"chrome\"\n        },\n      \"reality\": {\n          \"enabled\": true,\n          \"public_key\": \"oBwBeiq8MjOqHS0fTXm39gRM_fdXgbAvtEWfAaW\",        自定义的public-key\n          \"short_id\": \"91b4db47\"                                          自定义的short-id\n        }\n      }\n    },\n\n\n------------------------------------------------------------------------------------\n二、vmess-ws(tls)+argo节点\n------------------------------------------------------------------------------------\n     {\n            \"server\": \"1.2.3.4\",                                       服务器本地ip、解析的域名、优选IP、优选域名\n            \"server_port\": 12345,                                      自定义的端口，vps-cdn与argo-cdn，注意13个端口变化\n            \"tag\": \"vmess-sb\",                                         自定义节点名称\n            \"tls\": {\n                \"enabled\": true,                                       tls开启：true   tls关闭：false    \n                \"server_name\": \"yg.ygkkk.eu.org\",                      tls开启：解析的域名或者argo域名   \n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"yg.ygkkk.eu.org\"                              解析的域名或者argo域名\n                    ]\n                },\n                \"path\": \"658ff7f4-0448-4368-a104-c3108517f56a-vm\",     自定义的uuid值-vm\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"658ff7f4-0448-4368-a104-c3108517f56a\"             自定义的uuid\n        },\n\n------------------------------------------------------------------------------------        \n三、hysteria2节点\n------------------------------------------------------------------------------------\n    {\n        \"type\": \"hysteria2\",\n        \"tag\": \"hy2-sb\",                                           自定义节点名称\n        \"server\": \"1.2.3.4\",                                       自签证书：服务器本地ip   域名证书：解析的域名\n        \"server_port\": 12345,                                      自定义的端口\n        \"password\": \"658ff7f4-0448-4368-a104-c3108517f56a\",        自定义的uuid\n        \"tls\": {\n            \"enabled\": true,\n            \"server_name\": \"www.bing.com\",                         自签证书：www.bing.com   域名证书：解析的域名\n            \"insecure\": true,                                      自签证书：true           域名证书：false\n            \"alpn\": [\n                \"h3\"\n            ]\n        }\n    },\n\n\n------------------------------------------------------------------------------------\n四、tuic5节点\n------------------------------------------------------------------------------------\n        {\n            \"type\":\"tuic\",\n            \"tag\": \"tuic5-sb\",                                       自定义节点名称\n            \"server\": \"1.2.3.4\",                                     自签证书：服务器本地ip   域名证书：解析的域名\n            \"server_port\": 12345,                                    自定义的端口\n            \"uuid\": \"658ff7f4-0448-4368-a104-c3108517f56a\",          自定义的uuid\n            \"password\": \"658ff7f4-0448-4368-a104-c3108517f56a\",      自定义的uuid\n            \"congestion_control\": \"bbr\",\n            \"udp_relay_mode\": \"native\",\n            \"udp_over_stream\": false,\n            \"zero_rtt_handshake\": false,\n            \"heartbeat\": \"10s\",\n            \"tls\":{\n                \"enabled\": true,\n                \"server_name\": \"www.bing.com\",                      自签证书：www.bing.com   域名证书：解析的域名\n                \"insecure\": true,                                   自签证书：true           域名证书：false\n                \"alpn\": [\n                    \"h3\"\n                ]\n            }\n        },\n\n------------------------------------------------------------------------------------\n五、cf-vless(tls)节点\n------------------------------------------------------------------------------------\n     {\n            \"server\": \"1.2.3.4\",                                       优选IP、优选域名\n            \"server_port\": 12345,                                      自定义的端口，注意13个端口变化\n            \"tag\": \"cf-vless-sb\",                                      自定义节点名称\n            \"tls\": {\n                \"enabled\": true,                                       tls开启：true   tls关闭：false    \n                \"server_name\": \"yg.ygkkk.eu.org\",                      tls开启：pages域名或者自定义域名   \n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"yg.ygkkk.eu.org\"                              workers、pages域名或者自定义域名\n                    ]\n                },\n                \"path\": \"/?ed=2048\",                                   path路径：/?ed=2048\n                \"type\": \"ws\"\n            },\n            \"type\": \"vless\",\n            \"uuid\": \"658ff7f4-0448-4368-a104-c3108517f56a\"             自定义的uuid\n        },\n\n\n\n------------------------------------------------------------------------------------\n分流组：共两组，分为手动选择select与自动选择auto，每组节点可按需求自行增减，确保出现的自定义节点名称可以在节点区中查找到\n------------------------------------------------------------------------------------\n手动选择select\n{\n      \"tag\": \"select\",\n      \"type\": \"selector\",\n      \"default\": \"auto\",\n      \"outbounds\": [\n        \"auto\",                \n        \"vless-sb\",            自定义节点名称\n        \"vmess-sb\",            自定义节点名称\n        \"hy2-sb\",              自定义节点名称\n        \"tuic5-sb\",            自定义节点名称\n        \"cf-vless-sb\"          自定义节点名称\n          …………                 ………… \n      ]\n    },\n------------------------------------------------------------------------------------\n自动选择auto\n{\n      \"tag\": \"auto\",\n      \"type\": \"urltest\",\n      \"outbounds\": [\n        \"vless-sb\",            自定义节点名称\n        \"vmess-sb\",            自定义节点名称\n        \"hy2-sb\",              自定义节点名称\n        \"tuic5-sb\",            自定义节点名称\n        \"cf-vless-sb\"          自定义节点名称\n          ………………               ………… \n      ]\n    },\n------------------------------------------------------------------------------------\n"
        },
        {
          "name": "serv00.sh",
          "type": "blob",
          "size": 36.5234375,
          "content": "#!/bin/bash\n\n# 定义颜色\nre=\"\\033[0m\"\nred=\"\\033[1;91m\"\ngreen=\"\\e[1;32m\"\nyellow=\"\\e[1;33m\"\npurple=\"\\e[1;35m\"\nred() { echo -e \"\\e[1;91m$1\\033[0m\"; }\ngreen() { echo -e \"\\e[1;32m$1\\033[0m\"; }\nyellow() { echo -e \"\\e[1;33m$1\\033[0m\"; }\npurple() { echo -e \"\\e[1;35m$1\\033[0m\"; }\nreading() { read -p \"$(red \"$1\")\" \"$2\"; }\nUSERNAME=$(whoami)\nHOSTNAME=$(hostname)\n[[ \"$HOSTNAME\" == \"s1.ct8.pl\" ]] && export WORKDIR=\"domains/${USERNAME}.ct8.pl/logs\" || export WORKDIR=\"domains/${USERNAME}.serv00.net/logs\"\n[ -d \"$WORKDIR\" ] || (mkdir -p \"$WORKDIR\" && chmod 777 \"$WORKDIR\")\n\nread_ip() {\ncat ip.txt\nreading \"请输入上面三个IP中的任意一个 (建议默认回车自动选择可用IP): \" IP\nif [[ -z \"$IP\" ]]; then\nIP=$(grep -m 1 \"可用\" ip.txt | awk -F ':' '{print $1}')\nif [ -z \"$IP\" ]; then\nIP=$(okip)\nif [ -z \"$IP\" ]; then\nIP=$(head -n 1 ip.txt | awk -F ':' '{print $1}')\nfi\nfi\nfi\ngreen \"你选择的IP为: $IP\"\n}\n\nread_uuid() {\n        reading \"请输入统一的uuid密码 (建议回车默认随机): \" UUID\n        if [[ -z \"$UUID\" ]]; then\n\t   UUID=$(uuidgen -r)\n        fi\n\tgreen \"你的uuid为: $UUID\"\n}\n\nread_reym() {\n        yellow \"方式一：回车使用CF域名，支持proxyip+非标端口反代ip功能 (推荐)\"\n\tyellow \"方式二：输入 s 表示使用Serv00自带域名，不支持proxyip功能 (推荐)\"\n        yellow \"方式三：支持其他域名，注意要符合reality域名规则\"\n        reading \"请输入reality域名 【请选择 回车 或者 s 或者 输入域名】: \" reym\n        if [[ -z \"$reym\" ]]; then\n           reym=www.speedtest.net\n\telif [[ \"$reym\" == \"s\" || \"$reym\" == \"S\" ]]; then\n           reym=$USERNAME.serv00.net\n        fi\n\tgreen \"你的reality域名为: $reym\"\n}\n\nread_vless_port() {\n    while true; do\n        reading \"请输入vless-reality端口 (面板开放的tcp端口): \" vless_port\n        if [[ \"$vless_port\" =~ ^[0-9]+$ ]] && [ \"$vless_port\" -ge 1 ] && [ \"$vless_port\" -le 65535 ]; then\n            green \"你的vless-reality端口为: $vless_port\"\n            break\n        else\n            yellow \"输入错误，请重新输入面板开放的TCP端口\"\n        fi\n    done\n}\n\nread_hy2_port() {\n    while true; do\n        reading \"请输入hysteria2端口 (面板开放的UDP端口): \" hy2_port\n        if [[ \"$hy2_port\" =~ ^[0-9]+$ ]] && [ \"$hy2_port\" -ge 1 ] && [ \"$hy2_port\" -le 65535 ]; then\n            green \"你的hysteria2端口为: $hy2_port\"\n            break\n        else\n            yellow \"输入错误，请重新输入面板开放的UDP端口\"\n        fi\n    done\n}\n\nread_vmess_port() {\n    while true; do\n        reading \"请输入vmess-ws端口 (面板开放的tcp端口): \" vmess_port\n        if [[ \"$vmess_port\" =~ ^[0-9]+$ ]] && [ \"$vmess_port\" -ge 1 ] && [ \"$vmess_port\" -le 65535 ]; then\n            green \"你的vmess端口为: $vmess_port\"\n            break\n        else\n            yellow \"输入错误，请重新输入面板开放的tcp端口\"\n        fi\n    done\n}\n\ninstall_singbox() {\nif [[ -e $WORKDIR/list.txt ]]; then\nyellow \"已安装sing-box，请先选择2卸载，再执行安装\" && exit\nfi\nyellow \"请确保在Serv00网页设置中已开放3个端口：2个tcp端口、1个udp端口\"\nsleep 2\n        cd $WORKDIR\n\techo\n\tread_ip\n \techo\n        read_reym\n\techo\n\tread_uuid\n \techo\n        read_vless_port\n\techo\n        read_vmess_port\n\techo\n        read_hy2_port\n\techo\n        sleep 2\n        argo_configure\n\techo\n        download_and_run_singbox\n\tcd\n\techo\n\tservkeep\n        cd $WORKDIR\n        echo\n        get_links\n}\n\nuninstall_singbox() {\n  reading \"\\n确定要卸载吗？【y/n】: \" choice\n    case \"$choice\" in\n       [Yy])\n          bash -c 'ps aux | grep $(whoami) | grep -v \"sshd\\|bash\\|grep\" | awk \"{print \\$2}\" | xargs -r kill -9 >/dev/null 2>&1' >/dev/null 2>&1\n          rm -rf $WORKDIR serv00.sh serv00keep.sh\n\t  crontab -l | grep -v \"serv00keep\" >rmcron\n          crontab rmcron >/dev/null 2>&1\n          rm rmcron\n          clear\n          green \"已完全卸载\"\n          ;;\n        [Nn]) exit 0 ;;\n    \t*) red \"无效的选择，请输入y或n\" && menu ;;\n    esac\n}\n\nkill_all_tasks() {\nreading \"\\n清理所有进程并清空所有安装内容，将退出ssh连接，确定继续清理吗？【y/n】: \" choice\n  case \"$choice\" in\n    [Yy]) \n    bash -c 'ps aux | grep $(whoami) | grep -v \"sshd\\|bash\\|grep\" | awk \"{print \\$2}\" | xargs -r kill -9 >/dev/null 2>&1' >/dev/null 2>&1\n    crontab -l | grep -v \"serv00keep\" >rmcron\n    crontab rmcron >/dev/null 2>&1\n    rm rmcron\n    find ~ -type f -exec chmod 644 {} \\; 2>/dev/null\n    find ~ -type d -exec chmod 755 {} \\; 2>/dev/null\n    find ~ -type f -exec rm -f {} \\; 2>/dev/null\n    find ~ -type d -empty -exec rmdir {} \\; 2>/dev/null\n    find ~ -exec rm -rf {} \\; 2>/dev/null\n    killall -9 -u $(whoami)\n    ;;\n    *) menu ;;\n  esac\n}\n\n# Generating argo Config\nargo_configure() {\n  while true; do\n    yellow \"方式一：Argo临时隧道 (无需域名，推荐)\"\n    yellow \"方式二：Argo固定隧道 (需要域名，需要CF设置提取Token)\"\n    echo -e \"${red}注意：${purple}Argo固定隧道使用Token时，需要在cloudflare后台设置隧道端口，该端口必须与vmess-ws的tcp端口一致)${re}\"\n    reading \"输入 g 表示使用Argo固定隧道，回车跳过表示使用Argo临时隧道 【请选择 g 或者 回车】: \" argo_choice\n    if [[ \"$argo_choice\" != \"g\" && \"$argo_choice\" != \"G\" && -n \"$argo_choice\" ]]; then\n        red \"无效的选择，请输入 g 或回车\"\n        continue\n    fi\n    if [[ \"$argo_choice\" == \"g\" || \"$argo_choice\" == \"G\" ]]; then\n        reading \"请输入argo固定隧道域名: \" ARGO_DOMAIN\n        green \"你的argo固定隧道域名为: $ARGO_DOMAIN\"\n        reading \"请输入argo固定隧道密钥（Json或Token。当你粘贴Token时，必须以ey开头）: \" ARGO_AUTH\n        green \"你的argo固定隧道密钥为: $ARGO_AUTH\"\n    else\n        green \"使用Argo临时隧道\"\n    fi\n    break\ndone\n\n  if [[ $ARGO_AUTH =~ TunnelSecret ]]; then\n    echo $ARGO_AUTH > tunnel.json\n    cat > tunnel.yml << EOF\ntunnel: $(cut -d\\\" -f12 <<< \"$ARGO_AUTH\")\ncredentials-file: tunnel.json\nprotocol: http2\n\ningress:\n  - hostname: $ARGO_DOMAIN\n    service: http://localhost:$vmess_port\n    originRequest:\n      noTLSVerify: true\n  - service: http_status:404\nEOF\n  fi\n}\n\n# Download Dependency Files\ndownload_and_run_singbox() {\n  ARCH=$(uname -m) && DOWNLOAD_DIR=\".\" && mkdir -p \"$DOWNLOAD_DIR\" && FILE_INFO=()\n  if [ \"$ARCH\" == \"arm\" ] || [ \"$ARCH\" == \"arm64\" ] || [ \"$ARCH\" == \"aarch64\" ]; then\n      FILE_INFO=(\"https://github.com/eooce/test/releases/download/arm64/sb web\" \"https://github.com/eooce/test/releases/download/arm64/bot13 bot\")\n  elif [ \"$ARCH\" == \"amd64\" ] || [ \"$ARCH\" == \"x86_64\" ] || [ \"$ARCH\" == \"x86\" ]; then\n      FILE_INFO=(\"https://github.com/yonggekkk/Cloudflare_vless_trojan/releases/download/serv00/sb web\" \"https://github.com/yonggekkk/Cloudflare_vless_trojan/releases/download/serv00/server bot\")\n  else\n      echo \"Unsupported architecture: $ARCH\"\n      exit 1\n  fi\ndeclare -A FILE_MAP\ngenerate_random_name() {\n    local chars=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\n    local name=\"\"\n    for i in {1..6}; do\n        name=\"$name${chars:RANDOM%${#chars}:1}\"\n    done\n    echo \"$name\"\n}\n\ndownload_with_fallback() {\n    local URL=$1\n    local NEW_FILENAME=$2\n\n    curl -L -sS --max-time 2 -o \"$NEW_FILENAME\" \"$URL\" &\n    CURL_PID=$!\n    CURL_START_SIZE=$(stat -c%s \"$NEW_FILENAME\" 2>/dev/null || echo 0)\n    \n    sleep 1\n    CURL_CURRENT_SIZE=$(stat -c%s \"$NEW_FILENAME\" 2>/dev/null || echo 0)\n    \n    if [ \"$CURL_CURRENT_SIZE\" -le \"$CURL_START_SIZE\" ]; then\n        kill $CURL_PID 2>/dev/null\n        wait $CURL_PID 2>/dev/null\n        wget -q -O \"$NEW_FILENAME\" \"$URL\"\n        echo -e \"\\e[1;32mDownloading $NEW_FILENAME by wget\\e[0m\"\n    else\n        wait $CURL_PID\n        echo -e \"\\e[1;32mDownloading $NEW_FILENAME by curl\\e[0m\"\n    fi\n}\n\nfor entry in \"${FILE_INFO[@]}\"; do\n    URL=$(echo \"$entry\" | cut -d ' ' -f 1)\n    RANDOM_NAME=$(generate_random_name)\n    NEW_FILENAME=\"$DOWNLOAD_DIR/$RANDOM_NAME\"\n    \n    if [ -e \"$NEW_FILENAME\" ]; then\n        echo -e \"\\e[1;32m$NEW_FILENAME already exists, Skipping download\\e[0m\"\n    else\n        download_with_fallback \"$URL\" \"$NEW_FILENAME\"\n    fi\n    \n    chmod +x \"$NEW_FILENAME\"\n    FILE_MAP[$(echo \"$entry\" | cut -d ' ' -f 2)]=\"$NEW_FILENAME\"\ndone\nwait\n\noutput=$(./\"$(basename ${FILE_MAP[web]})\" generate reality-keypair)\nprivate_key=$(echo \"${output}\" | awk '/PrivateKey:/ {print $2}')\npublic_key=$(echo \"${output}\" | awk '/PublicKey:/ {print $2}')\necho \"${private_key}\" > private_key.txt\necho \"${public_key}\" > public_key.txt\n\nopenssl ecparam -genkey -name prime256v1 -out \"private.key\"\nopenssl req -new -x509 -days 3650 -key \"private.key\" -out \"cert.pem\" -subj \"/CN=$USERNAME.serv00.net\"\n\nnb=$(hostname | cut -d '.' -f 1 | tr -d 's')\nif [ \"$nb\" == \"14\" ]; then\nytb='\"jnn-pa.googleapis.com\",'\nfi\n\n  cat > config.json << EOF\n{\n  \"log\": {\n    \"disabled\": true,\n    \"level\": \"info\",\n    \"timestamp\": true\n  },\n    \"inbounds\": [\n    {\n       \"tag\": \"hysteria-in\",\n       \"type\": \"hysteria2\",\n       \"listen\": \"$IP\",\n       \"listen_port\": $hy2_port,\n       \"users\": [\n         {\n             \"password\": \"$UUID\"\n         }\n     ],\n     \"masquerade\": \"https://www.bing.com\",\n     \"ignore_client_bandwidth\":false,\n     \"tls\": {\n         \"enabled\": true,\n         \"alpn\": [\n             \"h3\"\n         ],\n         \"certificate_path\": \"cert.pem\",\n         \"key_path\": \"private.key\"\n        }\n    },\n    {\n        \"tag\": \"vless-reality-vesion\",\n        \"type\": \"vless\",\n        \"listen\": \"::\",\n        \"listen_port\": $vless_port,\n        \"users\": [\n            {\n              \"uuid\": \"$UUID\",\n              \"flow\": \"xtls-rprx-vision\"\n            }\n        ],\n        \"tls\": {\n            \"enabled\": true,\n            \"server_name\": \"$reym\",\n            \"reality\": {\n                \"enabled\": true,\n                \"handshake\": {\n                    \"server\": \"$reym\",\n                    \"server_port\": 443\n                },\n                \"private_key\": \"$private_key\",\n                \"short_id\": [\n                  \"\"\n                ]\n            }\n        }\n    },\n{\n      \"tag\": \"vmess-ws-in\",\n      \"type\": \"vmess\",\n      \"listen\": \"::\",\n      \"listen_port\": $vmess_port,\n      \"users\": [\n      {\n        \"uuid\": \"$UUID\"\n      }\n    ],\n    \"transport\": {\n      \"type\": \"ws\",\n      \"path\": \"$UUID-vm\",\n      \"early_data_header_name\": \"Sec-WebSocket-Protocol\"\n      }\n    }\n ],\n    \"outbounds\": [\n     {\n        \"type\": \"wireguard\",\n        \"tag\": \"wg\",\n        \"server\": \"162.159.192.200\",\n        \"server_port\": 4500,\n        \"local_address\": [\n                \"172.16.0.2/32\",\n                \"2606:4700:110:8f77:1ca9:f086:846c:5f9e/128\"\n        ],\n        \"private_key\": \"wIxszdR2nMdA7a2Ul3XQcniSfSZqdqjPb6w6opvf5AU=\",\n        \"peer_public_key\": \"bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=\",\n        \"reserved\": [\n            126,\n            246,\n            173\n        ]\n    },\n    {\n      \"type\": \"direct\",\n      \"tag\": \"direct\"\n    },\n    {\n      \"type\": \"block\",\n      \"tag\": \"block\"\n    }\n  ],\n   \"route\": {\n    \"rules\": [\n    {\n     \"domain\": [\n     $ytb\n     \"oh.my.god\"\n      ],\n     \"outbound\": \"wg\"\n    }\n    ],\n    \"final\": \"direct\"\n    }  \n}\nEOF\n\nif [ -e \"$(basename ${FILE_MAP[web]})\" ]; then\n   echo \"$(basename ${FILE_MAP[web]})\" > sb.txt\n   sbb=$(cat sb.txt)\n    nohup ./\"$sbb\" run -c config.json >/dev/null 2>&1 &\n    sleep 5\nif pgrep -x \"$sbb\" > /dev/null; then\n    green \"$sbb 主进程已启动\"\nelse\nfor ((i=1; i<=5; i++)); do\n    red \"$sbb 主进程未启动, 重启中... (尝试次数: $i)\"\n    pkill -x \"$sbb\"\n    nohup ./\"$sbb\" run -c config.json >/dev/null 2>&1 &\n    sleep 5\n    if pgrep -x \"$sbb\" > /dev/null; then\n        purple \"$sbb 主进程已成功重启\"\n        break\n    fi\n    if [[ $i -eq 5 ]]; then\n        red \"$sbb 主进程重启失败\"\n    fi\ndone\nfi\nfi\n\nif [ -e \"$(basename ${FILE_MAP[bot]})\" ]; then\n   echo \"$(basename ${FILE_MAP[bot]})\" > ag.txt\n   agg=$(cat ag.txt)\n    rm -rf boot.log\n    if [[ $ARGO_AUTH =~ ^[A-Z0-9a-z=]{120,250}$ ]]; then\n      args=\"tunnel --edge-ip-version auto --no-autoupdate --protocol http2 run --token ${ARGO_AUTH}\"\n    elif [[ $ARGO_AUTH =~ TunnelSecret ]]; then\n      args=\"tunnel --edge-ip-version auto --config tunnel.yml run\"\n    else\n     args=\"tunnel --edge-ip-version auto --no-autoupdate --protocol http2 --logfile boot.log --loglevel info --url http://localhost:$vmess_port\"\n    fi\n    nohup ./\"$agg\" $args >/dev/null 2>&1 &\n    sleep 10\nif pgrep -x \"$agg\" > /dev/null; then\n    green \"$agg Arog进程已启动\"\nelse\n    red \"$agg Argo进程未启动, 重启中...\"\n    pkill -x \"$agg\"\n    nohup ./\"$agg\" \"${args}\" >/dev/null 2>&1 &\n    sleep 5\n    purple \"$agg Argo进程已重启\"\nfi\nfi\nsleep 2\nif ! pgrep -x \"$(cat sb.txt)\" > /dev/null; then\nred \"主进程未启动，根据以下情况一一排查\"\nyellow \"1、网页端权限是否开启\"\nyellow \"2、端口是否设置错误(2个TCP、1个UDP)\"\nyellow \"3、尝试更换网页端3个端口并重装\"\nyellow \"4、选择5重置\"\nyellow \"5、当前Serv00服务器炸了？等会再试\"\nred \"6、以上都试了，哥直接躺平，交给进程保活，过会再来看\"\nsleep 6\nfi\n}\n\nget_argodomain() {\n  if [[ -n $ARGO_AUTH ]]; then\n    echo \"$ARGO_DOMAIN\" > gdym.log\n    echo \"$ARGO_DOMAIN\"\n  else\n    local retry=0\n    local max_retries=6\n    local argodomain=\"\"\n    while [[ $retry -lt $max_retries ]]; do\n    ((retry++)) \n    argodomain=$(grep -oE 'https://[[:alnum:]+\\.-]+\\.trycloudflare\\.com' boot.log 2>/dev/null | sed 's@https://@@')\n      if [[ -n $argodomain ]]; then\n        break\n      fi\n      sleep 2\n    done  \n    if [ -z ${argodomain} ]; then\n    argodomain=\"Argo临时域名暂时获取失败，Argo节点暂不可用\"\n    fi\n    echo \"$argodomain\"\n  fi\n}\n\nget_links(){\nargodomain=$(get_argodomain)\necho -e \"\\e[1;32mArgo域名：\\e[1;35m${argodomain}\\e[0m\\n\"\nISP=$(curl -sL --max-time 5 https://speed.cloudflare.com/meta | awk -F\\\" '{print $26}' | sed -e 's/ /_/g' || echo \"0\")\nget_name() { if [ \"$HOSTNAME\" = \"s1.ct8.pl\" ]; then SERVER=\"CT8\"; else SERVER=$(echo \"$HOSTNAME\" | cut -d '.' -f 1); fi; echo \"$SERVER\"; }\nNAME=\"$ISP-$(get_name)\"\nrm -rf jh.txt\nvl_link=\"vless://$UUID@$IP:$vless_port?encryption=none&flow=xtls-rprx-vision&security=reality&sni=$reym&fp=chrome&pbk=$public_key&type=tcp&headerType=none#$NAME-reality\"\necho \"$vl_link\" >> jh.txt\nvmws_link=\"vmess://$(echo \"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"$NAME-vmess-ws\\\", \\\"add\\\": \\\"$IP\\\", \\\"port\\\": \\\"$vmess_port\\\", \\\"id\\\": \\\"$UUID\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"auto\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"none\\\", \\\"host\\\": \\\"\\\", \\\"path\\\": \\\"/$UUID-vm?ed=2048\\\", \\\"tls\\\": \\\"\\\", \\\"sni\\\": \\\"\\\", \\\"alpn\\\": \\\"\\\", \\\"fp\\\": \\\"\\\"}\" | base64 -w0)\"\necho \"$vmws_link\" >> jh.txt\nvmatls_link=\"vmess://$(echo \"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"$NAME-vmess-ws-tls-argo\\\", \\\"add\\\": \\\"icook.hk\\\", \\\"port\\\": \\\"8443\\\", \\\"id\\\": \\\"$UUID\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"auto\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"none\\\", \\\"host\\\": \\\"$argodomain\\\", \\\"path\\\": \\\"/$UUID-vm?ed=2048\\\", \\\"tls\\\": \\\"tls\\\", \\\"sni\\\": \\\"$argodomain\\\", \\\"alpn\\\": \\\"\\\", \\\"fp\\\": \\\"\\\"}\" | base64 -w0)\"\necho \"$vmatls_link\" >> jh.txt\nvma_link=\"vmess://$(echo \"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"$NAME-vmess-ws-argo\\\", \\\"add\\\": \\\"icook.hk\\\", \\\"port\\\": \\\"8880\\\", \\\"id\\\": \\\"$UUID\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"auto\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"none\\\", \\\"host\\\": \\\"$argodomain\\\", \\\"path\\\": \\\"/$UUID-vm?ed=2048\\\", \\\"tls\\\": \\\"\\\"}\" | base64 -w0)\"\necho \"$vma_link\" >> jh.txt\nhy2_link=\"hysteria2://$UUID@$IP:$hy2_port?sni=www.bing.com&alpn=h3&insecure=1#$NAME-hy2\"\necho \"$hy2_link\" >> jh.txt\nurl=$(cat jh.txt 2>/dev/null)\nbaseurl=$(echo -e \"$url\" | base64 -w 0)\necho\nsleep 2\ncat > list.txt <<EOF\n=================================================================================================\n\n一、Vless-reality分享链接如下：\n$vl_link\n\n注意：如果之前输入的reality域名为CF域名，将激活以下功能：\n可应用在 https://github.com/yonggekkk/Cloudflare_vless_trojan 项目中创建CF vless/trojan 节点\n1、Proxyip(带端口)信息如下：\n方式一全局应用：设置变量名：proxyip    设置变量值：$IP:$vless_port  \n方式二单节点应用：path路径改为：/pyip=$IP:$vless_port\nCF节点的TLS可开可关\nCF节点落地到CF网站的地区为：$IP所在地区\n\n2、非标端口反代IP信息如下：\n客户端优选IP地址为：$IP，端口：$vless_port\nCF节点的TLS必须开启\nCF节点落地到非CF网站的地区为：$IP所在地区\n\n注：如果serv00的IP被墙，proxyip依旧有效，但用于客户端地址与端口的非标端口反代IP将不可用\n注：可能有大佬会扫Serv00的反代IP作为其共享IP库或者出售，请慎重将reality域名设置为CF域名\n-------------------------------------------------------------------------------------------------\n\n\n二、Vmess-ws分享链接三形态如下：\n\n1、Vmess-ws主节点分享链接如下：\n(该节点默认不支持CDN，如果设置为CDN回源(需域名)：客户端地址可自行修改优选IP/域名，7个80系端口随便换，被墙依旧能用！)\n$vmws_link\n\nArgo域名：${argodomain}\n如果上面Argo临时域名未生成，以下 2 与 3 的Argo节点将不可用 (打开Argo固定/临时域名网页，显示HTTP ERROR 404说明正常可用)\n\n2、Vmess-ws-tls_Argo分享链接如下： \n(该节点为CDN优选IP节点，客户端地址可自行修改优选IP/域名，6个443系端口随便换，被墙依旧能用！)\n$vmatls_link\n\n3、Vmess-ws_Argo分享链接如下：\n(该节点为CDN优选IP节点，客户端地址可自行修改优选IP/域名，7个80系端口随便换，被墙依旧能用！)\n$vma_link\n-------------------------------------------------------------------------------------------------\n\n\n三、HY2分享链接如下：\n$hy2_link\n-------------------------------------------------------------------------------------------------\n\n\n四、以上五个节点的聚合通用分享链接如下：\n$baseurl\n-------------------------------------------------------------------------------------------------\n\n\n五、查看sing-box与clash-meta的订阅配置文件，请进入主菜单选择4\n-------------------------------------------------------------------------------------------------\n\n=================================================================================================\n\nEOF\ncat list.txt\n\ncat > sing_box.json <<EOF\n{\n  \"log\": {\n    \"disabled\": false,\n    \"level\": \"info\",\n    \"timestamp\": true\n  },\n  \"experimental\": {\n    \"clash_api\": {\n      \"external_controller\": \"127.0.0.1:9090\",\n      \"external_ui\": \"ui\",\n      \"external_ui_download_url\": \"\",\n      \"external_ui_download_detour\": \"\",\n      \"secret\": \"\",\n      \"default_mode\": \"Rule\"\n       },\n      \"cache_file\": {\n            \"enabled\": true,\n            \"path\": \"cache.db\",\n            \"store_fakeip\": true\n        }\n    },\n    \"dns\": {\n        \"servers\": [\n            {\n                \"tag\": \"proxydns\",\n                \"address\": \"tls://8.8.8.8/dns-query\",\n                \"detour\": \"select\"\n            },\n            {\n                \"tag\": \"localdns\",\n                \"address\": \"h3://223.5.5.5/dns-query\",\n                \"detour\": \"direct\"\n            },\n            {\n                \"tag\": \"dns_fakeip\",\n                \"address\": \"fakeip\"\n            }\n        ],\n        \"rules\": [\n            {\n                \"outbound\": \"any\",\n                \"server\": \"localdns\",\n                \"disable_cache\": true\n            },\n            {\n                \"clash_mode\": \"Global\",\n                \"server\": \"proxydns\"\n            },\n            {\n                \"clash_mode\": \"Direct\",\n                \"server\": \"localdns\"\n            },\n            {\n                \"rule_set\": \"geosite-cn\",\n                \"server\": \"localdns\"\n            },\n            {\n                 \"rule_set\": \"geosite-geolocation-!cn\",\n                 \"server\": \"proxydns\"\n            },\n             {\n                \"rule_set\": \"geosite-geolocation-!cn\",         \n                \"query_type\": [\n                    \"A\",\n                    \"AAAA\"\n                ],\n                \"server\": \"dns_fakeip\"\n            }\n          ],\n           \"fakeip\": {\n           \"enabled\": true,\n           \"inet4_range\": \"198.18.0.0/15\",\n           \"inet6_range\": \"fc00::/18\"\n         },\n          \"independent_cache\": true,\n          \"final\": \"proxydns\"\n        },\n      \"inbounds\": [\n    {\n      \"type\": \"tun\",\n           \"tag\": \"tun-in\",\n\t  \"address\": [\n      \"172.19.0.1/30\",\n\t  \"fd00::1/126\"\n      ],\n      \"auto_route\": true,\n      \"strict_route\": true,\n      \"sniff\": true,\n      \"sniff_override_destination\": true,\n      \"domain_strategy\": \"prefer_ipv4\"\n    }\n  ],\n  \"outbounds\": [\n    {\n      \"tag\": \"select\",\n      \"type\": \"selector\",\n      \"default\": \"auto\",\n      \"outbounds\": [\n        \"auto\",\n        \"vless-$NAME\",\n        \"vmess-$NAME\",\n        \"hy2-$NAME\",\n\"vmess-tls-argo-$NAME\",\n\"vmess-argo-$NAME\"\n      ]\n    },\n    {\n      \"type\": \"vless\",\n      \"tag\": \"vless-$NAME\",\n      \"server\": \"$IP\",\n      \"server_port\": $vless_port,\n      \"uuid\": \"$UUID\",\n      \"packet_encoding\": \"xudp\",\n      \"flow\": \"xtls-rprx-vision\",\n      \"tls\": {\n        \"enabled\": true,\n        \"server_name\": \"$reym\",\n        \"utls\": {\n          \"enabled\": true,\n          \"fingerprint\": \"chrome\"\n        },\n      \"reality\": {\n          \"enabled\": true,\n          \"public_key\": \"$public_key\",\n          \"short_id\": \"\"\n        }\n      }\n    },\n{\n            \"server\": \"$IP\",\n            \"server_port\": $vmess_port,\n            \"tag\": \"vmess-$NAME\",\n            \"tls\": {\n                \"enabled\": false,\n                \"server_name\": \"www.bing.com\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"www.bing.com\"\n                    ]\n                },\n                \"path\": \"/$UUID-vm\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$UUID\"\n        },\n\n    {\n        \"type\": \"hysteria2\",\n        \"tag\": \"hy2-$NAME\",\n        \"server\": \"$IP\",\n        \"server_port\": $hy2_port,\n        \"password\": \"$UUID\",\n        \"tls\": {\n            \"enabled\": true,\n            \"server_name\": \"www.bing.com\",\n            \"insecure\": true,\n            \"alpn\": [\n                \"h3\"\n            ]\n        }\n    },\n{\n            \"server\": \"icook.hk\",\n            \"server_port\": 8443,\n            \"tag\": \"vmess-tls-argo-$NAME\",\n            \"tls\": {\n                \"enabled\": true,\n                \"server_name\": \"$argodomain\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argodomain\"\n                    ]\n                },\n                \"path\": \"/$UUID-vm\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$UUID\"\n        },\n{\n            \"server\": \"icook.hk\",\n            \"server_port\": 8880,\n            \"tag\": \"vmess-argo-$NAME\",\n            \"tls\": {\n                \"enabled\": false,\n                \"server_name\": \"$argodomain\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argodomain\"\n                    ]\n                },\n                \"path\": \"/$UUID-vm\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$UUID\"\n        },\n    {\n      \"tag\": \"direct\",\n      \"type\": \"direct\"\n    },\n    {\n      \"tag\": \"auto\",\n      \"type\": \"urltest\",\n      \"outbounds\": [\n        \"vless-$NAME\",\n        \"vmess-$NAME\",\n        \"hy2-$NAME\",\n\"vmess-tls-argo-$NAME\",\n\"vmess-argo-$NAME\"\n      ],\n      \"url\": \"https://www.gstatic.com/generate_204\",\n      \"interval\": \"1m\",\n      \"tolerance\": 50,\n      \"interrupt_exist_connections\": false\n    }\n  ],\n  \"route\": {\n      \"rule_set\": [\n            {\n                \"tag\": \"geosite-geolocation-!cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/geolocation-!cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            },\n            {\n                \"tag\": \"geosite-cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/geolocation-cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            },\n            {\n                \"tag\": \"geoip-cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geoip/cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            }\n        ],\n    \"auto_detect_interface\": true,\n    \"final\": \"select\",\n    \"rules\": [\n      {\n      \"inbound\": \"tun-in\",\n      \"action\": \"sniff\"\n      },\n      {\n      \"protocol\": \"dns\",\n      \"action\": \"hijack-dns\"\n      },\n      {\n      \"port\": 443,\n      \"network\": \"udp\",\n      \"action\": \"reject\"\n      },\n      {\n        \"clash_mode\": \"Direct\",\n        \"outbound\": \"direct\"\n      },\n      {\n        \"clash_mode\": \"Global\",\n        \"outbound\": \"select\"\n      },\n      {\n        \"rule_set\": \"geoip-cn\",\n        \"outbound\": \"direct\"\n      },\n      {\n        \"rule_set\": \"geosite-cn\",\n        \"outbound\": \"direct\"\n      },\n      {\n      \"ip_is_private\": true,\n      \"outbound\": \"direct\"\n      },\n      {\n        \"rule_set\": \"geosite-geolocation-!cn\",\n        \"outbound\": \"select\"\n      }\n    ]\n  },\n    \"ntp\": {\n    \"enabled\": true,\n    \"server\": \"time.apple.com\",\n    \"server_port\": 123,\n    \"interval\": \"30m\",\n    \"detour\": \"direct\"\n  }\n}\nEOF\n\ncat > clash_meta.yaml <<EOF\nport: 7890\nallow-lan: true\nmode: rule\nlog-level: info\nunified-delay: true\nglobal-client-fingerprint: chrome\ndns:\n  enable: true\n  listen: :53\n  ipv6: true\n  enhanced-mode: fake-ip\n  fake-ip-range: 198.18.0.1/16\n  default-nameserver: \n    - 223.5.5.5\n    - 8.8.8.8\n  nameserver:\n    - https://dns.alidns.com/dns-query\n    - https://doh.pub/dns-query\n  fallback:\n    - https://1.0.0.1/dns-query\n    - tls://dns.google\n  fallback-filter:\n    geoip: true\n    geoip-code: CN\n    ipcidr:\n      - 240.0.0.0/4\n\nproxies:\n- name: vless-reality-vision-$NAME               \n  type: vless\n  server: $IP                           \n  port: $vless_port                                \n  uuid: $UUID   \n  network: tcp\n  udp: true\n  tls: true\n  flow: xtls-rprx-vision\n  servername: $reym                 \n  reality-opts: \n    public-key: $public_key                      \n  client-fingerprint: chrome                  \n\n- name: vmess-ws-$NAME                         \n  type: vmess\n  server: $IP                       \n  port: $vmess_port                                     \n  uuid: $UUID       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: false\n  network: ws\n  servername: www.bing.com                    \n  ws-opts:\n    path: \"/$UUID-vm\"                             \n    headers:\n      Host: www.bing.com                     \n\n- name: hysteria2-$NAME                            \n  type: hysteria2                                      \n  server: $IP                               \n  port: $hy2_port                                \n  password: $UUID                          \n  alpn:\n    - h3\n  sni: www.bing.com                               \n  skip-cert-verify: true\n  fast-open: true\n\n- name: vmess-tls-argo-$NAME                         \n  type: vmess\n  server: icook.hk                        \n  port: 8443                                     \n  uuid: $UUID       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: true\n  network: ws\n  servername: $argodomain                    \n  ws-opts:\n    path: \"/$UUID-vm\"                             \n    headers:\n      Host: $argodomain\n\n- name: vmess-argo-$NAME                         \n  type: vmess\n  server: icook.hk                        \n  port: 8880                                     \n  uuid: $UUID       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: false\n  network: ws\n  servername: $argodomain                   \n  ws-opts:\n    path: \"/$UUID-vm\"                             \n    headers:\n      Host: $argodomain \n\nproxy-groups:\n- name: 负载均衡\n  type: load-balance\n  url: https://www.gstatic.com/generate_204\n  interval: 300\n  strategy: round-robin\n  proxies:\n    - vless-reality-vision-$NAME                              \n    - vmess-ws-$NAME\n    - hysteria2-$NAME\n    - vmess-tls-argo-$NAME\n    - vmess-argo-$NAME\n\n- name: 自动选择\n  type: url-test\n  url: https://www.gstatic.com/generate_204\n  interval: 300\n  tolerance: 50\n  proxies:\n    - vless-reality-vision-$NAME                              \n    - vmess-ws-$NAME\n    - hysteria2-$NAME\n    - vmess-tls-argo-$NAME\n    - vmess-argo-$NAME\n    \n- name: 🌍选择代理节点\n  type: select\n  proxies:\n    - 负载均衡                                         \n    - 自动选择\n    - DIRECT\n    - vless-reality-vision-$NAME                              \n    - vmess-ws-$NAME\n    - hysteria2-$NAME\n    - vmess-tls-argo-$NAME\n    - vmess-argo-$NAME\nrules:\n  - GEOIP,LAN,DIRECT\n  - GEOIP,CN,DIRECT\n  - MATCH,🌍选择代理节点\n  \nEOF\nsleep 2\nrm -rf sb.log core tunnel.yml tunnel.json fake_useragent_0.2.0.json\n}\n\nshowlist(){\nif [[ -e $WORKDIR/list.txt ]]; then\ngreen \"查看节点及proxyip/非标端口反代ip信息\"\ncat $WORKDIR/list.txt\nelse\nred \"未安装sing-box\" && exit\nfi\n}\n\nshowsbclash(){\nif [[ -e $WORKDIR/sing_box.json ]]; then\ngreen \"Sing_box配置文件如下，可上传到订阅类客户端上使用：\"\nyellow \"其中Argo节点为CDN优选IP节点，server地址可自行修改优选IP/域名，被墙依旧能用！\"\nsleep 2\ncat $WORKDIR/sing_box.json \necho\necho\ngreen \"Clash_meta配置文件如下，可上传到订阅类客户端上使用：\"\nyellow \"其中Argo节点为CDN优选IP节点，server地址可自行修改优选IP/域名，被墙依旧能用！\"\nsleep 2\ncat $WORKDIR/clash_meta.yaml\necho\nelse\nred \"未安装sing-box\" && exit\nfi\n}\n\nservkeep() {\ngreen \"安装进程保活\"\ncurl -sSL https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/serv00keep.sh -o serv00keep.sh && chmod +x serv00keep.sh\nsed -i '' -e \"14s|''|'$UUID'|\" serv00keep.sh\nsed -i '' -e \"17s|''|'$vless_port'|\" serv00keep.sh\nsed -i '' -e \"18s|''|'$vmess_port'|\" serv00keep.sh\nsed -i '' -e \"19s|''|'$hy2_port'|\" serv00keep.sh\nsed -i '' -e \"20s|''|'$IP'|\" serv00keep.sh\nsed -i '' -e \"21s|''|'$reym'|\" serv00keep.sh\nif [ ! -f \"$WORKDIR/boot.log\" ]; then\nsed -i '' -e \"15s|''|'${ARGO_DOMAIN}'|\" serv00keep.sh\nsed -i '' -e \"16s|''|'${ARGO_AUTH}'|\" serv00keep.sh\nfi\nif ! crontab -l 2>/dev/null | grep -q 'serv00keep'; then\nif [ -f \"$WORKDIR/boot.log\" ] || grep -q \"trycloudflare.com\" \"$WORKDIR/boot.log\" 2>/dev/null; then\ncheck_process=\"! ps aux | grep '[c]onfig' > /dev/null || ! ps aux | grep [l]ocalhost > /dev/null\"\nelse\ncheck_process=\"! ps aux | grep '[c]onfig' > /dev/null || ! ps aux | grep [t]oken > /dev/null\"\nfi\n(crontab -l 2>/dev/null; echo \"*/2 * * * * if $check_process; then /bin/bash serv00keep.sh; fi\") | crontab -\nfi\ngreen \"主进程+Argo进程保活安装完毕，默认每2分钟执行一次，运行 crontab -e 可自行修改保活执行间隔\" && sleep 2\n}\n\nokip(){\n    IP_LIST=($(devil vhost list | awk '/^[0-9]+/ {print $1}'))\n    API_URL=\"https://status.eooce.com/api\"\n    IP=\"\"\n    THIRD_IP=${IP_LIST[2]}\n    RESPONSE=$(curl -s --max-time 2 \"${API_URL}/${THIRD_IP}\")\n    if [[ $(echo \"$RESPONSE\" | jq -r '.status') == \"Available\" ]]; then\n        IP=$THIRD_IP\n    else\n        FIRST_IP=${IP_LIST[0]}\n        RESPONSE=$(curl -s --max-time 2 \"${API_URL}/${FIRST_IP}\")\n        \n        if [[ $(echo \"$RESPONSE\" | jq -r '.status') == \"Available\" ]]; then\n            IP=$FIRST_IP\n        else\n            IP=${IP_LIST[1]}\n        fi\n    fi\n    echo \"$IP\"\n    }\n\n#主菜单\nmenu() {\n   clear\n   echo \"=========================================================\"\n   purple \"修改自Serv00|ct8老王sing-box安装脚本\"\n   purple \"转载请著名出自老王，请勿滥用\"\n   green \"甬哥Github项目  ：github.com/yonggekkk\"\n   green \"甬哥Blogger博客 ：ygkkk.blogspot.com\"\n   green \"甬哥YouTube频道 ：www.youtube.com/@ygkkk\"\n   green \"一键三协议共存：vless-reality、Vmess-ws(Argo)、hysteria2\"\n   green \"当前脚本版本：V25.1.8  快捷方式：bash serv00.sh\"\n   echo \"=========================================================\"\n   green  \"1. 安装sing-box\"\n   echo   \"---------------------------------------------------------\"\n   red    \"2. 卸载sing-box\"\n   echo   \"---------------------------------------------------------\"\n   green  \"3. 查看节点及proxyip/非标端口反代ip\"\n   echo   \"---------------------------------------------------------\"\n   green  \"4. 查看sing-box与clash-meta配置文件\"\n   echo   \"---------------------------------------------------------\"\n   yellow \"5. 重置并清理所有服务进程(系统初始化)\"\n   echo   \"---------------------------------------------------------\"\n   red    \"0. 退出脚本\"\n   echo   \"=========================================================\"\nnb=$(echo \"$HOSTNAME\" | cut -d '.' -f 1 | tr -d 's')\nym=(\"$HOSTNAME\" \"cache$nb.serv00.com\" \"web$nb.serv00.com\")\nrm -rf $WORKDIR/ip.txt\nfor ym in \"${ym[@]}\"; do\n# 引用frankiejun API\nresponse=$(curl -sL --connect-timeout 5 --max-time 7 \"https://ss.botai.us.kg/api/getip?host=$ym\")\nif [[ -z \"$response\" || \"$response\" == *unknown* ]]; then\nfor ip in \"${ym[@]}\"; do\ndig @8.8.8.8 +time=2 +short $ip >> $WORKDIR/ip.txt\nsleep 1  \ndone\nbreak\nelse\necho \"$response\" | while IFS='|' read -r ip status; do\nif [[ $status == \"Accessible\" ]]; then\necho \"$ip: 可用\"  >> $WORKDIR/ip.txt\nelse\necho \"$ip: 被墙 (Argo与CDN回源节点、proxyip依旧有效)\"  >> $WORKDIR/ip.txt\nfi\t\ndone\nfi\ndone\nsnb=$(hostname | awk -F '.' '{print $1}')\ngreen \"Serv00服务器名称：$snb\"\ngreen \"当前可选择的IP如下：\"\ncat $WORKDIR/ip.txt\necho\nif [[ -e $WORKDIR/list.txt ]]; then\ngreen \"已安装sing-box\"\nps aux | grep '[c]onfig' > /dev/null && green \"主进程运行正常\" || yellow \"主进程启动中…………2分钟后可再次进入脚本查看\"\nif [ -f \"$WORKDIR/boot.log\" ] && grep -q \"trycloudflare.com\" \"$WORKDIR/boot.log\" 2>/dev/null && ps aux | grep [l]ocalhost > /dev/null; then\nargosl=$(grep -oE 'https://[[:alnum:]+\\.-]+\\.trycloudflare\\.com' $WORKDIR/boot.log 2>/dev/null | sed 's@https://@@')\ncheckhttp=$(curl -o /dev/null -s -w \"%{http_code}\\n\" \"https://$argosl\")\n[ \"$checkhttp\" -eq 404 ] && check=\"域名有效\" || check=\"域名可能无效\"\ngreen \"当前Argo临时域名：$argosl  $check\"\nfi\nif [ -f \"$WORKDIR/boot.log\" ] && ! ps aux | grep [l]ocalhost > /dev/null; then\nyellow \"当前Argo临时域名暂时不存在，后台会继续生成有效的临时域名，稍后可再次进入脚本查看\"\nfi\nif ps aux | grep [t]oken > /dev/null; then\nargogd=$(cat $WORKDIR/gdym.log 2>/dev/null)\ncheckhttp=$(curl -o /dev/null -s -w \"%{http_code}\\n\" \"https://$argogd\")\n[ \"$checkhttp\" -eq 404 ] && check=\"域名有效\" || check=\"域名可能无效\"\ngreen \"当前Argo固定域名：$argogd  $check\"\nfi\nif [ ! -f \"$WORKDIR/boot.log\" ] && ! ps aux | grep [t]oken > /dev/null; then\nyellow \"当前Argo固定域名：$(cat $WORKDIR/gdym.log 2>/dev/null)，请检查相关参数是否输入有误，建议卸载重装\"\nfi\nif ! crontab -l 2>/dev/null | grep -q 'serv00keep'; then\nif [ -f \"$WORKDIR/boot.log\" ] || grep -q \"trycloudflare.com\" \"$WORKDIR/boot.log\" 2>/dev/null; then\ncheck_process=\"! ps aux | grep '[c]onfig' > /dev/null || ! ps aux | grep [l]ocalhost > /dev/null\"\nelse\ncheck_process=\"! ps aux | grep '[c]onfig' > /dev/null || ! ps aux | grep [t]oken > /dev/null\"\nfi\n(crontab -l 2>/dev/null; echo \"*/2 * * * * if $check_process; then /bin/bash serv00keep.sh; fi\") | crontab -\nyellow \"发现Cron保活可能被重置清空！现已修复成功！\"\nyellow \"主进程与Argo进程启动中…………2分钟后可再次进入脚本查看\"\nelse\ngreen \"Cron保活运行正常\"\nfi\nelse\nred \"未安装sing-box，请选择 1 进行安装\" \nfi\ncurl -sSL https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/serv00.sh -o serv00.sh && chmod +x serv00.sh\n   echo   \"=========================================================\"\n   reading \"请输入选择【0-5】: \" choice\n   echo \"\"\n    case \"${choice}\" in\n        1) install_singbox ;;\n        2) uninstall_singbox ;; \n        3) showlist ;;\n\t4) showsbclash ;;\n        5) kill_all_tasks ;;\n\t0) exit 0 ;;\n        *) red \"无效的选项，请输入 0 到 5\" ;;\n    esac\n}\nmenu\n"
        },
        {
          "name": "serv00keep.sh",
          "type": "blob",
          "size": 28.4501953125,
          "content": "#!/bin/bash\n# 定义颜色\nre=\"\\033[0m\"\nred=\"\\033[1;91m\"\ngreen=\"\\e[1;32m\"\nyellow=\"\\e[1;33m\"\npurple=\"\\e[1;35m\"\nred() { echo -e \"\\e[1;91m$1\\033[0m\"; }\ngreen() { echo -e \"\\e[1;32m$1\\033[0m\"; }\nyellow() { echo -e \"\\e[1;33m$1\\033[0m\"; }\npurple() { echo -e \"\\e[1;35m$1\\033[0m\"; }\nreading() { read -p \"$(red \"$1\")\" \"$2\"; }\nexport LC_ALL=C\nexport UUID=${UUID:-''}  \nexport ARGO_DOMAIN=${ARGO_DOMAIN:-''}   \nexport ARGO_AUTH=${ARGO_AUTH:-''}     \nexport vless_port=${vless_port:-''}    \nexport vmess_port=${vmess_port:-''}  \nexport hy2_port=${hy2_port:-''}       \nexport IP=${IP:-''}                  \nexport reym=${reym:-''}\nexport reset=${reset:-''}\n\nif [[ \"$reset\" =~ ^[Yy]$ ]]; then\ncrontab -l | grep -v \"serv00keep\" >rmcron\ncrontab rmcron >/dev/null 2>&1\nrm rmcron\nbash -c 'ps aux | grep $(whoami) | grep -v \"sshd\\|bash\\|grep\" | awk \"{print \\$2}\" | xargs -r kill -9 >/dev/null 2>&1' >/dev/null 2>&1\nfind ~ -type f -exec chmod 644 {} \\; 2>/dev/null\nfind ~ -type d -exec chmod 755 {} \\; 2>/dev/null\nfind ~ -type f -exec rm -f {} \\; 2>/dev/null\nfind ~ -type d -empty -exec rmdir {} \\; 2>/dev/null\nfind ~ -exec rm -rf {} \\; 2>/dev/null\necho \"重置系统完成\"\nfi\nsleep 2\nUSERNAME=$(whoami)\nHOSTNAME=$(hostname)\n[[ \"$HOSTNAME\" == \"s1.ct8.pl\" ]] && export WORKDIR=\"domains/${USERNAME}.ct8.pl/logs\" || export WORKDIR=\"domains/${USERNAME}.serv00.net/logs\"\n[ -d \"$WORKDIR\" ] || (mkdir -p \"$WORKDIR\" && chmod 777 \"$WORKDIR\")\n\nread_ip(){\nnb=$(echo \"$HOSTNAME\" | cut -d '.' -f 1 | tr -d 's')\nym=(\"$HOSTNAME\" \"cache$nb.serv00.com\" \"web$nb.serv00.com\")\nrm -rf ip.txt\nfor ym in \"${ym[@]}\"; do\n# 引用frankiejun API\nresponse=$(curl -s \"https://ss.botai.us.kg/api/getip?host=$ym\")\nif [[ -z \"$response\" ]]; then\nfor ip in \"${ym[@]}\"; do\ndig @8.8.8.8 +time=2 +short $ip >> ip.txt\nsleep 1  \ndone\nbreak\nelse\necho \"$response\" | while IFS='|' read -r ip status; do\nif [[ $status == \"Accessible\" ]]; then\necho \"$ip: 可用\"  >> ip.txt\nelse\necho \"$ip: 被墙 (Argo与CDN回源节点、proxyip依旧有效)\"  >> ip.txt\nfi\t\ndone\nfi\ndone\nif [[ -z \"$IP\" ]]; then\nIP=$(grep -m 1 \"可用\" ip.txt | awk -F ':' '{print $1}')\nif [ -z \"$IP\" ]; then\nIP=$(okip)\nif [ -z \"$IP\" ]; then\nIP=$(head -n 1 ip.txt | awk -F ':' '{print $1}')\nfi\nfi\nfi\n}\n\nokip(){\n    IP_LIST=($(devil vhost list | awk '/^[0-9]+/ {print $1}'))\n    API_URL=\"https://status.eooce.com/api\"\n    IP=\"\"\n    THIRD_IP=${IP_LIST[2]}\n    RESPONSE=$(curl -s --max-time 2 \"${API_URL}/${THIRD_IP}\")\n    if [[ $(echo \"$RESPONSE\" | jq -r '.status') == \"Available\" ]]; then\n        IP=$THIRD_IP\n    else\n        FIRST_IP=${IP_LIST[0]}\n        RESPONSE=$(curl -s --max-time 2 \"${API_URL}/${FIRST_IP}\")\n        \n        if [[ $(echo \"$RESPONSE\" | jq -r '.status') == \"Available\" ]]; then\n            IP=$FIRST_IP\n        else\n            IP=${IP_LIST[1]}\n        fi\n    fi\n    echo \"$IP\"\n    }\n\n# Generating argo Config\nargo_configure() {\n  if [[ $ARGO_AUTH =~ TunnelSecret ]]; then\n    echo $ARGO_AUTH > tunnel.json\n    cat > tunnel.yml << EOF\ntunnel: $(cut -d\\\" -f12 <<< \"$ARGO_AUTH\")\ncredentials-file: tunnel.json\nprotocol: http2\n\ningress:\n  - hostname: $ARGO_DOMAIN\n    service: http://localhost:$vmess_port\n    originRequest:\n      noTLSVerify: true\n  - service: http_status:404\nEOF\n  fi\n}\n\n# Download Dependency Files\ndownload_and_run_singbox() {\nif [ ! -s sb.txt ] && [ ! -s ag.txt ]; then\n  ARCH=$(uname -m) && DOWNLOAD_DIR=\".\" && mkdir -p \"$DOWNLOAD_DIR\" && FILE_INFO=()\n  if [ \"$ARCH\" == \"arm\" ] || [ \"$ARCH\" == \"arm64\" ] || [ \"$ARCH\" == \"aarch64\" ]; then\n      FILE_INFO=(\"https://github.com/eooce/test/releases/download/arm64/sb web\" \"https://github.com/eooce/test/releases/download/arm64/bot13 bot\")\n  elif [ \"$ARCH\" == \"amd64\" ] || [ \"$ARCH\" == \"x86_64\" ] || [ \"$ARCH\" == \"x86\" ]; then\n      FILE_INFO=(\"https://github.com/yonggekkk/Cloudflare_vless_trojan/releases/download/serv00/sb web\" \"https://github.com/yonggekkk/Cloudflare_vless_trojan/releases/download/serv00/server bot\")\n  else\n      echo \"Unsupported architecture: $ARCH\"\n      exit 1\n  fi\n  \ndeclare -A FILE_MAP\ngenerate_random_name() {\n    local chars=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\n    local name=\"\"\n    for i in {1..6}; do\n        name=\"$name${chars:RANDOM%${#chars}:1}\"\n    done\n    echo \"$name\"\n}\n\ndownload_with_fallback() {\n    local URL=$1\n    local NEW_FILENAME=$2\n\n    curl -L -sS --max-time 2 -o \"$NEW_FILENAME\" \"$URL\" &\n    CURL_PID=$!\n    CURL_START_SIZE=$(stat -c%s \"$NEW_FILENAME\" 2>/dev/null || echo 0)\n    \n    sleep 1\n    CURL_CURRENT_SIZE=$(stat -c%s \"$NEW_FILENAME\" 2>/dev/null || echo 0)\n    \n    if [ \"$CURL_CURRENT_SIZE\" -le \"$CURL_START_SIZE\" ]; then\n        kill $CURL_PID 2>/dev/null\n        wait $CURL_PID 2>/dev/null\n        wget -q -O \"$NEW_FILENAME\" \"$URL\"\n        echo -e \"\\e[1;32mDownloading $NEW_FILENAME by wget\\e[0m\"\n    else\n        wait $CURL_PID\n        echo -e \"\\e[1;32mDownloading $NEW_FILENAME by curl\\e[0m\"\n    fi\n}\n\nfor entry in \"${FILE_INFO[@]}\"; do\n    URL=$(echo \"$entry\" | cut -d ' ' -f 1)\n    RANDOM_NAME=$(generate_random_name)\n    NEW_FILENAME=\"$DOWNLOAD_DIR/$RANDOM_NAME\"\n    \n    if [ -e \"$NEW_FILENAME\" ]; then\n        echo -e \"\\e[1;32m$NEW_FILENAME already exists, Skipping download\\e[0m\"\n    else\n        download_with_fallback \"$URL\" \"$NEW_FILENAME\"\n    fi\n    \n    chmod +x \"$NEW_FILENAME\"\n    FILE_MAP[$(echo \"$entry\" | cut -d ' ' -f 2)]=\"$NEW_FILENAME\"\ndone\nwait\nfi\n\nif [ ! -e private_key.txt ]; then\noutput=$(./\"$(basename ${FILE_MAP[web]})\" generate reality-keypair)\nprivate_key=$(echo \"${output}\" | awk '/PrivateKey:/ {print $2}')\npublic_key=$(echo \"${output}\" | awk '/PublicKey:/ {print $2}')\necho \"${private_key}\" > private_key.txt\necho \"${public_key}\" > public_key.txt\nfi\nprivate_key=$(<private_key.txt)\npublic_key=$(<public_key.txt)\n\nopenssl ecparam -genkey -name prime256v1 -out \"private.key\"\nopenssl req -new -x509 -days 3650 -key \"private.key\" -out \"cert.pem\" -subj \"/CN=$USERNAME.serv00.net\"\n\nnb=$(hostname | cut -d '.' -f 1 | tr -d 's')\nif [ \"$nb\" == \"14\" ]; then\nytb='\"jnn-pa.googleapis.com\",'\nfi\n\n  cat > config.json << EOF\n{\n  \"log\": {\n    \"disabled\": true,\n    \"level\": \"info\",\n    \"timestamp\": true\n  },\n    \"inbounds\": [\n    {\n       \"tag\": \"hysteria-in\",\n       \"type\": \"hysteria2\",\n       \"listen\": \"$IP\",\n       \"listen_port\": $hy2_port,\n       \"users\": [\n         {\n             \"password\": \"$UUID\"\n         }\n     ],\n     \"masquerade\": \"https://www.bing.com\",\n     \"ignore_client_bandwidth\":false,\n     \"tls\": {\n         \"enabled\": true,\n         \"alpn\": [\n             \"h3\"\n         ],\n         \"certificate_path\": \"cert.pem\",\n         \"key_path\": \"private.key\"\n        }\n    },\n    {\n        \"tag\": \"vless-reality-vesion\",\n        \"type\": \"vless\",\n        \"listen\": \"::\",\n        \"listen_port\": $vless_port,\n        \"users\": [\n            {\n              \"uuid\": \"$UUID\",\n              \"flow\": \"xtls-rprx-vision\"\n            }\n        ],\n        \"tls\": {\n            \"enabled\": true,\n            \"server_name\": \"$reym\",\n            \"reality\": {\n                \"enabled\": true,\n                \"handshake\": {\n                    \"server\": \"$reym\",\n                    \"server_port\": 443\n                },\n                \"private_key\": \"$private_key\",\n                \"short_id\": [\n                  \"\"\n                ]\n            }\n        }\n    },\n{\n      \"tag\": \"vmess-ws-in\",\n      \"type\": \"vmess\",\n      \"listen\": \"::\",\n      \"listen_port\": $vmess_port,\n      \"users\": [\n      {\n        \"uuid\": \"$UUID\"\n      }\n    ],\n    \"transport\": {\n      \"type\": \"ws\",\n      \"path\": \"$UUID-vm\",\n      \"early_data_header_name\": \"Sec-WebSocket-Protocol\"\n      }\n    }\n ],\n    \"outbounds\": [\n     {\n        \"type\": \"wireguard\",\n        \"tag\": \"wg\",\n        \"server\": \"162.159.192.200\",\n        \"server_port\": 4500,\n        \"local_address\": [\n                \"172.16.0.2/32\",\n                \"2606:4700:110:8f77:1ca9:f086:846c:5f9e/128\"\n        ],\n        \"private_key\": \"wIxszdR2nMdA7a2Ul3XQcniSfSZqdqjPb6w6opvf5AU=\",\n        \"peer_public_key\": \"bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=\",\n        \"reserved\": [\n            126,\n            246,\n            173\n        ]\n    },\n    {\n      \"type\": \"direct\",\n      \"tag\": \"direct\"\n    },\n    {\n      \"type\": \"block\",\n      \"tag\": \"block\"\n    }\n  ],\n   \"route\": {\n    \"rules\": [\n    {\n     \"domain\": [\n     $ytb\n     \"oh.my.god\"\n      ],\n     \"outbound\": \"wg\"\n    }\n    ],\n    \"final\": \"direct\"\n    }  \n}\nEOF\n\nif ! ps aux | grep '[c]onfig' > /dev/null; then\nps aux | grep '[c]onfig' | awk '{print $2}' | xargs -r kill -9 > /dev/null 2>&1\nif [ -e \"$(basename \"${FILE_MAP[web]}\")\" ]; then\n   echo \"$(basename \"${FILE_MAP[web]}\")\" > sb.txt\n   sbb=$(cat sb.txt)   \n    nohup ./\"$sbb\" run -c config.json >/dev/null 2>&1 &\n    sleep 5\nif pgrep -x \"$sbb\" > /dev/null; then\n    green \"$sbb 主进程已启动\"\nelse\n    red \"$sbb 主进程未启动, 重启中...\"\n    pkill -x \"$sbb\"\n    nohup ./\"$sbb\" run -c config.json >/dev/null 2>&1 &\n    sleep 2\n    purple \"$sbb 主进程已重启\"\nfi\nelse\n    sbb=$(cat sb.txt)   \n    nohup ./\"$sbb\" run -c config.json >/dev/null 2>&1 &\n    sleep 5\nif pgrep -x \"$sbb\" > /dev/null; then\n    green \"$sbb 主进程已启动\"\nelse\n    red \"$sbb 主进程未启动, 重启中...\"\n    pkill -x \"$sbb\"\n    nohup ./\"$sbb\" run -c config.json >/dev/null 2>&1 &\n    sleep 2\n    purple \"$sbb 主进程已重启\"\nfi\nfi\nelse\ngreen \"主进程已启动\"\nfi\ncfgo() {\nrm -rf boot.log\nif [ -e \"$(basename \"${FILE_MAP[bot]}\")\" ]; then\n   echo \"$(basename \"${FILE_MAP[bot]}\")\" > ag.txt\n   agg=$(cat ag.txt)\n    if [[ $ARGO_AUTH =~ ^[A-Z0-9a-z=]{120,250}$ ]]; then\n      args=\"tunnel --edge-ip-version auto --no-autoupdate --protocol http2 run --token ${ARGO_AUTH}\"\n    elif [[ $ARGO_AUTH =~ TunnelSecret ]]; then\n      args=\"tunnel --edge-ip-version auto --config tunnel.yml run\"\n    else\n     args=\"tunnel --edge-ip-version auto --no-autoupdate --protocol http2 --logfile boot.log --loglevel info --url http://localhost:$vmess_port\"\n    fi\n    nohup ./\"$agg\" $args >/dev/null 2>&1 &\n    sleep 10\nif pgrep -x \"$agg\" > /dev/null; then\n    green \"$agg Arog进程已启动\"\nelse\n    red \"$agg Argo进程未启动, 重启中...\"\n    pkill -x \"$agg\"\n    nohup ./\"$agg\" \"${args}\" >/dev/null 2>&1 &\n    sleep 5\n    purple \"$agg Argo进程已重启\"\nfi\nelse\n   agg=$(cat ag.txt)\n    if [[ $ARGO_AUTH =~ ^[A-Z0-9a-z=]{120,250}$ ]]; then\n      args=\"tunnel --edge-ip-version auto --no-autoupdate --protocol http2 run --token ${ARGO_AUTH}\"\n    elif [[ $ARGO_AUTH =~ TunnelSecret ]]; then\n      args=\"tunnel --edge-ip-version auto --config tunnel.yml run\"\n    else\n     args=\"tunnel --edge-ip-version auto --no-autoupdate --protocol http2 --logfile boot.log --loglevel info --url http://localhost:$vmess_port\"\n    fi\n    nohup ./\"$agg\" $args >/dev/null 2>&1 &\n    sleep 10\nif pgrep -x \"$agg\" > /dev/null; then\n    green \"$agg Arog进程已启动\"\nelse\n    red \"$agg Argo进程未启动, 重启中...\"\n    pkill -x \"$agg\"\n    nohup ./\"$agg\" \"${args}\" >/dev/null 2>&1 &\n    sleep 5\n    purple \"$agg Argo进程已重启\"\nfi\nfi\n}\nif [ -z \"$ARGO_DOMAIN\" ] && ! ps aux | grep \"[l]ocalhost:$vmess_port\" > /dev/null; then\nps aux | grep '[l]ocalhost' | awk '{print $2}' | xargs -r kill -9 > /dev/null 2>&1\ncfgo\nelif [ -n \"$ARGO_DOMAIN\" ] && ! ps aux | grep \"[t]oken $ARGO_AUTH\" > /dev/null; then\nps aux | grep '[t]oken' | awk '{print $2}' | xargs -r kill -9 > /dev/null 2>&1\ncfgo\nelse\ngreen \"Arog进程已启动\"\nfi\nsleep 2\nif ! pgrep -x \"$(cat sb.txt)\" > /dev/null; then\nred \"主进程未启动，根据以下情况一一排查\"\nyellow \"1、网页端权限是否开启\"\nyellow \"2、端口是否设置错误(2个TCP、1个UDP)\"\nyellow \"3、尝试更换网页端3个端口并重装\"\nyellow \"4、当前Serv00服务器炸了？等会再试\"\nred \"5、以上都试了，哥直接躺平，交给进程保活，过会再来看\"\nfi\n}\n\nget_argodomain() {\n  if [[ -n $ARGO_AUTH ]]; then\n    echo \"$ARGO_DOMAIN\" > gdym.log\n    echo \"$ARGO_DOMAIN\"\n  else\n    local retry=0\n    local max_retries=6\n    local argodomain=\"\"\n    while [[ $retry -lt $max_retries ]]; do\n    ((retry++)) \n    argodomain=$(grep -oE 'https://[[:alnum:]+\\.-]+\\.trycloudflare\\.com' boot.log 2>/dev/null | sed 's@https://@@')\n      if [[ -n $argodomain ]]; then\n        break\n      fi\n      sleep 2\n    done  \n    if [ -z ${argodomain} ]; then\n    argodomain=\"Argo临时域名暂时获取失败，Argo节点暂不可用\"\n    fi\n    echo \"$argodomain\"\n  fi\n}\n\nget_links(){\nargodomain=$(get_argodomain)\necho -e \"\\e[1;32mArgo域名：\\e[1;35m${argodomain}\\e[0m\\n\"\nISP=$(curl -sL --max-time 5 https://speed.cloudflare.com/meta | awk -F\\\" '{print $26}' | sed -e 's/ /_/g' || echo \"0\")\nget_name() { if [ \"$HOSTNAME\" = \"s1.ct8.pl\" ]; then SERVER=\"CT8\"; else SERVER=$(echo \"$HOSTNAME\" | cut -d '.' -f 1); fi; echo \"$SERVER\"; }\nNAME=\"$ISP-$(get_name)\"\nrm -rf jh.txt\nvl_link=\"vless://$UUID@$IP:$vless_port?encryption=none&flow=xtls-rprx-vision&security=reality&sni=$reym&fp=chrome&pbk=$public_key&type=tcp&headerType=none#$NAME-reality\"\necho \"$vl_link\" >> jh.txt\nvmws_link=\"vmess://$(echo \"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"$NAME-vmess-ws\\\", \\\"add\\\": \\\"$IP\\\", \\\"port\\\": \\\"$vmess_port\\\", \\\"id\\\": \\\"$UUID\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"auto\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"none\\\", \\\"host\\\": \\\"\\\", \\\"path\\\": \\\"/$UUID-vm?ed=2048\\\", \\\"tls\\\": \\\"\\\", \\\"sni\\\": \\\"\\\", \\\"alpn\\\": \\\"\\\", \\\"fp\\\": \\\"\\\"}\" | base64 -w0)\"\necho \"$vmws_link\" >> jh.txt\nvmatls_link=\"vmess://$(echo \"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"$NAME-vmess-ws-tls-argo\\\", \\\"add\\\": \\\"icook.hk\\\", \\\"port\\\": \\\"8443\\\", \\\"id\\\": \\\"$UUID\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"auto\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"none\\\", \\\"host\\\": \\\"$argodomain\\\", \\\"path\\\": \\\"/$UUID-vm?ed=2048\\\", \\\"tls\\\": \\\"tls\\\", \\\"sni\\\": \\\"$argodomain\\\", \\\"alpn\\\": \\\"\\\", \\\"fp\\\": \\\"\\\"}\" | base64 -w0)\"\necho \"$vmatls_link\" >> jh.txt\nvma_link=\"vmess://$(echo \"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"$NAME-vmess-ws-argo\\\", \\\"add\\\": \\\"icook.hk\\\", \\\"port\\\": \\\"8880\\\", \\\"id\\\": \\\"$UUID\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"auto\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"none\\\", \\\"host\\\": \\\"$argodomain\\\", \\\"path\\\": \\\"/$UUID-vm?ed=2048\\\", \\\"tls\\\": \\\"\\\"}\" | base64 -w0)\"\necho \"$vma_link\" >> jh.txt\nhy2_link=\"hysteria2://$UUID@$IP:$hy2_port?sni=www.bing.com&alpn=h3&insecure=1#$NAME-hy2\"\necho \"$hy2_link\" >> jh.txt\nurl=$(cat jh.txt 2>/dev/null)\nbaseurl=$(echo -e \"$url\" | base64 -w 0)\n\ncat > sing_box.json <<EOF\n{\n  \"log\": {\n    \"disabled\": false,\n    \"level\": \"info\",\n    \"timestamp\": true\n  },\n  \"experimental\": {\n    \"clash_api\": {\n      \"external_controller\": \"127.0.0.1:9090\",\n      \"external_ui\": \"ui\",\n      \"external_ui_download_url\": \"\",\n      \"external_ui_download_detour\": \"\",\n      \"secret\": \"\",\n      \"default_mode\": \"Rule\"\n       },\n      \"cache_file\": {\n            \"enabled\": true,\n            \"path\": \"cache.db\",\n            \"store_fakeip\": true\n        }\n    },\n    \"dns\": {\n        \"servers\": [\n            {\n                \"tag\": \"proxydns\",\n                \"address\": \"tls://8.8.8.8/dns-query\",\n                \"detour\": \"select\"\n            },\n            {\n                \"tag\": \"localdns\",\n                \"address\": \"h3://223.5.5.5/dns-query\",\n                \"detour\": \"direct\"\n            },\n            {\n                \"tag\": \"dns_fakeip\",\n                \"address\": \"fakeip\"\n            }\n        ],\n        \"rules\": [\n            {\n                \"outbound\": \"any\",\n                \"server\": \"localdns\",\n                \"disable_cache\": true\n            },\n            {\n                \"clash_mode\": \"Global\",\n                \"server\": \"proxydns\"\n            },\n            {\n                \"clash_mode\": \"Direct\",\n                \"server\": \"localdns\"\n            },\n            {\n                \"rule_set\": \"geosite-cn\",\n                \"server\": \"localdns\"\n            },\n            {\n                 \"rule_set\": \"geosite-geolocation-!cn\",\n                 \"server\": \"proxydns\"\n            },\n             {\n                \"rule_set\": \"geosite-geolocation-!cn\",         \n                \"query_type\": [\n                    \"A\",\n                    \"AAAA\"\n                ],\n                \"server\": \"dns_fakeip\"\n            }\n          ],\n           \"fakeip\": {\n           \"enabled\": true,\n           \"inet4_range\": \"198.18.0.0/15\",\n           \"inet6_range\": \"fc00::/18\"\n         },\n          \"independent_cache\": true,\n          \"final\": \"proxydns\"\n        },\n      \"inbounds\": [\n    {\n      \"type\": \"tun\",\n           \"tag\": \"tun-in\",\n\t  \"address\": [\n      \"172.19.0.1/30\",\n\t  \"fd00::1/126\"\n      ],\n      \"auto_route\": true,\n      \"strict_route\": true,\n      \"sniff\": true,\n      \"sniff_override_destination\": true,\n      \"domain_strategy\": \"prefer_ipv4\"\n    }\n  ],\n  \"outbounds\": [\n    {\n      \"tag\": \"select\",\n      \"type\": \"selector\",\n      \"default\": \"auto\",\n      \"outbounds\": [\n        \"auto\",\n        \"vless-$NAME\",\n        \"vmess-$NAME\",\n        \"hy2-$NAME\",\n\"vmess-tls-argo-$NAME\",\n\"vmess-argo-$NAME\"\n      ]\n    },\n    {\n      \"type\": \"vless\",\n      \"tag\": \"vless-$NAME\",\n      \"server\": \"$IP\",\n      \"server_port\": $vless_port,\n      \"uuid\": \"$UUID\",\n      \"packet_encoding\": \"xudp\",\n      \"flow\": \"xtls-rprx-vision\",\n      \"tls\": {\n        \"enabled\": true,\n        \"server_name\": \"$reym\",\n        \"utls\": {\n          \"enabled\": true,\n          \"fingerprint\": \"chrome\"\n        },\n      \"reality\": {\n          \"enabled\": true,\n          \"public_key\": \"$public_key\",\n          \"short_id\": \"\"\n        }\n      }\n    },\n{\n            \"server\": \"$IP\",\n            \"server_port\": $vmess_port,\n            \"tag\": \"vmess-$NAME\",\n            \"tls\": {\n                \"enabled\": false,\n                \"server_name\": \"www.bing.com\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"www.bing.com\"\n                    ]\n                },\n                \"path\": \"/$UUID-vm\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$UUID\"\n        },\n\n    {\n        \"type\": \"hysteria2\",\n        \"tag\": \"hy2-$NAME\",\n        \"server\": \"$IP\",\n        \"server_port\": $hy2_port,\n        \"password\": \"$UUID\",\n        \"tls\": {\n            \"enabled\": true,\n            \"server_name\": \"www.bing.com\",\n            \"insecure\": true,\n            \"alpn\": [\n                \"h3\"\n            ]\n        }\n    },\n{\n            \"server\": \"icook.hk\",\n            \"server_port\": 8443,\n            \"tag\": \"vmess-tls-argo-$NAME\",\n            \"tls\": {\n                \"enabled\": true,\n                \"server_name\": \"$argodomain\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argodomain\"\n                    ]\n                },\n                \"path\": \"/$UUID-vm\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$UUID\"\n        },\n{\n            \"server\": \"icook.hk\",\n            \"server_port\": 8880,\n            \"tag\": \"vmess-argo-$NAME\",\n            \"tls\": {\n                \"enabled\": false,\n                \"server_name\": \"$argodomain\",\n                \"insecure\": false,\n                \"utls\": {\n                    \"enabled\": true,\n                    \"fingerprint\": \"chrome\"\n                }\n            },\n            \"packet_encoding\": \"packetaddr\",\n            \"transport\": {\n                \"headers\": {\n                    \"Host\": [\n                        \"$argodomain\"\n                    ]\n                },\n                \"path\": \"/$UUID-vm\",\n                \"type\": \"ws\"\n            },\n            \"type\": \"vmess\",\n            \"security\": \"auto\",\n            \"uuid\": \"$UUID\"\n        },\n    {\n      \"tag\": \"direct\",\n      \"type\": \"direct\"\n    },\n    {\n      \"tag\": \"auto\",\n      \"type\": \"urltest\",\n      \"outbounds\": [\n        \"vless-$NAME\",\n        \"vmess-$NAME\",\n        \"hy2-$NAME\",\n\"vmess-tls-argo-$NAME\",\n\"vmess-argo-$NAME\"\n      ],\n      \"url\": \"https://www.gstatic.com/generate_204\",\n      \"interval\": \"1m\",\n      \"tolerance\": 50,\n      \"interrupt_exist_connections\": false\n    }\n  ],\n  \"route\": {\n      \"rule_set\": [\n            {\n                \"tag\": \"geosite-geolocation-!cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/geolocation-!cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            },\n            {\n                \"tag\": \"geosite-cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/geolocation-cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            },\n            {\n                \"tag\": \"geoip-cn\",\n                \"type\": \"remote\",\n                \"format\": \"binary\",\n                \"url\": \"https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geoip/cn.srs\",\n                \"download_detour\": \"select\",\n                \"update_interval\": \"1d\"\n            }\n        ],\n    \"auto_detect_interface\": true,\n    \"final\": \"select\",\n    \"rules\": [\n      {\n      \"inbound\": \"tun-in\",\n      \"action\": \"sniff\"\n      },\n      {\n      \"protocol\": \"dns\",\n      \"action\": \"hijack-dns\"\n      },\n      {\n      \"port\": 443,\n      \"network\": \"udp\",\n      \"action\": \"reject\"\n      },\n      {\n        \"clash_mode\": \"Direct\",\n        \"outbound\": \"direct\"\n      },\n      {\n        \"clash_mode\": \"Global\",\n        \"outbound\": \"select\"\n      },\n      {\n        \"rule_set\": \"geoip-cn\",\n        \"outbound\": \"direct\"\n      },\n      {\n        \"rule_set\": \"geosite-cn\",\n        \"outbound\": \"direct\"\n      },\n      {\n      \"ip_is_private\": true,\n      \"outbound\": \"direct\"\n      },\n      {\n        \"rule_set\": \"geosite-geolocation-!cn\",\n        \"outbound\": \"select\"\n      }\n    ]\n  },\n    \"ntp\": {\n    \"enabled\": true,\n    \"server\": \"time.apple.com\",\n    \"server_port\": 123,\n    \"interval\": \"30m\",\n    \"detour\": \"direct\"\n  }\n}\nEOF\n\ncat > clash_meta.yaml <<EOF\nport: 7890\nallow-lan: true\nmode: rule\nlog-level: info\nunified-delay: true\nglobal-client-fingerprint: chrome\ndns:\n  enable: true\n  listen: :53\n  ipv6: true\n  enhanced-mode: fake-ip\n  fake-ip-range: 198.18.0.1/16\n  default-nameserver: \n    - 223.5.5.5\n    - 8.8.8.8\n  nameserver:\n    - https://dns.alidns.com/dns-query\n    - https://doh.pub/dns-query\n  fallback:\n    - https://1.0.0.1/dns-query\n    - tls://dns.google\n  fallback-filter:\n    geoip: true\n    geoip-code: CN\n    ipcidr:\n      - 240.0.0.0/4\n\nproxies:\n- name: vless-reality-vision-$NAME               \n  type: vless\n  server: $IP                           \n  port: $vless_port                                \n  uuid: $UUID   \n  network: tcp\n  udp: true\n  tls: true\n  flow: xtls-rprx-vision\n  servername: $reym                 \n  reality-opts: \n    public-key: $public_key                      \n  client-fingerprint: chrome                  \n\n- name: vmess-ws-$NAME                         \n  type: vmess\n  server: $IP                       \n  port: $vmess_port                                     \n  uuid: $UUID       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: false\n  network: ws\n  servername: www.bing.com                    \n  ws-opts:\n    path: \"/$UUID-vm\"                             \n    headers:\n      Host: www.bing.com                     \n\n- name: hysteria2-$NAME                            \n  type: hysteria2                                      \n  server: $IP                               \n  port: $hy2_port                                \n  password: $UUID                          \n  alpn:\n    - h3\n  sni: www.bing.com                               \n  skip-cert-verify: true\n  fast-open: true\n\n- name: vmess-tls-argo-$NAME                         \n  type: vmess\n  server: icook.hk                        \n  port: 8443                                     \n  uuid: $UUID       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: true\n  network: ws\n  servername: $argodomain                    \n  ws-opts:\n    path: \"/$UUID-vm\"                             \n    headers:\n      Host: $argodomain\n\n- name: vmess-argo-$NAME                         \n  type: vmess\n  server: icook.hk                        \n  port: 8880                                     \n  uuid: $UUID       \n  alterId: 0\n  cipher: auto\n  udp: true\n  tls: false\n  network: ws\n  servername: $argodomain                   \n  ws-opts:\n    path: \"/$UUID-vm\"                             \n    headers:\n      Host: $argodomain \n\nproxy-groups:\n- name: 负载均衡\n  type: load-balance\n  url: https://www.gstatic.com/generate_204\n  interval: 300\n  strategy: round-robin\n  proxies:\n    - vless-reality-vision-$NAME                              \n    - vmess-ws-$NAME\n    - hysteria2-$NAME\n    - vmess-tls-argo-$NAME\n    - vmess-argo-$NAME\n\n- name: 自动选择\n  type: url-test\n  url: https://www.gstatic.com/generate_204\n  interval: 300\n  tolerance: 50\n  proxies:\n    - vless-reality-vision-$NAME                              \n    - vmess-ws-$NAME\n    - hysteria2-$NAME\n    - vmess-tls-argo-$NAME\n    - vmess-argo-$NAME\n    \n- name: 🌍选择代理节点\n  type: select\n  proxies:\n    - 负载均衡                                         \n    - 自动选择\n    - DIRECT\n    - vless-reality-vision-$NAME                              \n    - vmess-ws-$NAME\n    - hysteria2-$NAME\n    - vmess-tls-argo-$NAME\n    - vmess-argo-$NAME\nrules:\n  - GEOIP,LAN,DIRECT\n  - GEOIP,CN,DIRECT\n  - MATCH,🌍选择代理节点\n  \nEOF\n\nsibsub=$(cat sing_box.json 2>/dev/null)\nclmsub=$(cat clash_meta.yaml 2>/dev/null)\necho\nsleep 2\ncat > list.txt <<EOF\n=================================================================================================\n\n一、Vless-reality分享链接如下：\n$vl_link\n\n注意：如果之前输入的reality域名为CF域名，将激活以下功能：\n可应用在 https://github.com/yonggekkk/Cloudflare_vless_trojan 项目中创建CF vless/trojan 节点\n1、Proxyip(带端口)信息如下：\n方式一全局应用：设置变量名：proxyip    设置变量值：$IP:$vless_port  \n方式二单节点应用：path路径改为：/pyip=$IP:$vless_port\nCF节点的TLS可开可关\nCF节点落地到CF网站的地区为：$IP所在地区\n\n2、非标端口反代IP信息如下：\n客户端优选IP地址为：$IP，端口：$vless_port\nCF节点的TLS必须开启\nCF节点落地到非CF网站的地区为：$IP所在地区\n\n注：如果serv00的IP被墙，proxyip依旧有效，但用于客户端地址与端口的非标端口反代IP将不可用\n注：可能有大佬会扫Serv00的反代IP作为其共享IP库或者出售，请慎重将reality域名设置为CF域名\n-------------------------------------------------------------------------------------------------\n\n\n二、Vmess-ws分享链接三形态如下：\n\n1、Vmess-ws主节点分享链接如下：\n(该节点默认不支持CDN，如果设置为CDN回源(需域名)：客户端地址可自行修改优选IP/域名，7个80系端口随便换，被墙依旧能用！)\n$vmws_link\n\nArgo域名：${argodomain}\n如果上面Argo临时域名未生成，以下 2 与 3 的Argo节点将不可用 (打开Argo固定/临时域名网页，显示HTTP ERROR 404说明正常可用)\n\n2、Vmess-ws-tls_Argo分享链接如下： \n(该节点为CDN优选IP节点，客户端地址可自行修改优选IP/域名，6个443系端口随便换，被墙依旧能用！)\n$vmatls_link\n\n3、Vmess-ws_Argo分享链接如下：\n(该节点为CDN优选IP节点，客户端地址可自行修改优选IP/域名，7个80系端口随便换，被墙依旧能用！)\n$vma_link\n-------------------------------------------------------------------------------------------------\n\n\n三、HY2分享链接如下：\n$hy2_link\n-------------------------------------------------------------------------------------------------\n\n\n四、以上五个节点的聚合通用分享链接如下：\n$baseurl\n-------------------------------------------------------------------------------------------------\nEOF\ncat list.txt\necho \"-------------------------------------------------------------------------------------------------\"\nsleep 2\necho\necho \"五、查看sing-box订阅配置文件\"\ncat clash_meta.yaml\necho \"-------------------------------------------------------------------------------------------------\"\nsleep 2\necho\necho \"六、查看clash-meta订阅配置文件\"\ncat sing_box.json\necho\necho \"-------------------------------------------------------------------------------------------------\"\necho \"=================================================================================================\"\necho\nsleep 2\nrm -rf sb.log core tunnel.yml tunnel.json fake_useragent_0.2.0.json\n}\n\ninstall_singbox() {\ncd $WORKDIR\nread_ip\nargo_configure\ndownload_and_run_singbox\nget_links\n}\ninstall_singbox\n"
        },
        {
          "name": "version",
          "type": "blob",
          "size": 0.5361328125,
          "content": "v25.1.5更新内容：\n\n本次弹窗仅为提前说明，并非更新，切勿选择更新\n\n说明如下：\n由于sing-box的1.10与1.11内核在配置文件上变化之大\n当1.11正式版内核发布后，切勿更新内核版本，保持1.10系列内核不动\n等待后续更新！\n\n本次弹窗仅为提前说明，并非更新，切勿选择更新\n本次弹窗仅为提前说明，并非更新，切勿选择更新\n本次弹窗仅为提前说明，并非更新，切勿选择更新\n\n详见：https://ygkkk.blogspot.com/2023/10/sing-box-yg.html\n"
        }
      ]
    }
  ]
}