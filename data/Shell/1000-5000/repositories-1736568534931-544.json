{
  "metadata": {
    "timestamp": 1736568534931,
    "page": 544,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "joehillen/sysz",
      "stars": 1618,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1708984375,
          "content": "[*]\nindent_style = space\nindent_size = 2\n\n# shfmt options\n# https://github.com/mvdan/sh/blob/master/cmd/shfmt/shfmt.1.scd\nshell_variant      = bash\nswitch_case_indent = false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01953125,
          "content": "pkg/\nsrc/\n*.tar.zst\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.80859375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [1.4.3] - 2021-10-11\n\n### Fixed\n\n- Ensure that fzf uses bash when calling preview by settings SHELL (#15)\n\n## [1.4.1] - 2021-10-08\n\n### Fixed\n\n- Ensure that fzf uses bash when calling preview\n\n## [1.4.0] - 2021-09-21\n\n### Added\n\n- Major Refactor\n- Better ctrl-s and ctrl-r handling\n- Better handling of fzf exit codes\n- Wider preview window on command prompt\n\n### Fixed\n\n- Remove duplicates\n\n### Removed\n\n- `--reverse`. User can set this using `FZF_DEFAULT_OPTS`.\n\n## [1.3.1] - 2021-09-21\n\n### Fixed\n\n- Require fzf >= 0.27.1\n- Unbind ctrl-v in state and daemon-reload prompts\n\n## [1.3.0] - 2021-09-20\n\n### Added\n\n- `cat` command\n- `mask` command\n- `unmask` command\n- color results based on state\n- `ctrl-s` to filter states\n- `ctrl-r` to run daemon-reload\n- `?` to show keybindings\n\n### Fixed\n\n- Do not run `status` after `show`\n\n## [1.2.3] - 2021-09-20\n\n### Fixed\n\n- use `#!/usr/bin/env bash`\n- `-s` option is for state\n\n### Added\n\n- `--state=` support\n\n## [1.2.2] - 2021-09-17\n\n### Fixed\n\n- root check\n\n## [1.2.1] - 2021-09-17\n\n### Fixed\n\n- Bug in \"follow\" action\n\n## [1.2.0] - 2021-09-17\n\n### Added\n\n- Version flag `-v`\n- \"show\" action\n\n### Changed\n\n- Verbose flag to `-V`\n\n### Fixed\n\n- \"follow\" action\n- root user doesn't have a --user instance\n\n## [1.1.0] - 2021-09-02\n\n### Added\n\n- Keybinding `CTRL-v` to cat the current unit in preview window\n- Support parametrized units: `unit@.service`\n\n### Changed\n\n- Remove `cat` command\n- Show `cat` in preview for parametrized units: `unit@.service`\n\n### Fixed\n\n- Show `start` command if unit is \"failed\"\n- Show `enable` command is unit is \"static\"\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.0322265625,
          "content": "VERSION := $(shell cat VERSION)\nARCHIVE := sysz-$(VERSION).tar.gz\n.PHONY: install clean release archive\n.ONESHELL: aur-release\n\nsysz: VERSION\n\tsed -i -e \"s/^SYSZ_VERSION=.*/SYSZ_VERSION=$(VERSION)/\" sysz\n\n$(ARCHIVE): sysz CHANGELOG.md README.md\n\tgit archive --format=tar.gz -o $(ARCHIVE) --prefix sysz-$(VERSION)/ $(VERSION)\n\nclean:\n\t/bin/rm -f README.md\n\nREADME.md: README.sh sysz VERSION\n\t./README.sh\n\narchive: $(ARCHIVE)\n\nPKGBUILD: VERSION $(ARCHIVE)\n\tsed -i -e \"s/^pkgver=.*/pkgver=$(VERSION)/\" PKGBUILD\n\tsed -i -e \"s/^sha256sums=.*/sha256sums=('`sha256sum $(ARCHIVE) | cut -d' ' -f1`')/\" PKGBUILD\n\tmakepkg -f\n\naur-release: PKGBUILD\n\tgit commit -am 'Update PKGBUILD'\n\tgit push origin master\n\tcp PKGBUILD ~/src/aur/sysz/PKGBUILD\n\tcd ~/src/aur/sysz/\n\tmakepkg -ci\n\tgit commit -am \"Release $(VERSION)\"\n\tgit push origin master\n\ngithub-release: VERSION sysz CHANGELOG.md README.md\n\tgit commit -am 'Release $(VERSION)'\n\tgit tag $(VERSION)\n\tgit push origin $(VERSION)\n\nrelease: clean sysz README.md github-release\n\n\ninstall:\n\tinstall -m755 sysz /usr/local/bin/\n"
        },
        {
          "name": "PKGBUILD",
          "type": "blob",
          "size": 0.4677734375,
          "content": "# Maintainer: Joe Hillenbrand (joehillen) <joehillen@gmail.com>\n\npkgname=sysz\npkgver=1.4.3\npkgrel=0\npkgdesc=\"fzf terminal UI for systemctl\"\narch=(\"any\")\nurl=\"https://github.com/joehillen/sysz\"\nlicense=(\"UNLICENSE\")\ndepends=(\"bash\" \"fzf\")\nsource=(\"$pkgname-$pkgver.tar.gz::$url/archive/refs/tags/$pkgver.tar.gz\")\nsha256sums=('186a650a1539005749df7b0c186328acc7a18bd7549d1a6279c26044d67ec0ef')\n\npackage() {\n  install -Dm775 \"$srcdir/$pkgname-$pkgver/sysz\" \"$pkgdir/usr/bin/sysz\"\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.19921875,
          "content": "# [sysz](https://github.com/joehillen/sysz)\n\nA [fzf](https://github.com/junegunn/fzf) terminal UI for systemctl\n\n<a href=\"https://console.dev\" title=\"Visit Console - the best tools for developers\"><img src=\"https://console.dev/img/badges/1.0/svg/console-badge-logo-dark.svg\" alt=\"Console - Developer Tool of the Week\" /></a>\n\n# Demo\n\n[![asciicast](https://asciinema.org/a/BLsJz73uF7DdQj7FVGqLPhqCa.svg)](https://asciinema.org/a/BLsJz73uF7DdQj7FVGqLPhqCa)\n\n# Features\n\nVERSION: 1.4.3\n\n- See and filter both system and user units simultaneously.\n- Supports all unit types.\n- Units ordered by service, timer, socket, and the rest.\n- Runs `sudo` automatically and only if necessary.\n- Filter units by state using `ctrl-s` or the `--state` option.\n- Run `daemon-reload` with `ctrl-r`.\n- Has short versions of systemctl commands to reduce typing.\n- Runs status after other commands (start, stop, restart, etc).\n- Select multiple units, states, and commands using `TAB`.\n- Only prompts commands based on current state\n  (e.g. show \"start\" only if the unit is inactive).\n\n# Requirements\n\n- [fzf](https://github.com/junegunn/fzf) >= [0.27.1](https://github.com/junegunn/fzf/blob/master/CHANGELOG.md#0244)\n- bash > 4.3 (released 2009)\n- awk\n\n# Installation\n\n## Arch Linux\n\n```\nparu -S sysz\n```\n\n## NixOS\n\n```\nnix-env -iA nixos.sysz\n```\n\n## Using Nix\n\n```\nnix-env -iA nixpkgs.sysz\n```\n\n## Using [`bin`](https://github.com/marcosnils/bin)\n\n```\nbin install https://github.com/joehillen/sysz\n```\n\n## Direct Download\n\n```sh\nwget -O ~/.bin/sysz https://github.com/joehillen/sysz/releases/latest/download/sysz\nchmod +x ~/.bin/sysz\n```\n\n## From Source\n\n```sh\ngit clone https://github.com/joehillen/sysz.git\ncd sysz\nsudo make install # /usr/local/bin/sysz\n```\n\n# Usage\n\n```text\nA utility for using systemctl interactively via fzf.\n\nUsage: sysz [OPTS...] [CMD] [-- ARGS...]\n\nsudo is invoked automatically, if necessary.\n\nIf only one unit is chosen, available commands will be presented\nbased on the state of the unit (e.g. \"start\" only shows if unit is \"active\").\n\nOPTS:\n  -u, --user               Only show --user units\n  --sys, --system          Only show --system units\n  -s STATE, --state STATE  Only show units in STATE (repeatable)\n  -V, --verbose            Print the systemctl command\n  -v, --version            Print the version\n  -h, --help               Print this message\n\n  If no options are given, both system and user units are shown.\n\nCMD:\n  start                  systemctl start <unit>\n  stop                   systemctl stop <unit>\n  r, restart             systemctl restart <unit>\n  s, stat, status        systemctl status <unit>\n  ed, edit               systemctl edit <unit>\n  reload                 systemctl reload <unit>\n  en, enable             systemctl enable <unit>\n  d, dis, disable        systemctl disable <unit>\n  c, cat                 systemctl cat <unit>\n\n  If no command is given, one or more can be chosen interactively.\n\nARGS are passed to the systemctl command for each selected unit.\n\nKeybindings:\n  TAB           Toggle selection.\n  ctrl-v        'cat' the unit in the preview window.\n  ctrl-s        Select states to match. Selection is reset.\n  ctrl-r        Run daemon-reload. Selection is reset.\n  ctrl-p        History previous.\n  ctrl-n        History next.\n  ?             Show keybindings.\n\nHistory:\n  sysz is stored in $XDG_CACHE_HOME/sysz/history\n  This can be changed with the environment variable: SYSZ_HISTORY\n\nSome units are colored based on state:\n  green       active\n  red         failed\n  yellow      not-found\n\nExamples:\n  sysz -u                      User units\n  sysz --sys -s active          Active system units\n  sysz --user --state failed   Failed user units\n\nExamples with commands:\n  sysz start                  Start a unit\n  sysz --sys s                Get the status of system units\n  sysz --user edit            Edit user units\n  sysz s -- -n100             Show status with 100 log lines\n  sysz --sys -s active stop    Stop an active system unit\n  sysz -u --state failed r    Restart failed user units\n```\n\n# Acknowledgements\n\nInspired by [fuzzy-sys](https://github.com/NullSense/fuzzy-sys) by [NullSense](https://github.com/NullSense/)\n\nThank you for [ShellCheck](https://github.com/koalaman/shellcheck) without which this would be a buggy mess.\n"
        },
        {
          "name": "README.sh",
          "type": "blob",
          "size": 1.9560546875,
          "content": "#!/bin/bash\nBLOCK='```'\n\ncat <<EOF >README.md\n# [sysz](https://github.com/joehillen/sysz)\n\nA [fzf](https://github.com/junegunn/fzf) terminal UI for systemctl\n\n# Demo\n\n[![asciicast](https://asciinema.org/a/BLsJz73uF7DdQj7FVGqLPhqCa.svg)](https://asciinema.org/a/BLsJz73uF7DdQj7FVGqLPhqCa)\n\n# Features\n\nVERSION: $(cat VERSION)\n\n- See and filter both system and user units simultaneously.\n- Supports all unit types.\n- Units ordered by service, timer, socket, and the rest.\n- Runs \\`sudo\\` automatically and only if necessary.\n- Filter units by state using \\`ctrl-s\\` or the \\`--state\\` option.\n- Run \\`daemon-reload\\` with \\`ctrl-r\\`.\n- Has short versions of systemctl commands to reduce typing.\n- Runs status after other commands (start, stop, restart, etc).\n- Select multiple units, states, and commands using \\`TAB\\`.\n- Only prompts commands based on current state\n  (e.g. show \"start\" only if the unit is inactive).\n\n# Requirements\n\n- [fzf](https://github.com/junegunn/fzf) >= [0.27.1](https://github.com/junegunn/fzf/blob/master/CHANGELOG.md#0244)\n- bash > 4.3 (released 2009)\n- awk\n\n# Installation\n\n## Arch Linux\n\n${BLOCK}\nparu -S sysz\n${BLOCK}\n\n## NixOS\n\n${BLOCK}\nnix-env -iA nixos.sysz\n${BLOCK}\n\n## Using Nix\n\n${BLOCK}\nnix-env -iA nixpkgs.sysz\n${BLOCK}\n\n## Using [\\`bin\\`](https://github.com/marcosnils/bin)\n\n${BLOCK}\nbin install https://github.com/joehillen/sysz\n${BLOCK}\n\n## Direct Download\n\n${BLOCK}sh\nwget -O ~/.bin/sysz https://github.com/joehillen/sysz/releases/latest/download/sysz\nchmod +x ~/.bin/sysz\n${BLOCK}\n\n## From Source\n\n${BLOCK}sh\ngit clone https://github.com/joehillen/sysz.git\ncd sysz\nsudo make install # /usr/local/bin/sysz\n${BLOCK}\n\n# Usage\n\n${BLOCK}text\n$(./sysz -h 2>&1 | sed -e 's:/home/[a-z]\\+/.cache:$XDG_CACHE_HOME:')\n${BLOCK}\n\n# Acknowledgements\n\nInspired by [fuzzy-sys](https://github.com/NullSense/fuzzy-sys) by [NullSense](https://github.com/NullSense/)\n\nThank you for [ShellCheck](https://github.com/koalaman/shellcheck) without which this would be a buggy mess.\nEOF\n"
        },
        {
          "name": "UNLICENSE",
          "type": "blob",
          "size": 1.18359375,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <https://unlicense.org/>\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "1.4.3\n"
        },
        {
          "name": "sysz",
          "type": "blob",
          "size": 12.3017578125,
          "content": "#!/usr/bin/env bash\n\nset -o pipefail\nshopt -s lastpipe\nshopt -s extglob\n\nexport SHELL=bash\n\nPROG=$(basename \"$0\")\nSYSZ_VERSION=1.4.3\nSYSZ_HISTORY=${SYSZ_HISTORY:-${XDG_CACHE_HOME:-~/.cache}/sysz/history}\ndeclare -a STATES\n\n_sysz_keys() {\n  cat <<EOF\nKeybindings:\n  TAB           Toggle selection.\n  ctrl-v        'cat' the unit in the preview window.\n  ctrl-s        Select states to match. Selection is reset.\n  ctrl-r        Run daemon-reload. Selection is reset.\n  ctrl-p        History previous.\n  ctrl-n        History next.\n  ?             Show keybindings.\nEOF\n}\n\n_sysz_help() {\n  cat >&2 <<EOF\nA utility for using systemctl interactively via fzf.\n\nUsage: $PROG [OPTS...] [CMD] [-- ARGS...]\n\nsudo is invoked automatically, if necessary.\n\nIf only one unit is chosen, available commands will be presented\nbased on the state of the unit (e.g. \"start\" only shows if unit is \"active\").\n\nOPTS:\n  -u, --user               Only show --user units\n  --sys, --system          Only show --system units\n  -s STATE, --state STATE  Only show units in STATE (repeatable)\n  -V, --verbose            Print the systemctl command\n  -v, --version            Print the version\n  -h, --help               Print this message\n\n  If no options are given, both system and user units are shown.\n\nCMD:\n  start                  systemctl start <unit>\n  stop                   systemctl stop <unit>\n  r, restart             systemctl restart <unit>\n  s, stat, status        systemctl status <unit>\n  ed, edit               systemctl edit <unit>\n  reload                 systemctl reload <unit>\n  en, enable             systemctl enable <unit>\n  d, dis, disable        systemctl disable <unit>\n  c, cat                 systemctl cat <unit>\n\n  If no command is given, one or more can be chosen interactively.\n\nARGS are passed to the systemctl command for each selected unit.\n\n$(_sysz_keys)\n\nHistory:\n  $PROG is stored in $SYSZ_HISTORY\n  This can be changed with the environment variable: SYSZ_HISTORY\n\nSome units are colored based on state:\n  green       active\n  red         failed\n  yellow      not-found\n\nExamples:\n  $PROG -u                      User units\n  $PROG --sys -s active          Active system units\n  $PROG --user --state failed   Failed user units\n\nExamples with commands:\n  $PROG start                  Start a unit\n  $PROG --sys s                Get the status of system units\n  $PROG --user edit            Edit user units\n  $PROG s -- -n100             Show status with 100 log lines\n  $PROG --sys -s active stop    Stop an active system unit\n  $PROG -u --state failed r    Restart failed user units\nEOF\n\n  exit 0\n}\n\n_sysz_run() {\n  [[ $VERBOSE = true ]] && echo '>' \"$@\" >&2\n  eval \"$@\" || return $?\n}\n\n_sysz_systemctl() {\n  if [[ $EUID -ne 0 && $1 = --system ]]; then\n    # only run sudo if we aren't root and it's a system unit\n    _sysz_run sudo systemctl \"$@\"\n  else\n    _sysz_run systemctl \"$@\"\n  fi\n}\n\n_sysz_journalctl() {\n  if [[ $1 = --user ]]; then\n    # use --user-unit flag if it's a user unit\n    _sysz_run journalctl --user-unit=\"$2\" \"${@:3}\"\n  else\n    if [[ $EUID -ne 0 ]]; then\n      # only run sudo if we aren't root\n      _sysz_run sudo journalctl --unit=\"$2\" \"${@:3}\"\n    else\n      _sysz_run journalctl --unit=\"$2\" \"${@:3}\"\n    fi\n  fi\n\n}\n\n_sysz_manager() {\n  case ${1%% *} in\n  '[user]')\n    echo --user\n    ;;\n  '[system]')\n    echo --system\n    ;;\n  *)\n    echo \"ERROR: Unknown manager: $1\" >&2\n    exit 1\n    ;;\n  esac\n}\n\n_fzf_cat() {\n  local MANAGER\n  MANAGER=$(_sysz_manager \"$1\")\n  local UNIT\n  UNIT=${1##* }\n\n  SYSTEMD_COLORS=1 systemctl \"$MANAGER\" cat -- \"$UNIT\"\n}\n\n_fzf_preview() {\n  local MANAGER\n  MANAGER=$(_sysz_manager \"$1\")\n  local UNIT\n  UNIT=${1##* }\n\n  if [[ $UNIT = *@.* ]]; then\n    _fzf_cat \"$@\"\n  else\n    SYSTEMD_COLORS=1 systemctl \"$MANAGER\" status --no-pager -- \"$UNIT\"\n  fi\n  exit 0\n}\n\n_sysz_show() {\n  local manager\n  manager=$(_sysz_manager \"$1\")\n  local unit\n  unit=${1##* }\n\n  _sysz_systemctl \"$manager\" show \"$unit\" -p \"$2\" --value\n}\n\n_sysz_sort() {\n  local str\n  local mgr\n  local unit\n  local n\n  while IFS= read -r str; do\n    mgr=${str%% *}\n    unit_colored=${str##* }\n    unit=${unit_colored//$'\\e'[\\[(]*([0-9;])[@-n]/}\n\n    if [[ $unit =~ \\.service$ ]]; then\n      n=0\n      [[ $mgr = \"[system]\" ]] && n=1\n    elif [[ $unit =~ \\.timer$ ]]; then\n      n=2\n      [[ $mgr = \"[system]\" ]] && n=3\n    elif [[ $unit =~ \\.socket$ ]]; then\n      n=4\n      [[ $mgr = \"[system]\" ]] && n=5\n    elif [[ $mgr = \"[user]\" ]]; then\n      n=6\n    else\n      # then the rest based on file extension\n      n=7\n    fi\n    type=${unit##*.}\n    unit_undashed=${unit//-/}\n    echo \"$n$type$unit_undashed $mgr $unit_colored\"\n  done | sort -bifu | cut -d' ' -f2-\n}\n\n_sysz_list() {\n  local args\n  declare -a args\n  args=(\n    --all\n    --no-legend\n    --full\n    --plain\n    --no-pager\n    \"${STATES[@]}\"\n    \"$@\"\n  )\n  (\n    systemctl list-units \"${args[@]}\"\n    systemctl list-unit-files \"${args[@]}\"\n  ) | sort -u -t ' ' -k1,1 |\n    while read -r line; do\n      unit=${line%% *}\n      if [[ $line = *\" active \"* ]]; then\n        printf '\\033[0;32m%s\\033[0m\\n' \"$unit\" # green\n      elif [[ $line = *\" failed \"* ]]; then\n        printf '\\033[0;31m%s\\033[0m\\n' \"$unit\" # red\n      elif [[ $line = *\" not-found \"* ]]; then\n        printf '\\033[1;33m%s\\033[0m\\n' \"$unit\" # red\n      else\n        echo \"$unit\"\n      fi\n    done\n}\n\n_sysz_list_units() {\n  for MANAGER in \"${MANAGERS[@]}\"; do\n    _sysz_list \"--$MANAGER\" | sed -e \"s/^/[$MANAGER] /\"\n  done | _sysz_sort\n}\n\n# main\n\n# check fzf version\nMIN_FZF=0.27.1\nif [[ \"$(printf '%s\\n' \"$MIN_FZF\" \"$(fzf --version | cut -d' ' -f1)\" | sort -V | head -n1)\" != \"$MIN_FZF\" ]]; then\n  echo \"ERROR: fzf >= $MIN_FZF required\" >&2\n  echo \"https://github.com/junegunn/fzf#upgrading-fzf\" >&2\n  exit 1\nfi\n\n# root doesn't have user units\nif [[ $EUID -eq 0 ]]; then\n  MANAGERS=(system)\nelse\n  MANAGERS=(user system)\nfi\n\ndeclare -a STATES\nwhile [[ -n $1 ]]; do\n  case $1 in\n  -u | --user)\n    MANAGERS=(user)\n    shift\n    ;;\n  --sys | --system)\n    MANAGERS=(system)\n    shift\n    ;;\n  -s | --state)\n    STATES+=(\"--state=$2\")\n    shift\n    shift\n    ;;\n  --state=*)\n    STATES+=(\"$1\")\n    shift\n    ;;\n  -v | --version)\n    echo \"$PROG\" $SYSZ_VERSION\n    exit 0\n    ;;\n  -V | --verbose)\n    VERBOSE=true\n    shift\n    ;;\n  -h | --help)\n    _sysz_help\n    ;;\n  *)\n    break\n    ;;\n  esac\ndone\n\nfor STATE in \"${STATES[@]}\"; do\n  STATE=\"${STATE##*=}\"\n  if [[ -n $STATE ]] && ! systemctl --state=help | grep -q \"^${STATE}$\"; then\n    echo \"ERROR: Invalid state: $STATE\" >&2\n    exit 1\n  fi\ndone\n\ndeclare CMD\ndeclare -a ARGS\nwhile [[ -n $1 ]]; do\n  case $1 in\n  _fzf_preview)\n    shift\n    _fzf_preview \"$@\"\n    ;;\n  _fzf_cat)\n    shift\n    _fzf_cat \"$@\"\n    ;;\n  h | help)\n    _sysz_help\n    ;;\n  # Handle short names\n  re)\n    CMD=restart\n    ;;\n  s)\n    CMD=status\n    ;;\n  ed)\n    CMD=edit\n    ;;\n  en)\n    CMD=enable\n    ;;\n  d | dis)\n    CMD=disable\n    ;;\n  j)\n    CMD=journal\n    ;;\n  f)\n    CMD=follow\n    ;;\n  c)\n    CMD=\"cat\"\n    ;;\n  --)\n    shift\n    ARGS=(\"$@\")\n    break\n    ;;\n  -*)\n    echo \"ERROR: Unknown option: $1\" 2>&1\n    exit 1\n    ;;\n  *)\n    # assume the next argument is a command name\n    CMD=$1\n    ;;\n  esac\n  shift\ndone\n\nmkdir -p \"$(dirname \"$SYSZ_HISTORY\")\"\ntouch \"$SYSZ_HISTORY\"\n\nfunction join_by {\n  # https://stackoverflow.com/a/17841619/334632\n  local d=${1-} f=${2-}\n  if shift 2; then\n    printf %s \"$f\" \"${@/#/$d}\"\n  fi\n}\n\n_sysz_daemon_reload() {\n  (\n    if [[ $EUID -ne 0 ]]; then\n      echo '[system] daemon-reload'\n    fi\n    echo '[user] daemon-reload'\n  ) |\n    fzf \\\n      --multi \\\n      --no-info \\\n      --prompt=\"Reload: \" |\n    readarray -t RELOADS || exit $?\n\n  for RELOAD in \"${RELOADS[@]}\"; do\n    case $RELOAD in\n    '[user] daemon-reload')\n      _sysz_systemctl --user daemon-reload >&2\n      ;;\n    '[system] daemon-reload')\n      _sysz_systemctl --system daemon-reload >&2\n      ;;\n    esac\n  done\n}\n\n_sysz_states() {\n  # hide 'ing' because they are transient states\n  # which people probably aren't looking for\n  systemctl --state=help |\n    grep -v ':' |\n    grep -v 'ing' |\n    sort -u |\n    grep -v '^$' |\n    fzf \\\n      --multi \\\n      --prompt=\"States: \" |\n    readarray -t PICKED_STATES || exit $?\n\n  if [[ ${#PICKED_STATES[@]} -gt 0 ]]; then\n    STATES=()\n  fi\n\n  for STATE in \"${PICKED_STATES[@]}\"; do\n    STATES+=(\"--state=$STATE\")\n  done\n}\n\nwhile :; do\n  UNITS=()\n  KEY=\n\n  # prompt units\n  _sysz_list_units |\n    fzf \\\n      --multi \\\n      --ansi \\\n      --expect=ctrl-r,ctrl-s \\\n      --history=\"$SYSZ_HISTORY\" \\\n      --prompt=\"Units: \" \\\n      --header '? for keybindings' \\\n      --bind \"?:preview(echo '$(_sysz_keys)')\" \\\n      --bind \"ctrl-v:preview('${BASH_SOURCE[0]}' _fzf_cat {})\" \\\n      --preview=\"'${BASH_SOURCE[0]}' _fzf_preview {}\" \\\n      --preview-window=70% |\n    readarray -t PICKS\n\n  KEY=${PICKS[0]}\n  [[ $VERBOSE = true ]] && echo \"KEY: $KEY\" >&2\n  UNITS=(\"${PICKS[@]:1}\")\n\n  case $KEY in\n  ctrl-r)\n    _sysz_daemon_reload\n    continue\n    ;;\n  ctrl-s)\n    _sysz_states\n    continue\n    ;;\n  esac\n\n  if [[ ${#UNITS[@]} -eq 0 ]]; then\n    exit 1\n  fi\n\n  break\n\ndone\n\n[[ $VERBOSE = true ]] && printf 'UNIT: %s\\n' \"${UNITS[@]}\" >&2\n\ndeclare -a CMDS\nif [[ -n $CMD ]]; then\n  CMDS=(\"$CMD\")\nelse\n\n  if [[ ${#UNITS[@]} -gt 1 ]]; then\n    printf -v PREVIEW '%s\\n' \"${UNITS[@]}\"\n    PREVIEW_CMD=\"echo -n '$PREVIEW'\"\n    MULTI=true\n  else\n    UNIT=${UNITS[0]}\n\n    if [[ $UNIT = *@.* ]]; then\n      read -r -p \"$UNIT requires a parameter: \" PARAM ||\n        if [[ -z $PARAM ]]; then\n          echo \"ERROR: $UNIT requires a parameter\"\n          exit 1\n        fi\n\n      UNIT=${UNIT/\\@/\\@${PARAM}}\n      UNITS[0]=$UNIT\n    fi\n\n    ACTIVE_STATE=$(_sysz_show \"$UNIT\" ActiveState)\n    LOAD_STATE=$(_sysz_show \"$UNIT\" LoadState)\n    UNIT_FILE_STATE=$(_sysz_show \"$UNIT\" UnitFileState)\n    CAN_RELOAD=$(_sysz_show \"$UNIT\" CanReload)\n    PREVIEW_CMD=\"'${BASH_SOURCE[0]}' _fzf_preview '$UNIT'\"\n  fi\n\n  # prompt commands\n  fzf \\\n    --multi \\\n    --ansi \\\n    --no-info \\\n    --prompt=\"Commands: \" \\\n    --preview=\"$PREVIEW_CMD\" \\\n    --preview-window=80% < <(\n      # status\n      echo status \"${ARGS[*]}\"\n      # restart\n      [[ $MULTI = true || $ACTIVE_STATE = active ]] &&\n        printf '\\033[0;31m%s\\033[0m %s\\n' restart \"${ARGS[*]}\" # red\n      # start\n      [[ $MULTI = true || $ACTIVE_STATE != active ]] &&\n        printf '\\033[0;32m%s\\033[0m %s\\n' start \"${ARGS[*]}\" # green\n      # stop\n      [[ $MULTI = true || $ACTIVE_STATE = active ]] &&\n        printf '\\033[0;31m%s\\033[0m %s\\n' stop \"${ARGS[*]}\" # red\n      # enable\n      [[ $MULTI = true || $UNIT_FILE_STATE != enabled ]] &&\n        {\n          printf '\\033[0;32m%s\\033[0m %s\\n' \"enable\" \"${ARGS[*]}\" # green\n          printf '\\033[0;32m%s\\033[0m %s\\n' \"enable\" \"--now ${ARGS[*]}\"\n        }\n      # disable\n      [[ $MULTI = true || $UNIT_FILE_STATE = enabled ]] &&\n        {\n          printf '\\033[0;31m%s\\033[0m %s\\n' disable \"${ARGS[*]}\" # red\n          printf '\\033[0;31m%s\\033[0m %s\\n' disable \"--now ${ARGS[*]}\"\n        }\n\n      # journal\n      echo journal \"${ARGS[*]}\"\n      echo follow \"${ARGS[*]}\"\n\n      # reload\n      [[ $MULTI = true || $CAN_RELOAD = yes ]] &&\n        printf '\\033[0;37m%s\\033[0m %s\\n' reload \"${ARGS[*]}\" # green\n\n      # mask\n      [[ $MULTI = true || ($UNIT_FILE_STATE != masked && $LOAD_STATE != masked) ]] &&\n        printf '\\033[0;31m%s\\033[0m %s\\n' mask \"${ARGS[*]}\" # red\n      [[ $MULTI = true || $UNIT_FILE_STATE = masked || $LOAD_STATE = masked ]] &&\n        printf '\\033[0;32m%s\\033[0m %s\\n' unmask \"${ARGS[*]}\" # green\n\n      # cat\n      echo cat \"${ARGS[*]}\"\n      # edit\n      echo edit \"${ARGS[*]}\"\n      # show\n      echo show \"${ARGS[*]}\"\n    ) |\n    readarray -t CMDS || exit $?\nfi\n\nif [[ ${#CMDS[@]} -eq 0 ]]; then\n  exit 1\nfi\n\nfor PICK in \"${UNITS[@]}\"; do\n\n  MANAGER=$(_sysz_manager \"$PICK\")\n  UNIT=${PICK##* }\n\n  for CMD in \"${CMDS[@]}\"; do\n    case ${CMD%% *} in\n    journal)\n      _sysz_journalctl \"$MANAGER\" \"$UNIT\" -xe \"${ARGS[@]}\"\n      ;;\n    follow)\n      _sysz_journalctl \"$MANAGER\" \"$UNIT\" -xef \"${ARGS[@]}\"\n      ;;\n    status)\n      # shellcheck disable=2086\n      SYSTEMD_COLORS=1 systemctl \"$MANAGER\" $CMD --no-pager \"${ARGS[@]}\" -- \"$UNIT\"\n      ;;\n    cat | show)\n      _sysz_systemctl \"$MANAGER\" \"$CMD\" \"${ARGS[@]}\" -- \"$UNIT\" || exit $?\n      ;;\n    *)\n      # shellcheck disable=2086\n      _sysz_systemctl \"$MANAGER\" $CMD \"${ARGS[@]}\" -- \"$UNIT\" || CODE=$?\n      SYSTEMD_COLORS=1 systemctl \"$MANAGER\" status --no-pager -- \"$UNIT\"\n      if [[ ${#UNITS[@]} -eq 1 ]]; then\n        exit $CODE\n      fi\n      ;;\n    esac\n  done\ndone\n"
        }
      ]
    }
  ]
}