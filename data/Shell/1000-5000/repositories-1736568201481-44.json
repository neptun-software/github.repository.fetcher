{
  "metadata": {
    "timestamp": 1736568201481,
    "page": 44,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mitchellkrogza/nginx-ultimate-bad-bot-blocker",
      "stars": 4157,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".assets",
          "type": "tree",
          "content": null
        },
        {
          "name": ".deprecated",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0390625,
          "content": "#Ignore macOS .DS_Store Files\n.DS_Store\n"
        },
        {
          "name": ".latest_release",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTO-CONFIGURATION.md",
          "type": "blob",
          "size": 26.990234375,
          "content": "<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/_logo_nginx_bad_bot_blocker.png\" alt=\"Nginx Ultimate Bad Bot Spam Referrer Blocker - Nginx Block Bad Bots, Vulnerability Scanners, Malware and Adware, Malicious Sites, Spam Referrers, Bad Referrers, Spam Blocker with DDOS, Wordpress Theme Detector Blocking and Fail2Ban Jail for Repeat Offenders\"/><img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/spacer.jpg\"/>[![DUB](https://img.shields.io/dub/l/vibe-d.svg)](https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/LICENSE.md)<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/spacer.jpg\"/>[![GitHub release](https://img.shields.io/github/release/mitchellkrogza/nginx-ultimate-bad-bot-blocker.svg)](https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/releases/latest)<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/spacer.jpg\"/>[![Build Status](https://travis-ci.org/mitchellkrogza/nginx-ultimate-bad-bot-blocker.svg?branch=master)](https://travis-ci.org/mitchellkrogza/nginx-ultimate-bad-bot-blocker)<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/spacer.jpg\"/><a href='https://twitter.com/ubuntu101za'><img src='https://img.shields.io/twitter/follow/ubuntu101za.svg?style=social&label=Follow' alt='Follow @ubuntu101za'></a>\n\n# EASY AUTO CONFIGURATION INSTRUCTIONS FOR THE NGINX BAD BOT BLOCKER:\n### PLEASE READ CONFIGURATION INSTRUCTIONS BELOW THOROUGHLY :exclamation:\n\n_______________\n#### Version: V4.2025.01.4982\n#### Bad Referrers Blocked: [7104](https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/bad-referrers.list)\n#### Bad User-Agents (Bots) Blocked: [668](https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/bad-user-agents.list)\n#### Fake Googlebots Blocked: [217](https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/fake-googlebots.list)\n____________________\n\n\n## Help Support This Project \n\n[![Help me out with a mug of beer](https://img.shields.io/badge/Help%20-%20me%20out%20with%20a%20mug%20of%20%F0%9F%8D%BA-blue.svg)](https://paypal.me/mitchellkrog/) or [![Help me feed my cat](https://img.shields.io/badge/Help%20-%20me%20feed%20my%20hungry%20cat%20%F0%9F%98%B8-blue.svg)](https://paypal.me/mitchellkrog/)\n\n************************************************\n- Created by: https://github.com/mitchellkrogza for use on Nginx Web Server https://www.nginx.com/\n- Copyright Mitchell Krog <mitchellkrog@gmail.com>\n\nNot Using Nginx? See the [![Get the APACHE ULTIMATE BAD BOT BLOCKER](https://img.shields.io/badge/APACHE%20-%20ULTIMATE%20BAD%20BOT%20BLOCKER%20%E2%9B%94-blue.svg)](https://github.com/mitchellkrogza/apache-ultimate-bad-bot-blocker)\n\n************************************************\n### Update Notification System - Stay up to date on New Builds and Major Feature Changes \n\nIt is important to please <a href=\"https://groups.google.com/forum/#!forum/nginx-ultimate-bad-bot-blocker\">subscribe your email address to the mailing list</a> or <a href=\"mailto:nginx-ultimate-bad-bot-blocker+subscribe@googlegroups.com\">simply send a blank email here</a> to subscribe.\n\nPlease make sure you are subscribed to notifications to be notified when the blocker is updated and also to be notified when any important or mission critical (potentially breaking) changes take place.\n\n##### Also follow me on twitter @ubuntu101za for update notifications\n\n<a href='https://twitter.com/ubuntu101za'><img src='https://img.shields.io/twitter/follow/ubuntu101za.svg?style=social&label=Follow' alt='Follow @ubuntu101za'></a>\n\n************************************************\n## Please follow the instructions below step by step :exclamation:\n\n- This is our new preferred method of installation which is now done through a set of shell scripts contributed to this repo and maintained by Stuart Cardall @itoffshore who is one of the Alpine Linux package maintainers. \n\n- The instructions below are for a quick and painfree installation process which downloads all required files for the blocker and the scripts include adding the required includes to your nginx.conf and nginx .vhost files. The setup script assumes your vhost config files are located in /etc/nginx/sites-available/ and each vhost config file ends with a file extension of .vhost\n\n- For manual installation instructions please see - Please see: https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/MANUAL-CONFIGURATION.md\n\n- setup-ngxblocker, install-ngxblocker and update-ngxblocker can all be configured with custom installation / update locations from the command line. **(See Step 11 of the instructions to show you how use these scripts and non-standard Nginx locations)**\n\n- Run any of the setup, install or update scripts with --help or -h to view options.\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-1.png\"/>\n\nDownload install-ngxblocker to your /usr/local/sbin/directory and make the script executable.\n\n```\nsudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/install-ngxblocker -O /usr/local/sbin/install-ngxblocker\nsudo chmod +x /usr/local/sbin/install-ngxblocker\n```\n\nIf your Linux distribution does not have wget you can replace the wget command above using curl as follows:\n\n```\ncurl -sL https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/install-ngxblocker -o /usr/local/sbin/install-ngxblocker\n```\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-2.png\"/>\n\nNow run the install-ngxblocker script in DRY-MODE which will show you what changes it will make and what files it will download for you. This is only a DRY-RUN so no changes are being made yet. \n\nThe install-ngxblocker downloads all required files including the setup and update scripts.\n\n```\ncd /usr/local/sbin\nsudo ./install-ngxblocker\n```\n\nThis will show you output as follows of the changes that will be made \n**(NOTE: this is only a DRY-RUN no changes have been made)**\n\n```\nChecking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt\n\n** Dry Run ** | not updating files | run  as 'install-ngxblocker -x' to install files.\n\nCreating directory: /etc/nginx/bots.d\n\nREPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master\n\nDownloading [FROM]=>  [REPO]/conf.d/globalblacklist.conf            [TO]=>  /etc/nginx/conf.d/globalblacklist.conf\nDownloading [FROM]=>  [REPO]/conf.d/botblocker-nginx-settings.conf  [TO]=>  /etc/nginx/conf.d/botblocker-nginx-settings.conf\n\nREPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master\n\nDownloading [FROM]=>  [REPO]/bots.d/blockbots.conf              [TO]=>  /etc/nginx/bots.d/blockbots.conf\nDownloading [FROM]=>  [REPO]/bots.d/ddos.conf                   [TO]=>  /etc/nginx/bots.d/ddos.conf\nDownloading [FROM]=>  [REPO]/bots.d/whitelist-ips.conf          [TO]=>  /etc/nginx/bots.d/whitelist-ips.conf\nDownloading [FROM]=>  [REPO]/bots.d/whitelist-domains.conf      [TO]=>  /etc/nginx/bots.d/whitelist-domains.conf\nDownloading [FROM]=>  [REPO]/bots.d/blacklist-user-agents.conf  [TO]=>  /etc/nginx/bots.d/blacklist-user-agents.conf\nDownloading [FROM]=>  [REPO]/bots.d/blacklist-ips.conf          [TO]=>  /etc/nginx/bots.d/blacklist-ips.conf\nDownloading [FROM]=>  [REPO]/bots.d/bad-referrer-words.conf     [TO]=>  /etc/nginx/bots.d/bad-referrer-words.conf\nDownloading [FROM]=>  [REPO]/bots.d/custom-bad-referrers.conf   [TO]=>  /etc/nginx/bots.d/custom-bad-referrers.conf\n\nREPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master\n\nDownloading [FROM]=>  [REPO]/setup-ngxblocker      [TO]=>  /usr/local/sbin/setup-ngxblocker\nDownloading [FROM]=>  [REPO]/update-ngxblocker     [TO]=>  /usr/local/sbin/update-ngxblocker\n```\n\n**setup-ngxblocker, install-ngxblocker and update-ngxblocker can all be configured with custom installation / update locations from the command line.** \n\n**Run any of the setup, install or update scripts with --help or -h to view options.**\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-3.png\"/>\n\nNow run the install script with the -x parameter to download all the necessary files from the repository:\n\n```\ncd /usr/local/sbin/\nsudo ./install-ngxblocker -x\n```\n\nThis will give you the following output:\n\n```\nChecking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt\n\nCreating directory: /etc/nginx/bots.d\n\nREPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master\n\nDownloading [FROM]=>  [REPO]/conf.d/globalblacklist.conf            [TO]=>  /etc/nginx/conf.d/globalblacklist.conf...OK\nDownloading [FROM]=>  [REPO]/conf.d/botblocker-nginx-settings.conf  [TO]=>  /etc/nginx/conf.d/botblocker-nginx-settings.conf...OK\n\nREPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master\n\nDownloading [FROM]=>  [REPO]/bots.d/blockbots.conf              [TO]=>  /etc/nginx/bots.d/blockbots.conf...OK\nDownloading [FROM]=>  [REPO]/bots.d/ddos.conf                   [TO]=>  /etc/nginx/bots.d/ddos.conf...OK\nDownloading [FROM]=>  [REPO]/bots.d/whitelist-ips.conf          [TO]=>  /etc/nginx/bots.d/whitelist-ips.conf...OK\nDownloading [FROM]=>  [REPO]/bots.d/whitelist-domains.conf      [TO]=>  /etc/nginx/bots.d/whitelist-domains.conf...OK\nDownloading [FROM]=>  [REPO]/bots.d/blacklist-user-agents.conf  [TO]=>  /etc/nginx/bots.d/blacklist-user-agents.conf...OK\nDownloading [FROM]=>  [REPO]/bots.d/blacklist-ips.conf          [TO]=>  /etc/nginx/bots.d/blacklist-ips.conf...OK\nDownloading [FROM]=>  [REPO]/bots.d/bad-referrer-words.conf     [TO]=>  /etc/nginx/bots.d/bad-referrer-words.conf...OK\nDownloading [FROM]=>  [REPO]/bots.d/custom-bad-referrers.conf   [TO]=>  /etc/nginx/bots.d/custom-bad-referrers.conf...OK\n\nREPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master\n\nDownloading [FROM]=>  [REPO]/setup-ngxblocker      [TO]=>  /usr/local/sbin/setup-ngxblocker...OK\nDownloading [FROM]=>  [REPO]/update-ngxblocker     [TO]=>  /usr/local/sbin/update-ngxblocker...OK\n```\n\nAll the required files have now been downloaded to the correct folders on Nginx for you direct from the repository.\n\n**MAKE SURE you set your setup and update scripts to be executable by running the following two commands. This is important before continuing with Step 4 and onwards.**\n\n```\nsudo chmod +x /usr/local/sbin/setup-ngxblocker\nsudo chmod +x /usr/local/sbin/update-ngxblocker\n```\n\n**setup-ngxblocker, install-ngxblocker and update-ngxblocker can all be configured with custom installation / update locations from the command line.** \n\n**Run any of the setup, install or update scripts with --help or -h to view options.**\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-4.png\"/>\n\nNow run the setup-ngxblocker script in DRY-MODE which will show you what changes it will make and what files it will download for you. This is only a DRY-RUN so no changes are being made yet.\n\n```\ncd /usr/local/sbin/\nsudo ./setup-ngxblocker\n```\n\nThis will give you output as follows (this output below assumes your nginx.conf file already has the default include of /etc/nginx/conf.d/*)\nAll Nginx installations I know of have this default include in the nginx.conf file distributed with all versions.\n\n```\nChecking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt\n\n** Dry Run ** | not updating files | run  as 'setup-ngxblocker -x' to setup files.\n\nINFO:      /etc/nginx/conf.d/* detected               => /etc/nginx/nginx.conf\ninserting: include /etc/nginx/bots.d/blockbots.conf;  => /etc/nginx/sites-available/mydomain2.com.vhost\ninserting: include /etc/nginx/bots.d/ddos.conf;       => /etc/nginx/sites-available/mydomain2.com.vhost\ninserting: include /etc/nginx/bots.d/blockbots.conf;  => /etc/nginx/sites-available/mydomain1.com.vhost\ninserting: include /etc/nginx/bots.d/ddos.conf;       => /etc/nginx/sites-available/mydomain1.com.vhost\n\nWhitelisting ip:  x.x.x.x  => /etc/nginx/bots.d/whitelist-ips.conf\n```\n\nThis script also whitelists your IP in the whitelist-ips.conf file for you. \nFurther IP's or IP ranges can be added to your customizable whitelits-ips.conf file located in /etc/nginx/bots.d/whitelist-ips.conf.\n\n**setup-ngxblocker, install-ngxblocker and update-ngxblocker can all be configured with custom installation / update locations from the command line.** \n\n**Run any of the setup, install or update scripts with --help or -h to view options.**\n\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-5.png\"/>\n\nNow run the setup script with the -x parameter to make all the necessary changes to your nginx.conf (if required) and also to add the required includes into all your vhost files. \n\nThis setup-ngxblocker script assumes that all your vhost files located in /etc/nginx/sites-available end in an extension .vhost. It is good practice to make all your vhost config files end with a .vhost extension but if you prefer to stick what you already have eg .conf you can simply modify run setup-ngxblocker using the `-e` parameter to specify the extension you use for your vhost files.\n\nFor instance if your vhost files end in .conf you will change this execute setup-ngxblocker with an additional command line parameter as follows:\n\n`sudo ./setup-ngxblocker -x -e conf`\n\nSo now let's run the setup script and let it make all the changes we need to make the Bot Blocker active on all your sites.\n\n```\ncd /usr/local/sbin/\nsudo ./setup-ngxblocker -x\n```\n\nYou will see output as follows:\n\n```\nChecking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt\n\nINFO:      /etc/nginx/conf.d/* detected               => /etc/nginx/nginx.conf\ninserting: include /etc/nginx/bots.d/blockbots.conf;  => /etc/nginx/sites-available/mydomain2.com.vhost\ninserting: include /etc/nginx/bots.d/ddos.conf;       => /etc/nginx/sites-available/mydomain2.com.vhost\ninserting: include /etc/nginx/bots.d/blockbots.conf;  => /etc/nginx/sites-available/mydomain1.com.vhost\ninserting: include /etc/nginx/bots.d/ddos.conf;       => /etc/nginx/sites-available/mydomain1.com.vhost\n\nWhitelisting ip:  x.x.x.x  => /etc/nginx/bots.d/whitelist-ips.conf\n```\n\nYou will note it has done the includes in all the .vhost files on my test bed server and also whitelisted your own IP address in the whitelist-ips.conf file for you. Further IP's or IP ranges can be added to your customizable whitelits-ips.conf file located in /etc/nginx/bots.d/whitelist-ips.conf.\n\nWhat this setup script has done has simply added the following include statements into your .vhost files for you, it also adds /etc/nginx/conf.d/* to the includes in nginx.conf (if not already in nginx.conf), otherwise, the whole script will fail.\n\n```\n# Bad Bot Blocker\ninclude /etc/nginx/bots.d/ddos.conf;\ninclude /etc/nginx/bots.d/blockbots.conf;\n```\n\n**setup-ngxblocker, install-ngxblocker and update-ngxblocker can all be configured with custom installation / update locations from the command line.** \n\n**Run any of the setup, install or update scripts with --help or -h to view options.**\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-6.png\"/>\n\nNow test your nginx configuration\n\n`sudo nginx -t`\n\nand you should see\n\n```\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n```\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-7.png\"/>\n\nNow simply reload / restart Nginx and the Bot Blocker will immediately be active and protecting all your web sites.\n\n`sudo nginx -t && sudo nginx -s reload`\n\nor\n\n`sudo service nginx restart`\n\nThat's it, the blocker is now active and protecting your sites from thousands of malicious bots and domains.\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-8.png\"/>\n\nNow setup cron to automatically update the blocker for you every day so you always have the latest up to date protection.\n\n`sudo crontab -e`\n\nAdd the following line at the end of your crontab file. Note adding the `-e` command line parameter to specify your email address where the update report is sent to. Obviously substitute `yourname@youremail.com` with your real email address or you will not receive the email when the script has updated.\n\n`00 22 * * * sudo /usr/local/sbin/update-ngxblocker -e yourname@youremail.com` \n\nThis will update the blocker every night for you at 10 PM.\n\nIf you want it to update more frequently (as sometimes I push out 3-4 updates a day) you can set it as follows to run the cron every 8 hours, although just once a day is more than enough.\n\n`00 */8 * * * sudo /usr/local/sbin/update-ngxblocker -e yourname@youremail.com`       \n\nIf you don't want any email notification after an update (not advisable in case Nginx ever has an EMERG when reloading), then simply run your cron as follows. \n\n`00 */8 * * * sudo /usr/local/sbin/update-ngxblocker -n`       \n\nThat's it, the blocker will automatically keep itself up to date and also reload Nginx once it has downloaded the latest version of the globalblacklist.conf file.\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-9.png\"/>\n\nYou can now customize any of the following files below to suit your environment or requirements. These include files never get modified during an update using the auto update script above so whatever customizations you do here will never be overwritten during an update.\n\n```\n/etc/nginx/bots.d/whitelist-ips.conf\n/etc/nginx/bots.d/whitelist-domains.conf\n/etc/nginx/bots.d/blacklist-user-agents.conf\n/etc/nginx/bots.d/blacklist-ips.conf\n/etc/nginx/bots.d/bad-referrer-words.conf\n/etc/nginx/bots.d/custom-bad-referrers.conf\n```\n\nLet's say for some \"obscure\" reason you actually want to block GoogleBot from accessing your site. You would simply add it to the /etc/nginx/bots.d/blacklist-user-agents.conf file and it will over-ride the default whitelist for GoogleBot. the same applies to any other bots that are whitelisted by default.\n\nAll include files are commented for your convenience.\n\n************************************************\n## If This This Project helped you out, help support it \n\n[![Help me out with a mug of beer](https://img.shields.io/badge/Help%20-%20me%20out%20with%20a%20mug%20of%20%F0%9F%8D%BA-blue.svg)](https://paypal.me/mitchellkrog/) or [![Help me feed my cat](https://img.shields.io/badge/Help%20-%20me%20feed%20my%20hungry%20cat%20%F0%9F%98%B8-blue.svg)](https://paypal.me/mitchellkrog/)\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-10.png\"/>\n\n(TEST THAT IT IS WORKING)\n\n**TESTING**\n\nRun the following commands one by one from a terminal on another linux machine against your own domain name. \n**substitute yourdomain.com in the examples below with your REAL domain name**\n\n`curl -A \"Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.96 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\" http://yourdomain.com`\n\n`curl -A \"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\" http://yourdomain.com`\n\n**Should respond with 200 OK**\n\n`curl -A \"Xenu Link Sleuth/1.3.8\" http://yourdomain.com`\n\n`curl -A \"Mozilla/5.0 (compatible; AhrefsBot/5.2; +http://ahrefs.com/robot/)\" http://yourdomain.com`\n\n**Should respond with: curl: (52) Empty reply from server**\n\n`curl -I http://yourdomain.com -e http://100dollars-seo.com`\n\n`curl -I http://yourdomain.com -e http://zx6.ru`\n\n**Should respond with: curl: (52) Empty reply from server**\n\nThe Nginx Ultimate Bot Blocker is now WORKING and PROTECTING your web sites !!!\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-11.png\"/>\n\n#### OPTIONAL\n**INSTALLING THE BLOCKER TO NON-STANDARD NGINX FOLDER LOCATIONS**\n\nSome people build Nginx themselves and do not end up having the standard nginx folder locations at `/etc/nginx`\n\nFor users like this you can run the install-ngblocker, setup-ngxblocker and update-ngblocker specifying your\nfolder location in the command lines as follows.\n\n`sudo ./install-ngxblocker -x -c /usr/local/nginx/conf.d -b /usr/local/nginx/bots.d`\n\n`sudo ./setup-ngxblocker -x -c /usr/local/nginx/conf.d -b /usr/local/nginx/bots.d`\n\n`sudo ./update-ngxblocker -c /usr/local/nginx/conf.d -b /usr/local/nginx/bots.d -e yourname@youremail.com`\n\nThis will automatically put the files into the locations you specify, it will do the includes into your vhosts using your custom locations  and when update-ngblocker pulls a new update it will also now automatically re-write the \"Include\" sections inside the globalblacklist.conf file your own custom locations. Thanks again to Stuart Cardall @itoffshore for his contributions of these excellent scripts.\n\n************************************************\n# HAS YOUR WEB SITE BEEN HACKED?\n\n[![Contact me for help](https://img.shields.io/badge/Contact%20-%20me%20for%20help%20%F0%9F%9A%91-blue.svg)](mailto:mitchellkrog@gmail.com) to help you clean up and secure your web site. \n\n************************************************\n### SOME OTHER AWESOME FREE PROJECTS\n\n- https://github.com/mitchellkrogza/apache-ultimate-bad-bot-blocker\n- https://github.com/mitchellkrogza/Badd-Boyz-Hosts\n- https://github.com/mitchellkrogza/Ultimate.Hosts.Blacklist\n- https://github.com/mitchellkrogza/Stop.Google.Analytics.Ghost.Spam.HOWTO\n- https://github.com/mitchellkrogza/The-Big-List-of-Hacked-Malware-Web-Sites\n- https://github.com/mitchellkrogza/fail2ban-useful-scripts\n- https://github.com/mitchellkrogza/linux-server-administration-scripts\n- https://github.com/mitchellkrogza/Travis-CI-Nginx-for-Testing-Nginx-Configuration\n- https://github.com/mitchellkrogza/Travis-CI-for-Apache-For-Testing-Apache-and-PHP-Configurations\n- https://github.com/mitchellkrogza/Fail2Ban-Blacklist-JAIL-for-Repeat-Offenders-with-Perma-Extended-Banning\n- https://github.com/funilrys/PyFunceble\n- https://github.com/funilrys/dead-hosts\n- https://github.com/mitchellkrogza/The-Big-List-of-Hacked-Malware-Web-Sites\n- https://github.com/mitchellkrogza/Suspicious.Snooping.Sniffing.Hacking.IP.Addresses\n- https://github.com/mitchellkrogza/Fail2Ban.WebExploits\n\n************************************************\n### ALSO CHECKOUT THE NEW BIG LIST OF HACKED MALWARE & WORDPRESS WEB SITES\n\nThis repository contains a list of all web sites I come across that are hacked with malware. \nMost site owners are unaware their sites have been hacked and are being used to plant malware.\n\nCheck it out at: https://github.com/mitchellkrogza/The-Big-List-of-Hacked-Malware-Web-Sites\n\n************************************************\n### INTO PHOTOGRAPHY?\n\nCome drop by and visit me at [mitchellkrog.com](https://mitchellkrog.com) or [Facebook](https://www.facebook.com/MitchellKrogPhotography) or Follow Me on Twitter <a href='https://twitter.com/MitchellKrog'><img src='https://img.shields.io/twitter/follow/MitchellKrog.svg?style=social&label=Follow' alt='Follow @MitchellKrog'></a>\n\n************************************************\n### ACKNOWLEDGMENTS & CONTRIBUTORS:\n\nMany Thanks to those contributing to this project.\n\nMany parts of the generator scripts and code running behind this project have been adapted from snippets from hundreds of sources. \nIn fact it is so hard to mention everyone but here are a few key people whose little snippets of code have helped me introduce new features all the time. Show them some love and check out some of their projects too.\n\n- Stuart Cardall - https://github.com/itoffshore (Install, Update and Setup Scripts & Alpine Linux Package Maintainer)\n- Nissar Chababy - https://github.com/funilrys/funceble (Excellent script for checking ACTIVE, INACTIVE and EXPIRED Domain Names)\n- Marius Voila https://github.com/mariusv\n- Cătălin Mariș https://github.com/alrra\n- deformhead https://github.com/deformhead\n- bluedragonz https://github.com/bluedragonz\n- Alexander https://github.com/shoonois\n- Steven Black https://github.com/StevenBlack\n- Fail2Ban - https://github.com/fail2ban\n- Stevie-Ray Hartog https://github.com/Stevie-Ray\n- Sir Athos from StackOverFlow - http://stackoverflow.com/users/2245910/sir-athos (help with Travis Build Tagging and Committing)\n- StackOverflow - http://stackoverflow.com/ (bash scripts from hundreds of questions and answers)\n- SuperUser - http://superuser.com/ (snippets from various questions and answers)\n\nIf you believe your name should be here, drop me a line.\n\n************************************************\n### Writing Code like this takes lots of time !!\n\nThousand of hours of programming and testing have gone into this project, show some love\n\n[![Help me out with a mug of beer](https://img.shields.io/badge/Help%20-%20me%20out%20with%20a%20mug%20of%20%F0%9F%8D%BA-blue.svg)](https://paypal.me/mitchellkrog/) or [![Help me feed my cat](https://img.shields.io/badge/Help%20-%20me%20feed%20my%20hungry%20cat%20%F0%9F%98%B8-blue.svg)](https://paypal.me/mitchellkrog/)\n\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/zuko.png\"/>\n\n************************************************\n# MIT License\n\n## Copyright (c) 2017 Mitchell Krog - mitchellkrog@gmail.com\n## https://github.com/mitchellkrogza\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "HEAD",
          "type": "blob",
          "size": 0.0224609375,
          "content": "ref: refs/heads/master\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.1025390625,
          "content": "MIT License\n\nCopyright (c) 2017 Mitchell Krog - mitchellkrog@gmail.com\nhttps://github.com/mitchellkrogza\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANUAL-CONFIGURATION.md",
          "type": "blob",
          "size": 22.0654296875,
          "content": "<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/_logo_nginx_bad_bot_blocker.png\" alt=\"Nginx Ultimate Bad Bot Spam Referrer Blocker - Nginx Block Bad Bots, Vulnerability Scanners, Malware and Adware, Malicious Sites, Spam Referrers, Bad Referrers, Spam Blocker with DDOS, Wordpress Theme Detector Blocking and Fail2Ban Jail for Repeat Offenders\"/><img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/spacer.jpg\"/>[![DUB](https://img.shields.io/dub/l/vibe-d.svg)](https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/LICENSE.md)<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/spacer.jpg\"/>[![GitHub release](https://img.shields.io/github/release/mitchellkrogza/nginx-ultimate-bad-bot-blocker.svg)](https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/releases/latest)<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/spacer.jpg\"/>[![Build Status](https://travis-ci.org/mitchellkrogza/nginx-ultimate-bad-bot-blocker.svg?branch=master)](https://travis-ci.org/mitchellkrogza/nginx-ultimate-bad-bot-blocker)<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/spacer.jpg\"/><a href='https://twitter.com/ubuntu101za'><img src='https://img.shields.io/twitter/follow/ubuntu101za.svg?style=social&label=Follow' alt='Follow @ubuntu101za'></a>\n\n# MANUAL CONFIGURATION INSTRUCTIONS FOR THE NGINX BAD BOT BLOCKER:\n### PLEASE READ CONFIGURATION INSTRUCTIONS BELOW THOROUGHLY :exclamation:\n\n_______________\n#### Version: V4.2025.01.4982\n#### Bad Referrers Blocked: [7104](https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/bad-referrers.list)\n#### Bad User-Agents (Bots) Blocked: [668](https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/bad-user-agents.list)\n#### Fake Googlebots Blocked: [217](https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/fake-googlebots.list)\n____________________\n\n## Help Support This Project \n\n[![Help me out with a mug of beer](https://img.shields.io/badge/Help%20-%20me%20out%20with%20a%20mug%20of%20%F0%9F%8D%BA-blue.svg)](https://paypal.me/mitchellkrog/) or [![Help me feed my cat](https://img.shields.io/badge/Help%20-%20me%20feed%20my%20hungry%20cat%20%F0%9F%98%B8-blue.svg)](https://paypal.me/mitchellkrog/)\n\n************************************************\n- Created by: https://github.com/mitchellkrogza for use on Nginx Web Server https://www.nginx.com/\n- Copyright Mitchell Krog <mitchellkrog@gmail.com>\n\nNot Using Nginx? See the [![Get the APACHE ULTIMATE BAD BOT BLOCKER](https://img.shields.io/badge/APACHE%20-%20ULTIMATE%20BAD%20BOT%20BLOCKER%20%E2%9B%94-blue.svg)](https://github.com/mitchellkrogza/apache-ultimate-bad-bot-blocker)\n\n************************************************\n### Update Notification System - Stay up to date on New Builds and Major Feature Changes \n\nIt is important to please <a href=\"https://groups.google.com/forum/#!forum/nginx-ultimate-bad-bot-blocker\">subscribe your email address to the mailing list</a> or <a href=\"mailto:nginx-ultimate-bad-bot-blocker+subscribe@googlegroups.com\">simply send a blank email here</a> to subscribe.\n\nPlease make sure you are subscribed to notifications to be notified when the blocker is updated and also to be notified when any important or mission critical (potentially breaking) changes take place.\n\n##### Also follow me on twitter @ubuntu101za for update notifications\n\n<a href='https://twitter.com/ubuntu101za'><img src='https://img.shields.io/twitter/follow/ubuntu101za.svg?style=social&label=Follow' alt='Follow @ubuntu101za'></a>\n\n************************************************\n### PLEASE READ CONFIGURATION INSTRUCTIONS BELOW THOROUGHLY :exclamation:\n\n**If you miss one step you will get an nginx EMERG :exclamation: error. This is normally a result of not downloading either blockbots.conf, ddos.conf, whitelist-ips.conf, whitelist-domains.conf, bad-referrer-words.conf, custom-bad-referrers.conf, blacklist-user-agents.conf or blacklist-ips.conf into your /etc/nginx/bots.d folder. If any of the include files are missing Nginx will EMERG and will not reload.**\n\n************************************************\n## AUTO INSTALLATION INSTRUCTIONS\n\nIt is **HIGHLY SUGGESTED** to please use the <a href=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/AUTO-CONFIGURATION.md\">auto installation scripts</a> created by Stuart Cardall @itoffshore\n\nPlease see: https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/AUTO-CONFIGURATION.md\n\n************************************************\n## MANUAL INSTALLATION INSTRUCTIONS\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-1.png\"/>\n\n**COPY THE GLOBALBLACKLIST.CONF FILE FROM THE REPO**\n\nCopy the contents of **/conf.d/globalblacklist.conf** into your /etc/nginx/conf.d folder. \n\n`sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/conf.d/globalblacklist.conf -O /etc/nginx/conf.d/globalblacklist.conf`\n\nIf your Linux distribution does not have wget you can replace the wget commands above using curl as follows:\n\n`curl -sL https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/conf.d/globalblacklist.conf -o /etc/nginx/conf.d/globalblacklist.conf`\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-2.png\"/>\n\n**COPY THE INCLUDE FILES FROM THE REPO**\n\n- From your command line in Linux type\n\n`sudo mkdir /etc/nginx/bots.d `\n\n- copy the all the following files into that folder\n\n`sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/bots.d/blockbots.conf -O /etc/nginx/bots.d/blockbots.conf`\n`sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/bots.d/ddos.conf -O /etc/nginx/bots.d/ddos.conf`\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-3.png\"/>\n\n**WHITELIST ALL YOUR OWN DOMAIN NAMES AND IP ADDRESSES**\n\nWhitelist all your own domain names and IP addresses. **Please note important changes**, this is now done using include files so that you do not have to keep reinserting your whitelisted domains and IP addresses every time you update.\n\n- copy the whitelist-ips.conf file into that folder\n\n`sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/bots.d/whitelist-ips.conf -O /etc/nginx/bots.d/whitelist-ips.conf`\n\n\n- copy the whitelist-domains.conf file into the same folder\n\n`sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/bots.d/whitelist-domains.conf -O /etc/nginx/bots.d/whitelist-domains.conf`\n\n\nUse nano, vim or any other text editor to edit both whitelist-ips.conf and whitelist-domains.conf to include all your own domain names and IP addresses that you want to specifically whitelist from the blocker script. \nWhen pulling any future updates now your domains and IP whitelists will not be overwritten.\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-4.png\"/>\n\n**BLACKLIST USING YOUR OWN CUSTOM USER-AGENT BLACKLIST**\n\nCopy the custom User-Agents blacklist file into your /etc/nginx/bots.d folder\n\n- copy the blacklist-user-agents.conf file from the repository\n\n`sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/bots.d/blacklist-user-agents.conf -O /etc/nginx/bots.d/blacklist-user-agents.conf`\n\n\nUse nano, vim or any other text editor to edit (if needed) blacklist-user-agents.conf to include your own custom list of bad agents that are not included in the blocker like \"omgilibot\" which some people choose to block. \nWhen pulling any future updates now your custom User-Agents blacklist will not be overwritten.\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-5.png\"/>\n\n**BLACKLIST USING YOUR OWN CUSTOM BAD REFERRERS**\n\nCopy the custom bad referrers blacklist file into your /etc/nginx/bots.d folder\n\n- copy the custom-bad-referrers.conf file from the repository\n\n`sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/bots.d/custom-bad-referrers.conf -O /etc/nginx/bots.d/custom-bad-referrers.conf`\n\nUse nano, vim or any other text editor to edit (if needed) custom-bad-referrers.conf to include your own custom list of bad referrer domains that are not included in the blocker. \nWhen pulling any future updates now your custom referrers list will not be overwritten.\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-6.png\"/>\n\n**BLACKLIST IPS AND IP RANGES USING YOUR OWN CUSTOM LIST**\n\nCopy the custom IP blacklist file into your /etc/nginx/bots.d folder\n\n- copy the blacklist-ips.conf file from the repository\n\n`sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/bots.d/blacklist-ips.conf -O /etc/nginx/bots.d/blacklist-ips.conf`\n\nUse nano, vim or any other text editor to edit (if needed) blacklist-ips.conf to include your own custom list of IP Addresses and IP Ranges that you wish to block.  \nWhen pulling any future updates now your custom IP blacklist will not be overwritten.\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-7.png\"/>\n\n**DOWNLOAD CUSTOM BAD REFERRER WORDS INCLUDE FILE FOR CUSTOMIZED SCANNING OF BAD WORDS**\n\nCopy the custom bad referrer words include file into your /etc/nginx/bots.d folder\n\n- copy the bad-referrer-words.conf file from the repository\n\n`sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/bots.d/bad-referrer-words.conf -O /etc/nginx/bots.d/bad-referrer-words.conf`\n\nUse nano, vim or any other text editor to edit the bad-referrer-words.conf file as you like. \nWhen pulling any future updates now your custom bad referrer words list will not be overwritten.\n\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-8.png\"/>\n\n**INCLUDE IMPORTANT SETTINGS IN NGINX.CONF**\n**Also see SAMPLE-nginx.conf file in the root of this repository**\n\n- copy the botblocker-nginx-settings.conf file directly from the repo\n\n`sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/conf.d/botblocker-nginx-settings.conf -O /etc/nginx/conf.d/botblocker-nginx-settings.conf`\n\n**What is included in this settings file above for nginx?**\nThe important settings file above adds the rate limiting functions and hash_bucket settings for nginx for you. Below is what the file contains, you cn add these manually to your nginx.conf file if you so please but the include file above will do it for you ad nginx loads any .conf file in /etc/conf.d (See STEP 6)\n\n> server_names_hash_bucket_size 64;\n\n> server_names_hash_max_size 4096;\n\n> limit_req_zone $binary_remote_addr zone=flood:50m rate=90r/s;\n\n> limit_conn_zone $binary_remote_addr zone=addr:50m;\n\n**PLEASE NOTE:** The above rate limiting rules are for the DDOS filter, it may seem like high values to you but for wordpress sites with plugins and lots of images, it's not. This will not limit any real visitor to your Wordpress sites but it will immediately rate limit any aggressive bot. Remember that other bots and user agents are rate limited using a different rate limiting rule at the bottom of the globalblacklist.conf file.\n\nThe server_names_hash settings allows Nginx Server to load this very large list of domain names and IP addresses into memory. You can tweak these settings to your own requirements.\n\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-9.png\"/>\n**VERY IMPORTANT**\n\n**MAKE SURE** that your nginx.conf file contains the following include directive. If it's commented out make sure to uncomment it or none of this will work.\n\n- `include /etc/nginx/conf.d/*;`\n\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-10.png\"/>\n**VERY IMPORTANT**\n\n**ADD INCLUDE FILES INTO A VHOST**\n\nOpen a site config file for Nginx (just one for now) and add the following lines.\n\n##### VERY IMPORTANT NOTE: \n\nThese includes MUST be added within a **server {}** block of a vhost otherwise you will get EMERG errors from Nginx.\n\n- `include /etc/nginx/bots.d/blockbots.conf;`\n\n- `include /etc/nginx/bots.d/ddos.conf;`\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-11b.png\"/>\n\n**TESTING YOUR NGINX CONFIGURATION**\n\n`sudo nginx -t`\n\nIf you get no errors then you followed my instructions so now you can make the blocker go live with a simple.\n\n`sudo service nginx reload`\n\nThe blocker is now active and working so now you can run some simple tests from another linux machine to make sure it's working.\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-12.png\"/>\n\n**TESTING**\n\nRun the following commands one by one from a terminal on another linux machine against your own domain name. \n**substitute yourdomain.com in the examples below with your REAL domain name**\n\n`curl -A \"googlebot\" http://yourdomain.com`\n\nShould respond with 200 OK\n\n`curl -A \"80legs\" http://yourdomain.com`\n\n`curl -A \"masscan\" http://yourdomain.com`\n\nShould respond with: curl: (52) Empty reply from server\n\n`curl -I http://yourdomain.com -e http://100dollars-seo.com`\n\n`curl -I http://yourdomain.com -e http://zx6.ru`\n\nShould respond with: curl: (52) Empty reply from server\n\nThe Nginx Ultimate Bot Blocker is now WORKING and PROTECTING your web sites !!!\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-13.png\"/>\n\n**UPDATING THE NGINX BAD BOT BLOCKER** is now easy thanks to the automatic includes for whitelisting your own domain names.\n\nUpdating to the latest version is now as simple as:\n\n`cd /etc/nginx/conf.d`\n\n`sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/conf.d/globalblacklist.conf -O /etc/nginx/conf.d/globalblacklist.conf`\n\n`sudo nginx -t`\n\n`sudo service nginx reload` \n\nAnd you will be up to date with all your whitelisted domains included automatically for you now. \n\n************************************************\n# AUTO UPDATING:\n\nSee the latest auto updater bash script at:\n\nhttps://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/update-ngxblocker\n\nWith great thanks to Stuart Cardall (https://github.com/itoffshore) for improving on it to be truly universal to other distro's.\n\nRelax now and sleep better at night knowing your site is telling all those baddies they are FORBIDDEN !!!\n\n************************************************\n### PULL REQUESTS / CORRECTIONS / FALSE POSITIVES:\n\n[![Log an Issue](https://img.shields.io/badge/LOG%20-%20an%20issue%20%F0%9F%9A%A6-blue.svg)](https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/issues) or to contribute your own bad referers, bots or to make corrections to any incorrectly blocked bots or domains please fork a copy of this repository and send pull requests on the <a href=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/tree/master/_generator_lists\">individual files located here</a> and then send a pull request (PR).\n\n##### All Additions, Removals and Corrections will all be checked for accuracy before being merged into main blocker.\n\n************************************************\n### ISSUES:\n\n[![Log an Issue](https://img.shields.io/badge/LOG%20-%20an%20issue%20%F0%9F%9A%A6-blue.svg)](https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/issues) regarding incorrect listings or any other problems on the issues system and they will be investigated and removed if necessary. I responde very quickly to user problems and have helped countless users for days on end to get their bot blocker working. You could say I am mad (disputable) but I love helping people and do not ignore issues or people with problems getting this to work.\n\n************************************************\n# HAS YOUR WEB SITE BEEN HACKED?\n\n[![Contact me for help](https://img.shields.io/badge/Contact%20-%20me%20for%20help%20%F0%9F%9A%91-blue.svg)](mailto:mitchellkrog@gmail.com) to help you clean up and secure your web site. \n\n************************************************\n### SOME OTHER AWESOME FREE PROJECTS\n\n- https://github.com/mitchellkrogza/apache-ultimate-bad-bot-blocker\n- https://github.com/mitchellkrogza/Badd-Boyz-Hosts\n- https://github.com/mitchellkrogza/Ultimate.Hosts.Blacklist\n- https://github.com/mitchellkrogza/Stop.Google.Analytics.Ghost.Spam.HOWTO\n- https://github.com/mitchellkrogza/The-Big-List-of-Hacked-Malware-Web-Sites\n- https://github.com/mitchellkrogza/fail2ban-useful-scripts\n- https://github.com/mitchellkrogza/linux-server-administration-scripts\n- https://github.com/mitchellkrogza/Travis-CI-Nginx-for-Testing-Nginx-Configuration\n- https://github.com/mitchellkrogza/Travis-CI-for-Apache-For-Testing-Apache-and-PHP-Configurations\n- https://github.com/mitchellkrogza/Fail2Ban-Blacklist-JAIL-for-Repeat-Offenders-with-Perma-Extended-Banning\n- https://github.com/funilrys/PyFunceble\n- https://github.com/funilrys/dead-hosts\n- https://github.com/mitchellkrogza/The-Big-List-of-Hacked-Malware-Web-Sites\n- https://github.com/mitchellkrogza/Suspicious.Snooping.Sniffing.Hacking.IP.Addresses\n- https://github.com/mitchellkrogza/Fail2Ban.WebExploits\n\n************************************************\n### ALSO CHECKOUT THE NEW BIG LIST OF HACKED MALWARE & WORDPRESS WEB SITES\n\nThis repository contains a list of all web sites I come across that are hacked with malware. \nMost site owners are unaware their sites have been hacked and are being used to plant malware.\n\nCheck it out at: https://github.com/mitchellkrogza/The-Big-List-of-Hacked-Malware-Web-Sites\n\n************************************************\n### INTO PHOTOGRAPHY?\n\nCome drop by and visit me at [mitchellkrog.com](https://mitchellkrog.com) or [Facebook](https://www.facebook.com/MitchellKrogPhotography) or Follow Me on Twitter <a href='https://twitter.com/MitchellKrog'><img src='https://img.shields.io/twitter/follow/MitchellKrog.svg?style=social&label=Follow' alt='Follow @MitchellKrog'></a>\n\n************************************************\n### ACKNOWLEDGMENTS & CONTRIBUTORS:\n\nMany Thanks to those contributing to this project.\n\nMany parts of the generator scripts and code running behind this project have been adapted from snippets from hundreds of sources. \nIn fact it is so hard to mention everyone but here are a few key people whose little snippets of code have helped me introduce new features all the time. Show them some love and check out some of their projects too.\n\n- Stuart Cardall - https://github.com/itoffshore (Install, Update and Setup Scripts & Alpine Linux Package Maintainer)\n- Nissar Chababy - https://github.com/funilrys/funceble (Excellent script for checking ACTIVE, INACTIVE and EXPIRED Domain Names)\n- Marius Voila https://github.com/mariusv\n- Cătălin Mariș https://github.com/alrra\n- deformhead https://github.com/deformhead\n- bluedragonz https://github.com/bluedragonz\n- Alexander https://github.com/shoonois\n- Steven Black https://github.com/StevenBlack\n- Fail2Ban - https://github.com/fail2ban\n- Stevie-Ray Hartog https://github.com/Stevie-Ray\n- Sir Athos from StackOverFlow - http://stackoverflow.com/users/2245910/sir-athos (help with Travis Build Tagging and Committing)\n- StackOverflow - http://stackoverflow.com/ (bash scripts from hundreds of questions and answers)\n- SuperUser - http://superuser.com/ (snippets from various questions and answers)\n\nIf you believe your name should be here, drop me a line.\n\n************************************************\n### Writing Code like this takes lots of time !!\n\nThousand of hours of programming and testing have gone into this project, show some love\n\n[![Help me out with a mug of beer](https://img.shields.io/badge/Help%20-%20me%20out%20with%20a%20mug%20of%20%F0%9F%8D%BA-blue.svg)](https://paypal.me/mitchellkrog/) or [![Help me feed my cat](https://img.shields.io/badge/Help%20-%20me%20feed%20my%20hungry%20cat%20%F0%9F%98%B8-blue.svg)](https://paypal.me/mitchellkrog/)\n\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/zuko.png\"/>\n\n************************************************\n# MIT License\n\n## Copyright (c) 2017 Mitchell Krog - mitchellkrog@gmail.com\n## https://github.com/mitchellkrogza\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 50.208984375,
          "content": "<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/_logo_nginx_bad_bot_blocker.png\" alt=\"Nginx Ultimate Bad Bot Spam Referrer Blocker - Nginx Block Bad Bots, Vulnerability Scanners, Malware and Adware, Malicious Sites, Spam Referrers, Bad Referrers, Spam Blocker with DDOS, Wordpress Theme Detector Blocking and Fail2Ban Jail for Repeat Offenders\"/>\n\n<!--<table>\n  <tr><th colspan=2>SPONSORS</th></tr>\n  <tr><td><a href=\"https://www.tines.com/?utm_source=oss&utm_medium=sponsorship&utm_campaign=phishfindr\"><img alt=\"Tines Sponsorship\" width=\"140px\" src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/Tines-Sponsorship-Badge-Purple.png\" /></a></td><td><a href=\"https://limacharlie.io/?utm_source=nginx-bad-bot-blocker&utm_medium=banner\"><img alt=\"Limacharlie Sponsorship\" width=\"140px\" src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/limacharlie-logo-sponsorship-logo.png\" /></a></td></tr>\n</table>-->\n\n| REPO | BECOME A SPONSOR |\n| :--: | :--: |\n| [![DUB](https://img.shields.io/dub/l/vibe-d.svg)](https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/LICENSE.md) | Your logo and link to your domain will appear here if you become a sponsor. Simply email me on mitchellkrog@gmail.com if you would like to sponsor this project as South Africa is not supported yet under the Github sponsor program. |\n<a href='https://twitter.com/ArchIsTheBest'><img src='https://img.shields.io/twitter/follow/ubuntu101za.svg?style=social&label=Follow' alt='Follow @ArchIsTheBest'></a> | Help Support Me at https://ko-fi.com/mitchellkrog |\n\n# Nginx Bad Bot and User-Agent Blocker, Spam Referrer Blocker, Anti DDOS, Bad IP Blocker and Wordpress Theme Detector Blocker\n##### The Ultimate Nginx Bad Bot, User-Agent, Spam Referrer Blocker, Adware, Malware and Ransomware Blocker, Clickjacking Blocker, Click Re-Directing Blocker, SEO Companies and Bad IP Blocker with Anti DDOS System, Nginx Rate Limiting and Wordpress Theme Detector Blocking. Stop and Block all kinds of bad internet traffic even Fake Googlebots from ever reaching your web sites. [PLEASE SEE: Definition of Bad Bots](#define-bad-bots)\n\n_______________\n#### Version: V4.2025.01.4982\n#### Bad Referrers Blocked: [7104](https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/bad-referrers.list)\n#### Bad User-Agents (Bots) Blocked: [668](https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/bad-user-agents.list)\n#### Fake Googlebots Blocked: [217](https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/_generator_lists/fake-googlebots.list)\n____________________\n\n## Help Support This Project \n\n[<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/kofi4.png\" alt=\"Buy me Coffee\" width=\"300\"/>](https://ko-fi.com/mitchellkrog)\n\n************************************************\n- Created by: [Mitchell Krog](https://github.com/mitchellkrogza) for use on [Nginx Web Server](https://www.nginx.com/)\n- Copyright Mitchell Krog <mitchellkrog@gmail.com>\n\n_______________________\n##### Tested On:\n##### nginx version: nginx/1.10.x -> mainstream :heavy_check_mark:\n__________________________\n\nNot Using Nginx? See the [![Get the APACHE ULTIMATE BAD BOT BLOCKER](https://img.shields.io/badge/APACHE%20-%20ULTIMATE%20BAD%20BOT%20BLOCKER%20%E2%9B%94-blue.svg)](https://github.com/mitchellkrogza/apache-ultimate-bad-bot-blocker)\n\nPlease make sure you are subscribed to Github Notifications to be notified when the blocker is updated or when any important or mission critical (potentially breaking) changes may take place.\n\n************************************************\n# EASY AUTO CONFIGURATION INSTRUCTIONS FOR THE NGINX BAD BOT BLOCKER\n## Please follow the instructions below step by step :exclamation:\n\n- This is our new preferred method of installation which is now done through a set of shell scripts contributed to this repo and maintained by Stuart Cardall @itoffshore who is one of the Alpine Linux package maintainers. \n\n- The instructions below are for a quick and painfree installation process which downloads all required files for the blocker and the scripts include adding the required includes to your nginx.conf and nginx .vhost files. The setup script assumes your vhost config files are located in /etc/nginx/sites-available/ and each vhost config file ends with a file extension of .vhost\n\n- For manual installation instructions please see - Please see: https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/MANUAL-CONFIGURATION.md\n\n- setup-ngxblocker, install-ngxblocker and update-ngxblocker can all be configured with custom installation / update locations from the command line. **(See Step 11 of the instructions to show you how use these scripts and non-standard Nginx locations)**\n\n- Run any of the setup, install or update scripts with --help or -h to view options.\n\n> PLEASE NOTE: For those using Let's Encrypt SSL Certificates the preferred and 100% working method is to use the **Webroot Authenticator Method**. There appears to be some issues with people using the http challenge method but can confirm that webroot work flawlessly. We are uncertain at this point whether the http-01 challenge method is a certbot or nginx bug.\n\n# [WARN] DUPLICATE NETWORK MESSAGES FROM NGINX \n## PLEASE READ THIS\n\nThe Duplicate network reports from Nginx is NOT a bug nor can it be fixed, this is the desired behaviour of the blocker. Daily updates of IP blacklists cause some well known IP's and ranges to be blacklisted **```old value \"1\"```** these are then whitelisted at the very end of globalblocklist which is the order of loading which then sets IP's we know are good to their new **```value \"0\"```** thereby whitelisting them. It has been this way since day 1 of the blocker and will remain this way. These are simple **[WARN]** messages not **[EMERG]** messages and they do not affect the operation of Nginx in any way whatsoever.\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-1.png\"/>\n\n##### Linux\n\nDownload install-ngxblocker to your /usr/local/sbin/directory and make the script executable.\n\n```sh\nsudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/install-ngxblocker -O /usr/local/sbin/install-ngxblocker\nsudo chmod +x /usr/local/sbin/install-ngxblocker\n```\n\nIf your Linux distribution does not have wget you can replace the wget command above using curl as follows:\n\n```sh\ncurl -sL https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/install-ngxblocker -o /usr/local/sbin/install-ngxblocker\n```\n\n##### FreeBSD\n\nInstall the package.\n\n```sh\npkg install www/nginx-ultimate-bad-bot-blocker\n```\n\nAlternatively install via portmaster:\n\n```sh\nportmaster www/nginx-ultimate-bad-bot-blocker\n```\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-2.png\"/>\n\nNow run the install-ngxblocker script in DRY-MODE which will show you what changes it will make and what files it will download for you. This is only a DRY-RUN so no changes are being made yet. \n\nThe install-ngxblocker downloads all required files including the setup and update scripts.\n\n```sh\ncd /usr/local/sbin\nsudo ./install-ngxblocker\n```\n\nThis will show you output as follows of the changes that will be made \n**(NOTE: this is only a DRY-RUN no changes have been made)**\n\n```text\nChecking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt\n\n** Dry Run ** | not updating files | run  as 'install-ngxblocker -x' to install files.\n\nCreating directory: /etc/nginx/bots.d\n\nREPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master\n\nDownloading [FROM]=>  [REPO]/conf.d/globalblacklist.conf            [TO]=>  /etc/nginx/conf.d/globalblacklist.conf\nDownloading [FROM]=>  [REPO]/conf.d/botblocker-nginx-settings.conf  [TO]=>  /etc/nginx/conf.d/botblocker-nginx-settings.conf\n\nREPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master\n\nDownloading [FROM]=>  [REPO]/bots.d/blockbots.conf              [TO]=>  /etc/nginx/bots.d/blockbots.conf\nDownloading [FROM]=>  [REPO]/bots.d/ddos.conf                   [TO]=>  /etc/nginx/bots.d/ddos.conf\nDownloading [FROM]=>  [REPO]/bots.d/whitelist-ips.conf          [TO]=>  /etc/nginx/bots.d/whitelist-ips.conf\nDownloading [FROM]=>  [REPO]/bots.d/whitelist-domains.conf      [TO]=>  /etc/nginx/bots.d/whitelist-domains.conf\nDownloading [FROM]=>  [REPO]/bots.d/blacklist-user-agents.conf  [TO]=>  /etc/nginx/bots.d/blacklist-user-agents.conf\nDownloading [FROM]=>  [REPO]/bots.d/blacklist-ips.conf          [TO]=>  /etc/nginx/bots.d/blacklist-ips.conf\nDownloading [FROM]=>  [REPO]/bots.d/bad-referrer-words.conf     [TO]=>  /etc/nginx/bots.d/bad-referrer-words.conf\nDownloading [FROM]=>  [REPO]/bots.d/custom-bad-referrers.conf   [TO]=>  /etc/nginx/bots.d/custom-bad-referrers.conf\n\nREPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master\n\nDownloading [FROM]=>  [REPO]/setup-ngxblocker      [TO]=>  /usr/local/sbin/setup-ngxblocker\nDownloading [FROM]=>  [REPO]/update-ngxblocker     [TO]=>  /usr/local/sbin/update-ngxblocker\n```\n\n**setup-ngxblocker, install-ngxblocker and update-ngxblocker can all be configured with custom installation / update locations from the command line.** \n\n**Run any of the setup, install or update scripts with --help or -h to view options.**\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-3.png\"/>\n\nNow run the install script with the -x parameter to download all the necessary files from the repository:\n\n```sh\ncd /usr/local/sbin/\nsudo ./install-ngxblocker -x\n```\n\nThis will give you the following output:\n\n```text\nChecking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt\n\nCreating directory: /etc/nginx/bots.d\n\nREPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master\n\nDownloading [FROM]=>  [REPO]/conf.d/globalblacklist.conf            [TO]=>  /etc/nginx/conf.d/globalblacklist.conf...OK\nDownloading [FROM]=>  [REPO]/conf.d/botblocker-nginx-settings.conf  [TO]=>  /etc/nginx/conf.d/botblocker-nginx-settings.conf...OK\n\nREPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master\n\nDownloading [FROM]=>  [REPO]/bots.d/blockbots.conf              [TO]=>  /etc/nginx/bots.d/blockbots.conf...OK\nDownloading [FROM]=>  [REPO]/bots.d/ddos.conf                   [TO]=>  /etc/nginx/bots.d/ddos.conf...OK\nDownloading [FROM]=>  [REPO]/bots.d/whitelist-ips.conf          [TO]=>  /etc/nginx/bots.d/whitelist-ips.conf...OK\nDownloading [FROM]=>  [REPO]/bots.d/whitelist-domains.conf      [TO]=>  /etc/nginx/bots.d/whitelist-domains.conf...OK\nDownloading [FROM]=>  [REPO]/bots.d/blacklist-user-agents.conf  [TO]=>  /etc/nginx/bots.d/blacklist-user-agents.conf...OK\nDownloading [FROM]=>  [REPO]/bots.d/blacklist-ips.conf          [TO]=>  /etc/nginx/bots.d/blacklist-ips.conf...OK\nDownloading [FROM]=>  [REPO]/bots.d/bad-referrer-words.conf     [TO]=>  /etc/nginx/bots.d/bad-referrer-words.conf...OK\nDownloading [FROM]=>  [REPO]/bots.d/custom-bad-referrers.conf   [TO]=>  /etc/nginx/bots.d/custom-bad-referrers.conf...OK\n\nREPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master\n\nDownloading [FROM]=>  [REPO]/setup-ngxblocker      [TO]=>  /usr/local/sbin/setup-ngxblocker...OK\nDownloading [FROM]=>  [REPO]/update-ngxblocker     [TO]=>  /usr/local/sbin/update-ngxblocker...OK\n```\n\nAll the required files have now been downloaded to the correct folders on Nginx for you direct from the repository.\n\n**MAKE SURE you set your setup and update scripts to be executable by running the following two commands. This is important before continuing with Step 4 and onwards.**\n\n```sh\nsudo chmod +x /usr/local/sbin/setup-ngxblocker\nsudo chmod +x /usr/local/sbin/update-ngxblocker\n```\n\n**setup-ngxblocker, install-ngxblocker and update-ngxblocker can all be configured with custom installation / update locations from the command line.** \n\n**Run any of the setup, install or update scripts with --help or -h to view options.**\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-4.png\"/>\n\nNow run the setup-ngxblocker script in DRY-MODE which will show you what changes it will make and what files it will download for you. This is only a DRY-RUN so no changes are being made yet.\n\n```sh\ncd /usr/local/sbin/\nsudo ./setup-ngxblocker\n```\n\nThis will give you output as follows (this output below assumes your nginx.conf file already has the default include of /etc/nginx/conf.d/*)\nAll Nginx installations I know of have this default include in the nginx.conf file distributed with all versions.\n\n```text\nChecking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt\n\n** Dry Run ** | not updating files | run  as 'setup-ngxblocker -x' to setup files.\n\nINFO:      /etc/nginx/conf.d/* detected               => /etc/nginx/nginx.conf\ninserting: include /etc/nginx/bots.d/blockbots.conf;  => /etc/nginx/sites-available/mydomain2.com.vhost\ninserting: include /etc/nginx/bots.d/ddos.conf;       => /etc/nginx/sites-available/mydomain2.com.vhost\ninserting: include /etc/nginx/bots.d/blockbots.conf;  => /etc/nginx/sites-available/mydomain1.com.vhost\ninserting: include /etc/nginx/bots.d/ddos.conf;       => /etc/nginx/sites-available/mydomain1.com.vhost\n\nWhitelisting ip:  x.x.x.x  => /etc/nginx/bots.d/whitelist-ips.conf\n```\n\nThis script also whitelists your IP in the whitelist-ips.conf file for you. \nFurther IP's or IP ranges can be added to your customizable whitelits-ips.conf file located in /etc/nginx/bots.d/whitelist-ips.conf.\n\n**setup-ngxblocker, install-ngxblocker and update-ngxblocker can all be configured with custom installation / update locations from the command line.** \n\n**Run any of the setup, install or update scripts with --help or -h to view options.**\n\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-5.png\"/>\n\nNow run the setup script with the -x parameter to make all the necessary changes to your nginx.conf (if required) and also to add the required includes into all your vhost files. \n\nThis setup-ngxblocker script assumes that all your vhost files located in /etc/nginx/sites-available end in an extension .vhost. It is good practice to make all your vhost config files end with a .vhost extension but if you prefer to stick what you already have eg .conf you can simply modify run setup-ngxblocker using the `-e` parameter to specify the extension you use for your vhost files.\n\nFor instance if your vhost files end in .conf you will change this execute setup-ngxblocker with an additional command line parameter as follows:\n\n`sudo ./setup-ngxblocker -x -e conf`\n\nSo now let's run the setup script and let it make all the changes we need to make the Bot Blocker active on all your sites.\n\n```sh\ncd /usr/local/sbin/\nsudo ./setup-ngxblocker -x\n```\n\nYou will see output as follows:\n\n```text\nChecking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt\n\nINFO:      /etc/nginx/conf.d/* detected               => /etc/nginx/nginx.conf\ninserting: include /etc/nginx/bots.d/blockbots.conf;  => /etc/nginx/sites-available/mydomain2.com.vhost\ninserting: include /etc/nginx/bots.d/ddos.conf;       => /etc/nginx/sites-available/mydomain2.com.vhost\ninserting: include /etc/nginx/bots.d/blockbots.conf;  => /etc/nginx/sites-available/mydomain1.com.vhost\ninserting: include /etc/nginx/bots.d/ddos.conf;       => /etc/nginx/sites-available/mydomain1.com.vhost\n\nWhitelisting ip:  x.x.x.x  => /etc/nginx/bots.d/whitelist-ips.conf\n```\n\nYou will note it has done the includes in all the .vhost files on my test bed server and also whitelisted your own IP address in the whitelist-ips.conf file for you. Further IP's or IP ranges can be added to your customizable whitelits-ips.conf file located in /etc/nginx/bots.d/whitelist-ips.conf.\n\nWhat this setup script has done has simply added the following include statements into your .vhost files for you, it also adds /etc/nginx/conf.d/* to the includes in nginx.conf (if not already in nginx.conf), otherwise, the whole script will fail.\n\n```nginx\n# Bad Bot Blocker\ninclude /etc/nginx/bots.d/ddos.conf;\ninclude /etc/nginx/bots.d/blockbots.conf;\n```\n\n**setup-ngxblocker, install-ngxblocker and update-ngxblocker can all be configured with custom installation / update locations from the command line.** \n\n**Run any of the setup, install or update scripts with --help or -h to view options.**\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-6.png\"/>\n\nNow test your nginx configuration\n\n`sudo nginx -t`\n\nand you should see\n\n```text\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n```\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-7.png\"/>\n\nNow simply reload / restart Nginx and the Bot Blocker will immediately be active and protecting all your web sites.\n\n`sudo nginx -t && sudo nginx -s reload`\n\nor\n\n`sudo service nginx restart`\n\nThat's it, the blocker is now active and protecting your sites from thousands of malicious bots and domains.\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-8.png\"/>\n\nNow setup cron to automatically update the blocker for you every day so you always have the latest up to date protection.\n\n`sudo crontab -e`\n\nAdd the following line at the end of your crontab file. Note adding the `-e` command line parameter to specify your email address where the update report is sent to. Obviously substitute `yourname@youremail.com` with your real email address or you will not receive the email when the script has updated.\n\n`00 22 * * * sudo /usr/local/sbin/update-ngxblocker -e yourname@youremail.com` \n\nThis will update the blocker every night for you at 10 PM.\n\nIf you want it to update more frequently (as sometimes I push out 3-4 updates a day) you can set it as follows to run the cron every 8 hours, although just once a day is more than enough.\n\n`00 */8 * * * sudo /usr/local/sbin/update-ngxblocker -e yourname@youremail.com`       \n\nIf you don't want any email notification after an update (not advisable in case Nginx ever has an EMERG when reloading), then simply run your cron as follows. \n\n`00 */8 * * * sudo /usr/local/sbin/update-ngxblocker -n`       \n\nIf you would rather send e-mail via <a href=\"https://www.mailgun.com/\">mailgun</a> then run your cron as so:\n\n`00 22 * * * sudo /usr/local/sbin/update-ngxblocker -g yourname@yourdomain.com -d yourdomain.com -a mailgun api key -f from@yourdomain.com`\n\nThat's it, the blocker will automatically keep itself up to date and also reload Nginx once it has downloaded the latest version of the globalblacklist.conf file.\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-9.png\"/>\n\nYou can now customize any of the following files below to suit your environment or requirements. These include files never get modified during an update using the auto update script above so whatever customizations you do here will never be overwritten during an update.\n\n```text\n/etc/nginx/bots.d/whitelist-ips.conf\n/etc/nginx/bots.d/whitelist-domains.conf\n/etc/nginx/bots.d/blockbots.conf\n/etc/nginx/bots.d/blacklist-domains.conf\n/etc/nginx/bots.d/blacklist-user-agents.conf\n/etc/nginx/bots.d/blacklist-ips.conf\n/etc/nginx/bots.d/bad-referrer-words.conf\n/etc/nginx/bots.d/custom-bad-referrers.conf\n/etc/nginx/bots.d/ddos.conf\n```\n\nLet's say for some \"obscure\" reason you actually want to block GoogleBot from accessing your site. You would simply add it to the /etc/nginx/bots.d/blacklist-user-agents.conf file and it will over-ride the default whitelist for GoogleBot. the same applies to any other bots that are whitelisted by default.\n\nAll include files are commented for your convenience.\n\n************************************************\n## If This This Project helped you out, help support it \n\n[<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/kofi4.png\" alt=\"Buy me Coffee\" width=\"300\"/>](https://ko-fi.com/mitchellkrog)\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-10.png\"/>\n\n(TEST THAT IT IS WORKING)\n\n**TESTING**\n\nRun the following commands one by one from a terminal on another linux machine against your own domain name. \n\n:exclamation: \n**substitute http:// yourdomain.com :exclamation: in the examples below with your own REAL domain name :exclamation:**\n\n`curl -A \"Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.96 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\" -I http://yourdomain.com`\n\n`curl -A \"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\" -I http://yourdomain.com`\n\n**Should respond with 200 OK**\n\n`curl -A \"Xenu Link Sleuth/1.3.8\" -I http://yourdomain.com`\n\n`curl -A \"Mozilla/5.0 (compatible; AhrefsBot/5.2; +http://ahrefs.com/robot/)\" -I http://yourdomain.com`\n\n**Should respond with either of the following error messages:**\n- curl: (52) Empty reply from server\n- curl: (56) TCP connection reset by peer\n- curl: (92) HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)\n\n`curl -I http://yourdomain.com -e http://100dollars-seo.com`\n\n`curl -I http://yourdomain.com -e http://zx6.ru`\n\n**Should respond with either of the following error messages:**\n- curl: (52) Empty reply from server\n- curl: (56) TCP connection reset by peer\n- curl: (92) HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)\n\nThe Nginx Ultimate Bot Blocker is now WORKING and PROTECTING your web sites !!!\n\n:exclamation: \n**substitute http:// yourdomain.com :exclamation: in the examples below with your own REAL domain name :exclamation:**\n\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/nginx-ultimate-bad-bot-blocker-testing-instructions.jpg\"/>\n\n### NOTE to Cloudflare Users !!!\n\nIf you are a Cloudflare user who is using the Cloudflare CDN / Caching System you should always disable the Cloudflare CDN (set gray Cloud)\n\nWhile testing you will get the correct response codes  results as below:\n- curl: (52) Empty reply from server\n- curl: (56) TCP connection reset by peer\n- curl: (92) HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)\n\nThis is by design. The CDN is doing its work, meaning, the first response from your server said to the bot, \"go away\" by issuing it `444` or `443` responses.\n\nCloudflare cache's that response and hence the second time you test you will get served a `520 Origin Error` origin error message.\n\nWhile testing the blocker, disable the CDN / cacheing system and once you are happy with your tests, re-enable the CDN/Cache on your live environment as you do want the bots to get that response from Cloudflare. \n\nMost other CDN systems will probably show the same behavior so always disable a CDN during testing to rule out anything that will interfere with your testing. Always make sure to re-enable the CDN when done testing !!\n\nOnce you Enable Cloudflare CDN, test again.\n\nWhile testing, you get\n- curl: 520 Origin Error \n\nThis means the CDN is working.\n\n************************************************\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/step-11.png\"/>\n\n#### OPTIONAL\n**INSTALLING THE BLOCKER TO NON-STANDARD NGINX FOLDER LOCATIONS**\n\nSome people build Nginx themselves and do not end up having the standard nginx folder locations at `/etc/nginx`\n\nFor users like this you can run the install-ngxblocker, setup-ngxblocker and update-ngxblocker specifying your\nfolder location in the command lines as follows.\n\n`sudo ./install-ngxblocker -x -c /usr/local/nginx/conf.d -b /usr/local/nginx/bots.d`\n\n`sudo ./setup-ngxblocker -x -c /usr/local/nginx/conf.d -b /usr/local/nginx/bots.d`\n\n`sudo ./update-ngxblocker -c /usr/local/nginx/conf.d -b /usr/local/nginx/bots.d -e yourname@youremail.com`\n\nThis will automatically put the files into the locations you specify, it will do the includes into your vhosts using your custom locations  and when update-ngxblocker pulls a new update it will also now automatically re-write the \"Include\" sections inside the globalblacklist.conf file your own custom locations. Thanks again to Stuart Cardall @itoffshore for his contributions of these excellent scripts.\n\n************************************************\n\n# [WARN] DUPLICATE NETWORK MESSAGES FROM NGINX \n## PLEASE READ THIS\n\nThe Duplicate network reports from Nginx is NOT a bug nor can it be fixed, this is the desired behaviour of the blocker. Daily updates of IP blacklists cause some well known IP's and ranges to be blacklisted **```old value \"1\"```** these are then whitelisted at the very end of globalblocklist which is the order of loading which then sets IP's we know are good to their new **```value \"0\"```** thereby whitelisting them. It has been this way since day 1 of the blocker and will remain this way. These are simple **[WARN]** messages not **[EMERG]** messages and they do not affect the operation of Nginx in any way whatsoever.\n\n************************************************\n\n# WHY BLOCK BAD BOTS ?\n\n<h4 id=\"define-bad-bots\">\nDefinition of Bad Bots\n</h4>\n\n##### Bad bots are:\n\n-    Bad Referrers \n-    Bad User-Agent Strings\n-    Spam Referrers\n-    Spam Bots and malicious Bots\n-    Nuisance or Unwanted Bots\n-    Sites Linked to Lucrative Malware, Adware and Ransomware Clickjacking Campaigns\n-    Vulnerability scanners\n-    Gambling and Porn Web Sites\n-    E-mail harvesters\n-    Content scrapers\n-    Link Ranking Bots\n-    Aggressive bots that scrape content\n-    Image Hotlinking Sites and Image Thieves\n-    Bots or Servers linked to viruses or malware\n-    Government surveillance bots\n-    Botnet Attack Networks (Mirai)\n-    Known Wordpress Theme Detectors (Updated Regularly)\n-    SEO companies that your competitors use to try improve their SEO\n-    Link Research and Backlink Testing Tools\n-    Stopping Google Analytics Ghost Spam\n-    Browser Adware and Malware (Yontoo etc)\n\n(Over 4000 bad referers, spam referrers, user-agents, bad bots, bad IP's, porn, gambling and clickjacking sites, lucrative seo companies, wordpress theme detectors and counting)\n\n- Includes the creation of a google-exclude.txt file for creating filters / segments in Google Analytics (see instructions lower down)\n- Includes the creation of a google-disavow.txt file for use in Google Webmaster Tools (see instructions lower down)\n- See sample Nginx SSL Vhost config at: https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/NGINX-SSL-Site-Config-Example.md\n************************************************\n## Help Support This Project \n\nThousand of hours of programming and testing have gone into this project, show some love\n\n[<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/kofi4.png\" alt=\"Buy me Coffee\" width=\"300\"/>](https://ko-fi.com/mitchellkrog)\n\n************************************************\n## Welcome to the Ultimate Nginx Bad Bot, User-Agent, Spam Referrer Blocker, Adware, Malware and Ransomware Blocker, Click-Jacking Blocker, Click-Redirect Blocker and Bad IP Blocker with Anti DDOS System, Nginx Rate Limiting and Wordpress Theme Detector Blocking.\n\nBots attempt to make themselves look like other software or web sites by disguising their user agent.  Their user agent names may look harmless, perfectly legitimate even. \n\nFor example, \"^Java\" but according to Project Honeypot, it's actually one of the most dangerous BUT a lot of legitimate bots out there have \"Java\" in their user agent string so the approach taken by many to block \"Java\" is not only ignorant but also blocking out very legitimate crawlers including some of Google's and Bing's and makes it very clear to me that those people writing bot blocking scripts seldom ever test them. \n\nSpam Referrers and Spam Domain Names use very clever techniques to hop off your sites running very lucrative click-jacking and click-redirecting campaigns which serve ads to unsuspecting people browsing the web or even planting malware, adware or ransomware into their browsers which then become part of their lucrative network of bots. \n\nThis Bot Blocker includes hundreds of domain names and IP addresses that most people will not even see in their Nginx logs. This comes as a result of all my sites running of SSL and using Content-Security-Policy (CSP) which blocks things before they even get to Nginx and I have picked up and continue to pick up some of the worst domains and bots out there. \n\nA massive amount of Porn, Gambling and Fake News web sites are also blocked in this blocker script which also grows at a rapid pace.\n\nUnfortunately most bot blocker scripts out there are simply copy and pasted from other people's scripts and made  to look like their own work. This one  was inspired by the one created by https://github.com/mariusv and I  contributed to that project but went off into a totally new layout, cleaned it up big time and started from scratch. It is now a completely independent project. It's clean, it works and has been thoroughly tested.\n\n************************************************\n### THE BASICS\n\nThis nginx bad bot bot blocker list is designed to be a global Nginx include file and uses the Nginx map $http_user_agent, map $http_referer and geo $validate_client directives.\n\nThis way the .conf file is loaded once into memory by Nginx and is available to all web sites that you operate. You simply need to use an Include statement in an Nginx vhost conf file.\n\n************************************************\n### IT'S CENTRALISED:\n\nThe beauty of this is that it is one central file used by all your web sites. This means there is only place to make amendments ie. adding new bots that you discover in your log files. Any changes are applied immediately to all sites after a simple \"sudo service nginx reload\". But of course always do a sudo nginx -t to test any config changes before you reload.\n\n************************************************\n### IT IS TINY AND LIGHTWEIGHT\n\nThe file is tiny in size. At the time of this writing and the first public commit of this the file size including all the commenting \"which nginx ignores\" currently at **a mere 185 kb in size** and already containing over 5000 bad domains, bad bots and bad IP addresses. It is so lightweight that Nginx does not even know it's there. It already contains thousands of entries - total updated at the top of this README. \n\n************************************************\n### IT IS ACCURATE AND IS FALSE POSITIVE PROOF\n\nUnlike many other bad bot blockers out there for Nginx and Apache where people simply copy and paste lists from others, this list has been built from the ground up and tested thoroughly and I mean thoroughly for now over 10 months. It comes from actual server logs that are monitored daily and there are at least 3-10 new additions to this file almost daily.\n\nIt has also been throughly tested for false positives using months of constant and regular testing and monitoring of log files. \n\nAll web sites listed in the bad referers are checked one by one before they are even added. Simply copying  anything that look suspicious in your log file and adding it to a blocker like this without actually seeing  what it is first .... well it's foolish to say the least.\n\n************************************************\n### DROP THEM AND THAT'S IT\n\nNginx has a lovely error called 444 which just literally drops the connection. All these rules issue a 444 response so if a rule matches, the requesting IP simply get's no response and it would appear that your  server does not exist to them or appears to be offline. \n\nA test with curl using one of the test command line's documented in the /conf.d/globalblacklist.conf file will give a simple \"curl: (52) Empty reply from server\" and that's the reply the bad referrers and bots get.\n\n************************************************\n### RATE LIMITING FUNCTIONALITY BUILT IN\n\nFor bot's or spiders that you still want to allow but want to limit their visitation rate, you can use the  built in rate limiting functions I have included. The file is extensively commented throughout so you should figure it out otherwise simply message me if you are having problems. \n\n************************************************\n### PULL REQUESTS / CORRECTIONS / FALSE POSITIVES:\n\n[![Log an Issue](https://img.shields.io/badge/LOG%20-%20an%20issue%20%F0%9F%9A%A6-blue.svg)](https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/issues) or to contribute your own bad referers, bots or to make corrections to any incorrectly blocked bots or domains please fork a copy of this repository and send pull requests on the <a href=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/tree/master/_generator_lists\">individual files located here</a> and then send a pull request (PR).\n\n##### All Additions, Removals and Corrections will all be checked for accuracy before being merged into main blocker.\n\n************************************************\n### ISSUES:\n\n[![Log an Issue](https://img.shields.io/badge/LOG%20-%20an%20issue%20%F0%9F%9A%A6-blue.svg)](https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/issues) regarding incorrect listings or any other problems on the issues system and they will be investigated and removed if necessary. I responde very quickly to user problems and have helped countless users for days on end to get their bot blocker working. You could say I am mad (disputable) but I love helping people and do not ignore issues or people with problems getting this to work.\n\n************************************************\n## FEATURES OF THE NGINX BAD BOT BLOCKER:\n\n- Extensive Lists of Bad and Known Bad Bots and Scrapers (updated almost daily)\n- Blocking of Spam Referrer Domains and Web Sites\n- Blocking of SEO data collection companies like Semalt.com, Builtwith.com, WooRank.com and many others (updated regularly)\n- Blocking of clickjacking Sites linked to Adware, Malware and Ransomware\n- Blocking of Porn and Gambling Web Sites who use Lucrative Ways to Earn Money through Serving Ads by hopping off your domain names and web sites.\n- Blocking of Bad Domains and IP's that you cannot even see in your Nginx Logs. Thanks to the Content Security Policy (CSP) on all my SSL sites I can see things trying to pull resources off my sites before they even get to Nginx and get blocked by the CSP.\n- Anti DDOS Filter and Rate Limiting of Agressive Bots\n- Alphabetically ordered for easier maintenance (Pull Requests Welcomed)\n- Commented sections of certain important bots to be sure of before blocking\n- Includes the IP range of Cyveillance who are known to ignore robots.txt rules\n  and snoop around all over the Internet.\n- Whitelisting of Google, Bing and Cloudflare IP Ranges\n- Whitelisting of your own IP Ranges that you want to avoid blocking by mistake.\n- Ability to add other IP ranges and IP blocks that you want to block out.\n- If its out there and it's bad it's already in here and BLOCKED !!\n\n************************************************\n### UNDERSTANDS PUNYCODE / IDN DOMAIN NAMES\n\nA lot of lists out there put funny domains into their hosts file. Your hosts file and DNS will not understand this. This list uses converted domains which are in the correct DNS format to be understood by any operating system. **Avoid using lists** that do not put the correctly formatted domain structure into their lists.\n\nFor instance\nThe domain:\n\n`lifehacĸer.com` (note the K)\n\nactually translates to:\n\n`xn--lifehacer-1rb.com`\n\nYou can do an nslookup on any operating system and it will resolve correctly.\n\n`nslookup xn--lifehacer-1rb.com`\n\n```xn--lifehacer-1rb.com\n\torigin = dns1.yandex.net\n\tmail addr = iskalko.yandex.ru\n\tserial = 2016120703\n\trefresh = 14400\n\tretry = 900\n\texpire = 1209600\n\tminimum = 14400\nxn--lifehacer-1rb.com\tmail exchanger = 10 mx.yandex.net.\nName:\txn--lifehacer-1rb.com\nAddress: 78.110.60.230\nxn--lifehacer-1rb.com\tnameserver = dns2.yandex.net.\nxn--lifehacer-1rb.com\ttext = \"v=spf1 redirect=_spf.yandex.net\"\nxn--lifehacer-1rb.com\tnameserver = dns1.yandex.net.\n```\n\n- Look at: https://www.charset.org/punycode for more info on this.\n\n************************************************\n## ALWAYS MONITOR WHAT YOU ARE DOING:\n\n**MAKE SURE to monitor your web site logs** after implementing this. I suggest you first load this into one site and monitor it for any possible false positives before putting this into production on all your web sites.\n\nDo not sit like an ostrich with your head in the sand, being a responsible server operator and web site owner means you must monitor your logs frequently. A reason many of you ended up here in the first place because you saw nasty looking stuff in your Nginx log files.\n \nAlso monitor your logs daily for new bad referers and user-agent strings that you want to block. Your best source of adding to this list is your own server logs, not mine.\n \nFeel free to contribute bad referers from your own logs to this project by sending a Pull Request (PR). You can however rely on this list to keep out 99% of the baddies out there.\n \n************************************************\n## HOW TO MONITOR YOUR LOGS DAILY (The Easy Way):\n\n**With great thanks and appreciation to**\n\nhttps://blog.nexcess.net/2011/01/21/one-liners-for-apache-log-files/\n\nTo monitor your top referer's for a web site's log file's on a daily basis use the following simple cron jobs which will email you a list of top referer's / user agents every morning from a particular web site's log files. This is an example for just one cron job for one site. Set up multiple one's for each one you want to monitor. Here is a cron that runs at 8am every morning and emails me the stripped down log of referers. When I say stripped down, the domain of the site and other referers like Google and Bing are stripped from the results. Of course you must change the log file name, domain name and your email address in the examples below. The second cron for collecting User agents does not do any stripping out of any referers but you can add that functionality if you like copying the awk statement !~ from the first example.\n\n##### Cron for Monitoring Daily Referers on Nginx\n\n`00 08 * * * tail -10000 /var/log/nginx/mydomain-access.log | awk '$11 !~ /google|bing|yahoo|yandex|mywebsite.com/' | awk '{print $11}' | tr -d '\"' | sort | uniq -c | sort -rn | head -1000 | mail -s \"Top 1000 Referers for Mydomain.com\" me@mydomain.com`\n\nThis emails you a daily list of referrers using an awk command to exclude domains like google, bing and your own domain name.\n\n##### Cron for Monitoring Daily User Agents on Nginx\n\n`00 08 * * * tail -50000 /var/log/nginx/mydomain-access.log | awk '{print $12}' | tr -d '\"' | sort | uniq -c | sort -rn | head -1000 | mail -s \"Top 1000 Agents for Mydomain.com\" me@mydomain.com`\n\nThis emails you a list of top User-Agents who visited your site in the last 24 hours, helpful for spotting any rogue or suspicious looking User-Agents strings.\n\n************************************************\n## BLOCK AGGRESSIVE BOTS AT FIREWALL LEVEL USING FAIL2BAN:\n\nI have added a custom Fail2Ban filter and action that I have written which monitors your Nginx logs for bots that generate a large number of 444 errors. This custom jail for Fail2Ban will scan logs over a 1 week period and ban the offender for 24 hours.\nIt helps a great deal in keeping out some repeat offenders and preventing them from filling up your log files with 444 errors.\nSee the Fail2Ban folder for instructions on configuring this great add on for the Nginx Bad Bot Blocker.\n\n************************************************\n## STOPPING GOOGLE ANALYTICS \"GHOST\" SPAM:\n\nSimply using the Nginx blocker does not stop Google Analytics ghost referral spam because they are hitting Analytics directly and not always necessarily touching your website. \n\nYou should use regex filters in Analytics to prevent ghost referral spam.\n\nFor this there are several google-exclude-0*.txt files which have been created for you and they are updated at the same time when the Nginx Blocker is updated. As the list grows there will be more exclude files created.\n\n************************************************\n## TO STOP \"GHOST\" SPAM ON GOOGLE ANALYTICS FOLLOW THE SIMPLE VISUAL GUIDE BELOW\n\nFollow the step by step visual instructions below to add these google-exclude files as segments to your web site.\n\n<table style=\"width:100%;margin:0;\">\n  <tr>\n    <td align=\"left\"><img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/google-analytics-ghost-spam-01.jpg\" alt=\"Google Analytics - Adding Segments to Stop Ghost Spam\"/></td>\n  </tr>\n  <tr>\n    <td align=\"left\"><img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/google-analytics-ghost-spam-02.jpg\" alt=\"Google Analytics - Adding Segments to Stop Ghost Spam\"/></td>\n  </tr>\n  <tr>\n    <td align=\"left\"><img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/google-analytics-ghost-spam-03.jpg\" alt=\"Google Analytics - Adding Segments to Stop Ghost Spam\"/></td>\n  </tr>\n  <tr>\n    <td align=\"left\"><img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/google-analytics-ghost-spam-04.jpg\" alt=\"Google Analytics - Adding Segments to Stop Ghost Spam\"/></td>\n  </tr>\n  <tr>\n    <td align=\"left\"><img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/google-analytics-ghost-spam-05.jpg\" alt=\"Google Analytics - Adding Segments to Stop Ghost Spam\"/></td>\n  </tr>\n  <tr>\n    <td align=\"left\"><img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/google-analytics-ghost-spam-06.jpg\" alt=\"Google Analytics - Adding Segments to Stop Ghost Spam\"/></td>\n  </tr>\n  <tr>\n    <td align=\"left\"><img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/google-analytics-ghost-spam-07.jpg\" alt=\"Google Analytics - Adding Segments to Stop Ghost Spam\"/></td>\n  </tr>\n</table>\n\n************************************************\n## BLOCKING SPAM DOMAINS USING GOOGLE SEARCH CONSOLE / WEBMASTER TOOLS \n(How to use the google-disavow.txt file)\n\nI have added the creation of a Google Disavow text file called google-disavow.txt. This file can be used in Google's Webmaster Tools to block all these domains out as spammy or bad links. Use with caution.\n\n************************************************\n## ROBOTS.txt VERSION for those who cannot use this full blocker?\n\nLots of people are at the peril of their hosting company and do not have root access to the server running behind their web site. If this is your situation check out the automatically generated robots.txt file which will help you to some degree to keep a lot of Bad Bots and User-Agents out of your sites.\n\n************************************************\n## .htaccess VERSIONS for those who cannot use this full blocker?\n\nLots of people are at the peril of their hosting company and do not have root access to the server running behind their web site. \n\nIf this is your situation check out the automatically generated .htaccess versions of the Spam Referrer Blocker which can be found in <a href=\"https://github.com/mitchellkrogza/apache-ultimate-bad-bot-blocker/tree/master/.htaccess\">this repository</a> this .htaccess method (FOR APACHE SITES ONLY) will help you to keep all the Spam Referrers in this blocker out of your site. \n\nThis is merely mentioned here as a lot of people using CPanel systems think they are sitting behind an Nginx server but in reality are actually running on an Apache Server sitting behind an Nginx Proxy Server. .htaccess does not work on Nginx sites.\n\nNot Using Nginx Web Server? See the [![Get the APACHE ULTIMATE BAD BOT BLOCKER](https://img.shields.io/badge/APACHE%20-%20ULTIMATE%20BAD%20BOT%20BLOCKER%20%E2%9B%94-blue.svg)](https://github.com/mitchellkrogza/apache-ultimate-bad-bot-blocker)\n\n************************************************\n# IT FORKING WORKS !!!\n************************************************\n## Just Enjoy now what the Nginx Bad Bot Blocker Can Do For You and Your Web Sites.\n### And Help Support This Project \n\nThousand of hours of programming and testing have gone into this project, show some love\n\n[<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/kofi4.png\" alt=\"Buy me Coffee\" width=\"300\"/>](https://ko-fi.com/mitchellkrog)\n\n************************************************\n# HAS YOUR WEB SITE BEEN HACKED?\n\n[![Contact me for help](https://img.shields.io/badge/Contact%20-%20me%20for%20help%20%F0%9F%9A%91-blue.svg)](mailto:mitchellkrog@gmail.com) to help you clean up and secure your web site. \n\n************************************************\n### SOME OTHER AWESOME FREE PROJECTS\n\n- https://github.com/mitchellkrogza/apache-ultimate-bad-bot-blocker\n- https://github.com/mitchellkrogza/Badd-Boyz-Hosts\n- https://github.com/mitchellkrogza/Ultimate.Hosts.Blacklist\n- https://github.com/mitchellkrogza/Stop.Google.Analytics.Ghost.Spam.HOWTO\n- https://github.com/mitchellkrogza/The-Big-List-of-Hacked-Malware-Web-Sites\n- https://github.com/mitchellkrogza/fail2ban-useful-scripts\n- https://github.com/mitchellkrogza/linux-server-administration-scripts\n- https://github.com/mitchellkrogza/Travis-CI-Nginx-for-Testing-Nginx-Configuration\n- https://github.com/mitchellkrogza/Travis-CI-for-Apache-For-Testing-Apache-and-PHP-Configurations\n- https://github.com/mitchellkrogza/Fail2Ban-Blacklist-JAIL-for-Repeat-Offenders-with-Perma-Extended-Banning\n- https://github.com/funilrys/PyFunceble\n- https://github.com/funilrys/dead-hosts\n- https://github.com/mitchellkrogza/The-Big-List-of-Hacked-Malware-Web-Sites\n- https://github.com/mitchellkrogza/Suspicious.Snooping.Sniffing.Hacking.IP.Addresses\n- https://github.com/mitchellkrogza/Fail2Ban.WebExploits\n\n************************************************\n### ALSO CHECKOUT THE NEW BIG LIST OF HACKED MALWARE & WORDPRESS WEB SITES\n\nThis repository contains a list of all web sites I come across that are hacked with malware. \nMost site owners are unaware their sites have been hacked and are being used to plant malware.\n\nCheck it out at: https://github.com/mitchellkrogza/The-Big-List-of-Hacked-Malware-Web-Sites\n\n************************************************\n### INTO PHOTOGRAPHY?\n\nCome drop by and visit me at [mitchellkrog.com](https://mitchellkrog.com) or [Facebook](https://www.facebook.com/MitchellKrogPhotography) or Follow Me on Twitter <a href='https://twitter.com/MitchellKrog'><img src='https://img.shields.io/twitter/follow/MitchellKrog.svg?style=social&label=Follow' alt='Follow @MitchellKrog'></a>\n\n************************************************\n### ACKNOWLEDGMENTS & CONTRIBUTORS:\n\nMany Thanks to those contributing to this project.\n\nMany parts of the generator scripts and code running behind this project have been adapted from snippets from hundreds of sources. \nIn fact it is so hard to mention everyone but here are a few key people whose little snippets of code have helped me introduce new features all the time. Show them some love and check out some of their projects too.\n\n- Konstantin Goretzki @konstantingoretzki https://github.com/konstantingoretzki (Improved Regex on Fail2Ban Filter)\n- Stuart Cardall - https://github.com/itoffshore (Install, Update and Setup Scripts & Alpine Linux Package Maintainer)\n- Mike van Eckendonk  - https://github.com/Eckybrazzz\n- Nissar Chababy @funilrys - https://github.com/funilrys/PyFunceble (Excellent script for checking ACTIVE, INACTIVE and EXPIRED Domain Names)\n- Marius Voila https://github.com/mariusv\n- Cătălin Mariș https://github.com/alrra\n- deformhead https://github.com/deformhead\n- bluedragonz https://github.com/bluedragonz\n- Alexander https://github.com/shoonois\n- Steven Black https://github.com/StevenBlack\n- Fail2Ban - https://github.com/fail2ban\n- Stevie-Ray Hartog https://github.com/Stevie-Ray\n- Sir Athos from StackOverFlow - http://stackoverflow.com/users/2245910/sir-athos (help with Travis Build Tagging and Committing)\n- StackOverflow - http://stackoverflow.com/ (bash scripts from hundreds of questions and answers)\n- SuperUser - http://superuser.com/ (snippets from various questions and answers)\n\nIf you believe your name should be here, drop me a line.\n\n************************************************\n### Writing Code like this takes lots of time !!\n\nThousand of hours of programming and testing have gone into this project, show some love\n\n[<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/kofi4.png\" alt=\"Buy me Coffee\" width=\"300\"/>](https://ko-fi.com/mitchellkrog)\n\n<img src=\"https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/.assets/zuko.png\"/>\n\n************************************************\n# MIT License\n\n## Copyright (c) 2017 Mitchell Krog - mitchellkrog@gmail.com\n## https://github.com/mitchellkrogza\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "_fail2ban_addon",
          "type": "tree",
          "content": null
        },
        {
          "name": "_generator_lists",
          "type": "tree",
          "content": null
        },
        {
          "name": "_google_analytics_ghost_spam",
          "type": "tree",
          "content": null
        },
        {
          "name": "_google_webmaster_disavow_links",
          "type": "tree",
          "content": null
        },
        {
          "name": "_sample_config_files",
          "type": "tree",
          "content": null
        },
        {
          "name": "bots.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "conf.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "blob",
          "size": 0.064453125,
          "content": "[core]\n\trepositoryformatversion = 0\n\tfilemode = true\n\tbare = true\n"
        },
        {
          "name": "deny.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "description",
          "type": "blob",
          "size": 1.1376953125,
          "content": "Nginx Ultimate Bad Bot and Spam Referrer Blocker\n\nNginx Block Bad Bots, Spam Referrer Blocker, Vulnerability Scanners, User-Agents, Malware, Adware, Ransomware, Malicious Sites, with anti-DDOS, Wordpress Theme Detector Blocking and Fail2Ban Jail for Repeat Offenders. Also includes resources for fighting Google Analytics Ghost Spam and Google Disavow Links.\n\n#########################################################################                                                                \n#        _  __     _                                                    #\n#       / |/ /__ _(_)__ __ __                                           #\n#      /    / _ `/ / _ \\\\ \\ /                                           #\n#     /_/|_/\\_, /_/_//_/_\\_\\                                            #\n#        __/___/      __  ___       __    ___  __         __            #\n#       / _ )___ ____/ / / _ )___  / /_  / _ )/ /__  ____/ /_____ ____  #\n#      / _  / _ `/ _  / / _  / _ \\/ __/ / _  / / _ \\/ __/  '_/ -_) __/  #\n#     /____/\\_,_/\\_,_/ /____/\\___/\\__/ /____/_/\\___/\\__/_/\\_\\\\__/_/     #\n#########################################################################  "
        },
        {
          "name": "dev-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "headers.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "include_filelist.txt",
          "type": "blob",
          "size": 1.3486328125,
          "content": "# this file is sourced by: #\n############################\n#    install-ngxblocker\t   #\n#    setup-ngxblocker\t   #\n############################\n\n#########################################################################\n#        _  __     _                                                    #\n#       / |/ /__ _(_)__ __ __                                           #\n#      /    / _ `/ / _ \\\\ \\ /                                           #\n#     /_/|_/\\_, /_/_//_/_\\_\\                                            #\n#        __/___/      __  ___       __    ___  __         __            #\n#       / _ )___ ____/ / / _ )___  / /_  / _ )/ /__  ____/ /_____ ____  #\n#      / _  / _ `/ _  / / _  / _ \\/ __/ / _  / / _ \\/ __/  '_/ -_) __/  #\n#     /____/\\_,_/\\_,_/ /____/\\___/\\__/ /____/_/\\___/\\__/_/\\_\\\\__/_/     #\n#########################################################################\n\nCONF_FILES=\"\n\tglobalblacklist.conf\n\tbotblocker-nginx-settings.conf\n\t\"\n\nBOT_FILES=\"\n\tblockbots.conf\n\tddos.conf\n\tcustom-bad-referrers.conf\n\tbad-referrer-words.conf\n\tblacklist-ips.conf\n\tblacklist-user-agents.conf\n\twhitelist-domains.conf\n\twhitelist-ips.conf\n\t\"\n\nVHOST_INCLUDES=\"\n\tblockbots.conf\n\tddos.conf\n\t\"\n\nSCRIPT_FILES=\"\n\tinstall-ngxblocker\n\tsetup-ngxblocker\n\tupdate-ngxblocker\n\t\"\n\nNGINX_DIRECTIVES=\"\n\tserver_names_hash_bucket_size\n\tserver_names_hash_max_size\n\tlimit_req_zone\n\tlimit_conn_zone\n\t\"\n"
        },
        {
          "name": "install-ngxblocker",
          "type": "blob",
          "size": 10.39453125,
          "content": "#!/bin/sh\n\n# Shell Script for Installing the Nginx Bad Bot Blocker\n# Copyright - https://github.com/mitchellkrogza\n# Project Url: https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker\n# Version 2.2017.07\n# Install script & Alpine Linux package by Stuart Cardall: https://github.com/itoffshore\n\n# PLEASE READ CONFIGURATION INSTRUCTIONS BEFORE USING THIS - THIS IS ONLY A PARTIAL INSTALLER\n# FOR COPYING THE FILES CORRECTLY TO THE NGINX FOLDERS:\n# https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/CONFIGURATION.md\n\n# Use this script for a new install or to update to a new release (which has a new configuration\n# file structure) and thereafter use the Auto Update Shell Script update-ngxblocker to update\n# the blacklist in /etc/nginx/conf.d/globalblacklist.conf\n\n# THIS INSTALL SCRIPT ONLY COPIES THE NECESSARY FILES FOR NGINX DIRECTLY FROM THE REPO\n\n### The installer script does not carry out STEP 6 of the configuration instructions for you.\n### You must manually edit any vhost files with the includes in STEP 6 or it will not actually be protecting any sites.\n### READ: https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/CONFIGURATION.md\n\n### You can also now use a setup script contributed by Stuart Cardall to automatically insert the includes for you\n### See - https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/setup-ngxblocker\n\n# Save this file as /usr/local/sbin/install-ngxblocker\n# \tsudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/install-ngxblocker -O /usr/local/sbin/install-ngxblocker\n# Make it Executable:\n# \tchmod 700 /usr/local/sbin/install-ngxblocker\n# Run it from the command line:\n#\tsudo /usr/local/sbin/install-ngxblocker [ -h ]\n\n######## LETS INSTALL NOW ###############################\n\nCONF_DIR=/etc/nginx/conf.d\nBOTS_DIR=/etc/nginx/bots.d\nSCRIPT_DIR=/usr/local/sbin\nREPO=https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master\n\n####### end user configuration ##########################\nOS=$(uname -s)\n\nusage() {\n        local script=$(basename $0)\n        cat <<EOF\n$script: INSTALL Nginx Bad Bot Blocker configuration to: [ $CONF_DIR ] [ $BOTS_DIR ]\n\nUsage: $script [OPTIONS]\n        [ -b ] : Bot rules directory           (default: $BOTS_DIR)\n        [ -c ] : NGINX conf directory          (default: $CONF_DIR)\n        [ -s ] : Script directory              (default: $SCRIPT_DIR)\n        [ -r ] : Change repo url               (default: $REPO)\n        [ -x ] : Actually change the files     (default: don't change anything)\n        [ -q ] : Suppress non error messages\n        [ -v ] : Print blacklist version\n        [ -h ] : this help message\n\nExamples:\n $script       (Don't change anything: display results on stdout)\n $script -x    (Download / update config files)\n $script -q    (Less verbose messages for cron)\nEOF\n        exit 0\n}\n\ncheck_version() {\n        local file=$CONF_DIR/globalblacklist.conf\n\n        if [ -f $file ]; then\n                grep Version $file\n                grep 'Updated:' $file\n        else\n                printf \"Missing '$file' (pass -c \\$path before -v)\\n\"\n        fi\n\n        exit 0\n}\n\nlongest_str() {\n\techo $@ | tr \" \" \"\\n\" | awk '{print length ($0)}' | sort -nr | head -n1\n}\n\ncheck_if_updating() {\n\tlocal x= local_file= local_dir=$1\n\tlocal file_list=\"$(echo $@ | awk '{$1=\"\"; print}' | sed -e 's/^[ \\t]*//')\"\n\n\tfor x in $file_list; do\n\t\tlocal_file=$local_dir/$x\n\n\t\tif [ ! -f $local_file ]; then\n\t\t\techo \"true\"\n\t\t\tbreak\n\t\tfi\n\tdone\n}\n\ndownload_files() {\n\tlocal url= x= local_file= remote_path= remote_dir=$1 local_dir=$2 tmp= retval=\n\tlocal file_list=\"$(echo $@ | awk '{$1=$2=\"\"; print $0}' | sed -e 's/^[ \\t]*//')\" # rm leading whitespace\n\tlocal col_size=$(( $(longest_str $file_list) + $(echo $remote_dir | wc -m) ))\n\n\tif [ -n \"$(check_if_updating $local_dir $file_list)\" ]; then\n\t\tprintf \"\\nREPO = $REPO\\n\\n\"\n\n\t\tfor x in $file_list; do\n\t\t\tlocal_file=$local_dir/$x\n\n\t\t\tif [ ! -f $local_file ] || [ ! -s $local_file ]; then\n\t\t\t\tif [ \"$remote_dir\" = \"/\" ]; then\n\t\t\t\t\tremote_path=$x\n\t\t\t\telse\n\t\t\t\t\tremote_path=\"$remote_dir/$x\"\n\t\t\t\tfi\n\n\t\t\t\tif [ \"$DRY_RUN\" = \"N\" ]; then\n\t\t\t\t\tprintf \"%-21s %-$(( $col_size +8 ))s %s\" \\\n\t\t\t\t\t\"Downloading [FROM]=>\" \\\n\t\t\t\t\t\"[REPO]/$remote_path\" \\\n\t\t\t\t\t\"[TO]=>  $local_file\"\n\n\t\t\t\t\ttmp=$(mktemp)\n\t\t\t\t\turl=$REPO/$remote_path\n\t\t\t\t\tcurl --fail --connect-timeout 60 --retry 10 --retry-delay 5 -so $tmp $url\n\t\t\t\t\tretval=$?\n\n\t\t\t\t\tcase \"$retval\" in\n\t\t\t\t\t\t 0) printf \"...OK\\n\"\n\t\t\t\t\t\t    mv $tmp $local_file\n\t\t\t\t\t\t    ;;\n\t\t\t\t\t\t22) printf \"...ERROR 404: $url\\n\";;\n\t\t\t\t\t\t28) printf \"...ERROR TIMEOUT: $url\\n\";;\n\t\t\t\t\t\t *) printf \"...ERROR CURL: ($retval)\\n\";;\n\t\t\t\t\tesac\n\t\t\t\telse\n\t\t\t\t\tprintf \"%-21s %-$(( $col_size +8 ))s %s\\n\" \\\n\t\t\t\t\t\"Downloading [FROM]=>\" \\\n\t\t\t\t\t\"[REPO]/$remote_path\" \\\n\t\t\t\t\t\"[TO]=>  $local_file\"\n\t\t\t\tfi\n\t\t\tfi\n\t\tdone\n\telse\n\t\tprint_message \"Nothing to update for directory: $local_dir\\n\"\n\tfi\n}\n\nset_mode() {\n\tlocal mode=$1 dir=$2 file=\n\tlocal file_list=\"$(echo $@ | awk '{$1=$2=\"\"; print}' | sed -e 's/^[ \\t]*//')\"\n\n\tfor file in $file_list; do\n\t\tprint_message \"Setting mode: $mode => $dir/$file\\n\"\n\t\tchmod $mode $dir/$file\n\tdone\n}\n\ncheck_config() {\n\tlocal x= dirs=\"$*\"\n\n\tfor x in $dirs; do\n\t\tif [ ! -d $x ]; then\n\t\t\tprintf \"Creating directory: $x\\n\"\n\t\t\tif [ \"$DRY_RUN\" = \"N\" ]; then\n\t\t\t\tmkdir -p $x\n\t\t\tfi\n\t\tfi\n\tdone\n}\n\nsanitize_path() {\n        echo $1 |tr -cd '[:alnum:] [=@=] [=.=] [=-=] [=/=] [=_=]' \\\n                |tr -s '@.-/_' |awk '{print tolower($0)}'\n}\n\nsanitize_url() {\n        echo $1 |tr -cd '[:alnum:] [=:=] [=.=] [=-=] [=/=]' \\\n                |tr -s ':.-' |awk '{print tolower($0)}'\n}\n\ncheck_args() {\n        local option=$1 type=$2 arg=$3\n        local msg=\"ERROR: option '-$option' argument '$arg' requires:\"\n\n        case \"$type\" in\n                path)   if ! echo $arg | grep ^/ 1>/dev/null; then\n                                printf \"$msg absolute path.\\n\"\n                                exit 1\n                        fi\n                        ;;\n                url)    if ! echo $arg | grep -E ^http[s]?://[0-9a-zA-Z-]+[.]+[/0-9a-zA-Z.]+ 1>/dev/null; then\n                                printf \"$msg url => http[s]://the.url\\n\"\n                                exit 1\n                        fi\n                        ;;\n                none)   printf \"$msg argument.\\n\"; exit 1;;\n        esac\n}\n\nprint_message() {\n        local msg=\"$@\"\n\n        if [ \"$VERBOSE\" != \"N\" ]; then\n                printf \"$msg\"\n        fi\n}\n\nget_options() {\n        local arg= opts=\n\n        while getopts :b:c:s:r:xvqh opts \"$@\"\n        do\n                if [ -n \"${OPTARG}\" ]; then\n                        case \"$opts\" in\n                                r) arg=$(sanitize_url ${OPTARG});;\n                                *) arg=$(sanitize_path ${OPTARG});;\n                        esac\n                fi\n\n                case \"$opts\" in\n                        b) BOTS_DIR=$arg; check_args $opts path $arg ;;\n                        c) CONF_DIR=$arg; check_args $opts path $arg ;;\n                        s) SCRIPT_DIR=$arg; check_args $opts path $arg ;;\n                        r) REPO=$arg; check_args $opts url $arg ;;\n                        x) DRY_RUN=N ;;\n                        v) check_version ;;\n                        q) VERBOSE=N ;;\n                        h) usage ;;\n                       \\?) usage ;;\n                        :) check_args $OPTARG none none ;;\n                esac\n        done\n}\n\nwget_opts() {\n\tlocal opts=\n\n\t# GNU wget / Busybox 1.26.2\n\tif wget --help 2>&1 | grep \"\\--spider\" >/dev/null 2>&1; then\n\t\topts=\"--spider\"\n\telse    # Busybox wget < 1.26.2\n\t\topts=\"-s\"\n\tfi\n\n\techo $opts\n}\n\nfind_binary() {\n        local x= path= binary=$1 bin_paths='/bin /usr/bin /usr/local/bin /sbin /usr/sbin /usr/local/sbin /root/bin /root/.bin'\n\n        for x in $bin_paths; do\n                path=\"$x/$binary\"\n\n                if [ -x $path ]; then\n                        echo $path\n                        return\n                fi\n        done\n}\n\ncheck_depends() {\n\t# some distros do not have these tools installed by default\n\tlocal x= depends_list=\"wget curl\"\n\n\tfor x in $depends_list; do\n\t\tif [ -z $(find_binary $x) ]; then\n\t\t\tprintf \"$0 requires: '$x' \\n\"\n\t\t\texit 1\n\t\tfi\n\tdone\n\n\tcase $OS in\n\t\tLinux)\n\t\t\t# give a helpful message for missing pidof\n\t\t\tif [ -z $(find_binary pidof) ]; then\n\t\t\t\tprintf \"$0 requires 'pidof' \\n\\n\"\n\t\t\t\tprintf \"In Debian: apt install sysvinit-utils\\n\"\n\t\t\t\tprintf \"In Centos: yum install sysvinit-tools\\n\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\t\t*BSD)\n\t\t\t# give a helpful message for missing gsed\n\t\t\tif [ -z $(find_binary gsed) ]; then\n\t\t\t\tprintf \"$0 requires 'gsed' \\n\\n\"\n\t\t\t\tprintf \"In FreeBSD: 'pkg install textproc/gsed' or 'portmaster textproc/gsed'\\n\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\tesac\n}\n\ncheck_online() {\n\tlocal url=$1 options=$(wget_opts)\n\n\tif wget $options $url >/dev/null 2>&1; then\n\t\techo \"true\"\n\tfi\n}\n\nmain() {\n\tlocal include_url=\n\n\t# require root\n\tif [ \"$(id -u)\" != \"0\" ]; then\n\t\techo \"This script must be run as root\" 1>&2\n\t\texit 1\n\tfi\n\n\tcheck_depends\n\n\t# parse command line\n\tget_options $@\n\tinclude_url=$REPO/include_filelist.txt\n\n\t# check repo is online & source includes\n\tprint_message \"Checking url: $include_url\\n\"\n\tif [ -n \"$(check_online $include_url)\" ]; then\n\t\tlocal tmp=$(mktemp)\n\t\twget -q $include_url -O $tmp\n\t\t# use period not source in POSIX shell\n\t\t. $tmp 2>/dev/null\n\t\trm -f $tmp\n\telse\n\t\tprintf \"Repo down or missing: $include_url\\n\"\n\t\texit 1\n\tfi\n\n\t# double check we have some files sourced\n\tif [ -z \"$CONF_FILES\" ] || [ -z \"$BOT_FILES\" ] || [ -z \"$SCRIPT_FILES\" ]; then\n\t\tprintf \"Error sourcing variables from: $include_url\\n\"\n\t\texit 1\n\tfi\n\n\t# by default do not change any files\n\tif [ -z \"$DRY_RUN\" ]; then\n\t\tprintf \"\\n** Dry Run ** | not updating files | run  as '$(basename $0) -x' to install files.\\n\\n\"\n\telse\n\t\tprintf \"\\n\"\n\tfi\n\n\tcheck_config $CONF_DIR $BOTS_DIR $SCRIPT_DIR\n\tdownload_files conf.d $CONF_DIR $CONF_FILES\n\tdownload_files bots.d $BOTS_DIR $BOT_FILES\n\tdownload_files / $SCRIPT_DIR $SCRIPT_FILES\n\n\t# ensures scripts are executable\n\tif [ \"$DRY_RUN\" = \"N\" ]; then\n\t\tset_mode 700 $SCRIPT_DIR $SCRIPT_FILES\n\tfi\n}\n\n## START ##\nmain $@\nexit $?\n\n# PLEASE READ CONFIGURATION INSTRUCTIONS\n# https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/CONFIGURATION.md\n\n# PLEASE ALSO SEE THE SETUP SCRIPT TO INSERT THE NECESSARY INCLUDES FOR YOU\n### You can now use a setup script contributed by Stuart Cardall to automatically add the includes for you\n### See - https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/setup-ngxblocker\n"
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "robots.txt",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup-ngxblocker",
          "type": "blob",
          "size": 14.884765625,
          "content": "#!/bin/sh\n\n###  NGINX Bad Bot Blocker: setup script #################\n###  Copyright (C) 2017 Stuart Cardall                 ###\n###  https://github.com/itoffshore                     ###\n###  Licensed under the terms of the GPL2              ###\n##########################################################\n\nWWW=/var/www\nVHOST_EXT=\"vhost\"\nVHOST_DIR=/etc/nginx/sites-available\nBOTS_DIR=/etc/nginx/bots.d\nCONF_DIR=/etc/nginx/conf.d\nMAIN_CONF=/etc/nginx/nginx.conf\nINSTALLER=/usr/local/sbin/install-ngxblocker\n# setting Y / yes will whitelist only directories in $www\n# that look like domain.names\nDOT_NAMES=\"Y\"\n# if you already set 'limit_conn addr' you may want to set\n# this to N / no.\nINC_DDOS=\"Y\"\n\n####### end user configuration ###########################\n\nBOLDGREEN=\"\\033[1m\\033[32m\"\nBOLDMAGENTA=\"\\033[1m\\033[35m\"\nBOLDRED=\"\\033[1m\\033[31m\"\nBOLDYELLOW=\"\\033[1m\\033[33m\"\nBOLDWHITE=\"\\033[1m\\033[37m\"\nRESET=\"\\033[0m\"\nOS=$(uname -s)\n\nusage() {\n        local script=$(basename $0)\n        cat <<EOF\n$script: SETUP Nginx Bad Bot Blocker configuration in [ $MAIN_CONF ] [ $VHOST_DIR/* ]\n\nUsage: $script [OPTIONS]\n\t[ -w ] : WWW path                      (default: $WWW)\n\t[ -e ] : Vhost file extension          (default: .$VHOST_EXT)\n\t[ -v ] : Vhost directory               (default: $VHOST_DIR)\n\t[ -b ] : Bot rules directory           (default: $BOTS_DIR)\n\t[ -c ] : NGINX conf directory          (default: $CONF_DIR)\n\t[ -m ] : NGINX main configuration      (default: $MAIN_CONF)\n\t[ -i ] : Change installer path         (default: $INSTALLER)\n\t[ -l ] : Manual whitelist of domain    (default: none)\n\t[ -n ] : NO whitelist of .names only   (default: $DOT_NAMES)\n\t[ -d ] : NO insert of DDOS rule        (default: $INC_DDOS)\n\t[ -z ] : NO configuration of vhosts    (default: configure files in $VHOST_DIR)\n\t[ -x ] : Actually change the files     (default: don't change anything)\n\t[ -h ] : this help message\n\nExamples:\n $script -n    (Whitelist all directory names in $WWW as domains: not just dot.name directories)\n $script -l domain1.com -l domain2.com (Whitelist these manual domain name args)\n $script -d    (Do not insert DDOS rule: these may clash with existing 'limit_conn addr' rules)\n $script       (Don't change anything: display results on stdout)\n $script -x    (Change / update config files)\nEOF\n        exit 0\n}\n\nupdate_paths() {\n\t# variables in nginx include files not currently possible\n\t# updates hard coded bots.d path in globalblacklist.conf\n\tlocal blacklist=$1 include_paths= dir= x=\n\n\tif ! grep \"$BOTS_DIR\" $blacklist 1>/dev/null; then\n\t\tif [ -d $BOTS_DIR ]; then\n\t\t\tprintf \"${BOLDGREEN}Updating bots.d path${RESET}: ${BOLDWHITE}$BOTS_DIR => $blacklist${RESET}\\n\"\n\t\t\tinclude_paths=$(grep -E \"include /.*.conf;$\" $blacklist | awk '{print $2}' | tr -d ';')\n\n\t\t\tfor x in $include_paths; do\n\t\t\t\tdir=$(dirname $x)\n\t\t\t\t${SED_CMD} -i \"s|$dir|$BOTS_DIR|\" $blacklist\n\t\t\tdone\n\t\telse\n\t\t\tprintf \"${BOLDRED}ERROR${RESET}: '$BOTS_DIR' does not exist => ${BOLDWHITE}running $INSTALLER${RESET}.\\n\"\n\t\t\t$INSTALL_INC\n\t\t\tupdate_paths $blacklist\n\t\tfi\n\tfi\n}\n\ncheck_config() {\n\tif [ -z \"$FILE_LIST\" ]; then\n\t\tprintf \"${BOLDGREEN}using a file extension for vhost files allows multiple domains to be included with a single directive in nginx.conf:\\n\\n\"\n\t\tprintf \"${BOLDWHITE}include /etc/nginx/sites-enabled/*.$VHOST_EXT;\\n\\n\"\n\t\tprintf \"${BOLDYELLOW}see command line switches below: ${BOLDGREEN}-e ${RESET}to customise the vhost file extension\\n\\n\"\n\t\tprintf \"${BOLDMAGENTA}no vhost files in:${RESET} [ $VHOST_DIR/*.$VHOST_EXT ] ${BOLDWHITE}=> exiting${RESET}.\\n\\n\"\n\t\tusage\n\tfi\n\n\tif [ ! -f \"$MAIN_CONF\" ]; then\n\t\tprintf \"${BOLDYELLOW}see command line switches below: ${BOLDGREEN}-m ${RESET}to customise the location of ${BOLDWHITE}nginx.conf${RESET}\\n\\n\"\n\t\tprintf \"${BOLDWHITE}NGINX main configuration${RESET} [ $MAIN_CONF ] ${BOLDMAGENTA}not found ${BOLDWHITE}=> exiting${RESET}.\\n\\n\"\n\t\tusage\n\tfi\n}\n\nfind_vhosts() {\n\tlocal ans=\n\tFILE_LIST=$(find $VHOST_DIR \\( -type f -or -type l \\) -name \"*.$VHOST_EXT\")\n\n\t# vhost configuration can be disabled with '-z' switch\n\tif [ -z \"$FILE_LIST\" ] && [ -z \"$SETUP_VHOST\" ]; then\n\t\tfind $VHOST_DIR -type f\n\t\tprintf \"\\n${BOLDWHITE}Configure every file above as a vhost ? [Y/N] : \"; read ans\n\t\tcase \"$ans\" in\n\t\t\ty*|Y*) FILE_LIST=$(find $VHOST_DIR -type f);;\n\t\tesac\n\tfi\n}\n\nwhitelist_ips() {\n\tlocal ip= conf=$BOTS_DIR/whitelist-ips.conf\n\n\tmkdir -p $BOTS_DIR\n\n\tif [ -z $(find_binary dig) ]; then\n\t\treturn\n\tfi\n\n\tip=\"$(dig +short myip.opendns.com @resolver1.opendns.com)\"\n\tif ! grep \"$ip\" $conf >/dev/null 2>&1; then\n\t\tprintf \"\\n%-17s %-15s %-s\\n\" \"Whitelisting ip:\" \"$ip\" \"=> $conf\"\n\t\tif [ \"$DRY_RUN\" = \"N\" ]; then\n\t\t\tprintf \"%-23s %-s\\n\" \"$ip\" \"0;\" >> $conf\n\t\tfi\n\tfi\n}\n\nwhitelist_domains() {\n\tlocal domain_list= domain= domain_len=\n\tlocal conf=$BOTS_DIR/whitelist-domains.conf\n\n\tcase \"$DOT_NAMES\" in\n\t\ty*|Y*) domain_list=$(find $WWW -mindepth 1 -maxdepth 1 -type d -name '*\\.*' -exec basename {} \\;);;\n\t\t    *) domain_list=$(find $WWW -mindepth 1 -maxdepth 1 -type d -exec basename {} \\;);;\n\tesac\n\n\tdomain_len=$(find $WWW -mindepth 1 -maxdepth 1 -type d  -exec basename {} \\; \\\n\t\t| awk '{ print length ($0) }' | sort -nr | head -1)\n\n\twhitelist_print Auto $domain_len $domain_list\n}\n\nwhitelist_manual_domains() {\n\tlocal x= domain= domain_len=0\n\tlocal conf=$BOTS_DIR/whitelist-domains.conf\n\n\tfor domain in $DOMAINS; do\n\t\tx=$(echo $domain | wc -m)\n\n\t\tif [ $x -gt $domain_len ]; then\n\t\t\tdomain_len=$x\n\t\tfi\n\tdone\n\n\twhitelist_print Manual $domain_len $DOMAINS\n}\n\nwhitelist_print() {\n\tlocal type=$1 domain= domain_len=$2 domain_list=\"$(echo $@ | cut -f3- -d ' ')\"\n\tlocal conf=$BOTS_DIR/whitelist-domains.conf\n\n        for domain in $domain_list; do\n                if ! grep \"$domain\" $conf >/dev/null 2>&1; then\n                        printf \"%-s %-$(( $domain_len +2))s %s\\n\" \"$type Whitelist:\" \"$domain\" \"=> $conf\"\n                        if [ \"$DRY_RUN\" = \"N\" ]; then\n                                printf \"%-$(( $domain_len +8))s %s\\n\" \"\\\"~*$domain\\\"\" \"0;\" >> $conf\n                        fi\n                fi\n        done\n}\n\n\n\nlongest_str() {\n\techo $@ | tr \" \" \"\\n\" | awk '{print length ($0)}' | sort -nr | head -n1\n}\n\ncheck_wildcard() {\n\tlocal file=$1 dir=$(basename $2)\n\tlocal check=\"$(grep -E \"^[^#]+include[[:alnum:] /]+$dir/\\*\" $file)\"\n\techo $check\n}\n\nadd_includes() {\n\tlocal ph='<<!!>>' line=$1 file=$2 conf_dir=$3 col_size=$4 text= update=\n\tlocal include_list=\"$(echo $@ | awk '{$1=$2=$3=$4=\"\"}sub(\"^\"OFS\"+\",\"\")')\"\n\n\tfor text in $include_list; do\n\t\tif ! grep \"$text\" $file 1>/dev/null; then\n\t\t\tupdate='true'\n\t\t\ttext=\"include $conf_dir/$text;\"\n\t\t\tprintf \"%-10s %-${col_size}s %s\\n\" \"inserting:\" \"$text\" \"=> $file\"\n\t\t\tif [ \"$DRY_RUN\" = \"N\" ]; then\n\t\t\t\t# $ph is just a placeholder so sed inserts a \\t (tab)\n\t\t\t\t${SED_CMD} -i \"$line i $ph \\t$text $ph\" $file\n\t\t\tfi\n\t\tfi\n\tdone\n\n\tif [ \"$DRY_RUN\" = \"N\" ]; then\n\t\tif [ -n \"$update\" ]; then\n\t\t\t#add blank line below inserts\n\t\t\tline=$(( $line + $(echo $include_list | wc -w) ))\n\t\t\tif ! ${SED_CMD} -n \"${line}p\" $file | grep ^'}' 1>/dev/null; then\n\t\t\t\ttext=\"include $conf_dir/$(echo $include_list | awk '{print $1}');\"\n\t\t\t\t${SED_CMD} -i \"s|$text|$text\\n|\" $file\n\t\t\tfi\n\n\t\t\t#add comment above inserts\n\t\t\ttext=\"include $conf_dir/$(echo $include_list | awk '{print $NF}');\"\n\t\t\t${SED_CMD} -i \"s|$text|\\n\\n    ##\\n    # Nginx Bad Bot Blocker Includes\\n    # REPO: https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker\\n    ##\\n\\t$text|\" $file\n\n\t\t\t# remove placeholders\n\t\t\t${SED_CMD} -i \"s|$ph||g\" $file\n\t\tfi\n\tfi\n}\n\nfind_line() {\n\tlocal file=$1 find_str=$2 first_last=$3\n\n\tcase \"$first_last\" in\n\t\t# ignore file #comments\n\t\tfirst) awk \"/$find_str/{ print NR; exit }\" $file;;\n\t\tlast) awk \"/$find_str/{ print NR }\" $file | tail -n1;;\n\tesac\n}\n\nfind_includes() {\n\tlocal file=$1 search=$2 search_first_last=$3 line= tmp=$(mktemp)\n\tlocal start_range=$4 start_first_last=$5\n\tlocal end_range=$6 end_first_last=$7\n\tlocal start=$(find_line $file $start_range $start_first_last)\n\tlocal end=$(find_line $file $end_range $end_first_last)\n\n\tif [ -n \"$start\" ] && [ -n \"$end\" ]; then\n\t\t${SED_CMD} -n \"$start,$end\"p $file > $tmp\n\t\tline=$(find_line $tmp $search $search_first_last)\n\t\trm -f $tmp\n\tfi\n\n\t# search string not found\n\tif [ -z \"$line\" ]; then\n\t\tline=1\n\tfi\n\n\tcase \"$search_first_last\" in\n\t\tfirst) line=$(( $line + $start -1 ));;\n\t\t last) line=$(( $line + $start +1 ));;\n\tesac\n\n\t# if inserting beyond the end of the stanza\n\tif [ \"$(${SED_CMD} -n $(( $line - 1))p $file | grep ^})\" = \"}\" ]; then\n\t\t# insert blank line\n\t\t${SED_CMD} -i \"$(( line - 1)) i \\ \" $file\n\tfi\n\n\techo $line\n}\n\nsanitize_path() {\n\techo $1 |tr -cd '[:alnum:] [=@=] [=.=] [=-=] [=/=] [=_=]' \\\n\t\t|tr -s '@.-/_' |awk '{print tolower($0)}'\n}\n\nsanitize_ext() {\n\techo $1 |tr -cd '[:alnum:]' |awk '{print tolower($0)}'\n}\n\ncheck_args() {\n\tlocal option=$1 type=$2 arg=$3\n\tlocal msg=\"ERROR: option '-$option' argument '$arg' requires:\"\n\n\tcase \"$type\" in\n\t\tpath)   if ! echo $arg | grep ^/ 1>/dev/null; then\n\t\t\t\tprintf \"$msg absolute path.\\n\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\t      script)\tif [ ! -x $arg ]; then\n\t\t\t\tprintf \"$msg '$arg' is not executable / does not exist.\\n\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\t\tnone)   printf \"$msg argument.\\n\"; exit 1;;\n\tesac\n}\n\nfind_binary() {\n        local x= path= binary=$1 bin_paths='/bin /usr/bin /usr/local/bin /sbin /usr/sbin /usr/local/sbin /root/bin /root/.bin'\n\n        for x in $bin_paths; do\n                path=\"$x/$binary\"\n\n                if [ -x $path ]; then\n                        echo $path\n                        return\n                fi\n        done\n}\n\ncheck_depends() {\n\t# centos does not have which by default\n\tif [ -z $(find_binary curl) ]; then\n\t\tprintf \"${BOLDRED}ERROR${RESET}: $0 requires: 'curl' => ${BOLDWHITE}cannot check remote version.${RESET}\\n\"\n\t\texit 1\n\tfi\n\n\tcase $OS in\n\t\tLinux)\n\t\t\tSED_CMD=$(find_binary sed)\n\t\t\tif [ -z ${SED_CMD} ]; then\n\t\t\t\tprintf \"${BOLDRED}ERROR${RESET}: $0 requires: 'sed' => ${BOLDWHITE}please install sed.${RESET}\\n\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\t\t*BSD)\n\t\t\tSED_CMD=$(find_binary gsed)\n\t\t\tif [ -z ${SED_CMD} ]; then\n\t\t\t\tprintf \"${BOLDRED}ERROR${RESET}: $0 requires: 'gsed' => ${BOLDWHITE}please install textproc/gsed.${RESET}\\n\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\tesac\n\n\t# required for whitelisting public ip\n\tif [ -z $(find_binary dig) ]; then\n\t\tprintf \"${BOLDYELLOW}WARN${RESET}: $0 optionally requires: 'dig' => ${BOLDWHITE}cannot whitelist public ip address.${RESET}\\n\"\n\tfi\n\n\t# install-ngxblocker downloads missing scripts / includes as part of the update process\n\tif [ ! -x $INSTALLER ]; then\n\t\tprintf \"${BOLDRED}ERROR${RESET}: $0 requires: '$INSTALLER' => ${BOLDWHITE}cannot update includes.${RESET}\\n\"\n\t\texit 1\n\tfi\n}\n\ncheck_nginx_directives() {\n\t# avoid directive conflicts with nginx.conf\n\tlocal x= bot_config=\"$CONF_DIR\"/botblocker-nginx-settings.conf\n\n\t# directives sourced from include_filelist.txt\n\tfor x in $NGINX_DIRECTIVES; do\n\t\tif grep -E \"(^$x|^[[:space:]]+$x)\" 1>/dev/null $MAIN_CONF; then\n\t\t\tprintf \"${BOLDYELLOW}setup will fix conflict from: '$x' in $bot_config${RESET}\\n\"\n\t\t\tif [ \"$DRY_RUN\" = \"N\" ]; then\n\t\t\t\tprintf \"${BOLDRED}disabling '$x' in: $bot_config${RESET}\\n\"\n\t\t\t\t${SED_CMD} -i \"s/$x/#$x/g\" $bot_config | grep $x\n\t\t\t\tprintf \" ${BOLDGREEN}disabled OK${RESET}\\n\\n\"\n\t\t\tfi\n\t\tfi\n\tdone\n}\n\nget_options() {\n\tlocal arg= opts=\n\n\twhile getopts :w:l:e:v:b:c:m:i:ndxzh opts \"$@\"\n\tdo\n\t\tif [ -n \"${OPTARG}\" ]; then\n\t\t\tcase \"$opts\" in\n\t\t\t\te) arg=$(sanitize_ext ${OPTARG});;\n\t\t\t\t*) arg=$(sanitize_path ${OPTARG});;\n\t\t\tesac\n\t\tfi\n\n\t\tcase \"$opts\" in\n\t\t\tw) WWW=$arg; check_args $opts path $arg ;;\n\t\t\tl) DOMAINS=\"$DOMAINS $arg\" ;;\n\t\t\te) VHOST_EXT=$arg;;\n\t\t\tv) VHOST_DIR=$arg; check_args $opts path $arg ;;\n\t\t\tb) BOTS_DIR=$arg; check_args $opts path $arg ;;\n\t\t\tc) CONF_DIR=$arg; check_args $opts path $arg ;;\n\t\t\tm) MAIN_CONF=$arg; check_args $opts path $arg ;;\n\t\t\ti) INSTALLER=$arg; check_args $opts script $arg ;;\n\t\t\tn) DOT_NAMES=N ;;\n\t\t\td) INC_DDOS=N ;;\n\t\t\tx) DRY_RUN=N ;;\n\t\t\tz) SETUP_VHOST=N ;;\n\t\t\th) usage ;;\n\t\t\t\\?) usage ;;\n\t\t\t:) check_args $OPTARG none none ;;\n\t\tesac\n\tdone\n\n\tINSTALL_INC=\"$INSTALLER -b $BOTS_DIR -c $CONF_DIR -x\"\n}\n\ncheck_online() {\n\tlocal url=$1\n\tlocal response_code=$(curl -o /dev/null --silent --head --write-out '%{http_code}' $url)\n\n\tif [ \"$response_code\" = \"200\" ]; then\n\t\techo \"true\"\n\tfi\n}\n\nmain() {\n\tlocal include_url= file= line= col_size= blacklist=\n\tlocal CONF_FILES= VHOST_INCLUDES=\n\tlocal REPO=https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master\n\n\t# require root\n\tif [ \"$(id -u)\" != \"0\" ]; then\n\t\techo \"This script must be run as root\" 1>&2\n\t\texit 1\n\tfi\n\n\t# parse command line\n\tget_options $@\n\tcheck_depends\n\n\t# check vhosts\n\tfind_vhosts\n\tcheck_config\n\n\t# check repo is online & source includes\n\tinclude_url=$REPO/include_filelist.txt\n\n\tprintf \"Checking url: $include_url\\n\"\n\tif [ -n \"$(check_online $include_url)\" ]; then\n\t\tlocal tmp=$(mktemp)\n\t\tcurl -s -o $tmp $include_url\n\t\t# use period not source in POSIX shell\n\t\t. $tmp 2>/dev/null\n\t\trm -f $tmp\n\telse\n\t\tprintf \"Repo down or missing: $include_url\\n\"\n\t\texit 1\n\tfi\n\n\t# double check we have some files sourced\n\tif [ -z \"$CONF_FILES\" ] || [ -z \"$VHOST_INCLUDES\" ]; then\n\t\tprintf \"Error sourcing variables from: $include_url\\n\"\n\t\texit 1\n\tfi\n\n\t# configure ddos include\n\tcase \"$INC_DDOS\" in\n\t\tn*|N*) VHOST_INCLUDES=$(echo $VHOST_INCLUDES | ${SED_CMD} 's|ddos.conf||');;\n\tesac\n\n\t# by default do not change any files\n\tif [ -z \"$DRY_RUN\" ]; then\n\t\tprintf \"\\n** Dry Run ** | not updating files | run  as '$(basename $0) -x' to setup files.\\n\\n\"\n\telse\n\t\tprintf \"\\n\"\n\tfi\n\n\t# calculate column size for better message printing\n\tcol_size=$(( $(longest_str $CONF_FILES) + $(echo $CONF_DIR | wc -m) + 10 ))\n\n\t# update main config\n\t#line=$(find_includes $MAIN_CONF include last http first '\\}' last )\n\tline=$(find_includes $MAIN_CONF sendfile last http first '\\}' last )\n\tif [ -n \"$(check_wildcard $MAIN_CONF $CONF_DIR)\" ]; then # also recalculate column width\n\t\tcol_size=$(( $(longest_str $VHOST_INCLUDES) + $(echo $BOTS_DIR | wc -m) + 10 ))\n\t\tprintf \"%-10s %-${col_size}s %s\\n\" \"INFO:\" \"$CONF_DIR/* detected\" \"=> $MAIN_CONF\"\n\telse                                                    # wildcard conf.d ok in nginx.conf\n\t\tadd_includes $line $MAIN_CONF $CONF_DIR $col_size $CONF_FILES\n\tfi\n\n\t# update vhosts\n\tfor file in $FILE_LIST; do\n\t\tline=$(find_includes $file include last server_ last location first )\n\n\t\tif [ -n \"$(check_wildcard $file $BOTS_DIR)\" ]; then\n\t\t\t# do not use wildcards in vhost files\n\t\t\tprintf \"%-10s %-${col_size}s %s\\n\" \"WARN:\" \"$BOTS_DIR/* detected\" \"=> $file\"\n\t\telse    # do not add includes to vhosts without root directive (i.e redirects)\n\t\t\tif grep -Ew ^[[:space:]]+root $file 1>/dev/null; then\n\t\t\t\tadd_includes $line $file $BOTS_DIR $col_size $VHOST_INCLUDES\n\t\t\tfi\n\t\tfi\n\tdone\n\n\t# check nginx.conf for settings that clash\n\tcheck_nginx_directives\n\n\t# whitelisting\n\twhitelist_ips\n\n\tif [ -d $WWW ]; then\n\t\twhitelist_domains\n\telse\n\t\tprintf \"\\nWeb directory not found ('$WWW'): not automatically whitelisting domains.\\n\"\n\tfi\n\n\tif [ -n \"$DOMAINS\" ]; then\n\t\twhitelist_manual_domains\n\tfi\n\n\t# download new bots.d / conf.d files\n\tprintf \"\\nChecking for missing includes:\\n\\n\"\n\t$INSTALL_INC\n\tblacklist=$(find $CONF_DIR -type f -name globalblacklist.conf)\n\t# set custom bots.d path\n\tupdate_paths $blacklist\n}\n\n## START ##\nmain $@\nexit $?\n"
        },
        {
          "name": "ssl.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "t.sh",
          "type": "blob",
          "size": 0.099609375,
          "content": "#!/bin/bash\n\nif [[ ! -z \"$(git status --porcelain)\" ]]\nthen\n    echo \"push\"\nelse\necho \"do nothing\"\nfi\n"
        },
        {
          "name": "update-ngxblocker",
          "type": "blob",
          "size": 13.6083984375,
          "content": "#!/bin/sh\n\n# Shell Script for Auto Updating the Nginx Bad Bot Blocker\n# Copyright: https://github.com/mitchellkrogza\n# Project Url: https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker\n# Update script & Alpine Linux package by Stuart Cardall: https://github.com/itoffshore\n\n# MAKE SURE you have all the following files in /etc/nginx/bots.d/ folder\n# ***********************************************************************\n# whitelist-ips.conf\n# whitelist-domains.conf\n# blacklist-user-agents.conf\n# bad-referrer-words.conf\n# custom-bad-referrers.conf\n# blacklist-ips.conf\n# A major change to using include files was introduced in\n# https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/commit/7e3ab02172dafdd524de5dd450a9732328622779\n# **************************************************************************\n# Nginx will fail a reload with [EMERG] without the presence of these files.\n\n# PLEASE READ UPDATED CONFIGURATION INSTRUCTIONS BEFORE USING THIS\n\n# Save this file as /usr/local/sbin/update-ngxblocker\n# cd /usr/local/sbin\n# sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/update-ngxblocker -O update-ngxblocker\n# Make it Executable chmod 700 /usr/local/sbin/update-ngxblocker\n\n# RUN THE UPDATE\n# Here our script runs, pulls the latest update, reloads nginx and emails you a notification\n\nEMAIL=\"you@example.com\"\nSEND_EMAIL=\"N\"\nSEND_MG_EMAIL=\"N\"\nSEND_EMAIL_UPDATE=\"N\"\n#Mailgun\nMG_API_KEY=\"key-yadayadayada\"\nMG_DOMAIN=\"mg.example.com\"\nMG_FROM=\"\"\nCONF_DIR=/etc/nginx/conf.d\nBOTS_DIR=/etc/nginx/bots.d\nINSTALLER=/usr/local/sbin/install-ngxblocker\nLOGGING=\"N\"\n\n##### end user configuration ##############################################################\n\nBOLDGREEN=\"\\033[1m\\033[32m\"\nBOLDMAGENTA=\"\\033[1m\\033[35m\"\nBOLDRED=\"\\033[1m\\033[31m\"\nBOLDYELLOW=\"\\033[1m\\033[33m\"\nBOLDWHITE=\"\\033[1m\\033[37m\"\nRESET=\"\\033[0m\"\nOS=$(uname -s)\nCURL_PATH=\"\"\n\nusage() {\n        local script=$(basename $0)\n        cat <<EOF\n$script: UPDATE Nginx Bad Bot Blocker blacklist in: [ $CONF_DIR ]\n\nUsage: $script [OPTIONS]\n        [ -c ] : NGINX conf directory          (default: $CONF_DIR)\n        [ -b ] : NGINX bots directory          (default: $BOTS_DIR)\n        [ -i ] : Change installer path         (default: $INSTALLER)\n        [ -r ] : Change repo url               (default: $REPO)\n        [ -e ] : Change @email address         (default: $EMAIL)\n        [ -g ] : Change @email address Mailgun (default: $EMAIL)\n        [ -d ] : Mailgun Domain\n        [ -a ] : Mailgun API Key\n        [ -f ] : Mailgun / Mail From Address\n        [ -m ] : Change mail (system alias)    (default: $EMAIL)\n        [ -n ] : Do not send email report      (default: $SEND_EMAIL)\n        [ -o ] : Only send email on update     (default: $SEND_EMAIL_UPDATE)\n        [ -q ] : Suppress non error messages\n        [ -v ] : Print blacklist version\n        [ -h ] : this help message\n\nExamples:\n $script                         (Download globalblacklist.conf to: $CONF_DIR)\n $script -c /my/custom/conf.d    (Download globalblacklist.conf to a custom location)\n $script -b /my/custom/bots.d    (Download globalblacklist.conf & update with your custom bots.d location)\n $script -e you@example.com    (Download globalblacklist.conf specifying your email address for the notification)\n $script -g you@example.com -d domain -a mailgunapikey -f fromaddress   (Download globalblacklist.conf specifying your email address for the notification sent via mailgun)\n $script -q -m webmaster         (Send mail to a system alias address & give less verbose messages for cron)\n $script -o -e you@example.com (Send mail notification only on updates)\n $script -i /path/to/install-ngxblocker (Use custom path to install-ngxblocker to update bots.d / conf.d include files)\nEOF\n        exit 0\n}\n\ncheck_version() {\n\tlocal remote_ver= remote_date= version= date= file=$CONF_DIR/globalblacklist.conf\n\tlocal tmp=$(mktemp) url=$REPO/conf.d/globalblacklist.conf range=\"145-345\"\n\n\tif [ -f $file ]; then\n\t\t# local version\n\t\tversion=$(grep \"Version:\" $file | ${SED_CMD} 's|^.*: V||g')\n\t\tdate=$(grep \"Updated:\" $file | ${SED_CMD} 's|^.*: ||g')\n\t\tprint_message \"\\nLOCAL Version: $BOLDWHITE$version$RESET\\n\"\n\t\tprint_message \"Updated: $date\\n\\n\"\n\t\t# remote version\n\t\t$CURL_PATH -s --limit-rate 5k -r $range --location $url -o $tmp\n\t\tremote_ver=$(grep \"Version:\" $tmp | ${SED_CMD} 's|^.*: V||g')\n\t\tremote_date=$(grep \"Updated:\" $tmp | ${SED_CMD} 's|^.*: ||g')\n\t\tprint_message \"REMOTE Version: $BOLDWHITE$remote_ver$RESET\\n\"\n\t\tprint_message \"Updated: $remote_date\\n\"\n\t\trm -f $tmp\n\n\t\tif [ \"$version\" != \"$remote_ver\" ]; then\n\t\t\tprint_message \"\\nUpdate Available => $BOLDMAGENTA$remote_ver$RESET\\n\\n\"\n\t\t\treturn 1\n\t\telse\n\t\t\tprint_message \"\\nLatest Blacklist Already Installed: $BOLDGREEN$version$RESET\\n\\n\"\n\t\tfi\n\telse\n\t\tprintf \"${BOLDRED}ERROR${RESET}: Missing '$file' => ${BOLDWHITE}running $INSTALLER:${RESET}\\n\"\n\t\t$INSTALL_INC\n\t\tif [ -f $file ]; then\n\t\t\tcheck_version\n\t\tfi\n\tfi\n}\n\ncheck_dirs() {\n\tlocal x= dirs=\"$*\"\n\n\tfor x in $dirs; do\n\t\tif [ ! -d $x ]; then\n\t\t\tprintf \"${BOLDRED}ERROR${RESET}: Missing directory: $x => ${BOLDWHITE}running $INSTALLER:${RESET}\\n\"\n\t\t\t$INSTALL_INC\n\t\tfi\n\tdone\n}\n\nfind_binary() {\n\tlocal x= path= binary=$1 bin_paths='/bin /usr/bin /usr/local/bin /sbin /usr/sbin /usr/local/sbin /root/bin /root/.bin'\n\n\tfor x in $bin_paths; do\n\t\tpath=\"$x/$binary\"\n\n\t\tif [ -x $path ]; then\n\t\t\techo $path\n\t\t\treturn\n\t\tfi\n\tdone\n}\n\nupdate_paths() {\n\t# variables in nginx include files not currently possible\n\t# updates hard coded bots.d path in globalblacklist.conf\n\tlocal blacklist=$1 include_paths= dir= x=\n\n\tif ! grep \"$BOTS_DIR\" $blacklist 1>/dev/null; then\n\t\tif [ -d $BOTS_DIR ]; then\n\t\t\tprintf \"${BOLDGREEN}Updating bots.d path${RESET}: ${BOLDWHITE}$BOTS_DIR => $blacklist${RESET}\\n\"\n\t\t\tinclude_paths=$(grep -E \"include /.*.conf;$\" $blacklist | awk '{print $2}' | tr -d ';')\n\n\t\t\tfor x in $include_paths; do\n\t\t\t\tdir=$(dirname $x)\n\t\t\t\t${SED_CMD} -i \"s|$dir|$BOTS_DIR|\" $blacklist\n\t\t\tdone\n\t\telse\n\t\t\tprintf \"${BOLDRED}ERROR${RESET}: '$BOTS_DIR' does not exist => ${BOLDWHITE}running $INSTALLER${RESET}.\\n\"\n\t\t\t$INSTALL_INC\n\t\t\tupdate_paths $blacklist\n\t\tfi\n\tfi\n}\n\nsanitize_path() {\n\techo $1 |tr -cd '[:alnum:] [=@=] [=.=] [=-=] [=/=] [=_=]' \\\n\t\t|tr -s '@.-/_' |awk '{print tolower($0)}'\n}\n\nsanitize_url() {\n\techo $1 |tr -cd '[:alnum:] [=:=] [=.=] [=-=] [=/=]' \\\n\t\t|tr -s ':.-' |awk '{print tolower($0)}'\n}\n\nsanitize_email() {\n\techo $1 |tr -cd '[:alnum:] [=@=] [=.=] [=-=] [=_=] [=+=]' \\\n\t\t|tr -s '@-_.+' |awk '{print tolower($0)}'\n}\n\ncheck_args() {\n\tlocal option=$1 type=$2 arg=$3\n\tlocal msg=\"ERROR: option '-$option' argument '$arg' requires:\"\n\n\tcase \"$type\" in\n\t        path)   if ! echo $arg | grep ^/ 1>/dev/null; then\n\t\t\t\tprintf \"$msg absolute path.\\n\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\t       email)   if ! echo $arg | grep -E ^[-+_\\.[:alnum:]]+@[-_\\.[:alnum:]]+ 1>/dev/null; then\n\t\t\t\tprintf \"$msg email@domain.com\\n\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\t         url)   if ! echo $arg | grep -E ^http[s]?://[0-9a-zA-Z-]+[.]+[/0-9a-zA-Z.]+ 1>/dev/null; then\n\t\t\t\tprintf \"$msg url => http[s]://the.url\\n\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\t      script)\tif [ ! -x $arg ]; then\n\t\t\t\tprintf \"$msg '$arg' is not executable / does not exist.\\n\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\t        none)   printf \"$msg argument.\\n\"; exit 1;;\n        esac\n}\n\ncheck_depends() {\n\t# global var is needed here, it is used in other places\n\tCURL_PATH=$(find_binary curl)\n\n\tcase $OS in\n\t\tLinux)\n\t\t\tSED_CMD=$(find_binary sed)\n\t\t\t;;\n\t\t*BSD)\n\t\t\tSED_CMD=$(find_binary gsed)\n\t\t\t;;\n\tesac\n\n\t# centos does not have which by default\n\tif [ -z $CURL_PATH ]; then\n\t\tprintf \"${BOLDRED}ERROR${RESET}: $0 requires: 'curl' => ${BOLDWHITE}cannot check remote version.${RESET}\\n\"\n\t\texit 1\n\tfi\n\n\t# install-ngxblocker downloads missing scripts / includes as part of the update process\n\tif [ ! -x $INSTALLER ]; then\n\t\tprintf \"${BOLDRED}ERROR${RESET}: $0 requires: '$INSTALLER' => ${BOLDWHITE}cannot update includes.${RESET}\\n\"\n\t\texit 1\n\tfi\n}\n\nprint_message() {\n\tlocal msg=\"$@\"\n\n\tif [ \"$VERBOSE\" != \"N\" ]; then\n\t\tprintf \"$msg\"\n\tfi\n}\n\nlog_output() {\n\tlocal logger=$(find_binary logger)\n\tlocal script=$(basename $0)\n\n\tif [ -n \"$logger\" ]; then\n\t\t# remove ansi color codes\n\t\t${SED_CMD} -i 's/\\x1b\\[[0-9;]*m//g' $EMAIL_REPORT\n\t\t# remove blank lines\n\t\t${SED_CMD} -i '/^\\s*$/d' $EMAIL_REPORT\n\t\t# log output\n\t\t$logger -t $script -f $EMAIL_REPORT 2>&1\n\t\tprint_message \"Output logged to syslog\\n\";\n\telse\n\t\tprint_message \"${BOLDRED}ERROR: cannot find logger${RESET}\\n\\n\";\n\tfi\n}\n\nsend_email() {\n\t# email report (mailx + ssmtp are enough to send emails)\n\tlocal mail_path=$(find_binary mail)\n\n\tif [ -n \"$mail_path\" ]; then\n\t\tprint_message \"Emailing report to: ${BOLDWHITE}$EMAIL${RESET}\\n\\n\";\n\n\t\t# remove ansi colour codes\n\t\t${SED_CMD} -i 's/\\x1b\\[[0-9;]*m//g' $EMAIL_REPORT\n\n\t\tif [ -n \"$MG_FROM\" ]; then\n\t\t\tcat $EMAIL_REPORT | $mail_path -f \"$MG_FROM\" -s \"Nginx Bad Bot Blocker Updated\" $EMAIL\n\t\telse\n\t\t\tcat $EMAIL_REPORT | $mail_path -s \"Nginx Bad Bot Blocker Updated\" $EMAIL\n\t\tfi\n\telse\n\t\tprint_message \"${BOLDYELLOW}WARN${RESET}: missing mail command => ${BOLDWHITE}disabling emails${RESET}.\\n\\n\"\n\tfi\n}\n\nsend_email_via_mailgun() {\n\tlocal report= subject= endpoint=\"https://api.mailgun.net/v3/$MG_DOMAIN/messages\"\n\n\techo \"Mailgunning report to: ${BOLDWHITE}$EMAIL${RESET}\\n\\n\";\n\t${SED_CMD} -i 's/\\x1b\\[[0-9;]*m//g' $EMAIL_REPORT\n\treport=\"$(cat $EMAIL_REPORT)\"\n\tsubject='Nginx Bad Bot Blocker Updated'\n\n\t$CURL_PATH -s --user api:$MG_API_KEY $endpoint -F from='botblocker<'$MG_FROM'>' -F to=$EMAIL -F subject=\"$subject\" -F text=\"$report\"\n}\n\nget_options() {\n\tlocal arg= opts=\n\n\twhile getopts :c:b:i:r:e:g:a:d:f:m:lnovqh opts \"$@\"\n\tdo\n\t\tif [ -n \"${OPTARG}\" ]; then\n\t\t\tcase \"$opts\" in\n\t\t\t\tr) arg=$(sanitize_url ${OPTARG});;\n\t\t\t\te) arg=$(sanitize_email ${OPTARG});;\n\t\t\t\tg) arg=$(sanitize_email ${OPTARG});;\n\t\t\t\t*) arg=$(sanitize_path ${OPTARG});;\n\t\t\tesac\n\t\tfi\n\n\t\tcase \"$opts\" in\n\t\t\tc) CONF_DIR=$arg; check_args $opts path $arg ;;\n\t\t\tb) BOTS_DIR=$arg; check_args $opts path $arg ;;\n\t\t\ti) INSTALLER=$arg; check_args $opts script $arg ;;\n\t\t\tr) REPO=$arg; check_args $opts url $arg ;;\n\t\t\te) EMAIL=$arg; SEND_EMAIL=Y; check_args $opts email $arg ;;\n\t\t\tg) EMAIL=$arg; SEND_MG_EMAIL=Y; check_args $opts email $arg ;;\n\t\t\ta) MG_API_KEY=$arg;;\n\t\t\td) MG_DOMAIN=$arg;;\n\t\t\tf) MG_FROM=$arg;;\n\t\t\tm) EMAIL=$arg; SEND_EMAIL=Y ;; # /etc/aliases no sanity checks\n\t\t\tl) LOGGING=Y ;;\n\t\t\tn) SEND_EMAIL=N ;;\n\t\t\to) SEND_EMAIL_UPDATE=Y ;;\n\t\t\tv) check_version; exit 0 ;;\n\t\t\tq) export VERBOSE=N ;;\n\t\t\th) usage ;;\n\t\t\t\\?) usage ;;\n\t\t\t:) check_args $OPTARG none none ;;\n\t\tesac\n\tdone\n\n\tINSTALL_INC=\"$INSTALLER -b $BOTS_DIR -c $CONF_DIR -x\"\n}\n\nmain() {\n\tlocal REPO=https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master\n\tlocal file=globalblacklist.conf remote_dir=conf.d url= output= update= status= tmp= retval=\n\tlocal nginx_path=$(find_binary nginx)\n\tlocal pidof_path=$(find_binary pidof)\n\n\t# require root\n\tif [ \"$(id -u)\" != \"0\" ]; then\n\t\techo \"This script must be run as root\" 1>&2\n\t\texit 1\n\tfi\n\n\t# parse command line\n\tget_options $@\n\tcheck_depends\n\tcheck_dirs $BOTS_DIR $CONF_DIR\n\turl=$REPO/$remote_dir/$file\n\toutput=$CONF_DIR/$file\n\n\t# check for updated blacklist\n\tcheck_version\n\tupdate=$?\n\n\tif [ $update = 1 ]; then\n\n\t\t# download globalblacklist update\n\t\ttmp=$(mktemp)\n\t\tmkdir -p $CONF_DIR\n\t\tlocal dl_msg=\"${BOLDWHITE}Downloading: $file \"\n\t\t$CURL_PATH --fail --connect-timeout 60 --retry 10 --retry-delay 5 -so $tmp $url\n\t\tretval=$?\n\n\t\tcase \"$retval\" in\n\t\t\t 0) print_message \"$dl_msg...${BOLDGREEN}[OK]${RESET}\\n\\n\"\n\t\t\t    mv $tmp $output\n\t\t\t    ;;\n\t\t\t22) printf \"$dl_msg...${BOLDRED}ERROR 404: $url${RESET}\\n\\n\";;\n\t\t\t28) printf \"$dl_msg...${BOLDRED}ERROR TIMEOUT: $url${RESET}\\n\\n\";;\n\t\t\t *) printf \"$dl_msg...${BOLDRED}ERROR CURL: ($retval){RESET}\\n\\n\";;\n\t\tesac\n\n\t\t# download new bots.d / conf.d files\n\t\t$INSTALL_INC\n\n\t\t# set custom bots.d path\n\t\tupdate_paths $output\n\n\t\t# re-read nginx configuration\n\t\tif [ $retval = 0 ]; then\n\n\t\t\t# use full paths to workaround crontabs without $PATH configured\n\t\t\tif $pidof_path nginx 1>/dev/null; then\n\n\t\t\t\t$nginx_path -s reload 2>&1 >/dev/null\n\n\t\t\t\tif [ $? = 0 ]; then\n\t\t\t\t\tstatus=\"${BOLDGREEN}[OK]${RESET}\"\n\t\t\t\t\tprint_message \"\\nReloading NGINX configuration...$status\\n\"\n\t\t\t\telse\n\t\t\t\t\tstatus=\"${BOLDRED}[FAILED]${RESET}\"\n\t\t\t\t\tprintf \"\\nReloading NGINX configuration...$status\\n\"\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\tprintf \"\\n${BOLDRED}NGINX is not running${RESET}: not reloading NGINX config\\n\"\n\t\t\tfi\n\t\telse\n\t\t\tprintf \"\\n${BOLDRED}Download failed${RESET}: not reloading NGINX config\\n\"\n\t\tfi\n\n\t\t# in silent mode print a single message after an update\n\t\tif [ \"$VERBOSE\" = \"N\" ]; then\n\t\t\tprintf \"NGINX Blacklist updated =>$(grep \"Version:\" $CONF_DIR/globalblacklist.conf | tr -d '#')\\n\"\n\t\tfi\n\n\t\t# enable update only email\n\t\tif [ \"$SEND_EMAIL_UPDATE\" = \"Y\" ] ; then\n\t\t\tSEND_EMAIL=Y\n\t\tfi\n\n\telse\n\t\t# set custom bots.d path\n\t\tupdate_paths $output\n\n\t\t# disable update only email\n\t\tif [ \"$SEND_EMAIL_UPDATE\" = \"Y\" ] ; then\n\t\t\tSEND_EMAIL=N\n\t\tfi\n\tfi\n\n\t# email report\n\tcase \"$SEND_EMAIL\" in\n\t\ty*|Y*) send_email;;\n\tesac\n\t# email report via mailgun\n\tcase \"$SEND_MG_EMAIL\" in\n\t\ty*|Y*) send_email_via_mailgun;;\n\tesac\n\n\t# log report\n\tcase \"$LOGGING\" in\n\t\ty*|Y*) log_output;;\n\tesac\n}\n\n## start ##\nEMAIL_REPORT=$(mktemp)\nmain $@ | tee $EMAIL_REPORT\nrm -f $EMAIL_REPORT\n\nexit $?\n\n# Add this as a cron to run daily / weekly as you like\n# Here's a sample CRON entry to update every day at 10pm\n# 00 22 * * * sudo /usr/local/sbin/update-ngxblocker -q\n\n# Here's another example to run it daily at midday using a command line switch to set the email address for the notification\n# 00 12 * * * sudo /usr/local/sbin/update-ngxblocker -e yourname@youremailprovider.com\n\n# Less verbose logging to a system alias mail address (root crontab)\n# 00 12 * * * /usr/local/sbin/update-ngxblocker -q -m webmaster\n\n# better logging for cron jobs:\n# https://serverfault.com/questions/137468/better-logging-for-cronjobs-send-cron-output-to-syslog\n"
        }
      ]
    }
  ]
}