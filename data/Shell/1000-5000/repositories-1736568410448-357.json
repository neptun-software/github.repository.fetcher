{
  "metadata": {
    "timestamp": 1736568410448,
    "page": 357,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yuru7/HackGen",
      "stars": 2054,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0419921875,
          "content": "bak/*\n!bak/.gitkeep\nwork/\nerror.log\nbuild/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 5.689453125,
          "content": "# Licensing\n\n- Source fonts are licensed under SIL OPEN FONT LICENSE Version 1.1.\n  For more information, see \"LICENSE_<FontName>\" file contained in the \"source\" directory.\n- \"白源/HackGen\" are licensed under SIL OPEN FONT LICENSE Version 1.1.\n- Other source code, such as generating scripts, will use the MIT license.\n\n## \"白源/HackGen\" licensing\n\nCopyright (c) 2019, Yuko OTAWARA. with Reserved Font Name \"白源\", \"HackGen\"\n\nThis Font Software is licensed under the SIL Open Font License, Version 1.1.\nThis license is copied below, and is also available with a FAQ at:\nhttps://scripts.sil.org/OFL\n\n\n-----------------------------------------------------------\nSIL OPEN FONT LICENSE Version 1.1 - 26 February 2007\n-----------------------------------------------------------\n\nPREAMBLE\nThe goals of the Open Font License (OFL) are to stimulate worldwide\ndevelopment of collaborative font projects, to support the font creation\nefforts of academic and linguistic communities, and to provide a free and\nopen framework in which fonts may be shared and improved in partnership\nwith others.\n\nThe OFL allows the licensed fonts to be used, studied, modified and\nredistributed freely as long as they are not sold by themselves. The\nfonts, including any derivative works, can be bundled, embedded, \nredistributed and/or sold with any software provided that any reserved\nnames are not used by derivative works. The fonts and derivatives,\nhowever, cannot be released under any other type of license. The\nrequirement for fonts to remain under this license does not apply\nto any document created using the fonts or their derivatives.\n\nDEFINITIONS\n\"Font Software\" refers to the set of files released by the Copyright\nHolder(s) under this license and clearly marked as such. This may\ninclude source files, build scripts and documentation.\n\n\"Reserved Font Name\" refers to any names specified as such after the\ncopyright statement(s).\n\n\"Original Version\" refers to the collection of Font Software components as\ndistributed by the Copyright Holder(s).\n\n\"Modified Version\" refers to any derivative made by adding to, deleting,\nor substituting -- in part or in whole -- any of the components of the\nOriginal Version, by changing formats or by porting the Font Software to a\nnew environment.\n\n\"Author\" refers to any designer, engineer, programmer, technical\nwriter or other person who contributed to the Font Software.\n\nPERMISSION & CONDITIONS\nPermission is hereby granted, free of charge, to any person obtaining\na copy of the Font Software, to use, study, copy, merge, embed, modify,\nredistribute, and sell modified and unmodified copies of the Font\nSoftware, subject to the following conditions:\n\n1) Neither the Font Software nor any of its individual components,\nin Original or Modified Versions, may be sold by itself.\n\n2) Original or Modified Versions of the Font Software may be bundled,\nredistributed and/or sold with any software, provided that each copy\ncontains the above copyright notice and this license. These can be\nincluded either as stand-alone text files, human-readable headers or\nin the appropriate machine-readable metadata fields within text or\nbinary files as long as those fields can be easily viewed by the user.\n\n3) No Modified Version of the Font Software may use the Reserved Font\nName(s) unless explicit written permission is granted by the corresponding\nCopyright Holder. This restriction only applies to the primary font name as\npresented to the users.\n\n4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font\nSoftware shall not be used to promote, endorse or advertise any\nModified Version, except to acknowledge the contribution(s) of the\nCopyright Holder(s) and the Author(s) or with their explicit written\npermission.\n\n5) The Font Software, modified or unmodified, in part or in whole,\nmust be distributed entirely under this license, and must not be\ndistributed under any other license. The requirement for fonts to\nremain under this license does not apply to any document created\nusing the Font Software.\n\nTERMINATION\nThis license becomes null and void if any of the above conditions are\nnot met.\n\nDISCLAIMER\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\nOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nINCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM\nOTHER DEALINGS IN THE FONT SOFTWARE.\n\n## Other source licensing (MIT)\n\nCopyright (c) 2019 Yuko OTAWARA\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.6767578125,
          "content": "# プログラミングフォント 白源 (はくげん／HackGen)\n\nHackGen is a composite font of Hack and GenJyuu-Gothic.\n\n白源 (はくげん／HackGen) は、プログラミング向け英文フォント Hack と、源ノ角ゴシックの派生フォント源柔ゴシックを合成したプログラミングフォントです。  \n\n![image](https://github.com/yuru7/HackGen/assets/13458509/ea0c0dae-58ea-4712-8ed2-570274b87039)\n\n2つのフォントをただ合成しただけではなく、一部の独自改変により更なる視認性向上を図っています。\n\n* 文字幅 半角1:全角2 の正統派な等幅フォント (文字幅 半角3:全角5 バージョンも同梱)\n* Hack 由来の読みやすく、しっとりとした印象の英字\n* 源柔ゴシック由来の引き締まりつつ、丸ゴシックの風合いのあるカナ文字・漢字 (第一～第四水準漢字まで対応)\n* 全角スペースの可視化、パイプ記号 `|` の破断線化 (Ricty Discord インスパイア)\n* 英字部分にはヒンティングを付与することで明瞭な表示\n* Powerline 記号の表示\n* その他、判読性の向上\n  * 濁点、半濁点を通常より大きくし、表示サイズが小さい場合でも区別しやすくした\n  * 長音記号 `ー` と漢数字の1 `一` にアクセントを付け区別しやすくした\n  * カタカナ `ヘ` にアクセントを付け、ひらがなと区別しやすくした\n\n> 💡 その他、公開中のプログラミングフォント\n> - 日本語文字に IBM Plex Sans JP、英数字部分に IBM Plex Mono を使った [**PlemolJP (プレモル ジェイピー)**](https://github.com/yuru7/PlemolJP)\n> - 日本語文字にBIZ UDゴシック、英数字部分に JetBrains Mono を使った [**UDEV Gothic**](https://github.com/yuru7/udev-gothic)\n> - 日本語文字に源真ゴシック、英数字部分に Fira Mono を使った [**Firge (ファージ)**](https://github.com/yuru7/Firge)\n\n|**白源 通常版**|**白源 半角3:全角5 版**|\n|:------------------------:|:------------------------:|\n|![hackgen](https://user-images.githubusercontent.com/13458509/133928601-cb1d3e00-6c4b-4ce5-a945-44ae2baa81e0.png)|![hackgen35](https://user-images.githubusercontent.com/13458509/133928624-77ed3d0b-8e6c-46c1-89e1-3e85f6d0c215.png)|\n\n## フォントファミリーの種類\n\n**※いずれのフォントにも Powerline 記号が含まれています。**\n\n|**フォント ファミリー**|**説明**|\n|:------------:|:---|\n|**HackGen**|文字幅比率「半角1:全角2」の通常版の白源。主にASCIIコードの英数字記号に Hack ベースの字体を使い、その他の記号類やかな文字・漢字を源柔ゴシックベースにしている|\n|**HackGen Console**|Hack ベースの字体を除外せずに全て適用したフォントファミリー。矢印記号などの多くの記号が半角で表示されるため、コンソールでの利用や記号類は可能な限り半角で表示したい人にオススメ|\n|**HackGen35**|通常版の白源の文字幅比率を「半角3:全角5」にしたフォントファミリー。英数字が通常版の白源よりも大きく表示される。日本語が少ない文書やコードの場合にはこちらの方が読みやすいと感じるかもしれない|\n|**HackGen35 Console**|HackGen Console  の文字幅比率を 半角3:全角5 にしたフォントファミリー|\n\n|**HackGen 系統**|**HackGen35 系統**|\n|:---:|:---:|\n|`HackGen`<br/>![hackgen](https://github.com/yuru7/HackGen/raw/image/hikaku_hackgen.png)|`HackGen35`<br/>![hackgen35](https://github.com/yuru7/HackGen/raw/image/hikaku_hackgen35.png)|\n|`HackGen Console`<br/>![hackgen console](https://github.com/yuru7/HackGen/raw/image/hikaku_hackgen-console.png)|`HackGen35 Console`<br/>![hackgen35 console](https://github.com/yuru7/HackGen/raw/image/hikaku_hackgen35-console.png)|\n\nまた、追加で提供している `HackGen NF` `HackGen35 NF` フォントファミリーには、[Nerd Fonts](https://www.nerdfonts.com/) を追加合成しており、Font Awesome をはじめとした多くのアイコンフォントが表示できるようになります。  \n\n## フォントのインストール\n\nビルド済みの ttf ファイルは GitHub のリリースページからダウンロードできます。  \nダウンロードした ttf ファイルは、各 OS に応じた手順でインストールしてください。\n\n[Release - HackGen](https://github.com/yuru7/HackGen/releases/latest)\n\n* `HackGen_バージョン.zip` は従来の HackGen/HackGen35\n* `HackGen_NF_バージョン.zip` は従来の HackGen/HackGen35 に [Nerd Fonts](https://www.nerdfonts.com/) を追加合成したもの\n\n### Homebrew によるフォントのインストール\n\nMac の Homebrew ユーザーは以下のコマンドでもインストールすることができます。  \n※Homebrew リポジトリに追加してくださったのはユーザーさんなので、使用方法などをリポジトリオーナーはサポートできません。悪しからずご了承ください。\n\n```\n$ brew install font-hackgen\n$ brew install font-hackgen-nerd\n```\n\n### Chocolatey によるフォントのインストール\n\nWindows の [Chocolatey](https://chocolatey.org/) ユーザーは以下のコマンドでもインストールすることができます。  \n[font-hackgen](https://chocolatey.org/packages/font-hackgen) が Nerd Fonts を含まないフォント、[font-hackgen-nerd](https://chocolatey.org/packages/font-hackgen-nerd) が Nerd Fonts を含むフォントです。  \n※インストールに失敗する場合は、[パッケージのリポジトリ](https://github.com/kai2nenobu/chocolatey-packages/)にissueを投稿してください。\n\n```\n> choco install font-hackgen\n> choco install font-hackgen-nerd\n```\n\n## ビルド環境\n\nHackGen は以下の環境でビルドしています。\n\n* OS: Ubuntu 20.04.2 (Kubuntu)\n* Tools\n  * ttfautohint: 1.8.3\n  * fonttools: 3.44.0\n  * fontforge: 20201107\n\n### ビルドツールのインストール方法と注意点\n\n* ttfautohint: `sudo apt install ttfautohint`\n* fonttools: Python 2 の pip で `sudo pip2 install fonttools`\n  * fonttools に含まれるサブツール `pyftmerge` と `ttx` をコマンドとして利用しているため、`sudo` を使ってシステム全体で使えるようにする\n  * Python 3 の pip を使ったものは fonttools 4.13.0 がインストールされる (2020/08/01 時点)。 fonttools 4.13.0 では post テーブルの構造が変わってしまうため、macOS 10.15 にてインストール不可となる ([#12](https://github.com/yuru7/HackGen/issues/12))\n* fontforge: [公式サイト](https://fontforge.org/en-US/downloads/) よりダウンロード\n"
        },
        {
          "name": "bak",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmap_patch.sh",
          "type": "blob",
          "size": 2.40625,
          "content": "#!/bin/bash\n\nBASE_DIR=$(cd $(dirname $0); pwd)\nPREFIX=\"$1\"\n\nFONT_PATTERN=${PREFIX}'HackGen[^3]*.ttf'\nFONT35_PATTERN=${PREFIX}'HackGen35*.ttf'\n\nCMAP_MASTER=\"${BASE_DIR}/source/cmap_format_14_master\"\nTMP_CMAP_MASTER='tmp_cmap_format_14_master'\nTMP_TTX='tmp_cmap_format_14'\nGENERATED_CMAP='gen_cmap'\n\nfunction buildCmap() {\n  ttx_path=\"$1\"\n  # cmapマスタの作成\n  (\n    awk 'NR > 1 {print}' \"$CMAP_MASTER\" | while read line\n    do\n      out_name=$(echo \"$line\" | awk -F, '{print $4}')\n      grep_out_name=$(egrep -m1 \"name=\\\"${out_name}[#\\\"]\" \"$ttx_path\" | perl -pe 's/^.+name=\"([^\"]+?)\".+/$1/')\n      if [ -z \"$grep_out_name\" ]; then\n        continue\n      fi\n      echo \"$line\" | awk -F, '{print $1 \",\" $2 \",\" $3 \",\" \"'$grep_out_name'\"}'\n    done\n  ) > \"$TMP_CMAP_MASTER\"\n\n  # 追加するcmapタグを一時ファイルに書き出し\n  awk -F, '\n    BEGIN {print \"<cmap_format_14 platformID=\\\"0\\\" platEncID=\\\"5\\\">\"}\n    NR > 1 && $4 != \"\" {print \"<map uv=\\\"\" $1 \"\\\" uvs=\\\"\" $3 \"\\\" name=\\\"\" $4 \"\\\"/>\"}\n    END {print \"</cmap_format_14></cmap>\"}\n  ' \"$TMP_CMAP_MASTER\" > \"$TMP_TTX\"\n\n  # 適用するttxファイルを作成\n  (\n    egrep -v 'cmap_format_14| uvs=' \"$ttx_path\" | awk '/<\\/cmap>/ {exit} {print}'\n    cat \"$TMP_TTX\"\n    awk 'BEGIN {prFlag = 0} /<post>/ {prFlag = 1} prFlag == 1 {print}' \"$ttx_path\"\n  ) > $GENERATED_CMAP\n}\n\nfunction proc() {\n  font=\"$1\"\n\n  if [ ! -f \"$font\" ]; then\n    echo \"File not found: $font\"\n    return\n  fi\n\n  ttx -t cmap -t post $font\n  mv ${font} ${font}_orig\n  buildCmap \"${font%%.ttf}.ttx\"\n  ttx -o ${font} -m ${font}_orig $GENERATED_CMAP\n}\n\necho '### Start cmap_patch ###'\n\nfont_list=$(ls ${BASE_DIR}/${FONT_PATTERN} ${BASE_DIR}/${FONT35_PATTERN})\n\nfor f in $font_list; do\n  echo \"Start cmap_patch: $f\"\n  (\n    # 並列処理時に競合しないように各ファイル名に接頭辞を付ける（これら変数の変更はこのサブシェル下でのみ有効）\n    file_suffix=\"_$(basename \"${f%%.ttf}\")\"\n    TMP_CMAP_MASTER+=$file_suffix\n    TMP_TTX+=$file_suffix\n    GENERATED_CMAP+=$file_suffix\n\n    proc \"$f\"\n\n  ) > \"${f}.cmap_patch_output\" 2>&1 &\ndone\n\nwait\n\n# 並列処理からの出力内容をまとめて出力\nfor f in $font_list; do\n  output_filename=\"${f}.cmap_patch_output\"\n  echo \"$output_filename\" | sed -r \"s/(.+)\\.cmap_patch_output/# cmap_patch output: \\1/\"\n  cat \"$output_filename\"\n  rm \"$output_filename\"\ndone\n\nrm -f \"$GENERATED_CMAP\"_* \"$TMP_CMAP_MASTER\"_* \"$TMP_TTX\"_* *.ttx *.ttf_orig\n"
        },
        {
          "name": "copyright.sh",
          "type": "blob",
          "size": 0.6318359375,
          "content": "#!/bin/bash\n\nBASE_DIR=\"$(cd $(dirname $0); pwd)\"\n\nPREFIX=\"$1\"\n\nFONT_PATTERN=${PREFIX}'HackGen*.ttf'\n\nCOPYRIGHT='[Hack]\nCopyright (c) 2018 Source Foundry Authors\n\n[Gen Jyuu Gothic]\nCopyright (c) 2015 JIKASEI FONT KOUBOU\n\n[Nerd Fonts]\nCopyright (c) 2014, Ryan L McIntyre (https://ryanlmcintyre.com).\n\n[HackGen]\nCopyright (c) 2019, Yuko OTAWARA'\n\nfor P in ${BASE_DIR}/${FONT_PATTERN}\ndo\n  ttx -t name \"$P\"\n  mv \"${P%%.ttf}.ttx\" ${BASE_DIR}/tmp.ttx\n  cat ${BASE_DIR}/tmp.ttx | perl -pe \"s?###COPYRIGHT###?$COPYRIGHT?\" > \"${P%%.ttf}.ttx\"\n\n  mv \"$P\" \"${P}_orig\"\n  ttx -m \"${P}_orig\" \"${P%%.ttf}.ttx\"\ndone\n\nrm -f \"${BASE_DIR}/\"*.ttx \"${BASE_DIR}/\"*_orig\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "hackgen_generator.sh",
          "type": "blob",
          "size": 90.3642578125,
          "content": "#!/bin/sh\n\nbase_dir=$(cd $(dirname $0); pwd)\n# HackGen Generator\nhackgen_version=\"$2\"\n\n# Set familyname\nfamilyname_preffix=\"$1\"\nhackgen_familyname=${familyname_preffix}\"HackGen\"\nhackgen_familyname_suffix=\"\"\nhackgen35_familyname=${hackgen_familyname}\"35\"\nhackgen35_familyname_suffix=\"\"\nhackgen_console_suffix=\"Console\"\nhackgen_nerd_suffix=\"NF\"\nhackgen_evacuation_nerd_familyname=\"Evacuation${hackgen_familyname}Nerd\"\nhackgen35_evacuation_nerd_familyname=\"Evacuation${hackgen35_familyname}Nerd\"\nhackgen_evacuation_symbol_familyname=${hackgen_familyname}\"EvacuationSymbol\"\nhackgen35_evacuation_symbol_familyname=${hackgen35_familyname}\"EvacuationSymbol\"\nhackgen_box_drawing_light_familyname=${hackgen_familyname}\"BoxDrawingLight\"\nhackgen35_box_drawing_light_familyname=${hackgen35_familyname}\"BoxDrawingLight\"\n\ncopyright='###COPYRIGHT###'\n\n# Set ascent and descent (line width parameters)\nhackgen_ascent=938\nhackgen_descent=210\nhackgen35_ascent=951\nhackgen35_descent=243\n\nem_ascent=881\nem_descent=143\nem=$(($em_ascent + $em_descent))\n\ntypo_line_gap=80\n\nhack_width=616\ngenjyuu_width=1024\n\nhackgen_half_width=540\nhackgen_full_width=$((${hackgen_half_width} * 2))\nhack_shrink_x=88\nhack_shrink_y=97\n\nhackgen35_half_width=618\nhackgen35_full_width=$((${hackgen35_half_width} * 5 / 3))\n\n# Set path to fontforge command\nfontforge_command=\"fontforge\"\nttfautohint_command=\"ttfautohint\"\n\n# Set redirection of stderr\nredirection_stderr=\"/dev/null\"\n\n# Set fonts directories used in auto flag\nfonts_directories=\"${base_dir}/source/\"\n\n# Set zenkaku space glyph\nzenkaku_space_glyph=\"\"\n\n# Set flags\nleaving_tmp_flag=\"false\"\nfullwidth_ambiguous_flag=\"true\"\nscaling_down_flag=\"true\"\n\n# Set non-Discorded characters\nnon_discorded_characters=\"\"\n\n# Set filenames\nhack_regular_src=\"Hack-Regular.ttf\"\nhack_bold_src=\"Hack-Bold.ttf\"\nmod_arrow_regular_src=\"modify_arrow_Hack-Regular.sfd\"\nmod_arrow_bold_src=\"modify_arrow_Hack-Bold.sfd\"\nnerd_patched_hack_regular_src=\"HackNerdFont-Regular.ttf\"\nnerd_patched_hack_bold_src=\"HackNerdFont-Bold.ttf\"\ngenjyuu_regular_src=\"GenJyuuGothicL-Monospace-Regular.ttf\"\ngenjyuu_bold_src=\"GenJyuuGothicL-Monospace-Bold.ttf\"\n\nfix_genjyuu_bold_src=\"fix_GenJyuuGothicL-Monospace-Bold.sfd\"\n\nmodified_hack_material_generator=\"modified_hack_material_generator.pe\"\nmodified_hack_material_regular=\"Modified-Hack-Material-Regular.sfd\"\nmodified_hack_material_bold=\"Modified-Hack-Material-Bold.sfd\"\n\nmodified_hack_powerline_generator=\"modified_hack_powerline_generator.pe\"\nmodified_hack_powerline_regular=\"Modified-Hack-Powerline-Regular.sfd\"\nmodified_hack_powerline_bold=\"Modified-Hack-Powerline-Bold.sfd\"\n\nmodified_hack35_powerline_generator=\"modified_hack35_powerline_generator.pe\"\nmodified_hack35_powerline_regular=\"Modified-Hack35-Powerline-Regular.sfd\"\nmodified_hack35_powerline_bold=\"Modified-Hack35-Powerline-Bold.sfd\"\n\nmodified_hack_box_drawing_light_generator=\"modified_hack_box_drawing_light_generator.pe\"\nmodified_hack_box_drawing_light_regular=\"Modified-Hack-box_drawing_light-Regular.sfd\"\nmodified_hack_box_drawing_light_bold=\"Modified-Hack-box_drawing_light-Bold.sfd\"\n\nmodified_hack35_box_drawing_light_generator=\"modified_hack35_box_drawing_light_generator.pe\"\nmodified_hack35_box_drawing_light_regular=\"Modified-Hack35-box_drawing_light-Regular.sfd\"\nmodified_hack35_box_drawing_light_bold=\"Modified-Hack35-box_drawing_light-Bold.sfd\"\n\nmodified_hack_evacuate_from_hinting_generator=\"modified_hack_evacuate_from_hinting_generator.pe\"\nmodified_hack_evacuate_from_hinting_regular=\"Modified-Hack-Evacuate_From_Hinting-Regular.sfd\"\nmodified_hack_evacuate_from_hinting_bold=\"Modified-Hack-Evacuate_From_Hinting-Bold.sfd\"\n\nmodified_hack35_evacuate_from_hinting_generator=\"modified_hack35_evacuate_from_hinting_generator.pe\"\nmodified_hack35_evacuate_from_hinting_regular=\"Modified-Hack35-Evacuate_From_Hinting-Regular.sfd\"\nmodified_hack35_evacuate_from_hinting_bold=\"Modified-Hack35-Evacuate_From_Hinting-Bold.sfd\"\n\nmodified_hack_console_generator=\"modified_hack_console_generator.pe\"\nmodified_hack_console_regular=\"Modified-Hack-Console-Regular.sfd\"\nmodified_hack_console_bold=\"Modified-Hack-Console-Bold.sfd\"\n\nmodified_hack35_console_generator=\"modified_hack35_console_generator.pe\"\nmodified_hack35_console_regular=\"Modified-Hack35-Console-Regular.sfd\"\nmodified_hack35_console_bold=\"Modified-Hack35-Console-Bold.sfd\"\n\nmodified_hack_generator=\"modified_hack_generator.pe\"\nmodified_hack_regular=\"Modified-Hack-Regular.sfd\"\nmodified_hack_bold=\"Modified-Hack-Bold.sfd\"\n\nmodified_hack35_generator=\"modified_hack35_generator.pe\"\nmodified_hack35_regular=\"Modified-Hack35-Regular.sfd\"\nmodified_hack35_bold=\"Modified-Hack35-Bold.sfd\"\n\nmodified_genjyuu_generator=\"modified_genjyuu_generator.pe\"\nmodified_genjyuu_regular=\"Modified-GenJyuuGothicL-Monospace-regular.sfd\"\nmodified_genjyuu_bold=\"Modified-GenJyuuGothicL-Monospace-bold.sfd\"\n\nmodified_genjyuu35_generator=\"modified_genjyuu35_generator.pe\"\nmodified_genjyuu35_regular=\"Modified-GenJyuuGothicL35-Monospace-regular.sfd\"\nmodified_genjyuu35_bold=\"Modified-GenJyuuGothicL35-Monospace-bold.sfd\"\n\nmodified_genjyuu_console_generator=\"modified_genjyuu_console_generator.pe\"\nmodified_genjyuu_console_regular=\"Modified-GenJyuuGothicL-Monospace-regular_console.sfd\"\nmodified_genjyuu_console_bold=\"Modified-GenJyuuGothicL-Monospace-bold_console.sfd\"\n\nmodified_genjyuu35_console_generator=\"modified_genjyuu35_console_generator.pe\"\nmodified_genjyuu35_console_regular=\"Modified-GenJyuuGothicL35-Monospace-regular_console.sfd\"\nmodified_genjyuu35_console_bold=\"Modified-GenJyuuGothicL35-Monospace-bold_console.sfd\"\n\nmodified_hackgen_nerd_console_symbol_generator=\"modified_hackgen_nerd_console_symbol_generator.pe\"\nmodified_hackgen_nerd_console_symbol_regular=\"Modified-HackGen-Nerd-Console-Symbol-Regular.sfd\"\nmodified_hackgen_nerd_console_symbol_bold=\"Modified-HackGen-Nerd-Console-Symbol-Bold.sfd\"\n\nmodified_hackgen35_nerd_console_symbol_generator=\"modified_hackgen35_nerd_console_symbol_generator.pe\"\nmodified_hackgen35_nerd_console_symbol_regular=\"Modified-HackGen35-Nerd-Console-Symbol-Regular.sfd\"\nmodified_hackgen35_nerd_console_symbol_bold=\"Modified-HackGen35-Nerd-Console-Symbol-Bold.sfd\"\n\nhackgen_generator=\"hackgen_generator.pe\"\nhackgen_console_generator=\"hackgen_console_generator.pe\"\nhackgen_evacuate_from_hinting_generator=\"hackgen_evacuate_from_hinting_generator.pe\"\nhackgen_box_drawing_light_generator=\"hackgen_box_drawing_light_generator.pe\"\nhackgen_nerd_console_symbol_generator=\"hackgen_nerd_console_symbol_generator.pe\"\n\nhackgen35_generator=\"hackgen35_generator.pe\"\nhackgen35_console_generator=\"hackgen35_console_generator.pe\"\nhackgen35_evacuate_from_hinting_generator=\"hackgen35_evacuate_from_hinting_generator.pe\"\nhackgen35_box_drawing_light_generator=\"hackgen35_box_drawing_light_generator.pe\"\nhackgen35_nerd_console_symbol_generator=\"hackgen35_nerd_console_symbol_generator.pe\"\n\n# Get input fonts\ntmp=\"\"\nfor i in $fonts_directories\ndo\n    [ -d \"${i}\" ] && tmp=\"${tmp} ${i}\"\ndone\nfonts_directories=\"${tmp}\"\n# Search Hack\ninput_hack_regular=`find $fonts_directories -follow -name \"$hack_regular_src\" | head -n 1`\ninput_hack_bold=`find $fonts_directories -follow -name \"$hack_bold_src\" | head -n 1`\ninput_mod_arrow_regular=`find $fonts_directories -follow -name \"$mod_arrow_regular_src\" | head -n 1`\ninput_mod_arrow_bold=`find $fonts_directories -follow -name \"$mod_arrow_bold_src\" | head -n 1`\n\nif [ -z \"${input_hack_regular}\" -o -z \"${input_hack_bold}\" ]\nthen\n  echo \"Error: $hack_regular_src and/or $hack_bold_src not found\" >&2\n  exit 1\nfi\nif [ -z \"${input_mod_arrow_regular}\" -o -z \"${input_mod_arrow_bold}\" ]\nthen\n  echo \"Error: $input_mod_arrow_regular and/or $input_mod_arrow_bold not found\" >&2\n  exit 1\nfi\n\n# Search GenJyuuGothicL\ninput_genjyuu_regular=`find $fonts_directories -follow -iname \"$genjyuu_regular_src\" | head -n 1`\ninput_genjyuu_bold=`find $fonts_directories -follow -iname \"$genjyuu_bold_src\"    | head -n 1`\nif [ -z \"${input_genjyuu_regular}\" -o -z \"${input_genjyuu_bold}\" ]\nthen\n  echo \"Error: $genjyuu_regular_src and/or $genjyuu_bold_src not found\" >&2\n  exit 1\nfi\n\ninput_fix_genjyuu_bold=`find $fonts_directories -follow -iname \"$fix_genjyuu_bold_src\" | head -n 1`\n\n# Search improved legibility file\ninput_improved_legibility_regular=`find $fonts_directories -follow -iname improved_legibility-Regular.sfd | head -n 1`\ninput_improved_legibility_bold=`find $fonts_directories -follow -iname improved_legibility-Bold.sfd    | head -n 1`\n\n# Search REIWA\ninput_reiwa_regular=`find $fonts_directories -follow -iname reiwa-Regular.sfd | head -n 1`\ninput_reiwa_bold=`find $fonts_directories -follow -iname reiwa-Bold.sfd    | head -n 1`\n\n# Search Ideographic Space\ninput_ideographic_space=`find $fonts_directories -follow -iname Ideographic_Space.sfd | head -n 1`\n\n# Search nerd patched hack\ninput_nerd_patched_hack_regular=`find $fonts_directories -follow -iname \"$nerd_patched_hack_regular_src\" | head -n 1`\ninput_nerd_patched_hack_bold=`find $fonts_directories -follow -iname \"$nerd_patched_hack_bold_src\"    | head -n 1`\n\n# Check filename\n[ \"$(basename $input_hack_regular)\" != \"$hack_regular_src\" ] &&\n  echo \"Warning: ${input_hack_regular} does not seem to be Hack Regular\" >&2\n[ \"$(basename $input_hack_bold)\" != \"$hack_bold_src\" ] &&\n  echo \"Warning: ${input_hack_regular} does not seem to be Hack Bold\" >&2\n[ \"$(basename $input_genjyuu_regular)\" != \"$genjyuu_regular_src\" ] &&\n  echo \"Warning: ${input_genjyuu_regular} does not seem to be GenJyuuGothicL Regular\" >&2\n[ \"$(basename $input_genjyuu_bold)\" != \"$genjyuu_bold_src\" ] &&\n  echo \"Warning: ${input_genjyuu_bold} does not seem to be GenJyuuGothicL Bold\" >&2\n\n# Check fontforge existance\nif ! which $fontforge_command > /dev/null 2>&1\nthen\n  echo \"Error: ${fontforge_command} command not found\" >&2\n  exit 1\nfi\n\n# Make temporary directory\nif [ -w \"/tmp\" -a \"${leaving_tmp_flag}\" = \"false\" ]\nthen\n  tmpdir=`mktemp -d /tmp/hackgen_generator_tmpdir.XXXXXX` || exit 2\nelse\n  tmpdir=`mktemp -d ./hackgen_generator_tmpdir.XXXXXX`    || exit 2\nfi\n\n# Remove temporary directory by trapping\nif [ \"${leaving_tmp_flag}\" = \"false\" ]\nthen\n  trap \"if [ -d \\\"$tmpdir\\\" ]; then echo 'Remove temporary files'; rm -rf $tmpdir; echo 'Abnormally terminated'; fi; exit 3\" HUP INT QUIT\n  trap \"if [ -d \\\"$tmpdir\\\" ]; then echo 'Remove temporary files'; rm -rf $tmpdir; echo 'Abnormally terminated'; fi\" EXIT\nelse\n  trap \"echo 'Abnormally terminated'; exit 3\" HUP INT QUIT\nfi\n\n# Powerline フォント (Hack に標準で含まれている)\npowerline_symbols='\n  SelectMore(0ue0a0, 0ue0a2)\n  SelectMore(0ue0b0, 0ue0b3)\n'\n\n# 拡張版 Powerline フォント\npowerline_extra_symbols='\n  SelectMore(0ue0a3)\n  SelectMore(0ue0b4, 0ue0c8)\n  SelectMore(0ue0ca)\n  SelectMore(0ue0cc, 0ue0d7)\n'\n\n# Nerd Fonts から適用するグリフ\nselect_nerd_symbols=\"\n  # Seti-UI + Custom\n  SelectMore(0uE5FA, 0uE6B7)\n  # Devicons\n  SelectMore(0uE700, 0uE8E3)\n  # Font Awesome\n  SelectMore(0uED00, 0uF2FF)\n  # Font Awesome Extension\n  SelectMore(0uE200, 0uE2A9)\n  # Material Design\n  SelectMore(0uF0001, 0uF1AF0)\n  # Weather\n  SelectMore(0uE300, 0uE3E3)\n  # Octicons\n  SelectMore(0uF400, 0uF533)\n  SelectMore(0u2665)\n  SelectMore(0u26A1)\n  # IEC Power Symbols\n  SelectMore(0u23FB, 0u23FE)\n  SelectMore(0u2B58)\n  # Font Logos\n  SelectMore(0uF300, 0uF381)\n  # Pomicons\n  SelectMore(0uE000, 0uE00A)\n  # Codicons\n  SelectMore(0uEA60, 0uEC1E)\n  # Other\n  SelectMore(0u2630)\n\"\n\n# 罫線記号\nbox_drawing_light_symbols=\"\n  SelectMore(0u2500, 0u259f)\n\"\n\n# ヒンティング処理から除外するグリフ\nselect_evacuate_from_hinting=\"\n  ${powerline_symbols}\n  # Brackets Peace\n  SelectMore(0u239B, 0u23AE)\n\"\n\n# console 版と通常版の Hack から合成するグリフ差分\nselect_glyph_is_not_console=\"\n  ${box_drawing_light_symbols}\n\n  # 記号\n  SelectMore(0u00a1, 0u00a5)\n  SelectMore(0u00a7, 0u0522)\n  SelectMore(0u0e3f)\n  SelectMore(0u2010, 0u2021)\n  SelectMore(0u2024, 0u2026)\n  SelectMore(0u202f, 0u204b)\n  SelectMore(0u2070, 0u208e)\n  SelectMore(0u20a0, 0u20b9)\n  SelectMore(0u2116, 0u215f)\n  SelectMore(0u2200, 0u2215)\n  SelectMore(0u221a, 0u222d)\n\n  # 矢印\n  SelectMore(0u2190, 0u2199)\n  SelectMore(0u21a8)\n  SelectMore(0u21b0, 0u21b5)\n  SelectMore(0u21b8, 0u21b9)\n  SelectMore(0u21c4, 0u21cc)\n  SelectMore(0u21d0, 0u21d9)\n  SelectMore(0u21e4, 0u21ed)\n  SelectMore(0u21f5)\n  SelectMore(0u27a1)\n  SelectMore(0u2b05, 0u2b07)\n\n  # 数学記号\n  SelectMore(0u2234, 0u2237)\n  SelectMore(0u223c, 0u223d)\n  SelectMore(0u2242, 0u2243)\n  SelectMore(0u2245)\n  SelectMore(0u2248)\n  SelectMore(0u224c)\n  SelectMore(0u2250, 0u2253)\n  SelectMore(0u2260)\n  SelectMore(0u2260, 0u2262)\n  SelectMore(0u2264, 0u2267)\n  SelectMore(0u226a, 0u226b)\n  SelectMore(0u226e, 0u226f)\n  SelectMore(0u2272, 0u2273)\n  SelectMore(0u2276, 0u2277)\n  SelectMore(0u2282, 0u228b)\n  SelectMore(0u2295, 0u2299)\n  SelectMore(0u229d)\n  SelectMore(0u22a0)\n  SelectMore(0u22a2, 0u22a5)\n  SelectMore(0u22bb, 0u22bd)\n  SelectMore(0u22bf, 0u22c3)\n  SelectMore(0u22c5)\n  SelectMore(0u22da, 0u22db)\n  SelectMore(0u22ee, 0u22ef)\n\n  # 罫線、図形\n  SelectMore(0u2500, 0u25af)\n  SelectMore(0u25b1, 0u25b3)\n  SelectMore(0u25b6, 0u25b7)\n  SelectMore(0u25ba, 0u25bd)\n  SelectMore(0u25c0, 0u25c1)\n  SelectMore(0u25c4, 0u25cc)\n  SelectMore(0u25ce, 0u25d3)\n  SelectMore(0u25d8, 0u25d9)\n  SelectMore(0u25e2, 0u25e5)\n  SelectMore(0u25af)\n  SelectMore(0u25e6)\n  SelectMore(0u25ef)\n  SelectMore(0u266a)\n  SelectMore(0u2756)\n  SelectMore(0u29fa, 0u29fb)\n  SelectMore(0u2A2F)\n  SelectMore(0u2b1a)\n\n  # 一部 Hack ベースにする\n  ## 各エディタの可視化文字対策\n  SelectFewer(0u2022)\n  SelectFewer(0u00b7)\n  SelectFewer(0u2024)\n  SelectFewer(0u2219)\n  SelectFewer(0u25d8)\n  SelectFewer(0u25e6)\n  ## Cent Sign, Pound Sign, Yen Sign\n  SelectFewer(0u00A2)\n  SelectFewer(0u00A3)\n  SelectFewer(0u00A5)\n  \"\n\n########################################\n# Generate script for modified Hack Material\n########################################\n\ncat > ${tmpdir}/${modified_hack_material_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate modified Hack Material\")\n\n# Set parameters\ninput_list  = [\"${input_hack_regular}\",    \"${input_hack_bold}\"]\ninput_mod_arrow_list  = [\"${input_mod_arrow_regular}\",    \"${input_mod_arrow_bold}\"]\noutput_list = [\"${modified_hack_material_regular}\", \"${modified_hack_material_bold}\"]\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open Hack\n  Print(\"Open \" + input_list[i])\n  Open(input_list[i])\n\n  # 修正した矢印記号グリフの取り込み\n  Select(0u2190, 0u2199)\n  SelectMore(0u21E0, 0u21E3) # Dashed Arrow\n  SelectMore(0u21D0, 0u21D9) # Double Arrow\n  Clear()\n  MergeFonts(input_mod_arrow_list[i])\n\n  SelectWorthOutputting()\n  UnlinkReference()\n  ScaleToEm(${em_ascent}, ${em_descent})\n\n  # broken bar に貼り付ける素材準備 (パイプ記号を使うため、後述のパイプ破断線化より前に処理する)\n  Select(0u007c); Copy()\n  Select(0u0090); Paste(); Scale(100, 25)\n\n  # パイプの破断線化 (broken bar を縦に拡大)\n  Select(0u00a6); Copy()\n  Select(0u007c); Paste()\n  Scale(100, 114)\n\n  # 破断線化したパイプ記号と broken bar の区別を付きやすくする\n  Select(0u0090); Copy()\n  Select(0u00a6); Paste(); PasteWithOffset(0, 350); PasteWithOffset(0, -350)\n  Select(0u0090); Clear()\n\n  # 0 生成\n  Select(0u004f); Copy()\n  Select(0u0030); Paste(); Scale(99, 100)\n  Select(0u00b7); Copy()\n  Select(0ufff0); Paste(); Scale(75, 100); Copy()\n  Select(0u0030); PasteInto()\n  Select(0ufff0); Clear()\n\n  # クォーテーションの拡大\n  Select(0u0022)\n  SelectMore(0u0027)\n  SelectMore(0u0060)\n  Scale(110)\n\n  # ; : , . の拡大\n  Select(0u003a)\n  SelectMore(0u003b)\n  SelectMore(0u002c)\n  SelectMore(0u002e)\n  Scale(108)\n  ## 拡大後の位置合わせ\n  Select(0u003b); Move(0, 18) # ;\n  Select(0u002e); Move(0, 5)  # .\n  Select(0u002c); Move(0, -8) # ,\n\n  # Eclipse Pleiades 半角スペース記号 (U+1d1c) 対策\n  Select(0u054d); Copy()\n  Select(0u1d1c); Paste()\n  Scale(85, 60)\n\n  # 左右の波括弧の縦位置合わせ (Regular だけ)\n  if (i == 0)\n    Select(0u007D); Move(0, 5)\n  endif\n\n  # 結合分音記号は全て源柔ゴシックをベースにするため削除する\n  Select(0u0300, 0u036f); Clear()\n\n  # パスの小数点以下を切り捨て\n  SelectWorthOutputting()\n  RoundToInt()\n\n  # Save modified Hack\n  Print(\"Save \" + output_list[i])\n  Save(\"${tmpdir}/\" + output_list[i])\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for extracting evacuation symbol from hinting for HackGen\n########################################\n\ncat > ${tmpdir}/${modified_hack_evacuate_from_hinting_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate evacuation symbol from hinting for HackGen\")\n\n# Set parameters\ninput_list  = [\"${tmpdir}/${modified_hack_material_regular}\", \"${tmpdir}/${modified_hack_material_bold}\"]\noutput_list = [\"${modified_hack_evacuate_from_hinting_regular}\", \"${modified_hack_evacuate_from_hinting_bold}\"]\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open Hack\n  Print(\"Open \" + input_list[i])\n  Open(input_list[i])\n  SelectWorthOutputting()\n  UnlinkReference()\n\n  Scale(${hack_shrink_x}, ${hack_shrink_y}, 0, 0)\n\n  # 幅の変更 (Move で文字幅も変わることに注意)\n  move_pt = $(((${hackgen_half_width} - ${hack_width} * ${hack_shrink_x} / 100) / 2)) # -8\n  width_pt = ${hackgen_half_width}\n  Move(move_pt, 0)\n  SetWidth(width_pt, 0)\n\n  # 特定の記号のみを残し、残りを削除\n  SelectNone()\n  ${select_evacuate_from_hinting}\n  SelectInvert()\n  Clear()\n\n  # パスの小数点以下を切り捨て\n  SelectWorthOutputting()\n  RoundToInt()\n\n  # Save modified Hack\n  Print(\"Save \" + output_list[i])\n  Save(\"${tmpdir}/\" + output_list[i])\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for extracting evacuation symbol from hinting for HackGen35\n########################################\n\ncat > ${tmpdir}/${modified_hack35_evacuate_from_hinting_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate evacuation symbol from hinting for HackGen\")\n\n# Set parameters\ninput_list  = [\"${tmpdir}/${modified_hack_material_regular}\", \"${tmpdir}/${modified_hack_material_bold}\"]\noutput_list = [\"${modified_hack35_evacuate_from_hinting_regular}\", \"${modified_hack35_evacuate_from_hinting_bold}\"]\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open Hack\n  Print(\"Open \" + input_list[i])\n  Open(input_list[i])\n  SelectWorthOutputting()\n  UnlinkReference()\n\n  # 幅の変更 (Move で文字幅も変わることに注意)\n  move_pt = $(((${hackgen35_half_width} - ${hack_width}) / 2)) # -8\n  width_pt = ${hackgen35_half_width}\n  Move(move_pt, 0)\n  SetWidth(width_pt, 0)\n\n  # 特定の記号のみを残し、残りを削除\n  SelectNone()\n  ${select_evacuate_from_hinting}\n  SelectInvert()\n  Clear()\n\n  # パスの小数点以下を切り捨て\n  SelectWorthOutputting()\n  RoundToInt()\n\n  # Save modified Hack\n  Print(\"Save \" + output_list[i])\n  Save(\"${tmpdir}/\" + output_list[i])\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate extraction powerline symbol script for HackGen\n########################################\n\ncat > ${tmpdir}/${modified_hack_powerline_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate powerline symbol for HackGen\")\n\n# Set parameters\ninput_list  = [\"${input_nerd_patched_hack_regular}\",    \"${input_nerd_patched_hack_bold}\"]\noutput_list = [\"${modified_hack_powerline_regular}\", \"${modified_hack_powerline_bold}\"]\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open Hack\n  Print(\"Open \" + input_list[i])\n  Open(input_list[i])\n\n  # powerline extra の記号を残し、残りを削除\n  SelectNone()\n  ${powerline_extra_symbols}\n  SelectInvert()\n  Clear()\n\n  SelectWorthOutputting()\n  UnlinkReference()\n  ScaleToEm(${em_ascent}, ${em_descent})\n\n  Scale(${hack_shrink_x}, ${hack_shrink_y}, 0, 0)\n\n  # 幅の変更 (Move で文字幅も変わることに注意)\n  move_pt = $(((${hackgen_half_width} - ${hack_width} * ${hack_shrink_x} / 100) / 2)) # -8\n  width_pt = ${hackgen_half_width}\n  Move(move_pt, 0)\n  SetWidth(width_pt, 0)\n\n  # パスの小数点以下を切り捨て\n  RoundToInt()\n\n  # Save modified Hack\n  Print(\"Save \" + output_list[i])\n  Save(\"${tmpdir}/\" + output_list[i])\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate extraction powerline symbol script for HackGen35\n########################################\n\ncat > ${tmpdir}/${modified_hack35_powerline_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate powerline symbol for HackGen35\")\n\n# Set parameters\ninput_list  = [\"${input_nerd_patched_hack_regular}\",    \"${input_nerd_patched_hack_bold}\"]\noutput_list = [\"${modified_hack35_powerline_regular}\", \"${modified_hack35_powerline_bold}\"]\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open Hack\n  Print(\"Open \" + input_list[i])\n  Open(input_list[i])\n\n  # powerline extra の記号を残し、残りを削除\n  SelectNone()\n  ${powerline_extra_symbols}\n  SelectInvert()\n  Clear()\n\n  SelectWorthOutputting()\n  UnlinkReference()\n  ScaleToEm(${em_ascent}, ${em_descent})\n\n  # 幅の変更 (Move で文字幅も変わることに注意)\n  move_pt = $(((${hackgen35_half_width} - ${hack_width}) / 2)) # -8\n  width_pt = ${hackgen35_half_width}\n  Move(move_pt, 0)\n  SetWidth(width_pt, 0)\n\n  # パスの小数点以下を切り捨て\n  SelectWorthOutputting()\n  RoundToInt()\n\n  # Save modified Hack\n  Print(\"Save \" + output_list[i])\n  Save(\"${tmpdir}/\" + output_list[i])\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for box drawing light for HackGen\n########################################\n\ncat > ${tmpdir}/${modified_hack_box_drawing_light_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate box drawing light for HackGen\")\n\n# Set parameters\ninput_list  = [\"${tmpdir}/${modified_hack_material_regular}\", \"${tmpdir}/${modified_hack_material_bold}\"]\noutput_list = [\"${modified_hack_box_drawing_light_regular}\", \"${modified_hack_box_drawing_light_bold}\"]\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open Hack\n  Print(\"Open \" + input_list[i])\n  Open(input_list[i])\n  SelectWorthOutputting()\n  UnlinkReference()\n\n  Scale(${hack_shrink_x}, ${hack_shrink_y}, 0, 0)\n\n  # 幅の変更 (Move で文字幅も変わることに注意)\n  move_pt = $(((${hackgen_half_width} - ${hack_width} * ${hack_shrink_x} / 100) / 2)) # -8\n  width_pt = ${hackgen_half_width}\n  Move(move_pt, 0)\n  SetWidth(width_pt, 0)\n\n  # 特定の記号のみを残し、残りを削除\n  SelectNone()\n  ${box_drawing_light_symbols}\n  SelectInvert()\n  Clear()\n\n  # 罫線記号、ブロック記号が上下左右で繋がるように調整\n  SelectNone()\n  ${box_drawing_light_symbols}\n  SelectFewer(0u2580, 0u259F)\n  Scale(100, 110, 0, 0)\n  Select(0u2580, 0u259F); Scale(100, 114, 0, 250); Scale(115, 100); SetWidth(width_pt, 0)\n\n  # パスの小数点以下を切り捨て\n  SelectWorthOutputting()\n  RoundToInt()\n\n  # Save modified Hack\n  Print(\"Save \" + output_list[i])\n  Save(\"${tmpdir}/\" + output_list[i])\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for box drawing light from hinting for HackGen35\n########################################\n\ncat > ${tmpdir}/${modified_hack35_box_drawing_light_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate box drawing light for HackGen\")\n\n# Set parameters\ninput_list  = [\"${tmpdir}/${modified_hack_material_regular}\", \"${tmpdir}/${modified_hack_material_bold}\"]\noutput_list = [\"${modified_hack35_box_drawing_light_regular}\", \"${modified_hack35_box_drawing_light_bold}\"]\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open Hack\n  Print(\"Open \" + input_list[i])\n  Open(input_list[i])\n  SelectWorthOutputting()\n  UnlinkReference()\n\n  # 幅の変更 (Move で文字幅も変わることに注意)\n  move_pt = $(((${hackgen35_half_width} - ${hack_width}) / 2)) # -8\n  width_pt = ${hackgen35_half_width}\n  Move(move_pt, 0)\n  SetWidth(width_pt, 0)\n\n  # 特定の記号のみを残し、残りを削除\n  SelectNone()\n  ${box_drawing_light_symbols}\n  SelectInvert()\n  Clear()\n\n  # 罫線記号、ブロック記号が上下左右で繋がるように調整\n  SelectNone()\n  ${box_drawing_light_symbols}\n  SelectFewer(0u2580, 0u259F)\n  Scale(100, 110, 0, 0)\n  Select(0u2580, 0u259F); Scale(100, 114, 0, 250); Scale(114, 100); SetWidth(width_pt, 0)\n\n  # パスの小数点以下を切り捨て\n  SelectWorthOutputting()\n  RoundToInt()\n\n  # Save modified Hack\n  Print(\"Save \" + output_list[i])\n  Save(\"${tmpdir}/\" + output_list[i])\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate extraction Nerd Fonts script for HackGen Console\n########################################\n\ncat > ${tmpdir}/${modified_hackgen_nerd_console_symbol_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate Nerd Fonts symbol for HackGen\")\n\n# Set parameters\ninput_list  = [\"${input_nerd_patched_hack_regular}\",    \"${input_nerd_patched_hack_bold}\"]\noutput_list = [\"${modified_hackgen_nerd_console_symbol_regular}\", \"${modified_hackgen_nerd_console_symbol_bold}\"]\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open Hack\n  Print(\"Open \" + input_list[i])\n  Open(input_list[i])\n\n  # Nerd Fonts の記号を残し、残りを削除\n  SelectNone()\n  ${select_nerd_symbols}\n  SelectInvert()\n  Clear()\n\n  SelectWorthOutputting()\n  UnlinkReference()\n  ScaleToEm(${em_ascent}, ${em_descent})\n\n  Scale(${hack_shrink_x}, ${hack_shrink_y}, 0, 0)\n\n  # 幅の変更 (Move で文字幅も変わることに注意)\n  move_pt = $(((${hackgen_half_width} - ${hack_width} * ${hack_shrink_x} / 100) / 2)) # -8\n  width_pt = ${hackgen_half_width}\n  Move(move_pt, 0)\n  SetWidth(width_pt, 0)\n\n  # パスの小数点以下を切り捨て\n  SelectWorthOutputting()\n  RoundToInt()\n\n  # Save modified Hack\n  Print(\"Save \" + output_list[i])\n  Save(\"${tmpdir}/\" + output_list[i])\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate extraction Nerd Fonts script for HackGen35 Console\n########################################\n\ncat > ${tmpdir}/${modified_hackgen35_nerd_console_symbol_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate Nerd Fonts symbol for HackGen35\")\n\n# Set parameters\ninput_list  = [\"${input_nerd_patched_hack_regular}\",    \"${input_nerd_patched_hack_bold}\"]\noutput_list = [\"${modified_hackgen35_nerd_console_symbol_regular}\", \"${modified_hackgen35_nerd_console_symbol_bold}\"]\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open Hack\n  Print(\"Open \" + input_list[i])\n  Open(input_list[i])\n\n  # Nerd Fonts の記号を残し、残りを削除\n  SelectNone()\n  ${select_nerd_symbols}\n  SelectInvert()\n  Clear()\n\n  SelectWorthOutputting()\n  UnlinkReference()\n  ScaleToEm(${em_ascent}, ${em_descent})\n\n  Scale(${hack_shrink_x}, ${hack_shrink_y}, 0, 0)\n\n  # 幅の変更 (Move で文字幅も変わることに注意)\n  move_pt = $(((${hackgen35_half_width} - ${hack_width}) / 2)) # -8\n  width_pt = ${hackgen35_half_width}\n  Move(move_pt, 0)\n  SetWidth(width_pt, 0)\n\n  # パスの小数点以下を切り捨て\n  SelectWorthOutputting()\n  RoundToInt()\n\n  # Save modified Hack\n  Print(\"Save \" + output_list[i])\n  Save(\"${tmpdir}/\" + output_list[i])\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for modified Hack console\n########################################\n\ncat > ${tmpdir}/${modified_hack_console_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate modified Hack Console\")\n\n# Set parameters\ninput_list  = [\"${tmpdir}/${modified_hack_material_regular}\", \"${tmpdir}/${modified_hack_material_bold}\"]\noutput_list = [\"${modified_hack_console_regular}\", \"${modified_hack_console_bold}\"]\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open Hack\n  Print(\"Open \" + input_list[i])\n  Open(input_list[i])\n  SelectWorthOutputting()\n  UnlinkReference()\n\n  Scale(${hack_shrink_x}, ${hack_shrink_y}, 0, 0)\n\n  # 幅の変更 (Move で文字幅も変わることに注意)\n  move_pt = $(((${hackgen_half_width} - ${hack_width} * ${hack_shrink_x} / 100) / 2)) # -8\n  width_pt = ${hackgen_half_width}\n  Move(move_pt, 0)\n  SetWidth(width_pt, 0)\n\n  # ヒンティング回避のため特定記号の削除\n  SelectNone()\n  ${box_drawing_light_symbols}\n  ${select_evacuate_from_hinting}\n  Clear()\n\n  # パスの小数点以下を切り捨て\n  SelectWorthOutputting()\n  RoundToInt()\n\n  # Save modified Hack\n  Print(\"Save \" + output_list[i])\n  Save(\"${tmpdir}/\" + output_list[i])\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for modified Hack35 console\n########################################\n\ncat > ${tmpdir}/${modified_hack35_console_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate modified Hack35 Console\")\n\n# Set parameters\ninput_list  = [\"${tmpdir}/${modified_hack_material_regular}\", \"${tmpdir}/${modified_hack_material_bold}\"]\noutput_list = [\"${modified_hack35_console_regular}\", \"${modified_hack35_console_bold}\"]\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open Hack\n  Print(\"Open \" + input_list[i])\n  Open(input_list[i])\n  SelectWorthOutputting()\n  UnlinkReference()\n\n  # 幅の変更 (Move で文字幅も変わることに注意)\n  move_pt = $(((${hackgen35_half_width} - ${hack_width}) / 2)) # -8\n  width_pt = ${hackgen35_half_width}\n  Move(move_pt, 0)\n  SetWidth(width_pt, 0)\n\n  # ヒンティング回避のため特定記号の削除\n  SelectNone()\n  ${box_drawing_light_symbols}\n  ${select_evacuate_from_hinting}\n  Clear()\n\n  # パスの小数点以下を切り捨て\n  SelectWorthOutputting()\n  RoundToInt()\n\n  # Save modified Hack\n  Print(\"Save \" + output_list[i])\n  Save(\"${tmpdir}/\" + output_list[i])\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for modified Hack\n########################################\n\ncat > ${tmpdir}/${modified_hack_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate modified Hack\")\n\n# Set parameters\ninput_list  = [\"${tmpdir}/${modified_hack_console_regular}\", \"${tmpdir}/${modified_hack_console_bold}\"]\noutput_list = [\"${modified_hack_regular}\", \"${modified_hack_bold}\"]\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open Hack\n  Print(\"Open \" + input_list[i])\n  Open(input_list[i])\n\n  # Remove ambiguous glyphs\n  SelectNone()\n  ${select_glyph_is_not_console}\n  Clear()\n\n  # Save modified Hack\n  Print(\"Save \" + output_list[i])\n  Save(\"${tmpdir}/\" + output_list[i])\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for modified Hack35\n########################################\n\ncat > ${tmpdir}/${modified_hack35_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate modified Hack\")\n\n# Set parameters\ninput_list  = [\"${tmpdir}/${modified_hack35_console_regular}\", \"${tmpdir}/${modified_hack35_console_bold}\"]\noutput_list = [\"${modified_hack35_regular}\", \"${modified_hack35_bold}\"]\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open Hack\n  Print(\"Open \" + input_list[i])\n  Open(input_list[i])\n\n  # Remove ambiguous glyphs\n  SelectNone()\n  ${select_glyph_is_not_console}\n  Clear()\n\n  # Save modified Hack\n  Print(\"Save \" + output_list[i])\n  Save(\"${tmpdir}/\" + output_list[i])\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for modified GenJyuuGothicL\n########################################\n\ncat > ${tmpdir}/${modified_genjyuu_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate modified GenJyuuGothicL\")\n\n# Set parameters\nhack = \"${tmpdir}/${modified_hack_regular}\"\ninput_list  = [\"${input_genjyuu_regular}\",    \"${input_genjyuu_bold}\"]\nimproved_legibility_list  = [\"${input_improved_legibility_regular}\",    \"${input_improved_legibility_bold}\"]\nreiwa_list  = [\"${input_reiwa_regular}\",    \"${input_reiwa_bold}\"]\nideographic_space = \"$input_ideographic_space\"\noutput_list = [\"${modified_genjyuu_regular}\", \"${modified_genjyuu_bold}\"]\n\nfontstyle_list    = [\"Regular\", \"Bold\"]\nfontweight_list   = [400,       700]\npanoseweight_list = [5,         8]\n\nPrint(\"Get trim target glyph from Hack\")\nOpen(hack)\ni = 0\nend_hack = 65535\nhack_exist_glyph_array = Array(end_hack)\nwhile (i < end_hack)\n  if (i % 5000 == 0)\n    Print(\"Processing progress: \" + i)\n  endif\n  if (WorthOutputting(i))\n    hack_exist_glyph_array[i] = 1\n  else\n    hack_exist_glyph_array[i] = 0\n  endif\n  i++\nendloop\nClose()\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open GenJyuuGothicL\n  Print(\"Open \" + input_list[i])\n  Open(improved_legibility_list[i])\n  MergeFonts(reiwa_list[i])\n  MergeFonts(ideographic_space)\n  MergeFonts(input_list[i])\n  if (fontstyle_list[i] == \"Bold\")\n    Select(0u00AB)\n    SelectMore(0u00AE)\n    SelectMore(0u00BB)\n    SelectMore(0u00BF)\n    Clear()\n    MergeFonts(\"$input_fix_genjyuu_bold\")\n  endif\n\n  SelectWorthOutputting()\n  UnlinkReference()\n  ScaleToEm(${em_ascent}, ${em_descent})\n\n  ii = 0\n  end_genjyuu = end_hack\n  halfwidth_array = Array(end_genjyuu)\n  i_halfwidth = 0\n  Print(\"Half width check loop start\")\n  while ( ii < end_genjyuu )\n      if ( ii % 5000 == 0 )\n        Print(\"Processing progress: \" + ii)\n      endif\n      if (WorthOutputting(ii))\n        Select(ii)\n        if (hack_exist_glyph_array[ii] == 1)\n          Clear()\n        elseif (GlyphInfo(\"Width\")<768)\n          halfwidth_array[i_halfwidth] = ii\n          i_halfwidth = i_halfwidth + 1\n        endif\n      endif\n      ii = ii + 1\n  endloop\n  Print(\"Half width check loop end\")\n\n  Print(\"Full SetWidth start\")\n  move_pt = $(((${hackgen_full_width} - ${genjyuu_width}) / 2)) # 26\n  width_pt = ${hackgen_full_width} # 1076\n  SelectWorthOutputting()\n  ii=0\n  while (ii < i_halfwidth)\n      SelectFewer(halfwidth_array[ii])\n      ii = ii + 1\n  endloop\n  Move(move_pt, 0)\n  SetWidth(width_pt)\n  Print(\"Full SetWidth end\")\n\n  SelectNone()\n\n  Print(\"Half SetWidth start\")\n  move_pt = $(((${hackgen_half_width} - ${genjyuu_width} / 2) / 2)) # 13\n  width_pt = ${hackgen_half_width} # 358\n  ii=0\n  while (ii < i_halfwidth)\n      SelectMore(halfwidth_array[ii])\n      ii = ii + 1\n  endloop\n  Move(move_pt, 0)\n  SetWidth(width_pt)\n  Print(\"Half SetWidth end\")\n\n  # broken bar は Hack ベースにする\n  Select(0u00a6); Clear()\n\n  # Edit zenkaku brackets\n  Print(\"Edit zenkaku brackets\")\n  bracket_move = $((${hackgen_half_width} / 7 * 3))\n  bracket_scale = 104\n  Select(0uff08) # (\n  SelectMore(0uff3b) # [\n  SelectMore(0uff5b) # {\n  Scale(bracket_scale)\n  Move(-bracket_move, 0); SetWidth(${hackgen_full_width})\n  Select(0uff09) # )\n  SelectMore(0uff3d) # ]\n  SelectMore(0uff5d) # }\n  Scale(bracket_scale)\n  Move( bracket_move, 0); SetWidth(${hackgen_full_width})\n\n  # 全角 ，．‘’“” の調整\n  Select(0uff0e);Scale(155) ; SetWidth(${hackgen_full_width}) # ．\n  Select(0uff0c);Scale(145) ; SetWidth(${hackgen_full_width}) # ，\n  Select(0u2018);Scale(145) ; SetWidth(${hackgen_full_width}) # ‘\n  Select(0u2019);Scale(145) ; SetWidth(${hackgen_full_width}) # ’\n  Select(0u201c);Scale(145) ; SetWidth(${hackgen_full_width}) # “\n  Select(0u201d);Scale(145) ; SetWidth(${hackgen_full_width}) # ”\n\n  # 下限で見切れているグリフの調整\n  Select(0uff47); Scale(100, 91) # ｇ\n  Select(0uff4a); Scale(100, 91) # ｊ\n\n  # カーニング情報を削除\n  lookups = GetLookups(\"GPOS\"); numlookups = SizeOf(lookups); j = 0;\n  while (j < numlookups)\n    if (Strstr(lookups[j], 'halt') >= 0 \\\\\n        || Strstr(lookups[j], 'vhal') >= 0 \\\\\n        || Strstr(lookups[j], 'palt') >= 0 \\\\\n        || Strstr(lookups[j], 'vpal') >= 0 \\\\\n        || Strstr(lookups[j], 'kern') >= 0 \\\\\n      )\n      RemoveLookup(lookups[j]);\n    endif\n    j++\n  endloop\n\n  # Save modified GenJyuuGothicL\n  Print(\"Save \" + output_list[i])\n  Save(\"${tmpdir}/\" + output_list[i])\n  Close()\n\n  # Open new file\n  Print(\"Generate Genjyuu ttf\")\n  New()\n  # Set encoding to Unicode-bmp\n  Reencode(\"unicode\")\n  # Set configuration\n  SetFontNames(\"modified-genjyuu\" + fontstyle_list[i])\n  ScaleToEm(${em_ascent}, ${em_descent})\n  SetOS2Value(\"Weight\", fontweight_list[i]) # Book or Bold\n  SetOS2Value(\"Width\",                   5) # Medium\n  SetOS2Value(\"FSType\",                  0)\n  SetOS2Value(\"VendorID\",           \"PfEd\")\n  SetOS2Value(\"IBMFamily\",            2057) # SS Typewriter Gothic\n  SetOS2Value(\"WinAscentIsOffset\",       0)\n  SetOS2Value(\"WinDescentIsOffset\",      0)\n  SetOS2Value(\"TypoAscentIsOffset\",      0)\n  SetOS2Value(\"TypoDescentIsOffset\",     0)\n  SetOS2Value(\"HHeadAscentIsOffset\",     0)\n  SetOS2Value(\"HHeadDescentIsOffset\",    0)\n  SetOS2Value(\"WinAscent\",             ${hackgen_ascent})\n  SetOS2Value(\"WinDescent\",            ${hackgen_descent})\n  SetOS2Value(\"TypoAscent\",            ${em_ascent})\n  SetOS2Value(\"TypoDescent\",          -${em_descent})\n  SetOS2Value(\"TypoLineGap\",           ${typo_line_gap})\n  SetOS2Value(\"HHeadAscent\",           ${hackgen_ascent})\n  SetOS2Value(\"HHeadDescent\",         -${hackgen_descent})\n  SetOS2Value(\"HHeadLineGap\",            0)\n  SetPanose([2, 11, panoseweight_list[i], 9, 2, 2, 3, 2, 2, 7])\n\n  MergeFonts(\"${tmpdir}/\" + output_list[i])\n  Generate(\"${tmpdir}/\" + output_list[i] + \".ttf\", \"\")\n  Close()\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for modified GenJyuuGothicL for HackGen35\n########################################\n\ncat > ${tmpdir}/${modified_genjyuu35_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate modified GenJyuuGothicL - 35\")\n\n# Set parameters\nhack = \"${tmpdir}/${modified_hack35_regular}\"\ninput_list  = [\"${input_genjyuu_regular}\",    \"${input_genjyuu_bold}\"]\nimproved_legibility_list  = [\"${input_improved_legibility_regular}\",    \"${input_improved_legibility_bold}\"]\nreiwa_list  = [\"${input_reiwa_regular}\",    \"${input_reiwa_bold}\"]\nideographic_space = \"$input_ideographic_space\"\noutput_list = [\"${modified_genjyuu35_regular}\", \"${modified_genjyuu35_bold}\"]\n\nfontstyle_list    = [\"Regular\", \"Bold\"]\nfontweight_list   = [400,       700]\npanoseweight_list = [5,         8]\n\nPrint(\"Get trim target glyph from Hack\")\nOpen(hack)\ni = 0\nend_hack = 65535\nhack_exist_glyph_array = Array(end_hack)\nwhile (i < end_hack)\n  if (i % 5000 == 0)\n    Print(\"Processing progress: \" + i)\n  endif\n  if (WorthOutputting(i))\n    hack_exist_glyph_array[i] = 1\n  else\n    hack_exist_glyph_array[i] = 0\n  endif\n  i++\nendloop\nClose()\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open GenJyuuGothicL\n  Print(\"Open \" + input_list[i])\n  Open(improved_legibility_list[i])\n  MergeFonts(reiwa_list[i])\n  MergeFonts(ideographic_space)\n  MergeFonts(input_list[i])\n  if (fontstyle_list[i] == \"Bold\")\n    Select(0u00AB)\n    SelectMore(0u00AE)\n    SelectMore(0u00BB)\n    SelectMore(0u00BF)\n    Clear()\n    MergeFonts(\"$input_fix_genjyuu_bold\")\n  endif\n\n  SelectWorthOutputting()\n  UnlinkReference()\n  ScaleToEm(${em_ascent}, ${em_descent})\n\n  ii = 0\n  end_genjyuu = end_hack\n  halfwidth_array = Array(end_genjyuu)\n  i_halfwidth = 0\n  Print(\"Half width check loop start\")\n  while ( ii < end_genjyuu )\n      if ( ii % 5000 == 0 )\n        Print(\"Processing progress: \" + ii)\n      endif\n      if (WorthOutputting(ii))\n        Select(ii)\n        if (hack_exist_glyph_array[ii] == 1)\n          Clear()\n        elseif (GlyphInfo(\"Width\")<768)\n          halfwidth_array[i_halfwidth] = ii\n          i_halfwidth = i_halfwidth + 1\n        endif\n      endif\n      ii = ii + 1\n  endloop\n  Print(\"Half width check loop end\")\n\n  Print(\"Full SetWidth start\")\n  move_pt = $(((${hackgen35_full_width} - ${genjyuu_width}) / 2)) # 3\n  width_pt = ${hackgen35_full_width} # 1030\n  SelectWorthOutputting()\n  ii=0\n  while (ii < i_halfwidth)\n      SelectFewer(halfwidth_array[ii])\n      ii = ii + 1\n  endloop\n  Move(move_pt, 0)\n  SetWidth(width_pt)\n  Print(\"Full SetWidth end\")\n\n  SelectNone()\n\n  Print(\"Half SetWidth start\")\n  move_pt = $(((${hackgen35_half_width} - ${genjyuu_width} / 2) / 2)) # 35\n  width_pt = ${hackgen35_half_width} # 618\n  ii=0\n  while (ii < i_halfwidth)\n      SelectMore(halfwidth_array[ii])\n      ii = ii + 1\n  endloop\n  Move(move_pt, 0)\n  SetWidth(width_pt)\n  Print(\"Half SetWidth end\")\n\n  # broken bar は Hack ベースにする\n  Select(0u00a6); Clear()\n\n  # Edit zenkaku brackets\n  Print(\"Edit zenkaku brackets\")\n  bracket_move = $((${hackgen35_half_width} / 7 * 3))\n  bracket_scale = 104\n  Select(0uff08) # (\n  SelectMore(0uff3b) # [\n  SelectMore(0uff5b) # {\n  Scale(bracket_scale)\n  Move(-bracket_move, 0); SetWidth(${hackgen35_full_width})\n  Select(0uff09) # )\n  SelectMore(0uff3d) # ]\n  SelectMore(0uff5d) # }\n  Scale(bracket_scale)\n  Move( bracket_move, 0); SetWidth(${hackgen35_full_width})\n\n  # 全角 ，．‘’“” の調整\n  Select(0uff0e);Scale(155) ; SetWidth(${hackgen35_full_width}) # ．\n  Select(0uff0c);Scale(145) ; SetWidth(${hackgen35_full_width}) # ，\n  Select(0u2018);Scale(145) ; SetWidth(${hackgen35_full_width}) # ‘\n  Select(0u2019);Scale(145) ; SetWidth(${hackgen35_full_width}) # ’\n  Select(0u201c);Scale(145) ; SetWidth(${hackgen35_full_width}) # “\n  Select(0u201d);Scale(145) ; SetWidth(${hackgen35_full_width}) # ”\n\n  # カーニング情報を削除\n  lookups = GetLookups(\"GPOS\"); numlookups = SizeOf(lookups); j = 0;\n  while (j < numlookups)\n    if (Strstr(lookups[j], 'halt') >= 0 \\\\\n        || Strstr(lookups[j], 'vhal') >= 0 \\\\\n        || Strstr(lookups[j], 'palt') >= 0 \\\\\n        || Strstr(lookups[j], 'vpal') >= 0 \\\\\n        || Strstr(lookups[j], 'kern') >= 0 \\\\\n      )\n      RemoveLookup(lookups[j]);\n    endif\n    j++\n  endloop\n\n  # Save modified GenJyuuGothicL\n  Print(\"Save \" + output_list[i])\n  Save(\"${tmpdir}/\" + output_list[i])\n  Close()\n\n  # Open new file\n  Print(\"Generate Genjyuu ttf\")\n  New()\n  # Set encoding to Unicode-bmp\n  Reencode(\"unicode\")\n  # Set configuration\n  SetFontNames(\"modified-genjyuu\" + fontstyle_list[i])\n  ScaleToEm(${em_ascent}, ${em_descent})\n  SetOS2Value(\"Weight\", fontweight_list[i]) # Book or Bold\n  SetOS2Value(\"Width\",                   5) # Medium\n  SetOS2Value(\"FSType\",                  0)\n  SetOS2Value(\"VendorID\",           \"PfEd\")\n  SetOS2Value(\"IBMFamily\",            2057) # SS Typewriter Gothic\n  SetOS2Value(\"WinAscentIsOffset\",       0)\n  SetOS2Value(\"WinDescentIsOffset\",      0)\n  SetOS2Value(\"TypoAscentIsOffset\",      0)\n  SetOS2Value(\"TypoDescentIsOffset\",     0)\n  SetOS2Value(\"HHeadAscentIsOffset\",     0)\n  SetOS2Value(\"HHeadDescentIsOffset\",    0)\n  SetOS2Value(\"WinAscent\",             ${hackgen35_ascent})\n  SetOS2Value(\"WinDescent\",            ${hackgen35_descent})\n  SetOS2Value(\"TypoAscent\",            ${em_ascent})\n  SetOS2Value(\"TypoDescent\",          -${em_descent})\n  SetOS2Value(\"TypoLineGap\",           ${typo_line_gap})\n  SetOS2Value(\"HHeadAscent\",           ${hackgen35_ascent})\n  SetOS2Value(\"HHeadDescent\",         -${hackgen35_descent})\n  SetOS2Value(\"HHeadLineGap\",            0)\n  SetPanose([2, 11, panoseweight_list[i], 3, 2, 2, 3, 2, 2, 7])\n\n  MergeFonts(\"${tmpdir}/\" + output_list[i])\n  Generate(\"${tmpdir}/\" + output_list[i] + \".ttf\", \"\")\n  Close()\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for modified GenJyuuGothicL Console\n########################################\n\ncat > ${tmpdir}/${modified_genjyuu_console_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate modified GenJyuuGothicL Console\")\n\n# Set parameters\nhack = \"${tmpdir}/${modified_hack_material_regular}\"\ninput_list  = [\"${tmpdir}/${modified_genjyuu_regular}.ttf\", \"${tmpdir}/${modified_genjyuu_bold}.ttf\"]\noutput_list = [\"${modified_genjyuu_console_regular}\", \"${modified_genjyuu_console_bold}\"]\n\nPrint(\"Get trim target glyph from Hack\")\nOpen(hack)\ni = 0\nend_hack = 65535\nhack_exist_glyph_array = Array(end_hack)\nwhile (i < end_hack)\n  if (i % 5000 == 0)\n    Print(\"Processing progress: \" + i)\n  endif\n  if (WorthOutputting(i))\n    hack_exist_glyph_array[i] = 1\n  else\n    hack_exist_glyph_array[i] = 0\n  endif\n  i++\nendloop\nClose()\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open GenJyuuGothicL\n  Print(\"Open \" + input_list[i])\n  Open(input_list[i])\n\n  ii = 0\n  end_genjyuu = end_hack\n  Print(\"Begin delete the glyphs contained in Hack\")\n  SelectNone()\n  ${box_drawing_light_symbols}\n  while ( ii < end_genjyuu )\n      if ( ii % 5000 == 0 )\n        Print(\"Processing progress: \" + ii)\n      endif\n      if (WorthOutputting(ii) && hack_exist_glyph_array[ii] == 1)\n        SelectMore(ii)\n      endif\n      ii = ii + 1\n  endloop\n  Clear()\n  Print(\"End delete the glyphs contained in Hack\")\n\n  # 結合分音記号は全て源柔ゴシック収録のものを使用する\n  Select(0u0300, 0u036f)\n  move_pt = $(((${hackgen_half_width} - ${hackgen_full_width}) / 2))\n  Move(move_pt, 0)\n  SetWidth(${hackgen_half_width}, 0)\n\n  # Save modified GenJyuuGothicL\n  Print(\"Generate \" + output_list[i])\n  Generate(\"${tmpdir}/\" + output_list[i] + \".ttf\", \"\")\n  Close()\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for modified GenJyuuGothicL Console for HackGen35\n########################################\n\ncat > ${tmpdir}/${modified_genjyuu35_console_generator} << _EOT_\n#!$fontforge_command -script\n\nPrint(\"Generate modified GenJyuuGothicL Console - 35\")\n\n# Set parameters\nhack = \"${tmpdir}/${modified_hack_material_regular}\"\ninput_list  = [\"${tmpdir}/${modified_genjyuu35_regular}.ttf\", \"${tmpdir}/${modified_genjyuu35_bold}.ttf\"]\noutput_list = [\"${modified_genjyuu35_console_regular}\", \"${modified_genjyuu35_console_bold}\"]\n\nPrint(\"Get trim target glyph from Hack\")\nOpen(hack)\ni = 0\nend_hack = 65535\nhack_exist_glyph_array = Array(end_hack)\nwhile (i < end_hack)\n  if (i % 5000 == 0)\n    Print(\"Processing progress: \" + i)\n  endif\n  if (WorthOutputting(i))\n    hack_exist_glyph_array[i] = 1\n  else\n    hack_exist_glyph_array[i] = 0\n  endif\n  i++\nendloop\nClose()\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(input_list))\n  # Open GenJyuuGothicL\n  Print(\"Open \" + input_list[i])\n  Open(input_list[i])\n\n  ii = 0\n  end_genjyuu = end_hack\n  Print(\"Begin delete the glyphs contained in Hack\")\n  SelectNone()\n  ${box_drawing_light_symbols}\n  while ( ii < end_genjyuu )\n      if ( ii % 5000 == 0 )\n        Print(\"Processing progress: \" + ii)\n      endif\n      if (WorthOutputting(ii) && hack_exist_glyph_array[ii] == 1)\n        SelectMore(ii)\n      endif\n      ii = ii + 1\n  endloop\n  Clear()\n  Print(\"End delete the glyphs contained in Hack\")\n\n  # 結合分音記号は全て源柔ゴシック収録のものを使用する\n  Select(0u0300, 0u036f)\n  move_pt = $(((${hackgen35_half_width} - ${hackgen35_full_width}) / 2))\n  Move(move_pt, 0)\n  SetWidth(${hackgen35_half_width}, 0)\n\n  # Save modified GenJyuuGothicL\n  Print(\"Generate \" + output_list[i])\n  Generate(\"${tmpdir}/\" + output_list[i] + \".ttf\", \"\")\n  Close()\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for HackGen\n########################################\n\ncat > ${tmpdir}/${hackgen_generator} << _EOT_\n#!$fontforge_command -script\n\n# Print message\nPrint(\"Generate HackGen\")\n\n# Set parameters\nhack_list  = [\"${tmpdir}/${modified_hack_regular}\", \\\\\n                     \"${tmpdir}/${modified_hack_bold}\"]\nfontfamily        = \"${hackgen_familyname}\"\nfontfamilysuffix  = \"${hackgen_familyname_suffix}\"\nfontstyle_list    = [\"Regular\", \"Bold\"]\nfontweight_list   = [400,       700]\npanoseweight_list = [5,         8]\ncopyright         = \"${copyright}\"\nversion           = \"${hackgen_version}\"\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(fontstyle_list))\n  # Open new file\n  New()\n\n  # Set encoding to Unicode-bmp\n  Reencode(\"unicode\")\n\n  # Set configuration\n  if (fontfamilysuffix != \"\")\n        SetFontNames(fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily + \" \" + fontfamilysuffix, \\\\\n                     fontfamily + \" \" + fontfamilysuffix + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  else\n        SetFontNames(fontfamily + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily, \\\\\n                     fontfamily + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  endif\n  SetTTFName(0x409, 2, fontstyle_list[i])\n  SetTTFName(0x409, 3, \"FontForge 2.0 : \" + \\$fullname + \" : \" + Strftime(\"%d-%m-%Y\", 0))\n  ScaleToEm(${em_ascent}, ${em_descent})\n  SetOS2Value(\"Weight\", fontweight_list[i]) # Book or Bold\n  SetOS2Value(\"Width\",                   5) # Medium\n  SetOS2Value(\"FSType\",                  0)\n  SetOS2Value(\"VendorID\",           \"PfEd\")\n  SetOS2Value(\"IBMFamily\",            2057) # SS Typewriter Gothic\n  SetOS2Value(\"WinAscentIsOffset\",       0)\n  SetOS2Value(\"WinDescentIsOffset\",      0)\n  SetOS2Value(\"TypoAscentIsOffset\",      0)\n  SetOS2Value(\"TypoDescentIsOffset\",     0)\n  SetOS2Value(\"HHeadAscentIsOffset\",     0)\n  SetOS2Value(\"HHeadDescentIsOffset\",    0)\n  SetOS2Value(\"WinAscent\",             ${hackgen_ascent})\n  SetOS2Value(\"WinDescent\",            ${hackgen_descent})\n  SetOS2Value(\"TypoAscent\",            ${em_ascent})\n  SetOS2Value(\"TypoDescent\",          -${em_descent})\n  SetOS2Value(\"TypoLineGap\",           ${typo_line_gap})\n  SetOS2Value(\"HHeadAscent\",           ${hackgen_ascent})\n  SetOS2Value(\"HHeadDescent\",         -${hackgen_descent})\n  SetOS2Value(\"HHeadLineGap\",            0)\n  SetPanose([2, 11, panoseweight_list[i], 9, 2, 2, 3, 2, 2, 7])\n\n  # Merge Hack font\n  Print(\"Merge \" + hack_list[i]:t)\n  MergeFonts(hack_list[i])\n\n  # Save HackGen\n  if (fontfamilysuffix != \"\")\n        Print(\"Save \" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  else\n        Print(\"Save \" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  endif\n  Close()\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n\n########################################\n# Generate extraction nerd symbols script for HackGen Console\n########################################\n\ncat > ${tmpdir}/${hackgen_nerd_console_symbol_generator} << _EOT_\n#!$fontforge_command -script\n\n# Print message\nPrint(\"Generate extraction nerd symbols script for HackGen\")\n\n# Set parameters\nhack_list  = [\"${tmpdir}/${modified_hackgen_nerd_console_symbol_regular}\", \\\\\n                     \"${tmpdir}/${modified_hackgen_nerd_console_symbol_bold}\"]\npowerline_list = [\"${tmpdir}/${modified_hack_powerline_regular}\", \\\\\n                      \"${tmpdir}/${modified_hack_powerline_bold}\"]\nfontfamily        = \"${hackgen_evacuation_nerd_familyname}\"\nfontfamilysuffix  = \"${hackgen_console_suffix}\"\nfontstyle_list    = [\"Regular\", \"Bold\"]\nfontweight_list   = [400,       700]\npanoseweight_list = [5,         8]\ncopyright         = \"${copyright}\"\nversion           = \"${hackgen_version}\"\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(fontstyle_list))\n  # Open new file\n  New()\n\n  # Set encoding to Unicode-bmp\n  Reencode(\"unicode\")\n\n  # Set configuration\n  if (fontfamilysuffix != \"\")\n        SetFontNames(fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily + \" \" + fontfamilysuffix, \\\\\n                     fontfamily + \" \" + fontfamilysuffix + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  else\n        SetFontNames(fontfamily + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily, \\\\\n                     fontfamily + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  endif\n  SetTTFName(0x409, 2, fontstyle_list[i])\n  SetTTFName(0x409, 3, \"FontForge 2.0 : \" + \\$fullname + \" : \" + Strftime(\"%d-%m-%Y\", 0))\n  ScaleToEm(${em_ascent}, ${em_descent})\n  SetOS2Value(\"Weight\", fontweight_list[i]) # Book or Bold\n  SetOS2Value(\"Width\",                   5) # Medium\n  SetOS2Value(\"FSType\",                  0)\n  SetOS2Value(\"VendorID\",           \"PfEd\")\n  SetOS2Value(\"IBMFamily\",            2057) # SS Typewriter Gothic\n  SetOS2Value(\"WinAscentIsOffset\",       0)\n  SetOS2Value(\"WinDescentIsOffset\",      0)\n  SetOS2Value(\"TypoAscentIsOffset\",      0)\n  SetOS2Value(\"TypoDescentIsOffset\",     0)\n  SetOS2Value(\"HHeadAscentIsOffset\",     0)\n  SetOS2Value(\"HHeadDescentIsOffset\",    0)\n  SetOS2Value(\"WinAscent\",             ${hackgen_ascent})\n  SetOS2Value(\"WinDescent\",            ${hackgen_descent})\n  SetOS2Value(\"TypoAscent\",            ${em_ascent})\n  SetOS2Value(\"TypoDescent\",          -${em_descent})\n  SetOS2Value(\"TypoLineGap\",           ${typo_line_gap})\n  SetOS2Value(\"HHeadAscent\",           ${hackgen_ascent})\n  SetOS2Value(\"HHeadDescent\",         -${hackgen_descent})\n  SetOS2Value(\"HHeadLineGap\",            0)\n  SetPanose([2, 11, panoseweight_list[i], 9, 2, 2, 3, 2, 2, 7])\n\n  # Merge Hack font\n  Print(\"Merge \" + hack_list[i]:t)\n  MergeFonts(hack_list[i])\n  MergeFonts(powerline_list[i])\n\n  # Save HackGen\n  if (fontfamilysuffix != \"\")\n        Print(\"Save \" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  else\n        Print(\"Save \" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  endif\n  Close()\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate extraction nerd symbols script for HackGen35 Console\n########################################\n\ncat > ${tmpdir}/${hackgen35_nerd_console_symbol_generator} << _EOT_\n#!$fontforge_command -script\n\n# Print message\nPrint(\"Generate extraction nerd symbols script for HackGen35\")\n\n# Set parameters\nhack_list  = [\"${tmpdir}/${modified_hackgen35_nerd_console_symbol_regular}\", \\\\\n                     \"${tmpdir}/${modified_hackgen35_nerd_console_symbol_bold}\"]\npowerline_list = [\"${tmpdir}/${modified_hack35_powerline_regular}\", \\\\\n                      \"${tmpdir}/${modified_hack35_powerline_bold}\"]\nfontfamily        = \"${hackgen35_evacuation_nerd_familyname}\"\nfontfamilysuffix  = \"${hackgen_console_suffix}\"\nfontstyle_list    = [\"Regular\", \"Bold\"]\nfontweight_list   = [400,       700]\npanoseweight_list = [5,         8]\ncopyright         = \"${copyright}\"\nversion           = \"${hackgen_version}\"\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(fontstyle_list))\n  # Open new file\n  New()\n\n  # Set encoding to Unicode-bmp\n  Reencode(\"unicode\")\n\n  # Set configuration\n  if (fontfamilysuffix != \"\")\n        SetFontNames(fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily + \" \" + fontfamilysuffix, \\\\\n                     fontfamily + \" \" + fontfamilysuffix + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  else\n        SetFontNames(fontfamily + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily, \\\\\n                     fontfamily + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  endif\n  SetTTFName(0x409, 2, fontstyle_list[i])\n  SetTTFName(0x409, 3, \"FontForge 2.0 : \" + \\$fullname + \" : \" + Strftime(\"%d-%m-%Y\", 0))\n  ScaleToEm(${em_ascent}, ${em_descent})\n  SetOS2Value(\"Weight\", fontweight_list[i]) # Book or Bold\n  SetOS2Value(\"Width\",                   5) # Medium\n  SetOS2Value(\"FSType\",                  0)\n  SetOS2Value(\"VendorID\",           \"PfEd\")\n  SetOS2Value(\"IBMFamily\",            2057) # SS Typewriter Gothic\n  SetOS2Value(\"WinAscentIsOffset\",       0)\n  SetOS2Value(\"WinDescentIsOffset\",      0)\n  SetOS2Value(\"TypoAscentIsOffset\",      0)\n  SetOS2Value(\"TypoDescentIsOffset\",     0)\n  SetOS2Value(\"HHeadAscentIsOffset\",     0)\n  SetOS2Value(\"HHeadDescentIsOffset\",    0)\n  SetOS2Value(\"WinAscent\",             ${hackgen35_ascent})\n  SetOS2Value(\"WinDescent\",            ${hackgen35_descent})\n  SetOS2Value(\"TypoAscent\",            ${em_ascent})\n  SetOS2Value(\"TypoDescent\",          -${em_descent})\n  SetOS2Value(\"TypoLineGap\",           ${typo_line_gap})\n  SetOS2Value(\"HHeadAscent\",           ${hackgen35_ascent})\n  SetOS2Value(\"HHeadDescent\",         -${hackgen35_descent})\n  SetOS2Value(\"HHeadLineGap\",            0)\n  SetPanose([2, 11, panoseweight_list[i], 3, 2, 2, 3, 2, 2, 7])\n\n  # Merge Hack font\n  Print(\"Merge \" + hack_list[i]:t)\n  MergeFonts(hack_list[i])\n  MergeFonts(powerline_list[i])\n\n  # Save HackGen\n  if (fontfamilysuffix != \"\")\n        Print(\"Save \" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  else\n        Print(\"Save \" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  endif\n  Close()\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate extraction evacuation symbol from hinting for HackGen\n########################################\n\ncat > ${tmpdir}/${hackgen_evacuate_from_hinting_generator} << _EOT_\n#!$fontforge_command -script\n\n# Print message\nPrint(\"Generate extraction evacuation symbol from hinting for HackGen\")\n\n# Set parameters\nhack_list  = [\"${tmpdir}/${modified_hack_evacuate_from_hinting_regular}\", \\\\\n                     \"${tmpdir}/${modified_hack_evacuate_from_hinting_bold}\"]\nfontfamily        = \"${hackgen_evacuation_symbol_familyname}\"\nfontfamilysuffix  = \"${hackgen_familyname_suffix}\"\nfontstyle_list    = [\"Regular\", \"Bold\"]\nfontweight_list   = [400,       700]\npanoseweight_list = [5,         8]\ncopyright         = \"${copyright}\"\nversion           = \"${hackgen_version}\"\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(fontstyle_list))\n  # Open new file\n  New()\n\n  # Set encoding to Unicode-bmp\n  Reencode(\"unicode\")\n\n  # Set configuration\n  if (fontfamilysuffix != \"\")\n        SetFontNames(fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily + \" \" + fontfamilysuffix, \\\\\n                     fontfamily + \" \" + fontfamilysuffix + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  else\n        SetFontNames(fontfamily + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily, \\\\\n                     fontfamily + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  endif\n  SetTTFName(0x409, 2, fontstyle_list[i])\n  SetTTFName(0x409, 3, \"FontForge 2.0 : \" + \\$fullname + \" : \" + Strftime(\"%d-%m-%Y\", 0))\n  ScaleToEm(${em_ascent}, ${em_descent})\n  SetOS2Value(\"Weight\", fontweight_list[i]) # Book or Bold\n  SetOS2Value(\"Width\",                   5) # Medium\n  SetOS2Value(\"FSType\",                  0)\n  SetOS2Value(\"VendorID\",           \"PfEd\")\n  SetOS2Value(\"IBMFamily\",            2057) # SS Typewriter Gothic\n  SetOS2Value(\"WinAscentIsOffset\",       0)\n  SetOS2Value(\"WinDescentIsOffset\",      0)\n  SetOS2Value(\"TypoAscentIsOffset\",      0)\n  SetOS2Value(\"TypoDescentIsOffset\",     0)\n  SetOS2Value(\"HHeadAscentIsOffset\",     0)\n  SetOS2Value(\"HHeadDescentIsOffset\",    0)\n  SetOS2Value(\"WinAscent\",             ${hackgen_ascent})\n  SetOS2Value(\"WinDescent\",            ${hackgen_descent})\n  SetOS2Value(\"TypoAscent\",            ${em_ascent})\n  SetOS2Value(\"TypoDescent\",          -${em_descent})\n  SetOS2Value(\"TypoLineGap\",           ${typo_line_gap})\n  SetOS2Value(\"HHeadAscent\",           ${hackgen_ascent})\n  SetOS2Value(\"HHeadDescent\",         -${hackgen_descent})\n  SetOS2Value(\"HHeadLineGap\",            0)\n  SetPanose([2, 11, panoseweight_list[i], 9, 2, 2, 3, 2, 2, 7])\n\n  # Merge Hack font\n  Print(\"Merge \" + hack_list[i]:t)\n  MergeFonts(hack_list[i])\n\n  # Save HackGen\n  if (fontfamilysuffix != \"\")\n        Print(\"Save \" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  else\n        Print(\"Save \" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  endif\n  Close()\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate extraction evacuation symbol from hinting for HackGen35\n########################################\n\ncat > ${tmpdir}/${hackgen35_evacuate_from_hinting_generator} << _EOT_\n#!$fontforge_command -script\n\n# Print message\nPrint(\"Generate extraction evacuation symbol from hinting for HackGen35\")\n\n# Set parameters\nhack_list  = [\"${tmpdir}/${modified_hack35_evacuate_from_hinting_regular}\", \\\\\n                     \"${tmpdir}/${modified_hack35_evacuate_from_hinting_bold}\"]\nfontfamily        = \"${hackgen35_evacuation_symbol_familyname}\"\nfontfamilysuffix  = \"${hackgen_familyname_suffix}\"\nfontstyle_list    = [\"Regular\", \"Bold\"]\nfontweight_list   = [400,       700]\npanoseweight_list = [5,         8]\ncopyright         = \"${copyright}\"\nversion           = \"${hackgen_version}\"\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(fontstyle_list))\n  # Open new file\n  New()\n\n  # Set encoding to Unicode-bmp\n  Reencode(\"unicode\")\n\n  # Set configuration\n  if (fontfamilysuffix != \"\")\n        SetFontNames(fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily + \" \" + fontfamilysuffix, \\\\\n                     fontfamily + \" \" + fontfamilysuffix + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  else\n        SetFontNames(fontfamily + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily, \\\\\n                     fontfamily + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  endif\n  SetTTFName(0x409, 2, fontstyle_list[i])\n  SetTTFName(0x409, 3, \"FontForge 2.0 : \" + \\$fullname + \" : \" + Strftime(\"%d-%m-%Y\", 0))\n  ScaleToEm(${em_ascent}, ${em_descent})\n  SetOS2Value(\"Weight\", fontweight_list[i]) # Book or Bold\n  SetOS2Value(\"Width\",                   5) # Medium\n  SetOS2Value(\"FSType\",                  0)\n  SetOS2Value(\"VendorID\",           \"PfEd\")\n  SetOS2Value(\"IBMFamily\",            2057) # SS Typewriter Gothic\n  SetOS2Value(\"WinAscentIsOffset\",       0)\n  SetOS2Value(\"WinDescentIsOffset\",      0)\n  SetOS2Value(\"TypoAscentIsOffset\",      0)\n  SetOS2Value(\"TypoDescentIsOffset\",     0)\n  SetOS2Value(\"HHeadAscentIsOffset\",     0)\n  SetOS2Value(\"HHeadDescentIsOffset\",    0)\n  SetOS2Value(\"WinAscent\",             ${hackgen35_ascent})\n  SetOS2Value(\"WinDescent\",            ${hackgen35_descent})\n  SetOS2Value(\"TypoAscent\",            ${em_ascent})\n  SetOS2Value(\"TypoDescent\",          -${em_descent})\n  SetOS2Value(\"TypoLineGap\",           ${typo_line_gap})\n  SetOS2Value(\"HHeadAscent\",           ${hackgen35_ascent})\n  SetOS2Value(\"HHeadDescent\",         -${hackgen35_descent})\n  SetOS2Value(\"HHeadLineGap\",            0)\n  SetPanose([2, 11, panoseweight_list[i], 3, 2, 2, 3, 2, 2, 7])\n\n  # Merge Hack font\n  Print(\"Merge \" + hack_list[i]:t)\n  MergeFonts(hack_list[i])\n\n  # Save HackGen\n  if (fontfamilysuffix != \"\")\n        Print(\"Save \" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  else\n        Print(\"Save \" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  endif\n  Close()\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate extraction box drawing light for HackGen\n########################################\n\ncat > ${tmpdir}/${hackgen_box_drawing_light_generator} << _EOT_\n#!$fontforge_command -script\n\n# Print message\nPrint(\"Generate extraction box drawing light for HackGen\")\n\n# Set parameters\nhack_list  = [\"${tmpdir}/${modified_hack_box_drawing_light_regular}\", \\\\\n                     \"${tmpdir}/${modified_hack_box_drawing_light_bold}\"]\nfontfamily        = \"${hackgen_box_drawing_light_familyname}\"\nfontfamilysuffix  = \"${hackgen_familyname_suffix}\"\nfontstyle_list    = [\"Regular\", \"Bold\"]\nfontweight_list   = [400,       700]\npanoseweight_list = [5,         8]\ncopyright         = \"${copyright}\"\nversion           = \"${hackgen_version}\"\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(fontstyle_list))\n  # Open new file\n  New()\n\n  # Set encoding to Unicode-bmp\n  Reencode(\"unicode\")\n\n  # Set configuration\n  if (fontfamilysuffix != \"\")\n        SetFontNames(fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily + \" \" + fontfamilysuffix, \\\\\n                     fontfamily + \" \" + fontfamilysuffix + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  else\n        SetFontNames(fontfamily + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily, \\\\\n                     fontfamily + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  endif\n  SetTTFName(0x409, 2, fontstyle_list[i])\n  SetTTFName(0x409, 3, \"FontForge 2.0 : \" + \\$fullname + \" : \" + Strftime(\"%d-%m-%Y\", 0))\n  ScaleToEm(${em_ascent}, ${em_descent})\n  SetOS2Value(\"Weight\", fontweight_list[i]) # Book or Bold\n  SetOS2Value(\"Width\",                   5) # Medium\n  SetOS2Value(\"FSType\",                  0)\n  SetOS2Value(\"VendorID\",           \"PfEd\")\n  SetOS2Value(\"IBMFamily\",            2057) # SS Typewriter Gothic\n  SetOS2Value(\"WinAscentIsOffset\",       0)\n  SetOS2Value(\"WinDescentIsOffset\",      0)\n  SetOS2Value(\"TypoAscentIsOffset\",      0)\n  SetOS2Value(\"TypoDescentIsOffset\",     0)\n  SetOS2Value(\"HHeadAscentIsOffset\",     0)\n  SetOS2Value(\"HHeadDescentIsOffset\",    0)\n  SetOS2Value(\"WinAscent\",             ${hackgen_ascent})\n  SetOS2Value(\"WinDescent\",            ${hackgen_descent})\n  SetOS2Value(\"TypoAscent\",            ${em_ascent})\n  SetOS2Value(\"TypoDescent\",          -${em_descent})\n  SetOS2Value(\"TypoLineGap\",           ${typo_line_gap})\n  SetOS2Value(\"HHeadAscent\",           ${hackgen_ascent})\n  SetOS2Value(\"HHeadDescent\",         -${hackgen_descent})\n  SetOS2Value(\"HHeadLineGap\",            0)\n  SetPanose([2, 11, panoseweight_list[i], 9, 2, 2, 3, 2, 2, 7])\n\n  # Merge Hack font\n  Print(\"Merge \" + hack_list[i]:t)\n  MergeFonts(hack_list[i])\n\n  # Save HackGen\n  if (fontfamilysuffix != \"\")\n        Print(\"Save \" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  else\n        Print(\"Save \" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  endif\n  Close()\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate extraction box drawing light for HackGen35\n########################################\n\ncat > ${tmpdir}/${hackgen35_box_drawing_light_generator} << _EOT_\n#!$fontforge_command -script\n\n# Print message\nPrint(\"Generate extraction box drawing light for HackGen35\")\n\n# Set parameters\nhack_list  = [\"${tmpdir}/${modified_hack35_box_drawing_light_regular}\", \\\\\n                     \"${tmpdir}/${modified_hack35_box_drawing_light_bold}\"]\nfontfamily        = \"${hackgen35_box_drawing_light_familyname}\"\nfontfamilysuffix  = \"${hackgen_familyname_suffix}\"\nfontstyle_list    = [\"Regular\", \"Bold\"]\nfontweight_list   = [400,       700]\npanoseweight_list = [5,         8]\ncopyright         = \"${copyright}\"\nversion           = \"${hackgen_version}\"\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(fontstyle_list))\n  # Open new file\n  New()\n\n  # Set encoding to Unicode-bmp\n  Reencode(\"unicode\")\n\n  # Set configuration\n  if (fontfamilysuffix != \"\")\n        SetFontNames(fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily + \" \" + fontfamilysuffix, \\\\\n                     fontfamily + \" \" + fontfamilysuffix + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  else\n        SetFontNames(fontfamily + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily, \\\\\n                     fontfamily + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  endif\n  SetTTFName(0x409, 2, fontstyle_list[i])\n  SetTTFName(0x409, 3, \"FontForge 2.0 : \" + \\$fullname + \" : \" + Strftime(\"%d-%m-%Y\", 0))\n  ScaleToEm(${em_ascent}, ${em_descent})\n  SetOS2Value(\"Weight\", fontweight_list[i]) # Book or Bold\n  SetOS2Value(\"Width\",                   5) # Medium\n  SetOS2Value(\"FSType\",                  0)\n  SetOS2Value(\"VendorID\",           \"PfEd\")\n  SetOS2Value(\"IBMFamily\",            2057) # SS Typewriter Gothic\n  SetOS2Value(\"WinAscentIsOffset\",       0)\n  SetOS2Value(\"WinDescentIsOffset\",      0)\n  SetOS2Value(\"TypoAscentIsOffset\",      0)\n  SetOS2Value(\"TypoDescentIsOffset\",     0)\n  SetOS2Value(\"HHeadAscentIsOffset\",     0)\n  SetOS2Value(\"HHeadDescentIsOffset\",    0)\n  SetOS2Value(\"WinAscent\",             ${hackgen35_ascent})\n  SetOS2Value(\"WinDescent\",            ${hackgen35_descent})\n  SetOS2Value(\"TypoAscent\",            ${em_ascent})\n  SetOS2Value(\"TypoDescent\",          -${em_descent})\n  SetOS2Value(\"TypoLineGap\",           ${typo_line_gap})\n  SetOS2Value(\"HHeadAscent\",           ${hackgen35_ascent})\n  SetOS2Value(\"HHeadDescent\",         -${hackgen35_descent})\n  SetOS2Value(\"HHeadLineGap\",            0)\n  SetPanose([2, 11, panoseweight_list[i], 3, 2, 2, 3, 2, 2, 7])\n\n  # Merge Hack font\n  Print(\"Merge \" + hack_list[i]:t)\n  MergeFonts(hack_list[i])\n\n  # Save HackGen\n  if (fontfamilysuffix != \"\")\n        Print(\"Save \" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  else\n        Print(\"Save \" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  endif\n  Close()\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for HackGen Console\n########################################\n\ncat > ${tmpdir}/${hackgen_console_generator} << _EOT_\n#!$fontforge_command -script\n\n# Print message\nPrint(\"Generate HackGen Console\")\n\n# Set parameters\nhack_list  = [\"${tmpdir}/${modified_hack_console_regular}\", \\\\\n                     \"${tmpdir}/${modified_hack_console_bold}\"]\nfontfamily        = \"${hackgen_familyname}\"\nfontfamilysuffix  = \"${hackgen_console_suffix}\"\nfontstyle_list    = [\"Regular\", \"Bold\"]\nfontweight_list   = [400,       700]\npanoseweight_list = [5,         8]\ncopyright         = \"${copyright}\"\nversion           = \"${hackgen_version}\"\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(fontstyle_list))\n  # Open new file\n  New()\n\n  # Set encoding to Unicode-bmp\n  Reencode(\"unicode\")\n\n  # Set configuration\n  if (fontfamilysuffix != \"\")\n        SetFontNames(fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily + \" \" + fontfamilysuffix, \\\\\n                     fontfamily + \" \" + fontfamilysuffix + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  else\n        SetFontNames(fontfamily + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily, \\\\\n                     fontfamily + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  endif\n  SetTTFName(0x409, 2, fontstyle_list[i])\n  SetTTFName(0x409, 3, \"FontForge 2.0 : \" + \\$fullname + \" : \" + Strftime(\"%d-%m-%Y\", 0))\n  ScaleToEm(${em_ascent}, ${em_descent})\n  SetOS2Value(\"Weight\", fontweight_list[i]) # Book or Bold\n  SetOS2Value(\"Width\",                   5) # Medium\n  SetOS2Value(\"FSType\",                  0)\n  SetOS2Value(\"VendorID\",           \"PfEd\")\n  SetOS2Value(\"IBMFamily\",            2057) # SS Typewriter Gothic\n  SetOS2Value(\"WinAscentIsOffset\",       0)\n  SetOS2Value(\"WinDescentIsOffset\",      0)\n  SetOS2Value(\"TypoAscentIsOffset\",      0)\n  SetOS2Value(\"TypoDescentIsOffset\",     0)\n  SetOS2Value(\"HHeadAscentIsOffset\",     0)\n  SetOS2Value(\"HHeadDescentIsOffset\",    0)\n  SetOS2Value(\"WinAscent\",             ${hackgen_ascent})\n  SetOS2Value(\"WinDescent\",            ${hackgen_descent})\n  SetOS2Value(\"TypoAscent\",            ${em_ascent})\n  SetOS2Value(\"TypoDescent\",          -${em_descent})\n  SetOS2Value(\"TypoLineGap\",           ${typo_line_gap})\n  SetOS2Value(\"HHeadAscent\",           ${hackgen_ascent})\n  SetOS2Value(\"HHeadDescent\",         -${hackgen_descent})\n  SetOS2Value(\"HHeadLineGap\",            0)\n  SetPanose([2, 11, panoseweight_list[i], 9, 2, 2, 3, 2, 2, 7])\n\n  # Merge Hack font\n  Print(\"Merge \" + hack_list[i]:t)\n  MergeFonts(hack_list[i])\n\n  # Save HackGen\n  if (fontfamilysuffix != \"\")\n        Print(\"Save \" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  else\n        Print(\"Save \" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  endif\n  Close()\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for HackGen35\n########################################\n\ncat > ${tmpdir}/${hackgen35_generator} << _EOT_\n#!$fontforge_command -script\n\n# Print message\nPrint(\"Generate HackGen35\")\n\n# Set parameters\nhack_list  = [\"${tmpdir}/${modified_hack35_regular}\", \\\\\n                     \"${tmpdir}/${modified_hack35_bold}\"]\nfontfamily        = \"${hackgen35_familyname}\"\nfontfamilysuffix  = \"${hackgen35_familyname_suffix}\"\nfontstyle_list    = [\"Regular\", \"Bold\"]\nfontweight_list   = [400,       700]\npanoseweight_list = [5,         8]\ncopyright         = \"${copyright}\"\nversion           = \"${hackgen_version}\"\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(fontstyle_list))\n  # Open new file\n  New()\n\n  # Set encoding to Unicode-bmp\n  Reencode(\"unicode\")\n\n  # Set configuration\n  if (fontfamilysuffix != \"\")\n        SetFontNames(fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily + \" \" + fontfamilysuffix, \\\\\n                     fontfamily + \" \" + fontfamilysuffix + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  else\n        SetFontNames(fontfamily + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily, \\\\\n                     fontfamily + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  endif\n  SetTTFName(0x409, 2, fontstyle_list[i])\n  SetTTFName(0x409, 3, \"FontForge 2.0 : \" + \\$fullname + \" : \" + Strftime(\"%d-%m-%Y\", 0))\n  ScaleToEm(${em_ascent}, ${em_descent})\n  SetOS2Value(\"Weight\", fontweight_list[i]) # Book or Bold\n  SetOS2Value(\"Width\",                   5) # Medium\n  SetOS2Value(\"FSType\",                  0)\n  SetOS2Value(\"VendorID\",           \"PfEd\")\n  SetOS2Value(\"IBMFamily\",            2057) # SS Typewriter Gothic\n  SetOS2Value(\"WinAscentIsOffset\",       0)\n  SetOS2Value(\"WinDescentIsOffset\",      0)\n  SetOS2Value(\"TypoAscentIsOffset\",      0)\n  SetOS2Value(\"TypoDescentIsOffset\",     0)\n  SetOS2Value(\"HHeadAscentIsOffset\",     0)\n  SetOS2Value(\"HHeadDescentIsOffset\",    0)\n  SetOS2Value(\"WinAscent\",             ${hackgen35_ascent})\n  SetOS2Value(\"WinDescent\",            ${hackgen35_descent})\n  SetOS2Value(\"TypoAscent\",            ${em_ascent})\n  SetOS2Value(\"TypoDescent\",          -${em_descent})\n  SetOS2Value(\"TypoLineGap\",           ${typo_line_gap})\n  SetOS2Value(\"HHeadAscent\",           ${hackgen35_ascent})\n  SetOS2Value(\"HHeadDescent\",         -${hackgen35_descent})\n  SetOS2Value(\"HHeadLineGap\",            0)\n  SetPanose([2, 11, panoseweight_list[i], 3, 2, 2, 3, 2, 2, 7])\n\n  # Merge Hack font\n  Print(\"Merge \" + hack_list[i]:t)\n  MergeFonts(hack_list[i])\n\n  # Save HackGen\n  if (fontfamilysuffix != \"\")\n        Print(\"Save \" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  else\n        Print(\"Save \" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  endif\n  Close()\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate script for HackGen35 Console\n########################################\n\ncat > ${tmpdir}/${hackgen35_console_generator} << _EOT_\n#!$fontforge_command -script\n\n# Print message\nPrint(\"Generate HackGen35 Console\")\n\n# Set parameters\nhack_list  = [\"${tmpdir}/${modified_hack35_console_regular}\", \\\\\n                     \"${tmpdir}/${modified_hack35_console_bold}\"]\nfontfamily        = \"${hackgen35_familyname}\"\nfontfamilysuffix  = \"${hackgen_console_suffix}\"\nfontstyle_list    = [\"Regular\", \"Bold\"]\nfontweight_list   = [400,       700]\npanoseweight_list = [5,         8]\ncopyright         = \"${copyright}\"\nversion           = \"${hackgen_version}\"\n\n# Begin loop of regular and bold\ni = 0\nwhile (i < SizeOf(fontstyle_list))\n  # Open new file\n  New()\n\n  # Set encoding to Unicode-bmp\n  Reencode(\"unicode\")\n\n  # Set configuration\n  if (fontfamilysuffix != \"\")\n        SetFontNames(fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily + \" \" + fontfamilysuffix, \\\\\n                     fontfamily + \" \" + fontfamilysuffix + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  else\n        SetFontNames(fontfamily + \"-\" + fontstyle_list[i], \\\\\n                     fontfamily, \\\\\n                     fontfamily + \" \" + fontstyle_list[i], \\\\\n                     fontstyle_list[i], \\\\\n                     copyright, version)\n  endif\n  SetTTFName(0x409, 2, fontstyle_list[i])\n  SetTTFName(0x409, 3, \"FontForge 2.0 : \" + \\$fullname + \" : \" + Strftime(\"%d-%m-%Y\", 0))\n  ScaleToEm(${em_ascent}, ${em_descent})\n  SetOS2Value(\"Weight\", fontweight_list[i]) # Book or Bold\n  SetOS2Value(\"Width\",                   5) # Medium\n  SetOS2Value(\"FSType\",                  0)\n  SetOS2Value(\"VendorID\",           \"PfEd\")\n  SetOS2Value(\"IBMFamily\",            2057) # SS Typewriter Gothic\n  SetOS2Value(\"WinAscentIsOffset\",       0)\n  SetOS2Value(\"WinDescentIsOffset\",      0)\n  SetOS2Value(\"TypoAscentIsOffset\",      0)\n  SetOS2Value(\"TypoDescentIsOffset\",     0)\n  SetOS2Value(\"HHeadAscentIsOffset\",     0)\n  SetOS2Value(\"HHeadDescentIsOffset\",    0)\n  SetOS2Value(\"WinAscent\",             ${hackgen35_ascent})\n  SetOS2Value(\"WinDescent\",            ${hackgen35_descent})\n  SetOS2Value(\"TypoAscent\",            ${em_ascent})\n  SetOS2Value(\"TypoDescent\",          -${em_descent})\n  SetOS2Value(\"TypoLineGap\",           ${typo_line_gap})\n  SetOS2Value(\"HHeadAscent\",           ${hackgen35_ascent})\n  SetOS2Value(\"HHeadDescent\",         -${hackgen35_descent})\n  SetOS2Value(\"HHeadLineGap\",            0)\n  SetPanose([2, 11, panoseweight_list[i], 3, 2, 2, 3, 2, 2, 7])\n\n  # Merge Hack font\n  Print(\"Merge \" + hack_list[i]:t)\n  MergeFonts(hack_list[i])\n\n  # Save HackGen\n  if (fontfamilysuffix != \"\")\n        Print(\"Save \" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + fontfamilysuffix + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  else\n        Print(\"Save \" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\")\n        Generate(\"${base_dir}/\" + fontfamily + \"-\" + fontstyle_list[i] + \".ttf\", \"\")\n  endif\n  Close()\n\n  i += 1\nendloop\n\nQuit()\n_EOT_\n\n########################################\n# Generate HackGen\n########################################\n\n# Generate Material\n$fontforge_command -script ${tmpdir}/${modified_hack_material_generator} 2> $redirection_stderr || exit 4\n\n# Generate Console\n$fontforge_command -script ${tmpdir}/${modified_hack_console_generator} 2> $redirection_stderr || exit 4\n\n# Generate Modiifed Hack\n$fontforge_command -script ${tmpdir}/${modified_hack_generator} 2> $redirection_stderr || exit 4\n\n# Generate Modified GenJyuu\n$fontforge_command -script ${tmpdir}/${modified_genjyuu_generator} 2> $redirection_stderr || exit 4\n\n# Generate powerline Symbol\n$fontforge_command -script ${tmpdir}/${modified_hack_powerline_generator} 2> $redirection_stderr || exit 4\n\n# Generate powerline Symbol\n$fontforge_command -script ${tmpdir}/${modified_hack35_powerline_generator} 2> $redirection_stderr || exit 4\n\n# Generate Modified HackGen Console Nerd Symbol\n$fontforge_command -script ${tmpdir}/${modified_hackgen_nerd_console_symbol_generator} 2> $redirection_stderr || exit 4\n\n# Generate Modified HackGen35 Console Nerd Symbol\n$fontforge_command -script ${tmpdir}/${modified_hackgen35_nerd_console_symbol_generator} 2> $redirection_stderr || exit 4\n\n# Generate Hack evacuation symbol\n$fontforge_command -script ${tmpdir}/${modified_hack_evacuate_from_hinting_generator} 2> $redirection_stderr || exit 4\n\n# Generate Hack 35 evacuation symbol\n$fontforge_command -script ${tmpdir}/${modified_hack35_evacuate_from_hinting_generator} 2> $redirection_stderr || exit 4\n\n# Generate Hack box drawing light symbols\n$fontforge_command -script ${tmpdir}/${modified_hack_box_drawing_light_generator} 2> $redirection_stderr || exit 4\n\n# Generate Hack 35 box drawing light evacuation symbols\n$fontforge_command -script ${tmpdir}/${modified_hack35_box_drawing_light_generator} 2> $redirection_stderr || exit 4\n\n# Generate Modified GenJyuu Console\n$fontforge_command -script ${tmpdir}/${modified_genjyuu_console_generator} 2> $redirection_stderr || exit 4\n\n# Generate HackGen\n$fontforge_command -script ${tmpdir}/${hackgen_generator} 2> $redirection_stderr || exit 4\n\n# Generate HackGen Console\n$fontforge_command -script ${tmpdir}/${hackgen_console_generator} 2> $redirection_stderr || exit 4\n\n# Generate Console - 35\n$fontforge_command -script ${tmpdir}/${modified_hack35_console_generator} 2> $redirection_stderr || exit 4\n\n# Generate Modiifed Hack - 35\n$fontforge_command -script ${tmpdir}/${modified_hack35_generator} 2> $redirection_stderr || exit 4\n\n# Generate Modified GenJyuu - 35\n$fontforge_command -script ${tmpdir}/${modified_genjyuu35_generator} 2> $redirection_stderr || exit 4\n\n# Generate Modified GenJyuu Console - 35\n$fontforge_command -script ${tmpdir}/${modified_genjyuu35_console_generator} 2> $redirection_stderr || exit 4\n\n# Generate HackGen - 35\n$fontforge_command -script ${tmpdir}/${hackgen35_generator} 2> $redirection_stderr || exit 4\n\n# Generate HackGen Console - 35\n$fontforge_command -script ${tmpdir}/${hackgen35_console_generator} 2> $redirection_stderr || exit 4\n\n# Generate HackGen Nerd Symbol\n$fontforge_command -script ${tmpdir}/${hackgen_nerd_console_symbol_generator} 2> $redirection_stderr || exit 4\n\n# Generate HackGen35 Nerd Symbol\n$fontforge_command -script ${tmpdir}/${hackgen35_nerd_console_symbol_generator} 2> $redirection_stderr || exit 4\n\n# Generate HackGen evacuation symbol from hinting\n$fontforge_command -script ${tmpdir}/${hackgen_evacuate_from_hinting_generator} 2> $redirection_stderr || exit 4\n\n# Generate HackGen35 evacuation symbol from hinting\n$fontforge_command -script ${tmpdir}/${hackgen35_evacuate_from_hinting_generator} 2> $redirection_stderr || exit 4\n\n# Generate HackGen box drawing light symbols from hinting\n$fontforge_command -script ${tmpdir}/${hackgen_box_drawing_light_generator} 2> $redirection_stderr || exit 4\n\n# Generate HackGen35 box drawing light symbols from hinting\n$fontforge_command -script ${tmpdir}/${hackgen35_box_drawing_light_generator} 2> $redirection_stderr || exit 4\n\n# Add hinting HackGen Regular\nfor f in ${hackgen_familyname}-Regular.ttf ${hackgen_familyname}${hackgen_console_suffix}-Regular.ttf\ndo\n  ttfautohint -m hinting_post_processing/hackgen-regular-ctrl.txt -l 6 -r 45 -X \"12-\" -a nnn -D latn -W -I \"$f\" \"hinted_${f}\"\ndone\n# Add hinting HackGen Bold\nfor f in ${hackgen_familyname}-Bold.ttf ${hackgen_familyname}${hackgen_console_suffix}-Bold.ttf\ndo\n  ttfautohint -m hinting_post_processing/hackgen-bold-ctrl.txt -l 6 -r 45 -X \"12-\" -a nnn -D latn -W -I \"$f\" \"hinted_${f}\"\ndone\n# Add hinting HackGen35 Regular\nfor f in ${hackgen35_familyname}-Regular.ttf ${hackgen35_familyname}${hackgen_console_suffix}-Regular.ttf\ndo\n  ttfautohint -m hinting_post_processing/hackgen35-regular-ctrl.txt -l 6 -r 45 -X \"12-\" -a qsq -D latn -W -I \"$f\" \"hinted_${f}\"\ndone\n# Add hinting HackGen35 Bold\nfor f in ${hackgen35_familyname}-Bold.ttf ${hackgen35_familyname}${hackgen_console_suffix}-Bold.ttf\ndo\n  ttfautohint -m hinting_post_processing/hackgen35-bold-ctrl.txt -l 6 -r 45 -X \"12-\" -a qsq -D latn -W -I \"$f\" \"hinted_${f}\"\ndone\n\nfor style in Regular Bold\ndo\n  if [ \"${style}\" = 'Regular' ]; then\n    marge_genjyuu_regular=\"${tmpdir}/${modified_genjyuu_regular}.ttf\"\n    marge_genjyuu_console_regular=\"${tmpdir}/${modified_genjyuu_console_regular}.ttf\"\n    marge_genjyuu35_regular=\"${tmpdir}/${modified_genjyuu35_regular}.ttf\"\n    marge_genjyuu35_console_regular=\"${tmpdir}/${modified_genjyuu35_console_regular}.ttf\"\n  fi\n  if [ \"${style}\" = 'Bold' ]; then\n    marge_genjyuu_regular=\"${tmpdir}/${modified_genjyuu_bold}.ttf\"\n    marge_genjyuu_console_regular=\"${tmpdir}/${modified_genjyuu_console_bold}.ttf\"\n    marge_genjyuu35_regular=\"${tmpdir}/${modified_genjyuu35_bold}.ttf\"\n    marge_genjyuu35_console_regular=\"${tmpdir}/${modified_genjyuu35_console_bold}.ttf\"\n  fi\n\n  hackgen_filename=\"${hackgen_familyname}-${style}.ttf\"\n  hackgen_console_filename=\"${hackgen_familyname}${hackgen_console_suffix}-${style}.ttf\"\n  hackgen35_filename=\"${hackgen35_familyname}-${style}.ttf\"\n  hackgen35_console_filename=\"${hackgen35_familyname}${hackgen_console_suffix}-${style}.ttf\"\n\n  hackgen_nerd_console_filename=\"${hackgen_familyname}${hackgen_console_suffix}${hackgen_nerd_suffix}-${style}.ttf\"\n  hackgen35_nerd_console_filename=\"${hackgen35_familyname}${hackgen_console_suffix}${hackgen_nerd_suffix}-${style}.ttf\"\n\n  # pyftmergeの出力ファイル名が\"merged.ttf\"で固定なので、並列処理時に競合しないように、それぞれ別のフォルダで作業する\n\n  cdAutoMakeDir() {\n    mkdir -p \"$1\"\n    cd \"$1\"\n  }\n\n  # HackGen\n  echo \"Start pyftmerge: ${hackgen_filename}\"\n  (\n    cdAutoMakeDir \"${tmpdir}/parallel_merge/${hackgen_filename}\"\n    pyftmerge \"${base_dir}/hinted_${hackgen_filename}\" \"${base_dir}/${hackgen_evacuation_symbol_familyname}${hackgen_familyname_suffix}-${style}.ttf\"\n    pyftmerge merged.ttf \"$marge_genjyuu_regular\"\n    mv merged.ttf \"${base_dir}/${hackgen_filename}\"\n  ) > \"${tmpdir}/${hackgen_filename}.pyftmerge_output\" 2>&1 &\n\n  # HackGen Console\n  echo \"Start pyftmerge: ${hackgen_console_filename}\"\n  (\n    cdAutoMakeDir \"${tmpdir}/parallel_merge/${hackgen_console_filename}\"\n    pyftmerge \"${base_dir}/hinted_${hackgen_console_filename}\" \"${base_dir}/${hackgen_evacuation_symbol_familyname}${hackgen_familyname_suffix}-${style}.ttf\"\n    pyftmerge merged.ttf \"${base_dir}/${hackgen_box_drawing_light_familyname}${hackgen_familyname_suffix}-${style}.ttf\"\n    pyftmerge merged.ttf \"$marge_genjyuu_console_regular\"\n    mv merged.ttf \"${base_dir}/${hackgen_console_filename}\"\n  ) > \"${tmpdir}/${hackgen_console_filename}.pyftmerge_output\" 2>&1 &\n\n  # HackGen35\n  echo \"Start pyftmerge: ${hackgen35_filename}\"\n  (\n    cdAutoMakeDir \"${tmpdir}/parallel_merge/${hackgen35_filename}\"\n    pyftmerge \"${base_dir}/hinted_${hackgen35_filename}\" \"${base_dir}/${hackgen35_evacuation_symbol_familyname}${hackgen35_familyname_suffix}-${style}.ttf\"\n    pyftmerge merged.ttf \"$marge_genjyuu35_regular\"\n    mv merged.ttf \"${base_dir}/${hackgen35_filename}\"\n  ) > \"${tmpdir}/${hackgen35_filename}.pyftmerge_output\" 2>&1 &\n\n  # HackGen35 Console\n  echo \"Start pyftmerge: ${hackgen35_console_filename}\"\n  (\n    cdAutoMakeDir \"${tmpdir}/parallel_merge/${hackgen35_console_filename}\"\n    pyftmerge \"${base_dir}/hinted_${hackgen35_console_filename}\" \"${base_dir}/${hackgen35_evacuation_symbol_familyname}${hackgen35_familyname_suffix}-${style}.ttf\"\n    pyftmerge merged.ttf \"${base_dir}/${hackgen35_box_drawing_light_familyname}${hackgen35_familyname_suffix}-${style}.ttf\"\n    pyftmerge merged.ttf \"$marge_genjyuu35_console_regular\"\n    mv merged.ttf \"${base_dir}/${hackgen35_console_filename}\"\n  ) > \"${tmpdir}/${hackgen35_console_filename}.pyftmerge_output\" 2>&1 &\n\n  # HackGen Console NF\n  echo \"Start pyftmerge: ${hackgen_nerd_console_filename}\"\n  (\n    cdAutoMakeDir \"${tmpdir}/parallel_merge/${hackgen_nerd_console_filename}\"\n    pyftmerge \"${base_dir}/hinted_${hackgen_console_filename}\" \"${base_dir}/${hackgen_evacuation_symbol_familyname}${hackgen_familyname_suffix}-${style}.ttf\"\n    pyftmerge merged.ttf \"${base_dir}/${hackgen_box_drawing_light_familyname}${hackgen_familyname_suffix}-${style}.ttf\"\n    pyftmerge merged.ttf \"${base_dir}/${hackgen_evacuation_nerd_familyname}${hackgen_console_suffix}-${style}.ttf\"\n    pyftmerge merged.ttf \"$marge_genjyuu_console_regular\"\n    mv merged.ttf \"${base_dir}/${hackgen_nerd_console_filename}\"\n    \n    cd \"${base_dir}\"\n    ttx -t name \"${hackgen_nerd_console_filename}\"\n    sed -i -e 's/HackGen Console/HackGen Console NF/g; s/HackGenConsole/HackGenConsoleNF/g' \"${hackgen_nerd_console_filename%%.ttf}.ttx\"\n    mv \"${hackgen_nerd_console_filename}\" \"${hackgen_nerd_console_filename}_orig\"\n    ttx -m \"${hackgen_nerd_console_filename}_orig\" \"${hackgen_nerd_console_filename%%.ttf}.ttx\"\n  ) > \"${tmpdir}/${hackgen_nerd_console_filename}.pyftmerge_output\" 2>&1 &\n\n  # HackGen35 Console NF\n  echo \"Start pyftmerge: ${hackgen35_nerd_console_filename}\"\n  (\n    cdAutoMakeDir \"${tmpdir}/parallel_merge/${hackgen35_nerd_console_filename}\"\n    pyftmerge \"${base_dir}/hinted_${hackgen35_console_filename}\" \"${base_dir}/${hackgen35_evacuation_symbol_familyname}${hackgen35_familyname_suffix}-${style}.ttf\"\n    pyftmerge merged.ttf \"${base_dir}/${hackgen35_box_drawing_light_familyname}${hackgen35_familyname_suffix}-${style}.ttf\"\n    pyftmerge merged.ttf \"${base_dir}/${hackgen35_evacuation_nerd_familyname}${hackgen_console_suffix}-${style}.ttf\"\n    pyftmerge merged.ttf \"$marge_genjyuu35_console_regular\"\n    mv merged.ttf \"${base_dir}/${hackgen35_nerd_console_filename}\"\n    \n    cd \"${base_dir}\"\n    ttx -t name \"${hackgen35_nerd_console_filename}\"\n    sed -i -e 's/HackGen35 Console/HackGen35 Console NF/g; s/HackGen35Console/HackGen35ConsoleNF/g' \"${hackgen35_nerd_console_filename%%.ttf}.ttx\"\n    mv \"${hackgen35_nerd_console_filename}\" \"${hackgen35_nerd_console_filename}_orig\"\n    ttx -m \"${hackgen35_nerd_console_filename}_orig\" \"${hackgen35_nerd_console_filename%%.ttf}.ttx\"\n  ) > \"${tmpdir}/${hackgen35_nerd_console_filename}.pyftmerge_output\" 2>&1 &\n\n  wait\n  \n  # 並列処理からの出力内容をまとめて出力\n  pyftmerged_ttf_files=\"\n    ${hackgen_filename}\n    ${hackgen_console_filename}\n    ${hackgen35_filename}\n    ${hackgen35_console_filename}\n    ${hackgen_nerd_console_filename}\n    ${hackgen35_nerd_console_filename}\n  \"\n  for ttf_file in $pyftmerged_ttf_files\n  do\n    output_filename=\"${ttf_file}.pyftmerge_output\"\n    echo \"$output_filename\" | sed -r \"s/(.+)\\.pyftmerge_output/# pyftmerge output: \\1/\"\n    cat \"${tmpdir}/${output_filename}\"\n    rm \"${tmpdir}/${output_filename}\"\n  done\n\ndone\n\nrm -f hinted_*.ttf\nrm -f \"${hackgen_evacuation_symbol_familyname}\"*.ttf\nrm -f \"${hackgen35_evacuation_symbol_familyname}\"*.ttf\nrm -f \"${hackgen_evacuation_nerd_familyname}\"*.ttf\nrm -f \"${hackgen35_evacuation_nerd_familyname}\"*.ttf\nrm -f \"${hackgen_box_drawing_light_familyname}\"*.ttf\nrm -f \"${hackgen35_box_drawing_light_familyname}\"*.ttf\n\n# Remove temporary directory\nif [ \"${leaving_tmp_flag}\" = \"false\" ]\nthen\n  echo \"Remove temporary files\"\n  rm -rf $tmpdir\nfi\n\n# Exit\necho \"Succeeded in generating HackGen!\"\nexit 0\n"
        },
        {
          "name": "hinting_post_processing",
          "type": "tree",
          "content": null
        },
        {
          "name": "little_scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "make_hackgen.sh",
          "type": "blob",
          "size": 0.392578125,
          "content": "#!/bin/bash\n\nhackgen_version=\"2.10.0\"\n\nBASE_DIR=$(cd $(dirname $0); pwd)\nPREFIX=\"$1\"\n\nfunction mvBuild() {\n  mkdir -p \"${BASE_DIR}/build/\"\n  mv -f \"${BASE_DIR}/\"HackGen*.ttf \"${BASE_DIR}/build/\"\n}\n\n\"${BASE_DIR}/hackgen_generator.sh\" \"$PREFIX\" \"$hackgen_version\" \\\n&& \"${BASE_DIR}/copyright.sh\" \"$PREFIX\" \\\n&& \"${BASE_DIR}/os2_patch.sh\" \"$PREFIX\" \\\n&& \"${BASE_DIR}/cmap_patch.sh\" \"$PREFIX\" \\\n&& mvBuild\n"
        },
        {
          "name": "os2_patch.sh",
          "type": "blob",
          "size": 2.80859375,
          "content": "#!/bin/bash\n\nBASE_DIR=$(cd $(dirname $0); pwd)\nPREFIX=\"$1\"\n\nxAvgCharWidth_SETVAL=540\nHACKGEN_PATTERN=${PREFIX}'HackGen[^3]*.ttf'\n\nxAvgCharWidth53_SETVAL=1030\nHACKGEN53_PATTERN=${PREFIX}'HackGen35*.ttf'\n\nfor P in ${BASE_DIR}/${HACKGEN_PATTERN}; do\n  ttx -t OS/2 -t post \"$P\"\n\n  xAvgCharWidth_value=$(grep xAvgCharWidth \"${P%%.ttf}.ttx\" | awk -F\\\" '{print $2}')\n  sed -i.bak -e 's,xAvgCharWidth value=\"'$xAvgCharWidth_value'\",xAvgCharWidth value=\"'${xAvgCharWidth_SETVAL}'\",' \"${P%%.ttf}.ttx\"\n\n  fsSelection_value=$(grep fsSelection \"${P%%.ttf}.ttx\" | awk -F\\\" '{print $2}')\n  if [ `echo $P | grep Regular` ]; then\n    fsSelection_sed_value='00000000 01000000'\n  elif [ `echo $P | grep BoldOblique` ]; then\n    fsSelection_sed_value='00000000 00100001'\n  elif [ `echo $P | grep Bold` ]; then\n    fsSelection_sed_value='00000000 00100000'\n  elif [ `echo $P | grep Oblique` ]; then\n    fsSelection_sed_value='00000000 00000001'\n  fi\n  sed -i.bak -e 's,fsSelection value=\"'\"$fsSelection_value\"'\",fsSelection value=\"'\"$fsSelection_sed_value\"'\",' \"${P%%.ttf}.ttx\"\n\n  underlinePosition_value=$(grep 'underlinePosition value' \"${P%%.ttf}.ttx\" | awk -F\\\" '{print $2}')\n  sed -i.bak -e 's,underlinePosition value=\"'$underlinePosition_value'\",underlinePosition value=\"-70\",' \"${P%%.ttf}.ttx\"\n\n  sed -i.bak -e 's,<isFixedPitch value=\"0\"/>,<isFixedPitch value=\"1\"/>,' \"${P%%.ttf}.ttx\"\n\n  mv \"$P\" \"${P}_orig\"\n  ttx -m \"${P}_orig\" \"${P%%.ttf}.ttx\"\n  \n  if [ $? -eq 0 ]; then\n    mv \"${P}_orig\" \"${BASE_DIR}/bak/\"\n    mv \"${P%%.ttf}.ttx\" \"${BASE_DIR}/bak/\"\n    rm \"${P%%.ttf}.ttx.bak\"\n  fi\ndone\n\nfor P in ${BASE_DIR}/${HACKGEN53_PATTERN}; do\n  ttx -t OS/2 -t post \"$P\"\n\n  xAvgCharWidth_value=$(grep xAvgCharWidth \"${P%%.ttf}.ttx\" | awk -F\\\" '{print $2}')\n  sed -i.bak -e 's,xAvgCharWidth value=\"'$xAvgCharWidth_value'\",xAvgCharWidth value=\"'${xAvgCharWidth53_SETVAL}'\",' \"${P%%.ttf}.ttx\"\n\n  fsSelection_value=$(grep fsSelection \"${P%%.ttf}.ttx\" | awk -F\\\" '{print $2}')\n  if [ `echo $P | grep Regular` ]; then\n    fsSelection_sed_value='00000000 01000000'\n  elif [ `echo $P | grep BoldOblique` ]; then\n    fsSelection_sed_value='00000000 00100001'\n  elif [ `echo $P | grep Bold` ]; then\n    fsSelection_sed_value='00000000 00100000'\n  elif [ `echo $P | grep Oblique` ]; then\n    fsSelection_sed_value='00000000 00000001'\n  fi\n  sed -i.bak -e 's,fsSelection value=\"'\"$fsSelection_value\"'\",fsSelection value=\"'\"$fsSelection_sed_value\"'\",' \"${P%%.ttf}.ttx\"\n\n  underlinePosition_value=$(grep 'underlinePosition value' \"${P%%.ttf}.ttx\" | awk -F\\\" '{print $2}')\n  sed -i.bak -e 's,underlinePosition value=\"'$underlinePosition_value'\",underlinePosition value=\"-70\",' \"${P%%.ttf}.ttx\"\n\n  mv \"$P\" \"${P}_orig\"\n  ttx -m \"${P}_orig\" \"${P%%.ttf}.ttx\"\n  \n  if [ $? -eq 0 ]; then\n    mv -f \"${P}_orig\" \"${BASE_DIR}/bak/\"\n    mv -f \"${P%%.ttf}.ttx\" \"${BASE_DIR}/bak/\"\n    rm -f \"${P%%.ttf}.ttx.bak\"\n  fi\ndone\n"
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}