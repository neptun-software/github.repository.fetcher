{
  "metadata": {
    "timestamp": 1736568195344,
    "page": 33,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jedi4ever/veewee",
      "stars": 4283,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bundle",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0927734375,
          "content": "#ensures shell scripts aren't broken when checking out on Windows (see issue #805)\n*.sh eol=lf\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2890625,
          "content": ".DS_Store\n.bundle\nGemfile.lock\ngems/*\niso/*\niso\n*.ova\ntmp/*\ndefinitions/*\nVagrantfile\nVagrantfile.*\n!lib/veewee/templates/Vagrantfile.erb\n!lib/veewee/provider/kvm/templates/Vagrantfile\ncookbooks/*\nmanifests/*\nboxes/*\npkg/*\n*.box\n.vagrant\nvirtualfloppy.vfd\n*.swp\nAutoPartition.app\n.rvmrc\n.project\n"
        },
        {
          "name": ".ruby-gemset",
          "type": "blob",
          "size": 0.0068359375,
          "content": "veewee\n"
        },
        {
          "name": ".ruby-version",
          "type": "blob",
          "size": 0.0107421875,
          "content": "ruby-2.2.1\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1796875,
          "content": "language: ruby\nrvm:\n  - 1.9.3\n  - 2.0\n  - 2.1\nsudo: false\ncache: bundler\nbefore_script:\n  - rvm rubygems latest\n  - gem update bundler\nnotifications:\n  irc: \"chat.freenode.net#veewee\"\n"
        },
        {
          "name": "CONTRIBUTE.md",
          "type": "blob",
          "size": 1.82421875,
          "content": "# Contribute to Veewee\n\nIf you are looking to improve Veewee in some manner, you've come to the right place.\n\n\n## TODOs\n\nA running [TODO](doc/TODO.md) list is available for ideas on future improvements.\n\n\n## Steps to Contribute\n\n### Getting started\n\nIn order to contribute anything, you'll want to follow these steps first:\n\n* Get an account on [Github](https://github.com)\n* Then fork the [veewee repository](https://github.com/jedi4ever/veewee) to your own Github account\n* If you haven't already, familiarize yourself with the [Requirements](doc/requirements.md) and [Installation](doc/installation.md) docs\n* Clone the veewee **fork** to your machine:\n\n    ~~~ sh\n    $ cd <path_to_workspace>\n    $ git clone https://github.com/<your github account>/veewee.git\n    $ cd veewee\n    ~~~\n\n* Check out a new branch to make your changes on: `git checkout -b <your_new_patch>`\n\n\n### For adding a new Template\n\nIf you have a new and amazing Veewee definition, share your 'template'. That would be fun!\n\n* Before saving changes to a 'template', first try your changes in `definitions/mynewos/`\n* Build the box and run the **validation** tests\n* When the box builds OK and all tests are green, move `definition/mynewos/` to a sensible directory under the `templates/` directory. **Hint:** Follow the same naming schema of existing boxes (explained in the [Veewee Basics](doc/basics.md) doc)\n\n\n### For adding new Features\n\n* Run any existing tests that are related to your patch\n* For bonus points add tests to validate your changes\n\n\n### To submit your Contribution\n\n* Please commit with descriptive messages\n* Submit a pull request on Github from the __your_new_patch__ branch on __your fork__ to the __master__ branch on __jedi4ever/veewee__\n* One of the editors will review the change, and either merge it or provide some feedback. Community review is also encouraged.\n\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.4326171875,
          "content": "#if RUBY_VERSION =~ /1.9/\n    #Encoding.default_external = Encoding::UTF_8\n    #Encoding.default_internal = Encoding::UTF_8\n#end\n\nsource \"https://rubygems.org\"\n\n#gem \"veewee\", :path => \".\"\n#gem \"fission\", :path => '/Users/patrick/dev/fission'\n\ngroup :kvm do\n  gem \"ruby-libvirt\"\nend\n\ngroup :windows do\n  gem \"em-winrm\"\n  gem \"log4r\"\nend\n\ngroup :test do\n  gem \"rake\"\n  #gem \"vagrant\" , \"1.0.7\"\n  #gem \"chef\"\n  #gem \"knife-windows\"\nend\n\ngemspec\n"
        },
        {
          "name": "License",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License\n\nCopyright (c) 2010-2012 Patrick Debois\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.8955078125,
          "content": "# Veewee\n\n[![Build Status](https://travis-ci.org/jedi4ever/veewee.png)](https://travis-ci.org/jedi4ever/veewee)\n\nVeewee is a tool for easily (and repeatedly) building custom [Vagrant](https://github.com/mitchellh/vagrant) base boxes, KVMs, and virtual machine images.\n\n\n## About Vagrant\n\nVagrant is a great tool for creating and configuring lightweight, reproducible, portable virtual machine environments - often used with the addition of automation tools such as [Chef](https://github.com/opscode/chef) or [Puppet](https://github.com/puppetlabs/puppet).\n\nThe first step to build a new virtual machine is to download an existing 'base box'. I believe this scares a lot of people as they don't know how these unverified boxes were built. Therefore a lot of people end up building their own base box which is often time consuming and cumbersome. Veewee aims to automate all the steps for building base boxes and to collect best practices in a transparent way.\n\n\n## Veewee's Supported VM Providers\n\nVeewee isn't only for Vagrant.  It currently supports exporting VM images for the following providers:\n\n* [VirtualBox](http://www.virtualbox.org/) - exports to `OVF` filetype\n* [VMware (Fusion)](http://www.vmware.com/products/fusion/) - exports to `OVA` filetype\n* [KVM](http://www.linux-kvm.org/) - exports to `IMG` filetype\n* [Parallels](http://www.parallels.com/) - none yet, but can export to `parallels` format (provided by [vagrant-parallels](https://github.com/yshahin/vagrant-parallels))\n\n\n## Getting Started\n\nBefore you start, we recommend reading through these pages:\n\n* [Requirements](doc/requirements.md) that must be met before installing Veewee\n* [Veewee Installation](doc/installation.md) instructions\n* [Command Options](doc/commands.md) highlights various approaches for executing Veewee on the command line\n\nNext, learn about Veewee fundamentals:\n\n* [Veewee Basics](doc/basics.md) covers creating standard-issue boxes\n* [Customizing Definitions](doc/customize.md) helps you fine tune each box definition to meet your exact needs\n* [Veeweefile](doc/veeweefile.md) can be used to define your own paths\n\nThen depending on how you want to use Veewee, we suggest to read through one of the following guides:\n\n* [Guide for Vagrant](doc/vagrant.md)\n* [Guide for VirtualBox](doc/vbox.md)\n* [Guide for VMware Fusion](doc/fusion.md)\n* [Guide for KVM](doc/kvm.md)\n* [Guide for Parallels Desktop](doc/parallels.md)\n\nMajor noteworthy changes between versions can be found here:\n\n* [Changes](doc/changes.md) between versions\n\nA complete list of all docs can be found by viewing the [doc directory](doc).\n\n\n## Veewee Commands\n\nBelow is an overview of the `veewee` command options:\n\n    $ bundle exec veewee\n\n    # Commands:\n    #   veewee add_share       # Adds a Share to the Guest\n    #   veewee fusion          # Subcommand for Vmware fusion\n    #   veewee help [COMMAND]  # Describe available commands or one specific command\n    #   veewee kvm             # Subcommand for KVM\n    #   veewee parallels       # Subcommand for Parallels\n    #   veewee vbox            # Subcommand for VirtualBox\n    #   veewee version         # Prints the Veewee version information\n\nLearn how to avoid typing `bundle exec` by visiting the [Commands](doc/commands.md) doc.\n\n\n## Veewee Provider Subcommands\n\nBelow is an overview of the `veewee` provider subcommand options:\n\n    $ bundle exec veewee <provider>\n\n    # Commands:\n    #   veewee <provider> build [BOX_NAME]                 # Build box\n    #   veewee <provider> copy [BOXNAME] [SRC] [DST]       # Copy a file to the VM\n    #   veewee <provider> define [BOXNAME] [TEMPLATE]      # Define a new basebox starting from a template\n    #   veewee <provider> destroy [BOXNAME]                # Destroys the basebox that was built\n    #   veewee <provider> halt [BOXNAME]                   # Activates a shutdown on the basebox\n    #   veewee <provider> help [COMMAND]                   # Describe subcommands or one specific subcommand\n    #   veewee <provider> list                             # Lists all defined boxes\n    #   veewee <provider> ostypes                          # List the available Operating System types\n    #   veewee <provider> screenshot [NAME] [PNGFILENAME]  # Takes a screenshot of the box\n    #   veewee <provider> ssh [BOXNAME] [COMMAND]          # Interactive ssh login\n    #   veewee <provider> templates                        # List the currently available templates\n    #   veewee <provider> undefine [BOXNAME]               # Removes the definition of a basebox\n    #   veewee <provider> up [BOXNAME]                     # Starts a Box\n    #   veewee <provider> validate [NAME]                  # Validates a box against vagrant compliancy rules\n    #   veewee <provider> winrm [BOXNAME] [COMMAND]        # Execute command via winrm\n\n\n## Contribute\n\nPeople have reported good experiences, why don't you give it a try?\n\nIf you have a setup working, share your 'definition' with me. That would be fun!\n\nSee [CONTRIBUTE.md](CONTRIBUTE.md).\n\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 3.5771484375,
          "content": "require 'rubygems'\nrequire 'bundler'\nrequire 'bundler/setup'\nrequire 'veewee'\nBundler::GemHelper.install_tasks\n\ndesc 'Default: run tests'\ntask :default => :test\n\nrequire 'rake/testtask'\n\ndesc 'Tests not requiring an real box'\nRake::TestTask.new do |t|\n  t.libs << \"test\"\n  t.pattern = 'test/**/*_test.rb'\nend\n\ndesc 'Tests requiring an real box'\nRake::TestTask.new do |t|\n  t.name=\"realtest\"\n  t.libs << \"test\"\n  t.libs << \".\"\n  t.pattern = 'test/**/*_realtest.rb'\nend\n\ndesc 'Verify ISO'\ntask :iso, [:template_name] do |t, args|\n  require 'net/http'\n  #if args.to_hash.size!=1\n  #puts \"needs one arguments: rake iso [\\\"yourname\\\"]\"\n  #exit\n  #end\n  Dir.glob(\"templates/*\").each do |name|\n    definition_name = File.basename(name)\n    puts name\n    definition = Veewee::Environment.new(:cwd => \".\", :definition_dir => \"templates\").definitions[definition_name]\n    next if definition.nil? || definition.iso_src.nil? || definition.iso_src == \"\"\n    begin\n      url = definition.iso_src\n      found = false\n      response = nil\n      while found == false\n        uri = URI.parse(url)\n        if uri.is_a?(URI::HTTP)\n          Net::HTTP.start(uri.host, uri.port) { |http|\n            response = http.head(uri.path)\n          }\n          unless response['location'].nil?\n            #puts \"Redirecting to \"+response['location']\n            url = response['location']\n          else\n            length = response['content-length']\n            found = true\n          end\n        elsif uri.is_a?(URI::FTP)\n          require 'net/ftp'\n          ftp = Net::FTP.new(uri.host)\n          ftp.login\n          begin\n            length = ftp.size(uri.path)\n            found = true\n          rescue Net::FTPReplyError => e\n            reply = e.message\n            err_code = reply[0, 3].to_i\n            unless err_code == 500 || err_code == 502\n              # other problem, raise\n              raise \"Got ftp site but doesn't support size subcommand\"\n            end\n            # fallback solution\n          end\n\n        end\n      end\n      if length.to_i < 10000\n        puts definition.iso_src\n        puts \"Incorrect length #{length.to_i}\"\n        puts uri.host, uri.port, uri.path, response.code\n      end\n    rescue Exception => ex\n      puts \"Error\" + ex.to_s + definition.iso_src\n    end\n  end\nend\n\ndesc 'Builds a template and runs validation.'\ntask :autotest, [:name] do |t, args|\n\n  # Disable color if the proper argument was passed\n  shell = ARGV.include?(\"--no-color\") ? Thor::Shell::Basic.new : Thor::Base.shell.new\n\n  # We overrule all timeouts for tcp and ssh\n  #ENV['VEEWEE_TIMEOUT']='600'\n\n  ve = Veewee::Environment.new\n  ve.ui = ::Veewee::UI::Shell.new(ve, shell)\n  ve.templates.each do |name, template|\n\n    # If pattern was given, only take the ones that match the pattern\n    unless args[:name].nil?\n      next unless name == args[:name]\n    end\n\n    begin\n      ve.definitions.define(\"auto\", name, { 'force' => true })\n      vd = ve.definitions[\"auto\"]\n      box = ve.providers[\"virtualbox\"].get_box(\"auto\")\n      puts \"AUTO: Building #{name}\"\n      box.build({ \"auto\" => true, \"force\" => true, 'nogui' => true })\n      puts \"AUTO: Validating #{name}\"\n      box.validate_vagrant({'tags' => ['virtualbox']})\n      puts \"AUTO: Success #{name}\"\n      box.destroy\n    rescue Exception => ex\n      puts \"AUTO: Template #{name} failed - #{ex}\"\n      if box.running?\n        begin\n          screenshot = \"screenshot-auto-#{name}.png\"\n          puts \"AUTO: Taking snapshot #{screenshot}\"\n          box.screenshot(screenshot)\n        rescue Veewee::Error => ex\n          puts \"AUTO: Error taking screenshot\"\n        end\n      end\n      exit -1\n    end\n\n  end\nend\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "validation",
          "type": "tree",
          "content": null
        },
        {
          "name": "veewee.gemspec",
          "type": "blob",
          "size": 2.255859375,
          "content": "# -*- encoding: utf-8 -*-\nrequire File.expand_path(\"../lib/veewee/version\", __FILE__)\n\nGem::Specification.new do |s|\n  s.name        = \"veewee\"\n  s.version     = Veewee::VERSION\n  s.platform    = Gem::Platform::RUBY\n  s.license     = 'MIT'\n  s.authors     = [\"Patrick Debois\"]\n  s.email       = [\"patrick.debois@jedi.be\"]\n  s.homepage    = \"http://github.com/jedi4ever/veewee/\"\n  s.summary     = %q{Vagrant box creation}\n  s.description = %q{Expand the 'vagrant box' command to support the creation of base boxes from scratch}\n\n  s.required_rubygems_version = \">= 1.3.6\"\n  s.rubyforge_project         = \"veewee\"\n\n\n  # Currently locked to 2.2.0\n  # if specifying to >= 2.2.0 it would use 2.3 and bundler would go in a resolver loop\n  # DEBUG_RESOLVER=1 bundle install\n  if RUBY_VERSION > \"2.0.0\"\n    s.add_dependency \"net-ssh\", \">= 2.2.0\"\n  else\n    s.add_dependency \"net-ssh\", \"~> 2.2\"\n  end\n  s.add_dependency \"net-scp\", \"~> 1.2\"\n\n  s.add_dependency \"mime-types\", \"~> 1.16\"\n  s.add_dependency \"popen4\", \"~> 0.1.2\"\n  s.add_dependency \"thor\", \"~> 0.15\"\n  s.add_dependency \"highline\"\n  s.add_dependency \"json\"\n  #s.add_dependency \"json\", \">= 1.5.1\", \"< 1.8.0\"\n  s.add_dependency \"progressbar\", \"0.21.0\"\n  s.add_dependency \"i18n\"\n  #s.add_dependency \"cucumber\", \">=1.0.0\"\n  s.add_dependency \"ansi\", \"~> 1.3.0\"\n  s.add_dependency \"ruby-vnc\", \"~> 1.0.0\"\n  s.add_dependency \"fog\", \"~> 1.8\"\n  s.add_dependency \"childprocess\"\n  s.add_dependency \"grit\"\n  s.add_dependency \"fission\", \"0.5.0\"\n  s.add_dependency \"to_slug\"\n  s.add_dependency \"os\", \"~> 0.9.6\"\n  s.add_dependency \"gem-content\", \"~>1.0\"\n\n  s.required_ruby_version = '>= 1.9.3'\n\n  # Modified dependency version, as libxml-ruby dependency has been removed in version 2.1.1\n  # See : https://github.com/ckruse/CFPropertyList/issues/14\n  # See : https://github.com/jedi4ever/veewee/issues/6\n  #s.add_dependency \"CFPropertyList\", \">= 2.1.1\"\n  #s.add_dependency \"libvirt\"\n  s.add_development_dependency \"rspec\", \"~> 2.5\"\n\n  s.add_development_dependency \"bundler\", \">= 1.0.0\"\n  #s.add_development_dependency('ruby-libvirt','~>0.4.0')\n\n  s.files        = `git ls-files`.split(\"\\n\")\n  s.executables  = `git ls-files`.split(\"\\n\").map { |f| f =~ /^bin\\/(.*)/ ? $1 : nil }.compact\n  s.require_path = 'lib'\n\n  s.metadata = {\n    \"veewee-templates\" => \"templates\"\n  }\nend\n"
        }
      ]
    }
  ]
}