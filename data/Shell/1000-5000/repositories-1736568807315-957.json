{
  "metadata": {
    "timestamp": 1736568807315,
    "page": 957,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lhelontra/tensorflow-on-arm",
      "stars": 1052,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017 Leonardo Lontra\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.6962890625,
          "content": "# Tensorflow-on-arm\n\nInspired by [tensorflow-on-raspberry-pi](https://github.com/samjabrahams/tensorflow-on-raspberry-pi).\nTool to compile tensorflow for ARM.\n\n## Dependencies\n```shell\napt-get install openjdk-8-jdk automake autoconf\napt-get install curl zip unzip libtool swig libpng-dev zlib1g-dev pkg-config git g++ wget xz-utils\n\n# For python2.7\napt-get install python-numpy python-dev python-pip python-mock\n\n# If using a virtual environment, omit the --user argument\npip install -U --user keras_applications==1.0.8 --no-deps\npip install -U --user keras_preprocessing==1.1.0 --no-deps\n\n# For python3\napt-get install python3-numpy python3-dev python3-pip python3-mock\n\n# If using a virtual environment, omit the --user argument\npip3 install -U --user keras_applications==1.0.8 --no-deps\npip3 install -U --user keras_preprocessing==1.1.0 --no-deps\npip3 install portpicker\n```\n\n## TensorFlow on Raspberry Pi\n\n### It's officially supported!\n\nPython wheels for TensorFlow are [officially supported](https://medium.com/tensorflow/tensorflow-1-9-officially-supports-the-raspberry-pi-b91669b0aa0). This repository also maintains up-to-date TensorFlow wheels for Raspberry Pi.\n\n### Installation\n[Check out the official TensorFlow website for more information.](https://www.tensorflow.org/install/install_raspbian)\n\n\n## Cross-compilation\nMake you sure add the ARM architecture to your package manager, see how to add it in Debian flavors:\n```shell\ndpkg --add-architecture armhf\necho \"deb [arch=armhf] http://httpredir.debian.org/debian/ buster main contrib non-free\" >> /etc/apt/sources.list\n```\nIf you want compile Python support:\n```shell\n# For python2.7\napt-get install libpython-all-dev:armhf\n\n# For python3\napt-get install libpython3-all-dev:armhf\n```\n### Using Docker\n\n#### Python 3.7\n\n```shell\ncd build_tensorflow/\ndocker build -t tf-arm -f Dockerfile .\ndocker run -it -v /tmp/tensorflow_pkg/:/tmp/tensorflow_pkg/ --env TF_PYTHON_VERSION=3.7 tf-arm ./build_tensorflow.sh configs/<conf-name> # rpi.conf, rk3399.conf ...\n```\n\n#### Python 3.8\n\n```shell\ncd build_tensorflow/\ndocker build -t tf-arm -f Dockerfile.bullseye .\ndocker run -it -v /tmp/tensorflow_pkg/:/tmp/tensorflow_pkg/ --env TF_PYTHON_VERSION=3.8 tf-arm ./build_tensorflow.sh configs/<conf-name> # rpi.conf, rk3399.conf ...\n```\n\n## Edit tweaks like Bazel resources, board model, and others.\nSee configuration file examples in: build_tensorflow/configs/\n\n## Finally, compile TensorFlow.\n```shell\ncd build_tensorflow/\nchmod +x build_tensorflow.sh\nTF_PYTHON_VERSION=3.5 ./build_tensorflow.sh <path-of-config> [noclean]\n# The optional [noclean] argument omits 'bazel clean' before building for debugging purposes.\n# If no output errors, the pip package will be in the directory: /tmp/tensorflow_pkg/\n```\n"
        },
        {
          "name": "build_tensorflow",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}