{
  "metadata": {
    "timestamp": 1736568777650,
    "page": 902,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkwOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dokku/dokku-letsencrypt",
      "stars": 1097,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.123046875,
          "content": "# http://EditorConfig.org\n\nroot = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1259765625,
          "content": "#### joe made this: http://goel.io/joe\n\n#####=== Vim ===#####\n[._]*.s[a-w][a-z]\n[._]s[a-w][a-z]\n*.un~\nSession.vim\n.netrwhist\n*~\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Stefan Seemayer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.974609375,
          "content": "# dokku-letsencrypt\n\ndokku-letsencrypt is the official plugin for [dokku][dokku] that gives the ability to automatically retrieve and install TLS certificates from [letsencrypt.org](https://letsencrypt.org). During ACME validation, your app will stay available at any time.\n\n> By running this plugin, you agree to the Let's Encrypt Subscriber Agreement automatically (because prompting you whether you agree might break running the plugin as part of a cronjob).\n>\n> If you like Let's Encrypt, please consider [donating to Let's Encrypt](https://letsencrypt.org/donate).\n\n## Installation\n\n```shell\nsudo dokku plugin:install https://github.com/dokku/dokku-letsencrypt.git\n```\n\n### Upgrading from previous versions\n\n```shell\nsudo dokku plugin:update letsencrypt\n```\n\n## Commands\n\n```\n$ dokku letsencrypt:help\n    letsencrypt:active <app>                Verify if letsencrypt is active for an app\n    letsencrypt:auto-renew                  Auto-renew all apps secured by letsencrypt if renewal is necessary\n    letsencrypt:auto-renew <app>            Auto-renew app if renewal is necessary\n    letsencrypt:cleanup <app>               Cleanup stale certificates and configurations\n    letsencrypt:cron-job <--add|--remove>   Add or remove an auto-renewal cronjob\n    letsencrypt:disable <app>               Disable letsencrypt for an app\n    letsencrypt:enable <app>                Enable or renew letsencrypt for an app\n    letsencrypt:list                        List letsencrypt-secured apps with certificate expiry\n    letsencrypt:revoke <app>                Revoke letsencrypt certificate for app\n```\n\n## Usage\n\n> If using this plugin with Cloudflare:\n>\n> - The domain dns should be setup in \"Proxied\" mode\n> - SSL/TLS mode must be in \"Full\" mode\n>   - Using letsencrypt in \"Flexible\" mode will cause Cloudflare to detect your server as down\n>   - Using \"Full\" mode will require disabling SSL/TLS in cloudflare in order to renew the certificate.\n>\n> If using \"Flexible\" SSL/TLS mode, avoid using this plugin.\n>\n> See these two links for more details:\n>\n>  - https://community.cloudflare.com/t/lets-encrypt-ssl-cannot-renew-with-cloudflare/257666\n>  - https://support.cloudflare.com/hc/en-us/articles/214820528-Validating-a-Let-s-Encrypt-Certificate-on-a-Site-Already-Active-on-Cloudflare\n\nThe app which is obtaining a letsencrypt certificate must already be deployed and accessible over the internet (i.e. in the browser) in order to add letsencrypt to your app. This plugin will fail to apply for an app that has otherwise only been created.\n\nObtain a Let's encrypt TLS certificate for app `myapp` (you can also run this command to renew the certificate):\n\n```\n$ dokku letsencrypt:set myapp email your@email.tld\n-----> Setting email to your@email.tld\n$ dokku letsencrypt:enable myapp\n=====> Let's Encrypt myapp...\n-----> Updating letsencrypt docker image...\nlatest: Pulling from dokku/letsencrypt\n\nDigest: sha256:20f2a619795c1a3252db6508f77d6d3648ad5b336e67caaf801126367dbdfa22\nStatus: Image is up to date for dokku/letsencrypt:latest\n       done\n-----> Enabling letsencrypt proxy for myapp...\n-----> Getting letsencrypt certificate for myapp...\n        - Domain 'myapp.mydomain.com'\n\n[ removed various log messages for brevity ]\n\n-----> Certificate retrieved successfully.\n-----> Symlinking let's encrypt certificates\n-----> Configuring SSL for myapp.mydomain.com...(using /var/lib/dokku/plugins/available/nginx-vhosts/templates/nginx.ssl.conf.template)\n-----> Creating https nginx.conf\n-----> Running nginx-pre-reload\n       Reloading nginx\n-----> Disabling letsencrypt proxy for myapp...\n       done\n```\n\nOnce the certificate is installed, you can use the `certs:*` built-in commands to edit and query your certificate.\n\nYou could also use the following command to set an email address for global. So you don't need to type the email address for different application.\n\n```shell\ndokku letsencrypt:set --global email your@email.tld\n```\n\n## Automatic certificate renewal\n\nTo enable the automatic renewal of certificates, a cronjob needs to be defined for\nthe `dokku` user which will run daily and renew any certificates that are due to\nbe renewed.\n\nThis can be done using the following command:\n\n```shell\ndokku letsencrypt:cron-job --add\n```\n\n## Configuration\n\n`dokku-letsencrypt` uses the [Dokku environment variable manager](https://dokku.com/docs/configuration/environment-variables/) for all configuration. The important environment variables are:\n\nVariable             | Default           | Description\n---------------------|-------------------|-------------------------------------------------------------------------\n`dns-provider`       | (none)            | The name of a [valid lego dns-provider](https://go-acme.github.io/lego/dns/)\n`email`              | (none)            | **REQUIRED:** E-mail address to use for registering with Let's Encrypt.\n`graceperiod`        | 2592000 (30 days) | Time in seconds left on a certificate before it should get renewed\n`lego-docker-args`   | (none)            | Extra arguments to pass via `docker run`. See the [lego CLI documentation](https://go-acme.github.io/lego/usage/cli/) for available options.\n`server`             | default           | Which ACME server to use. Can be 'default', 'staging' or a URL\n\nYou can set a setting using `dokku letsencrypt:set $APP $SETTING_NAME $SETTING_VALUE`. When looking for a setting, the plugin will first look if it was defined for the current app and fall back to settings defined by `--global`.\n\n> Note: See \"DNS-01 Challenge\" for more information on configuration a dns-provider for DNS-01 based challenges and wildcard support.\n\n## Redirecting from HTTP to HTTPS\n\nDokku's default nginx template will automatically redirect HTTP requests to HTTPS when a certificate is present.\n\nYou can [customize the nginx template](https://dokku.com/docs/networking/proxies/nginx/) if you want different behaviour.\n\n## Design\n\n`dokku-letsencrypt` gets around having to disable your web server using the following workflow:\n\n  1. Temporarily add a reverse proxy for the `/.well-known/` path of your app to `https://127.0.0.1:$ACMEPORT`\n  2. Run [the acme/lego Let's Encrypt client](https://github.com/go-acme/lego) in a [Docker container](https://hub.docker.com/r/goacme/lego/) binding to `$ACMEPORT` to complete the ACME challenge and retrieve the TLS certificates\n  3. Install the TLS certificates\n  4. Remove the reverse proxy and reload nginx\n\nFor a more in-depth explanation, see [this blog post](https://blog.semicolonsoftware.de/securing-dokku-with-lets-encrypt-tls-certificates/)\n\n## Dockerfile and Image-based Deploys\n\nWhen securing Dockerfile and Image-based deploys with dokku-letsencrypt, be aware of the [proxy mechanism for dokku 0.6+](https://dokku.com/docs/networking/proxy-management/#proxy-port-mapping).\n\nFor Dockerfile deploys - as well as those via `git:from-image` - Dokku will determine which ports a container exposes and proxies all those exposed ports in the Docker container by listening on the same port numbers on the host. This means that **both the proxies for HTTP port 80 and HTTPS port 443 to the app's container need to be manually configured** using the `dokku proxy:ports-*` commands in order for certificate validation and browsing to the app via HTTPS to work.\n\nA full workflow for creating a new Dockerfile/Image-based deployment (where the app is listening on port 5555) with dokku-letsencrypt would be:\n\n1. Create a new app `myapp` in dokku and push to the `dokku@myhost.com` remote. This guide assumes that the Docker container will be listening for connections on port 5555 so replace container port numbers accordingly if necessary.\n2. On the dokku host, use `dokku ports:add myapp http:80:5555` to proxy HTTP port 80 to port 5555 on the Docker image\n3. On the dokku host, use `dokku letsencrypt:enable myapp` to retrieve HTTPS certificates.\n4. On the dokku host, use `dokku ports:add myapp https:443:5555` to proxy HTTPS port 443 to port 5555 on the Docker image\n5. (optional) On the dokku host, use `dokku ports:remove myapp http:5555:5555` to remove a potential leftover proxy that was automatically configured on first deploy.\n\nAfter these steps, the output of `dokku ports:list myapp` should look like this:\n\n```\n-----> Port mappings for myapp\n-----> scheme             host port                 container port\nhttps                     443                       5555\n```\n\nReplace the container port (`5555` in the above example) with the port your app is listening on.\n\n**Note:** Step 2 and step 4 cannot be joined together since a configured HTTPS proxy will include a `ssl_certificate` line in the app's nginx config that will cause nginx config validation to fail because no valid HTTPS certificate is available until step 3 is completed.\n\n## Dealing with rate limit\n\nBe aware that Let's Encrypt is subject to [rate limiting](https://letsencrypt.org/docs/rate-limits/). The limit about the number of certificates you can add on a domain per week is a concern for dokku because of the default domain added to your new applications, named like `<app>.<dokku-domain>`: using `dokku-letsencrypt` on all your applications would create a certificate for each application subdomain on `<dokku-domain>`.\n\nAs a workaround, if you want to encrypt many applications, make sure to add a proper domain for each one and remove their default domain before running `dokku-letsencrypt`. For example, if your dokku domain is `dokku.example.com` and you want to encrypt your `foo` app:\n\n```sh\ndokku domains:add foo foo.com\ndokku domains:remove foo foo.dokku.example.com\ndokku letsencrypt:enable foo\n```\n\nWhile playing around with this plugin, you might want to switch to the let's encrypt staging server by running `dokku letsencrypt:set myapp server  staging` to enjoy much higher rate limits and switching back to the real server by running `dokku letsencrypt:set myapp server` once you are ready.\n\n## Generating a Cert for multiple domains\n\nYour [default dokku app](https://dokku.com/docs/networking/proxies/nginx/?h=default+site#default-site) is accessible under the root domain too. So if you have an application `00-default` that is running under `00-default.mydomain.com` it is accessible under `mydomain.com` too. Now if you enable letsencrypt for your `00-default` application, it is not accessible anymore on `mydomain.com`. You can add the root domain to your dokku domains by typing:\n\n```shell\ndokku domains:add 00-default mydomain.com\ndokku letsencrypt:enable 00-default\n```\n\n## DNS-01 Challenge\n\n> Functionality sponsored by [Orca Scan Ltd](https://orcascan.com/).\n\nIn order to provide a Letsencrypt certificate for a wildcard domain, a DNS-01 challenge must be used. To configure, the `dns-provider` property must be set to a [supported Lego provider](https://go-acme.github.io/lego/dns/). Additionally, the environment variables used by the DNS provider must be set as letsencrypt properties with the prefix `dns-provider-`. Both global and app-specific properties are supported.\n\n> Warning: Before using a DNS-based challenge, ensure all DNS records - including wildcard records - are pointing at your server.\n\n```shell\n# set the provider to namecheap\ndokku letsencrypt:set --global dns-provider namecheap\n\n# set the properties necessary for namecheap usage\ndokku letsencrypt:set --global dns-provider-NAMECHEAP_API_USER user\ndokku letsencrypt:set --global dns-provider-NAMECHEAP_API_KEY key\n```\n\nDue to limitations in how certain DNS providers work, environment variables _must not_ use the `_FILE` based method for referring to values in files.\n\nPlease see the Lego documentation for your DNS provider for more information on what configuration is necessary to utilize DNS-01 challenges.\n\n## Conditional enabling\n\n`dokku letsencrypt:enable <app>` enables letsencrypt for an application or renews the certificate. This may lead to hitting rate limits with letsencrypt.\n\nTo avoid renewals, for example in a continuous deployment scenario, you could first check if letsencrypt has already been enabled for the app:\n\n```shell\ndokku letsencrypt:active <app> || dokku letsencrypt:enable <app>\n```\n\n## License\n\nThis plugin is released under the MIT license. See the file [LICENSE](LICENSE).\n\n[dokku]: https://github.com/dokku/dokku\n"
        },
        {
          "name": "command-functions",
          "type": "blob",
          "size": 10.5361328125,
          "content": "#!/usr/bin/env bash\nsource \"$PLUGIN_CORE_AVAILABLE_PATH/common/functions\"\nsource \"$PLUGIN_CORE_AVAILABLE_PATH/common/property-functions\"\nsource \"$PLUGIN_AVAILABLE_PATH/letsencrypt/internal-functions\"\nsource \"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)/config\"\nset -eo pipefail\n[[ $DOKKU_TRACE ]] && set -x\n\ncmd-letsencrypt-active() {\n  declare desc=\"Verify if letsencrypt is active for an app\"\n  declare cmd=\"letsencrypt:active\"\n  [[ \"$1\" == \"$cmd\" ]] && shift 1\n\n  # Support --app/$DOKKU_APP_NAME flag by reordering args into \"$cmd $DOKKU_APP_NAME $@\"\n  [[ -n \"$DOKKU_APP_NAME\" ]] && set -- $DOKKU_APP_NAME $@\n\n  declare APP=\"$1\"\n\n  verify_app_name \"$APP\"\n  fn-letsencrypt-is-active \"$APP\"\n}\n\ncmd-letsencrypt-auto-renew() {\n  declare desc=\"auto-renew certificates if necessary\"\n  declare cmd=\"letsencrypt:auto-renew\"\n  [[ \"$1\" == \"$cmd\" ]] && shift 1\n\n  # Support --app/$DOKKU_APP_NAME flag by reordering args into \"$cmd $DOKKU_APP_NAME $@\"\n  [[ -n \"$DOKKU_APP_NAME\" ]] && set -- $DOKKU_APP_NAME $@\n\n  declare APP=\"$1\"\n  local expiry grace_period\n\n  if [ -z \"$APP\" ]; then\n    dokku_log_info2 \"Auto-renewing all apps...\"\n    local EXIT_CODE=0\n\n    # For all apps, sorted by ascending time left until renewal.\n    # This way, we'll prioritize apps that need to be renewed soon\n    # if we should hit a rate limit along the way.\n    fn-letsencrypt-list-apps-with-expiry \\\n      | sort -nk5 \\\n      | while IFS=$'\\t' read -r -a appExpiry; do\n\n        if [[ ${appExpiry[4]} -lt 0 ]]; then\n          dokku_log_info1 \"${appExpiry[0]} needs renewal\"\n          dokku letsencrypt:enable \"${appExpiry[0]}\" || EXIT_CODE=$?\n        else\n          days_left=$(fn-letsencrypt-format-timediff \"${appExpiry[4]}\")\n          dokku_log_verbose \"${appExpiry[0]} still has $days_left days left before renewal\"\n        fi\n\n      done\n\n    dokku_log_info2 \"Finished auto-renewal\"\n    if [[ \"$EXIT_CODE\" != 0 ]]; then\n      dokku_log_fail \"One or more apps failed to have their certificates renewed\"\n    fi\n  else\n    verify_app_name \"$APP\"\n\n    if [[ \"$(fn-letsencrypt-is-active \"$APP\")\" != \"true\" ]]; then\n      dokku_log_info1 \"Letsencrypt not enabled for ${APP}\"\n      return\n    fi\n\n    expiry=$(fn-letsencrypt-expiration \"$APP\")\n    grace_period=$(fn-letsencrypt-computed-graceperiod \"$APP\")\n    local time_to_renewal=$((expiry - grace_period - $(date +%s)))\n\n    if [[ $time_to_renewal -lt 0 ]]; then\n      dokku_log_info2 \"Auto-renew ${APP}...\"\n      dokku letsencrypt:enable \"$APP\"\n    else\n      days_left=$(fn-letsencrypt-format-timediff $time_to_renewal)\n      dokku_log_verbose \"$APP still has $days_left left before renewal\"\n    fi\n\n  fi\n}\n\ncmd-letsencrypt-cleanup() {\n  declare desc=\"clean up unused certificate directories\"\n  declare cmd=\"letsencrypt:cleanup\"\n  [[ \"$1\" == \"$cmd\" ]] && shift 1\n  local certdir_basename current_config\n\n  # Support --app/$DOKKU_APP_NAME flag by reordering args into \"$cmd $DOKKU_APP_NAME $@\"\n  [[ -n \"$DOKKU_APP_NAME\" ]] && set -- $DOKKU_APP_NAME $@\n\n  declare APP=\"$1\"\n  verify_app_name \"$APP\"\n\n  local app_root=\"$DOKKU_ROOT/$APP\"\n  local le_root=\"$app_root/letsencrypt\"\n\n  current_config=\"$(basename \"$(readlink \"$le_root/certs/current\")\")\"\n\n  if [ -z \"$current_config\" ] || [[ ! -d \"$le_root/certs/$current_config\" ]]; then\n    dokku_log_warn \"Cannot resolve the 'current' certificate directory!\"\n    return 1\n  fi\n\n  dokku_log_info2 \"Cleaning up stale certificate directories for $APP\"\n  dokku_log_info1 \"  - current config hash $current_config\"\n\n  for certdir in $le_root/certs/*; do\n    certdir_basename=\"$(basename \"$certdir\")\"\n\n    if [[ \"$certdir_basename\" == \"current\" ]] || [[ \"$certdir_basename\" == \"$current_config\" ]]; then continue; fi\n    dokku_log_info1 \"  - stale directory $certdir_basename\"\n\n    rm -rf \"$le_root/certs/$certdir_basename\"\n  done\n}\n\ncmd-letsencrypt-cron-job() {\n  declare desc=\"Add or remove a cron job that periodically calls auto-renew\"\n  declare cmd=\"letsencrypt:cron-job\"\n  [[ \"$1\" == \"$cmd\" ]] && shift 1\n  declare FLAG=\"$1\"\n\n  if [[ \"$FLAG\" == \"--add\" ]]; then\n    fn-letsencrypt-cron-job-add\n  elif [[ \"$FLAG\" == \"--remove\" ]]; then\n    fn-letsencrypt-cron-job-remove\n  else\n    dokku_log_verbose \"Specify --add or --remove to modify the cron-job\"\n  fi\n}\n\ncmd-letsencrypt-disable() {\n  declare desc=\"Disable letsencrypt for an app\"\n  declare cmd=\"letsencrypt:disable\"\n  [[ \"$1\" == \"$cmd\" ]] && shift 1\n\n  # Support --app/$DOKKU_APP_NAME flag by reordering args into \"$cmd $DOKKU_APP_NAME $@\"\n  [[ -n \"$DOKKU_APP_NAME\" ]] && set -- $DOKKU_APP_NAME $@\n\n  declare APP=\"$1\"\n  verify_app_name \"$APP\"\n\n  dokku_log_info1 \"Disabling letsencrypt for app\"\n  local le_root=\"$DOKKU_ROOT/$APP/letsencrypt\"\n  local APP_SSL_PATH=\"$DOKKU_ROOT/$APP/tls\"\n\n  dokku_log_verbose \"Removing letsencrypt files for $APP\"\n  rm -rf \"$le_root\"\n\n  dokku_log_verbose \"Removing SSL endpoint from $APP\"\n  rm -rf \"$APP_SSL_PATH\"\n  plugn trigger post-certs-remove \"$APP\"\n  plugn trigger post-domains-update \"$APP\"\n\n  dokku_log_info1 \"Done\"\n}\n\ncmd-letsencrypt-enable() {\n  declare desc=\"Enable or renew letsencrypt for an app\"\n  declare cmd=\"letsencrypt:enable\"\n  [[ \"$1\" == \"$cmd\" ]] && shift 1\n\n  # Support --app/$DOKKU_APP_NAME flag by reordering args into \"$cmd $DOKKU_APP_NAME $@\"\n  [[ -n \"$DOKKU_APP_NAME\" ]] && set -- $DOKKU_APP_NAME $@\n\n  declare APP=\"$1\"\n  if [[ \"$APP\" == \"--all\" ]]; then\n    for app in $(dokku_apps); do\n      fn-letsencrypt-enable \"$app\"\n    done\n  else\n    fn-letsencrypt-enable \"$APP\"\n  fi\n}\n\ncmd-letsencrypt-list() {\n  declare desc=\"list letsencrypt-secured apps and certificate expiries\"\n  declare cmd=\"letsencrypt:list\"\n  [[ \"$1\" == \"$cmd\" ]] && shift 1\n\n  dokku_col_log_info1_quiet \"App name\" \"Certificate Expiry\" \"Time before expiry\" \"Time before renewal\"\n\n  fn-letsencrypt-list-apps-with-expiry \\\n    | sort -nk2 \\\n    | while IFS=$'\\t' read -r -a appExpiry; do\n      expire_date=$(date -d \"@${appExpiry[1]}\" +\"%F %T\")\n      expire_time=$(fn-letsencrypt-format-timediff \"${appExpiry[3]}\")\n      renew_time=$(fn-letsencrypt-format-timediff \"${appExpiry[4]}\")\n      dokku_col_log_msg \"${appExpiry[0]}\" \"${expire_date}\" \"${expire_time}\" \"${renew_time}\"\n    done\n}\n\ncmd-letsencrypt-report() {\n  declare desc=\"displays a letsencrypt report for one or more apps\"\n  declare cmd=\"letsencrypt:report\"\n  [[ \"$1\" == \"$cmd\" ]] && shift 1\n  declare APP=\"$1\" INFO_FLAG=\"$2\"\n  local INSTALLED_APPS\n  INSTALLED_APPS=$(dokku_apps)\n\n  if [[ -n \"$APP\" ]] && [[ \"$APP\" == --* ]]; then\n    INFO_FLAG=\"$APP\"\n    APP=\"\"\n  fi\n\n  if [[ -z \"$APP\" ]] && [[ -z \"$INFO_FLAG\" ]]; then\n    INFO_FLAG=\"true\"\n  fi\n\n  if [[ -z \"$APP\" ]]; then\n    for app in $INSTALLED_APPS; do\n      cmd-letsencrypt-report-single \"$app\" \"$INFO_FLAG\" | tee || true\n    done\n  else\n    cmd-letsencrypt-report-single \"$APP\" \"$INFO_FLAG\"\n  fi\n}\n\ncmd-letsencrypt-report-single() {\n  declare APP=\"$1\" INFO_FLAG=\"$2\"\n  if [[ \"$INFO_FLAG\" == \"true\" ]]; then\n    INFO_FLAG=\"\"\n  fi\n  verify_app_name \"$APP\"\n  local flag_map=(\n    \"--letsencrypt-active: $(fn-letsencrypt-is-active \"$APP\")\"\n    \"--letsencrypt-autorenew: $(fn-letsencrypt-is-autorenew-enabled \"$APP\")\"\n    \"--letsencrypt-computed-dns-provider: $(fn-letsencrypt-computed-dns-provider \"$APP\")\"\n    \"--letsencrypt-global-dns-provider: $(fn-letsencrypt-global-dns-provider)\"\n    \"--letsencrypt-dns-provider: $(fn-letsencrypt-dns-provider \"$APP\")\"\n    \"--letsencrypt-computed-email: $(fn-letsencrypt-computed-email \"$APP\")\"\n    \"--letsencrypt-global-email: $(fn-letsencrypt-global-email)\"\n    \"--letsencrypt-email: $(fn-letsencrypt-email \"$APP\")\"\n    \"--letsencrypt-expiration: $(fn-letsencrypt-expiration \"$APP\")\"\n    \"--letsencrypt-computed-graceperiod: $(fn-letsencrypt-computed-graceperiod \"$APP\")\"\n    \"--letsencrypt-global-graceperiod: $(fn-letsencrypt-global-graceperiod)\"\n    \"--letsencrypt-graceperiod: $(fn-letsencrypt-graceperiod \"$APP\")\"\n    \"--letsencrypt-computed-lego-docker-args: $(fn-letsencrypt-computed-lego-docker-args \"$APP\")\"\n    \"--letsencrypt-global-lego-docker-args: $(fn-letsencrypt-global-lego-docker-args)\"\n    \"--letsencrypt-lego-docker-args: $(fn-letsencrypt-lego-docker-args \"$APP\")\"\n    \"--letsencrypt-computed-server: $(fn-letsencrypt-computed-server \"$APP\")\"\n    \"--letsencrypt-global-server: $(fn-letsencrypt-global-server)\"\n    \"--letsencrypt-server: $(fn-letsencrypt-server \"$APP\")\"\n  )\n\n  if [[ -z \"$INFO_FLAG\" ]]; then\n    dokku_log_info2_quiet \"${APP} letsencrypt information\"\n    for flag in \"${flag_map[@]}\"; do\n      key=\"$(echo \"${flag#--}\" | cut -f1 -d' ' | tr - ' ')\"\n      dokku_log_verbose \"$(printf \"%-30s %-25s\" \"${key^}\" \"${flag#*: }\")\"\n    done\n  else\n    local match=false\n    local value_exists=false\n    for flag in \"${flag_map[@]}\"; do\n      valid_flags=\"${valid_flags} $(echo \"$flag\" | cut -d':' -f1)\"\n      if [[ \"$flag\" == \"${INFO_FLAG}:\"* ]]; then\n        value=${flag#*: }\n        size=\"${#value}\"\n        if [[ \"$size\" -ne 0 ]]; then\n          echo \"$value\" && match=true && value_exists=true\n        else\n          match=true\n        fi\n      fi\n    done\n    [[ \"$match\" == \"true\" ]] || dokku_log_fail \"Invalid flag passed, valid flags:${valid_flags}\"\n    [[ \"$value_exists\" == \"true\" ]] || dokku_log_fail \"not deployed\"\n  fi\n}\n\ncmd-letsencrypt-revoke() {\n  declare desc=\"Revoke a certificate\"\n  declare cmd=\"letsencrypt:revoke\"\n  [[ \"$1\" == \"$cmd\" ]] && shift 1\n\n  # Support --app/$DOKKU_APP_NAME flag by reordering args into \"$cmd $DOKKU_APP_NAME $@\"\n  [[ -n \"$DOKKU_APP_NAME\" ]] && set -- $DOKKU_APP_NAME $@\n\n  declare APP=\"$1\"\n  verify_app_name \"$APP\"\n\n  dokku_log_info2 \"Revoke letsencrypt certificate from ${APP}...\"\n\n  fn-letsencrypt-check-email \"$APP\"\n  fn-letsencrypt-acme-revoke \"$APP\" || true\n\n  dokku_log_info1 \"Done\"\n}\n\ncmd-letsencrypt-set() {\n  declare desc=\"set or clear a letsencrypt property for an app\"\n  declare cmd=\"letsencrypt:set\"\n  [[ \"$1\" == \"$cmd\" ]] && shift 1\n  declare APP=\"$1\" KEY=\"$2\" VALUE=\"$3\"\n  local VALID_KEYS=(\"dns-provider\" \"email\" \"graceperiod\" \"server\" \"lego-docker-args\")\n  [[ \"$APP\" == \"--global\" ]] || verify_app_name \"$APP\"\n\n  [[ -z \"$KEY\" ]] && dokku_log_fail \"No key specified\"\n\n  if ! fn-in-array \"$KEY\" \"${VALID_KEYS[@]}\" && [[ \"$KEY\" != dns-provider-* ]]; then\n    dokku_log_fail \"Invalid key specified, valid keys include: dns-provider, dns-provider-*, email, graceperiod, server, lego-docker-args\"\n  fi\n\n  if [[ -n \"$VALUE\" ]]; then\n    dokku_log_info2_quiet \"Setting ${KEY} to ${VALUE}\"\n    fn-plugin-property-write \"letsencrypt\" \"$APP\" \"$KEY\" \"$VALUE\"\n  else\n    dokku_log_info2_quiet \"Unsetting ${KEY}\"\n    if [[ \"$KEY\" == \"rev-env-var\" ]]; then\n      fn-plugin-property-write \"letsencrypt\" \"$APP\" \"$KEY\" \"$VALUE\"\n    else\n      fn-plugin-property-delete \"letsencrypt\" \"$APP\" \"$KEY\"\n      if [[ \"$KEY\" == \"enabled\" ]]; then\n        fn-plugin-property-destroy \"letsencrypt\" \"$APP\"\n      fi\n    fi\n  fi\n}\n"
        },
        {
          "name": "commands",
          "type": "blob",
          "size": 0.3349609375,
          "content": "#!/usr/bin/env bash\n[[ \" help letsencrypt:help \" == *\" $1 \"* ]] || exit \"$DOKKU_NOT_IMPLEMENTED_EXIT\"\nsource \"$PLUGIN_AVAILABLE_PATH/letsencrypt/help-functions\"\nset -eo pipefail\n[[ $DOKKU_TRACE ]] && set -x\n\ncase \"$1\" in\n  help | letsencrypt:help)\n    cmd-letsencrypt-help \"$@\"\n    ;;\n\n  *)\n    exit \"$DOKKU_NOT_IMPLEMENTED_EXIT\"\n    ;;\n\nesac\n"
        },
        {
          "name": "config",
          "type": "blob",
          "size": 0.5361328125,
          "content": "#!/usr/bin/env bash\nset -eo pipefail\n[[ $DOKKU_TRACE ]] && set -x\n\nexport LETSENCRYPT_IMAGE=${LETSENCRYPT_IMAGE:=\"goacme/lego\"}\nexport LETSENCRYPT_IMAGE_VERSION=${LETSENCRYPT_IMAGE_VERSION:=\"v4.9.1\"}\n\nexport PLUGIN_DISABLE_PULL=${LETSENCRYPT_DISABLE_PULL:=}\nexport PLUGIN_DISABLE_PULL_VARIABLE=\"LETSENCRYPT_DISABLE_PULL\"\nexport PLUGIN_IMAGE=$LETSENCRYPT_IMAGE\nexport PLUGIN_IMAGE_VERSION=$LETSENCRYPT_IMAGE_VERSION\n\nexport LETSENCRYPT_CRON_CMD=\"$PLUGIN_AVAILABLE_PATH/letsencrypt/cron-job\"\nexport LETSENCRYPT_CRON_JOB=\"@daily $LETSENCRYPT_CRON_CMD\"\n"
        },
        {
          "name": "cron-entries",
          "type": "blob",
          "size": 0.2470703125,
          "content": "#!/usr/bin/env bash\n\ntrigger-letsencrypt-cron-entries() {\n  if [[ -f \"${DOKKU_LIB_ROOT}/data/letsencrypt/autorenew\" ]]; then\n    echo \"24 6 * * *;dokku letsencrypt:auto-renew;/var/log/dokku/letsencrypt.log\"\n  fi\n}\n\ntrigger-letsencrypt-cron-entries \"$@\"\n"
        },
        {
          "name": "cron-job",
          "type": "blob",
          "size": 0.107421875,
          "content": "#!/usr/bin/env bash\n\nPATH=$PATH:/usr/local/bin\ndokku letsencrypt:auto-renew &>>/var/log/dokku/letsencrypt.log\n"
        },
        {
          "name": "help-functions",
          "type": "blob",
          "size": 1.4443359375,
          "content": "#!/usr/bin/env bash\nset -eo pipefail\n[[ $DOKKU_TRACE ]] && set -x\n\ncmd-letsencrypt-help() {\n  declare desc=\"help command\"\n  declare CMD=\"$1\"\n  local plugin_name=\"letsencrypt\"\n  local plugin_description=\"Manage the letsencrypt integration\"\n\n  if [[ \"$CMD\" == \"${plugin_name}:help\" ]]; then\n    echo -e \"Usage: dokku ${plugin_name}[:COMMAND]\"\n    echo ''\n    echo \"$plugin_description\"\n    echo ''\n    echo 'Additional commands:'\n    fn-help-content | sort | column -c2 -t -s,\n  elif [[ $(ps -o command= $PPID) == *\"--all\"* ]]; then\n    fn-help-content\n  else\n    cat <<help_desc\n    $plugin_name, $plugin_description\nhelp_desc\n  fi\n}\n\nfn-help-content() {\n  declare desc=\"return help content\"\n  cat <<help_content\n    letsencrypt:active <app>, Verify if letsencrypt is active for an app\n    letsencrypt:auto-renew [<app>], Auto-renew app if renewal is necessary\n    letsencrypt:cleanup <app>, Remove stale certificate directories for app\n    letsencrypt:cron-job [--add --remove], Add or remove a cron job that periodically calls auto-renew.\n    letsencrypt:disable <app>, Disable letsencrypt for an app\n    letsencrypt:enable <app>, Enable or renew letsencrypt for an app\n    letsencrypt:help, Display letsencrypt help\n    letsencrypt:list, List letsencrypt-secured apps with certificate expiry times\n    letsencrypt:revoke <app>, Revoke letsencrypt certificate for app\n    letsencrypt:set <app> <property> (<value>), Set or clear a letsencrypt property for an app\nhelp_content\n}\n"
        },
        {
          "name": "install",
          "type": "blob",
          "size": 4.171875,
          "content": "#!/usr/bin/env bash\nsource \"$PLUGIN_AVAILABLE_PATH/config/functions\"\nsource \"$PLUGIN_CORE_AVAILABLE_PATH/common/property-functions\"\nsource \"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)/config\"\nset -eo pipefail\n[[ $DOKKU_TRACE ]] && set -x\n\nfn-letsencrypt-migrate-properties() {\n  declare desc=\"migrates deprecated config variables to property counterpart\"\n  local value\n\n  value=$(plugn trigger config-get-global \"DOKKU_LETSENCRYPT_EMAIL\" || true)\n  if [[ -n \"$value\" ]]; then\n    dokku_log_info1 \"Migrating deprecated global DOKKU_LETSENCRYPT_EMAIL to letsencrypt email property.\"\n    fn-plugin-property-write \"letsencrypt\" \"--global\" \"email\" \"$value\"\n    DOKKU_QUIET_OUTPUT=1 config_unset --global DOKKU_LETSENCRYPT_EMAIL || true\n  fi\n\n  value=$(plugn trigger config-get-global \"DOKKU_LETSENCRYPT_GRACEPERIOD\" || true)\n  if [[ -n \"$value\" ]]; then\n    dokku_log_info1 \"Migrating deprecated global DOKKU_LETSENCRYPT_GRACEPERIOD to letsencrypt graceperiod property.\"\n    fn-plugin-property-write \"letsencrypt\" \"--global\" \"graceperiod\" \"$value\"\n    DOKKU_QUIET_OUTPUT=1 config_unset --global DOKKU_LETSENCRYPT_GRACEPERIOD || true\n  fi\n\n  value=$(plugn trigger config-get-global \"DOKKU_LETSENCRYPT_ARGS\" || true)\n  if [[ -n \"$value\" ]]; then\n    dokku_log_info1 \"Migrating deprecated global DOKKU_LETSENCRYPT_ARGS to letsencrypt lego-docker-args property.\"\n    fn-plugin-property-write \"letsencrypt\" \"--global\" \"lego-docker-args\" \"$value\"\n    DOKKU_QUIET_OUTPUT=1 config_unset --global DOKKU_LETSENCRYPT_ARGS || true\n  fi\n\n  value=$(plugn trigger config-get-global \"DOKKU_LETSENCRYPT_SERVER\" || true)\n  if [[ -n \"$value\" ]]; then\n    dokku_log_info1 \"Migrating deprecated global DOKKU_LETSENCRYPT_SERVER to letsencrypt server property.\"\n    fn-plugin-property-write \"letsencrypt\" \"--global\" \"server\" \"$value\"\n    DOKKU_QUIET_OUTPUT=1 config_unset --global DOKKU_LETSENCRYPT_SERVER || true\n  fi\n\n  for app in $(dokku_apps \"false\"); do\n    value=\"$(plugn trigger config-get \"$app\" DOKKU_LETSENCRYPT_EMAIL || true)\"\n    if [[ -n \"$value\" ]]; then\n      dokku_log_info1 \"Migrating deprecated DOKKU_LETSENCRYPT_EMAIL to letsencrypt email property for $app.\"\n      fn-plugin-property-write \"letsencrypt\" \"$app\" \"email\" \"$value\"\n      DOKKU_QUIET_OUTPUT=1 config_unset --no-restart \"$app\" \"DOKKU_LETSENCRYPT_EMAIL\" || true\n    fi\n\n    value=\"$(plugn trigger config-get \"$app\" DOKKU_LETSENCRYPT_GRACEPERIOD || true)\"\n    if [[ -n \"$value\" ]]; then\n      dokku_log_info1 \"Migrating deprecated DOKKU_LETSENCRYPT_GRACEPERIOD to letsencrypt graceperiod property for $app.\"\n      fn-plugin-property-write \"letsencrypt\" \"$app\" \"graceperiod\" \"$value\"\n      DOKKU_QUIET_OUTPUT=1 config_unset --no-restart \"$app\" \"DOKKU_LETSENCRYPT_GRACEPERIOD\" || true\n    fi\n\n    value=\"$(plugn trigger config-get \"$app\" DOKKU_LETSENCRYPT_ARGS || true)\"\n    if [[ -n \"$value\" ]]; then\n      dokku_log_info1 \"Migrating deprecated DOKKU_LETSENCRYPT_ARGS to letsencrypt lego-docker-args property for $app.\"\n      fn-plugin-property-write \"letsencrypt\" \"$app\" \"lego-docker-args\" \"$value\"\n      DOKKU_QUIET_OUTPUT=1 config_unset --no-restart \"$app\" \"DOKKU_LETSENCRYPT_ARGS\" || true\n    fi\n\n    value=\"$(plugn trigger config-get \"$app\" DOKKU_LETSENCRYPT_SERVER || true)\"\n    if [[ -n \"$value\" ]]; then\n      dokku_log_info1 \"Migrating deprecated DOKKU_LETSENCRYPT_SERVER to letsencrypt server property for $app.\"\n      fn-plugin-property-write \"letsencrypt\" \"$app\" \"server\" \"$value\"\n      DOKKU_QUIET_OUTPUT=1 config_unset --no-restart \"$app\" \"DOKKU_LETSENCRYPT_SERVER\" || true\n    fi\n  done\n}\n\nplugin-install() {\n  pull-docker-image() {\n    declare IMAGE=\"$1\"\n    if [[ \"$PLUGIN_DISABLE_PULL\" == \"true\" ]]; then\n      echo \" !     ${PLUGIN_DISABLE_PULL_VARIABLE} environment variable detected. Not running pull command.\" 1>&2\n      echo \" !        docker pull ${IMAGE}\" 1>&2\n      return\n    fi\n    if [[ \"$(docker images -q \"${IMAGE}\" 2>/dev/null)\" == \"\" ]]; then\n      docker pull \"${IMAGE}\"\n    fi\n  }\n\n  pull-docker-image \"${PLUGIN_IMAGE}:${PLUGIN_IMAGE_VERSION}\"\n\n  mkdir -p \"${DOKKU_LIB_ROOT}/data/letsencrypt\"\n  chown -R \"${DOKKU_SYSTEM_USER}:${DOKKU_SYSTEM_GROUP}\" \"${DOKKU_LIB_ROOT}/data/letsencrypt\"\n  fn-plugin-property-setup \"letsencrypt\"\n  fn-letsencrypt-migrate-properties\n}\n\nplugin-install \"$@\"\n"
        },
        {
          "name": "internal-functions",
          "type": "blob",
          "size": 19.19140625,
          "content": "#!/usr/bin/env bash\nsource \"$PLUGIN_CORE_AVAILABLE_PATH/common/functions\"\nsource \"$PLUGIN_CORE_AVAILABLE_PATH/certs/functions\"\nsource \"$PLUGIN_CORE_AVAILABLE_PATH/domains/functions\"\nsource \"$PLUGIN_CORE_AVAILABLE_PATH/nginx-vhosts/functions\"\nif [[ -f \"$PLUGIN_CORE_AVAILABLE_PATH/nginx-vhosts/internal-functions\" ]]; then\n  source \"$PLUGIN_CORE_AVAILABLE_PATH/nginx-vhosts/internal-functions\"\nfi\nsource \"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)/config\"\nset -eo pipefail\n[[ $DOKKU_TRACE ]] && set -x\n\nfn-letsencrypt-acme-execute-challenge() {\n  declare desc=\"perform actual ACME validation procedure\"\n  declare APP=\"$1\"\n  local FAKE_NGINX_CONF=false\n  local challenge_mode config_dir\n\n  if [[ ! -f \"$DOKKU_ROOT/$APP/nginx.conf\" ]]; then\n    FAKE_NGINX_CONF=true\n  fi\n\n  fn-letsencrypt-create-root \"$APP\"\n\n  challenge_mode=\"HTTP-01\"\n  dns_provider=\"$(fn-letsencrypt-computed-dns-provider \"$APP\")\"\n  if [[ -n \"$dns_provider\" ]]; then\n    challenge_mode=\"DNS-01\"\n  fi\n\n  dokku_log_info1 \"Getting letsencrypt certificate for ${APP} via ${challenge_mode}\"\n\n  # read arguments from appropriate config file into the config array\n  config_dirs=\"$(fn-letsencrypt-configure-and-get-dir \"$APP\")\"\n  host_config_dir=\"$(echo \"$config_dirs\" | cut -d: -f1)\"\n  container_config_dir=\"$(echo \"$config_dirs\" | cut -d: -f2)\"\n  read -r -a config <\"$container_config_dir/config\"\n\n  # run letsencrypt as a docker container using \"certonly\" mode\n  # port 80 of the standalone webserver will be forwarded by the proxy\n  set +e\n  export DOKKU_UID=$(id -u)\n  export DOKKU_GID=$(id -g)\n  mkdir -p \"$DOKKU_LIB_ROOT/data/letsencrypt/$APP\"\n  docker run --rm \\\n    --env-file \"$host_config_dir/docker.env\" \\\n    --user $DOKKU_UID:$DOKKU_GID \\\n    -v \"$host_config_dir:/certs\" \\\n    -v \"$DOKKU_LIB_ROOT/data/letsencrypt/$APP:/webroot\" \\\n    \"${PLUGIN_IMAGE}:${PLUGIN_IMAGE_VERSION}\" \\\n    \"${config[@]}\" run | sed \"s/^/       /\"\n\n  local exit_code=$?\n  set -e\n\n  if [[ \"$FAKE_NGINX_CONF\" == \"true\" ]]; then\n    rm \"$DOKKU_ROOT/$APP/nginx.conf\"\n  fi\n\n  if [[ $exit_code != 0 ]]; then\n    dokku_log_info1 \"Certificate retrieval failed!\"\n    return $exit_code\n  fi\n\n  # got certificate\n  dokku_log_info1 \"Certificate retrieved successfully.\"\n  fn-letsencrypt-symlink-certs \"$APP\" \"$container_config_dir\"\n  plugn trigger proxy-build-config \"$APP\"\n}\n\nfn-letsencrypt-acme-revoke() {\n  declare desc=\"perform actual certificate revocation\"\n  local APP=\"$1\"\n\n  fn-letsencrypt-create-root \"$APP\"\n\n  challenge_mode=\"HTTP-01\"\n  dns_provider=\"$(fn-letsencrypt-computed-dns-provider \"$APP\")\"\n  if [[ -n \"$dns_provider\" ]]; then\n    challenge_mode=\"DNS-01\"\n  fi\n\n  dokku_log_info1 \"Revoking letsencrypt certificate for ${APP} via ${challenge_mode}\"\n  local acme_port=\"$(plugn trigger ports-get-available)\"\n  if [[ -z \"$acme_port\" ]]; then\n    acme_port=\"$(get_available_port)\"\n  fi\n\n  # read arguments from appropriate config file into the config array\n  config_dirs=\"$(fn-letsencrypt-configure-and-get-dir \"$APP\")\"\n  host_config_dir=\"$(echo \"$config_dirs\" | cut -d: -f1)\"\n  container_config_dir=\"$(echo \"$config_dirs\" | cut -d: -f2)\"\n  read -r -a config <\"$container_config_dir/config\"\n\n  # run letsencrypt as a docker container using \"certonly\" mode\n  # port 80 of the standalone webserver will be forwarded by the proxy\n  set +e\n  export DOKKU_UID=$(id -u)\n  export DOKKU_GID=$(id -g)\n  mkdir -p \"$DOKKU_LIB_ROOT/data/letsencrypt/$APP\"\n  docker run --rm \\\n    --env-file \"$host_config_dir/docker.env\" \\\n    --user $DOKKU_UID:$DOKKU_GID \\\n    -p \"$acme_port:$acme_port\" \\\n    -v \"$host_config_dir:/certs\" \\\n    -v \"$DOKKU_LIB_ROOT/data/letsencrypt/$APP:/webroot\" \\\n    \"${PLUGIN_IMAGE}:${PLUGIN_IMAGE_VERSION}\" \\\n    \"${config[@]}\" revoke | sed \"s/^/       /\"\n\n  local exit_code=$?\n  set -e\n\n  # handle return codes\n  if [[ $exit_code == 0 ]]; then\n    # certificate revoked\n    dokku_log_info1 \"Certificate revoked successfully.\"\n  else\n    # error - don't try to link certificates\n    dokku_log_info1 \"Certificate revocation failed (code $simple_result)!\"\n    return\n  fi\n\n  local domain=\"$(get_app_domains \"$APP\" | xargs | awk '{print $1}')\"\n\n  # removing the certificate will automatically reconfigure nginx\n  if [[ -z $DOKKU_APP_NAME ]]; then\n    dokku certs:remove \"$APP\"\n  else\n    dokku certs:remove\n  fi\n}\n\nfn-letsencrypt-acme-proxy-disable() {\n  declare desc=\"disable ACME proxy for an app\"\n  local APP=\"$1\"\n\n  local app_root=\"$DOKKU_ROOT/$APP\"\n  local app_config_dir=\"$app_root/nginx.conf.d\"\n\n  dokku_log_info1 \"Disabling ACME proxy for $APP...\"\n\n  [[ -f \"$app_config_dir/letsencrypt.conf\" ]] && rm \"$app_config_dir/letsencrypt.conf\"\n\n  restart_nginx | sed \"s/^/       /\"\n}\n\nfn-letsencrypt-acme-proxy-enable() {\n  declare desc=\"enable ACME proxy for an app\"\n  local APP=\"$1\"\n\n  local app_root=\"$DOKKU_ROOT/$APP\"\n  local app_config_dir=\"$app_root/nginx.conf.d\"\n\n  dokku_log_info1 \"Enabling ACME proxy for ${APP}...\"\n\n  # ensure the nginx.conf.d directory exists\n  [[ -d \"$app_config_dir\" ]] || mkdir \"$app_config_dir\"\n\n  # generate letsencrypt config\n  sigil -f \"$PLUGIN_AVAILABLE_PATH/letsencrypt/templates/letsencrypt.conf.sigil\" \\\n    APP=\"$APP\" \\\n    DOKKU_LIB_ROOT=\"$DOKKU_LIB_ROOT\" \\\n    >\"$app_config_dir/letsencrypt.conf\"\n\n  restart_nginx | sed \"s/^/       /\"\n}\n\nfn-letsencrypt-computed-dns-provider() {\n  declare desc=\"get configured dns provider\"\n  declare APP=\"$1\"\n\n  value=\"$(fn-letsencrypt-dns-provider \"$APP\")\"\n  if [[ -z \"$value\" ]]; then\n    value=\"$(fn-letsencrypt-global-dns-provider)\"\n  fi\n\n  echo \"$value\"\n}\n\nfn-letsencrypt-global-dns-provider() {\n  declare desc=\"get configured dns provider\"\n\n  fn-plugin-property-get-default \"letsencrypt\" \"--global\" \"dns-provider\" \"\"\n}\n\nfn-letsencrypt-dns-provider() {\n  declare desc=\"get configured dns provider\"\n  declare APP=\"$1\"\n\n  fn-plugin-property-get-default \"letsencrypt\" \"$APP\" \"dns-provider\" \"\"\n}\n\nfn-letsencrypt-computed-lego-docker-args() {\n  declare desc=\"get configured lego docker args\"\n  declare APP=\"$1\"\n\n  value=\"$(fn-letsencrypt-lego-docker-args \"$APP\")\"\n  if [[ -z \"$value\" ]]; then\n    value=\"$(fn-letsencrypt-global-lego-docker-args)\"\n  fi\n\n  echo \"$value\"\n}\n\nfn-letsencrypt-global-lego-docker-args() {\n  declare desc=\"get configured lego docker args\"\n\n  fn-plugin-property-get-default \"letsencrypt\" \"--global\" \"lego-docker-args\" \"\"\n}\n\nfn-letsencrypt-lego-docker-args() {\n  declare desc=\"get configured lego docker args\"\n  declare APP=\"$1\"\n\n  fn-plugin-property-get-default \"letsencrypt\" \"$APP\" \"lego-docker-args\" \"\"\n}\n\nfn-letsencrypt-check-email() {\n  declare desc=\"Check if an e-mail address is provided globally or for the app\"\n  declare APP=\"$1\"\n\n  # check we have a valid e-mail address\n  if [[ -z \"$(fn-letsencrypt-computed-email \"$APP\")\" ]]; then\n    dokku_log_warn \"ERROR: Cannot request a certificate without an e-mail address!\"\n    dokku_log_warn \"  please provide your e-mail address using\"\n    dokku_log_warn \"  dokku letsencrypt:set $APP email <e-mail>\"\n    return 1\n  fi\n}\n\nfn-letsencrypt-configure-and-get-dir() {\n  declare desc=\"assemble lego command line arguments and create a config hash directory for them\"\n  declare APP=\"$1\"\n  local config config_dir config_hash dns_provider domain_args domains email extra_args graceperiod key server value\n\n  local app_root=\"$DOKKU_ROOT/$APP\"\n  local le_root=\"$app_root/letsencrypt\"\n  mkdir -p \"$DOKKU_ROOT/$APP/letsencrypt/account\"\n\n  # build up a string of all certificate-controlling configuration settings.\n  # this will be used to determine the folder name for the account key and certificates\n\n  # get the selected ACME server\n  server=\"$(fn-letsencrypt-computed-server \"$APP\")\"\n\n  # construct domain arguments\n  domains=\"$(get_app_domains \"$APP\")\"\n  domain_args=''\n  for domain in $domains; do\n    dokku_log_verbose \" - Domain '$domain'\" >&2\n    domain_args=\"$domain_args --domains $domain\"\n  done\n\n  graceperiod=\"$(fn-letsencrypt-computed-graceperiod \"$APP\")\"\n  email=\"$(fn-letsencrypt-computed-email \"$APP\")\"\n  extra_args=\"$(fn-letsencrypt-computed-lego-docker-args \"$APP\")\"\n  config=\"--pem --accept-tos --cert.timeout $graceperiod --path /certs --server $server --email $email $extra_args $domain_args\"\n\n  dns_provider=\"$(fn-letsencrypt-computed-dns-provider \"$APP\")\"\n  if [[ -n \"$dns_provider\" ]]; then\n    config=\"--dns $dns_provider $config\"\n  else\n    config=\"--http --http.webroot /webroot $config\"\n  fi\n\n  config_hash=$(echo \"$config\" | sha1sum | awk '{print $1}')\n  config_dir=\"$le_root/certs/$config_hash\"\n  mkdir -p \"$config_dir\"\n\n  rm -f \"$config_dir/docker.env\"\n  touch \"$config_dir/docker.env\"\n  if [[ -n \"$dns_provider\" ]]; then\n    fn-plugin-property-get-all \"letsencrypt\" \"--global\" | while read -r line; do\n      [[ -n \"$line\" ]] || continue\n      key=\"$(cut -d\" \" -f1 <<<\"$line\")\"\n      if [[ \"$key\" == dns-provider-* ]]; then\n        value=\"$(cut -d\" \" -f2 <<<\"$line\")\"\n        echo \"${key#\"dns-provider-\"}=$value\" >>\"$config_dir/docker.env\"\n      fi\n    done\n    fn-plugin-property-get-all \"letsencrypt\" \"$APP\" | while read -r line; do\n      [[ -n \"$line\" ]] || continue\n      key=\"$(cut -d\" \" -f1 <<<\"$line\")\"\n      if [[ \"$key\" == dns-provider-* ]]; then\n        value=\"$(cut -d\" \" -f2 <<<\"$line\")\"\n        echo \"${key#\"dns-provider-\"}=$value\" >>\"$config_dir/docker.env\"\n      fi\n    done\n  fi\n\n  # ensure the permissions are set correctly on anything that may expose api keys\n  chmod 0755 \"$config_dir/docker.env\"\n\n  # store config settings\n  echo \"$config\" >\"$config_dir/config\"\n\n  # send both host and container path\n  # to respect mapped DOKKU_ROOT when running in a container\n  echo \"$DOKKU_HOST_ROOT/$APP/letsencrypt/certs/$config_hash:$config_dir\"\n}\n\nfn-letsencrypt-cron-job-enabled() {\n  declare desc=\"Check if the cron plugin is available\"\n\n  if [[ ! -f \"$PLUGIN_AVAILABLE_PATH/cron/cron-write\" ]]; then\n    return 1\n  fi\n}\n\nfn-letsencrypt-cron-job-add() {\n  declare desc=\"Add auto-renew cronjob to dokku user's crontab\"\n\n  touch \"${DOKKU_LIB_ROOT}/data/letsencrypt/autorenew\"\n  if fn-letsencrypt-cron-job-enabled; then\n    plugn trigger cron-write\n  else\n    crons=\"$(crontab -l || true)\"\n    crons=\"$(grep -v -F \"$LETSENCRYPT_CRON_CMD\" <<<\"$crons\")\"\n    printf \"%s\\n%s\\n\" \"$crons\" \"$LETSENCRYPT_CRON_JOB\" | crontab -\n  fi\n\n  dokku_log_info1 \"Added cron job to dokku's crontab.\"\n}\n\nfn-letsencrypt-cron-job-remove() {\n  declare desc=\"Remove auto-renew cronjob from dokku user's crontab\"\n\n  rm -f \"${DOKKU_LIB_ROOT}/data/letsencrypt/autorenew\"\n  if fn-letsencrypt-cron-job-enabled; then\n    plugn trigger cron-write\n  else\n    crons=\"$(crontab -l || true)\"\n    crons=\"$(grep -v -F \"$LETSENCRYPT_CRON_CMD\" <<<\"$crons\")\"\n    printf \"%s\" \"$crons\" | crontab -\n  fi\n  dokku_log_info1 \"Removed cron job from dokku's crontab.\"\n}\n\nfn-letsencrypt-create-root() {\n  declare desc=\"Ensure the let's encrypt root directory exists\"\n  declare APP=\"$1\"\n  local NGINX_ACCESS_LOG_FORMAT NGINX_ACCESS_LOG_PATH NGINX_ERROR_LOG_PATH\n\n  local app_root=\"$DOKKU_ROOT/$APP\"\n  local le_root=\"$app_root/letsencrypt\"\n\n  mkdir -p \"$le_root\"\n\n  if [[ ! -f \"$DOKKU_ROOT/$APP/nginx.conf\" ]]; then\n    dokku_log_info1 \"Setting temporary site\"\n    NGINX_ACCESS_LOG_FORMAT=\"$(fn-nginx-access-log-format \"$APP\")\"\n    NGINX_ACCESS_LOG_PATH=\"$(fn-nginx-access-log-path \"$APP\")\"\n    NGINX_ERROR_LOG_PATH=\"$(fn-nginx-error-log-path \"$APP\")\"\n    if [[ -z \"$NGINX_ACCESS_LOG_FORMAT\" ]]; then\n      NGINX_ACCESS_LOG_FORMAT=\"$(fn-nginx-computed-access-log-format \"$APP\")\"\n    fi\n    if [[ -z \"$NGINX_ACCESS_LOG_PATH\" ]]; then\n      NGINX_ACCESS_LOG_PATH=\"$(fn-nginx-computed-access-log-path \"$APP\")\"\n    fi\n    if [[ -z \"$NGINX_ERROR_LOG_PATH\" ]]; then\n      NGINX_ERROR_LOG_PATH=\"$(fn-nginx-computed-error-log-path \"$APP\")\"\n    fi\n\n    sigil -f \"$PLUGIN_AVAILABLE_PATH/letsencrypt/templates/default-nginx.conf.sigil\" \\\n      DOMAINS=\"$(get_app_domains \"$APP\" | xargs)\" DOKKU_ROOT=\"$DOKKU_ROOT\" APP=\"$APP\" \\\n      NGINX_ACCESS_LOG_FORMAT=\"$NGINX_ACCESS_LOG_FORMAT\" NGINX_ACCESS_LOG_PATH=\"$NGINX_ACCESS_LOG_PATH\" \\\n      NGINX_ERROR_LOG_PATH=\"$NGINX_ERROR_LOG_PATH\" \\\n      >\"$DOKKU_ROOT/$APP/nginx.conf\"\n    restart_nginx | sed \"s/^/       /\"\n  fi\n}\n\nfn-letsencrypt-is-autorenew-enabled() {\n  declare desc=\"check if autorenew is enabled\"\n  local enabled=false\n\n  if [[ -f \"${DOKKU_LIB_ROOT}/data/letsencrypt/autorenew\" ]]; then\n    enabled=true\n  fi\n\n  echo \"$enabled\"\n}\n\nfn-letsencrypt-computed-email() {\n  declare desc=\"get configured email address\"\n  declare APP=\"$1\"\n\n  value=\"$(fn-letsencrypt-email \"$APP\")\"\n  if [[ -z \"$value\" ]]; then\n    value=\"$(fn-letsencrypt-global-email)\"\n  fi\n\n  echo \"$value\"\n}\n\nfn-letsencrypt-global-email() {\n  declare desc=\"get configured email address\"\n\n  fn-plugin-property-get-default \"letsencrypt\" \"--global\" \"email\" \"\"\n}\n\nfn-letsencrypt-email() {\n  declare desc=\"get configured email address\"\n  declare APP=\"$1\"\n\n  fn-plugin-property-get-default \"letsencrypt\" \"$APP\" \"email\" \"\"\n}\n\nfn-letsencrypt-enable() {\n  declare APP=\"$1\"\n  local EXIT_CODE=0\n  local domain\n\n  verify_app_name \"$APP\"\n\n  domain=\"$(get_app_domains \"$APP\" | xargs | awk '{print $1}')\"\n  if [[ -z \"$domain\" ]]; then\n    dokku_log_warn \"No domains detected for $APP\"\n    return 1\n  fi\n\n  dokku_log_info2 \"Enabling letsencrypt for $APP\"\n\n  fn-letsencrypt-check-email \"$APP\"\n  fn-letsencrypt-acme-proxy-enable \"$APP\"\n  fn-letsencrypt-acme-execute-challenge \"$APP\" || EXIT_CODE=$? # remove ACME proxy even if this fails\n  fn-letsencrypt-acme-proxy-disable \"$APP\"\n\n  if [[ \"$EXIT_CODE\" == 0 ]]; then\n    dokku_log_info1 \"Done\"\n    return\n  fi\n\n  dokku_log_warn \"Failed to setup letsencrypt\"\n  DOKKU_FAIL_EXIT_CODE=\"$EXIT_CODE\" dokku_log_fail \"Check log output for further information on failure\"\n}\n\nfn-letsencrypt-expiration() {\n  declare desc=\"prints expiration time\"\n  declare APP=\"$1\"\n\n  if [[ -f \"$DOKKU_ROOT/$APP/tls/server.letsencrypt.crt\" ]]; then\n    date -u -d \"$(openssl x509 -in \"$DOKKU_ROOT/$APP/tls/server.letsencrypt.crt\" -enddate -noout | sed -e \"s/^notAfter=//\")\" \"+%s\"\n  else\n    date -u -d \"$(openssl x509 -in \"$DOKKU_ROOT/$APP/tls/server.crt\" -enddate -noout | sed -e \"s/^notAfter=//\")\" \"+%s\"\n  fi\n}\n\nfn-letsencrypt-computed-graceperiod() {\n  declare desc=\"get configured graceperiod\"\n  declare APP=\"$1\"\n  local value\n\n  value=\"$(fn-letsencrypt-graceperiod \"$APP\")\"\n  if [[ -z \"$value\" ]]; then\n    value=\"$(fn-letsencrypt-global-graceperiod)\"\n  fi\n\n  if [[ -z \"$value\" ]]; then\n    value=\"$((60 * 60 * 24 * 30))\"\n  fi\n\n  echo \"$value\"\n}\n\nfn-letsencrypt-global-graceperiod() {\n  declare desc=\"get configured graceperiod\"\n\n  fn-plugin-property-get-default \"letsencrypt\" \"--global\" \"graceperiod\" \"\"\n}\n\nfn-letsencrypt-graceperiod() {\n  declare desc=\"get configured graceperiod\"\n  declare APP=\"$1\"\n\n  fn-plugin-property-get-default \"letsencrypt\" \"$APP\" \"graceperiod\" \"\"\n}\n\nfn-letsencrypt-format-timediff() {\n  declare desc=\"format a time difference in seconds into a human-readable string\"\n  local td=\"$1\"\n  local negative_td=0\n\n  if [ \"$td\" -lt 0 ]; then\n    negative_td=1\n    td=$((-td))\n  fi\n\n  local days=$((td / (24 * 60 * 60)))\n  td=$((td % (24 * 60 * 60)))\n\n  local hours=$((td / (60 * 60)))\n  td=$((td % (60 * 60)))\n\n  local minutes=$((td / 60))\n  local secs=$((td % 60))\n\n  local res=\"\"\n  if [ $days -gt 0 ]; then\n    res=\"${days}d, \"\n  fi\n\n  if [ $hours -gt 0 ]; then\n    res=\"${res}${hours}h, \"\n  fi\n\n  if [ $minutes -gt 0 ]; then\n    res=\"${res}${minutes}m, \"\n  fi\n\n  if [ $secs -gt 0 ]; then\n    res=\"${res}${secs}s, \"\n  fi\n\n  # remove trailing comma\n  res=\"$(echo \"$res\" | sed -re 's/, ?$//g')\"\n\n  if [[ $negative_td == 1 ]]; then\n    res=\"${res} ago\"\n  fi\n\n  echo \"$res\"\n}\n\nfn-letsencrypt-is-active() {\n  declare desc=\"outputs true if active, false otherwise\"\n  declare APP=$1\n  local domain\n\n  # check if SSL is enabled on per-app level\n  if ! is_ssl_enabled \"$APP\"; then\n    echo \"false\"\n    return\n  fi\n\n  domain=\"$(get_app_domains \"$APP\" | xargs | awk '{print $1}')\"\n\n  # check if certificate is identical to the current let's encrypt certificate by comparing SHA1 hashes\n  local cert_sha1\n  if [[ -f \"$DOKKU_ROOT/$APP/tls/server.letsencrypt.crt\" ]]; then\n    cert_sha1=$( (cat \"$DOKKU_ROOT/$APP/tls/server.letsencrypt.crt\" 2>/dev/null) | sha1sum || echo \"not_found\")\n  else\n    cert_sha1=$( (cat \"$DOKKU_ROOT/$APP/tls/server.crt\" 2>/dev/null) | sha1sum || echo \"not_found\")\n  fi\n\n  local le_sha1=\"not_found\"\n  local fileSafeDomain\n  fileSafeDomain=\"${domain/\\*/_}\" # wildcards are using *.example.com which have certificates named _.example.com\n  if [[ -f \"$DOKKU_ROOT/$APP/letsencrypt/certs/current/certificates/$fileSafeDomain.pem\" ]]; then\n    le_sha1=$( (cat \"$DOKKU_ROOT/$APP/letsencrypt/certs/current/certificates/$fileSafeDomain.crt\" 2>/dev/null) | sha1sum || echo \"not_found\")\n  elif [[ -f \"$DOKKU_ROOT/$APP/letsencrypt/certs/current/fullchain.pem\" ]]; then\n    le_sha1=$( (cat \"$DOKKU_ROOT/$APP/letsencrypt/certs/current/fullchain.pem\" 2>/dev/null) | sha1sum || echo \"not_found\")\n  fi\n\n  if [[ \"$cert_sha1\" != \"$le_sha1\" ]]; then\n    echo \"false\"\n    return\n  fi\n\n  echo \"true\"\n}\n\nfn-letsencrypt-list-apps-with-expiry() {\n  declare desc=\"list all letsencrypt-secured apps together with their expiry date\"\n\n  # prints a tab-separated list of\n  #  * app name\n  #  * expiry dates as UNIX timestamp (seconds since epoch)\n  #  * selected renewal grace period (in seconds)\n  #  * time left on certificate (in seconds)\n  #  * time until renewal (in seconds)\n\n  for APP in $(dokku_apps); do\n    if [[ \"$APP\" == \"=====>\" ]] || [[ \"$APP\" == \"My\" ]] || [[ \"$APP\" == \"Apps\" ]]; then continue; fi\n    if [[ \"$(fn-letsencrypt-is-active \"$APP\")\" == \"true\" ]]; then\n      local expiry=$(fn-letsencrypt-expiration \"$APP\")\n      local grace_period=\"$(fn-letsencrypt-computed-graceperiod \"$APP\")\"\n      local time_to_expiry=$((expiry - $(date +%s)))\n      local time_to_renewal=$((expiry - grace_period - $(date +%s)))\n      echo -e \"$APP\\t$expiry\\t$grace_period\\t$time_to_expiry\\t$time_to_renewal\"\n    fi\n  done\n}\n\nfn-letsencrypt-computed-server() {\n  declare desc=\"get configured server\"\n  declare APP=\"$1\"\n\n  value=\"$(fn-letsencrypt-server \"$APP\")\"\n  if [[ -z \"$value\" ]]; then\n    value=\"$(fn-letsencrypt-global-server)\"\n  fi\n\n  if [[ -z \"$value\" ]] || [[ \"$value\" == \"default\" ]]; then\n    value=\"https://acme-v02.api.letsencrypt.org/directory\"\n  elif [[ \"$value\" == \"staging\" ]]; then\n    value=\"https://acme-staging-v02.api.letsencrypt.org/directory\"\n  fi\n\n  echo \"$value\"\n}\n\nfn-letsencrypt-global-server() {\n  declare desc=\"get configured server\"\n\n  fn-plugin-property-get-default \"letsencrypt\" \"--global\" \"server\" \"\"\n}\n\nfn-letsencrypt-server() {\n  declare desc=\"get configured server\"\n  declare APP=\"$1\"\n\n  fn-plugin-property-get-default \"letsencrypt\" \"$APP\" \"server\" \"\"\n}\n\nfn-letsencrypt-symlink-certs() {\n  declare desc=\"symlink let's encrypt certificates so they can be found by dokku\"\n  declare APP=\"$1\" config_dir=\"$2\"\n\n  local app_root=\"$DOKKU_ROOT/$APP\"\n  local le_root=\"$app_root/letsencrypt\"\n  local domain\n\n  dokku_log_info1 \"Installing let's encrypt certificates\"\n\n  # link the current config directory to 'current'\n  ln -nsf \"$config_dir\" \"$le_root/certs/current\"\n\n  # install the let's encrypt certificate for the app\n  unset DOKKU_APP_NAME\n  domain=\"$(get_app_domains \"$APP\" | xargs | awk '{print $1}')\"\n  local fileSafeDomain\n  fileSafeDomain=\"${domain/\\*/_}\" # wildcards are using *.example.com which have certificates named _.example.com\n  dokku certs:add \"$APP\" \"$config_dir/certificates/$fileSafeDomain.pem\" \"$config_dir/certificates/$fileSafeDomain.key\"\n  rm -f \"$app_root/tls/server.letsencrypt.crt\" \"$app_root/tls/server.crt\"\n  cp \"$config_dir/certificates/$fileSafeDomain.crt\" \"$app_root/tls/server.letsencrypt.crt\"\n  cp \"$config_dir/certificates/$fileSafeDomain.crt\" \"$app_root/tls/server.crt\"\n}\n"
        },
        {
          "name": "plugin.toml",
          "type": "blob",
          "size": 0.138671875,
          "content": "[plugin]\ndescription = \"Automated installation of let's encrypt TLS certificates\"\nversion = \"0.20.4\"\nsponsors = [\"orca-scan\"]\n[plugin.config]\n"
        },
        {
          "name": "post-app-clone-setup",
          "type": "blob",
          "size": 0.3623046875,
          "content": "#!/usr/bin/env bash\nset -eo pipefail\n[[ $DOKKU_TRACE ]] && set -x\n\ntrigger-letsencrypt-post-app-clone-setup() {\n  declare desc=\"removes cert file when setting up a clone\"\n  declare trigger=\"post-app-clone-setup\"\n  declare OLD_APP=\"$1\" NEW_APP=\"$2\"\n  local APP_ROOT=\"$DOKKU_ROOT/$NEW_APP\"\n\n  rm -rf \"$APP_ROOT/letsencrypt\"\n}\n\ntrigger-letsencrypt-post-app-clone-setup \"$@\"\n"
        },
        {
          "name": "post-app-rename-setup",
          "type": "blob",
          "size": 0.365234375,
          "content": "#!/usr/bin/env bash\nset -eo pipefail\n[[ $DOKKU_TRACE ]] && set -x\n\ntrigger-letsencrypt-post-app-rename-setup() {\n  declare desc=\"removes cert file when setting up a rename\"\n  declare trigger=\"post-app-clone-setup\"\n  declare OLD_APP=\"$1\" NEW_APP=\"$2\"\n  local APP_ROOT=\"$DOKKU_ROOT/$NEW_APP\"\n\n  rm -rf \"$APP_ROOT/letsencrypt\"\n}\n\ntrigger-letsencrypt-post-app-rename-setup \"$@\"\n"
        },
        {
          "name": "post-delete",
          "type": "blob",
          "size": 0.3681640625,
          "content": "#!/usr/bin/env bash\nsource \"$PLUGIN_CORE_AVAILABLE_PATH/common/property-functions\"\nset -eo pipefail\n[[ $DOKKU_TRACE ]] && set -x\n\ntrigger-letsencrypt-post-delete() {\n  declare desc=\"destroys the letsencrypt properties for a given app\"\n  declare trigger=\"post-delete\"\n  declare APP=\"$1\"\n\n  fn-plugin-property-destroy \"letsencrypt\" \"$APP\"\n}\n\ntrigger-letsencrypt-post-delete \"$@\"\n"
        },
        {
          "name": "post-domains-update",
          "type": "blob",
          "size": 0.5029296875,
          "content": "#!/usr/bin/env bash\nsource \"$PLUGIN_CORE_AVAILABLE_PATH/common/functions\"\nset -eo pipefail\n[[ $DOKKU_TRACE ]] && set -x\n\ntrigger-letsencrypt-post-domains-update() {\n  declare desc=\"updates cert file when domains are added or set\"\n  declare trigger=\"post-domains-update\"\n  declare APP=\"$1\" ACTION=\"$2\"\n\n  if [[ \"$ACTION\" == \"add\" ]] || [[ \"$ACTION\" == \"set\" ]]; then\n    dokku_log_warn \"Please run dokku letsencrypt:enable to add https support to the new domain\"\n  fi\n}\n\ntrigger-letsencrypt-post-domains-update \"$@\"\n"
        },
        {
          "name": "report",
          "type": "blob",
          "size": 0.16015625,
          "content": "#!/usr/bin/env bash\nsource \"$PLUGIN_AVAILABLE_PATH/letsencrypt/command-functions\"\nset -eo pipefail\n[[ $DOKKU_TRACE ]] && set -x\n\ncmd-letsencrypt-report-single \"$@\"\n"
        },
        {
          "name": "subcommands",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "uninstall",
          "type": "blob",
          "size": 0.4208984375,
          "content": "#!/usr/bin/env bash\nsource \"$PLUGIN_CORE_AVAILABLE_PATH/common/property-functions\"\nset -eo pipefail\n[[ $DOKKU_TRACE ]] && set -x\n\ntrigger-letsencrypt-uninstall() {\n  declare desc=\"destroys all letsencrypt properties\"\n  declare trigger=\"uninstall\"\n  declare PLUGIN=\"$1\"\n\n  if [[ \"$PLUGIN\" != \"$PLUGIN_COMMAND_PREFIX\" ]]; then\n    return\n  fi\n\n  fn-plugin-property-destroy \"letsencrypt\" \"_all_\"\n}\n\ntrigger-letsencrypt-uninstall \"$@\"\n"
        },
        {
          "name": "update",
          "type": "blob",
          "size": 0.0068359375,
          "content": "install"
        }
      ]
    }
  ]
}