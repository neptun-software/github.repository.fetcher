{
  "metadata": {
    "timestamp": 1736568587144,
    "page": 640,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "unifreq/openwrt_packit",
      "stars": 1454,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.15234375,
          "content": "openwrt-armvirt-64-default-rootfs.tar.gz\n*.sh\nopenwrt_docker_rootfs/\nfiles/\nsrc1/\nsrc2/\nsp1/\nsp2/\ndp1/\ndp2/\ntmp/\noutput/\nflowoffload/\nsfe*/\nwhoami\nmake.env\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1484375,
          "content": "/src1\n/src2\n/sp1\n/sp2\n/dp1\n/dp2\n/tmp\n/output\nflowoffload\nsfe*\nopenwrt-armvirt-64-default-rootfs.tar.gz\nopenwrt-armvirt-64-generic-rootfs.tar.gz\n/whoami\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.177734375,
          "content": "FROM scratch\nADD openwrt-armvirt-64-default-rootfs-patched.tar /\nEXPOSE 22 53 80 443 7681\n# using exec format so that /sbin/init is proc 1 (see procd docs)\nENTRYPOINT [\"/sbin/init\"]\n"
        },
        {
          "name": "README.ACTION.md",
          "type": "blob",
          "size": 10.0166015625,
          "content": "# Github Actions 打包脚本使用说明\n\n支持一键打包目前已经支持的全部 OpenWrt 固件，支持全志（微加云）、瑞芯微（贝壳云，我家云，电犀牛R66S/R68S，Hlink H88K/H66K/H68K/H69K/H28K，瑞莎5B/E25，西瓜皮等），以及晶晨 S9xxx 系列型号如 S905x3、S905x2、S922x、S905x、S905d，S905，S912 等设备。\n\n## 使用方法\n\n在 `.github/workflows` 的编译脚本中引入此 Actions 即可进行打包，例如 [packaging-openwrt.yml](https://github.com/ophub/flippy-openwrt-actions/blob/main/.github/workflows/packaging-openwrt.yml) 中的使用方法，代码如下：\n\n```yaml\n\n- name: Package OpenWrt Firmware\n  uses: unifreq/openwrt_packit@master\n  env:\n    OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*rootfs.tar.gz\n    PACKAGE_SOC: all\n    KERNEL_VERSION_NAME: 6.1.y_6.6.y\n\n```\n\n打包好的固件在 ${{ env.PACKAGED_OUTPUTPATH }}/* ，可以上传至 github.com 的 Releases 中，代码如下：\n\n```yaml\n- name: Upload OpenWrt Firmware to Release\n  uses: ncipollo/release-action@main\n  with:\n    tag: openwrt_armvirt_v8_${{ env.PACKAGED_OUTPUTDATE }}\n    artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*\n    allowUpdates: true\n    token: ${{ secrets.GH_TOKEN }}\n    body: |\n      This is OpenWrt firmware for Armvirt 64\n      * Firmware information\n      Default IP: 192.168.1.1\n      Default username: root\n      Default password: password\n```\n\n## 可选参数说明\n\n可以对 `打包文件`、`make.env`、`选择内核版本`、`选择盒子SoC` 等参数进行个性化配置。\n\n| 参数                   | 默认值                  | 说明                                            |\n|------------------------|------------------------|------------------------------------------------|\n| OPENWRT_ARMVIRT        | 无                     | 必选项. 设置 `openwrt-armvirt-64-default-rootfs.tar.gz` 的文件路径，可以使用相对路径如 `openwrt/bin/targets/*/*/*.tar.gz` 或 网络文件下载地址如 `https://github.com/*/releases/*/*.tar.gz` |\n| KERNEL_REPO_URL        | breakings/OpenWrt     | 设置内核下载仓库的 `<owner>/<repo>`，默认从 breakings 维护的[内核 Releases](https://github.com/breakings/OpenWrt/releases/tag/kernel_stable)里下载。 |\n| KERNEL_VERSION_NAME    | 6.1.y_6.6.y           | 设置[内核版本](https://github.com/breakings/OpenWrt/releases/tag/kernel_stable)，可以查看并选择指定。可指定单个内核如 `6.1.y` ，可选择多个内核用`_`连接如 `6.1.y_6.6.y` |\n| KERNEL_AUTO_LATEST     | true                   | 设置是否自动采用同系列最新版本内核。当为 `true` 时，将自动在内核库中查找在 `KERNEL_VERSION_NAME` 中指定的内核如 6.1.y 的同系列是否有更新的版本，如有更新版本时，将自动更换为最新版。设置为 `false` 时将编译指定版本内核。 |\n| PACKAGE_SOC            | s905d_s905x3_beikeyun  | 设置打包盒子的 `SOC` ，默认 `all` 打包全部盒子，可指定单个盒子如 `s905x3` ，可选择多个盒子用`_`连接如 `s905x3_s905d` 。各盒子的SoC代码为：`vplus`, `cm3`, `jp-tvbox`, `beikeyun`, `l1pro`, `rock5b`, `rock5c`, `e52c`, `r66s`, `r68s`, `h88k`, `h88k-v3`, `ak88`, `ht2`, `e20c`, `h28k`, `h66k`, `h68k`, `h69k`, `h69k-max`, `e25`, `photonicat`, `watermelon-pi`, `zcube1-max`, `rk3399`, `s905`, `s905d`, `s905x2`, `s905x3`, `s912`, `s922x`, `s922x-n2`, `qemu`, `diy`。说明：`s922x-n2` 是 `s922x-odroid-n2`, `diy` 是自定义盒子。 |\n| GZIP_IMGS              | auto                   | 设置打包完毕后文件压缩的格式，可选值 `.gz`（默认） / `.xz` / `.zip` / `.zst` / `.7z` |\n| SELECT_PACKITPATH      | openwrt_packit         | 设置 `/opt` 下的打包目录名称                     |\n| SELECT_OUTPUTPATH      | output                 | 设置 `${SELECT_PACKITPATH}` 目录中固件输出的目录名称 |\n| SCRIPT_VPLUS           | mk_h6_vplus.sh         | 设置打包 `h6 vplus` 的脚本文件名                 |\n| SCRIPT_CM3             | mk_rk3566_radxa-cm3-rpi-cm4-io.sh | 设置打包 `rk3566 radxa-cm3-rpi-cm4-io` 的脚本文件名 |\n| SCRIPT_JPTVBOX         | mk_rk3566_jp-tvbox.sh  | 设置打包 `rk3566 jp-tvbox` 的脚本文件名          |\n| SCRIPT_BEIKEYUN        | mk_rk3328_beikeyun.sh  | 设置打包 `rk3328 beikeyun` 的脚本文件名          |\n| SCRIPT_L1PRO           | mk_rk3328_l1pro.sh     | 设置打包 `rk3328 l1pro` 的脚本文件名             |\n| SCRIPT_ZCUBE1MAX       | mk_rk3399_zcube1-max.sh | 设置打包 `rk3399 zcube1-max` 的脚本文件名       |\n| SCRIPT_ROCK5B          | mk_rk3588_rock5b.sh    | 设置打包 `rk3588 rock5b` 的脚本文件名            |\n| SCRIPT_ROCK5C          | mk_rk3588s_rock5c.sh   | 设置打包 `rk3588s rock5c` 的脚本文件名           |\n| SCRIPT_E52C            | mk_rk3588s_e52c.sh     | 设置打包 `rk3588s e52c` 的脚本文件名             |\n| SCRIPT_H88K            | mk_rk3588_h88k.sh      | 设置打包 `rk3588 h88k/ak88` 的脚本文件名         |\n| SCRIPT_H88KV3          | mk_rk3588_h88k-v3.sh   | 设置打包 `rk3588 h88k-v3` 的脚本文件名           |\n| SCRIPT_HT2             | mk_rk3528_ht2.sh       | 设置打包 `rk3528 ht2` 的脚本文件名               |\n| SCRIPT_E20C            | mk_rk3528_e20c.sh      | 设置打包 `rk3528 e20c` 的脚本文件名              |\n| SCRIPT_H28K            | mk_rk3528_h28k.sh      | 设置打包 `rk3528 h28k` 的脚本文件名              |\n| SCRIPT_H66K            | mk_rk3568_h66k.sh      | 设置打包 `rk3568 h66k` 的脚本文件名              |\n| SCRIPT_H68K            | mk_rk3568_h68k.sh      | 设置打包 `rk3568 h68k` 的脚本文件名              |\n| SCRIPT_H69K            | mk_rk3568_h69k.sh      | 设置打包 `rk3568 h69k` 的脚本文件名              |\n| SCRIPT_R66S            | mk_rk3568_r66s.sh      | 设置打包 `rk3568 r66s` 的脚本文件名              |\n| SCRIPT_R68S            | mk_rk3568_r68s.sh      | 设置打包 `rk3568 r68s` 的脚本文件名              |\n| SCRIPT_E25             | mk_rk3568_e25.sh       | 设置打包 `rk3568 e25` 的脚本文件名               |\n| SCRIPT_PHOTONICAT      | mk_rk3568_photonicat.sh    | 设置打包 `rk3568 photonicat` 的脚本文件名    |\n| SCRIPT_WATERMELONPI    | mk_rk3568_watermelon-pi.sh | 设置打包 `rk3568 watermelon-pi` 的脚本文件名 |\n| SCRIPT_S905            | mk_s905_mxqpro+.sh     | 设置打包 `s905 mxqpro+` 的脚本文件名             |\n| SCRIPT_S905D           | mk_s905d_n1.sh         | 设置打包 `s905d n1` 的脚本文件名                 |\n| SCRIPT_S905X2          | mk_s905x2_x96max.sh    | 设置打包 `s905x2 x96max` 的脚本文件名            |\n| SCRIPT_S905X3          | mk_s905x3_multi.sh     | 设置打包 `s905x3 multi` 的脚本文件名             |\n| SCRIPT_S912            | mk_s912_zyxq.sh        | 设置打包 `s912 zyxq` 的脚本文件名                |\n| SCRIPT_S922X           | mk_s922x_gtking.sh     | 设置打包 `s922x gtking` 的脚本文件名             |\n| SCRIPT_S922X_N2        | mk_s922x_odroid-n2.sh  | 设置打包 `s922x odroid-n2` 的脚本文件名          |\n| SCRIPT_QEMU            | mk_qemu-aarch64_img.sh | 设置打包 `qemu` 的脚本文件名                     |\n| SCRIPT_DIY             | mk_diy.sh              | 设置打包 `diy` 自定义脚本文件名                  |\n| SCRIPT_DIY_PATH        | 无                     | 设置 `SCRIPT_DIY` 文件的来源路径。可以使用网址如 `https://weburl/mydiyfile` 或你仓库中的相对路径如 `script/mk_s905w_tx3.sh` |\n| CUSTOMIZE_RK3399       | 无                     | 设置自定义 rk3399 设备列表，格式：`board1:dtb1/board2:dtb2` |\n| WHOAMI                 | flippy                 | 设置 `make.env` 中 `WHOAMI` 参数的值            |\n| OPENWRT_VER            | auto                   | 设置 `make.env` 中 `OPENWRT_VER` 参数的值。默认 `auto` 将自动继承文件中的赋值，设置为其他参数时将替换为自定义参数。 |\n| SW_FLOWOFFLOAD         | 1                      | 设置 `make.env` 中 `SW_FLOWOFFLOAD` 参数的值    |\n| SFE_FLOW               | 1                      | 设置 `make.env` 中 `SFE_FLOW` 参数的值          |\n| HW_FLOWOFFLOAD         | 0                      | 设置 `make.env` 中 `HW_FLOWOFFLOAD` 参数的值    |\n| ENABLE_WIFI_K504       | 1                      | 设置 `make.env` 中 `ENABLE_WIFI_K504` 参数的值  |\n| ENABLE_WIFI_K510       | 1                      | 设置 `make.env` 中 `ENABLE_WIFI_K510` 参数的值  |\n| DISTRIB_REVISION       | R$(date +%Y.%m.%d)     | 设置 `make.env` 中 `DISTRIB_REVISION` 参数的值  |\n| DISTRIB_DESCRIPTION    | OpenWrt                | 设置 `make.env` 中 `DISTRIB_DESCRIPTION` 参数的值  |\n\n## 输出参数说明\n\n根据 github.com 的标准输出了 3 个变量，方便编译步骤后续使用。由于 github.com 最近修改了 fork 仓库的设置，默认关闭了 Workflow 的读写权限，所以上传到 `Releases` 需要给账户的个人中心添加 [GITHUB_TOKEN](https://docs.github.com/cn/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) ，并在你 fork 的仓库添加密钥 [GH_TOKEN](https://docs.github.com/cn/authentication/keeping-your-account-and-data-secure/reviewing-your-deploy-keys)， 并启用仓库中的 [Workflow 读写权限](https://user-images.githubusercontent.com/68696949/167585338-841d3b05-8d98-4d73-ba72-475aad4a95a9.png)。\n\n| 参数                            | 默认值                  | 说明                       |\n|--------------------------------|-------------------------|---------------------------|\n| ${{ env.PACKAGED_OUTPUTPATH }} | /opt/openwrt_packit/output | 打包后的固件所在文件夹的路径  |\n| ${{ env.PACKAGED_OUTPUTDATE }} | 08.25.1058              | 打包日期                    |\n| ${{ env.PACKAGED_STATUS }}     | success / failure       | 打包状态。成功 / 失败        |\n\n## OpenWrt 固件个性化定制说明\n\n此 `Actions` 仅提供 OpenWrt 打包服务，你需要自己编译 `openwrt-armvirt-64-default-rootfs.tar.gz`。编译方法可以参考 https://github.com/breakings/OpenWrt\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.9208984375,
          "content": "这是 Flippy 的 Openwrt 打包源码，主要用于制作基于arm64 soc的一系列电视盒及开发板可用的openwrt固件，例如：Phicomm N1(amlogic s905d)、贝壳云(rockchip rk3328)、我家云(rockchip rk3328)、微加云(allwinner H6)、Amlogic S905x3、Amlogic s912、Amlogic S922x、FastRhino R66S/R68S(RK3568)、Radxa E25(RK3568)、Hlink H28K(RK3528)、Hlink H66K/H68K/H69K(RK3568)、Hlink H88K(RK3588)，Radxa rock5b(RK3588)、ZCube1-Max(RK3399)、JRadxa CM3-RPI-CM4-IO(RK3566)、JP-TVbox(RK3566)等，除了原生固件以外，也支持 ARM64 Docker openwrt、ARM64 QEMU KVM openwrt等多种形式的固件，基本可满足所有arm64机型的需求了。\n\n一、制作材料：\n1. Flippy预编译好的 Arm64 内核 (在 https://t.me/openwrt_flippy  及 https://pan.baidu.com/s/1tY_-l-Se2qGJ0eKl7FZBuQ 提取码：846l)\n2. 自己编译的 openwrt rootfs tar.gz 包： openwrt-armvirt-64-default-rootfs.tar.gz , openwrt的源码仓库首选 (https://github.com/coolsnowwolf/lede)  ，当然也可以采用其它第三方源，例如 (https://github.com/Lienol/openwrt) , 也可以采用 openwrt 官方源： (https://github.com/openwrt/openwrt)。\n\n二、环境准备\n1. 需要一台 linux 主机， 可以是 x86或arm64架构，可以是物理机或虚拟机（但不支持win10自带的linux环境），需要具备root权限， 并且具备以下基本命令（只列出命令名，不列出命令所在的包名，因不同linux发行版的软件包名、软件包安装命令各有不同，请自己查询)： \n    losetup、lsblk(版本>=2.33)、blkid、uuidgen、fdisk、parted、mkfs.vfat、mkfs.ext4、mkfs.btrfs (列表不一定完整，打包过程中若发生错误，请自行检查输出结果并添加缺失的命令）\n    \n2. 需要把 Flippy预编译好的 Arm64 内核上传至 /opt/kernel目录（目录需要自己创建）\n3. cd  /opt   \n   git clone https://github.com/unifreq/openwrt_packit     \n4. 把编译好的 openwrt-armvirt-64-default-rootfs.tar.gz 上传至 /opt/openwrt_packit目录中\n5. cd /opt/openwrt_packit\n\n   ./mk_xxx.sh  # xxx指代你想要生成的固件类别，例如： ./mk_s905d_n1.sh 表示生成 Phicomm N1所用的固件\n\n   生成好的固件是 .img 格式， 存放在 /opt/openwrt_packit/output 目录中，下载刷机即可\n   \n   提示:工作临时目录是 /opt/openwrt_packit/tmp, 为了提升IO性能，减少硬盘损耗，可以采用tmpfs文件系统挂载到该目录，最多会占用 1GB 内存， 挂载方法如下:\n   ```\n   # 开机自动挂载\n   echo \"none /opt/openwrt_packit/tmp  tmpfs   defaults   0  0\" >> /etc/fstab\n   mount /opt/openwrt_packit/tmp\n   ```\n    或者\n    ```\n    # 手动挂载\n    mount -t tmpfs  none /opt/openwrt_packit/tmp\n    ```\n   \n   相关的在线升级脚本在 files/目录下\n\n   相关的 openwrt 示例配置文件在 files/openwrt_config_demo/目录下\n6. openwrt rootfs 编译注意事项：\n\n       Target System  ->  QEMU ARM Virtual Machine \n       Subtarget ->  QEMU ARMv8 Virtual Machine (cortex-a53)\n       Target Profile  ->  Default\n       Target Images  ->   tar.gz\n       *** 必选软件包(基础依赖包，仅保证打出的包可以写入EMMC,可以在EMMC上在线升级，不包含具体的应用)： \n       Languages -> Perl               \n                    ->  perl-http-date\n                    ->  perlbase-file\n                    ->  perlbase-getopt\n                    ->  perlbase-time\n                    ->  perlbase-unicode                              \n                    ->  perlbase-utf8        \n       Utilities -> Disc -> blkid、fdisk、lsblk、parted            \n                 -> Filesystem -> attr、btrfs-progs(Build with zstd support)、chattr、dosfstools、\n                                  e2fsprogs、f2fs-tools、f2fsck、lsattr、mkf2fs、xfs-fsck、xfs-mkfs\n                 -> Compression -> bsdtar 或 p7zip(非官方源)、pigz\n                 -> Shells  ->  bash         \n                 -> gawk、getopt、losetup、tar、uuidgen\n                 -> acpid (可选， 用于 kvm 虚拟机固件)\n\n        * (可选)Wifi基础包：\n        *     打出的包可支持博通SDIO无线模块,Firmware不用选，\n        *     因为打包源码中已经包含了来自Armbian的firmware，\n        *     会自动覆盖openwrt rootfs中已有的firmware\n        Kernel modules  ->   Wireless Drivers -> kmod-brcmfmac(SDIO) \n                                              -> kmod-brcmutil\n                                              -> kmod-cfg80211\n                                              -> kmod-mac80211\n        Network  ->  WirelessAPD -> hostapd-common\n                                 -> wpa-cli\n                                 -> wpad-basic\n                 ->  iw\n                 \n        * 光影猫(Photonicat) 依赖包：\n            *  (必选, required，如果不选的话开机一分钟内会自动关机，与硬件内置的看门狗有关)\n            Utilities -> pcat-manager\n       \n            * 可选，optional, 如果不选的话，官方个性化主页无效\n            Languages -> Python -> Python3-flask\n                                   Python3-flask-httpauth\n                                   Python3-flask-login\n                                   Python3-flask-seasurf\n                                   Python3-flask-session\n                                   Python3-flask-socketio\n                                   Python3-passlib\n                                   Python3-pyserial\n                                   Python3-sqlite3\n                                   Python3-xml\n                                   Python3-requests\n\n        * DM路由监视器依赖包： https://hiwbb.com/2021/10/openwrt-netdata-show-temperature/\n            *  (必选, required)\n            Applications -> luci-app-netdata\n       \n            * 二选一：建议首先python方式\n            Languages -> Python -> Python3-logging\n                                   Python3-ctypes\n                                   Python3-yaml\n            Utilities -> lm-sensors\n\n            * 或者(OR)   \n            Utilities -> coreutils -> coreutils-timeout\n    \n    除上述必选项以外的软件包可以按需自主选择。\n\n8. OpenWrt 在 KVM 虚拟机中的使用说明：\n\n对于性能过剩的盒子，可以先安装 Armbian 系统，再安装 KVM 虚拟机实现多系统使用。其中 `OpenWrt` 系统的编译可以使用本仓库的 [mk_qemu-aarch64_img.sh](mk_qemu-aarch64_img.sh) 脚本进行制作，其安装与使用说明详见 [qemu-aarch64-readme.md](https://github.com/unifreq/openwrt_packit/blob/master/files/qemu-aarch64/qemu-aarch64-readme.md) 文档，更多系统如 Debian、Ubuntu、OpenSUSE、ArchLinux、Centos、Gentoo、KyLin、UOS 等可在相关网站查阅安装与使用说明。\n\n三、其它相关信息请参见我在恩山论坛的贴子：\n\nhttps://www.right.com.cn/forum/thread-981406-1-1.html\n\nhttps://www.right.com.cn/forum/thread-4055451-1-1.html\n\nhttps://www.right.com.cn/forum/thread-4076037-1-1.html\n\n四、TG群友打包的固件地址\n\n暴躁老哥：\nhttps://github.com/breakings/OpenWrt\n\n有一妙计：\nhttps://github.com/HoldOnBro/Actions-OpenWrt/\n\n诸葛先生：\nhttps://github.com/hibuddies/openwrt/\n\n那坨：\nhttps://github.com/Netflixxp/N1HK1dabao\n\n五、Github Actions 打包使用方法\n    actions 源码来自 https://github.com/ophub (smith1998)，主脚本为 openwrt_flippy.sh  \n\n在 `.github/workflows/*.yml` 云编译脚本中引入此 Actions 即可使用。详细使用说明：[README.ACTION.md](README.ACTION.md)\n\n```yaml\n\n- name: Package Armvirt as OpenWrt\n  uses: unifreq/openwrt_packit@master\n  env:\n    OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*.tar.gz\n    PACKAGE_SOC: s905d_s905x3_beikeyun\n    KERNEL_VERSION_NAME: 5.13.2_5.4.132\n\n```\n六、采用 luci-app-amlogic 在线升级\n   \n   luci-app-amlogic 源码来自 https://github.com/ophub/luci-app-amlogic (smith1998)， 可以集成到openwrt固件中，并与本打包源码紧密结合，可实现在线升级内核和在线升级完整固件。\n\n"
        },
        {
          "name": "action.yml",
          "type": "blob",
          "size": 0.431640625,
          "content": "name: 'Use flippy script to package Armvirt as OpenWrt'\nauthor: 'ophub'\ndescription: 'Package Armvirt as OpenWrt. Support Amlogic S9xxx STB, vplus, beikeyun and l1pro, etc.'\ninputs:\n  mode:\n    description: 'Choose script.'\n    required: false\n    default: 'flippy'\n\nruns:\n  using: \"composite\"\n  steps: \n    - run: ${GITHUB_ACTION_PATH}/openwrt_${{ inputs.mode }}.sh\n      shell: bash\n      \nbranding:\n  icon: 'terminal'\n  color: 'gray-dark'\n"
        },
        {
          "name": "files",
          "type": "tree",
          "content": null
        },
        {
          "name": "make.env",
          "type": "blob",
          "size": 2.16796875,
          "content": "# 环境变量：\n#    WHOAMI\n#    OPENWRT_VER\n#    KERNEL_VERSION\n#    KERNEL_PKG_HOME\n#    可以在环境变量中定义，也可以在whoami中定义，也可以在本文件中定义\n#    优先级： whoami  >  环境变量 > 本文件\n\n# 我是谁(用于banner里显示本固件的制作人，防止网友混淆)\n# 请打包者自己编写whoami文件，内容就一行：\n# WHOAMI=xxx\n# 如果没这个文件的话就都是活雷锋了\nif [ -f \"${PWD}/whoami\" ];then\n    source ${PWD}/whoami\nfi\n\nif [ \"$WHOAMI\" == \"\" ];then\n    WHOAMI=\"活雷锋\"\nfi\n\n# 在 whoami里添加\n# OPENWRT_VER=xxx\n# 如果whoami里未定义 OPENWRT_VER,那么就采用下面的值\nif [ \"${OPENWRT_VER}\" == \"\" ];then\n    OPENWRT_VER=\"R25.01.01\"\nfi\n\n# 在 whoami里添加\n# DISTRIB_REVISION=xxx\n# 如果whoami里未定义 DISTRIB_REVISION,那么就采用下面的值\nif [ \"${DISTRIB_REVISION}\" == \"\" ];then\n    DISTRIB_REVISION=${OPENWRT_VER}\nfi\n\n# 在 whoami里添加\n# DISTRIB_DISCRIPTION=xxx\n# 如果whoami里未定义 DISTRIB_DISCRIPTION,那么就采用下面的值\nif [ \"${DISTRIB_DESCRIPTION}\" == \"\" ];then\n    DISTRIB_DESCRIPTION=\"OpenWrt\"\nfi\n\n# 在 whoami里添加\n# KERNEL_VERSION=xxx\n# 如果whoami里未定义 KERNEL_VERSION,那么就采用下面的值\nif [ \"$KERNEL_VERSION\" == \"\" ];then\n    #KERNEL_VERSION=\"6.1.122-flippy-92+o\"\n    KERNEL_VERSION=\"6.6.68-flippy-92+\"\nfi\n\n# Rockchip BSP kernel for RK3588 boards\nif [ \"$RK3588_KERNEL_VERSION\" == \"\" ];then\n    RK3588_KERNEL_VERSION=\"5.10.160-rk3588-flippy-2412a\"\n    echo\nfi\n\nif [ \"$RK35XX_KERNEL_VERSION\" == \"\" ];then\n    RK35XX_KERNEL_VERSION=\"5.10.160-rk35xx-flippy-2412a\"\nfi\n\n# 在whoami里可以自定义KERNEL_PKG_HOME\n# 如果whoami里未定义 KERNEL_PKG_HOME,那么就采用下面的值\nif [ \"$KERNEL_PKG_HOME\" == \"\" ];then\n    KERNEL_PKG_HOME=\"/opt/kernel\"\nfi\n\n# 5.4内核是否启用wifi 1:启用 0.禁用\nENABLE_WIFI_K504=1\n\n# 5.10(及以上)内核是否启用wifi  1:启用 0:禁用\nENABLE_WIFI_K510=1\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=1\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n\n# 默认是否开启SFE\nSFE_FLOW=0\n\n# 如果开启了 flowoffload， 则默认强制关闭 sfe\nif [ ${SW_FLOWOFFLOAD} -eq 1 ];then\n    SFE_FLOW=0\nfi\n"
        },
        {
          "name": "mk_h6_vplus.sh",
          "type": "blob",
          "size": 5.2978515625,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\nPLATFORM=allwinner\nSOC=h6\nBOARD=vplus\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-allwinner-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/vplus/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\nBOOT_CMD=\"${PWD}/files/vplus/boot/boot.cmd\"\nBOOT_SCR=\"${PWD}/files/vplus/boot/boot.scr\"\n\nDAEMON_JSON=\"${PWD}/files/vplus/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/vplus/balance_irq\"\n\n# 20210424 modify\nUBOOT_BIN=\"${PWD}/files/vplus/u-boot-v2022.04/u-boot-sunxi-with-spl.bin\"\nWRITE_UBOOT_SCRIPT=\"${PWD}/files/vplus/u-boot-v2022.04/update-u-boot.sh\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/allwinner\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/vplus/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-allwinner\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20221102 add\nRGB_HOME=\"${PWD}/files/rgb\"\nRGB_CONFIG=\"${PWD}/files/vplus/rgb\"\n# 20240404 add\nMODULES_HOME=\"${PWD}/files/vplus/modules.d\"\n####################################################################\n\ncheck_depends\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"msdos\" \"$SKIP_MB\" \"$BOOT_MB\" \"fat32\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"fat32\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"vfat\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_allwinner_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\n[ -f $BOOT_CMD ] && cp -v $BOOT_CMD boot.cmd\n[ -f $BOOT_SCR ] && cp -v $BOOT_SCR boot.scr\nrm -f boot-emmc.cmd boot-emmc.scr\ncat > uEnv.txt <<EOF\nLINUX=/zImage\nINITRD=/uInitrd\n\n#  普通版 1800Mhz\nFDT=/dtb/allwinner/sun50i-h6-vplus-cloud.dtb\n#  超频版 2016Mhz\n#FDT=/dtb/allwinner/sun50i-h6-vplus-cloud-2ghz.dtb\n\nAPPEND=root=UUID=${ROOTFS_UUID} rootfstype=btrfs rootflags=compress=zstd:${ZSTD_LEVEL} console=ttyS0,115200n8 no_console_suspend consoleblank=0 fsck.fix=yes fsck.repair=yes net.ifnames=0 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory swapaccount=1\nEOF\necho \"uEnv.txt -->\"\necho \"======================================================================================\"\ncat uEnv.txt\necho \"======================================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv $TGT_IMG $OUTPUT_DIR && sync\necho \"镜像已生成, 存放在 ${OUTPUT_DIR} 下面\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_openwrt_dockerimg.sh",
          "type": "blob",
          "size": 4.8759765625,
          "content": "#!/bin/bash\n\n# 用法：\n# 本机必须安装并运行docker服务\n# 把编译好的　openwrt-armvirt-64-default-rootfs.tar.gz 放到 ./src2/，或./, 再运行本脚本\n#\n# 脚本可以代入2个参数：　          [img_name]              [tag]\n# 例如：./mk_openwrt_dockerimg.sh  myname/openwrt-aarch64  latest\n# 如果不填命令行参数的话，默认镜像名称是　unifreq/openwrt-aarch64:latest\n#\n# build成功后，用 docker images可以看到生成的镜像\n# 并且会打包成本地镜像： ${OUTDIR}/docker-img-openwrt-aarch64-${TAG}.gz (可以用docker loader 命令导入)\n\nIMG_NAME=unifreq/openwrt-aarch64\nTAG=latest\nif [ ! -z \"$1\" ];then\n    IMG_NAME=$1\n    if [ ! -z \"$2\" ];then\n        TAG=$2\n    fi\nfi\n\nWORKDIR=${PWD}\n\nif [ -f ${WORKDIR}/src2/openwrt-armvirt-64-default-rootfs.tar.gz ];then\n    SRC_IMG=${WORKDIR}/src2/openwrt-armvirt-64-default-rootfs.tar.gz\nelif [ -f ${WORKDIR}/openwrt-armvirt-64-default-rootfs.tar.gz ];then\n    SRC_IMG=${WORKDIR}/openwrt-armvirt-64-default-rootfs.tar.gz\nelif [ -f ${WORKDIR}/src2/openwrt-armvirt-64-generic-rootfs.tar.gz ];then\n    SRC_IMG=${WORKDIR}/src2/openwrt-armvirt-64-generic-rootfs.tar.gz\nelif [ -f ${WORKDIR}/openwrt-armvirt-64-generic-rootfs.tar.gz ];then\n    SRC_IMG=${WORKDIR}/openwrt-armvirt-64-generic-rootfs.tar.gz\nfi\n\nif [ ! -f ${SRC_IMG} ];then\n    echo \"Source image is not exists: ${SRC_IMG}\"\n    exit 1\nfi\n\nTMPDIR=${PWD}/openwrt_docker_rootfs\nOUTDIR=${PWD}/output\n[ -d \"$OUTDIR\" ] || mkdir -p ${OUTDIR}\n\n[ -d \"$TMPDIR\" ] && rm -rf \"$TMPDIR\" \nmkdir -p \"$TMPDIR\" && gzip -dc ${SRC_IMG} | ( cd \"$TMPDIR\" && tar xf - && rm -rf ./lib/firmware/* && rm -rf ./lib/modules/*)\n\n[ -x $TMPDIR/bin/bash ] && \\\n\tcp -f files/docker/30-sysinfo.sh $TMPDIR/etc/profile.d/ && \\\n\tsed -e \"s/\\/bin\\/ash/\\/bin\\/bash/\" -i $TMPDIR/etc/passwd && \\\n\tsed -e \"s/\\/bin\\/ash/\\/bin\\/bash/\" -i $TMPDIR/usr/libexec/login.sh\n\n[ -f files/banner ] && \\\n\tcp -f files/banner $TMPDIR/etc/ && \\\n\techo \"The docker aarch64 special edition\" >> $TMPDIR/etc/banner && \\\n\techo \"\" >> $TMPDIR/etc/banner\n\ncat >> $TMPDIR/etc/sysupgrade.conf <<EOF\n/etc/ssh/ssh_host_ed25519_key\n/etc/ssh/ssh_host_ed25519_key.pub\n/etc/ssh/ssh_host_rsa_key\n/etc/ssh/ssh_host_rsa_key.pub\n/root/.ssh/\nEOF\n\ncp -f files/docker/rc.local \"$TMPDIR/etc/\" && \\\ncp -f files/99-custom.conf \"$TMPDIR/etc/sysctl.d/\" && \\\ncp -f files/cpustat \"$TMPDIR/usr/bin/\" && chmod 755 \"$TMPDIR/usr/bin/cpustat\" && \\\ncp -f files/getcpu \"$TMPDIR/bin/\" && chmod 755 \"$TMPDIR/bin/getcpu\" && \\\ncp -f files/coremark.sh \"$TMPDIR/etc/\" && chmod 755 \"$TMPDIR/etc/coremark.sh\"\ncp -f files/kmod \"$TMPDIR/sbin/\" && \\\n\t(\n            cd $TMPDIR/sbin && \\\n\t\t chmod 755 kmod && \\\n                 rm insmod lsmod modinfo modprobe rmmod && \\\n\t\t ln -s kmod insmod && \\\n\t\t ln -s kmod lsmod && \\\n\t\t ln -s kmod modinfo && \\\n\t\t ln -s kmod modprobe && \\\n\t\t ln -s kmod rmmod \n\t)\n\nfor p in `echo files/index.html.patches/*.patch`;do\n    cat $p | (cd \"$TMPDIR/\" && patch -p1 && find . -name '*.orig' -exec rm {} \\; && find . -name '*.rej' -exec rm {} \\;)\ndone\n\ncat files/docker/init.d_turboacc.patch | (cd \"$TMPDIR/\" && patch -p1 )\nif ! cat files/docker/cbi_turboacc_new.patch | (cd \"$TMPDIR/\" && patch -p1 );then\n    cat files/docker/cbi_turboacc.patch | (cd \"$TMPDIR/\" && patch -p1 )\n    ( find \"$TMPDIR\" -name '*.rej' -exec rm {} \\; \n      find \"$TMPDIR\" -name '*.orig' -exec rm {} \\;\n    )\nfi\nsed -e \"s/hw_flow '1'/hw_flow '0'/\" -i $TMPDIR/etc/config/turboacc\nsed -e \"s/sfe_flow '1'/sfe_flow '0'/\" -i $TMPDIR/etc/config/turboacc\n\nrm -f \"$TMPDIR/etc/bench.log\" && \\\necho \"17 3 * * * /etc/coremark.sh\" >> \"$TMPDIR/etc/crontabs/root\"\n\n[ -f ${TMPDIR}/etc/config/qbittorrent ] && sed -e 's/\\/opt/\\/etc/' -i \"${TMPDIR}/etc/config/qbittorrent\"\n\n[ -f ${TMPDIR}/etc/ssh/sshd_config ] && sed -e \"s/#PermitRootLogin prohibit-password/PermitRootLogin yes/\" -i \"${TMPDIR}/etc/ssh/sshd_config\"\n\n[ -f ${TMPDIR}/etc/samba/smb.conf.template ] && cat patches/smb4.11_enable_smb1.patch | (cd \"$TMPDIR\" && [ -f etc/samba/smb.conf.template ] && patch -p1)\n\nsss=$(date +%s) && \\\nddd=$((sss/86400)) && \\\nsed -e \"s/:0:0:99999:7:::/:${ddd}:0:99999:7:::/\" -i \"${TMPDIR}/etc/shadow\" && \\\nsed -e \"s/root::/root:\\$1\\$0yUsq67p\\$RC5cEtaQpM6KHQfhUSIAl\\.:/\" -i \"${TMPDIR}/etc/shadow\"\n\n(cd \"$TMPDIR\" && tar cf ../openwrt-armvirt-64-default-rootfs-patched.tar .) && \\\nif [ `uname -i` == \"aarch64\" ];then\n    # native platform build\n    rm -f DockerImg-OpenwrtArm64-${TAG}.gz && \\\n    docker build -t ${IMG_NAME}:${TAG} . && \\\n    rm -f  openwrt-armvirt-64-default-rootfs-patched.tar && \\\n    rm -rf \"$TMPDIR\" && \\\n    docker save ${IMG_NAME}:${TAG} | pigz -9 > $OUTDIR/docker-img-openwrt-aarch64-${TAG}.gz\nelse\n    # cross platform build\n    rm -f DockerImg-OpenwrtArm64-${TAG}.gz && \\\n    DOCKER_BUILDKIT=1 docker build --platform=linux/arm64 -t ${IMG_NAME}:${TAG} . && \\\n    rm -f  openwrt-armvirt-64-default-rootfs-patched.tar && \\\n    rm -rf \"$TMPDIR\" && \\\n    docker save ${IMG_NAME}:${TAG} | pigz -9 > $OUTDIR/docker-img-openwrt-aarch64-${TAG}.gz\nfi\n"
        },
        {
          "name": "mk_qemu-aarch64_img.sh",
          "type": "blob",
          "size": 4.1044921875,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource qemu-aarch64.env\nsource public_funcs\ninit_work_env\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"mainline:all:>=:5.4\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\n###################################################################\n\n# Openwrt\n###################################################################\nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n###################################################################\n\n# Target raw Image\n###################################################################\nTGT_IMG=\"${WORK_DIR}/openwrt_${PLATFORM}_${SOC}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}_update.img\"\n# Target qcow2 Image\nTGT_QCOW2_IMG=\"${OUTPUT_DIR}/openwrt_${PLATFORM}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.qcow2\"\n\n# 20240319 add\nLXC_PLATFORM=\"aarch64-lxc\"\n# Target LXC rootfs\nTGT_LXC_ROOTFS=\"${OUTPUT_DIR}/openwrt_${OPENWRT_VER}_${LXC_PLATFORM}.tar\"\n# compress: gzip | zstd | xz | none\nLXC_ROOTFS_COMPRESS=\"xz\"\n\n###################################################################\n\ncheck_depends\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + TAIL_MB))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"efi\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"fat16\" \"EFI\" \"R\" \"btrfs\" \"ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"vfat\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_qemu-aarch64_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd \"$TGT_BOOT/EFI/BOOT\"\ncat > grub.cfg <<EOF\necho \"search fs_uuid ${ROOTFS_UUID} ...\"\nsearch.fs_uuid ${ROOTFS_UUID} root\necho \"root=\\$root\"\necho \"set prefix ... \"\nset prefix=(\\$root)'/boot/grub2'\necho \"prefix=\\$prefix\"\nsource \\${prefix}/grub.cfg\nEOF\n\ncd \"$TGT_ROOT/boot/grub2\"\ncat > grub.cfg <<EOF\ninsmod gzio\ninsmod part_gpt\ninsmod zstd\ninsmod btrfs\nterminal_input console\nterminal_output console\nset default=\"0\"\nset timeout=3\n\nmenuentry \"OpenWrt\" {\n\techo    'Loading linux kernel ...'\n        linux /boot/vmlinuz root=UUID=${ROOTFS_UUID} rootfstype=btrfs rootflags=compress=zstd:${ZSTD_LEVEL} console=ttyAMA0,115200n8 no_console_suspend consoleblank=0 fsck.fix=yes fsck.repair=yes net.ifnames=0 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory swapaccount=1\n\techo    'Loading initial ramdisk ...'\n        initrd /boot/initrd.img\n}\nEOF\n\necho \"grub.cfg -->\"\necho \"===============================================================================\"\ncat $TGT_BOOT/EFI/BOOT/grub.cfg\necho \"-------------------------------------------------------------------------------\"\ncat $TGT_ROOT/boot/grub2/grub.cfg\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"vda4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\narchive_lxc_rootfs\nclean_work_env\nsync\necho \"------------------------------------------------------------\"\necho \"转换 raw 格式为 qcow2 格式 ...\"\nqemu-img convert -f raw -O qcow2 ${TGT_IMG} ${TGT_QCOW2_IMG}\nsync\necho \"调整 qcow2 镜像大小: ${QCOW2_MB} ...\"\nqemu-img resize -f qcow2 ${TGT_QCOW2_IMG} ${QCOW2_MB}\nsync\necho \"------------------------------------------------------------\"\nmv ${TGT_IMG} ${OUTPUT_DIR}\nsync\necho \"镜像已生成, 存放在 ${OUTPUT_DIR} 下面\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3328_beikeyun.sh",
          "type": "blob",
          "size": 5.115234375,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\nPLATFORM=rockchip\nSOC=rk3328\nBOARD=beikeyun\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"mainline:all:>=:5.4\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\nBOOT_CMD=\"${PWD}/files/boot.cmd\"\nBOOT_SCR=\"${PWD}/files/boot.scr\"\n\nPWM_FAN=\"${PWD}/files/pwm-fan.pllllllll\"\nDAEMON_JSON=\"${PWD}/files/rk3328/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3328/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3328\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3328/btld-rk3328.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3328/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3328/modules.d\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"msdos\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\n[ -f $BOOT_CMD ] && cp $BOOT_CMD boot.cmd\n[ -f $BOOT_SCR ] && cp $BOOT_SCR boot.scr\nln -sf ./dtb-${KERNEL_VERSION}/rockchip/rk3328-beikeyun*.dtb .\ncat > armbianEnv.txt <<EOF\nverbosity=7\noverlay_prefix=rockchip\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nextraargs=usbcore.autosuspend=-1\nextraboardargs=\nfdtfile=/dtb/rockchip/rk3328-beikeyun-1296mhz.dtb\nkernel_addr_r=0x02000000\nramdisk_addr_r=0x06000000\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3328_l1pro.sh",
          "type": "blob",
          "size": 5.1171875,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 ===========================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\nPLATFORM=rockchip\nSOC=\"rk3328\"\nBOARD=\"l1pro\"\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"mainline:all:>=:5.4\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n######################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# target image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches, scripts\n#####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\nBOOT_CMD=\"${PWD}/files/boot.cmd\"\nBOOT_SCR=\"${PWD}/files/boot.scr\"\n\nPWM_FAN=\"${PWD}/files/pwm-fan.pl\"\nDAEMON_JSON=\"${PWD}/files/rk3328/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3328/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3328\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3328/btld-rk3328.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3328/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3328/modules.d\"\n#####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"msdos\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\n[ -f $BOOT_CMD ] && cp $BOOT_CMD boot.cmd\n[ -f $BOOT_SCR ] && cp $BOOT_SCR boot.scr\nln -sf ./dtb-${KERNEL_VERSION}/rockchip/rk3328-l1pro*.dtb .\ncat > armbianEnv.txt <<EOF\nverbosity=7\noverlay_prefix=rockchip\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nextraargs=usbcore.autosuspend=-1\nextraboardargs=\nfdtfile=/dtb/rockchip/rk3328-l1pro-1296mhz.dtb\nkernel_addr_r=0x02000000\nramdisk_addr_r=0x06000000\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk2p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3399_generic.sh",
          "type": "blob",
          "size": 5.720703125,
          "content": "#!/bin/bash\n\n# rk3399通用脚本： 必须2个参数\n# 参数1: board 随意命名\n# 参数2：fdtfile 必须是内核中真实存在的 dtb 文件名\"\n# 示例: ./mk_rk3399_generic.sh tvi3315a rk3399-tvi3315a.dtb\n\nif [ $# -lt 2 ];then\n\techo \"Usage: $0 board fdtfile\"\n\techo \"Example: $0 tvi3315a rk3399-tvi3315a.dtb\"\n\texit 1\nfi\n\nBOARD=$1\nFDTFILE=$2\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\nPLATFORM=rockchip\nSOC=rk3399\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"rk35xx\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10 mainline:all:>=:6.1\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\ndtb_exists=$(check_fdtfile \"$DTBS_TGZ\" \"$FDTFILE\")\nif [ \"$dtb_exists\" == \"not exists\" ];then\n    echo \"DTB文件: $FDTFILE 在内核 $KERNEL_VERSION 中不存在!\"\n    exit 1\nfi\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3399/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3399/generic/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3399/generic\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3399/generic/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3399/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3399/generic/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3399/modules.d\"\n# 20221123 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3399/generic/modules.d\"\n# 20221013 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3399/generic/wireless\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\nsed -e '/fdtfile=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nfdtfile=${FDTFILE}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3399_zcube1-max.sh",
          "type": "blob",
          "size": 5.283203125,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\n\nPLATFORM=rockchip\nSOC=rk3399\nBOARD=zcube1-max\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"rk35xx\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10 mainline:all:>=:6.1\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3399/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3399/zcube1-max/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3399/zcube1-max\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3399/zcube1-max/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3399/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3399/zcube1-max/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3399/modules.d\"\n# 20221123 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3399/zcube1-max/modules.d\"\n# 20221013 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3399/zcube1-max/wireless\"\n# 20231101 add\nBREATHING_LIGHT=\"${PWD}/files/rk3399/zcube1-max/aw2028\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3528_e20c.sh",
          "type": "blob",
          "size": 5.2998046875,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\n\nPLATFORM=rockchip\nSOC=rk3528\nBOARD=e20c\nSUBVER=$1\n\nif [ -n \"$RK35XX_KERNEL_VERSION\" ];then\n    # lock the kernel version\n    KERNEL_VERSION=$RK35XX_KERNEL_VERSION\n    LOCK_KERNEL=${KERNEL_VERSION}\nfi\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"rk35xx\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3528/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3528/e20c/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3528/e20c\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3528/e20c/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3528/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3528/e20c/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3528/modules.d\"\n# 20221123 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3528/e20c/modules.d\"\n# 20221013 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3528/e20c/wireless\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3528_h28k.sh",
          "type": "blob",
          "size": 5.3193359375,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\n\nPLATFORM=rockchip\nSOC=rk3528\nBOARD=h28k\nSUBVER=$1\n\nif [ -n \"$RK35XX_KERNEL_VERSION\" ];then\n    # lock the kernel version\n    KERNEL_VERSION=$RK35XX_KERNEL_VERSION\n    LOCK_KERNEL=${KERNEL_VERSION}\nfi\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"rk35xx\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10 mainline:all:>=:6.1\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3528/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3528/h28k/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3528/h28k\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3528/h28k/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3528/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3528/h28k/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3528/modules.d\"\n# 20221123 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3528/h28k/modules.d\"\n# 20221013 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3528/h28k/wireless\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3528_ht2.sh",
          "type": "blob",
          "size": 5.3818359375,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\n\nPLATFORM=rockchip\nSOC=rk3528\nBOARD=ht2\nSUBVER=$1\n\nif [ -n \"$RK35XX_KERNEL_VERSION\" ];then\n    # lock the kernel version\n    KERNEL_VERSION=$RK35XX_KERNEL_VERSION\n    LOCK_KERNEL=${KERNEL_VERSION}\nfi\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"rk35xx\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10 mainline:all:>=:6.1\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3528/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3528/ht2/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3528/ht2\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3528/ht2/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3528/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3528/ht2/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3528/modules.d\"\n# 20221123 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3528/ht2/modules.d\"\n# 20221013 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3528/ht2/wireless\"\n# 20231130 add\n#BOARD_FIRMWARE_HOME=\"${PWD}/files/rk3528/ht2/firmware\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3566_jp-tvbox.sh",
          "type": "blob",
          "size": 5.248046875,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\n\nPLATFORM=rockchip\nSOC=rk3566\nBOARD=jp-tvbox\nSUBVER=$1\n\n#export KERNEL_VERSION=$RK35XX_KERNEL_VERSION\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"rk35xx\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10 mainline:all:>=:6.1\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3566/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3566/jp-tvbox/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3566/jp-tvbox\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3566/jp-tvbox/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3566/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3566/jp-tvbox/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3566/modules.d\"\n# 20221123 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3566/jp-tvbox/modules.d\"\n# 20221013 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3566/jp-tvbox/wireless\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3566_radxa-cm3-rpi-cm4-io.sh",
          "type": "blob",
          "size": 5.2841796875,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\n\nPLATFORM=rockchip\nSOC=rk3566\nBOARD=radxa-cm3-rpi-cm4-io\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10 mainline:all:>=:6.1\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3566/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3566/radxa-cm3-rpi-cm4-io/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3566/radxa-cm3-rpi-cm4-io\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3566/radxa-cm3-rpi-cm4-io/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3566/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3566/radxa-cm3-rpi-cm4-io/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3566/modules.d\"\n# 20221123 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3566/radxa-cm3-rpi-cm4-io/modules.d\"\n# 20221013 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3566/radxa-cm3-rpi-cm4-io/wireless\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3568_e25.sh",
          "type": "blob",
          "size": 5.2197265625,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\n\nPLATFORM=rockchip\nSOC=rk3568\nBOARD=e25\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10 mainline:all:>=:6.1\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3568/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3568/e25/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3568/e25\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3568/e25/radxa-e25-bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3568/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3568/e25/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3568/modules.d\"\n# 20221123 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3568/e25/modules.d\"\n# 20221013 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3568/e25/wireless\"\n# 20221101 add\nRGB_HOME=\"${PWD}/files/rgb\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3568_ec-x.sh",
          "type": "blob",
          "size": 5.3271484375,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\n\nPLATFORM=rockchip\nSOC=rk3568\nBOARD=ec-x\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10 mainline:all:>=:6.1\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3568/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3568/ec-x/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3568/ec-x\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3568/ec-x/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3568/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3568/ec-x/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3568/modules.d\"\n# 20221123 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3568/ec-x/modules.d\"\n# 20221013 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3568/ec-x/wireless\"\n# 20230622 add\nNETWORK_SERVICE_PATCH=\"${PWD}/files/rk3568/ec-x/network.patch\"\n\n# 20230921 add\n#DC_VOLTAGE_PATCH=\"${PWD}/files/rk3568/h69k/dc_voltage.patch\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3568_h66k.sh",
          "type": "blob",
          "size": 5.2509765625,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\n\nPLATFORM=rockchip\nSOC=rk3568\nBOARD=h66k\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"rk35xx\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10 mainline:all:>=:6.1\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3568/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3568/h66k/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3568/h66k\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3568/h66k/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3568/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3568/h66k/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3568/modules.d\"\n# 20221123 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3568/h66k/modules.d\"\n# 20221013 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3568/h66k/wireless\"\n\n# 20230921 add\n#DC_VOLTAGE_PATCH=\"${PWD}/files/rk3568/h69k/dc_voltage.patch\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3568_h68k.sh",
          "type": "blob",
          "size": 5.3271484375,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\n\nPLATFORM=rockchip\nSOC=rk3568\nBOARD=h68k\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"rk35xx\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10 mainline:all:>=:6.1\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3568/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3568/h68k/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3568/h68k\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3568/h68k/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3568/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3568/h68k/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3568/modules.d\"\n# 20221123 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3568/h68k/modules.d\"\n# 20221013 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3568/h68k/wireless\"\n# 20230622 add\nNETWORK_SERVICE_PATCH=\"${PWD}/files/rk3568/h68k/network.patch\"\n\n# 20230921 add\n#DC_VOLTAGE_PATCH=\"${PWD}/files/rk3568/h69k/dc_voltage.patch\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3568_h69k.sh",
          "type": "blob",
          "size": 5.8642578125,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\n\nPLATFORM=rockchip\nSOC=rk3568\nBOARD=h69k\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"rk35xx\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10 mainline:all:>=:6.1\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\ncase $SUBVER in\n\t# The H69K-MAX version only has three ethernet ports\n\t# gmac0 is disabled\n\t# while the other H69K versions has four ethernet ports\n\tmax*|MAX*)  DISABLE_GMAC0=1\n\t\t  BOARD=h69k-max\n\t\t  ;;\n\t      *)  DISABLE_GMAC0=0\n\t\t  ;;\nesac\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3568/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3568/h69k/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3568/h69k\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3568/h69k/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3568/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3568/h69k/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3568/modules.d\"\n# 20221123 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3568/h69k/modules.d\"\n# 20221013 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3568/h69k/wireless\"\n# 20230622 add\nNETWORK_SERVICE_PATCH=\"${PWD}/files/rk3568/h69k/network.patch\"\n\n# 20230921 add\n#DC_VOLTAGE_PATCH=\"${PWD}/files/rk3568/h69k/dc_voltage.patch\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\nif [ $DISABLE_GMAC0 -eq 1 ];then\n\told_overlays=$(grep -e \"^overlays=\" armbianEnv.txt | awk -F '=' '{print $2}')\n\tif [ \"$old_overlays\" != \"\" ];then\n\t\toverlays=\"disable-gmac0 $old_overlays\"\n\telse\n\t\toverlays=\"disable-gmac0\"\n\tfi\n\tsed -e '/^overlays=/d' -i armbianEnv.txt\n\techo \"overlays=${overlays}\" >> armbianEnv.txt\nfi\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3568_photonicat.sh",
          "type": "blob",
          "size": 7.0009765625,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\n\nPLATFORM=rockchip\nSOC=rk3568\nBOARD=photonicat\nSUBVER=$1\n\n# 锁定内核版本： 因 6.1.28 回退了rk3568的sgmii补丁，故光影猫最高只能采用6.1.27内核\nKERNEL_VERSION=6.1.27-flippy-83+\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10 mainline:all:>=:6.1\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/rk3568/photonicat/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3568/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3568/photonicat/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3568/photonicat\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3568/photonicat/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3568/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3568/photonicat/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3568/modules.d\"\n# 20221123 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3568/photonicat/modules.d\"\n# 20221013 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3568/photonicat/wireless\"\n# 20230418 add\nPCAT_MANAGER_WEB_HOME=\"${PWD}/files/rk3568/photonicat/pcat-manager-web\"\nUHTTPD_PORT=\"8080\"\nUHTTPD_PORT_S=\"8443\"\n# 20230420 add\nPCAT_MANAGER_CONF=\"${PWD}/files/rk3568/photonicat/pcat-manager.conf\"\nPCAT_MANAGER_WEB_REQUIRES=\"\npython3-flask.control\npython3-flask-httpauth.control\npython3-flask-login.control\npython3-flask-seasurf.control\npython3-flask-session.control\npython3-flask-socketio.control\npython3-passlib.control\npython3-pyserial.control\npython3-requests.control\npython3-sqlite3.control\npython3-xml.control\n\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\n\nfunction check_opkg_requires() {\n\tlocal ok=\"ok\"\n\twhile :;do\n\t\tlocal control=$1\n\t\tshift\n\t\tif [ -n \"$control\" ];then\n\t\t       \tif [ ! -f \"./usr/lib/opkg/info/$control\" ];then\n\t\t\t\tif [ \"$ok\" == \"ok\" ];then\n\t\t\t\t\tok=\"The following packages do not exist:\"\n\t\t\t\tfi\n\t\t\t\tok=\"$ok $control\"\n\t\t\tfi\n\t\telse\n\t\t\tbreak\n\t\tfi\n\tdone\n\techo $ok\n}\n\nif [ -n \"${PCAT_MANAGER_CONF}\" ] && [ -f \"${PCAT_MANAGER_CONF}\" ];then\n\tcp -v \"${PCAT_MANAGER_CONF}\" ./etc/pcat-manager.conf\nfi\nret=$(check_opkg_requires ${PCAT_MANAGER_WEB_REQUIRES})\nif [ \"$ret\" == \"ok\" ];then\n\techo \"为光影猫添加个性化主页 ... \"\n\tif [ -d \"${PCAT_MANAGER_WEB_HOME}\" ];then\n\t\techo \"copy pcat-manager-web files ... \"\n\t\tcp -a ${PCAT_MANAGER_WEB_HOME}/* .\n\tfi\n\tif [ -n \"$UHTTPD_PORT\" ];then\n\t\techo \"change http port from 80 to ${UHTTPD_PORT}\"\n\t\tsed -e \"s/:80/:${UHTTPD_PORT}/g\" -i etc/config/uhttpd\n\tfi\n\tif [ -n \"$UHTTPD_PORT_S\" ];then\n\t\techo \"change https port from 443 to ${UHTTPD_PORT_S}\"\n\t\tsed -e \"s/:443/:${UHTTPD_PORT_S}/g\" -i etc/config/uhttpd\n\tfi\n\techo \"个性化主页配置完成\"\n\techo\nelse\n\techo \"未满足前置条件，采用默认主页, 原因：\"\n\techo $ret\n\techo\nfi\n\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3568_r66s.sh",
          "type": "blob",
          "size": 5.0400390625,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\n\nPLATFORM=rockchip\nSOC=rk3568\nBOARD=r66s\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10 mainline:all:>=:6.1\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3568/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3568/r66s/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3568/r66s\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3568/r66s/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3328/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3568/r66s/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3568/modules.d\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3568_r68s.sh",
          "type": "blob",
          "size": 5.0400390625,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\n\nPLATFORM=rockchip\nSOC=rk3568\nBOARD=r68s\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10 mainline:all:>=:6.1\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3568/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3568/r68s/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3568/r68s\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3568/r68s/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3568/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3568/r68s/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3568/modules.d\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3568_watermelon-pi.sh",
          "type": "blob",
          "size": 5.236328125,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 默认是否开启软件FLOWOFFLOAD\nSW_FLOWOFFLOAD=0\n# 默认是否开启硬件FLOWOFFLOAD\nHW_FLOWOFFLOAD=0\n# 默认是否开启SFE\nSFE_FLOW=1\n\nPLATFORM=rockchip\nSOC=rk3568\nBOARD=watermelon-pi\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"rk35xx\"\nKERNEL_BRANCHES=\"bsp:rk35xx:>=:5.10 mainline:all:>=:6.1\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\nDAEMON_JSON=\"${PWD}/files/rk3568/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3568/watermelon-pi/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3568/watermelon-pi\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3568/watermelon-pi/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3568/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220927 add\nBOARD_HOME=\"${PWD}/files/rk3568/watermelon-pi/board.d\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3568/modules.d\"\n# 20221123 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3568/watermelon-pi/modules.d\"\n# 20221013 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3568/watermelon-pi/wireless\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"EMMC_BOOT\" \"R\" \"btrfs\" \"EMMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3588_h88k-v3.sh",
          "type": "blob",
          "size": 5.8251953125,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\nPLATFORM=rockchip\nSOC=rk3588\nBOARD=h88k-v3\n\n# 默认打包 v3.1 固件，如果需要打包 v3 的，加上 30 参数\ncase \"$1\" in\n     30)  SUBVER=\".0\";;\n     31)  SUBVER=\".1\";;\n      *)  SUBVER=\".1\";;\nesac\n\nif [ -n \"$RK3588_KERNEL_VERSION\" ];then\n    # lock the kernel version\n    KERNEL_VERSION=$RK3588_KERNEL_VERSION\n    LOCK_KERNEL=${KERNEL_VERSION}\nfi\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"rk3588\"\nKERNEL_BRANCHES=\"bsp:rk3588:>=:5.10 mainline:all:>=:6.6\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}${SUBVER}_${OPENWRT_VER}_k${KERNEL_VERSION}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\nDAEMON_JSON=\"${PWD}/files/rk3588/h88k-v3/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3588/h88k-v3/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3588/h88k-v3\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3588/h88k-v3/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3588/h88k-v3/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220906 add\nPWM_FAN=\"${PWD}/files/rk3588/h88k-v3/pwm-fan.pl\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3588/modules.d\"\n# 20221022\nBOARD_HOME=\"${PWD}/files/rk3588/h88k-v3/board.d\"\n# 20230801 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3588/h88k-v3/wireless\"\n# 20230801 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3588/h88k-v3/modules.d\"\n# 20230801 add\nNETWORK_SERVICE_PATCH=\"${PWD}/files/rk3588/h88k-v3/network.patch\"\n\n# 20230903 add\nDC_VOLTAGE_PATCH=\"${PWD}/files/rk3588/h88k/dc_voltage.patch\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=1024\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"MMC_BOOT\" \"R\" \"btrfs\" \"MMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\nsed -e '/fdtfile=/d' -i armbianEnv.txt\ncase $SUBVER in\n    \".0\") echo \"fdtfile=rockchip/rk3588-hlink-h88k-v3.dtb\" >> armbianEnv.txt\n         ;;\n    \".1\") echo \"fdtfile=rockchip/rk3588-hlink-h88k-v31.dtb\" >> armbianEnv.txt\n         ;;\nesac\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3588_h88k.sh",
          "type": "blob",
          "size": 5.8076171875,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\nPLATFORM=rockchip\nSOC=rk3588\nBOARD=h88k\n\n# 新增参数：若SUBVER=25, 则表示此固件为双2.5G网卡(默认是2.5G+1G)\nSUBVER=$1\n\nif [ -n \"$RK3588_KERNEL_VERSION\" ];then\n    # lock the kernel version\n    KERNEL_VERSION=$RK3588_KERNEL_VERSION\n    LOCK_KERNEL=${KERNEL_VERSION}\nfi\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"rk3588\"\nKERNEL_BRANCHES=\"bsp:rk3588:>=:5.10 mainline:all:>=:6.6\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nif [ \"$SUBVER\" == \"25\" ];then\n    TGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}_${SUBVER}.img\"\nelse\n    BOARD=ak88\n    TGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}.img\"\nfi\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\nDAEMON_JSON=\"${PWD}/files/rk3588/h88k/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3588/h88k/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3588/h88k\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3588/h88k/rk3588-h88k-bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3588/h88k/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220906 add\nPWM_FAN=\"${PWD}/files/rk3588/h88k/pwm-fan.pl\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3588/modules.d\"\n# 20221022\nBOARD_HOME=\"${PWD}/files/rk3588/h88k/board.d\"\n# 20230801 add\nWIRELESS_CONFIG=\"${PWD}/files/rk3588/h88k/wireless\"\n# 20230801 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3588/h88k/modules.d\"\n# 20230801 add\nNETWORK_SERVICE_PATCH=\"${PWD}/files/rk3588/h88k/network.patch\"\n\n# 20230903 add\nDC_VOLTAGE_PATCH=\"${PWD}/files/rk3588/h88k/dc_voltage.patch\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=1024\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"MMC_BOOT\" \"R\" \"btrfs\" \"MMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\nif [ \"$SUBVER\" == \"25\" ];then\n\techo \"提示：此固件为双2.5g网卡版本！\"\n\tsed -e 's/^overlays=/overlays=disable-gmac0 /' -i armbianEnv.txt\nfi\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3588_rock5b.sh",
          "type": "blob",
          "size": 5.314453125,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\nPLATFORM=rockchip\nSOC=rk3588\nBOARD=rock5b\nSUBVER=$1\n\nif [ -n \"$RK3588_KERNEL_VERSION\" ];then\n    # lock the kernel version\n    KERNEL_VERSION=$RK3588_KERNEL_VERSION\n    LOCK_KERNEL=${KERNEL_VERSION}\nfi\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"rk3588\"\nKERNEL_BRANCHES=\"bsp:rk3588:>=:5.10 mainline:all:>=:6.6\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\nDAEMON_JSON=\"${PWD}/files/rk3588/rock5b/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3588/rock5b/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3588/rock5b\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3588/rock5b/rk3588-rock5b-bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3588/rock5b/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220906 add\nPWM_FAN=\"${PWD}/files/rk3588/rock5b/pwm-fan.pl\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3588/modules.d\"\n# 20221022\nBOARD_HOME=\"${PWD}/files/rk3588/rock5b/board.d\"\n# 20230801 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3588/rock5b/modules.d\"\n\n# 20230903 add\nDC_VOLTAGE_PATCH=\"${PWD}/files/rk3588/rock5b/dc_voltage.patch\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=1024\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"MMC_BOOT\" \"R\" \"btrfs\" \"MMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3588s_e52c.sh",
          "type": "blob",
          "size": 5.2158203125,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\nPLATFORM=rockchip\nSOC=rk3588s\nBOARD=e52c\nSUBVER=$1\n\nif [ -n \"$RK3588_KERNEL_VERSION\" ];then\n    # lock the kernel version\n    KERNEL_VERSION=$RK3588_KERNEL_VERSION\n    LOCK_KERNEL=${KERNEL_VERSION}\nfi\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"rk3588\"\nKERNEL_BRANCHES=\"bsp:rk3588:>=:5.10 mainline:all:>=:6.6\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\nDAEMON_JSON=\"${PWD}/files/rk3588s/e52c/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3588s/e52c/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3588s/e52c\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3588s/e52c/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3588s/e52c/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220906 add\nPWM_FAN=\"${PWD}/files/rk3588s/e52c/pwm-fan.pl\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3588s/modules.d\"\n# 20221022\nBOARD_HOME=\"${PWD}/files/rk3588s/e52c/board.d\"\n# 20230801 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3588s/e52c/modules.d\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=1024\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"MMC_BOOT\" \"R\" \"btrfs\" \"MMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_rk3588s_rock5c.sh",
          "type": "blob",
          "size": 5.2333984375,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 =================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\nPLATFORM=rockchip\nSOC=rk3588s\nBOARD=rock5c\nSUBVER=$1\n\nif [ -n \"$RK3588_KERNEL_VERSION\" ];then\n    # lock the kernel version\n    KERNEL_VERSION=$RK3588_KERNEL_VERSION\n    LOCK_KERNEL=${KERNEL_VERSION}\nfi\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"rk3588\"\nKERNEL_BRANCHES=\"bsp:rk3588:>=:5.10 mainline:all:>=:6.6\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-rockchip-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\n###################################################################\n\n# Openwrt \nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# Target Image\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# patches、scripts\n####################################################################\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\nDAEMON_JSON=\"${PWD}/files/rk3588s/rock5c/daemon.json\"\n\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201024 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/rk3588s/rock5c/balance_irq\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/rockchip/rk3588s/rock5c\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\nBOOTLOADER_IMG=\"${PWD}/files/rk3588s/rock5c/bootloader.bin\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\nFORCE_REBOOT=\"${PWD}/files/rk3588s/rock5c/reboot\"\n\n# 20210923 add\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-rockchip\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n# 20220906 add\nPWM_FAN=\"${PWD}/files/rk3588s/rock5c/pwm-fan.pl\"\n# 20221001 add\nMODULES_HOME=\"${PWD}/files/rk3588s/modules.d\"\n# 20221022\nBOARD_HOME=\"${PWD}/files/rk3588s/rock5c/board.d\"\n# 20230801 add\nBOARD_MODULES_HOME=\"${PWD}/files/rk3588s/rock5c/modules.d\"\n####################################################################\n\ncheck_depends\n\nSKIP_MB=16\nBOOT_MB=256\nROOTFS_MB=1024\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB + 1))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"gpt\" \"$SKIP_MB\" \"$BOOT_MB\" \"ext4\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"ext4\" \"MMC_BOOT\" \"R\" \"btrfs\" \"MMC_ROOTFS1\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"ext4\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_rockchip_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nsed -e '/rootdev=/d' -i armbianEnv.txt\nsed -e '/rootfstype=/d' -i armbianEnv.txt\nsed -e '/rootflags=/d' -i armbianEnv.txt\ncat >> armbianEnv.txt <<EOF\nrootdev=UUID=${ROOTFS_UUID}\nrootfstype=btrfs\nrootflags=compress=zstd:${ZSTD_LEVEL}\nEOF\necho \"armbianEnv.txt -->\"\necho \"===============================================================================\"\ncat armbianEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk0p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_s905_mxqpro+.sh",
          "type": "blob",
          "size": 5.5244140625,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 ===========================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 盒子型号识别参数 \nPLATFORM=amlogic\nSOC=s905\nBOARD=mxq-pro+\n\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"mainline:all:>=:5.4\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-amlogic-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\nK510=$(get_k510_from_boot_tgz \"${BOOT_TGZ}\" \"vmlinuz-${KERNEL_VERSION}\")\nexport K510\n###########################################################################\n\n# Openwrt root 源文件\nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# 目标镜像文件\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# 补丁和脚本\n###########################################################################\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\nMAC_SCRIPT1=\"${PWD}/files/fix_wifi_macaddr.sh\"\nMAC_SCRIPT2=\"${PWD}/files/find_macaddr.pl\"\nMAC_SCRIPT3=\"${PWD}/files/inc_macaddr.pl\"\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20200930 add\n# 经实测，MXQ Pro+不能写入emmc，写入必砖！\n#INST_SCRIPT=\"${PWD}/files/s905/install-to-emmc.sh\"\n#UPDATE_SCRIPT=\"${PWD}/files/s905/update-to-emmc.sh\"\nSND_MOD=\"${PWD}/files/s905/snd-meson-gx\"\nDAEMON_JSON=\"${PWD}/files/s905/daemon.json\"\n\n# 20201006 add\nFORCE_REBOOT=\"${PWD}/files/s905/reboot\"\n# 20201017 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/s905/balance_irq\"\nCPUFREQ_INIT=\"${PWD}/files/s905/cpufreq\"\n\n# 20210302 modify\nFIP_HOME=\"${PWD}/files/meson_btld/with_fip/s905\"\nUBOOT_WITH_FIP=\"${FIP_HOME}/n1-u-p201.bin.sd.bin\"\nUBOOT_WITHOUT_FIP_HOME=\"${PWD}/files/meson_btld/without_fip\"\nUBOOT_WITHOUT_FIP=\"u-boot-p201.bin\"\n\n# 20210208 add\nWIRELESS_CONFIG=\"${PWD}/files/s905/wireless\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8a/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/amlogic\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\n\n# 20210923 add \nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\n\n# 20211019 add\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"\"\nSSHD_CIPHERS=\"\"\n###########################################################################\n\ncheck_depends\n\nSKIP_MB=4\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"msdos\" \"$SKIP_MB\" \"$BOOT_MB\" \"fat32\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"fat32\" \"BOOT\" \"R\" \"btrfs\" \"ROOTFS\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"vfat\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_amlogic_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nrm -f uEnv.ini\ncat > uEnv.txt <<EOF\nLINUX=/zImage\nINITRD=/uInitrd\n\n# 下列 dtb，用到哪个就把哪个的#删除，其它的则加上 # 在行首\n\n# 用于 MXQ Pro+ (4K, 2G/16G, S905)\nFDT=/dtb/amlogic/meson-gxbb-mxq-pro-plus.dtb\n\nAPPEND=root=UUID=${ROOTFS_UUID} rootfstype=btrfs rootflags=compress=zstd:${ZSTD_LEVEL} console=ttyAML0,115200n8 console=tty0 no_console_suspend consoleblank=0 fsck.fix=yes fsck.repair=yes net.ifnames=0 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory swapaccount=1\nEOF\n\necho \"uEnv.txt -->\"\necho \"===============================================================================\"\ncat uEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk2p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_s905d_n1.sh",
          "type": "blob",
          "size": 5.98828125,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 ===========================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 盒子型号识别参数 \nPLATFORM=amlogic\nSOC=s905d\nBOARD=n1\n\n# 让N1一直有wifi可用，以减少抱怨\n# 5.10(及以上)内核是否启用wifi  1:启用 0:禁用\nENABLE_WIFI_K510=1\n\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"mainline:all:>=:5.4\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-amlogic-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\nK510=$(get_k510_from_boot_tgz \"${BOOT_TGZ}\" \"vmlinuz-${KERNEL_VERSION}\")\nexport K510\n###########################################################################\n\n# Openwrt root 源文件\nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# 目标镜像文件\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# 补丁和脚本\n###########################################################################\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\nMAC_SCRIPT1=\"${PWD}/files/fix_wifi_macaddr.sh\"\nMAC_SCRIPT2=\"${PWD}/files/find_macaddr.pl\"\nMAC_SCRIPT3=\"${PWD}/files/inc_macaddr.pl\"\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20200930 add\nSND_MOD=\"${PWD}/files/s905d/snd-meson-gx\"\nDAEMON_JSON=\"${PWD}/files/s905d/daemon.json\"\n\n# 20201006 add\nFORCE_REBOOT=\"${PWD}/files/s905d/reboot\"\n# 20201017 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/s905d/balance_irq\"\nCPUFREQ_INIT=\"${PWD}/files/s905d/cpufreq\"\n\n# 20210302 modify\nFIP_HOME=\"${PWD}/files/meson_btld/with_fip/s905d\"\nUBOOT_WITH_FIP=\"${FIP_HOME}/n1-u-boot.bin.sd.bin\"\nUBOOT_WITHOUT_FIP_HOME=\"${PWD}/files/meson_btld/without_fip\"\nUBOOT_WITHOUT_FIP=\"u-boot-n1.bin\"\n\n# 20210208 add\nWIRELESS_CONFIG=\"${PWD}/files/s905d/wireless\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/amlogic\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\n\n# 20210923 add\nOPENWRT_INSTALL=\"${PWD}/files/openwrt-install-amlogic\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-amlogic\"\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\n\n# 20211019 add\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\n# 20211020 add\nBTLD_BIN=\"${PWD}/files/s905d/u-boot-2015-phicomm-n1.bin\"\n\n# 20211024 add\nMODEL_DB=\"${PWD}/files/amlogic_model_database.txt\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n###########################################################################\n\ncheck_depends\n\nSKIP_MB=4\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"msdos\" \"$SKIP_MB\" \"$BOOT_MB\" \"fat32\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"fat32\" \"BOOT\" \"R\" \"btrfs\" \"ROOTFS\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"vfat\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_amlogic_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nrm -f uEnv.ini\ncat > uEnv.txt <<EOF\nLINUX=/zImage\nINITRD=/uInitrd\n\n# 下列 dtb，用到哪个就把哪个的#删除，其它的则加上 # 在行首\n\n# 用于 Phicomm N1\nFDT=/dtb/amlogic/meson-gxl-s905d-phicomm-n1.dtb\n\n# 用于 Phicomm N1 (thresh)\n#FDT=/dtb/amlogic/meson-gxl-s905d-phicomm-n1-thresh.dtb\n\nAPPEND=root=UUID=${ROOTFS_UUID} rootfstype=btrfs rootflags=compress=zstd:${ZSTD_LEVEL} console=ttyAML0,115200n8 console=tty0 no_console_suspend consoleblank=0 fsck.fix=yes fsck.repair=yes net.ifnames=0 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory swapaccount=1\nEOF\n\necho \"uEnv.txt -->\"\necho \"===============================================================================\"\ncat uEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk2p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner \nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_s905x2_x96max.sh",
          "type": "blob",
          "size": 5.8271484375,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 ===========================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 盒子型号识别参数 \nPLATFORM=amlogic\nSOC=s905x2\nBOARD=x96max\n\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"mainline:all:>=:5.4\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-amlogic-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\nK510=$(get_k510_from_boot_tgz \"${BOOT_TGZ}\" \"vmlinuz-${KERNEL_VERSION}\")\nexport K510\n###########################################################################\n\n# Openwrt root 源文件\nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# 目标镜像文件\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# 补丁和脚本\n###########################################################################\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\nMAC_SCRIPT1=\"${PWD}/files/fix_wifi_macaddr.sh\"\nMAC_SCRIPT2=\"${PWD}/files/find_macaddr.pl\"\nMAC_SCRIPT3=\"${PWD}/files/inc_macaddr.pl\"\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20200930 add\nDAEMON_JSON=\"${PWD}/files/s905x2/daemon.json\"\n\n# 20201006 add\nFORCE_REBOOT=\"${PWD}/files/s905x2/reboot\"\n# 20201017 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/s905x2/balance_irq\"\nCPUFREQ_INIT=\"${PWD}/files/s905x2/cpufreq\"\n\n# 20210302 modify\nFIP_HOME=\"${PWD}/files/meson_btld/with_fip/s905x2\"\nUBOOT_WITH_FIP=\"${FIP_HOME}/x96max-u-boot.bin.sd.bin\"\nUBOOT_WITHOUT_FIP_HOME=\"${PWD}/files/meson_btld/without_fip\"\nUBOOT_WITHOUT_FIP=\"u-boot-x96max.bin\"\n\n# 20210208 add\nWIRELESS_CONFIG=\"${PWD}/files/s905x2/wireless\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/amlogic\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\n\n# 20210923 add\nOPENWRT_INSTALL=\"${PWD}/files/openwrt-install-amlogic\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-amlogic\"\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\n\n# 20211019 add\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\n# 20211024 add\nMODEL_DB=\"${PWD}/files/amlogic_model_database.txt\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n\n# 20230829 add\nMODULES_HOME=\"${PWD}/files/s905x2/modules.d\"\n###########################################################################\n\ncheck_depends\n\nSKIP_MB=4\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"msdos\" \"$SKIP_MB\" \"$BOOT_MB\" \"fat32\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"fat32\" \"BOOT\" \"R\" \"btrfs\" \"ROOTFS\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"vfat\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_amlogic_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nrm -f uEnv.ini\ncat > uEnv.txt <<EOF\nLINUX=/zImage\nINITRD=/uInitrd\n\n# 下列 dtb，用到哪个就把哪个的#删除，其它的则加上 # 在行首\n\n# 用于 X96 Max\nFDT=/dtb/amlogic/meson-g12a-x96-max.dtb\n\n# 用于 X96 Max (2G内存版本:100M网卡)\n#FDT=/dtb/amlogic/meson-g12a-x96-max-rmii.dtb\n\nAPPEND=root=UUID=${ROOTFS_UUID} rootfstype=btrfs rootflags=compress=zstd:${ZSTD_LEVEL} console=ttyAML0,115200n8 console=tty0 no_console_suspend consoleblank=0 fsck.fix=yes fsck.repair=yes net.ifnames=0 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory swapaccount=1\nEOF\n\necho \"uEnv.txt -->\"\necho \"===============================================================================\"\ncat uEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk2p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_s905x3_multi.sh",
          "type": "blob",
          "size": 7.51953125,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 ===========================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 盒子型号识别参数 \nPLATFORM=amlogic\nSOC=s905x3\nBOARD=multi\n\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"mainline:all:>=:5.4\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-amlogic-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\nK510=$(get_k510_from_boot_tgz \"${BOOT_TGZ}\" \"vmlinuz-${KERNEL_VERSION}\")\nexport K510\n###########################################################################\n\n# Openwrt root 源文件\nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# 目标镜像文件\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# 补丁和脚本\n###########################################################################\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\nMAC_SCRIPT1=\"${PWD}/files/fix_wifi_macaddr.sh\"\nMAC_SCRIPT2=\"${PWD}/files/find_macaddr.pl\"\nMAC_SCRIPT3=\"${PWD}/files/inc_macaddr.pl\"\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20200930 add\nBTLD_BIN=\"${PWD}/files/s905x3/hk1box-bootloader.img\"\nDAEMON_JSON=\"${PWD}/files/s905x3/daemon.json\"\n\n# 20201006 add\nFORCE_REBOOT=\"${PWD}/files/s905x3/reboot\"\n# 20201017 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/s905x3/balance_irq\"\nCPUFREQ_INIT=\"${PWD}/files/s905x3/cpufreq\"\n\n# 20210302 modify\nFIP_HOME=\"${PWD}/files/meson_btld/with_fip/s905x3\"\nUBOOT_WITH_FIP=\"${FIP_HOME}/x96maxplus-u-boot.bin.sd.bin\"\nUBOOT_WITHOUT_FIP_HOME=\"${PWD}/files/meson_btld/without_fip\"\nUBOOT_WITHOUT_FIP=\"u-boot-ugoos-x3.bin\"\n\n# 20210208 add\nWIRELESS_CONFIG=\"${PWD}/files/s905x3/wireless\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8.2a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/amlogic\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\n\n# 20210923 add\nOPENWRT_INSTALL=\"${PWD}/files/openwrt-install-amlogic\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-amlogic\"\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\n\n# 20211019 add\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\n# 20211024 add\nMODEL_DB=\"${PWD}/files/amlogic_model_database.txt\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n\n# 20230829 add\nMODULES_HOME=\"${PWD}/files/s905x3/modules.d\"\n###########################################################################\n\ncheck_depends\n\nSKIP_MB=4\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"msdos\" \"$SKIP_MB\" \"$BOOT_MB\" \"fat32\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"fat32\" \"BOOT\" \"R\" \"btrfs\" \"ROOTFS\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"vfat\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_amlogic_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nrm -f uEnv.ini\ncat > uEnv.txt <<EOF\nLINUX=/zImage\nINITRD=/uInitrd\n\n# 下列 dtb，用到哪个就把哪个的#删除，其它的则加上 # 在行首\n\n# 用于 X96 Max+ (S905X3 网卡工作于 100m)\nFDT=/dtb/amlogic/meson-sm1-x96-max-plus-100m.dtb\n\n# 用于 X96 Max+ (S905X3 网卡工作于 1000M)\n#FDT=/dtb/amlogic/meson-sm1-x96-max-plus.dtb\n\n# 用于 X96 Max+ (S905X3 网卡工作于 1000M) (超频至2208Mhz)\n#FDT=/dtb/amlogic/meson-sm1-x96-max-plus-oc.dtb\n\n# 用于 X96 Max+ with IP1001M (S905X3 网卡工作于 1000M) (超频至2208Mhz)\n#FDT=/dtb/amlogic/meson-sm1-x96-max-plus-ip1001m.dtb\n\n# 用于 HK1 BoX (S905X3 网卡工作于 1000M)\n#FDT=/dtb/amlogic/meson-sm1-hk1box-vontar-x3.dtb\n\n# 用于 HK1 BoX (S905X3 网卡工作于 1000M) (超频至2184Mhz)\n#FDT=/dtb/amlogic/meson-sm1-hk1box-vontar-x3-oc.dtb\n\n# 用于 H96 Max X3 (S905X3 网卡工作于 1000M)\n#FDT=/dtb/amlogic/meson-sm1-h96-max-x3.dtb\n\n# 用于 H96 Max X3 (S905X3 网卡工作于 1000M) (超频至2208Mhz)\n#FDT=/dtb/amlogic/meson-sm1-h96-max-x3-oc.dtb\n\n# 用于 Ugoos X3 Cube/Pro/Pro (网卡工作于1000M)\n#FDT=/dtb/amlogic/meson-sm1-ugoos-x3.dtb\n\n# 用于 Ugoos X3 Cube/Pro/Pro (网卡工作于1000M) (超频至2208Mhz)\n#FDT=/dtb/amlogic/meson-sm1-ugoos-x3-oc.dtb\n\n# 用于 X96 air 千兆版\n#FDT=/dtb/amlogic/meson-sm1-x96-air-1000.dtb\n\n# 用于 X96 air 百兆版\n#FDT=/dtb/amlogic/meson-sm1-x96-air-100.dtb\n\n# 用于 A95XF3 air 千兆版\n#FDT=/dtb/amlogic/meson-sm1-a95xf3-air-1000.dtb\n\n# 用于 A95XF3 air 百兆版\n#FDT=/dtb/amlogic/meson-sm1-a95xf3-air-100.dtb\n\n# 用于 Tanix TX3 百兆版\n#FDT=/dtb/amlogic/meson-sm1-tx3-bz.dtb\n\n# 用于 Tanix TX3 百兆版 (超频至2208Mhz)\n#FDT=/dtb/amlogic/meson-sm1-tx3-bz-oc.dtb\n\n# 用于 Tanix TX3 千兆版\n#FDT=/dtb/amlogic/meson-sm1-tx3-qz.dtb\n\n# 用于 Tanix TX3 千兆版 (超频至2208Mhz)\n#FDT=/dtb/amlogic/meson-sm1-tx3-qz-oc.dtb\n\n# 用于腾讯极光盒子3Pro ( Skyworth LB2004 A4091)\n#FDT=/dtb/amlogic/meson-sm1-skyworth-lb2004-a4091.dtb\n\nAPPEND=root=UUID=${ROOTFS_UUID} rootfstype=btrfs rootflags=compress=zstd:${ZSTD_LEVEL} console=ttyAML0,115200n8 console=tty0 no_console_suspend consoleblank=0 fsck.fix=yes fsck.repair=yes net.ifnames=0 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory swapaccount=1\nEOF\n\necho \"uEnv.txt -->\"\necho \"===============================================================================\"\ncat uEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files \nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk2p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_s912_zyxq.sh",
          "type": "blob",
          "size": 5.841796875,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 ===========================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 盒子型号识别参数 \nPLATFORM=amlogic\nSOC=s912\nBOARD=zyxq\n\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"mainline:all:>=:5.4\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-amlogic-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\nK510=$(get_k510_from_boot_tgz \"${BOOT_TGZ}\" \"vmlinuz-${KERNEL_VERSION}\")\nexport K510\n###########################################################################\n\n# Openwrt root 源文件\nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# 目标镜像文件\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# 补丁和脚本\n###########################################################################\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\nMAC_SCRIPT1=\"${PWD}/files/fix_wifi_macaddr.sh\"\nMAC_SCRIPT2=\"${PWD}/files/find_macaddr.pl\"\nMAC_SCRIPT3=\"${PWD}/files/inc_macaddr.pl\"\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20200930 add\nSND_MOD=\"${PWD}/files/s912/snd-meson-gx\"\nDAEMON_JSON=\"${PWD}/files/s912/daemon.json\"\n\n# 20201006 add\nFORCE_REBOOT=\"${PWD}/files/s912/reboot\"\n# 20201017 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/s912/balance_irq\"\nCPUFREQ_INIT=\"${PWD}/files/s912/cpufreq\"\n\n# 20210302 modify\nFIP_HOME=\"${PWD}/files/meson_btld/with_fip/s912\"\nUBOOT_WITH_FIP=\"${FIP_HOME}/zyxq-u-boot.bin.sd.bin\"\nUBOOT_WITHOUT_FIP_HOME=\"${PWD}/files/meson_btld/without_fip\"\nUBOOT_WITHOUT_FIP=\"u-boot-zyxq.bin\"\n\n# 20210208 add\nWIRELESS_CONFIG=\"${PWD}/files/s912/wireless\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/amlogic\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\n\n# 20210923 add\nOPENWRT_INSTALL=\"${PWD}/files/openwrt-install-amlogic\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-amlogic\"\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\n\n# 20211019 add\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\n# 20211024 add\nMODEL_DB=\"${PWD}/files/amlogic_model_database.txt\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n\n#20220422 add \nBTLD_BIN=\"${PWD}/files/s912/bl-fake-octopus-planet.bin\"\n###########################################################################\n\ncheck_depends\n\nSKIP_MB=4\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"msdos\" \"$SKIP_MB\" \"$BOOT_MB\" \"fat32\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"fat32\" \"BOOT\" \"R\" \"btrfs\" \"ROOTFS\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"vfat\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_amlogic_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nrm -f uEnv.ini\ncat > uEnv.txt <<EOF\nLINUX=/zImage\nINITRD=/uInitrd\n\n# 用于 章鱼星球\nFDT=/dtb/amlogic/meson-gxm-octopus-planet.dtb\n\n# 用于 假冒的章鱼星球\n#FDT=/dtb/amlogic/meson-gxm-fake-octopus-planet.dtb\n\n# 用于 Tanix TX9 Pro\n#FDT=/dtb/amlogic/meson-gxm-tx9-pro.dtb\n\nAPPEND=root=UUID=${ROOTFS_UUID} rootfstype=btrfs rootflags=compress=zstd:${ZSTD_LEVEL} console=ttyAML0,115200n8 console=tty0 no_console_suspend consoleblank=0 fsck.fix=yes fsck.repair=yes net.ifnames=0 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory swapaccount=1\nEOF\n\necho \"uEnv.txt -->\"\necho \"===============================================================================\"\ncat uEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk2p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_s922x_gtking.sh",
          "type": "blob",
          "size": 6.42578125,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 ===========================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 盒子型号识别参数 \nPLATFORM=amlogic\nSOC=s922x\nBOARD=gtking\n\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"mainline:all:>=:5.4\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-amlogic-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\nK510=$(get_k510_from_boot_tgz \"${BOOT_TGZ}\" \"vmlinuz-${KERNEL_VERSION}\")\nexport K510\n###########################################################################\n\n# Openwrt root 源文件\nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# 目标镜像文件\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# 补丁和脚本\n###########################################################################\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\nMAC_SCRIPT1=\"${PWD}/files/fix_wifi_macaddr.sh\"\nMAC_SCRIPT2=\"${PWD}/files/find_macaddr.pl\"\nMAC_SCRIPT3=\"${PWD}/files/inc_macaddr.pl\"\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20200930 add\nSND_MOD=\"${PWD}/files/s922x/snd-meson-g12\"\nDAEMON_JSON=\"${PWD}/files/s922x/daemon.json\"\n\n# 20201006 add\nFORCE_REBOOT=\"${PWD}/files/s922x/reboot\"\n# 20201017 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/s922x/balance_irq\"\nCPUFREQ_INIT=\"${PWD}/files/s922x/cpufreq\"\n\n# 20210302 modify\nFIP_HOME=\"${PWD}/files/meson_btld/with_fip/s922x\"\nUBOOT_WITH_FIP=\"${FIP_HOME}/gtkingpro-u-boot.bin.sd.bin\"\nUBOOT_WITHOUT_FIP_HOME=\"${PWD}/files/meson_btld/without_fip\"\nUBOOT_WITHOUT_FIP=\"u-boot-gtkingpro.bin\"\n\n# 20210208 add\nWIRELESS_CONFIG=\"${PWD}/files/s922x/wireless\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/amlogic\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\n\n# 20210923 add\nOPENWRT_INSTALL=\"${PWD}/files/openwrt-install-amlogic\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-amlogic\"\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\n\n# 20211019 add\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\n# 20211024 add\nMODEL_DB=\"${PWD}/files/amlogic_model_database.txt\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n###########################################################################\n\ncheck_depends\n\nSKIP_MB=4\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"msdos\" \"$SKIP_MB\" \"$BOOT_MB\" \"fat32\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"fat32\" \"BOOT\" \"R\" \"btrfs\" \"ROOTFS\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"vfat\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_amlogic_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nrm -f uEnv.ini\ncat > uEnv.txt <<EOF\nLINUX=/zImage\nINITRD=/uInitrd\n\n# 下列 dtb，用到哪个就把哪个的#删除，其它的则加上 # 在行首\n\n# GT-King S922X 标准版\n# 用于 Belink GT-King (1800Mhz/1908Mhz)\n#FDT=/dtb/amlogic/meson-g12b-gtking.dtb\n\n# GT-King S922X 超频版 \n# 用于 Belink GT-King (1992Mhz/1992Mhz)\n#FDT=/dtb/amlogic/meson-g12b-gtking-oc.dtb\n\n# GT-King Pro S922X-H 标准版 \n# 用于 Belink GT-King Pro (1800Mhz/1908Mhz)\nFDT=/dtb/amlogic/meson-g12b-gtking-pro.dtb\n\n# GT-King Pro S922X-H 标准版\n# 用于 Belink GT-King Pro (1800Mhz/2208Mhz)\n#FDT=/dtb/amlogic/meson-g12b-gtking-pro-h.dtb\n\n# GT-King Pro S922X-H 超频版\n# 用于 Belink GT-King Pro (2016Mhz/2208Mhz)\n#FDT=/dtb/amlogic/meson-g12b-gtking-pro-h-oc.dtb\n\n#UGOOS AM6 Plus\n#FDT=/dev/amlogic/meson-g12b-ugoos-am6.dtb\n\n# Khadas vim3\n#FDT=/dev/amlogic/meson-g12b-a311d-khadas-vim3.dtb\n\n# Ali CT2000\n#FDT=/dev/amlogic/meson-g12b-ali-ct2000.dtb\n\nAPPEND=root=UUID=${ROOTFS_UUID} rootfstype=btrfs rootflags=compress=zstd:${ZSTD_LEVEL} console=ttyAML0,115200n8 console=tty0 no_console_suspend consoleblank=0 fsck.fix=yes fsck.repair=yes net.ifnames=0 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory swapaccount=1\nEOF\n\necho \"uEnv.txt -->\"\necho \"===============================================================================\"\ncat uEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk2p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "mk_s922x_odroid-n2.sh",
          "type": "blob",
          "size": 6.0029296875,
          "content": "#!/bin/bash\n\necho \"========================= begin $0 ===========================\"\nsource make.env\nsource public_funcs\ninit_work_env\n\n# 盒子型号识别参数 \nPLATFORM=amlogic\nSOC=s922x\nBOARD=odroid-n2\n\nSUBVER=$1\n\n# Kernel image sources\n###################################################################\nKERNEL_TAGS=\"stable\"\nKERNEL_BRANCHES=\"mainline:all:>=:5.4\"\nMODULES_TGZ=${KERNEL_PKG_HOME}/modules-${KERNEL_VERSION}.tar.gz\ncheck_file ${MODULES_TGZ}\nBOOT_TGZ=${KERNEL_PKG_HOME}/boot-${KERNEL_VERSION}.tar.gz\ncheck_file ${BOOT_TGZ}\nDTBS_TGZ=${KERNEL_PKG_HOME}/dtb-amlogic-${KERNEL_VERSION}.tar.gz\ncheck_file ${DTBS_TGZ}\nK510=$(get_k510_from_boot_tgz \"${BOOT_TGZ}\" \"vmlinuz-${KERNEL_VERSION}\")\nexport K510\n###########################################################################\n\n# Openwrt root 源文件\nOPWRT_ROOTFS_GZ=$(get_openwrt_rootfs_archive ${PWD})\ncheck_file ${OPWRT_ROOTFS_GZ}\necho \"Use $OPWRT_ROOTFS_GZ as openwrt rootfs!\"\n\n# 目标镜像文件\nTGT_IMG=\"${WORK_DIR}/openwrt_${SOC}_${BOARD}_${OPENWRT_VER}_k${KERNEL_VERSION}${SUBVER}.img\"\n\n# 补丁和脚本\n###########################################################################\nKMOD=\"${PWD}/files/kmod\"\nKMOD_BLACKLIST=\"${PWD}/files/kmod_blacklist\"\nMAC_SCRIPT1=\"${PWD}/files/fix_wifi_macaddr.sh\"\nMAC_SCRIPT2=\"${PWD}/files/find_macaddr.pl\"\nMAC_SCRIPT3=\"${PWD}/files/inc_macaddr.pl\"\nCPUSTAT_SCRIPT=\"${PWD}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${PWD}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches\"\nGETCPU_SCRIPT=\"${PWD}/files/getcpu\"\nTTYD=\"${PWD}/files/ttyd\"\nFLIPPY=\"${PWD}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${PWD}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${PWD}/files/firmware\"\nSMB4_PATCH=\"${PWD}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${PWD}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${PWD}/files/coremark.sh\"\n\n# 20200930 add\nSND_MOD=\"${PWD}/files/s922x/snd-meson-g12\"\nDAEMON_JSON=\"${PWD}/files/s922x/daemon.json\"\n\n# 20201006 add\nFORCE_REBOOT=\"${PWD}/files/s922x/reboot\"\n# 20201017 add\nBAL_ETH_IRQ=\"${PWD}/files/balethirq.pl\"\n# 20201026 add\nFIX_CPU_FREQ=\"${PWD}/files/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${PWD}/files/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${PWD}/files/openssl_engine.patch\"\n\n# 20201212 add\nBAL_CONFIG=\"${PWD}/files/s922x/balance_irq\"\nCPUFREQ_INIT=\"${PWD}/files/s922x/cpufreq\"\n\n# 20210302 modify\nFIP_HOME=\"${PWD}/files/meson_btld/with_fip/s922x\"\nUBOOT_WITH_FIP=\"${FIP_HOME}/odroid-n2-u-boot.bin.sd.bin\"\nUBOOT_WITHOUT_FIP_HOME=\"${PWD}/files/meson_btld/without_fip\"\nUBOOT_WITHOUT_FIP=\"u-boot-gtkingpro-rev-a.bin\"\n\n# 20210208 add\nWIRELESS_CONFIG=\"${PWD}/files/s922x/wireless\"\n\n# 20210307 add\nSS_LIB=\"${PWD}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${PWD}/files/ss-glibc/armv8a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${PWD}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${PWD}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${PWD}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${PWD}/files/bootfiles/amlogic\"\nGET_RANDOM_MAC=\"${PWD}/files/get_random_mac.sh\"\n\n# 20210618 add\nDOCKER_README=\"${PWD}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${PWD}/files/30-sysinfo.sh\"\n\n# 20210923 add\nOPENWRT_INSTALL=\"${PWD}/files/openwrt-install-amlogic\"\nOPENWRT_UPDATE=\"${PWD}/files/openwrt-update-amlogic\"\nOPENWRT_KERNEL=\"${PWD}/files/openwrt-kernel\"\nOPENWRT_BACKUP=\"${PWD}/files/openwrt-backup\"\n\n# 20211019 add\nFIRSTRUN_SCRIPT=\"${PWD}/files/first_run.sh\"\n\n# 20211024 add\nMODEL_DB=\"${PWD}/files/amlogic_model_database.txt\"\n# 20211214 add\nP7ZIP=\"${PWD}/files/7z\"\n# 20211217 add\nDDBR=\"${PWD}/files/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n###########################################################################\n\ncheck_depends\n\nSKIP_MB=4\nBOOT_MB=256\nROOTFS_MB=960\nSIZE=$((SKIP_MB + BOOT_MB + ROOTFS_MB))\ncreate_image \"$TGT_IMG\" \"$SIZE\"\ncreate_partition \"$TGT_DEV\" \"msdos\" \"$SKIP_MB\" \"$BOOT_MB\" \"fat32\" \"0\" \"-1\" \"btrfs\"\nmake_filesystem \"$TGT_DEV\" \"B\" \"fat32\" \"BOOT\" \"R\" \"btrfs\" \"ROOTFS\"\nmount_fs \"${TGT_DEV}p1\" \"${TGT_BOOT}\" \"vfat\"\nmount_fs \"${TGT_DEV}p2\" \"${TGT_ROOT}\" \"btrfs\" \"compress=zstd:${ZSTD_LEVEL}\"\necho \"创建 /etc 子卷 ...\"\nbtrfs subvolume create $TGT_ROOT/etc\nextract_rootfs_files\nextract_amlogic_boot_files\n\necho \"修改引导分区相关配置 ... \"\ncd $TGT_BOOT\nrm -f uEnv.ini\ncat > uEnv.txt <<EOF\nLINUX=/zImage\nINITRD=/uInitrd\n\n# 下列 dtb，用到哪个就把哪个的#删除，其它的则加上 # 在行首\n\n# 标准版\n# 用于 Hardkernel Odroid N2 (1800Mhz/1908Mhz)\n#FDT=/dtb/amlogic/meson-g12b-odroid-n2.dtb\n\n# 标准版\n# 用于 Belink GT-King Pro (Rev A) (1800Mhz/1908Mhz)\nFDT=/dtb/amlogic/meson-g12b-gtking-pro-rev_a.dtb\n\n# 超频版\n# 用于 Belink GT-King Pro (Rev A) (1992Mhz/1992Mhz)\n#FDT=/dtb/amlogic/meson-g12b-gtking-pro-rev_a-oc.dtb\n\nAPPEND=root=UUID=${ROOTFS_UUID} rootfstype=btrfs rootflags=compress=zstd:${ZSTD_LEVEL} console=ttyAML0,115200n8 console=tty0 no_console_suspend consoleblank=0 fsck.fix=yes fsck.repair=yes net.ifnames=0 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory swapaccount=1\nEOF\n\necho \"uEnv.txt -->\"\necho \"===============================================================================\"\ncat uEnv.txt\necho \"===============================================================================\"\necho\n\necho \"修改根文件系统相关配置 ... \"\ncd $TGT_ROOT\ncopy_supplement_files\nextract_glibc_programs\nadjust_docker_config\nadjust_openssl_config\nadjust_qbittorrent_config\nadjust_getty_config\nadjust_samba_config\nadjust_nfs_config \"mmcblk2p4\"\nadjust_openssh_config\nadjust_openclash_config\nuse_xrayplug_replace_v2rayplug\ncreate_fstab_config\nadjust_turboacc_config\nadjust_ntfs_config\nadjust_mosdns_config\npatch_admin_status_index_html\nadjust_kernel_env\ncopy_uboot_to_fs\nwrite_release_info\nwrite_banner\nconfig_first_run\ncreate_snapshot \"etc-000\"\nwrite_uboot_to_disk\nclean_work_env\nmv ${TGT_IMG} ${OUTPUT_DIR} && sync\necho \"镜像已生成! 存放在 ${OUTPUT_DIR} 下面!\"\necho \"========================== end $0 ================================\"\necho\n"
        },
        {
          "name": "openwrt_flippy.sh",
          "type": "blob",
          "size": 30.3798828125,
          "content": "#!/usr/bin/env bash\n#==============================================================================================\n#\n# Description: Automatically Packaged OpenWrt\n# Function: Use Flippy's kernrl files and script to Packaged openwrt\n# Copyright (C) 2021 https://github.com/unifreq/openwrt_packit\n# Copyright (C) 2021 https://github.com/ophub/flippy-openwrt-actions\n#\n#======================================= Functions list =======================================\n#\n# error_msg         : Output error message\n# init_var          : Initialize all variables\n# init_packit_repo  : Initialize packit openwrt repo\n# query_kernel      : Query the latest kernel version\n# check_kernel      : Check kernel files integrity\n# download_kernel   : Download the kernel\n# make_openwrt      : Loop to make OpenWrt files\n# out_github_env    : Output github.com variables\n#\n#=============================== Set make environment variables ===============================\n#\n# Set the default package source download repository\nSCRIPT_REPO_URL_VALUE=\"https://github.com/unifreq/openwrt_packit\"\nSCRIPT_REPO_BRANCH_VALUE=\"master\"\n\n# Set the *rootfs.tar.gz package save name\nPACKAGE_FILE=\"openwrt-armvirt-64-generic-rootfs.tar.gz\"\n\n# Set the list of supported device\nPACKAGE_OPENWRT=(\n    \"rock5b\" \"rock5c\" \"e52c\" \"ak88\" \"h88k\" \"h88k-v3\"\n    \"r66s\" \"r68s\" \"e25\" \"photonicat\" \"cm3\"\n    \"watermelon-pi\" \"zcube1-max\" \"jp-tvbox\" \"ht2\" \"e20c\" \"h28k\" \"h66k\" \"h68k\" \"h69k\" \"h69k-max\"\n    \"beikeyun\" \"l1pro\"\n    \"vplus\"\n    \"s922x\" \"s922x-n2\" \"s905x3\" \"s905x2\" \"s912\" \"s905d\" \"s905\"\n    \"qemu\"\n    \"diy\"\n)\n# Set the list of devices using the [ rk3588 ] kernel\nPACKAGE_OPENWRT_RK3588=(\"rock5b\" \"rock5c\" \"e52c\" \"ak88\" \"h88k\" \"h88k-v3\")\n# Set the list of devices using the [ rk35xx ] kernel\n# Devices from the rk3528/rk3566/rk3568 series can utilize the rk35xx and rk3588 kernels.\nPACKAGE_OPENWRT_RK35XX=(\"watermelon-pi\" \"zcube1-max\" \"jp-tvbox\" \"ht2\" \"e20c\" \"h28k\" \"h66k\" \"h68k\" \"h69k\" \"h69k-max\")\n# Set the list of devices using the [ 6.x.y ] kernel\nPACKAGE_OPENWRT_6XY=(\"r66s\" \"r68s\" \"e25\" \"photonicat\" \"cm3\" \"rk3399\")\n# All are packaged by default, and independent settings are supported, such as: [ s905x3_s905d_rock5b ]\nPACKAGE_SOC_VALUE=\"all\"\n\n# Set the default packaged kernel download repository\nKERNEL_REPO_URL_VALUE=\"breakings/OpenWrt\"\n# Set kernel tag: kernel_stable, kernel_rk3588, kernel_rk35xx\nKERNEL_TAGS=(\"stable\" \"rk3588\" \"rk35xx\")\nSTABLE_KERNEL=(\"6.1.y\" \"6.6.y\")\nRK3588_KERNEL=(\"5.10.y\")\nRK35XX_KERNEL=(\"5.10.y\")\nKERNEL_AUTO_LATEST_VALUE=\"true\"\n\n# Set the working directory under /opt\nSELECT_PACKITPATH_VALUE=\"openwrt_packit\"\nSELECT_OUTPUTPATH_VALUE=\"output\"\nGZIP_IMGS_VALUE=\"auto\"\nSAVE_OPENWRT_ARMVIRT_VALUE=\"true\"\n\n# Set the default packaging script\nSCRIPT_VPLUS_FILE=\"mk_h6_vplus.sh\"\nSCRIPT_BEIKEYUN_FILE=\"mk_rk3328_beikeyun.sh\"\nSCRIPT_L1PRO_FILE=\"mk_rk3328_l1pro.sh\"\nSCRIPT_ZCUBE1MAX_FILE=\"mk_rk3399_zcube1-max.sh\"\nSCRIPT_CM3_FILE=\"mk_rk3566_radxa-cm3-rpi-cm4-io.sh\"\nSCRIPT_HT2_FILE=\"mk_rk3528_ht2.sh\"\nSCRIPT_E20C_FILE=\"mk_rk3528_e20c.sh\"\nSCRIPT_H28K_FILE=\"mk_rk3528_h28k.sh\"\nSCRIPT_H66K_FILE=\"mk_rk3568_h66k.sh\"\nSCRIPT_H68K_FILE=\"mk_rk3568_h68k.sh\"\nSCRIPT_H69K_FILE=\"mk_rk3568_h69k.sh\"\nSCRIPT_H88K_FILE=\"mk_rk3588_h88k.sh\"\nSCRIPT_H88KV3_FILE=\"mk_rk3588_h88k-v3.sh\"\nSCRIPT_JPTVBOX_FILE=\"mk_rk3566_jp-tvbox.sh\"\nSCRIPT_R66S_FILE=\"mk_rk3568_r66s.sh\"\nSCRIPT_R68S_FILE=\"mk_rk3568_r68s.sh\"\nSCRIPT_E25_FILE=\"mk_rk3568_e25.sh\"\nSCRIPT_PHOTONICAT_FILE=\"mk_rk3568_photonicat.sh\"\nSCRIPT_WATERMELONPI_FILE=\"mk_rk3568_watermelon-pi.sh\"\nSCRIPT_ROCK5B_FILE=\"mk_rk3588_rock5b.sh\"\nSCRIPT_ROCK5C_FILE=\"mk_rk3588s_rock5c.sh\"\nSCRIPT_E52C_FILE=\"mk_rk3588s_e52c.sh\"\nSCRIPT_S905_FILE=\"mk_s905_mxqpro+.sh\"\nSCRIPT_S905D_FILE=\"mk_s905d_n1.sh\"\nSCRIPT_S905X2_FILE=\"mk_s905x2_x96max.sh\"\nSCRIPT_S905X3_FILE=\"mk_s905x3_multi.sh\"\nSCRIPT_S912_FILE=\"mk_s912_zyxq.sh\"\nSCRIPT_S922X_FILE=\"mk_s922x_gtking.sh\"\nSCRIPT_S922X_N2_FILE=\"mk_s922x_odroid-n2.sh\"\nSCRIPT_QEMU_FILE=\"mk_qemu-aarch64_img.sh\"\nSCRIPT_DIY_FILE=\"mk_diy.sh\"\nSCRIPT_RK3399_FILE=\"mk_rk3399_generic.sh\"\n\n# Set make.env related parameters\nWHOAMI_VALUE=\"flippy\"\nOPENWRT_VER_VALUE=\"auto\"\nSW_FLOWOFFLOAD_VALUE=\"1\"\nHW_FLOWOFFLOAD_VALUE=\"0\"\nSFE_FLOW_VALUE=\"1\"\nENABLE_WIFI_K504_VALUE=\"1\"\nENABLE_WIFI_K510_VALUE=\"1\"\nDISTRIB_REVISION_VALUE=\"R$(date +%Y.%m.%d)\"\nDISTRIB_DESCRIPTION_VALUE=\"OpenWrt\"\n\n# Set font color\nSTEPS=\"[\\033[95m STEPS \\033[0m]\"\nINFO=\"[\\033[94m INFO \\033[0m]\"\nSUCCESS=\"[\\033[92m SUCCESS \\033[0m]\"\nNOTE=\"[\\033[93m NOTE \\033[0m]\"\nWARNING=\"[\\033[93m WARNING \\033[0m]\"\nERROR=\"[\\033[91m ERROR \\033[0m]\"\n#\n#==============================================================================================\n\nerror_msg() {\n    echo -e \"${ERROR} ${1}\"\n    exit 1\n}\n\ninit_var() {\n    echo -e \"${STEPS} Start Initializing Variables...\"\n\n    # Install the compressed package\n    sudo apt-get -qq update\n    sudo apt-get -qq install -y curl git coreutils p7zip p7zip-full zip unzip gzip xz-utils pigz zstd jq tar\n\n    # Specify the default value\n    [[ -n \"${SCRIPT_REPO_URL}\" ]] || SCRIPT_REPO_URL=\"${SCRIPT_REPO_URL_VALUE}\"\n    [[ \"${SCRIPT_REPO_URL}\" == http* ]] || SCRIPT_REPO_URL=\"https://github.com/${SCRIPT_REPO_URL}\"\n    [[ -n \"${SCRIPT_REPO_BRANCH}\" ]] || SCRIPT_REPO_BRANCH=\"${SCRIPT_REPO_BRANCH_VALUE}\"\n    [[ -n \"${KERNEL_REPO_URL}\" ]] || KERNEL_REPO_URL=\"${KERNEL_REPO_URL_VALUE}\"\n    [[ -n \"${PACKAGE_SOC}\" ]] || PACKAGE_SOC=\"${PACKAGE_SOC_VALUE}\"\n    [[ -n \"${KERNEL_AUTO_LATEST}\" ]] || KERNEL_AUTO_LATEST=\"${KERNEL_AUTO_LATEST_VALUE}\"\n    [[ -n \"${GZIP_IMGS}\" ]] || GZIP_IMGS=\"${GZIP_IMGS_VALUE}\"\n    [[ -n \"${SELECT_PACKITPATH}\" ]] || SELECT_PACKITPATH=\"${SELECT_PACKITPATH_VALUE}\"\n    [[ -n \"${SELECT_OUTPUTPATH}\" ]] || SELECT_OUTPUTPATH=\"${SELECT_OUTPUTPATH_VALUE}\"\n    [[ -n \"${SAVE_OPENWRT_ARMVIRT}\" ]] || SAVE_OPENWRT_ARMVIRT=\"${SAVE_OPENWRT_ARMVIRT_VALUE}\"\n\n    # Specify the default packaging script\n    [[ -n \"${SCRIPT_VPLUS}\" ]] || SCRIPT_VPLUS=\"${SCRIPT_VPLUS_FILE}\"\n    [[ -n \"${SCRIPT_BEIKEYUN}\" ]] || SCRIPT_BEIKEYUN=\"${SCRIPT_BEIKEYUN_FILE}\"\n    [[ -n \"${SCRIPT_L1PRO}\" ]] || SCRIPT_L1PRO=\"${SCRIPT_L1PRO_FILE}\"\n    [[ -n \"${SCRIPT_ZCUBE1MAX}\" ]] || SCRIPT_ZCUBE1MAX=\"${SCRIPT_ZCUBE1MAX_FILE}\"\n    [[ -n \"${SCRIPT_CM3}\" ]] || SCRIPT_CM3=\"${SCRIPT_CM3_FILE}\"\n    [[ -n \"${SCRIPT_HT2}\" ]] || SCRIPT_HT2=\"${SCRIPT_HT2_FILE}\"\n    [[ -n \"${SCRIPT_E20C}\" ]] || SCRIPT_E20C=\"${SCRIPT_E20C_FILE}\"\n    [[ -n \"${SCRIPT_H28K}\" ]] || SCRIPT_H28K=\"${SCRIPT_H28K_FILE}\"\n    [[ -n \"${SCRIPT_H66K}\" ]] || SCRIPT_H66K=\"${SCRIPT_H66K_FILE}\"\n    [[ -n \"${SCRIPT_H68K}\" ]] || SCRIPT_H68K=\"${SCRIPT_H68K_FILE}\"\n    [[ -n \"${SCRIPT_H69K}\" ]] || SCRIPT_H69K=\"${SCRIPT_H69K_FILE}\"\n    [[ -n \"${SCRIPT_H88K}\" ]] || SCRIPT_H88K=\"${SCRIPT_H88K_FILE}\"\n    [[ -n \"${SCRIPT_H88KV3}\" ]] || SCRIPT_H88KV3=\"${SCRIPT_H88KV3_FILE}\"\n    [[ -n \"${SCRIPT_JPTVBOX}\" ]] || SCRIPT_JPTVBOX=\"${SCRIPT_JPTVBOX_FILE}\"\n    [[ -n \"${SCRIPT_R66S}\" ]] || SCRIPT_R66S=\"${SCRIPT_R66S_FILE}\"\n    [[ -n \"${SCRIPT_R68S}\" ]] || SCRIPT_R68S=\"${SCRIPT_R68S_FILE}\"\n    [[ -n \"${SCRIPT_E25}\" ]] || SCRIPT_E25=\"${SCRIPT_E25_FILE}\"\n    [[ -n \"${SCRIPT_PHOTONICAT}\" ]] || SCRIPT_PHOTONICAT=\"${SCRIPT_PHOTONICAT_FILE}\"\n    [[ -n \"${SCRIPT_WATERMELONPI}\" ]] || SCRIPT_WATERMELONPI=\"${SCRIPT_WATERMELONPI_FILE}\"\n    [[ -n \"${SCRIPT_ROCK5B}\" ]] || SCRIPT_ROCK5B=\"${SCRIPT_ROCK5B_FILE}\"\n    [[ -n \"${SCRIPT_ROCK5C}\" ]] || SCRIPT_ROCK5C=\"${SCRIPT_ROCK5C_FILE}\"\n    [[ -n \"${SCRIPT_E52C}\" ]] || SCRIPT_E52C=\"${SCRIPT_E52C_FILE}\"\n    [[ -n \"${SCRIPT_S905}\" ]] || SCRIPT_S905=\"${SCRIPT_S905_FILE}\"\n    [[ -n \"${SCRIPT_S905D}\" ]] || SCRIPT_S905D=\"${SCRIPT_S905D_FILE}\"\n    [[ -n \"${SCRIPT_S905X2}\" ]] || SCRIPT_S905X2=\"${SCRIPT_S905X2_FILE}\"\n    [[ -n \"${SCRIPT_S905X3}\" ]] || SCRIPT_S905X3=\"${SCRIPT_S905X3_FILE}\"\n    [[ -n \"${SCRIPT_S912}\" ]] || SCRIPT_S912=\"${SCRIPT_S912_FILE}\"\n    [[ -n \"${SCRIPT_S922X}\" ]] || SCRIPT_S922X=\"${SCRIPT_S922X_FILE}\"\n    [[ -n \"${SCRIPT_S922X_N2}\" ]] || SCRIPT_S922X_N2=\"${SCRIPT_S922X_N2_FILE}\"\n    [[ -n \"${SCRIPT_QEMU}\" ]] || SCRIPT_QEMU=\"${SCRIPT_QEMU_FILE}\"\n    [[ -n \"${SCRIPT_RK3399}\" ]] || SCRIPT_RK3399=\"${SCRIPT_RK3399_FILE}\"\n    [[ -n \"${SCRIPT_DIY}\" ]] || SCRIPT_DIY=\"${SCRIPT_DIY_FILE}\"\n\n    # Specify make.env variable\n    [[ -n \"${WHOAMI}\" ]] || WHOAMI=\"${WHOAMI_VALUE}\"\n    [[ -n \"${OPENWRT_VER}\" ]] || OPENWRT_VER=\"${OPENWRT_VER_VALUE}\"\n    [[ -n \"${SW_FLOWOFFLOAD}\" ]] || SW_FLOWOFFLOAD=\"${SW_FLOWOFFLOAD_VALUE}\"\n    [[ -n \"${HW_FLOWOFFLOAD}\" ]] || HW_FLOWOFFLOAD=\"${HW_FLOWOFFLOAD_VALUE}\"\n    [[ -n \"${SFE_FLOW}\" ]] || SFE_FLOW=\"${SFE_FLOW_VALUE}\"\n    [[ -n \"${ENABLE_WIFI_K504}\" ]] || ENABLE_WIFI_K504=\"${ENABLE_WIFI_K504_VALUE}\"\n    [[ -n \"${ENABLE_WIFI_K510}\" ]] || ENABLE_WIFI_K510=\"${ENABLE_WIFI_K510_VALUE}\"\n    [[ -n \"${DISTRIB_REVISION}\" ]] || DISTRIB_REVISION=\"${DISTRIB_REVISION_VALUE}\"\n    [[ -n \"${DISTRIB_DESCRIPTION}\" ]] || DISTRIB_DESCRIPTION=\"${DISTRIB_DESCRIPTION_VALUE}\"\n\n    # Confirm package object\n    [[ \"${PACKAGE_SOC}\" != \"all\" ]] && {\n        oldIFS=\"${IFS}\"\n        IFS=\"_\"\n        PACKAGE_OPENWRT=(${PACKAGE_SOC})\n        IFS=\"${oldIFS}\"\n    }\n\n    # Confirm customize rk3399 devices: ${CUSTOMIZE_RK3399}\n    # Format:  [ board1:dtb1/board2:dtb2/board3:dtb3/... ]\n    # Example: [ tvi3315a:rk3399-tvi3315a.dtb/sw799:rk3399-bozz-sw799.dtb ]\n    RK3399_BOARD_LIST=()\n    RK3399_DTB_LIST=()\n    [[ -n \"${CUSTOMIZE_RK3399}\" ]] && {\n        # Add rk3399 to the package list\n        PACKAGE_OPENWRT+=(\"rk3399\")\n\n        # Split the string\n        oldIFS=\"${IFS}\"\n        IFS=\"/\"\n        for rk in ${CUSTOMIZE_RK3399}; do\n            IFS=\":\"\n            tmp_rk_arr=(${rk})\n            RK3399_BOARD_LIST+=(${tmp_rk_arr[0]})\n            RK3399_DTB_LIST+=(${tmp_rk_arr[1]})\n        done\n        IFS=\"${oldIFS}\"\n    }\n\n    # Remove duplicate package drivers\n    PACKAGE_OPENWRT=($(echo \"${PACKAGE_OPENWRT[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n\n    # Reset required kernel tags\n    KERNEL_TAGS_TMP=()\n    for kt in \"${PACKAGE_OPENWRT[@]}\"; do\n        if [[ \" ${PACKAGE_OPENWRT_RK3588[@]} \" =~ \" ${kt} \" ]]; then\n            KERNEL_TAGS_TMP+=(\"rk3588\")\n        elif [[ \" ${PACKAGE_OPENWRT_RK35XX[@]} \" =~ \" ${kt} \" ]]; then\n            KERNEL_TAGS_TMP+=(\"rk35xx\")\n        else\n            KERNEL_TAGS_TMP+=(\"stable\")\n        fi\n    done\n    # Remove duplicate kernel tags\n    KERNEL_TAGS=($(echo \"${KERNEL_TAGS_TMP[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n\n    echo -e \"${INFO} Package directory: [ /opt/${SELECT_PACKITPATH} ]\"\n    echo -e \"${INFO} Package SoC: [ $(echo ${PACKAGE_OPENWRT[@]} | xargs) ]\"\n    echo -e \"${INFO} Kernel tags: [ $(echo ${KERNEL_TAGS[@]} | xargs) ]\"\n\n    # Reset STABLE_KERNEL options\n    [[ -n \"${KERNEL_VERSION_NAME}\" && \" ${KERNEL_TAGS[@]} \" =~ \" stable \" ]] && {\n        oldIFS=\"${IFS}\"\n        IFS=\"_\"\n        STABLE_KERNEL=(${KERNEL_VERSION_NAME})\n        IFS=\"${oldIFS}\"\n        echo -e \"${INFO} Stable kernel: [ $(echo ${STABLE_KERNEL[@]} | xargs) ]\"\n    }\n\n    # Convert kernel library address to api format\n    echo -e \"${INFO} Kernel download repository: [ ${KERNEL_REPO_URL} ]\"\n    [[ \"${KERNEL_REPO_URL}\" =~ ^https: ]] && KERNEL_REPO_URL=\"$(echo ${KERNEL_REPO_URL} | awk -F'/' '{print $4\"/\"$5}')\"\n    kernel_api=\"https://github.com/${KERNEL_REPO_URL}\"\n    echo -e \"${INFO} Kernel Query API: [ ${kernel_api} ]\"\n}\n\ninit_packit_repo() {\n    cd /opt\n\n    # Clone the repository into the packaging directory. If it fails, wait 1 minute and try again, try 10 times.\n    [[ -d \"${SELECT_PACKITPATH}\" ]] || {\n        echo -e \"${STEPS} Start cloning repository [ ${SCRIPT_REPO_URL} ], branch [ ${SCRIPT_REPO_BRANCH} ] into [ ${SELECT_PACKITPATH} ]\"\n        for i in {1..10}; do\n            git clone -q --single-branch --depth=1 --branch=${SCRIPT_REPO_BRANCH} ${SCRIPT_REPO_URL} ${SELECT_PACKITPATH}\n            [[ \"${?}\" -eq \"0\" ]] && break || sleep 60\n        done\n        [[ -d \"${SELECT_PACKITPATH}\" ]] || error_msg \"Failed to clone the repository.\"\n    }\n\n    # Check the *rootfs.tar.gz package\n    [[ -z \"${OPENWRT_ARMVIRT}\" ]] && error_msg \"The [ OPENWRT_ARMVIRT ] variable must be specified.\"\n\n    # Load *-armvirt-64-default-rootfs.tar.gz\n    rm -f ${SELECT_PACKITPATH}/${PACKAGE_FILE}\n    if [[ \"${OPENWRT_ARMVIRT}\" == http* ]]; then\n        echo -e \"${STEPS} Download the [ ${OPENWRT_ARMVIRT} ] file into [ ${SELECT_PACKITPATH} ]\"\n\n        # Download the *-armvirt-64-default-rootfs.tar.gz file. If the download fails, try again 10 times.\n        for i in {1..10}; do\n            curl -fsSL \"${OPENWRT_ARMVIRT}\" -o \"${SELECT_PACKITPATH}/${PACKAGE_FILE}\"\n            [[ \"${?}\" -eq \"0\" ]] && break || sleep 60\n        done\n        [[ \"${?}\" -eq \"0\" ]] || error_msg \"Openwrt rootfs file download failed.\"\n    else\n        echo -e \"${STEPS} copy [ ${GITHUB_WORKSPACE}/${OPENWRT_ARMVIRT} ] file into [ ${SELECT_PACKITPATH} ]\"\n        cp -f ${GITHUB_WORKSPACE}/${OPENWRT_ARMVIRT} ${SELECT_PACKITPATH}/${PACKAGE_FILE}\n        [[ \"${?}\" -eq \"0\" ]] || error_msg \"Openwrt rootfs file copy failed.\"\n    fi\n\n    # Normal ${PACKAGE_FILE} file should not be less than 10MB\n    armvirt_rootfs_size=\"$(ls -l ${SELECT_PACKITPATH}/${PACKAGE_FILE} 2>/dev/null | awk '{print $5}')\"\n    echo -e \"${INFO} armvirt_rootfs_size: [ ${armvirt_rootfs_size} ]\"\n    if [[ \"${armvirt_rootfs_size}\" -ge \"10000000\" ]]; then\n        echo -e \"${INFO} [ ${SELECT_PACKITPATH}/${PACKAGE_FILE} ] loaded successfully.\"\n    else\n        error_msg \"The [ ${SELECT_PACKITPATH}/${PACKAGE_FILE} ] failed to load.\"\n    fi\n\n    # Add custom script\n    [[ -n \"${SCRIPT_DIY_PATH}\" ]] && {\n        rm -f ${SELECT_PACKITPATH}/${SCRIPT_DIY}\n        if [[ \"${SCRIPT_DIY_PATH}\" == http* ]]; then\n            echo -e \"${INFO} Download the custom script file: [ ${SCRIPT_DIY_PATH} ]\"\n\n            # Download the custom script file. If the download fails, try again 10 times.\n            for i in {1..10}; do\n                curl -fsSL \"${SCRIPT_DIY_PATH}\" -o \"${SELECT_PACKITPATH}/${SCRIPT_DIY}\"\n                [[ \"${?}\" -eq \"0\" ]] && break || sleep 60\n            done\n            [[ \"${?}\" -eq \"0\" ]] || error_msg \"Custom script file download failed.\"\n        else\n            echo -e \"${INFO} Copy custom script file: [ ${SCRIPT_DIY_PATH} ]\"\n            cp -f ${GITHUB_WORKSPACE}/${SCRIPT_DIY_PATH} ${SELECT_PACKITPATH}/${SCRIPT_DIY}\n            [[ \"${?}\" -eq \"0\" ]] || error_msg \"Custom script file copy failed.\"\n        fi\n        chmod +x ${SELECT_PACKITPATH}/${SCRIPT_DIY}\n        echo -e \"List of [ ${SELECT_PACKITPATH} ] directory files:\\n $(ls -l ${SELECT_PACKITPATH})\"\n    }\n}\n\nquery_kernel() {\n    echo -e \"${STEPS} Start querying the latest kernel...\"\n\n    # Check the version on the kernel library\n    x=\"1\"\n    for vb in \"${KERNEL_TAGS[@]}\"; do\n        {\n            # Select the corresponding kernel directory and list\n            if [[ \"${vb}\" == \"rk3588\" ]]; then\n                down_kernel_list=(${RK3588_KERNEL[@]})\n            elif [[ \"${vb}\" == \"rk35xx\" ]]; then\n                down_kernel_list=(${RK35XX_KERNEL[@]})\n            else\n                down_kernel_list=(${STABLE_KERNEL[@]})\n            fi\n\n            # Query the name of the latest kernel version\n            TMP_ARR_KERNELS=()\n            i=1\n            for kernel_var in \"${down_kernel_list[@]}\"; do\n                echo -e \"${INFO} (${i}) Auto query the latest kernel version of the same series for [ ${vb} - ${kernel_var} ]\"\n\n                # Identify the kernel <VERSION> and <PATCHLEVEL>, such as [ 6.1 ]\n                kernel_verpatch=\"$(echo ${kernel_var} | awk -F '.' '{print $1\".\"$2}')\"\n\n                # Query the latest kernel version\n                latest_version=\"$(\n                    curl -fsSL \\\n                        ${kernel_api}/releases/expanded_assets/kernel_${vb} |\n                        grep -oE \"${kernel_verpatch}.[0-9]+.*.tar.gz\" | sed 's/.tar.gz//' |\n                        sort -urV | head -n 1\n                )\"\n\n                if [[ \"$?\" -eq \"0\" && -n \"${latest_version}\" ]]; then\n                    TMP_ARR_KERNELS[${i}]=\"${latest_version}\"\n                else\n                    TMP_ARR_KERNELS[${i}]=\"${kernel_var}\"\n                fi\n\n                echo -e \"${INFO} (${i}) [ ${vb} - ${TMP_ARR_KERNELS[$i]} ] is latest kernel.\"\n\n                let i++\n            done\n\n            # Reset the kernel array to the latest kernel version\n            if [[ \"${vb}\" == \"rk3588\" ]]; then\n                RK3588_KERNEL=(${TMP_ARR_KERNELS[@]})\n                echo -e \"${INFO} The latest version of the rk3588 kernel: [ ${RK3588_KERNEL[@]} ]\"\n            elif [[ \"${vb}\" == \"rk35xx\" ]]; then\n                RK35XX_KERNEL=(${TMP_ARR_KERNELS[@]})\n                echo -e \"${INFO} The latest version of the rk35xx kernel: [ ${RK35XX_KERNEL[@]} ]\"\n            else\n                STABLE_KERNEL=(${TMP_ARR_KERNELS[@]})\n                echo -e \"${INFO} The latest version of the stable kernel: [ ${STABLE_KERNEL[@]} ]\"\n            fi\n\n            let x++\n        }\n    done\n}\n\ncheck_kernel() {\n    [[ -n \"${1}\" ]] && check_path=\"${1}\" || error_msg \"Invalid kernel path to check.\"\n    check_files=($(cat \"${check_path}/sha256sums\" | awk '{print $2}'))\n    m=\"1\"\n    for cf in \"${check_files[@]}\"; do\n        {\n            # Check if file exists\n            [[ -s \"${check_path}/${cf}\" ]] || error_msg \"The [ ${cf} ] file is missing.\"\n            # Check if the file sha256sum is correct\n            tmp_sha256sum=\"$(sha256sum \"${check_path}/${cf}\" | awk '{print $1}')\"\n            tmp_checkcode=\"$(cat ${check_path}/sha256sums | grep ${cf} | awk '{print $1}')\"\n            [[ \"${tmp_sha256sum}\" == \"${tmp_checkcode}\" ]] || error_msg \"[ ${cf} ]: sha256sum verification failed.\"\n            let m++\n        }\n    done\n    echo -e \"${INFO} All [ ${#check_files[@]} ] kernel files are sha256sum checked to be complete.\\n\"\n}\n\ndownload_kernel() {\n    echo -e \"${STEPS} Start downloading the kernel...\"\n\n    cd /opt\n\n    x=\"1\"\n    for vb in \"${KERNEL_TAGS[@]}\"; do\n        {\n            # Set the kernel download list\n            if [[ \"${vb}\" == \"rk3588\" ]]; then\n                down_kernel_list=(${RK3588_KERNEL[@]})\n            elif [[ \"${vb}\" == \"rk35xx\" ]]; then\n                down_kernel_list=(${RK35XX_KERNEL[@]})\n            else\n                down_kernel_list=(${STABLE_KERNEL[@]})\n            fi\n\n            # Kernel storage directory\n            kernel_path=\"kernel/${vb}\"\n            [[ -d \"${kernel_path}\" ]] || mkdir -p ${kernel_path}\n\n            # Download the kernel to the storage directory\n            i=\"1\"\n            for kernel_var in \"${down_kernel_list[@]}\"; do\n                if [[ ! -d \"${kernel_path}/${kernel_var}\" ]]; then\n                    kernel_down_from=\"https://github.com/${KERNEL_REPO_URL}/releases/download/kernel_${vb}/${kernel_var}.tar.gz\"\n                    echo -e \"${INFO} (${x}.${i}) [ ${vb} - ${kernel_var} ] Kernel download from [ ${kernel_down_from} ]\"\n\n                    # Download the kernel file. If the download fails, try again 10 times.\n                    for t in {1..10}; do\n                        curl -fsSL \"${kernel_down_from}\" -o \"${kernel_path}/${kernel_var}.tar.gz\"\n                        [[ \"${?}\" -eq \"0\" ]] && break || sleep 60\n                    done\n                    [[ \"${?}\" -eq \"0\" ]] || error_msg \"Failed to download the kernel files from the server.\"\n\n                    # Decompress the kernel file\n                    tar -mxf \"${kernel_path}/${kernel_var}.tar.gz\" -C \"${kernel_path}\"\n                    [[ \"${?}\" -eq \"0\" ]] || error_msg \"[ ${kernel_var} ] kernel decompression failed.\"\n                else\n                    echo -e \"${INFO} (${x}.${i}) [ ${vb} - ${kernel_var} ] Kernel is in the local directory.\"\n                fi\n\n                # If the kernel contains the sha256sums file, check the files integrity\n                [[ -f \"${kernel_path}/${kernel_var}/sha256sums\" ]] && check_kernel \"${kernel_path}/${kernel_var}\"\n\n                let i++\n            done\n\n            # Delete downloaded kernel temporary files\n            rm -f ${kernel_path}/*.tar.gz\n            sync\n\n            let x++\n        }\n    done\n}\n\nmake_openwrt() {\n    echo -e \"${STEPS} Start packaging OpenWrt...\"\n\n    i=\"1\"\n    for PACKAGE_VAR in \"${PACKAGE_OPENWRT[@]}\"; do\n        {\n            # Distinguish between different OpenWrt and use different kernel\n            if [[ \" ${PACKAGE_OPENWRT_RK3588[@]} \" =~ \" ${PACKAGE_VAR} \" ]]; then\n                build_kernel=(${RK3588_KERNEL[@]})\n                vb=\"rk3588\"\n            elif [[ \" ${PACKAGE_OPENWRT_RK35XX[@]} \" =~ \" ${PACKAGE_VAR} \" ]]; then\n                build_kernel=(${RK35XX_KERNEL[@]})\n                vb=\"rk35xx\"\n            else\n                build_kernel=(${STABLE_KERNEL[@]})\n                vb=\"stable\"\n            fi\n\n            k=\"1\"\n            for kernel_var in \"${build_kernel[@]}\"; do\n                {\n                    # Rockchip rk3568 series only support 6.x.y and above kernel\n                    [[ -n \"$(echo \"${PACKAGE_OPENWRT_6XY[@]}\" | grep -w \"${PACKAGE_VAR}\")\" && \"${kernel_var:0:2}\" != \"6.\" ]] && {\n                        echo -e \"${STEPS} (${i}.${k}) ${NOTE} Based on <PACKAGE_OPENWRT_6XY>, skip the [ ${PACKAGE_VAR} - ${vb}/${kernel_var} ] build.\"\n                        let k++\n                        continue\n                    }\n\n                    # Check the available size of server space\n                    now_remaining_space=\"$(df -Tk /opt/${SELECT_PACKITPATH} | tail -n1 | awk '{print $5}' | echo $(($(xargs) / 1024 / 1024)))\"\n                    [[ \"${now_remaining_space}\" -le \"3\" ]] && {\n                        echo -e \"${WARNING} If the remaining space is less than 3G, exit this packaging. \\n\"\n                        break\n                    }\n\n                    cd /opt/kernel\n\n                    # Copy the kernel to the packaging directory\n                    rm -f *.tar.gz\n                    cp -f ${vb}/${kernel_var}/* .\n                    #\n                    boot_kernel_file=\"$(ls boot-${kernel_var}* 2>/dev/null | head -n 1)\"\n                    KERNEL_VERSION=\"${boot_kernel_file:5:-7}\"\n                    [[ \"${vb}\" == \"rk3588\" ]] && RK3588_KERNEL_VERSION=\"${KERNEL_VERSION}\" || RK3588_KERNEL_VERSION=\"\"\n                    [[ \"${vb}\" == \"rk35xx\" ]] && RK35XX_KERNEL_VERSION=\"${KERNEL_VERSION}\" || RK35XX_KERNEL_VERSION=\"\"\n                    echo -e \"${STEPS} (${i}.${k}) Start packaging OpenWrt: [ ${PACKAGE_VAR} ], Kernel directory: [ ${vb} ], Kernel version: [ ${KERNEL_VERSION} ]\"\n                    echo -e \"${INFO} Remaining space is ${now_remaining_space}G. \\n\"\n\n                    cd /opt/${SELECT_PACKITPATH}\n\n                    # If flowoffload is turned on, then sfe is forced to be closed by default\n                    [[ \"${SW_FLOWOFFLOAD}\" -eq \"1\" ]] && SFE_FLOW=\"0\"\n\n                    if [[ -n \"${OPENWRT_VER}\" && \"${OPENWRT_VER}\" == \"auto\" ]]; then\n                        OPENWRT_VER=\"$(cat make.env | grep \"OPENWRT_VER=\\\"\" | cut -d '\"' -f2)\"\n                        echo -e \"${INFO} (${i}.${k}) OPENWRT_VER: [ ${OPENWRT_VER} ]\"\n                    fi\n\n                    # Generate a custom make.env file\n                    rm -f make.env 2>/dev/null\n                    cat >make.env <<EOF\nWHOAMI=\"${WHOAMI}\"\nOPENWRT_VER=\"${OPENWRT_VER}\"\nRK3588_KERNEL_VERSION=\"${RK3588_KERNEL_VERSION}\"\nRK35XX_KERNEL_VERSION=\"${RK35XX_KERNEL_VERSION}\"\nKERNEL_VERSION=\"${KERNEL_VERSION}\"\nKERNEL_PKG_HOME=\"/opt/kernel\"\nSW_FLOWOFFLOAD=\"${SW_FLOWOFFLOAD}\"\nHW_FLOWOFFLOAD=\"${HW_FLOWOFFLOAD}\"\nSFE_FLOW=\"${SFE_FLOW}\"\nENABLE_WIFI_K504=\"${ENABLE_WIFI_K504}\"\nENABLE_WIFI_K510=\"${ENABLE_WIFI_K510}\"\nDISTRIB_REVISION=\"${DISTRIB_REVISION}\"\nDISTRIB_DESCRIPTION=\"${DISTRIB_DESCRIPTION}\"\nEOF\n\n                    #echo -e \"${INFO} make.env file info:\"\n                    #cat make.env\n\n                    # Select the corresponding packaging script\n                    case \"${PACKAGE_VAR}\" in\n                        vplus)            [[ -f \"${SCRIPT_VPLUS}\" ]]           && sudo ./${SCRIPT_VPLUS} ;;\n                        beikeyun)         [[ -f \"${SCRIPT_BEIKEYUN}\" ]]        && sudo ./${SCRIPT_BEIKEYUN} ;;\n                        l1pro)            [[ -f \"${SCRIPT_L1PRO}\" ]]           && sudo ./${SCRIPT_L1PRO} ;;\n                        zcube1-max)       [[ -f \"${SCRIPT_ZCUBE1MAX}\" ]]       && sudo ./${SCRIPT_ZCUBE1MAX} ;;\n                        cm3)              [[ -f \"${SCRIPT_CM3}\" ]]             && sudo ./${SCRIPT_CM3} ;;\n                        ak88)             [[ -f \"${SCRIPT_H88K}\" ]]            && sudo ./${SCRIPT_H88K} ;;\n                        ht2)              [[ -f \"${SCRIPT_HT2}\" ]]             && sudo ./${SCRIPT_HT2} ;;\n                        e20c)             [[ -f \"${SCRIPT_E20C}\" ]]            && sudo ./${SCRIPT_E20C} ;;\n                        h28k)             [[ -f \"${SCRIPT_H28K}\" ]]            && sudo ./${SCRIPT_H28K} ;;\n                        h88k)             [[ -f \"${SCRIPT_H88K}\" ]]            && sudo ./${SCRIPT_H88K} \"25\" ;;\n                        h88k-v3)          [[ -f \"${SCRIPT_H88KV3}\" ]]          && sudo ./${SCRIPT_H88KV3} ;;\n                        h66k)             [[ -f \"${SCRIPT_H66K}\" ]]            && sudo ./${SCRIPT_H66K} ;;\n                        h68k)             [[ -f \"${SCRIPT_H68K}\" ]]            && sudo ./${SCRIPT_H68K} ;;\n                        h69k)             [[ -f \"${SCRIPT_H69K}\" ]]            && sudo ./${SCRIPT_H69K} ;;\n                        h69k-max)         [[ -f \"${SCRIPT_H69K}\" ]]            && sudo ./${SCRIPT_H69K} \"max\" ;;\n                        jp-tvbox)         [[ -f \"${SCRIPT_JPTVBOX}\" ]]         && sudo ./${SCRIPT_JPTVBOX} ;;\n                        r66s)             [[ -f \"${SCRIPT_R66S}\" ]]            && sudo ./${SCRIPT_R66S} ;;\n                        r68s)             [[ -f \"${SCRIPT_R68S}\" ]]            && sudo ./${SCRIPT_R68S} ;;\n                        rock5b)           [[ -f \"${SCRIPT_ROCK5B}\" ]]          && sudo ./${SCRIPT_ROCK5B} ;;\n                        rock5c)           [[ -f \"${SCRIPT_ROCK5C}\" ]]          && sudo ./${SCRIPT_ROCK5C} ;;\n                        e52c)             [[ -f \"${SCRIPT_E52C}\" ]]            && sudo ./${SCRIPT_E52C} ;;\n                        e25)              [[ -f \"${SCRIPT_E25}\" ]]             && sudo ./${SCRIPT_E25} ;;\n                        photonicat)       [[ -f \"${SCRIPT_PHOTONICAT}\" ]]      && sudo ./${SCRIPT_PHOTONICAT} ;;\n                        watermelon-pi)    [[ -f \"${SCRIPT_WATERMELONPI}\" ]]    && sudo ./${SCRIPT_WATERMELONPI} ;;\n                        s905)             [[ -f \"${SCRIPT_S905}\" ]]            && sudo ./${SCRIPT_S905} ;;\n                        s905d)            [[ -f \"${SCRIPT_S905D}\" ]]           && sudo ./${SCRIPT_S905D} ;;\n                        s905x2)           [[ -f \"${SCRIPT_S905X2}\" ]]          && sudo ./${SCRIPT_S905X2} ;;\n                        s905x3)           [[ -f \"${SCRIPT_S905X3}\" ]]          && sudo ./${SCRIPT_S905X3} ;;\n                        s912)             [[ -f \"${SCRIPT_S912}\" ]]            && sudo ./${SCRIPT_S912} ;;\n                        s922x)            [[ -f \"${SCRIPT_S922X}\" ]]           && sudo ./${SCRIPT_S922X} ;;\n                        s922x-n2)         [[ -f \"${SCRIPT_S922X_N2}\" ]]        && sudo ./${SCRIPT_S922X_N2} ;;\n                        qemu)             [[ -f \"${SCRIPT_QEMU}\" ]]            && sudo ./${SCRIPT_QEMU} ;;\n                        diy)              [[ -f \"${SCRIPT_DIY}\" ]]             && sudo ./${SCRIPT_DIY} ;;\n                        rk3399)           [[ -f \"${SCRIPT_RK3399}\" && ${#RK3399_BOARD_LIST[@]} -gt 0 ]] && {\n                                          for rbl in ${!RK3399_BOARD_LIST[@]}; do\n                                              sudo ./${SCRIPT_RK3399} ${RK3399_BOARD_LIST[rbl]} ${RK3399_DTB_LIST[rbl]}\n                                          done\n                                          } ;;\n                        *)                echo -e \"${WARNING} Have no this SoC. Skipped.\" && continue ;;\n                    esac\n\n                    # Generate compressed file\n                    img_num=\"$(ls /opt/${SELECT_PACKITPATH}/${SELECT_OUTPUTPATH}/*.img 2>/dev/null | wc -l)\"\n                    [[ \"${img_num}\" -ne \"0\" ]] && {\n                        echo -e \"${STEPS} (${i}.${k}) Start making compressed files in the [ ${SELECT_OUTPUTPATH} ] directory.\"\n                        cd /opt/${SELECT_PACKITPATH}/${SELECT_OUTPUTPATH}\n                        case \"${GZIP_IMGS}\" in\n                            7z | .7z)      ls *.img | head -n 1 | xargs -I % sh -c 'sudo 7z a -t7z -r %.7z %; rm -f %' ;;\n                            zip | .zip)    ls *.img | head -n 1 | xargs -I % sh -c 'sudo zip %.zip %; rm -f %' ;;\n                            zst | .zst)    sudo zstd --rm *.img ;;\n                            xz | .xz)      sudo xz -z *.img ;;\n                            gz | .gz | *)  sudo pigz -f *.img ;;\n                        esac\n                    }\n\n                    echo -e \"${SUCCESS} (${i}.${k}) OpenWrt packaging succeeded: [ ${PACKAGE_VAR} - ${vb} - ${kernel_var} ] \\n\"\n                    sync\n\n                    let k++\n                }\n            done\n\n            let i++\n        }\n    done\n\n    echo -e \"${SUCCESS} All packaged completed. \\n\"\n}\n\nout_github_env() {\n    echo -e \"${STEPS} Output github.com environment variables...\"\n    if [[ -d \"/opt/${SELECT_PACKITPATH}/${SELECT_OUTPUTPATH}\" ]]; then\n\n        cd /opt/${SELECT_PACKITPATH}/${SELECT_OUTPUTPATH}\n\n        if [[ \"${SAVE_OPENWRT_ARMVIRT}\" == \"true\" ]]; then\n            echo -e \"${INFO} copy [ ${PACKAGE_FILE} ] into [ ${SELECT_OUTPUTPATH} ]\"\n            sudo cp -f ../${PACKAGE_FILE} .\n        fi\n\n        # Generate a sha256sum verification file for each OpenWrt file\n        for file in *; do [[ -f \"${file}\" ]] && sudo sha256sum \"${file}\" | sudo tee \"${file}.sha\" >/dev/null; done\n        sudo rm -f *.sha.sha 2>/dev/null\n\n        echo \"PACKAGED_OUTPUTPATH=${PWD}\" >>${GITHUB_ENV}\n        echo \"PACKAGED_OUTPUTDATE=$(date +\"%m.%d.%H%M\")\" >>${GITHUB_ENV}\n        echo \"PACKAGED_STATUS=success\" >>${GITHUB_ENV}\n        echo -e \"PACKAGED_OUTPUTPATH: ${PWD}\"\n        echo -e \"PACKAGED_OUTPUTDATE: $(date +\"%m.%d.%H%M\")\"\n        echo -e \"PACKAGED_STATUS: success\"\n        echo -e \"${INFO} PACKAGED_OUTPUTPATH files list:\"\n        echo -e \"$(ls /opt/${SELECT_PACKITPATH}/${SELECT_OUTPUTPATH} 2>/dev/null) \\n\"\n    else\n        echo -e \"${ERROR} Packaging failed. \\n\"\n        echo \"PACKAGED_STATUS=failure\" >>${GITHUB_ENV}\n    fi\n}\n# Show welcome message\necho -e \"${STEPS} Welcome to use the OpenWrt packaging tool! \\n\"\necho -e \"${INFO} Server CPU configuration information: \\n$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \\n\"\n\n# Start initializing variables\ninit_var\ninit_packit_repo\n\n# Show server start information\necho -e \"${INFO} Server space usage before starting to compile:\\n$(df -hT /opt/${SELECT_PACKITPATH}) \\n\"\n\n# Packit OpenWrt\n[[ \"${KERNEL_AUTO_LATEST}\" == \"true\" ]] && query_kernel\ndownload_kernel\nmake_openwrt\nout_github_env\n\n# Show server end information\necho -e \"${INFO} Server space usage after compilation:\\n$(df -hT /opt/${SELECT_PACKITPATH}) \\n\"\necho -e \"${SUCCESS} The packaging process has been completed. \\n\"\n"
        },
        {
          "name": "public_funcs",
          "type": "blob",
          "size": 67.32421875,
          "content": "#!/bin/bash\n\n# the default zstd compress level is 3\nexport ZSTD_LEVEL=6\n\n# global vars\nNETDATA_PATCH_HOME=\"${PWD}/files/netdata_patches\"\nCGROUP2_PATCH_HOME=\"${PWD}/files/cgroup2_patches\"\n\nget_random_mac ()\n{\n    # MAC地址第一段可在 02 06 0A 0E 中任选一个\n    if [ \"$SHELL\" == \"/bin/bash\" ];then\n        #MACADDR=$(printf \"%02X:%02X:%02X:%02X:%02X:%02X\\n\" $[RANDOM%255] $[RANDOM%255] $[RANDOM%255] $[RANDOM%255] $[RANDOM%255] $[RANDOM%255])\n        MACADDR=$(printf \"06:%02X:%02X:%02X:%02X:%02X\\n\" $[RANDOM%255] $[RANDOM%255] $[RANDOM%255] $[RANDOM%255] $[RANDOM%255])\n    else\n        uuid=$(cat /proc/sys/kernel/random/uuid)\n        mac1=\"0E\"\n        #mac1=${uuid:24:2}\n        mac2=${uuid:26:2}\n        mac3=${uuid:28:2}\n        mac4=${uuid:30:2}\n        mac5=${uuid:32:2}\n        mac6=${uuid:34:2}\n        MACADDR=$(echo \"$mac1:$mac2:$mac3:$mac4:$mac5:$mac6\" | tr '[a-z]' '[A-Z]')\n    fi\n}\n\nfunction get_openwrt_rootfs_archive() {\n\tlocal home=$1\n\tlocal src_homes=\"${home}/src1 ${home}/src2 ${home}\"\n\tfor dir in $src_homes;do\n\t    # OP_ROOT_TGZ可从环境变量引入\n            if [ -n \"$OP_ROOT_TGZ\" ];then\n\t    \tif [ -f \"${dir}/${OP_ROOT_TGZ}\" ];then\n\t\t    echo \"${dir}/${OP_ROOT_TGZ}\"\n\t\t    return\n\t\tfi\n\t    else\n\t\tif [ -f \"${dir}/openwrt-armvirt-64-default-rootfs.tar.gz\" ];then\n\t\t    echo \"${dir}/openwrt-armvirt-64-default-rootfs.tar.gz\"\n\t\t    return\n\t   \telif [ -f \"${dir}/openwrt-armvirt-64-generic-rootfs.tar.gz\" ];then\n\t\t    echo \"${dir}/openwrt-armvirt-64-generic-rootfs.tar.gz\"\n\t\t    return\n\t\tfi\n\t    fi\n    \tdone\n\techo \"Openwrt_rootfs_archive_not_found!\"\n}\n\nfunction check_file() {\n    if [ ! -f \"$1\" ];then\n        echo \"文件: [$1] 不存在!\"\n        if [ \"$2\" == \"\" ];then\n            exit 1\n        else\n            sleep $2\n        fi\n    fi\n}\n\nfunction check_dir() {\n    if [ ! -d \"$1\" ];then\n        echo \"目录: [$1] 不存在!\"\n        if [ \"$2\" == \"\" ];then\n            exit 1\n        else\n            sleep $2\n        fi\n    fi\n}\n\nfunction check_block_dev() {\n    if [ ! -b \"$1\" ];then\n        echo \"块设备: [$1] 不存在!\"\n        if [ \"$2\" == \"\" ];then\n            exit 1\n        else\n            sleep $2\n        fi\n    fi\n}\n\n# 检查指定的 dtb.tar.gz 中是否存在指定的 dtb\nfunction check_fdtfile() {\n    local dtbs_tgz=$1\n    local fdtfile=$2\n    tar tvf \"$dtbs_tgz\" \"$fdtfile\" 2>/dev/null\n    if [ $? -ne 0 ];then\n            tar tvf \"$dtbs_tgz\" \"./$fdtfile\" 2>/dev/null\n            if [ $? -ne 0 ];then\n\t        echo \"not exists\"\n\t    else\n\t        echo \"exists\"\n\t    fi\n    else\n\t    echo \"exists\"\n    fi\n}\n\n# 此函数原有的用途是检查内核版本是否 >= 5.10, 现改为检查内核的 text_offset 是否为 0x01080000\n# text offset: \n#   0x01080000  适用晶晨盒子厂商 bootloader 以及 主线 bootloader, 已过时\n#   0x00000000  适用主线 bootloader, 但不适用晶晨厂商 bootloader\nfunction get_k510_from_vmlinuz() {\n    local vmlinuz=$1\n    local temp_script=$(mktemp) \n    cat > $temp_script <<EOF\nuse strict;\nmy \\$filename = \\$ARGV[0];\nopen my \\$fh, '<', \\$filename or die;\nbinmode \\$fh;\nseek \\$fh, 0x8, 0;\nmy \\$buf = \"\";\nread \\$fh, \\$buf, 0x4;\nclose(\\$fh);\nmy \\$str = unpack 'H*', \\$buf; \nprint \"\\$str\\n\";\nEOF\n    local result=1\n    local text_offset=$(perl \"$temp_script\" \"$vmlinuz\")\n    [ \"$text_offset\" == \"00000801\" ] && result=0\n    rm -f $temp_script\n    echo \"$result\"\n}\n\nfunction get_k510_from_boot_tgz() {\n    local boot_tgz=$1\n    local vmlinuz=$2\n    local temp_dir=$(mktemp -d)\n    ( \n      cd $temp_dir\n      tar xzf \"$boot_tgz\" \"$vmlinuz\"\n    )\n    local result=$(get_k510_from_vmlinuz \"${temp_dir}/${vmlinuz}\")\n    rm -rf $temp_dir\n    echo \"$result\"\n}\n\nfunction check_depends() {\n    if [ $(id -u) -ne 0 ];then\n        echo \"这个脚本需要用root用户来执行，你好象不是root吧？\"\n        exit 1\n    fi\n\n    if mkfs.btrfs -V >/dev/null;then\n        echo \"check mkfs.btrfs ok\"\n    else\n        echo \"mkfs.btrfs 程序不存在，请安装 btrfs-progs\"\n        exit 1\n    fi\n\n    if mkfs.vfat --help 1>/dev/nul 2>&1;then\n        echo \"check mkfs.vfat ok\"\n    else\n        echo \"mkfs.vfat 程序不存在，请安装 dosfstools\"\n        exit 1\n    fi\n\n    if gawk --version >/dev/null;then\n        echo \"check gawk ok\"\n    else\n        echo \"gawk 程序不存在，请安装 gawk\"\n        exit 1\n    fi\n\n    if uuidgen>/dev/null;then\n        echo \"check uuidgen ok\"\n    else\n        echo \"uuidgen 程序不存在，请安装 uuid-runtime\"\n        exit 1\n    fi\n\n    if losetup -V >/dev/null;then\n        echo \"check losetup ok\"\n    else\n        echo \"losetup 程序不存在，请安装 mount\"\n        exit 1\n    fi\n\n    # lsblk --version: from util-linux 2.39-dirty\n    lsblk_version=$(lsblk --version|awk '{print $NF}' 2>/dev/null)\n    if [ \"$lsblk_version\" != \"\" ];then\n        m_v=$(echo ${lsblk_version} | cut -d '.' -f1)\n        s_v=$(echo ${lsblk_version} | cut -d '.' -f2 | tr -d '[a-zA-Z]|-')\n        if [ $m_v -gt 2 ] || [ $m_v -eq 2 ] && [ $s_v -ge 33 ];then\n            echo \"check lsblk ok\"\n        else\n            echo \"lsblk 需要版本 2.33 或更高的版本, 当前的版本是 $lsblk_version !\"\n            exit 1\n        fi        \n    else\n        echo \"lsblk 程序不存在，请安装 util-linux\"\n        exit 1\n    fi\n\n    if fdisk --version >/dev/null 2>&1;then\n        echo \"check fdisk ok\"\n    else\n        echo \"fdisk 程序不存在，请安装 fdisk\"\n        exit 1\n    fi\n\n    if parted --version >/dev/null 2>&1;then\n        echo \"check parted ok\"\n    else\n        echo \"parted 程序不存在，请安装 parted\"\n        exit 1\n    fi\n\n    # 创建 kvm 虚拟机镜像需要 qemu-img\n    if [ \"$EFI\" == \"1\" ];then\n        if qemu-img --version >/dev/null 2>&1;then\n            echo \"check qemu-img ok\"\n        else\n            echo \"qemu-img 程序不存在，请安装 qemu-utils\"\n            exit 1\n        fi\n    fi\n    echo\n}\n\nfunction wait_dev() {\n    while [ ! -b $1 ];do\n        echo \"wait for $1 ...\"\n        sleep 1\n    done\n    sleep 1\n}\n\nfunction init_work_env() {\n    export WORK_DIR=\"${PWD}/tmp\"\n    [ -d ${WORK_DIR} ] || mkdir -p ${WORK_DIR}\n    echo \"The work directory is : [$WORK_DIR]\"\n\n    export TEMP_DIR=$(mktemp -p $WORK_DIR)\n    rm -rf $TEMP_DIR\n    mkdir -p $TEMP_DIR\n    echo \"The temporary directory is : [$TEMP_DIR]\"\n\n    if [ \"$EFI\" == \"1\" ];then\n        export TGT_BOOT=${TEMP_DIR}/tgt_efi\n        echo \"The target efi directory is : [$TGT_BOOT]\"\n    else\n        export TGT_BOOT=${TEMP_DIR}/tgt_boot\n        echo \"The target boot directory is : [$TGT_BOOT]\"\n    fi\n    export TGT_ROOT=${TEMP_DIR}/tgt_root\n    mkdir -p $TGT_BOOT $TGT_ROOT\n    echo \"The target rootfs directory is : [$TGT_ROOT]\"\n\n    export OUTPUT_DIR=\"${PWD}/output/\"\n    [ -d ${OUTPUT_DIR} ] || mkdir -p ${OUTPUT_DIR}\n    echo \"The output directory is : [$OUTPUT_DIR]\"\n\n    losetup -D\n    echo \n}\n\nfunction detach_loopdev() {\n    cd ${TEMP_DIR}\n    umount -f * 2>/dev/null\n    losetup -D\n    cd ${WORK_DIR}\n    rm -rf ${TEMP_DIR}\n}\n\nfunction create_image() {\n    local img_name=$1\n    local size_mb=$2\n    if [ \"$img_name\" == \"\" ];then\n        echo \"镜像名称为空，请指定一个具体的镜像名称！\"\n        exit 1\n    fi\n\n    if [ \"$size_mb\" == \"\" ];then\n        echo \"镜像大小为空，请指定不小于 1 的整数尺寸！\"\n        exit 1\n    fi\n    \n    echo \"创建空白的目标镜像文件, 大小是 $size_mb MB  ... \"\n    dd if=/dev/zero of=\"$img_name\" bs=1M count=$size_mb conv=fsync && sync\n    if [ $? -ne 0 ];then\n        echo \"空白镜像创建失败！\"\n        exit 1\n    else\n        echo \"空白镜像创建成功\"\n    fi\n\n    echo -n \"设置分区循环设备 ... \"\n    losetup -f -P \"$img_name\"\n    if [ $? -ne 0 ];then\n        echo \"失败！\"\n        exit 1\n    else\n        TGT_DEV=$(losetup | grep \"$img_name\" | gawk '{print $1}')\n        export TGT_DEV\n        echo \"成功: [$TGT_DEV]\"\n    fi\n    echo\n}\n\n# 创建分区(允许在空白磁盘里新建分区，也允许在现有分区表中扩充分区)\n# 参数1： 块设备名\n# 参数2： 分区表类型： msdos|gpt|auto  auto表示在现有的磁盘中添加新分区\n# 参数3+4+5： 分区1跳过MB 分区1大小MB 分区1类型\n# 参数6+7+8： 分区2跳过MB 分区2大小MB 分区2类型\n# 参数9+10+11： 分区3跳过MB 分区3大小MB 分区3类型\n# 参数12+13+14: 分区4跳过MB 分区4大小MB 分区4类型\n# ...\nfunction create_partition() {\n    local device_name=$1\n    check_block_dev $device_name\n    shift\n\n    local partition_label=$1\n    shift\n\n    local max_pt_cnt\n    local cur_pt_cnt=0\n    case ${partition_label} in\n        msdos) max_pt_cnt=4\n               ;;\n          gpt) max_pt_cnt=128\n               ;;\n         auto) local label=$(parted $device_name print 2>/dev/null | gawk '$NF ~ /&msdos$/ || $NF ~ /^gpt$/ || $NF ~ /^unknown$/ {print $NF}')\n               case $label in \n                   msdos) partition_label=\"msdos\"\n                          max_pt_cnt=4\n                          cur_pt_cnt=$(parted $device_name print | gawk '$1 ~ /^[0-9]+$/ {print $1}' | tail -n1)\n                          [ \"$cur_pt_cnt\" == \"\" ] && cur_pt_cnt=0\n                          ;;\n                     gpt) partition_label=\"gpt\"\n                          max_pt_cnt=128\n                          cur_pt_cnt=$(parted $device_name print | gawk '$1 ~ /^[0-9]+$/ {print $1}' | tail -n1)\n                          [ \"$cur_pt_cnt\" == \"\" ] && cur_pt_cnt=0\n                          ;;\n                       *) # 自动模式下，如果检测到空白磁盘，将会用msdos格式新建分区表\n                          partition_label=\"msdos\"\n                          max_pt_cnt=4\n                          cur_pt_cnt=0\n                          ;;\n               esac\n               ;;\n            *) echo \"未指定分区表类型, 必须为 gpt|msdos|auto\"\n               exit 1\n               ;;\n    esac\n\n    echo \"对磁盘设备 [$device_name] 进行分区 ...\"\n    if [ $cur_pt_cnt -eq 0 ];then\n        echo -n \"创建新的分区表 ... \"\n        parted -s ${device_name} mklabel ${partition_label} 2>/dev/null\n        if [ $? -ne 0 ];then\n            echo \"失败!\"\n            detach_loopdev\n            exit 1\n        else\n            echo \"成功\"\n        fi\n    fi\n\n    local start=0\n    if [ $cur_pt_cnt -gt 0 ];then\n        start=$(fdisk -l $device_name | tail -n1 | gawk '{ print ($3 + 1) / 512 * 1024 * 1024 }')\n    fi\n    i=$((cur_pt_cnt + 1))\n    while [ $i -le ${max_pt_cnt} ]; do\n        local skip_mb=$1\n        shift\n        local pt_size=$1\n        shift\n        local pt_type=$1\n        shift\n\tlocal pt_idx=$i\n        \n        if [ \"$skip_mb\" == \"\" ] || [ \"$pt_size\" == \"\" ] || [ \"$pt_type\" == \"\" ];then\n            break\n        fi            \n\n\tlocal esp_on=0\n\tlocal lvm_on=0\n\tif [ \"$pt_type\" == \"efi\" ];then\n\t    pt_type=\"fat32\"\n\t    esp_on=1\n\telif [ \"$pt_type\" == \"lvm\" ];then\n\t    pt_type=\"ext2\"\n\t    lvm_on=1\n\tfi\n\n        start=$(( skip_mb * 1024 * 1024 + start ))\n\n        local end\n        if [ \"${pt_size}\" == \"-1\" ] || [ \"${pt_size}\" == \"100%\" ];then\n            echo -n \"创建第 [$i] 个分区, 分区大小: 所有剩余空间, 分区类型: [$pt_type] ... \"\n            parted -s ${device_name} mkpart primary ${pt_type} ${start}b \"100%\" 2>/dev/null\n            if [ $? -ne 0 ];then\n                echo \"失败!\"\n                detach_loopdev\n                exit 1\n            else\n                echo \"成功\"\n                break\n            fi\n        else\n            end=$(( pt_size * 1024 * 1024 +  start - 1 ))\n            echo -n \"创建第 [$i] 个分区, 分区大小: [$pt_size] MB, 分区类型: [$pt_type] ... \"\n            parted -s ${device_name} mkpart primary ${pt_type} ${start}b ${end}b 2>/dev/null\n            if [ $? -ne 0 ];then\n                echo \"失败!\"\n                detach_loopdev\n                exit 1\n            else\n                echo \"成功\"\n            fi\n        fi\n\n\tif [ \"$esp_on\" == \"1\" ];then\n            parted -s ${device_name} set $pt_idx esp on\n\telif [ \"$lvm_on\" == \"1\" ];then\n            parted -s ${device_name} set $pt_idx lvm on\n        fi\n\n        start=$(( end + 1 ))\n        i=$((i + 1))\n    done\n\n    echo \"[$device_name] 磁盘分区一览:\"\n    echo \"===================================================================\"\n    fdisk -l $device_name 2>/dev/null\n    echo \"===================================================================\"\n    echo\n}\n\n# 格式化文件系统\n# 参数1:  块设备名\n# 参数2:  分区1用途: boot=B rootfs=R other=O\n# 参数3： 分区1类型: fat16|fat32|ext4|xfs|btrfs|f2fs\n# 参数4： 分区1卷标\n# 参数5:  分区2用途: boot=B rootfs=R other=O\n# 参数6： 分区2类型: fat16|fat32|ext4|xfs|btrfs|f2fs\n# 参数7： 分区2卷标\n# 参数8:  分区3用途: boot=B rootfs=R other=O\n# 参数9： 分区3类型: fat16|fat32|ext4|xfs|btrfs|f2fs\n# 参数10: 分区3卷标\n# 参数11: 分区4用途: boot=B rootfs=R other=O\n# 参数12: 分区4类型: fat16|fat32|ext4|xfs|btrfs|f2fs\n# 参数13：分区4卷标\nfunction make_filesystem() {\n    local device_name=$1\n    check_block_dev $device_name\n    shift\n\n    echo \"===================================================================\"\n    echo \"在 [$device_name] 上创建文件系统 ... \" \n    i=1\n    while [ $i -le 4 ]; do\n        local fs_use=$1\n        shift\n        local fs_type=$1\n        shift\n        local fs_label=$1\n        shift\n        if [ \"$fs_use\" == \"\" ] || [ \"$fs_type\" == \"\" ] || [ \"$fs_label\" == \"\" ];then\n             break\n        fi\n\n        local fs_uuid=$(uuidgen)\n        case $fs_use in\n            B) if [ \"$fs_type\" == \"ext4\" ] || [ \"$fs_type\" == \"xfs\" ] || [ \"$fs_type\" == \"btrfs\" ] || [ \"$fs_type\" == \"f2fs\" ];then\n                    BOOT_UUID=${fs_uuid}\n                    echo \"The boot uuid is ${BOOT_UUID}\"\n                    export BOOT_UUID\n               fi\n               BOOT_LABEL=${fs_label}\n               echo \"The boot label is ${BOOT_LABEL}\"\n               export BOOT_LABEL\n               ;;\n            R) ROOTFS_UUID=${fs_uuid}\n               ROOTFS_LABEL=${fs_label}\n               echo \"The rootfs uuid is ${ROOTFS_UUID}\"\n               echo \"The rootfs label is ${ROOTFS_LABEL}\"\n               export ROOTFS_UUID ROOTFS_LABEL\n               ;;\n            O) ;;\n            *) echo \"分区用途： [$fs_use] 无法识别！仅支持 B/R/O 三种!\"\n               detach_loopdev\n               exit 1\n               ;;\n        esac\n\n        echo \"格式化 [${device_name}p${i}], 类型为 [$fs_type], 卷标为 [$fs_label] ... \"\n        wait_dev ${device_name}p${i}\n        case $fs_type in \n            fat16) mkfs.vfat -F 16 -n \"${fs_label}\" ${device_name}p${i}\n                   if [ $? -ne 0 ];then\n                        echo \"[${device_name}p${i}] 格式化失败！\"\n                        detach_loopdev\n                        exit 1\n                   else\n                        echo \"[${device_name}p${i}] 格式化成功\"\n                   fi\n                   ;;\n            fat32) mkfs.vfat -F 32 -n \"${fs_label}\" ${device_name}p${i}\n                   if [ $? -ne 0 ];then\n                        echo \"[${device_name}p${i}] 格式化失败！\"\n                        detach_loopdev\n                        exit 1\n                   else\n                        echo \"[${device_name}p${i}] 格式化成功\"\n                   fi\n                   ;;\n             ext4) mkfs.ext4 -U ${fs_uuid} -L \"${fs_label}\" -b 4k ${device_name}p${i}\n                   if [ $? -ne 0 ];then\n                        echo \"[${device_name}p${i}] 格式化失败！\"\n                        detach_loopdev\n                        exit 1\n                   else\n                        echo \"[${device_name}p${i}] 格式化成功\"\n                   fi\n                   ;;\n              xfs) mkfs.xfs -U ${fs_uuid} -L \"${fs_label}\" ${device_name}p${i}\n                   if [ $? -ne 0 ];then\n                        echo \"[${device_name}p${i}] 格式化失败！\"\n                        detach_loopdev\n                        exit 1\n                   else\n                        echo \"[${device_name}p${i}] 格式化成功\"\n                   fi\n                   ;;\n             f2fs) mkfs.f2fs -U ${fs_uuid} -l \"${fs_label}\" ${device_name}p${i}\n                   if [ $? -ne 0 ];then\n                        echo \"[${device_name}p${i}] 格式化失败！\"\n                        detach_loopdev\n                        exit 1\n                   else\n                        echo \"[${device_name}p${i}] 格式化成功\"\n                   fi\n                   ;;\n            btrfs) mkfs.btrfs -U ${fs_uuid} -L \"${fs_label}\" -m single ${device_name}p${i}\n                   if [ $? -ne 0 ];then\n                        echo \"[${device_name}p${i}] 格式化失败！\"\n                        detach_loopdev\n                        exit 1\n                   else\n                        echo \"[${device_name}p${i}] 格式化成功\"\n                   fi\n                   ;;\n                *) echo \"文件系统类型 [$fs_type] 不受支持!\"\n                   detach_loopdev\n                   exit 1\n                   ;;\n        esac\n\n        i=$((i+1))\n    done\n    echo \"[$device_name] 文件系统已创建.\" \n    echo \"===================================================================\"\n    echo\n}\n\nfunction mount_fs() {\n    local device_name=$1\n    check_block_dev $device_name\n\n    local mount_point=$2\n    check_dir $mount_point\n\n    local fs_type=$3\n    if [ -z \"$fs_type\" ];then\n         echo \"未指定文件系统类型\"\n         detach_loopdev\n         exit 1\n    fi\n\n    local mount_options=$4\n\n    echo -n \"挂载 ${device_name} --> ${mount_point} ... \"\n    if [ \"$mount_options\" == \"\" ];then\n        mount -t \"$fs_type\" \"$device_name\" \"$mount_point\"\n    else\n        mount -t \"$fs_type\" -o \"$mount_options\" \"$device_name\" \"$mount_point\"\n    fi\n    if [ $? -ne 0 ];then\n         echo \"失败!\"\n         detach_loopdev\n         exit 1\n    else\n         echo \"成功\"\n    fi\n}\n\n# 检查opkg依赖包\nfunction check_opkg_requires() {\n\t(\n\t\tcd ${TGT_ROOT}\n\t\tlocal ok=\"ok\"\n\t\twhile :;do\n\t\t\tlocal pkgname=$1\n\t\t\tshift\n\t\t\tif [ -n \"${pkgname}\" ];then\n\t\t\t\tif [ ! -f \"./usr/lib/opkg/info/${pkgname}.control\" ];then\n\t\t\t\t\tif [ \"$ok\" == \"ok\" ];then\n\t\t\t\t\t\tok=\"The following packages do not exist:\"\n\t\t\t\t\tfi\n\t\t\t\t\tok=\"$ok $pkgname\"\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\techo $ok\n\t)\n}\n\n# 若安装了netdata，则选择性打补丁，以支持温度监控功能\n# 若有python依赖，则首选python.d, 否则选charts.d\nfunction patch_netdata() {\n\tlocal common_required=\"netdata\"\n\tlocal charts_d_required=\"coreutils-timeout\"\n\tlocal python_d_required=\"python3-logging python3-ctypes python3-yaml lm-sensors\"\n\tlocal daemon=\"none\"\n\tlocal ret\n\n\tret=$(check_opkg_requires ${common_required})\n\tif [ \"$ret\" != \"ok\" ];then\n\t\techo\n\t\treturn\n\tfi\n\n\tret=$(check_opkg_requires ${python_d_required})\n\tif [ \"$ret\" == \"ok\" ];then\n\t\tdaemon=\"python.d\"\n\telse\n\t\tret=$(check_opkg_requires ${charts_d_required})\n\t\tif [ \"$ret\" == \"ok\" ];then\n\t\t\tdaemon=\"charts.d\"\n\t\tfi\n\tfi\n\n\tif [ -n \"$NETDATA_PATCH_HOME\" ] && [ -d \"$NETDATA_PATCH_HOME\" ] && [ \"$daemon\" != \"none\" ];then\n\t\t(\n\t\t\techo\n\t\t\techo \"为 netdata 打补丁以支持更多监控功能 ...\"\n\t\t\tcd ${TGT_ROOT}\n\t\t\tfor p in $(ls ${NETDATA_PATCH_HOME}/common/*.patch);do\n\t\t\t\tpatch -p1 < $p\n\t\t\tdone\n\t\t\tfor p in $(ls ${NETDATA_PATCH_HOME}/${daemon}/*.patch);do\n\t\t\t\tpatch -p1 < $p\n\t\t\tdone\n\t\t\techo \"完成\"\n\t\t\techo\n\t\t)\n\tfi\n}\n\n# 为cgroupfs_mount软件包打cgroup2补丁\nfunction patch_cgroupfs_mount() {\n\tlocal common_required=\"cgroupfs-mount\"\n\tlocal ret\n\n\tret=$(check_opkg_requires ${common_required})\n\tif [ \"$ret\" != \"ok\" ];then\n\t\techo\n\t\treturn\n\tfi\n\n\tif [ -n \"$CGROUP2_PATCH_HOME\" ] && [ -d \"$CGROUP2_PATCH_HOME\" ];then\n\t\t(\n\t\t\techo\n\t\t\techo \"为 cgroupfs-mount 打补丁以支持 cgroup2 ...\"\n\t\t\tcd ${TGT_ROOT}\n\t\t\tfor p in $(ls ${CGROUP2_PATCH_HOME}/*.patch);do\n\t\t\t\techo \"$p\"\n\t\t\t\tpatch -p1 < $p 2>/dev/null\n\t\t\tdone\n\t\t\trm -f ./etc/init.d/*.rej ./etc/init.d/*.orig ./usr/bin/*.rej ./usr/bin/*.orig\n\t\t\techo \"完成\"\n\t\t\techo\n\t\t)\n\tfi\n}\n\nfunction extract_rootfs_files() {\n   echo -n \"释放 Openwrt rootfs 压缩包 ... \"\n   (\n       cd ${TGT_ROOT} && \\\n          tar --exclude=\"./lib/firmware/*\" --exclude=\"./lib/modules/*\" -xzf \"$OPWRT_ROOTFS_GZ\" && \\\n          mkdir -p .reserved boot rom overlay proc sys run ./etc/modprobe.d ./etc/modules.d.remove && \\\n          sync\n   )\n   if [ $? -ne 0 ];then\n        echo \"失败！\"\n        detach_loopdev\n        exit 1\n   else \n        echo \"完成\"\n   fi\n   echo -n \"裁减 Rootfs 中用不到的文件 ... \"\n   (\n       cd ${TGT_ROOT}\n       rm -rf ./lib/firmware/* ./lib/modules/*\n       rm -f ./etc/docker-init ./sbin/firstboot ./sbin/jffs2reset ./sbin/jffs2mark\n       # for collectd\n       [ -f ./etc/ppp/options-opkg ] && mv ./etc/ppp/options-opkg ./etc/ppp/options\n       chmod 755 ./etc/init.d/*\n       rm -f ./etc/rc.d/S80nginx 2>/dev/null\n       local ps=\"${PLATFORM}_${SOC}\"\n       case $ps in \n           amlogic_s905) # s905不支持硬件aes，所以必须删除 ss-rust 程序\n                         [ -f ./usr/bin/sslocal ] && rm -f ./usr/bin/sslocal\n                         [ -f ./usr/bin/ssserver ] && rm -f ./usr/bin/ssserver\n                         ;;\n       esac\n   )\n   echo \"完成\"\n\n   echo -n \"重新链接 kmod 程序 ... \"\n   (  cd $TGT_ROOT/sbin \n      [ ! -x \"kmod\" ] && [ -f \"${KMOD}\" ] && cp \"$KMOD\" kmod\n      if [ -x \"kmod\" ];then\n          rm -f depmod insmod lsmod modinfo modprobe rmmod\n          ln -sf kmod depmod\n          ln -sf kmod insmod\n          ln -sf kmod lsmod\n          ln -sf kmod modinfo\n          ln -sf kmod modprobe\n          ln -sf kmod rmmod\n      fi\n   )\n   echo \"完成\"\n\n   echo -n \"释放 Armbian firmware 压缩包 ... \"\n   ( cd ${TGT_ROOT}/lib && tar xJf \"$FIRMWARE_TXZ\" && sync )\n   if [ $? -ne 0 ];then\n        echo \"失败！\"\n        detach_loopdev\n        exit 1\n   else \n        echo \"完成\"\n   fi\n\n   if [ -d \"${FMW_HOME}\" ];then\n       echo -n \"复制 Added firmware 文件 ... \"\n       ( cd ${TGT_ROOT} && cp -a ${FMW_HOME}/* lib/firmware/ && sync )\n       echo \"完成\"\n   fi\n\n   if [ -n \"${BOARD_FIRMWARE_HOME}\" ] && [ -d \"${BOARD_FIRMWARE_HOME}\" ];then\n       echo -n \"复制 Board custom firmware 文件 ... \"\n       ( cd ${TGT_ROOT} && cp -a ${BOARD_FIRMWARE_HOME}/* lib/firmware/ && sync )\n       echo \"完成\"\n   fi\n\n   echo -n \"优化 firmware ... \"\n   (\n       cd $TGT_ROOT/lib/firmware\n       mv *.hcd brcm/ 2>/dev/null\n       cd brcm\n\n       # gtking/gtking pro 采用 bcm4356 wifi/bluetooth 模块\n       get_random_mac\n       # wifi5 module AP6356S\n       sed -e \"s/macaddr=00:90:4c:1a:10:01/macaddr=${MACADDR}/\" \"brcmfmac4356-sdio.txt\" > \"brcmfmac4356-sdio.azw,gtking.txt\"\n\n       get_random_mac\n       # wifi6 module AP6275S\n       sed -e \"s/macaddr=00:90:4c:12:d0:01/macaddr=${MACADDR}/\" \"brcmfmac4375-sdio.txt\" > \"brcmfmac4375-sdio.azw,gtking.txt\"\n\n       # Phicomm N1 采用 bcm43455 wifi/bluetooth 模块\n       get_random_mac\n       ln -s brcmfmac43455-sdio.bin brcmfmac43455-sdio.phicomm,n1.bin\n       sed -e \"s/macaddr=00:90:4c:c5:12:38/macaddr=${MACADDR}/\" \"brcmfmac43455-sdio.txt\" > \"brcmfmac43455-sdio.phicomm,n1.txt\"\n\n       # MXQ Pro+ 采用 AP6330(bcm4330) wifi/bluetooth 模块\n       get_random_mac\n       sed -e \"s/macaddr=00:90:4c:c5:12:38/macaddr=${MACADDR}/\" \"brcmfmac4330-sdio.txt\" > \"brcmfmac4330-sdio.crocon,mxq-pro-plus.txt\"\n\n       # HK1 Box 和 H96 Max X3 采用 bcm54339 wifi/bluetooth 模块\n       get_random_mac\n       sed -e \"s/macaddr=00:90:4c:c5:12:38/macaddr=${MACADDR}/\" \"brcmfmac4339-sdio.ZP.txt\" > \"brcmfmac4339-sdio.amlogic,sm1.txt\"\n\n       # 旧版ugoos x3 采用 bcm43455 wifi/bluetooth 模块\n       get_random_mac\n       sed -e \"s/macaddr=b8:27:eb:74:f2:6c/macaddr=${MACADDR}/\" \"brcmfmac43455-sdio.txt\" > \"brcmfmac43455-sdio.amlogic,sm1.txt\"\n\n       # 新版ugoos x3 采用 brm43456\n       get_random_mac\n       sed -e \"s/macaddr=b8:27:eb:74:f2:6c/macaddr=${MACADDR}/\" \"brcmfmac43456-sdio.txt\" > \"brcmfmac43456-sdio.amlogic,sm1.txt\"\n\n       # V5.1版 x96max plus 采用 AM7256 (brcm4354)\n       get_random_mac\n       sed -e \"s/macaddr=00:90:4c:00:43:54/macaddr=${MACADDR}/\" \"brcmfmac4354-sdio.txt\" > \"brcmfmac4354-sdio.amlogic,sm1.txt\"\n\n       # JP-TVBox 采用 hcy6355(bcm4339) ,也可diy成AP6255(bcm43455),网速倍增！\n       get_random_mac\n       sed -e \"s/macaddr=00:90:4c:c5:12:38/macaddr=${MACADDR}/\" \"brcmfmac4339-sdio.ZP.txt\" > \"brcmfmac4339-sdio.JP-TVbox,rk3566.txt\"\n       ln -s brcmfmac4339-sdio.bin brcmfmac4339-sdio.JP-TVbox,rk3566.bin\n       get_random_mac\n       sed -e \"s/macaddr=00:90:4c:c5:12:38/macaddr=${MACADDR}/\" \"brcmfmac43455-sdio.txt\" > \"brcmfmac43455-sdio.JP-TVbox,rk3566.txt\"\n       ln -s brcmfmac43455-sdio.bin brcmfmac43455-sdio.JP-TVbox,rk3566.bin\n   )\n   echo \"完成\"\n\n   echo -n \"释放 Kernel modules 压缩包 ... \"\n   ( \n      cd ${TGT_ROOT} && \\\n          mkdir -p lib/modules && \\\n          cd lib/modules && \\\n              tar xzf ${MODULES_TGZ} && \\\n              cd ${KERNEL_VERSION}/ && \\\n                  find . -name '*.ko' -exec ln -sf {} . \\; && \\\n                  rm -f \"build\" \"source\" \"ntfs.ko\" && \\\n          sync\n   )\n   if [ $? -ne 0 ];then\n        echo \"失败！\"\n        detach_loopdev\n        exit 1\n   else \n        echo \"完成\"\n   fi\n\n   if [ -n \"$MODEL_DB\" ] && [ -f \"$MODEL_DB\" ];then\n       echo \"复制硬件机型数据库 ...\"\n       cp -v \"$MODEL_DB\" ${TGT_ROOT}/etc/model_database.txt\n       echo \"完成\"\n   fi \n}\n\nfunction extract_amlogic_boot_files() {\n    echo -n \"释放 Kernel zImage、uInitrd 及 dtbs 压缩包 ... \"\n    ( \n        cd ${TGT_BOOT} && \\\n            cp \"${BOOTFILES_HOME}\"/* . && \\\n            tar xzf \"${BOOT_TGZ}\" && \\\n            rm -f initrd.img-${KERNEL_VERSION} && \\\n            cp vmlinuz-${KERNEL_VERSION} zImage && \\\n            cp uInitrd-${KERNEL_VERSION} uInitrd && \\\n            cp ${UBOOT_WITHOUT_FIP_HOME}/* . && \\\n            mkdir -p dtb/amlogic && \\\n            cd dtb/amlogic && \\\n            tar xzf \"${DTBS_TGZ}\" && \\\n            sync\n    )\n    if [ $? -ne 0 ];then\n         echo \"失败！\"\n         detach_loopdev\n         exit 1\n    fi\n    ( \n        cd ${TGT_BOOT}\n        # 5.4内核不再需要u-boot.sd 以及 u-boot.usb\n        rm -f u-boot.usb u-boot.sd\n        # 5.10以后的内核，需要增加u-boot重载\n        # 5.4内核可加可不加\n        if [ $K510 -eq 1 ];then\n            check_file ${UBOOT_WITHOUT_FIP}\n            cp -f ${UBOOT_WITHOUT_FIP} u-boot.ext\n            if [ $? -ne 0 ];then\n                echo \"失败！\"\n                detach_loopdev\n                exit 1\n            fi\n        fi\n    ) \n    echo \"完成\"\n}\n\nfunction extract_rockchip_boot_files() {\n    echo -n \"释放 Kernel zImage、uInitrd 及 dtbs 压缩包 ... \"\n    ( \n          cd ${TGT_BOOT} && \\\n              cp -v \"${BOOTFILES_HOME}\"/* . && \\\n              tar xzf \"${BOOT_TGZ}\" && \\\n              rm -f initrd.img-${KERNEL_VERSION} && \\\n              ln -sf vmlinuz-${KERNEL_VERSION} Image && \\\n              ln -sf uInitrd-${KERNEL_VERSION} uInitrd && \\\n              mkdir -p dtb-${KERNEL_VERSION}/rockchip && \\\n              ln -sf dtb-${KERNEL_VERSION} dtb && \\\n              cd dtb/rockchip && \\\n              tar xzf \"${DTBS_TGZ}\" && \\\n              sync\n    )\n    if [ $? -ne 0 ];then\n        echo \"失败！\"\n        detach_loopdev\n        exit 1\n    else \n        echo \"完成\"\n    fi\n}\n\nfunction extract_allwinner_boot_files() {\n    echo -n \"释放 Kernel zImage、uInitrd 及 dtbs 压缩包 ... \"\n    ( \n        cd ${TGT_BOOT} && \\\n            cp \"${BOOTFILES_HOME}\"/* . && \\\n            tar xzf \"${BOOT_TGZ}\" && \\\n            rm -f initrd.img-${KERNEL_VERSION} && \\\n            cp vmlinuz-${KERNEL_VERSION} zImage && \\\n            cp uInitrd-${KERNEL_VERSION} uInitrd && \\\n            mkdir -p dtb/allwinner && \\\n            cd dtb/allwinner && \\\n            tar xzf \"${DTBS_TGZ}\" && \\\n            sync\n    )\n    if [ $? -ne 0 ];then\n        echo \"失败！\"\n        detach_loopdev\n        exit 1\n    else \n        echo \"完成\"\n    fi\n}\n\nfunction extract_qemu-aarch64_boot_files() {\n    echo -n \"释放 Kernel vmlinuz、initrd.img 及 grub2 压缩包 ... \"\n    ( \n        cd ${TGT_ROOT}/boot && \\\n\t    mkdir -p efi && \\\n\t    tar xzf \"${BOOTFILES_HOME}/grub2.tar.gz\" && \\\n            tar xzf \"${BOOT_TGZ}\" && \\\n            ln -s initrd.img-${KERNEL_VERSION} initrd.img && \\\n\t    ln -s vmlinuz-${KERNEL_VERSION} vmlinuz && \\\n            rm -f uInitrd* && \\\n        cd ${TGT_BOOT} && \\\n\t    tar xzf \"${BOOTFILES_HOME}/EFI.tar.gz\" && \\\n\t    sync\n    )\n    if [ $? -ne 0 ];then\n        echo \"失败！\"\n        detach_loopdev\n        exit 1\n    else \n        echo \"完成\"\n    fi\n}\n\n# 生成 openwrt 所需的 fstab 文件\nfunction create_fstab_config() {\n    echo \"创建 fstab 配置文件 ... \"\n    (\n        cd $TGT_ROOT\n\tif [ \"$PLATFORM\" == \"qemu-aarch64\" ];then\n            cat > ./etc/fstab <<EOF\nUUID=${ROOTFS_UUID} / btrfs compress=zstd:${ZSTD_LEVEL} 0 1\nLABEL=${BOOT_LABEL} /boot/efi vfat noatime,errors=remount-ro 0 2\n#tmpfs /tmp tmpfs defaults,nosuid 0 0\nEOF\n        elif [ ! -z \"${BOOT_UUID}\" ];then\n            cat > ./etc/fstab <<EOF\nUUID=${ROOTFS_UUID} / btrfs compress=zstd:${ZSTD_LEVEL} 0 1\nUUID=${BOOT_UUID} /boot ext4 noatime,errors=remount-ro 0 2\n#tmpfs /tmp tmpfs defaults,nosuid 0 0\nEOF\n        else \n            cat > ./etc/fstab <<EOF\nUUID=${ROOTFS_UUID} / btrfs compress=zstd:${ZSTD_LEVEL} 0 1\nLABEL=${BOOT_LABEL} /boot vfat defaults 0 2\n#tmpfs /tmp tmpfs defaults,nosuid 0 0\nEOF\n        fi\n\n        cat > ./etc/config/fstab <<EOF\nconfig global\n        option anon_swap '0'\n        option auto_swap '0'\n        option anon_mount '1'\n        option auto_mount '1'\n        option delay_root '5'\n        option check_fs '0'\n\nconfig mount\n        option target '/rom'\n        option enabled '1'\n        option enabled_fsck '1'\n        option uuid '${ROOTFS_UUID}'\n        option fstype 'btrfs'\n        option options 'compress=zstd:${ZSTD_LEVEL}'\n\nEOF\n\n        if [ \"$PLATFORM\" == \"qemu-aarch64\" ];then\n            cat >> ./etc/config/fstab <<EOF\nconfig mount\n        option target '/boot/efi'\n        option enabled '1'\n        option enabled_fsck '1'\nEOF\n        else\n            cat >> ./etc/config/fstab <<EOF\nconfig mount\n        option target '/boot'\n        option enabled '1'\n        option enabled_fsck '1'\nEOF\n\tfi\n\n        if [ \"$PLATFORM\" == \"qemu-aarch64\" ];then\n            cat >> ./etc/config/fstab <<EOF\n        option label '${BOOT_LABEL}'\n        option fstype 'vfat'\nEOF\n        elif [ ! -z \"${BOOT_UUID}\" ];then\n            cat >> ./etc/config/fstab <<EOF\n        option uuid '${BOOT_UUID}'\n        option fstype 'ext4'\n\nEOF\n        else\n            cat >> ./etc/config/fstab <<EOF\n        option label '${BOOT_LABEL}'\n        option fstype 'vfat'\n\nEOF\n        fi\n    )\n    echo \"当前 fstab 内容如下：\"\n    echo \"===============================================\"\n    cat $TGT_ROOT/etc/config/fstab\n    echo \"===============================================\"\n    echo\n}\n\n# 调整ntfs相关配置\nfunction adjust_ntfs_config() {\n    echo -n \"调整 ntfs 配置 ... \"\n    ( \n        cd $TGT_ROOT/sbin\n        if ls ../usr/lib/opkg/info/ntfs3* >/dev/null 2>&1;then\n            rm -f mount.ntfs* \n            cat > mount.ntfs <<EOF\n#!/bin/sh\n\nfunction check_k515() {\n    # 判断内核版本是否 >= 5.15\n    K_VER=\\$(uname -r | cut -d '.' -f1)\n    K_MAJ=\\$(uname -r | cut -d '.' -f2)\n\n    if [ \\$K_VER -eq 5 ];then\n        if [ \\$K_MAJ -ge 15 ];then\n            K515=1\n        else\n            K515=0\n        fi\n    elif [ \\$K_VER -gt 5 ];then\n        K515=1\n    else\n        K515=0\n    fi\n    export K515\n}\n\ncheck_k515\nif [ \\$K515 -eq 1 ];then\n    mount -t ntfs3 -o iocharset=utf8,force \"\\$@\"\nelse\n    mount -t ntfs3 -o nls=utf8,force \"\\$@\"\nfi\n\nEOF\n            chmod 755 mount.ntfs\n            echo \"发现 ntfs3, 调整完成\"\n        elif ls ../usr/lib/opkg/info/ntfs-3g* >/dev/null 2>&1;then\n            ln -sf /usr/bin/ntfs-3g mount.ntfs\n            echo \"发现 ntfs-3g, 调整完成\"\n        else\n            echo \"完成\"\n        fi\n    )\n}\n\n# 调整 turboacc 相关配置\nfunction adjust_turboacc_config() {\n    echo -n \"调整 turboacc 配置 ... \"\n    ( \n        cd $TGT_ROOT\n        if [ -f ./etc/config/turboacc ];then\n            sed -e \"s/option sw_flow '1'/option sw_flow '${SW_FLOWOFFLOAD}'/\" -i ./etc/config/turboacc\n            sed -e \"s/option hw_flow '1'/option hw_flow '${HW_FLOWOFFLOAD}'/\" -i ./etc/config/turboacc\n            sed -e \"s/option sfe_flow '1'/option sfe_flow '${SFE_FLOW}'/\" -i ./etc/config/turboacc\n        else\n            cat > ./etc/config/turboacc <<EOF\n\nconfig turboacc 'config'\n        option sw_flow '${SW_FLOWOFFLOAD}'\n        option hw_flow '${HW_FLOWOFFLOAD}'\n        option sfe_flow '${SFE_FLOW}'\n        option bbr_cca '0'\n        option fullcone_nat '1'\n        option dns_caching '0'\n\nEOF\n        fi\n    )\n    echo \"完成\"\n}\n\n# CPU状态补丁\nfunction patch_admin_status_index_html() {\n    echo \"打补丁：[状态页面相关信息补丁] ... \"\n\t(\n            cd $TGT_ROOT\n\t    if [ ! -f ./usr/lib/lua/luci/view/admin_status/index.htm ];then\n\t\t    echo \"未发现目标文件，放弃打补丁\"\n\t\t    return\n\t    fi\n\n            if [ ! -f usr/bin/perl ];then\n                 echo \"未发现 perl 实用程序, 放弃补丁!\"\n            else \n\t\tif [ -d \"${INDEX_PATCH_HOME}\" ];then\n                   cp ./usr/lib/lua/luci/view/admin_status/index.htm ./usr/lib/lua/luci/view/admin_status/index.htm.bak\n\t\t   ret=0\n\t\t   for p in `echo ${INDEX_PATCH_HOME}/*.patch`;do\n                       patch -p1 < $p \n\t\t       if [ $? -ne 0 ];then\n                            echo \"补丁失败，还原原始文件 ... \"\n                            mv ./usr/lib/lua/luci/view/admin_status/index.htm.bak  ./usr/lib/lua/luci/view/admin_status/index.htm\n\t\t\t    ret=1\n                            echo \"已还原\"\n\t\t\t    break\n                       fi\n\t           done\n\t\t   if [ $ret -eq 0 ];then\n                        echo \"补丁成功\"\n\t\t\trm -f ./usr/lib/lua/luci/view/admin_status/index.htm.bak\n\t\t\tif [ -n \"${DC_VOLTAGE_PATCH}\" ] && [ -f \"${DC_VOLTAGE_PATCH}\" ];then\n\t\t\t\techo \"发现 DC 电压监控补丁，开始打补丁 ...\"\n\t\t\t\tpatch -p1 < \"${DC_VOLTAGE_PATCH}\" && echo \"完成\"\n\t\t\tfi\n\t\t   fi\n                fi\n                echo \"完成\"\n\n            fi\n            echo\n        )\n}\n\n# 写入 release 信息\nfunction write_release_info() {\n    echo \"写入 release 信息 ... \"\n    (\n        cd $TGT_ROOT\n\n        # 写入版本信息\n        cat > ./etc/flippy-openwrt-release <<EOF\nPLATFORM=${PLATFORM}\nSOC=${SOC}\nBOARD=${BOARD}\nKERNEL_VERSION=${KERNEL_VERSION}\nK510=${K510}\nKERNEL_TAGS='${KERNEL_TAGS}'\nKERNEL_BRANCHES='${KERNEL_BRANCHES}'\nEOF\n\n        if [ -f \"./etc/uci-defaults/99-default-settings\" ] && [ -n \"${DISTRIB_REVISION}\" ] && [ -n \"${DISTRIB_DESCRIPTION}\" ];then\n            sed -e \"/exit 0/d\" -i ./etc/uci-defaults/99-default-settings\n\t    cat >> ./etc/uci-defaults/99-default-settings <<EOF\nsed -i '/DISTRIB_REVISION/d' /etc/openwrt_release\necho \"DISTRIB_REVISION='${DISTRIB_REVISION}'\" >> /etc/openwrt_release\nsed -i '/DISTRIB_DESCRIPTION/d' /etc/openwrt_release\necho \"DISTRIB_DESCRIPTION='${DISTRIB_DESCRIPTION} '\" >> /etc/openwrt_release\n\nexit 0\nEOF\n        fi\n\n        if [ \"$PLATFORM\" == \"amlogic\" ] && [ -n \"$UBOOT_WITHOUT_FIP\" ];then\n            cat >> ./etc/flippy-openwrt-release <<EOF\nUBOOT_OVERLOAD=${UBOOT_WITHOUT_FIP}\nEOF\n        fi\n\n        if [ \"${SOC}\" == \"rk3588\" ];then\n            echo \"LOCK_KERNEL=${LOCK_KERNEL}\" >> ./etc/flippy-openwrt-release\n        fi\n\n\n        # only photonic need pcat-manager service\n        if [ \"${BOARD}\" != \"photonicat\" ];then\n            rm -f ./etc/rc.d/[SK]??pcat-manager 2>/dev/null\n            rm -f ./etc/init.d/pcat-manager 2>/dev/null\n        fi\n    )\n    cat $TGT_ROOT/etc/flippy-openwrt-release\n    echo \n}\n\n# 写入 banner 信息\nfunction write_banner() {\n    echo \"写入 banner 信息 ... \"\n    (\n        cd $TGT_ROOT\n        if [ -f $BANNER ];then\n            cp -f $BANNER ./etc/banner\n            echo \" Base on OpenWrt ${OPENWRT_VER} by lean & lienol\" >> etc/banner\n            echo \" Kernel ${KERNEL_VERSION}\" >> etc/banner\n            TODAY=$(date +%Y-%m-%d)\n            echo \" Packaged by ${WHOAMI} on ${TODAY}\" >> etc/banner\n            echo \" PLATFORM: ${PLATFORM}  SOC: ${SOC}  BOARD: ${BOARD}\" >> etc/banner\n            echo >> etc/banner\n        fi\n    )\n    cat $TGT_ROOT/etc/banner\n    echo \n}\n\n# 复制增补文件\nfunction copy_supplement_files() {\n    echo \"复制增补的文件 ... \"\n    echo \"===============================================================================\"\n    (\n        cd $TGT_ROOT\n        [ -n \"$DAEMON_JSON\" ] && [ -f $DAEMON_JSON ] && mkdir -p \"etc/docker\" && cp -v $DAEMON_JSON \"./etc/docker/daemon.json\"\n        [ -n \"$COREMARK\" ] && [ -f $COREMARK ] && [ -f \"etc/coremark.sh\" ] && \\\n              cp -fv $COREMARK \"./etc/coremark.sh\" && chmod 755 \"etc/coremark.sh\" && \\\n              rm -f ./etc/bench.log && \\\n              echo \"17 3 * * * /etc/coremark.sh\" >> ./etc/crontabs/root\n\n        #[ -n \"$TTYD\" ] && [ -f $TTYD ] && cp -v $TTYD etc/init.d/\n\n        [ -n \"$FLIPPY\" ] && [ -f $FLIPPY ] && cp -v $FLIPPY ./usr/sbin/\n        [ -n \"$OPENWRT_INSTALL\" ] && [ -f ${OPENWRT_INSTALL} ] && cp -v ${OPENWRT_INSTALL} ./usr/sbin/ && \\\n              (cd root && ln -s ../usr/sbin/openwrt-install-amlogic ./install-to-emmc.sh)\n        [ -n \"$OPENWRT_KERNEL\" ] && [ -f ${OPENWRT_KERNEL} ] && cp -v ${OPENWRT_KERNEL} ./usr/sbin/\n        [ -n \"$OPENWRT_BACKUP\" ] && [ -f ${OPENWRT_BACKUP} ] && cp -v ${OPENWRT_BACKUP} ./usr/sbin/ && (cd usr/sbin && ln -sfv openwrt-backup flippy)\n        [ -n \"$OPENWRT_UPDATE\" ] && [ -f ${OPENWRT_UPDATE} ] && cp -v ${OPENWRT_UPDATE} ./usr/sbin/\n\t[ -n \"${DDBR}\" ] && [ -f \"${DDBR}\" ] && cp -v ${DDBR} ./usr/sbin/\n\n        # 我家云, rock5b 风扇调速脚本\n        if [ \"$PLATFORM\" == \"rockchip\" ];then\n\t    if [ \"$SOC\" == \"rk3328\" ] && [ \"$BOARD\" == \"l1pro\" ] && [ -f \"$PWM_FAN\" ];then\n                echo \"该机型有pwm风扇接口，故添加风扇调速脚本 ... \"\n                cp -v $PWM_FAN ./usr/bin\n                echo \"pwm_fan\" > ./etc/modules.d/pwm_fan\n                sed -e \"/exit/i\\/usr/bin/pwm-fan.pl &\" -i etc/rc.local\n                echo \"完成\"\n            fi\n\t    if [ \"$SOC\" == \"rk3588\" ] && [ \"$BOARD\" == \"rock5b\" ] && [ -f \"$PWM_FAN\" ];then\n                echo \"该机型有pwm风扇接口，故添加风扇调速脚本 ... \"\n                cp -v $PWM_FAN ./usr/bin\n                echo \"pwm_fan\" > ./etc/modules.d/pwm_fan\n                sed -e \"/exit/i\\/usr/bin/pwm-fan.pl &\" -i etc/rc.local\n                echo \"完成\"\n            fi\n\t    if [ \"$SOC\" == \"rk3588s\" ] && [ \"$BOARD\" == \"rock5c\" ] && [ -f \"$PWM_FAN\" ];then\n                echo \"该机型有pwm风扇接口，故添加风扇调速脚本 ... \"\n                cp -v $PWM_FAN ./usr/bin\n                echo \"pwm_fan\" > ./etc/modules.d/pwm_fan\n                sed -e \"/exit/i\\/usr/bin/pwm-fan.pl &\" -i etc/rc.local\n                echo \"完成\"\n            fi\n        fi\n\n\t# ZIMO Zcube1 max 呼吸灯\n        if [ \"$BOARD\" == \"zcube1-max\" ] && [ -n \"${BREATHING_LIGHT}\" ] && [ -f \"${BREATHING_LIGHT}\" ];then\n            echo \"该机型有一组呼吸灯，故添加呼吸灯后台服务 ... \"\n            cp -v ${BREATHING_LIGHT} ./usr/bin/breath_led\n            sed -e \"/exit/i\\/usr/bin/breath_led &\" -i etc/rc.local\n            echo \"完成\"\n        fi\n\n        [ -n \"$BAL_ETH_IRQ\" ] && [ -f $BAL_ETH_IRQ ] && cp -v $BAL_ETH_IRQ ./usr/sbin && chmod 755 ./usr/sbin/balethirq.pl && \\\n              sed -e \"/exit/i\\/usr/sbin/balethirq.pl\" -i etc/rc.local\n\n        [ -n \"$BAL_CONFIG\" ] && [ -f $BAL_CONFIG ] && cp -v $BAL_CONFIG etc/\n\n\t[ -n \"${BALANCE_IRQ_HOME}\" ] && [ -d \"${BALANCE_IRQ_HOME}\" ] && cp -av \"${BALANCE_IRQ_HOME}\"/* .\n\n        [ -f \"./etc/init.d/cpufreq\" ] && [ -n \"$CPUFREQ_INIT\" ] && [ -f $CPUFREQ_INIT ] && cp -v $CPUFREQ_INIT etc/init.d/ && chmod 755 etc/init.d/cpufreq\n        [ -n \"$WIRELESS_CONFIG\" ] && [ -f $WIRELESS_CONFIG ] && cp -v $WIRELESS_CONFIG etc/config/\n        [ -n \"$FIX_CPU_FREQ\" ] && [ -f $FIX_CPU_FREQ ] && cp -v $FIX_CPU_FREQ ./usr/sbin && chmod 755 ./usr/sbin/fixcpufreq.pl\n        [ -n \"$SYSFIXTIME_PATCH\" ] && [ -f $SYSFIXTIME_PATCH ] && patch -p1 < $SYSFIXTIME_PATCH\n        [ -n \"$NETWORK_SERVICE_PATCH\" ] && [ -f $NETWORK_SERVICE_PATCH ] && patch -p1 < $NETWORK_SERVICE_PATCH\n\tpatch_netdata\n\tpatch_cgroupfs_mount\n        [ -n \"$FORCE_REBOOT\" ] && [ -f $FORCE_REBOOT ] && cp -v $FORCE_REBOOT usr/sbin/ \n\n        [ -n \"$GET_RANDOM_MAC\" ] && [ -f ${GET_RANDOM_MAC} ] && cp -v ${GET_RANDOM_MAC} ./usr/bin/\n        [ -n \"$MAC_SCRIPT1\" ] && [ -f $MAC_SCRIPT1 ] && cp -v $MAC_SCRIPT1 ./usr/bin/\n        [ -n \"$MAC_SCRIPT2\" ] && [ -f $MAC_SCRIPT2 ] && cp -v $MAC_SCRIPT2 ./usr/bin/\n        [ -n \"$MAC_SCRIPT3\" ] && [ -f $MAC_SCRIPT3 ] && cp -v $MAC_SCRIPT3 ./usr/bin/\n\n        [ -n \"$CPUSTAT_SCRIPT\" ] && [ -f $CPUSTAT_SCRIPT ] && cp -v $CPUSTAT_SCRIPT ./usr/bin/cpustat && chmod 755 ./usr/bin/cpustat  \n        [ -n \"$GETCPU_SCRIPT\" ] && [ -f $GETCPU_SCRIPT ] && cp -v $GETCPU_SCRIPT ./bin/\n        [ -n \"$SYSINFO_SCRIPT\" ] && [ -x ./bin/bash ] && [ -f \"${SYSINFO_SCRIPT}\" ] && cp -v \"${SYSINFO_SCRIPT}\" ./etc/profile.d/ && \\\n             sed -e \"s/\\/bin\\/ash/\\/bin\\/bash/\" -i ./etc/passwd && sed -e \"s/\\/bin\\/ash/\\/bin\\/bash/\" -i ./usr/libexec/login.sh\n        \n        [ -n \"$BOARD_HOME\" ] && [ -d $BOARD_HOME ] && cp -v $BOARD_HOME/* ./etc/board.d/\n\n\tif [ -n \"${RGB_HOME}\" ] && [ -d ${RGB_HOME} ];then\n             cp -av ${RGB_HOME}/* ./\n\t     # rgb custom config file\n\t     if [ -n \"${RGB_CONFIG}\" ] && [ -f \"${RGB_CONFIG}\" ];then\n                 cp -v ${RGB_CONFIG} ./etc/config/rgb\n             fi\n        fi\n\n        [ -f ./etc/sysupgrade.conf ] && \\\n             cat >> ./etc/sysupgrade.conf <<EOF\n/root/.ssh/\nEOF\n\n        if [ -n \"${P7ZIP}\" ] && [ -f \"$P7ZIP\" ];then\n             rm -rf ./usr/lib/opkg/info/p7zip* ./usr/lib/p7zip ./usr/bin/7z\n\t     cp -v \"${P7ZIP}\" ./usr/bin/7z && chmod 755 ./usr/bin/7z\n        fi\n    )\n    echo \"===============================================================================\"\n    echo \"完成\"\n    echo\n}\n\nfunction extract_glibc_programs() {\n    echo -n \"释放基于 glibc 的增补程序包 ... \"\n    (\n        cd $TGT_ROOT\n        if [ -f \"$SS_LIB\" ];then\n            ( cd ./lib && tar xJf \"$SS_LIB\" )\n            ( [ -n \"$JQ\" ] && [ -f \"$JQ\" ] && [ ! -f \"./usr/bin/jq\" ] && cp ${JQ} ./usr/bin/jq )\n            [ -n \"$SS_BIN\" ] && [ -f \"$SS_BIN\" ] && \\\n                 (   cd ./usr/bin \n                     mkdir -p ss-bin-musl && mv -f ss-server ss-redir ss-local ss-tunnel ss-bin-musl/ 2>/dev/null\n                     tar xJf \"$SS_BIN\"\n                 )\n        fi\n    )\n    echo \"完成\"\n    echo\n}\n\n# 调整 openssh 配置\nfunction adjust_openssh_config() {\n    echo \"调整 openssh 配置 ...\"\n    echo \"===============================================================================\"\n    (\n        cd $TGT_ROOT\n        sed -e 's/root::/root:$1$NA6OM0Li$99nh752vw4oe7A.gkm2xk1:/' -i ./etc/shadow\n        if [ -f \"./etc/ssh/sshd_config\" ];then\n            echo -n \"配置 sshd_config, 允许 root 用户登录 ... \"\n            sed -e \"s/#PermitRootLogin prohibit-password/PermitRootLogin yes/\" -i ./etc/ssh/sshd_config 2>/dev/null\n            sed -e \"s/#PermitRootLogin no/PermitRootLogin yes/\" -i ./etc/ssh/sshd_config 2>/dev/null\n\t    echo \"完成 \"\n\t    if [ \"$SSH_CIPHERS\" != \"\" ];then\n                echo -n \"优化 ssh client ciphers ... \"\n\t\techo \"Host *\" >> ./etc/ssh/ssh_config\n\t\techo \"    Ciphers $SSH_CIPHERS\" >> ./etc/ssh/ssh_config\n\t\techo \"完成\"\n\t    fi\n\t    if [ \"$SSHD_CIPHERS\" != \"\" ];then\n                echo -n \"优化 ssh server ciphers ... \"\n                sed -e \"/# Ciphers and keying/a\\Ciphers $SSHD_CIPHERS\" -i ./etc/ssh/sshd_config 2>/dev/null\n\t\techo \"完成\"\n\t    fi\n\t    echo \"#HostkeyAlgorithms +ssh-rsa\" >> ./etc/ssh/sshd_config\n\t    echo \"#PubkeyAcceptedAlgorithms +ssh-rsa\" >> ./etc/ssh/sshd_config\n\t    echo -n \"配置 shadow, 刷新密码更新日期 ... \"\n            utc_secs=$(date +%s)\n            days=$(( utc_secs / 86400 ))\n            sed -e \"s/:0:0:99999:7:::/:${days}:0:99999:7:::/\" -i ./etc/shadow\n\t    echo \"完成\"\n            echo -n \"检查sshd用户和组 ... \"\n\t    if ! grep \"sshd:x:22:sshd\" ./etc/group >/dev/null;then\n                 echo \"sshd_x:22:sshd\" >> ./etc/group\n            fi\n\t    if ! grep \"sshd:x:22:22:sshd:\" ./etc/passwd >/dev/null;then\n                 echo \"sshd:x:22:22:sshd:/var/run/sshd:/bin/false\" >> ./etc/passwd\n            fi\n\t    if ! grep \"sshd:x:\" ./etc/shadow >/dev/null;then\n                 echo \"sshd:x:0:0:99999:7:::\" >> ./etc/shadow\n            fi\n\t    echo \"完成\"\n\t    \n\t    echo -n \"添加防火墙规则，丢弃目标为 WAN 区域, 端口为 22/TCP 的报文 ... \"\n\t    cat >> ./etc/config/firewall <<EOF\n\nconfig rule\n        option name 'drop-wan-ssh'\n        option src 'wan'\n        option dest 'wan'\n        option dest_port '22'\n        option proto 'tcp'\n        option target 'DROP'\n\nEOF\n            echo \"完成\"\n        else\n            echo \"未发现 openssh 配置文件， 放弃调整\"\n        fi\n    )\n    echo \"===============================================================================\"\n    echo\n}\n\n# 调整 samba server 配置\nfunction adjust_samba_config() {\n    echo \"调整 samba server 配置 ...\"\n    (\n         # for cifsd\n         if [ -f ./etc/init.d/cifsd ];then\n             echo -n \"发现 cifsd, 禁用 samba4. \"        \n             rm -f ./etc/rc.d/S98samba4\n         fi\n          # for smbd\n         if [ -f ./etc/init.d/smbd ];then\n             echo -n \"发现 smbd, 禁用 samba4. \"        \n             rm -f ./etc/rc.d/S98samba4\n         fi                \n         # for ksmbd\n         if [ -f ./etc/init.d/ksmbd ];then\n             echo -n \"发现 ksmbd, 禁用 samba4. \"        \n             rm -f ./etc/rc.d/S98samba4\n             sed -e 's/modprobe ksmbd/sleep 1 \\&\\& modprobe ksmbd/' -i ./etc/init.d/ksmbd\n         fi\n         # for samba4 enable smbv1 protocol\n         if [ -f ./etc/config/samba4 ];then\n             echo \"发现 samba4, 将启用 smbv1 协议. \"        \n             sed -e 's/services/nas/g' -i ./usr/lib/lua/luci/controller/samba4.lua\n\t     sed -e 's/services/nas/g' -i ./usr/share/luci/menu.d/luci-app-samba4.json\n\n             [ -f ${SMB4_PATCH} ] && patch -p1 < ${SMB4_PATCH}\n         fi\n    )\n    echo \"完成\"\n    echo\n}\n\n# 调整 nfs server 配置\nfunction adjust_nfs_config() {\n    local mount_point=$1\n    [ -z \"$mount_point\" ] && return\n    echo \"调整 nfs server 配置 ... \"\n    (\n        # for nfs server\n        if [ -f ./etc/init.d/nfsd ];then\n            echo -n \"已发现 nfsd 服务, 将调整其初始配置文件 ... \"\n            cat > ./etc/exports <<EOF\n# /etc/exports: the access control list for filesystems which may be exported\n#               to NFS clients.  See exports(5).\n#\n# Example for NFSv2 and NFSv3:\n# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)\n#\n# Example for NFSv4:\n# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)\n# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)\n#\n\n/mnt *(ro,fsid=0,sync,nohide,no_subtree_check,insecure,no_root_squash)\n/mnt/${mount_point} *(rw,fsid=1,sync,no_subtree_check,no_root_squash)\nEOF\n             cat > ./etc/config/nfs <<EOF\nconfig share\n        option clients '*'\n        option enabled '1'\n        option path '/mnt'\n        option options 'ro,fsid=0,sync,nohide,no_subtree_check,insecure,no_root_squash'\n\nconfig share\n        option enabled '1'\n        option path '/mnt/${mount_point}'\n        option clients '*'\n        option options 'rw,fsid=1,sync,no_subtree_check,no_root_squash'\nEOF\n        fi\n\n    )\n    echo \"完成, 初始 nfs 配置文件为：\"\n    echo \"===============================================================================\"\n    cat $TGT_ROOT/etc/config/nfs\n    echo \"===============================================================================\"\n    echo\n}\n\n# 调整 openclash 配置\nfunction adjust_openclash_config() {\n    echo -n \"调整 openclash 配置 ... \"\n    (\n        cd $TGT_ROOT\n        if [ -d ./etc/openclash/core ];then\n            mkdir -p ./usr/share/openclash/core && \\\n            cd ./etc/openclash && \\\n            mv core ../../usr/share/openclash/ && \\\n            ln -s ../../usr/share/openclash/core .\n            echo \"完成\"\n        else\n            echo \"未发现 openclash, 放弃调整\"\n        fi\n    )\n}\n\n# 调整 getty 配置\nfunction adjust_getty_config() {\n    echo -n \"调整 getty 配置 ...\"\n    (\n        cd $TGT_ROOT\n        case $PLATFORM in\n            allwinner)   cat > ./etc/inittab <<EOF\n::sysinit:/etc/init.d/rcS S boot\n::shutdown:/etc/init.d/rcS K shutdown\nttyS0::askfirst:/usr/libexec/login.sh\nEOF\n                         echo \"完成\"\n                         ;;\n             rockchip)   if [ \"${SOC}\" == rk3588 ];then\n                             cat > ./etc/inittab <<EOF\n::sysinit:/etc/init.d/rcS S boot\n::shutdown:/etc/init.d/rcS K shutdown\ntty1::askfirst:/usr/libexec/login.sh\nttyS2::askfirst:/usr/libexec/login.sh\nttyFIQ0::askfirst:/usr/libexec/login.sh\nEOF\n                         elif [ \"${SOC}\" == rk3528 ];then\n                             cat > ./etc/inittab <<EOF\n::sysinit:/etc/init.d/rcS S boot\n::shutdown:/etc/init.d/rcS K shutdown\ntty1::askfirst:/usr/libexec/login.sh\nttyS0::askfirst:/usr/libexec/login.sh\nttyFIQ0::askfirst:/usr/libexec/login.sh\nEOF\n                         else\n                             cat > ./etc/inittab <<EOF\n::sysinit:/etc/init.d/rcS S boot\n::shutdown:/etc/init.d/rcS K shutdown\ntty1::askfirst:/usr/libexec/login.sh\nttyS2::askfirst:/usr/libexec/login.sh\nttyFIQ0::askfirst:/usr/libexec/login.sh\nEOF\n                         fi\n                         echo \"完成\"\n                         ;;\n             amlogic)    cat > ./etc/inittab <<EOF\n::sysinit:/etc/init.d/rcS S boot\n::shutdown:/etc/init.d/rcS K shutdown\nttyAML0::askfirst:/usr/libexec/login.sh\ntty0::askfirst:/usr/libexec/login.sh\nEOF\n                         echo \"完成\"\n                         ;;\n             qemu-aarch64)    cat > ./etc/inittab <<EOF\n::sysinit:/etc/init.d/rcS S boot\n::shutdown:/etc/init.d/rcS K shutdown\ntty1::askfirst:/usr/libexec/login.sh\nttyAMA0::askfirst:/usr/libexec/login.sh\nEOF\n                         echo \"完成\"\n                         ;;\n                   *)    echo \"Platform: ${PLATFORM} 不受支持！放弃调整\"\n                         ;;\n        esac\n    )\n}\n\n# qbittorrent 配置调整\nfunction adjust_qbittorrent_config() {\n    echo -n \"调整 qbittorrent 配置 ... \"\n    (\n        cd $TGT_ROOT\n        if [ -f \"./etc/config/qbittorrent\" ];then\n            sed -e 's/\\/opt/\\/etc/' -i ./etc/config/qbittorrent\n            echo \"完成\"\n        else\n            echo \"未发现 qbittorrent 配置文件, 放弃调整\"\n        fi\n    )\n}\n\n# openssl 配置调整\nfunction adjust_openssl_config() {\n    echo \"调整 openssl 配置 ... \"\n    (\n        cd $TGT_ROOT\n        #if [ -f $SSL_CNF_PATCH ];then\n             #if patch -p1 < $SSL_CNF_PATCH;then\n                 #echo \"完成\"\n             #else\n                 #echo \"失败！请检查 $SSL_CNF_PATCH \"\n             #fi \n        #else\n            #echo \"未发现 openssl 配置文件，放弃调整\"\n        #fi\n\n\t# devcrypto engine 会导致 openssh 无法工作，禁用 (建议编译时不要选择此engine)\n\tif [ -f \"./etc/ssl/engines.cnf.d/devcrypto.cnf\" ];then\n             echo -n \"禁用 devcrypto 引擎 ... \"\n\t     rm -f ./etc/ssl/engines.cnf.d/devcrypto.cnf\n\t     # 清空 etc/config/openssl\n\t     > ./etc/config/openssl\n             echo \"完成\"\n        fi\n\n\t# 如果发现 afalg engine\n\tif [ -f \"./usr/lib/engines-1.1/afalg.so\" ] && [ -d \"./etc/ssl/engines.cnf.d\" ];then\n             echo -n \"添加 afalg 引擎 ... \"\n             grep \"engine 'afalg'\" \"./etc/config/openssl\" || cat >> ./etc/config/openssl <<EOF\n\nconfig engine 'afalg'\n        option enabled '1'\n\nEOF\n             [ -f \"./etc/ssl/engines.cnf.d/afalg.cnf\" ] || cat > ./etc/ssl/engines.cnf.d/afalg.cnf <<EOF\n[afalg]\n# Leave this alone and configure algorithms with CIPERS/DIGESTS below\ndefault_algorithms = ALL\n\n# The following commands are only available if using the alternative\n# (sync) AFALG engine\n# Configuration commands:\n# Run 'openssl engine -t -c -vv -pre DUMP_INFO devcrypto' to see a\n# list of supported algorithms, along with their driver, whether they\n# are hw accelerated or not, and the engine's configuration commands.\n\n# USE_SOFTDRIVERS: specifies whether to use software (not accelerated)\n# drivers (0=use only accelerated drivers, 1=allow all drivers, 2=use\n# if acceleration can't be determined) [default=2]\n#USE_SOFTDRIVERS = 2\n\n# CIPHERS: either ALL, NONE, NO_ECB (all except ECB-mode) or a\n# comma-separated list of ciphers to enable [default=NO_ECB]\n# Starting in 1.2.0, if you use a cipher list, each cipher may be\n# followed by a colon (:) and the minimum request length to use\n# AF_ALG drivers for that cipher; smaller requests are processed by\n# softare; a negative value will use the default for that cipher\n#CIPHERS=AES-128-CBC:1024, AES-256-CBC:768, DES-EDE3-CBC:0\n\n# DIGESTS: either ALL, NONE, or a comma-separated list of digests to\n# enable [default=NONE]\n# It is strongly recommended not to enable digests; their performance\n# is poor, and there are many cases in which they will not work,\n# especially when calling fork with open crypto contexts.  Openssh,\n# for example, does this, and you may not be able to login.\n#DIGESTS = NONE\nEOF\n             echo \"完成\"\n        fi\n    )\n    echo \"调整完成\"\n    echo\n}\n\n# docker 配置调整\nfunction adjust_docker_config() {\n    echo \"调整 docker server 配置 ... \"\n    (\n        cd $TGT_ROOT\n        [ -n \"$DOCKER_README\" ] && [ -f ./www/DockerReadme.pdf ] && [ -f ${DOCKER_README} ] && cp -fv ${DOCKER_README} ./www/DockerReadme.pdf\n        if [ -f ./etc/init.d/dockerd ];then\n            echo \"发现 dockerd 服务，正在调整 ... \"\n            [ -n \"$DOCKERD_PATCH\" ] && [ -f \"$DOCKERD_PATCH\" ] && [ ! -f ./etc/init.d/dockerman ] && patch -p1 < $DOCKERD_PATCH\n\n            if [ -f \"./etc/init.d/dockerman\" ] ;then\n                cat >> ./etc/config/dockerd <<EOF\n\nconfig globals 'globals'\n        option alt_config_file '/etc/docker/daemon.json' \n\toption auto_start '1'\nEOF\n                sed -e '/uci -q set dockerd.globals.auto_start=\"0\"/d' -i ./etc/uci-defaults/luci-app-dockerman \n            fi\n\n\t    # 由first_run.sh负责重新开启dockerd服务\n            echo \"默认关闭 dockerd 服务 ... \"\n            rm -f ./etc/rc.d/S??dockerd ./etc/rc.d/S??dockerman\n            echo \"完成\"\n        else\n            echo \"未发现 dockerd 服务，放弃调整\"\n        fi\n    )\n    echo\n}\n\n# mosdns 配置调整\nfunction adjust_mosdns_config() {\n    (\n    \tif [ -f ./etc/config/mosdns ];then\n            echo -n \"发现mosdns配置，正在调整 ... \"\n\t    sed -e \"s/option enabled '1'/option enabled '0'/\" -i ./etc/config/mosdns\n\t    sed -e \"s/option redirect '1'/option redirect '0'/\" -i ./etc/config/mosdns\n\t    sed -e \"s/option autoconf '1'/option autoconf '0'/\" -i ./etc/config/mosdns\n\t    echo \"完成\"\n        fi\n    )\n}\n\n# 用 xray 代替 v2ray (如果v2ray不存在)\nfunction use_xrayplug_replace_v2rayplug() {\n    (\n        cd $TGT_ROOT\n        if [ -f usr/bin/xray ] && [ ! -f usr/bin/v2ray ];then\n            echo -n \"用 xray 代替 v2ray ... \"\n            cd usr/bin && rm -f v2ray && ln -s xray v2ray\n            echo \"完成\"\n        fi\n\n        cd $TGT_ROOT\n        if [ -f usr/bin/xray-plugin ] && [ ! -f usr/bin/v2ray-plugin ];then\n            echo -n \"用 xray-plugin 代替 v2ray-plugin ... \"\n            cd usr/bin && rm -f v2ray-plugin && ln -s xray-plugin v2ray-plugin\n            echo \"完成\"\n        fi\n    )\n}\n\n# 配置 first run 程序\nfunction config_first_run() {\n    echo \"创建 [初次使用] 应用环境 ... \"\n    (\n         cd $TGT_ROOT\n         # First run, 第一次启动时自动创建新分区及格式化\n         if [ -n \"$FIRSTRUN_SCRIPT\" ] && [ -f \"$FIRSTRUN_SCRIPT\" ];then\n              cp -v \"$FIRSTRUN_SCRIPT\" ./etc/first_run.sh && \\\n                  sed -e \"s/MYSELF=\\$0/MYSELF=\\\"\\/etc\\/first_run.sh\\\"/\" -i ./etc/first_run.sh && \\\n                  chmod 755 ./etc/first_run.sh\n              cp -v \"./etc/rc.local\" \"./etc/rc.local.orig\"\n              echo -e \"${SKIP_MB}\\t${BOOT_MB}\\t${ROOTFS_MB}\" > ./etc/part_size\n              sed -e \"/exit/i\\/etc/first_run.sh >/root/first_run.log 2>&1\" -i etc/rc.local\n              echo \"完成\"\n          else\n              echo \"未发现相关依赖，跳过配置\"\n          fi\n\n    )\n    echo\n}\n\n# 调整 内核 环境\nfunction adjust_kernel_env() {\n    echo \"调整内核、硬件驱动等相关环境 ...\"\n    echo \"===============================================================================\"\n    (\n        cd $TGT_ROOT\n        local ps=\"${PLATFORM}_${SOC}\"\n        if [ -f etc/config/cpufreq ];then\n            echo \"设置 schedutil 为默认调度器\"\n            sed -e \"s/ondemand/schedutil/\" -i etc/config/cpufreq\n        fi\n\n        if [ -n \"$SYSCTL_CUSTOM_CONF\" ] && [ -f ${SYSCTL_CUSTOM_CONF} ];then\n            echo \"启用自定义的内核优化参数 ... \"\n            cp -v ${SYSCTL_CUSTOM_CONF} ./etc/sysctl.d/\n        fi\n\n        if [ -n \"${KMOD_BLACKLIST}\" ] && [ -f \"${KMOD_BLACKLIST}\" ];then\n            echo -n \"禁用黑名单中的内核模块 ... \"\n            [ -d ./etc/modules.d.remove ] || mkdir -p ./etc/modules.d.remove\n            local mod_blacklist=$(cat ${KMOD_BLACKLIST})\n            for mod in $mod_blacklist ;do\n                 mv -f ./etc/modules.d/${mod} ./etc/modules.d.remove/ 2>/dev/null\n            done\n            echo \"完成\"\n        fi    \n\n\tif [ -n \"${MODULES_HOME}\" ] && [ -d \"${MODULES_HOME}\" ];then\n            echo \"启用自定义的 soc 内核模块 ... \"\n\t    cp -v ${MODULES_HOME}/* ./etc/modules.d/\n            echo \"完成\"\n        fi\n\n\tif [ -n \"${BOARD_MODULES_HOME}\" ] && [ -d \"${BOARD_MODULES_HOME}\" ];then\n            echo \"启用自定义的 board 内核模块 ... \"\n\t    cp -v ${BOARD_MODULES_HOME}/* ./etc/modules.d/\n            echo \"完成\"\n        fi\n\n        case $ps in \n            allwinner_h6|rockchip_rk3328|rockchip_rk3568|rockchip_rk3588) \n                echo -n \"当前机型并未内置 broadcom 无线模块, 禁用 brcmfmac 驱动 ... \"\n                mv -f ./etc/modules.d/brcm* ./etc/modules.d.remove/ 2>/dev/null\n                echo \"完成\"\n                ;;\n            amlogic_*) \n                if [ $K510 -eq 1 ];then\n                    # 高版本内核下，如果ENABLE_WIFI_K510 = 0 则禁用wifi\n                    if [ $ENABLE_WIFI_K510 -eq 0 ];then\n                         echo \"禁用了 brcmfmac 内置无线网卡驱动, 如需开启, 请设置 ENABLE_WIFI_K510=1 并重新打包\"\n                         mv -f ./etc/modules.d/brcm*  ./etc/modules.d.remove/ 2>/dev/null\n                    else\n                         echo \"brcmfmac\" > ./etc/modules.d/brcmfmac\n                         echo \"brcmutil\" > ./etc/modules.d/brcmutil\n                         echo \"已启用 brcmfmac 驱动，如果机内有 broadcom 模块的话，就可以开启wifi功能\" \n                    fi\n                else\n                    # 低版本内核下，如果ENABLE_WIFI_K504 = 0 则禁用wifi\n                    if [ $ENABLE_WIFI_K504 -eq 0 ];then\n                        echo \"禁用了 brcmfmac 内置无线网卡驱动, 如需开启, 请设置 ENABLE_WIFI_K504=1 并重新打包\"\n                        mv -f ./etc/modules.d/brcm*  ./etc/modules.d.remove/ 2>/dev/null\n                    else\n                        echo \"brcmfmac\" > ./etc/modules.d/brcmfmac\n                        echo \"brcmutil\" > ./etc/modules.d/brcmutil\n                        echo \"已启用 brcmfmac 驱动，如果机内有 broadcom 模块的话，就可以开启wifi功能\" \n                    fi\n                fi\n                ;;\n            *)  echo \"跳过\"\n                ;;\n        esac \n             \n        echo -n \"启用 USB AX88179 网卡驱动 ... \"\n        [ -f ./etc/modules.d/usb-net-asix-ax88179 ] || echo \"ax88179_178a\" > ./etc/modules.d/usb-net-asix-ax88179\n        echo \"完成\"\n\n        echo -n \"启用 USB RTL8152/8153/8156 网卡驱动 ... \"\n        [ -f ./etc/modules.d/usb-net-rtl8152 ] || echo \"r8152\" > ./etc/modules.d/usb-net-rtl8152\n        echo \"完成\"\n\n        echo -n \"启用 USB Realtek RTL8188EU 无线网卡驱动 ... \"\n        echo \"r8188eu\" > ./etc/modules.d/rtl8188eu\n        echo \"完成\"\n        echo \"  *** 是否可用请自行测试\"\n\n        echo -n \"启用 USB Ralink 无线网卡驱动  ... \"\n        echo \"rt2500usb\" > ./etc/modules.d/rt2500-usb\n        echo \"rt2800usb\" > ./etc/modules.d/rt2800-usb\n        echo \"rt2x00usb\" > ./etc/modules.d/rt2x00-usb\n        echo \"完成\"\n        echo \"  *** 如果有 Ralink rt2xxx/rt3xxx/rt5xxx 系列USB无线网卡的话，插上基本能用\"\n\n        echo -n \"启用 USB Mediatek 无线网卡驱动  ... \"\n        echo \"mt7601u\" > ./etc/modules.d/mt7601u\n        echo \"mt7663u\" > ./etc/modules.d/mt7663u\n        echo \"mt76x0u\" > ./etc/modules.d/mt76x0u\n        echo \"mt76x2u\" > ./etc/modules.d/mt76x2u\n        echo \"完成\"\n        echo \"  *** 如果有 Mediatek mt7601u/mt7610u/mt7612u/mt7663u 系列USB无线网卡的话，插上基本能用\"\n\n        echo -n \"启用看门狗驱动 ... \"\n        case $PLATFORM in \n            allwinner) echo \"sunxi_wdt\" > ./etc/modules.d/watchdog\n                       echo \"完成\"\n                       ;;\n             rockchip) echo \"dw_wdt\" > ./etc/modules.d/watchdog\n                       echo \"完成\"\n                       ;;\n              amlogic) echo meson_gxbb_wdt > ./etc/modules.d/watchdog\n                       echo \"完成\"\n                       ;;\n                    *) echo \"跳过\";;\n        esac \n\n        if [ -n \"${SND_MOD}\" ] && [ -f ./etc/config/shairport-sync ] && [ -f ${SND_MOD} ];then\n            echo -n \"启用声卡驱动 ... \"\n            cp ${SND_MOD} ./etc/modules.d/\n            echo \"完成\"\n        fi\n\n        if [ \"$PLATFORM\" == \"amlogic\" ];then\n            echo -n \"启用 GPU 驱动 ... \"\n            echo \"panfrost\" > ./etc/modules.d/panfrost\n            echo \"完成\"\n            echo -n \"启用 PWM 驱动 ... \"\n            echo \"pwm_meson\" > ./etc/modules.d/pwm_meson\n            echo \"完成\"\n        fi\n\n        if [ \"$SOC\" == \"rk3568\" ] || [ \"$SOC\" == \"rk3566\" ];then\n            echo -n \"启用 GPU 驱动 ... \"\n            echo \"panfrost\" > ./etc/modules.d/panfrost\n            echo \"完成\"\n        fi\n    )\n    echo \"===============================================================================\"\n    echo \"完成\"\n    echo\n}\n\n# 复制 u-boot 到文件系统\nfunction copy_uboot_to_fs() {\n    (\n        cd $TGT_ROOT\n        if [ \"$BOARD\" == \"vplus\" ] && [ -n \"${UBOOT_BIN}\" ] && [ -f ${UBOOT_BIN} ];then\n            echo \"检测到 vplus 机型，正在把 u-boot 相关文件写入到 /lib/u-boot目录中备用 ... \"\n            mkdir -p ./lib/u-boot\n            cp -v ${UBOOT_BIN} ./lib/u-boot/\n            cp -v ${WRITE_UBOOT_SCRIPT} ./lib/u-boot/\n            echo \"完成\"\n        fi\n\n        if [ \"$PLATFORM\" == \"amlogic\" ] && [ -n \"$FIP_HOME\" ] && [ -d \"${FIP_HOME}\" ];then\n            echo \"检测到 amlogic 平台，正在把主线 u-boot 相关文件写入到 /lib/u-boot 目录中备用 ... \"\n            mkdir -p ./lib/u-boot\n            cp -v \"${FIP_HOME}\"/../*.sh lib/u-boot/\n            cp -v \"${FIP_HOME}\"/*.sd.bin lib/u-boot/\n            echo \"完成\"\n        fi\n\n        if [ \"$PLATFORM\" == \"amlogic\" ] && [ -n \"$BTLD_BIN\" ] && [ -f \"${BTLD_BIN}\" ];then\n            echo \"检测到 amlogic 平台，正在把安卓 u-boot 相关文件写入到 /lib/u-boot 目录中备用 ... \"\n            mkdir -p ./lib/u-boot\n            cp -v \"$BTLD_BIN\" lib/u-boot/\n            echo \"完成\"\n        fi\n    )\n    echo\n}\n\n# 写入 u-boot 到磁盘镜像\nfunction write_uboot_to_disk() {\n    (\n        if [ \"$PLATFORM\" == \"allwinner\" ] && [ -n \"$UBOOT_BIN\" ] && [ -f \"$UBOOT_BIN\" ];then\n            echo \"写入 bootloader ...\"\n\n            echo \"dd if=${UBOOT_BIN} of=${TGT_DEV} conv=fsync,notrunc bs=1024 seek=8\"\n\n            dd if=\"${UBOOT_BIN}\" of=\"${TGT_DEV}\" conv=fsync,notrunc bs=1024 seek=8\n\n            sync\n            echo \"完成\"\n        fi\n\n\t# rockchip的bootloader，统一从硬盘的第65个扇区开始至16MB这个范围\n        if [ \"$PLATFORM\" == \"rockchip\" ] && [ -n \"$BOOTLOADER_IMG\" ];then\n            echo \"写入 bootloader ...\"\n            local btld_home=${BOOTLOADER_IMG%/*}\n\t    if [ -f \"${btld_home}/idbloader.img\" ] && [ -f \"${btld_home}/u-boot.itb\" ];then\n                echo \"dd if=${btld_home}/idbloader.img of=${TGT_DEV} conv=fsync,notrunc bs=512 seek=64\"\n                dd if=${btld_home}/idbloader.img of=${TGT_DEV} conv=fsync,notrunc bs=512 seek=64\n                echo \"dd if=${btld_home}/u-boot.itb of=${TGT_DEV} conv=fsync,notrunc bs=512 seek=16384\"\n                dd if=${btld_home}/u-boot.itb of=${TGT_DEV} conv=fsync,notrunc bs=512 seek=16384\n\t    elif [ -f \"$BOOTLOADER_IMG\" ];then\n                echo \"dd if=${BOOTLOADER_IMG} of=${TGT_DEV} conv=fsync,notrunc bs=512 skip=64 seek=64\"\n                dd if=${BOOTLOADER_IMG} of=${TGT_DEV} conv=fsync,notrunc bs=512 skip=64 seek=64\n\t    else\n                echo \"未发现可用的 bootload, 固件可能无法引导！\"\n            fi\n            sync\n\n            echo \"完成\"\n        fi\n\n        if [ \"$PLATFORM\" == \"amlogic\" ] && [ -n \"$UBOOT_WITH_FIP\" ] && [ -f \"$UBOOT_WITH_FIP\" ];then\n            echo \"写入 bootloader ...\"\n            echo \"dd if=${UBOOT_WITH_FIP}  of=${TGT_DEV} conv=fsync,notrunc bs=512 skip=1 seek=1\"\n            echo \"dd if=${UBOOT_WITH_FIP}  of=${TGT_DEV} conv=fsync,notrunc bs=1 count=444\"\n\n            dd if=${UBOOT_WITH_FIP}  of=${TGT_DEV} conv=fsync,notrunc bs=512 skip=1 seek=1\n            dd if=${UBOOT_WITH_FIP}  of=${TGT_DEV} conv=fsync,notrunc bs=1 count=444\n\n            sync\n            echo \"完成\"\n        fi\n    )\n    echo\n}\n\n# 对btrfs格式的 rootfs 创建 etc 快照\nfunction create_snapshot() {\n    local snapshot_name=$1\n    fstype=$(lsblk -o MOUNTPOINT,FSTYPE ${TGT_DEV} | grep \"${TGT_ROOT}\" | gawk '{print $2}')\n    #if [ \"$fstype\" != \"btrfs\" ];then\n    #    return\n    #fi\n    (\n        cd $TGT_ROOT\n        echo \"创建初始快照: /etc -> /.snapshots/${snapshot_name}\"\n        mkdir -p .snapshots && \\\n        btrfs subvolume snapshot -r etc .snapshots/${snapshot_name}\n\tsync\n        echo \"完成\"\n        echo\n    )\n}\n\n# 清理环境\nfunction clean_work_env() {\n    echo -n \"清理环境 ... \"\n    detach_loopdev\n    sync\n    echo \"完成\"\n    echo\n}\n\n# 添加自定义的uci_defaults项\nfunction append_custom_uci_defaults_command {\n    if [ ! -d \"$TGT_ROOT/etc/uci-defaults\" ];then\n        return\n    fi\n    local cmd\n    while :;do\n\tcmd=$1\n\tif [ \"$cmd\" == \"\" ];then\n            break\n\tfi\n\t( cd $TGT_ROOT/etc/uci-defaults\n\t  if [ ! -f zzz_custom_settings ];then\n              echo -e \"#!/bin/sh\\n\" > zzz_custom_settings\n              chmod 755 zzz_custom_settings\n          fi\n\t  echo -e \"${cmd}\\n\" >> zzz_custom_settings\n\t)\n\tshift\n    done\n    echo \"zzz_custom_settings: ======\"\n    cat \"$TGT_ROOT/etc/uci-defaults/zzz_custom_settings\"\n    echo \"===========================\"\n\n}\n\n# 导出LXC rootfs 镜像\nfunction archive_lxc_rootfs {\n    if [ -n \"$TGT_LXC_ROOTFS\" ];then\n        local lxc_ext\n\tlocal compress_progress\n\n        echo \"===============================================================================\"\n        echo \"制作 LXC 容器镜像 ...\"\n\n\tcase $LXC_ROOTFS_COMPRESS in\n            gzip) lxc_ext=\".gz\"\n\t\t  if which pigz;then\n\t\t      compress_prog=\"| pigz\"\n\t\t  else\n\t\t      compress_prog=\"| gzip\"\n\t\t      echo \"小知识： 对于 gzip 压缩算法， 可以安装并发版的 pigz 应用程序来加速压缩\"\n\t\t  fi\n\t\t  ;;\n\t    zstd) lxc_ext=\".zst\"\n\t\t  compress_prog=\"| zstd\"\n\t\t  ;;\n\t      xz) lxc_ext=\".xz\"\n\t\t  echo \"由于采用了 xz 压缩算法，制作时间会很长，请耐心等待 ... \"\n\t\t  compress_prog=\"| xz -T 0\"\n\t\t  ;;\n\t       *) lxc_ext=\"\"\n\t\t  compress_prog=\"\"\n\t\t  ;;\n        esac\n\n        (\n           cd ${TGT_ROOT}\n           eval tar --exclude=\"lib/firmware/*\" \\\n\t            --exclude=\"lib/modules/*\" \\\n\t\t    --exclude=\"boot/*\" \\\n\t\t    --exclude=\".snapshots\" \\\n\t\t    -cf - . \\\n\t            $compress_prog > ${TGT_LXC_ROOTFS}${lxc_ext}\n        )\n\n        echo \"制作完成, LXC 容器镜像是 ${TGT_LXC_ROOTFS}${lxc_ext}\"\n        echo \"===============================================================================\"\n    fi\n}\n"
        },
        {
          "name": "qemu-aarch64.env",
          "type": "blob",
          "size": 2.7880859375,
          "content": "#!/bin/bash\n\nDIRNAME=$(dirname $0)\ncd $DIRNAME\nexport WORK_HOME=${PWD}\n\nsource make.env\n####  以下变量可从外部引入\n[ -z \"$SKIP_MB\" ] &&  SKIP_MB=16\n[ -z \"$BOOT_MB\" ] &&  BOOT_MB=16\n[ -z \"$ROOTFS_MB\" ] && ROOTFS_MB=1024\n[ -z \"$QCOW2_MB\" ] && QCOW2_MB=\"+15328M\"\nexport SKIP_MB BOOT_MB ROOTFS_MB QCOW2_MB\n####  End 以上变量可从外部引入\n\nexport EFI=1\n# gpu分区最末需要1MB保留空间\nexport TAIL_MB=1\nexport PLATFORM=qemu-aarch64\nexport SOC=generic\nexport BOARD=vm\nexport SUBVER=$1\n\n# patches、scripts\n####################################################################\nREGULATORY_DB=\"${WORK_HOME}/files/regulatory.db.tar.gz\"\nCPUSTAT_SCRIPT=\"${WORK_HOME}/files/cpustat\"\nCPUSTAT_SCRIPT_PY=\"${WORK_HOME}/files/cpustat.py\"\nINDEX_PATCH_HOME=\"${PWD}/files/index.html.patches.qemu-aarch64\"\nGETCPU_SCRIPT=\"${WORK_HOME}/files/getcpu\"\nKMOD=\"${WORK_HOME}/files/kmod\"\nKMOD_BLACKLIST=\"${WORK_HOME}/files/qemu-aarch64/kmod_blacklist\"\n\nFIRSTRUN_SCRIPT=\"${WORK_HOME}/files/first_run.sh\"\n\nDAEMON_JSON=\"${WORK_HOME}/files/qemu-aarch64/daemon.json\"\n\nTTYD=\"${WORK_HOME}/files/ttyd\"\nFLIPPY=\"${WORK_HOME}/files/scripts_deprecated/flippy_cn\"\nBANNER=\"${WORK_HOME}/files/banner\"\n\n# 20200314 add\nFMW_HOME=\"${WORK_HOME}/files/firmware\"\nSMB4_PATCH=\"${WORK_HOME}/files/smb4.11_enable_smb1.patch\"\nSYSCTL_CUSTOM_CONF=\"${WORK_HOME}/files/99-custom.conf\"\n\n# 20200709 add\nCOREMARK=\"${WORK_HOME}/files/coremark.sh\"\n\n# 20201026 add\nFIX_CPU_FREQ=\"${WORK_HOME}/files/qemu-aarch64/fixcpufreq.pl\"\nSYSFIXTIME_PATCH=\"${WORK_HOME}/files/qemu-aarch64/sysfixtime.patch\"\n\n# 20201128 add\nSSL_CNF_PATCH=\"${WORK_HOME}/files/openssl_engine.patch\"\n\n# 20210307 add\nSS_LIB=\"${WORK_HOME}/files/ss-glibc/lib-glibc.tar.xz\"\nSS_BIN=\"${WORK_HOME}/files/ss-glibc/armv8a_crypto/ss-bin-glibc.tar.xz\"\nJQ=\"${WORK_HOME}/files/jq\"\n\n# 20210330 add\nDOCKERD_PATCH=\"${WORK_HOME}/files/dockerd.patch\"\n\n# 20200416 add\nFIRMWARE_TXZ=\"${WORK_HOME}/files/firmware_armbian.tar.xz\"\nBOOTFILES_HOME=\"${WORK_HOME}/files/bootfiles/qemu-aarch64\"\n\n# 20210618 add\nDOCKER_README=\"${WORK_HOME}/files/DockerReadme.pdf\"\n\n# 20210704 add\nSYSINFO_SCRIPT=\"${WORK_HOME}/files/qemu-aarch64/30-sysinfo.sh\"\nFORCE_REBOOT=\"${WORK_HOME}/files/qemu-aarch64/reboot\"\n\n# 20210923 add\nOPENWRT_BACKUP=\"${WORK_HOME}/files/openwrt-backup\"\nOPENWRT_KERNEL=\"${WORK_HOME}/files/openwrt-kernel\"\nOPENWRT_UPDATE=\"${WORK_HOME}/files/openwrt-update-kvm\"\n# 20211214 add\nP7ZIP=\"${WORK_HOME}/files/7z\"\n# 20211217 add\nDDBR=\"${WORK_HOME}/files/qemu-aarch64/openwrt-ddbr\"\n# 20220225 add\nSSH_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr,chacha20-poly1305@openssh.com\"\nSSHD_CIPHERS=\"aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\"\n\n# 20220801 add\nBALANCE_IRQ_HOME=\"${WORK_HOME}/files/qemu-aarch64/balance-irq\"\n####################################################################\n\n"
        },
        {
          "name": "sel",
          "type": "blob",
          "size": 0.208984375,
          "content": "#!/bin/bash\n\nsel=$1\nif [ \"$sel\" == \"\" ];then\n\techo \"Usage: $0  <select>\"\n\texit\nfi\n\nif [ -f src${sel}/openwrt-armvirt-64-default-rootfs.tar.gz ];then\n\tln -sf src${sel}/openwrt-armvirt-64-default-rootfs.tar.gz .\nfi\n\n"
        }
      ]
    }
  ]
}