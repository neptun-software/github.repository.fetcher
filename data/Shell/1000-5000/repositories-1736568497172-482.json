{
  "metadata": {
    "timestamp": 1736568497172,
    "page": 482,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bluesky-social/pds",
      "stars": 1755,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0126953125,
          "content": "node_modules\n"
        },
        {
          "name": "ACCOUNT_MIGRATION.md",
          "type": "blob",
          "size": 10.6591796875,
          "content": "# Account Migration \n\n### ⚠️ Warning ⚠️ ️\nAccount migration is a potentially destructive operation. Part of the operation involves signing away your old PDS's ability to make updates to your DID. If something goes wrong, you could be permanently locked out of your account, and Bluesky will not be able to help you recover it. \n\nTherefore, we do not recommend migrating your primary account yet. And we specifically recommend _against_ migrating your main account if you do not understand how PLC operations work.\n\nAlso, the Bluesky PDS is not currently accepting incoming migrations (it will in the future). Therefore this is currently a one-way street. If you migrate off of `bsky.social`, _you will not be able to return_. However, you will be able to migrate between other PDSs.\n\n![Diagram of account migration flow](https://raw.githubusercontent.com/bluesky-social/pds/main/assets/account-migration.png)\n\nAccount Migration occurs in 4 main steps:\n- Creating an account on the new PDS\n- Migrating data from the old PDS to the new PDS\n- Updating identity to point to the new PDS\n- Finalizing the migration\n\n\n### Creating an Account\n\nIn order to create an account, you first need to prove to the new PDS that you're in control of the DID that you're attempting to register as.\n\nTo do so, you need a JWT signed with the signing key associated with your DID. You can obtain this through calling `com.atproto.server.getServiceAuth` from your old PDS. If your old PDS is not willing to provide the authentication token, you will need to update your DID document to point to a signing key that you possess in order to mint an authentication token yourself.\n\nWith this JWT set as a Bearer token, you can then create an account on the new PDS by calling `com.atproto.server.createAccount`. You'll need to fulfill any challenges that the new PDS requires - such as an invite code. \n\nAfter creating an account, you'll have a signing key on the new PDS and an empty repository. Your account will be in a \"deactivated\" state such that it is not usable yet.\n\n### Migrating data\n\nNow that you have an account on the new PDS, you can start migrating data into it. After creating your account, you will have received an access token for the new PDS and it will be required for all incoming data.\n\nFirst, you can grab your entire repository in the form of a [CAR file](https://ipld.io/specs/transport/car/carv1/) by calling `com.atproto.sync.getRepo`. You can then upload those exact bytes to your new PDS through `com.atproto.repo.importRepo`. The new PDS will parse the CAR file, index all blocks and records, and sign a new commit for the repository.\n\nNext, you'll need to upload all relevant blobs. These can be discovered by calling `com.atproto.sync.listBlobs` on your old PDS. For each blob, you'll need to download the contents through `com.atproto.sync.getBlob` and upload them to your new PDS through `com.atproto.repo.uploadBlob`. \n\nFinally, you'll need to migrate private state. Currently the only private state held on your PDS is your preferences. You can migrate this by calling `app.bsky.actor.getPreferences` on your old PDS, and submitting the results to `app.bsky.actor.putPreferences` on your new PDS.\n\nAt any point during this process, you can check the status of your new account by calling `com.atproto.server.checkAccountStatus` which will inform you of your repo state, how many records are indexed, how many private state values are stored, how many blobs it is expecting (based on parsing records), and how many blobs have been uploaded. If you find you are missing blobs and are not sure which, you may use `com.atproto.repo.listMissingBlobs` on your new PDS to find them.\n\n### Updating identity\n\nAfter your data has been migrated to your new PDS, you'll need to update your DID to point to the correct credentials - handle, pds endpoint, signing key, and (if using a did:plc) the new PDS's rotation key.\n\nYou can fetch your new PDS's recommendations for these by calling `com.atproto.identity.getRecommendedDidCredentials`. If using a did:plc, we recommend taking this chance to generate a new rotation key and adding it to the list of recommended rotation keys that comes from your new PDS.\n\nIf using a did:plc (as most accounts are), you can then request a signed PLC operation from your old PDS by passing the credentials through to `com.atproto.identity.signPlcOperation`. However, since this is a sensitive and possibly destructive operation, you'll need to fulfill an email challenge. To do so, simply call `com.atproto.identity.requestPlcOperationSignature` and send the provided token along with your request for a signed operation.\n\nThe operation you receive has the capability to update your PLC identity. Of course, you may submit it yourself to `https://plc.directory`. However, we strongly encourage you to submit it through your new PDS at `com.atproto.identity.submitPlcOperation`. Your new PDS will check the operation to ensure that it does not get your account into a bad state. We also encourage you to check the operation yourself.\n\nIf you are using a did:web or if your old PDS is not cooperating, you will need to take care of updating your DID yourself, either by updating the `.well-known` endpoint for your did:web or by signing a PLC operation with a rotation key that you possess.\n\n### Finalizing the migration\n\nAfter your identity is updated, you're nearly ready to go!\n\nWe recommend doing a final check of `com.atproto.server.checkAccountStatus` to ensure that everything looks in order.\n\nAfter doing so, call `com.atproto.server.activateAccount` on your new PDS. It will ensure that your DID is set up correctly, activate your account, and send out events on its firehose noting that you updated your identity and published a new commit.\n\nAs a clean up step, you can deactivate or delete your account on your old PDS by calling `com.atproto.server.deleteAccount` or `com.atproto.server.deactivateAccount`. If doing the latter, you may provide an optional `deleteAfter` param that suggests to the server that it should hold onto your deactivated account until at least that date.\n\n### After migration\n\nAfter migrating, you should be good to start using the app as normal! You'll need to log out and log back in through your new PDS so that the client is talking to the correct service. It's possible that some services (such as feed generators) will have a stale DID cache and may not be able to accurately verify your auth tokens immediately. However, we've found that most services handle this gracefully, and those that don't should sort themselves out pretty quickly.\n\n\n## Example Code\n\nThe below Typescript code gives an example of how this account migration flow may function. Please note that it is for documentation purposes only and can not be run exactly as is as there is an out-of-band step where you need to get a confirmation token from your email.\n\nIt also does not handle some of the more advanced steps such as verifying a full import, looking for missing blobs, adding your own recovery key, or validating the PLC operation itself.\n\n```ts\nimport AtpAgent from '@atproto/api'\nimport { Secp256k1Keypair } from '@atproto/crypto'\nimport * as ui8 from 'uint8arrays'\n\nconst OLD_PDS_URL = 'https://bsky.social'\nconst NEW_PDS_URL = 'https://example.com'\nconst CURRENT_HANDLE = 'to-migrate.bsky.social'\nconst CURRENT_PASSWORD = 'password'\nconst NEW_HANDLE = 'migrated.example.com'\nconst NEW_ACCOUNT_EMAIL = 'migrated@example.com'\nconst NEW_ACCOUNT_PASSWORD = 'password'\nconst NEW_PDS_INVITE_CODE = 'example-com-12345-abcde'\n\nconst migrateAccount = async () => {\n  const oldAgent = new AtpAgent({ service: OLD_PDS_URL })\n  const newAgent = new AtpAgent({ service: NEW_PDS_URL })\n\n  await oldAgent.login({\n    identifier: CURRENT_HANDLE,\n    password: CURRENT_PASSWORD,\n  })\n\n  const accountDid = oldAgent.session?.did\n  if (!accountDid) {\n    throw new Error('Could not get DID for old account')\n  }\n\n  // Create account\n  // ------------------\n\n  const describeRes = await newAgent.api.com.atproto.server.describeServer()\n  const newServerDid = describeRes.data.did\n\n  const serviceJwtRes = await oldAgent.com.atproto.server.getServiceAuth({\n    aud: newServerDid,\n    lxm: 'com.atproto.server.createAccount',\n  })\n  const serviceJwt = serviceJwtRes.data.token\n\n  await newAgent.api.com.atproto.server.createAccount(\n    {\n      handle: NEW_HANDLE,\n      email: NEW_ACCOUNT_EMAIL,\n      password: NEW_ACCOUNT_PASSWORD,\n      did: accountDid,\n      inviteCode: NEW_PDS_INVITE_CODE,\n    },\n    {\n      headers: { authorization: `Bearer ${serviceJwt}` },\n      encoding: 'application/json',\n    },\n  )\n  await newAgent.login({\n    identifier: NEW_HANDLE,\n    password: NEW_ACCOUNT_PASSWORD,\n  })\n\n  // Migrate Data\n  // ------------------\n\n  const repoRes = await oldAgent.com.atproto.sync.getRepo({ did: accountDid })\n  await newAgent.com.atproto.repo.importRepo(repoRes.data, {\n    encoding: 'application/vnd.ipld.car',\n  })\n\n  let blobCursor: string | undefined = undefined\n  do {\n    const listedBlobs = await oldAgent.com.atproto.sync.listBlobs({\n      did: accountDid,\n      cursor: blobCursor,\n    })\n    for (const cid of listedBlobs.data.cids) {\n      const blobRes = await oldAgent.com.atproto.sync.getBlob({\n        did: accountDid,\n        cid,\n      })\n      await newAgent.com.atproto.repo.uploadBlob(blobRes.data, {\n        encoding: blobRes.headers['content-type'],\n      })\n    }\n    blobCursor = listedBlobs.data.cursor\n  } while (blobCursor)\n\n  const prefs = await oldAgent.api.app.bsky.actor.getPreferences()\n  await newAgent.api.app.bsky.actor.putPreferences(prefs.data)\n\n  // Migrate Identity\n  // ------------------\n\n  const recoveryKey = await Secp256k1Keypair.create({ exportable: true })\n  const privateKeyBytes = await recoveryKey.export()\n  const privateKey = ui8.toString(privateKeyBytes, 'hex')\n\n  await oldAgent.com.atproto.identity.requestPlcOperationSignature()\n\n  const getDidCredentials =\n    await newAgent.com.atproto.identity.getRecommendedDidCredentials()\n  const rotationKeys = getDidCredentials.data.rotationKeys ?? []\n  if (!rotationKeys) {\n    throw new Error('No rotation key provided')\n  }\n  const credentials = {\n    ...getDidCredentials.data,\n    rotationKeys: [recoveryKey.did(), ...rotationKeys],\n  }\n\n  // @NOTE, this token will need to come from the email from the previous step\n  const TOKEN = ''\n\n  const plcOp = await oldAgent.com.atproto.identity.signPlcOperation({\n    token: TOKEN,\n    ...credentials,\n  })\n\n  console.log(\n    `❗ Your private recovery key is: ${privateKey}. Please store this in a secure location! ❗`,\n  )\n\n  await newAgent.com.atproto.identity.submitPlcOperation({\n    operation: plcOp.data.operation,\n  })\n\n  // Finalize Migration\n  // ------------------\n\n  await newAgent.com.atproto.server.activateAccount()\n  await oldAgent.com.atproto.server.deactivateAccount({})\n}\n\n```\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.7802734375,
          "content": "FROM node:20.11-alpine3.18 as build\n\nRUN npm install -g pnpm\n\n# Move files into the image and install\nWORKDIR /app\nCOPY ./service ./\nRUN pnpm install --production --frozen-lockfile > /dev/null\n\n# Uses assets from build stage to reduce build size\nFROM node:20.11-alpine3.18\n\nRUN apk add --update dumb-init\n\n# Avoid zombie processes, handle signal forwarding\nENTRYPOINT [\"dumb-init\", \"--\"]\n\nWORKDIR /app\nCOPY --from=build /app /app\n\nEXPOSE 3000\nENV PDS_PORT=3000\nENV NODE_ENV=production\n# potential perf issues w/ io_uring on this version of node\nENV UV_USE_IO_URING=0\n\nCMD [\"node\", \"--enable-source-maps\", \"index.js\"]\n\nLABEL org.opencontainers.image.source=https://github.com/bluesky-social/pds\nLABEL org.opencontainers.image.description=\"AT Protocol PDS\"\nLABEL org.opencontainers.image.licenses=MIT\n"
        },
        {
          "name": "LICENSE-APACHE.txt",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT.txt",
          "type": "blob",
          "size": 1.01171875,
          "content": "MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 0.509765625,
          "content": "Dual MIT/Apache-2.0 License\n\nCopyright (c) 2022-2024 Bluesky PBC, and Contributors\n\nExcept as otherwise noted in individual files, this software is licensed under the MIT license (<http://opensource.org/licenses/MIT>), or the Apache License, Version 2.0 (<http://www.apache.org/licenses/LICENSE-2.0>).\n\nDownstream projects and end users may chose either license individually, or both together, at their discretion. The motivation for this dual-licensing is the additional software patent assurance provided by Apache 2.0.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.150390625,
          "content": "# PDS\n\nWelcome to the repository for the official Bluesky PDS (Personal Data Server). This repository includes container images and documentation designed to assist technical people with hosting a Bluesky PDS.\n\nHead over to the [AT Protocol PDS Admins Discord](https://discord.gg/e7hpHxRfBP) to chat with other folks hosting instances and get important updates about the PDS distribution!\n\n## Table of Contents\n\n<!-- markdown-toc -i README.md -->\n\n<!-- toc -->\n\n- [FAQ](#faq)\n  * [What is Bluesky?](#what-is-bluesky)\n  * [What is AT Protocol?](#what-is-at-protocol)\n  * [Where is the code?](#where-is-the-code)\n  * [What is the current status of federation?](#what-is-the-current-status-of-federation)\n- [Self-hosting PDS](#self-hosting-pds)\n  * [Preparation for self-hosting PDS](#preparation-for-self-hosting-pds)\n  * [Open your cloud firewall for HTTP and HTTPS](#open-your-cloud-firewall-for-http-and-https)\n  * [Configure DNS for your domain](#configure-dns-for-your-domain)\n  * [Check that DNS is working as expected](#check-that-dns-is-working-as-expected)\n  * [Installer on Ubuntu 20.04/22.04 and Debian 11/12](#installer-on-ubuntu-20042204-and-debian-1112)\n  * [Verifying that your PDS is online and accessible](#verifying-that-your-pds-is-online-and-accessible)\n  * [Creating an account using pdsadmin](#creating-an-account-using-pdsadmin)\n  * [Creating an account using an invite code](#creating-an-account-using-an-invite-code)\n  * [Using the Bluesky app with your PDS](#using-the-bluesky-app-with-your-pds)\n  * [Setting up SMTP](#setting-up-smtp)\n  * [Updating your PDS](#updating-your-pds)\n\n<!-- tocstop -->\n\n## FAQ\n\n### What is Bluesky?\n\nBluesky is a social media application built on AT Protocol.\n\nPlease visit the [Bluesky website](https://bsky.social/) for more information.\n\n### What is AT Protocol?\n\nThe Authenticated Transfer Protocol, aka atproto, is a protocol for large-scale distributed social applications.\n\nPlease visit the [AT Protocol docs](https://atproto.com/guides/overview) for additional information.\n\n### Where is the code?\n\n* [TypeScript code](https://github.com/bluesky-social/atproto/tree/main/packages/pds)\n* [Go code](https://github.com/bluesky-social/indigo)\n\n### What is the current status of federation?\n\nAs of Spring 2024, the AT Protocol network is open to federation!\n\n✅ Federated domain handles (e.g. `@nytimes.com`)\n\n✅ Federated feed generators (custom algorithms)\n\n✅ Federated relays (event firehose)\n\n✅ Federated app views (API service)\n\n✅ Federated data (PDS hosting)\n\n✅ Federated moderation (labeling)\n\n## Self-hosting PDS\n\nSelf-hosting a Bluesky PDS means running your own Personal Data Server that is capable of federating with the wider Bluesky social network.\n\n### Preparation for self-hosting PDS\n\nLaunch a server on any cloud provider, [Digital Ocean](https://digitalocean.com/) and [Vultr](https://vultr.com/) are two popular choices.\n\nEnsure that you can ssh to your server and have root access.\n\n**Server Requirements**\n* Public IPv4 address\n* Public DNS name\n* Public inbound internet access permitted on port 80/tcp and 443/tcp\n\n**Server Recommendations**\n|                  |              |\n| ---------------- | ------------ |\n| Operating System | Ubuntu 22.04 |\n| Memory (RAM)     | 1 GB         |\n| CPU Cores        | 1            |\n| Storage          | 20 GB SSD    |\n| Architectures    | amd64, arm64 |\n| Number of users  | 1-20         |\n\n**Note:** It is a good security practice to restrict inbound ssh access (port 22/tcp) to your own computer's public IP address. You can check your current public IP address using [ifconfig.me](https://ifconfig.me/).\n\n### Open your cloud firewall for HTTP and HTTPS\n\nOne of the most common sources of misconfiguration is not opening firewall ports correctly. Please be sure to double check this step.\n\nIn your cloud provider's console, the following ports should be open to inbound access from the public internet.\n\n* 80/tcp (Used only for TLS certification verification)\n* 443/tcp (Used for all application requests)\n\n**Note:** there is no need to set up TLS or redirect requests from port 80 to 443 because the Caddy web server, included in the Docker compose file, will handle this for you.\n\n### Configure DNS for your domain\n\nFrom your DNS provider's control panel, set up a domain with records pointing to your server.\n\n| Name            | Type | Value         | TTL |\n| --------------- | ---- | ------------- | --- |\n| `example.com`   | `A`  | `12.34.56.78` | 600 |\n| `*.example.com` | `A`  | `12.34.56.78` | 600 |\n\n**Note:**\n* Replace `example.com` with your domain name.\n* Replace `12.34.56.78` with your server's IP address.\n* Some providers may use the `@` symbol to represent the root of your domain.\n* The wildcard record is required when allowing users to create new accounts on your PDS.\n* The TTL can be anything but 600 (10 minutes) is reasonable\n\n### Check that DNS is working as expected\n\nUse a service like [DNS Checker](https://dnschecker.org/) to verify that you can resolve domain names.\n\nExamples to check (record type `A`):\n* `example.com`\n* `random.example.com`\n* `test123.example.com`\n\nThese should all return your server's public IP.\n\n### Installer on Ubuntu 20.04/22.04 and Debian 11/12\n\nOn your server via ssh, download the installer script using wget:\n\n```bash\nwget https://raw.githubusercontent.com/bluesky-social/pds/main/installer.sh\n```\n\nor download it using curl:\n\n```bash\ncurl https://raw.githubusercontent.com/bluesky-social/pds/main/installer.sh >installer.sh\n```\n\nAnd then run the installer using bash:\n\n```bash\nsudo bash installer.sh\n```\n\n### Verifying that your PDS is online and accessible\n\n> [!TIP]\n> The most common problems with getting PDS content consumed in the live network are when folks substitute the provided Caddy configuration for nginx, apache, or similar reverse proxies. Getting TLS certificates, WebSockets, and virtual server names all correct can be tricky. We are not currently providing tech support for other configurations.\n\nYou can check if your server is online and healthy by requesting the healthcheck endpoint.\n\nYou can visit `https://example.com/xrpc/_health` in your browser. You should see a JSON response with a version, like:\n\n```\n{\"version\":\"0.2.2-beta.2\"}\n```\n\nYou'll also need to check that WebSockets are working, for the rest of the network to pick up content from your PDS. You can test by installing a tool like `wsdump` and running a command like:\n\n```bash\nwsdump \"wss://example.com/xrpc/com.atproto.sync.subscribeRepos?cursor=0\"\n```\n\nNote that there will be no events output on the WebSocket until they are created in the PDS, so the above command may continue to run with no output if things are configured successfully.\n\n### Creating an account using pdsadmin\n\nUsing ssh on your server, use `pdsadmin` to create an account if you haven't already.\n\n```bash\nsudo pdsadmin account create\n```\n\n### Creating an account using an invite code\n\nUsing ssh on your server, use `pdsadmin` to create an invite code.\n\n```bash\nsudo pdsadmin create-invite-code\n```\n\nWhen creating an account using the app, enter this invite code.\n\n### Using the Bluesky app with your PDS\n\nYou can use the Bluesky app to connect to your PDS.\n\n1. Get the Bluesky app\n    * [Bluesky for Web](https://bsky.app/)\n    * [Bluesky for iPhone](https://apps.apple.com/us/app/bluesky-social/id6444370199)\n    * [Bluesky for Android](https://play.google.com/store/apps/details?id=xyz.blueskyweb.app)\n1. Enter the URL of your PDS (e.g. `https://example.com/`)\n\n_Note: because the subdomain TLS certificate is created on-demand, it may take 10-30s for your handle to be accessible. If you aren't seeing your first post/profile, wait 30s and try to make another post._\n\n### Setting up SMTP\n\nTo be able to verify users' email addresses and send other emails, you need to set up an SMTP server.\n\nOne way to do this is to use an email service. [Resend](https://resend.com/) and [SendGrid](https://sendgrid.com/) are two popular choices.\n\nCreate an account and API key on an email service, ensure your server allows access on the required ports, and set these variables in `/pds/pds.env` (example with Resend):\n\n```\nPDS_EMAIL_SMTP_URL=smtps://resend:<your api key here>@smtp.resend.com:465/\nPDS_EMAIL_FROM_ADDRESS=admin@your.domain\n```\n\n_Note: Your PDS will need to be restarted with those variables. This varies depending on your setup. If you followed this installation guide, run `systemctl restart pds`. You might need to restart the server or recreate the container, depending on what you are using._\n\n### Updating your PDS\n\nIt is recommended that you keep your PDS up to date with new versions, otherwise things may break. You can use the `pdsadmin` tool to update your PDS.\n\n```bash\nsudo pdsadmin update\n```\n\n## License\n\nThis project is dual-licensed under MIT and Apache 2.0 terms:\n\n- MIT license ([LICENSE-MIT.txt](https://github.com/bluesky-social/pds/blob/main/LICENSE-MIT.txt) or http://opensource.org/licenses/MIT)\n- Apache License, Version 2.0, ([LICENSE-APACHE.txt](https://github.com/bluesky-social/pds/blob/main/LICENSE-APACHE.txt) or http://www.apache.org/licenses/LICENSE-2.0)\n\nDownstream projects and end users may choose either license individually, or both together, at their discretion. The motivation for this dual-licensing is the additional software patent assurance provided by Apache 2.0.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "compose.yaml",
          "type": "blob",
          "size": 0.8681640625,
          "content": "version: '3.9'\nservices:\n  caddy:\n    container_name: caddy\n    image: caddy:2\n    network_mode: host\n    depends_on:\n      - pds\n    restart: unless-stopped\n    volumes:\n      - type: bind\n        source: /pds/caddy/data\n        target: /data\n      - type: bind\n        source: /pds/caddy/etc/caddy\n        target: /etc/caddy\n  pds:\n    container_name: pds\n    image: ghcr.io/bluesky-social/pds:0.4\n    network_mode: host\n    restart: unless-stopped\n    volumes:\n      - type: bind\n        source: /pds\n        target: /pds\n    env_file:\n      - /pds/pds.env\n  watchtower:\n    container_name: watchtower\n    image: containrrr/watchtower:latest\n    network_mode: host\n    volumes:\n      - type: bind\n        source: /var/run/docker.sock\n        target: /var/run/docker.sock\n    restart: unless-stopped\n    environment:\n      WATCHTOWER_CLEANUP: true\n      WATCHTOWER_SCHEDULE: \"@midnight\"\n"
        },
        {
          "name": "installer.sh",
          "type": "blob",
          "size": 12.9775390625,
          "content": "#!/bin/bash\nset -o errexit\nset -o nounset\nset -o pipefail\n\n# Disable prompts for apt-get.\nexport DEBIAN_FRONTEND=\"noninteractive\"\n\n# System info.\nPLATFORM=\"$(uname --hardware-platform || true)\"\nDISTRIB_CODENAME=\"$(lsb_release --codename --short || true)\"\nDISTRIB_ID=\"$(lsb_release --id --short | tr '[:upper:]' '[:lower:]' || true)\"\n\n# Secure generator comands\nGENERATE_SECURE_SECRET_CMD=\"openssl rand --hex 16\"\nGENERATE_K256_PRIVATE_KEY_CMD=\"openssl ecparam --name secp256k1 --genkey --noout --outform DER | tail --bytes=+8 | head --bytes=32 | xxd --plain --cols 32\"\n\n# The Docker compose file.\nCOMPOSE_URL=\"https://raw.githubusercontent.com/bluesky-social/pds/main/compose.yaml\"\n\n# The pdsadmin script.\nPDSADMIN_URL=\"https://raw.githubusercontent.com/bluesky-social/pds/main/pdsadmin.sh\"\n\n# System dependencies.\nREQUIRED_SYSTEM_PACKAGES=\"\n  ca-certificates\n  curl\n  gnupg\n  jq\n  lsb-release\n  openssl\n  sqlite3\n  xxd\n\"\n# Docker packages.\nREQUIRED_DOCKER_PACKAGES=\"\n  containerd.io\n  docker-ce\n  docker-ce-cli\n  docker-compose-plugin\n\"\n\nPUBLIC_IP=\"\"\nMETADATA_URLS=()\nMETADATA_URLS+=(\"http://169.254.169.254/v1/interfaces/0/ipv4/address\") # Vultr\nMETADATA_URLS+=(\"http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address\") # DigitalOcean\nMETADATA_URLS+=(\"http://169.254.169.254/2021-03-23/meta-data/public-ipv4\") # AWS\nMETADATA_URLS+=(\"http://169.254.169.254/hetzner/v1/metadata/public-ipv4\") # Hetzner\n\nPDS_DATADIR=\"${1:-/pds}\"\nPDS_HOSTNAME=\"${2:-}\"\nPDS_ADMIN_EMAIL=\"${3:-}\"\nPDS_DID_PLC_URL=\"https://plc.directory\"\nPDS_BSKY_APP_VIEW_URL=\"https://api.bsky.app\"\nPDS_BSKY_APP_VIEW_DID=\"did:web:api.bsky.app\"\nPDS_REPORT_SERVICE_URL=\"https://mod.bsky.app\"\nPDS_REPORT_SERVICE_DID=\"did:plc:ar7c4by46qjdydhdevvrndac\"\nPDS_CRAWLERS=\"https://bsky.network\"\n\nfunction usage {\n  local error=\"${1}\"\n  cat <<USAGE >&2\nERROR: ${error}\nUsage:\nsudo bash $0\n\nPlease try again.\nUSAGE\n  exit 1\n}\n\nfunction main {\n  # Check that user is root.\n  if [[ \"${EUID}\" -ne 0 ]]; then\n    usage \"This script must be run as root. (e.g. sudo $0)\"\n  fi\n\n  # Check for a supported architecture.\n  # If the platform is unknown (not uncommon) then we assume x86_64\n  if [[ \"${PLATFORM}\" == \"unknown\" ]]; then\n    PLATFORM=\"x86_64\"\n  fi\n  if [[ \"${PLATFORM}\" != \"x86_64\" ]] && [[ \"${PLATFORM}\" != \"aarch64\" ]] && [[ \"${PLATFORM}\" != \"arm64\" ]]; then\n    usage \"Sorry, only x86_64 and aarch64/arm64 are supported. Exiting...\"\n  fi\n\n  # Check for a supported distribution.\n  SUPPORTED_OS=\"false\"\n  if [[ \"${DISTRIB_ID}\" == \"ubuntu\" ]]; then\n    if [[ \"${DISTRIB_CODENAME}\" == \"focal\" ]]; then\n      SUPPORTED_OS=\"true\"\n      echo \"* Detected supported distribution Ubuntu 20.04 LTS\"\n    elif [[ \"${DISTRIB_CODENAME}\" == \"jammy\" ]]; then\n      SUPPORTED_OS=\"true\"\n      echo \"* Detected supported distribution Ubuntu 22.04 LTS\"\n    elif [[ \"${DISTRIB_CODENAME}\" == \"mantic\" ]]; then\n      SUPPORTED_OS=\"true\"\n      echo \"* Detected supported distribution Ubuntu 23.10 LTS\"\n    fi\n  elif [[ \"${DISTRIB_ID}\" == \"debian\" ]]; then\n    if [[ \"${DISTRIB_CODENAME}\" == \"bullseye\" ]]; then\n      SUPPORTED_OS=\"true\"\n      echo \"* Detected supported distribution Debian 11\"\n    elif [[ \"${DISTRIB_CODENAME}\" == \"bookworm\" ]]; then\n      SUPPORTED_OS=\"true\"\n      echo \"* Detected supported distribution Debian 12\"\n    fi\n  fi\n\n  if [[ \"${SUPPORTED_OS}\" != \"true\" ]]; then\n    echo \"Sorry, only Ubuntu 20.04, 22.04, Debian 11 and Debian 12 are supported by this installer. Exiting...\"\n    exit 1\n  fi\n\n  # Enforce that the data directory is /pds since we're assuming it for now.\n  # Later we can make this actually configurable.\n  if [[ \"${PDS_DATADIR}\" != \"/pds\" ]]; then\n    usage \"The data directory must be /pds. Exiting...\"\n  fi\n\n  # Check if PDS is already installed.\n  if [[ -e \"${PDS_DATADIR}/pds.sqlite\" ]]; then\n    echo\n    echo \"ERROR: pds is already configured in ${PDS_DATADIR}\"\n    echo\n    echo \"To do a clean re-install:\"\n    echo \"------------------------------------\"\n    echo \"1. Stop the service\"\n    echo\n    echo \"  sudo systemctl stop pds\"\n    echo\n    echo \"2. Delete the data directory\"\n    echo\n    echo \"  sudo rm -rf ${PDS_DATADIR}\"\n    echo\n    echo \"3. Re-run this installation script\"\n      echo\n    echo \"  sudo bash ${0}\"\n    echo\n    echo \"For assistance, check https://github.com/bluesky-social/pds\"\n    exit 1\n  fi\n\n  #\n  # Attempt to determine server's public IP.\n  #\n\n  # First try using the hostname command, which usually works.\n  if [[ -z \"${PUBLIC_IP}\" ]]; then\n    PUBLIC_IP=$(hostname --all-ip-addresses | awk '{ print $1 }')\n  fi\n\n  # Prevent any private IP address from being used, since it won't work.\n  if [[ \"${PUBLIC_IP}\" =~ ^(127\\.|10\\.|172\\.1[6-9]\\.|172\\.2[0-9]\\.|172\\.3[0-1]\\.|192\\.168\\.) ]]; then\n    PUBLIC_IP=\"\"\n  fi\n\n  # Check the various metadata URLs.\n  if [[ -z \"${PUBLIC_IP}\" ]]; then\n    for METADATA_URL in \"${METADATA_URLS[@]}\"; do\n      METADATA_IP=\"$(timeout 2 curl --silent --show-error \"${METADATA_URL}\" | head --lines=1 || true)\"\n      if [[ \"${METADATA_IP}\" =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$ ]]; then\n        PUBLIC_IP=\"${METADATA_IP}\"\n        break\n      fi\n    done\n  fi\n\n  if [[ -z \"${PUBLIC_IP}\" ]]; then\n    PUBLIC_IP=\"Server's IP\"\n  fi\n\n  #\n  # Prompt user for required variables.\n  #\n  if [[ -z \"${PDS_HOSTNAME}\" ]]; then\n    cat <<INSTALLER_MESSAGE\n---------------------------------------\n     Add DNS Record for Public IP\n---------------------------------------\n\n  From your DNS provider's control panel, create the required\n  DNS record with the value of your server's public IP address.\n\n  + Any DNS name that can be resolved on the public internet will work.\n  + Replace example.com below with any valid domain name you control.\n  + A TTL of 600 seconds (10 minutes) is recommended.\n\n  Example DNS record:\n\n    NAME                TYPE   VALUE\n    ----                ----   -----\n    example.com         A      ${PUBLIC_IP:-Server public IP}\n    *.example.com       A      ${PUBLIC_IP:-Server public IP}\n\n  **IMPORTANT**\n  It's recommended to wait 3-5 minutes after creating a new DNS record\n  before attempting to use it. This will allow time for the DNS record\n  to be fully updated.\n\nINSTALLER_MESSAGE\n\n    if [[ -z \"${PDS_HOSTNAME}\" ]]; then\n      read -p \"Enter your public DNS address (e.g. example.com): \" PDS_HOSTNAME\n    fi\n  fi\n\n  if [[ -z \"${PDS_HOSTNAME}\" ]]; then\n    usage \"No public DNS address specified\"\n  fi\n\n  if [[ \"${PDS_HOSTNAME}\" =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$ ]]; then\n    usage \"Invalid public DNS address (must not be an IP address)\"\n  fi\n\n  # Admin email\n  if [[ -z \"${PDS_ADMIN_EMAIL}\" ]]; then\n    read -p \"Enter an admin email address (e.g. you@example.com): \" PDS_ADMIN_EMAIL\n  fi\n  if [[ -z \"${PDS_ADMIN_EMAIL}\" ]]; then\n    usage \"No admin email specified\"\n  fi\n\n  if [[ -z \"${PDS_ADMIN_EMAIL}\" ]]; then\n    read -p \"Enter an admin email address (e.g. you@example.com): \" PDS_ADMIN_EMAIL\n  fi\n  if [[ -z \"${PDS_ADMIN_EMAIL}\" ]]; then\n    usage \"No admin email specified\"\n  fi\n\n  #\n  # Install system packages.\n  #\n  if lsof -v >/dev/null 2>&1; then\n    while true; do\n      apt_process_count=\"$(lsof -n -t /var/cache/apt/archives/lock /var/lib/apt/lists/lock /var/lib/dpkg/lock | wc --lines || true)\"\n      if (( apt_process_count == 0 )); then\n        break\n      fi\n      echo \"* Waiting for other apt process to complete...\"\n      sleep 2\n    done\n  fi\n\n  apt-get update\n  apt-get install --yes ${REQUIRED_SYSTEM_PACKAGES}\n\n  #\n  # Install Docker\n  #\n  if ! docker version >/dev/null 2>&1; then\n    echo \"* Installing Docker\"\n    mkdir --parents /etc/apt/keyrings\n\n    # Remove the existing file, if it exists,\n    # so there's no prompt on a second run.\n    rm --force /etc/apt/keyrings/docker.gpg\n    curl --fail --silent --show-error --location \"https://download.docker.com/linux/${DISTRIB_ID}/gpg\" | \\\n      gpg --dearmor --output /etc/apt/keyrings/docker.gpg\n\n    echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/${DISTRIB_ID} ${DISTRIB_CODENAME} stable\" >/etc/apt/sources.list.d/docker.list\n\n    apt-get update\n    apt-get install --yes ${REQUIRED_DOCKER_PACKAGES}\n  fi\n\n  #\n  # Configure the Docker daemon so that logs don't fill up the disk.\n  #\n  if ! [[ -e /etc/docker/daemon.json ]]; then\n    echo \"* Configuring Docker daemon\"\n    cat <<'DOCKERD_CONFIG' >/etc/docker/daemon.json\n{\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"500m\",\n    \"max-file\": \"4\"\n  }\n}\nDOCKERD_CONFIG\n    systemctl restart docker\n  else\n    echo \"* Docker daemon already configured! Ensure log rotation is enabled.\"\n  fi\n\n  #\n  # Create data directory.\n  #\n  if ! [[ -d \"${PDS_DATADIR}\" ]]; then\n    echo \"* Creating data directory ${PDS_DATADIR}\"\n    mkdir --parents \"${PDS_DATADIR}\"\n  fi\n  chmod 700 \"${PDS_DATADIR}\"\n\n  #\n  # Configure Caddy\n  #\n  if ! [[ -d \"${PDS_DATADIR}/caddy/data\" ]]; then\n    echo \"* Creating Caddy data directory\"\n    mkdir --parents \"${PDS_DATADIR}/caddy/data\"\n  fi\n  if ! [[ -d \"${PDS_DATADIR}/caddy/etc/caddy\" ]]; then\n    echo \"* Creating Caddy config directory\"\n    mkdir --parents \"${PDS_DATADIR}/caddy/etc/caddy\"\n  fi\n\n  echo \"* Creating Caddy config file\"\n  cat <<CADDYFILE >\"${PDS_DATADIR}/caddy/etc/caddy/Caddyfile\"\n{\n\temail ${PDS_ADMIN_EMAIL}\n\ton_demand_tls {\n\t\task http://localhost:3000/tls-check\n\t}\n}\n\n*.${PDS_HOSTNAME}, ${PDS_HOSTNAME} {\n\ttls {\n\t\ton_demand\n\t}\n\treverse_proxy http://localhost:3000\n}\nCADDYFILE\n\n  #\n  # Create the PDS env config\n  #\n  # Created here so that we can use it later in multiple places.\n  PDS_ADMIN_PASSWORD=$(eval \"${GENERATE_SECURE_SECRET_CMD}\")\n  cat <<PDS_CONFIG >\"${PDS_DATADIR}/pds.env\"\nPDS_HOSTNAME=${PDS_HOSTNAME}\nPDS_JWT_SECRET=$(eval \"${GENERATE_SECURE_SECRET_CMD}\")\nPDS_ADMIN_PASSWORD=${PDS_ADMIN_PASSWORD}\nPDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX=$(eval \"${GENERATE_K256_PRIVATE_KEY_CMD}\")\nPDS_DATA_DIRECTORY=${PDS_DATADIR}\nPDS_BLOBSTORE_DISK_LOCATION=${PDS_DATADIR}/blocks\nPDS_BLOB_UPLOAD_LIMIT=52428800\nPDS_DID_PLC_URL=${PDS_DID_PLC_URL}\nPDS_BSKY_APP_VIEW_URL=${PDS_BSKY_APP_VIEW_URL}\nPDS_BSKY_APP_VIEW_DID=${PDS_BSKY_APP_VIEW_DID}\nPDS_REPORT_SERVICE_URL=${PDS_REPORT_SERVICE_URL}\nPDS_REPORT_SERVICE_DID=${PDS_REPORT_SERVICE_DID}\nPDS_CRAWLERS=${PDS_CRAWLERS}\nLOG_ENABLED=true\nPDS_CONFIG\n\n  #\n  # Download and install pds launcher.\n  #\n  echo \"* Downloading PDS compose file\"\n  curl \\\n    --silent \\\n    --show-error \\\n    --fail \\\n    --output \"${PDS_DATADIR}/compose.yaml\" \\\n    \"${COMPOSE_URL}\"\n\n  # Replace the /pds paths with the ${PDS_DATADIR} path.\n  sed --in-place \"s|/pds|${PDS_DATADIR}|g\" \"${PDS_DATADIR}/compose.yaml\"\n\n  #\n  # Create the systemd service.\n  #\n  echo \"* Starting the pds systemd service\"\n  cat <<SYSTEMD_UNIT_FILE >/etc/systemd/system/pds.service\n[Unit]\nDescription=Bluesky PDS Service\nDocumentation=https://github.com/bluesky-social/pds\nRequires=docker.service\nAfter=docker.service\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nWorkingDirectory=${PDS_DATADIR}\nExecStart=/usr/bin/docker compose --file ${PDS_DATADIR}/compose.yaml up --detach\nExecStop=/usr/bin/docker compose --file ${PDS_DATADIR}/compose.yaml down\n\n[Install]\nWantedBy=default.target\nSYSTEMD_UNIT_FILE\n\n  systemctl daemon-reload\n  systemctl enable pds\n  systemctl restart pds\n\n  # Enable firewall access if ufw is in use.\n  if ufw status >/dev/null 2>&1; then\n    if ! ufw status | grep --quiet '^80[/ ]'; then\n      echo \"* Enabling access on TCP port 80 using ufw\"\n      ufw allow 80/tcp >/dev/null\n    fi\n    if ! ufw status | grep --quiet '^443[/ ]'; then\n      echo \"* Enabling access on TCP port 443 using ufw\"\n      ufw allow 443/tcp >/dev/null\n    fi\n  fi\n\n  #\n  # Download and install pdadmin.\n  #\n  echo \"* Downloading pdsadmin\"\n  curl \\\n    --silent \\\n    --show-error \\\n    --fail \\\n    --output \"/usr/local/bin/pdsadmin\" \\\n    \"${PDSADMIN_URL}\"\n  chmod +x /usr/local/bin/pdsadmin\n\n  cat <<INSTALLER_MESSAGE\n========================================================================\nPDS installation successful!\n------------------------------------------------------------------------\n\nCheck service status      : sudo systemctl status pds\nWatch service logs        : sudo docker logs -f pds\nBackup service data       : ${PDS_DATADIR}\nPDS Admin command         : pdsadmin\n\nRequired Firewall Ports\n------------------------------------------------------------------------\nService                Direction  Port   Protocol  Source\n-------                ---------  ----   --------  ----------------------\nHTTP TLS verification  Inbound    80     TCP       Any\nHTTP Control Panel     Inbound    443    TCP       Any\n\nRequired DNS entries\n------------------------------------------------------------------------\nName                         Type       Value\n-------                      ---------  ---------------\n${PDS_HOSTNAME}              A          ${PUBLIC_IP}\n*.${PDS_HOSTNAME}            A          ${PUBLIC_IP}\n\nDetected public IP of this server: ${PUBLIC_IP}\n\nTo see pdsadmin commands, run \"pdsadmin help\"\n\n========================================================================\nINSTALLER_MESSAGE\n\n  CREATE_ACCOUNT_PROMPT=\"\"\n  read -p \"Create a PDS user account? (y/N): \" CREATE_ACCOUNT_PROMPT\n\n  if [[ \"${CREATE_ACCOUNT_PROMPT}\" =~ ^[Yy] ]]; then\n    pdsadmin account create\n  fi\n\n}\n\n# Run main function.\nmain\n"
        },
        {
          "name": "pdsadmin.sh",
          "type": "blob",
          "size": 0.7216796875,
          "content": "#!/bin/bash\nset -o errexit\nset -o nounset\nset -o pipefail\n\nPDSADMIN_BASE_URL=\"https://raw.githubusercontent.com/bluesky-social/pds/main/pdsadmin\"\n\n# Command to run.\nCOMMAND=\"${1:-help}\"\nshift || true\n\n# Ensure the user is root, since it's required for most commands.\nif [[ \"${EUID}\" -ne 0 ]]; then\n  echo \"ERROR: This script must be run as root\"\n  exit 1\nfi\n\n# Download the script, if it exists.\nSCRIPT_URL=\"${PDSADMIN_BASE_URL}/${COMMAND}.sh\"\nSCRIPT_FILE=\"$(mktemp /tmp/pdsadmin.${COMMAND}.XXXXXX)\"\n\nif ! curl --fail --silent --show-error --location --output \"${SCRIPT_FILE}\" \"${SCRIPT_URL}\"; then\n  echo \"ERROR: ${COMMAND} not found\"\n  exit 2\nfi\n\nchmod +x \"${SCRIPT_FILE}\"\nif \"${SCRIPT_FILE}\" \"$@\"; then\n  rm --force \"${SCRIPT_FILE}\"\nfi\n"
        },
        {
          "name": "pdsadmin",
          "type": "tree",
          "content": null
        },
        {
          "name": "service",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}