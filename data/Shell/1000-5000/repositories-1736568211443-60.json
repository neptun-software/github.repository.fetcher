{
  "metadata": {
    "timestamp": 1736568211443,
    "page": 60,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yeszao/dnmp",
      "stars": 3972,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0361328125,
          "content": "logs/\ndata/\nwww/\nservices/nginx/ssl/\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.076171875,
          "content": "* text eol=lf\n\n*.png binary\n*.jpg binary\n*.tgz binary\n*.zip binary\n*.gz binary"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0966796875,
          "content": ".idea\n.DS_Store\n.env\nnohup.out\ndocker-compose.yml\ndocker-compose.yml.*\nwww/*\n!www/localhost/\nlogs/*"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2017 Gary Meng\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README-all-en.md",
          "type": "blob",
          "size": 25.6552734375,
          "content": "DNMP (Docker + Nginx/Openresty + MySQL5, 8 + PHP5, 7,8 + Redis + ElasticSearch + MongoDB + RabbitMQ) is a full-featured model**LNMP one-click installer with Support for Arm CPUs**。\n\n> It is best to read it in advance before use[directory](#目录), in order to get started quickly, and problems can be eliminated in time.\n\nQQ Exchange Group:\n\n*   Group 1:**572041090**(Full)\n*   Group 2:**300723526**(Full)\n*   Group 3:**878913761**(bit)\n\n**[\\[ENGLISH\\]](README-en.md)** -\n[**\\[GitHub Address\\]**](https://github.com/yeszao/dnmp) -\n[**\\[Gitee address\\]**](https://gitee.com/yeszao/dnmp)\n\nDNMP Project Features:\n\n1.  `100%`open source\n2.  `100%`Follow docker standards\n3.  backing**Multiple versions of PHP**Coexistence, can be switched arbitrarily (PHP5.4, PHP5.6, PHP7.1, PHP7.2, PHP7.3, PHP7.4, PHP8.0)\n4.  Binding is supported**Any number of domain names**\n5.  backing**HTTPS and HTTP/2**\n6.  **PHP source code, MySQL data, configuration files, log files**All can be directly modified in Host\n7.  Built**Full PHP extension installation**command\n8.  Supported by default`pdo_mysql`、`mysqli`、`mbstring`、`gd`、`curl`、`opcache`and other commonly used and popular extensions, flexibly configured according to the environment\n9.  One-click selection of common services:\n    *   Multiple PHP versions: PHP5.4, PHP5.6, PHP7.0-7.4, PHP8.0\n    *   Web services: Nginx, Openresty\n    *   Databases: MySQL5, MySQL8, Redis, memcached, MongoDB, ElasticSearch\n    *   Message Queuing: RabbitMQ\n    *   Accessibility: Kibana, Logstash, phpMyAdmin, phpRedisAdmin, AdminMongo\n10. Apply in real projects, ensure`100%`available\n11. All mirrors originate from[Docker official repository](https://hub.docker.com), safe and reliable\n12. One configuration,**Windows、Linux、MacOs**All available\n13. Supports quick installation extension commands `install-php-extensions apcu`\n14. Supports installing CERTBOT to obtain SSL certificates for free https\n\n# directory\n\n*   [1. Directory structure](#1目录结构)\n*   [2. Quick to use](#2快速使用)\n*   [3.PHP and extensions](#3PHP和扩展)\n    *   [3.1 Switch the PHP version used by Nginx](#31-切换Nginx使用的PHP版本)\n    *   [3.2 Install PHP extensions](#32-安装PHP扩展)\n    *   [3.3 Quickly install php extensions](#33-快速安装php扩展)\n    *   [3.4 Using php command line in Host (php-cli)](#34-host中使用php命令行php-cli)\n    *   [3.5 Use commoser](#35-使用composer)\n*   [4. Administrative commands](#4管理命令)\n    *   [4.1 Server Startup and Build Commands](#41-服务器启动和构建命令)\n    *   [4.2 Add shortcut commands](#42-添加快捷命令)\n*   [5. Use Log](#5使用log)\n    *   [5.1 Nginx logs](#51-nginx日志)\n    *   [5.2 PHP-FPM logs](#52-php-fpm日志)\n    *   [5.3 MySQL logs](#53-mysql日志)\n*   [6. Database management](#6数据库管理)\n    *   [6.1 phpMyAdmin](#61-phpmyadmin)\n    *   [6.2 phpRedisAdmin](#62-phpredisadmin)\n*   [7. Safe to use in a formal environment](#7在正式环境中安全使用)\n*   [8. Frequently Asked Questions](#8常见问题)\n    *   [8.1 How to use curl in PHP code?](#81-如何在php代码中使用curl)\n    *   [8.2 Docker uses cron to time tasks](#82-Docker使用cron定时任务)\n    *   [8.3 Docker container time](#83-Docker容器时间)\n    *   [8.4 How to connect to MySQL and Redis servers](#84-如何连接MySQL和Redis服务器)\n\n## 1. Directory structure\n\n    /\n    ├── data                        数据库数据目录\n    │   ├── esdata                  ElasticSearch 数据目录\n    │   ├── mongo                   MongoDB 数据目录\n    │   ├── mysql                   MySQL8 数据目录\n    │   └── mysql5                  MySQL5 数据目录\n    ├── services                    服务构建文件和配置文件目录\n    │   ├── elasticsearch           ElasticSearch 配置文件目录\n    │   ├── mysql                   MySQL8 配置文件目录\n    │   ├── mysql5                  MySQL5 配置文件目录\n    │   ├── nginx                   Nginx 配置文件目录\n    │   ├── php                     PHP5.6 - PHP7.4 配置目录\n    │   ├── php54                   PHP5.4 配置目录\n    │   └── redis                   Redis 配置目录\n    ├── logs                        日志目录\n    ├── docker-compose.sample.yml   Docker 服务配置示例文件\n    ├── env.smaple                  环境配置示例文件\n    └── www                         PHP 代码目录\n\n## 2. Quick to use\n\n1.  Local installation\n    *   `git`\n    *   `Docker`(The system needs to be Linux, Windows 10 Build 15063+, or MacOS 10.12+, and must be.)`64`bit)\n    *   `docker-compose 1.7.0+`\n2.  `clone`Project:\n        $ git clone https://github.com/yeszao/dnmp.git\n        # 假如速度太慢，可以使用加速拉取镜像\n        $ git clone https://github.com.cnpmjs.org/yeszao/dnmp.git\n3.  If the host is a Linux system and the current user is not`root`Users, you also need to join the current user`docker`User Groups:\n        $ sudo gpasswd -a ${USER} docker\n4.  Copy and name the configuration file (for Windows systems.)`copy`command), start:\n        $ cd dnmp                                           # 进入项目目录\n        $ cp env.sample .env                                # 复制环境变量文件\n        $ cp docker-compose.sample.yml docker-compose.yml   # 复制 docker-compose 配置文件。默认启动3个服务：\n                                                            # Nginx、PHP7和MySQL8。要开启更多其他服务，如Redis、\n                                                            # PHP5.6、PHP5.4、MongoDB，ElasticSearch等，请删\n                                                            # 除服务块前的注释\n        $ docker-compose up                                 # 启动\n5.  Access in a browser:`http://localhost`or`https://localhost`(Self-signed HTTPS demo) can see the effect of PHP code in the file`./www/localhost/index.php`。\n\n## 3.PHP and extensions\n\n### 3.1 Switch the PHP version used by Nginx\n\nFirst, you need to start another version of PHP, such as PHP 5.4, so that's the first step`docker-compose.yml`Delete the comments that preceded PHP5.4 from the file and start the PHP5.4 container.\n\nAfter PHP5.4 starts, open Nginx Configuration and modify it`fastcgi_pass`The host address of the company, by `php`to`php54`As follows:\n\n        fastcgi_pass   php:9000;\n\nFor:\n\n        fastcgi_pass   php54:9000;\n\nthereinto `php` and `php54` be`docker-compose.yml`The name of the server in the file.\n\nAt last**Reboot Nginx** Take effect.\n\n```bash\n$ docker exec -it nginx nginx -s reload\n```\n\nHere are two`nginx`, the first is the container name, and the second is in the container`nginx`Procedure.\n\n### 3.2 Install PHP extensions\n\nMany of php's features are implemented through extensions, and installing extensions is a slightly time-consuming process.\nSo, in addition to the PHP built-in extension, in`env.sample`In the file we only install a small number of extensions by default,\nIf you want to install more extensions, open yours`.env`Modify the following PHP configuration,\nAdd the required PHP extensions:\n\n```bash\nPHP_EXTENSIONS=pdo_mysql,opcache,redis       # PHP 要安装的扩展列表，英文逗号隔开\nPHP54_EXTENSIONS=opcache,redis                 # PHP 5.4要安装的扩展列表，英文逗号隔开\n```\n\nThen re-build the PHP image.\n\n```bash\ndocker-compose build php\n```\n\nSee the available extensions in the same file`env.sample`Comment block description.\n\n### 3.3 Quickly install php extensions\n\n1\\. Enter the container:\n\n```sh\ndocker exec -it php /bin/sh\n\ninstall-php-extensions apcu \n```\n\n2\\. Support quick installation extension list\n\n<!-- START OF EXTENSIONS TABLE -->\n\n<!-- ########################################################### -->\n\n<!-- #                                                         # -->\n\n<!-- #  DO NOT EDIT THIS TABLE: IT IS GENERATED AUTOMATICALLY  # -->\n\n<!-- #                                                         # -->\n\n<!-- #  EDIT THE data/supported-extensions FILE INSTEAD        # -->\n\n<!-- #                                                         # -->\n\n<!-- ########################################################### -->\n\n| Extension | PHP 5.5 | PHP 5.6 | PHP 7.0 | PHP 7.1 | PHP 7.2 | PHP 7.3 | PHP 7.4 | PHP 8.0 | PHP 8.1 |\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n| amqp | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| apcu | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| apcu_bc |  |  | ✓ | ✓ | ✓ | ✓ | ✓ |  |  |\n| ast |  |  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| bcmath | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| blackfire | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| bz2 | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| calendar | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| cmark |  |  | ✓ | ✓ | ✓ | ✓ | ✓ |  |  |\n| csv |  |  |  |  |  | ✓ | ✓ | ✓ | ✓ |\n| dba | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| decimal |  |  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| ds |  |  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| enchant | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| ev | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| event | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| excimer |  |  |  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| exif | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| ffi |  |  |  |  |  |  | ✓ | ✓ | ✓ |\n| gd | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| gearman | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |  |\n| geoip | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |  |  |\n| geospatial | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| gettext | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| gmagick | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| gmp | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| gnupg | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| grpc | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| http | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| igbinary | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| imagick | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| imap | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| inotify | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| interbase | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |  |  |  |\n| intl | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| ioncube_loader | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |  |  |\n| jsmin | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |  |  |\n| json_post | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| ldap | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| lzf | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| mailparse | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| maxminddb |  |  |  |  | ✓ | ✓ | ✓ | ✓ | ✓ |\n| mcrypt | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| memcache | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| memcached | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| mongo | ✓ | ✓ |  |  |  |  |  |  |  |\n| mongodb | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| mosquitto | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |  |  |\n| msgpack | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| mssql | ✓ | ✓ |  |  |  |  |  |  |  |\n| mysql | ✓ | ✓ |  |  |  |  |  |  |  |\n| mysqli | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| oauth | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| oci8 | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| odbc | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| opcache | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| opencensus |  |  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| openswoole |  |  |  |  | ✓ | ✓ | ✓ | ✓ | ✓ |\n| parallel[\\*](#special-requirements-for-parallel) |  |  |  | ✓ | ✓ | ✓ | ✓ |  |  |\n| pcntl | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| pcov |  |  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| pdo_dblib | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |  |\n| pdo_firebird | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| pdo_mysql | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| pdo_oci |  |  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| pdo_odbc | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| pdo_pgsql | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| pdo_sqlsrv[\\*](#special-requirements-for-pdo_sqlsrv) |  |  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| pgsql | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| propro | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |  |  |\n| protobuf | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |  |\n| pspell | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| pthreads[\\*](#special-requirements-for-pthreads) | ✓ | ✓ | ✓ |  |  |  |  |  |  |\n| raphf | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| rdkafka | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| recode | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |  |  |  |\n| redis | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| seaslog | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| shmop | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| smbclient | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| snmp | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| snuffleupagus |  |  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| soap | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| sockets | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| solr | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| sourceguardian | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |  |\n| spx |  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| sqlsrv[\\*](#special-requirements-for-sqlsrv) |  |  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| ssh2 | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| stomp | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |  |  |\n| swoole | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| sybase_ct | ✓ | ✓ |  |  |  |  |  |  |  |\n| sysvmsg | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| sysvsem | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| sysvshm | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| tensor[\\*](#special-requirements-for-tensor) |  |  |  |  | ✓ | ✓ | ✓ | ✓ |  |\n| tidy | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| timezonedb | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| uopz | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| uploadprogress | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| uuid | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| vips[\\*](#special-requirements-for-vips) |  |  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| wddx | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |  |  |  |\n| xdebug | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| xhprof | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| xlswriter |  |  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| xmldiff | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| xmlrpc | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| xsl | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| yac |  |  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| yaml | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| yar | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| zephir_parser |  |  | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| zip | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| zookeeper | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| zstd | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n\n*Number of supported extensions: 116*\n\nThis extension comes from<https://github.com/mlocati/docker-php-extension-installer>\nRefer to the sample files\n\n### 3.4 Using php command line in Host (php-cli)\n\n1.  reference[bash.alias.sample](bash.alias.sample)Sample file, copy the corresponding php cli function to the host `~/.bashrc`File.\n2.  To make a file work:\n    ```bash\n    source ~/.bashrc\n    ```\n3.  You can then execute php commands in the host:\n    ```bash\n    ~ php -v\n    PHP 7.2.13 (cli) (built: Dec 21 2018 02:22:47) ( NTS )\n    Copyright (c) 1997-2018 The PHP Group\n    Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies\n        with Zend OPcache v7.2.13, Copyright (c) 1999-2018, by Zend Technologies\n        with Xdebug v2.6.1, Copyright (c) 2002-2018, by Derick Rethans\n    ```\n\n### 3.5 Use commoser\n\n**Method 1: Use the compare command in the host**\n\n1.  Determine the path to the compiler cache. For example, my dnmp download is in`~/dnmp`directory, that compiler's cache path is`~/dnmp/data/composer`。\n2.  reference[bash.alias.sample](bash.alias.sample)A sample file that copies the corresponding php composer function to the host `~/.bashrc`File.\n    > It is important to note here that the sample file is in`~/dnmp/data/composer`The directory needs to be the directory identified in the first step.\n3.  To make a file work:\n    ```bash\n    source ~/.bashrc\n    ```\n4.  You can use a composer in any directory on the host:\n    ```bash\n    cd ~/dnmp/www/\n    composer create-project yeszao/fastphp project --no-dev\n    ```\n5.  Optionally, the first time you use composer, it will be `~/dnmp/data/composer` Generate one under the directory**config.json**file, in which you can specify a domestic repository, for example:\n    ```json\n    {\n        \"config\": {},\n        \"repositories\": {\n            \"packagist\": {\n                \"type\": \"composer\",\n                \"url\": \"https://mirrors.aliyun.com/composer/\"\n            }\n        }\n    }\n\n    ```\n\n**Method 2: Use the composer command inside the container**\n\nThere is another way, which is to go into the container and execute`composer`Command, using the PHP7 container as an example:\n\n```bash\ndocker exec -it php /bin/sh\ncd /www/localhost\ncomposer update\n```\n\n## 4. Administrative commands\n\n### 4.1 Server Startup and Build Commands\n\nTo manage services, follow the command with the server name, for example:\n\n```bash\n$ docker-compose up                         # 创建并且启动所有容器\n$ docker-compose up -d                      # 创建并且后台运行方式启动所有容器\n$ docker-compose up nginx php mysql         # 创建并且启动nginx、php、mysql的多个容器\n$ docker-compose up -d nginx php  mysql     # 创建并且已后台运行的方式启动nginx、php、mysql容器\n\n\n$ docker-compose start php                  # 启动服务\n$ docker-compose stop php                   # 停止服务\n$ docker-compose restart php                # 重启服务\n$ docker-compose build php                  # 构建或者重新构建服务\n\n$ docker-compose rm php                     # 删除并且停止php容器\n$ docker-compose down                       # 停止并删除容器，网络，图像和挂载卷\n```\n\n### 4.2 Add shortcut commands\n\nAt the time of development, we may use it often`docker exec -it`Entering the container and aliasing the commands commonly used is a convenient way to do so.\n\nFirst, review the available containers in the host:\n\n```bash\n$ docker ps           # 查看所有运行中的容器\n$ docker ps -a        # 所有容器\n```\n\nOutput`NAMES`That column is the name of the container, or if the default configuration is used, then the name is`nginx`、`php`、`php56`、`mysql`Wait.\n\nThen, open`~/.bashrc`or`~/.zshrc`file, plus:\n\n```bash\nalias dnginx='docker exec -it nginx /bin/sh'\nalias dphp='docker exec -it php /bin/sh'\nalias dphp56='docker exec -it php56 /bin/sh'\nalias dphp54='docker exec -it php54 /bin/sh'\nalias dmysql='docker exec -it mysql /bin/bash'\nalias dredis='docker exec -it redis /bin/sh'\n```\n\nThe next time you enter the container, it is very fast, such as entering the php container:\n\n```bash\n$ dphp\n```\n\n### 4.3 View docker networks\n\n```sh\nifconfig docker0\n```\n\nFor filling in`extra_hosts`The container accesses the host`hosts`address\n\n## 5. Use Log\n\nThe location where the log file is generated depends on the value of each log configuration under conf.\n\n### 5.1 Nginx logs\n\nNginx logs are the logs we use the most, so we put them separately in the root directory`log`Under.\n\n`log`The directory will be mapped for the Nginx container`/var/log/nginx`directory, so in the Nginx configuration file, the location of the output log needs to be configured`/var/log/nginx`Directories, such as:\n\n    error_log  /var/log/nginx/nginx.localhost.error.log  warn;\n\n### 5.2 PHP-FPM logs\n\nIn most cases, PHP-FPM logs are output to Nginx's logs, so no additional configuration is required.\n\nIn addition, it is recommended to open the error log directly in PHP:\n\n```php\nerror_reporting(E_ALL);\nini_set('error_reporting', 'on');\nini_set('display_errors', 'on');\n```\n\nIf you really need it, you can open it (in a container) by following the steps below.\n\n1.  Go to the container, create a log file, and modify the permissions:\n    ```bash\n    $ docker exec -it php /bin/sh\n    $ mkdir /var/log/php\n    $ cd /var/log/php\n    $ touch php-fpm.error.log\n    $ chmod a+w php-fpm.error.log\n    ```\n2.  Open and modify the configuration file for PHP-FPM on the host`conf/php-fpm.conf`, find the following line, delete the comment, and change the value to:\n        php_admin_value[error_log] = /var/log/php/php-fpm.error.log\n3.  Restart the PHP-FPM container.\n\n### 5.3 MySQL logs\n\nBecause MySQL in the MySQL container is used`mysql`The user starts, it cannot be self-contained`/var/log`Add log files under Add log files. So, we put mySQL logs in the same directory as data, i.e. projects`mysql`directory, corresponding to the container`/var/log/mysql/`Directory.\n\n```bash\nslow-query-log-file     = /var/log/mysql/mysql.slow.log\nlog-error               = /var/log/mysql/mysql.error.log\n```\n\nThe above is the configuration of the log file in mysql.conf.\n\n## 6. Database management\n\nThis project defaults to `docker-compose.yml`For MySQL online management is not turned on*phpMyAdmin*, and for redis online management*phpRedisAdmin*, which can be modified or deleted as needed.\n\n### 6.1 phpMyAdmin\n\nThe port address of the phpMyAdmin container mapped to the host is:`8080`, so the address on the host to access phpMyAdmin is:\n\n    http://localhost:8080\n\nMySQL connection information:\n\n*   host: (MySQL container network for this project)\n*   port：`3306`\n*   username:(Manually entered in the phpmyadmin interface)\n*   password:(Manually entered in the phpmyadmin interface)\n\n### 6.2 phpRedisAdmin\n\nThe port address of the phpRedisAdmin container mapped to the host is:`8081`, so the address on the host to access phpMyAdmin is:\n\n    http://localhost:8081\n\nThe Redis connection information is as follows:\n\n*   host: (Redis Container Network for this project)\n*   port: `6379`\n\n## 7. Safe to use in a formal environment\n\nTo use in a formal environment, please:\n\n1.  Turn off XDebug debugging in php .ini\n2.  Security policies to enhance Access to MySQL databases\n3.  Enhanced security policies for redis access\n\n## 8 Frequently Asked Questions\n\n### 8.1 How to use curl in PHP code?\n\nRefer to this issue:<https://github.com/yeszao/dnmp/issues/91>\n\n### 8.2 Docker uses cron to time tasks\n\n[Docker uses cron to time tasks](https://www.awaimai.com/2615.html)\n\n### 8.3 Docker container time\n\nThe container time is configured in an .env file`TZ`For variables, see all supported time zones[List of time zones on Wikipedia](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)or[List of time zones supported by PHP· PHP official website](https://www.php.net/manual/zh/timezones.php)。\n\n### 8.4 How to connect to MySQL and Redis servers\n\nThere are two cases of this.\n\nThe first case, in**PHP code**。\n\n```php\n// 连接MySQL\n$dbh = new PDO('mysql:host=mysql;dbname=mysql', 'root', '123456');\n\n// 连接Redis\n$redis = new Redis();\n$redis->connect('redis', 6379);\n```\n\nBecause containers are containers`expose`The ports are connected, and they are in the same one`networks`down, so connected`host`Parameters directly with the container name,`port`The parameter is the port inside the container. Please refer to it for more[The Difference Between Docker-compose Ports and Expo](https://www.awaimai.com/2138.html)。\n\nIn the second case,**In the host**Pass**command line**or**Navicat**and other tools connected. For the host to connect mysql and redis, the container must pass through`ports`The port is mapped to the host. Take mysql as an example.`docker-compose.yml`There is such a thing in the document`ports`Disposition:`3306:3306`, that is, the 3306 port of the host and the 3306 port of the container form a map, so we can connect like this:\n\n```bash\n$ mysql -h127.0.0.1 -uroot -p123456 -P3306\n$ redis-cli -h127.0.0.1\n```\n\nOver here`host`The parameter cannot be used localhost because it communicates with mysql through the sock file by default, and the container is isolated from the host file system, so it needs to be connected via TCP, so you need to specify the IP.\n\n### 8.5 How php in a container connects to host MySQL\n\n1\\. Host execution`ifconfig docker0`get`inet`It's about connecting`ip`address\n\n```sh\n$ ifconfig docker0\ndocker0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255\n        ...\n```\n\n2\\. Run the host Mysql command line\n\n```mysql\n mysql>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;\n mysql>flush privileges;\n// 其中各字符的含义：\n// *.* 对任意数据库任意表有效\n// \"root\" \"123456\" 是数据库用户名和密码\n// '%' 允许访问数据库的IP地址，%意思是任意IP，也可以指定IP\n// flush privileges 刷新权限信息\n```\n\n3\\. Then use the php container directly`172.0.17.1:3306`Just connect\n\n### 8.6 SQLSTATE\\[HY000] \\[1130] Host '172.19.0.2' is not allowed to connect to this MySQL server\n\n1.  Currently using mysql-server `8.0.28`The above version, php version is required`7.4.7`The above can only be connected\n\n## License\n\nMIT\n"
        },
        {
          "name": "README-en.md",
          "type": "blob",
          "size": 2.177734375,
          "content": "Docker deploying Nginx MySQL PHP7/PHP5.6/PHP5.4 in one key, support full feature functions.\n\n**[[中文说明]](README.md)**\n\n\n## 1. Feature\n1. Completely open source.\n2. Support Multiple PHP version(PHP5.4, PHP5.6, PHP7.0, PHP7.1, PHP7.2, PHP7.3) switch.\n3. Support Multiple domains.\n4. Support HTTPS and HTTP/2.\n5. PHP source located in host.\n6. MySQL data directory in host.\n7. All conf files located in host.\n8. All log files located in host.\n9. Built-in PHP extensions install commands.\n10. Promise 100% available.\n11. Supported any OS with docker.\n\n## 2. Usage\n1. Install `git`, `docker` and `docker-compose`;\n2. Clone project:\n    ```\n    $ git clone https://github.com/yeszao/dnmp.git\n    ```\n3. Add current user to group `docker`：\n    ```\n    $ sudo gpasswd -a ${USER} docker\n    ```\n4. Start docker containers:\n    ```\n    $ cd dnmp\n    $ cp env.sample .env\n    $ cp docker-compose.sample.yml docker-compose.yml\n    $ docker-compose up\n    ```\n5. Go to your browser and type `http://localhost`, you will see:\n\n![Demo Image](./snapshot.png)\n\nThe index file is located at `./www/localhost/index.php`.\n\n\n## 3.Multiple php version\nDefault, we create 3 php container, they are PHP7, PHP5.6 and PHP5.4,\n\nWe can change easy by modify Nginx configuration `fastcgi_pass`.\n\nFor example, [http://localhost](http://localhost) use PHP7, Nginx `fastcgi_pass` is:\n```\n    fastcgi_pass   php:9000;\n```\nTo use PHP7, change it:\n```\n    fastcgi_pass   php54:9000;\n```\nThen reload nginx:\n```bash\n$ docker exec -it nginx nginx -s reload\n```\nDone.\n\n## 4.Use composer\nWe will always use composer in host.\n\nOn host, Create a folder for saving composer config file and cache:\n```\nmkdir ~/dnmp/composer\n```\nOpen ~/.bashrc, add:\n```\ncomposer () {\n    tty=\n    tty -s && tty=--tty\n    docker run \\\n        $tty \\\n        --interactive \\\n        --rm \\\n        --user $(id -u):$(id -g) \\\n        --volume ~/dnmp/composer:/tmp \\\n        --volume /etc/passwd:/etc/passwd:ro \\\n        --volume /etc/group:/etc/group:ro \\\n        --volume $(pwd):/app \\\n        composer \"$@\"\n}\n```\nMake this script affect:\n```\nsource ~/.bashrc\n```\nThats all, use composer:\n```\ncd ~/dnmp/www/\ncomposer create-project yeszao/fastphp project --no-dev\n```\n\n## License\nMIT\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 35.029296875,
          "content": "DNMP（Docker + Nginx/Openresty + MySQL5,8 + PHP5,7,8 + Redis + ElasticSearch + MongoDB + RabbitMQ）是一款全功能的**LNMP一键安装程序，支持Arm CPU**。\n\n> 有部分 [海外工作机会](https://hirelala.com/) 推荐 ，有兴趣的朋友可以看看。\n\n\n<details>\n<summary>项目地址</summary>\n\n- [GitHub 地址](https://github.com/yeszao/dnmp)\n- [Gitee 地址](https://gitee.com/yeszao/dnmp)\n\n</details>\n\n<details>\n<summary>QQ交流群</summary>\n\n- 1群：**572041090**（已满）\n- 2群：**300723526**（已满）\n- 3群：**878913761**（已满）\n- 4群：**850756381**（有位）\n</details>\n\n<details>\n<summary>DNMP项目特点</summary>\n\n1. `100%`开源\n2. `100%`遵循Docker标准\n3. 支持**多版本PHP**共存，可任意切换（PHP5.4、PHP5.6、PHP7.1、PHP7.2、PHP7.3、PHP7.4、PHP8.0)\n4. 支持绑定**任意多个域名**\n5. 支持**HTTPS和HTTP/2**\n6. **PHP源代码、MySQL数据、配置文件、日志文件**都可在Host中直接修改查看\n7. 内置**完整PHP扩展安装**命令\n8. 默认支持`pdo_mysql`、`mysqli`、`mbstring`、`gd`、`curl`、`opcache`等常用热门扩展，根据环境灵活配置\n9. 可一键选配常用服务：\n    - 多PHP版本：PHP5.4、PHP5.6、PHP7.0-7.4、PHP8.0\n    - Web服务：Nginx、Openresty\n    - 数据库：MySQL5、MySQL8、Redis、memcached、MongoDB、ElasticSearch\n    - 消息队列：RabbitMQ\n    - 辅助工具：Kibana、Logstash、phpMyAdmin、phpRedisAdmin、AdminMongo\n10. 实际项目中应用，确保`100%`可用\n11. 所有镜像源于[Docker官方仓库](https://hub.docker.com)，安全可靠\n12. 一次配置，**Windows、Linux、MacOs**皆可用\n13. 支持快速安装扩展命令 `install-php-extensions apcu`\n14. 支持安装certbot获取免费https用的SSL证书\n\n</details>\n\n# 目录\n- [1.目录结构](#1目录结构)\n- [2.快速使用](#2快速使用)\n- [3.PHP和扩展](#3PHP和扩展)\n    - [3.1 切换Nginx使用的PHP版本](#31-切换Nginx使用的PHP版本)\n    - [3.2 安装PHP扩展](#32-安装PHP扩展)\n    - [3.3 快速安装php扩展](#33-快速安装php扩展)\n    - [3.4 Host中使用php命令行（php-cli）](#34-host中使用php命令行php-cli)\n    - [3.5 使用composer](#35-使用composer)\n- [4.管理命令](#4管理命令)\n    - [4.1 服务器启动和构建命令](#41-服务器启动和构建命令)\n    - [4.2 添加快捷命令](#42-添加快捷命令)\n- [5.使用Log](#5使用log)\n    - [5.1 Nginx日志](#51-nginx日志)\n    - [5.2 PHP-FPM日志](#52-php-fpm日志)\n    - [5.3 MySQL日志](#53-mysql日志)\n- [6.数据库管理](#6数据库管理)\n    - [6.1 phpMyAdmin](#61-phpmyadmin)\n    - [6.2 phpRedisAdmin](#62-phpredisadmin)\n- [7.在正式环境中安全使用](#7在正式环境中安全使用)\n- [8.常见问题](#8常见问题)\n    - [8.1 如何在PHP代码中使用curl？](#81-如何在php代码中使用curl)\n    - [8.2 Docker使用cron定时任务](#82-Docker使用cron定时任务)\n    - [8.3 Docker容器时间](#83-Docker容器时间)\n    - [8.4 如何连接MySQL和Redis服务器](#84-如何连接MySQL和Redis服务器)\n\n\n## 1.目录结构\n\n```\n/\n├── data                        数据库数据目录\n│   ├── esdata                  ElasticSearch 数据目录\n│   ├── mongo                   MongoDB 数据目录\n│   ├── mysql                   MySQL8 数据目录\n│   └── mysql5                  MySQL5 数据目录\n├── services                    服务构建文件和配置文件目录\n│   ├── elasticsearch           ElasticSearch 配置文件目录\n│   ├── mysql                   MySQL8 配置文件目录\n│   ├── mysql5                  MySQL5 配置文件目录\n│   ├── nginx                   Nginx 配置文件目录\n│   ├── php                     PHP5.6 - PHP7.4 配置目录\n│   ├── php54                   PHP5.4 配置目录\n│   └── redis                   Redis 配置目录\n├── logs                        日志目录\n├── docker-compose.sample.yml   Docker 服务配置示例文件\n├── env.smaple                  环境配置示例文件\n└── www                         PHP 代码目录\n```\n\n## 2.快速使用\n### 1. 本地安装\n    - `git`\n    - `Docker`(系统需为Linux，Windows 10 Build 15063+，或MacOS 10.12+，且必须要`64`位）\n    - `docker-compose 1.7.0+`\n### 2. `clone`项目：\n    ```\n    $ git clone https://github.com/yeszao/dnmp.git\n    ```\n### 3. 如果主机是 Linux系统，且当前用户不是`root`用户，还需将当前用户加入`docker`用户组：\n    ```\n    $ sudo gpasswd -a ${USER} docker\n    ```\n### 4. 拷贝并命名配置文件（Windows系统请用`copy`命令），启动：\n    ```\n    $ cd dnmp                                           # 进入项目目录\n    $ cp env.sample .env                                # 复制环境变量文件。note:安装php扩展请查看文档中的3.2小节\n    $ cp docker-compose.sample.yml docker-compose.yml   # 复制 docker-compose 配置文件。默认启动3个服务：\n                                                        # Nginx、PHP7和MySQL8。要开启更多其他服务，如Redis、\n                                                        # PHP5.6、PHP5.4、MongoDB，ElasticSearch等，请删\n                                                        # 除服务块前的注释\n    $ docker-compose up                                 # 启动\n    ```\n#### 5. 在浏览器中访问：`http://localhost`或`https://localhost`(自签名HTTPS演示)就能看到效果，PHP代码在文件`./www/localhost/index.php`。\n\n\n## 3.PHP和扩展\n### 3.1 切换Nginx使用的PHP版本\n首先，需要启动其他版本的PHP，比如PHP5.4，那就先在`docker-compose.yml`文件中删除PHP5.4前面的注释，再启动PHP5.4容器。\n\nPHP5.4启动后，打开Nginx 配置，修改`fastcgi_pass`的主机地址，由`php`改为`php54`，如下：\n```\n    fastcgi_pass   php:9000;\n```\n为：\n```\n    fastcgi_pass   php54:9000;\n```\n其中 `php` 和 `php54` 是`docker-compose.yml`文件中服务器的名称。\n\n最后，**重启 Nginx** 生效。\n```bash\n$ docker exec -it nginx nginx -s reload\n```\n这里两个`nginx`，第一个是容器名，第二个是容器中的`nginx`程序。\n\n\n### 3.2 安装PHP扩展\nPHP的很多功能都是通过扩展实现，而安装扩展是一个略费时间的过程，\n所以，除PHP内置扩展外，在`env.sample`文件中我们仅默认安装少量扩展，\n如果要安装更多扩展，请打开你的`.env`文件修改如下的PHP配置，\n增加需要的PHP扩展：\n```bash\nPHP_EXTENSIONS=pdo_mysql,opcache,redis       # PHP 要安装的扩展列表，英文逗号隔开\nPHP54_EXTENSIONS=opcache,redis                 # PHP 5.4要安装的扩展列表，英文逗号隔开\n```\n然后重新build PHP镜像。\n```bash\ndocker-compose build php\n```\n可用的扩展请看同文件的`env.sample`注释块说明。\n\n### 3.3 快速安装php扩展\n1.进入容器:\n\n```sh\ndocker exec -it php /bin/sh\n\ninstall-php-extensions apcu \n```\n2.支持快速安装扩展列表\n## Supported PHP extensions\n\n<!-- START OF EXTENSIONS TABLE -->\n<!-- ########################################################### -->\n<!-- #                                                         # -->\n<!-- #  DO NOT EDIT THIS TABLE: IT IS GENERATED AUTOMATICALLY  # -->\n<!-- #                                                         # -->\n<!-- #  EDIT THE data/supported-extensions FILE INSTEAD        # -->\n<!-- #                                                         # -->\n<!-- ########################################################### -->\n| Extension | PHP 8.4 | PHP 8.3 | PHP 8.2 | PHP 8.1 | PHP 8.0 | PHP 7.4 | PHP 7.3 | PHP 7.2 | PHP 7.1 | PHP 7.0 | PHP 5.6 | PHP 5.5 |\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n| amqp | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| apcu | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| apcu_bc |  |  |  |  |  | &check; | &check; | &check; | &check; | &check; |  |  |\n| ast | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| bcmath | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| bitset | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| blackfire |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| bz2 | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| calendar | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| cassandra[*](#special-requirements-for-cassandra) | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |  |  |\n| cmark |  |  |  |  |  | &check; | &check; | &check; | &check; | &check; |  |  |\n| csv | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |  |  |  |\n| dba | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| ddtrace[*](#special-requirements-for-ddtrace) |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |\n| decimal | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| ds | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| ecma_intl[*](#special-requirements-for-ecma_intl) |  | &check; | &check; |  |  |  |  |  |  |  |  |  |\n| enchant | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| ev | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| event | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| excimer | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |  |\n| exif | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| ffi | &check; | &check; | &check; | &check; | &check; | &check; |  |  |  |  |  |  |\n| ftp | &check; | &check; | &check; |  |  |  |  |  |  |  |  |  |\n| gd | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| gearman |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| geoip |  |  |  |  |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| geos[*](#special-requirements-for-geos) | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| geospatial | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| gettext | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| gmagick | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| gmp | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| gnupg | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| grpc | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| http |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| igbinary | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| imagick |  |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| imap | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| inotify | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| interbase |  |  |  |  |  |  | &check; | &check; | &check; | &check; | &check; | &check; |\n| intl | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| ion | &check; | &check; | &check; | &check; |  |  |  |  |  |  |  |  |\n| ioncube_loader |  | &check; | &check; | &check; |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| jsmin |  |  |  |  |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| json_post | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| jsonpath | &check; | &check; | &check; | &check; | &check; | &check; |  |  |  |  |  |  |\n| ldap | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| luasandbox | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| lz4[*](#special-requirements-for-lz4) | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |\n| lzf | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| mailparse | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| maxminddb | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |  |  |\n| mcrypt |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| memcache | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| memcached | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| memprof[*](#special-requirements-for-memprof) | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| mongo |  |  |  |  |  |  |  |  |  |  | &check; | &check; |\n| mongodb | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| mosquitto |  |  |  |  |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| msgpack | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| mssql |  |  |  |  |  |  |  |  |  |  | &check; | &check; |\n| mysql |  |  |  |  |  |  |  |  |  |  | &check; | &check; |\n| mysqli | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| newrelic |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| oauth | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| oci8 | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| odbc | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| opcache | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| opencensus |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| openswoole |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |  |  |\n| opentelemetry | &check; | &check; | &check; | &check; | &check; |  |  |  |  |  |  |  |\n| parallel[*](#special-requirements-for-parallel) | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |  |\n| parle[*](#special-requirements-for-parle) | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| pcntl | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| pcov |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| pdo_dblib | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| pdo_firebird | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| pdo_mysql | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| pdo_oci | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| pdo_odbc | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| pdo_pgsql | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| pdo_sqlsrv | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| pgsql | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| phalcon |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |  |  |\n| php_trie | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |  |  |  |\n| phpy[*](#special-requirements-for-phpy) | &check; | &check; | &check; | &check; |  |  |  |  |  |  |  |  |\n| pkcs11 | &check; | &check; | &check; | &check; | &check; | &check; |  |  |  |  |  |  |\n| pq | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| propro |  |  |  |  |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| protobuf | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| pspell | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| psr | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| pthreads[*](#special-requirements-for-pthreads) |  |  |  |  |  |  |  |  |  | &check; | &check; | &check; |\n| raphf | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| rdkafka | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| recode |  |  |  |  |  |  | &check; | &check; | &check; | &check; | &check; | &check; |\n| redis | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| relay |  | &check; | &check; | &check; | &check; | &check; |  |  |  |  |  |  |\n| saxon[*](#special-requirements-for-saxon) | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| seasclick | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| seaslog |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| shmop | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| simdjson[*](#special-requirements-for-simdjson) | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |  |\n| smbclient | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| snappy | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| snmp | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| snuffleupagus | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| soap | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| sockets | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| sodium[*](#special-requirements-for-sodium) |  |  |  |  |  |  |  |  | &check; | &check; | &check; |  |\n| solr |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| sourceguardian |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| spx | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| sqlsrv[*](#special-requirements-for-sqlsrv) | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| ssh2 | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| stomp | &check; | &check; | &check; |  |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| swoole |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| sybase_ct |  |  |  |  |  |  |  |  |  |  | &check; | &check; |\n| sync | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| sysvmsg | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| sysvsem | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| sysvshm | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| tensor |  |  | &check; | &check; | &check; | &check; | &check; | &check; |  |  |  |  |\n| tideways |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| tidy | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| timezonedb | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| uopz |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| uploadprogress | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| uuid | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| uv | &check; | &check; | &check; | &check; | &check; |  |  |  |  |  |  |  |\n| vips[*](#special-requirements-for-vips) | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| vld |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| wddx |  |  |  |  |  |  | &check; | &check; | &check; | &check; | &check; | &check; |\n| wikidiff2[*](#special-requirements-for-wikidiff2) | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |  |\n| xdebug |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| xdiff | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| xhprof | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| xlswriter | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| xmldiff |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| xmlrpc | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| xpass[*](#special-requirements-for-xpass) | &check; | &check; | &check; | &check; | &check; |  |  |  |  |  |  |  |\n| xsl | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| yac | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| yaml | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| yar | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| zephir_parser |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |  |  |\n| zip | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| zmq | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| zookeeper |  |  | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n| zstd | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; | &check; |\n\n*Number of supported extensions: 150*\n\n此扩展来自[https://github.com/mlocati/docker-php-extension-installer](https://github.com/mlocati/docker-php-extension-installer)\n参考示例文件\n\n### 3.4 Host中使用php命令行（php-cli）\n\n1. 参考[bash.alias.sample](bash.alias.sample)示例文件，将对应 php cli 函数拷贝到主机的 `~/.bashrc`文件。\n2. 让文件起效：\n    ```bash\n    source ~/.bashrc\n    ```\n3. 然后就可以在主机中执行php命令了：\n    ```bash\n    ~ php -v\n    PHP 7.2.13 (cli) (built: Dec 21 2018 02:22:47) ( NTS )\n    Copyright (c) 1997-2018 The PHP Group\n    Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies\n        with Zend OPcache v7.2.13, Copyright (c) 1999-2018, by Zend Technologies\n        with Xdebug v2.6.1, Copyright (c) 2002-2018, by Derick Rethans\n    ```\n### 3.5 使用composer\n**方法1：主机中使用composer命令**\n1. 确定composer缓存的路径。比如，我的dnmp下载在`~/dnmp`目录，那composer的缓存路径就是`~/dnmp/data/composer`。\n2. 参考[bash.alias.sample](bash.alias.sample)示例文件，将对应 php composer 函数拷贝到主机的 `~/.bashrc`文件。\n    > 这里需要注意的是，示例文件中的`~/dnmp/data/composer`目录需是第一步确定的目录。\n3. 让文件起效：\n    ```bash\n    source ~/.bashrc\n    ```\n4. 在主机的任何目录下就能用composer了：\n    ```bash\n    cd ~/dnmp/www/\n    composer create-project yeszao/fastphp project --no-dev\n    ```\n5. （可选）第一次使用 composer 会在 `~/dnmp/data/composer` 目录下生成一个**config.json**文件，可以在这个文件中指定国内仓库，例如：\n    ```json\n    {\n        \"config\": {},\n        \"repositories\": {\n            \"packagist\": {\n                \"type\": \"composer\",\n                \"url\": \"https://mirrors.aliyun.com/composer/\"\n            }\n        }\n    }\n\n    ```\n**方法二：容器内使用composer命令**\n\n还有另外一种方式，就是进入容器，再执行`composer`命令，以PHP7容器为例：\n```bash\ndocker exec -it php /bin/sh\ncd /www/localhost\ncomposer update\n```\n    \n## 4.管理命令\n### 4.1 服务器启动和构建命令\n如需管理服务，请在命令后面加上服务器名称，例如：\n```bash\n$ docker-compose up                         # 创建并且启动所有容器\n$ docker-compose up -d                      # 创建并且后台运行方式启动所有容器\n$ docker-compose up nginx php mysql         # 创建并且启动nginx、php、mysql的多个容器\n$ docker-compose up -d nginx php  mysql     # 创建并且已后台运行的方式启动nginx、php、mysql容器\n\n\n$ docker-compose start php                  # 启动服务\n$ docker-compose stop php                   # 停止服务\n$ docker-compose restart php                # 重启服务\n$ docker-compose build php                  # 构建或者重新构建服务\n\n$ docker-compose rm php                     # 删除并且停止php容器\n$ docker-compose down                       # 停止并删除容器，网络，图像和挂载卷\n```\n\n### 4.2 添加快捷命令\n在开发的时候，我们可能经常使用`docker exec -it`进入到容器中，把常用的做成命令别名是个省事的方法。\n\n首先，在主机中查看可用的容器：\n```bash\n$ docker ps           # 查看所有运行中的容器\n$ docker ps -a        # 所有容器\n```\n输出的`NAMES`那一列就是容器的名称，如果使用默认配置，那么名称就是`nginx`、`php`、`php56`、`mysql`等。\n\n然后，打开`~/.bashrc`或者`~/.zshrc`文件，加上：\n```bash\nalias dnginx='docker exec -it nginx /bin/sh'\nalias dphp='docker exec -it php /bin/sh'\nalias dphp56='docker exec -it php56 /bin/sh'\nalias dphp54='docker exec -it php54 /bin/sh'\nalias dmysql='docker exec -it mysql /bin/bash'\nalias dredis='docker exec -it redis /bin/sh'\n```\n下次进入容器就非常快捷了，如进入php容器：\n```bash\n$ dphp\n```\n\n### 4.3 查看docker网络\n```sh\nifconfig docker0\n```\n用于填写`extra_hosts`容器访问宿主机的`hosts`地址\n\n## 5.使用Log\n\nLog文件生成的位置依赖于conf下各log配置的值。\n\n### 5.1 Nginx日志\nNginx日志是我们用得最多的日志，所以我们单独放在根目录`log`下。\n\n`log`会目录映射Nginx容器的`/var/log/nginx`目录，所以在Nginx配置文件中，需要输出log的位置，我们需要配置到`/var/log/nginx`目录，如：\n```\nerror_log  /var/log/nginx/nginx.localhost.error.log  warn;\n```\n\n\n### 5.2 PHP-FPM日志\n大部分情况下，PHP-FPM的日志都会输出到Nginx的日志中，所以不需要额外配置。\n\n另外，建议直接在PHP中打开错误日志：\n```php\nerror_reporting(E_ALL);\nini_set('error_reporting', 'on');\nini_set('display_errors', 'on');\n```\n\n如果确实需要，可按一下步骤开启（在容器中）。\n\n1. 进入容器，创建日志文件并修改权限：\n    ```bash\n    $ docker exec -it php /bin/sh\n    $ mkdir /var/log/php\n    $ cd /var/log/php\n    $ touch php-fpm.error.log\n    $ chmod a+w php-fpm.error.log\n    ```\n2. 主机上打开并修改PHP-FPM的配置文件`conf/php-fpm.conf`，找到如下一行，删除注释，并改值为：\n    ```\n    php_admin_value[error_log] = /var/log/php/php-fpm.error.log\n    ```\n3. 重启PHP-FPM容器。\n\n### 5.3 MySQL日志\n因为MySQL容器中的MySQL使用的是`mysql`用户启动，它无法自行在`/var/log`下的增加日志文件。所以，我们把MySQL的日志放在与data一样的目录，即项目的`mysql`目录下，对应容器中的`/var/log/mysql/`目录。\n```bash\nslow-query-log-file     = /var/log/mysql/mysql.slow.log\nlog-error               = /var/log/mysql/mysql.error.log\n```\n以上是mysql.conf中的日志文件的配置。\n\n\n\n## 6.数据库管理\n本项目默认在`docker-compose.yml`中不开启了用于MySQL在线管理的*phpMyAdmin*，以及用于redis在线管理的*phpRedisAdmin*，可以根据需要修改或删除。\n\n### 6.1 phpMyAdmin\nphpMyAdmin容器映射到主机的端口地址是：`8080`，所以主机上访问phpMyAdmin的地址是：\n```\nhttp://localhost:8080\n```\n\nMySQL连接信息：\n- host：(本项目的MySQL容器网络)\n- port：`3306`\n- username：（手动在phpmyadmin界面输入）\n- password：（手动在phpmyadmin界面输入）\n\n### 6.2 phpRedisAdmin\nphpRedisAdmin容器映射到主机的端口地址是：`8081`，所以主机上访问phpMyAdmin的地址是：\n```\nhttp://localhost:8081\n```\n\nRedis连接信息如下：\n- host: (本项目的Redis容器网络)\n- port: `6379`\n\n\n## 7.在正式环境中安全使用\n要在正式环境中使用，请：\n1. 在php.ini中关闭XDebug调试\n2. 增强MySQL数据库访问的安全策略\n3. 增强redis访问的安全策略\n\n\n## 8 常见问题\n### 8.1 如何在PHP代码中使用curl？\n参考这个issue：[https://github.com/yeszao/dnmp/issues/91](https://github.com/yeszao/dnmp/issues/91)\n\n### 8.2 Docker使用cron定时任务 \n[Docker使用cron定时任务](https://www.awaimai.com/2615.html)\n\n### 8.3 Docker容器时间\n容器时间在.env文件中配置`TZ`变量，所有支持的时区请看[时区列表·维基百科](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)或者[PHP所支持的时区列表·PHP官网](https://www.php.net/manual/zh/timezones.php)。\n\n### 8.4 如何连接MySQL和Redis服务器\n这要分两种情况，\n\n第一种情况，在**PHP代码中**。\n```php\n// 连接MySQL\n$dbh = new PDO('mysql:host=mysql;dbname=mysql', 'root', '123456');\n\n// 连接Redis\n$redis = new Redis();\n$redis->connect('redis', 6379);\n```\n因为容器与容器是`expose`端口联通的，而且在同一个`networks`下，所以连接的`host`参数直接用容器名称，`port`参数就是容器内部的端口。更多请参考[《docker-compose ports和expose的区别》](https://www.awaimai.com/2138.html)。\n\n第二种情况，**在主机中**通过**命令行**或者**Navicat**等工具连接。主机要连接mysql和redis的话，要求容器必须经过`ports`把端口映射到主机了。以 mysql 为例，`docker-compose.yml`文件中有这样的`ports`配置：`3306:3306`，就是主机的3306和容器的3306端口形成了映射，所以我们可以这样连接：\n```bash\n$ mysql -h127.0.0.1 -uroot -p123456 -P3306\n$ redis-cli -h127.0.0.1\n```\n这里`host`参数不能用localhost是因为它默认是通过sock文件与mysql通信，而容器与主机文件系统已经隔离，所以需要通过TCP方式连接，所以需要指定IP。\n\n### 8.5 容器内的php如何连接宿主机MySQL\n1.宿主机执行`ifconfig docker0`得到`inet`就是要连接的`ip`地址\n```sh\n$ ifconfig docker0\ndocker0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255\n        ...\n```\n2.运行宿主机Mysql命令行\n```mysql\n mysql>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;\n mysql>flush privileges;\n// 其中各字符的含义：\n// *.* 对任意数据库任意表有效\n// \"root\" \"123456\" 是数据库用户名和密码\n// '%' 允许访问数据库的IP地址，%意思是任意IP，也可以指定IP\n// flush privileges 刷新权限信息\n```\n\n3.接着直接php容器使用`172.0.17.1:3306`连接即可\n\n### 8.6 SQLSTATE[HY000] [1130] Host '172.19.0.2' is not allowed to connect to this MySQL server\n1. 目前使用mysql-server `8.0.28`以上的版本,php版本需要`7.4.7`以上才能连接\n\n### 8.7 Docker是如何生成容器名\n[在不指定容器名称时,是如何生成容器名](https://pet2cattle.com/2022/08/docker-container-names-generator)\n\n\n## 感谢 Navicat 对开源项目的赞助\n[![navicat](https://s1.locimg.com/2024/09/12/e6e96ae680447.png)](https://www.navicat.com/)\n\n## License\nMIT\n\n\n"
        },
        {
          "name": "bash.alias.sample",
          "type": "blob",
          "size": 2.0419921875,
          "content": "# dnmp alias\nalias dnginx='docker exec -it nginx /bin/sh'\nalias dphp='docker exec -it php82 /bin/sh'\nalias dphp56='docker exec -it php56 /bin/sh'\nalias dphp54='docker exec -it php54 /bin/sh'\nalias dmysql='docker exec -it mysql /bin/bash'\nalias dredis='docker exec -it redis /bin/sh'\n\n# php8 cli\nphp80 () {\n    tty=\n    tty -s && tty=--tty\n    docker run \\\n        $tty \\\n        --interactive \\\n        --rm \\\n        --volume $PWD:/www:rw \\\n        --workdir /www \\\n        dnmp_php php80 \"$@\"\n}\n# php7 cli\nphp () {\n    tty=\n    tty -s && tty=--tty\n    docker run \\\n        $tty \\\n        --interactive \\\n        --rm \\\n        --volume $PWD:/www:rw \\\n        --workdir /www \\\n        dnmp_php php74 \"$@\"\n}\n\n# php5.6 cli\nphp56 () {\n    tty=\n    tty -s && tty=--tty\n    docker run \\\n        $tty \\\n        --interactive \\\n        --rm \\\n        --volume $PWD:/www:rw \\\n        --workdir /www \\\n        dnmp_php56 php \"$@\"\n}\n\n# php5.4 cli\nphp54 () {\n    tty=\n    tty -s && tty=--tty\n    docker run \\\n        $tty \\\n        --interactive \\\n        --rm \\\n        --volume $PWD:/www:rw \\\n        --workdir /www \\\n        dnmp_php54 php \"$@\"\n}\n\n# php7 composer\ncomposer () {\n    tty=\n    tty -s && tty=--tty\n    docker run \\\n        $tty \\\n        --interactive \\\n        --rm \\\n        --user www-data:www-data \\\n        --volume ~/dnmp/data/composer:/tmp/composer \\\n        --volume $(pwd):/app \\\n        --workdir /app \\\n        dnmp_php composer \"$@\"\n}\n\n# php5.6 composer\ncomposer56 () {\n    tty=\n    tty -s && tty=--tty\n    docker run \\\n        $tty \\\n        --interactive \\\n        --rm \\\n        --user www-data:www-data \\\n        --volume ~/dnmp/data/composer:/tmp/composer \\\n        --volume $(pwd):/app \\\n        --workdir /app \\\n        dnmp_php56 composer \"$@\"\n}\n\n# php5.4 composer\ncomposer54 () {\n    tty=\n    tty -s && tty=--tty\n    docker run \\\n        $tty \\\n        --interactive \\\n        --rm \\\n        --user www-data:www-data \\\n        --volume ~/dnmp/data/composer:/tmp/composer \\\n        --volume $(pwd):/app \\\n        --workdir /app \\\n        dnmp_php54 composer \"$@\"\n}\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.sample.yml",
          "type": "blob",
          "size": 10.34765625,
          "content": "version: \"3\"\nservices:\n  nginx:\n    build:\n      context: ./services/nginx\n    container_name: nginx\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ${SOURCE_DIR}:/www/:rw\n      - ${NGINX_SSL_CERTIFICATE_DIR}:/ssl\n      - ${NGINX_CONFD_DIR}:/etc/nginx/conf.d\n      - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf\n      - ${NGINX_FASTCGI_PHP_CONF}:/etc/nginx/fastcgi-php.conf\n      - ${NGINX_FASTCGI_PARAMS}:/etc/nginx/fastcgi_params\n      - ${NGINX_LOG_DIR}:/var/log/nginx\n    restart: always\n    networks:\n      - default\n\n  php82:\n    build:\n      context: ./services/php82\n      args:\n        DEBIAN_MIRROR_DOMAIN: deb.debian.org\n        PHP_EXTENSIONS: \"$PHP82_EXTENSIONS\"\n        TZ: \"$TZ\"\n    container_name: php82\n    expose:\n      - 9501\n    volumes:\n      - ${SOURCE_DIR}:/www/:rw\n      - ${PHP82_PHP_CONF_FILE}:/usr/local/etc/php/php.ini\n      - ${PHP82_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf\n      - ${PHP82_LOG_DIR}:/var/log/php\n      - ${PHP82_DATA_COMPOSER}:/tmp/composer\n    restart: always\n    cap_add:\n      - SYS_PTRACE\n    networks:\n      - default\n\n#  php80:\n#    build:\n#      context: ./services/php80\n#      args:\n#        PHP_VERSION: php:${PHP80_VERSION}-fpm-alpine\n#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}\n#        COMPOSER_URL: ${COMPOSER_URL}\n#        PHP_EXTENSIONS: ${PHP80_EXTENSIONS}\n#        TZ: \"$TZ\"\n#    container_name: php80\n#    expose:\n#      - 9501\n#    volumes:\n#      - ${SOURCE_DIR}:/www/:rw\n#      - ${PHP80_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro\n#      - ${PHP80_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw\n#      - ${PHP80_LOG_DIR}:/var/log/php\n#      - ${DATA_DIR}/composer:/tmp/composer\n#    restart: always\n#    cap_add:\n#      - SYS_PTRACE\n#    networks:\n#      - default\n\n#  php74:\n#     build:\n#       context: ./services/php74\n#       args:\n#         PHP_VERSION: php:${PHP74_VERSION}-fpm-alpine\n#         CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}\n#         COMPOSER_URL: ${COMPOSER_URL}\n#         PHP_EXTENSIONS: ${PHP74_EXTENSIONS}\n#         TZ: \"$TZ\"\n#     container_name: php74\n#     expose:\n#       - 9501\n#     extra_hosts:\n#       - \"www.site1.com:172.17.0.1\"\n#     volumes:\n#       - ${SOURCE_DIR}:/www/:rw\n#       - ${PHP74_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro\n#       - ${PHP74_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw\n#       - ${PHP74_LOG_DIR}:/var/log/php\n#       - ${DATA_DIR}/composer:/tmp/composer\n#     restart: always\n#     cap_add:\n#       - SYS_PTRACE\n#     networks:\n#      - default\n\n#  php56:\n#    build:\n#      context: ./services/php56\n#      args:\n#        PHP_VERSION: php:${PHP56_VERSION}-fpm-alpine\n#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}\n#        PHP_EXTENSIONS: ${PHP56_EXTENSIONS}\n#        TZ: \"$TZ\"\n#    container_name: php56\n#    expose:\n#      - 9501\n#    volumes:\n#      - ${SOURCE_DIR}:/www/:rw\n#      - ${PHP56_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro\n#      - ${PHP56_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw\n#      - ${PHP56_LOG_DIR}:/var/log/php\n#      - ${DATA_DIR}/composer:/tmp/composer\n#    restart: always\n#    cap_add:\n#      - SYS_PTRACE\n#    networks:\n#      - default\n#\n#  php54:\n#    build:\n#      context: ./services/php54\n#      args:\n#        PHP_VERSION: php:${PHP54_VERSION}-fpm\n#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}\n#        PHP_EXTENSIONS: ${PHP54_EXTENSIONS}\n#        TZ: \"$TZ\"\n#    container_name: php54\n#    volumes:\n#      - ${SOURCE_DIR}:/www/:rw\n#      - ${PHP54_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro\n#      - ${PHP54_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw\n#      - ${PHP54_LOG_DIR}:/var/log/php\n#      - ${DATA_DIR}/composer:/tmp/composer\n#    restart: always\n#    cap_add:\n#      - SYS_PTRACE\n#    networks:\n#      - default\n\n  mysql:\n    image: mysql:${MYSQL_VERSION}\n    container_name: mysql\n    ports:\n      - \"${MYSQL_HOST_PORT}:3306\"\n    volumes:\n      - ${MYSQL_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro\n      - ${DATA_DIR}/mysql:/var/lib/mysql/:rw\n      - ${MYSQL_LOG_DIR}:/var/log/mysql/:rw\n\n    restart: always\n    networks:\n      - default\n    environment:\n      MYSQL_ROOT_PASSWORD: \"${MYSQL_ROOT_PASSWORD}\"\n      MYSQL_ROOT_HOST: \"${MYSQL_ROOT_HOST}\"\n      TZ: \"$TZ\"\n\n  mysql5:\n    image: mysql:${MYSQL5_VERSION}\n    container_name: mysql5\n    ports:\n      - \"${MYSQL5_HOST_PORT}:3306\"\n    volumes:\n      - ${MYSQL5_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro\n      - ${DATA_DIR}/mysql5:/var/lib/mysql/:rw\n      - ${MYSQL5_LOG_DIR}:/var/log/mysql/:rw\n    restart: always\n    networks:\n      - default\n    environment:\n      MYSQL_ROOT_PASSWORD: \"${MYSQL5_ROOT_PASSWORD}\"\n      MYSQL_ROOT_HOST: \"${MYSQL5_ROOT_HOST}\"\n      TZ: \"$TZ\"\n\n#  openresty:\n#    image:  openresty/openresty:${OPENRESTY_VERSION}\n#    container_name: openresty\n#    ports:\n#       - \"${OPENRESTY_HTTP_HOST_PORT}:80\"\n#       - \"${OPENRESTY_HTTPS_HOST_PORT}:443\"\n#    volumes:\n#       - ${SOURCE_DIR}:/www/:rw\n#       - ${OPENRESTY_CONFD_DIR}:/etc/nginx/conf.d/:ro\n#       - ${OPENRESTY_SSL_CERTIFICATE_DIR}:/ssl:rw\n#       - ${OPENRESTY_CONF_FILE}:/usr/local/openresty/nginx/conf/nginx.conf:ro\n#       - ${OPENRESTY_FASTCGI_PHP_CONF}:/usr/local/openresty/nginx/conf/fastcgi-php.conf:ro\n#       - ${OPENRESTY_CONF_FASTCGIPARAMS_FILE}:/usr/local/openresty/nginx/conf/fastcgi_params:ro\n#       - ${OPENRESTY_LOG_DIR}:/var/log/nginx/:rw\n#    environment:\n#      TZ: \"$TZ\"\n#    networks:\n#      - default\n\n#  redis:\n#    image: redis:${REDIS_VERSION}\n#    container_name: redis\n#    ports:\n#      - \"${REDIS_HOST_PORT}:6379\"\n#    volumes:\n#      - ${REDIS_CONF_FILE}:/etc/redis.conf:ro\n#      - ${DATA_DIR}/redis:/data/:rw\n#    restart: always\n#    entrypoint: [\"redis-server\", \"/etc/redis.conf\"]\n#    environment:\n#      TZ: \"$TZ\"\n#    networks:\n#      - default\n\n#  memcached:\n#    image: memcached:${MEMCACHED_VERSION}\n#    container_name: memcached\n#    ports:\n#      - \"${MEMCACHED_HOST_PORT}:11211\"\n#    environment:\n#       MEMCACHED_CACHE_SIZE: \"${MEMCACHED_CACHE_SIZE}\"\n#    networks:\n#      - default\n\n#  rabbitmq:\n#    build:\n#      context: ./services/rabbitmq\n#      args:\n#        RABBITMQ_VERSION: ${RABBITMQ_VERSION}\n#        RABBITMQ_PLUGINS: ${RABBITMQ_PLUGINS}\n#    container_name: rabbitmq\n#    restart: always\n#    ports:\n#      - \"${RABBITMQ_HOST_PORT_C}:5672\"\n#      - \"${RABBITMQ_HOST_PORT_S}:15672\"\n#    environment:\n#       TZ: \"$TZ\"\n#       RABBITMQ_DEFAULT_USER: \"${RABBITMQ_DEFAULT_USER}\"\n#       RABBITMQ_DEFAULT_PASS: \"${RABBITMQ_DEFAULT_PASS}\"\n#    networks:\n#          - default\n\n#  phpmyadmin:\n#    image: phpmyadmin/phpmyadmin:latest\n#    container_name: phpmyadmin\n#    ports:\n#      - \"${PHPMYADMIN_HOST_PORT}:80\"\n#    volumes:\n#      - ${PHPMYADMIN_USER_CONF_FILE}:/etc/phpmyadmin/config.user.inc.php:ro\n#      - ${PHPMYADMIN_PHP_CONF_FILE}:/usr/local/etc/php/conf.d/php-phpmyadmin.ini:ro\n#    networks:\n#      - default\n#    environment:\n#      - PMA_HOST=mysql\n#      - PMA_PORT=3306\n#      - TZ=$TZ\n\n#  phpredisadmin:\n#    image: erikdubbelboer/phpredisadmin:latest\n#    container_name: phpredisadmin\n#    ports:\n#      - \"${REDISMYADMIN_HOST_PORT}:80\"\n#    networks:\n#      - default\n#    environment:\n#      - REDIS_1_HOST=redis\n#      - REDIS_1_PORT=6379\n#      - TZ=$TZ\n\n#  mongodb:\n#    image: mongo:${MONGODB_VERSION}\n#    container_name: mongodb\n#    environment:\n#        MONGO_INITDB_ROOT_USERNAME: \"${MONGODB_INITDB_ROOT_USERNAME}\"\n#        MONGO_INITDB_ROOT_PASSWORD: \"${MONGODB_INITDB_ROOT_PASSWORD}\"\n#        TZ: \"$TZ\"\n#    volumes:\n#      - ${DATA_DIR}/mongo:/data/db:rw\n#      - ${DATA_DIR}/mongo_key:/mongo:rw\n#    ports:\n#       - \"${MONGODB_HOST_PORT}:27017\"\n#    networks:\n#       - default\n#    command:\n#       --auth\n\n#  adminmongo:\n#    image: mrvautin/adminmongo\n#    container_name: adminmongo\n#    ports:\n#      - \"${ADMINMONGO_HOST_PORT}:1234\"\n#    environment:\n#      - HOST=0.0.0.0\n#      - DB_HOST=mongodb\n#      - DB_PORT=27017\n#    networks:\n#      - default\n\n#  elasticsearch:\n#    build:\n#      context: ./services/elasticsearch\n#      args:\n#        ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION}\n#        ELASTICSEARCH_PLUGINS: ${ELASTICSEARCH_PLUGINS}\n#    container_name: elasticsearch\n#    environment:\n#      - TZ=$TZ\n#      - discovery.type=single-node\n#      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n#    volumes:\n#      - ${DATA_DIR}/esdata:/usr/share/elasticsearch/data\n#      - ${ELASTICSEARCH_CONF_FILE}:/usr/share/elasticsearch/config/elasticsearch.yml\n#      - ${ELASTICSEARCH_JVM_CONF_FILE}:/usr/share/elasticsearch/config/jvm.options\n#      - ${ELASTICSEARCH_LOG4J2_CONF_FILE}:/usr/share/elasticsearch/config/log4j2.properties\n#    hostname: elasticsearch\n#    restart: always\n#    ports:\n#      - \"${ELASTICSEARCH_HOST_PORT_C}:9200\"\n#      - \"${ELASTICSEARCH_HOST_PORT_S}:9300\"\n\n#  kibana:\n#    image: kibana:${KIBANA_VERSION}\n#    container_name: kibana\n#    environment:\n#      TZ: \"$TZ\"\n#      elasticsearch.hosts: http://elasticsearch:9200\n#      I18N_LOCALE: \"${KIBANA_I18N_LOCALE}\"\n#    hostname: kibana\n#    depends_on:\n#      - elasticsearch\n#    restart: always\n#    ports:\n#      - \"${KIBANA_HOST}:5601\"\n\n#  logstash:\n#    image: logstash:${LOGSTASH_VERSION}\n#    container_name: logstash\n#    hostname: logstash\n#    restart: always\n#    depends_on:\n#      - elasticsearch\n#    environment:\n#      TZ: \"$TZ\"\n#    ports:\n#      - \"${LOGSTASH_HOST_PORT_C}:9600\"\n#      - \"${LOGSTASH_HOST_PORT_S}:5044\"\n\n#  node:\n#    image: node:${NODE_VERSION}\n#    environment:\n#      - NODE_ENV=production\n#    volumes:\n#      - ${SOURCE_DIR}:/www/:rw\n#    expose:\n#      - \"8081\"\n#    networks:\n#      - default\n#    stdin_open: true\n#    tty: true\n\n\n#  supervisor:\n#    build:\n#      context: ./services/supervisor\n#      args:\n#        ALPINE_VERSION: alpine:${ALPINE_VERSION}\n#        TZ: \"$TZ\"\n#        CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}\n#    container_name: supervisor\n#    ports:\n#      - \"${SUPERVISOR_HOST_PORT_C}:9001\"\n#    volumes:\n#      - ${SOURCE_DIR}:/www/:rw\n#      - ${SUPERVISOR_LOG}:/var/log/supervisor/:rw\n#      - ${SUPERVISOR_CONFIG}:/etc/supervisor/conf.d/:rw\n#      - ${SUPERVISOR_CONF_FILE}:/etc/supervisor/supervisord.conf:ro\n#    command:\n#      - /bin/sh\n#      - -c\n#      - |\n#        supervisord -n -c /etc/supervisor/supervisord.conf\n#    restart: always\n#    cap_add:\n#      - SYS_PTRACE\n#    networks:\n#      - default\n\nnetworks:\n  default:\n    driver: bridge\n    ipam:\n      driver: default\n      # 解除下面的注释可以设置网段，用于nginx等容器固定容器IP\n      #config:\n      #  - subnet: 10.0.0.0/24\n"
        },
        {
          "name": "env.sample",
          "type": "blob",
          "size": 7.6875,
          "content": "#\n# PHP source directory\n#\nSOURCE_DIR=./www\n\n#\n# Runtime data directory\n#\nDATA_DIR=./data\n\n#\n# Container Timezone\n#\nTZ=Asia/Shanghai\n\n#\n# Container package fetch url\n#\n# Can be empty, followings or others:\n# mirrors.163.com\n# mirrors.aliyun.com\n# mirrors.tencent.com\n# mirrors.ustc.edu.cn\n# dl-cdn.alpinelinux.org\n#\nCONTAINER_PACKAGE_URL=mirrors.ustc.edu.cn\n\n#\n# Composer url\n#\n# Can be empty, followings or others:\n#\n# packagist.laravel-china.org\n# packagist.phpcomposer.com\n# mirrors.aliyun.com\n# mirrors.tencent.com\n# repo.packagist.org\nCOMPOSER_URL=mirrors.tencent.com\n\n\n#\n#ALPINE\n#\nALPINE_VERSION=3.12\n\n#\n# Nginx\n#\nNGINX_VERSION=1.19.1-alpine\nNGINX_HTTP_HOST_PORT=80\nNGINX_HTTPS_HOST_PORT=443\nNGINX_CONFD_DIR=./services/nginx/conf.d\nNGINX_CONF_FILE=./services/nginx/nginx.conf\nNGINX_FASTCGI_PHP_CONF=./services/nginx/fastcgi-php.conf\nNGINX_FASTCGI_PARAMS=./services/nginx/fastcgi_params\nNGINX_SSL_CERTIFICATE_DIR=./services/nginx/ssl\nNGINX_LOG_DIR=./logs/nginx\n# Available apps: certbot\nNGINX_INSTALL_APPS=\n\n#\n# Openresty\n#\nOPENRESTY_VERSION=alpine\nOPENRESTY_HTTP_HOST_PORT=80\nOPENRESTY_HTTPS_HOST_PORT=443\nOPENRESTY_CONFD_DIR=./services/openresty/conf.d\nOPENRESTY_CONF_FILE=./services/openresty/openresty.conf\nOPENRESTY_FASTCGI_PHP_CONF=./services/openresty/fastcgi-php.conf\nOPENRESTY_CONF_FASTCGIPARAMS_FILE=./services/openresty/fastcgi_params\nOPENRESTY_SSL_CERTIFICATE_DIR=./services/openresty/ssl\nOPENRESTY_LOG_DIR=./logs/nginx\n\n#\n# SUPERVISOR\n#\nSUPERVISOR_CONFIG=./services/supervisor/conf.d/\nSUPERVISOR_LOG=./logs/supervisor\nSUPERVISOR_CONF_FILE=./services/supervisor/supervisord.conf\nSUPERVISOR_HOST_PORT_C=9001\n\n#\n# PHP8\n#\n# Available PHP_EXTENSIONS:\n#\n# pdo_mysql,zip,pcntl,mysqli,mbstring,exif,bcmath,calendar,\n# sockets,gettext,shmop,sysvmsg,sysvsem,sysvshm,pdo_rebird,\n# pdo_dblib,pdo_oci,pdo_odbc,pdo_pgsql,pgsql,oci8,odbc,dba,\n# gd,intl,bz2,soap,xsl,xmlrpc,wddx,curl,readline,snmp,pspell,\n# recode,tidy,gmp,imap,ldap,imagick,sqlsrv,mcrypt,opcache,\n# redis,memcached,xdebug,swoole,pdo_sqlsrv,sodium,yaf,mysql,\n# amqp,mongodb,event,rar,ast,yac,yar,yaconf,msgpack,igbinary,\n# seaslog,varnish,xhprof,xlswriter,memcache,rdkafka,zookeeper,\n# psr,phalcon,sdebug,ssh2,yaml,protobuf,hprose\n#\n# You can let it empty to avoid installing any extensions,\n# or install multi plugins as:\n# PHP_EXTENSIONS=pdo_mysql,mysqli,gd,curl,opcache\n#\n\nPHP80_VERSION=8.0.30\nPHP80_PHP_CONF_FILE=./services/php80/php.ini\nPHP80_FPM_CONF_FILE=./services/php80/php-fpm.conf\nPHP80_LOG_DIR=./logs/php80\nPHP80_EXTENSIONS=pdo_mysql,mysqli,mbstring,gd,curl,opcache\n\n\n#\n# PHP82\n#\n# Available PHP_EXTENSIONS:\n#\n# pdo_mysql,zip,pcntl,mysqli,mbstring,exif,bcmath,calendar,\n# sockets,gettext,shmop,sysvmsg,sysvsem,sysvshm,pdo_rebird,\n# pdo_dblib,pdo_oci,pdo_odbc,pdo_pgsql,pgsql,oci8,odbc,dba,\n# gd,intl,bz2,soap,xsl,xmlrpc,wddx,curl,readline,snmp,pspell,\n# recode,tidy,gmp,imap,ldap,imagick,sqlsrv,mcrypt,opcache,\n# redis,memcached,xdebug,swoole,pdo_sqlsrv,sodium,yaf,mysql,\n# amqp,mongodb,event,rar,ast,yac,yar,yaconf,msgpack,igbinary,\n# seaslog,varnish,xhprof,xlswriter,memcache,rdkafka,zookeeper,\n# psr,phalcon,sdebug,ssh2,yaml,protobuf,hprose\n#\n# You can let it empty to avoid installing any extensions,\n# or install multi plugins as:\n# PHP82_EXTENSIONS=pdo_mysql mysqli gd curl opcache\n# Note::that it is a space\n\nPHP82_VERSION=8.2.27\nPHP82_PHP_CONF_FILE=./services/php82/php.ini\nPHP82_FPM_CONF_FILE=./services/php82/php-fpm.conf\nPHP82_LOG_DIR=./logs/php82\nPHP82_DATA_COMPOSER=./data/composer\nPHP82_EXTENSIONS=pdo_mysql mysqli gd curl opcache bcmath\n\n#\n# PHP7\n#\n# Available PHP_EXTENSIONS:\n#\n# pdo_mysql,zip,pcntl,mysqli,mbstring,exif,bcmath,calendar,\n# sockets,gettext,shmop,sysvmsg,sysvsem,sysvshm,pdo_rebird,\n# pdo_dblib,pdo_oci,pdo_odbc,pdo_pgsql,pgsql,oci8,odbc,dba,\n# gd,intl,bz2,soap,xsl,xmlrpc,wddx,curl,readline,snmp,pspell,\n# recode,tidy,gmp,imap,ldap,imagick,sqlsrv,mcrypt,opcache,\n# redis,memcached,xdebug,swoole,pdo_sqlsrv,sodium,yaf,mysql,\n# amqp,mongodb,event,rar,ast,yac,yar,yaconf,msgpack,igbinary,\n# seaslog,varnish,xhprof,xlswriter,memcache,rdkafka,zookeeper,\n# psr,phalcon,sdebug,ssh2,yaml,protobuf,hprose,opencv\n#\n# You can let it empty to avoid installing any extensions,\n# or install multi plugins as:\n# PHP_EXTENSIONS=pdo_mysql,mysqli,gd,curl,opcache\n#\nPHP74_VERSION=7.4.33\nPHP74_PHP_CONF_FILE=./services/php74/php.ini\nPHP74_FPM_CONF_FILE=./services/php74/php-fpm.conf\nPHP74_LOG_DIR=./logs/php74\nPHP74_EXTENSIONS=pdo_mysql,mysqli,mbstring,gd,curl,opcache\n\n\n#\n# PHP5.6\n#\nPHP56_VERSION=5.6.40\nPHP56_PHP_CONF_FILE=./services/php56/php.ini\nPHP56_FPM_CONF_FILE=./services/php56/php-fpm.conf\nPHP56_LOG_DIR=./logs/php56\nPHP56_EXTENSIONS=pdo_mysql,mysqli,mbstring,gd,curl,opcache\n\n#\n# PHP5.4\n#\nPHP54_VERSION=5.4.45\nPHP54_PHP_CONF_FILE=./services/php54/php.ini\nPHP54_FPM_CONF_FILE=./services/php54/php-fpm.conf\nPHP54_LOG_DIR=./logs/php54\nPHP54_EXTENSIONS=pdo_mysql,mysqli,mbstring,gd,curl,opcache\n\n#\n# RABBITMQ\n# Available RABBITMQ_PLUGINS:\n# rabbitmq_amqp1_0,rabbitmq_auth_backend_ldap,rabbitmq_auth_backend_http,rabbitmq_auth_mechanism_ssl,\n# rabbitmq_consistent_hash_exchange,rabbitmq_federation,rabbitmq_federation_management,rabbitmq_management,\n# rabbitmq_management_agent,rabbitmq_mqtt,rabbitmq_prometheus,rabbitmq_shovel,rabbitmq_shovel_management,\n# rabbitmq_stomp,rabbitmq_tracing,rabbitmq_trust_store,rabbitmq_web_stomp,rabbitmq_web_mqtt,\n# rabbitmq_web_stomp_examples,rabbitmq_web_mqtt_examples,rabbitmq_delayed_message_exchange\n#\nRABBITMQ_VERSION=management\nRABBITMQ_CONF_FILE=./services/rabbitmq/rabbitmq.yml\nRABBITMQ_HOST_PORT_C=5672\nRABBITMQ_HOST_PORT_S=15672\nRABBITMQ_DEFAULT_USER=myuser\nRABBITMQ_DEFAULT_PASS=mypass\nRABBITMQ_PLUGINS=rabbitmq_amqp1_0\n\n#\n# MONGODB\n#\nMONGODB_VERSION=4.1\nMONGODB_HOST_PORT=27017\nMONGODB_INITDB_ROOT_USERNAME=root\nMONGODB_INITDB_ROOT_PASSWORD=123456\n\n#\n# ELASTICSEARCH\n#\n# Available ELASTICSEARCH_PLUGINS:\n#\n# amazon-ec2,analysis-icu,analysis-kuromoji,analysis-nori,\n# analysis-phonetic,analysis-smartcn,analysis-stempel,\n# analysis-ukrainian,discovery-azure-classic,discovery-ec2,\n# discovery-file,discovery-gce,google-cloud-storage,\n# ingest-attachment,ingest-geoip,ingest-user-agent,mapper-murmur3,\n# mapper-size,microsoft-azure-storage,qa,repository-azure,\n# repository-gcs,repository-hdfs,repository-s3,store-smb,\n# analysis-ik,analysis-pinyin\n#\n# You can let it empty to avoid installing any plugins,\n# or install plugins as:\n# ELASTICSEARCH_PLUGINS=analysis-ik,analysis-pinyin\n#\nELASTICSEARCH_VERSION=7.1.1\nELASTICSEARCH_CONF_FILE=./services/elasticsearch/elasticsearch.yml\nELASTICSEARCH_CONF_FILE=./services/elasticsearch/elasticsearch.yml\nELASTICSEARCH_JVM_CONF_FILE=./services/elasticsearch/jvm.options\nELASTICSEARCH_LOG4J2_CONF_FILE=./services/elasticsearch/log4j2.properties\nELASTICSEARCH_HOST_PORT_C=9200\nELASTICSEARCH_HOST_PORT_S=9300\nELASTICSEARCH_PLUGINS=analysis-ik\n\n#\n# KIBANA\n#\nKIBANA_VERSION=7.1.1\nKIBANA_HOST=5601\nKIBANA_I18N_LOCALE=zh-CN\n\n#\n# LOGSTASH\n#\nLOGSTASH_VERSION=7.1.1\nLOGSTASH_HOST=5601\nLOGSTASH_HOST_PORT_C=9600\nLOGSTASH_HOST_PORT_S=5044\n\n#\n# MySQL8\n#\nMYSQL_VERSION=8.0.34\nMYSQL_HOST_PORT=3306\nMYSQL_ROOT_PASSWORD=123456\nMYSQL_ROOT_HOST=%\nMYSQL_CONF_FILE=./services/mysql/mysql.cnf\nMYSQL_LOG_DIR=./logs/mysql\n#\n# MySQL5\n#\nMYSQL5_VERSION=5.7.42\nMYSQL5_HOST_PORT=3305\nMYSQL5_ROOT_PASSWORD=123456\nMYSQL5_ROOT_HOST=%\nMYSQL5_CONF_FILE=./services/mysql5/mysql.cnf\nMYSQL5_LOG_DIR=./logs/mysql5\n\n#\n# Redis\n#\nREDIS_VERSION=7.2-alpine\nREDIS_HOST_PORT=6379\nREDIS_CONF_FILE=./services/redis/redis-7.conf\n\n#\n# Memcached\n#\nMEMCACHED_VERSION=alpine\nMEMCACHED_HOST_PORT=11211\nMEMCACHED_CACHE_SIZE=128\n\n#\n# phpMyAdmin\n#\nPHPMYADMIN_HOST_PORT=8080\nPHPMYADMIN_USER_CONF_FILE=./services/phpmyadmin/config.user.inc.php\nPHPMYADMIN_PHP_CONF_FILE=./services/phpmyadmin/php-phpmyadmin.ini\n\n#\n# redisMyAdmin\n#\nREDISMYADMIN_HOST_PORT=8081\n\n#\n# AdminMongo\n#\nADMINMONGO_HOST_PORT=1234\n\n#\n# Node\n#\nNODE_VERSION=10.16.1-alpine\n"
        },
        {
          "name": "logs",
          "type": "tree",
          "content": null
        },
        {
          "name": "services",
          "type": "tree",
          "content": null
        },
        {
          "name": "snapshot.png",
          "type": "blob",
          "size": 67.505859375,
          "content": null
        },
        {
          "name": "www",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}