{
  "metadata": {
    "timestamp": 1736568593969,
    "page": 653,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bohanyang/debi",
      "stars": 1424,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1826171875,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.3232421875,
          "content": "# Debian Network Reinstall Script\n\n[中文说明 ↓](#中文说明)\n\n## Introduction\n\nThis script is written to reinstall VPS/VMs to minimal Debian.\n\n## Platforms\n\n- ✔ KVM or physical machines ❌ Containers\n- ✔ Debian or Ubuntu or Red Hat Linux as original OS with GRUB 2 bootloader\n- ✔ MBR or GPT partition table\n- ✔ Multiple disks or LVM\n- ✔ IPv4 or IPv6\n- ✔ Legacy BIOS or UEFI boot\n- ✔ Most VPS or cloud providers\n- ⚠️ Google Compute Engine - **MUST** manually specify IP/CIDR and gateway of VPC\n- ⚠️ AWS EC2 or Lightsail - Does **NOT** work with UEFI boot\n\n## How It Works\n\n1. Generate a preseed file to automate installation\n2. Download the 'Debian-Installer' to the `/boot` directory\n3. Append a menu entry of the installer to the GRUB2 configuration file\n\n## Usage\n\n### 1. Download\n\nDownload the script with curl:\n\n    curl -fLO https://raw.githubusercontent.com/bohanyang/debi/master/debi.sh\n\nor wget:\n\n    wget -O debi.sh https://raw.githubusercontent.com/bohanyang/debi/master/debi.sh\n\n### 2. Run\n\nRun the script under root or using sudo:\n\n    chmod a+rx debi.sh\n    sudo ./debi.sh\n\nBy default, an admin user `debian` with sudo privilege will be created during the installation. Use `--user root` if you prefer.\n\n### 3. Reboot\n\nIf everything looks good, reboot the machine:\n\n    sudo shutdown -r now\n\nOtherwise, you can run this command to revert all changes made by the script:\n\n    sudo rm -rf debi.sh /etc/default/grub.d/zz-debi.cfg /boot/debian-* && { sudo update-grub || sudo grub2-mkconfig -o /boot/grub2/grub.cfg; }\n\n## Available Options\n\n### Presets\n\n| Region | Alias          | Mirror                               | DNS        | NTP                 |\n|--------|----------------|--------------------------------------|------------|---------------------|\n| Global | Default        | https://deb.debian.org               | Google     | time.google.com     |\n| Global | `--cloudflare` | https://deb.debian.org               | Cloudflare | time.cloudflare.com |\n| Global | `--aws`        | https://cdn-aws.deb.debian.org       | Google     | time.aws.com        |\n| China  | `--ustc`       | https://mirrors.ustc.edu.cn          | DNSPod     | time.amazonaws.cn   |\n| China  | `--tuna`       | https://mirrors.tuna.tsinghua.edu.cn | DNSPod     | time.amazonaws.cn   |\n| China  | `--aliyun`     | https://mirrors.aliyun.com           | AliDNS     | time.amazonaws.cn   |\n\n * `--interface <string>` Manually select a network interface, e.g. eth1\n * `--ethx` Disable *Consistent Network Device Naming* to get interface names like *ethX* back\n * `--ip <string>` Disable the auto network config (DHCP) and configure a static IP address, e.g. `10.0.0.2`, `1.2.3.4/24`, `2001:2345:6789:abcd::ef/48`\n * `--netmask <string>` e.g. `255.255.255.0`, `ffff:ffff:ffff:ffff::`\n * `--gateway <string>` e.g. `10.0.0.1`, `none` if no gateway\n * `--dns '8.8.8.8 8.8.4.4'`\n * `--dns6 '2001:4860:4860::8888 2001:4860:4860::8844'` (effective only if IPv6 is specified)\n * `--hostname <string>` FQDN hostname (includes the domain name), e.g. `server1.example.com`\n * `--network-console` Enable the network console of the installer. `ssh installer@ip` to connect\n * `--version 12` Supports: `10`, `11`, `12`, `13`\n * `--suite bullseye` **Please use `--version` instead if you don't have special needs.** e.g. `stable`, `testing`, `sid`\n * `--release-d-i` d-i (Debian Installer) for the released versions: 12 (bookworm), 11 (bullseye) and 10 (buster)\n * `--daily-d-i` Use latest daily build of d-i (Debian Installer) for the unreleased version: 13 (trixie), sid (unstable)\n * `--mirror-protocol http` or `https` or `ftp`\n * `--https` alias to `--mirror-protocol https`\n * `--reuse-proxy` Reuse the value of `http(s)_proxy` environment variable as the mirror proxy\n * `--proxy, --mirror-proxy` Set an HTTP proxy for APT and downloads\n * `--mirror-host deb.debian.org`\n * `--mirror-directory /debian`\n * `--security-repository http://security.debian.org/debian-security` Magic value: `'mirror' = <mirror-protocol>://<mirror-host>/<mirror-directory>/../debian-security`\n * `--no-account-setup, --no-user` **(Manual installation)** Proceed account setup manually in VNC or remote console.\n * `--username, --user debian` New user with `sudo` privilege or `root`\n * `--password <string>` Password of the new user. **You'll be prompted if you choose to not specify it here**\n * `--authorized-keys-url <string>` URL to your authorized keys for SSH authentication. e.g. `https://github.com/torvalds.keys`\n * `--sudo-with-password` Require password when the user invokes `sudo` command\n * `--timezone UTC` e.g. `Asia/Shanghai` for China (UTC+8) https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List\n * `--ntp time.google.com`\n * `--no-disk-partitioning, --no-part` **(Manual installation)** Proceed disk partitioning manually in VNC or remote console\n * `--disk <string>` Manually select a disk for installation. **Please remember to specify this when more than one disk is available!** e.g. `/dev/sda`\n * `--no-force-gpt` By default, GPT rather than MBR partition table will be created. This option disables it.\n * `--bios` Don't create *EFI system partition*. If GPT is being used, create a *BIOS boot partition* (`bios_grub` partition). Default if `/sys/firmware/efi` is absent. [See](https://askubuntu.com/a/501360)\n * `--efi` Create an *EFI system partition*. Default if `/sys/firmware/efi` exists\n * `--esp 106` Size of the *EFI system partition*. e.g. `106`, `538` and `1075` result to 100 MiB, 512 MiB, 1 GiB respectively\n * `--filesystem ext4`\n * `--kernel <string>` Choose an package for the kernel image\n * `--cloud-kernel` Choose `linux-image-cloud-amd64` or `...arm64` as the kernel image\n * `--bpo-kernel` Choose the kernel image from Debian Backports (newer version from the next Debian release)\n * `--no-install-recommends`\n * `--apt-non-free-firmware`, `--apt-non-free`, `--apt-contrib`, `--apt-src`, `--apt-backports`\n * `--no-apt-non-free-firmware`, `--no-apt-non-free`, `--no-apt-contrib`, `--no-apt-src`, `--no-apt-backports`\n * `--install 'ca-certificates libpam-systemd'` Install additional APT packages. Space-separated and quoted.\n * `--safe-upgrade` **(Default)** `apt upgrade --with-new-pkgs`. [See](https://salsa.debian.org/installer-team/pkgsel/-/blob/master/debian/postinst)\n * `--full-upgrade` `apt dist-upgrade`\n * `--no-upgrade`\n * `--bbr` Enable TCP BBR congestion control\n * `--ssh-port <integer>` SSH port\n * `--hold` Don't reboot or power off after installation\n * `--power-off` Power off after installation rather than reboot\n * `--architecture <string>` e.g. `amd64`, `i386`, `arm64`, `armhf`, etc.\n * `--firmware` Load additional [non-free firmwares](https://wiki.debian.org/Firmware#Firmware_during_the_installation)\n * `--no-force-efi-extra-removable` [See](https://wiki.debian.org/UEFI#Force_grub-efi_installation_to_the_removable_media_path)\n * `--grub-timeout 5` How many seconds the GRUB menu shows before entering the installer\n * `--force-lowmem <integer>` Valid values: 0, 1, 2. Force [low memory level](https://salsa.debian.org/installer-team/lowmem). Useful if your machine has memory less than 500M where level 2 is set (see issue #45). `--force-lowmem 1` may solve it. \n * `--dry-run` Print generated preseed and GRUB entry without downloading the installer and actually saving them\n * `--cidata ./cidata-example` Custom data for cloud-init. **VM provider's data source will be IGNORED.** See example.\n\n## 中文说明\n\n下载脚本：\n\n```\ncurl -fLO https://raw.githubusercontent.com/bohanyang/debi/master/debi.sh && chmod a+rx debi.sh\n```\n\n运行脚本：\n\n```\nsudo ./debi.sh --cdn --network-console --ethx --bbr --user root --password <新系统用户密码>\n```\n\n* `--bbr` 开启 BBR\n* `--ethx` 网卡名称使用传统形式，如 `eth0` 而不是 `ens3`\n* `--cloud-kernel` 安装占用空间较小的 `cloud` 内核，但可能会导致 UEFI 启动的机器（如 Oracle、Azure 及 Hyper-V、Google Cloud 等）VNC 黑屏。BIOS 启动的普通 VPS 则没有此问题。\n* 默认时区为 UTC，添加 `--timezone Asia/Shanghai` 可使用中国时区。\n* 默认使用 Debian 官方 CDN 镜像源（deb.debian.org），添加 `--ustc` 可使用中科大镜像源。\n\n如果没有报错可以重启：\n\n```\nsudo shutdown -r now\n```\n\n约 30 秒后可以尝试 SSH 登录 `installer` 用户，密码与之前设置的相同。如果成功连接，可以按 Ctrl-A 然后再按 4 监控安装日志。安装完成后会自动重启进入新系统。\n"
        },
        {
          "name": "cidata-example",
          "type": "tree",
          "content": null
        },
        {
          "name": "debi.sh",
          "type": "blob",
          "size": 25.4521484375,
          "content": "#!/bin/sh\n# shellcheck shell=dash\n\nset -eu\n\nerr() {\n    printf \"\\nError: %s.\\n\" \"$1\" 1>&2\n    exit 1\n}\n\nwarn() {\n    printf \"\\nWarning: %s.\\nContinuing with the default...\\n\" \"$1\" 1>&2\n    sleep 5\n}\n\ncommand_exists() {\n    command -v \"$1\" > /dev/null 2>&1\n}\n\n# Sets variable:\nin_target_script=\nin_target() {\n    local command=\n\n    for argument in \"$@\"; do\n        command=\"$command $argument\"\n    done\n\n    if [ -n \"$command\" ]; then\n        [ -z \"$in_target_script\" ] && in_target_script='true'\n        in_target_script=\"$in_target_script;$command\"\n    fi\n}\n\nin_target_backup() {\n    in_target \"if [ ! -e \\\"$1.backup\\\" ]; then cp \\\"$1\\\" \\\"$1.backup\\\"; fi\"\n}\n\nconfigure_sshd() {\n    # !isset($sshd_config_backup)\n    [ -z \"${sshd_config_backup+1s}\" ] && in_target_backup /etc/ssh/sshd_config\n    sshd_config_backup=\n    in_target sed -Ei \\\"\"s/^#?$1 .+/$1 $2/\"\\\" /etc/ssh/sshd_config\n}\n\nprompt_password() {\n    local prompt=\n\n    if [ $# -gt 0 ]; then\n        prompt=$1\n    elif [ \"$username\" = root ]; then\n        prompt=\"Choose a password for the root user: \"\n    else\n        prompt=\"Choose a password for user $username: \"\n    fi\n\n    stty -echo\n    trap 'stty echo' EXIT\n\n    while [ -z \"$password\" ]; do\n        echo -n \"$prompt\" > /dev/tty\n        read -r password < /dev/tty\n        echo > /dev/tty\n    done\n\n    stty echo\n    trap - EXIT\n}\n\ndownload() {\n    # Set \"$http/https/ftp_proxy\" with \"$mirror_proxy\"\n    # only when none of those have ever been set\n    [ -n \"$mirror_proxy\" ] &&\n    [ -z \"${http_proxy+1s}\" ] &&\n    [ -z \"${https_proxy+1s}\" ] &&\n    [ -z \"${ftp_proxy+1s}\" ] &&\n    export http_proxy=\"$mirror_proxy\" &&\n    export https_proxy=\"$mirror_proxy\" &&\n    export ftp_proxy=\"$mirror_proxy\"\n\n    if command_exists wget; then\n        wget -O \"$2\" \"$1\"\n    elif command_exists curl; then\n        curl -fL \"$1\" -o \"$2\"\n    elif command_exists busybox && busybox wget --help > /dev/null 2>&1; then\n        busybox wget -O \"$2\" \"$1\"\n    else\n        err 'Cannot find \"wget\", \"curl\" or \"busybox wget\" to download files'\n    fi\n}\n\n# Set \"$mirror_proxy\" with \"$http/https/ftp_proxy\"\n# only when it is empty and one of those is not empty\nset_mirror_proxy() {\n    [ -n \"$mirror_proxy\" ] && return\n\n    case $mirror_protocol in\n        http)\n            if [ -n \"${http_proxy+1s}\" ]; then mirror_proxy=\"$http_proxy\"; fi\n            ;;\n        https)\n            if [ -n \"${https_proxy+1s}\" ]; then mirror_proxy=\"$https_proxy\"; fi\n            ;;\n        ftp)\n            if [ -n \"${ftp_proxy+1s}\" ]; then mirror_proxy=\"$ftp_proxy\"; fi\n            ;;\n        *)\n            err \"Unsupported protocol: $mirror_protocol\"\n    esac\n}\n\nset_security_archive() {\n    case $suite in\n        buster|oldoldstable)\n            security_archive=\"$suite/updates\"\n            ;;\n        bullseye|oldstable|bookworm|stable|trixie|testing)\n            security_archive=\"$suite-security\"\n            ;;\n        sid|unstable)\n            security_archive=''\n            ;;\n        *)\n            err \"Unsupported suite: $suite\"\n    esac\n}\n\nset_daily_d_i() {\n    case $suite in\n        buster|oldoldstable|bullseye|oldstable|bookworm|stable)\n            daily_d_i=false\n            ;;\n        trixie|testing|sid|unstable)\n            daily_d_i=true\n            ;;\n        *)\n            err \"Unsupported suite: $suite\"\n    esac\n}\n\nset_suite() {\n    suite=$1\n    set_daily_d_i\n    set_security_archive\n}\n\nset_debian_version() {\n    case $1 in\n        10|buster|oldoldstable)\n            set_suite buster\n            ;;\n        11|bullseye|oldstable)\n            set_suite bullseye\n            ;;\n        12|bookworm|stable)\n            set_suite bookworm\n            ;;\n        13|trixie|testing)\n            set_suite trixie\n            ;;\n        sid|unstable)\n            set_suite sid\n            ;;\n        *)\n            err \"Unsupported version: $1\"\n    esac\n}\n\nhas_cloud_kernel() {\n    case $suite in\n        buster|oldoldstable)\n            [ \"$architecture\" = amd64 ] && return\n            [ \"$architecture\" = arm64 ] && [ \"$bpo_kernel\" = true ] && return\n            ;;\n        bullseye|oldstable|bookworm|stable|trixie|testing|sid|unstable)\n            [ \"$architecture\" = amd64 ] || [ \"$architecture\" = arm64 ] && return\n    esac\n\n    local tmp; tmp=''; [ \"$bpo_kernel\" = true ] && tmp='-backports'\n    warn \"No cloud kernel is available for $architecture/$suite$tmp\"\n\n    return 1\n}\n\nhas_backports() {\n    case $suite in\n        buster|oldoldstable|bullseye|oldstable|bookworm|stable|trixie|testing) return\n    esac\n\n    warn \"No backports kernel is available for $suite\"\n\n    return 1\n}\n\ninterface=auto\nip=\nnetmask=\ngateway=\ndns='8.8.8.8 8.8.4.4'\ndns6='2001:4860:4860::8888 2001:4860:4860::8844'\nhostname=\nnetwork_console=false\nset_debian_version 12\nmirror_protocol=https\nmirror_host=deb.debian.org\nmirror_directory=/debian\nmirror_proxy=\nsecurity_repository=mirror\naccount_setup=true\nusername=debian\npassword=\nauthorized_keys_url=\nsudo_with_password=false\ntimezone=UTC\nntp=time.google.com\ndisk_partitioning=true\ndisk=\"/dev/$(lsblk -no PKNAME \"$(df /boot | grep -Eo '/dev/[a-z0-9]+')\")\"\nforce_gpt=true\nefi=\nesp=106\nfilesystem=ext4\nkernel=\ncloud_kernel=false\nbpo_kernel=false\ninstall_recommends=true\ninstall=\nupgrade=\nkernel_params=\nforce_lowmem=\nbbr=false\nssh_port=\nhold=false\npower_off=false\narchitecture=\nfirmware=false\nforce_efi_extra_removable=true\ngrub_timeout=5\ndry_run=false\napt_non_free_firmware=true\napt_non_free=false\napt_contrib=false\napt_src=true\napt_backports=true\ncidata=\n\nwhile [ $# -gt 0 ]; do\n    case $1 in\n        --cdn)\n            ;;\n        --aws)\n            mirror_host=cdn-aws.deb.debian.org\n            ntp=time.aws.com\n            ;;\n        --cloudflare)\n            dns='1.1.1.1 1.0.0.1'\n            dns6='2606:4700:4700::1111 2606:4700:4700::1001'\n            ntp=time.cloudflare.com\n            ;;\n        --aliyun)\n            dns='223.5.5.5 223.6.6.6'\n            dns6='2400:3200::1 2400:3200:baba::1'\n            mirror_host=mirrors.aliyun.com\n            ntp=time.amazonaws.cn\n            ;;\n        --ustc|--china)\n            dns='119.29.29.29'\n            dns6='2402:4e00::'\n            mirror_host=mirrors.ustc.edu.cn\n            ntp=time.amazonaws.cn\n            ;;\n        --tuna)\n            dns='119.29.29.29'\n            dns6='2402:4e00::'\n            mirror_host=mirrors.tuna.tsinghua.edu.cn\n            ntp=time.amazonaws.cn\n            ;;\n        --interface)\n            interface=$2\n            shift\n            ;;\n        --ip)\n            ip=$2\n            shift\n            ;;\n        --netmask)\n            netmask=$2\n            shift\n            ;;\n        --gateway)\n            gateway=$2\n            shift\n            ;;\n        --dns)\n            dns=$2\n            shift\n            ;;\n        --dns6)\n            dns6=$2\n            shift\n            ;;\n        --hostname)\n            hostname=$2\n            shift\n            ;;\n        --network-console)\n            network_console=true\n            ;;\n        --version)\n            set_debian_version \"$2\"\n            shift\n            ;;\n        --suite)\n            set_suite \"$2\"\n            shift\n            ;;\n        --release-d-i)\n            daily_d_i=false\n            ;;\n        --daily-d-i)\n            daily_d_i=true\n            ;;\n        --mirror-protocol)\n            mirror_protocol=$2\n            shift\n            ;;\n        --https)\n            mirror_protocol=https\n            ;;\n        --mirror-host)\n            mirror_host=$2\n            shift\n            ;;\n        --mirror-directory)\n            mirror_directory=${2%/}\n            shift\n            ;;\n        --mirror-proxy|--proxy)\n            mirror_proxy=$2\n            shift\n            ;;\n        --reuse-proxy)\n            set_mirror_proxy\n            ;;\n        --security-repository)\n            security_repository=$2\n            shift\n            ;;\n        --no-user|--no-account-setup)\n            account_setup=false\n            ;;\n        --user|--username)\n            username=$2\n            shift\n            ;;\n        --password)\n            password=$2\n            shift\n            ;;\n        --authorized-keys-url)\n            authorized_keys_url=$2\n            shift\n            ;;\n        --sudo-with-password)\n            sudo_with_password=true\n            ;;\n        --timezone)\n            timezone=$2\n            shift\n            ;;\n        --ntp)\n            ntp=$2\n            shift\n            ;;\n        --no-part|--no-disk-partitioning)\n            disk_partitioning=false\n            ;;\n        --force-lowmem)\n            [ \"$2\" != 0 ] && [ \"$2\" != 1 ] && [ \"$2\" != 2 ] && err 'Low memory level can only be 0, 1 or 2'\n            force_lowmem=$2\n            shift\n            ;;\n        --disk)\n            disk=$2\n            shift\n            ;;\n        --no-force-gpt)\n            force_gpt=false\n            ;;\n        --bios)\n            efi=false\n            ;;\n        --efi)\n            efi=true\n            ;;\n        --esp)\n            esp=$2\n            shift\n            ;;\n        --filesystem)\n            filesystem=$2\n            shift\n            ;;\n        --kernel)\n            kernel=$2\n            shift\n            ;;\n        --cloud-kernel)\n            cloud_kernel=true\n            ;;\n        --bpo-kernel)\n            bpo_kernel=true\n            ;;\n        --apt-non-free-firmware)\n            apt_non_free_firmware=true\n            ;;\n        --apt-non-free)\n            apt_non_free=true\n            apt_contrib=true\n            ;;\n        --apt-contrib)\n            apt_contrib=true\n            ;;\n        --apt-src)\n            apt_src=true\n            ;;\n        --apt-backports)\n            apt_backports=true\n            ;;\n        --no-apt-non-free-firmware)\n            apt_non_free_firmware=false\n            ;;\n        --no-apt-non-free)\n            apt_non_free=false\n            ;;\n        --no-apt-contrib)\n            apt_contrib=false\n            apt_non_free=false\n            ;;\n        --no-apt-src)\n            apt_src=false\n            ;;\n        --no-apt-backports)\n            apt_backports=false\n            ;;\n        --no-install-recommends)\n            install_recommends=false\n            ;;\n        --install)\n            install=$2\n            shift\n            ;;\n        --no-upgrade)\n            upgrade=none\n            ;;\n        --safe-upgrade)\n            upgrade=safe-upgrade\n            ;;\n        --full-upgrade)\n            upgrade=full-upgrade\n            ;;\n        --ethx)\n            kernel_params=\"$kernel_params net.ifnames=0 biosdevname=0\"\n            ;;\n        --bbr)\n            bbr=true\n            ;;\n        --ssh-port)\n            ssh_port=$2\n            shift\n            ;;\n        --hold)\n            hold=true\n            ;;\n        --power-off)\n            power_off=true\n            ;;\n        --architecture)\n            architecture=$2\n            shift\n            ;;\n        --firmware)\n            firmware=true\n            ;;\n        --no-force-efi-extra-removable)\n            force_efi_extra_removable=false\n            ;;\n        --grub-timeout)\n            grub_timeout=$2\n            shift\n            ;;\n        --dry-run)\n            dry_run=true\n            ;;\n        --cidata)\n            cidata=$(realpath \"$2\")\n            [ ! -f \"$cidata/meta-data\" ] && err 'No \"meta-data\" file found in the cloud-init directory'\n            [ ! -f \"$cidata/user-data\" ] && err 'No \"user-data\" file found in the cloud-init directory'\n            shift\n            ;;\n        *)\n            err \"Unknown option: \\\"$1\\\"\"\n    esac\n    shift\ndone\n\n[ -z \"$architecture\" ] && {\n    architecture=$(dpkg --print-architecture 2> /dev/null) || {\n        case $(uname -m) in\n            x86_64)\n                architecture=amd64\n                ;;\n            aarch64)\n                architecture=arm64\n                ;;\n            i386)\n                architecture=i386\n                ;;\n            *)\n                err 'No \"--architecture\" specified'\n        esac\n    }\n}\n\n[ -z \"$kernel\" ] && {\n    kernel=\"linux-image-$architecture\"\n\n    [ \"$cloud_kernel\" = true ] && has_cloud_kernel && kernel=\"linux-image-cloud-$architecture\"\n    [ \"$bpo_kernel\" = true ] && has_backports && install=\"$kernel/$suite-backports $install\"\n}\n\n[ -n \"$authorized_keys_url\" ] && ! download \"$authorized_keys_url\" /dev/null &&\nerr \"Failed to download SSH authorized public keys from \\\"$authorized_keys_url\\\"\"\n\nnon_free_firmware_available=false\ncase $suite in\n    bookworm|stable|trixie|testing|sid|unstable)\n        non_free_firmware_available=true\n        ;;\n    *)\n        apt_non_free_firmware=false\nesac\n\napt_components=main\n[ \"$apt_contrib\" = true ] && apt_components=\"$apt_components contrib\"\n[ \"$apt_non_free\" = true ] && apt_components=\"$apt_components non-free\"\n[ \"$apt_non_free_firmware\" = true ] && apt_components=\"$apt_components non-free-firmware\"\n\napt_services=updates\n[ \"$apt_backports\" = true ] && apt_services=\"$apt_services, backports\"\n\ninstaller_directory=\"/boot/debian-$suite\"\n\nsave_preseed='cat'\n[ \"$dry_run\" = false ] && {\n    [ \"$(id -u)\" -ne 0 ] && err 'root privilege is required'\n    rm -rf \"$installer_directory\"\n    mkdir -p \"$installer_directory\"\n    cd \"$installer_directory\"\n    save_preseed='tee -a preseed.cfg'\n}\n\nif [ \"$account_setup\" = true ]; then\n    prompt_password\nelif [ \"$network_console\" = true ] && [ -z \"$authorized_keys_url\" ]; then\n    prompt_password \"Choose a password for the installer user of the SSH network console: \"\nfi\n\n$save_preseed << EOF\n# Localization\n\nd-i debian-installer/language string en\nd-i debian-installer/country string US\nd-i debian-installer/locale string en_US.UTF-8\nd-i keyboard-configuration/xkb-keymap select us\n\n# Network configuration\n\nd-i netcfg/choose_interface select $interface\nEOF\n\n[ -n \"$ip\" ] && {\n    echo 'd-i netcfg/disable_autoconfig boolean true' | $save_preseed\n    echo \"d-i netcfg/get_ipaddress string $ip\" | $save_preseed\n    [ -n \"$netmask\" ] && echo \"d-i netcfg/get_netmask string $netmask\" | $save_preseed\n    [ -n \"$gateway\" ] && echo \"d-i netcfg/get_gateway string $gateway\" | $save_preseed\n    [ -z \"${ip%%*:*}\" ] && [ -n \"${dns%%*:*}\" ] && dns=\"$dns6\"\n    [ -n \"$dns\" ] && echo \"d-i netcfg/get_nameservers string $dns\" | $save_preseed\n    echo 'd-i netcfg/confirm_static boolean true' | $save_preseed\n}\n\nif [ -n \"$hostname\" ]; then\n    echo \"d-i netcfg/hostname string $hostname\" | $save_preseed\n    hostname=debian\n    domain=\nelse\n    hostname=$(cat /proc/sys/kernel/hostname)\n    domain=$(cat /proc/sys/kernel/domainname)\n    if [ \"$domain\" = '(none)' ]; then\n        domain=\n    else\n        domain=\" $domain\"\n    fi\nfi\n\n$save_preseed << EOF\nd-i netcfg/get_hostname string $hostname\nd-i netcfg/get_domain string$domain\nEOF\n\necho 'd-i hw-detect/load_firmware boolean true' | $save_preseed\n\n[ \"$network_console\" = true ] && {\n    $save_preseed << 'EOF'\n\n# Network console\n\nd-i anna/choose_modules string network-console\nd-i preseed/early_command string anna-install network-console\nEOF\n    if [ -n \"$authorized_keys_url\" ]; then\n        echo \"d-i network-console/authorized_keys_url string $authorized_keys_url\" | $save_preseed\n    else\n        $save_preseed << EOF\nd-i network-console/password password $password\nd-i network-console/password-again password $password\nEOF\n    fi\n\n    echo 'd-i network-console/start select Continue' | $save_preseed\n}\n\n$save_preseed << EOF\n\n# Mirror settings\n\nd-i mirror/country string manual\nd-i mirror/protocol string $mirror_protocol\nd-i mirror/$mirror_protocol/hostname string $mirror_host\nd-i mirror/$mirror_protocol/directory string $mirror_directory\nd-i mirror/$mirror_protocol/proxy string $mirror_proxy\nd-i mirror/suite string $suite\nEOF\n\n[ \"$account_setup\" = true ] && {\n    password_hash=$(mkpasswd -m sha-256 \"$password\" 2> /dev/null) ||\n    password_hash=$(openssl passwd -5 \"$password\" 2> /dev/null) ||\n    password_hash=$(busybox mkpasswd -m sha256 \"$password\" 2> /dev/null) || {\n        for python in python3 python python2; do\n            password_hash=$(\"$python\" -c 'import crypt, sys; print(crypt.crypt(sys.argv[1], crypt.mksalt(crypt.METHOD_SHA256)))' \"$password\" 2> /dev/null) && break\n        done\n    }\n\n    $save_preseed << 'EOF'\n\n# Account setup\n\nEOF\n    [ -n \"$authorized_keys_url\" ] && configure_sshd PasswordAuthentication no\n\n    if [ \"$username\" = root ]; then\n        if [ -z \"$authorized_keys_url\" ]; then\n            configure_sshd PermitRootLogin yes\n        else\n            in_target \"mkdir -m 0700 -p ~root/.ssh && busybox wget -O- \\\"$authorized_keys_url\\\" >> ~root/.ssh/authorized_keys\"\n        fi\n\n        $save_preseed << 'EOF'\nd-i passwd/root-login boolean true\nd-i passwd/make-user boolean false\nEOF\n\n        if [ -z \"$password_hash\" ]; then\n            $save_preseed << EOF\nd-i passwd/root-password password $password\nd-i passwd/root-password-again password $password\nEOF\n        else\n            echo \"d-i passwd/root-password-crypted password $password_hash\" | $save_preseed\n        fi\n    else\n        configure_sshd PermitRootLogin no\n\n        [ -n \"$authorized_keys_url\" ] &&\n        in_target \"sudo -u $username mkdir -m 0700 -p ~$username/.ssh && busybox wget -O - \\\"$authorized_keys_url\\\" | sudo -u $username tee -a ~$username/.ssh/authorized_keys\"\n\n        [ \"$sudo_with_password\" = false ] &&\n        in_target \"echo \\\"$username ALL=(ALL:ALL) NOPASSWD:ALL\\\" > \\\"/etc/sudoers.d/90-user-$username\\\"\"\n\n        $save_preseed << EOF\nd-i passwd/root-login boolean false\nd-i passwd/make-user boolean true\nd-i passwd/user-fullname string\nd-i passwd/username string $username\nEOF\n\n        if [ -z \"$password_hash\" ]; then\n            $save_preseed << EOF\nd-i passwd/user-password password $password\nd-i passwd/user-password-again password $password\nEOF\n        else\n            echo \"d-i passwd/user-password-crypted password $password_hash\" | $save_preseed\n        fi\n    fi\n}\n\n[ -n \"$ssh_port\" ] && configure_sshd Port \"$ssh_port\"\n\n$save_preseed << EOF\n\n# Clock and time zone setup\n\nd-i time/zone string $timezone\nd-i clock-setup/utc boolean true\nd-i clock-setup/ntp boolean true\nd-i clock-setup/ntp-server string $ntp\n\n# Partitioning\n\nEOF\n\n[ \"$disk_partitioning\" = true ] && {\n    $save_preseed << 'EOF'\nd-i partman-auto/method string regular\nEOF\n    if [ -n \"$disk\" ]; then\n        echo \"d-i partman-auto/disk string $disk\" | $save_preseed\n    else\n        # shellcheck disable=SC2016\n        echo 'd-i partman/early_command string debconf-set partman-auto/disk \"$(list-devices disk | head -n 1)\"' | $save_preseed\n    fi\n}\n\n[ \"$force_gpt\" = true ] && {\n    $save_preseed << 'EOF'\nd-i partman-partitioning/choose_label string gpt\nd-i partman-partitioning/default_label string gpt\nEOF\n}\n\n[ \"$disk_partitioning\" = true ] && {\n    echo \"d-i partman/default_filesystem string $filesystem\" | $save_preseed\n\n    [ -z \"$efi\" ] && {\n        efi=false\n        [ -d /sys/firmware/efi ] && efi=true\n    }\n\n    $save_preseed << 'EOF'\nd-i partman-auto/expert_recipe string \\\n    naive :: \\\nEOF\n    if [ \"$efi\" = true ]; then\n        $save_preseed << EOF\n        $esp $esp $esp free \\\\\nEOF\n        $save_preseed << 'EOF'\n            $iflabel{ gpt } \\\n            $reusemethod{ } \\\n            method{ efi } \\\n            format{ } \\\n        . \\\nEOF\n    else\n        $save_preseed << 'EOF'\n        1 1 1 free \\\n            $iflabel{ gpt } \\\n            $reusemethod{ } \\\n            method{ biosgrub } \\\n        . \\\nEOF\n    fi\n\n    $save_preseed << 'EOF'\n        1075 1076 -1 $default_filesystem \\\n            method{ format } \\\n            format{ } \\\n            use_filesystem{ } \\\n            $default_filesystem{ } \\\n            mountpoint{ / } \\\n        .\nEOF\n    if [ \"$efi\" = true ]; then\n        echo 'd-i partman-efi/non_efi_system boolean true' | $save_preseed\n    fi\n\n    $save_preseed << 'EOF'\nd-i partman-auto/choose_recipe select naive\nd-i partman-basicfilesystems/no_swap boolean false\nd-i partman-partitioning/confirm_write_new_label boolean true\nd-i partman/choose_partition select finish\nd-i partman/confirm boolean true\nd-i partman/confirm_nooverwrite boolean true\nd-i partman-lvm/device_remove_lvm boolean true\nEOF\n}\n\n$save_preseed << EOF\n\n# Base system installation\n\nd-i base-installer/kernel/image string $kernel\nEOF\n\n[ \"$install_recommends\" = false ] && echo \"d-i base-installer/install-recommends boolean $install_recommends\" | $save_preseed\n\n[ \"$security_repository\" = mirror ] && security_repository=$mirror_protocol://$mirror_host${mirror_directory%/*}/debian-security\n\n$save_preseed << EOF\n\n# Apt setup\n\nd-i apt-setup/contrib boolean $apt_contrib\nd-i apt-setup/non-free boolean $apt_non_free\nd-i apt-setup/enable-source-repositories boolean $apt_src\nd-i apt-setup/services-select multiselect $apt_services\nEOF\n\n[ \"$non_free_firmware_available\" = true ] && echo \"d-i apt-setup/non-free-firmware boolean $apt_non_free_firmware\" | $save_preseed\n\n# If not sid/unstable\n[ -n \"$security_archive\" ] && {\n    $save_preseed << EOF\nd-i apt-setup/local0/repository string $security_repository $security_archive $apt_components\nd-i apt-setup/local0/source boolean $apt_src\nEOF\n}\n\n$save_preseed << 'EOF'\n\n# Package selection\n\ntasksel tasksel/first multiselect ssh-server\nEOF\n\ninstall=\"$install ca-certificates libpam-systemd\"\n[ -n \"$cidata\" ] && install=\"$install cloud-init\"\n\n[ -n \"$install\" ] && echo \"d-i pkgsel/include string $install\" | $save_preseed\n[ -n \"$upgrade\" ] && echo \"d-i pkgsel/upgrade select $upgrade\" | $save_preseed\n\n$save_preseed << 'EOF'\npopularity-contest popularity-contest/participate boolean false\n\n# Boot loader installation\n\nEOF\n\nif [ -n \"$disk\" ]; then\n    echo \"d-i grub-installer/bootdev string $disk\" | $save_preseed\nelse\n    echo 'd-i grub-installer/bootdev string default' | $save_preseed\nfi\n\n[ \"$force_efi_extra_removable\" = true ] && echo 'd-i grub-installer/force-efi-extra-removable boolean true' | $save_preseed\n[ -n \"$kernel_params\" ] && echo \"d-i debian-installer/add-kernel-opts string$kernel_params\" | $save_preseed\n\n$save_preseed << 'EOF'\n\n# Finishing up the installation\n\nEOF\n\n[ \"$hold\" = false ] && echo 'd-i finish-install/reboot_in_progress note' | $save_preseed\n\n[ \"$bbr\" = true ] && in_target '{ echo \"net.core.default_qdisc=fq\"; echo \"net.ipv4.tcp_congestion_control=bbr\"; } > /etc/sysctl.d/bbr.conf'\n\n[ -n \"$cidata\" ] && in_target 'echo \"{ datasource_list: [ NoCloud ], datasource: { NoCloud: { fs_label: ~ } } }\" > /etc/cloud/cloud.cfg.d/99_debi.cfg'\n\nlate_command='true'\n[ -n \"$in_target_script\" ] && late_command=\"$late_command; in-target sh -c '$in_target_script'\"\n[ -n \"$cidata\" ] && late_command=\"$late_command; mkdir -p /target/var/lib/cloud/seed/nocloud; cp -r /cidata/. /target/var/lib/cloud/seed/nocloud/\"\n\necho \"d-i preseed/late_command string $late_command\" | $save_preseed\n\n[ \"$power_off\" = true ] && echo 'd-i debian-installer/exit/poweroff boolean true' | $save_preseed\n\nsave_grub_cfg='cat'\n[ \"$dry_run\" = false ] && {\n    base_url=\"$mirror_protocol://$mirror_host$mirror_directory/dists/$suite/main/installer-$architecture/current/images/netboot/debian-installer/$architecture\"\n    [ \"$suite\" = stretch ] && [ \"$efi\" = true ] && base_url=\"$mirror_protocol://$mirror_host$mirror_directory/dists/buster/main/installer-$architecture/current/images/netboot/debian-installer/$architecture\"\n    [ \"$daily_d_i\" = true ] && base_url=\"https://d-i.debian.org/daily-images/$architecture/daily/netboot/debian-installer/$architecture\"\n    firmware_url=\"https://cdimage.debian.org/cdimage/unofficial/non-free/firmware/$suite/current/firmware.cpio.gz\"\n\n    download \"$base_url/linux\" linux\n    download \"$base_url/initrd.gz\" initrd.gz\n    [ \"$firmware\" = true ] && download \"$firmware_url\" firmware.cpio.gz\n\n    gzip -d initrd.gz\n    # cpio reads a list of file names from the standard input\n    echo preseed.cfg | cpio -o -H newc -A -F initrd\n\n    if [ -n \"$cidata\" ]; then\n        cp -r \"$cidata\" cidata\n        find cidata | cpio -o -H newc -A -F initrd\n    fi\n\n    gzip -1 initrd\n\n    mkdir -p /etc/default/grub.d\n    tee /etc/default/grub.d/zz-debi.cfg 1>&2 << EOF\nGRUB_DEFAULT=debi\nGRUB_TIMEOUT=$grub_timeout\nGRUB_TIMEOUT_STYLE=menu\nEOF\n\n    if command_exists update-grub; then\n        grub_cfg=/boot/grub/grub.cfg\n        update-grub\n    elif command_exists grub2-mkconfig; then\n        tmp=$(mktemp)\n        grep -vF zz_debi /etc/default/grub > \"$tmp\"\n        cat \"$tmp\" > /etc/default/grub\n        rm \"$tmp\"\n        # shellcheck disable=SC2016\n        echo 'zz_debi=/etc/default/grub.d/zz-debi.cfg; if [ -f \"$zz_debi\" ]; then . \"$zz_debi\"; fi' >> /etc/default/grub\n        grub_cfg=/boot/grub2/grub.cfg\n        [ -d /sys/firmware/efi ] && grub_cfg=/boot/efi/EFI/*/grub.cfg\n        grub2-mkconfig -o \"$grub_cfg\"\n    elif command_exists grub-mkconfig; then\n        tmp=$(mktemp)\n        grep -vF zz_debi /etc/default/grub > \"$tmp\"\n        cat \"$tmp\" > /etc/default/grub\n        rm \"$tmp\"\n        # shellcheck disable=SC2016\n        echo 'zz_debi=/etc/default/grub.d/zz-debi.cfg; if [ -f \"$zz_debi\" ]; then . \"$zz_debi\"; fi' >> /etc/default/grub\n        grub_cfg=/boot/grub/grub.cfg\n        grub-mkconfig -o \"$grub_cfg\"\n    else\n        err 'Could not find \"update-grub\" or \"grub2-mkconfig\" or \"grub-mkconfig\" command'\n    fi\n\n    save_grub_cfg=\"tee -a $grub_cfg\"\n}\n\nmkrelpath=$installer_directory\n[ \"$dry_run\" = true ] && mkrelpath=/boot\ninstaller_directory=$(grub-mkrelpath \"$mkrelpath\" 2> /dev/null) ||\ninstaller_directory=$(grub2-mkrelpath \"$mkrelpath\" 2> /dev/null) || {\n    err 'Could not find \"grub-mkrelpath\" or \"grub2-mkrelpath\" command'\n}\n[ \"$dry_run\" = true ] && installer_directory=\"$installer_directory/debian-$suite\"\n\nkernel_params=\"$kernel_params lowmem/low=1\"\n\n[ -n \"$force_lowmem\" ] && kernel_params=\"$kernel_params lowmem=+$force_lowmem\"\n\ninitrd=\"$installer_directory/initrd.gz\"\n[ \"$firmware\" = true ] && initrd=\"$initrd $installer_directory/firmware.cpio.gz\"\n\n$save_grub_cfg 1>&2 << EOF\nmenuentry 'Debian Installer' --id debi {\n    insmod part_msdos\n    insmod part_gpt\n    insmod ext2\n    insmod xfs\n    insmod btrfs\n    linux $installer_directory/linux$kernel_params\n    initrd $initrd\n}\nEOF\n"
        }
      ]
    }
  ]
}