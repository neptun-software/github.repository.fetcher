{
  "metadata": {
    "timestamp": 1736568795912,
    "page": 936,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sucong426/VPN",
      "stars": 1067,
      "defaultBranch": "main",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.4580078125,
          "content": "# 快速搭建个人VPN科学上网翻墙完全教程\n\n## 搭建自己的 VPN\n\n很多时候我们需要使用 Google 查询第一手资料，比如官方的文档网站，或者一些文献，虽然市面上有一些 VPN 工具，但是它们不是很稳定，并且不是很安全，比较好的方式就是自己搭建一个属于自己的 VPN 服务，自己掌控。\n\n## 优惠购买云服务器vultr\n\n在搭建之前需要一台境外的云服务器，而 [vultr](https://www.vultr.com/?ref=8872889) 服务商比较稳定，安全，相当于境内的阿里云。\n\n值得说的一点是， [vultr](https://www.vultr.com/?ref=8872889) 给新用户的福利相当给力，充值 10 美元就可以获取 100 美元，你可以点击 [vultr 专属赠送新用户 100 美元](https://www.vultr.com/?ref=8872889) 进去抢先注册。\n\n右上角有注册按钮，你也可以切换成中文界面：\n\n<img width=\"1446\" alt=\"vpn搭建教程\" src=\"https://user-images.githubusercontent.com/84239400/119019442-be0cc500-b98c-11eb-895b-0d6300dce93d.png\">\n\n![](https://user-images.githubusercontent.com/84239400/119019760-0d52f580-b98d-11eb-9837-aba0990f1dfb.png)\n\n接着使用邮箱和密码就可以注册了。\n\n![](https://user-images.githubusercontent.com/84239400/119020042-4ee3a080-b98d-11eb-8341-bfc30f4b103c.png)\n\n进去之后你可以看到这个页面，说明你已经通过 [vultr 专属优惠链接](https://www.vultr.com/?ref=8872889) 获得了 100 美元赠送的资格：\n\n![](https://user-images.githubusercontent.com/84239400/119020173-733f7d00-b98d-11eb-8ecc-a1afeb556fe6.png)\n\n现在你只要选择支付宝充值 10 美元以上，就可以获得额外赠送的 100 美元。\n\n![](https://user-images.githubusercontent.com/84239400/119020280-966a2c80-b98d-11eb-9113-8f5f0b75c5ea.png)\n\n接下来就可以在这个平台选购云服务器了。\n\n点击页面左边菜单栏的 「Products」进入服务器选购页面。\n\n### Choose Server 选择服务器\n\n选择 Cloud Compute 即可：\n\n![](https://user-images.githubusercontent.com/84239400/119020373-af72dd80-b98d-11eb-8478-02d735b82709.png)\n\n### Server Location\n\n服务器的位置，可以选择美国地区，比如纽约：\n\n![](https://user-images.githubusercontent.com/84239400/119020467-cadde880-b98d-11eb-8927-d3d837bbc20c.png)\n\n### Server Type\n\n服务器类型，CentOS 8 x64 系统：\n\n<img width=\"1297\" alt=\"vpn搭建教程\" src=\"https://user-images.githubusercontent.com/84239400/119020720-198b8280-b98e-11eb-9df3-19bf5a187a1e.png\">\n\n### Server Size\n\n内存，个人使用10G完全够用，这里选择3.5美元一个月，性价比高，注意不要选择IPv6 ONLY的，要不然无法搭建使用。\n\n<img width=\"1240\" alt=\"vpn搭建教程\" src=\"https://user-images.githubusercontent.com/84239400/119020895-4a6bb780-b98e-11eb-9ac8-3cdd4f4397de.png\">\n\n选择完了之后，下面的其它东西都不需要填，直接点击右下角 Deploy Now 就可以了：\n\n![](https://user-images.githubusercontent.com/84239400/119020981-68391c80-b98e-11eb-9f16-00c75de88eeb.png)\n\n这时候你就拥有了自己的一台云服务器了：\n\n<img width=\"1261\" alt=\"VPN搭建教程\" src=\"https://user-images.githubusercontent.com/84239400/119021075-86068180-b98e-11eb-82a9-71edb9934f23.png\">\n\n\n点击 Cloud Instance ，可以看到你服务器的 IP 地址和密码：\n\n<img width=\"1308\" alt=\"vpn搭建教程\" src=\"https://user-images.githubusercontent.com/84239400/119021183-a20a2300-b98e-11eb-8ff4-7f18d3e3bb80.png\">\n\n\n## 连接到你的服务器\n\n### windows 系统连接到 vultr 服务器\n\nwindows 可以下载[PuTTY](https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html)工具。\n\n打开之后选择 session，将你在 vultr 网上得到的服务器 ip 复制过来，输入到这里：\n\n![](https://user-images.githubusercontent.com/84239400/119023900-037fc100-b992-11eb-85ea-525a61a69657.png)\n\nPort 默认 22，Connection Type 选择 SSH，接着点击 Open，连接进去之后输入你云服务器的密码。\n\n### Linux 和 MacOS 连接到 vultr 服务器\n\nLinux 和 MacOS 可以打开终端，使用如下命令连接：\n\n```\nssh root@xx.xx.xxx.xx\n```\n\n`xx.xx.xxx.xx`就是你的服务器上的 IP 地址。\n\n连接进去之后输入 yes 后按回车，接着输入你云服务器的密码，即可使用云服务器。\n\n<img width=\"772\" alt=\"vpn搭建教程\" src=\"https://user-images.githubusercontent.com/84239400/119024049-32963280-b992-11eb-8c05-db6df1f7fbfa.png\">\n\n\n\n## 快速搭建 VPN\n\n### 安装必要的库：\n\n```\nsudo yum -y install wget gcc gcc-c++ autoconf automake make\n```\n\n### 安装 VPN 脚本 ss.sh:\n\n```\nwget –no-check-certificate -O ss.sh https://raw.githubusercontent.com/sucong426/VPN/main/ss.sh\n```\n\n### 执行脚本\n\n```\nsh ss.sh\n```\n\n<img width=\"791\" alt=\"vpn搭建教程\" src=\"https://user-images.githubusercontent.com/84239400/119024123-45a90280-b992-11eb-9ea5-514542f71594.png\">\n\n\n设置你的 VPN 密码。\n\n接着输入你 VPN 的端口，可以直接回车。\n\n接着输入加密方式，你可以选择 7:\n\n<img width=\"574\" alt=\"vpn搭建教程\" src=\"https://user-images.githubusercontent.com/84239400/119024193-59546900-b992-11eb-8d71-81681e582e38.png\">\n\n设置好了之后，按一下回车就可以开始安装，稍等一会，出现以下信息说明安装成功：\n\n<img width=\"645\" alt=\"vpn搭建教程\" src=\"https://user-images.githubusercontent.com/84239400/119024277-6bcea280-b992-11eb-90a9-7fa45cbdc97d.png\">\n\n\n这是属于你自己 VPN 的 IP 地址，端口号，密码，加密方式。把它们复制下来，然后就可以使用客户端连接这个代理从而访问Google了。\n\n复制号信息之后，服务器连接可以关掉，它会一直运行。\n\n\n\n## 开始使用 VPN\n\n### PC 端使用 VPN\n\n点击下载[shadowsocks](https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.4.0.0/Shadowsocks-4.4.0.185.zip)，可参考：[Shadowsocks Windows客户端快速使用指南](https://www.howru.cc/articles/414.html)\n\n ### 手机使用 VPN\n\n去应用市场下载 shadowsocks，配置好你自己云服务器得到的 IP 地址，端口号，密码，加密方式，开启代理即可访问。\n\n## 访问 Google\n\n速度可以：\n\n![](https://user-images.githubusercontent.com/84239400/119024332-7b4deb80-b992-11eb-8616-d63fd5aca694.png)\n\n## 更多VPN搭建教程\n- [vpn搭建教程](https://www.google.com/search?q=vpn%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B&oq=vpn%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B&aqs=chrome.0.69i59j35i39j0l3j69i60j69i65j69i60.2589j0j7&sourceid=chrome&ie=UTF-8)\n\n## 赞赏\n喜欢就给我个star或者fork一下吧❤️，谢谢！\n\n\n"
        },
        {
          "name": "ss.sh",
          "type": "blob",
          "size": 13.5185546875,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n#=================================================================#\n#   System Required:  CentOS 6+, Debian 7+, Ubuntu 12+            #\n#   Description: One click Install Shadowsocks-Python server      #\n#   Author: Teddysun <i@teddysun.com>                             #\n#   Thanks: @clowwindy <https://twitter.com/clowwindy>            #\n#   Intro:  https://teddysun.com/342.html                         #\n#=================================================================#\n\nclear\necho\necho \"#############################################################\"\necho \"# One click Install Shadowsocks-Python server               #\"\necho \"# Intro: https://teddysun.com/342.html                      #\"\necho \"# Author: Teddysun <i@teddysun.com>                         #\"\necho \"# Github: https://github.com/shadowsocks/shadowsocks        #\"\necho \"#############################################################\"\necho\n\nlibsodium_file=\"libsodium-1.0.18\"\nlibsodium_url=\"https://github.com/jedisct1/libsodium/releases/download/1.0.18-RELEASE/libsodium-1.0.18.tar.gz\"\n\n# Current folder\ncur_dir=`pwd`\n# Stream Ciphers\nciphers=(\naes-256-gcm\naes-192-gcm\naes-128-gcm\naes-256-ctr\naes-192-ctr\naes-128-ctr\naes-256-cfb\naes-192-cfb\naes-128-cfb\ncamellia-128-cfb\ncamellia-192-cfb\ncamellia-256-cfb\nchacha20-ietf-poly1305\nchacha20-ietf\nchacha20\nrc4-md5\n)\n# Color\nred='\\033[0;31m'\ngreen='\\033[0;32m'\nyellow='\\033[0;33m'\nplain='\\033[0m'\n\n# Make sure only root can run our script\n[[ $EUID -ne 0 ]] && echo -e \"[${red}Error${plain}] This script must be run as root!\" && exit 1\n\n# Disable selinux\ndisable_selinux(){\n    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then\n        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n        setenforce 0\n    fi\n}\n\n#Check system\ncheck_sys(){\n    local checkType=$1\n    local value=$2\n\n    local release=''\n    local systemPackage=''\n\n    if [[ -f /etc/redhat-release ]]; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /etc/issue; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /etc/issue; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /etc/issue; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /proc/version; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /proc/version; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /proc/version; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    fi\n\n    if [[ \"${checkType}\" == \"sysRelease\" ]]; then\n        if [ \"${value}\" == \"${release}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    elif [[ \"${checkType}\" == \"packageManager\" ]]; then\n        if [ \"${value}\" == \"${systemPackage}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n}\n\n# Get version\ngetversion(){\n    if [[ -s /etc/redhat-release ]]; then\n        grep -oE  \"[0-9.]+\" /etc/redhat-release\n    else\n        grep -oE  \"[0-9.]+\" /etc/issue\n    fi\n}\n\n# CentOS version\ncentosversion(){\n    if check_sys sysRelease centos; then\n        local code=$1\n        local version=\"$(getversion)\"\n        local main_ver=${version%%.*}\n        if [ \"$main_ver\" == \"$code\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi\n}\n\n# Get public IP address\nget_ip(){\n    local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )\n    [ ! -z ${IP} ] && echo ${IP} || echo\n}\n\nget_char(){\n    SAVEDSTTY=`stty -g`\n    stty -echo\n    stty cbreak\n    dd if=/dev/tty bs=1 count=1 2> /dev/null\n    stty -raw\n    stty echo\n    stty $SAVEDSTTY\n}\n\n# Pre-installation settings\npre_install(){\n    if check_sys packageManager yum || check_sys packageManager apt; then\n        # Not support CentOS 5\n        if centosversion 5; then\n            echo -e \"$[{red}Error${plain}] Not supported CentOS 5, please change to CentOS 6+/Debian 7+/Ubuntu 12+ and try again.\"\n            exit 1\n        fi\n    else\n        echo -e \"[${red}Error${plain}] Your OS is not supported. please change OS to CentOS/Debian/Ubuntu and try again.\"\n        exit 1\n    fi\n    # Set shadowsocks config password\n    echo \"Please enter password for shadowsocks-python\"\n    read -p \"(Default password: teddysun.com):\" shadowsockspwd\n    [ -z \"${shadowsockspwd}\" ] && shadowsockspwd=\"teddysun.com\"\n    echo\n    echo \"---------------------------\"\n    echo \"password = ${shadowsockspwd}\"\n    echo \"---------------------------\"\n    echo\n    # Set shadowsocks config port\n    while true\n    do\n    dport=$(shuf -i 9000-19999 -n 1)\n    echo \"Please enter a port for shadowsocks-python [1-65535]\"\n    read -p \"(Default port: ${dport}):\" shadowsocksport\n    [ -z \"$shadowsocksport\" ] && shadowsocksport=${dport}\n    expr ${shadowsocksport} + 1 &>/dev/null\n    if [ $? -eq 0 ]; then\n        if [ ${shadowsocksport} -ge 1 ] && [ ${shadowsocksport} -le 65535 ] && [ ${shadowsocksport:0:1} != 0 ]; then\n            echo\n            echo \"---------------------------\"\n            echo \"port = ${shadowsocksport}\"\n            echo \"---------------------------\"\n            echo\n            break\n        fi\n    fi\n    echo -e \"[${red}Error${plain}] Please enter a correct number [1-65535]\"\n    done\n\n    # Set shadowsocks config stream ciphers\n    while true\n    do\n    echo -e \"Please select stream cipher for shadowsocks-python:\"\n    for ((i=1;i<=${#ciphers[@]};i++ )); do\n        hint=\"${ciphers[$i-1]}\"\n        echo -e \"${green}${i}${plain}) ${hint}\"\n    done\n    read -p \"Which cipher you'd select(Default: ${ciphers[0]}):\" pick\n    [ -z \"$pick\" ] && pick=1\n    expr ${pick} + 1 &>/dev/null\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] Please enter a number\"\n        continue\n    fi\n    if [[ \"$pick\" -lt 1 || \"$pick\" -gt ${#ciphers[@]} ]]; then\n        echo -e \"[${red}Error${plain}] Please enter a number between 1 and ${#ciphers[@]}\"\n        continue\n    fi\n    shadowsockscipher=${ciphers[$pick-1]}\n    echo\n    echo \"---------------------------\"\n    echo \"cipher = ${shadowsockscipher}\"\n    echo \"---------------------------\"\n    echo\n    break\n    done\n\n    echo\n    echo \"Press any key to start...or Press Ctrl+C to cancel\"\n    char=`get_char`\n    # Install necessary dependencies\n    if check_sys packageManager yum; then\n        yum install -y python python-devel python-setuptools openssl openssl-devel curl wget unzip gcc automake autoconf make libtool\n    elif check_sys packageManager apt; then\n        apt-get -y update\n        apt-get -y install python python-dev python-setuptools openssl libssl-dev curl wget unzip gcc automake autoconf make libtool\n    fi\n    cd ${cur_dir}\n}\n\n# Download files\ndownload_files(){\n    # Download libsodium file\n    if ! wget --no-check-certificate -O ${libsodium_file}.tar.gz ${libsodium_url}; then\n        echo -e \"[${red}Error${plain}] Failed to download ${libsodium_file}.tar.gz!\"\n        exit 1\n    fi\n    # Download Shadowsocks file\n    if ! wget --no-check-certificate -O shadowsocks-master.zip https://github.com/shadowsocks/shadowsocks/archive/master.zip; then\n        echo -e \"[${red}Error${plain}] Failed to download shadowsocks python file!\"\n        exit 1\n    fi\n    # Download Shadowsocks init script\n    if check_sys packageManager yum; then\n        if ! wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks -O /etc/init.d/shadowsocks; then\n            echo -e \"[${red}Error${plain}] Failed to download shadowsocks chkconfig file!\"\n            exit 1\n        fi\n    elif check_sys packageManager apt; then\n        if ! wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-debian -O /etc/init.d/shadowsocks; then\n            echo -e \"[${red}Error${plain}] Failed to download shadowsocks chkconfig file!\"\n            exit 1\n        fi\n    fi\n}\n\n# Config shadowsocks\nconfig_shadowsocks(){\n    cat > /etc/shadowsocks.json<<-EOF\n{\n    \"server\":\"0.0.0.0\",\n    \"server_port\":${shadowsocksport},\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"${shadowsockspwd}\",\n    \"timeout\":300,\n    \"method\":\"${shadowsockscipher}\",\n    \"fast_open\":false\n}\nEOF\n}\n\n# Firewall set\nfirewall_set(){\n    echo -e \"[${green}Info${plain}] firewall set start...\"\n    if centosversion 6; then\n        /etc/init.d/iptables status > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            iptables -L -n | grep -i ${shadowsocksport} > /dev/null 2>&1\n            if [ $? -ne 0 ]; then\n                iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${shadowsocksport} -j ACCEPT\n                iptables -I INPUT -m state --state NEW -m udp -p udp --dport ${shadowsocksport} -j ACCEPT\n                /etc/init.d/iptables save\n                /etc/init.d/iptables restart\n            else\n                echo -e \"[${green}Info${plain}] port ${shadowsocksport} has already been set up.\"\n            fi\n        else\n            echo -e \"[${yellow}Warning${plain}] iptables looks like shutdown or not installed, please manually set it if necessary.\"\n        fi\n    elif centosversion 7; then\n        systemctl status firewalld > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            default_zone=$(firewall-cmd --get-default-zone)\n            firewall-cmd --permanent --zone=${default_zone} --add-port=${shadowsocksport}/tcp\n            firewall-cmd --permanent --zone=${default_zone} --add-port=${shadowsocksport}/udp\n            firewall-cmd --reload\n        else\n            echo -e \"[${yellow}Warning${plain}] firewalld looks like not running or not installed, please enable port ${shadowsocksport} manually if necessary.\"\n        fi\n    fi\n    echo -e \"[${green}Info${plain}] firewall set completed...\"\n}\n\n# Install Shadowsocks\ninstall(){\n    # Install libsodium\n    if [ ! -f /usr/lib/libsodium.a ]; then\n        cd ${cur_dir}\n        tar zxf ${libsodium_file}.tar.gz\n        cd ${libsodium_file}\n        ./configure --prefix=/usr && make && make install\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] libsodium install failed!\"\n            install_cleanup\n            exit 1\n        fi\n    fi\n\n    ldconfig\n    # Install Shadowsocks\n    cd ${cur_dir}\n    unzip -q shadowsocks-master.zip\n    if [ $? -ne 0 ];then\n        echo -e \"[${red}Error${plain}] unzip shadowsocks-master.zip failed! please check unzip command.\"\n        install_cleanup\n        exit 1\n    fi\n\n    cd ${cur_dir}/shadowsocks-master\n    python3 setup.py install --record /usr/local/shadowsocks_install.log\n\n    if [ -f /usr/bin/ssserver ] || [ -f /usr/local/bin/ssserver ]; then\n        chmod +x /etc/init.d/shadowsocks\n        if check_sys packageManager yum; then\n            chkconfig --add shadowsocks\n            chkconfig shadowsocks on\n        elif check_sys packageManager apt; then\n            update-rc.d -f shadowsocks defaults\n        fi\n        /etc/init.d/shadowsocks start\n    else\n        echo\n        echo -e \"[${red}Error${plain}] Shadowsocks install failed! please visit https://teddysun.com/342.html and contact.\"\n        install_cleanup\n        exit 1\n    fi\n\n    clear\n    echo\n    echo -e \"Congratulations, Shadowsocks-python server install completed!\"\n    echo -e \"Your Server IP        : \\033[41;37m $(get_ip) \\033[0m\"\n    echo -e \"Your Server Port      : \\033[41;37m ${shadowsocksport} \\033[0m\"\n    echo -e \"Your Password         : \\033[41;37m ${shadowsockspwd} \\033[0m\"\n    echo -e \"Your Encryption Method: \\033[41;37m ${shadowsockscipher} \\033[0m\"\n    echo\n    echo \"Welcome to visit:https://teddysun.com/342.html\"\n    echo \"Enjoy it!\"\n    echo\n}\n\n# Install cleanup\ninstall_cleanup(){\n    cd ${cur_dir}\n    rm -rf shadowsocks-master.zip shadowsocks-master ${libsodium_file}.tar.gz ${libsodium_file}\n}\n\n# Uninstall Shadowsocks\nuninstall_shadowsocks(){\n    printf \"Are you sure uninstall Shadowsocks? (y/n) \"\n    printf \"\\n\"\n    read -p \"(Default: n):\" answer\n    [ -z ${answer} ] && answer=\"n\"\n    if [ \"${answer}\" == \"y\" ] || [ \"${answer}\" == \"Y\" ]; then\n        ps -ef | grep -v grep | grep -i \"ssserver\" > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            /etc/init.d/shadowsocks stop\n        fi\n        if check_sys packageManager yum; then\n            chkconfig --del shadowsocks\n        elif check_sys packageManager apt; then\n            update-rc.d -f shadowsocks remove\n        fi\n        # delete config file\n        rm -f /etc/shadowsocks.json\n        rm -f /var/run/shadowsocks.pid\n        rm -f /etc/init.d/shadowsocks\n        rm -f /var/log/shadowsocks.log\n        if [ -f /usr/local/shadowsocks_install.log ]; then\n            cat /usr/local/shadowsocks_install.log | xargs rm -rf\n        fi\n        echo \"Shadowsocks uninstall success!\"\n    else\n        echo\n        echo \"uninstall cancelled, nothing to do...\"\n        echo\n    fi\n}\n\n# Install Shadowsocks-python\ninstall_shadowsocks(){\n    disable_selinux\n    pre_install\n    download_files\n    config_shadowsocks\n    if check_sys packageManager yum; then\n        firewall_set\n    fi\n    install\n    install_cleanup\n}\n\n# Initialization step\naction=$1\n[ -z $1 ] && action=install\ncase \"$action\" in\n    install|uninstall)\n        ${action}_shadowsocks\n        ;;\n    *)\n        echo \"Arguments error! [${action}]\"\n        echo \"Usage: `basename $0` [install|uninstall]\"\n    ;;\nesac\n"
        }
      ]
    }
  ]
}