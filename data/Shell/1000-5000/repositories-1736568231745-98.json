{
  "metadata": {
    "timestamp": 1736568231745,
    "page": 98,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Aloxaf/fzf-tab",
      "stars": 3514,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.005859375,
          "content": "*.zwc\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2019-2024 Aloxaf\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.89453125,
          "content": "# fzf-tab\n\n[![CI](https://github.com/Aloxaf/fzf-tab/workflows/ci/badge.svg)](https://github.com/Aloxaf/fzf-tab/actions?query=workflow%3Aci)\n[![GitHub license](https://img.shields.io/github/license/Aloxaf/fzf-tab)](https://github.com/Aloxaf/fzf-tab/blob/master/LICENSE)\n\nReplace zsh's default completion selection menu with fzf!\n\n[![asciicast](https://asciinema.org/a/293849.svg)](https://asciinema.org/a/293849)\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->\n**Table of Contents**\n\n- [fzf-tab](#fzf-tab)\n- [Install](#install)\n    - [Manual](#manual)\n    - [Antigen](#antigen)\n    - [Zinit](#zinit)\n    - [Oh-My-Zsh](#oh-my-zsh)\n    - [Prezto](#prezto)\n- [Usage](#usage)\n    - [Configure](#configure)\n    - [Tmux](#tmux)\n    - [Binary module](#binary-module)\n- [Difference from other plugins](#difference-from-other-plugins)\n- [Compatibility with other plugins](#compatibility-with-other-plugins)\n- [Related projects](#related-projects)\n\n<!-- markdown-toc end -->\n\n# Install\n\n> [!IMPORTANT]\n>\n> 1. make sure [fzf](https://github.com/junegunn/fzf)  is installed\n> 2. fzf-tab needs to be loaded after `compinit`, but before plugins which will wrap widgets, such as [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions) or [fast-syntax-highlighting](https://github.com/zdharma-continuum/fast-syntax-highlighting)\n> 3. Completions should be configured before `compinit`, as stated in the [zsh-completions manual installation guide](https://github.com/zsh-users/zsh-completions#manual-installation).\n\n### Manual\n\nFirst, clone this repository.\n\n```zsh\ngit clone https://github.com/Aloxaf/fzf-tab ~/somewhere\n```\n\nThen add the following line to your `~/.zshrc`.\n\n```zsh\nautoload -U compinit; compinit\nsource ~/somewhere/fzf-tab.plugin.zsh\n```\n\n### Antigen\n\n```zsh\nantigen bundle Aloxaf/fzf-tab\n```\n\n### Zinit\n\n```zsh\nzinit light Aloxaf/fzf-tab\n```\n\n### Oh-My-Zsh\n\nClone this repository to your custom directory and then add `fzf-tab` to your plugin list.\n\n```zsh\ngit clone https://github.com/Aloxaf/fzf-tab ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/fzf-tab\n```\n\n### Prezto\n\nClone this repository to your contrib directory and then add `fzf-tab` to your module list in `.zpreztorc`.\n\n```zsh\ngit clone https://github.com/Aloxaf/fzf-tab $ZPREZTODIR/contrib/fzf-tab\n```\n\n# Usage\n\nJust press <kbd>Tab</kbd> as usual~\n\nAvailable keybindings:\n\n- <kbd>Ctrl</kdb>+<kdb>Space</kbd>: select multiple results, can be configured by `fzf-bindings` tag\n\n- <kbd>F1</kbd>/<kbd>F2</kbd>: switch between groups, can be configured by `switch-group` tag\n\n- <kbd>/</kbd>: trigger continuous completion (useful when completing a deep path), can be configured by `continuous-trigger` tag\n\nAvailable commands:\n\n- `disable-fzf-tab`: disable fzf-tab and fallback to compsys\n\n- `enable-fzf-tab`: enable fzf-tab\n\n- `toggle-fzf-tab`: toggle the state of fzf-tab. This is also a zle widget.\n\n## Configure\n\nA common configuration is:\n\n```zsh\n# disable sort when completing `git checkout`\nzstyle ':completion:*:git-checkout:*' sort false\n# set descriptions format to enable group support\n# NOTE: don't use escape sequences (like '%F{red}%d%f') here, fzf-tab will ignore them\nzstyle ':completion:*:descriptions' format '[%d]'\n# set list-colors to enable filename colorizing\nzstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}\n# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix\nzstyle ':completion:*' menu no\n# preview directory's content with eza when completing cd\nzstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'\n# custom fzf flags\n# NOTE: fzf-tab does not follow FZF_DEFAULT_OPTS by default\nzstyle ':fzf-tab:*' fzf-flags --color=fg:1,fg+:2 --bind=tab:accept\n# To make fzf-tab follow FZF_DEFAULT_OPTS.\n# NOTE: This may lead to unexpected behavior since some flags break this plugin. See Aloxaf/fzf-tab#455.\nzstyle ':fzf-tab:*' use-fzf-default-opts yes\n# switch group using `<` and `>`\nzstyle ':fzf-tab:*' switch-group '<' '>'\n```\n\n## Tmux\n\nIf you're using tmux >= 3.2, we provide a script `ftb-tmux-popup` to make full use of it's \"popup\" feature.\n\n```zsh\nzstyle ':fzf-tab:*' fzf-command ftb-tmux-popup\n```\n\nBTW, you can also use this script outside the fzf-tab.\n\n```zsh\nls | ftb-tmux-popup\n```\n\n[![asciicast](https://asciinema.org/a/367471.svg)](https://asciinema.org/a/367471)\n\nFor more information, please see [Wiki#Configuration](https://github.com/Aloxaf/fzf-tab/wiki/Configuration).\n\n## Binary module\n\nBy default, fzf-tab uses [zsh-ls-colors](https://github.com/xPMo/zsh-ls-colors) to parse and apply ZLS_COLORS if you have set the `list-colors` tag.\n\nHowever, it is a pure zsh script and is slow if you have too many files to colorize.\nfzf-tab is shipped with a binary module to speed up this process. You can build it with `build-fzf-tab-module`, then it will be enabled automatically.\n\n# Difference from other plugins\n\nfzf-tab doesn't do \"complete\", it just shows you the results of the default completion system.\n\nSo it works EVERYWHERE (variables, function names, directory stack, in-word completion, etc.).\nAnd most of your configuration for default completion system is still valid.\n\n# Compatibility with other plugins\n\nSome plugins may also bind \"^I\" to their custom widget, like [fzf/shell/completion.zsh](https://github.com/junegunn/fzf/blob/master/shell/completion.zsh) or [ohmyzsh/lib/completion.zsh](https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/completion.zsh#L61-L73).\n\nBy default, fzf-tab will call the widget previously bound to \"^I\" to get the completion list. So there is no problem in most cases, unless fzf-tab is initialized before a plugin which doesn't handle the previous binding properly.\n\nSo if you find your fzf-tab doesn't work properly, **please make sure it is the last plugin to bind \"^I\"** (If you don't know what I mean, just put it to the end of your plugin list).\n\n# Related projects\n\n- https://github.com/lincheney/fzf-tab-completion (fzf tab completion for zsh, bash and GNU readline apps)\n"
        },
        {
          "name": "fzf-tab.plugin.zsh",
          "type": "blob",
          "size": 0.1025390625,
          "content": "0=\"${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}\"\n0=\"${${(M)0:#/*}:-$PWD/$0}\"\nsource \"${0:A:h}/fzf-tab.zsh\"\n"
        },
        {
          "name": "fzf-tab.zsh",
          "type": "blob",
          "size": 13.513671875,
          "content": "# temporarily change options\n'builtin' 'local' '-a' '_ftb_opts'\n[[ ! -o 'aliases'         ]] || _ftb_opts+=('aliases')\n[[ ! -o 'sh_glob'         ]] || _ftb_opts+=('sh_glob')\n[[ ! -o 'no_brace_expand' ]] || _ftb_opts+=('no_brace_expand')\n'builtin' 'setopt' 'no_aliases' 'no_sh_glob' 'brace_expand'\n\n# disable aliases\ntypeset _ftb_aliases=\"$(builtin alias -Lm '[^+]*')\"\nbuiltin unalias -m '[^+]*'\n\n# thanks Valodim/zsh-capture-completion\n-ftb-compadd() {\n  # parse all options\n  local -A apre hpre dscrs _oad _mesg\n  local -a isfile _opts __ expl\n  zparseopts -a _opts P:=apre p:=hpre d:=dscrs X+:=expl O:=_oad A:=_oad D:=_oad f=isfile \\\n             i: S: s: I: x:=_mesg r: R: W: F: M+: E: q e Q n U C \\\n             J:=__ V:=__ a=__ l=__ k=__ o::=__ 1=__ 2=__\n\n  # store $curcontext for further usage\n  _ftb_curcontext=${curcontext#:}\n\n  # just delegate and leave if any of -O, -A or -D are given or fzf-tab is not enabled\n  # or fzf-tab is disabled in the current context\n  if (( $#_oad != 0 || ! IN_FZF_TAB )) \\\n    || { -ftb-zstyle -m disabled-on \"any\" } \\\n    || ({ -ftb-zstyle -m disabled-on \"files\" } && [[ -n $isfile ]]); then\n    builtin compadd \"$@\"\n    return\n  fi\n\n  # store matches in $__hits and descriptions in $__dscr\n  local -a __hits __dscr\n  if (( $#dscrs == 1 )); then\n    __dscr=( \"${(@P)${(v)dscrs}}\" )\n  fi\n  builtin compadd -A __hits -D __dscr \"$@\"\n  local ret=$?\n  if (( $#__hits == 0 )); then\n    if is-at-least 5.9 && (( $#_mesg != 0 )); then\n      builtin compadd -x $_mesg\n    fi\n    return $ret\n  fi\n\n  # only store the fist `-X`\n  expl=$expl[2]\n\n  # keep order of group description\n  [[ -n $expl ]] && _ftb_groups+=$expl\n\n  # store these values in _ftb_compcap\n  local -a keys=(apre hpre PREFIX SUFFIX IPREFIX ISUFFIX)\n  local key expanded __tmp_value=$'<\\0>' # placeholder\n  for key in $keys; do\n    expanded=${(P)key}\n    if [[ -n $expanded ]]; then\n      __tmp_value+=$'\\0'$key$'\\0'$expanded\n    fi\n  done\n  if [[ -n $expl ]]; then\n    # store group index\n    __tmp_value+=$'\\0group\\0'$_ftb_groups[(ie)$expl]\n  fi\n  if [[ -n $isfile ]]; then\n    # NOTE: need a extra ${} here or ~ expansion won't work\n    __tmp_value+=$'\\0realdir\\0'${${(Qe)~${:-$IPREFIX$hpre}}}\n  fi\n  _opts+=(\"${(@kv)apre}\" \"${(@kv)hpre}\" $isfile)\n  __tmp_value+=$'\\0args\\0'${(pj:\\1:)_opts}\n\n  if (( $+builtins[fzf-tab-compcap-generate] )); then\n    fzf-tab-compcap-generate __hits __dscr __tmp_value\n  else\n    # dscr - the string to show to users\n    # word - the string to be inserted\n    local dscr word i\n    for i in {1..$#__hits}; do\n      word=$__hits[i] dscr=$__dscr[i]\n      if [[ -n $dscr ]]; then\n        dscr=${dscr//$'\\n'}\n      elif [[ -n $word ]]; then\n        dscr=$word\n      fi\n      _ftb_compcap+=$dscr$'\\2'$__tmp_value$'\\0word\\0'$word\n    done\n  fi\n\n  # tell zsh that the match is successful\n  builtin compadd \"$@\"\n}\n\n-ftb-zstyle() {\n  zstyle $1 \":fzf-tab:$_ftb_curcontext\" ${@:2}\n}\n\n-ftb-complete() {\n  local -Ua _ftb_groups\n  local choice choices _ftb_curcontext continuous_trigger print_query accept_line bs=$'\\2' nul=$'\\0'\n  local ret=0\n\n  # must run with user options; don't move `emulate -L zsh` above this line\n  (( $+builtins[fzf-tab-compcap-generate] )) && fzf-tab-compcap-generate -i\n  COLUMNS=500 _ftb__main_complete \"$@\" || ret=$?\n  (( $+builtins[fzf-tab-compcap-generate] )) && fzf-tab-compcap-generate -o\n\n  emulate -L zsh -o extended_glob\n\n  local _ftb_query _ftb_complist=() _ftb_headers=() command opts\n  -ftb-generate-complist # sets `_ftb_complist`\n\n  -ftb-zstyle -s continuous-trigger continuous_trigger || {\n    [[ $OSTYPE == msys ]] && continuous_trigger=// || continuous_trigger=/\n  }\n\n  case $#_ftb_complist in\n    0) return 1;;\n    1)\n      choices=(\"EXPECT_KEY\" \"${_ftb_compcap[1]%$bs*}\")\n      if (( _ftb_continue_last )); then\n        choices[1]=$continuous_trigger\n      fi\n      ;;\n    *)\n      if (( ! _ftb_continue_last )) \\\n        && [[ $compstate[insert] == *\"unambiguous\" ]] \\\n        && [[ -n $compstate[unambiguous] ]] \\\n        && [[ \"$compstate[unambiguous]\" != \"$compstate[quote]$IPREFIX$PREFIX$compstate[quote]\" ]]; then\n        compstate[list]=\n        compstate[insert]=unambiguous\n        _ftb_finish=1\n        return 0\n      fi\n\n      -ftb-generate-query      # sets `_ftb_query`\n      -ftb-generate-header     # sets `_ftb_headers`\n      -ftb-zstyle -s print-query print_query || print_query=alt-enter\n      -ftb-zstyle -s accept-line accept_line\n\n      choices=(\"${(@f)\"$(builtin print -rl -- $_ftb_headers $_ftb_complist | -ftb-fzf)\"}\")\n      ret=$?\n      # choices=(query_string expect_key returned_word)\n\n      # insert query string directly\n      if [[ $choices[2] == $print_query ]] || [[ -n $choices[1] && $#choices == 1 ]] ; then\n        local -A v=(\"${(@0)${_ftb_compcap[1]}}\")\n        local -a args=(\"${(@ps:\\1:)v[args]}\")\n        [[ -z $args[1] ]] && args=()  # don't pass an empty string\n        IPREFIX=$v[IPREFIX] PREFIX=$v[PREFIX] SUFFIX=$v[SUFFIX] ISUFFIX=$v[ISUFFIX]\n        # NOTE: should I use `-U` here?, ../f\\tabcd -> ../abcd\n        builtin compadd \"${args[@]:--Q}\" -Q -- $choices[1]\n\n        compstate[list]=\n        compstate[insert]=\n        if (( $#choices[1] > 0 )); then\n            compstate[insert]='1'\n            [[ $RBUFFER == ' '* ]] || compstate[insert]+=' '\n        fi\n        _ftb_finish=1\n        return $ret\n      fi\n      choices[1]=()\n\n      choices=(\"${(@)${(@)choices%$nul*}#*$nul}\")\n\n      unset CTXT\n      ;;\n  esac\n\n  if [[ -n $choices[1] && $choices[1] == $continuous_trigger ]]; then\n    typeset -gi _ftb_continue=1\n    typeset -gi _ftb_continue_last=1\n  fi\n\n  if [[ -n $choices[1] && $choices[1] == $accept_line ]]; then\n    typeset -gi _ftb_accept=1\n  fi\n  choices[1]=()\n\n  _ftb_choices=(\"${(@)choices}\")\n\n  compstate[list]=\n  compstate[insert]=\n\n  return $ret\n}\n\n_fzf-tab-apply() {\n  local choice bs=$'\\2'\n  for choice in \"$_ftb_choices[@]\"; do\n    local -A v=(\"${(@0)${_ftb_compcap[(r)${(b)choice}$bs*]#*$bs}}\")\n    local -a args=(\"${(@ps:\\1:)v[args]}\")\n    [[ -z $args[1] ]] && args=()  # don't pass an empty string\n    IPREFIX=$v[IPREFIX] PREFIX=$v[PREFIX] SUFFIX=$v[SUFFIX] ISUFFIX=$v[ISUFFIX]\n    builtin compadd \"${args[@]:--Q}\" -Q -- \"$v[word]\"\n  done\n\n  compstate[list]=\n  if (( $#_ftb_choices == 1 )); then\n    compstate[insert]='1'\n    [[ $RBUFFER == ' '* ]] || compstate[insert]+=' '\n  elif (( $#_ftb_choices > 1 )); then\n    compstate[insert]='all'\n  fi\n}\n\nfzf-tab-debug() {\n  (( $+_ftb_debug_cnt )) || typeset -gi _ftb_debug_cnt\n  local tmp=${TMPPREFIX:-/tmp/zsh}-$$-fzf-tab-$(( ++_ftb_debug_cnt )).log\n  local -i debug_fd=-1 IN_FZF_TAB=1\n  {\n    exec {debug_fd}>&2 2>| $tmp\n    local -a debug_indent; debug_indent=( '%'{3..20}'(e. .)' )\n    local PROMPT4 PS4=\"${(j::)debug_indent}+%N:%i> \"\n    functions -t -- -ftb-complete  _fzf-tab-apply fzf-tab-complete\n    {\n      echo $ZSH_NAME $ZSH_VERSION\n      echo fzf-tab: $(-ftb-version)\n      typeset -p FZF_DEFAULT_OPTS\n      echo $commands[fzf] $(fzf --version)\n    } >&2\n    zle fzf-tab-complete\n    if (( debug_fd != -1 )); then\n      zle -M \"fzf-tab-debug: Trace output left in $tmp\"\n    fi\n  } always {\n    functions +t -- -ftb-complete _fzf-tab-apply fzf-tab-complete\n    (( debug_fd != -1 )) && exec 2>&$debug_fd {debug_fd}>&-\n  }\n}\n\nfzf-tab-complete() {\n  # this name must be ugly to avoid clashes\n  local -i _ftb_continue=1 _ftb_continue_last=0 _ftb_accept=0 ret=0\n  # hide the cursor until finishing completion, so that users won't see cursor up and down\n  # NOTE: MacOS Terminal doesn't support civis & cnorm\n  echoti civis >/dev/tty 2>/dev/null\n  while (( _ftb_continue )); do\n    local _ftb_choices=() _ftb_compcap=() _ftb_finish=0\n    _ftb_continue=0\n    local IN_FZF_TAB=1\n    {\n      zle .fzf-tab-orig-$_ftb_orig_widget || ret=$?\n      if (( ! ret && ! _ftb_finish )); then\n        zle _fzf-tab-apply || ret=$?\n      fi\n    } always {\n      IN_FZF_TAB=0\n    }\n    if (( _ftb_continue )); then\n      zle .split-undo\n      zle .reset-prompt\n      zle -R\n      zle fzf-tab-dummy\n    fi\n  done\n  echoti cnorm >/dev/tty 2>/dev/null\n  zle .redisplay\n  (( _ftb_accept )) && zle .accept-line\n  return $ret\n}\n\n# this function does nothing, it is used to be wrapped by other plugins like f-sy-h.\n# this make it possible to call the wrapper function without causing any other side effects.\nfzf-tab-dummy() { }\n\nzle -N fzf-tab-debug\nzle -N fzf-tab-complete\nzle -N fzf-tab-dummy\n# this is registered as a completion widget\n# so that we can have a clean completion list to only insert the results user selected\nzle -C _fzf-tab-apply complete-word _fzf-tab-apply\n\ndisable-fzf-tab() {\n  emulate -L zsh -o extended_glob\n  (( $+_ftb_orig_widget )) || return 0\n\n  bindkey '^I' $_ftb_orig_widget\n  case $_ftb_orig_list_grouped in\n    0) zstyle ':completion:*' list-grouped false ;;\n    1) zstyle ':completion:*' list-grouped true ;;\n    2) zstyle -d ':completion:*' list-grouped ;;\n  esac\n  unset _ftb_orig_widget _ftb_orig_list_groupded\n\n  # unhook compadd so that _approximate can work properply\n  unfunction compadd 2>/dev/null\n\n  functions[_main_complete]=$functions[_ftb__main_complete]\n  functions[_approximate]=$functions[_ftb__approximate]\n\n  # Don't remove .fzf-tab-orig-$_ftb_orig_widget as we won't be able to reliably\n  # create it if enable-fzf-tab is called again.\n}\n\nenable-fzf-tab() {\n  emulate -L zsh -o extended_glob\n  (( ! $+_ftb_orig_widget )) || disable-fzf-tab\n\n  typeset -g _ftb_orig_widget=\"${${$(builtin bindkey '^I')##* }:-expand-or-complete}\"\n  if (( ! $+widgets[.fzf-tab-orig-$_ftb_orig_widget] )); then\n    # Widgets that get replaced by compinit.\n    local compinit_widgets=(\n      complete-word\n      delete-char-or-list\n      expand-or-complete\n      expand-or-complete-prefix\n      list-choices\n      menu-complete\n      menu-expand-or-complete\n      reverse-menu-complete\n    )\n    # Note: We prefix the name of the widget with '.' so that it doesn't get wrapped.\n    if [[ $widgets[$_ftb_orig_widget] == builtin &&\n            $compinit_widgets[(Ie)$_ftb_orig_widget] != 0 ]]; then\n      # We are initializing before compinit and being asked to fall back to a completion\n      # widget that isn't defined yet. Create our own copy of the widget ahead of time.\n      zle -C .fzf-tab-orig-$_ftb_orig_widget .$_ftb_orig_widget _main_complete\n    else\n      # Copy the widget before it's wrapped by zsh-autosuggestions and zsh-syntax-highlighting.\n      zle -A $_ftb_orig_widget .fzf-tab-orig-$_ftb_orig_widget\n    fi\n  fi\n\n  zstyle -t ':completion:*' list-grouped false\n  typeset -g _ftb_orig_list_grouped=$?\n\n  zstyle ':completion:*' list-grouped false\n  bindkey -M emacs '^I'  fzf-tab-complete\n  bindkey -M viins '^I'  fzf-tab-complete\n  bindkey -M emacs '^X.' fzf-tab-debug\n  bindkey -M viins '^X.' fzf-tab-debug\n\n  # make sure we can copy them\n  autoload +X -Uz _main_complete _approximate\n\n  # hook compadd\n  functions[compadd]=$functions[-ftb-compadd]\n\n  # hook _main_complete to trigger fzf-tab\n  functions[_ftb__main_complete]=$functions[_main_complete]\n  function _main_complete() { -ftb-complete \"$@\" }\n\n  # TODO: This is not a full support, see #47\n  # _approximate will also hook compadd\n  # let it call -ftb-compadd instead of builtin compadd so that fzf-tab can capture result\n  # make sure _approximate has been loaded.\n  functions[_ftb__approximate]=$functions[_approximate]\n  function _approximate() {\n    # if not called by fzf-tab, don't do anything with compadd\n    (( ! IN_FZF_TAB )) || unfunction compadd\n    _ftb__approximate\n    (( ! IN_FZF_TAB )) || functions[compadd]=$functions[-ftb-compadd]\n  }\n}\n\ntoggle-fzf-tab() {\n  emulate -L zsh -o extended_glob\n  if (( $+_ftb_orig_widget )); then\n    disable-fzf-tab\n  else\n    enable-fzf-tab\n  fi\n}\n\nbuild-fzf-tab-module() {\n  {\n    pushd -q $FZF_TAB_HOME/modules\n    if -ftb-build-module $@; then\n      print -P \"%F{green}%BThe module has been built successfully. Please restart zsh to apply it.%f%b\"\n    else\n      print -P -u2 \"%F{red}%BThe module building has failed. See the output above for details.%f%b\"\n      return 1\n    fi\n  } always {\n    popd -q\n  }\n}\n\nzmodload zsh/zutil\nzmodload zsh/mapfile\nzmodload -F zsh/stat b:zstat\n\n0=\"${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}\"\n0=\"${${(M)0:#/*}:-$PWD/$0}\"\nFZF_TAB_HOME=\"${0:A:h}\"\n\nsource \"$FZF_TAB_HOME\"/lib/zsh-ls-colors/ls-colors.zsh fzf-tab-lscolors\n\ntypeset -ga _ftb_group_colors=(\n  $'\\x1b[94m' $'\\x1b[32m' $'\\x1b[33m' $'\\x1b[35m' $'\\x1b[31m' $'\\x1b[38;5;27m' $'\\x1b[36m'\n  $'\\x1b[38;5;100m' $'\\x1b[38;5;98m' $'\\x1b[91m' $'\\x1b[38;5;80m' $'\\x1b[92m'\n  $'\\x1b[38;5;214m' $'\\x1b[38;5;165m' $'\\x1b[38;5;124m' $'\\x1b[38;5;120m'\n)\n\n# init\n() {\n  emulate -L zsh -o extended_glob\n\n  if (( ! $fpath[(I)$FZF_TAB_HOME/lib] )); then\n    fpath+=($FZF_TAB_HOME/lib)\n  fi\n\n  autoload -Uz is-at-least -- $FZF_TAB_HOME/lib/-#ftb*(:t)\n\n  if (( $+FZF_TAB_COMMAND || $+FZF_TAB_OPTS || $+FZF_TAB_QUERY || $+FZF_TAB_SINGLE_GROUP || $+fzf_tab_preview_init )) \\\n       || zstyle -m \":fzf-tab:*\" command '*' \\\n       || zstyle -m \":fzf-tab:*\" extra-opts '*'; then\n    print -P \"%F{red}%B[fzf-tab] Sorry, your configuration is not supported anymore\\n\" \\\n          \"See https://github.com/Aloxaf/fzf-tab/pull/132 for more information%f%b\"\n  fi\n\n  if [[ -n $FZF_TAB_HOME/modules/Src/aloxaf/fzftab.(so|bundle)(#qN) ]]; then\n    module_path+=(\"$FZF_TAB_HOME/modules/Src\")\n    zmodload aloxaf/fzftab\n\n    if [[ $FZF_TAB_MODULE_VERSION != \"0.2.2\" ]]; then\n      zmodload -u aloxaf/fzftab\n      local rebuild\n      print -Pn \"%F{yellow}fzftab module needs to be rebuild, rebuild now?[Y/n]:%f\"\n      read -q rebuild\n      if [[ $rebuild == y ]]; then\n        build-fzf-tab-module\n        zmodload aloxaf/fzftab\n      fi\n    fi\n  fi\n}\n\nenable-fzf-tab\nzle -N toggle-fzf-tab\n\n# restore aliases\neval \"$_ftb_aliases\"\nbuiltin unset _ftb_aliases\n\n# restore options\n(( ${#_ftb_opts} )) && setopt ${_ftb_opts[@]}\n'builtin' 'unset' '_ftb_opts'\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}