{
  "metadata": {
    "timestamp": 1736568418099,
    "page": 367,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pimusicbox/pimusicbox",
      "stars": 2030,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".env.sample",
          "type": "blob",
          "size": 0.0791015625,
          "content": "export APT_PROXY=localhost:3142\nexport MKIMG_BUILD_DIR=\nexport MKIMG_ROOTFS_DIR=\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0322265625,
          "content": "musicbox_build\n.env\ndocs/_build/\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.267578125,
          "content": "Wouter van Wijk <woutervanwijk@gmail.com> <wouter@iMac-3.local>\nWouter van Wijk <woutervanwijk@gmail.com> <wouter@iMac.local>\nMatthias Strubel <matthias.strubel@aod-rpg.de>\nNick Steel <kingosticks@gmail.com>\nJohn Cass <john.cass77@gmail.com>\nChris Gill <chris@gilly.org.uk>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 4.142578125,
          "content": "***********\nThis project is no longer maintained.\n***********\n\nThere will be no more releases and probably no more support from myself.\nThe Pi 4 and Zero W 2 do not work with the last release and I don't know\nof any workarounds.\n\nPotential alternative software (in no particular order):\n\n* `HiFiBerryOS <https://www.hifiberry.com/hifiberryos>`_ (Free, Open-Source)\n* `Volumio <https://volumio.com>`_ (Free?)\n* `Roon <https://roonlabs.com/>`_ (Non-free?)\n\nHave a suggestion/recommendation? Open a PR.\n\n\n***********\nPi MusicBox\n***********\n\nPi MusicBox is the Swiss Army Knife of streaming music on the Raspberry Pi.\nWith Pi MusicBox, you can create a cheap (Sonos-like) standalone streaming\nmusic player for Spotify and other online music services.\n\n\nMaintainer Wanted\n=================\n\nThis project is outdated and requires more work than I am currently prepared\nto invest. If you are interested in becoming the maintainer then please get\nin touch.\n\n\nFeatures\n========\n\n- Headless audio player based on `Mopidy <https://www.mopidy.com/>`_. Just\n  connect your speakers or headphones - no need for a monitor.\n- Quick and easy setup with no Linux knowledge required.\n- Stream music from Spotify, SoundCloud, Google Music and YouTube.\n- Listen to podcasts (with iTunes and Podder directories) as well as online\n  radio (TuneIn, Dirble and Soma FM).\n- Play MP3/OGG/FLAC/AAC music from your SD card, USB drives and network shares.\n- Remote controllable with a choice of browser-interfaces or with an MPD-client\n  (e.g. `MPDroid\n  <https://play.google.com/store/apps/details?id=com.namelessdev.mpdroid>`_ for\n  Android).\n- AirTunes/AirPlay and DLNA streaming from your smartphone, tablet or computer.\n- Support for all kinds of USB, HifiBerry and IQ Audio soundcards.\n- Wi-Fi support (WPA, Raspbian supported Wi-Fi adapters only)\n- Last.fm scrobbling.\n- Spotify Connect support.\n\n**Please note that Pi MusicBox does NOT currently support the Raspberry Pi 4.**\n\n\nInstallation\n============\n\n1. Download the `latest release <https://github.com/pimusicbox/pimusicbox/releases>`_.\n2. Write the image to your SD card. See `here <https://www.raspberrypi.org/documentation/installation/installing-images/README.md>`_ for details.\n3. Customise the /boot/config/settings.ini file.\n4. Boot your Raspberry Pi and wait for PiMusicbox to start.\n5. Finish configuring the system using the web settings.  \n\n\nCreating an image\n=================\n\nIf you want to build an image from source, note that the current v0.7 image is an\nincremental update of v0.6 and can be generated as follows::\n\n    # 1. Install prerequisite packages (probably not an exhaustive list, sorry....)\n    sudo apt-get install git coreutils e2fsprogs zerofree util-linux qemu-user-static latexmk python-sphinx\n\n    # 2. Download and unzip very latest project source files (use master.zip for current release)\n    wget https://github.com/pimusicbox/pimusicbox/archive/develop.zip\n    unzip develop.zip && mv pimusicbox-develop src\n\n    # 3. Download and unzip base v0.6 image\n    wget https://github.com/pimusicbox/pimusicbox/releases/download/v0.6.0/pimusicbox-0.6.0.zip\n    unzip pimusicbox-0.6.0.zip && mv musicbox0.6.img musicbox.img\n\n    # 4. Enlarge image so there is free space to work in \n    ./src/makeimage.sh musicbox.img bigger\n\n    # 5. Run update script within base image (requires sudo).\n    ./src/chroot.sh musicbox.img create_musicbox0.7.sh\n\n    # 6. Go have a cup of tea/coffee while you wait...\n\n    # 7. Shrink the image and other finishing touches\n    ./src/makeimage.sh musicbox.img finalise\n\n\nProject resources\n=================\n\n- `Website <https://pimusicbox.github.io/>`_\n- `Discussion forum <https://discourse.mopidy.com/c/pi-musicbox>`_\n- `Source code <https://github.com/pimusicbox/pimusicbox>`_\n- `Changelog <https://github.com/pimusicbox/pimusicbox/blob/develop/docs/changes.rst>`_\n- `Issue tracker <https://github.com/pimusicbox/pimusicbox/issues>`_\n- Twitter: `@PiMusicBox <https://twitter.com/pimusicbox>`_\n- Facebook: `raspberrypimusicbox <https://www.facebook.com/raspberrypimusicbox>`_\n\n\nLicense\n=======\n\nCopyright 2013-2020 Wouter van Wijk and contributors.\n\nLicensed under the Apache License, Version 2.0. See the file LICENSE for the\nfull license text.\n"
        },
        {
          "name": "chroot.sh",
          "type": "blob",
          "size": 2.1044921875,
          "content": "#!/bin/bash\n\nIMG_FILE=$1\nRUN_SCRIPT=$2\nSRC_FILES=$(cd $(dirname $0) ; pwd -P)\nROOTFS_DIR=${ROOTFS_DIR:-rootfs}\nCHROOT_CMD=/bin/bash\n\n\nif [ \"$RUN_SCRIPT\" != \"\" ]; then\n    if [ ! -f \"$SRC_FILES/$RUN_SCRIPT\" ]; then\n        echo \"** ERROR: Can't find script file '$SRC_FILES/$RUN_SCRIPT' **\"\n        exit 1\n    fi\n    CHROOT_CMD+=\" -c ./tmp/${RUN_SCRIPT}\"\nfi\nif [ ! -f \"$IMG_FILE\" ]; then\n    echo \"** ERROR: No musicbox image found **\"\n    exit 1\nfi\nsudo echo \"Info: Checking have root access to mount the disk images.\"\n\necho \"Mounting $IMG_FILE and preparing arm chroot...\"\nLOOP_DEV=$(sudo losetup -fP --show $IMG_FILE)\nmkdir -p ${ROOTFS_DIR}\nsudo mount ${LOOP_DEV}p2 ${ROOTFS_DIR}\nsudo mount ${LOOP_DEV}p1 ${ROOTFS_DIR}/boot\n\nCHROOT_MOUNTS=\"dev proc sys dev/pts\"\nfor x in $CHROOT_MOUNTS\n    do sudo mount --bind /$x ${ROOTFS_DIR}/$x/\ndone\nif [ -d \"$SRC_FILES\" ]; then\n    sudo mount --bind $SRC_FILES $ROOTFS_DIR/tmp\nfi\n# Disable preloaded shared library to get everything including networking to work on x86\nsudo mv ${ROOTFS_DIR}/etc/ld.so.preload ${ROOTFS_DIR}/etc/ld.so.preload.bak\nsudo cp $(which qemu-arm-static) ${ROOTFS_DIR}/usr/bin/\nif [ -n \"$APT_PROXY\" ]; then\n    echo \"Using APT proxy $APT_PROXY\"\n    echo \"Acquire::http { Proxy \\\"http://$APT_PROXY\\\"; };\" | \\\n        sudo tee ${ROOTFS_DIR}/etc/apt/apt.conf.d/01proxy\nfi\n# Prevent upgraded services from trying to start inside chroot.\necho \"exit 101\" | sudo tee ${ROOTFS_DIR}/usr/sbin/policy-rc.d\nsudo chmod +x ${ROOTFS_DIR}/usr/sbin/policy-rc.d\n\nfunction finish {\n    echo \"Cleaning up chroot and unmounting...\"\n    sudo mv ${ROOTFS_DIR}/etc/ld.so.preload.bak ${ROOTFS_DIR}/etc/ld.so.preload\n    sudo rm ${ROOTFS_DIR}/usr/bin/qemu-arm-static\n    sudo rm -f ${ROOTFS_DIR}/etc/apt/apt.conf.d/01proxy\n    sudo rm -f ${ROOTFS_DIR}/usr/sbin/policy-rc.d\n\n    CHROOT_MOUNTS=$(mount | grep \"${ROOTFS_DIR}\" | cut -f 3 -d ' ' | sort -r)\n    for m in $CHROOT_MOUNTS\n    do\n        echo \"Unmounting $m\"\n        sudo umount $m\n    done\n    sudo losetup -D $IMG_FILE\n    rm -rf ${ROOTFS_DIR}\n}\n\ntrap finish EXIT\necho \"Executing 'chroot ${ROOTFS_DIR} ${CHROOT_CMD}'\"\nsudo chroot ${ROOTFS_DIR} ${CHROOT_CMD}\n"
        },
        {
          "name": "create_musicbox.sh",
          "type": "blob",
          "size": 5.55859375,
          "content": "#!/bin/bash\n\n# build your own Pi MusicBox.\n# reeeeeeaaallly alpha. Also see Create Pi MusicBox.rst\n\n#Update the mount options so anyone can mount the boot partition and give everyone all permissions.\nsed -i '/mmcblk0p1\\s\\+\\/boot\\s\\+vfat/ s/defaults /defaults,user,umask=000/' /etc/fstab\n\n#make sure no unneeded packages are installed\nprintf 'APT::Install-Recommends \"0\";\\nAPT::Install-Suggests \"0\";\\n' > /etc/apt/apt.conf\n\n#Install the packages you need to continue:\napt-get update && apt-get --yes install sudo wget unzip mc\n\n#Next, issue this command to update the distribution.\n#This is good because newer versions have fixes for audio and usb-issues:\n\napt-get dist-upgrade -y\n\n#Next, configure the installation of Mopidy, the music server that is the heart of MusicBox.\n#wget -q -O - http://apt.mopidy.com/mopidy.gpg | sudo apt-key add -\n#wget -q -O /etc/apt/sources.list.d/mopidy.list http://apt.mopidy.com/mopidy.list\n\n#update time, to prevent update problems\nntpdate -u ntp.ubuntu.com\n\n#Then install all packages we need with this command:\nsudo apt-get update && sudo apt-get --yes --no-install-suggests --no-install-recommends install logrotate alsa-utils wpasupplicant gstreamer0.10-alsa ifplugd gstreamer0.10-fluendo-mp3 gstreamer0.10-tools samba dos2unix avahi-utils alsa-base cifs-utils avahi-autoipd libnss-mdns ntpdate ca-certificates ncmpcpp rpi-update alsa-firmware-loaders iw atmel-firmware firmware-atheros firmware-brcm80211 firmware-ipw2x00 firmware-iwlwifi firmware-libertas firmware-linux firmware-linux-nonfree firmware-ralink firmware-realtek zd1211-firmware iptables build-essential python-dev python-pip python-gst0.10 gstreamer0.10-plugins-good gstreamer0.10-plugins-bad gstreamer0.10-plugins-ugly usbmount monit upmpdcli watchdog dropbear mpc dosfstools\n\n#mopidy from pip\nsudo pip install -U mopidy mopidy-spotify mopidy-local-sqlite mopidy-local-whoosh mopidy-scrobbler mopidy-soundcloud mopidy-dirble mopidy-tunein mopidy-gmusic mopidy-subsonic mopidy-mobile mopidy-moped mopidy-musicbox-webclient mopidy-websettings mopidy-internetarchive mopidy-podcast mopidy-podcast-itunes mopidy-podcast-gpodder.net Mopidy-Simple-Webclient mopidy-somafm mopidy-spotify-tunigo mopidy-youtube\n\n#Google Music works a lot better if you use the development version of mopidy-gmusic:\nsudo pip install https://github.com/hechtus/mopidy-gmusic/archive/develop.zip\n\n#**Configuration and Files**\ncd /opt\n\n#Get the files of the Pi MusicBox project\nwget https://github.com/woutervanwijk/Pi-MusicBox/archive/master.zip\n\n#Unpack the zip-file and remove it if you want.\nunzip master.zip\nrm master.zip\n\n#Then go to the directory which you just unpacked, subdirectory ‘filechanges’:\ncd Pi-MusicBox-master/filechanges\n\n#Now we are going to copy some files. Backup the old ones if you’re not sure!\n#This sets up the boot and opt directories:\n#manually copy cmdline.txt and config.txt if you want\nmkdir /boot/config\ncp -R boot/config /boot/config\ncp -R opt/* /opt\n\n#Make the system work:\ncp -R etc/* /etc\n\nchmod +x /etc/network/if-up.d/iptables\nchown root:root /etc/firewall/musicbox_iptables\nchmod 600 /etc/firewall/musicbox_iptables\n\n#Next, create a symlink from the package to the /opt/defaultwebclient.\nln -fsn /usr/local/lib/python2.7/dist-packages/mopidy_musicbox_webclient/static /opt/webclient\nln -fsn /usr/local/lib/python2.7/dist-packages/mopidy_moped/static /opt/moped\nln -fsn /opt/webclient /opt/defaultwebclient\n\n#Remove the streamuris.js and point it to the file in /boot/config\nmv /usr/local/lib/python2.7/dist-packages/mopidy_musicbox_webclient/static/js/streamuris.js streamuris.bk\nln -fsn /boot/config/streamuris.js /usr/local/lib/python2.7/dist-packages/mopidy_musicbox_webclient/static/js/streamuris.js\n\n#Let everyone shutdown the system (to support it from the webclient):\nchmod u+s /sbin/shutdown\n\n#**Add the mopidy user**\n#Mopidy runs under the user mopidy. Add it.\nuseradd -m mopidy\npasswd -l mopidy\n\n#Add the user to the group audio:\nusermod -a -G audio mopidy\n\n#Create a couple of directories inside the user dir:\nmkdir -p /home/mopidy/.config/mopidy\nmkdir -p /home/mopidy/.cache/mopidy\nmkdir -p /home/mopidy/.local/share/mopidy\nchown -R mopidy:mopidy /home/mopidy\n\n#**Create Music directory for MP3/OGG/FLAC **\n#Create the directory containing the music and the one where the network share is mounted:\nmkdir -p /music/MusicBox\nmkdir -p /music/Network\nmkdir -p /music/USB\nmkdir -p /music/USB2\nmkdir -p /music/USB3\nmkdir -p /music/USB4\nchmod -R 777 /music\nchown -R mopidy:mopidy /music\n\n#Disable the SSH service for more security if you want (it can be started with an option in the configuration-file):\nupdate-rc.d ssh disable\n\n#Link the mopidy configuration to the new one in /boot/config\nln -fsn /boot/config/settings.ini /home/mopidy/.config/mopidy/mopidy.conf\nmkdir -p /var/lib/mopidy/.config/mopidy\nln -fsn /boot/config/settings.ini /var/lib/mopidy/.config/mopidy/mopidy.conf\n\n#**Optimizations**\n#For the music to play without cracks, you have to optimize your system a bit.\n#For MusicBox, these are the optimizations:\n\n#**USB Fix**\n#It's tricky to get good sound out of the Pi. For USB Audio (sound cards, etc),\n# it is essential to disable the so called FIQ_SPLIT. Why? It seems that audio\n# at high nitrates interferes with the ethernet activity, which also runs over USB.\n# These options are added at the beginning of the cmdline.txt file in /boot\nsed -i '1s/^/dwc_otg.fiq_fix_enable=1 dwc_otg.fiq_split_enable=0 smsc95xx.turbo_mode=N /' /boot/cmdline.txt\n\n#cleanup\napt-get autoremove --yes\napt-get remove --yes build-essential python-pip\napt-get clean\napt-get autoclean\n\n#other options to be done by hand. Won't do it automatically on a running system\n"
        },
        {
          "name": "create_musicbox0.7.sh",
          "type": "blob",
          "size": 8.390625,
          "content": "MIN_FREE_SPACE_KB=$(expr 1024 \\* 1024)\nPIMUSICBOX_FILES=/tmp/filechanges\nSHAIRPORT_VERSION=3.2.2\nLIBRESPOT_VERSION=v20180529-1e69138\n\nFREE_SPACE=$(df | awk '$NF == \"/\" { print $4 }')\nif [ $FREE_SPACE -lt $MIN_FREE_SPACE_KB ]; then\n    echo \"************************************************\"\n    echo \"** ERROR: Insufficient free space to upgrade  **\"\n    echo \"** Use ./makeimage.sh bigger <image_file>     **\"\n    echo \"************************************************\"\n    exit 3\nfi\n\ncd /tmp\n\n# Update system time to avoid SSL errors later.\nntpdate-debian\nservice fake-hwclock stop\napt-get install --yes --allow-unauthenticated apt-transport-https\n\n# Things we no longer need:\n# * Favourite streams now implemented with playlists.\nrm -f /boot/config/streamuris.js\n# * Device Tree now properly handles all this stuff. Revert to upstream versions.\nrm -f /etc/modules /etc/modprobe.d/*\n# * Avahi support now included in Raspbian. Revert to upstream versions.\nrm -rf /etc/avahi/*\n# * Revert to upstream shairport-sync systemV script.\nrm -f /etc/init.d/shairport-sync\n# * Upgraded musicbox distro files.\nrm -rf /opt/musicbox /opt/shairport-sync /opt/webclient /opt/defaultwebclient /opt/moped\n# * dpkg: warning: unable to delete old directory '/lib/modules/3.18.7+/kernel/drivers/net/wireless': Directory not empty\nrm -f /lib/modules/3.18.7+/kernel/drivers/net/wireless/8188eu.ko\n# Remove Mopidy APT repo details, using pip version to avoid Wheezy induced dependency hell.\nrm -f /etc/apt/sources.list.d/mopidy.list\nrm -rf /etc/mopidy/extensions.d\n\napt-key adv --keyserver pool.sks-keyservers.net --recv-keys F8E3347256922A8AE767605B7808CE96D38B9201\n\ncat << EOF > /etc/apt/sources.list.d/upmpdcli.list\ndeb https://www.lesbonscomptes.com/upmpdcli/downloads/raspbian-wheezy/ unstable main\ndeb-src https://www.lesbonscomptes.com/upmpdcli/downloads/raspbian-wheezy/ unstable main\nEOF\n\nexport DEBIAN_FRONTEND=noninteractive\napt-get update\n\n# Fix locale\napt-get install --yes locales\necho \"Europe/London\" > /etc/timezone\ndpkg-reconfigure -f noninteractive tzdata\nsed -i -e 's/en_US.UTF-8 UTF-8/# en_US.UTF-8 UTF-8/' /etc/locale.gen\nsed -i -e 's/# en_GB.UTF-8 UTF-8/en_GB.UTF-8 UTF-8/' /etc/locale.gen\necho -e 'LANG=\"en_GB.UTF-8\"\\nLANGUAGE=\"en_GB:en\"' > /etc/default/locale\ndpkg-reconfigure --frontend=noninteractive locales\nupdate-locale LANG=en_GB.UTF-8\n\napt-get remove --yes --purge python-pykka python-pylast\n# https://github.com/pimusicbox/pimusicbox/issues/316\napt-get remove --yes --purge linux-wlan-ng\n\n# Ensure we reinstall the upstream config.\napt-get install --yes -o Dpkg::Options::=\"--force-confmiss\" --reinstall avahi-daemon\n\n# Get the packages required for setting wifi region\napt-get install --yes wireless-regdb crda\n\napt-get install exfat-fuse\n\n# Upgrade!\napt-get dist-upgrade --yes -o Dpkg::Options::=\"--force-confnew\"\n\n# Build and install latest version of shairport-sync\nSHAIRPORT_BUILD_DEPS=\"build-essential xmltoman autoconf automake libdaemon-dev libasound2-dev libpopt-dev libconfig-dev libavahi-client-dev libssl-dev\"\nSHAIRPORT_RUN_DEPS=\"libc6 libconfig9 libdaemon0 libasound2 libpopt0 libavahi-common3 avahi-daemon libavahi-client3 libssl1.0.0 libtool avahi-daemon\"\napt-get install --yes $SHAIRPORT_BUILD_DEPS $SHAIRPORT_RUN_DEPS\nwget https://github.com/mikebrady/shairport-sync/archive/${SHAIRPORT_VERSION}.zip\nunzip ${SHAIRPORT_VERSION}.zip && rm ${SHAIRPORT_VERSION}.zip\npushd shairport-sync-${SHAIRPORT_VERSION}\nautoreconf -i -f\n./configure --sysconfdir=/etc --with-alsa --with-avahi --with-ssl=openssl --with-metadata --with-systemv\nmake && make install\npopd\nrm -rf shairport-sync*\n\n# Download and install Raspberry Pi Compatible ARMHF\nmkdir -p /opt/librespot\npushd /opt/librespot\nwget https://github.com/pimusicbox/librespot/releases/download/${LIBRESPOT_VERSION}/librespot-linux-armhf-raspberry_pi.zip\nunzip librespot-linux-armhf-raspberry_pi.zip\nrm librespot-linux-armhf-raspberry_pi.zip\npopd\n\n# Install mpd-watchdog (#224)\nwget https://github.com/pimusicbox/mpd-watchdog/releases/download/v0.3.0/mpd-watchdog_0.3.0-0tkem2_all.deb\ndpkg -i mpd-watchdog_0.3.0-0tkem2_all.deb\nrm mpd-watchdog_0.3.0-0tkem2_all.deb\n\n# Need these to rebuild python dependencies\nPYTHON_BUILD_DEPS=\"build-essential python-dev libffi-dev libssl-dev libxml2-dev libxmlsec1-dev\"\napt-get install --yes $PYTHON_BUILD_DEPS\n\nrm -rf /tmp/pip_build_root\n# Actually update pip from sources\ncurl https://bootstrap.pypa.io/get-pip.py | python\n# upgrade the rest\npython -m pip install --upgrade setuptools\n# Attempted workarounds for SSL/TLS issues in old Python version.\npip install --upgrade certifi urllib3[secure] requests[security] backports.ssl-match-hostname backports-abc\n# Upgrade some dependencies.\npip install --upgrade gmusicapi pykka pylast pafy youtube-dl\n# The lastest versions that are still supported in Wheezy (Gstreamer 0.10).\npip install tornado==4.4\npip install mopidy==1.1.2\npip install mopidy-musicbox-webclient==2.5.0\npip install --no-deps --upgrade https://github.com/pimusicbox/mopidy-websettings/zipball/develop\npip install mopidy-websettings==0.2.3\npip install mopidy-mopify==1.6.1\npip install mopidy-mobile==1.8.0\npip install mopidy-youtube==2.0.2\npip install mopidy-gmusic==2.0.0\npip install mopidy-spotify-web==0.3.0\npip install mopidy-spotify-tunigo==1.0.0\n# Custom version with Web API OAuth fix backported from v3.1.0\npip install --no-deps --upgrade https://github.com/pimusicbox/mopidy-spotify/zipball/backport-oauth\npip install mopidy-tunein==0.4.1\npip install mopidy-local-sqlite==1.0.0\npip install mopidy-scrobbler==1.2.0\npip install mopidy-soundcloud==2.1.0\npip install mopidy-dirble==1.3.0\npip install mopidy-podcast==2.0.2\npip install mopidy-podcast-itunes==2.0.0\npip install mopidy-internetarchive==2.0.3\npip install mopidy-tidal==0.2.2\n\n# https://github.com/pimusicbox/pimusicbox/issues/371\npip uninstall --yes mopidy-local-whoosh\npip uninstall --yes mopidy-podcast-gpodder.net\npip uninstall --yes mopidy-subsonic\n\n# Check everything except python and gstreamer is coming from pip.\nmopidy --version\nmopidy deps | grep \"/usr/lib\" | grep -v -e \"GStreamer: 0.10\" -e \"Python: CPython\" | wc -l\n\n# A bunch of reckless hacks:\n# This should fix MPDroid trying to use MPD commands unsupported by Mopidy. But MPDroid still isn't working properly.\n#sed -i 's/0.19.0/0.18.0/' /usr/local/lib/python2.7/dist-packages/mopidy/mpd/protocol/__init__.py\n# Speedup MPD connections.\nsed -i '/try:/i \\\n        # Horrible hack here:\\\n        core.library\\\n        core.history\\\n        core.mixer\\\n        core.playback\\\n        core.playlists\\\n        core.tracklist' /usr/local/lib/python2.7/dist-packages/mopidy/mpd/actor.py\n# Force YouTube to favour m4a streams as gstreamer0.10's webm support is bad/non-existent:\nsed -i '/getbestaudio(/getbestaudio(preftype=\"m4a\"/' /usr/local/lib/python2.7/dist-packages/mopidy_youtube/backend.py\n# Hide broken Spotify Web 'Genres & Moods' and 'Featured Playlists' browsing:\nsed -i '222,+3 s/^/#/' /usr/local/lib/python2.7/dist-packages/mopidy_spotify_web/library.py\nsed -i '222i ]' /usr/local/lib/python2.7/dist-packages/mopidy_spotify_web/library.py\n# Hide broken Spotify Tunigo 'Genres & Moods', 'Featured Playlists' and 'Top Lists' browsing:\nsed -i '27,+8 s/^/#/' /usr/local/lib/python2.7/dist-packages/mopidy_spotify_tunigo/library.py\n\ncp -R $PIMUSICBOX_FILES/* /\n\ndeluser --remove-home mopidy\nadduser --quiet --system --no-create-home --home /var/lib/mopidy --ingroup audio mopidy\nchown -R mopidy:audio /var/cache/mopidy\nchown -R mopidy:audio /var/lib/mopidy\nchown -R mopidy:audio /var/log/mopidy\nchown -R mopidy:audio /music/playlists\n\nMUSICBOX_SERVICES=\"ssh dropbear upmpdcli shairport-sync mpd-watchdog\"\nfor service in $MUSICBOX_SERVICES\ndo\n    update-rc.d $service disable\ndone\n\n# Update kernel as of 18/12/18 (4.14.89).\napt-get install --yes git rpi-update\nPRUNE_MODULES=1 SKIP_WARNING=1 rpi-update d916c9b6b302356c7c250eb23a25236aeadb0375\n\n# Very latest brcm wireless firmware\nwget http://archive.raspberrypi.org/debian/pool/main/f/firmware-nonfree/firmware-brcm80211_20161130-3+rpt4_all.deb\ndpkg -i firmware-brcm80211_20161130-3+rpt4_all.deb\n\n# Remove unrequired packages (#426)\napt-get remove --purge --yes xserver-common x11-xkb-utils xkb-data libxkbfile1 \\\n    dpkg-dev groff-base libaspell15 libhunspell-1.3-0 man-db debian-reference-en \\\n    debian-reference-common libicu48 binutils cpp cpp-4.6 gcc-4.6-base gcc-4.7-base \\\n    libc-dev-bin libc6-dev make m4 autotools-dev git rpi-update\n\n# Clean up.\napt-get remove --yes --purge $PYTHON_BUILD_DEPS $SHAIRPORT_BUILD_DEPS\napt-get autoremove --yes\napt-get clean\napt-get autoclean\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "doit.sh",
          "type": "blob",
          "size": 0.1875,
          "content": "#!/bin/bash\nexport APT_PROXY=localhost:3142\ncp pimusicbox-0.6.0/musicbox0.6.img .\n./pimusicbox/makeimage.sh musicbox0.6.img bigger\n./pimusicbox/chroot.sh musicbox0.6.img create_musicbox0.7.sh\n"
        },
        {
          "name": "filechanges",
          "type": "tree",
          "content": null
        },
        {
          "name": "makeimage.sh",
          "type": "blob",
          "size": 5.4765625,
          "content": "#!/bin/bash\n\nSECTOR_SIZE=512\n\nSRC_FILES=$(cd $(dirname $0) ; pwd -P)\n\nSRC_VERSION=$(cd $SRC_FILES && git describe)\nTIMESTAMP=$(date)\nVERSION=${VERSION:-${SRC_VERSION}}\nZIP_NAME=musicbox_${VERSION}.zip\nIMG_NAME=musicbox_${VERSION}.img\n\nBUILD_DIR=${MKIMG_BUILD_DIR:-musicbox_build}\nROOTFS_DIR=${MKIMG_ROOTFS_DIR:-${BUILD_DIR}/rootfs}\nOUTPUT_IMG=${BUILD_DIR}/${IMG_NAME}\n\nbigger() {\n    local IMG_FILE=$1\n    local NEW_SIZE=${2:-2200000000}\n    local NEW_SIZE_SAFE=$(echo \"$NEW_SIZE / $SECTOR_SIZE * $SECTOR_SIZE\" | bc)\n    local IMG_SIZE=$(ls -l $IMG_FILE | cut -d' ' -f5)\n    if [ ! -f \"$IMG_FILE\" ]; then\n        echo \"** ERROR: No image file found **\"\n        return\n    fi\n    if [ $NEW_SIZE_SAFE -lt $IMG_SIZE ]; then\n        echo \"** ERROR: Requested new size ($NEW_SIZE_SAFE) is smaller than current size ($IMG_SIZE) **\"\n        return\n    fi\n    local OLD_SIZE=$(ls -lh $IMG_FILE | cut -d' ' -f5)\n    sudo echo \"INFO: Enlarging $IMG_FILE...\"\n    truncate --size $NEW_SIZE_SAFE $IMG_FILE\n    local OFFSET=$(fdisk -l $IMG_FILE  | grep Linux | awk -F' '  '{print $2}')\n    local LOOP_DEV=$(sudo losetup -fP --show $IMG_FILE)\n    cat <<EOF | sudo fdisk $LOOP_DEV\nd\n2\nn\np\n2\n$OFFSET\n\nw\nEOF\n\n    sync\n    sleep 1\n    sudo partprobe $LOOP_DEV\n\n    sudo e2fsck -yf ${LOOP_DEV}p2\n    sudo resize2fs ${LOOP_DEV}p2\n    sudo losetup -D $LOOP_DEV\n\n    local NEW_SIZE=$(ls -lh $IMG_FILE | cut -d' ' -f5)\n    echo \"INFO: Increased $IMG_FILE from $OLD_SIZE to $NEW_SIZE\"\n    return 0\n}\n\n\nsmaller() {\n    local IMG_FILE=$1\n    local OLD_SIZE=$(ls -lh $IMG_FILE | cut -d' ' -f5)\n\n    if [ ! -f \"$IMG_FILE\" ]; then\n        echo \"** FATAL: No image file found **\"\n        exit 1\n    fi\n    sudo echo \"INFO: Shrinking $IMG_FILE...\"\n    local LOOP_DEV=$(sudo losetup -fP --show $IMG_FILE)\n    local PART_NUM=2\n    local ROOT_PART=${LOOP_DEV}p${PART_NUM}\n    sudo e2fsck -fy $ROOT_PART\n\n    local BLOCK_SIZE=$(sudo tune2fs -l $ROOT_PART | grep 'Block size' | awk '{print $3}')\n    local MIN_BLOCKS=$(sudo resize2fs -P $ROOT_PART | awk -F': '  '{print $2}')\n    # 20MB of extra free space\n    local EXTRA_BLOCKS=$(echo \"1024 * 1024 * 20 / $BLOCK_SIZE\" | bc)\n    local SIZE_BLOCKS=$(echo \"$MIN_BLOCKS + $EXTRA_BLOCKS\" | bc)\n    sudo resize2fs $ROOT_PART $SIZE_BLOCKS\n    sync && sleep 1\n    sudo losetup -D $LOOP_DEV\n\n    local SIZE_BYTES=$(echo \"$SIZE_BLOCKS * $BLOCK_SIZE\" | bc)\n    local FIRST_BYTE=$(sudo parted -m $IMG_FILE unit B print | tail -1 | cut -d':' -f2 | tr -d 'B')\n    local LAST_BYTE=$(echo \"$FIRST_BYTE + $SIZE_BYTES\" | bc)\n\n    sudo parted $IMG_FILE rm $PART_NUM\n    sudo parted $IMG_FILE unit B mkpart primary $FIRST_BYTE $LAST_BYTE\n    local FINAL_SIZE=$(sudo parted -m $IMG_FILE unit B print free | tail -1 | cut -d':' -f2 | tr -d 'B')\n    truncate --size $FINAL_SIZE $IMG_FILE\n    sync && sleep 1\n\n    local NEW_SIZE=$(ls -lh $IMG_FILE | cut -d' ' -f5)\n    echo \"INFO: Reduced $IMG_FILE from $OLD_SIZE to $NEW_SIZE\"\n    return 0\n}\n\n\nfinalise() {\n    local INPUT_IMG=$1\n\n    if [ -f \"$OUTPUT_IMG\" ]; then\n        echo \"INFO: Existing image found at $OUTPUT_IMG. Nothing to do.\"\n        return\n    fi\n\n    if [ ! -f \"$INPUT_IMG\" ]; then\n        echo \"** FATAL: No image found at $INPUT_IMG **\"\n        exit 1\n    fi\n    sudo echo \"INFO: Checking permission to mount the disk images.\"\n\n    echo \"INFO: Creating $OUTPUT_IMG from $INPUT_IMG...\"\n\n    rm -rf ${BUILD_DIR}\n    mkdir -p ${BUILD_DIR}\n    cp $INPUT_IMG $OUTPUT_IMG\n\n    if [ ! -f \"$OUTPUT_IMG\" ]; then\n        echo \"** FATAL: Could not create output image $OUTPUT_IMG **\"\n        exit 1\n    fi\n\n    local LOOP_DEV=$(sudo losetup -fP --show $OUTPUT_IMG)\n    local ROOT_PART=${LOOP_DEV}p2\n    mkdir -p ${ROOTFS_DIR}\n    sudo mount ${ROOT_PART} ${ROOTFS_DIR}\n\n    echo \"Musicbox ${SRC_VERSION} built on ${TIMESTAMP}\" | sudo tee ${ROOTFS_DIR}/etc/issue\n\n    echo \"INFO: Removing unnecessary files...\"\n    sudo rm -rf ${ROOTFS_DIR}/var/cache/apt/*\n    sudo rm -rf ${ROOTFS_DIR}/var/lib/apt/*\n    sudo rm -rf ${ROOTFS_DIR}/etc/dropbear/*key\n    sudo rm -rf ${ROOTFS_DIR}/tmp/*\n    sudo rm -rf ${ROOTFS_DIR}/usr/share/man/*\n    sudo rm -rf ${ROOTFS_DIR}/usr/share/doc\n    sudo rm -rf ${ROOTFS_DIR}/boot.bak\n    sudo find ${ROOTFS_DIR}/var/log -type f | sudo xargs rm -f\n    local OTHER_HOMES=$(sudo ls ${ROOTFS_DIR}/home/ | grep -v mopidy)\n    sudo rm -rf ${ROOTFS_DIR}/home/${OTHER_HOMES}\n    sudo find ${ROOTFS_DIR}/home/ -type f -name \"*.log\" | xargs rm -f\n    sudo find ${ROOTFS_DIR}/home/ -type f -name \"*_history\" | xargs rm -f\n\n    sync && sleep 1\n\n    sudo umount $ROOTFS_DIR\n    sudo e2fsck -fy $ROOT_PART\n    sudo zerofree -v $ROOT_PART\n    sudo losetup -D $OUTPUT_IMG\n    sleep 1\n    rm -rf $ROOTFS_DIR\n\n    smaller $OUTPUT_IMG\n    echo \"** Success **\"\n    return 0\n}\n\n\nrelease() {\n    pushd $SRC_FILES/docs\n    make text latexpdf > /dev/null\n    popd\n    cp $SRC_FILES/docs/_build/text/{changes,faq}.txt  $BUILD_DIR/\n    cp $SRC_FILES/docs/_build/latex/PiMusicBox.pdf  $BUILD_DIR/\n    pushd $BUILD_DIR\n    md5sum -- * > MD5SUMS\n    zip -9 $ZIP_NAME -- *\n\n    ZIP_SIZE=$(ls -lh $ZIP_NAME | cut -d' ' -f5)\n    echo \"INFO: Release $ZIP_NAME size is $ZIP_SIZE\"\n    echo \"** Success **\"\n    return 0\n}\n\nif [ \"${BASH_SOURCE[0]}\" == \"${0}\" ]; then\n    # Not sourced\n    case \"$2\" in\n        bigger)\n            bigger \"$1\"\n            ;;\n        smaller)\n            smaller \"$1\"\n            ;;\n        finalise)\n            finalise \"$1\"\n            ;;\n        release)\n            finalise \"$1\"\n            release \"$1\"\n            ;;\n        *)\n            echo \"Usage: $0 <image> bigger|smaller|finalise|release <args>\"\n            ;;\n    esac\nfi\n"
        }
      ]
    }
  ]
}