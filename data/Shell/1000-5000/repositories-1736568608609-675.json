{
  "metadata": {
    "timestamp": 1736568608609,
    "page": 675,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "aws/eks-distro",
      "stars": 1394,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03125,
          "content": "*.idea\n*.swp\n_output\n.DS_Store\n\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.3017578125,
          "content": "## Code of Conduct\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct).\nFor more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact\nopensource-codeofconduct@amazon.com with any additional questions or comments.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.0859375,
          "content": "# Contributing Guidelines\n\nThank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional\ndocumentation, we greatly value feedback and contributions from our community.\n\nPlease read through this document before submitting any issues or pull requests to ensure we have all the necessary\ninformation to effectively respond to your bug report or contribution.\n\n\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check existing open, or recently closed, issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n\n* A reproducible test case or series of steps\n* The version of our code being used\n* Any modifications you've made relevant to the bug\n* Anything unusual about your environment or deployment\n\n\n## Contributing via Pull Requests\nContributions via pull requests are much appreciated. Before sending us a pull request, please ensure that:\n\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n1. Fork the repository.\n2. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change.\n3. Ensure local tests pass.\n4. Commit to your fork using clear commit messages.\n5. Send us a pull request, answering any default questions in the pull request interface.\n6. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation.\n\nGitHub provides additional document on [forking a repository](https://help.github.com/articles/fork-a-repo/) and\n[creating a pull request](https://help.github.com/articles/creating-a-pull-request/).\n\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.\n\n\n## Code of Conduct\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct).\nFor more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact\nopensource-codeofconduct@amazon.com with any additional questions or comments.\n\n\n## Security issue notifications\nIf you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our [vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/). Please do **not** create a public github issue.\n\n\n## Licensing\n\nSee the [LICENSE](LICENSE) file for our project's licensing. We will ask you to confirm the licensing of your contribution.\n"
        },
        {
          "name": "Common.mk",
          "type": "blob",
          "size": 44.900390625,
          "content": "# Disable built-in rules and variables\nMAKEFLAGS+=--no-builtin-rules --warn-undefined-variables\nSHELL=bash\n.SHELLFLAGS:=-eu -o pipefail -c\n.SUFFIXES:\n.SECONDEXPANSION:\n\nRELEASE_BRANCH?=$(shell cat $(BASE_DIRECTORY)/release/DEFAULT_RELEASE_BRANCH)\nRELEASE_ENVIRONMENT?=development\nRELEASE?=$(shell cat $(BASE_DIRECTORY)/release/$(RELEASE_BRANCH)/$(RELEASE_ENVIRONMENT)/RELEASE)\nPROD_ECR_REG?=public.ecr.aws/eks-distro\nDEV_ECR_REG?=public.ecr.aws/h1r8a7l5\n\nGIT_HASH=eks-$(RELEASE_BRANCH)-$(RELEASE)\n\nCOMPONENT?=$(REPO_OWNER)/$(REPO)\nMAKE_ROOT=$(BASE_DIRECTORY)/projects/$(COMPONENT)\nPROJECT_PATH?=$(subst $(BASE_DIRECTORY)/,,$(MAKE_ROOT))\nBUILD_LIB=${BASE_DIRECTORY}/build/lib\nOUTPUT_BIN_DIR?=$(OUTPUT_DIR)/bin/$(REPO)\n\n#################### AWS ###########################\nAWS_REGION?=us-west-2\nAWS_ACCOUNT_ID?=$(shell aws sts get-caller-identity --query Account --output text)\nARTIFACT_BUCKET?=my-s3-bucket\nARTIFACTS_BUCKET?=$(ARTIFACT_BUCKET)\nIMAGE_REPO?=$(if $(AWS_ACCOUNT_ID),$(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com,localhost:5000)\n####################################################\n\n#################### LATEST TAG ####################\n# codebuild\nBRANCH_NAME?=main\n# prow\nPULL_BASE_REF?=main\nLATEST=latest\nifneq ($(BRANCH_NAME),main)\n\tLATEST=$(BRANCH_NAME)\nendif\nifneq ($(PULL_BASE_REF),main)\n\tLATEST=$(PULL_BASE_REF)\nendif\n####################################################\n\n#################### CODEBUILD #####################\nCODEBUILD_CI?=false\nCI?=false\nJOB_TYPE?=\nCODEBUILD_BUILD_IMAGE?=\nCLONE_URL?=$(call GET_CLONE_URL,$(REPO_OWNER),$(REPO))\n#HELM_CLONE_URL=$(call GET_CLONE_URL,$(HELM_SOURCE_OWNER),$(HELM_SOURCE_REPOSITORY))\nHELM_CLONE_URL=https://github.com/$(HELM_SOURCE_OWNER)/$(HELM_SOURCE_REPOSITORY).git\nARTIFACTS_PATH?=$(MAKE_ROOT)/_output/tar\nifeq ($(CODEBUILD_CI),true)\n\tUPLOAD_DRY_RUN=false\n\tBUILD_IDENTIFIER=$(CODEBUILD_BUILD_NUMBER)\nelse\n\tUPLOAD_DRY_RUN=$(if $(findstring postsubmit,$(JOB_TYPE)),false,true)\n\tifeq ($(CI),true)\n\t\tBUILD_IDENTIFIER=$(PROW_JOB_ID)\n\telse\n\t\tBUILD_IDENTIFIER:=$(shell date \"+%F-%s\")\n\tendif\nendif\nEXCLUDE_FROM_STAGING_BUILDSPEC?=false\nBUILDSPECS?=buildspec.yml\nBUILDSPEC_VARS_KEYS?=\nBUILDSPEC_VARS_VALUES?=\n####################################################\n\n#################### GIT ###########################\nGIT_CHECKOUT_TARGET?=$(REPO)/eks-distro-checkout-$(GIT_TAG)\nGIT_PATCH_TARGET?=$(REPO)/eks-distro-patched\nREPO_NO_CLONE?=false\nPATCHES_DIR=$(or $(wildcard $(PROJECT_ROOT)/patches),$(wildcard $(MAKE_ROOT)/patches))\nREPO_SPARSE_CHECKOUT?=\n####################################################\n\n#################### RELEASE BRANCHES ##############\nHAS_RELEASE_BRANCHES?=false\nRELEASE_BRANCH?=\nSUPPORTED_K8S_VERSIONS:=$(shell cat $(BASE_DIRECTORY)/release/SUPPORTED_RELEASE_BRANCHES)\n# Comma-separated list of Kubernetes versions to skip building artifacts for\nSKIPPED_K8S_VERSIONS?=\nBINARIES_ARE_RELEASE_BRANCHED?=true\nIS_RELEASE_BRANCH_BUILD=$(filter true,$(HAS_RELEASE_BRANCHES))\nIS_UNRELEASE_BRANCH_TARGET=$(and $(filter false,$(BINARIES_ARE_RELEASE_BRANCHED)),$(filter binaries attribution checksums,$(MAKECMDGOALS)))\nTARGETS_ALLOWED_WITH_NO_RELEASE_BRANCH?=build release clean clean-go-cache help\nMAKECMDGOALS_WITHOUT_VAR_VALUE=$(foreach t,$(MAKECMDGOALS),$(if $(findstring var-value-,$(t)),,$(t)))\nifneq ($(and $(IS_RELEASE_BRANCH_BUILD),$(or $(RELEASE_BRANCH),$(IS_UNRELEASE_BRANCH_TARGET))),)\n\tRELEASE_BRANCH_SUFFIX=$(if $(filter true,$(BINARIES_ARE_RELEASE_BRANCHED)),/$(RELEASE_BRANCH),)\n\n\tARTIFACTS_PATH:=$(ARTIFACTS_PATH)$(RELEASE_BRANCH_SUFFIX)\n\tOUTPUT_DIR?=_output$(RELEASE_BRANCH_SUFFIX)\n\tPROJECT_ROOT?=$(MAKE_ROOT)$(RELEASE_BRANCH_SUFFIX)\n\tARTIFACTS_UPLOAD_PATH?=$(PROJECT_PATH)$(RELEASE_BRANCH_SUFFIX)\n\n\t# Deps are always released branched\n\tBINARY_DEPS_DIR?=_output/$(RELEASE_BRANCH)/dependencies\n\n\t# include release branch info in latest tag\n\tLATEST_TAG?=$(GIT_TAG)-eks-$(RELEASE_BRANCH)-$(LATEST)\nelse ifneq ($(and $(IS_RELEASE_BRANCH_BUILD), $(filter-out $(TARGETS_ALLOWED_WITH_NO_RELEASE_BRANCH),$(MAKECMDGOALS_WITHOUT_VAR_VALUE))),)\n\t# if project has release branches and not calling one of the above targets\n$(error When running targets for this project other than `$(TARGETS_ALLOWED_WITH_NO_RELEASE_BRANCH)` a `RELEASE_BRANCH` is required)\nelse ifneq ($(IS_RELEASE_BRANCH_BUILD),)\n\t# project has release branches and one was not specified, trigger target for all\n\tBUILD_TARGETS=build/release-branches/all\n\tRELEASE_TARGETS=release/release-branches/all\n\n\t# avoid warnings when trying to read GIT_TAG file which wont exist when no release_branch is given\n\tGIT_TAG=non-existent\n\tOUTPUT_DIR=non-existent\nelse\n\tPROJECT_ROOT?=$(MAKE_ROOT)\n\tARTIFACTS_UPLOAD_PATH?=$(PROJECT_PATH)\n\tOUTPUT_DIR?=_output\n\tLATEST_TAG?=$(LATEST)\nendif\n\n####################################################\n\n#################### BASE IMAGES ###################\nBASE_IMAGE_REPO?=public.ecr.aws/eks-distro-build-tooling\nBASE_IMAGE_NAME?=eks-distro-minimal-base\nBASE_IMAGE_TAG_FILE?=$(BASE_DIRECTORY)/$(shell echo $(BASE_IMAGE_NAME) | tr '[:lower:]' '[:upper:]' | tr '-' '_')_TAG_FILE\nBASE_IMAGE_TAG?=$(shell cat $(BASE_IMAGE_TAG_FILE))\nBASE_IMAGE?=$(BASE_IMAGE_REPO)/$(BASE_IMAGE_NAME):$(BASE_IMAGE_TAG)\nBUILDER_IMAGE?=$(BASE_IMAGE_REPO)/$(BASE_IMAGE_NAME)-builder:$(BASE_IMAGE_TAG)\nEKS_DISTRO_BASE_IMAGE=$(BASE_IMAGE_REPO)/eks-distro-base:$(shell cat $(BASE_DIRECTORY)/EKS_DISTRO_BASE_TAG_FILE)\n####################################################\n\n#################### IMAGES ########################\nIMAGE_COMPONENT?=$(COMPONENT)\nIMAGE_OUTPUT_DIR?=/tmp\nIMAGE_OUTPUT_NAME?=$(IMAGE_NAME)\nIMAGE_TARGET?=\n\nIMAGE_NAMES?=$(REPO)\n\n# This tag is overwritten in the prow job to point to the upstream git tag and this repo's commit hash\nIMAGE_TAG?=$(GIT_TAG)-$(GIT_HASH)\n# For projects with multiple containers this is defined to override the default\n# ex: CLUSTER_API_CONTROLLER_IMAGE_COMPONENT\nIMAGE_COMPONENT_VARIABLE=$(call TO_UPPER,$(IMAGE_NAME))_IMAGE_COMPONENT\nIMAGE_REPO_COMPONENT=$(call IF_OVERRIDE_VARIABLE,$(IMAGE_COMPONENT_VARIABLE),$(IMAGE_COMPONENT))\nIMAGE=$(IMAGE_REPO)/$(IMAGE_REPO_COMPONENT):$(IMAGE_TAG)\nLATEST_IMAGE=$(IMAGE:$(lastword $(subst :, ,$(IMAGE)))=$(LATEST_TAG))\n\nIMAGE_USERADD_USER_ID?=1000\nIMAGE_USERADD_USER_NAME?=\n\n# Cache should be loaded from a number of potential sources\n# Pulls cache from the oldest (first in the list) kube version for cases where component versions match.\n# It uses the oldest, because that's the one that should be built first during the release and so be available\n# for the other release branches as a layer cache when they build the project in question. \n# - latest tag from repo, if there the latest prod image cache matches what we are about to build, that should take precedent\n# - latest tag from dev repo\n\nCOMMA=,\n\n# $1 - release branch\nCACHE_IMPORT_IMAGES=$(foreach reg,$(PROD_ECR_REG) $(DEV_ECR_REG),type=registry$(COMMA)ref=$(reg)/$(call IF_OVERRIDE_VARIABLE,$(IMAGE_COMPONENT_VARIABLE),$(IMAGE_COMPONENT)):$(GIT_TAG)-eks-$(1)-latest)\n\nOLDEST_BRANCH_WITH_SAME_GIT_TAG=$(firstword $(foreach branch,$(SUPPORTED_K8S_VERSIONS),$(if $(filter $(GIT_TAG),$(shell cat ./$(branch)/GIT_TAG)),$(branch))))\n\nIMAGE_IMPORT_CACHE?=$(call CACHE_IMPORT_IMAGES,$(OLDEST_BRANCH_WITH_SAME_GIT_TAG))\n\nBUILD_OCI_TARS?=false\n\nLOCAL_IMAGE_TARGETS=$(foreach image,$(IMAGE_NAMES),$(image)/images/amd64) $(if $(filter true,$(HAS_HELM_CHART)),helm/build,) \nIMAGE_TARGETS=$(foreach image,$(IMAGE_NAMES),$(if $(filter true,$(BUILD_OCI_TARS)),$(call IMAGE_TARGETS_FOR_NAME,$(image)),$(image)/images/push)) $(if $(filter true,$(HAS_HELM_CHART)),helm/push,) \n\n############# WINDOWS #############################\n# similar to https://github.com/kubernetes-csi/livenessprobe/blob/master/release-tools/prow.sh#L78\nWINDOWS_IMAGE_VERSIONS=1809 20H2 ltsc2022\n\n# if multiple platforms requested, remove windows since it will be\n# built by itself with a different dockerfile\nIMAGE_PLATFORMS_WITHOUT_WINDOWS=$(or $(subst windows/amd64,,$(IMAGE_PLATFORMS)),$(IMAGE_PLATFORMS))\n\n# <image>.<osversion</windows/images/push\nWINDOWS_IMAGE_BUILD_TARGETS_FOR_IMAGE=$(if $(findstring windows/amd64,$(IMAGE_PLATFORMS)) \\\n\t,$(foreach ver,$(WINDOWS_IMAGE_VERSIONS),$(IMAGE_NAME).$(ver)/windows/images/push),)\n####################################################\n\n# If running in the builder base on prow or codebuild, grab the current tag to be used when building with cgo\nCURRENT_BUILDER_BASE_TAG=$(or $(and $(wildcard /config/BUILDER_BASE_TAG_FILE),$(shell cat /config/BUILDER_BASE_TAG_FILE)),latest)\nCURRENT_BUILDER_BASE_IMAGE=$(if $(CODEBUILD_BUILD_IMAGE),$(CODEBUILD_BUILD_IMAGE),$(BASE_IMAGE_REPO)/builder-base:$(CURRENT_BUILDER_BASE_TAG))\n\n####################################################\n\n#################### HELM ##########################\nHAS_HELM_CHART?=false\nHELM_SOURCE_OWNER?=$(REPO_OWNER)\nHELM_SOURCE_REPOSITORY?=$(REPO)\nHELM_SOURCE_IMAGE_REPO?=$(IMAGE_REPO)\nHELM_GIT_TAG?=$(GIT_TAG)\nHELM_TAG?=$(GIT_TAG)-$(GIT_HASH)\nHELM_USE_UPSTREAM_IMAGE?=false\n# HELM_DIRECTORY must be a relative path from project root to the directory that contains a chart\nHELM_DIRECTORY?=.\nHELM_DESTINATION_REPOSITORY?=$(IMAGE_COMPONENT)\nHELM_IMAGE_LIST?=\nHELM_GIT_CHECKOUT_TARGET?=$(HELM_SOURCE_REPOSITORY)/eks-distro-checkout-$(HELM_GIT_TAG)\nHELM_GIT_PATCH_TARGET?=$(HELM_SOURCE_REPOSITORY)/eks-distro-helm-patched\n####################################################\n\n#### HELPERS ########\n# https://riptutorial.com/makefile/example/23643/zipping-lists\n# Used to generate binary targets based on BINARY_TARGET_FILES\nlist-rem = $(wordlist 2,$(words $1),$1)\n\npairmap = $(and $(strip $2),$(strip $3),$(call \\\n    $1,$(firstword $2),$(firstword $3)) $(call \\\n    pairmap,$1,$(call list-rem,$2),$(call list-rem,$3)))\n\ntrimap = $(and $(strip $2),$(strip $3),$(strip $4),$(call \\\n    $1,$(firstword $2),$(firstword $3),$(firstword $4)) $(call \\\n    trimap,$1,$(call list-rem,$2),$(call list-rem,$3),$(call list-rem,$4)))\n\n_pos = $(if $(filter $1,$2),$(call _pos,$1,\\\n       $(call list-rem,$2),x $3),$3)\npos = $(words $(call _pos,$1,$2,))\n\n# TODO: this exist in the gmsl, https://gmsl.sourceforge.io/\n# look into introducting gmsl for things like this\n# this function gets called a few dozen times and the alternative of using shell with tr takes\n# noticeablely longer\nTO_UPPER = $(subst a,A,$(subst b,B,$(subst c,C,$(subst d,D,$(subst e,E,$(subst \\\n\tf,F,$(subst g,G,$(subst h,H,$(subst i,I,$(subst j,J,$(subst k,K,$(subst l,L,$(subst \\\n\tm,M,$(subst n,N,$(subst o,O,$(subst p,P,$(subst q,Q,$(subst r,R,$(subst s,S,$(subst \\\n\tt,T,$(subst u,U,$(subst v,V,$(subst w,W,$(subst x,X,$(subst y,Y,$(subst z,Z,$(subst -,_,$(1))))))))))))))))))))))))))))\n\nTO_LOWER = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst \\\n\tF,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst \\\n\tM,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst \\\n\tT,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$(subst _,-,$(1))))))))))))))))))))))))))))\n\n# $1 - potential override variable name\n# $2 - value if variable not set\n# returns value of override var if one is set, otherwise returns $(2)\n# intentionally no tab/space since it would come out in the result of calling this func\nIF_OVERRIDE_VARIABLE=$(if $(filter undefined,$(origin $1)),$(2),$(value $(1)))\n\n# $1 - image name\nIMAGE_TARGETS_FOR_NAME=$(addsuffix /images/push, $(1)) $(addsuffix /images/amd64, $(1)) $(addsuffix /images/arm64, $(1))\n\n# $1 - binary file name\nFULL_FETCH_BINARIES_TARGETS=$(foreach platform,$(BINARY_PLATFORMS),$(addprefix $(BINARY_DEPS_DIR)/$(subst /,-,$(platform))/, $(1)))\n\n# Based on PROJECT_DEPENDENCIES, generate fetch binaries targets, only projects with s3 artifacts will be fetched\nPROJECT_DEPENDENCIES_TARGETS=$(foreach dep,$(PROJECT_DEPENDENCIES), \\\n\t$(eval project_path_parts:=$(subst /, ,$(dep))) \\\n\t$(eval project_path:=$(BASE_DIRECTORY)/projects/$(word 2,$(project_path_parts))/$(word 3,$(project_path_parts))) \\\n\t$(if $(or $(findstring eksd,$(dep)), \\\n\t\t$(and \\\n\t\t\t$(if $(wildcard $(project_path)),true,$(error Non-existent dependency: $(dep))), \\\n\t\t\t$(filter true,$(shell $(MAKE) -C $(project_path) var-value-HAS_S3_ARTIFACTS)) \\\n\t\t)),$(call FULL_FETCH_BINARIES_TARGETS,$(dep)),))\n\n# $1 - targets\n# $2 - platforms\nBINARY_TARGETS_FROM_FILES_PLATFORMS=$(foreach platform, $(2), $(foreach target, $(1), \\\n\t\t$(OUTPUT_BIN_DIR)/$(subst /,-,$(platform))/$(if $(findstring windows,$(platform)),$(target).exe,$(target))))\n\n# This \"function\" is used to construct the git clone URL for projects.\n# Indenting the block results in the URL getting prefixed with a\n# space, hence no indentation below.\n# $1 - repo owner\n# $2 - repo\nGET_CLONE_URL=$(shell source $(BUILD_LIB)/common.sh && build::common::get_clone_url $(1) $(2) $(AWS_REGION))\n\n# $1 - binary file name\n# $2 - go mod path for binary\n# returns full target path for given binary + go mod path\n# if the go mod path is `.` then do not prefix attribution dir, otherwise use binary name\nLICENSE_TARGET_FROM_BINARY_GO_MOD=$(call LICENSE_OUTPUT_FROM_BINARY_GO_MOD,$(1),$(2))attribution/go-license.csv\n\n# $1 - binary file name\n# $2 - go mod path for binary\n# return $1 if the go mod path is not the first, unless there is an override var for the binary\nATTRIBUTION_PREFIX_FROM_BINARY_GO_MOD=$(or \\\n\t$(call IF_OVERRIDE_VARIABLE,$(call TO_UPPER,$(1))_ATTRIBUTION_OVERRIDE,), \\\n\t$(if $(strip $(filter-out $(word 1,$(GO_MOD_PATHS)),$(2))),$(1),))\n\n# $1 - binary file name\n# $2 - go mod path for binary\n# returns full path to create attribution/licenses directory\nLICENSE_OUTPUT_FROM_BINARY_GO_MOD=$(LICENSES_OUTPUT_DIR)/$(call ADD_TRAILING_CHAR,$(call ATTRIBUTION_PREFIX_FROM_BINARY_GO_MOD,$(1),$(2)),/)\n\n# $1 - binary file name\n# $2 - go mod path for binary\n# returns attribution target for given binary + go mod path\nATTRIBUTION_TARGET_FROM_BINARY_GO_MOD=$(if $(and $(IS_RELEASE_BRANCH_BUILD),$(filter \\\n\ttrue,$(BINARIES_ARE_RELEASE_BRANCHED))),$(RELEASE_BRANCH)/,)$(call ADD_TRAILING_CHAR,$(call TO_UPPER,$(call ATTRIBUTION_PREFIX_FROM_BINARY_GO_MOD,$(1),$(2))),_)ATTRIBUTION.txt\n\n# $1 - go mod path\nGO_MOD_DOWNLOAD_TARGET_FROM_GO_MOD_PATH=$(REPO)/$(if $(filter-out .,$(1)),$(1)/,)eks-distro-go-mod-download\n\n# $1 - binary file name\nGO_MOD_TARGET_FOR_BINARY_VAR_NAME= \\\n\tGO_MOD_TARGET_FOR_BINARY_$(call TO_UPPER,$(call IF_OVERRIDE_VARIABLE,$(call TO_UPPER,$(1))_ATTRIBUTION_OVERRIDE,$(1)))\n\n# $1 - value\n# $2 - char\n# if value is non empty, add trailing $2\n# intentionally no tab/space since it would come out in the result of calling this func\nADD_TRAILING_CHAR=$(if $(1),$(1)$(2),)\n\n# check if pass variable has length of 1\nIS_ONE_WORD=$(if $(filter 1,$(words $(1))),true,false)\n\n####################################################\n\n#################### BINARIES ######################\n# if the pattern ends in the same as a previous pattern, binary must be built separately\n# if the go mod path has changed from the main, must be built separately\n# if binary is already in the BINARY_TARGET_FILES_BUILD_ALONE list do not add, but properly add source pattern and go mod\n# $1 - binary file name\n# $2 - source pattern\n# $3 - go mod path for binary\nsetup_build_alone_vs_together = \\\n\t$(eval type:=$(if $(or \\\n\t\t\t$(call IF_OVERRIDE_VARIABLE,_UNIQ_PATTERN_$(notdir $(2)),), \\\n\t\t\t$(filter-out $(word 1,$(GO_MOD_PATHS)),$(3)), \\\n\t\t\t$(filter $(1),$(BINARY_TARGET_FILES_BUILD_ALONE))) \\\n\t\t,ALONE,TOGETHER)) \\\n\t$(if $(filter $(1),$(BINARY_TARGET_FILES_BUILD_ALONE)),,$(eval BINARY_TARGET_FILES_BUILD_$(type)+=$(1))) \\\n\t$(eval SOURCE_PATTERNS_BUILD_$(type)+=$(2)) \\\n\t$(eval GO_MOD_PATHS_BUILD_$(type)+=$(3)) \\\n\t$(eval _UNIQ_PATTERN_$(notdir $(2)):=1)\n\n# Setup vars UNIQ_GO_MOD_PATHS UNIQ_GO_MOD_TARGET_FILES\n# which will store the mapping of uniq go_mod paths to first target file for respective go mod\n# $1 - binary file name\n# $2 - source pattern\n# $3 - go mod path for binary\nsetup_uniq_go_mod_license_filters = \\\n\t$(if $(call IF_OVERRIDE_VARIABLE,GO_MOD_$(subst /,_,$(3))_LICENSE_PACKAGE_FILTER,),, \\\n\t\t\t$(eval UNIQ_GO_MOD_PATHS+=$(3)) \\\n\t\t\t$(eval UNIQ_GO_MOD_TARGET_FILES+=$(1))) \\\n\t\t\t$(eval $(call GO_MOD_TARGET_FOR_BINARY_VAR_NAME,$(1))=$(3)) \\\n\t$(eval GO_MOD_$(subst /,_,$(3))_LICENSE_PACKAGE_FILTER+=$(call IF_OVERRIDE_VARIABLE,LICENSE_PACKAGE_FILTER,$(2)))\n\nBINARY_PLATFORMS?=linux/amd64 linux/arm64\nSIMPLE_CREATE_BINARIES?=true\n\nBINARY_TARGETS?=$(call BINARY_TARGETS_FROM_FILES_PLATFORMS, $(BINARY_TARGET_FILES), $(BINARY_PLATFORMS))\nBINARY_TARGET_FILES?=\nSOURCE_PATTERNS?=$(foreach _,$(BINARY_TARGET_FILES),.)\nGO_MOD_PATHS?=$(foreach _,$(BINARY_TARGET_FILES),.)\n\n# There may not any that need building alone, defining empty vars in case not set from above\nBINARY_TARGET_FILES_BUILD_ALONE?=\nSOURCE_PATTERNS_BUILD_ALONE?=\nGO_MOD_PATHS_BUILD_ALONE?=\nUNIQ_GO_MOD_PATHS?=\n$(call trimap,setup_build_alone_vs_together,$(BINARY_TARGET_FILES),$(SOURCE_PATTERNS),$(GO_MOD_PATHS))\n$(call trimap,setup_uniq_go_mod_license_filters,$(BINARY_TARGET_FILES),$(SOURCE_PATTERNS),$(GO_MOD_PATHS))\n\nGO_MOD_DOWNLOAD_TARGETS?=$(foreach path, $(UNIQ_GO_MOD_PATHS), $(call GO_MOD_DOWNLOAD_TARGET_FROM_GO_MOD_PATH,$(path)))\n\nVENDOR_UPDATE_SCRIPT?=\n#### CGO ############\nCGO_CREATE_BINARIES?=false\nCGO_SOURCE=$(OUTPUT_DIR)/source\nIS_ON_BUILDER_BASE?=$(shell if [ -f /buildkit.sh ]; then echo true; fi;)\nBUILDER_PLATFORM?=$(shell echo $$(go env GOHOSTOS)/$$(go env GOHOSTARCH))\nneeds-cgo-builder=$(and $(if $(filter true,$(CGO_CREATE_BINARIES)),true,),$(if $(filter-out $(1),$(BUILDER_PLATFORM)),true,))\nUSE_DOCKER_FOR_CGO_BUILD?=false\nDOCKER_USE_ID_FOR_LINUX=$(shell if [ \"$$(uname -s)\" = \"Linux\" ] && [ -n \"$${USER:-}\" ]; then echo \"-u $$(id -u $${USER}):$$(id -g $${USER})\"; fi)\nGO_MOD_CACHE=$(shell source $(BUILD_LIB)/common.sh && build::common::use_go_version $(GOLANG_VERSION) > /dev/null 2>&1 && go env GOMODCACHE)\nGO_BUILD_CACHE=$(shell source $(BUILD_LIB)/common.sh && build::common::use_go_version $(GOLANG_VERSION) > /dev/null 2>&1 && go env GOCACHE)\nCGO_TARGET?=\n######################\n\n#### BUILD FLAGS ####\nifeq ($(CGO_CREATE_BINARIES),true)\n\tCGO_ENABLED=1\n\tGO_LDFLAGS?=-s -w -buildid= $(EXTRA_GO_LDFLAGS)\n\tCGO_LDFLAGS?=-Wl,--build-id=none\n\tEXTRA_GOBUILD_FLAGS?=-gcflags=-trimpath=$(MAKE_ROOT) -asmflags=-trimpath=$(MAKE_ROOT)\nelse\n\tCGO_ENABLED=0\n\tGO_LDFLAGS?=-s -w -buildid= -extldflags -static $(EXTRA_GO_LDFLAGS)\n\tCGO_LDFLAGS?=\n\tEXTRA_GOBUILD_FLAGS?=\nendif\nEXTRA_GO_LDFLAGS?=\nGOBUILD_COMMAND?=build\n######################\n\n############### BINARIES DEPS ######################\nBINARY_DEPS_DIR?=$(OUTPUT_DIR)/dependencies\nPROJECT_DEPENDENCIES?=\nHANDLE_DEPENDENCIES_TARGET=handle-dependencies\n####################################################\n\n#################### LICENSES ######################\nHAS_LICENSES?=true\nATTRIBUTION_TARGETS?=$(call pairmap,ATTRIBUTION_TARGET_FROM_BINARY_GO_MOD,$(BINARY_TARGET_FILES),$(GO_MOD_PATHS))\nGATHER_LICENSES_TARGETS?=$(call pairmap,LICENSE_TARGET_FROM_BINARY_GO_MOD,$(BINARY_TARGET_FILES),$(GO_MOD_PATHS))\nLICENSES_OUTPUT_DIR?=$(OUTPUT_DIR)\nLICENSES_TARGETS_FOR_PREREQ=$(if $(filter true,$(HAS_LICENSES)),$(GATHER_LICENSES_TARGETS) \\\n\t$(foreach target,$(ATTRIBUTION_TARGETS),_output/$(target)),)\n####################################################\n\n#################### TARBALLS ######################\nHAS_S3_ARTIFACTS?=false\n\nSIMPLE_CREATE_TARBALLS?=true\nTAR_FILE_PREFIX?=$(REPO)\nFAKE_ARM_BINARIES_FOR_VALIDATION?=$(if $(filter linux/arm64,$(BINARY_PLATFORMS)),false,true)\nFAKE_ARM_IMAGES_FOR_VALIDATION?=false\nIMAGE_FORMAT?=\nIMAGE_OS?=\n####################################################\n\n#################### OTHER #########################\nKUSTOMIZE_TARGET=$(OUTPUT_DIR)/kustomize\nGIT_DEPS_DIR?=$(OUTPUT_DIR)/gitdependencies\nSPECIAL_TARGET_SECONDARY=$(strip $(PROJECT_DEPENDENCIES_TARGETS) $(GO_MOD_DOWNLOAD_TARGETS))\nSKIP_CHECKSUM_VALIDATION?=false\nIN_DOCKER_TARGETS=all-attributions all-attributions-checksums all-checksums attribution attribution-checksums binaries checksums clean clean-go-cache\n####################################################\n\n#################### LOGGING #######################\nDATE_CMD=TZ=utc $(shell if [ \"$$(uname -s)\" = \"Darwin\" ] && command -v gdate &> /dev/null; then echo gdate; else echo date; fi)\nDATE_NANO=$(shell if [ \"$$(uname -s)\" = \"Linux\" ] || command -v gdate &> /dev/null; then echo %3N; fi)\nTARGET_START_LOG?=$(eval _START_TIME:=$(shell $(DATE_CMD) +%s.$(DATE_NANO)))\\\\n------------------- $(shell $(DATE_CMD) +\"%Y-%m-%dT%H:%M:%S.$(DATE_NANO)%z\") Starting target=$@ -------------------\nTARGET_END_LOG?=\"------------------- `$(DATE_CMD) +'%Y-%m-%dT%H:%M:%S.$(DATE_NANO)%z'` Finished target=$@ duration=`echo $$($(DATE_CMD) +%s.$(DATE_NANO)) - $(_START_TIME) | bc` seconds -------------------\\\\n\"\n####################################################\n\n#################### TARGETS FOR OVERRIDING ########\nBUILD_TARGETS?=validate-checksums attribution $(if $(IMAGE_NAMES),local-images,) $(if $(filter true,$(HAS_HELM_CHART)),helm/build,) $(if $(filter true,$(HAS_S3_ARTIFACTS)),upload-artifacts,) attribution-pr\nRELEASE_TARGETS?=validate-checksums $(if $(IMAGE_NAMES),images,) $(if $(filter true,$(HAS_HELM_CHART)),helm/push,) $(if $(filter true,$(HAS_S3_ARTIFACTS)),upload-artifacts,)\n####################################################\n\ndefine BUILDCTL\n\t\t$(BUILD_LIB)/buildkit.sh \\\n\t\t\tbuild \\\n\t\t\t--frontend dockerfile.v0 \\\n\t\t\t--opt platform=$(IMAGE_PLATFORMS_WITHOUT_WINDOWS:,=) \\\n\t\t\t--opt build-arg:BASE_IMAGE=$(BASE_IMAGE) \\\n\t\t\t--opt build-arg:BUILDER_IMAGE=$(BUILDER_IMAGE) \\\n\t\t\t$(foreach BUILD_ARG,$(IMAGE_BUILD_ARGS),--opt build-arg:$(BUILD_ARG)=$($(BUILD_ARG))) \\\n\t\t\t--progress plain \\\n\t\t\t--local dockerfile=$(DOCKERFILE_FOLDER) \\\n\t\t\t--local context=$(IMAGE_CONTEXT_DIR) \\\n\t\t\t$(if $(filter push=true,$(IMAGE_OUTPUT)),--export-cache type=inline,) \\\n\t\t\t$(foreach IMPORT_CACHE,$(IMAGE_IMPORT_CACHE),--import-cache $(IMPORT_CACHE)) \\\n\t\t\t$(if $(IMAGE_METADATA_FILE),--metadata-file $(IMAGE_METADATA_FILE),) \\\n\t\t\t--opt target=$(IMAGE_TARGET) \\\n\t\t\t--output type=$(IMAGE_OUTPUT_TYPE),oci-mediatypes=true,\\\"name=$(ALL_IMAGE_TAGS)\\\",$(IMAGE_OUTPUT)\nendef\n\ndefine CGO_DOCKER\n\tsource $(BUILD_LIB)/common.sh && build::docker::retry_pull --platform $(IMAGE_PLATFORMS) $(BUILDER_IMAGE); \\\n\tINTERACTIVE=\"$(shell if [ -t 0 ]; then echo '-it'; fi)\"; \\\n\tdocker run --rm $$INTERACTIVE -w /eks-distro/projects/$(COMPONENT) $(DOCKER_USE_ID_FOR_LINUX) \\\n\t\t--mount type=bind,source=$(BASE_DIRECTORY),target=/eks-distro \\\n\t\t--mount type=bind,source=$(GO_MOD_CACHE),target=/mod-cache \\\n\t\t-e GOPROXY=$(GOPROXY) -e GOMODCACHE=/mod-cache \\\n\t\t--platform $(IMAGE_PLATFORMS) \\\n\t\t--init $(BUILDER_IMAGE) make $(CGO_TARGET) BINARY_PLATFORMS=$(IMAGE_PLATFORMS)\nendef\n\ndefine SIMPLE_CREATE_BINARIES_SHELL\n\t$(BASE_DIRECTORY)/build/lib/simple_create_binaries.sh $(MAKE_ROOT) $(MAKE_ROOT)/$(OUTPUT_PATH) $(REPO) $(GOLANG_VERSION) $(PLATFORM) \"$(SOURCE_PATTERN)\" \\\n\t\t\"$(GOBUILD_COMMAND)\" \"$(EXTRA_GOBUILD_FLAGS)\" \"$(GO_LDFLAGS)\" $(CGO_ENABLED) \"$(CGO_LDFLAGS)\" \"$(GO_MOD_PATH)\" \"$(BINARY_TARGET_FILES_BUILD_TOGETHER)\"\nendef\n\n# $1 - make target\n# $2 - target directory\ndefine CGO_CREATE_BINARIES_SHELL\n\t$(MAKE) binary-builder/cgo/$(PLATFORM:linux/%=%) IMAGE_OUTPUT=dest=$(OUTPUT_BIN_DIR)/$(2) CGO_TARGET=$(1) IMAGE_BUILD_ARGS=\"GOPROXY COMPONENT CGO_TARGET\"\nendef\n\ndefine WRITE_LOCAL_IMAGE_TAG\n\techo $(IMAGE_TAG) > $(IMAGE_OUTPUT_DIR)/$(IMAGE_OUTPUT_NAME).docker_tag\n\techo $(IMAGE) > $(IMAGE_OUTPUT_DIR)/$(IMAGE_OUTPUT_NAME).docker_image_name\t\nendef\n\n# Do not binary deps + go mod download file as intermediate files\nifneq ($(SPECIAL_TARGET_SECONDARY),)\n.SECONDARY: $(SPECIAL_TARGET_SECONDARY)\nendif\n\n#### Source repo + binary Targets\nifneq ($(REPO_NO_CLONE),true)\n$(REPO):\n\t@echo -e $(call TARGET_START_LOG)\nifneq ($(REPO_SPARSE_CHECKOUT),)\n\tsource $(BUILD_LIB)/common.sh && retry git clone --depth 1 --filter=blob:none --sparse -b $(GIT_TAG) $(CLONE_URL) $(REPO)\n\tgit -C $(REPO) sparse-checkout set $(REPO_SPARSE_CHECKOUT) --cone --skip-checks\nelse\n\tsource $(BUILD_LIB)/common.sh && retry git clone $(CLONE_URL) $(REPO)\nendif\n\t@echo -e $(call TARGET_END_LOG)\nendif\n\n$(GIT_CHECKOUT_TARGET): | $(REPO)\n\t@echo -e $(call TARGET_START_LOG)\n\t@rm -f $(REPO)/eks-distro-*\n\t(cd $(REPO) && $(BASE_DIRECTORY)/build/lib/wait_for_tag.sh $(GIT_TAG))\n\tgit -C $(REPO) checkout --quiet -f $(GIT_TAG)\n\t@touch $@\n\t@echo -e $(call TARGET_END_LOG)\n\n$(GIT_PATCH_TARGET): $(GIT_CHECKOUT_TARGET)\n\t@echo -e $(call TARGET_START_LOG)\n\tgit -C $(REPO) config user.email prow@amazonaws.com\n\tgit -C $(REPO) config user.name \"Prow Bot\"\n\tif [ -n \"$(PATCHES_DIR)\" ]; then git -C $(REPO) am --committer-date-is-author-date $(PATCHES_DIR)/*; fi\n\t@touch $@\n\t@echo -e $(call TARGET_END_LOG)\n\n\n## GO mod download targets\n$(REPO)/%ks-distro-go-mod-download: REPO_SUBPATH=$(if $(filter e,$*),,$(*:%/e=%))\n$(REPO)/%ks-distro-go-mod-download: $(if $(PATCHES_DIR),$(GIT_PATCH_TARGET),$(GIT_CHECKOUT_TARGET))\n\t@echo -e $(call TARGET_START_LOG)\n\t$(BASE_DIRECTORY)/build/lib/go_mod_download.sh $(MAKE_ROOT) $(REPO) $(GIT_TAG) $(GOLANG_VERSION) \"$(REPO_SUBPATH)\"\n\t@touch $@\n\t@echo -e $(call TARGET_END_LOG)\n\nifneq ($(REPO),$(HELM_SOURCE_REPOSITORY))\n$(HELM_SOURCE_REPOSITORY):\n\tgit clone $(HELM_CLONE_URL) $(HELM_SOURCE_REPOSITORY)\nendif\n\nifneq ($(GIT_TAG),$(HELM_GIT_TAG))\n$(HELM_GIT_CHECKOUT_TARGET): | $(HELM_SOURCE_REPOSITORY)\n\t@echo rm -f $(HELM_SOURCE_REPOSITORY)/eks-distro-*\n\t(cd $(HELM_SOURCE_REPOSITORY) && $(BASE_DIRECTORY)/build/lib/wait_for_tag.sh $(HELM_GIT_TAG))\n\tgit -C $(HELM_SOURCE_REPOSITORY) checkout -f $(HELM_GIT_TAG)\n\ttouch $@\nendif\n\n$(HELM_GIT_PATCH_TARGET): $(HELM_GIT_CHECKOUT_TARGET)\n\tgit -C $(HELM_SOURCE_REPOSITORY) config user.email prow@amazonaws.com\n\tgit -C $(HELM_SOURCE_REPOSITORY) config user.name \"Prow Bot\"\n\tgit -C $(HELM_SOURCE_REPOSITORY) am --committer-date-is-author-date $(wildcard $(PROJECT_ROOT)/helm/patches)/*\n\t@touch $@\n\nifeq ($(SIMPLE_CREATE_BINARIES),true)\n# GO_MOD_TARGET_FOR_BINARY_<binary> variables are created earlier in the makefile when determining which binaries can be built together vs alone\n# if target is included in BINARY_TARGET_FILES_BUILD_TOGETHER list, use SOURCE_PATTERNS_BUILD_TOGETHER, otherewise use source pattern at the same index as binary_target in binary_target_files\n$(OUTPUT_BIN_DIR)/%: PLATFORM=$(subst -,/,$(*D))\n$(OUTPUT_BIN_DIR)/%: BINARY_TARGET=$(@F:%.exe=%)\n$(OUTPUT_BIN_DIR)/%: SOURCE_PATTERN=$(if $(filter $(BINARY_TARGET),$(BINARY_TARGET_FILES_BUILD_TOGETHER)),$(SOURCE_PATTERNS_BUILD_TOGETHER),$(word $(call pos,$(BINARY_TARGET),$(BINARY_TARGET_FILES)),$(SOURCE_PATTERNS)))\n$(OUTPUT_BIN_DIR)/%: OUTPUT_PATH=$(if $(and $(if $(filter false,$(call IS_ONE_WORD,$(BINARY_TARGET_FILES_BUILD_TOGETHER))),$(filter $(BINARY_TARGET),$(BINARY_TARGET_FILES_BUILD_TOGETHER)))),$(@D)/,$@)\n$(OUTPUT_BIN_DIR)/%: GO_MOD_PATH=$($(call GO_MOD_TARGET_FOR_BINARY_VAR_NAME,$(BINARY_TARGET)))\n$(OUTPUT_BIN_DIR)/%: $$(call GO_MOD_DOWNLOAD_TARGET_FROM_GO_MOD_PATH,$$(GO_MOD_PATH))\n\t@echo -e $(call TARGET_START_LOG)\n\t$(if $(filter true,$(call needs-cgo-builder,$(PLATFORM))),$(call CGO_CREATE_BINARIES_SHELL,$@,$(*D)),$(call SIMPLE_CREATE_BINARIES_SHELL))\n\t@echo -e $(call TARGET_END_LOG)\nendif\n\n.PHONY: binaries\nbinaries: $(BINARY_TARGETS)\n\n$(KUSTOMIZE_TARGET):\n\t@mkdir -p $(OUTPUT_DIR)\n\tcurl -s \"https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh\" | bash -s -- $(OUTPUT_DIR)\n\n.PHONY: clone-repo\nclone-repo: $(REPO)\n\n.PHONY: checkout-repo\ncheckout-repo: $(if $(PATCHES_DIR),$(GIT_PATCH_TARGET),$(GIT_CHECKOUT_TARGET))\n\n.PHONY: patch-repo\npatch-repo: checkout-repo\n\n## File/Folder Targets\n\n$(OUTPUT_DIR)/images/%:\n\t@mkdir -p $(@D)\n\n$(OUTPUT_DIR)/%TTRIBUTION.txt: SOURCE_FILE=$(@:_output/%=%) # we want to keep the release branch part which is in the OUTPUT var, hardcoding _output\n$(OUTPUT_DIR)/%TTRIBUTION.txt:\n\t@mkdir -p $(OUTPUT_DIR)\n\t@cp $(SOURCE_FILE) $(OUTPUT_DIR)\n\n\n## License Targets\n# if there is only one go mod path then licenses are gathered to _output, `%` will equal `a`\n# multiple go mod paths are in use and licenses are gathered and stored in sub folders, `%` will equal `<binary>/a`\n# GO_MOD_TARGET_FOR_BINARY_<binary> variables are created earlier in the makefile when determining which binaries can be built together vs alone\n$(OUTPUT_DIR)/%ttribution/go-license.csv: BINARY_TARGET=$(if $(filter .,$(*D)),,$(*D))\n$(OUTPUT_DIR)/%ttribution/go-license.csv: GO_MOD_PATH=$(if $(BINARY_TARGET),$(GO_MOD_TARGET_FOR_BINARY_$(call TO_UPPER,$(BINARY_TARGET))),$(word 1,$(UNIQ_GO_MOD_PATHS)))\n$(OUTPUT_DIR)/%ttribution/go-license.csv: LICENSE_PACKAGE_FILTER=$(GO_MOD_$(subst /,_,$(GO_MOD_PATH))_LICENSE_PACKAGE_FILTER)\n$(OUTPUT_DIR)/%ttribution/go-license.csv: $$(call GO_MOD_DOWNLOAD_TARGET_FROM_GO_MOD_PATH,$$(GO_MOD_PATH))\n\t@echo -e $(call TARGET_START_LOG)\n\t$(BASE_DIRECTORY)/build/lib/gather_licenses.sh $(REPO) $(MAKE_ROOT)/$(OUTPUT_DIR)/$(BINARY_TARGET) \"$(LICENSE_PACKAGE_FILTER)\" $(GO_MOD_PATH) $(GOLANG_VERSION)\n\t@echo -e $(call TARGET_END_LOG)\n\n.PHONY: gather-licenses\ngather-licenses: $(GATHER_LICENSES_TARGETS)\n\n## Attribution Targets\n# if there is only one go mod path so only one attribution is created, the file will be named ATTRIBUTION.txt and licenses will be stored in _output, `%` will equal `A`\n# if multiple attributions are being generated, the file will be <binary>_ATTRIBUTION.txt and licenses will be stored in _output/<binary>, `%` will equal `<BINARY>_A`\n%TTRIBUTION.txt: LICENSE_OUTPUT_PATH=$(OUTPUT_DIR)$(if $(filter A,$(*F)),,/$(call TO_LOWER,$(*F:%_A=%)))\n%TTRIBUTION.txt: $$(LICENSE_OUTPUT_PATH)/attribution/go-license.csv\n\t@echo -e $(call TARGET_START_LOG)\n\t@rm -f $(@F)\n\t$(BASE_DIRECTORY)/build/lib/create_attribution.sh $(MAKE_ROOT) $(GOLANG_VERSION) $(MAKE_ROOT)/$(LICENSE_OUTPUT_PATH) $(@F) $(RELEASE_BRANCH)\n\t@echo -e $(call TARGET_END_LOG)\n\n.PHONY: attribution\nattribution: $(and $(filter true,$(HAS_LICENSES)),$(ATTRIBUTION_TARGETS))\n\n.PHONY: attribution-pr\nattribution-pr: attribution\n\t@echo -e $(call TARGET_START_LOG)\n\t$(BASE_DIRECTORY)/build/update-attribution-files/create_pr.sh\n\t@echo -e $(call TARGET_END_LOG)\n\n.PHONY: all-attributions\nall-attributions:\n\t$(BASE_DIRECTORY)/build/update-attribution-files/make_attribution.sh projects/$(COMPONENT) attribution\n\n\n#### Tarball Targets\n\n.PHONY: tarballs\ntarballs: $(LICENSES_TARGETS_FOR_PREREQ)\nifeq ($(SIMPLE_CREATE_TARBALLS),true)\n\t@echo -e $(call TARGET_START_LOG)\n\t$(BASE_DIRECTORY)/build/lib/simple_create_tarballs.sh $(TAR_FILE_PREFIX) $(MAKE_ROOT)/$(OUTPUT_DIR) $(MAKE_ROOT)/$(OUTPUT_BIN_DIR) $(GIT_TAG) \"$(BINARY_PLATFORMS)\" $(ARTIFACTS_PATH) $(GIT_HASH)\n\t@echo -e $(call TARGET_END_LOG)\nendif\n\n.PHONY: upload-artifacts\nupload-artifacts: s3-artifacts\n\t@echo -e $(call TARGET_START_LOG)\n\t$(BASE_DIRECTORY)/release/s3_sync.sh $(RELEASE_BRANCH) $(RELEASE) $(ARTIFACTS_BUCKET) false $(UPLOAD_DRY_RUN)\n\t@echo -e $(call TARGET_END_LOG)\n\n# Images (oci tarballs) always go to the kubernetes bin directly to match upstream. Beacuse of this we copy/sync artifacts from both the $(REPO) artifacts dir and the kubernetes artifacts dir\n# if both folders exists\n.PHONY: s3-artifacts\ns3-artifacts: tarballs\n\t@echo -e $(call TARGET_START_LOG)\n\tif [ -d $(ARTIFACTS_PATH) ]; then \\\n\t\t$(BASE_DIRECTORY)/release/copy_artifacts.sh $(REPO) $(ARTIFACTS_PATH) $(RELEASE_BRANCH) $(RELEASE) $(GIT_TAG); \\\n\t\t$(BUILD_LIB)/validate_artifacts.sh $(MAKE_ROOT) $(ARTIFACTS_PATH) $(GIT_TAG) $(FAKE_ARM_BINARIES_FOR_VALIDATION); \\\n\tfi\n\tif [ -d $(MAKE_ROOT)/$(OUTPUT_DIR)/images ]; then \\\n\t\t$(BASE_DIRECTORY)/release/copy_artifacts.sh kubernetes $(MAKE_ROOT)/$(OUTPUT_DIR)/images $(RELEASE_BRANCH) $(RELEASE) $(GIT_TAG); \\\n\t\t$(BUILD_LIB)/validate_artifacts.sh $(MAKE_ROOT) $(MAKE_ROOT)/$(OUTPUT_DIR)/images $(GIT_TAG) $(FAKE_ARM_IMAGES_FOR_VALIDATION); \\\n\tfi\n\t@echo -e $(call TARGET_END_LOG)\n\n### Checksum Targets\n\n.PHONY: checksums\nchecksums: $(BINARY_TARGETS)\nifneq ($(strip $(BINARY_TARGETS)),)\n\t@echo -e $(call TARGET_START_LOG)\n\t$(BASE_DIRECTORY)/build/lib/update_checksums.sh $(MAKE_ROOT) $(PROJECT_ROOT) $(MAKE_ROOT)/$(OUTPUT_BIN_DIR)\n\t@echo -e $(call TARGET_END_LOG)\nendif\n\n.PHONY: validate-checksums\nvalidate-checksums: $(BINARY_TARGETS)\nifneq ($(and $(strip $(BINARY_TARGETS)), $(filter false, $(SKIP_CHECKSUM_VALIDATION))),)\n\t@echo -e $(call TARGET_START_LOG)\n\t$(BASE_DIRECTORY)/build/lib/validate_checksums.sh $(MAKE_ROOT) $(PROJECT_ROOT) $(MAKE_ROOT)/$(OUTPUT_BIN_DIR) $(FAKE_ARM_BINARIES_FOR_VALIDATION)\n\t@echo -e $(call TARGET_END_LOG)\nendif\n\n.PHONY: attribution-checksums\nattribution-checksums: attribution checksums\n\n.PHONY: all-checksums\nall-checksums:\n\t$(BASE_DIRECTORY)/build/update-attribution-files/make_attribution.sh projects/$(COMPONENT) checksums\n\n.PHONY: all-attributions-checksums\nall-attributions-checksums:\n\t$(BASE_DIRECTORY)/build/update-attribution-files/make_attribution.sh projects/$(COMPONENT) \"attribution checksums\"\n\n\n#### Image Helpers\n\nifneq ($(IMAGE_NAMES),)\n.PHONY: local-images images\nlocal-images: clean-job-caches $(LOCAL_IMAGE_TARGETS)\nimages: $(IMAGE_TARGETS)\nendif\n\n.PHONY: clean-job-caches\n# space is very limited in presubmit jobs, the image builds can push the total used space over the limit.\n# go-build cache and pkg mod cache handled by target above\n# prune is handled by buildkit.sh\nclean-job-caches: $(and $(findstring presubmit,$(JOB_TYPE)),$(filter true,$(PRUNE_BUILDCTL)),clean-go-cache)\n\n.PHONY: %/images/push %/images/amd64 %/images/arm64\n%/images/push %/images/amd64 %/images/arm64: IMAGE_NAME=$*\n%/images/push %/images/amd64 %/images/arm64: DOCKERFILE_FOLDER?=./docker/linux\n%/images/push %/images/amd64 %/images/arm64: IMAGE_CONTEXT_DIR?=$(OUTPUT_DIR)\n%/images/push %/images/amd64 %/images/arm64: IMAGE_BUILD_ARGS?=\n%/images/push %/images/amd64 %/images/arm64: ALL_IMAGE_TAGS?=$(IMAGE),$(LATEST_IMAGE)\n%/images/push %/images/amd64 %/images/arm64: IMAGE_METADATA_FILE?=\n\n# Build image using buildkit for all platforms, by default pushes to registry defined in IMAGE_REPO.\n%/images/push: IMAGE_PLATFORMS?=linux/amd64,linux/arm64\n%/images/push: IMAGE_OUTPUT_TYPE?=image\n%/images/push: IMAGE_OUTPUT?=push=true\n# if building windows containers produce metadata file and push by digest\n%/images/push: IMAGE_METADATA_FILE=$(if $(findstring windows/amd64,$(IMAGE_PLATFORMS)),/tmp/$(IMAGE_NAME)-metadata.json,)\n%/images/push: IMAGE_OUTPUT=push=true$(if $(findstring windows/amd64,$(IMAGE_PLATFORMS)),$(COMMA)push-by-digest=true,)\n%/images/push: ALL_IMAGE_TAGS=$(if $(findstring windows/amd64,$(IMAGE_PLATFORMS)),$(IMAGE_REPO)/$(IMAGE_REPO_COMPONENT),$(IMAGE)$(COMMA)$(LATEST_IMAGE))\n# Build image using buildkit only builds linux/amd64 oci and saves to local tar.\n%/images/amd64: IMAGE_PLATFORMS?=linux/amd64\n\n# Build image using buildkit only builds linux/arm64 oci and saves to local tar.\n%/images/arm64: IMAGE_PLATFORMS?=linux/arm64\n\n%/images/amd64 %/images/arm64: IMAGE_OUTPUT_TYPE?=oci\n%/images/amd64 %/images/arm64: IMAGE_OUTPUT?=dest=$(IMAGE_OUTPUT_DIR)/$(IMAGE_OUTPUT_NAME).tar\n\n%/images/push: $(BINARY_TARGETS) $(LICENSES_TARGETS_FOR_PREREQ) $(HANDLE_DEPENDENCIES_TARGET) $$(WINDOWS_IMAGE_BUILD_TARGETS_FOR_IMAGE)\n\t@echo -e $(call TARGET_START_LOG)\n\t$(BUILDCTL)\n\t@if [ -n \"$(WINDOWS_IMAGE_BUILD_TARGETS_FOR_IMAGE)\" ]; then \\\n\t\t$(BUILD_LIB)/create_windows_manifest_list.sh $(IMAGE_NAME) $(IMAGE) $(LATEST_IMAGE) \"$(WINDOWS_IMAGE_VERSIONS)\"; \\\n\tfi\n\t@echo -e $(call TARGET_END_LOG)\n\n%/images/amd64: $(BINARY_TARGETS) $(LICENSES_TARGETS_FOR_PREREQ) $(HANDLE_DEPENDENCIES_TARGET)\n\t@echo -e $(call TARGET_START_LOG)\n\t@mkdir -p $(IMAGE_OUTPUT_DIR)\n\t$(BUILDCTL)\n\t$(WRITE_LOCAL_IMAGE_TAG)\n\t@echo -e $(call TARGET_END_LOG)\n\n%/images/arm64: $(BINARY_TARGETS) $(LICENSES_TARGETS_FOR_PREREQ) $(HANDLE_DEPENDENCIES_TARGET)\n\t@echo -e $(call TARGET_START_LOG)\n\t@mkdir -p $(IMAGE_OUTPUT_DIR)\n\t$(BUILDCTL)\n\t$(WRITE_LOCAL_IMAGE_TAG)\n\t@echo -e $(call TARGET_END_LOG)\n\n%/windows/images/push: IMAGE_NAME=$(word 1,$(subst ., ,$*))\n%/windows/images/push: WINDOWS_OS_VERSION=$(word 2,$(subst ., ,$*))\n%/windows/images/push: DOCKERFILE_FOLDER=./docker/windows\n%/windows/images/push: BASE_IMAGE_NAME=eks-distro-windows-base-$(WINDOWS_OS_VERSION)\n%/windows/images/push: BASE_IMAGE=$(BASE_IMAGE_REPO)/eks-distro-windows-base:$(BASE_IMAGE_TAG)\n%/windows/images/push: IMAGE_PLATFORMS=windows/amd64\n%/windows/images/push: IMAGE_METADATA_FILE=/tmp/$(IMAGE_NAME)-$(WINDOWS_OS_VERSION)-metadata.json\n%/windows/images/push: $(BINARY_TARGETS) $(LICENSES_TARGETS_FOR_PREREQ) $(HANDLE_DEPENDENCIES_TARGET)\n\t@echo -e $(call TARGET_START_LOG)\n\t$(BUILDCTL)\n\t@echo -e $(call TARGET_END_LOG)\n\n## CGO Targets\n.PHONY: %/cgo/amd64 %/cgo/arm64 prepare-cgo-folder\n\n# .git folder needed so git properly finds the root of the repo\nprepare-cgo-folder:\n\t@mkdir -p $(CGO_SOURCE)/eks-distro/\n\trsync -rm  --exclude='.git/***' \\\n\t\t--exclude='***/_output/***' --exclude='projects/$(COMPONENT)/$(REPO)/***' \\\n\t\t--include='projects/$(COMPONENT)/***' --include='*/' --exclude='projects/***'  \\\n\t\t$(BASE_DIRECTORY)/ $(CGO_SOURCE)/eks-distro/\n\t@mkdir -p $(OUTPUT_BIN_DIR)/$(subst /,-,$(IMAGE_PLATFORMS))\n\t@mkdir -p $(CGO_SOURCE)/eks-distro/.git/{refs,objects}\n\t@cp $(BASE_DIRECTORY)/.git/HEAD $(CGO_SOURCE)/eks-distro/.git\n\n%/cgo/amd64 %/cgo/arm64: IMAGE_OUTPUT_TYPE?=local\n%/cgo/amd64 %/cgo/arm64: DOCKERFILE_FOLDER?=$(BUILD_LIB)/docker/linux/cgo\n%/cgo/amd64 %/cgo/arm64: IMAGE_NAME=binary-builder\n%/cgo/amd64 %/cgo/arm64: IMAGE_BUILD_ARGS?=GOPROXY COMPONENT\n%/cgo/amd64 %/cgo/arm64: IMAGE_CONTEXT_DIR?=$(CGO_SOURCE)\n%/cgo/amd64 %/cgo/arm64: BUILDER_IMAGE=$(GOLANG_GCC_BUILDER_IMAGE)\n\n%/cgo/amd64: IMAGE_PLATFORMS=linux/amd64\n%/cgo/arm64: IMAGE_PLATFORMS=linux/arm64\n\n%/cgo/amd64: prepare-cgo-folder\n\t$(if $(filter true, $(USE_DOCKER_FOR_CGO_BUILD)),$(CGO_DOCKER),$(BUILDCTL))\n\n%/cgo/arm64: prepare-cgo-folder\n\t$(if $(filter true, $(USE_DOCKER_FOR_CGO_BUILD)),$(CGO_DOCKER),$(BUILDCTL))\n\n# As an attempt to see if using docker is more stable for cgo builds in Codebuild\nbinary-builder/cgo/%: USE_DOCKER_FOR_CGO_BUILD=$(shell command -v docker &> /dev/null && docker info > /dev/null 2>&1 && echo \"true\")\n\n## Useradd targets\n%-useradd/images/export: IMAGE_OUTPUT_TYPE=local\n%-useradd/images/export: IMAGE_OUTPUT_DIR=$(OUTPUT_DIR)/files/$*\n%-useradd/images/export: IMAGE_OUTPUT?=dest=$(IMAGE_OUTPUT_DIR)\n%-useradd/images/export: IMAGE_BUILD_ARGS=IMAGE_USERADD_USER_ID IMAGE_USERADD_USER_NAME\n%-useradd/images/export: DOCKERFILE_FOLDER=$(BUILD_LIB)/docker/linux/useradd\n%-useradd/images/export: IMAGE_PLATFORMS=linux/amd64\n%-useradd/images/export:\n\t@mkdir -p $(IMAGE_OUTPUT_DIR)\n\t$(BUILDCTL)\n\n## Helm Targets\n.PHONY: helm/pull \nhelm/pull: \n\t$(BUILD_LIB)/helm_pull.sh $(HELM_PULL_LOCATION) $(HELM_REPO_URL) $(HELM_PULL_NAME) $(REPO) $(HELM_DIRECTORY) $(CHART_VERSION) $(COPY_CRDS)\n\n# Build helm chart\n.PHONY: helm/build\nhelm/build: $(LICENSES_TARGETS_FOR_PREREQ)\nhelm/build: $(if $(filter true,$(REPO_NO_CLONE)),,$(HELM_GIT_CHECKOUT_TARGET))\nhelm/build: $(if $(wildcard $(PROJECT_ROOT)/helm/patches),$(HELM_GIT_PATCH_TARGET),)\n\t$(BUILD_LIB)/helm_copy.sh $(HELM_SOURCE_REPOSITORY) $(HELM_DESTINATION_REPOSITORY) $(HELM_DIRECTORY) $(OUTPUT_DIR)\n\t$(BUILD_LIB)/helm_require.sh $(HELM_SOURCE_IMAGE_REPO) $(HELM_DESTINATION_REPOSITORY) $(OUTPUT_DIR) $(IMAGE_TAG) $(HELM_TAG) $(PROJECT_ROOT) $(LATEST) $(HELM_USE_UPSTREAM_IMAGE) $(HELM_IMAGE_LIST)\n\t$(BUILD_LIB)/helm_replace.sh $(HELM_DESTINATION_REPOSITORY) $(OUTPUT_DIR)\n\t$(BUILD_LIB)/helm_build.sh $(OUTPUT_DIR) $(HELM_DESTINATION_REPOSITORY)\n\n# Build helm chart and push to registry defined in IMAGE_REPO.\n.PHONY: helm/push\nhelm/push: helm/build\n\t$(BUILD_LIB)/helm_push.sh $(IMAGE_REPO) $(HELM_DESTINATION_REPOSITORY) $(HELM_TAG) $(GIT_TAG) $(OUTPUT_DIR) $(LATEST)\n\n## Fetch Binary Targets\n.PHONY: handle-dependencies \nhandle-dependencies: $(call PROJECT_DEPENDENCIES_TARGETS)\n\n$(BINARY_DEPS_DIR)/linux-%:\n\t$(BUILD_LIB)/fetch_binaries.sh $(BINARY_DEPS_DIR) $* $(ARTIFACTS_BUCKET) $(LATEST) $(RELEASE_BRANCH)\n\n\n## Build Targets\n.PHONY: build\nbuild: FAKE_ARM_IMAGES_FOR_VALIDATION=true\nbuild: $(BUILD_TARGETS)\n\n.PHONY: release\nrelease: $(RELEASE_TARGETS)\n\n# Iterate over release branch versions, avoiding branches explicitly marked as skipped\n.PHONY: %/release-branches/all\n%/release-branches/all:\n\t@for version in $(SUPPORTED_K8S_VERSIONS) ; do \\\n\t    if ! [[ \"$(SKIPPED_K8S_VERSIONS)\" =~ $$version  ]]; then \\\n\t\t\t$(MAKE) $* RELEASE_BRANCH=$$version; \\\n\t\tfi \\\n\tdone;\n\n###  Clean Targets\n\n.PHONY: clean-go-cache\nclean-go-cache:\n\t@echo -e $(call TARGET_START_LOG)\n# When go downloads pkg to the module cache, GOPATH/pkg/mod, it removes the write permissions\n# prevent accident modifications since files/checksums are tightly controlled\n# adding the perms necessary to perform the delete\n\t@chmod -fR 777 $(GO_MOD_CACHE) &> /dev/null || :\n\t$(foreach folder,$(GO_MOD_CACHE) $(GO_BUILD_CACHE),$(if $(wildcard $(folder)),du -hs $(folder) && rm -rf $(folder);,))\n# When building go bins using mods which have been downloaded by go mod download/vendor which will exist in the go_mod_cache\n# there is additional checksum (?) information that is not preserved in the vendor directory within the project folder\n# This additional information gets written out into the resulting binary. If we did not run go mod vendor, which we do \n# for all project builds, we could get checksum mismatches on the final binaries due to sometimes having the mod previously\n# downloaded in the go_mod_cahe.  Running go mod vendor always ensures that the go mod has always been downloaded\n# to the go_mod_cache directory. If we clear the go_mod_cache we need to delete the go_mod_download sentinel file\n# so the next time we run build go mods will be redownloaded\n\t$(foreach file,$(GO_MOD_DOWNLOAD_TARGETS),$(if $(wildcard $(file)),rm -f $(file);,))\n\t@echo -e $(call TARGET_END_LOG)\n\n.PHONY: clean-repo\nclean-repo:\n\t@rm -rf $(REPO)\t$(HELM_SOURCE_REPOSITORY)\n\n.PHONY: clean-output\nclean-output:\n\t$(if $(wildcard _output),du -hs _output && rm -rf _output,)\n\n.PHONY: clean\nclean: $(if $(filter true,$(REPO_NO_CLONE)),,clean-repo) clean-output\n\n## --------------------------------------\n## Help\n## --------------------------------------\n#@  Helpers\n.PHONY: help\nhelp: # Display this help\n\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m\\033[0m\\n\"} /^[$$()% \\/a-zA-Z0-9_-]+:.*?##/ { printf \"  \\033[36m%-55s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 4) } ' $(MAKEFILE_LIST)\n\n.PHONY: help-list\nhelp-list: \n\t@awk 'BEGIN {FS = \":.*#\";} /^[$$()% \\/a-zA-Z0-9_-]+:.*?#/ { printf \"%s: ##%s\\n\", $$1, $$2 } /^#@/ { printf \"\\n##@%s\\n\", substr($$0, 4) } ' $(MAKEFILE_LIST)\n\n.PHONY: add-generated-help-block\nadd-generated-help-block: # Add or update generated help block to document project make file and support shell auto completion\nadd-generated-help-block:\n\t$(BUILD_LIB)/generate_help_body.sh $(MAKE_ROOT) \"$(BINARY_TARGET_FILES)\" \"$(BINARY_PLATFORMS)\" \"${BINARY_TARGETS}\" \\\n\t\t$(REPO) $(if $(PATCHES_DIR),true,false) \"$(LOCAL_IMAGE_TARGETS)\" \"$(IMAGE_TARGETS)\" \"$(BUILD_TARGETS)\" \"$(RELEASE_TARGETS)\" \\\n\t\t\"$(HAS_S3_ARTIFACTS)\" \"$(HAS_LICENSES)\" \"$(REPO_NO_CLONE)\" \"$(PROJECT_DEPENDENCIES_TARGETS)\" \\\n\t\t\"$(HAS_HELM_CHART)\" \"$(IN_DOCKER_TARGETS)\"\n\n## --------------------------------------\n## Update Helpers\n## --------------------------------------\n#@ Update Helpers\n\n.PHONY: run-target-in-docker\nrun-target-in-docker: # Run `MAKE_TARGET` using builder base docker container\n\t$(BUILD_LIB)/run_target_docker.sh $(COMPONENT) $(MAKE_TARGET) $(IMAGE_REPO) \"$(RELEASE_BRANCH)\" $(ARTIFACTS_BUCKET)\n\n.PHONY: stop-docker-builder\nstop-docker-builder: # Clean up builder base docker container\n\tdocker rm -f -v eks-d-builder\n\n.PHONY: generate\ngenerate: # Update UPSTREAM_PROJECTS.yaml\n\t$(BUILD_LIB)/generate_projects_list.sh $(BASE_DIRECTORY)\n\n.PHONY: update-go-mods\nupdate-go-mods: # Update locally checked-in go sum to assist in vuln scanning\nupdate-go-mods: DEST_PATH=$(if $(IS_RELEASE_BRANCH_BUILD),$(RELEASE_BRANCH)/$$gomod,$$gomod)\nupdate-go-mods: checkout-repo\n\tfor gomod in $(GO_MOD_PATHS); do \\\n\t\tmkdir -p $(DEST_PATH); \\\n\t\tcp $(REPO)/$$gomod/go.{mod,sum} $(DEST_PATH); \\\n\tdone\n\n.PHONY: all-update-go-mods\nall-update-go-mods:\n\t$(BASE_DIRECTORY)/build/update-attribution-files/make_attribution.sh projects/$(COMPONENT) update-go-mods\n\n.PHONY: update-vendor-for-dep-patch\nupdate-vendor-for-dep-patch: # After bumping dep in go.mod file, uses generic vendor update script or one provided from upstream project\nupdate-vendor-for-dep-patch: checkout-repo\n\t$(BUILD_LIB)/update_vendor.sh $(PROJECT_ROOT) $(REPO) $(GIT_TAG) $(GOLANG_VERSION) $(VENDOR_UPDATE_SCRIPT)\n\n.PHONY: patch-for-dep-update\npatch-for-dep-update: # After bumping dep in go.mod file and updating vendor, generates patch\npatch-for-dep-update: checkout-repo\n\t$(BUILD_LIB)/patch_for_dep_update.sh $(REPO) $(GIT_TAG) $(PROJECT_ROOT)/patches\n\n.PHONY: %/create-ecr-repo\n%/create-ecr-repo: IMAGE_NAME=$*\n%/create-ecr-repo:\n\tcmd=( ecr ); \\\n\tif [[ \"${IMAGE_REPO}\" =~ ^public\\.ecr\\.aws/ ]]; then \\\n\t\tcmd=( ecr-public --region us-east-1 ); \\\n\tfi; \\\n\trepo=$(IMAGE_REPO_COMPONENT); \\\n\tif [ \"$(IMAGE_NAME)\" = \"__helm__\" ]; then \\\n\t\trepo=\"$(HELM_DESTINATION_REPOSITORY)\"; \\\n\tfi; \\\n\tif ! aws $${cmd[*]} describe-repositories --repository-name \"$$repo\" > /dev/null 2>&1; then \\\n\t\taws $${cmd[*]} create-repository --repository-name \"$$repo\"; \\\n\tfi;\n\n.PHONY: create-ecr-repos\ncreate-ecr-repos: # Create repos in ECR for project images for local testing\ncreate-ecr-repos: $(foreach image,$(IMAGE_NAMES),$(image)/create-ecr-repo) $(if $(filter true,$(HAS_HELM_CHART)),__helm__/create-ecr-repo,)\n\n.PHONY: var-value-%\nvar-value-%:\n\t@echo $($*)\n\n.PHONY: check-for-supported-release-branch\ncheck-for-supported-release-branch:\n\t@if [ -d $(MAKE_ROOT)/$(RELEASE_BRANCH) ]; then \\\n\t\techo \"Supported version to build\"; \\\n\t\texit 0; \\\n\telse \\\n\t\techo \"Not a supported version to build\"; \\\n\t\texit 1; \\\n\tfi\n\n## --------------------------------------\n## Docker Helpers\n## --------------------------------------\n# $1 - target\ndefine RUN_IN_DOCKER_TARGET\n.PHONY: run-$(1)-in-docker\nrun-$(1)-in-docker: MAKE_TARGET=$(1)\nrun-$(1)-in-docker: run-target-in-docker\nendef\n\n$(foreach target,$(IN_DOCKER_TARGETS),$(eval $(call RUN_IN_DOCKER_TARGET,$(target))))\n"
        },
        {
          "name": "EKS_DISTRO_BASE_TAG_FILE",
          "type": "blob",
          "size": 0.0234375,
          "content": "2024-12-20-1734721295.2\n"
        },
        {
          "name": "EKS_DISTRO_MINIMAL_BASE_IPTABLES_TAG_FILE",
          "type": "blob",
          "size": 0.0234375,
          "content": "2024-12-20-1734721295.2\n"
        },
        {
          "name": "EKS_DISTRO_MINIMAL_BASE_NONROOT_TAG_FILE",
          "type": "blob",
          "size": 0.0234375,
          "content": "2024-08-13-1723575672.2\n"
        },
        {
          "name": "EKS_DISTRO_MINIMAL_BASE_TAG_FILE",
          "type": "blob",
          "size": 0.0234375,
          "content": "2024-08-13-1723575672.2\n"
        },
        {
          "name": "EKS_DISTRO_WINDOWS_BASE_1809_TAG_FILE",
          "type": "blob",
          "size": 0.0283203125,
          "content": "1809-2023-12-12-1702407739.2\n"
        },
        {
          "name": "EKS_DISTRO_WINDOWS_BASE_20H2_TAG_FILE",
          "type": "blob",
          "size": 0.0283203125,
          "content": "20H2-2022-12-19-1671485888.2\n"
        },
        {
          "name": "EKS_DISTRO_WINDOWS_BASE_LTSC2022_TAG_FILE",
          "type": "blob",
          "size": 0.0322265625,
          "content": "ltsc2022-2023-12-12-1702407739.2\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.904296875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 10.017578125,
          "content": "BASE_DIRECTORY:=$(shell git rev-parse --show-toplevel)\nRELEASE_BRANCH?=$(shell cat $(BASE_DIRECTORY)/release/DEFAULT_RELEASE_BRANCH)\nSUPPORTED_RELEASE_BRANCHES?=$(shell cat $(BASE_DIRECTORY)/release/SUPPORTED_RELEASE_BRANCHES)\nRELEASE_ENVIRONMENT?=development\nRELEASE?=$(shell cat $(BASE_DIRECTORY)/release/$(RELEASE_BRANCH)/$(RELEASE_ENVIRONMENT)/RELEASE)\nPROD_RELEASE=$(shell cat $(BASE_DIRECTORY)/release/$(RELEASE_BRANCH)/production/RELEASE)\nOVERRIDE_NUMBER?=-1\nWITH_GIT_AND_PR=true\nARTIFACT_BUCKET?=my-s3-bucket\n\nAWS_ACCOUNT_ID?=$(shell aws sts get-caller-identity --query Account --output text)\nAWS_REGION?=us-west-2\nIMAGE_REPO?=$(if $(AWS_ACCOUNT_ID),$(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com,localhost:5000)\nRELEASE_AWS_PROFILE?=default\n\nRELEASE_GIT_TAG?=v$(RELEASE_BRANCH)-eks-$(PROD_RELEASE)\nRELEASE_GIT_COMMIT_HASH?=$(shell git rev-parse @)\n\nREBUILD_ALL?=false\n\nALL_PROJECTS=containernetworking_plugins coredns_coredns etcd-io_etcd kubernetes-csi_external-attacher kubernetes-csi_external-resizer \\\n\tkubernetes-csi_livenessprobe kubernetes-csi_node-driver-registrar kubernetes-sigs_aws-iam-authenticator kubernetes-sigs_metrics-server \\\n\tkubernetes-csi_external-snapshotter kubernetes-csi_external-provisioner kubernetes_release kubernetes_kubernetes \\\n\tkubernetes_cloud-provider-aws\n\nifdef MAKECMDGOALS\nTARGET=$(MAKECMDGOALS)\nelse\nTARGET=$(DEFAULT_GOAL)\nendif\n\n.PHONY: setup\nsetup:\n\tdevelopment/ecr/ecr-command.sh install-ecr-public\n\tdevelopment/ecr/ecr-command.sh login-ecr-public\n\n# For components which build the same versions across multiple kube versions\n# we use the first version which has the same git_tag as the current project build\n# as the buildctl import-cache to try and converge as many builds to the same image in ecr\n# This isnt neccessary since on the subsequent builds they should converge, but building\n# kube first for newer versions while build all other components gives us the best chance\n# to converge on the same image in the first build. This also doesnt handle cases where the\n# first version is different but the next 3 are the same, in those cases it would still\n# take two builds to converge \n.PHONY: build\nbuild:\n\tgo vet cmd/main_postsubmit.go\n\tgo run cmd/main_postsubmit.go \\\n\t\t--target=build \\\n\t\t--release-branch=${RELEASE_BRANCH} \\\n\t\t--release=${RELEASE} \\\n\t\t--region=${AWS_REGION} \\\n\t\t--account-id=${AWS_ACCOUNT_ID} \\\n\t\t--image-repo=${IMAGE_REPO} \\\n\t\t--dry-run=true \\\n\t\t--rebuild-all=${REBUILD_ALL} \\\n\t\t--build-kubernetes-first=$(if $(filter $(RELEASE_BRANCH),$(firstword $(SUPPORTED_RELEASE_BRANCHES))),false,true)\n\t@echo 'Done' $(TARGET)\n\n.PHONY: postsubmit-build\npostsubmit-build: setup\n\tgo vet cmd/main_postsubmit.go\n\tgo run cmd/main_postsubmit.go \\\n\t\t--target=release,clean,clean-go-cache \\\n\t\t--release-branch=${RELEASE_BRANCH} \\\n\t\t--release=${RELEASE} \\\n\t\t--region=${AWS_REGION} \\\n\t\t--account-id=${AWS_ACCOUNT_ID} \\\n\t\t--image-repo=${IMAGE_REPO} \\\n\t\t--artifact-bucket=$(ARTIFACT_BUCKET) \\\n\t\t--dry-run=false \\\n\t\t--rebuild-all=${REBUILD_ALL}\n\n.PHONY: kops\nkops: export UBUNTU_RELEASE=focal-20.04\nkops: $(if $(CODEBUILD_BUILD_ID),kops-codebuild,kops-prow)\n\n.PHONY: kops-codebuild\nkops-codebuild: KOPS_ENTRYPOINT=development/kops/codebuild.sh\nkops-codebuild: kops-amd kops-arm\n\t@echo 'Done kops-codebuild'\n\n.PHONY: kops-prow\nkops-prow: KOPS_ENTRYPOINT=development/kops/prow.sh\nkops-prow: kops-amd kops-arm\n\t@echo 'Done kops-prow'\n\n.PHONY: kops-amd\nkops-amd: kops-prereqs\n\tRELEASE=$(RELEASE) $(KOPS_ENTRYPOINT)\n\n.PHONY: kops-arm\nkops-arm: export NODE_INSTANCE_TYPE=t4g.medium\nkops-arm: export NODE_ARCHITECTURE=arm64\nkops-arm: export UBUNTU_RELEASE=jammy-22.04\nkops-arm: kops-prereqs\n\texport IPV6=true; \\\n\tsleep 5m; \\\n\tRELEASE=$(RELEASE) $(KOPS_ENTRYPOINT);\n\n.PHONY: kops-arm-ubuntu-22\nkops-arm-ubuntu-22: export UBUNTU_RELEASE=jammy-22.04\nkops-arm-ubuntu-22: kops-prereqs\n\tsleep 10m; \\\n\tRELEASE=$(RELEASE) $(KOPS_ENTRYPOINT);\n\n.PHONY: kops-prereqs\nkops-prereqs: $(if $(filter presubmit,$(JOB_TYPE)),,postsubmit-build)\n\tssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N \"\"\n\tcd development/kops && RELEASE=$(RELEASE) ./install_requirements.sh\n\n.PHONY: postsubmit-conformance\npostsubmit-conformance: RELEASE:=$(shell echo  $$(($(RELEASE) + 1))).pre\npostsubmit-conformance: postsubmit-build kops\n\t@echo 'Done postsubmit-conformance'\n\n.PHONY: tag\ntag:\n\tgit tag -a $(RELEASE_GIT_TAG) $(RELEASE_GIT_COMMIT_HASH) -m $(RELEASE_GIT_TAG)\n\tgit push upstream $(RELEASE_GIT_TAG)\n\n.PHONY: upload\nupload:\n\trelease/generate_crd.sh $(RELEASE_BRANCH) $(RELEASE) $(IMAGE_REPO)\n\trelease/s3_sync.sh $(RELEASE_BRANCH) $(RELEASE) $(ARTIFACT_BUCKET) true\n\t@echo 'Done' $(TARGET)\n\n.PHONY: release\nrelease: $(addprefix makes-release-, $(ALL_PROJECTS)) upload\n\t@echo 'Done' $(TARGET)\n\n.PHONY: makes-release-%\nmakes-release-%:\n\t$(eval PROJECT_PATH=projects/$(subst _,/,$*))\n\t$(MAKE) release clean clean-go-cache -C $(PROJECT_PATH)\n\n.PHONY: binaries\nbinaries: $(addprefix makes-binaries-, $(ALL_PROJECTS))\n\t@echo 'Done' $(TARGET)\n\n.PHONY: makes-binaries-%\nmakes-binaries-%:\n\t$(eval PROJECT_PATH=projects/$(subst _,/,$*))\n\t$(MAKE) binaries -C $(PROJECT_PATH)\n\n.PHONY: run-target-in-docker\nrun-target-in-docker:\n\tbuild/lib/run_target_docker.sh $(PROJECT) $(MAKE_TARGET) $(IMAGE_REPO) $(RELEASE_BRANCH)\n\n.PHONY: stop-docker-builder\nstop-docker-builder:\n\tdocker rm -f -v eks-d-builder\n\n.PHONY: run-buildkit-and-registry\nrun-buildkit-and-registry:\n\tdocker run -d --name buildkitd --net host --privileged moby/buildkit:v0.12.3\n\tdocker run -d --name registry  --net host registry:2\n\n.PHONY: stop-buildkit-and-registry\nstop-buildkit-and-registry:\n\tdocker rm -v --force buildkitd\n\tdocker rm -v --force registry\n\n.PHONY: clean\nclean: $(addprefix makes-clean-, $(ALL_PROJECTS))\n\t@echo 'Done' $(TARGET)\n\n.PHONY: makes-clean-%\nmakes-clean-%:\n\t$(eval PROJECT_PATH=projects/$(subst _,/,$*))\n\t$(MAKE) clean -C $(PROJECT_PATH)\n\n.PHONY: attribution-files\nattribution-files: $(addprefix attribution-files-project-, $(ALL_PROJECTS))\n\tcat _output/total_summary.txt\n\n.PHONY: attribution-files-project-%\nattribution-files-project-%:\n\t$(eval PROJECT_PATH=projects/$(subst _,/,$*))\n\t$(MAKE) -C $(PROJECT_PATH) all-attributions\n\n.PHONY: update-attribution-files\nupdate-attribution-files: add-generated-help-block go-mod-files attribution-files\n\tbuild/update-attribution-files/create_pr.sh\n\n.PHONY: checksum-files-project-%\nchecksum-files-project-%:\n\t$(eval PROJECT_PATH=projects/$(subst _,/,$*))\n\t$(MAKE) -C $(PROJECT_PATH) all-checksums\n\n.PHONY: update-checksum-files\nupdate-checksum-files: $(addprefix checksum-files-project-, $(ALL_PROJECTS))\n\tbuild/lib/update_go_versions.sh\n\tbuild/update-attribution-files/create_pr.sh\n\n.PHONY: go-mod-files-project-%\ngo-mod-files-project-%:\n\t$(eval PROJECT_PATH=projects/$(subst _,/,$*))\n\t$(MAKE) -C $(PROJECT_PATH) all-update-go-mods\n\n.PHONY: go-mod-files\ngo-mod-files: $(addprefix go-mod-files-project-, $(ALL_PROJECTS))\n\tbuild/update-attribution-files/create_pr.sh\n\n.PHONY: add-generated-help-block-project-%\nadd-generated-help-block-project-%:\n\t$(eval PROJECT_PATH=projects/$(subst _,/,$*))\n\t$(MAKE) add-generated-help-block -C $(PROJECT_PATH) RELEASE_BRANCH=1-26\n\n.PHONY: add-generated-help-block\nadd-generated-help-block: $(addprefix add-generated-help-block-project-, $(ALL_PROJECTS))\n\tbuild/update-attribution-files/create_pr.sh\n\n.PHONY: update-release-number\nupdate-release-number:\n\tgo vet ./cmd/release/number\n\tgo run ./cmd/release/number/main.go \\\n\t\t--branch=$(RELEASE_BRANCH) \\\n\t\t--isProd=$(is_update_prod_number)\n\n.PHONY: update-dev-release-number\nupdate-dev-release-number:\n\t$(MAKE) is_update_prod_number=false update-release-number\n\n.PHONY: update-prod-release-number\nupdate-prod-release-number:\n\t$(MAKE) is_update_prod_number=true update-release-number\n\n.PHONY: update-release-numbers\nupdate-release-numbers: update-dev-release-number update-prod-release-number\n\n.PHONY: update-all-release-numbers\nupdate-all-release-numbers:\n\tfor r_b in $(SUPPORTED_RELEASE_BRANCHES); do RELEASE_BRANCH=$$r_b $(MAKE) update-release-numbers; done\n\n.PHONY: update-all-dev-release-numbers\nupdate-all-dev-release-numbers:\n\tfor r_b in $(SUPPORTED_RELEASE_BRANCHES); do RELEASE_BRANCH=$$r_b $(MAKE) update-dev-release-number; done\n\n.PHONY: update-all-prod-release-numbers\nupdate-all-prod-release-numbers:\n\tfor r_b in $(SUPPORTED_RELEASE_BRANCHES); do RELEASE_BRANCH=$$r_b $(MAKE) update-prod-release-number; done\n\n# See important note about minor releases in the Go function called.\n# release-docs is intended to be used to generate release docs for the latest release branch. If this command is used in\n# conjunction with release-docs-limited to make all the release docs for a new minor release, WITH_GIT_AND_PR should be\n# set to false, as presumably there are additional changes that have been made by multiple run of release-docs-limited.\n.PHONY: release-docs\nrelease-docs:\n\tgo vet ./cmd/release/docs\n\tgo run ./cmd/release/docs/main.go \\\n\t\t--branch=$(RELEASE_BRANCH) \\\n\t\t--manageGitAndOpenPR=$(WITH_GIT_AND_PR)\n\n# See important note about minor releases in the Go function called.\n# release-docs-limited is intended to be used to generate docs for multiple release for new minor releases. This make\n# command should be run for all releases from 1 until *** one less than *** the latest prod number. For example, if the\n# prod release number is 4, it should be run 3 times and the overrideNumber flag should be used to set the release\n# number to 1, then 2, then 3. For the latest release (which is 4 in the example), make release-docs should be used\n# instead of release-docs-limited. See that make command's comment for additional information\n.PHONY: release-docs-limited\nrelease-docs-limited:\n\tgo vet ./cmd/release/docs\n\tgo run ./cmd/release/docs/main.go \\\n\t\t--branch=$(RELEASE_BRANCH) \\\n\t\t--manageGitAndOpenPR=false \\\n\t\t--releaseAnnouncement=false \\\n\t\t--optionalOverrideNumber=$(OVERRIDE_NUMBER)\n\n.PHONY: github-release\ngithub-release:\n\tgo vet ./cmd/release/gh-release\n\tgo run ./cmd/release/gh-release/main.go \\\n\t\t--branch=$(RELEASE_BRANCH) \\\n\t\t--overrideNumber=$(OVERRIDE_NUMBER)\n\n.PHONY: minor-release-foundation\nminor-release-foundation:\n\tgo vet ./cmd/release/minor\n\tgo run ./cmd/release/minor/main.go\n\n.PHONY: print-versions\nprint-versions:\n\tgo vet ./cmd/print-versions\n\tgo run ./cmd/print-versions/main.go\n\n\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.0654296875,
          "content": "Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n"
        },
        {
          "name": "OWNERS",
          "type": "blob",
          "size": 0.21484375,
          "content": "approvers:\n- adityavenneti\n- AndrewSirenko\n- bhavi-koduru\n- ElijahQuinones\n- Ganiredi\n- jaredcd\n- mahakagi\n- markapruett\n- natechensan\n- rcrozean\n- srbgupta86\n- torredil\n- varma-maryala\n- vineeth-bandi\n- wongma7\n- xdu31\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.7412109375,
          "content": "## EKS Distro Repository\n---\n\n| Release | Development Build Status                                                                                                                  |\n|---------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| 1-28    | [![1-28](https://prow.eks.amazonaws.com/badge.svg?jobs=build-1-28-postsubmit)](https://prow.eks.amazonaws.com/?job=build-1-28-postsubmit) |\n| 1-29    | [![1-29](https://prow.eks.amazonaws.com/badge.svg?jobs=build-1-29-postsubmit)](https://prow.eks.amazonaws.com/?job=build-1-29-postsubmit) |\n| 1-30    | [![1-30](https://prow.eks.amazonaws.com/badge.svg?jobs=build-1-30-postsubmit)](https://prow.eks.amazonaws.com/?job=build-1-30-postsubmit) |\n| 1-31    | [![1-31](https://prow.eks.amazonaws.com/badge.svg?jobs=build-1-31-postsubmit)](https://prow.eks.amazonaws.com/?job=build-1-31-postsubmit) |\n\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/6111/badge)](https://bestpractices.coreinfrastructure.org/projects/6111)\n\nAmazon **EKS Distro** (EKS-D) is a Kubernetes distribution based on and used by\nAmazon Elastic Kubernetes Service (EKS) to create reliable and secure Kubernetes\nclusters. With EKS-D, you can rely on the same versions of Kubernetes and its\ndependencies deployed by Amazon EKS. This includes the latest upstream updates,\nas well as extended security patching support. EKS-D follows the same Kubernetes\nversion release cycle as Amazon EKS, and we provide the bits here. EKS-D offers\nthe same software that has enabled tens of thousands of Kubernetes clusters on\nAmazon EKS.\n\nThis GitHub repository has everything required to build the components that make\nup the EKS Distro from source.\n\n## Releases\n\nFull documentation for releases can be found on [https://distro.eks.amazonaws.com](https://distro.eks.amazonaws.com).\n\nTo receive notifications about new EKS-D releases, subscribe to the EKS-D updates SNS topic:\n`arn:aws:sns:us-east-1:379412251201:eks-distro-updates`\n\n[<img src=\"docs/contents/certified-kubernetes-1.26-color.svg\" height=150>](https://github.com/cncf/k8s-conformance/pull/2507)\n<!--\nSource: https://github.com/cncf/artwork/tree/master/projects/kubernetes/certified-kubernetes\n-->\n\n### Kubernetes 1-31\n\n| Release | Manifest | Kubernetes Version |\n| -- | --- | --- |\n| 11 | [v1-31-eks-11](https://distro.eks.amazonaws.com/kubernetes-1-31/kubernetes-1-31-eks-11.yaml) | [v1.31.4](https://github.com/kubernetes/kubernetes/release/tag/v1.31.4) |\n\n### Kubernetes 1-30\n\n| Release | Manifest | Kubernetes Version |\n| -- | --- | --- |\n| 22 | [v1-30-eks-22](https://distro.eks.amazonaws.com/kubernetes-1-30/kubernetes-1-30-eks-22.yaml) | [v1.30.8](https://github.com/kubernetes/kubernetes/release/tag/v1.30.8) |\n\n### Kubernetes 1-29\n\n| Release | Manifest | Kubernetes Version |\n| -- | --- | --- |\n| 29 | [v1-29-eks-29](https://distro.eks.amazonaws.com/kubernetes-1-29/kubernetes-1-29-eks-29.yaml) | [v1.29.12](https://github.com/kubernetes/kubernetes/release/tag/v1.29.12) |\n\n### Kubernetes 1-28\n\n| Release | Manifest | Kubernetes Version |\n| -- | --- | --- |\n| 40 | [v1-28-eks-40](https://distro.eks.amazonaws.com/kubernetes-1-28/kubernetes-1-28-eks-40.yaml) | [v1.28.15](https://github.com/kubernetes/kubernetes/release/tag/v1.28.15) |\n\n### Kubernetes 1.18 - 1.27: DEPRECATED\n\nIn alignment with the [Amazon EKS release calendar](https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html#kubernetes-release-calendar),\nEKS Distro has discontinued support of Kubernetes v1.18 - v1.26. While there are\nno plans to remove these versions' images from EKS Distro ECR, there will be no\nmore updates, including security fixes, for them.\n\n**Due to the increased security risk this poses, it is HIGHLY recommended that\nusers of v1.18 - v1.26 update to a supported version (v1.27+) as soon as\npossible.**\n\n## Development\n\nThe EKS Distro is built using\n[Prow](https://github.com/kubernetes/test-infra/tree/master/prow), the\nKubernetes CI/CD system. EKS operates an installation of Prow, which is visible\nat https://prow.eks.amazonaws.com/. Please read our\n[CONTRIBUTING](CONTRIBUTING.md) guide before making a Pull Request.\n\nFor building EKS Distro locally, refer to the\n[building-locally](docs/development/building-locally.md) guide.\n\nFor updating project dependencies, refer to the\n[update-project-dependency](docs/development/update-project-dependency.md) guide.\n\n## Security\n\nIf you discover a potential security issue in this project, or think you may\nhave discovered a security issue, we ask that you notify AWS Security via our\n[vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/).\nPlease do **not** create a public GitHub issue.\n\n## License\n\nThis project is licensed under the [Apache-2.0 License](LICENSE).\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "development",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.5712890625,
          "content": "module github.com/aws/eks-distro\n\ngo 1.20\n\nrequire github.com/google/go-github/v52 v52.0.0\n\nrequire (\n\tgithub.com/ProtonMail/go-crypto v0.0.0-20230217124315-7d5c6f04bbb8 // indirect\n\tgithub.com/cloudflare/circl v1.3.7 // indirect\n\tgithub.com/golang/protobuf v1.5.2 // indirect\n\tgithub.com/google/go-querystring v1.1.0 // indirect\n\tgolang.org/x/crypto v0.17.0 // indirect\n\tgolang.org/x/net v0.17.0 // indirect\n\tgolang.org/x/oauth2 v0.7.0 // indirect\n\tgolang.org/x/sys v0.15.0 // indirect\n\tgoogle.golang.org/appengine v1.6.7 // indirect\n\tgoogle.golang.org/protobuf v1.28.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 4.0498046875,
          "content": "github.com/ProtonMail/go-crypto v0.0.0-20230217124315-7d5c6f04bbb8 h1:wPbRQzjjwFc0ih8puEVAOFGELsn1zoIIYdxvML7mDxA=\ngithub.com/ProtonMail/go-crypto v0.0.0-20230217124315-7d5c6f04bbb8/go.mod h1:I0gYDMZ6Z5GRU7l58bNFSkPTFN6Yl12dsUlAZ8xy98g=\ngithub.com/bwesterb/go-ristretto v1.2.0/go.mod h1:fUIoIZaG73pV5biE2Blr2xEzDoMj7NFEuV9ekS419A0=\ngithub.com/cloudflare/circl v1.1.0/go.mod h1:prBCrKB9DV4poKZY1l9zBXg2QJY7mvgRvtMxxK7fi4I=\ngithub.com/cloudflare/circl v1.3.7 h1:qlCDlTPz2n9fu58M0Nh1J/JzcFpfgkFHHX3O35r5vcU=\ngithub.com/cloudflare/circl v1.3.7/go.mod h1:sRTcRWXGLrKw6yIGJ+l7amYJFfAXbZG0kBSc8r4zxgA=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.2 h1:ROPKBNFfQgOUMifHyP+KYbvpjbdoFNs+aK7DXlji0Tw=\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\ngithub.com/google/go-github/v52 v52.0.0 h1:uyGWOY+jMQ8GVGSX8dkSwCzlehU3WfdxQ7GweO/JP7M=\ngithub.com/google/go-github/v52 v52.0.0/go.mod h1:WJV6VEEUPuMo5pXqqa2ZCZEdbQqua4zAk2MZTIo+m+4=\ngithub.com/google/go-querystring v1.1.0 h1:AnCroh3fv4ZBgVIf1Iwtovgjaw/GiKJo8M8yD/fhyJ8=\ngithub.com/google/go-querystring v1.1.0/go.mod h1:Kcdr2DB4koayq7X8pmAG4sNG59So17icRSOU623lUBU=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.17.0 h1:r8bRNjWL3GshPW3gkd+RpvzWrZAwPS49OmTGZ/uhM4k=\ngolang.org/x/crypto v0.17.0/go.mod h1:gCAAfMLgwOJRpTjQ2zCCt2OcSfYMTeZVSRtQlPC7Nq4=\ngolang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.17.0 h1:pVaXccu2ozPjCXewfr1S7xza/zcXTity9cCdXQYSjIM=\ngolang.org/x/net v0.17.0/go.mod h1:NxSsAGuq816PNPmqtQdLE42eU2Fs7NoRIZrHJAlaCOE=\ngolang.org/x/oauth2 v0.7.0 h1:qe6s0zUXlPX80/dITx3440hWZ7GwMwgDDyrSGTPJG/g=\ngolang.org/x/oauth2 v0.7.0/go.mod h1:hPLQkd9LyjfXTiRohC/41GhcFqxisoUQ99sCUOHO9x4=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211007075335-d3039528d8ac/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.15.0 h1:h48lPFYpsTvQJZF4EKyI4aLHaev3CxivZmv7yZig9pc=\ngolang.org/x/sys v0.15.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/appengine v1.6.7 h1:FZR1q0exgwxzPzp/aF+VccGrSfxfPpkBqjIIEq3ru6c=\ngoogle.golang.org/appengine v1.6.7/go.mod h1:8WjMMxjGQR8xUklV/ARdw2HLXBOI7O7uCIDZVag1xfc=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.28.0 h1:w43yiav+6bVFTBQFZX0r7ipe9JQ1QsbMgHwbBziscLw=\ngoogle.golang.org/protobuf v1.28.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=\n"
        },
        {
          "name": "projects",
          "type": "tree",
          "content": null
        },
        {
          "name": "release",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}