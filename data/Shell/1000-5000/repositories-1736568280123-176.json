{
  "metadata": {
    "timestamp": 1736568280123,
    "page": 176,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bobthecow/git-flow-completion",
      "stars": 2793,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.060546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2010-2015 Justin Hileman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\nOR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.markdown",
          "type": "blob",
          "size": 3.4560546875,
          "content": "git-flow-completion\n===================\n\nBash, Zsh and fish completion support for [git-flow](http://github.com/nvie/gitflow).\n\nThe contained completion routines provide support for completing:\n\n * git-flow init and version\n * feature, hotfix and release branches\n * remote feature, hotfix and release branch names\n\n\nInstallation for Bash\n---------------------\n\nTo achieve git-flow completion nirvana:\n\n 0. [Install git-completion](http://github.com/bobthecow/git-flow-completion/wiki/Install-Bash-git-completion).\n\n 1. Install `git-flow-completion.bash`. Either:\n\n    1. Place it in your `bash_completion.d` folder, usually something like `/etc/bash_completion.d`,\n       `/usr/local/etc/bash_completion.d` or `~/bash_completion.d`.\n\n    2. Or, copy it somewhere (e.g. `~/git-flow-completion.bash`) and put the following line in the `.profile` or\n       `.bashrc` file in your home directory:\n\n            source ~/git-flow-completion.bash\n\n 2. If you are using Git < 1.7.1, you will need to edit git completion (usually `/etc/bash_completion.d/git` or\n    `git-completion.sh`) and add the following line to the `$command` case in `_git`:\n\n        _git ()\n        {\n                [...]\n                case \"$command\" in\n                   [...]\n                   flow)        _git_flow ;;\t\t\n                   *)           COMPREPLY=() ;;\n                esac\n        }\n\n\nInstallation for Zsh\n--------------------\n\nTo achieve git-flow completion nirvana:\n\n 0. Update your zsh's git-completion module to the newest version --\n    [available here](http://sourceforge.net/p/zsh/code/ci/master/tree/Completion/Unix/Command/_git). Optional if you have an up-to-date version of zsh.\n\n 1. Install `git-flow-completion.zsh`. Either:\n\n    1. Place it in your `.zshrc`.\n\n    2. Or, copy it somewhere (e.g. `~/.git-flow-completion.zsh`) and put the following line in\n       your `.zshrc`:\n\n            source ~/.git-flow-completion.zsh\n\n    3. Or, use this file as an oh-my-zsh plugin.\n \n         1. Install the plugin by cloning this repository to your directory for [custom oh-my-zsh plugins](https://github.com/robbyrussell/oh-my-zsh#customization):\n         \n         `git clone https://github.com/bobthecow/git-flow-completion ~/.oh-my-zsh/custom/plugins/git-flow-completion`\n         \n         After doing that, your file tree ought to look like this:\n         \n         ![](https://cloud.githubusercontent.com/assets/2547625/3866984/2f28fc4c-1feb-11e4-8c37-79627d655000.png)\n         \n         2. Turn the plugin on by updating your zsh configuration file, `~/.zshrc`\n         \n             1. `open ~/.zshrc`\n             2. Find the plugins section. It'll look like this:\n             \n                     # Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)\n                     # Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/\n                     # Example format: plugins=(rails git textmate ruby lighthouse)\n                     plugins=(<some-plugin> <another-plugin> <third-plugin>)\n             \n             3. Add `git-flow-completion` to the list of plugins within the parentheses.\n             4. Save\n         \n         3. Reload Terminal\n\nInstallation for fish\n---------------------\n\nTo achieve git-flow completion nirvana:\n\n 1. Install `git.fish` in your `~/.config/fish/completions` folder.\n\n\nThe Fine Print\n--------------\n\nCopyright (c) 2010-2015 [Justin Hileman](http://justinhileman.com)\n\nDistributed under the [MIT License](http://creativecommons.org/licenses/MIT/)\n"
        },
        {
          "name": "git-flow-completion.bash",
          "type": "blob",
          "size": 4.6640625,
          "content": "#!bash\n#\n# git-flow-completion\n# ===================\n#\n# Bash completion support for [git-flow](http://github.com/nvie/gitflow)\n#\n# The contained completion routines provide support for completing:\n#\n#  * git-flow init and version\n#  * feature, hotfix and release branches\n#  * remote feature, hotfix and release branch names\n#\n#\n# Installation\n# ------------\n#\n# To achieve git-flow completion nirvana:\n#\n#  0. Install git-completion.\n#\n#  1. Install this file. Either:\n#\n#     a. Place it in a `bash-completion.d` folder:\n#\n#        * /etc/bash-completion.d\n#        * /usr/local/etc/bash-completion.d\n#        * ~/bash-completion.d\n#\n#     b. Or, copy it somewhere (e.g. ~/.git-flow-completion.sh) and put the following line in\n#        your .bashrc:\n#\n#            source ~/.git-flow-completion.sh\n#\n#  2. If you are using Git < 1.7.1: Edit git-completion.sh and add the following line to the giant\n#     $command case in _git:\n#\n#         flow)        _git_flow ;;\n#\n#\n# The Fine Print\n# --------------\n#\n# Copyright (c) 2010-2015 [Justin Hileman](http://justinhileman.com)\n#\n# Distributed under the [MIT License](http://creativecommons.org/licenses/MIT/)\n\n_git_flow ()\n{\n\tlocal subcommands=\"init feature release hotfix support help version\"\n\tlocal subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\"\n\tif [ -z \"$subcommand\" ]; then\n\t\t__gitcomp \"$subcommands\"\n\t\treturn\n\tfi\n\n\tcase \"$subcommand\" in\n\tinit)\n\t\t__git_flow_init\n\t\treturn\n\t\t;;\n\tfeature)\n\t\t__git_flow_feature\n\t\treturn\n\t\t;;\n\trelease)\n\t\t__git_flow_release\n\t\treturn\n\t\t;;\n\thotfix)\n\t\t__git_flow_hotfix\n\t\treturn\n\t\t;;\n\tsupport)\n\t\t__git_flow_support\n\t\treturn\n\t\t;;\n\t*)\n\t\tCOMPREPLY=()\n\t\t;;\n\tesac\n}\n\n__git_flow_init ()\n{\n\tlocal subcommands=\"help\"\n\tlocal subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\"\n\tif [ -z \"$subcommand\" ]; then\n\t\t__gitcomp \"$subcommands\"\n\t\treturn\n\tfi\n}\n\n__git_flow_feature ()\n{\n\tlocal subcommands=\"list start finish publish track diff rebase checkout pull help\"\n\tlocal subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\"\n\tif [ -z \"$subcommand\" ]; then\n\t\t__gitcomp \"$subcommands\"\n\t\treturn\n\tfi\n\n\tcase \"$subcommand\" in\n\tpull)\n\t\t__gitcomp \"$(__git_remotes)\"\n\t\treturn\n\t\t;;\n\tcheckout|finish|diff|rebase)\n\t\t__gitcomp \"$(__git_flow_list_branches 'feature')\"\n\t\treturn\n\t\t;;\n\tpublish)\n\t\t__gitcomp \"$(comm -23 <(__git_flow_list_branches 'feature') <(__git_flow_list_remote_branches 'feature'))\"\n\t\treturn\n\t\t;;\n\ttrack)\n\t\t__gitcomp \"$(comm -23 <(__git_flow_list_remote_branches 'feature') <(__git_flow_list_branches 'feature'))\"\n\t\treturn\n\t\t;;\n\t*)\n\t\tCOMPREPLY=()\n\t\t;;\n\tesac\n}\n\n__git_flow_release ()\n{\n\tlocal subcommands=\"list start finish track publish help\"\n\tlocal subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\"\n\tif [ -z \"$subcommand\" ]; then\n\t\t__gitcomp \"$subcommands\"\n\t\treturn\n\tfi\n\n\tcase \"$subcommand\" in\n\tfinish)\n\t\t__gitcomp \"$(__git_flow_list_branches 'release')\"\n\t\treturn\n\t\t;;\n\tpublish)\n\t\t__gitcomp \"$(comm -23 <(__git_flow_list_branches 'release') <(__git_flow_list_remote_branches 'release'))\"\n\t\treturn\n\t\t;;\n\ttrack)\n\t\t__gitcomp \"$(comm -23 <(__git_flow_list_remote_branches 'release') <(__git_flow_list_branches 'release'))\"\n\t\treturn\n\t\t;;\n\t*)\n\t\tCOMPREPLY=()\n\t\t;;\n\tesac\n\n}\n\n__git_flow_hotfix ()\n{\n\tlocal subcommands=\"list start finish track publish help\"\n\tlocal subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\"\n\tif [ -z \"$subcommand\" ]; then\n\t\t__gitcomp \"$subcommands\"\n\t\treturn\n\tfi\n\n\tcase \"$subcommand\" in\n\tfinish)\n\t\t__gitcomp \"$(__git_flow_list_branches 'hotfix')\"\n\t\treturn\n\t\t;;\n\tpublish)\n\t\t__gitcomp \"$(comm -23 <(__git_flow_list_branches 'hotfix') <(__git_flow_list_remote_branches 'hotfix'))\"\n\t\treturn\n\t\t;;\n\ttrack)\n\t\t__gitcomp \"$(comm -23 <(__git_flow_list_remote_branches 'hotfix') <(__git_flow_list_branches 'hotfix'))\"\n\t\treturn\n\t\t;;\n\t*)\n\t\tCOMPREPLY=()\n\t\t;;\n\tesac\n}\n\n__git_flow_support ()\n{\n\tlocal subcommands=\"list start help\"\n\tlocal subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\"\n\tif [ -z \"$subcommand\" ]; then\n\t\t__gitcomp \"$subcommands\"\n\t\treturn\n\tfi\n\n\tcase \"$subcommand\" in\n\t*)\n\t\tCOMPREPLY=()\n\t\t;;\n\tesac\n}\n\n__git_flow_prefix ()\n{\n\tcase \"$1\" in\n\tfeature|release|hotfix)\n\t\tgit config \"gitflow.prefix.$1\" 2> /dev/null || echo \"$1/\"\n\t\treturn\n\t\t;;\n\tesac\n}\n\n__git_flow_list_branches ()\n{\n\tlocal prefix=\"$(__git_flow_prefix $1)\"\n\tgit branch --no-color 2> /dev/null | tr -d ' |*' | grep --color=never \"^$prefix\" | sed s,^$prefix,, | sort\n}\n\n__git_flow_list_remote_branches ()\n{\n\tlocal prefix=\"$(__git_flow_prefix $1)\"\n\tlocal origin=\"$(git config gitflow.origin 2> /dev/null || echo \"origin\")\"\n\tgit branch --no-color -r 2> /dev/null | sed \"s/^ *//g\" | grep --color=never \"^$origin/$prefix\" | sed s,^$origin/$prefix,, | sort\n}\n\n# alias __git_find_on_cmdline for backwards compatibility\nif [ -z \"`type -t __git_find_on_cmdline`\" ]; then\n\talias __git_find_on_cmdline=__git_find_subcommand\nfi\n"
        },
        {
          "name": "git-flow-completion.plugin.zsh",
          "type": "blob",
          "size": 0.0224609375,
          "content": "git-flow-completion.zsh"
        },
        {
          "name": "git-flow-completion.zsh",
          "type": "blob",
          "size": 7.361328125,
          "content": "#!zsh\n#\n# Installation\n# ------------\n#\n# To achieve git-flow completion nirvana:\n#\n#  0. Update your zsh's git-completion module to the newest verion.\n#     From here. http://zsh.git.sourceforge.net/git/gitweb.cgi?p=zsh/zsh;a=blob_plain;f=Completion/Unix/Command/_git;hb=HEAD\n#\n#  1. Install this file. Either:\n#\n#     a. Place it in your .zshrc:\n#\n#     b. Or, copy it somewhere (e.g. ~/.git-flow-completion.zsh) and put the following line in\n#        your .zshrc:\n#\n#            source ~/.git-flow-completion.zsh\n#\n#     c. Or, use this file as a oh-my-zsh plugin.\n#\n\n_git-flow ()\n{\n\tlocal curcontext=\"$curcontext\" state line\n\ttypeset -A opt_args\n\n\t_arguments -C \\\n\t\t':command:->command' \\\n\t\t'*::options:->options'\n\n\tcase $state in\n\t\t(command)\n\n\t\t\tlocal -a subcommands\n\t\t\tsubcommands=(\n\t\t\t\t'init:Initialize a new git repo with support for the branching model.'\n\t\t\t\t'feature:Manage your feature branches.'\n\t\t\t\t'release:Manage your release branches.'\n\t\t\t\t'hotfix:Manage your hotfix branches.'\n\t\t\t\t'support:Manage your support branches.'\n\t\t\t\t'version:Shows version information.'\n\t\t\t)\n\t\t\t_describe -t commands 'git flow' subcommands\n\t\t;;\n\n\t\t(options)\n\t\t\tcase $line[1] in\n\n\t\t\t\t(init)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-f'[Force setting of gitflow branches, even if already configured]'\n\t\t\t\t\t;;\n\n\t\t\t\t\t(version)\n\t\t\t\t\t;;\n\n\t\t\t\t\t(hotfix)\n\t\t\t\t\t\t__git-flow-hotfix\n\t\t\t\t\t;;\n\n\t\t\t\t\t(release)\n\t\t\t\t\t\t__git-flow-release\n\t\t\t\t\t;;\n\n\t\t\t\t\t(feature)\n\t\t\t\t\t\t__git-flow-feature\n\t\t\t\t\t;;\n\t\t\tesac\n\t\t;;\n\tesac\n}\n\n__git-flow-release ()\n{\n\tlocal curcontext=\"$curcontext\" state line\n\ttypeset -A opt_args\n\n\t_arguments -C \\\n\t\t':command:->command' \\\n\t\t'*::options:->options'\n\n\tcase $state in\n\t\t(command)\n\n\t\t\tlocal -a subcommands\n\t\t\tsubcommands=(\n\t\t\t\t'start:Start a new release branch.'\n\t\t\t\t'finish:Finish a release branch.'\n\t\t\t\t'list:List all your release branches. (Alias to `git flow release`)'\n\t\t\t\t'publish:Publish release branch to remote.'\n\t\t\t\t'track:Checkout remote release branch.'\n\t\t\t)\n\t\t\t_describe -t commands 'git flow release' subcommands\n\t\t\t_arguments \\\n\t\t\t\t-v'[Verbose (more) output]'\n\t\t;;\n\n\t\t(options)\n\t\t\tcase $line[1] in\n\n\t\t\t\t(start)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-F'[Fetch from origin before performing finish]'\\\n\t\t\t\t\t\t':version:__git_flow_version_list'\n\t\t\t\t;;\n\n\t\t\t\t(finish)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-F'[Fetch from origin before performing finish]' \\\n\t\t\t\t\t\t-s'[Sign the release tag cryptographically]'\\\n\t\t\t\t\t\t-u'[Use the given GPG-key for the digital signature (implies -s)]'\\\n\t\t\t\t\t\t-m'[Use the given tag message]'\\\n\t\t\t\t\t\t-p'[Push to $ORIGIN after performing finish]'\\\n\t\t\t\t\t\t':version:__git_flow_version_list'\n\t\t\t\t;;\n\n\t\t\t\t(publish)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t':version:__git_flow_version_list'\n\t\t\t\t;;\n\n\t\t\t\t(track)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t':version:__git_flow_version_list'\n\t\t\t\t;;\n\n\t\t\t\t*)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-v'[Verbose (more) output]'\n\t\t\t\t;;\n\t\t\tesac\n\t\t;;\n\tesac\n}\n\n__git-flow-hotfix ()\n{\n\tlocal curcontext=\"$curcontext\" state line\n\ttypeset -A opt_args\n\n\t_arguments -C \\\n\t\t':command:->command' \\\n\t\t'*::options:->options'\n\n\tcase $state in\n\t\t(command)\n\n\t\t\tlocal -a subcommands\n\t\t\tsubcommands=(\n\t\t\t\t'start:Start a new hotfix branch.'\n\t\t\t\t'finish:Finish a hotfix branch.'\n\t\t\t\t'list:List all your hotfix branches. (Alias to `git flow hotfix`)'\n\t\t\t)\n\t\t\t_describe -t commands 'git flow hotfix' subcommands\n\t\t\t_arguments \\\n\t\t\t\t-v'[Verbose (more) output]'\n\t\t;;\n\n\t\t(options)\n\t\t\tcase $line[1] in\n\n\t\t\t\t(start)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-F'[Fetch from origin before performing finish]'\\\n\t\t\t\t\t\t':hotfix:__git_flow_version_list'\\\n\t\t\t\t\t\t':branch-name:__git_branch_names'\n\t\t\t\t;;\n\n\t\t\t\t(finish)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-F'[Fetch from origin before performing finish]' \\\n\t\t\t\t\t\t-s'[Sign the release tag cryptographically]'\\\n\t\t\t\t\t\t-u'[Use the given GPG-key for the digital signature (implies -s)]'\\\n\t\t\t\t\t\t-m'[Use the given tag message]'\\\n\t\t\t\t\t\t-p'[Push to $ORIGIN after performing finish]'\\\n\t\t\t\t\t\t':hotfix:__git_flow_hotfix_list'\n\t\t\t\t;;\n\n\t\t\t\t*)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-v'[Verbose (more) output]'\n\t\t\t\t;;\n\t\t\tesac\n\t\t;;\n\tesac\n}\n\n__git-flow-feature ()\n{\n\tlocal curcontext=\"$curcontext\" state line\n\ttypeset -A opt_args\n\n\t_arguments -C \\\n\t\t':command:->command' \\\n\t\t'*::options:->options'\n\n\tcase $state in\n\t\t(command)\n\n\t\t\tlocal -a subcommands\n\t\t\tsubcommands=(\n\t\t\t\t'start:Start a new feature branch.'\n\t\t\t\t'finish:Finish a feature branch.'\n\t\t\t\t'list:List all your feature branches. (Alias to `git flow feature`)'\n\t\t\t\t'publish:Publish feature branch to remote.'\n\t\t\t\t'track:Checkout remote feature branch.'\n\t\t\t\t'diff:Show all changes.'\n\t\t\t\t'rebase:Rebase from integration branch.'\n\t\t\t\t'checkout:Checkout local feature branch.'\n\t\t\t\t'pull:Pull changes from remote.'\n\t\t\t)\n\t\t\t_describe -t commands 'git flow feature' subcommands\n\t\t\t_arguments \\\n\t\t\t\t-v'[Verbose (more) output]'\n\t\t;;\n\n\t\t(options)\n\t\t\tcase $line[1] in\n\n\t\t\t\t(start)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-F'[Fetch from origin before performing finish]'\\\n\t\t\t\t\t\t':feature:__git_flow_feature_list'\\\n\t\t\t\t\t\t':branch-name:__git_branch_names'\n\t\t\t\t;;\n\n\t\t\t\t(finish)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-F'[Fetch from origin before performing finish]' \\\n\t\t\t\t\t\t-r'[Rebase instead of merge]'\\\n\t\t\t\t\t\t':feature:__git_flow_feature_list'\n\t\t\t\t;;\n\n\t\t\t\t(publish)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t':feature:__git_flow_feature_list'\\\n\t\t\t\t;;\n\n\t\t\t\t(track)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t':feature:__git_flow_feature_list'\\\n\t\t\t\t;;\n\n\t\t\t\t(diff)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t':branch:__git_branch_names'\\\n\t\t\t\t;;\n\n\t\t\t\t(rebase)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-i'[Do an interactive rebase]' \\\n\t\t\t\t\t\t':branch:__git_branch_names'\n\t\t\t\t;;\n\n\t\t\t\t(checkout)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t':branch:__git_flow_feature_list'\\\n\t\t\t\t;;\n\n\t\t\t\t(pull)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t':remote:__git_remotes'\\\n\t\t\t\t\t\t':branch:__git_branch_names'\n\t\t\t\t;;\n\n\t\t\t\t*)\n\t\t\t\t\t_arguments \\\n\t\t\t\t\t\t-v'[Verbose (more) output]'\n\t\t\t\t;;\n\t\t\tesac\n\t\t;;\n\tesac\n}\n\n__git_flow_version_list ()\n{\n\tlocal expl\n\tdeclare -a versions\n\n\tversions=(${${(f)\"$(_call_program versions git flow release list 2> /dev/null | tr -d ' |*')\"}})\n\t__git_command_successful || return\n\n\t_wanted versions expl 'version' compadd $versions\n}\n\n__git_flow_feature_list ()\n{\n\tlocal expl\n\tdeclare -a features\n\n\tfeatures=(${${(f)\"$(_call_program features git flow feature list 2> /dev/null | tr -d ' |*')\"}})\n\t__git_command_successful || return\n\n\t_wanted features expl 'feature' compadd $features\n}\n\n__git_remotes () {\n\tlocal expl gitdir remotes\n\n\tgitdir=$(_call_program gitdir git rev-parse --git-dir 2>/dev/null)\n\t__git_command_successful || return\n\n\tremotes=(${${(f)\"$(_call_program remotes git config --get-regexp '\"^remote\\..*\\.url$\"')\"}//#(#b)remote.(*).url */$match[1]})\n\t__git_command_successful || return\n\n\t# TODO: Should combine the two instead of either or.\n\tif (( $#remotes > 0 )); then\n\t\t_wanted remotes expl remote compadd $* - $remotes\n\telse\n\t\t_wanted remotes expl remote _files $* - -W \"($gitdir/remotes)\" -g \"$gitdir/remotes/*\"\n\tfi\n}\n\n__git_flow_hotfix_list ()\n{\n\tlocal expl\n\tdeclare -a hotfixes\n\n\thotfixes=(${${(f)\"$(_call_program hotfixes git flow hotfix list 2> /dev/null | tr -d ' |*')\"}})\n\t__git_command_successful || return\n\n\t_wanted hotfixes expl 'hotfix' compadd $hotfixes\n}\n\n__git_branch_names () {\n\tlocal expl\n\tdeclare -a branch_names\n\n\tbranch_names=(${${(f)\"$(_call_program branchrefs git for-each-ref --format='\"%(refname)\"' refs/heads 2>/dev/null)\"}#refs/heads/})\n\t__git_command_successful || return\n\n\t_wanted branch-names expl branch-name compadd $* - $branch_names\n}\n\n__git_command_successful () {\n\tif (( ${#pipestatus:#0} > 0 )); then\n\t\t_message 'not a git repository'\n\t\treturn 1\n\tfi\n\treturn 0\n}\n\nzstyle ':completion:*:*:git:*' user-commands flow:'provide high-level repository operations'\n"
        },
        {
          "name": "git.fish",
          "type": "blob",
          "size": 8.552734375,
          "content": "#!fish\n#\n# git-flow-completion\n# ===================\n#\n# Fish completion support for [git-flow](http://github.com/nvie/gitflow)\n#\n# The contained completion routines provide support for completing:\n#\n#  * git-flow init and version\n#  * feature, hotfix and release branches\n#  * remote feature, hotfix and release branch names\n#\n#\n# Installation\n# ------------\n#\n# To achieve git-flow completion nirvana:\n#\n#  1. Install this file in your `~/.config/fish/completions` folder.\n#\n#\n# The Fine Print\n# --------------\n#\n# Copyright (c) 2012-2015 [Justin Hileman](http://justinhileman.com)\n#\n# Distributed under the [MIT License](http://creativecommons.org/licenses/MIT/)\n\nfor prefix in /usr /usr/local /opt/local\n  if test -f $prefix/share/fish/completions/git.fish\n    source $prefix/share/fish/completions/git.fish\n    break\n  end\nend\n\nif not functions -q __fish_git_branches\n  echo \\nError: git completion not found >&2\n  exit\nend\n\n## Support functions\n\nfunction __fish_git_flow_using_command\n  set cmd (commandline -opc)\n  set subcommands 'flow' $argv\n  if [ (count $cmd) = (math (count $subcommands) + 1) ]\n    for i in (seq (count $subcommands))\n      if not test $subcommands[$i] = $cmd[(math $i + 1)]\n        return 1\n      end\n    end\n    return 0\n  end\n  return 1\nend\n\nfunction __fish_git_flow_prefix\n  git config \"gitflow.prefix.$argv[1]\" 2> /dev/null; or echo \"$argv[1]/\"\nend\n\nfunction __fish_git_flow_branches\n  set prefix (__fish_git_flow_prefix $argv[1])\n  __fish_git_branches | grep --color=never \"^$prefix\" | sed \"s,^$prefix,,\" | sort\nend\n\nfunction __fish_git_flow_remote_branches\n  set prefix (__fish_git_flow_prefix $argv[1])\n  set origin (git config gitflow.origin 2> /dev/null; or echo \"origin\")\n  git branch -r 2> /dev/null | sed \"s/^ *//g\" | grep --color=never \"^$origin/$prefix\" | sed \"s,^$origin/$prefix,,\" | sort\nend\n\nfunction __fish_git_flow_untracked_branches\n  set branches (__fish_git_flow_branches $argv[1])\n  for branch in (__fish_git_flow_remote_branches $argv[1])\n    if not contains $branch $branches\n      echo $branch\n    end\n  end\nend\n\nfunction __fish_git_flow_unpublished_branches\n  set branches (__fish_git_flow_remote_branches $argv[1])\n  for branch in (__fish_git_flow_branches $argv[1])\n    if not contains $branch $branches\n      echo $branch\n    end\n  end\nend\n\n\n## git-flow\n\ncomplete -f -c git -n '__fish_git_needs_command' -a flow -d 'Manage a git-flow enabled repository'\ncomplete -f -c git -n '__fish_git_flow_using_command' -a version -d 'Show version information'\n\n\n\n## git-flow init\n\ncomplete -f -c git -n '__fish_git_flow_using_command' -a init    -d 'Initialize a new git repo with support for the branching model'\ncomplete -f -c git -n '__fish_git_flow_using_command init' -s f  -d 'Force reinitialization'\ncomplete -f -c git -n '__fish_git_flow_using_command init' -s d  -d 'Use default branch names'\n\n\n\n## git-flow feature\n\ncomplete -f -c git -n '__fish_git_flow_using_command' -a feature      -d 'Manage feature branches'\ncomplete -f -c git -n '__fish_git_flow_using_command feature' -a list -d 'List feature branches'\ncomplete -f -c git -n '__fish_git_flow_using_command feature' -s v    -d 'Verbose output'\n\ncomplete -f -c git -n '__fish_git_flow_using_command feature' -a start    -d 'Start a new feature branch'\ncomplete -f -c git -n '__fish_git_flow_using_command feature start' -s F  -d 'Fetch from origin first'\n\ncomplete -f -c git -n '__fish_git_flow_using_command feature' -a finish   -d 'Finish a feature branch'\ncomplete -f -c git -n '__fish_git_flow_using_command feature finish' -s F -d 'Fetch from origin first'\ncomplete -f -c git -n '__fish_git_flow_using_command feature finish' -s r -d 'Rebase instead of merging'\ncomplete -f -c git -n '__fish_git_flow_using_command feature finish' -a '(__fish_git_flow_branches feature)' -d 'Feature branch'\n\ncomplete -f -c git -n '__fish_git_flow_using_command feature' -a publish  -d 'Publish a feature branch to remote'\ncomplete -f -c git -n '__fish_git_flow_using_command feature publish' -a '(__fish_git_flow_unpublished_branches feature)' -d 'Feature branch'\n\ncomplete -f -c git -n '__fish_git_flow_using_command feature' -a track    -d 'Checkout remote feature branch'\ncomplete -f -c git -n '__fish_git_flow_using_command feature track' -a '(__fish_git_flow_untracked_branches feature)' -d 'Feature branch'\n\ncomplete -f -c git -n '__fish_git_flow_using_command feature' -a diff     -d 'Show all changes'\n\ncomplete -f -c git -n '__fish_git_flow_using_command feature' -a rebase   -d 'Rebase against integration branch'\ncomplete -f -c git -n '__fish_git_flow_using_command feature rebase' -s i -d 'Do an interactive rebase'\n\ncomplete -f -c git -n '__fish_git_flow_using_command feature' -a checkout -d 'Checkout local feature branch'\ncomplete -f -c git -n '__fish_git_flow_using_command feature checkout' -a '(__fish_git_flow_branches feature)' -d 'Feature branch'\n\ncomplete -f -c git -n '__fish_git_flow_using_command feature' -a pull     -d 'Pull changes from remote'\ncomplete -f -c git -n '__fish_git_flow_using_command feature pull' -a '(__fish_git_remotes)' -d 'Remote'\n\n\n\n## git-flow release\n\ncomplete -f -c git -n '__fish_git_flow_using_command' -a release      -d 'Manage release branches'\ncomplete -f -c git -n '__fish_git_flow_using_command release' -a list -d 'List release branches'\ncomplete -f -c git -n '__fish_git_flow_using_command release' -s v    -d 'Verbose output'\n\ncomplete -f -c git -n '__fish_git_flow_using_command release' -a start -d 'Start a new release branch'\ncomplete -f -c git -n '__fish_git_flow_using_command release start' -s F  -d 'Fetch from origin first'\n\ncomplete -f -c git -n '__fish_git_flow_using_command release' -a finish   -d 'Finish a release branch'\ncomplete -f -c git -n '__fish_git_flow_using_command release finish' -s F -d 'Fetch from origin first'\ncomplete -f -c git -n '__fish_git_flow_using_command release finish' -s s -d 'Sign the release tag cryptographically'\ncomplete -f -c git -n '__fish_git_flow_using_command release finish' -s u -d 'Use the given GPG-key for the digital signature (implies -s)'\ncomplete -f -c git -n '__fish_git_flow_using_command release finish' -s m -d 'Use the given tag message'\ncomplete -f -c git -n '__fish_git_flow_using_command release finish' -s p -d 'Push to $ORIGIN after performing finish'\ncomplete -f -c git -n '__fish_git_flow_using_command release finish' -a '(__fish_git_flow_branches release)' -d 'Release branch'\n\ncomplete -f -c git -n '__fish_git_flow_using_command release' -a publish  -d 'Publish a release branch to remote'\ncomplete -f -c git -n '__fish_git_flow_using_command release publish' -a '(__fish_git_flow_unpublished_branches release)' -d 'Release branch'\n\ncomplete -f -c git -n '__fish_git_flow_using_command release' -a track    -d 'Checkout remote release branch'\ncomplete -f -c git -n '__fish_git_flow_using_command release track' -a '(__fish_git_flow_untracked_branches release)' -d 'Release branch'\n\n\n\n## git-flow hotfix\n\ncomplete -f -c git -n '__fish_git_flow_using_command' -a hotfix      -d 'Manage hotfix branches'\ncomplete -f -c git -n '__fish_git_flow_using_command hotfix' -a list -d 'List hotfix branches'\ncomplete -f -c git -n '__fish_git_flow_using_command hotfix' -s v    -d 'Verbose output'\n\ncomplete -f -c git -n '__fish_git_flow_using_command hotfix' -a start -d 'Start a new hotfix branch'\ncomplete -f -c git -n '__fish_git_flow_using_command hotfix start' -s F  -d 'Fetch from origin first'\n\ncomplete -f -c git -n '__fish_git_flow_using_command hotfix' -a finish   -d 'Finish a hotfix branch'\ncomplete -f -c git -n '__fish_git_flow_using_command hotfix finish' -s F -d 'Fetch from origin first'\ncomplete -f -c git -n '__fish_git_flow_using_command hotfix finish' -s s -d 'Sign the hotfix tag cryptographically'\ncomplete -f -c git -n '__fish_git_flow_using_command hotfix finish' -s u -d 'Use the given GPG-key for the digital signature (implies -s)'\ncomplete -f -c git -n '__fish_git_flow_using_command hotfix finish' -s m -d 'Use the given tag message'\ncomplete -f -c git -n '__fish_git_flow_using_command hotfix finish' -s p -d 'Push to $ORIGIN after performing finish'\ncomplete -f -c git -n '__fish_git_flow_using_command hotfix finish' -a '(__fish_git_flow_branches hotfix)' -d 'Hotfix branch'\n\n\n\n## git-flow support\n\ncomplete -f -c git -n '__fish_git_flow_using_command' -a support      -d 'Manage support branches'\ncomplete -f -c git -n '__fish_git_flow_using_command support' -a list -d 'List support branches'\ncomplete -f -c git -n '__fish_git_flow_using_command support' -s v    -d 'Verbose output'\n\ncomplete -f -c git -n '__fish_git_flow_using_command support' -a start -d 'Start a new support branch'\ncomplete -f -c git -n '__fish_git_flow_using_command support start' -s F  -d 'Fetch from origin first'\n\n"
        }
      ]
    }
  ]
}