{
  "metadata": {
    "timestamp": 1736568413018,
    "page": 361,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rails/rails-dev-box",
      "stars": 2046,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0205078125,
          "content": ".vagrant\n*.log\nrails\n"
        },
        {
          "name": "MIT-LICENSE",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2012-ω Xavier Noria\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.4853515625,
          "content": "# A Virtual Machine for Ruby on Rails Core Development\n\n## Introduction\n\n**Please note this VM is not designed for Rails application development, only Rails core development.**\n\nThis project automates the setup of a development environment for working on Ruby on Rails itself. Use this virtual machine to work on a pull request with everything ready to hack and run the test suites.\n\n## Requirements\n\n* [VirtualBox](https://www.virtualbox.org)\n\n* [Vagrant 2](http://vagrantup.com)\n\n* Install the `vagrant-vbguest` plugin: `vagrant plugin install vagrant-vbguest`.\n\n## How To Build The Virtual Machine\n\nBuilding the virtual machine is this easy:\n\n    host $ git clone https://github.com/rails/rails-dev-box.git\n    host $ cd rails-dev-box\n    host $ vagrant up\n\nThat's it.\n\nAfter the installation has finished, you can access the virtual machine with\n\n    host $ vagrant ssh\n    Welcome to Ubuntu 23.10 (GNU/Linux 6.5.0-14-generic x86_64)\n    ...\n    vagrant@rails-dev-box:~$\n\nPort 3000 in the host computer is forwarded to port 3000 in the virtual machine. Thus, applications running in the virtual machine can be accessed via localhost:3000 in the host computer. Be sure the web server is bound to the IP 0.0.0.0, instead of 127.0.0.1, so it can access all interfaces:\n\n    bin/rails server -b 0.0.0.0\n\n## RAM and CPUs\n\nBy default, the VM launches with 2 GB of RAM and 2 CPUs.\n\nThese can be overridden by setting the environment variables `RAILS_DEV_BOX_RAM` and `RAILS_DEV_BOX_CPUS`, respectively. Settings on VM creation don't matter, the environment variables are checked each time the VM boots.\n\n`RAILS_DEV_BOX_RAM` has to be expressed in megabytes, so configure 4096 if you want the VM to have 4 GB of RAM.\n\n## What's In The Box\n\n* Development tools\n\n* Git\n\n* Ruby 3.1\n\n* Bundler\n\n* SQLite3, MySQL, and Postgres\n\n* Databases and users needed to run the Active Record test suite\n\n* System dependencies for `nokogiri`, `sqlite3`, `mysql2`, and `pg`\n\n* Memcached\n\n* Redis\n\n* RabbitMQ\n\n* An ExecJS runtime\n\n## Recommended Workflow\n\nThe recommended workflow is\n\n* edit in the host computer and\n\n* test within the virtual machine.\n\nJust clone your Rails fork into the rails-dev-box directory on the host computer:\n\n    host $ ls\n    bootstrap.sh MIT-LICENSE README.md Vagrantfile\n    host $ git clone git@github.com:<your username>/rails.git\n\nVagrant mounts that directory as _/vagrant_ within the virtual machine:\n\n    vagrant@rails-dev-box:~$ ls /vagrant\n    bootstrap.sh MIT-LICENSE rails README.md Vagrantfile\n\nInstall gem dependencies in there:\n\n    vagrant@rails-dev-box:~$ cd /vagrant/rails\n    vagrant@rails-dev-box:/vagrant/rails$ bundle\n\nWe are ready to go to edit in the host, and test in the virtual machine.\n\nPlease have a look at the [Contributing to Ruby on Rails](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) guide for tips on how to run test suites, how to generate an application that uses your local checkout of Rails, etc.\n\nThis workflow is convenient because in the host computer you normally have your editor of choice fine-tuned, Git configured, and SSH keys in place.\n\n## Virtual Machine Management\n\nWhen done just log out with `^D` and suspend the virtual machine\n\n    host $ vagrant suspend\n\nthen, resume to hack again\n\n    host $ vagrant resume\n\nRun\n\n    host $ vagrant halt\n\nto shutdown the virtual machine, and\n\n    host $ vagrant up\n\nto boot it again.\n\nYou can find out the state of a virtual machine anytime by invoking\n\n    host $ vagrant status\n\nFinally, to completely wipe the virtual machine from the disk **destroying all its contents**:\n\n    host $ vagrant destroy # DANGER: all is gone\n\nPlease check the [Vagrant documentation](http://docs.vagrantup.com/v2/) for more information on Vagrant.\n\n## Faster Rails test suites\n\nThe default mechanism for sharing folders is convenient and works out the box in\nall Vagrant versions, but there are a couple of alternatives that are more\nperformant.\n\n### rsync\n\nVagrant 1.5 implements a [sharing mechanism based on rsync](https://www.vagrantup.com/blog/feature-preview-vagrant-1-5-rsync.html)\nthat dramatically improves read/write because files are actually stored in the\nguest. Just throw\n\n    config.vm.synced_folder '.', '/vagrant', type: 'rsync'\n\nto the _Vagrantfile_ and either rsync manually with\n\n    vagrant rsync\n\nor run\n\n    vagrant rsync-auto\n\nfor automatic syncs. See the post linked above for details.\n\n### NFS\n\nIf you're using Mac OS X or Linux you can increase the speed of Rails test suites with Vagrant's NFS synced folders.\n\nWith an NFS server installed (already installed on Mac OS X), add the following to the Vagrantfile:\n\n    config.vm.synced_folder '.', '/vagrant', type: 'nfs'\n    config.vm.network 'private_network', ip: '192.168.50.4' # ensure this is available\n\nThen\n\n    host $ vagrant up\n\nPlease check the Vagrant documentation on [NFS synced folders](http://docs.vagrantup.com/v2/synced-folders/nfs.html) for more information.\n\n## Troubleshooting\n\nOn `vagrant up`, it's possible to get this error message:\n\n```\nThe box 'ubuntu/yakkety64' could not be found or\ncould not be accessed in the remote catalog. If this is a private\nbox on HashiCorp's Atlas, please verify you're logged in via\nvagrant login. Also, please double-check the name. The expanded\nURL and error message are shown below:\n\nURL: [\"https://atlas.hashicorp.com/ubuntu/yakkety64\"]\nError:\n```\n\nAnd a known work-around (https://github.com/Varying-Vagrant-Vagrants/VVV/issues/354) can be:\n\n    sudo rm /opt/vagrant/embedded/bin/curl\n\n## License\n\nReleased under the MIT License, Copyright (c) 2012–<i>ω</i> Xavier Noria.\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 0.44921875,
          "content": "# -*- mode: ruby -*-\n# vi: set ft=ruby :\nVagrant.configure('2') do |config|\n  config.vm.box      = 'ubuntu/mantic64' # 23.10\n  config.vm.hostname = 'rails-dev-box'\n\n  config.vm.network :forwarded_port, guest: 3000, host: 3000\n\n  config.vm.provision :shell, path: 'bootstrap.sh', keep_color: true\n\n  config.vm.provider 'virtualbox' do |v|\n    v.memory = ENV.fetch('RAILS_DEV_BOX_RAM', 2048).to_i\n    v.cpus   = ENV.fetch('RAILS_DEV_BOX_CPUS', 2).to_i\n  end\nend\n"
        },
        {
          "name": "bootstrap.sh",
          "type": "blob",
          "size": 2.8271484375,
          "content": "#!/usr/bin/env bash\n\n# The output of all these installation steps is noisy. With this utility\n# the progress report is nice and concise.\nfunction install {\n    echo installing $1\n    shift\n    apt-get -y install \"$@\" >/dev/null 2>&1\n}\n\necho adding swap file\nfallocate -l 2G /swapfile\nchmod 600 /swapfile\nmkswap /swapfile\nswapon /swapfile\necho '/swapfile none swap defaults 0 0' >> /etc/fstab\n\n# Prevents \"Warning: apt-key output should not be parsed (stdout is not a terminal)\".\nexport APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo -E apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\n\necho updating package information\napt-get -y update >/dev/null 2>&1\n\ninstall Ruby ruby-full bundler libyaml-dev\ninstall 'development tools' build-essential autoconf libtool\n\n# echo installing current RubyGems\ngem update --system -N >/dev/null 2>&1\n\ninstall Git git\ninstall SQLite sqlite3 libsqlite3-dev pkg-config\ninstall memcached memcached\ninstall Redis redis-server\ninstall RabbitMQ rabbitmq-server\n\ninstall PostgreSQL postgresql postgresql-contrib libpq-dev\nsudo -i -u postgres createuser --superuser vagrant\nsudo -i -u postgres createdb -O vagrant -E UTF8 -T template0 activerecord_unittest\nsudo -i -u postgres createdb -O vagrant -E UTF8 -T template0 activerecord_unittest2\n\ndebconf-set-selections <<< 'mysql-server mysql-server/root_password password root'\ndebconf-set-selections <<< 'mysql-server mysql-server/root_password_again password root'\ninstall MySQL mysql-server libmysqlclient-dev libssl-dev\n# Set the password in an environment variable to avoid the warning issued if set with `-p`.\nMYSQL_PWD=root mysql -uroot <<SQL\nCREATE USER 'rails'@'localhost';\nCREATE DATABASE activerecord_unittest  DEFAULT CHARACTER SET utf8mb4;\nCREATE DATABASE activerecord_unittest2 DEFAULT CHARACTER SET utf8mb4;\nGRANT ALL PRIVILEGES ON activerecord_unittest.* to 'rails'@'localhost';\nGRANT ALL PRIVILEGES ON activerecord_unittest2.* to 'rails'@'localhost';\nGRANT ALL PRIVILEGES ON inexistent_activerecord_unittest.* to 'rails'@'localhost';\nSQL\n# To address `unable to connect to /tmp/mysql.sock` for trilogy\necho \"export MYSQL_SOCK=/var/run/mysqld/mysqld.sock\" >> /home/vagrant/.bashrc\n\ninstall 'Psych dependencies' libyaml-dev\ninstall 'Nokogiri dependencies' libxml2 libxml2-dev libxslt1-dev\ninstall 'Blade dependencies' libncurses5-dev\ninstall 'ruby-vips dependencies' libvips\ninstall 'ExecJS runtime' nodejs\ninstall 'Yarn' yarn\n\ninstall 'MuPDF' mupdf mupdf-tools\ninstall 'FFmpeg' ffmpeg\ninstall 'Poppler' poppler-utils\ninstall 'tzdata-legacy' tzdata-legacy\ninstall 'ImageMagick' imagemagick\n\n# Needed for docs generation.\nupdate-locale LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8 LC_ALL=en_US.UTF-8\n\necho \"test -d /vagrant/rails && cd /vagrant/rails\" >> /home/vagrant/.bashrc\n\necho 'all set, rock on!'\n"
        }
      ]
    }
  ]
}