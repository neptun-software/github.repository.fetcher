{
  "metadata": {
    "timestamp": 1736568552259,
    "page": 576,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bddicken/languages",
      "stars": 1556,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3349609375,
          "content": "\n*.class\ncode\n.idea/\n*.user\n*.o\n*.ali\n.aider*\n.env\nnode_modules/\ntarget/\nbuild/\nout/\ndist/\n*.log\n*.aux\n*.bbl\n*.blg\njvm.code\ncode.jar\ncode.elc\ncode.eln\nCargo.lock\n**/csharp/bin/\n**/csharp/obj/\n**/fsharp/bin/\n**/fsharp/obj/\n**/cobol/main\n**/js/bun\n*.iprof\n.scala-build\n*/scala/code-native\n*/scala/code.js\nlevenshtein.mod\n*/racket/compiled/\n*.zo\n"
        },
        {
          "name": "Brewfile",
          "type": "blob",
          "size": 0.30078125,
          "content": "brew \"python@3.13\"\nbrew \"rust\"\nbrew \"go\"\nbrew \"ruby\"\nbrew \"zig\"\nbrew \"hyperfine\"\nbrew \"lua\"\nbrew \"luajit\"\nbrew \"odin\"\nbrew \"elixir\"\nbrew \"chezscheme\"\nbrew \"mawk\"\nbrew \"gnucobol\"\nbrew \"vlang\"\nbrew \"dart-sdk\"\ncask \"dotnet-sdk\"\nbrew \"julia\"\nbrew \"haskell-stack\"\nbrew \"kotlin\"\ncask \"kotlin-native\"\ncask \"racket\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.208984375,
          "content": "\n# Languages\n\nA repo for collaboratively building small benchmarks to compare languages.\nIf you have a suggestion for improvement: PR!\nIf you want to add a language: PR!\n\n## Running\n\nTo run one of the benchmarks:\n\n1. `cd` into desired benchmark directory (EG `$ cd loops`)\n2. Compile by running `$ ../compile.sh`\n3. Run via `$ ../run.sh`.\n  You should see output something like:\n  \n  ```\n  $ ../run.sh\n\n  Benchmarking Zig\n  Benchmark 1: ./zig/code 40\n    Time (mean ± σ):     513.9 ms ±   2.9 ms    [User: 504.5 ms, System: 2.6 ms]\n    Range (min … max):   510.6 ms … 516.2 ms    3 runs\n\n\n  Benchmarking C\n  Benchmark 1: ./c/code 40\n    Time (mean ± σ):     514.0 ms ±   1.1 ms    [User: 505.6 ms, System: 2.8 ms]\n    Range (min … max):   513.2 ms … 515.2 ms    3 runs\n\n\n  Benchmarking Rust\n  Benchmark 1: ./rust/target/release/code 40\n    Time (mean ± σ):     514.1 ms ±   2.0 ms    [User: 504.6 ms, System: 3.1 ms]\n    Range (min … max):   512.4 ms … 516.3 ms    3 runs\n\n  ...\n  ```\n\n4. For good measure, execute `$ ../clean.sh` when finished.\n\nHyperfine is used to warm, execute, and time the runs of the programs.\n\n## Adding\n\nTo add a language:\n\n1. Select the benchmark directory you want to add to (EG `$ cd loops`)\n2. Create a new subdirectory for the language (EG `$ mkdir rust`)\n3. Implement the code in the appropriately named file (EG: `code.rs`)\n4. If the language is compiled, add appropriate command to `../compile.sh` and `../clean.sh`\n5. Add appropriate line to `../run.sh`\n\nYou are also welcome to add new top-level benchmarks dirs\n\n# Available Benchmarks\n\n### [hello-world](./hello-world/README.md)\n\n### [loops](./loops/README.md)\n\n### [fibonacci](./fibonacci/README.md)\n\n### [levenshtein](./levenshtein/README.md)\n\n# Corresponding visuals\n\nSeveral visuals have been published based on the work here.\nMore will likely be added in the future, as this repository improves:\n\n- https://benjdd.com/languages\n- https://benjdd.com/languages2\n- https://benjdd.com/languages3\n- https://pez.github.io/languages-visualizations/ \n  - check https://github.com/PEZ/languages-visualizations/tags for tags, which correspond to a snapshot of some particular benchmark run: e.g:\n  - https://pez.github.io/languages-visualizations/v2024.12.31/"
        },
        {
          "name": "clean.sh",
          "type": "blob",
          "size": 0.9560546875,
          "content": "rm c3/code\nrm c/code\nrm cpp/code\nrm go/code\nrm jvm/*.class\nrm java-native-image/code\nrm java-native-image/jvm.code\nrm java-native-image/default.iprof\nrm scala/code scala/code-native\nrm -r rust/target\nrm -rf kotlin/code.jar\nrm kotlin/code.kexe\nrm dart/code\nrm -rf inko/build inko/code\nrm nim/code\nrm js/bun\nrm common-lisp/code\nrm fpc/code\nrm modula2/code\nrm crystal/code\nrm ada/code ada/code.ali ada/code.o\nrm d/code\nrm odin/code\nrm objc/code\nrm fortran/code\nrm zig/code\nrm lua/code\nrm -f swift/code\nrm haxe/code.jar\nrm -rf csharp/bin\nrm -rf csharp/obj\nrm -rf csharp/code-aot\nrm -rf csharp/code\nrm -rf fsharp/bin\nrm -rf fsharp/obj\nrm -rf fsharp/code-aot\nrm -rf fsharp/code\nrm haskell/code haskell/*.hi haskell/*.o\nrm hare/code\nrm v/code\nrm emojicode/code emojicode/code.o\nrm -f chez/code.so\nrm -rf clojure/classes clojure/.cpcache\nrm -rf clojure-native-image/classes clojure-native-image/.cpcache clojure-native-image/code\nrm cobol/main\nrm emacs-lisp/code.eln emacs-lisp/code.elc\n"
        },
        {
          "name": "compile.sh",
          "type": "blob",
          "size": 4.697265625,
          "content": "function compile {\n  if [ -d ${1} ]; then\n    echo \"\"\n    echo \"Compiling $1\"\n    ${2} 2> /dev/null\n    result=$?\n    if [ $result -ne 0 ]; then\n        echo \"Failed to compile ${1} with command: ${2}\"\n    fi\n  fi\n}\n\ncompile 'c3' 'c3c compile c3/code.c3 -o c3/code'\ncompile 'c' 'gcc -O3 c/code.c -o c/code'\ncompile 'cpp' 'g++ -std=c++23 -march=native -O3 -Ofast -o cpp/code cpp/code.cpp'\n#compile 'go' 'go build -ldflags \"-s -w\" -o go/code go/code.go'\ngo build -ldflags \"-s -w\" -o go/code go/code.go\nhare build -R -o hare/code hare/code.ha\ncompile 'jvm' 'javac jvm/code.java'\ncompile 'js' 'bun build --bytecode --compile js/code.js --outfile js/bun'\n# The compile function can't cope with the java-native-image compile\n(cd java-native-image && native-image -cp .. -O3 --pgo-instrument -march=native jvm.code  && ./jvm.code $(cat input.txt) && native-image -cp .. -O3 --pgo -march=native jvm.code -o code)\ncompile 'rust' 'RUSTFLAGS=\"-Zlocation-detail=none\" cargo +nightly build --manifest-path rust/Cargo.toml --release'\ncompile 'rust' 'cargo build --manifest-path rust/Cargo.toml --release'\ncompile 'kotlin' 'kotlinc -include-runtime kotlin/code.kt -d kotlin/code.jar'\ncompile 'kotlin' 'kotlinc-native kotlin/code.kt -o kotlin/code -opt'\ncompile 'dart' 'dart compile exe dart/code.dart -o dart/code --target-os=macos'\ncompile 'inko' '(cd inko && inko build --opt=aggressive code.inko -o code)'\ncompile 'nim' 'nim c -d:danger --opt:speed -d:passC -x:off -a:off nim/code.nim'\ncompile 'nim' 'nim -d:release --threads:off --stackTrace:off --lineTrace:off --opt:speed -x:off -o:nim/code c nim/code.nim'\ncompile 'sbcl' 'sbcl --noinform --non-interactive --load \"common-lisp/code.lisp\" --build'\ncompile 'fpc' 'fpc -O3 fpc/code.pas'\ncompile 'modula2' 'gm2 -O3 modula2/code.mod -o modula2/code'\ncompile 'crystal' 'crystal build -o crystal/code --release crystal/code.cr'\ncompile 'scala' 'scala-cli --power package --assembly scala/code.scala -f -o scala/code'\ncompile 'scala' 'scala-cli --power package --native scala/code.scala -f -o scala/code-native --native-mode release-full'\ncompile 'scala' 'scala-cli --power package --js scala/codeJS.scala -f -o scala/code.js --js-module-kind commonjs --js-mode fullLinkJS'\ncompile 'scala' 'bun build --bytecode --compile scala/code.js --outfile scala/bun'\ncompile 'ldc2' 'ldc2 -O3 -release -boundscheck=off -mcpu=native flto=thin d/code.d'\ncompile 'odin' 'odin build odin/code.odin -o:speed -file -out:odin/code'\ncompile 'objc' 'clang -O3 -framework Foundation objc/code.m -o objc/code'\ncompile 'fortran' 'gfortran -O3 fortran/code.f90 -o fortran/code'\ncompile 'zig' 'zig build-exe -O ReleaseFast -femit-bin=zig/code zig/code.zig'\ncompile 'lua' 'luajit -b lua/code.lua lua/code'\ncompile 'swift' 'swiftc -O -parse-as-library -Xcc -funroll-loops -Xcc -march=native -Xcc -ftree-vectorize -Xcc -ffast-math swift/code.swift -o swift/code'\ncompile 'csharp' 'dotnet publish csharp -o csharp/code'\ncompile 'csharp' 'dotnet publish csharp -o csharp/code-aot /p:PublishAot=true /p:OptimizationPreference=Speed'\ncompile 'fsharp' 'dotnet publish fsharp -o fsharp/code'\ncompile 'fsharp' 'dotnet publish fsharp -o fsharp/code-aot /p:PublishAot=true /p:OptimizationPreference=Speed'\ncompile 'haskell' 'ghc -O2 -fllvm haskell/code.hs -o haskell/code || { echo \"ghc: cannot compile with llvm backend; fallback to use default backend\"; ghc -O2 haskell/code.hs -o haskell/code; }'\ncompile 'v' 'v -prod -cc clang -cflags -march=native -d no_backtrace -o v/code v/code.v'\ncompile 'emojicode' 'emojicodec emojicode/code.emojic'\ncompile 'chez' \"echo '(compile-program \\\"chez/code.ss\\\")' | chez --optimize-level 3 -q\"\n#compile 'clojure' \"(cd clojure && mkdir -p classes && clojure -Sdeps '{:paths [\\\".\\\"]}' -M -e \\\"(compile 'code)\\\")\"\n(cd clojure && mkdir -p classes && clojure -Sdeps '{:paths [\".\"]}' -M -e \"(compile 'code)\")\n#compile 'clojure-native-image' \"(cd clojure-native-image && clojure -M:native-image)\"\n#Using `compile` for clojure-native-image silently fails\n(cd clojure-native-image && clojure -M:native-image --pgo-instrument -march=native && ./code $(cat input.txt) && clojure -M:native-image --pgo -march=native)\ncompile 'cobol' 'cobc -I /opt/homebrew/include/ -O -O2 -O3 -Os -x -o cobol/main cobol/main.cbl'\ncompile 'lean4' 'lake build --dir lean4 '\n# compile 'java' 'haxe --class-path haxe -main Code --jvm haxe/code.jar # was getting errors running `haxelib install hxjava`'\n# compile 'ada' 'gnatmake -O3 -gnat2022 -gnatp -flto ada/code.adb -D ada -o ada/code'\n#Using `compile` for Emacs Lisp silently fails\n(cd emacs-lisp && emacs -Q --batch --eval '(byte-compile-file \"code.el\")')\n(cd emacs-lisp && emacs -Q --batch --eval '(native-compile \"code.el\" (expand-file-name \"code.eln\"))')\n(cd racket && raco make code.rkt && raco demod -o code.zo code.rkt && raco exe -o code code.zo)\n"
        },
        {
          "name": "fibonacci",
          "type": "tree",
          "content": null
        },
        {
          "name": "hello-world",
          "type": "tree",
          "content": null
        },
        {
          "name": "levenshtein",
          "type": "tree",
          "content": null
        },
        {
          "name": "loops",
          "type": "tree",
          "content": null
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 0.0859375,
          "content": "{\n  \"name\": \"languages\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {}\n}\n"
        },
        {
          "name": "run.sh",
          "type": "blob",
          "size": 5.3193359375,
          "content": "# We run the benchmark with input.txt as arguments\n# unless the script is run with arguments, then those will be used instead\n# With arguments the check will be skipped, unless the only argument is \"check\"\n# The special argument \"check\" makes the input always input.txt, and skips the benchmark\n\nnum_script_args=\"${#}\"\nscript_args=\"${*}\"\nif [ \"${script_args}\" = \"check\" ]; then\n  input=$(cat input.txt)\nelse\n  input=${script_args:-$(cat input.txt)}\nfi\n\nfunction check {\n  if [ ${num_script_args} -eq 0 ] || [ \"${script_args}\" = \"check\" ]; then\n    echo \"Checking $1\"\n    output=$(${2} ${3})\n    if ! ./check.sh \"$output\"; then\n      echo \"Check failed for $1.\"\n      return 1\n    fi\n  fi\n}\n\nfunction run {\n  echo \"\"\n  if [ -f ${2} ]; then\n    check \"${1}\" \"${3}\" \"${4}\"\n    if [ ${?} -eq 0 ] && [ \"${script_args}\" != \"check\" ]; then\n      cmd=$(echo \"${3} ${4}\" | awk '{ if (length($0) > 80) print substr($0, 1, 60) \" ...\"; else print $0 }')\n      echo \"Benchmarking $1\"\n      hyperfine -i --shell=none --output=pipe --runs 3 --warmup 2 -n \"${cmd}\" \"${3} ${4}\"\n    fi\n  else\n    echo \"No executable or script found for $1. Skipping.\"\n  fi\n}\n\nrun \"Hare\" \"./hare/code 40\"\n# run \"Language\" \"Executable\" \"Command\" \"Arguments\"\n#run \"Ada\" \"./ada/code\" \"./ada/code\" \"${input}\"\n#run \"AWK\" \"./awk/code.awk\" \"awk -f ./awk/code.awk\" \"${input}\"\n#run \"Babashka\" \"bb/code.clj\" \"bb bb/code.clj\" \"${input}\"\nrun \"Bun (Compiled)\" \"./js/bun\" \"./js/bun\" \"${input}\"\nrun \"Bun (jitless)\" \"./js/code.js\" \"bun ./js/code.js\" \"BUN_JSC_useJIT=0\" \"${input}\"\nrun \"Bun\" \"./js/code.js\" \"bun ./js/code.js\" \"${input}\"\nrun \"C3\" \"./c3/code\" \"./c3/code\" \"${input}\"\nrun \"C\" \"./c/code\" \"./c/code\" \"${input}\"\nrun \"C#\" \"./csharp/code/code\" \"./csharp/code/code\" \"${input}\"\nrun \"C# AOT\" \"./csharp/code-aot/code\" \"./csharp/code-aot/code\" \"${input}\"\nrun \"Chez Scheme\" \"./chez/code.so\" \"chez --program ./chez/code.so\" \"${input}\"\nrun \"Clojure\" \"./clojure/classes/code.class\" \"java -cp clojure/classes:$(clojure -Spath) code\" \"${input}\"\nrun \"Clojure Native\" \"./clojure-native-image/code\" \"./clojure-native-image/code\" \"${input}\"\nrun \"COBOL\" \"./cobol/main\" \"./cobol/main\" \"${input}\"\nrun \"Common Lisp\" \"./common-lisp/code\" \"sbcl --script common-lisp/code.lisp\" \"${input}\"\nrun \"CPP\" \"./cpp/code\" \"./cpp/code\" \"${input}\"\nrun \"Crystal\" \"./crystal/code\" \"./crystal/code\" \"${input}\"\n#run \"D\" \"./d/code\" \"./d/code\" \"${input}\"\nrun \"Dart\" \"./dart/code\" \"./dart/code\" \"${input}\"\nrun \"Deno (jitless)\" \"./js/code.js\" \"deno --v8-flags=--jitless ./js/code.js\" \"${input}\"\nrun \"Deno\" \"./js/code.js\" \"deno run ./js/code.js\" \"${input}\"\nrun \"Elixir\" \"./elixir/bench.exs\" \"elixir ./elixir/bench.exs\" \"${input}\"\nrun \"Emojicode\" \"./emojicode/code\" \"./emojicode/code\" \"${input}\"\nrun \"F#\" \"./fsharp/code/code\" \"./fsharp/code/code\" \"${input}\"\nrun \"F# AOT\" \"./fsharp/code-aot/code\" \"./fsharp/code-aot/code\" \"${input}\"\nrun \"Fortran\" \"./fortran/code\" \"./fortran/code\" \"${input}\"\nrun \"Free Pascal\" \"./fpc/code\" \"./fpc/code\" \"${input}\"\nrun \"Go\" \"./go/code\" \"./go/code\" \"${input}\"\nrun \"Haskell\" \"./haskell/code\" \"./haskell/code\" \"${input}\"\n#run \"Haxe JVM\" \"haxe/code.jar\" \"java -jar haxe/code.jar\" \"${input}\" # was getting errors running `haxelib install hxjava` \nrun \"Inko\" \"./inko/code\" \"./inko/code\" \"${input}\"\nrun \"Java\" \"./jvm/code.class\" \"java jvm.code\" \"${input}\"\nrun \"Java Native\" \"./java-native-image/code\" \"./java-native-image/code\" \"${input}\"\nrun \"Julia\" \"./julia/code.jl\" \"julia ./julia/code.jl\" \"${input}\"\nrun \"Kotlin JVM\" \"kotlin/code.jar\" \"java -jar kotlin/code.jar\" \"${input}\"\nrun \"Kotlin Native\" \"./kotlin/code.kexe\" \"./kotlin/code.kexe\" \"${input}\"\nrun \"Lua\" \"./lua/code.lua\" \"lua ./lua/code.lua\" \"${input}\"\nrun \"LuaJIT\" \"./lua/code\" \"luajit ./lua/code\" \"${input}\"\n#run \"MAWK\" \"./awk/code.awk\" \"mawk -f ./awk/code.awk\" \"${input}\"\nrun \"Modula 2\" \"./modula2/code\" \"./modula2/code\" \"${input}\"\nrun \"Nim\" \"./nim/code\" \"./nim/code\" \"${input}\"\nrun \"Node (jitless)\" \"./js/code.js\" \"node --jitles ./js/code.js\" \"${input}\"\nrun \"Node\" \"./js/code.js\" \"node ./js/code.js\" \"${input}\"\nrun \"Objective-C\" \"./objc/code\" \"./objc/code\" \"${input}\"\n#run \"Octave\" \"./octave/code.m\" \"octave ./octave/code.m 40\" \"${input}\"\nrun \"Odin\" \"./odin/code\" \"./odin/code\" \"${input}\"\nrun \"PHP JIT\" \"./php/code.php\" \"php -dopcache.enable_cli=1 -dopcache.jit=on -dopcache.jit_buffer_size=64M ./php/code.php\" \"${input}\"\nrun \"PHP\" \"./php/code.php\" \"php ./php/code.php\" \"${input}\"\nrun \"PyPy\" \"./py/code.py\" \"pypy ./py/code.py\" \"${input}\"\nrun \"Python\" \"./py/code.py\" \"python3.13 ./py/code.py\" \"${input}\"\n#run \"R\" \"./r/code.R\" \"Rscript ./r/code.R\" \"${input}\"\nrun \"Racket\" \"./racket/code\" \"./racket/code\" \"$input\"\nrun \"Ruby YJIT\" \"./ruby/code.rb\" \"miniruby --yjit ./ruby/code.rb\" \"${input}\"\nrun \"Ruby\" \"./ruby/code.rb\" \"ruby ./ruby/code.rb\" \"${input}\"\nrun \"Rust\" \"./rust/target/release/code\" \"./rust/target/release/code\" \"${input}\"\nrun \"Scala\" \"./scala/code\" \"./scala/code\" \"${input}\"\nrun \"Scala-Native\" \"./scala/code-native\" \"./scala/code-native\" \"${input}\"\nrun \"Bun Scala-JS(Compiled)\" \"./scala/bun\" \"./scala/bun\" \"${input}\"\nrun \"Bun Scala-JS\" \"./scala/code.js\" \"bun ./scala/code.js\" \"${input}\"\nrun \"Swift\" \"./swift/code\" \"./swift/code\" \"${input}\"\nrun \"V\" \"./v/code\" \"./v/code\" \"${input}\"\nrun \"Zig\" \"./zig/code\" \"./zig/code\" \"${input}\"\nrun \"Emacs Lisp Bytecode\" \"./emacs-lisp/code.elc\" \"emacs -Q --batch --load ./emacs-lisp/code.elc\" \"${input}\"\nrun \"Emacs Lisp Native\" \"./emacs-lisp/code.eln\" \"emacs -Q --batch --load ./emacs-lisp/code.eln\" \"${input}\"\n"
        }
      ]
    }
  ]
}