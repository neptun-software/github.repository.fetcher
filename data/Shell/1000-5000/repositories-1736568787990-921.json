{
  "metadata": {
    "timestamp": 1736568787990,
    "page": 921,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zachcurry/emacs-anywhere",
      "stars": 1079,
      "defaultBranch": "master",
      "files": [
        {
          "name": "Emacs Anywhere.workflow",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2018 Zach Curry\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.5615234375,
          "content": "<p align=\"center\">\n  <img src=\"https://imgur.com/KEvaVTP.jpg\" width=\"250px\"></img>\n</p>\n<p align=\"center\">\n  <em>Inspired by</em>\n  <a href=\"https://github.com/cknadler/vim-anywhere\">cknadler/vim-anywhere</a>\n</p>\n<p align=\"center\">\n  <img src=\"https://thumbs.gfycat.com/HardtofindBelatedAtlanticsharpnosepuffer-size_restricted.gif\"\n  width=\"500px\">\n  </img>\n</p>\n<p align=\"center\">\n  <strong>Emacs Anywhere</strong> provides configurable automation and hooks containing window info, so you can bust moves anywhere in a quick, customizable fashion.\n</p>\n\n**Table of Contents**\n- [Install](#install)\n    - [OS X](#os-x)\n    - [Linux](#install)\n- [Usage](#usage)\n    - [Try It](#try-it)\n    - [Environment](#environment)\n    - [Commands](#commands)\n    - [Variables](#variables)\n    - [Hooks](#hooks)\n    - [Examples](#examples)\n    - [Update](#update)\n    - [Uninstall](#uninstall)\n- [Todo](#todo)\n- [Contributing](#contributing)\n- [License](#license)\n\n# Install\n## OS X\n``` \ncurl -fsSL https://raw.github.com/zachcurry/emacs-anywhere/master/install | bash\n```\nOpen **System Preferences** and navigate to **keyboard > shortcuts > Services**.\nCheck the box beside \"Emacs Anywhere\", click \"Add Shortcut\" and key a shortcut.\n\n## Linux\n>In order to use **Emacs Anywhere**, you must use **Xorg** as your window manager. You can **switch** your window manager in **Ubuntu** by going to the login screen, clicking the cog icon, and selecting **Xorg**.\n\n### dependencies\nInstall these dependencies as needed\n- **xclip**\n- **xdotool**\n- **xwininfo**\n```\nsudo apt-get install <dependency>\n```\n\n### Install\n``` \ncurl -fsSL https://raw.github.com/zachcurry/emacs-anywhere/master/install | bash\n```\nCreate a keyboard shortcut to run `~/.emacs_anywhere/bin/run`.\n\n## Windows\nTBD\n\n# Usage\n## Try It\n1. Make sure your Emacs server is running. You can start the server like this\n```\nemacs --daemon\n```\n2. Focus an application window's text input. A text area in your browser will do.\n3. Key the keyboard shortcut you've chosen for **Emacs Anywhere** \n4. Write some text\n5. Delete the frame (`C-x 5 0`, or `:q` if you use evil-mode).\n**Emacs Anywhere** will copy the text from the buffer \"\\*Emacs Anywhere\\*\" to clipboard, delete the\nbuffer, switch focus to the window from step two and paste the buffers content into the text input.\n\n## Environment\nThe `EA_EDITOR` environment variable can be used to override the way\n**emacsclient** is run. For example, you could put the following statement into\nyour `.bash_profile`.\n```\nexport EA_EDITOR='emacsclient -a \"\" -c'\n```\nWith the environment variable set, the invocation will look like this under the\nhood\n```\nemacsclient -a \"\" -c -e <elisp code>\n```\nYou can prefix **emacsclient** with it's path if **Emacs Anywhere** can't find\nit in your `PATH` environment variable.\n\n## Commands\n| Command       | Description                                                                                  |\n| ----          | -----------                                                                                  |\n| **toggle-ea** | If toggled to the \"off\" state, **Emacs Anywhere** will do nothing when the frame is deleted. |\n\n## Variables\n| Variable            | Description                                                                                                                 |\n| --------            | -----------                                                                                                                 |\n| **ea-on**           | Boolean where `t` and `nil` denote the \"on\" and \"off** states of **Emacs Anywhere**, respectively. The default value is `t` |\n| **ea-copy**         | If true, the \"\\*Emacs Anywhere\\*\" buffer will be copied to clipboard. The default value is `t` |\n| **ea-paste**        | If true, **Emacs Anywhere** will paste to the window from which it was launched. The default value is `t`                   |\n| **ea-app-name**     | The name of the application process for the window from which **Emacs Anywhere** was launched.                              |\n| **ea-window-title** | The title of the window from which **Emacs Anywhere** was launched.                                                         |\n| **ea-x**            | The x-coordinate of the upper-left corner of the window from which **Emacs Anywhere** was launched.                         |\n| **ea-y**            | The y-coordinate of the upper-left corner of the window from which **Emacs Anywhere** was launched.                         |\n| **ea-width**        | The width of the window from which **Emacs Anywhere** was launched.                                                         |\n| **ea-height**       | The height of the window from which **Emacs Anywhere** was launched.                                                        |\n\n>Note: In OS X the window title, position and size information\n>is only available if the application is has accessiblity permissions enabled.\n\n## Hooks\n| Hook              | Function Signature              | Description                                               |\n| ----              | ------------------              | -----------                                               |\n| **ea-popup-hook** | (app-name window-title x y w h) | Functions run after an **Emacs Anywhere** session starts. |\n\n## Examples\n```elisp\n;; Define a function or use a lambda of the same signature\n(defun popup-handler (app-name window-title x y w h)\n  ;; do stuff\n  )\n\n;; Hook your function\n(add-hook 'ea-popup-hook 'popup-handler)\n```\nIn your hook function you can do things like set the major mode based on the\napplication name or window title...\n```elisp\n(defun github-conversation-p (window-title)\n  (or (string-match-p \"Pull Request\" window-title)\n      (string-match-p \"Issue\" window-title)\n      ;; ...\n      ))\n\n(defun popup-handler (app-name window-title x y w h)\n  ;; set major mode\n  (cond\n    ((github-conversation-p window-title) (gfm-mode))\n    ;; ...\n    (t (markdown-mode)) ; default major mode\n    ))\n```\n...or set the frame size and position to fit the bottom 400px of the window...\n```elisp\n(defun popup-handler (app-name window-title x y w h)\n  (set-frame-position (selected-frame) x (+ y (- h 400)))\n  (unless (zerop w)\n    (set-frame-size (selected-frame) w 400 t))\n  ;; ...\n  )\n```\n...or configure automation settings\n```elisp\n(defun popup-handler (app-name window-title x y w h)\n  (when (equal app-name \"Terminal\")\n    ;; Tell Emacs Anywhere not to paste if launched from Terminal\n    (setq ea-paste nil))\n  ;; ...\n  )\n```\n\n## Update\n```\n~/.emacs_anywhere/update\n```\n\n## Uninstall\n```\n\n~/.emacs_anywhere/uninstall\n```\n\n# Todo\n- Windows\n\n# Contributing\nTBD\n\n# License\nMIT\n\nCopyright Â© 2018, Zach Curry, All rights reserved.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "emacs_anywhere.el",
          "type": "blob",
          "size": 1.8818359375,
          "content": "(defvar ea-popup-hook nil\n  \"Functions run after entering Emacs Anywhere session.\nFunctions are run with args APP-NAME WINDOW-TITLE X Y WIDTH HEIGHT\")\n\n(defvar ea-on t)\n(defvar ea-copy t)\n(defvar ea-paste t)\n\n(defconst ea--buffer-name \"*Emacs Anywhere*\")\n\n(defconst ea--osx (string-equal system-type \"darwin\"))\n(defconst ea--gnu-linux (string-equal system-type \"gnu/linux\"))\n\n(defun toggle-ea ()\n  (interactive)\n  (setq ea-on (not ea-on))\n  (message\n   \"Emacs Anywhere: %s\"\n   (if ea-on \"on\" \"off\")))\n\n(defun ea--osx-copy-to-clip ()\n  (clipboard-kill-ring-save\n   (point-min)\n   (point-max)))\n\n(defun ea--gnu-linux-copy-to-clip ()\n  (write-region nil nil \"/tmp/eaclipboard\"))\n\n(defun ea--delete-frame-handler (_frame)\n  (remove-hook 'delete-frame-functions 'ea--delete-frame-handler)\n  (when (and ea-on ea-copy (get-buffer ea--buffer-name))\n    (switch-to-buffer ea--buffer-name)\n    (cond\n     (ea--osx (ea--osx-copy-to-clip))\n     (ea--gnu-linux (ea--gnu-linux-copy-to-clip))))\n  (when ea-on (kill-buffer ea--buffer-name))\n  (shell-command\n   (format (concat \"echo export EA_ABORT=%s\\\";\\\"\"\n                   \"export EA_SHOULD_COPY=%s\\\";\\\"\"\n                   \"export EA_SHOULD_PASTE=%s\"\n                   \" > /tmp/eaenv\")\n           (if ea-on \"false\" \"true\")\n           (if ea-copy \"true\" \"false\")\n           (if ea-paste \"true\" \"false\"))))\n\n(defun ea--init ()\n  (setq ea-on t) ; begin each session with EA enabled\n  (setq ea-copy t) ; begin each session with copy enabled\n  (setq ea-paste t) ; begin each session with paste enabled\n  (add-hook 'delete-frame-functions 'ea--delete-frame-handler)\n  (switch-to-buffer ea--buffer-name)\n  (select-frame-set-input-focus (selected-frame))\n  (run-hook-with-args 'ea-popup-hook\n                      ea-app-name\n                      ea-window-title\n                      ea-x\n                      ea-y\n                      ea-width\n                      ea-height))\n\n(ea--init)\n"
        },
        {
          "name": "install",
          "type": "blob",
          "size": 1.1162109375,
          "content": "#!/bin/bash\n\nset -e\n\nEA_PATH=$HOME/.emacs_anywhere\nEA_URL='https://github.com/zachcurry/emacs-anywhere.git'\n\nerr () { echo -e \"Error: $@\" 1>&2; }\n\ninstalled () { hash $1 &> /dev/null; }\n\nrequire_deps () {\n    for d in $@; do\n        if installed $d ; then\n            echo dependency check passed: $d\n        else\n            err dependency check failed: \"'$d'\" not found\n            exit 1\n        fi\n    done\n}\n\ncase $OSTYPE in\n    \"darwin\"*)\n        WRKFLW_PATH=$EA_PATH/Emacs\\ Anywhere.workflow\n        SERVICES_PATH=$HOME/Library/Services\n        ;;\n    \"linux-gnu\")\n        require_deps xclip xdotool xprop xwininfo\n        ;;\n    *)\n        err OS $OSTYPE isn\\'t currently supported\n        exit 1\n        ;;\nesac\n\nrequire_deps emacsclient git\n\nif [ -a $EA_PATH ]; then\n    echo 'Uninstalling existing installation...'\n    rm -rf $EA_PATH\n    echo 'Reinstalling Emacs Anywhere...'\nelse\n    echo \"Installing Emacs Anywhere...\"\nfi\n\ngit clone $EA_URL $EA_PATH\n\nif [[ $OSTYPE == \"darwin\"* ]]; then\n    echo \"Copying $WRKFLW_PATH to ${SERVICES_PATH}...\"\n    cp -Rf \"${WRKFLW_PATH}\" $SERVICES_PATH\nfi\n\necho Emacs Anywhere has been installed!\n"
        },
        {
          "name": "uninstall",
          "type": "blob",
          "size": 0.3212890625,
          "content": "#!/bin/bash\n\nset -e\n\nEA_PATH=$HOME/.emacs_anywhere\n\nerr () { echo -e \"Error: $@\" 1>&2; }\n\nif [ ! -d $EA_PATH ]; then\n    err emacs-anywhere is not installed\n    exit 1\nfi\n\nrm -rf $EA_PATH\n\nif [[ $OSTYPE == \"darwin\"* ]]; then\n   rm -rf $HOME/Library/Services/Emacs\\ Anywhere.workflow\nfi\n\necho Emacs Anywhere has been uninstalled!\n"
        },
        {
          "name": "update",
          "type": "blob",
          "size": 0.3544921875,
          "content": "#!/bin/bash\n\nset -e\n\nEA_PATH=$HOME/.emacs_anywhere\n\nerr () { echo -e \"Error: $@\" 1>&2; }\n\nif [ ! -d $EA_PATH ]; then\n    err Emacs Anywhere is not installed!\n    exit 1\nfi\n\npushd $EA_PATH\ngit pull origin master\npopd\n\nif [[ $OSTYPE == \"darwin\"* ]]; then\n    cp -Rf $EA_PATH/Emacs\\ Anywhere.workflow $HOME/Library/Services\nfi\n\necho Emacs Anywhere has been updated!\n"
        }
      ]
    }
  ]
}