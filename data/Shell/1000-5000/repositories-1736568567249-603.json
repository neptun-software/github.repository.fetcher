{
  "metadata": {
    "timestamp": 1736568567249,
    "page": 603,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bryansteiner/gpu-passthrough-tutorial",
      "stars": 1512,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 58.4765625,
          "content": "<h2>\n    Table of Contents\n</h2>\n\n* [Introduction](#introduction)\n    * [Considerations](#considerations)\n    * [Hardware Requirements](#hardware_requirements)\n    * [Hardware Setup](#hardware_setup)\n* [Tutorial](#tutorial)\n    * [Part 1: Prerequisites](#part1)\n    * [Part 2: VM Logistics](#part2)\n    * [Part 3: Creating the VM](#part3)\n    * [Part 4: Improving VM Performance](#part4)\n    * [Part 5: Benchmarks](#part5)\n    * [Part 6: Software Licensing Considerations](#part6)\n* [Credits & Resources](#credits)\n* [Footnotes](#footnotes)\n\n<h2 name=\"introduction\">\n    Introduction\n</h2>\n\nIn this post, I will be giving detailed instructions on how to run a KVM setup with GPU passthrough. This setup uses a Linux host installed with [Pop!\\_OS 20.10](https://system76.com/pop) (kernel v5.8.0) and a guest VM running Windows 10.\n\n<div align=\"center\">\n    <img src=\"./img/kvm_architecture.jpg\" width=\"500\">\n    <p>\n        Source: <a href=\"https://events.static.linuxfound.org/sites/events/files/slides/KVM,%20OpenStack,%20and%20the%20Open%20Cloud%20-%20ANJ%20MK%20%20-%2013Oct14.pdf\">Open Virtualization Alliance (Jollans, IBM , Kadera, Intel)</a>\n    </p>\n</div>\n\n<h3 name=\"considerations\">\n    Considerations\n</h3>\n\nThe main reason I wanted to get this setup working was because I found myself tired of using a dual-boot setup. I wanted to launch a Windows VM specifically for gaming while still being able to use my Linux host for development work (simultaneously).\n\nAt this point, you might be wondering... Why not just game on Linux? This is definitely an option for many people, but not one that suited my particular needs. Gaming on Linux requires the use of tools like [Wine](https://en.wikipedia.org/wiki/Wine_(software)) which act as a compatabilty layer for translating Windows system calls to Linux system calls. On the other hand, a GPU passthrough setup utilizes [KVM](https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine) as a hypervisor to launch individual VMs with specific hardware attached to them. Performance wise, there are pros and cons to each approach.<span name=\"return1\"><sup>[1](#footnote1)</sup></span>\n\nIn this tutorial, I will create a GPU passthrough setup. Specifically, I will be passing through an NVIDIA GPU to my guest VM while using an AMD GPU for my host. You could easily substitute an iGPU for the host but I chose to use a dGPU for performance reasons.<span name=\"return2\"><sup>[2](#footnote2)</sup></span>\n\n<h3 name=\"hardware_requirements\"> Hardware Requirements </h3>\n\nYou're going to need the following to achieve a high-performance VM:\n- Two graphics cards.\n- [Hardware that supports IOMMU](https://en.wikipedia.org/wiki/List_of_IOMMU-supporting_hardware).\n- A monitor with two inputs<span name=\"return3\"><sup>[3](#footnote3)</sup></span> *or* multiple monitors.\n\nIf you haven't built a PC yet but want it to be KVM/VFIO-focused, check out [this list](https://passthroughpo.st/vfio-increments/) of parts suggested by The Passthrough Post.\n\n<h3 name=\"hardware_setup\">\n    Hardware Setup\n</h3>\n\n- CPU:\n    - AMD Ryzen 9 3900X\n- Motherboard:\n    - Gigabyte X570 Aorus Pro Wifi\n- GPUs:\n    - NVIDIA RTX 3080\n    - AMD RX 5700\n- Memory:\n    - Corsair Vengeance LPX DDR4 3200 MHz 32GB (2x16)\n- Disk:\n    - Samsung 970 EVO Plus SSD 500GB - M.2 NVMe (host)\n    - Samsung 970 EVO Plus SSD 1TB - M.2 NVMe (guest)\n\n<h2 name=\"tutorial\">\n    Tutorial\n</h2>\n\n<h3 name=\"part1\">\n    Part 1: Prerequisites\n</h3>\n\nBefore we begin, let's install some necessary packages:\n\n```\n$ sudo apt install libvirt-daemon-system libvirt-clients qemu-kvm qemu-utils virt-manager ovmf\n```\n\nRestart your machine and boot into BIOS. Enable a feature called `IOMMU`. You'll also need to enable CPU virtualization. For Intel processors, look for something called `VT-d`. For AMD, look for something called `AMD-Vi`. My motherboard is unique so I had to enable a feature called `SVM Mode`. Save any changes and restart the machine.\n\nOnce you've booted into the host, make sure that IOMMU is enabled:\n`$ dmesg | grep IOMMU`\n\nAlso check that CPU virtualization is enabled:<br><br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For Intel: `$ dmesg | grep VT-d` <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For AMD: `$ dmesg | grep AMD-Vi`\n\nNow you're going to need to pass the hardware-enabled IOMMU functionality into the kernel as a [kernel parameter](https://wiki.archlinux.org/index.php/kernel_parameters). For our purposes, it makes the most sense to enable this feature at boot-time. Depending on your boot-loader (i.e. grub, systemd, rEFInd), you'll have to modify a specific configuration file. Since my machine uses systemd and these configuration files are often overwritten on updates, I will be using a tool called [kernelstub](https://github.com/pop-os/kernelstub):\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For Intel: `$ sudo kernelstub --add-options \"intel_iommu=on\"`<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For AMD: `$ sudo kernelstub --add-options \"amd_iommu=on\"`\n\nSimilarly, if your system is configured with [GRUB2](https://help.ubuntu.com/community/Grub2), you can achieve the same result by editing the `/etc/default/grub` file with sudo permissions and including the kernel parameter as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For Intel: `GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash intel_iommu=on\"`<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For AMD: `GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash amd_iommu=on\"`\n\nWhen planning my GPU passthrough setup, I discovered that many tutorials at this point will go ahead and have you blacklist the nvidia/amd drivers. The logic stems from the fact that since the native drivers can't attach to the GPU at boot-time, the GPU will be freed-up and available to bind to the vfio drivers instead. Most tutorials will have you add a kernel parameter called `pci-stub` with the [PCI bus ID](https://wiki.debian.org/HowToIdentifyADevice/PCI) of your GPU to achieve this. I found that this solution wasn't suitable for me. I prefer to dynamically unbind the nvidia/amd drivers and bind the vfio drivers right before the VM starts and subsequently reversing these actions when the VM stops ([see Part 2](#part2)). That way, whenever the VM isn't in use, the GPU is available to the host machine to do work on its native drivers.<span name=\"return4\"><sup>[4](#footnote4)</sup></span>\n\nNext, we need to determine the IOMMU groups of the graphics card we want to pass through to the VM. For those of you who don't already know, [IOMMU](https://en.wikipedia.org/wiki/Input%E2%80%93output_memory_management_unit) refers to the chipset device that maps virtual addresses to physical addresses on your I/O devices (i.e. GPU, disk, etc.). Its function is analogous to the memory management unit ([MMU](https://en.wikipedia.org/wiki/Memory_management_unit)) that maps virtual addresses to physical addresses on your CPU.\n\nWe want to make sure that our system has an appropriate IOMMU grouping scheme. Essentially, we need to remember that devices residing within the same IOMMU group need to be passed through to the VM (they can't be separated). To determine your IOMMU grouping, use the following script:\n\n`iommu.sh`:\n```\n#!/bin/bash\nfor d in /sys/kernel/iommu_groups/*/devices/*; do\n  n=${d#*/iommu_groups/*}; n=${n%%/*}\n  printf 'IOMMU Group %s ' \"$n\"\n  lspci -nns \"${d##*/}\"\ndone\n```\n\nFor Intel systems, here's some sample output:\n\n```\n...\nIOMMU Group 1 00:01.0 PCI bridge [0604]: Intel Corporation Xeon E3-1200 v5/E3-1500 v5/6th Gen Core Processor PCIe Controller (x16) [8086:1901] (rev 07)\nIOMMU Group 1 00:01.1 PCI bridge [0604]: Intel Corporation Xeon E3-1200 v5/E3-1500 v5/6th Gen Core Processor PCIe Controller (x8) [8086:1905] (rev 07)\n...\nIOMMU Group 30 0d:00.0 VGA compatible controller [0300]: NVIDIA Corporation Device [10de:2206] (rev a1)\nIOMMU Group 30 0d:00.1 Audio device [0403]: NVIDIA Corporation Device [10de:1aef] (rev a1)\nIOMMU Group 30 0c:00.0 VGA compatible controller [0300]: Advanced Micro Devices, Inc. [AMD/ATI] Navi 10 [Radeon RX 5600 OEM/5600 XT / 5700/5700 XT] [1002:731f] (rev c4)\nIOMMU Group 31 0c:00.1 Audio device [0403]: Advanced Micro Devices, Inc. [AMD/ATI] Navi 10 HDMI Audio [1002:ab38]\n...\n```\n\nHere we see that both the NVIDIA and AMD GPUs reside in IOMMU group 30. This presents a problem. If you want to use the AMD GPU for the host machine while passing through the NVIDIA GPU to the guest VM, you need to figure out a way to separate their IOMMU groups.\n\n1. One possible solution is to switch the PCI slot to which the AMD graphics card is attached. This may or may not produce the desired solution.\n2. An alternative solution is something called the [ACS Override Patch](https://queuecumber.gitlab.io/linux-acs-override/). For an in-depth discussion, it's definitely worth checking out this post from [Alex Williamson](https://vfio.blogspot.com/2014/08/iommu-groups-inside-and-out.html). Make sure to consider the risks.<span name=\"return5\"><sup>[5](#footnote5)</sup></span>\n\nFor my system, I was lucky<span name=\"return6\"><sup>[6](#footnote6)</sup></span> because the NVIDIA and AMD GPUs resided in different IOMMU groups:\n\n```\n...\nIOMMU Group 30 0c:00.0 VGA compatible controller [0300]: Advanced Micro Devices, Inc. [AMD/ATI] Navi 10 [Radeon RX 5600 OEM/5600 XT / 5700/5700 XT] [1002:731f] (rev c4)\nIOMMU Group 31 0c:00.1 Audio device [0403]: Advanced Micro Devices, Inc. [AMD/ATI] Navi 10 HDMI Audio [1002:ab38]\nIOMMU Group 32 0d:00.0 VGA compatible controller [0300]: NVIDIA Corporation Device [10de:2206] (rev a1)\nIOMMU Group 32 0d:00.1 Audio device [0403]: NVIDIA Corporation Device [10de:1aef] (rev a1)\n...\n```\n\nIf your setup is like mine<span name=\"return7\"><sup>[7](#footnote7)</sup></span> and you had isolated IOMMU groups, feel free [to skip the following section](#part1.2). Otherwise, please continue reading...\n\n<h4 name=\"part 1.1\">\n    ACS Override Patch (Optional):\n</h4>\n\nFor most linux distributions, the ACS Override Patch requires you to download the kernel source code, manually insert the ACS patch, compile + install the kernel, and then boot directly from the newly patched kernel.<span name=\"return8\"><sup>[8](#footnote8)</sup></span>\n\nSince I'm running a Debian-based distribution, I can use one of the [pre-compiled kernels](https://queuecumber.gitlab.io/linux-acs-override/) with the ACS patch already applied. After extracting the package contents, install the kernel and headers:\n\n```\n$ sudo dpkg -i linux-headers-5.3.0-acso_5.3.0-acso-1_amd64.deb\n$ sudo dpkg -i linux-image-5.3.0-acso_5.3.0-acso-1_amd64.deb\n$ sudo dpkg -i linux-libc-dev_5.3.0-acso-1_amd64.deb\n```\n\nNavigate to /boot and verify that you see the new initrd.img and vmlinuz:\n\n```\n$ ls\nconfig-5.3.0-7625-generic    initrd.img-5.3.0-7625-generic  vmlinuz\nconfig-5.3.0-acso            initrd.img-5.3.0-acso          vmlinuz-5.3.0-7625-generic\nefi                          initrd.img.old                 vmlinuz-5.3.0-acso\ninitrd.img                   System.map-5.3.0-7625-generic  vmlinuz.old\ninitrd.img-5.3.0-24-generic  System.map-5.3.0-acso\n```\n\nWe still have to copy the current kernel and initramfs image onto the ESP so that they are automatically loaded by EFI. We check the current configuration with [kernelstub](https://github.com/pop-os/kernelstub):\n\n```\n$ sudo kernelstub --print-config\nkernelstub.Config    : INFO     Looking for configuration...\nkernelstub           : INFO     System information:\n\n    OS:..................Pop!_OS 19.10\n    Root partition:....../dev/dm-1\n    Root FS UUID:........2105a9ac-da30-41ba-87a9-75437bae74c6\n    ESP Path:............/boot/efi\n    ESP Partition:......./dev/nvme0n1p1\n    ESP Partition #:.....1alt=\"virtman_3\"\n    NVRAM entry #:.......-1\n    Boot Variable #:.....0000\n    Kernel Boot Options:.quiet loglevel=0 systemd.show_status=false splash amd_iommu=on\n    Kernel Image Path:.../boot/vmlinuz\n    Initrd Image Path:.../boot/initrd.img\n    Force-overwrite:.....False\n\nkernelstub           : INFO     Configuration details:\n\n   ESP Location:................../boot/efi\n   Management Mode:...............True\n   Install Loader configuration:..True\n   Configuration version:.........3\n```\n\nYou can see that the \"Kernel Image Path\" and the \"Initrd Image Path\" are symbolic links that point to the old kernel and initrd.\n\n```\n$ ls -l /boot\ntotal 235488\n-rw-r--r-- 1 root root   235833 Dec 19 11:56 config-5.3.0-7625-generic\n-rw-r--r-- 1 root root   234967 Sep 16 04:31 config-5.3.0-acso\ndrwx------ 6 root root     4096 Dec 31  1969 efi\nlrwxrwxrwx 1 root root       29 Dec 20 11:28 initrd.img -> initrd.img-5.3.0-7625-generic\n-rw-r--r-- 1 root root 21197115 Dec 20 11:54 initrd.img-5.3.0-24-generic\n-rw-r--r-- 1 root root 95775016 Jan 17 00:33 initrd.img-5.3.0-7625-generic\n-rw-r--r-- 1 root root 94051072 Jan 18 19:57 initrd.img-5.3.0-acso\nlrwxrwxrwx 1 root root       29 Dec 20 11:28 initrd.img.old -> initrd.img-5.3.0-7625-generic\n-rw------- 1 root root  4707483 Dec 19 11:56 System.map-5.3.0-7625-generic\n-rw-r--r-- 1 root root  4458808 Sep 16 04:31 System.map-5.3.0-acso\nlrwxrwxrwx 1 root root       26 Dec 20 11:28 vmlinuz -> vmlinuz-5.3.0-7625-generic\n-rw------- 1 root root 11398016 Dec 19 11:56 vmlinuz-5.3.0-7625-generic\n-rw-r--r-- 1 root root  9054592 Sep 16 04:31 vmlinuz-5.3.0-acso\nlrwxrwxrwx 1 root root       26 Dec 20 11:28 vmlinuz.old -> vmlinuz-5.3.0-7625-generic\n```\n\nLet's change that:\n\n```\n$ sudo rm /boot/vmlinuz\n$ sudo ln -s /boot/vmlinuz-5.3.0-acso /boot/vmlinuz\n$ sudo rm /boot/initrd.img\n$ sudo ln -s /boot/initrd.img-5.3.0-acso /boot/initrd.img\n```\n\nVerify that the symbolic links now point to the correct kernel and initrd images:\n\n```\n$ ls -l /boot\ntotal 235488\n-rw-r--r-- 1 root root   235833 Dec 19 11:56 config-5.3.0-7625-generic\n-rw-r--r-- 1 root root   234967 Sep 16 04:31 config-5.3.0-acso\ndrwx------ 6 root root     4096 Dec 31  1969 efi\nlrwxrwxrwx 1 root root       27 Jan 18 20:02 initrd.img -> /boot/initrd.img-5.3.0-acso\n-rw-r--r-- 1 root root 21197115 Dec 20 11:54 initrd.img-5.3.0-24-generic\n-rw-r--r-- 1 root root 95775016 Jan 17 00:33 initrd.img-5.3.0-7625-generic\n-rw-r--r-- 1 root root 94051072 Jan 18 19:57 initrd.img-5.3.0-acso\nlrwxrwxrwx 1 root root       29 Dec 20 11:28 initrd.img.old -> initrd.img-5.3.0-7625-generic\n-rw------- 1 root root  4707483 Dec 19 11:56 System.map-5.3.0-7625-generic\n-rw-r--r-- 1 root root  4458808 Sep 16 04:31 System.map-5.3.0-acso\nlrwxrwxrwx 1 root root       24 Jan 18 20:02 vmlinuz -> /boot/vmlinuz-5.3.0-acso\n-rw------- 1 root root 11398016 Dec 19 11:56 vmlinuz-5.3.0-7625-generic\n-rw-r--r-- 1 root root  9054592 Sep 16 04:31 vmlinuz-5.3.0-acso\nlrwxrwxrwx 1 root root       26 Dec 20 11:28 vmlinuz.old -> vmlinuz-5.3.0-7625-generic\n```\n\nFinally, add the ACS Override Patch to your list of kernel parameter options:\n\n```\n$ sudo kernelstub --add-options \"pcie_acs_override=downstream\"\n```\n\nReboot and verify that the IOMMU groups for your graphics cards are different:\n\n```\n...\nIOMMU Group 30 0c:00.0 VGA compatible controller [0300]: Advanced Micro Devices, Inc. [AMD/ATI] Navi 10 [Radeon RX 5600 OEM/5600 XT / 5700/5700 XT] [1002:731f] (rev c4)\nIOMMU Group 31 0c:00.1 Audio device [0403]: Advanced Micro Devices, Inc. [AMD/ATI] Navi 10 HDMI Audio [1002:ab38]\nIOMMU Group 32 0d:00.0 VGA compatible controller [0300]: NVIDIA Corporation Device [10de:2206] (rev a1)\nIOMMU Group 32 0d:00.1 Audio device [0403]: NVIDIA Corporation Device [10de:1aef] (rev a1)\n...\n```\n\n<h4 name=\"part1.2\">\n    Download ISO files (Mandatory):\n</h4>\n\nSince we're building a Windows VM, we're going to need to download and use the virtIO drivers. [virtIO](https://www.linux-kvm.org/page/Virtio) is a virtualization standard for network and disk device drivers. Adding the virtIO drivers can be done by attaching its relevant ISO to the Windows VM during creation. Fedora provides the virtIO drivers for [direct download](https://docs.fedoraproject.org/en-US/quick-docs/creating-windows-virtual-machines-using-virtio-drivers/#virtio-win-direct-downloads).\n\nSince I am passing through an entire NVMe SSD (1TB), I won't need to install any 3rd party drivers on top of the virtIO driver. Passing through the SSD as a PCI device lets Windows deal with it as a native NVMe device and therefore *should* offer better performance. If you choose to use a raw disk image instead, things are going to be a little different... Make sure to follow the instructions in [this guide](https://frdmtoplay.com/virtualizing-windows-7-or-linux-on-a-nvme-drive-with-vfio/#builddriveriso). The guide will show you how to add 3rd party drivers on top of the existing virtIO drivers by rebuilding the ISO.\n\nFor the final step, we're going to need to download the Windows 10 ISO from Microsoft which you can find [here](https://www.microsoft.com/en-us/software-download/windows10ISO).\n\n<h3 name=\"part2\">\n    Part 2: VM Logistics\n</h3>\n\nAs mentioned earlier, we are going to dynamically bind the vfio drivers before the VM starts and unbind these drivers after the VM terminates. To achieve this, we're going to use [libvirt hooks](https://libvirt.org/hooks.html). Libvirt has a hook system that allows you to run commands on startup or shutdown of a VM. All relevant scripts are located within the following directory: `/etc/libvirt/hooks`. If the directory doesn't exist, go ahead and create it. Lucky for us, The Passthrough POST has a [hook helper tool](https://passthroughpo.st/simple-per-vm-libvirt-hooks-with-the-vfio-tools-hook-helper/) to make our lives easier. Run the following commands to install the hook manager and make it executable:\n\n```\n$ sudo wget 'https://raw.githubusercontent.com/PassthroughPOST/VFIO-Tools/master/libvirt_hooks/qemu' \\\n     -O /etc/libvirt/hooks/qemu\n$ sudo chmod +x /etc/libvirt/hooks/qemu\n```\n\nGo ahead and restart libvirt to use the newly installed hook helper:\n\n```\n$ sudo service libvirtd restart\n```\n\nLet's look at the most important hooks:\n\n```\n# Before a VM is started, before resources are allocated:\n/etc/libvirt/hooks/qemu.d/$vmname/prepare/begin/*\n\n# Before a VM is started, after resources are allocated:\n/etc/libvirt/hooks/qemu.d/$vmname/start/begin/*\n\n# After a VM has started up:\n/etc/libvirt/hooks/qemu.d/$vmname/started/begin/*\n\n# After a VM has shut down, before releasing its resources:\n/etc/libvirt/hooks/qemu.d/$vmname/stopped/end/*\n\n# After a VM has shut down, after resources are released:\n/etc/libvirt/hooks/qemu.d/$vmname/release/end/*\n```\n\nIf we place an executable script in one of these directories, the hook manager will take care of everything else. I've chosen to name my VM \"win10\" so I set up my directory structure like this:\n\n```\n$ tree /etc/libvirt/hooks/\n/etc/libvirt/hooks/\n├── qemu\n└── qemu.d\n    └── win10\n        ├── prepare\n        │   └── begin\n        └── release\n            └── end\n```\n\nIt's time to get our hands dirty... Create a file named `kvm.conf` and place it under `/etc/libvirt/hooks/`. Add the following entries to the file:\n\n```\n## Virsh devices\nVIRSH_GPU_VIDEO=pci_0000_0a_00_0\nVIRSH_GPU_AUDIO=pci_0000_0a_00_1\nVIRSH_GPU_USB=pci_0000_0a_00_2\nVIRSH_GPU_SERIAL=pci_0000_0a_00_3\nVIRSH_NVME_SSD=pci_0000_04_00_0\n```\n\nMake sure to substitute the correct bus addresses for the devices you'd like to passthrough to your VM (in my case a GPU and SSD). Just in case it's still unclear, you get the virsh PCI device IDs from the `iommu.sh` script's output. Translate the address for each device as follows: `IOMMU Group 1 01:00.0 ...` --> `VIRSH_...=pci_0000_01_00_0`. Now create two bash scripts:\n\n`bind_vfio.sh`:\n```\n#!/bin/bash\n\n## Load the config file\nsource \"/etc/libvirt/hooks/kvm.conf\"\n\n## Load vfio\nmodprobe vfio\nmodprobe vfio_iommu_type1\nmodprobe vfio_pci\n\n## Unbind gpu from nvidia and bind to vfio\nvirsh nodedev-detach $VIRSH_GPU_VIDEO\nvirsh nodedev-detach $VIRSH_GPU_AUDIO\nvirsh nodedev-detach $VIRSH_GPU_USB\nvirsh nodedev-detach $VIRSH_GPU_SERIAL\n## Unbind ssd from nvme and bind to vfio\nvirsh nodedev-detach $VIRSH_NVME_SSD\n```\n\n`unbind_vfio.sh`:\n```\n#!/bin/bash\n\n## Load the config file\nsource \"/etc/libvirt/hooks/kvm.conf\"\n\n## Unbind gpu from vfio and bind to nvidia\nvirsh nodedev-reattach $VIRSH_GPU_VIDEO\nvirsh nodedev-reattach $VIRSH_GPU_AUDIO\nvirsh nodedev-reattach $VIRSH_GPU_USB\nvirsh nodedev-reattach $VIRSH_GPU_SERIAL\n## Unbind ssd from vfio and bind to nvme\nvirsh nodedev-reattach $VIRSH_NVME_SSD\n\n## Unload vfio\nmodprobe -r vfio_pci\nmodprobe -r vfio_iommu_type1\nmodprobe -r vfio\n```\n\nDon't forget to make these scripts executable with `chmod +x <script_name>`. Then place these scripts so that your directory structure looks like this:\n\n```\n$ tree /etc/libvirt/hooks/\n/etc/libvirt/hooks/\n├── kvm.conf\n├── qemu\n└── qemu.d\n    └── win10\n        ├── prepare\n        │   └── begin\n        │       └── bind_vfio.sh\n        └── release\n            └── end\n                └── unbind_vfio.sh\n```\n\nWe've succesfully created libvirt hook scripts to dynamically bind the vfio drivers before the VM starts and unbind these drivers after the VM terminates. At the moment, we're done messing around with libvirt hooks. We'll revisit this topic later on when we make performance tweaks to our VM ([see Part 4](#part4)).\n\n<h3 name=\"part3\">\n    Part 3: Creating the VM\n</h3>\n\nWe're ready to begin creating our VM. There are basically two options for how to achieve this: **(1)** If you prefer a GUI approach, then follow the rest of this tutorial. **(2)** If you prefer bash scripts, take a look at YuriAlek's series of [GPU passthrough scripts](https://gitlab.com/YuriAlek/vfio) and customize them to fit your needs. The main difference between these two methods lies with the fact that the scripting approach uses [bare QEMU](https://www.mankier.com/1/qemu) commands<span name=\"return9\"><sup>[9](#footnote9)</sup></span>, while the GUI approach uses [virt-manager](https://virt-manager.org/). Virt-manager essentially builds on-top of the QEMU base-layer and adds other features/complexity.<span name=\"return10\"><sup>[10](#footnote10)</sup></span>\n\nGo ahead and start virt-manager from your list of applications. Select the button on the top left of the GUI to create a new VM:\n\n<div align=\"center\">\n    <img src=\"./img/virtman_1.png\" width=\"450\">\n</div><br>\n\nSelect the \"Local install media\" option. My ISOs are stored in my home directory `/home/user/.iso`, so I'll create a new pool and select the Windows 10 ISO from there:\n\n<div align=\"center\">\n    <img src=\"./img/virtman_2.png\" width=\"450\">\n</div><br>\n\nConfigure some custom RAM and CPU settings for your VM:\n\n<div align=\"center\">\n    <img src=\"./img/virtman_3.png\" width=\"450\">\n</div><br>\n\nNext, the GUI asks us whether we want to enable storage for the VM. As already mentioned, my setup will be using SSD passthrough so I chose not to enable virtual storage. However, you still have the option to enable storage and create a RAW disk image which will be stored under the default path of `/var/lib/libvirt/images`:\n\n<div align=\"center\">\n    <img src=\"./img/virtman_4.png\" width=\"450\">\n</div><br>\n\nOn the last step, review your settings and select a name for your VM. Make sure to select the checkbox \"Customize configuration before installation\" and click Finish:\n\n<div align=\"center\">\n    <img src=\"./img/virtman_5.png\" width=\"450\">\n</div><br>\n\nA new window should appear with more advanced configuration options. You can alter these options through the GUI or the associated libvirt XML settings. Make sure that on the Overview page under Firmware you select `UEFI x86_64: /usr/share/OVMF/OVMF_CODE.fd`:\n\n<div align=\"center\">\n    <img src=\"./img/virtman_6.png\" width=\"450\">\n</div><br>\n\nGo to the CPUs page and remove the check next to `Copy host CPU configuration` and under Model type `host-passthrough`. Also make sure to check the option for `Enable available CPU security flaw mitigations` to prevent against Spectre/Meltdown vulnerabilities.\n\n<div align=\"center\">\n    <img src=\"./img/virtman_7.png\" width=\"450\">\n</div><br>\n\nI've chosen to remove several of the menu options that won't be useful to my setup (feel free to keep them if you'd like):\n\n<div align=\"center\">\n    <img src=\"./img/virtman_8.png\" width=\"450\">\n</div><br>\n\nLet's add the <span name=\"virtio-iso\">virtIO drivers</span>. Click 'Add Hardware' and under 'Storage', create a custom storage device of type `CDROM`. Make sure to locate the ISO image for the virtIO drivers from earlier:\n\n<div align=\"center\">\n    <img src=\"./img/virtman_9.png\" width=\"450\">\n</div><br>\n\nUnder the NIC menu, change the device model to `virtIO` for improved networking performance:\n\n<div align=\"center\">\n    <img src=\"./img/virtman_10.png\" width=\"450\">\n</div><br>\n\nNow it's time to configure our passthrough devices! Click 'Add Hardware' and under 'PCI Host Device', select the Bus IDs corresponding to your GPU.\n\n<div align=\"center\">\n    <img src=\"./img/virtman_11.png\" width=\"450\">\n</div><br>\n\nMake sure to repeat this step for all the devices associated with your GPU in the same IOMMU group (usually VGA, audio controller, etc.):\n\n<div align=\"center\">\n    <img src=\"./img/virtman_12.png\" width=\"450\">\n</div><br>\n\nSince I'm passing through an entire disk to my VM, I selected the Bus ID corresponding to the 1TB Samsung NVMe SSD which has Windows 10 (and my games) installed on it.\n\n<div align=\"center\">\n    <img src=\"./img/virtman_13.png\" width=\"450\">\n</div><br>\n\nThen under the 'Boot Options' menu, I added a check next to `Enable boot menu` and reorganized the devices so that I could boot directly from the 1TB SSD:\n\n<div align=\"center\">\n    <img src=\"./img/virtman_14.png\" width=\"450\">\n</div><br>\n\nYou can now go ahead and select the USB Host Devices you'd like to passthrough to your guest VM (usually a keyboard, mouse, etc.). Please note that these devices will be held by the guest VM from the moment it's created until it's stopped and will be unavailable to the host.<span name=\"return11\"><sup>[11](#footnote11)</sup></span>\n\n<div align=\"center\">\n    <img src=\"./img/virtman_15.png\" width=\"450\">\n</div><br>\n\nUnfortunately, not everything we need can be accomplished within the virt-manager GUI. For the rest of this section, we'll have to do some fine-tuning by directly editing the XML (make sure to \"Enable XML settings\" under Edit -> Preferences -> General or use `$ sudo virsh edit win10` for a command-line approach):\n\n<div align=\"center\">\n    <img src=\"./img/virtman_16.png\" width=\"450\">\n</div><br>\n\nIf you're like me and you're passing through an NVIDIA GPU to your VM, then you might run into the following common roadblock. [Error 43](https://passthroughpo.st/apply-error-43-workaround/) occurs because NVIDIA intentionally disables virtualization features on its GeForce line of cards. The way to deal with this is to have the hypervisor hide its existence. Inside the `hyperv` section, add a tag for `vendor_id` such that `state=\"on\"` and `value` is any string up to 12 characters long:\n\n```\n<features>\n    ...\n    <hyperv>\n        <relaxed state=\"on\"/>\n        <vapic state=\"on\"/>\n        <spinlocks state=\"on\" retries=\"8191\"/>\n        <vendor_id state=\"on\" value=\"kvm hyperv\"/>\n    </hyperv>\n    ...\n</features>\n```\n\nIn addition, instruct the kvm to hide its state by adding the following code directly below the `hyperv` section:\n\n```\n<features>\n    ...\n    <hyperv>\n        ...\n    </hyperv>\n    <kvm>\n      <hidden state=\"on\"/>\n    </kvm>\n    ...\n</features>\n```\n\nFinally, if you're using QEMU 4.0 with the q35 chipset you also need to add the following code at the end of `<features>`:\n\n```\n<features>\n    ...\n    <ioapic driver=\"kvm\"/>\n</features>\n```\n\nNow you should have no issues with regards to the NVIDIA Error 43. Later on, we will be making more changes to the XML to achieve better performance ([see Part 4](#part4)). At this point however, you can apply the changes and select \"Begin Installation\" at the top left of the GUI. Please be aware that this may take several minutes to complete.\n\n<h3 name=\"part4\">\n    Part 4: Improving VM Performance\n</h3>\n\nNone of the following performance optimizations are necessary to get a working GPU passthrough system. However, these tweaks will make a difference if you're at all concerned about reaching buttery-smooth gaming performance. Though some of these changes are more difficult than others, I highly advise you to at least consider them.\n\n<h4>\n    Hugepages\n</h4>\n\nMemory (RAM) is divided up into basic segments called *pages*. By default, the x86 architecture has a page size of 4KB. CPUs utilize pages within the built in memory management unit ([MMU](https://en.wikipedia.org/wiki/Memory_management_unit)). Although the standard page size is suitable for many tasks, *hugepages* are a mechanism that allow the Linux kernel to take advantage of large amounts of memory with reduced overhead. Hugepages can vary in size anywhere from 2MB to 1GB. Hugepages are enabled by default but if they aren't, make sure to download the package: `$ sudo apt install libhugetlbfs-bin`.<span name=\"return12\"><sup>[12](#footnote12)</sup></span>\n\nGo back to your VM's XML settings by either using the virt-man GUI or the command: `$ sudo virsh edit {vm-name}`. Insert the `memoryBacking` lines so that your configuration looks like this:\n\n```\n<memory unit=\"KiB\">16777216</memory>\n<currentMemory unit=\"KiB\">16777216</currentMemory>\n<memoryBacking>\n    <hugepages/>\n</memoryBacking>\n```\n\nMany tutorials will have you reserve hugepages for your guest VM at host boot-time. There's a significant downside to this approach: a portion of RAM will be unavailable to your host even when the VM is inactive. In my setup, I've chose to allocate hugepages before the VM starts and deallocate those pages on VM shutdown through the use of two additional executable scripts<span name=\"return13\"><sup>[13](#footnote13)</sup></span> inside libvirt hooks ([see Part 2](#part2)):\n\n```\n$ tree /etc/libvirt/hooks/\n/etc/libvirt/hooks/\n├── kvm.conf\n├── qemu\n└── qemu.d\n    └── win10\n        ├── prepare\n        │   └── begin\n        │       ├── ...\n        │       └── alloc_hugepages.sh\n        └── release\n            └── end\n                ├── ...\n                └── dealloc_hugepages.sh\n```\n\n`alloc_hugepages.sh`:\n```\n#!/bin/bash\n\n## Load the config file\nsource \"/etc/libvirt/hooks/kvm.conf\"\n\n## Calculate number of hugepages to allocate from memory (in MB)\nHUGEPAGES=\"$(($MEMORY/$(($(grep Hugepagesize /proc/meminfo | awk '{print $2}')/1024))))\"\n\necho \"Allocating hugepages...\"\necho $HUGEPAGES > /proc/sys/vm/nr_hugepages\nALLOC_PAGES=$(cat /proc/sys/vm/nr_hugepages)\n\nTRIES=0\nwhile (( $ALLOC_PAGES != $HUGEPAGES && $TRIES < 1000 ))\ndo\n    echo 1 > /proc/sys/vm/compact_memory            ## defrag ram\n    echo $HUGEPAGES > /proc/sys/vm/nr_hugepages\n    ALLOC_PAGES=$(cat /proc/sys/vm/nr_hugepages)\n    echo \"Succesfully allocated $ALLOC_PAGES / $HUGEPAGES\"\n    let TRIES+=1\ndone\n\nif [ \"$ALLOC_PAGES\" -ne \"$HUGEPAGES\" ]\nthen\n    echo \"Not able to allocate all hugepages. Reverting...\"\n    echo 0 > /proc/sys/vm/nr_hugepages\n    exit 1\nfi\n```\n\n`dealloc_hugepages.sh`\n```\n#!/bin/bash\n\n## Load the config file\nsource \"/etc/libvirt/hooks/kvm.conf\"\n\necho 0 > /proc/sys/vm/nr_hugepages\n```\n\nBe sure to update your kvm.conf to include `MEMORY=<size in mb>` as the `alloc_hugepages.sh` script requires a value here. To calculate your hugepages, you can use the following commands to see your total memory and your hugepage size:\n\n```\n$ grep MemTotal /proc/meminfo\nMemTotal: 132151496 kB\n$ grep Hugepagesize /proc/meminfo\nHugepagesize:       2048 kB\n```\n\nYou will want to set `MEMORY=` to a multiple of your hugepage size in MB. From the example above: size = 2048 kB and we want roughly 16GB of memory, so we can choose `MEMORY=16384` (2048 * 8000 / 1000 = 16384).\n\n<h4>\n    CPU Governor\n</h4>\n\nThis performance tweak<span name=\"return14\"><sup>[14](#footnote14)</sup></span> takes advantage of the [CPU frequency scaling governor](https://wiki.archlinux.org/index.php/CPU_frequency_scaling#Scaling_governors) in Linux. It's a feature that is often ofterlooked in many passthrough tutorials, but we include it here because it's recommended. Once again, we'll be utilizing libvirt's hook system ([see Part 2](#part2)):\n\n```\n$ tree /etc/libvirt/hooks/\n/etc/libvirt/hooks/\n├── kvm.conf\n├── qemu\n└── qemu.d\n    └── win10\n        ├── prepare\n        │   └── begin\n        │       ├── ...\n        │       └── cpu_mode_performance.sh\n        └── release\n            └── end\n                ├── ...\n                └── cpu_mode_ondemand.sh\n```\n\n`cpu_mode_performance.sh`:\n```\n#!/bin/bash\n\n## Load the config file\nsource \"/etc/libvirt/hooks/kvm.conf\"\n\n## Enable CPU governor performance mode\ncat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\nfor file in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do echo \"performance\" > $file; done\ncat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\n\n```\n\n`cpu_mode_ondemand.sh`:\n```\n#!/bin/bash\n\n## Load the config file\nsource \"/etc/libvirt/hooks/kvm.conf\"\n\n## Enable CPU governor on-demand mode\ncat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\nfor file in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do echo \"ondemand\" > $file; done\ncat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor\n```\n\n<h4>\n    CPU Pinning\n</h4>\n\nThis performance tweak applies *only* to those of you whose processors are [multithreaded](https://en.wikipedia.org/wiki/Multithreading_(computer_architecture)). My setup has an AMD Ryzen 9 3900X which has 12 physical cores and 24 threads (i.e. logical cores).\n\nVMs are unable to distinguish between these physical and logical cores. From the guest's perspective, virt-manager sees that there are 24 virtual CPUs (vCPUs) available. From the host's perspective however, two virtual cores map to a single physical core on the CPU die.\n\nIt's **very important** that when we passthrough a core, we include its sibling. To get a sense of your cpu topology, use the command `$ lscpu -e\"`. A matching core id (i.e. \"CORE\" column) means that the associated threads (i.e. \"CPU\" column) run on the same physical core.<span name=\"return15\"><sup>[15](#footnote15)</sup></span>\n\n```\nCPU NODE SOCKET CORE L1d:L1i:L2:L3 ONLINE    MAXMHZ    MINMHZ\n  0    0      0    0 0:0:0:0          yes 3800.0000 2200.0000\n  1    0      0    1 1:1:1:0          yes 3800.0000 2200.0000\n  2    0      0    2 2:2:2:0          yes 3800.0000 2200.0000\n  3    0      0    3 3:3:3:1          yes 3800.0000 2200.0000\n  4    0      0    4 4:4:4:1          yes 3800.0000 2200.0000\n  5    0      0    5 5:5:5:1          yes 3800.0000 2200.0000\n  6    0      0    6 6:6:6:2          yes 3800.0000 2200.0000\n  7    0      0    7 7:7:7:2          yes 3800.0000 2200.0000\n  8    0      0    8 8:8:8:2          yes 3800.0000 2200.0000\n  9    0      0    9 9:9:9:3          yes 3800.0000 2200.0000\n 10    0      0   10 10:10:10:3       yes 3800.0000 2200.0000\n 11    0      0   11 11:11:11:3       yes 3800.0000 2200.0000\n 12    0      0    0 0:0:0:0          yes 3800.0000 2200.0000\n 13    0      0    1 1:1:1:0          yes 3800.0000 2200.0000\n 14    0      0    2 2:2:2:0          yes 3800.0000 2200.0000\n 15    0      0    3 3:3:3:1          yes 3800.0000 2200.0000\n 16    0      0    4 4:4:4:1          yes 3800.0000 2200.0000\n 17    0      0    5 5:5:5:1          yes 3800.0000 2200.0000\n 18    0      0    6 6:6:6:2          yes 3800.0000 2200.0000\n 19    0      0    7 7:7:7:2          yes 3800.0000 2200.0000\n 20    0      0    8 8:8:8:2          yes 3800.0000 2200.0000\n 21    0      0    9 9:9:9:3          yes 3800.0000 2200.0000\n 22    0      0   10 10:10:10:3       yes 3800.0000 2200.0000\n 23    0      0   11 11:11:11:3       yes 3800.0000 2200.0000\n\n```\n\nIf you're more of a visual learner, perhaps a diagram of your CPU architecture will help you visualize what's going on. Download the `hwloc` package with `$ sudo apt install hwloc`. Then simply type the command `$ lstopo`:\n\n<div align=\"center\">\n    <img src=\"./img/lstopo.png\" width=\"450\">\n</div><br>\n\nIt's time to edit the XML configuration of our VM. I've added the following lines of code to pass physical cores #6-11 to the guest and leave physical cores #0-5 with the host (customize for your processor):\n\n```\n<vcpu placement=\"static\">12</vcpu>\n<cputune>\n    <vcpupin vcpu=\"0\" cpuset=\"6\"/>\n    <vcpupin vcpu=\"1\" cpuset=\"18\"/>\n    <vcpupin vcpu=\"2\" cpuset=\"7\"/>\n    <vcpupin vcpu=\"3\" cpuset=\"19\"/>\n    <vcpupin vcpu=\"4\" cpuset=\"8\"/>\n    <vcpupin vcpu=\"5\" cpuset=\"20\"/>\n    <vcpupin vcpu=\"6\" cpuset=\"9\"/>\n    <vcpupin vcpu=\"7\" cpuset=\"21\"/>\n    <vcpupin vcpu=\"8\" cpuset=\"10\"/>\n    <vcpupin vcpu=\"9\" cpuset=\"22\"/>\n    <vcpupin vcpu=\"10\" cpuset=\"11\"/>\n    <vcpupin vcpu=\"11\" cpuset=\"23\"/>\n    <emulatorpin cpuset=\"0-3\"/>\n    <iothreadpin iothread='1' cpuset='4-5,12-17'/>\n</cputune>\n```\n\nIf you're wondering why I tuned my CPU configuration this way, I'll refer you to [this section](https://libvirt.org/formatdomain.html#elementsCPUTuning) of the Libvirt domain XML format.<span name=\"return16\"><sup>[16](#footnote16)</sup></span> More specifically, consider the `cputune` element and its underlying `vcpupin`, `emulatorpin`, and `iothreadpin` elements. The Arch Wiki recommends to pin the emulator and iothreads to host cores (if available) rather than the VCPUs assigned to the guest. In the example above, 12 out of my 24 threads are assigned as vCPUs to the guest and from the remaining 12 threads on the host, 4 are assigned to the emulator and 8 are assigned to an iothread [see below](#disk).\n\nGo ahead and edit `<cpu>` to formally define the CPU topography of your VM. In my case, I'm allocating 1 socket with 6 physical cores and 2 threads per core:\n\n```\n<cpu mode=\"host-passthrough\" check=\"none\">\n  <topology sockets=\"1\" cores=\"6\" threads=\"2\"/>\n  <cache mode='passthrough'/>\n  <feature policy='require' name='topoext'/>\n</cpu>\n```\n\n<h4 id=\"disk\">\n    Disk Tuning\n</h4>\n\nAs you may or may not remember, my setup passes control of an SSD device controller to the VM. This bypasses any need or concern I'd have with improving virtualized disk performance (I/O reads + writes). If this is not the case for your setup, then you probably allocated a virtual storage disk on your host device. For the rest of this section, let's assume my setup uses a RAW virtual disk image stored at `/var/lib/libvirt/images/pool/win10.img` on which I'd like to improve I/O performance.\n\nKVM and QEMU provide two paravirtualized storage backends: the older virtio-blk (default) and the more modern virtio-scsi. Although it's beyond the scope of this tutorial to discuss their differences, [this post](https://mpolednik.github.io/2017/01/23/virtio-blk-vs-virtio-scsi/) highlights the main architectural difference between the two:\n\n`virtio-blk`:\n```\nguest: app -> Block Layer -> virtio-blk\nhost: QEMU -> Block Layer -> Block Device Driver -> Hardware\n```\n\n`virtio-scsi`:\n```\nguest: app -> Block Layer -> SCSI Layer -> scsi_mod\nhost: QEMU -> Block Layer -> SCSI Layer -> Block Device Driver -> Hardware\n```\n\nIn essence, virtio-scsi adds an additional complexity layer that provides it with more features and flexibility than virtio-blk.<span name=\"return17\"><sup>[17](#footnote17)</sup></span> Whichever paravirtualized storage type you decide to go with is entirely up to you; I suggest you run performance tests on both. Make sure that in your CPU configuration, you've assigned an [IOThread](https://libvirt.org/formatdomain.html#elementsIOThreadsAllocation):\n\n```\n<vcpu placement=\"static\">12</vcpu>\n<iothreads>1</iothreads>\n<cputune>\n    ...\n    <emulatorpin cpuset=\"0-3\"/>\n    <iothreadpin iothread='1' cpuset='4-5,12-17'/>\n</cputune>\n```\n\nHere you can see that I've included an `iothreads` element with a value of 1. I've also included the `iothreadpin` element to define the number of CPU pins applied to the single iothread. I highly recommend reviewing [this section](https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF#Virtio_disk) of the Arch Wiki to decide on your CPU pinning strategy. Ultimately, it's up to you on how you want to divide the CPU pins among the emulator and iothreads.\n\n\nThe final step is to either: **(1)** create the virtio-scsi controller and attach our disk or **(2)** make sure our disk is defined correctly for virtio-blk (default). Note that you can *only* have one iothread per disk controller.\n\n`virtio-scsi`:\n```\n<domain type=\"kvm\">\n    ...\n    <devices>\n        ...\n        <disk type='file' device='disk'>\n            <driver name='qemu' type='raw' cache='none' io='threads' discard='unmap' queues='8'/>\n            <source dev='/var/lib/libvirt/images/pool/win10.img'/>\n            <target dev='sdc' bus='scsi'/>\n            <address type='drive' controller='0' bus='0' target='0' unit='2'/>\n        </disk>\n        ...\n        <controller type='scsi' index='0' model='virtio-scsi'>\n            <driver iothread='1' queues='8'/>\n            <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x0'/>\n        </controller>       \n        ...\n      </devices>\n</domain>\n```\n\n`virtio-blk`:\n```\n<domain type=\"kvm\">\n    ...\n    <devices>\n        ...\n        <disk type='file' device='disk'>\n            <driver name='qemu' type='raw' cache='none' io='native' discard='unmap' iothread='1' queues='8'/>\n            <source dev='/var/lib/libvirt/images/pool/win10.img'/>\n            <target dev='vdc' bus='virtio'/>\n        </disk>\n        ...\n    </devices>\n    ...\n</domain>\n```\n\nThe final thing to remember is that during the windows installation on your virtual disk, you need to include the virtio-iso as the second CDROM to load the drivers (we've already completed this in a [previous section](#virtio-iso)).\n\n<h4>\n    Hyper-V Enlightenments\n</h4>\n\nHyper-V enlightenments help the guest VM handle virtualization tasks. [Libvirt](https://libvirt.org/formatdomain.html#elementsFeatures) has a detailed breakdown of these features. I've chosen to go with the set of features recommended in [this tutorial](https://mathiashueber.com/performance-tweaks-gaming-on-virtual-machines/) due to hardware similarities:\n\n```\n<features>\n    ...\n    <hyperv>\n      <relaxed state=\"on\"/>\n      <vapic state=\"on\"/>\n      <spinlocks state=\"on\" retries=\"8191\"/>\n      <vendor_id state=\"on\" value=\"kvm hyperv\"/>\n      <vpindex state='on'/>\n      <synic state='on'/>\n      <stimer state='on'/>\n      <reset state='on'/>\n      <frequencies state='on'/>\n    </hyperv>\n    ...\n</features>\n```\n\n<h3 name=\"part5\">\n    Part 5: Benchmarks\n</h3>\n\nCongrats! You've finished setting up your Windows gaming VM! But now comes the most important part... Let's compare the bare-metal performance of Windows against our KVM. If everything goes according to plan, we can expect somewhat close to native performance on the VM. In order to test this theory, I used the following benchmark software: [UserBenchmark](https://www.userbenchmark.com/). Check out the results<span name=\"return18\"><sup>[18](#footnote18)</sup></span> for yourself:\n\n* [Windows Native](https://www.userbenchmark.com/UserRun/25008533)\n* [Windows KVM](https://www.userbenchmark.com/UserRun/25008992)\n\nHopefully your results are as good as mine, if not better!\n\n<h3 name=\"part6\">\n    Part 6: Software Licensing Considerations\n</h3>\n\nWhen running in the qemu environment, as described above, unique system identifiers are set by the virtual environment. These identifiers are often used to tie a software license to a physical machine. Because the virtual machine is merely\nduplicating the physical machine, one can copy the physical system system identifiers into the virtual machine. If one is also using a dedicated physical device for the virtual machine storage, this allows booting the Windows installation\nas a virtual machine or natively with dual-boot.\n\nTo do this, one needs to modify the XML of the virtual machine to replicate their system. An example with some valid values is below:\n\n```\n<sysinfo type=\"smbios\">\n    <bios>\n      <entry name=\"vendor\">American Megatrends, Inc.</entry>\n      <entry name=\"version\">0812</entry>\n      <entry name=\"date\">02/24/2023</entry>\n      <entry name=\"release\">8.12</entry>\n    </bios>\n    <system>\n      <entry name=\"manufacturer\">ASUS</entry>\n      <entry name=\"product\">System Product Name</entry>\n      <entry name=\"version\">System Version</entry>\n      <entry name=\"serial\">System Serial Number</entry>\n      <entry name=\"uuid\">UNIQUE_UUID</entry>\n      <entry name=\"sku\">SKU</entry>\n      <entry name=\"family\">To be filled by O.E.M.</entry>\n    </system>\n    <baseBoard>\n      <entry name=\"manufacturer\">ASUSTeK COMPUTER INC.</entry>\n      <entry name=\"product\">PRIME Z790-P WIFI</entry>\n      <entry name=\"version\">Rev 1.xx</entry>\n      <entry name=\"serial\">UNIQUE_SERIAL_NUMBER</entry>\n      <entry name=\"asset\">Default string</entry>\n    </baseBoard>\n  </sysinfo>\n```\n\nAcquiring the system values involves using `dmidecode`. Root privileges are required. An example invocation is `dmidecode -s bios-vendor`; the full translation to the XML above is:\n\n```\n<sysinfo type=\"smbios\">\n    <bios>\n      <entry name=\"vendor\">dmidecode -s bios-vendor</entry>\n      <entry name=\"version\">dmidecode -s bios-vendor</entry>\n      <entry name=\"date\">dmidecode -s bios-release-date</entry>\n      <entry name=\"release\">dmidecode -s bios-version</entry>\n    </bios>\n    <system>\n      <entry name=\"manufacturer\">dmidecode -s system-manufacturer</entry>\n      <entry name=\"product\">dmidecode -s system-product-name</entry>\n      <entry name=\"version\">dmidecode -s system-version</entry>\n      <entry name=\"serial\">dmidecode -s system-serial-number</entry>\n      <entry name=\"uuid\">dmidecode -s system-uuid</entry>\n      <entry name=\"sku\">dmidecode -s system-sku-number</entry>\n      <entry name=\"family\">dmidecode -s system-family</entry>\n    </system>\n    <baseBoard>\n      <entry name=\"manufacturer\">dmidecode -s baseboard-manufacturer</entry>\n      <entry name=\"product\">dmidecode -s baseboard-product-name</entry>\n      <entry name=\"version\">dmidecode -s baseboard-version</entry>\n      <entry name=\"serial\">dmidecode -s baseboard-serial-number</entry>\n      <entry name=\"asset\">dmidecode -s baseboard-asset-tag</entry>\n    </baseBoard>\n  </sysinfo>\n```\n\nLastly, by default Linux systems store the physical hardware clock as UTC. When dual-booting; this conflicts with the relative clock used by default in Windows or the virtual environment setup. This clock delta can cause the time to change\non the system in unhealthy ways during reboots; specifically voiding certificates and causing havoc with software licensing tools. To rectify this, modify the clock section of the virtual machine XML, to utilize UTC instead of localtime.\n\n```\n<clock offset=\"utc\">\n    <timer name=\"rtc\" tickpolicy=\"catchup\"/>\n    <timer name=\"pit\" tickpolicy=\"delay\"/>\n    <timer name=\"hpet\" present=\"no\"/>\n    <timer name=\"hypervclock\" present=\"yes\"/>\n  </clock>\n```\n\nIn addition, within the virtual machine edit the registry to add a new dword(`\"RealTimeIsUniversal\"=dword:00000001`) to `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation`.\n\nPower-off and power-on the VM to verify the virtual machine is reporting the correct time. At this point one could natively boot into the operating system and use many hardware-locked license protected software offerings.\n\n<h2 name=\"credits\">\n    Credits & Resources\n</h2>\n\n- Docs\n    - ArchWiki\n        - [QEMU](https://wiki.archlinux.org/index.php/QEMU)\n        - [KVM](https://wiki.archlinux.org/index.php/KVM)\n        - [Libvirt](https://wiki.archlinux.org/index.php/Libvirt)\n        - [PCI Passthrough](https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF)\n        - [Kernel Parameters](https://wiki.archlinux.org/index.php/Kernel_parameters)\n    - Libvirt\n        - [VM Lifecycle](https://wiki.libvirt.org/page/VM_lifecycle)\n        - [Domain XML](https://libvirt.org/formatdomain.html)\n        - [Hooks](https://libvirt.org/hooks.html)\n        - [libvirtd](https://libvirt.org/manpages/libvirtd.html)\n        - [virsh](https://libvirt.org/manpages/virsh.html)\n        - [virtIO](https://wiki.libvirt.org/page/Virtio)\n        - [virtio-blk vs. virtio-scsi](https://mpolednik.github.io/2017/01/23/virtio-blk-vs-virtio-scsi/)\n    - Linux Kernel\n        - [KVM](https://www.kernel.org/doc/html/latest/virt/kvm/index.html)\n        - [VFIO](https://www.kernel.org/doc/html/latest/driver-api/vfio.html?highlight=vfio%20pci)\n- Tutorials\n    - Heiko Sieger - [Running Windows 10 on Linux using KVM with VGA Passthrough](https://heiko-sieger.info/running-windows-10-on-linux-using-kvm-with-vga-passthrough)\n    - Alex Williamson - VFIO GPU How To series\n        - [Part 1 - The hardware](https://vfio.blogspot.com/2015/05/vfio-gpu-how-to-series-part-1-hardware.html)\n        - [Part 2 - Expectations](https://vfio.blogspot.com/2015/05/vfio-gpu-how-to-series-part-2.html)\n        - [Part 3 - Host configuration](https://vfio.blogspot.com/2015/05/vfio-gpu-how-to-series-part-3-host.html)\n        - [Part 4 - Our first VM](https://vfio.blogspot.com/2015/05/vfio-gpu-how-to-series-part-4-our-first.html)\n        - [Part 5 - A VGA-mode, SeaBIOS VM](https://vfio.blogspot.com/2015/05/vfio-gpu-how-to-series-part-5-vga-mode.html)\n    - David Yates - [GPU passthrough: gaming on Windows on Linux](https://davidyat.es/2016/09/08/gpu-passthrough/)\n    - Wendell - [VFIO in 2019 – Pop!_OS How-To](https://forum.level1techs.com/t/vfio-in-2019-pop-os-how-to-general-guide-though-draft/142287)\n        - Wendell is from [Level1Techs](https://level1techs.com/). He has contributed to the FOSS community with a cool application called [Looking Glass](https://looking-glass.hostfission.com/). I recommend you check out this [video](https://www.youtube.com/watch?v=okMGtwfiXMo) for more information.\n        - Wendell has even collaborated with Linus from [Linus Tech Tips](https://www.youtube.com/user/LinusTechTips) and put out [this video](https://www.youtube.com/watch?v=SsgI1mkx6iw).\n    - Yuri Alek - [Single GPU passthrough](https://gitlab.com/YuriAlek/vfio)\n    - Jack Ford - [Ubuntu 18.04 - KVM/QEMU Windows 10 GPU Passthrough](https://blog.zerosector.io/2018/07/28/kvm-qemu-windows-10-gpu-passthrough/)\n    - Bsilvereagle - [Virtualizing Windows 7 (or Linux) on a NVMe drive with VFIO](https://frdmtoplay.com/virtualizing-windows-7-or-linux-on-a-nvme-drive-with-vfio/)\n    - Mathias Hauber\n        - [Windows virtual machine GPU passthrough Ubuntu](https://mathiashueber.com/windows-virtual-machine-gpu-passthrough-ubuntu/)\n        - [Performance tweaks gaming on virtual machines](https://mathiashueber.com/performance-tweaks-gaming-on-virtual-machines/)\n        - [Configuring Hugepages to use in a virtual machine](https://mathiashueber.com/configuring-hugepages-use-virtual-machine/)\n        - [QEMU Troubleshooting errors-gpu-passthrough-vm](https://mathiashueber.com/qemu-troubleshooting-errors-gpu-passthrough-vm/)\n    - Arseniy Shestakov - [How To: pass GPU to VM and back without X restart](https://arseniyshestakov.com/2016/03/31/how-to-pass-gpu-to-vm-and-back-without-x-restart/)\n    - Rokas Kupstys - [Performance of your gaming VM](https://rokups.github.io/#!pages/gaming-vm-performance.md)\n- Videos\n    - GrayWolfTech - [Play games in Windows on Linux! PCI passthrough quick guide](https://www.youtube.com/watch?v=dsDUtzMkxFk)\n    - Raven Repair Co. - [How to create a KVM gaming virtual machine in under 30 minutes!](https://www.youtube.com/watch?v=HXgQVAl4JB4&list=PLoQO63DBLOOM1zf4Fm2HG3QhzlJK7PTAI)\n    - Level1Linux - [GPU Passthrough for Virtualization with Ryzen: Now Working](https://www.youtube.com/watch?v=aLeWg11ZBn0&t=1595s)\n- Blogs\n    - The Passthrough Post\n        - [VFIO PC Builds](https://passthroughpo.st/vfio-increments/)\n        - [Howto: Libvirt Automation Using VFIO-Tools Hook Helper](https://passthroughpo.st/simple-per-vm-libvirt-hooks-with-the-vfio-tools-hook-helper/)\n        - [How to Apply the Error 43 Workaround](https://passthroughpo.st/apply-error-43-workaround/)\n    - Heiko Sieger\n        - [Glossary of Virtualization Terms](https://heiko-sieger.info/glossary-of-virtualization-terms/)\n        - [IOMMU Groups – What You Need to Consider](https://heiko-sieger.info/iommu-groups-what-you-need-to-consider/)\n        - [Virtualization Hardware Accessories](https://heiko-sieger.info/virtualization-hardware-accessories/)\n        - [Windows 10 Virtual Machine Benchmarks](https://heiko-sieger.info/windows-10-virtual-machine-benchmarks/)\n        - [Windows 10 Benchmarks (Virtual Machine)](https://heiko-sieger.info/benchmarks/)\n- Lectures\n    - Alex Williamson - Red Hat\n        - [An Introduction to PCI Device Assignment with VFIO](https://www.youtube.com/watch?v=WFkdTFTOTpA&feature=emb_title)\n        - [VFIO Device Assignment Quirks, How to use Them and How to Avoid Them](https://www.youtube.com/watch?v=A9rV2_3yIOk&t=790s)\n    - Martin Polednik - Red Hat\n        - [Helping Users Maximize VM Performance](https://www.youtube.com/watch?v=_SlUlQRcnQg)\n    - Neo Jia & Kirti Wankhede - NVIDIA\n        - [vGPU on KVM - A VFIO Based Framework](https://www.youtube.com/watch?v=Xs0TJU_sIPc&t=164s)\n- Communities\n    - [Reddit /r/vfio](https://www.reddit.com/r/VFIO/wiki/index)\n    - [Level1Techs](https://forum.level1techs.com/)\n    - [Red Hat vfio-users](https://www.redhat.com/archives/vfio-users/index.html)\n    - [KVM Forum](https://www.youtube.com/channel/UCRCSQmAOh7yzgheq-emy1xA)\n\n<h2 name=\"footnotes\">\n    Footnotes\n</h2>\n\n<ol>\n    <li name=\"footnote1\">\n        Check out <a href=\"https://news.ycombinator.com/item?id=18328323\">this thread</a> from Hacker News for more information.\n        <a href=\"#return1\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote2\">\n        I'll be using the term <i>iGPU</i> to refer to Intel's line of integrated GPUs that usually come built into their processors, and the term <i>dGPU</i> to refer to dedicated GPUs which are much better performance-wise and meant for gaming or video editing (NVIDIA/AMD).\n        <a href=\"#return2\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote3\">\n        Make sure that the monitor input used for your gaming VM supports FreeSync/G-Sync technology. In my case, I reserved the displayport 1.2 input for my gaming VM since G-Sync is not supported across HDMI (which was instead used for host graphics).\n        <a href=\"#return3\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote4\">\n        I specifically wanted my Linux host to be able to perform <a href=\"https://developer.nvidia.com/cuda-downloads\">CUDA</a> work on the attached NVIDIA GPU. Just because my graphics card wasn't attached to a display didn't stop me from wanting to use <a href=\"https://developer.nvidia.com/cudnn\">cuDNN</a> for ML/AI applications.\n        <a href=\"#return4\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote5\">\n        Applying the ACS Override Patch <b>may compromise system security</b>. Check out <a href=\"https://www.reddit.com/r/VFIO/comments/bvif8d/official_reason_why_acs_override_patch_is_not_in/\">this post</a> to see why the ACS patch will probably never make its way upstream to the mainline kernel.\n        <a href=\"#return5\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote6\">\n        I'm actually being a bit disingenuous here... I deliberately purchased hardware that I knew would provide ACS implementation (and hence good IOMMU isolation). After flashing the most recent version of my motherboard's BIOS, I made sure to enable the following features under the \"AMD CBS\" menu: <code>ACS Enable</code>, <code>AER CAP</code>, <code>ARI Support</code>.\n        <a href=\"#return6\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote7\">\n        AMD CPUs/motherboards/chipsets tend to provide better ACS support than their Intel counterparts. The Intel Xeon family of processors is a notable exception. Xeon is mainly targeted at non-consumer workstations and thus are an excellent choice for PCI/VGA passthrough. Be aware that they do demand a hefty price tag.\n        <a href=\"#return7\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote8\">\n        Credit to the solution presented in <a href=\"https://forum.level1techs.com/t/how-to-apply-acs-override-patch-kubuntu-18-10-kernel-4-18-16/134204\">this post</a>.\n        <a href=\"#return8\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote9\">\n        If you decide to use bash scripts to launch your VM, I've included a file in the repository called <code>qemu.sh</code>. Make sure to fill out the <code>#TODO</code> section of the code with your custom version of the command <code>qemu-system-x86-64</code>.\n        <a href=\"#return9\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote10\">\n        See <a href=\"https://www.stratoscale.com/blog/compute/using-bare-qemu-kvm-vs-libvirt-virt-install-virt-manager/\">this link</a> for more details and a comparison between QEMU and virt-manager.\n        <a href=\"#return10\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote11\">\n        See <a href=\"https://heiko-sieger.info/running-windows-10-on-linux-using-kvm-with-vga-passthrough/#About_keyboard_and_mouse\">this link</a> and <a href=\"https://github.com/debauchee/barrier\"> this</a> for software/hardware solutions that share your keyboard and mouse across your host and guest.\n        <a href=\"#return11\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote12\">\n        For more information on hugepages, refer to <a href=\"https://help.ubuntu.com/community/KVM%20-%20Using%20Hugepages\">this link.\n        <a href=\"#return12\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote13\">\n        Credit to the comment from /u/tholin in <a href=\"https://www.reddit.com/r/VFIO/comments/dmie86/setting_up_hugepages/\">this post</a>.\n        <a href=\"#return13\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote14\">\n        Credit to Mathias Hueber in <a href=\"https://mathiashueber.com/performance-tweaks-gaming-on-virtual-machines/\">this post</a>.\n        <a href=\"#return14\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote15\">\n        See a similar discussion here from Rokas Kupstys in <a href=\"https://rokups.github.io/#!pages/gaming-vm-performance.md\">this post.\n        <a href=\"#return15\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote16\">\n        If you're curious about the best CPU pinning strategy for optimizing the latency vs. performance tradeoff, I recommend you check out <a href=\"https://www.redhat.com/archives/vfio-users/2017-February/msg00010.html\">this discussion</a>.\n        <a href=\"#return16\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote17\">\n        Although the overall performance between virtio-blk and virtio-scsi is similar, passing a single virtio-scsi controller can handle a multitude of PCI devices, whereas virtio-blk exposes one PCI device per controller. <a href=\"https://www.reddit.com/r/redhat/comments/6cuydw/in_rhv_what_is_the_difference_between_virtio_and/\">This comment</a> on Reddit from a RedHat employee provides some good context and resources.\n        <a href=\"#return17\"><sup>&#x21ba;</sup></a>\n    </li>\n    <li name=\"footnote18\">\n        For the sake of fairness, I chose to passthrough all 12-cores/24 threads to the KVM. That way, the bare-metal installation won't have an unfair advantage over the KVM when it comes to multi-core processes. Unfortunately, I couldn't passthrough all 32GB of RAM to the KVM since the host naturally reserves some of its own. In order to mitigate this as much as possible, I passed the remaining 29GB of RAM to the KVM. Due to its nature, a surplus of RAM doesn't really improve performance so much as it prevents bottlenecking.\n        <a href=\"#return18\"><sup>&#x21ba;</sup></a>\n    </li>\n</ol>\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "kvm",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}