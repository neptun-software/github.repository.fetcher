{
  "metadata": {
    "timestamp": 1736568235407,
    "page": 104,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "laurent22/rsync-time-backup",
      "stars": 3431,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0498046875,
          "content": ".idea\ntest.sh\n*~\ntests/TestDest/\ntests/TestSource/\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.9580078125,
          "content": "# Rsync time backup\n\nThis script offers Time Machine-style backup using rsync. It creates incremental backups of files and directories to the destination of your choice. The backups are structured in a way that makes it easy to recover any file at any point in time.\n\nIt works on Linux, macOS and Windows (via WSL or Cygwin). The main advantage over Time Machine is the flexibility as it can backup from/to any filesystem and works on any platform. You can also backup, for example, to a Truecrypt drive without any problem.\n\nOn macOS, it has a few disadvantages compared to Time Machine - in particular it does not auto-start when the backup drive is plugged (though it can be achieved using a launch agent), it requires some knowledge of the command line, and no specific GUI is provided to restore files. Instead files can be restored by using any file explorer, including Finder, or the command line.\n\n## Installation\n\n\tgit clone https://github.com/laurent22/rsync-time-backup\n\n## Usage\n\n\tUsage: rsync_tmbackup.sh [OPTION]... <[USER@HOST:]SOURCE> <[USER@HOST:]DESTINATION> [exclude-pattern-file]\n\n\tOptions\n\t -p, --port             SSH port.\n\t -h, --help             Display this help message.\n\t -i, --id_rsa           Specify the private ssh key to use.\n\t --rsync-get-flags      Display the default rsync flags that are used for backup. If using remote\n\t                        drive over SSH, --compress will be added.\n\t --rsync-set-flags      Set the rsync flags that are going to be used for backup.\n\t --rsync-append-flags   Append the rsync flags that are going to be used for backup.\n\t --log-dir              Set the log file directory. If this flag is set, generated files will\n\t                        not be managed by the script - in particular they will not be\n\t                        automatically deleted.\n\t                        Default: /home/backuper/.rsync_tmbackup\n\t --strategy             Set the expiration strategy. Default: \"1:1 30:7 365:30\" means after one\n\t                        day, keep one backup per day. After 30 days, keep one backup every 7 days.\n\t                        After 365 days keep one backup every 30 days.\n\t --no-auto-expire       Disable automatically deleting backups when out of space. Instead an error\n\t                        is logged, and the backup is aborted.\n\n## Features\n\n* Each backup is on its own folder named after the current timestamp. Files can be copied and restored directly, without any intermediate tool.\n\n* Backup to/from remote destinations over SSH.\n\n* Files that haven't changed from one backup to the next are hard-linked to the previous backup so take very little extra space.\n\n* Safety check - the backup will only happen if the destination has explicitly been marked as a backup destination.\n\n* Resume feature - if a backup has failed or was interrupted, the tool will resume from there on the next backup.\n\n* Exclude file - support for pattern-based exclusion via the `--exclude-from` rsync parameter.\n\n* Automatically purge old backups - within 24 hours, all backups are kept. Within one month, the most recent backup for each day is kept. For all previous backups, the most recent of each month is kept.\n\n* \"latest\" symlink that points to the latest successful backup.\n\n## Examples\n\t\n* Backup the home folder to backup_drive\n\t\n\t\trsync_tmbackup.sh /home /mnt/backup_drive  \n\n* Backup with exclusion list:\n\t\n\t\trsync_tmbackup.sh /home /mnt/backup_drive excluded_patterns.txt\n\n* Backup to remote drive over SSH, on port 2222:\n\n\t\trsync_tmbackup.sh -p 2222 /home user@example.com:/mnt/backup_drive\n\n\n* Backup from remote drive over SSH:\n\n\t\trsync_tmbackup.sh user@example.com:/home /mnt/backup_drive\n\n* To mimic Time Machine's behaviour, a cron script can be setup to backup at regular interval. For example, the following cron job checks if the drive \"/mnt/backup\" is currently connected and, if it is, starts the backup. It does this check every 1 hour.\n\t\t\n\t\t0 */1 * * * if grep -qs /mnt/backup /proc/mounts; then rsync_tmbackup.sh /home /mnt/backup; fi\n\n## Backup expiration logic\n\nBackup sets are automatically deleted following a simple expiration strategy defined with the `--strategy` flag. This strategy is a series of time intervals with each item being defined as `x:y`, which means \"after x days, keep one backup every y days\". The default strategy is `1:1 30:7 365:30`, which means:\n\n- After **1** day, keep one backup every **1** day (**1:1**).\n- After **30** days, keep one backup every **7** days (**30:7**).\n- After **365** days, keep one backup every **30** days (**365:30**).\n\nBefore the first interval (i.e. by default within the first 24h) it is implied that all backup sets are kept. Additionally, if the backup destination directory is full, the oldest backups are deleted until enough space is available.\n\n## Exclusion file\n\nAn optional exclude file can be provided as a third parameter. It should be compatible with the `--exclude-from` parameter of rsync. See [this tutorial](https://web.archive.org/web/20230126121643/https://sites.google.com/site/rsync2u/home/rsync-tutorial/the-exclude-from-option) for more information.\n\n## Built-in lock\n\nThe script is designed so that only one backup operation can be active for a given directory. If a new backup operation is started while another is still active (i.e. it has not finished yet), the new one will be automaticalled interrupted. Thanks to this the use of `flock` to run the script is not necessary.\n\n## Rsync options\n\nTo display the rsync options that are used for backup, run `./rsync_tmbackup.sh --rsync-get-flags`. It is also possible to add or remove options using the `--rsync-append-flags` or `--rsync-set-flags` option. For example, to exclude backing up permissions and groups:\n\n\trsync_tmbackup --rsync-append-flags \"--no-perms --no-group\" /src /dest\n\n## No automatic backup expiration\n\nAn option to disable the default behaviour to purge old backups when out of space. This option is set with the `--no-auto-expire` flag.\n\t\n\t\n## How to restore\n\nThe script creates a backup in a regular directory so you can simply copy the files back to the original directory. You could do that with something like `rsync -aP /path/to/last/backup/ /path/to/restore/to/`. Consider using the `--dry-run` option to check what exactly is going to be copied. Use `--delete` if you also want to delete files that exist in the destination but not in the backup (obviously extra care must be taken when using this option).\n\n## Extensions\n\n* [rtb-wrapper](https://github.com/thomas-mc-work/rtb-wrapper): Allows creating backup profiles in config files. Handles both backup and restore operations.\n* [time-travel](https://github.com/joekerna/time-travel): Smooth integration into OSX Notification Center\n\n## TODO\n\n* Check source and destination file-system (`df -T /dest`). If one of them is FAT, use the --modify-window rsync parameter (see `man rsync`) with a value of 1 or 2\n* Add `--whole-file` arguments on Windows? See http://superuser.com/a/905415/73619\n* Minor changes (see TODO comments in the source).\n\n## LICENSE\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2024 Laurent Cozic\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "rsync_tmbackup.sh",
          "type": "blob",
          "size": 19.822265625,
          "content": "#!/usr/bin/env bash\n\nAPPNAME=$(basename \"$0\" | sed \"s/\\.sh$//\")\n\n# -----------------------------------------------------------------------------\n# Log functions\n# -----------------------------------------------------------------------------\n\nfn_log_info()  { echo \"$APPNAME: $1\"; }\nfn_log_warn()  { echo \"$APPNAME: [WARNING] $1\" 1>&2; }\nfn_log_error() { echo \"$APPNAME: [ERROR] $1\" 1>&2; }\nfn_log_info_cmd()  {\n\tif [ -n \"$SSH_DEST_FOLDER_PREFIX\" ]; then\n\t\techo \"$APPNAME: $SSH_CMD '$1'\";\n\telse\n\t\techo \"$APPNAME: $1\";\n\tfi\n}\n\n# -----------------------------------------------------------------------------\n# Make sure everything really stops when CTRL+C is pressed\n# -----------------------------------------------------------------------------\n\nfn_terminate_script() {\n\tfn_log_info \"SIGINT caught.\"\n\texit 1\n}\n\ntrap 'fn_terminate_script' SIGINT\n\n# -----------------------------------------------------------------------------\n# Small utility functions for reducing code duplication\n# -----------------------------------------------------------------------------\nfn_display_usage() {\n\techo \"Usage: $(basename \"$0\") [OPTION]... <[USER@HOST:]SOURCE> <[USER@HOST:]DESTINATION> [exclude-pattern-file]\"\n\techo \"\"\n\techo \"Options\"\n\techo \" -p, --port             SSH port.\"\n\techo \" -h, --help             Display this help message.\"\n\techo \" -i, --id_rsa           Specify the private ssh key to use.\"\n\techo \" --rsync-get-flags      Display the default rsync flags that are used for backup. If using remote\"\n\techo \"                        drive over SSH, --compress will be added.\"\n\techo \" --rsync-set-flags      Set the rsync flags that are going to be used for backup.\"\n\techo \" --rsync-append-flags   Append the rsync flags that are going to be used for backup.\"\n\techo \" --log-dir              Set the log file directory. If this flag is set, generated files will\"\n\techo \"                        not be managed by the script - in particular they will not be\"\n\techo \"                        automatically deleted.\"\n\techo \"                        Default: $LOG_DIR\"\n\techo \" --strategy             Set the expiration strategy. Default: \\\"1:1 30:7 365:30\\\" means after one\"\n\techo \"                        day, keep one backup per day. After 30 days, keep one backup every 7 days.\"\n\techo \"                        After 365 days keep one backup every 30 days.\"\n\techo \" --no-auto-expire       Disable automatically deleting backups when out of space. Instead an error\"\n\techo \"                        is logged, and the backup is aborted.\"\n\techo \"\"\n\techo \"For more detailed help, please see the README file:\"\n\techo \"\"\n\techo \"https://github.com/laurent22/rsync-time-backup/blob/master/README.md\"\n}\n\nfn_parse_date() {\n\t# Converts YYYY-MM-DD-HHMMSS to YYYY-MM-DD HH:MM:SS and then to Unix Epoch.\n\tcase \"$OSTYPE\" in\n\t\tlinux*|cygwin*|netbsd*)\n\t\t\tdate -d \"${1:0:10} ${1:11:2}:${1:13:2}:${1:15:2}\" +%s ;;\n\t\tFreeBSD*) date -j -f \"%Y-%m-%d-%H%M%S\" \"$1\" \"+%s\" ;;\n\t\tdarwin*)\n\t\t\t# Under MacOS X Tiger\n\t\t\t# Or with GNU 'coreutils' installed (by homebrew)\n\t\t\t#   'date -j' doesn't work, so we do this:\n\t\t\tyy=$(expr ${1:0:4})\n\t\t\tmm=$(expr ${1:5:2} - 1)\n\t\t\tdd=$(expr ${1:8:2})\n\t\t\thh=$(expr ${1:11:2})\n\t\t\tmi=$(expr ${1:13:2})\n\t\t\tss=$(expr ${1:15:2})\n\t\t\tperl -e 'use Time::Local; print timelocal('$ss','$mi','$hh','$dd','$mm','$yy'),\"\\n\";' ;;\n\tesac\n}\n\nfn_find_backups() {\n\tfn_run_cmd \"find \"$DEST_FOLDER/\" -maxdepth 1 -type d -name \\\"????-??-??-??????\\\" -prune | sort -r\"\n}\n\nfn_expire_backup() {\n\t# Double-check that we're on a backup destination to be completely\n\t# sure we're deleting the right folder\n\tif [ -z \"$(fn_find_backup_marker \"$(dirname -- \"$1\")\")\" ]; then\n\t\tfn_log_error \"$1 is not on a backup destination - aborting.\"\n\t\texit 1\n\tfi\n\n\tfn_log_info \"Expiring $1\"\n\tfn_rm_dir \"$1\"\n}\n\nfn_expire_backups() {\n\tlocal current_timestamp=$EPOCH\n\tlocal last_kept_timestamp=9999999999\n\n\t# we will keep requested backup\n\tbackup_to_keep=\"$1\"\n\t# we will also keep the oldest backup\n\toldest_backup_to_keep=\"$(fn_find_backups | sort | sed -n '1p')\"\n\n\t# Process each backup dir from the oldest to the most recent\n\tfor backup_dir in $(fn_find_backups | sort); do\n\n\t\tlocal backup_date=$(basename \"$backup_dir\")\n\t\tlocal backup_timestamp=$(fn_parse_date \"$backup_date\")\n\n\t\t# Skip if failed to parse date...\n\t\tif [ -z \"$backup_timestamp\" ]; then\n\t\t\tfn_log_warn \"Could not parse date: $backup_dir\"\n\t\t\tcontinue\n\t\tfi\n\n\t\tif [ \"$backup_dir\" == \"$backup_to_keep\" ]; then\n\t\t\t# this is the latest backup requsted to be kept. We can finish pruning\n\t\t\tbreak\n\t\tfi\n\n\t\tif [ \"$backup_dir\" == \"$oldest_backup_to_keep\" ]; then\n\t\t\t# We dont't want to delete the oldest backup. It becomes first \"last kept\" backup\n\t\t\tlast_kept_timestamp=$backup_timestamp\n\t\t\t# As we keep it we can skip processing it and go to the next oldest one in the loop\n\t\t\tcontinue\n\t\tfi\n\n\t\t# Find which strategy token applies to this particular backup\n\t\tfor strategy_token in $(echo $EXPIRATION_STRATEGY | tr \" \" \"\\n\" | sort -r -n); do\n\t\t\tIFS=':' read -r -a t <<< \"$strategy_token\"\n\n\t\t\t# After which date (relative to today) this token applies (X) - we use seconds to get exact cut off time\n\t\t\tlocal cut_off_timestamp=$((current_timestamp - ${t[0]} * 86400))\n\n\t\t\t# Every how many days should a backup be kept past the cut off date (Y) - we use days (not seconds)\n\t\t\tlocal cut_off_interval_days=$((${t[1]}))\n\n\t\t\t# If we've found the strategy token that applies to this backup\n\t\t\tif [ \"$backup_timestamp\" -le \"$cut_off_timestamp\" ]; then\n\n\t\t\t\t# Special case: if Y is \"0\" we delete every time\n\t\t\t\tif [ $cut_off_interval_days -eq \"0\" ]; then\n\t\t\t\t\tfn_expire_backup \"$backup_dir\"\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\n\t\t\t\t# we calculate days number since last kept backup\n\t\t\t\tlocal last_kept_timestamp_days=$((last_kept_timestamp / 86400))\n\t\t\t\tlocal backup_timestamp_days=$((backup_timestamp / 86400))\n\t\t\t\tlocal interval_since_last_kept_days=$((backup_timestamp_days - last_kept_timestamp_days))\n\n\t\t\t\t# Check if the current backup is in the interval between\n\t\t\t\t# the last backup that was kept and Y\n\t\t\t\t# to determine what to keep/delete we use days difference\n\t\t\t\tif [ \"$interval_since_last_kept_days\" -lt \"$cut_off_interval_days\" ]; then\n\n\t\t\t\t\t# Yes: Delete that one\n\t\t\t\t\tfn_expire_backup \"$backup_dir\"\n\t\t\t\t\t# backup deleted no point to check shorter timespan strategies - go to the next backup\n\t\t\t\t\tbreak\n\n\t\t\t\telse\n\n\t\t\t\t\t# No: Keep it.\n\t\t\t\t\t# this is now the last kept backup\n\t\t\t\t\tlast_kept_timestamp=$backup_timestamp\n\t\t\t\t\t# and go to the next backup\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\t\tfi\n\t\tdone\n\tdone\n}\n\nfn_parse_ssh() {\n\t# To keep compatibility with bash version < 3, we use grep\n\tif echo \"$DEST_FOLDER\"|grep -Eq '^[A-Za-z0-9\\._%\\+\\-]+@[A-Za-z0-9.\\-]+\\:.+$'\n\tthen\n\t\tSSH_USER=$(echo \"$DEST_FOLDER\" | sed -E  's/^([A-Za-z0-9\\._%\\+\\-]+)@([A-Za-z0-9.\\-]+)\\:(.+)$/\\1/')\n\t\tSSH_HOST=$(echo \"$DEST_FOLDER\" | sed -E  's/^([A-Za-z0-9\\._%\\+\\-]+)@([A-Za-z0-9.\\-]+)\\:(.+)$/\\2/')\n\t\tSSH_DEST_FOLDER=$(echo \"$DEST_FOLDER\" | sed -E  's/^([A-Za-z0-9\\._%\\+\\-]+)@([A-Za-z0-9.\\-]+)\\:(.+)$/\\3/')\n\t\tif [ -n \"$ID_RSA\" ] ; then\n\t\t\tSSH_CMD=\"ssh -p $SSH_PORT -i $ID_RSA ${SSH_USER}@${SSH_HOST}\"\n\t\telse\n\t\t\tSSH_CMD=\"ssh -p $SSH_PORT ${SSH_USER}@${SSH_HOST}\"\n\t\tfi\n\t\tSSH_DEST_FOLDER_PREFIX=\"${SSH_USER}@${SSH_HOST}:\"\n\telif echo \"$SRC_FOLDER\"|grep -Eq '^[A-Za-z0-9\\._%\\+\\-]+@[A-Za-z0-9.\\-]+\\:.+$'\n\tthen\n\t\tSSH_USER=$(echo \"$SRC_FOLDER\" | sed -E  's/^([A-Za-z0-9\\._%\\+\\-]+)@([A-Za-z0-9.\\-]+)\\:(.+)$/\\1/')\n\t\tSSH_HOST=$(echo \"$SRC_FOLDER\" | sed -E  's/^([A-Za-z0-9\\._%\\+\\-]+)@([A-Za-z0-9.\\-]+)\\:(.+)$/\\2/')\n\t\tSSH_SRC_FOLDER=$(echo \"$SRC_FOLDER\" | sed -E  's/^([A-Za-z0-9\\._%\\+\\-]+)@([A-Za-z0-9.\\-]+)\\:(.+)$/\\3/')\n\t\tif [ -n \"$ID_RSA\" ] ; then\n\t\t\tSSH_CMD=\"ssh -p $SSH_PORT -i $ID_RSA ${SSH_USER}@${SSH_HOST}\"\n\t\telse\n\t\t\tSSH_CMD=\"ssh -p $SSH_PORT ${SSH_USER}@${SSH_HOST}\"\n\t\tfi\n\t\tSSH_SRC_FOLDER_PREFIX=\"${SSH_USER}@${SSH_HOST}:\"\n\tfi\n}\n\nfn_run_cmd() {\n\tif [ -n \"$SSH_DEST_FOLDER_PREFIX\" ]\n\tthen\n\t\teval \"$SSH_CMD '$1'\"\n\telse\n\t\teval $1\n\tfi\n}\n\nfn_run_cmd_src() {\n\tif [ -n \"$SSH_SRC_FOLDER_PREFIX\" ]\n\tthen\n\t\teval \"$SSH_CMD '$1'\"\n\telse\n\t\teval $1\n\tfi\n}\n\nfn_find() {\n\tfn_run_cmd \"find '$1'\"  2>/dev/null\n}\n\nfn_get_absolute_path() {\n\tfn_run_cmd \"cd '$1';pwd\"\n}\n\nfn_mkdir() {\n\tfn_run_cmd \"mkdir -p -- '$1'\"\n}\n\n# Removes a file or symlink - not for directories\nfn_rm_file() {\n\tfn_run_cmd \"rm -f -- '$1'\"\n}\n\nfn_rm_dir() {\n\tfn_run_cmd \"rm -rf -- '$1'\"\n}\n\nfn_touch() {\n\tfn_run_cmd \"touch -- '$1'\"\n}\n\nfn_ln() {\n\tfn_run_cmd \"ln -s -- '$1' '$2'\"\n}\n\nfn_test_file_exists_src() {\n\tfn_run_cmd_src \"test -e '$1'\"\n}\n\nfn_df_t_src() {\n\tfn_run_cmd_src \"df -T '${1}'\"\n}\n\nfn_df_t() {\n\tfn_run_cmd \"df -T '${1}'\"\n}\n\n# -----------------------------------------------------------------------------\n# Source and destination information\n# -----------------------------------------------------------------------------\nSSH_USER=\"\"\nSSH_HOST=\"\"\nSSH_DEST_FOLDER=\"\"\nSSH_SRC_FOLDER=\"\"\nSSH_CMD=\"\"\nSSH_DEST_FOLDER_PREFIX=\"\"\nSSH_SRC_FOLDER_PREFIX=\"\"\nSSH_PORT=\"22\"\nID_RSA=\"\"\n\nSRC_FOLDER=\"\"\nDEST_FOLDER=\"\"\nEXCLUSION_FILE=\"\"\nLOG_DIR=\"$HOME/.$APPNAME\"\nAUTO_DELETE_LOG=\"1\"\nEXPIRATION_STRATEGY=\"1:1 30:7 365:30\"\nAUTO_EXPIRE=\"1\"\n\nRSYNC_FLAGS=\"-D --numeric-ids --links --hard-links --one-file-system --itemize-changes --times --recursive --perms --owner --group --stats --human-readable\"\n\nwhile :; do\n\tcase $1 in\n\t\t-h|-\\?|--help)\n\t\t\tfn_display_usage\n\t\t\texit\n\t\t\t;;\n\t\t-p|--port)\n\t\t\tshift\n\t\t\tSSH_PORT=$1\n\t\t\t;;\n\t\t-i|--id_rsa)\n\t\t\tshift\n\t\t\tID_RSA=\"$1\"\n\t\t\t;;\n\t\t--rsync-get-flags)\n\t\t\tshift\n\t\t\techo \"$RSYNC_FLAGS\"\n\t\t\texit\n\t\t\t;;\n\t\t--rsync-set-flags)\n\t\t\tshift\n\t\t\tRSYNC_FLAGS=\"$1\"\n\t\t\t;;\n\t\t--rsync-append-flags)\n\t\t\tshift\n\t\t\tRSYNC_FLAGS=\"$RSYNC_FLAGS $1\"\n\t\t\t;;\n\t\t--strategy)\n\t\t\tshift\n\t\t\tEXPIRATION_STRATEGY=\"$1\"\n\t\t\t;;\n\t\t--log-dir)\n\t\t\tshift\n\t\t\tLOG_DIR=\"$1\"\n\t\t\tAUTO_DELETE_LOG=\"0\"\n\t\t\t;;\n\t\t--no-auto-expire)\n\t\t\tAUTO_EXPIRE=\"0\"\n\t\t\t;;\n\t\t--)\n\t\t\tshift\n\t\t\tSRC_FOLDER=\"$1\"\n\t\t\tDEST_FOLDER=\"$2\"\n\t\t\tEXCLUSION_FILE=\"$3\"\n\t\t\tbreak\n\t\t\t;;\n\t\t-*)\n\t\t\tfn_log_error \"Unknown option: \\\"$1\\\"\"\n\t\t\tfn_log_info \"\"\n\t\t\tfn_display_usage\n\t\t\texit 1\n\t\t\t;;\n\t\t*)\n\t\t\tSRC_FOLDER=\"$1\"\n\t\t\tDEST_FOLDER=\"$2\"\n\t\t\tEXCLUSION_FILE=\"$3\"\n\t\t\tbreak\n\tesac\n\n\tshift\ndone\n\n# Display usage information if required arguments are not passed\nif [[ -z \"$SRC_FOLDER\" || -z \"$DEST_FOLDER\" ]]; then\n\tfn_display_usage\n\texit 1\nfi\n\n# Strips off last slash from dest. Note that it means the root folder \"/\"\n# will be represented as an empty string \"\", which is fine\n# with the current script (since a \"/\" is added when needed)\n# but still something to keep in mind.\n# However, due to this behavior we delay stripping the last slash for\n# the source folder until after parsing for ssh usage.\n\nDEST_FOLDER=\"${DEST_FOLDER%/}\"\n\nfn_parse_ssh\n\nif [ -n \"$SSH_DEST_FOLDER\" ]; then\n\tDEST_FOLDER=\"$SSH_DEST_FOLDER\"\nfi\n\nif [ -n \"$SSH_SRC_FOLDER\" ]; then\n\tSRC_FOLDER=\"$SSH_SRC_FOLDER\"\nfi\n\n# Exit if source folder does not exist.\nif ! fn_test_file_exists_src \"${SRC_FOLDER}\"; then\n\tfn_log_error \"Source folder \\\"${SRC_FOLDER}\\\" does not exist - aborting.\"\n\texit 1\nfi\n\n# Now strip off last slash from source folder.\nSRC_FOLDER=\"${SRC_FOLDER%/}\"\n\nfor ARG in \"$SRC_FOLDER\" \"$DEST_FOLDER\" \"$EXCLUSION_FILE\"; do\n\tif [[ \"$ARG\" == *\"'\"* ]]; then\n\t\tfn_log_error 'Source and destination directories may not contain single quote characters.'\n\t\texit 1\n\tfi\ndone\n\n# -----------------------------------------------------------------------------\n# Check that the destination drive is a backup drive\n# -----------------------------------------------------------------------------\n\n# TODO: check that the destination supports hard links\n\nfn_backup_marker_path() { echo \"$1/backup.marker\"; }\nfn_find_backup_marker() { fn_find \"$(fn_backup_marker_path \"$1\")\" 2>/dev/null; }\n\nif [ -z \"$(fn_find_backup_marker \"$DEST_FOLDER\")\" ]; then\n\tfn_log_info \"Safety check failed - the destination does not appear to be a backup folder or drive (marker file not found).\"\n\tfn_log_info \"If it is indeed a backup folder, you may add the marker file by running the following command:\"\n\tfn_log_info \"\"\n\tfn_log_info_cmd \"mkdir -p -- \\\"$DEST_FOLDER\\\" ; touch \\\"$(fn_backup_marker_path \"$DEST_FOLDER\")\\\"\"\n\tfn_log_info \"\"\n\texit 1\nfi\n\n# Check source and destination file-system (df -T /dest).\n# If one of them is FAT, use the --modify-window rsync parameter\n# (see man rsync) with a value of 1 or 2.\n#\n# The check is performed by taking the second row\n# of the output of the first command.\nif [[ \"$(fn_df_t_src \"${SRC_FOLDER}\" | awk '{print $2}' | grep -c -i -e \"fat\")\" -gt 0 ]]; then\n\tfn_log_info \"Source file-system is a version of FAT.\"\n\tfn_log_info \"Using the --modify-window rsync parameter with value 2.\"\n\tRSYNC_FLAGS=\"${RSYNC_FLAGS} --modify-window=2\"\nelif [[ \"$(fn_df_t \"${DEST_FOLDER}\" | awk '{print $2}' | grep -c -i -e \"fat\")\" -gt 0 ]]; then\n\tfn_log_info \"Destination file-system is a version of FAT.\"\n\tfn_log_info \"Using the --modify-window rsync parameter with value 2.\"\n\tRSYNC_FLAGS=\"${RSYNC_FLAGS} --modify-window=2\"\nfi\n\n# -----------------------------------------------------------------------------\n# Setup additional variables\n# -----------------------------------------------------------------------------\n\n# Date logic\nNOW=$(date +\"%Y-%m-%d-%H%M%S\")\nEPOCH=$(date \"+%s\")\nKEEP_ALL_DATE=$((EPOCH - 86400))       # 1 day ago\nKEEP_DAILIES_DATE=$((EPOCH - 2678400)) # 31 days ago\n\nexport IFS=$'\\n' # Better for handling spaces in filenames.\nDEST=\"$DEST_FOLDER/$NOW\"\nPREVIOUS_DEST=\"$(fn_find_backups | head -n 1)\"\nINPROGRESS_FILE=\"$DEST_FOLDER/backup.inprogress\"\nMYPID=\"$$\"\n\n# -----------------------------------------------------------------------------\n# Create log folder if it doesn't exist\n# -----------------------------------------------------------------------------\n\nif [ ! -d \"$LOG_DIR\" ]; then\n\tfn_log_info \"Creating log folder in '$LOG_DIR'...\"\n\tmkdir -- \"$LOG_DIR\"\nfi\n\n# -----------------------------------------------------------------------------\n# Handle case where a previous backup failed or was interrupted.\n# -----------------------------------------------------------------------------\n\nif [ -n \"$(fn_find \"$INPROGRESS_FILE\")\" ]; then\n\tif [ \"$OSTYPE\" == \"cygwin\" ]; then\n\t\t# 1. Grab the PID of previous run from the PID file\n\t\tRUNNINGPID=\"$(fn_run_cmd \"cat $INPROGRESS_FILE\")\"\n\n\t\t# 2. Get the command for the process currently running under that PID and look for our script name\n\t\tRUNNINGCMD=\"$(procps -wwfo cmd -p $RUNNINGPID --no-headers | grep \"$APPNAME\")\"\n\n\t\t# 3. Grab the exit code from grep (0=found, 1=not found)\n\t\tGREPCODE=$?\n\n\t\t# 4. if found, assume backup is still running\n\t\tif [ \"$GREPCODE\" = 0 ]; then\n\t\t\tfn_log_error \"Previous backup task is still active - aborting (command: $RUNNINGCMD).\"\n\t\t\texit 1\n\t\tfi\n\telif [[ \"$OSTYPE\" == \"netbsd\"* ]]; then\n\t\tRUNNINGPID=\"$(fn_run_cmd \"cat $INPROGRESS_FILE\")\"\n\t\tif ps -axp \"$RUNNINGPID\" -o \"command\" | grep \"$APPNAME\" > /dev/null; then\n\t\t\tfn_log_error \"Previous backup task is still active - aborting.\"\n\t\t\texit 1\n\t\tfi\n\telse\n\t\tRUNNINGPID=\"$(fn_run_cmd \"cat $INPROGRESS_FILE\")\"\n\t\tif ps -p \"$RUNNINGPID\" -o command | grep \"$APPNAME\"\n\t\tthen\n\t\t\tfn_log_error \"Previous backup task is still active - aborting.\"\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\tif [ -n \"$PREVIOUS_DEST\" ]; then\n\t\t# - Last backup is moved to current backup folder so that it can be resumed.\n\t\t# - 2nd to last backup becomes last backup.\n\t\tfn_log_info \"$SSH_DEST_FOLDER_PREFIX$INPROGRESS_FILE already exists - the previous backup failed or was interrupted. Backup will resume from there.\"\n\t\tfn_run_cmd \"mv -- $PREVIOUS_DEST $DEST\"\n\t\tif [ \"$(fn_find_backups | wc -l)\" -gt 1 ]; then\n\t\t\tPREVIOUS_DEST=\"$(fn_find_backups | sed -n '2p')\"\n\t\telse\n\t\t\tPREVIOUS_DEST=\"\"\n\t\tfi\n\t\t# update PID to current process to avoid multiple concurrent resumes\n\t\tfn_run_cmd \"echo $MYPID > $INPROGRESS_FILE\"\n\tfi\nfi\n\n# Run in a loop to handle the \"No space left on device\" logic.\nwhile : ; do\n\n\t# -----------------------------------------------------------------------------\n\t# Check if we are doing an incremental backup (if previous backup exists).\n\t# -----------------------------------------------------------------------------\n\n\tLINK_DEST_OPTION=\"\"\n\tif [ -z \"$PREVIOUS_DEST\" ]; then\n\t\tfn_log_info \"No previous backup - creating new one.\"\n\telse\n\t\t# If the path is relative, it needs to be relative to the destination. To keep\n\t\t# it simple, just use an absolute path. See http://serverfault.com/a/210058/118679\n\t\tPREVIOUS_DEST=\"$(fn_get_absolute_path \"$PREVIOUS_DEST\")\"\n\t\tfn_log_info \"Previous backup found - doing incremental backup from $SSH_DEST_FOLDER_PREFIX$PREVIOUS_DEST\"\n\t\tLINK_DEST_OPTION=\"--link-dest='$PREVIOUS_DEST'\"\n\tfi\n\n\t# -----------------------------------------------------------------------------\n\t# Create destination folder if it doesn't already exists\n\t# -----------------------------------------------------------------------------\n\n\tif [ -z \"$(fn_find \"$DEST -type d\" 2>/dev/null)\" ]; then\n\t\tfn_log_info \"Creating destination $SSH_DEST_FOLDER_PREFIX$DEST\"\n\t\tfn_mkdir \"$DEST\"\n\tfi\n\n\t# -----------------------------------------------------------------------------\n\t# Purge certain old backups before beginning new backup.\n\t# -----------------------------------------------------------------------------\n\n\tif [ -n \"$PREVIOUS_DEST\" ]; then\n\t\t# regardless of expiry strategy keep backup used for --link-dest\n\t\tfn_expire_backups \"$PREVIOUS_DEST\"\n\telse\n\t\t# keep latest backup\n\t\tfn_expire_backups \"$DEST\"\n\tfi\n\n\t# -----------------------------------------------------------------------------\n\t# Start backup\n\t# -----------------------------------------------------------------------------\n\n\tLOG_FILE=\"$LOG_DIR/$(date +\"%Y-%m-%d-%H%M%S\").log\"\n\n\tfn_log_info \"Starting backup...\"\n\tfn_log_info \"From: $SSH_SRC_FOLDER_PREFIX$SRC_FOLDER/\"\n\tfn_log_info \"To:   $SSH_DEST_FOLDER_PREFIX$DEST/\"\n\n\tCMD=\"rsync\"\n\tif [ -n \"$SSH_CMD\" ]; then\n\t\tRSYNC_FLAGS=\"$RSYNC_FLAGS --compress\"\n\t\tif [ -n \"$ID_RSA\" ] ; then\n\t\t\tCMD=\"$CMD  -e 'ssh -p $SSH_PORT -i $ID_RSA -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'\"\n\t\telse\n\t\t\tCMD=\"$CMD  -e 'ssh -p $SSH_PORT -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'\"\n\t\tfi\n\tfi\n\tCMD=\"$CMD $RSYNC_FLAGS\"\n\tCMD=\"$CMD --log-file '$LOG_FILE'\"\n\tif [ -n \"$EXCLUSION_FILE\" ]; then\n\t\t# We've already checked that $EXCLUSION_FILE doesn't contain a single quote\n\t\tCMD=\"$CMD --exclude-from '$EXCLUSION_FILE'\"\n\tfi\n\tCMD=\"$CMD $LINK_DEST_OPTION\"\n\tCMD=\"$CMD -- '$SSH_SRC_FOLDER_PREFIX$SRC_FOLDER/' '$SSH_DEST_FOLDER_PREFIX$DEST/'\"\n\n\tfn_log_info \"Running command:\"\n\tfn_log_info \"$CMD\"\n\n\tfn_run_cmd \"echo $MYPID > $INPROGRESS_FILE\"\n\teval $CMD\n\n\t# -----------------------------------------------------------------------------\n\t# Check if we ran out of space\n\t# -----------------------------------------------------------------------------\n\n\tNO_SPACE_LEFT=\"$(grep \"No space left on device (28)\\|Result too large (34)\" \"$LOG_FILE\")\"\n\n\tif [ -n \"$NO_SPACE_LEFT\" ]; then\n\n\t\tif [[ $AUTO_EXPIRE == \"0\" ]]; then\n\t\t\tfn_log_error \"No space left on device, and automatic purging of old backups is disabled.\"\n\t\t\texit 1\n\t\tfi\n\n\t\tfn_log_warn \"No space left on device - removing oldest backup and resuming.\"\n\n\t\tif [[ \"$(fn_find_backups | wc -l)\" -lt \"2\" ]]; then\n\t\t\tfn_log_error \"No space left on device, and no old backup to delete.\"\n\t\t\texit 1\n\t\tfi\n\n\t\tfn_expire_backup \"$(fn_find_backups | tail -n 1)\"\n\n\t\t# Resume backup\n\t\tcontinue\n\tfi\n\n\t# -----------------------------------------------------------------------------\n\t# Check whether rsync reported any errors\n\t# -----------------------------------------------------------------------------\n\n\tEXIT_CODE=\"1\"\n\tif [ -n \"$(grep \"rsync error:\" \"$LOG_FILE\")\" ]; then\n\t\tfn_log_error \"Rsync reported an error. Run this command for more details: grep -E 'rsync:|rsync error:' '$LOG_FILE'\"\n\telif [ -n \"$(grep \"rsync:\" \"$LOG_FILE\")\" ]; then\n\t\tfn_log_warn \"Rsync reported a warning. Run this command for more details: grep -E 'rsync:|rsync error:' '$LOG_FILE'\"\n\telse\n\t\tfn_log_info \"Backup completed without errors.\"\n\t\tif [[ $AUTO_DELETE_LOG == \"1\" ]]; then\n\t\t\trm -f -- \"$LOG_FILE\"\n\t\tfi\n\t\tEXIT_CODE=\"0\"\n\tfi\n\n\t# -----------------------------------------------------------------------------\n\t# Add symlink to last backup\n\t# -----------------------------------------------------------------------------\n\tif [ \"$EXIT_CODE\" = 0 ]; then\n\t\t# Create the latest symlink only when rsync succeeded\n\t\tfn_rm_file \"$DEST_FOLDER/latest\"\n\t\tfn_ln \"$(basename -- \"$DEST\")\" \"$DEST_FOLDER/latest\"\n\n\t\t# Remove .inprogress file only when rsync succeeded\n\t\tfn_rm_file \"$INPROGRESS_FILE\"\n\tfi\n\n\texit $EXIT_CODE\ndone\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}