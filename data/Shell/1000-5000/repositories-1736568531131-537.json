{
  "metadata": {
    "timestamp": 1736568531131,
    "page": 537,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "message-db/message-db",
      "stars": 1627,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0419921875,
          "content": ".DS_store\n.bundle/\nGemfile.lock\n*.gem\ngems\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 3.501953125,
          "content": "# Changes\n\n## 1.3.0\n\nWed Oct 12 2022\n\nThis version requires the use of an update script for existing installations. For instructions, see:\n\n[https://github.com/message-db/message-db/blob/master/database/update/1.3.0.md](https://github.com/message-db/message-db/blob/master/database/update/1.3.0.md)\n\n- The `get_last_stream_message` function can receive an optional `type` argument that constrains the result to the last message of a stream of a specified message type (see: [http://docs.eventide-project.org/user-guide/message-db/server-functions.html#get-last-message-from-a-stream](http://docs.eventide-project.org/user-guide/message-db/server-functions.html#get-last-message-from-a-stream))\n- The database installation scripts terminate on error, rather than proceeding with the rest of the installation when a script error occurs\n\n## 1.2.6\n\nSat Mar 13 2021\n\n- The `uninstall.sh` script quotes the database name when dropping it, allowing database names that contain dashes\n\n## 1.2.5\n\nFri Mar 12 2021\n\n- The `print-messages.sh` script sorts messages explicitly by `global_position`\n\n## 1.2.4\n\nSun Mar 7 2021\n\n- The `messages` tables columns are ordered for more efficient physical storage allocation.\n\nThis version should not be considered an update to an existing database. It requires a new installation of the database, and therefore its advantages will only apply to new databases.\n\n## 1.2.3\n\nFri May 15 2020\n\n- The `md5` function is no longer granted privileges for the message_store user as the function is built-in and the grant is superfluous\n\n## 1.2.2\n\nMon May 4 2020\n\nThis version requires the use of an update script for existing installations. For instructions, see:\n\n[https://github.com/message-db/message-db/blob/master/database/update/1.2.2.md](https://github.com/message-db/message-db/blob/master/database/update/1.2.2.md)\n\n- The `get_category_messages` server function will return the entire, unlimited extent of messages in a category if -1 is sent as the `batch_size` argument\n- The `get_stream_messages` server function will return the entire, unlimited extent of messages in a stream if -1 is sent as the `batch_size` argument\n\n## 1.2.1\n\nThu Apr 30 2020\n\n- The `DROP OWNED BY message_store` statement is removed from the uninstall script. The use of `DROP OWNED BY` is prohibited on AWS RDS. And ultimately, it's superfluous because no database objects are owned by the message_store role.\n\n## 1.2.0\n\nMon Apr 27 2020\n\n- Install script will not create the database when the CREATE_DATABASE environment variable is set to \"off\"\n\n## 1.1.6\n\nMon Jan 6 2020\n\n- Install and uninstall scripts explicitly connect to the postgres database when running the psql utility, and do not depend on the existence of a user database\n\n## 1.1.5\n\nFri Dec 20 2019\n\n- Changes applied to a pre-v1 message store are documented in database/update/1.0.0.md\n- The v1 update script prints out a link to the changes doc\n\n## 1.1.4\n\nFri Dec 20 2019\n\n- The update script is deprecated in preparation of versioned update scripts\n- Update scripts are located in database/updates\n- The update code for the v1.0.0 database is moved to database/updates/1.0.0.sh\n\n## 1.1.3\n\nFri Dec 20 2019\n\n- The update script is corrected for its referencing of the gen_random_uuid from the message_store schema\n\n## 1.1.2\n\nThu Dec 19 2019\n\n- The pgcrypto extension is not installed into the message_store schema\n\n## 1.1.1\n\nWed Dec 18 2019\n\n- Vestigial debug output is removed from write_message\n\n## 1.1.0\n\nWed Dec 11 2019\n\n- The message_store role does not own the schema\n\n# 1.0.0\n\nTue Dec 10 2019\n\n- Initial release\n"
        },
        {
          "name": "MIT-License.txt",
          "type": "blob",
          "size": 1.041015625,
          "content": "Copyright (c) 2015-present Scott Bellware\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.8193359375,
          "content": "![Message DB](http://docs.eventide-project.org/message-db-logo-90x105.png)\n\n# Message DB\n\n**Microservice Native Event Store and Message Store for Postgres**\n\nA fully-featured event store and message store implemented in PostgreSQL for Pub/Sub, Event Sourcing, Messaging, and Evented Microservices applications.\n\n## Features\n\n- Pub/Sub\n- JSON message data\n- Event streams\n- Stream categories\n- Metadata\n- Message queues\n- Message storage\n- Consumer groups\n- Service host\n- Administration tools\n- Reports\n\n## Rationale\n\nAn event sourcing and Pub/Sub message store built on Postgres for simple cloud or local hosting. A minimalist implementation of the essential features of tools like [Event Store](https://eventstore.org) or [Kafka](https://kafka.apache.org), with built-in support for messaging patterns like Pub/Sub, and consumer patterns like consumer groups.\n\nMessage DB was extracted from the [Eventide Project](http://docs.eventide-project.org) to make it easier for users to write clients in the language of their choosing.\n\n## User Guide\n\nA complete user guide is available on the Eventide Project docs site:\n\n[http://docs.eventide-project.org/user-guide/message-db/](http://docs.eventide-project.org/user-guide/message-db/)\n\n## Installation\n\nMessage DB can be installed either as a Ruby Gem, an NPM package, or can simply be cloned from this repository.\n\n### Git Clone\n\n``` bash\ngit clone git@github.com:message-db/message-db.git\n```\n\n### As a Ruby Gem\n\n``` bash\ngem install message-db\n```\n\n### As an NPM Module\n\n``` bash\nnpm install @eventide/message-db\n```\n\n## Create the Postgres Database\n\nRunning the database installation script creates the database, schema, table, indexes, functions, views, types, a user role, and limit the user's privileges to the message store's public interface.\n\n### Requirements\n\nMake sure that your default Postgres user has administrative privileges.\n\n### From the Git Clone\n\nThe installation script is in the `database` directory of the cloned repo. Change directory to the `message-db` directory where you cloned the repo, and run the script:\n\n``` bash\ndatabase/install.sh\n```\n\n### From the Ruby Executable\n\nIf you installed Message DB via RubyGems, a database installation Ruby executable will be installed with the `message-db` gem.\n\nThe executable will be in the gem executable search path and may also be executed through bundler:\n\n``` bash\nbundle exec mdb-create-db\n```\n\nFor more information about Ruby executables installed with the `message-db` Ruby Gem, see the Eventide docs on the administration tools that are bundled with the gem:\n\n[http://docs.eventide-project.org/user-guide/message-db/tools.html](http://docs.eventide-project.org/user-guide/message-db/tools.html)\n\n### From the NPM Module\n\nThe `message-db` NPM module doesn't ship with any special tooling other than the bundled scripts.\n\nTo execute the installation script, navigate to the directory where the `message-db` module is installed and run the script:\n\n``` bash\ninstall.sh\n```\n\n### Database Name\n\nBy default, the database creation tool will create a database named `message_store`.\n\nIf you prefer either a different database name, you can override the name using the `DATABASE_NAME` environment variable.\n\n``` bash\nDATABASE_NAME=some_other_database database/install.sh\n```\n\n### Uninstalling the Database\n\nIf you need to drop the database (for example, on a local dev machine):\n\n``` bash\ndatabase/uninstall.sh\n```\n\nIf you're upgrading a previous version of the database:\n\n``` bash\ndatabase/update.sh\n```\n\n## API Overview\n\nThe message store provides an interface of Postgres server functions that can be used with any programming language or through the `psql` command line tool.\n\nInteraction with the underlying store through the Postgres server functions ensures correct writing and reading messages, streams, and categories.\n\n### Write a Message\n\nWrite a JSON-formatted message to a named stream, optionally specifying JSON-formatted metadata and an expected version number.\n\n``` sql\nwrite_message(\n  id varchar,\n  stream_name varchar,\n  type varchar,\n  data jsonb,\n  metadata jsonb DEFAULT NULL,\n  expected_version bigint DEFAULT NULL\n)\n```\n\n#### Returns\n\nPosition of the message written.\n\n#### Arguments\n\n| Name | Description | Type | Default | Example |\n| --- | --- | --- | --- | --- |\n| id | UUID of the message being written | varchar | | a5eb2a97-84d9-4ccf-8a56-7160338b11e2 |\n| stream_name | Name of stream to which the message is written | varchar | | someStream-123 |\n| type | The type of the message | varchar | | Withdrawn |\n| data | JSON representation of the message body | jsonb | | {\"someAttribute\": \"some value\"} |\n| metadata (optional) | JSON representation of the message metadata | jsonb | NULL | {\"metadataAttribute\": \"some meta data value\"} |\n| expected_version (optional) | Version that the stream is expected to be when the message is written | bigint | NULL | 11 |\n\n#### Usage\n\n``` sql\nSELECT write_message('a11e9022-e741-4450-bf9c-c4cc5ddb6ea3', 'someStream-123', 'SomeMessageType', '{\"someAttribute\": \"some value\"}', '{\"metadataAttribute\": \"some meta data value\"}');\n```\n\n```\n-[ RECORD 1 ]-+--\nwrite_message | 0\n```\n\nExample: [https://github.com/message-db/message-db/blob/master/database/write-test-message.sh](https://github.com/message-db/message-db/blob/master/database/write-test-message.sh)\n\n### Get Messages from a Stream\n\nRetrieve messages from a single stream, optionally specifying the starting position, the number of messages to retrieve, and an additional condition that will be appended to the SQL command's WHERE clause.\n\n``` sql\nget_stream_messages(\n  stream_name varchar,\n  position bigint DEFAULT 0,\n  batch_size bigint DEFAULT 1000,\n  condition varchar DEFAULT NULL\n)\n```\n\n#### Arguments\n\n| Name | Description | Type | Default | Example |\n| --- | --- | --- | --- | --- |\n| stream_name | Name of stream to retrieve messages from | varchar | | someStream-123 |\n| position (optional) | Starting position of the messages to retrieve | bigint | 0 | 11 |\n| batch_size (optional) | Number of messages to retrieve | bigint | 1000 | 111 |\n| condition (optional) | SQL condition to filter the batch by | varchar | NULL | messages.time >= current_time |\n\n#### Usage\n\n``` sql\nSELECT * FROM get_stream_messages('someStream-123', 0, 1000, condition => 'messages.time >= current_time');\n```\n\n```\n-[ RECORD 1 ]---+---------------------------------------------------------\nid              | 4b96f09e-104a-4b1f-b198-5b3b46cf1d06\nstream_name     | someStream-123\ntype            | SomeType\nposition        | 0\nglobal_position | 1\ndata            | {\"attribute\": \"some value\"}\nmetadata        | {\"metaAttribute\": \"some meta value\"}\ntime            | 2019-11-24 17:56:09.71594\n-[ RECORD 2 ]---+---------------------------------------------------------\nid              | d94e79e3-cdda-49a3-9aad-ce5d70a5edd7\nstream_name     | someStream-123\ntype            | SomeType\nposition        | 1\nglobal_position | 2\ndata            | {\"attribute\": \"some value\"}\nmetadata        | {\"metaAttribute\": \"some meta value\"}\ntime            | 2019-11-24 17:56:09.75969\n```\n\nExample: [https://github.com/message-db/message-db/blob/master/test/get-stream-messages/get-stream-messages.sh](https://github.com/message-db/message-db/blob/master/test/get-stream-messages/get-stream-messages.sh)\n\n### Get Messages from a Category\n\nRetrieve messages from a category of streams, optionally specifying the starting position, the number of messages to retrieve, the correlation category for Pub/Sub, consumer group parameters, and an additional condition that will be appended to the SQL command's WHERE clause.\n\n``` sql\nCREATE OR REPLACE FUNCTION get_category_messages(\n  category_name varchar,\n  position bigint DEFAULT 0,\n  batch_size bigint DEFAULT 1000,\n  correlation varchar DEFAULT NULL,\n  consumer_group_member bigint DEFAULT NULL,\n  consumer_group_size bigint DEFAULT NULL,\n  condition varchar DEFAULT NULL\n)\n```\n\n#### Arguments\n\n| Name | Description | Type | Default | Example |\n| --- | --- | --- | --- | --- |\n| category_name | Name of the category to retrieve messages from | varchar | | someCategory |\n| position (optional) | Global position to start retrieving messages from | bigint | 1 | 11 |\n| batch_size (optional) | Number of messages to retrieve | bigint | 1000 | 111 |\n| correlation (optional) | Category or stream name recorded in message metadata's `correlationStreamName` attribute to filter the batch by | varchar | NULL | someCorrelationCategory |\n| consumer_group_member (optional) | The zero-based member number of an individual consumer that is participating in a consumer group | bigint | NULL | 1 |\n| consumer_group_size (optional) | The size of a group of consumers that are cooperatively processing a single category | bigint | NULL | 2 |\n| condition (optional) | SQL condition to filter the batch by | varchar | NULL | messages.time >= current_time |\n\n#### Usage\n\n``` sql\nSELECT * FROM get_category_messages('someCategory', 1, 1000, correlation => 'someCorrelationCategory', consumer_group_member => 1, consumer_group_size => 2, condition => 'messages.time >= current_time');\n```\n\n```\n-[ RECORD 1 ]---+---------------------------------------------------------\nid              | 28d8347f-677e-4738-b6b9-954f1b15463b\nstream_name     | someCategory-123\ntype            | SomeType\nposition        | 0\nglobal_position | 111\ndata            | {\"attribute\": \"some value\"}\nmetadata        | {\"correlationStreamName\": \"someCorrelationCategory-123\"}\ntime            | 2019-11-24 17:51:49.836341\n-[ RECORD 2 ]---+---------------------------------------------------------\nid              | 57894da7-680b-4483-825c-732dcf873e93\nstream_name     | someCategory-456\ntype            | SomeType\nposition        | 1\nglobal_position | 1111\ndata            | {\"attribute\": \"some value\"}\nmetadata        | {\"correlationStreamName\": \"someCorrelationCategory-123\"}\ntime            | 2019-11-24 17:51:49.879011\n```\n\nNote: Where `someStream-123` is a _stream name_, `someStream` is a _category_. Reading the `someStream` category retrieves messages from all streams whose names start with `someStream` and are followed by an ID, or where `someStream` is the whole stream name.\n\nExample: [https://github.com/message-db/message-db/blob/master/test/get-category-messages/get-category-messages.sh](https://github.com/message-db/message-db/blob/master/test/get-category-messages/get-category-messages.sh)\n\n### Full API Reference\n\n- [write_message](http://docs.eventide-project.org/user-guide/message-db/server-functions.html#write-a-message)\n- [get_stream_messages](http://docs.eventide-project.org/user-guide/message-db/server-functions.html#get-messages-from-a-stream)\n- [get_category_messages](http://docs.eventide-project.org/user-guide/message-db/server-functions.html#get-messages-from-a-category)\n- [get_last_stream_message](http://docs.eventide-project.org/user-guide/message-db/server-functions.html#get-last-message-from-a-stream)\n- [stream_version](http://docs.eventide-project.org/user-guide/message-db/server-functions.html#get-stream-version-from-a-stream)\n- [id](http://docs.eventide-project.org/user-guide/message-db/server-functions.html#get-the-id-from-a-stream-name)\n- [cardinal_id](http://docs.eventide-project.org/user-guide/message-db/server-functions.html#get-the-cardinal-id-from-a-stream-name)\n- [category](http://docs.eventide-project.org/user-guide/message-db/server-functions.html#get-the-category-from-a-stream-name)\n- [is_category](http://docs.eventide-project.org/user-guide/message-db/server-functions.html#determine-whether-a-stream-name-is-a-category)\n- [acquire_lock](http://docs.eventide-project.org/user-guide/message-db/server-functions.html#acquire-a-lock-for-a-stream-name)\n- [hash_64](http://docs.eventide-project.org/user-guide/message-db/server-functions.html#calculate-a-64-bit-hash-for-a-stream-name)\n- [message_store_version](http://docs.eventide-project.org/user-guide/message-db/server-functions.html#get-message-store-database-schema-version)\n\n## Structure\n\nThe message store is a single table named `messages`.\n\n## Messages Table\n\n| Column | Description | Type | Default | Nullable |\n| --- | --- | --- | --- | --- |\n| id | Identifier of a message record | UUID | gen_random_uuid() | No |\n| stream_name | Name of stream to which the message belongs | varchar | | No |\n| type | The type of the message | varchar | | No |\n| position | The ordinal position of the message in its stream. Position is gapless. | bigint | | No |\n| global_position | Primary key. The ordinal position of the message in the entire message store. Global position may have gaps. | bigint | | No |\n| data | Message payload | jsonb | NULL | Yes |\n| metadata | Message metadata | jsonb | NULL | Yes |\n| time | Timestamp when the message was written. The timestamp does not include a time zone. | timestamp | now() AT TIME ZONE 'utc' | No |\n\n## Indexes\n\n| Name | Columns | Unique | Note |\n| --- | --- | --- | --- |\n| messages_id | id | Yes | Enforce uniqueness as secondary key |\n| messages_stream | stream_name, position | Yes | Ensures uniqueness of position number in a stream |\n| messages_category | category(stream_name), global_position, category(metadata->>'correlationStreamName') | No | Used when retrieving by category name |\n\n## Database\n\nBy default, the message store database is named `message_store`.\n\n## Schema\n\nAll message store database objects are contained within a schema named `message_store`.\n\n## User/Role\n\nA role named `message_store` is created. The `message_store` role is given the `LOGIN` attribute, but no password is assigned. A password [can be assigned to the role](https://www.postgresql.org/docs/current/sql-alterrole.html), or the `message_store` role can be [granted to another Postgres user](https://www.postgresql.org/docs/current/role-membership.html).\n\n## Source Code\n\nView complete source code at:\n\n[https://github.com/message-db/message-db/tree/master/database](https://github.com/message-db/message-db/tree/master/database)\n\n## License\n\nThe Postgres Message Store is released under the [MIT License](https://github.com/message-db/message-db/blob/master/MIT-License.txt).\n\n"
        },
        {
          "name": "database",
          "type": "tree",
          "content": null
        },
        {
          "name": "recreate-database.sh",
          "type": "blob",
          "size": 0.0615234375,
          "content": "#!/usr/bin/env bash\n\ndatabase/uninstall.sh\ndatabase/install.sh\n"
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 2.3310546875,
          "content": "#!/usr/bin/env bash\n\nset -e\n\ntest/hash-64.sh\n\ntest/category/stream-name.sh\ntest/category/category.sh\n\ntest/is_category/category.sh\ntest/is_category/stream-name.sh\n\ntest/id/stream-name.sh\ntest/id/category.sh\ntest/id/compound-id/stream-name.sh\n\ntest/cardinal-id/stream-name-with-compound-id.sh\ntest/cardinal-id/stream-name-with-single-id.sh\ntest/cardinal-id/category.sh\n\ntest/write-message/write-message.sh\ntest/write-message/expected-version.sh\ntest/write-message/expected-version-error.sh\n\ntest/get-stream-messages/get-stream-messages.sh\ntest/get-stream-messages/error-not-stream-name.sh\n\ntest/get-stream-messages/batch_size/limited.sh\ntest/get-stream-messages/batch_size/unlimited.sh\n\ntest/get-stream-messages/condition/condition.sh\ntest/get-stream-messages/condition/error-deactivated.sh\ntest/get-stream-messages/condition/error-not-activated.sh\n\ntest/get-category-messages/get-category-messages.sh\ntest/get-category-messages/error-not-category.sh\n\ntest/get-category-messages/batch_size/limited.sh\ntest/get-category-messages/batch_size/unlimited.sh\n\ntest/get-category-messages/correlated/correlated.sh\ntest/get-category-messages/correlated/error-stream-name.sh\n\ntest/get-category-messages/consumer-group/consumer-group.sh\ntest/get-category-messages/consumer-group/correlated.sh\n\ntest/get-category-messages/consumer-group/error/missing-group-member.sh\ntest/get-category-messages/consumer-group/error/missing-group-size.sh\ntest/get-category-messages/consumer-group/error/group-member-equal-to-group-size.sh\ntest/get-category-messages/consumer-group/error/group-member-greater-than-group-size.sh\ntest/get-category-messages/consumer-group/error/group-member-too-small.sh\ntest/get-category-messages/consumer-group/error/group-size-too-small.sh\n\ntest/get-category-messages/condition/condition.sh\ntest/get-category-messages/condition/error-deactivated.sh\ntest/get-category-messages/condition/error-not-activated.sh\ntest/get-category-messages/condition/condition-correlated.sh\n\ntest/get-last-stream-message/get-last-stream-message.sh\ntest/get-last-stream-message/type.sh\n\ntest/stream-version/stream-version.sh\n\ntest/message-store-version.sh\n\ntest/reports/messages.sh\ntest/reports/stream-summary.sh\ntest/reports/type-summary.sh\ntest/reports/stream-type-summary.sh\ntest/reports/type-stream-summary.sh\ntest/reports/category-type-summary.sh\ntest/reports/type-category-summary.sh\n\necho \"Done\"\necho\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}