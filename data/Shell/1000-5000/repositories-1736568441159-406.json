{
  "metadata": {
    "timestamp": 1736568441159,
    "page": 406,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fideloper/Vaprobash",
      "stars": 1927,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0576171875,
          "content": ".DS_Store\nnotes.md\n.vagrant\nplay\n\n# editor backup files\n*~\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0419921875,
          "content": "language: bash\n\nscript:\n    - bash test.sh\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 12.33984375,
          "content": "# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# Config Github Settings\ngithub_username = \"fideloper\"\ngithub_repo     = \"Vaprobash\"\ngithub_branch   = \"1.4.2\"\ngithub_url      = \"https://raw.githubusercontent.com/#{github_username}/#{github_repo}/#{github_branch}\"\n\n# Because this:https://developer.github.com/changes/2014-12-08-removing-authorizations-token/\n# https://github.com/settings/tokens\ngithub_pat          = \"\"\n\n# Server Configuration\n\nhostname        = \"vaprobash.dev\"\n\n# Set a local private network IP address.\n# See http://en.wikipedia.org/wiki/Private_network for explanation\n# You can use the following IP ranges:\n#   10.0.0.1    - 10.255.255.254\n#   172.16.0.1  - 172.31.255.254\n#   192.168.0.1 - 192.168.255.254\nserver_ip             = \"192.168.22.10\"\nserver_cpus           = \"1\"   # Cores\nserver_memory         = \"384\" # MB\nserver_swap           = \"768\" # Options: false | int (MB) - Guideline: Between one or two times the server_memory\n\n# UTC        for Universal Coordinated Time\n# EST        for Eastern Standard Time\n# CET        for Central European Time\n# US/Central for American Central\n# US/Eastern for American Eastern\nserver_timezone  = \"UTC\"\n\n# Database Configuration\nmysql_root_password   = \"root\"   # We'll assume user \"root\"\nmysql_version         = \"5.5\"    # Options: 5.5 | 5.6\nmysql_enable_remote   = \"false\"  # remote access enabled when true\npgsql_root_password   = \"root\"   # We'll assume user \"root\"\nmongo_version         = \"2.6\"    # Options: 2.6 | 3.0\nmongo_enable_remote   = \"false\"  # remote access enabled when true\n\n# Languages and Packages\nphp_timezone          = \"UTC\"    # http://php.net/manual/en/timezones.php\nphp_version           = \"5.6\"    # Options: 5.5 | 5.6 | 7.0 | 7.1\nruby_version          = \"latest\" # Choose what ruby version should be installed (will also be the default version)\nruby_gems             = [        # List any Ruby Gems that you want to install\n  #\"jekyll\",\n  #\"sass\",\n  #\"compass\",\n]\n\ngo_version            = \"latest\" # Example: go1.4 (latest equals the latest stable version)\n\n# To install HHVM instead of PHP, set this to \"true\"\nhhvm                  = \"false\"\n\n# PHP Options\ncomposer_packages     = [        # List any global Composer packages that you want to install\n  #\"phpunit/phpunit:4.0.*\",\n  #\"codeception/codeception=*\",\n  #\"phpspec/phpspec:2.0.*@dev\",\n  #\"squizlabs/php_codesniffer:1.5.*\",\n]\n\n# Default web server document root\n# Symfony's public directory is assumed \"web\"\n# Laravel's public directory is assumed \"public\"\npublic_folder         = \"/vagrant\"\n\nlaravel_root_folder   = \"/vagrant/laravel\" # Where to install Laravel. Will `composer install` if a composer.json file exists\nlaravel_version       = \"latest-stable\" # If you need a specific version of Laravel, set it here\nsymfony_root_folder   = \"/vagrant/symfony\" # Where to install Symfony.\n\nnodejs_version        = \"latest\"   # By default \"latest\" will equal the latest stable version\nnodejs_packages       = [          # List any global NodeJS packages that you want to install\n  #\"grunt-cli\",\n  #\"gulp\",\n  #\"bower\",\n  #\"yo\",\n]\n\n# RabbitMQ settings\nrabbitmq_user = \"user\"\nrabbitmq_password = \"password\"\n\nsphinxsearch_version  = \"rel22\" # rel20, rel21, rel22, beta, daily, stable\n\nelasticsearch_version = \"2.3.1\" # 5.0.0-alpha1, 2.3.1, 2.2.2, 2.1.2, 1.7.5\n\nVagrant.configure(\"2\") do |config|\n\n  # Set server to Ubuntu 14.04\n  config.vm.box = \"ubuntu/trusty64\"\n\n  config.vm.define \"Vaprobash\" do |vapro|\n  end\n\n  if Vagrant.has_plugin?(\"vagrant-hostmanager\")\n    config.hostmanager.enabled = true\n    config.hostmanager.manage_host = true\n    config.hostmanager.ignore_private_ip = false\n    config.hostmanager.include_offline = false\n  end\n\n  # Create a hostname, don't forget to put it to the `hosts` file\n  # This will point to the server's default virtual host\n  # TO DO: Make this work with virtualhost along-side xip.io URL\n  config.vm.hostname = hostname\n\n  # Create a static IP\n  if Vagrant.has_plugin?(\"vagrant-auto_network\")\n    config.vm.network :private_network, :ip => \"0.0.0.0\", :auto_network => true\n  else\n    config.vm.network :private_network, ip: server_ip\n    config.vm.network :forwarded_port, guest: 80, host: 8000\n  end\n\n  # Enable agent forwarding over SSH connections\n  config.ssh.forward_agent = true\n\n  # Use NFS for the shared folder\n  config.vm.synced_folder \".\", \"/vagrant\",\n    id: \"core\",\n    :nfs => true,\n    :mount_options => ['nolock,vers=3,udp,noatime,actimeo=2,fsc']\n\n  # Replicate local .gitconfig file if it exists\n  if File.file?(File.expand_path(\"~/.gitconfig\"))\n    config.vm.provision \"file\", source: \"~/.gitconfig\", destination: \".gitconfig\"\n  end\n\n  # If using VirtualBox\n  config.vm.provider :virtualbox do |vb|\n\n    vb.name = hostname\n\n    # Set server cpus\n    vb.customize [\"modifyvm\", :id, \"--cpus\", server_cpus]\n\n    # Set server memory\n    vb.customize [\"modifyvm\", :id, \"--memory\", server_memory]\n\n    # Set the timesync threshold to 10 seconds, instead of the default 20 minutes.\n    # If the clock gets more than 15 minutes out of sync (due to your laptop going\n    # to sleep for instance, then some 3rd party services will reject requests.\n    vb.customize [\"guestproperty\", \"set\", :id, \"/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold\", 10000]\n\n    # Prevent VMs running on Ubuntu to lose internet connection\n    # vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n    # vb.customize [\"modifyvm\", :id, \"--natdnsproxy1\", \"on\"]\n\n  end\n\n  # If using VMWare Fusion\n  config.vm.provider \"vmware_fusion\" do |vb, override|\n    override.vm.box_url = \"http://files.vagrantup.com/precise64_vmware.box\"\n\n    # Set server memory\n    vb.vmx[\"memsize\"] = server_memory\n\n  end\n\n  # If using Vagrant-Cachier\n  # http://fgrehm.viewdocs.io/vagrant-cachier\n  if Vagrant.has_plugin?(\"vagrant-cachier\")\n    # Configure cached packages to be shared between instances of the same base box.\n    # Usage docs: http://fgrehm.viewdocs.io/vagrant-cachier/usage\n    config.cache.scope = :box\n\n    config.cache.synced_folder_opts = {\n        type: :nfs,\n        mount_options: ['rw', 'vers=3', 'tcp', 'nolock']\n    }\n  end\n\n  # Adding vagrant-digitalocean provider - https://github.com/smdahlen/vagrant-digitalocean\n  # Needs to ensure that the vagrant plugin is installed\n  config.vm.provider :digital_ocean do |provider, override|\n    override.ssh.private_key_path = '~/.ssh/id_rsa'\n    override.ssh.username = 'vagrant'\n    override.vm.box = 'digital_ocean'\n    override.vm.box_url = \"https://github.com/smdahlen/vagrant-digitalocean/raw/master/box/digital_ocean.box\"\n\n    provider.token = 'YOUR TOKEN'\n    provider.image = 'ubuntu-14-04-x64'\n    provider.region = 'nyc2'\n    provider.size = '512mb'\n  end\n\n  ####\n  # Base Items\n  ##########\n\n  # Provision Base Packages\n  config.vm.provision \"shell\", path: \"#{github_url}/scripts/base.sh\", args: [github_url, server_swap, server_timezone]\n\n  # optimize base box\n  config.vm.provision \"shell\", path: \"#{github_url}/scripts/base_box_optimizations.sh\", privileged: true\n\n  # Provision PHP\n  config.vm.provision \"shell\", path: \"#{github_url}/scripts/php.sh\", args: [php_timezone, hhvm, php_version]\n\n  # Enable MSSQL for PHP\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/mssql.sh\"\n\n  # Provision Vim\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/vim.sh\", args: github_url\n\n  # Provision Docker\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/docker.sh\", args: \"permissions\"\n\n  ####\n  # Web Servers\n  ##########\n\n  # Provision Apache Base\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/apache.sh\", args: [server_ip, public_folder, hostname, github_url]\n\n  # Provision Nginx Base\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/nginx.sh\", args: [server_ip, public_folder, hostname, github_url, php_version]\n\n\n  ####\n  # Databases\n  ##########\n\n  # Provision MySQL\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/mysql.sh\", args: [mysql_root_password, mysql_version, mysql_enable_remote]\n\n  # Provision PostgreSQL\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/pgsql.sh\", args: pgsql_root_password\n\n  # Provision SQLite\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/sqlite.sh\"\n\n  # Provision RethinkDB\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/rethinkdb.sh\", args: pgsql_root_password\n\n  # Provision Couchbase\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/couchbase.sh\", args: [php_version]\n\n  # Provision CouchDB\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/couchdb.sh\"\n\n  # Provision MongoDB\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/mongodb.sh\", args: [mongo_enable_remote, mongo_version]\n\n  # Provision MariaDB\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/mariadb.sh\", args: [mysql_root_password, mysql_enable_remote]\n\n  # Provision Neo4J\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/neo4j.sh\"\n\n  ####\n  # Search Servers\n  ##########\n\n  # Install Elasticsearch\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/elasticsearch.sh\", args: [elasticsearch_version]\n\n  # Install SphinxSearch\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/sphinxsearch.sh\", args: [sphinxsearch_version]\n\n  ####\n  # Search Server Administration (web-based)\n  ##########\n\n  # Install ElasticHQ\n  # Admin for: Elasticsearch\n  # Works on: Apache2, Nginx\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/elastichq.sh\"\n\n\n  ####\n  # In-Memory Stores\n  ##########\n\n  # Install Memcached\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/memcached.sh\"\n\n  # Provision Redis (without journaling and persistence)\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/redis.sh\"\n\n  # Provision Redis (with journaling and persistence)\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/redis.sh\", args: \"persistent\"\n  # NOTE: It is safe to run this to add persistence even if originally provisioned without persistence\n\n\n  ####\n  # Utility (queue)\n  ##########\n\n  # Install Beanstalkd\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/beanstalkd.sh\"\n\n  # Install Heroku Toolbelt\n  # config.vm.provision \"shell\", path: \"https://toolbelt.heroku.com/install-ubuntu.sh\"\n\n  # Install Supervisord\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/supervisord.sh\"\n\n  # Install Kibana\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/kibana.sh\"\n\n  # Install ØMQ\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/zeromq.sh\", args: [php_version]\n\n  # Install RabbitMQ\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/rabbitmq.sh\", args: [rabbitmq_user, rabbitmq_password]\n\n  ####\n  # Additional Languages\n  ##########\n\n  # Install Nodejs\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/nodejs.sh\", privileged: false, args: nodejs_packages.unshift(nodejs_version, github_url)\n\n  # Install Ruby Version Manager (RVM)\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/rvm.sh\", privileged: false, args: ruby_gems.unshift(ruby_version)\n\n  # Install Go Version Manager (GVM)\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/go.sh\", privileged: false, args: [go_version]\n\n  ####\n  # Frameworks and Tooling\n  ##########\n\n  # Provision Composer\n  # You may pass a github auth token as the first argument\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/composer.sh\", privileged: false, args: [github_pat, composer_packages.join(\" \")]\n\n  # Provision Laravel\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/laravel.sh\", privileged: false, args: [server_ip, laravel_root_folder, public_folder, laravel_version]\n\n  # Provision Symfony\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/symfony.sh\", privileged: false, args: [server_ip, symfony_root_folder, public_folder]\n\n  # Install Screen\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/screen.sh\"\n\n  # Install Mailcatcher\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/mailcatcher.sh\", args: [php_version]\n\n  # Install git-ftp\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/git-ftp.sh\", privileged: false\n\n  # Install Ansible\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/ansible.sh\"\n\n  # Install Android\n  # config.vm.provision \"shell\", path: \"#{github_url}/scripts/android.sh\"\n\n  ####\n  # Local Scripts\n  # Any local scripts you may want to run post-provisioning.\n  # Add these to the same directory as the Vagrantfile.\n  ##########\n  # config.vm.provision \"shell\", path: \"./local-script.sh\"\n\nend\n"
        },
        {
          "name": "contributing.md",
          "type": "blob",
          "size": 0.3330078125,
          "content": "# Contributing to Vaprobash\n\nPlease make pull requests to the **Master** branch.\n\nVaprobash now uses SemVer, so bug fixes/tweaks will create patch releases and new features will create minor releases.\n\nNote that this means that bug fixes and minor tweaks will likely get accepted before feature additions, however all PR's will be reviewed!\n"
        },
        {
          "name": "helpers",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 5.0419921875,
          "content": "# Vaprobash\n\n**Va**&#x200B;grant **Pro**&#x200B;visioning **Bash** Scripts\n\n[View the site and extended docs.](http://fideloper.github.io/Vaprobash/index.html)\n\n[![Build Status](https://travis-ci.org/fideloper/Vaprobash.png?branch=master)](https://travis-ci.org/fideloper/Vaprobash)\n\n## Goal\n\nThe goal of this project is to create easy to use bash scripts in order to provision a Vagrant server.\n\n1. This targets Ubuntu LTS releases, currently 14.04.*\n2. This project will give users various popular options such as LAMP, LEMP\n3. This project will attempt some modularity. For example, users might choose to install a Vim setup, or not.\n\nSome further assumptions and self-imposed restrictions. If you find yourself needing or wanting the following, then other provisioning tool would better suited ([Chef](http://www.getchef.com), [Puppet](http://puppetlabs.com), [Ansible](http://www.ansibleworks.com)).\n\n* If other OSes need to be used (CentOS, Redhat, Arch, etc).\n* If dependency management becomes complex. For example, installing Laravel depends on Composer. Setting a document root for a project will change depending on Nginx or Apache. Currently, these dependencies are accounted for, but more advanced dependencies will likely not be.\n\n## Dependencies\n\n* Vagrant `1.5.0`+\n    * Use `vagrant -v` to check your version\n* Vitualbox or VMWare Fusion\n\n## Instructions\n\n**First**, Copy the Vagrantfile from this repo. You may wish to use curl or wget to do this instead of cloning the repository.\n\n```bash\n# curl\n$ curl -L http://bit.ly/vaprobash > Vagrantfile\n\n# wget\n$ wget -O Vagrantfile http://bit.ly/vaprobash\n```\n\n> The `bit.ly` link will always point to the master branch version of the Vagrantfile.\n\n**Second**, edit the `Vagrantfile` and uncomment which scripts you'd like to run. You can uncomment them by removing the `#` character before the `config.vm.provision` line.\n\n> You can indeed have [multiple provisioning](http://docs.vagrantup.com/v2/provisioning/basic_usage.html) scripts when provisioning Vagrant.\n\n**Third** and finally, run:\n\n```bash\n$ vagrant up\n```\n\n**Screencast**\n\nHere's a quickstart screencast!\n\n[<img src=\"https://secure-b.vimeocdn.com/ts/463/341/463341369_960.jpg\" alt=\"Vaprobash Quickstart\" style=\"max-width:100%\"/>](http://vimeo.com/fideloper/vaprobash-quickstart)\n\n> <strong>Windows Users:</strong>\n>\n> By default, NFS won't work on Windows. I suggest deleting the NFS block so Vagrant defaults back to its default file sync behavior.\n>\n> However, you can also try the \"vagrant-winnfsd\" plugin. Just run `vagrant plugin install vagrant-winnfsd` to try it out!\n>\n> Vagrant version 1.5 will have [more file sharing options](https://www.vagrantup.com/blog/feature-preview-vagrant-1-5-rsync.html) to explore as well!\n\n## Docs\n\n[View the site and extended docs.](http://fideloper.github.io/Vaprobash/index.html)\n\n## What You Can Install\n\n* Base Packages\n\t* Base Items (Git and more!)\n\t* PHP (php-fpm)\n\t* Vim\n\t* PHP MsSQL (ability to connect to SQL Server)\n\t* Screen\n\t* Docker\n* Web Servers\n\t* Apache\n\t* HHVM\n\t* Nginx\n* Databases\n\t* Couchbase\n\t* CouchDB\n\t* MariaDB\n\t* MongoDB\n\t* MySQL\n\t* Neo4J\n\t* PostgreSQL\n\t* SQLite\n* In-Memory Stores\n\t* Memcached\n\t* Redis\n* Search\n\t* ElasticSearch and ElasticHQ\n* Utility\n\t* Beanstalkd\n\t* Supervisord\n    * Kibana\n* Additional Languages\n\t* NodeJS via NVM\n\t* Ruby via RVM\n* Frameworks / Tooling\n\t* Composer\n\t* Laravel\n\t* Symfony\n\t* PHPUnit\n\t* MailCatcher\n    * Ansible\n\t* Android\n\n## The Vagrantfile\n\nThe vagrant file does three things you should take note of:\n\n1. **Gives the virtual machine a static IP address of 192.168.22.10.** This IP address is again hard-coded (for now) into the LAMP, LEMP and Laravel/Symfony installers. This static IP allows us to use [xip.io](http://xip.io) for the virtual host setups while avoiding having to edit our computers' `hosts` file.\n2. **Uses NFS instead of the default file syncing.** NFS is reportedly faster than the default syncing for large files. If, however, you experience issues with the files actually syncing between your host and virtual machine, you can change this to the default syncing by deleting the lines setting up NFS:\n\n  ```ruby\n  config.vm.synced_folder \".\", \"/vagrant\",\n            id: \"core\",\n            :nfs => true,\n            :mount_options => ['nolock,vers=3,udp,noatime']\n  ```\n3. **Offers an option to prevent the virtual machine from losing internet connection when running on Ubuntu.** If your virtual machine can't access the internet, you can solve this problem by uncommenting the two lines below:\n\n  ```ruby\n    #vb.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n    #vb.customize [\"modifyvm\", :id, \"--natdnsproxy1\", \"on\"]\n  ```\n\n  Don't forget to reload your Vagrantfile running `vagrant reload --no-provision`, in case your virtual machine already exists.\n\n## Connecting to MySQL from Sequel Pro:\n\nChange your IP address as needed. The default IP address is now `192.168.22.10`\n\n![sequel pro vaprobash](http://fideloper.github.io/Vaprobash/img/sequel_pro.png)\n\n## Contribute!\n\nDo it! Any new install or improvement on existing ones are welcome! Please see the [contributing doc](/contributing.md).\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 0.0908203125,
          "content": "#! /usr/bin/env bash\n\nfor file in $(find ./scripts -name '*.sh'); do\n    bash -n $file\ndone\n\n"
        }
      ]
    }
  ]
}