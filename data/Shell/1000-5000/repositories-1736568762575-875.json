{
  "metadata": {
    "timestamp": 1736568762575,
    "page": 875,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "calogica/dbt-expectations",
      "stars": 1122,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.158203125,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 4\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{yml,yaml}]\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.111328125,
          "content": "\ntarget/\ndbt_packages/\nlogs/\n.python-version\nintegration_tests/.spark-warehouse\nintegration_tests/.hive-metastore\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 14.66015625,
          "content": "# dbt-expectations v0.10.4\n## New Features\n* Adds optional `step` param to expect_column_values_to_be_{in,de}creasing by @vitorbaptista in https://github.com/calogica/dbt-expectations/pull/316\n\n## Docs\n* Update README.md by @thomaslaber in https://github.com/calogica/dbt-expectations/pull/303\n* \"Expect\" instead of \"Except\" by @dbeatty10 in https://github.com/calogica/dbt-expectations/pull/308\n\n## Fixes\n* Upgrade for dbt 1.8.x by @clausherther in https://github.com/calogica/dbt-expectations/pull/309\n\n# dbt-expectations v0.10.3\n## New Features\n* [CI] Uprade to dbt=1.7.x by @clausherther in https://github.com/calogica/dbt-expectations/pull/292\n* Add Trino Support by @damian3031 in https://github.com/calogica/dbt-expectations/pull/294\n* Add Trino md5 macro by @clausherther in https://github.com/calogica/dbt-expectations/pull/301\n  \n# dbt-expectations v0.10.2\n## Fixes\n* Update Test Expecting Select Column Values To Be Unique Within Record by @bkimjin in https://github.com/calogica/dbt-expectations/pull/300\n\n# dbt-expectations v0.10.1\n## Fixes\n* Fix sum_total in expect_multicolumn_sum_to_equal to accept column names by @VDFaller in https://github.com/calogica/dbt-expectations/pull/291\n\n# dbt-expectations v0.10.0\n\n## New Features\n* Added experimental spark support by @clausherther in https://github.com/calogica/dbt-expectations/pull/279\n* Changed upper range of dbt-date version dependency by @clausherther in https://github.com/calogica/dbt-expectations/pull/286\n\n# dbt-expectations v0.9.0\n\n## New Features\n* Add count to expect_compound_columns_to_be_unique by @VDFaller in https://github.com/calogica/dbt-expectations/pull/261\n* Add duckdb support by @clausherther in https://github.com/calogica/dbt-expectations/pull/271\n\n## Docs\n* Update README.md by @mbkupfer in https://github.com/calogica/dbt-expectations/pull/268\n\n# dbt-expectations v0.8.5\n\n## New Features\n\n* Add support for regex flags for BigQuery by @lookslikeitsnot in https://github.com/calogica/dbt-expectations/pull/253\n\n# dbt-expectations v0.8.4\n\n## Fixes\n* escape quotes in `expect_column_values_to_be_in_type_list` by @RobbertDM in https://github.com/calogica/dbt-expectations/pull/251\n* Fix `postgres__regexp_instr` not validating regex #249 by @lookslikeitsnot in https://github.com/calogica/dbt-expectations/pull/250\n\n## Under The Hood\n* added negative tests for regex email test to make sure those tests are failing when they should\n\n# dbt-expectations v0.8.3\n\n## New Features\n* Add optional flags argument to regex tests by @tconbeer in https://github.com/calogica/dbt-expectations/pull/247\n\n## Docs\n* Update docs site by @clausherther in https://github.com/calogica/dbt-expectations/pull/235\n\n## Under The Hood\n* Add explicit reference to dbt.length() by @clausherther in https://github.com/calogica/dbt-expectations/pull/234\n* Disabling SQLFluff by @clausherther in https://github.com/calogica/dbt-expectations/pull/242\n\n# dbt-expectations v0.8.2\n\n## Fixes\n* Fix dangling datediff reference by @clausherther in https://github.com/calogica/dbt-expectations/pull/233\n\n# dbt-expectations v0.8.1\n\n## Fixes\n* Make type macro calls fully qualified by @clausherther in https://github.com/calogica/dbt-expectations/pull/232\n* Clean up quote values defaults by @clausherther in https://github.com/calogica/dbt-expectations/pull/231\n\n## Documentation\n* Fix indentation of examples by @clausherther in https://github.com/calogica/dbt-expectations/pull/219\n* Update README by @clausherther in https://github.com/calogica/dbt-expectations/pull/220\n* Update logo paths by @clausherther in https://github.com/calogica/dbt-expectations/pull/221\n\n## Additions\n* Add expect_table_aggregation_to_equal_other_table by @clausherther in https://github.com/calogica/dbt-expectations/pull/224\n* Adds group by to expect_table_row_count_to_equal_other_table by @clausherther in https://github.com/calogica/dbt-expectations/pull/225\n\n# dbt-expectations v0.8.0\n\n## Breaking Changes\nNOTE: including this package in your project will no longer auto-include `dbt-utils`!\n* Remove references to dbt_utils by @clausherther in https://github.com/calogica/dbt-expectations/pull/217\n\n# dbt-expectations v0.7.0\n\n## Breaking Changes\n* Fix boolean logic in `expect_compound_columns_to_be_unique` `ignore_row_if`  by @clausherther in https://github.com/calogica/dbt-expectations/pull/202\n  * Fixed issue https://github.com/calogica/dbt-expectations/issues/200 raised by @mcannamela\n* Refactor ignore_row_if logic by @clausherther in https://github.com/calogica/dbt-expectations/pull/204\n\n## Under The Hood\n* Add SQL Fluff support by @clausherther in https://github.com/calogica/dbt-expectations/pull/198\n\n# dbt-expectations v0.6.1\n\n## New Features\n* Add expect_column_distinct_count_to_be_less_than.sql by @dylanrigal in https://github.com/calogica/dbt-expectations/pull/193\n* Add group_by option to expect_column_values_to_be_within_n_moving_stdevs by @clausherther in https://github.com/calogica/dbt-expectations/pull/182\n\n## Fixes\n* Add option to escape raw strings in RegEx functions by @clausherther in https://github.com/calogica/dbt-expectations/pull/191\n\n## New Contributors\n* @dylanrigal made their first contribution in https://github.com/calogica/dbt-expectations/pull/193\n\n# dbt-expectations v0.6.0\n\n## Breaking Changes\n* Requires dbt 1.2.x (via https://github.com/calogica/dbt-expectations/pull/189)\n* Migrate to dbt-utils 0.9.0 and dbt-date 0.6.0 by @clausherther in https://github.com/calogica/dbt-expectations/pull/189\n\n# dbt-expectations v0.5.8\n\n## Fixes\n* Fixed timestamp comparisons in expect_grouped_row_values_to_have_recent_data by @clausherther in https://github.com/calogica/dbt-expectations/pull/179\n\n# dbt-expectations v0.5.7\n\n## Documentation\n* Add example for dynamic date params in expect_row_values_to_have_data_for_every_n_datepart by @clausherther in https://github.com/calogica/dbt-expectations/pull/174\n\n## Fixes\n* Fix take_diff syntax in moving stddev test by @karanhegde in https://github.com/calogica/dbt-expectations/pull/178\n\n# dbt-expectations v0.5.6\n\n**Patch Release**\n\n## Fixes\n* Fix `expect_compound_columns_to_be_unique` to properly handle `ignore_row_if` by @clausherther in https://github.com/calogica/dbt-expectations/pull/171\n\n\n# dbt-expectations v0.5.5\n\n## New Features\n* Add automated integration testing with CircleCI in https://github.com/calogica/dbt-expectations/pull/161\n* Show `group_by` columns in validation errors for column increasing test by @dluftspring in https://github.com/calogica/dbt-expectations/pull/158\n* Add `exclusion_condition` to `expect_row_values_to_have_data_for_every_n_datepart` by @gofford in https://github.com/calogica/dbt-expectations/pull/141\n\n## Fixes\n* Set flakey integration tests to `warn` in https://github.com/calogica/dbt-expectations/pull/162\n\n\n# dbt-expectations v0.5.4\n\n## New Features\n* Adds test for column presence by @rcaddell in https://github.com/calogica/dbt-expectations/pull/149\n\n## Fixes\n* Fix emails.sql by @clausherther in https://github.com/calogica/dbt-expectations/pull/153\n* Fix expect_row_values_to_have_recent_data issues on bigquery by @clausherther in https://github.com/calogica/dbt-expectations/pull/147\n\n## New Contributors\n* @rcaddell made their first contribution in https://github.com/calogica/dbt-expectations/pull/149\n\n# dbt-expectations v0.5.3\n\n## New Features\n* Add `group_by` parameter to `expect_column_values_to_be_increasing` and `expect_column_values_to_be_decreasing` ([#146](https://github.com/calogica/dbt-expectations/pull/146) @Lucasthenoob)\n\n\n# dbt-expectations v0.5.2\n\n## Fixes\n* Fix `expect_row_values_to_have_recent_data` to use current timestamp by @MrJoosh in https://github.com/calogica/dbt-expectations/pull/145 (also fixes https://github.com/calogica/dbt-expectations/issues/104)\n\n## New Features\n* Add new `expect_column_values_to_have_consistent_casing` test by @agusfigueroa-htg in https://github.com/calogica/dbt-expectations/pull/138\n\n## Doc Updates 💌\n* Update README.md by @kdw2126 in https://github.com/calogica/dbt-expectations/pull/134\n* Fix documentation to note DBT 1.0.0 compatibility by @kdw2126 in https://github.com/calogica/dbt-expectations/pull/136\n\n## New Contributors\n* @kdw2126 made their first contribution in https://github.com/calogica/dbt-expectations/pull/134\n* @agusfigueroa-htg made their first contribution in https://github.com/calogica/dbt-expectations/pull/138\n* @MrJoosh made their first contribution in https://github.com/calogica/dbt-expectations/pull/145\n\n\n# dbt-expectations v0.5.1\n\n## Fixes\n* Add better support for Redshift by typing implicit `varchar` fields explicitly to strings. ([#131](https://github.com/calogica/dbt-expectations/pull/131) [#132](https://github.com/calogica/dbt-expectations/pull/132))\n\n\n# dbt-expectations v0.5.0\n* adds full support for dbt 1.x without backwards compatability\n* supports `dbt-date 0.5.0`, which supports `dbt-utils 0.8.0`\n\n# dbt-expectations v0.4.7\n* Patch: adds support for dbt 1.x\n\n# dbt-expectations v0.4.6\n\n## What's Changed\n* Append missing optional parameters documentation to README.md by @makotonium in https://github.com/calogica/dbt-expectations/pull/124\n* Fix missing group_by default value in string_matching macros by @samantha-guerriero-cko in https://github.com/calogica/dbt-expectations/pull/126\n\n## New Contributors\n* @makotonium made their first contribution in https://github.com/calogica/dbt-expectations/pull/124\n* @samantha-guerriero-cko made their first contribution in https://github.com/calogica/dbt-expectations/pull/126\n# dbt-expectations v0.4.5\n\n## Fixes\n* Fix missing group by default value in string_matching macros  ([#126](https://github.com/calogica/dbt-expectations/pull/126) by [@samantha-guerriero-cko](https://github.com/samantha-guerriero-cko))\n\n## Doc Updates\n* Append missing optional parameters documentation to README.md ([#124](https://github.com/calogica/dbt-expectations/pull/124) by [@makotonium](https://github.com/makotonium))\n\n# dbt-expectations v0.4.5\n\n## Features\n* Add an optional argument to allow for intervals of `date_part` in `expect_row_values_to_have_data_for_every_n_datepart`. ([#110](https://github.com/calogica/dbt-expectations/pull/110) by [@lewisarmistead](https://github.com/lewisarmistead))\n\n## Fixes\n\n* Fixed a regression introduced in 0.4.3 that made `expect_table_columns_to_match_ordered_list` incomatible with Redshift ([#123](https://github.com/calogica/dbt-expectations/pull/123) by [@mirosval](https://github.com/mirosval))\n\n# dbt-expectations v0.4.4\n\n## Fixes\n\n* Replaced hardcoded value in `expect_column_to_exist` with mapping call to provided transform filter and join to reduce list back to single value. ([#118](https://github.com/calogica/dbt-expectations/pull/118) [@UselessAlias](https://github.com/UselessAlias))\n\n\n# dbt-expectations v0.4.3\n\n## Fixes\n* Fixes incompatibility on Snowflake with use of `row_number()` without `order by` in `expect_table_columns_to_match_ordered_list`([#112](https://github.com/calogica/dbt-expectations/pull/112))\n\n## Features\n\n## Under the hood\n* Supports dbt 0.21.x\n\n# dbt-expectations v0.4.2\n\n## Features\n * Added `row_condition` to `expect_grouped_row_values_to_have_recent_data` and `expect_row_values_to_have_recent_data` to allow for partition filtering before applying the recency test ([#106](https://github.com/calogica/dbt-expectations/pull/106) w/ [@edbizarro](https://github.com/edbizarro))\n\n## Under the hood\n* Converted Jinja set logic to SQL joins to make it easier to follow and iterate in the future ([#108](https://github.com/calogica/dbt-expectations/pull/108))\n\n# dbt-expectations v0.4.1\n\n## Fixes\n* `expect_table_columns_to_match_list` remove `''` to leave columns as numbers ([#98](https://github.com/calogica/dbt-expectations/issues/98))\n\n* `expect_table_columns_to_match_ordered_list` now explicitly casts the column list to a string type ([#99](https://github.com/calogica/dbt-expectations/issues/99))\n\n* Fixes regex matching tests for Redshift by adding a Redshift specific adapter macro in `regexp_instr` ([#99](https://github.com/calogica/dbt-expectations/pull/102) @mirosval)\n\n# dbt-expectations v0.4.0\n\n## Breaking Changes\n\n* Requires `dbt >= 0.20`\n\n* Requires `dbt-date >= 0.4.0`\n\n* Updates test macros to tests to support `dbt >= 0.20`\n\n* Updates calls to adapter.dispatch to support `dbt >= 0.20` (see [Changes to dispatch in dbt v0.20 #78](https://github.com/calogica/dbt-expectations/issues/78))\n\n# dbt-expectations v0.3.7\n\n* Fix join in `expect_column_values_to_be_in_set` ([#91](https://github.com/calogica/dbt-expectations/pull/91) @ahmedrad)\n* Add support for Redshift `random` function in `rand` macro ([#92](https://github.com/calogica/dbt-expectations/pull/92) @ahmedrad)\n\n# dbt-expectations v0.3.6\n\n* Remove unnecessary macro to fix issue with 0.19.2 ([#88](https://github.com/calogica/dbt-expectations/pull/88))\n\n# dbt-expectations v0.3.5\n\n## Features\n* Added a new macro, `expect_row_values_to_have_data_for_every_n_datepart`, which tests whether a model has values for every grouped `date_part`.\n\n\n    For example, this tests whether a model has data for every `day` (grouped on `date_col`) from either a specified `start_date` and `end_date`, or for the `min`/`max` value of the specified `date_col`.\n\n\n    ```yaml\n    tests:\n        - dbt_expectations.expect_row_values_to_have_data_for_every_n_datepart:\n            date_col: date_day\n            date_part: day\n    ```\n\n## Fixes\n\n* Updated description of type check tests ([#84](https://github.com/calogica/dbt-expectations/pull/84) @noel)\n\n* Fixed `join` syntax because Twitter induced guilt: https://twitter.com/emilyhawkins__/status/1400967270537564160\n\n* Bump version of dbt-date to `< 0.4.0` ([#85](https://github.com/calogica/dbt-expectations/issues/85))\n\n\n# dbt-expectations v0.3.4\n\n## Features\n\n* Added support for optional `min_value` and `max_value` parameters to all`*_between_*` tests. ([#70](https://github.com/calogica/dbt-expectations/pull/70))\n\n* Added support for `strictly` parameter to `between` tests. If set to `True`, `striclty` changes the operators `>=` and `<=` to`>` and `<`.\n\n    For example, while\n\n    ```yaml\n    dbt_expectations.expect_column_stdev_to_be_between:\n        min_value: 0\n    ```\n\n    evaluates to `>= 0`,\n\n    ```yaml\n    dbt_expectations.expect_column_stdev_to_be_between:\n        min_value: 0\n        strictly: True\n    ```\n\n    evaluates to `> 0`.\n    ([#72](https://github.com/calogica/dbt-expectations/issues/72), [#74](https://github.com/calogica/dbt-expectations/pull/74))\n\n## Fixes\n\n* Corrected a typo in the README ([#67](https://github.com/calogica/dbt-expectations/pull/67))\n\n## Under the hood\n\n* Refactored `get_select` function to generate SQL grouping more explicitly ([#63](https://github.com/calogica/dbt-expectations/pull/63)))\n\n* Added dispatch call to `expect_table_row_count_to_equal` to make it easier to shim macros for the tsql-utils package ([#64](https://github.com/calogica/dbt-expectations/pull/64) Thanks [@alieus](https://github.com/alieus)!)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 46.9482421875,
          "content": "## Note: This package is no longer actively supported. \n<hr/>\n<h1 align=\"center\">dbt-expectations</h1>\n<p align=\"center\">\n<img alt=\"logo\" width=\"10%\" src=\"https://raw.githubusercontent.com/calogica/dbt-expectations/main/static/dbt-expectations-logo.svg\" />\n</p>\n\n<hr/>\n\n<p align=\"center\">\n<a href=\"https://circleci.com/gh/calogica/dbt-expectations/tree/main\">\n<img alt=\"CircleCI\" src=\"https://img.shields.io/circleci/build/github/calogica/dbt-expectations/main?style=plastic\"/>\n</a>\n<img alt=\"License\" src=\"https://img.shields.io/badge/license-Apache--2.0-ff69b4?style=plastic\"/>\n\n</p>\n\n## About\n\n`dbt-expectations` is an extension package for [**dbt**](https://github.com/dbt-labs/dbt), inspired by the [Great Expectations package for Python](https://greatexpectations.io/). The intent is to allow dbt users to deploy GE-like tests in their data warehouse directly from dbt, vs having to add another integration with their data warehouse.\n\n## Install\n\n`dbt-expectations` currently supports `dbt 1.7.x` or higher.\n\nCheck [dbt package hub](https://hub.getdbt.com/calogica/dbt_expectations/latest/) for the latest installation instructions, or [read the docs](https://docs.getdbt.com/docs/package-management) for more information on installing packages.\n\nInclude in `packages.yml`\n\n```yaml\npackages:\n  - package: calogica/dbt_expectations\n    version: [\">=0.10.0\", \"<0.11.0\"]\n    # <see https://github.com/calogica/dbt-expectations/releases/latest> for the latest version tag\n```\n\nThis package supports:\n\n* Postgres\n* Snowflake\n* BigQuery\n* DuckDB\n* Spark (experimental)\n* Trino\n\nFor latest release, see [https://github.com/calogica/dbt-expectations/releases](https://github.com/calogica/dbt-expectations/releases)\n\n### Dependencies\n\nThis package includes a reference to [`dbt-date`](https://github.com/calogica/dbt-date), so there's no need to also import `dbt-date` in your local project.\n\n### Variables\n\nThe following variables need to be defined in your `dbt_project.yml` file:\n\n```yaml\nvars:\n  'dbt_date:time_zone': 'America/Los_Angeles'\n```\n\nYou may specify [any valid timezone string](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) in place of `America/Los_Angeles`.\nFor example, use `America/New_York` for East Coast Time.\n\n## Available Tests\n\n### Table shape\n\n- [expect_column_to_exist](#expect_column_to_exist)\n- [expect_row_values_to_have_recent_data](#expect_row_values_to_have_recent_data)\n- [expect_grouped_row_values_to_have_recent_data](#expect_grouped_row_values_to_have_recent_data)\n- [expect_table_aggregation_to_equal_other_table](#expect_table_aggregation_to_equal_other_table)\n- [expect_table_column_count_to_be_between](#expect_table_column_count_to_be_between)\n- [expect_table_column_count_to_equal_other_table](#expect_table_column_count_to_equal_other_table)\n- [expect_table_column_count_to_equal](#expect_table_column_count_to_equal)\n- [expect_table_columns_to_not_contain_set](#expect_table_columns_to_not_contain_set)\n- [expect_table_columns_to_contain_set](#expect_table_columns_to_contain_set)\n- [expect_table_columns_to_match_ordered_list](#expect_table_columns_to_match_ordered_list)\n- [expect_table_columns_to_match_set](#expect_table_columns_to_match_set)\n- [expect_table_row_count_to_be_between](#expect_table_row_count_to_be_between)\n- [expect_table_row_count_to_equal_other_table](#expect_table_row_count_to_equal_other_table)\n- [expect_table_row_count_to_equal_other_table_times_factor](#expect_table_row_count_to_equal_other_table_times_factor)\n- [expect_table_row_count_to_equal](#expect_table_row_count_to_equal)\n\n### Missing values, unique values, and types\n\n- [expect_column_values_to_be_null](#expect_column_values_to_be_null)\n- [expect_column_values_to_not_be_null](#expect_column_values_to_not_be_null)\n- [expect_column_values_to_be_unique](#expect_column_values_to_be_unique)\n- [expect_column_values_to_be_of_type](#expect_column_values_to_be_of_type)\n- [expect_column_values_to_be_in_type_list](#expect_column_values_to_be_in_type_list)\n- [expect_column_values_to_have_consistent_casing](#expect_column_values_to_have_consistent_casing)\n\n### Sets and ranges\n\n- [expect_column_values_to_be_in_set](#expect_column_values_to_be_in_set)\n- [expect_column_values_to_not_be_in_set](#expect_column_values_to_not_be_in_set)\n- [expect_column_values_to_be_between](#expect_column_values_to_be_between)\n- [expect_column_values_to_be_decreasing](#expect_column_values_to_be_decreasing)\n- [expect_column_values_to_be_increasing](#expect_column_values_to_be_increasing)\n\n### String matching\n\n- [expect_column_value_lengths_to_be_between](#expect_column_value_lengths_to_be_between)\n- [expect_column_value_lengths_to_equal](#expect_column_value_lengths_to_equal)\n- [expect_column_values_to_match_like_pattern](#expect_column_values_to_match_like_pattern)\n- [expect_column_values_to_match_like_pattern_list](#expect_column_values_to_match_like_pattern_list)\n- [expect_column_values_to_match_regex](#expect_column_values_to_match_regex)\n- [expect_column_values_to_match_regex_list](#expect_column_values_to_match_regex_list)\n- [expect_column_values_to_not_match_like_pattern](#expect_column_values_to_not_match_like_pattern)\n- [expect_column_values_to_not_match_like_pattern_list](#expect_column_values_to_not_match_like_pattern_list)\n- [expect_column_values_to_not_match_regex](#expect_column_values_to_not_match_regex)\n- [expect_column_values_to_not_match_regex_list](#expect_column_values_to_not_match_regex_list)\n\n### Aggregate functions\n\n- [expect_column_distinct_count_to_be_greater_than](#expect_column_distinct_count_to_be_greater_than)\n- [expect_column_distinct_count_to_be_less_than](#expect_column_distinct_count_to_be_less_than)\n- [expect_column_distinct_count_to_equal_other_table](#expect_column_distinct_count_to_equal_other_table)\n- [expect_column_distinct_count_to_equal](#expect_column_distinct_count_to_equal)\n- [expect_column_distinct_values_to_be_in_set](#expect_column_distinct_values_to_be_in_set)\n- [expect_column_distinct_values_to_contain_set](#expect_column_distinct_values_to_contain_set)\n- [expect_column_distinct_values_to_equal_set](#expect_column_distinct_values_to_equal_set)\n- [expect_column_max_to_be_between](#expect_column_max_to_be_between)\n- [expect_column_mean_to_be_between](#expect_column_mean_to_be_between)\n- [expect_column_median_to_be_between](#expect_column_median_to_be_between)\n- [expect_column_min_to_be_between](#expect_column_min_to_be_between)\n- [expect_column_most_common_value_to_be_in_set](#expect_column_most_common_value_to_be_in_set)\n- [expect_column_proportion_of_unique_values_to_be_between](#expect_column_proportion_of_unique_values_to_be_between)\n- [expect_column_quantile_values_to_be_between](#expect_column_quantile_values_to_be_between)\n- [expect_column_stdev_to_be_between](#expect_column_stdev_to_be_between)\n- [expect_column_sum_to_be_between](#expect_column_sum_to_be_between)\n- [expect_column_unique_value_count_to_be_between](#expect_column_unique_value_count_to_be_between)\n\n### Multi-column\n\n- [expect_column_pair_values_A_to_be_greater_than_B](#expect_column_pair_values_a_to_be_greater_than_b)\n- [expect_column_pair_values_to_be_equal](#expect_column_pair_values_to_be_equal)\n- [expect_column_pair_values_to_be_in_set](#expect_column_pair_values_to_be_in_set)\n- [expect_compound_columns_to_be_unique](#expect_compound_columns_to_be_unique)\n- [expect_multicolumn_sum_to_equal](#expect_multicolumn_sum_to_equal)\n- [expect_select_column_values_to_be_unique_within_record](#expect_select_column_values_to_be_unique_within_record)\n\n### Distributional functions\n\n- [expect_column_values_to_be_within_n_moving_stdevs](#expect_column_values_to_be_within_n_moving_stdevs)\n- [expect_column_values_to_be_within_n_stdevs](#expect_column_values_to_be_within_n_stdevs)\n- [expect_row_values_to_have_data_for_every_n_datepart](#expect_row_values_to_have_data_for_every_n_datepart)\n\n## Documentation\n\n### [expect_column_to_exist](macros/schema_tests/table_shape/expect_column_to_exist.sql)\n\nExpect the specified column to exist.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_to_exist\n```\n\n### [expect_row_values_to_have_recent_data](macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql)\n\nExpect the model to have rows that are at least as recent as the defined interval prior to the current timestamp. Optionally gives the possibility to apply filters on the results.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_row_values_to_have_recent_data:\n      datepart: day\n      interval: 1\n      row_condition: 'id is not null' #optional\n```\n\n### [expect_grouped_row_values_to_have_recent_data](macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql)\n\nExpect the model to have **grouped** rows that are at least as recent as the defined interval prior to the current timestamp.\nUse this to test whether there is recent data for each grouped row defined by `group_by` (which is a list of columns) and a `timestamp_column`. Optionally gives the possibility to apply filters on the results.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\nmodels: # or seeds:\n  - name : my_model\n    tests :\n      - dbt_expectations.expect_grouped_row_values_to_have_recent_data:\n          group_by: [group_id]\n          timestamp_column: date_day\n          datepart: day\n          interval: 1\n          row_condition: \"id is not null\" #optional\n      # or also:\n      - dbt_expectations.expect_grouped_row_values_to_have_recent_data:\n          group_by: [group_id, other_group_id]\n          timestamp_column: date_day\n          datepart: day\n          interval: 1\n          row_condition: \"id is not null\" #optional\n```\n\n### [expect_table_aggregation_to_equal_other_table](macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql)\n\nExpect an (optionally grouped) expression to match the same (or optionally other) expression in a different table.\n\n*Applies to:* Model, Seed, Source\n\nSimple:\n\n```yaml\ntests:\n  - dbt_expectations.expect_table_aggregation_to_equal_other_table:\n      expression: sum(col_numeric_a)\n      compare_model: ref(\"other_model\")\n      group_by: [idx]\n```\n\nMore complex:\n\n```yaml\ntests:\n  - dbt_expectations.expect_table_aggregation_to_equal_other_table:\n      expression: count(*)\n      compare_model: ref(\"other_model\")\n      compare_expression: count(distinct id)\n      group_by: [date_column]\n      compare_group_by: [some_other_date_column]\n```\n\nor:\n\n```yaml\ntests:\n  - dbt_expectations.expect_table_aggregation_to_equal_other_table:\n      expression: max(column_a)\n      compare_model: ref(\"other_model\")\n      compare_expression: max(column_b)\n      group_by: [date_column]\n      compare_group_by: [some_other_date_column]\n      row_condition: some_flag=true\n      compare_row_condition: some_flag=false\n```\n\n**Note**: You can also express a **tolerance** factor, either as an absolute tolerable difference, `tolerance`, or as a tolerable % difference `tolerance_percent` expressed as a decimal (i.e 0.05 for 5%).\n\n### [expect_table_column_count_to_be_between](macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql)\n\nExpect the number of columns in a model to be between two values.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\ntests:\n  - dbt_expectations.expect_table_column_count_to_be_between:\n      min_value: 1 # (Optional)\n      max_value: 4 # (Optional)\n```\n\n### [expect_table_column_count_to_equal_other_table](macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql)\n\nExpect the number of columns in a model to match another model.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\nmodels: # or seeds:\n  - name: my_model\n    tests:\n      - dbt_expectations.expect_table_column_count_to_equal_other_table:\n          compare_model: ref(\"other_model\")\n```\n\n### [expect_table_columns_to_not_contain_set](macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql)\n\nExpect the columns in a model not to contain a given list.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\nmodels: # or seeds:\n  - name: my_model\n    tests:\n      - dbt_expectations.expect_table_columns_to_not_contain_set:\n          column_list: [\"col_a\", \"col_b\"]\n          transform: upper # (Optional)\n```\n\n### [expect_table_columns_to_contain_set](macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql)\n\nExpect the columns in a model to contain a given list.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\nmodels: # or seeds:\n  - name: my_model\n    tests:\n      - dbt_expectations.expect_table_columns_to_contain_set:\n          column_list: [\"col_a\", \"col_b\"]\n          transform: upper # (Optional)\n```\n\n### [expect_table_column_count_to_equal](macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql)\n\nExpect the number of columns in a model to be equal to `expected_number_of_columns`.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\nmodels: # or seeds:\n  - name: my_model\n    tests:\n      - dbt_expectations.expect_table_column_count_to_equal:\n          value: 7\n```\n\n### [expect_table_columns_to_match_ordered_list](macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql)\n\nExpect the columns to exactly match a specified list.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\nmodels: # or seeds:\n  - name: my_model\n    tests:\n      - dbt_expectations.expect_table_columns_to_match_ordered_list:\n          column_list: [\"col_a\", \"col_b\"]\n          transform: upper # (Optional)\n```\n\n### [expect_table_columns_to_match_set](macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql)\n\nExpect the columns in a model to match a given list.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\nmodels: # or seeds:\n  - name: my_model\n    tests:\n      - dbt_expectations.expect_table_columns_to_match_set:\n          column_list: [\"col_a\", \"col_b\"]\n          transform: upper # (Optional)\n```\n\n### [expect_table_row_count_to_be_between](macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql)\n\nExpect the number of rows in a model to be between two values.\n*Applies to:* Model, Seed, Source\n\n```yaml\nmodels: # or seeds:\n  - name: my_model\n    tests:\n      - dbt_expectations.expect_table_row_count_to_be_between:\n          min_value: 1 # (Optional)\n          max_value: 4 # (Optional)\n          group_by: [group_id, other_group_id, ...] # (Optional)\n          row_condition: \"id is not null\" # (Optional)\n          strictly: false # (Optional. Adds an 'or equal to' to the comparison operator for min/max)\n```\n\n### [expect_table_row_count_to_equal_other_table](macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql)\n\nExpect the number of rows in a model match another model.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\nmodels: # or seeds:\n  - name: my_model\n    tests:\n      - dbt_expectations.expect_table_row_count_to_equal_other_table:\n          compare_model: ref(\"other_model\")\n          group_by: [col1, col2] # (Optional)\n          compare_group_by: [col1, col2] # (Optional)\n          factor: 1 # (Optional)\n          row_condition: \"id is not null\" # (Optional)\n          compare_row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_table_row_count_to_equal_other_table_times_factor](macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql)\n\nExpect the number of rows in a model to match another model times a preconfigured factor.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\nmodels: # or seeds:\n  - name: my_model\n    tests:\n      - dbt_expectations.expect_table_row_count_to_equal_other_table_times_factor:\n          compare_model: ref(\"other_model\")\n          factor: 13\n          group_by: [col1, col2] # (Optional)\n          compare_group_by: [col1, col2] # (Optional)\n          row_condition: \"id is not null\" # (Optional)\n          compare_row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_table_row_count_to_equal](macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql)\n\nExpect the number of rows in a model to be equal to `expected_number_of_rows`.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\nmodels: # or seeds:\n  - name: my_model\n    tests:\n      - dbt_expectations.expect_table_row_count_to_equal:\n          value: 4\n          group_by: [group_id, other_group_id, ...] # (Optional)\n          row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_values_to_be_unique](macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql)\n\nExpect each column value to be unique.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_be_unique:\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_values_to_not_be_null](macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql)\n\nExpect column values to not be null.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_not_be_null:\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_values_to_be_null](macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql)\n\nExpect column values to be null.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_be_null:\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_values_to_be_of_type](macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql)\n\nExpect a column to be of a specified data type.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_be_of_type:\n      column_type: date\n```\n\n### [expect_column_values_to_be_in_type_list](macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql)\n\nExpect a column to be one of a specified type list.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_be_in_type_list:\n      column_type_list: [date, datetime]\n```\n\n### [expect_column_values_to_have_consistent_casing](macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql)\n\nExpect a column to have consistent casing. By setting `display_inconsistent_columns` to true, the number of inconsistent values in the column will be displayed in the terminal whereas the inconsistent values themselves will be returned if the SQL compiled test is run.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_have_consistent_casing:\n      display_inconsistent_columns: false # (Optional)\n```\n\n### [expect_column_values_to_be_in_set](macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql)\n\nExpect each column value to be in a given set.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_be_in_set:\n      value_set: ['a','b','c']\n      quote_values: true # (Optional. Default is 'true'.)\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_values_to_be_between](macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql)\n\nExpect each column value to be between two values.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_be_between:\n      min_value: 0  # (Optional)\n      max_value: 10 # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n      strictly: false # (Optional. Default is 'false'. Adds an 'or equal to' to the comparison operator for min/max)\n```\n\n### [expect_column_values_to_not_be_in_set](macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql)\n\nExpect each column value not to be in a given set.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_not_be_in_set:\n      value_set: ['e','f','g']\n      quote_values: true # (Optional. Default is 'true'.)\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_values_to_be_increasing](macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql)\n\nExpect column values to be increasing.\n\nIf `strictly: True`, then this expectation is only satisfied if each consecutive value is strictly increasing – equal values are treated as failures.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_be_increasing:\n      sort_column: date_day\n      row_condition: \"id is not null\" # (Optional)\n      strictly: true # (Optional for comparison operator. Default is 'true', and it uses '>'. If set to 'false' it uses '>='.)\n      group_by: [group_id, other_group_id, ...] # (Optional)\n      step: 1 # (Optional. If set, it requires the difference between values to be exactly this step. Requires numeric columns.)\n```\n\n### [expect_column_values_to_be_decreasing](macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql)\n\nExpect column values to be decreasing.\n\nIf `strictly=True`, then this expectation is only satisfied if each consecutive value is strictly decreasing – equal values are treated as failures.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_be_decreasing:\n      sort_column: col_numeric_a\n      row_condition: \"id is not null\" # (Optional)\n      strictly: true # (Optional for comparison operator. Default is 'true' and it uses '<'. If set to 'false', it uses '<='.)\n      group_by: [group_id, other_group_id, ...] # (Optional)\n      step: 1 # (Optional. If set, it requires the difference between values to be exactly this step. Requires numeric columns.)\n```\n\n### [expect_column_value_lengths_to_be_between](macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql)\n\nExpect column entries to be strings with length between a min_value value and a max_value value (inclusive).\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_value_lengths_to_be_between:\n      min_value: 1 # (Optional)\n      max_value: 4 # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n      strictly: false # (Optional. Default is 'false'. Adds an 'or equal to' to the comparison operator for min/max)\n```\n\n### [expect_column_value_lengths_to_equal](macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql)\n\nExpect column entries to be strings with length equal to the provided value.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_value_lengths_to_equal:\n      value: 10\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_values_to_match_regex](macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql)\n\nExpect column entries to be strings that match a given regular expression. Valid matches can be found anywhere in the string, for example \"[at]+\" will identify the following strings as expected: \"cat\", \"hat\", \"aa\", \"a\", and \"t\", and the following strings as unexpected: \"fish\", \"dog\".\n\nOptional (keyword) arguments:\n\n- `is_raw` indicates the `regex` pattern is a \"raw\" string and should be escaped. The default is `False`.\n- `flags` is a string of one or more characters that are passed to the regex engine as flags (or parameters). Allowed flags are adapter-specific. A common flag is `i`, for case-insensitive matching. The default is no flags.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_match_regex:\n      regex: \"[at]+\"\n      row_condition: \"id is not null\" # (Optional)\n      is_raw: True # (Optional)\n      flags: i # (Optional)\n```\n\n### [expect_column_values_to_not_match_regex](macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql)\n\nExpect column entries to be strings that do NOT match a given regular expression. The regex must not match any portion of the provided string. For example, \"[at]+\" would identify the following strings as expected: \"fish”, \"dog”, and the following as unexpected: \"cat”, \"hat”.\n\nOptional (keyword) arguments:\n\n- `is_raw` indicates the `regex` pattern is a \"raw\" string and should be escaped. The default is `False`.\n- `flags` is a string of one or more characters that are passed to the regex engine as flags (or parameters). Allowed flags are adapter-specific. A common flag is `i`, for case-insensitive matching. The default is no flags.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_not_match_regex:\n      regex: \"[at]+\"\n      row_condition: \"id is not null\" # (Optional)\n      is_raw: True # (Optional)\n      flags: i # (Optional)\n```\n\n### [expect_column_values_to_match_regex_list](macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql)\n\nExpect the column entries to be strings that can be matched to either any of or all of a list of regular expressions. Matches can be anywhere in the string.\n\nOptional (keyword) arguments:\n\n- `is_raw` indicates the `regex` pattern is a \"raw\" string and should be escaped. The default is `False`.\n- `flags` is a string of one or more characters that are passed to the regex engine as flags (or parameters). Allowed flags are adapter-specific. A common flag is `i`, for case-insensitive matching. The default is no flags.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_match_regex_list:\n      regex_list: [\"@[^.]*\", \"&[^.]*\"]\n      match_on: any # (Optional. Default is 'any', which applies an 'OR' for each regex. If 'all', it applies an 'AND' for each regex.)\n      row_condition: \"id is not null\" # (Optional)\n      is_raw: True # (Optional)\n      flags: i # (Optional)\n```\n\n### [expect_column_values_to_not_match_regex_list](macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql)\n\nExpect the column entries to be strings that do not match any of a list of regular expressions. Matches can be anywhere in the string.\n\nOptional (keyword) arguments:\n\n- `is_raw` indicates the `regex` pattern is a \"raw\" string and should be escaped. The default is `False`.\n- `flags` is a string of one or more characters that are passed to the regex engine as flags (or parameters). Allowed flags are adapter-specific. A common flag is `i`, for case-insensitive matching. The default is no flags.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_not_match_regex_list:\n      regex_list: [\"@[^.]*\", \"&[^.]*\"]\n      match_on: any # (Optional. Default is 'any', which applies an 'OR' for each regex. If 'all', it applies an 'AND' for each regex.)\n      row_condition: \"id is not null\" # (Optional)\n      is_raw: True # (Optional)\n      flags: i # (Optional)\n```\n\n### [expect_column_values_to_match_like_pattern](macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql)\n\nExpect column entries to be strings that match a given SQL `like` pattern.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_match_like_pattern:\n      like_pattern: \"%@%\"\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_values_to_not_match_like_pattern](macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql)\n\nExpect column entries to be strings that do not match a given SQL `like` pattern.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_not_match_like_pattern:\n      like_pattern: \"%&%\"\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_values_to_match_like_pattern_list](macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql)\n\nExpect the column entries to be strings that match any of a list of SQL `like` patterns.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_match_like_pattern_list:\n      like_pattern_list: [\"%@%\", \"%&%\"]\n      match_on: any # (Optional. Default is 'any', which applies an 'OR' for each pattern. If 'all', it applies an 'AND' for each regex.)\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_values_to_not_match_like_pattern_list](macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql)\n\nExpect the column entries to be strings that do not match any of a list of SQL `like` patterns.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_not_match_like_pattern_list:\n      like_pattern_list: [\"%@%\", \"%&%\"]\n      match_on: any # (Optional. Default is 'any', which applies an 'OR' for each pattern. If 'all', it applies an 'AND' for each regex.)\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_distinct_count_to_equal](macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql)\n\nExpect the number of distinct column values to be equal to a given value.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_distinct_count_to_equal:\n      value: 10\n      quote_values: true # (Optional. Default is 'true'.)\n      group_by: [group_id, other_group_id, ...] # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_distinct_count_to_be_greater_than](macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql)\n\nExpect the number of distinct column values to be greater than a given value.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_distinct_count_to_be_greater_than:\n      value: 10\n      quote_values: true # (Optional. Default is 'true'.)\n      group_by: [group_id, other_group_id, ...] # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_distinct_count_to_be_less_than](macros/schema_tests/aggregate_functions/expect_column_less_count_to_be_less_than.sql)\n\nExpect the number of distinct column values to be less than a given value.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_distinct_count_to_be_less_than:\n      value: 10\n      quote_values: true # (Optional. Default is 'true'.)\n      group_by: [group_id, other_group_id, ...] # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_distinct_values_to_be_in_set](macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql)\n\nExpect the set of distinct column values to be contained by a given set.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_distinct_values_to_be_in_set:\n      value_set: ['a','b','c','d']\n      quote_values: true # (Optional. Default is 'true'.)\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_distinct_values_to_contain_set](macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql)\n\nExpect the set of distinct column values to contain a given set.\n\nIn contrast to `expect_column_values_to_be_in_set` this ensures not that all column values are members of the given set but that values from the set must be present in the column.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_distinct_values_to_contain_set:\n      value_set: ['a','b']\n      quote_values: true # (Optional. Default is 'true'.)\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_distinct_values_to_equal_set](macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql)\n\nExpect the set of distinct column values to equal a given set.\n\nIn contrast to `expect_column_distinct_values_to_contain_set` this ensures not only that a certain set of values are present in the column but that these and only these values are present.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_distinct_values_to_equal_set:\n      value_set: ['a','b','c']\n      quote_values: true # (Optional. Default is 'true'.)\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_distinct_count_to_equal_other_table](macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql)\n\nExpect the number of distinct column values to be equal to number of distinct values in another model.\n\n*Applies to:* Model, Column, Seed, Source\n\nThis can be applied to a model:\n\n```yaml\nmodels: # or seeds:\n  - name: my_model_1\n    tests:\n      - dbt_expectations.expect_column_distinct_count_to_equal_other_table:\n          column_name: col_1\n          compare_model: ref(\"my_model_2\")\n          compare_column_name: col_2\n          row_condition: \"id is not null\" # (Optional)\n          compare_row_condition: \"id is not null\" # (Optional)\n```\n\nor at the column level:\n\n```yaml\nmodels: # or seeds:\n  - name: my_model_1\n    columns:\n      - name: col_1\n        tests:\n          - dbt_expectations.expect_column_distinct_count_to_equal_other_table:\n              compare_model: ref(\"my_model_2\")\n              compare_column_name: col_2\n              row_condition: \"id is not null\" # (Optional)\n              compare_row_condition: \"id is not null\" # (Optional)\n```\n\nIf `compare_model` or `compare_column_name` are no specified, `model` and `column_name` are substituted. So, one could compare distinct counts of two different columns in the same model, or identically named columns in separate models etc.\n\n### [expect_column_mean_to_be_between](macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql)\n\nExpect the column mean to be between a min_value value and a max_value value (inclusive).\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_mean_to_be_between:\n      min_value: 0 # (Optional)\n      max_value: 2 # (Optional)\n      group_by: [group_id, other_group_id, ...] # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n      strictly: false # (Optional. Default is 'false'. Adds an 'or equal to' to the comparison operator for min/max)\n```\n\n### [expect_column_median_to_be_between](macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql)\n\nExpect the column median to be between a min_value value and a max_value value (inclusive).\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_median_to_be_between:\n      min_value: 0\n      max_value: 2\n      group_by: [group_id, other_group_id, ...] # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n      strictly: false # (Optional. Default is 'false'. Adds an 'or equal to' to the comparison operator for min/max)\n```\n\n### [expect_column_quantile_values_to_be_between](macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql)\n\nExpect specific provided column quantiles to be between provided min_value and max_value values.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_quantile_values_to_be_between:\n      quantile: .95\n      min_value: 0 # (Optional)\n      max_value: 2 # (Optional)\n      group_by: [group_id, other_group_id, ...] # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n      strictly: false # (Optional. Default is 'false'. Adds an 'or equal to' to the comparison operator for min/max)\n```\n\n### [expect_column_stdev_to_be_between](macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql)\n\nExpect the column standard deviation to be between a min_value value and a max_value value. Uses sample standard deviation (normalized by N-1).\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_stdev_to_be_between:\n      min_value: 0 # (Optional)\n      max_value: 2 # (Optional)\n      group_by: [group_id, other_group_id, ...] # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n      strictly: false # (Optional. Default is 'false'. Adds an 'or equal to' to the comparison operator for min/max)\n```\n\n### [expect_column_unique_value_count_to_be_between](macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql)\n\nExpect the number of unique values to be between a min_value value and a max_value value.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_unique_value_count_to_be_between:\n      min_value: 3 # (Optional)\n      max_value: 3 # (Optional)\n      group_by: [group_id, other_group_id, ...] # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n      strictly: false # (Optional. Default is 'false'. Adds an 'or equal to' to the comparison operator for min/max)\n```\n\n### [expect_column_proportion_of_unique_values_to_be_between](macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql)\n\nExpect the proportion of unique values to be between a min_value value and a max_value value.\n\nFor example, in a column containing [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], there are 4 unique values and 10 total values for a proportion of 0.4.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_proportion_of_unique_values_to_be_between:\n      min_value: 0  # (Optional)\n      max_value: .4 # (Optional)\n      group_by: [group_id, other_group_id, ...] # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n      strictly: false # (Optional. Default is 'false'. Adds an 'or equal to' to the comparison operator for min/max)\n```\n\n### [expect_column_most_common_value_to_be_in_set](macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql)\n\nExpect the most common value to be within the designated value set\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_most_common_value_to_be_in_set:\n      value_set: [0.5]\n      top_n: 1\n      quote_values: true # (Optional. Default is 'true'.)\n      data_type: \"decimal\" # (Optional. Default is 'decimal')\n      strictly: false # (Optional. Default is 'false'. Adds an 'or equal to' to the comparison operator for min/max)\n```\n\n### [expect_column_max_to_be_between](macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql)\n\nExpect the column max to be between a min and max value\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_max_to_be_between:\n      min_value: 1 # (Optional)\n      max_value: 1 # (Optional)\n      group_by: [group_id, other_group_id, ...] # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n      strictly: false # (Optional. Default is 'false'. Adds an 'or equal to' to the comparison operator for min/max)\n```\n\n### [expect_column_min_to_be_between](macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql)\n\nExpect the column min to be between a min and max value\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_min_to_be_between:\n      min_value: 0 # (Optional)\n      max_value: 1 # (Optional)\n      group_by: [group_id, other_group_id, ...] # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n      strictly: false # (Optional. Default is 'false'. Adds an 'or equal to' to the comparison operator for min/max)\n```\n\n### [expect_column_sum_to_be_between](macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql)\n\nExpect the column to sum to be between a min and max value\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_sum_to_be_between:\n      min_value: 1 # (Optional)\n      max_value: 2 # (Optional)\n      group_by: [group_id, other_group_id, ...] # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n      strictly: false # (Optional. Default is 'false'. Adds an 'or equal to' to the comparison operator for min/max)\n```\n\n### [expect_column_pair_values_A_to_be_greater_than_B](macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql)\n\nExpect values in column A to be greater than column B.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_pair_values_A_to_be_greater_than_B:\n      column_A: col_numeric_a\n      column_B: col_numeric_a\n      or_equal: True\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_pair_values_to_be_equal](macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql)\n\nExpect the values in column A to be the same as column B.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_pair_values_to_be_equal:\n      column_A: col_numeric_a\n      column_B: col_numeric_a\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_column_pair_values_to_be_in_set](macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql)\n\nExpect paired values from columns A and B to belong to a set of valid pairs.\n\nNote: value pairs are expressed as lists within lists\n\n*Applies to:* Model, Seed, Source\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_pair_values_to_be_in_set:\n      column_A: col_numeric_a\n      column_B: col_numeric_b\n      value_pairs_set: [[0, 1], [1, 0], [0.5, 0.5], [0.5, 0.5]]\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_select_column_values_to_be_unique_within_record](macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql)\n\nExpect the values for each record to be unique across the columns listed. Note that records can be duplicated.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\ntests:\n  - dbt_expectations.expect_select_column_values_to_be_unique_within_record:\n      column_list: [\"col_string_a\", \"col_string_b\"]\n      ignore_row_if: \"any_value_is_missing\" # (Optional. Default is 'all_values_are_missing')\n      quote_columns: false # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n```\n\nNote:\n\n- `all_values_are_missing` (default) means that rows are excluded where *all* of the test columns are `null`\n- `any_value_is_missing` means that rows are excluded where *either* of the test columns are `null`\n\n### [expect_multicolumn_sum_to_equal](macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql)\n\nExpects that sum of all rows for a set of columns is equal to a specific value\n\n*Applies to:* Model, Seed, Source\n\n```yaml\ntests:\n  - dbt_expectations.expect_multicolumn_sum_to_equal:\n      column_list: [\"col_numeric_a\", \"col_numeric_b\"]\n      sum_total: 4\n      group_by: [group_id, other_group_id, ...] # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n```\n\n### [expect_compound_columns_to_be_unique](macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql)\n\nExpect that the columns are unique together, e.g. a multi-column primary key.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\ntests:\n  - dbt_expectations.expect_compound_columns_to_be_unique:\n      column_list: [\"date_col\", \"col_string_b\"]\n      ignore_row_if: \"any_value_is_missing\" # (Optional. Default is 'all_values_are_missing')\n      quote_columns: false # (Optional)\n      row_condition: \"id is not null\" # (Optional)\n```\n\nNote:\n\n- `all_values_are_missing` (default) means that rows are excluded where *all* of the test columns are `null`\n- `any_value_is_missing` means that rows are excluded where *either* of the test columns are `null`\n\n### [expect_column_values_to_be_within_n_moving_stdevs](macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql)\n\nA simple anomaly test based on the assumption that differences between periods in a given time series follow a log-normal distribution.\nThus, we would expect the logged differences (vs N periods ago) in metric values to be within Z sigma away from a moving average.\nBy applying a list of columns in the `group_by` parameter, you can also test for deviations within a group.\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_be_within_n_moving_stdevs:\n      date_column_name: date\n      period: day # (Optional. Default is 'day')\n      lookback_periods: 1 # (Optional. Default is 1)\n      trend_periods: 7 # (Optional. Default is 7)\n      test_periods: 14 # (Optional. Default is 14)\n      sigma_threshold: 3 # (Optional. Default is 3)\n      take_logs: true # (Optional. Default is 'true')\n      sigma_threshold_upper: x # (Optional. Replace 'x' with a value. Default is 'None')\n      sigma_threshold_lower: y # (Optional. Replace 'y' with a value. Default is 'None')\n      take_diffs: true # (Optional. Default is 'true')\n      group_by: [group_id] # (Optional. Default is 'None')\n```\n\n### [expect_column_values_to_be_within_n_stdevs](macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql)\n\nExpects (optionally grouped & summed) metric values to be within Z sigma away from the column average\n\n*Applies to:* Column\n\n```yaml\ntests:\n  - dbt_expectations.expect_column_values_to_be_within_n_stdevs:\n      group_by: group_id # (Optional. Default is 'None')\n      sigma_threshold: 3 # (Optional. Default is 3)\n```\n\n### [expect_row_values_to_have_data_for_every_n_datepart](macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql)\n\nExpects model to have values for every grouped `date_part`.\n\nFor example, this tests whether a model has data for every `day` (grouped on `date_col`) between either:\n\n- The `min`/`max` value of the specified `date_col` (default).\n- A specified `test_start_date` and/or `test_end_date`.\n\n*Applies to:* Model, Seed, Source\n\n```yaml\ntests:\n    - dbt_expectations.expect_row_values_to_have_data_for_every_n_datepart:\n        date_col: date_day\n        date_part: day # (Optional. Default is 'day')\n        row_condition: \"id is not null\" # (Optional)\n        test_start_date: 'yyyy-mm-dd' # (Optional. Replace 'yyyy-mm-dd' with a date. Default is 'None')\n        test_end_date: 'yyyy-mm-dd' # (Optional. Replace 'yyyy-mm-dd' with a date. Default is 'None')\n        exclusion_condition: statement # (Optional. See details below. Default is 'None')\n```\n\n**Notes**:\n\n- `test_end_date` is exclusive, e.g. a test with `test_end_date` value of `'2020-01-05'` will pass if your model has data through `'2021-01-04'`.\n\n- If `test_start_date` or `test_end_date` are not specified, the test automatically determines the `min`/`max` of the specified `date_col` from your data, respectively.\nOn some platforms, and/or if your table is not partitione on that date column, this may lead to performance issues. In these cases, we recommend setting an explicit date literal. You may also set a \"dynamic\" date literal via the built-in `modules.datetime` functions:\n\n```yaml\n    date_part: day\n    test_start_date: '2021-05-01'\n    test_end_date: '{{ modules.datetime.date.today() }}'\n```\n\nor, for example:\n\n```yaml\n    date_part: day\n    test_start_date: '2021-05-01'\n    test_end_date: '{{ modules.datetime.date.today() - modules.datetime.timedelta(1) }}'\n```\n\nUnfortunately, you currently **cannot** use a dynamic SQL date, such as `current_date` or macro from a dbt package such as dbt-date, as the underlying `date_spine` macro expects a date literal.\n\nThe `interval` argument will optionally group `date_part` by a given integer to test data presence at a lower granularity, e.g. adding `interval: 7` to the example above will test whether a model has data for each 7-`day` period instead of for each `day`.\n\nKnown or expected missing dates can be excluded from the test by setting the `exclusion_criteria` with a valid SQL statement; e.g., adding `exclusion_condition: not(date_day = '2021-10-19')` will ensure that test passes if and only if `date_day = '2021-10-19'` is the only date with missing data. Alternatively, `exclusion_condition: not(date_part(month, date_day) = 12 and date_part(day, date_day) = 25)` will permit data to be missing on the 25th of December (Christmas day) every year.\n\n## ~ Developers Only ~\n\n### Integration Tests\n\nThis project contains integration tests for all test macros in a separate `integration_tests` dbt project contained in this repo.\n\nTo run the tests:\n\n1. You will need a profile called `integration_tests` in `~/.dbt/profiles.yml` pointing to a writable database. We only support postgres, BigQuery and Snowflake.\n2. Then, from within the `integration_tests` folder, run `dbt build` to run the test models in `integration_tests/models/schema_tests/` and run the tests specified in `integration_tests/models/schema_tests/schema.yml`\n\n<img src=\"https://raw.githubusercontent.com/calogica/dbt-expectations/main/expectations.gif\"/>\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "dbt_project.yml",
          "type": "blob",
          "size": 0.39453125,
          "content": "\n# Name your project! Project names should contain only lowercase characters\n# and underscores. A good package name should reflect your organization's\n# name or the intended use of these models\nname: 'dbt_expectations'\nversion: '0.6.0'\n\nrequire-dbt-version: [\">=1.2.0\", \"<2.0.0\"]\nconfig-version: 2\n\ntarget-path: \"target\"\nclean-targets: [\"target\", \"dbt_packages\"]\nmacro-paths: [\"macros\"]\nlog-path: \"logs\"\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "integration_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "packages.yml",
          "type": "blob",
          "size": 0.07421875,
          "content": "packages:\n  - package: calogica/dbt_date\n    version: [\">=0.9.0\", \"<1.0.0\"]\n"
        },
        {
          "name": "regen_docs.sh",
          "type": "blob",
          "size": 0.24609375,
          "content": "git checkout -B docs-regen\ncd integration_tests\ndbt docs generate\nmv -f target/*.json ../docs\nmv -f target/*.html ../docs\ngit add .\ngit commit -am\"updating docs site\"\ngit push --set-upstream origin docs-regen\ngit checkout main\ngit branch -D docs-regen\n"
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}