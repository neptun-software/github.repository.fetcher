{
  "metadata": {
    "timestamp": 1736568291064,
    "page": 192,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "RPi-Distro/pi-gen",
      "stars": 2698,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.05078125,
          "content": "output/\nwork/\ndeploy/\napt-cacher-ng/\n.git/objects/*\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.05859375,
          "content": "deploy/*\nwork/*\nconfig\npostrun.sh\nSKIP\nSKIP_IMAGES\n.pc\n*-pc\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 0.068359375,
          "content": "include:\n  - project: serge/pi-gen\n    ref: ci\n    file: 'pi-gen.yml'\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5029296875,
          "content": "ARG BASE_IMAGE=debian:bullseye\nFROM ${BASE_IMAGE}\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get -y update && \\\n    apt-get -y install --no-install-recommends \\\n        git vim parted \\\n        quilt coreutils qemu-user-static debootstrap zerofree zip dosfstools \\\n        libarchive-tools libcap2-bin rsync grep udev xz-utils curl xxd file kmod bc \\\n        binfmt-support ca-certificates fdisk gpg pigz arch-test \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY . /pi-gen/\n\nVOLUME [ \"/pi-gen/work\", \"/pi-gen/deploy\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.462890625,
          "content": "Copyright (c) 2015 Raspberry Pi (Trading) Ltd.\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.90625,
          "content": "# pi-gen\n\nTool used to create Raspberry Pi OS images, and custom images based on Raspberry Pi OS,\nwhich was in turn derived from the Raspbian project.\n\n**Note**: Raspberry Pi OS 32 bit images are based primarily on Raspbian, while\nRaspberry Pi OS 64 bit images are based primarily on Debian.\n\n**Note**: 32 bit images should be built from the `master` branch.\n64 bit images should be built from the `arm64` branch.\n\n## Dependencies\n\npi-gen runs on Debian-based operating systems released after 2017, and we\nalways advise you use the latest OS for security reasons.\n\nOn other Linux distributions it may be possible to use the Docker build described\nbelow.\n\nTo install the required dependencies for `pi-gen` you should run:\n\n```bash\napt-get install coreutils quilt parted qemu-user-static debootstrap zerofree zip \\\ndosfstools libarchive-tools libcap2-bin grep rsync xz-utils file git curl bc \\\ngpg pigz xxd arch-test\n```\n\nThe file `depends` contains a list of tools needed.  The format of this\npackage is `<tool>[:<debian-package>]`.\n\n## Getting started with building your images\n\nGetting started is as simple as cloning this repository on your build machine. You\ncan do so with:\n\n```bash\ngit clone https://github.com/RPI-Distro/pi-gen.git\n```\n\n`--depth 1` can be added after `git clone` to create a shallow clone, only containing\nthe latest revision of the repository. Do not do this on your development machine.\n\nAlso, be careful to clone the repository to a base path **NOT** containing spaces.\nThis configuration is not supported by debootstrap and will lead to `pi-gen` not\nrunning.\n\nAfter cloning the repository, you can move to the next step and start configuring\nyour build.\n\n## Config\n\nUpon execution, `build.sh` will source the file `config` in the current\nworking directory.  This bash shell fragment is intended to set needed\nenvironment variables.\n\nThe following environment variables are supported:\n\n * `IMG_NAME` (Default: `raspios-$RELEASE-$ARCH`, for example: `raspios-bookworm-armhf`)\n\n   The name of the image to build with the current stage directories. Use this\n   variable to set the root name of your OS, eg `IMG_NAME=Frobulator`.\n   Export files in stages may add suffixes to `IMG_NAME`.\n\n * `PI_GEN_RELEASE` (Default: `Raspberry Pi reference`)\n\n   The release name to use in `/etc/issue.txt`. The default should only be used\n   for official Raspberry Pi builds.\n\n* `RELEASE` (Default: `bookworm`)\n\n   The release version to build images against. Valid values are any supported\n   Debian release. However, since different releases will have different sets of\n   packages available, you'll need to either modify your stages accordingly, or\n   checkout the appropriate branch. For example, if you'd like to build a\n   `bullseye` image, you should do so from the `bullseye` branch.\n\n * `APT_PROXY` (Default: unset)\n\n   If you require the use of an apt proxy, set it here.  This proxy setting\n   will not be included in the image, making it safe to use an `apt-cacher` or\n   similar package for development.\n\n * `BASE_DIR`  (Default: location of `build.sh`)\n\n   **CAUTION**: Currently, changing this value will probably break build.sh\n\n   Top-level directory for `pi-gen`.  Contains stage directories, build\n   scripts, and by default both work and deployment directories.\n\n * `WORK_DIR`  (Default: `$BASE_DIR/work`)\n\n   Directory in which `pi-gen` builds the target system.  This value can be\n   changed if you have a suitably large, fast storage location for stages to\n   be built and cached.  Note, `WORK_DIR` stores a complete copy of the target\n   system for each build stage, amounting to tens of gigabytes in the case of\n   Raspbian.\n\n   **CAUTION**: If your working directory is on an NTFS partition you probably won't be able to build: make sure this is a proper Linux filesystem.\n\n * `DEPLOY_DIR`  (Default: `$BASE_DIR/deploy`)\n\n   Output directory for target system images and NOOBS bundles.\n\n * `DEPLOY_COMPRESSION` (Default: `zip`)\n\n   Set to:\n   * `none` to deploy the actual image (`.img`).\n   * `zip` to deploy a zipped image (`.zip`).\n   * `gz` to deploy a gzipped image (`.img.gz`).\n   * `xz` to deploy a xzipped image (`.img.xz`).\n\n\n * `DEPLOY_ZIP` (Deprecated)\n\n   This option has been deprecated in favor of `DEPLOY_COMPRESSION`.\n\n   If `DEPLOY_ZIP=0` is still present in your config file, the behavior is the\n   same as with `DEPLOY_COMPRESSION=none`.\n\n * `COMPRESSION_LEVEL` (Default: `6`)\n\n   Compression level to be used when using `zip`, `gz` or `xz` for\n   `DEPLOY_COMPRESSION`. From 0 to 9 (refer to the tool man page for more\n   information on this. Usually 0 is no compression but very fast, up to 9 with\n   the best compression but very slow ).\n\n * `USE_QEMU` (Default: `0`)\n\n   Setting to '1' enables the QEMU mode - creating an image that can be mounted via QEMU for an emulated\n   environment. These images include \"-qemu\" in the image file name.\n\n * `LOCALE_DEFAULT` (Default: 'en_GB.UTF-8' )\n\n   Default system locale.\n\n * `TARGET_HOSTNAME` (Default: 'raspberrypi' )\n\n   Setting the hostname to the specified value.\n\n * `KEYBOARD_KEYMAP` (Default: 'gb' )\n\n   Default keyboard keymap.\n\n   To get the current value from a running system, run `debconf-show\n   keyboard-configuration` and look at the\n   `keyboard-configuration/xkb-keymap` value.\n\n * `KEYBOARD_LAYOUT` (Default: 'English (UK)' )\n\n   Default keyboard layout.\n\n   To get the current value from a running system, run `debconf-show\n   keyboard-configuration` and look at the\n   `keyboard-configuration/variant` value.\n\n * `TIMEZONE_DEFAULT` (Default: 'Europe/London' )\n\n   Default time zone.\n\n   To get the current value from a running system, look in\n   `/etc/timezone`.\n\n * `FIRST_USER_NAME` (Default: `pi`)\n\n   Username for the first user. This user only exists during the image creation process. Unless\n   `DISABLE_FIRST_BOOT_USER_RENAME` is set to `1`, this user will be renamed on the first boot with\n   a name chosen by the final user. This security feature is designed to prevent shipping images\n   with a default username and help prevent malicious actors from taking over your devices.\n\n * `FIRST_USER_PASS` (Default: unset)\n\n   Password for the first user. If unset, the account is locked.\n\n * `DISABLE_FIRST_BOOT_USER_RENAME` (Default: `0`)\n\n   Disable the renaming of the first user during the first boot. This make it so `FIRST_USER_NAME`\n   stays activated. `FIRST_USER_PASS` must be set for this to work. Please be aware of the implied\n   security risk of defining a default username and password for your devices.\n\n * `WPA_COUNTRY` (Default: unset)\n\n   Sets the default WLAN regulatory domain and unblocks WLAN interfaces. This should be a 2-letter ISO/IEC 3166 country Code, i.e. `GB`\n\n * `ENABLE_SSH` (Default: `0`)\n\n   Setting to `1` will enable ssh server for remote log in. Note that if you are using a common password such as the defaults there is a high risk of attackers taking over you Raspberry Pi.\n\n  * `PUBKEY_SSH_FIRST_USER` (Default: unset)\n\n   Setting this to a value will make that value the contents of the FIRST_USER_NAME's ~/.ssh/authorized_keys.  Obviously the value should\n   therefore be a valid authorized_keys file.  Note that this does not\n   automatically enable SSH.\n\n  * `PUBKEY_ONLY_SSH` (Default: `0`)\n\n   * Setting to `1` will disable password authentication for SSH and enable\n   public key authentication.  Note that if SSH is not enabled this will take\n   effect when SSH becomes enabled.\n\n * `SETFCAP` (Default: unset)\n\n   * Setting to `1` will prevent pi-gen from dropping the \"capabilities\"\n   feature. Generating the root filesystem with capabilities enabled and running\n   it from a filesystem that does not support capabilities (like NFS) can cause\n   issues. Only enable this if you understand what it is.\n\n * `STAGE_LIST` (Default: `stage*`)\n\n    If set, then instead of working through the numeric stages in order, this list will be followed. For example setting to `\"stage0 stage1 mystage stage2\"` will run the contents of `mystage` before stage2. Note that quotes are needed around the list. An absolute or relative path can be given for stages outside the pi-gen directory.\n\n * `EXPORT_CONFIG_DIR` (Default: `$BASE_DIR/export-image`)\n\n    If set, use this directory path as the location of scripts to run when generating images. An absolute or relative path can be given for a location outside the pi-gen directory.\n\nA simple example for building Raspberry Pi OS:\n\n```bash\nIMG_NAME='raspios'\n```\n\nThe config file can also be specified on the command line as an argument the `build.sh` or `build-docker.sh` scripts.\n\n```\n./build.sh -c myconfig\n```\n\nThis is parsed after `config` so can be used to override values set there.\n\n## How the build process works\n\nThe following process is followed to build images:\n\n * Iterate through all of the stage directories in alphanumeric order\n\n * Bypass a stage directory if it contains a file called\n   \"SKIP\"\n\n * Run the script `prerun.sh` which is generally just used to copy the build\n   directory between stages.\n\n * In each stage directory iterate through each subdirectory and then run each of the\n   install scripts it contains, again in alphanumeric order. **These need to be named\n   with a two digit padded number at the beginning.**\n   There are a number of different files and directories which can be used to\n   control different parts of the build process:\n\n     - **00-run.sh** - A unix shell script. Needs to be made executable for it to run.\n\n     - **00-run-chroot.sh** - A unix shell script which will be run in the chroot\n       of the image build directory. Needs to be made executable for it to run.\n\n     - **00-debconf** - Contents of this file are passed to debconf-set-selections\n       to configure things like locale, etc.\n\n     - **00-packages** - A list of packages to install. Can have more than one, space\n       separated, per line.\n\n     - **00-packages-nr** - As 00-packages, except these will be installed using\n       the `--no-install-recommends -y` parameters to apt-get.\n\n     - **00-patches** - A directory containing patch files to be applied, using quilt.\n       If a file named 'EDIT' is present in the directory, the build process will\n       be interrupted with a bash session, allowing an opportunity to create/revise\n       the patches.\n\n  * If the stage directory contains files called \"EXPORT_NOOBS\" or \"EXPORT_IMAGE\" then\n    add this stage to a list of images to generate\n\n  * Generate the images for any stages that have specified them\n\nIt is recommended to examine build.sh for finer details.\n\n\n## Docker Build\n\nDocker can be used to perform the build inside a container. This partially isolates\nthe build from the host system, and allows using the script on non-debian based\nsystems (e.g. Fedora Linux). The isolation is not complete due to the need to use\nsome kernel level services for arm emulation (binfmt) and loop devices (losetup).\n\nTo build:\n\n```bash\nvi config         # Edit your config file. See above.\n./build-docker.sh\n```\n\nIf everything goes well, your finished image will be in the `deploy/` folder.\nYou can then remove the build container with `docker rm -v pigen_work`\n\nIf you encounter errors during the build, you can edit the corresponding scripts, and\ncontinue:\n\n```bash\nCONTINUE=1 ./build-docker.sh\n```\n\nTo examine the container after a failure you can enter a shell within it using:\n\n```bash\nsudo docker run -it --privileged --volumes-from=pigen_work pi-gen /bin/bash\n```\n\nAfter successful build, the build container is by default removed. This may be undesired when making incremental changes to a customized build. To prevent the build script from remove the container add\n\n```bash\nPRESERVE_CONTAINER=1 ./build-docker.sh\n```\n\nThere is a possibility that even when running from a docker container, the\ninstallation of `qemu-user-static` will silently fail when building the image\nbecause `binfmt-support` _must be enabled on the underlying kernel_. An easy\nfix is to ensure `binfmt-support` is installed on the host machine before\nstarting the `./build-docker.sh` script (or using your own docker build\nsolution).\n\n### Passing arguments to Docker\n\nWhen the docker image is run various required command line arguments are provided.  For example the system mounts the `/dev` directory to the `/dev` directory within the docker container.  If other arguments are required they may be specified in the PIGEN_DOCKER_OPTS environment variable.  For example setting `PIGEN_DOCKER_OPTS=\"--add-host foo:192.168.0.23\"` will add '192.168.0.23   foo' to the `/etc/hosts` file in the container.  The `--name`\nand `--privileged` options are already set by the script and should not be redefined.\n\n## Stage Anatomy\n\n### Raspbian Stage Overview\n\nThe build of Raspbian is divided up into several stages for logical clarity\nand modularity.  This causes some initial complexity, but it simplifies\nmaintenance and allows for more easy customization.\n\n - **Stage 0** - bootstrap.  The primary purpose of this stage is to create a\n   usable filesystem.  This is accomplished largely through the use of\n   `debootstrap`, which creates a minimal filesystem suitable for use as a\n   base.tgz on Debian systems.  This stage also configures apt settings and\n   installs `raspberrypi-bootloader` which is missed by debootstrap.  The\n   minimal core is installed but not configured. As a result, this stage will not boot.\n\n - **Stage 1** - truly minimal system.  This stage makes the system bootable by\n   installing system files like `/etc/fstab`, configures the bootloader, makes\n   the network operable, and installs packages like raspi-config.  At this\n   stage the system should boot to a local console from which you have the\n   means to perform basic tasks needed to configure and install the system.\n\n - **Stage 2** - lite system.  This stage produces the Raspberry Pi OS Lite image.\n   Stage 2 installs some optimized memory functions, sets timezone and charmap\n   defaults, installs fake-hwclock and ntp, wireless LAN and bluetooth support,\n   dphys-swapfile, and other basics for managing the hardware.  It also\n   creates necessary groups and gives the pi user access to sudo and the\n   standard console hardware permission groups.\n\n   Note: Raspberry Pi OS Lite contains a number of tools for development,\n   including `Python`, `Lua` and the `build-essential` package. If you are\n   creating an image to deploy in products, be sure to remove extraneous development\n   tools before deployment.\n\n - **Stage 3** - desktop system.  Here's where you get the full desktop system\n   with X11 and LXDE, web browsers, git for development, Raspberry Pi OS custom UI\n   enhancements, etc.  This is a base desktop system, with some development\n   tools installed.\n\n - **Stage 4** - Normal Raspberry Pi OS image. System meant to fit on a 4GB card.\n   This is the    stage that installs most things that make Raspberry Pi OS friendly\n   to new users - e.g. system documentation.\n\n - **Stage 5** - The Raspberry Pi OS Full image. More development\n   tools, an email client, learning tools like Scratch, specialized packages\n   like sonic-pi, office productivity, etc.\n\n### Stage specification\n\nIf you wish to build up to a specified stage (such as building up to stage 2\nfor a lite system), place an empty file named `SKIP` in each of the `./stage`\ndirectories you wish not to include.\n\nThen add an empty file named `SKIP_IMAGES` to `./stage4` and `./stage5` (if building up to stage 2) or\nto `./stage2` (if building a minimal system).\n\n```bash\n# Example for building a lite system\necho \"IMG_NAME='raspios'\" > config\ntouch ./stage3/SKIP ./stage4/SKIP ./stage5/SKIP\ntouch ./stage4/SKIP_IMAGES ./stage5/SKIP_IMAGES\nsudo ./build.sh  # or ./build-docker.sh\n```\n\nIf you wish to build further configurations upon (for example) the lite\nsystem, you can also delete the contents of `./stage3` and `./stage4` and\nreplace with your own contents in the same format.\n\n\n## Skipping stages to speed up development\n\nIf you're working on a specific stage the recommended development process is as\nfollows:\n\n * Add a file called SKIP_IMAGES into the directories containing EXPORT_* files\n   (currently stage2, stage4 and stage5)\n * Add SKIP files to the stages you don't want to build. For example, if you're\n   basing your image on the lite image you would add these to stages 3, 4 and 5.\n * Run build.sh to build all stages\n * Add SKIP files to the earlier successfully built stages\n * Modify the last stage\n * Rebuild just the last stage using `sudo CLEAN=1 ./build.sh` (or, for docker builds\n   `PRESERVE_CONTAINER=1 CONTINUE=1 CLEAN=1 ./build-docker.sh`)\n * Once you're happy with the image you can remove the SKIP_IMAGES files and\n   export your image to test\n\n# Troubleshooting\n\n## `64 Bit Systems`\nA 64 bit image can be generated from the `arm64` branch in this repository. Just\nreplace the command from [this section](#getting-started-with-building-your-images)\nby the one below, and follow the rest of the documentation:\n```bash\ngit clone --branch arm64 https://github.com/RPI-Distro/pi-gen.git\n```\n\nIf you want to generate a 64 bits image from a Raspberry Pi running a 32 bits\nversion, you need to add `arm_64bit=1` to your `config.txt` file and reboot your\nmachine. This will restart your machine with a 64 bits kernel. This will only\nwork from a Raspberry Pi with a 64-bit capable processor (i.e. Raspberry Pi Zero\n2, Raspberry Pi 3 or Raspberry Pi 4).\n\n\n## `binfmt_misc`\n\nLinux is able to execute binaries from other architectures, meaning that it should be\npossible to make use of `pi-gen` on an x86_64 system, even though it will be running\nARM binaries. This requires support from the [`binfmt_misc`](https://en.wikipedia.org/wiki/Binfmt_misc)\nkernel module.\n\nYou may see one of the following errors:\n\n```\nupdate-binfmts: warning: Couldn't load the binfmt_misc module.\n```\n```\nW: Failure trying to run: chroot \"/pi-gen/work/test/stage0/rootfs\" /bin/true\nand/or\nchroot: failed to run command '/bin/true': Exec format error\n```\n\nTo resolve this, ensure that the following files are available (install them if necessary):\n\n```\n/lib/modules/$(uname -r)/kernel/fs/binfmt_misc.ko\n/usr/bin/qemu-arm-static\n```\n\nYou may also need to load the module by hand - run `modprobe binfmt_misc`.\n\nIf you are using WSL to build you may have to enable the service `sudo update-binfmts --enable`\n"
        },
        {
          "name": "build-docker.sh",
          "type": "blob",
          "size": 5.021484375,
          "content": "#!/usr/bin/env bash\n# Note: Avoid usage of arrays as MacOS users have an older version of bash (v3.x) which does not supports arrays\nset -eu\n\nDIR=\"$(CDPATH='' cd -- \"$(dirname -- \"$0\")\" && pwd)\"\n\nBUILD_OPTS=\"$*\"\n\n# Allow user to override docker command\nDOCKER=${DOCKER:-docker}\n\n# Ensure that default docker command is not set up in rootless mode\nif \\\n  ! ${DOCKER} ps    >/dev/null 2>&1 || \\\n    ${DOCKER} info 2>/dev/null | grep -q rootless \\\n; then\n\tDOCKER=\"sudo ${DOCKER}\"\nfi\nif ! ${DOCKER} ps >/dev/null; then\n\techo \"error connecting to docker:\"\n\t${DOCKER} ps\n\texit 1\nfi\n\nCONFIG_FILE=\"\"\nif [ -f \"${DIR}/config\" ]; then\n\tCONFIG_FILE=\"${DIR}/config\"\nfi\n\nwhile getopts \"c:\" flag\ndo\n\tcase \"${flag}\" in\n\t\tc)\n\t\t\tCONFIG_FILE=\"${OPTARG}\"\n\t\t\t;;\n\t\t*)\n\t\t\t;;\n\tesac\ndone\n\n# Ensure that the configuration file is an absolute path\nif test -x /usr/bin/realpath; then\n\tCONFIG_FILE=$(realpath -s \"$CONFIG_FILE\" || realpath \"$CONFIG_FILE\")\nfi\n\n# Ensure that the confguration file is present\nif test -z \"${CONFIG_FILE}\"; then\n\techo \"Configuration file need to be present in '${DIR}/config' or path passed as parameter\"\n\texit 1\nelse\n\t# shellcheck disable=SC1090\n\tsource ${CONFIG_FILE}\nfi\n\nCONTAINER_NAME=${CONTAINER_NAME:-pigen_work}\nCONTINUE=${CONTINUE:-0}\nPRESERVE_CONTAINER=${PRESERVE_CONTAINER:-0}\nPIGEN_DOCKER_OPTS=${PIGEN_DOCKER_OPTS:-\"\"}\n\nif [ -z \"${IMG_NAME}\" ]; then\n\techo \"IMG_NAME not set in 'config'\" 1>&2\n\techo 1>&2\nexit 1\nfi\n\n# Ensure the Git Hash is recorded before entering the docker container\nGIT_HASH=${GIT_HASH:-\"$(git rev-parse HEAD)\"}\n\nCONTAINER_EXISTS=$(${DOCKER} ps -a --filter name=\"${CONTAINER_NAME}\" -q)\nCONTAINER_RUNNING=$(${DOCKER} ps --filter name=\"${CONTAINER_NAME}\" -q)\nif [ \"${CONTAINER_RUNNING}\" != \"\" ]; then\n\techo \"The build is already running in container ${CONTAINER_NAME}. Aborting.\"\n\texit 1\nfi\nif [ \"${CONTAINER_EXISTS}\" != \"\" ] && [ \"${CONTINUE}\" != \"1\" ]; then\n\techo \"Container ${CONTAINER_NAME} already exists and you did not specify CONTINUE=1. Aborting.\"\n\techo \"You can delete the existing container like this:\"\n\techo \"  ${DOCKER} rm -v ${CONTAINER_NAME}\"\n\texit 1\nfi\n\n# Modify original build-options to allow config file to be mounted in the docker container\nBUILD_OPTS=\"$(echo \"${BUILD_OPTS:-}\" | sed -E 's@\\-c\\s?([^ ]+)@-c /config@')\"\n\n# Check the arch of the machine we're running on. If it's 64-bit, use a 32-bit base image instead\ncase \"$(uname -m)\" in\n  x86_64|aarch64)\n    BASE_IMAGE=i386/debian:bullseye\n    ;;\n  *)\n    BASE_IMAGE=debian:bullseye\n    ;;\nesac\n${DOCKER} build --build-arg BASE_IMAGE=${BASE_IMAGE} -t pi-gen \"${DIR}\"\n\nif [ \"${CONTAINER_EXISTS}\" != \"\" ]; then\n  DOCKER_CMDLINE_NAME=\"${CONTAINER_NAME}_cont\"\n  DOCKER_CMDLINE_PRE=\"--rm\"\n  DOCKER_CMDLINE_POST=\"--volumes-from=${CONTAINER_NAME}\"\nelse\n  DOCKER_CMDLINE_NAME=\"${CONTAINER_NAME}\"\n  DOCKER_CMDLINE_PRE=\"\"\n  DOCKER_CMDLINE_POST=\"\"\nfi\n\n# Check if binfmt_misc is required\nbinfmt_misc_required=1\ncase $(uname -m) in\n  aarch64)\n    binfmt_misc_required=0\n    ;;\n  arm*)\n    binfmt_misc_required=0\n    ;;\nesac\n\n# Check if qemu-arm-static and /proc/sys/fs/binfmt_misc are present\nif [[ \"${binfmt_misc_required}\" == \"1\" ]]; then\n  if ! qemu_arm=$(which qemu-arm-static) ; then\n    echo \"qemu-arm-static not found (please install qemu-user-static)\"\n    exit 1\n  fi\n  if [ ! -f /proc/sys/fs/binfmt_misc/register ]; then\n    echo \"binfmt_misc required but not mounted, trying to mount it...\"\n    if ! mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc ; then\n        echo \"mounting binfmt_misc failed\"\n        exit 1\n    fi\n    echo \"binfmt_misc mounted\"\n  fi\n  if ! grep -q \"^interpreter ${qemu_arm}\" /proc/sys/fs/binfmt_misc/qemu-arm* ; then\n    # Register qemu-arm for binfmt_misc\n    reg=\"echo ':qemu-arm-rpi:M::\"\\\n\"\\x7fELF\\x01\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x28\\x00:\"\\\n\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfe\\xff\\xff\\xff:\"\\\n\"${qemu_arm}:F' > /proc/sys/fs/binfmt_misc/register\"\n    echo \"Registering qemu-arm for binfmt_misc...\"\n    sudo bash -c \"${reg}\" 2>/dev/null || true\n  fi\nfi\n\ntrap 'echo \"got CTRL+C... please wait 5s\" && ${DOCKER} stop -t 5 ${DOCKER_CMDLINE_NAME}' SIGINT SIGTERM\ntime ${DOCKER} run \\\n  $DOCKER_CMDLINE_PRE \\\n  --name \"${DOCKER_CMDLINE_NAME}\" \\\n  --privileged \\\n  ${PIGEN_DOCKER_OPTS} \\\n  --volume \"${CONFIG_FILE}\":/config:ro \\\n  -e \"GIT_HASH=${GIT_HASH}\" \\\n  $DOCKER_CMDLINE_POST \\\n  pi-gen \\\n  bash -e -o pipefail -c \"\n    dpkg-reconfigure qemu-user-static &&\n    # binfmt_misc is sometimes not mounted with debian bullseye image\n    (mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc || true) &&\n    cd /pi-gen; ./build.sh ${BUILD_OPTS} &&\n    rsync -av work/*/build.log deploy/\n  \" &\n  wait \"$!\"\n\n# Ensure that deploy/ is always owned by calling user\necho \"copying results from deploy/\"\n${DOCKER} cp \"${CONTAINER_NAME}\":/pi-gen/deploy - | tar -xf -\n\necho \"copying log from container ${CONTAINER_NAME} to deploy/\"\n${DOCKER} logs --timestamps \"${CONTAINER_NAME}\" &>deploy/build-docker.log\n\nls -lah deploy\n\n# cleanup\nif [ \"${PRESERVE_CONTAINER}\" != \"1\" ]; then\n\t${DOCKER} rm -v \"${CONTAINER_NAME}\"\nfi\n\necho \"Done! Your image(s) should be in deploy/\"\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 9.14453125,
          "content": "#!/bin/bash -e\n\n# shellcheck disable=SC2119\nrun_sub_stage()\n{\n\tlog \"Begin ${SUB_STAGE_DIR}\"\n\tpushd \"${SUB_STAGE_DIR}\" > /dev/null\n\tfor i in {00..99}; do\n\t\tif [ -f \"${i}-debconf\" ]; then\n\t\t\tlog \"Begin ${SUB_STAGE_DIR}/${i}-debconf\"\n\t\t\ton_chroot << EOF\ndebconf-set-selections <<SELEOF\n$(cat \"${i}-debconf\")\nSELEOF\nEOF\n\n\t\t\tlog \"End ${SUB_STAGE_DIR}/${i}-debconf\"\n\t\tfi\n\t\tif [ -f \"${i}-packages-nr\" ]; then\n\t\t\tlog \"Begin ${SUB_STAGE_DIR}/${i}-packages-nr\"\n\t\t\tPACKAGES=\"$(sed -f \"${SCRIPT_DIR}/remove-comments.sed\" < \"${i}-packages-nr\")\"\n\t\t\tif [ -n \"$PACKAGES\" ]; then\n\t\t\t\ton_chroot << EOF\napt-get -o Acquire::Retries=3 install --no-install-recommends -y $PACKAGES\nEOF\n\t\t\tfi\n\t\t\tlog \"End ${SUB_STAGE_DIR}/${i}-packages-nr\"\n\t\tfi\n\t\tif [ -f \"${i}-packages\" ]; then\n\t\t\tlog \"Begin ${SUB_STAGE_DIR}/${i}-packages\"\n\t\t\tPACKAGES=\"$(sed -f \"${SCRIPT_DIR}/remove-comments.sed\" < \"${i}-packages\")\"\n\t\t\tif [ -n \"$PACKAGES\" ]; then\n\t\t\t\ton_chroot << EOF\napt-get -o Acquire::Retries=3 install -y $PACKAGES\nEOF\n\t\t\tfi\n\t\t\tlog \"End ${SUB_STAGE_DIR}/${i}-packages\"\n\t\tfi\n\t\tif [ -d \"${i}-patches\" ]; then\n\t\t\tlog \"Begin ${SUB_STAGE_DIR}/${i}-patches\"\n\t\t\tpushd \"${STAGE_WORK_DIR}\" > /dev/null\n\t\t\tif [ \"${CLEAN}\" = \"1\" ]; then\n\t\t\t\trm -rf .pc\n\t\t\t\trm -rf ./*-pc\n\t\t\tfi\n\t\t\tQUILT_PATCHES=\"${SUB_STAGE_DIR}/${i}-patches\"\n\t\t\tSUB_STAGE_QUILT_PATCH_DIR=\"$(basename \"$SUB_STAGE_DIR\")-pc\"\n\t\t\tmkdir -p \"$SUB_STAGE_QUILT_PATCH_DIR\"\n\t\t\tln -snf \"$SUB_STAGE_QUILT_PATCH_DIR\" .pc\n\t\t\tquilt upgrade\n\t\t\tif [ -e \"${SUB_STAGE_DIR}/${i}-patches/EDIT\" ]; then\n\t\t\t\techo \"Dropping into bash to edit patches...\"\n\t\t\t\tbash\n\t\t\tfi\n\t\t\tRC=0\n\t\t\tquilt push -a || RC=$?\n\t\t\tcase \"$RC\" in\n\t\t\t\t0|2)\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tfalse\n\t\t\t\t\t;;\n\t\t\tesac\n\t\t\tpopd > /dev/null\n\t\t\tlog \"End ${SUB_STAGE_DIR}/${i}-patches\"\n\t\tfi\n\t\tif [ -x ${i}-run.sh ]; then\n\t\t\tlog \"Begin ${SUB_STAGE_DIR}/${i}-run.sh\"\n\t\t\t./${i}-run.sh\n\t\t\tlog \"End ${SUB_STAGE_DIR}/${i}-run.sh\"\n\t\tfi\n\t\tif [ -f ${i}-run-chroot.sh ]; then\n\t\t\tlog \"Begin ${SUB_STAGE_DIR}/${i}-run-chroot.sh\"\n\t\t\ton_chroot < ${i}-run-chroot.sh\n\t\t\tlog \"End ${SUB_STAGE_DIR}/${i}-run-chroot.sh\"\n\t\tfi\n\tdone\n\tpopd > /dev/null\n\tlog \"End ${SUB_STAGE_DIR}\"\n}\n\n\nrun_stage(){\n\tlog \"Begin ${STAGE_DIR}\"\n\tSTAGE=\"$(basename \"${STAGE_DIR}\")\"\n\n\tpushd \"${STAGE_DIR}\" > /dev/null\n\n\tSTAGE_WORK_DIR=\"${WORK_DIR}/${STAGE}\"\n\tROOTFS_DIR=\"${STAGE_WORK_DIR}\"/rootfs\n\n\tunmount \"${WORK_DIR}/${STAGE}\"\n\n\tif [ ! -f SKIP_IMAGES ]; then\n\t\tif [ -f \"${STAGE_DIR}/EXPORT_IMAGE\" ]; then\n\t\t\tEXPORT_DIRS=\"${EXPORT_DIRS} ${STAGE_DIR}\"\n\t\tfi\n\tfi\n\tif [ ! -f SKIP ]; then\n\t\tif [ \"${CLEAN}\" = \"1\" ]; then\n\t\t\tif [ -d \"${ROOTFS_DIR}\" ]; then\n\t\t\t\trm -rf \"${ROOTFS_DIR}\"\n\t\t\tfi\n\t\tfi\n\t\tif [ -x prerun.sh ]; then\n\t\t\tlog \"Begin ${STAGE_DIR}/prerun.sh\"\n\t\t\t./prerun.sh\n\t\t\tlog \"End ${STAGE_DIR}/prerun.sh\"\n\t\tfi\n\t\tfor SUB_STAGE_DIR in \"${STAGE_DIR}\"/*; do\n\t\t\tif [ -d \"${SUB_STAGE_DIR}\" ] && [ ! -f \"${SUB_STAGE_DIR}/SKIP\" ]; then\n\t\t\t\trun_sub_stage\n\t\t\tfi\n\t\tdone\n\tfi\n\n\tunmount \"${WORK_DIR}/${STAGE}\"\n\n\tPREV_STAGE=\"${STAGE}\"\n\tPREV_STAGE_DIR=\"${STAGE_DIR}\"\n\tPREV_ROOTFS_DIR=\"${ROOTFS_DIR}\"\n\tpopd > /dev/null\n\tlog \"End ${STAGE_DIR}\"\n}\n\nterm() {\n\tif [ \"$?\" -ne 0 ]; then\n\t\tlog \"Build failed\"\n\telse\n\t\tlog \"Build finished\"\n\tfi\n\tunmount \"${STAGE_WORK_DIR}\"\n\tif [ \"$STAGE\" = \"export-image\" ]; then\n\t\tfor img in \"${STAGE_WORK_DIR}/\"*.img; do\n\t\t\tunmount_image \"$img\"\n\t\tdone\n\tfi\n}\n\nif [ \"$(id -u)\" != \"0\" ]; then\n\techo \"Please run as root\" 1>&2\n\texit 1\nfi\n\nBASE_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\nif [[ $BASE_DIR = *\" \"* ]]; then\n\techo \"There is a space in the base path of pi-gen\"\n\techo \"This is not a valid setup supported by debootstrap.\"\n\techo \"Please remove the spaces, or move pi-gen directory to a base path without spaces\" 1>&2\n\texit 1\nfi\n\nexport BASE_DIR\n\nif [ -f config ]; then\n\t# shellcheck disable=SC1091\n\tsource config\nfi\n\nwhile getopts \"c:\" flag\ndo\n\tcase \"$flag\" in\n\t\tc)\n\t\t\tEXTRA_CONFIG=\"$OPTARG\"\n\t\t\t# shellcheck disable=SC1090\n\t\t\tsource \"$EXTRA_CONFIG\"\n\t\t\t;;\n\t\t*)\n\t\t\t;;\n\tesac\ndone\n\nexport PI_GEN=${PI_GEN:-pi-gen}\nexport PI_GEN_REPO=${PI_GEN_REPO:-https://github.com/RPi-Distro/pi-gen}\nexport PI_GEN_RELEASE=${PI_GEN_RELEASE:-Raspberry Pi reference}\n\nexport ARCH=armhf\nexport RELEASE=${RELEASE:-bookworm} # Don't forget to update stage0/prerun.sh\nexport IMG_NAME=\"${IMG_NAME:-raspios-$RELEASE-$ARCH}\"\n\nexport USE_QEMU=\"${USE_QEMU:-0}\"\nexport IMG_DATE=\"${IMG_DATE:-\"$(date +%Y-%m-%d)\"}\"\nexport IMG_FILENAME=\"${IMG_FILENAME:-\"${IMG_DATE}-${IMG_NAME}\"}\"\nexport ARCHIVE_FILENAME=\"${ARCHIVE_FILENAME:-\"image_${IMG_DATE}-${IMG_NAME}\"}\"\n\nexport SCRIPT_DIR=\"${BASE_DIR}/scripts\"\nexport WORK_DIR=\"${WORK_DIR:-\"${BASE_DIR}/work/${IMG_NAME}\"}\"\nexport DEPLOY_DIR=${DEPLOY_DIR:-\"${BASE_DIR}/deploy\"}\n\n# DEPLOY_ZIP was deprecated in favor of DEPLOY_COMPRESSION\n# This preserve the old behavior with DEPLOY_ZIP=0 where no archive was created\nif [ -z \"${DEPLOY_COMPRESSION}\" ] && [ \"${DEPLOY_ZIP:-1}\" = \"0\" ]; then\n\techo \"DEPLOY_ZIP has been deprecated in favor of DEPLOY_COMPRESSION\"\n\techo \"Similar behavior to DEPLOY_ZIP=0 can be obtained with DEPLOY_COMPRESSION=none\"\n\techo \"Please update your config file\"\n\tDEPLOY_COMPRESSION=none\nfi\nexport DEPLOY_COMPRESSION=${DEPLOY_COMPRESSION:-zip}\nexport COMPRESSION_LEVEL=${COMPRESSION_LEVEL:-6}\nexport LOG_FILE=\"${WORK_DIR}/build.log\"\n\nexport TARGET_HOSTNAME=${TARGET_HOSTNAME:-raspberrypi}\n\nexport FIRST_USER_NAME=${FIRST_USER_NAME:-pi}\nexport FIRST_USER_PASS\nexport DISABLE_FIRST_BOOT_USER_RENAME=${DISABLE_FIRST_BOOT_USER_RENAME:-0}\nexport WPA_COUNTRY\nexport ENABLE_SSH=\"${ENABLE_SSH:-0}\"\nexport PUBKEY_ONLY_SSH=\"${PUBKEY_ONLY_SSH:-0}\"\n\nexport LOCALE_DEFAULT=\"${LOCALE_DEFAULT:-en_GB.UTF-8}\"\n\nexport KEYBOARD_KEYMAP=\"${KEYBOARD_KEYMAP:-gb}\"\nexport KEYBOARD_LAYOUT=\"${KEYBOARD_LAYOUT:-English (UK)}\"\n\nexport TIMEZONE_DEFAULT=\"${TIMEZONE_DEFAULT:-Europe/London}\"\n\nexport GIT_HASH=${GIT_HASH:-\"$(git rev-parse HEAD)\"}\n\nexport PUBKEY_SSH_FIRST_USER\n\nexport CLEAN\nexport APT_PROXY\n\nexport STAGE\nexport STAGE_DIR\nexport STAGE_WORK_DIR\nexport PREV_STAGE\nexport PREV_STAGE_DIR\nexport ROOTFS_DIR\nexport PREV_ROOTFS_DIR\nexport IMG_SUFFIX\nexport NOOBS_NAME\nexport NOOBS_DESCRIPTION\nexport EXPORT_DIR\nexport EXPORT_ROOTFS_DIR\n\nexport QUILT_PATCHES\nexport QUILT_NO_DIFF_INDEX=1\nexport QUILT_NO_DIFF_TIMESTAMPS=1\nexport QUILT_REFRESH_ARGS=\"-p ab\"\n\n# shellcheck source=scripts/common\nsource \"${SCRIPT_DIR}/common\"\n# shellcheck source=scripts/dependencies_check\nsource \"${SCRIPT_DIR}/dependencies_check\"\n\nif [ \"$SETFCAP\" != \"1\" ]; then\n\texport CAPSH_ARG=\"--drop=cap_setfcap\"\nfi\n\nmkdir -p \"${WORK_DIR}\"\ntrap term EXIT INT TERM\n\ndependencies_check \"${BASE_DIR}/depends\"\n\n\nPAGESIZE=$(getconf PAGESIZE)\nif [ \"$ARCH\" == \"armhf\" ] && [ \"$PAGESIZE\" != \"4096\" ]; then\n\techo\n\techo \"ERROR: Building an $ARCH image requires a kernel with a 4k page size (current: $PAGESIZE)\"\n\techo \"On Raspberry Pi OS (64-bit), you can switch to a suitable kernel by adding the following to /boot/firmware/config.txt and rebooting:\"\n\techo\n\techo \"kernel=kernel8.img\"\n\techo \"initramfs initramfs8 followkernel\"\n\techo\n\texit 1\nfi\n\necho \"Checking native $ARCH executable support...\"\nif ! arch-test -n \"$ARCH\"; then\n\techo \"WARNING: Only a native build environment is supported. Checking emulated support...\"\n\tif ! arch-test \"$ARCH\"; then\n\t\techo \"No fallback mechanism found. Ensure your OS has binfmt_misc support enabled and configured.\"\n\t\texit 1\n\tfi\nfi\n\n#check username is valid\nif [[ ! \"$FIRST_USER_NAME\" =~ ^[a-z][-a-z0-9_]*$ ]]; then\n\techo \"Invalid FIRST_USER_NAME: $FIRST_USER_NAME\"\n\texit 1\nfi\n\nif [[ \"$DISABLE_FIRST_BOOT_USER_RENAME\" == \"1\" ]] && [ -z \"${FIRST_USER_PASS}\" ]; then\n\techo \"To disable user rename on first boot, FIRST_USER_PASS needs to be set\"\n\techo \"Not setting FIRST_USER_PASS makes your system vulnerable and open to cyberattacks\"\n\texit 1\nfi\n\nif [[ \"$DISABLE_FIRST_BOOT_USER_RENAME\" == \"1\" ]]; then\n\techo \"User rename on the first boot is disabled\"\n\techo \"Be advised of the security risks linked to shipping a device with default username/password set.\"\nfi\n\nif [[ -n \"${APT_PROXY}\" ]] && ! curl --silent \"${APT_PROXY}\" >/dev/null ; then\n\techo \"Could not reach APT_PROXY server: ${APT_PROXY}\"\n\texit 1\nfi\n\nif [[ -n \"${WPA_PASSWORD}\" && ${#WPA_PASSWORD} -lt 8 || ${#WPA_PASSWORD} -gt 63  ]] ; then\n\techo \"WPA_PASSWORD\" must be between 8 and 63 characters\n\texit 1\nfi\n\nif [[ \"${PUBKEY_ONLY_SSH}\" = \"1\" && -z \"${PUBKEY_SSH_FIRST_USER}\" ]]; then\n\techo \"Must set 'PUBKEY_SSH_FIRST_USER' to a valid SSH public key if using PUBKEY_ONLY_SSH\"\n\texit 1\nfi\n\nlog \"Begin ${BASE_DIR}\"\n\nSTAGE_LIST=${STAGE_LIST:-${BASE_DIR}/stage*}\nexport STAGE_LIST\n\nEXPORT_CONFIG_DIR=$(realpath \"${EXPORT_CONFIG_DIR:-\"${BASE_DIR}/export-image\"}\")\nif [ ! -d \"${EXPORT_CONFIG_DIR}\" ]; then\n\techo \"EXPORT_CONFIG_DIR invalid: ${EXPORT_CONFIG_DIR} does not exist\"\n\texit 1\nfi\nexport EXPORT_CONFIG_DIR\n\nfor STAGE_DIR in $STAGE_LIST; do\n\tSTAGE_DIR=$(realpath \"${STAGE_DIR}\")\n\trun_stage\ndone\n\nCLEAN=1\nfor EXPORT_DIR in ${EXPORT_DIRS}; do\n\tSTAGE_DIR=${EXPORT_CONFIG_DIR}\n\t# shellcheck source=/dev/null\n\tsource \"${EXPORT_DIR}/EXPORT_IMAGE\"\n\tEXPORT_ROOTFS_DIR=${WORK_DIR}/$(basename \"${EXPORT_DIR}\")/rootfs\n\trun_stage\n\tif [ \"${USE_QEMU}\" != \"1\" ]; then\n\t\tif [ -e \"${EXPORT_DIR}/EXPORT_NOOBS\" ]; then\n\t\t\t# shellcheck source=/dev/null\n\t\t\tsource \"${EXPORT_DIR}/EXPORT_NOOBS\"\n\t\t\tSTAGE_DIR=\"${BASE_DIR}/export-noobs\"\n\t\t\trun_stage\n\t\tfi\n\tfi\ndone\n\nif [ -x \"${BASE_DIR}/postrun.sh\" ]; then\n\tlog \"Begin postrun.sh\"\n\tcd \"${BASE_DIR}\"\n\t./postrun.sh\n\tlog \"End postrun.sh\"\nfi\n\nlog \"End ${BASE_DIR}\"\n"
        },
        {
          "name": "depends",
          "type": "blob",
          "size": 0.2197265625,
          "content": "quilt\nparted\nrealpath:coreutils\nqemu-arm-static:qemu-user-static\ndebootstrap\nzerofree\nzip\nmkdosfs:dosfstools\ncapsh:libcap2-bin\nbsdtar:libarchive-tools\ngrep\nrsync\nxz:xz-utils\ncurl\nxxd\nfile\ngit\nlsmod:kmod\nbc\ngpg\npigz\narch-test\n"
        },
        {
          "name": "export-image",
          "type": "tree",
          "content": null
        },
        {
          "name": "export-noobs",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "stage0",
          "type": "tree",
          "content": null
        },
        {
          "name": "stage1",
          "type": "tree",
          "content": null
        },
        {
          "name": "stage2",
          "type": "tree",
          "content": null
        },
        {
          "name": "stage3",
          "type": "tree",
          "content": null
        },
        {
          "name": "stage4",
          "type": "tree",
          "content": null
        },
        {
          "name": "stage5",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}