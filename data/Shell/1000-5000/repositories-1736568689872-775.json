{
  "metadata": {
    "timestamp": 1736568689872,
    "page": 775,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ronivay/XenOrchestraInstallerUpdater",
      "stars": 1257,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1806640625,
          "content": "[*]\nindent_style = space\nindent_size = 4\ntab_width = 8\nend_of_line = lf\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nfunction_next_line = false\nswitch_case_indent = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.021484375,
          "content": "xo-install.cfg\nlogs/*\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.5048828125,
          "content": "# Xen Orchestra Installer / Updater\n\n[![](https://img.shields.io/endpoint?url=https://xo-build-status.yawn.fi/builds/debian/status.json)](https://xo-build-status.yawn.fi/builds/debian/details.html) [![](https://img.shields.io/endpoint?url=https://xo-build-status.yawn.fi/builds/centos/status.json)](https://xo-build-status.yawn.fi/builds/centos/details.html) [![](https://img.shields.io/endpoint?url=https://xo-build-status.yawn.fi/builds/ubuntu/status.json)](https://xo-build-status.yawn.fi/builds/ubuntu/details.html) [![](https://img.shields.io/endpoint?url=https://xo-build-status.yawn.fi/builds/almalinux/status.json)](https://xo-build-status.yawn.fi/builds/almalinux/details.html)\n\n[![](https://img.shields.io/endpoint?url=https://xo-image.yawn.fi/downloads/status.json)](https://xo-image.yawn.fi/downloads/image.txt)\n\n[![](https://github.com/ronivay/XenOrchestraInstallerUpdater/actions/workflows/main.yml/badge.svg)](https://github.com/ronivay/XenOrchestraInstallerUpdater/actions?query=workflow%3Axo-install) [![](https://github.com/ronivay/XenOrchestraInstallerUpdater/actions/workflows/lint.yml/badge.svg)](https://github.com/ronivay/XenOrchestraInstallerUpdater/actions?query=workflow%3Alint)\n\nScript to install/update [Xen Orchestra](https://xen-orchestra.com/#!/) and all of it's dependencies on multiple different Linux distributions. Separate script to be used on XenServer/XCP-ng host that installs a readymade VM image that has Xen Orchestra installed  utilizing the same installer script.\n\nHow about docker? No worries, check [Docker hub](https://hub.docker.com/r/ronivay/xen-orchestra)\n\n### What is Xen Orchestra?\n\nXen Orchestra is a web interface used to manage XenServer/XCP-ng hosts and pools. It runs separately and one can manage multiple different virtualization environments from one single management interface.\n\nXen Orchestra is developed by company called [Vates](https://vates.fr/). They offer Xen Orchestra as a turnkey appliance with different pricing models for different needs and even a free version with limited capabilities. This is the preferred and only supported method of using Xen Orchestra product as the appliance goes through QA and each of the plans come with support. I highly recommend using the official appliance if you plan on using Xen Orchestra in production environment, to support a great product and it's development now, and in the future.\n\n\n### Why to use this script?\n\nIf you're a home user/enthusiast with simple environment you want to manage but can't justify the cost of Xen Orchestra appliance and don't need the support for it.\n\nSince Xen Orchestra is open source and majority of the paid features included in the official appliance are part of the sources, one can build it themself. This [procedure](https://xen-orchestra.com/docs/from_the_sources.html) is even documented. Note that even though this method is documented, it's not supported way of using Xen Orchestra and is intended to be used only for testing purposes and not in production.\n\nThis script offers an easy way to install all dependencies, fetch source code, compile it and do all the little details for you which you'd have to do manually otherwise. Other than that, it follows the steps described in the official documentation. All source code for Xen Orchestra is by default pulled from the official [repository](https://github.com/vatesfr/xen-orchestra).\n\n**This script is not supported or endorsed by Xen Orchestra. Any issue you may have, please report it first to this repository.**\n\nThe very first version of this script i did purely for myself. Now i'm mainly trying to keep it up to date for others who might already rely on it frequently. My intentions are to offer an easy way for people to get into Xen Orchestra without restricted features which could potentially help this piece of software to evolve and grow.\n\n\n### Preparations\n\nFirst thing you need is a VM (or even a physical machine if you wish) where to install the software. This should have at least 4GB of RAM and ~1GB of free disk space. Having more CPU does speed a the build procedure a bit but isn't really a requirement. 2vCPU's on most systems are more than fine.\n\nSupported Linux distributions and versions:\n\n- CentOS 9 Stream\n- CentOS 8 Stream\n- AlmaLinux 9\n- AlmaLinux 8\n- Rocky Linux 9\n- Rocky Linux 8\n- Debian 12\n- Debian 11\n- Debian 10\n- Ubuntu 24.04\n- Ubuntu 22.04\n- Ubuntu 20.04\n\nNOTE: RHEL based distros cannot do file level restore from backups in XO due to missing libvhdi-tools. See: https://github.com/ronivay/XenOrchestraInstallerUpdater/issues/256\n\nOnly x86_64 architecture is supported. For all those raspberry pi users out there, check [container](https://hub.docker.com/r/ronivay/xen-orchestra) instead.\n\nAll OS/Architecture checks can be disabled in `xo-install.cfg` for experimental purposes. Not recommended obviously.\n\nI suggest using a fresh OS installation, let script install all necessary dependencies and dedicate the VM for running Xen Orchestra.\n\nIf you plan on using the prebuilt VM image for XenServer/XCP-ng, see the image section below.\n\n### Installation\n\nStart by cloning this repository to the machine you wish to install to.\n\nSee [Wiki](https://github.com/ronivay/XenOrchestraInstallerUpdater/wiki) for common configuration options\n\nThere is a file called `sample.xo-install.cfg` which you should copy as `xo-install.cfg`. This file holds some editable configuration settings you might want to change depending on your needs.\n\nWhen done editing configuration, just run the script with root privileges:\n```\nsudo ./xo-install.sh\n```\n\nThere are few options you can choose from:\n\n* `Install`\n\ninstall all dependencies, necessary configuration and xen orchestra itself\n* `Update`\n\nupdate existing installation to the newest version available\n* `Rollback`\n\nshould be self explanatory. if you wish to rollback to another installation after doing update or whatever\n\n* `Install proxy`\n\ninstall all dependencies, necessary configuration and xen orchestra backup proxy\n\n* `Update proxy`\n\nupdate existing proxy installation to newest version available\n\n\nEach of these options can be run non interactively like so:\n\n```\nsudo ./xo-install.sh --install [--proxy]\nsudo ./xo-install.sh --update [--proxy] [--force]\nsudo ./xo-install.sh --rollback\n```\n\nAs mentioned before, Xen Orchestra has some external dependencies from different operating system packages. All listed below will be installed if missing:\n\n```\nrpm:\n- curl\n- epel-release\n- nodejs (v14)\n- npm (v3)\n- yarn\n- gcc\n- gcc+\n- make\n- openssl-devel\n- redis\n- libpng-devel\n- python3\n- git\n- nfs-utils\n- libvhdi-tools\n- cifs-utils\n- lvm2\n- ntfs-3g\n- dmidecode\n- sudo (if set in xo-install.cfg)\n- patch\n\ndeb:\n- apt-transport-https\n- ca-certificates\n- libcap2-bin\n- curl\n- yarn\n- nodejs (v14)\n- npm (v3)\n- build-essential\n- redis-server\n- libpng-dev\n- git\n- python3-minimal\n- libvhdi-utils\n- lvm2\n- nfs-common\n- cifs-utils\n- gnupg (debian 10/11)\n- software-properties-common (ubuntu)\n- ntfs-3g\n- dmidecode\n- sudo (if set in xo-install.cfg)\n- patch\n```\n\nFollowing repositories will be installed if needed and repository install is enabled in xo-install.cfg\n\n```\nrpm:\n- forensics repository\n- epel repository\n- nodesource repository\n- yarn repository\n\ndeb:\n- universe repository (ubuntu)\n- nodesource repository\n- yarn repository\n```\n\n\n#### Backup proxy\n\n**Proxy installation method is experimental, use at your own risk. Proxy installation from sources is not documented by Xen Orchestra team. Method used here is the outcome of trial and error.**\n\n**Proxy source code will be edited slightly to disable license check which only works with official XOA and there is no documented or working procedure to bypass it properly (there used to be but not anymore)**\n\nBackup proxy can be used to offload backup tasks from the main Xen Orchestra instance to a proxy which has a direct connection to remote where backups are stored.\n\nRequirements for proxy VM are otherwise the same as mentioned above, in addition proxy needs to be able to connect your XCP-ng/XenServer host and Xen Orchestra server needs to be able to access proxy via configured port. By default, it is expected that proxy VM lives inside your XO managed XCP-ng/XenServer pool and XO will figure out the proper connection address with proxy VM's uuid and will use port 443 by default. If you've installed your proxy outside of XCP-ng/XenServer pool and/or you're using some other port, you need to edit the proxy server address from Proxies menu after importing the configuration.\n\nMajority of xo-install.cfg variables have no effect to proxy installation.\n\nSince there is no way in Xen Orchestra from sources to register a proxy via UI, the installation will output a piece of json after the proxy is installed. You need to copy this json string and save to a file. Then use the config import option in Xen Orchestra settings to import this piece of json to add proxy. This works as a partial config import and won't overwrite any existing config. Although it's good to take a config export backup just in case.\n\nNote that for obvious reasons some of the proxy features seen in Xen Orchestra UI aren't working, like upgrade button, upgrade check, redeploy, update appliance settings.\n\n#### Plugins\n\nPlugins are installed according to what is specified in `PLUGINS` variable inside `xo-install.cfg` configuration file. By default all available plugins that are part of xen orchestra repository are installed. This list can be narrowed down if needed and 3rd party plugins included.\n\n### Image\n\nIf you don't want to first install a VM and then use `xo-install.sh` script on it, you have the possibility to import VM image which has everything already setup. Use `xo-vm-import.sh` to do this, it'll download a prebuilt Debian 11 image which has Xen Orchestra and XenOrchestraInstallerUpdater installed.\n\nDetails of image build process [here](https://github.com/ronivay/xen-orchestra-vm)\n\nRun on your Xenserver/XCP-ng host with root privileges:\n\n```\nsudo bash -c \"$(curl -s https://raw.githubusercontent.com/ronivay/XenOrchestraInstallerUpdater/master/xo-vm-import.sh)\"\n```\n\nDefault username for UI is `admin@admin.net` with password `admin`\n\nSSH is accessible with username `xo` with password `xopass`\n\nRemember to change both passwords before putting the VM to actual use.\n\nXen Orchestra is installed to /opt/xo, it uses self-signed certificates from /opt/ssl which you can replace if you wish. Installation script is at /opt/XenOrchestraInstallerUpdater which you can use to update existing installation in the future.\n\nxo-server runs as a systemd service.\n\nxo user has full sudo access. Xen Orchestra updates etc should be ran with sudo.\n\nThis image is updated weekly. Latest build date and MD5/SHA256 checksum can be checked from [here](https://xo-image.yawn.fi/downloads/image.txt)\n\nBuilt and tested on XCP-ng 8.x\n\n### Tests and VM image\n\nI run my own little implementation of automation consisting of ansible and virtual machines to test the installation on a regular basis with different operating systems. Test results are visible in badges on top of this readme.\n\nVM image is also built totally by me and distributed from webservers i maintain.\n\n### Contributing\n\nPull requests and issues (either real issues or just suggestions) are more than welcome. Note that i do not wish to make any modifications to Xen Orchestra source code as part of this script.\n\n### Support\n\nIf you find this project useful and want to support the development by covering some of the hosting costs that come from maintaining an XCP-ng server in a data center, use paypal donation link below.\n\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/donate/?business=LCX7UV7LUGNY6&no_recurring=0&currency_code=EUR)\n"
        },
        {
          "name": "sample.xo-install.cfg",
          "type": "blob",
          "size": 5.9677734375,
          "content": "# Optional user that runs the service\n# default: root\n# no effect to Xen Orchestra proxy\n#XOUSER=\n\n# Optional parameter if running as non privileged user to use sudo when mounting/umounting shares inside Xen Orchestra\n# no effect if XOUSER is root\n# options true/false\n# no effect to Xen Orchestra proxy\n#USESUDO=false\n\n# Optional parameter to generate sudoers config when missing completely if USESUDO is set to true\n# no effect if XOUSER is root\n# options true/false\n# no effect to Xen Orchestra proxy\n#GENSUDO=false\n\n# Port number where xen-orchestra service is bound\n# no effect to Xen Orchestra proxy\nPORT=\"80\"\n\n# Port number to where xo-proxy service is bound\nPROXY_PORT=\"443\"\n\n# IP-address which xo-server listens to\n# By default XO will listen to all available IPv6 addresses and if none exists, all IPv4 addresses\n# With this you can force XO to listen only specific address, or e.g. all IPv4 addresses with 0.0.0.0\n#LISTEN_ADDRESS=\"0.0.0.0\"\n\n# Base dir for installation and future updates\nINSTALLDIR=\"/opt/xo\"\n\n# Script will update itself if there's a newer version available. This assumes that script inside a git directory and remote is ronivay/XenOrchestraInstallerUpdater\n# options: true/false\nSELFUPGRADE=true\n\n# Xen Orchestra configuration file is stored in XOUSER's home directory ($HOME/.config/xo-server/config.toml) and by default will be overwritten with every update done by this script.\n# You may disable this if you edit configuration by hand and don't want an update to overwrite it. Note that some of the options defined here won't be applied even if changed if this is set to false.\n# This does not apply to proxy installation, proxy config is never overwritten if it already exists!\n# options: true/false\n# no effect to Xen Orchestra proxy\nCONFIGUPDATE=true\n\n# Location of Xen Orchestra repository where source code is fetched\nREPOSITORY=\"https://github.com/vatesfr/xen-orchestra\"\n\n# Git branch, tag (append tags/ before the tag name) or individual commit where xen-orchestra sources are fetched.\nBRANCH=\"master\"\n\n# Installation log path\n# default: ./logs\n#LOGPATH=\n\n# Only one PLUGINS variable can be used at a time. Comment out the other one if you change these below. Comment out both if you don't want any plugins to be installed.\n\n# Comma separated list of plugins to be installed, check README for more information. Note that 3rd party plugins defined below should be listed here as well with their name eq. repo1,repo2 etc.\n#PLUGINS=\"xo-server-transport-email,xo-server-usage-report,xo-server-perf-alert\"\n\n# (default) all plugins will be installed, including possible 3rd-party plugins if defined.\nPLUGINS=\"all\"\n\n# Additional 3rd-party plugins to fetch. Keep the .git suffix.\n#ADDITIONAL_PLUGINS=\"https://github.com/user/repo.git,https://github.com/user/repo2.git\"\n\n# NodeJS and Yarn are automatically updated when running update/install. Can be disabled but not recommended (installation might fail because of too old node.js or yarn)\n# Note that if nodejs is updated when script's update feature is used, it might not be possible to use rollback option anymore without manually downgrading nodejs version to previous one\n# options: true/false\nAUTOUPDATE=\"true\"\n\n# yarn cache can consume a lot of disk space over time. Setting this to true will clear cache after update.\n# this can have a negative impact on how long update will take with slower internet connections\n# options: true/false\n#YARN_CACHE_CLEANUP=\"false\"\n\n# enable/disable OS check. Installation refuses to run on any other than supported OS versions if this is enabled. Can be disabled for experimental purposes.\n# options: true/false\nOS_CHECK=\"true\"\n\n# enable/disable architecture check. Installation refuses to run on any other than x86_64 if enabled. Can be disabled for experimental purposes.\n# options: true/false\nARCH_CHECK=\"true\"\n\n# Define the number of previous successful installations you want to keep. Needs to be at least 1. Determines how far the rollback feature can be used.\nPRESERVE=\"3\"\n\n# certificate settings have no effect to Xen Orchestra proxy, it'll generate it's own self-signed certificates always\n\n# Location of pem certificate/key files. Installation will automatically configure HTTPS if these are defined. Remember to change PORT variable as well.\n#PATH_TO_HTTPS_CERT=$INSTALLDIR/xo.crt\n#PATH_TO_HTTPS_KEY=$INSTALLDIR/xo.key\n\n# location of CA certificate file.\n# define this if your host certificate is issued by a custom CA and you want XO to trust it.\n# file can contain multiple certificates\n#PATH_TO_HOST_CA=\n\n# If set to true together with cert/key paths, defined pem key/certificate will be created if neither exists.\n# options: true/false\n#AUTOCERT=\"false\"\n\n# Enable automatic ACME (eq. Let's Encrypt) certificate creation.\n# Setting this to true will configure HTTP and HTTPS listeners to ports 80/443 (overwrites PORT variable),\n# enables autocert, sets certificate paths if missing and adds http to https redirect.\n#ACME=\"false\"\n\n# ACME domain for which the certificate is generated.\n# Domain needs to be pointed towards XO server public ip-address and ports 80 and 443 allowed.\n#ACME_DOMAIN=\"\"\n\n# Optional email address to receive notifications related to certificate\n#ACME_EMAIL=\"\"\n\n# Optional ACME CA to use. Will default to Let's Encrypt\n# Available ones listed here: https://www.npmjs.com/package/acme-client#directory-urls\n#ACME_CA=\"letsencrypt/production\"\n\n# If set to true, this will install the rpm/deb repositories necessary for the Xen Orchestra install.\n# If set to false, these repositories will not be installed. Also automatic nodejs upgrade will be disabled.\n# Note that installation will fail if all needed packages aren't available from configured repositories. See README for list of packages.\n# options: true/false\n# default: true\n#INSTALL_REPOS=\"true\"\n\n# Send xo-server logs to remote syslog\n# syntax is: <protocol>://<target-address>:<port>\n# supported protocols are udp and tcp\n# example: tcp://syslog.company.lan:514\n#SYSLOG_TARGET=\"\"\n\n# Configurable network-timeout setting for yarn, in ms.\n# default: 300000 = 300sec\n#YARN_NETWORK_TIMEOUT=\"300000\"\n"
        },
        {
          "name": "xo-install.sh",
          "type": "blob",
          "size": 61.16015625,
          "content": "#!/bin/bash\n# shellcheck disable=SC2155,SC2207,SC2015\n\n#########################################################################\n# Title: XenOrchestraInstallerUpdater                                   #\n# Author: Roni Väyrynen                                                 #\n# Repository: https://github.com/ronivay/XenOrchestraInstallerUpdater   #\n#########################################################################\n\nSCRIPT_DIR=\"$(dirname \"$0\")\"\nSAMPLE_CONFIG_FILE=\"$SCRIPT_DIR/sample.xo-install.cfg\"\nCONFIG_FILE=\"$SCRIPT_DIR/xo-install.cfg\"\n\n# Deploy default configuration file if the user doesn't have their own yet.\nif [[ ! -s \"$CONFIG_FILE\" ]]; then\n    cp \"$SAMPLE_CONFIG_FILE\" \"$CONFIG_FILE\"\nfi\n\n# See this file for all script configuration variables.\n# shellcheck disable=SC1090\nsource \"$CONFIG_FILE\"\n\n# Set some default variables if sourcing config file fails for some reason\nSELFUPGRADE=${SELFUPGRADE:-\"true\"}\nPORT=${PORT:-80}\nLISTEN_ADDRESS=${LISTEN_ADDRESS:-\"\"}\nPROXY_PORT=${PROXY_PORT:-443}\nINSTALLDIR=${INSTALLDIR:-\"/opt/xo\"}\nBRANCH=${BRANCH:-\"master\"}\nINCLUDE_V6=${INCLUDE_V6:-\"true\"}\nLOGPATH=${LOGPATH:-$(dirname \"$(realpath \"$0\")\")/logs}\nAUTOUPDATE=${AUTOUPDATE:-\"true\"}\nPRESERVE=${PRESERVE:-\"3\"}\nXOUSER=${XOUSER:-\"root\"}\nCONFIGPATH=$(getent passwd \"$XOUSER\" | cut -d: -f6)\nCONFIGPATH_PROXY=$(getent passwd root | cut -d: -f6)\nCONFIGUPDATE=${CONFIGUPDATE:-\"true\"}\nPLUGINS=\"${PLUGINS:-\"all\"}\"\nADDITIONAL_PLUGINS=\"${ADDITIONAL_PLUGINS:-\"none\"}\"\nREPOSITORY=\"${REPOSITORY:-\"https://github.com/vatesfr/xen-orchestra\"}\"\nOS_CHECK=\"${OS_CHECK:-\"true\"}\"\nARCH_CHECK=\"${ARCH_CHECK:-\"true\"}\"\nPATH_TO_HTTPS_CERT=\"${PATH_TO_HTTPS_CERT:-\"\"}\"\nPATH_TO_HTTPS_KEY=\"${PATH_TO_HTTPS_KEY:-\"\"}\"\nPATH_TO_HOST_CA=\"${PATH_TO_HOST_CA:-\"\"}\"\nAUTOCERT=\"${AUTOCERT:-\"false\"}\"\nACME=\"${ACME:-\"false\"}\"\nACME_EMAIL=\"${ACME_EMAIL:-\"\"}\"\nACME_CA=\"${ACME_CA:-\"letsencrypt/production\"}\"\nUSESUDO=\"${USESUDO:-\"false\"}\"\nGENSUDO=\"${GENSUDO:-\"false\"}\"\nINSTALL_REPOS=\"${INSTALL_REPOS:-\"true\"}\"\nSYSLOG_TARGET=\"${SYSLOG_TARGET:-\"\"}\"\nYARN_CACHE_CLEANUP=\"${YARN_CACHE_CLEANUP:-\"false\"}\"\nYARN_NETWORK_TIMEOUT=\"${YARN_NETWORK_TIMEOUT:-\"300000\"}\"\n\n# set variables not changeable in configfile\nTIME=$(date +%Y%m%d%H%M)\nLOGTIME=$(date \"+%Y-%m-%d %H:%M:%S\")\nLOGFILE=\"${LOGPATH}/xo-install.log-$TIME\"\nNODEVERSION=\"20\"\nFORCE=\"false\"\nINTERACTIVE=\"false\"\nSUDOERSFILE=\"/etc/sudoers.d/xo-server-$XOUSER\"\n\n# Set path where new source is cloned/pulled\nXO_SRC_DIR=\"$INSTALLDIR/xo-src/xen-orchestra\"\n\n# Set variables for stdout print\nCOLOR_N='\\e[0m'\nCOLOR_GREEN='\\e[1;32m'\nCOLOR_RED='\\e[1;31m'\nCOLOR_BLUE='\\e[1;34m'\nCOLOR_WHITE='\\e[1;97m'\nOK=\"[${COLOR_GREEN}ok${COLOR_N}]\"\nFAIL=\"[${COLOR_RED}fail${COLOR_N}]\"\nINFO=\"[${COLOR_BLUE}info${COLOR_N}]\"\nPROGRESS=\"[${COLOR_BLUE}..${COLOR_N}]\"\n\n# create logpath if doesn't exist\nif [[ ! -d \"$LOGPATH\" ]]; then\n    mkdir -p \"$LOGPATH\"\nfi\n\nfunction CheckUser {\n\n    # Make sure the script is ran as root\n\n    if [[ ! $(runcmd_stdout \"id -u\") == \"0\" ]]; then\n        printfail \"This script needs to be ran as root\"\n        exit 1\n    fi\n\n}\n\n# script self upgrade\nfunction SelfUpgrade {\n\n    set -o pipefail\n\n    if [[ \"$SELFUPGRADE\" != \"true\" ]]; then\n        return 0\n    fi\n\n    if [[ -d \"$SCRIPT_DIR/.git\" ]] && [[ -n $(runcmd_stdout \"command -v git\") ]]; then\n        local REMOTE=\"$(runcmd_stdout \"cd $SCRIPT_DIR && git config --get remote.origin.url\")\"\n        if [[ \"$REMOTE\" == *\"ronivay/XenOrchestraInstallerUpdater\"* ]]; then\n            if [[ -n $(runcmd_stdout \"cd $SCRIPT_DIR && git status --porcelain\") ]]; then\n                printfail \"Local changes in this script directory. Not attempting to self upgrade\"\n                return 0\n            fi\n            runcmd \"cd $SCRIPT_DIR && git fetch\"\n            local OLD_SCRIPT_VERSION=\"$(runcmd_stdout \"cd $SCRIPT_DIR && git rev-parse --short HEAD\")\"\n            local NEW_SCRIPT_VERSION=\"$(runcmd_stdout \"cd $SCRIPT_DIR && git rev-parse --short FETCH_HEAD\")\"\n            if [[ $(runcmd_stdout \"cd $SCRIPT_DIR && git diff --name-only @{upstream}| grep xo-install.sh\") ]]; then\n                printinfo \"Newer version of script available, attempting to self upgrade from '$OLD_SCRIPT_VERSION' to '$NEW_SCRIPT_VERSION'\"\n                runcmd \"cd $SCRIPT_DIR && git pull --ff-only\" &&\n                    {\n                        printok \"Self upgrade done\"\n                        exec \"$SCRIPT_DIR/xo-install.sh\" \"$@\"\n                    } ||\n                    printfail \"Failed to self upgrade. Check $LOGFILE for more details. Continuing with current version\"\n            fi\n        fi\n    fi\n\n}\n\n# log script version (git commit) and configuration variables to logfile\nfunction ScriptInfo {\n\n    set -o pipefail\n\n    local SCRIPTVERSION=$(cd \"$SCRIPT_DIR\" 2>/dev/null && git rev-parse --short HEAD 2>/dev/null)\n\n    [ -z \"$SCRIPTVERSION\" ] && SCRIPTVERSION=\"undefined\"\n    echo \"Running script version $SCRIPTVERSION with config:\" >>\"$LOGFILE\"\n    echo >>\"$LOGFILE\"\n    [ -s \"$CONFIG_FILE\" ] && grep -Eo '^[A-Z_]+.*' \"$CONFIG_FILE\" >>\"$LOGFILE\" || echo \"No config file found\" >>\"$LOGFILE\"\n    echo >>\"$LOGFILE\"\n}\n\n# log actual command and it's stderr/stdout to logfile in one go\nfunction runcmd {\n\n    echo \"+ $1\" >>\"$LOGFILE\"\n    bash -c -o pipefail \"$1\" >>\"$LOGFILE\" 2>&1 || return 1\n}\n\n# log actual command and it's stderr to logfile in one go\nfunction runcmd_stdout {\n\n    echo \"+ $1\" >>\"$LOGFILE\"\n    # shellcheck disable=SC2094\n    bash -c -o pipefail \"$1\" 2>>\"$LOGFILE\" | tee -a \"$LOGFILE\" || return 1\n}\n\n# make output we print pretty\nfunction printprog {\n    echo -ne \"${PROGRESS} $*\"\n}\n\nfunction printok {\n    # shellcheck disable=SC1117\n    echo -e \"\\r${OK} $*\"\n}\n\nfunction printfail {\n    echo -e \"${FAIL} $*\"\n}\n\nfunction printinfo {\n    echo -e \"${INFO} $*\"\n}\n\n# if script fails at a stage where installation is not complete, we don't want to keep the install specific directory and content\n# this is called by trap inside different functions\nfunction ErrorHandling {\n\n    echo\n    echo\n    printfail \"Something went wrong, exiting. Check $LOGFILE for more details and use rollback feature if needed\"\n\n    if [[ -d \"$INSTALLDIR/xo-builds/xen-orchestra-$TIME\" ]]; then\n        echo\n        printfail \"Removing $INSTALLDIR/xo-builds/xen-orchestra-$TIME because of failed installation.\"\n        runcmd \"rm -rf $INSTALLDIR/xo-builds/xen-orchestra-$TIME\"\n        echo\n    fi\n\n    exit 1\n}\n\n# install package dependencies to rpm distros, based on: https://xen-orchestra.com/docs/from_the_sources.html\nfunction InstallDependenciesRPM {\n\n    set -euo pipefail\n\n    trap ErrorHandling ERR INT\n\n    # Install necessary dependencies for XO build\n\n    # only install epel-release if doesn't exist and user allows it to be installed\n    if [[ -z $(runcmd_stdout \"rpm -qa epel-release\") ]] && [[ \"$INSTALL_REPOS\" == \"true\" ]]; then\n        echo\n        printprog \"Installing epel-repo\"\n        runcmd \"dnf -y install epel-release\"\n        printok \"Installing epel-repo\"\n    fi\n\n    # install packages\n    echo\n    printprog \"Installing build dependencies, redis server, python3, git, nfs-utils, cifs-utils, lvm2, ntfs-3g, dmidecode patch\"\n    runcmd \"dnf -y install gcc gcc-c++ make openssl-devel redis libpng-devel python3 git nfs-utils cifs-utils lvm2 ntfs-3g dmidecode patch\"\n    printok \"Installing build dependencies, redis server, python3, git, nfs-utils, cifs-utils, lvm2, ntfs-3g, dmidecode patch\"\n\n    # only run automated node install if executable not found\n    if [[ -z $(runcmd_stdout \"command -v node\") ]]; then\n        echo\n        printprog \"Installing node.js\"\n\n        # only install nodejs repo if user allows it to be installed\n        if [[ \"$INSTALL_REPOS\" == \"true\" ]]; then\n            runcmd \"curl -s -L https://rpm.nodesource.com/setup_${NODEVERSION}.x | bash -\"\n        fi\n\n        runcmd \"dnf install -y nodejs\"\n        printok \"Installing node.js\"\n    else\n        UpdateNodeYarn\n    fi\n\n    # only install yarn repo and package if not found\n    if [[ -z $(runcmd_stdout \"command -v yarn\") ]]; then\n        echo\n        printprog \"Installing yarn\"\n\n        # only install yarn repo if user allows it to be installed\n        if [[ \"$INSTALL_REPOS\" == \"true\" ]]; then\n            runcmd \"curl -s -o /etc/yum.repos.d/yarn.repo https://dl.yarnpkg.com/rpm/yarn.repo\"\n        fi\n\n        runcmd \"dnf -y install yarn\"\n        printok \"Installing yarn\"\n    fi\n\n    # Disabled for now due to forensics.cert.org going away\n    # only install libvhdi-tools if vhdimount is not present\n    #    if [[ -z $(runcmd_stdout \"command -v vhdimount\") ]]; then\n    #        echo\n    #        printprog \"Installing libvhdi-tools\"\n    #        if [[ \"$INSTALL_REPOS\" == \"true\" ]]; then\n    #            runcmd \"rpm -ivh https://forensics.cert.org/cert-forensics-tools-release-el${OSVERSION}.rpm\"\n    #            runcmd \"sed -i 's/enabled=1/enabled=0/g' /etc/yum.repos.d/cert-forensics-tools.repo\"\n    #            runcmd \"dnf --enablerepo=forensics install -y libvhdi-tools\"\n    #        else\n    #            runcmd \"dnf install -y libvhdi-tools\"\n    #        fi\n    #        printok \"Installing libvhdi-tools\"\n    #    fi\n\n    echo\n    printprog \"Enabling and starting redis service\"\n    runcmd \"/bin/systemctl enable redis && /bin/systemctl start redis\"\n    printok \"Enabling and starting redis service\"\n\n    echo\n    printprog \"Enabling and starting rpcbind service\"\n    runcmd \"/bin/systemctl enable rpcbind && /bin/systemctl start rpcbind\"\n    printok \"Enabling and starting rpcbind service\"\n\n}\n\n# install package dependencies to deb distros, based on: https://xen-orchestra.com/docs/from_the_sources.html\nfunction InstallDependenciesDeb {\n\n    set -euo pipefail\n\n    trap ErrorHandling ERR INT\n\n    # Install necessary dependencies for XO build\n\n    if [[ \"$OSNAME\" == \"Ubuntu\" ]] && [[ \"$INSTALL_REPOS\" == \"true\" ]]; then\n        echo\n        printprog \"OS Ubuntu so making sure universe repository is enabled\"\n        runcmd \"apt-get install -y software-properties-common\"\n        runcmd \"add-apt-repository -y universe\"\n        printok \"OS Ubuntu so making sure universe repository is enabled\"\n    fi\n\n    echo\n    printprog \"Running apt-get update\"\n    runcmd \"apt-get update\"\n    printok \"Running apt-get update\"\n\n    # install packages\n    echo\n    printprog \"Installing build dependencies, redis server, python3-minimal, git, libvhdi-utils, lvm2, nfs-common, cifs-utils, curl, ntfs-3g, dmidecode patch\"\n    runcmd \"apt-get install -y build-essential redis-server libpng-dev git libvhdi-utils python3-minimal lvm2 nfs-common cifs-utils curl ntfs-3g dmidecode patch\"\n    printok \"Installing build dependencies, redis server, python3-minimal, git, libvhdi-utils, lvm2, nfs-common, cifs-utils, curl, ntfs-3g, dmidecode patch\"\n\n    # Install apt-transport-https and ca-certificates because of yarn https repo url\n    echo\n    printprog \"Installing apt-transport-https and ca-certificates packages to support https repos\"\n    runcmd \"apt-get install -y apt-transport-https ca-certificates\"\n    printok \"Installing apt-transport-https and ca-certificates packages to support https repos\"\n\n    if [[ \"$OSNAME\" == \"Debian\" ]] && [[ \"$OSVERSION\" =~ ^(10|11|12)$ ]]; then\n        echo\n        printprog \"Debian 10/11/12, so installing gnupg also\"\n        runcmd \"apt-get install gnupg -y\"\n        printok \"Debian 10/11/12, so installing gnupg also\"\n    fi\n\n    # install setcap for non-root port binding if missing\n    if [[ -z $(runcmd_stdout \"command -v setcap\") ]]; then\n        echo\n        printprog \"Installing setcap\"\n        runcmd \"apt-get install -y libcap2-bin\"\n        printok \"Installing setcap\"\n    fi\n\n    # only run automated node install if executable not found\n    if [[ -z $(runcmd_stdout \"command -v node\") ]] || [[ -z $(runcmd_stdout \"command -v npm\") ]]; then\n        echo\n        printprog \"Installing node.js\"\n\n        # only install nodejs repo if user allows it to be installed\n        if [[ \"$INSTALL_REPOS\" == \"true\" ]]; then\n            runcmd \"curl -sL https://deb.nodesource.com/setup_${NODEVERSION}.x | bash -\"\n        fi\n\n        runcmd \"apt-get install -y nodejs\"\n        printok \"Installing node.js\"\n    else\n        UpdateNodeYarn\n    fi\n\n    # only install yarn repo and package if not found\n    if [[ -z $(runcmd_stdout \"command -v yarn\") ]]; then\n        echo\n        printprog \"Installing yarn\"\n\n        # only install yarn repo if user allows it to be installed\n        if [[ \"$INSTALL_REPOS\" == \"true\" ]]; then\n            runcmd \"curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -\"\n            runcmd \"echo \\\"deb https://dl.yarnpkg.com/debian/ stable main\\\" | tee /etc/apt/sources.list.d/yarn.list\"\n        fi\n\n        runcmd \"apt-get update\"\n        runcmd \"apt-get install -y yarn\"\n        printok \"Installing yarn\"\n    fi\n\n    echo\n    printprog \"Enabling and starting redis service\"\n    runcmd \"/bin/systemctl enable redis-server && /bin/systemctl start redis-server\"\n    printok \"Enabling and starting redis service\"\n\n    echo\n    printprog \"Enabling and starting rpcbind service\"\n    runcmd \"/bin/systemctl enable rpcbind && /bin/systemctl start rpcbind\"\n    printok \"Enabling and starting rpcbind service\"\n\n}\n\n# keep node.js and yarn up to date\nfunction UpdateNodeYarn {\n\n    set -euo pipefail\n\n    trap ErrorHandling ERR INT\n\n    # user has an option to disable this behaviour in xo-install.cfg\n    if [[ \"$AUTOUPDATE\" != \"true\" ]]; then\n        return 0\n    fi\n\n    echo\n    printinfo \"Checking current node.js version\"\n    local NODEV=$(runcmd_stdout \"node -v 2>/dev/null| grep -Eo '[0-9.]+' | cut -d'.' -f1\")\n\n    if [ \"$PKG_FORMAT\" == \"rpm\" ]; then\n        # update node version if needed.\n        # skip update if repository install is disabled as we can't quarantee this actually updates anything\n        if [[ \"${NODEV:-0}\" -lt \"${NODEVERSION}\" ]] && [[ \"$INSTALL_REPOS\" == \"true\" ]]; then\n            echo\n            printprog \"node.js version is ${NODEV:-\"not installed\"}, upgrading to ${NODEVERSION}.x\"\n\n            runcmd \"curl -sL https://rpm.nodesource.com/setup_${NODEVERSION}.x | bash -\"\n\n            runcmd \"dnf clean all\"\n            runcmd \"dnf install -y nodejs\"\n            printok \"node.js version is ${NODEV:-\"not installed\"}, upgrading to ${NODEVERSION}.x\"\n        else\n            if [[ -z \"$NODEV\" ]]; then\n                echo\n                printfail \"node.js not installed and INSTALL_REPOS set to false, can't continue\"\n                exit 1\n            fi\n\n            if [[ \"$TASK\" == \"Update\" ]]; then\n                echo\n                printprog \"node.js version already on $NODEV, checking updates\"\n                runcmd \"dnf update -y nodejs yarn\"\n                printok \"node.js version already on $NODEV, checking updates\"\n            elif [[ \"$TASK\" == \"Installation\" ]]; then\n                echo\n                printinfo \"node.js version already on $NODEV\"\n            fi\n        fi\n    fi\n\n    if [ \"$PKG_FORMAT\" == \"deb\" ]; then\n        if [[ \"${NODEV:-0}\" -lt \"${NODEVERSION}\" ]] && [[ \"$INSTALL_REPOS\" == \"true\" ]]; then\n            echo\n            printprog \"node.js version is ${NODEV:-\"not installed\"}, upgrading to ${NODEVERSION}.x\"\n\n            runcmd \"curl -sL https://deb.nodesource.com/setup_${NODEVERSION}.x | bash -\"\n\n            runcmd \"apt-get install -y nodejs\"\n            printok \"node.js version is ${NODEV:-\"not installed\"}, upgrading to ${NODEVERSION}.x\"\n        else\n            if [[ -z \"$NODEV\" ]]; then\n                echo\n                printfail \"node.js not installed and INSTALL_REPOS set to false, can't continue\"\n                exit 1\n            fi\n            if [[ \"$TASK\" == \"Update\" ]]; then\n                echo\n                printprog \"node.js version already on $NODEV, checking updates\"\n                runcmd \"apt-get update\"\n                runcmd \"apt-get install -y --only-upgrade nodejs yarn\"\n                printok \"node.js version already on $NODEV, checking updates\"\n            elif [[ \"$TASK\" == \"Installation\" ]]; then\n                echo\n                printinfo \"node.js version already on $NODEV\"\n            fi\n        fi\n    fi\n}\n\n# get source code for 3rd party plugins if any configured in xo-install.cfg\nfunction InstallAdditionalXOPlugins {\n\n    set -euo pipefail\n\n    trap ErrorHandling ERR INT\n\n    if [[ -z \"$ADDITIONAL_PLUGINS\" ]] || [[ \"$ADDITIONAL_PLUGINS\" == \"none\" ]]; then\n        echo\n        printinfo \"No 3rd party plugins to install\"\n        return 0\n    fi\n\n    echo\n    printprog \"Fetching 3rd party plugin(s) source code\"\n\n    # shellcheck disable=SC1117\n    local ADDITIONAL_PLUGIN_REGEX=\"^https?:\\/\\/.*.git$\"\n    local ADDITIONAL_PLUGIN\n    IFS=',' read -ra ADDITIONAL_PLUGIN <<<\"$ADDITIONAL_PLUGINS\"\n    for x in \"${ADDITIONAL_PLUGIN[@]}\"; do\n        if ! [[ $x =~ $ADDITIONAL_PLUGIN_REGEX ]]; then\n            echo\n            printfail \"$x format is not correct for 3rd party plugin, skipping..\"\n            continue\n        fi\n        local PLUGIN_NAME=$(runcmd_stdout \"basename '$x' | rev | cut -c 5- | rev\")\n        local PLUGIN_SRC_DIR=$(runcmd_stdout \"realpath -m '$XO_SRC_DIR/../$PLUGIN_NAME'\")\n\n        if [[ ! -d \"$PLUGIN_SRC_DIR\" ]]; then\n            runcmd \"mkdir -p \\\"$PLUGIN_SRC_DIR\\\"\"\n            runcmd \"git clone \\\"${x}\\\" \\\"$PLUGIN_SRC_DIR\\\"\"\n        else\n            runcmd \"cd \\\"$PLUGIN_SRC_DIR\\\" && git pull --ff-only\"\n            runcmd \"cd $SCRIPT_DIR\"\n        fi\n\n        runcmd \"cp -r $PLUGIN_SRC_DIR $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/\"\n    done\n\n    printok \"Fetching 3rd party plugin(s) source code\"\n}\n\n# symlink plugins in place based on what is set in xo-install.cfg\nfunction InstallXOPlugins {\n\n    set -euo pipefail\n\n    trap ErrorHandling ERR INT\n\n    if [[ -z \"$PLUGINS\" ]] || [[ \"$PLUGINS\" == \"none\" ]]; then\n        echo\n        printinfo \"No plugins to install\"\n        return 0\n    fi\n\n    echo\n    printprog \"Installing plugins\"\n\n    if [[ \"$PLUGINS\" == \"all\" ]]; then\n        # shellcheck disable=SC1117\n        runcmd \"find \\\"$INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/\\\" -maxdepth 1 -mindepth 1 -not -name \\\"xo-server\\\" -not -name \\\"xo-web\\\" -not -name \\\"xo-server-cloud\\\" -not -name \\\"xo-server-test*\\\" -exec ln -sn {} \\\"$INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/node_modules/\\\" \\;\"\n    else\n        local PLUGIN\n        IFS=',' read -ra PLUGIN <<<\"$PLUGINS\"\n        for x in \"${PLUGIN[@]}\"; do\n            if [[ $(runcmd_stdout \"find $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages -type d -name '$x'\") ]]; then\n                runcmd \"ln -sn $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/$x $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/node_modules/\"\n            fi\n        done\n    fi\n\n    printok \"Installing plugins\"\n\n}\n\n# install sudo package and generate config if defined in configuration\nfunction InstallSudo {\n\n    set -euo pipefail\n\n    trap ErrorHandling ERR INT\n\n    if [[ -z $(runcmd_stdout \"command -v sudo\") ]]; then\n        if [[ \"$PKG_FORMAT\" == \"deb\" ]]; then\n            echo\n            printprog \"Installing sudo\"\n            runcmd \"apt-get install -y sudo\"\n            printok \"Installing sudo\"\n        elif [[ \"$PKG_FORMAT\" == \"rpm\" ]]; then\n            printprog \"Installing sudo\"\n            runcmd \"dnf install -y sudo\"\n            printok \"Installing sudo\"\n        fi\n    fi\n\n    if [[ \"$GENSUDO\" == \"true\" ]] && [[ ! -f \"$SUDOERSFILE\" ]]; then\n        echo\n        printinfo \"Generating sudoers configuration to $SUDOERSFILE\"\n        TMPSUDOERS=\"$(mktemp /tmp/xo-sudoers.XXXXXX)\"\n        runcmd \"echo '$XOUSER ALL=(root) NOPASSWD: /bin/mount, /bin/umount, /bin/findmnt' > '$TMPSUDOERS'\"\n        if runcmd \"visudo -cf $TMPSUDOERS\"; then\n            runcmd \"mv $TMPSUDOERS $SUDOERSFILE\"\n        else\n            printfail \"sudoers syntax check failed, not activating $SUDOERSFILE\"\n            runcmd \"rm -f $TMPSUDOERS\"\n        fi\n    fi\n\n}\n\nfunction PrepInstall {\n\n    set -euo pipefail\n\n    trap ErrorHandling ERR INT\n\n    if [[ \"$XO_SVC\" == \"xo-server\" ]]; then\n        local XO_SVC_DESC=\"Xen Orchestra\"\n    fi\n    if [[ \"$XO_SVC\" == \"xo-proxy\" ]]; then\n        local XO_SVC_DESC=\"Xen Orchestra Proxy\"\n    fi\n\n    # Create installation directory if doesn't exist already\n    if [[ ! -d \"$INSTALLDIR\" ]]; then\n        echo\n        printinfo \"Creating missing basedir to $INSTALLDIR\"\n        runcmd \"mkdir -p \\\"$INSTALLDIR\\\"\"\n    fi\n\n    # Create missing xo-builds directory if doesn't exist already\n    if [[ ! -d \"$INSTALLDIR/xo-builds\" ]]; then\n        echo\n        printinfo \"Creating missing xo-builds directory to $INSTALLDIR/xo-builds\"\n        runcmd \"mkdir \\\"$INSTALLDIR/xo-builds\\\"\"\n    fi\n\n    echo\n    # keep the actual source code in one directory and either clone or git fetch depending on if directory exists already\n    printinfo \"Fetching $XO_SVC_DESC source code\"\n    if [[ ! -d \"$XO_SRC_DIR\" ]]; then\n        runcmd \"mkdir -p \\\"$XO_SRC_DIR\\\"\"\n        runcmd \"git clone \\\"${REPOSITORY}\\\" \\\"$XO_SRC_DIR\\\"\"\n    else\n        runcmd \"cd \\\"$XO_SRC_DIR\\\" && git remote set-url origin \\\"${REPOSITORY}\\\" && \\\n            git fetch --prune && \\\n            git reset --hard origin/master && \\\n            git clean -xdff\"\n    fi\n\n    # Deploy the latest xen-orchestra source to the new install directory.\n    echo\n    printinfo \"Creating install directory: $INSTALLDIR/xo-builds/xen-orchestra-$TIME\"\n    runcmd \"rm -rf \\\"$INSTALLDIR/xo-builds/xen-orchestra-$TIME\\\"\"\n    runcmd \"cp -r \\\"$XO_SRC_DIR\\\" \\\"$INSTALLDIR/xo-builds/xen-orchestra-$TIME\\\"\"\n\n    # checkout configured branch if not set as master\n    if [[ \"$BRANCH\" != \"master\" ]]; then\n        echo\n        printinfo \"Checking out source code from branch/commit '$BRANCH'\"\n\n        runcmd \"cd $INSTALLDIR/xo-builds/xen-orchestra-$TIME && git checkout $BRANCH\"\n        runcmd \"cd $SCRIPT_DIR\"\n    fi\n\n    # Check if the new repo is any different from the currently-installed\n    # one. If not, then skip the build and delete the repo we just cloned.\n\n    # Get the commit ID of the to-be-installed xen-orchestra.\n    local NEW_REPO_HASH=$(runcmd_stdout \"cd $INSTALLDIR/xo-builds/xen-orchestra-$TIME && git rev-parse HEAD\")\n    local NEW_REPO_HASH_SHORT=$(runcmd_stdout \"cd $INSTALLDIR/xo-builds/xen-orchestra-$TIME && git rev-parse --short HEAD\")\n    runcmd \"cd $SCRIPT_DIR\"\n\n    # Get the commit ID of the currently-installed xen-orchestra (if one\n    # exists).\n    if [[ -L \"$INSTALLDIR/$XO_SVC\" ]] && [[ -n $(runcmd_stdout \"readlink -e $INSTALLDIR/$XO_SVC\") ]]; then\n        local OLD_REPO_HASH=$(runcmd_stdout \"cd $INSTALLDIR/$XO_SVC && git rev-parse HEAD\")\n        local OLD_REPO_HASH_SHORT=$(runcmd_stdout \"cd $INSTALLDIR/$XO_SVC && git rev-parse --short HEAD\")\n        runcmd \"cd $SCRIPT_DIR\"\n    else\n        # If there's no existing installation, then we definitely want\n        # to proceed with the bulid.\n        local OLD_REPO_HASH=\"\"\n        local OLD_REPO_HASH_SHORT=\"\"\n    fi\n\n    # If the new install is no different from the existing install, then don't\n    # proceed with the build.\n    if [[ \"$NEW_REPO_HASH\" == \"$OLD_REPO_HASH\" ]] && [[ \"$FORCE\" != \"true\" ]]; then\n        echo\n        # if any non interactive arguments used in script startup, we don't want to show any prompts\n        if [[ \"$INTERACTIVE\" == \"true\" ]]; then\n            printinfo \"No changes to $XO_SVC_DESC since previous install. Run update anyway?\"\n            read -r -p \"[y/N]: \" answer\n            case \"$answer\" in\n                y)\n                    :\n                    ;;\n                *)\n                    printinfo \"Cleaning up install directory: $INSTALLDIR/xo-builds/xen-orchestra-$TIME\"\n                    runcmd \"rm -rf $INSTALLDIR/xo-builds/xen-orchestra-$TIME\"\n                    exit 0\n                    ;;\n            esac\n        else\n            printinfo \"No changes to $XO_SVC_DESC since previous install. Skipping build. Use the --force to update anyway.\"\n            printinfo \"Cleaning up install directory: $INSTALLDIR/xo-builds/xen-orchestra-$TIME\"\n            runcmd \"rm -rf $INSTALLDIR/xo-builds/xen-orchestra-$TIME\"\n            exit 0\n        fi\n    fi\n\n    # If this isn't a fresh install, then list the upgrade the user is making.\n    if [[ -n \"$OLD_REPO_HASH\" ]]; then\n        echo\n        if [[ \"$FORCE\" != \"true\" ]]; then\n            printinfo \"Updating $XO_SVC_DESC from '$OLD_REPO_HASH_SHORT' to '$NEW_REPO_HASH_SHORT'\"\n            echo \"Updating $XO_SVC_DESC from '$OLD_REPO_HASH_SHORT' to '$NEW_REPO_HASH_SHORT'\" >>\"$LOGFILE\"\n        else\n            printinfo \"Updating $XO_SVC_DESC (forced) from '$OLD_REPO_HASH_SHORT' to '$NEW_REPO_HASH_SHORT'\"\n            echo \"Updating $XO_SVC_DESC (forced) from '$OLD_REPO_HASH_SHORT' to '$NEW_REPO_HASH_SHORT'\" >>\"$LOGFILE\"\n        fi\n    else\n        echo\n        printinfo \"Installing $XO_SVC_DESC from branch: $BRANCH - commit: $NEW_REPO_HASH_SHORT\"\n        echo \"Installing $XO_SVC_DESC from branch: $BRANCH - commit: $NEW_REPO_HASH_SHORT\" >>\"$LOGFILE\"\n        TASK=\"Installation\"\n    fi\n\n}\n\n# run actual xen orchestra installation. procedure is the same for new installation and update. we always build it from scratch.\nfunction InstallXO {\n\n    set -euo pipefail\n\n    trap ErrorHandling ERR INT\n\n    # Create user if doesn't exist (if defined)\n\n    if [[ \"$XOUSER\" != \"root\" ]]; then\n        if [[ -z $(runcmd_stdout \"getent passwd $XOUSER\") ]]; then\n            echo\n            printprog \"Creating missing $XOUSER user\"\n            runcmd \"useradd -s /sbin/nologin $XOUSER -m\"\n            printok \"Creating missing $XOUSER user\"\n            CONFIGPATH=$(getent passwd \"$XOUSER\" | cut -d: -f6)\n        fi\n        if [[ \"$USESUDO\" == \"true\" ]]; then\n            InstallSudo\n        fi\n    fi\n\n    PrepInstall\n\n    # Fetch 3rd party plugins source code\n    InstallAdditionalXOPlugins\n\n    echo\n    printinfo \"xo-server and xo-web build takes quite a while. Grab a cup of coffee and lay back\"\n    echo\n    printprog \"Running installation\"\n    runcmd \"cd $INSTALLDIR/xo-builds/xen-orchestra-$TIME && yarn --network-timeout ${YARN_NETWORK_TIMEOUT} && yarn --network-timeout ${YARN_NETWORK_TIMEOUT} build\"\n    [ \"$INCLUDE_V6\" == \"true\" ] && runcmd \"cd $INSTALLDIR/xo-builds/xen-orchestra-$TIME && yarn --network-timeout ${YARN_NETWORK_TIMEOUT} run turbo run build --filter @xen-orchestra/web\"\n    printok \"Running installation\"\n\n    # Install plugins (takes care of 3rd party plugins as well)\n    InstallXOPlugins\n\n    # shutdown possibly running xo-server\n    if [[ $(runcmd_stdout \"pgrep -f '^([a-zA-Z0-9_\\/-]+?)node.*xo-server'\") ]]; then\n        echo\n        printprog \"Shutting down running xo-server\"\n        runcmd \"/bin/systemctl stop xo-server\" || {\n            printfail \"failed to stop service, exiting...\"\n            exit 1\n        }\n        printok \"Shutting down running xo-server\"\n        sleep 3\n    fi\n\n    echo\n    printinfo \"Fixing binary path in systemd service configuration file\"\n    # shellcheck disable=SC1117\n    runcmd \"sed -i \\\"s#ExecStart=.*#ExecStart=$INSTALLDIR\\/xo-server\\/dist\\/cli.mjs#\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/xo-server.service\"\n    printinfo \"Adding WorkingDirectory parameter to systemd service configuration file\"\n    # shellcheck disable=SC1117\n    runcmd \"sed -i \\\"/ExecStart=.*/a WorkingDirectory=$INSTALLDIR/xo-server\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/xo-server.service\"\n    if [[ -n \"$PATH_TO_HOST_CA\" ]]; then\n        printinfo \"Adding custom CA environment variable to systemd service configuration file\"\n        runcmd \"sed -i \\\"/Environment=.*/a Environment=NODE_EXTRA_CA_CERTS=$PATH_TO_HOST_CA\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/xo-server.service\"\n    fi\n\n    # if service not running as root, we need to deal with the fact that port binding might not be allowed\n    if [[ \"$XOUSER\" != \"root\" ]]; then\n        printinfo \"Adding user to systemd config\"\n        # shellcheck disable=SC1117\n        runcmd \"sed -i \\\"/SyslogIdentifier=.*/a User=$XOUSER\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/xo-server.service\"\n\n        if [ \"$PORT\" -le \"1024\" ]; then\n            local NODEBINARY=$(runcmd_stdout \"command -v node\")\n            if [[ -L \"$NODEBINARY\" ]]; then\n                local NODEBINARY=$(runcmd_stdout \"readlink -e $NODEBINARY\")\n            fi\n\n            if [[ -n \"$NODEBINARY\" ]]; then\n                printprog \"Attempting to set cap_net_bind_service permission for $NODEBINARY\"\n                runcmd \"setcap 'cap_net_bind_service=+ep' $NODEBINARY\" && printok \"Attempting to set cap_net_bind_service permission for $NODEBINARY\" ||\n                    {\n                        printfail \"Attempting to set cap_net_bind_service permission for $NODEBINARY\"\n                        echo \"\tNon-privileged user might not be able to bind to <1024 port. xo-server won't start most likely\"\n                    }\n            else\n                printfail \"Can't find node executable, or it's a symlink to non existing file. Not trying to setcap. xo-server won't start most likely\"\n            fi\n        fi\n    fi\n\n    # fix to prevent older installations to not update because systemd service is not symlinked anymore\n    if [[ $(runcmd_stdout \"find /etc/systemd/system -maxdepth 1 -type l -name 'xo-server.service'\") ]]; then\n        runcmd \"rm -f /etc/systemd/system/xo-server.service\"\n    fi\n\n    printinfo \"Replacing systemd service configuration file\"\n\n    # always replace systemd service configuration if it changes in future updates\n    runcmd \"/bin/cp -f $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/xo-server.service /etc/systemd/system/xo-server.service\"\n    sleep 2\n    printinfo \"Reloading systemd configuration\"\n    runcmd \"/bin/systemctl daemon-reload\"\n    sleep 2\n\n    # if xen orchestra configuration file doesn't exist or configuration update is not disabled in xo-install.cfg, we create it\n    if [[ ! -f \"$CONFIGPATH/.config/xo-server/config.toml\" ]] || [[ \"$CONFIGUPDATE\" == \"true\" ]]; then\n\n        echo\n        printinfo \"Fixing relative path to xo-web installation in xo-server configuration file\"\n        # shellcheck disable=SC1117\n        runcmd \"sed -i \\\"s%#'/any/url' = '/path/to/directory'%'/' = '$INSTALLDIR/xo-web/dist/'%\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n        printinfo \"Changing redis connection address in xo-server configuration file\"\n        runcmd \"sed -i \\\"s%#uri = 'redis://redis.company.lan/42'%uri = 'redis://127.0.0.1:6379/0'%\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n\n        if [[ \"$PORT\" != \"80\" ]]; then\n            printinfo \"Changing port in xo-server configuration file\"\n            # shellcheck disable=SC1117\n            runcmd \"sed -i \\\"s/port = 80/port = $PORT/\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n            sleep 2\n        fi\n\n        if [[ -n \"$LISTEN_ADDRESS\" ]]; then\n            printinfo \"Changing listen address in xo-server configuration file\"\n            runcmd \"sed -i \\\"s%^# hostname = 'localhost'%hostname = '$LISTEN_ADDRESS'%\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n        fi\n\n        if [[ \"$HTTPS\" == \"true\" ]]; then\n            printinfo \"Enabling HTTPS in xo-server configuration file\"\n            # shellcheck disable=SC1117\n            runcmd \"sed -i \\\"s%# cert = '.\\/certificate.pem'%cert = '$PATH_TO_HTTPS_CERT'%\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n            # shellcheck disable=SC1117\n            runcmd \"sed -i \\\"s%# key = '.\\/key.pem'%key = '$PATH_TO_HTTPS_KEY'%\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n            if [[ \"$AUTOCERT\" == \"true\" ]]; then\n                # shellcheck disable=SC1117\n                runcmd \"sed -i \\\"s%# autoCert = false%autoCert = true%\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n            fi\n            if [[ \"$ACME\" == \"true\" ]]; then\n                runcmd \"sed -i \\\"s%# \\[\\[http.listen\\]\\]%\\[\\[http.listen\\]\\]%\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n                runcmd \"sed -i \\\"s%# port = 443%port = 443%\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n                runcmd \"sed -i \\\"s%^# redirectToHttps = true%redirectToHttps = true%\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n                runcmd \"sed -i \\\"/^autoCert =.*/a acmeCa = '$ACME_CA'\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n                runcmd \"sed -i \\\"/^autoCert = .*/a acmeDomain = '$ACME_DOMAIN'\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n                if [[ -n \"$ACME_EMAIL\" ]]; then\n                    runcmd \"sed -i \\\"/^autoCert =.*/a acmeEmail = '$ACME_EMAIL'\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n                fi\n            fi\n            sleep 2\n        fi\n        if [[ \"$USESUDO\" == \"true\" ]] && [[ \"$XOUSER\" != \"root\" ]]; then\n            printinfo \"Enabling useSudo in xo-server configuration file\"\n            runcmd \"sed -i \\\"s/#useSudo = false/useSudo = true/\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n            printinfo \"Changing default mountsDir in xo-server configuration file\"\n            runcmd \"sed -i \\\"s%#mountsDir.*%mountsDir = '$INSTALLDIR/mounts'%\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n            runcmd \"mkdir -p $INSTALLDIR/mounts\"\n            runcmd \"chown $XOUSER:$XOUSER $INSTALLDIR/mounts\"\n        fi\n\n        if [[ -n \"$SYSLOG_TARGET\" ]]; then\n            printinfo \"Enabling remote syslog in xo-server configuration file\"\n            runcmd \"sed -i \\\"s%#\\[logs.transport.syslog\\]%\\[logs.transport.syslog\\]%\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n            runcmd \"sed -i \\\"/^\\[logs.transport.syslog.*/a target = '$SYSLOG_TARGET'\\\" $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml\"\n        fi\n\n        printinfo \"Activating modified configuration file\"\n        if ! [[ -d $CONFIGPATH/.config ]]; then\n            # create generic .config directory only if it doesn't exist as we set permissions to it\n            # this directory could potentially exist already and we don't want to override anything\n            runcmd \"install -o $XOUSER -g $XOUSER -m 770 -d $CONFIGPATH/.config\"\n        fi\n        runcmd \"mkdir -p $CONFIGPATH/.config/xo-server\"\n        runcmd \"mv -f $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server/sample.config.toml $CONFIGPATH/.config/xo-server/config.toml\"\n\n    fi\n\n    echo\n    # install/update is the same procedure so always symlink to most recent installation\n    printinfo \"Symlinking fresh xo-server install/update to $INSTALLDIR/xo-server\"\n    runcmd \"ln -sfn $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-server $INSTALLDIR/xo-server\"\n    sleep 2\n    printinfo \"Symlinking fresh xo-web install/update to $INSTALLDIR/xo-web\"\n    runcmd \"ln -sfn $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-web $INSTALLDIR/xo-web\"\n    sleep 2\n    printinfo \"Symlinking fresh xo-cli install/update to $INSTALLDIR/xo-cli\"\n    runcmd \"ln -sfn $INSTALLDIR/xo-builds/xen-orchestra-$TIME/packages/xo-cli $INSTALLDIR/xo-cli\"\n    printinfo \"Symlinking xo-cli script to /usr/local/bin/xo-cli\"\n    runcmd \"ln -sfn $INSTALLDIR/xo-cli/index.mjs /usr/local/bin/xo-cli\"\n\n    # if not running as root, xen orchestra startup might not be able to create data directory so we create it here just in case\n    if [[ \"$XOUSER\" != \"root\" ]]; then\n        runcmd \"chown -R $XOUSER:$XOUSER $INSTALLDIR/xo-builds/xen-orchestra-$TIME\"\n\n        if [ ! -d /var/lib/xo-server ]; then\n            runcmd \"mkdir /var/lib/xo-server\"\n        fi\n\n        runcmd \"chown -R $XOUSER:$XOUSER /var/lib/xo-server\"\n\n        runcmd \"chown -R $XOUSER:$XOUSER $CONFIGPATH/.config/xo-server\"\n\n    fi\n\n    echo\n    printinfo \"Starting xo-server...\"\n    runcmd \"/bin/systemctl start xo-server\"\n\n    # no need to exit/trap on errors anymore\n    set +eo pipefail\n    trap - ERR INT\n\n    VerifyServiceStart\n}\n\nfunction VerifyServiceStart {\n\n    set -u\n\n    if [[ \"$XO_SVC\" == \"xo-proxy\" ]]; then\n        local PORT=\"$PROXY_PORT\"\n    fi\n\n    PROXY_CONFIG_UPDATED=${PROXY_CONFIG_UPDATED:-\"false\"}\n\n    # loop service logs for 60 seconds and look for line that indicates service was started. we only care about lines generated after script was started (LOGTIME)\n    local count=0\n    local limit=6\n    # shellcheck disable=SC1117\n    local servicestatus=\"$(runcmd_stdout \"journalctl --since '$LOGTIME' -u $XO_SVC | grep 'Web server listening on https\\{0,1\\}:\\/\\/.*:$PORT'\")\"\n    while [[ -z \"$servicestatus\" ]] && [[ \"$count\" -lt \"$limit\" ]]; do\n        echo \" waiting for port to be open\"\n        sleep 10\n        # shellcheck disable=SC1117\n        local servicestatus=\"$(runcmd_stdout \"journalctl --since '$LOGTIME' -u $XO_SVC | grep 'Web server listening on https\\{0,1\\}:\\/\\/.*:$PORT'\")\"\n        ((count++))\n    done\n\n    # if it looks like service started successfully based on logs..\n    if [[ -n \"$servicestatus\" ]]; then\n        echo\n        if [[ \"$XO_SVC\" == \"xo-server\" ]]; then\n            echo -e \"       ${COLOR_GREEN}WebUI started in port $PORT. Make sure you have firewall rules in place to allow access.${COLOR_N}\"\n            # print username and password only when install was ran and skip while updating\n            if [[ \"$TASK\" == \"Installation\" ]]; then\n                echo -e \"       ${COLOR_GREEN}Default username: admin@admin.net password: admin${COLOR_N}\"\n            fi\n        fi\n        if [[ \"$XO_SVC\" == \"xo-proxy\" ]]; then\n            echo -e \"       ${COLOR_GREEN}Proxy started in port $PORT. Make sure you have firewall rules in place to allow access from xen orchestra.${COLOR_N}\"\n            # print json config only if config file was generated\n            if [[ \"$PROXY_CONFIG_UPDATED\" == \"true\" ]]; then\n                echo -e \"       ${COLOR_GREEN}Save following line as json file and use config import in Xen Orchestra to add proxy${COLOR_N}\"\n                echo\n                echo \"{\\\"proxies\\\":[{\\\"authenticationToken\\\":\\\"${PROXY_TOKEN}\\\",\\\"name\\\":\\\"${PROXY_NAME}\\\",\\\"vmUuid\\\":\\\"${PROXY_VM_UUID}\\\",\\\"id\\\":\\\"${PROXY_RANDOM_UUID}\\\"}]}\"\n            fi\n        fi\n        echo\n        printinfo \"$TASK successful. Enabling $XO_SVC service to start on reboot\"\n        echo \"\" >>\"$LOGFILE\"\n        echo \"$TASK succesful\" >>\"$LOGFILE\"\n        runcmd \"/bin/systemctl enable $XO_SVC\"\n        echo\n    # if service startup failed...\n    else\n        echo\n        printfail \"$TASK completed, but looks like there was a problem when starting $XO_SVC. Check $LOGFILE for more details\"\n        # shellcheck disable=SC2129\n        echo \"\" >>\"$LOGFILE\"\n        echo \"$TASK failed\" >>\"$LOGFILE\"\n        echo \"$XO_SVC service log:\" >>\"$LOGFILE\"\n        echo \"\" >>\"$LOGFILE\"\n        runcmd \"journalctl --since '$LOGTIME' -u $XO_SVC >> $LOGFILE\"\n        echo\n        echo \"Control $XO_SVC service with systemctl for stop/start/restart etc.\"\n        exit 1\n    fi\n\n}\n\n# run xen orchestra installation but also cleanup old installations based on value in xo-install.cfg\nfunction UpdateXO {\n\n    if [[ \"$XO_SVC\" == \"xo-server\" ]]; then\n        InstallXO\n    fi\n    if [[ \"$XO_SVC\" == \"xo-proxy\" ]]; then\n        InstallXOProxy\n    fi\n\n    set -uo pipefail\n\n    if [[ \"$PRESERVE\" == \"0\" ]]; then\n        printinfo \"PRESERVE variable is set to 0. This needs to be at least 1. Not doing a cleanup\"\n        return 0\n    fi\n\n    # remove old builds. leave as many as defined in PRESERVE variable\n    printprog \"Removing old inactive installations after update. Leaving $PRESERVE latest\"\n    local INSTALLATIONS=\"$(runcmd_stdout \"find $INSTALLDIR/xo-builds/ -maxdepth 1 -type d -name \\\"xen-orchestra*\\\" -printf \\\"%T@ %p\\\\n\\\" | sort -n | cut -d' ' -f2- | head -n -$PRESERVE\")\"\n    local XO_SERVER_ACTIVE=\"$(runcmd_stdout \"readlink -e $INSTALLDIR/xo-server\")\"\n    local XO_WEB_ACTIVE=\"$(runcmd_stdout \"readlink -e $INSTALLDIR/xo-web\")\"\n    local XO_PROXY_ACTIVE=\"$(runcmd_stdout \"readlink -e $INSTALLDIR/xo-proxy\")\"\n\n    for DELETABLE in $INSTALLATIONS; do\n        if [[ \"$XO_SERVER_ACTIVE\" != \"${DELETABLE}\"* ]] && [[ \"$XO_WEB_ACTIVE\" != \"${DELETABLE}\"* ]] && [[ \"$XO_PROXY_ACTIVE\" != \"${DELETABLE}\"* ]]; then\n            runcmd \"rm -rf $DELETABLE\"\n        fi\n    done\n    printok \"Removing old inactive installations after update. Leaving $PRESERVE latest\"\n    echo\n\n    # clear yarn cache if defined in configuration\n    if [[ \"$YARN_CACHE_CLEANUP\" == \"true\" ]]; then\n        printprog \"Cleaning yarn cache\"\n        runcmd \"yarn cache clean\"\n        printok \"Cleaning yarn cache\"\n        echo\n    fi\n}\n\nfunction InstallXOProxy {\n\n    set -euo pipefail\n\n    PrepInstall\n\n    echo\n    printinfo \"xo-proxy build takes quite a while. Grab a cup of coffee and lay back\"\n    echo\n    printprog \"Running installation\"\n    runcmd \"cd $INSTALLDIR/xo-builds/xen-orchestra-$TIME && yarn --network-timeout ${YARN_NETWORK_TIMEOUT} && yarn --network-timeout ${YARN_NETWORK_TIMEOUT} build\"\n    printok \"Running installation\"\n\n    # shutdown possibly running xo-server\n    if [[ $(runcmd_stdout \"pgrep -f '^([a-zA-Z0-9_\\/-]+?)node.*xo-proxy'\") ]]; then\n        echo\n        printprog \"Shutting down running xo-proxy\"\n        runcmd \"/bin/systemctl stop xo-proxy\" || {\n            printfail \"failed to stop service, exiting...\"\n            exit 1\n        }\n        printok \"Shutting down running xo-proxy\"\n        sleep 3\n    fi\n\n    echo\n    printinfo \"Disabling license check in proxy to enable running it in XO from sources\"\n\n    cat <<-EOF | runcmd \"patch --fuzz=0 --no-backup-if-mismatch $INSTALLDIR/xo-builds/xen-orchestra-$TIME/@xen-orchestra/proxy/app/mixins/appliance.mjs\"\n--- appliance.mjs~\t2022-03-30 15:28:52.360814994 +0300\n+++ appliance.mjs\t2022-03-30 15:27:57.823598169 +0300\n@@ -153,10 +153,13 @@\n\n   // A proxy can be bound to a unique license\n   getSelfLicense() {\n-    return Disposable.use(getUpdater(), async updater => {\n-      const licenses = await updater.call('getSelfLicenses')\n-      const now = Date.now()\n-      return licenses.find(({ expires }) => expires === undefined || expires > now)\n-    })\n+  // modified by XenOrchestraInstallerUpdater\n+  //\n+  //  return Disposable.use(getUpdater(), async updater => {\n+  //    const licenses = await updater.call('getSelfLicenses')\n+  //    const now = Date.now()\n+  //    return licenses.find(({ expires }) => expires === undefined || expires > now)\n+  //  })\n+    return true\n   }\n }\nEOF\n\n    echo\n    printinfo \"Generate systemd service configuration file\"\n\n    cat <<EOF >/etc/systemd/system/xo-proxy.service\n[Unit]\nDescription=xo-proxy\nAfter=network-online.target\n\n[Service]\nExecStart=$INSTALLDIR/xo-proxy/index.mjs\nRestart=always\nSyslogIdentifier=xo-proxy\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n    printinfo \"Reloading systemd configuration\"\n    runcmd \"/bin/systemctl daemon-reload\"\n\n    # if xen orchestra proxy configuration file doesn't exist we create it here\n\n    if [[ ! -f \"$CONFIGPATH_PROXY/.config/xo-proxy/config.toml\" ]]; then\n        PROXY_VM_UUID=\"$(dmidecode -t system | grep UUID | awk '{print $NF}')\"\n        PROXY_RANDOM_UUID=\"$(cat /proc/sys/kernel/random/uuid)\"\n        PROXY_TOKEN=\"$(head -n50 /dev/urandom | tr -dc A-Z-a-z0-9_- | head -c 43)\"\n        PROXY_NAME=\"xo-ce-proxy-$TIME\"\n        PROXY_CONFIG_UPDATED=\"true\"\n        echo\n        printinfo \"No xo-proxy configuration present, copying default config to $CONFIGPATH_PROXY/.config/xo-proxy/config.toml\"\n        runcmd \"mkdir -p $CONFIGPATH_PROXY/.config/xo-proxy\"\n        runcmd \"cp $INSTALLDIR/xo-builds/xen-orchestra-$TIME/@xen-orchestra/proxy/config.toml $CONFIGPATH_PROXY/.config/xo-proxy/config.toml\"\n\n        printinfo \"Adding authentication token to xo-proxy config\"\n        runcmd \"sed -i \\\"s/^authenticationToken = .*/authenticationToken = '$PROXY_TOKEN'/\\\" $CONFIGPATH_PROXY/.config/xo-proxy/config.toml\"\n        if [[ \"$PROXY_PORT\" != \"443\" ]]; then\n            printinfo \"Updating proxy port config\"\n            runcmd \"sed -i \\\"s/port = 443/port = $PROXY_PORT/\\\" $CONFIGPATH_PROXY/.config/xo-proxy/config.toml\"\n        fi\n    fi\n\n    echo\n    printinfo \"Symlinking fresh xo-proxy install/update to $INSTALLDIR/xo-proxy\"\n    runcmd \"ln -sfn $INSTALLDIR/xo-builds/xen-orchestra-$TIME/@xen-orchestra/proxy $INSTALLDIR/xo-proxy\"\n\n    echo\n    printinfo \"Starting xo-proxy...\"\n    runcmd \"/bin/systemctl start xo-proxy\"\n\n    # no need to exit/trap on errors anymore\n    set +eo pipefail\n    trap - ERR INT\n\n    VerifyServiceStart\n}\n\n# if any arguments were given to script, handle them here\nfunction HandleArgs {\n\n    OPTS=$(getopt -o: --long force,rollback,update,install,proxy -- \"$@\")\n\n    #shellcheck disable=SC2181\n    if [[ $? != 0 ]]; then\n        echo \"Usage: $SCRIPT_DIR/$(basename \"$0\") [--install | --update | --rollback ] [--proxy] [--force]\"\n        exit 1\n    fi\n\n    eval set -- \"$OPTS\"\n\n    local UPDATEARG=0\n    local INSTALLARG=0\n    local ROLLBACKARG=0\n    local PROXYARG=0\n\n    while true; do\n        case \"$1\" in\n            --force)\n                shift\n                FORCE=\"true\"\n                ;;\n            --update)\n                shift\n                local UPDATEARG=1\n                TASK=\"Update\"\n                ;;\n            --install)\n                shift\n                local INSTALLARG=1\n                TASK=\"Installation\"\n                ;;\n            --rollback)\n                shift\n                local ROLLBACKARG=1\n                ;;\n            --proxy)\n                shift\n                local PROXYARG=1\n                ;;\n            --)\n                shift\n                break\n                ;;\n            *)\n                shift\n                break\n                ;;\n        esac\n    done\n\n    # can't run more than one task at the same time\n    if [[ \"$((INSTALLARG + UPDATEARG + ROLLBACKARG))\" -gt 1 ]]; then\n        echo \"Define either install/update or rollback\"\n        exit 1\n    fi\n\n    if [[ \"$UPDATEARG\" -gt 0 ]]; then\n        UpdateNodeYarn\n        if [[ \"$PROXYARG\" -gt 0 ]]; then\n            XO_SVC=\"xo-proxy\"\n            UpdateXO\n        else\n            XO_SVC=\"xo-server\"\n            UpdateXO\n        fi\n        exit\n    fi\n\n    if [[ \"$INSTALLARG\" -gt 0 ]]; then\n        if [ \"$PKG_FORMAT\" == \"rpm\" ]; then\n            InstallDependenciesRPM\n        else\n            InstallDependenciesDeb\n        fi\n\n        if [[ \"$PROXYARG\" -gt 0 ]]; then\n            XO_SVC=\"xo-proxy\"\n            InstallXOProxy\n        else\n            XO_SVC=\"xo-server\"\n            InstallXO\n        fi\n        exit\n    fi\n\n    if [[ \"$ROLLBACKARG\" -gt 0 ]]; then\n        RollBackInstallation\n        exit\n    fi\n\n}\n\n# all updates are individual complete installations so we have a possibility to rollback by just symlinking to different installation\nfunction RollBackInstallation {\n\n    set -uo pipefail\n\n    local INSTALLATIONS=($(runcmd_stdout \"find '$INSTALLDIR/xo-builds/' -maxdepth 1 -type d -name 'xen-orchestra-*'\"))\n\n    if [[ ${#INSTALLATIONS[@]} -le 1 ]]; then\n        printinfo \"One or less installations exist, nothing to change\"\n        exit 0\n    fi\n\n    if [[ -L \"$INSTALLDIR/xo-proxy\" ]] && [[ -n $(runcmd_stdout \"readlink -e $INSTALLDIR/xo-proxy\") ]]; then\n        if [[ -L \"$INSTALLDIR/xo-server\" ]] && [[ -n $(runcmd_stdout \"readlink -e $INSTALLDIR/xo-server\") ]]; then\n            echo \"Looks like proxy AND xen orchestra are installed. Which one you want to rollback?\"\n            echo \"1. Xen Orchestra\"\n            echo \"2. Xen Orchestra Proxy\"\n            echo \"3. Exit\"\n            read -r -p \": \" answer\n            case $answer in\n                1)\n                    XO_SVC=\"xo-server\"\n                    ;;\n                2)\n                    XO_SVC=\"xo-proxy\"\n                    ;;\n                3)\n                    exit\n                    ;;\n                *)\n                    exit\n                    ;;\n            esac\n        else\n            XO_SVC=\"xo-proxy\"\n        fi\n    else\n        XO_SVC=\"xo-server\"\n    fi\n\n    echo \"Which installation to roll back?\"\n    echo\n    local PS3=\"Pick a number. CTRL+C to exit: \"\n    local INSTALLATION\n    select INSTALLATION in \"${INSTALLATIONS[@]}\"; do\n        case $INSTALLATION in\n            *xen-orchestra*)\n                echo\n                if [[ \"$XO_SVC\" == \"xo-server\" ]]; then\n                    printinfo \"Setting $INSTALLDIR/xo-server symlink to $INSTALLATION/packages/xo-server\"\n                    runcmd \"ln -sfn $INSTALLATION/packages/xo-server $INSTALLDIR/xo-server\"\n                    printinfo \"Setting $INSTALLDIR/xo-web symlink to $INSTALLATION/packages/xo-web\"\n                    runcmd \"ln -sfn $INSTALLATION/packages/xo-web $INSTALLDIR/xo-web\"\n                    printinfo \"Setting $INSTALLDIR/xo-cli symlink to $INSTALLATION/packages/xo-cli\"\n                    runcmd \"ln -sfn $INSTALLATION/packages/xo-cli $INSTALLDIR/xo-cli\"\n                    echo\n                    printinfo \"Replacing xo.server.service systemd configuration file\"\n                    runcmd \"/bin/cp -f $INSTALLATION/packages/xo-server/xo-server.service /etc/systemd/system/xo-server.service\"\n                    runcmd \"/bin/systemctl daemon-reload\"\n                    echo\n                    printinfo \"Restarting xo-server...\"\n                    runcmd \"/bin/systemctl restart xo-server\"\n                    echo\n                    break\n                fi\n                if [[ \"$XO_SVC\" == \"xo-proxy\" ]]; then\n                    printinfo \"Setting $INSTALLDIR/xo-proxy symlink to $INSTALLATION/@xen-orchestra/proxy\"\n                    runcmd \"ln -sfn $INSTALLATION/@xen-orchestra/proxy $INSTALLDIR/xo-proxy\"\n                    echo\n                    printinfo \"Restating xo-proxy...\"\n                    runcmd \"/bin/systemctl restart xo-proxy\"\n                    echo\n                    break\n                fi\n                ;;\n            *)\n                printfail \"Try again\"\n                ;;\n        esac\n    done\n\n}\n\n# only specific list of operating systems are supported. check operating system name/version here\nfunction CheckOS {\n\n    OSVERSION=$(runcmd_stdout \"grep ^VERSION_ID /etc/os-release | cut -d'=' -f2 | grep -Eo '[0-9]{1,2}' | head -1\")\n    OSNAME=$(runcmd_stdout \"grep ^NAME /etc/os-release | cut -d'=' -f2 | sed 's/\\\"//g' | awk '{print \\$1}'\")\n\n    # check that were not on official XOA VM. if yes, bail out\n    if [[ $(runcmd_stdout \"grep ^GRUB_DISTRIBUTOR /etc/default/grub | grep 'Xen Orchestra'\") ]]; then\n        printfail \"Looks like this is the official XOA VM. Installation not supported, exiting\"\n        exit 1\n    fi\n\n    if [[ $(runcmd_stdout \"command -v dnf\") ]]; then\n        PKG_FORMAT=\"rpm\"\n    fi\n\n    if [[ $(runcmd_stdout \"command -v apt-get\") ]]; then\n        PKG_FORMAT=\"deb\"\n    fi\n\n    # hard dependency which we can't skip so bail out if no dnf/apt-get present\n    if [[ -z \"$PKG_FORMAT\" ]]; then\n        printfail \"this script requires either dnf or apt-get\"\n        exit 1\n    fi\n\n    # OS check can be skipped in xo-install.cfg for experimental purposes, skip the rest of this function if set to false\n    if [[ \"$OS_CHECK\" != \"true\" ]]; then\n        return 0\n    fi\n\n    if [[ ! \"$OSNAME\" =~ ^(Debian|Ubuntu|CentOS|Rocky|AlmaLinux)$ ]]; then\n        printfail \"Only Ubuntu/Debian/CentOS/Rocky/AlmaLinux supported\"\n        exit 1\n    fi\n\n    if [[ \"$OSNAME\" == \"CentOS\" ]] && [[ ! \"$OSVERSION\" =~ ^(8|9)$ ]]; then\n        printfail \"Only CentOS 8/9 supported\"\n        exit 1\n    fi\n\n    if [[ \"$OSNAME\" == \"Rocky\" ]] && [[ ! \"$OSVERSION\" =~ ^(8|9)$ ]]; then\n        printfail \"Only Rocky Linux 8/9 supported\"\n        exit 1\n    fi\n\n    if [[ \"$OSNAME\" == \"AlmaLinux\" ]] && [[ ! \"$OSVERSION\" =~ ^(8|9)$ ]]; then\n        printfail \"Only AlmaLinux 8/9 supported\"\n        exit 1\n    fi\n\n    if [[ \"$OSNAME\" == \"Debian\" ]] && [[ ! \"$OSVERSION\" =~ ^(10|11|12)$ ]]; then\n        printfail \"Only Debian 10/11/12 supported\"\n        exit 1\n    fi\n\n    if [[ \"$OSNAME\" == \"Ubuntu\" ]] && [[ ! \"$OSVERSION\" =~ ^(20|22|24)$ ]]; then\n        printfail \"Only Ubuntu 20/22/24 supported\"\n        exit 1\n    fi\n\n}\n\n# we don't want anyone to attempt running this on xcp-ng/xenserver host, bail out if xe command is present\nfunction CheckXE {\n\n    if [[ $(runcmd_stdout \"command -v xe\") ]]; then\n        printfail \"xe binary found, don't try to run install on xcp-ng/xenserver host. use xo-vm-import.sh instead\"\n        exit 1\n    fi\n}\n\n# x86_64 is defined as one of the requirements in xen orchestra documentation so we want to check that's the case\n# https://xen-orchestra.com/docs/from_the_sources.html\nfunction CheckArch {\n\n    # can be disabled in xo-install.cfg for experimental purposes\n    if [[ \"$ARCH_CHECK\" != \"true\" ]]; then\n        return 0\n    fi\n\n    if [[ $(runcmd_stdout \"uname -m\") != \"x86_64\" ]]; then\n        printfail \"Installation supports only x86_64. You seem to be running architecture: $(uname -m)\"\n        exit 1\n    fi\n}\n\n# script does alot of systemd related stuff so it's a hard requirement. bail out if not present\nfunction CheckSystemd {\n\n    if [[ -z $(runcmd_stdout \"command -v systemctl\") ]]; then\n        printfail \"This tool is designed to work with systemd enabled systems only\"\n        exit 1\n    fi\n}\n\n# do not let the user define non functional cert/key pair\nfunction CheckCertificate {\n    if [[ \"$HTTPS\" == \"true\" ]]; then\n        # if defined cert/key files don't exist and autocert is set to true, skip verification. Otherwise bail out.\n        if [[ ! -f \"$PATH_TO_HTTPS_CERT\" ]] && [[ ! -f \"$PATH_TO_HTTPS_KEY\" ]]; then\n            if [[ \"$AUTOCERT\" == \"true\" ]]; then\n                return 0\n            else\n                printfail \"Configured certificate: $PATH_TO_HTTPS_CERT and key: $PATH_TO_HTTPS_KEY missing. Check files and try again\"\n                exit 1\n            fi\n        fi\n        # if defined cert/key files exist. check that they're compatible with each other.\n        local CERT=\"$(runcmd_stdout \"openssl x509 -pubkey -noout -in $PATH_TO_HTTPS_CERT | openssl md5\")\"\n        local KEY=\"$(runcmd_stdout \"openssl pkey -pubout -in $PATH_TO_HTTPS_KEY -outform PEM | openssl md5\")\"\n        if [[ \"$CERT\" != \"$KEY\" ]]; then\n            echo\n            printinfo \"$PATH_TO_HTTPS_CERT:\"\n            printinfo \"$CERT\"\n            printinfo \"$PATH_TO_HTTPS_KEY:\"\n            printinfo \"$KEY\"\n            echo\n            printfail \"MD5 of your TLS key and certificate dont match. Please check files and try again.\"\n            exit 1\n        fi\n    fi\n\n}\n\n# building xen orchestra from source is quite memory heavy and there has been cases with OOM when running with less than 3GB of memory. warn if running less\nfunction CheckMemory {\n    local SYSMEM=$(runcmd_stdout \"grep MemTotal /proc/meminfo | awk '{print \\$2}'\")\n\n    if [[ \"$SYSMEM\" -lt 3000000 ]]; then\n        echo -e \"${COLOR_RED}WARNING: you have less than 3GB of RAM in your system. Installation might run out of memory${COLOR_N}\"\n        # no prompt when running non interactive options\n        if [[ \"$INTERACTIVE\" == \"false\" ]]; then\n            return 0\n        fi\n        read -r -p \"continue anyway? y/N: \" answer\n        case $answer in\n            y)\n                :\n                ;;\n            *)\n                exit 0\n                ;;\n        esac\n    fi\n\n}\n\n# we don't want to fill disk with new install/update so warn if there is too little disk space available\nfunction CheckDiskFree {\n    local FREEDISK=$(runcmd_stdout \"df -P -k '${INSTALLDIR%/*}' | tail -1 | awk '{print \\$4}'\")\n\n    if [[ \"$FREEDISK\" -lt 1048576 ]]; then\n        echo -e \"${COLOR_RED}WARNING: free disk space in ${INSTALLDIR%/*} seems to be less than 1GB. Install/update will most likely fail${COLOR_N}\"\n        # no prompt when running non interactive options\n        if [[ \"$INTERACTIVE\" == \"false\" ]]; then\n            return 0\n        fi\n        read -r -p \"continue anyway? y/N: \" answer\n        case $answer in\n            y)\n                :\n                ;;\n            *)\n                exit 0\n                ;;\n        esac\n    fi\n}\n\n# interactive menu for different options\nfunction StartUpScreen {\n\n    echo \"-----------------------------------------\"\n    echo\n    echo \"Welcome to automated Xen Orchestra install\"\n    echo\n    echo \"Following options will be used for installation:\"\n    echo\n    echo -e \"OS: ${COLOR_WHITE}$OSNAME $OSVERSION ${COLOR_N}\"\n    echo -e \"Basedir: ${COLOR_WHITE}$INSTALLDIR ${COLOR_N}\"\n    echo -e \"User: ${COLOR_WHITE}$XOUSER ${COLOR_N}\"\n    echo -e \"Port: ${COLOR_WHITE}$PORT${COLOR_N}\"\n    if [[ -n \"$LISTEN_ADDRESS\" ]]; then\n        echo -e \"Listen address: ${COLOR_WHITE}$LISTEN_ADDRESS${COLOR_N}\"\n    fi\n    echo -e \"HTTPS: ${COLOR_WHITE}${HTTPS}${COLOR_N}\"\n    echo -e \"Git Branch for source: ${COLOR_WHITE}$BRANCH${COLOR_N}\"\n    echo -e \"Following plugins will be installed: ${COLOR_WHITE}$PLUGINS${COLOR_N}\"\n    echo -e \"Number of previous installations to preserve: ${COLOR_WHITE}$PRESERVE${COLOR_N}\"\n    echo -e \"Node.js and yarn auto update: ${COLOR_WHITE}$AUTOUPDATE${COLOR_N}\"\n    echo\n    echo -e \"Errorlog is stored to ${COLOR_WHITE}$LOGFILE${COLOR_N} for debug purposes\"\n    echo\n    echo \"Depending on which installation is chosen:\"\n    echo\n    echo -e \"Xen Orchestra configuration will be stored to ${COLOR_WHITE}$CONFIGPATH/.config/xo-server/config.toml${COLOR_N}, if you don't want it to be replaced with every update, set ${COLOR_WHITE}CONFIGUPDATE${COLOR_N} to false in ${COLOR_WHITE}xo-install.cfg${COLOR_N}\"\n    echo -e \"Xen Orchestra Proxy configuration will be stored to ${COLOR_WHITE}$CONFIGPATH_PROXY/.config/xo-proxy/config.toml${COLOR_N}. Config won't be overwritten during update, ever\"\n    echo \"-----------------------------------------\"\n\n    echo\n    echo -e \"${COLOR_WHITE}1. Install${COLOR_N}\"\n    echo -e \"${COLOR_WHITE}2. Update${COLOR_N}\"\n    echo -e \"${COLOR_WHITE}3. Rollback${COLOR_N}\"\n    echo -e \"${COLOR_WHITE}4. Install proxy${COLOR_N}\"\n    echo -e \"${COLOR_WHITE}5. Update proxy${COLOR_N}\"\n    echo -e \"${COLOR_WHITE}6. Exit${COLOR_N}\"\n    echo\n    read -r -p \": \" option\n\n    case $option in\n        1)\n            if [[ $(runcmd_stdout \"pgrep -f '^([a-zA-Z0-9_\\/-]+?)node.*xo-server'\") ]]; then\n                echo \"Looks like xo-server process is already running, consider running update instead. Continue anyway?\"\n                read -r -p \"[y/N]: \" answer\n                case $answer in\n                    y)\n                        echo \"Stopping xo-server...\"\n                        runcmd \"/bin/systemctl stop xo-server\" ||\n                            {\n                                printfail \"failed to stop service, exiting...\"\n                                exit 1\n                            }\n                        ;;\n                    n)\n                        exit 0\n                        ;;\n                    *)\n                        exit 0\n                        ;;\n                esac\n            fi\n\n            TASK=\"Installation\"\n            XO_SVC=\"xo-server\"\n\n            if [ \"$PKG_FORMAT\" == \"rpm\" ]; then\n                InstallDependenciesRPM\n                InstallXO\n                exit 0\n            fi\n            if [ \"$PKG_FORMAT\" == \"deb\" ]; then\n                InstallDependenciesDeb\n                InstallXO\n                exit 0\n            fi\n            ;;\n        2)\n            TASK=\"Update\"\n            XO_SVC=\"xo-server\"\n            UpdateNodeYarn\n            UpdateXO\n            exit 0\n            ;;\n        3)\n            RollBackInstallation\n            exit 0\n            ;;\n        4)\n            if [[ $(runcmd_stdout \"pgrep -f '^([a-zA-Z0-9_\\/-]+?)node.*xo-proxy'\") ]]; then\n                echo \"Looks like xo-proxy process is already running, consider running update instead. Continue anyway?\"\n                read -r -p \"[y/N]: \" answer\n                case $answer in\n                    y)\n                        echo \"Stopping xo-proxy...\"\n                        runcmd \"/bin/systemctl stop xo-proxy\" ||\n                            {\n                                printfail \"failed to stop service, exiting...\"\n                                exit 1\n                            }\n                        ;;\n                    *)\n                        exit 0\n                        ;;\n                esac\n            fi\n\n            TASK=\"Installation\"\n            XO_SVC=\"xo-proxy\"\n\n            if [[ \"$PKG_FORMAT\" == \"rpm\" ]]; then\n                InstallDependenciesRPM\n                InstallXOProxy\n                exit 0\n            fi\n            if [[ \"$PKG_FORMAT\" == \"deb\" ]]; then\n                InstallDependenciesDeb\n                InstallXOProxy\n                exit 0\n            fi\n            ;;\n\n        5)\n            TASK=\"Update\"\n            XO_SVC=\"xo-proxy\"\n            UpdateNodeYarn\n            UpdateXO\n            exit 0\n            ;;\n        6)\n            exit 0\n            ;;\n        *)\n            echo \"Please choose one of the options\"\n            echo\n            exit 0\n            ;;\n    esac\n\n}\n\n# Protocol to use for webserver. If both of the X.509 certificate paths are defined,\n# then assume that we want to enable HTTPS for the server.\nif [[ -n \"$PATH_TO_HTTPS_CERT\" ]] && [[ -n \"$PATH_TO_HTTPS_KEY\" ]]; then\n    HTTPS=true\nelse\n    HTTPS=false\nfi\n\n# Override port to 80, set https true and autocert to true if letsencrypt\nif [[ \"$ACME\" == \"true\" ]]; then\n    if [[ -z \"$ACME_DOMAIN\" ]]; then\n        printfail \"ACME_DOMAIN needs to be set when using ACME\"\n        exit 1\n    fi\n    PORT=\"80\"\n    HTTPS=\"true\"\n    AUTOCERT=\"true\"\n    PATH_TO_HTTPS_CERT=\"${PATH_TO_HTTPS_CERT:-\"./certificate.pem\"}\"\n    PATH_TO_HTTPS_KEY=\"${PATH_TO_HTTPS_KEY:-\"./key.pem\"}\"\nfi\n\n# if no arguments given, we assume interactive mode.\n# set here because some of the following checks either prompt user input or not.\nif [[ $# == \"0\" ]]; then\n    INTERACTIVE=\"true\"\nfi\n\n# these functions check specific requirements and are run everytime\nSelfUpgrade \"$@\"\nScriptInfo\nCheckUser\nCheckArch\nCheckXE\nCheckOS\nCheckSystemd\nCheckCertificate\n# skip disk/memory check when using rollback as nothing new installed\nif [[ \"$1\" != \"--rollback\" ]]; then\n    CheckDiskFree\n    CheckMemory\nfi\n\nif [[ $# != \"0\" ]]; then\n    HandleArgs \"$@\"\n    exit 0\nelse\n    # menu starts only when no args given\n    StartUpScreen\nfi\n"
        },
        {
          "name": "xo-vm-import.sh",
          "type": "blob",
          "size": 8.3408203125,
          "content": "#!/bin/bash\n\n#########################################################################\n# Title: XenOrchestraInstallerUpdater                                   #\n# Author: Roni Väyrynen                                                 #\n# Repository: https://github.com/ronivay/XenOrchestraInstallerUpdater   #\n#########################################################################\n\n# image url is static and not configurable by user\nIMAGE_URL=\"https://xo-image.yawn.fi/downloads/image.xva.gz\"\n\nfunction OSCheck {\n    set -e\n\n    if [[ -z $(command -v xe 2>/dev/null) ]]; then\n        echo \"this scripts needs xe command. make sure you're on xenserver/xcp-ng host\"\n        exit 1\n    fi\n\n    echo\n    echo \"Welcome. This script will import a preconfigured Debian 11 VM image which has Xen Orchestra installed using https://github.com/ronivay/XenOrchestraInstallerUpdater\"\n    echo \"You need at least 2vCPU/4GB/10GB disk free resources to import VM\"\n    echo\n    echo \"Please report any issues to this github project\"\n    echo\n\n}\n\nfunction NetworkChoose {\n\n    set +e\n\n    # get network name/uuid of all available networks configured in the pool\n    # shellcheck disable=SC1117\n    IFS=$'\\n' read -r -d '' -a networks <<<\"$(xe network-list | grep \"uuid\\|name-label\" | cut -d':' -f2 | sed 's/^ //' | paste - -)\"\n\n    echo\n    echo \"Which network should the VM use?\"\n    echo\n    local PS3=\"Pick a number. CTRL+C to exit: \"\n    select network in \"${networks[@]}\"; do\n        # get only the network uuid from array which we need later on when adding vif\n        read -r -a network_split <<<\"$network\"\n        networkuuid=${network_split[0]}\n\n        # print a menu where to choose network from\n        case $network in\n            *)\n                # save network uuid for later\n                vifuuid=\"$networkuuid\"\n                break\n                ;;\n        esac\n    done\n\n}\n\nfunction StorageChoose {\n\n    set +e\n\n    # get storage name/uuid of all available storages with content-type=user which should match all usable storage repositories\n    # shellcheck disable=SC1117\n    IFS=$'\\n' read -r -d '' -a storages <<<\"$(xe sr-list content-type=user | grep \"uuid\\|name-description\" | cut -d':' -f2 | sed 's/^ //' | paste - -)\"\n\n    # bail out if no storage repositories are found\n    if [[ ${#storages[@]} -eq 0 ]]; then\n        echo \"No storage repositories found, can't import VM\"\n        echo \"Create SR and try again. More information: https://xcp-ng.org/docs/storage.html\"\n        exit 1\n    fi\n\n    echo \"Which storage repository should the VM use?\"\n    echo \"default will attempt to use pool default SR\"\n    echo\n    local PS3=\"Pick a number. CTRL+C to exit: \"\n    select storage in \"${storages[@]}\" \"default\"; do\n        # get only the storage repository uuid which we need later on when importing image\n        read -r -a storage_split <<<\"$storage\"\n        storageuuid=${storage_split[0]}\n\n        # print a menu where to choose storage from\n        case $storage in\n            default)\n                # this value is handled during import if set to default\n                sruuid=default\n                break\n                ;;\n            *)\n                # save storage uuid for later\n                sruuid=$storageuuid\n                break\n                ;;\n        esac\n    done\n\n}\n\nfunction NetworkSettings {\n\n    set -e\n\n    ipregex=\"^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$\"\n\n    echo\n    echo \"Set network settings for VM. Leave IP-address as blank to use DHCP\"\n    echo\n\n    # read ip address from user input. dhcp is default if left empty\n    read -r -p \"IP address: \" ipaddress\n    ipaddress=${ipaddress:-dhcp}\n\n    # if not using dhcp, we need more information\n    if [[ \"$ipaddress\" != \"dhcp\" ]]; then\n        # get network details from user and prompt again if input doesn't match ip address regex\n        while ! [[ $ipaddress =~ $ipregex ]]; do\n            echo \"Check IP address format\"\n            read -r -p \"IP address: \" ipaddress\n        done\n        read -r -p \"Netmask [255.255.255.0]: \" netmask\n        netmask=${netmask:-255.255.255.0}\n        while ! [[ $netmask =~ $ipregex ]]; do\n            echo \"Check gateway format\"\n            read -r -p \"Netmask [255.255.255.0]: \" netmask\n            netmask=${netmask:-255.255.255.0}\n        done\n        read -r -p \"Gateway: \" gateway\n        while ! [[ $gateway =~ $ipregex ]] && [[ $gateway != \"\" ]]; do\n            echo \"Check gateway format\"\n            read -r -p \"Gateway: \" gateway\n        done\n        read -r -p \"DNS [8.8.8.8]: \" dns\n        dns=${dns:-8.8.8.8}\n        while ! [[ $dns =~ $ipregex ]]; do\n            echo \"Check dns format\"\n            read -r -p \"DNS [8.8.8.8]: \" dns\n            dns=${dns:-8.8.8.8}\n        done\n\n    fi\n\n}\n\nfunction VMImport {\n\n    set -e\n\n    echo\n    echo \"Downloading and importing XVA image...\"\n    echo\n\n    # Import image. We pipe through zcat because xe vm-import should transparently decompress gzipped image, but doesn't seem to understand when stream ends when piped through curl/wget whatnot.\n    # if SR was not defined, we leave that parameter out\n    if [[ $sruuid == \"default\" ]]; then\n        uuid=$(curl \"$IMAGE_URL\" | zcat | xe vm-import filename=/dev/stdin)\n    else\n        uuid=$(curl \"$IMAGE_URL\" | zcat | xe vm-import filename=/dev/stdin sr-uuid=\"$sruuid\")\n    fi\n\n    # exit if import failed for any reason\n    # shellcheck disable=SC2181\n    if [[ $? != \"0\" ]]; then\n        echo \"Import failed\"\n        exit 1\n    fi\n    echo\n    echo \"Import complete\"\n\n    # no network interface included in the image, we need to create one based on network uuid set by user earlier\n    xe vif-create network-uuid=\"$vifuuid\" vm-uuid=\"$uuid\" device=0 >/dev/null\n\n    # VM startup script reads network details from xenstore and configures interface based on that so set values based on user input earlier\n    if [[ \"$ipaddress\" != \"dhcp\" ]]; then\n        xe vm-param-set uuid=\"$uuid\" xenstore-data:vm-data/ip=\"$ipaddress\" xenstore-data:vm-data/netmask=\"$netmask\" xenstore-data:vm-data/gateway=\"$gateway\" xenstore-data:vm-data/dns=\"$dns\"\n    fi\n\n    # remove all other boot options except disk to speed startup\n    xe vm-param-remove uuid=\"$uuid\" param-name=HVM-boot-params param-key=order\n    xe vm-param-set uuid=\"$uuid\" HVM-boot-params:\"order=c\"\n\n    echo\n    echo \"Starting VM...\"\n    xe vm-start uuid=\"$uuid\"\n\n    set +e\n\n    # loop max 300 seconds for VM to startup and xen tools to announce ip-address value\n    count=0\n    limit=10\n    ip=$(xe vm-param-get uuid=\"$uuid\" param-name=networks param-key=0/ip 2>/dev/null)\n    while [[ -z \"$ip\" ]] && [[ \"$count\" -lt \"$limit\" ]]; do\n        echo \"Waiting for VM to start and announce it got IP-address\"\n        sleep 30\n        ip=$(xe vm-param-get uuid=\"$uuid\" param-name=networks param-key=0/ip 2>/dev/null)\n        ((count++))\n    done\n\n    # network details are needed in xenstore only during first startup so remove them at this point since VM should be running\n    if [[ \"$ipaddress\" != \"dhcp\" ]]; then\n        xe vm-param-remove param-name=xenstore-data param-key=vm-data/ip uuid=\"$uuid\" 2>/dev/null\n        xe vm-param-remove param-name=xenstore-data param-key=vm-data/netmask uuid=\"$uuid\" 2>/dev/null\n        xe vm-param-remove param-name=xenstore-data param-key=vm-data/gateway uuid=\"$uuid\" 2>/dev/null\n        xe vm-param-remove param-name=xenstore-data param-key=vm-data/dns uuid=\"$uuid\" 2>/dev/null\n    fi\n\n    # if we got ip-address value from VM, we print how to access it...\n    if [[ \"$ip\" != \"\" ]]; then\n        echo\n        echo \"VM Started successfully\"\n        echo\n        echo \"You can access Xen Orchestra at https://$ip and via SSH at $ip\"\n        echo \"Default credentials for UI: admin@admin.net/admin\"\n        echo \"Default credentials for SSH: xo/xopass\"\n        echo\n        echo \"Remember to change both passwords before putting VM to use!\"\n    # ... and print the same without ip-address information if ip-address value was missing\n    else\n        echo\n        echo \"VM started but we couldn't fetch it's ip-address from xentools\"\n        echo\n        echo \"Check VM status/ip-address manually. If VM started correctly, it should have Web UI and SSH accessible at it's ip-address\"\n        echo \"Default credentials for UI: admin@admin.net/admin\"\n        echo \"Default credentials for SSH: xo/xopass\"\n        echo\n        echo \"Remember to change both passwords before putting VM to use!\"\n    fi\n\n}\n\n# run all functions in a specific order\nOSCheck\nStorageChoose\nNetworkChoose\nNetworkSettings\nVMImport\n"
        }
      ]
    }
  ]
}