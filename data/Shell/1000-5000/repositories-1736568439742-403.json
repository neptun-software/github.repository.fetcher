{
  "metadata": {
    "timestamp": 1736568439742,
    "page": 403,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rootsongjc/kubernetes-vagrant-centos-cluster",
      "stars": 1934,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0537109375,
          "content": ".vagrant/*\n.DS_Store\n*.tar.gz\nkubernetes\n*.box\n.idea/*\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 0.1650390625,
          "content": "# Environment\n\n- OS:\n- Kubernetes version:\n- VirtualBox version:\n- Vagrant version:\n\n## What I did?\n\nYour operations on this repo.\n\n## Messages\n\nLogs or error messages.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README-cn.md",
          "type": "blob",
          "size": 15.3017578125,
          "content": "# 使用Vagrant和VirtualBox在本地搭建分布式的Kubernetes集群和Istio Service Mesh\n\n[Setting up a Kubernetes cluster along with Istio service mesh locally with Vagrant and VirtualBox - English](README.md)\n\n当我们需要在本地开发时，更希望能够有一个开箱即用又可以方便定制的分布式开发环境，这样才能对Kubernetes本身和应用进行更好的测试。现在我们使用[Vagrant](https://www.vagrantup.com/)和[VirtualBox](https://www.virtualbox.org/wiki/Downloads)来创建一个这样的环境。\n\n**注意**：因为使用虚拟机创建分布式Kubernetes集群比较耗费资源，所以我又仅使用Docker创建Standalone的Kubernetes的轻量级[Cloud Native Sandbox](https://github.com/rootsongjc/cloud-native-sandbox)。\n\n## Demo\n\n点击下面的图片观看视频。\n\n[![观看视频](https://ae01.alicdn.com/kf/U4416321c10a0444a9f12dd7f5bf722c9p.jpg)](https://www.bilibili.com/video/av39514214/)\n\n## 准备环境\n\n需要准备以下软件和环境：\n\n- 8G以上内存\n- Vagrant 最新版本（推荐2.2.16）\n- VirtualBox 5.2（不支持 5.2 以上的版本）\n- 提前下载Kubernetes 1.16（本篇基于1.16.14）的release压缩包\n- Mac/Linux，**Windows不完全支持，仅在windows10下通过**\n\n## 集群\n\n我们使用Vagrant和Virtualbox安装包含3个节点的kubernetes集群，其中master节点同时作为node节点。\n\n| IP           | 主机名   | 组件                                       |\n| ------------ | ----- | ---------------------------------------- |\n| 172.17.8.101 | node1 | kube-apiserver、kube-controller-manager、kube-scheduler、etcd、kubelet、docker、flannel、dashboard |\n| 172.17.8.102 | node2 | kubelet、docker、flannel、traefik           |\n| 172.17.8.103 | node3 | kubelet、docker、flannel                   |\n\n**注意**：以上的IP、主机名和组件都是固定在这些节点的，即使销毁后下次使用vagrant重建依然保持不变。\n\n容器IP范围：172.33.0.0/30\n\nKubernetes service IP范围：10.254.0.0/16\n\n## 安装的组件\n\n安装完成后的集群包含以下组件：\n\n- flannel（`host-gw`模式）\n- kubernetes dashboard\n- etcd（单节点）\n- kubectl\n- CoreDNS\n- kubernetes（版本根据下载的kubernetes安装包而定，支持Kubernetes1.9+）\n\n**可选插件**\n\n- Heapster + InfluxDB  + Grafana\n- ElasticSearch + Fluentd + Kibana\n- Istio service mesh\n- Helm\n- Vistio\n- Kiali\n\n## 使用说明\n\n将该repo克隆到本地，下载Kubernetes的到项目的根目录。\n\n```bash\ngit clone https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster.git\ncd kubernetes-vagrant-centos-cluster\n```\n\n**注意**：如果您是第一次运行该部署程序，那么可以直接执行下面的命令，它将自动帮你下载 Kubernetes 安装包，下一次你就不需要自己下载了，另外您也可以在[这里](https://kubernetes.io/docs/setup/release/notes/)找到Kubernetes的发行版下载地址，下载 Kubernetes发行版后重命名为`kubernetes-server-linux-amd64.tar.gz`，并移动到该项目的根目录下。\n\n因为该项目是使用 NFS 的方式挂载到虚拟机的 `/vagrant` 目录中的，所以在安装 NFS 的时候需要您输入密码授权。\n\n使用vagrant启动集群。\n\n```bash\nvagrant up\n```\n\n如果是首次部署，会自动下载`centos/7`的box，这需要花费一些时间，另外每个节点还需要下载安装一系列软件包，整个过程大概需要10几分钟。\n\n如果您在运行`vagrant up`的过程中发现无法下载`centos/7`的box，可以手动下载后将其添加到vagrant中。\n\n**手动添加centos/7 box**\n\n````bash\nwget -c http://cloud.centos.org/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-1801_02.VirtualBox.box\nvagrant box add CentOS-7-x86_64-Vagrant-1804_02.VirtualBox.box --name centos/7\n````\n\n这样下次运行`vagrant up`的时候就会自动读取本地的`centos/7` box而不会再到网上下载。\n\n#### Mac 安装说明\n\n在偏好设置 -> 安全性和隐私 -> 通用，点击被阻止的程序。\n然后在命令行终端中执行 `sudo \"/Library/Application Support/VirtualBox/LaunchDaemons/VirtualBoxStartup.sh\" restart `， 再执行 `vagrant up` 启动。\n\n**Windows 安装特别说明**\n\n执行`vagrant up`之后会有如下提示：\n```\nG:\\code\\kubernetes-vagrant-centos-cluster>vagrant up\nBringing machine 'node1' up with 'virtualbox' provider...\nBringing machine 'node2' up with 'virtualbox' provider...\nBringing machine 'node3' up with 'virtualbox' provider...\n==> node1: Importing base box 'centos/7'...\n==> node1: Matching MAC address for NAT networking...\n==> node1: Setting the name of the VM: node1\n==> node1: Clearing any previously set network interfaces...\n==> node1: Specific bridge 'en0: Wi-Fi (AirPort)' not found. You may be asked to specify\n==> node1: which network to bridge to.\n==> node1: Available bridged network interfaces:\n1) Realtek PCIe GBE Family Controller\n2) TAP-Windows Adapter V9\n==> node1: When choosing an interface, it is usually the one that is\n==> node1: being used to connect to the internet.\n    node1: Which interface should the network bridge to?\n    node1: Which interface should the network bridge to?\n    \n```\n输入`1`之后按回车继续。（根据自己真实网卡选择，node2、node3同样需要）\n\n\nnode3快要结束的时候可能会有如下错误：\n```\nnode3: Created symlink from /etc/systemd/system/multi-user.target.wants/kubelet.service to /usr/lib/systemd/system/kubelet.service.\n    node3: Created symlink from /etc/systemd/system/multi-user.target.wants/kube-proxy.service to /usr/lib/systemd/system/kube-proxy.service.\n    node3: deploy coredns\n    node3: /tmp/vagrant-shell: ./dns-deploy.sh: /bin/bash^M: bad interpreter: No such file or directory\n    node3: error: no objects passed to apply\n    node3: /home/vagrant\n```\n\n解决方法：\n\n```bash\nvagrant ssh node3\nsudo -i\ncd /vagrant/addon/dns\nyum -y install dos2unix\ndos2unix dns-deploy.sh\n./dns-deploy.sh -r 10.254.0.0/16 -i 10.254.0.2 |kubectl apply -f -\n```\n\n\n### 访问kubernetes集群\n\n访问Kubernetes集群的方式有三种：\n\n- 本地访问\n- 在VM内部访问\n- Kubernetes dashboard\n\n**通过本地访问**\n\n可以直接在你自己的本地环境中操作该kubernetes集群，而无需登录到虚拟机中。\n\n要想在本地直接操作Kubernetes集群，需要在你的电脑里安装`kubectl`命令行工具，对于Mac用户执行以下步骤：\n\n```bash\nwget https://storage.googleapis.com/kubernetes-release/release/v1.16.14/kubernetes-client-darwin-amd64.tar.gz\ntar xvf kubernetes-client-darwin-amd64.tar.gz && cp kubernetes/client/bin/kubectl /usr/local/bin\n```\n\n将`conf/admin.kubeconfig`文件放到`~/.kube/config`目录下即可在本地使用`kubectl`命令操作集群。\n\n```bash\nmkdir -p ~/.kube\ncp conf/admin.kubeconfig ~/.kube/config\n```\n\n我们推荐您使用这种方式。\n\n**在虚拟机内部访问**\n\n如果有任何问题可以登录到虚拟机内部调试：\n\n```bash\nvagrant ssh node1\nsudo -i\nkubectl get nodes\n```\n\n**Kubernetes dashboard**\n\n还可以直接通过dashboard UI来访问：https://172.17.8.101:8443\n\n可以在本地执行以下命令获取token的值（需要提前安装kubectl）：\n\n```bash\nkubectl -n kube-system describe secret `kubectl -n kube-system get secret|grep admin-token|cut -d \" \" -f1`|grep \"token:\"|tr -s \" \"|cut -d \" \" -f2\n```\n\n**注意**：token的值也可以在`vagrant up`的日志的最后看到。\n\n![Kubernetes dashboard animation](images/dashboard-animation.gif)\n\n只有当你安装了下面的heapster组件后才能看到上图中的监控metrics。\n\n\n**Windows下Chrome/Firefox访问**\n\n如果提示`NET::ERR_CERT_INVALID`，则需要下面的步骤\n\n进入本项目目录\n\n```\nvagrant ssh node1\nsudo -i\ncd /vagrant/addon/dashboard/\nmkdir certs\nopenssl req -nodes -newkey rsa:2048 -keyout certs/dashboard.key -out certs/dashboard.csr -subj \"/C=/ST=/L=/O=/OU=/CN=kubernetes-dashboard\"\nopenssl x509 -req -sha256 -days 365 -in certs/dashboard.csr -signkey certs/dashboard.key -out certs/dashboard.crt\nkubectl delete secret kubernetes-dashboard-certs -n kube-system\nkubectl create secret generic kubernetes-dashboard-certs --from-file=certs -n kube-system\nkubectl delete pods $(kubectl get pods -n kube-system|grep kubernetes-dashboard|awk '{print $1}') -n kube-system #重新创建dashboard\n```\n刷新浏览器之后点击`高级`，选择跳过即可打开页面。\n\n### 组件\n\n**Heapster监控**\n\n创建Heapster监控：\n\n```bash\nkubectl apply -f addon/heapster/\n```\n\n访问Grafana\n\n使用Ingress方式暴露的服务，在本地`/etc/hosts`中增加一条配置：\n\n```ini\n172.17.8.102 grafana.jimmysong.io\n```\n\n访问Grafana：<http://grafana.jimmysong.io>\n\n![Grafana动画](images/grafana-animation.gif)\n\n**Traefik**\n\n部署Traefik ingress controller和增加ingress配置：\n\n```bash\nkubectl apply -f addon/traefik-ingress\n```\n\n在本地`/etc/hosts`中增加一条配置：\n\n```ini\n172.17.8.102 traefik.jimmysong.io\n```\n\n访问Traefik UI：<http://traefik.jimmysong.io>\n\n![Traefik Ingress controller](images/traefik-ingress.gif)\n\n**EFK**\n\n使用EFK做日志收集。\n\n```bash\nkubectl apply -f addon/efk/\n```\n\n**注意**：运行EFK的每个节点需要消耗很大的CPU和内存，请保证每台虚拟机至少分配了4G内存。\n\n**Helm**\n\n用来部署helm。\n\n```bash\nhack/deploy-helm.sh\n```\n\n### Service Mesh\n\n我们使用 [istio](https://istio.io) 作为 service mesh。\n\n**安装**\n\n到[Istio release](https://github.com/istio/istio/releases) 页面下载istio的安装包，安装istio命令行工具，将`istioctl`命令行工具放到你的`$PATH`目录下，对于Mac用户：\n\n```bash\nwget https://github.com/istio/istio/releases/download/1.0.0/istio-1.0.0-osx.tar.gz\ntar xvf istio-1.0.0-osx.tar.gz\nmv bin/istioctl /usr/local/bin/\n```\n\n在Kubernetes中部署istio：\n\n```bash\nkubectl apply -f addon/istio/istio-demo.yaml\nkubectl apply -f addon/istio/istio-ingress.yaml\n```\n\n**运行示例**\n\n我们开启了Sidecar自动注入。\n\n```bash\nkubectl label namespace default istio-injection=enabled\nkubectl apply -n default -f yaml/istio-bookinfo/bookinfo.yaml\nkubectl apply -n default -f yaml/istio-bookinfo/bookinfo-gateway.yaml\nkubectl apply -n default -f yaml/istio-bookinfo/destination-rule-all.yaml\n```\n\n在您自己的本地主机的`/etc/hosts`文件中增加如下配置项。\n\n```\n172.17.8.102 grafana.istio.jimmysong.io\n172.17.8.102 prometheus.istio.jimmysong.io\n172.17.8.102 servicegraph.istio.jimmysong.io\n172.17.8.102 jaeger-query.istio.jimmysong.io\n```\n\n我们可以通过下面的URL地址访问以上的服务。\n\n| Service      | URL                                                          |\n| ------------ | ------------------------------------------------------------ |\n| grafana      | http://grafana.istio.jimmysong.io                            |\n| servicegraph | <http://servicegraph.istio.jimmysong.io/dotviz>, <http://servicegraph.istio.jimmysong.io/graph>,<http://servicegraph.istio.jimmysong.io/force/forcegraph.html> |\n| tracing      | http://jaeger-query.istio.jimmysong.io                       |\n| productpage  | http://172.17.8.101:31380/productpage                        |\n\n详细信息请参阅：https://istio.io/zh/docs/examples/bookinfo/\n\n![Bookinfo Demo](images/bookinfo-demo.gif)\n\n### Vistio\n\n[Vizceral](https://github.com/Netflix/vizceral)是Netflix发布的一个开源项目，用于近乎实时地监控应用程序和集群之间的网络流量。Vistio是使用Vizceral对Istio和网格监控的改进。它利用Istio Mixer生成的指标，然后将其输入Prometheus。Vistio查询Prometheus并将数据存储在本地以允许重播流量。\n\n```bash\n# Deploy vistio via kubectl\nkubectl -n default apply -f addon/vistio/\n\n# Expose vistio-api\nkubectl -n default port-forward $(kubectl -n default get pod -l app=vistio-api -o jsonpath='{.items[0].metadata.name}') 9091:9091 &\n\n# Expose vistio in another terminal window\nkubectl -n default port-forward $(kubectl -n default get pod -l app=vistio-web -o jsonpath='{.items[0].metadata.name}') 8080:8080 &\n```\n\n如果一切都已经启动并准备就绪，您就可以访问Vistio UI，开始探索服务网格网络，访问[http://localhost:8080](http://localhost:8080/) 您将会看到类似下图的输出。\n\n![vistio animation](images/vistio-animation.gif)\n\n更多详细内容请参考[Vistio—使用Netflix的Vizceral可视化Istio service mesh](http://www.servicemesher.com/blog/vistio-visualize-your-istio-mesh-using-netflixs-vizceral/)。\n\n### Kiali\n\nKiali是一个用于提供Istio service mesh观察性的项目，更多信息请查看[https://kiali.io](https://kiali.io/)。\n\n在本地该项目的根路径下执行下面的命令：\n\n```bash\nkubectl apply -n istio-system -f addon/kiali\n```\n\nKiali web地址：http://172.17.8.101:32439\n\n用户名/密码：admin/admin\n\n![kiali](./images/kiali.gif)\n\n**注意**：Kilia使用Jaeger做追踪，请不用屏蔽kilia页面的弹出窗口。\n\n### Weave scope\n\n[Weave scope](https://github.com/weaveworks/scope)可用于监控、可视化和管理Docker&Kubernetes集群，详情见<https://www.weave.works/oss/scope/> \n\n在本地该项目的根路径下执行下面的命令：\n\n```bash\nkubectl apply -f addon/weave-scope\n```\n\n在本地的`/etc/hosts`下增加一条记录。\n\n```\n172.17.8.102 scope.weave.jimmysong.io\n```\n\n现在打开浏览器，访问http://scope.weave.jimmysong.io/\n\n![Weave scope动画](images/weave-scope-animation.gif)\n\n## 管理\n\n除了特别说明，以下命令都在当前的repo目录下操作。\n\n### 挂起\n\n将当前的虚拟机挂起，以便下次恢复。\n\n```bash\nvagrant suspend\n```\n\n### 恢复\n\n恢复虚拟机的上次状态。\n\n```bash\nvagrant resume\n```\n\n注意：我们每次挂起虚拟机后再重新启动它们的时候，看到的虚拟机中的时间依然是挂载时候的时间，这样将导致监控查看起来比较麻烦。因此请考虑先停机再重新启动虚拟机。\n\n### 重启\n\n停机后重启启动。\n\n```bash\nvagrant halt\nvagrant up\n# login to node1\nvagrant ssh node1\n# run the prosivision scripts\n/vagrant/hack/k8s-init.sh\nexit\n# login to node2\nvagrant ssh node2\n# run the prosivision scripts\n/vagrant/hack/k8s-init.sh\nexit\n# login to node3\nvagrant ssh node3\n# run the prosivision scripts\n/vagrant/hack/k8s-init.sh\nsudo -i\ncd /vagrant/hack\n./deploy-base-services.sh\nexit\n```\n\n现在你已经拥有一个完整的基础的kubernetes运行环境，在该repo的根目录下执行下面的命令可以获取kubernetes dashboard的admin用户的token。\n\n```bash\nhack/get-dashboard-token.sh\n```\n\n根据提示登录即可。\n\n### 清理\n\n清理虚拟机。\n\n```bash\nvagrant destroy\nrm -rf .vagrant\n```\n\n### 注意\n\n仅做开发测试使用，不要在生产环境使用该项目。\n\n## 参考\n\n- [Kubernetes Handbook——Kubernetes中文指南/云原生应用架构实践手册](https://jimmysong.io/kubernetes-handbook)\n- [duffqiu/centos-vagrant](https://github.com/duffqiu/centos-vagrant)\n- [coredns/deployment](https://github.com/coredns/deployment)\n- [Kubernetes 1.8 kube-proxy 开启 ipvs](https://mritd.me/2017/10/10/kube-proxy-use-ipvs-on-kubernetes-1.8/#%E4%B8%80%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87)\n- [Vistio—使用Netflix的Vizceral可视化Istio service mesh](http://www.servicemesher.com/blog/vistio-visualize-your-istio-mesh-using-netflixs-vizceral/)\n\n**更多[Istio](https://istio.io/zh)和Service Mesh的资讯请访问[ServiceMesher社区](http://www.servicemesher.com)和关注社区的微信公众号。**\n\n<p align=\"center\">\n  <img src=\"https://ws1.sinaimg.cn/large/00704eQkgy1fshv989hhqj309k09k0t6.jpg\" alt=\"ServiceMesher微信公众号二维码\"/>\n</p>\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.1689453125,
          "content": "# Setting up a distributed Kubernetes cluster along with Istio service mesh locally with Vagrant and VirtualBox\n\n[使用Vagrant和VirtualBox在本地搭建分布式Kubernetes集群和Istio Service Mesh - 中文](README-cn.md)\n\nSetting up a Kubernetes cluster and Istio service mesh with `vagrantfile` which consists of 1 master(also as node) and 3 nodes. You don't have to create complicated CA files or configuration.\n\n**Note**: Because of using virtual machines to setup distributed Kubernetes cluster will bring high load on your computer, so I created the lightweight [Cloud Native Sandbox](https://github.com/rootsongjc/cloud-native-sandbox) using Docker to setup a standalone Kubernetes.\n\n## Demo\n\nClick the following image to watch the video.\n\n[![Watch the video](https://img.youtube.com/vi/26kbaZxcB4A/maxresdefault.jpg)](https://youtu.be/26kbaZxcB4A)\n\n### Why not use kubeadm?\n\nBecause I want to setup the etcd, apiserver, controller and scheduler without docker container.\n\n### Architecture\n\nWe will create a Kubernetes 1.15.0 cluster with 3 nodes which contains the components below:\n\n| IP           | Hostname | Componets                                |\n| ------------ | -------- | ---------------------------------------- |\n| 172.17.8.101 | node1    | kube-apiserver, kube-controller-manager, kube-scheduler, etcd, kubelet, docker, flannel, dashboard |\n| 172.17.8.102 | node2    | kubelet, docker, flannel、traefik         |\n| 172.17.8.103 | node3    | kubelet, docker, flannel                 |\n\nThe default setting will create the private network from 172.17.8.101 to 172.17.8.103 for nodes, and it will use the host's DHCP for the public IP.\n\nThe kubernetes service's VIP range is `10.254.0.0/16`.\n\nThe container network range is `170.33.0.0/16` owned by flanneld with `host-gw` backend.\n\n`kube-proxy` will run as `ipvs` mode.\n\n## Usage\n\n### Prerequisite\n\n* Host server with 8G+ mem(More is better), 60G disk, 8 core cpu at lease\n* **Vagrant latest（2.2.16 recommended）**\n* **VirtualBox 5.2 (5.2+ is not supported)**\n* Kubernetes 1.16 (support the latest version 1.16.14)\n* Across GFW to download the kubernetes files (For China users only)\n* MacOS/Linux (**Windows is not supported completely**)\n* NFS Server Package \n\n### Support Add-ons\n\n**Required**\n\n- CoreDNS\n- Dashboard\n- Traefik\n\n**Optional**\n\n- Heapster + InfluxDB + Grafana\n- ElasticSearch + Fluentd + Kibana\n- Istio service mesh\n- Helm\n- Vistio\n- Kiali\n\n#### Setup\n\nClone this repo into your local machine and download kubernetes binary release first and move them into the root directory of this repo (GitBash for the Windows must be run as Administrator to install ```vagrant-winnfsd``` plugin).\n\n```bash\nvagrant plugin install vagrant-winnfsd\ngit clone https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster.git\ncd kubernetes-vagrant-centos-cluster\n```\n\n**Note**: If this your first time to setup Kubernetes cluster with vagrant, just skip the above step and run the following command, it will download Kubernetes release automatically for you and no need to download the release next time. You can find the download address the Kubernetes releases [here](https://kubernetes.io/docs/imported/release/notes/). Download the release of version you wanted, move it to the root of this repo, rename it to `kubernetes-server-linux-amd64.tar.gz` then the `install.sh` script will skip the download step.\n\nAs this repo folder is mounted to `/vagrant` with NFS in virtual machines, you may be required to enter a password to for administrator privileges during the installation.\n\nSet up Kubernetes cluster with vagrant.\n\n```bash\nvagrant up\n```\n\nWait about 10 minutes the kubernetes cluster will be setup automatically.\n\nIf you have difficult to vagrant up the cluster because of have no way to download the `centos/7` box, you can download the box and add it first.\n\n**Add centos/7 box manually**\n\n```bash\nwget -c http://cloud.centos.org/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-1801_02.VirtualBox.box\nvagrant box add CentOS-7-x86_64-Vagrant-1804_02.VirtualBox.box --name centos/7\n```\n\nThe next time you run `vagrant up`, vagrant will import the local box automatically.\n\n#### Note for Mac\n\nVirtualBox may be blocked by Mac's security limit.\nGo to `System Preferences` - `Security & Privacy` - `Gerneral` click the blocked app and unblock it.\n\nRun  `sudo \"/Library/Application Support/VirtualBox/LaunchDaemons/VirtualBoxStartup.sh\" restart` in terminal and then `vagrant up`.\n\n#### Note for Windows\n\n- The project will run some bash script under the VirtualMachines. These scripts line ending need to be in LF. Git for windows set ```core.autocrlf``` true by default at the installation time. When you clone this project repository, this parameter (set to true) ask git to change all line ending to CRLF. This behavior need to be changed before cloning the repository (or after for each files by hand). We recommend to turn this off by running ```git config --global core.autocrlf false``` and ```git config --global core.eol lf``` before cloning. Then, after cloning, do not forget to turn the behavior back if you want to run other windows projects: ```git config --global core.autocrlf true``` and ```git config --global core.eol crlf```.\n\n\nIf you have executed the previous git global configuration then, you will not see these output while node3 is going to be complete:\n\n```bash\n    node3: Created symlink from /etc/systemd/system/multi-user.target.wants/kubelet.service to /usr/lib/systemd/system/kubelet.service.\n    node3: Created symlink from /etc/systemd/system/multi-user.target.wants/kube-proxy.service to /usr/lib/systemd/system/kube-proxy.service.\n    node3: deploy coredns\n    node3: /tmp/vagrant-shell: ./dns-deploy.sh: /bin/bash^M: bad interpreter: No such file or directory\n    node3: error: no objects passed to apply\n    node3: /home/vagrant\n```\n\nSolution:\n\n```bash\nvagrant ssh node3\nsudo -i\ncd /vagrant/addon/dns\nyum -y install dos2unix\ndos2unix dns-deploy.sh\n./dns-deploy.sh -r 10.254.0.0/16 -i 10.254.0.2 |kubectl apply -f -\n```\n\n#### Connect to kubernetes cluster\n\nThere are 3 ways to access the kubernetes cluster.\n\n- on local\n- login to VM\n- Kubernetes dashboard\n\n**local**\n\nIn order to manage the cluster on local you should Install `kubectl` command line tool first(But, you don't need to do it manually because of ```install.sh``` script itself does this).\n\nGo to [Kubernetes release notes](https://kubernetes.io/docs/setup/release/notes/), download the client binaries, unzip it and then move `kubectl`  to your `$PATH` folder, for MacOS:\n\n```bash\nwget https://storage.googleapis.com/kubernetes-release/release/v1.16.14/kubernetes-client-darwin-amd64.tar.gz\ntar xvf kubernetes-client-darwin-amd64.tar.gz && cp kubernetes/client/bin/kubectl /usr/local/bin\n```\n\nCopy `conf/admin.kubeconfig` to `~/.kube/config`, using `kubectl` CLI to access the cluster.\n\n```bash\nmkdir -p ~/.kube\ncp conf/admin.kubeconfig ~/.kube/config\n```\n\nWe recommend you follow this way.\n\n**VM**\n\nLogin to the virtual machine for debuging. In most situations, you have no need to login the VMs.\n\n```bash\nvagrant ssh node1\nsudo -i\nkubectl get nodes\nkubectl get pods --namespace=kube-system\n```\n\n**Kubernetes dashboard**\n\nKubernetes dashboard URL: <https://172.17.8.101:8443>\n\nGet the admin token:\n\n```bash\nkubectl -n kube-system describe secret `kubectl -n kube-system get secret|grep admin-token|cut -d \" \" -f1`|grep \"token:\"|tr -s \" \"|cut -d \" \" -f2\n```\n\n**Note**: You can see the token message on console when  `vagrant up` done.\n\n![Kubernetes dashboard animation](images/dashboard-animation.gif)\n\nOnly if you install the heapter addon bellow that you can see the metrics.\n\n**Visit from Chrome/Firefox on Windows**\n\nIf you see the hint `NET::ERR_CERT_INVALID`, follow these steps:\n\n```bash\nvagrant ssh node1\nsudo -i\ncd /vagrant/addon/dashboard/\nmkdir certs\nopenssl req -nodes -newkey rsa:2048 -keyout certs/dashboard.key -out certs/dashboard.csr -subj \"/C=/ST=/L=/O=/OU=/CN=kubernetes-dashboard\"\nopenssl x509 -req -sha256 -days 365 -in certs/dashboard.csr -signkey certs/dashboard.key -out certs/dashboard.crt\nkubectl delete secret kubernetes-dashboard-certs -n kube-system\nkubectl create secret generic kubernetes-dashboard-certs --from-file=certs -n kube-system\nkubectl delete pods $(kubectl get pods -n kube-system|grep kubernetes-dashboard|awk '{print $1}') -n kube-system #re-install dashboard\n```\n\nRefresh the browser and click `Advance`, skip it. You will see the dashboard page there.\n\n## Components\n\n**Heapster monitoring**\n\nRun this command on your local machine.\n\n```bash\nkubectl apply -f /vagrant/addon/heapster/\n```\n\nAppend the following item to your local `/etc/hosts` file.\n\n```ini\n172.17.8.102 grafana.jimmysong.io\n```\n\nOpen the URL in browser: <http://grafana.jimmysong.io>\n\n![Grafana animation](images/grafana-animation.gif)\n\n**Traefik**\n\nRun this command on your local machine.\n\n```bash\nkubectl apply -f /vagrant/addon/traefik-ingress\n```\n\nAppend the following item to your  local file  `/etc/hosts`.\n\n```ini\n172.17.8.102 traefik.jimmysong.io\n```\n\nTraefik UI URL: <http://traefik.jimmysong.io>\n\n![Traefik Ingress controller](images/traefik-ingress.gif)\n\n**EFK**\n\nRun this command on your local machine.\n\n```bash\nkubectl apply -f /vagrant/addon/efk/\n```\n\n**Note**: Powerful CPU and memory allocation required. At least 4G per virtual machine.\n\n**Helm**\n\nRun this command on your local machine.\n\n```bash\n/vagrant/hack/deploy-helm.sh\n```\n\n### Service Mesh\n\nWe use [istio](https://istio.io) as the default service mesh.\n\n**Installation**\n\nGo to [Istio release](https://github.com/istio/istio/releases) to download the binary package, install istio command line tool on local and move `istioctl` to your `$PATH` folder, for Mac:\n\n```bash\nwget https://github.com/istio/istio/releases/download/1.0.0/istio-1.0.0-osx.tar.gz\ntar xvf istio-1.0.0-osx.tar.gz\nmv istio-1.0.0/bin/istioctl /usr/local/bin/\n```\n\nDeploy istio into Kubernetes:\n\n```bash\nkubectl apply -f /vagrant/addon/istio/istio-demo.yaml\nkubectl apply -f /vagrant/addon/istio/istio-ingress.yaml\n```\n\n**Run sample**\n\nWe will let the sidecars be auto injected.\n\n```bash\nkubectl label namespace default istio-injection=enabled\nkubectl apply -n default -f /vagrant/yaml/istio-bookinfo/bookinfo.yaml\nkubectl apply -n default -f /vagrant/yaml/istio-bookinfo/bookinfo-gateway.yaml\nkubectl apply -n default -f /vagrant/yaml/istio-bookinfo/destination-rule-all.yaml\n```\n\nAdd the following items into the file  `/etc/hosts` of your local machine.\n\n```\n172.17.8.102 grafana.istio.jimmysong.io\n172.17.8.102 prometheus.istio.jimmysong.io\n172.17.8.102 servicegraph.istio.jimmysong.io\n172.17.8.102 jaeger-query.istio.jimmysong.io\n```\n\nWe can see the services from the following URLs.\n\n| Service      | URL                                                          |\n| ------------ | ------------------------------------------------------------ |\n| grafana      | http://grafana.istio.jimmysong.io                            |\n| servicegraph | <http://servicegraph.istio.jimmysong.io/dotviz>, <http://servicegraph.istio.jimmysong.io/graph>,<http://servicegraph.istio.jimmysong.io/force/forcegraph.html> |\n| tracing      | http://jaeger-query.istio.jimmysong.io                       |\n| productpage  | http://172.17.8.101:31380/productpage                        |\n\nMore detail see https://istio.io/docs/examples/bookinfo/\n\n![Bookinfo Demo](images/bookinfo-demo.gif)\n\n### Vistio\n\n[Vizceral](https://github.com/Netflix/vizceral) is an open source project released by Netflix to monitor network traffic between applications and clusters in near real time. Vistio is an adaptation of Vizceral for Istio and mesh monitoring. It utilizes metrics generated by Istio Mixer which are then fed into Prometheus. Vistio queries Prometheus and stores that data locally to allow for the replaying of traffic.\n\nRun the following commands in your local machine.\n\n```bash\n# Deploy vistio via kubectl\nkubectl -n default apply -f /vagrant/addon/vistio/\n\n# Expose vistio-api\nkubectl -n default port-forward $(kubectl -n default get pod -l app=vistio-api -o jsonpath='{.items[0].metadata.name}') 9091:9091 &\n\n# Expose vistio in another terminal window\nkubectl -n default port-forward $(kubectl -n default get pod -l app=vistio-web -o jsonpath='{.items[0].metadata.name}') 8080:8080 &\n```\n\nIf everything up until now is working you should be able to load the Vistio UI  in your browser http://localhost:8080\n\n![vistio animation](images/vistio-animation.gif)\n\nMore details see [Vistio — Visualize your Istio Mesh Using Netflix’s Vizceral](https://itnext.io/vistio-visualize-your-istio-mesh-using-netflixs-vizceral-b075c402e18e).\n\n### Kiali\n\nKiali is a project to help observability for the Istio service mesh, see [https://kiali.io](https://kiali.io/).\n\nRun the following commands in your local machine.\n\n```bash\nkubectl apply -n istio-system -f /vagrant/addon/kiali\n```\n\nKiali web: http://172.17.8.101:32439\n\nUser/password: admin/admin\n\n![kiali](images/kiali.gif)\n\n**Note**: Kiali use jaeger for tracing. Do not block the pop-up windows for kiali.\n\n### Weave scope\n\n[Weave scope](https://github.com/weaveworks/scope) is a project for monitoring, visualisation & management for Docker & Kubernetes, see <https://www.weave.works/oss/scope/> \n\nRun the following commands in your local machine.\n\n```bash\nkubectl apply -f /vagrant/addon/weave-scope\n```\n\nAdd a record on your local  `/etc/hosts`.\n\n```\n172.17.8.102 scope.weave.jimmysong.io\n```\n\nNow open your browser on http://scope.weave.jimmysong.io/\n\n![Weave scope animation](images/weave-scope-animation.gif)\n\n## Operation\n\nExcept for special claim, execute the following commands under the current git repo's root directory.\n\n### Suspend\n\nSuspend the current state of VMs.\n\n```bash\nvagrant suspend\n```\n\n### Resume\n\nResume the last state of VMs.\n\n```bash\nvagrant resume\n```\n\nNote: every time you resume the VMs you will find that the machine time is still at you last time you suspended it. So consider to halt the VMs and restart them.\n\n### Restart\n\nHalt the VMs and up them again.\n\n```bash\nvagrant halt\nvagrant up\n# login to node1\nvagrant ssh node1\n# run the prosivision scripts\n/vagrant/hack/k8s-init.sh\nexit\n# login to node2\nvagrant ssh node2\n# run the prosivision scripts\n/vagrant/hack/k8s-init.sh\nexit\n# login to node3\nvagrant ssh node3\n# run the prosivision scripts\n/vagrant/hack/k8s-init.sh\nsudo -i\ncd /vagrant/hack\n./deploy-base-services.sh\nexit\n```\n\nNow you have provisioned the base kubernetes environments and you can login to kubernetes dashboard, run the following command at the root of this repo to get the admin token.\n\n```bash\nhack/get-dashboard-token.sh\n```\n\nFollowing the hint to login.\n\n### Clean\n\nClean up the VMs.\n\n```bash\nvagrant destroy\nrm -rf .vagrant\n```\n\n### Note\n\nOnly use for development and test, don't use it in production environment.\n\n## Reference\n\n* [Kubernetes Handbook - jimmysong.io](https://jimmysong.io/kubernetes-handbook/)\n* [duffqiu/centos-vagrant](https://github.com/duffqiu/centos-vagrant)\n* [coredns/deployment](https://github.com/coredns/deployment)\n* [kubernetes ipvs](https://github.com/kubernetes/kubernetes/tree/master/pkg/proxy/ipvs)\n* [Vistio — Visualize your Istio Mesh Using Netflix’s Vizceral](https://itnext.io/vistio-visualize-your-istio-mesh-using-netflixs-vizceral-b075c402e18e)\n\n**Follow the [ServiceMesher community](http://www.servicemesher.com) on [twitter](https://twitter.com/servicemesher) to get more information about [Istio](https://istio.io) and service mesh.**\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 1.216796875,
          "content": "# -*- mode: ruby -*-\n# vi: set ft=ruby :\n# on win10, you need `vagrant plugin install vagrant-vbguest --plugin-version 0.21` and change synced_folder.type=\"virtualbox\"\n# reference `https://www.dissmeyer.com/2020/02/11/issue-with-centos-7-vagrant-boxes-on-windows-10/`\n\n\nVagrant.configure(\"2\") do |config|\n  config.vm.box_check_update = false\n  config.vm.provider 'virtualbox' do |vb|\n  vb.customize [ \"guestproperty\", \"set\", :id, \"/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold\", 1000 ]\n  end  \n  config.vm.synced_folder \".\", \"/vagrant\", type: \"virtualbox\"\n  $num_instances = 3\n  # curl https://discovery.etcd.io/new?size=3\n  $etcd_cluster = \"node1=http://172.17.8.101:2380\"\n  (1..$num_instances).each do |i|\n    config.vm.define \"node#{i}\" do |node|\n      node.vm.box = \"centos/7\"\n      node.vbguest.installer_options = { allow_kernel_upgrade: true }\n      node.vm.box_version = \"1804.02\"\n      node.vm.hostname = \"node#{i}\"\n      ip = \"172.17.8.#{i+100}\"\n      node.vm.network \"private_network\", ip: ip\n      node.vm.provider \"virtualbox\" do |vb|\n        vb.memory = \"3072\"\n        vb.cpus = 1\n        vb.name = \"node#{i}\"\n      end\n      node.vm.provision \"shell\", path: \"install.sh\", args: [i, ip, $etcd_cluster]\n    end\n  end\nend\n"
        },
        {
          "name": "addon",
          "type": "tree",
          "content": null
        },
        {
          "name": "conf",
          "type": "tree",
          "content": null
        },
        {
          "name": "hack",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 6.4599609375,
          "content": "#!/usr/bin/env bash\n# change time zone\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\ntimedatectl set-timezone Asia/Shanghai\nrm /etc/yum.repos.d/CentOS-Base.repo\ncp /vagrant/yum/*.* /etc/yum.repos.d/\nmv /etc/yum.repos.d/CentOS7-Base-163.repo /etc/yum.repos.d/CentOS-Base.repo\n# using socat to port forward in helm tiller\n# install  kmod and ceph-common for rook\nyum install -y wget curl conntrack-tools vim net-tools telnet tcpdump bind-utils socat ntp kmod ceph-common dos2unix\nkubernetes_release=\"/vagrant/kubernetes-server-linux-amd64.tar.gz\"\n# Download Kubernetes\nif [[ $(hostname) == \"node1\" ]] && [[ ! -f \"$kubernetes_release\" ]]; then\n    wget https://storage.googleapis.com/kubernetes-release/release/v1.16.14/kubernetes-server-linux-amd64.tar.gz -P /vagrant/\nfi\n\n# enable ntp to sync time\necho 'sync time'\nsystemctl start ntpd\nsystemctl enable ntpd\necho 'disable selinux'\nsetenforce 0\nsed -i 's/=enforcing/=disabled/g' /etc/selinux/config\n\necho 'enable iptable kernel parameter'\ncat >> /etc/sysctl.conf <<EOF\nnet.ipv4.ip_forward=1\nEOF\nsysctl -p\n\necho 'set host name resolution'\ncat >> /etc/hosts <<EOF\n172.17.8.101 node1\n172.17.8.102 node2\n172.17.8.103 node3\nEOF\n\ncat /etc/hosts\n\necho 'set nameserver'\necho \"nameserver 8.8.8.8\">/etc/resolv.conf\ncat /etc/resolv.conf\n\necho 'disable swap'\nswapoff -a\nsed -i '/swap/s/^/#/' /etc/fstab\n\n#create group if not exists\negrep \"^docker\" /etc/group >& /dev/null\nif [ $? -ne 0 ]\nthen\n  groupadd docker\nfi\n\nusermod -aG docker vagrant\nrm -rf ~/.docker/\nyum install -y docker.x86_64\n# To fix docker exec error, downgrade docker version, see https://github.com/openshift/origin/issues/21590\nyum downgrade -y docker-1.13.1-75.git8633870.el7.centos.x86_64 docker-client-1.13.1-75.git8633870.el7.centos.x86_64 docker-common-1.13.1-75.git8633870.el7.centos.x86_64\n\ncat > /etc/docker/daemon.json <<EOF\n{\n  \"registry-mirrors\" : [\n\t\"https://reg-mirror.qiniu.com\",\n\t\"https://hub-mirror.c.163.com\",\n\t\"https://mirror.ccs.tencentyun.com\",\n\t\"https://docker.mirrors.ustc.edu.cn\",\n\t\"https://dockerhub.azk8s.cn\",\n\t\"https://registry.docker-cn.com\"\n  ]\n}\nEOF\n\nif [[ $1 -eq 1 ]]\nthen\n    yum install -y etcd\n    #cp /vagrant/systemd/etcd.service /usr/lib/systemd/system/\ncat > /etc/etcd/etcd.conf <<EOF\n#[Member]\nETCD_DATA_DIR=\"/var/lib/etcd/default.etcd\"\nETCD_LISTEN_PEER_URLS=\"http://$2:2380\"\nETCD_LISTEN_CLIENT_URLS=\"http://$2:2379,http://localhost:2379\"\nETCD_NAME=\"node$1\"\n\n#[Clustering]\nETCD_INITIAL_ADVERTISE_PEER_URLS=\"http://$2:2380\"\nETCD_ADVERTISE_CLIENT_URLS=\"http://$2:2379\"\nETCD_INITIAL_CLUSTER=\"$3\"\nETCD_INITIAL_CLUSTER_TOKEN=\"etcd-cluster\"\nETCD_INITIAL_CLUSTER_STATE=\"new\"\nEOF\n    cat /etc/etcd/etcd.conf\n    echo 'create network config in etcd'\ncat > /etc/etcd/etcd-init.sh<<EOF\n#!/bin/bash\netcdctl mkdir /kube-centos/network\netcdctl mk /kube-centos/network/config '{\"Network\":\"172.33.0.0/16\",\"SubnetLen\":24,\"Backend\":{\"Type\":\"host-gw\"}}'\nEOF\n    chmod +x /etc/etcd/etcd-init.sh\n    echo 'start etcd...'\n    systemctl daemon-reload\n    systemctl enable etcd\n    systemctl start etcd\n\n    echo 'create kubernetes ip range for flannel on 172.33.0.0/16'\n    /etc/etcd/etcd-init.sh\n    etcdctl cluster-health\n    etcdctl ls /\nfi\n\necho 'install flannel...'\nyum install -y flannel\n\necho 'create flannel config file...'\n\ncat > /etc/sysconfig/flanneld <<EOF\n# Flanneld configuration options\nFLANNEL_ETCD_ENDPOINTS=\"http://172.17.8.101:2379\"\nFLANNEL_ETCD_PREFIX=\"/kube-centos/network\"\nFLANNEL_OPTIONS=\"-iface=eth1\"\nEOF\n\necho 'enable flannel with host-gw backend'\nrm -rf /run/flannel/\nsystemctl daemon-reload\nsystemctl enable flanneld\nsystemctl start flanneld\n\necho 'enable docker'\nsystemctl daemon-reload\nsystemctl enable docker\nsystemctl start docker\n\necho \"copy pem, token files\"\nmkdir -p /etc/kubernetes/ssl\ncp /vagrant/pki/* /etc/kubernetes/ssl/\ncp /vagrant/conf/token.csv /etc/kubernetes/\ncp /vagrant/conf/bootstrap.kubeconfig /etc/kubernetes/\ncp /vagrant/conf/kube-proxy.kubeconfig /etc/kubernetes/\ncp /vagrant/conf/kubelet.kubeconfig /etc/kubernetes/\n\ntar -xzvf /vagrant/kubernetes-server-linux-amd64.tar.gz --no-same-owner -C /vagrant\ncp /vagrant/kubernetes/server/bin/* /usr/bin\n\ndos2unix -q /vagrant/systemd/*.service\ncp /vagrant/systemd/*.service /usr/lib/systemd/system/\nmkdir -p /var/lib/kubelet\nmkdir -p ~/.kube\ncp /vagrant/conf/admin.kubeconfig ~/.kube/config\n\nif [[ $1 -eq 1 ]]\nthen\n    echo \"configure master and node1\"\n\n    cp /vagrant/conf/apiserver /etc/kubernetes/\n    cp /vagrant/conf/config /etc/kubernetes/\n    cp /vagrant/conf/controller-manager /etc/kubernetes/\n    cp /vagrant/conf/scheduler /etc/kubernetes/\n    cp /vagrant/conf/scheduler.conf /etc/kubernetes/\n    cp /vagrant/node1/* /etc/kubernetes/\n\n    systemctl daemon-reload\n    systemctl enable kube-apiserver\n    systemctl start kube-apiserver\n\n    systemctl enable kube-controller-manager\n    systemctl start kube-controller-manager\n\n    systemctl enable kube-scheduler\n    systemctl start kube-scheduler\n\n    systemctl enable kubelet\n    systemctl start kubelet\n\n    systemctl enable kube-proxy\n    systemctl start kube-proxy\nfi\n\nif [[ $1 -eq 2 ]]\nthen\n    echo \"configure node2\"\n    cp /vagrant/node2/* /etc/kubernetes/\n\n    systemctl daemon-reload\n    systemctl enable kubelet\n    systemctl start kubelet\n    systemctl enable kube-proxy\n    systemctl start kube-proxy\nfi\n\nif [[ $1 -eq 3 ]]\nthen\n    echo \"configure node3\"\n    cp /vagrant/node3/* /etc/kubernetes/\n\n    systemctl daemon-reload\n\n    systemctl enable kubelet\n    systemctl start kubelet\n    systemctl enable kube-proxy\n    systemctl start kube-proxy\n\n    echo \"deploy coredns\"\n    cd /vagrant/addon/dns/\n    ./dns-deploy.sh -r 10.254.0.0/16 -i 10.254.0.2 |kubectl apply -f -\n    cd -\n\n    echo \"deploy kubernetes dashboard\"\n    kubectl apply -f /vagrant/addon/dashboard/kubernetes-dashboard.yaml\n    echo \"create admin role token\"\n    kubectl apply -f /vagrant/yaml/admin-role.yaml\n    echo \"the admin role token is:\"\n    kubectl -n kube-system describe secret `kubectl -n kube-system get secret|grep admin-token|cut -d \" \" -f1`|grep \"token:\"|tr -s \" \"|cut -d \" \" -f2\n    echo \"login to dashboard with the above token\"\n    echo https://172.17.8.101:`kubectl -n kube-system get svc kubernetes-dashboard -o=jsonpath='{.spec.ports[0].port}'`\n    echo \"install traefik ingress controller\"\n    kubectl apply -f /vagrant/addon/traefik-ingress/\nfi\n\necho \"Configure Kubectl to autocomplete\"\nsource <(kubectl completion bash) # setup autocomplete in bash into the current shell, bash-completion package should be installed first.\necho \"source <(kubectl completion bash)\" >> ~/.bashrc # add autocomplete permanently to your bash shell.\n\n"
        },
        {
          "name": "node1",
          "type": "tree",
          "content": null
        },
        {
          "name": "node2",
          "type": "tree",
          "content": null
        },
        {
          "name": "node3",
          "type": "tree",
          "content": null
        },
        {
          "name": "pki",
          "type": "tree",
          "content": null
        },
        {
          "name": "systemd",
          "type": "tree",
          "content": null
        },
        {
          "name": "yaml",
          "type": "tree",
          "content": null
        },
        {
          "name": "yum",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}