{
  "metadata": {
    "timestamp": 1736568353300,
    "page": 279,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vmstan/gravity-sync",
      "stars": 2313,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0439453125,
          "content": "dev\n.vscode\n.DS_Store\n.nova\nsettings/*\nlogs/*"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2490234375,
          "content": "FROM photon:4.0\nLABEL maintainer=\"Michael Stanclift <https://github.com/vmstan>\"\n\nRUN tdnf update -y \\\n    && tdnf install -y curl git rsync openssh\n\nRUN curl -sSL http://gravity.vmstan.com/beta | GS_DOCKER=1 && GS_DEV=4.0.0 bash\n\nCMD gravity-sync version"
        },
        {
          "name": "ENV.md",
          "type": "blob",
          "size": 9.673828125,
          "content": "<p align=\"center\">\n<img src=\"images/gs-logo.svg\" width=\"300\" alt=\"Gravity Sync\">\n</p>\n\n<span align=\"center\">\n\n# Gravity Sync ENVs\n\n</span>\n\nThese tables are a list of all Gravity Sync settings, that can be tweaked via ENVs. Keep in mind that some of them are stored in `/etc/gravity-sync/gravity-sync.conf` after running `gravity-sync configure` and that `gravity-sync.conf` has higher priority than ENVs.\n\n### Local and remote paths & settings\nThese settings will determine, from where (locally) to where (remotely) will be synced and with which account/permissions\n| Variable                   | Default          | Value      | Description                                        |\n|----------------------------|------------------|------------|----------------------------------------------------|\n| `LOCAL_PIHOLE_DIRECTORY`   | `/etc/pihole`    | path       | Path to local pi-hole instance in the filesystem   |\n| `REMOTE_PIHOLE_DIRECTORY`  | `/etc/pihole`    | path       | Path to remote pi-hole instance in the filesystem  |\n| `LOCAL_DNSMASQ_DIRECTORY`  | `/etc/dnsmasq.d` | path       | Path to local dnsmasqd instance in the filesystem  |\n| `REMOTE_DNSMASQ_DIRECTORY` | `/etc/dnsmasq.d` | path       | Path to remote dnsmasqd instance in the filesystem |\n| `LOCAL_FILE_OWNER`         | `pihole:pihole`  | user:group | Local owner and group of the pi-hole config        |\n| `REMOTE_FILE_OWNER`        | `pihole:pihole`  | user:group | Remote owner and group of the pi-hole config       |\n\n### Docker specific settings\nGravity-sync will check your system for a native Pi-hole install first (on local and remote site) and if does not detect any, tests against Docker/Podman Pi-hole instances.\nHere, you can specific the Docker or Podman container name, that Gravity Sync should interact with.\n| Variable                  | Default  | Value          | Description                                |\n|---------------------------|----------|----------------|--------------------------------------------|\n| `LOCAL_DOCKER_CONTAINER`  | `pihole` | container name | Container name of pi-hole running locally  |\n| `REMOTE_DOCKER_CONTAINER` | `pihole` | container name | Container name of pi-hole running remotely |\n\n### Paths to standard files and folders\nThese settings are most likely the same on all systems. No need to touch them but nice to be able to touch them, if necessary.\n| Variable                   | Default                 | Value | Description                                                                                                                                                                                |\n|----------------------------|-------------------------|-------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `DEFAULT_PIHOLE_DIRECTORY` | `/etc/pihole`           | path  | Docker/Podman: Path to Pi-hole instance within a Docker/Podman container. Don't mix up with `LOCAL_PIHOLE_DIRECTORY`, which is only used against local Pi-hole instances (non-dockerized). |\n| `LOCAL_PIHOLE_BINARY`      | `/usr/local/bin/pihole` | path  | Path to `pihole` binary on local system                                                                                                                                                    |\n| `REMOTE_PIHOLE_BINARY`     | `/usr/local/bin/pihole` | path  | Path to `pihole` binary on remote system                                                                                                                                                   |\n| `LOCAL_FTL_BINARY`         | `/usr/bin/pihole-FTL`   | path  | Path to `pihole-FTL` binary on local system                                                                                                                                                |\n| `REMOTE_FTL_BINARY`        | `/usr/bin/pihole-FTL`   | path  | Path to `pihole-FTL` binary on remote system                                                                                                                                               |\n| `LOCAL_DOCKER_BINARY`      | `/usr/bin/docker`       | path  | Path to `docker` binary on local system                                                                                                                                                    |\n| `REMOTE_DOCKER_BINARY`     | `/usr/bin/docker`       | path  | Path to `docker` binary on remote system                                                                                                                                                   |\n| `LOCAL_PODMAN_BINARY`      | `/usr/bin/podman`       | path  | Path to `podman` binary on local system                                                                                                                                                    |\n| `REMOTE_PODMAN_BINARY`     | `/usr/bin/podman`       | path  | Path to `podman` binary on remote system                                                                                                                                                   |\n| `PIHOLE_CONTAINER_IMAGE`   | `pihole/pihole`         | path  | Name of the default pi-hole docker image                                                                                                                                                   |\n\n### Nitty-gritty finetuning the target files\nHere, you can specifiy the Gravity, DNS (A, CNAME) and DHCP settings file of Pi-hole. It is almost certain, that these filenames do never change (except if upstream Pi-hole decides so).\n| Variable        | Default                       | Value | Description                                |\n|-----------------|-------------------------------|-------|--------------------------------------------|\n| `PH_GRAVITY_FI` | `gravity.db`                  | file  | The gravity filename (blocklist) of pihole |\n| `PH_CUSTOM_DNS` | `custom.list`                 | file  | The custom DNS (A) filename of pihole      |\n| `PH_CNAME_CONF` | `05-pihole-custom-cname.conf` | file  | The custom DNS (CNAME) filename of pihole  |\n| `PH_SDHCP_CONF` | `04-pihole-static-dhcp.conf`  | file  | The custom DHCP filename of pihole         |\n\n### Backup Customization\n| Variable                   | Default | Value          | Description                                                                                   |\n|----------------------------|---------|----------------|-----------------------------------------------------------------------------------------------|\n| `GS_BACKUP_TIMEOUT`        | `240`   | seconds        | How long shall we allow a gravity.db backup task to run, before it is deemed to be timed out? |\n| `GS_BACKUP_INTEGRITY_WAIT` | `5`     | seconds        | Some wait time, before integrity checks are performed on gravity.db                           |\n| `GS_BACKUP_EXT`            | `gsb`   | file-extension | Local and remote gravity.db backup files will get this file-extension added before merge.     |\n\n### GS Folder/File Locations\n| Variable                | Default                           | Value | Description                                                                                |\n|-------------------------|-----------------------------------|-------|--------------------------------------------------------------------------------------------|\n| `GS_ETC_PATH`           | `/etc/gravity-sync`               | path  | Path to the gravity-sync work & config directory                                           |\n| `GS_CONFIG_FILE`        | `gravity-sync.conf`               | file  | Name of the gravity.sync config file                                                       |\n| `GS_SYNCING_LOG`        | `gs-sync.log`                     | file  | Logfile for gravity-sync                                                                   |\n| `GS_GRAVITY_FI_MD5_LOG` | `gs-gravity.md5`                  | file  | Filename for storing `PH_GRAVITY_FI` hash (used for sync comparison locally and on remote) |\n| `GS_CUSTOM_DNS_MD5_LOG` | `gs-clist.md5`                    | file  | Filename for storing `PH_CUSTOM_DNS` hash (used for sync comparison locally and on remote) |\n| `GS_CNAME_CONF_MD5_LOG` | `05-pihole-custom-cname.conf.md5` | file  | Filename for storing `PH_CNAME_CONF` hash (used for sync comparison locally and on remote) |\n| `GS_SDHCP_CONF_MD5_LOG` | `04-pihole-static-dhcp.conf.md5`  | file  | Filename for storing `PH_SDHCP_CONF` hash (used for sync comparison locally and on remote) |\n\n### Remote SSH config\nCustomize parameters for accessing the remote end via SSH\n| Variable      | Default                          | Value | Description                                                                                             |\n|---------------|----------------------------------|-------|---------------------------------------------------------------------------------------------------------|\n| `GS_SSH_PORT` | `22`                             | port  | Port of the remote gravity-sync container/host                                                          |\n| `GS_SSH_PKIF` | `<GS_ETC_PATH>/gravity-sync.rsa` | file  | Path to the local SSH private key of gravity-sync, that will be used for pubkey auth against the remote |\n\n### Upgrade: Gravity Sync sourcecode location\nGravity Sync is locally installed as a GitHub repo. In order to upgrade your local Gravity Sync instance via `gravity-sync upgrade` to the latest version, the path to that git repo must be known and can be specified below.\n| Variable        | Default             | Value | Description                                 |\n|-----------------|---------------------|-------|---------------------------------------------|\n| `GS_LOCAL_REPO` | `<GS_ETC_PATH>/.gs` | path  | Local install path of the gravity-sync repo |\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.1357421875,
          "content": "<p align=\"center\">\n<img src=\"images/gs-logo.svg\" width=\"300\" alt=\"Gravity Sync\">\n</p>\n\n<span align=\"center\">\n\n# Gravity Sync\n\n</span>\n\n### Effective July 26, 2024, this project has been retired. Thank you for your use and enthusiasm for a project that began as a few lines of bash in a Slack channel and envolved into something far more complex, and used by many thousands of Pi-hole enthusiasts over the last four years. \n\n### The last released version of Gravity Sync (4.0.7) should continue to work with Pi-hole 5.x, but not with Pi-hole 6+ due to architecture changes.\n\nWhat is better than a [Pi-hole](https://github.com/pi-hole/pi-hole) blocking trackers, advertisements, and other malicious domains on your network? That's right, **two** Pi-hole blocking all that junk on your network!\n\n- [Seriously. Why two Pi-hole?](https://github.com/vmstan/gravity-sync/wiki/Frequent-Questions#why-do-i-need-more-than-one-pi-hole)\n\nBut if you have redundant Pi-hole in your network you'll want a simple way to keep the list configurations and local DNS settings identical between the two. That's where Gravity Sync comes in. Setup should only take a few minutes.\n\n## Features\n\nGravity Sync replicates the core of Pi-hole's ad/telemetry blocking settings, which includes:\n\n- Adlist settings with status and comments.\n- Domain/RegEx whitelists and blacklist along with status and comments.\n- Clients and group assignments, along with status and descriptions.\n\nGravity Sync also replicates local network DNS/DHCP settings, which includes:\n\n- Local DNS Records.\n- Local CNAME Records.\n- Static DHCP Assignments.\n\n### Limitations\n\nGravity Sync will **not**:\n\n- Modify or sync the individual Pi-hole's upstream DNS resolvers.\n- Merge query logs, statistics, long-term data, caches, or other resolution information.\n- Sync individual Pi-hole DHCP scoping information or leases.\n\n## Setup Steps\n\n1. [Review System Requirements](https://github.com/vmstan/gravity-sync/wiki/System-Requirements)\n2. [Install Gravity Sync](https://github.com/vmstan/gravity-sync/wiki/Installing)\n3. [Configure Gravity Sync](https://github.com/vmstan/gravity-sync/wiki/Installing#configuration)\n4. [Execute Gravity Sync](https://github.com/vmstan/gravity-sync/wiki/Engaging)\n5. [Automate Gravity Sync](https://github.com/vmstan/gravity-sync/wiki/Automation)\n\n## Disclaimer\n\nGravity Sync is not developed by or affiliated with the Pi-hole project. This is project an unofficial, community effort, that seeks to implement replication (which is currently not a part of the core Pi-hole product) in a way that provides stability and value to Pi-hole users. The code has been tested across multiple user environments but there always is an element of risk involved with running any arbitrary software you find on the Internet.\n\nPi-hole is and the Pi-hole logo are [registered trademarks](https://pi-hole.net/trademark-rules-and-brand-guidelines/) of Pi-hole LLC.\n\n## Additional Documentation\n\nPlease refer to the [Wiki](https://github.com/vmstan/gravity-sync/wiki) for more information:\n\n- [Frequently Asked Questions](https://github.com/vmstan/gravity-sync/wiki/Frequent-Questions)\n- [Changelog](https://github.com/vmstan/gravity-sync/wiki/Changelog)\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "4.0.7\n"
        },
        {
          "name": "gravity-sync",
          "type": "blob",
          "size": 87.2900390625,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC2086,SC1091\nGS_RUN_START=$SECONDS\n\n# GRAVITY SYNC BY VMSTAN #####################\nPROGRAM='Gravity Sync'\nGS_VERSION='4.0.7'\n\n# For documentation or the changelog/updates visit https://github.com/vmstan/gravity-sync\n# Requires Pi-Hole 5.x or higher already be installed, for help visit https://pi-hole.net\n\n# REQUIRED SETTINGS ##########################\n\n# Run 'gravity-sync config' to get started, it will customize the script for your environment\n# You should NOT to change the values of any variables here, to customize your install\n# Only add replacement variables to gravity-sync.conf, which will overwrite these defaults\n# Gravity Sync 4.0 introduces a new configuration file format, there is no direct upgrade path\n\n# CUSTOM VARIABLES ###########################\n\n# Pi-hole Folder/File Customization - Only need to be customized when using containers\nLOCAL_PIHOLE_DIRECTORY=${LOCAL_PIHOLE_DIRECTORY:-'/etc/pihole'}             # replace in gravity-sync.conf to overwrite\nREMOTE_PIHOLE_DIRECTORY=${REMOTE_PIHOLE_DIRECTORY:-'/etc/pihole'}           # replace in gravity-sync.conf to overwrite\nLOCAL_DNSMASQ_DIRECTORY=${LOCAL_DNSMASQ_DIRECTORY:-'/etc/dnsmasq.d'}        # replace in gravity-sync.conf to overwrite\nREMOTE_DNSMASQ_DIRECTORY=${REMOTE_DNSMASQ_DIRECTORY:-'/etc/dnsmasq.d'}      # replace in gravity-sync.conf to overwrite\nLOCAL_FILE_OWNER=${LOCAL_FILE_OWNER:-'pihole:pihole'}                       # replace in gravity-sync.conf to overwrite\nREMOTE_FILE_OWNER=${REMOTE_FILE_OWNER:-'pihole:pihole'}                     # replace in gravity-sync.conf to overwrite\n\n# Pi-hole Docker/Podman container name - Docker will pattern match anything set below\nLOCAL_DOCKER_CONTAINER=${LOCAL_DOCKER_CONTAINER:-'pihole'}                  # replace in gravity-sync.conf to overwrite\nREMOTE_DOCKER_CONTAINER=${REMOTE_DOCKER_CONTAINER:-'pihole'}                # replace in gravity-sync.conf to overwrite\n\n# STANDARD VARIABLES #########################\n\nDEFAULT_PIHOLE_DIRECTORY=${DEFAULT_PIHOLE_DIRECTORY:-'/etc/pihole'}         # Default Pi-hole data directory\nLOCAL_PIHOLE_BINARY=${LOCAL_PIHOLE_BINARY:-'/usr/local/bin/pihole'}         # Local Pi-hole binary directory (default)\nREMOTE_PIHOLE_BINARY=${REMOTE_PIHOLE_BINARY:-'/usr/local/bin/pihole'}       # Remote Pi-hole binary directory (default)\nLOCAL_FTL_BINARY=${LOCAL_FTL_BINARY:-'/usr/bin/pihole-FTL'}                 # Local FTL binary directory (default)\nREMOTE_FTL_BINARY=${REMOTE_FTL_BINARY:-'/usr/bin/pihole-FTL'}               # Remote FTL binary directory (default)\nLOCAL_DOCKER_BINARY=${LOCAL_DOCKER_BINARY:-'/usr/bin/docker'}               # Local Docker binary directory (default)\nREMOTE_DOCKER_BINARY=${REMOTE_DOCKER_BINARY:-'/usr/bin/docker'}             # Remote Docker binary directory (default)\nLOCAL_PODMAN_BINARY=${LOCAL_PODMAN_BINARY:-'/usr/bin/podman'}               # Local Podman binary directory (default)\nREMOTE_PODMAN_BINARY=${REMOTE_PODMAN_BINARY:-'/usr/bin/podman'}             # Remote Podman binary directory (default)\nPIHOLE_CONTAINER_IMAGE=${PIHOLE_CONTAINER_IMAGE:-'pihole/pihole'}           # Official Pi-hole container image name\n\n###############################################\n####### THE NEEDS OF THE MANY, OUTWEIGH #######\n############ THE NEEDS OF THE FEW #############\n###############################################\n\nPH_GRAVITY_FI=${PH_GRAVITY_FI:-'gravity.db'}                        # Pi-hole database file name\nPH_CUSTOM_DNS=${PH_CUSTOM_DNS:-'custom.list'}                       # Pi-hole DNS lookup filename\nPH_CNAME_CONF=${PH_CNAME_CONF:-'05-pihole-custom-cname.conf'}       # DNSMASQ CNAME alias file\nPH_SDHCP_CONF=${PH_SDHCP_CONF:-'04-pihole-static-dhcp.conf'}        # DNSMASQ Static DHCP file\n\n# Backup Customization\nGS_BACKUP_TIMEOUT=${GS_BACKUP_TIMEOUT:-'240'}                       # replace in gravity-sync.conf to overwrite\nGS_BACKUP_INTEGRITY_WAIT=${GS_BACKUP_INTEGRITY_WAIT:-'5'}           # replace in gravity-sync.conf to overwrite\nGS_BACKUP_EXT=${GS_BACKUP_EXT:-'gsb'}                               # replace in gravity-sync.conf to overwrite\n\n# GS Folder/File Locations\nGS_FILEPATH='/usr/local/bin/gravity-sync'\nGS_ETC_PATH=${GS_ETC_PATH:-\"/etc/gravity-sync\"}                                     # replace in gravity-sync.conf to overwrite\nGS_CONFIG_FILE=${GS_CONFIG_FILE:-'gravity-sync.conf'}                               # replace in gravity-sync.conf to overwrite\nGS_SYNCING_LOG=${GS_SYNCING_LOG:-'gs-sync.log'}                                     # replace in gravity-sync.conf to overwrite\nGS_GRAVITY_FI_MD5_LOG=${GS_GRAVITY_FI_MD5_LOG:-'gs-gravity.md5'}                    # replace in gravity-sync.conf to overwrite\nGS_CUSTOM_DNS_MD5_LOG=${GS_CUSTOM_DNS_MD5_LOG:-'gs-clist.md5'}                      # replace in gravity-sync.conf to overwrite\nGS_CNAME_CONF_MD5_LOG=${GS_CNAME_CONF_MD5_LOG:-'05-pihole-custom-cname.conf.md5'}   # replace in gravity-sync.conf to overwrite\nGS_SDHCP_CONF_MD5_LOG=${GS_SDHCP_CONF_MD5_LOG:-'04-pihole-static-dhcp.conf.md5'}    # replace in gravity-sync.conf to overwrite\n\n# SSH Customization\nGS_SSH_PORT=${GS_SSH_PORT:-'22'}                                # replace in gravity-sync.conf to overwrite\nGS_SSH_PKIF=${GS_SSH_PKIF:-\"${GS_ETC_PATH}/gravity-sync.rsa\"}   # replace in gravity-sync.conf to overwrite\n\n# Github Customization\nGS_LOCAL_REPO=${GS_LOCAL_REPO:-\"${GS_ETC_PATH}/.gs\"}            # replace in gravity-sync.conf to overwrite\n\n# OS Settings\nOS_DAEMON_PATH='/etc/systemd/system'\nOS_TMP='/tmp'\nOS_SSH_CMD='ssh'\n\n# Interface Settings\nUI_GRAVITY_NAME='Gravity Database'\nUI_CUSTOM_NAME='DNS Records'\nUI_CNAME_NAME='DNS CNAMEs'\nUI_SDHCP_NAME='Static DHCP Addresses'\n# Reused UI Text\nUI_CORE_LOADING='Loading'\nUI_CORE_EVALUATING='Evaluating arguments'\nUI_CORE_INIT=\"Initializing ${PROGRAM} (${GS_VERSION})\"\nUI_CORE_APP='Pi-hole'\nUI_CORE_APP_DNS='DNSMASQ'\nUI_EXIT_CALC_END='after'\nUI_EXIT_ABORT='exited'\nUI_EXIT_COMPLETE='completed'\nUI_EXIT_CALC_TIMER='seconds'\nUI_HASHING_HASHING='Hashing the remote'\nUI_HASHING_COMPARING='Comparing to the local'\nUI_HASHING_DIFFERENCE='Differences detected in the'\nUI_HASHING_DETECTED='has been detected on the'\nUI_HASHING_NOT_DETECTED='not detected on the'\nUI_HASHING_REMOTE=\"remote ${UI_CORE_APP}\"\nUI_HASHING_LOCAL=\"local ${UI_CORE_APP}\"\nUI_HASHING_REHASHING='Rehashing the remote'\nUI_HASHING_RECOMPARING='Recomparing to local'\nUI_VALIDATING='Validating pathways to'\nUI_VALIDATING_FAIL_CONTAINER='Unable to validate running container instance of'\nUI_VALIDATING_FAIL_FOLDER='Unable to validate configuration folder for'\nUI_VALIDATING_FAIL_BINARY='Unable to validate the availability of'\nUI_SET_LOCAL_FILE_OWNERSHIP='Setting file ownership on'\nUI_SET_FILE_PERMISSION='Setting file permissions on'\nUI_PULL_REMOTE='Pulling the remote'\nUI_PUSH_LOCAL='Pushing the local'\nUI_REPLACE_LOCAL='Replacing the local'\nUI_FTLDNS_CONFIG_PULL_RELOAD='Reloading local FTLDNS services'\nUI_FTLDNS_CONFIG_PUSH_RELOAD='Reloading remote FTLDNS services'\nUI_LOGGING_RECENT_COMPLETE='Recent complete executions of'\nUI_BACKUP_REMOTE='Performing backup of remote'\nUI_BACKUP_LOCAL='Performing backup of local'\nUI_BACKUP_INTEGRITY=\"Checking ${UI_GRAVITY_NAME} copy integrity\"\nUI_BACKUP_INTEGRITY_FAILED='Integrity check has failed for the remote'\nUI_BACKUP_INTEGRITY_DELETE='Removing failed copies'\nUI_CONFIG_ALREADY='already exists'\nUI_CONFIG_CONFIRM='Proceeding will replace your existing configuration'\nUI_CONFIG_ERASING='Erasing existing'\nUI_CONFIG_LOCAL='local host'\nUI_CONFIG_CONTAINER_NAME='container name'\nUI_CONFIG_SAVING='Saving'\nUI_CONFIG_ETC_VOLUME_PATH=\"'etc' volume path\"\nUI_CONFIG_VOLUME_OWNER='volume ownership'\n\n## Script Colors\nRED='\\033[0;91m'\nGREEN='\\033[0;92m'\nCYAN='\\033[0;96m'\nYELLOW='\\033[0;93m'\nPURPLE='\\033[0;95m'\nBLUE='\\033[0;94m'\nBOLD='\\033[1m'\nNC='\\033[0m'\n\n## Message Codes\nFAIL=\"${RED}✗${NC}\"\nWARN=\"${PURPLE}!${NC}\"\nGOOD=\"${GREEN}✓${NC}\"\nSTAT=\"${CYAN}∞${NC}\"\nINFO=\"${YELLOW}»${NC}\"\nINF1=\"${CYAN}›${NC}\"\nNEED=\"${BLUE}?${NC}\"\nLOGO=\"${PURPLE}∞${NC}\"\n\n## Echo Stack\n### Informative\nfunction echo_info {\n    echo -e \"${INFO} ${YELLOW}${MESSAGE}${NC}\"\n}\n\nfunction echo_prompt {\n    echo -e \"${INF1} ${CYAN}${MESSAGE}${NC}\"\n}\n\n### Warning\nfunction echo_warn {\n    echo -e \"${WARN} ${PURPLE}${MESSAGE}${NC}\"\n}\n\n### Executing\nfunction echo_stat {\n    echo -en \"${STAT} ${MESSAGE}\"\n}\n\n### Success\nfunction echo_good {\n    echo -e \"\\r${GOOD} ${MESSAGE}\"\n}\n\n### Success\nfunction echo_good_clean {\n    echo -e \"\\r${GOOD} ${MESSAGE}\"\n}\n\n### Failure\nfunction echo_fail {\n    echo -e \"\\r${FAIL} ${MESSAGE}\"\n}\n\n### Request\nfunction echo_need {\n    echo -en \"${NEED} ${BOLD}${MESSAGE}:${NC} \"\n}\n\n### Indent\nfunction echo_over {\n    echo -e \"  ${MESSAGE}\"\n}\n\n### Gravity Sync Logo\nfunction echo_grav {\n    echo -e \"${LOGO} ${BOLD}${MESSAGE}${NC}\"\n}\n\n### Lines\nfunction echo_blank {\n    echo -e \"\"\n}\n\n# Standard Output\nfunction start_gs {\n    MESSAGE=\"${UI_CORE_INIT}\"\n    echo_grav\n\n    import_gs_config\n    detect_local_pihole\n    detect_remote_pihole\n    detect_gs_peer\n    set_pihole_exec\n\n    MESSAGE=\"${UI_CORE_EVALUATING}\"\n    echo_stat\n\n    validate_sudo_status\n}\n\n# Standard Output No Config\nfunction start_gs_no_config {\n    MESSAGE=\"${UI_CORE_INIT}\"\n    echo_grav\n\n    MESSAGE=\"${UI_CORE_EVALUATING}\"\n    echo_stat\n}\n\n## Import Settings\nfunction import_gs_config {\n    MESSAGE=\"${UI_CORE_LOADING} ${GS_CONFIG_FILE}\"\n    echo -en \"${STAT} $MESSAGE\"\n    if [ -f ${GS_ETC_PATH}/${GS_CONFIG_FILE} ]; then\n        # shellcheck source=/etc/gravity-sync/gravity-sync.conf\n        source ${GS_ETC_PATH}/${GS_CONFIG_FILE}\n        error_validate\n    else\n        echo_fail\n\n        MESSAGE=\"Missing ${GS_CONFIG_FILE}\"\n        echo_warn\n\n        GS_TASK_TYPE='CONFIG'\n        config_generate\n    fi\n}\n\n## Invalid Tasks\nfunction task_invalid {\n    start_gs_no_config\n    echo_fail\n    list_gs_arguments\n}\n\n## Error Validation\nfunction error_validate {\n    if [ \"$?\" != \"0\" ]; then\n        echo_fail\n        exit 1\n    else\n        echo_good\n    fi\n}\n\nfunction  set_pihole_exec {\n    if [ \"$LOCAL_PIHOLE_TYPE\" == \"default\" ]; then\n        PH_EXEC=\"${LOCAL_PIHOLE_BINARY}\"\n        FTL_EXEC=\"${LOCAL_FTL_BINARY}\"\n    elif [ \"$LOCAL_PIHOLE_TYPE\" == \"docker\" ]; then\n        PH_EXEC=\"sudo ${LOCAL_DOCKER_BINARY} exec $(sudo ${LOCAL_DOCKER_BINARY} ps -qf name=^${LOCAL_DOCKER_CONTAINER}$) pihole\"\n        FTL_EXEC=\"sudo ${LOCAL_DOCKER_BINARY} exec $(sudo ${LOCAL_DOCKER_BINARY} ps -qf name=^${LOCAL_DOCKER_CONTAINER}$) pihole-FTL\"\n    elif [ \"$LOCAL_PIHOLE_TYPE\" == \"podman\" ]; then\n        PH_EXEC=\"sudo ${LOCAL_PODMAN_BINARY} exec ${LOCAL_DOCKER_CONTAINER} pihole\"\n        FTL_EXEC=\"sudo ${LOCAL_PODMAN_BINARY} exec ${LOCAL_DOCKER_CONTAINER} pihole-FTL\"\n    fi\n\n    if [ \"$REMOTE_PIHOLE_TYPE\" == \"default\" ]; then\n        RH_EXEC=\"${REMOTE_PIHOLE_BINARY}\"\n        RFTL_EXEC=\"${REMOTE_FTL_BINARY}\"\n    elif [ \"$REMOTE_PIHOLE_TYPE\" == \"docker\" ]; then\n        RH_EXEC=\"sudo ${REMOTE_DOCKER_BINARY} exec \\$(sudo ${REMOTE_DOCKER_BINARY} ps -qf name=^${REMOTE_DOCKER_CONTAINER}$) pihole\"\n        RFTL_EXEC=\"sudo ${REMOTE_DOCKER_BINARY} exec \\$(sudo ${REMOTE_DOCKER_BINARY} ps -qf name=^${REMOTE_DOCKER_CONTAINER}$) pihole-FTL\"\n    elif [ \"$REMOTE_PIHOLE_TYPE\" == \"podman\" ]; then\n        RH_EXEC=\"sudo ${REMOTE_PODMAN_BINARY} exec ${REMOTE_DOCKER_CONTAINER} pihole\"\n        RFTL_EXEC=\"sudo ${REMOTE_PODMAN_BINARY} exec ${REMOTE_DOCKER_CONTAINER} pihole-FTL\"\n    fi\n}\n\n## Compare Task\nfunction task_compare {\n    start_gs\n\n    GS_TASK_TYPE='COMPARE'\n    MESSAGE=\"${MESSAGE}: ${GS_TASK_TYPE}\"\n    echo_good\n\n    show_target\n    validate_ph_folders\n    validate_dns_folders\n    previous_md5\n    md5_compare\n    exit_with_changes\n}\n\n## Pull Task\nfunction task_pull {\n    start_gs\n\n    GS_TASK_TYPE='PULL'\n    MESSAGE=\"${MESSAGE}: ${GS_TASK_TYPE}\"\n    echo_good\n    show_target\n    validate_ph_folders\n    validate_dns_folders\n    pull_gs\n    exit\n}\n\n## Pull Gravity\nfunction pull_gs_grav {\n\n    backup_local_gravity\n    backup_remote_gravity\n    backup_remote_gravity_integrity\n\n    MESSAGE=\"${UI_PULL_REMOTE} ${UI_GRAVITY_NAME}\"\n    echo_stat\n    RSYNC_REPATH=\"sudo rsync\"\n    RSYNC_SOURCE=\"${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT}\"\n    RSYNC_TARGET=\"${OS_TMP}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT}\"\n    create_rsync_cmd\n\n    MESSAGE=\"${UI_REPLACE_LOCAL} ${UI_GRAVITY_NAME}\"\n    echo_stat\n    sudo mv ${OS_TMP}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT} ${LOCAL_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI} >/dev/null 2>&1\n    error_validate\n\n    validate_gravity_permissions\n}\n\n## Pull Custom\nfunction pull_gs_custom {\n    if [ \"$REMOTE_PH_CUSTOM_DNS\" == \"1\" ]; then\n        backup_local_custom\n        backup_remote_custom\n\n        MESSAGE=\"${UI_PULL_REMOTE} ${UI_CUSTOM_NAME}\"\n        echo_stat\n        RSYNC_REPATH=\"sudo rsync\"\n        RSYNC_SOURCE=\"${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS}.${GS_BACKUP_EXT}\"\n        RSYNC_TARGET=\"${OS_TMP}/${PH_CUSTOM_DNS}.${GS_BACKUP_EXT}\"\n        create_rsync_cmd\n\n        MESSAGE=\"${UI_REPLACE_LOCAL} ${UI_CUSTOM_NAME}\"\n        echo_stat\n        sudo mv ${OS_TMP}/${PH_CUSTOM_DNS}.${GS_BACKUP_EXT} ${LOCAL_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS} >/dev/null 2>&1\n        error_validate\n\n        validate_custom_permissions\n    fi\n}\n\n## Pull CNAME\nfunction pull_gs_cname {\n    if [ \"$REMOTE_CNAME_DNS\" == \"1\" ]; then\n        backup_local_cname\n        backup_remote_cname\n\n        MESSAGE=\"${UI_PULL_REMOTE} ${UI_CNAME_NAME}\"\n        echo_stat\n        RSYNC_REPATH=\"sudo rsync\"\n        RSYNC_SOURCE=\"${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PIHOLE_DIRECTORY}/${PH_CNAME_CONF}.${GS_BACKUP_EXT}\"\n        RSYNC_TARGET=\"${OS_TMP}/${PH_CNAME_CONF}.${GS_BACKUP_EXT}\"\n        create_rsync_cmd\n\n        MESSAGE=\"${UI_REPLACE_LOCAL} ${UI_CNAME_NAME}\"\n        echo_stat\n        sudo mv ${OS_TMP}/${PH_CNAME_CONF}.${GS_BACKUP_EXT} ${LOCAL_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF} >/dev/null 2>&1\n        error_validate\n\n        validate_cname_permissions\n    fi\n}\n\n## Pull DHCP\nfunction pull_gs_sdhcp {\n    if [ \"$REMOTE_SDHCP_DNS\" == \"1\" ]; then\n        backup_local_sdhcp\n        backup_remote_sdhcp\n\n        MESSAGE=\"${UI_PULL_REMOTE} ${UI_SDHCP_NAME}\"\n        echo_stat\n        RSYNC_REPATH=\"sudo rsync\"\n        RSYNC_SOURCE=\"${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PIHOLE_DIRECTORY}/${PH_SDHCP_CONF}.${GS_BACKUP_EXT}\"\n        RSYNC_TARGET=\"${OS_TMP}/${PH_SDHCP_CONF}.${GS_BACKUP_EXT}\"\n        create_rsync_cmd\n\n        MESSAGE=\"${UI_REPLACE_LOCAL} ${UI_SDHCP_NAME}\"\n        echo_stat\n        sudo mv ${OS_TMP}/${PH_SDHCP_CONF}.${GS_BACKUP_EXT} ${LOCAL_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF} >/dev/null 2>&1\n        error_validate\n\n        validate_sdhcp_permissions\n    fi\n}\n\n## Pull Reload\nfunction pull_gs_reload {\n    sleep 1\n\n    MESSAGE=\"Updating local FTLDNS configuration\"\n    echo_stat\n    ${PH_EXEC} restartdns reload-lists >/dev/null 2>&1\n    error_validate\n\n    if [ \"${GS_TASK_TYPE}\" == SMART ]; then\n        if [ \"${REMOTE_DNS_CHANGE}\" == \"1\" ] || [ \"${LOCAL_DNS_CHANGE}\" == \"1\" ] || [ \"${REMOTE_CNAME_CHANGE}\" == \"1\" ] || [ \"${LOCAL_CNAME_CHANGE}\" == \"1\" ] || [ \"${REMOTE_SDHCP_CHANGE}\" == \"1\" ] || [ \"${LOCAL_SDHCP_CHANGE}\" == \"1\" ]; then\n            MESSAGE=\"${UI_FTLDNS_CONFIG_PULL_RELOAD}\"\n            echo_stat\n            ${PH_EXEC} restartdns >/dev/null 2>&1\n            error_validate\n        fi\n    else\n        MESSAGE=\"${UI_FTLDNS_CONFIG_PULL_RELOAD}\"\n        echo_stat\n        ${PH_EXEC} restartdns >/dev/null 2>&1\n        error_validate\n    fi\n}\n\n## Pull Function\nfunction pull_gs {\n    previous_md5\n    md5_compare\n    pull_gs_grav\n    pull_gs_custom\n    pull_gs_cname\n    pull_gs_sdhcp\n    pull_gs_reload\n    md5_recheck\n    logs_export\n    exit_with_changes\n}\n\n## Push Task\nfunction task_push {\n    start_gs\n\n    GS_TASK_TYPE='PUSH'\n    MESSAGE=\"${MESSAGE}: ${GS_TASK_TYPE}\"\n    echo_good\n\n    show_target\n    validate_ph_folders\n    validate_dns_folders\n    push_gs\n    exit\n}\n\n## Push Gravity\nfunction push_gs_grav {\n    backup_remote_gravity\n    backup_local_gravity\n    backup_local_gravity_integrity\n\n    MESSAGE=\"${UI_PUSH_LOCAL} ${UI_GRAVITY_NAME}\"\n    echo_stat\n    RSYNC_REPATH=\"sudo rsync\"\n    RSYNC_SOURCE=\"${LOCAL_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT}\"\n    RSYNC_TARGET=\"${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}\"\n    create_rsync_cmd\n\n    MESSAGE=\"${UI_SET_LOCAL_FILE_OWNERSHIP} ${UI_GRAVITY_NAME}\"\n    echo_stat\n    CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n    CMD_REQUESTED=\"sudo chown ${REMOTE_FILE_OWNER} ${REMOTE_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}\"\n    create_ssh_cmd\n\n    MESSAGE=\"${UI_SET_FILE_PERMISSION} ${UI_GRAVITY_NAME}\"\n    echo_stat\n    CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n    CMD_REQUESTED=\"sudo chmod 664 ${REMOTE_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}\"\n    create_ssh_cmd\n}\n\n## Push Custom\nfunction push_gs_custom {\n    if [ \"$REMOTE_PH_CUSTOM_DNS\" == \"1\" ]; then\n        backup_remote_custom\n        backup_local_custom\n\n        MESSAGE=\"${UI_PUSH_LOCAL} ${UI_CUSTOM_NAME}\"\n        echo_stat\n        RSYNC_REPATH=\"sudo rsync\"\n        RSYNC_SOURCE=\"${LOCAL_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS}.${GS_BACKUP_EXT}\"\n        RSYNC_TARGET=\"${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS}\"\n        create_rsync_cmd\n\n        MESSAGE=\"${UI_SET_LOCAL_FILE_OWNERSHIP} ${UI_CUSTOM_NAME}\"\n        echo_stat\n        CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n        CMD_REQUESTED=\"sudo chown ${REMOTE_FILE_OWNER} ${REMOTE_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS}\"\n        create_ssh_cmd\n\n        MESSAGE=\"${UI_SET_FILE_PERMISSION} ${UI_CUSTOM_NAME}\"\n        echo_stat\n        CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n        CMD_REQUESTED=\"sudo chmod 644 ${REMOTE_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS}\"\n        create_ssh_cmd\n    fi\n}\n\n## Push Custom\nfunction push_gs_cname {\n    if [ \"$REMOTE_CNAME_DNS\" == \"1\" ]; then\n        backup_remote_cname\n        backup_local_cname\n\n        MESSAGE=\"${UI_PUSH_LOCAL} ${UI_CNAME_NAME}\"\n        echo_stat\n        RSYNC_REPATH=\"sudo rsync\"\n        RSYNC_SOURCE=\"${LOCAL_PIHOLE_DIRECTORY}/${PH_CNAME_CONF}.${GS_BACKUP_EXT}\"\n        RSYNC_TARGET=\"${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF}\"\n        create_rsync_cmd\n\n        MESSAGE=\"${UI_SET_LOCAL_FILE_OWNERSHIP} ${UI_CNAME_NAME}\"\n        echo_stat\n        CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n        CMD_REQUESTED=\"sudo chown ${REMOTE_FILE_OWNER} ${REMOTE_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF}\"\n        create_ssh_cmd\n\n\n        MESSAGE=\"${UI_SET_FILE_PERMISSION} ${UI_CNAME_NAME}\"\n        echo_stat\n        CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n        CMD_REQUESTED=\"sudo chmod 644 ${REMOTE_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF}\"\n        create_ssh_cmd\n    fi\n}\n\n## Push Custom\nfunction push_gs_sdhcp {\n    if [ \"$REMOTE_SDHCP_DNS\" == \"1\" ]; then\n        backup_remote_sdhcp\n        backup_local_sdhcp\n\n        MESSAGE=\"${UI_PUSH_LOCAL} ${UI_SDHCP_NAME}\"\n        echo_stat\n        RSYNC_REPATH=\"sudo rsync\"\n        RSYNC_SOURCE=\"${LOCAL_PIHOLE_DIRECTORY}/${PH_SDHCP_CONF}.${GS_BACKUP_EXT}\"\n        RSYNC_TARGET=\"${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF}\"\n        create_rsync_cmd\n\n        MESSAGE=\"${UI_SET_LOCAL_FILE_OWNERSHIP} ${UI_SDHCP_NAME}\"\n        echo_stat\n        CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n        CMD_REQUESTED=\"sudo chown ${REMOTE_FILE_OWNER} ${REMOTE_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF}\"\n        create_ssh_cmd\n\n\n        MESSAGE=\"${UI_SET_FILE_PERMISSION} ${UI_SDHCP_NAME}\"\n        echo_stat\n        CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n        CMD_REQUESTED=\"sudo chmod 644 ${REMOTE_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF}\"\n        create_ssh_cmd\n    fi\n}\n\n## Push Reload\nfunction push_gs_reload {\n    sleep 1\n\n    MESSAGE=\"Updating remote FTLDNS configuration\"\n    echo_stat\n    CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n    CMD_REQUESTED=\"${RH_EXEC} restartdns reload-lists\"\n    create_ssh_cmd\n\n    if [ \"${GS_TASK_TYPE}\" == SMART ]; then\n        if [ \"${REMOTE_DNS_CHANGE}\" == \"1\" ] || [ \"${LOCAL_DNS_CHANGE}\" == \"1\" ] || [ \"${REMOTE_CNAME_CHANGE}\" == \"1\" ] || [ \"${LOCAL_CNAME_CHANGE}\" == \"1\" ] || [ \"${REMOTE_SDHCP_CHANGE}\" == \"1\" ] || [ \"${LOCAL_SDHCP_CHANGE}\" == \"1\" ]; then\n            MESSAGE=\"${UI_FTLDNS_CONFIG_PUSH_RELOAD}\"\n            echo_stat\n            CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n            CMD_REQUESTED=\"${RH_EXEC} restartdns\"\n            create_ssh_cmd\n        fi\n    else\n        MESSAGE=\"${UI_FTLDNS_CONFIG_PUSH_RELOAD}\"\n        echo_stat\n        CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n        CMD_REQUESTED=\"${RH_EXEC} restartdns\"\n        create_ssh_cmd\n    fi\n}\n\n## Push Function\nfunction push_gs {\n    previous_md5\n    md5_compare\n    push_gs_grav\n    push_gs_custom\n    push_gs_cname\n    push_gs_sdhcp\n    push_gs_reload\n    md5_recheck\n    logs_export\n    exit_with_changes\n}\n\n## Smart Task\nfunction task_smart {\n    start_gs\n\n    GS_TASK_TYPE='SMART'\n    MESSAGE=\"${MESSAGE}: ${GS_TASK_TYPE}\"\n    echo_good\n\n    show_target\n    validate_ph_folders\n    validate_dns_folders\n    smart_gs\n    exit\n}\n\n## Smart Sync Function\nfunction smart_gs {\n    MESSAGE=\"Starting ${GS_TASK_TYPE} Analysis\"\n    echo_info\n\n    previous_md5\n    md5_compare\n\n    REMOTE_GRAVITY_CHANGE=\"0\"\n    LOCAL_GRAVITY_CHANGE=\"0\"\n    REMOTE_DNS_CHANGE=\"0\"\n    LOCAL_DNS_CHANGE=\"0\"\n    REMOTE_CNAME_CHANGE=\"0\"\n    LOCAL_CNAME_CHANGE=\"0\"\n    REMOTE_SDHCP_CHANGE=\"0\"\n    LOCAL_SDHCP_CHANGE=\"0\"\n\n    if [ \"${REMOTE_DB_MD5}\" != \"${LAST_REMOTE_DB_MD5}\" ]; then\n        REMOTE_GRAVITY_CHANGE=\"1\"\n    fi\n\n    if [ \"${LOCAL_DB_MD5}\" != \"${LAST_LOCAL_DB_MD5}\" ]; then\n        LOCAL_GRAVITY_CHANGE=\"1\"\n    fi\n\n    if [ \"${REMOTE_GRAVITY_CHANGE}\" == \"${LOCAL_GRAVITY_CHANGE}\" ]; then\n        if [ \"${REMOTE_GRAVITY_CHANGE}\" != \"0\" ]; then\n            MESSAGE=\"Both ${UI_GRAVITY_NAME} have changed\"\n            echo_warn\n\n            REMOTE_GRAVITY_DATE=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"stat -c %Y ${REMOTE_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}\")\n            LOCAL_GRAVITY_DATE=$(stat -c %Y ${LOCAL_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI})\n\n            if (( \"$REMOTE_GRAVITY_DATE\" >= \"$LOCAL_GRAVITY_DATE\" )); then\n                MESSAGE=\"Remote ${UI_GRAVITY_NAME} was last changed\"\n                echo_warn\n\n                pull_gs_grav\n                GS_PULL_RESTART=\"1\"\n            else\n                MESSAGE=\"Local ${UI_GRAVITY_NAME} was last changed\"\n                echo_warn\n\n                push_gs_grav\n                GS_PUSH_RESTART=\"1\"\n            fi\n        fi\n    else\n        if [ \"${REMOTE_GRAVITY_CHANGE}\" != \"0\" ]; then\n            pull_gs_grav\n            GS_PULL_RESTART=\"1\"\n        elif [ \"${LOCAL_GRAVITY_CHANGE}\" != \"0\" ]; then\n            push_gs_grav\n            GS_PUSH_RESTART=\"1\"\n        fi\n    fi\n\n    if [ \"${REMOTE_CL_MD5}\" != \"${LAST_REMOTE_CL_MD5}\" ]; then\n        REMOTE_DNS_CHANGE=\"1\"\n    fi\n\n    if [ \"${LOCAL_CL_MD5}\" != \"${LAST_LOCAL_CL_MD5}\" ]; then\n        LOCAL_DNS_CHANGE=\"1\"\n    fi\n\n    if [ -f \"${LOCAL_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS}\" ]; then\n        if [ \"${REMOTE_DNS_CHANGE}\" == \"${LOCAL_DNS_CHANGE}\" ]; then\n            if [ \"${REMOTE_DNS_CHANGE}\" != \"0\" ]; then\n                MESSAGE=\"Both ${UI_CUSTOM_NAME} have changed\"\n                echo_warn\n\n                REMOTE_DNS_DATE=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"stat -c %Y ${REMOTE_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS}\")\n                LOCAL_DNS_DATE=$(stat -c %Y ${LOCAL_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS})\n\n                if (( \"$REMOTE_DNS_DATE\" >= \"$LOCAL_DNS_DATE\" )); then\n                    MESSAGE=\"Remote ${UI_CUSTOM_NAME} was last changed\"\n                    echo_warn\n\n                    pull_gs_custom\n                    GS_PULL_RESTART=\"1\"\n                else\n                    MESSAGE=\"Local ${UI_CUSTOM_NAME} was last changed\"\n                    echo_warn\n\n                    push_gs_custom\n                    GS_PUSH_RESTART=\"1\"\n                fi\n            fi\n        else\n            if [ \"${REMOTE_DNS_CHANGE}\" != \"0\" ]; then\n                pull_gs_custom\n                GS_PULL_RESTART=\"1\"\n            elif [ \"${LOCAL_DNS_CHANGE}\" != \"0\" ]; then\n                push_gs_custom\n                GS_PUSH_RESTART=\"1\"\n            fi\n        fi\n    else\n        pull_gs_custom\n        GS_PULL_RESTART=\"1\"\n    fi\n\n    if [ \"${REMOTE_CN_MD5}\" != \"${LAST_REMOTE_CN_MD5}\" ]; then\n        REMOTE_CNAME_CHANGE=\"1\"\n    fi\n\n    if [ \"${LOCAL_CN_MD5}\" != \"${LAST_LOCAL_CN_MD5}\" ]; then\n        LOCAL_CNAME_CHANGE=\"1\"\n    fi\n\n    if [ -f \"${LOCAL_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF}\" ]; then\n        if [ \"${REMOTE_CNAME_CHANGE}\" == \"${LOCAL_CNAME_CHANGE}\" ]; then\n            if [ \"${REMOTE_CNAME_CHANGE}\" != \"0\" ]; then\n                MESSAGE=\"Both ${UI_CNAME_NAME} have Changed\"\n                echo_warn\n\n                REMOTE_CNAME_DATE=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"stat -c %Y ${REMOTE_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF}\")\n                LOCAL_CNAME_DATE=$(stat -c %Y ${LOCAL_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF})\n\n                if (( \"$REMOTE_CNAME_DATE\" >= \"$LOCAL_CNAME_DATE\" )); then\n                    MESSAGE=\"Remote ${UI_CNAME_NAME} was last changed\"\n                    echo_warn\n\n                    pull_gs_cname\n                    GS_PULL_RESTART=\"1\"\n                else\n                    MESSAGE=\"Local ${UI_CNAME_NAME} was last changed\"\n                    echo_warn\n\n                    push_gs_cname\n                    GS_PUSH_RESTART=\"1\"\n                fi\n            fi\n        else\n            if [ \"${REMOTE_CNAME_CHANGE}\" != \"0\" ]; then\n                pull_gs_cname\n                GS_PULL_RESTART=\"1\"\n            elif [ \"${LOCAL_CNAME_CHANGE}\" != \"0\" ]; then\n                push_gs_cname\n                GS_PUSH_RESTART=\"1\"\n            fi\n        fi\n    else\n        pull_gs_cname\n        GS_PULL_RESTART=\"1\"\n    fi\n\n    if [ \"${REMOTE_SDHCP_MD5}\" != \"${LAST_REMOTE_SDHCP_MD5}\" ]; then\n        REMOTE_SDHCP_CHANGE=\"1\"\n    fi\n\n    if [ \"${LOCAL_SDHCP_MD5}\" != \"${LAST_LOCAL_SDHCP_MD5}\" ]; then\n        LOCAL_SDHCP_CHANGE=\"1\"\n    fi\n\n    if [ -f \"${LOCAL_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF}\" ]; then\n        if [ \"${REMOTE_SDHCP_CHANGE}\" == \"${LOCAL_SDHCP_CHANGE}\" ]; then\n            if [ \"${REMOTE_SDHCP_CHANGE}\" != \"0\" ]; then\n                MESSAGE=\"Both ${UI_SDHCP_NAME} have Changed\"\n                echo_warn\n\n                REMOTE_SDHCP_DATE=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"stat -c %Y ${REMOTE_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF}\")\n                LOCAL_SDHCP_DATE=$(stat -c %Y ${LOCAL_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF})\n\n                if (( \"$REMOTE_SDHCP_DATE\" >= \"$LOCAL_SDHCP_DATE\" )); then\n                    MESSAGE=\"Remote ${UI_SDHCP_NAME} was last changed\"\n                    echo_warn\n\n                    pull_gs_sdhcp\n                    GS_PULL_RESTART=\"1\"\n                else\n                    MESSAGE=\"Local ${UI_SDHCP_NAME} was last changed\"\n                    echo_warn\n\n                    push_gs_sdhcp\n                    GS_PUSH_RESTART=\"1\"\n                fi\n            fi\n        else\n            if [ \"${REMOTE_SDHCP_CHANGE}\" != \"0\" ]; then\n                pull_gs_sdhcp\n                GS_PULL_RESTART=\"1\"\n            elif [ \"${LOCAL_SDHCP_CHANGE}\" != \"0\" ]; then\n                push_gs_sdhcp\n                GS_PUSH_RESTART=\"1\"\n            fi\n        fi\n    else\n        pull_gs_sdhcp\n        GS_PULL_RESTART=\"1\"\n    fi\n\n    if [ \"$GS_PULL_RESTART\" == \"1\" ]; then\n        pull_gs_reload\n    fi\n\n    if [ \"$GS_PUSH_RESTART\" == \"1\" ]; then\n        push_gs_reload\n    fi\n\n    md5_recheck\n\n    logs_export\n    exit_with_changes\n}\n\nfunction backup_local_gravity {\n    MESSAGE=\"${UI_BACKUP_LOCAL} ${UI_GRAVITY_NAME}\"\n    echo_stat\n\n    if [ \"$LOCAL_PIHOLE_TYPE\" == \"default\" ]; then\n        sudo ${FTL_EXEC} sql ${LOCAL_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI} \".backup '${LOCAL_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT}'\"\n        error_validate\n    elif [ \"$LOCAL_PIHOLE_TYPE\" == \"docker\" ]; then\n        sudo ${FTL_EXEC} sql ${DEFAULT_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI} \".backup '${DEFAULT_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT}'\"\n        error_validate\n    elif [ \"$LOCAL_PIHOLE_TYPE\" == \"podman\" ]; then\n        sudo ${FTL_EXEC} sql ${DEFAULT_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI} \".backup '${DEFAULT_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT}'\"\n        error_validate\n    fi\n}\n\nfunction backup_local_gravity_integrity {\n    MESSAGE=\"${UI_BACKUP_INTEGRITY}\"\n    echo_stat\n\n    sleep $GS_BACKUP_INTEGRITY_WAIT\n\n    if [ \"$LOCAL_PIHOLE_TYPE\" == \"default\" ]; then\n        LOCAL_INTEGRITY_CHECK=$(${FTL_EXEC} sql ${LOCAL_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT} 'PRAGMA integrity_check;' | sed 's/\\s.*$//')\n        error_validate\n    elif [ \"$LOCAL_PIHOLE_TYPE\" == \"docker\" ]; then\n        LOCAL_INTEGRITY_CHECK=$(${FTL_EXEC} sql ${DEFAULT_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT} 'PRAGMA integrity_check;' | sed 's/\\s.*$//')\n        error_validate\n    elif [ \"$LOCAL_PIHOLE_TYPE\" == \"podman\" ]; then\n        LOCAL_INTEGRITY_CHECK=$(${FTL_EXEC} sql ${DEFAULT_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT} 'PRAGMA integrity_check;' | sed 's/\\s.*$//')\n        error_validate\n    fi\n\n    if [ \"$LOCAL_INTEGRITY_CHECK\" != 'ok' ]; then\n        MESSAGE=\"${UI_BACKUP_INTEGRITY_FAILED} ${UI_GRAVITY_NAME}\"\n        echo_fail\n\n        MESSAGE=\"${UI_BACKUP_INTEGRITY_DELETE} ${UI_GRAVITY_NAME}\"\n        echo_stat\n\n        sudo rm ${LOCAL_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT}\n        error_validate\n\n        exit_no_change\n    fi\n}\n\nfunction backup_local_custom {\n    if [ -f ${LOCAL_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS} ]; then\n        MESSAGE=\"${UI_BACKUP_LOCAL} ${UI_CUSTOM_NAME}\"\n        echo_stat\n\n        sudo cp ${LOCAL_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS} ${LOCAL_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS}.${GS_BACKUP_EXT}\n        error_validate\n    else\n        MESSAGE=\"No local ${PH_CUSTOM_DNS} detected\"\n        echo_warn\n    fi\n}\n\nfunction backup_local_cname {\n    if [ -f ${LOCAL_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF} ]; then\n        MESSAGE=\"${UI_BACKUP_LOCAL} ${UI_CNAME_NAME}\"\n        echo_stat\n\n        sudo cp ${LOCAL_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF} ${LOCAL_PIHOLE_DIRECTORY}/${PH_CNAME_CONF}.${GS_BACKUP_EXT}\n        error_validate\n    else\n        MESSAGE=\"No local ${PH_CNAME_CONF} detected\"\n        echo_warn\n    fi\n}\n\nfunction backup_local_sdhcp {\n    if [ -f ${LOCAL_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF} ]; then\n        MESSAGE=\"${UI_BACKUP_LOCAL} ${UI_SDHCP_NAME}\"\n        echo_stat\n\n        sudo cp ${LOCAL_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF} ${LOCAL_PIHOLE_DIRECTORY}/${PH_SDHCP_CONF}.${GS_BACKUP_EXT}\n        error_validate\n    else\n        MESSAGE=\"No local ${PH_SDHCP_CONF} detected\"\n        echo_warn\n    fi\n}\n\nfunction backup_remote_gravity {\n    MESSAGE=\"${UI_BACKUP_REMOTE} ${UI_GRAVITY_NAME}\"\n    echo_stat\n\n    if [ \"$REMOTE_PIHOLE_TYPE\" == \"default\" ]; then\n        CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n        CMD_REQUESTED=\"sudo ${RFTL_EXEC} sql ${REMOTE_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI} \\\".backup '${REMOTE_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT}'\\\"\"\n        create_ssh_cmd\n    elif [ \"$REMOTE_PIHOLE_TYPE\" == \"docker\" ]; then\n        CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n        CMD_REQUESTED=\"sudo ${RFTL_EXEC} sql ${DEFAULT_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI} \\\".backup '${DEFAULT_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT}'\\\"\"\n        create_ssh_cmd\n    elif [ \"$REMOTE_PIHOLE_TYPE\" == \"podman\" ]; then\n        CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n        CMD_REQUESTED=\"sudo ${RFTL_EXEC} sql ${DEFAULT_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI} \\\".backup '${DEFAULT_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT}'\\\"\"\n        create_ssh_cmd\n    fi\n}\n\nfunction backup_remote_gravity_integrity {\n    MESSAGE=\"${UI_BACKUP_INTEGRITY}\"\n    echo_stat\n\n    sleep $GS_BACKUP_INTEGRITY_WAIT\n\n    if [ \"$REMOTE_PIHOLE_TYPE\" == \"default\" ]; then\n        REMOTE_INTEGRITY_CHECK=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"${RFTL_EXEC} sql ${REMOTE_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT} 'PRAGMA integrity_check;'\" | sed 's/\\s.*$//')\n        error_validate\n    elif [ \"$REMOTE_PIHOLE_TYPE\" == \"docker\" ]; then\n        REMOTE_INTEGRITY_CHECK=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"${RFTL_EXEC} sql ${DEFAULT_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT} 'PRAGMA integrity_check;'\" | sed 's/\\s.*$//')\n        error_validate\n    elif [ \"$REMOTE_PIHOLE_TYPE\" == \"podman\" ]; then\n        REMOTE_INTEGRITY_CHECK=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"${RFTL_EXEC} sql ${DEFAULT_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT} 'PRAGMA integrity_check;'\" | sed 's/\\s.*$//')\n        error_validate\n    fi\n\n    if [ \"$REMOTE_INTEGRITY_CHECK\" != 'ok' ]; then\n        MESSAGE=\"${UI_BACKUP_INTEGRITY_FAILED} ${UI_GRAVITY_NAME}\"\n        echo_fail\n\n        MESSAGE=\"${UI_BACKUP_INTEGRITY_DELETE} ${UI_GRAVITY_NAME}\"\n        echo_stat\n\n        CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n        CMD_REQUESTED=\"sudo rm ${REMOTE_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}.${GS_BACKUP_EXT}\"\n        create_ssh_cmd\n\n        exit_no_change\n    fi\n}\n\nfunction backup_remote_custom {\n        MESSAGE=\"${UI_BACKUP_REMOTE} ${UI_CUSTOM_NAME}\"\n        echo_stat\n\n        CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n        CMD_REQUESTED=\"sudo cp ${REMOTE_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS} ${REMOTE_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS}.${GS_BACKUP_EXT}\"\n        create_ssh_cmd\n}\n\nfunction backup_remote_cname {\n        MESSAGE=\"${UI_BACKUP_REMOTE} ${UI_CNAME_NAME}\"\n        echo_stat\n\n        CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n        CMD_REQUESTED=\"sudo cp ${REMOTE_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF} ${REMOTE_PIHOLE_DIRECTORY}/${PH_CNAME_CONF}.${GS_BACKUP_EXT}\"\n        create_ssh_cmd\n}\n\nfunction backup_remote_sdhcp {\n        MESSAGE=\"${UI_BACKUP_REMOTE} ${UI_SDHCP_NAME}\"\n        echo_stat\n\n        CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n        CMD_REQUESTED=\"sudo cp ${REMOTE_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF} ${REMOTE_PIHOLE_DIRECTORY}/${PH_SDHCP_CONF}.${GS_BACKUP_EXT}\"\n        create_ssh_cmd\n}\n\nfunction backup_cleanup {\n    MESSAGE=\"Purging backups\"\n    echo_stat\n    # git clean -fq\n    sudo rm -f ${LOCAL_PIHOLE_DIRECTORY}/*.${GS_BACKUP_EXT}\n    error_validate\n\n    # MESSAGE=\"${UI_BACKUP_PURGE} on remote\"\n    # echo_stat\n    # CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n    # CMD_REQUESTED=\"sudo rm -f ${REMOTE_PIHOLE_DIRECTORY}/*.${GS_BACKUP_EXT}\"\n    # create_ssh_cmd\n}\n\nfunction md5_compare {\n    GS_HASH_MARK='0'\n\n    MESSAGE=\"${UI_HASHING_HASHING} ${UI_GRAVITY_NAME}\"\n    echo_stat\n    REMOTE_DB_MD5=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"md5sum ${REMOTE_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}\" | sed 's/\\s.*$//')\n    error_validate\n\n    MESSAGE=\"${UI_HASHING_COMPARING} ${UI_GRAVITY_NAME}\"\n    echo_stat\n    LOCAL_DB_MD5=$(md5sum ${LOCAL_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI} | sed 's/\\s.*$//')\n    error_validate\n\n    if [ \"$REMOTE_DB_MD5\" == \"$LAST_REMOTE_DB_MD5\" ] && [ \"$LOCAL_DB_MD5\" == \"$LAST_LOCAL_DB_MD5\" ]; then\n        GS_HASH_MARK=$((GS_HASH_MARK+0))\n    else\n        MESSAGE=\"${UI_HASHING_DIFFERENCE} ${UI_GRAVITY_NAME}\"\n        echo_warn\n        GS_HASH_MARK=$((GS_HASH_MARK+1))\n    fi\n\n    if [ -f ${LOCAL_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS} ]; then\n        if ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} test -e ${REMOTE_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS}; then\n            REMOTE_PH_CUSTOM_DNS=\"1\"\n            MESSAGE=\"${UI_HASHING_HASHING} ${UI_CUSTOM_NAME}\"\n            echo_stat\n\n            REMOTE_CL_MD5=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"md5sum ${REMOTE_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS} | sed 's/\\s.*$//'\")\n            error_validate\n\n            MESSAGE=\"${UI_HASHING_COMPARING} ${UI_CUSTOM_NAME}\"\n            echo_stat\n            LOCAL_CL_MD5=$(md5sum ${LOCAL_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS} | sed 's/\\s.*$//')\n            error_validate\n\n            if [ \"$REMOTE_CL_MD5\" == \"$LAST_REMOTE_CL_MD5\" ] && [ \"$LOCAL_CL_MD5\" == \"$LAST_LOCAL_CL_MD5\" ]; then\n                GS_HASH_MARK=$((GS_HASH_MARK+0))\n            else\n                MESSAGE=\"${UI_HASHING_DIFFERENCE} ${UI_CUSTOM_NAME}\"\n                echo_warn\n                GS_HASH_MARK=$((GS_HASH_MARK+1))\n            fi\n        else\n            MESSAGE=\"${UI_CUSTOM_NAME} ${UI_HASHING_NOT_DETECTED} ${UI_HASHING_REMOTE}\"\n            echo_warn\n        fi\n    else\n        if ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} test -e ${REMOTE_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS}; then\n            REMOTE_PH_CUSTOM_DNS=\"1\"\n            MESSAGE=\"${UI_CUSTOM_NAME} ${UI_HASHING_DETECTED} ${UI_HASHING_REMOTE}\"\n            GS_HASH_MARK=$((GS_HASH_MARK+1))\n            echo_warn\n        fi\n        MESSAGE=\"${UI_CUSTOM_NAME} ${UI_HASHING_NOT_DETECTED} ${UI_HASHING_LOCAL}\"\n        echo_warn\n    fi\n\n    if [ -f ${LOCAL_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF} ]; then\n        if ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} test -e ${REMOTE_DNSMASQ_DIRECTORY}; then\n            CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n            CMD_REQUESTED=\"sudo touch ${REMOTE_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF}\"\n            create_ssh_cmd\n\n            REMOTE_CNAME_DNS=\"1\"\n            MESSAGE=\"${UI_HASHING_HASHING} ${UI_CNAME_NAME}\"\n            echo_stat\n\n            REMOTE_CN_MD5=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"md5sum ${REMOTE_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF} | sed 's/\\s.*$//'\")\n            error_validate\n\n            MESSAGE=\"${UI_HASHING_COMPARING} ${UI_CNAME_NAME}\"\n            echo_stat\n            LOCAL_CN_MD5=$(md5sum ${LOCAL_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF} | sed 's/\\s.*$//')\n            error_validate\n\n            if [ \"$REMOTE_CN_MD5\" == \"$LAST_REMOTE_CN_MD5\" ] && [ \"$LOCAL_CN_MD5\" == \"$LAST_LOCAL_CN_MD5\" ]; then\n                GS_HASH_MARK=$((GS_HASH_MARK+0))\n            else\n                MESSAGE=\"${UI_HASHING_DIFFERENCE} ${UI_CNAME_NAME}\"\n                echo_warn\n                GS_HASH_MARK=$((GS_HASH_MARK+1))\n            fi\n        else\n            MESSAGE=\"${UI_CNAME_NAME} ${UI_HASHING_NOT_DETECTED} ${UI_HASHING_REMOTE}\"\n            echo_warn\n        fi\n    else\n        if ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} test -e ${REMOTE_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF}; then\n            REMOTE_CNAME_DNS=\"1\"\n            MESSAGE=\"${UI_CNAME_NAME} ${UI_HASHING_DETECTED} ${UI_HASHING_REMOTE}\"\n            GS_HASH_MARK=$((GS_HASH_MARK+1))\n            echo_warn\n        fi\n\n        MESSAGE=\"${UI_CNAME_NAME} ${UI_HASHING_NOT_DETECTED} ${UI_HASHING_LOCAL}\"\n        echo_warn\n    fi\n\n    if [ -f ${LOCAL_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF} ]; then\n        if ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} test -e ${REMOTE_DNSMASQ_DIRECTORY}; then\n            CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n            CMD_REQUESTED=\"sudo touch ${REMOTE_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF}\"\n            create_ssh_cmd\n\n            REMOTE_SDHCP_DNS=\"1\"\n            MESSAGE=\"${UI_HASHING_HASHING} ${UI_SDHCP_NAME}\"\n            echo_stat\n\n            REMOTE_SDHCP_MD5=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"md5sum ${REMOTE_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF} | sed 's/\\s.*$//'\")\n            error_validate\n\n            MESSAGE=\"${UI_HASHING_COMPARING} ${UI_SDHCP_NAME}\"\n            echo_stat\n            LOCAL_SDHCP_MD5=$(md5sum ${LOCAL_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF} | sed 's/\\s.*$//')\n            error_validate\n\n            if [ \"$REMOTE_SDHCP_MD5\" == \"$LAST_REMOTE_SDHCP_MD5\" ] && [ \"$LOCAL_SDHCP_MD5\" == \"$LAST_LOCAL_SDHCP_MD5\" ]; then\n                GS_HASH_MARK=$((GS_HASH_MARK+0))\n            else\n                MESSAGE=\"${UI_HASHING_DIFFERENCE} ${UI_SDHCP_NAME}\"\n                echo_warn\n                GS_HASH_MARK=$((GS_HASH_MARK+1))\n            fi\n        else\n            MESSAGE=\"${UI_SDHCP_NAME} ${UI_HASHING_NOT_DETECTED} ${UI_HASHING_REMOTE}\"\n            echo_warn\n        fi\n    else\n        if ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} test -e ${REMOTE_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF}; then\n            REMOTE_SDHCP_DNS=\"1\"\n            MESSAGE=\"${UI_SDHCP_NAME} ${UI_HASHING_DETECTED} ${UI_HASHING_REMOTE}\"\n            GS_HASH_MARK=$((GS_HASH_MARK+1))\n            echo_warn\n        fi\n\n        MESSAGE=\"${UI_SDHCP_NAME} ${UI_HASHING_NOT_DETECTED} ${UI_HASHING_LOCAL}\"\n        echo_warn\n    fi\n\n    if [ \"$GS_HASH_MARK\" != \"0\" ]; then\n        MESSAGE=\"Replication of ${UI_CORE_APP} settings is required\"\n        echo_warn\n        GS_HASH_MARK=$((GS_HASH_MARK+0))\n    else\n        MESSAGE=\"No replication is required at this time\"\n        echo_warn\n        exit_no_change\n    fi\n}\n\nfunction previous_md5 {\n    if [ -f \"${GS_ETC_PATH}/${GS_GRAVITY_FI_MD5_LOG}\" ]; then\n        LAST_REMOTE_DB_MD5=$(sed \"1q;d\" ${GS_ETC_PATH}/${GS_GRAVITY_FI_MD5_LOG})\n        LAST_LOCAL_DB_MD5=$(sed \"2q;d\" ${GS_ETC_PATH}/${GS_GRAVITY_FI_MD5_LOG})\n    else\n        LAST_REMOTE_DB_MD5=\"0\"\n        LAST_LOCAL_DB_MD5=\"0\"\n    fi\n\n    if [ -f \"${GS_ETC_PATH}/${GS_CUSTOM_DNS_MD5_LOG}\" ]; then\n        LAST_REMOTE_CL_MD5=$(sed \"1q;d\" ${GS_ETC_PATH}/${GS_CUSTOM_DNS_MD5_LOG})\n        LAST_LOCAL_CL_MD5=$(sed \"2q;d\" ${GS_ETC_PATH}/${GS_CUSTOM_DNS_MD5_LOG})\n    else\n        LAST_REMOTE_CL_MD5=\"0\"\n        LAST_LOCAL_CL_MD5=\"0\"\n    fi\n\n    if [ -f \"${GS_ETC_PATH}/${GS_CNAME_CONF_MD5_LOG}\" ]; then\n        LAST_REMOTE_CN_MD5=$(sed \"1q;d\" ${GS_ETC_PATH}/${GS_CNAME_CONF_MD5_LOG})\n        LAST_LOCAL_CN_MD5=$(sed \"2q;d\" ${GS_ETC_PATH}/${GS_CNAME_CONF_MD5_LOG})\n    else\n        LAST_REMOTE_CN_MD5=\"0\"\n        LAST_LOCAL_CN_MD5=\"0\"\n    fi\n\n    if [ -f \"${GS_ETC_PATH}/${GS_SDHCP_CONF_MD5_LOG}\" ]; then\n        LAST_REMOTE_SDHCP_MD5=$(sed \"1q;d\" ${GS_ETC_PATH}/${GS_SDHCP_CONF_MD5_LOG})\n        LAST_LOCAL_SDHCP_MD5=$(sed \"2q;d\" ${GS_ETC_PATH}/${GS_SDHCP_CONF_MD5_LOG})\n    else\n        LAST_REMOTE_SDHCP_MD5=\"0\"\n        LAST_LOCAL_SDHCP_MD5=\"0\"\n    fi\n}\n\nfunction md5_recheck {\n    MESSAGE=\"Performing replicator diagnostics\"\n    echo_prompt\n\n    GS_HASH_MARK='0'\n\n    MESSAGE=\"${UI_HASHING_REHASHING} ${UI_GRAVITY_NAME}\"\n    echo_stat\n    REMOTE_DB_MD5=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"md5sum ${REMOTE_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI}\" | sed 's/\\s.*$//')\n    error_validate\n\n    MESSAGE=\"${UI_HASHING_RECOMPARING} ${UI_GRAVITY_NAME}\"\n    echo_stat\n    LOCAL_DB_MD5=$(md5sum ${LOCAL_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI} | sed 's/\\s.*$//')\n    error_validate\n\n    if [ -f ${LOCAL_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS} ]; then\n        if ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} test -e ${REMOTE_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS}; then\n            REMOTE_PH_CUSTOM_DNS=\"1\"\n            MESSAGE=\"${UI_HASHING_REHASHING} ${UI_CUSTOM_NAME}\"\n            echo_stat\n\n            REMOTE_CL_MD5=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"md5sum ${REMOTE_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS} | sed 's/\\s.*$//'\")\n            error_validate\n\n            MESSAGE=\"${UI_HASHING_RECOMPARING} ${UI_CUSTOM_NAME}\"\n            echo_stat\n            LOCAL_CL_MD5=$(md5sum ${LOCAL_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS} | sed 's/\\s.*$//')\n            error_validate\n        else\n            MESSAGE=\"${UI_CUSTOM_NAME} ${UI_HASHING_NOT_DETECTED} ${UI_HASHING_REMOTE}\"\n            echo_warn\n        fi\n    else\n        if ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} test -e ${REMOTE_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS}; then\n            REMOTE_PH_CUSTOM_DNS=\"1\"\n            MESSAGE=\"${UI_CUSTOM_NAME} ${UI_HASHING_DETECTED} ${UI_HASHING_REMOTE}\"\n            echo_warn\n        fi\n        MESSAGE=\"${UI_CUSTOM_NAME} ${UI_HASHING_NOT_DETECTED} ${UI_HASHING_LOCAL}\"\n        echo_warn\n    fi\n\n    if [ -f ${LOCAL_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF} ]; then\n        if ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} test -e ${REMOTE_DNSMASQ_DIRECTORY}; then\n            CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n            CMD_REQUESTED=\"sudo touch ${REMOTE_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF}\"\n            create_ssh_cmd\n\n            REMOTE_CNAME_DNS=\"1\"\n            MESSAGE=\"${UI_HASHING_REHASHING} ${UI_CNAME_NAME}\"\n            echo_stat\n\n            REMOTE_CN_MD5=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"md5sum ${REMOTE_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF} | sed 's/\\s.*$//'\")\n            error_validate\n\n            MESSAGE=\"${UI_HASHING_RECOMPARING} ${UI_CNAME_NAME}\"\n            echo_stat\n            LOCAL_CN_MD5=$(md5sum ${LOCAL_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF} | sed 's/\\s.*$//')\n            error_validate\n        else\n            MESSAGE=\"${UI_CNAME_NAME} ${UI_HASHING_NOT_DETECTED} ${UI_HASHING_REMOTE}\"\n            echo_warn\n        fi\n    else\n        if ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} test -e ${REMOTE_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF}; then\n            REMOTE_CNAME_DNS=\"1\"\n            MESSAGE=\"${UI_CNAME_NAME} ${UI_HASHING_NOT_DETECTED} ${UI_HASHING_REMOTE}\"\n            echo_warn\n        fi\n\n        MESSAGE=\"${UI_CNAME_NAME} ${UI_HASHING_NOT_DETECTED} ${UI_HASHING_LOCAL}\"\n        echo_warn\n    fi\n\n    if [ -f ${LOCAL_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF} ]; then\n        if ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} test -e ${REMOTE_DNSMASQ_DIRECTORY}; then\n            CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n            CMD_REQUESTED=\"sudo touch ${REMOTE_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF}\"\n            create_ssh_cmd\n\n            REMOTE_SDHCP_DNS=\"1\"\n            MESSAGE=\"${UI_HASHING_REHASHING} ${UI_SDHCP_NAME}\"\n            echo_stat\n\n            REMOTE_SDHCP_MD5=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"md5sum ${REMOTE_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF} | sed 's/\\s.*$//'\")\n            error_validate\n\n            MESSAGE=\"${UI_HASHING_RECOMPARING} ${UI_SDHCP_NAME}\"\n            echo_stat\n            LOCAL_SDHCP_MD5=$(md5sum ${LOCAL_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF} | sed 's/\\s.*$//')\n            error_validate\n        else\n            MESSAGE=\"${UI_SDHCP_NAME} ${UI_HASHING_NOT_DETECTED} ${UI_HASHING_REMOTE}\"\n            echo_warn\n        fi\n    else\n        if ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} test -e ${REMOTE_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF}; then\n            REMOTE_SDHCP_DNS=\"1\"\n            MESSAGE=\"${UI_SDHCP_NAME} ${UI_HASHING_NOT_DETECTED} ${UI_HASHING_REMOTE}\"\n            echo_warn\n        fi\n\n        MESSAGE=\"${UI_SDHCP_NAME} ${UI_HASHING_NOT_DETECTED} ${UI_HASHING_LOCAL}\"\n        echo_warn\n    fi\n}\n\n## Determine SSH Pathways\nfunction create_ssh_cmd {\n    timeout --preserve-status ${CMD_TIMEOUT} ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i ${GS_SSH_PKIF} -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} \"${CMD_REQUESTED}\"\n    error_validate\n}\n\n## Determine SSH Pathways\nfunction create_rsync_cmd {\n    rsync --rsync-path=\"${RSYNC_REPATH}\" -e \"${OS_SSH_CMD} -p ${GS_SSH_PORT} -i ${GS_SSH_PKIF}\" ${RSYNC_SOURCE} ${RSYNC_TARGET} >/dev/null 2>&1\n    error_validate\n}\n\nfunction generate_ssh_key {\n    if [ -z $INPUT_REMOTE_PASS ]; then\n        if [ -f ${GS_SSH_PKIF} ]; then\n            MESSAGE=\"Using existing SSH key\"\n            echo_good_clean\n        else\n            if hash ssh-keygen >/dev/null 2>&1; then\n                MESSAGE=\"Generating new SSH key\"\n                echo_stat\n\n                ssh-keygen -q -P \"\" -t rsa -f ${OS_TMP}/gravity-sync.rsa >/dev/null 2>&1\n                error_validate\n\n                MESSAGE=\"Moving private key to ${GS_SSH_PKIF}\"\n                sudo mv ${OS_TMP}/gravity-sync.rsa ${GS_SSH_PKIF}\n                error_validate\n\n                MESSAGE=\"Moving public key to ${GS_SSH_PKIF}.pub\"\n                sudo mv ${OS_TMP}/gravity-sync.rsa.pub ${GS_SSH_PKIF}.pub\n                error_validate\n            else\n                MESSAGE=\"No SSH-KEYGEN available\"\n                echo_warn\n                exit_no_change\n            fi\n        fi\n    fi\n}\n\nfunction export_ssh_key {\n    if [ -z $REMOTE_PASS ]; then\n        if [ -f ${GS_SSH_PKIF} ]; then\n            MESSAGE=\"Registering SSH key to ${REMOTE_HOST}\"\n            echo_prompt\n\n            ssh-copy-id -f -p ${GS_SSH_PORT} -i ${GS_SSH_PKIF}.pub ${REMOTE_USER}@${REMOTE_HOST}\n        else\n            MESSAGE=\"Error registering SSH key to ${REMOTE_HOST}\"\n            echo_warn\n        fi\n    fi\n}\n\nfunction show_target {\n    if [ \"${GS_SSH_PORT}\" != '22' ]; then\n        MESSAGE=\"Remote target ${REMOTE_USER}@${REMOTE_HOST}:${GS_SSH_PORT}\"\n    else\n        MESSAGE=\"Remote target ${REMOTE_USER}@${REMOTE_HOST}\"\n    fi\n\n    echo_info\n}\n\n## Logs Task\nfunction task_logs {\n    start_gs_no_config\n\n    GS_TASK_TYPE='LOGS'\n    MESSAGE=\"${MESSAGE}: ${GS_TASK_TYPE}\"\n    echo_good\n    logs_gs\n}\n\n## Core Logging\n### Write Logs Out\nfunction logs_export {\n    MESSAGE=\"Saving updated data hashes\"\n    echo_stat\n    sudo rm -f ${GS_ETC_PATH}/*.md5\n    echo -e ${REMOTE_DB_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_GRAVITY_FI_MD5_LOG} 1> /dev/null\n    echo -e ${LOCAL_DB_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_GRAVITY_FI_MD5_LOG} 1> /dev/null\n    echo -e ${REMOTE_CL_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_CUSTOM_DNS_MD5_LOG} 1> /dev/null\n    echo -e ${LOCAL_CL_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_CUSTOM_DNS_MD5_LOG} 1> /dev/null\n    echo -e ${REMOTE_CN_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_CNAME_CONF_MD5_LOG} 1> /dev/null\n    echo -e ${LOCAL_CN_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_CNAME_CONF_MD5_LOG} 1> /dev/null\n    echo -e ${REMOTE_SDHCP_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_SDHCP_CONF_MD5_LOG} 1> /dev/null\n    echo -e ${LOCAL_SDHCP_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_SDHCP_CONF_MD5_LOG} 1> /dev/null\n\n    if [ \"${GS_PEERLESS_MODE}\" != \"1\" ]; then\n        sudo rm -f ${OS_TMP}/*.md5\n        echo -e ${LOCAL_DB_MD5} | sudo tee -a ${OS_TMP}/${GS_GRAVITY_FI_MD5_LOG} 1> /dev/null\n        echo -e ${REMOTE_DB_MD5} | sudo tee -a ${OS_TMP}/${GS_GRAVITY_FI_MD5_LOG} 1> /dev/null\n        echo -e ${LOCAL_CL_MD5} | sudo tee -a ${OS_TMP}/${GS_CUSTOM_DNS_MD5_LOG} 1> /dev/null\n        echo -e ${REMOTE_CL_MD5} | sudo tee -a ${OS_TMP}/${GS_CUSTOM_DNS_MD5_LOG} 1> /dev/null\n        echo -e ${LOCAL_CN_MD5} | sudo tee -a ${OS_TMP}/${GS_CNAME_CONF_MD5_LOG} 1> /dev/null\n        echo -e ${REMOTE_CN_MD5} | sudo tee -a ${OS_TMP}/${GS_CNAME_CONF_MD5_LOG} 1> /dev/null\n        echo -e ${LOCAL_SDHCP_MD5} | sudo tee -a ${OS_TMP}/${GS_SDHCP_CONF_MD5_LOG} 1> /dev/null\n        echo -e ${REMOTE_SDHCP_MD5} | sudo tee -a ${OS_TMP}/${GS_SDHCP_CONF_MD5_LOG} 1> /dev/null\n        error_validate\n\n        MESSAGE=\"Sending hashes to ${PROGRAM} peer\"\n        echo_stat\n\n        RSYNC_REPATH=\"sudo rsync\"\n        RSYNC_SOURCE=\"${OS_TMP}/*.md5\"\n        RSYNC_TARGET=\"${REMOTE_USER}@${REMOTE_HOST}:${GS_ETC_PATH}/\"\n        create_rsync_cmd\n\n        MESSAGE=\"Setting permissions on remote hashing files\"\n        echo_stat\n        CMD_TIMEOUT=$GS_BACKUP_TIMEOUT\n        CMD_REQUESTED=\"sudo chmod 644 ${GS_ETC_PATH}/*.md5\"\n        create_ssh_cmd\n\n        sudo rm -f ${OS_TMP}/*.md5\n    fi\n\n    MESSAGE=\"Logging successful ${GS_TASK_TYPE}\"\n    echo_stat\n    echo -e \"$(date) [${GS_TASK_TYPE}]\" | sudo tee -a ${GS_ETC_PATH}/${GS_SYNCING_LOG} 1> /dev/null\n    error_validate\n}\n\n### Output Sync Logs\nfunction logs_gs {\n    MESSAGE=\"Displaying output of previous jobs\"\n    echo_info\n\n    echo -e \"${UI_LOGGING_RECENT_COMPLETE} ${YELLOW}SMART${NC}\"\n    tail -n 7 \"${GS_ETC_PATH}/${GS_SYNCING_LOG}\" | grep SMART\n    echo -e \"${UI_LOGGING_RECENT_COMPLETE} ${YELLOW}PULL${NC}\"\n    tail -n 7 \"${GS_ETC_PATH}/${GS_SYNCING_LOG}\" | grep PULL\n    echo -e \"${UI_LOGGING_RECENT_COMPLETE} ${YELLOW}PUSH${NC}\"\n    tail -n 7 \"${GS_ETC_PATH}/${GS_SYNCING_LOG}\" | grep PUSH\n\n    exit_no_change\n}\n\n## Validate Pi-hole Folders\nfunction validate_ph_folders {\n    MESSAGE=\"${UI_VALIDATING} ${UI_CORE_APP}\"\n    echo_stat\n\n    if [ \"$LOCAL_PIHOLE_TYPE\" == \"default\" ]; then\n        if [ ! -f ${LOCAL_PIHOLE_BINARY} ]; then\n            MESSAGE=\"${UI_VALIDATING_FAIL_BINARY} ${UI_CORE_APP}\"\n            echo_fail\n            exit_no_change\n        fi\n    elif [ \"$LOCAL_PIHOLE_TYPE\" == \"docker\" ]; then\n        PH_FTL_CHECK=$(sudo docker container ls | grep \"${PIHOLE_CONTAINER_IMAGE}\")\n        if [ \"$PH_FTL_CHECK\" == \"\" ]; then\n            MESSAGE=\"${UI_VALIDATING_FAIL_CONTAINER} ${UI_CORE_APP}\"\n            echo_fail\n            exit_no_change\n        fi\n    elif [ \"$LOCAL_PIHOLE_TYPE\" == \"podman\" ]; then\n        PH_FTL_CHECK=$(sudo podman container ls | grep \"${PIHOLE_CONTAINER_IMAGE}\")\n        if [ \"$PH_FTL_CHECK\" == \"\" ]; then\n            MESSAGE=\"${UI_VALIDATING_FAIL_CONTAINER} ${UI_CORE_APP}\"\n            echo_fail\n            exit_no_change\n        fi\n    fi\n\n    if [ ! -d ${LOCAL_PIHOLE_DIRECTORY} ]; then\n        MESSAGE=\"${UI_VALIDATING_FAIL_FOLDER} ${UI_CORE_APP}\"\n        echo_fail\n        exit_no_change\n    fi\n\n    echo_good\n}\n\nfunction detect_local_pihole {\n    MESSAGE=\"Detecting local ${UI_CORE_APP} installation\"\n    echo_stat\n\n    if hash pihole 2>/dev/null; then\n        LOCAL_PIHOLE_TYPE=\"default\"\n        echo_good\n    elif hash docker 2>/dev/null; then\n        PH_FTL_CHECK=$(sudo docker container ls | grep ${PIHOLE_CONTAINER_IMAGE})\n        if [ \"$PH_FTL_CHECK\" != \"\" ]; then\n            LOCAL_PIHOLE_TYPE=\"docker\"\n            echo_good\n        else\n            LOCAL_PIHOLE_TYPE=\"none\"\n            echo_fail\n        fi\n    elif hash podman 2>/dev/null; then\n        PH_FTL_CHECK=$(sudo podman container ls | grep ${PIHOLE_CONTAINER_IMAGE})\n        if [ \"$PH_FTL_CHECK\" != \"\" ]; then\n            LOCAL_PIHOLE_TYPE=\"podman\"\n            echo_good\n        else\n            LOCAL_PIHOLE_TYPE=\"none\"\n            echo_fail\n        fi\n    else\n        LOCAL_PIHOLE_TYPE=\"none\"\n        echo_fail\n    fi\n}\n\nfunction detect_remote_pihole {\n    MESSAGE=\"Detecting remote ${UI_CORE_APP} installation\"\n    echo_stat\n\n    if ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} test -e ${REMOTE_PIHOLE_BINARY}; then\n        REMOTE_PIHOLE_TYPE=\"default\"\n        echo_good\n    else\n\t    REMOTE_DETECT_DOCKER=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"sudo ${REMOTE_DOCKER_BINARY} container ls | grep ${PIHOLE_CONTAINER_IMAGE}\" 2>/dev/null)\n        REMOTE_DETECT_PODMAN=$(${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"sudo ${REMOTE_PODMAN_BINARY} container ls | grep ${PIHOLE_CONTAINER_IMAGE}\" 2>/dev/null)\n\n        if [ \"${REMOTE_DETECT_DOCKER}\" != \"\" ]; then\n            REMOTE_PIHOLE_TYPE=\"docker\"\n            MESSAGE=\"${MESSAGE} - docker\"\n\t        echo_good\n        elif [ \"${REMOTE_DETECT_PODMAN}\" != \"\" ]; then\n            REMOTE_PIHOLE_TYPE=\"podman\"\n            MESSAGE=\"${MESSAGE} - podman\"\n            echo_good\n        else\n            REMOTE_PIHOLE_TYPE=\"none\"\n            echo_fail\n        fi\n    fi\n}\n\nfunction detect_gs_peer {\n    MESSAGE=\"Checking on peer\"\n    echo_stat\n\n    if ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} test -e ${GS_ETC_PATH}/${GS_CONFIG_FILE}; then\n        MESSAGE=\"${PROGRAM} remote peer is configured\"\n        echo_good\n    else\n        GS_PEERLESS_MODE=\"1\"\n        MESSAGE=\"${PROGRAM} falling back to peerless mode\"\n        echo_good\n\n        MESSAGE=\"Please configure ${PROGRAM} on remote host\"\n        echo_warn\n    fi\n}\n\n## Validate DNSMASQ Folders\nfunction validate_dns_folders {\n    MESSAGE=\"${UI_VALIDATING} ${UI_CORE_APP_DNS}\"\n    echo_stat\n\n    if [ ! -d ${LOCAL_DNSMASQ_DIRECTORY} ]; then\n        MESSAGE=\"${UI_VALIDATING_FAIL_FOLDER} ${UI_CORE_APP_DNS}\"\n        echo_fail\n        exit_no_change\n    fi\n    echo_good\n}\n\n## Validate Domain Database Permissions\nfunction validate_gravity_permissions {\n    MESSAGE=\"${UI_SET_LOCAL_FILE_OWNERSHIP} ${UI_GRAVITY_NAME}\"\n    echo_stat\n    sudo chown ${LOCAL_FILE_OWNER} ${LOCAL_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI} >/dev/null 2>&1\n    error_validate\n\n    MESSAGE=\"${UI_SET_FILE_PERMISSION} ${UI_GRAVITY_NAME}\"\n    echo_stat\n    sudo chmod 664 ${LOCAL_PIHOLE_DIRECTORY}/${PH_GRAVITY_FI} >/dev/null 2>&1\n    error_validate\n}\n\n## Validate Local DNS Records Permissions\nfunction validate_custom_permissions {\n    MESSAGE=\"${UI_SET_LOCAL_FILE_OWNERSHIP} ${UI_CUSTOM_NAME}\"\n    echo_stat\n    sudo chown ${LOCAL_FILE_OWNER} ${LOCAL_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS} >/dev/null 2>&1\n    error_validate\n\n    MESSAGE=\"${UI_SET_FILE_PERMISSION} ${UI_CUSTOM_NAME}\"\n    echo_stat\n    sudo chmod 644 ${LOCAL_PIHOLE_DIRECTORY}/${PH_CUSTOM_DNS} >/dev/null 2>&1\n    error_validate\n}\n\n## Validate Local DNS CNAME Permissions\nfunction validate_cname_permissions {\n    MESSAGE=\"${UI_SET_LOCAL_FILE_OWNERSHIP} ${UI_CNAME_NAME}\"\n    echo_stat\n    sudo chown ${LOCAL_FILE_OWNER} ${LOCAL_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF} >/dev/null 2>&1\n    error_validate\n\n    MESSAGE=\"${UI_SET_FILE_PERMISSION} ${UI_CNAME_NAME}\"\n    echo_stat\n    sudo chmod 644 ${LOCAL_DNSMASQ_DIRECTORY}/${PH_CNAME_CONF} >/dev/null 2>&1\n    error_validate\n}\n\nfunction validate_sdhcp_permissions {\n    MESSAGE=\"${UI_SET_LOCAL_FILE_OWNERSHIP} ${UI_SDHCP_NAME}\"\n    echo_stat\n    sudo chown ${LOCAL_FILE_OWNER} ${LOCAL_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF} >/dev/null 2>&1\n    error_validate\n\n    MESSAGE=\"${UI_SET_FILE_PERMISSION} ${UI_SDHCP_NAME}\"\n    echo_stat\n    sudo chmod 644 ${LOCAL_DNSMASQ_DIRECTORY}/${PH_SDHCP_CONF} >/dev/null 2>&1\n    error_validate\n}\n\n## Validate Intent\nfunction intent_validate {\n    PHASER=$((( RANDOM % 4 ) + 1 ))\n    if [ \"$PHASER\" = \"1\" ]; then\n        INTENT=\"FIRE PHOTON TORPEDOES\"\n    elif [ \"$PHASER\" = \"2\" ]; then\n        INTENT=\"FIRE ALL PHASERS\"\n    elif [ \"$PHASER\" = \"3\" ]; then\n        INTENT=\"EJECT THE WARP CORE\"\n    elif [ \"$PHASER\" = \"4\" ]; then\n        INTENT=\"ENGAGE TRACTOR BEAM\"\n    fi\n\n    MESSAGE=\"Type ${INTENT} to confirm\"\n    echo_need\n\n    read -r INPUT_INTENT\n\n    if [ \"${INPUT_INTENT}\" != \"${INTENT}\" ]; then\n        MESSAGE=\"${GS_TASK_TYPE} excited\"\n        echo_info\n        exit_no_change\n    fi\n}\n\n## Sudo Creation Task\nfunction task_sudo {\n    start_gs_no_config\n\n    GS_TASK_TYPE='SUDO'\n    MESSAGE=\"${MESSAGE}: ${GS_TASK_TYPE}\"\n    echo_good\n\n    MESSAGE=\"Creating sudoers.d template file\"\n    echo_stat\n\n    NEW_SUDO_USER=$(whoami)\n    echo -e \"${NEW_SUDO_USER} ALL=(ALL) NOPASSWD: ALL\" | sudo tee ${GS_LOCAL_REPO}/templates/gs-nopasswd.sudo 1> /dev/null\n    error_validate\n\n    MESSAGE=\"Installing sudoers.d file on $HOSTNAME\"\n    echo_stat\n\n    sudo install -m 0440 ${GS_LOCAL_REPO}/templates/gs-nopasswd.sudo /etc/sudoers.d/gs-nopasswd\n    error_validate\n\n    exit_with_changes\n}\n\nfunction validate_sudo_status {\n    OS_CURRENT_USER=$(whoami)\n    if [ ! \"$EUID\" -ne 0 ]; then\n        OS_LOCAL_ADMIN=\"\"\n    else\n        /usr/bin/sudo -u ${OS_CURRENT_USER} --validate\n        OS_SUDO_CHECK=$?\n        if [ $OS_SUDO_CHECK -ne 0 ]; then\n            OS_LOCAL_ADMIN=\"nosudo\"\n        else\n            OS_LOCAL_ADMIN=\"sudo\"\n        fi\n    fi\n\n    if [ \"$OS_LOCAL_ADMIN\" == \"nosudo\" ]; then\n        GS_TASK_TYPE='ROOT'\n        MESSAGE=\"${MESSAGE} ${GS_TASK_TYPE}\"\n        echo_fail\n\n        MESSAGE=\"${OS_CURRENT_USER} has insufficient user rights for ${PROGRAM}\"\n        echo_warn\n\n        exit_no_change\n    fi\n}\n\n## Configure Task\nfunction task_configure {\n\n    start_gs_no_config\n\n    GS_TASK_TYPE='CONFIGURE'\n    MESSAGE=\"${MESSAGE}: ${GS_TASK_TYPE}\"\n    echo_good\n\n    if [[ ${INPUT_SSH} =~ ^[0-9]+$ ]]; then\n        GS_SSH_PORT=${INPUT_SSH}\n        MESSAGE=\"TARGET HOST SSH PORT SET TO ${GS_SSH_PORT}\"\n        echo_warn\n    fi\n\n    if [ -f ${GS_ETC_PATH}/${GS_CONFIG_FILE} ]; then\n        config_delete\n    else\n        config_generate\n    fi\n\n    exit_with_changes\n}\n\n## Generate New Configuration\nfunction config_generate {\n    MESSAGE=\"Creating new ${GS_CONFIG_FILE}\"\n    echo_stat\n    sudo cp ${GS_LOCAL_REPO}/templates/${GS_CONFIG_FILE}.example ${GS_ETC_PATH}/${GS_CONFIG_FILE}\n    error_validate\n\n    echo_blank\n    echo -e \"  Welcome to the ${PURPLE}${PROGRAM}${NC} Configuration Wizard\"\n    echo -e \"  Please read through ${BLUE}https://github.com/vmstan/gravity-sync/wiki${NC} before you continue\"\n    echo -e \"  Make sure that ${UI_CORE_APP} is running on this system before your configure ${PROGRAM}\"\n    echo_blank\n\n    MESSAGE=\"${PROGRAM} Remote Host Settings\"\n    echo_info\n\n    MESSAGE=\"Remote ${UI_CORE_APP} host address\"\n    echo_prompt\n\n    MESSAGE=\"IP\"\n    echo_need\n    read -r INPUT_REMOTE_HOST\n\n        if [ \"${INPUT_REMOTE_HOST}\" == \"\" ]; then\n            MESSAGE=\"Remote host cannot be blank!\"\n            echo_fail\n            exit_no_change\n        fi\n\n    MESSAGE=\"${UI_CONFIG_SAVING} ${INPUT_REMOTE_HOST} host to ${GS_CONFIG_FILE}\"\n    echo_stat\n    sudo sed -i \"/REMOTE_HOST=''/c\\REMOTE_HOST='${INPUT_REMOTE_HOST}'\" ${GS_ETC_PATH}/${GS_CONFIG_FILE}\n    error_validate\n\n    MESSAGE=\"Remote ${UI_CORE_APP} host username\"\n    echo_prompt\n\n    MESSAGE=\"User\"\n    echo_need\n    read -r INPUT_REMOTE_USER\n\n        if [ \"${INPUT_REMOTE_USER}\" == \"\" ]; then\n            MESSAGE=\"User name cannot be blank!\"\n            echo_fail\n            exit_no_change\n        fi\n\n    MESSAGE=\"${UI_CONFIG_SAVING} ${INPUT_REMOTE_USER}@${INPUT_REMOTE_HOST} to ${GS_CONFIG_FILE}\"\n    echo_stat\n    sudo sed -i \"/REMOTE_USER=''/c\\REMOTE_USER='${INPUT_REMOTE_USER}'\" ${GS_ETC_PATH}/${GS_CONFIG_FILE}\n    error_validate\n\n    MESSAGE=\"${PROGRAM} SSH Key Settings\"\n    echo_info\n\n    generate_ssh_key\n\n    MESSAGE=\"${UI_CORE_LOADING} ${GS_CONFIG_FILE}\"\n    echo_stat\n\n    if [ \"${GS_SSH_PORT}\" != '22' ]; then\n        MESSAGE=\"${UI_CONFIG_SAVING} custom SSH port to ${GS_CONFIG_FILE}\"\n        echo_stat\n        echo -e \"GS_SSH_PORT='${GS_SSH_PORT}'\" | sudo tee -a ${GS_ETC_PATH}/${GS_CONFIG_FILE} 1> /dev/null\n        error_validate\n    fi\n\n    # shellcheck source=/etc/gravity-sync/gravity-sync.conf\n    source ${GS_ETC_PATH}/${GS_CONFIG_FILE}\n    error_validate\n\n    export_ssh_key\n\n    MESSAGE=\"SSH key registered to ${INPUT_REMOTE_HOST}\"\n    echo_good_clean\n\n    MESSAGE=\"${UI_CORE_APP} Installation Settings\"\n    echo_info\n\n    detect_local_pihole\n    if [ \"${LOCAL_PIHOLE_TYPE}\" == \"default\" ]; then\n        MESSAGE=\"Default install of ${UI_CORE_APP} detected\"\n        echo_good_clean\n    elif [ \"${LOCAL_PIHOLE_TYPE}\" == \"docker\" ]; then\n        MESSAGE=\"Docker container ${UI_CORE_APP} install detected\"\n        echo_good_clean\n    elif [ \"${LOCAL_PIHOLE_TYPE}\" == \"podman\" ]; then\n        MESSAGE=\"Podman container ${UI_CORE_APP} install detected\"\n        echo_good_clean\n    elif [ \"${LOCAL_PIHOLE_TYPE}\" == \"none\" ]; then\n        MESSAGE=\"No local ${UI_CORE_APP} installed detected\"\n        echo_warn\n        end_config_no_pi\n    fi\n\n    detect_remote_pihole\n    if [ \"${REMOTE_PIHOLE_TYPE}\" == \"default\" ]; then\n        MESSAGE=\"Remote install of ${UI_CORE_APP} detected\"\n        echo_good_clean\n    elif [ \"${REMOTE_PIHOLE_TYPE}\" == \"docker\" ]; then\n        MESSAGE=\"Remote Docker container of ${UI_CORE_APP} detected\"\n        echo_good_clean\n    elif [ \"${REMOTE_PIHOLE_TYPE}\" == \"podman\" ]; then\n        MESSAGE=\"Remote Podman container of ${UI_CORE_APP} detected\"\n        echo_good_clean\n    elif [ \"${REMOTE_PIHOLE_TYPE}\" == \"none\" ]; then\n        MESSAGE=\"No remote ${UI_CORE_APP} installed detected\"\n        echo_warn\n        end_config_no_pi\n    fi\n\n    if [ \"${LOCAL_PIHOLE_TYPE}\" == \"default\" ] && [ \"${REMOTE_PIHOLE_TYPE}\" == \"default\" ]; then\n        end_config\n    else\n        advanced_config_generate\n    fi\n}\n\nfunction end_config {\n    echo_blank\n    echo -e \"  Configuration has been completed successfully, once ${PROGRAM} has been installed your other\"\n    echo -e \"  node, your next step is to push all of the of data from the currently authoritative\"\n    echo -e \"  ${UI_CORE_APP} instance to the other.\"\n    echo -e \"  ex: ${YELLOW}gravity-sync push${NC}\"\n    echo_blank\n    echo -e \"  If that completes successfully you can automate future sync jobs to run at a regular interval on\"\n    echo -e \"  both of your ${PROGRAM} peers.\"\n    echo -e \"  ex: ${YELLOW}gravity-sync auto${NC}\"\n    echo_blank\n}\n\nfunction end_config_no_pi {\n    echo_blank\n    echo -e \"  Configuration could not be completed successfully, as no instances of ${UI_CORE_APP} could be detected\"\n    echo -e \"  on one or more of your systems. Please make sure they are running on both peers and try again.\"\n    echo_blank\n}\n\n## Advanced Configuration Options\nfunction advanced_config_generate {\n    if [ \"${LOCAL_PIHOLE_TYPE}\" == \"docker\" ] || [ \"${LOCAL_PIHOLE_TYPE}\" == \"podman\" ]; then\n        MESSAGE=\"Local Container Image Configuration\"\n        echo_info\n\n        MESSAGE=\"Displaying running containers on $HOSTNAME\"\n        echo_good_clean\n\n        if [ \"${LOCAL_PIHOLE_TYPE}\" == \"docker\" ]; then\n            sudo docker ps -a --format 'table {{.ID}}\\t{{.Names}}'\n        elif [ \"${LOCAL_PIHOLE_TYPE}\" == \"podman\" ]; then\n            sudo podman container ls\n        fi\n\n        MESSAGE=\"Enter local ${UI_CORE_APP} container name\"\n        echo_prompt\n        MESSAGE=\"ex, 'pihole'\"\n        echo_need\n        read -r INPUT_LOCAL_DOCKER_CONTAINER\n\n            if [ \"${INPUT_LOCAL_DOCKER_CONTAINER}\" == \"\" ]; then\n                MESSAGE=\"Container name cannot be blank!\"\n                echo_fail\n                exit_no_change\n            fi\n\n        MESSAGE=\"${UI_CONFIG_SAVING} ${UI_CONFIG_LOCAL} ${UI_CONFIG_CONTAINER_NAME} to ${GS_CONFIG_FILE}\"\n        echo_stat\n        sudo sed -i \"/# LOCAL_DOCKER_CONTAINER=''/c\\LOCAL_DOCKER_CONTAINER='${INPUT_LOCAL_DOCKER_CONTAINER}'\" ${GS_ETC_PATH}/${GS_CONFIG_FILE}\n        error_validate\n\n        MESSAGE=\"Examining local container configuration\"\n        echo_stat\n\n        if [ \"${LOCAL_PIHOLE_TYPE}\" == \"docker\" ]; then\n            sudo docker container inspect ${INPUT_LOCAL_DOCKER_CONTAINER} | grep -i -B 1 '\"Destination\": \"/etc/pihole\"' > ${OS_TMP}/local_container_pihole_etc.log; sed -i '$d' ${OS_TMP}/local_container_pihole_etc.log; sed -i 's/\"Source\": \"//' ${OS_TMP}/local_container_pihole_etc.log; sed -i 's/\",//' ${OS_TMP}/local_container_pihole_etc.log; sed -i 's/ //g' ${OS_TMP}/local_container_pihole_etc.log\n            sudo docker container inspect ${INPUT_LOCAL_DOCKER_CONTAINER} | grep -i -B 1 '\"Destination\": \"/etc/dnsmasq.d\"' > ${OS_TMP}/local_container_dnsmasq_etc.log; sed -i '$d' ${OS_TMP}/local_container_dnsmasq_etc.log; sed -i 's/\"Source\": \"//' ${OS_TMP}/local_container_dnsmasq_etc.log; sed -i 's/\",//' ${OS_TMP}/local_container_dnsmasq_etc.log; sed -i 's/ //g' ${OS_TMP}/local_container_dnsmasq_etc.log\n        elif [ \"${LOCAL_PIHOLE_TYPE}\" == \"podman\" ]; then\n            sudo podman container inspect ${INPUT_LOCAL_DOCKER_CONTAINER} | grep -i -B 1 '\"Destination\": \"/etc/pihole\"' > ${OS_TMP}/local_container_pihole_etc.log; sed -i '$d' ${OS_TMP}/local_container_pihole_etc.log; sed -i 's/\"Source\": \"//' ${OS_TMP}/local_container_pihole_etc.log; sed -i 's/\",//' ${OS_TMP}/local_container_pihole_etc.log; sed -i 's/ //g' ${OS_TMP}/local_container_pihole_etc.log\n            sudo podman container inspect ${INPUT_LOCAL_DOCKER_CONTAINER} | grep -i -B 1 '\"Destination\": \"/etc/dnsmasq.d\"' > ${OS_TMP}/local_container_dnsmasq_etc.log; sed -i '$d' ${OS_TMP}/local_container_dnsmasq_etc.log; sed -i 's/\"Source\": \"//' ${OS_TMP}/local_container_dnsmasq_etc.log; sed -i 's/\",//' ${OS_TMP}/local_container_dnsmasq_etc.log; sed -i 's/ //g' ${OS_TMP}/local_container_dnsmasq_etc.log\n        fi\n\n        INPUT_LOCAL_PIHOLE_DIRECTORY=$(cat ${OS_TMP}/local_container_pihole_etc.log)\n        INPUT_LOCAL_DNSMASQ_DIRECTORY=$(cat ${OS_TMP}/local_container_dnsmasq_etc.log)\n\n        echo_good\n\n        MESSAGE=\"${UI_CONFIG_SAVING} ${UI_CONFIG_LOCAL} ${UI_CORE_APP} ${UI_CONFIG_ETC_VOLUME_PATH} to ${GS_CONFIG_FILE}\"\n        echo_stat\n        sudo sed -i \"/# LOCAL_PIHOLE_DIRECTORY=''/c\\LOCAL_PIHOLE_DIRECTORY='${INPUT_LOCAL_PIHOLE_DIRECTORY}'\" ${GS_ETC_PATH}/${GS_CONFIG_FILE}\n        error_validate\n\n        MESSAGE=\"${UI_CONFIG_SAVING} ${UI_CONFIG_LOCAL} ${UI_CORE_APP_DNS} ${UI_CONFIG_ETC_VOLUME_PATH} to ${GS_CONFIG_FILE}\"\n        echo_stat\n        sudo sed -i \"/# LOCAL_DNSMASQ_DIRECTORY=''/c\\LOCAL_DNSMASQ_DIRECTORY='${INPUT_LOCAL_DNSMASQ_DIRECTORY}'\" ${GS_ETC_PATH}/${GS_CONFIG_FILE}\n        error_validate\n\n        MESSAGE=\"${UI_CONFIG_SAVING} ${UI_CONFIG_LOCAL} ${UI_CONFIG_VOLUME_OWNER} to ${GS_CONFIG_FILE}\"\n        echo_stat\n        sudo sed -i \"/# LOCAL_FILE_OWNER=''/c\\LOCAL_FILE_OWNER='999:999'\" ${GS_ETC_PATH}/${GS_CONFIG_FILE}\n        error_validate\n    fi\n\n    if [ \"${REMOTE_PIHOLE_TYPE}\" == \"docker\" ] || [ \"${REMOTE_PIHOLE_TYPE}\" == \"podman\" ]; then\n        MESSAGE=\"Remote Container Image Configuration\"\n        echo_info\n\n        MESSAGE=\"Querying running containers on ${REMOTE_HOST}\"\n        echo_stat\n        if [ \"${REMOTE_PIHOLE_TYPE}\" == \"docker\" ]; then\n            ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"sudo docker ps -a --format 'table {{.Image}}\\t{{.Names}}' > /tmp/gs_local_container.log\"\n            error_validate\n        elif [ \"${REMOTE_PIHOLE_TYPE}\" == \"podman\" ]; then\n            ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"sudo podman container ls > /tmp/gs_local_container.log\"\n            error_validate\n        fi\n\n        MESSAGE=\"Retrieving container list from ${REMOTE_HOST}\"\n        RSYNC_REPATH=\"sudo rsync\"\n        RSYNC_SOURCE=\"${REMOTE_USER}@${REMOTE_HOST}:${OS_TMP}/gs_local_container.log\"\n        RSYNC_TARGET=\"${OS_TMP}/gs_remote_container.log\"\n        create_rsync_cmd\n\n        MESSAGE=\"Displaying running containers on ${REMOTE_HOST}\"\n        echo_good_clean\n\n        cat ${OS_TMP}/gs_remote_container.log\n\n        MESSAGE=\"Enter remote ${UI_CORE_APP} container name\"\n        echo_prompt\n        MESSAGE=\"ex, 'pihole'\"\n        echo_need\n        read -r INPUT_REMOTE_DOCKER_CONTAINER\n\n            if [ \"${INPUT_REMOTE_DOCKER_CONTAINER}\" == \"\" ]; then\n                MESSAGE=\"Container name cannot be blank!\"\n                echo_fail\n                exit_no_change\n            fi\n\n        MESSAGE=\"${UI_CONFIG_SAVING} remote host ${UI_CONFIG_CONTAINER_NAME} to ${GS_CONFIG_FILE}\"\n        echo_stat\n        sudo sed -i \"/# REMOTE_DOCKER_CONTAINER=''/c\\REMOTE_DOCKER_CONTAINER='${INPUT_REMOTE_DOCKER_CONTAINER}'\" ${GS_ETC_PATH}/${GS_CONFIG_FILE}\n        error_validate\n\n        MESSAGE=\"Examining remote container configuration\"\n        echo_stat\n\n        if [ \"${REMOTE_PIHOLE_TYPE}\" == \"docker\" ]; then\n            ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"sudo docker container inspect ${INPUT_REMOTE_DOCKER_CONTAINER} | grep -i -B 1 '\\\"Destination\\\": \\\"/etc/pihole\\\"' > ${OS_TMP}/local_container_pihole_etc.log\"\n            ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"sudo docker container inspect ${INPUT_REMOTE_DOCKER_CONTAINER} | grep -i -B 1 '\\\"Destination\\\": \\\"/etc/dnsmasq.d\\\"' > ${OS_TMP}/local_container_dnsmasq_etc.log\"\n            error_validate\n        elif [ \"${REMOTE_PIHOLE_TYPE}\" == \"podman\" ]; then\n            ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"sudo podman container inspect ${INPUT_REMOTE_DOCKER_CONTAINER} | grep -i -B 1 '\\\"Destination\\\": \\\"/etc/pihole\\\"' > ${OS_TMP}/local_container_pihole_etc.log\"\n            ${OS_SSH_CMD} -p ${GS_SSH_PORT} -i \"${GS_SSH_PKIF}\" ${REMOTE_USER}@${REMOTE_HOST} \"sudo podman container inspect ${INPUT_REMOTE_DOCKER_CONTAINER} | grep -i -B 1 '\\\"Destination\\\": \\\"/etc/dnsmasq.d\\\"' > ${OS_TMP}/local_container_dnsmasq_etc.log\"\n            error_validate\n        fi\n\n        MESSAGE=\"Retrieving remote ${UI_CORE_APP} configuration settings\"\n        RSYNC_REPATH=\"sudo rsync\"\n        RSYNC_SOURCE=\"${REMOTE_USER}@${REMOTE_HOST}:${OS_TMP}/local_container_pihole_etc.log\"\n        RSYNC_TARGET=\"${OS_TMP}/remote_container_pihole_etc.log\"\n        create_rsync_cmd\n\n        MESSAGE=\"Retrieving remote ${UI_CORE_APP_DNS} configuration settings\"\n        RSYNC_REPATH=\"sudo rsync\"\n        RSYNC_SOURCE=\"${REMOTE_USER}@${REMOTE_HOST}:${OS_TMP}/local_container_dnsmasq_etc.log\"\n        RSYNC_TARGET=\"${OS_TMP}/remote_container_dnsmasq_etc.log\"\n        create_rsync_cmd\n\n        sed -i '$d' ${OS_TMP}/remote_container_pihole_etc.log; sed -i 's/\"Source\": \"//' ${OS_TMP}/remote_container_pihole_etc.log; sed -i 's/\",//' ${OS_TMP}/remote_container_pihole_etc.log; sed -i 's/ //g' ${OS_TMP}/remote_container_pihole_etc.log\n        sed -i '$d' ${OS_TMP}/remote_container_dnsmasq_etc.log; sed -i 's/\"Source\": \"//' ${OS_TMP}/remote_container_dnsmasq_etc.log; sed -i 's/\",//' ${OS_TMP}/remote_container_dnsmasq_etc.log; sed -i 's/ //g' ${OS_TMP}/remote_container_dnsmasq_etc.log\n\n        INPUT_REMOTE_PIHOLE_DIRECTORY=$(cat ${OS_TMP}/remote_container_pihole_etc.log)\n        INPUT_REMOTE_DNSMASQ_DIRECTORY=$(cat ${OS_TMP}/remote_container_dnsmasq_etc.log)\n\n        echo_good\n\n        MESSAGE=\"${UI_CONFIG_SAVING} remote host ${UI_CORE_APP} ${UI_CONFIG_ETC_VOLUME_PATH} to ${GS_CONFIG_FILE}\"\n        echo_stat\n        sudo sed -i \"/# REMOTE_PIHOLE_DIRECTORY=''/c\\REMOTE_PIHOLE_DIRECTORY='${INPUT_REMOTE_PIHOLE_DIRECTORY}'\" ${GS_ETC_PATH}/${GS_CONFIG_FILE}\n        error_validate\n\n        MESSAGE=\"${UI_CONFIG_SAVING} remote host ${UI_CORE_APP_DNS} ${UI_CONFIG_ETC_VOLUME_PATH} to ${GS_CONFIG_FILE}\"\n        echo_stat\n        sudo sed -i \"/# REMOTE_DNSMASQ_DIRECTORY=''/c\\REMOTE_DNSMASQ_DIRECTORY='${INPUT_REMOTE_DNSMASQ_DIRECTORY}'\" ${GS_ETC_PATH}/${GS_CONFIG_FILE}\n        error_validate\n\n        MESSAGE=\"${UI_CONFIG_SAVING} remote host ${UI_CONFIG_VOLUME_OWNER} to ${GS_CONFIG_FILE}\"\n        echo_stat\n        sudo sed -i \"/# REMOTE_FILE_OWNER=''/c\\REMOTE_FILE_OWNER='999:999'\" ${GS_ETC_PATH}/${GS_CONFIG_FILE}\n        error_validate\n    fi\n\n    end_config\n}\n\n## Delete Existing Configuration\nfunction config_delete {\n    # shellcheck source=/etc/gravity-sync/gravity-sync.conf\n    if [ -n \"${GS_SSH_PORT}\" ]; then\n        _GS_SSH_PORT=${GS_SSH_PORT}\n    fi\n    source ${GS_ETC_PATH}/${GS_CONFIG_FILE}\n    if [ -n \"${_GS_SSH_PORT}\" ]; then\n        GS_SSH_PORT=${_GS_SSH_PORT}\n    fi\n    MESSAGE=\"${GS_CONFIG_FILE} ${UI_CONFIG_ALREADY}\"\n    echo_warn\n\n    MESSAGE=\"${UI_CONFIG_CONFIRM}\"\n    echo_prompt\n\n    intent_validate\n\n    MESSAGE=\"${UI_CONFIG_ERASING} ${GS_CONFIG_FILE}\"\n    echo_stat\n    sudo mv ${GS_ETC_PATH}/${GS_CONFIG_FILE} ${GS_ETC_PATH}/${GS_CONFIG_FILE}.${GS_BACKUP_EXT}\n        error_validate\n\n    config_generate\n}\n\n## Master Branch\nfunction update_gs {\n    bash ${GS_LOCAL_REPO}/update.sh\n}\n\n## Show Version\nfunction show_version {\n    if [ -f ${GS_LOCAL_REPO}/dev ]; then\n        GS_DEV_VERSION=\"Beta\"\n    else\n        GS_DEV_VERSION=\"\"\n    fi\n\n    MESSAGE=\"Running version: ${GREEN}${GS_VERSION}${NC} ${GS_DEV_VERSION}\"\n    echo_info\n\n    GS_GIT_VERSION=$(curl -sf https://raw.githubusercontent.com/vmstan/gravity-sync/master/VERSION)\n    if [ -z \"$GS_GIT_VERSION\" ]; then\n        MESSAGE=\"Latest version: ${RED}Unknown${NC}\"\n    else\n        if [[ ! \"${GS_GIT_VERSION}\" > \"${GS_VERSION}\" ]]; then\n            MESSAGE=\"Latest version: ${GREEN}${GS_GIT_VERSION}${NC}\"\n        else\n            MESSAGE=\"Update available: ${RED}${GS_GIT_VERSION}${NC}\"\n        fi\n    fi\n    echo_info\n}\n\nfunction show_info {\n    echo -e \"${YELLOW}Local Software Versions${NC}\"\n    echo -e \"${BLUE}${UI_CORE_APP}${NC}\"\n    if [ \"${LOCAL_PIHOLE_TYPE}\" == \"default\" ]; then\n        pihole version\n    elif [ \"${LOCAL_PIHOLE_TYPE}\" == \"docker\" ]; then\n        sudo docker exec -it pihole pihole -v\n    elif [ \"${LOCAL_PIHOLE_TYPE}\" == \"podman\" ]; then\n        sudo podman exec -it pihole pihole -v\n    fi\n\n    if [ -f /etc/os-release ]; then\n        . /etc/os-release\n        OS_OS=$NAME\n        OS_VER=$VERSION_ID\n        echo -e \"${BLUE}${OS_OS} ${OS_VER}${NC}\"\n    fi\n\n    uname -srm\n    echo -e \"bash $BASH_VERSION\"\n    ssh -V\n    rsync --version | grep version\n    sudo --version | grep \"Sudo version\"\n    git --version\n\n    if hash docker 2>/dev/null; then\n        docker --version\n    fi\n\n    if hash podman 2>/dev/null; then\n        podman --version\n    fi\n\n    echo -e \"\"\n\n    echo -e \"${YELLOW}Global Instance Settings${NC}\"\n    if [ ${GS_SSH_PORT} == '22' ]; then\n        echo -e \"SSH Port: 22 (default)\"\n    else\n        echo -e \"SSH Port: ${GS_SSH_PORT} (custom)\"\n    fi\n\n    echo -e \"SSH Key: ${GS_SSH_PKIF}\"\n\n    if systemctl is-active --quiet gravity-sync.timer; then\n        echo -e \"Automated Replication: Enabled\"\n    else\n        echo -e \"Automated Replication: Disabled\"\n    fi\n\n    echo -e \"\"\n\n    echo -e \"${YELLOW}Local Instance Settings${NC}\"\n    echo -e \"Local Hostname: $HOSTNAME\"\n    echo -e \"Local ${UI_CORE_APP} Type: ${LOCAL_PIHOLE_TYPE}\"\n    echo -e \"Local ${UI_CORE_APP} Config Directory: ${LOCAL_PIHOLE_DIRECTORY}\"\n    echo -e \"Local ${UI_CORE_APP_DNS} Config Directory: ${LOCAL_DNSMASQ_DIRECTORY}\"\n    echo -e \"Local ${PROGRAM} Binary: ${GS_FILEPATH}\"\n    echo -e \"Local ${PROGRAM} Config Directory: ${GS_ETC_PATH}\"\n\n    if [ \"${LOCAL_PIHOLE_TYPE}\" == \"default\" ]; then\n        echo -e \"Local ${UI_CORE_APP} Binary Directory: ${LOCAL_PIHOLE_BINARY}\"\n    elif [ \"${LOCAL_PIHOLE_TYPE}\" == \"docker\" ]; then\n        echo -e \"Local ${UI_CORE_APP} Container Name: ${LOCAL_DOCKER_CONTAINER}\"\n        echo -e \"Local Docker Binary Directory: ${LOCAL_DOCKER_BINARY}\"\n    elif [ \"${LOCAL_PIHOLE_TYPE}\" == \"podman\" ]; then\n        echo -e \"Local ${UI_CORE_APP} Container Name: ${LOCAL_DOCKER_CONTAINER}\"\n        echo -e \"Local Podman Binary Directory: ${LOCAL_PODMAN_BINARY}\"\n    fi\n\n    echo -e \"Local File Owner Settings: ${LOCAL_FILE_OWNER}\"\n\n    echo -e \"\"\n    echo -e \"${YELLOW}Remote Instance Settings${NC}\"\n    echo -e \"Remote Hostname/IP: ${REMOTE_HOST}\"\n    echo -e \"Remote Username: ${REMOTE_USER}\"\n    echo -e \"Remote ${UI_CORE_APP} Type: ${REMOTE_PIHOLE_TYPE}\"\n    echo -e \"Remote ${UI_CORE_APP} Config Directory: ${REMOTE_PIHOLE_DIRECTORY}\"\n    echo -e \"Remote ${UI_CORE_APP_DNS} Config Directory: ${REMOTE_DNSMASQ_DIRECTORY}\"\n\n    if [ \"${REMOTE_PIHOLE_TYPE}\" == \"default\" ]; then\n        echo -e \"Remote ${UI_CORE_APP} Binary Directory: ${REMOTE_PIHOLE_BINARY}\"\n    elif [ \"${REMOTE_PIHOLE_TYPE}\" == \"docker\" ]; then\n        echo -e \"Remote ${UI_CORE_APP} Container Name: ${REMOTE_DOCKER_CONTAINER}\"\n        echo -e \"Remote Docker Binary Directory: ${REMOTE_DOCKER_BINARY}\"\n    elif [ \"${REMOTE_PIHOLE_TYPE}\" == \"podman\" ]; then\n        echo -e \"Remote ${UI_CORE_APP} Container Name: ${REMOTE_DOCKER_CONTAINER}\"\n        echo -e \"Remote Podman Binary Directory: ${REMOTE_PODMAN_BINARY}\"\n    fi\n\n    echo -e \"Remote File Owner Settings: ${REMOTE_FILE_OWNER}\"\n}\n\n## Dev Task\nfunction task_dev {\n    start_gs_no_config\n\n    GS_TASK_TYPE='DEV'\n    MESSAGE=\"${MESSAGE}: ${GS_TASK_TYPE}\"\n    echo_good\n\n    if [ -f ${GS_LOCAL_REPO}/dev ]; then\n        MESSAGE=\"Disabling ${GS_TASK_TYPE}\"\n        echo_stat\n        sudo rm -f ${GS_LOCAL_REPO}/dev\n        error_validate\n    else\n        MESSAGE=\"Enabling ${GS_TASK_TYPE}\"\n        echo_stat\n        sudo touch ${GS_LOCAL_REPO}/dev\n        error_validate\n\n        MESSAGE=\"Checking available branches\"\n        echo_stat\n        (cd ${GS_LOCAL_REPO} || exit; sudo git fetch --all >/dev/null 2>&1)\n        error_validate\n\n        (cd ${GS_LOCAL_REPO} || exit; sudo git branch -r)\n\n        MESSAGE=\"Select GitHub branch to update against\"\n        echo_need\n        read -r INPUT_BRANCH\n\n        echo -e \"BRANCH='${INPUT_BRANCH}'\" | sudo tee ${GS_LOCAL_REPO}/dev 1> /dev/null\n    fi\n\n    update_gs\n    exit_with_changes\n}\n\n## Update Task\nfunction task_update {\n    start_gs_no_config\n\n    GS_TASK_TYPE='UPDATE'\n    MESSAGE=\"${MESSAGE}: ${GS_TASK_TYPE}\"\n    echo_good\n    update_gs\n    exit_with_changes\n}\n\n## Version Task\nfunction task_version {\n    start_gs_no_config\n\n    GS_TASK_TYPE='VERSION'\n    MESSAGE=\"${MESSAGE}: ${GS_TASK_TYPE}\"\n    echo_good\n    show_version\n    exit_no_change\n}\n\n## Info Task\n\nfunction task_info {\n    start_gs\n\n    GS_TASK_TYPE='INFO'\n    MESSAGE=\"${MESSAGE}: ${GS_TASK_TYPE}\"\n    echo_good\n    show_info\n    exit_no_change\n}\n\n## Automate Task\nfunction task_automate {\n    start_gs\n\n    GS_TASK_TYPE='AUTOMATE'\n    MESSAGE=\"${MESSAGE}: ${GS_TASK_TYPE}\"\n    echo_good\n\n    sudo cp ${GS_LOCAL_REPO}/templates/gravity-sync.service ${OS_TMP}/gravity-sync.service\n    sudo cp ${GS_LOCAL_REPO}/templates/gravity-sync.timer ${OS_TMP}/gravity-sync.timer\n\n    MESSAGE=\"Customizing service file username\"\n    echo_stat\n    OS_CURRENT_USER=$(whoami)\n    sudo sed -i \"/User=unknown/c\\User=${OS_CURRENT_USER}\" ${OS_TMP}/gravity-sync.service\n    error_validate\n\n    MESSAGE=\"Customizing service file executable path\"\n    echo_stat\n    sudo sed -i \"/ExecStart=/c\\ExecStart=${GS_FILEPATH}\" ${OS_TMP}/gravity-sync.service\n    error_validate\n\n    if [ \"${GS_SYSLOG_REDIRECT}\" != '' ]; then\n        MESSAGE=\"Customizing standard output location\"\n        echo_stat\n        sudo sed -i \"/Type=simple/a\\StandardOutput=file:${GS_SYSLOG_REDIRECT}\" ${OS_TMP}/gravity-sync.service\n        sudo sed -i \"/Type=simple/a\\StandardError=file:${GS_SYSLOG_REDIRECT}\" ${OS_TMP}/gravity-sync.service\n        error_validate\n    fi\n\n    if [ \"${INPUT_SPEED}\" == 'slow' ] || [ \"${INPUT_SPEED}\" == 'hour' ]; then\n        MESSAGE=\"Randomizing service timers (hour)\"\n        echo_stat\n        ACTIVE_REP=$(shuf -i 50-55 -n1)\n        RANDOM_REP=$(shuf -i 7-10 -n1)\n    elif [ \"${INPUT_SPEED}\" == 'half' ]; then\n        MESSAGE=\"Randomizing service timers (half)\"\n        echo_stat\n        ACTIVE_REP=$(shuf -i 25-30 -n1)\n        RANDOM_REP=$(shuf -i 5-7 -n1)\n    elif [ \"${INPUT_SPEED}\" == 'quad' ]; then\n        MESSAGE=\"Randomizing service timers (quad)\"\n        echo_stat\n        ACTIVE_REP=$(shuf -i 12-15 -n1)\n        RANDOM_REP=$(shuf -i 3-5 -n1)\n    else\n        MESSAGE=\"Randomizing service timers\"\n        echo_stat\n        ACTIVE_REP=$(shuf -i 3-10 -n1)\n        RANDOM_REP=$(shuf -i 2-5 -n1)\n    fi\n\n    sudo sed -i \"/OnUnitInactiveSec=5m/c\\OnUnitInactiveSec=${ACTIVE_REP}m\" ${OS_TMP}/gravity-sync.timer\n    sudo sed -i \"/RandomizedDelaySec=5m/c\\RandomizedDelaySec=${RANDOM_REP}m\" ${OS_TMP}/gravity-sync.timer\n    error_validate\n\n    if systemctl is-active --quiet gravity-sync.timer; then\n        MESSAGE=\"Stopping existing systemd service\"\n        echo_stat\n        sudo systemctl stop gravity-sync\n        error_validate\n    fi\n\n    MESSAGE=\"Moving systemd timer into place\"\n    echo_stat\n    sudo cp ${OS_TMP}/gravity-sync.timer ${OS_DAEMON_PATH}\n    error_validate\n\n    MESSAGE=\"Moving systemd service into place\"\n    echo_stat\n    sudo cp ${OS_TMP}/gravity-sync.service ${OS_DAEMON_PATH}\n    error_validate\n\n    MESSAGE=\"Reloading systemd daemon\"\n    echo_stat\n    sudo systemctl daemon-reload --quiet\n    error_validate\n\n    MESSAGE=\"Enabling ${PROGRAM} timer\"\n    echo_stat\n    sudo systemctl enable gravity-sync.timer --quiet\n    error_validate\n\n    MESSAGE=\"Starting ${PROGRAM} service\"\n    echo_stat\n    sudo systemctl start gravity-sync --quiet\n    error_validate\n\n    exit_with_changes\n}\n\nfunction task_disable_automate {\n    start_gs_no_config\n\n    GS_TASK_TYPE='DISABLE'\n    MESSAGE=\"${MESSAGE}: ${GS_TASK_TYPE}\"\n    echo_good\n\n    kill_automation_service\n    exit_with_changes\n}\n\nfunction task_monitor {\n    start_gs_no_config\n\n    GS_TASK_TYPE='MONITOR'\n    MESSAGE=\"${MESSAGE}: ${GS_TASK_TYPE}\"\n    echo_good\n\n    MESSAGE=\"Press CTRL+Z to exit MONITOR mode\"\n    echo_warn\n\n    sudo journalctl -fu gravity-sync\n}\n\nfunction kill_automation_service {\n    if systemctl is-active --quiet gravity-sync.timer; then\n        MESSAGE=\"Stopping ${PROGRAM} timer\"\n        echo_stat\n        sudo systemctl stop gravity-sync\n        error_validate\n\n        MESSAGE=\"Disabling ${PROGRAM} automation service\"\n        echo_stat\n        sudo systemctl disable gravity-sync --quiet\n        error_validate\n\n        MESSAGE=\"Removing systemd timer\"\n        echo_stat\n        sudo rm -f ${OS_DAEMON_PATH}/gravity-sync.timer\n        error_validate\n\n        MESSAGE=\"Removing systemd service\"\n        echo_stat\n        sudo rm -f ${OS_DAEMON_PATH}/gravity-sync.service\n        error_validate\n\n        MESSAGE=\"Reloading systemd daemon\"\n        echo_stat\n        sudo systemctl daemon-reload --quiet\n        error_validate\n    fi\n}\n\n## Purge Task\nfunction task_purge {\n    start_gs_no_config\n\n    GS_TASK_TYPE=\"PURGE\"\n    MESSAGE=\"${MESSAGE}: ${GS_TASK_TYPE}\"\n    echo_good\n\n    echo_blank\n    echo -e \"  THIS WILL REMOVE YOUR ENTIRE GRAVITY SYNC INSTALLATION\"\n    echo -e \"  ${UI_CORE_APP} binaries, configuration and services ARE NOT impacted!\"\n    echo -e \"  Your devices will continue to resolve and block DNS requests,\"\n    echo -e \"  but your ${UI_GRAVITY_NAME} and ${UI_CUSTOM_NAME} WILL NOT sync anymore,\"\n    echo -e \"  until you reconfigure ${PROGRAM} on this device.\"\n    echo_blank\n    echo -e \"  In order to fully remove ${PROGRAM} from your infrastructure, you will also\"\n    echo -e \"  need to run this same command from the peer instance as well.\"\n    echo_blank\n\n    intent_validate\n\n    kill_automation_service\n\n    MESSAGE=\"Removing ${PROGRAM} backup files\"\n    echo_stat\n    sudo rm -f ${OS_TMP}/*.${GS_BACKUP_EXT}\n    error_validate\n\n    MESSAGE=\"Removing ${PROGRAM} configuration and logs\"\n    echo_stat\n    sudo rm -fr ${GS_ETC_PATH}\n    error_validate\n\n    MESSAGE=\"Removing ${PROGRAM} binary\"\n    echo_stat\n    sudo rm ${GS_FILEPATH}\n    error_validate\n\n    exit_with_changes\n}\n\n## No Changes Made\nfunction exit_no_change {\n    GS_RUN_END=$SECONDS\n    ((GS_RUNTIME=GS_RUN_END-GS_RUN_START))\n\n    if [ \"${GS_TASK_TYPE}\" == \"\" ]; then\n        MESSAGE=\"${PROGRAM} ${UI_EXIT_ABORT} ${UI_EXIT_CALC_END} ${GS_RUNTIME} ${UI_EXIT_CALC_TIMER}\"\n    else\n        MESSAGE=\"${PROGRAM} ${GS_TASK_TYPE} ${UI_EXIT_ABORT} ${UI_EXIT_CALC_END} ${GS_RUNTIME} ${UI_EXIT_CALC_TIMER}\"\n    fi\n\n    echo_grav\n    exit 0\n}\n\n## Changes Made\nfunction exit_with_changes {\n    GS_RUN_END=$SECONDS\n    ((GS_RUNTIME=GS_RUN_END-GS_RUN_START))\n\n    if [ \"${GS_TASK_TYPE}\" == \"\" ]; then\n        MESSAGE=\"${PROGRAM} ${UI_EXIT_COMPLETE} ${UI_EXIT_CALC_END} ${GS_RUNTIME} ${UI_EXIT_CALC_TIMER}\"\n    else\n        MESSAGE=\"${PROGRAM} ${GS_TASK_TYPE} ${UI_EXIT_COMPLETE} ${UI_EXIT_CALC_END} ${GS_RUNTIME} ${UI_EXIT_CALC_TIMER}\"\n    fi\n\n    echo_grav\n    exit 0\n}\n\n## List GS Arguments\nfunction list_gs_arguments {\n    echo -e \"Usage: $0 [options]\"\n    echo -e \"Example: '$0 pull'\"\n    echo_blank\n    echo -e \"Setup Options:\"\n    echo -e \" ${YELLOW}config${NC}      Creates a new ${PROGRAM} configuration file\"\n    echo -e \" ${YELLOW}version${NC}     Lists the installed version of ${PROGRAM} and checks for updates\"\n    echo -e \" ${YELLOW}update${NC}      Upgrades ${PROGRAM} to the latest available version on GitHub\"\n    echo -e \" ${YELLOW}dev${NC}         Sets upgrade command to use a development version of ${PROGRAM} (toggle on/off)\"\n    echo -e \" ${YELLOW}sudo${NC}        Enables password-less sudo for current user\"\n    echo -e \" ${YELLOW}purge${NC}       Uninstalls ${PROGRAM} from this system\"\n    echo_blank\n    echo -e \"Replication Options:\"\n    echo -e \" ${YELLOW}smart${NC}       Reviews all ${UI_CORE_APP} changes syncs them (default)\"\n    echo -e \" ${YELLOW}pull${NC}        Syncs only the remote ${UI_CORE_APP} configuration to this server\"\n    echo -e \" ${YELLOW}push${NC}        Syncs only the local ${UI_CORE_APP} configuration to the remote\"\n    echo -e \" ${YELLOW}compare${NC}     Checks for ${UI_CORE_APP} differences without making changes\"\n    echo_blank\n    echo -e \"Automation Options:\"\n    echo -e \" ${YELLOW}auto${NC}        Schedules ${PROGRAM} replication tasks using systemd timers\"\n    echo -e \" ${YELLOW}monitor${NC}     Monitors the ${PROGRAM} replication job in real time\"\n    echo -e \" ${YELLOW}disable${NC}     Disables the ${PROGRAM} automated replication task\"\n    echo_blank\n    echo -e \"Debug Options:\"\n    echo -e \" ${YELLOW}logs${NC}        Shows the recent successful replication jobs/times\"\n    echo -e \" ${YELLOW}info${NC}        Shows information about the current configuration\"\n    echo_blank\n    exit_no_change\n}\n\n# SCRIPT EXECUTION ###########################\n\ncase \"${1}\" in\n    \"\" | \"smart\" | \"sync\" )             task_smart;;\n    \"pull\" )                            task_pull;;\n    \"push\" )                            task_push;;\n    \"compare\" )                         task_compare;;\n    \"config\" | \"conf\" | \"configure\" )   INPUT_SSH=$2; task_configure;;\n    \"auto\" | \"automate\" )               INPUT_SPEED=$2 task_automate;;\n    \"disable\" | \"stop\" )                task_disable_automate;;\n    \"monitor\" | \"follow\" )              task_monitor;;\n    \"purge\" | \"uninstall\" | \"remove\" )  task_purge;;\n    \"sudo\" )                            task_sudo;;\n    \"version\" | \"ver\" )                 task_version;;\n    \"info\" )                            task_info;;\n    \"update\" | \"upgrade\" | \"up\" )       task_update;;\n    \"dev\" | \"beta\" )                    task_dev;;\n    \"logs\" | \"log\" )                    task_logs;;\n    * )                                 task_invalid;;\nesac\n\n# END OF SCRIPT ##############################\n"
        },
        {
          "name": "gravity-sync.sh",
          "type": "blob",
          "size": 12.9814453125,
          "content": "#!/usr/bin/env bash\n\n# GRAVITY SYNC BY VMSTAN #####################\n# GS 3.x to 4.0 Upgrade Utility ##############\n\n# Run only to upgrade your existing Gravity Sync 3.x installation to 4.0 format\nPROGRAM='Gravity Sync'\n\nGS_FILEPATH=$(realpath $0)\nLOCAL_FOLDR=$(dirname $GS_FILEPATH)\n\nGS_ETC_PATH=\"/etc/gravity-sync\"\nGS_GRAVITY_FI_MD5_LOG='gs-gravity.md5'\nGS_CUSTOM_DNS_MD5_LOG='gs-clist.md5'\nGS_CNAME_CONF_MD5_LOG='05-pihole-custom-cname.conf.md5'\n\nOS_DAEMON_PATH='/etc/systemd/system'\n\n## Script Colors\nRED='\\033[0;91m'\nGREEN='\\033[0;92m'\nCYAN='\\033[0;96m'\nYELLOW='\\033[0;93m'\nPURPLE='\\033[0;95m'\nBLUE='\\033[0;94m'\nBOLD='\\033[1m'\nNC='\\033[0m'\n\n## Message Codes\nFAIL=\"${RED}✗${NC}\"\nWARN=\"${PURPLE}!${NC}\"\nGOOD=\"${GREEN}✓${NC}\"\nSTAT=\"${CYAN}∞${NC}\"\nINFO=\"${YELLOW}»${NC}\"\nINF1=\"${CYAN}›${NC}\"\nNEED=\"${BLUE}?${NC}\"\nLOGO=\"${PURPLE}∞${NC}\"\n\n## Echo Stack\n### Informative\nfunction echo_info {\n    echo -e \"${INFO} ${YELLOW}${MESSAGE}${NC}\"\n}\n\nfunction echo_prompt {\n    echo -e \"${INF1} ${CYAN}${MESSAGE}${NC}\"\n}\n\n### Warning\nfunction echo_warn {\n    echo -e \"${WARN} ${PURPLE}${MESSAGE}${NC}\"\n}\n\n### Executing\nfunction echo_stat {\n    echo -en \"${STAT} ${MESSAGE}\"\n}\n\n### Success\nfunction echo_good {\n    echo -e \"\\r${GOOD} ${MESSAGE}\"\n}\n\n### Success\nfunction echo_good_clean {\n    echo -e \"\\r${GOOD} ${MESSAGE}\"\n}\n\n### Failure\nfunction echo_fail {\n    echo -e \"\\r${FAIL} ${MESSAGE}\"\n}\n\n### Request\nfunction echo_need {\n    echo -en \"${NEED} ${BOLD}${MESSAGE}:${NC} \"\n}\n\n### Indent\nfunction echo_over {\n    echo -e \"  ${MESSAGE}\"\n}\n\n### Gravity Sync Logo\nfunction echo_grav {\n    echo -e \"${LOGO} ${BOLD}${MESSAGE}${NC}\"\n}\n\n### Lines\nfunction echo_blank {\n    echo -e \"\"\n}\n\n## Error Validation\nfunction error_validate {\n    if [ \"$?\" != \"0\" ]; then\n        echo_fail\n        exit 1\n    else\n        echo_good\n    fi\n}\n\nfunction start_gs_no_config {\n    MESSAGE=\"Gravity Sync 3.x to 4.0 Migration Utility\"\n    echo_grav\n}\n\nfunction check_old_version {\n    MESSAGE=\"Checking for 3.x Configuration File\"\n    echo_stat\n\n    if [ -f settings/gravity-sync.conf ]; then\n        echo_good\n    else\n        echo_fail\n        exit 1\n    fi\n\n}\n\nfunction install_new_gravity {\n    MESSAGE=\"Installing Gravity Sync 4.0\"\n    echo_info\n\n    if [ -d /etc/gravity-sync/.gs ]; then\n        MESSAGE=\"Removing existing GitHub cache\"\n        echo_stat\n        sudo rm -fr /etc/gravity-sync/.gs\n        error_validate\n    fi\n\n    if [ ! -d /etc/gravity-sync ]; then\n        MESSAGE=\"Creating new configuration directory\"\n        echo_stat\n        sudo mkdir /etc/gravity-sync\n        error_validate\n    fi\n\n    MESSAGE=\"Validating configuration directory permissions\"\n    echo_stat\n    sudo chmod 775 /etc/gravity-sync\n    error_validate\n\n    if [ -f /usr/local/bin/gravity-sync ]; then\n        MESSAGE=\"Removing old Gravity Sync binary\"\n        echo_stat\n        sudo rm -f /usr/local/bin/gravity-sync\n        error_validate\n    fi\n\n    MESSAGE=\"Creating new GitHub cache\"\n    echo_prompt\n\n    sudo git clone https://github.com/vmstan/gravity-sync.git /etc/gravity-sync/.gs\n    \n    # MESSAGE=\"Enabling beta updates\"\n    # echo_stat\n    # sudo touch /etc/gravity-sync/.gs/dev\n    # echo -e \"BRANCH='origin/4.0.0'\" | sudo tee /etc/gravity-sync/.gs/dev 1> /dev/null\n    # error_validate\n\n    sudo cp /etc/gravity-sync/.gs/gravity-sync /usr/local/bin\n}\n\nfunction upgrade_to_4 {\n    MESSAGE=\"Migrating Previous Configuration\"\n    echo_info\n\n    REMOTE_HOST=''\n    REMOTE_USER=''\n\n    PIHOLE_DIR=''\n    RIHOLE_DIR=''\n    DNSMAQ_DIR=''\n    RNSMAQ_DIR=''\n    FILE_OWNER=''\n    RILE_OWNER=''\n    DOCKER_CON=''\n    ROCKER_CON=''\n\n    SSH_PORT=''\n    SSH_PKIF=''\n\n    MESSAGE=\"Reviewing old configuration file settings\"\n    echo_stat\n    source settings/gravity-sync.conf\n    error_validate\n\n    MESSAGE=\"Creating new configuration file from template\"\n    echo_stat\n    sudo cp /etc/gravity-sync/.gs/templates/gravity-sync.conf.example /etc/gravity-sync/gravity-sync.conf\n    error_validate\n    \n    LOCAL_PIHOLE_DIRECTORY=${PIHOLE_DIR}\n    REMOTE_PIHOLE_DIRECTORY=${RIHOLE_DIR}\n    LOCAL_DNSMASQ_DIRECTORY=${DNSMAQ_DIR}\n    REMOTE_DNSMASQ_DIRECTORY=${RNSMAQ_DIR}\n    LOCAL_FILE_OWNER=${FILE_OWNER}\n    REMOTE_FILE_OWNER=${RILE_OWNER}\n    LOCAL_DOCKER_CONTAINER=${DOCKER_CON}\n    REMOTE_DOCKER_CONTAINER=${ROCKER_CON}\n\n    CURRENTUSER=$(whoami)\n    MESSAGE=\"Transferring SSH keys\"\n    echo_stat\n        if [ \"${SSH_PKIF}\" == \"\" ]; then\n            sudo cp $HOME/.ssh/id_rsa /etc/gravity-sync/gravity-sync.rsa\n            sudo cp $HOME/.ssh/id_rsa.pub /etc/gravity-sync/gravity-sync.rsa.pub\n        else\n            sudo cp ${SSH_PKIF} /etc/gravity-sync/gravity-sync.rsa\n            sudo cp ${SSH_PKIF}.pub /etc/gravity-sync/gravity-sync.rsa.pub\n        fi\n    error_validate\n\n    MESSAGE=\"Setting SSH key owner\"\n    echo_stat\n    sudo chown ${CURRENTUSER}:${CURRENTUSER} /etc/gravity-sync/gravity-sync.rsa\n    sudo chown ${CURRENTUSER}:${CURRENTUSER} /etc/gravity-sync/gravity-sync.rsa.pub\n    error_validate\n\n    MESSAGE=\"Migrating remote host settings\"\n    echo_stat\n    sudo sed -i \"/REMOTE_HOST=''/c\\REMOTE_HOST='${REMOTE_HOST}'\" /etc/gravity-sync/gravity-sync.conf\n    error_validate\n    \n    MESSAGE=\"Migrating remote user settings\"\n    echo_stat\n    sudo sed -i \"/REMOTE_USER=''/c\\REMOTE_USER='${REMOTE_USER}'\" /etc/gravity-sync/gravity-sync.conf\n    error_validate\n\n    if [ \"${SSH_PORT}\" != \"\" ]; then\n        GS_SSH_PORT=${SSH_PORT}\n        MESSAGE=\"Migrating target host SSH settings\"\n        echo_stat\n        echo -e \"GS_SSH_PORT='${GS_SSH_PORT}\" | sudo tee -a /etc/gravity-sync/gravity-sync.conf 1> /dev/null\n        error_validate\n    fi\n\n    if [ \"${LOCAL_PIHOLE_DIRECTORY}\" == '' ] || [ \"${LOCAL_PIHOLE_DIRECTORY}\" == '/etc/pihole' ]; then\n        MESSAGE=\"Defaulting local Pi-hole directory setting\"\n        echo_good_clean\n    else\n        MESSAGE=\"Migrating local Pi-hole directory setting\"\n        echo_stat\n        sudo sed -i \"/LOCAL_PIHOLE_DIRECTORY=''/c\\LOCAL_PIHOLE_DIRECTORY='${LOCAL_PIHOLE_DIRECTORY}'\" /etc/gravity-sync/gravity-sync.conf\n        error_validate\n    fi\n\n    if [ \"${REMOTE_PIHOLE_DIRECTORY}\" == '' ] || [ \"${REMOTE_PIHOLE_DIRECTORY}\" == '/etc/pihole' ]; then\n        MESSAGE=\"Defaulting remote Pi-hole directory setting\"\n        echo_good_clean\n    else\n        MESSAGE=\"Migrating remote Pi-hole directory setting\"\n        echo_stat\n        sudo sed -i \"/REMOTE_PIHOLE_DIRECTORY=''/c\\REMOTE_PIHOLE_DIRECTORY='${REMOTE_PIHOLE_DIRECTORY}'\" /etc/gravity-sync/gravity-sync.conf\n        error_validate\n    fi\n\n    if [ \"${LOCAL_DNSMASQ_DIRECTORY}\" == '' ] || [ \"${LOCAL_DNSMASQ_DIRECTORY}\" == '/etc/dnsmasq.d' ]; then\n        MESSAGE=\"Defaulting local DNSMASQ directory setting\"\n        echo_good_clean\n    else\n        MESSAGE=\"Migrating local DNSMASQ directory setting\"\n        echo_stat\n        sudo sed -i \"/LOCAL_DNSMASQ_DIRECTORY=''/c\\LOCAL_DNSMASQ_DIRECTORY='${LOCAL_DNSMASQ_DIRECTORY}'\" /etc/gravity-sync/gravity-sync.conf\n        error_validate\n    fi\n\n    if [ \"${REMOTE_DNSMASQ_DIRECTORY}\" == '' ] || [ \"${REMOTE_DNSMASQ_DIRECTORY}\" == '/etc/dnsmasq.d' ]; then\n        MESSAGE=\"Defaulting remote DNSMASQ directory setting\"\n        echo_good_clean\n    else\n        MESSAGE=\"Migrating remote DNSMASQ directory setting\"\n        echo_stat\n        sudo sed -i \"/REMOTE_DNSMASQ_DIRECTORY=''/c\\REMOTE_DNSMASQ_DIRECTORY='${REMOTE_DNSMASQ_DIRECTORY}'\" /etc/gravity-sync/gravity-sync.conf\n        error_validate\n    fi\n\n    if [ \"${LOCAL_FILE_OWNER}\" == '' ]; then\n        MESSAGE=\"Defaulting local file owner setting\"\n        echo_good_clean\n    else\n        MESSAGE=\"Migrating local file owner setting\"\n        echo_stat\n        sudo sed -i \"/LOCAL_FILE_OWNER=''/c\\LOCAL_FILE_OWNER='${LOCAL_FILE_OWNER}'\" /etc/gravity-sync/gravity-sync.conf\n        error_validate\n    fi\n\n    if [ \"${REMOTE_FILE_OWNER}\" == '' ]; then\n        MESSAGE=\"Defaulting remote file owner setting\"\n        echo_good_clean\n    else\n        MESSAGE=\"Migrating remote file owner setting\"\n        echo_stat\n        sudo sed -i \"/REMOTE_FILE_OWNER=''/c\\REMOTE_FILE_OWNER='${REMOTE_FILE_OWNER}'\" /etc/gravity-sync/gravity-sync.conf\n        error_validate\n    fi\n\n    if [ \"${LOCAL_DOCKER_CONTAINER}\" == '' ] || [ \"${LOCAL_DOCKER_CONTAINER}\" == 'pihole' ]; then\n        MESSAGE=\"Defaulting local Pi-hole container setting\"\n        echo_good_clean\n    else\n        MESSAGE=\"Migrating local Pi-hole container setting\"\n        echo_stat\n        sudo sed -i \"/LOCAL_DOCKER_CONTAINER=''/c\\LOCAL_DOCKER_CONTAINER='${LOCAL_DOCKER_CONTAINER}'\" /etc/gravity-sync/gravity-sync.conf\n        error_validate\n    fi\n\n    if [ \"${REMOTE_DOCKER_CONTAINER}\" == '' ] || [ \"${REMOTE_DOCKER_CONTAINER}\" == 'pihole' ]; then\n        MESSAGE=\"Defaulting remote Pi-hole container setting\"\n        echo_good_clean\n    else\n        MESSAGE=\"Migrating local Pi-hole container setting\"\n        echo_stat\n        sudo sed -i \"/REMOTE_DOCKER_CONTAINER=''/c\\REMOTE_DOCKER_CONTAINER='${REMOTE_DOCKER_CONTAINER}'\" /etc/gravity-sync/gravity-sync.conf\n        error_validate\n    fi\n\n    MESSAGE=\"Migrating task history\"\n    echo_stat\n    sudo cp logs/gravity-sync.log /etc/gravity-sync/gs-sync.log\n    error_validate\n\n    MESSAGE=\"Migrating hashing tables\"\n    echo_stat\n    if [ -f \"logs/gravity-sync.md5\" ]; then\n        REMOTE_DB_MD5=$(sed \"1q;d\" logs/gravity-sync.md5)\n        LOCAL_DB_MD5=$(sed \"2q;d\" logs/gravity-sync.md5)\n        REMOTE_CL_MD5=$(sed \"3q;d\" logs/gravity-sync.md5)\n        LOCAL_CL_MD5=$(sed \"4q;d\" logs/gravity-sync.md5)\n        REMOTE_CN_MD5=$(sed \"5q;d\" logs/gravity-sync.md5)\n        LOCAL_CN_MD5=$(sed \"6q;d\" logs/gravity-sync.md5)\n        \n        echo -e ${REMOTE_DB_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_GRAVITY_FI_MD5_LOG} 1> /dev/null\n        echo -e ${LOCAL_DB_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_GRAVITY_FI_MD5_LOG} 1> /dev/null\n        echo -e ${REMOTE_CL_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_CUSTOM_DNS_MD5_LOG} 1> /dev/null\n        echo -e ${LOCAL_CL_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_CUSTOM_DNS_MD5_LOG} 1> /dev/null\n        echo -e ${REMOTE_CN_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_CNAME_CONF_MD5_LOG} 1> /dev/null\n        echo -e ${LOCAL_CN_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_CNAME_CONF_MD5_LOG} 1> /dev/null\n    else\n        REMOTE_DB_MD5=\"0\"\n        LOCAL_DB_MD5=\"0\"\n        REMOTE_CL_MD5=\"0\"\n        LOCAL_CL_MD5=\"0\"\n        REMOTE_CN_MD5=\"0\"\n        LOCAL_CN_MD5=\"0\"\n\n        echo -e ${REMOTE_DB_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_GRAVITY_FI_MD5_LOG} 1> /dev/null\n        echo -e ${LOCAL_DB_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_GRAVITY_FI_MD5_LOG} 1> /dev/null\n        echo -e ${REMOTE_CL_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_CUSTOM_DNS_MD5_LOG} 1> /dev/null\n        echo -e ${LOCAL_CL_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_CUSTOM_DNS_MD5_LOG} 1> /dev/null\n        echo -e ${REMOTE_CN_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_CNAME_CONF_MD5_LOG} 1> /dev/null\n        echo -e ${LOCAL_CN_MD5} | sudo tee -a ${GS_ETC_PATH}/${GS_CNAME_CONF_MD5_LOG} 1> /dev/null\n    fi\n    error_validate\n}\n\nfunction remove_old_version {\n    MESSAGE=\"Removing Old Version & Settings\"\n    echo_info\n\n    if hash crontab 2>/dev/null; then\n        MESSAGE=\"Clearing automation from crontab\"\n        echo_stat\n            crontab -l > cronjob-old.tmp\n            sed \"/gravity-sync.sh/d\" cronjob-old.tmp > cronjob-new.tmp\n            crontab cronjob-new.tmp\n        error_validate\n    fi\n\n    kill_automation_service\n\n    if [ -f /etc/bash.bashrc ]; then\n         MESSAGE=\"Cleaning up bash.bashrc\"\n         echo_info\n         sudo sed -i \"/gravity-sync.sh/d\" /etc/bash.bashrc\n         error_validate\n    fi\n\n    MESSAGE=\"Removing old Gravity Sync folder\"\n    echo_stat\n    sudo rm -fr ${LOCAL_FOLDR}\n    error_validate\n}\n\nfunction kill_automation_service {\n    if systemctl is-active --quiet gravity-sync.timer; then\n        MESSAGE=\"Stopping ${PROGRAM} timer\"\n        echo_stat\n        sudo systemctl stop gravity-sync\n        error_validate\n\n        MESSAGE=\"Disabling ${PROGRAM} automation service\"\n        echo_stat\n        sudo systemctl disable gravity-sync --quiet\n        error_validate\n\n        MESSAGE=\"Removing systemd timer\"\n        echo_stat\n        sudo rm -f ${OS_DAEMON_PATH}/gravity-sync.timer\n        error_validate\n\n        MESSAGE=\"Removing systemd service\"\n        echo_stat\n        sudo rm -f ${OS_DAEMON_PATH}/gravity-sync.service\n        error_validate\n\n        MESSAGE=\"Reloading systemd daemon\"\n        echo_stat\n        sudo systemctl daemon-reload --quiet\n        error_validate\n    fi\n}\n\nfunction end_migration {\n    MESSAGE=\"Migration Complete\"\n    echo_info\n\n\n}\n\n# SCRIPT EXECUTION ###########################\n\ncase $# in\n    0)\n        start_gs_no_config\n        check_old_version\n        install_new_gravity\n        upgrade_to_4 \n        remove_old_version \n        end_migration ;;\n    1)\n        case $1 in\n            *)\n                start_gs_no_config\n                check_old_version\n                install_new_gravity\n                upgrade_to_4 \n                remove_old_version\n                end_migration ;;\n        esac\n    ;;\n    \n    *)\n        start_gs_no_config\n        check_old_version\n        install_new_gravity\n        upgrade_to_4 \n        remove_old_version\n        end_migration ;;\nesac\n\n# END OF SCRIPT ##############################"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 0.4189453125,
          "content": "#!/usr/bin/env bash\n\nGS_LOCAL_REPO='/etc/gravity-sync/.gs'\n\n    if [ -f \"${GS_LOCAL_REPO}/dev\" ]; then\n        source ${GS_LOCAL_REPO}/dev\n    else\n        BRANCH='origin/master'\n    fi\n    \n    if [ \"$BRANCH\" != \"origin/master\" ]; then\n        echo -e \"Pulling from ${BRANCH}\"\n    fi\n    \n    (cd ${GS_LOCAL_REPO}; sudo git fetch --all; sudo git reset --hard ${BRANCH}; sudo cp gravity-sync /usr/local/bin; sudo git clean -fq)\n\n"
        }
      ]
    }
  ]
}