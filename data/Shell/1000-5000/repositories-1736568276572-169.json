{
  "metadata": {
    "timestamp": 1736568276572,
    "page": 169,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vdsm/virtual-dsm",
      "stars": 2848,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.162109375,
          "content": ".dockerignore\n.git\n.github\n.gitignore\n.gitlab-ci.yml\n.gitmodules\nDockerfile\nDockerfile.archive\ncompose.yml\ncompose.yaml\ndocker-compose.yml\ndocker-compose.yaml\n\n*.md\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0087890625,
          "content": "build.sh\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.6396484375,
          "content": "FROM qemux/qemu-host:2.05 AS builder\n\n#  FROM golang as builder\n#  WORKDIR /\n#  RUN git clone https://github.com/qemus/qemu-host.git\n#  WORKDIR /qemu-host/src\n#  RUN go mod download\n#  RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o /qemu-host.bin .\n\nFROM debian:trixie-slim\n\nARG TARGETPLATFORM\nARG VERSION_ARG=\"0.0\"\nARG DEBCONF_NOWARNINGS=\"yes\"\nARG DEBIAN_FRONTEND=\"noninteractive\"\nARG DEBCONF_NONINTERACTIVE_SEEN=\"true\"\n\nRUN set -eu && extra=\"\" && \\\n    if [ \"$TARGETPLATFORM\" != \"linux/amd64\" ]; then extra=\"qemu-user\"; fi && \\\n    apt-get update && \\\n    apt-get --no-install-recommends -y install \\\n        jq \\\n        tini \\\n        curl \\\n        cpio \\\n        wget \\\n        fdisk \\\n        unzip \\\n        nginx \\\n        procps \\\n        xz-utils \\\n        iptables \\\n        iproute2 \\\n        apt-utils \\\n        dnsmasq \\\n        fakeroot \\\n        net-tools \\\n        qemu-utils \\\n        ca-certificates \\\n        netcat-openbsd \\\n        qemu-system-x86 \\\n        \"$extra\" && \\\n    apt-get clean && \\\n    unlink /etc/nginx/sites-enabled/default && \\\n    sed -i 's/^worker_processes.*/worker_processes 1;/' /etc/nginx/nginx.conf && \\\n    echo \"$VERSION_ARG\" > /run/version && \\\n    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nCOPY --chmod=755 ./src /run/\nCOPY --chmod=755 ./web /var/www/\nCOPY --chmod=755 --from=builder /qemu-host.bin /run/host.bin\nCOPY --chmod=744 ./web/nginx.conf /etc/nginx/sites-enabled/web.conf\n\nVOLUME /storage\nEXPOSE 22 139 445 5000\n\nENV RAM_SIZE=\"1G\"\nENV DISK_SIZE=\"16G\"\nENV CPU_CORES=\"1\"\n\nHEALTHCHECK --interval=60s --start-period=45s --retries=2 CMD /run/check.sh\n\nENTRYPOINT [\"/usr/bin/tini\", \"-s\", \"/run/entry.sh\"]\n"
        },
        {
          "name": "compose.yml",
          "type": "blob",
          "size": 0.353515625,
          "content": "services:\n    dsm:\n        container_name: dsm\n        image: vdsm/virtual-dsm:latest\n        environment:\n            DISK_SIZE: \"16G\"\n        devices:\n            - /dev/kvm\n            - /dev/net/tun\n        cap_add:\n            - NET_ADMIN\n        ports:\n            - 5000:5000\n        volumes:\n            - /var/dsm:/storage\n        stop_grace_period: 2m\n"
        },
        {
          "name": "kubernetes.yml",
          "type": "blob",
          "size": 1.08984375,
          "content": "---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: dsm-pvc\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 16Gi\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dsm\n  labels:\n    name: dsm\nspec:\n  containers:\n  - name: dsm\n    image: vdsm/virtual-dsm\n    env:\n    - name: RAM_SIZE\n      value: \"1G\"\n    - name: CPU_CORES\n      value: \"1\"\n    - name: DISK_SIZE\n      value: \"16G\"\n    ports:\n    - containerPort: 5000\n    securityContext:\n      capabilities:\n        add:\n        - NET_ADMIN\n      privileged: true\n    volumeMounts:\n    - mountPath: /storage\n      name: storage\n    - mountPath: /dev/kvm\n      name: dev-kvm\n    - mountPath: /dev/net/tun\n      name: dev-tun\n  terminationGracePeriodSeconds: 120\n  volumes:\n  - name: storage\n    persistentVolumeClaim:\n      claimName: dsm-pvc\n  - hostPath:\n      path: /dev/kvm\n    name: dev-kvm\n  - hostPath:\n      path: /dev/net/tun\n      type: CharDevice\n    name: dev-tun\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: dsm\nspec:\n  ports:\n  - name: tcp-5000\n    port: 5000\n  selector:\n    name: dsm\n  type: NodePort\n"
        },
        {
          "name": "license.md",
          "type": "blob",
          "size": 1.01171875,
          "content": "MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 9.654296875,
          "content": "<h1 align=\"center\">Virtual DSM<br />\n<div align=\"center\">\n<a href=\"https://github.com/vdsm/virtual-dsm\"><img src=\"https://github.com/vdsm/virtual-dsm/raw/master/.github/screen.jpg\" title=\"Screenshot\" style=\"max-width:100%;\" width=\"432\" /></a>\n</div>\n<div align=\"center\">\n\n[![Build]][build_url]\n[![Version]][tag_url]\n[![Size]][tag_url]\n[![Package]][pkg_url]\n[![Pulls]][hub_url]\n\n</div></h1>\n\nVirtual DSM in a Docker container.\n\n## Features ✨\n\n - Multiple disks\n - KVM acceleration\n - Upgrades supported\n \n## Usage  🐳\n\nVia Docker Compose:\n\n```yaml\nservices:\n  dsm:\n    container_name: dsm\n    image: vdsm/virtual-dsm\n    environment:\n      DISK_SIZE: \"16G\"\n    devices:\n      - /dev/kvm\n      - /dev/net/tun\n    cap_add:\n      - NET_ADMIN\n    ports:\n      - 5000:5000\n    volumes:\n      - /var/dsm:/storage\n    stop_grace_period: 2m\n```\n\nVia Docker CLI:\n\n```bash\ndocker run -it --rm -p 5000:5000 --device=/dev/kvm --device=/dev/net/tun --cap-add NET_ADMIN --stop-timeout 120 vdsm/virtual-dsm\n```\n\nVia Kubernetes:\n\n```shell\nkubectl apply -f https://raw.githubusercontent.com/vdsm/virtual-dsm/refs/heads/master/kubernetes.yml\n```\n\n## Compatibility ⚙️\n\n| **Product**  | **Platform**   | |\n|---|---|---|\n| Docker Engine | Linux| ✅ |\n| Docker Desktop | Linux | ❌ |\n| Docker Desktop | macOS | ❌ |\n| Docker Desktop | Windows 11 | ✅ |\n| Docker Desktop | Windows 10 | ❌ |\n\n## FAQ 💬\n\n### How do I use it?\n\n  Very simple! These are the steps:\n  \n  - Start the container and connect to [port 5000](http://localhost:5000) using your web browser.\n\n  - Wait until DSM is ready, choose an username and password, and you will be taken to the desktop.\n  \n  Enjoy your brand new NAS, and don't forget to star this repo!\n\n### How do I change the storage location?\n\n  To change the storage location, include the following bind mount in your compose file:\n\n  ```yaml\n  volumes:\n    - /var/dsm:/storage\n  ```\n\n  Replace the example path `/var/dsm` with the desired storage folder.\n \n### How do I change the size of the disk?\n\n  To expand the default size of 16 GB, locate the `DISK_SIZE` setting in your compose file and modify it to your preferred capacity:\n\n  ```yaml\n  environment:\n    DISK_SIZE: \"128G\"\n  ```\n  \n> [!TIP]\n> This can also be used to resize the existing disk to a larger capacity without any data loss.\n\n### How do I create a growable disk?\n\n  By default, the entire capacity of the disk is reserved in advance.\n\n  To create a growable disk that only allocates space that is actually used, add the following environment variable:\n\n  ```yaml\n  environment:\n    DISK_FMT: \"qcow2\"\n  ```\n\n> [!NOTE]\n> This may reduce the write performance of the disk.\n\n### How do I add multiple disks?\n\n  To create additional disks, modify your compose file like this:\n  \n  ```yaml\n  environment:\n    DISK2_SIZE: \"32G\"\n    DISK3_SIZE: \"64G\"\n  volumes:\n    - /home/example:/storage2\n    - /mnt/data/example:/storage3\n  ```\n\n### How do I pass-through a disk?\n\n   It is possible to pass-through a disk device directly, by adding it to your compose file in this way:\n\n  ```yaml\n  devices:\n    - /dev/disk/by-uuid/12345-12345-12345-12345-12345:/disk2\n  ```\n\n  Make sure to bind the disk via its UUID (obtainable via `lsblk -o name,uuid`) instead of its name (`/dev/sdc`), to prevent ever binding the wrong disk when the drive letters happen to change. \n\n> [!IMPORTANT]\n> The device needs to be totally empty (without any partition table) otherwise DSM does not always format it into a volume.\n\n> [!CAUTION]\n> Do NOT use this feature with the goal of sharing files from the host, they will all be lost without warning when DSM creates the volume.\n\n### How do I change the amount of CPU or RAM?\n\n  By default, the container will be allowed to use a maximum of 1 CPU core and 1 GB of RAM.\n\n  If you want to adjust this, you can specify the desired amount using the following environment variables:\n\n  ```yaml\n  environment:\n    RAM_SIZE: \"4G\"\n    CPU_CORES: \"4\"\n  ```\n\n### How do I verify if my system supports KVM?\n\n  Only Linux and Windows 11 support KVM virtualization, macOS and Windows 10 do not unfortunately.\n  \n  You can run the following commands in Linux to check your system:\n\n  ```bash\n  sudo apt install cpu-checker\n  sudo kvm-ok\n  ```\n\n  If you receive an error from `kvm-ok` indicating that KVM cannot be used, please check whether:\n\n  - the virtualization extensions (`Intel VT-x` or `AMD SVM`) are enabled in your BIOS.\n\n  - you enabled \"nested virtualization\" if you are running the container inside a virtual machine.\n\n  - you are not using a cloud provider, as most of them do not allow nested virtualization for their VPS's.\n\n  If you do not receive any error from `kvm-ok` but the container still complains about KVM, please check whether:\n\n  - you are not using \"Docker Desktop for Linux\" as it does not support KVM, instead make use of Docker Engine directly.\n \n  - it could help to add `privileged: true` to your compose file (or `sudo` to your `docker run` command), to rule out any permission issue.\n\n### How do I assign an individual IP address to the container?\n\n  By default, the container uses bridge networking, which shares the IP address with the host. \n\n  If you want to assign an individual IP address to the container, you can create a macvlan network as follows:\n\n  ```bash\n  docker network create -d macvlan \\\n      --subnet=192.168.0.0/24 \\\n      --gateway=192.168.0.1 \\\n      --ip-range=192.168.0.100/28 \\\n      -o parent=eth0 vdsm\n  ```\n  \n  Be sure to modify these values to match your local subnet. \n\n  Once you have created the network, change your compose file to look as follows:\n\n  ```yaml\n  services:\n    dsm:\n      container_name: dsm\n      ..<snip>..\n      networks:\n        vdsm:\n          ipv4_address: 192.168.0.100\n\n  networks:\n    vdsm:\n      external: true\n  ```\n \n  An added benefit of this approach is that you won't have to perform any port mapping anymore, since all ports will be exposed by default.\n\n> [!IMPORTANT]\n> This IP address won't be accessible from the Docker host due to the design of macvlan, which doesn't permit communication between the two. If this is a concern, you need to create a [second macvlan](https://blog.oddbit.com/post/2018-03-12-using-docker-macvlan-networks/#host-access) as a workaround.\n\n### How can DSM acquire an IP address from my router?\n\n  After configuring the container for [macvlan](#how-do-i-assign-an-individual-ip-address-to-the-container), it is possible for DSM to become part of your home network by requesting an IP from your router, just like your other devices.\n\n  To enable this mode, add the following lines to your compose file:\n\n  ```yaml\n  environment:\n    DHCP: \"Y\"\n  devices:\n    - /dev/vhost-net\n  device_cgroup_rules:\n    - 'c *:* rwm'\n  ```\n\n> [!NOTE]\n> In this mode, the container and DSM will each have their own separate IPs.\n\n### How do I pass-through the GPU?\n\n  To pass-through your Intel GPU, add the following lines to your compose file:\n\n  ```yaml\n  environment:\n    GPU: \"Y\"\n  devices:\n    - /dev/dri\n  ```\n\n> [!TIP]\n> This can be used to enable the facial recognition function in Synology Photos for example.\n\n### How do I install a specific version of vDSM?\n\n  By default, version 7.2 will be installed, but if you prefer an older version, you can add its download URL to your compose file as follows:\n\n  ```yaml\n  environment:\n    URL: \"https://global.synologydownload.com/download/DSM/release/7.0.1/42218/DSM_VirtualDSM_42218.pat\"\n  ```\n\n  With this method, it is even possible to switch between different versions while keeping all your file data intact.\n\n  If you don't have internet access, it's also possible to skip the download by setting URL to:\n\n  ```yaml\n  environment:\n    URL: \"DSM_VirtualDSM_42218.pat\"\n  ```\n\n  after placing a file called `DSM_VirtualDSM_42218.pat` in your `/storage` folder.\n\n### What are the differences compared to the standard DSM?\n\n  There are only two minor differences: the Virtual Machine Manager package is not available, and Surveillance Station will not include any free licenses.\n  \n### Is this project legal?\n\n  Yes, this project contains only open-source code and does not distribute any copyrighted material. Neither does it try to circumvent any copyright protection measures. So under all applicable laws, this project will be considered legal. \n  \n  However, by installing Synology's Virtual DSM, you must accept their end-user license agreement, which does not permit installation on non-Synology hardware. So only run this container on an official Synology NAS, as any other use will be a violation of their terms and conditions.\n\n## Stars 🌟\n[![Stars](https://starchart.cc/vdsm/virtual-dsm.svg?variant=adaptive)](https://starchart.cc/vdsm/virtual-dsm)\n\n## Disclaimer ⚖️\n\n*Only run this container on Synology hardware, any other use is not permitted by their EULA. The product names, logos, brands, and other trademarks referred to within this project are the property of their respective trademark holders. This project is not affiliated, sponsored, or endorsed by Synology, Inc.*\n\n[build_url]: https://github.com/vdsm/virtual-dsm/\n[hub_url]: https://hub.docker.com/r/vdsm/virtual-dsm\n[tag_url]: https://hub.docker.com/r/vdsm/virtual-dsm/tags\n[pkg_url]: https://github.com/vdsm/virtual-dsm/pkgs/container/virtual-dsm\n\n[Build]: https://github.com/vdsm/virtual-dsm/actions/workflows/build.yml/badge.svg\n[Size]: https://img.shields.io/docker/image-size/vdsm/virtual-dsm/latest?color=066da5&label=size\n[Pulls]: https://img.shields.io/docker/pulls/vdsm/virtual-dsm.svg?style=flat&label=pulls&logo=docker\n[Version]: https://img.shields.io/docker/v/vdsm/virtual-dsm/latest?arch=amd64&sort=semver&color=066da5\n[Package]: https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fipitio.github.io%2Fbackage%2Fvdsm%2Fvirtual-dsm%2Fvirtual-dsm.json&query=%24.downloads&logo=github&style=flat&color=066da5&label=pulls\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}